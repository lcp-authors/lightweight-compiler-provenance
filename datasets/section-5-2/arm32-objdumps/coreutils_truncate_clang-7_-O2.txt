
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010d70 <.init>:
   10d70:	push	{r3, lr}
   10d74:	bl	11024 <__assert_fail@plt+0x48>
   10d78:	pop	{r3, pc}

Disassembly of section .plt:

00010d7c <calloc@plt-0x14>:
   10d7c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d80:	ldr	lr, [pc, #4]	; 10d8c <calloc@plt-0x4>
   10d84:	add	lr, pc, lr
   10d88:	ldr	pc, [lr, #8]!
   10d8c:	andeq	r7, r1, r4, ror r2

00010d90 <calloc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #94208	; 0x17000
   10d98:	ldr	pc, [ip, #628]!	; 0x274

00010d9c <fputs_unlocked@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #94208	; 0x17000
   10da4:	ldr	pc, [ip, #620]!	; 0x26c

00010da8 <raise@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #94208	; 0x17000
   10db0:	ldr	pc, [ip, #612]!	; 0x264

00010db4 <strcmp@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #94208	; 0x17000
   10dbc:	ldr	pc, [ip, #604]!	; 0x25c

00010dc0 <fflush@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #94208	; 0x17000
   10dc8:	ldr	pc, [ip, #596]!	; 0x254

00010dcc <free@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #94208	; 0x17000
   10dd4:	ldr	pc, [ip, #588]!	; 0x24c

00010dd8 <_exit@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #94208	; 0x17000
   10de0:	ldr	pc, [ip, #580]!	; 0x244

00010de4 <memcpy@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #94208	; 0x17000
   10dec:	ldr	pc, [ip, #572]!	; 0x23c

00010df0 <mbsinit@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #564]!	; 0x234

00010dfc <ftruncate64@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #556]!	; 0x22c

00010e08 <memcmp@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #548]!	; 0x224

00010e14 <dcgettext@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #540]!	; 0x21c

00010e20 <realloc@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #532]!	; 0x214

00010e2c <textdomain@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #524]!	; 0x20c

00010e38 <iswprint@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #516]!	; 0x204

00010e44 <__fxstat64@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #508]!	; 0x1fc

00010e50 <fwrite@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #500]!	; 0x1f4

00010e5c <lseek64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #492]!	; 0x1ec

00010e68 <__ctype_get_mb_cur_max@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #484]!	; 0x1e4

00010e74 <__fpending@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #476]!	; 0x1dc

00010e80 <mbrtowc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #468]!	; 0x1d4

00010e8c <error@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #460]!	; 0x1cc

00010e98 <open64@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea4 <malloc@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #444]!	; 0x1bc

00010eb0 <__libc_start_main@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #436]!	; 0x1b4

00010ebc <__freading@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #428]!	; 0x1ac

00010ec8 <__gmon_start__@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed4 <getopt_long@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #412]!	; 0x19c

00010ee0 <__ctype_b_loc@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #404]!	; 0x194

00010eec <exit@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #396]!	; 0x18c

00010ef8 <strlen@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #388]!	; 0x184

00010f04 <strchr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #380]!	; 0x17c

00010f10 <__errno_location@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #372]!	; 0x174

00010f1c <__cxa_atexit@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #364]!	; 0x16c

00010f28 <memset@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #356]!	; 0x164

00010f34 <__printf_chk@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #348]!	; 0x15c

00010f40 <fileno@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #340]!	; 0x154

00010f4c <__fprintf_chk@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #332]!	; 0x14c

00010f58 <fclose@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #324]!	; 0x144

00010f64 <fseeko64@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #316]!	; 0x13c

00010f70 <setlocale@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #308]!	; 0x134

00010f7c <strrchr@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #300]!	; 0x12c

00010f88 <nl_langinfo@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #292]!	; 0x124

00010f94 <__strtoll_internal@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #284]!	; 0x11c

00010fa0 <bindtextdomain@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #276]!	; 0x114

00010fac <__xstat64@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #268]!	; 0x10c

00010fb8 <strncmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #260]!	; 0x104

00010fc4 <abort@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #252]!	; 0xfc

00010fd0 <close@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #244]!	; 0xf4

00010fdc <__assert_fail@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #236]!	; 0xec

Disassembly of section .text:

00010fe8 <.text>:
   10fe8:	mov	fp, #0
   10fec:	mov	lr, #0
   10ff0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ff4:	mov	r2, sp
   10ff8:	push	{r2}		; (str r2, [sp, #-4]!)
   10ffc:	push	{r0}		; (str r0, [sp, #-4]!)
   11000:	ldr	ip, [pc, #16]	; 11018 <__assert_fail@plt+0x3c>
   11004:	push	{ip}		; (str ip, [sp, #-4]!)
   11008:	ldr	r0, [pc, #12]	; 1101c <__assert_fail@plt+0x40>
   1100c:	ldr	r3, [pc, #12]	; 11020 <__assert_fail@plt+0x44>
   11010:	bl	10eb0 <__libc_start_main@plt>
   11014:	bl	10fc4 <abort@plt>
   11018:	muleq	r1, ip, ip
   1101c:	andeq	r1, r1, r4, asr #7
   11020:	andeq	r6, r1, ip, lsr ip
   11024:	ldr	r3, [pc, #20]	; 11040 <__assert_fail@plt+0x64>
   11028:	ldr	r2, [pc, #20]	; 11044 <__assert_fail@plt+0x68>
   1102c:	add	r3, pc, r3
   11030:	ldr	r2, [r3, r2]
   11034:	cmp	r2, #0
   11038:	bxeq	lr
   1103c:	b	10ec8 <__gmon_start__@plt>
   11040:	andeq	r6, r1, ip, asr #31
   11044:	ldrdeq	r0, [r0], -r4
   11048:	ldr	r0, [pc, #24]	; 11068 <__assert_fail@plt+0x8c>
   1104c:	ldr	r3, [pc, #24]	; 1106c <__assert_fail@plt+0x90>
   11050:	cmp	r3, r0
   11054:	bxeq	lr
   11058:	ldr	r3, [pc, #16]	; 11070 <__assert_fail@plt+0x94>
   1105c:	cmp	r3, #0
   11060:	bxeq	lr
   11064:	bx	r3
   11068:	andeq	r8, r2, r8, lsr #2
   1106c:	andeq	r8, r2, r8, lsr #2
   11070:	andeq	r0, r0, r0
   11074:	ldr	r0, [pc, #36]	; 110a0 <__assert_fail@plt+0xc4>
   11078:	ldr	r1, [pc, #36]	; 110a4 <__assert_fail@plt+0xc8>
   1107c:	sub	r1, r1, r0
   11080:	asr	r1, r1, #2
   11084:	add	r1, r1, r1, lsr #31
   11088:	asrs	r1, r1, #1
   1108c:	bxeq	lr
   11090:	ldr	r3, [pc, #16]	; 110a8 <__assert_fail@plt+0xcc>
   11094:	cmp	r3, #0
   11098:	bxeq	lr
   1109c:	bx	r3
   110a0:	andeq	r8, r2, r8, lsr #2
   110a4:	andeq	r8, r2, r8, lsr #2
   110a8:	andeq	r0, r0, r0
   110ac:	push	{r4, lr}
   110b0:	ldr	r4, [pc, #24]	; 110d0 <__assert_fail@plt+0xf4>
   110b4:	ldrb	r3, [r4]
   110b8:	cmp	r3, #0
   110bc:	popne	{r4, pc}
   110c0:	bl	11048 <__assert_fail@plt+0x6c>
   110c4:	mov	r3, #1
   110c8:	strb	r3, [r4]
   110cc:	pop	{r4, pc}
   110d0:	andeq	r8, r2, r4, asr #2
   110d4:	b	11074 <__assert_fail@plt+0x98>
   110d8:	push	{fp, lr}
   110dc:	mov	fp, sp
   110e0:	sub	sp, sp, #56	; 0x38
   110e4:	mov	r4, r0
   110e8:	cmp	r0, #0
   110ec:	bne	11380 <__assert_fail@plt+0x3a4>
   110f0:	movw	r1, #27883	; 0x6ceb
   110f4:	mov	r0, #0
   110f8:	mov	r2, #5
   110fc:	movt	r1, #1
   11100:	bl	10e14 <dcgettext@plt>
   11104:	mov	r1, r0
   11108:	movw	r0, #33112	; 0x8158
   1110c:	movt	r0, #2
   11110:	ldr	r2, [r0]
   11114:	mov	r0, #1
   11118:	bl	10f34 <__printf_chk@plt>
   1111c:	movw	r1, #27912	; 0x6d08
   11120:	mov	r0, #0
   11124:	mov	r2, #5
   11128:	movt	r1, #1
   1112c:	bl	10e14 <dcgettext@plt>
   11130:	movw	r7, #33084	; 0x813c
   11134:	movt	r7, #2
   11138:	ldr	r1, [r7]
   1113c:	bl	10d9c <fputs_unlocked@plt>
   11140:	movw	r1, #29111	; 0x71b7
   11144:	mov	r0, #0
   11148:	mov	r2, #5
   1114c:	movt	r1, #1
   11150:	bl	10e14 <dcgettext@plt>
   11154:	ldr	r1, [r7]
   11158:	bl	10d9c <fputs_unlocked@plt>
   1115c:	movw	r1, #28187	; 0x6e1b
   11160:	mov	r0, #0
   11164:	mov	r2, #5
   11168:	movt	r1, #1
   1116c:	bl	10e14 <dcgettext@plt>
   11170:	ldr	r1, [r7]
   11174:	bl	10d9c <fputs_unlocked@plt>
   11178:	movw	r1, #28237	; 0x6e4d
   1117c:	mov	r0, #0
   11180:	mov	r2, #5
   11184:	movt	r1, #1
   11188:	bl	10e14 <dcgettext@plt>
   1118c:	ldr	r1, [r7]
   11190:	bl	10d9c <fputs_unlocked@plt>
   11194:	movw	r1, #28314	; 0x6e9a
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e14 <dcgettext@plt>
   111a8:	ldr	r1, [r7]
   111ac:	bl	10d9c <fputs_unlocked@plt>
   111b0:	movw	r1, #28426	; 0x6f0a
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10e14 <dcgettext@plt>
   111c4:	ldr	r1, [r7]
   111c8:	bl	10d9c <fputs_unlocked@plt>
   111cc:	movw	r1, #28471	; 0x6f37
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	movt	r1, #1
   111dc:	bl	10e14 <dcgettext@plt>
   111e0:	ldr	r1, [r7]
   111e4:	bl	10d9c <fputs_unlocked@plt>
   111e8:	movw	r1, #29186	; 0x7202
   111ec:	mov	r0, #0
   111f0:	mov	r2, #5
   111f4:	movt	r1, #1
   111f8:	bl	10e14 <dcgettext@plt>
   111fc:	ldr	r1, [r7]
   11200:	bl	10d9c <fputs_unlocked@plt>
   11204:	movw	r1, #28525	; 0x6f6d
   11208:	mov	r0, #0
   1120c:	mov	r2, #5
   11210:	movt	r1, #1
   11214:	bl	10e14 <dcgettext@plt>
   11218:	ldr	r1, [r7]
   1121c:	bl	10d9c <fputs_unlocked@plt>
   11220:	movw	r0, #30024	; 0x7548
   11224:	mov	r2, #48	; 0x30
   11228:	mov	r6, sp
   1122c:	movw	r5, #28716	; 0x702c
   11230:	movt	r0, #1
   11234:	movt	r5, #1
   11238:	add	r1, r0, #32
   1123c:	add	r3, r0, #16
   11240:	vld1.64	{d18-d19}, [r0], r2
   11244:	vld1.64	{d16-d17}, [r1]
   11248:	vld1.64	{d20-d21}, [r3]
   1124c:	add	r1, r6, #32
   11250:	vldr	d22, [r0]
   11254:	add	r0, r6, #16
   11258:	vst1.64	{d16-d17}, [r1]
   1125c:	movw	r1, #29398	; 0x72d6
   11260:	vst1.64	{d20-d21}, [r0]
   11264:	mov	r0, r6
   11268:	vst1.64	{d18-d19}, [r0], r2
   1126c:	movt	r1, #1
   11270:	vstr	d22, [r0]
   11274:	mov	r0, r5
   11278:	bl	10db4 <strcmp@plt>
   1127c:	cmp	r0, #0
   11280:	ldrne	r1, [r6, #8]!
   11284:	cmpne	r1, #0
   11288:	bne	11274 <__assert_fail@plt+0x298>
   1128c:	ldr	r6, [r6, #4]
   11290:	movw	r1, #29493	; 0x7335
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	movt	r1, #1
   112a0:	bl	10e14 <dcgettext@plt>
   112a4:	movw	r2, #28840	; 0x70a8
   112a8:	movw	r3, #29516	; 0x734c
   112ac:	mov	r1, r0
   112b0:	mov	r0, #1
   112b4:	movt	r2, #1
   112b8:	movt	r3, #1
   112bc:	bl	10f34 <__printf_chk@plt>
   112c0:	cmp	r6, #0
   112c4:	mov	r0, #5
   112c8:	mov	r1, #0
   112cc:	moveq	r6, r5
   112d0:	bl	10f70 <setlocale@plt>
   112d4:	cmp	r0, #0
   112d8:	beq	11310 <__assert_fail@plt+0x334>
   112dc:	movw	r1, #29556	; 0x7374
   112e0:	mov	r2, #3
   112e4:	movt	r1, #1
   112e8:	bl	10fb8 <strncmp@plt>
   112ec:	cmp	r0, #0
   112f0:	beq	11310 <__assert_fail@plt+0x334>
   112f4:	movw	r1, #29560	; 0x7378
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	movt	r1, #1
   11304:	bl	10e14 <dcgettext@plt>
   11308:	ldr	r1, [r7]
   1130c:	bl	10d9c <fputs_unlocked@plt>
   11310:	movw	r1, #29631	; 0x73bf
   11314:	mov	r0, #0
   11318:	mov	r2, #5
   1131c:	movt	r1, #1
   11320:	bl	10e14 <dcgettext@plt>
   11324:	movw	r2, #29516	; 0x734c
   11328:	mov	r1, r0
   1132c:	mov	r0, #1
   11330:	mov	r3, r5
   11334:	movt	r2, #1
   11338:	bl	10f34 <__printf_chk@plt>
   1133c:	movw	r1, #29658	; 0x73da
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10e14 <dcgettext@plt>
   11350:	movw	r3, #29708	; 0x740c
   11354:	mov	r1, r0
   11358:	movw	r0, #29426	; 0x72f2
   1135c:	cmp	r6, r5
   11360:	mov	r2, r6
   11364:	movt	r0, #1
   11368:	movt	r3, #1
   1136c:	moveq	r3, r0
   11370:	mov	r0, #1
   11374:	bl	10f34 <__printf_chk@plt>
   11378:	mov	r0, r4
   1137c:	bl	10eec <exit@plt>
   11380:	movw	r0, #33080	; 0x8138
   11384:	movw	r1, #27844	; 0x6cc4
   11388:	mov	r2, #5
   1138c:	movt	r0, #2
   11390:	movt	r1, #1
   11394:	ldr	r5, [r0]
   11398:	mov	r0, #0
   1139c:	bl	10e14 <dcgettext@plt>
   113a0:	mov	r2, r0
   113a4:	movw	r0, #33112	; 0x8158
   113a8:	mov	r1, #1
   113ac:	movt	r0, #2
   113b0:	ldr	r3, [r0]
   113b4:	mov	r0, r5
   113b8:	bl	10f4c <__fprintf_chk@plt>
   113bc:	mov	r0, r4
   113c0:	bl	10eec <exit@plt>
   113c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113c8:	add	fp, sp, #28
   113cc:	sub	sp, sp, #172	; 0xac
   113d0:	mov	r5, r0
   113d4:	ldr	r0, [r1]
   113d8:	mov	sl, r1
   113dc:	bl	12108 <__assert_fail@plt+0x112c>
   113e0:	movw	r1, #29708	; 0x740c
   113e4:	mov	r0, #6
   113e8:	movt	r1, #1
   113ec:	bl	10f70 <setlocale@plt>
   113f0:	movw	r4, #28844	; 0x70ac
   113f4:	movw	r1, #28725	; 0x7035
   113f8:	movt	r4, #1
   113fc:	movt	r1, #1
   11400:	mov	r0, r4
   11404:	bl	10fa0 <bindtextdomain@plt>
   11408:	mov	r0, r4
   1140c:	bl	10e2c <textdomain@plt>
   11410:	movw	r0, #8224	; 0x2020
   11414:	movt	r0, #1
   11418:	bl	16ca0 <__assert_fail@plt+0x5cc4>
   1141c:	movw	r7, #29912	; 0x74d8
   11420:	movw	r9, #33088	; 0x8140
   11424:	mov	r0, #0
   11428:	mov	r8, #0
   1142c:	mov	r6, #0
   11430:	str	r0, [sp, #48]	; 0x30
   11434:	movt	r7, #1
   11438:	movt	r9, #2
   1143c:	movw	r4, #28749	; 0x704d
   11440:	movt	r4, #1
   11444:	b	11450 <__assert_fail@plt+0x474>
   11448:	mov	r1, #1
   1144c:	strb	r1, [r0]
   11450:	mov	r0, r5
   11454:	mov	r1, sl
   11458:	mov	r2, r4
   1145c:	mov	r3, r7
   11460:	str	r8, [sp]
   11464:	bl	10ed4 <getopt_long@plt>
   11468:	cmp	r0, #98	; 0x62
   1146c:	ble	116d4 <__assert_fail@plt+0x6f8>
   11470:	sub	r0, r0, #99	; 0x63
   11474:	cmp	r0, #16
   11478:	bhi	11ebc <__assert_fail@plt+0xee0>
   1147c:	add	r1, pc, #0
   11480:	ldr	pc, [r1, r0, lsl #2]
   11484:	andeq	r1, r1, r8, asr #9
   11488:			; <UNDEFINED> instruction: 0x00011ebc
   1148c:			; <UNDEFINED> instruction: 0x00011ebc
   11490:			; <UNDEFINED> instruction: 0x00011ebc
   11494:			; <UNDEFINED> instruction: 0x00011ebc
   11498:			; <UNDEFINED> instruction: 0x00011ebc
   1149c:			; <UNDEFINED> instruction: 0x00011ebc
   114a0:			; <UNDEFINED> instruction: 0x00011ebc
   114a4:			; <UNDEFINED> instruction: 0x00011ebc
   114a8:			; <UNDEFINED> instruction: 0x00011ebc
   114ac:			; <UNDEFINED> instruction: 0x00011ebc
   114b0:			; <UNDEFINED> instruction: 0x00011ebc
   114b4:	ldrdeq	r1, [r1], -r4
   114b8:			; <UNDEFINED> instruction: 0x00011ebc
   114bc:			; <UNDEFINED> instruction: 0x00011ebc
   114c0:	andeq	r1, r1, r0, ror #9
   114c4:	strdeq	r1, [r1], -r4
   114c8:	movw	r0, #33096	; 0x8148
   114cc:	movt	r0, #2
   114d0:	b	11448 <__assert_fail@plt+0x46c>
   114d4:	movw	r0, #33097	; 0x8149
   114d8:	movt	r0, #2
   114dc:	b	11448 <__assert_fail@plt+0x46c>
   114e0:	ldr	r0, [r9]
   114e4:	movw	r1, #33100	; 0x814c
   114e8:	movt	r1, #2
   114ec:	str	r0, [r1]
   114f0:	b	11450 <__assert_fail@plt+0x474>
   114f4:	bl	10ee0 <__ctype_b_loc@plt>
   114f8:	ldr	r6, [r9]
   114fc:	ldr	r2, [r0]
   11500:	ldrb	r1, [r6]
   11504:	add	r2, r2, r1, lsl #1
   11508:	ldrb	r2, [r2, #1]
   1150c:	tst	r2, #32
   11510:	beq	11538 <__assert_fail@plt+0x55c>
   11514:	add	r2, r6, #1
   11518:	str	r2, [r9]
   1151c:	ldrb	r1, [r2], #1
   11520:	ldr	r3, [r0]
   11524:	add	r3, r3, r1, lsl #1
   11528:	ldrb	r3, [r3, #1]
   1152c:	tst	r3, #32
   11530:	bne	11518 <__assert_fail@plt+0x53c>
   11534:	sub	r6, r2, #1
   11538:	sub	r2, r1, #37	; 0x25
   1153c:	cmp	r2, #25
   11540:	bhi	115d8 <__assert_fail@plt+0x5fc>
   11544:	add	r3, pc, #4
   11548:	mov	r1, #3
   1154c:	ldr	pc, [r3, r2, lsl #2]
   11550:			; <UNDEFINED> instruction: 0x000115b8
   11554:	ldrdeq	r1, [r1], -r8
   11558:	ldrdeq	r1, [r1], -r8
   1155c:	ldrdeq	r1, [r1], -r8
   11560:	ldrdeq	r1, [r1], -r8
   11564:	ldrdeq	r1, [r1], -r8
   11568:	ldrdeq	r1, [r1], -r8
   1156c:	ldrdeq	r1, [r1], -r8
   11570:	ldrdeq	r1, [r1], -r8
   11574:	ldrdeq	r1, [r1], -r8
   11578:	andeq	r1, r1, r0, asr #11
   1157c:	ldrdeq	r1, [r1], -r8
   11580:	ldrdeq	r1, [r1], -r8
   11584:	ldrdeq	r1, [r1], -r8
   11588:	ldrdeq	r1, [r1], -r8
   1158c:	ldrdeq	r1, [r1], -r8
   11590:	ldrdeq	r1, [r1], -r8
   11594:	ldrdeq	r1, [r1], -r8
   11598:	ldrdeq	r1, [r1], -r8
   1159c:	ldrdeq	r1, [r1], -r8
   115a0:	ldrdeq	r1, [r1], -r8
   115a4:	ldrdeq	r1, [r1], -r8
   115a8:	ldrdeq	r1, [r1], -r8
   115ac:	andeq	r1, r1, ip, asr #11
   115b0:	ldrdeq	r1, [r1], -r8
   115b4:	andeq	r1, r1, r8, asr #11
   115b8:	mov	r1, #5
   115bc:	b	115cc <__assert_fail@plt+0x5f0>
   115c0:	mov	r1, #4
   115c4:	b	115cc <__assert_fail@plt+0x5f0>
   115c8:	mov	r1, #2
   115cc:	add	r6, r6, #1
   115d0:	str	r1, [sp, #48]	; 0x30
   115d4:	str	r6, [r9]
   115d8:	ldrb	r1, [r6]
   115dc:	ldr	r2, [r0]
   115e0:	add	r2, r2, r1, lsl #1
   115e4:	ldrb	r2, [r2, #1]
   115e8:	tst	r2, #32
   115ec:	beq	11614 <__assert_fail@plt+0x638>
   115f0:	add	r2, r6, #1
   115f4:	str	r2, [r9]
   115f8:	ldrb	r1, [r2], #1
   115fc:	ldr	r3, [r0]
   11600:	add	r3, r3, r1, lsl #1
   11604:	ldrb	r3, [r3, #1]
   11608:	tst	r3, #32
   1160c:	bne	115f4 <__assert_fail@plt+0x618>
   11610:	sub	r6, r2, #1
   11614:	cmp	r1, #45	; 0x2d
   11618:	cmpne	r1, #43	; 0x2b
   1161c:	bne	11634 <__assert_fail@plt+0x658>
   11620:	ldr	r0, [sp, #48]	; 0x30
   11624:	mov	r4, #1
   11628:	cmp	r0, #0
   1162c:	beq	11638 <__assert_fail@plt+0x65c>
   11630:	b	11ec4 <__assert_fail@plt+0xee8>
   11634:	ldr	r4, [sp, #48]	; 0x30
   11638:	movw	r1, #28808	; 0x7088
   1163c:	mov	r0, #0
   11640:	mov	r2, #5
   11644:	movt	r1, #1
   11648:	bl	10e14 <dcgettext@plt>
   1164c:	mvn	r1, #0
   11650:	str	r0, [sp, #12]
   11654:	mov	r0, r6
   11658:	mov	r2, #0
   1165c:	mov	r3, #-2147483648	; 0x80000000
   11660:	str	r8, [sp, #16]
   11664:	str	r1, [sp]
   11668:	mvn	r1, #-2147483648	; 0x80000000
   1166c:	str	r1, [sp, #4]
   11670:	movw	r1, #28794	; 0x707a
   11674:	movt	r1, #1
   11678:	str	r1, [sp, #8]
   1167c:	bl	14bd8 <__assert_fail@plt+0x3bfc>
   11680:	str	r0, [sp, #52]	; 0x34
   11684:	orr	r0, r4, #1
   11688:	mov	r6, #1
   1168c:	str	r1, [sp, #40]	; 0x28
   11690:	str	r4, [sp, #48]	; 0x30
   11694:	cmp	r0, #5
   11698:	bne	1143c <__assert_fail@plt+0x460>
   1169c:	ldr	r0, [sp, #52]	; 0x34
   116a0:	ldr	r1, [sp, #40]	; 0x28
   116a4:	str	r4, [sp, #48]	; 0x30
   116a8:	orrs	r0, r0, r1
   116ac:	bne	1143c <__assert_fail@plt+0x460>
   116b0:	movw	r1, #28823	; 0x7097
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	movt	r1, #1
   116c0:	bl	10e14 <dcgettext@plt>
   116c4:	mov	r2, r0
   116c8:	mov	r0, #1
   116cc:	mov	r1, #0
   116d0:	bl	10e8c <error@plt>
   116d4:	cmn	r0, #1
   116d8:	bne	11e5c <__assert_fail@plt+0xe80>
   116dc:	movw	r0, #33100	; 0x814c
   116e0:	movw	r8, #33097	; 0x8149
   116e4:	movt	r0, #2
   116e8:	movt	r8, #2
   116ec:	ldr	r1, [r0]
   116f0:	cmp	r1, #0
   116f4:	mov	r0, r1
   116f8:	movwne	r0, #1
   116fc:	orr	r0, r6, r0
   11700:	tst	r0, #1
   11704:	beq	11ed0 <__assert_fail@plt+0xef4>
   11708:	movw	r0, #33072	; 0x8130
   1170c:	cmp	r1, #0
   11710:	movt	r0, #2
   11714:	ldr	r7, [r0]
   11718:	beq	11730 <__assert_fail@plt+0x754>
   1171c:	ldr	r0, [sp, #48]	; 0x30
   11720:	cmp	r0, #0
   11724:	eoreq	r0, r6, #1
   11728:	tsteq	r0, #1
   1172c:	beq	11f40 <__assert_fail@plt+0xf64>
   11730:	ldrb	r0, [r8]
   11734:	mvn	r0, r0
   11738:	orr	r0, r6, r0
   1173c:	tst	r0, #1
   11740:	beq	11edc <__assert_fail@plt+0xf00>
   11744:	cmp	r7, r5
   11748:	bge	11f14 <__assert_fail@plt+0xf38>
   1174c:	cmp	r1, #0
   11750:	beq	11794 <__assert_fail@plt+0x7b8>
   11754:	add	r2, sp, #64	; 0x40
   11758:	mov	r0, #3
   1175c:	bl	10fac <__xstat64@plt>
   11760:	cmp	r0, #0
   11764:	bne	11f9c <__assert_fail@plt+0xfc0>
   11768:	ldr	r0, [sp, #80]	; 0x50
   1176c:	and	r0, r0, #53248	; 0xd000
   11770:	orr	r0, r0, #8192	; 0x2000
   11774:	cmp	r0, #40960	; 0xa000
   11778:	bne	117a8 <__assert_fail@plt+0x7cc>
   1177c:	ldr	r0, [sp, #116]	; 0x74
   11780:	cmn	r0, #1
   11784:	ble	11fb8 <__assert_fail@plt+0xfdc>
   11788:	ldr	r4, [sp, #112]	; 0x70
   1178c:	mov	r2, r0
   11790:	b	11820 <__assert_fail@plt+0x844>
   11794:	ldr	r6, [sp, #40]	; 0x28
   11798:	mvn	r0, #0
   1179c:	mvn	r4, #0
   117a0:	str	r0, [sp, #32]
   117a4:	b	11848 <__assert_fail@plt+0x86c>
   117a8:	movw	r0, #33100	; 0x814c
   117ac:	mov	r1, #0
   117b0:	movt	r0, #2
   117b4:	ldr	r0, [r0]
   117b8:	bl	10e98 <open64@plt>
   117bc:	cmp	r0, #0
   117c0:	blt	11fb8 <__assert_fail@plt+0xfdc>
   117c4:	mov	r4, r0
   117c8:	mov	r0, #2
   117cc:	mov	r2, #0
   117d0:	mov	r3, #0
   117d4:	str	r0, [sp]
   117d8:	mov	r0, r4
   117dc:	bl	10e5c <lseek64@plt>
   117e0:	mov	r8, r0
   117e4:	mov	r5, r1
   117e8:	bl	10f10 <__errno_location@plt>
   117ec:	mov	r9, r0
   117f0:	ldr	r0, [r0]
   117f4:	str	r0, [sp, #60]	; 0x3c
   117f8:	mov	r0, r4
   117fc:	mov	r4, r8
   11800:	bl	10fd0 <close@plt>
   11804:	mvn	r1, #0
   11808:	subs	r0, r1, r8
   1180c:	sbcs	r0, r1, r5
   11810:	bge	11fb0 <__assert_fail@plt+0xfd4>
   11814:	movw	r8, #33097	; 0x8149
   11818:	mov	r2, r5
   1181c:	movt	r8, #2
   11820:	ands	r0, r6, #1
   11824:	ldr	r6, [sp, #40]	; 0x28
   11828:	ldr	r0, [sp, #52]	; 0x34
   1182c:	moveq	r6, r2
   11830:	moveq	r0, r4
   11834:	str	r0, [sp, #52]	; 0x34
   11838:	mvn	r0, #0
   1183c:	moveq	r2, r0
   11840:	moveq	r4, r0
   11844:	str	r2, [sp, #32]
   11848:	movw	r0, #33096	; 0x8148
   1184c:	ldr	r9, [sl, r7, lsl #2]
   11850:	movw	r1, #2113	; 0x841
   11854:	movt	r0, #2
   11858:	ldrb	r0, [r0]
   1185c:	cmp	r0, #0
   11860:	movwne	r1, #2049	; 0x801
   11864:	cmp	r9, #0
   11868:	str	r1, [sp, #56]	; 0x38
   1186c:	beq	11e4c <__assert_fail@plt+0xe70>
   11870:	ldr	r0, [sp, #32]
   11874:	ldr	r1, [sp, #48]	; 0x30
   11878:	mov	r5, #0
   1187c:	str	r4, [sp, #28]
   11880:	str	r6, [sp, #40]	; 0x28
   11884:	cmp	r0, #0
   11888:	mov	r0, #0
   1188c:	movwlt	r0, #1
   11890:	cmp	r1, #0
   11894:	movwne	r1, #1
   11898:	and	r0, r1, r0
   1189c:	str	r0, [sp, #36]	; 0x24
   118a0:	add	r0, sl, r7, lsl #2
   118a4:	add	sl, r0, #4
   118a8:	add	r0, sp, #64	; 0x40
   118ac:	add	r0, r0, #48	; 0x30
   118b0:	str	r0, [sp, #24]
   118b4:	b	119b0 <__assert_fail@plt+0x9d4>
   118b8:	movw	r1, #29794	; 0x7462
   118bc:	mov	r0, #0
   118c0:	mov	r2, #5
   118c4:	movt	r1, #1
   118c8:	bl	10e14 <dcgettext@plt>
   118cc:	mov	r4, r0
   118d0:	mov	r0, #4
   118d4:	mov	r1, r9
   118d8:	bl	13814 <__assert_fail@plt+0x2838>
   118dc:	mov	r3, r0
   118e0:	mov	r0, #0
   118e4:	mov	r1, #0
   118e8:	mov	r2, r4
   118ec:	b	1192c <__assert_fail@plt+0x950>
   118f0:	bl	10f10 <__errno_location@plt>
   118f4:	ldr	r4, [r0]
   118f8:	movw	r1, #29039	; 0x716f
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	10e14 <dcgettext@plt>
   1190c:	mov	r5, r0
   11910:	mov	r0, #4
   11914:	mov	r1, r9
   11918:	bl	13814 <__assert_fail@plt+0x2838>
   1191c:	mov	r3, r0
   11920:	mov	r0, #0
   11924:	mov	r1, r4
   11928:	mov	r2, r5
   1192c:	bl	10e8c <error@plt>
   11930:	movw	r8, #33097	; 0x8149
   11934:	mov	r7, #1
   11938:	movt	r8, #2
   1193c:	b	11dd8 <__assert_fail@plt+0xdfc>
   11940:	asr	r3, r5, #31
   11944:	mvn	r0, #0
   11948:	mvn	r1, #-2147483648	; 0x80000000
   1194c:	mov	r2, r5
   11950:	bl	169f4 <__assert_fail@plt+0x5a18>
   11954:	ldr	r2, [sp, #52]	; 0x34
   11958:	ldr	r3, [sp, #60]	; 0x3c
   1195c:	subs	r0, r2, r0
   11960:	sbcs	r0, r6, r1
   11964:	bge	11b80 <__assert_fail@plt+0xba4>
   11968:	movw	r1, #29748	; 0x7434
   1196c:	mov	r0, #0
   11970:	mov	r2, #5
   11974:	movt	r1, #1
   11978:	bl	10e14 <dcgettext@plt>
   1197c:	mov	r4, r0
   11980:	mov	r0, #4
   11984:	mov	r1, r9
   11988:	bl	13814 <__assert_fail@plt+0x2838>
   1198c:	ldr	r1, [sp, #52]	; 0x34
   11990:	mov	r2, r4
   11994:	stm	sp, {r1, r6}
   11998:	str	r0, [sp, #12]
   1199c:	mov	r0, #0
   119a0:	mov	r1, #0
   119a4:	str	r5, [sp, #8]
   119a8:	bl	10e8c <error@plt>
   119ac:	b	11dd4 <__assert_fail@plt+0xdf8>
   119b0:	ldr	r1, [sp, #56]	; 0x38
   119b4:	mov	r0, r9
   119b8:	movw	r2, #438	; 0x1b6
   119bc:	bl	10e98 <open64@plt>
   119c0:	cmn	r0, #1
   119c4:	ble	11a48 <__assert_fail@plt+0xa6c>
   119c8:	mov	r3, r0
   119cc:	ldrb	r0, [r8]
   119d0:	ldr	r1, [sp, #36]	; 0x24
   119d4:	ldr	r4, [sp, #52]	; 0x34
   119d8:	str	r5, [sp, #44]	; 0x2c
   119dc:	mov	r5, r6
   119e0:	str	r3, [sp, #60]	; 0x3c
   119e4:	orr	r0, r0, r1
   119e8:	tst	r0, #1
   119ec:	beq	11b94 <__assert_fail@plt+0xbb8>
   119f0:	mov	r0, #3
   119f4:	mov	r1, r3
   119f8:	add	r2, sp, #64	; 0x40
   119fc:	bl	10e44 <__fxstat64@plt>
   11a00:	cmp	r0, #0
   11a04:	beq	11aac <__assert_fail@plt+0xad0>
   11a08:	bl	10f10 <__errno_location@plt>
   11a0c:	ldr	r4, [r0]
   11a10:	movw	r1, #29732	; 0x7424
   11a14:	mov	r0, #0
   11a18:	mov	r2, #5
   11a1c:	movt	r1, #1
   11a20:	bl	10e14 <dcgettext@plt>
   11a24:	mov	r5, r0
   11a28:	mov	r0, #4
   11a2c:	mov	r1, r9
   11a30:	bl	13814 <__assert_fail@plt+0x2838>
   11a34:	mov	r3, r0
   11a38:	mov	r0, #0
   11a3c:	mov	r1, r4
   11a40:	mov	r2, r5
   11a44:	b	11dd0 <__assert_fail@plt+0xdf4>
   11a48:	movw	r0, #33096	; 0x8148
   11a4c:	movt	r0, #2
   11a50:	ldrb	r4, [r0]
   11a54:	bl	10f10 <__errno_location@plt>
   11a58:	cmp	r4, #1
   11a5c:	ldreq	r1, [r0]
   11a60:	cmpeq	r1, #2
   11a64:	beq	11e3c <__assert_fail@plt+0xe60>
   11a68:	ldr	r4, [r0]
   11a6c:	movw	r1, #29065	; 0x7189
   11a70:	mov	r0, #0
   11a74:	mov	r2, #5
   11a78:	movt	r1, #1
   11a7c:	bl	10e14 <dcgettext@plt>
   11a80:	mov	r5, r0
   11a84:	mov	r0, #4
   11a88:	mov	r1, r9
   11a8c:	bl	13814 <__assert_fail@plt+0x2838>
   11a90:	mov	r3, r0
   11a94:	mov	r0, #0
   11a98:	mov	r1, r4
   11a9c:	mov	r2, r5
   11aa0:	bl	10e8c <error@plt>
   11aa4:	mov	r5, #1
   11aa8:	b	11e3c <__assert_fail@plt+0xe60>
   11aac:	ldrb	r0, [r8]
   11ab0:	ldr	r4, [sp, #52]	; 0x34
   11ab4:	ldr	r3, [sp, #60]	; 0x3c
   11ab8:	mov	r5, r6
   11abc:	cmp	r0, #1
   11ac0:	bne	11b94 <__assert_fail@plt+0xbb8>
   11ac4:	ldr	r0, [sp, #120]	; 0x78
   11ac8:	mov	r5, #512	; 0x200
   11acc:	cmp	r0, #536870913	; 0x20000001
   11ad0:	movcc	r5, r0
   11ad4:	cmp	r0, #0
   11ad8:	mov	r0, #512	; 0x200
   11adc:	movle	r5, r0
   11ae0:	cmn	r5, #1
   11ae4:	ble	11b08 <__assert_fail@plt+0xb2c>
   11ae8:	cmp	r5, #0
   11aec:	beq	11b80 <__assert_fail@plt+0xba4>
   11af0:	cmn	r6, #1
   11af4:	ble	11b44 <__assert_fail@plt+0xb68>
   11af8:	asr	r3, r5, #31
   11afc:	mvn	r0, #0
   11b00:	mvn	r1, #-2147483648	; 0x80000000
   11b04:	b	11b24 <__assert_fail@plt+0xb48>
   11b08:	cmn	r6, #1
   11b0c:	ble	11940 <__assert_fail@plt+0x964>
   11b10:	cmn	r5, #1
   11b14:	beq	11b80 <__assert_fail@plt+0xba4>
   11b18:	asr	r3, r5, #31
   11b1c:	mov	r0, #0
   11b20:	mov	r1, #-2147483648	; 0x80000000
   11b24:	mov	r2, r5
   11b28:	bl	169f4 <__assert_fail@plt+0x5a18>
   11b2c:	ldr	r2, [sp, #52]	; 0x34
   11b30:	ldr	r3, [sp, #60]	; 0x3c
   11b34:	subs	r0, r0, r2
   11b38:	sbcs	r0, r1, r6
   11b3c:	blt	11968 <__assert_fail@plt+0x98c>
   11b40:	b	11b80 <__assert_fail@plt+0xba4>
   11b44:	ldr	r0, [sp, #52]	; 0x34
   11b48:	mvn	r1, #0
   11b4c:	eor	r0, r0, r1
   11b50:	eor	r1, r6, r1
   11b54:	orrs	r0, r0, r1
   11b58:	beq	11b80 <__assert_fail@plt+0xba4>
   11b5c:	ldr	r2, [sp, #52]	; 0x34
   11b60:	mov	r0, #0
   11b64:	mov	r1, #-2147483648	; 0x80000000
   11b68:	mov	r3, r6
   11b6c:	bl	169f4 <__assert_fail@plt+0x5a18>
   11b70:	ldr	r3, [sp, #60]	; 0x3c
   11b74:	subs	r0, r0, r5
   11b78:	sbcs	r0, r1, r5, asr #31
   11b7c:	blt	11968 <__assert_fail@plt+0x98c>
   11b80:	ldr	r2, [sp, #52]	; 0x34
   11b84:	asr	r1, r5, #31
   11b88:	umull	r4, r0, r2, r5
   11b8c:	mla	r0, r2, r1, r0
   11b90:	mla	r5, r6, r5, r0
   11b94:	ldr	r0, [sp, #48]	; 0x30
   11b98:	cmp	r0, #0
   11b9c:	beq	11d58 <__assert_fail@plt+0xd7c>
   11ba0:	ldr	r8, [sp, #28]
   11ba4:	ldr	r6, [sp, #32]
   11ba8:	mvn	r1, #0
   11bac:	subs	r0, r1, r8
   11bb0:	sbcs	r0, r1, r6
   11bb4:	blt	11c10 <__assert_fail@plt+0xc34>
   11bb8:	ldr	r0, [sp, #80]	; 0x50
   11bbc:	and	r0, r0, #53248	; 0xd000
   11bc0:	orr	r0, r0, #8192	; 0x2000
   11bc4:	cmp	r0, #40960	; 0xa000
   11bc8:	bne	11be4 <__assert_fail@plt+0xc08>
   11bcc:	ldr	r0, [sp, #24]
   11bd0:	ldr	r6, [r0, #4]
   11bd4:	cmn	r6, #1
   11bd8:	ble	118b8 <__assert_fail@plt+0x8dc>
   11bdc:	ldr	r8, [r0]
   11be0:	b	11c10 <__assert_fail@plt+0xc34>
   11be4:	mov	r0, #2
   11be8:	mov	r2, #0
   11bec:	str	r0, [sp]
   11bf0:	mov	r0, r3
   11bf4:	mov	r3, #0
   11bf8:	bl	10e5c <lseek64@plt>
   11bfc:	cmn	r1, #1
   11c00:	ble	118f0 <__assert_fail@plt+0x914>
   11c04:	ldr	r3, [sp, #60]	; 0x3c
   11c08:	mov	r8, r0
   11c0c:	mov	r6, r1
   11c10:	ldr	r0, [sp, #48]	; 0x30
   11c14:	sub	r0, r0, #2
   11c18:	cmp	r0, #3
   11c1c:	bhi	11cc8 <__assert_fail@plt+0xcec>
   11c20:	add	r1, pc, #0
   11c24:	ldr	pc, [r1, r0, lsl #2]
   11c28:	andeq	r1, r1, r8, lsr ip
   11c2c:	andeq	r1, r1, r0, lsr #25
   11c30:	andeq	r1, r1, r4, asr #24
   11c34:	andeq	r1, r1, ip, ror #24
   11c38:	subs	r0, r4, r8
   11c3c:	sbcs	r0, r5, r6
   11c40:	b	11ca8 <__assert_fail@plt+0xccc>
   11c44:	mov	r7, r3
   11c48:	mov	r0, r8
   11c4c:	mov	r1, r6
   11c50:	mov	r2, r4
   11c54:	mov	r3, r5
   11c58:	bl	169f4 <__assert_fail@plt+0x5a18>
   11c5c:	subs	r4, r8, r2
   11c60:	sbc	r5, r6, r3
   11c64:	mov	r3, r7
   11c68:	b	11cbc <__assert_fail@plt+0xce0>
   11c6c:	mov	r7, r3
   11c70:	mov	r0, r8
   11c74:	mov	r1, r6
   11c78:	mov	r2, r4
   11c7c:	mov	r3, r5
   11c80:	bl	169f4 <__assert_fail@plt+0x5a18>
   11c84:	subs	r4, r4, r2
   11c88:	sbc	r0, r5, r3
   11c8c:	orrs	r1, r2, r3
   11c90:	mov	r3, r7
   11c94:	moveq	r4, r1
   11c98:	moveq	r0, r1
   11c9c:	b	11ccc <__assert_fail@plt+0xcf0>
   11ca0:	subs	r0, r8, r4
   11ca4:	sbcs	r0, r6, r5
   11ca8:	mov	r0, #0
   11cac:	movwlt	r0, #1
   11cb0:	cmp	r0, #0
   11cb4:	movne	r5, r6
   11cb8:	movne	r4, r8
   11cbc:	movw	r8, #33097	; 0x8149
   11cc0:	movt	r8, #2
   11cc4:	b	11d58 <__assert_fail@plt+0xd7c>
   11cc8:	mov	r0, r5
   11ccc:	cmn	r6, #1
   11cd0:	mov	r1, #0
   11cd4:	mov	r2, #0
   11cd8:	movwgt	r1, #1
   11cdc:	adds	r4, r8, r4
   11ce0:	movw	r8, #33097	; 0x8149
   11ce4:	adc	r5, r6, r0
   11ce8:	movt	r8, #2
   11cec:	cmn	r5, #1
   11cf0:	movwgt	r2, #1
   11cf4:	subs	r2, r1, r2
   11cf8:	movwne	r2, #1
   11cfc:	cmn	r0, #1
   11d00:	mov	r0, #0
   11d04:	movwgt	r0, #1
   11d08:	sub	r0, r1, r0
   11d0c:	clz	r0, r0
   11d10:	lsr	r0, r0, #5
   11d14:	and	r0, r0, r2
   11d18:	cmp	r0, #1
   11d1c:	bne	11d58 <__assert_fail@plt+0xd7c>
   11d20:	movw	r1, #29836	; 0x748c
   11d24:	mov	r0, #0
   11d28:	mov	r2, #5
   11d2c:	movt	r1, #1
   11d30:	bl	10e14 <dcgettext@plt>
   11d34:	mov	r4, r0
   11d38:	mov	r0, #4
   11d3c:	mov	r1, r9
   11d40:	bl	13814 <__assert_fail@plt+0x2838>
   11d44:	mov	r3, r0
   11d48:	mov	r0, #0
   11d4c:	mov	r1, #0
   11d50:	mov	r2, r4
   11d54:	b	11dd0 <__assert_fail@plt+0xdf4>
   11d58:	rsbs	r0, r4, #0
   11d5c:	mov	r6, #0
   11d60:	mov	r7, #0
   11d64:	rscs	r0, r5, #0
   11d68:	movwlt	r6, #1
   11d6c:	mov	r0, r3
   11d70:	cmp	r6, #0
   11d74:	moveq	r4, r6
   11d78:	movne	r6, r5
   11d7c:	mov	r2, r4
   11d80:	mov	r3, r6
   11d84:	bl	10dfc <ftruncate64@plt>
   11d88:	cmp	r0, #0
   11d8c:	beq	11dd8 <__assert_fail@plt+0xdfc>
   11d90:	bl	10f10 <__errno_location@plt>
   11d94:	ldr	r5, [r0]
   11d98:	movw	r1, #29871	; 0x74af
   11d9c:	mov	r0, #0
   11da0:	mov	r2, #5
   11da4:	movt	r1, #1
   11da8:	bl	10e14 <dcgettext@plt>
   11dac:	mov	r7, r0
   11db0:	mov	r0, #4
   11db4:	mov	r1, r9
   11db8:	bl	13814 <__assert_fail@plt+0x2838>
   11dbc:	mov	r3, r0
   11dc0:	mov	r0, #0
   11dc4:	mov	r1, r5
   11dc8:	mov	r2, r7
   11dcc:	stm	sp, {r4, r6}
   11dd0:	bl	10e8c <error@plt>
   11dd4:	mov	r7, #1
   11dd8:	ldr	r0, [sp, #60]	; 0x3c
   11ddc:	bl	10fd0 <close@plt>
   11de0:	cmp	r0, #0
   11de4:	beq	11e30 <__assert_fail@plt+0xe54>
   11de8:	bl	10f10 <__errno_location@plt>
   11dec:	ldr	r4, [r0]
   11df0:	movw	r1, #29092	; 0x71a4
   11df4:	mov	r0, #0
   11df8:	mov	r2, #5
   11dfc:	movt	r1, #1
   11e00:	bl	10e14 <dcgettext@plt>
   11e04:	mov	r5, r0
   11e08:	mov	r0, #4
   11e0c:	mov	r1, r9
   11e10:	bl	13814 <__assert_fail@plt+0x2838>
   11e14:	mov	r3, r0
   11e18:	mov	r0, #0
   11e1c:	mov	r1, r4
   11e20:	mov	r2, r5
   11e24:	bl	10e8c <error@plt>
   11e28:	mov	r5, #1
   11e2c:	b	11e38 <__assert_fail@plt+0xe5c>
   11e30:	ldr	r5, [sp, #44]	; 0x2c
   11e34:	orr	r5, r5, r7
   11e38:	ldr	r6, [sp, #40]	; 0x28
   11e3c:	ldr	r9, [sl], #4
   11e40:	cmp	r9, #0
   11e44:	bne	119b0 <__assert_fail@plt+0x9d4>
   11e48:	b	11e50 <__assert_fail@plt+0xe74>
   11e4c:	mov	r5, #0
   11e50:	and	r0, r5, #1
   11e54:	sub	sp, fp, #28
   11e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e5c:	cmn	r0, #3
   11e60:	bne	11eac <__assert_fail@plt+0xed0>
   11e64:	movw	r0, #32992	; 0x80e0
   11e68:	movw	r2, #28854	; 0x70b6
   11e6c:	mov	r1, #0
   11e70:	movt	r0, #2
   11e74:	movt	r2, #1
   11e78:	str	r1, [sp, #4]
   11e7c:	movw	r1, #28716	; 0x702c
   11e80:	ldr	r3, [r0]
   11e84:	movw	r0, #33084	; 0x813c
   11e88:	str	r2, [sp]
   11e8c:	movw	r2, #28840	; 0x70a8
   11e90:	movt	r1, #1
   11e94:	movt	r0, #2
   11e98:	movt	r2, #1
   11e9c:	ldr	r0, [r0]
   11ea0:	bl	142f8 <__assert_fail@plt+0x331c>
   11ea4:	mov	r0, #0
   11ea8:	bl	10eec <exit@plt>
   11eac:	cmn	r0, #2
   11eb0:	bne	11ebc <__assert_fail@plt+0xee0>
   11eb4:	mov	r0, #0
   11eb8:	bl	110d8 <__assert_fail@plt+0xfc>
   11ebc:	mov	r0, #1
   11ec0:	bl	110d8 <__assert_fail@plt+0xfc>
   11ec4:	movw	r1, #28756	; 0x7054
   11ec8:	movt	r1, #1
   11ecc:	b	11f1c <__assert_fail@plt+0xf40>
   11ed0:	movw	r1, #28868	; 0x70c4
   11ed4:	movt	r1, #1
   11ed8:	b	11f48 <__assert_fail@plt+0xf6c>
   11edc:	movw	r1, #28959	; 0x711f
   11ee0:	mov	r0, #0
   11ee4:	mov	r2, #5
   11ee8:	movt	r1, #1
   11eec:	bl	10e14 <dcgettext@plt>
   11ef0:	movw	r1, #28991	; 0x713f
   11ef4:	mov	r4, r0
   11ef8:	mov	r0, #0
   11efc:	movt	r1, #1
   11f00:	bl	13d2c <__assert_fail@plt+0x2d50>
   11f04:	movw	r1, #28901	; 0x70e5
   11f08:	mov	r5, r0
   11f0c:	movt	r1, #1
   11f10:	b	11f74 <__assert_fail@plt+0xf98>
   11f14:	movw	r1, #29003	; 0x714b
   11f18:	movt	r1, #1
   11f1c:	mov	r0, #0
   11f20:	mov	r2, #5
   11f24:	bl	10e14 <dcgettext@plt>
   11f28:	mov	r2, r0
   11f2c:	mov	r0, #0
   11f30:	mov	r1, #0
   11f34:	bl	10e8c <error@plt>
   11f38:	mov	r0, #1
   11f3c:	bl	110d8 <__assert_fail@plt+0xfc>
   11f40:	movw	r1, #28920	; 0x70f8
   11f44:	movt	r1, #1
   11f48:	mov	r0, #0
   11f4c:	mov	r2, #5
   11f50:	bl	10e14 <dcgettext@plt>
   11f54:	movw	r1, #28901	; 0x70e5
   11f58:	mov	r4, r0
   11f5c:	mov	r0, #0
   11f60:	movt	r1, #1
   11f64:	bl	13d2c <__assert_fail@plt+0x2d50>
   11f68:	movw	r1, #28908	; 0x70ec
   11f6c:	mov	r5, r0
   11f70:	movt	r1, #1
   11f74:	mov	r0, #1
   11f78:	bl	13d2c <__assert_fail@plt+0x2d50>
   11f7c:	str	r0, [sp]
   11f80:	mov	r0, #0
   11f84:	mov	r1, #0
   11f88:	mov	r2, r4
   11f8c:	mov	r3, r5
   11f90:	bl	10e8c <error@plt>
   11f94:	mov	r0, #1
   11f98:	bl	110d8 <__assert_fail@plt+0xfc>
   11f9c:	bl	10f10 <__errno_location@plt>
   11fa0:	ldr	r4, [r0]
   11fa4:	movw	r1, #29024	; 0x7160
   11fa8:	movt	r1, #1
   11fac:	b	11fc8 <__assert_fail@plt+0xfec>
   11fb0:	ldr	r0, [sp, #60]	; 0x3c
   11fb4:	str	r0, [r9]
   11fb8:	bl	10f10 <__errno_location@plt>
   11fbc:	ldr	r4, [r0]
   11fc0:	movw	r1, #29039	; 0x716f
   11fc4:	movt	r1, #1
   11fc8:	mov	r0, #0
   11fcc:	mov	r2, #5
   11fd0:	bl	10e14 <dcgettext@plt>
   11fd4:	mov	r5, r0
   11fd8:	movw	r0, #33100	; 0x814c
   11fdc:	movt	r0, #2
   11fe0:	ldr	r1, [r0]
   11fe4:	mov	r0, #4
   11fe8:	bl	13814 <__assert_fail@plt+0x2838>
   11fec:	mov	r3, r0
   11ff0:	mov	r0, #1
   11ff4:	mov	r1, r4
   11ff8:	mov	r2, r5
   11ffc:	bl	10e8c <error@plt>
   12000:	movw	r1, #33104	; 0x8150
   12004:	movt	r1, #2
   12008:	str	r0, [r1]
   1200c:	bx	lr
   12010:	movw	r1, #33108	; 0x8154
   12014:	movt	r1, #2
   12018:	strb	r0, [r1]
   1201c:	bx	lr
   12020:	push	{r4, r5, r6, sl, fp, lr}
   12024:	add	fp, sp, #16
   12028:	sub	sp, sp, #8
   1202c:	movw	r0, #33084	; 0x813c
   12030:	movt	r0, #2
   12034:	ldr	r0, [r0]
   12038:	bl	165d0 <__assert_fail@plt+0x55f4>
   1203c:	cmp	r0, #0
   12040:	beq	12068 <__assert_fail@plt+0x108c>
   12044:	movw	r0, #33108	; 0x8154
   12048:	movt	r0, #2
   1204c:	ldrb	r0, [r0]
   12050:	cmp	r0, #0
   12054:	beq	12088 <__assert_fail@plt+0x10ac>
   12058:	bl	10f10 <__errno_location@plt>
   1205c:	ldr	r0, [r0]
   12060:	cmp	r0, #32
   12064:	bne	12088 <__assert_fail@plt+0x10ac>
   12068:	movw	r0, #33080	; 0x8138
   1206c:	movt	r0, #2
   12070:	ldr	r0, [r0]
   12074:	bl	165d0 <__assert_fail@plt+0x55f4>
   12078:	cmp	r0, #0
   1207c:	subeq	sp, fp, #16
   12080:	popeq	{r4, r5, r6, sl, fp, pc}
   12084:	b	120f8 <__assert_fail@plt+0x111c>
   12088:	movw	r1, #30095	; 0x758f
   1208c:	mov	r0, #0
   12090:	mov	r2, #5
   12094:	movt	r1, #1
   12098:	bl	10e14 <dcgettext@plt>
   1209c:	mov	r4, r0
   120a0:	movw	r0, #33104	; 0x8150
   120a4:	movt	r0, #2
   120a8:	ldr	r6, [r0]
   120ac:	bl	10f10 <__errno_location@plt>
   120b0:	ldr	r5, [r0]
   120b4:	cmp	r6, #0
   120b8:	bne	120d4 <__assert_fail@plt+0x10f8>
   120bc:	movw	r2, #30111	; 0x759f
   120c0:	mov	r0, #0
   120c4:	mov	r1, r5
   120c8:	mov	r3, r4
   120cc:	movt	r2, #1
   120d0:	b	120f4 <__assert_fail@plt+0x1118>
   120d4:	mov	r0, r6
   120d8:	bl	139b4 <__assert_fail@plt+0x29d8>
   120dc:	movw	r2, #30107	; 0x759b
   120e0:	mov	r3, r0
   120e4:	str	r4, [sp]
   120e8:	mov	r0, #0
   120ec:	mov	r1, r5
   120f0:	movt	r2, #1
   120f4:	bl	10e8c <error@plt>
   120f8:	movw	r0, #32996	; 0x80e4
   120fc:	movt	r0, #2
   12100:	ldr	r0, [r0]
   12104:	bl	10dd8 <_exit@plt>
   12108:	push	{r4, r5, fp, lr}
   1210c:	add	fp, sp, #8
   12110:	cmp	r0, #0
   12114:	beq	121a8 <__assert_fail@plt+0x11cc>
   12118:	mov	r1, #47	; 0x2f
   1211c:	mov	r4, r0
   12120:	bl	10f7c <strrchr@plt>
   12124:	cmp	r0, #0
   12128:	mov	r5, r4
   1212c:	addne	r5, r0, #1
   12130:	sub	r0, r5, r4
   12134:	cmp	r0, #7
   12138:	blt	1218c <__assert_fail@plt+0x11b0>
   1213c:	movw	r1, #30170	; 0x75da
   12140:	sub	r0, r5, #7
   12144:	mov	r2, #7
   12148:	movt	r1, #1
   1214c:	bl	10fb8 <strncmp@plt>
   12150:	cmp	r0, #0
   12154:	bne	1218c <__assert_fail@plt+0x11b0>
   12158:	movw	r1, #30178	; 0x75e2
   1215c:	mov	r0, r5
   12160:	mov	r2, #3
   12164:	movt	r1, #1
   12168:	bl	10fb8 <strncmp@plt>
   1216c:	cmp	r0, #0
   12170:	beq	1217c <__assert_fail@plt+0x11a0>
   12174:	mov	r4, r5
   12178:	b	1218c <__assert_fail@plt+0x11b0>
   1217c:	movw	r0, #33064	; 0x8128
   12180:	add	r4, r5, #3
   12184:	movt	r0, #2
   12188:	str	r4, [r0]
   1218c:	movw	r0, #33068	; 0x812c
   12190:	movt	r0, #2
   12194:	str	r4, [r0]
   12198:	movw	r0, #33112	; 0x8158
   1219c:	movt	r0, #2
   121a0:	str	r4, [r0]
   121a4:	pop	{r4, r5, fp, pc}
   121a8:	movw	r0, #33080	; 0x8138
   121ac:	mov	r1, #55	; 0x37
   121b0:	mov	r2, #1
   121b4:	movt	r0, #2
   121b8:	ldr	r3, [r0]
   121bc:	movw	r0, #30114	; 0x75a2
   121c0:	movt	r0, #1
   121c4:	bl	10e50 <fwrite@plt>
   121c8:	bl	10fc4 <abort@plt>
   121cc:	push	{r4, r5, r6, sl, fp, lr}
   121d0:	add	fp, sp, #16
   121d4:	mov	r4, r0
   121d8:	movw	r0, #33120	; 0x8160
   121dc:	movt	r0, #2
   121e0:	cmp	r4, #0
   121e4:	moveq	r4, r0
   121e8:	bl	10f10 <__errno_location@plt>
   121ec:	ldr	r6, [r0]
   121f0:	mov	r5, r0
   121f4:	mov	r0, r4
   121f8:	mov	r1, #48	; 0x30
   121fc:	bl	1498c <__assert_fail@plt+0x39b0>
   12200:	str	r6, [r5]
   12204:	pop	{r4, r5, r6, sl, fp, pc}
   12208:	movw	r1, #33120	; 0x8160
   1220c:	cmp	r0, #0
   12210:	movt	r1, #2
   12214:	movne	r1, r0
   12218:	ldr	r0, [r1]
   1221c:	bx	lr
   12220:	movw	r2, #33120	; 0x8160
   12224:	cmp	r0, #0
   12228:	movt	r2, #2
   1222c:	movne	r2, r0
   12230:	str	r1, [r2]
   12234:	bx	lr
   12238:	movw	r3, #33120	; 0x8160
   1223c:	cmp	r0, #0
   12240:	movt	r3, #2
   12244:	movne	r3, r0
   12248:	ubfx	r0, r1, #5, #3
   1224c:	and	r1, r1, #31
   12250:	add	r0, r3, r0, lsl #2
   12254:	ldr	r3, [r0, #8]
   12258:	eor	r2, r2, r3, lsr r1
   1225c:	and	r2, r2, #1
   12260:	eor	r2, r3, r2, lsl r1
   12264:	str	r2, [r0, #8]
   12268:	mov	r0, #1
   1226c:	and	r0, r0, r3, lsr r1
   12270:	bx	lr
   12274:	movw	r2, #33120	; 0x8160
   12278:	cmp	r0, #0
   1227c:	movt	r2, #2
   12280:	movne	r2, r0
   12284:	ldr	r0, [r2, #4]
   12288:	str	r1, [r2, #4]
   1228c:	bx	lr
   12290:	movw	r3, #33120	; 0x8160
   12294:	cmp	r0, #0
   12298:	movt	r3, #2
   1229c:	movne	r3, r0
   122a0:	cmp	r1, #0
   122a4:	mov	r0, #10
   122a8:	cmpne	r2, #0
   122ac:	str	r0, [r3]
   122b0:	bne	122c0 <__assert_fail@plt+0x12e4>
   122b4:	push	{fp, lr}
   122b8:	mov	fp, sp
   122bc:	bl	10fc4 <abort@plt>
   122c0:	str	r1, [r3, #40]	; 0x28
   122c4:	str	r2, [r3, #44]	; 0x2c
   122c8:	bx	lr
   122cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122d0:	add	fp, sp, #28
   122d4:	sub	sp, sp, #20
   122d8:	mov	r7, r0
   122dc:	ldr	r0, [fp, #8]
   122e0:	movw	r5, #33120	; 0x8160
   122e4:	mov	r8, r3
   122e8:	mov	r9, r2
   122ec:	mov	sl, r1
   122f0:	movt	r5, #2
   122f4:	cmp	r0, #0
   122f8:	movne	r5, r0
   122fc:	bl	10f10 <__errno_location@plt>
   12300:	mov	r4, r0
   12304:	ldm	r5, {r0, r1}
   12308:	ldr	r2, [r5, #40]	; 0x28
   1230c:	ldr	r3, [r5, #44]	; 0x2c
   12310:	add	r5, r5, #8
   12314:	ldr	r6, [r4]
   12318:	stm	sp, {r0, r1, r5}
   1231c:	str	r2, [sp, #12]
   12320:	str	r3, [sp, #16]
   12324:	mov	r0, r7
   12328:	mov	r1, sl
   1232c:	mov	r2, r9
   12330:	mov	r3, r8
   12334:	bl	12344 <__assert_fail@plt+0x1368>
   12338:	str	r6, [r4]
   1233c:	sub	sp, fp, #28
   12340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12348:	add	fp, sp, #28
   1234c:	sub	sp, sp, #156	; 0x9c
   12350:	str	r0, [sp, #80]	; 0x50
   12354:	ldr	r0, [fp, #12]
   12358:	mov	r6, r1
   1235c:	mov	r9, r3
   12360:	str	r2, [fp, #-84]	; 0xffffffac
   12364:	and	r1, r0, #4
   12368:	str	r1, [sp, #32]
   1236c:	and	r1, r0, #1
   12370:	str	r1, [sp, #36]	; 0x24
   12374:	ubfx	r4, r0, #1, #1
   12378:	bl	10e68 <__ctype_get_mb_cur_max@plt>
   1237c:	str	r0, [sp, #40]	; 0x28
   12380:	ldr	r0, [fp, #24]
   12384:	ldr	r7, [fp, #8]
   12388:	mov	r1, #0
   1238c:	mov	r5, #1
   12390:	str	r1, [fp, #-56]	; 0xffffffc8
   12394:	mov	r1, #0
   12398:	str	r1, [sp, #60]	; 0x3c
   1239c:	str	r0, [sp, #76]	; 0x4c
   123a0:	ldr	r0, [fp, #20]
   123a4:	str	r0, [sp, #72]	; 0x48
   123a8:	mov	r0, #0
   123ac:	str	r0, [sp, #56]	; 0x38
   123b0:	mov	r0, #0
   123b4:	str	r0, [sp, #92]	; 0x5c
   123b8:	mov	r0, #0
   123bc:	str	r0, [fp, #-76]	; 0xffffffb4
   123c0:	mov	r0, #0
   123c4:	cmp	r7, #10
   123c8:	bhi	13348 <__assert_fail@plt+0x236c>
   123cc:	add	r1, pc, #28
   123d0:	mov	sl, r6
   123d4:	ldr	r6, [sp, #80]	; 0x50
   123d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   123dc:	mov	r8, #0
   123e0:	mov	r2, #1
   123e4:	mov	r3, #0
   123e8:	mov	lr, r9
   123ec:	ldr	pc, [r1, r7, lsl #2]
   123f0:	ldrdeq	r2, [r1], -r4
   123f4:	andeq	r2, r1, r0, lsl #10
   123f8:	andeq	r2, r1, r4, asr #9
   123fc:			; <UNDEFINED> instruction: 0x000124bc
   12400:	strdeq	r2, [r1], -r4
   12404:	andeq	r2, r1, r8, asr #10
   12408:	andeq	r2, r1, r4, ror #9
   1240c:	andeq	r2, r1, r4, lsr #11
   12410:	andeq	r2, r1, ip, lsl r4
   12414:	andeq	r2, r1, ip, lsl r4
   12418:	andeq	r2, r1, r4, asr #8
   1241c:	movw	r0, #30260	; 0x7634
   12420:	mov	r1, r7
   12424:	movt	r0, #1
   12428:	bl	13d54 <__assert_fail@plt+0x2d78>
   1242c:	str	r0, [sp, #72]	; 0x48
   12430:	movw	r0, #30262	; 0x7636
   12434:	mov	r1, r7
   12438:	movt	r0, #1
   1243c:	bl	13d54 <__assert_fail@plt+0x2d78>
   12440:	str	r0, [sp, #76]	; 0x4c
   12444:	str	r5, [fp, #-48]	; 0xffffffd0
   12448:	mov	r8, #0
   1244c:	mov	r5, r7
   12450:	tst	r4, #1
   12454:	bne	1248c <__assert_fail@plt+0x14b0>
   12458:	ldr	r0, [sp, #72]	; 0x48
   1245c:	ldrb	r0, [r0]
   12460:	cmp	r0, #0
   12464:	beq	1248c <__assert_fail@plt+0x14b0>
   12468:	ldr	r1, [sp, #72]	; 0x48
   1246c:	mov	r8, #0
   12470:	add	r1, r1, #1
   12474:	cmp	r8, sl
   12478:	strbcc	r0, [r6, r8]
   1247c:	ldrb	r0, [r1, r8]
   12480:	add	r8, r8, #1
   12484:	cmp	r0, #0
   12488:	bne	12474 <__assert_fail@plt+0x1498>
   1248c:	ldr	r7, [sp, #76]	; 0x4c
   12490:	mov	r0, r7
   12494:	bl	10ef8 <strlen@plt>
   12498:	str	r7, [sp, #92]	; 0x5c
   1249c:	mov	r7, r5
   124a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   124a4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   124a8:	str	r0, [fp, #-76]	; 0xffffffb4
   124ac:	mov	r2, #1
   124b0:	mov	r3, r4
   124b4:	mov	lr, r9
   124b8:	b	125a4 <__assert_fail@plt+0x15c8>
   124bc:	mov	r0, #1
   124c0:	b	12500 <__assert_fail@plt+0x1524>
   124c4:	tst	r4, #1
   124c8:	bne	12500 <__assert_fail@plt+0x1524>
   124cc:	mov	r2, r0
   124d0:	b	12528 <__assert_fail@plt+0x154c>
   124d4:	mov	r7, #0
   124d8:	mov	r8, #0
   124dc:	mov	r2, r0
   124e0:	b	125a0 <__assert_fail@plt+0x15c4>
   124e4:	mov	r0, #1
   124e8:	mov	r8, #0
   124ec:	mov	r7, #5
   124f0:	b	1255c <__assert_fail@plt+0x1580>
   124f4:	mov	r2, #1
   124f8:	tst	r4, #1
   124fc:	beq	12528 <__assert_fail@plt+0x154c>
   12500:	mov	r1, #1
   12504:	mov	r8, #0
   12508:	mov	r7, #2
   1250c:	mov	r2, r0
   12510:	mov	r3, #1
   12514:	str	r1, [fp, #-76]	; 0xffffffb4
   12518:	movw	r1, #30262	; 0x7636
   1251c:	movt	r1, #1
   12520:	str	r1, [sp, #92]	; 0x5c
   12524:	b	125a4 <__assert_fail@plt+0x15c8>
   12528:	cmp	sl, #0
   1252c:	mov	r8, #1
   12530:	mov	r7, #2
   12534:	movne	r0, #39	; 0x27
   12538:	strbne	r0, [r6]
   1253c:	movw	r0, #30262	; 0x7636
   12540:	movt	r0, #1
   12544:	b	12594 <__assert_fail@plt+0x15b8>
   12548:	mov	r7, #5
   1254c:	tst	r4, #1
   12550:	beq	12578 <__assert_fail@plt+0x159c>
   12554:	mov	r0, #1
   12558:	mov	r8, #0
   1255c:	str	r0, [fp, #-76]	; 0xffffffb4
   12560:	movw	r0, #30258	; 0x7632
   12564:	mov	r2, #1
   12568:	mov	r3, #1
   1256c:	movt	r0, #1
   12570:	str	r0, [sp, #92]	; 0x5c
   12574:	b	125a4 <__assert_fail@plt+0x15c8>
   12578:	cmp	sl, #0
   1257c:	mov	r8, #1
   12580:	mov	r2, #1
   12584:	movne	r0, #34	; 0x22
   12588:	strbne	r0, [r6]
   1258c:	movw	r0, #30258	; 0x7632
   12590:	movt	r0, #1
   12594:	str	r0, [sp, #92]	; 0x5c
   12598:	mov	r0, #1
   1259c:	str	r0, [fp, #-76]	; 0xffffffb4
   125a0:	mov	r3, #0
   125a4:	ldr	r0, [fp, #16]
   125a8:	str	r3, [fp, #-72]	; 0xffffffb8
   125ac:	str	r7, [fp, #-64]	; 0xffffffc0
   125b0:	str	r2, [sp, #84]	; 0x54
   125b4:	cmp	r0, #0
   125b8:	movwne	r0, #1
   125bc:	and	r0, r0, r3
   125c0:	str	r0, [fp, #-88]	; 0xffffffa8
   125c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   125c8:	cmp	r0, #0
   125cc:	movwne	r0, #1
   125d0:	subs	r4, r7, #2
   125d4:	mov	r7, #0
   125d8:	and	r1, r0, r3
   125dc:	str	r4, [fp, #-80]	; 0xffffffb0
   125e0:	and	r1, r2, r1
   125e4:	str	r1, [sp, #48]	; 0x30
   125e8:	clz	r1, r4
   125ec:	lsr	r1, r1, #5
   125f0:	and	r1, r1, r3
   125f4:	eor	r3, r3, #1
   125f8:	str	r1, [sp, #64]	; 0x40
   125fc:	mov	r1, r4
   12600:	str	r3, [sp, #88]	; 0x58
   12604:	movwne	r1, #1
   12608:	orr	r3, r1, r3
   1260c:	and	r1, r1, r2
   12610:	and	r0, r0, r1
   12614:	str	r3, [sp, #68]	; 0x44
   12618:	str	r1, [fp, #-68]	; 0xffffffbc
   1261c:	str	r0, [fp, #-60]	; 0xffffffc4
   12620:	eor	r0, r2, #1
   12624:	str	r0, [sp, #52]	; 0x34
   12628:	cmn	lr, #1
   1262c:	beq	1263c <__assert_fail@plt+0x1660>
   12630:	cmp	r7, lr
   12634:	bne	12648 <__assert_fail@plt+0x166c>
   12638:	b	13170 <__assert_fail@plt+0x2194>
   1263c:	ldrb	r0, [ip, r7]
   12640:	cmp	r0, #0
   12644:	beq	13178 <__assert_fail@plt+0x219c>
   12648:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1264c:	mov	r9, #0
   12650:	str	r5, [fp, #-48]	; 0xffffffd0
   12654:	cmp	r0, #0
   12658:	beq	1268c <__assert_fail@plt+0x16b0>
   1265c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12660:	add	r4, r7, r0
   12664:	cmp	r0, #2
   12668:	bcc	12684 <__assert_fail@plt+0x16a8>
   1266c:	cmn	lr, #1
   12670:	bne	12684 <__assert_fail@plt+0x16a8>
   12674:	mov	r0, ip
   12678:	bl	10ef8 <strlen@plt>
   1267c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12680:	mov	lr, r0
   12684:	cmp	r4, lr
   12688:	bls	12694 <__assert_fail@plt+0x16b8>
   1268c:	mov	r0, #0
   12690:	b	126d4 <__assert_fail@plt+0x16f8>
   12694:	ldr	r1, [sp, #92]	; 0x5c
   12698:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1269c:	add	r0, ip, r7
   126a0:	mov	r4, lr
   126a4:	bl	10e08 <memcmp@plt>
   126a8:	ldr	r2, [sp, #88]	; 0x58
   126ac:	cmp	r0, #0
   126b0:	mov	r1, r0
   126b4:	movwne	r1, #1
   126b8:	orr	r1, r1, r2
   126bc:	tst	r1, #1
   126c0:	beq	13208 <__assert_fail@plt+0x222c>
   126c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   126c8:	clz	r0, r0
   126cc:	mov	lr, r4
   126d0:	lsr	r0, r0, #5
   126d4:	str	r0, [fp, #-52]	; 0xffffffcc
   126d8:	ldrb	r5, [ip, r7]
   126dc:	cmp	r5, #126	; 0x7e
   126e0:	bhi	12a98 <__assert_fail@plt+0x1abc>
   126e4:	add	r3, pc, #16
   126e8:	mov	r4, #1
   126ec:	mov	r2, #110	; 0x6e
   126f0:	mov	r0, #97	; 0x61
   126f4:	mov	r1, #0
   126f8:	ldr	pc, [r3, r5, lsl #2]
   126fc:	muleq	r1, r4, r9
   12700:	muleq	r1, r8, sl
   12704:	muleq	r1, r8, sl
   12708:	muleq	r1, r8, sl
   1270c:	muleq	r1, r8, sl
   12710:	muleq	r1, r8, sl
   12714:	muleq	r1, r8, sl
   12718:	andeq	r2, r1, ip, asr #22
   1271c:	andeq	r2, r1, r4, ror r9
   12720:	andeq	r2, r1, ip, ror #18
   12724:	andeq	r2, r1, r0, lsl #19
   12728:	andeq	r2, r1, r0, lsl #20
   1272c:	andeq	r2, r1, r4, ror #18
   12730:	andeq	r2, r1, ip, ror r9
   12734:	muleq	r1, r8, sl
   12738:	muleq	r1, r8, sl
   1273c:	muleq	r1, r8, sl
   12740:	muleq	r1, r8, sl
   12744:	muleq	r1, r8, sl
   12748:	muleq	r1, r8, sl
   1274c:	muleq	r1, r8, sl
   12750:	muleq	r1, r8, sl
   12754:	muleq	r1, r8, sl
   12758:	muleq	r1, r8, sl
   1275c:	muleq	r1, r8, sl
   12760:	muleq	r1, r8, sl
   12764:	muleq	r1, r8, sl
   12768:	muleq	r1, r8, sl
   1276c:	muleq	r1, r8, sl
   12770:	muleq	r1, r8, sl
   12774:	muleq	r1, r8, sl
   12778:	muleq	r1, r8, sl
   1277c:	andeq	r2, r1, r4, lsl #22
   12780:	andeq	r2, r1, r8, lsl #22
   12784:	andeq	r2, r1, r8, lsl #22
   12788:	andeq	r2, r1, ip, lsl #18
   1278c:	andeq	r2, r1, r8, lsl #22
   12790:	strdeq	r2, [r1], -r8
   12794:	andeq	r2, r1, r8, lsl #22
   12798:	andeq	r2, r1, r8, lsl #20
   1279c:	andeq	r2, r1, r8, lsl #22
   127a0:	andeq	r2, r1, r8, lsl #22
   127a4:	andeq	r2, r1, r8, lsl #22
   127a8:	strdeq	r2, [r1], -r8
   127ac:	strdeq	r2, [r1], -r8
   127b0:	strdeq	r2, [r1], -r8
   127b4:	strdeq	r2, [r1], -r8
   127b8:	strdeq	r2, [r1], -r8
   127bc:	strdeq	r2, [r1], -r8
   127c0:	strdeq	r2, [r1], -r8
   127c4:	strdeq	r2, [r1], -r8
   127c8:	strdeq	r2, [r1], -r8
   127cc:	strdeq	r2, [r1], -r8
   127d0:	strdeq	r2, [r1], -r8
   127d4:	strdeq	r2, [r1], -r8
   127d8:	strdeq	r2, [r1], -r8
   127dc:	strdeq	r2, [r1], -r8
   127e0:	strdeq	r2, [r1], -r8
   127e4:	strdeq	r2, [r1], -r8
   127e8:	andeq	r2, r1, r8, lsl #22
   127ec:	andeq	r2, r1, r8, lsl #22
   127f0:	andeq	r2, r1, r8, lsl #22
   127f4:	andeq	r2, r1, r8, lsl #22
   127f8:	ldrdeq	r2, [r1], -r4
   127fc:	muleq	r1, r8, sl
   12800:	strdeq	r2, [r1], -r8
   12804:	strdeq	r2, [r1], -r8
   12808:	strdeq	r2, [r1], -r8
   1280c:	strdeq	r2, [r1], -r8
   12810:	strdeq	r2, [r1], -r8
   12814:	strdeq	r2, [r1], -r8
   12818:	strdeq	r2, [r1], -r8
   1281c:	strdeq	r2, [r1], -r8
   12820:	strdeq	r2, [r1], -r8
   12824:	strdeq	r2, [r1], -r8
   12828:	strdeq	r2, [r1], -r8
   1282c:	strdeq	r2, [r1], -r8
   12830:	strdeq	r2, [r1], -r8
   12834:	strdeq	r2, [r1], -r8
   12838:	strdeq	r2, [r1], -r8
   1283c:	strdeq	r2, [r1], -r8
   12840:	strdeq	r2, [r1], -r8
   12844:	strdeq	r2, [r1], -r8
   12848:	strdeq	r2, [r1], -r8
   1284c:	strdeq	r2, [r1], -r8
   12850:	strdeq	r2, [r1], -r8
   12854:	strdeq	r2, [r1], -r8
   12858:	strdeq	r2, [r1], -r8
   1285c:	strdeq	r2, [r1], -r8
   12860:	strdeq	r2, [r1], -r8
   12864:	strdeq	r2, [r1], -r8
   12868:	andeq	r2, r1, r8, lsl #22
   1286c:	andeq	r2, r1, r0, asr #18
   12870:	strdeq	r2, [r1], -r8
   12874:	andeq	r2, r1, r8, lsl #22
   12878:	strdeq	r2, [r1], -r8
   1287c:	andeq	r2, r1, r8, lsl #22
   12880:	strdeq	r2, [r1], -r8
   12884:	strdeq	r2, [r1], -r8
   12888:	strdeq	r2, [r1], -r8
   1288c:	strdeq	r2, [r1], -r8
   12890:	strdeq	r2, [r1], -r8
   12894:	strdeq	r2, [r1], -r8
   12898:	strdeq	r2, [r1], -r8
   1289c:	strdeq	r2, [r1], -r8
   128a0:	strdeq	r2, [r1], -r8
   128a4:	strdeq	r2, [r1], -r8
   128a8:	strdeq	r2, [r1], -r8
   128ac:	strdeq	r2, [r1], -r8
   128b0:	strdeq	r2, [r1], -r8
   128b4:	strdeq	r2, [r1], -r8
   128b8:	strdeq	r2, [r1], -r8
   128bc:	strdeq	r2, [r1], -r8
   128c0:	strdeq	r2, [r1], -r8
   128c4:	strdeq	r2, [r1], -r8
   128c8:	strdeq	r2, [r1], -r8
   128cc:	strdeq	r2, [r1], -r8
   128d0:	strdeq	r2, [r1], -r8
   128d4:	strdeq	r2, [r1], -r8
   128d8:	strdeq	r2, [r1], -r8
   128dc:	strdeq	r2, [r1], -r8
   128e0:	strdeq	r2, [r1], -r8
   128e4:	strdeq	r2, [r1], -r8
   128e8:	andeq	r2, r1, r0, lsr #18
   128ec:	andeq	r2, r1, r8, lsl #22
   128f0:	andeq	r2, r1, r0, lsr #18
   128f4:	andeq	r2, r1, ip, lsl #18
   128f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   128fc:	cmp	r0, #0
   12900:	beq	12b60 <__assert_fail@plt+0x1b84>
   12904:	ldr	r0, [fp, #16]
   12908:	b	12b64 <__assert_fail@plt+0x1b88>
   1290c:	mov	r4, #0
   12910:	cmp	r7, #0
   12914:	beq	12b04 <__assert_fail@plt+0x1b28>
   12918:	mov	r9, #0
   1291c:	b	128f8 <__assert_fail@plt+0x191c>
   12920:	mov	r4, #0
   12924:	cmn	lr, #1
   12928:	beq	12ae8 <__assert_fail@plt+0x1b0c>
   1292c:	cmp	r7, #0
   12930:	bne	12918 <__assert_fail@plt+0x193c>
   12934:	cmp	lr, #1
   12938:	beq	12b04 <__assert_fail@plt+0x1b28>
   1293c:	b	12918 <__assert_fail@plt+0x193c>
   12940:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12944:	cmp	r0, #2
   12948:	bne	12b28 <__assert_fail@plt+0x1b4c>
   1294c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12950:	tst	r0, #1
   12954:	bne	13224 <__assert_fail@plt+0x2248>
   12958:	mov	r9, #0
   1295c:	mov	r0, #92	; 0x5c
   12960:	b	12b3c <__assert_fail@plt+0x1b60>
   12964:	mov	r0, #102	; 0x66
   12968:	b	12b4c <__assert_fail@plt+0x1b70>
   1296c:	mov	r2, #116	; 0x74
   12970:	b	12980 <__assert_fail@plt+0x19a4>
   12974:	mov	r0, #98	; 0x62
   12978:	b	12b4c <__assert_fail@plt+0x1b70>
   1297c:	mov	r2, #114	; 0x72
   12980:	ldr	r0, [sp, #68]	; 0x44
   12984:	tst	r0, #1
   12988:	mov	r0, r2
   1298c:	bne	12b4c <__assert_fail@plt+0x1b70>
   12990:	b	13224 <__assert_fail@plt+0x2248>
   12994:	ldr	r0, [sp, #84]	; 0x54
   12998:	tst	r0, #1
   1299c:	beq	12c3c <__assert_fail@plt+0x1c60>
   129a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129a4:	tst	r0, #1
   129a8:	bne	13334 <__assert_fail@plt+0x2358>
   129ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   129b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   129b4:	cmp	r0, #2
   129b8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   129bc:	movwne	r0, #1
   129c0:	orr	r0, r0, r2
   129c4:	tst	r0, #1
   129c8:	beq	1300c <__assert_fail@plt+0x2030>
   129cc:	mov	r0, r8
   129d0:	b	13040 <__assert_fail@plt+0x2064>
   129d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   129d8:	mov	r9, #0
   129dc:	mov	r5, #63	; 0x3f
   129e0:	cmp	r0, #5
   129e4:	beq	12df0 <__assert_fail@plt+0x1e14>
   129e8:	cmp	r0, #2
   129ec:	bne	12e94 <__assert_fail@plt+0x1eb8>
   129f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129f4:	tst	r0, #1
   129f8:	beq	12e98 <__assert_fail@plt+0x1ebc>
   129fc:	b	13224 <__assert_fail@plt+0x2248>
   12a00:	mov	r0, #118	; 0x76
   12a04:	b	12b4c <__assert_fail@plt+0x1b70>
   12a08:	mov	r0, #1
   12a0c:	mov	r5, #39	; 0x27
   12a10:	str	r0, [sp, #60]	; 0x3c
   12a14:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a18:	cmp	r0, #2
   12a1c:	bne	12a90 <__assert_fail@plt+0x1ab4>
   12a20:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a24:	tst	r0, #1
   12a28:	bne	13224 <__assert_fail@plt+0x2248>
   12a2c:	ldr	r2, [sp, #56]	; 0x38
   12a30:	clz	r1, sl
   12a34:	mov	r9, #0
   12a38:	lsr	r1, r1, #5
   12a3c:	cmp	r2, #0
   12a40:	mov	r0, r2
   12a44:	movwne	r0, #1
   12a48:	orrs	r0, r0, r1
   12a4c:	moveq	r2, sl
   12a50:	moveq	sl, r0
   12a54:	cmp	r8, sl
   12a58:	str	r2, [sp, #56]	; 0x38
   12a5c:	movcc	r0, #39	; 0x27
   12a60:	strbcc	r0, [r6, r8]
   12a64:	add	r0, r8, #1
   12a68:	cmp	r0, sl
   12a6c:	movcc	r1, #92	; 0x5c
   12a70:	strbcc	r1, [r6, r0]
   12a74:	add	r0, r8, #2
   12a78:	add	r8, r8, #3
   12a7c:	cmp	r0, sl
   12a80:	movcc	r1, #39	; 0x27
   12a84:	strbcc	r1, [r6, r0]
   12a88:	mov	r0, #0
   12a8c:	str	r0, [fp, #-56]	; 0xffffffc8
   12a90:	mov	r4, #1
   12a94:	b	128f8 <__assert_fail@plt+0x191c>
   12a98:	ldr	r0, [sp, #40]	; 0x28
   12a9c:	cmp	r0, #1
   12aa0:	bne	12c68 <__assert_fail@plt+0x1c8c>
   12aa4:	str	lr, [sp, #28]
   12aa8:	bl	10ee0 <__ctype_b_loc@plt>
   12aac:	ldr	r0, [r0]
   12ab0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ab4:	mov	r1, #1
   12ab8:	add	r0, r0, r5, lsl #1
   12abc:	ldrb	r0, [r0, #1]
   12ac0:	ubfx	r4, r0, #6, #1
   12ac4:	ldr	r0, [sp, #52]	; 0x34
   12ac8:	mov	r2, r1
   12acc:	cmp	r1, #1
   12ad0:	orr	r0, r4, r0
   12ad4:	bhi	12ea0 <__assert_fail@plt+0x1ec4>
   12ad8:	tst	r0, #1
   12adc:	beq	12ea0 <__assert_fail@plt+0x1ec4>
   12ae0:	ldr	lr, [sp, #28]
   12ae4:	b	128f8 <__assert_fail@plt+0x191c>
   12ae8:	cmp	r7, #0
   12aec:	ldrbeq	r0, [ip, #1]
   12af0:	cmpeq	r0, #0
   12af4:	beq	12b04 <__assert_fail@plt+0x1b28>
   12af8:	mvn	lr, #0
   12afc:	mov	r9, #0
   12b00:	b	128f8 <__assert_fail@plt+0x191c>
   12b04:	mov	r1, #1
   12b08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12b0c:	cmp	r0, #2
   12b10:	bne	12b20 <__assert_fail@plt+0x1b44>
   12b14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12b18:	tst	r0, #1
   12b1c:	bne	13224 <__assert_fail@plt+0x2248>
   12b20:	mov	r4, r1
   12b24:	b	128f8 <__assert_fail@plt+0x191c>
   12b28:	ldr	r1, [sp, #48]	; 0x30
   12b2c:	mov	r9, #0
   12b30:	mov	r0, #92	; 0x5c
   12b34:	cmp	r1, #0
   12b38:	beq	12b4c <__assert_fail@plt+0x1b70>
   12b3c:	mov	r4, #0
   12b40:	cmp	r9, #0
   12b44:	beq	130d8 <__assert_fail@plt+0x20fc>
   12b48:	b	13114 <__assert_fail@plt+0x2138>
   12b4c:	ldr	r1, [sp, #84]	; 0x54
   12b50:	mov	r4, #0
   12b54:	mov	r9, #0
   12b58:	tst	r1, #1
   12b5c:	bne	12b9c <__assert_fail@plt+0x1bc0>
   12b60:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b64:	cmp	r0, #0
   12b68:	mov	r0, r5
   12b6c:	beq	12b90 <__assert_fail@plt+0x1bb4>
   12b70:	ldr	r1, [fp, #16]
   12b74:	ubfx	r0, r5, #5, #3
   12b78:	mov	r2, #1
   12b7c:	ldr	r0, [r1, r0, lsl #2]
   12b80:	and	r1, r5, #31
   12b84:	tst	r0, r2, lsl r1
   12b88:	mov	r0, r5
   12b8c:	bne	12b9c <__assert_fail@plt+0x1bc0>
   12b90:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12b94:	cmp	r1, #0
   12b98:	beq	130d0 <__assert_fail@plt+0x20f4>
   12b9c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12ba0:	tst	r1, #1
   12ba4:	bne	131fc <__assert_fail@plt+0x2220>
   12ba8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12bac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12bb0:	cmp	r1, #2
   12bb4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12bb8:	movwne	r1, #1
   12bbc:	orr	r1, r1, r2
   12bc0:	tst	r1, #1
   12bc4:	beq	12bd0 <__assert_fail@plt+0x1bf4>
   12bc8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12bcc:	b	12c0c <__assert_fail@plt+0x1c30>
   12bd0:	cmp	r8, sl
   12bd4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12bd8:	movcc	r1, #39	; 0x27
   12bdc:	strbcc	r1, [r6, r8]
   12be0:	add	r1, r8, #1
   12be4:	cmp	r1, sl
   12be8:	movcc	r2, #36	; 0x24
   12bec:	strbcc	r2, [r6, r1]
   12bf0:	add	r1, r8, #2
   12bf4:	add	r8, r8, #3
   12bf8:	cmp	r1, sl
   12bfc:	movcc	r2, #39	; 0x27
   12c00:	strbcc	r2, [r6, r1]
   12c04:	mov	r1, #1
   12c08:	str	r1, [fp, #-56]	; 0xffffffc8
   12c0c:	cmp	r8, sl
   12c10:	movcc	r1, #92	; 0x5c
   12c14:	strbcc	r1, [r6, r8]
   12c18:	add	r8, r8, #1
   12c1c:	cmp	r8, sl
   12c20:	and	r5, r5, r4
   12c24:	add	r7, r7, #1
   12c28:	strbcc	r0, [r6, r8]
   12c2c:	add	r8, r8, #1
   12c30:	cmn	lr, #1
   12c34:	bne	12630 <__assert_fail@plt+0x1654>
   12c38:	b	1263c <__assert_fail@plt+0x1660>
   12c3c:	ldr	r0, [sp, #36]	; 0x24
   12c40:	mov	r4, #0
   12c44:	mov	r9, #0
   12c48:	mov	r5, #0
   12c4c:	cmp	r0, #0
   12c50:	beq	12b60 <__assert_fail@plt+0x1b84>
   12c54:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12c58:	add	r7, r7, #1
   12c5c:	cmn	lr, #1
   12c60:	bne	12630 <__assert_fail@plt+0x1654>
   12c64:	b	1263c <__assert_fail@plt+0x1660>
   12c68:	mov	r0, #0
   12c6c:	cmn	lr, #1
   12c70:	str	r0, [fp, #-36]	; 0xffffffdc
   12c74:	str	r0, [fp, #-40]	; 0xffffffd8
   12c78:	bne	12c8c <__assert_fail@plt+0x1cb0>
   12c7c:	mov	r0, ip
   12c80:	bl	10ef8 <strlen@plt>
   12c84:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c88:	mov	lr, r0
   12c8c:	add	r0, ip, r7
   12c90:	mov	r4, #1
   12c94:	mov	r6, #0
   12c98:	str	lr, [sp, #28]
   12c9c:	str	r0, [sp, #24]
   12ca0:	sub	r0, fp, #40	; 0x28
   12ca4:	mov	r3, r0
   12ca8:	str	r6, [sp, #44]	; 0x2c
   12cac:	add	r6, r6, r7
   12cb0:	sub	r0, fp, #44	; 0x2c
   12cb4:	add	r1, ip, r6
   12cb8:	sub	r2, lr, r6
   12cbc:	bl	16850 <__assert_fail@plt+0x5874>
   12cc0:	cmp	r0, #0
   12cc4:	beq	1315c <__assert_fail@plt+0x2180>
   12cc8:	cmn	r0, #1
   12ccc:	beq	1311c <__assert_fail@plt+0x2140>
   12cd0:	ldr	lr, [sp, #28]
   12cd4:	cmn	r0, #2
   12cd8:	beq	13124 <__assert_fail@plt+0x2148>
   12cdc:	ldr	r2, [sp, #64]	; 0x40
   12ce0:	cmp	r0, #2
   12ce4:	mov	r1, #0
   12ce8:	movwcc	r1, #1
   12cec:	eor	r2, r2, #1
   12cf0:	orrs	r1, r2, r1
   12cf4:	bne	12db4 <__assert_fail@plt+0x1dd8>
   12cf8:	ldr	r1, [sp, #44]	; 0x2c
   12cfc:	ldr	r2, [sp, #24]
   12d00:	add	r1, r2, r1
   12d04:	mov	r2, #1
   12d08:	ldrb	r3, [r1, r2]
   12d0c:	sub	r3, r3, #91	; 0x5b
   12d10:	cmp	r3, #33	; 0x21
   12d14:	bhi	12da8 <__assert_fail@plt+0x1dcc>
   12d18:	add	r6, pc, #0
   12d1c:	ldr	pc, [r6, r3, lsl #2]
   12d20:	andeq	r3, r1, ip, lsl r2
   12d24:	andeq	r3, r1, ip, lsl r2
   12d28:	andeq	r2, r1, r8, lsr #27
   12d2c:	andeq	r3, r1, ip, lsl r2
   12d30:	andeq	r2, r1, r8, lsr #27
   12d34:	andeq	r3, r1, ip, lsl r2
   12d38:	andeq	r2, r1, r8, lsr #27
   12d3c:	andeq	r2, r1, r8, lsr #27
   12d40:	andeq	r2, r1, r8, lsr #27
   12d44:	andeq	r2, r1, r8, lsr #27
   12d48:	andeq	r2, r1, r8, lsr #27
   12d4c:	andeq	r2, r1, r8, lsr #27
   12d50:	andeq	r2, r1, r8, lsr #27
   12d54:	andeq	r2, r1, r8, lsr #27
   12d58:	andeq	r2, r1, r8, lsr #27
   12d5c:	andeq	r2, r1, r8, lsr #27
   12d60:	andeq	r2, r1, r8, lsr #27
   12d64:	andeq	r2, r1, r8, lsr #27
   12d68:	andeq	r2, r1, r8, lsr #27
   12d6c:	andeq	r2, r1, r8, lsr #27
   12d70:	andeq	r2, r1, r8, lsr #27
   12d74:	andeq	r2, r1, r8, lsr #27
   12d78:	andeq	r2, r1, r8, lsr #27
   12d7c:	andeq	r2, r1, r8, lsr #27
   12d80:	andeq	r2, r1, r8, lsr #27
   12d84:	andeq	r2, r1, r8, lsr #27
   12d88:	andeq	r2, r1, r8, lsr #27
   12d8c:	andeq	r2, r1, r8, lsr #27
   12d90:	andeq	r2, r1, r8, lsr #27
   12d94:	andeq	r2, r1, r8, lsr #27
   12d98:	andeq	r2, r1, r8, lsr #27
   12d9c:	andeq	r2, r1, r8, lsr #27
   12da0:	andeq	r2, r1, r8, lsr #27
   12da4:	andeq	r3, r1, ip, lsl r2
   12da8:	add	r2, r2, #1
   12dac:	cmp	r2, r0
   12db0:	bcc	12d08 <__assert_fail@plt+0x1d2c>
   12db4:	ldr	r6, [sp, #44]	; 0x2c
   12db8:	add	r6, r0, r6
   12dbc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12dc0:	bl	10e38 <iswprint@plt>
   12dc4:	cmp	r0, #0
   12dc8:	movwne	r0, #1
   12dcc:	and	r4, r4, r0
   12dd0:	sub	r0, fp, #40	; 0x28
   12dd4:	bl	10df0 <mbsinit@plt>
   12dd8:	ldr	lr, [sp, #28]
   12ddc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12de0:	sub	r3, fp, #40	; 0x28
   12de4:	cmp	r0, #0
   12de8:	beq	12ca8 <__assert_fail@plt+0x1ccc>
   12dec:	b	13164 <__assert_fail@plt+0x2188>
   12df0:	ldr	r0, [sp, #32]
   12df4:	cmp	r0, #0
   12df8:	beq	12e94 <__assert_fail@plt+0x1eb8>
   12dfc:	add	r0, r7, #2
   12e00:	cmp	r0, lr
   12e04:	bcs	12e94 <__assert_fail@plt+0x1eb8>
   12e08:	add	r1, ip, r7
   12e0c:	ldrb	r1, [r1, #1]
   12e10:	cmp	r1, #63	; 0x3f
   12e14:	bne	12e94 <__assert_fail@plt+0x1eb8>
   12e18:	ldrb	r5, [ip, r0]
   12e1c:	sub	r1, r5, #33	; 0x21
   12e20:	cmp	r1, #29
   12e24:	bhi	12e94 <__assert_fail@plt+0x1eb8>
   12e28:	movw	r3, #20929	; 0x51c1
   12e2c:	mov	r2, #1
   12e30:	movt	r3, #14336	; 0x3800
   12e34:	tst	r3, r2, lsl r1
   12e38:	beq	12e94 <__assert_fail@plt+0x1eb8>
   12e3c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12e40:	tst	r1, #1
   12e44:	bne	1333c <__assert_fail@plt+0x2360>
   12e48:	cmp	r8, sl
   12e4c:	mov	r7, r0
   12e50:	mov	r4, #0
   12e54:	movcc	r1, #63	; 0x3f
   12e58:	strbcc	r1, [r6, r8]
   12e5c:	add	r1, r8, #1
   12e60:	cmp	r1, sl
   12e64:	movcc	r2, #34	; 0x22
   12e68:	strbcc	r2, [r6, r1]
   12e6c:	add	r1, r8, #2
   12e70:	cmp	r1, sl
   12e74:	movcc	r2, #34	; 0x22
   12e78:	strbcc	r2, [r6, r1]
   12e7c:	add	r1, r8, #3
   12e80:	add	r8, r8, #4
   12e84:	cmp	r1, sl
   12e88:	movcc	r2, #63	; 0x3f
   12e8c:	strbcc	r2, [r6, r1]
   12e90:	b	128f8 <__assert_fail@plt+0x191c>
   12e94:	mov	r5, #63	; 0x3f
   12e98:	mov	r4, #0
   12e9c:	b	128f8 <__assert_fail@plt+0x191c>
   12ea0:	add	r1, r2, r7
   12ea4:	ldr	lr, [sp, #28]
   12ea8:	mov	r3, #0
   12eac:	str	r1, [sp, #44]	; 0x2c
   12eb0:	add	r1, r7, #1
   12eb4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12eb8:	tst	r0, #1
   12ebc:	bne	12f90 <__assert_fail@plt+0x1fb4>
   12ec0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12ec4:	tst	r2, #1
   12ec8:	bne	13284 <__assert_fail@plt+0x22a8>
   12ecc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12ed0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12ed4:	cmp	r7, #2
   12ed8:	movwne	r3, #1
   12edc:	orr	r3, r3, r2
   12ee0:	tst	r3, #1
   12ee4:	bne	12f20 <__assert_fail@plt+0x1f44>
   12ee8:	cmp	r8, sl
   12eec:	add	r3, r8, #1
   12ef0:	movcc	r2, #39	; 0x27
   12ef4:	strbcc	r2, [r6, r8]
   12ef8:	cmp	r3, sl
   12efc:	movcc	r2, #36	; 0x24
   12f00:	strbcc	r2, [r6, r3]
   12f04:	add	r3, r8, #2
   12f08:	add	r8, r8, #3
   12f0c:	cmp	r3, sl
   12f10:	movcc	r2, #39	; 0x27
   12f14:	strbcc	r2, [r6, r3]
   12f18:	mov	r2, #1
   12f1c:	str	r2, [fp, #-56]	; 0xffffffc8
   12f20:	cmp	r8, sl
   12f24:	movcc	r3, #92	; 0x5c
   12f28:	strbcc	r3, [r6, r8]
   12f2c:	add	r3, r8, #1
   12f30:	cmp	r3, sl
   12f34:	andcc	r7, r5, #192	; 0xc0
   12f38:	movcc	r2, #48	; 0x30
   12f3c:	orrcc	r7, r2, r7, lsr #6
   12f40:	strbcc	r7, [r6, r3]
   12f44:	add	r3, r8, #2
   12f48:	add	r8, r8, #3
   12f4c:	cmp	r3, sl
   12f50:	lsrcc	r7, r5, #3
   12f54:	movcc	r2, #6
   12f58:	bficc	r7, r2, #3, #29
   12f5c:	mov	r2, #6
   12f60:	strbcc	r7, [r6, r3]
   12f64:	bfi	r5, r2, #3, #29
   12f68:	mov	r3, #1
   12f6c:	b	12fb4 <__assert_fail@plt+0x1fd8>
   12f70:	cmp	r8, sl
   12f74:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12f78:	strbcc	r5, [r6, r8]
   12f7c:	add	r8, r8, #1
   12f80:	ldrb	r5, [ip, r1]
   12f84:	add	r1, r1, #1
   12f88:	tst	r0, #1
   12f8c:	beq	12ec0 <__assert_fail@plt+0x1ee4>
   12f90:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12f94:	tst	r2, #1
   12f98:	beq	12fac <__assert_fail@plt+0x1fd0>
   12f9c:	cmp	r8, sl
   12fa0:	movcc	r7, #92	; 0x5c
   12fa4:	strbcc	r7, [r6, r8]
   12fa8:	add	r8, r8, #1
   12fac:	mov	r2, #0
   12fb0:	str	r2, [fp, #-52]	; 0xffffffcc
   12fb4:	ldr	r2, [sp, #44]	; 0x2c
   12fb8:	and	r9, r3, #1
   12fbc:	cmp	r2, r1
   12fc0:	bls	130c0 <__assert_fail@plt+0x20e4>
   12fc4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12fc8:	cmp	r9, #0
   12fcc:	movwne	r9, #1
   12fd0:	mvn	r7, r2
   12fd4:	orr	r7, r7, r9
   12fd8:	tst	r7, #1
   12fdc:	bne	12f70 <__assert_fail@plt+0x1f94>
   12fe0:	cmp	r8, sl
   12fe4:	movcc	r7, #39	; 0x27
   12fe8:	strbcc	r7, [r6, r8]
   12fec:	add	r7, r8, #1
   12ff0:	add	r8, r8, #2
   12ff4:	cmp	r7, sl
   12ff8:	movcc	r2, #39	; 0x27
   12ffc:	strbcc	r2, [r6, r7]
   13000:	mov	r2, #0
   13004:	str	r2, [fp, #-56]	; 0xffffffc8
   13008:	b	12f70 <__assert_fail@plt+0x1f94>
   1300c:	cmp	r8, sl
   13010:	mov	r2, #1
   13014:	movcc	r0, #39	; 0x27
   13018:	strbcc	r0, [r6, r8]
   1301c:	add	r0, r8, #1
   13020:	cmp	r0, sl
   13024:	movcc	r1, #36	; 0x24
   13028:	strbcc	r1, [r6, r0]
   1302c:	add	r0, r8, #2
   13030:	cmp	r0, sl
   13034:	movcc	r1, #39	; 0x27
   13038:	strbcc	r1, [r6, r0]
   1303c:	add	r0, r8, #3
   13040:	cmp	r0, sl
   13044:	add	r8, r0, #1
   13048:	str	r2, [fp, #-56]	; 0xffffffc8
   1304c:	movcc	r1, #92	; 0x5c
   13050:	strbcc	r1, [r6, r0]
   13054:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13058:	cmp	r1, #2
   1305c:	beq	130b0 <__assert_fail@plt+0x20d4>
   13060:	add	r1, r7, #1
   13064:	mov	r4, #0
   13068:	mov	r9, #1
   1306c:	mov	r5, #48	; 0x30
   13070:	cmp	r1, lr
   13074:	bcs	128f8 <__assert_fail@plt+0x191c>
   13078:	ldrb	r1, [ip, r1]
   1307c:	sub	r1, r1, #48	; 0x30
   13080:	uxtb	r1, r1
   13084:	cmp	r1, #9
   13088:	bhi	128f8 <__assert_fail@plt+0x191c>
   1308c:	cmp	r8, sl
   13090:	movcc	r1, #48	; 0x30
   13094:	strbcc	r1, [r6, r8]
   13098:	add	r1, r0, #2
   1309c:	add	r8, r0, #3
   130a0:	cmp	r1, sl
   130a4:	movcc	r2, #48	; 0x30
   130a8:	strbcc	r2, [r6, r1]
   130ac:	b	128f8 <__assert_fail@plt+0x191c>
   130b0:	mov	r0, #48	; 0x30
   130b4:	mov	r9, #1
   130b8:	mov	r4, #0
   130bc:	b	12b90 <__assert_fail@plt+0x1bb4>
   130c0:	cmp	r9, #0
   130c4:	sub	r7, r1, #1
   130c8:	mov	r0, r5
   130cc:	movwne	r9, #1
   130d0:	cmp	r9, #0
   130d4:	bne	13114 <__assert_fail@plt+0x2138>
   130d8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   130dc:	tst	r1, #1
   130e0:	beq	13114 <__assert_fail@plt+0x2138>
   130e4:	cmp	r8, sl
   130e8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   130ec:	movcc	r1, #39	; 0x27
   130f0:	strbcc	r1, [r6, r8]
   130f4:	add	r1, r8, #1
   130f8:	add	r8, r8, #2
   130fc:	cmp	r1, sl
   13100:	movcc	r2, #39	; 0x27
   13104:	strbcc	r2, [r6, r1]
   13108:	mov	r1, #0
   1310c:	str	r1, [fp, #-56]	; 0xffffffc8
   13110:	b	12c1c <__assert_fail@plt+0x1c40>
   13114:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13118:	b	12c1c <__assert_fail@plt+0x1c40>
   1311c:	mov	r4, #0
   13120:	b	1315c <__assert_fail@plt+0x2180>
   13124:	mov	r4, #0
   13128:	cmp	lr, r6
   1312c:	bls	1315c <__assert_fail@plt+0x2180>
   13130:	ldr	ip, [fp, #-84]	; 0xffffffac
   13134:	ldr	r6, [sp, #44]	; 0x2c
   13138:	ldr	r0, [sp, #24]
   1313c:	ldrb	r0, [r0, r6]
   13140:	cmp	r0, #0
   13144:	beq	13164 <__assert_fail@plt+0x2188>
   13148:	add	r6, r6, #1
   1314c:	add	r0, r7, r6
   13150:	cmp	r0, lr
   13154:	bcc	13138 <__assert_fail@plt+0x215c>
   13158:	b	13164 <__assert_fail@plt+0x2188>
   1315c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13160:	ldr	r6, [sp, #44]	; 0x2c
   13164:	mov	r1, r6
   13168:	ldr	r6, [sp, #80]	; 0x50
   1316c:	b	12ac4 <__assert_fail@plt+0x1ae8>
   13170:	mov	lr, r7
   13174:	b	1317c <__assert_fail@plt+0x21a0>
   13178:	mvn	lr, #0
   1317c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13180:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13184:	eor	r0, r7, #2
   13188:	orr	r0, r0, r8
   1318c:	clz	r0, r0
   13190:	lsr	r0, r0, #5
   13194:	tst	r1, r0
   13198:	bne	13224 <__assert_fail@plt+0x2248>
   1319c:	mov	r0, r1
   131a0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   131a4:	cmp	r7, #2
   131a8:	movwne	r1, #1
   131ac:	orr	r0, r0, r1
   131b0:	tst	r0, #1
   131b4:	ldreq	r0, [sp, #60]	; 0x3c
   131b8:	eoreq	r0, r0, #1
   131bc:	tsteq	r0, #1
   131c0:	bne	132d0 <__assert_fail@plt+0x22f4>
   131c4:	mov	r9, lr
   131c8:	tst	r5, #1
   131cc:	bne	1328c <__assert_fail@plt+0x22b0>
   131d0:	ldr	r6, [sp, #56]	; 0x38
   131d4:	mov	r4, #0
   131d8:	cmp	r6, #0
   131dc:	beq	132c8 <__assert_fail@plt+0x22ec>
   131e0:	ldr	r0, [sp, #84]	; 0x54
   131e4:	mov	r1, #0
   131e8:	cmp	sl, #0
   131ec:	mov	r5, #0
   131f0:	str	r1, [fp, #-72]	; 0xffffffb8
   131f4:	beq	123c4 <__assert_fail@plt+0x13e8>
   131f8:	b	132d0 <__assert_fail@plt+0x22f4>
   131fc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13200:	ldr	r2, [sp, #84]	; 0x54
   13204:	b	1322c <__assert_fail@plt+0x2250>
   13208:	ldr	ip, [fp, #-84]	; 0xffffffac
   1320c:	mov	r2, #1
   13210:	mov	lr, r4
   13214:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13218:	b	1322c <__assert_fail@plt+0x2250>
   1321c:	ldr	r6, [sp, #80]	; 0x50
   13220:	ldr	ip, [fp, #-84]	; 0xffffffac
   13224:	ldr	r2, [sp, #84]	; 0x54
   13228:	mov	r7, #2
   1322c:	mov	r0, #0
   13230:	ldr	r1, [fp, #12]
   13234:	tst	r2, #1
   13238:	mov	r2, r7
   1323c:	mov	r3, lr
   13240:	str	r0, [sp, #8]
   13244:	ldr	r0, [sp, #72]	; 0x48
   13248:	movwne	r2, #4
   1324c:	cmp	r7, #2
   13250:	movne	r2, r7
   13254:	str	r2, [sp]
   13258:	mov	r2, ip
   1325c:	bic	r1, r1, #2
   13260:	str	r0, [sp, #12]
   13264:	ldr	r0, [sp, #76]	; 0x4c
   13268:	str	r1, [sp, #4]
   1326c:	mov	r1, sl
   13270:	str	r0, [sp, #16]
   13274:	mov	r0, r6
   13278:	bl	12344 <__assert_fail@plt+0x1368>
   1327c:	mov	r8, r0
   13280:	b	13328 <__assert_fail@plt+0x234c>
   13284:	ldr	r2, [sp, #84]	; 0x54
   13288:	b	1322c <__assert_fail@plt+0x2250>
   1328c:	mov	r0, #5
   13290:	ldr	r1, [sp, #56]	; 0x38
   13294:	ldr	r2, [fp, #-84]	; 0xffffffac
   13298:	mov	r3, r9
   1329c:	str	r0, [sp]
   132a0:	ldr	r0, [fp, #12]
   132a4:	str	r0, [sp, #4]
   132a8:	ldr	r0, [fp, #16]
   132ac:	str	r0, [sp, #8]
   132b0:	ldr	r0, [sp, #72]	; 0x48
   132b4:	str	r0, [sp, #12]
   132b8:	ldr	r0, [sp, #76]	; 0x4c
   132bc:	str	r0, [sp, #16]
   132c0:	ldr	r0, [sp, #80]	; 0x50
   132c4:	b	13278 <__assert_fail@plt+0x229c>
   132c8:	mov	r0, #0
   132cc:	str	r0, [fp, #-72]	; 0xffffffb8
   132d0:	ldr	r1, [sp, #92]	; 0x5c
   132d4:	cmp	r1, #0
   132d8:	beq	13318 <__assert_fail@plt+0x233c>
   132dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132e0:	ldr	r2, [sp, #80]	; 0x50
   132e4:	tst	r0, #1
   132e8:	bne	1331c <__assert_fail@plt+0x2340>
   132ec:	ldrb	r0, [r1]
   132f0:	cmp	r0, #0
   132f4:	beq	1331c <__assert_fail@plt+0x2340>
   132f8:	add	r1, r1, #1
   132fc:	cmp	r8, sl
   13300:	strbcc	r0, [r2, r8]
   13304:	add	r8, r8, #1
   13308:	ldrb	r0, [r1], #1
   1330c:	cmp	r0, #0
   13310:	bne	132fc <__assert_fail@plt+0x2320>
   13314:	b	1331c <__assert_fail@plt+0x2340>
   13318:	ldr	r2, [sp, #80]	; 0x50
   1331c:	cmp	r8, sl
   13320:	movcc	r0, #0
   13324:	strbcc	r0, [r2, r8]
   13328:	mov	r0, r8
   1332c:	sub	sp, fp, #28
   13330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13334:	mov	r2, #1
   13338:	b	13214 <__assert_fail@plt+0x2238>
   1333c:	ldr	r2, [sp, #84]	; 0x54
   13340:	mov	r7, #5
   13344:	b	1322c <__assert_fail@plt+0x2250>
   13348:	bl	10fc4 <abort@plt>
   1334c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13350:	add	fp, sp, #28
   13354:	sub	sp, sp, #28
   13358:	movw	r5, #33120	; 0x8160
   1335c:	cmp	r2, #0
   13360:	mov	r4, r1
   13364:	mov	r7, r0
   13368:	str	r0, [sp, #20]
   1336c:	movt	r5, #2
   13370:	movne	r5, r2
   13374:	bl	10f10 <__errno_location@plt>
   13378:	mov	sl, r0
   1337c:	ldm	r5, {r0, r1}
   13380:	ldr	r2, [r5, #40]	; 0x28
   13384:	ldr	r3, [r5, #44]	; 0x2c
   13388:	add	r9, r5, #8
   1338c:	ldr	r6, [sl]
   13390:	orr	r8, r1, #1
   13394:	mov	r1, #0
   13398:	str	r6, [sp, #24]
   1339c:	stm	sp, {r0, r8, r9}
   133a0:	str	r2, [sp, #12]
   133a4:	str	r3, [sp, #16]
   133a8:	mov	r0, #0
   133ac:	mov	r2, r7
   133b0:	mov	r3, r4
   133b4:	mov	r6, r4
   133b8:	bl	12344 <__assert_fail@plt+0x1368>
   133bc:	add	r7, r0, #1
   133c0:	mov	r0, r7
   133c4:	bl	1455c <__assert_fail@plt+0x3580>
   133c8:	mov	r4, r0
   133cc:	ldr	r0, [r5]
   133d0:	ldr	r2, [r5, #44]	; 0x2c
   133d4:	ldr	r1, [r5, #40]	; 0x28
   133d8:	mov	r3, r6
   133dc:	stm	sp, {r0, r8, r9}
   133e0:	str	r2, [sp, #16]
   133e4:	str	r1, [sp, #12]
   133e8:	mov	r0, r4
   133ec:	mov	r1, r7
   133f0:	ldr	r2, [sp, #20]
   133f4:	bl	12344 <__assert_fail@plt+0x1368>
   133f8:	ldr	r0, [sp, #24]
   133fc:	str	r0, [sl]
   13400:	mov	r0, r4
   13404:	sub	sp, fp, #28
   13408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1340c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13410:	add	fp, sp, #28
   13414:	sub	sp, sp, #36	; 0x24
   13418:	movw	r8, #33120	; 0x8160
   1341c:	cmp	r3, #0
   13420:	mov	r4, r2
   13424:	str	r2, [sp, #24]
   13428:	mov	r5, r1
   1342c:	mov	r6, r0
   13430:	str	r0, [sp, #20]
   13434:	movt	r8, #2
   13438:	movne	r8, r3
   1343c:	bl	10f10 <__errno_location@plt>
   13440:	str	r0, [sp, #28]
   13444:	cmp	r4, #0
   13448:	add	sl, r8, #8
   1344c:	ldm	r8, {r3, r9}
   13450:	ldr	r7, [r0]
   13454:	ldr	r1, [r8, #40]	; 0x28
   13458:	ldr	r2, [r8, #44]	; 0x2c
   1345c:	mov	r0, #0
   13460:	orreq	r9, r9, #1
   13464:	str	r7, [sp, #32]
   13468:	mov	r7, r5
   1346c:	stm	sp, {r3, r9, sl}
   13470:	str	r1, [sp, #12]
   13474:	str	r2, [sp, #16]
   13478:	mov	r1, #0
   1347c:	mov	r2, r6
   13480:	mov	r3, r5
   13484:	bl	12344 <__assert_fail@plt+0x1368>
   13488:	add	r4, r0, #1
   1348c:	mov	r5, r0
   13490:	mov	r0, r4
   13494:	bl	1455c <__assert_fail@plt+0x3580>
   13498:	mov	r6, r0
   1349c:	ldr	r0, [r8]
   134a0:	ldr	r2, [r8, #44]	; 0x2c
   134a4:	ldr	r1, [r8, #40]	; 0x28
   134a8:	mov	r3, r7
   134ac:	stm	sp, {r0, r9, sl}
   134b0:	str	r2, [sp, #16]
   134b4:	str	r1, [sp, #12]
   134b8:	mov	r0, r6
   134bc:	mov	r1, r4
   134c0:	ldr	r2, [sp, #20]
   134c4:	bl	12344 <__assert_fail@plt+0x1368>
   134c8:	ldr	r0, [sp, #24]
   134cc:	ldr	r1, [sp, #32]
   134d0:	ldr	r2, [sp, #28]
   134d4:	cmp	r0, #0
   134d8:	str	r1, [r2]
   134dc:	strne	r5, [r0]
   134e0:	mov	r0, r6
   134e4:	sub	sp, fp, #28
   134e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   134f0:	add	fp, sp, #24
   134f4:	movw	r5, #33004	; 0x80ec
   134f8:	movw	r8, #33000	; 0x80e8
   134fc:	movt	r5, #2
   13500:	movt	r8, #2
   13504:	ldr	r0, [r5]
   13508:	ldr	r4, [r8]
   1350c:	cmp	r0, #2
   13510:	blt	1353c <__assert_fail@plt+0x2560>
   13514:	add	r7, r4, #12
   13518:	mov	r6, #0
   1351c:	ldr	r0, [r7, r6, lsl #3]
   13520:	bl	1674c <__assert_fail@plt+0x5770>
   13524:	ldr	r1, [r5]
   13528:	add	r2, r6, #2
   1352c:	add	r0, r6, #1
   13530:	mov	r6, r0
   13534:	cmp	r2, r1
   13538:	blt	1351c <__assert_fail@plt+0x2540>
   1353c:	ldr	r0, [r4, #4]
   13540:	movw	r7, #33168	; 0x8190
   13544:	movt	r7, #2
   13548:	cmp	r0, r7
   1354c:	beq	13564 <__assert_fail@plt+0x2588>
   13550:	bl	1674c <__assert_fail@plt+0x5770>
   13554:	movw	r0, #33008	; 0x80f0
   13558:	mov	r6, #256	; 0x100
   1355c:	movt	r0, #2
   13560:	strd	r6, [r0]
   13564:	movw	r6, #33008	; 0x80f0
   13568:	movt	r6, #2
   1356c:	cmp	r4, r6
   13570:	beq	13580 <__assert_fail@plt+0x25a4>
   13574:	mov	r0, r4
   13578:	bl	1674c <__assert_fail@plt+0x5770>
   1357c:	str	r6, [r8]
   13580:	mov	r0, #1
   13584:	str	r0, [r5]
   13588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1358c:	movw	r3, #33120	; 0x8160
   13590:	mvn	r2, #0
   13594:	movt	r3, #2
   13598:	b	1359c <__assert_fail@plt+0x25c0>
   1359c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a0:	add	fp, sp, #28
   135a4:	sub	sp, sp, #44	; 0x2c
   135a8:	mov	r7, r3
   135ac:	str	r2, [sp, #36]	; 0x24
   135b0:	str	r1, [sp, #32]
   135b4:	mov	r5, r0
   135b8:	bl	10f10 <__errno_location@plt>
   135bc:	cmp	r5, #0
   135c0:	blt	1372c <__assert_fail@plt+0x2750>
   135c4:	cmn	r5, #-2147483647	; 0x80000001
   135c8:	beq	1372c <__assert_fail@plt+0x2750>
   135cc:	movw	r8, #33004	; 0x80ec
   135d0:	movw	r4, #33000	; 0x80e8
   135d4:	str	r0, [sp, #28]
   135d8:	ldr	r0, [r0]
   135dc:	movt	r8, #2
   135e0:	movt	r4, #2
   135e4:	ldr	r1, [r8]
   135e8:	ldr	r6, [r4]
   135ec:	str	r0, [sp, #24]
   135f0:	cmp	r1, r5
   135f4:	ble	13600 <__assert_fail@plt+0x2624>
   135f8:	mov	sl, r6
   135fc:	b	13668 <__assert_fail@plt+0x268c>
   13600:	movw	r9, #33008	; 0x80f0
   13604:	mov	r0, #8
   13608:	add	r2, r5, #1
   1360c:	str	r1, [fp, #-32]	; 0xffffffe0
   13610:	mvn	r3, #-2147483648	; 0x80000000
   13614:	movt	r9, #2
   13618:	str	r0, [sp]
   1361c:	sub	r2, r2, r1
   13620:	sub	r1, fp, #32
   13624:	subs	r0, r6, r9
   13628:	movne	r0, r6
   1362c:	bl	1475c <__assert_fail@plt+0x3780>
   13630:	cmp	r6, r9
   13634:	mov	sl, r0
   13638:	str	r0, [r4]
   1363c:	ldrdeq	r0, [r9]
   13640:	stmeq	sl, {r0, r1}
   13644:	ldr	r1, [r8]
   13648:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1364c:	add	r0, sl, r1, lsl #3
   13650:	sub	r1, r2, r1
   13654:	lsl	r2, r1, #3
   13658:	mov	r1, #0
   1365c:	bl	10f28 <memset@plt>
   13660:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13664:	str	r0, [r8]
   13668:	mov	r9, sl
   1366c:	ldr	r6, [r9, r5, lsl #3]!
   13670:	ldr	r4, [r9, #4]!
   13674:	ldm	r7, {r0, r1}
   13678:	ldr	r2, [r7, #40]	; 0x28
   1367c:	ldr	r3, [r7, #44]	; 0x2c
   13680:	orr	r8, r1, #1
   13684:	add	r1, r7, #8
   13688:	stm	sp, {r0, r8}
   1368c:	add	r0, sp, #8
   13690:	str	r1, [sp, #20]
   13694:	stm	r0, {r1, r2, r3}
   13698:	mov	r0, r4
   1369c:	mov	r1, r6
   136a0:	ldr	r2, [sp, #32]
   136a4:	ldr	r3, [sp, #36]	; 0x24
   136a8:	bl	12344 <__assert_fail@plt+0x1368>
   136ac:	cmp	r6, r0
   136b0:	bhi	13714 <__assert_fail@plt+0x2738>
   136b4:	add	r6, r0, #1
   136b8:	movw	r0, #33168	; 0x8190
   136bc:	movt	r0, #2
   136c0:	str	r6, [sl, r5, lsl #3]
   136c4:	cmp	r4, r0
   136c8:	beq	136d4 <__assert_fail@plt+0x26f8>
   136cc:	mov	r0, r4
   136d0:	bl	1674c <__assert_fail@plt+0x5770>
   136d4:	mov	r0, r6
   136d8:	bl	1455c <__assert_fail@plt+0x3580>
   136dc:	str	r0, [r9]
   136e0:	mov	r4, r0
   136e4:	add	r3, sp, #8
   136e8:	ldr	r0, [r7]
   136ec:	ldr	r1, [r7, #40]	; 0x28
   136f0:	ldr	r2, [r7, #44]	; 0x2c
   136f4:	stm	sp, {r0, r8}
   136f8:	ldr	r0, [sp, #20]
   136fc:	stm	r3, {r0, r1, r2}
   13700:	mov	r0, r4
   13704:	mov	r1, r6
   13708:	ldr	r2, [sp, #32]
   1370c:	ldr	r3, [sp, #36]	; 0x24
   13710:	bl	12344 <__assert_fail@plt+0x1368>
   13714:	ldr	r0, [sp, #28]
   13718:	ldr	r1, [sp, #24]
   1371c:	str	r1, [r0]
   13720:	mov	r0, r4
   13724:	sub	sp, fp, #28
   13728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1372c:	bl	10fc4 <abort@plt>
   13730:	movw	r3, #33120	; 0x8160
   13734:	movt	r3, #2
   13738:	b	1359c <__assert_fail@plt+0x25c0>
   1373c:	movw	r3, #33120	; 0x8160
   13740:	mov	r1, r0
   13744:	mov	r0, #0
   13748:	mvn	r2, #0
   1374c:	movt	r3, #2
   13750:	b	1359c <__assert_fail@plt+0x25c0>
   13754:	movw	r3, #33120	; 0x8160
   13758:	mov	r2, r1
   1375c:	mov	r1, r0
   13760:	mov	r0, #0
   13764:	movt	r3, #2
   13768:	b	1359c <__assert_fail@plt+0x25c0>
   1376c:	push	{fp, lr}
   13770:	mov	fp, sp
   13774:	sub	sp, sp, #48	; 0x30
   13778:	vmov.i32	q8, #0	; 0x00000000
   1377c:	mov	ip, #32
   13780:	mov	r3, sp
   13784:	mov	lr, r2
   13788:	cmp	r1, #10
   1378c:	add	r2, r3, #16
   13790:	vst1.64	{d16-d17}, [r3], ip
   13794:	vst1.64	{d16-d17}, [r3]
   13798:	vst1.64	{d16-d17}, [r2]
   1379c:	beq	137bc <__assert_fail@plt+0x27e0>
   137a0:	str	r1, [sp]
   137a4:	mov	r3, sp
   137a8:	mov	r1, lr
   137ac:	mvn	r2, #0
   137b0:	bl	1359c <__assert_fail@plt+0x25c0>
   137b4:	mov	sp, fp
   137b8:	pop	{fp, pc}
   137bc:	bl	10fc4 <abort@plt>
   137c0:	push	{r4, sl, fp, lr}
   137c4:	add	fp, sp, #8
   137c8:	sub	sp, sp, #48	; 0x30
   137cc:	mov	ip, r3
   137d0:	mov	r3, sp
   137d4:	vmov.i32	q8, #0	; 0x00000000
   137d8:	mov	lr, #32
   137dc:	cmp	r1, #10
   137e0:	add	r4, r3, #16
   137e4:	vst1.64	{d16-d17}, [r3], lr
   137e8:	vst1.64	{d16-d17}, [r3]
   137ec:	vst1.64	{d16-d17}, [r4]
   137f0:	beq	13810 <__assert_fail@plt+0x2834>
   137f4:	str	r1, [sp]
   137f8:	mov	r1, r2
   137fc:	mov	r3, sp
   13800:	mov	r2, ip
   13804:	bl	1359c <__assert_fail@plt+0x25c0>
   13808:	sub	sp, fp, #8
   1380c:	pop	{r4, sl, fp, pc}
   13810:	bl	10fc4 <abort@plt>
   13814:	push	{fp, lr}
   13818:	mov	fp, sp
   1381c:	sub	sp, sp, #48	; 0x30
   13820:	mov	r3, sp
   13824:	vmov.i32	q8, #0	; 0x00000000
   13828:	mov	ip, #32
   1382c:	cmp	r0, #10
   13830:	add	r2, r3, #16
   13834:	vst1.64	{d16-d17}, [r3], ip
   13838:	vst1.64	{d16-d17}, [r3]
   1383c:	vst1.64	{d16-d17}, [r2]
   13840:	beq	13860 <__assert_fail@plt+0x2884>
   13844:	str	r0, [sp]
   13848:	mov	r3, sp
   1384c:	mov	r0, #0
   13850:	mvn	r2, #0
   13854:	bl	1359c <__assert_fail@plt+0x25c0>
   13858:	mov	sp, fp
   1385c:	pop	{fp, pc}
   13860:	bl	10fc4 <abort@plt>
   13864:	push	{fp, lr}
   13868:	mov	fp, sp
   1386c:	sub	sp, sp, #48	; 0x30
   13870:	mov	r3, sp
   13874:	vmov.i32	q8, #0	; 0x00000000
   13878:	mov	ip, #32
   1387c:	cmp	r0, #10
   13880:	add	lr, r3, #16
   13884:	vst1.64	{d16-d17}, [r3], ip
   13888:	vst1.64	{d16-d17}, [r3]
   1388c:	vst1.64	{d16-d17}, [lr]
   13890:	beq	138ac <__assert_fail@plt+0x28d0>
   13894:	str	r0, [sp]
   13898:	mov	r3, sp
   1389c:	mov	r0, #0
   138a0:	bl	1359c <__assert_fail@plt+0x25c0>
   138a4:	mov	sp, fp
   138a8:	pop	{fp, pc}
   138ac:	bl	10fc4 <abort@plt>
   138b0:	push	{r4, sl, fp, lr}
   138b4:	add	fp, sp, #8
   138b8:	sub	sp, sp, #48	; 0x30
   138bc:	mov	lr, r0
   138c0:	movw	r0, #33120	; 0x8160
   138c4:	mov	r3, #32
   138c8:	mov	ip, r1
   138cc:	mov	r4, #1
   138d0:	movt	r0, #2
   138d4:	add	r1, r0, #16
   138d8:	vld1.64	{d16-d17}, [r0], r3
   138dc:	mov	r3, sp
   138e0:	vld1.64	{d18-d19}, [r1]
   138e4:	add	r1, r3, #16
   138e8:	vld1.64	{d20-d21}, [r0]
   138ec:	add	r0, r3, #32
   138f0:	vst1.64	{d18-d19}, [r1]
   138f4:	mov	r1, r3
   138f8:	vst1.64	{d20-d21}, [r0]
   138fc:	mov	r0, #28
   13900:	and	r0, r0, r2, lsr #3
   13904:	and	r2, r2, #31
   13908:	vst1.64	{d16-d17}, [r1], r0
   1390c:	ldr	r0, [r1, #8]
   13910:	bic	r4, r4, r0, lsr r2
   13914:	eor	r0, r0, r4, lsl r2
   13918:	mov	r2, ip
   1391c:	str	r0, [r1, #8]
   13920:	mov	r0, #0
   13924:	mov	r1, lr
   13928:	bl	1359c <__assert_fail@plt+0x25c0>
   1392c:	sub	sp, fp, #8
   13930:	pop	{r4, sl, fp, pc}
   13934:	push	{fp, lr}
   13938:	mov	fp, sp
   1393c:	sub	sp, sp, #48	; 0x30
   13940:	mov	ip, r0
   13944:	movw	r0, #33120	; 0x8160
   13948:	mov	r3, #32
   1394c:	movt	r0, #2
   13950:	add	r2, r0, #16
   13954:	vld1.64	{d16-d17}, [r0], r3
   13958:	mov	r3, sp
   1395c:	vld1.64	{d18-d19}, [r2]
   13960:	add	r2, r3, #16
   13964:	vld1.64	{d20-d21}, [r0]
   13968:	add	r0, r3, #32
   1396c:	vst1.64	{d18-d19}, [r2]
   13970:	mov	r2, r3
   13974:	vst1.64	{d20-d21}, [r0]
   13978:	mov	r0, #28
   1397c:	and	r0, r0, r1, lsr #3
   13980:	and	r1, r1, #31
   13984:	vst1.64	{d16-d17}, [r2], r0
   13988:	mov	r0, #1
   1398c:	ldr	lr, [r2, #8]
   13990:	bic	r0, r0, lr, lsr r1
   13994:	eor	r0, lr, r0, lsl r1
   13998:	mov	r1, ip
   1399c:	str	r0, [r2, #8]
   139a0:	mov	r0, #0
   139a4:	mvn	r2, #0
   139a8:	bl	1359c <__assert_fail@plt+0x25c0>
   139ac:	mov	sp, fp
   139b0:	pop	{fp, pc}
   139b4:	push	{fp, lr}
   139b8:	mov	fp, sp
   139bc:	sub	sp, sp, #48	; 0x30
   139c0:	movw	r2, #33120	; 0x8160
   139c4:	mov	r3, #32
   139c8:	mov	r1, r0
   139cc:	movt	r2, #2
   139d0:	add	r0, r2, #16
   139d4:	vld1.64	{d16-d17}, [r2], r3
   139d8:	mov	r3, sp
   139dc:	vld1.64	{d18-d19}, [r0]
   139e0:	add	r0, r3, #16
   139e4:	vld1.64	{d20-d21}, [r2]
   139e8:	mov	r2, r3
   139ec:	vst1.64	{d18-d19}, [r0]
   139f0:	add	r0, r3, #32
   139f4:	vst1.64	{d20-d21}, [r0]
   139f8:	mov	r0, #12
   139fc:	vst1.64	{d16-d17}, [r2], r0
   13a00:	ldr	r0, [r2]
   13a04:	orr	r0, r0, #67108864	; 0x4000000
   13a08:	str	r0, [r2]
   13a0c:	mov	r0, #0
   13a10:	mvn	r2, #0
   13a14:	bl	1359c <__assert_fail@plt+0x25c0>
   13a18:	mov	sp, fp
   13a1c:	pop	{fp, pc}
   13a20:	push	{fp, lr}
   13a24:	mov	fp, sp
   13a28:	sub	sp, sp, #48	; 0x30
   13a2c:	mov	ip, r1
   13a30:	mov	r1, r0
   13a34:	movw	r0, #33120	; 0x8160
   13a38:	mov	r3, #32
   13a3c:	movt	r0, #2
   13a40:	add	r2, r0, #16
   13a44:	vld1.64	{d16-d17}, [r0], r3
   13a48:	mov	r3, sp
   13a4c:	vld1.64	{d18-d19}, [r2]
   13a50:	add	r2, r3, #16
   13a54:	vld1.64	{d20-d21}, [r0]
   13a58:	add	r0, r3, #32
   13a5c:	vst1.64	{d18-d19}, [r2]
   13a60:	mov	r2, r3
   13a64:	vst1.64	{d20-d21}, [r0]
   13a68:	mov	r0, #12
   13a6c:	vst1.64	{d16-d17}, [r2], r0
   13a70:	ldr	r0, [r2]
   13a74:	orr	r0, r0, #67108864	; 0x4000000
   13a78:	str	r0, [r2]
   13a7c:	mov	r0, #0
   13a80:	mov	r2, ip
   13a84:	bl	1359c <__assert_fail@plt+0x25c0>
   13a88:	mov	sp, fp
   13a8c:	pop	{fp, pc}
   13a90:	push	{r4, sl, fp, lr}
   13a94:	add	fp, sp, #8
   13a98:	sub	sp, sp, #96	; 0x60
   13a9c:	mov	ip, r2
   13aa0:	mov	r2, sp
   13aa4:	vmov.i32	q8, #0	; 0x00000000
   13aa8:	mov	r4, #28
   13aac:	cmp	r1, #10
   13ab0:	mov	r3, r2
   13ab4:	add	lr, r2, #16
   13ab8:	vst1.64	{d16-d17}, [r3], r4
   13abc:	vst1.64	{d16-d17}, [lr]
   13ac0:	vst1.32	{d16-d17}, [r3]
   13ac4:	beq	13b14 <__assert_fail@plt+0x2b38>
   13ac8:	vld1.64	{d16-d17}, [r2], r4
   13acc:	vld1.64	{d18-d19}, [lr]
   13ad0:	add	r3, sp, #48	; 0x30
   13ad4:	add	r4, r3, #4
   13ad8:	vld1.32	{d20-d21}, [r2]
   13adc:	add	r2, r3, #20
   13ae0:	vst1.32	{d16-d17}, [r4]
   13ae4:	vst1.32	{d18-d19}, [r2]
   13ae8:	add	r2, r3, #32
   13aec:	vst1.32	{d20-d21}, [r2]
   13af0:	str	r1, [sp, #48]	; 0x30
   13af4:	mvn	r2, #0
   13af8:	ldr	r1, [sp, #60]	; 0x3c
   13afc:	orr	r1, r1, #67108864	; 0x4000000
   13b00:	str	r1, [sp, #60]	; 0x3c
   13b04:	mov	r1, ip
   13b08:	bl	1359c <__assert_fail@plt+0x25c0>
   13b0c:	sub	sp, fp, #8
   13b10:	pop	{r4, sl, fp, pc}
   13b14:	bl	10fc4 <abort@plt>
   13b18:	push	{r4, r5, fp, lr}
   13b1c:	add	fp, sp, #8
   13b20:	sub	sp, sp, #48	; 0x30
   13b24:	mov	ip, r3
   13b28:	movw	r3, #33120	; 0x8160
   13b2c:	mov	lr, #32
   13b30:	cmp	r1, #0
   13b34:	mov	r5, sp
   13b38:	movt	r3, #2
   13b3c:	cmpne	r2, #0
   13b40:	add	r4, r3, #16
   13b44:	vld1.64	{d16-d17}, [r3], lr
   13b48:	vld1.64	{d18-d19}, [r4]
   13b4c:	add	r4, r5, #16
   13b50:	vld1.64	{d20-d21}, [r3]
   13b54:	vst1.64	{d16-d17}, [r5], lr
   13b58:	mov	r3, #10
   13b5c:	vst1.64	{d18-d19}, [r4]
   13b60:	vst1.64	{d20-d21}, [r5]
   13b64:	str	r3, [sp]
   13b68:	bne	13b70 <__assert_fail@plt+0x2b94>
   13b6c:	bl	10fc4 <abort@plt>
   13b70:	str	r2, [sp, #44]	; 0x2c
   13b74:	str	r1, [sp, #40]	; 0x28
   13b78:	mov	r3, sp
   13b7c:	mov	r1, ip
   13b80:	mvn	r2, #0
   13b84:	bl	1359c <__assert_fail@plt+0x25c0>
   13b88:	sub	sp, fp, #8
   13b8c:	pop	{r4, r5, fp, pc}
   13b90:	push	{r4, r5, fp, lr}
   13b94:	add	fp, sp, #8
   13b98:	sub	sp, sp, #48	; 0x30
   13b9c:	mov	lr, r3
   13ba0:	movw	r3, #33120	; 0x8160
   13ba4:	mov	ip, #32
   13ba8:	cmp	r1, #0
   13bac:	mov	r5, sp
   13bb0:	movt	r3, #2
   13bb4:	cmpne	r2, #0
   13bb8:	add	r4, r3, #16
   13bbc:	vld1.64	{d16-d17}, [r3], ip
   13bc0:	vld1.64	{d18-d19}, [r4]
   13bc4:	add	r4, r5, #16
   13bc8:	vld1.64	{d20-d21}, [r3]
   13bcc:	vst1.64	{d16-d17}, [r5], ip
   13bd0:	mov	r3, #10
   13bd4:	vst1.64	{d18-d19}, [r4]
   13bd8:	vst1.64	{d20-d21}, [r5]
   13bdc:	str	r3, [sp]
   13be0:	bne	13be8 <__assert_fail@plt+0x2c0c>
   13be4:	bl	10fc4 <abort@plt>
   13be8:	ldr	ip, [fp, #8]
   13bec:	str	r2, [sp, #44]	; 0x2c
   13bf0:	str	r1, [sp, #40]	; 0x28
   13bf4:	mov	r3, sp
   13bf8:	mov	r1, lr
   13bfc:	mov	r2, ip
   13c00:	bl	1359c <__assert_fail@plt+0x25c0>
   13c04:	sub	sp, fp, #8
   13c08:	pop	{r4, r5, fp, pc}
   13c0c:	push	{r4, sl, fp, lr}
   13c10:	add	fp, sp, #8
   13c14:	sub	sp, sp, #48	; 0x30
   13c18:	mov	ip, r2
   13c1c:	movw	r2, #33120	; 0x8160
   13c20:	mov	lr, #32
   13c24:	cmp	r0, #0
   13c28:	mov	r4, sp
   13c2c:	movt	r2, #2
   13c30:	cmpne	r1, #0
   13c34:	add	r3, r2, #16
   13c38:	vld1.64	{d16-d17}, [r2], lr
   13c3c:	vld1.64	{d18-d19}, [r3]
   13c40:	add	r3, r4, #16
   13c44:	vld1.64	{d20-d21}, [r2]
   13c48:	vst1.64	{d16-d17}, [r4], lr
   13c4c:	mov	r2, #10
   13c50:	vst1.64	{d18-d19}, [r3]
   13c54:	vst1.64	{d20-d21}, [r4]
   13c58:	str	r2, [sp]
   13c5c:	bne	13c64 <__assert_fail@plt+0x2c88>
   13c60:	bl	10fc4 <abort@plt>
   13c64:	str	r1, [sp, #44]	; 0x2c
   13c68:	str	r0, [sp, #40]	; 0x28
   13c6c:	mov	r3, sp
   13c70:	mov	r0, #0
   13c74:	mov	r1, ip
   13c78:	mvn	r2, #0
   13c7c:	bl	1359c <__assert_fail@plt+0x25c0>
   13c80:	sub	sp, fp, #8
   13c84:	pop	{r4, sl, fp, pc}
   13c88:	push	{r4, r5, fp, lr}
   13c8c:	add	fp, sp, #8
   13c90:	sub	sp, sp, #48	; 0x30
   13c94:	mov	lr, r2
   13c98:	movw	r2, #33120	; 0x8160
   13c9c:	mov	ip, r3
   13ca0:	mov	r3, #32
   13ca4:	cmp	r0, #0
   13ca8:	mov	r5, sp
   13cac:	movt	r2, #2
   13cb0:	cmpne	r1, #0
   13cb4:	add	r4, r2, #16
   13cb8:	vld1.64	{d16-d17}, [r2], r3
   13cbc:	vld1.64	{d18-d19}, [r4]
   13cc0:	add	r4, r5, #16
   13cc4:	vld1.64	{d20-d21}, [r2]
   13cc8:	vst1.64	{d16-d17}, [r5], r3
   13ccc:	mov	r2, #10
   13cd0:	vst1.64	{d18-d19}, [r4]
   13cd4:	vst1.64	{d20-d21}, [r5]
   13cd8:	str	r2, [sp]
   13cdc:	bne	13ce4 <__assert_fail@plt+0x2d08>
   13ce0:	bl	10fc4 <abort@plt>
   13ce4:	str	r1, [sp, #44]	; 0x2c
   13ce8:	str	r0, [sp, #40]	; 0x28
   13cec:	mov	r3, sp
   13cf0:	mov	r0, #0
   13cf4:	mov	r1, lr
   13cf8:	mov	r2, ip
   13cfc:	bl	1359c <__assert_fail@plt+0x25c0>
   13d00:	sub	sp, fp, #8
   13d04:	pop	{r4, r5, fp, pc}
   13d08:	movw	r3, #33016	; 0x80f8
   13d0c:	movt	r3, #2
   13d10:	b	1359c <__assert_fail@plt+0x25c0>
   13d14:	movw	r3, #33016	; 0x80f8
   13d18:	mov	r2, r1
   13d1c:	mov	r1, r0
   13d20:	mov	r0, #0
   13d24:	movt	r3, #2
   13d28:	b	1359c <__assert_fail@plt+0x25c0>
   13d2c:	movw	r3, #33016	; 0x80f8
   13d30:	mvn	r2, #0
   13d34:	movt	r3, #2
   13d38:	b	1359c <__assert_fail@plt+0x25c0>
   13d3c:	movw	r3, #33016	; 0x80f8
   13d40:	mov	r1, r0
   13d44:	mov	r0, #0
   13d48:	mvn	r2, #0
   13d4c:	movt	r3, #2
   13d50:	b	1359c <__assert_fail@plt+0x25c0>
   13d54:	push	{r4, r5, fp, lr}
   13d58:	add	fp, sp, #8
   13d5c:	mov	r5, r0
   13d60:	mov	r4, r1
   13d64:	mov	r0, #0
   13d68:	mov	r2, #5
   13d6c:	mov	r1, r5
   13d70:	bl	10e14 <dcgettext@plt>
   13d74:	cmp	r0, r5
   13d78:	popne	{r4, r5, fp, pc}
   13d7c:	bl	16818 <__assert_fail@plt+0x583c>
   13d80:	ldrb	r1, [r0]
   13d84:	and	r1, r1, #223	; 0xdf
   13d88:	cmp	r1, #71	; 0x47
   13d8c:	beq	13df4 <__assert_fail@plt+0x2e18>
   13d90:	cmp	r1, #85	; 0x55
   13d94:	bne	13e18 <__assert_fail@plt+0x2e3c>
   13d98:	ldrb	r1, [r0, #1]
   13d9c:	and	r1, r1, #223	; 0xdf
   13da0:	cmp	r1, #84	; 0x54
   13da4:	bne	13e18 <__assert_fail@plt+0x2e3c>
   13da8:	ldrb	r1, [r0, #2]
   13dac:	and	r1, r1, #223	; 0xdf
   13db0:	cmp	r1, #70	; 0x46
   13db4:	ldrbeq	r1, [r0, #3]
   13db8:	cmpeq	r1, #45	; 0x2d
   13dbc:	bne	13e18 <__assert_fail@plt+0x2e3c>
   13dc0:	ldrb	r1, [r0, #4]
   13dc4:	cmp	r1, #56	; 0x38
   13dc8:	ldrbeq	r0, [r0, #5]
   13dcc:	cmpeq	r0, #0
   13dd0:	bne	13e18 <__assert_fail@plt+0x2e3c>
   13dd4:	ldrb	r1, [r5]
   13dd8:	movw	r2, #30264	; 0x7638
   13ddc:	movw	r0, #30268	; 0x763c
   13de0:	movt	r2, #1
   13de4:	movt	r0, #1
   13de8:	cmp	r1, #96	; 0x60
   13dec:	moveq	r0, r2
   13df0:	pop	{r4, r5, fp, pc}
   13df4:	ldrb	r1, [r0, #1]
   13df8:	and	r1, r1, #223	; 0xdf
   13dfc:	cmp	r1, #66	; 0x42
   13e00:	bne	13e18 <__assert_fail@plt+0x2e3c>
   13e04:	ldrb	r1, [r0, #2]
   13e08:	cmp	r1, #49	; 0x31
   13e0c:	ldrbeq	r1, [r0, #3]
   13e10:	cmpeq	r1, #56	; 0x38
   13e14:	beq	13e34 <__assert_fail@plt+0x2e58>
   13e18:	movw	r1, #30258	; 0x7632
   13e1c:	movw	r0, #30262	; 0x7636
   13e20:	cmp	r4, #9
   13e24:	movt	r1, #1
   13e28:	movt	r0, #1
   13e2c:	moveq	r0, r1
   13e30:	pop	{r4, r5, fp, pc}
   13e34:	ldrb	r1, [r0, #4]
   13e38:	cmp	r1, #48	; 0x30
   13e3c:	ldrbeq	r1, [r0, #5]
   13e40:	cmpeq	r1, #51	; 0x33
   13e44:	bne	13e18 <__assert_fail@plt+0x2e3c>
   13e48:	ldrb	r1, [r0, #6]
   13e4c:	cmp	r1, #48	; 0x30
   13e50:	ldrbeq	r0, [r0, #7]
   13e54:	cmpeq	r0, #0
   13e58:	bne	13e18 <__assert_fail@plt+0x2e3c>
   13e5c:	ldrb	r1, [r5]
   13e60:	movw	r2, #30272	; 0x7640
   13e64:	movw	r0, #30276	; 0x7644
   13e68:	movt	r2, #1
   13e6c:	movt	r0, #1
   13e70:	b	13de8 <__assert_fail@plt+0x2e0c>
   13e74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e78:	add	fp, sp, #24
   13e7c:	sub	sp, sp, #32
   13e80:	ldr	r6, [fp, #12]
   13e84:	ldr	r7, [fp, #8]
   13e88:	mov	r4, r2
   13e8c:	mov	r8, r0
   13e90:	cmp	r1, #0
   13e94:	beq	13ebc <__assert_fail@plt+0x2ee0>
   13e98:	movw	r2, #30364	; 0x769c
   13e9c:	mov	r5, r1
   13ea0:	str	r3, [sp, #4]
   13ea4:	str	r4, [sp]
   13ea8:	mov	r0, r8
   13eac:	mov	r1, #1
   13eb0:	movt	r2, #1
   13eb4:	mov	r3, r5
   13eb8:	b	13ed4 <__assert_fail@plt+0x2ef8>
   13ebc:	movw	r2, #30376	; 0x76a8
   13ec0:	str	r3, [sp]
   13ec4:	mov	r0, r8
   13ec8:	mov	r1, #1
   13ecc:	mov	r3, r4
   13ed0:	movt	r2, #1
   13ed4:	bl	10f4c <__fprintf_chk@plt>
   13ed8:	movw	r1, #30383	; 0x76af
   13edc:	mov	r0, #0
   13ee0:	mov	r2, #5
   13ee4:	movt	r1, #1
   13ee8:	bl	10e14 <dcgettext@plt>
   13eec:	movw	r2, #31101	; 0x797d
   13ef0:	mov	r3, r0
   13ef4:	movw	r0, #2022	; 0x7e6
   13ef8:	mov	r1, #1
   13efc:	str	r0, [sp]
   13f00:	movt	r2, #1
   13f04:	mov	r0, r8
   13f08:	bl	10f4c <__fprintf_chk@plt>
   13f0c:	movw	r4, #29707	; 0x740b
   13f10:	mov	r1, r8
   13f14:	movt	r4, #1
   13f18:	mov	r0, r4
   13f1c:	bl	10d9c <fputs_unlocked@plt>
   13f20:	movw	r1, #30387	; 0x76b3
   13f24:	mov	r0, #0
   13f28:	mov	r2, #5
   13f2c:	movt	r1, #1
   13f30:	bl	10e14 <dcgettext@plt>
   13f34:	movw	r3, #30558	; 0x775e
   13f38:	mov	r2, r0
   13f3c:	mov	r0, r8
   13f40:	mov	r1, #1
   13f44:	movt	r3, #1
   13f48:	bl	10f4c <__fprintf_chk@plt>
   13f4c:	mov	r0, r4
   13f50:	mov	r1, r8
   13f54:	bl	10d9c <fputs_unlocked@plt>
   13f58:	cmp	r6, #9
   13f5c:	bhi	13f98 <__assert_fail@plt+0x2fbc>
   13f60:	add	r0, pc, #0
   13f64:	ldr	pc, [r0, r6, lsl #2]
   13f68:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13f6c:	andeq	r3, r1, r4, lsr #31
   13f70:	ldrdeq	r3, [r1], -r4
   13f74:	strdeq	r3, [r1], -ip
   13f78:	andeq	r4, r1, r4, lsr #32
   13f7c:	andeq	r4, r1, ip, asr #32
   13f80:	andeq	r4, r1, r4, ror r0
   13f84:	andeq	r4, r1, ip, lsr #1
   13f88:	andeq	r4, r1, ip, asr #2
   13f8c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f90:	sub	sp, fp, #24
   13f94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f98:	movw	r1, #30911	; 0x78bf
   13f9c:	movt	r1, #1
   13fa0:	b	140fc <__assert_fail@plt+0x3120>
   13fa4:	movw	r1, #30592	; 0x7780
   13fa8:	mov	r0, #0
   13fac:	mov	r2, #5
   13fb0:	movt	r1, #1
   13fb4:	bl	10e14 <dcgettext@plt>
   13fb8:	ldr	r3, [r7]
   13fbc:	mov	r2, r0
   13fc0:	mov	r0, r8
   13fc4:	mov	r1, #1
   13fc8:	sub	sp, fp, #24
   13fcc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13fd0:	b	10f4c <__fprintf_chk@plt>
   13fd4:	movw	r1, #30608	; 0x7790
   13fd8:	mov	r0, #0
   13fdc:	mov	r2, #5
   13fe0:	movt	r1, #1
   13fe4:	bl	10e14 <dcgettext@plt>
   13fe8:	mov	r2, r0
   13fec:	ldr	r3, [r7]
   13ff0:	ldr	r0, [r7, #4]
   13ff4:	str	r0, [sp]
   13ff8:	b	140e8 <__assert_fail@plt+0x310c>
   13ffc:	movw	r1, #30631	; 0x77a7
   14000:	mov	r0, #0
   14004:	mov	r2, #5
   14008:	movt	r1, #1
   1400c:	bl	10e14 <dcgettext@plt>
   14010:	ldr	r3, [r7]
   14014:	mov	r2, r0
   14018:	ldmib	r7, {r0, r1}
   1401c:	stm	sp, {r0, r1}
   14020:	b	140e8 <__assert_fail@plt+0x310c>
   14024:	movw	r1, #30659	; 0x77c3
   14028:	mov	r0, #0
   1402c:	mov	r2, #5
   14030:	movt	r1, #1
   14034:	bl	10e14 <dcgettext@plt>
   14038:	ldr	r3, [r7]
   1403c:	mov	r2, r0
   14040:	ldmib	r7, {r0, r1, r7}
   14044:	stm	sp, {r0, r1, r7}
   14048:	b	140e8 <__assert_fail@plt+0x310c>
   1404c:	movw	r1, #30691	; 0x77e3
   14050:	mov	r0, #0
   14054:	mov	r2, #5
   14058:	movt	r1, #1
   1405c:	bl	10e14 <dcgettext@plt>
   14060:	ldr	r3, [r7]
   14064:	mov	r2, r0
   14068:	ldmib	r7, {r0, r1, r6, r7}
   1406c:	stm	sp, {r0, r1, r6, r7}
   14070:	b	140e8 <__assert_fail@plt+0x310c>
   14074:	movw	r1, #30727	; 0x7807
   14078:	mov	r0, #0
   1407c:	mov	r2, #5
   14080:	movt	r1, #1
   14084:	bl	10e14 <dcgettext@plt>
   14088:	ldr	r3, [r7]
   1408c:	mov	r2, r0
   14090:	ldmib	r7, {r0, r1, r6}
   14094:	ldr	r5, [r7, #16]
   14098:	ldr	r7, [r7, #20]
   1409c:	stm	sp, {r0, r1, r6}
   140a0:	str	r5, [sp, #12]
   140a4:	str	r7, [sp, #16]
   140a8:	b	140e8 <__assert_fail@plt+0x310c>
   140ac:	movw	r1, #30767	; 0x782f
   140b0:	mov	r0, #0
   140b4:	mov	r2, #5
   140b8:	movt	r1, #1
   140bc:	bl	10e14 <dcgettext@plt>
   140c0:	ldr	r3, [r7]
   140c4:	mov	r2, r0
   140c8:	ldmib	r7, {r0, r1, r6}
   140cc:	ldr	r5, [r7, #16]
   140d0:	ldr	r4, [r7, #20]
   140d4:	ldr	r7, [r7, #24]
   140d8:	stm	sp, {r0, r1, r6}
   140dc:	str	r5, [sp, #12]
   140e0:	str	r4, [sp, #16]
   140e4:	str	r7, [sp, #20]
   140e8:	mov	r0, r8
   140ec:	mov	r1, #1
   140f0:	b	1419c <__assert_fail@plt+0x31c0>
   140f4:	movw	r1, #30859	; 0x788b
   140f8:	movt	r1, #1
   140fc:	mov	r0, #0
   14100:	mov	r2, #5
   14104:	bl	10e14 <dcgettext@plt>
   14108:	mov	ip, r0
   1410c:	ldr	r3, [r7]
   14110:	ldr	r0, [r7, #4]
   14114:	ldr	r1, [r7, #8]
   14118:	ldr	r6, [r7, #12]
   1411c:	ldr	r5, [r7, #16]
   14120:	ldr	r4, [r7, #20]
   14124:	ldr	r2, [r7, #24]
   14128:	ldr	lr, [r7, #28]
   1412c:	ldr	r7, [r7, #32]
   14130:	stm	sp, {r0, r1, r6}
   14134:	str	r5, [sp, #12]
   14138:	str	r4, [sp, #16]
   1413c:	str	r2, [sp, #20]
   14140:	str	lr, [sp, #24]
   14144:	str	r7, [sp, #28]
   14148:	b	14190 <__assert_fail@plt+0x31b4>
   1414c:	movw	r1, #30811	; 0x785b
   14150:	mov	r0, #0
   14154:	mov	r2, #5
   14158:	movt	r1, #1
   1415c:	bl	10e14 <dcgettext@plt>
   14160:	mov	ip, r0
   14164:	ldr	r3, [r7]
   14168:	ldmib	r7, {r0, r1, r6}
   1416c:	ldr	r5, [r7, #16]
   14170:	ldr	r4, [r7, #20]
   14174:	ldr	r2, [r7, #24]
   14178:	ldr	r7, [r7, #28]
   1417c:	stm	sp, {r0, r1, r6}
   14180:	str	r5, [sp, #12]
   14184:	str	r4, [sp, #16]
   14188:	str	r2, [sp, #20]
   1418c:	str	r7, [sp, #24]
   14190:	mov	r0, r8
   14194:	mov	r1, #1
   14198:	mov	r2, ip
   1419c:	bl	10f4c <__fprintf_chk@plt>
   141a0:	sub	sp, fp, #24
   141a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   141a8:	push	{r4, sl, fp, lr}
   141ac:	add	fp, sp, #8
   141b0:	sub	sp, sp, #8
   141b4:	ldr	ip, [fp, #8]
   141b8:	mov	lr, #0
   141bc:	ldr	r4, [ip, lr, lsl #2]
   141c0:	add	lr, lr, #1
   141c4:	cmp	r4, #0
   141c8:	bne	141bc <__assert_fail@plt+0x31e0>
   141cc:	sub	r4, lr, #1
   141d0:	str	ip, [sp]
   141d4:	str	r4, [sp, #4]
   141d8:	bl	13e74 <__assert_fail@plt+0x2e98>
   141dc:	sub	sp, fp, #8
   141e0:	pop	{r4, sl, fp, pc}
   141e4:	push	{fp, lr}
   141e8:	mov	fp, sp
   141ec:	sub	sp, sp, #48	; 0x30
   141f0:	ldr	ip, [fp, #8]
   141f4:	ldr	lr, [ip]
   141f8:	cmp	lr, #0
   141fc:	str	lr, [sp, #8]
   14200:	beq	1429c <__assert_fail@plt+0x32c0>
   14204:	ldr	lr, [ip, #4]
   14208:	cmp	lr, #0
   1420c:	str	lr, [sp, #12]
   14210:	beq	142a4 <__assert_fail@plt+0x32c8>
   14214:	ldr	lr, [ip, #8]
   14218:	cmp	lr, #0
   1421c:	str	lr, [sp, #16]
   14220:	beq	142ac <__assert_fail@plt+0x32d0>
   14224:	ldr	lr, [ip, #12]
   14228:	cmp	lr, #0
   1422c:	str	lr, [sp, #20]
   14230:	beq	142b4 <__assert_fail@plt+0x32d8>
   14234:	ldr	lr, [ip, #16]
   14238:	cmp	lr, #0
   1423c:	str	lr, [sp, #24]
   14240:	beq	142bc <__assert_fail@plt+0x32e0>
   14244:	ldr	lr, [ip, #20]
   14248:	cmp	lr, #0
   1424c:	str	lr, [sp, #28]
   14250:	beq	142c4 <__assert_fail@plt+0x32e8>
   14254:	ldr	lr, [ip, #24]
   14258:	cmp	lr, #0
   1425c:	str	lr, [sp, #32]
   14260:	beq	142cc <__assert_fail@plt+0x32f0>
   14264:	ldr	lr, [ip, #28]
   14268:	cmp	lr, #0
   1426c:	str	lr, [sp, #36]	; 0x24
   14270:	beq	142d4 <__assert_fail@plt+0x32f8>
   14274:	ldr	lr, [ip, #32]
   14278:	cmp	lr, #0
   1427c:	str	lr, [sp, #40]	; 0x28
   14280:	beq	142dc <__assert_fail@plt+0x3300>
   14284:	ldr	lr, [ip, #36]	; 0x24
   14288:	mov	ip, #10
   1428c:	cmp	lr, #0
   14290:	str	lr, [sp, #44]	; 0x2c
   14294:	movweq	ip, #9
   14298:	b	142e0 <__assert_fail@plt+0x3304>
   1429c:	mov	ip, #0
   142a0:	b	142e0 <__assert_fail@plt+0x3304>
   142a4:	mov	ip, #1
   142a8:	b	142e0 <__assert_fail@plt+0x3304>
   142ac:	mov	ip, #2
   142b0:	b	142e0 <__assert_fail@plt+0x3304>
   142b4:	mov	ip, #3
   142b8:	b	142e0 <__assert_fail@plt+0x3304>
   142bc:	mov	ip, #4
   142c0:	b	142e0 <__assert_fail@plt+0x3304>
   142c4:	mov	ip, #5
   142c8:	b	142e0 <__assert_fail@plt+0x3304>
   142cc:	mov	ip, #6
   142d0:	b	142e0 <__assert_fail@plt+0x3304>
   142d4:	mov	ip, #7
   142d8:	b	142e0 <__assert_fail@plt+0x3304>
   142dc:	mov	ip, #8
   142e0:	add	lr, sp, #8
   142e4:	str	ip, [sp, #4]
   142e8:	str	lr, [sp]
   142ec:	bl	13e74 <__assert_fail@plt+0x2e98>
   142f0:	mov	sp, fp
   142f4:	pop	{fp, pc}
   142f8:	push	{fp, lr}
   142fc:	mov	fp, sp
   14300:	sub	sp, sp, #56	; 0x38
   14304:	add	ip, fp, #8
   14308:	str	ip, [sp, #12]
   1430c:	ldr	lr, [fp, #8]
   14310:	cmp	lr, #0
   14314:	str	lr, [sp, #16]
   14318:	beq	143b4 <__assert_fail@plt+0x33d8>
   1431c:	ldr	lr, [ip, #4]
   14320:	cmp	lr, #0
   14324:	str	lr, [sp, #20]
   14328:	beq	143bc <__assert_fail@plt+0x33e0>
   1432c:	ldr	lr, [ip, #8]
   14330:	cmp	lr, #0
   14334:	str	lr, [sp, #24]
   14338:	beq	143c4 <__assert_fail@plt+0x33e8>
   1433c:	ldr	lr, [ip, #12]
   14340:	cmp	lr, #0
   14344:	str	lr, [sp, #28]
   14348:	beq	143cc <__assert_fail@plt+0x33f0>
   1434c:	ldr	lr, [ip, #16]
   14350:	cmp	lr, #0
   14354:	str	lr, [sp, #32]
   14358:	beq	143d4 <__assert_fail@plt+0x33f8>
   1435c:	ldr	lr, [ip, #20]
   14360:	cmp	lr, #0
   14364:	str	lr, [sp, #36]	; 0x24
   14368:	beq	143dc <__assert_fail@plt+0x3400>
   1436c:	ldr	lr, [ip, #24]
   14370:	cmp	lr, #0
   14374:	str	lr, [sp, #40]	; 0x28
   14378:	beq	143e4 <__assert_fail@plt+0x3408>
   1437c:	ldr	lr, [ip, #28]
   14380:	cmp	lr, #0
   14384:	str	lr, [sp, #44]	; 0x2c
   14388:	beq	143ec <__assert_fail@plt+0x3410>
   1438c:	ldr	lr, [ip, #32]
   14390:	cmp	lr, #0
   14394:	str	lr, [sp, #48]	; 0x30
   14398:	beq	143f4 <__assert_fail@plt+0x3418>
   1439c:	ldr	lr, [ip, #36]	; 0x24
   143a0:	mov	ip, #10
   143a4:	cmp	lr, #0
   143a8:	str	lr, [sp, #52]	; 0x34
   143ac:	movweq	ip, #9
   143b0:	b	143f8 <__assert_fail@plt+0x341c>
   143b4:	mov	ip, #0
   143b8:	b	143f8 <__assert_fail@plt+0x341c>
   143bc:	mov	ip, #1
   143c0:	b	143f8 <__assert_fail@plt+0x341c>
   143c4:	mov	ip, #2
   143c8:	b	143f8 <__assert_fail@plt+0x341c>
   143cc:	mov	ip, #3
   143d0:	b	143f8 <__assert_fail@plt+0x341c>
   143d4:	mov	ip, #4
   143d8:	b	143f8 <__assert_fail@plt+0x341c>
   143dc:	mov	ip, #5
   143e0:	b	143f8 <__assert_fail@plt+0x341c>
   143e4:	mov	ip, #6
   143e8:	b	143f8 <__assert_fail@plt+0x341c>
   143ec:	mov	ip, #7
   143f0:	b	143f8 <__assert_fail@plt+0x341c>
   143f4:	mov	ip, #8
   143f8:	add	lr, sp, #16
   143fc:	str	ip, [sp, #4]
   14400:	str	lr, [sp]
   14404:	bl	13e74 <__assert_fail@plt+0x2e98>
   14408:	mov	sp, fp
   1440c:	pop	{fp, pc}
   14410:	push	{fp, lr}
   14414:	mov	fp, sp
   14418:	movw	r0, #33084	; 0x813c
   1441c:	movt	r0, #2
   14420:	ldr	r1, [r0]
   14424:	movw	r0, #29707	; 0x740b
   14428:	movt	r0, #1
   1442c:	bl	10d9c <fputs_unlocked@plt>
   14430:	movw	r1, #30971	; 0x78fb
   14434:	mov	r0, #0
   14438:	mov	r2, #5
   1443c:	movt	r1, #1
   14440:	bl	10e14 <dcgettext@plt>
   14444:	movw	r2, #30991	; 0x790f
   14448:	mov	r1, r0
   1444c:	mov	r0, #1
   14450:	movt	r2, #1
   14454:	bl	10f34 <__printf_chk@plt>
   14458:	movw	r1, #31013	; 0x7925
   1445c:	mov	r0, #0
   14460:	mov	r2, #5
   14464:	movt	r1, #1
   14468:	bl	10e14 <dcgettext@plt>
   1446c:	movw	r2, #28840	; 0x70a8
   14470:	movw	r3, #29516	; 0x734c
   14474:	mov	r1, r0
   14478:	mov	r0, #1
   1447c:	movt	r2, #1
   14480:	movt	r3, #1
   14484:	bl	10f34 <__printf_chk@plt>
   14488:	movw	r1, #31033	; 0x7939
   1448c:	mov	r0, #0
   14490:	mov	r2, #5
   14494:	movt	r1, #1
   14498:	bl	10e14 <dcgettext@plt>
   1449c:	movw	r2, #31072	; 0x7960
   144a0:	mov	r1, r0
   144a4:	mov	r0, #1
   144a8:	movt	r2, #1
   144ac:	pop	{fp, lr}
   144b0:	b	10f34 <__printf_chk@plt>
   144b4:	push	{r4, r5, r6, sl, fp, lr}
   144b8:	add	fp, sp, #16
   144bc:	mov	r4, r2
   144c0:	mov	r5, r1
   144c4:	mov	r6, r0
   144c8:	bl	168b0 <__assert_fail@plt+0x58d4>
   144cc:	cmp	r0, #0
   144d0:	popne	{r4, r5, r6, sl, fp, pc}
   144d4:	cmp	r6, #0
   144d8:	beq	144ec <__assert_fail@plt+0x3510>
   144dc:	cmp	r5, #0
   144e0:	cmpne	r4, #0
   144e4:	bne	144ec <__assert_fail@plt+0x3510>
   144e8:	pop	{r4, r5, r6, sl, fp, pc}
   144ec:	bl	14a8c <__assert_fail@plt+0x3ab0>
   144f0:	push	{r4, r5, r6, sl, fp, lr}
   144f4:	add	fp, sp, #16
   144f8:	mov	r4, r2
   144fc:	mov	r5, r1
   14500:	mov	r6, r0
   14504:	bl	168b0 <__assert_fail@plt+0x58d4>
   14508:	cmp	r0, #0
   1450c:	popne	{r4, r5, r6, sl, fp, pc}
   14510:	cmp	r6, #0
   14514:	beq	14528 <__assert_fail@plt+0x354c>
   14518:	cmp	r5, #0
   1451c:	cmpne	r4, #0
   14520:	bne	14528 <__assert_fail@plt+0x354c>
   14524:	pop	{r4, r5, r6, sl, fp, pc}
   14528:	bl	14a8c <__assert_fail@plt+0x3ab0>
   1452c:	push	{fp, lr}
   14530:	mov	fp, sp
   14534:	bl	1654c <__assert_fail@plt+0x5570>
   14538:	cmp	r0, #0
   1453c:	popne	{fp, pc}
   14540:	bl	14a8c <__assert_fail@plt+0x3ab0>
   14544:	push	{fp, lr}
   14548:	mov	fp, sp
   1454c:	bl	1654c <__assert_fail@plt+0x5570>
   14550:	cmp	r0, #0
   14554:	popne	{fp, pc}
   14558:	bl	14a8c <__assert_fail@plt+0x3ab0>
   1455c:	push	{fp, lr}
   14560:	mov	fp, sp
   14564:	bl	1654c <__assert_fail@plt+0x5570>
   14568:	cmp	r0, #0
   1456c:	popne	{fp, pc}
   14570:	bl	14a8c <__assert_fail@plt+0x3ab0>
   14574:	push	{r4, r5, fp, lr}
   14578:	add	fp, sp, #8
   1457c:	mov	r4, r1
   14580:	mov	r5, r0
   14584:	bl	1657c <__assert_fail@plt+0x55a0>
   14588:	cmp	r0, #0
   1458c:	popne	{r4, r5, fp, pc}
   14590:	cmp	r5, #0
   14594:	beq	145a4 <__assert_fail@plt+0x35c8>
   14598:	cmp	r4, #0
   1459c:	bne	145a4 <__assert_fail@plt+0x35c8>
   145a0:	pop	{r4, r5, fp, pc}
   145a4:	bl	14a8c <__assert_fail@plt+0x3ab0>
   145a8:	push	{fp, lr}
   145ac:	mov	fp, sp
   145b0:	cmp	r1, #0
   145b4:	orreq	r1, r1, #1
   145b8:	bl	1657c <__assert_fail@plt+0x55a0>
   145bc:	cmp	r0, #0
   145c0:	popne	{fp, pc}
   145c4:	bl	14a8c <__assert_fail@plt+0x3ab0>
   145c8:	push	{fp, lr}
   145cc:	mov	fp, sp
   145d0:	clz	r3, r2
   145d4:	lsr	ip, r3, #5
   145d8:	clz	r3, r1
   145dc:	lsr	r3, r3, #5
   145e0:	orrs	r3, r3, ip
   145e4:	movwne	r1, #1
   145e8:	movwne	r2, #1
   145ec:	bl	168b0 <__assert_fail@plt+0x58d4>
   145f0:	cmp	r0, #0
   145f4:	popne	{fp, pc}
   145f8:	bl	14a8c <__assert_fail@plt+0x3ab0>
   145fc:	push	{fp, lr}
   14600:	mov	fp, sp
   14604:	mov	r2, r1
   14608:	mov	r1, r0
   1460c:	mov	r0, #0
   14610:	bl	168b0 <__assert_fail@plt+0x58d4>
   14614:	cmp	r0, #0
   14618:	popne	{fp, pc}
   1461c:	bl	14a8c <__assert_fail@plt+0x3ab0>
   14620:	push	{fp, lr}
   14624:	mov	fp, sp
   14628:	mov	r2, r1
   1462c:	mov	r1, r0
   14630:	clz	r0, r2
   14634:	clz	r3, r1
   14638:	lsr	r0, r0, #5
   1463c:	lsr	r3, r3, #5
   14640:	orrs	r0, r3, r0
   14644:	movwne	r1, #1
   14648:	movwne	r2, #1
   1464c:	mov	r0, #0
   14650:	bl	168b0 <__assert_fail@plt+0x58d4>
   14654:	cmp	r0, #0
   14658:	popne	{fp, pc}
   1465c:	bl	14a8c <__assert_fail@plt+0x3ab0>
   14660:	push	{r4, r5, r6, sl, fp, lr}
   14664:	add	fp, sp, #16
   14668:	ldr	r5, [r1]
   1466c:	mov	r4, r1
   14670:	mov	r6, r0
   14674:	cmp	r0, #0
   14678:	beq	14690 <__assert_fail@plt+0x36b4>
   1467c:	mov	r0, #1
   14680:	add	r0, r0, r5, lsr #1
   14684:	adds	r5, r5, r0
   14688:	bcc	14698 <__assert_fail@plt+0x36bc>
   1468c:	b	146d4 <__assert_fail@plt+0x36f8>
   14690:	cmp	r5, #0
   14694:	movweq	r5, #64	; 0x40
   14698:	mov	r0, r6
   1469c:	mov	r1, r5
   146a0:	mov	r2, #1
   146a4:	bl	168b0 <__assert_fail@plt+0x58d4>
   146a8:	cmp	r5, #0
   146ac:	mov	r1, r5
   146b0:	movwne	r1, #1
   146b4:	cmp	r0, #0
   146b8:	bne	146cc <__assert_fail@plt+0x36f0>
   146bc:	clz	r2, r6
   146c0:	lsr	r2, r2, #5
   146c4:	orrs	r1, r2, r1
   146c8:	bne	146d4 <__assert_fail@plt+0x36f8>
   146cc:	str	r5, [r4]
   146d0:	pop	{r4, r5, r6, sl, fp, pc}
   146d4:	bl	14a8c <__assert_fail@plt+0x3ab0>
   146d8:	push	{r4, r5, r6, r7, fp, lr}
   146dc:	add	fp, sp, #16
   146e0:	ldr	r5, [r1]
   146e4:	mov	r6, r2
   146e8:	mov	r4, r1
   146ec:	mov	r7, r0
   146f0:	cmp	r0, #0
   146f4:	beq	1470c <__assert_fail@plt+0x3730>
   146f8:	mov	r0, #1
   146fc:	add	r0, r0, r5, lsr #1
   14700:	adds	r5, r5, r0
   14704:	bcc	14724 <__assert_fail@plt+0x3748>
   14708:	b	14758 <__assert_fail@plt+0x377c>
   1470c:	cmp	r5, #0
   14710:	bne	14724 <__assert_fail@plt+0x3748>
   14714:	mov	r0, #64	; 0x40
   14718:	cmp	r6, #64	; 0x40
   1471c:	udiv	r5, r0, r6
   14720:	addhi	r5, r5, #1
   14724:	mov	r0, r7
   14728:	mov	r1, r5
   1472c:	mov	r2, r6
   14730:	bl	168b0 <__assert_fail@plt+0x58d4>
   14734:	cmp	r0, #0
   14738:	bne	14750 <__assert_fail@plt+0x3774>
   1473c:	cmp	r7, #0
   14740:	beq	14758 <__assert_fail@plt+0x377c>
   14744:	cmp	r6, #0
   14748:	cmpne	r5, #0
   1474c:	bne	14758 <__assert_fail@plt+0x377c>
   14750:	str	r5, [r4]
   14754:	pop	{r4, r5, r6, r7, fp, pc}
   14758:	bl	14a8c <__assert_fail@plt+0x3ab0>
   1475c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14760:	add	fp, sp, #24
   14764:	mov	r8, r1
   14768:	ldr	r1, [r1]
   1476c:	mov	r5, r0
   14770:	add	r0, r1, r1, asr #1
   14774:	cmp	r0, r1
   14778:	mvnvs	r0, #-2147483648	; 0x80000000
   1477c:	cmp	r0, r3
   14780:	mov	r7, r0
   14784:	movgt	r7, r3
   14788:	cmn	r3, #1
   1478c:	movle	r7, r0
   14790:	ldr	r0, [fp, #8]
   14794:	cmn	r0, #1
   14798:	ble	147c0 <__assert_fail@plt+0x37e4>
   1479c:	cmp	r0, #0
   147a0:	beq	14814 <__assert_fail@plt+0x3838>
   147a4:	cmn	r7, #1
   147a8:	ble	147e8 <__assert_fail@plt+0x380c>
   147ac:	mvn	r4, #-2147483648	; 0x80000000
   147b0:	udiv	r6, r4, r0
   147b4:	cmp	r6, r7
   147b8:	bge	14814 <__assert_fail@plt+0x3838>
   147bc:	b	14824 <__assert_fail@plt+0x3848>
   147c0:	cmn	r7, #1
   147c4:	ble	14804 <__assert_fail@plt+0x3828>
   147c8:	cmn	r0, #1
   147cc:	beq	14814 <__assert_fail@plt+0x3838>
   147d0:	mov	r6, #-2147483648	; 0x80000000
   147d4:	mvn	r4, #-2147483648	; 0x80000000
   147d8:	sdiv	r6, r6, r0
   147dc:	cmp	r6, r7
   147e0:	bge	14814 <__assert_fail@plt+0x3838>
   147e4:	b	14824 <__assert_fail@plt+0x3848>
   147e8:	beq	14814 <__assert_fail@plt+0x3838>
   147ec:	mov	r6, #-2147483648	; 0x80000000
   147f0:	mvn	r4, #-2147483648	; 0x80000000
   147f4:	sdiv	r6, r6, r7
   147f8:	cmp	r6, r0
   147fc:	bge	14814 <__assert_fail@plt+0x3838>
   14800:	b	14824 <__assert_fail@plt+0x3848>
   14804:	mvn	r4, #-2147483648	; 0x80000000
   14808:	sdiv	r6, r4, r0
   1480c:	cmp	r7, r6
   14810:	blt	14824 <__assert_fail@plt+0x3848>
   14814:	mul	r6, r7, r0
   14818:	mov	r4, #64	; 0x40
   1481c:	cmp	r6, #63	; 0x3f
   14820:	bgt	1482c <__assert_fail@plt+0x3850>
   14824:	sdiv	r7, r4, r0
   14828:	mul	r6, r7, r0
   1482c:	cmp	r5, #0
   14830:	moveq	r4, #0
   14834:	streq	r4, [r8]
   14838:	sub	r4, r7, r1
   1483c:	cmp	r4, r2
   14840:	bge	148ec <__assert_fail@plt+0x3910>
   14844:	add	r7, r1, r2
   14848:	mov	r6, #0
   1484c:	mov	r2, #0
   14850:	cmp	r7, r3
   14854:	movwgt	r6, #1
   14858:	cmn	r3, #1
   1485c:	movwgt	r2, #1
   14860:	cmp	r7, r1
   14864:	bvs	14920 <__assert_fail@plt+0x3944>
   14868:	ands	r1, r2, r6
   1486c:	bne	14920 <__assert_fail@plt+0x3944>
   14870:	cmn	r0, #1
   14874:	ble	1489c <__assert_fail@plt+0x38c0>
   14878:	cmp	r0, #0
   1487c:	beq	148e8 <__assert_fail@plt+0x390c>
   14880:	cmn	r7, #1
   14884:	ble	148c0 <__assert_fail@plt+0x38e4>
   14888:	mvn	r1, #-2147483648	; 0x80000000
   1488c:	udiv	r1, r1, r0
   14890:	cmp	r1, r7
   14894:	bge	148e8 <__assert_fail@plt+0x390c>
   14898:	b	14920 <__assert_fail@plt+0x3944>
   1489c:	cmn	r7, #1
   148a0:	ble	148d8 <__assert_fail@plt+0x38fc>
   148a4:	cmn	r0, #1
   148a8:	beq	148e8 <__assert_fail@plt+0x390c>
   148ac:	mov	r1, #-2147483648	; 0x80000000
   148b0:	sdiv	r1, r1, r0
   148b4:	cmp	r1, r7
   148b8:	bge	148e8 <__assert_fail@plt+0x390c>
   148bc:	b	14920 <__assert_fail@plt+0x3944>
   148c0:	beq	148e8 <__assert_fail@plt+0x390c>
   148c4:	mov	r1, #-2147483648	; 0x80000000
   148c8:	sdiv	r1, r1, r7
   148cc:	cmp	r1, r0
   148d0:	bge	148e8 <__assert_fail@plt+0x390c>
   148d4:	b	14920 <__assert_fail@plt+0x3944>
   148d8:	mvn	r1, #-2147483648	; 0x80000000
   148dc:	sdiv	r1, r1, r0
   148e0:	cmp	r7, r1
   148e4:	blt	14920 <__assert_fail@plt+0x3944>
   148e8:	mul	r6, r7, r0
   148ec:	mov	r0, r5
   148f0:	mov	r1, r6
   148f4:	bl	1657c <__assert_fail@plt+0x55a0>
   148f8:	cmp	r6, #0
   148fc:	movwne	r6, #1
   14900:	cmp	r0, #0
   14904:	bne	14918 <__assert_fail@plt+0x393c>
   14908:	clz	r1, r5
   1490c:	lsr	r1, r1, #5
   14910:	orrs	r1, r1, r6
   14914:	bne	14920 <__assert_fail@plt+0x3944>
   14918:	str	r7, [r8]
   1491c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14920:	bl	14a8c <__assert_fail@plt+0x3ab0>
   14924:	push	{fp, lr}
   14928:	mov	fp, sp
   1492c:	mov	r1, #1
   14930:	bl	164f8 <__assert_fail@plt+0x551c>
   14934:	cmp	r0, #0
   14938:	popne	{fp, pc}
   1493c:	bl	14a8c <__assert_fail@plt+0x3ab0>
   14940:	push	{fp, lr}
   14944:	mov	fp, sp
   14948:	bl	164f8 <__assert_fail@plt+0x551c>
   1494c:	cmp	r0, #0
   14950:	popne	{fp, pc}
   14954:	bl	14a8c <__assert_fail@plt+0x3ab0>
   14958:	push	{fp, lr}
   1495c:	mov	fp, sp
   14960:	mov	r1, #1
   14964:	bl	164f8 <__assert_fail@plt+0x551c>
   14968:	cmp	r0, #0
   1496c:	popne	{fp, pc}
   14970:	bl	14a8c <__assert_fail@plt+0x3ab0>
   14974:	push	{fp, lr}
   14978:	mov	fp, sp
   1497c:	bl	164f8 <__assert_fail@plt+0x551c>
   14980:	cmp	r0, #0
   14984:	popne	{fp, pc}
   14988:	bl	14a8c <__assert_fail@plt+0x3ab0>
   1498c:	push	{r4, r5, r6, sl, fp, lr}
   14990:	add	fp, sp, #16
   14994:	mov	r5, r0
   14998:	mov	r0, r1
   1499c:	mov	r4, r1
   149a0:	bl	1654c <__assert_fail@plt+0x5570>
   149a4:	cmp	r0, #0
   149a8:	beq	149c4 <__assert_fail@plt+0x39e8>
   149ac:	mov	r1, r5
   149b0:	mov	r2, r4
   149b4:	mov	r6, r0
   149b8:	bl	10de4 <memcpy@plt>
   149bc:	mov	r0, r6
   149c0:	pop	{r4, r5, r6, sl, fp, pc}
   149c4:	bl	14a8c <__assert_fail@plt+0x3ab0>
   149c8:	push	{r4, r5, r6, sl, fp, lr}
   149cc:	add	fp, sp, #16
   149d0:	mov	r5, r0
   149d4:	mov	r0, r1
   149d8:	mov	r4, r1
   149dc:	bl	1654c <__assert_fail@plt+0x5570>
   149e0:	cmp	r0, #0
   149e4:	beq	14a00 <__assert_fail@plt+0x3a24>
   149e8:	mov	r1, r5
   149ec:	mov	r2, r4
   149f0:	mov	r6, r0
   149f4:	bl	10de4 <memcpy@plt>
   149f8:	mov	r0, r6
   149fc:	pop	{r4, r5, r6, sl, fp, pc}
   14a00:	bl	14a8c <__assert_fail@plt+0x3ab0>
   14a04:	push	{r4, r5, r6, sl, fp, lr}
   14a08:	add	fp, sp, #16
   14a0c:	mov	r5, r0
   14a10:	add	r0, r1, #1
   14a14:	mov	r4, r1
   14a18:	bl	1654c <__assert_fail@plt+0x5570>
   14a1c:	cmp	r0, #0
   14a20:	beq	14a48 <__assert_fail@plt+0x3a6c>
   14a24:	mov	r6, r0
   14a28:	mov	r0, #0
   14a2c:	mov	r1, r5
   14a30:	mov	r2, r4
   14a34:	strb	r0, [r6, r4]
   14a38:	mov	r0, r6
   14a3c:	bl	10de4 <memcpy@plt>
   14a40:	mov	r0, r6
   14a44:	pop	{r4, r5, r6, sl, fp, pc}
   14a48:	bl	14a8c <__assert_fail@plt+0x3ab0>
   14a4c:	push	{r4, r5, r6, sl, fp, lr}
   14a50:	add	fp, sp, #16
   14a54:	mov	r4, r0
   14a58:	bl	10ef8 <strlen@plt>
   14a5c:	add	r5, r0, #1
   14a60:	mov	r0, r5
   14a64:	bl	1654c <__assert_fail@plt+0x5570>
   14a68:	cmp	r0, #0
   14a6c:	beq	14a88 <__assert_fail@plt+0x3aac>
   14a70:	mov	r1, r4
   14a74:	mov	r2, r5
   14a78:	mov	r6, r0
   14a7c:	bl	10de4 <memcpy@plt>
   14a80:	mov	r0, r6
   14a84:	pop	{r4, r5, r6, sl, fp, pc}
   14a88:	bl	14a8c <__assert_fail@plt+0x3ab0>
   14a8c:	push	{fp, lr}
   14a90:	mov	fp, sp
   14a94:	movw	r0, #32996	; 0x80e4
   14a98:	movw	r1, #31148	; 0x79ac
   14a9c:	mov	r2, #5
   14aa0:	movt	r0, #2
   14aa4:	movt	r1, #1
   14aa8:	ldr	r4, [r0]
   14aac:	mov	r0, #0
   14ab0:	bl	10e14 <dcgettext@plt>
   14ab4:	movw	r2, #30111	; 0x759f
   14ab8:	mov	r3, r0
   14abc:	mov	r0, r4
   14ac0:	mov	r1, #0
   14ac4:	movt	r2, #1
   14ac8:	bl	10e8c <error@plt>
   14acc:	bl	10fc4 <abort@plt>
   14ad0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ad4:	add	fp, sp, #24
   14ad8:	sub	sp, sp, #16
   14adc:	mov	r8, r0
   14ae0:	ldr	r0, [fp, #16]
   14ae4:	mov	r7, r3
   14ae8:	mov	r4, r2
   14aec:	mov	r2, r1
   14af0:	add	r3, sp, #8
   14af4:	mov	r1, #0
   14af8:	str	r0, [sp]
   14afc:	mov	r0, r8
   14b00:	bl	14be0 <__assert_fail@plt+0x3c04>
   14b04:	cmp	r0, #0
   14b08:	bne	14bb4 <__assert_fail@plt+0x3bd8>
   14b0c:	ldr	r6, [sp, #8]
   14b10:	ldr	r5, [sp, #12]
   14b14:	subs	r0, r6, r4
   14b18:	sbcs	r0, r5, r7
   14b1c:	blt	14b40 <__assert_fail@plt+0x3b64>
   14b20:	ldr	r1, [fp, #8]
   14b24:	ldr	r0, [fp, #12]
   14b28:	subs	r1, r1, r6
   14b2c:	sbcs	r0, r0, r5
   14b30:	movge	r0, r6
   14b34:	movge	r1, r5
   14b38:	subge	sp, fp, #24
   14b3c:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b40:	subs	r0, r6, #1073741824	; 0x40000000
   14b44:	sbcs	r0, r5, #0
   14b48:	blt	14b58 <__assert_fail@plt+0x3b7c>
   14b4c:	bl	10f10 <__errno_location@plt>
   14b50:	mov	r1, #75	; 0x4b
   14b54:	b	14b74 <__assert_fail@plt+0x3b98>
   14b58:	bl	10f10 <__errno_location@plt>
   14b5c:	mvn	r2, #1073741824	; 0x40000000
   14b60:	mvn	r1, #0
   14b64:	subs	r2, r2, r6
   14b68:	sbcs	r1, r1, r5
   14b6c:	movlt	r1, #34	; 0x22
   14b70:	movge	r1, #75	; 0x4b
   14b74:	str	r1, [r0]
   14b78:	ldr	r6, [r0]
   14b7c:	ldr	r4, [fp, #24]
   14b80:	ldr	r5, [fp, #20]
   14b84:	mov	r0, r8
   14b88:	bl	13d3c <__assert_fail@plt+0x2d60>
   14b8c:	subs	r1, r6, #22
   14b90:	movw	r2, #30107	; 0x759b
   14b94:	str	r0, [sp]
   14b98:	mov	r3, r5
   14b9c:	movne	r1, r6
   14ba0:	cmp	r4, #0
   14ba4:	movt	r2, #1
   14ba8:	movweq	r4, #1
   14bac:	mov	r0, r4
   14bb0:	bl	10e8c <error@plt>
   14bb4:	cmp	r0, #1
   14bb8:	beq	14b4c <__assert_fail@plt+0x3b70>
   14bbc:	cmp	r0, #3
   14bc0:	bne	14bd0 <__assert_fail@plt+0x3bf4>
   14bc4:	bl	10f10 <__errno_location@plt>
   14bc8:	mov	r1, #0
   14bcc:	b	14b74 <__assert_fail@plt+0x3b98>
   14bd0:	bl	10f10 <__errno_location@plt>
   14bd4:	b	14b78 <__assert_fail@plt+0x3b9c>
   14bd8:	mov	r1, #10
   14bdc:	b	14ad0 <__assert_fail@plt+0x3af4>
   14be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14be4:	add	fp, sp, #28
   14be8:	sub	sp, sp, #36	; 0x24
   14bec:	cmp	r2, #37	; 0x25
   14bf0:	bcs	164d8 <__assert_fail@plt+0x54fc>
   14bf4:	ldr	r8, [fp, #8]
   14bf8:	mov	r9, r3
   14bfc:	mov	r6, r2
   14c00:	mov	r7, r1
   14c04:	mov	r4, r0
   14c08:	bl	10f10 <__errno_location@plt>
   14c0c:	add	sl, sp, #32
   14c10:	cmp	r7, #0
   14c14:	mov	r5, r0
   14c18:	mov	r0, #0
   14c1c:	mov	r2, r6
   14c20:	mov	r3, #0
   14c24:	movne	sl, r7
   14c28:	str	r0, [r5]
   14c2c:	mov	r0, r4
   14c30:	mov	r1, sl
   14c34:	bl	10f94 <__strtoll_internal@plt>
   14c38:	mov	r7, r1
   14c3c:	ldr	r1, [sl]
   14c40:	cmp	r1, r4
   14c44:	beq	14c74 <__assert_fail@plt+0x3c98>
   14c48:	mov	r6, r0
   14c4c:	ldr	r0, [r5]
   14c50:	cmp	r0, #0
   14c54:	beq	14cb4 <__assert_fail@plt+0x3cd8>
   14c58:	mov	r5, #4
   14c5c:	cmp	r0, #34	; 0x22
   14c60:	bne	160e8 <__assert_fail@plt+0x510c>
   14c64:	mov	r5, #1
   14c68:	cmp	r8, #0
   14c6c:	bne	14cc0 <__assert_fail@plt+0x3ce4>
   14c70:	b	160e4 <__assert_fail@plt+0x5108>
   14c74:	mov	r5, #4
   14c78:	cmp	r8, #0
   14c7c:	beq	160e8 <__assert_fail@plt+0x510c>
   14c80:	mov	r6, r1
   14c84:	ldrb	r1, [r4]
   14c88:	cmp	r1, #0
   14c8c:	beq	160e8 <__assert_fail@plt+0x510c>
   14c90:	mov	r0, r8
   14c94:	bl	10f04 <strchr@plt>
   14c98:	cmp	r0, #0
   14c9c:	beq	160e8 <__assert_fail@plt+0x510c>
   14ca0:	mov	r1, r6
   14ca4:	mov	r5, #0
   14ca8:	mov	r6, #1
   14cac:	mov	r7, #0
   14cb0:	b	14cc0 <__assert_fail@plt+0x3ce4>
   14cb4:	mov	r5, r0
   14cb8:	cmp	r8, #0
   14cbc:	beq	160e4 <__assert_fail@plt+0x5108>
   14cc0:	ldrb	r4, [r1]
   14cc4:	cmp	r4, #0
   14cc8:	beq	160e4 <__assert_fail@plt+0x5108>
   14ccc:	str	r1, [sp, #20]
   14cd0:	mov	r0, r8
   14cd4:	mov	r1, r4
   14cd8:	bl	10f04 <strchr@plt>
   14cdc:	cmp	r0, #0
   14ce0:	beq	14f6c <__assert_fail@plt+0x3f90>
   14ce4:	sub	r0, r4, #69	; 0x45
   14ce8:	mov	r1, #1
   14cec:	mov	r3, #0
   14cf0:	mov	r2, #1024	; 0x400
   14cf4:	cmp	r0, #47	; 0x2f
   14cf8:	str	r1, [sp, #16]
   14cfc:	bhi	14e38 <__assert_fail@plt+0x3e5c>
   14d00:	add	r1, pc, #0
   14d04:	ldr	pc, [r1, r0, lsl #2]
   14d08:	andeq	r4, r1, r8, asr #27
   14d0c:	andeq	r4, r1, r8, lsr lr
   14d10:	andeq	r4, r1, r8, asr #27
   14d14:	andeq	r4, r1, r8, lsr lr
   14d18:	andeq	r4, r1, r8, lsr lr
   14d1c:	andeq	r4, r1, r8, lsr lr
   14d20:	andeq	r4, r1, r8, asr #27
   14d24:	andeq	r4, r1, r8, lsr lr
   14d28:	andeq	r4, r1, r8, asr #27
   14d2c:	andeq	r4, r1, r8, lsr lr
   14d30:	andeq	r4, r1, r8, lsr lr
   14d34:	andeq	r4, r1, r8, asr #27
   14d38:	andeq	r4, r1, r8, lsr lr
   14d3c:	andeq	r4, r1, r8, lsr lr
   14d40:	andeq	r4, r1, r8, lsr lr
   14d44:	andeq	r4, r1, r8, asr #27
   14d48:	andeq	r4, r1, r8, lsr lr
   14d4c:	andeq	r4, r1, r8, lsr lr
   14d50:	andeq	r4, r1, r8, lsr lr
   14d54:	andeq	r4, r1, r8, lsr lr
   14d58:	andeq	r4, r1, r8, asr #27
   14d5c:	andeq	r4, r1, r8, asr #27
   14d60:	andeq	r4, r1, r8, lsr lr
   14d64:	andeq	r4, r1, r8, lsr lr
   14d68:	andeq	r4, r1, r8, lsr lr
   14d6c:	andeq	r4, r1, r8, lsr lr
   14d70:	andeq	r4, r1, r8, lsr lr
   14d74:	andeq	r4, r1, r8, lsr lr
   14d78:	andeq	r4, r1, r8, lsr lr
   14d7c:	andeq	r4, r1, r8, lsr lr
   14d80:	andeq	r4, r1, r8, lsr lr
   14d84:	andeq	r4, r1, r8, lsr lr
   14d88:	andeq	r4, r1, r8, lsr lr
   14d8c:	andeq	r4, r1, r8, lsr lr
   14d90:	andeq	r4, r1, r8, asr #27
   14d94:	andeq	r4, r1, r8, lsr lr
   14d98:	andeq	r4, r1, r8, lsr lr
   14d9c:	andeq	r4, r1, r8, lsr lr
   14da0:	andeq	r4, r1, r8, asr #27
   14da4:	andeq	r4, r1, r8, lsr lr
   14da8:	andeq	r4, r1, r8, asr #27
   14dac:	andeq	r4, r1, r8, lsr lr
   14db0:	andeq	r4, r1, r8, lsr lr
   14db4:	andeq	r4, r1, r8, lsr lr
   14db8:	andeq	r4, r1, r8, lsr lr
   14dbc:	andeq	r4, r1, r8, lsr lr
   14dc0:	andeq	r4, r1, r8, lsr lr
   14dc4:	andeq	r4, r1, r8, asr #27
   14dc8:	mov	r0, r8
   14dcc:	mov	r1, #48	; 0x30
   14dd0:	bl	10f04 <strchr@plt>
   14dd4:	cmp	r0, #0
   14dd8:	beq	14e04 <__assert_fail@plt+0x3e28>
   14ddc:	ldr	r1, [sp, #20]
   14de0:	ldrb	r0, [r1, #1]
   14de4:	cmp	r0, #66	; 0x42
   14de8:	cmpne	r0, #68	; 0x44
   14dec:	bne	14e0c <__assert_fail@plt+0x3e30>
   14df0:	mov	r0, #2
   14df4:	mov	r2, #1000	; 0x3e8
   14df8:	mov	r3, #0
   14dfc:	str	r0, [sp, #16]
   14e00:	b	14e38 <__assert_fail@plt+0x3e5c>
   14e04:	mov	r3, #0
   14e08:	b	14e34 <__assert_fail@plt+0x3e58>
   14e0c:	cmp	r0, #105	; 0x69
   14e10:	mov	r3, #0
   14e14:	bne	14e34 <__assert_fail@plt+0x3e58>
   14e18:	ldrb	r0, [r1, #2]
   14e1c:	mov	r1, #1
   14e20:	mov	r2, #1024	; 0x400
   14e24:	cmp	r0, #66	; 0x42
   14e28:	movweq	r1, #3
   14e2c:	str	r1, [sp, #16]
   14e30:	b	14e38 <__assert_fail@plt+0x3e5c>
   14e34:	mov	r2, #1024	; 0x400
   14e38:	sub	r0, r4, #66	; 0x42
   14e3c:	cmp	r0, #53	; 0x35
   14e40:	bhi	14f6c <__assert_fail@plt+0x3f90>
   14e44:	add	r1, pc, #8
   14e48:	str	r3, [sp, #28]
   14e4c:	str	r2, [sp, #24]
   14e50:	ldr	pc, [r1, r0, lsl #2]
   14e54:	andeq	r5, r1, ip, rrx
   14e58:	andeq	r4, r1, ip, ror #30
   14e5c:	andeq	r4, r1, ip, ror #30
   14e60:	andeq	r5, r1, r0, lsl #1
   14e64:	andeq	r4, r1, ip, ror #30
   14e68:	andeq	r4, r1, ip, lsr #30
   14e6c:	andeq	r4, r1, ip, ror #30
   14e70:	andeq	r4, r1, ip, ror #30
   14e74:	andeq	r4, r1, ip, ror #30
   14e78:	andeq	r4, r1, r4, ror pc
   14e7c:	andeq	r4, r1, ip, ror #30
   14e80:	andeq	r4, r1, r4, lsr #31
   14e84:	andeq	r4, r1, ip, ror #30
   14e88:	andeq	r4, r1, ip, ror #30
   14e8c:	andeq	r5, r1, r4, asr #1
   14e90:	andeq	r4, r1, ip, ror #30
   14e94:	andeq	r4, r1, ip, ror #30
   14e98:	andeq	r4, r1, ip, ror #30
   14e9c:	andeq	r4, r1, r4, ror #31
   14ea0:	andeq	r4, r1, ip, ror #30
   14ea4:	andeq	r4, r1, ip, ror #30
   14ea8:	andeq	r4, r1, ip, ror #30
   14eac:	andeq	r4, r1, ip, ror #30
   14eb0:	andeq	r5, r1, r8, lsl #2
   14eb4:	andeq	r5, r1, r8, lsr #32
   14eb8:	andeq	r4, r1, ip, ror #30
   14ebc:	andeq	r4, r1, ip, ror #30
   14ec0:	andeq	r4, r1, ip, ror #30
   14ec4:	andeq	r4, r1, ip, ror #30
   14ec8:	andeq	r4, r1, ip, ror #30
   14ecc:	andeq	r4, r1, ip, ror #30
   14ed0:	andeq	r4, r1, ip, ror #30
   14ed4:	andeq	r5, r1, ip, asr #2
   14ed8:	andeq	r6, r1, r4, asr #1
   14edc:	andeq	r4, r1, ip, ror #30
   14ee0:	andeq	r4, r1, ip, ror #30
   14ee4:	andeq	r4, r1, ip, ror #30
   14ee8:	andeq	r4, r1, ip, lsr #30
   14eec:	andeq	r4, r1, ip, ror #30
   14ef0:	andeq	r4, r1, ip, ror #30
   14ef4:	andeq	r4, r1, ip, ror #30
   14ef8:	andeq	r4, r1, r4, ror pc
   14efc:	andeq	r4, r1, ip, ror #30
   14f00:	andeq	r4, r1, r4, lsr #31
   14f04:	andeq	r4, r1, ip, ror #30
   14f08:	andeq	r4, r1, ip, ror #30
   14f0c:	andeq	r4, r1, ip, ror #30
   14f10:	andeq	r4, r1, ip, ror #30
   14f14:	andeq	r4, r1, ip, ror #30
   14f18:	andeq	r4, r1, ip, ror #30
   14f1c:	andeq	r4, r1, r4, ror #31
   14f20:	andeq	r4, r1, ip, ror #30
   14f24:	andeq	r4, r1, ip, ror #30
   14f28:	andeq	r5, r1, r0, ror #2
   14f2c:	cmn	r7, #1
   14f30:	str	r9, [sp, #12]
   14f34:	ble	15174 <__assert_fail@plt+0x4198>
   14f38:	ldr	r3, [sp, #28]
   14f3c:	mvn	r0, #0
   14f40:	mvn	r1, #-2147483648	; 0x80000000
   14f44:	mvn	r8, #0
   14f48:	mvn	r9, #-2147483648	; 0x80000000
   14f4c:	bl	16ac8 <__assert_fail@plt+0x5aec>
   14f50:	ldr	r2, [sp, #24]
   14f54:	ldr	r3, [sp, #28]
   14f58:	subs	r0, r0, r6
   14f5c:	mov	r4, #1
   14f60:	sbcs	r0, r1, r7
   14f64:	bge	151b4 <__assert_fail@plt+0x41d8>
   14f68:	b	151cc <__assert_fail@plt+0x41f0>
   14f6c:	orr	r5, r5, #2
   14f70:	b	160e4 <__assert_fail@plt+0x5108>
   14f74:	cmn	r7, #1
   14f78:	ble	15208 <__assert_fail@plt+0x422c>
   14f7c:	ldr	r3, [sp, #28]
   14f80:	mvn	r0, #0
   14f84:	mvn	r1, #-2147483648	; 0x80000000
   14f88:	bl	16ac8 <__assert_fail@plt+0x5aec>
   14f8c:	ldr	r2, [sp, #24]
   14f90:	ldr	r3, [sp, #28]
   14f94:	subs	r0, r0, r6
   14f98:	sbcs	r0, r1, r7
   14f9c:	bge	1523c <__assert_fail@plt+0x4260>
   14fa0:	b	1594c <__assert_fail@plt+0x4970>
   14fa4:	cmn	r7, #1
   14fa8:	str	r9, [sp, #12]
   14fac:	ble	15250 <__assert_fail@plt+0x4274>
   14fb0:	ldr	r3, [sp, #28]
   14fb4:	mvn	r0, #0
   14fb8:	mvn	r1, #-2147483648	; 0x80000000
   14fbc:	mvn	r8, #0
   14fc0:	mvn	r9, #-2147483648	; 0x80000000
   14fc4:	bl	16ac8 <__assert_fail@plt+0x5aec>
   14fc8:	ldr	r2, [sp, #24]
   14fcc:	ldr	r3, [sp, #28]
   14fd0:	subs	r0, r0, r6
   14fd4:	mov	r4, #1
   14fd8:	sbcs	r0, r1, r7
   14fdc:	bge	15290 <__assert_fail@plt+0x42b4>
   14fe0:	b	152a8 <__assert_fail@plt+0x42cc>
   14fe4:	cmn	r7, #1
   14fe8:	str	r9, [sp, #12]
   14fec:	ble	152e0 <__assert_fail@plt+0x4304>
   14ff0:	ldr	r3, [sp, #28]
   14ff4:	mvn	r0, #0
   14ff8:	mvn	r1, #-2147483648	; 0x80000000
   14ffc:	mvn	r9, #-2147483648	; 0x80000000
   15000:	str	r0, [sp, #8]
   15004:	mvn	r0, #0
   15008:	bl	16ac8 <__assert_fail@plt+0x5aec>
   1500c:	ldr	r2, [sp, #24]
   15010:	ldr	r3, [sp, #28]
   15014:	subs	r0, r0, r6
   15018:	mov	r4, #1
   1501c:	sbcs	r0, r1, r7
   15020:	bge	15324 <__assert_fail@plt+0x4348>
   15024:	b	15340 <__assert_fail@plt+0x4364>
   15028:	cmp	r7, #0
   1502c:	str	r9, [sp, #12]
   15030:	blt	15628 <__assert_fail@plt+0x464c>
   15034:	ldr	r3, [sp, #28]
   15038:	mvn	r0, #0
   1503c:	mvn	r1, #-2147483648	; 0x80000000
   15040:	mvn	r9, #-2147483648	; 0x80000000
   15044:	str	r0, [sp, #8]
   15048:	mvn	r0, #0
   1504c:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15050:	ldr	r2, [sp, #24]
   15054:	ldr	r3, [sp, #28]
   15058:	subs	r0, r0, r6
   1505c:	mov	r4, #1
   15060:	sbcs	r0, r1, r7
   15064:	bge	1566c <__assert_fail@plt+0x4690>
   15068:	b	15688 <__assert_fail@plt+0x46ac>
   1506c:	cmn	r7, #1
   15070:	ble	156c4 <__assert_fail@plt+0x46e8>
   15074:	cmp	r7, #2097152	; 0x200000
   15078:	blt	156f4 <__assert_fail@plt+0x4718>
   1507c:	b	1594c <__assert_fail@plt+0x4970>
   15080:	cmp	r7, #0
   15084:	str	r9, [sp, #12]
   15088:	blt	15704 <__assert_fail@plt+0x4728>
   1508c:	ldr	r3, [sp, #28]
   15090:	mvn	r0, #0
   15094:	mvn	r1, #-2147483648	; 0x80000000
   15098:	mvn	r9, #-2147483648	; 0x80000000
   1509c:	str	r0, [sp, #8]
   150a0:	mvn	r0, #0
   150a4:	bl	16ac8 <__assert_fail@plt+0x5aec>
   150a8:	ldr	r2, [sp, #24]
   150ac:	ldr	r3, [sp, #28]
   150b0:	subs	r0, r0, r6
   150b4:	mov	r4, #1
   150b8:	sbcs	r0, r1, r7
   150bc:	bge	15748 <__assert_fail@plt+0x476c>
   150c0:	b	15764 <__assert_fail@plt+0x4788>
   150c4:	cmp	r7, #0
   150c8:	str	r9, [sp, #12]
   150cc:	blt	157a0 <__assert_fail@plt+0x47c4>
   150d0:	ldr	r3, [sp, #28]
   150d4:	mvn	r0, #0
   150d8:	mvn	r1, #-2147483648	; 0x80000000
   150dc:	mvn	r8, #-2147483648	; 0x80000000
   150e0:	str	r0, [sp, #8]
   150e4:	mvn	r0, #0
   150e8:	bl	16ac8 <__assert_fail@plt+0x5aec>
   150ec:	ldr	r2, [sp, #24]
   150f0:	ldr	r3, [sp, #28]
   150f4:	subs	r0, r0, r6
   150f8:	mov	r4, #1
   150fc:	sbcs	r0, r1, r7
   15100:	bge	157e4 <__assert_fail@plt+0x4808>
   15104:	b	15800 <__assert_fail@plt+0x4824>
   15108:	cmp	r7, #0
   1510c:	str	r9, [sp, #12]
   15110:	blt	1583c <__assert_fail@plt+0x4860>
   15114:	ldr	r3, [sp, #28]
   15118:	mvn	r0, #0
   1511c:	mvn	r1, #-2147483648	; 0x80000000
   15120:	mvn	r9, #-2147483648	; 0x80000000
   15124:	str	r0, [sp, #8]
   15128:	mvn	r0, #0
   1512c:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15130:	ldr	r2, [sp, #24]
   15134:	ldr	r3, [sp, #28]
   15138:	subs	r0, r0, r6
   1513c:	mov	r4, #1
   15140:	sbcs	r0, r1, r7
   15144:	bge	15880 <__assert_fail@plt+0x48a4>
   15148:	b	1589c <__assert_fail@plt+0x48c0>
   1514c:	cmn	r7, #1
   15150:	ble	158dc <__assert_fail@plt+0x4900>
   15154:	cmp	r7, #4194304	; 0x400000
   15158:	blt	1590c <__assert_fail@plt+0x4930>
   1515c:	b	1594c <__assert_fail@plt+0x4970>
   15160:	cmn	r7, #1
   15164:	ble	1591c <__assert_fail@plt+0x4940>
   15168:	cmp	r7, #1073741824	; 0x40000000
   1516c:	bge	1594c <__assert_fail@plt+0x4970>
   15170:	b	1596c <__assert_fail@plt+0x4990>
   15174:	and	r0, r6, r7
   15178:	cmn	r0, #1
   1517c:	beq	151b4 <__assert_fail@plt+0x41d8>
   15180:	mov	r0, #0
   15184:	mov	r1, #-2147483648	; 0x80000000
   15188:	mov	r2, r6
   1518c:	mov	r3, r7
   15190:	mov	r8, #0
   15194:	mov	r9, #-2147483648	; 0x80000000
   15198:	bl	169f4 <__assert_fail@plt+0x5a18>
   1519c:	ldr	r2, [sp, #24]
   151a0:	ldr	r3, [sp, #28]
   151a4:	mov	r4, #1
   151a8:	subs	r0, r0, r2
   151ac:	sbcs	r0, r1, r3
   151b0:	blt	1537c <__assert_fail@plt+0x43a0>
   151b4:	umull	r8, r0, r6, r2
   151b8:	mov	r4, #0
   151bc:	mla	r0, r6, r3, r0
   151c0:	mla	r9, r7, r2, r0
   151c4:	cmp	r9, #0
   151c8:	blt	1537c <__assert_fail@plt+0x43a0>
   151cc:	ldr	r3, [sp, #28]
   151d0:	mvn	r0, #-2147483648	; 0x80000000
   151d4:	mvn	r1, #-2147483648	; 0x80000000
   151d8:	mov	r6, r4
   151dc:	mvn	r4, #0
   151e0:	str	r0, [sp, #8]
   151e4:	mvn	r0, #0
   151e8:	bl	16ac8 <__assert_fail@plt+0x5aec>
   151ec:	ldr	r2, [sp, #24]
   151f0:	ldr	r3, [sp, #28]
   151f4:	subs	r0, r0, r8
   151f8:	mov	r7, #1
   151fc:	sbcs	r0, r1, r9
   15200:	bge	153b8 <__assert_fail@plt+0x43dc>
   15204:	b	153d4 <__assert_fail@plt+0x43f8>
   15208:	and	r0, r6, r7
   1520c:	cmn	r0, #1
   15210:	beq	1523c <__assert_fail@plt+0x4260>
   15214:	mov	r0, #0
   15218:	mov	r1, #-2147483648	; 0x80000000
   1521c:	mov	r2, r6
   15220:	mov	r3, r7
   15224:	bl	169f4 <__assert_fail@plt+0x5a18>
   15228:	ldr	r2, [sp, #24]
   1522c:	ldr	r3, [sp, #28]
   15230:	subs	r0, r0, r2
   15234:	sbcs	r0, r1, r3
   15238:	blt	1594c <__assert_fail@plt+0x4970>
   1523c:	umull	r0, r1, r6, r2
   15240:	mla	r1, r6, r3, r1
   15244:	mov	r6, r0
   15248:	mla	r7, r7, r2, r1
   1524c:	b	160c4 <__assert_fail@plt+0x50e8>
   15250:	and	r0, r6, r7
   15254:	cmn	r0, #1
   15258:	beq	15290 <__assert_fail@plt+0x42b4>
   1525c:	mov	r0, #0
   15260:	mov	r1, #-2147483648	; 0x80000000
   15264:	mov	r2, r6
   15268:	mov	r3, r7
   1526c:	mov	r8, #0
   15270:	mov	r9, #-2147483648	; 0x80000000
   15274:	bl	169f4 <__assert_fail@plt+0x5a18>
   15278:	ldr	r2, [sp, #24]
   1527c:	ldr	r3, [sp, #28]
   15280:	mov	r4, #1
   15284:	subs	r0, r0, r2
   15288:	sbcs	r0, r1, r3
   1528c:	blt	15468 <__assert_fail@plt+0x448c>
   15290:	umull	r8, r0, r6, r2
   15294:	mov	r4, #0
   15298:	mla	r0, r6, r3, r0
   1529c:	mla	r9, r7, r2, r0
   152a0:	cmp	r9, #0
   152a4:	blt	15468 <__assert_fail@plt+0x448c>
   152a8:	ldr	r3, [sp, #28]
   152ac:	mvn	r0, #0
   152b0:	mvn	r1, #-2147483648	; 0x80000000
   152b4:	str	r4, [sp, #8]
   152b8:	mvn	r6, #0
   152bc:	mvn	r7, #-2147483648	; 0x80000000
   152c0:	bl	16ac8 <__assert_fail@plt+0x5aec>
   152c4:	ldr	r4, [sp, #24]
   152c8:	ldr	r3, [sp, #28]
   152cc:	subs	r0, r0, r8
   152d0:	mov	r2, #1
   152d4:	sbcs	r0, r1, r9
   152d8:	bge	154a0 <__assert_fail@plt+0x44c4>
   152dc:	b	155d8 <__assert_fail@plt+0x45fc>
   152e0:	and	r0, r6, r7
   152e4:	cmn	r0, #1
   152e8:	beq	15324 <__assert_fail@plt+0x4348>
   152ec:	mov	r0, #0
   152f0:	mov	r1, #-2147483648	; 0x80000000
   152f4:	mov	r2, r6
   152f8:	mov	r3, r7
   152fc:	bl	169f4 <__assert_fail@plt+0x5a18>
   15300:	ldr	r2, [sp, #24]
   15304:	ldr	r3, [sp, #28]
   15308:	mov	r4, #1
   1530c:	mov	r9, #-2147483648	; 0x80000000
   15310:	subs	r0, r0, r2
   15314:	sbcs	r0, r1, r3
   15318:	mov	r0, #0
   1531c:	str	r0, [sp, #8]
   15320:	blt	154b4 <__assert_fail@plt+0x44d8>
   15324:	umull	r1, r0, r6, r2
   15328:	mov	r4, #0
   1532c:	mla	r0, r6, r3, r0
   15330:	str	r1, [sp, #8]
   15334:	mla	r9, r7, r2, r0
   15338:	cmp	r9, #0
   1533c:	blt	154b4 <__assert_fail@plt+0x44d8>
   15340:	ldr	r3, [sp, #28]
   15344:	mvn	r0, #0
   15348:	mvn	r1, #-2147483648	; 0x80000000
   1534c:	str	r4, [sp, #4]
   15350:	mvn	r6, #0
   15354:	mvn	r8, #-2147483648	; 0x80000000
   15358:	bl	16ac8 <__assert_fail@plt+0x5aec>
   1535c:	ldr	r4, [sp, #8]
   15360:	ldr	r2, [sp, #24]
   15364:	ldr	r3, [sp, #28]
   15368:	mov	r7, #1
   1536c:	subs	r0, r0, r4
   15370:	sbcs	r0, r1, r9
   15374:	bge	154f0 <__assert_fail@plt+0x4514>
   15378:	b	15508 <__assert_fail@plt+0x452c>
   1537c:	mov	r0, #-2147483648	; 0x80000000
   15380:	mov	r1, #-2147483648	; 0x80000000
   15384:	mov	r2, r8
   15388:	mov	r3, r9
   1538c:	mov	r6, r4
   15390:	mov	r4, #0
   15394:	str	r0, [sp, #8]
   15398:	mov	r0, #0
   1539c:	bl	169f4 <__assert_fail@plt+0x5a18>
   153a0:	ldr	r2, [sp, #24]
   153a4:	ldr	r3, [sp, #28]
   153a8:	mov	r7, #1
   153ac:	subs	r0, r0, r2
   153b0:	sbcs	r0, r1, r3
   153b4:	blt	15428 <__assert_fail@plt+0x444c>
   153b8:	umull	r4, r0, r8, r2
   153bc:	mov	r7, r6
   153c0:	mla	r0, r8, r3, r0
   153c4:	mla	r0, r9, r2, r0
   153c8:	cmp	r0, #0
   153cc:	str	r0, [sp, #8]
   153d0:	blt	15428 <__assert_fail@plt+0x444c>
   153d4:	ldr	r3, [sp, #28]
   153d8:	mvn	r0, #0
   153dc:	mvn	r1, #-2147483648	; 0x80000000
   153e0:	mov	r9, r7
   153e4:	mvn	r6, #0
   153e8:	mvn	r7, #-2147483648	; 0x80000000
   153ec:	bl	16ac8 <__assert_fail@plt+0x5aec>
   153f0:	ldr	r8, [sp, #8]
   153f4:	ldr	r3, [sp, #24]
   153f8:	ldr	ip, [sp, #28]
   153fc:	subs	r0, r0, r4
   15400:	mov	r2, #1
   15404:	sbcs	r0, r1, r8
   15408:	blt	1541c <__assert_fail@plt+0x4440>
   1540c:	umull	r6, r0, r4, r3
   15410:	mov	r2, #0
   15414:	mla	r0, r4, ip, r0
   15418:	mla	r7, r8, r3, r0
   1541c:	orr	r3, r2, r9
   15420:	ldr	r9, [sp, #12]
   15424:	b	160c4 <__assert_fail@plt+0x50e8>
   15428:	ldr	r8, [sp, #8]
   1542c:	mov	r0, #0
   15430:	mov	r1, #-2147483648	; 0x80000000
   15434:	mov	r2, r4
   15438:	mov	r9, r7
   1543c:	mov	r6, #0
   15440:	mov	r7, #-2147483648	; 0x80000000
   15444:	mov	r3, r8
   15448:	bl	169f4 <__assert_fail@plt+0x5a18>
   1544c:	ldr	r3, [sp, #24]
   15450:	ldr	ip, [sp, #28]
   15454:	mov	r2, #1
   15458:	subs	r0, r0, r3
   1545c:	sbcs	r0, r1, ip
   15460:	bge	1540c <__assert_fail@plt+0x4430>
   15464:	b	1541c <__assert_fail@plt+0x4440>
   15468:	mov	r0, #0
   1546c:	mov	r1, #-2147483648	; 0x80000000
   15470:	mov	r2, r8
   15474:	mov	r3, r9
   15478:	str	r4, [sp, #8]
   1547c:	mov	r6, #0
   15480:	mov	r7, #-2147483648	; 0x80000000
   15484:	bl	169f4 <__assert_fail@plt+0x5a18>
   15488:	ldr	r4, [sp, #24]
   1548c:	ldr	r3, [sp, #28]
   15490:	mov	r2, #1
   15494:	subs	r0, r0, r4
   15498:	sbcs	r0, r1, r3
   1549c:	blt	155d8 <__assert_fail@plt+0x45fc>
   154a0:	umull	r6, r0, r8, r4
   154a4:	mov	r2, #0
   154a8:	mla	r0, r8, r3, r0
   154ac:	mla	r7, r9, r4, r0
   154b0:	b	155d8 <__assert_fail@plt+0x45fc>
   154b4:	str	r4, [sp, #4]
   154b8:	ldr	r4, [sp, #8]
   154bc:	mov	r0, #0
   154c0:	mov	r1, #-2147483648	; 0x80000000
   154c4:	mov	r3, r9
   154c8:	mov	r2, r4
   154cc:	bl	169f4 <__assert_fail@plt+0x5a18>
   154d0:	ldr	r2, [sp, #24]
   154d4:	ldr	r3, [sp, #28]
   154d8:	mov	r7, #1
   154dc:	mov	r6, #0
   154e0:	mov	r8, #-2147483648	; 0x80000000
   154e4:	subs	r0, r0, r2
   154e8:	sbcs	r0, r1, r3
   154ec:	blt	15540 <__assert_fail@plt+0x4564>
   154f0:	umull	r6, r0, r4, r2
   154f4:	ldr	r7, [sp, #4]
   154f8:	mla	r0, r4, r3, r0
   154fc:	mla	r8, r9, r2, r0
   15500:	cmp	r8, #0
   15504:	blt	15540 <__assert_fail@plt+0x4564>
   15508:	ldr	r3, [sp, #28]
   1550c:	mvn	r0, #0
   15510:	mvn	r1, #-2147483648	; 0x80000000
   15514:	str	r7, [sp, #8]
   15518:	mvn	r4, #0
   1551c:	mvn	r9, #-2147483648	; 0x80000000
   15520:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15524:	ldr	r2, [sp, #24]
   15528:	ldr	r3, [sp, #28]
   1552c:	subs	r0, r0, r6
   15530:	mov	r7, #1
   15534:	sbcs	r0, r1, r8
   15538:	bge	15578 <__assert_fail@plt+0x459c>
   1553c:	b	15590 <__assert_fail@plt+0x45b4>
   15540:	mov	r0, #0
   15544:	mov	r1, #-2147483648	; 0x80000000
   15548:	mov	r2, r6
   1554c:	mov	r3, r8
   15550:	str	r7, [sp, #8]
   15554:	bl	169f4 <__assert_fail@plt+0x5a18>
   15558:	ldr	r2, [sp, #24]
   1555c:	ldr	r3, [sp, #28]
   15560:	mov	r7, #1
   15564:	mov	r4, #0
   15568:	mov	r9, #-2147483648	; 0x80000000
   1556c:	subs	r0, r0, r2
   15570:	sbcs	r0, r1, r3
   15574:	blt	155e8 <__assert_fail@plt+0x460c>
   15578:	umull	r4, r0, r6, r2
   1557c:	ldr	r7, [sp, #8]
   15580:	mla	r0, r6, r3, r0
   15584:	mla	r9, r8, r2, r0
   15588:	cmp	r9, #0
   1558c:	blt	155e8 <__assert_fail@plt+0x460c>
   15590:	ldr	r3, [sp, #28]
   15594:	mvn	r0, #0
   15598:	mvn	r1, #-2147483648	; 0x80000000
   1559c:	str	r7, [sp, #8]
   155a0:	mvn	r6, #0
   155a4:	mvn	r7, #-2147483648	; 0x80000000
   155a8:	bl	16ac8 <__assert_fail@plt+0x5aec>
   155ac:	ldr	r3, [sp, #24]
   155b0:	ldr	ip, [sp, #28]
   155b4:	subs	r0, r0, r4
   155b8:	mov	r2, #1
   155bc:	mov	r8, r4
   155c0:	sbcs	r0, r1, r9
   155c4:	blt	155d8 <__assert_fail@plt+0x45fc>
   155c8:	umull	r6, r0, r8, r3
   155cc:	mov	r2, #0
   155d0:	mla	r0, r8, ip, r0
   155d4:	mla	r7, r9, r3, r0
   155d8:	ldr	r0, [sp, #8]
   155dc:	ldr	r9, [sp, #12]
   155e0:	orr	r3, r2, r0
   155e4:	b	160c4 <__assert_fail@plt+0x50e8>
   155e8:	mov	r0, #0
   155ec:	mov	r1, #-2147483648	; 0x80000000
   155f0:	mov	r2, r4
   155f4:	mov	r3, r9
   155f8:	str	r7, [sp, #8]
   155fc:	mov	r8, r4
   15600:	bl	169f4 <__assert_fail@plt+0x5a18>
   15604:	ldr	r3, [sp, #24]
   15608:	ldr	ip, [sp, #28]
   1560c:	mov	r2, #1
   15610:	mov	r6, #0
   15614:	mov	r7, #-2147483648	; 0x80000000
   15618:	subs	r0, r0, r3
   1561c:	sbcs	r0, r1, ip
   15620:	bge	155c8 <__assert_fail@plt+0x45ec>
   15624:	b	155d8 <__assert_fail@plt+0x45fc>
   15628:	and	r0, r6, r7
   1562c:	cmn	r0, #1
   15630:	beq	1566c <__assert_fail@plt+0x4690>
   15634:	mov	r0, #0
   15638:	mov	r1, #-2147483648	; 0x80000000
   1563c:	mov	r2, r6
   15640:	mov	r3, r7
   15644:	bl	169f4 <__assert_fail@plt+0x5a18>
   15648:	ldr	r2, [sp, #24]
   1564c:	ldr	r3, [sp, #28]
   15650:	mov	r4, #1
   15654:	mov	r9, #-2147483648	; 0x80000000
   15658:	subs	r0, r0, r2
   1565c:	sbcs	r0, r1, r3
   15660:	mov	r0, #0
   15664:	str	r0, [sp, #8]
   15668:	blt	1597c <__assert_fail@plt+0x49a0>
   1566c:	umull	r1, r0, r6, r2
   15670:	mov	r4, #0
   15674:	mla	r0, r6, r3, r0
   15678:	str	r1, [sp, #8]
   1567c:	mla	r9, r7, r2, r0
   15680:	cmp	r9, #0
   15684:	blt	1597c <__assert_fail@plt+0x49a0>
   15688:	ldr	r3, [sp, #28]
   1568c:	mvn	r0, #0
   15690:	mvn	r1, #-2147483648	; 0x80000000
   15694:	str	r4, [sp, #4]
   15698:	mvn	r8, #0
   1569c:	mvn	r4, #-2147483648	; 0x80000000
   156a0:	bl	16ac8 <__assert_fail@plt+0x5aec>
   156a4:	ldr	r6, [sp, #8]
   156a8:	ldr	r2, [sp, #24]
   156ac:	ldr	r3, [sp, #28]
   156b0:	mov	r7, #1
   156b4:	subs	r0, r0, r6
   156b8:	sbcs	r0, r1, r9
   156bc:	bge	159b8 <__assert_fail@plt+0x49dc>
   156c0:	b	159d0 <__assert_fail@plt+0x49f4>
   156c4:	and	r0, r6, r7
   156c8:	cmn	r0, #1
   156cc:	beq	156f4 <__assert_fail@plt+0x4718>
   156d0:	mov	r0, #0
   156d4:	mov	r1, #-2147483648	; 0x80000000
   156d8:	mov	r2, r6
   156dc:	mov	r3, r7
   156e0:	bl	169f4 <__assert_fail@plt+0x5a18>
   156e4:	ldr	r3, [sp, #28]
   156e8:	subs	r0, r0, #1024	; 0x400
   156ec:	sbcs	r0, r1, #0
   156f0:	blt	1594c <__assert_fail@plt+0x4970>
   156f4:	lsl	r0, r7, #10
   156f8:	orr	r7, r0, r6, lsr #22
   156fc:	lsl	r6, r6, #10
   15700:	b	160c4 <__assert_fail@plt+0x50e8>
   15704:	and	r0, r6, r7
   15708:	cmn	r0, #1
   1570c:	beq	15748 <__assert_fail@plt+0x476c>
   15710:	mov	r0, #0
   15714:	mov	r1, #-2147483648	; 0x80000000
   15718:	mov	r2, r6
   1571c:	mov	r3, r7
   15720:	bl	169f4 <__assert_fail@plt+0x5a18>
   15724:	ldr	r2, [sp, #24]
   15728:	ldr	r3, [sp, #28]
   1572c:	mov	r4, #1
   15730:	mov	r9, #-2147483648	; 0x80000000
   15734:	subs	r0, r0, r2
   15738:	sbcs	r0, r1, r3
   1573c:	mov	r0, #0
   15740:	str	r0, [sp, #8]
   15744:	blt	15c94 <__assert_fail@plt+0x4cb8>
   15748:	umull	r1, r0, r6, r2
   1574c:	mov	r4, #0
   15750:	mla	r0, r6, r3, r0
   15754:	str	r1, [sp, #8]
   15758:	mla	r9, r7, r2, r0
   1575c:	cmp	r9, #0
   15760:	blt	15c94 <__assert_fail@plt+0x4cb8>
   15764:	ldr	r3, [sp, #28]
   15768:	mvn	r0, #0
   1576c:	mvn	r1, #-2147483648	; 0x80000000
   15770:	str	r4, [sp, #4]
   15774:	mvn	r8, #0
   15778:	mvn	r4, #-2147483648	; 0x80000000
   1577c:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15780:	ldr	r6, [sp, #8]
   15784:	ldr	r2, [sp, #24]
   15788:	ldr	r3, [sp, #28]
   1578c:	mov	r7, #1
   15790:	subs	r0, r0, r6
   15794:	sbcs	r0, r1, r9
   15798:	bge	15cd0 <__assert_fail@plt+0x4cf4>
   1579c:	b	15ce8 <__assert_fail@plt+0x4d0c>
   157a0:	and	r0, r6, r7
   157a4:	cmn	r0, #1
   157a8:	beq	157e4 <__assert_fail@plt+0x4808>
   157ac:	mov	r0, #0
   157b0:	mov	r1, #-2147483648	; 0x80000000
   157b4:	mov	r2, r6
   157b8:	mov	r3, r7
   157bc:	bl	169f4 <__assert_fail@plt+0x5a18>
   157c0:	ldr	r2, [sp, #24]
   157c4:	ldr	r3, [sp, #28]
   157c8:	mov	r4, #1
   157cc:	mov	r8, #-2147483648	; 0x80000000
   157d0:	subs	r0, r0, r2
   157d4:	sbcs	r0, r1, r3
   157d8:	mov	r0, #0
   157dc:	str	r0, [sp, #8]
   157e0:	blt	15f10 <__assert_fail@plt+0x4f34>
   157e4:	umull	r1, r0, r6, r2
   157e8:	mov	r4, #0
   157ec:	mla	r0, r6, r3, r0
   157f0:	str	r1, [sp, #8]
   157f4:	mla	r8, r7, r2, r0
   157f8:	cmp	r8, #0
   157fc:	blt	15f10 <__assert_fail@plt+0x4f34>
   15800:	ldr	r3, [sp, #28]
   15804:	mvn	r0, #0
   15808:	mvn	r1, #-2147483648	; 0x80000000
   1580c:	str	r4, [sp, #4]
   15810:	mvn	r9, #0
   15814:	mvn	r4, #-2147483648	; 0x80000000
   15818:	bl	16ac8 <__assert_fail@plt+0x5aec>
   1581c:	ldr	r6, [sp, #8]
   15820:	ldr	r2, [sp, #24]
   15824:	ldr	r3, [sp, #28]
   15828:	mov	r7, #1
   1582c:	subs	r0, r0, r6
   15830:	sbcs	r0, r1, r8
   15834:	bge	15f4c <__assert_fail@plt+0x4f70>
   15838:	b	15f64 <__assert_fail@plt+0x4f88>
   1583c:	and	r0, r6, r7
   15840:	cmn	r0, #1
   15844:	beq	15880 <__assert_fail@plt+0x48a4>
   15848:	mov	r0, #0
   1584c:	mov	r1, #-2147483648	; 0x80000000
   15850:	mov	r2, r6
   15854:	mov	r3, r7
   15858:	bl	169f4 <__assert_fail@plt+0x5a18>
   1585c:	ldr	r2, [sp, #24]
   15860:	ldr	r3, [sp, #28]
   15864:	mov	r4, #1
   15868:	mov	r9, #-2147483648	; 0x80000000
   1586c:	subs	r0, r0, r2
   15870:	sbcs	r0, r1, r3
   15874:	mov	r0, #0
   15878:	str	r0, [sp, #8]
   1587c:	blt	1612c <__assert_fail@plt+0x5150>
   15880:	umull	r1, r0, r6, r2
   15884:	mov	r4, #0
   15888:	mla	r0, r6, r3, r0
   1588c:	str	r1, [sp, #8]
   15890:	mla	r9, r7, r2, r0
   15894:	cmp	r9, #0
   15898:	blt	1612c <__assert_fail@plt+0x5150>
   1589c:	ldr	r3, [sp, #28]
   158a0:	mvn	r0, #0
   158a4:	mvn	r1, #-2147483648	; 0x80000000
   158a8:	str	r4, [sp]
   158ac:	mvn	r8, #-2147483648	; 0x80000000
   158b0:	str	r0, [sp, #4]
   158b4:	mvn	r0, #0
   158b8:	bl	16ac8 <__assert_fail@plt+0x5aec>
   158bc:	ldr	r6, [sp, #8]
   158c0:	ldr	r2, [sp, #24]
   158c4:	ldr	r3, [sp, #28]
   158c8:	mov	r7, #1
   158cc:	subs	r0, r0, r6
   158d0:	sbcs	r0, r1, r9
   158d4:	bge	1616c <__assert_fail@plt+0x5190>
   158d8:	b	16188 <__assert_fail@plt+0x51ac>
   158dc:	and	r0, r6, r7
   158e0:	cmn	r0, #1
   158e4:	beq	1590c <__assert_fail@plt+0x4930>
   158e8:	mov	r0, #0
   158ec:	mov	r1, #-2147483648	; 0x80000000
   158f0:	mov	r2, r6
   158f4:	mov	r3, r7
   158f8:	bl	169f4 <__assert_fail@plt+0x5a18>
   158fc:	ldr	r3, [sp, #28]
   15900:	subs	r0, r0, #512	; 0x200
   15904:	sbcs	r0, r1, #0
   15908:	blt	1594c <__assert_fail@plt+0x4970>
   1590c:	lsl	r0, r7, #9
   15910:	orr	r7, r0, r6, lsr #23
   15914:	lsl	r6, r6, #9
   15918:	b	160c4 <__assert_fail@plt+0x50e8>
   1591c:	and	r0, r6, r7
   15920:	cmn	r0, #1
   15924:	beq	1596c <__assert_fail@plt+0x4990>
   15928:	mov	r0, #0
   1592c:	mov	r1, #-2147483648	; 0x80000000
   15930:	mov	r2, r6
   15934:	mov	r3, r7
   15938:	bl	169f4 <__assert_fail@plt+0x5a18>
   1593c:	ldr	r3, [sp, #28]
   15940:	subs	r0, r0, #2
   15944:	sbcs	r0, r1, #0
   15948:	bge	1596c <__assert_fail@plt+0x4990>
   1594c:	mvn	r0, #-2147483648	; 0x80000000
   15950:	cmp	r7, #0
   15954:	mvn	r6, #0
   15958:	mov	r3, #1
   1595c:	movlt	r0, #-2147483648	; 0x80000000
   15960:	movwlt	r6, #0
   15964:	mov	r7, r0
   15968:	b	160c4 <__assert_fail@plt+0x50e8>
   1596c:	lsl	r0, r7, #1
   15970:	orr	r7, r0, r6, lsr #31
   15974:	lsl	r6, r6, #1
   15978:	b	160c4 <__assert_fail@plt+0x50e8>
   1597c:	ldr	r6, [sp, #8]
   15980:	mov	r0, #0
   15984:	mov	r1, #-2147483648	; 0x80000000
   15988:	mov	r3, r9
   1598c:	str	r4, [sp, #4]
   15990:	mov	r2, r6
   15994:	bl	169f4 <__assert_fail@plt+0x5a18>
   15998:	ldr	r2, [sp, #24]
   1599c:	ldr	r3, [sp, #28]
   159a0:	mov	r7, #1
   159a4:	mov	r8, #0
   159a8:	mov	r4, #-2147483648	; 0x80000000
   159ac:	subs	r0, r0, r2
   159b0:	sbcs	r0, r1, r3
   159b4:	blt	15a08 <__assert_fail@plt+0x4a2c>
   159b8:	umull	r8, r0, r6, r2
   159bc:	ldr	r7, [sp, #4]
   159c0:	mla	r0, r6, r3, r0
   159c4:	mla	r4, r9, r2, r0
   159c8:	cmp	r4, #0
   159cc:	blt	15a08 <__assert_fail@plt+0x4a2c>
   159d0:	ldr	r3, [sp, #28]
   159d4:	mvn	r0, #0
   159d8:	mvn	r1, #-2147483648	; 0x80000000
   159dc:	str	r7, [sp, #8]
   159e0:	mvn	r7, #0
   159e4:	mvn	r9, #-2147483648	; 0x80000000
   159e8:	bl	16ac8 <__assert_fail@plt+0x5aec>
   159ec:	ldr	r2, [sp, #24]
   159f0:	ldr	r3, [sp, #28]
   159f4:	subs	r0, r0, r8
   159f8:	mov	r6, #1
   159fc:	sbcs	r0, r1, r4
   15a00:	bge	15a40 <__assert_fail@plt+0x4a64>
   15a04:	b	15a58 <__assert_fail@plt+0x4a7c>
   15a08:	mov	r0, #0
   15a0c:	mov	r1, #-2147483648	; 0x80000000
   15a10:	mov	r2, r8
   15a14:	mov	r3, r4
   15a18:	str	r7, [sp, #8]
   15a1c:	bl	169f4 <__assert_fail@plt+0x5a18>
   15a20:	ldr	r2, [sp, #24]
   15a24:	ldr	r3, [sp, #28]
   15a28:	mov	r6, #1
   15a2c:	mov	r7, #0
   15a30:	mov	r9, #-2147483648	; 0x80000000
   15a34:	subs	r0, r0, r2
   15a38:	sbcs	r0, r1, r3
   15a3c:	blt	15a98 <__assert_fail@plt+0x4abc>
   15a40:	umull	r7, r0, r8, r2
   15a44:	ldr	r6, [sp, #8]
   15a48:	mla	r0, r8, r3, r0
   15a4c:	mla	r9, r4, r2, r0
   15a50:	cmp	r9, #0
   15a54:	blt	15a98 <__assert_fail@plt+0x4abc>
   15a58:	ldr	r3, [sp, #28]
   15a5c:	mvn	r0, #0
   15a60:	mvn	r1, #-2147483648	; 0x80000000
   15a64:	str	r6, [sp, #8]
   15a68:	mvn	r8, #0
   15a6c:	mvn	r4, #-2147483648	; 0x80000000
   15a70:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15a74:	ldr	r2, [sp, #24]
   15a78:	ldr	r3, [sp, #28]
   15a7c:	subs	r0, r0, r7
   15a80:	sbcs	r0, r1, r9
   15a84:	bge	15adc <__assert_fail@plt+0x4b00>
   15a88:	mov	r0, #1
   15a8c:	mov	r6, #0
   15a90:	str	r0, [sp, #8]
   15a94:	b	15af4 <__assert_fail@plt+0x4b18>
   15a98:	mov	r0, #0
   15a9c:	mov	r1, #-2147483648	; 0x80000000
   15aa0:	mov	r2, r7
   15aa4:	mov	r3, r9
   15aa8:	str	r6, [sp, #8]
   15aac:	bl	169f4 <__assert_fail@plt+0x5a18>
   15ab0:	ldr	r2, [sp, #24]
   15ab4:	ldr	r3, [sp, #28]
   15ab8:	subs	r0, r0, r2
   15abc:	sbcs	r0, r1, r3
   15ac0:	bge	15adc <__assert_fail@plt+0x4b00>
   15ac4:	mov	r0, #1
   15ac8:	mov	r8, #0
   15acc:	mov	r4, #-2147483648	; 0x80000000
   15ad0:	mov	r6, #0
   15ad4:	str	r0, [sp, #8]
   15ad8:	b	15b2c <__assert_fail@plt+0x4b50>
   15adc:	umull	r8, r0, r7, r2
   15ae0:	mov	r6, #0
   15ae4:	mla	r0, r7, r3, r0
   15ae8:	mla	r4, r9, r2, r0
   15aec:	cmp	r4, #0
   15af0:	blt	15b2c <__assert_fail@plt+0x4b50>
   15af4:	ldr	r3, [sp, #28]
   15af8:	mvn	r0, #0
   15afc:	mvn	r1, #-2147483648	; 0x80000000
   15b00:	mvn	r9, #0
   15b04:	mvn	r7, #-2147483648	; 0x80000000
   15b08:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15b0c:	ldr	r2, [sp, #24]
   15b10:	ldr	r3, [sp, #28]
   15b14:	subs	r0, r0, r8
   15b18:	sbcs	r0, r1, r4
   15b1c:	bge	15b68 <__assert_fail@plt+0x4b8c>
   15b20:	mov	r0, #1
   15b24:	str	r0, [sp, #8]
   15b28:	b	15b7c <__assert_fail@plt+0x4ba0>
   15b2c:	mov	r0, #0
   15b30:	mov	r1, #-2147483648	; 0x80000000
   15b34:	mov	r2, r8
   15b38:	mov	r3, r4
   15b3c:	bl	169f4 <__assert_fail@plt+0x5a18>
   15b40:	ldr	r2, [sp, #24]
   15b44:	ldr	r3, [sp, #28]
   15b48:	subs	r0, r0, r2
   15b4c:	sbcs	r0, r1, r3
   15b50:	bge	15b68 <__assert_fail@plt+0x4b8c>
   15b54:	mov	r0, #1
   15b58:	mov	r9, #0
   15b5c:	mov	r7, #-2147483648	; 0x80000000
   15b60:	str	r0, [sp, #8]
   15b64:	b	15bb8 <__assert_fail@plt+0x4bdc>
   15b68:	umull	r9, r0, r8, r2
   15b6c:	mla	r0, r8, r3, r0
   15b70:	mla	r7, r4, r2, r0
   15b74:	cmp	r7, #0
   15b78:	blt	15bb8 <__assert_fail@plt+0x4bdc>
   15b7c:	ldr	r3, [sp, #28]
   15b80:	mvn	r0, #0
   15b84:	mvn	r1, #-2147483648	; 0x80000000
   15b88:	mvn	r8, #0
   15b8c:	mvn	r4, #-2147483648	; 0x80000000
   15b90:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15b94:	ldr	r2, [sp, #24]
   15b98:	ldr	r3, [sp, #28]
   15b9c:	subs	r0, r0, r9
   15ba0:	sbcs	r0, r1, r7
   15ba4:	bge	15bf8 <__assert_fail@plt+0x4c1c>
   15ba8:	ldr	r9, [sp, #12]
   15bac:	mov	r0, #1
   15bb0:	str	r0, [sp, #8]
   15bb4:	b	15c10 <__assert_fail@plt+0x4c34>
   15bb8:	mov	r0, #0
   15bbc:	mov	r1, #-2147483648	; 0x80000000
   15bc0:	mov	r2, r9
   15bc4:	mov	r3, r7
   15bc8:	bl	169f4 <__assert_fail@plt+0x5a18>
   15bcc:	ldr	r2, [sp, #24]
   15bd0:	ldr	r3, [sp, #28]
   15bd4:	subs	r0, r0, r2
   15bd8:	sbcs	r0, r1, r3
   15bdc:	bge	15bf8 <__assert_fail@plt+0x4c1c>
   15be0:	ldr	r9, [sp, #12]
   15be4:	mov	r0, #1
   15be8:	mov	r8, #0
   15bec:	mov	r4, #-2147483648	; 0x80000000
   15bf0:	str	r0, [sp, #8]
   15bf4:	b	15c60 <__assert_fail@plt+0x4c84>
   15bf8:	umull	r8, r0, r9, r2
   15bfc:	mla	r0, r9, r3, r0
   15c00:	ldr	r9, [sp, #12]
   15c04:	mla	r4, r7, r2, r0
   15c08:	cmp	r4, #0
   15c0c:	blt	15c60 <__assert_fail@plt+0x4c84>
   15c10:	ldr	r3, [sp, #28]
   15c14:	mvn	r0, #0
   15c18:	mvn	r1, #-2147483648	; 0x80000000
   15c1c:	mvn	r6, #0
   15c20:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15c24:	ldr	r7, [sp, #24]
   15c28:	ldr	r3, [sp, #28]
   15c2c:	subs	r0, r0, r8
   15c30:	mov	r2, #1
   15c34:	sbcs	r0, r1, r4
   15c38:	mvn	r0, #-2147483648	; 0x80000000
   15c3c:	blt	15c50 <__assert_fail@plt+0x4c74>
   15c40:	umull	r6, r0, r8, r7
   15c44:	mov	r2, #0
   15c48:	mla	r0, r8, r3, r0
   15c4c:	mla	r0, r4, r7, r0
   15c50:	ldr	r1, [sp, #8]
   15c54:	mov	r7, r0
   15c58:	orr	r3, r2, r1
   15c5c:	b	160c4 <__assert_fail@plt+0x50e8>
   15c60:	mov	r0, #0
   15c64:	mov	r1, #-2147483648	; 0x80000000
   15c68:	mov	r2, r8
   15c6c:	mov	r3, r4
   15c70:	bl	169f4 <__assert_fail@plt+0x5a18>
   15c74:	ldr	r7, [sp, #24]
   15c78:	ldr	r3, [sp, #28]
   15c7c:	mov	r2, #1
   15c80:	subs	r0, r0, r7
   15c84:	sbcs	r0, r1, r3
   15c88:	mov	r0, #-2147483648	; 0x80000000
   15c8c:	bge	15c40 <__assert_fail@plt+0x4c64>
   15c90:	b	15c50 <__assert_fail@plt+0x4c74>
   15c94:	ldr	r6, [sp, #8]
   15c98:	mov	r0, #0
   15c9c:	mov	r1, #-2147483648	; 0x80000000
   15ca0:	mov	r3, r9
   15ca4:	str	r4, [sp, #4]
   15ca8:	mov	r2, r6
   15cac:	bl	169f4 <__assert_fail@plt+0x5a18>
   15cb0:	ldr	r2, [sp, #24]
   15cb4:	ldr	r3, [sp, #28]
   15cb8:	mov	r7, #1
   15cbc:	mov	r8, #0
   15cc0:	mov	r4, #-2147483648	; 0x80000000
   15cc4:	subs	r0, r0, r2
   15cc8:	sbcs	r0, r1, r3
   15ccc:	blt	15d24 <__assert_fail@plt+0x4d48>
   15cd0:	umull	r8, r0, r6, r2
   15cd4:	ldr	r7, [sp, #4]
   15cd8:	mla	r0, r6, r3, r0
   15cdc:	mla	r4, r9, r2, r0
   15ce0:	cmp	r4, #0
   15ce4:	blt	15d24 <__assert_fail@plt+0x4d48>
   15ce8:	ldr	r3, [sp, #28]
   15cec:	mvn	r0, #0
   15cf0:	mvn	r1, #-2147483648	; 0x80000000
   15cf4:	str	r7, [sp, #4]
   15cf8:	mvn	r7, #0
   15cfc:	mvn	r9, #-2147483648	; 0x80000000
   15d00:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15d04:	ldr	r2, [sp, #24]
   15d08:	ldr	r3, [sp, #28]
   15d0c:	subs	r0, r0, r8
   15d10:	mov	r6, #1
   15d14:	sbcs	r0, r1, r4
   15d18:	str	r6, [sp, #8]
   15d1c:	bge	15d60 <__assert_fail@plt+0x4d84>
   15d20:	b	15d7c <__assert_fail@plt+0x4da0>
   15d24:	mov	r0, #0
   15d28:	mov	r1, #-2147483648	; 0x80000000
   15d2c:	mov	r2, r8
   15d30:	mov	r3, r4
   15d34:	str	r7, [sp, #4]
   15d38:	bl	169f4 <__assert_fail@plt+0x5a18>
   15d3c:	ldr	r2, [sp, #24]
   15d40:	ldr	r3, [sp, #28]
   15d44:	mov	r7, #1
   15d48:	mov	r9, #-2147483648	; 0x80000000
   15d4c:	str	r7, [sp, #8]
   15d50:	mov	r7, #0
   15d54:	subs	r0, r0, r2
   15d58:	sbcs	r0, r1, r3
   15d5c:	blt	15db4 <__assert_fail@plt+0x4dd8>
   15d60:	umull	r7, r0, r8, r2
   15d64:	mla	r0, r8, r3, r0
   15d68:	mla	r9, r4, r2, r0
   15d6c:	ldr	r0, [sp, #4]
   15d70:	cmp	r9, #0
   15d74:	str	r0, [sp, #8]
   15d78:	blt	15db4 <__assert_fail@plt+0x4dd8>
   15d7c:	ldr	r3, [sp, #28]
   15d80:	mvn	r0, #0
   15d84:	mvn	r1, #-2147483648	; 0x80000000
   15d88:	mvn	r4, #0
   15d8c:	mvn	r8, #-2147483648	; 0x80000000
   15d90:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15d94:	ldr	r2, [sp, #24]
   15d98:	ldr	r3, [sp, #28]
   15d9c:	subs	r0, r0, r7
   15da0:	sbcs	r0, r1, r9
   15da4:	bge	15df0 <__assert_fail@plt+0x4e14>
   15da8:	mov	r0, #1
   15dac:	str	r0, [sp, #8]
   15db0:	b	15e04 <__assert_fail@plt+0x4e28>
   15db4:	mov	r0, #0
   15db8:	mov	r1, #-2147483648	; 0x80000000
   15dbc:	mov	r2, r7
   15dc0:	mov	r3, r9
   15dc4:	bl	169f4 <__assert_fail@plt+0x5a18>
   15dc8:	ldr	r2, [sp, #24]
   15dcc:	ldr	r3, [sp, #28]
   15dd0:	subs	r0, r0, r2
   15dd4:	sbcs	r0, r1, r3
   15dd8:	bge	15df0 <__assert_fail@plt+0x4e14>
   15ddc:	mov	r0, #1
   15de0:	mov	r4, #0
   15de4:	mov	r8, #-2147483648	; 0x80000000
   15de8:	str	r0, [sp, #8]
   15dec:	b	15e38 <__assert_fail@plt+0x4e5c>
   15df0:	umull	r4, r0, r7, r2
   15df4:	mla	r0, r7, r3, r0
   15df8:	mla	r8, r9, r2, r0
   15dfc:	cmp	r8, #0
   15e00:	blt	15e38 <__assert_fail@plt+0x4e5c>
   15e04:	ldr	r3, [sp, #28]
   15e08:	mvn	r0, #0
   15e0c:	mvn	r1, #-2147483648	; 0x80000000
   15e10:	mvn	r6, #0
   15e14:	mvn	r9, #-2147483648	; 0x80000000
   15e18:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15e1c:	ldr	r2, [sp, #24]
   15e20:	ldr	r3, [sp, #28]
   15e24:	subs	r0, r0, r4
   15e28:	sbcs	r0, r1, r8
   15e2c:	bge	15e70 <__assert_fail@plt+0x4e94>
   15e30:	mov	r8, #1
   15e34:	b	15e88 <__assert_fail@plt+0x4eac>
   15e38:	mov	r0, #0
   15e3c:	mov	r1, #-2147483648	; 0x80000000
   15e40:	mov	r2, r4
   15e44:	mov	r3, r8
   15e48:	bl	169f4 <__assert_fail@plt+0x5a18>
   15e4c:	ldr	r2, [sp, #24]
   15e50:	ldr	r3, [sp, #28]
   15e54:	subs	r0, r0, r2
   15e58:	sbcs	r0, r1, r3
   15e5c:	bge	15e70 <__assert_fail@plt+0x4e94>
   15e60:	mov	r8, #1
   15e64:	mov	r6, #0
   15e68:	mov	r9, #-2147483648	; 0x80000000
   15e6c:	b	15ed8 <__assert_fail@plt+0x4efc>
   15e70:	umull	r6, r0, r4, r2
   15e74:	mla	r0, r4, r3, r0
   15e78:	mla	r9, r8, r2, r0
   15e7c:	ldr	r8, [sp, #8]
   15e80:	cmp	r9, #0
   15e84:	blt	15ed8 <__assert_fail@plt+0x4efc>
   15e88:	ldr	r3, [sp, #28]
   15e8c:	mvn	r0, #0
   15e90:	mvn	r1, #-2147483648	; 0x80000000
   15e94:	mvn	r4, #0
   15e98:	mvn	r7, #-2147483648	; 0x80000000
   15e9c:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15ea0:	ldr	r3, [sp, #24]
   15ea4:	ldr	ip, [sp, #28]
   15ea8:	subs	r0, r0, r6
   15eac:	mov	r2, #1
   15eb0:	sbcs	r0, r1, r9
   15eb4:	blt	15ec8 <__assert_fail@plt+0x4eec>
   15eb8:	umull	r4, r0, r6, r3
   15ebc:	mov	r2, #0
   15ec0:	mla	r0, r6, ip, r0
   15ec4:	mla	r7, r9, r3, r0
   15ec8:	ldr	r9, [sp, #12]
   15ecc:	orr	r3, r2, r8
   15ed0:	mov	r6, r4
   15ed4:	b	160c4 <__assert_fail@plt+0x50e8>
   15ed8:	mov	r0, #0
   15edc:	mov	r1, #-2147483648	; 0x80000000
   15ee0:	mov	r2, r6
   15ee4:	mov	r3, r9
   15ee8:	bl	169f4 <__assert_fail@plt+0x5a18>
   15eec:	ldr	r3, [sp, #24]
   15ef0:	ldr	ip, [sp, #28]
   15ef4:	mov	r2, #1
   15ef8:	mov	r4, #0
   15efc:	mov	r7, #-2147483648	; 0x80000000
   15f00:	subs	r0, r0, r3
   15f04:	sbcs	r0, r1, ip
   15f08:	bge	15eb8 <__assert_fail@plt+0x4edc>
   15f0c:	b	15ec8 <__assert_fail@plt+0x4eec>
   15f10:	ldr	r6, [sp, #8]
   15f14:	mov	r0, #0
   15f18:	mov	r1, #-2147483648	; 0x80000000
   15f1c:	mov	r3, r8
   15f20:	str	r4, [sp, #4]
   15f24:	mov	r2, r6
   15f28:	bl	169f4 <__assert_fail@plt+0x5a18>
   15f2c:	ldr	r2, [sp, #24]
   15f30:	ldr	r3, [sp, #28]
   15f34:	mov	r7, #1
   15f38:	mov	r9, #0
   15f3c:	mov	r4, #-2147483648	; 0x80000000
   15f40:	subs	r0, r0, r2
   15f44:	sbcs	r0, r1, r3
   15f48:	blt	15fa0 <__assert_fail@plt+0x4fc4>
   15f4c:	umull	r9, r0, r6, r2
   15f50:	ldr	r7, [sp, #4]
   15f54:	mla	r0, r6, r3, r0
   15f58:	mla	r4, r8, r2, r0
   15f5c:	cmp	r4, #0
   15f60:	blt	15fa0 <__assert_fail@plt+0x4fc4>
   15f64:	ldr	r3, [sp, #28]
   15f68:	mvn	r0, #0
   15f6c:	mvn	r1, #-2147483648	; 0x80000000
   15f70:	str	r7, [sp, #4]
   15f74:	mvn	r8, #0
   15f78:	mvn	r7, #-2147483648	; 0x80000000
   15f7c:	bl	16ac8 <__assert_fail@plt+0x5aec>
   15f80:	ldr	r2, [sp, #24]
   15f84:	ldr	r3, [sp, #28]
   15f88:	subs	r0, r0, r9
   15f8c:	mov	r6, #1
   15f90:	sbcs	r0, r1, r4
   15f94:	str	r6, [sp, #8]
   15f98:	bge	15fdc <__assert_fail@plt+0x5000>
   15f9c:	b	15ff8 <__assert_fail@plt+0x501c>
   15fa0:	mov	r0, #0
   15fa4:	mov	r1, #-2147483648	; 0x80000000
   15fa8:	mov	r2, r9
   15fac:	mov	r3, r4
   15fb0:	str	r7, [sp, #4]
   15fb4:	bl	169f4 <__assert_fail@plt+0x5a18>
   15fb8:	ldr	r2, [sp, #24]
   15fbc:	ldr	r3, [sp, #28]
   15fc0:	mov	r7, #1
   15fc4:	mov	r8, #0
   15fc8:	str	r7, [sp, #8]
   15fcc:	mov	r7, #-2147483648	; 0x80000000
   15fd0:	subs	r0, r0, r2
   15fd4:	sbcs	r0, r1, r3
   15fd8:	blt	1602c <__assert_fail@plt+0x5050>
   15fdc:	umull	r8, r0, r9, r2
   15fe0:	mla	r0, r9, r3, r0
   15fe4:	mla	r7, r4, r2, r0
   15fe8:	ldr	r0, [sp, #4]
   15fec:	cmp	r7, #0
   15ff0:	str	r0, [sp, #8]
   15ff4:	blt	1602c <__assert_fail@plt+0x5050>
   15ff8:	ldr	r3, [sp, #28]
   15ffc:	mvn	r0, #0
   16000:	mvn	r1, #-2147483648	; 0x80000000
   16004:	mvn	r4, #0
   16008:	mvn	r9, #-2147483648	; 0x80000000
   1600c:	bl	16ac8 <__assert_fail@plt+0x5aec>
   16010:	ldr	r2, [sp, #24]
   16014:	ldr	r3, [sp, #28]
   16018:	subs	r0, r0, r8
   1601c:	sbcs	r0, r1, r7
   16020:	bge	16064 <__assert_fail@plt+0x5088>
   16024:	mov	r8, #1
   16028:	b	1607c <__assert_fail@plt+0x50a0>
   1602c:	mov	r0, #0
   16030:	mov	r1, #-2147483648	; 0x80000000
   16034:	mov	r2, r8
   16038:	mov	r3, r7
   1603c:	bl	169f4 <__assert_fail@plt+0x5a18>
   16040:	ldr	r2, [sp, #24]
   16044:	ldr	r3, [sp, #28]
   16048:	subs	r0, r0, r2
   1604c:	sbcs	r0, r1, r3
   16050:	bge	16064 <__assert_fail@plt+0x5088>
   16054:	mov	r8, #1
   16058:	mov	r4, #0
   1605c:	mov	r9, #-2147483648	; 0x80000000
   16060:	b	160f4 <__assert_fail@plt+0x5118>
   16064:	umull	r4, r0, r8, r2
   16068:	mla	r0, r8, r3, r0
   1606c:	ldr	r8, [sp, #8]
   16070:	mla	r9, r7, r2, r0
   16074:	cmp	r9, #0
   16078:	blt	160f4 <__assert_fail@plt+0x5118>
   1607c:	ldr	r3, [sp, #28]
   16080:	mvn	r0, #0
   16084:	mvn	r1, #-2147483648	; 0x80000000
   16088:	mvn	r6, #0
   1608c:	mvn	r7, #-2147483648	; 0x80000000
   16090:	bl	16ac8 <__assert_fail@plt+0x5aec>
   16094:	ldr	r3, [sp, #24]
   16098:	ldr	ip, [sp, #28]
   1609c:	subs	r0, r0, r4
   160a0:	mov	r2, #1
   160a4:	sbcs	r0, r1, r9
   160a8:	blt	160bc <__assert_fail@plt+0x50e0>
   160ac:	umull	r6, r0, r4, r3
   160b0:	mov	r2, #0
   160b4:	mla	r0, r4, ip, r0
   160b8:	mla	r7, r9, r3, r0
   160bc:	ldr	r9, [sp, #12]
   160c0:	orr	r3, r2, r8
   160c4:	ldr	r1, [sp, #20]
   160c8:	ldr	r2, [sp, #16]
   160cc:	orr	r5, r3, r5
   160d0:	add	r0, r1, r2
   160d4:	str	r0, [sl]
   160d8:	ldrb	r0, [r1, r2]
   160dc:	cmp	r0, #0
   160e0:	orrne	r5, r5, #2
   160e4:	strd	r6, [r9]
   160e8:	mov	r0, r5
   160ec:	sub	sp, fp, #28
   160f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160f4:	mov	r0, #0
   160f8:	mov	r1, #-2147483648	; 0x80000000
   160fc:	mov	r2, r4
   16100:	mov	r3, r9
   16104:	bl	169f4 <__assert_fail@plt+0x5a18>
   16108:	ldr	r3, [sp, #24]
   1610c:	ldr	ip, [sp, #28]
   16110:	mov	r2, #1
   16114:	mov	r6, #0
   16118:	mov	r7, #-2147483648	; 0x80000000
   1611c:	subs	r0, r0, r3
   16120:	sbcs	r0, r1, ip
   16124:	bge	160ac <__assert_fail@plt+0x50d0>
   16128:	b	160bc <__assert_fail@plt+0x50e0>
   1612c:	ldr	r6, [sp, #8]
   16130:	mov	r0, #0
   16134:	mov	r1, #-2147483648	; 0x80000000
   16138:	mov	r3, r9
   1613c:	str	r4, [sp]
   16140:	mov	r2, r6
   16144:	bl	169f4 <__assert_fail@plt+0x5a18>
   16148:	ldr	r2, [sp, #24]
   1614c:	ldr	r3, [sp, #28]
   16150:	mov	r7, #1
   16154:	mov	r8, #-2147483648	; 0x80000000
   16158:	subs	r0, r0, r2
   1615c:	sbcs	r0, r1, r3
   16160:	mov	r0, #0
   16164:	str	r0, [sp, #4]
   16168:	blt	161c8 <__assert_fail@plt+0x51ec>
   1616c:	umull	r1, r0, r6, r2
   16170:	ldr	r7, [sp]
   16174:	mla	r0, r6, r3, r0
   16178:	str	r1, [sp, #4]
   1617c:	mla	r8, r9, r2, r0
   16180:	cmp	r8, #0
   16184:	blt	161c8 <__assert_fail@plt+0x51ec>
   16188:	ldr	r3, [sp, #28]
   1618c:	mvn	r0, #0
   16190:	mvn	r1, #-2147483648	; 0x80000000
   16194:	str	r7, [sp]
   16198:	mvn	r7, #0
   1619c:	mvn	r4, #-2147483648	; 0x80000000
   161a0:	bl	16ac8 <__assert_fail@plt+0x5aec>
   161a4:	mov	r6, #1
   161a8:	ldr	r2, [sp, #24]
   161ac:	ldr	r3, [sp, #28]
   161b0:	str	r6, [sp, #8]
   161b4:	ldr	r6, [sp, #4]
   161b8:	subs	r0, r0, r6
   161bc:	sbcs	r0, r1, r8
   161c0:	bge	16208 <__assert_fail@plt+0x522c>
   161c4:	b	16224 <__assert_fail@plt+0x5248>
   161c8:	ldr	r6, [sp, #4]
   161cc:	mov	r0, #0
   161d0:	mov	r1, #-2147483648	; 0x80000000
   161d4:	mov	r3, r8
   161d8:	str	r7, [sp]
   161dc:	mov	r2, r6
   161e0:	bl	169f4 <__assert_fail@plt+0x5a18>
   161e4:	ldr	r2, [sp, #24]
   161e8:	ldr	r3, [sp, #28]
   161ec:	mov	r7, #1
   161f0:	mov	r4, #-2147483648	; 0x80000000
   161f4:	str	r7, [sp, #8]
   161f8:	mov	r7, #0
   161fc:	subs	r0, r0, r2
   16200:	sbcs	r0, r1, r3
   16204:	blt	1625c <__assert_fail@plt+0x5280>
   16208:	umull	r7, r0, r6, r2
   1620c:	mla	r0, r6, r3, r0
   16210:	mla	r4, r8, r2, r0
   16214:	ldr	r0, [sp]
   16218:	cmp	r4, #0
   1621c:	str	r0, [sp, #8]
   16220:	blt	1625c <__assert_fail@plt+0x5280>
   16224:	ldr	r3, [sp, #28]
   16228:	mvn	r0, #0
   1622c:	mvn	r1, #-2147483648	; 0x80000000
   16230:	mvn	r9, #0
   16234:	mvn	r8, #-2147483648	; 0x80000000
   16238:	bl	16ac8 <__assert_fail@plt+0x5aec>
   1623c:	ldr	r2, [sp, #24]
   16240:	ldr	r3, [sp, #28]
   16244:	subs	r0, r0, r7
   16248:	sbcs	r0, r1, r4
   1624c:	bge	16298 <__assert_fail@plt+0x52bc>
   16250:	mov	r0, #1
   16254:	str	r0, [sp, #8]
   16258:	b	162ac <__assert_fail@plt+0x52d0>
   1625c:	mov	r0, #0
   16260:	mov	r1, #-2147483648	; 0x80000000
   16264:	mov	r2, r7
   16268:	mov	r3, r4
   1626c:	bl	169f4 <__assert_fail@plt+0x5a18>
   16270:	ldr	r2, [sp, #24]
   16274:	ldr	r3, [sp, #28]
   16278:	subs	r0, r0, r2
   1627c:	sbcs	r0, r1, r3
   16280:	bge	16298 <__assert_fail@plt+0x52bc>
   16284:	mov	r0, #1
   16288:	mov	r9, #0
   1628c:	mov	r8, #-2147483648	; 0x80000000
   16290:	str	r0, [sp, #8]
   16294:	b	162e4 <__assert_fail@plt+0x5308>
   16298:	umull	r9, r0, r7, r2
   1629c:	mla	r0, r7, r3, r0
   162a0:	mla	r8, r4, r2, r0
   162a4:	cmp	r8, #0
   162a8:	blt	162e4 <__assert_fail@plt+0x5308>
   162ac:	ldr	r3, [sp, #28]
   162b0:	mvn	r0, #0
   162b4:	mvn	r1, #-2147483648	; 0x80000000
   162b8:	mvn	r4, #0
   162bc:	mvn	r7, #-2147483648	; 0x80000000
   162c0:	bl	16ac8 <__assert_fail@plt+0x5aec>
   162c4:	ldr	r2, [sp, #24]
   162c8:	ldr	r3, [sp, #28]
   162cc:	subs	r0, r0, r9
   162d0:	sbcs	r0, r1, r8
   162d4:	bge	16320 <__assert_fail@plt+0x5344>
   162d8:	mov	r0, #1
   162dc:	str	r0, [sp, #8]
   162e0:	b	16334 <__assert_fail@plt+0x5358>
   162e4:	mov	r0, #0
   162e8:	mov	r1, #-2147483648	; 0x80000000
   162ec:	mov	r2, r9
   162f0:	mov	r3, r8
   162f4:	bl	169f4 <__assert_fail@plt+0x5a18>
   162f8:	ldr	r2, [sp, #24]
   162fc:	ldr	r3, [sp, #28]
   16300:	subs	r0, r0, r2
   16304:	sbcs	r0, r1, r3
   16308:	bge	16320 <__assert_fail@plt+0x5344>
   1630c:	mov	r0, #1
   16310:	mov	r4, #0
   16314:	mov	r7, #-2147483648	; 0x80000000
   16318:	str	r0, [sp, #8]
   1631c:	b	1636c <__assert_fail@plt+0x5390>
   16320:	umull	r4, r0, r9, r2
   16324:	mla	r0, r9, r3, r0
   16328:	mla	r7, r8, r2, r0
   1632c:	cmp	r7, #0
   16330:	blt	1636c <__assert_fail@plt+0x5390>
   16334:	ldr	r3, [sp, #28]
   16338:	mvn	r0, #0
   1633c:	mvn	r1, #-2147483648	; 0x80000000
   16340:	mvn	r8, #0
   16344:	mvn	r9, #-2147483648	; 0x80000000
   16348:	bl	16ac8 <__assert_fail@plt+0x5aec>
   1634c:	ldr	r2, [sp, #24]
   16350:	ldr	r3, [sp, #28]
   16354:	subs	r0, r0, r4
   16358:	sbcs	r0, r1, r7
   1635c:	bge	163a8 <__assert_fail@plt+0x53cc>
   16360:	mov	r0, #1
   16364:	str	r0, [sp, #8]
   16368:	b	163bc <__assert_fail@plt+0x53e0>
   1636c:	mov	r0, #0
   16370:	mov	r1, #-2147483648	; 0x80000000
   16374:	mov	r2, r4
   16378:	mov	r3, r7
   1637c:	bl	169f4 <__assert_fail@plt+0x5a18>
   16380:	ldr	r2, [sp, #24]
   16384:	ldr	r3, [sp, #28]
   16388:	subs	r0, r0, r2
   1638c:	sbcs	r0, r1, r3
   16390:	bge	163a8 <__assert_fail@plt+0x53cc>
   16394:	mov	r0, #1
   16398:	mov	r8, #0
   1639c:	mov	r9, #-2147483648	; 0x80000000
   163a0:	str	r0, [sp, #8]
   163a4:	b	163f8 <__assert_fail@plt+0x541c>
   163a8:	umull	r8, r0, r4, r2
   163ac:	mla	r0, r4, r3, r0
   163b0:	mla	r9, r7, r2, r0
   163b4:	cmp	r9, #0
   163b8:	blt	163f8 <__assert_fail@plt+0x541c>
   163bc:	ldr	r3, [sp, #28]
   163c0:	mvn	r0, #0
   163c4:	mvn	r1, #-2147483648	; 0x80000000
   163c8:	mvn	r4, #0
   163cc:	mvn	r6, #-2147483648	; 0x80000000
   163d0:	bl	16ac8 <__assert_fail@plt+0x5aec>
   163d4:	ldr	r2, [sp, #24]
   163d8:	ldr	r3, [sp, #28]
   163dc:	subs	r0, r0, r8
   163e0:	sbcs	r0, r1, r9
   163e4:	bge	16438 <__assert_fail@plt+0x545c>
   163e8:	ldr	r9, [sp, #12]
   163ec:	mov	r0, #1
   163f0:	str	r0, [sp, #8]
   163f4:	b	16450 <__assert_fail@plt+0x5474>
   163f8:	mov	r0, #0
   163fc:	mov	r1, #-2147483648	; 0x80000000
   16400:	mov	r2, r8
   16404:	mov	r3, r9
   16408:	bl	169f4 <__assert_fail@plt+0x5a18>
   1640c:	ldr	r2, [sp, #24]
   16410:	ldr	r3, [sp, #28]
   16414:	subs	r0, r0, r2
   16418:	sbcs	r0, r1, r3
   1641c:	bge	16438 <__assert_fail@plt+0x545c>
   16420:	ldr	r9, [sp, #12]
   16424:	mov	r0, #1
   16428:	mov	r4, #0
   1642c:	mov	r6, #-2147483648	; 0x80000000
   16430:	str	r0, [sp, #8]
   16434:	b	1649c <__assert_fail@plt+0x54c0>
   16438:	umull	r4, r0, r8, r2
   1643c:	mla	r0, r8, r3, r0
   16440:	mla	r6, r9, r2, r0
   16444:	ldr	r9, [sp, #12]
   16448:	cmp	r6, #0
   1644c:	blt	1649c <__assert_fail@plt+0x54c0>
   16450:	ldr	r3, [sp, #28]
   16454:	mvn	r0, #0
   16458:	mvn	r1, #-2147483648	; 0x80000000
   1645c:	mov	r8, r6
   16460:	mvn	r6, #0
   16464:	mvn	r7, #-2147483648	; 0x80000000
   16468:	bl	16ac8 <__assert_fail@plt+0x5aec>
   1646c:	ldr	r3, [sp, #24]
   16470:	ldr	ip, [sp, #28]
   16474:	subs	r0, r0, r4
   16478:	mov	r2, #1
   1647c:	sbcs	r0, r1, r8
   16480:	blt	16494 <__assert_fail@plt+0x54b8>
   16484:	umull	r6, r0, r4, r3
   16488:	mov	r2, #0
   1648c:	mla	r0, r4, ip, r0
   16490:	mla	r7, r8, r3, r0
   16494:	ldr	r0, [sp, #8]
   16498:	b	155e0 <__assert_fail@plt+0x4604>
   1649c:	mov	r0, #0
   164a0:	mov	r1, #-2147483648	; 0x80000000
   164a4:	mov	r2, r4
   164a8:	mov	r3, r6
   164ac:	bl	169f4 <__assert_fail@plt+0x5a18>
   164b0:	ldr	r3, [sp, #24]
   164b4:	ldr	ip, [sp, #28]
   164b8:	mov	r8, r6
   164bc:	mov	r2, #1
   164c0:	mov	r6, #0
   164c4:	mov	r7, #-2147483648	; 0x80000000
   164c8:	subs	r0, r0, r3
   164cc:	sbcs	r0, r1, ip
   164d0:	bge	16484 <__assert_fail@plt+0x54a8>
   164d4:	b	16494 <__assert_fail@plt+0x54b8>
   164d8:	movw	r0, #31165	; 0x79bd
   164dc:	movw	r1, #31203	; 0x79e3
   164e0:	movw	r3, #31219	; 0x79f3
   164e4:	mov	r2, #85	; 0x55
   164e8:	movt	r0, #1
   164ec:	movt	r1, #1
   164f0:	movt	r3, #1
   164f4:	bl	10fdc <__assert_fail@plt>
   164f8:	clz	r2, r1
   164fc:	clz	r3, r0
   16500:	lsr	r2, r2, #5
   16504:	lsr	r3, r3, #5
   16508:	orrs	r2, r3, r2
   1650c:	movwne	r1, #1
   16510:	movwne	r0, #1
   16514:	cmp	r1, #0
   16518:	beq	16548 <__assert_fail@plt+0x556c>
   1651c:	mvn	r2, #-2147483648	; 0x80000000
   16520:	udiv	r2, r2, r1
   16524:	cmp	r2, r0
   16528:	bcs	16548 <__assert_fail@plt+0x556c>
   1652c:	push	{fp, lr}
   16530:	mov	fp, sp
   16534:	bl	10f10 <__errno_location@plt>
   16538:	mov	r1, #12
   1653c:	str	r1, [r0]
   16540:	mov	r0, #0
   16544:	pop	{fp, pc}
   16548:	b	10d90 <calloc@plt>
   1654c:	cmp	r0, #0
   16550:	movweq	r0, #1
   16554:	cmn	r0, #1
   16558:	ble	16560 <__assert_fail@plt+0x5584>
   1655c:	b	10ea4 <malloc@plt>
   16560:	push	{fp, lr}
   16564:	mov	fp, sp
   16568:	bl	10f10 <__errno_location@plt>
   1656c:	mov	r1, #12
   16570:	str	r1, [r0]
   16574:	mov	r0, #0
   16578:	pop	{fp, pc}
   1657c:	push	{fp, lr}
   16580:	mov	fp, sp
   16584:	cmp	r0, #0
   16588:	beq	165a4 <__assert_fail@plt+0x55c8>
   1658c:	cmp	r1, #0
   16590:	beq	165b0 <__assert_fail@plt+0x55d4>
   16594:	cmn	r1, #1
   16598:	ble	165bc <__assert_fail@plt+0x55e0>
   1659c:	pop	{fp, lr}
   165a0:	b	10e20 <realloc@plt>
   165a4:	mov	r0, r1
   165a8:	pop	{fp, lr}
   165ac:	b	1654c <__assert_fail@plt+0x5570>
   165b0:	bl	1674c <__assert_fail@plt+0x5770>
   165b4:	mov	r0, #0
   165b8:	pop	{fp, pc}
   165bc:	bl	10f10 <__errno_location@plt>
   165c0:	mov	r1, #12
   165c4:	str	r1, [r0]
   165c8:	mov	r0, #0
   165cc:	pop	{fp, pc}
   165d0:	push	{r4, r5, r6, sl, fp, lr}
   165d4:	add	fp, sp, #16
   165d8:	mov	r4, r0
   165dc:	bl	10e74 <__fpending@plt>
   165e0:	ldr	r6, [r4]
   165e4:	mov	r5, r0
   165e8:	mov	r0, r4
   165ec:	bl	16654 <__assert_fail@plt+0x5678>
   165f0:	tst	r6, #32
   165f4:	bne	1662c <__assert_fail@plt+0x5650>
   165f8:	cmp	r0, #0
   165fc:	mov	r4, r0
   16600:	mvnne	r4, #0
   16604:	cmp	r5, #0
   16608:	bne	16638 <__assert_fail@plt+0x565c>
   1660c:	cmp	r0, #0
   16610:	beq	16638 <__assert_fail@plt+0x565c>
   16614:	bl	10f10 <__errno_location@plt>
   16618:	ldr	r0, [r0]
   1661c:	subs	r4, r0, #9
   16620:	mvnne	r4, #0
   16624:	mov	r0, r4
   16628:	pop	{r4, r5, r6, sl, fp, pc}
   1662c:	mvn	r4, #0
   16630:	cmp	r0, #0
   16634:	beq	16640 <__assert_fail@plt+0x5664>
   16638:	mov	r0, r4
   1663c:	pop	{r4, r5, r6, sl, fp, pc}
   16640:	bl	10f10 <__errno_location@plt>
   16644:	mov	r1, #0
   16648:	str	r1, [r0]
   1664c:	mov	r0, r4
   16650:	pop	{r4, r5, r6, sl, fp, pc}
   16654:	push	{r4, r5, r6, sl, fp, lr}
   16658:	add	fp, sp, #16
   1665c:	sub	sp, sp, #8
   16660:	mov	r4, r0
   16664:	bl	10f40 <fileno@plt>
   16668:	cmn	r0, #1
   1666c:	ble	166e0 <__assert_fail@plt+0x5704>
   16670:	mov	r0, r4
   16674:	bl	10ebc <__freading@plt>
   16678:	cmp	r0, #0
   1667c:	beq	166a8 <__assert_fail@plt+0x56cc>
   16680:	mov	r0, r4
   16684:	bl	10f40 <fileno@plt>
   16688:	mov	r1, #1
   1668c:	mov	r2, #0
   16690:	mov	r3, #0
   16694:	str	r1, [sp]
   16698:	bl	10e5c <lseek64@plt>
   1669c:	and	r0, r0, r1
   166a0:	cmn	r0, #1
   166a4:	beq	166e0 <__assert_fail@plt+0x5704>
   166a8:	mov	r0, r4
   166ac:	bl	166f0 <__assert_fail@plt+0x5714>
   166b0:	cmp	r0, #0
   166b4:	beq	166e0 <__assert_fail@plt+0x5704>
   166b8:	bl	10f10 <__errno_location@plt>
   166bc:	ldr	r6, [r0]
   166c0:	mov	r5, r0
   166c4:	mov	r0, r4
   166c8:	bl	10f58 <fclose@plt>
   166cc:	cmp	r6, #0
   166d0:	strne	r6, [r5]
   166d4:	mvnne	r0, #0
   166d8:	sub	sp, fp, #16
   166dc:	pop	{r4, r5, r6, sl, fp, pc}
   166e0:	mov	r0, r4
   166e4:	sub	sp, fp, #16
   166e8:	pop	{r4, r5, r6, sl, fp, lr}
   166ec:	b	10f58 <fclose@plt>
   166f0:	push	{r4, sl, fp, lr}
   166f4:	add	fp, sp, #8
   166f8:	sub	sp, sp, #8
   166fc:	mov	r4, r0
   16700:	cmp	r0, #0
   16704:	beq	16720 <__assert_fail@plt+0x5744>
   16708:	mov	r0, r4
   1670c:	bl	10ebc <__freading@plt>
   16710:	cmp	r0, #0
   16714:	ldrbne	r0, [r4, #1]
   16718:	tstne	r0, #1
   1671c:	bne	16730 <__assert_fail@plt+0x5754>
   16720:	mov	r0, r4
   16724:	sub	sp, fp, #8
   16728:	pop	{r4, sl, fp, lr}
   1672c:	b	10dc0 <fflush@plt>
   16730:	mov	r0, #1
   16734:	mov	r2, #0
   16738:	mov	r3, #0
   1673c:	str	r0, [sp]
   16740:	mov	r0, r4
   16744:	bl	16774 <__assert_fail@plt+0x5798>
   16748:	b	16720 <__assert_fail@plt+0x5744>
   1674c:	push	{r4, r5, r6, sl, fp, lr}
   16750:	add	fp, sp, #16
   16754:	mov	r4, r0
   16758:	bl	10f10 <__errno_location@plt>
   1675c:	ldr	r6, [r0]
   16760:	mov	r5, r0
   16764:	mov	r0, r4
   16768:	bl	10dcc <free@plt>
   1676c:	str	r6, [r5]
   16770:	pop	{r4, r5, r6, sl, fp, pc}
   16774:	push	{r4, r5, r6, r7, fp, lr}
   16778:	add	fp, sp, #16
   1677c:	sub	sp, sp, #8
   16780:	mov	r4, r0
   16784:	ldr	r0, [r0, #4]
   16788:	mov	r5, r3
   1678c:	mov	r6, r2
   16790:	ldr	r1, [r4, #8]
   16794:	cmp	r1, r0
   16798:	bne	167b4 <__assert_fail@plt+0x57d8>
   1679c:	ldrd	r0, [r4, #16]
   167a0:	cmp	r1, r0
   167a4:	bne	167b4 <__assert_fail@plt+0x57d8>
   167a8:	ldr	r0, [r4, #36]	; 0x24
   167ac:	cmp	r0, #0
   167b0:	beq	167cc <__assert_fail@plt+0x57f0>
   167b4:	mov	r0, r4
   167b8:	mov	r2, r6
   167bc:	mov	r3, r5
   167c0:	sub	sp, fp, #16
   167c4:	pop	{r4, r5, r6, r7, fp, lr}
   167c8:	b	10f64 <fseeko64@plt>
   167cc:	ldr	r7, [fp, #8]
   167d0:	mov	r0, r4
   167d4:	bl	10f40 <fileno@plt>
   167d8:	mov	r2, r6
   167dc:	mov	r3, r5
   167e0:	str	r7, [sp]
   167e4:	bl	10e5c <lseek64@plt>
   167e8:	and	r2, r0, r1
   167ec:	cmn	r2, #1
   167f0:	mvneq	r0, #0
   167f4:	subeq	sp, fp, #16
   167f8:	popeq	{r4, r5, r6, r7, fp, pc}
   167fc:	strd	r0, [r4, #80]	; 0x50
   16800:	ldr	r0, [r4]
   16804:	bic	r0, r0, #16
   16808:	str	r0, [r4]
   1680c:	mov	r0, #0
   16810:	sub	sp, fp, #16
   16814:	pop	{r4, r5, r6, r7, fp, pc}
   16818:	push	{fp, lr}
   1681c:	mov	fp, sp
   16820:	mov	r0, #14
   16824:	bl	10f88 <nl_langinfo@plt>
   16828:	movw	r1, #29708	; 0x740c
   1682c:	cmp	r0, #0
   16830:	movt	r1, #1
   16834:	movne	r1, r0
   16838:	movw	r0, #31297	; 0x7a41
   1683c:	ldrb	r2, [r1]
   16840:	movt	r0, #1
   16844:	cmp	r2, #0
   16848:	movne	r0, r1
   1684c:	pop	{fp, pc}
   16850:	push	{r4, r5, r6, r7, fp, lr}
   16854:	add	fp, sp, #16
   16858:	sub	sp, sp, #8
   1685c:	add	r5, sp, #4
   16860:	cmp	r0, #0
   16864:	mov	r7, r2
   16868:	mov	r4, r1
   1686c:	movne	r5, r0
   16870:	mov	r0, r5
   16874:	bl	10e80 <mbrtowc@plt>
   16878:	mov	r6, r0
   1687c:	cmp	r7, #0
   16880:	beq	168a4 <__assert_fail@plt+0x58c8>
   16884:	cmn	r6, #2
   16888:	bcc	168a4 <__assert_fail@plt+0x58c8>
   1688c:	mov	r0, #0
   16890:	bl	168ec <__assert_fail@plt+0x5910>
   16894:	cmp	r0, #0
   16898:	ldrbeq	r0, [r4]
   1689c:	moveq	r6, #1
   168a0:	streq	r0, [r5]
   168a4:	mov	r0, r6
   168a8:	sub	sp, fp, #16
   168ac:	pop	{r4, r5, r6, r7, fp, pc}
   168b0:	cmp	r2, #0
   168b4:	beq	168e4 <__assert_fail@plt+0x5908>
   168b8:	mvn	r3, #0
   168bc:	udiv	r3, r3, r2
   168c0:	cmp	r3, r1
   168c4:	bcs	168e4 <__assert_fail@plt+0x5908>
   168c8:	push	{fp, lr}
   168cc:	mov	fp, sp
   168d0:	bl	10f10 <__errno_location@plt>
   168d4:	mov	r1, #12
   168d8:	str	r1, [r0]
   168dc:	mov	r0, #0
   168e0:	pop	{fp, pc}
   168e4:	mul	r1, r2, r1
   168e8:	b	1657c <__assert_fail@plt+0x55a0>
   168ec:	push	{r4, sl, fp, lr}
   168f0:	add	fp, sp, #8
   168f4:	sub	sp, sp, #264	; 0x108
   168f8:	add	r1, sp, #7
   168fc:	movw	r2, #257	; 0x101
   16900:	bl	16950 <__assert_fail@plt+0x5974>
   16904:	mov	r4, #0
   16908:	cmp	r0, #0
   1690c:	bne	16944 <__assert_fail@plt+0x5968>
   16910:	movw	r1, #31303	; 0x7a47
   16914:	add	r0, sp, #7
   16918:	movt	r1, #1
   1691c:	bl	10db4 <strcmp@plt>
   16920:	cmp	r0, #0
   16924:	beq	16944 <__assert_fail@plt+0x5968>
   16928:	movw	r1, #31305	; 0x7a49
   1692c:	add	r0, sp, #7
   16930:	movt	r1, #1
   16934:	bl	10db4 <strcmp@plt>
   16938:	mov	r4, r0
   1693c:	cmp	r0, #0
   16940:	movwne	r4, #1
   16944:	mov	r0, r4
   16948:	sub	sp, fp, #8
   1694c:	pop	{r4, sl, fp, pc}
   16950:	push	{r4, r5, r6, r7, fp, lr}
   16954:	add	fp, sp, #16
   16958:	mov	r4, r1
   1695c:	mov	r1, #0
   16960:	mov	r6, r2
   16964:	bl	10f70 <setlocale@plt>
   16968:	cmp	r0, #0
   1696c:	beq	1699c <__assert_fail@plt+0x59c0>
   16970:	mov	r7, r0
   16974:	bl	10ef8 <strlen@plt>
   16978:	cmp	r0, r6
   1697c:	bcs	169bc <__assert_fail@plt+0x59e0>
   16980:	add	r2, r0, #1
   16984:	mov	r0, r4
   16988:	mov	r1, r7
   1698c:	bl	10de4 <memcpy@plt>
   16990:	mov	r5, #0
   16994:	mov	r0, r5
   16998:	pop	{r4, r5, r6, r7, fp, pc}
   1699c:	cmp	r6, #0
   169a0:	mov	r5, #22
   169a4:	movne	r0, #0
   169a8:	strbne	r0, [r4]
   169ac:	movne	r0, r5
   169b0:	popne	{r4, r5, r6, r7, fp, pc}
   169b4:	mov	r0, r5
   169b8:	pop	{r4, r5, r6, r7, fp, pc}
   169bc:	mov	r5, #34	; 0x22
   169c0:	cmp	r6, #0
   169c4:	beq	169e4 <__assert_fail@plt+0x5a08>
   169c8:	sub	r6, r6, #1
   169cc:	mov	r0, r4
   169d0:	mov	r1, r7
   169d4:	mov	r2, r6
   169d8:	bl	10de4 <memcpy@plt>
   169dc:	mov	r0, #0
   169e0:	strb	r0, [r4, r6]
   169e4:	mov	r0, r5
   169e8:	pop	{r4, r5, r6, r7, fp, pc}
   169ec:	mov	r1, #0
   169f0:	b	10f70 <setlocale@plt>
   169f4:	cmp	r3, #0
   169f8:	cmpeq	r2, #0
   169fc:	bne	16a20 <__assert_fail@plt+0x5a44>
   16a00:	cmp	r1, #0
   16a04:	movlt	r1, #-2147483648	; 0x80000000
   16a08:	movlt	r0, #0
   16a0c:	blt	16a1c <__assert_fail@plt+0x5a40>
   16a10:	cmpeq	r0, #0
   16a14:	mvnne	r1, #-2147483648	; 0x80000000
   16a18:	mvnne	r0, #0
   16a1c:	b	16b04 <__assert_fail@plt+0x5b28>
   16a20:	sub	sp, sp, #8
   16a24:	push	{sp, lr}
   16a28:	cmp	r1, #0
   16a2c:	blt	16a4c <__assert_fail@plt+0x5a70>
   16a30:	cmp	r3, #0
   16a34:	blt	16a80 <__assert_fail@plt+0x5aa4>
   16a38:	bl	16b14 <__assert_fail@plt+0x5b38>
   16a3c:	ldr	lr, [sp, #4]
   16a40:	add	sp, sp, #8
   16a44:	pop	{r2, r3}
   16a48:	bx	lr
   16a4c:	rsbs	r0, r0, #0
   16a50:	sbc	r1, r1, r1, lsl #1
   16a54:	cmp	r3, #0
   16a58:	blt	16aa4 <__assert_fail@plt+0x5ac8>
   16a5c:	bl	16b14 <__assert_fail@plt+0x5b38>
   16a60:	ldr	lr, [sp, #4]
   16a64:	add	sp, sp, #8
   16a68:	pop	{r2, r3}
   16a6c:	rsbs	r0, r0, #0
   16a70:	sbc	r1, r1, r1, lsl #1
   16a74:	rsbs	r2, r2, #0
   16a78:	sbc	r3, r3, r3, lsl #1
   16a7c:	bx	lr
   16a80:	rsbs	r2, r2, #0
   16a84:	sbc	r3, r3, r3, lsl #1
   16a88:	bl	16b14 <__assert_fail@plt+0x5b38>
   16a8c:	ldr	lr, [sp, #4]
   16a90:	add	sp, sp, #8
   16a94:	pop	{r2, r3}
   16a98:	rsbs	r0, r0, #0
   16a9c:	sbc	r1, r1, r1, lsl #1
   16aa0:	bx	lr
   16aa4:	rsbs	r2, r2, #0
   16aa8:	sbc	r3, r3, r3, lsl #1
   16aac:	bl	16b14 <__assert_fail@plt+0x5b38>
   16ab0:	ldr	lr, [sp, #4]
   16ab4:	add	sp, sp, #8
   16ab8:	pop	{r2, r3}
   16abc:	rsbs	r2, r2, #0
   16ac0:	sbc	r3, r3, r3, lsl #1
   16ac4:	bx	lr
   16ac8:	cmp	r3, #0
   16acc:	cmpeq	r2, #0
   16ad0:	bne	16ae8 <__assert_fail@plt+0x5b0c>
   16ad4:	cmp	r1, #0
   16ad8:	cmpeq	r0, #0
   16adc:	mvnne	r1, #0
   16ae0:	mvnne	r0, #0
   16ae4:	b	16b04 <__assert_fail@plt+0x5b28>
   16ae8:	sub	sp, sp, #8
   16aec:	push	{sp, lr}
   16af0:	bl	16b14 <__assert_fail@plt+0x5b38>
   16af4:	ldr	lr, [sp, #4]
   16af8:	add	sp, sp, #8
   16afc:	pop	{r2, r3}
   16b00:	bx	lr
   16b04:	push	{r1, lr}
   16b08:	mov	r0, #8
   16b0c:	bl	10da8 <raise@plt>
   16b10:	pop	{r1, pc}
   16b14:	cmp	r1, r3
   16b18:	cmpeq	r0, r2
   16b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b20:	mov	r4, r0
   16b24:	movcc	r0, #0
   16b28:	mov	r5, r1
   16b2c:	ldr	lr, [sp, #36]	; 0x24
   16b30:	movcc	r1, r0
   16b34:	bcc	16c30 <__assert_fail@plt+0x5c54>
   16b38:	cmp	r3, #0
   16b3c:	clzeq	ip, r2
   16b40:	clzne	ip, r3
   16b44:	addeq	ip, ip, #32
   16b48:	cmp	r5, #0
   16b4c:	clzeq	r1, r4
   16b50:	addeq	r1, r1, #32
   16b54:	clzne	r1, r5
   16b58:	sub	ip, ip, r1
   16b5c:	sub	sl, ip, #32
   16b60:	lsl	r9, r3, ip
   16b64:	rsb	fp, ip, #32
   16b68:	orr	r9, r9, r2, lsl sl
   16b6c:	orr	r9, r9, r2, lsr fp
   16b70:	lsl	r8, r2, ip
   16b74:	cmp	r5, r9
   16b78:	cmpeq	r4, r8
   16b7c:	movcc	r0, #0
   16b80:	movcc	r1, r0
   16b84:	bcc	16ba0 <__assert_fail@plt+0x5bc4>
   16b88:	mov	r0, #1
   16b8c:	subs	r4, r4, r8
   16b90:	lsl	r1, r0, sl
   16b94:	orr	r1, r1, r0, lsr fp
   16b98:	lsl	r0, r0, ip
   16b9c:	sbc	r5, r5, r9
   16ba0:	cmp	ip, #0
   16ba4:	beq	16c30 <__assert_fail@plt+0x5c54>
   16ba8:	lsr	r6, r8, #1
   16bac:	orr	r6, r6, r9, lsl #31
   16bb0:	lsr	r7, r9, #1
   16bb4:	mov	r2, ip
   16bb8:	b	16bdc <__assert_fail@plt+0x5c00>
   16bbc:	subs	r3, r4, r6
   16bc0:	sbc	r8, r5, r7
   16bc4:	adds	r3, r3, r3
   16bc8:	adc	r8, r8, r8
   16bcc:	adds	r4, r3, #1
   16bd0:	adc	r5, r8, #0
   16bd4:	subs	r2, r2, #1
   16bd8:	beq	16bf8 <__assert_fail@plt+0x5c1c>
   16bdc:	cmp	r5, r7
   16be0:	cmpeq	r4, r6
   16be4:	bcs	16bbc <__assert_fail@plt+0x5be0>
   16be8:	adds	r4, r4, r4
   16bec:	adc	r5, r5, r5
   16bf0:	subs	r2, r2, #1
   16bf4:	bne	16bdc <__assert_fail@plt+0x5c00>
   16bf8:	lsr	r3, r4, ip
   16bfc:	orr	r3, r3, r5, lsl fp
   16c00:	lsr	r2, r5, ip
   16c04:	orr	r3, r3, r5, lsr sl
   16c08:	adds	r0, r0, r4
   16c0c:	mov	r4, r3
   16c10:	lsl	r3, r2, ip
   16c14:	orr	r3, r3, r4, lsl sl
   16c18:	lsl	ip, r4, ip
   16c1c:	orr	r3, r3, r4, lsr fp
   16c20:	adc	r1, r1, r5
   16c24:	subs	r0, r0, ip
   16c28:	mov	r5, r2
   16c2c:	sbc	r1, r1, r3
   16c30:	cmp	lr, #0
   16c34:	strdne	r4, [lr]
   16c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c40:	mov	r7, r0
   16c44:	ldr	r6, [pc, #72]	; 16c94 <__assert_fail@plt+0x5cb8>
   16c48:	ldr	r5, [pc, #72]	; 16c98 <__assert_fail@plt+0x5cbc>
   16c4c:	add	r6, pc, r6
   16c50:	add	r5, pc, r5
   16c54:	sub	r6, r6, r5
   16c58:	mov	r8, r1
   16c5c:	mov	r9, r2
   16c60:	bl	10d70 <calloc@plt-0x20>
   16c64:	asrs	r6, r6, #2
   16c68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c6c:	mov	r4, #0
   16c70:	add	r4, r4, #1
   16c74:	ldr	r3, [r5], #4
   16c78:	mov	r2, r9
   16c7c:	mov	r1, r8
   16c80:	mov	r0, r7
   16c84:	blx	r3
   16c88:	cmp	r6, r4
   16c8c:	bne	16c70 <__assert_fail@plt+0x5c94>
   16c90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c94:			; <UNDEFINED> instruction: 0x000112b8
   16c98:			; <UNDEFINED> instruction: 0x000112b0
   16c9c:	bx	lr
   16ca0:	ldr	r3, [pc, #12]	; 16cb4 <__assert_fail@plt+0x5cd8>
   16ca4:	mov	r1, #0
   16ca8:	add	r3, pc, r3
   16cac:	ldr	r2, [r3]
   16cb0:	b	10f1c <__cxa_atexit@plt>
   16cb4:	andeq	r1, r1, ip, lsr #8

Disassembly of section .fini:

00016cb8 <.fini>:
   16cb8:	push	{r3, lr}
   16cbc:	pop	{r3, pc}
