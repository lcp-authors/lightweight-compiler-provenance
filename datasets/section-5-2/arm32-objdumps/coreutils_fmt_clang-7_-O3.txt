
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010e34 <.init>:
   10e34:	push	{r3, lr}
   10e38:	bl	1110c <__assert_fail@plt+0x48>
   10e3c:	pop	{r3, pc}

Disassembly of section .plt:

00010e40 <calloc@plt-0x14>:
   10e40:	push	{lr}		; (str lr, [sp, #-4]!)
   10e44:	ldr	lr, [pc, #4]	; 10e50 <calloc@plt-0x4>
   10e48:	add	lr, pc, lr
   10e4c:	ldr	pc, [lr, #8]!
   10e50:			; <UNDEFINED> instruction: 0x000181b0

00010e54 <calloc@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #432]!	; 0x1b0

00010e60 <fputs_unlocked@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #424]!	; 0x1a8

00010e6c <raise@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #416]!	; 0x1a0

00010e78 <strcmp@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #408]!	; 0x198

00010e84 <posix_fadvise64@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #400]!	; 0x190

00010e90 <fflush@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #392]!	; 0x188

00010e9c <memmove@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #384]!	; 0x180

00010ea8 <free@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #376]!	; 0x178

00010eb4 <_exit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #368]!	; 0x170

00010ec0 <memcpy@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #360]!	; 0x168

00010ecc <__strtoull_internal@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #352]!	; 0x160

00010ed8 <mbsinit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #344]!	; 0x158

00010ee4 <fwrite_unlocked@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #336]!	; 0x150

00010ef0 <memcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #328]!	; 0x148

00010efc <dcgettext@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #320]!	; 0x140

00010f08 <realloc@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #312]!	; 0x138

00010f14 <textdomain@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #304]!	; 0x130

00010f20 <iswprint@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #296]!	; 0x128

00010f2c <fwrite@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #288]!	; 0x120

00010f38 <lseek64@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #280]!	; 0x118

00010f44 <__ctype_get_mb_cur_max@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #272]!	; 0x110

00010f50 <__fpending@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #264]!	; 0x108

00010f5c <mbrtowc@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #256]!	; 0x100

00010f68 <error@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #248]!	; 0xf8

00010f74 <malloc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #240]!	; 0xf0

00010f80 <__libc_start_main@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #232]!	; 0xe8

00010f8c <__freading@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #224]!	; 0xe0

00010f98 <__gmon_start__@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #216]!	; 0xd8

00010fa4 <getopt_long@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #208]!	; 0xd0

00010fb0 <__ctype_b_loc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #200]!	; 0xc8

00010fbc <exit@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #192]!	; 0xc0

00010fc8 <strlen@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #184]!	; 0xb8

00010fd4 <strchr@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #176]!	; 0xb0

00010fe0 <__errno_location@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #168]!	; 0xa8

00010fec <__cxa_atexit@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #160]!	; 0xa0

00010ff8 <memset@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #152]!	; 0x98

00011004 <__printf_chk@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #144]!	; 0x90

00011010 <fileno@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #136]!	; 0x88

0001101c <__fprintf_chk@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #128]!	; 0x80

00011028 <memchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #120]!	; 0x78

00011034 <fclose@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #112]!	; 0x70

00011040 <fseeko64@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #104]!	; 0x68

0001104c <__uflow@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #96]!	; 0x60

00011058 <__overflow@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #88]!	; 0x58

00011064 <setlocale@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #80]!	; 0x50

00011070 <strrchr@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #72]!	; 0x48

0001107c <nl_langinfo@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #64]!	; 0x40

00011088 <clearerr_unlocked@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #56]!	; 0x38

00011094 <fopen64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #48]!	; 0x30

000110a0 <bindtextdomain@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #40]!	; 0x28

000110ac <strncmp@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #24, 20	; 0x18000
   110b4:	ldr	pc, [ip, #32]!

000110b8 <abort@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #24, 20	; 0x18000
   110c0:	ldr	pc, [ip, #24]!

000110c4 <__assert_fail@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #24, 20	; 0x18000
   110cc:	ldr	pc, [ip, #16]!

Disassembly of section .text:

000110d0 <.text>:
   110d0:	mov	fp, #0
   110d4:	mov	lr, #0
   110d8:	pop	{r1}		; (ldr r1, [sp], #4)
   110dc:	mov	r2, sp
   110e0:	push	{r2}		; (str r2, [sp, #-4]!)
   110e4:	push	{r0}		; (str r0, [sp, #-4]!)
   110e8:	ldr	ip, [pc, #16]	; 11100 <__assert_fail@plt+0x3c>
   110ec:	push	{ip}		; (str ip, [sp, #-4]!)
   110f0:	ldr	r0, [pc, #12]	; 11104 <__assert_fail@plt+0x40>
   110f4:	ldr	r3, [pc, #12]	; 11108 <__assert_fail@plt+0x44>
   110f8:	bl	10f80 <__libc_start_main@plt>
   110fc:	bl	110b8 <abort@plt>
   11100:	andeq	r7, r1, r8, ror #8
   11104:	andeq	r1, r1, r4, ror r4
   11108:	andeq	r7, r1, r8, lsl #8
   1110c:	ldr	r3, [pc, #20]	; 11128 <__assert_fail@plt+0x64>
   11110:	ldr	r2, [pc, #20]	; 1112c <__assert_fail@plt+0x68>
   11114:	add	r3, pc, r3
   11118:	ldr	r2, [r3, r2]
   1111c:	cmp	r2, #0
   11120:	bxeq	lr
   11124:	b	10f98 <__gmon_start__@plt>
   11128:	andeq	r7, r1, r4, ror #29
   1112c:	andeq	r0, r0, r0, ror #1
   11130:	ldr	r0, [pc, #24]	; 11150 <__assert_fail@plt+0x8c>
   11134:	ldr	r3, [pc, #24]	; 11154 <__assert_fail@plt+0x90>
   11138:	cmp	r3, r0
   1113c:	bxeq	lr
   11140:	ldr	r3, [pc, #16]	; 11158 <__assert_fail@plt+0x94>
   11144:	cmp	r3, #0
   11148:	bxeq	lr
   1114c:	bx	r3
   11150:	andeq	r9, r2, r8, lsr r1
   11154:	andeq	r9, r2, r8, lsr r1
   11158:	andeq	r0, r0, r0
   1115c:	ldr	r0, [pc, #36]	; 11188 <__assert_fail@plt+0xc4>
   11160:	ldr	r1, [pc, #36]	; 1118c <__assert_fail@plt+0xc8>
   11164:	sub	r1, r1, r0
   11168:	asr	r1, r1, #2
   1116c:	add	r1, r1, r1, lsr #31
   11170:	asrs	r1, r1, #1
   11174:	bxeq	lr
   11178:	ldr	r3, [pc, #16]	; 11190 <__assert_fail@plt+0xcc>
   1117c:	cmp	r3, #0
   11180:	bxeq	lr
   11184:	bx	r3
   11188:	andeq	r9, r2, r8, lsr r1
   1118c:	andeq	r9, r2, r8, lsr r1
   11190:	andeq	r0, r0, r0
   11194:	push	{r4, lr}
   11198:	ldr	r4, [pc, #24]	; 111b8 <__assert_fail@plt+0xf4>
   1119c:	ldrb	r3, [r4]
   111a0:	cmp	r3, #0
   111a4:	popne	{r4, pc}
   111a8:	bl	11130 <__assert_fail@plt+0x6c>
   111ac:	mov	r3, #1
   111b0:	strb	r3, [r4]
   111b4:	pop	{r4, pc}
   111b8:	andeq	r9, r2, ip, asr r1
   111bc:	b	1115c <__assert_fail@plt+0x98>
   111c0:	push	{fp, lr}
   111c4:	mov	fp, sp
   111c8:	sub	sp, sp, #56	; 0x38
   111cc:	mov	r4, r0
   111d0:	cmp	r0, #0
   111d4:	bne	11430 <__assert_fail@plt+0x36c>
   111d8:	movw	r1, #29883	; 0x74bb
   111dc:	mov	r0, #0
   111e0:	mov	r2, #5
   111e4:	movt	r1, #1
   111e8:	bl	10efc <dcgettext@plt>
   111ec:	mov	r1, r0
   111f0:	movw	r0, #4760	; 0x1298
   111f4:	movt	r0, #3
   111f8:	ldr	r2, [r0]
   111fc:	mov	r0, #1
   11200:	bl	11004 <__printf_chk@plt>
   11204:	movw	r1, #29925	; 0x74e5
   11208:	mov	r0, #0
   1120c:	mov	r2, #5
   11210:	movt	r1, #1
   11214:	bl	10efc <dcgettext@plt>
   11218:	movw	r7, #37204	; 0x9154
   1121c:	movt	r7, #2
   11220:	ldr	r1, [r7]
   11224:	bl	10e60 <fputs_unlocked@plt>
   11228:	movw	r1, #30952	; 0x78e8
   1122c:	mov	r0, #0
   11230:	mov	r2, #5
   11234:	movt	r1, #1
   11238:	bl	10efc <dcgettext@plt>
   1123c:	ldr	r1, [r7]
   11240:	bl	10e60 <fputs_unlocked@plt>
   11244:	movw	r1, #31008	; 0x7920
   11248:	mov	r0, #0
   1124c:	mov	r2, #5
   11250:	movt	r1, #1
   11254:	bl	10efc <dcgettext@plt>
   11258:	ldr	r1, [r7]
   1125c:	bl	10e60 <fputs_unlocked@plt>
   11260:	movw	r1, #30054	; 0x7566
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10efc <dcgettext@plt>
   11274:	ldr	r1, [r7]
   11278:	bl	10e60 <fputs_unlocked@plt>
   1127c:	movw	r1, #30332	; 0x767c
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	movt	r1, #1
   1128c:	bl	10efc <dcgettext@plt>
   11290:	ldr	r1, [r7]
   11294:	bl	10e60 <fputs_unlocked@plt>
   11298:	movw	r1, #30618	; 0x779a
   1129c:	mov	r0, #0
   112a0:	mov	r2, #5
   112a4:	movt	r1, #1
   112a8:	bl	10efc <dcgettext@plt>
   112ac:	ldr	r1, [r7]
   112b0:	bl	10e60 <fputs_unlocked@plt>
   112b4:	movw	r1, #30663	; 0x77c7
   112b8:	mov	r0, #0
   112bc:	mov	r2, #5
   112c0:	movt	r1, #1
   112c4:	bl	10efc <dcgettext@plt>
   112c8:	ldr	r1, [r7]
   112cc:	bl	10e60 <fputs_unlocked@plt>
   112d0:	movw	r0, #31720	; 0x7be8
   112d4:	mov	r2, #48	; 0x30
   112d8:	mov	r6, sp
   112dc:	movw	r5, #30717	; 0x77fd
   112e0:	movt	r0, #1
   112e4:	movt	r5, #1
   112e8:	add	r1, r0, #32
   112ec:	add	r3, r0, #16
   112f0:	vld1.64	{d18-d19}, [r0], r2
   112f4:	vld1.64	{d16-d17}, [r1]
   112f8:	vld1.64	{d20-d21}, [r3]
   112fc:	add	r1, r6, #32
   11300:	vldr	d22, [r0]
   11304:	add	r0, r6, #16
   11308:	vst1.64	{d16-d17}, [r1]
   1130c:	movw	r1, #31083	; 0x796b
   11310:	vst1.64	{d20-d21}, [r0]
   11314:	mov	r0, r6
   11318:	vst1.64	{d18-d19}, [r0], r2
   1131c:	movt	r1, #1
   11320:	vstr	d22, [r0]
   11324:	mov	r0, r5
   11328:	bl	10e78 <strcmp@plt>
   1132c:	cmp	r0, #0
   11330:	ldrne	r1, [r6, #8]!
   11334:	cmpne	r1, #0
   11338:	bne	11324 <__assert_fail@plt+0x260>
   1133c:	ldr	r6, [r6, #4]
   11340:	movw	r1, #31178	; 0x79ca
   11344:	mov	r0, #0
   11348:	mov	r2, #5
   1134c:	movt	r1, #1
   11350:	bl	10efc <dcgettext@plt>
   11354:	movw	r2, #30860	; 0x788c
   11358:	movw	r3, #31201	; 0x79e1
   1135c:	mov	r1, r0
   11360:	mov	r0, #1
   11364:	movt	r2, #1
   11368:	movt	r3, #1
   1136c:	bl	11004 <__printf_chk@plt>
   11370:	cmp	r6, #0
   11374:	mov	r0, #5
   11378:	mov	r1, #0
   1137c:	moveq	r6, r5
   11380:	bl	11064 <setlocale@plt>
   11384:	cmp	r0, #0
   11388:	beq	113c0 <__assert_fail@plt+0x2fc>
   1138c:	movw	r1, #31241	; 0x7a09
   11390:	mov	r2, #3
   11394:	movt	r1, #1
   11398:	bl	110ac <strncmp@plt>
   1139c:	cmp	r0, #0
   113a0:	beq	113c0 <__assert_fail@plt+0x2fc>
   113a4:	movw	r1, #31245	; 0x7a0d
   113a8:	mov	r0, #0
   113ac:	mov	r2, #5
   113b0:	movt	r1, #1
   113b4:	bl	10efc <dcgettext@plt>
   113b8:	ldr	r1, [r7]
   113bc:	bl	10e60 <fputs_unlocked@plt>
   113c0:	movw	r1, #31316	; 0x7a54
   113c4:	mov	r0, #0
   113c8:	mov	r2, #5
   113cc:	movt	r1, #1
   113d0:	bl	10efc <dcgettext@plt>
   113d4:	movw	r2, #31201	; 0x79e1
   113d8:	mov	r1, r0
   113dc:	mov	r0, #1
   113e0:	mov	r3, r5
   113e4:	movt	r2, #1
   113e8:	bl	11004 <__printf_chk@plt>
   113ec:	movw	r1, #31343	; 0x7a6f
   113f0:	mov	r0, #0
   113f4:	mov	r2, #5
   113f8:	movt	r1, #1
   113fc:	bl	10efc <dcgettext@plt>
   11400:	movw	r3, #31393	; 0x7aa1
   11404:	mov	r1, r0
   11408:	movw	r0, #31111	; 0x7987
   1140c:	cmp	r6, r5
   11410:	mov	r2, r6
   11414:	movt	r0, #1
   11418:	movt	r3, #1
   1141c:	moveq	r3, r0
   11420:	mov	r0, #1
   11424:	bl	11004 <__printf_chk@plt>
   11428:	mov	r0, r4
   1142c:	bl	10fbc <exit@plt>
   11430:	movw	r0, #37192	; 0x9148
   11434:	movw	r1, #29844	; 0x7494
   11438:	mov	r2, #5
   1143c:	movt	r0, #2
   11440:	movt	r1, #1
   11444:	ldr	r5, [r0]
   11448:	mov	r0, #0
   1144c:	bl	10efc <dcgettext@plt>
   11450:	mov	r2, r0
   11454:	movw	r0, #4760	; 0x1298
   11458:	mov	r1, #1
   1145c:	movt	r0, #3
   11460:	ldr	r3, [r0]
   11464:	mov	r0, r5
   11468:	bl	1101c <__fprintf_chk@plt>
   1146c:	mov	r0, r4
   11470:	bl	10fbc <exit@plt>
   11474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11478:	add	fp, sp, #28
   1147c:	sub	sp, sp, #36	; 0x24
   11480:	mov	r4, r0
   11484:	ldr	r0, [r1]
   11488:	mov	r6, r1
   1148c:	bl	1358c <__assert_fail@plt+0x24c8>
   11490:	movw	r8, #31393	; 0x7aa1
   11494:	mov	r0, #6
   11498:	movt	r8, #1
   1149c:	mov	r1, r8
   114a0:	bl	11064 <setlocale@plt>
   114a4:	movw	r5, #30864	; 0x7890
   114a8:	movw	r1, #30721	; 0x7801
   114ac:	movt	r5, #1
   114b0:	movt	r1, #1
   114b4:	mov	r0, r5
   114b8:	bl	110a0 <bindtextdomain@plt>
   114bc:	mov	r0, r5
   114c0:	bl	10f14 <textdomain@plt>
   114c4:	movw	r0, #12984	; 0x32b8
   114c8:	movt	r0, #1
   114cc:	bl	1746c <__assert_fail@plt+0x63a8>
   114d0:	movw	r7, #4680	; 0x1248
   114d4:	mov	sl, #0
   114d8:	mov	r0, #75	; 0x4b
   114dc:	cmp	r4, #2
   114e0:	movt	r7, #3
   114e4:	str	sl, [r7]
   114e8:	str	r0, [r7, #8]
   114ec:	str	r8, [r7, #12]
   114f0:	mov	r8, r4
   114f4:	str	sl, [r7, #16]
   114f8:	str	sl, [r7, #20]
   114fc:	str	sl, [r7, #24]
   11500:	blt	11538 <__assert_fail@plt+0x474>
   11504:	mov	r4, r6
   11508:	ldr	r5, [r4, #4]!
   1150c:	ldrb	r0, [r5]
   11510:	cmp	r0, #45	; 0x2d
   11514:	bne	11538 <__assert_fail@plt+0x474>
   11518:	ldrb	r0, [r5, #1]!
   1151c:	sub	r0, r0, #48	; 0x30
   11520:	cmp	r0, #9
   11524:	bhi	11538 <__assert_fail@plt+0x474>
   11528:	ldr	r0, [r6]
   1152c:	sub	r8, r8, #1
   11530:	str	r0, [r6, #4]
   11534:	b	11540 <__assert_fail@plt+0x47c>
   11538:	mov	r4, r6
   1153c:	mov	r5, #0
   11540:	movw	r9, #31560	; 0x7b48
   11544:	mov	r0, #0
   11548:	str	r8, [sp, #28]
   1154c:	movt	r9, #1
   11550:	str	r0, [sp, #32]
   11554:	b	11560 <__assert_fail@plt+0x49c>
   11558:	mov	r0, #1
   1155c:	strb	r0, [r7, #1]
   11560:	movw	r2, #30745	; 0x7819
   11564:	mov	r0, r8
   11568:	mov	r1, r4
   1156c:	mov	r3, r9
   11570:	str	sl, [sp]
   11574:	movt	r2, #1
   11578:	bl	10fa4 <getopt_long@plt>
   1157c:	mov	r6, r0
   11580:	cmp	r0, #98	; 0x62
   11584:	ble	116c8 <__assert_fail@plt+0x604>
   11588:	sub	r0, r6, #99	; 0x63
   1158c:	cmp	r0, #20
   11590:	bhi	11994 <__assert_fail@plt+0x8d0>
   11594:	add	r1, pc, #0
   11598:	ldr	pc, [r1, r0, lsl #2]
   1159c:	strdeq	r1, [r1], -r0
   115a0:	muleq	r1, r4, r9
   115a4:	muleq	r1, r4, r9
   115a8:	muleq	r1, r4, r9
   115ac:	andeq	r1, r1, r4, asr #12
   115b0:	muleq	r1, r4, r9
   115b4:	muleq	r1, r4, r9
   115b8:	muleq	r1, r4, r9
   115bc:	muleq	r1, r4, r9
   115c0:	muleq	r1, r4, r9
   115c4:	muleq	r1, r4, r9
   115c8:	muleq	r1, r4, r9
   115cc:	muleq	r1, r4, r9
   115d0:	strdeq	r1, [r1], -ip
   115d4:	muleq	r1, r4, r9
   115d8:	muleq	r1, r4, r9
   115dc:	andeq	r1, r1, r8, asr r5
   115e0:	andeq	r1, r1, r4, ror r6
   115e4:	andeq	r1, r1, r8, asr r6
   115e8:	muleq	r1, r4, r9
   115ec:	andeq	r1, r1, r4, ror #12
   115f0:	mov	r0, #1
   115f4:	strb	r0, [r7, #3]
   115f8:	b	11560 <__assert_fail@plt+0x49c>
   115fc:	movw	r0, #37208	; 0x9158
   11600:	str	sl, [r7, #20]
   11604:	mov	r6, r7
   11608:	movt	r0, #2
   1160c:	ldr	r8, [r0]
   11610:	ldrb	r0, [r8]
   11614:	cmp	r0, #32
   11618:	bne	11680 <__assert_fail@plt+0x5bc>
   1161c:	mov	r0, #0
   11620:	add	r1, r8, r0
   11624:	add	r0, r0, #1
   11628:	ldrb	r1, [r1, #1]
   1162c:	cmp	r1, #32
   11630:	beq	11620 <__assert_fail@plt+0x55c>
   11634:	mov	r7, r6
   11638:	add	r8, r8, r0
   1163c:	str	r0, [r6, #20]
   11640:	b	11684 <__assert_fail@plt+0x5c0>
   11644:	movw	r0, #37208	; 0x9158
   11648:	movt	r0, #2
   1164c:	ldr	r0, [r0]
   11650:	str	r0, [sp, #32]
   11654:	b	11560 <__assert_fail@plt+0x49c>
   11658:	mov	r0, #1
   1165c:	strb	r0, [r7]
   11660:	b	11560 <__assert_fail@plt+0x49c>
   11664:	movw	r0, #37208	; 0x9158
   11668:	movt	r0, #2
   1166c:	ldr	r5, [r0]
   11670:	b	11560 <__assert_fail@plt+0x49c>
   11674:	mov	r0, #1
   11678:	strb	r0, [r7, #2]
   1167c:	b	11560 <__assert_fail@plt+0x49c>
   11680:	mov	r7, r6
   11684:	mov	r0, r8
   11688:	str	r8, [r7, #12]
   1168c:	bl	10fc8 <strlen@plt>
   11690:	add	r1, r8, r0
   11694:	str	r0, [r7, #16]
   11698:	mov	r0, r1
   1169c:	cmp	r1, r8
   116a0:	bls	116b4 <__assert_fail@plt+0x5f0>
   116a4:	mov	r1, r0
   116a8:	ldrb	r2, [r1, #-1]!
   116ac:	cmp	r2, #32
   116b0:	beq	11698 <__assert_fail@plt+0x5d4>
   116b4:	strb	sl, [r0], -r8
   116b8:	ldr	r8, [sp, #28]
   116bc:	mov	r7, r6
   116c0:	str	r0, [r6, #24]
   116c4:	b	11560 <__assert_fail@plt+0x49c>
   116c8:	cmn	r6, #1
   116cc:	bne	11934 <__assert_fail@plt+0x870>
   116d0:	movw	r9, #31393	; 0x7aa1
   116d4:	cmp	r5, #0
   116d8:	movt	r9, #1
   116dc:	beq	11788 <__assert_fail@plt+0x6c4>
   116e0:	movw	r1, #30888	; 0x78a8
   116e4:	mov	r0, #0
   116e8:	mov	r2, #5
   116ec:	mov	r6, #0
   116f0:	movt	r1, #1
   116f4:	bl	10efc <dcgettext@plt>
   116f8:	movw	r1, #2500	; 0x9c4
   116fc:	mov	r2, #0
   11700:	mov	r3, #0
   11704:	stm	sp, {r1, r6, r9}
   11708:	str	r0, [sp, #12]
   1170c:	mov	r0, r5
   11710:	str	r6, [sp, #16]
   11714:	bl	16278 <__assert_fail@plt+0x51b4>
   11718:	mov	r6, r0
   1171c:	str	r0, [r7, #8]
   11720:	ldr	r0, [sp, #32]
   11724:	cmp	r0, #0
   11728:	beq	11798 <__assert_fail@plt+0x6d4>
   1172c:	movw	r1, #30888	; 0x78a8
   11730:	mov	sl, r5
   11734:	mov	r5, r0
   11738:	mov	r0, #0
   1173c:	mov	r2, #5
   11740:	mov	r8, #0
   11744:	movt	r1, #1
   11748:	bl	10efc <dcgettext@plt>
   1174c:	asr	r1, r6, #31
   11750:	str	r6, [sp]
   11754:	mov	r2, #0
   11758:	mov	r3, #0
   1175c:	stmib	sp, {r1, r9}
   11760:	str	r8, [sp, #16]
   11764:	str	r0, [sp, #12]
   11768:	mov	r0, r5
   1176c:	ldr	r8, [sp, #28]
   11770:	bl	16278 <__assert_fail@plt+0x51b4>
   11774:	cmp	sl, #0
   11778:	str	r0, [r7, #28]
   1177c:	addeq	r0, r0, #10
   11780:	streq	r0, [r7, #8]
   11784:	b	117b8 <__assert_fail@plt+0x6f4>
   11788:	ldr	r6, [r7, #8]
   1178c:	ldr	r0, [sp, #32]
   11790:	cmp	r0, #0
   11794:	bne	1172c <__assert_fail@plt+0x668>
   11798:	mov	r0, #187	; 0xbb
   1179c:	movw	r1, #34079	; 0x851f
   117a0:	mul	r0, r6, r0
   117a4:	movt	r1, #20971	; 0x51eb
   117a8:	smmul	r0, r0, r1
   117ac:	asr	r1, r0, #6
   117b0:	add	r0, r1, r0, lsr #31
   117b4:	str	r0, [r7, #28]
   117b8:	movw	r5, #37184	; 0x9140
   117bc:	movt	r5, #2
   117c0:	ldr	r0, [r5]
   117c4:	cmp	r0, r8
   117c8:	bne	11834 <__assert_fail@plt+0x770>
   117cc:	movw	r0, #37200	; 0x9150
   117d0:	movw	r1, #31876	; 0x7c84
   117d4:	movt	r0, #2
   117d8:	movt	r1, #1
   117dc:	ldr	r0, [r0]
   117e0:	bl	119d0 <__assert_fail@plt+0x90c>
   117e4:	mov	r6, r0
   117e8:	movw	r0, #37200	; 0x9150
   117ec:	movt	r0, #2
   117f0:	ldr	r0, [r0]
   117f4:	bl	133e4 <__assert_fail@plt+0x2320>
   117f8:	cmp	r0, #0
   117fc:	beq	11928 <__assert_fail@plt+0x864>
   11800:	bl	10fe0 <__errno_location@plt>
   11804:	ldr	r4, [r0]
   11808:	movw	r1, #30929	; 0x78d1
   1180c:	mov	r0, #0
   11810:	mov	r2, #5
   11814:	movt	r1, #1
   11818:	bl	10efc <dcgettext@plt>
   1181c:	movw	r2, #31807	; 0x7c3f
   11820:	mov	r3, r0
   11824:	mov	r0, #1
   11828:	mov	r1, r4
   1182c:	movt	r2, #1
   11830:	bl	10f68 <error@plt>
   11834:	mov	r6, #1
   11838:	bge	11928 <__assert_fail@plt+0x864>
   1183c:	movw	sl, #31485	; 0x7afd
   11840:	str	r4, [sp, #32]
   11844:	movw	r4, #31876	; 0x7c84
   11848:	mov	r1, #0
   1184c:	mov	r6, #1
   11850:	movt	r4, #1
   11854:	movt	sl, #1
   11858:	str	r1, [sp, #24]
   1185c:	ldr	r1, [sp, #32]
   11860:	ldr	r7, [r1, r0, lsl #2]
   11864:	mov	r1, r4
   11868:	mov	r0, r7
   1186c:	bl	10e78 <strcmp@plt>
   11870:	cmp	r0, #0
   11874:	beq	1189c <__assert_fail@plt+0x7d8>
   11878:	mov	r0, r7
   1187c:	mov	r1, sl
   11880:	bl	11094 <fopen64@plt>
   11884:	cmp	r0, #0
   11888:	beq	118c0 <__assert_fail@plt+0x7fc>
   1188c:	mov	r1, r7
   11890:	bl	119d0 <__assert_fail@plt+0x90c>
   11894:	and	r6, r6, r0
   11898:	b	11908 <__assert_fail@plt+0x844>
   1189c:	movw	r0, #37200	; 0x9150
   118a0:	mov	r1, r7
   118a4:	movt	r0, #2
   118a8:	ldr	r0, [r0]
   118ac:	bl	119d0 <__assert_fail@plt+0x90c>
   118b0:	and	r6, r6, r0
   118b4:	mov	r0, #1
   118b8:	str	r0, [sp, #24]
   118bc:	b	11908 <__assert_fail@plt+0x844>
   118c0:	bl	10fe0 <__errno_location@plt>
   118c4:	ldr	r9, [r0]
   118c8:	movw	r1, #30902	; 0x78b6
   118cc:	mov	r0, #0
   118d0:	mov	r2, #5
   118d4:	mov	r6, #0
   118d8:	movt	r1, #1
   118dc:	bl	10efc <dcgettext@plt>
   118e0:	mov	r8, r0
   118e4:	mov	r0, #4
   118e8:	mov	r1, r7
   118ec:	bl	14fe0 <__assert_fail@plt+0x3f1c>
   118f0:	mov	r2, r8
   118f4:	ldr	r8, [sp, #28]
   118f8:	mov	r3, r0
   118fc:	mov	r0, #0
   11900:	mov	r1, r9
   11904:	bl	10f68 <error@plt>
   11908:	ldr	r0, [r5]
   1190c:	add	r0, r0, #1
   11910:	cmp	r0, r8
   11914:	str	r0, [r5]
   11918:	blt	1185c <__assert_fail@plt+0x798>
   1191c:	ldr	r0, [sp, #24]
   11920:	tst	r0, #1
   11924:	bne	117e8 <__assert_fail@plt+0x724>
   11928:	eor	r0, r6, #1
   1192c:	sub	sp, fp, #28
   11930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11934:	cmn	r6, #3
   11938:	bne	11984 <__assert_fail@plt+0x8c0>
   1193c:	movw	r0, #37104	; 0x90f0
   11940:	movw	r2, #30874	; 0x789a
   11944:	mov	r1, #0
   11948:	movt	r0, #2
   1194c:	movt	r2, #1
   11950:	str	r1, [sp, #4]
   11954:	movw	r1, #30717	; 0x77fd
   11958:	ldr	r3, [r0]
   1195c:	movw	r0, #37204	; 0x9154
   11960:	str	r2, [sp]
   11964:	movw	r2, #30860	; 0x788c
   11968:	movt	r1, #1
   1196c:	movt	r0, #2
   11970:	movt	r2, #1
   11974:	ldr	r0, [r0]
   11978:	bl	159ac <__assert_fail@plt+0x48e8>
   1197c:	mov	r0, #0
   11980:	bl	10fbc <exit@plt>
   11984:	cmn	r6, #2
   11988:	bne	11994 <__assert_fail@plt+0x8d0>
   1198c:	mov	r0, #0
   11990:	bl	111c0 <__assert_fail@plt+0xfc>
   11994:	sub	r0, r6, #48	; 0x30
   11998:	cmp	r0, #9
   1199c:	bhi	119c8 <__assert_fail@plt+0x904>
   119a0:	movw	r1, #30766	; 0x782e
   119a4:	mov	r0, #0
   119a8:	mov	r2, #5
   119ac:	movt	r1, #1
   119b0:	bl	10efc <dcgettext@plt>
   119b4:	mov	r2, r0
   119b8:	mov	r0, #0
   119bc:	mov	r1, #0
   119c0:	mov	r3, r6
   119c4:	bl	10f68 <error@plt>
   119c8:	mov	r0, #1
   119cc:	bl	111c0 <__assert_fail@plt+0xfc>
   119d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d4:	add	fp, sp, #28
   119d8:	push	{r1}		; (str r1, [sp, #-4]!)
   119dc:	mov	r1, #2
   119e0:	mov	r5, r0
   119e4:	bl	133a8 <__assert_fail@plt+0x22e4>
   119e8:	movw	r9, #4680	; 0x1248
   119ec:	mov	r0, #0
   119f0:	movt	r9, #3
   119f4:	str	r0, [r9, #32]
   119f8:	strb	r0, [r9, #4]
   119fc:	str	r0, [r9, #44]	; 0x2c
   11a00:	ldmib	r5, {r0, r1}
   11a04:	cmp	r0, r1
   11a08:	bcs	11a28 <__assert_fail@plt+0x964>
   11a0c:	add	r1, r0, #1
   11a10:	str	r1, [r5, #4]
   11a14:	ldrb	r7, [r0]
   11a18:	mov	r4, #1
   11a1c:	cmp	r7, #9
   11a20:	bne	11a58 <__assert_fail@plt+0x994>
   11a24:	b	11a7c <__assert_fail@plt+0x9b8>
   11a28:	mov	r0, r5
   11a2c:	bl	1104c <__uflow@plt>
   11a30:	mov	r7, r0
   11a34:	mov	r4, #1
   11a38:	cmp	r7, #9
   11a3c:	bne	11a58 <__assert_fail@plt+0x994>
   11a40:	b	11a7c <__assert_fail@plt+0x9b8>
   11a44:	add	r1, r0, #1
   11a48:	str	r1, [r5, #4]
   11a4c:	ldrb	r7, [r0]
   11a50:	cmp	r7, #9
   11a54:	beq	11a7c <__assert_fail@plt+0x9b8>
   11a58:	cmp	r7, #32
   11a5c:	bne	11abc <__assert_fail@plt+0x9f8>
   11a60:	ldr	r0, [r9, #44]	; 0x2c
   11a64:	add	r0, r0, #1
   11a68:	str	r0, [r9, #44]	; 0x2c
   11a6c:	ldmib	r5, {r0, r1}
   11a70:	cmp	r0, r1
   11a74:	bcc	11a44 <__assert_fail@plt+0x980>
   11a78:	b	11aa4 <__assert_fail@plt+0x9e0>
   11a7c:	strb	r4, [r9, #4]
   11a80:	ldr	r0, [r9, #44]	; 0x2c
   11a84:	asr	r1, r0, #31
   11a88:	add	r0, r0, r1, lsr #29
   11a8c:	bic	r0, r0, #7
   11a90:	add	r0, r0, #8
   11a94:	str	r0, [r9, #44]	; 0x2c
   11a98:	ldmib	r5, {r0, r1}
   11a9c:	cmp	r0, r1
   11aa0:	bcc	11a44 <__assert_fail@plt+0x980>
   11aa4:	mov	r0, r5
   11aa8:	bl	1104c <__uflow@plt>
   11aac:	mov	r7, r0
   11ab0:	cmp	r7, #9
   11ab4:	bne	11a58 <__assert_fail@plt+0x994>
   11ab8:	b	11a7c <__assert_fail@plt+0x9b8>
   11abc:	ldr	r0, [r9, #24]
   11ac0:	cmp	r0, #0
   11ac4:	beq	11bc4 <__assert_fail@plt+0xb00>
   11ac8:	ldr	r0, [r9, #44]	; 0x2c
   11acc:	ldr	r1, [r9, #12]
   11ad0:	str	r0, [r9, #48]	; 0x30
   11ad4:	ldrb	r0, [r1]
   11ad8:	cmp	r0, #0
   11adc:	beq	11b3c <__assert_fail@plt+0xa78>
   11ae0:	add	r4, r1, #1
   11ae4:	uxtb	r0, r0
   11ae8:	cmp	r7, r0
   11aec:	bne	11bd8 <__assert_fail@plt+0xb14>
   11af0:	ldr	r0, [r9, #44]	; 0x2c
   11af4:	add	r0, r0, #1
   11af8:	str	r0, [r9, #44]	; 0x2c
   11afc:	ldmib	r5, {r0, r1}
   11b00:	cmp	r0, r1
   11b04:	bcs	11b24 <__assert_fail@plt+0xa60>
   11b08:	add	r1, r0, #1
   11b0c:	str	r1, [r5, #4]
   11b10:	ldrb	r7, [r0]
   11b14:	ldrb	r0, [r4], #1
   11b18:	cmp	r0, #0
   11b1c:	bne	11ae4 <__assert_fail@plt+0xa20>
   11b20:	b	11b3c <__assert_fail@plt+0xa78>
   11b24:	mov	r0, r5
   11b28:	bl	1104c <__uflow@plt>
   11b2c:	mov	r7, r0
   11b30:	ldrb	r0, [r4], #1
   11b34:	cmp	r0, #0
   11b38:	bne	11ae4 <__assert_fail@plt+0xa20>
   11b3c:	mov	r4, #1
   11b40:	cmp	r7, #9
   11b44:	bne	11b60 <__assert_fail@plt+0xa9c>
   11b48:	b	11b84 <__assert_fail@plt+0xac0>
   11b4c:	add	r1, r0, #1
   11b50:	str	r1, [r5, #4]
   11b54:	ldrb	r7, [r0]
   11b58:	cmp	r7, #9
   11b5c:	beq	11b84 <__assert_fail@plt+0xac0>
   11b60:	cmp	r7, #32
   11b64:	bne	11bd8 <__assert_fail@plt+0xb14>
   11b68:	ldr	r0, [r9, #44]	; 0x2c
   11b6c:	add	r0, r0, #1
   11b70:	str	r0, [r9, #44]	; 0x2c
   11b74:	ldmib	r5, {r0, r1}
   11b78:	cmp	r0, r1
   11b7c:	bcc	11b4c <__assert_fail@plt+0xa88>
   11b80:	b	11bac <__assert_fail@plt+0xae8>
   11b84:	strb	r4, [r9, #4]
   11b88:	ldr	r0, [r9, #44]	; 0x2c
   11b8c:	asr	r1, r0, #31
   11b90:	add	r0, r0, r1, lsr #29
   11b94:	bic	r0, r0, #7
   11b98:	add	r0, r0, #8
   11b9c:	str	r0, [r9, #44]	; 0x2c
   11ba0:	ldmib	r5, {r0, r1}
   11ba4:	cmp	r0, r1
   11ba8:	bcc	11b4c <__assert_fail@plt+0xa88>
   11bac:	mov	r0, r5
   11bb0:	bl	1104c <__uflow@plt>
   11bb4:	mov	r7, r0
   11bb8:	cmp	r7, #9
   11bbc:	bne	11b60 <__assert_fail@plt+0xa9c>
   11bc0:	b	11b84 <__assert_fail@plt+0xac0>
   11bc4:	ldr	r0, [r9, #20]
   11bc8:	ldr	r1, [r9, #44]	; 0x2c
   11bcc:	cmp	r0, r1
   11bd0:	movlt	r1, r0
   11bd4:	str	r1, [r9, #48]	; 0x30
   11bd8:	movw	sl, #37204	; 0x9154
   11bdc:	mov	ip, #0
   11be0:	str	r7, [r9, #36]	; 0x24
   11be4:	movt	sl, #2
   11be8:	b	11bf4 <__assert_fail@plt+0xb30>
   11bec:	ldr	r7, [r9, #36]	; 0x24
   11bf0:	mov	ip, #0
   11bf4:	mov	lr, #9
   11bf8:	str	ip, [r9, #52]	; 0x34
   11bfc:	b	11c14 <__assert_fail@plt+0xb50>
   11c00:	ldr	r0, [r9, #20]
   11c04:	ldr	r1, [r9, #44]	; 0x2c
   11c08:	cmp	r0, r1
   11c0c:	movlt	r1, r0
   11c10:	str	r1, [r9, #48]	; 0x30
   11c14:	cmn	r7, #1
   11c18:	cmpne	r7, #10
   11c1c:	bne	11ca4 <__assert_fail@plt+0xbe0>
   11c20:	ldr	r4, [r9, #48]	; 0x30
   11c24:	str	ip, [r9, #68]	; 0x44
   11c28:	ldr	r0, [r9, #44]	; 0x2c
   11c2c:	cmp	r0, r4
   11c30:	bgt	11c40 <__assert_fail@plt+0xb7c>
   11c34:	cmn	r7, #1
   11c38:	cmpne	r7, #10
   11c3c:	beq	11f24 <__assert_fail@plt+0xe60>
   11c40:	ldrb	r0, [r9, #4]
   11c44:	mov	r2, #0
   11c48:	cmp	r0, #1
   11c4c:	bne	11c70 <__assert_fail@plt+0xbac>
   11c50:	cmp	r4, #8
   11c54:	mov	r6, #32
   11c58:	blt	11d2c <__assert_fail@plt+0xc68>
   11c5c:	asr	r0, r4, #31
   11c60:	mov	r2, #0
   11c64:	add	r0, r4, r0, lsr #29
   11c68:	bic	r8, r0, #7
   11c6c:	b	11ce4 <__assert_fail@plt+0xc20>
   11c70:	mov	r6, #32
   11c74:	cmp	r2, r4
   11c78:	blt	11d34 <__assert_fail@plt+0xc70>
   11c7c:	ldr	r8, [r9, #44]	; 0x2c
   11c80:	cmp	r2, r8
   11c84:	bne	11c9c <__assert_fail@plt+0xbd8>
   11c88:	mov	r1, r2
   11c8c:	mov	r8, r2
   11c90:	cmn	r7, #1
   11c94:	bne	11dd4 <__assert_fail@plt+0xd10>
   11c98:	b	11eb8 <__assert_fail@plt+0xdf4>
   11c9c:	ldr	r4, [r9, #12]
   11ca0:	b	11d88 <__assert_fail@plt+0xcc4>
   11ca4:	ldr	r0, [r9, #20]
   11ca8:	ldr	r4, [r9, #48]	; 0x30
   11cac:	cmp	r4, r0
   11cb0:	blt	11c24 <__assert_fail@plt+0xb60>
   11cb4:	ldr	r1, [r9, #16]
   11cb8:	ldr	r0, [r9, #44]	; 0x2c
   11cbc:	add	r1, r1, r4
   11cc0:	cmp	r0, r1
   11cc4:	blt	11c20 <__assert_fail@plt+0xb5c>
   11cc8:	b	12168 <__assert_fail@plt+0x10a4>
   11ccc:	mov	r1, #9
   11cd0:	bl	11058 <__overflow@plt>
   11cd4:	ldr	r2, [r9, #68]	; 0x44
   11cd8:	mov	lr, #9
   11cdc:	mov	ip, #0
   11ce0:	b	11d04 <__assert_fail@plt+0xc40>
   11ce4:	ldr	r0, [sl]
   11ce8:	ldr	r1, [r0, #20]
   11cec:	ldr	r3, [r0, #24]
   11cf0:	cmp	r1, r3
   11cf4:	bcs	11ccc <__assert_fail@plt+0xc08>
   11cf8:	add	r3, r1, #1
   11cfc:	str	r3, [r0, #20]
   11d00:	strb	lr, [r1]
   11d04:	asr	r0, r2, #31
   11d08:	add	r0, r2, r0, lsr #29
   11d0c:	bic	r0, r0, #7
   11d10:	add	r2, r0, #8
   11d14:	cmp	r2, r8
   11d18:	str	r2, [r9, #68]	; 0x44
   11d1c:	blt	11ce4 <__assert_fail@plt+0xc20>
   11d20:	b	11d2c <__assert_fail@plt+0xc68>
   11d24:	add	r2, r2, #1
   11d28:	str	r2, [r9, #68]	; 0x44
   11d2c:	cmp	r2, r4
   11d30:	bge	11c7c <__assert_fail@plt+0xbb8>
   11d34:	ldr	r0, [sl]
   11d38:	ldr	r1, [r0, #20]
   11d3c:	ldr	r3, [r0, #24]
   11d40:	cmp	r1, r3
   11d44:	bcs	11d58 <__assert_fail@plt+0xc94>
   11d48:	add	r3, r1, #1
   11d4c:	str	r3, [r0, #20]
   11d50:	strb	r6, [r1]
   11d54:	b	11d24 <__assert_fail@plt+0xc60>
   11d58:	mov	r1, #32
   11d5c:	bl	11058 <__overflow@plt>
   11d60:	ldr	r2, [r9, #68]	; 0x44
   11d64:	mov	lr, #9
   11d68:	mov	ip, #0
   11d6c:	b	11d24 <__assert_fail@plt+0xc60>
   11d70:	bl	11058 <__overflow@plt>
   11d74:	ldr	r8, [r9, #44]	; 0x2c
   11d78:	ldr	r2, [r9, #68]	; 0x44
   11d7c:	mov	lr, #9
   11d80:	mov	ip, #0
   11d84:	b	11db4 <__assert_fail@plt+0xcf0>
   11d88:	ldrb	r1, [r4]
   11d8c:	cmp	r1, #0
   11d90:	beq	11eac <__assert_fail@plt+0xde8>
   11d94:	ldr	r0, [sl]
   11d98:	ldr	r3, [r0, #20]
   11d9c:	ldr	r6, [r0, #24]
   11da0:	cmp	r3, r6
   11da4:	bcs	11d70 <__assert_fail@plt+0xcac>
   11da8:	add	r6, r3, #1
   11dac:	str	r6, [r0, #20]
   11db0:	strb	r1, [r3]
   11db4:	add	r2, r2, #1
   11db8:	add	r4, r4, #1
   11dbc:	mov	r1, r8
   11dc0:	cmp	r2, r8
   11dc4:	str	r2, [r9, #68]	; 0x44
   11dc8:	bne	11d88 <__assert_fail@plt+0xcc4>
   11dcc:	cmn	r7, #1
   11dd0:	beq	11eb8 <__assert_fail@plt+0xdf4>
   11dd4:	cmp	r7, #10
   11dd8:	beq	11f24 <__assert_fail@plt+0xe60>
   11ddc:	ldrb	r0, [r9, #4]
   11de0:	cmp	r0, #1
   11de4:	bne	11e64 <__assert_fail@plt+0xda0>
   11de8:	asr	r0, r8, #31
   11dec:	add	r0, r8, r0, lsr #29
   11df0:	bic	r4, r0, #7
   11df4:	add	r0, r1, #1
   11df8:	cmp	r0, r4
   11dfc:	blt	11e18 <__assert_fail@plt+0xd54>
   11e00:	b	11e64 <__assert_fail@plt+0xda0>
   11e04:	asr	r0, r1, #31
   11e08:	add	r0, r1, r0, lsr #29
   11e0c:	bic	r0, r0, #7
   11e10:	add	r1, r0, #8
   11e14:	str	r1, [r9, #68]	; 0x44
   11e18:	cmp	r1, r4
   11e1c:	bge	11e64 <__assert_fail@plt+0xda0>
   11e20:	ldr	r0, [sl]
   11e24:	ldr	r2, [r0, #20]
   11e28:	ldr	r3, [r0, #24]
   11e2c:	cmp	r2, r3
   11e30:	bcs	11e44 <__assert_fail@plt+0xd80>
   11e34:	add	r3, r2, #1
   11e38:	str	r3, [r0, #20]
   11e3c:	strb	lr, [r2]
   11e40:	b	11e04 <__assert_fail@plt+0xd40>
   11e44:	mov	r1, #9
   11e48:	bl	11058 <__overflow@plt>
   11e4c:	ldr	r1, [r9, #68]	; 0x44
   11e50:	mov	lr, #9
   11e54:	mov	ip, #0
   11e58:	b	11e04 <__assert_fail@plt+0xd40>
   11e5c:	add	r1, r1, #1
   11e60:	str	r1, [r9, #68]	; 0x44
   11e64:	cmp	r1, r8
   11e68:	bge	11f24 <__assert_fail@plt+0xe60>
   11e6c:	ldr	r0, [sl]
   11e70:	ldr	r2, [r0, #20]
   11e74:	ldr	r3, [r0, #24]
   11e78:	cmp	r2, r3
   11e7c:	bcs	11e94 <__assert_fail@plt+0xdd0>
   11e80:	add	r3, r2, #1
   11e84:	str	r3, [r0, #20]
   11e88:	mov	r0, #32
   11e8c:	strb	r0, [r2]
   11e90:	b	11e5c <__assert_fail@plt+0xd98>
   11e94:	mov	r1, #32
   11e98:	bl	11058 <__overflow@plt>
   11e9c:	ldr	r1, [r9, #68]	; 0x44
   11ea0:	mov	lr, #9
   11ea4:	mov	ip, #0
   11ea8:	b	11e5c <__assert_fail@plt+0xd98>
   11eac:	mov	r1, r2
   11eb0:	cmn	r7, #1
   11eb4:	bne	11dd4 <__assert_fail@plt+0xd10>
   11eb8:	ldr	r0, [r9, #24]
   11ebc:	ldr	r1, [r9, #48]	; 0x30
   11ec0:	add	r0, r0, r1
   11ec4:	cmp	r8, r0
   11ec8:	blt	11f24 <__assert_fail@plt+0xe60>
   11ecc:	ldr	r0, [sl]
   11ed0:	ldr	r1, [r0, #20]
   11ed4:	ldr	r2, [r0, #24]
   11ed8:	cmp	r1, r2
   11edc:	bcs	11efc <__assert_fail@plt+0xe38>
   11ee0:	add	r2, r1, #1
   11ee4:	str	r2, [r0, #20]
   11ee8:	mov	r0, #10
   11eec:	strb	r0, [r1]
   11ef0:	cmn	r7, #1
   11ef4:	bne	11f2c <__assert_fail@plt+0xe68>
   11ef8:	b	12430 <__assert_fail@plt+0x136c>
   11efc:	mov	r1, #10
   11f00:	bl	11058 <__overflow@plt>
   11f04:	mov	lr, #9
   11f08:	mov	ip, #0
   11f0c:	cmn	r7, #1
   11f10:	bne	11f2c <__assert_fail@plt+0xe68>
   11f14:	b	12430 <__assert_fail@plt+0x136c>
   11f18:	add	r1, r0, #1
   11f1c:	str	r1, [r5, #4]
   11f20:	ldrb	r7, [r0]
   11f24:	cmn	r7, #1
   11f28:	beq	12430 <__assert_fail@plt+0x136c>
   11f2c:	cmp	r7, #10
   11f30:	beq	11fa0 <__assert_fail@plt+0xedc>
   11f34:	ldr	r0, [sl]
   11f38:	ldr	r1, [r0, #20]
   11f3c:	ldr	r2, [r0, #24]
   11f40:	cmp	r1, r2
   11f44:	bcs	11f80 <__assert_fail@plt+0xebc>
   11f48:	add	r2, r1, #1
   11f4c:	str	r2, [r0, #20]
   11f50:	strb	r7, [r1]
   11f54:	ldmib	r5, {r0, r1}
   11f58:	cmp	r0, r1
   11f5c:	bcc	11f18 <__assert_fail@plt+0xe54>
   11f60:	mov	r0, r5
   11f64:	bl	1104c <__uflow@plt>
   11f68:	mov	lr, #9
   11f6c:	mov	ip, #0
   11f70:	mov	r7, r0
   11f74:	cmn	r7, #1
   11f78:	bne	11f2c <__assert_fail@plt+0xe68>
   11f7c:	b	12430 <__assert_fail@plt+0x136c>
   11f80:	uxtb	r1, r7
   11f84:	bl	11058 <__overflow@plt>
   11f88:	mov	lr, #9
   11f8c:	mov	ip, #0
   11f90:	ldmib	r5, {r0, r1}
   11f94:	cmp	r0, r1
   11f98:	bcc	11f18 <__assert_fail@plt+0xe54>
   11f9c:	b	11f60 <__assert_fail@plt+0xe9c>
   11fa0:	ldr	r0, [sl]
   11fa4:	mov	r6, #1
   11fa8:	ldr	r1, [r0, #20]
   11fac:	ldr	r2, [r0, #24]
   11fb0:	cmp	r1, r2
   11fb4:	bcs	12154 <__assert_fail@plt+0x1090>
   11fb8:	add	r2, r1, #1
   11fbc:	str	r2, [r0, #20]
   11fc0:	mov	r0, #10
   11fc4:	strb	r0, [r1]
   11fc8:	str	ip, [r9, #44]	; 0x2c
   11fcc:	b	11fdc <__assert_fail@plt+0xf18>
   11fd0:	ldr	r0, [r9, #44]	; 0x2c
   11fd4:	add	r0, r0, #1
   11fd8:	str	r0, [r9, #44]	; 0x2c
   11fdc:	ldr	r0, [r5, #4]
   11fe0:	ldr	r1, [r5, #8]
   11fe4:	cmp	r0, r1
   11fe8:	bcs	1200c <__assert_fail@plt+0xf48>
   11fec:	add	r1, r0, #1
   11ff0:	str	r1, [r5, #4]
   11ff4:	ldrb	r7, [r0]
   11ff8:	cmp	r7, #9
   11ffc:	beq	12028 <__assert_fail@plt+0xf64>
   12000:	cmp	r7, #32
   12004:	beq	11fd0 <__assert_fail@plt+0xf0c>
   12008:	b	12048 <__assert_fail@plt+0xf84>
   1200c:	mov	r0, r5
   12010:	bl	1104c <__uflow@plt>
   12014:	mov	lr, #9
   12018:	mov	ip, #0
   1201c:	mov	r7, r0
   12020:	cmp	r7, #9
   12024:	bne	12000 <__assert_fail@plt+0xf3c>
   12028:	strb	r6, [r9, #4]
   1202c:	ldr	r0, [r9, #44]	; 0x2c
   12030:	asr	r1, r0, #31
   12034:	add	r0, r0, r1, lsr #29
   12038:	bic	r0, r0, #7
   1203c:	add	r0, r0, #8
   12040:	str	r0, [r9, #44]	; 0x2c
   12044:	b	11fdc <__assert_fail@plt+0xf18>
   12048:	ldr	r0, [r9, #24]
   1204c:	cmp	r0, #0
   12050:	beq	11c00 <__assert_fail@plt+0xb3c>
   12054:	ldr	r0, [r9, #44]	; 0x2c
   12058:	ldr	r1, [r9, #12]
   1205c:	str	r0, [r9, #48]	; 0x30
   12060:	ldrb	r0, [r1]
   12064:	cmp	r0, #0
   12068:	beq	120e0 <__assert_fail@plt+0x101c>
   1206c:	add	r4, r1, #1
   12070:	uxtb	r0, r0
   12074:	cmp	r7, r0
   12078:	bne	11c14 <__assert_fail@plt+0xb50>
   1207c:	ldr	r0, [r9, #44]	; 0x2c
   12080:	add	r0, r0, #1
   12084:	str	r0, [r9, #44]	; 0x2c
   12088:	ldmib	r5, {r0, r1}
   1208c:	cmp	r0, r1
   12090:	bcs	120b0 <__assert_fail@plt+0xfec>
   12094:	add	r1, r0, #1
   12098:	str	r1, [r5, #4]
   1209c:	ldrb	r7, [r0]
   120a0:	ldrb	r0, [r4], #1
   120a4:	cmp	r0, #0
   120a8:	bne	12070 <__assert_fail@plt+0xfac>
   120ac:	b	120e0 <__assert_fail@plt+0x101c>
   120b0:	mov	r0, r5
   120b4:	bl	1104c <__uflow@plt>
   120b8:	mov	lr, #9
   120bc:	mov	ip, #0
   120c0:	mov	r7, r0
   120c4:	ldrb	r0, [r4], #1
   120c8:	cmp	r0, #0
   120cc:	bne	12070 <__assert_fail@plt+0xfac>
   120d0:	b	120e0 <__assert_fail@plt+0x101c>
   120d4:	add	r1, r0, #1
   120d8:	str	r1, [r5, #4]
   120dc:	ldrb	r7, [r0]
   120e0:	cmp	r7, #9
   120e4:	beq	1210c <__assert_fail@plt+0x1048>
   120e8:	cmp	r7, #32
   120ec:	bne	11c14 <__assert_fail@plt+0xb50>
   120f0:	ldr	r0, [r9, #44]	; 0x2c
   120f4:	add	r0, r0, #1
   120f8:	str	r0, [r9, #44]	; 0x2c
   120fc:	ldmib	r5, {r0, r1}
   12100:	cmp	r0, r1
   12104:	bcc	120d4 <__assert_fail@plt+0x1010>
   12108:	b	12134 <__assert_fail@plt+0x1070>
   1210c:	strb	r6, [r9, #4]
   12110:	ldr	r0, [r9, #44]	; 0x2c
   12114:	asr	r1, r0, #31
   12118:	add	r0, r0, r1, lsr #29
   1211c:	bic	r0, r0, #7
   12120:	add	r0, r0, #8
   12124:	str	r0, [r9, #44]	; 0x2c
   12128:	ldmib	r5, {r0, r1}
   1212c:	cmp	r0, r1
   12130:	bcc	120d4 <__assert_fail@plt+0x1010>
   12134:	mov	r0, r5
   12138:	bl	1104c <__uflow@plt>
   1213c:	mov	lr, #9
   12140:	mov	ip, #0
   12144:	mov	r7, r0
   12148:	cmp	r7, #9
   1214c:	bne	120e8 <__assert_fail@plt+0x1024>
   12150:	b	1210c <__assert_fail@plt+0x1048>
   12154:	mov	r1, #10
   12158:	bl	11058 <__overflow@plt>
   1215c:	mov	lr, #9
   12160:	mov	ip, #0
   12164:	b	11fc8 <__assert_fail@plt+0xf04>
   12168:	str	r4, [r9, #56]	; 0x38
   1216c:	str	r0, [r9, #60]	; 0x3c
   12170:	movw	r0, #37216	; 0x9160
   12174:	mov	r1, r7
   12178:	movt	r0, #2
   1217c:	str	r0, [r9, #64]	; 0x40
   12180:	movw	r0, #42216	; 0xa4e8
   12184:	movt	r0, #2
   12188:	str	r0, [r9, #40]	; 0x28
   1218c:	mov	r0, r5
   12190:	bl	127d0 <__assert_fail@plt+0x170c>
   12194:	mov	r1, r0
   12198:	ldr	r0, [r9, #48]	; 0x30
   1219c:	ldr	r2, [r9, #56]	; 0x38
   121a0:	mov	r3, #0
   121a4:	cmp	r0, r2
   121a8:	bne	121e0 <__assert_fail@plt+0x111c>
   121ac:	ldr	r3, [r9, #16]
   121b0:	ldr	r7, [r9, #44]	; 0x2c
   121b4:	add	r3, r3, r0
   121b8:	cmp	r7, r3
   121bc:	mov	r3, #0
   121c0:	movwge	r3, #1
   121c4:	subs	r7, r1, #10
   121c8:	movwne	r7, #1
   121cc:	cmn	r1, #1
   121d0:	and	r3, r7, r3
   121d4:	add	r7, r1, #1
   121d8:	movwne	r7, #1
   121dc:	and	r3, r7, r3
   121e0:	ldrb	r7, [r9, #1]
   121e4:	cmp	r7, #0
   121e8:	beq	12250 <__assert_fail@plt+0x118c>
   121ec:	ldr	r0, [r9, #60]	; 0x3c
   121f0:	str	r0, [r9, #32]
   121f4:	movw	r6, #42216	; 0xa4e8
   121f8:	movt	r6, #2
   121fc:	ldr	r4, [r9, #40]	; 0x28
   12200:	cmp	r4, r6
   12204:	bls	124f8 <__assert_fail@plt+0x1434>
   12208:	ldrb	r0, [r4, #-16]
   1220c:	orr	r0, r0, #10
   12210:	strb	r0, [r4, #-16]
   12214:	str	r1, [r9, #36]	; 0x24
   12218:	bl	12518 <__assert_fail@plt+0x1454>
   1221c:	ldr	r1, [r9, #60]	; 0x3c
   12220:	mov	r0, r6
   12224:	bl	12ea8 <__assert_fail@plt+0x1de4>
   12228:	ldr	r7, [r6, #24]
   1222c:	cmp	r7, r4
   12230:	beq	11bec <__assert_fail@plt+0xb28>
   12234:	ldr	r1, [r9, #32]
   12238:	mov	r0, r7
   1223c:	bl	12ea8 <__assert_fail@plt+0x1de4>
   12240:	ldr	r7, [r7, #24]
   12244:	cmp	r7, r4
   12248:	bne	12234 <__assert_fail@plt+0x1170>
   1224c:	b	11bec <__assert_fail@plt+0xb28>
   12250:	ldrb	r7, [r9, #3]
   12254:	cmp	r7, #0
   12258:	beq	122e8 <__assert_fail@plt+0x1224>
   1225c:	ldr	r7, [r9, #44]	; 0x2c
   12260:	ldr	r6, [r9, #60]	; 0x3c
   12264:	cmp	r3, #0
   12268:	movne	r6, r7
   1226c:	cmp	r0, r2
   12270:	str	r6, [r9, #32]
   12274:	bne	121f4 <__assert_fail@plt+0x1130>
   12278:	ldr	r2, [r9, #16]
   1227c:	add	r0, r2, r0
   12280:	cmp	r7, r0
   12284:	blt	121f4 <__assert_fail@plt+0x1130>
   12288:	cmn	r1, #1
   1228c:	movw	r6, #42216	; 0xa4e8
   12290:	movt	r6, #2
   12294:	cmpne	r1, #10
   12298:	beq	121fc <__assert_fail@plt+0x1138>
   1229c:	mov	r0, r5
   122a0:	bl	127d0 <__assert_fail@plt+0x170c>
   122a4:	mov	r1, r0
   122a8:	ldr	r2, [r9, #48]	; 0x30
   122ac:	ldr	r0, [r9, #56]	; 0x38
   122b0:	cmp	r2, r0
   122b4:	bne	121fc <__assert_fail@plt+0x1138>
   122b8:	ldr	r3, [r9, #16]
   122bc:	ldr	r0, [r9, #44]	; 0x2c
   122c0:	add	r2, r3, r2
   122c4:	cmp	r0, r2
   122c8:	blt	121fc <__assert_fail@plt+0x1138>
   122cc:	cmn	r1, #1
   122d0:	cmpne	r1, #10
   122d4:	beq	121fc <__assert_fail@plt+0x1138>
   122d8:	ldr	r2, [r9, #32]
   122dc:	cmp	r0, r2
   122e0:	beq	1229c <__assert_fail@plt+0x11d8>
   122e4:	b	121fc <__assert_fail@plt+0x1138>
   122e8:	ldrb	r7, [r9, #2]
   122ec:	cmp	r7, #1
   122f0:	bne	12314 <__assert_fail@plt+0x1250>
   122f4:	cmp	r3, #0
   122f8:	beq	12378 <__assert_fail@plt+0x12b4>
   122fc:	ldr	r3, [r9, #44]	; 0x2c
   12300:	ldr	r7, [r9, #60]	; 0x3c
   12304:	cmp	r3, r7
   12308:	mov	r6, r3
   1230c:	beq	1237c <__assert_fail@plt+0x12b8>
   12310:	b	12398 <__assert_fail@plt+0x12d4>
   12314:	ldr	r3, [r9, #60]	; 0x3c
   12318:	movw	r6, #42216	; 0xa4e8
   1231c:	cmp	r0, r2
   12320:	movt	r6, #2
   12324:	str	r3, [r9, #32]
   12328:	bne	121fc <__assert_fail@plt+0x1138>
   1232c:	ldr	r3, [r9, #16]
   12330:	ldr	r2, [r9, #44]	; 0x2c
   12334:	add	r0, r3, r0
   12338:	cmp	r2, r0
   1233c:	blt	121fc <__assert_fail@plt+0x1138>
   12340:	cmn	r1, #1
   12344:	cmpne	r1, #10
   12348:	beq	121fc <__assert_fail@plt+0x1138>
   1234c:	ldr	r0, [r9, #32]
   12350:	cmp	r2, r0
   12354:	bne	121fc <__assert_fail@plt+0x1138>
   12358:	mov	r0, r5
   1235c:	bl	127d0 <__assert_fail@plt+0x170c>
   12360:	mov	r1, r0
   12364:	ldr	r0, [r9, #48]	; 0x30
   12368:	ldr	r2, [r9, #56]	; 0x38
   1236c:	cmp	r0, r2
   12370:	beq	1232c <__assert_fail@plt+0x1268>
   12374:	b	121fc <__assert_fail@plt+0x1138>
   12378:	ldr	r3, [r9, #60]	; 0x3c
   1237c:	ldr	r7, [r9, #32]
   12380:	cmp	r7, r3
   12384:	bne	123a8 <__assert_fail@plt+0x12e4>
   12388:	cmp	r3, #0
   1238c:	mov	r6, #0
   12390:	mov	r7, r3
   12394:	movweq	r6, #3
   12398:	str	r6, [r9, #32]
   1239c:	cmp	r0, r2
   123a0:	bne	121f4 <__assert_fail@plt+0x1130>
   123a4:	b	123b4 <__assert_fail@plt+0x12f0>
   123a8:	mov	r7, r3
   123ac:	cmp	r0, r2
   123b0:	bne	121f4 <__assert_fail@plt+0x1130>
   123b4:	ldr	r3, [r9, #16]
   123b8:	ldr	r2, [r9, #44]	; 0x2c
   123bc:	movw	r6, #42216	; 0xa4e8
   123c0:	movt	r6, #2
   123c4:	add	r0, r3, r0
   123c8:	cmp	r2, r0
   123cc:	blt	121fc <__assert_fail@plt+0x1138>
   123d0:	cmn	r1, #1
   123d4:	beq	121fc <__assert_fail@plt+0x1138>
   123d8:	cmp	r1, #10
   123dc:	cmpne	r2, r7
   123e0:	beq	121fc <__assert_fail@plt+0x1138>
   123e4:	mov	r0, r5
   123e8:	bl	127d0 <__assert_fail@plt+0x170c>
   123ec:	mov	r1, r0
   123f0:	ldr	r2, [r9, #48]	; 0x30
   123f4:	ldr	r0, [r9, #56]	; 0x38
   123f8:	cmp	r2, r0
   123fc:	bne	121fc <__assert_fail@plt+0x1138>
   12400:	ldr	r3, [r9, #16]
   12404:	ldr	r0, [r9, #44]	; 0x2c
   12408:	add	r2, r3, r2
   1240c:	cmp	r0, r2
   12410:	blt	121fc <__assert_fail@plt+0x1138>
   12414:	cmn	r1, #1
   12418:	cmpne	r1, #10
   1241c:	beq	121fc <__assert_fail@plt+0x1138>
   12420:	ldr	r2, [r9, #32]
   12424:	cmp	r0, r2
   12428:	beq	123e4 <__assert_fail@plt+0x1320>
   1242c:	b	121fc <__assert_fail@plt+0x1138>
   12430:	mvn	r0, #0
   12434:	mov	r6, #0
   12438:	str	r0, [r9, #36]	; 0x24
   1243c:	ldr	r0, [r5]
   12440:	ands	r4, r0, #32
   12444:	movw	r0, #37200	; 0x9150
   12448:	movt	r0, #2
   1244c:	mvneq	r6, #0
   12450:	ldr	r0, [r0]
   12454:	cmp	r0, r5
   12458:	beq	12494 <__assert_fail@plt+0x13d0>
   1245c:	mov	r0, r5
   12460:	bl	133e4 <__assert_fail@plt+0x2320>
   12464:	cmp	r4, #0
   12468:	bne	1247c <__assert_fail@plt+0x13b8>
   1246c:	cmp	r0, #0
   12470:	beq	1247c <__assert_fail@plt+0x13b8>
   12474:	bl	10fe0 <__errno_location@plt>
   12478:	ldr	r6, [r0]
   1247c:	cmp	r6, #0
   12480:	blt	124a4 <__assert_fail@plt+0x13e0>
   12484:	beq	124b0 <__assert_fail@plt+0x13ec>
   12488:	movw	r5, #31807	; 0x7c3f
   1248c:	movt	r5, #1
   12490:	b	124c8 <__assert_fail@plt+0x1404>
   12494:	mov	r0, r5
   12498:	bl	11088 <clearerr_unlocked@plt>
   1249c:	cmp	r6, #0
   124a0:	bge	12484 <__assert_fail@plt+0x13c0>
   124a4:	lsr	r0, r6, #31
   124a8:	sub	sp, fp, #28
   124ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124b0:	movw	r1, #31476	; 0x7af4
   124b4:	mov	r0, #0
   124b8:	mov	r2, #5
   124bc:	movt	r1, #1
   124c0:	bl	10efc <dcgettext@plt>
   124c4:	mov	r5, r0
   124c8:	ldr	r2, [sp]
   124cc:	mov	r0, #0
   124d0:	mov	r1, #3
   124d4:	bl	1525c <__assert_fail@plt+0x4198>
   124d8:	mov	r3, r0
   124dc:	mov	r0, #0
   124e0:	mov	r1, r6
   124e4:	mov	r2, r5
   124e8:	bl	10f68 <error@plt>
   124ec:	lsr	r0, r6, #31
   124f0:	sub	sp, fp, #28
   124f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124f8:	movw	r0, #31487	; 0x7aff
   124fc:	movw	r1, #31505	; 0x7b11
   12500:	movw	r3, #31515	; 0x7b1b
   12504:	movw	r2, #623	; 0x26f
   12508:	movt	r0, #1
   1250c:	movt	r1, #1
   12510:	movt	r3, #1
   12514:	bl	110c4 <__assert_fail@plt>
   12518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1251c:	add	fp, sp, #28
   12520:	sub	sp, sp, #24
   12524:	movw	r6, #4680	; 0x1248
   12528:	mov	ip, #0
   1252c:	movt	r6, #3
   12530:	ldr	r0, [r6, #40]	; 0x28
   12534:	str	ip, [r0, #20]
   12538:	sub	r7, r0, #28
   1253c:	ldr	r1, [r0, #4]
   12540:	ldr	r3, [r6, #8]
   12544:	str	r1, [sp]
   12548:	movw	r1, #42216	; 0xa4e8
   1254c:	str	r3, [r0, #4]
   12550:	movt	r1, #2
   12554:	cmp	r7, r1
   12558:	bcc	127c0 <__assert_fail@plt+0x16fc>
   1255c:	ldr	r5, [r6, #32]
   12560:	ldr	r2, [r6, #28]
   12564:	ldr	r9, [r6, #52]	; 0x34
   12568:	ldr	r6, [r6, #60]	; 0x3c
   1256c:	mov	r8, r0
   12570:	str	r6, [sp, #8]
   12574:	add	r6, r1, #28
   12578:	str	r5, [sp, #12]
   1257c:	str	r6, [sp, #4]
   12580:	b	125a4 <__assert_fail@plt+0x14e0>
   12584:	tst	r1, #8
   12588:	mov	r4, #2400	; 0x960
   1258c:	movweq	r4, #37220	; 0x9164
   12590:	movteq	r4, #5
   12594:	ldrb	r1, [r8, #-16]
   12598:	tst	r1, #1
   1259c:	beq	1276c <__assert_fail@plt+0x16a8>
   125a0:	b	1279c <__assert_fail@plt+0x16d8>
   125a4:	cmp	r7, r1
   125a8:	str	r7, [sp, #20]
   125ac:	ldr	r1, [sp, #12]
   125b0:	ldr	r7, [sp, #8]
   125b4:	moveq	r1, r7
   125b8:	ldr	r7, [r8, #-24]	; 0xffffffe8
   125bc:	str	r7, [sp, #16]
   125c0:	add	r7, r1, r7
   125c4:	bne	12670 <__assert_fail@plt+0x15ac>
   125c8:	cmp	r9, #0
   125cc:	ble	12670 <__assert_fail@plt+0x15ac>
   125d0:	ldr	r6, [sp, #4]
   125d4:	mvn	sl, #-2147483648	; 0x80000000
   125d8:	cmp	r0, r6
   125dc:	beq	12618 <__assert_fail@plt+0x1554>
   125e0:	sub	r1, r2, r7
   125e4:	add	r1, r1, r1, lsl #2
   125e8:	lsl	r1, r1, #1
   125ec:	mul	r4, r1, r1
   125f0:	ldr	r1, [r6, #24]
   125f4:	cmp	r1, r0
   125f8:	beq	1261c <__assert_fail@plt+0x1558>
   125fc:	ldr	r1, [r6, #16]
   12600:	sub	r1, r7, r1
   12604:	add	r1, r1, r1, lsl #2
   12608:	lsl	r1, r1, #1
   1260c:	mul	r1, r1, r1
   12610:	add	r4, r4, r1, lsr #1
   12614:	b	1261c <__assert_fail@plt+0x1558>
   12618:	mov	r4, #0
   1261c:	ldr	r1, [r6, #20]
   12620:	add	r1, r1, r4
   12624:	sub	r4, r7, r9
   12628:	add	r4, r4, r4, lsl #2
   1262c:	lsl	r4, r4, #1
   12630:	mul	r4, r4, r4
   12634:	add	r4, r1, r4, lsr #1
   12638:	cmp	r4, sl
   1263c:	strlt	r7, [r8, #-12]
   12640:	strlt	r6, [r8, #-4]
   12644:	movlt	sl, r4
   12648:	cmp	r0, r6
   1264c:	beq	126fc <__assert_fail@plt+0x1638>
   12650:	ldr	r1, [r6, #-20]	; 0xffffffec
   12654:	ldr	r4, [r6, #4]
   12658:	add	r6, r6, #28
   1265c:	add	r1, r1, r7
   12660:	add	r7, r1, r4
   12664:	cmp	r7, r3
   12668:	blt	125d8 <__assert_fail@plt+0x1514>
   1266c:	b	126fc <__assert_fail@plt+0x1638>
   12670:	mvn	sl, #-2147483648	; 0x80000000
   12674:	mov	r6, ip
   12678:	add	r4, r0, r6
   1267c:	cmp	r6, #0
   12680:	beq	126bc <__assert_fail@plt+0x15f8>
   12684:	ldr	r1, [r4, #24]
   12688:	sub	r5, r2, r7
   1268c:	add	r5, r5, r5, lsl #2
   12690:	lsl	r5, r5, #1
   12694:	mul	lr, r5, r5
   12698:	cmp	r1, r0
   1269c:	beq	126c0 <__assert_fail@plt+0x15fc>
   126a0:	ldr	r1, [r4, #16]
   126a4:	sub	r1, r7, r1
   126a8:	add	r1, r1, r1, lsl #2
   126ac:	lsl	r1, r1, #1
   126b0:	mul	r1, r1, r1
   126b4:	add	lr, lr, r1, lsr #1
   126b8:	b	126c0 <__assert_fail@plt+0x15fc>
   126bc:	mov	lr, #0
   126c0:	ldr	r1, [r4, #20]
   126c4:	add	r1, r1, lr
   126c8:	cmp	r1, sl
   126cc:	strlt	r7, [r8, #-12]
   126d0:	strlt	r4, [r8, #-4]
   126d4:	movlt	sl, r1
   126d8:	cmp	r6, #0
   126dc:	beq	126fc <__assert_fail@plt+0x1638>
   126e0:	ldr	r1, [r4, #-20]	; 0xffffffec
   126e4:	ldr	r5, [r4, #4]
   126e8:	add	r6, r6, #28
   126ec:	add	r1, r1, r7
   126f0:	add	r7, r1, r5
   126f4:	cmp	r7, r3
   126f8:	blt	12678 <__assert_fail@plt+0x15b4>
   126fc:	ldr	r1, [sp, #20]
   12700:	movw	r6, #42216	; 0xa4e8
   12704:	movt	r6, #2
   12708:	cmp	r1, r6
   1270c:	bls	1278c <__assert_fail@plt+0x16c8>
   12710:	ldrb	r1, [r8, #-44]	; 0xffffffd4
   12714:	tst	r1, #2
   12718:	bne	12584 <__assert_fail@plt+0x14c0>
   1271c:	movw	r4, #3300	; 0xce4
   12720:	tst	r1, #4
   12724:	bne	12760 <__assert_fail@plt+0x169c>
   12728:	ldr	r7, [sp, #20]
   1272c:	add	r1, r6, #28
   12730:	cmp	r7, r1
   12734:	bls	1278c <__assert_fail@plt+0x16c8>
   12738:	ldrb	r1, [r8, #-72]	; 0xffffffb8
   1273c:	movw	r4, #4900	; 0x1324
   12740:	tst	r1, #8
   12744:	beq	12760 <__assert_fail@plt+0x169c>
   12748:	ldr	r1, [r8, #-52]	; 0xffffffcc
   1274c:	movw	r7, #40000	; 0x9c40
   12750:	add	r1, r1, #2
   12754:	sdiv	r1, r7, r1
   12758:	movw	r7, #4900	; 0x1324
   1275c:	add	r4, r1, r7
   12760:	ldrb	r1, [r8, #-16]
   12764:	tst	r1, #1
   12768:	bne	1279c <__assert_fail@plt+0x16d8>
   1276c:	tst	r1, #8
   12770:	beq	127a0 <__assert_fail@plt+0x16dc>
   12774:	ldr	r1, [sp, #16]
   12778:	movw	r7, #22500	; 0x57e4
   1277c:	add	r1, r1, #2
   12780:	sdiv	r1, r7, r1
   12784:	add	r4, r1, r4
   12788:	b	127a0 <__assert_fail@plt+0x16dc>
   1278c:	movw	r4, #4900	; 0x1324
   12790:	ldrb	r1, [r8, #-16]
   12794:	tst	r1, #1
   12798:	beq	1276c <__assert_fail@plt+0x16a8>
   1279c:	sub	r4, r4, #1600	; 0x640
   127a0:	add	r1, r4, sl
   127a4:	sub	ip, ip, #28
   127a8:	str	r1, [r8, #-8]
   127ac:	ldr	r8, [sp, #20]
   127b0:	mov	r1, r6
   127b4:	sub	r7, r8, #28
   127b8:	cmp	r7, r6
   127bc:	bcs	125a4 <__assert_fail@plt+0x14e0>
   127c0:	ldr	r1, [sp]
   127c4:	str	r1, [r0, #4]
   127c8:	sub	sp, fp, #28
   127cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127d4:	add	fp, sp, #28
   127d8:	sub	sp, sp, #20
   127dc:	movw	r6, #4680	; 0x1248
   127e0:	movw	r2, #37216	; 0x9160
   127e4:	mov	r5, r1
   127e8:	mov	r4, r0
   127ec:	movw	r1, #5000	; 0x1388
   127f0:	movt	r6, #3
   127f4:	movt	r2, #2
   127f8:	ldr	r0, [r6, #40]	; 0x28
   127fc:	add	r8, r2, r1
   12800:	movw	r2, #42216	; 0xa4e8
   12804:	movw	r1, #27944	; 0x6d28
   12808:	movt	r2, #2
   1280c:	add	r1, r2, r1
   12810:	stm	sp, {r1, r8}
   12814:	ldr	r1, [r6, #64]	; 0x40
   12818:	str	r1, [r0]
   1281c:	cmp	r1, r8
   12820:	bne	1289c <__assert_fail@plt+0x17d8>
   12824:	b	12834 <__assert_fail@plt+0x1770>
   12828:	ldr	r1, [r6, #64]	; 0x40
   1282c:	cmp	r1, r8
   12830:	bne	1289c <__assert_fail@plt+0x17d8>
   12834:	ldrb	r0, [r6, #1]
   12838:	cmp	r0, #1
   1283c:	beq	1288c <__assert_fail@plt+0x17c8>
   12840:	ldrb	r0, [r6, #3]
   12844:	cmp	r0, #1
   12848:	bne	12854 <__assert_fail@plt+0x1790>
   1284c:	ldr	r0, [r6, #44]	; 0x2c
   12850:	b	12890 <__assert_fail@plt+0x17cc>
   12854:	ldrb	r0, [r6, #2]
   12858:	cmp	r0, #1
   1285c:	bne	1288c <__assert_fail@plt+0x17c8>
   12860:	ldr	r0, [r6, #44]	; 0x2c
   12864:	ldr	r1, [r6, #60]	; 0x3c
   12868:	cmp	r0, r1
   1286c:	bne	12890 <__assert_fail@plt+0x17cc>
   12870:	ldr	r1, [r6, #32]
   12874:	cmp	r1, r0
   12878:	bne	12894 <__assert_fail@plt+0x17d0>
   1287c:	cmp	r0, #0
   12880:	mov	r0, #0
   12884:	movweq	r0, #3
   12888:	b	12890 <__assert_fail@plt+0x17cc>
   1288c:	ldr	r0, [r6, #60]	; 0x3c
   12890:	str	r0, [r6, #32]
   12894:	bl	12d30 <__assert_fail@plt+0x1c6c>
   12898:	ldr	r1, [r6, #64]	; 0x40
   1289c:	add	r0, r1, #1
   128a0:	str	r0, [r6, #64]	; 0x40
   128a4:	strb	r5, [r1]
   128a8:	ldmib	r4, {r0, r1}
   128ac:	cmp	r0, r1
   128b0:	bcs	128e0 <__assert_fail@plt+0x181c>
   128b4:	add	r1, r0, #1
   128b8:	str	r1, [r4, #4]
   128bc:	ldrb	r5, [r0]
   128c0:	bl	10fb0 <__ctype_b_loc@plt>
   128c4:	mov	r7, r0
   128c8:	ldr	r0, [r0]
   128cc:	add	r0, r0, r5, lsl #1
   128d0:	ldrb	r0, [r0, #1]
   128d4:	tst	r0, #32
   128d8:	beq	12828 <__assert_fail@plt+0x1764>
   128dc:	b	12900 <__assert_fail@plt+0x183c>
   128e0:	mov	r0, r4
   128e4:	bl	1104c <__uflow@plt>
   128e8:	mov	r5, r0
   128ec:	cmn	r0, #1
   128f0:	bne	128c0 <__assert_fail@plt+0x17fc>
   128f4:	mvn	r5, #0
   128f8:	bl	10fb0 <__ctype_b_loc@plt>
   128fc:	mov	r7, r0
   12900:	ldr	r8, [r6, #40]	; 0x28
   12904:	ldr	sl, [r6, #64]	; 0x40
   12908:	mov	r2, #6
   1290c:	ldr	r9, [r8]
   12910:	sub	r1, sl, r9
   12914:	str	r1, [r8, #4]
   12918:	str	r1, [sp, #12]
   1291c:	ldr	r0, [r6, #44]	; 0x2c
   12920:	add	r0, r0, r1
   12924:	str	r0, [r6, #44]	; 0x2c
   12928:	str	r0, [sp, #16]
   1292c:	ldrb	r0, [sl, #-1]!
   12930:	ldrb	r1, [r9]
   12934:	str	r0, [sp, #8]
   12938:	movw	r0, #31543	; 0x7b37
   1293c:	movt	r0, #1
   12940:	bl	11028 <memchr@plt>
   12944:	ldrb	r1, [r8, #12]
   12948:	cmp	r0, #0
   1294c:	movwne	r0, #1
   12950:	bic	r1, r1, #1
   12954:	orr	r1, r1, r0
   12958:	strb	r1, [r8, #12]
   1295c:	ldr	r0, [r7]
   12960:	mov	r7, r1
   12964:	ldr	r1, [sp, #8]
   12968:	ldrb	r0, [r0, r1, lsl #1]
   1296c:	lsr	r0, r0, #2
   12970:	bfi	r7, r0, #2, #1
   12974:	ldr	r0, [sp, #12]
   12978:	strb	r7, [r8, #12]
   1297c:	cmp	r0, #2
   12980:	blt	129a8 <__assert_fail@plt+0x18e4>
   12984:	ldrb	r1, [sl]
   12988:	movw	r0, #31549	; 0x7b3d
   1298c:	mov	r2, #5
   12990:	movt	r0, #1
   12994:	bl	11028 <memchr@plt>
   12998:	cmp	r0, #0
   1299c:	subne	sl, sl, #1
   129a0:	cmpne	sl, r9
   129a4:	bhi	12984 <__assert_fail@plt+0x18c0>
   129a8:	ldrb	r1, [sl]
   129ac:	movw	r0, #31554	; 0x7b42
   129b0:	mov	r2, #4
   129b4:	movt	r0, #1
   129b8:	bl	11028 <memchr@plt>
   129bc:	cmp	r0, #0
   129c0:	and	r1, r7, #253	; 0xfd
   129c4:	mov	r7, #1
   129c8:	movwne	r0, #1
   129cc:	orr	r0, r1, r0, lsl #1
   129d0:	strb	r0, [r8, #12]
   129d4:	ldr	r8, [sp, #4]
   129d8:	cmp	r5, #9
   129dc:	bne	129f8 <__assert_fail@plt+0x1934>
   129e0:	b	12a1c <__assert_fail@plt+0x1958>
   129e4:	add	r1, r0, #1
   129e8:	str	r1, [r4, #4]
   129ec:	ldrb	r5, [r0]
   129f0:	cmp	r5, #9
   129f4:	beq	12a1c <__assert_fail@plt+0x1958>
   129f8:	cmp	r5, #32
   129fc:	bne	12a5c <__assert_fail@plt+0x1998>
   12a00:	ldr	r0, [r6, #44]	; 0x2c
   12a04:	add	r0, r0, #1
   12a08:	str	r0, [r6, #44]	; 0x2c
   12a0c:	ldmib	r4, {r0, r1}
   12a10:	cmp	r0, r1
   12a14:	bcc	129e4 <__assert_fail@plt+0x1920>
   12a18:	b	12a44 <__assert_fail@plt+0x1980>
   12a1c:	strb	r7, [r6, #4]
   12a20:	ldr	r0, [r6, #44]	; 0x2c
   12a24:	asr	r1, r0, #31
   12a28:	add	r0, r0, r1, lsr #29
   12a2c:	bic	r0, r0, #7
   12a30:	add	r0, r0, #8
   12a34:	str	r0, [r6, #44]	; 0x2c
   12a38:	ldmib	r4, {r0, r1}
   12a3c:	cmp	r0, r1
   12a40:	bcc	129e4 <__assert_fail@plt+0x1920>
   12a44:	mov	r0, r4
   12a48:	bl	1104c <__uflow@plt>
   12a4c:	mov	r5, r0
   12a50:	cmp	r5, #9
   12a54:	bne	129f8 <__assert_fail@plt+0x1934>
   12a58:	b	12a1c <__assert_fail@plt+0x1958>
   12a5c:	ldr	r0, [r6, #44]	; 0x2c
   12a60:	ldr	r2, [sp, #16]
   12a64:	ldr	r1, [r6, #40]	; 0x28
   12a68:	cmn	r5, #1
   12a6c:	sub	r3, r0, r2
   12a70:	str	r3, [r1, #8]
   12a74:	ldrb	r2, [r1, #12]
   12a78:	beq	12a90 <__assert_fail@plt+0x19cc>
   12a7c:	mov	r7, #0
   12a80:	tst	r2, #2
   12a84:	beq	12aa8 <__assert_fail@plt+0x19e4>
   12a88:	cmp	r5, #10
   12a8c:	bne	12a9c <__assert_fail@plt+0x19d8>
   12a90:	orr	r2, r2, #8
   12a94:	strb	r2, [r1, #12]
   12a98:	b	12ac4 <__assert_fail@plt+0x1a00>
   12a9c:	cmp	r3, #1
   12aa0:	mov	r7, #0
   12aa4:	movwgt	r7, #1
   12aa8:	and	r2, r2, #247	; 0xf7
   12aac:	cmp	r5, #10
   12ab0:	orr	r2, r2, r7, lsl #3
   12ab4:	strb	r2, [r1, #12]
   12ab8:	ldrbne	r3, [r6]
   12abc:	cmpne	r3, #1
   12ac0:	bne	12ad4 <__assert_fail@plt+0x1a10>
   12ac4:	tst	r2, #8
   12ac8:	mov	r2, #2
   12acc:	movweq	r2, #1
   12ad0:	str	r2, [r1, #8]
   12ad4:	ldr	r2, [sp]
   12ad8:	cmp	r1, r2
   12adc:	bne	12b44 <__assert_fail@plt+0x1a80>
   12ae0:	ldrb	r1, [r6, #1]
   12ae4:	cmp	r1, #1
   12ae8:	bne	12af4 <__assert_fail@plt+0x1a30>
   12aec:	ldr	r0, [r6, #60]	; 0x3c
   12af0:	b	12b38 <__assert_fail@plt+0x1a74>
   12af4:	ldrb	r1, [r6, #3]
   12af8:	cmp	r1, #0
   12afc:	bne	12b38 <__assert_fail@plt+0x1a74>
   12b00:	ldrb	r2, [r6, #2]
   12b04:	ldr	r1, [r6, #60]	; 0x3c
   12b08:	cmp	r2, #1
   12b0c:	bne	12b34 <__assert_fail@plt+0x1a70>
   12b10:	cmp	r0, r1
   12b14:	bne	12b38 <__assert_fail@plt+0x1a74>
   12b18:	ldr	r1, [r6, #32]
   12b1c:	cmp	r1, r0
   12b20:	bne	12b3c <__assert_fail@plt+0x1a78>
   12b24:	cmp	r0, #0
   12b28:	mov	r0, #0
   12b2c:	movweq	r0, #3
   12b30:	b	12b38 <__assert_fail@plt+0x1a74>
   12b34:	mov	r0, r1
   12b38:	str	r0, [r6, #32]
   12b3c:	bl	12d30 <__assert_fail@plt+0x1c6c>
   12b40:	ldr	r1, [r6, #40]	; 0x28
   12b44:	cmp	r5, #10
   12b48:	add	r0, r1, #28
   12b4c:	cmnne	r5, #1
   12b50:	str	r0, [r6, #40]	; 0x28
   12b54:	bne	12814 <__assert_fail@plt+0x1750>
   12b58:	mov	r0, #0
   12b5c:	str	r0, [r6, #44]	; 0x2c
   12b60:	ldmib	r4, {r0, r1}
   12b64:	cmp	r0, r1
   12b68:	bcs	12b88 <__assert_fail@plt+0x1ac4>
   12b6c:	add	r1, r0, #1
   12b70:	str	r1, [r4, #4]
   12b74:	ldrb	r0, [r0]
   12b78:	mov	r5, #1
   12b7c:	cmp	r0, #9
   12b80:	bne	12bb4 <__assert_fail@plt+0x1af0>
   12b84:	b	12bd8 <__assert_fail@plt+0x1b14>
   12b88:	mov	r0, r4
   12b8c:	bl	1104c <__uflow@plt>
   12b90:	mov	r5, #1
   12b94:	cmp	r0, #9
   12b98:	bne	12bb4 <__assert_fail@plt+0x1af0>
   12b9c:	b	12bd8 <__assert_fail@plt+0x1b14>
   12ba0:	add	r1, r0, #1
   12ba4:	str	r1, [r4, #4]
   12ba8:	ldrb	r0, [r0]
   12bac:	cmp	r0, #9
   12bb0:	beq	12bd8 <__assert_fail@plt+0x1b14>
   12bb4:	cmp	r0, #32
   12bb8:	bne	12c14 <__assert_fail@plt+0x1b50>
   12bbc:	ldr	r0, [r6, #44]	; 0x2c
   12bc0:	add	r0, r0, #1
   12bc4:	str	r0, [r6, #44]	; 0x2c
   12bc8:	ldmib	r4, {r0, r1}
   12bcc:	cmp	r0, r1
   12bd0:	bcc	12ba0 <__assert_fail@plt+0x1adc>
   12bd4:	b	12c00 <__assert_fail@plt+0x1b3c>
   12bd8:	strb	r5, [r6, #4]
   12bdc:	ldr	r0, [r6, #44]	; 0x2c
   12be0:	asr	r1, r0, #31
   12be4:	add	r0, r0, r1, lsr #29
   12be8:	bic	r0, r0, #7
   12bec:	add	r0, r0, #8
   12bf0:	str	r0, [r6, #44]	; 0x2c
   12bf4:	ldmib	r4, {r0, r1}
   12bf8:	cmp	r0, r1
   12bfc:	bcc	12ba0 <__assert_fail@plt+0x1adc>
   12c00:	mov	r0, r4
   12c04:	bl	1104c <__uflow@plt>
   12c08:	cmp	r0, #9
   12c0c:	bne	12bb4 <__assert_fail@plt+0x1af0>
   12c10:	b	12bd8 <__assert_fail@plt+0x1b14>
   12c14:	ldr	r1, [r6, #24]
   12c18:	cmp	r1, #0
   12c1c:	beq	12d14 <__assert_fail@plt+0x1c50>
   12c20:	ldr	r1, [r6, #44]	; 0x2c
   12c24:	ldr	r2, [r6, #12]
   12c28:	str	r1, [r6, #48]	; 0x30
   12c2c:	ldrb	r1, [r2]
   12c30:	cmp	r1, #0
   12c34:	beq	12c90 <__assert_fail@plt+0x1bcc>
   12c38:	add	r5, r2, #1
   12c3c:	uxtb	r1, r1
   12c40:	cmp	r0, r1
   12c44:	bne	12d28 <__assert_fail@plt+0x1c64>
   12c48:	ldr	r0, [r6, #44]	; 0x2c
   12c4c:	add	r0, r0, #1
   12c50:	str	r0, [r6, #44]	; 0x2c
   12c54:	ldmib	r4, {r0, r1}
   12c58:	cmp	r0, r1
   12c5c:	bcs	12c7c <__assert_fail@plt+0x1bb8>
   12c60:	add	r1, r0, #1
   12c64:	str	r1, [r4, #4]
   12c68:	ldrb	r0, [r0]
   12c6c:	ldrb	r1, [r5], #1
   12c70:	cmp	r1, #0
   12c74:	bne	12c3c <__assert_fail@plt+0x1b78>
   12c78:	b	12c90 <__assert_fail@plt+0x1bcc>
   12c7c:	mov	r0, r4
   12c80:	bl	1104c <__uflow@plt>
   12c84:	ldrb	r1, [r5], #1
   12c88:	cmp	r1, #0
   12c8c:	bne	12c3c <__assert_fail@plt+0x1b78>
   12c90:	mov	r5, #1
   12c94:	cmp	r0, #9
   12c98:	bne	12cb4 <__assert_fail@plt+0x1bf0>
   12c9c:	b	12cd8 <__assert_fail@plt+0x1c14>
   12ca0:	add	r1, r0, #1
   12ca4:	str	r1, [r4, #4]
   12ca8:	ldrb	r0, [r0]
   12cac:	cmp	r0, #9
   12cb0:	beq	12cd8 <__assert_fail@plt+0x1c14>
   12cb4:	cmp	r0, #32
   12cb8:	bne	12d28 <__assert_fail@plt+0x1c64>
   12cbc:	ldr	r0, [r6, #44]	; 0x2c
   12cc0:	add	r0, r0, #1
   12cc4:	str	r0, [r6, #44]	; 0x2c
   12cc8:	ldmib	r4, {r0, r1}
   12ccc:	cmp	r0, r1
   12cd0:	bcc	12ca0 <__assert_fail@plt+0x1bdc>
   12cd4:	b	12d00 <__assert_fail@plt+0x1c3c>
   12cd8:	strb	r5, [r6, #4]
   12cdc:	ldr	r0, [r6, #44]	; 0x2c
   12ce0:	asr	r1, r0, #31
   12ce4:	add	r0, r0, r1, lsr #29
   12ce8:	bic	r0, r0, #7
   12cec:	add	r0, r0, #8
   12cf0:	str	r0, [r6, #44]	; 0x2c
   12cf4:	ldmib	r4, {r0, r1}
   12cf8:	cmp	r0, r1
   12cfc:	bcc	12ca0 <__assert_fail@plt+0x1bdc>
   12d00:	mov	r0, r4
   12d04:	bl	1104c <__uflow@plt>
   12d08:	cmp	r0, #9
   12d0c:	bne	12cb4 <__assert_fail@plt+0x1bf0>
   12d10:	b	12cd8 <__assert_fail@plt+0x1c14>
   12d14:	ldr	r1, [r6, #20]
   12d18:	ldr	r2, [r6, #44]	; 0x2c
   12d1c:	cmp	r1, r2
   12d20:	movlt	r2, r1
   12d24:	str	r2, [r6, #48]	; 0x30
   12d28:	sub	sp, fp, #28
   12d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d30:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12d34:	add	fp, sp, #24
   12d38:	movw	r9, #4680	; 0x1248
   12d3c:	movw	r8, #42216	; 0xa4e8
   12d40:	movt	r9, #3
   12d44:	movt	r8, #2
   12d48:	ldr	r6, [r9, #40]	; 0x28
   12d4c:	cmp	r6, r8
   12d50:	beq	12db0 <__assert_fail@plt+0x1cec>
   12d54:	bl	12518 <__assert_fail@plt+0x1454>
   12d58:	ldr	r4, [r8, #24]
   12d5c:	cmp	r4, r6
   12d60:	beq	12de0 <__assert_fail@plt+0x1d1c>
   12d64:	ldr	r3, [r4, #20]
   12d68:	mvn	r2, #-2147483648	; 0x80000000
   12d6c:	mov	r5, r6
   12d70:	mov	r1, r2
   12d74:	ldr	r0, [r4, #24]
   12d78:	ldr	r7, [r0, #20]
   12d7c:	sub	r3, r3, r7
   12d80:	cmp	r3, r2
   12d84:	movlt	r1, r3
   12d88:	cmn	r1, #-2147483639	; 0x80000009
   12d8c:	addlt	r1, r1, #9
   12d90:	cmp	r3, r2
   12d94:	mov	r3, r7
   12d98:	movlt	r5, r4
   12d9c:	cmp	r0, r6
   12da0:	mov	r4, r0
   12da4:	mov	r2, r1
   12da8:	bne	12d74 <__assert_fail@plt+0x1cb0>
   12dac:	b	12de4 <__assert_fail@plt+0x1d20>
   12db0:	ldr	r0, [r9, #64]	; 0x40
   12db4:	movw	r4, #37216	; 0x9160
   12db8:	mov	r1, #1
   12dbc:	movt	r4, #2
   12dc0:	sub	r2, r0, r4
   12dc4:	movw	r0, #37204	; 0x9154
   12dc8:	movt	r0, #2
   12dcc:	ldr	r3, [r0]
   12dd0:	mov	r0, r4
   12dd4:	bl	10ee4 <fwrite_unlocked@plt>
   12dd8:	str	r4, [r9, #64]	; 0x40
   12ddc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12de0:	mov	r5, r6
   12de4:	ldr	r1, [r9, #60]	; 0x3c
   12de8:	mov	r0, r8
   12dec:	bl	12ea8 <__assert_fail@plt+0x1de4>
   12df0:	ldr	r6, [r8, #24]
   12df4:	cmp	r6, r5
   12df8:	beq	12e14 <__assert_fail@plt+0x1d50>
   12dfc:	ldr	r1, [r9, #32]
   12e00:	mov	r0, r6
   12e04:	bl	12ea8 <__assert_fail@plt+0x1de4>
   12e08:	ldr	r6, [r6, #24]
   12e0c:	cmp	r6, r5
   12e10:	bne	12dfc <__assert_fail@plt+0x1d38>
   12e14:	ldr	r1, [r5]
   12e18:	ldr	r4, [r9, #64]	; 0x40
   12e1c:	movw	r6, #37216	; 0x9160
   12e20:	movt	r6, #2
   12e24:	mov	r0, r6
   12e28:	sub	r2, r4, r1
   12e2c:	bl	10e9c <memmove@plt>
   12e30:	ldr	r0, [r5]
   12e34:	sub	r0, r6, r0
   12e38:	add	r1, r4, r0
   12e3c:	str	r1, [r9, #64]	; 0x40
   12e40:	ldr	r6, [r9, #40]	; 0x28
   12e44:	cmp	r5, r6
   12e48:	bhi	12e68 <__assert_fail@plt+0x1da4>
   12e4c:	mov	r1, r5
   12e50:	ldr	r2, [r1]
   12e54:	add	r2, r2, r0
   12e58:	str	r2, [r1], #28
   12e5c:	ldr	r6, [r9, #40]	; 0x28
   12e60:	cmp	r1, r6
   12e64:	bls	12e50 <__assert_fail@plt+0x1d8c>
   12e68:	rsb	r0, r5, #28
   12e6c:	mov	r1, r5
   12e70:	add	r2, r0, r6
   12e74:	mov	r0, r8
   12e78:	bl	10e9c <memmove@plt>
   12e7c:	movw	r1, #56173	; 0xdb6d
   12e80:	sub	r0, r5, r8
   12e84:	movt	r1, #28086	; 0x6db6
   12e88:	smmul	r1, r0, r1
   12e8c:	sub	r0, r1, r0
   12e90:	asr	r1, r0, #4
   12e94:	add	r0, r1, r0, lsr #31
   12e98:	rsb	r0, r0, r0, lsl #3
   12e9c:	add	r0, r6, r0, lsl #2
   12ea0:	str	r0, [r9, #40]	; 0x28
   12ea4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eac:	add	fp, sp, #28
   12eb0:	sub	sp, sp, #4
   12eb4:	movw	r9, #4680	; 0x1248
   12eb8:	mov	r8, r1
   12ebc:	mov	r1, #0
   12ec0:	mov	r6, r0
   12ec4:	movt	r9, #3
   12ec8:	str	r1, [r9, #68]	; 0x44
   12ecc:	ldrb	r2, [r9, #4]
   12ed0:	ldr	r4, [r9, #56]	; 0x38
   12ed4:	cmp	r2, #1
   12ed8:	bne	12f50 <__assert_fail@plt+0x1e8c>
   12edc:	cmp	r4, #8
   12ee0:	blt	12f50 <__assert_fail@plt+0x1e8c>
   12ee4:	asr	r0, r4, #31
   12ee8:	movw	r5, #37204	; 0x9154
   12eec:	mov	r1, #0
   12ef0:	mov	sl, #9
   12ef4:	add	r0, r4, r0, lsr #29
   12ef8:	movt	r5, #2
   12efc:	bic	r7, r0, #7
   12f00:	b	12f14 <__assert_fail@plt+0x1e50>
   12f04:	mov	r1, #9
   12f08:	bl	11058 <__overflow@plt>
   12f0c:	ldr	r1, [r9, #68]	; 0x44
   12f10:	b	12f34 <__assert_fail@plt+0x1e70>
   12f14:	ldr	r0, [r5]
   12f18:	ldr	r2, [r0, #20]
   12f1c:	ldr	r3, [r0, #24]
   12f20:	cmp	r2, r3
   12f24:	bcs	12f04 <__assert_fail@plt+0x1e40>
   12f28:	add	r3, r2, #1
   12f2c:	str	r3, [r0, #20]
   12f30:	strb	sl, [r2]
   12f34:	asr	r0, r1, #31
   12f38:	add	r0, r1, r0, lsr #29
   12f3c:	bic	r0, r0, #7
   12f40:	add	r1, r0, #8
   12f44:	cmp	r1, r7
   12f48:	str	r1, [r9, #68]	; 0x44
   12f4c:	blt	12f14 <__assert_fail@plt+0x1e50>
   12f50:	cmp	r1, r4
   12f54:	bge	12fb4 <__assert_fail@plt+0x1ef0>
   12f58:	movw	r7, #37204	; 0x9154
   12f5c:	mov	r5, #32
   12f60:	movt	r7, #2
   12f64:	ldr	r0, [r7]
   12f68:	ldr	r2, [r0, #20]
   12f6c:	ldr	r3, [r0, #24]
   12f70:	cmp	r2, r3
   12f74:	bcs	12f98 <__assert_fail@plt+0x1ed4>
   12f78:	add	r3, r2, #1
   12f7c:	str	r3, [r0, #20]
   12f80:	strb	r5, [r2]
   12f84:	add	r1, r1, #1
   12f88:	cmp	r1, r4
   12f8c:	str	r1, [r9, #68]	; 0x44
   12f90:	blt	12f64 <__assert_fail@plt+0x1ea0>
   12f94:	b	12fb4 <__assert_fail@plt+0x1ef0>
   12f98:	mov	r1, #32
   12f9c:	bl	11058 <__overflow@plt>
   12fa0:	ldr	r1, [r9, #68]	; 0x44
   12fa4:	add	r1, r1, #1
   12fa8:	cmp	r1, r4
   12fac:	str	r1, [r9, #68]	; 0x44
   12fb0:	blt	12f64 <__assert_fail@plt+0x1ea0>
   12fb4:	movw	r7, #37204	; 0x9154
   12fb8:	ldr	r0, [r9, #12]
   12fbc:	movt	r7, #2
   12fc0:	ldr	r1, [r7]
   12fc4:	bl	10e60 <fputs_unlocked@plt>
   12fc8:	ldr	r0, [r9, #24]
   12fcc:	ldr	r1, [r9, #68]	; 0x44
   12fd0:	add	r1, r1, r0
   12fd4:	str	r1, [r9, #68]	; 0x44
   12fd8:	ldrb	r0, [r9, #4]
   12fdc:	cmp	r0, #1
   12fe0:	bne	13010 <__assert_fail@plt+0x1f4c>
   12fe4:	asr	r0, r8, #31
   12fe8:	add	r0, r8, r0, lsr #29
   12fec:	bic	r4, r0, #7
   12ff0:	cmp	r1, r4
   12ff4:	bge	13010 <__assert_fail@plt+0x1f4c>
   12ff8:	add	r0, r1, #1
   12ffc:	mov	ip, r6
   13000:	cmp	r0, r4
   13004:	bge	13070 <__assert_fail@plt+0x1fac>
   13008:	mov	r5, #9
   1300c:	b	13034 <__assert_fail@plt+0x1f70>
   13010:	mov	ip, r6
   13014:	cmp	r1, r8
   13018:	blt	13078 <__assert_fail@plt+0x1fb4>
   1301c:	b	130d0 <__assert_fail@plt+0x200c>
   13020:	mov	r1, #9
   13024:	bl	11058 <__overflow@plt>
   13028:	ldr	r1, [r9, #68]	; 0x44
   1302c:	mov	ip, r6
   13030:	b	13054 <__assert_fail@plt+0x1f90>
   13034:	ldr	r0, [r7]
   13038:	ldr	r2, [r0, #20]
   1303c:	ldr	r3, [r0, #24]
   13040:	cmp	r2, r3
   13044:	bcs	13020 <__assert_fail@plt+0x1f5c>
   13048:	add	r3, r2, #1
   1304c:	str	r3, [r0, #20]
   13050:	strb	r5, [r2]
   13054:	asr	r0, r1, #31
   13058:	add	r0, r1, r0, lsr #29
   1305c:	bic	r0, r0, #7
   13060:	add	r1, r0, #8
   13064:	cmp	r1, r4
   13068:	str	r1, [r9, #68]	; 0x44
   1306c:	blt	13034 <__assert_fail@plt+0x1f70>
   13070:	cmp	r1, r8
   13074:	bge	130d0 <__assert_fail@plt+0x200c>
   13078:	mov	r4, #32
   1307c:	ldr	r0, [r7]
   13080:	ldr	r2, [r0, #20]
   13084:	ldr	r3, [r0, #24]
   13088:	cmp	r2, r3
   1308c:	bcs	130b0 <__assert_fail@plt+0x1fec>
   13090:	add	r3, r2, #1
   13094:	str	r3, [r0, #20]
   13098:	strb	r4, [r2]
   1309c:	add	r1, r1, #1
   130a0:	cmp	r1, r8
   130a4:	str	r1, [r9, #68]	; 0x44
   130a8:	blt	1307c <__assert_fail@plt+0x1fb8>
   130ac:	b	130d0 <__assert_fail@plt+0x200c>
   130b0:	mov	r1, #32
   130b4:	bl	11058 <__overflow@plt>
   130b8:	ldr	r1, [r9, #68]	; 0x44
   130bc:	mov	ip, r6
   130c0:	add	r1, r1, #1
   130c4:	cmp	r1, r8
   130c8:	str	r1, [r9, #68]	; 0x44
   130cc:	blt	1307c <__assert_fail@plt+0x1fb8>
   130d0:	ldr	r0, [ip, #24]
   130d4:	mov	sl, #9
   130d8:	mov	r4, #32
   130dc:	sub	lr, r0, #28
   130e0:	ldr	r5, [ip, #4]
   130e4:	cmp	r5, #0
   130e8:	bne	131f4 <__assert_fail@plt+0x2130>
   130ec:	mov	r0, #0
   130f0:	add	r1, r1, r0
   130f4:	cmp	ip, lr
   130f8:	str	r1, [r9, #68]	; 0x44
   130fc:	beq	1325c <__assert_fail@plt+0x2198>
   13100:	ldr	r0, [ip, #8]
   13104:	add	r5, r0, r1
   13108:	ldrb	r0, [r9, #4]
   1310c:	cmp	r0, #1
   13110:	bne	13198 <__assert_fail@plt+0x20d4>
   13114:	asr	r0, r5, #31
   13118:	add	r0, r5, r0, lsr #29
   1311c:	bic	r8, r0, #7
   13120:	add	r0, r1, #1
   13124:	cmp	r0, r8
   13128:	blt	13144 <__assert_fail@plt+0x2080>
   1312c:	b	13198 <__assert_fail@plt+0x20d4>
   13130:	asr	r0, r1, #31
   13134:	add	r0, r1, r0, lsr #29
   13138:	bic	r0, r0, #7
   1313c:	add	r1, r0, #8
   13140:	str	r1, [r9, #68]	; 0x44
   13144:	cmp	r1, r8
   13148:	bge	13198 <__assert_fail@plt+0x20d4>
   1314c:	ldr	r0, [r7]
   13150:	ldr	r2, [r0, #20]
   13154:	ldr	r3, [r0, #24]
   13158:	cmp	r2, r3
   1315c:	bcs	13170 <__assert_fail@plt+0x20ac>
   13160:	add	r3, r2, #1
   13164:	str	r3, [r0, #20]
   13168:	strb	sl, [r2]
   1316c:	b	13130 <__assert_fail@plt+0x206c>
   13170:	mov	r1, #9
   13174:	str	ip, [sp]
   13178:	mov	r6, lr
   1317c:	bl	11058 <__overflow@plt>
   13180:	ldr	ip, [sp]
   13184:	ldr	r1, [r9, #68]	; 0x44
   13188:	mov	lr, r6
   1318c:	b	13130 <__assert_fail@plt+0x206c>
   13190:	add	r1, r1, #1
   13194:	str	r1, [r9, #68]	; 0x44
   13198:	cmp	r1, r5
   1319c:	bge	131e4 <__assert_fail@plt+0x2120>
   131a0:	ldr	r0, [r7]
   131a4:	ldr	r2, [r0, #20]
   131a8:	ldr	r3, [r0, #24]
   131ac:	cmp	r2, r3
   131b0:	bcs	131c4 <__assert_fail@plt+0x2100>
   131b4:	add	r3, r2, #1
   131b8:	str	r3, [r0, #20]
   131bc:	strb	r4, [r2]
   131c0:	b	13190 <__assert_fail@plt+0x20cc>
   131c4:	mov	r1, #32
   131c8:	mov	r8, ip
   131cc:	mov	r6, lr
   131d0:	bl	11058 <__overflow@plt>
   131d4:	ldr	r1, [r9, #68]	; 0x44
   131d8:	mov	lr, r6
   131dc:	mov	ip, r8
   131e0:	b	13190 <__assert_fail@plt+0x20cc>
   131e4:	add	ip, ip, #28
   131e8:	ldr	r5, [ip, #4]
   131ec:	cmp	r5, #0
   131f0:	beq	130ec <__assert_fail@plt+0x2028>
   131f4:	ldr	r6, [ip]
   131f8:	ldr	r0, [r7]
   131fc:	ldrb	r1, [r6], #1
   13200:	ldr	r2, [r0, #20]
   13204:	ldr	r3, [r0, #24]
   13208:	cmp	r2, r3
   1320c:	bcs	13228 <__assert_fail@plt+0x2164>
   13210:	add	r3, r2, #1
   13214:	str	r3, [r0, #20]
   13218:	strb	r1, [r2]
   1321c:	subs	r5, r5, #1
   13220:	bne	131f8 <__assert_fail@plt+0x2134>
   13224:	b	13244 <__assert_fail@plt+0x2180>
   13228:	str	ip, [sp]
   1322c:	mov	r8, lr
   13230:	bl	11058 <__overflow@plt>
   13234:	ldr	ip, [sp]
   13238:	mov	lr, r8
   1323c:	subs	r5, r5, #1
   13240:	bne	131f8 <__assert_fail@plt+0x2134>
   13244:	ldr	r1, [r9, #68]	; 0x44
   13248:	ldr	r0, [ip, #4]
   1324c:	add	r1, r1, r0
   13250:	cmp	ip, lr
   13254:	str	r1, [r9, #68]	; 0x44
   13258:	bne	13100 <__assert_fail@plt+0x203c>
   1325c:	ldr	r0, [r7]
   13260:	str	r1, [r9, #52]	; 0x34
   13264:	ldr	r1, [r0, #20]
   13268:	ldr	r2, [r0, #24]
   1326c:	cmp	r1, r2
   13270:	addcc	r2, r1, #1
   13274:	strcc	r2, [r0, #20]
   13278:	movcc	r0, #10
   1327c:	strbcc	r0, [r1]
   13280:	subcc	sp, fp, #28
   13284:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13288:	mov	r1, #10
   1328c:	sub	sp, fp, #28
   13290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13294:	b	11058 <__overflow@plt>
   13298:	movw	r1, #4752	; 0x1290
   1329c:	movt	r1, #3
   132a0:	str	r0, [r1, #4]
   132a4:	bx	lr
   132a8:	movw	r1, #4752	; 0x1290
   132ac:	movt	r1, #3
   132b0:	strb	r0, [r1]
   132b4:	bx	lr
   132b8:	push	{r4, r5, r6, sl, fp, lr}
   132bc:	add	fp, sp, #16
   132c0:	sub	sp, sp, #8
   132c4:	movw	r0, #37204	; 0x9154
   132c8:	movt	r0, #2
   132cc:	ldr	r0, [r0]
   132d0:	bl	1700c <__assert_fail@plt+0x5f48>
   132d4:	cmp	r0, #0
   132d8:	beq	13300 <__assert_fail@plt+0x223c>
   132dc:	movw	r5, #4752	; 0x1290
   132e0:	movt	r5, #3
   132e4:	ldrb	r0, [r5]
   132e8:	cmp	r0, #0
   132ec:	beq	1332c <__assert_fail@plt+0x2268>
   132f0:	bl	10fe0 <__errno_location@plt>
   132f4:	ldr	r0, [r0]
   132f8:	cmp	r0, #32
   132fc:	bne	1332c <__assert_fail@plt+0x2268>
   13300:	movw	r0, #37192	; 0x9148
   13304:	movt	r0, #2
   13308:	ldr	r0, [r0]
   1330c:	bl	1700c <__assert_fail@plt+0x5f48>
   13310:	cmp	r0, #0
   13314:	subeq	sp, fp, #16
   13318:	popeq	{r4, r5, r6, sl, fp, pc}
   1331c:	movw	r0, #37108	; 0x90f4
   13320:	movt	r0, #2
   13324:	ldr	r0, [r0]
   13328:	bl	10eb4 <_exit@plt>
   1332c:	movw	r1, #31791	; 0x7c2f
   13330:	mov	r0, #0
   13334:	mov	r2, #5
   13338:	movt	r1, #1
   1333c:	bl	10efc <dcgettext@plt>
   13340:	ldr	r6, [r5, #4]
   13344:	mov	r4, r0
   13348:	bl	10fe0 <__errno_location@plt>
   1334c:	ldr	r5, [r0]
   13350:	cmp	r6, #0
   13354:	bne	13370 <__assert_fail@plt+0x22ac>
   13358:	movw	r2, #31807	; 0x7c3f
   1335c:	mov	r0, #0
   13360:	mov	r1, r5
   13364:	mov	r3, r4
   13368:	movt	r2, #1
   1336c:	b	13390 <__assert_fail@plt+0x22cc>
   13370:	mov	r0, r6
   13374:	bl	15180 <__assert_fail@plt+0x40bc>
   13378:	movw	r2, #31803	; 0x7c3b
   1337c:	mov	r3, r0
   13380:	str	r4, [sp]
   13384:	mov	r0, #0
   13388:	mov	r1, r5
   1338c:	movt	r2, #1
   13390:	bl	10f68 <error@plt>
   13394:	movw	r0, #37108	; 0x90f4
   13398:	movt	r0, #2
   1339c:	ldr	r0, [r0]
   133a0:	bl	10eb4 <_exit@plt>
   133a4:	b	10e84 <posix_fadvise64@plt>
   133a8:	cmp	r0, #0
   133ac:	bxeq	lr
   133b0:	push	{r4, sl, fp, lr}
   133b4:	add	fp, sp, #8
   133b8:	sub	sp, sp, #16
   133bc:	mov	r4, r1
   133c0:	bl	11010 <fileno@plt>
   133c4:	mov	r1, #0
   133c8:	mov	r2, #0
   133cc:	mov	r3, #0
   133d0:	str	r1, [sp]
   133d4:	stmib	sp, {r1, r4}
   133d8:	bl	10e84 <posix_fadvise64@plt>
   133dc:	sub	sp, fp, #8
   133e0:	pop	{r4, sl, fp, pc}
   133e4:	push	{r4, r5, r6, sl, fp, lr}
   133e8:	add	fp, sp, #16
   133ec:	sub	sp, sp, #8
   133f0:	mov	r4, r0
   133f4:	bl	11010 <fileno@plt>
   133f8:	cmn	r0, #1
   133fc:	ble	13470 <__assert_fail@plt+0x23ac>
   13400:	mov	r0, r4
   13404:	bl	10f8c <__freading@plt>
   13408:	cmp	r0, #0
   1340c:	beq	13438 <__assert_fail@plt+0x2374>
   13410:	mov	r0, r4
   13414:	bl	11010 <fileno@plt>
   13418:	mov	r1, #1
   1341c:	mov	r2, #0
   13420:	mov	r3, #0
   13424:	str	r1, [sp]
   13428:	bl	10f38 <lseek64@plt>
   1342c:	and	r0, r0, r1
   13430:	cmn	r0, #1
   13434:	beq	13470 <__assert_fail@plt+0x23ac>
   13438:	mov	r0, r4
   1343c:	bl	13480 <__assert_fail@plt+0x23bc>
   13440:	cmp	r0, #0
   13444:	beq	13470 <__assert_fail@plt+0x23ac>
   13448:	bl	10fe0 <__errno_location@plt>
   1344c:	ldr	r6, [r0]
   13450:	mov	r5, r0
   13454:	mov	r0, r4
   13458:	bl	11034 <fclose@plt>
   1345c:	cmp	r6, #0
   13460:	strne	r6, [r5]
   13464:	mvnne	r0, #0
   13468:	sub	sp, fp, #16
   1346c:	pop	{r4, r5, r6, sl, fp, pc}
   13470:	mov	r0, r4
   13474:	sub	sp, fp, #16
   13478:	pop	{r4, r5, r6, sl, fp, lr}
   1347c:	b	11034 <fclose@plt>
   13480:	push	{r4, sl, fp, lr}
   13484:	add	fp, sp, #8
   13488:	sub	sp, sp, #8
   1348c:	mov	r4, r0
   13490:	cmp	r0, #0
   13494:	beq	134b0 <__assert_fail@plt+0x23ec>
   13498:	mov	r0, r4
   1349c:	bl	10f8c <__freading@plt>
   134a0:	cmp	r0, #0
   134a4:	ldrbne	r0, [r4, #1]
   134a8:	tstne	r0, #1
   134ac:	bne	134c0 <__assert_fail@plt+0x23fc>
   134b0:	mov	r0, r4
   134b4:	sub	sp, fp, #8
   134b8:	pop	{r4, sl, fp, lr}
   134bc:	b	10e90 <fflush@plt>
   134c0:	mov	r0, #1
   134c4:	mov	r2, #0
   134c8:	mov	r3, #0
   134cc:	str	r0, [sp]
   134d0:	mov	r0, r4
   134d4:	bl	134e8 <__assert_fail@plt+0x2424>
   134d8:	mov	r0, r4
   134dc:	sub	sp, fp, #8
   134e0:	pop	{r4, sl, fp, lr}
   134e4:	b	10e90 <fflush@plt>
   134e8:	push	{r4, r5, r6, r7, fp, lr}
   134ec:	add	fp, sp, #16
   134f0:	sub	sp, sp, #8
   134f4:	mov	r4, r0
   134f8:	ldr	r0, [r0, #4]
   134fc:	mov	r5, r3
   13500:	mov	r6, r2
   13504:	ldr	r1, [r4, #8]
   13508:	cmp	r1, r0
   1350c:	bne	13528 <__assert_fail@plt+0x2464>
   13510:	ldrd	r0, [r4, #16]
   13514:	cmp	r1, r0
   13518:	bne	13528 <__assert_fail@plt+0x2464>
   1351c:	ldr	r0, [r4, #36]	; 0x24
   13520:	cmp	r0, #0
   13524:	beq	13540 <__assert_fail@plt+0x247c>
   13528:	mov	r0, r4
   1352c:	mov	r2, r6
   13530:	mov	r3, r5
   13534:	sub	sp, fp, #16
   13538:	pop	{r4, r5, r6, r7, fp, lr}
   1353c:	b	11040 <fseeko64@plt>
   13540:	ldr	r7, [fp, #8]
   13544:	mov	r0, r4
   13548:	bl	11010 <fileno@plt>
   1354c:	mov	r2, r6
   13550:	mov	r3, r5
   13554:	str	r7, [sp]
   13558:	bl	10f38 <lseek64@plt>
   1355c:	and	r2, r0, r1
   13560:	cmn	r2, #1
   13564:	mvneq	r0, #0
   13568:	subeq	sp, fp, #16
   1356c:	popeq	{r4, r5, r6, r7, fp, pc}
   13570:	strd	r0, [r4, #80]	; 0x50
   13574:	ldr	r0, [r4]
   13578:	bic	r0, r0, #16
   1357c:	str	r0, [r4]
   13580:	mov	r0, #0
   13584:	sub	sp, fp, #16
   13588:	pop	{r4, r5, r6, r7, fp, pc}
   1358c:	push	{r4, r5, fp, lr}
   13590:	add	fp, sp, #8
   13594:	cmp	r0, #0
   13598:	beq	1362c <__assert_fail@plt+0x2568>
   1359c:	mov	r1, #47	; 0x2f
   135a0:	mov	r4, r0
   135a4:	bl	11070 <strrchr@plt>
   135a8:	cmp	r0, #0
   135ac:	mov	r5, r4
   135b0:	addne	r5, r0, #1
   135b4:	sub	r0, r5, r4
   135b8:	cmp	r0, #7
   135bc:	blt	13610 <__assert_fail@plt+0x254c>
   135c0:	movw	r1, #31866	; 0x7c7a
   135c4:	sub	r0, r5, #7
   135c8:	mov	r2, #7
   135cc:	movt	r1, #1
   135d0:	bl	110ac <strncmp@plt>
   135d4:	cmp	r0, #0
   135d8:	bne	13610 <__assert_fail@plt+0x254c>
   135dc:	movw	r1, #31874	; 0x7c82
   135e0:	mov	r0, r5
   135e4:	mov	r2, #3
   135e8:	movt	r1, #1
   135ec:	bl	110ac <strncmp@plt>
   135f0:	cmp	r0, #0
   135f4:	beq	13600 <__assert_fail@plt+0x253c>
   135f8:	mov	r4, r5
   135fc:	b	13610 <__assert_fail@plt+0x254c>
   13600:	movw	r0, #37176	; 0x9138
   13604:	add	r4, r5, #3
   13608:	movt	r0, #2
   1360c:	str	r4, [r0]
   13610:	movw	r0, #37180	; 0x913c
   13614:	movt	r0, #2
   13618:	str	r4, [r0]
   1361c:	movw	r0, #4760	; 0x1298
   13620:	movt	r0, #3
   13624:	str	r4, [r0]
   13628:	pop	{r4, r5, fp, pc}
   1362c:	movw	r0, #37192	; 0x9148
   13630:	mov	r1, #55	; 0x37
   13634:	mov	r2, #1
   13638:	movt	r0, #2
   1363c:	ldr	r3, [r0]
   13640:	movw	r0, #31810	; 0x7c42
   13644:	movt	r0, #1
   13648:	bl	10f2c <fwrite@plt>
   1364c:	bl	110b8 <abort@plt>
   13650:	push	{r4, r5, r6, sl, fp, lr}
   13654:	add	fp, sp, #16
   13658:	mov	r4, r0
   1365c:	movw	r0, #4768	; 0x12a0
   13660:	movt	r0, #3
   13664:	cmp	r4, #0
   13668:	moveq	r4, r0
   1366c:	bl	10fe0 <__errno_location@plt>
   13670:	ldr	r6, [r0]
   13674:	mov	r5, r0
   13678:	mov	r0, r4
   1367c:	mov	r1, #48	; 0x30
   13680:	bl	16040 <__assert_fail@plt+0x4f7c>
   13684:	str	r6, [r5]
   13688:	pop	{r4, r5, r6, sl, fp, pc}
   1368c:	movw	r1, #4768	; 0x12a0
   13690:	cmp	r0, #0
   13694:	movt	r1, #3
   13698:	movne	r1, r0
   1369c:	ldr	r0, [r1]
   136a0:	bx	lr
   136a4:	movw	r2, #4768	; 0x12a0
   136a8:	cmp	r0, #0
   136ac:	movt	r2, #3
   136b0:	movne	r2, r0
   136b4:	str	r1, [r2]
   136b8:	bx	lr
   136bc:	movw	r3, #4768	; 0x12a0
   136c0:	cmp	r0, #0
   136c4:	movt	r3, #3
   136c8:	movne	r3, r0
   136cc:	ubfx	r0, r1, #5, #3
   136d0:	and	r1, r1, #31
   136d4:	add	r0, r3, r0, lsl #2
   136d8:	ldr	r3, [r0, #8]
   136dc:	eor	r2, r2, r3, lsr r1
   136e0:	and	r2, r2, #1
   136e4:	eor	r2, r3, r2, lsl r1
   136e8:	str	r2, [r0, #8]
   136ec:	mov	r0, #1
   136f0:	and	r0, r0, r3, lsr r1
   136f4:	bx	lr
   136f8:	movw	r2, #4768	; 0x12a0
   136fc:	cmp	r0, #0
   13700:	movt	r2, #3
   13704:	movne	r2, r0
   13708:	ldr	r0, [r2, #4]
   1370c:	str	r1, [r2, #4]
   13710:	bx	lr
   13714:	movw	r3, #4768	; 0x12a0
   13718:	cmp	r0, #0
   1371c:	movt	r3, #3
   13720:	movne	r3, r0
   13724:	cmp	r1, #0
   13728:	mov	r0, #10
   1372c:	cmpne	r2, #0
   13730:	str	r0, [r3]
   13734:	bne	13744 <__assert_fail@plt+0x2680>
   13738:	push	{fp, lr}
   1373c:	mov	fp, sp
   13740:	bl	110b8 <abort@plt>
   13744:	str	r1, [r3, #40]	; 0x28
   13748:	str	r2, [r3, #44]	; 0x2c
   1374c:	bx	lr
   13750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13754:	add	fp, sp, #28
   13758:	sub	sp, sp, #20
   1375c:	mov	r7, r0
   13760:	ldr	r0, [fp, #8]
   13764:	movw	r5, #4768	; 0x12a0
   13768:	mov	r8, r3
   1376c:	mov	r9, r2
   13770:	mov	sl, r1
   13774:	movt	r5, #3
   13778:	cmp	r0, #0
   1377c:	movne	r5, r0
   13780:	bl	10fe0 <__errno_location@plt>
   13784:	mov	r4, r0
   13788:	ldm	r5, {r0, r1}
   1378c:	ldr	r2, [r5, #40]	; 0x28
   13790:	ldr	r3, [r5, #44]	; 0x2c
   13794:	add	r5, r5, #8
   13798:	ldr	r6, [r4]
   1379c:	stm	sp, {r0, r1, r5}
   137a0:	str	r2, [sp, #12]
   137a4:	str	r3, [sp, #16]
   137a8:	mov	r0, r7
   137ac:	mov	r1, sl
   137b0:	mov	r2, r9
   137b4:	mov	r3, r8
   137b8:	bl	137c8 <__assert_fail@plt+0x2704>
   137bc:	str	r6, [r4]
   137c0:	sub	sp, fp, #28
   137c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137cc:	add	fp, sp, #28
   137d0:	sub	sp, sp, #156	; 0x9c
   137d4:	str	r0, [sp, #76]	; 0x4c
   137d8:	ldr	r0, [fp, #12]
   137dc:	mov	r6, r1
   137e0:	str	r3, [sp, #84]	; 0x54
   137e4:	str	r2, [fp, #-84]	; 0xffffffac
   137e8:	and	r1, r0, #4
   137ec:	str	r1, [sp, #24]
   137f0:	and	r1, r0, #1
   137f4:	str	r1, [sp, #28]
   137f8:	ubfx	r8, r0, #1, #1
   137fc:	bl	10f44 <__ctype_get_mb_cur_max@plt>
   13800:	str	r0, [sp, #32]
   13804:	ldr	r0, [fp, #24]
   13808:	ldr	r7, [fp, #8]
   1380c:	mov	r1, #0
   13810:	mov	r2, #0
   13814:	mov	r4, #1
   13818:	str	r1, [sp, #52]	; 0x34
   1381c:	str	r0, [sp, #72]	; 0x48
   13820:	ldr	r0, [fp, #20]
   13824:	str	r0, [sp, #68]	; 0x44
   13828:	mov	r0, #0
   1382c:	str	r0, [sp, #48]	; 0x30
   13830:	mov	r0, #0
   13834:	str	r0, [sp, #92]	; 0x5c
   13838:	mov	r0, #0
   1383c:	str	r0, [fp, #-76]	; 0xffffffb4
   13840:	mov	r0, #0
   13844:	cmp	r7, #10
   13848:	bhi	14b30 <__assert_fail@plt+0x3a6c>
   1384c:	add	r1, pc, #28
   13850:	mov	sl, r6
   13854:	ldr	r6, [sp, #76]	; 0x4c
   13858:	ldr	ip, [fp, #-84]	; 0xffffffac
   1385c:	ldr	lr, [sp, #84]	; 0x54
   13860:	mov	r9, #0
   13864:	mov	r3, #1
   13868:	mov	r5, #0
   1386c:	ldr	pc, [r1, r7, lsl #2]
   13870:	andeq	r3, r1, r0, asr #18
   13874:	andeq	r3, r1, ip, ror r9
   13878:	andeq	r3, r1, r0, asr r9
   1387c:	andeq	r3, r1, r8, lsr r9
   13880:	andeq	r3, r1, r0, ror r9
   13884:	andeq	r3, r1, r4, lsr #19
   13888:	andeq	r3, r1, r0, ror #18
   1388c:			; <UNDEFINED> instruction: 0x00013bb0
   13890:	muleq	r1, ip, r8
   13894:	muleq	r1, ip, r8
   13898:	andeq	r3, r1, r4, asr #22
   1389c:	mov	r9, r4
   138a0:	movw	r4, #31954	; 0x7cd2
   138a4:	mov	r5, r8
   138a8:	mov	r8, r2
   138ac:	mov	r0, #0
   138b0:	mov	r2, #5
   138b4:	movt	r4, #1
   138b8:	mov	r1, r4
   138bc:	bl	10efc <dcgettext@plt>
   138c0:	cmp	r0, r4
   138c4:	str	r0, [sp, #68]	; 0x44
   138c8:	bne	13a58 <__assert_fail@plt+0x2994>
   138cc:	bl	170b8 <__assert_fail@plt+0x5ff4>
   138d0:	ldrb	r1, [r0]
   138d4:	and	r1, r1, #223	; 0xdf
   138d8:	cmp	r1, #71	; 0x47
   138dc:	beq	13a24 <__assert_fail@plt+0x2960>
   138e0:	cmp	r1, #85	; 0x55
   138e4:	bne	13a3c <__assert_fail@plt+0x2978>
   138e8:	ldrb	r1, [r0, #1]
   138ec:	and	r1, r1, #223	; 0xdf
   138f0:	cmp	r1, #84	; 0x54
   138f4:	bne	13a3c <__assert_fail@plt+0x2978>
   138f8:	ldrb	r1, [r0, #2]
   138fc:	and	r1, r1, #223	; 0xdf
   13900:	cmp	r1, #70	; 0x46
   13904:	bne	13a3c <__assert_fail@plt+0x2978>
   13908:	ldrb	r1, [r0, #3]
   1390c:	cmp	r1, #45	; 0x2d
   13910:	ldrbeq	r1, [r0, #4]
   13914:	cmpeq	r1, #56	; 0x38
   13918:	bne	13a3c <__assert_fail@plt+0x2978>
   1391c:	ldrb	r0, [r0, #5]
   13920:	cmp	r0, #0
   13924:	movw	r0, #31958	; 0x7cd6
   13928:	movt	r0, #1
   1392c:	str	r0, [sp, #68]	; 0x44
   13930:	bne	13a3c <__assert_fail@plt+0x2978>
   13934:	b	13a58 <__assert_fail@plt+0x2994>
   13938:	mov	r0, #1
   1393c:	b	1397c <__assert_fail@plt+0x28b8>
   13940:	mov	r7, #0
   13944:	mov	r9, #0
   13948:	mov	r3, r0
   1394c:	b	13a1c <__assert_fail@plt+0x2958>
   13950:	tst	r8, #1
   13954:	bne	1397c <__assert_fail@plt+0x28b8>
   13958:	mov	r3, r0
   1395c:	b	139d4 <__assert_fail@plt+0x2910>
   13960:	mov	r0, #1
   13964:	mov	r9, #0
   13968:	mov	r7, #5
   1396c:	b	139b8 <__assert_fail@plt+0x28f4>
   13970:	mov	r3, #1
   13974:	tst	r8, #1
   13978:	beq	139d4 <__assert_fail@plt+0x2910>
   1397c:	mov	r1, #1
   13980:	mov	r9, #0
   13984:	mov	r7, #2
   13988:	mov	r3, r0
   1398c:	mov	r5, #1
   13990:	str	r1, [fp, #-76]	; 0xffffffb4
   13994:	movw	r1, #31956	; 0x7cd4
   13998:	movt	r1, #1
   1399c:	str	r1, [sp, #92]	; 0x5c
   139a0:	b	13bb0 <__assert_fail@plt+0x2aec>
   139a4:	mov	r7, #5
   139a8:	tst	r8, #1
   139ac:	beq	139f4 <__assert_fail@plt+0x2930>
   139b0:	mov	r0, #1
   139b4:	mov	r9, #0
   139b8:	str	r0, [fp, #-76]	; 0xffffffb4
   139bc:	movw	r0, #31552	; 0x7b40
   139c0:	mov	r3, #1
   139c4:	mov	r5, #1
   139c8:	movt	r0, #1
   139cc:	str	r0, [sp, #92]	; 0x5c
   139d0:	b	13bb0 <__assert_fail@plt+0x2aec>
   139d4:	cmp	sl, #0
   139d8:	mov	r9, #1
   139dc:	mov	r7, #2
   139e0:	movne	r0, #39	; 0x27
   139e4:	strbne	r0, [r6]
   139e8:	movw	r0, #31956	; 0x7cd4
   139ec:	movt	r0, #1
   139f0:	b	13a10 <__assert_fail@plt+0x294c>
   139f4:	cmp	sl, #0
   139f8:	mov	r9, #1
   139fc:	mov	r3, #1
   13a00:	movne	r0, #34	; 0x22
   13a04:	strbne	r0, [r6]
   13a08:	movw	r0, #31552	; 0x7b40
   13a0c:	movt	r0, #1
   13a10:	str	r0, [sp, #92]	; 0x5c
   13a14:	mov	r0, #1
   13a18:	str	r0, [fp, #-76]	; 0xffffffb4
   13a1c:	mov	r5, #0
   13a20:	b	13bb0 <__assert_fail@plt+0x2aec>
   13a24:	ldrb	r1, [r0, #1]
   13a28:	and	r1, r1, #223	; 0xdf
   13a2c:	cmp	r1, #66	; 0x42
   13a30:	ldrbeq	r1, [r0, #2]
   13a34:	cmpeq	r1, #49	; 0x31
   13a38:	beq	14958 <__assert_fail@plt+0x3894>
   13a3c:	movw	r0, #31956	; 0x7cd4
   13a40:	movw	r1, #31552	; 0x7b40
   13a44:	cmp	r7, #9
   13a48:	movt	r0, #1
   13a4c:	movt	r1, #1
   13a50:	moveq	r0, r1
   13a54:	str	r0, [sp, #68]	; 0x44
   13a58:	movw	r4, #31956	; 0x7cd4
   13a5c:	mov	r0, #0
   13a60:	mov	r2, #5
   13a64:	movt	r4, #1
   13a68:	mov	r1, r4
   13a6c:	bl	10efc <dcgettext@plt>
   13a70:	cmp	r0, r4
   13a74:	str	r0, [sp, #72]	; 0x48
   13a78:	beq	13a88 <__assert_fail@plt+0x29c4>
   13a7c:	mov	r4, r9
   13a80:	mov	r2, r8
   13a84:	b	13b40 <__assert_fail@plt+0x2a7c>
   13a88:	bl	170b8 <__assert_fail@plt+0x5ff4>
   13a8c:	ldrb	r1, [r0]
   13a90:	mov	r4, r9
   13a94:	and	r1, r1, #223	; 0xdf
   13a98:	cmp	r1, #71	; 0x47
   13a9c:	beq	13af8 <__assert_fail@plt+0x2a34>
   13aa0:	cmp	r1, #85	; 0x55
   13aa4:	mov	r2, r8
   13aa8:	bne	13b20 <__assert_fail@plt+0x2a5c>
   13aac:	ldrb	r1, [r0, #1]
   13ab0:	and	r1, r1, #223	; 0xdf
   13ab4:	cmp	r1, #84	; 0x54
   13ab8:	bne	13b20 <__assert_fail@plt+0x2a5c>
   13abc:	ldrb	r1, [r0, #2]
   13ac0:	and	r1, r1, #223	; 0xdf
   13ac4:	cmp	r1, #70	; 0x46
   13ac8:	ldrbeq	r1, [r0, #3]
   13acc:	cmpeq	r1, #45	; 0x2d
   13ad0:	bne	13b20 <__assert_fail@plt+0x2a5c>
   13ad4:	ldrb	r1, [r0, #4]
   13ad8:	cmp	r1, #56	; 0x38
   13adc:	ldrbeq	r0, [r0, #5]
   13ae0:	cmpeq	r0, #0
   13ae4:	bne	13b20 <__assert_fail@plt+0x2a5c>
   13ae8:	movw	r0, #31962	; 0x7cda
   13aec:	movt	r0, #1
   13af0:	str	r0, [sp, #72]	; 0x48
   13af4:	b	13b40 <__assert_fail@plt+0x2a7c>
   13af8:	ldrb	r1, [r0, #1]
   13afc:	mov	r2, r8
   13b00:	and	r1, r1, #223	; 0xdf
   13b04:	cmp	r1, #66	; 0x42
   13b08:	bne	13b20 <__assert_fail@plt+0x2a5c>
   13b0c:	ldrb	r1, [r0, #2]
   13b10:	cmp	r1, #49	; 0x31
   13b14:	ldrbeq	r1, [r0, #3]
   13b18:	cmpeq	r1, #56	; 0x38
   13b1c:	beq	1499c <__assert_fail@plt+0x38d8>
   13b20:	movw	r0, #31956	; 0x7cd4
   13b24:	cmp	r7, #9
   13b28:	movt	r0, #1
   13b2c:	mov	r1, r0
   13b30:	movw	r0, #31552	; 0x7b40
   13b34:	movt	r0, #1
   13b38:	moveq	r1, r0
   13b3c:	str	r1, [sp, #72]	; 0x48
   13b40:	mov	r8, r5
   13b44:	mov	r9, #0
   13b48:	tst	r8, #1
   13b4c:	mov	r5, r8
   13b50:	str	r2, [fp, #-48]	; 0xffffffd0
   13b54:	bne	13b8c <__assert_fail@plt+0x2ac8>
   13b58:	ldr	r0, [sp, #68]	; 0x44
   13b5c:	ldrb	r0, [r0]
   13b60:	cmp	r0, #0
   13b64:	beq	13b8c <__assert_fail@plt+0x2ac8>
   13b68:	ldr	r1, [sp, #68]	; 0x44
   13b6c:	mov	r9, #0
   13b70:	add	r1, r1, #1
   13b74:	cmp	r9, sl
   13b78:	strbcc	r0, [r6, r9]
   13b7c:	ldrb	r0, [r1, r9]
   13b80:	add	r9, r9, #1
   13b84:	cmp	r0, #0
   13b88:	bne	13b74 <__assert_fail@plt+0x2ab0>
   13b8c:	ldr	r8, [sp, #72]	; 0x48
   13b90:	mov	r0, r8
   13b94:	bl	10fc8 <strlen@plt>
   13b98:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b9c:	ldr	lr, [sp, #84]	; 0x54
   13ba0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13ba4:	str	r0, [fp, #-76]	; 0xffffffb4
   13ba8:	str	r8, [sp, #92]	; 0x5c
   13bac:	mov	r3, #1
   13bb0:	ldr	r0, [fp, #16]
   13bb4:	str	r7, [fp, #-64]	; 0xffffffc0
   13bb8:	str	r5, [fp, #-72]	; 0xffffffb8
   13bbc:	str	r3, [sp, #80]	; 0x50
   13bc0:	cmp	r0, #0
   13bc4:	movwne	r0, #1
   13bc8:	and	r0, r0, r5
   13bcc:	str	r0, [fp, #-88]	; 0xffffffa8
   13bd0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13bd4:	cmp	r0, #0
   13bd8:	movwne	r0, #1
   13bdc:	subs	r7, r7, #2
   13be0:	and	r1, r0, r5
   13be4:	str	r7, [fp, #-80]	; 0xffffffb0
   13be8:	and	r1, r3, r1
   13bec:	str	r1, [sp, #40]	; 0x28
   13bf0:	clz	r1, r7
   13bf4:	lsr	r1, r1, #5
   13bf8:	and	r1, r1, r5
   13bfc:	eor	r5, r5, #1
   13c00:	str	r1, [sp, #36]	; 0x24
   13c04:	mov	r1, r7
   13c08:	str	r5, [sp, #88]	; 0x58
   13c0c:	mov	r7, #0
   13c10:	movwne	r1, #1
   13c14:	orr	r5, r1, r5
   13c18:	and	r1, r1, r3
   13c1c:	and	r0, r0, r1
   13c20:	str	r5, [sp, #60]	; 0x3c
   13c24:	str	r1, [fp, #-68]	; 0xffffffbc
   13c28:	str	r0, [fp, #-60]	; 0xffffffc4
   13c2c:	eor	r0, r3, #1
   13c30:	str	r0, [sp, #44]	; 0x2c
   13c34:	cmn	lr, #1
   13c38:	beq	13c48 <__assert_fail@plt+0x2b84>
   13c3c:	cmp	r7, lr
   13c40:	bne	13c54 <__assert_fail@plt+0x2b90>
   13c44:	b	148cc <__assert_fail@plt+0x3808>
   13c48:	ldrb	r0, [ip, r7]
   13c4c:	cmp	r0, #0
   13c50:	beq	148d4 <__assert_fail@plt+0x3810>
   13c54:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13c58:	mov	r8, #0
   13c5c:	str	r4, [fp, #-52]	; 0xffffffcc
   13c60:	str	r2, [fp, #-48]	; 0xffffffd0
   13c64:	cmp	r0, #0
   13c68:	beq	13c9c <__assert_fail@plt+0x2bd8>
   13c6c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c70:	add	r4, r7, r0
   13c74:	cmp	r0, #2
   13c78:	bcc	13c94 <__assert_fail@plt+0x2bd0>
   13c7c:	cmn	lr, #1
   13c80:	bne	13c94 <__assert_fail@plt+0x2bd0>
   13c84:	mov	r0, ip
   13c88:	bl	10fc8 <strlen@plt>
   13c8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c90:	mov	lr, r0
   13c94:	cmp	r4, lr
   13c98:	bls	13cb4 <__assert_fail@plt+0x2bf0>
   13c9c:	mov	r0, #0
   13ca0:	str	r0, [fp, #-56]	; 0xffffffc8
   13ca4:	ldrb	r5, [ip, r7]
   13ca8:	cmp	r5, #126	; 0x7e
   13cac:	bls	13d04 <__assert_fail@plt+0x2c40>
   13cb0:	b	1410c <__assert_fail@plt+0x3048>
   13cb4:	ldr	r1, [sp, #92]	; 0x5c
   13cb8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13cbc:	add	r0, ip, r7
   13cc0:	mov	r4, lr
   13cc4:	bl	10ef0 <memcmp@plt>
   13cc8:	ldr	r2, [sp, #88]	; 0x58
   13ccc:	cmp	r0, #0
   13cd0:	mov	r1, r0
   13cd4:	movwne	r1, #1
   13cd8:	orr	r1, r1, r2
   13cdc:	tst	r1, #1
   13ce0:	beq	149e0 <__assert_fail@plt+0x391c>
   13ce4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ce8:	clz	r0, r0
   13cec:	mov	lr, r4
   13cf0:	lsr	r0, r0, #5
   13cf4:	str	r0, [fp, #-56]	; 0xffffffc8
   13cf8:	ldrb	r5, [ip, r7]
   13cfc:	cmp	r5, #126	; 0x7e
   13d00:	bhi	1410c <__assert_fail@plt+0x3048>
   13d04:	add	r3, pc, #16
   13d08:	mov	r4, #1
   13d0c:	mov	r2, #110	; 0x6e
   13d10:	mov	r0, #97	; 0x61
   13d14:	mov	r1, #0
   13d18:	ldr	pc, [r3, r5, lsl #2]
   13d1c:	andeq	r3, r1, ip, ror #31
   13d20:	andeq	r4, r1, ip, lsl #2
   13d24:	andeq	r4, r1, ip, lsl #2
   13d28:	andeq	r4, r1, ip, lsl #2
   13d2c:	andeq	r4, r1, ip, lsl #2
   13d30:	andeq	r4, r1, ip, lsl #2
   13d34:	andeq	r4, r1, ip, lsl #2
   13d38:	andeq	r4, r1, r8, ror #3
   13d3c:	andeq	r3, r1, ip, asr #31
   13d40:			; <UNDEFINED> instruction: 0x00013fb4
   13d44:	ldrdeq	r3, [r1], -r8
   13d48:	andeq	r4, r1, r8, rrx
   13d4c:	andeq	r3, r1, ip, lsr #31
   13d50:	ldrdeq	r3, [r1], -r4
   13d54:	andeq	r4, r1, ip, lsl #2
   13d58:	andeq	r4, r1, ip, lsl #2
   13d5c:	andeq	r4, r1, ip, lsl #2
   13d60:	andeq	r4, r1, ip, lsl #2
   13d64:	andeq	r4, r1, ip, lsl #2
   13d68:	andeq	r4, r1, ip, lsl #2
   13d6c:	andeq	r4, r1, ip, lsl #2
   13d70:	andeq	r4, r1, ip, lsl #2
   13d74:	andeq	r4, r1, ip, lsl #2
   13d78:	andeq	r4, r1, ip, lsl #2
   13d7c:	andeq	r4, r1, ip, lsl #2
   13d80:	andeq	r4, r1, ip, lsl #2
   13d84:	andeq	r4, r1, ip, lsl #2
   13d88:	andeq	r4, r1, ip, lsl #2
   13d8c:	andeq	r4, r1, ip, lsl #2
   13d90:	andeq	r4, r1, ip, lsl #2
   13d94:	andeq	r4, r1, ip, lsl #2
   13d98:	andeq	r4, r1, ip, lsl #2
   13d9c:	andeq	r4, r1, r4, ror #2
   13da0:	andeq	r4, r1, r8, ror #2
   13da4:	andeq	r4, r1, r8, ror #2
   13da8:	andeq	r3, r1, r8, lsr pc
   13dac:	andeq	r4, r1, r8, ror #2
   13db0:	andeq	r3, r1, r8, lsl pc
   13db4:	andeq	r4, r1, r8, ror #2
   13db8:	andeq	r4, r1, r0, ror r0
   13dbc:	andeq	r4, r1, r8, ror #2
   13dc0:	andeq	r4, r1, r8, ror #2
   13dc4:	andeq	r4, r1, r8, ror #2
   13dc8:	andeq	r3, r1, r8, lsl pc
   13dcc:	andeq	r3, r1, r8, lsl pc
   13dd0:	andeq	r3, r1, r8, lsl pc
   13dd4:	andeq	r3, r1, r8, lsl pc
   13dd8:	andeq	r3, r1, r8, lsl pc
   13ddc:	andeq	r3, r1, r8, lsl pc
   13de0:	andeq	r3, r1, r8, lsl pc
   13de4:	andeq	r3, r1, r8, lsl pc
   13de8:	andeq	r3, r1, r8, lsl pc
   13dec:	andeq	r3, r1, r8, lsl pc
   13df0:	andeq	r3, r1, r8, lsl pc
   13df4:	andeq	r3, r1, r8, lsl pc
   13df8:	andeq	r3, r1, r8, lsl pc
   13dfc:	andeq	r3, r1, r8, lsl pc
   13e00:	andeq	r3, r1, r8, lsl pc
   13e04:	andeq	r3, r1, r8, lsl pc
   13e08:	andeq	r4, r1, r8, ror #2
   13e0c:	andeq	r4, r1, r8, ror #2
   13e10:	andeq	r4, r1, r8, ror #2
   13e14:	andeq	r4, r1, r8, ror #2
   13e18:	andeq	r4, r1, ip, lsr #32
   13e1c:	andeq	r4, r1, ip, lsl #2
   13e20:	andeq	r3, r1, r8, lsl pc
   13e24:	andeq	r3, r1, r8, lsl pc
   13e28:	andeq	r3, r1, r8, lsl pc
   13e2c:	andeq	r3, r1, r8, lsl pc
   13e30:	andeq	r3, r1, r8, lsl pc
   13e34:	andeq	r3, r1, r8, lsl pc
   13e38:	andeq	r3, r1, r8, lsl pc
   13e3c:	andeq	r3, r1, r8, lsl pc
   13e40:	andeq	r3, r1, r8, lsl pc
   13e44:	andeq	r3, r1, r8, lsl pc
   13e48:	andeq	r3, r1, r8, lsl pc
   13e4c:	andeq	r3, r1, r8, lsl pc
   13e50:	andeq	r3, r1, r8, lsl pc
   13e54:	andeq	r3, r1, r8, lsl pc
   13e58:	andeq	r3, r1, r8, lsl pc
   13e5c:	andeq	r3, r1, r8, lsl pc
   13e60:	andeq	r3, r1, r8, lsl pc
   13e64:	andeq	r3, r1, r8, lsl pc
   13e68:	andeq	r3, r1, r8, lsl pc
   13e6c:	andeq	r3, r1, r8, lsl pc
   13e70:	andeq	r3, r1, r8, lsl pc
   13e74:	andeq	r3, r1, r8, lsl pc
   13e78:	andeq	r3, r1, r8, lsl pc
   13e7c:	andeq	r3, r1, r8, lsl pc
   13e80:	andeq	r3, r1, r8, lsl pc
   13e84:	andeq	r3, r1, r8, lsl pc
   13e88:	andeq	r4, r1, r8, ror #2
   13e8c:	andeq	r3, r1, r8, ror pc
   13e90:	andeq	r3, r1, r8, lsl pc
   13e94:	andeq	r4, r1, r8, ror #2
   13e98:	andeq	r3, r1, r8, lsl pc
   13e9c:	andeq	r4, r1, r8, ror #2
   13ea0:	andeq	r3, r1, r8, lsl pc
   13ea4:	andeq	r3, r1, r8, lsl pc
   13ea8:	andeq	r3, r1, r8, lsl pc
   13eac:	andeq	r3, r1, r8, lsl pc
   13eb0:	andeq	r3, r1, r8, lsl pc
   13eb4:	andeq	r3, r1, r8, lsl pc
   13eb8:	andeq	r3, r1, r8, lsl pc
   13ebc:	andeq	r3, r1, r8, lsl pc
   13ec0:	andeq	r3, r1, r8, lsl pc
   13ec4:	andeq	r3, r1, r8, lsl pc
   13ec8:	andeq	r3, r1, r8, lsl pc
   13ecc:	andeq	r3, r1, r8, lsl pc
   13ed0:	andeq	r3, r1, r8, lsl pc
   13ed4:	andeq	r3, r1, r8, lsl pc
   13ed8:	andeq	r3, r1, r8, lsl pc
   13edc:	andeq	r3, r1, r8, lsl pc
   13ee0:	andeq	r3, r1, r8, lsl pc
   13ee4:	andeq	r3, r1, r8, lsl pc
   13ee8:	andeq	r3, r1, r8, lsl pc
   13eec:	andeq	r3, r1, r8, lsl pc
   13ef0:	andeq	r3, r1, r8, lsl pc
   13ef4:	andeq	r3, r1, r8, lsl pc
   13ef8:	andeq	r3, r1, r8, lsl pc
   13efc:	andeq	r3, r1, r8, lsl pc
   13f00:	andeq	r3, r1, r8, lsl pc
   13f04:	andeq	r3, r1, r8, lsl pc
   13f08:	andeq	r3, r1, r8, asr pc
   13f0c:	andeq	r4, r1, r8, ror #2
   13f10:	andeq	r3, r1, r8, asr pc
   13f14:	andeq	r3, r1, r8, lsr pc
   13f18:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13f1c:	cmp	r0, #0
   13f20:	beq	141fc <__assert_fail@plt+0x3138>
   13f24:	ldr	r0, [fp, #16]
   13f28:	cmp	r0, #0
   13f2c:	mov	r0, r5
   13f30:	bne	1420c <__assert_fail@plt+0x3148>
   13f34:	b	1422c <__assert_fail@plt+0x3168>
   13f38:	mov	r4, #0
   13f3c:	cmp	r7, #0
   13f40:	beq	14164 <__assert_fail@plt+0x30a0>
   13f44:	mov	r8, #0
   13f48:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13f4c:	cmp	r0, #0
   13f50:	bne	13f24 <__assert_fail@plt+0x2e60>
   13f54:	b	141fc <__assert_fail@plt+0x3138>
   13f58:	mov	r4, #0
   13f5c:	cmn	lr, #1
   13f60:	beq	1413c <__assert_fail@plt+0x3078>
   13f64:	cmp	r7, #0
   13f68:	bne	13f44 <__assert_fail@plt+0x2e80>
   13f6c:	cmp	lr, #1
   13f70:	beq	14164 <__assert_fail@plt+0x30a0>
   13f74:	b	13f44 <__assert_fail@plt+0x2e80>
   13f78:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f7c:	cmp	r0, #2
   13f80:	bne	14194 <__assert_fail@plt+0x30d0>
   13f84:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13f88:	tst	r0, #1
   13f8c:	bne	149f4 <__assert_fail@plt+0x3930>
   13f90:	mov	r8, #0
   13f94:	mov	r0, #92	; 0x5c
   13f98:	mov	r4, #0
   13f9c:	cmp	r8, #0
   13fa0:	beq	141b4 <__assert_fail@plt+0x30f0>
   13fa4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13fa8:	b	142a8 <__assert_fail@plt+0x31e4>
   13fac:	mov	r0, #102	; 0x66
   13fb0:	b	141e8 <__assert_fail@plt+0x3124>
   13fb4:	mov	r2, #116	; 0x74
   13fb8:	ldr	r0, [sp, #60]	; 0x3c
   13fbc:	tst	r0, #1
   13fc0:	mov	r0, r2
   13fc4:	bne	141e8 <__assert_fail@plt+0x3124>
   13fc8:	b	149f4 <__assert_fail@plt+0x3930>
   13fcc:	mov	r0, #98	; 0x62
   13fd0:	b	141e8 <__assert_fail@plt+0x3124>
   13fd4:	mov	r2, #114	; 0x72
   13fd8:	ldr	r0, [sp, #60]	; 0x3c
   13fdc:	tst	r0, #1
   13fe0:	mov	r0, r2
   13fe4:	bne	141e8 <__assert_fail@plt+0x3124>
   13fe8:	b	149f4 <__assert_fail@plt+0x3930>
   13fec:	ldr	r0, [sp, #80]	; 0x50
   13ff0:	tst	r0, #1
   13ff4:	beq	142d0 <__assert_fail@plt+0x320c>
   13ff8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13ffc:	tst	r0, #1
   14000:	bne	14b1c <__assert_fail@plt+0x3a58>
   14004:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14008:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1400c:	cmp	r0, #2
   14010:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14014:	movwne	r0, #1
   14018:	orr	r0, r0, r2
   1401c:	tst	r0, #1
   14020:	beq	145c8 <__assert_fail@plt+0x3504>
   14024:	mov	r0, r9
   14028:	b	145fc <__assert_fail@plt+0x3538>
   1402c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14030:	mov	r8, #0
   14034:	mov	r5, #63	; 0x3f
   14038:	cmp	r0, #5
   1403c:	beq	14484 <__assert_fail@plt+0x33c0>
   14040:	cmp	r0, #2
   14044:	bne	14534 <__assert_fail@plt+0x3470>
   14048:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1404c:	tst	r0, #1
   14050:	bne	149f4 <__assert_fail@plt+0x3930>
   14054:	mov	r4, #0
   14058:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1405c:	cmp	r0, #0
   14060:	bne	13f24 <__assert_fail@plt+0x2e60>
   14064:	b	141fc <__assert_fail@plt+0x3138>
   14068:	mov	r0, #118	; 0x76
   1406c:	b	141e8 <__assert_fail@plt+0x3124>
   14070:	mov	r0, #1
   14074:	mov	r5, #39	; 0x27
   14078:	str	r0, [sp, #52]	; 0x34
   1407c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14080:	cmp	r0, #2
   14084:	bne	140f8 <__assert_fail@plt+0x3034>
   14088:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1408c:	tst	r0, #1
   14090:	bne	149f4 <__assert_fail@plt+0x3930>
   14094:	ldr	r2, [sp, #48]	; 0x30
   14098:	clz	r1, sl
   1409c:	mov	r8, #0
   140a0:	lsr	r1, r1, #5
   140a4:	cmp	r2, #0
   140a8:	mov	r0, r2
   140ac:	movwne	r0, #1
   140b0:	orrs	r0, r0, r1
   140b4:	moveq	r2, sl
   140b8:	moveq	sl, r0
   140bc:	cmp	r9, sl
   140c0:	str	r2, [sp, #48]	; 0x30
   140c4:	movcc	r0, #39	; 0x27
   140c8:	strbcc	r0, [r6, r9]
   140cc:	add	r0, r9, #1
   140d0:	cmp	r0, sl
   140d4:	movcc	r1, #92	; 0x5c
   140d8:	strbcc	r1, [r6, r0]
   140dc:	add	r0, r9, #2
   140e0:	add	r9, r9, #3
   140e4:	cmp	r0, sl
   140e8:	movcc	r1, #39	; 0x27
   140ec:	strbcc	r1, [r6, r0]
   140f0:	mov	r0, #0
   140f4:	str	r0, [fp, #-48]	; 0xffffffd0
   140f8:	mov	r4, #1
   140fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14100:	cmp	r0, #0
   14104:	bne	13f24 <__assert_fail@plt+0x2e60>
   14108:	b	141fc <__assert_fail@plt+0x3138>
   1410c:	ldr	r0, [sp, #32]
   14110:	cmp	r0, #1
   14114:	bne	14300 <__assert_fail@plt+0x323c>
   14118:	str	lr, [sp, #84]	; 0x54
   1411c:	bl	10fb0 <__ctype_b_loc@plt>
   14120:	ldr	r0, [r0]
   14124:	ldr	ip, [fp, #-84]	; 0xffffffac
   14128:	mov	r1, #1
   1412c:	add	r0, r0, r5, lsl #1
   14130:	ldrb	r0, [r0, #1]
   14134:	ubfx	r4, r0, #6, #1
   14138:	b	146f8 <__assert_fail@plt+0x3634>
   1413c:	cmp	r7, #0
   14140:	ldrbeq	r0, [ip, #1]
   14144:	cmpeq	r0, #0
   14148:	beq	14164 <__assert_fail@plt+0x30a0>
   1414c:	mvn	lr, #0
   14150:	mov	r8, #0
   14154:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14158:	cmp	r0, #0
   1415c:	bne	13f24 <__assert_fail@plt+0x2e60>
   14160:	b	141fc <__assert_fail@plt+0x3138>
   14164:	mov	r1, #1
   14168:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1416c:	cmp	r0, #2
   14170:	bne	14180 <__assert_fail@plt+0x30bc>
   14174:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14178:	tst	r0, #1
   1417c:	bne	149f4 <__assert_fail@plt+0x3930>
   14180:	mov	r4, r1
   14184:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14188:	cmp	r0, #0
   1418c:	bne	13f24 <__assert_fail@plt+0x2e60>
   14190:	b	141fc <__assert_fail@plt+0x3138>
   14194:	ldr	r1, [sp, #40]	; 0x28
   14198:	mov	r8, #0
   1419c:	mov	r0, #92	; 0x5c
   141a0:	cmp	r1, #0
   141a4:	beq	141e8 <__assert_fail@plt+0x3124>
   141a8:	mov	r4, #0
   141ac:	cmp	r8, #0
   141b0:	bne	13fa4 <__assert_fail@plt+0x2ee0>
   141b4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   141b8:	tst	r2, #1
   141bc:	beq	142a8 <__assert_fail@plt+0x31e4>
   141c0:	cmp	r9, sl
   141c4:	movcc	r1, #39	; 0x27
   141c8:	strbcc	r1, [r6, r9]
   141cc:	add	r1, r9, #1
   141d0:	add	r9, r9, #2
   141d4:	cmp	r1, sl
   141d8:	movcc	r2, #39	; 0x27
   141dc:	strbcc	r2, [r6, r1]
   141e0:	mov	r2, #0
   141e4:	b	142a8 <__assert_fail@plt+0x31e4>
   141e8:	ldr	r1, [sp, #80]	; 0x50
   141ec:	mov	r4, #0
   141f0:	mov	r8, #0
   141f4:	tst	r1, #1
   141f8:	bne	14238 <__assert_fail@plt+0x3174>
   141fc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14200:	cmp	r0, #0
   14204:	mov	r0, r5
   14208:	beq	1422c <__assert_fail@plt+0x3168>
   1420c:	ldr	r1, [fp, #16]
   14210:	ubfx	r0, r5, #5, #3
   14214:	mov	r2, #1
   14218:	ldr	r0, [r1, r0, lsl #2]
   1421c:	and	r1, r5, #31
   14220:	tst	r0, r2, lsl r1
   14224:	mov	r0, r5
   14228:	bne	14238 <__assert_fail@plt+0x3174>
   1422c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14230:	cmp	r1, #0
   14234:	beq	14690 <__assert_fail@plt+0x35cc>
   14238:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1423c:	tst	r1, #1
   14240:	bne	149d4 <__assert_fail@plt+0x3910>
   14244:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14248:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1424c:	cmp	r1, #2
   14250:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14254:	movwne	r1, #1
   14258:	orr	r1, r1, r2
   1425c:	tst	r1, #1
   14260:	bne	14298 <__assert_fail@plt+0x31d4>
   14264:	cmp	r9, sl
   14268:	movcc	r1, #39	; 0x27
   1426c:	strbcc	r1, [r6, r9]
   14270:	add	r1, r9, #1
   14274:	cmp	r1, sl
   14278:	movcc	r2, #36	; 0x24
   1427c:	strbcc	r2, [r6, r1]
   14280:	add	r1, r9, #2
   14284:	add	r9, r9, #3
   14288:	cmp	r1, sl
   1428c:	movcc	r2, #39	; 0x27
   14290:	strbcc	r2, [r6, r1]
   14294:	mov	r2, #1
   14298:	cmp	r9, sl
   1429c:	movcc	r1, #92	; 0x5c
   142a0:	strbcc	r1, [r6, r9]
   142a4:	add	r9, r9, #1
   142a8:	cmp	r9, sl
   142ac:	add	r7, r7, #1
   142b0:	strbcc	r0, [r6, r9]
   142b4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   142b8:	add	r9, r9, #1
   142bc:	and	r0, r0, r4
   142c0:	mov	r4, r0
   142c4:	cmn	lr, #1
   142c8:	bne	13c3c <__assert_fail@plt+0x2b78>
   142cc:	b	13c48 <__assert_fail@plt+0x2b84>
   142d0:	ldr	r0, [sp, #28]
   142d4:	mov	r4, #0
   142d8:	mov	r8, #0
   142dc:	mov	r5, #0
   142e0:	cmp	r0, #0
   142e4:	beq	141fc <__assert_fail@plt+0x3138>
   142e8:	ldr	r4, [fp, #-52]	; 0xffffffcc
   142ec:	ldr	r2, [fp, #-48]	; 0xffffffd0
   142f0:	add	r7, r7, #1
   142f4:	cmn	lr, #1
   142f8:	bne	13c3c <__assert_fail@plt+0x2b78>
   142fc:	b	13c48 <__assert_fail@plt+0x2b84>
   14300:	mov	r0, #0
   14304:	cmn	lr, #1
   14308:	str	r0, [fp, #-36]	; 0xffffffdc
   1430c:	str	r0, [fp, #-40]	; 0xffffffd8
   14310:	bne	14324 <__assert_fail@plt+0x3260>
   14314:	mov	r0, ip
   14318:	bl	10fc8 <strlen@plt>
   1431c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14320:	mov	lr, r0
   14324:	ldr	r0, [sp, #36]	; 0x24
   14328:	str	sl, [sp, #56]	; 0x38
   1432c:	str	lr, [sp, #84]	; 0x54
   14330:	cmp	r0, #0
   14334:	beq	1454c <__assert_fail@plt+0x3488>
   14338:	add	r0, ip, r7
   1433c:	mov	r4, #1
   14340:	mov	r6, #0
   14344:	sub	sl, fp, #40	; 0x28
   14348:	str	r0, [sp, #20]
   1434c:	str	r6, [sp, #64]	; 0x40
   14350:	add	r6, r6, r7
   14354:	sub	r0, fp, #44	; 0x2c
   14358:	mov	r3, sl
   1435c:	add	r1, ip, r6
   14360:	sub	r2, lr, r6
   14364:	bl	170f0 <__assert_fail@plt+0x602c>
   14368:	cmn	r0, #2
   1436c:	beq	146a8 <__assert_fail@plt+0x35e4>
   14370:	ldr	sl, [sp, #56]	; 0x38
   14374:	cmn	r0, #1
   14378:	beq	1469c <__assert_fail@plt+0x35d8>
   1437c:	cmp	r0, #0
   14380:	beq	146a0 <__assert_fail@plt+0x35dc>
   14384:	cmp	r0, #2
   14388:	bcc	14448 <__assert_fail@plt+0x3384>
   1438c:	ldr	r1, [sp, #64]	; 0x40
   14390:	ldr	r2, [sp, #20]
   14394:	add	r1, r2, r1
   14398:	mov	r2, #1
   1439c:	ldrb	r3, [r1, r2]
   143a0:	sub	r3, r3, #91	; 0x5b
   143a4:	cmp	r3, #33	; 0x21
   143a8:	bhi	1443c <__assert_fail@plt+0x3378>
   143ac:	add	r6, pc, #0
   143b0:	ldr	pc, [r6, r3, lsl #2]
   143b4:	andeq	r4, r1, r0, lsl #20
   143b8:	andeq	r4, r1, r0, lsl #20
   143bc:	andeq	r4, r1, ip, lsr r4
   143c0:	andeq	r4, r1, r0, lsl #20
   143c4:	andeq	r4, r1, ip, lsr r4
   143c8:	andeq	r4, r1, r0, lsl #20
   143cc:	andeq	r4, r1, ip, lsr r4
   143d0:	andeq	r4, r1, ip, lsr r4
   143d4:	andeq	r4, r1, ip, lsr r4
   143d8:	andeq	r4, r1, ip, lsr r4
   143dc:	andeq	r4, r1, ip, lsr r4
   143e0:	andeq	r4, r1, ip, lsr r4
   143e4:	andeq	r4, r1, ip, lsr r4
   143e8:	andeq	r4, r1, ip, lsr r4
   143ec:	andeq	r4, r1, ip, lsr r4
   143f0:	andeq	r4, r1, ip, lsr r4
   143f4:	andeq	r4, r1, ip, lsr r4
   143f8:	andeq	r4, r1, ip, lsr r4
   143fc:	andeq	r4, r1, ip, lsr r4
   14400:	andeq	r4, r1, ip, lsr r4
   14404:	andeq	r4, r1, ip, lsr r4
   14408:	andeq	r4, r1, ip, lsr r4
   1440c:	andeq	r4, r1, ip, lsr r4
   14410:	andeq	r4, r1, ip, lsr r4
   14414:	andeq	r4, r1, ip, lsr r4
   14418:	andeq	r4, r1, ip, lsr r4
   1441c:	andeq	r4, r1, ip, lsr r4
   14420:	andeq	r4, r1, ip, lsr r4
   14424:	andeq	r4, r1, ip, lsr r4
   14428:	andeq	r4, r1, ip, lsr r4
   1442c:	andeq	r4, r1, ip, lsr r4
   14430:	andeq	r4, r1, ip, lsr r4
   14434:	andeq	r4, r1, ip, lsr r4
   14438:	andeq	r4, r1, r0, lsl #20
   1443c:	add	r2, r2, #1
   14440:	cmp	r2, r0
   14444:	bcc	1439c <__assert_fail@plt+0x32d8>
   14448:	ldr	r6, [sp, #64]	; 0x40
   1444c:	add	r6, r0, r6
   14450:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14454:	bl	10f20 <iswprint@plt>
   14458:	cmp	r0, #0
   1445c:	sub	sl, fp, #40	; 0x28
   14460:	movwne	r0, #1
   14464:	and	r4, r4, r0
   14468:	mov	r0, sl
   1446c:	bl	10ed8 <mbsinit@plt>
   14470:	ldr	ip, [fp, #-84]	; 0xffffffac
   14474:	ldr	lr, [sp, #84]	; 0x54
   14478:	cmp	r0, #0
   1447c:	beq	1434c <__assert_fail@plt+0x3288>
   14480:	b	146ec <__assert_fail@plt+0x3628>
   14484:	ldr	r0, [sp, #24]
   14488:	cmp	r0, #0
   1448c:	beq	14534 <__assert_fail@plt+0x3470>
   14490:	add	r0, r7, #2
   14494:	cmp	r0, lr
   14498:	bcs	14534 <__assert_fail@plt+0x3470>
   1449c:	add	r1, ip, r7
   144a0:	ldrb	r1, [r1, #1]
   144a4:	cmp	r1, #63	; 0x3f
   144a8:	bne	14534 <__assert_fail@plt+0x3470>
   144ac:	ldrb	r5, [ip, r0]
   144b0:	sub	r1, r5, #33	; 0x21
   144b4:	cmp	r1, #29
   144b8:	bhi	14534 <__assert_fail@plt+0x3470>
   144bc:	movw	r3, #20929	; 0x51c1
   144c0:	mov	r2, #1
   144c4:	movt	r3, #14336	; 0x3800
   144c8:	tst	r3, r2, lsl r1
   144cc:	beq	14534 <__assert_fail@plt+0x3470>
   144d0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   144d4:	tst	r1, #1
   144d8:	bne	14b24 <__assert_fail@plt+0x3a60>
   144dc:	cmp	r9, sl
   144e0:	mov	r7, r0
   144e4:	mov	r4, #0
   144e8:	movcc	r1, #63	; 0x3f
   144ec:	strbcc	r1, [r6, r9]
   144f0:	add	r1, r9, #1
   144f4:	cmp	r1, sl
   144f8:	movcc	r2, #34	; 0x22
   144fc:	strbcc	r2, [r6, r1]
   14500:	add	r1, r9, #2
   14504:	cmp	r1, sl
   14508:	movcc	r2, #34	; 0x22
   1450c:	strbcc	r2, [r6, r1]
   14510:	add	r1, r9, #3
   14514:	add	r9, r9, #4
   14518:	cmp	r1, sl
   1451c:	movcc	r2, #63	; 0x3f
   14520:	strbcc	r2, [r6, r1]
   14524:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14528:	cmp	r0, #0
   1452c:	bne	13f24 <__assert_fail@plt+0x2e60>
   14530:	b	141fc <__assert_fail@plt+0x3138>
   14534:	mov	r5, #63	; 0x3f
   14538:	mov	r4, #0
   1453c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14540:	cmp	r0, #0
   14544:	bne	13f24 <__assert_fail@plt+0x2e60>
   14548:	b	141fc <__assert_fail@plt+0x3138>
   1454c:	mov	r4, #1
   14550:	mov	r6, #0
   14554:	sub	sl, fp, #40	; 0x28
   14558:	str	r6, [sp, #64]	; 0x40
   1455c:	add	r6, r6, r7
   14560:	sub	r0, fp, #44	; 0x2c
   14564:	mov	r3, sl
   14568:	add	r1, ip, r6
   1456c:	sub	r2, lr, r6
   14570:	bl	170f0 <__assert_fail@plt+0x602c>
   14574:	cmn	r0, #2
   14578:	beq	146a8 <__assert_fail@plt+0x35e4>
   1457c:	cmn	r0, #1
   14580:	beq	1469c <__assert_fail@plt+0x35d8>
   14584:	ldr	r6, [sp, #64]	; 0x40
   14588:	cmp	r0, #0
   1458c:	beq	146e8 <__assert_fail@plt+0x3624>
   14590:	add	r6, r0, r6
   14594:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14598:	bl	10f20 <iswprint@plt>
   1459c:	cmp	r0, #0
   145a0:	sub	sl, fp, #40	; 0x28
   145a4:	movwne	r0, #1
   145a8:	and	r4, r4, r0
   145ac:	mov	r0, sl
   145b0:	bl	10ed8 <mbsinit@plt>
   145b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   145b8:	ldr	lr, [sp, #84]	; 0x54
   145bc:	cmp	r0, #0
   145c0:	beq	14558 <__assert_fail@plt+0x3494>
   145c4:	b	146ec <__assert_fail@plt+0x3628>
   145c8:	cmp	r9, sl
   145cc:	mov	r2, #1
   145d0:	movcc	r0, #39	; 0x27
   145d4:	strbcc	r0, [r6, r9]
   145d8:	add	r0, r9, #1
   145dc:	cmp	r0, sl
   145e0:	movcc	r1, #36	; 0x24
   145e4:	strbcc	r1, [r6, r0]
   145e8:	add	r0, r9, #2
   145ec:	cmp	r0, sl
   145f0:	movcc	r1, #39	; 0x27
   145f4:	strbcc	r1, [r6, r0]
   145f8:	add	r0, r9, #3
   145fc:	cmp	r0, sl
   14600:	add	r9, r0, #1
   14604:	str	r2, [fp, #-48]	; 0xffffffd0
   14608:	movcc	r1, #92	; 0x5c
   1460c:	strbcc	r1, [r6, r0]
   14610:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14614:	cmp	r1, #2
   14618:	beq	14678 <__assert_fail@plt+0x35b4>
   1461c:	add	r1, r7, #1
   14620:	mov	r4, #0
   14624:	mov	r8, #1
   14628:	mov	r5, #48	; 0x30
   1462c:	cmp	r1, lr
   14630:	bcs	13f18 <__assert_fail@plt+0x2e54>
   14634:	ldrb	r1, [ip, r1]
   14638:	sub	r1, r1, #48	; 0x30
   1463c:	uxtb	r1, r1
   14640:	cmp	r1, #9
   14644:	bhi	13f18 <__assert_fail@plt+0x2e54>
   14648:	cmp	r9, sl
   1464c:	movcc	r1, #48	; 0x30
   14650:	strbcc	r1, [r6, r9]
   14654:	add	r1, r0, #2
   14658:	add	r9, r0, #3
   1465c:	cmp	r1, sl
   14660:	movcc	r2, #48	; 0x30
   14664:	strbcc	r2, [r6, r1]
   14668:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1466c:	cmp	r0, #0
   14670:	bne	13f24 <__assert_fail@plt+0x2e60>
   14674:	b	141fc <__assert_fail@plt+0x3138>
   14678:	mov	r0, #48	; 0x30
   1467c:	mov	r8, #1
   14680:	mov	r4, #0
   14684:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14688:	cmp	r1, #0
   1468c:	bne	14238 <__assert_fail@plt+0x3174>
   14690:	cmp	r8, #0
   14694:	beq	141b4 <__assert_fail@plt+0x30f0>
   14698:	b	13fa4 <__assert_fail@plt+0x2ee0>
   1469c:	mov	r4, #0
   146a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   146a4:	b	146e0 <__assert_fail@plt+0x361c>
   146a8:	ldr	r1, [sp, #84]	; 0x54
   146ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   146b0:	mov	r4, #0
   146b4:	cmp	r6, r1
   146b8:	bcs	146e0 <__assert_fail@plt+0x361c>
   146bc:	ldrb	r0, [ip, r6]
   146c0:	cmp	r0, #0
   146c4:	beq	146e0 <__assert_fail@plt+0x361c>
   146c8:	ldr	r0, [sp, #64]	; 0x40
   146cc:	add	r0, r0, #1
   146d0:	add	r6, r0, r7
   146d4:	str	r0, [sp, #64]	; 0x40
   146d8:	cmp	r6, r1
   146dc:	bcc	146bc <__assert_fail@plt+0x35f8>
   146e0:	ldr	r6, [sp, #64]	; 0x40
   146e4:	b	146ec <__assert_fail@plt+0x3628>
   146e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   146ec:	mov	r1, r6
   146f0:	ldr	r6, [sp, #76]	; 0x4c
   146f4:	ldr	sl, [sp, #56]	; 0x38
   146f8:	ldr	r0, [sp, #44]	; 0x2c
   146fc:	cmp	r1, #1
   14700:	orr	r2, r4, r0
   14704:	mov	r0, r1
   14708:	bhi	14728 <__assert_fail@plt+0x3664>
   1470c:	tst	r2, #1
   14710:	beq	14728 <__assert_fail@plt+0x3664>
   14714:	ldr	lr, [sp, #84]	; 0x54
   14718:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1471c:	cmp	r0, #0
   14720:	bne	13f24 <__assert_fail@plt+0x2e60>
   14724:	b	141fc <__assert_fail@plt+0x3138>
   14728:	str	r2, [sp, #64]	; 0x40
   1472c:	add	r0, r0, r7
   14730:	add	r1, r7, #1
   14734:	ldr	lr, [sp, #84]	; 0x54
   14738:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1473c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14740:	mov	r3, #0
   14744:	str	r0, [sp, #56]	; 0x38
   14748:	ldr	r0, [sp, #64]	; 0x40
   1474c:	tst	r0, #1
   14750:	bne	14838 <__assert_fail@plt+0x3774>
   14754:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14758:	tst	r0, #1
   1475c:	bne	149d8 <__assert_fail@plt+0x3914>
   14760:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14764:	cmp	r7, #2
   14768:	movwne	r3, #1
   1476c:	orr	r3, r3, r2
   14770:	tst	r3, #1
   14774:	bne	147ac <__assert_fail@plt+0x36e8>
   14778:	cmp	r9, sl
   1477c:	add	r3, r9, #1
   14780:	movcc	r2, #39	; 0x27
   14784:	strbcc	r2, [r6, r9]
   14788:	cmp	r3, sl
   1478c:	movcc	r2, #36	; 0x24
   14790:	strbcc	r2, [r6, r3]
   14794:	add	r3, r9, #2
   14798:	add	r9, r9, #3
   1479c:	cmp	r3, sl
   147a0:	movcc	r2, #39	; 0x27
   147a4:	strbcc	r2, [r6, r3]
   147a8:	mov	r2, #1
   147ac:	cmp	r9, sl
   147b0:	mov	r0, r2
   147b4:	movcc	r3, #92	; 0x5c
   147b8:	strbcc	r3, [r6, r9]
   147bc:	add	r3, r9, #1
   147c0:	cmp	r3, sl
   147c4:	andcc	r7, r5, #192	; 0xc0
   147c8:	movcc	r2, #48	; 0x30
   147cc:	orrcc	r7, r2, r7, lsr #6
   147d0:	strbcc	r7, [r6, r3]
   147d4:	add	r3, r9, #2
   147d8:	add	r9, r9, #3
   147dc:	cmp	r3, sl
   147e0:	lsrcc	r7, r5, #3
   147e4:	movcc	r2, #6
   147e8:	bficc	r7, r2, #3, #29
   147ec:	mov	r2, #6
   147f0:	strbcc	r7, [r6, r3]
   147f4:	bfi	r5, r2, #3, #29
   147f8:	mov	r3, #1
   147fc:	mov	r2, r0
   14800:	ldr	r0, [sp, #56]	; 0x38
   14804:	and	r8, r3, #1
   14808:	cmp	r0, r1
   1480c:	bhi	1486c <__assert_fail@plt+0x37a8>
   14810:	b	148ac <__assert_fail@plt+0x37e8>
   14814:	cmp	r9, sl
   14818:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1481c:	strbcc	r5, [r6, r9]
   14820:	add	r9, r9, #1
   14824:	ldrb	r5, [ip, r1]
   14828:	add	r1, r1, #1
   1482c:	ldr	r0, [sp, #64]	; 0x40
   14830:	tst	r0, #1
   14834:	beq	14754 <__assert_fail@plt+0x3690>
   14838:	ldr	r7, [fp, #-56]	; 0xffffffc8
   1483c:	tst	r7, #1
   14840:	beq	14854 <__assert_fail@plt+0x3790>
   14844:	cmp	r9, sl
   14848:	movcc	r7, #92	; 0x5c
   1484c:	strbcc	r7, [r6, r9]
   14850:	add	r9, r9, #1
   14854:	mov	r7, #0
   14858:	str	r7, [fp, #-56]	; 0xffffffc8
   1485c:	ldr	r0, [sp, #56]	; 0x38
   14860:	and	r8, r3, #1
   14864:	cmp	r0, r1
   14868:	bls	148ac <__assert_fail@plt+0x37e8>
   1486c:	cmp	r8, #0
   14870:	mvn	r7, r2
   14874:	movwne	r8, #1
   14878:	orr	r7, r7, r8
   1487c:	tst	r7, #1
   14880:	bne	14814 <__assert_fail@plt+0x3750>
   14884:	cmp	r9, sl
   14888:	movcc	r7, #39	; 0x27
   1488c:	strbcc	r7, [r6, r9]
   14890:	add	r7, r9, #1
   14894:	add	r9, r9, #2
   14898:	cmp	r7, sl
   1489c:	movcc	r2, #39	; 0x27
   148a0:	strbcc	r2, [r6, r7]
   148a4:	mov	r2, #0
   148a8:	b	14814 <__assert_fail@plt+0x3750>
   148ac:	cmp	r8, #0
   148b0:	sub	r7, r1, #1
   148b4:	mov	r0, r5
   148b8:	str	r2, [fp, #-48]	; 0xffffffd0
   148bc:	movwne	r8, #1
   148c0:	cmp	r8, #0
   148c4:	beq	141b4 <__assert_fail@plt+0x30f0>
   148c8:	b	13fa4 <__assert_fail@plt+0x2ee0>
   148cc:	mov	lr, r7
   148d0:	b	148d8 <__assert_fail@plt+0x3814>
   148d4:	mvn	lr, #0
   148d8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   148dc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   148e0:	eor	r0, r7, #2
   148e4:	orr	r0, r0, r9
   148e8:	clz	r0, r0
   148ec:	lsr	r0, r0, #5
   148f0:	tst	r1, r0
   148f4:	bne	149f4 <__assert_fail@plt+0x3930>
   148f8:	mov	r0, r1
   148fc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14900:	cmp	r7, #2
   14904:	movwne	r1, #1
   14908:	orr	r0, r0, r1
   1490c:	tst	r0, #1
   14910:	ldreq	r0, [sp, #52]	; 0x34
   14914:	streq	lr, [sp, #84]	; 0x54
   14918:	eoreq	r0, r0, #1
   1491c:	tsteq	r0, #1
   14920:	bne	14ab8 <__assert_fail@plt+0x39f4>
   14924:	tst	r4, #1
   14928:	bne	14a74 <__assert_fail@plt+0x39b0>
   1492c:	ldr	r6, [sp, #48]	; 0x30
   14930:	mov	r8, #0
   14934:	cmp	r6, #0
   14938:	beq	14ab0 <__assert_fail@plt+0x39ec>
   1493c:	ldr	r0, [sp, #80]	; 0x50
   14940:	mov	r1, #0
   14944:	cmp	sl, #0
   14948:	mov	r4, #0
   1494c:	str	r1, [fp, #-72]	; 0xffffffb8
   14950:	beq	13844 <__assert_fail@plt+0x2780>
   14954:	b	14ab8 <__assert_fail@plt+0x39f4>
   14958:	ldrb	r1, [r0, #3]
   1495c:	cmp	r1, #56	; 0x38
   14960:	ldrbeq	r1, [r0, #4]
   14964:	cmpeq	r1, #48	; 0x30
   14968:	bne	13a3c <__assert_fail@plt+0x2978>
   1496c:	ldrb	r1, [r0, #5]
   14970:	cmp	r1, #51	; 0x33
   14974:	ldrbeq	r1, [r0, #6]
   14978:	cmpeq	r1, #48	; 0x30
   1497c:	bne	13a3c <__assert_fail@plt+0x2978>
   14980:	ldrb	r0, [r0, #7]
   14984:	cmp	r0, #0
   14988:	movw	r0, #31966	; 0x7cde
   1498c:	movt	r0, #1
   14990:	str	r0, [sp, #68]	; 0x44
   14994:	bne	13a3c <__assert_fail@plt+0x2978>
   14998:	b	13a58 <__assert_fail@plt+0x2994>
   1499c:	ldrb	r1, [r0, #4]
   149a0:	cmp	r1, #48	; 0x30
   149a4:	ldrbeq	r1, [r0, #5]
   149a8:	cmpeq	r1, #51	; 0x33
   149ac:	bne	13b20 <__assert_fail@plt+0x2a5c>
   149b0:	ldrb	r1, [r0, #6]
   149b4:	cmp	r1, #48	; 0x30
   149b8:	ldrbeq	r0, [r0, #7]
   149bc:	cmpeq	r0, #0
   149c0:	bne	13b20 <__assert_fail@plt+0x2a5c>
   149c4:	movw	r0, #31970	; 0x7ce2
   149c8:	movt	r0, #1
   149cc:	str	r0, [sp, #72]	; 0x48
   149d0:	b	13b40 <__assert_fail@plt+0x2a7c>
   149d4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   149d8:	ldr	r2, [sp, #80]	; 0x50
   149dc:	b	14a14 <__assert_fail@plt+0x3950>
   149e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   149e4:	mov	r2, #1
   149e8:	mov	lr, r4
   149ec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   149f0:	b	14a14 <__assert_fail@plt+0x3950>
   149f4:	ldr	r2, [sp, #80]	; 0x50
   149f8:	mov	r7, #2
   149fc:	b	14a14 <__assert_fail@plt+0x3950>
   14a00:	ldr	r6, [sp, #76]	; 0x4c
   14a04:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a08:	ldr	lr, [sp, #84]	; 0x54
   14a0c:	ldr	r2, [sp, #80]	; 0x50
   14a10:	mov	r7, #2
   14a14:	mov	r0, #0
   14a18:	ldr	r1, [fp, #12]
   14a1c:	tst	r2, #1
   14a20:	mov	r2, r7
   14a24:	mov	r3, lr
   14a28:	str	r0, [sp, #8]
   14a2c:	ldr	r0, [sp, #68]	; 0x44
   14a30:	movwne	r2, #4
   14a34:	cmp	r7, #2
   14a38:	movne	r2, r7
   14a3c:	str	r2, [sp]
   14a40:	mov	r2, ip
   14a44:	bic	r1, r1, #2
   14a48:	str	r0, [sp, #12]
   14a4c:	ldr	r0, [sp, #72]	; 0x48
   14a50:	str	r1, [sp, #4]
   14a54:	mov	r1, sl
   14a58:	str	r0, [sp, #16]
   14a5c:	mov	r0, r6
   14a60:	bl	137c8 <__assert_fail@plt+0x2704>
   14a64:	mov	r9, r0
   14a68:	mov	r0, r9
   14a6c:	sub	sp, fp, #28
   14a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a74:	mov	r0, #5
   14a78:	ldr	r1, [sp, #48]	; 0x30
   14a7c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14a80:	ldr	r3, [sp, #84]	; 0x54
   14a84:	str	r0, [sp]
   14a88:	ldr	r0, [fp, #12]
   14a8c:	str	r0, [sp, #4]
   14a90:	ldr	r0, [fp, #16]
   14a94:	str	r0, [sp, #8]
   14a98:	ldr	r0, [sp, #68]	; 0x44
   14a9c:	str	r0, [sp, #12]
   14aa0:	ldr	r0, [sp, #72]	; 0x48
   14aa4:	str	r0, [sp, #16]
   14aa8:	ldr	r0, [sp, #76]	; 0x4c
   14aac:	b	14a60 <__assert_fail@plt+0x399c>
   14ab0:	mov	r0, #0
   14ab4:	str	r0, [fp, #-72]	; 0xffffffb8
   14ab8:	ldr	r1, [sp, #92]	; 0x5c
   14abc:	cmp	r1, #0
   14ac0:	beq	14b00 <__assert_fail@plt+0x3a3c>
   14ac4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14ac8:	ldr	r2, [sp, #76]	; 0x4c
   14acc:	tst	r0, #1
   14ad0:	bne	14b04 <__assert_fail@plt+0x3a40>
   14ad4:	ldrb	r0, [r1]
   14ad8:	cmp	r0, #0
   14adc:	beq	14b04 <__assert_fail@plt+0x3a40>
   14ae0:	add	r1, r1, #1
   14ae4:	cmp	r9, sl
   14ae8:	strbcc	r0, [r2, r9]
   14aec:	add	r9, r9, #1
   14af0:	ldrb	r0, [r1], #1
   14af4:	cmp	r0, #0
   14af8:	bne	14ae4 <__assert_fail@plt+0x3a20>
   14afc:	b	14b04 <__assert_fail@plt+0x3a40>
   14b00:	ldr	r2, [sp, #76]	; 0x4c
   14b04:	cmp	r9, sl
   14b08:	movcc	r0, #0
   14b0c:	strbcc	r0, [r2, r9]
   14b10:	mov	r0, r9
   14b14:	sub	sp, fp, #28
   14b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b1c:	mov	r2, #1
   14b20:	b	149ec <__assert_fail@plt+0x3928>
   14b24:	ldr	r2, [sp, #80]	; 0x50
   14b28:	mov	r7, #5
   14b2c:	b	14a14 <__assert_fail@plt+0x3950>
   14b30:	bl	110b8 <abort@plt>
   14b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b38:	add	fp, sp, #28
   14b3c:	sub	sp, sp, #28
   14b40:	movw	r5, #4768	; 0x12a0
   14b44:	cmp	r2, #0
   14b48:	mov	r4, r1
   14b4c:	mov	r7, r0
   14b50:	str	r0, [sp, #20]
   14b54:	movt	r5, #3
   14b58:	movne	r5, r2
   14b5c:	bl	10fe0 <__errno_location@plt>
   14b60:	mov	sl, r0
   14b64:	ldm	r5, {r0, r1}
   14b68:	ldr	r2, [r5, #40]	; 0x28
   14b6c:	ldr	r3, [r5, #44]	; 0x2c
   14b70:	add	r9, r5, #8
   14b74:	ldr	r6, [sl]
   14b78:	orr	r8, r1, #1
   14b7c:	mov	r1, #0
   14b80:	str	r6, [sp, #24]
   14b84:	stm	sp, {r0, r8, r9}
   14b88:	str	r2, [sp, #12]
   14b8c:	str	r3, [sp, #16]
   14b90:	mov	r0, #0
   14b94:	mov	r2, r7
   14b98:	mov	r3, r4
   14b9c:	mov	r6, r4
   14ba0:	bl	137c8 <__assert_fail@plt+0x2704>
   14ba4:	add	r7, r0, #1
   14ba8:	mov	r0, r7
   14bac:	bl	15c10 <__assert_fail@plt+0x4b4c>
   14bb0:	mov	r4, r0
   14bb4:	ldr	r0, [r5]
   14bb8:	ldr	r2, [r5, #44]	; 0x2c
   14bbc:	ldr	r1, [r5, #40]	; 0x28
   14bc0:	mov	r3, r6
   14bc4:	stm	sp, {r0, r8, r9}
   14bc8:	str	r2, [sp, #16]
   14bcc:	str	r1, [sp, #12]
   14bd0:	mov	r0, r4
   14bd4:	mov	r1, r7
   14bd8:	ldr	r2, [sp, #20]
   14bdc:	bl	137c8 <__assert_fail@plt+0x2704>
   14be0:	ldr	r0, [sp, #24]
   14be4:	str	r0, [sl]
   14be8:	mov	r0, r4
   14bec:	sub	sp, fp, #28
   14bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bf8:	add	fp, sp, #28
   14bfc:	sub	sp, sp, #36	; 0x24
   14c00:	movw	r8, #4768	; 0x12a0
   14c04:	cmp	r3, #0
   14c08:	mov	r4, r2
   14c0c:	str	r2, [sp, #24]
   14c10:	mov	r5, r1
   14c14:	mov	r6, r0
   14c18:	str	r0, [sp, #20]
   14c1c:	movt	r8, #3
   14c20:	movne	r8, r3
   14c24:	bl	10fe0 <__errno_location@plt>
   14c28:	str	r0, [sp, #28]
   14c2c:	cmp	r4, #0
   14c30:	add	sl, r8, #8
   14c34:	ldm	r8, {r3, r9}
   14c38:	ldr	r7, [r0]
   14c3c:	ldr	r1, [r8, #40]	; 0x28
   14c40:	ldr	r2, [r8, #44]	; 0x2c
   14c44:	mov	r0, #0
   14c48:	orreq	r9, r9, #1
   14c4c:	str	r7, [sp, #32]
   14c50:	mov	r7, r5
   14c54:	stm	sp, {r3, r9, sl}
   14c58:	str	r1, [sp, #12]
   14c5c:	str	r2, [sp, #16]
   14c60:	mov	r1, #0
   14c64:	mov	r2, r6
   14c68:	mov	r3, r5
   14c6c:	bl	137c8 <__assert_fail@plt+0x2704>
   14c70:	add	r4, r0, #1
   14c74:	mov	r5, r0
   14c78:	mov	r0, r4
   14c7c:	bl	15c10 <__assert_fail@plt+0x4b4c>
   14c80:	mov	r6, r0
   14c84:	ldr	r0, [r8]
   14c88:	ldr	r2, [r8, #44]	; 0x2c
   14c8c:	ldr	r1, [r8, #40]	; 0x28
   14c90:	mov	r3, r7
   14c94:	stm	sp, {r0, r9, sl}
   14c98:	str	r2, [sp, #16]
   14c9c:	str	r1, [sp, #12]
   14ca0:	mov	r0, r6
   14ca4:	mov	r1, r4
   14ca8:	ldr	r2, [sp, #20]
   14cac:	bl	137c8 <__assert_fail@plt+0x2704>
   14cb0:	ldr	r0, [sp, #24]
   14cb4:	ldr	r1, [sp, #32]
   14cb8:	ldr	r2, [sp, #28]
   14cbc:	cmp	r0, #0
   14cc0:	str	r1, [r2]
   14cc4:	strne	r5, [r0]
   14cc8:	mov	r0, r6
   14ccc:	sub	sp, fp, #28
   14cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cd4:	push	{r4, r5, r6, r7, fp, lr}
   14cd8:	add	fp, sp, #16
   14cdc:	movw	r4, #37160	; 0x9128
   14ce0:	movt	r4, #2
   14ce4:	ldrd	r6, [r4]
   14ce8:	cmp	r7, #2
   14cec:	blt	14d18 <__assert_fail@plt+0x3c54>
   14cf0:	add	r5, r6, #12
   14cf4:	mov	r7, #0
   14cf8:	ldr	r0, [r5, r7, lsl #3]
   14cfc:	bl	17090 <__assert_fail@plt+0x5fcc>
   14d00:	ldr	r1, [r4, #4]
   14d04:	add	r2, r7, #2
   14d08:	add	r0, r7, #1
   14d0c:	mov	r7, r0
   14d10:	cmp	r2, r1
   14d14:	blt	14cf8 <__assert_fail@plt+0x3c34>
   14d18:	ldr	r0, [r6, #4]
   14d1c:	movw	r5, #4816	; 0x12d0
   14d20:	movt	r5, #3
   14d24:	cmp	r0, r5
   14d28:	beq	14d3c <__assert_fail@plt+0x3c78>
   14d2c:	bl	17090 <__assert_fail@plt+0x5fcc>
   14d30:	mov	r0, #256	; 0x100
   14d34:	str	r0, [r4, #8]
   14d38:	str	r5, [r4, #12]
   14d3c:	add	r5, r4, #8
   14d40:	cmp	r6, r5
   14d44:	beq	14d54 <__assert_fail@plt+0x3c90>
   14d48:	mov	r0, r6
   14d4c:	bl	17090 <__assert_fail@plt+0x5fcc>
   14d50:	str	r5, [r4]
   14d54:	mov	r0, #1
   14d58:	str	r0, [r4, #4]
   14d5c:	pop	{r4, r5, r6, r7, fp, pc}
   14d60:	movw	r3, #4768	; 0x12a0
   14d64:	mvn	r2, #0
   14d68:	movt	r3, #3
   14d6c:	b	14d70 <__assert_fail@plt+0x3cac>
   14d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d74:	add	fp, sp, #28
   14d78:	sub	sp, sp, #44	; 0x2c
   14d7c:	mov	r7, r3
   14d80:	str	r2, [sp, #36]	; 0x24
   14d84:	str	r1, [sp, #32]
   14d88:	mov	r5, r0
   14d8c:	bl	10fe0 <__errno_location@plt>
   14d90:	cmp	r5, #0
   14d94:	blt	14ef8 <__assert_fail@plt+0x3e34>
   14d98:	cmn	r5, #-2147483647	; 0x80000001
   14d9c:	beq	14ef8 <__assert_fail@plt+0x3e34>
   14da0:	movw	r8, #37160	; 0x9128
   14da4:	mov	r4, r0
   14da8:	movt	r8, #2
   14dac:	ldr	r6, [r8]
   14db0:	ldr	r1, [r8, #4]
   14db4:	ldr	r0, [r0]
   14db8:	str	r4, [sp, #28]
   14dbc:	cmp	r1, r5
   14dc0:	str	r0, [sp, #24]
   14dc4:	ble	14dd0 <__assert_fail@plt+0x3d0c>
   14dc8:	mov	sl, r6
   14dcc:	b	14e34 <__assert_fail@plt+0x3d70>
   14dd0:	mov	r0, #8
   14dd4:	add	r9, r8, #8
   14dd8:	add	r2, r5, #1
   14ddc:	str	r1, [fp, #-32]	; 0xffffffe0
   14de0:	mvn	r3, #-2147483648	; 0x80000000
   14de4:	str	r0, [sp]
   14de8:	subs	r0, r6, r9
   14dec:	sub	r2, r2, r1
   14df0:	sub	r1, fp, #32
   14df4:	movne	r0, r6
   14df8:	bl	15e10 <__assert_fail@plt+0x4d4c>
   14dfc:	str	r0, [r8]
   14e00:	cmp	r6, r9
   14e04:	mov	sl, r0
   14e08:	ldrdeq	r0, [r8, #8]
   14e0c:	stmeq	sl, {r0, r1}
   14e10:	ldr	r1, [r8, #4]
   14e14:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14e18:	add	r0, sl, r1, lsl #3
   14e1c:	sub	r1, r2, r1
   14e20:	lsl	r2, r1, #3
   14e24:	mov	r1, #0
   14e28:	bl	10ff8 <memset@plt>
   14e2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14e30:	str	r0, [r8, #4]
   14e34:	mov	r9, sl
   14e38:	ldr	r6, [r9, r5, lsl #3]!
   14e3c:	ldr	r4, [r9, #4]!
   14e40:	ldm	r7, {r0, r1}
   14e44:	ldr	r2, [r7, #40]	; 0x28
   14e48:	ldr	r3, [r7, #44]	; 0x2c
   14e4c:	orr	r8, r1, #1
   14e50:	add	r1, r7, #8
   14e54:	stm	sp, {r0, r8}
   14e58:	add	r0, sp, #8
   14e5c:	str	r1, [sp, #20]
   14e60:	stm	r0, {r1, r2, r3}
   14e64:	mov	r0, r4
   14e68:	mov	r1, r6
   14e6c:	ldr	r2, [sp, #32]
   14e70:	ldr	r3, [sp, #36]	; 0x24
   14e74:	bl	137c8 <__assert_fail@plt+0x2704>
   14e78:	cmp	r6, r0
   14e7c:	bhi	14ee0 <__assert_fail@plt+0x3e1c>
   14e80:	add	r6, r0, #1
   14e84:	movw	r0, #4816	; 0x12d0
   14e88:	movt	r0, #3
   14e8c:	str	r6, [sl, r5, lsl #3]
   14e90:	cmp	r4, r0
   14e94:	beq	14ea0 <__assert_fail@plt+0x3ddc>
   14e98:	mov	r0, r4
   14e9c:	bl	17090 <__assert_fail@plt+0x5fcc>
   14ea0:	mov	r0, r6
   14ea4:	bl	15c10 <__assert_fail@plt+0x4b4c>
   14ea8:	str	r0, [r9]
   14eac:	mov	r4, r0
   14eb0:	add	r3, sp, #8
   14eb4:	ldr	r0, [r7]
   14eb8:	ldr	r1, [r7, #40]	; 0x28
   14ebc:	ldr	r2, [r7, #44]	; 0x2c
   14ec0:	stm	sp, {r0, r8}
   14ec4:	ldr	r0, [sp, #20]
   14ec8:	stm	r3, {r0, r1, r2}
   14ecc:	mov	r0, r4
   14ed0:	mov	r1, r6
   14ed4:	ldr	r2, [sp, #32]
   14ed8:	ldr	r3, [sp, #36]	; 0x24
   14edc:	bl	137c8 <__assert_fail@plt+0x2704>
   14ee0:	ldr	r1, [sp, #24]
   14ee4:	ldr	r0, [sp, #28]
   14ee8:	str	r1, [r0]
   14eec:	mov	r0, r4
   14ef0:	sub	sp, fp, #28
   14ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ef8:	bl	110b8 <abort@plt>
   14efc:	movw	r3, #4768	; 0x12a0
   14f00:	movt	r3, #3
   14f04:	b	14d70 <__assert_fail@plt+0x3cac>
   14f08:	movw	r3, #4768	; 0x12a0
   14f0c:	mov	r1, r0
   14f10:	mov	r0, #0
   14f14:	mvn	r2, #0
   14f18:	movt	r3, #3
   14f1c:	b	14d70 <__assert_fail@plt+0x3cac>
   14f20:	movw	r3, #4768	; 0x12a0
   14f24:	mov	r2, r1
   14f28:	mov	r1, r0
   14f2c:	mov	r0, #0
   14f30:	movt	r3, #3
   14f34:	b	14d70 <__assert_fail@plt+0x3cac>
   14f38:	push	{fp, lr}
   14f3c:	mov	fp, sp
   14f40:	sub	sp, sp, #48	; 0x30
   14f44:	vmov.i32	q8, #0	; 0x00000000
   14f48:	mov	ip, #32
   14f4c:	mov	r3, sp
   14f50:	mov	lr, r2
   14f54:	cmp	r1, #10
   14f58:	add	r2, r3, #16
   14f5c:	vst1.64	{d16-d17}, [r3], ip
   14f60:	vst1.64	{d16-d17}, [r3]
   14f64:	vst1.64	{d16-d17}, [r2]
   14f68:	beq	14f88 <__assert_fail@plt+0x3ec4>
   14f6c:	str	r1, [sp]
   14f70:	mov	r3, sp
   14f74:	mov	r1, lr
   14f78:	mvn	r2, #0
   14f7c:	bl	14d70 <__assert_fail@plt+0x3cac>
   14f80:	mov	sp, fp
   14f84:	pop	{fp, pc}
   14f88:	bl	110b8 <abort@plt>
   14f8c:	push	{r4, sl, fp, lr}
   14f90:	add	fp, sp, #8
   14f94:	sub	sp, sp, #48	; 0x30
   14f98:	mov	ip, r3
   14f9c:	mov	r3, sp
   14fa0:	vmov.i32	q8, #0	; 0x00000000
   14fa4:	mov	lr, #32
   14fa8:	cmp	r1, #10
   14fac:	add	r4, r3, #16
   14fb0:	vst1.64	{d16-d17}, [r3], lr
   14fb4:	vst1.64	{d16-d17}, [r3]
   14fb8:	vst1.64	{d16-d17}, [r4]
   14fbc:	beq	14fdc <__assert_fail@plt+0x3f18>
   14fc0:	str	r1, [sp]
   14fc4:	mov	r1, r2
   14fc8:	mov	r3, sp
   14fcc:	mov	r2, ip
   14fd0:	bl	14d70 <__assert_fail@plt+0x3cac>
   14fd4:	sub	sp, fp, #8
   14fd8:	pop	{r4, sl, fp, pc}
   14fdc:	bl	110b8 <abort@plt>
   14fe0:	push	{fp, lr}
   14fe4:	mov	fp, sp
   14fe8:	sub	sp, sp, #48	; 0x30
   14fec:	mov	r3, sp
   14ff0:	vmov.i32	q8, #0	; 0x00000000
   14ff4:	mov	ip, #32
   14ff8:	cmp	r0, #10
   14ffc:	add	r2, r3, #16
   15000:	vst1.64	{d16-d17}, [r3], ip
   15004:	vst1.64	{d16-d17}, [r3]
   15008:	vst1.64	{d16-d17}, [r2]
   1500c:	beq	1502c <__assert_fail@plt+0x3f68>
   15010:	str	r0, [sp]
   15014:	mov	r3, sp
   15018:	mov	r0, #0
   1501c:	mvn	r2, #0
   15020:	bl	14d70 <__assert_fail@plt+0x3cac>
   15024:	mov	sp, fp
   15028:	pop	{fp, pc}
   1502c:	bl	110b8 <abort@plt>
   15030:	push	{fp, lr}
   15034:	mov	fp, sp
   15038:	sub	sp, sp, #48	; 0x30
   1503c:	mov	r3, sp
   15040:	vmov.i32	q8, #0	; 0x00000000
   15044:	mov	ip, #32
   15048:	cmp	r0, #10
   1504c:	add	lr, r3, #16
   15050:	vst1.64	{d16-d17}, [r3], ip
   15054:	vst1.64	{d16-d17}, [r3]
   15058:	vst1.64	{d16-d17}, [lr]
   1505c:	beq	15078 <__assert_fail@plt+0x3fb4>
   15060:	str	r0, [sp]
   15064:	mov	r3, sp
   15068:	mov	r0, #0
   1506c:	bl	14d70 <__assert_fail@plt+0x3cac>
   15070:	mov	sp, fp
   15074:	pop	{fp, pc}
   15078:	bl	110b8 <abort@plt>
   1507c:	push	{r4, sl, fp, lr}
   15080:	add	fp, sp, #8
   15084:	sub	sp, sp, #48	; 0x30
   15088:	mov	lr, r0
   1508c:	movw	r0, #4768	; 0x12a0
   15090:	mov	r3, #32
   15094:	mov	ip, r1
   15098:	mov	r4, #1
   1509c:	movt	r0, #3
   150a0:	add	r1, r0, #16
   150a4:	vld1.64	{d16-d17}, [r0], r3
   150a8:	mov	r3, sp
   150ac:	vld1.64	{d18-d19}, [r1]
   150b0:	add	r1, r3, #16
   150b4:	vld1.64	{d20-d21}, [r0]
   150b8:	add	r0, r3, #32
   150bc:	vst1.64	{d18-d19}, [r1]
   150c0:	mov	r1, r3
   150c4:	vst1.64	{d20-d21}, [r0]
   150c8:	mov	r0, #28
   150cc:	and	r0, r0, r2, lsr #3
   150d0:	and	r2, r2, #31
   150d4:	vst1.64	{d16-d17}, [r1], r0
   150d8:	ldr	r0, [r1, #8]
   150dc:	bic	r4, r4, r0, lsr r2
   150e0:	eor	r0, r0, r4, lsl r2
   150e4:	mov	r2, ip
   150e8:	str	r0, [r1, #8]
   150ec:	mov	r0, #0
   150f0:	mov	r1, lr
   150f4:	bl	14d70 <__assert_fail@plt+0x3cac>
   150f8:	sub	sp, fp, #8
   150fc:	pop	{r4, sl, fp, pc}
   15100:	push	{fp, lr}
   15104:	mov	fp, sp
   15108:	sub	sp, sp, #48	; 0x30
   1510c:	mov	ip, r0
   15110:	movw	r0, #4768	; 0x12a0
   15114:	mov	r3, #32
   15118:	movt	r0, #3
   1511c:	add	r2, r0, #16
   15120:	vld1.64	{d16-d17}, [r0], r3
   15124:	mov	r3, sp
   15128:	vld1.64	{d18-d19}, [r2]
   1512c:	add	r2, r3, #16
   15130:	vld1.64	{d20-d21}, [r0]
   15134:	add	r0, r3, #32
   15138:	vst1.64	{d18-d19}, [r2]
   1513c:	mov	r2, r3
   15140:	vst1.64	{d20-d21}, [r0]
   15144:	mov	r0, #28
   15148:	and	r0, r0, r1, lsr #3
   1514c:	and	r1, r1, #31
   15150:	vst1.64	{d16-d17}, [r2], r0
   15154:	mov	r0, #1
   15158:	ldr	lr, [r2, #8]
   1515c:	bic	r0, r0, lr, lsr r1
   15160:	eor	r0, lr, r0, lsl r1
   15164:	mov	r1, ip
   15168:	str	r0, [r2, #8]
   1516c:	mov	r0, #0
   15170:	mvn	r2, #0
   15174:	bl	14d70 <__assert_fail@plt+0x3cac>
   15178:	mov	sp, fp
   1517c:	pop	{fp, pc}
   15180:	push	{fp, lr}
   15184:	mov	fp, sp
   15188:	sub	sp, sp, #48	; 0x30
   1518c:	movw	r2, #4768	; 0x12a0
   15190:	mov	r3, #32
   15194:	mov	r1, r0
   15198:	movt	r2, #3
   1519c:	add	r0, r2, #16
   151a0:	vld1.64	{d16-d17}, [r2], r3
   151a4:	mov	r3, sp
   151a8:	vld1.64	{d18-d19}, [r0]
   151ac:	add	r0, r3, #16
   151b0:	vld1.64	{d20-d21}, [r2]
   151b4:	mov	r2, r3
   151b8:	vst1.64	{d18-d19}, [r0]
   151bc:	add	r0, r3, #32
   151c0:	vst1.64	{d20-d21}, [r0]
   151c4:	mov	r0, #12
   151c8:	vst1.64	{d16-d17}, [r2], r0
   151cc:	ldr	r0, [r2]
   151d0:	orr	r0, r0, #67108864	; 0x4000000
   151d4:	str	r0, [r2]
   151d8:	mov	r0, #0
   151dc:	mvn	r2, #0
   151e0:	bl	14d70 <__assert_fail@plt+0x3cac>
   151e4:	mov	sp, fp
   151e8:	pop	{fp, pc}
   151ec:	push	{fp, lr}
   151f0:	mov	fp, sp
   151f4:	sub	sp, sp, #48	; 0x30
   151f8:	mov	ip, r1
   151fc:	mov	r1, r0
   15200:	movw	r0, #4768	; 0x12a0
   15204:	mov	r3, #32
   15208:	movt	r0, #3
   1520c:	add	r2, r0, #16
   15210:	vld1.64	{d16-d17}, [r0], r3
   15214:	mov	r3, sp
   15218:	vld1.64	{d18-d19}, [r2]
   1521c:	add	r2, r3, #16
   15220:	vld1.64	{d20-d21}, [r0]
   15224:	add	r0, r3, #32
   15228:	vst1.64	{d18-d19}, [r2]
   1522c:	mov	r2, r3
   15230:	vst1.64	{d20-d21}, [r0]
   15234:	mov	r0, #12
   15238:	vst1.64	{d16-d17}, [r2], r0
   1523c:	ldr	r0, [r2]
   15240:	orr	r0, r0, #67108864	; 0x4000000
   15244:	str	r0, [r2]
   15248:	mov	r0, #0
   1524c:	mov	r2, ip
   15250:	bl	14d70 <__assert_fail@plt+0x3cac>
   15254:	mov	sp, fp
   15258:	pop	{fp, pc}
   1525c:	push	{r4, sl, fp, lr}
   15260:	add	fp, sp, #8
   15264:	sub	sp, sp, #96	; 0x60
   15268:	mov	ip, r2
   1526c:	mov	r2, sp
   15270:	vmov.i32	q8, #0	; 0x00000000
   15274:	mov	r4, #28
   15278:	cmp	r1, #10
   1527c:	mov	r3, r2
   15280:	add	lr, r2, #16
   15284:	vst1.64	{d16-d17}, [r3], r4
   15288:	vst1.64	{d16-d17}, [lr]
   1528c:	vst1.32	{d16-d17}, [r3]
   15290:	beq	152e0 <__assert_fail@plt+0x421c>
   15294:	vld1.64	{d16-d17}, [r2], r4
   15298:	vld1.64	{d18-d19}, [lr]
   1529c:	add	r3, sp, #48	; 0x30
   152a0:	add	r4, r3, #4
   152a4:	vld1.32	{d20-d21}, [r2]
   152a8:	add	r2, r3, #20
   152ac:	vst1.32	{d16-d17}, [r4]
   152b0:	vst1.32	{d18-d19}, [r2]
   152b4:	add	r2, r3, #32
   152b8:	vst1.32	{d20-d21}, [r2]
   152bc:	str	r1, [sp, #48]	; 0x30
   152c0:	mvn	r2, #0
   152c4:	ldr	r1, [sp, #60]	; 0x3c
   152c8:	orr	r1, r1, #67108864	; 0x4000000
   152cc:	str	r1, [sp, #60]	; 0x3c
   152d0:	mov	r1, ip
   152d4:	bl	14d70 <__assert_fail@plt+0x3cac>
   152d8:	sub	sp, fp, #8
   152dc:	pop	{r4, sl, fp, pc}
   152e0:	bl	110b8 <abort@plt>
   152e4:	push	{r4, r5, fp, lr}
   152e8:	add	fp, sp, #8
   152ec:	sub	sp, sp, #48	; 0x30
   152f0:	mov	ip, r3
   152f4:	movw	r3, #4768	; 0x12a0
   152f8:	mov	lr, #32
   152fc:	cmp	r1, #0
   15300:	mov	r5, sp
   15304:	movt	r3, #3
   15308:	cmpne	r2, #0
   1530c:	add	r4, r3, #16
   15310:	vld1.64	{d16-d17}, [r3], lr
   15314:	vld1.64	{d18-d19}, [r4]
   15318:	add	r4, r5, #16
   1531c:	vld1.64	{d20-d21}, [r3]
   15320:	vst1.64	{d16-d17}, [r5], lr
   15324:	mov	r3, #10
   15328:	vst1.64	{d18-d19}, [r4]
   1532c:	vst1.64	{d20-d21}, [r5]
   15330:	str	r3, [sp]
   15334:	bne	1533c <__assert_fail@plt+0x4278>
   15338:	bl	110b8 <abort@plt>
   1533c:	str	r2, [sp, #44]	; 0x2c
   15340:	str	r1, [sp, #40]	; 0x28
   15344:	mov	r3, sp
   15348:	mov	r1, ip
   1534c:	mvn	r2, #0
   15350:	bl	14d70 <__assert_fail@plt+0x3cac>
   15354:	sub	sp, fp, #8
   15358:	pop	{r4, r5, fp, pc}
   1535c:	push	{r4, r5, fp, lr}
   15360:	add	fp, sp, #8
   15364:	sub	sp, sp, #48	; 0x30
   15368:	mov	lr, r3
   1536c:	movw	r3, #4768	; 0x12a0
   15370:	mov	ip, #32
   15374:	cmp	r1, #0
   15378:	mov	r5, sp
   1537c:	movt	r3, #3
   15380:	cmpne	r2, #0
   15384:	add	r4, r3, #16
   15388:	vld1.64	{d16-d17}, [r3], ip
   1538c:	vld1.64	{d18-d19}, [r4]
   15390:	add	r4, r5, #16
   15394:	vld1.64	{d20-d21}, [r3]
   15398:	vst1.64	{d16-d17}, [r5], ip
   1539c:	mov	r3, #10
   153a0:	vst1.64	{d18-d19}, [r4]
   153a4:	vst1.64	{d20-d21}, [r5]
   153a8:	str	r3, [sp]
   153ac:	bne	153b4 <__assert_fail@plt+0x42f0>
   153b0:	bl	110b8 <abort@plt>
   153b4:	ldr	ip, [fp, #8]
   153b8:	str	r2, [sp, #44]	; 0x2c
   153bc:	str	r1, [sp, #40]	; 0x28
   153c0:	mov	r3, sp
   153c4:	mov	r1, lr
   153c8:	mov	r2, ip
   153cc:	bl	14d70 <__assert_fail@plt+0x3cac>
   153d0:	sub	sp, fp, #8
   153d4:	pop	{r4, r5, fp, pc}
   153d8:	push	{r4, sl, fp, lr}
   153dc:	add	fp, sp, #8
   153e0:	sub	sp, sp, #48	; 0x30
   153e4:	mov	ip, r2
   153e8:	movw	r2, #4768	; 0x12a0
   153ec:	mov	lr, #32
   153f0:	cmp	r0, #0
   153f4:	mov	r4, sp
   153f8:	movt	r2, #3
   153fc:	cmpne	r1, #0
   15400:	add	r3, r2, #16
   15404:	vld1.64	{d16-d17}, [r2], lr
   15408:	vld1.64	{d18-d19}, [r3]
   1540c:	add	r3, r4, #16
   15410:	vld1.64	{d20-d21}, [r2]
   15414:	vst1.64	{d16-d17}, [r4], lr
   15418:	mov	r2, #10
   1541c:	vst1.64	{d18-d19}, [r3]
   15420:	vst1.64	{d20-d21}, [r4]
   15424:	str	r2, [sp]
   15428:	bne	15430 <__assert_fail@plt+0x436c>
   1542c:	bl	110b8 <abort@plt>
   15430:	str	r1, [sp, #44]	; 0x2c
   15434:	str	r0, [sp, #40]	; 0x28
   15438:	mov	r3, sp
   1543c:	mov	r0, #0
   15440:	mov	r1, ip
   15444:	mvn	r2, #0
   15448:	bl	14d70 <__assert_fail@plt+0x3cac>
   1544c:	sub	sp, fp, #8
   15450:	pop	{r4, sl, fp, pc}
   15454:	push	{r4, r5, fp, lr}
   15458:	add	fp, sp, #8
   1545c:	sub	sp, sp, #48	; 0x30
   15460:	mov	lr, r2
   15464:	movw	r2, #4768	; 0x12a0
   15468:	mov	ip, r3
   1546c:	mov	r3, #32
   15470:	cmp	r0, #0
   15474:	mov	r5, sp
   15478:	movt	r2, #3
   1547c:	cmpne	r1, #0
   15480:	add	r4, r2, #16
   15484:	vld1.64	{d16-d17}, [r2], r3
   15488:	vld1.64	{d18-d19}, [r4]
   1548c:	add	r4, r5, #16
   15490:	vld1.64	{d20-d21}, [r2]
   15494:	vst1.64	{d16-d17}, [r5], r3
   15498:	mov	r2, #10
   1549c:	vst1.64	{d18-d19}, [r4]
   154a0:	vst1.64	{d20-d21}, [r5]
   154a4:	str	r2, [sp]
   154a8:	bne	154b0 <__assert_fail@plt+0x43ec>
   154ac:	bl	110b8 <abort@plt>
   154b0:	str	r1, [sp, #44]	; 0x2c
   154b4:	str	r0, [sp, #40]	; 0x28
   154b8:	mov	r3, sp
   154bc:	mov	r0, #0
   154c0:	mov	r1, lr
   154c4:	mov	r2, ip
   154c8:	bl	14d70 <__assert_fail@plt+0x3cac>
   154cc:	sub	sp, fp, #8
   154d0:	pop	{r4, r5, fp, pc}
   154d4:	movw	r3, #37112	; 0x90f8
   154d8:	movt	r3, #2
   154dc:	b	14d70 <__assert_fail@plt+0x3cac>
   154e0:	movw	r3, #37112	; 0x90f8
   154e4:	mov	r2, r1
   154e8:	mov	r1, r0
   154ec:	mov	r0, #0
   154f0:	movt	r3, #2
   154f4:	b	14d70 <__assert_fail@plt+0x3cac>
   154f8:	movw	r3, #37112	; 0x90f8
   154fc:	mvn	r2, #0
   15500:	movt	r3, #2
   15504:	b	14d70 <__assert_fail@plt+0x3cac>
   15508:	movw	r3, #37112	; 0x90f8
   1550c:	mov	r1, r0
   15510:	mov	r0, #0
   15514:	mvn	r2, #0
   15518:	movt	r3, #2
   1551c:	b	14d70 <__assert_fail@plt+0x3cac>
   15520:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15524:	add	fp, sp, #24
   15528:	sub	sp, sp, #32
   1552c:	ldr	r6, [fp, #12]
   15530:	ldr	r7, [fp, #8]
   15534:	mov	r4, r2
   15538:	mov	r8, r0
   1553c:	cmp	r1, #0
   15540:	beq	15568 <__assert_fail@plt+0x44a4>
   15544:	movw	r2, #32060	; 0x7d3c
   15548:	mov	r5, r1
   1554c:	str	r3, [sp, #4]
   15550:	str	r4, [sp]
   15554:	mov	r0, r8
   15558:	mov	r1, #1
   1555c:	movt	r2, #1
   15560:	mov	r3, r5
   15564:	b	15580 <__assert_fail@plt+0x44bc>
   15568:	movw	r2, #32072	; 0x7d48
   1556c:	str	r3, [sp]
   15570:	mov	r0, r8
   15574:	mov	r1, #1
   15578:	mov	r3, r4
   1557c:	movt	r2, #1
   15580:	bl	1101c <__fprintf_chk@plt>
   15584:	movw	r1, #32079	; 0x7d4f
   15588:	mov	r0, #0
   1558c:	mov	r2, #5
   15590:	movt	r1, #1
   15594:	bl	10efc <dcgettext@plt>
   15598:	movw	r2, #32797	; 0x801d
   1559c:	mov	r3, r0
   155a0:	movw	r0, #2022	; 0x7e6
   155a4:	mov	r1, #1
   155a8:	str	r0, [sp]
   155ac:	movt	r2, #1
   155b0:	mov	r0, r8
   155b4:	bl	1101c <__fprintf_chk@plt>
   155b8:	movw	r4, #31392	; 0x7aa0
   155bc:	mov	r1, r8
   155c0:	movt	r4, #1
   155c4:	mov	r0, r4
   155c8:	bl	10e60 <fputs_unlocked@plt>
   155cc:	movw	r1, #32083	; 0x7d53
   155d0:	mov	r0, #0
   155d4:	mov	r2, #5
   155d8:	movt	r1, #1
   155dc:	bl	10efc <dcgettext@plt>
   155e0:	movw	r3, #32254	; 0x7dfe
   155e4:	mov	r2, r0
   155e8:	mov	r0, r8
   155ec:	mov	r1, #1
   155f0:	movt	r3, #1
   155f4:	bl	1101c <__fprintf_chk@plt>
   155f8:	mov	r0, r4
   155fc:	mov	r1, r8
   15600:	bl	10e60 <fputs_unlocked@plt>
   15604:	cmp	r6, #9
   15608:	bhi	15644 <__assert_fail@plt+0x4580>
   1560c:	add	r0, pc, #0
   15610:	ldr	pc, [r0, r6, lsl #2]
   15614:	andeq	r5, r1, ip, lsr r6
   15618:	andeq	r5, r1, r0, asr r6
   1561c:	andeq	r5, r1, r0, lsl #13
   15620:	andeq	r5, r1, r8, lsr #13
   15624:	ldrdeq	r5, [r1], -r0
   15628:	strdeq	r5, [r1], -r8
   1562c:	andeq	r5, r1, r0, lsr #14
   15630:	andeq	r5, r1, r8, asr r7
   15634:	andeq	r5, r1, r0, lsl #16
   15638:	andeq	r5, r1, r8, lsr #15
   1563c:	sub	sp, fp, #24
   15640:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15644:	movw	r1, #32607	; 0x7f5f
   15648:	movt	r1, #1
   1564c:	b	157b0 <__assert_fail@plt+0x46ec>
   15650:	movw	r1, #32288	; 0x7e20
   15654:	mov	r0, #0
   15658:	mov	r2, #5
   1565c:	movt	r1, #1
   15660:	bl	10efc <dcgettext@plt>
   15664:	ldr	r3, [r7]
   15668:	mov	r2, r0
   1566c:	mov	r0, r8
   15670:	mov	r1, #1
   15674:	sub	sp, fp, #24
   15678:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1567c:	b	1101c <__fprintf_chk@plt>
   15680:	movw	r1, #32304	; 0x7e30
   15684:	mov	r0, #0
   15688:	mov	r2, #5
   1568c:	movt	r1, #1
   15690:	bl	10efc <dcgettext@plt>
   15694:	mov	r2, r0
   15698:	ldr	r3, [r7]
   1569c:	ldr	r0, [r7, #4]
   156a0:	str	r0, [sp]
   156a4:	b	15794 <__assert_fail@plt+0x46d0>
   156a8:	movw	r1, #32327	; 0x7e47
   156ac:	mov	r0, #0
   156b0:	mov	r2, #5
   156b4:	movt	r1, #1
   156b8:	bl	10efc <dcgettext@plt>
   156bc:	ldr	r3, [r7]
   156c0:	mov	r2, r0
   156c4:	ldmib	r7, {r0, r1}
   156c8:	stm	sp, {r0, r1}
   156cc:	b	15794 <__assert_fail@plt+0x46d0>
   156d0:	movw	r1, #32355	; 0x7e63
   156d4:	mov	r0, #0
   156d8:	mov	r2, #5
   156dc:	movt	r1, #1
   156e0:	bl	10efc <dcgettext@plt>
   156e4:	ldr	r3, [r7]
   156e8:	mov	r2, r0
   156ec:	ldmib	r7, {r0, r1, r7}
   156f0:	stm	sp, {r0, r1, r7}
   156f4:	b	15794 <__assert_fail@plt+0x46d0>
   156f8:	movw	r1, #32387	; 0x7e83
   156fc:	mov	r0, #0
   15700:	mov	r2, #5
   15704:	movt	r1, #1
   15708:	bl	10efc <dcgettext@plt>
   1570c:	ldr	r3, [r7]
   15710:	mov	r2, r0
   15714:	ldmib	r7, {r0, r1, r6, r7}
   15718:	stm	sp, {r0, r1, r6, r7}
   1571c:	b	15794 <__assert_fail@plt+0x46d0>
   15720:	movw	r1, #32423	; 0x7ea7
   15724:	mov	r0, #0
   15728:	mov	r2, #5
   1572c:	movt	r1, #1
   15730:	bl	10efc <dcgettext@plt>
   15734:	ldr	r3, [r7]
   15738:	mov	r2, r0
   1573c:	ldmib	r7, {r0, r1, r6}
   15740:	ldr	r5, [r7, #16]
   15744:	ldr	r7, [r7, #20]
   15748:	stm	sp, {r0, r1, r6}
   1574c:	str	r5, [sp, #12]
   15750:	str	r7, [sp, #16]
   15754:	b	15794 <__assert_fail@plt+0x46d0>
   15758:	movw	r1, #32463	; 0x7ecf
   1575c:	mov	r0, #0
   15760:	mov	r2, #5
   15764:	movt	r1, #1
   15768:	bl	10efc <dcgettext@plt>
   1576c:	ldr	r3, [r7]
   15770:	mov	r2, r0
   15774:	ldmib	r7, {r0, r1, r6}
   15778:	ldr	r5, [r7, #16]
   1577c:	ldr	r4, [r7, #20]
   15780:	ldr	r7, [r7, #24]
   15784:	stm	sp, {r0, r1, r6}
   15788:	str	r5, [sp, #12]
   1578c:	str	r4, [sp, #16]
   15790:	str	r7, [sp, #20]
   15794:	mov	r0, r8
   15798:	mov	r1, #1
   1579c:	bl	1101c <__fprintf_chk@plt>
   157a0:	sub	sp, fp, #24
   157a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157a8:	movw	r1, #32555	; 0x7f2b
   157ac:	movt	r1, #1
   157b0:	mov	r0, #0
   157b4:	mov	r2, #5
   157b8:	bl	10efc <dcgettext@plt>
   157bc:	mov	ip, r0
   157c0:	ldr	r3, [r7]
   157c4:	ldr	r0, [r7, #4]
   157c8:	ldr	r1, [r7, #8]
   157cc:	ldr	r6, [r7, #12]
   157d0:	ldr	r5, [r7, #16]
   157d4:	ldr	r4, [r7, #20]
   157d8:	ldr	r2, [r7, #24]
   157dc:	ldr	lr, [r7, #28]
   157e0:	ldr	r7, [r7, #32]
   157e4:	stm	sp, {r0, r1, r6}
   157e8:	str	r5, [sp, #12]
   157ec:	str	r4, [sp, #16]
   157f0:	str	r2, [sp, #20]
   157f4:	str	lr, [sp, #24]
   157f8:	str	r7, [sp, #28]
   157fc:	b	15844 <__assert_fail@plt+0x4780>
   15800:	movw	r1, #32507	; 0x7efb
   15804:	mov	r0, #0
   15808:	mov	r2, #5
   1580c:	movt	r1, #1
   15810:	bl	10efc <dcgettext@plt>
   15814:	mov	ip, r0
   15818:	ldr	r3, [r7]
   1581c:	ldmib	r7, {r0, r1, r6}
   15820:	ldr	r5, [r7, #16]
   15824:	ldr	r4, [r7, #20]
   15828:	ldr	r2, [r7, #24]
   1582c:	ldr	r7, [r7, #28]
   15830:	stm	sp, {r0, r1, r6}
   15834:	str	r5, [sp, #12]
   15838:	str	r4, [sp, #16]
   1583c:	str	r2, [sp, #20]
   15840:	str	r7, [sp, #24]
   15844:	mov	r0, r8
   15848:	mov	r1, #1
   1584c:	mov	r2, ip
   15850:	bl	1101c <__fprintf_chk@plt>
   15854:	sub	sp, fp, #24
   15858:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1585c:	push	{r4, sl, fp, lr}
   15860:	add	fp, sp, #8
   15864:	sub	sp, sp, #8
   15868:	ldr	ip, [fp, #8]
   1586c:	mov	lr, #0
   15870:	ldr	r4, [ip, lr, lsl #2]
   15874:	add	lr, lr, #1
   15878:	cmp	r4, #0
   1587c:	bne	15870 <__assert_fail@plt+0x47ac>
   15880:	sub	r4, lr, #1
   15884:	str	ip, [sp]
   15888:	str	r4, [sp, #4]
   1588c:	bl	15520 <__assert_fail@plt+0x445c>
   15890:	sub	sp, fp, #8
   15894:	pop	{r4, sl, fp, pc}
   15898:	push	{fp, lr}
   1589c:	mov	fp, sp
   158a0:	sub	sp, sp, #48	; 0x30
   158a4:	ldr	ip, [fp, #8]
   158a8:	ldr	lr, [ip]
   158ac:	cmp	lr, #0
   158b0:	str	lr, [sp, #8]
   158b4:	beq	15950 <__assert_fail@plt+0x488c>
   158b8:	ldr	lr, [ip, #4]
   158bc:	cmp	lr, #0
   158c0:	str	lr, [sp, #12]
   158c4:	beq	15958 <__assert_fail@plt+0x4894>
   158c8:	ldr	lr, [ip, #8]
   158cc:	cmp	lr, #0
   158d0:	str	lr, [sp, #16]
   158d4:	beq	15960 <__assert_fail@plt+0x489c>
   158d8:	ldr	lr, [ip, #12]
   158dc:	cmp	lr, #0
   158e0:	str	lr, [sp, #20]
   158e4:	beq	15968 <__assert_fail@plt+0x48a4>
   158e8:	ldr	lr, [ip, #16]
   158ec:	cmp	lr, #0
   158f0:	str	lr, [sp, #24]
   158f4:	beq	15970 <__assert_fail@plt+0x48ac>
   158f8:	ldr	lr, [ip, #20]
   158fc:	cmp	lr, #0
   15900:	str	lr, [sp, #28]
   15904:	beq	15978 <__assert_fail@plt+0x48b4>
   15908:	ldr	lr, [ip, #24]
   1590c:	cmp	lr, #0
   15910:	str	lr, [sp, #32]
   15914:	beq	15980 <__assert_fail@plt+0x48bc>
   15918:	ldr	lr, [ip, #28]
   1591c:	cmp	lr, #0
   15920:	str	lr, [sp, #36]	; 0x24
   15924:	beq	15988 <__assert_fail@plt+0x48c4>
   15928:	ldr	lr, [ip, #32]
   1592c:	cmp	lr, #0
   15930:	str	lr, [sp, #40]	; 0x28
   15934:	beq	15990 <__assert_fail@plt+0x48cc>
   15938:	ldr	lr, [ip, #36]	; 0x24
   1593c:	mov	ip, #10
   15940:	cmp	lr, #0
   15944:	str	lr, [sp, #44]	; 0x2c
   15948:	movweq	ip, #9
   1594c:	b	15994 <__assert_fail@plt+0x48d0>
   15950:	mov	ip, #0
   15954:	b	15994 <__assert_fail@plt+0x48d0>
   15958:	mov	ip, #1
   1595c:	b	15994 <__assert_fail@plt+0x48d0>
   15960:	mov	ip, #2
   15964:	b	15994 <__assert_fail@plt+0x48d0>
   15968:	mov	ip, #3
   1596c:	b	15994 <__assert_fail@plt+0x48d0>
   15970:	mov	ip, #4
   15974:	b	15994 <__assert_fail@plt+0x48d0>
   15978:	mov	ip, #5
   1597c:	b	15994 <__assert_fail@plt+0x48d0>
   15980:	mov	ip, #6
   15984:	b	15994 <__assert_fail@plt+0x48d0>
   15988:	mov	ip, #7
   1598c:	b	15994 <__assert_fail@plt+0x48d0>
   15990:	mov	ip, #8
   15994:	add	lr, sp, #8
   15998:	str	ip, [sp, #4]
   1599c:	str	lr, [sp]
   159a0:	bl	15520 <__assert_fail@plt+0x445c>
   159a4:	mov	sp, fp
   159a8:	pop	{fp, pc}
   159ac:	push	{fp, lr}
   159b0:	mov	fp, sp
   159b4:	sub	sp, sp, #56	; 0x38
   159b8:	add	ip, fp, #8
   159bc:	str	ip, [sp, #12]
   159c0:	ldr	lr, [fp, #8]
   159c4:	cmp	lr, #0
   159c8:	str	lr, [sp, #16]
   159cc:	beq	15a68 <__assert_fail@plt+0x49a4>
   159d0:	ldr	lr, [ip, #4]
   159d4:	cmp	lr, #0
   159d8:	str	lr, [sp, #20]
   159dc:	beq	15a70 <__assert_fail@plt+0x49ac>
   159e0:	ldr	lr, [ip, #8]
   159e4:	cmp	lr, #0
   159e8:	str	lr, [sp, #24]
   159ec:	beq	15a78 <__assert_fail@plt+0x49b4>
   159f0:	ldr	lr, [ip, #12]
   159f4:	cmp	lr, #0
   159f8:	str	lr, [sp, #28]
   159fc:	beq	15a80 <__assert_fail@plt+0x49bc>
   15a00:	ldr	lr, [ip, #16]
   15a04:	cmp	lr, #0
   15a08:	str	lr, [sp, #32]
   15a0c:	beq	15a88 <__assert_fail@plt+0x49c4>
   15a10:	ldr	lr, [ip, #20]
   15a14:	cmp	lr, #0
   15a18:	str	lr, [sp, #36]	; 0x24
   15a1c:	beq	15a90 <__assert_fail@plt+0x49cc>
   15a20:	ldr	lr, [ip, #24]
   15a24:	cmp	lr, #0
   15a28:	str	lr, [sp, #40]	; 0x28
   15a2c:	beq	15a98 <__assert_fail@plt+0x49d4>
   15a30:	ldr	lr, [ip, #28]
   15a34:	cmp	lr, #0
   15a38:	str	lr, [sp, #44]	; 0x2c
   15a3c:	beq	15aa0 <__assert_fail@plt+0x49dc>
   15a40:	ldr	lr, [ip, #32]
   15a44:	cmp	lr, #0
   15a48:	str	lr, [sp, #48]	; 0x30
   15a4c:	beq	15aa8 <__assert_fail@plt+0x49e4>
   15a50:	ldr	lr, [ip, #36]	; 0x24
   15a54:	mov	ip, #10
   15a58:	cmp	lr, #0
   15a5c:	str	lr, [sp, #52]	; 0x34
   15a60:	movweq	ip, #9
   15a64:	b	15aac <__assert_fail@plt+0x49e8>
   15a68:	mov	ip, #0
   15a6c:	b	15aac <__assert_fail@plt+0x49e8>
   15a70:	mov	ip, #1
   15a74:	b	15aac <__assert_fail@plt+0x49e8>
   15a78:	mov	ip, #2
   15a7c:	b	15aac <__assert_fail@plt+0x49e8>
   15a80:	mov	ip, #3
   15a84:	b	15aac <__assert_fail@plt+0x49e8>
   15a88:	mov	ip, #4
   15a8c:	b	15aac <__assert_fail@plt+0x49e8>
   15a90:	mov	ip, #5
   15a94:	b	15aac <__assert_fail@plt+0x49e8>
   15a98:	mov	ip, #6
   15a9c:	b	15aac <__assert_fail@plt+0x49e8>
   15aa0:	mov	ip, #7
   15aa4:	b	15aac <__assert_fail@plt+0x49e8>
   15aa8:	mov	ip, #8
   15aac:	add	lr, sp, #16
   15ab0:	str	ip, [sp, #4]
   15ab4:	str	lr, [sp]
   15ab8:	bl	15520 <__assert_fail@plt+0x445c>
   15abc:	mov	sp, fp
   15ac0:	pop	{fp, pc}
   15ac4:	push	{fp, lr}
   15ac8:	mov	fp, sp
   15acc:	movw	r0, #37204	; 0x9154
   15ad0:	movt	r0, #2
   15ad4:	ldr	r1, [r0]
   15ad8:	movw	r0, #31392	; 0x7aa0
   15adc:	movt	r0, #1
   15ae0:	bl	10e60 <fputs_unlocked@plt>
   15ae4:	movw	r1, #32667	; 0x7f9b
   15ae8:	mov	r0, #0
   15aec:	mov	r2, #5
   15af0:	movt	r1, #1
   15af4:	bl	10efc <dcgettext@plt>
   15af8:	movw	r2, #32687	; 0x7faf
   15afc:	mov	r1, r0
   15b00:	mov	r0, #1
   15b04:	movt	r2, #1
   15b08:	bl	11004 <__printf_chk@plt>
   15b0c:	movw	r1, #32709	; 0x7fc5
   15b10:	mov	r0, #0
   15b14:	mov	r2, #5
   15b18:	movt	r1, #1
   15b1c:	bl	10efc <dcgettext@plt>
   15b20:	movw	r2, #30860	; 0x788c
   15b24:	movw	r3, #31201	; 0x79e1
   15b28:	mov	r1, r0
   15b2c:	mov	r0, #1
   15b30:	movt	r2, #1
   15b34:	movt	r3, #1
   15b38:	bl	11004 <__printf_chk@plt>
   15b3c:	movw	r1, #32729	; 0x7fd9
   15b40:	mov	r0, #0
   15b44:	mov	r2, #5
   15b48:	movt	r1, #1
   15b4c:	bl	10efc <dcgettext@plt>
   15b50:	movw	r2, #32768	; 0x8000
   15b54:	mov	r1, r0
   15b58:	mov	r0, #1
   15b5c:	movt	r2, #1
   15b60:	pop	{fp, lr}
   15b64:	b	11004 <__printf_chk@plt>
   15b68:	push	{r4, r5, r6, sl, fp, lr}
   15b6c:	add	fp, sp, #16
   15b70:	mov	r4, r2
   15b74:	mov	r5, r1
   15b78:	mov	r6, r0
   15b7c:	bl	17150 <__assert_fail@plt+0x608c>
   15b80:	cmp	r0, #0
   15b84:	popne	{r4, r5, r6, sl, fp, pc}
   15b88:	cmp	r6, #0
   15b8c:	beq	15ba0 <__assert_fail@plt+0x4adc>
   15b90:	cmp	r5, #0
   15b94:	cmpne	r4, #0
   15b98:	bne	15ba0 <__assert_fail@plt+0x4adc>
   15b9c:	pop	{r4, r5, r6, sl, fp, pc}
   15ba0:	bl	16140 <__assert_fail@plt+0x507c>
   15ba4:	push	{r4, r5, r6, sl, fp, lr}
   15ba8:	add	fp, sp, #16
   15bac:	mov	r4, r2
   15bb0:	mov	r5, r1
   15bb4:	mov	r6, r0
   15bb8:	bl	17150 <__assert_fail@plt+0x608c>
   15bbc:	cmp	r0, #0
   15bc0:	popne	{r4, r5, r6, sl, fp, pc}
   15bc4:	cmp	r6, #0
   15bc8:	beq	15bdc <__assert_fail@plt+0x4b18>
   15bcc:	cmp	r5, #0
   15bd0:	cmpne	r4, #0
   15bd4:	bne	15bdc <__assert_fail@plt+0x4b18>
   15bd8:	pop	{r4, r5, r6, sl, fp, pc}
   15bdc:	bl	16140 <__assert_fail@plt+0x507c>
   15be0:	push	{fp, lr}
   15be4:	mov	fp, sp
   15be8:	bl	16f88 <__assert_fail@plt+0x5ec4>
   15bec:	cmp	r0, #0
   15bf0:	popne	{fp, pc}
   15bf4:	bl	16140 <__assert_fail@plt+0x507c>
   15bf8:	push	{fp, lr}
   15bfc:	mov	fp, sp
   15c00:	bl	16f88 <__assert_fail@plt+0x5ec4>
   15c04:	cmp	r0, #0
   15c08:	popne	{fp, pc}
   15c0c:	bl	16140 <__assert_fail@plt+0x507c>
   15c10:	push	{fp, lr}
   15c14:	mov	fp, sp
   15c18:	bl	16f88 <__assert_fail@plt+0x5ec4>
   15c1c:	cmp	r0, #0
   15c20:	popne	{fp, pc}
   15c24:	bl	16140 <__assert_fail@plt+0x507c>
   15c28:	push	{r4, r5, fp, lr}
   15c2c:	add	fp, sp, #8
   15c30:	mov	r4, r1
   15c34:	mov	r5, r0
   15c38:	bl	16fb8 <__assert_fail@plt+0x5ef4>
   15c3c:	cmp	r0, #0
   15c40:	popne	{r4, r5, fp, pc}
   15c44:	cmp	r5, #0
   15c48:	beq	15c58 <__assert_fail@plt+0x4b94>
   15c4c:	cmp	r4, #0
   15c50:	bne	15c58 <__assert_fail@plt+0x4b94>
   15c54:	pop	{r4, r5, fp, pc}
   15c58:	bl	16140 <__assert_fail@plt+0x507c>
   15c5c:	push	{fp, lr}
   15c60:	mov	fp, sp
   15c64:	cmp	r1, #0
   15c68:	orreq	r1, r1, #1
   15c6c:	bl	16fb8 <__assert_fail@plt+0x5ef4>
   15c70:	cmp	r0, #0
   15c74:	popne	{fp, pc}
   15c78:	bl	16140 <__assert_fail@plt+0x507c>
   15c7c:	push	{fp, lr}
   15c80:	mov	fp, sp
   15c84:	clz	r3, r2
   15c88:	lsr	ip, r3, #5
   15c8c:	clz	r3, r1
   15c90:	lsr	r3, r3, #5
   15c94:	orrs	r3, r3, ip
   15c98:	movwne	r1, #1
   15c9c:	movwne	r2, #1
   15ca0:	bl	17150 <__assert_fail@plt+0x608c>
   15ca4:	cmp	r0, #0
   15ca8:	popne	{fp, pc}
   15cac:	bl	16140 <__assert_fail@plt+0x507c>
   15cb0:	push	{fp, lr}
   15cb4:	mov	fp, sp
   15cb8:	mov	r2, r1
   15cbc:	mov	r1, r0
   15cc0:	mov	r0, #0
   15cc4:	bl	17150 <__assert_fail@plt+0x608c>
   15cc8:	cmp	r0, #0
   15ccc:	popne	{fp, pc}
   15cd0:	bl	16140 <__assert_fail@plt+0x507c>
   15cd4:	push	{fp, lr}
   15cd8:	mov	fp, sp
   15cdc:	mov	r2, r1
   15ce0:	mov	r1, r0
   15ce4:	clz	r0, r2
   15ce8:	clz	r3, r1
   15cec:	lsr	r0, r0, #5
   15cf0:	lsr	r3, r3, #5
   15cf4:	orrs	r0, r3, r0
   15cf8:	movwne	r1, #1
   15cfc:	movwne	r2, #1
   15d00:	mov	r0, #0
   15d04:	bl	17150 <__assert_fail@plt+0x608c>
   15d08:	cmp	r0, #0
   15d0c:	popne	{fp, pc}
   15d10:	bl	16140 <__assert_fail@plt+0x507c>
   15d14:	push	{r4, r5, r6, sl, fp, lr}
   15d18:	add	fp, sp, #16
   15d1c:	ldr	r5, [r1]
   15d20:	mov	r4, r1
   15d24:	mov	r6, r0
   15d28:	cmp	r0, #0
   15d2c:	beq	15d44 <__assert_fail@plt+0x4c80>
   15d30:	mov	r0, #1
   15d34:	add	r0, r0, r5, lsr #1
   15d38:	adds	r5, r5, r0
   15d3c:	bcc	15d4c <__assert_fail@plt+0x4c88>
   15d40:	b	15d88 <__assert_fail@plt+0x4cc4>
   15d44:	cmp	r5, #0
   15d48:	movweq	r5, #64	; 0x40
   15d4c:	mov	r0, r6
   15d50:	mov	r1, r5
   15d54:	mov	r2, #1
   15d58:	bl	17150 <__assert_fail@plt+0x608c>
   15d5c:	cmp	r5, #0
   15d60:	mov	r1, r5
   15d64:	movwne	r1, #1
   15d68:	cmp	r0, #0
   15d6c:	bne	15d80 <__assert_fail@plt+0x4cbc>
   15d70:	clz	r2, r6
   15d74:	lsr	r2, r2, #5
   15d78:	orrs	r1, r2, r1
   15d7c:	bne	15d88 <__assert_fail@plt+0x4cc4>
   15d80:	str	r5, [r4]
   15d84:	pop	{r4, r5, r6, sl, fp, pc}
   15d88:	bl	16140 <__assert_fail@plt+0x507c>
   15d8c:	push	{r4, r5, r6, r7, fp, lr}
   15d90:	add	fp, sp, #16
   15d94:	ldr	r5, [r1]
   15d98:	mov	r6, r2
   15d9c:	mov	r4, r1
   15da0:	mov	r7, r0
   15da4:	cmp	r0, #0
   15da8:	beq	15dc0 <__assert_fail@plt+0x4cfc>
   15dac:	mov	r0, #1
   15db0:	add	r0, r0, r5, lsr #1
   15db4:	adds	r5, r5, r0
   15db8:	bcc	15dd8 <__assert_fail@plt+0x4d14>
   15dbc:	b	15e0c <__assert_fail@plt+0x4d48>
   15dc0:	cmp	r5, #0
   15dc4:	bne	15dd8 <__assert_fail@plt+0x4d14>
   15dc8:	mov	r0, #64	; 0x40
   15dcc:	cmp	r6, #64	; 0x40
   15dd0:	udiv	r5, r0, r6
   15dd4:	addhi	r5, r5, #1
   15dd8:	mov	r0, r7
   15ddc:	mov	r1, r5
   15de0:	mov	r2, r6
   15de4:	bl	17150 <__assert_fail@plt+0x608c>
   15de8:	cmp	r0, #0
   15dec:	bne	15e04 <__assert_fail@plt+0x4d40>
   15df0:	cmp	r7, #0
   15df4:	beq	15e0c <__assert_fail@plt+0x4d48>
   15df8:	cmp	r6, #0
   15dfc:	cmpne	r5, #0
   15e00:	bne	15e0c <__assert_fail@plt+0x4d48>
   15e04:	str	r5, [r4]
   15e08:	pop	{r4, r5, r6, r7, fp, pc}
   15e0c:	bl	16140 <__assert_fail@plt+0x507c>
   15e10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e14:	add	fp, sp, #24
   15e18:	mov	r8, r1
   15e1c:	ldr	r1, [r1]
   15e20:	mov	r5, r0
   15e24:	add	r0, r1, r1, asr #1
   15e28:	cmp	r0, r1
   15e2c:	mvnvs	r0, #-2147483648	; 0x80000000
   15e30:	cmp	r0, r3
   15e34:	mov	r7, r0
   15e38:	movgt	r7, r3
   15e3c:	cmn	r3, #1
   15e40:	movle	r7, r0
   15e44:	ldr	r0, [fp, #8]
   15e48:	cmn	r0, #1
   15e4c:	ble	15e74 <__assert_fail@plt+0x4db0>
   15e50:	cmp	r0, #0
   15e54:	beq	15ec8 <__assert_fail@plt+0x4e04>
   15e58:	cmn	r7, #1
   15e5c:	ble	15e9c <__assert_fail@plt+0x4dd8>
   15e60:	mvn	r4, #-2147483648	; 0x80000000
   15e64:	udiv	r6, r4, r0
   15e68:	cmp	r6, r7
   15e6c:	bge	15ec8 <__assert_fail@plt+0x4e04>
   15e70:	b	15ed8 <__assert_fail@plt+0x4e14>
   15e74:	cmn	r7, #1
   15e78:	ble	15eb8 <__assert_fail@plt+0x4df4>
   15e7c:	cmn	r0, #1
   15e80:	beq	15ec8 <__assert_fail@plt+0x4e04>
   15e84:	mov	r6, #-2147483648	; 0x80000000
   15e88:	mvn	r4, #-2147483648	; 0x80000000
   15e8c:	sdiv	r6, r6, r0
   15e90:	cmp	r6, r7
   15e94:	bge	15ec8 <__assert_fail@plt+0x4e04>
   15e98:	b	15ed8 <__assert_fail@plt+0x4e14>
   15e9c:	beq	15ec8 <__assert_fail@plt+0x4e04>
   15ea0:	mov	r6, #-2147483648	; 0x80000000
   15ea4:	mvn	r4, #-2147483648	; 0x80000000
   15ea8:	sdiv	r6, r6, r7
   15eac:	cmp	r6, r0
   15eb0:	bge	15ec8 <__assert_fail@plt+0x4e04>
   15eb4:	b	15ed8 <__assert_fail@plt+0x4e14>
   15eb8:	mvn	r4, #-2147483648	; 0x80000000
   15ebc:	sdiv	r6, r4, r0
   15ec0:	cmp	r7, r6
   15ec4:	blt	15ed8 <__assert_fail@plt+0x4e14>
   15ec8:	mul	r6, r7, r0
   15ecc:	mov	r4, #64	; 0x40
   15ed0:	cmp	r6, #63	; 0x3f
   15ed4:	bgt	15ee0 <__assert_fail@plt+0x4e1c>
   15ed8:	sdiv	r7, r4, r0
   15edc:	mul	r6, r7, r0
   15ee0:	cmp	r5, #0
   15ee4:	moveq	r4, #0
   15ee8:	streq	r4, [r8]
   15eec:	sub	r4, r7, r1
   15ef0:	cmp	r4, r2
   15ef4:	bge	15fa0 <__assert_fail@plt+0x4edc>
   15ef8:	add	r7, r1, r2
   15efc:	mov	r6, #0
   15f00:	mov	r2, #0
   15f04:	cmp	r7, r3
   15f08:	movwgt	r6, #1
   15f0c:	cmn	r3, #1
   15f10:	movwgt	r2, #1
   15f14:	cmp	r7, r1
   15f18:	bvs	15fd4 <__assert_fail@plt+0x4f10>
   15f1c:	ands	r1, r2, r6
   15f20:	bne	15fd4 <__assert_fail@plt+0x4f10>
   15f24:	cmn	r0, #1
   15f28:	ble	15f50 <__assert_fail@plt+0x4e8c>
   15f2c:	cmp	r0, #0
   15f30:	beq	15f9c <__assert_fail@plt+0x4ed8>
   15f34:	cmn	r7, #1
   15f38:	ble	15f74 <__assert_fail@plt+0x4eb0>
   15f3c:	mvn	r1, #-2147483648	; 0x80000000
   15f40:	udiv	r1, r1, r0
   15f44:	cmp	r1, r7
   15f48:	bge	15f9c <__assert_fail@plt+0x4ed8>
   15f4c:	b	15fd4 <__assert_fail@plt+0x4f10>
   15f50:	cmn	r7, #1
   15f54:	ble	15f8c <__assert_fail@plt+0x4ec8>
   15f58:	cmn	r0, #1
   15f5c:	beq	15f9c <__assert_fail@plt+0x4ed8>
   15f60:	mov	r1, #-2147483648	; 0x80000000
   15f64:	sdiv	r1, r1, r0
   15f68:	cmp	r1, r7
   15f6c:	bge	15f9c <__assert_fail@plt+0x4ed8>
   15f70:	b	15fd4 <__assert_fail@plt+0x4f10>
   15f74:	beq	15f9c <__assert_fail@plt+0x4ed8>
   15f78:	mov	r1, #-2147483648	; 0x80000000
   15f7c:	sdiv	r1, r1, r7
   15f80:	cmp	r1, r0
   15f84:	bge	15f9c <__assert_fail@plt+0x4ed8>
   15f88:	b	15fd4 <__assert_fail@plt+0x4f10>
   15f8c:	mvn	r1, #-2147483648	; 0x80000000
   15f90:	sdiv	r1, r1, r0
   15f94:	cmp	r7, r1
   15f98:	blt	15fd4 <__assert_fail@plt+0x4f10>
   15f9c:	mul	r6, r7, r0
   15fa0:	mov	r0, r5
   15fa4:	mov	r1, r6
   15fa8:	bl	16fb8 <__assert_fail@plt+0x5ef4>
   15fac:	cmp	r6, #0
   15fb0:	movwne	r6, #1
   15fb4:	cmp	r0, #0
   15fb8:	bne	15fcc <__assert_fail@plt+0x4f08>
   15fbc:	clz	r1, r5
   15fc0:	lsr	r1, r1, #5
   15fc4:	orrs	r1, r1, r6
   15fc8:	bne	15fd4 <__assert_fail@plt+0x4f10>
   15fcc:	str	r7, [r8]
   15fd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fd4:	bl	16140 <__assert_fail@plt+0x507c>
   15fd8:	push	{fp, lr}
   15fdc:	mov	fp, sp
   15fe0:	mov	r1, #1
   15fe4:	bl	16f34 <__assert_fail@plt+0x5e70>
   15fe8:	cmp	r0, #0
   15fec:	popne	{fp, pc}
   15ff0:	bl	16140 <__assert_fail@plt+0x507c>
   15ff4:	push	{fp, lr}
   15ff8:	mov	fp, sp
   15ffc:	bl	16f34 <__assert_fail@plt+0x5e70>
   16000:	cmp	r0, #0
   16004:	popne	{fp, pc}
   16008:	bl	16140 <__assert_fail@plt+0x507c>
   1600c:	push	{fp, lr}
   16010:	mov	fp, sp
   16014:	mov	r1, #1
   16018:	bl	16f34 <__assert_fail@plt+0x5e70>
   1601c:	cmp	r0, #0
   16020:	popne	{fp, pc}
   16024:	bl	16140 <__assert_fail@plt+0x507c>
   16028:	push	{fp, lr}
   1602c:	mov	fp, sp
   16030:	bl	16f34 <__assert_fail@plt+0x5e70>
   16034:	cmp	r0, #0
   16038:	popne	{fp, pc}
   1603c:	bl	16140 <__assert_fail@plt+0x507c>
   16040:	push	{r4, r5, r6, sl, fp, lr}
   16044:	add	fp, sp, #16
   16048:	mov	r5, r0
   1604c:	mov	r0, r1
   16050:	mov	r4, r1
   16054:	bl	16f88 <__assert_fail@plt+0x5ec4>
   16058:	cmp	r0, #0
   1605c:	beq	16078 <__assert_fail@plt+0x4fb4>
   16060:	mov	r1, r5
   16064:	mov	r2, r4
   16068:	mov	r6, r0
   1606c:	bl	10ec0 <memcpy@plt>
   16070:	mov	r0, r6
   16074:	pop	{r4, r5, r6, sl, fp, pc}
   16078:	bl	16140 <__assert_fail@plt+0x507c>
   1607c:	push	{r4, r5, r6, sl, fp, lr}
   16080:	add	fp, sp, #16
   16084:	mov	r5, r0
   16088:	mov	r0, r1
   1608c:	mov	r4, r1
   16090:	bl	16f88 <__assert_fail@plt+0x5ec4>
   16094:	cmp	r0, #0
   16098:	beq	160b4 <__assert_fail@plt+0x4ff0>
   1609c:	mov	r1, r5
   160a0:	mov	r2, r4
   160a4:	mov	r6, r0
   160a8:	bl	10ec0 <memcpy@plt>
   160ac:	mov	r0, r6
   160b0:	pop	{r4, r5, r6, sl, fp, pc}
   160b4:	bl	16140 <__assert_fail@plt+0x507c>
   160b8:	push	{r4, r5, r6, sl, fp, lr}
   160bc:	add	fp, sp, #16
   160c0:	mov	r5, r0
   160c4:	add	r0, r1, #1
   160c8:	mov	r4, r1
   160cc:	bl	16f88 <__assert_fail@plt+0x5ec4>
   160d0:	cmp	r0, #0
   160d4:	beq	160fc <__assert_fail@plt+0x5038>
   160d8:	mov	r6, r0
   160dc:	mov	r0, #0
   160e0:	mov	r1, r5
   160e4:	mov	r2, r4
   160e8:	strb	r0, [r6, r4]
   160ec:	mov	r0, r6
   160f0:	bl	10ec0 <memcpy@plt>
   160f4:	mov	r0, r6
   160f8:	pop	{r4, r5, r6, sl, fp, pc}
   160fc:	bl	16140 <__assert_fail@plt+0x507c>
   16100:	push	{r4, r5, r6, sl, fp, lr}
   16104:	add	fp, sp, #16
   16108:	mov	r4, r0
   1610c:	bl	10fc8 <strlen@plt>
   16110:	add	r5, r0, #1
   16114:	mov	r0, r5
   16118:	bl	16f88 <__assert_fail@plt+0x5ec4>
   1611c:	cmp	r0, #0
   16120:	beq	1613c <__assert_fail@plt+0x5078>
   16124:	mov	r1, r4
   16128:	mov	r2, r5
   1612c:	mov	r6, r0
   16130:	bl	10ec0 <memcpy@plt>
   16134:	mov	r0, r6
   16138:	pop	{r4, r5, r6, sl, fp, pc}
   1613c:	bl	16140 <__assert_fail@plt+0x507c>
   16140:	push	{fp, lr}
   16144:	mov	fp, sp
   16148:	movw	r0, #37108	; 0x90f4
   1614c:	movw	r1, #32844	; 0x804c
   16150:	mov	r2, #5
   16154:	movt	r0, #2
   16158:	movt	r1, #1
   1615c:	ldr	r4, [r0]
   16160:	mov	r0, #0
   16164:	bl	10efc <dcgettext@plt>
   16168:	movw	r2, #31807	; 0x7c3f
   1616c:	mov	r3, r0
   16170:	mov	r0, r4
   16174:	mov	r1, #0
   16178:	movt	r2, #1
   1617c:	bl	10f68 <error@plt>
   16180:	bl	110b8 <abort@plt>
   16184:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16188:	add	fp, sp, #24
   1618c:	sub	sp, sp, #16
   16190:	mov	r8, r0
   16194:	ldr	r0, [fp, #16]
   16198:	mov	r5, r3
   1619c:	mov	r6, r2
   161a0:	mov	r2, r1
   161a4:	add	r3, sp, #8
   161a8:	mov	r1, #0
   161ac:	str	r0, [sp]
   161b0:	mov	r0, r8
   161b4:	bl	16280 <__assert_fail@plt+0x51bc>
   161b8:	cmp	r0, #0
   161bc:	bne	16248 <__assert_fail@plt+0x5184>
   161c0:	ldr	r4, [sp, #8]
   161c4:	ldr	r7, [sp, #12]
   161c8:	subs	r0, r4, r6
   161cc:	sbcs	r0, r7, r5
   161d0:	bcc	161f4 <__assert_fail@plt+0x5130>
   161d4:	ldr	r1, [fp, #8]
   161d8:	ldr	r0, [fp, #12]
   161dc:	subs	r1, r1, r4
   161e0:	sbcs	r0, r0, r7
   161e4:	movcs	r0, r4
   161e8:	movcs	r1, r7
   161ec:	subcs	sp, fp, #24
   161f0:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   161f4:	bl	10fe0 <__errno_location@plt>
   161f8:	subs	r1, r4, #1073741824	; 0x40000000
   161fc:	sbcs	r1, r7, #0
   16200:	movcc	r1, #34	; 0x22
   16204:	movcs	r1, #75	; 0x4b
   16208:	str	r1, [r0]
   1620c:	ldr	r6, [r0]
   16210:	ldr	r4, [fp, #24]
   16214:	ldr	r5, [fp, #20]
   16218:	mov	r0, r8
   1621c:	bl	15508 <__assert_fail@plt+0x4444>
   16220:	subs	r1, r6, #22
   16224:	movw	r2, #31803	; 0x7c3b
   16228:	str	r0, [sp]
   1622c:	mov	r3, r5
   16230:	movne	r1, r6
   16234:	cmp	r4, #0
   16238:	movt	r2, #1
   1623c:	movweq	r4, #1
   16240:	mov	r0, r4
   16244:	bl	10f68 <error@plt>
   16248:	cmp	r0, #1
   1624c:	beq	16264 <__assert_fail@plt+0x51a0>
   16250:	cmp	r0, #3
   16254:	bne	16270 <__assert_fail@plt+0x51ac>
   16258:	bl	10fe0 <__errno_location@plt>
   1625c:	mov	r1, #0
   16260:	b	16208 <__assert_fail@plt+0x5144>
   16264:	bl	10fe0 <__errno_location@plt>
   16268:	mov	r1, #75	; 0x4b
   1626c:	b	16208 <__assert_fail@plt+0x5144>
   16270:	bl	10fe0 <__errno_location@plt>
   16274:	b	1620c <__assert_fail@plt+0x5148>
   16278:	mov	r1, #10
   1627c:	b	16184 <__assert_fail@plt+0x50c0>
   16280:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16284:	add	fp, sp, #28
   16288:	sub	sp, sp, #44	; 0x2c
   1628c:	cmp	r2, #37	; 0x25
   16290:	bcs	16f14 <__assert_fail@plt+0x5e50>
   16294:	ldr	sl, [fp, #8]
   16298:	mov	r6, r2
   1629c:	mov	r7, r1
   162a0:	mov	r4, r0
   162a4:	str	r3, [sp, #36]	; 0x24
   162a8:	bl	10fe0 <__errno_location@plt>
   162ac:	mov	r5, r0
   162b0:	mov	r0, #0
   162b4:	str	r0, [r5]
   162b8:	bl	10fb0 <__ctype_b_loc@plt>
   162bc:	ldr	r1, [r0]
   162c0:	mov	r2, r4
   162c4:	ldrb	r0, [r2], #1
   162c8:	add	r3, r1, r0, lsl #1
   162cc:	ldrb	r3, [r3, #1]
   162d0:	tst	r3, #32
   162d4:	bne	162c4 <__assert_fail@plt+0x5200>
   162d8:	sub	r9, fp, #32
   162dc:	cmp	r7, #0
   162e0:	mov	r8, #4
   162e4:	movne	r9, r7
   162e8:	cmp	r0, #45	; 0x2d
   162ec:	beq	166ac <__assert_fail@plt+0x55e8>
   162f0:	mov	r0, r4
   162f4:	mov	r1, r9
   162f8:	mov	r2, r6
   162fc:	mov	r3, #0
   16300:	bl	10ecc <__strtoull_internal@plt>
   16304:	mov	r7, r1
   16308:	ldr	r1, [r9]
   1630c:	cmp	r1, r4
   16310:	beq	16348 <__assert_fail@plt+0x5284>
   16314:	mov	r6, r0
   16318:	ldr	r0, [r5]
   1631c:	cmp	r0, #0
   16320:	beq	16664 <__assert_fail@plt+0x55a0>
   16324:	cmp	r0, #34	; 0x22
   16328:	bne	166ac <__assert_fail@plt+0x55e8>
   1632c:	mov	r8, #1
   16330:	cmp	sl, #0
   16334:	beq	16f00 <__assert_fail@plt+0x5e3c>
   16338:	ldrb	r4, [r1]
   1633c:	cmp	r4, #0
   16340:	bne	1638c <__assert_fail@plt+0x52c8>
   16344:	b	16f00 <__assert_fail@plt+0x5e3c>
   16348:	cmp	sl, #0
   1634c:	beq	166ac <__assert_fail@plt+0x55e8>
   16350:	mov	r5, r1
   16354:	ldrb	r1, [r4]
   16358:	cmp	r1, #0
   1635c:	beq	166ac <__assert_fail@plt+0x55e8>
   16360:	mov	r0, sl
   16364:	bl	10fd4 <strchr@plt>
   16368:	cmp	r0, #0
   1636c:	beq	166ac <__assert_fail@plt+0x55e8>
   16370:	mov	r1, r5
   16374:	mov	r8, #0
   16378:	mov	r6, #1
   1637c:	mov	r7, #0
   16380:	ldrb	r4, [r1]
   16384:	cmp	r4, #0
   16388:	beq	16f00 <__assert_fail@plt+0x5e3c>
   1638c:	str	r1, [sp, #32]
   16390:	mov	r0, sl
   16394:	mov	r1, r4
   16398:	bl	10fd4 <strchr@plt>
   1639c:	cmp	r0, #0
   163a0:	beq	166a0 <__assert_fail@plt+0x55dc>
   163a4:	sub	r0, r4, #69	; 0x45
   163a8:	mov	r1, #1
   163ac:	mov	r3, #0
   163b0:	mov	r5, #1024	; 0x400
   163b4:	cmp	r0, #47	; 0x2f
   163b8:	str	r1, [sp, #28]
   163bc:	bhi	164c0 <__assert_fail@plt+0x53fc>
   163c0:	add	r1, pc, #0
   163c4:	ldr	pc, [r1, r0, lsl #2]
   163c8:	andeq	r6, r1, r8, lsl #9
   163cc:	andeq	r6, r1, r0, asr #9
   163d0:	andeq	r6, r1, r8, lsl #9
   163d4:	andeq	r6, r1, r0, asr #9
   163d8:	andeq	r6, r1, r0, asr #9
   163dc:	andeq	r6, r1, r0, asr #9
   163e0:	andeq	r6, r1, r8, lsl #9
   163e4:	andeq	r6, r1, r0, asr #9
   163e8:	andeq	r6, r1, r8, lsl #9
   163ec:	andeq	r6, r1, r0, asr #9
   163f0:	andeq	r6, r1, r0, asr #9
   163f4:	andeq	r6, r1, r8, lsl #9
   163f8:	andeq	r6, r1, r0, asr #9
   163fc:	andeq	r6, r1, r0, asr #9
   16400:	andeq	r6, r1, r0, asr #9
   16404:	andeq	r6, r1, r8, lsl #9
   16408:	andeq	r6, r1, r0, asr #9
   1640c:	andeq	r6, r1, r0, asr #9
   16410:	andeq	r6, r1, r0, asr #9
   16414:	andeq	r6, r1, r0, asr #9
   16418:	andeq	r6, r1, r8, lsl #9
   1641c:	andeq	r6, r1, r8, lsl #9
   16420:	andeq	r6, r1, r0, asr #9
   16424:	andeq	r6, r1, r0, asr #9
   16428:	andeq	r6, r1, r0, asr #9
   1642c:	andeq	r6, r1, r0, asr #9
   16430:	andeq	r6, r1, r0, asr #9
   16434:	andeq	r6, r1, r0, asr #9
   16438:	andeq	r6, r1, r0, asr #9
   1643c:	andeq	r6, r1, r0, asr #9
   16440:	andeq	r6, r1, r0, asr #9
   16444:	andeq	r6, r1, r0, asr #9
   16448:	andeq	r6, r1, r0, asr #9
   1644c:	andeq	r6, r1, r0, asr #9
   16450:	andeq	r6, r1, r8, lsl #9
   16454:	andeq	r6, r1, r0, asr #9
   16458:	andeq	r6, r1, r0, asr #9
   1645c:	andeq	r6, r1, r0, asr #9
   16460:	andeq	r6, r1, r8, lsl #9
   16464:	andeq	r6, r1, r0, asr #9
   16468:	andeq	r6, r1, r8, lsl #9
   1646c:	andeq	r6, r1, r0, asr #9
   16470:	andeq	r6, r1, r0, asr #9
   16474:	andeq	r6, r1, r0, asr #9
   16478:	andeq	r6, r1, r0, asr #9
   1647c:	andeq	r6, r1, r0, asr #9
   16480:	andeq	r6, r1, r0, asr #9
   16484:	andeq	r6, r1, r8, lsl #9
   16488:	mov	r0, sl
   1648c:	mov	r1, #48	; 0x30
   16490:	bl	10fd4 <strchr@plt>
   16494:	cmp	r0, #0
   16498:	beq	164bc <__assert_fail@plt+0x53f8>
   1649c:	ldr	r1, [sp, #32]
   164a0:	ldrb	r0, [r1, #1]
   164a4:	cmp	r0, #66	; 0x42
   164a8:	cmpne	r0, #68	; 0x44
   164ac:	bne	16674 <__assert_fail@plt+0x55b0>
   164b0:	mov	r5, #1000	; 0x3e8
   164b4:	mov	r0, #2
   164b8:	str	r0, [sp, #28]
   164bc:	mov	r3, #0
   164c0:	sub	r0, r4, #66	; 0x42
   164c4:	cmp	r0, #53	; 0x35
   164c8:	bhi	166a0 <__assert_fail@plt+0x55dc>
   164cc:	add	r1, pc, #0
   164d0:	ldr	pc, [r1, r0, lsl #2]
   164d4:	andeq	r6, r1, r0, lsl sl
   164d8:	andeq	r6, r1, r0, lsr #13
   164dc:	andeq	r6, r1, r0, lsr #13
   164e0:	andeq	r6, r1, r8, lsr sl
   164e4:	andeq	r6, r1, r0, lsr #13
   164e8:	andeq	r6, r1, ip, lsr #11
   164ec:	andeq	r6, r1, r0, lsr #13
   164f0:	andeq	r6, r1, r0, lsr #13
   164f4:	andeq	r6, r1, r0, lsr #13
   164f8:			; <UNDEFINED> instruction: 0x000166b8
   164fc:	andeq	r6, r1, r0, lsr #13
   16500:	andeq	r6, r1, r0, lsl #14
   16504:	andeq	r6, r1, r0, lsr #13
   16508:	andeq	r6, r1, r0, lsr #13
   1650c:	andeq	r6, r1, ip, lsl #23
   16510:	andeq	r6, r1, r0, lsr #13
   16514:	andeq	r6, r1, r0, lsr #13
   16518:	andeq	r6, r1, r0, lsr #13
   1651c:	andeq	r6, r1, ip, lsl #15
   16520:	andeq	r6, r1, r0, lsr #13
   16524:	andeq	r6, r1, r0, lsr #13
   16528:	andeq	r6, r1, r0, lsr #13
   1652c:	andeq	r6, r1, r0, lsr #13
   16530:			; <UNDEFINED> instruction: 0x00016cb4
   16534:	andeq	r6, r1, r4, ror r8
   16538:	andeq	r6, r1, r0, lsr #13
   1653c:	andeq	r6, r1, r0, lsr #13
   16540:	andeq	r6, r1, r0, lsr #13
   16544:	andeq	r6, r1, r0, lsr #13
   16548:	andeq	r6, r1, r0, lsr #13
   1654c:	andeq	r6, r1, r0, lsr #13
   16550:	andeq	r6, r1, r0, lsr #13
   16554:	andeq	r6, r1, r8, lsl #29
   16558:	andeq	r6, r1, r0, ror #29
   1655c:	andeq	r6, r1, r0, lsr #13
   16560:	andeq	r6, r1, r0, lsr #13
   16564:	andeq	r6, r1, r0, lsr #13
   16568:	andeq	r6, r1, ip, lsr #11
   1656c:	andeq	r6, r1, r0, lsr #13
   16570:	andeq	r6, r1, r0, lsr #13
   16574:	andeq	r6, r1, r0, lsr #13
   16578:			; <UNDEFINED> instruction: 0x000166b8
   1657c:	andeq	r6, r1, r0, lsr #13
   16580:	andeq	r6, r1, r0, lsl #14
   16584:	andeq	r6, r1, r0, lsr #13
   16588:	andeq	r6, r1, r0, lsr #13
   1658c:	andeq	r6, r1, r0, lsr #13
   16590:	andeq	r6, r1, r0, lsr #13
   16594:	andeq	r6, r1, r0, lsr #13
   16598:	andeq	r6, r1, r0, lsr #13
   1659c:	andeq	r6, r1, ip, lsl #15
   165a0:	andeq	r6, r1, r0, lsr #13
   165a4:	andeq	r6, r1, r0, lsr #13
   165a8:			; <UNDEFINED> instruction: 0x00016ebc
   165ac:	mvn	r0, #0
   165b0:	mvn	r1, #0
   165b4:	mov	r2, r5
   165b8:	mov	sl, r3
   165bc:	bl	17294 <__assert_fail@plt+0x61d0>
   165c0:	subs	r3, r0, r6
   165c4:	mov	lr, #0
   165c8:	umull	r4, r2, r6, r5
   165cc:	str	r1, [sp, #20]
   165d0:	sbcs	r3, r1, r7
   165d4:	mla	ip, r6, sl, r2
   165d8:	mov	r2, r1
   165dc:	movwcc	lr, #1
   165e0:	mla	r7, r7, r5, ip
   165e4:	mov	r2, #0
   165e8:	cmp	lr, #0
   165ec:	mvnne	r4, #0
   165f0:	mvnne	r7, #0
   165f4:	subs	r6, r0, r4
   165f8:	sbcs	r6, r1, r7
   165fc:	movwcc	r2, #1
   16600:	umull	r3, r6, r4, r5
   16604:	cmp	r2, #0
   16608:	str	r6, [sp, #16]
   1660c:	mvnne	r3, #0
   16610:	cmp	r2, #0
   16614:	umull	r6, ip, r3, r5
   16618:	mla	r1, r3, sl, ip
   1661c:	ldr	ip, [sp, #16]
   16620:	str	r1, [sp, #12]
   16624:	mla	r4, r4, sl, ip
   16628:	mla	r4, r7, r5, r4
   1662c:	ldr	r7, [sp, #12]
   16630:	mvnne	r4, #0
   16634:	subs	r0, r0, r3
   16638:	ldr	r0, [sp, #20]
   1663c:	mla	r7, r4, r5, r7
   16640:	sbcs	r0, r0, r4
   16644:	mov	r0, #0
   16648:	movwcc	r0, #1
   1664c:	cmp	r0, #0
   16650:	mov	r1, r0
   16654:	orr	r0, lr, r2
   16658:	mvnne	r7, #0
   1665c:	mvnne	r6, #0
   16660:	b	16cac <__assert_fail@plt+0x5be8>
   16664:	mov	r8, r0
   16668:	cmp	sl, #0
   1666c:	bne	16338 <__assert_fail@plt+0x5274>
   16670:	b	16f00 <__assert_fail@plt+0x5e3c>
   16674:	cmp	r0, #105	; 0x69
   16678:	mov	r3, #0
   1667c:	bne	164c0 <__assert_fail@plt+0x53fc>
   16680:	ldrb	r0, [r1, #2]
   16684:	mov	r1, #1
   16688:	cmp	r0, #66	; 0x42
   1668c:	movweq	r1, #3
   16690:	str	r1, [sp, #28]
   16694:	sub	r0, r4, #66	; 0x42
   16698:	cmp	r0, #53	; 0x35
   1669c:	bls	164cc <__assert_fail@plt+0x5408>
   166a0:	ldr	r0, [sp, #36]	; 0x24
   166a4:	orr	r8, r8, #2
   166a8:	strd	r6, [r0]
   166ac:	mov	r0, r8
   166b0:	sub	sp, fp, #28
   166b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166b8:	mvn	r0, #0
   166bc:	mvn	r1, #0
   166c0:	mov	r2, r5
   166c4:	mov	r4, r3
   166c8:	bl	17294 <__assert_fail@plt+0x61d0>
   166cc:	subs	r0, r0, r6
   166d0:	mov	r2, #0
   166d4:	sbcs	r0, r1, r7
   166d8:	movwcc	r2, #1
   166dc:	umull	r0, r1, r6, r5
   166e0:	mla	r1, r6, r4, r1
   166e4:	cmp	r2, #0
   166e8:	mov	r3, r2
   166ec:	mla	r7, r7, r5, r1
   166f0:	mvnne	r0, #0
   166f4:	mvnne	r7, #0
   166f8:	mov	r6, r0
   166fc:	b	16ee0 <__assert_fail@plt+0x5e1c>
   16700:	mvn	r0, #0
   16704:	mvn	r1, #0
   16708:	mov	r2, r5
   1670c:	str	r3, [sp, #24]
   16710:	bl	17294 <__assert_fail@plt+0x61d0>
   16714:	subs	r3, r0, r6
   16718:	mov	ip, r0
   1671c:	umull	r4, r0, r6, r5
   16720:	mov	sl, #0
   16724:	sbcs	r3, r1, r7
   16728:	str	r0, [sp, #20]
   1672c:	ldr	r0, [sp, #24]
   16730:	mov	r3, #0
   16734:	movwcc	r3, #1
   16738:	cmp	r3, #0
   1673c:	mvnne	r4, #0
   16740:	cmp	r3, #0
   16744:	umull	lr, r2, r4, r5
   16748:	mla	r2, r4, r0, r2
   1674c:	str	r2, [sp, #16]
   16750:	ldr	r2, [sp, #20]
   16754:	mla	r6, r6, r0, r2
   16758:	ldr	r0, [sp, #16]
   1675c:	mla	r6, r7, r5, r6
   16760:	mvnne	r6, #0
   16764:	mla	r7, r6, r5, r0
   16768:	subs	r0, ip, r4
   1676c:	sbcs	r0, r1, r6
   16770:	movwcc	sl, #1
   16774:	cmp	sl, #0
   16778:	orr	r3, r3, sl
   1677c:	mvnne	lr, #0
   16780:	mvnne	r7, #0
   16784:	mov	r6, lr
   16788:	b	16ee0 <__assert_fail@plt+0x5e1c>
   1678c:	mvn	r0, #0
   16790:	mvn	r1, #0
   16794:	mov	r2, r5
   16798:	mov	sl, r3
   1679c:	bl	17294 <__assert_fail@plt+0x61d0>
   167a0:	subs	r3, r0, r6
   167a4:	mov	ip, r1
   167a8:	umull	r2, lr, r6, r5
   167ac:	str	r0, [sp, #20]
   167b0:	sbcs	r3, r1, r7
   167b4:	mov	r1, #0
   167b8:	mla	r6, r6, sl, lr
   167bc:	mov	lr, #0
   167c0:	str	ip, [sp, #16]
   167c4:	movwcc	r1, #1
   167c8:	mla	r7, r7, r5, r6
   167cc:	cmp	r1, #0
   167d0:	mvnne	r2, #0
   167d4:	cmp	r1, #0
   167d8:	umull	r3, r4, r2, r5
   167dc:	mvnne	r7, #0
   167e0:	mla	r4, r2, sl, r4
   167e4:	subs	r2, r0, r2
   167e8:	sbcs	r2, ip, r7
   167ec:	mla	r4, r7, r5, r4
   167f0:	movwcc	lr, #1
   167f4:	mov	r2, #0
   167f8:	cmp	lr, #0
   167fc:	mvnne	r3, #0
   16800:	mvnne	r4, #0
   16804:	subs	r7, r0, r3
   16808:	mov	r0, r5
   1680c:	sbcs	r7, ip, r4
   16810:	movwcc	r2, #1
   16814:	umull	r5, r7, r3, r5
   16818:	cmp	r2, #0
   1681c:	mla	r3, r3, sl, r7
   16820:	mvnne	r5, #0
   16824:	mla	r3, r4, r0, r3
   16828:	cmp	r2, #0
   1682c:	umull	r6, ip, r5, r0
   16830:	mvnne	r3, #0
   16834:	mla	ip, r5, sl, ip
   16838:	mla	r7, r3, r0, ip
   1683c:	ldr	r0, [sp, #20]
   16840:	subs	r0, r0, r5
   16844:	ldr	r0, [sp, #16]
   16848:	sbcs	r0, r0, r3
   1684c:	mov	r0, #0
   16850:	movwcc	r0, #1
   16854:	cmp	r0, #0
   16858:	mov	r3, r0
   1685c:	orr	r0, r1, lr
   16860:	orr	r0, r0, r2
   16864:	mvnne	r7, #0
   16868:	mvnne	r6, #0
   1686c:	orr	r3, r0, r3
   16870:	b	16ee0 <__assert_fail@plt+0x5e1c>
   16874:	mvn	r0, #0
   16878:	mvn	r1, #0
   1687c:	mov	r2, r5
   16880:	mov	r4, r3
   16884:	str	r3, [sp, #24]
   16888:	bl	17294 <__assert_fail@plt+0x61d0>
   1688c:	umull	r3, r2, r6, r5
   16890:	mla	r2, r6, r4, r2
   16894:	subs	r6, r0, r6
   16898:	sbcs	r6, r1, r7
   1689c:	mla	r2, r7, r5, r2
   168a0:	mov	r7, #0
   168a4:	mov	r6, #0
   168a8:	movwcc	r6, #1
   168ac:	cmp	r6, #0
   168b0:	str	r6, [sp, #20]
   168b4:	mvnne	r3, #0
   168b8:	mvnne	r2, #0
   168bc:	subs	r4, r0, r3
   168c0:	umull	r6, ip, r3, r5
   168c4:	sbcs	r4, r1, r2
   168c8:	ldr	r4, [sp, #24]
   168cc:	movwcc	r7, #1
   168d0:	cmp	r7, #0
   168d4:	mov	lr, r7
   168d8:	str	r7, [sp, #16]
   168dc:	mvnne	r6, #0
   168e0:	cmp	lr, #0
   168e4:	mov	lr, #0
   168e8:	umull	sl, r7, r6, r5
   168ec:	mla	r3, r3, r4, ip
   168f0:	mla	r7, r6, r4, r7
   168f4:	mov	r4, r0
   168f8:	mla	r2, r2, r5, r3
   168fc:	mvnne	r2, #0
   16900:	subs	r3, r0, r6
   16904:	mov	r0, #0
   16908:	mla	r7, r2, r5, r7
   1690c:	sbcs	r2, r1, r2
   16910:	mov	r3, r4
   16914:	movwcc	r0, #1
   16918:	str	r3, [sp, #4]
   1691c:	cmp	r0, #0
   16920:	str	r0, [sp, #12]
   16924:	mov	r0, r1
   16928:	mvnne	sl, #0
   1692c:	mvnne	r7, #0
   16930:	str	r0, [sp, #8]
   16934:	subs	r2, r4, sl
   16938:	ldr	r4, [sp, #24]
   1693c:	sbcs	r2, r1, r7
   16940:	movwcc	lr, #1
   16944:	umull	r6, r2, sl, r5
   16948:	cmp	lr, #0
   1694c:	mvnne	r6, #0
   16950:	mla	r2, sl, r4, r2
   16954:	cmp	lr, #0
   16958:	umull	r1, ip, r6, r5
   1695c:	mla	r2, r7, r5, r2
   16960:	mla	ip, r6, r4, ip
   16964:	mvnne	r2, #0
   16968:	subs	r6, r3, r6
   1696c:	mla	r7, r2, r5, ip
   16970:	sbcs	r2, r0, r2
   16974:	mov	ip, #0
   16978:	movwcc	ip, #1
   1697c:	mov	r2, #0
   16980:	cmp	ip, #0
   16984:	mvnne	r1, #0
   16988:	mvnne	r7, #0
   1698c:	subs	r6, r3, r1
   16990:	ldr	r3, [sp, #24]
   16994:	sbcs	r6, r0, r7
   16998:	umull	r0, sl, r1, r5
   1699c:	movwcc	r2, #1
   169a0:	cmp	r2, #0
   169a4:	mvnne	r0, #0
   169a8:	mla	r1, r1, r3, sl
   169ac:	cmp	r2, #0
   169b0:	umull	r6, r4, r0, r5
   169b4:	mla	r1, r7, r5, r1
   169b8:	mla	r4, r0, r3, r4
   169bc:	ldr	r3, [sp, #4]
   169c0:	mvnne	r1, #0
   169c4:	mla	r7, r1, r5, r4
   169c8:	ldr	r5, [sp, #16]
   169cc:	subs	r0, r3, r0
   169d0:	ldr	r0, [sp, #8]
   169d4:	sbcs	r0, r0, r1
   169d8:	mov	r0, #0
   169dc:	movwcc	r0, #1
   169e0:	cmp	r0, #0
   169e4:	mov	r1, r0
   169e8:	ldr	r0, [sp, #20]
   169ec:	mvnne	r7, #0
   169f0:	mvnne	r6, #0
   169f4:	orr	r0, r0, r5
   169f8:	ldr	r5, [sp, #12]
   169fc:	orr	r0, r0, r5
   16a00:	orr	r0, r0, lr
   16a04:	orr	r0, r0, ip
   16a08:	orr	r0, r0, r2
   16a0c:	b	16e7c <__assert_fail@plt+0x5db8>
   16a10:	mov	r1, #0
   16a14:	lsl	r2, r7, #10
   16a18:	lsl	r0, r6, #10
   16a1c:	lsr	r3, r7, #22
   16a20:	cmp	r1, r7, lsr #22
   16a24:	orr	r2, r2, r6, lsr #22
   16a28:	mvnne	r0, #0
   16a2c:	movwne	r3, #1
   16a30:	cmp	r1, r7, lsr #22
   16a34:	b	16eac <__assert_fail@plt+0x5de8>
   16a38:	mvn	r0, #0
   16a3c:	mvn	r1, #0
   16a40:	mov	r2, r5
   16a44:	mov	sl, r3
   16a48:	bl	17294 <__assert_fail@plt+0x61d0>
   16a4c:	subs	r2, r0, r6
   16a50:	mov	ip, r0
   16a54:	mov	r0, #0
   16a58:	sbcs	r2, r1, r7
   16a5c:	movwcc	r0, #1
   16a60:	umull	r4, r2, r6, r5
   16a64:	cmp	r0, #0
   16a68:	mla	r2, r6, sl, r2
   16a6c:	str	r0, [sp, #20]
   16a70:	mvnne	r4, #0
   16a74:	cmp	r0, #0
   16a78:	mla	r2, r7, r5, r2
   16a7c:	mov	r0, #0
   16a80:	umull	lr, r3, r4, r5
   16a84:	mvnne	r2, #0
   16a88:	mla	r3, r4, sl, r3
   16a8c:	mla	r6, r2, r5, r3
   16a90:	subs	r3, ip, r4
   16a94:	sbcs	r2, r1, r2
   16a98:	mov	r3, r1
   16a9c:	movwcc	r0, #1
   16aa0:	str	r3, [sp, #8]
   16aa4:	cmp	r0, #0
   16aa8:	str	r0, [sp, #16]
   16aac:	mov	r0, ip
   16ab0:	mvnne	lr, #0
   16ab4:	mvnne	r6, #0
   16ab8:	str	r0, [sp, #12]
   16abc:	subs	r2, ip, lr
   16ac0:	umull	r7, r4, lr, r5
   16ac4:	sbcs	r2, r1, r6
   16ac8:	mla	r4, lr, sl, r4
   16acc:	mov	r2, #0
   16ad0:	mla	r6, r6, r5, r4
   16ad4:	mov	r4, #0
   16ad8:	movwcc	r2, #1
   16adc:	cmp	r2, #0
   16ae0:	mvnne	r7, #0
   16ae4:	cmp	r2, #0
   16ae8:	umull	r1, ip, r7, r5
   16aec:	mvnne	r6, #0
   16af0:	mla	ip, r7, sl, ip
   16af4:	subs	r7, r0, r7
   16af8:	mla	lr, r6, r5, ip
   16afc:	sbcs	r7, r3, r6
   16b00:	mov	ip, #0
   16b04:	movwcc	ip, #1
   16b08:	cmp	ip, #0
   16b0c:	mvnne	r1, #0
   16b10:	mvnne	lr, #0
   16b14:	subs	r7, r0, r1
   16b18:	sbcs	r7, r3, lr
   16b1c:	movwcc	r4, #1
   16b20:	umull	r0, r7, r1, r5
   16b24:	cmp	r4, #0
   16b28:	mla	r1, r1, sl, r7
   16b2c:	mvnne	r0, #0
   16b30:	mla	r1, lr, r5, r1
   16b34:	cmp	r4, #0
   16b38:	umull	r6, r3, r0, r5
   16b3c:	mvnne	r1, #0
   16b40:	mla	r3, r0, sl, r3
   16b44:	mla	r7, r1, r5, r3
   16b48:	ldr	r3, [sp, #12]
   16b4c:	subs	r0, r3, r0
   16b50:	ldr	r3, [sp, #16]
   16b54:	ldr	r0, [sp, #8]
   16b58:	sbcs	r0, r0, r1
   16b5c:	mov	r0, #0
   16b60:	movwcc	r0, #1
   16b64:	cmp	r0, #0
   16b68:	mov	r1, r0
   16b6c:	ldr	r0, [sp, #20]
   16b70:	mvnne	r7, #0
   16b74:	mvnne	r6, #0
   16b78:	orr	r0, r0, r3
   16b7c:	orr	r0, r0, r2
   16b80:	orr	r0, r0, ip
   16b84:	orr	r0, r0, r4
   16b88:	b	16cac <__assert_fail@plt+0x5be8>
   16b8c:	mvn	r0, #0
   16b90:	mvn	r1, #0
   16b94:	mov	r2, r5
   16b98:	mov	sl, r3
   16b9c:	bl	17294 <__assert_fail@plt+0x61d0>
   16ba0:	umull	r3, r2, r6, r5
   16ba4:	mov	lr, r1
   16ba8:	mov	r1, r0
   16bac:	mla	r2, r6, sl, r2
   16bb0:	subs	r6, r0, r6
   16bb4:	mov	r0, #0
   16bb8:	sbcs	r6, lr, r7
   16bbc:	mla	r2, r7, r5, r2
   16bc0:	movwcc	r0, #1
   16bc4:	cmp	r0, #0
   16bc8:	str	r0, [sp, #20]
   16bcc:	mov	r0, r1
   16bd0:	mvnne	r3, #0
   16bd4:	mvnne	r2, #0
   16bd8:	str	r0, [sp, #16]
   16bdc:	subs	r4, r1, r3
   16be0:	umull	r7, ip, r3, r5
   16be4:	sbcs	r4, lr, r2
   16be8:	mla	r3, r3, sl, ip
   16bec:	mov	ip, #0
   16bf0:	mov	r4, #0
   16bf4:	mla	r2, r2, r5, r3
   16bf8:	movwcc	r4, #1
   16bfc:	cmp	r4, #0
   16c00:	mvnne	r7, #0
   16c04:	cmp	r4, #0
   16c08:	umull	r1, r6, r7, r5
   16c0c:	mvnne	r2, #0
   16c10:	mla	r6, r7, sl, r6
   16c14:	mla	r3, r2, r5, r6
   16c18:	subs	r6, r0, r7
   16c1c:	sbcs	r2, lr, r2
   16c20:	movwcc	ip, #1
   16c24:	mov	r2, #0
   16c28:	cmp	ip, #0
   16c2c:	mvnne	r1, #0
   16c30:	mvnne	r3, #0
   16c34:	subs	r6, r0, r1
   16c38:	sbcs	r6, lr, r3
   16c3c:	movwcc	r2, #1
   16c40:	umull	r0, r6, r1, r5
   16c44:	cmp	r2, #0
   16c48:	str	r6, [sp, #12]
   16c4c:	mvnne	r0, #0
   16c50:	cmp	r2, #0
   16c54:	umull	r6, r7, r0, r5
   16c58:	mla	r7, r0, sl, r7
   16c5c:	str	r7, [sp, #8]
   16c60:	ldr	r7, [sp, #12]
   16c64:	mla	r1, r1, sl, r7
   16c68:	mla	r1, r3, r5, r1
   16c6c:	ldr	r3, [sp, #8]
   16c70:	mvnne	r1, #0
   16c74:	mla	r7, r1, r5, r3
   16c78:	ldr	r3, [sp, #16]
   16c7c:	subs	r0, r3, r0
   16c80:	sbcs	r0, lr, r1
   16c84:	mov	r0, #0
   16c88:	movwcc	r0, #1
   16c8c:	cmp	r0, #0
   16c90:	mov	r1, r0
   16c94:	ldr	r0, [sp, #20]
   16c98:	mvnne	r7, #0
   16c9c:	mvnne	r6, #0
   16ca0:	orr	r0, r0, r4
   16ca4:	orr	r0, r0, ip
   16ca8:	orr	r0, r0, r2
   16cac:	orr	r3, r0, r1
   16cb0:	b	16ee0 <__assert_fail@plt+0x5e1c>
   16cb4:	mvn	r0, #0
   16cb8:	mvn	r1, #0
   16cbc:	mov	r2, r5
   16cc0:	mov	sl, r3
   16cc4:	bl	17294 <__assert_fail@plt+0x61d0>
   16cc8:	mov	ip, r1
   16ccc:	subs	r1, r0, r6
   16cd0:	umull	r3, lr, r6, r5
   16cd4:	mov	r2, r5
   16cd8:	sbcs	r1, ip, r7
   16cdc:	mla	r6, r6, sl, lr
   16ce0:	str	ip, [sp, #4]
   16ce4:	mov	r1, #0
   16ce8:	mla	r7, r7, r2, r6
   16cec:	movwcc	r1, #1
   16cf0:	cmp	r1, #0
   16cf4:	str	r1, [sp, #20]
   16cf8:	mvnne	r3, #0
   16cfc:	cmp	r1, #0
   16d00:	mov	r1, r0
   16d04:	umull	r4, r5, r3, r5
   16d08:	mvnne	r7, #0
   16d0c:	mov	lr, r1
   16d10:	mla	r5, r3, sl, r5
   16d14:	subs	r3, r0, r3
   16d18:	sbcs	r0, ip, r7
   16d1c:	mla	r5, r7, r2, r5
   16d20:	mov	r0, #0
   16d24:	movwcc	r0, #1
   16d28:	cmp	r0, #0
   16d2c:	str	r0, [sp, #16]
   16d30:	mvnne	r4, #0
   16d34:	mvnne	r5, #0
   16d38:	subs	r0, r1, r4
   16d3c:	mov	r1, #0
   16d40:	sbcs	r0, ip, r5
   16d44:	movwcc	r1, #1
   16d48:	umull	r3, r0, r4, r2
   16d4c:	cmp	r1, #0
   16d50:	mla	r0, r4, sl, r0
   16d54:	mov	r4, lr
   16d58:	str	r1, [sp, #12]
   16d5c:	mvnne	r3, #0
   16d60:	mla	r0, r5, r2, r0
   16d64:	cmp	r1, #0
   16d68:	str	r4, [sp]
   16d6c:	umull	r7, r6, r3, r2
   16d70:	mvnne	r0, #0
   16d74:	mla	r6, r3, sl, r6
   16d78:	subs	r3, lr, r3
   16d7c:	mla	r5, r0, r2, r6
   16d80:	sbcs	r0, ip, r0
   16d84:	mov	r3, #0
   16d88:	mov	r0, #0
   16d8c:	movwcc	r0, #1
   16d90:	cmp	r0, #0
   16d94:	str	r0, [sp, #8]
   16d98:	mvnne	r7, #0
   16d9c:	mvnne	r5, #0
   16da0:	subs	r0, lr, r7
   16da4:	sbcs	r0, ip, r5
   16da8:	movwcc	r3, #1
   16dac:	umull	r6, r0, r7, r2
   16db0:	cmp	r3, #0
   16db4:	mla	r7, r7, sl, r0
   16db8:	mov	r0, ip
   16dbc:	mvnne	r6, #0
   16dc0:	mla	r7, r5, r2, r7
   16dc4:	cmp	r3, #0
   16dc8:	mov	r5, #0
   16dcc:	umull	r1, lr, r6, r2
   16dd0:	mvnne	r7, #0
   16dd4:	mla	lr, r6, sl, lr
   16dd8:	subs	r6, r4, r6
   16ddc:	mla	lr, r7, r2, lr
   16de0:	sbcs	r7, ip, r7
   16de4:	mov	ip, #0
   16de8:	movwcc	ip, #1
   16dec:	cmp	ip, #0
   16df0:	mvnne	r1, #0
   16df4:	mvnne	lr, #0
   16df8:	subs	r7, r4, r1
   16dfc:	sbcs	r7, r0, lr
   16e00:	movwcc	r5, #1
   16e04:	umull	r0, r7, r1, r2
   16e08:	cmp	r5, #0
   16e0c:	mla	r1, r1, sl, r7
   16e10:	mvnne	r0, #0
   16e14:	mla	r1, lr, r2, r1
   16e18:	cmp	r5, #0
   16e1c:	umull	r6, r4, r0, r2
   16e20:	mvnne	r1, #0
   16e24:	mla	r4, r0, sl, r4
   16e28:	mla	r7, r1, r2, r4
   16e2c:	ldr	r2, [sp]
   16e30:	subs	r0, r2, r0
   16e34:	ldr	r2, [sp, #16]
   16e38:	ldr	r0, [sp, #4]
   16e3c:	sbcs	r0, r0, r1
   16e40:	mov	r0, #0
   16e44:	movwcc	r0, #1
   16e48:	cmp	r0, #0
   16e4c:	mov	r1, r0
   16e50:	ldr	r0, [sp, #20]
   16e54:	mvnne	r7, #0
   16e58:	mvnne	r6, #0
   16e5c:	orr	r0, r0, r2
   16e60:	ldr	r2, [sp, #12]
   16e64:	orr	r0, r0, r2
   16e68:	ldr	r2, [sp, #8]
   16e6c:	orr	r0, r0, r2
   16e70:	orr	r0, r0, r3
   16e74:	orr	r0, r0, ip
   16e78:	orr	r0, r0, r5
   16e7c:	orr	r0, r0, r1
   16e80:	and	r3, r0, #1
   16e84:	b	16ee0 <__assert_fail@plt+0x5e1c>
   16e88:	mov	r1, #0
   16e8c:	lsl	r2, r7, #9
   16e90:	lsl	r0, r6, #9
   16e94:	lsr	r3, r7, #23
   16e98:	cmp	r1, r7, lsr #23
   16e9c:	orr	r2, r2, r6, lsr #23
   16ea0:	mvnne	r0, #0
   16ea4:	movwne	r3, #1
   16ea8:	cmp	r1, r7, lsr #23
   16eac:	mvnne	r2, #0
   16eb0:	mov	r6, r0
   16eb4:	mov	r7, r2
   16eb8:	b	16ee0 <__assert_fail@plt+0x5e1c>
   16ebc:	lsl	r1, r7, #1
   16ec0:	lsl	r0, r6, #1
   16ec4:	cmp	r7, #0
   16ec8:	lsr	r3, r7, #31
   16ecc:	orr	r1, r1, r6, lsr #31
   16ed0:	mvnlt	r0, #0
   16ed4:	mvnlt	r1, #0
   16ed8:	mov	r6, r0
   16edc:	mov	r7, r1
   16ee0:	ldr	r1, [sp, #32]
   16ee4:	ldr	r2, [sp, #28]
   16ee8:	orr	r8, r3, r8
   16eec:	add	r0, r1, r2
   16ef0:	str	r0, [r9]
   16ef4:	ldrb	r0, [r1, r2]
   16ef8:	cmp	r0, #0
   16efc:	orrne	r8, r8, #2
   16f00:	ldr	r0, [sp, #36]	; 0x24
   16f04:	strd	r6, [r0]
   16f08:	mov	r0, r8
   16f0c:	sub	sp, fp, #28
   16f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f14:	movw	r0, #32861	; 0x805d
   16f18:	movw	r1, #32899	; 0x8083
   16f1c:	movw	r3, #32915	; 0x8093
   16f20:	mov	r2, #85	; 0x55
   16f24:	movt	r0, #1
   16f28:	movt	r1, #1
   16f2c:	movt	r3, #1
   16f30:	bl	110c4 <__assert_fail@plt>
   16f34:	clz	r2, r1
   16f38:	clz	r3, r0
   16f3c:	lsr	r2, r2, #5
   16f40:	lsr	r3, r3, #5
   16f44:	orrs	r2, r3, r2
   16f48:	movwne	r1, #1
   16f4c:	movwne	r0, #1
   16f50:	cmp	r1, #0
   16f54:	beq	16f84 <__assert_fail@plt+0x5ec0>
   16f58:	mvn	r2, #-2147483648	; 0x80000000
   16f5c:	udiv	r2, r2, r1
   16f60:	cmp	r2, r0
   16f64:	bcs	16f84 <__assert_fail@plt+0x5ec0>
   16f68:	push	{fp, lr}
   16f6c:	mov	fp, sp
   16f70:	bl	10fe0 <__errno_location@plt>
   16f74:	mov	r1, #12
   16f78:	str	r1, [r0]
   16f7c:	mov	r0, #0
   16f80:	pop	{fp, pc}
   16f84:	b	10e54 <calloc@plt>
   16f88:	cmp	r0, #0
   16f8c:	movweq	r0, #1
   16f90:	cmn	r0, #1
   16f94:	ble	16f9c <__assert_fail@plt+0x5ed8>
   16f98:	b	10f74 <malloc@plt>
   16f9c:	push	{fp, lr}
   16fa0:	mov	fp, sp
   16fa4:	bl	10fe0 <__errno_location@plt>
   16fa8:	mov	r1, #12
   16fac:	str	r1, [r0]
   16fb0:	mov	r0, #0
   16fb4:	pop	{fp, pc}
   16fb8:	push	{fp, lr}
   16fbc:	mov	fp, sp
   16fc0:	cmp	r0, #0
   16fc4:	beq	16fe0 <__assert_fail@plt+0x5f1c>
   16fc8:	cmp	r1, #0
   16fcc:	beq	16fec <__assert_fail@plt+0x5f28>
   16fd0:	cmn	r1, #1
   16fd4:	ble	16ff8 <__assert_fail@plt+0x5f34>
   16fd8:	pop	{fp, lr}
   16fdc:	b	10f08 <realloc@plt>
   16fe0:	mov	r0, r1
   16fe4:	pop	{fp, lr}
   16fe8:	b	16f88 <__assert_fail@plt+0x5ec4>
   16fec:	bl	17090 <__assert_fail@plt+0x5fcc>
   16ff0:	mov	r0, #0
   16ff4:	pop	{fp, pc}
   16ff8:	bl	10fe0 <__errno_location@plt>
   16ffc:	mov	r1, #12
   17000:	str	r1, [r0]
   17004:	mov	r0, #0
   17008:	pop	{fp, pc}
   1700c:	push	{r4, r5, r6, sl, fp, lr}
   17010:	add	fp, sp, #16
   17014:	mov	r4, r0
   17018:	bl	10f50 <__fpending@plt>
   1701c:	ldr	r6, [r4]
   17020:	mov	r5, r0
   17024:	mov	r0, r4
   17028:	bl	133e4 <__assert_fail@plt+0x2320>
   1702c:	tst	r6, #32
   17030:	bne	17068 <__assert_fail@plt+0x5fa4>
   17034:	cmp	r0, #0
   17038:	mov	r4, r0
   1703c:	mvnne	r4, #0
   17040:	cmp	r5, #0
   17044:	bne	17074 <__assert_fail@plt+0x5fb0>
   17048:	cmp	r0, #0
   1704c:	beq	17074 <__assert_fail@plt+0x5fb0>
   17050:	bl	10fe0 <__errno_location@plt>
   17054:	ldr	r0, [r0]
   17058:	subs	r4, r0, #9
   1705c:	mvnne	r4, #0
   17060:	mov	r0, r4
   17064:	pop	{r4, r5, r6, sl, fp, pc}
   17068:	mvn	r4, #0
   1706c:	cmp	r0, #0
   17070:	beq	1707c <__assert_fail@plt+0x5fb8>
   17074:	mov	r0, r4
   17078:	pop	{r4, r5, r6, sl, fp, pc}
   1707c:	bl	10fe0 <__errno_location@plt>
   17080:	mov	r1, #0
   17084:	str	r1, [r0]
   17088:	mov	r0, r4
   1708c:	pop	{r4, r5, r6, sl, fp, pc}
   17090:	push	{r4, r5, r6, sl, fp, lr}
   17094:	add	fp, sp, #16
   17098:	mov	r4, r0
   1709c:	bl	10fe0 <__errno_location@plt>
   170a0:	ldr	r6, [r0]
   170a4:	mov	r5, r0
   170a8:	mov	r0, r4
   170ac:	bl	10ea8 <free@plt>
   170b0:	str	r6, [r5]
   170b4:	pop	{r4, r5, r6, sl, fp, pc}
   170b8:	push	{fp, lr}
   170bc:	mov	fp, sp
   170c0:	mov	r0, #14
   170c4:	bl	1107c <nl_langinfo@plt>
   170c8:	movw	r1, #31393	; 0x7aa1
   170cc:	cmp	r0, #0
   170d0:	movt	r1, #1
   170d4:	movne	r1, r0
   170d8:	movw	r0, #32994	; 0x80e2
   170dc:	ldrb	r2, [r1]
   170e0:	movt	r0, #1
   170e4:	cmp	r2, #0
   170e8:	movne	r0, r1
   170ec:	pop	{fp, pc}
   170f0:	push	{r4, r5, r6, r7, fp, lr}
   170f4:	add	fp, sp, #16
   170f8:	sub	sp, sp, #8
   170fc:	add	r5, sp, #4
   17100:	cmp	r0, #0
   17104:	mov	r7, r2
   17108:	mov	r4, r1
   1710c:	movne	r5, r0
   17110:	mov	r0, r5
   17114:	bl	10f5c <mbrtowc@plt>
   17118:	mov	r6, r0
   1711c:	cmp	r7, #0
   17120:	beq	17144 <__assert_fail@plt+0x6080>
   17124:	cmn	r6, #2
   17128:	bcc	17144 <__assert_fail@plt+0x6080>
   1712c:	mov	r0, #0
   17130:	bl	1718c <__assert_fail@plt+0x60c8>
   17134:	cmp	r0, #0
   17138:	ldrbeq	r0, [r4]
   1713c:	moveq	r6, #1
   17140:	streq	r0, [r5]
   17144:	mov	r0, r6
   17148:	sub	sp, fp, #16
   1714c:	pop	{r4, r5, r6, r7, fp, pc}
   17150:	cmp	r2, #0
   17154:	beq	17184 <__assert_fail@plt+0x60c0>
   17158:	mvn	r3, #0
   1715c:	udiv	r3, r3, r2
   17160:	cmp	r3, r1
   17164:	bcs	17184 <__assert_fail@plt+0x60c0>
   17168:	push	{fp, lr}
   1716c:	mov	fp, sp
   17170:	bl	10fe0 <__errno_location@plt>
   17174:	mov	r1, #12
   17178:	str	r1, [r0]
   1717c:	mov	r0, #0
   17180:	pop	{fp, pc}
   17184:	mul	r1, r2, r1
   17188:	b	16fb8 <__assert_fail@plt+0x5ef4>
   1718c:	push	{r4, sl, fp, lr}
   17190:	add	fp, sp, #8
   17194:	sub	sp, sp, #264	; 0x108
   17198:	add	r1, sp, #7
   1719c:	movw	r2, #257	; 0x101
   171a0:	bl	171f0 <__assert_fail@plt+0x612c>
   171a4:	mov	r4, #0
   171a8:	cmp	r0, #0
   171ac:	bne	171e4 <__assert_fail@plt+0x6120>
   171b0:	movw	r1, #33000	; 0x80e8
   171b4:	add	r0, sp, #7
   171b8:	movt	r1, #1
   171bc:	bl	10e78 <strcmp@plt>
   171c0:	cmp	r0, #0
   171c4:	beq	171e4 <__assert_fail@plt+0x6120>
   171c8:	movw	r1, #33002	; 0x80ea
   171cc:	add	r0, sp, #7
   171d0:	movt	r1, #1
   171d4:	bl	10e78 <strcmp@plt>
   171d8:	mov	r4, r0
   171dc:	cmp	r0, #0
   171e0:	movwne	r4, #1
   171e4:	mov	r0, r4
   171e8:	sub	sp, fp, #8
   171ec:	pop	{r4, sl, fp, pc}
   171f0:	push	{r4, r5, r6, r7, fp, lr}
   171f4:	add	fp, sp, #16
   171f8:	mov	r4, r1
   171fc:	mov	r1, #0
   17200:	mov	r6, r2
   17204:	bl	11064 <setlocale@plt>
   17208:	cmp	r0, #0
   1720c:	beq	1723c <__assert_fail@plt+0x6178>
   17210:	mov	r7, r0
   17214:	bl	10fc8 <strlen@plt>
   17218:	cmp	r0, r6
   1721c:	bcs	1725c <__assert_fail@plt+0x6198>
   17220:	add	r2, r0, #1
   17224:	mov	r0, r4
   17228:	mov	r1, r7
   1722c:	bl	10ec0 <memcpy@plt>
   17230:	mov	r5, #0
   17234:	mov	r0, r5
   17238:	pop	{r4, r5, r6, r7, fp, pc}
   1723c:	cmp	r6, #0
   17240:	mov	r5, #22
   17244:	movne	r0, #0
   17248:	strbne	r0, [r4]
   1724c:	movne	r0, r5
   17250:	popne	{r4, r5, r6, r7, fp, pc}
   17254:	mov	r0, r5
   17258:	pop	{r4, r5, r6, r7, fp, pc}
   1725c:	mov	r5, #34	; 0x22
   17260:	cmp	r6, #0
   17264:	beq	17284 <__assert_fail@plt+0x61c0>
   17268:	sub	r6, r6, #1
   1726c:	mov	r0, r4
   17270:	mov	r1, r7
   17274:	mov	r2, r6
   17278:	bl	10ec0 <memcpy@plt>
   1727c:	mov	r0, #0
   17280:	strb	r0, [r4, r6]
   17284:	mov	r0, r5
   17288:	pop	{r4, r5, r6, r7, fp, pc}
   1728c:	mov	r1, #0
   17290:	b	11064 <setlocale@plt>
   17294:	cmp	r3, #0
   17298:	cmpeq	r2, #0
   1729c:	bne	172b4 <__assert_fail@plt+0x61f0>
   172a0:	cmp	r1, #0
   172a4:	cmpeq	r0, #0
   172a8:	mvnne	r1, #0
   172ac:	mvnne	r0, #0
   172b0:	b	172d0 <__assert_fail@plt+0x620c>
   172b4:	sub	sp, sp, #8
   172b8:	push	{sp, lr}
   172bc:	bl	172e0 <__assert_fail@plt+0x621c>
   172c0:	ldr	lr, [sp, #4]
   172c4:	add	sp, sp, #8
   172c8:	pop	{r2, r3}
   172cc:	bx	lr
   172d0:	push	{r1, lr}
   172d4:	mov	r0, #8
   172d8:	bl	10e6c <raise@plt>
   172dc:	pop	{r1, pc}
   172e0:	cmp	r1, r3
   172e4:	cmpeq	r0, r2
   172e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172ec:	mov	r4, r0
   172f0:	movcc	r0, #0
   172f4:	mov	r5, r1
   172f8:	ldr	lr, [sp, #36]	; 0x24
   172fc:	movcc	r1, r0
   17300:	bcc	173fc <__assert_fail@plt+0x6338>
   17304:	cmp	r3, #0
   17308:	clzeq	ip, r2
   1730c:	clzne	ip, r3
   17310:	addeq	ip, ip, #32
   17314:	cmp	r5, #0
   17318:	clzeq	r1, r4
   1731c:	addeq	r1, r1, #32
   17320:	clzne	r1, r5
   17324:	sub	ip, ip, r1
   17328:	sub	sl, ip, #32
   1732c:	lsl	r9, r3, ip
   17330:	rsb	fp, ip, #32
   17334:	orr	r9, r9, r2, lsl sl
   17338:	orr	r9, r9, r2, lsr fp
   1733c:	lsl	r8, r2, ip
   17340:	cmp	r5, r9
   17344:	cmpeq	r4, r8
   17348:	movcc	r0, #0
   1734c:	movcc	r1, r0
   17350:	bcc	1736c <__assert_fail@plt+0x62a8>
   17354:	mov	r0, #1
   17358:	subs	r4, r4, r8
   1735c:	lsl	r1, r0, sl
   17360:	orr	r1, r1, r0, lsr fp
   17364:	lsl	r0, r0, ip
   17368:	sbc	r5, r5, r9
   1736c:	cmp	ip, #0
   17370:	beq	173fc <__assert_fail@plt+0x6338>
   17374:	lsr	r6, r8, #1
   17378:	orr	r6, r6, r9, lsl #31
   1737c:	lsr	r7, r9, #1
   17380:	mov	r2, ip
   17384:	b	173a8 <__assert_fail@plt+0x62e4>
   17388:	subs	r3, r4, r6
   1738c:	sbc	r8, r5, r7
   17390:	adds	r3, r3, r3
   17394:	adc	r8, r8, r8
   17398:	adds	r4, r3, #1
   1739c:	adc	r5, r8, #0
   173a0:	subs	r2, r2, #1
   173a4:	beq	173c4 <__assert_fail@plt+0x6300>
   173a8:	cmp	r5, r7
   173ac:	cmpeq	r4, r6
   173b0:	bcs	17388 <__assert_fail@plt+0x62c4>
   173b4:	adds	r4, r4, r4
   173b8:	adc	r5, r5, r5
   173bc:	subs	r2, r2, #1
   173c0:	bne	173a8 <__assert_fail@plt+0x62e4>
   173c4:	lsr	r3, r4, ip
   173c8:	orr	r3, r3, r5, lsl fp
   173cc:	lsr	r2, r5, ip
   173d0:	orr	r3, r3, r5, lsr sl
   173d4:	adds	r0, r0, r4
   173d8:	mov	r4, r3
   173dc:	lsl	r3, r2, ip
   173e0:	orr	r3, r3, r4, lsl sl
   173e4:	lsl	ip, r4, ip
   173e8:	orr	r3, r3, r4, lsr fp
   173ec:	adc	r1, r1, r5
   173f0:	subs	r0, r0, ip
   173f4:	mov	r5, r2
   173f8:	sbc	r1, r1, r3
   173fc:	cmp	lr, #0
   17400:	strdne	r4, [lr]
   17404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17408:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1740c:	mov	r7, r0
   17410:	ldr	r6, [pc, #72]	; 17460 <__assert_fail@plt+0x639c>
   17414:	ldr	r5, [pc, #72]	; 17464 <__assert_fail@plt+0x63a0>
   17418:	add	r6, pc, r6
   1741c:	add	r5, pc, r5
   17420:	sub	r6, r6, r5
   17424:	mov	r8, r1
   17428:	mov	r9, r2
   1742c:	bl	10e34 <calloc@plt-0x20>
   17430:	asrs	r6, r6, #2
   17434:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17438:	mov	r4, #0
   1743c:	add	r4, r4, #1
   17440:	ldr	r3, [r5], #4
   17444:	mov	r2, r9
   17448:	mov	r1, r8
   1744c:	mov	r0, r7
   17450:	blx	r3
   17454:	cmp	r6, r4
   17458:	bne	1743c <__assert_fail@plt+0x6378>
   1745c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17460:	andeq	r1, r1, ip, ror #21
   17464:	andeq	r1, r1, r4, ror #21
   17468:	bx	lr
   1746c:	ldr	r3, [pc, #12]	; 17480 <__assert_fail@plt+0x63bc>
   17470:	mov	r1, #0
   17474:	add	r3, pc, r3
   17478:	ldr	r2, [r3]
   1747c:	b	10fec <__cxa_atexit@plt>
   17480:	andeq	r1, r1, r0, ror ip

Disassembly of section .fini:

00017484 <.fini>:
   17484:	push	{r3, lr}
   17488:	pop	{r3, pc}
