
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011120 <.init>:
   11120:	push	{r3, lr}
   11124:	bl	1153c <__assert_fail@plt+0x48>
   11128:	pop	{r3, pc}

Disassembly of section .plt:

0001112c <fdopen@plt-0x14>:
   1112c:	push	{lr}		; (str lr, [sp, #-4]!)
   11130:	ldr	lr, [pc, #4]	; 1113c <fdopen@plt-0x4>
   11134:	add	lr, pc, lr
   11138:	ldr	pc, [lr, #8]!
   1113c:	andeq	sp, r1, r4, asr #29

00011140 <fdopen@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #118784	; 0x1d000
   11148:	ldr	pc, [ip, #3780]!	; 0xec4

0001114c <calloc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #118784	; 0x1d000
   11154:	ldr	pc, [ip, #3772]!	; 0xebc

00011158 <fputs_unlocked@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #118784	; 0x1d000
   11160:	ldr	pc, [ip, #3764]!	; 0xeb4

00011164 <raise@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #118784	; 0x1d000
   1116c:	ldr	pc, [ip, #3756]!	; 0xeac

00011170 <strcmp@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #118784	; 0x1d000
   11178:	ldr	pc, [ip, #3748]!	; 0xea4

0001117c <strtol@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #118784	; 0x1d000
   11184:	ldr	pc, [ip, #3740]!	; 0xe9c

00011188 <printf@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #118784	; 0x1d000
   11190:	ldr	pc, [ip, #3732]!	; 0xe94

00011194 <read@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #118784	; 0x1d000
   1119c:	ldr	pc, [ip, #3724]!	; 0xe8c

000111a0 <fflush@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #118784	; 0x1d000
   111a8:	ldr	pc, [ip, #3716]!	; 0xe84

000111ac <sigprocmask@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #118784	; 0x1d000
   111b4:	ldr	pc, [ip, #3708]!	; 0xe7c

000111b8 <memmove@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #118784	; 0x1d000
   111c0:	ldr	pc, [ip, #3700]!	; 0xe74

000111c4 <free@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #118784	; 0x1d000
   111cc:	ldr	pc, [ip, #3692]!	; 0xe6c

000111d0 <_exit@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #118784	; 0x1d000
   111d8:	ldr	pc, [ip, #3684]!	; 0xe64

000111dc <memcpy@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #118784	; 0x1d000
   111e4:	ldr	pc, [ip, #3676]!	; 0xe5c

000111e8 <mbsinit@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #118784	; 0x1d000
   111f0:	ldr	pc, [ip, #3668]!	; 0xe54

000111f4 <ftruncate64@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #118784	; 0x1d000
   111fc:	ldr	pc, [ip, #3660]!	; 0xe4c

00011200 <fwrite_unlocked@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #118784	; 0x1d000
   11208:	ldr	pc, [ip, #3652]!	; 0xe44

0001120c <memcmp@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #118784	; 0x1d000
   11214:	ldr	pc, [ip, #3644]!	; 0xe3c

00011218 <fputc_unlocked@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #118784	; 0x1d000
   11220:	ldr	pc, [ip, #3636]!	; 0xe34

00011224 <dup2@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #118784	; 0x1d000
   1122c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011230 <realloc@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #118784	; 0x1d000
   11238:	ldr	pc, [ip, #3620]!	; 0xe24

0001123c <textdomain@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #118784	; 0x1d000
   11244:	ldr	pc, [ip, #3612]!	; 0xe1c

00011248 <rawmemchr@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #118784	; 0x1d000
   11250:	ldr	pc, [ip, #3604]!	; 0xe14

00011254 <iswprint@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #118784	; 0x1d000
   1125c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011260 <__fxstat64@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #118784	; 0x1d000
   11268:	ldr	pc, [ip, #3588]!	; 0xe04

0001126c <sigaction@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #118784	; 0x1d000
   11274:	ldr	pc, [ip, #3580]!	; 0xdfc

00011278 <fwrite@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #118784	; 0x1d000
   11280:	ldr	pc, [ip, #3572]!	; 0xdf4

00011284 <lseek64@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #118784	; 0x1d000
   1128c:	ldr	pc, [ip, #3564]!	; 0xdec

00011290 <waitpid@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #118784	; 0x1d000
   11298:	ldr	pc, [ip, #3556]!	; 0xde4

0001129c <__ctype_get_mb_cur_max@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #118784	; 0x1d000
   112a4:	ldr	pc, [ip, #3548]!	; 0xddc

000112a8 <strcpy@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #118784	; 0x1d000
   112b0:	ldr	pc, [ip, #3540]!	; 0xdd4

000112b4 <__fpending@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #118784	; 0x1d000
   112bc:	ldr	pc, [ip, #3532]!	; 0xdcc

000112c0 <ferror_unlocked@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #118784	; 0x1d000
   112c8:	ldr	pc, [ip, #3524]!	; 0xdc4

000112cc <mbrtowc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #118784	; 0x1d000
   112d4:	ldr	pc, [ip, #3516]!	; 0xdbc

000112d8 <error@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #118784	; 0x1d000
   112e0:	ldr	pc, [ip, #3508]!	; 0xdb4

000112e4 <open64@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #118784	; 0x1d000
   112ec:	ldr	pc, [ip, #3500]!	; 0xdac

000112f0 <getenv@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #118784	; 0x1d000
   112f8:	ldr	pc, [ip, #3492]!	; 0xda4

000112fc <malloc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #118784	; 0x1d000
   11304:	ldr	pc, [ip, #3484]!	; 0xd9c

00011308 <sigaddset@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #118784	; 0x1d000
   11310:	ldr	pc, [ip, #3476]!	; 0xd94

00011314 <__libc_start_main@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #118784	; 0x1d000
   1131c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011320 <__freading@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #118784	; 0x1d000
   11328:	ldr	pc, [ip, #3460]!	; 0xd84

0001132c <__gmon_start__@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #118784	; 0x1d000
   11334:	ldr	pc, [ip, #3452]!	; 0xd7c

00011338 <getopt_long@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #118784	; 0x1d000
   11340:	ldr	pc, [ip, #3444]!	; 0xd74

00011344 <__ctype_b_loc@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #118784	; 0x1d000
   1134c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011350 <exit@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #118784	; 0x1d000
   11358:	ldr	pc, [ip, #3428]!	; 0xd64

0001135c <gettext@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #118784	; 0x1d000
   11364:	ldr	pc, [ip, #3420]!	; 0xd5c

00011368 <strlen@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #118784	; 0x1d000
   11370:	ldr	pc, [ip, #3412]!	; 0xd54

00011374 <__libc_current_sigrtmax@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #118784	; 0x1d000
   1137c:	ldr	pc, [ip, #3404]!	; 0xd4c

00011380 <strchr@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #118784	; 0x1d000
   11388:	ldr	pc, [ip, #3396]!	; 0xd44

0001138c <setenv@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #118784	; 0x1d000
   11394:	ldr	pc, [ip, #3388]!	; 0xd3c

00011398 <memrchr@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #118784	; 0x1d000
   113a0:	ldr	pc, [ip, #3380]!	; 0xd34

000113a4 <fprintf@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #118784	; 0x1d000
   113ac:	ldr	pc, [ip, #3372]!	; 0xd2c

000113b0 <getpagesize@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #118784	; 0x1d000
   113b8:	ldr	pc, [ip, #3364]!	; 0xd24

000113bc <__errno_location@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #118784	; 0x1d000
   113c4:	ldr	pc, [ip, #3356]!	; 0xd1c

000113c8 <__cxa_atexit@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #118784	; 0x1d000
   113d0:	ldr	pc, [ip, #3348]!	; 0xd14

000113d4 <memset@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #118784	; 0x1d000
   113dc:	ldr	pc, [ip, #3340]!	; 0xd0c

000113e0 <write@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #118784	; 0x1d000
   113e8:	ldr	pc, [ip, #3332]!	; 0xd04

000113ec <fileno@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #118784	; 0x1d000
   113f4:	ldr	pc, [ip, #3324]!	; 0xcfc

000113f8 <strtoumax@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #118784	; 0x1d000
   11400:	ldr	pc, [ip, #3316]!	; 0xcf4

00011404 <memchr@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #118784	; 0x1d000
   1140c:	ldr	pc, [ip, #3308]!	; 0xcec

00011410 <fclose@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #118784	; 0x1d000
   11418:	ldr	pc, [ip, #3300]!	; 0xce4

0001141c <pipe@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #118784	; 0x1d000
   11424:	ldr	pc, [ip, #3292]!	; 0xcdc

00011428 <fseeko64@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #118784	; 0x1d000
   11430:	ldr	pc, [ip, #3284]!	; 0xcd4

00011434 <fcntl64@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #118784	; 0x1d000
   1143c:	ldr	pc, [ip, #3276]!	; 0xccc

00011440 <setlocale@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #118784	; 0x1d000
   11448:	ldr	pc, [ip, #3268]!	; 0xcc4

0001144c <sigemptyset@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #118784	; 0x1d000
   11454:	ldr	pc, [ip, #3260]!	; 0xcbc

00011458 <fork@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #118784	; 0x1d000
   11460:	ldr	pc, [ip, #3252]!	; 0xcb4

00011464 <execl@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #118784	; 0x1d000
   1146c:	ldr	pc, [ip, #3244]!	; 0xcac

00011470 <strrchr@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #118784	; 0x1d000
   11478:	ldr	pc, [ip, #3236]!	; 0xca4

0001147c <nl_langinfo@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #118784	; 0x1d000
   11484:	ldr	pc, [ip, #3228]!	; 0xc9c

00011488 <sprintf@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #118784	; 0x1d000
   11490:	ldr	pc, [ip, #3220]!	; 0xc94

00011494 <clearerr_unlocked@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #118784	; 0x1d000
   1149c:	ldr	pc, [ip, #3212]!	; 0xc8c

000114a0 <bindtextdomain@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #118784	; 0x1d000
   114a8:	ldr	pc, [ip, #3204]!	; 0xc84

000114ac <aligned_alloc@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #118784	; 0x1d000
   114b4:	ldr	pc, [ip, #3196]!	; 0xc7c

000114b8 <__libc_current_sigrtmin@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #118784	; 0x1d000
   114c0:	ldr	pc, [ip, #3188]!	; 0xc74

000114c4 <strncmp@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #118784	; 0x1d000
   114cc:	ldr	pc, [ip, #3180]!	; 0xc6c

000114d0 <abort@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #118784	; 0x1d000
   114d8:	ldr	pc, [ip, #3172]!	; 0xc64

000114dc <close@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #118784	; 0x1d000
   114e4:	ldr	pc, [ip, #3164]!	; 0xc5c

000114e8 <strspn@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #118784	; 0x1d000
   114f0:	ldr	pc, [ip, #3156]!	; 0xc54

000114f4 <__assert_fail@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #118784	; 0x1d000
   114fc:	ldr	pc, [ip, #3148]!	; 0xc4c

Disassembly of section .text:

00011500 <.text>:
   11500:	mov	fp, #0
   11504:	mov	lr, #0
   11508:	pop	{r1}		; (ldr r1, [sp], #4)
   1150c:	mov	r2, sp
   11510:	push	{r2}		; (str r2, [sp, #-4]!)
   11514:	push	{r0}		; (str r0, [sp, #-4]!)
   11518:	ldr	ip, [pc, #16]	; 11530 <__assert_fail@plt+0x3c>
   1151c:	push	{ip}		; (str ip, [sp, #-4]!)
   11520:	ldr	r0, [pc, #12]	; 11534 <__assert_fail@plt+0x40>
   11524:	ldr	r3, [pc, #12]	; 11538 <__assert_fail@plt+0x44>
   11528:	bl	11314 <__libc_start_main@plt>
   1152c:	bl	114d0 <abort@plt>
   11530:	andeq	ip, r1, ip, lsr sp
   11534:			; <UNDEFINED> instruction: 0x00014fb4
   11538:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1153c:	ldr	r3, [pc, #20]	; 11558 <__assert_fail@plt+0x64>
   11540:	ldr	r2, [pc, #20]	; 1155c <__assert_fail@plt+0x68>
   11544:	add	r3, pc, r3
   11548:	ldr	r2, [r3, r2]
   1154c:	cmp	r2, #0
   11550:	bxeq	lr
   11554:	b	1132c <__gmon_start__@plt>
   11558:			; <UNDEFINED> instruction: 0x0001dab4
   1155c:	andeq	r0, r0, ip, asr #2
   11560:	ldr	r3, [pc, #28]	; 11584 <__assert_fail@plt+0x90>
   11564:	ldr	r0, [pc, #28]	; 11588 <__assert_fail@plt+0x94>
   11568:	sub	r3, r3, r0
   1156c:	cmp	r3, #6
   11570:	bxls	lr
   11574:	ldr	r3, [pc, #16]	; 1158c <__assert_fail@plt+0x98>
   11578:	cmp	r3, #0
   1157c:	bxeq	lr
   11580:	bx	r3
   11584:	andeq	pc, r2, r7, asr r3	; <UNPREDICTABLE>
   11588:	andeq	pc, r2, r4, asr r3	; <UNPREDICTABLE>
   1158c:	andeq	r0, r0, r0
   11590:	ldr	r1, [pc, #36]	; 115bc <__assert_fail@plt+0xc8>
   11594:	ldr	r0, [pc, #36]	; 115c0 <__assert_fail@plt+0xcc>
   11598:	sub	r1, r1, r0
   1159c:	asr	r1, r1, #2
   115a0:	add	r1, r1, r1, lsr #31
   115a4:	asrs	r1, r1, #1
   115a8:	bxeq	lr
   115ac:	ldr	r3, [pc, #16]	; 115c4 <__assert_fail@plt+0xd0>
   115b0:	cmp	r3, #0
   115b4:	bxeq	lr
   115b8:	bx	r3
   115bc:	andeq	pc, r2, r4, asr r3	; <UNPREDICTABLE>
   115c0:	andeq	pc, r2, r4, asr r3	; <UNPREDICTABLE>
   115c4:	andeq	r0, r0, r0
   115c8:	push	{r4, lr}
   115cc:	ldr	r4, [pc, #24]	; 115ec <__assert_fail@plt+0xf8>
   115d0:	ldrb	r3, [r4]
   115d4:	cmp	r3, #0
   115d8:	popne	{r4, pc}
   115dc:	bl	11560 <__assert_fail@plt+0x6c>
   115e0:	mov	r3, #1
   115e4:	strb	r3, [r4]
   115e8:	pop	{r4, pc}
   115ec:	andeq	pc, r2, r4, ror r3	; <UNPREDICTABLE>
   115f0:	ldr	r0, [pc, #40]	; 11620 <__assert_fail@plt+0x12c>
   115f4:	ldr	r3, [r0]
   115f8:	cmp	r3, #0
   115fc:	bne	11604 <__assert_fail@plt+0x110>
   11600:	b	11590 <__assert_fail@plt+0x9c>
   11604:	ldr	r3, [pc, #24]	; 11624 <__assert_fail@plt+0x130>
   11608:	cmp	r3, #0
   1160c:	beq	11600 <__assert_fail@plt+0x10c>
   11610:	push	{r4, lr}
   11614:	blx	r3
   11618:	pop	{r4, lr}
   1161c:	b	11590 <__assert_fail@plt+0x9c>
   11620:	andeq	lr, r2, r4, lsl pc
   11624:	andeq	r0, r0, r0
   11628:	push	{fp}		; (str fp, [sp, #-4]!)
   1162c:	add	fp, sp, #0
   11630:	sub	sp, sp, #12
   11634:	mov	r3, r0
   11638:	strb	r3, [fp, #-5]
   1163c:	ldrb	r3, [fp, #-5]
   11640:	mov	r0, r3
   11644:	add	sp, fp, #0
   11648:	pop	{fp}		; (ldr fp, [sp], #4)
   1164c:	bx	lr
   11650:	push	{fp, lr}
   11654:	add	fp, sp, #4
   11658:	ldr	r0, [pc, #32]	; 11680 <__assert_fail@plt+0x18c>
   1165c:	bl	1135c <gettext@plt>
   11660:	mov	r2, r0
   11664:	ldr	r3, [pc, #24]	; 11684 <__assert_fail@plt+0x190>
   11668:	ldr	r3, [r3]
   1166c:	mov	r1, r3
   11670:	mov	r0, r2
   11674:	bl	11158 <fputs_unlocked@plt>
   11678:	nop			; (mov r0, r0)
   1167c:	pop	{fp, pc}
   11680:	andeq	ip, r1, r4, ror sp
   11684:	andeq	pc, r2, ip, ror #6
   11688:	push	{fp, lr}
   1168c:	add	fp, sp, #4
   11690:	ldr	r0, [pc, #32]	; 116b8 <__assert_fail@plt+0x1c4>
   11694:	bl	1135c <gettext@plt>
   11698:	mov	r2, r0
   1169c:	ldr	r3, [pc, #24]	; 116bc <__assert_fail@plt+0x1c8>
   116a0:	ldr	r3, [r3]
   116a4:	mov	r1, r3
   116a8:	mov	r0, r2
   116ac:	bl	11158 <fputs_unlocked@plt>
   116b0:	nop			; (mov r0, r0)
   116b4:	pop	{fp, pc}
   116b8:	andeq	ip, r1, ip, lsr #27
   116bc:	andeq	pc, r2, ip, ror #6
   116c0:	push	{fp, lr}
   116c4:	add	fp, sp, #4
   116c8:	ldr	r0, [pc, #32]	; 116f0 <__assert_fail@plt+0x1fc>
   116cc:	bl	1135c <gettext@plt>
   116d0:	mov	r2, r0
   116d4:	ldr	r3, [pc, #24]	; 116f4 <__assert_fail@plt+0x200>
   116d8:	ldr	r3, [r3]
   116dc:	mov	r1, r3
   116e0:	mov	r0, r2
   116e4:	bl	11158 <fputs_unlocked@plt>
   116e8:	nop			; (mov r0, r0)
   116ec:	pop	{fp, pc}
   116f0:	strdeq	ip, [r1], -r8
   116f4:	andeq	pc, r2, ip, ror #6
   116f8:	push	{fp, lr}
   116fc:	add	fp, sp, #4
   11700:	sub	sp, sp, #80	; 0x50
   11704:	str	r0, [fp, #-80]	; 0xffffffb0
   11708:	ldr	r3, [pc, #348]	; 1186c <__assert_fail@plt+0x378>
   1170c:	sub	ip, fp, #72	; 0x48
   11710:	mov	lr, r3
   11714:	ldm	lr!, {r0, r1, r2, r3}
   11718:	stmia	ip!, {r0, r1, r2, r3}
   1171c:	ldm	lr!, {r0, r1, r2, r3}
   11720:	stmia	ip!, {r0, r1, r2, r3}
   11724:	ldm	lr!, {r0, r1, r2, r3}
   11728:	stmia	ip!, {r0, r1, r2, r3}
   1172c:	ldm	lr, {r0, r1}
   11730:	stm	ip, {r0, r1}
   11734:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11738:	str	r3, [fp, #-8]
   1173c:	sub	r3, fp, #72	; 0x48
   11740:	str	r3, [fp, #-12]
   11744:	b	11754 <__assert_fail@plt+0x260>
   11748:	ldr	r3, [fp, #-12]
   1174c:	add	r3, r3, #8
   11750:	str	r3, [fp, #-12]
   11754:	ldr	r3, [fp, #-12]
   11758:	ldr	r3, [r3]
   1175c:	cmp	r3, #0
   11760:	beq	11784 <__assert_fail@plt+0x290>
   11764:	ldr	r3, [fp, #-12]
   11768:	ldr	r3, [r3]
   1176c:	mov	r1, r3
   11770:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11774:	bl	11170 <strcmp@plt>
   11778:	mov	r3, r0
   1177c:	cmp	r3, #0
   11780:	bne	11748 <__assert_fail@plt+0x254>
   11784:	ldr	r3, [fp, #-12]
   11788:	ldr	r3, [r3, #4]
   1178c:	cmp	r3, #0
   11790:	beq	117a0 <__assert_fail@plt+0x2ac>
   11794:	ldr	r3, [fp, #-12]
   11798:	ldr	r3, [r3, #4]
   1179c:	str	r3, [fp, #-8]
   117a0:	ldr	r0, [pc, #200]	; 11870 <__assert_fail@plt+0x37c>
   117a4:	bl	1135c <gettext@plt>
   117a8:	mov	r3, r0
   117ac:	ldr	r2, [pc, #192]	; 11874 <__assert_fail@plt+0x380>
   117b0:	ldr	r1, [pc, #192]	; 11878 <__assert_fail@plt+0x384>
   117b4:	mov	r0, r3
   117b8:	bl	11188 <printf@plt>
   117bc:	mov	r1, #0
   117c0:	mov	r0, #5
   117c4:	bl	11440 <setlocale@plt>
   117c8:	str	r0, [fp, #-16]
   117cc:	ldr	r3, [fp, #-16]
   117d0:	cmp	r3, #0
   117d4:	beq	11814 <__assert_fail@plt+0x320>
   117d8:	mov	r2, #3
   117dc:	ldr	r1, [pc, #152]	; 1187c <__assert_fail@plt+0x388>
   117e0:	ldr	r0, [fp, #-16]
   117e4:	bl	114c4 <strncmp@plt>
   117e8:	mov	r3, r0
   117ec:	cmp	r3, #0
   117f0:	beq	11814 <__assert_fail@plt+0x320>
   117f4:	ldr	r0, [pc, #132]	; 11880 <__assert_fail@plt+0x38c>
   117f8:	bl	1135c <gettext@plt>
   117fc:	mov	r2, r0
   11800:	ldr	r3, [pc, #124]	; 11884 <__assert_fail@plt+0x390>
   11804:	ldr	r3, [r3]
   11808:	mov	r1, r3
   1180c:	mov	r0, r2
   11810:	bl	11158 <fputs_unlocked@plt>
   11814:	ldr	r0, [pc, #108]	; 11888 <__assert_fail@plt+0x394>
   11818:	bl	1135c <gettext@plt>
   1181c:	mov	r3, r0
   11820:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11824:	ldr	r1, [pc, #72]	; 11874 <__assert_fail@plt+0x380>
   11828:	mov	r0, r3
   1182c:	bl	11188 <printf@plt>
   11830:	ldr	r0, [pc, #84]	; 1188c <__assert_fail@plt+0x398>
   11834:	bl	1135c <gettext@plt>
   11838:	ldr	r2, [fp, #-8]
   1183c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11840:	cmp	r2, r3
   11844:	bne	11850 <__assert_fail@plt+0x35c>
   11848:	ldr	r3, [pc, #64]	; 11890 <__assert_fail@plt+0x39c>
   1184c:	b	11854 <__assert_fail@plt+0x360>
   11850:	ldr	r3, [pc, #60]	; 11894 <__assert_fail@plt+0x3a0>
   11854:	mov	r2, r3
   11858:	ldr	r1, [fp, #-8]
   1185c:	bl	11188 <printf@plt>
   11860:	nop			; (mov r0, r0)
   11864:	sub	sp, fp, #4
   11868:	pop	{fp, pc}
   1186c:	andeq	sp, r1, r0, asr #32
   11870:	andeq	ip, r1, ip, asr #29
   11874:	andeq	ip, r1, r4, ror #29
   11878:	andeq	ip, r1, ip, lsl #30
   1187c:	andeq	ip, r1, ip, lsl pc
   11880:	andeq	ip, r1, r0, lsr #30
   11884:	andeq	pc, r2, ip, ror #6
   11888:	andeq	ip, r1, r8, ror #30
   1188c:	andeq	ip, r1, r4, lsl #31
   11890:			; <UNDEFINED> instruction: 0x0001cfb8
   11894:	andeq	ip, r1, r4, asr #31
   11898:	push	{fp}		; (str fp, [sp, #-4]!)
   1189c:	add	fp, sp, #0
   118a0:	sub	sp, sp, #12
   118a4:	str	r0, [fp, #-8]
   118a8:	ldr	r3, [fp, #-8]
   118ac:	mov	r0, r3
   118b0:	add	sp, fp, #0
   118b4:	pop	{fp}		; (ldr fp, [sp], #4)
   118b8:	bx	lr
   118bc:	push	{fp}		; (str fp, [sp, #-4]!)
   118c0:	add	fp, sp, #0
   118c4:	sub	sp, sp, #12
   118c8:	str	r0, [fp, #-8]
   118cc:	ldr	r3, [fp, #-8]
   118d0:	ldr	r3, [r3, #16]
   118d4:	and	r3, r3, #61440	; 0xf000
   118d8:	cmp	r3, #32768	; 0x8000
   118dc:	beq	118f4 <__assert_fail@plt+0x400>
   118e0:	ldr	r3, [fp, #-8]
   118e4:	ldr	r3, [r3, #16]
   118e8:	and	r3, r3, #61440	; 0xf000
   118ec:	cmp	r3, #40960	; 0xa000
   118f0:	bne	118fc <__assert_fail@plt+0x408>
   118f4:	mov	r3, #1
   118f8:	b	11900 <__assert_fail@plt+0x40c>
   118fc:	mov	r3, #0
   11900:	and	r3, r3, #1
   11904:	uxtb	r3, r3
   11908:	mov	r0, r3
   1190c:	add	sp, fp, #0
   11910:	pop	{fp}		; (ldr fp, [sp], #4)
   11914:	bx	lr
   11918:	sub	sp, sp, #16
   1191c:	push	{fp}		; (str fp, [sp, #-4]!)
   11920:	add	fp, sp, #0
   11924:	add	ip, fp, #4
   11928:	stm	ip, {r0, r1, r2, r3}
   1192c:	ldr	r3, [fp, #60]	; 0x3c
   11930:	cmp	r3, #0
   11934:	ble	11974 <__assert_fail@plt+0x480>
   11938:	ldr	r3, [fp, #60]	; 0x3c
   1193c:	cmp	r3, #536870912	; 0x20000000
   11940:	bhi	11974 <__assert_fail@plt+0x480>
   11944:	ldr	r3, [fp, #60]	; 0x3c
   11948:	cmp	r3, #131072	; 0x20000
   1194c:	blt	11974 <__assert_fail@plt+0x480>
   11950:	ldr	r3, [fp, #60]	; 0x3c
   11954:	cmp	r3, #0
   11958:	ble	11974 <__assert_fail@plt+0x480>
   1195c:	ldr	r3, [fp, #60]	; 0x3c
   11960:	cmp	r3, #536870912	; 0x20000000
   11964:	bhi	11974 <__assert_fail@plt+0x480>
   11968:	ldr	r3, [fp, #60]	; 0x3c
   1196c:	cmp	r3, #1073741824	; 0x40000000
   11970:	bhi	119c8 <__assert_fail@plt+0x4d4>
   11974:	ldr	r3, [fp, #60]	; 0x3c
   11978:	cmp	r3, #0
   1197c:	ble	119c0 <__assert_fail@plt+0x4cc>
   11980:	ldr	r3, [fp, #60]	; 0x3c
   11984:	cmp	r3, #536870912	; 0x20000000
   11988:	bhi	119c0 <__assert_fail@plt+0x4cc>
   1198c:	ldr	r3, [fp, #60]	; 0x3c
   11990:	cmp	r3, #131072	; 0x20000
   11994:	blt	119c0 <__assert_fail@plt+0x4cc>
   11998:	ldr	r3, [fp, #60]	; 0x3c
   1199c:	cmp	r3, #0
   119a0:	ble	119b8 <__assert_fail@plt+0x4c4>
   119a4:	ldr	r3, [fp, #60]	; 0x3c
   119a8:	cmp	r3, #536870912	; 0x20000000
   119ac:	bhi	119b8 <__assert_fail@plt+0x4c4>
   119b0:	ldr	r3, [fp, #60]	; 0x3c
   119b4:	b	119cc <__assert_fail@plt+0x4d8>
   119b8:	mov	r3, #512	; 0x200
   119bc:	b	119cc <__assert_fail@plt+0x4d8>
   119c0:	mov	r3, #131072	; 0x20000
   119c4:	b	119cc <__assert_fail@plt+0x4d8>
   119c8:	mov	r3, #1073741824	; 0x40000000
   119cc:	mov	r0, r3
   119d0:	add	sp, fp, #0
   119d4:	pop	{fp}		; (ldr fp, [sp], #4)
   119d8:	add	sp, sp, #16
   119dc:	bx	lr
   119e0:	push	{fp}		; (str fp, [sp, #-4]!)
   119e4:	add	fp, sp, #0
   119e8:	sub	sp, sp, #12
   119ec:	str	r0, [fp, #-8]
   119f0:	ldr	r3, [pc, #56]	; 11a30 <__assert_fail@plt+0x53c>
   119f4:	ldr	r3, [r3]
   119f8:	cmp	r3, #0
   119fc:	beq	11a14 <__assert_fail@plt+0x520>
   11a00:	ldr	r3, [fp, #-8]
   11a04:	cmp	r3, #32
   11a08:	bne	11a14 <__assert_fail@plt+0x520>
   11a0c:	mov	r3, #1
   11a10:	b	11a18 <__assert_fail@plt+0x524>
   11a14:	mov	r3, #0
   11a18:	and	r3, r3, #1
   11a1c:	uxtb	r3, r3
   11a20:	mov	r0, r3
   11a24:	add	sp, fp, #0
   11a28:	pop	{fp}		; (ldr fp, [sp], #4)
   11a2c:	bx	lr
   11a30:	andeq	pc, r2, r8, ror r3	; <UNPREDICTABLE>
   11a34:	push	{fp, lr}
   11a38:	add	fp, sp, #4
   11a3c:	sub	sp, sp, #56	; 0x38
   11a40:	strd	r0, [fp, #-44]	; 0xffffffd4
   11a44:	str	r2, [fp, #-48]	; 0xffffffd0
   11a48:	mov	r2, #0
   11a4c:	mov	r3, #0
   11a50:	strd	r2, [fp, #-12]
   11a54:	ldr	r3, [pc, #440]	; 11c14 <__assert_fail@plt+0x720>
   11a58:	ldr	r3, [r3]
   11a5c:	cmp	r3, #0
   11a60:	beq	11a70 <__assert_fail@plt+0x57c>
   11a64:	ldr	r3, [pc, #428]	; 11c18 <__assert_fail@plt+0x724>
   11a68:	mov	r2, #0
   11a6c:	strb	r2, [r3]
   11a70:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11a74:	cmp	r3, #5
   11a78:	beq	11a94 <__assert_fail@plt+0x5a0>
   11a7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11a80:	cmp	r3, #6
   11a84:	beq	11a94 <__assert_fail@plt+0x5a0>
   11a88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11a8c:	cmp	r3, #7
   11a90:	bne	11b88 <__assert_fail@plt+0x694>
   11a94:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11a98:	subs	r2, r2, #1
   11a9c:	sbc	r3, r3, #0
   11aa0:	strd	r2, [fp, #-20]	; 0xffffffec
   11aa4:	ldr	r3, [pc, #360]	; 11c14 <__assert_fail@plt+0x720>
   11aa8:	ldr	r3, [r3]
   11aac:	cmp	r3, #0
   11ab0:	beq	11b2c <__assert_fail@plt+0x638>
   11ab4:	ldr	r3, [pc, #344]	; 11c14 <__assert_fail@plt+0x720>
   11ab8:	ldr	r0, [r3]
   11abc:	sub	r2, fp, #36	; 0x24
   11ac0:	ldr	r3, [pc, #340]	; 11c1c <__assert_fail@plt+0x728>
   11ac4:	str	r3, [sp]
   11ac8:	mov	r3, r2
   11acc:	mov	r2, #10
   11ad0:	mov	r1, #0
   11ad4:	bl	1aee0 <__assert_fail@plt+0x99ec>
   11ad8:	str	r0, [fp, #-24]	; 0xffffffe8
   11adc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ae0:	cmp	r3, #0
   11ae4:	bne	11b2c <__assert_fail@plt+0x638>
   11ae8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11aec:	mvn	r0, r2
   11af0:	mvn	r1, r3
   11af4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11af8:	cmp	r1, r3
   11afc:	cmpeq	r0, r2
   11b00:	bcc	11b2c <__assert_fail@plt+0x638>
   11b04:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   11b08:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11b0c:	cmp	r1, r3
   11b10:	cmpeq	r0, r2
   11b14:	bcs	11b2c <__assert_fail@plt+0x638>
   11b18:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11b1c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11b20:	adds	r2, r2, r0
   11b24:	adc	r3, r3, r1
   11b28:	strd	r2, [fp, #-20]	; 0xffffffec
   11b2c:	ldr	r3, [pc, #236]	; 11c20 <__assert_fail@plt+0x72c>
   11b30:	ldr	r3, [r3]
   11b34:	mov	r0, r3
   11b38:	bl	11368 <strlen@plt>
   11b3c:	str	r0, [fp, #-28]	; 0xffffffe4
   11b40:	ldrd	r2, [fp, #-12]
   11b44:	adds	r2, r2, #1
   11b48:	adc	r3, r3, #0
   11b4c:	strd	r2, [fp, #-12]
   11b50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b54:	mov	r2, r3
   11b58:	mov	r3, #0
   11b5c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11b60:	bl	1cb68 <__assert_fail@plt+0xb674>
   11b64:	mov	r2, r0
   11b68:	mov	r3, r1
   11b6c:	strd	r2, [fp, #-20]	; 0xffffffec
   11b70:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11b74:	orrs	r3, r2, r3
   11b78:	bne	11b40 <__assert_fail@plt+0x64c>
   11b7c:	ldr	r3, [pc, #148]	; 11c18 <__assert_fail@plt+0x724>
   11b80:	mov	r2, #0
   11b84:	strb	r2, [r3]
   11b88:	ldr	r3, [pc, #148]	; 11c24 <__assert_fail@plt+0x730>
   11b8c:	ldr	r3, [r3]
   11b90:	cmp	r3, #0
   11b94:	beq	11bec <__assert_fail@plt+0x6f8>
   11b98:	ldr	r3, [pc, #132]	; 11c24 <__assert_fail@plt+0x730>
   11b9c:	ldr	r3, [r3]
   11ba0:	mov	r0, r3
   11ba4:	mov	r1, #0
   11ba8:	ldrd	r2, [fp, #-12]
   11bac:	cmp	r1, r3
   11bb0:	cmpeq	r0, r2
   11bb4:	bcs	11bdc <__assert_fail@plt+0x6e8>
   11bb8:	ldr	r0, [pc, #104]	; 11c28 <__assert_fail@plt+0x734>
   11bbc:	bl	1135c <gettext@plt>
   11bc0:	mov	r1, r0
   11bc4:	ldrd	r2, [fp, #-12]
   11bc8:	strd	r2, [sp]
   11bcc:	mov	r2, r1
   11bd0:	mov	r1, #0
   11bd4:	mov	r0, #1
   11bd8:	bl	112d8 <error@plt>
   11bdc:	ldr	r3, [pc, #52]	; 11c18 <__assert_fail@plt+0x724>
   11be0:	mov	r2, #0
   11be4:	strb	r2, [r3]
   11be8:	b	11c0c <__assert_fail@plt+0x718>
   11bec:	ldrd	r2, [fp, #-12]
   11bf0:	cmp	r3, #0
   11bf4:	cmpeq	r2, #2
   11bf8:	bcs	11c04 <__assert_fail@plt+0x710>
   11bfc:	mov	r2, #2
   11c00:	mov	r3, #0
   11c04:	ldr	r3, [pc, #24]	; 11c24 <__assert_fail@plt+0x730>
   11c08:	str	r2, [r3]
   11c0c:	sub	sp, fp, #4
   11c10:	pop	{fp, pc}
   11c14:	muleq	r2, ip, r4
   11c18:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   11c1c:	andeq	ip, r1, r4, asr #31
   11c20:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   11c24:	muleq	r2, r8, r4
   11c28:	andeq	sp, r1, r8, ror #4
   11c2c:	push	{r4, fp, lr}
   11c30:	add	fp, sp, #8
   11c34:	sub	sp, sp, #12
   11c38:	str	r0, [fp, #-16]
   11c3c:	ldr	r3, [fp, #-16]
   11c40:	cmp	r3, #0
   11c44:	beq	11c74 <__assert_fail@plt+0x780>
   11c48:	ldr	r3, [pc, #292]	; 11d74 <__assert_fail@plt+0x880>
   11c4c:	ldr	r4, [r3]
   11c50:	ldr	r0, [pc, #288]	; 11d78 <__assert_fail@plt+0x884>
   11c54:	bl	1135c <gettext@plt>
   11c58:	mov	r1, r0
   11c5c:	ldr	r3, [pc, #280]	; 11d7c <__assert_fail@plt+0x888>
   11c60:	ldr	r3, [r3]
   11c64:	mov	r2, r3
   11c68:	mov	r0, r4
   11c6c:	bl	113a4 <fprintf@plt>
   11c70:	b	11d6c <__assert_fail@plt+0x878>
   11c74:	ldr	r0, [pc, #260]	; 11d80 <__assert_fail@plt+0x88c>
   11c78:	bl	1135c <gettext@plt>
   11c7c:	mov	r2, r0
   11c80:	ldr	r3, [pc, #244]	; 11d7c <__assert_fail@plt+0x888>
   11c84:	ldr	r3, [r3]
   11c88:	mov	r1, r3
   11c8c:	mov	r0, r2
   11c90:	bl	11188 <printf@plt>
   11c94:	ldr	r0, [pc, #232]	; 11d84 <__assert_fail@plt+0x890>
   11c98:	bl	1135c <gettext@plt>
   11c9c:	mov	r2, r0
   11ca0:	ldr	r3, [pc, #224]	; 11d88 <__assert_fail@plt+0x894>
   11ca4:	ldr	r3, [r3]
   11ca8:	mov	r1, r3
   11cac:	mov	r0, r2
   11cb0:	bl	11158 <fputs_unlocked@plt>
   11cb4:	bl	11650 <__assert_fail@plt+0x15c>
   11cb8:	bl	11688 <__assert_fail@plt+0x194>
   11cbc:	ldr	r3, [pc, #196]	; 11d88 <__assert_fail@plt+0x894>
   11cc0:	ldr	r4, [r3]
   11cc4:	ldr	r0, [pc, #192]	; 11d8c <__assert_fail@plt+0x898>
   11cc8:	bl	1135c <gettext@plt>
   11ccc:	mov	r3, r0
   11cd0:	mov	r2, #2
   11cd4:	mov	r1, r3
   11cd8:	mov	r0, r4
   11cdc:	bl	113a4 <fprintf@plt>
   11ce0:	ldr	r0, [pc, #168]	; 11d90 <__assert_fail@plt+0x89c>
   11ce4:	bl	1135c <gettext@plt>
   11ce8:	mov	r2, r0
   11cec:	ldr	r3, [pc, #148]	; 11d88 <__assert_fail@plt+0x894>
   11cf0:	ldr	r3, [r3]
   11cf4:	mov	r1, r3
   11cf8:	mov	r0, r2
   11cfc:	bl	11158 <fputs_unlocked@plt>
   11d00:	ldr	r0, [pc, #140]	; 11d94 <__assert_fail@plt+0x8a0>
   11d04:	bl	1135c <gettext@plt>
   11d08:	mov	r2, r0
   11d0c:	ldr	r3, [pc, #116]	; 11d88 <__assert_fail@plt+0x894>
   11d10:	ldr	r3, [r3]
   11d14:	mov	r1, r3
   11d18:	mov	r0, r2
   11d1c:	bl	11158 <fputs_unlocked@plt>
   11d20:	ldr	r0, [pc, #112]	; 11d98 <__assert_fail@plt+0x8a4>
   11d24:	bl	1135c <gettext@plt>
   11d28:	mov	r2, r0
   11d2c:	ldr	r3, [pc, #84]	; 11d88 <__assert_fail@plt+0x894>
   11d30:	ldr	r3, [r3]
   11d34:	mov	r1, r3
   11d38:	mov	r0, r2
   11d3c:	bl	11158 <fputs_unlocked@plt>
   11d40:	bl	116c0 <__assert_fail@plt+0x1cc>
   11d44:	ldr	r0, [pc, #80]	; 11d9c <__assert_fail@plt+0x8a8>
   11d48:	bl	1135c <gettext@plt>
   11d4c:	mov	r2, r0
   11d50:	ldr	r3, [pc, #48]	; 11d88 <__assert_fail@plt+0x894>
   11d54:	ldr	r3, [r3]
   11d58:	mov	r1, r3
   11d5c:	mov	r0, r2
   11d60:	bl	11158 <fputs_unlocked@plt>
   11d64:	ldr	r0, [pc, #52]	; 11da0 <__assert_fail@plt+0x8ac>
   11d68:	bl	116f8 <__assert_fail@plt+0x204>
   11d6c:	ldr	r0, [fp, #-16]
   11d70:	bl	11350 <exit@plt>
   11d74:	andeq	pc, r2, r8, ror #6
   11d78:	muleq	r1, r4, r2
   11d7c:	andeq	pc, r2, ip, lsr #10
   11d80:			; <UNDEFINED> instruction: 0x0001d2bc
   11d84:	andeq	sp, r1, r4, ror #5
   11d88:	andeq	pc, r2, ip, ror #6
   11d8c:	andeq	sp, r1, r0, asr r3
   11d90:	muleq	r1, r4, r7
   11d94:	andeq	sp, r1, r8, lsl #16
   11d98:	andeq	sp, r1, r8, lsr r8
   11d9c:	andeq	sp, r1, r0, ror r8
   11da0:	andeq	sp, r1, r4, asr #19
   11da4:	push	{fp, lr}
   11da8:	add	fp, sp, #4
   11dac:	sub	sp, sp, #56	; 0x38
   11db0:	str	r0, [fp, #-40]	; 0xffffffd8
   11db4:	str	r1, [fp, #-44]	; 0xffffffd4
   11db8:	str	r2, [fp, #-48]	; 0xffffffd0
   11dbc:	str	r3, [fp, #-52]	; 0xffffffcc
   11dc0:	mov	r3, #1
   11dc4:	str	r3, [sp]
   11dc8:	mov	r2, #0
   11dcc:	mov	r3, #0
   11dd0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11dd4:	bl	11284 <lseek64@plt>
   11dd8:	strd	r0, [fp, #-28]	; 0xffffffe4
   11ddc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11de0:	cmp	r2, #0
   11de4:	sbcs	r3, r3, #0
   11de8:	bge	11e1c <__assert_fail@plt+0x928>
   11dec:	bl	113bc <__errno_location@plt>
   11df0:	mov	r3, r0
   11df4:	ldr	r3, [r3]
   11df8:	cmp	r3, #29
   11dfc:	bne	11e10 <__assert_fail@plt+0x91c>
   11e00:	bl	113bc <__errno_location@plt>
   11e04:	mov	r2, r0
   11e08:	mov	r3, #0
   11e0c:	str	r3, [r2]
   11e10:	mvn	r2, #0
   11e14:	mvn	r3, #0
   11e18:	b	12024 <__assert_fail@plt+0xb30>
   11e1c:	mov	r2, #0
   11e20:	mov	r3, #0
   11e24:	strd	r2, [fp, #-12]
   11e28:	ldr	r3, [fp, #-12]
   11e2c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11e30:	add	r1, r2, r3
   11e34:	ldr	r3, [fp, #-12]
   11e38:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11e3c:	sub	r3, r2, r3
   11e40:	mov	r2, r3
   11e44:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11e48:	bl	1919c <__assert_fail@plt+0x7ca8>
   11e4c:	str	r0, [fp, #-32]	; 0xffffffe0
   11e50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11e54:	cmp	r3, #0
   11e58:	bne	11e64 <__assert_fail@plt+0x970>
   11e5c:	ldrd	r2, [fp, #-12]
   11e60:	b	12024 <__assert_fail@plt+0xb30>
   11e64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11e68:	cmn	r3, #1
   11e6c:	bne	11e7c <__assert_fail@plt+0x988>
   11e70:	mvn	r2, #0
   11e74:	mvn	r3, #0
   11e78:	b	12024 <__assert_fail@plt+0xb30>
   11e7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11e80:	mov	r2, r3
   11e84:	mov	r3, #0
   11e88:	ldrd	r0, [fp, #-12]
   11e8c:	adds	r2, r2, r0
   11e90:	adc	r3, r3, r1
   11e94:	strd	r2, [fp, #-12]
   11e98:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11e9c:	mov	r2, r3
   11ea0:	mov	r3, #0
   11ea4:	ldrd	r0, [fp, #-12]
   11ea8:	cmp	r0, r2
   11eac:	sbcs	r3, r1, r3
   11eb0:	blt	11e28 <__assert_fail@plt+0x934>
   11eb4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11eb8:	ldrd	r2, [r3, #48]	; 0x30
   11ebc:	orrs	r3, r2, r3
   11ec0:	bne	11ee0 <__assert_fail@plt+0x9ec>
   11ec4:	bl	113bc <__errno_location@plt>
   11ec8:	mov	r2, r0
   11ecc:	mov	r3, #75	; 0x4b
   11ed0:	str	r3, [r2]
   11ed4:	mvn	r2, #0
   11ed8:	mvn	r3, #0
   11edc:	b	12024 <__assert_fail@plt+0xb30>
   11ee0:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   11ee4:	ldrd	r2, [fp, #-12]
   11ee8:	adds	r2, r2, r0
   11eec:	adc	r3, r3, r1
   11ef0:	strd	r2, [fp, #-28]	; 0xffffffe4
   11ef4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11ef8:	bl	118bc <__assert_fail@plt+0x3c8>
   11efc:	mov	r3, r0
   11f00:	cmp	r3, #0
   11f04:	beq	11f30 <__assert_fail@plt+0xa3c>
   11f08:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11f0c:	ldrd	r0, [r3, #48]	; 0x30
   11f10:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11f14:	cmp	r0, r2
   11f18:	sbcs	r3, r1, r3
   11f1c:	blt	11f30 <__assert_fail@plt+0xa3c>
   11f20:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11f24:	ldrd	r2, [r3, #48]	; 0x30
   11f28:	strd	r2, [fp, #-20]	; 0xffffffec
   11f2c:	b	11fcc <__assert_fail@plt+0xad8>
   11f30:	mov	r3, #2
   11f34:	str	r3, [sp]
   11f38:	mov	r2, #0
   11f3c:	mov	r3, #0
   11f40:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11f44:	bl	11284 <lseek64@plt>
   11f48:	strd	r0, [fp, #-20]	; 0xffffffec
   11f4c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11f50:	cmp	r2, #0
   11f54:	sbcs	r3, r3, #0
   11f58:	bge	11f68 <__assert_fail@plt+0xa74>
   11f5c:	mvn	r2, #0
   11f60:	mvn	r3, #0
   11f64:	b	12024 <__assert_fail@plt+0xb30>
   11f68:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11f6c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11f70:	cmp	r1, r3
   11f74:	cmpeq	r0, r2
   11f78:	beq	11fcc <__assert_fail@plt+0xad8>
   11f7c:	mov	r3, #0
   11f80:	str	r3, [sp]
   11f84:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11f88:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11f8c:	bl	11284 <lseek64@plt>
   11f90:	mov	r2, r0
   11f94:	mov	r3, r1
   11f98:	cmp	r2, #0
   11f9c:	sbcs	r3, r3, #0
   11fa0:	bge	11fb0 <__assert_fail@plt+0xabc>
   11fa4:	mvn	r2, #0
   11fa8:	mvn	r3, #0
   11fac:	b	12024 <__assert_fail@plt+0xb30>
   11fb0:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11fb4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11fb8:	cmp	r0, r2
   11fbc:	sbcs	r3, r1, r3
   11fc0:	bge	11fcc <__assert_fail@plt+0xad8>
   11fc4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11fc8:	strd	r2, [fp, #-20]	; 0xffffffec
   11fcc:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11fd0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11fd4:	subs	r2, r0, r2
   11fd8:	sbc	r3, r1, r3
   11fdc:	ldrd	r0, [fp, #-12]
   11fe0:	adds	r2, r2, r0
   11fe4:	adc	r3, r3, r1
   11fe8:	strd	r2, [fp, #-12]
   11fec:	ldrd	r2, [fp, #-12]
   11ff0:	mvn	r0, #0
   11ff4:	mvn	r1, #-2147483648	; 0x80000000
   11ff8:	cmp	r3, r1
   11ffc:	cmpeq	r2, r0
   12000:	bne	12020 <__assert_fail@plt+0xb2c>
   12004:	bl	113bc <__errno_location@plt>
   12008:	mov	r2, r0
   1200c:	mov	r3, #75	; 0x4b
   12010:	str	r3, [r2]
   12014:	mvn	r2, #0
   12018:	mvn	r3, #0
   1201c:	b	12024 <__assert_fail@plt+0xb30>
   12020:	ldrd	r2, [fp, #-12]
   12024:	mov	r0, r2
   12028:	mov	r1, r3
   1202c:	sub	sp, fp, #4
   12030:	pop	{fp, pc}
   12034:	push	{fp, lr}
   12038:	add	fp, sp, #4
   1203c:	sub	sp, sp, #16
   12040:	ldr	r3, [pc, #1216]	; 12508 <__assert_fail@plt+0x1014>
   12044:	ldr	r3, [r3]
   12048:	cmp	r3, #0
   1204c:	bne	123a8 <__assert_fail@plt+0xeb4>
   12050:	b	12058 <__assert_fail@plt+0xb64>
   12054:	nop			; (mov r0, r0)
   12058:	ldr	r3, [pc, #1196]	; 1250c <__assert_fail@plt+0x1018>
   1205c:	ldr	r3, [r3]
   12060:	cmp	r3, #0
   12064:	movne	r3, #1
   12068:	moveq	r3, #0
   1206c:	strb	r3, [fp, #-17]	; 0xffffffef
   12070:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12074:	eor	r3, r3, #1
   12078:	uxtb	r3, r3
   1207c:	cmp	r3, #0
   12080:	beq	12100 <__assert_fail@plt+0xc0c>
   12084:	ldr	r3, [pc, #1156]	; 12510 <__assert_fail@plt+0x101c>
   12088:	ldr	r3, [r3]
   1208c:	mov	r0, r3
   12090:	bl	11368 <strlen@plt>
   12094:	mov	r2, r0
   12098:	ldr	r3, [pc, #1140]	; 12514 <__assert_fail@plt+0x1020>
   1209c:	str	r2, [r3]
   120a0:	ldr	r3, [pc, #1136]	; 12518 <__assert_fail@plt+0x1024>
   120a4:	ldr	r3, [r3]
   120a8:	cmp	r3, #0
   120ac:	beq	120c8 <__assert_fail@plt+0xbd4>
   120b0:	ldr	r3, [pc, #1120]	; 12518 <__assert_fail@plt+0x1024>
   120b4:	ldr	r3, [r3]
   120b8:	mov	r0, r3
   120bc:	bl	11368 <strlen@plt>
   120c0:	mov	r3, r0
   120c4:	b	120cc <__assert_fail@plt+0xbd8>
   120c8:	mov	r3, #0
   120cc:	ldr	r2, [pc, #1096]	; 1251c <__assert_fail@plt+0x1028>
   120d0:	str	r3, [r2]
   120d4:	ldr	r3, [pc, #1080]	; 12514 <__assert_fail@plt+0x1020>
   120d8:	ldr	r2, [r3]
   120dc:	ldr	r3, [pc, #1084]	; 12520 <__assert_fail@plt+0x102c>
   120e0:	ldr	r3, [r3]
   120e4:	add	r2, r2, r3
   120e8:	ldr	r3, [pc, #1068]	; 1251c <__assert_fail@plt+0x1028>
   120ec:	ldr	r3, [r3]
   120f0:	add	r3, r2, r3
   120f4:	ldr	r2, [pc, #1040]	; 1250c <__assert_fail@plt+0x1018>
   120f8:	str	r3, [r2]
   120fc:	b	12128 <__assert_fail@plt+0xc34>
   12100:	ldr	r3, [pc, #1028]	; 1250c <__assert_fail@plt+0x1018>
   12104:	ldr	r3, [r3]
   12108:	add	r3, r3, #2
   1210c:	ldr	r2, [pc, #1016]	; 1250c <__assert_fail@plt+0x1018>
   12110:	str	r3, [r2]
   12114:	ldr	r3, [pc, #1028]	; 12520 <__assert_fail@plt+0x102c>
   12118:	ldr	r3, [r3]
   1211c:	add	r3, r3, #1
   12120:	ldr	r2, [pc, #1016]	; 12520 <__assert_fail@plt+0x102c>
   12124:	str	r3, [r2]
   12128:	ldr	r3, [pc, #988]	; 1250c <__assert_fail@plt+0x1018>
   1212c:	ldr	r3, [r3]
   12130:	add	r2, r3, #1
   12134:	ldr	r3, [pc, #984]	; 12514 <__assert_fail@plt+0x1020>
   12138:	ldr	r3, [r3]
   1213c:	cmp	r2, r3
   12140:	bcs	12148 <__assert_fail@plt+0xc54>
   12144:	bl	1aab0 <__assert_fail@plt+0x95bc>
   12148:	ldr	r3, [pc, #952]	; 12508 <__assert_fail@plt+0x1014>
   1214c:	ldr	r2, [r3]
   12150:	ldr	r3, [pc, #948]	; 1250c <__assert_fail@plt+0x1018>
   12154:	ldr	r3, [r3]
   12158:	add	r3, r3, #1
   1215c:	mov	r1, r3
   12160:	mov	r0, r2
   12164:	bl	1a024 <__assert_fail@plt+0x8b30>
   12168:	mov	r2, r0
   1216c:	ldr	r3, [pc, #916]	; 12508 <__assert_fail@plt+0x1014>
   12170:	str	r2, [r3]
   12174:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12178:	eor	r3, r3, #1
   1217c:	uxtb	r3, r3
   12180:	cmp	r3, #0
   12184:	beq	121ac <__assert_fail@plt+0xcb8>
   12188:	ldr	r3, [pc, #888]	; 12508 <__assert_fail@plt+0x1014>
   1218c:	ldr	r0, [r3]
   12190:	ldr	r3, [pc, #888]	; 12510 <__assert_fail@plt+0x101c>
   12194:	ldr	r1, [r3]
   12198:	ldr	r3, [pc, #884]	; 12514 <__assert_fail@plt+0x1020>
   1219c:	ldr	r3, [r3]
   121a0:	mov	r2, r3
   121a4:	bl	111dc <memcpy@plt>
   121a8:	b	121f4 <__assert_fail@plt+0xd00>
   121ac:	ldr	r3, [pc, #852]	; 12508 <__assert_fail@plt+0x1014>
   121b0:	ldr	r2, [r3]
   121b4:	ldr	r3, [pc, #856]	; 12514 <__assert_fail@plt+0x1020>
   121b8:	ldr	r3, [r3]
   121bc:	add	r3, r2, r3
   121c0:	ldr	r2, [pc, #860]	; 12524 <__assert_fail@plt+0x1030>
   121c4:	ldr	r1, [r2]
   121c8:	ldr	r2, [pc, #856]	; 12528 <__assert_fail@plt+0x1034>
   121cc:	ldr	r2, [r2]
   121d0:	ldr	r2, [r2]
   121d4:	add	r2, r1, r2
   121d8:	ldrb	r2, [r2]
   121dc:	strb	r2, [r3]
   121e0:	ldr	r3, [pc, #812]	; 12514 <__assert_fail@plt+0x1020>
   121e4:	ldr	r3, [r3]
   121e8:	add	r3, r3, #1
   121ec:	ldr	r2, [pc, #800]	; 12514 <__assert_fail@plt+0x1020>
   121f0:	str	r3, [r2]
   121f4:	ldr	r3, [pc, #780]	; 12508 <__assert_fail@plt+0x1014>
   121f8:	ldr	r2, [r3]
   121fc:	ldr	r3, [pc, #784]	; 12514 <__assert_fail@plt+0x1020>
   12200:	ldr	r3, [r3]
   12204:	add	r3, r2, r3
   12208:	ldr	r2, [pc, #796]	; 1252c <__assert_fail@plt+0x1038>
   1220c:	str	r3, [r2]
   12210:	ldr	r3, [pc, #788]	; 1252c <__assert_fail@plt+0x1038>
   12214:	ldr	r0, [r3]
   12218:	ldr	r3, [pc, #772]	; 12524 <__assert_fail@plt+0x1030>
   1221c:	ldr	r3, [r3]
   12220:	ldrb	r3, [r3]
   12224:	mov	r1, r3
   12228:	ldr	r3, [pc, #752]	; 12520 <__assert_fail@plt+0x102c>
   1222c:	ldr	r3, [r3]
   12230:	mov	r2, r3
   12234:	bl	113d4 <memset@plt>
   12238:	ldr	r3, [pc, #728]	; 12518 <__assert_fail@plt+0x1024>
   1223c:	ldr	r3, [r3]
   12240:	cmp	r3, #0
   12244:	beq	12274 <__assert_fail@plt+0xd80>
   12248:	ldr	r3, [pc, #732]	; 1252c <__assert_fail@plt+0x1038>
   1224c:	ldr	r2, [r3]
   12250:	ldr	r3, [pc, #712]	; 12520 <__assert_fail@plt+0x102c>
   12254:	ldr	r3, [r3]
   12258:	add	r0, r2, r3
   1225c:	ldr	r3, [pc, #692]	; 12518 <__assert_fail@plt+0x1024>
   12260:	ldr	r1, [r3]
   12264:	ldr	r3, [pc, #688]	; 1251c <__assert_fail@plt+0x1028>
   12268:	ldr	r3, [r3]
   1226c:	mov	r2, r3
   12270:	bl	111dc <memcpy@plt>
   12274:	ldr	r3, [pc, #652]	; 12508 <__assert_fail@plt+0x1014>
   12278:	ldr	r2, [r3]
   1227c:	ldr	r3, [pc, #648]	; 1250c <__assert_fail@plt+0x1018>
   12280:	ldr	r3, [r3]
   12284:	add	r3, r2, r3
   12288:	mov	r2, #0
   1228c:	strb	r2, [r3]
   12290:	ldr	r3, [pc, #656]	; 12528 <__assert_fail@plt+0x1034>
   12294:	ldr	r3, [r3]
   12298:	mov	r0, r3
   1229c:	bl	1677c <__assert_fail@plt+0x5288>
   122a0:	ldr	r3, [pc, #632]	; 12520 <__assert_fail@plt+0x102c>
   122a4:	ldr	r3, [r3]
   122a8:	mov	r1, #4
   122ac:	mov	r0, r3
   122b0:	bl	1a914 <__assert_fail@plt+0x9420>
   122b4:	mov	r3, r0
   122b8:	mov	r2, r3
   122bc:	ldr	r3, [pc, #612]	; 12528 <__assert_fail@plt+0x1034>
   122c0:	str	r2, [r3]
   122c4:	ldr	r3, [pc, #612]	; 12530 <__assert_fail@plt+0x103c>
   122c8:	ldr	r3, [r3]
   122cc:	cmp	r3, #0
   122d0:	beq	12500 <__assert_fail@plt+0x100c>
   122d4:	ldrb	r3, [fp, #-17]	; 0xffffffef
   122d8:	eor	r3, r3, #1
   122dc:	uxtb	r3, r3
   122e0:	cmp	r3, #0
   122e4:	bne	122fc <__assert_fail@plt+0xe08>
   122e8:	ldr	r3, [pc, #580]	; 12534 <__assert_fail@plt+0x1040>
   122ec:	ldr	r2, [pc, #580]	; 12538 <__assert_fail@plt+0x1044>
   122f0:	ldr	r1, [pc, #580]	; 1253c <__assert_fail@plt+0x1048>
   122f4:	ldr	r0, [pc, #580]	; 12540 <__assert_fail@plt+0x104c>
   122f8:	bl	114f4 <__assert_fail@plt>
   122fc:	ldr	r3, [pc, #556]	; 12530 <__assert_fail@plt+0x103c>
   12300:	ldr	r3, [r3]
   12304:	mov	r0, r3
   12308:	bl	11368 <strlen@plt>
   1230c:	str	r0, [fp, #-8]
   12310:	ldr	r3, [pc, #532]	; 1252c <__assert_fail@plt+0x1038>
   12314:	ldr	r2, [r3]
   12318:	ldr	r3, [pc, #512]	; 12520 <__assert_fail@plt+0x102c>
   1231c:	ldr	r1, [r3]
   12320:	ldr	r3, [fp, #-8]
   12324:	sub	r3, r1, r3
   12328:	add	r0, r2, r3
   1232c:	ldr	r3, [pc, #508]	; 12530 <__assert_fail@plt+0x103c>
   12330:	ldr	r3, [r3]
   12334:	ldr	r2, [fp, #-8]
   12338:	mov	r1, r3
   1233c:	bl	111dc <memcpy@plt>
   12340:	ldr	r3, [pc, #480]	; 12528 <__assert_fail@plt+0x1034>
   12344:	ldr	r2, [r3]
   12348:	ldr	r3, [pc, #464]	; 12520 <__assert_fail@plt+0x102c>
   1234c:	ldr	r3, [r3]
   12350:	lsl	r3, r3, #2
   12354:	add	r3, r2, r3
   12358:	str	r3, [fp, #-12]
   1235c:	b	12390 <__assert_fail@plt+0xe9c>
   12360:	ldr	r3, [fp, #-12]
   12364:	sub	r3, r3, #4
   12368:	str	r3, [fp, #-12]
   1236c:	ldr	r3, [pc, #444]	; 12530 <__assert_fail@plt+0x103c>
   12370:	ldr	r2, [r3]
   12374:	ldr	r3, [fp, #-8]
   12378:	add	r3, r2, r3
   1237c:	ldrb	r3, [r3]
   12380:	sub	r3, r3, #48	; 0x30
   12384:	mov	r2, r3
   12388:	ldr	r3, [fp, #-12]
   1238c:	str	r2, [r3]
   12390:	ldr	r3, [fp, #-8]
   12394:	sub	r2, r3, #1
   12398:	str	r2, [fp, #-8]
   1239c:	cmp	r3, #0
   123a0:	bne	12360 <__assert_fail@plt+0xe6c>
   123a4:	b	12500 <__assert_fail@plt+0x100c>
   123a8:	ldr	r3, [pc, #368]	; 12520 <__assert_fail@plt+0x102c>
   123ac:	ldr	r3, [r3]
   123b0:	str	r3, [fp, #-16]
   123b4:	b	124cc <__assert_fail@plt+0xfd8>
   123b8:	ldr	r3, [pc, #360]	; 12528 <__assert_fail@plt+0x1034>
   123bc:	ldr	r2, [r3]
   123c0:	ldr	r3, [fp, #-16]
   123c4:	lsl	r3, r3, #2
   123c8:	add	r3, r2, r3
   123cc:	ldr	r2, [r3]
   123d0:	add	r2, r2, #1
   123d4:	str	r2, [r3]
   123d8:	ldr	r3, [pc, #356]	; 12544 <__assert_fail@plt+0x1050>
   123dc:	ldrb	r3, [r3]
   123e0:	cmp	r3, #0
   123e4:	beq	1241c <__assert_fail@plt+0xf28>
   123e8:	ldr	r3, [fp, #-16]
   123ec:	cmp	r3, #0
   123f0:	bne	1241c <__assert_fail@plt+0xf28>
   123f4:	ldr	r3, [pc, #296]	; 12524 <__assert_fail@plt+0x1030>
   123f8:	ldr	r2, [r3]
   123fc:	ldr	r3, [pc, #292]	; 12528 <__assert_fail@plt+0x1034>
   12400:	ldr	r3, [r3]
   12404:	ldr	r3, [r3]
   12408:	add	r3, r3, #1
   1240c:	add	r3, r2, r3
   12410:	ldrb	r3, [r3]
   12414:	cmp	r3, #0
   12418:	beq	12054 <__assert_fail@plt+0xb60>
   1241c:	ldr	r3, [pc, #264]	; 1252c <__assert_fail@plt+0x1038>
   12420:	ldr	r2, [r3]
   12424:	ldr	r3, [fp, #-16]
   12428:	add	r3, r2, r3
   1242c:	ldr	r2, [pc, #240]	; 12524 <__assert_fail@plt+0x1030>
   12430:	ldr	r1, [r2]
   12434:	ldr	r2, [pc, #236]	; 12528 <__assert_fail@plt+0x1034>
   12438:	ldr	r0, [r2]
   1243c:	ldr	r2, [fp, #-16]
   12440:	lsl	r2, r2, #2
   12444:	add	r2, r0, r2
   12448:	ldr	r2, [r2]
   1244c:	add	r2, r1, r2
   12450:	ldrb	r2, [r2]
   12454:	strb	r2, [r3]
   12458:	ldr	r3, [pc, #204]	; 1252c <__assert_fail@plt+0x1038>
   1245c:	ldr	r2, [r3]
   12460:	ldr	r3, [fp, #-16]
   12464:	add	r3, r2, r3
   12468:	ldrb	r3, [r3]
   1246c:	cmp	r3, #0
   12470:	bne	124fc <__assert_fail@plt+0x1008>
   12474:	ldr	r3, [pc, #172]	; 12528 <__assert_fail@plt+0x1034>
   12478:	ldr	r2, [r3]
   1247c:	ldr	r3, [fp, #-16]
   12480:	lsl	r3, r3, #2
   12484:	add	r3, r2, r3
   12488:	mov	r2, #0
   1248c:	str	r2, [r3]
   12490:	ldr	r3, [pc, #148]	; 1252c <__assert_fail@plt+0x1038>
   12494:	ldr	r2, [r3]
   12498:	ldr	r3, [fp, #-16]
   1249c:	add	r3, r2, r3
   124a0:	ldr	r2, [pc, #124]	; 12524 <__assert_fail@plt+0x1030>
   124a4:	ldr	r1, [r2]
   124a8:	ldr	r2, [pc, #120]	; 12528 <__assert_fail@plt+0x1034>
   124ac:	ldr	r0, [r2]
   124b0:	ldr	r2, [fp, #-16]
   124b4:	lsl	r2, r2, #2
   124b8:	add	r2, r0, r2
   124bc:	ldr	r2, [r2]
   124c0:	add	r2, r1, r2
   124c4:	ldrb	r2, [r2]
   124c8:	strb	r2, [r3]
   124cc:	ldr	r3, [fp, #-16]
   124d0:	sub	r2, r3, #1
   124d4:	str	r2, [fp, #-16]
   124d8:	cmp	r3, #0
   124dc:	bne	123b8 <__assert_fail@plt+0xec4>
   124e0:	ldr	r0, [pc, #96]	; 12548 <__assert_fail@plt+0x1054>
   124e4:	bl	1135c <gettext@plt>
   124e8:	mov	r3, r0
   124ec:	mov	r2, r3
   124f0:	mov	r1, #0
   124f4:	mov	r0, #1
   124f8:	bl	112d8 <error@plt>
   124fc:	nop			; (mov r0, r0)
   12500:	sub	sp, fp, #4
   12504:	pop	{fp, pc}
   12508:	muleq	r2, r0, r4
   1250c:	andeq	pc, r2, r4, lsl r5	; <UNPREDICTABLE>
   12510:	andeq	pc, r2, ip, lsl #9
   12514:	andeq	pc, r2, r8, lsl r5	; <UNPREDICTABLE>
   12518:	andeq	pc, r2, r0, lsr #9
   1251c:	andeq	pc, r2, ip, lsl r5	; <UNPREDICTABLE>
   12520:	muleq	r2, r8, r4
   12524:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   12528:	andeq	pc, r2, r0, lsr #10
   1252c:	muleq	r2, r4, r4
   12530:	muleq	r2, ip, r4
   12534:	andeq	sp, r1, r4, lsr #31
   12538:	muleq	r0, r9, r1
   1253c:	andeq	sp, r1, ip, asr #19
   12540:	ldrdeq	sp, [r1], -r8
   12544:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   12548:	andeq	sp, r1, r0, ror #19
   1254c:	push	{r4, r5, fp, lr}
   12550:	add	fp, sp, #12
   12554:	sub	sp, sp, #144	; 0x90
   12558:	str	r0, [fp, #-144]	; 0xffffff70
   1255c:	ldr	r3, [pc, #1360]	; 12ab4 <__assert_fail@plt+0x15c0>
   12560:	ldr	r3, [r3]
   12564:	cmp	r3, #0
   12568:	bne	126f8 <__assert_fail@plt+0x1204>
   1256c:	ldr	r3, [pc, #1348]	; 12ab8 <__assert_fail@plt+0x15c4>
   12570:	ldrb	r3, [r3]
   12574:	cmp	r3, #0
   12578:	beq	125b0 <__assert_fail@plt+0x10bc>
   1257c:	ldr	r3, [pc, #1336]	; 12abc <__assert_fail@plt+0x15c8>
   12580:	ldr	r4, [r3]
   12584:	ldr	r0, [pc, #1332]	; 12ac0 <__assert_fail@plt+0x15cc>
   12588:	bl	1135c <gettext@plt>
   1258c:	mov	r5, r0
   12590:	ldr	r1, [fp, #-144]	; 0xffffff70
   12594:	mov	r0, #4
   12598:	bl	18d78 <__assert_fail@plt+0x7884>
   1259c:	mov	r3, r0
   125a0:	mov	r2, r3
   125a4:	mov	r1, r5
   125a8:	mov	r0, r4
   125ac:	bl	113a4 <fprintf@plt>
   125b0:	ldr	r2, [pc, #1292]	; 12ac4 <__assert_fail@plt+0x15d0>
   125b4:	mov	r1, #65	; 0x41
   125b8:	ldr	r0, [fp, #-144]	; 0xffffff70
   125bc:	bl	165bc <__assert_fail@plt+0x50c8>
   125c0:	str	r0, [fp, #-24]	; 0xffffffe8
   125c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   125c8:	cmp	r3, #0
   125cc:	bge	125d8 <__assert_fail@plt+0x10e4>
   125d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   125d4:	b	12aa8 <__assert_fail@plt+0x15b4>
   125d8:	sub	r3, fp, #140	; 0x8c
   125dc:	mov	r1, r3
   125e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   125e4:	bl	1cd58 <__assert_fail@plt+0xb864>
   125e8:	mov	r3, r0
   125ec:	cmp	r3, #0
   125f0:	beq	1262c <__assert_fail@plt+0x1138>
   125f4:	bl	113bc <__errno_location@plt>
   125f8:	mov	r3, r0
   125fc:	ldr	r4, [r3]
   12600:	ldr	r0, [pc, #1216]	; 12ac8 <__assert_fail@plt+0x15d4>
   12604:	bl	1135c <gettext@plt>
   12608:	mov	r5, r0
   1260c:	ldr	r1, [fp, #-144]	; 0xffffff70
   12610:	mov	r0, #4
   12614:	bl	18d78 <__assert_fail@plt+0x7884>
   12618:	mov	r3, r0
   1261c:	mov	r2, r5
   12620:	mov	r1, r4
   12624:	mov	r0, #1
   12628:	bl	112d8 <error@plt>
   1262c:	ldr	r3, [pc, #1176]	; 12acc <__assert_fail@plt+0x15d8>
   12630:	ldrd	r0, [r3, #96]	; 0x60
   12634:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   12638:	cmp	r1, r3
   1263c:	cmpeq	r0, r2
   12640:	bne	12688 <__assert_fail@plt+0x1194>
   12644:	ldr	r3, [pc, #1152]	; 12acc <__assert_fail@plt+0x15d8>
   12648:	ldrd	r0, [r3]
   1264c:	ldrd	r2, [fp, #-140]	; 0xffffff74
   12650:	cmp	r1, r3
   12654:	cmpeq	r0, r2
   12658:	bne	12688 <__assert_fail@plt+0x1194>
   1265c:	ldr	r0, [pc, #1132]	; 12ad0 <__assert_fail@plt+0x15dc>
   12660:	bl	1135c <gettext@plt>
   12664:	mov	r4, r0
   12668:	ldr	r1, [fp, #-144]	; 0xffffff70
   1266c:	mov	r0, #4
   12670:	bl	18d78 <__assert_fail@plt+0x7884>
   12674:	mov	r3, r0
   12678:	mov	r2, r4
   1267c:	mov	r1, #0
   12680:	mov	r0, #1
   12684:	bl	112d8 <error@plt>
   12688:	mov	r2, #0
   1268c:	mov	r3, #0
   12690:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12694:	bl	111f4 <ftruncate64@plt>
   12698:	mov	r3, r0
   1269c:	cmp	r3, #0
   126a0:	beq	126f0 <__assert_fail@plt+0x11fc>
   126a4:	ldr	r3, [fp, #-124]	; 0xffffff84
   126a8:	and	r3, r3, #61440	; 0xf000
   126ac:	cmp	r3, #32768	; 0x8000
   126b0:	bne	126f0 <__assert_fail@plt+0x11fc>
   126b4:	bl	113bc <__errno_location@plt>
   126b8:	mov	r3, r0
   126bc:	ldr	r4, [r3]
   126c0:	ldr	r0, [pc, #1036]	; 12ad4 <__assert_fail@plt+0x15e0>
   126c4:	bl	1135c <gettext@plt>
   126c8:	mov	r5, r0
   126cc:	ldr	r2, [fp, #-144]	; 0xffffff70
   126d0:	mov	r1, #3
   126d4:	mov	r0, #0
   126d8:	bl	18f00 <__assert_fail@plt+0x7a0c>
   126dc:	mov	r3, r0
   126e0:	mov	r2, r5
   126e4:	mov	r1, r4
   126e8:	mov	r0, #1
   126ec:	bl	112d8 <error@plt>
   126f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   126f4:	b	12aa8 <__assert_fail@plt+0x15b4>
   126f8:	ldr	r0, [pc, #984]	; 12ad8 <__assert_fail@plt+0x15e4>
   126fc:	bl	112f0 <getenv@plt>
   12700:	str	r0, [fp, #-16]
   12704:	ldr	r3, [fp, #-16]
   12708:	cmp	r3, #0
   1270c:	bne	12718 <__assert_fail@plt+0x1224>
   12710:	ldr	r3, [pc, #964]	; 12adc <__assert_fail@plt+0x15e8>
   12714:	str	r3, [fp, #-16]
   12718:	mov	r2, #1
   1271c:	ldr	r1, [fp, #-144]	; 0xffffff70
   12720:	ldr	r0, [pc, #952]	; 12ae0 <__assert_fail@plt+0x15ec>
   12724:	bl	1138c <setenv@plt>
   12728:	mov	r3, r0
   1272c:	cmp	r3, #0
   12730:	beq	1275c <__assert_fail@plt+0x1268>
   12734:	bl	113bc <__errno_location@plt>
   12738:	mov	r3, r0
   1273c:	ldr	r4, [r3]
   12740:	ldr	r0, [pc, #924]	; 12ae4 <__assert_fail@plt+0x15f0>
   12744:	bl	1135c <gettext@plt>
   12748:	mov	r3, r0
   1274c:	mov	r2, r3
   12750:	mov	r1, r4
   12754:	mov	r0, #1
   12758:	bl	112d8 <error@plt>
   1275c:	ldr	r3, [pc, #852]	; 12ab8 <__assert_fail@plt+0x15c4>
   12760:	ldrb	r3, [r3]
   12764:	cmp	r3, #0
   12768:	beq	127a4 <__assert_fail@plt+0x12b0>
   1276c:	ldr	r3, [pc, #840]	; 12abc <__assert_fail@plt+0x15c8>
   12770:	ldr	r4, [r3]
   12774:	ldr	r0, [pc, #876]	; 12ae8 <__assert_fail@plt+0x15f4>
   12778:	bl	1135c <gettext@plt>
   1277c:	mov	r5, r0
   12780:	ldr	r2, [fp, #-144]	; 0xffffff70
   12784:	mov	r1, #3
   12788:	mov	r0, #0
   1278c:	bl	18f00 <__assert_fail@plt+0x7a0c>
   12790:	mov	r3, r0
   12794:	mov	r2, r3
   12798:	mov	r1, r5
   1279c:	mov	r0, r4
   127a0:	bl	113a4 <fprintf@plt>
   127a4:	sub	r3, fp, #36	; 0x24
   127a8:	mov	r0, r3
   127ac:	bl	1141c <pipe@plt>
   127b0:	mov	r3, r0
   127b4:	cmp	r3, #0
   127b8:	beq	127e4 <__assert_fail@plt+0x12f0>
   127bc:	bl	113bc <__errno_location@plt>
   127c0:	mov	r3, r0
   127c4:	ldr	r4, [r3]
   127c8:	ldr	r0, [pc, #796]	; 12aec <__assert_fail@plt+0x15f8>
   127cc:	bl	1135c <gettext@plt>
   127d0:	mov	r3, r0
   127d4:	mov	r2, r3
   127d8:	mov	r1, r4
   127dc:	mov	r0, #1
   127e0:	bl	112d8 <error@plt>
   127e4:	bl	11458 <fork@plt>
   127e8:	mov	r3, r0
   127ec:	str	r3, [fp, #-28]	; 0xffffffe4
   127f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   127f4:	cmp	r3, #0
   127f8:	bne	129bc <__assert_fail@plt+0x14c8>
   127fc:	mov	r3, #0
   12800:	str	r3, [fp, #-20]	; 0xffffffec
   12804:	b	12868 <__assert_fail@plt+0x1374>
   12808:	ldr	r3, [pc, #736]	; 12af0 <__assert_fail@plt+0x15fc>
   1280c:	ldr	r2, [r3]
   12810:	ldr	r3, [fp, #-20]	; 0xffffffec
   12814:	lsl	r3, r3, #2
   12818:	add	r3, r2, r3
   1281c:	ldr	r3, [r3]
   12820:	mov	r0, r3
   12824:	bl	114dc <close@plt>
   12828:	mov	r3, r0
   1282c:	cmp	r3, #0
   12830:	beq	1285c <__assert_fail@plt+0x1368>
   12834:	bl	113bc <__errno_location@plt>
   12838:	mov	r3, r0
   1283c:	ldr	r4, [r3]
   12840:	ldr	r0, [pc, #684]	; 12af4 <__assert_fail@plt+0x1600>
   12844:	bl	1135c <gettext@plt>
   12848:	mov	r3, r0
   1284c:	mov	r2, r3
   12850:	mov	r1, r4
   12854:	mov	r0, #1
   12858:	bl	112d8 <error@plt>
   1285c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12860:	add	r3, r3, #1
   12864:	str	r3, [fp, #-20]	; 0xffffffec
   12868:	ldr	r2, [fp, #-20]	; 0xffffffec
   1286c:	ldr	r3, [pc, #644]	; 12af8 <__assert_fail@plt+0x1604>
   12870:	ldr	r3, [r3]
   12874:	cmp	r2, r3
   12878:	bcc	12808 <__assert_fail@plt+0x1314>
   1287c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12880:	mov	r0, r3
   12884:	bl	114dc <close@plt>
   12888:	mov	r3, r0
   1288c:	cmp	r3, #0
   12890:	beq	128bc <__assert_fail@plt+0x13c8>
   12894:	bl	113bc <__errno_location@plt>
   12898:	mov	r3, r0
   1289c:	ldr	r4, [r3]
   128a0:	ldr	r0, [pc, #596]	; 12afc <__assert_fail@plt+0x1608>
   128a4:	bl	1135c <gettext@plt>
   128a8:	mov	r3, r0
   128ac:	mov	r2, r3
   128b0:	mov	r1, r4
   128b4:	mov	r0, #1
   128b8:	bl	112d8 <error@plt>
   128bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   128c0:	cmp	r3, #0
   128c4:	beq	1294c <__assert_fail@plt+0x1458>
   128c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   128cc:	mov	r1, #0
   128d0:	mov	r0, r3
   128d4:	bl	11224 <dup2@plt>
   128d8:	mov	r3, r0
   128dc:	cmp	r3, #0
   128e0:	beq	1290c <__assert_fail@plt+0x1418>
   128e4:	bl	113bc <__errno_location@plt>
   128e8:	mov	r3, r0
   128ec:	ldr	r4, [r3]
   128f0:	ldr	r0, [pc, #520]	; 12b00 <__assert_fail@plt+0x160c>
   128f4:	bl	1135c <gettext@plt>
   128f8:	mov	r3, r0
   128fc:	mov	r2, r3
   12900:	mov	r1, r4
   12904:	mov	r0, #1
   12908:	bl	112d8 <error@plt>
   1290c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12910:	mov	r0, r3
   12914:	bl	114dc <close@plt>
   12918:	mov	r3, r0
   1291c:	cmp	r3, #0
   12920:	beq	1294c <__assert_fail@plt+0x1458>
   12924:	bl	113bc <__errno_location@plt>
   12928:	mov	r3, r0
   1292c:	ldr	r4, [r3]
   12930:	ldr	r0, [pc, #460]	; 12b04 <__assert_fail@plt+0x1610>
   12934:	bl	1135c <gettext@plt>
   12938:	mov	r3, r0
   1293c:	mov	r2, r3
   12940:	mov	r1, r4
   12944:	mov	r0, #1
   12948:	bl	112d8 <error@plt>
   1294c:	mov	r2, #0
   12950:	ldr	r1, [pc, #432]	; 12b08 <__assert_fail@plt+0x1614>
   12954:	mov	r0, #2
   12958:	bl	111ac <sigprocmask@plt>
   1295c:	ldr	r0, [fp, #-16]
   12960:	bl	1620c <__assert_fail@plt+0x4d18>
   12964:	mov	r1, r0
   12968:	ldr	r3, [pc, #324]	; 12ab4 <__assert_fail@plt+0x15c0>
   1296c:	ldr	r2, [r3]
   12970:	mov	r3, #0
   12974:	str	r3, [sp]
   12978:	mov	r3, r2
   1297c:	ldr	r2, [pc, #392]	; 12b0c <__assert_fail@plt+0x1618>
   12980:	ldr	r0, [fp, #-16]
   12984:	bl	11464 <execl@plt>
   12988:	bl	113bc <__errno_location@plt>
   1298c:	mov	r3, r0
   12990:	ldr	r4, [r3]
   12994:	ldr	r0, [pc, #372]	; 12b10 <__assert_fail@plt+0x161c>
   12998:	bl	1135c <gettext@plt>
   1299c:	mov	r2, r0
   129a0:	ldr	r3, [pc, #268]	; 12ab4 <__assert_fail@plt+0x15c0>
   129a4:	ldr	r3, [r3]
   129a8:	str	r3, [sp]
   129ac:	ldr	r3, [fp, #-16]
   129b0:	mov	r1, r4
   129b4:	mov	r0, #1
   129b8:	bl	112d8 <error@plt>
   129bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   129c0:	cmn	r3, #1
   129c4:	bne	129f0 <__assert_fail@plt+0x14fc>
   129c8:	bl	113bc <__errno_location@plt>
   129cc:	mov	r3, r0
   129d0:	ldr	r4, [r3]
   129d4:	ldr	r0, [pc, #312]	; 12b14 <__assert_fail@plt+0x1620>
   129d8:	bl	1135c <gettext@plt>
   129dc:	mov	r3, r0
   129e0:	mov	r2, r3
   129e4:	mov	r1, r4
   129e8:	mov	r0, #1
   129ec:	bl	112d8 <error@plt>
   129f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   129f4:	mov	r0, r3
   129f8:	bl	114dc <close@plt>
   129fc:	mov	r3, r0
   12a00:	cmp	r3, #0
   12a04:	beq	12a30 <__assert_fail@plt+0x153c>
   12a08:	bl	113bc <__errno_location@plt>
   12a0c:	mov	r3, r0
   12a10:	ldr	r4, [r3]
   12a14:	ldr	r0, [pc, #252]	; 12b18 <__assert_fail@plt+0x1624>
   12a18:	bl	1135c <gettext@plt>
   12a1c:	mov	r3, r0
   12a20:	mov	r2, r3
   12a24:	mov	r1, r4
   12a28:	mov	r0, #1
   12a2c:	bl	112d8 <error@plt>
   12a30:	ldr	r2, [pc, #228]	; 12b1c <__assert_fail@plt+0x1628>
   12a34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12a38:	str	r3, [r2]
   12a3c:	ldr	r3, [pc, #180]	; 12af8 <__assert_fail@plt+0x1604>
   12a40:	ldr	r2, [r3]
   12a44:	ldr	r3, [pc, #212]	; 12b20 <__assert_fail@plt+0x162c>
   12a48:	ldr	r3, [r3]
   12a4c:	cmp	r2, r3
   12a50:	bne	12a78 <__assert_fail@plt+0x1584>
   12a54:	ldr	r3, [pc, #148]	; 12af0 <__assert_fail@plt+0x15fc>
   12a58:	ldr	r3, [r3]
   12a5c:	mov	r2, #4
   12a60:	ldr	r1, [pc, #184]	; 12b20 <__assert_fail@plt+0x162c>
   12a64:	mov	r0, r3
   12a68:	bl	1a20c <__assert_fail@plt+0x8d18>
   12a6c:	mov	r2, r0
   12a70:	ldr	r3, [pc, #120]	; 12af0 <__assert_fail@plt+0x15fc>
   12a74:	str	r2, [r3]
   12a78:	ldr	r3, [pc, #112]	; 12af0 <__assert_fail@plt+0x15fc>
   12a7c:	ldr	r2, [r3]
   12a80:	ldr	r3, [pc, #112]	; 12af8 <__assert_fail@plt+0x1604>
   12a84:	ldr	r3, [r3]
   12a88:	add	r1, r3, #1
   12a8c:	ldr	r0, [pc, #100]	; 12af8 <__assert_fail@plt+0x1604>
   12a90:	str	r1, [r0]
   12a94:	lsl	r3, r3, #2
   12a98:	add	r3, r2, r3
   12a9c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12aa0:	str	r2, [r3]
   12aa4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12aa8:	mov	r0, r3
   12aac:	sub	sp, fp, #12
   12ab0:	pop	{r4, r5, fp, pc}
   12ab4:	andeq	pc, r2, r8, ror r3	; <UNPREDICTABLE>
   12ab8:	andeq	pc, r2, r0, lsl r5	; <UNPREDICTABLE>
   12abc:	andeq	pc, r2, ip, ror #6
   12ac0:	andeq	sp, r1, r0, lsl #20
   12ac4:			; <UNDEFINED> instruction: 0x000001b6
   12ac8:	andeq	sp, r1, r4, lsl sl
   12acc:	andeq	pc, r2, r8, lsr #9
   12ad0:	andeq	sp, r1, r8, lsr #20
   12ad4:	andeq	sp, r1, ip, asr #20
   12ad8:	andeq	sp, r1, r4, ror #20
   12adc:	andeq	sp, r1, ip, ror #20
   12ae0:	andeq	sp, r1, r4, ror sl
   12ae4:	andeq	sp, r1, ip, ror sl
   12ae8:	andeq	sp, r1, r4, lsr #21
   12aec:			; <UNDEFINED> instruction: 0x0001dabc
   12af0:	andeq	pc, r2, r0, lsl #7
   12af4:	ldrdeq	sp, [r1], -r4
   12af8:	andeq	pc, r2, r8, lsl #7
   12afc:	andeq	sp, r1, r8, ror #21
   12b00:	strdeq	sp, [r1], -ip
   12b04:	andeq	sp, r1, r0, lsl fp
   12b08:	andeq	pc, r2, ip, lsl #7
   12b0c:	andeq	sp, r1, r4, lsr #22
   12b10:	andeq	sp, r1, r8, lsr #22
   12b14:	andeq	sp, r1, ip, asr #22
   12b18:	andeq	sp, r1, r4, ror #22
   12b1c:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   12b20:	andeq	pc, r2, r4, lsl #7
   12b24:	push	{r4, r5, fp, lr}
   12b28:	add	fp, sp, #12
   12b2c:	sub	sp, sp, #64	; 0x40
   12b30:	str	r0, [fp, #-56]	; 0xffffffc8
   12b34:	str	r1, [fp, #-60]	; 0xffffffc4
   12b38:	str	r2, [fp, #-64]	; 0xffffffc0
   12b3c:	str	r3, [fp, #-68]	; 0xffffffbc
   12b40:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12b44:	cmp	r3, #0
   12b48:	beq	12bb8 <__assert_fail@plt+0x16c4>
   12b4c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12b50:	bl	164c4 <__assert_fail@plt+0x4fd0>
   12b54:	mov	r3, r0
   12b58:	cmp	r3, #0
   12b5c:	beq	12bb8 <__assert_fail@plt+0x16c4>
   12b60:	bl	113bc <__errno_location@plt>
   12b64:	mov	r3, r0
   12b68:	ldr	r3, [r3]
   12b6c:	mov	r0, r3
   12b70:	bl	119e0 <__assert_fail@plt+0x4ec>
   12b74:	mov	r3, r0
   12b78:	eor	r3, r3, #1
   12b7c:	uxtb	r3, r3
   12b80:	cmp	r3, #0
   12b84:	beq	12bb8 <__assert_fail@plt+0x16c4>
   12b88:	bl	113bc <__errno_location@plt>
   12b8c:	mov	r3, r0
   12b90:	ldr	r4, [r3]
   12b94:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12b98:	mov	r1, #3
   12b9c:	mov	r0, #0
   12ba0:	bl	18f00 <__assert_fail@plt+0x7a0c>
   12ba4:	mov	r3, r0
   12ba8:	ldr	r2, [pc, #728]	; 12e88 <__assert_fail@plt+0x1994>
   12bac:	mov	r1, r4
   12bb0:	mov	r0, #1
   12bb4:	bl	112d8 <error@plt>
   12bb8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12bbc:	cmp	r3, #0
   12bc0:	blt	12cb0 <__assert_fail@plt+0x17bc>
   12bc4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12bc8:	cmp	r3, #0
   12bcc:	bne	12c14 <__assert_fail@plt+0x1720>
   12bd0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12bd4:	bl	114dc <close@plt>
   12bd8:	mov	r3, r0
   12bdc:	cmp	r3, #0
   12be0:	bge	12c14 <__assert_fail@plt+0x1720>
   12be4:	bl	113bc <__errno_location@plt>
   12be8:	mov	r3, r0
   12bec:	ldr	r4, [r3]
   12bf0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12bf4:	mov	r1, #3
   12bf8:	mov	r0, #0
   12bfc:	bl	18f00 <__assert_fail@plt+0x7a0c>
   12c00:	mov	r3, r0
   12c04:	ldr	r2, [pc, #636]	; 12e88 <__assert_fail@plt+0x1994>
   12c08:	mov	r1, r4
   12c0c:	mov	r0, #1
   12c10:	bl	112d8 <error@plt>
   12c14:	mov	r3, #0
   12c18:	str	r3, [fp, #-16]
   12c1c:	b	12c9c <__assert_fail@plt+0x17a8>
   12c20:	ldr	r3, [pc, #612]	; 12e8c <__assert_fail@plt+0x1998>
   12c24:	ldr	r2, [r3]
   12c28:	ldr	r3, [fp, #-16]
   12c2c:	lsl	r3, r3, #2
   12c30:	add	r3, r2, r3
   12c34:	ldr	r2, [r3]
   12c38:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12c3c:	cmp	r2, r3
   12c40:	bne	12c90 <__assert_fail@plt+0x179c>
   12c44:	ldr	r3, [pc, #576]	; 12e8c <__assert_fail@plt+0x1998>
   12c48:	ldr	r2, [r3]
   12c4c:	ldr	r3, [fp, #-16]
   12c50:	lsl	r3, r3, #2
   12c54:	add	r3, r2, r3
   12c58:	ldr	r2, [pc, #556]	; 12e8c <__assert_fail@plt+0x1998>
   12c5c:	ldr	r1, [r2]
   12c60:	ldr	r2, [pc, #552]	; 12e90 <__assert_fail@plt+0x199c>
   12c64:	ldr	r2, [r2]
   12c68:	sub	r2, r2, #1
   12c6c:	ldr	r0, [pc, #540]	; 12e90 <__assert_fail@plt+0x199c>
   12c70:	str	r2, [r0]
   12c74:	ldr	r2, [pc, #532]	; 12e90 <__assert_fail@plt+0x199c>
   12c78:	ldr	r2, [r2]
   12c7c:	lsl	r2, r2, #2
   12c80:	add	r2, r1, r2
   12c84:	ldr	r2, [r2]
   12c88:	str	r2, [r3]
   12c8c:	b	12cb0 <__assert_fail@plt+0x17bc>
   12c90:	ldr	r3, [fp, #-16]
   12c94:	add	r3, r3, #1
   12c98:	str	r3, [fp, #-16]
   12c9c:	ldr	r2, [fp, #-16]
   12ca0:	ldr	r3, [pc, #488]	; 12e90 <__assert_fail@plt+0x199c>
   12ca4:	ldr	r3, [r3]
   12ca8:	cmp	r2, r3
   12cac:	bcc	12c20 <__assert_fail@plt+0x172c>
   12cb0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12cb4:	cmp	r3, #0
   12cb8:	ble	12e7c <__assert_fail@plt+0x1988>
   12cbc:	mov	r3, #0
   12cc0:	str	r3, [fp, #-28]	; 0xffffffe4
   12cc4:	sub	r3, fp, #28
   12cc8:	mov	r2, #0
   12ccc:	mov	r1, r3
   12cd0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12cd4:	bl	11290 <waitpid@plt>
   12cd8:	mov	r3, r0
   12cdc:	cmn	r3, #1
   12ce0:	bne	12d20 <__assert_fail@plt+0x182c>
   12ce4:	bl	113bc <__errno_location@plt>
   12ce8:	mov	r3, r0
   12cec:	ldr	r3, [r3]
   12cf0:	cmp	r3, #10
   12cf4:	beq	12d20 <__assert_fail@plt+0x182c>
   12cf8:	bl	113bc <__errno_location@plt>
   12cfc:	mov	r3, r0
   12d00:	ldr	r4, [r3]
   12d04:	ldr	r0, [pc, #392]	; 12e94 <__assert_fail@plt+0x19a0>
   12d08:	bl	1135c <gettext@plt>
   12d0c:	mov	r3, r0
   12d10:	mov	r2, r3
   12d14:	mov	r1, r4
   12d18:	mov	r0, #1
   12d1c:	bl	112d8 <error@plt>
   12d20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d24:	uxtb	r3, r3
   12d28:	and	r3, r3, #127	; 0x7f
   12d2c:	uxtb	r3, r3
   12d30:	add	r3, r3, #1
   12d34:	uxtb	r3, r3
   12d38:	sxtb	r3, r3
   12d3c:	asr	r3, r3, #1
   12d40:	sxtb	r3, r3
   12d44:	cmp	r3, #0
   12d48:	ble	12de8 <__assert_fail@plt+0x18f4>
   12d4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d50:	and	r3, r3, #127	; 0x7f
   12d54:	str	r3, [fp, #-20]	; 0xffffffec
   12d58:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d5c:	cmp	r3, #13
   12d60:	beq	12e7c <__assert_fail@plt+0x1988>
   12d64:	sub	r3, fp, #48	; 0x30
   12d68:	mov	r1, r3
   12d6c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12d70:	bl	19554 <__assert_fail@plt+0x8060>
   12d74:	mov	r3, r0
   12d78:	cmp	r3, #0
   12d7c:	beq	12d94 <__assert_fail@plt+0x18a0>
   12d80:	sub	r3, fp, #48	; 0x30
   12d84:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d88:	ldr	r1, [pc, #264]	; 12e98 <__assert_fail@plt+0x19a4>
   12d8c:	mov	r0, r3
   12d90:	bl	11488 <sprintf@plt>
   12d94:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d98:	add	r4, r3, #128	; 0x80
   12d9c:	ldr	r0, [pc, #248]	; 12e9c <__assert_fail@plt+0x19a8>
   12da0:	bl	1135c <gettext@plt>
   12da4:	mov	r5, r0
   12da8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12dac:	mov	r1, #3
   12db0:	mov	r0, #0
   12db4:	bl	18f00 <__assert_fail@plt+0x7a0c>
   12db8:	mov	r2, r0
   12dbc:	ldr	r3, [pc, #220]	; 12ea0 <__assert_fail@plt+0x19ac>
   12dc0:	ldr	r3, [r3]
   12dc4:	str	r3, [sp, #4]
   12dc8:	sub	r3, fp, #48	; 0x30
   12dcc:	str	r3, [sp]
   12dd0:	mov	r3, r2
   12dd4:	mov	r2, r5
   12dd8:	mov	r1, #0
   12ddc:	mov	r0, r4
   12de0:	bl	112d8 <error@plt>
   12de4:	b	12e7c <__assert_fail@plt+0x1988>
   12de8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12dec:	and	r3, r3, #127	; 0x7f
   12df0:	cmp	r3, #0
   12df4:	bne	12e60 <__assert_fail@plt+0x196c>
   12df8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12dfc:	asr	r3, r3, #8
   12e00:	uxtb	r3, r3
   12e04:	str	r3, [fp, #-24]	; 0xffffffe8
   12e08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e0c:	cmp	r3, #0
   12e10:	beq	12e7c <__assert_fail@plt+0x1988>
   12e14:	ldr	r0, [pc, #136]	; 12ea4 <__assert_fail@plt+0x19b0>
   12e18:	bl	1135c <gettext@plt>
   12e1c:	mov	r4, r0
   12e20:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12e24:	mov	r1, #3
   12e28:	mov	r0, #0
   12e2c:	bl	18f00 <__assert_fail@plt+0x7a0c>
   12e30:	mov	r2, r0
   12e34:	ldr	r3, [pc, #100]	; 12ea0 <__assert_fail@plt+0x19ac>
   12e38:	ldr	r3, [r3]
   12e3c:	str	r3, [sp, #4]
   12e40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e44:	str	r3, [sp]
   12e48:	mov	r3, r2
   12e4c:	mov	r2, r4
   12e50:	mov	r1, #0
   12e54:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12e58:	bl	112d8 <error@plt>
   12e5c:	b	12e7c <__assert_fail@plt+0x1988>
   12e60:	ldr	r0, [pc, #64]	; 12ea8 <__assert_fail@plt+0x19b4>
   12e64:	bl	1135c <gettext@plt>
   12e68:	mov	r2, r0
   12e6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12e70:	mov	r1, #0
   12e74:	mov	r0, #1
   12e78:	bl	112d8 <error@plt>
   12e7c:	nop			; (mov r0, r0)
   12e80:	sub	sp, fp, #12
   12e84:	pop	{r4, r5, fp, pc}
   12e88:	andeq	sp, r1, r0, lsl #23
   12e8c:	andeq	pc, r2, r0, lsl #7
   12e90:	andeq	pc, r2, r8, lsl #7
   12e94:	andeq	sp, r1, r4, lsl #23
   12e98:	andeq	sp, r1, r0, lsr #23
   12e9c:	andeq	sp, r1, r4, lsr #23
   12ea0:	andeq	pc, r2, r8, ror r3	; <UNPREDICTABLE>
   12ea4:	ldrdeq	sp, [r1], -r0
   12ea8:	strdeq	sp, [r1], -r8
   12eac:	push	{r4, fp, lr}
   12eb0:	add	fp, sp, #8
   12eb4:	sub	sp, sp, #20
   12eb8:	mov	r3, r0
   12ebc:	str	r1, [fp, #-20]	; 0xffffffec
   12ec0:	str	r2, [fp, #-24]	; 0xffffffe8
   12ec4:	strb	r3, [fp, #-13]
   12ec8:	ldrb	r3, [fp, #-13]
   12ecc:	cmp	r3, #0
   12ed0:	beq	12f8c <__assert_fail@plt+0x1a98>
   12ed4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ed8:	cmp	r3, #0
   12edc:	bne	12f04 <__assert_fail@plt+0x1a10>
   12ee0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ee4:	cmp	r3, #0
   12ee8:	bne	12f04 <__assert_fail@plt+0x1a10>
   12eec:	ldr	r3, [pc, #312]	; 1302c <__assert_fail@plt+0x1b38>
   12ef0:	ldrb	r3, [r3]
   12ef4:	cmp	r3, #0
   12ef8:	beq	12f04 <__assert_fail@plt+0x1a10>
   12efc:	mov	r3, #1
   12f00:	b	13020 <__assert_fail@plt+0x1b2c>
   12f04:	ldr	r3, [pc, #292]	; 13030 <__assert_fail@plt+0x1b3c>
   12f08:	ldr	r1, [r3]
   12f0c:	ldr	r3, [pc, #288]	; 13034 <__assert_fail@plt+0x1b40>
   12f10:	ldr	r2, [r3]
   12f14:	ldr	r3, [pc, #284]	; 13038 <__assert_fail@plt+0x1b44>
   12f18:	ldr	r3, [r3]
   12f1c:	mov	r0, #0
   12f20:	bl	12b24 <__assert_fail@plt+0x1630>
   12f24:	bl	12034 <__assert_fail@plt+0xb40>
   12f28:	ldr	r3, [pc, #264]	; 13038 <__assert_fail@plt+0x1b44>
   12f2c:	ldr	r3, [r3]
   12f30:	mov	r0, r3
   12f34:	bl	1254c <__assert_fail@plt+0x1058>
   12f38:	mov	r2, r0
   12f3c:	ldr	r3, [pc, #236]	; 13030 <__assert_fail@plt+0x1b3c>
   12f40:	str	r2, [r3]
   12f44:	ldr	r3, [pc, #228]	; 13030 <__assert_fail@plt+0x1b3c>
   12f48:	ldr	r3, [r3]
   12f4c:	cmp	r3, #0
   12f50:	bge	12f8c <__assert_fail@plt+0x1a98>
   12f54:	bl	113bc <__errno_location@plt>
   12f58:	mov	r3, r0
   12f5c:	ldr	r4, [r3]
   12f60:	ldr	r3, [pc, #208]	; 13038 <__assert_fail@plt+0x1b44>
   12f64:	ldr	r3, [r3]
   12f68:	mov	r2, r3
   12f6c:	mov	r1, #3
   12f70:	mov	r0, #0
   12f74:	bl	18f00 <__assert_fail@plt+0x7a0c>
   12f78:	mov	r3, r0
   12f7c:	ldr	r2, [pc, #184]	; 1303c <__assert_fail@plt+0x1b48>
   12f80:	mov	r1, r4
   12f84:	mov	r0, #1
   12f88:	bl	112d8 <error@plt>
   12f8c:	ldr	r3, [pc, #156]	; 13030 <__assert_fail@plt+0x1b3c>
   12f90:	ldr	r3, [r3]
   12f94:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12f98:	ldr	r1, [fp, #-20]	; 0xffffffec
   12f9c:	mov	r0, r3
   12fa0:	bl	168ec <__assert_fail@plt+0x53f8>
   12fa4:	mov	r2, r0
   12fa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12fac:	cmp	r2, r3
   12fb0:	bne	12fbc <__assert_fail@plt+0x1ac8>
   12fb4:	mov	r3, #1
   12fb8:	b	13020 <__assert_fail@plt+0x1b2c>
   12fbc:	bl	113bc <__errno_location@plt>
   12fc0:	mov	r3, r0
   12fc4:	ldr	r3, [r3]
   12fc8:	mov	r0, r3
   12fcc:	bl	119e0 <__assert_fail@plt+0x4ec>
   12fd0:	mov	r3, r0
   12fd4:	eor	r3, r3, #1
   12fd8:	uxtb	r3, r3
   12fdc:	cmp	r3, #0
   12fe0:	beq	1301c <__assert_fail@plt+0x1b28>
   12fe4:	bl	113bc <__errno_location@plt>
   12fe8:	mov	r3, r0
   12fec:	ldr	r4, [r3]
   12ff0:	ldr	r3, [pc, #64]	; 13038 <__assert_fail@plt+0x1b44>
   12ff4:	ldr	r3, [r3]
   12ff8:	mov	r2, r3
   12ffc:	mov	r1, #3
   13000:	mov	r0, #0
   13004:	bl	18f00 <__assert_fail@plt+0x7a0c>
   13008:	mov	r3, r0
   1300c:	ldr	r2, [pc, #40]	; 1303c <__assert_fail@plt+0x1b48>
   13010:	mov	r1, r4
   13014:	mov	r0, #1
   13018:	bl	112d8 <error@plt>
   1301c:	mov	r3, #0
   13020:	mov	r0, r3
   13024:	sub	sp, fp, #8
   13028:	pop	{r4, fp, pc}
   1302c:	andeq	pc, r2, r1, lsl r5	; <UNPREDICTABLE>
   13030:	andeq	pc, r2, r0, ror #2
   13034:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   13038:	muleq	r2, r0, r4
   1303c:	andeq	sp, r1, r0, lsl #23
   13040:	push	{r4, fp, lr}
   13044:	add	fp, sp, #8
   13048:	sub	sp, sp, #60	; 0x3c
   1304c:	strd	r0, [fp, #-52]	; 0xffffffcc
   13050:	str	r2, [fp, #-56]	; 0xffffffc8
   13054:	str	r3, [fp, #-60]	; 0xffffffc4
   13058:	mov	r3, #1
   1305c:	strb	r3, [fp, #-17]	; 0xffffffef
   13060:	mov	r3, #1
   13064:	strb	r3, [fp, #-18]	; 0xffffffee
   13068:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   1306c:	strd	r2, [fp, #-28]	; 0xffffffe4
   13070:	mov	r2, #0
   13074:	mov	r3, #0
   13078:	strd	r2, [fp, #-36]	; 0xffffffdc
   1307c:	ldr	r3, [fp, #4]
   13080:	cmn	r3, #1
   13084:	beq	130b4 <__assert_fail@plt+0x1bc0>
   13088:	ldr	r3, [fp, #4]
   1308c:	str	r3, [fp, #-16]
   13090:	mvn	r3, #0
   13094:	str	r3, [fp, #4]
   13098:	ldr	r2, [fp, #-16]
   1309c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   130a0:	cmp	r2, r3
   130a4:	movcc	r3, #1
   130a8:	movcs	r3, #0
   130ac:	strb	r3, [fp, #-37]	; 0xffffffdb
   130b0:	b	1316c <__assert_fail@plt+0x1c78>
   130b4:	ldrb	r3, [fp, #-18]	; 0xffffffee
   130b8:	eor	r3, r3, #1
   130bc:	uxtb	r3, r3
   130c0:	cmp	r3, #0
   130c4:	beq	13100 <__assert_fail@plt+0x1c0c>
   130c8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   130cc:	mov	r1, #1
   130d0:	str	r1, [sp]
   130d4:	mov	r0, #0
   130d8:	bl	11284 <lseek64@plt>
   130dc:	mvn	r2, #0
   130e0:	mvn	r3, #0
   130e4:	cmp	r1, r3
   130e8:	cmpeq	r0, r2
   130ec:	beq	13100 <__assert_fail@plt+0x1c0c>
   130f0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   130f4:	strd	r2, [fp, #-28]	; 0xffffffe4
   130f8:	mov	r3, #1
   130fc:	strb	r3, [fp, #-17]	; 0xffffffef
   13100:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13104:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13108:	mov	r0, #0
   1310c:	bl	1919c <__assert_fail@plt+0x7ca8>
   13110:	str	r0, [fp, #-16]
   13114:	ldr	r3, [fp, #-16]
   13118:	cmn	r3, #1
   1311c:	bne	13158 <__assert_fail@plt+0x1c64>
   13120:	bl	113bc <__errno_location@plt>
   13124:	mov	r3, r0
   13128:	ldr	r4, [r3]
   1312c:	ldr	r3, [pc, #588]	; 13380 <__assert_fail@plt+0x1e8c>
   13130:	ldr	r3, [r3]
   13134:	mov	r2, r3
   13138:	mov	r1, #3
   1313c:	mov	r0, #0
   13140:	bl	18f00 <__assert_fail@plt+0x7a0c>
   13144:	mov	r3, r0
   13148:	ldr	r2, [pc, #564]	; 13384 <__assert_fail@plt+0x1e90>
   1314c:	mov	r1, r4
   13150:	mov	r0, #1
   13154:	bl	112d8 <error@plt>
   13158:	ldr	r3, [fp, #-16]
   1315c:	cmp	r3, #0
   13160:	moveq	r3, #1
   13164:	movne	r3, #0
   13168:	strb	r3, [fp, #-37]	; 0xffffffdb
   1316c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13170:	str	r3, [fp, #-44]	; 0xffffffd4
   13174:	b	13264 <__assert_fail@plt+0x1d70>
   13178:	ldrb	r3, [fp, #-18]	; 0xffffffee
   1317c:	cmp	r3, #0
   13180:	bne	13190 <__assert_fail@plt+0x1c9c>
   13184:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13188:	cmp	r3, #0
   1318c:	beq	131ac <__assert_fail@plt+0x1cb8>
   13190:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13194:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13198:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1319c:	mov	r0, r3
   131a0:	bl	12eac <__assert_fail@plt+0x19b8>
   131a4:	mov	r3, r0
   131a8:	strb	r3, [fp, #-18]	; 0xffffffee
   131ac:	ldrb	r2, [fp, #-17]	; 0xffffffef
   131b0:	mov	r3, #0
   131b4:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   131b8:	adds	r2, r2, r0
   131bc:	adc	r3, r3, r1
   131c0:	strd	r2, [fp, #-36]	; 0xffffffdc
   131c4:	ldrd	r2, [fp, #12]
   131c8:	orrs	r3, r2, r3
   131cc:	beq	131e4 <__assert_fail@plt+0x1cf0>
   131d0:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   131d4:	ldrd	r2, [fp, #12]
   131d8:	cmp	r1, r3
   131dc:	cmpeq	r0, r2
   131e0:	bcs	131ec <__assert_fail@plt+0x1cf8>
   131e4:	mov	r3, #1
   131e8:	b	131f0 <__assert_fail@plt+0x1cfc>
   131ec:	mov	r3, #0
   131f0:	strb	r3, [fp, #-17]	; 0xffffffef
   131f4:	ldrb	r3, [fp, #-17]	; 0xffffffef
   131f8:	and	r3, r3, #1
   131fc:	strb	r3, [fp, #-17]	; 0xffffffef
   13200:	ldrb	r3, [fp, #-18]	; 0xffffffee
   13204:	eor	r3, r3, #1
   13208:	uxtb	r3, r3
   1320c:	cmp	r3, #0
   13210:	beq	1323c <__assert_fail@plt+0x1d48>
   13214:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13218:	eor	r3, r3, #1
   1321c:	uxtb	r3, r3
   13220:	cmp	r3, #0
   13224:	beq	1323c <__assert_fail@plt+0x1d48>
   13228:	mov	r3, #0
   1322c:	str	r3, [fp, #-16]
   13230:	mov	r3, #1
   13234:	strb	r3, [fp, #-37]	; 0xffffffdb
   13238:	b	13280 <__assert_fail@plt+0x1d8c>
   1323c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13240:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13244:	add	r3, r2, r3
   13248:	str	r3, [fp, #-44]	; 0xffffffd4
   1324c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13250:	ldr	r2, [fp, #-16]
   13254:	sub	r3, r2, r3
   13258:	str	r3, [fp, #-16]
   1325c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   13260:	strd	r2, [fp, #-28]	; 0xffffffe4
   13264:	ldr	r3, [fp, #-16]
   13268:	mov	r0, r3
   1326c:	mov	r1, #0
   13270:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13274:	cmp	r1, r3
   13278:	cmpeq	r0, r2
   1327c:	bcs	13178 <__assert_fail@plt+0x1c84>
   13280:	ldr	r3, [fp, #-16]
   13284:	cmp	r3, #0
   13288:	beq	13324 <__assert_fail@plt+0x1e30>
   1328c:	ldrb	r3, [fp, #-18]	; 0xffffffee
   13290:	cmp	r3, #0
   13294:	bne	132a4 <__assert_fail@plt+0x1db0>
   13298:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1329c:	cmp	r3, #0
   132a0:	beq	132c0 <__assert_fail@plt+0x1dcc>
   132a4:	ldrb	r3, [fp, #-17]	; 0xffffffef
   132a8:	ldr	r2, [fp, #-16]
   132ac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   132b0:	mov	r0, r3
   132b4:	bl	12eac <__assert_fail@plt+0x19b8>
   132b8:	mov	r3, r0
   132bc:	strb	r3, [fp, #-18]	; 0xffffffee
   132c0:	ldrb	r2, [fp, #-17]	; 0xffffffef
   132c4:	mov	r3, #0
   132c8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   132cc:	adds	r2, r2, r0
   132d0:	adc	r3, r3, r1
   132d4:	strd	r2, [fp, #-36]	; 0xffffffdc
   132d8:	mov	r3, #0
   132dc:	strb	r3, [fp, #-17]	; 0xffffffef
   132e0:	ldrb	r3, [fp, #-18]	; 0xffffffee
   132e4:	eor	r3, r3, #1
   132e8:	uxtb	r3, r3
   132ec:	cmp	r3, #0
   132f0:	beq	13308 <__assert_fail@plt+0x1e14>
   132f4:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   132f8:	ldrd	r2, [fp, #12]
   132fc:	cmp	r1, r3
   13300:	cmpeq	r0, r2
   13304:	beq	1333c <__assert_fail@plt+0x1e48>
   13308:	ldr	r3, [fp, #-16]
   1330c:	mov	r2, r3
   13310:	mov	r3, #0
   13314:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   13318:	subs	r2, r0, r2
   1331c:	sbc	r3, r1, r3
   13320:	strd	r2, [fp, #-28]	; 0xffffffe4
   13324:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13328:	eor	r3, r3, #1
   1332c:	uxtb	r3, r3
   13330:	cmp	r3, #0
   13334:	bne	1307c <__assert_fail@plt+0x1b88>
   13338:	b	13354 <__assert_fail@plt+0x1e60>
   1333c:	nop			; (mov r0, r0)
   13340:	b	13354 <__assert_fail@plt+0x1e60>
   13344:	mov	r2, #0
   13348:	mov	r1, #0
   1334c:	mov	r0, #1
   13350:	bl	12eac <__assert_fail@plt+0x19b8>
   13354:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13358:	adds	r0, r2, #1
   1335c:	adc	r1, r3, #0
   13360:	strd	r0, [fp, #-36]	; 0xffffffdc
   13364:	ldrd	r0, [fp, #12]
   13368:	cmp	r3, r1
   1336c:	cmpeq	r2, r0
   13370:	bcc	13344 <__assert_fail@plt+0x1e50>
   13374:	nop			; (mov r0, r0)
   13378:	sub	sp, fp, #8
   1337c:	pop	{r4, fp, pc}
   13380:	andeq	pc, r2, r4, lsr #9
   13384:	andeq	sp, r1, r0, lsl #23
   13388:	push	{r4, fp, lr}
   1338c:	add	fp, sp, #8
   13390:	sub	sp, sp, #60	; 0x3c
   13394:	strd	r0, [fp, #-60]	; 0xffffffc4
   13398:	str	r2, [fp, #-64]	; 0xffffffc0
   1339c:	str	r3, [fp, #-68]	; 0xffffffbc
   133a0:	mov	r3, #1
   133a4:	strb	r3, [fp, #-21]	; 0xffffffeb
   133a8:	mov	r2, #0
   133ac:	mov	r3, #0
   133b0:	strd	r2, [fp, #-36]	; 0xffffffdc
   133b4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   133b8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   133bc:	mov	r0, #0
   133c0:	bl	1919c <__assert_fail@plt+0x7ca8>
   133c4:	str	r0, [fp, #-40]	; 0xffffffd8
   133c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   133cc:	cmn	r3, #1
   133d0:	bne	1340c <__assert_fail@plt+0x1f18>
   133d4:	bl	113bc <__errno_location@plt>
   133d8:	mov	r3, r0
   133dc:	ldr	r4, [r3]
   133e0:	ldr	r3, [pc, #332]	; 13534 <__assert_fail@plt+0x2040>
   133e4:	ldr	r3, [r3]
   133e8:	mov	r2, r3
   133ec:	mov	r1, #3
   133f0:	mov	r0, #0
   133f4:	bl	18f00 <__assert_fail@plt+0x7a0c>
   133f8:	mov	r3, r0
   133fc:	ldr	r2, [pc, #308]	; 13538 <__assert_fail@plt+0x2044>
   13400:	mov	r1, r4
   13404:	mov	r0, #1
   13408:	bl	112d8 <error@plt>
   1340c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13410:	str	r3, [fp, #-20]	; 0xffffffec
   13414:	ldr	r3, [fp, #-20]	; 0xffffffec
   13418:	str	r3, [fp, #-16]
   1341c:	ldr	r2, [fp, #-16]
   13420:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13424:	add	r3, r2, r3
   13428:	str	r3, [fp, #-44]	; 0xffffffd4
   1342c:	ldr	r3, [pc, #264]	; 1353c <__assert_fail@plt+0x2048>
   13430:	ldr	r3, [r3]
   13434:	uxtb	r2, r3
   13438:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1343c:	strb	r2, [r3]
   13440:	ldr	r3, [pc, #244]	; 1353c <__assert_fail@plt+0x2048>
   13444:	ldr	r3, [r3]
   13448:	mov	r1, r3
   1344c:	ldr	r0, [fp, #-16]
   13450:	bl	11248 <rawmemchr@plt>
   13454:	str	r0, [fp, #-16]
   13458:	ldr	r2, [fp, #-16]
   1345c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13460:	cmp	r2, r3
   13464:	bne	134a8 <__assert_fail@plt+0x1fb4>
   13468:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1346c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13470:	cmp	r2, r3
   13474:	beq	13518 <__assert_fail@plt+0x2024>
   13478:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1347c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13480:	sub	r3, r2, r3
   13484:	str	r3, [fp, #-48]	; 0xffffffd0
   13488:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1348c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13490:	ldr	r1, [fp, #-20]	; 0xffffffec
   13494:	mov	r0, r3
   13498:	bl	12eac <__assert_fail@plt+0x19b8>
   1349c:	mov	r3, #0
   134a0:	strb	r3, [fp, #-21]	; 0xffffffeb
   134a4:	b	13518 <__assert_fail@plt+0x2024>
   134a8:	ldr	r3, [fp, #-16]
   134ac:	add	r3, r3, #1
   134b0:	str	r3, [fp, #-16]
   134b4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   134b8:	adds	r2, r2, #1
   134bc:	adc	r3, r3, #0
   134c0:	strd	r2, [fp, #-36]	; 0xffffffdc
   134c4:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   134c8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   134cc:	cmp	r1, r3
   134d0:	cmpeq	r0, r2
   134d4:	bcc	13440 <__assert_fail@plt+0x1f4c>
   134d8:	ldr	r2, [fp, #-16]
   134dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   134e0:	sub	r3, r2, r3
   134e4:	mov	r2, r3
   134e8:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   134ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   134f0:	mov	r0, r3
   134f4:	bl	12eac <__assert_fail@plt+0x19b8>
   134f8:	ldr	r3, [fp, #-16]
   134fc:	str	r3, [fp, #-20]	; 0xffffffec
   13500:	mov	r3, #1
   13504:	strb	r3, [fp, #-21]	; 0xffffffeb
   13508:	mov	r2, #0
   1350c:	mov	r3, #0
   13510:	strd	r2, [fp, #-36]	; 0xffffffdc
   13514:	b	13440 <__assert_fail@plt+0x1f4c>
   13518:	nop			; (mov r0, r0)
   1351c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13520:	cmp	r3, #0
   13524:	bne	133b4 <__assert_fail@plt+0x1ec0>
   13528:	nop			; (mov r0, r0)
   1352c:	sub	sp, fp, #8
   13530:	pop	{r4, fp, pc}
   13534:	andeq	pc, r2, r4, lsr #9
   13538:	andeq	sp, r1, r0, lsl #23
   1353c:	andeq	pc, r2, r4, ror #2
   13540:	push	{r4, fp, lr}
   13544:	add	fp, sp, #8
   13548:	sub	sp, sp, #84	; 0x54
   1354c:	strd	r0, [fp, #-84]	; 0xffffffac
   13550:	str	r2, [fp, #-88]	; 0xffffffa8
   13554:	str	r3, [fp, #-92]	; 0xffffffa4
   13558:	mov	r2, #0
   1355c:	mov	r3, #0
   13560:	strd	r2, [fp, #-20]	; 0xffffffec
   13564:	mov	r3, #0
   13568:	str	r3, [fp, #-24]	; 0xffffffe8
   1356c:	mov	r3, #0
   13570:	str	r3, [fp, #-28]	; 0xffffffe4
   13574:	mov	r3, #0
   13578:	str	r3, [fp, #-32]	; 0xffffffe0
   1357c:	mov	r3, #0
   13580:	strb	r3, [fp, #-33]	; 0xffffffdf
   13584:	ldr	r2, [fp, #-92]	; 0xffffffa4
   13588:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1358c:	mov	r0, #0
   13590:	bl	1919c <__assert_fail@plt+0x7ca8>
   13594:	str	r0, [fp, #-60]	; 0xffffffc4
   13598:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1359c:	cmn	r3, #1
   135a0:	bne	135dc <__assert_fail@plt+0x20e8>
   135a4:	bl	113bc <__errno_location@plt>
   135a8:	mov	r3, r0
   135ac:	ldr	r4, [r3]
   135b0:	ldr	r3, [pc, #1124]	; 13a1c <__assert_fail@plt+0x2528>
   135b4:	ldr	r3, [r3]
   135b8:	mov	r2, r3
   135bc:	mov	r1, #3
   135c0:	mov	r0, #0
   135c4:	bl	18f00 <__assert_fail@plt+0x7a0c>
   135c8:	mov	r3, r0
   135cc:	ldr	r2, [pc, #1100]	; 13a20 <__assert_fail@plt+0x252c>
   135d0:	mov	r1, r4
   135d4:	mov	r0, #1
   135d8:	bl	112d8 <error@plt>
   135dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   135e0:	str	r3, [fp, #-40]	; 0xffffffd8
   135e4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   135e8:	str	r3, [fp, #-44]	; 0xffffffd4
   135ec:	b	139b8 <__assert_fail@plt+0x24c4>
   135f0:	mov	r3, #0
   135f4:	str	r3, [fp, #-48]	; 0xffffffd0
   135f8:	mov	r3, #0
   135fc:	str	r3, [fp, #-52]	; 0xffffffcc
   13600:	ldrd	r0, [fp, #-84]	; 0xffffffac
   13604:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13608:	subs	r0, r0, r2
   1360c:	sbc	r1, r1, r3
   13610:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13614:	mov	r2, r3
   13618:	mov	r3, #0
   1361c:	subs	r0, r0, r2
   13620:	sbc	r1, r1, r3
   13624:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13628:	mov	r2, r3
   1362c:	mov	r3, #0
   13630:	cmp	r1, r3
   13634:	cmpeq	r0, r2
   13638:	bhi	13688 <__assert_fail@plt+0x2194>
   1363c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13640:	ldr	r3, [fp, #-20]	; 0xffffffec
   13644:	sub	r2, r2, r3
   13648:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1364c:	sub	r3, r2, r3
   13650:	str	r3, [fp, #-48]	; 0xffffffd0
   13654:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13658:	sub	r3, r3, #1
   1365c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13660:	add	r3, r2, r3
   13664:	str	r3, [fp, #-52]	; 0xffffffcc
   13668:	ldr	r3, [pc, #948]	; 13a24 <__assert_fail@plt+0x2530>
   1366c:	ldr	r3, [r3]
   13670:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13674:	mov	r1, r3
   13678:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1367c:	bl	11398 <memrchr@plt>
   13680:	str	r0, [fp, #-56]	; 0xffffffc8
   13684:	b	136a4 <__assert_fail@plt+0x21b0>
   13688:	ldr	r3, [pc, #916]	; 13a24 <__assert_fail@plt+0x2530>
   1368c:	ldr	r3, [r3]
   13690:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13694:	mov	r1, r3
   13698:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1369c:	bl	11398 <memrchr@plt>
   136a0:	str	r0, [fp, #-56]	; 0xffffffc8
   136a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   136a8:	cmp	r3, #0
   136ac:	beq	13740 <__assert_fail@plt+0x224c>
   136b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   136b4:	cmp	r3, #0
   136b8:	bne	136c8 <__assert_fail@plt+0x21d4>
   136bc:	ldrd	r2, [fp, #-20]	; 0xffffffec
   136c0:	orrs	r3, r2, r3
   136c4:	bne	13740 <__assert_fail@plt+0x224c>
   136c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   136cc:	ldr	r3, [fp, #-16]
   136d0:	orr	r3, r2, r3
   136d4:	cmp	r3, #0
   136d8:	moveq	r3, #1
   136dc:	movne	r3, #0
   136e0:	uxtb	r3, r3
   136e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   136e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   136ec:	mov	r0, r3
   136f0:	bl	12eac <__assert_fail@plt+0x19b8>
   136f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   136f8:	mov	r2, r3
   136fc:	mov	r3, #0
   13700:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13704:	adds	r2, r2, r0
   13708:	adc	r3, r3, r1
   1370c:	strd	r2, [fp, #-20]	; 0xffffffec
   13710:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13714:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13718:	cmp	r2, r3
   1371c:	bls	13730 <__assert_fail@plt+0x223c>
   13720:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13724:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13728:	bl	1a024 <__assert_fail@plt+0x8b30>
   1372c:	str	r0, [fp, #-28]	; 0xffffffe4
   13730:	mov	r3, #0
   13734:	str	r3, [fp, #-24]	; 0xffffffe8
   13738:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1373c:	str	r3, [fp, #-32]	; 0xffffffe0
   13740:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13744:	cmp	r3, #0
   13748:	beq	137ec <__assert_fail@plt+0x22f8>
   1374c:	mov	r3, #1
   13750:	strb	r3, [fp, #-33]	; 0xffffffdf
   13754:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13758:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1375c:	sub	r3, r2, r3
   13760:	add	r3, r3, #1
   13764:	str	r3, [fp, #-64]	; 0xffffffc0
   13768:	ldr	r2, [fp, #-20]	; 0xffffffec
   1376c:	ldr	r3, [fp, #-16]
   13770:	orr	r3, r2, r3
   13774:	cmp	r3, #0
   13778:	moveq	r3, #1
   1377c:	movne	r3, #0
   13780:	uxtb	r3, r3
   13784:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13788:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1378c:	mov	r0, r3
   13790:	bl	12eac <__assert_fail@plt+0x19b8>
   13794:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13798:	mov	r2, r3
   1379c:	mov	r3, #0
   137a0:	ldrd	r0, [fp, #-20]	; 0xffffffec
   137a4:	adds	r2, r2, r0
   137a8:	adc	r3, r3, r1
   137ac:	strd	r2, [fp, #-20]	; 0xffffffec
   137b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   137b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   137b8:	sub	r3, r2, r3
   137bc:	str	r3, [fp, #-40]	; 0xffffffd8
   137c0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   137c4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   137c8:	add	r3, r2, r3
   137cc:	str	r3, [fp, #-44]	; 0xffffffd4
   137d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   137d4:	cmp	r3, #0
   137d8:	beq	137ec <__assert_fail@plt+0x22f8>
   137dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   137e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   137e4:	sub	r3, r2, r3
   137e8:	str	r3, [fp, #-48]	; 0xffffffd0
   137ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   137f0:	cmp	r3, #0
   137f4:	beq	138ac <__assert_fail@plt+0x23b8>
   137f8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   137fc:	eor	r3, r3, #1
   13800:	uxtb	r3, r3
   13804:	cmp	r3, #0
   13808:	beq	138ac <__assert_fail@plt+0x23b8>
   1380c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13810:	cmp	r3, #0
   13814:	beq	13820 <__assert_fail@plt+0x232c>
   13818:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1381c:	b	13824 <__assert_fail@plt+0x2330>
   13820:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13824:	str	r3, [fp, #-68]	; 0xffffffbc
   13828:	ldr	r2, [fp, #-20]	; 0xffffffec
   1382c:	ldr	r3, [fp, #-16]
   13830:	orr	r3, r2, r3
   13834:	cmp	r3, #0
   13838:	moveq	r3, #1
   1383c:	movne	r3, #0
   13840:	uxtb	r3, r3
   13844:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13848:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1384c:	mov	r0, r3
   13850:	bl	12eac <__assert_fail@plt+0x19b8>
   13854:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13858:	mov	r2, r3
   1385c:	mov	r3, #0
   13860:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13864:	adds	r2, r2, r0
   13868:	adc	r3, r3, r1
   1386c:	strd	r2, [fp, #-20]	; 0xffffffec
   13870:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13874:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13878:	sub	r3, r2, r3
   1387c:	str	r3, [fp, #-40]	; 0xffffffd8
   13880:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13884:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13888:	add	r3, r2, r3
   1388c:	str	r3, [fp, #-44]	; 0xffffffd4
   13890:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13894:	cmp	r3, #0
   13898:	beq	138ac <__assert_fail@plt+0x23b8>
   1389c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   138a0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   138a4:	sub	r3, r2, r3
   138a8:	str	r3, [fp, #-48]	; 0xffffffd0
   138ac:	ldr	r3, [fp, #-52]	; 0xffffffcc
   138b0:	cmp	r3, #0
   138b4:	beq	138c4 <__assert_fail@plt+0x23d0>
   138b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138bc:	cmp	r3, #0
   138c0:	bne	138dc <__assert_fail@plt+0x23e8>
   138c4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   138c8:	cmp	r3, #0
   138cc:	bne	13998 <__assert_fail@plt+0x24a4>
   138d0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   138d4:	cmp	r3, #0
   138d8:	beq	13998 <__assert_fail@plt+0x24a4>
   138dc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   138e0:	cmp	r3, #0
   138e4:	beq	138f0 <__assert_fail@plt+0x23fc>
   138e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138ec:	b	138f4 <__assert_fail@plt+0x2400>
   138f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   138f4:	str	r3, [fp, #-72]	; 0xffffffb8
   138f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   138fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13900:	sub	r2, r2, r3
   13904:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13908:	cmp	r2, r3
   1390c:	bcs	1394c <__assert_fail@plt+0x2458>
   13910:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13914:	mvn	r2, r3
   13918:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1391c:	cmp	r2, r3
   13920:	bcc	13948 <__assert_fail@plt+0x2454>
   13924:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13928:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1392c:	add	r3, r2, r3
   13930:	str	r3, [fp, #-32]	; 0xffffffe0
   13934:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13938:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1393c:	bl	1a024 <__assert_fail@plt+0x8b30>
   13940:	str	r0, [fp, #-28]	; 0xffffffe4
   13944:	b	1394c <__assert_fail@plt+0x2458>
   13948:	bl	1aab0 <__assert_fail@plt+0x95bc>
   1394c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13950:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13954:	add	r3, r2, r3
   13958:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1395c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13960:	mov	r0, r3
   13964:	bl	111dc <memcpy@plt>
   13968:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1396c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13970:	add	r3, r2, r3
   13974:	str	r3, [fp, #-24]	; 0xffffffe8
   13978:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1397c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13980:	sub	r3, r2, r3
   13984:	str	r3, [fp, #-40]	; 0xffffffd8
   13988:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1398c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13990:	add	r3, r2, r3
   13994:	str	r3, [fp, #-44]	; 0xffffffd4
   13998:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1399c:	cmp	r3, #0
   139a0:	beq	139b8 <__assert_fail@plt+0x24c4>
   139a4:	mov	r2, #0
   139a8:	mov	r3, #0
   139ac:	strd	r2, [fp, #-20]	; 0xffffffec
   139b0:	mov	r3, #0
   139b4:	strb	r3, [fp, #-33]	; 0xffffffdf
   139b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   139bc:	cmp	r3, #0
   139c0:	bne	135f0 <__assert_fail@plt+0x20fc>
   139c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   139c8:	cmp	r3, #0
   139cc:	bne	13584 <__assert_fail@plt+0x2090>
   139d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   139d4:	cmp	r3, #0
   139d8:	beq	13a08 <__assert_fail@plt+0x2514>
   139dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   139e0:	ldr	r3, [fp, #-16]
   139e4:	orr	r3, r2, r3
   139e8:	cmp	r3, #0
   139ec:	moveq	r3, #1
   139f0:	movne	r3, #0
   139f4:	uxtb	r3, r3
   139f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   139fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13a00:	mov	r0, r3
   13a04:	bl	12eac <__assert_fail@plt+0x19b8>
   13a08:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13a0c:	bl	1677c <__assert_fail@plt+0x5288>
   13a10:	nop			; (mov r0, r0)
   13a14:	sub	sp, fp, #8
   13a18:	pop	{r4, fp, pc}
   13a1c:	andeq	pc, r2, r4, lsr #9
   13a20:	andeq	sp, r1, r0, lsl #23
   13a24:	andeq	pc, r2, r4, ror #2
   13a28:	push	{r4, fp, lr}
   13a2c:	add	fp, sp, #8
   13a30:	sub	sp, sp, #116	; 0x74
   13a34:	strd	r0, [fp, #-108]	; 0xffffff94
   13a38:	strd	r2, [fp, #-116]	; 0xffffff8c
   13a3c:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   13a40:	orrs	r3, r2, r3
   13a44:	beq	13a70 <__assert_fail@plt+0x257c>
   13a48:	ldrd	r0, [fp, #-108]	; 0xffffff94
   13a4c:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   13a50:	cmp	r1, r3
   13a54:	cmpeq	r0, r2
   13a58:	bhi	13a70 <__assert_fail@plt+0x257c>
   13a5c:	ldrd	r2, [fp, #20]
   13a60:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   13a64:	cmp	r1, r3
   13a68:	cmpeq	r0, r2
   13a6c:	bls	13a84 <__assert_fail@plt+0x2590>
   13a70:	ldr	r3, [pc, #1468]	; 14034 <__assert_fail@plt+0x2b40>
   13a74:	ldr	r2, [pc, #1468]	; 14038 <__assert_fail@plt+0x2b44>
   13a78:	ldr	r1, [pc, #1468]	; 1403c <__assert_fail@plt+0x2b48>
   13a7c:	ldr	r0, [pc, #1468]	; 14040 <__assert_fail@plt+0x2b4c>
   13a80:	bl	114f4 <__assert_fail@plt>
   13a84:	ldrd	r0, [fp, #20]
   13a88:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   13a8c:	bl	1cb68 <__assert_fail@plt+0xb674>
   13a90:	mov	r2, r0
   13a94:	mov	r3, r1
   13a98:	strd	r2, [fp, #-68]	; 0xffffffbc
   13a9c:	mov	r2, #1
   13aa0:	mov	r3, #0
   13aa4:	strd	r2, [fp, #-20]	; 0xffffffec
   13aa8:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   13aac:	subs	r2, r2, #1
   13ab0:	sbc	r3, r3, #0
   13ab4:	strd	r2, [fp, #-28]	; 0xffffffe4
   13ab8:	mov	r2, #0
   13abc:	mov	r3, #0
   13ac0:	strd	r2, [fp, #-36]	; 0xffffffdc
   13ac4:	mov	r3, #1
   13ac8:	strb	r3, [fp, #-37]	; 0xffffffdb
   13acc:	mov	r3, #0
   13ad0:	strb	r3, [fp, #-38]	; 0xffffffda
   13ad4:	ldrd	r2, [fp, #-108]	; 0xffffff94
   13ad8:	cmp	r3, #0
   13adc:	cmpeq	r2, #1
   13ae0:	bls	13fac <__assert_fail@plt+0x2ab8>
   13ae4:	ldrd	r2, [fp, #-108]	; 0xffffff94
   13ae8:	subs	r0, r2, #1
   13aec:	sbc	r1, r3, #0
   13af0:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   13af4:	mul	lr, r2, r1
   13af8:	mul	ip, r0, r3
   13afc:	add	ip, lr, ip
   13b00:	umull	r2, r3, r0, r2
   13b04:	add	r1, ip, r3
   13b08:	mov	r3, r1
   13b0c:	subs	r2, r2, #1
   13b10:	sbc	r3, r3, #0
   13b14:	strd	r2, [fp, #-76]	; 0xffffffb4
   13b18:	ldr	r3, [fp, #12]
   13b1c:	mov	r2, r3
   13b20:	mov	r3, #0
   13b24:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   13b28:	cmp	r0, r2
   13b2c:	sbcs	r3, r1, r3
   13b30:	bge	13b6c <__assert_fail@plt+0x2678>
   13b34:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13b38:	ldr	r2, [fp, #4]
   13b3c:	add	r1, r2, r3
   13b40:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13b44:	ldr	r2, [fp, #12]
   13b48:	sub	r3, r2, r3
   13b4c:	mov	r2, r3
   13b50:	ldr	r0, [fp, #4]
   13b54:	bl	111b8 <memmove@plt>
   13b58:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13b5c:	ldr	r2, [fp, #12]
   13b60:	sub	r3, r2, r3
   13b64:	str	r3, [fp, #12]
   13b68:	b	13be8 <__assert_fail@plt+0x26f4>
   13b6c:	ldr	r3, [fp, #12]
   13b70:	mov	r2, r3
   13b74:	mov	r3, #0
   13b78:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   13b7c:	subs	r2, r0, r2
   13b80:	sbc	r3, r1, r3
   13b84:	mov	r1, #1
   13b88:	str	r1, [sp]
   13b8c:	mov	r0, #0
   13b90:	bl	11284 <lseek64@plt>
   13b94:	mov	r2, r0
   13b98:	mov	r3, r1
   13b9c:	cmp	r2, #0
   13ba0:	sbcs	r3, r3, #0
   13ba4:	bge	13be0 <__assert_fail@plt+0x26ec>
   13ba8:	bl	113bc <__errno_location@plt>
   13bac:	mov	r3, r0
   13bb0:	ldr	r4, [r3]
   13bb4:	ldr	r3, [pc, #1160]	; 14044 <__assert_fail@plt+0x2b50>
   13bb8:	ldr	r3, [r3]
   13bbc:	mov	r2, r3
   13bc0:	mov	r1, #3
   13bc4:	mov	r0, #0
   13bc8:	bl	18f00 <__assert_fail@plt+0x7a0c>
   13bcc:	mov	r3, r0
   13bd0:	ldr	r2, [pc, #1136]	; 14048 <__assert_fail@plt+0x2b54>
   13bd4:	mov	r1, r4
   13bd8:	mov	r0, #1
   13bdc:	bl	112d8 <error@plt>
   13be0:	mvn	r3, #0
   13be4:	str	r3, [fp, #12]
   13be8:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   13bec:	strd	r2, [fp, #-36]	; 0xffffffdc
   13bf0:	ldrd	r2, [fp, #-108]	; 0xffffff94
   13bf4:	subs	r2, r2, #1
   13bf8:	sbc	r3, r3, #0
   13bfc:	strd	r2, [fp, #-20]	; 0xffffffec
   13c00:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   13c04:	ldr	r1, [fp, #-20]	; 0xffffffec
   13c08:	mul	r0, r3, r1
   13c0c:	ldr	r1, [fp, #-16]
   13c10:	mul	r1, r2, r1
   13c14:	add	r1, r0, r1
   13c18:	ldr	r0, [fp, #-20]	; 0xffffffec
   13c1c:	umull	r2, r3, r0, r2
   13c20:	add	r1, r1, r3
   13c24:	mov	r3, r1
   13c28:	subs	r2, r2, #1
   13c2c:	sbc	r3, r3, #0
   13c30:	strd	r2, [fp, #-28]	; 0xffffffe4
   13c34:	b	13fac <__assert_fail@plt+0x2ab8>
   13c38:	ldr	r3, [fp, #4]
   13c3c:	str	r3, [fp, #-44]	; 0xffffffd4
   13c40:	ldr	r3, [fp, #12]
   13c44:	cmn	r3, #1
   13c48:	beq	13c60 <__assert_fail@plt+0x276c>
   13c4c:	ldr	r3, [fp, #12]
   13c50:	str	r3, [fp, #-48]	; 0xffffffd0
   13c54:	mvn	r3, #0
   13c58:	str	r3, [fp, #12]
   13c5c:	b	13cb8 <__assert_fail@plt+0x27c4>
   13c60:	ldr	r2, [fp, #8]
   13c64:	ldr	r1, [fp, #4]
   13c68:	mov	r0, #0
   13c6c:	bl	1919c <__assert_fail@plt+0x7ca8>
   13c70:	str	r0, [fp, #-48]	; 0xffffffd0
   13c74:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c78:	cmn	r3, #1
   13c7c:	bne	13cb8 <__assert_fail@plt+0x27c4>
   13c80:	bl	113bc <__errno_location@plt>
   13c84:	mov	r3, r0
   13c88:	ldr	r4, [r3]
   13c8c:	ldr	r3, [pc, #944]	; 14044 <__assert_fail@plt+0x2b50>
   13c90:	ldr	r3, [r3]
   13c94:	mov	r2, r3
   13c98:	mov	r1, #3
   13c9c:	mov	r0, #0
   13ca0:	bl	18f00 <__assert_fail@plt+0x7a0c>
   13ca4:	mov	r3, r0
   13ca8:	ldr	r2, [pc, #920]	; 14048 <__assert_fail@plt+0x2b54>
   13cac:	mov	r1, r4
   13cb0:	mov	r0, #1
   13cb4:	bl	112d8 <error@plt>
   13cb8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13cbc:	cmp	r3, #0
   13cc0:	beq	13fc4 <__assert_fail@plt+0x2ad0>
   13cc4:	ldrd	r0, [fp, #20]
   13cc8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13ccc:	subs	r0, r0, r2
   13cd0:	sbc	r1, r1, r3
   13cd4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13cd8:	mov	r2, r3
   13cdc:	mov	r3, #0
   13ce0:	cmp	r2, r0
   13ce4:	sbcs	ip, r3, r1
   13ce8:	bge	13cf4 <__assert_fail@plt+0x2800>
   13cec:	mov	r0, r2
   13cf0:	mov	r1, r3
   13cf4:	mov	r3, r0
   13cf8:	str	r3, [fp, #-48]	; 0xffffffd0
   13cfc:	mov	r3, #0
   13d00:	strb	r3, [fp, #-38]	; 0xffffffda
   13d04:	ldr	r2, [fp, #4]
   13d08:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d0c:	add	r3, r2, r3
   13d10:	str	r3, [fp, #-80]	; 0xffffffb0
   13d14:	b	13f9c <__assert_fail@plt+0x2aa8>
   13d18:	mov	r3, #0
   13d1c:	strb	r3, [fp, #-49]	; 0xffffffcf
   13d20:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   13d24:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13d28:	subs	r2, r0, r2
   13d2c:	sbc	r3, r1, r3
   13d30:	cmp	r2, #0
   13d34:	sbcs	r1, r3, #0
   13d38:	bge	13d44 <__assert_fail@plt+0x2850>
   13d3c:	mov	r2, #0
   13d40:	mov	r3, #0
   13d44:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13d48:	mov	r0, r1
   13d4c:	mov	r1, #0
   13d50:	cmp	r0, r2
   13d54:	sbcs	ip, r1, r3
   13d58:	bge	13d64 <__assert_fail@plt+0x2870>
   13d5c:	mov	r2, r0
   13d60:	mov	r3, r1
   13d64:	strd	r2, [fp, #-92]	; 0xffffffa4
   13d68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13d6c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13d70:	add	r0, r2, r3
   13d74:	ldr	r3, [pc, #720]	; 1404c <__assert_fail@plt+0x2b58>
   13d78:	ldr	r1, [r3]
   13d7c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13d80:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13d84:	sub	r3, r2, r3
   13d88:	mov	r2, r3
   13d8c:	bl	11404 <memchr@plt>
   13d90:	str	r0, [fp, #-56]	; 0xffffffc8
   13d94:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13d98:	cmp	r3, #0
   13d9c:	beq	13db8 <__assert_fail@plt+0x28c4>
   13da0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13da4:	add	r3, r3, #1
   13da8:	str	r3, [fp, #-56]	; 0xffffffc8
   13dac:	mov	r3, #1
   13db0:	strb	r3, [fp, #-49]	; 0xffffffcf
   13db4:	b	13dc0 <__assert_fail@plt+0x28cc>
   13db8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13dbc:	str	r3, [fp, #-56]	; 0xffffffc8
   13dc0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13dc4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13dc8:	sub	r3, r2, r3
   13dcc:	str	r3, [fp, #-96]	; 0xffffffa0
   13dd0:	ldrd	r0, [fp, #-108]	; 0xffffff94
   13dd4:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13dd8:	cmp	r1, r3
   13ddc:	cmpeq	r0, r2
   13de0:	bne	13e2c <__assert_fail@plt+0x2938>
   13de4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13de8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13dec:	mov	r0, #1
   13df0:	bl	168ec <__assert_fail@plt+0x53f8>
   13df4:	mov	r2, r0
   13df8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13dfc:	cmp	r2, r3
   13e00:	beq	13e4c <__assert_fail@plt+0x2958>
   13e04:	bl	113bc <__errno_location@plt>
   13e08:	mov	r3, r0
   13e0c:	ldr	r4, [r3]
   13e10:	ldr	r0, [pc, #568]	; 14050 <__assert_fail@plt+0x2b5c>
   13e14:	bl	1135c <gettext@plt>
   13e18:	mov	r3, r0
   13e1c:	ldr	r2, [pc, #548]	; 14048 <__assert_fail@plt+0x2b54>
   13e20:	mov	r1, r4
   13e24:	mov	r0, #1
   13e28:	bl	112d8 <error@plt>
   13e2c:	ldrd	r2, [fp, #-108]	; 0xffffff94
   13e30:	orrs	r3, r2, r3
   13e34:	bne	13e4c <__assert_fail@plt+0x2958>
   13e38:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13e3c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13e40:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13e44:	mov	r0, r3
   13e48:	bl	12eac <__assert_fail@plt+0x19b8>
   13e4c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13e50:	mov	r2, r3
   13e54:	mov	r3, #0
   13e58:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   13e5c:	adds	r2, r2, r0
   13e60:	adc	r3, r3, r1
   13e64:	strd	r2, [fp, #-36]	; 0xffffffdc
   13e68:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13e6c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13e70:	add	r3, r2, r3
   13e74:	str	r3, [fp, #-44]	; 0xffffffd4
   13e78:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13e7c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13e80:	sub	r3, r2, r3
   13e84:	str	r3, [fp, #-48]	; 0xffffffd0
   13e88:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13e8c:	strb	r3, [fp, #-37]	; 0xffffffdb
   13e90:	b	13f74 <__assert_fail@plt+0x2a80>
   13e94:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13e98:	eor	r3, r3, #1
   13e9c:	uxtb	r3, r3
   13ea0:	cmp	r3, #0
   13ea4:	beq	13ec4 <__assert_fail@plt+0x29d0>
   13ea8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13eac:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13eb0:	cmp	r2, r3
   13eb4:	bne	13ec4 <__assert_fail@plt+0x29d0>
   13eb8:	mov	r3, #1
   13ebc:	strb	r3, [fp, #-38]	; 0xffffffda
   13ec0:	b	13f9c <__assert_fail@plt+0x2aa8>
   13ec4:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13ec8:	adds	r2, r2, #1
   13ecc:	adc	r3, r3, #0
   13ed0:	strd	r2, [fp, #-20]	; 0xffffffec
   13ed4:	ldrd	r2, [fp, #-108]	; 0xffffff94
   13ed8:	orrs	r3, r2, r3
   13edc:	beq	13ef4 <__assert_fail@plt+0x2a00>
   13ee0:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13ee4:	ldrd	r2, [fp, #-108]	; 0xffffff94
   13ee8:	cmp	r1, r3
   13eec:	cmpeq	r0, r2
   13ef0:	bhi	14028 <__assert_fail@plt+0x2b34>
   13ef4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13ef8:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   13efc:	cmp	r1, r3
   13f00:	cmpeq	r0, r2
   13f04:	bne	13f1c <__assert_fail@plt+0x2a28>
   13f08:	ldrd	r2, [fp, #20]
   13f0c:	subs	r2, r2, #1
   13f10:	sbc	r3, r3, #0
   13f14:	strd	r2, [fp, #-28]	; 0xffffffe4
   13f18:	b	13f30 <__assert_fail@plt+0x2a3c>
   13f1c:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   13f20:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   13f24:	adds	r2, r2, r0
   13f28:	adc	r3, r3, r1
   13f2c:	strd	r2, [fp, #-28]	; 0xffffffe4
   13f30:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13f34:	subs	r0, r2, #1
   13f38:	sbc	r1, r3, #0
   13f3c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13f40:	cmp	r0, r2
   13f44:	sbcs	r3, r1, r3
   13f48:	blt	13f6c <__assert_fail@plt+0x2a78>
   13f4c:	ldrd	r2, [fp, #-108]	; 0xffffff94
   13f50:	orrs	r3, r2, r3
   13f54:	bne	13f74 <__assert_fail@plt+0x2a80>
   13f58:	mov	r2, #0
   13f5c:	mov	r1, #0
   13f60:	mov	r0, #1
   13f64:	bl	12eac <__assert_fail@plt+0x19b8>
   13f68:	b	13f74 <__assert_fail@plt+0x2a80>
   13f6c:	mov	r3, #0
   13f70:	strb	r3, [fp, #-49]	; 0xffffffcf
   13f74:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13f78:	cmp	r3, #0
   13f7c:	bne	13e94 <__assert_fail@plt+0x29a0>
   13f80:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13f84:	subs	r0, r2, #1
   13f88:	sbc	r1, r3, #0
   13f8c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13f90:	cmp	r0, r2
   13f94:	sbcs	r3, r1, r3
   13f98:	bge	13e94 <__assert_fail@plt+0x29a0>
   13f9c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13fa0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13fa4:	cmp	r2, r3
   13fa8:	bne	13d18 <__assert_fail@plt+0x2824>
   13fac:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   13fb0:	ldrd	r2, [fp, #20]
   13fb4:	cmp	r0, r2
   13fb8:	sbcs	r3, r1, r3
   13fbc:	blt	13c38 <__assert_fail@plt+0x2744>
   13fc0:	b	13fc8 <__assert_fail@plt+0x2ad4>
   13fc4:	nop			; (mov r0, r0)
   13fc8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13fcc:	cmp	r3, #0
   13fd0:	beq	13ff8 <__assert_fail@plt+0x2b04>
   13fd4:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13fd8:	adds	r2, r2, #1
   13fdc:	adc	r3, r3, #0
   13fe0:	strd	r2, [fp, #-20]	; 0xffffffec
   13fe4:	b	13ff8 <__assert_fail@plt+0x2b04>
   13fe8:	mov	r2, #0
   13fec:	mov	r1, #0
   13ff0:	mov	r0, #1
   13ff4:	bl	12eac <__assert_fail@plt+0x19b8>
   13ff8:	ldrd	r2, [fp, #-108]	; 0xffffff94
   13ffc:	orrs	r3, r2, r3
   14000:	bne	1402c <__assert_fail@plt+0x2b38>
   14004:	ldrd	r2, [fp, #-20]	; 0xffffffec
   14008:	adds	r0, r2, #1
   1400c:	adc	r1, r3, #0
   14010:	strd	r0, [fp, #-20]	; 0xffffffec
   14014:	ldrd	r0, [fp, #-116]	; 0xffffff8c
   14018:	cmp	r3, r1
   1401c:	cmpeq	r2, r0
   14020:	bls	13fe8 <__assert_fail@plt+0x2af4>
   14024:	b	1402c <__assert_fail@plt+0x2b38>
   14028:	nop			; (mov r0, r0)
   1402c:	sub	sp, fp, #8
   14030:	pop	{r4, fp, pc}
   14034:			; <UNDEFINED> instruction: 0x0001dfb4
   14038:	andeq	r0, r0, r3, ror #6
   1403c:	andeq	sp, r1, ip, asr #19
   14040:	andeq	sp, r1, ip, lsl ip
   14044:	andeq	pc, r2, r4, lsr #9
   14048:	andeq	sp, r1, r0, lsl #23
   1404c:	andeq	pc, r2, r4, ror #2
   14050:	andeq	sp, r1, ip, lsr ip
   14054:	push	{r4, r5, fp, lr}
   14058:	add	fp, sp, #12
   1405c:	sub	sp, sp, #48	; 0x30
   14060:	strd	r0, [fp, #-44]	; 0xffffffd4
   14064:	strd	r2, [fp, #-52]	; 0xffffffcc
   14068:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1406c:	orrs	r3, r2, r3
   14070:	beq	140a8 <__assert_fail@plt+0x2bb4>
   14074:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   14078:	orrs	r3, r2, r3
   1407c:	beq	140a8 <__assert_fail@plt+0x2bb4>
   14080:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   14084:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   14088:	cmp	r1, r3
   1408c:	cmpeq	r0, r2
   14090:	bhi	140a8 <__assert_fail@plt+0x2bb4>
   14094:	ldrd	r2, [fp, #20]
   14098:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   1409c:	cmp	r1, r3
   140a0:	cmpeq	r0, r2
   140a4:	bls	140bc <__assert_fail@plt+0x2bc8>
   140a8:	ldr	r3, [pc, #748]	; 1439c <__assert_fail@plt+0x2ea8>
   140ac:	mov	r2, #996	; 0x3e4
   140b0:	ldr	r1, [pc, #744]	; 143a0 <__assert_fail@plt+0x2eac>
   140b4:	ldr	r0, [pc, #744]	; 143a4 <__assert_fail@plt+0x2eb0>
   140b8:	bl	114f4 <__assert_fail@plt>
   140bc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   140c0:	subs	r4, r2, #1
   140c4:	sbc	r5, r3, #0
   140c8:	ldrd	r0, [fp, #20]
   140cc:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   140d0:	bl	1cb68 <__assert_fail@plt+0xb674>
   140d4:	mov	r2, r0
   140d8:	mov	r3, r1
   140dc:	mul	r0, r2, r5
   140e0:	mul	r1, r4, r3
   140e4:	add	r1, r0, r1
   140e8:	umull	r2, r3, r4, r2
   140ec:	add	r1, r1, r3
   140f0:	mov	r3, r1
   140f4:	strd	r2, [fp, #-20]	; 0xffffffec
   140f8:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   140fc:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   14100:	cmp	r1, r3
   14104:	cmpeq	r0, r2
   14108:	beq	14148 <__assert_fail@plt+0x2c54>
   1410c:	ldrd	r0, [fp, #20]
   14110:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   14114:	bl	1cb68 <__assert_fail@plt+0xb674>
   14118:	mov	r2, r0
   1411c:	mov	r3, r1
   14120:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14124:	mul	r0, r3, r1
   14128:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1412c:	mul	r1, r2, r1
   14130:	add	r1, r0, r1
   14134:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14138:	umull	r2, r3, r0, r2
   1413c:	add	r1, r1, r3
   14140:	mov	r3, r1
   14144:	b	1414c <__assert_fail@plt+0x2c58>
   14148:	ldrd	r2, [fp, #20]
   1414c:	strd	r2, [fp, #-36]	; 0xffffffdc
   14150:	ldr	r3, [fp, #12]
   14154:	mov	r2, r3
   14158:	mov	r3, #0
   1415c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   14160:	cmp	r0, r2
   14164:	sbcs	r3, r1, r3
   14168:	bge	141a4 <__assert_fail@plt+0x2cb0>
   1416c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14170:	ldr	r2, [fp, #4]
   14174:	add	r1, r2, r3
   14178:	ldr	r3, [fp, #-20]	; 0xffffffec
   1417c:	ldr	r2, [fp, #12]
   14180:	sub	r3, r2, r3
   14184:	mov	r2, r3
   14188:	ldr	r0, [fp, #4]
   1418c:	bl	111b8 <memmove@plt>
   14190:	ldr	r3, [fp, #-20]	; 0xffffffec
   14194:	ldr	r2, [fp, #12]
   14198:	sub	r3, r2, r3
   1419c:	str	r3, [fp, #12]
   141a0:	b	14374 <__assert_fail@plt+0x2e80>
   141a4:	ldr	r3, [fp, #12]
   141a8:	mov	r2, r3
   141ac:	mov	r3, #0
   141b0:	ldrd	r0, [fp, #-20]	; 0xffffffec
   141b4:	subs	r2, r0, r2
   141b8:	sbc	r3, r1, r3
   141bc:	mov	r1, #1
   141c0:	str	r1, [sp]
   141c4:	mov	r0, #0
   141c8:	bl	11284 <lseek64@plt>
   141cc:	mov	r2, r0
   141d0:	mov	r3, r1
   141d4:	cmp	r2, #0
   141d8:	sbcs	r3, r3, #0
   141dc:	bge	14218 <__assert_fail@plt+0x2d24>
   141e0:	bl	113bc <__errno_location@plt>
   141e4:	mov	r3, r0
   141e8:	ldr	r4, [r3]
   141ec:	ldr	r3, [pc, #436]	; 143a8 <__assert_fail@plt+0x2eb4>
   141f0:	ldr	r3, [r3]
   141f4:	mov	r2, r3
   141f8:	mov	r1, #3
   141fc:	mov	r0, #0
   14200:	bl	18f00 <__assert_fail@plt+0x7a0c>
   14204:	mov	r3, r0
   14208:	ldr	r2, [pc, #412]	; 143ac <__assert_fail@plt+0x2eb8>
   1420c:	mov	r1, r4
   14210:	mov	r0, #1
   14214:	bl	112d8 <error@plt>
   14218:	mvn	r3, #0
   1421c:	str	r3, [fp, #12]
   14220:	b	14374 <__assert_fail@plt+0x2e80>
   14224:	ldr	r3, [fp, #12]
   14228:	cmn	r3, #1
   1422c:	beq	14244 <__assert_fail@plt+0x2d50>
   14230:	ldr	r3, [fp, #12]
   14234:	str	r3, [fp, #-24]	; 0xffffffe8
   14238:	mvn	r3, #0
   1423c:	str	r3, [fp, #12]
   14240:	b	1429c <__assert_fail@plt+0x2da8>
   14244:	ldr	r2, [fp, #8]
   14248:	ldr	r1, [fp, #4]
   1424c:	mov	r0, #0
   14250:	bl	1919c <__assert_fail@plt+0x7ca8>
   14254:	str	r0, [fp, #-24]	; 0xffffffe8
   14258:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1425c:	cmn	r3, #1
   14260:	bne	1429c <__assert_fail@plt+0x2da8>
   14264:	bl	113bc <__errno_location@plt>
   14268:	mov	r3, r0
   1426c:	ldr	r4, [r3]
   14270:	ldr	r3, [pc, #304]	; 143a8 <__assert_fail@plt+0x2eb4>
   14274:	ldr	r3, [r3]
   14278:	mov	r2, r3
   1427c:	mov	r1, #3
   14280:	mov	r0, #0
   14284:	bl	18f00 <__assert_fail@plt+0x7a0c>
   14288:	mov	r3, r0
   1428c:	ldr	r2, [pc, #280]	; 143ac <__assert_fail@plt+0x2eb8>
   14290:	mov	r1, r4
   14294:	mov	r0, #1
   14298:	bl	112d8 <error@plt>
   1429c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142a0:	cmp	r3, #0
   142a4:	beq	1438c <__assert_fail@plt+0x2e98>
   142a8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   142ac:	ldrd	r2, [fp, #-20]	; 0xffffffec
   142b0:	subs	r0, r0, r2
   142b4:	sbc	r1, r1, r3
   142b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142bc:	mov	r2, r3
   142c0:	mov	r3, #0
   142c4:	cmp	r2, r0
   142c8:	sbcs	ip, r3, r1
   142cc:	bge	142d8 <__assert_fail@plt+0x2de4>
   142d0:	mov	r0, r2
   142d4:	mov	r1, r3
   142d8:	mov	r3, r0
   142dc:	str	r3, [fp, #-24]	; 0xffffffe8
   142e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   142e4:	ldr	r1, [fp, #4]
   142e8:	mov	r0, #1
   142ec:	bl	168ec <__assert_fail@plt+0x53f8>
   142f0:	mov	r2, r0
   142f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142f8:	cmp	r2, r3
   142fc:	beq	14358 <__assert_fail@plt+0x2e64>
   14300:	bl	113bc <__errno_location@plt>
   14304:	mov	r3, r0
   14308:	ldr	r3, [r3]
   1430c:	mov	r0, r3
   14310:	bl	119e0 <__assert_fail@plt+0x4ec>
   14314:	mov	r3, r0
   14318:	eor	r3, r3, #1
   1431c:	uxtb	r3, r3
   14320:	cmp	r3, #0
   14324:	beq	14358 <__assert_fail@plt+0x2e64>
   14328:	bl	113bc <__errno_location@plt>
   1432c:	mov	r3, r0
   14330:	ldr	r4, [r3]
   14334:	ldr	r2, [pc, #116]	; 143b0 <__assert_fail@plt+0x2ebc>
   14338:	mov	r1, #3
   1433c:	mov	r0, #0
   14340:	bl	18f00 <__assert_fail@plt+0x7a0c>
   14344:	mov	r3, r0
   14348:	ldr	r2, [pc, #92]	; 143ac <__assert_fail@plt+0x2eb8>
   1434c:	mov	r1, r4
   14350:	mov	r0, #1
   14354:	bl	112d8 <error@plt>
   14358:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1435c:	mov	r2, r3
   14360:	mov	r3, #0
   14364:	ldrd	r0, [fp, #-20]	; 0xffffffec
   14368:	adds	r2, r2, r0
   1436c:	adc	r3, r3, r1
   14370:	strd	r2, [fp, #-20]	; 0xffffffec
   14374:	ldrd	r0, [fp, #-20]	; 0xffffffec
   14378:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1437c:	cmp	r0, r2
   14380:	sbcs	r3, r1, r3
   14384:	blt	14224 <__assert_fail@plt+0x2d30>
   14388:	b	14390 <__assert_fail@plt+0x2e9c>
   1438c:	nop			; (mov r0, r0)
   14390:	nop			; (mov r0, r0)
   14394:	sub	sp, fp, #12
   14398:	pop	{r4, r5, fp, pc}
   1439c:	andeq	sp, r1, r8, asr #31
   143a0:	andeq	sp, r1, ip, asr #19
   143a4:	andeq	sp, r1, r8, asr #24
   143a8:	andeq	pc, r2, r4, lsr #9
   143ac:	andeq	sp, r1, r0, lsl #23
   143b0:	andeq	sp, r1, ip, ror #24
   143b4:	push	{r4, fp, lr}
   143b8:	add	fp, sp, #8
   143bc:	sub	sp, sp, #36	; 0x24
   143c0:	str	r0, [fp, #-32]	; 0xffffffe0
   143c4:	str	r1, [fp, #-36]	; 0xffffffdc
   143c8:	str	r2, [fp, #-40]	; 0xffffffd8
   143cc:	mov	r3, #0
   143d0:	strb	r3, [fp, #-13]
   143d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   143d8:	lsl	r3, r3, #4
   143dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   143e0:	add	r3, r2, r3
   143e4:	ldr	r3, [r3, #4]
   143e8:	cmp	r3, #0
   143ec:	bge	146e8 <__assert_fail@plt+0x31f4>
   143f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   143f4:	cmp	r3, #0
   143f8:	beq	14408 <__assert_fail@plt+0x2f14>
   143fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14400:	sub	r3, r3, #1
   14404:	b	14410 <__assert_fail@plt+0x2f1c>
   14408:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1440c:	sub	r3, r3, #1
   14410:	str	r3, [fp, #-24]	; 0xffffffe8
   14414:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14418:	lsl	r3, r3, #4
   1441c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14420:	add	r3, r2, r3
   14424:	ldr	r3, [r3, #4]
   14428:	cmn	r3, #1
   1442c:	bne	14454 <__assert_fail@plt+0x2f60>
   14430:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14434:	lsl	r3, r3, #4
   14438:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1443c:	add	r3, r2, r3
   14440:	ldr	r3, [r3]
   14444:	mov	r0, r3
   14448:	bl	1254c <__assert_fail@plt+0x1058>
   1444c:	str	r0, [fp, #-20]	; 0xffffffec
   14450:	b	14478 <__assert_fail@plt+0x2f84>
   14454:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14458:	lsl	r3, r3, #4
   1445c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14460:	add	r3, r2, r3
   14464:	ldr	r3, [r3]
   14468:	ldr	r1, [pc, #648]	; 146f8 <__assert_fail@plt+0x3204>
   1446c:	mov	r0, r3
   14470:	bl	165bc <__assert_fail@plt+0x50c8>
   14474:	str	r0, [fp, #-20]	; 0xffffffec
   14478:	ldr	r3, [fp, #-20]	; 0xffffffec
   1447c:	cmp	r3, #0
   14480:	bge	14630 <__assert_fail@plt+0x313c>
   14484:	bl	113bc <__errno_location@plt>
   14488:	mov	r3, r0
   1448c:	ldr	r3, [r3]
   14490:	cmp	r3, #24
   14494:	beq	144f0 <__assert_fail@plt+0x2ffc>
   14498:	bl	113bc <__errno_location@plt>
   1449c:	mov	r3, r0
   144a0:	ldr	r3, [r3]
   144a4:	cmp	r3, #23
   144a8:	beq	144f0 <__assert_fail@plt+0x2ffc>
   144ac:	bl	113bc <__errno_location@plt>
   144b0:	mov	r3, r0
   144b4:	ldr	r4, [r3]
   144b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   144bc:	lsl	r3, r3, #4
   144c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   144c4:	add	r3, r2, r3
   144c8:	ldr	r3, [r3]
   144cc:	mov	r2, r3
   144d0:	mov	r1, #3
   144d4:	mov	r0, #0
   144d8:	bl	18f00 <__assert_fail@plt+0x7a0c>
   144dc:	mov	r3, r0
   144e0:	ldr	r2, [pc, #532]	; 146fc <__assert_fail@plt+0x3208>
   144e4:	mov	r1, r4
   144e8:	mov	r0, #1
   144ec:	bl	112d8 <error@plt>
   144f0:	mov	r3, #1
   144f4:	strb	r3, [fp, #-13]
   144f8:	b	14574 <__assert_fail@plt+0x3080>
   144fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14500:	cmp	r3, #0
   14504:	beq	14514 <__assert_fail@plt+0x3020>
   14508:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1450c:	sub	r3, r3, #1
   14510:	b	1451c <__assert_fail@plt+0x3028>
   14514:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14518:	sub	r3, r3, #1
   1451c:	str	r3, [fp, #-24]	; 0xffffffe8
   14520:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14524:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14528:	cmp	r2, r3
   1452c:	bne	14574 <__assert_fail@plt+0x3080>
   14530:	bl	113bc <__errno_location@plt>
   14534:	mov	r3, r0
   14538:	ldr	r4, [r3]
   1453c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14540:	lsl	r3, r3, #4
   14544:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14548:	add	r3, r2, r3
   1454c:	ldr	r3, [r3]
   14550:	mov	r2, r3
   14554:	mov	r1, #3
   14558:	mov	r0, #0
   1455c:	bl	18f00 <__assert_fail@plt+0x7a0c>
   14560:	mov	r3, r0
   14564:	ldr	r2, [pc, #400]	; 146fc <__assert_fail@plt+0x3208>
   14568:	mov	r1, r4
   1456c:	mov	r0, #1
   14570:	bl	112d8 <error@plt>
   14574:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14578:	lsl	r3, r3, #4
   1457c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14580:	add	r3, r2, r3
   14584:	ldr	r3, [r3, #4]
   14588:	cmp	r3, #0
   1458c:	blt	144fc <__assert_fail@plt+0x3008>
   14590:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14594:	lsl	r3, r3, #4
   14598:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1459c:	add	r3, r2, r3
   145a0:	ldr	r3, [r3, #8]
   145a4:	mov	r0, r3
   145a8:	bl	164c4 <__assert_fail@plt+0x4fd0>
   145ac:	mov	r3, r0
   145b0:	cmp	r3, #0
   145b4:	beq	145fc <__assert_fail@plt+0x3108>
   145b8:	bl	113bc <__errno_location@plt>
   145bc:	mov	r3, r0
   145c0:	ldr	r4, [r3]
   145c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   145c8:	lsl	r3, r3, #4
   145cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   145d0:	add	r3, r2, r3
   145d4:	ldr	r3, [r3]
   145d8:	mov	r2, r3
   145dc:	mov	r1, #3
   145e0:	mov	r0, #0
   145e4:	bl	18f00 <__assert_fail@plt+0x7a0c>
   145e8:	mov	r3, r0
   145ec:	ldr	r2, [pc, #264]	; 146fc <__assert_fail@plt+0x3208>
   145f0:	mov	r1, r4
   145f4:	mov	r0, #1
   145f8:	bl	112d8 <error@plt>
   145fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14600:	lsl	r3, r3, #4
   14604:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14608:	add	r3, r2, r3
   1460c:	mov	r2, #0
   14610:	str	r2, [r3, #8]
   14614:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14618:	lsl	r3, r3, #4
   1461c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14620:	add	r3, r2, r3
   14624:	mvn	r2, #1
   14628:	str	r2, [r3, #4]
   1462c:	b	14414 <__assert_fail@plt+0x2f20>
   14630:	nop			; (mov r0, r0)
   14634:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14638:	lsl	r3, r3, #4
   1463c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14640:	add	r3, r2, r3
   14644:	ldr	r2, [fp, #-20]	; 0xffffffec
   14648:	str	r2, [r3, #4]
   1464c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14650:	lsl	r3, r3, #4
   14654:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14658:	add	r4, r2, r3
   1465c:	ldr	r1, [pc, #156]	; 14700 <__assert_fail@plt+0x320c>
   14660:	ldr	r0, [fp, #-20]	; 0xffffffec
   14664:	bl	11140 <fdopen@plt>
   14668:	mov	r3, r0
   1466c:	str	r3, [r4, #8]
   14670:	ldr	r3, [r4, #8]
   14674:	cmp	r3, #0
   14678:	bne	146c0 <__assert_fail@plt+0x31cc>
   1467c:	bl	113bc <__errno_location@plt>
   14680:	mov	r3, r0
   14684:	ldr	r4, [r3]
   14688:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1468c:	lsl	r3, r3, #4
   14690:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14694:	add	r3, r2, r3
   14698:	ldr	r3, [r3]
   1469c:	mov	r2, r3
   146a0:	mov	r1, #3
   146a4:	mov	r0, #0
   146a8:	bl	18f00 <__assert_fail@plt+0x7a0c>
   146ac:	mov	r3, r0
   146b0:	ldr	r2, [pc, #68]	; 146fc <__assert_fail@plt+0x3208>
   146b4:	mov	r1, r4
   146b8:	mov	r0, #1
   146bc:	bl	112d8 <error@plt>
   146c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   146c4:	lsl	r3, r3, #4
   146c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   146cc:	add	r3, r2, r3
   146d0:	ldr	r2, [pc, #44]	; 14704 <__assert_fail@plt+0x3210>
   146d4:	ldr	r2, [r2]
   146d8:	str	r2, [r3, #12]
   146dc:	ldr	r3, [pc, #32]	; 14704 <__assert_fail@plt+0x3210>
   146e0:	mov	r2, #0
   146e4:	str	r2, [r3]
   146e8:	ldrb	r3, [fp, #-13]
   146ec:	mov	r0, r3
   146f0:	sub	sp, fp, #8
   146f4:	pop	{r4, fp, pc}
   146f8:	andeq	r0, r0, r1, lsl #24
   146fc:	andeq	sp, r1, r0, lsl #23
   14700:	andeq	sp, r1, r0, ror ip
   14704:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   14708:	push	{r4, fp, lr}
   1470c:	add	fp, sp, #8
   14710:	sub	sp, sp, #76	; 0x4c
   14714:	strd	r0, [fp, #-76]	; 0xffffffb4
   14718:	strd	r2, [fp, #-84]	; 0xffffffac
   1471c:	mov	r3, #0
   14720:	strb	r3, [fp, #-13]
   14724:	mov	r3, #0
   14728:	strb	r3, [fp, #-14]
   1472c:	mov	r3, #0
   14730:	str	r3, [fp, #-24]	; 0xffffffe8
   14734:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   14738:	orrs	r3, r2, r3
   1473c:	beq	14750 <__assert_fail@plt+0x325c>
   14740:	mov	r2, #1
   14744:	mov	r3, #0
   14748:	strd	r2, [fp, #-36]	; 0xffffffdc
   1474c:	b	14850 <__assert_fail@plt+0x335c>
   14750:	ldrd	r2, [fp, #-84]	; 0xffffffac
   14754:	mvn	r0, #0
   14758:	mov	r1, #0
   1475c:	cmp	r3, r1
   14760:	cmpeq	r2, r0
   14764:	bls	1476c <__assert_fail@plt+0x3278>
   14768:	bl	1aab0 <__assert_fail@plt+0x95bc>
   1476c:	ldr	r3, [fp, #-84]	; 0xffffffac
   14770:	mov	r1, #16
   14774:	mov	r0, r3
   14778:	bl	1a170 <__assert_fail@plt+0x8c7c>
   1477c:	mov	r3, r0
   14780:	mov	r2, r3
   14784:	ldr	r3, [fp, #12]
   14788:	str	r2, [r3]
   1478c:	ldr	r3, [fp, #12]
   14790:	ldr	r3, [r3]
   14794:	str	r3, [fp, #-24]	; 0xffffffe8
   14798:	mov	r3, #0
   1479c:	str	r3, [fp, #-20]	; 0xffffffec
   147a0:	b	14824 <__assert_fail@plt+0x3330>
   147a4:	bl	12034 <__assert_fail@plt+0xb40>
   147a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   147ac:	lsl	r3, r3, #4
   147b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   147b4:	add	r4, r2, r3
   147b8:	ldr	r3, [pc, #1752]	; 14e98 <__assert_fail@plt+0x39a4>
   147bc:	ldr	r3, [r3]
   147c0:	mov	r0, r3
   147c4:	bl	1aa74 <__assert_fail@plt+0x9580>
   147c8:	mov	r3, r0
   147cc:	str	r3, [r4]
   147d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   147d4:	lsl	r3, r3, #4
   147d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   147dc:	add	r3, r2, r3
   147e0:	mvn	r2, #0
   147e4:	str	r2, [r3, #4]
   147e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   147ec:	lsl	r3, r3, #4
   147f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   147f4:	add	r3, r2, r3
   147f8:	mov	r2, #0
   147fc:	str	r2, [r3, #8]
   14800:	ldr	r3, [fp, #-20]	; 0xffffffec
   14804:	lsl	r3, r3, #4
   14808:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1480c:	add	r3, r2, r3
   14810:	mov	r2, #0
   14814:	str	r2, [r3, #12]
   14818:	ldr	r3, [fp, #-20]	; 0xffffffec
   1481c:	add	r3, r3, #1
   14820:	str	r3, [fp, #-20]	; 0xffffffec
   14824:	ldr	r3, [fp, #-20]	; 0xffffffec
   14828:	mov	r0, r3
   1482c:	mov	r1, #0
   14830:	ldrd	r2, [fp, #-84]	; 0xffffffac
   14834:	cmp	r1, r3
   14838:	cmpeq	r0, r2
   1483c:	bcc	147a4 <__assert_fail@plt+0x32b0>
   14840:	mov	r3, #0
   14844:	str	r3, [fp, #-20]	; 0xffffffec
   14848:	mov	r3, #0
   1484c:	strb	r3, [fp, #-15]
   14850:	ldr	r3, [fp, #4]
   14854:	str	r3, [fp, #-40]	; 0xffffffd8
   14858:	ldr	r2, [fp, #8]
   1485c:	ldr	r1, [fp, #4]
   14860:	mov	r0, #0
   14864:	bl	1919c <__assert_fail@plt+0x7ca8>
   14868:	str	r0, [fp, #-52]	; 0xffffffcc
   1486c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14870:	cmn	r3, #1
   14874:	bne	148b0 <__assert_fail@plt+0x33bc>
   14878:	bl	113bc <__errno_location@plt>
   1487c:	mov	r3, r0
   14880:	ldr	r4, [r3]
   14884:	ldr	r3, [pc, #1552]	; 14e9c <__assert_fail@plt+0x39a8>
   14888:	ldr	r3, [r3]
   1488c:	mov	r2, r3
   14890:	mov	r1, #3
   14894:	mov	r0, #0
   14898:	bl	18f00 <__assert_fail@plt+0x7a0c>
   1489c:	mov	r3, r0
   148a0:	ldr	r2, [pc, #1528]	; 14ea0 <__assert_fail@plt+0x39ac>
   148a4:	mov	r1, r4
   148a8:	mov	r0, #1
   148ac:	bl	112d8 <error@plt>
   148b0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   148b4:	cmp	r3, #0
   148b8:	beq	14d38 <__assert_fail@plt+0x3844>
   148bc:	ldr	r2, [fp, #4]
   148c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   148c4:	add	r3, r2, r3
   148c8:	str	r3, [fp, #-56]	; 0xffffffc8
   148cc:	b	14d24 <__assert_fail@plt+0x3830>
   148d0:	mov	r3, #0
   148d4:	strb	r3, [fp, #-41]	; 0xffffffd7
   148d8:	ldr	r3, [pc, #1476]	; 14ea4 <__assert_fail@plt+0x39b0>
   148dc:	ldr	r1, [r3]
   148e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   148e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   148e8:	sub	r3, r2, r3
   148ec:	mov	r2, r3
   148f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   148f4:	bl	11404 <memchr@plt>
   148f8:	str	r0, [fp, #-48]	; 0xffffffd0
   148fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14900:	cmp	r3, #0
   14904:	beq	14920 <__assert_fail@plt+0x342c>
   14908:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1490c:	add	r3, r3, #1
   14910:	str	r3, [fp, #-48]	; 0xffffffd0
   14914:	mov	r3, #1
   14918:	strb	r3, [fp, #-41]	; 0xffffffd7
   1491c:	b	14928 <__assert_fail@plt+0x3434>
   14920:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14924:	str	r3, [fp, #-48]	; 0xffffffd0
   14928:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1492c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14930:	sub	r3, r2, r3
   14934:	str	r3, [fp, #-60]	; 0xffffffc4
   14938:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   1493c:	orrs	r3, r2, r3
   14940:	beq	14a60 <__assert_fail@plt+0x356c>
   14944:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   14948:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   1494c:	cmp	r1, r3
   14950:	cmpeq	r0, r2
   14954:	bne	149b0 <__assert_fail@plt+0x34bc>
   14958:	ldr	r3, [pc, #1352]	; 14ea8 <__assert_fail@plt+0x39b4>
   1495c:	ldrb	r3, [r3]
   14960:	cmp	r3, #0
   14964:	beq	149b0 <__assert_fail@plt+0x34bc>
   14968:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1496c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   14970:	mov	r0, #1
   14974:	bl	168ec <__assert_fail@plt+0x53f8>
   14978:	mov	r2, r0
   1497c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14980:	cmp	r2, r3
   14984:	beq	14a20 <__assert_fail@plt+0x352c>
   14988:	bl	113bc <__errno_location@plt>
   1498c:	mov	r3, r0
   14990:	ldr	r4, [r3]
   14994:	ldr	r0, [pc, #1296]	; 14eac <__assert_fail@plt+0x39b8>
   14998:	bl	1135c <gettext@plt>
   1499c:	mov	r3, r0
   149a0:	ldr	r2, [pc, #1272]	; 14ea0 <__assert_fail@plt+0x39ac>
   149a4:	mov	r1, r4
   149a8:	mov	r0, #1
   149ac:	bl	112d8 <error@plt>
   149b0:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   149b4:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   149b8:	cmp	r1, r3
   149bc:	cmpeq	r0, r2
   149c0:	bne	14a20 <__assert_fail@plt+0x352c>
   149c4:	ldr	r3, [pc, #1252]	; 14eb0 <__assert_fail@plt+0x39bc>
   149c8:	ldr	r3, [r3]
   149cc:	mov	r2, #1
   149d0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   149d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   149d8:	bl	11200 <fwrite_unlocked@plt>
   149dc:	mov	r3, r0
   149e0:	cmp	r3, #1
   149e4:	beq	14a20 <__assert_fail@plt+0x352c>
   149e8:	ldr	r3, [pc, #1216]	; 14eb0 <__assert_fail@plt+0x39bc>
   149ec:	ldr	r3, [r3]
   149f0:	mov	r0, r3
   149f4:	bl	11494 <clearerr_unlocked@plt>
   149f8:	bl	113bc <__errno_location@plt>
   149fc:	mov	r3, r0
   14a00:	ldr	r4, [r3]
   14a04:	ldr	r0, [pc, #1184]	; 14eac <__assert_fail@plt+0x39b8>
   14a08:	bl	1135c <gettext@plt>
   14a0c:	mov	r3, r0
   14a10:	ldr	r2, [pc, #1160]	; 14ea0 <__assert_fail@plt+0x39ac>
   14a14:	mov	r1, r4
   14a18:	mov	r0, #1
   14a1c:	bl	112d8 <error@plt>
   14a20:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14a24:	cmp	r3, #0
   14a28:	beq	14d1c <__assert_fail@plt+0x3828>
   14a2c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   14a30:	ldrd	r2, [fp, #-84]	; 0xffffffac
   14a34:	cmp	r1, r3
   14a38:	cmpeq	r0, r2
   14a3c:	beq	14a50 <__assert_fail@plt+0x355c>
   14a40:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   14a44:	adds	r2, r2, #1
   14a48:	adc	r3, r3, #0
   14a4c:	b	14a58 <__assert_fail@plt+0x3564>
   14a50:	mov	r2, #1
   14a54:	mov	r3, #0
   14a58:	strd	r2, [fp, #-36]	; 0xffffffdc
   14a5c:	b	14d1c <__assert_fail@plt+0x3828>
   14a60:	ldr	r3, [fp, #-84]	; 0xffffffac
   14a64:	mov	r2, r3
   14a68:	ldr	r1, [fp, #-20]	; 0xffffffec
   14a6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a70:	bl	143b4 <__assert_fail@plt+0x2ec0>
   14a74:	mov	r3, r0
   14a78:	mov	r2, r3
   14a7c:	ldrb	r3, [fp, #-15]
   14a80:	orr	r3, r2, r3
   14a84:	uxtb	r3, r3
   14a88:	cmp	r3, #0
   14a8c:	movne	r3, #1
   14a90:	moveq	r3, #0
   14a94:	strb	r3, [fp, #-15]
   14a98:	ldr	r3, [pc, #1032]	; 14ea8 <__assert_fail@plt+0x39b4>
   14a9c:	ldrb	r3, [r3]
   14aa0:	cmp	r3, #0
   14aa4:	beq	14b48 <__assert_fail@plt+0x3654>
   14aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14aac:	lsl	r3, r3, #4
   14ab0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14ab4:	add	r3, r2, r3
   14ab8:	ldr	r3, [r3, #4]
   14abc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14ac0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   14ac4:	mov	r0, r3
   14ac8:	bl	168ec <__assert_fail@plt+0x53f8>
   14acc:	mov	r2, r0
   14ad0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14ad4:	cmp	r2, r3
   14ad8:	beq	14be4 <__assert_fail@plt+0x36f0>
   14adc:	bl	113bc <__errno_location@plt>
   14ae0:	mov	r3, r0
   14ae4:	ldr	r3, [r3]
   14ae8:	mov	r0, r3
   14aec:	bl	119e0 <__assert_fail@plt+0x4ec>
   14af0:	mov	r3, r0
   14af4:	eor	r3, r3, #1
   14af8:	uxtb	r3, r3
   14afc:	cmp	r3, #0
   14b00:	beq	14be4 <__assert_fail@plt+0x36f0>
   14b04:	bl	113bc <__errno_location@plt>
   14b08:	mov	r3, r0
   14b0c:	ldr	r4, [r3]
   14b10:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b14:	lsl	r3, r3, #4
   14b18:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14b1c:	add	r3, r2, r3
   14b20:	ldr	r3, [r3]
   14b24:	mov	r2, r3
   14b28:	mov	r1, #3
   14b2c:	mov	r0, #0
   14b30:	bl	18f00 <__assert_fail@plt+0x7a0c>
   14b34:	mov	r3, r0
   14b38:	ldr	r2, [pc, #864]	; 14ea0 <__assert_fail@plt+0x39ac>
   14b3c:	mov	r1, r4
   14b40:	mov	r0, #1
   14b44:	bl	112d8 <error@plt>
   14b48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b4c:	lsl	r3, r3, #4
   14b50:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14b54:	add	r3, r2, r3
   14b58:	ldr	r3, [r3, #8]
   14b5c:	mov	r2, #1
   14b60:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14b64:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14b68:	bl	11200 <fwrite_unlocked@plt>
   14b6c:	mov	r3, r0
   14b70:	cmp	r3, #1
   14b74:	beq	14be4 <__assert_fail@plt+0x36f0>
   14b78:	bl	113bc <__errno_location@plt>
   14b7c:	mov	r3, r0
   14b80:	ldr	r3, [r3]
   14b84:	mov	r0, r3
   14b88:	bl	119e0 <__assert_fail@plt+0x4ec>
   14b8c:	mov	r3, r0
   14b90:	eor	r3, r3, #1
   14b94:	uxtb	r3, r3
   14b98:	cmp	r3, #0
   14b9c:	beq	14be4 <__assert_fail@plt+0x36f0>
   14ba0:	bl	113bc <__errno_location@plt>
   14ba4:	mov	r3, r0
   14ba8:	ldr	r4, [r3]
   14bac:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bb0:	lsl	r3, r3, #4
   14bb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14bb8:	add	r3, r2, r3
   14bbc:	ldr	r3, [r3]
   14bc0:	mov	r2, r3
   14bc4:	mov	r1, #3
   14bc8:	mov	r0, #0
   14bcc:	bl	18f00 <__assert_fail@plt+0x7a0c>
   14bd0:	mov	r3, r0
   14bd4:	ldr	r2, [pc, #708]	; 14ea0 <__assert_fail@plt+0x39ac>
   14bd8:	mov	r1, r4
   14bdc:	mov	r0, #1
   14be0:	bl	112d8 <error@plt>
   14be4:	bl	113bc <__errno_location@plt>
   14be8:	mov	r3, r0
   14bec:	ldr	r3, [r3]
   14bf0:	mov	r0, r3
   14bf4:	bl	119e0 <__assert_fail@plt+0x4ec>
   14bf8:	mov	r3, r0
   14bfc:	eor	r3, r3, #1
   14c00:	uxtb	r3, r3
   14c04:	cmp	r3, #0
   14c08:	beq	14c14 <__assert_fail@plt+0x3720>
   14c0c:	mov	r3, #1
   14c10:	strb	r3, [fp, #-14]
   14c14:	ldrb	r3, [fp, #-15]
   14c18:	cmp	r3, #0
   14c1c:	beq	14cbc <__assert_fail@plt+0x37c8>
   14c20:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c24:	lsl	r3, r3, #4
   14c28:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14c2c:	add	r3, r2, r3
   14c30:	ldr	r3, [r3, #8]
   14c34:	mov	r0, r3
   14c38:	bl	164c4 <__assert_fail@plt+0x4fd0>
   14c3c:	mov	r3, r0
   14c40:	cmp	r3, #0
   14c44:	beq	14c8c <__assert_fail@plt+0x3798>
   14c48:	bl	113bc <__errno_location@plt>
   14c4c:	mov	r3, r0
   14c50:	ldr	r4, [r3]
   14c54:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c58:	lsl	r3, r3, #4
   14c5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14c60:	add	r3, r2, r3
   14c64:	ldr	r3, [r3]
   14c68:	mov	r2, r3
   14c6c:	mov	r1, #3
   14c70:	mov	r0, #0
   14c74:	bl	18f00 <__assert_fail@plt+0x7a0c>
   14c78:	mov	r3, r0
   14c7c:	ldr	r2, [pc, #540]	; 14ea0 <__assert_fail@plt+0x39ac>
   14c80:	mov	r1, r4
   14c84:	mov	r0, #1
   14c88:	bl	112d8 <error@plt>
   14c8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c90:	lsl	r3, r3, #4
   14c94:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14c98:	add	r3, r2, r3
   14c9c:	mov	r2, #0
   14ca0:	str	r2, [r3, #8]
   14ca4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ca8:	lsl	r3, r3, #4
   14cac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14cb0:	add	r3, r2, r3
   14cb4:	mvn	r2, #1
   14cb8:	str	r2, [r3, #4]
   14cbc:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14cc0:	cmp	r3, #0
   14cc4:	beq	14d1c <__assert_fail@plt+0x3828>
   14cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ccc:	add	r3, r3, #1
   14cd0:	str	r3, [fp, #-20]	; 0xffffffec
   14cd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cd8:	mov	r0, r3
   14cdc:	mov	r1, #0
   14ce0:	ldrd	r2, [fp, #-84]	; 0xffffffac
   14ce4:	cmp	r1, r3
   14ce8:	cmpeq	r0, r2
   14cec:	bne	14d1c <__assert_fail@plt+0x3828>
   14cf0:	mov	r3, #1
   14cf4:	strb	r3, [fp, #-13]
   14cf8:	ldrb	r3, [fp, #-14]
   14cfc:	eor	r3, r3, #1
   14d00:	uxtb	r3, r3
   14d04:	cmp	r3, #0
   14d08:	bne	14d40 <__assert_fail@plt+0x384c>
   14d0c:	mov	r3, #0
   14d10:	strb	r3, [fp, #-14]
   14d14:	mov	r3, #0
   14d18:	str	r3, [fp, #-20]	; 0xffffffec
   14d1c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d20:	str	r3, [fp, #-40]	; 0xffffffd8
   14d24:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14d28:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14d2c:	cmp	r2, r3
   14d30:	bne	148d0 <__assert_fail@plt+0x33dc>
   14d34:	b	14850 <__assert_fail@plt+0x335c>
   14d38:	nop			; (mov r0, r0)
   14d3c:	b	14d44 <__assert_fail@plt+0x3850>
   14d40:	nop			; (mov r0, r0)
   14d44:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   14d48:	orrs	r3, r2, r3
   14d4c:	bne	14e8c <__assert_fail@plt+0x3998>
   14d50:	ldrb	r3, [fp, #-13]
   14d54:	cmp	r3, #0
   14d58:	beq	14d64 <__assert_fail@plt+0x3870>
   14d5c:	ldr	r3, [fp, #-84]	; 0xffffffac
   14d60:	b	14d68 <__assert_fail@plt+0x3874>
   14d64:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d68:	str	r3, [fp, #-64]	; 0xffffffc0
   14d6c:	mov	r3, #0
   14d70:	str	r3, [fp, #-20]	; 0xffffffec
   14d74:	b	14e70 <__assert_fail@plt+0x397c>
   14d78:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14d7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d80:	cmp	r2, r3
   14d84:	bcc	14dd8 <__assert_fail@plt+0x38e4>
   14d88:	ldr	r3, [pc, #292]	; 14eb4 <__assert_fail@plt+0x39c0>
   14d8c:	ldrb	r3, [r3]
   14d90:	eor	r3, r3, #1
   14d94:	uxtb	r3, r3
   14d98:	cmp	r3, #0
   14d9c:	beq	14dd8 <__assert_fail@plt+0x38e4>
   14da0:	ldr	r3, [fp, #-84]	; 0xffffffac
   14da4:	mov	r2, r3
   14da8:	ldr	r1, [fp, #-20]	; 0xffffffec
   14dac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14db0:	bl	143b4 <__assert_fail@plt+0x2ec0>
   14db4:	mov	r3, r0
   14db8:	mov	r2, r3
   14dbc:	ldrb	r3, [fp, #-15]
   14dc0:	orr	r3, r2, r3
   14dc4:	uxtb	r3, r3
   14dc8:	cmp	r3, #0
   14dcc:	movne	r3, #1
   14dd0:	moveq	r3, #0
   14dd4:	strb	r3, [fp, #-15]
   14dd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ddc:	lsl	r3, r3, #4
   14de0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14de4:	add	r3, r2, r3
   14de8:	ldr	r3, [r3, #4]
   14dec:	cmp	r3, #0
   14df0:	blt	14e4c <__assert_fail@plt+0x3958>
   14df4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14df8:	lsl	r3, r3, #4
   14dfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14e00:	add	r3, r2, r3
   14e04:	ldr	r0, [r3, #8]
   14e08:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e0c:	lsl	r3, r3, #4
   14e10:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14e14:	add	r3, r2, r3
   14e18:	ldr	r1, [r3, #4]
   14e1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e20:	lsl	r3, r3, #4
   14e24:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14e28:	add	r3, r2, r3
   14e2c:	ldr	ip, [r3, #12]
   14e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e34:	lsl	r3, r3, #4
   14e38:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14e3c:	add	r3, r2, r3
   14e40:	ldr	r3, [r3]
   14e44:	mov	r2, ip
   14e48:	bl	12b24 <__assert_fail@plt+0x1630>
   14e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e50:	lsl	r3, r3, #4
   14e54:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14e58:	add	r3, r2, r3
   14e5c:	mvn	r2, #1
   14e60:	str	r2, [r3, #4]
   14e64:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e68:	add	r3, r3, #1
   14e6c:	str	r3, [fp, #-20]	; 0xffffffec
   14e70:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e74:	mov	r0, r3
   14e78:	mov	r1, #0
   14e7c:	ldrd	r2, [fp, #-84]	; 0xffffffac
   14e80:	cmp	r1, r3
   14e84:	cmpeq	r0, r2
   14e88:	bcc	14d78 <__assert_fail@plt+0x3884>
   14e8c:	nop			; (mov r0, r0)
   14e90:	sub	sp, fp, #8
   14e94:	pop	{r4, fp, pc}
   14e98:	muleq	r2, r0, r4
   14e9c:	andeq	pc, r2, r4, lsr #9
   14ea0:	andeq	sp, r1, r0, lsl #23
   14ea4:	andeq	pc, r2, r4, ror #2
   14ea8:	andeq	pc, r2, r2, lsl r5	; <UNPREDICTABLE>
   14eac:	andeq	sp, r1, ip, lsr ip
   14eb0:	andeq	pc, r2, ip, ror #6
   14eb4:	andeq	pc, r2, r1, lsl r5	; <UNPREDICTABLE>
   14eb8:	push	{r4, r5, r6, fp, lr}
   14ebc:	add	fp, sp, #16
   14ec0:	sub	sp, sp, #44	; 0x2c
   14ec4:	str	r0, [fp, #-24]	; 0xffffffe8
   14ec8:	str	r1, [fp, #-28]	; 0xffffffe4
   14ecc:	str	r2, [fp, #-32]	; 0xffffffe0
   14ed0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14ed4:	add	r4, r3, #1
   14ed8:	ldr	r0, [pc, #196]	; 14fa4 <__assert_fail@plt+0x3ab0>
   14edc:	bl	1135c <gettext@plt>
   14ee0:	mov	r2, r0
   14ee4:	mov	r3, #0
   14ee8:	str	r3, [sp, #16]
   14eec:	str	r2, [sp, #12]
   14ef0:	ldr	r3, [pc, #176]	; 14fa8 <__assert_fail@plt+0x3ab4>
   14ef4:	str	r3, [sp, #8]
   14ef8:	mvn	r2, #0
   14efc:	mvn	r3, #0
   14f00:	strd	r2, [sp]
   14f04:	mov	r2, #1
   14f08:	mov	r3, #0
   14f0c:	mov	r0, r4
   14f10:	bl	1acbc <__assert_fail@plt+0x97c8>
   14f14:	mov	r2, r0
   14f18:	mov	r3, r1
   14f1c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14f20:	strd	r2, [r1]
   14f24:	ldr	r3, [pc, #128]	; 14fac <__assert_fail@plt+0x3ab8>
   14f28:	ldr	r3, [r3]
   14f2c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14f30:	cmp	r2, r3
   14f34:	beq	14f98 <__assert_fail@plt+0x3aa4>
   14f38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14f3c:	mov	r2, #0
   14f40:	strb	r2, [r3]
   14f44:	ldr	r3, [pc, #96]	; 14fac <__assert_fail@plt+0x3ab8>
   14f48:	ldr	r6, [r3]
   14f4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f50:	ldrd	r4, [r3]
   14f54:	ldr	r0, [pc, #84]	; 14fb0 <__assert_fail@plt+0x3abc>
   14f58:	bl	1135c <gettext@plt>
   14f5c:	mov	r2, r0
   14f60:	mov	r3, #0
   14f64:	str	r3, [sp, #16]
   14f68:	str	r2, [sp, #12]
   14f6c:	ldr	r3, [pc, #52]	; 14fa8 <__assert_fail@plt+0x3ab4>
   14f70:	str	r3, [sp, #8]
   14f74:	strd	r4, [sp]
   14f78:	mov	r2, #1
   14f7c:	mov	r3, #0
   14f80:	mov	r0, r6
   14f84:	bl	1acbc <__assert_fail@plt+0x97c8>
   14f88:	mov	r2, r0
   14f8c:	mov	r3, r1
   14f90:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14f94:	strd	r2, [r1]
   14f98:	nop			; (mov r0, r0)
   14f9c:	sub	sp, fp, #16
   14fa0:	pop	{r4, r5, r6, fp, pc}
   14fa4:	andeq	sp, r1, r4, ror ip
   14fa8:	andeq	ip, r1, r4, asr #31
   14fac:	andeq	pc, r2, r0, ror r3	; <UNPREDICTABLE>
   14fb0:	muleq	r1, r0, ip
   14fb4:	push	{r4, r5, fp, lr}
   14fb8:	add	fp, sp, #12
   14fbc:	sub	sp, sp, #360	; 0x168
   14fc0:	str	r0, [fp, #-280]	; 0xfffffee8
   14fc4:	str	r1, [fp, #-284]	; 0xfffffee4
   14fc8:	mov	r3, #0
   14fcc:	str	r3, [fp, #-16]
   14fd0:	mov	r3, #0
   14fd4:	str	r3, [fp, #-20]	; 0xffffffec
   14fd8:	bl	113b0 <getpagesize@plt>
   14fdc:	mov	r3, r0
   14fe0:	str	r3, [fp, #-48]	; 0xffffffd0
   14fe4:	mov	r2, #0
   14fe8:	mov	r3, #0
   14fec:	strd	r2, [fp, #-76]	; 0xffffffb4
   14ff0:	mov	r2, #0
   14ff4:	mov	r3, #0
   14ff8:	strd	r2, [fp, #-84]	; 0xffffffac
   14ffc:	mov	r3, #0
   15000:	str	r3, [fp, #-24]	; 0xffffffe8
   15004:	mvn	r2, #0
   15008:	mvn	r3, #-2147483648	; 0x80000000
   1500c:	strd	r2, [fp, #-36]	; 0xffffffdc
   15010:	ldr	r3, [fp, #-284]	; 0xfffffee4
   15014:	ldr	r3, [r3]
   15018:	mov	r0, r3
   1501c:	bl	16a40 <__assert_fail@plt+0x554c>
   15020:	ldr	r1, [pc, #2776]	; 15b00 <__assert_fail@plt+0x460c>
   15024:	mov	r0, #6
   15028:	bl	11440 <setlocale@plt>
   1502c:	ldr	r1, [pc, #2768]	; 15b04 <__assert_fail@plt+0x4610>
   15030:	ldr	r0, [pc, #2768]	; 15b08 <__assert_fail@plt+0x4614>
   15034:	bl	114a0 <bindtextdomain@plt>
   15038:	ldr	r0, [pc, #2760]	; 15b08 <__assert_fail@plt+0x4614>
   1503c:	bl	1123c <textdomain@plt>
   15040:	ldr	r0, [pc, #2756]	; 15b0c <__assert_fail@plt+0x4618>
   15044:	bl	1cd40 <__assert_fail@plt+0xb84c>
   15048:	ldr	r0, [pc, #2932]	; 15bc4 <__assert_fail@plt+0x46d0>
   1504c:	bl	11898 <__assert_fail@plt+0x3a4>
   15050:	mov	r2, r0
   15054:	ldr	r3, [pc, #2956]	; 15be8 <__assert_fail@plt+0x46f4>
   15058:	str	r2, [r3]
   1505c:	ldr	r0, [pc, #2732]	; 15b10 <__assert_fail@plt+0x461c>
   15060:	bl	11898 <__assert_fail@plt+0x3a4>
   15064:	mov	r2, r0
   15068:	ldr	r3, [pc, #2876]	; 15bac <__assert_fail@plt+0x46b8>
   1506c:	str	r2, [r3]
   15070:	ldr	r3, [pc, #2876]	; 15bb4 <__assert_fail@plt+0x46c0>
   15074:	ldr	r3, [r3]
   15078:	cmp	r3, #0
   1507c:	beq	1508c <__assert_fail@plt+0x3b98>
   15080:	ldr	r3, [pc, #2860]	; 15bb4 <__assert_fail@plt+0x46c0>
   15084:	ldr	r3, [r3]
   15088:	b	15090 <__assert_fail@plt+0x3b9c>
   1508c:	mov	r3, #1
   15090:	str	r3, [fp, #-52]	; 0xffffffcc
   15094:	mov	r3, #0
   15098:	str	r3, [sp]
   1509c:	ldr	r3, [pc, #2672]	; 15b14 <__assert_fail@plt+0x4620>
   150a0:	ldr	r2, [pc, #2672]	; 15b18 <__assert_fail@plt+0x4624>
   150a4:	ldr	r1, [fp, #-284]	; 0xfffffee4
   150a8:	ldr	r0, [fp, #-280]	; 0xfffffee8
   150ac:	bl	11338 <getopt_long@plt>
   150b0:	str	r0, [fp, #-56]	; 0xffffffc8
   150b4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   150b8:	cmn	r3, #1
   150bc:	beq	15a50 <__assert_fail@plt+0x455c>
   150c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   150c4:	cmp	r3, #101	; 0x65
   150c8:	beq	15964 <__assert_fail@plt+0x4470>
   150cc:	cmp	r3, #101	; 0x65
   150d0:	bgt	15128 <__assert_fail@plt+0x3c34>
   150d4:	cmp	r3, #57	; 0x39
   150d8:	bgt	150f8 <__assert_fail@plt+0x3c04>
   150dc:	cmp	r3, #48	; 0x30
   150e0:	bge	156c0 <__assert_fail@plt+0x41cc>
   150e4:	cmn	r3, #3
   150e8:	beq	159f8 <__assert_fail@plt+0x4504>
   150ec:	cmn	r3, #2
   150f0:	beq	159f0 <__assert_fail@plt+0x44fc>
   150f4:	b	15a38 <__assert_fail@plt+0x4544>
   150f8:	cmp	r3, #97	; 0x61
   150fc:	beq	151a8 <__assert_fail@plt+0x3cb4>
   15100:	cmp	r3, #97	; 0x61
   15104:	bgt	15114 <__assert_fail@plt+0x3c20>
   15108:	cmp	r3, #67	; 0x43
   1510c:	beq	15388 <__assert_fail@plt+0x3e94>
   15110:	b	15a38 <__assert_fail@plt+0x4544>
   15114:	cmp	r3, #98	; 0x62
   15118:	beq	15270 <__assert_fail@plt+0x3d7c>
   1511c:	cmp	r3, #100	; 0x64
   15120:	beq	15848 <__assert_fail@plt+0x4354>
   15124:	b	15a38 <__assert_fail@plt+0x4544>
   15128:	cmp	r3, #120	; 0x78
   1512c:	beq	15848 <__assert_fail@plt+0x4354>
   15130:	cmp	r3, #120	; 0x78
   15134:	bgt	15168 <__assert_fail@plt+0x3c74>
   15138:	cmp	r3, #110	; 0x6e
   1513c:	beq	15414 <__assert_fail@plt+0x3f20>
   15140:	cmp	r3, #110	; 0x6e
   15144:	bgt	15154 <__assert_fail@plt+0x3c60>
   15148:	cmp	r3, #108	; 0x6c
   1514c:	beq	152fc <__assert_fail@plt+0x3e08>
   15150:	b	15a38 <__assert_fail@plt+0x4544>
   15154:	cmp	r3, #116	; 0x74
   15158:	beq	155c4 <__assert_fail@plt+0x40d0>
   1515c:	cmp	r3, #117	; 0x75
   15160:	beq	155b4 <__assert_fail@plt+0x40c0>
   15164:	b	15a38 <__assert_fail@plt+0x4544>
   15168:	ldr	r2, [pc, #2476]	; 15b1c <__assert_fail@plt+0x4628>
   1516c:	cmp	r3, r2
   15170:	beq	15974 <__assert_fail@plt+0x4480>
   15174:	ldr	r2, [pc, #2464]	; 15b1c <__assert_fail@plt+0x4628>
   15178:	cmp	r3, r2
   1517c:	bgt	1518c <__assert_fail@plt+0x3c98>
   15180:	cmp	r3, #256	; 0x100
   15184:	beq	159e0 <__assert_fail@plt+0x44ec>
   15188:	b	15a38 <__assert_fail@plt+0x4544>
   1518c:	ldr	r2, [pc, #2444]	; 15b20 <__assert_fail@plt+0x462c>
   15190:	cmp	r3, r2
   15194:	beq	15988 <__assert_fail@plt+0x4494>
   15198:	ldr	r2, [pc, #2436]	; 15b24 <__assert_fail@plt+0x4630>
   1519c:	cmp	r3, r2
   151a0:	beq	15200 <__assert_fail@plt+0x3d0c>
   151a4:	b	15a38 <__assert_fail@plt+0x4544>
   151a8:	ldr	r3, [pc, #2424]	; 15b28 <__assert_fail@plt+0x4634>
   151ac:	ldr	r4, [r3]
   151b0:	ldr	r0, [pc, #2420]	; 15b2c <__assert_fail@plt+0x4638>
   151b4:	bl	1135c <gettext@plt>
   151b8:	mov	r2, r0
   151bc:	mov	r3, #0
   151c0:	str	r3, [sp, #16]
   151c4:	str	r2, [sp, #12]
   151c8:	ldr	r3, [pc, #2352]	; 15b00 <__assert_fail@plt+0x460c>
   151cc:	str	r3, [sp, #8]
   151d0:	mvn	r2, #-1073741824	; 0xc0000000
   151d4:	mov	r3, #0
   151d8:	strd	r2, [sp]
   151dc:	mov	r2, #0
   151e0:	mov	r3, #0
   151e4:	mov	r0, r4
   151e8:	bl	1acbc <__assert_fail@plt+0x97c8>
   151ec:	mov	r2, r0
   151f0:	mov	r3, r1
   151f4:	ldr	r3, [pc, #2496]	; 15bbc <__assert_fail@plt+0x46c8>
   151f8:	str	r2, [r3]
   151fc:	b	15a4c <__assert_fail@plt+0x4558>
   15200:	ldr	r3, [pc, #2336]	; 15b28 <__assert_fail@plt+0x4634>
   15204:	ldr	r3, [r3]
   15208:	mov	r0, r3
   1520c:	bl	1620c <__assert_fail@plt+0x4d18>
   15210:	mov	r2, r0
   15214:	ldr	r3, [pc, #2316]	; 15b28 <__assert_fail@plt+0x4634>
   15218:	ldr	r3, [r3]
   1521c:	cmp	r2, r3
   15220:	beq	1525c <__assert_fail@plt+0x3d68>
   15224:	ldr	r0, [pc, #2308]	; 15b30 <__assert_fail@plt+0x463c>
   15228:	bl	1135c <gettext@plt>
   1522c:	mov	r4, r0
   15230:	ldr	r3, [pc, #2288]	; 15b28 <__assert_fail@plt+0x4634>
   15234:	ldr	r3, [r3]
   15238:	mov	r0, r3
   1523c:	bl	19170 <__assert_fail@plt+0x7c7c>
   15240:	mov	r3, r0
   15244:	mov	r2, r4
   15248:	mov	r1, #0
   1524c:	mov	r0, #0
   15250:	bl	112d8 <error@plt>
   15254:	mov	r0, #1
   15258:	bl	11c2c <__assert_fail@plt+0x738>
   1525c:	ldr	r3, [pc, #2244]	; 15b28 <__assert_fail@plt+0x4634>
   15260:	ldr	r3, [r3]
   15264:	ldr	r2, [pc, #2248]	; 15b34 <__assert_fail@plt+0x4640>
   15268:	str	r3, [r2]
   1526c:	b	15a4c <__assert_fail@plt+0x4558>
   15270:	ldr	r3, [fp, #-16]
   15274:	cmp	r3, #0
   15278:	beq	152a0 <__assert_fail@plt+0x3dac>
   1527c:	ldr	r0, [pc, #2228]	; 15b38 <__assert_fail@plt+0x4644>
   15280:	bl	1135c <gettext@plt>
   15284:	mov	r3, r0
   15288:	mov	r2, r3
   1528c:	mov	r1, #0
   15290:	mov	r0, #0
   15294:	bl	112d8 <error@plt>
   15298:	mov	r0, #1
   1529c:	bl	11c2c <__assert_fail@plt+0x738>
   152a0:	mov	r3, #1
   152a4:	str	r3, [fp, #-16]
   152a8:	ldr	r3, [pc, #2168]	; 15b28 <__assert_fail@plt+0x4634>
   152ac:	ldr	r4, [r3]
   152b0:	ldr	r0, [pc, #2180]	; 15b3c <__assert_fail@plt+0x4648>
   152b4:	bl	1135c <gettext@plt>
   152b8:	mov	r2, r0
   152bc:	mov	r3, #0
   152c0:	str	r3, [sp, #16]
   152c4:	str	r2, [sp, #12]
   152c8:	ldr	r3, [pc, #2160]	; 15b40 <__assert_fail@plt+0x464c>
   152cc:	str	r3, [sp, #8]
   152d0:	mvn	r2, #0
   152d4:	mvn	r3, #-2147483648	; 0x80000000
   152d8:	strd	r2, [sp]
   152dc:	mov	r2, #1
   152e0:	mov	r3, #0
   152e4:	mov	r0, r4
   152e8:	bl	1acbc <__assert_fail@plt+0x97c8>
   152ec:	mov	r2, r0
   152f0:	mov	r3, r1
   152f4:	strd	r2, [fp, #-84]	; 0xffffffac
   152f8:	b	15a4c <__assert_fail@plt+0x4558>
   152fc:	ldr	r3, [fp, #-16]
   15300:	cmp	r3, #0
   15304:	beq	1532c <__assert_fail@plt+0x3e38>
   15308:	ldr	r0, [pc, #2088]	; 15b38 <__assert_fail@plt+0x4644>
   1530c:	bl	1135c <gettext@plt>
   15310:	mov	r3, r0
   15314:	mov	r2, r3
   15318:	mov	r1, #0
   1531c:	mov	r0, #0
   15320:	bl	112d8 <error@plt>
   15324:	mov	r0, #1
   15328:	bl	11c2c <__assert_fail@plt+0x738>
   1532c:	mov	r3, #3
   15330:	str	r3, [fp, #-16]
   15334:	ldr	r3, [pc, #2028]	; 15b28 <__assert_fail@plt+0x4634>
   15338:	ldr	r4, [r3]
   1533c:	ldr	r0, [pc, #2048]	; 15b44 <__assert_fail@plt+0x4650>
   15340:	bl	1135c <gettext@plt>
   15344:	mov	r2, r0
   15348:	mov	r3, #0
   1534c:	str	r3, [sp, #16]
   15350:	str	r2, [sp, #12]
   15354:	ldr	r3, [pc, #1956]	; 15b00 <__assert_fail@plt+0x460c>
   15358:	str	r3, [sp, #8]
   1535c:	mvn	r2, #0
   15360:	mvn	r3, #0
   15364:	strd	r2, [sp]
   15368:	mov	r2, #1
   1536c:	mov	r3, #0
   15370:	mov	r0, r4
   15374:	bl	1acbc <__assert_fail@plt+0x97c8>
   15378:	mov	r2, r0
   1537c:	mov	r3, r1
   15380:	strd	r2, [fp, #-84]	; 0xffffffac
   15384:	b	15a4c <__assert_fail@plt+0x4558>
   15388:	ldr	r3, [fp, #-16]
   1538c:	cmp	r3, #0
   15390:	beq	153b8 <__assert_fail@plt+0x3ec4>
   15394:	ldr	r0, [pc, #1948]	; 15b38 <__assert_fail@plt+0x4644>
   15398:	bl	1135c <gettext@plt>
   1539c:	mov	r3, r0
   153a0:	mov	r2, r3
   153a4:	mov	r1, #0
   153a8:	mov	r0, #0
   153ac:	bl	112d8 <error@plt>
   153b0:	mov	r0, #1
   153b4:	bl	11c2c <__assert_fail@plt+0x738>
   153b8:	mov	r3, #2
   153bc:	str	r3, [fp, #-16]
   153c0:	ldr	r3, [pc, #1888]	; 15b28 <__assert_fail@plt+0x4634>
   153c4:	ldr	r4, [r3]
   153c8:	ldr	r0, [pc, #1900]	; 15b3c <__assert_fail@plt+0x4648>
   153cc:	bl	1135c <gettext@plt>
   153d0:	mov	r2, r0
   153d4:	mov	r3, #0
   153d8:	str	r3, [sp, #16]
   153dc:	str	r2, [sp, #12]
   153e0:	ldr	r3, [pc, #1880]	; 15b40 <__assert_fail@plt+0x464c>
   153e4:	str	r3, [sp, #8]
   153e8:	mvn	r2, #0
   153ec:	mov	r3, #0
   153f0:	strd	r2, [sp]
   153f4:	mov	r2, #1
   153f8:	mov	r3, #0
   153fc:	mov	r0, r4
   15400:	bl	1acbc <__assert_fail@plt+0x97c8>
   15404:	mov	r2, r0
   15408:	mov	r3, r1
   1540c:	strd	r2, [fp, #-84]	; 0xffffffac
   15410:	b	15a4c <__assert_fail@plt+0x4558>
   15414:	ldr	r3, [fp, #-16]
   15418:	cmp	r3, #0
   1541c:	beq	15458 <__assert_fail@plt+0x3f64>
   15420:	ldr	r0, [pc, #1808]	; 15b38 <__assert_fail@plt+0x4644>
   15424:	bl	1135c <gettext@plt>
   15428:	mov	r3, r0
   1542c:	mov	r2, r3
   15430:	mov	r1, #0
   15434:	mov	r0, #0
   15438:	bl	112d8 <error@plt>
   1543c:	mov	r0, #1
   15440:	bl	11c2c <__assert_fail@plt+0x738>
   15444:	ldr	r3, [pc, #1756]	; 15b28 <__assert_fail@plt+0x4634>
   15448:	ldr	r3, [r3]
   1544c:	add	r3, r3, #1
   15450:	ldr	r2, [pc, #1744]	; 15b28 <__assert_fail@plt+0x4634>
   15454:	str	r3, [r2]
   15458:	bl	11344 <__ctype_b_loc@plt>
   1545c:	mov	r3, r0
   15460:	ldr	r4, [r3]
   15464:	ldr	r3, [pc, #1724]	; 15b28 <__assert_fail@plt+0x4634>
   15468:	ldr	r3, [r3]
   1546c:	ldrb	r3, [r3]
   15470:	mov	r0, r3
   15474:	bl	11628 <__assert_fail@plt+0x134>
   15478:	mov	r3, r0
   1547c:	lsl	r3, r3, #1
   15480:	add	r3, r4, r3
   15484:	ldrh	r3, [r3]
   15488:	and	r3, r3, #8192	; 0x2000
   1548c:	cmp	r3, #0
   15490:	bne	15444 <__assert_fail@plt+0x3f50>
   15494:	ldr	r3, [pc, #1676]	; 15b28 <__assert_fail@plt+0x4634>
   15498:	ldr	r3, [r3]
   1549c:	mov	r2, #2
   154a0:	ldr	r1, [pc, #1696]	; 15b48 <__assert_fail@plt+0x4654>
   154a4:	mov	r0, r3
   154a8:	bl	114c4 <strncmp@plt>
   154ac:	mov	r3, r0
   154b0:	cmp	r3, #0
   154b4:	bne	154d8 <__assert_fail@plt+0x3fe4>
   154b8:	mov	r3, #7
   154bc:	str	r3, [fp, #-16]
   154c0:	ldr	r3, [pc, #1632]	; 15b28 <__assert_fail@plt+0x4634>
   154c4:	ldr	r3, [r3]
   154c8:	add	r3, r3, #2
   154cc:	ldr	r2, [pc, #1620]	; 15b28 <__assert_fail@plt+0x4634>
   154d0:	str	r3, [r2]
   154d4:	b	15524 <__assert_fail@plt+0x4030>
   154d8:	ldr	r3, [pc, #1608]	; 15b28 <__assert_fail@plt+0x4634>
   154dc:	ldr	r3, [r3]
   154e0:	mov	r2, #2
   154e4:	ldr	r1, [pc, #1632]	; 15b4c <__assert_fail@plt+0x4658>
   154e8:	mov	r0, r3
   154ec:	bl	114c4 <strncmp@plt>
   154f0:	mov	r3, r0
   154f4:	cmp	r3, #0
   154f8:	bne	1551c <__assert_fail@plt+0x4028>
   154fc:	mov	r3, #6
   15500:	str	r3, [fp, #-16]
   15504:	ldr	r3, [pc, #1564]	; 15b28 <__assert_fail@plt+0x4634>
   15508:	ldr	r3, [r3]
   1550c:	add	r3, r3, #2
   15510:	ldr	r2, [pc, #1552]	; 15b28 <__assert_fail@plt+0x4634>
   15514:	str	r3, [r2]
   15518:	b	15524 <__assert_fail@plt+0x4030>
   1551c:	mov	r3, #5
   15520:	str	r3, [fp, #-16]
   15524:	ldr	r3, [pc, #1532]	; 15b28 <__assert_fail@plt+0x4634>
   15528:	ldr	r3, [r3]
   1552c:	mov	r1, #47	; 0x2f
   15530:	mov	r0, r3
   15534:	bl	11380 <strchr@plt>
   15538:	str	r0, [fp, #-60]	; 0xffffffc4
   1553c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15540:	cmp	r3, #0
   15544:	beq	15560 <__assert_fail@plt+0x406c>
   15548:	sub	r1, fp, #84	; 0x54
   1554c:	sub	r3, fp, #76	; 0x4c
   15550:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15554:	mov	r0, r3
   15558:	bl	14eb8 <__assert_fail@plt+0x39c4>
   1555c:	b	15a4c <__assert_fail@plt+0x4558>
   15560:	ldr	r3, [pc, #1472]	; 15b28 <__assert_fail@plt+0x4634>
   15564:	ldr	r4, [r3]
   15568:	ldr	r0, [pc, #1636]	; 15bd4 <__assert_fail@plt+0x46e0>
   1556c:	bl	1135c <gettext@plt>
   15570:	mov	r2, r0
   15574:	mov	r3, #0
   15578:	str	r3, [sp, #16]
   1557c:	str	r2, [sp, #12]
   15580:	ldr	r3, [pc, #1400]	; 15b00 <__assert_fail@plt+0x460c>
   15584:	str	r3, [sp, #8]
   15588:	mvn	r2, #0
   1558c:	mvn	r3, #0
   15590:	strd	r2, [sp]
   15594:	mov	r2, #1
   15598:	mov	r3, #0
   1559c:	mov	r0, r4
   155a0:	bl	1acbc <__assert_fail@plt+0x97c8>
   155a4:	mov	r2, r0
   155a8:	mov	r3, r1
   155ac:	strd	r2, [fp, #-84]	; 0xffffffac
   155b0:	b	15a4c <__assert_fail@plt+0x4558>
   155b4:	ldr	r3, [pc, #1428]	; 15b50 <__assert_fail@plt+0x465c>
   155b8:	mov	r2, #1
   155bc:	strb	r2, [r3]
   155c0:	b	15a4c <__assert_fail@plt+0x4558>
   155c4:	ldr	r3, [pc, #1372]	; 15b28 <__assert_fail@plt+0x4634>
   155c8:	ldr	r3, [r3]
   155cc:	ldrb	r3, [r3]
   155d0:	strb	r3, [fp, #-37]	; 0xffffffdb
   155d4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   155d8:	cmp	r3, #0
   155dc:	bne	155fc <__assert_fail@plt+0x4108>
   155e0:	ldr	r0, [pc, #1388]	; 15b54 <__assert_fail@plt+0x4660>
   155e4:	bl	1135c <gettext@plt>
   155e8:	mov	r3, r0
   155ec:	mov	r2, r3
   155f0:	mov	r1, #0
   155f4:	mov	r0, #1
   155f8:	bl	112d8 <error@plt>
   155fc:	ldr	r3, [pc, #1316]	; 15b28 <__assert_fail@plt+0x4634>
   15600:	ldr	r3, [r3]
   15604:	add	r3, r3, #1
   15608:	ldrb	r3, [r3]
   1560c:	cmp	r3, #0
   15610:	beq	15670 <__assert_fail@plt+0x417c>
   15614:	ldr	r3, [pc, #1292]	; 15b28 <__assert_fail@plt+0x4634>
   15618:	ldr	r3, [r3]
   1561c:	ldr	r1, [pc, #1332]	; 15b58 <__assert_fail@plt+0x4664>
   15620:	mov	r0, r3
   15624:	bl	11170 <strcmp@plt>
   15628:	mov	r3, r0
   1562c:	cmp	r3, #0
   15630:	bne	15640 <__assert_fail@plt+0x414c>
   15634:	mov	r3, #0
   15638:	strb	r3, [fp, #-37]	; 0xffffffdb
   1563c:	b	15670 <__assert_fail@plt+0x417c>
   15640:	ldr	r0, [pc, #1300]	; 15b5c <__assert_fail@plt+0x4668>
   15644:	bl	1135c <gettext@plt>
   15648:	mov	r4, r0
   1564c:	ldr	r3, [pc, #1236]	; 15b28 <__assert_fail@plt+0x4634>
   15650:	ldr	r3, [r3]
   15654:	mov	r0, r3
   15658:	bl	19170 <__assert_fail@plt+0x7c7c>
   1565c:	mov	r3, r0
   15660:	mov	r2, r4
   15664:	mov	r1, #0
   15668:	mov	r0, #1
   1566c:	bl	112d8 <error@plt>
   15670:	ldr	r3, [pc, #1328]	; 15ba8 <__assert_fail@plt+0x46b4>
   15674:	ldr	r3, [r3]
   15678:	cmp	r3, #0
   1567c:	blt	156b0 <__assert_fail@plt+0x41bc>
   15680:	ldrb	r2, [fp, #-37]	; 0xffffffdb
   15684:	ldr	r3, [pc, #1308]	; 15ba8 <__assert_fail@plt+0x46b4>
   15688:	ldr	r3, [r3]
   1568c:	cmp	r2, r3
   15690:	beq	156b0 <__assert_fail@plt+0x41bc>
   15694:	ldr	r0, [pc, #1220]	; 15b60 <__assert_fail@plt+0x466c>
   15698:	bl	1135c <gettext@plt>
   1569c:	mov	r3, r0
   156a0:	mov	r2, r3
   156a4:	mov	r1, #0
   156a8:	mov	r0, #1
   156ac:	bl	112d8 <error@plt>
   156b0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   156b4:	ldr	r2, [pc, #1260]	; 15ba8 <__assert_fail@plt+0x46b4>
   156b8:	str	r3, [r2]
   156bc:	b	15a4c <__assert_fail@plt+0x4558>
   156c0:	ldr	r3, [fp, #-16]
   156c4:	cmp	r3, #0
   156c8:	bne	156e0 <__assert_fail@plt+0x41ec>
   156cc:	mov	r3, #4
   156d0:	str	r3, [fp, #-16]
   156d4:	mov	r2, #0
   156d8:	mov	r3, #0
   156dc:	strd	r2, [fp, #-84]	; 0xffffffac
   156e0:	ldr	r3, [fp, #-16]
   156e4:	cmp	r3, #0
   156e8:	beq	1571c <__assert_fail@plt+0x4228>
   156ec:	ldr	r3, [fp, #-16]
   156f0:	cmp	r3, #4
   156f4:	beq	1571c <__assert_fail@plt+0x4228>
   156f8:	ldr	r0, [pc, #1080]	; 15b38 <__assert_fail@plt+0x4644>
   156fc:	bl	1135c <gettext@plt>
   15700:	mov	r3, r0
   15704:	mov	r2, r3
   15708:	mov	r1, #0
   1570c:	mov	r0, #0
   15710:	bl	112d8 <error@plt>
   15714:	mov	r0, #1
   15718:	bl	11c2c <__assert_fail@plt+0x738>
   1571c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15720:	cmp	r3, #0
   15724:	beq	15744 <__assert_fail@plt+0x4250>
   15728:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1572c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15730:	cmp	r2, r3
   15734:	beq	15744 <__assert_fail@plt+0x4250>
   15738:	mov	r2, #0
   1573c:	mov	r3, #0
   15740:	strd	r2, [fp, #-84]	; 0xffffffac
   15744:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15748:	str	r3, [fp, #-24]	; 0xffffffe8
   1574c:	ldrd	r2, [fp, #-84]	; 0xffffffac
   15750:	add	r1, pc, #928	; 0x3a0
   15754:	ldrd	r0, [r1]
   15758:	cmp	r3, r1
   1575c:	cmpeq	r2, r0
   15760:	bhi	15800 <__assert_fail@plt+0x430c>
   15764:	ldrd	r2, [fp, #-84]	; 0xffffffac
   15768:	mov	r1, #10
   1576c:	mul	r0, r1, r3
   15770:	mov	r1, #0
   15774:	mul	r1, r1, r2
   15778:	add	r1, r0, r1
   1577c:	mov	r0, #10
   15780:	umull	r2, r3, r2, r0
   15784:	add	r1, r1, r3
   15788:	mov	r3, r1
   1578c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15790:	sub	r1, r1, #48	; 0x30
   15794:	mov	r0, r1
   15798:	asr	r1, r0, #31
   1579c:	adds	r0, r0, r2
   157a0:	adc	r1, r1, r3
   157a4:	ldrd	r2, [fp, #-84]	; 0xffffffac
   157a8:	cmp	r1, r3
   157ac:	cmpeq	r0, r2
   157b0:	bcc	15800 <__assert_fail@plt+0x430c>
   157b4:	ldrd	r2, [fp, #-84]	; 0xffffffac
   157b8:	mov	r1, #10
   157bc:	mul	r0, r1, r3
   157c0:	mov	r1, #0
   157c4:	mul	r1, r1, r2
   157c8:	add	r1, r0, r1
   157cc:	mov	r0, #10
   157d0:	umull	r2, r3, r2, r0
   157d4:	add	r1, r1, r3
   157d8:	mov	r3, r1
   157dc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   157e0:	sub	r1, r1, #48	; 0x30
   157e4:	mov	r0, r1
   157e8:	asr	r1, r0, #31
   157ec:	adds	r2, r2, r0
   157f0:	adc	r3, r3, r1
   157f4:	strd	r2, [fp, #-84]	; 0xffffffac
   157f8:	mov	r3, #0
   157fc:	b	15804 <__assert_fail@plt+0x4310>
   15800:	mov	r3, #1
   15804:	cmp	r3, #0
   15808:	beq	15a40 <__assert_fail@plt+0x454c>
   1580c:	ldr	r0, [pc, #848]	; 15b64 <__assert_fail@plt+0x4670>
   15810:	bl	1135c <gettext@plt>
   15814:	mov	r4, r0
   15818:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1581c:	sub	r3, fp, #108	; 0x6c
   15820:	mov	r2, r3
   15824:	bl	169ac <__assert_fail@plt+0x54b8>
   15828:	mov	r2, r0
   1582c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15830:	str	r3, [sp]
   15834:	mov	r3, r2
   15838:	mov	r2, r4
   1583c:	mov	r1, #0
   15840:	mov	r0, #1
   15844:	bl	112d8 <error@plt>
   15848:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1584c:	cmp	r3, #100	; 0x64
   15850:	bne	15864 <__assert_fail@plt+0x4370>
   15854:	ldr	r3, [pc, #780]	; 15b68 <__assert_fail@plt+0x4674>
   15858:	ldr	r2, [pc, #780]	; 15b6c <__assert_fail@plt+0x4678>
   1585c:	str	r2, [r3]
   15860:	b	15870 <__assert_fail@plt+0x437c>
   15864:	ldr	r3, [pc, #764]	; 15b68 <__assert_fail@plt+0x4674>
   15868:	ldr	r2, [pc, #768]	; 15b70 <__assert_fail@plt+0x467c>
   1586c:	str	r2, [r3]
   15870:	ldr	r3, [pc, #688]	; 15b28 <__assert_fail@plt+0x4634>
   15874:	ldr	r3, [r3]
   15878:	cmp	r3, #0
   1587c:	beq	15a48 <__assert_fail@plt+0x4554>
   15880:	ldr	r3, [pc, #672]	; 15b28 <__assert_fail@plt+0x4634>
   15884:	ldr	r3, [r3]
   15888:	mov	r0, r3
   1588c:	bl	11368 <strlen@plt>
   15890:	mov	r4, r0
   15894:	ldr	r3, [pc, #652]	; 15b28 <__assert_fail@plt+0x4634>
   15898:	ldr	r2, [r3]
   1589c:	ldr	r3, [pc, #708]	; 15b68 <__assert_fail@plt+0x4674>
   158a0:	ldr	r3, [r3]
   158a4:	mov	r1, r3
   158a8:	mov	r0, r2
   158ac:	bl	114e8 <strspn@plt>
   158b0:	mov	r3, r0
   158b4:	cmp	r4, r3
   158b8:	beq	15924 <__assert_fail@plt+0x4430>
   158bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   158c0:	cmp	r3, #100	; 0x64
   158c4:	bne	158d8 <__assert_fail@plt+0x43e4>
   158c8:	ldr	r0, [pc, #676]	; 15b74 <__assert_fail@plt+0x4680>
   158cc:	bl	1135c <gettext@plt>
   158d0:	mov	r4, r0
   158d4:	b	158e4 <__assert_fail@plt+0x43f0>
   158d8:	ldr	r0, [pc, #664]	; 15b78 <__assert_fail@plt+0x4684>
   158dc:	bl	1135c <gettext@plt>
   158e0:	mov	r4, r0
   158e4:	ldr	r3, [pc, #572]	; 15b28 <__assert_fail@plt+0x4634>
   158e8:	ldr	r3, [r3]
   158ec:	mov	r0, r3
   158f0:	bl	19170 <__assert_fail@plt+0x7c7c>
   158f4:	mov	r3, r0
   158f8:	mov	r2, r4
   158fc:	mov	r1, #0
   15900:	mov	r0, #0
   15904:	bl	112d8 <error@plt>
   15908:	mov	r0, #1
   1590c:	bl	11c2c <__assert_fail@plt+0x738>
   15910:	ldr	r3, [pc, #528]	; 15b28 <__assert_fail@plt+0x4634>
   15914:	ldr	r3, [r3]
   15918:	add	r3, r3, #1
   1591c:	ldr	r2, [pc, #516]	; 15b28 <__assert_fail@plt+0x4634>
   15920:	str	r3, [r2]
   15924:	ldr	r3, [pc, #508]	; 15b28 <__assert_fail@plt+0x4634>
   15928:	ldr	r3, [r3]
   1592c:	ldrb	r3, [r3]
   15930:	cmp	r3, #48	; 0x30
   15934:	bne	15950 <__assert_fail@plt+0x445c>
   15938:	ldr	r3, [pc, #488]	; 15b28 <__assert_fail@plt+0x4634>
   1593c:	ldr	r3, [r3]
   15940:	add	r3, r3, #1
   15944:	ldrb	r3, [r3]
   15948:	cmp	r3, #0
   1594c:	bne	15910 <__assert_fail@plt+0x441c>
   15950:	ldr	r3, [pc, #464]	; 15b28 <__assert_fail@plt+0x4634>
   15954:	ldr	r3, [r3]
   15958:	ldr	r2, [pc, #600]	; 15bb8 <__assert_fail@plt+0x46c4>
   1595c:	str	r3, [r2]
   15960:	b	15a48 <__assert_fail@plt+0x4554>
   15964:	ldr	r3, [pc, #528]	; 15b7c <__assert_fail@plt+0x4688>
   15968:	mov	r2, #1
   1596c:	strb	r2, [r3]
   15970:	b	15a4c <__assert_fail@plt+0x4558>
   15974:	ldr	r3, [pc, #428]	; 15b28 <__assert_fail@plt+0x4634>
   15978:	ldr	r3, [r3]
   1597c:	ldr	r2, [pc, #600]	; 15bdc <__assert_fail@plt+0x46e8>
   15980:	str	r3, [r2]
   15984:	b	15a4c <__assert_fail@plt+0x4558>
   15988:	ldr	r3, [pc, #408]	; 15b28 <__assert_fail@plt+0x4634>
   1598c:	ldr	r4, [r3]
   15990:	ldr	r0, [pc, #488]	; 15b80 <__assert_fail@plt+0x468c>
   15994:	bl	1135c <gettext@plt>
   15998:	mov	r2, r0
   1599c:	mov	r3, #0
   159a0:	str	r3, [sp, #16]
   159a4:	str	r2, [sp, #12]
   159a8:	ldr	r3, [pc, #400]	; 15b40 <__assert_fail@plt+0x464c>
   159ac:	str	r3, [sp, #8]
   159b0:	mvn	r2, #-2147483647	; 0x80000001
   159b4:	mov	r3, #0
   159b8:	strd	r2, [sp]
   159bc:	mov	r2, #1
   159c0:	mov	r3, #0
   159c4:	mov	r0, r4
   159c8:	bl	1acbc <__assert_fail@plt+0x97c8>
   159cc:	mov	r2, r0
   159d0:	mov	r3, r1
   159d4:	mov	r3, r2
   159d8:	str	r3, [fp, #-20]	; 0xffffffec
   159dc:	b	15a4c <__assert_fail@plt+0x4558>
   159e0:	ldr	r3, [pc, #412]	; 15b84 <__assert_fail@plt+0x4690>
   159e4:	mov	r2, #1
   159e8:	strb	r2, [r3]
   159ec:	b	15a4c <__assert_fail@plt+0x4558>
   159f0:	mov	r0, #0
   159f4:	bl	11c2c <__assert_fail@plt+0x738>
   159f8:	ldr	r3, [pc, #392]	; 15b88 <__assert_fail@plt+0x4694>
   159fc:	ldr	r0, [r3]
   15a00:	ldr	r3, [pc, #388]	; 15b8c <__assert_fail@plt+0x4698>
   15a04:	ldr	r2, [r3]
   15a08:	mov	r3, #0
   15a0c:	str	r3, [sp, #8]
   15a10:	ldr	r3, [pc, #376]	; 15b90 <__assert_fail@plt+0x469c>
   15a14:	str	r3, [sp, #4]
   15a18:	ldr	r3, [pc, #372]	; 15b94 <__assert_fail@plt+0x46a0>
   15a1c:	str	r3, [sp]
   15a20:	mov	r3, r2
   15a24:	ldr	r2, [pc, #364]	; 15b98 <__assert_fail@plt+0x46a4>
   15a28:	ldr	r1, [pc, #364]	; 15b9c <__assert_fail@plt+0x46a8>
   15a2c:	bl	19e00 <__assert_fail@plt+0x890c>
   15a30:	mov	r0, #0
   15a34:	bl	11350 <exit@plt>
   15a38:	mov	r0, #1
   15a3c:	bl	11c2c <__assert_fail@plt+0x738>
   15a40:	nop			; (mov r0, r0)
   15a44:	b	15070 <__assert_fail@plt+0x3b7c>
   15a48:	nop			; (mov r0, r0)
   15a4c:	b	15070 <__assert_fail@plt+0x3b7c>
   15a50:	nop			; (mov r0, r0)
   15a54:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   15a58:	orrs	r3, r2, r3
   15a5c:	beq	15a94 <__assert_fail@plt+0x45a0>
   15a60:	ldr	r3, [pc, #372]	; 15bdc <__assert_fail@plt+0x46e8>
   15a64:	ldr	r3, [r3]
   15a68:	cmp	r3, #0
   15a6c:	beq	15a94 <__assert_fail@plt+0x45a0>
   15a70:	ldr	r0, [pc, #296]	; 15ba0 <__assert_fail@plt+0x46ac>
   15a74:	bl	1135c <gettext@plt>
   15a78:	mov	r3, r0
   15a7c:	mov	r2, r3
   15a80:	mov	r1, #0
   15a84:	mov	r0, #0
   15a88:	bl	112d8 <error@plt>
   15a8c:	mov	r0, #1
   15a90:	bl	11c2c <__assert_fail@plt+0x738>
   15a94:	ldr	r3, [fp, #-16]
   15a98:	cmp	r3, #0
   15a9c:	bne	15ab4 <__assert_fail@plt+0x45c0>
   15aa0:	mov	r3, #3
   15aa4:	str	r3, [fp, #-16]
   15aa8:	mov	r2, #1000	; 0x3e8
   15aac:	mov	r3, #0
   15ab0:	strd	r2, [fp, #-84]	; 0xffffffac
   15ab4:	ldrd	r2, [fp, #-84]	; 0xffffffac
   15ab8:	orrs	r3, r2, r3
   15abc:	bne	15bfc <__assert_fail@plt+0x4708>
   15ac0:	ldr	r0, [pc, #124]	; 15b44 <__assert_fail@plt+0x4650>
   15ac4:	bl	1135c <gettext@plt>
   15ac8:	mov	r4, r0
   15acc:	ldr	r0, [pc, #208]	; 15ba4 <__assert_fail@plt+0x46b0>
   15ad0:	bl	19170 <__assert_fail@plt+0x7c7c>
   15ad4:	mov	r3, r0
   15ad8:	str	r3, [sp]
   15adc:	mov	r3, r4
   15ae0:	ldr	r2, [pc, #240]	; 15bd8 <__assert_fail@plt+0x46e4>
   15ae4:	mov	r1, #0
   15ae8:	mov	r0, #0
   15aec:	bl	112d8 <error@plt>
   15af0:	mov	r0, #1
   15af4:	bl	11c2c <__assert_fail@plt+0x738>
   15af8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   15afc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   15b00:	andeq	ip, r1, r4, asr #31
   15b04:	andeq	sp, r1, r8, lsr #25
   15b08:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   15b0c:	muleq	r1, r0, r3
   15b10:	andeq	sp, r1, r0, asr #25
   15b14:	andeq	sp, r1, r8, asr r1
   15b18:	andeq	sp, r1, r4, asr #25
   15b1c:	andeq	r0, r0, r1, lsl #2
   15b20:	andeq	r0, r0, r2, lsl #2
   15b24:	andeq	r0, r0, r3, lsl #2
   15b28:	andeq	pc, r2, r0, ror r3	; <UNPREDICTABLE>
   15b2c:	andeq	sp, r1, r0, ror #25
   15b30:	strdeq	sp, [r1], -r8
   15b34:	andeq	pc, r2, r0, lsr #9
   15b38:	andeq	sp, r1, r8, lsr #26
   15b3c:	andeq	sp, r1, ip, asr #26
   15b40:	ldrdeq	sp, [r1], -ip
   15b44:	andeq	sp, r1, r4, ror #26
   15b48:	andeq	sp, r1, ip, ror sp
   15b4c:	andeq	sp, r1, r0, lsl #27
   15b50:	andeq	pc, r2, r2, lsl r5	; <UNPREDICTABLE>
   15b54:	andeq	sp, r1, r4, lsl #27
   15b58:	muleq	r1, ip, sp
   15b5c:	andeq	sp, r1, r0, lsr #27
   15b60:	andeq	sp, r1, r0, asr #27
   15b64:	andeq	sp, r1, r8, ror #27
   15b68:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   15b6c:	andeq	sp, r1, r0, lsl lr
   15b70:	andeq	sp, r1, ip, lsl lr
   15b74:	andeq	sp, r1, r0, lsr lr
   15b78:	andeq	sp, r1, r0, ror #28
   15b7c:	andeq	pc, r2, r1, lsl r5	; <UNPREDICTABLE>
   15b80:	muleq	r1, r0, lr
   15b84:	andeq	pc, r2, r0, lsl r5	; <UNPREDICTABLE>
   15b88:	andeq	pc, r2, ip, ror #6
   15b8c:	andeq	pc, r2, r8, ror #2
   15b90:	andeq	sp, r1, r8, lsr #29
   15b94:			; <UNDEFINED> instruction: 0x0001debc
   15b98:	andeq	ip, r1, ip, lsl #30
   15b9c:	andeq	sp, r1, r4, asr #19
   15ba0:	ldrdeq	sp, [r1], -r0
   15ba4:	andeq	sp, r1, r8, lsl #30
   15ba8:	andeq	pc, r2, r4, ror #2
   15bac:	andeq	pc, r2, ip, lsl #9
   15bb0:	andeq	sp, r1, r4, lsl pc
   15bb4:	andeq	pc, r2, r0, ror #6
   15bb8:	muleq	r2, ip, r4
   15bbc:	muleq	r2, r8, r4
   15bc0:	andeq	sp, r1, r8, lsr #30
   15bc4:	andeq	sp, r1, ip, ror #24
   15bc8:	andeq	sp, r1, r8, ror #30
   15bcc:	andeq	pc, r2, r8, lsr #9
   15bd0:	andeq	sp, r1, r4, lsl #31
   15bd4:	andeq	sp, r1, r4, ror ip
   15bd8:	andeq	sp, r1, ip, lsl #30
   15bdc:	andeq	pc, r2, r8, ror r3	; <UNPREDICTABLE>
   15be0:	andeq	pc, r2, ip, lsl #7
   15be4:	andeq	pc, r2, ip, lsl #8
   15be8:	andeq	pc, r2, r4, lsr #9
   15bec:	andeq	sp, r1, r0, lsl #23
   15bf0:	andeq	pc, r2, r0, ror #2
   15bf4:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   15bf8:	muleq	r2, r0, r4
   15bfc:	ldr	r3, [pc, #-92]	; 15ba8 <__assert_fail@plt+0x46b4>
   15c00:	ldr	r3, [r3]
   15c04:	cmp	r3, #0
   15c08:	bge	15c18 <__assert_fail@plt+0x4724>
   15c0c:	ldr	r3, [pc, #-108]	; 15ba8 <__assert_fail@plt+0x46b4>
   15c10:	mov	r2, #10
   15c14:	str	r2, [r3]
   15c18:	ldrd	r0, [fp, #-84]	; 0xffffffac
   15c1c:	ldr	r2, [fp, #-16]
   15c20:	bl	11a34 <__assert_fail@plt+0x540>
   15c24:	ldr	r3, [pc, #-120]	; 15bb4 <__assert_fail@plt+0x46c0>
   15c28:	ldr	r2, [r3]
   15c2c:	ldr	r3, [fp, #-280]	; 0xfffffee8
   15c30:	cmp	r2, r3
   15c34:	bge	15c64 <__assert_fail@plt+0x4770>
   15c38:	ldr	r3, [pc, #-140]	; 15bb4 <__assert_fail@plt+0x46c0>
   15c3c:	ldr	r3, [r3]
   15c40:	add	r2, r3, #1
   15c44:	ldr	r1, [pc, #-152]	; 15bb4 <__assert_fail@plt+0x46c0>
   15c48:	str	r2, [r1]
   15c4c:	lsl	r3, r3, #2
   15c50:	ldr	r2, [fp, #-284]	; 0xfffffee4
   15c54:	add	r3, r2, r3
   15c58:	ldr	r3, [r3]
   15c5c:	ldr	r2, [pc, #-124]	; 15be8 <__assert_fail@plt+0x46f4>
   15c60:	str	r3, [r2]
   15c64:	ldr	r3, [pc, #-184]	; 15bb4 <__assert_fail@plt+0x46c0>
   15c68:	ldr	r2, [r3]
   15c6c:	ldr	r3, [fp, #-280]	; 0xfffffee8
   15c70:	cmp	r2, r3
   15c74:	bge	15ca4 <__assert_fail@plt+0x47b0>
   15c78:	ldr	r3, [pc, #-204]	; 15bb4 <__assert_fail@plt+0x46c0>
   15c7c:	ldr	r3, [r3]
   15c80:	add	r2, r3, #1
   15c84:	ldr	r1, [pc, #-216]	; 15bb4 <__assert_fail@plt+0x46c0>
   15c88:	str	r2, [r1]
   15c8c:	lsl	r3, r3, #2
   15c90:	ldr	r2, [fp, #-284]	; 0xfffffee4
   15c94:	add	r3, r2, r3
   15c98:	ldr	r3, [r3]
   15c9c:	ldr	r2, [pc, #-248]	; 15bac <__assert_fail@plt+0x46b8>
   15ca0:	str	r3, [r2]
   15ca4:	ldr	r3, [pc, #-248]	; 15bb4 <__assert_fail@plt+0x46c0>
   15ca8:	ldr	r2, [r3]
   15cac:	ldr	r3, [fp, #-280]	; 0xfffffee8
   15cb0:	cmp	r2, r3
   15cb4:	bge	15d00 <__assert_fail@plt+0x480c>
   15cb8:	ldr	r0, [pc, #-272]	; 15bb0 <__assert_fail@plt+0x46bc>
   15cbc:	bl	1135c <gettext@plt>
   15cc0:	mov	r4, r0
   15cc4:	ldr	r3, [pc, #-280]	; 15bb4 <__assert_fail@plt+0x46c0>
   15cc8:	ldr	r3, [r3]
   15ccc:	lsl	r3, r3, #2
   15cd0:	ldr	r2, [fp, #-284]	; 0xfffffee4
   15cd4:	add	r3, r2, r3
   15cd8:	ldr	r3, [r3]
   15cdc:	mov	r0, r3
   15ce0:	bl	19170 <__assert_fail@plt+0x7c7c>
   15ce4:	mov	r3, r0
   15ce8:	mov	r2, r4
   15cec:	mov	r1, #0
   15cf0:	mov	r0, #0
   15cf4:	bl	112d8 <error@plt>
   15cf8:	mov	r0, #1
   15cfc:	bl	11c2c <__assert_fail@plt+0x738>
   15d00:	ldr	r3, [pc, #-336]	; 15bb8 <__assert_fail@plt+0x46c4>
   15d04:	ldr	r3, [r3]
   15d08:	cmp	r3, #0
   15d0c:	beq	15d58 <__assert_fail@plt+0x4864>
   15d10:	ldr	r3, [pc, #-352]	; 15bb8 <__assert_fail@plt+0x46c4>
   15d14:	ldr	r3, [r3]
   15d18:	mov	r0, r3
   15d1c:	bl	11368 <strlen@plt>
   15d20:	mov	r2, r0
   15d24:	ldr	r3, [pc, #-368]	; 15bbc <__assert_fail@plt+0x46c8>
   15d28:	ldr	r3, [r3]
   15d2c:	cmp	r2, r3
   15d30:	bls	15d58 <__assert_fail@plt+0x4864>
   15d34:	ldr	r0, [pc, #-380]	; 15bc0 <__assert_fail@plt+0x46cc>
   15d38:	bl	1135c <gettext@plt>
   15d3c:	mov	r3, r0
   15d40:	mov	r2, r3
   15d44:	mov	r1, #0
   15d48:	mov	r0, #0
   15d4c:	bl	112d8 <error@plt>
   15d50:	mov	r0, #1
   15d54:	bl	11c2c <__assert_fail@plt+0x738>
   15d58:	ldr	r3, [pc, #-376]	; 15be8 <__assert_fail@plt+0x46f4>
   15d5c:	ldr	r3, [r3]
   15d60:	ldr	r1, [pc, #-420]	; 15bc4 <__assert_fail@plt+0x46d0>
   15d64:	mov	r0, r3
   15d68:	bl	11170 <strcmp@plt>
   15d6c:	mov	r3, r0
   15d70:	cmp	r3, #0
   15d74:	beq	15ddc <__assert_fail@plt+0x48e8>
   15d78:	ldr	r3, [pc, #-408]	; 15be8 <__assert_fail@plt+0x46f4>
   15d7c:	ldr	r1, [r3]
   15d80:	mov	r3, #0
   15d84:	mov	r2, #0
   15d88:	mov	r0, #0
   15d8c:	bl	16638 <__assert_fail@plt+0x5144>
   15d90:	mov	r3, r0
   15d94:	cmp	r3, #0
   15d98:	bge	15ddc <__assert_fail@plt+0x48e8>
   15d9c:	bl	113bc <__errno_location@plt>
   15da0:	mov	r3, r0
   15da4:	ldr	r4, [r3]
   15da8:	ldr	r0, [pc, #-488]	; 15bc8 <__assert_fail@plt+0x46d4>
   15dac:	bl	1135c <gettext@plt>
   15db0:	mov	r5, r0
   15db4:	ldr	r3, [pc, #-468]	; 15be8 <__assert_fail@plt+0x46f4>
   15db8:	ldr	r3, [r3]
   15dbc:	mov	r1, r3
   15dc0:	mov	r0, #4
   15dc4:	bl	18d78 <__assert_fail@plt+0x7884>
   15dc8:	mov	r3, r0
   15dcc:	mov	r2, r5
   15dd0:	mov	r1, r4
   15dd4:	mov	r0, #1
   15dd8:	bl	112d8 <error@plt>
   15ddc:	mov	r1, #0
   15de0:	mov	r0, #0
   15de4:	bl	1ab04 <__assert_fail@plt+0x9610>
   15de8:	ldr	r1, [pc, #-548]	; 15bcc <__assert_fail@plt+0x46d8>
   15dec:	mov	r0, #0
   15df0:	bl	1cd58 <__assert_fail@plt+0xb864>
   15df4:	mov	r3, r0
   15df8:	cmp	r3, #0
   15dfc:	beq	15e38 <__assert_fail@plt+0x4944>
   15e00:	bl	113bc <__errno_location@plt>
   15e04:	mov	r3, r0
   15e08:	ldr	r4, [r3]
   15e0c:	ldr	r3, [pc, #-556]	; 15be8 <__assert_fail@plt+0x46f4>
   15e10:	ldr	r3, [r3]
   15e14:	mov	r2, r3
   15e18:	mov	r1, #3
   15e1c:	mov	r0, #0
   15e20:	bl	18f00 <__assert_fail@plt+0x7a0c>
   15e24:	mov	r3, r0
   15e28:	ldr	r2, [pc, #-580]	; 15bec <__assert_fail@plt+0x46f8>
   15e2c:	mov	r1, r4
   15e30:	mov	r0, #1
   15e34:	bl	112d8 <error@plt>
   15e38:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e3c:	cmp	r3, #0
   15e40:	movne	r3, #1
   15e44:	moveq	r3, #0
   15e48:	strb	r3, [fp, #-61]	; 0xffffffc3
   15e4c:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   15e50:	eor	r3, r3, #1
   15e54:	uxtb	r3, r3
   15e58:	cmp	r3, #0
   15e5c:	beq	15e84 <__assert_fail@plt+0x4990>
   15e60:	ldr	r4, [pc, #-668]	; 15bcc <__assert_fail@plt+0x46d8>
   15e64:	mov	r0, sp
   15e68:	add	r3, r4, #16
   15e6c:	mov	r2, #88	; 0x58
   15e70:	mov	r1, r3
   15e74:	bl	111dc <memcpy@plt>
   15e78:	ldm	r4, {r0, r1, r2, r3}
   15e7c:	bl	11918 <__assert_fail@plt+0x424>
   15e80:	str	r0, [fp, #-20]	; 0xffffffec
   15e84:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15e88:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e8c:	add	r3, r3, #1
   15e90:	mov	r1, r3
   15e94:	mov	r0, r2
   15e98:	bl	19ee4 <__assert_fail@plt+0x89f0>
   15e9c:	mov	r3, r0
   15ea0:	str	r3, [fp, #-68]	; 0xffffffbc
   15ea4:	mvn	r3, #0
   15ea8:	str	r3, [fp, #-44]	; 0xffffffd4
   15eac:	ldr	r3, [fp, #-16]
   15eb0:	cmp	r3, #5
   15eb4:	beq	15ec4 <__assert_fail@plt+0x49d0>
   15eb8:	ldr	r3, [fp, #-16]
   15ebc:	cmp	r3, #6
   15ec0:	bne	15fd0 <__assert_fail@plt+0x4adc>
   15ec4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ec8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15ecc:	ldr	r1, [pc, #-776]	; 15bcc <__assert_fail@plt+0x46d8>
   15ed0:	mov	r0, #0
   15ed4:	bl	11da4 <__assert_fail@plt+0x8b0>
   15ed8:	strd	r0, [fp, #-36]	; 0xffffffdc
   15edc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   15ee0:	cmp	r2, #0
   15ee4:	sbcs	r3, r3, #0
   15ee8:	bge	15f30 <__assert_fail@plt+0x4a3c>
   15eec:	bl	113bc <__errno_location@plt>
   15ef0:	mov	r3, r0
   15ef4:	ldr	r4, [r3]
   15ef8:	ldr	r0, [pc, #-816]	; 15bd0 <__assert_fail@plt+0x46dc>
   15efc:	bl	1135c <gettext@plt>
   15f00:	mov	r5, r0
   15f04:	ldr	r3, [pc, #-804]	; 15be8 <__assert_fail@plt+0x46f4>
   15f08:	ldr	r3, [r3]
   15f0c:	mov	r2, r3
   15f10:	mov	r1, #3
   15f14:	mov	r0, #0
   15f18:	bl	18f00 <__assert_fail@plt+0x7a0c>
   15f1c:	mov	r3, r0
   15f20:	mov	r2, r5
   15f24:	mov	r1, r4
   15f28:	mov	r0, #1
   15f2c:	bl	112d8 <error@plt>
   15f30:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f34:	mov	r0, r3
   15f38:	asr	r1, r0, #31
   15f3c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   15f40:	cmp	r2, r0
   15f44:	sbcs	ip, r3, r1
   15f48:	bge	15f54 <__assert_fail@plt+0x4a60>
   15f4c:	mov	r0, r2
   15f50:	mov	r1, r3
   15f54:	mov	r3, r0
   15f58:	str	r3, [fp, #-44]	; 0xffffffd4
   15f5c:	ldrd	r2, [fp, #-84]	; 0xffffffac
   15f60:	cmp	r2, #0
   15f64:	sbcs	r3, r3, #0
   15f68:	bge	15fb0 <__assert_fail@plt+0x4abc>
   15f6c:	ldr	r0, [pc, #-928]	; 15bd4 <__assert_fail@plt+0x46e0>
   15f70:	bl	1135c <gettext@plt>
   15f74:	mov	r4, r0
   15f78:	ldrd	r0, [fp, #-84]	; 0xffffffac
   15f7c:	sub	r3, fp, #132	; 0x84
   15f80:	mov	r2, r3
   15f84:	bl	169ac <__assert_fail@plt+0x54b8>
   15f88:	mov	r3, r0
   15f8c:	mov	r0, r3
   15f90:	bl	19170 <__assert_fail@plt+0x7c7c>
   15f94:	mov	r3, r0
   15f98:	str	r3, [sp]
   15f9c:	mov	r3, r4
   15fa0:	ldr	r2, [pc, #-976]	; 15bd8 <__assert_fail@plt+0x46e4>
   15fa4:	mov	r1, #75	; 0x4b
   15fa8:	mov	r0, #1
   15fac:	bl	112d8 <error@plt>
   15fb0:	ldrd	r2, [fp, #-84]	; 0xffffffac
   15fb4:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   15fb8:	cmp	r3, r1
   15fbc:	cmpeq	r2, r0
   15fc0:	bcs	15fcc <__assert_fail@plt+0x4ad8>
   15fc4:	mov	r2, r0
   15fc8:	mov	r3, r1
   15fcc:	strd	r2, [fp, #-36]	; 0xffffffdc
   15fd0:	ldr	r3, [pc, #-1020]	; 15bdc <__assert_fail@plt+0x46e8>
   15fd4:	ldr	r3, [r3]
   15fd8:	cmp	r3, #0
   15fdc:	beq	16024 <__assert_fail@plt+0x4b30>
   15fe0:	ldr	r0, [pc, #-1028]	; 15be4 <__assert_fail@plt+0x46f0>
   15fe4:	bl	1144c <sigemptyset@plt>
   15fe8:	sub	r3, fp, #276	; 0x114
   15fec:	mov	r2, r3
   15ff0:	mov	r1, #0
   15ff4:	mov	r0, #13
   15ff8:	bl	1126c <sigaction@plt>
   15ffc:	ldr	r3, [fp, #-276]	; 0xfffffeec
   16000:	cmp	r3, #1
   16004:	beq	16014 <__assert_fail@plt+0x4b20>
   16008:	mov	r1, #13
   1600c:	ldr	r0, [pc, #-1072]	; 15be4 <__assert_fail@plt+0x46f0>
   16010:	bl	11308 <sigaddset@plt>
   16014:	ldr	r2, [pc, #-1084]	; 15be0 <__assert_fail@plt+0x46ec>
   16018:	ldr	r1, [pc, #-1084]	; 15be4 <__assert_fail@plt+0x46f0>
   1601c:	mov	r0, #0
   16020:	bl	111ac <sigprocmask@plt>
   16024:	ldr	r3, [fp, #-16]
   16028:	sub	r3, r3, #1
   1602c:	cmp	r3, #6
   16030:	ldrls	pc, [pc, r3, lsl #2]
   16034:	b	16194 <__assert_fail@plt+0x4ca0>
   16038:	andeq	r6, r1, r8, rrx
   1603c:	muleq	r1, r4, r0
   16040:	andeq	r6, r1, r4, asr r0
   16044:	andeq	r6, r1, r4, asr r0
   16048:	andeq	r6, r1, r8, lsr #1
   1604c:	andeq	r6, r1, r4, lsr r1
   16050:	andeq	r6, r1, ip, ror #2
   16054:	ldrd	r0, [fp, #-84]	; 0xffffffac
   16058:	ldr	r3, [fp, #-20]	; 0xffffffec
   1605c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16060:	bl	13388 <__assert_fail@plt+0x1e94>
   16064:	b	16198 <__assert_fail@plt+0x4ca4>
   16068:	ldrd	r0, [fp, #-84]	; 0xffffffac
   1606c:	ldr	ip, [fp, #-20]	; 0xffffffec
   16070:	mov	r2, #0
   16074:	mov	r3, #0
   16078:	strd	r2, [sp, #8]
   1607c:	mvn	r3, #0
   16080:	str	r3, [sp]
   16084:	mov	r3, ip
   16088:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1608c:	bl	13040 <__assert_fail@plt+0x1b4c>
   16090:	b	16198 <__assert_fail@plt+0x4ca4>
   16094:	ldrd	r0, [fp, #-84]	; 0xffffffac
   16098:	ldr	r3, [fp, #-20]	; 0xffffffec
   1609c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   160a0:	bl	13540 <__assert_fail@plt+0x204c>
   160a4:	b	16198 <__assert_fail@plt+0x4ca4>
   160a8:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   160ac:	orrs	r3, r2, r3
   160b0:	bne	160fc <__assert_fail@plt+0x4c08>
   160b4:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   160b8:	ldrd	r2, [fp, #-84]	; 0xffffffac
   160bc:	bl	1cb68 <__assert_fail@plt+0xb674>
   160c0:	mov	r2, r0
   160c4:	mov	r3, r1
   160c8:	mov	r4, r2
   160cc:	mov	r5, r3
   160d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   160d4:	ldrd	r2, [fp, #-84]	; 0xffffffac
   160d8:	strd	r2, [sp, #8]
   160dc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   160e0:	str	r3, [sp]
   160e4:	mov	r3, r1
   160e8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   160ec:	mov	r0, r4
   160f0:	mov	r1, r5
   160f4:	bl	13040 <__assert_fail@plt+0x1b4c>
   160f8:	b	16198 <__assert_fail@plt+0x4ca4>
   160fc:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   16100:	ldrd	r4, [fp, #-84]	; 0xffffffac
   16104:	ldr	ip, [fp, #-20]	; 0xffffffec
   16108:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1610c:	strd	r2, [sp, #16]
   16110:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16114:	str	r3, [sp, #8]
   16118:	str	ip, [sp, #4]
   1611c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16120:	str	r3, [sp]
   16124:	mov	r2, r4
   16128:	mov	r3, r5
   1612c:	bl	14054 <__assert_fail@plt+0x2b60>
   16130:	b	16198 <__assert_fail@plt+0x4ca4>
   16134:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   16138:	ldrd	r4, [fp, #-84]	; 0xffffffac
   1613c:	ldr	ip, [fp, #-20]	; 0xffffffec
   16140:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   16144:	strd	r2, [sp, #16]
   16148:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1614c:	str	r3, [sp, #8]
   16150:	str	ip, [sp, #4]
   16154:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16158:	str	r3, [sp]
   1615c:	mov	r2, r4
   16160:	mov	r3, r5
   16164:	bl	13a28 <__assert_fail@plt+0x2534>
   16168:	b	16198 <__assert_fail@plt+0x4ca4>
   1616c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   16170:	ldrd	r2, [fp, #-84]	; 0xffffffac
   16174:	ldr	ip, [fp, #-20]	; 0xffffffec
   16178:	sub	lr, fp, #136	; 0x88
   1617c:	str	lr, [sp, #8]
   16180:	str	ip, [sp, #4]
   16184:	ldr	ip, [fp, #-68]	; 0xffffffbc
   16188:	str	ip, [sp]
   1618c:	bl	14708 <__assert_fail@plt+0x3214>
   16190:	b	16198 <__assert_fail@plt+0x4ca4>
   16194:	bl	114d0 <abort@plt>
   16198:	mov	r0, #0
   1619c:	bl	114dc <close@plt>
   161a0:	mov	r3, r0
   161a4:	cmp	r3, #0
   161a8:	beq	161e4 <__assert_fail@plt+0x4cf0>
   161ac:	bl	113bc <__errno_location@plt>
   161b0:	mov	r3, r0
   161b4:	ldr	r4, [r3]
   161b8:	ldr	r3, [pc, #-1496]	; 15be8 <__assert_fail@plt+0x46f4>
   161bc:	ldr	r3, [r3]
   161c0:	mov	r2, r3
   161c4:	mov	r1, #3
   161c8:	mov	r0, #0
   161cc:	bl	18f00 <__assert_fail@plt+0x7a0c>
   161d0:	mov	r3, r0
   161d4:	ldr	r2, [pc, #-1520]	; 15bec <__assert_fail@plt+0x46f8>
   161d8:	mov	r1, r4
   161dc:	mov	r0, #1
   161e0:	bl	112d8 <error@plt>
   161e4:	ldr	r3, [pc, #-1532]	; 15bf0 <__assert_fail@plt+0x46fc>
   161e8:	ldr	r1, [r3]
   161ec:	ldr	r3, [pc, #-1536]	; 15bf4 <__assert_fail@plt+0x4700>
   161f0:	ldr	r2, [r3]
   161f4:	ldr	r3, [pc, #-1540]	; 15bf8 <__assert_fail@plt+0x4704>
   161f8:	ldr	r3, [r3]
   161fc:	mov	r0, #0
   16200:	bl	12b24 <__assert_fail@plt+0x1630>
   16204:	mov	r0, #0
   16208:	bl	11350 <exit@plt>
   1620c:	push	{fp}		; (str fp, [sp, #-4]!)
   16210:	add	fp, sp, #0
   16214:	sub	sp, sp, #28
   16218:	str	r0, [fp, #-24]	; 0xffffffe8
   1621c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16220:	str	r3, [fp, #-8]
   16224:	mov	r3, #0
   16228:	strb	r3, [fp, #-13]
   1622c:	b	1623c <__assert_fail@plt+0x4d48>
   16230:	ldr	r3, [fp, #-8]
   16234:	add	r3, r3, #1
   16238:	str	r3, [fp, #-8]
   1623c:	ldr	r3, [fp, #-8]
   16240:	ldrb	r3, [r3]
   16244:	cmp	r3, #47	; 0x2f
   16248:	beq	16230 <__assert_fail@plt+0x4d3c>
   1624c:	ldr	r3, [fp, #-8]
   16250:	str	r3, [fp, #-12]
   16254:	b	1629c <__assert_fail@plt+0x4da8>
   16258:	ldr	r3, [fp, #-12]
   1625c:	ldrb	r3, [r3]
   16260:	cmp	r3, #47	; 0x2f
   16264:	bne	16274 <__assert_fail@plt+0x4d80>
   16268:	mov	r3, #1
   1626c:	strb	r3, [fp, #-13]
   16270:	b	16290 <__assert_fail@plt+0x4d9c>
   16274:	ldrb	r3, [fp, #-13]
   16278:	cmp	r3, #0
   1627c:	beq	16290 <__assert_fail@plt+0x4d9c>
   16280:	ldr	r3, [fp, #-12]
   16284:	str	r3, [fp, #-8]
   16288:	mov	r3, #0
   1628c:	strb	r3, [fp, #-13]
   16290:	ldr	r3, [fp, #-12]
   16294:	add	r3, r3, #1
   16298:	str	r3, [fp, #-12]
   1629c:	ldr	r3, [fp, #-12]
   162a0:	ldrb	r3, [r3]
   162a4:	cmp	r3, #0
   162a8:	bne	16258 <__assert_fail@plt+0x4d64>
   162ac:	ldr	r3, [fp, #-8]
   162b0:	mov	r0, r3
   162b4:	add	sp, fp, #0
   162b8:	pop	{fp}		; (ldr fp, [sp], #4)
   162bc:	bx	lr
   162c0:	push	{fp, lr}
   162c4:	add	fp, sp, #4
   162c8:	sub	sp, sp, #16
   162cc:	str	r0, [fp, #-16]
   162d0:	mov	r3, #0
   162d4:	str	r3, [fp, #-12]
   162d8:	ldr	r0, [fp, #-16]
   162dc:	bl	11368 <strlen@plt>
   162e0:	str	r0, [fp, #-8]
   162e4:	b	162f4 <__assert_fail@plt+0x4e00>
   162e8:	ldr	r3, [fp, #-8]
   162ec:	sub	r3, r3, #1
   162f0:	str	r3, [fp, #-8]
   162f4:	ldr	r3, [fp, #-8]
   162f8:	cmp	r3, #1
   162fc:	bls	1631c <__assert_fail@plt+0x4e28>
   16300:	ldr	r3, [fp, #-8]
   16304:	sub	r3, r3, #1
   16308:	ldr	r2, [fp, #-16]
   1630c:	add	r3, r2, r3
   16310:	ldrb	r3, [r3]
   16314:	cmp	r3, #47	; 0x2f
   16318:	beq	162e8 <__assert_fail@plt+0x4df4>
   1631c:	ldr	r3, [fp, #-8]
   16320:	mov	r0, r3
   16324:	sub	sp, fp, #4
   16328:	pop	{fp, pc}
   1632c:	push	{fp}		; (str fp, [sp, #-4]!)
   16330:	add	fp, sp, #0
   16334:	sub	sp, sp, #12
   16338:	str	r0, [fp, #-8]
   1633c:	ldr	r2, [pc, #20]	; 16358 <__assert_fail@plt+0x4e64>
   16340:	ldr	r3, [fp, #-8]
   16344:	str	r3, [r2]
   16348:	nop			; (mov r0, r0)
   1634c:	add	sp, fp, #0
   16350:	pop	{fp}		; (ldr fp, [sp], #4)
   16354:	bx	lr
   16358:	andeq	pc, r2, r4, lsr #10
   1635c:	push	{fp}		; (str fp, [sp, #-4]!)
   16360:	add	fp, sp, #0
   16364:	sub	sp, sp, #12
   16368:	mov	r3, r0
   1636c:	strb	r3, [fp, #-5]
   16370:	ldr	r2, [pc, #20]	; 1638c <__assert_fail@plt+0x4e98>
   16374:	ldrb	r3, [fp, #-5]
   16378:	strb	r3, [r2]
   1637c:	nop			; (mov r0, r0)
   16380:	add	sp, fp, #0
   16384:	pop	{fp}		; (ldr fp, [sp], #4)
   16388:	bx	lr
   1638c:	andeq	pc, r2, r8, lsr #10
   16390:	push	{r4, fp, lr}
   16394:	add	fp, sp, #8
   16398:	sub	sp, sp, #20
   1639c:	ldr	r3, [pc, #256]	; 164a4 <__assert_fail@plt+0x4fb0>
   163a0:	ldr	r3, [r3]
   163a4:	mov	r0, r3
   163a8:	bl	1b8a8 <__assert_fail@plt+0xa3b4>
   163ac:	mov	r3, r0
   163b0:	cmp	r3, #0
   163b4:	beq	1646c <__assert_fail@plt+0x4f78>
   163b8:	ldr	r3, [pc, #232]	; 164a8 <__assert_fail@plt+0x4fb4>
   163bc:	ldrb	r3, [r3]
   163c0:	eor	r3, r3, #1
   163c4:	uxtb	r3, r3
   163c8:	cmp	r3, #0
   163cc:	bne	163e4 <__assert_fail@plt+0x4ef0>
   163d0:	bl	113bc <__errno_location@plt>
   163d4:	mov	r3, r0
   163d8:	ldr	r3, [r3]
   163dc:	cmp	r3, #32
   163e0:	beq	1646c <__assert_fail@plt+0x4f78>
   163e4:	ldr	r0, [pc, #192]	; 164ac <__assert_fail@plt+0x4fb8>
   163e8:	bl	1135c <gettext@plt>
   163ec:	str	r0, [fp, #-16]
   163f0:	ldr	r3, [pc, #184]	; 164b0 <__assert_fail@plt+0x4fbc>
   163f4:	ldr	r3, [r3]
   163f8:	cmp	r3, #0
   163fc:	beq	16440 <__assert_fail@plt+0x4f4c>
   16400:	bl	113bc <__errno_location@plt>
   16404:	mov	r3, r0
   16408:	ldr	r4, [r3]
   1640c:	ldr	r3, [pc, #156]	; 164b0 <__assert_fail@plt+0x4fbc>
   16410:	ldr	r3, [r3]
   16414:	mov	r0, r3
   16418:	bl	18ea0 <__assert_fail@plt+0x79ac>
   1641c:	mov	r2, r0
   16420:	ldr	r3, [fp, #-16]
   16424:	str	r3, [sp]
   16428:	mov	r3, r2
   1642c:	ldr	r2, [pc, #128]	; 164b4 <__assert_fail@plt+0x4fc0>
   16430:	mov	r1, r4
   16434:	mov	r0, #0
   16438:	bl	112d8 <error@plt>
   1643c:	b	1645c <__assert_fail@plt+0x4f68>
   16440:	bl	113bc <__errno_location@plt>
   16444:	mov	r3, r0
   16448:	ldr	r1, [r3]
   1644c:	ldr	r3, [fp, #-16]
   16450:	ldr	r2, [pc, #96]	; 164b8 <__assert_fail@plt+0x4fc4>
   16454:	mov	r0, #0
   16458:	bl	112d8 <error@plt>
   1645c:	ldr	r3, [pc, #88]	; 164bc <__assert_fail@plt+0x4fc8>
   16460:	ldr	r3, [r3]
   16464:	mov	r0, r3
   16468:	bl	111d0 <_exit@plt>
   1646c:	ldr	r3, [pc, #76]	; 164c0 <__assert_fail@plt+0x4fcc>
   16470:	ldr	r3, [r3]
   16474:	mov	r0, r3
   16478:	bl	1b8a8 <__assert_fail@plt+0xa3b4>
   1647c:	mov	r3, r0
   16480:	cmp	r3, #0
   16484:	beq	16498 <__assert_fail@plt+0x4fa4>
   16488:	ldr	r3, [pc, #44]	; 164bc <__assert_fail@plt+0x4fc8>
   1648c:	ldr	r3, [r3]
   16490:	mov	r0, r3
   16494:	bl	111d0 <_exit@plt>
   16498:	nop			; (mov r0, r0)
   1649c:	sub	sp, fp, #8
   164a0:	pop	{r4, fp, pc}
   164a4:	andeq	pc, r2, ip, ror #6
   164a8:	andeq	pc, r2, r8, lsr #10
   164ac:	strdeq	sp, [r1], -ip
   164b0:	andeq	pc, r2, r4, lsr #10
   164b4:	andeq	lr, r1, r8
   164b8:	andeq	lr, r1, r0, lsl r0
   164bc:	andeq	pc, r2, ip, ror #2
   164c0:	andeq	pc, r2, r8, ror #6
   164c4:	push	{fp, lr}
   164c8:	add	fp, sp, #4
   164cc:	sub	sp, sp, #32
   164d0:	str	r0, [fp, #-24]	; 0xffffffe8
   164d4:	mov	r3, #0
   164d8:	str	r3, [fp, #-8]
   164dc:	mov	r3, #0
   164e0:	str	r3, [fp, #-12]
   164e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   164e8:	bl	113ec <fileno@plt>
   164ec:	str	r0, [fp, #-16]
   164f0:	ldr	r3, [fp, #-16]
   164f4:	cmp	r3, #0
   164f8:	bge	1650c <__assert_fail@plt+0x5018>
   164fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16500:	bl	11410 <fclose@plt>
   16504:	mov	r3, r0
   16508:	b	165b0 <__assert_fail@plt+0x50bc>
   1650c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16510:	bl	11320 <__freading@plt>
   16514:	mov	r3, r0
   16518:	cmp	r3, #0
   1651c:	beq	16558 <__assert_fail@plt+0x5064>
   16520:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16524:	bl	113ec <fileno@plt>
   16528:	mov	r1, r0
   1652c:	mov	r3, #1
   16530:	str	r3, [sp]
   16534:	mov	r2, #0
   16538:	mov	r3, #0
   1653c:	mov	r0, r1
   16540:	bl	11284 <lseek64@plt>
   16544:	mvn	r2, #0
   16548:	mvn	r3, #0
   1654c:	cmp	r1, r3
   16550:	cmpeq	r0, r2
   16554:	beq	1657c <__assert_fail@plt+0x5088>
   16558:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1655c:	bl	1671c <__assert_fail@plt+0x5228>
   16560:	mov	r3, r0
   16564:	cmp	r3, #0
   16568:	beq	1657c <__assert_fail@plt+0x5088>
   1656c:	bl	113bc <__errno_location@plt>
   16570:	mov	r3, r0
   16574:	ldr	r3, [r3]
   16578:	str	r3, [fp, #-8]
   1657c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16580:	bl	11410 <fclose@plt>
   16584:	str	r0, [fp, #-12]
   16588:	ldr	r3, [fp, #-8]
   1658c:	cmp	r3, #0
   16590:	beq	165ac <__assert_fail@plt+0x50b8>
   16594:	bl	113bc <__errno_location@plt>
   16598:	mov	r2, r0
   1659c:	ldr	r3, [fp, #-8]
   165a0:	str	r3, [r2]
   165a4:	mvn	r3, #0
   165a8:	str	r3, [fp, #-12]
   165ac:	ldr	r3, [fp, #-12]
   165b0:	mov	r0, r3
   165b4:	sub	sp, fp, #4
   165b8:	pop	{fp, pc}
   165bc:	push	{r1, r2, r3}
   165c0:	push	{fp, lr}
   165c4:	add	fp, sp, #4
   165c8:	sub	sp, sp, #20
   165cc:	str	r0, [fp, #-20]	; 0xffffffec
   165d0:	mov	r3, #0
   165d4:	str	r3, [fp, #-12]
   165d8:	ldr	r3, [fp, #4]
   165dc:	and	r3, r3, #64	; 0x40
   165e0:	cmp	r3, #0
   165e4:	beq	16604 <__assert_fail@plt+0x5110>
   165e8:	add	r3, fp, #8
   165ec:	str	r3, [fp, #-16]
   165f0:	ldr	r3, [fp, #-16]
   165f4:	add	r2, r3, #4
   165f8:	str	r2, [fp, #-16]
   165fc:	ldr	r3, [r3]
   16600:	str	r3, [fp, #-12]
   16604:	ldr	r2, [fp, #-12]
   16608:	ldr	r1, [fp, #4]
   1660c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16610:	bl	112e4 <open64@plt>
   16614:	mov	r3, r0
   16618:	mov	r0, r3
   1661c:	bl	196ec <__assert_fail@plt+0x81f8>
   16620:	mov	r3, r0
   16624:	mov	r0, r3
   16628:	sub	sp, fp, #4
   1662c:	pop	{fp, lr}
   16630:	add	sp, sp, #12
   16634:	bx	lr
   16638:	push	{fp, lr}
   1663c:	add	fp, sp, #4
   16640:	sub	sp, sp, #32
   16644:	str	r0, [fp, #-24]	; 0xffffffe8
   16648:	str	r1, [fp, #-28]	; 0xffffffe4
   1664c:	str	r2, [fp, #-32]	; 0xffffffe0
   16650:	str	r3, [fp, #-36]	; 0xffffffdc
   16654:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16658:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1665c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16660:	bl	112e4 <open64@plt>
   16664:	str	r0, [fp, #-8]
   16668:	ldr	r2, [fp, #-8]
   1666c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16670:	cmp	r2, r3
   16674:	beq	16684 <__assert_fail@plt+0x5190>
   16678:	ldr	r3, [fp, #-8]
   1667c:	cmp	r3, #0
   16680:	bge	1668c <__assert_fail@plt+0x5198>
   16684:	ldr	r3, [fp, #-8]
   16688:	b	166c8 <__assert_fail@plt+0x51d4>
   1668c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16690:	ldr	r0, [fp, #-8]
   16694:	bl	11224 <dup2@plt>
   16698:	str	r0, [fp, #-12]
   1669c:	bl	113bc <__errno_location@plt>
   166a0:	mov	r3, r0
   166a4:	ldr	r3, [r3]
   166a8:	str	r3, [fp, #-16]
   166ac:	ldr	r0, [fp, #-8]
   166b0:	bl	114dc <close@plt>
   166b4:	bl	113bc <__errno_location@plt>
   166b8:	mov	r2, r0
   166bc:	ldr	r3, [fp, #-16]
   166c0:	str	r3, [r2]
   166c4:	ldr	r3, [fp, #-12]
   166c8:	mov	r0, r3
   166cc:	sub	sp, fp, #4
   166d0:	pop	{fp, pc}
   166d4:	push	{fp, lr}
   166d8:	add	fp, sp, #4
   166dc:	sub	sp, sp, #16
   166e0:	str	r0, [fp, #-8]
   166e4:	ldr	r3, [fp, #-8]
   166e8:	ldr	r3, [r3]
   166ec:	and	r3, r3, #256	; 0x100
   166f0:	cmp	r3, #0
   166f4:	beq	16710 <__assert_fail@plt+0x521c>
   166f8:	mov	r3, #1
   166fc:	str	r3, [sp]
   16700:	mov	r2, #0
   16704:	mov	r3, #0
   16708:	ldr	r0, [fp, #-8]
   1670c:	bl	16808 <__assert_fail@plt+0x5314>
   16710:	nop			; (mov r0, r0)
   16714:	sub	sp, fp, #4
   16718:	pop	{fp, pc}
   1671c:	push	{fp, lr}
   16720:	add	fp, sp, #4
   16724:	sub	sp, sp, #8
   16728:	str	r0, [fp, #-8]
   1672c:	ldr	r3, [fp, #-8]
   16730:	cmp	r3, #0
   16734:	beq	1674c <__assert_fail@plt+0x5258>
   16738:	ldr	r0, [fp, #-8]
   1673c:	bl	11320 <__freading@plt>
   16740:	mov	r3, r0
   16744:	cmp	r3, #0
   16748:	bne	1675c <__assert_fail@plt+0x5268>
   1674c:	ldr	r0, [fp, #-8]
   16750:	bl	111a0 <fflush@plt>
   16754:	mov	r3, r0
   16758:	b	16770 <__assert_fail@plt+0x527c>
   1675c:	ldr	r0, [fp, #-8]
   16760:	bl	166d4 <__assert_fail@plt+0x51e0>
   16764:	ldr	r0, [fp, #-8]
   16768:	bl	111a0 <fflush@plt>
   1676c:	mov	r3, r0
   16770:	mov	r0, r3
   16774:	sub	sp, fp, #4
   16778:	pop	{fp, pc}
   1677c:	push	{r4, fp, lr}
   16780:	add	fp, sp, #8
   16784:	sub	sp, sp, #20
   16788:	str	r0, [fp, #-24]	; 0xffffffe8
   1678c:	bl	113bc <__errno_location@plt>
   16790:	mov	r3, r0
   16794:	ldr	r3, [r3]
   16798:	str	r3, [fp, #-20]	; 0xffffffec
   1679c:	bl	113bc <__errno_location@plt>
   167a0:	mov	r3, r0
   167a4:	ldr	r3, [r3]
   167a8:	str	r3, [fp, #-16]
   167ac:	bl	113bc <__errno_location@plt>
   167b0:	mov	r2, r0
   167b4:	mov	r3, #0
   167b8:	str	r3, [r2]
   167bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   167c0:	bl	111c4 <free@plt>
   167c4:	bl	113bc <__errno_location@plt>
   167c8:	mov	r4, r0
   167cc:	bl	113bc <__errno_location@plt>
   167d0:	mov	r3, r0
   167d4:	ldr	r3, [r3]
   167d8:	cmp	r3, #0
   167dc:	moveq	r3, #1
   167e0:	movne	r3, #0
   167e4:	uxtb	r3, r3
   167e8:	lsl	r3, r3, #2
   167ec:	sub	r2, fp, #12
   167f0:	add	r3, r2, r3
   167f4:	ldr	r3, [r3, #-8]
   167f8:	str	r3, [r4]
   167fc:	nop			; (mov r0, r0)
   16800:	sub	sp, fp, #8
   16804:	pop	{r4, fp, pc}
   16808:	push	{fp, lr}
   1680c:	add	fp, sp, #4
   16810:	sub	sp, sp, #32
   16814:	str	r0, [fp, #-16]
   16818:	strd	r2, [fp, #-28]	; 0xffffffe4
   1681c:	ldr	r3, [fp, #-16]
   16820:	ldr	r2, [r3, #8]
   16824:	ldr	r3, [fp, #-16]
   16828:	ldr	r3, [r3, #4]
   1682c:	cmp	r2, r3
   16830:	bne	168c8 <__assert_fail@plt+0x53d4>
   16834:	ldr	r3, [fp, #-16]
   16838:	ldr	r2, [r3, #20]
   1683c:	ldr	r3, [fp, #-16]
   16840:	ldr	r3, [r3, #16]
   16844:	cmp	r2, r3
   16848:	bne	168c8 <__assert_fail@plt+0x53d4>
   1684c:	ldr	r3, [fp, #-16]
   16850:	ldr	r3, [r3, #36]	; 0x24
   16854:	cmp	r3, #0
   16858:	bne	168c8 <__assert_fail@plt+0x53d4>
   1685c:	ldr	r0, [fp, #-16]
   16860:	bl	113ec <fileno@plt>
   16864:	mov	r1, r0
   16868:	ldr	r3, [fp, #4]
   1686c:	str	r3, [sp]
   16870:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16874:	mov	r0, r1
   16878:	bl	11284 <lseek64@plt>
   1687c:	strd	r0, [fp, #-12]
   16880:	ldrd	r2, [fp, #-12]
   16884:	mvn	r0, #0
   16888:	mvn	r1, #0
   1688c:	cmp	r3, r1
   16890:	cmpeq	r2, r0
   16894:	bne	168a0 <__assert_fail@plt+0x53ac>
   16898:	mvn	r3, #0
   1689c:	b	168e0 <__assert_fail@plt+0x53ec>
   168a0:	ldr	r3, [fp, #-16]
   168a4:	ldr	r3, [r3]
   168a8:	bic	r2, r3, #16
   168ac:	ldr	r3, [fp, #-16]
   168b0:	str	r2, [r3]
   168b4:	ldr	r1, [fp, #-16]
   168b8:	ldrd	r2, [fp, #-12]
   168bc:	strd	r2, [r1, #80]	; 0x50
   168c0:	mov	r3, #0
   168c4:	b	168e0 <__assert_fail@plt+0x53ec>
   168c8:	ldr	r3, [fp, #4]
   168cc:	str	r3, [sp]
   168d0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   168d4:	ldr	r0, [fp, #-16]
   168d8:	bl	11428 <fseeko64@plt>
   168dc:	mov	r3, r0
   168e0:	mov	r0, r3
   168e4:	sub	sp, fp, #4
   168e8:	pop	{fp, pc}
   168ec:	push	{fp, lr}
   168f0:	add	fp, sp, #4
   168f4:	sub	sp, sp, #32
   168f8:	str	r0, [fp, #-24]	; 0xffffffe8
   168fc:	str	r1, [fp, #-28]	; 0xffffffe4
   16900:	str	r2, [fp, #-32]	; 0xffffffe0
   16904:	mov	r3, #0
   16908:	str	r3, [fp, #-8]
   1690c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16910:	str	r3, [fp, #-12]
   16914:	b	16988 <__assert_fail@plt+0x5494>
   16918:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1691c:	ldr	r1, [fp, #-12]
   16920:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16924:	bl	19240 <__assert_fail@plt+0x7d4c>
   16928:	str	r0, [fp, #-16]
   1692c:	ldr	r3, [fp, #-16]
   16930:	cmn	r3, #1
   16934:	beq	16998 <__assert_fail@plt+0x54a4>
   16938:	ldr	r3, [fp, #-16]
   1693c:	cmp	r3, #0
   16940:	bne	16958 <__assert_fail@plt+0x5464>
   16944:	bl	113bc <__errno_location@plt>
   16948:	mov	r2, r0
   1694c:	mov	r3, #28
   16950:	str	r3, [r2]
   16954:	b	1699c <__assert_fail@plt+0x54a8>
   16958:	ldr	r2, [fp, #-8]
   1695c:	ldr	r3, [fp, #-16]
   16960:	add	r3, r2, r3
   16964:	str	r3, [fp, #-8]
   16968:	ldr	r2, [fp, #-12]
   1696c:	ldr	r3, [fp, #-16]
   16970:	add	r3, r2, r3
   16974:	str	r3, [fp, #-12]
   16978:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1697c:	ldr	r3, [fp, #-16]
   16980:	sub	r3, r2, r3
   16984:	str	r3, [fp, #-32]	; 0xffffffe0
   16988:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1698c:	cmp	r3, #0
   16990:	bne	16918 <__assert_fail@plt+0x5424>
   16994:	b	1699c <__assert_fail@plt+0x54a8>
   16998:	nop			; (mov r0, r0)
   1699c:	ldr	r3, [fp, #-8]
   169a0:	mov	r0, r3
   169a4:	sub	sp, fp, #4
   169a8:	pop	{fp, pc}
   169ac:	push	{fp, lr}
   169b0:	add	fp, sp, #4
   169b4:	sub	sp, sp, #24
   169b8:	strd	r0, [fp, #-20]	; 0xffffffec
   169bc:	str	r2, [fp, #-24]	; 0xffffffe8
   169c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   169c4:	add	r3, r3, #20
   169c8:	str	r3, [fp, #-8]
   169cc:	ldr	r3, [fp, #-8]
   169d0:	mov	r2, #0
   169d4:	strb	r2, [r3]
   169d8:	ldr	r3, [fp, #-8]
   169dc:	sub	r3, r3, #1
   169e0:	str	r3, [fp, #-8]
   169e4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   169e8:	mov	r2, #10
   169ec:	mov	r3, #0
   169f0:	bl	1cb68 <__assert_fail@plt+0xb674>
   169f4:	uxtb	r3, r2
   169f8:	add	r3, r3, #48	; 0x30
   169fc:	uxtb	r2, r3
   16a00:	ldr	r3, [fp, #-8]
   16a04:	strb	r2, [r3]
   16a08:	ldrd	r0, [fp, #-20]	; 0xffffffec
   16a0c:	mov	r2, #10
   16a10:	mov	r3, #0
   16a14:	bl	1cb68 <__assert_fail@plt+0xb674>
   16a18:	mov	r2, r0
   16a1c:	mov	r3, r1
   16a20:	strd	r2, [fp, #-20]	; 0xffffffec
   16a24:	ldrd	r2, [fp, #-20]	; 0xffffffec
   16a28:	orrs	r3, r2, r3
   16a2c:	bne	169d8 <__assert_fail@plt+0x54e4>
   16a30:	ldr	r3, [fp, #-8]
   16a34:	mov	r0, r3
   16a38:	sub	sp, fp, #4
   16a3c:	pop	{fp, pc}
   16a40:	push	{fp, lr}
   16a44:	add	fp, sp, #4
   16a48:	sub	sp, sp, #16
   16a4c:	str	r0, [fp, #-16]
   16a50:	ldr	r3, [fp, #-16]
   16a54:	cmp	r3, #0
   16a58:	bne	16a78 <__assert_fail@plt+0x5584>
   16a5c:	ldr	r3, [pc, #220]	; 16b40 <__assert_fail@plt+0x564c>
   16a60:	ldr	r3, [r3]
   16a64:	mov	r2, #55	; 0x37
   16a68:	mov	r1, #1
   16a6c:	ldr	r0, [pc, #208]	; 16b44 <__assert_fail@plt+0x5650>
   16a70:	bl	11278 <fwrite@plt>
   16a74:	bl	114d0 <abort@plt>
   16a78:	mov	r1, #47	; 0x2f
   16a7c:	ldr	r0, [fp, #-16]
   16a80:	bl	11470 <strrchr@plt>
   16a84:	str	r0, [fp, #-8]
   16a88:	ldr	r3, [fp, #-8]
   16a8c:	cmp	r3, #0
   16a90:	beq	16aa0 <__assert_fail@plt+0x55ac>
   16a94:	ldr	r3, [fp, #-8]
   16a98:	add	r3, r3, #1
   16a9c:	b	16aa4 <__assert_fail@plt+0x55b0>
   16aa0:	ldr	r3, [fp, #-16]
   16aa4:	str	r3, [fp, #-12]
   16aa8:	ldr	r2, [fp, #-12]
   16aac:	ldr	r3, [fp, #-16]
   16ab0:	sub	r3, r2, r3
   16ab4:	cmp	r3, #6
   16ab8:	ble	16b1c <__assert_fail@plt+0x5628>
   16abc:	ldr	r3, [fp, #-12]
   16ac0:	sub	r3, r3, #7
   16ac4:	mov	r2, #7
   16ac8:	ldr	r1, [pc, #120]	; 16b48 <__assert_fail@plt+0x5654>
   16acc:	mov	r0, r3
   16ad0:	bl	114c4 <strncmp@plt>
   16ad4:	mov	r3, r0
   16ad8:	cmp	r3, #0
   16adc:	bne	16b1c <__assert_fail@plt+0x5628>
   16ae0:	ldr	r3, [fp, #-12]
   16ae4:	str	r3, [fp, #-16]
   16ae8:	mov	r2, #3
   16aec:	ldr	r1, [pc, #88]	; 16b4c <__assert_fail@plt+0x5658>
   16af0:	ldr	r0, [fp, #-12]
   16af4:	bl	114c4 <strncmp@plt>
   16af8:	mov	r3, r0
   16afc:	cmp	r3, #0
   16b00:	bne	16b1c <__assert_fail@plt+0x5628>
   16b04:	ldr	r3, [fp, #-12]
   16b08:	add	r3, r3, #3
   16b0c:	str	r3, [fp, #-16]
   16b10:	ldr	r2, [pc, #56]	; 16b50 <__assert_fail@plt+0x565c>
   16b14:	ldr	r3, [fp, #-16]
   16b18:	str	r3, [r2]
   16b1c:	ldr	r2, [pc, #48]	; 16b54 <__assert_fail@plt+0x5660>
   16b20:	ldr	r3, [fp, #-16]
   16b24:	str	r3, [r2]
   16b28:	ldr	r2, [pc, #40]	; 16b58 <__assert_fail@plt+0x5664>
   16b2c:	ldr	r3, [fp, #-16]
   16b30:	str	r3, [r2]
   16b34:	nop			; (mov r0, r0)
   16b38:	sub	sp, fp, #4
   16b3c:	pop	{fp, pc}
   16b40:	andeq	pc, r2, r8, ror #6
   16b44:	andeq	lr, r1, r4, lsl r0
   16b48:	andeq	lr, r1, ip, asr #32
   16b4c:	andeq	lr, r1, r4, asr r0
   16b50:	andeq	pc, r2, r8, asr r3	; <UNPREDICTABLE>
   16b54:	andeq	pc, r2, ip, lsr #10
   16b58:	andeq	pc, r2, ip, asr r3	; <UNPREDICTABLE>
   16b5c:	push	{fp, lr}
   16b60:	add	fp, sp, #4
   16b64:	sub	sp, sp, #16
   16b68:	str	r0, [fp, #-16]
   16b6c:	bl	113bc <__errno_location@plt>
   16b70:	mov	r3, r0
   16b74:	ldr	r3, [r3]
   16b78:	str	r3, [fp, #-8]
   16b7c:	ldr	r3, [fp, #-16]
   16b80:	cmp	r3, #0
   16b84:	beq	16b90 <__assert_fail@plt+0x569c>
   16b88:	ldr	r3, [fp, #-16]
   16b8c:	b	16b94 <__assert_fail@plt+0x56a0>
   16b90:	ldr	r3, [pc, #48]	; 16bc8 <__assert_fail@plt+0x56d4>
   16b94:	mov	r1, #48	; 0x30
   16b98:	mov	r0, r3
   16b9c:	bl	1a98c <__assert_fail@plt+0x9498>
   16ba0:	mov	r3, r0
   16ba4:	str	r3, [fp, #-12]
   16ba8:	bl	113bc <__errno_location@plt>
   16bac:	mov	r2, r0
   16bb0:	ldr	r3, [fp, #-8]
   16bb4:	str	r3, [r2]
   16bb8:	ldr	r3, [fp, #-12]
   16bbc:	mov	r0, r3
   16bc0:	sub	sp, fp, #4
   16bc4:	pop	{fp, pc}
   16bc8:	andeq	pc, r2, r0, lsr r5	; <UNPREDICTABLE>
   16bcc:	push	{fp}		; (str fp, [sp, #-4]!)
   16bd0:	add	fp, sp, #0
   16bd4:	sub	sp, sp, #12
   16bd8:	str	r0, [fp, #-8]
   16bdc:	ldr	r3, [fp, #-8]
   16be0:	cmp	r3, #0
   16be4:	beq	16bf0 <__assert_fail@plt+0x56fc>
   16be8:	ldr	r3, [fp, #-8]
   16bec:	b	16bf4 <__assert_fail@plt+0x5700>
   16bf0:	ldr	r3, [pc, #16]	; 16c08 <__assert_fail@plt+0x5714>
   16bf4:	ldr	r3, [r3]
   16bf8:	mov	r0, r3
   16bfc:	add	sp, fp, #0
   16c00:	pop	{fp}		; (ldr fp, [sp], #4)
   16c04:	bx	lr
   16c08:	andeq	pc, r2, r0, lsr r5	; <UNPREDICTABLE>
   16c0c:	push	{fp}		; (str fp, [sp, #-4]!)
   16c10:	add	fp, sp, #0
   16c14:	sub	sp, sp, #12
   16c18:	str	r0, [fp, #-8]
   16c1c:	str	r1, [fp, #-12]
   16c20:	ldr	r3, [fp, #-8]
   16c24:	cmp	r3, #0
   16c28:	beq	16c34 <__assert_fail@plt+0x5740>
   16c2c:	ldr	r3, [fp, #-8]
   16c30:	b	16c38 <__assert_fail@plt+0x5744>
   16c34:	ldr	r3, [pc, #20]	; 16c50 <__assert_fail@plt+0x575c>
   16c38:	ldr	r2, [fp, #-12]
   16c3c:	str	r2, [r3]
   16c40:	nop			; (mov r0, r0)
   16c44:	add	sp, fp, #0
   16c48:	pop	{fp}		; (ldr fp, [sp], #4)
   16c4c:	bx	lr
   16c50:	andeq	pc, r2, r0, lsr r5	; <UNPREDICTABLE>
   16c54:	push	{fp}		; (str fp, [sp, #-4]!)
   16c58:	add	fp, sp, #0
   16c5c:	sub	sp, sp, #36	; 0x24
   16c60:	str	r0, [fp, #-24]	; 0xffffffe8
   16c64:	mov	r3, r1
   16c68:	str	r2, [fp, #-32]	; 0xffffffe0
   16c6c:	strb	r3, [fp, #-25]	; 0xffffffe7
   16c70:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   16c74:	strb	r3, [fp, #-5]
   16c78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c7c:	cmp	r3, #0
   16c80:	beq	16c8c <__assert_fail@plt+0x5798>
   16c84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c88:	b	16c90 <__assert_fail@plt+0x579c>
   16c8c:	ldr	r3, [pc, #124]	; 16d10 <__assert_fail@plt+0x581c>
   16c90:	add	r2, r3, #8
   16c94:	ldrb	r3, [fp, #-5]
   16c98:	lsr	r3, r3, #5
   16c9c:	uxtb	r3, r3
   16ca0:	lsl	r3, r3, #2
   16ca4:	add	r3, r2, r3
   16ca8:	str	r3, [fp, #-12]
   16cac:	ldrb	r3, [fp, #-5]
   16cb0:	and	r3, r3, #31
   16cb4:	str	r3, [fp, #-16]
   16cb8:	ldr	r3, [fp, #-12]
   16cbc:	ldr	r2, [r3]
   16cc0:	ldr	r3, [fp, #-16]
   16cc4:	lsr	r3, r2, r3
   16cc8:	and	r3, r3, #1
   16ccc:	str	r3, [fp, #-20]	; 0xffffffec
   16cd0:	ldr	r3, [fp, #-12]
   16cd4:	ldr	r3, [r3]
   16cd8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16cdc:	and	r1, r2, #1
   16ce0:	ldr	r2, [fp, #-20]	; 0xffffffec
   16ce4:	eor	r1, r1, r2
   16ce8:	ldr	r2, [fp, #-16]
   16cec:	lsl	r2, r1, r2
   16cf0:	eor	r2, r2, r3
   16cf4:	ldr	r3, [fp, #-12]
   16cf8:	str	r2, [r3]
   16cfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d00:	mov	r0, r3
   16d04:	add	sp, fp, #0
   16d08:	pop	{fp}		; (ldr fp, [sp], #4)
   16d0c:	bx	lr
   16d10:	andeq	pc, r2, r0, lsr r5	; <UNPREDICTABLE>
   16d14:	push	{fp}		; (str fp, [sp, #-4]!)
   16d18:	add	fp, sp, #0
   16d1c:	sub	sp, sp, #20
   16d20:	str	r0, [fp, #-16]
   16d24:	str	r1, [fp, #-20]	; 0xffffffec
   16d28:	ldr	r3, [fp, #-16]
   16d2c:	cmp	r3, #0
   16d30:	bne	16d3c <__assert_fail@plt+0x5848>
   16d34:	ldr	r3, [pc, #44]	; 16d68 <__assert_fail@plt+0x5874>
   16d38:	str	r3, [fp, #-16]
   16d3c:	ldr	r3, [fp, #-16]
   16d40:	ldr	r3, [r3, #4]
   16d44:	str	r3, [fp, #-8]
   16d48:	ldr	r3, [fp, #-16]
   16d4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16d50:	str	r2, [r3, #4]
   16d54:	ldr	r3, [fp, #-8]
   16d58:	mov	r0, r3
   16d5c:	add	sp, fp, #0
   16d60:	pop	{fp}		; (ldr fp, [sp], #4)
   16d64:	bx	lr
   16d68:	andeq	pc, r2, r0, lsr r5	; <UNPREDICTABLE>
   16d6c:	push	{fp, lr}
   16d70:	add	fp, sp, #4
   16d74:	sub	sp, sp, #16
   16d78:	str	r0, [fp, #-8]
   16d7c:	str	r1, [fp, #-12]
   16d80:	str	r2, [fp, #-16]
   16d84:	ldr	r3, [fp, #-8]
   16d88:	cmp	r3, #0
   16d8c:	bne	16d98 <__assert_fail@plt+0x58a4>
   16d90:	ldr	r3, [pc, #76]	; 16de4 <__assert_fail@plt+0x58f0>
   16d94:	str	r3, [fp, #-8]
   16d98:	ldr	r3, [fp, #-8]
   16d9c:	mov	r2, #10
   16da0:	str	r2, [r3]
   16da4:	ldr	r3, [fp, #-12]
   16da8:	cmp	r3, #0
   16dac:	beq	16dbc <__assert_fail@plt+0x58c8>
   16db0:	ldr	r3, [fp, #-16]
   16db4:	cmp	r3, #0
   16db8:	bne	16dc0 <__assert_fail@plt+0x58cc>
   16dbc:	bl	114d0 <abort@plt>
   16dc0:	ldr	r3, [fp, #-8]
   16dc4:	ldr	r2, [fp, #-12]
   16dc8:	str	r2, [r3, #40]	; 0x28
   16dcc:	ldr	r3, [fp, #-8]
   16dd0:	ldr	r2, [fp, #-16]
   16dd4:	str	r2, [r3, #44]	; 0x2c
   16dd8:	nop			; (mov r0, r0)
   16ddc:	sub	sp, fp, #4
   16de0:	pop	{fp, pc}
   16de4:	andeq	pc, r2, r0, lsr r5	; <UNPREDICTABLE>
   16de8:	push	{fp, lr}
   16dec:	add	fp, sp, #4
   16df0:	sub	sp, sp, #56	; 0x38
   16df4:	str	r0, [fp, #-56]	; 0xffffffc8
   16df8:	str	r1, [fp, #-60]	; 0xffffffc4
   16dfc:	sub	r3, fp, #52	; 0x34
   16e00:	mov	r2, #48	; 0x30
   16e04:	mov	r1, #0
   16e08:	mov	r0, r3
   16e0c:	bl	113d4 <memset@plt>
   16e10:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16e14:	cmp	r3, #10
   16e18:	bne	16e20 <__assert_fail@plt+0x592c>
   16e1c:	bl	114d0 <abort@plt>
   16e20:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16e24:	str	r3, [fp, #-52]	; 0xffffffcc
   16e28:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16e2c:	mov	lr, r3
   16e30:	sub	ip, fp, #52	; 0x34
   16e34:	ldm	ip!, {r0, r1, r2, r3}
   16e38:	stmia	lr!, {r0, r1, r2, r3}
   16e3c:	ldm	ip!, {r0, r1, r2, r3}
   16e40:	stmia	lr!, {r0, r1, r2, r3}
   16e44:	ldm	ip, {r0, r1, r2, r3}
   16e48:	stm	lr, {r0, r1, r2, r3}
   16e4c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16e50:	sub	sp, fp, #4
   16e54:	pop	{fp, pc}
   16e58:	push	{fp, lr}
   16e5c:	add	fp, sp, #4
   16e60:	sub	sp, sp, #16
   16e64:	str	r0, [fp, #-16]
   16e68:	str	r1, [fp, #-20]	; 0xffffffec
   16e6c:	ldr	r0, [fp, #-16]
   16e70:	bl	1135c <gettext@plt>
   16e74:	str	r0, [fp, #-8]
   16e78:	ldr	r2, [fp, #-8]
   16e7c:	ldr	r3, [fp, #-16]
   16e80:	cmp	r2, r3
   16e84:	beq	16e90 <__assert_fail@plt+0x599c>
   16e88:	ldr	r3, [fp, #-8]
   16e8c:	b	16f20 <__assert_fail@plt+0x5a2c>
   16e90:	bl	1babc <__assert_fail@plt+0xa5c8>
   16e94:	str	r0, [fp, #-12]
   16e98:	ldr	r1, [pc, #140]	; 16f2c <__assert_fail@plt+0x5a38>
   16e9c:	ldr	r0, [fp, #-12]
   16ea0:	bl	1b810 <__assert_fail@plt+0xa31c>
   16ea4:	mov	r3, r0
   16ea8:	cmp	r3, #0
   16eac:	bne	16ed0 <__assert_fail@plt+0x59dc>
   16eb0:	ldr	r3, [fp, #-16]
   16eb4:	ldrb	r3, [r3]
   16eb8:	cmp	r3, #96	; 0x60
   16ebc:	bne	16ec8 <__assert_fail@plt+0x59d4>
   16ec0:	ldr	r3, [pc, #104]	; 16f30 <__assert_fail@plt+0x5a3c>
   16ec4:	b	16f20 <__assert_fail@plt+0x5a2c>
   16ec8:	ldr	r3, [pc, #100]	; 16f34 <__assert_fail@plt+0x5a40>
   16ecc:	b	16f20 <__assert_fail@plt+0x5a2c>
   16ed0:	ldr	r1, [pc, #96]	; 16f38 <__assert_fail@plt+0x5a44>
   16ed4:	ldr	r0, [fp, #-12]
   16ed8:	bl	1b810 <__assert_fail@plt+0xa31c>
   16edc:	mov	r3, r0
   16ee0:	cmp	r3, #0
   16ee4:	bne	16f08 <__assert_fail@plt+0x5a14>
   16ee8:	ldr	r3, [fp, #-16]
   16eec:	ldrb	r3, [r3]
   16ef0:	cmp	r3, #96	; 0x60
   16ef4:	bne	16f00 <__assert_fail@plt+0x5a0c>
   16ef8:	ldr	r3, [pc, #60]	; 16f3c <__assert_fail@plt+0x5a48>
   16efc:	b	16f20 <__assert_fail@plt+0x5a2c>
   16f00:	ldr	r3, [pc, #56]	; 16f40 <__assert_fail@plt+0x5a4c>
   16f04:	b	16f20 <__assert_fail@plt+0x5a2c>
   16f08:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f0c:	cmp	r3, #9
   16f10:	bne	16f1c <__assert_fail@plt+0x5a28>
   16f14:	ldr	r3, [pc, #40]	; 16f44 <__assert_fail@plt+0x5a50>
   16f18:	b	16f20 <__assert_fail@plt+0x5a2c>
   16f1c:	ldr	r3, [pc, #36]	; 16f48 <__assert_fail@plt+0x5a54>
   16f20:	mov	r0, r3
   16f24:	sub	sp, fp, #4
   16f28:	pop	{fp, pc}
   16f2c:	andeq	lr, r1, r4, lsl r1
   16f30:	andeq	lr, r1, ip, lsl r1
   16f34:	andeq	lr, r1, r0, lsr #2
   16f38:	andeq	lr, r1, r4, lsr #2
   16f3c:	andeq	lr, r1, ip, lsr #2
   16f40:	andeq	lr, r1, r0, lsr r1
   16f44:	andeq	lr, r1, r4, lsr r1
   16f48:	andeq	lr, r1, r8, lsr r1
   16f4c:	push	{r4, fp, lr}
   16f50:	add	fp, sp, #8
   16f54:	sub	sp, sp, #116	; 0x74
   16f58:	str	r0, [fp, #-88]	; 0xffffffa8
   16f5c:	str	r1, [fp, #-92]	; 0xffffffa4
   16f60:	str	r2, [fp, #-96]	; 0xffffffa0
   16f64:	str	r3, [fp, #-100]	; 0xffffff9c
   16f68:	mov	r3, #0
   16f6c:	str	r3, [fp, #-20]	; 0xffffffec
   16f70:	mov	r3, #0
   16f74:	str	r3, [fp, #-24]	; 0xffffffe8
   16f78:	mov	r3, #0
   16f7c:	str	r3, [fp, #-28]	; 0xffffffe4
   16f80:	mov	r3, #0
   16f84:	str	r3, [fp, #-32]	; 0xffffffe0
   16f88:	mov	r3, #0
   16f8c:	strb	r3, [fp, #-33]	; 0xffffffdf
   16f90:	bl	1129c <__ctype_get_mb_cur_max@plt>
   16f94:	mov	r3, r0
   16f98:	cmp	r3, #1
   16f9c:	moveq	r3, #1
   16fa0:	movne	r3, #0
   16fa4:	strb	r3, [fp, #-57]	; 0xffffffc7
   16fa8:	ldr	r3, [fp, #8]
   16fac:	and	r3, r3, #2
   16fb0:	cmp	r3, #0
   16fb4:	movne	r3, #1
   16fb8:	moveq	r3, #0
   16fbc:	strb	r3, [fp, #-34]	; 0xffffffde
   16fc0:	mov	r3, #0
   16fc4:	strb	r3, [fp, #-35]	; 0xffffffdd
   16fc8:	mov	r3, #0
   16fcc:	strb	r3, [fp, #-36]	; 0xffffffdc
   16fd0:	mov	r3, #1
   16fd4:	strb	r3, [fp, #-37]	; 0xffffffdb
   16fd8:	ldr	r3, [fp, #4]
   16fdc:	cmp	r3, #10
   16fe0:	ldrls	pc, [pc, r3, lsl #2]
   16fe4:	b	171ec <__assert_fail@plt+0x5cf8>
   16fe8:	andeq	r7, r1, r0, ror #3
   16fec:	andeq	r7, r1, ip, asr r1
   16ff0:	andeq	r7, r1, r0, lsl #3
   16ff4:	andeq	r7, r1, r4, asr r1
   16ff8:	andeq	r7, r1, r4, ror #2
   16ffc:	andeq	r7, r1, r4, lsr #32
   17000:	andeq	r7, r1, r4, lsl r0
   17004:	andeq	r7, r1, r4, lsl #1
   17008:	muleq	r1, r8, r0
   1700c:	muleq	r1, r8, r0
   17010:	muleq	r1, r8, r0
   17014:	mov	r3, #5
   17018:	str	r3, [fp, #4]
   1701c:	mov	r3, #1
   17020:	strb	r3, [fp, #-34]	; 0xffffffde
   17024:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17028:	eor	r3, r3, #1
   1702c:	uxtb	r3, r3
   17030:	cmp	r3, #0
   17034:	beq	17068 <__assert_fail@plt+0x5b74>
   17038:	ldr	r2, [fp, #-20]	; 0xffffffec
   1703c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17040:	cmp	r2, r3
   17044:	bcs	1705c <__assert_fail@plt+0x5b68>
   17048:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1704c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17050:	add	r3, r2, r3
   17054:	mov	r2, #34	; 0x22
   17058:	strb	r2, [r3]
   1705c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17060:	add	r3, r3, #1
   17064:	str	r3, [fp, #-20]	; 0xffffffec
   17068:	mov	r3, #1
   1706c:	strb	r3, [fp, #-33]	; 0xffffffdf
   17070:	ldr	r3, [pc, #3872]	; 17f98 <__assert_fail@plt+0x6aa4>
   17074:	str	r3, [fp, #-28]	; 0xffffffe4
   17078:	mov	r3, #1
   1707c:	str	r3, [fp, #-32]	; 0xffffffe0
   17080:	b	171f0 <__assert_fail@plt+0x5cfc>
   17084:	mov	r3, #1
   17088:	strb	r3, [fp, #-33]	; 0xffffffdf
   1708c:	mov	r3, #0
   17090:	strb	r3, [fp, #-34]	; 0xffffffde
   17094:	b	171f0 <__assert_fail@plt+0x5cfc>
   17098:	ldr	r3, [fp, #4]
   1709c:	cmp	r3, #10
   170a0:	beq	170c4 <__assert_fail@plt+0x5bd0>
   170a4:	ldr	r1, [fp, #4]
   170a8:	ldr	r0, [pc, #3820]	; 17f9c <__assert_fail@plt+0x6aa8>
   170ac:	bl	16e58 <__assert_fail@plt+0x5964>
   170b0:	str	r0, [fp, #16]
   170b4:	ldr	r1, [fp, #4]
   170b8:	ldr	r0, [pc, #3808]	; 17fa0 <__assert_fail@plt+0x6aac>
   170bc:	bl	16e58 <__assert_fail@plt+0x5964>
   170c0:	str	r0, [fp, #20]
   170c4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   170c8:	eor	r3, r3, #1
   170cc:	uxtb	r3, r3
   170d0:	cmp	r3, #0
   170d4:	beq	17134 <__assert_fail@plt+0x5c40>
   170d8:	ldr	r3, [fp, #16]
   170dc:	str	r3, [fp, #-28]	; 0xffffffe4
   170e0:	b	17124 <__assert_fail@plt+0x5c30>
   170e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   170e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   170ec:	cmp	r2, r3
   170f0:	bcs	1710c <__assert_fail@plt+0x5c18>
   170f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   170f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   170fc:	add	r3, r2, r3
   17100:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17104:	ldrb	r2, [r2]
   17108:	strb	r2, [r3]
   1710c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17110:	add	r3, r3, #1
   17114:	str	r3, [fp, #-20]	; 0xffffffec
   17118:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1711c:	add	r3, r3, #1
   17120:	str	r3, [fp, #-28]	; 0xffffffe4
   17124:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17128:	ldrb	r3, [r3]
   1712c:	cmp	r3, #0
   17130:	bne	170e4 <__assert_fail@plt+0x5bf0>
   17134:	mov	r3, #1
   17138:	strb	r3, [fp, #-33]	; 0xffffffdf
   1713c:	ldr	r3, [fp, #20]
   17140:	str	r3, [fp, #-28]	; 0xffffffe4
   17144:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17148:	bl	11368 <strlen@plt>
   1714c:	str	r0, [fp, #-32]	; 0xffffffe0
   17150:	b	171f0 <__assert_fail@plt+0x5cfc>
   17154:	mov	r3, #1
   17158:	strb	r3, [fp, #-33]	; 0xffffffdf
   1715c:	mov	r3, #1
   17160:	strb	r3, [fp, #-34]	; 0xffffffde
   17164:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17168:	eor	r3, r3, #1
   1716c:	uxtb	r3, r3
   17170:	cmp	r3, #0
   17174:	beq	17180 <__assert_fail@plt+0x5c8c>
   17178:	mov	r3, #1
   1717c:	strb	r3, [fp, #-33]	; 0xffffffdf
   17180:	mov	r3, #2
   17184:	str	r3, [fp, #4]
   17188:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1718c:	eor	r3, r3, #1
   17190:	uxtb	r3, r3
   17194:	cmp	r3, #0
   17198:	beq	171cc <__assert_fail@plt+0x5cd8>
   1719c:	ldr	r2, [fp, #-20]	; 0xffffffec
   171a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   171a4:	cmp	r2, r3
   171a8:	bcs	171c0 <__assert_fail@plt+0x5ccc>
   171ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   171b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   171b4:	add	r3, r2, r3
   171b8:	mov	r2, #39	; 0x27
   171bc:	strb	r2, [r3]
   171c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   171c4:	add	r3, r3, #1
   171c8:	str	r3, [fp, #-20]	; 0xffffffec
   171cc:	ldr	r3, [pc, #3532]	; 17fa0 <__assert_fail@plt+0x6aac>
   171d0:	str	r3, [fp, #-28]	; 0xffffffe4
   171d4:	mov	r3, #1
   171d8:	str	r3, [fp, #-32]	; 0xffffffe0
   171dc:	b	171f0 <__assert_fail@plt+0x5cfc>
   171e0:	mov	r3, #0
   171e4:	strb	r3, [fp, #-34]	; 0xffffffde
   171e8:	b	171f0 <__assert_fail@plt+0x5cfc>
   171ec:	bl	114d0 <abort@plt>
   171f0:	mov	r3, #0
   171f4:	str	r3, [fp, #-16]
   171f8:	b	18388 <__assert_fail@plt+0x6e94>
   171fc:	mov	r3, #0
   17200:	strb	r3, [fp, #-40]	; 0xffffffd8
   17204:	mov	r3, #0
   17208:	strb	r3, [fp, #-41]	; 0xffffffd7
   1720c:	mov	r3, #0
   17210:	strb	r3, [fp, #-42]	; 0xffffffd6
   17214:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17218:	cmp	r3, #0
   1721c:	beq	172b8 <__assert_fail@plt+0x5dc4>
   17220:	ldr	r3, [fp, #4]
   17224:	cmp	r3, #2
   17228:	beq	172b8 <__assert_fail@plt+0x5dc4>
   1722c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17230:	cmp	r3, #0
   17234:	beq	172b8 <__assert_fail@plt+0x5dc4>
   17238:	ldr	r2, [fp, #-16]
   1723c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17240:	add	r4, r2, r3
   17244:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17248:	cmn	r3, #1
   1724c:	bne	17270 <__assert_fail@plt+0x5d7c>
   17250:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17254:	cmp	r3, #1
   17258:	bls	17270 <__assert_fail@plt+0x5d7c>
   1725c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17260:	bl	11368 <strlen@plt>
   17264:	str	r0, [fp, #-100]	; 0xffffff9c
   17268:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1726c:	b	17274 <__assert_fail@plt+0x5d80>
   17270:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17274:	cmp	r4, r3
   17278:	bhi	172b8 <__assert_fail@plt+0x5dc4>
   1727c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17280:	ldr	r3, [fp, #-16]
   17284:	add	r3, r2, r3
   17288:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1728c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17290:	mov	r0, r3
   17294:	bl	1120c <memcmp@plt>
   17298:	mov	r3, r0
   1729c:	cmp	r3, #0
   172a0:	bne	172b8 <__assert_fail@plt+0x5dc4>
   172a4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   172a8:	cmp	r3, #0
   172ac:	bne	18544 <__assert_fail@plt+0x7050>
   172b0:	mov	r3, #1
   172b4:	strb	r3, [fp, #-40]	; 0xffffffd8
   172b8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   172bc:	ldr	r3, [fp, #-16]
   172c0:	add	r3, r2, r3
   172c4:	ldrb	r3, [r3]
   172c8:	strb	r3, [fp, #-38]	; 0xffffffda
   172cc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   172d0:	cmp	r3, #126	; 0x7e
   172d4:	ldrls	pc, [pc, r3, lsl #2]
   172d8:	b	17b04 <__assert_fail@plt+0x6610>
   172dc:	ldrdeq	r7, [r1], -r8
   172e0:	andeq	r7, r1, r4, lsl #22
   172e4:	andeq	r7, r1, r4, lsl #22
   172e8:	andeq	r7, r1, r4, lsl #22
   172ec:	andeq	r7, r1, r4, lsl #22
   172f0:	andeq	r7, r1, r4, lsl #22
   172f4:	andeq	r7, r1, r4, lsl #22
   172f8:	andeq	r7, r1, r8, asr #17
   172fc:	ldrdeq	r7, [r1], -r4
   17300:	andeq	r7, r1, r4, lsl #18
   17304:	andeq	r7, r1, ip, ror #17
   17308:	andeq	r7, r1, r0, lsl r9
   1730c:	andeq	r7, r1, r0, ror #17
   17310:	strdeq	r7, [r1], -r8
   17314:	andeq	r7, r1, r4, lsl #22
   17318:	andeq	r7, r1, r4, lsl #22
   1731c:	andeq	r7, r1, r4, lsl #22
   17320:	andeq	r7, r1, r4, lsl #22
   17324:	andeq	r7, r1, r4, lsl #22
   17328:	andeq	r7, r1, r4, lsl #22
   1732c:	andeq	r7, r1, r4, lsl #22
   17330:	andeq	r7, r1, r4, lsl #22
   17334:	andeq	r7, r1, r4, lsl #22
   17338:	andeq	r7, r1, r4, lsl #22
   1733c:	andeq	r7, r1, r4, lsl #22
   17340:	andeq	r7, r1, r4, lsl #22
   17344:	andeq	r7, r1, r4, lsl #22
   17348:	andeq	r7, r1, r4, lsl #22
   1734c:	andeq	r7, r1, r4, lsl #22
   17350:	andeq	r7, r1, r4, lsl #22
   17354:	andeq	r7, r1, r4, lsl #22
   17358:	andeq	r7, r1, r4, lsl #22
   1735c:	andeq	r7, r1, r8, ror #19
   17360:	strdeq	r7, [r1], -r0
   17364:	strdeq	r7, [r1], -r0
   17368:	ldrdeq	r7, [r1], -ip
   1736c:	strdeq	r7, [r1], -r0
   17370:	strdeq	r7, [r1], -r8
   17374:	strdeq	r7, [r1], -r0
   17378:	andeq	r7, r1, ip, lsl #20
   1737c:	strdeq	r7, [r1], -r0
   17380:	strdeq	r7, [r1], -r0
   17384:	strdeq	r7, [r1], -r0
   17388:	strdeq	r7, [r1], -r8
   1738c:	strdeq	r7, [r1], -r8
   17390:	strdeq	r7, [r1], -r8
   17394:	strdeq	r7, [r1], -r8
   17398:	strdeq	r7, [r1], -r8
   1739c:	strdeq	r7, [r1], -r8
   173a0:	strdeq	r7, [r1], -r8
   173a4:	strdeq	r7, [r1], -r8
   173a8:	strdeq	r7, [r1], -r8
   173ac:	strdeq	r7, [r1], -r8
   173b0:	strdeq	r7, [r1], -r8
   173b4:	strdeq	r7, [r1], -r8
   173b8:	strdeq	r7, [r1], -r8
   173bc:	strdeq	r7, [r1], -r8
   173c0:	strdeq	r7, [r1], -r8
   173c4:	strdeq	r7, [r1], -r8
   173c8:	strdeq	r7, [r1], -r0
   173cc:	strdeq	r7, [r1], -r0
   173d0:	strdeq	r7, [r1], -r0
   173d4:	strdeq	r7, [r1], -r0
   173d8:			; <UNDEFINED> instruction: 0x000176b8
   173dc:	andeq	r7, r1, r4, lsl #22
   173e0:	strdeq	r7, [r1], -r8
   173e4:	strdeq	r7, [r1], -r8
   173e8:	strdeq	r7, [r1], -r8
   173ec:	strdeq	r7, [r1], -r8
   173f0:	strdeq	r7, [r1], -r8
   173f4:	strdeq	r7, [r1], -r8
   173f8:	strdeq	r7, [r1], -r8
   173fc:	strdeq	r7, [r1], -r8
   17400:	strdeq	r7, [r1], -r8
   17404:	strdeq	r7, [r1], -r8
   17408:	strdeq	r7, [r1], -r8
   1740c:	strdeq	r7, [r1], -r8
   17410:	strdeq	r7, [r1], -r8
   17414:	strdeq	r7, [r1], -r8
   17418:	strdeq	r7, [r1], -r8
   1741c:	strdeq	r7, [r1], -r8
   17420:	strdeq	r7, [r1], -r8
   17424:	strdeq	r7, [r1], -r8
   17428:	strdeq	r7, [r1], -r8
   1742c:	strdeq	r7, [r1], -r8
   17430:	strdeq	r7, [r1], -r8
   17434:	strdeq	r7, [r1], -r8
   17438:	strdeq	r7, [r1], -r8
   1743c:	strdeq	r7, [r1], -r8
   17440:	strdeq	r7, [r1], -r8
   17444:	strdeq	r7, [r1], -r8
   17448:	strdeq	r7, [r1], -r0
   1744c:	andeq	r7, r1, ip, lsl r9
   17450:	strdeq	r7, [r1], -r8
   17454:	strdeq	r7, [r1], -r0
   17458:	strdeq	r7, [r1], -r8
   1745c:	strdeq	r7, [r1], -r0
   17460:	strdeq	r7, [r1], -r8
   17464:	strdeq	r7, [r1], -r8
   17468:	strdeq	r7, [r1], -r8
   1746c:	strdeq	r7, [r1], -r8
   17470:	strdeq	r7, [r1], -r8
   17474:	strdeq	r7, [r1], -r8
   17478:	strdeq	r7, [r1], -r8
   1747c:	strdeq	r7, [r1], -r8
   17480:	strdeq	r7, [r1], -r8
   17484:	strdeq	r7, [r1], -r8
   17488:	strdeq	r7, [r1], -r8
   1748c:	strdeq	r7, [r1], -r8
   17490:	strdeq	r7, [r1], -r8
   17494:	strdeq	r7, [r1], -r8
   17498:	strdeq	r7, [r1], -r8
   1749c:	strdeq	r7, [r1], -r8
   174a0:	strdeq	r7, [r1], -r8
   174a4:	strdeq	r7, [r1], -r8
   174a8:	strdeq	r7, [r1], -r8
   174ac:	strdeq	r7, [r1], -r8
   174b0:	strdeq	r7, [r1], -r8
   174b4:	strdeq	r7, [r1], -r8
   174b8:	strdeq	r7, [r1], -r8
   174bc:	strdeq	r7, [r1], -r8
   174c0:	strdeq	r7, [r1], -r8
   174c4:	strdeq	r7, [r1], -r8
   174c8:	muleq	r1, r4, r9
   174cc:	strdeq	r7, [r1], -r0
   174d0:	muleq	r1, r4, r9
   174d4:	ldrdeq	r7, [r1], -ip
   174d8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   174dc:	cmp	r3, #0
   174e0:	beq	176a4 <__assert_fail@plt+0x61b0>
   174e4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   174e8:	cmp	r3, #0
   174ec:	bne	1854c <__assert_fail@plt+0x7058>
   174f0:	mov	r3, #1
   174f4:	strb	r3, [fp, #-41]	; 0xffffffd7
   174f8:	ldr	r3, [fp, #4]
   174fc:	cmp	r3, #2
   17500:	bne	175b0 <__assert_fail@plt+0x60bc>
   17504:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   17508:	eor	r3, r3, #1
   1750c:	uxtb	r3, r3
   17510:	cmp	r3, #0
   17514:	beq	175b0 <__assert_fail@plt+0x60bc>
   17518:	ldr	r2, [fp, #-20]	; 0xffffffec
   1751c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17520:	cmp	r2, r3
   17524:	bcs	1753c <__assert_fail@plt+0x6048>
   17528:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1752c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17530:	add	r3, r2, r3
   17534:	mov	r2, #39	; 0x27
   17538:	strb	r2, [r3]
   1753c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17540:	add	r3, r3, #1
   17544:	str	r3, [fp, #-20]	; 0xffffffec
   17548:	ldr	r2, [fp, #-20]	; 0xffffffec
   1754c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17550:	cmp	r2, r3
   17554:	bcs	1756c <__assert_fail@plt+0x6078>
   17558:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1755c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17560:	add	r3, r2, r3
   17564:	mov	r2, #36	; 0x24
   17568:	strb	r2, [r3]
   1756c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17570:	add	r3, r3, #1
   17574:	str	r3, [fp, #-20]	; 0xffffffec
   17578:	ldr	r2, [fp, #-20]	; 0xffffffec
   1757c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17580:	cmp	r2, r3
   17584:	bcs	1759c <__assert_fail@plt+0x60a8>
   17588:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1758c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17590:	add	r3, r2, r3
   17594:	mov	r2, #39	; 0x27
   17598:	strb	r2, [r3]
   1759c:	ldr	r3, [fp, #-20]	; 0xffffffec
   175a0:	add	r3, r3, #1
   175a4:	str	r3, [fp, #-20]	; 0xffffffec
   175a8:	mov	r3, #1
   175ac:	strb	r3, [fp, #-35]	; 0xffffffdd
   175b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   175b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   175b8:	cmp	r2, r3
   175bc:	bcs	175d4 <__assert_fail@plt+0x60e0>
   175c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   175c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   175c8:	add	r3, r2, r3
   175cc:	mov	r2, #92	; 0x5c
   175d0:	strb	r2, [r3]
   175d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   175d8:	add	r3, r3, #1
   175dc:	str	r3, [fp, #-20]	; 0xffffffec
   175e0:	ldr	r3, [fp, #4]
   175e4:	cmp	r3, #2
   175e8:	beq	17698 <__assert_fail@plt+0x61a4>
   175ec:	ldr	r3, [fp, #-16]
   175f0:	add	r2, r3, #1
   175f4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   175f8:	cmp	r2, r3
   175fc:	bcs	17698 <__assert_fail@plt+0x61a4>
   17600:	ldr	r3, [fp, #-16]
   17604:	add	r3, r3, #1
   17608:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1760c:	add	r3, r2, r3
   17610:	ldrb	r3, [r3]
   17614:	cmp	r3, #47	; 0x2f
   17618:	bls	17698 <__assert_fail@plt+0x61a4>
   1761c:	ldr	r3, [fp, #-16]
   17620:	add	r3, r3, #1
   17624:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17628:	add	r3, r2, r3
   1762c:	ldrb	r3, [r3]
   17630:	cmp	r3, #57	; 0x39
   17634:	bhi	17698 <__assert_fail@plt+0x61a4>
   17638:	ldr	r2, [fp, #-20]	; 0xffffffec
   1763c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17640:	cmp	r2, r3
   17644:	bcs	1765c <__assert_fail@plt+0x6168>
   17648:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1764c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17650:	add	r3, r2, r3
   17654:	mov	r2, #48	; 0x30
   17658:	strb	r2, [r3]
   1765c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17660:	add	r3, r3, #1
   17664:	str	r3, [fp, #-20]	; 0xffffffec
   17668:	ldr	r2, [fp, #-20]	; 0xffffffec
   1766c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17670:	cmp	r2, r3
   17674:	bcs	1768c <__assert_fail@plt+0x6198>
   17678:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1767c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17680:	add	r3, r2, r3
   17684:	mov	r2, #48	; 0x30
   17688:	strb	r2, [r3]
   1768c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17690:	add	r3, r3, #1
   17694:	str	r3, [fp, #-20]	; 0xffffffec
   17698:	mov	r3, #48	; 0x30
   1769c:	strb	r3, [fp, #-38]	; 0xffffffda
   176a0:	b	180e0 <__assert_fail@plt+0x6bec>
   176a4:	ldr	r3, [fp, #8]
   176a8:	and	r3, r3, #1
   176ac:	cmp	r3, #0
   176b0:	beq	180e0 <__assert_fail@plt+0x6bec>
   176b4:	b	1837c <__assert_fail@plt+0x6e88>
   176b8:	ldr	r3, [fp, #4]
   176bc:	cmp	r3, #2
   176c0:	beq	176d0 <__assert_fail@plt+0x61dc>
   176c4:	cmp	r3, #5
   176c8:	beq	176e0 <__assert_fail@plt+0x61ec>
   176cc:	b	178c4 <__assert_fail@plt+0x63d0>
   176d0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   176d4:	cmp	r3, #0
   176d8:	beq	178b8 <__assert_fail@plt+0x63c4>
   176dc:	b	18588 <__assert_fail@plt+0x7094>
   176e0:	ldr	r3, [fp, #8]
   176e4:	and	r3, r3, #4
   176e8:	cmp	r3, #0
   176ec:	beq	178c0 <__assert_fail@plt+0x63cc>
   176f0:	ldr	r3, [fp, #-16]
   176f4:	add	r2, r3, #2
   176f8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   176fc:	cmp	r2, r3
   17700:	bcs	178c0 <__assert_fail@plt+0x63cc>
   17704:	ldr	r3, [fp, #-16]
   17708:	add	r3, r3, #1
   1770c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17710:	add	r3, r2, r3
   17714:	ldrb	r3, [r3]
   17718:	cmp	r3, #63	; 0x3f
   1771c:	bne	178c0 <__assert_fail@plt+0x63cc>
   17720:	ldr	r3, [fp, #-16]
   17724:	add	r3, r3, #2
   17728:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1772c:	add	r3, r2, r3
   17730:	ldrb	r3, [r3]
   17734:	sub	r3, r3, #33	; 0x21
   17738:	cmp	r3, #29
   1773c:	ldrls	pc, [pc, r3, lsl #2]
   17740:	b	178b0 <__assert_fail@plt+0x63bc>
   17744:			; <UNDEFINED> instruction: 0x000177bc
   17748:			; <UNDEFINED> instruction: 0x000178b0
   1774c:			; <UNDEFINED> instruction: 0x000178b0
   17750:			; <UNDEFINED> instruction: 0x000178b0
   17754:			; <UNDEFINED> instruction: 0x000178b0
   17758:			; <UNDEFINED> instruction: 0x000178b0
   1775c:			; <UNDEFINED> instruction: 0x000177bc
   17760:			; <UNDEFINED> instruction: 0x000177bc
   17764:			; <UNDEFINED> instruction: 0x000177bc
   17768:			; <UNDEFINED> instruction: 0x000178b0
   1776c:			; <UNDEFINED> instruction: 0x000178b0
   17770:			; <UNDEFINED> instruction: 0x000178b0
   17774:			; <UNDEFINED> instruction: 0x000177bc
   17778:			; <UNDEFINED> instruction: 0x000178b0
   1777c:			; <UNDEFINED> instruction: 0x000177bc
   17780:			; <UNDEFINED> instruction: 0x000178b0
   17784:			; <UNDEFINED> instruction: 0x000178b0
   17788:			; <UNDEFINED> instruction: 0x000178b0
   1778c:			; <UNDEFINED> instruction: 0x000178b0
   17790:			; <UNDEFINED> instruction: 0x000178b0
   17794:			; <UNDEFINED> instruction: 0x000178b0
   17798:			; <UNDEFINED> instruction: 0x000178b0
   1779c:			; <UNDEFINED> instruction: 0x000178b0
   177a0:			; <UNDEFINED> instruction: 0x000178b0
   177a4:			; <UNDEFINED> instruction: 0x000178b0
   177a8:			; <UNDEFINED> instruction: 0x000178b0
   177ac:			; <UNDEFINED> instruction: 0x000178b0
   177b0:			; <UNDEFINED> instruction: 0x000177bc
   177b4:			; <UNDEFINED> instruction: 0x000177bc
   177b8:			; <UNDEFINED> instruction: 0x000177bc
   177bc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   177c0:	cmp	r3, #0
   177c4:	bne	18554 <__assert_fail@plt+0x7060>
   177c8:	ldr	r3, [fp, #-16]
   177cc:	add	r3, r3, #2
   177d0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   177d4:	add	r3, r2, r3
   177d8:	ldrb	r3, [r3]
   177dc:	strb	r3, [fp, #-38]	; 0xffffffda
   177e0:	ldr	r3, [fp, #-16]
   177e4:	add	r3, r3, #2
   177e8:	str	r3, [fp, #-16]
   177ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   177f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   177f4:	cmp	r2, r3
   177f8:	bcs	17810 <__assert_fail@plt+0x631c>
   177fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17800:	ldr	r3, [fp, #-20]	; 0xffffffec
   17804:	add	r3, r2, r3
   17808:	mov	r2, #63	; 0x3f
   1780c:	strb	r2, [r3]
   17810:	ldr	r3, [fp, #-20]	; 0xffffffec
   17814:	add	r3, r3, #1
   17818:	str	r3, [fp, #-20]	; 0xffffffec
   1781c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17820:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17824:	cmp	r2, r3
   17828:	bcs	17840 <__assert_fail@plt+0x634c>
   1782c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17830:	ldr	r3, [fp, #-20]	; 0xffffffec
   17834:	add	r3, r2, r3
   17838:	mov	r2, #34	; 0x22
   1783c:	strb	r2, [r3]
   17840:	ldr	r3, [fp, #-20]	; 0xffffffec
   17844:	add	r3, r3, #1
   17848:	str	r3, [fp, #-20]	; 0xffffffec
   1784c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17850:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17854:	cmp	r2, r3
   17858:	bcs	17870 <__assert_fail@plt+0x637c>
   1785c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17860:	ldr	r3, [fp, #-20]	; 0xffffffec
   17864:	add	r3, r2, r3
   17868:	mov	r2, #34	; 0x22
   1786c:	strb	r2, [r3]
   17870:	ldr	r3, [fp, #-20]	; 0xffffffec
   17874:	add	r3, r3, #1
   17878:	str	r3, [fp, #-20]	; 0xffffffec
   1787c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17880:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17884:	cmp	r2, r3
   17888:	bcs	178a0 <__assert_fail@plt+0x63ac>
   1788c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17890:	ldr	r3, [fp, #-20]	; 0xffffffec
   17894:	add	r3, r2, r3
   17898:	mov	r2, #63	; 0x3f
   1789c:	strb	r2, [r3]
   178a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   178a4:	add	r3, r3, #1
   178a8:	str	r3, [fp, #-20]	; 0xffffffec
   178ac:	b	178b4 <__assert_fail@plt+0x63c0>
   178b0:	nop			; (mov r0, r0)
   178b4:	b	178c0 <__assert_fail@plt+0x63cc>
   178b8:	nop			; (mov r0, r0)
   178bc:	b	1810c <__assert_fail@plt+0x6c18>
   178c0:	nop			; (mov r0, r0)
   178c4:	b	1810c <__assert_fail@plt+0x6c18>
   178c8:	mov	r3, #97	; 0x61
   178cc:	strb	r3, [fp, #-39]	; 0xffffffd9
   178d0:	b	1797c <__assert_fail@plt+0x6488>
   178d4:	mov	r3, #98	; 0x62
   178d8:	strb	r3, [fp, #-39]	; 0xffffffd9
   178dc:	b	1797c <__assert_fail@plt+0x6488>
   178e0:	mov	r3, #102	; 0x66
   178e4:	strb	r3, [fp, #-39]	; 0xffffffd9
   178e8:	b	1797c <__assert_fail@plt+0x6488>
   178ec:	mov	r3, #110	; 0x6e
   178f0:	strb	r3, [fp, #-39]	; 0xffffffd9
   178f4:	b	17964 <__assert_fail@plt+0x6470>
   178f8:	mov	r3, #114	; 0x72
   178fc:	strb	r3, [fp, #-39]	; 0xffffffd9
   17900:	b	17964 <__assert_fail@plt+0x6470>
   17904:	mov	r3, #116	; 0x74
   17908:	strb	r3, [fp, #-39]	; 0xffffffd9
   1790c:	b	17964 <__assert_fail@plt+0x6470>
   17910:	mov	r3, #118	; 0x76
   17914:	strb	r3, [fp, #-39]	; 0xffffffd9
   17918:	b	1797c <__assert_fail@plt+0x6488>
   1791c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   17920:	strb	r3, [fp, #-39]	; 0xffffffd9
   17924:	ldr	r3, [fp, #4]
   17928:	cmp	r3, #2
   1792c:	bne	17940 <__assert_fail@plt+0x644c>
   17930:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17934:	cmp	r3, #0
   17938:	beq	18294 <__assert_fail@plt+0x6da0>
   1793c:	b	18588 <__assert_fail@plt+0x7094>
   17940:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17944:	cmp	r3, #0
   17948:	beq	17964 <__assert_fail@plt+0x6470>
   1794c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17950:	cmp	r3, #0
   17954:	beq	17964 <__assert_fail@plt+0x6470>
   17958:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1795c:	cmp	r3, #0
   17960:	bne	1829c <__assert_fail@plt+0x6da8>
   17964:	ldr	r3, [fp, #4]
   17968:	cmp	r3, #2
   1796c:	bne	1797c <__assert_fail@plt+0x6488>
   17970:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17974:	cmp	r3, #0
   17978:	bne	1855c <__assert_fail@plt+0x7068>
   1797c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17980:	cmp	r3, #0
   17984:	beq	180e8 <__assert_fail@plt+0x6bf4>
   17988:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   1798c:	strb	r3, [fp, #-38]	; 0xffffffda
   17990:	b	18194 <__assert_fail@plt+0x6ca0>
   17994:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17998:	cmn	r3, #1
   1799c:	bne	179c0 <__assert_fail@plt+0x64cc>
   179a0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   179a4:	add	r3, r3, #1
   179a8:	ldrb	r3, [r3]
   179ac:	cmp	r3, #0
   179b0:	movne	r3, #1
   179b4:	moveq	r3, #0
   179b8:	uxtb	r3, r3
   179bc:	b	179d4 <__assert_fail@plt+0x64e0>
   179c0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   179c4:	cmp	r3, #1
   179c8:	movne	r3, #1
   179cc:	moveq	r3, #0
   179d0:	uxtb	r3, r3
   179d4:	cmp	r3, #0
   179d8:	bne	180f0 <__assert_fail@plt+0x6bfc>
   179dc:	ldr	r3, [fp, #-16]
   179e0:	cmp	r3, #0
   179e4:	bne	180f8 <__assert_fail@plt+0x6c04>
   179e8:	mov	r3, #1
   179ec:	strb	r3, [fp, #-42]	; 0xffffffd6
   179f0:	ldr	r3, [fp, #4]
   179f4:	cmp	r3, #2
   179f8:	bne	18100 <__assert_fail@plt+0x6c0c>
   179fc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17a00:	cmp	r3, #0
   17a04:	beq	18100 <__assert_fail@plt+0x6c0c>
   17a08:	b	18588 <__assert_fail@plt+0x7094>
   17a0c:	mov	r3, #1
   17a10:	strb	r3, [fp, #-36]	; 0xffffffdc
   17a14:	mov	r3, #1
   17a18:	strb	r3, [fp, #-42]	; 0xffffffd6
   17a1c:	ldr	r3, [fp, #4]
   17a20:	cmp	r3, #2
   17a24:	bne	18108 <__assert_fail@plt+0x6c14>
   17a28:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17a2c:	cmp	r3, #0
   17a30:	bne	18564 <__assert_fail@plt+0x7070>
   17a34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a38:	cmp	r3, #0
   17a3c:	beq	17a5c <__assert_fail@plt+0x6568>
   17a40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a44:	cmp	r3, #0
   17a48:	bne	17a5c <__assert_fail@plt+0x6568>
   17a4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a50:	str	r3, [fp, #-24]	; 0xffffffe8
   17a54:	mov	r3, #0
   17a58:	str	r3, [fp, #-92]	; 0xffffffa4
   17a5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17a60:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a64:	cmp	r2, r3
   17a68:	bcs	17a80 <__assert_fail@plt+0x658c>
   17a6c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17a70:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a74:	add	r3, r2, r3
   17a78:	mov	r2, #39	; 0x27
   17a7c:	strb	r2, [r3]
   17a80:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a84:	add	r3, r3, #1
   17a88:	str	r3, [fp, #-20]	; 0xffffffec
   17a8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17a90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17a94:	cmp	r2, r3
   17a98:	bcs	17ab0 <__assert_fail@plt+0x65bc>
   17a9c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17aa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17aa4:	add	r3, r2, r3
   17aa8:	mov	r2, #92	; 0x5c
   17aac:	strb	r2, [r3]
   17ab0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ab4:	add	r3, r3, #1
   17ab8:	str	r3, [fp, #-20]	; 0xffffffec
   17abc:	ldr	r2, [fp, #-20]	; 0xffffffec
   17ac0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ac4:	cmp	r2, r3
   17ac8:	bcs	17ae0 <__assert_fail@plt+0x65ec>
   17acc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17ad0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ad4:	add	r3, r2, r3
   17ad8:	mov	r2, #39	; 0x27
   17adc:	strb	r2, [r3]
   17ae0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ae4:	add	r3, r3, #1
   17ae8:	str	r3, [fp, #-20]	; 0xffffffec
   17aec:	mov	r3, #0
   17af0:	strb	r3, [fp, #-35]	; 0xffffffdd
   17af4:	b	18108 <__assert_fail@plt+0x6c14>
   17af8:	mov	r3, #1
   17afc:	strb	r3, [fp, #-42]	; 0xffffffd6
   17b00:	b	1810c <__assert_fail@plt+0x6c18>
   17b04:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   17b08:	cmp	r3, #0
   17b0c:	beq	17b4c <__assert_fail@plt+0x6658>
   17b10:	mov	r3, #1
   17b14:	str	r3, [fp, #-48]	; 0xffffffd0
   17b18:	bl	11344 <__ctype_b_loc@plt>
   17b1c:	mov	r3, r0
   17b20:	ldr	r2, [r3]
   17b24:	ldrb	r3, [fp, #-38]	; 0xffffffda
   17b28:	lsl	r3, r3, #1
   17b2c:	add	r3, r2, r3
   17b30:	ldrh	r3, [r3]
   17b34:	and	r3, r3, #16384	; 0x4000
   17b38:	cmp	r3, #0
   17b3c:	movne	r3, #1
   17b40:	moveq	r3, #0
   17b44:	strb	r3, [fp, #-49]	; 0xffffffcf
   17b48:	b	17d98 <__assert_fail@plt+0x68a4>
   17b4c:	sub	r3, fp, #76	; 0x4c
   17b50:	mov	r2, #8
   17b54:	mov	r1, #0
   17b58:	mov	r0, r3
   17b5c:	bl	113d4 <memset@plt>
   17b60:	mov	r3, #0
   17b64:	str	r3, [fp, #-48]	; 0xffffffd0
   17b68:	mov	r3, #1
   17b6c:	strb	r3, [fp, #-49]	; 0xffffffcf
   17b70:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17b74:	cmn	r3, #1
   17b78:	bne	17b88 <__assert_fail@plt+0x6694>
   17b7c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17b80:	bl	11368 <strlen@plt>
   17b84:	str	r0, [fp, #-100]	; 0xffffff9c
   17b88:	ldr	r2, [fp, #-16]
   17b8c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17b90:	add	r3, r2, r3
   17b94:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17b98:	add	r1, r2, r3
   17b9c:	ldr	r2, [fp, #-16]
   17ba0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17ba4:	add	r3, r2, r3
   17ba8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   17bac:	sub	r2, r2, r3
   17bb0:	sub	r3, fp, #76	; 0x4c
   17bb4:	sub	r0, fp, #80	; 0x50
   17bb8:	bl	1bb18 <__assert_fail@plt+0xa624>
   17bbc:	str	r0, [fp, #-64]	; 0xffffffc0
   17bc0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17bc4:	cmp	r3, #0
   17bc8:	beq	17d8c <__assert_fail@plt+0x6898>
   17bcc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17bd0:	cmn	r3, #1
   17bd4:	bne	17be4 <__assert_fail@plt+0x66f0>
   17bd8:	mov	r3, #0
   17bdc:	strb	r3, [fp, #-49]	; 0xffffffcf
   17be0:	b	17d98 <__assert_fail@plt+0x68a4>
   17be4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17be8:	cmn	r3, #2
   17bec:	bne	17c44 <__assert_fail@plt+0x6750>
   17bf0:	mov	r3, #0
   17bf4:	strb	r3, [fp, #-49]	; 0xffffffcf
   17bf8:	b	17c08 <__assert_fail@plt+0x6714>
   17bfc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17c00:	add	r3, r3, #1
   17c04:	str	r3, [fp, #-48]	; 0xffffffd0
   17c08:	ldr	r2, [fp, #-16]
   17c0c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17c10:	add	r2, r2, r3
   17c14:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17c18:	cmp	r2, r3
   17c1c:	bcs	17d94 <__assert_fail@plt+0x68a0>
   17c20:	ldr	r2, [fp, #-16]
   17c24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17c28:	add	r3, r2, r3
   17c2c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17c30:	add	r3, r2, r3
   17c34:	ldrb	r3, [r3]
   17c38:	cmp	r3, #0
   17c3c:	bne	17bfc <__assert_fail@plt+0x6708>
   17c40:	b	17d94 <__assert_fail@plt+0x68a0>
   17c44:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17c48:	cmp	r3, #0
   17c4c:	beq	17d40 <__assert_fail@plt+0x684c>
   17c50:	ldr	r3, [fp, #4]
   17c54:	cmp	r3, #2
   17c58:	bne	17d40 <__assert_fail@plt+0x684c>
   17c5c:	mov	r3, #1
   17c60:	str	r3, [fp, #-56]	; 0xffffffc8
   17c64:	b	17d30 <__assert_fail@plt+0x683c>
   17c68:	ldr	r2, [fp, #-16]
   17c6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17c70:	add	r2, r2, r3
   17c74:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17c78:	add	r3, r2, r3
   17c7c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17c80:	add	r3, r2, r3
   17c84:	ldrb	r3, [r3]
   17c88:	sub	r3, r3, #91	; 0x5b
   17c8c:	cmp	r3, #33	; 0x21
   17c90:	ldrls	pc, [pc, r3, lsl #2]
   17c94:	b	17d20 <__assert_fail@plt+0x682c>
   17c98:	andeq	r8, r1, ip, ror #10
   17c9c:	andeq	r8, r1, ip, ror #10
   17ca0:	andeq	r7, r1, r0, lsr #26
   17ca4:	andeq	r8, r1, ip, ror #10
   17ca8:	andeq	r7, r1, r0, lsr #26
   17cac:	andeq	r8, r1, ip, ror #10
   17cb0:	andeq	r7, r1, r0, lsr #26
   17cb4:	andeq	r7, r1, r0, lsr #26
   17cb8:	andeq	r7, r1, r0, lsr #26
   17cbc:	andeq	r7, r1, r0, lsr #26
   17cc0:	andeq	r7, r1, r0, lsr #26
   17cc4:	andeq	r7, r1, r0, lsr #26
   17cc8:	andeq	r7, r1, r0, lsr #26
   17ccc:	andeq	r7, r1, r0, lsr #26
   17cd0:	andeq	r7, r1, r0, lsr #26
   17cd4:	andeq	r7, r1, r0, lsr #26
   17cd8:	andeq	r7, r1, r0, lsr #26
   17cdc:	andeq	r7, r1, r0, lsr #26
   17ce0:	andeq	r7, r1, r0, lsr #26
   17ce4:	andeq	r7, r1, r0, lsr #26
   17ce8:	andeq	r7, r1, r0, lsr #26
   17cec:	andeq	r7, r1, r0, lsr #26
   17cf0:	andeq	r7, r1, r0, lsr #26
   17cf4:	andeq	r7, r1, r0, lsr #26
   17cf8:	andeq	r7, r1, r0, lsr #26
   17cfc:	andeq	r7, r1, r0, lsr #26
   17d00:	andeq	r7, r1, r0, lsr #26
   17d04:	andeq	r7, r1, r0, lsr #26
   17d08:	andeq	r7, r1, r0, lsr #26
   17d0c:	andeq	r7, r1, r0, lsr #26
   17d10:	andeq	r7, r1, r0, lsr #26
   17d14:	andeq	r7, r1, r0, lsr #26
   17d18:	andeq	r7, r1, r0, lsr #26
   17d1c:	andeq	r8, r1, ip, ror #10
   17d20:	nop			; (mov r0, r0)
   17d24:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17d28:	add	r3, r3, #1
   17d2c:	str	r3, [fp, #-56]	; 0xffffffc8
   17d30:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17d34:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17d38:	cmp	r2, r3
   17d3c:	bcc	17c68 <__assert_fail@plt+0x6774>
   17d40:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17d44:	mov	r0, r3
   17d48:	bl	11254 <iswprint@plt>
   17d4c:	mov	r3, r0
   17d50:	cmp	r3, #0
   17d54:	bne	17d60 <__assert_fail@plt+0x686c>
   17d58:	mov	r3, #0
   17d5c:	strb	r3, [fp, #-49]	; 0xffffffcf
   17d60:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17d64:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17d68:	add	r3, r2, r3
   17d6c:	str	r3, [fp, #-48]	; 0xffffffd0
   17d70:	sub	r3, fp, #76	; 0x4c
   17d74:	mov	r0, r3
   17d78:	bl	111e8 <mbsinit@plt>
   17d7c:	mov	r3, r0
   17d80:	cmp	r3, #0
   17d84:	beq	17b88 <__assert_fail@plt+0x6694>
   17d88:	b	17d98 <__assert_fail@plt+0x68a4>
   17d8c:	nop			; (mov r0, r0)
   17d90:	b	17d98 <__assert_fail@plt+0x68a4>
   17d94:	nop			; (mov r0, r0)
   17d98:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   17d9c:	strb	r3, [fp, #-42]	; 0xffffffd6
   17da0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17da4:	cmp	r3, #1
   17da8:	bhi	17dcc <__assert_fail@plt+0x68d8>
   17dac:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17db0:	cmp	r3, #0
   17db4:	beq	1810c <__assert_fail@plt+0x6c18>
   17db8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   17dbc:	eor	r3, r3, #1
   17dc0:	uxtb	r3, r3
   17dc4:	cmp	r3, #0
   17dc8:	beq	1810c <__assert_fail@plt+0x6c18>
   17dcc:	ldr	r2, [fp, #-16]
   17dd0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17dd4:	add	r3, r2, r3
   17dd8:	str	r3, [fp, #-68]	; 0xffffffbc
   17ddc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   17de0:	cmp	r3, #0
   17de4:	beq	17fa4 <__assert_fail@plt+0x6ab0>
   17de8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   17dec:	eor	r3, r3, #1
   17df0:	uxtb	r3, r3
   17df4:	cmp	r3, #0
   17df8:	beq	17fa4 <__assert_fail@plt+0x6ab0>
   17dfc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   17e00:	cmp	r3, #0
   17e04:	bne	18574 <__assert_fail@plt+0x7080>
   17e08:	mov	r3, #1
   17e0c:	strb	r3, [fp, #-41]	; 0xffffffd7
   17e10:	ldr	r3, [fp, #4]
   17e14:	cmp	r3, #2
   17e18:	bne	17ec8 <__assert_fail@plt+0x69d4>
   17e1c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   17e20:	eor	r3, r3, #1
   17e24:	uxtb	r3, r3
   17e28:	cmp	r3, #0
   17e2c:	beq	17ec8 <__assert_fail@plt+0x69d4>
   17e30:	ldr	r2, [fp, #-20]	; 0xffffffec
   17e34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e38:	cmp	r2, r3
   17e3c:	bcs	17e54 <__assert_fail@plt+0x6960>
   17e40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e48:	add	r3, r2, r3
   17e4c:	mov	r2, #39	; 0x27
   17e50:	strb	r2, [r3]
   17e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e58:	add	r3, r3, #1
   17e5c:	str	r3, [fp, #-20]	; 0xffffffec
   17e60:	ldr	r2, [fp, #-20]	; 0xffffffec
   17e64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e68:	cmp	r2, r3
   17e6c:	bcs	17e84 <__assert_fail@plt+0x6990>
   17e70:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17e74:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e78:	add	r3, r2, r3
   17e7c:	mov	r2, #36	; 0x24
   17e80:	strb	r2, [r3]
   17e84:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e88:	add	r3, r3, #1
   17e8c:	str	r3, [fp, #-20]	; 0xffffffec
   17e90:	ldr	r2, [fp, #-20]	; 0xffffffec
   17e94:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e98:	cmp	r2, r3
   17e9c:	bcs	17eb4 <__assert_fail@plt+0x69c0>
   17ea0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17ea4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ea8:	add	r3, r2, r3
   17eac:	mov	r2, #39	; 0x27
   17eb0:	strb	r2, [r3]
   17eb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17eb8:	add	r3, r3, #1
   17ebc:	str	r3, [fp, #-20]	; 0xffffffec
   17ec0:	mov	r3, #1
   17ec4:	strb	r3, [fp, #-35]	; 0xffffffdd
   17ec8:	ldr	r2, [fp, #-20]	; 0xffffffec
   17ecc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ed0:	cmp	r2, r3
   17ed4:	bcs	17eec <__assert_fail@plt+0x69f8>
   17ed8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17edc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ee0:	add	r3, r2, r3
   17ee4:	mov	r2, #92	; 0x5c
   17ee8:	strb	r2, [r3]
   17eec:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ef0:	add	r3, r3, #1
   17ef4:	str	r3, [fp, #-20]	; 0xffffffec
   17ef8:	ldr	r2, [fp, #-20]	; 0xffffffec
   17efc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f00:	cmp	r2, r3
   17f04:	bcs	17f2c <__assert_fail@plt+0x6a38>
   17f08:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17f0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f10:	add	r3, r2, r3
   17f14:	ldrb	r2, [fp, #-38]	; 0xffffffda
   17f18:	lsr	r2, r2, #6
   17f1c:	uxtb	r2, r2
   17f20:	add	r2, r2, #48	; 0x30
   17f24:	uxtb	r2, r2
   17f28:	strb	r2, [r3]
   17f2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f30:	add	r3, r3, #1
   17f34:	str	r3, [fp, #-20]	; 0xffffffec
   17f38:	ldr	r2, [fp, #-20]	; 0xffffffec
   17f3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f40:	cmp	r2, r3
   17f44:	bcs	17f74 <__assert_fail@plt+0x6a80>
   17f48:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17f4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f50:	add	r3, r2, r3
   17f54:	ldrb	r2, [fp, #-38]	; 0xffffffda
   17f58:	lsr	r2, r2, #3
   17f5c:	uxtb	r2, r2
   17f60:	and	r2, r2, #7
   17f64:	uxtb	r2, r2
   17f68:	add	r2, r2, #48	; 0x30
   17f6c:	uxtb	r2, r2
   17f70:	strb	r2, [r3]
   17f74:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f78:	add	r3, r3, #1
   17f7c:	str	r3, [fp, #-20]	; 0xffffffec
   17f80:	ldrb	r3, [fp, #-38]	; 0xffffffda
   17f84:	and	r3, r3, #7
   17f88:	uxtb	r3, r3
   17f8c:	add	r3, r3, #48	; 0x30
   17f90:	strb	r3, [fp, #-38]	; 0xffffffda
   17f94:	b	17fe8 <__assert_fail@plt+0x6af4>
   17f98:	andeq	lr, r1, r4, lsr r1
   17f9c:	andeq	lr, r1, ip, lsr r1
   17fa0:	andeq	lr, r1, r8, lsr r1
   17fa4:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   17fa8:	cmp	r3, #0
   17fac:	beq	17fe8 <__assert_fail@plt+0x6af4>
   17fb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   17fb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17fb8:	cmp	r2, r3
   17fbc:	bcs	17fd4 <__assert_fail@plt+0x6ae0>
   17fc0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17fc8:	add	r3, r2, r3
   17fcc:	mov	r2, #92	; 0x5c
   17fd0:	strb	r2, [r3]
   17fd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17fd8:	add	r3, r3, #1
   17fdc:	str	r3, [fp, #-20]	; 0xffffffec
   17fe0:	mov	r3, #0
   17fe4:	strb	r3, [fp, #-40]	; 0xffffffd8
   17fe8:	ldr	r3, [fp, #-16]
   17fec:	add	r2, r3, #1
   17ff0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   17ff4:	cmp	r2, r3
   17ff8:	bcs	180d8 <__assert_fail@plt+0x6be4>
   17ffc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   18000:	cmp	r3, #0
   18004:	beq	18084 <__assert_fail@plt+0x6b90>
   18008:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1800c:	eor	r3, r3, #1
   18010:	uxtb	r3, r3
   18014:	cmp	r3, #0
   18018:	beq	18084 <__assert_fail@plt+0x6b90>
   1801c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18020:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18024:	cmp	r2, r3
   18028:	bcs	18040 <__assert_fail@plt+0x6b4c>
   1802c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18030:	ldr	r3, [fp, #-20]	; 0xffffffec
   18034:	add	r3, r2, r3
   18038:	mov	r2, #39	; 0x27
   1803c:	strb	r2, [r3]
   18040:	ldr	r3, [fp, #-20]	; 0xffffffec
   18044:	add	r3, r3, #1
   18048:	str	r3, [fp, #-20]	; 0xffffffec
   1804c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18050:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18054:	cmp	r2, r3
   18058:	bcs	18070 <__assert_fail@plt+0x6b7c>
   1805c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18060:	ldr	r3, [fp, #-20]	; 0xffffffec
   18064:	add	r3, r2, r3
   18068:	mov	r2, #39	; 0x27
   1806c:	strb	r2, [r3]
   18070:	ldr	r3, [fp, #-20]	; 0xffffffec
   18074:	add	r3, r3, #1
   18078:	str	r3, [fp, #-20]	; 0xffffffec
   1807c:	mov	r3, #0
   18080:	strb	r3, [fp, #-35]	; 0xffffffdd
   18084:	ldr	r2, [fp, #-20]	; 0xffffffec
   18088:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1808c:	cmp	r2, r3
   18090:	bcs	180a8 <__assert_fail@plt+0x6bb4>
   18094:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18098:	ldr	r3, [fp, #-20]	; 0xffffffec
   1809c:	add	r3, r2, r3
   180a0:	ldrb	r2, [fp, #-38]	; 0xffffffda
   180a4:	strb	r2, [r3]
   180a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   180ac:	add	r3, r3, #1
   180b0:	str	r3, [fp, #-20]	; 0xffffffec
   180b4:	ldr	r3, [fp, #-16]
   180b8:	add	r3, r3, #1
   180bc:	str	r3, [fp, #-16]
   180c0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   180c4:	ldr	r3, [fp, #-16]
   180c8:	add	r3, r2, r3
   180cc:	ldrb	r3, [r3]
   180d0:	strb	r3, [fp, #-38]	; 0xffffffda
   180d4:	b	17ddc <__assert_fail@plt+0x68e8>
   180d8:	nop			; (mov r0, r0)
   180dc:	b	182a8 <__assert_fail@plt+0x6db4>
   180e0:	nop			; (mov r0, r0)
   180e4:	b	1810c <__assert_fail@plt+0x6c18>
   180e8:	nop			; (mov r0, r0)
   180ec:	b	1810c <__assert_fail@plt+0x6c18>
   180f0:	nop			; (mov r0, r0)
   180f4:	b	1810c <__assert_fail@plt+0x6c18>
   180f8:	nop			; (mov r0, r0)
   180fc:	b	1810c <__assert_fail@plt+0x6c18>
   18100:	nop			; (mov r0, r0)
   18104:	b	1810c <__assert_fail@plt+0x6c18>
   18108:	nop			; (mov r0, r0)
   1810c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18110:	eor	r3, r3, #1
   18114:	uxtb	r3, r3
   18118:	cmp	r3, #0
   1811c:	bne	1812c <__assert_fail@plt+0x6c38>
   18120:	ldr	r3, [fp, #4]
   18124:	cmp	r3, #2
   18128:	bne	18140 <__assert_fail@plt+0x6c4c>
   1812c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18130:	eor	r3, r3, #1
   18134:	uxtb	r3, r3
   18138:	cmp	r3, #0
   1813c:	bne	18180 <__assert_fail@plt+0x6c8c>
   18140:	ldr	r3, [fp, #12]
   18144:	cmp	r3, #0
   18148:	beq	18180 <__assert_fail@plt+0x6c8c>
   1814c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   18150:	lsr	r3, r3, #5
   18154:	uxtb	r3, r3
   18158:	lsl	r3, r3, #2
   1815c:	ldr	r2, [fp, #12]
   18160:	add	r3, r2, r3
   18164:	ldr	r2, [r3]
   18168:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1816c:	and	r3, r3, #31
   18170:	lsr	r3, r2, r3
   18174:	and	r3, r3, #1
   18178:	cmp	r3, #0
   1817c:	bne	18194 <__assert_fail@plt+0x6ca0>
   18180:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   18184:	eor	r3, r3, #1
   18188:	uxtb	r3, r3
   1818c:	cmp	r3, #0
   18190:	bne	182a4 <__assert_fail@plt+0x6db0>
   18194:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18198:	cmp	r3, #0
   1819c:	bne	1857c <__assert_fail@plt+0x7088>
   181a0:	mov	r3, #1
   181a4:	strb	r3, [fp, #-41]	; 0xffffffd7
   181a8:	ldr	r3, [fp, #4]
   181ac:	cmp	r3, #2
   181b0:	bne	18260 <__assert_fail@plt+0x6d6c>
   181b4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   181b8:	eor	r3, r3, #1
   181bc:	uxtb	r3, r3
   181c0:	cmp	r3, #0
   181c4:	beq	18260 <__assert_fail@plt+0x6d6c>
   181c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   181cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   181d0:	cmp	r2, r3
   181d4:	bcs	181ec <__assert_fail@plt+0x6cf8>
   181d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   181dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   181e0:	add	r3, r2, r3
   181e4:	mov	r2, #39	; 0x27
   181e8:	strb	r2, [r3]
   181ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   181f0:	add	r3, r3, #1
   181f4:	str	r3, [fp, #-20]	; 0xffffffec
   181f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   181fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18200:	cmp	r2, r3
   18204:	bcs	1821c <__assert_fail@plt+0x6d28>
   18208:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1820c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18210:	add	r3, r2, r3
   18214:	mov	r2, #36	; 0x24
   18218:	strb	r2, [r3]
   1821c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18220:	add	r3, r3, #1
   18224:	str	r3, [fp, #-20]	; 0xffffffec
   18228:	ldr	r2, [fp, #-20]	; 0xffffffec
   1822c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18230:	cmp	r2, r3
   18234:	bcs	1824c <__assert_fail@plt+0x6d58>
   18238:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1823c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18240:	add	r3, r2, r3
   18244:	mov	r2, #39	; 0x27
   18248:	strb	r2, [r3]
   1824c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18250:	add	r3, r3, #1
   18254:	str	r3, [fp, #-20]	; 0xffffffec
   18258:	mov	r3, #1
   1825c:	strb	r3, [fp, #-35]	; 0xffffffdd
   18260:	ldr	r2, [fp, #-20]	; 0xffffffec
   18264:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18268:	cmp	r2, r3
   1826c:	bcs	18284 <__assert_fail@plt+0x6d90>
   18270:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18274:	ldr	r3, [fp, #-20]	; 0xffffffec
   18278:	add	r3, r2, r3
   1827c:	mov	r2, #92	; 0x5c
   18280:	strb	r2, [r3]
   18284:	ldr	r3, [fp, #-20]	; 0xffffffec
   18288:	add	r3, r3, #1
   1828c:	str	r3, [fp, #-20]	; 0xffffffec
   18290:	b	182a8 <__assert_fail@plt+0x6db4>
   18294:	nop			; (mov r0, r0)
   18298:	b	182a8 <__assert_fail@plt+0x6db4>
   1829c:	nop			; (mov r0, r0)
   182a0:	b	182a8 <__assert_fail@plt+0x6db4>
   182a4:	nop			; (mov r0, r0)
   182a8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   182ac:	cmp	r3, #0
   182b0:	beq	18330 <__assert_fail@plt+0x6e3c>
   182b4:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   182b8:	eor	r3, r3, #1
   182bc:	uxtb	r3, r3
   182c0:	cmp	r3, #0
   182c4:	beq	18330 <__assert_fail@plt+0x6e3c>
   182c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   182cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   182d0:	cmp	r2, r3
   182d4:	bcs	182ec <__assert_fail@plt+0x6df8>
   182d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   182dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   182e0:	add	r3, r2, r3
   182e4:	mov	r2, #39	; 0x27
   182e8:	strb	r2, [r3]
   182ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   182f0:	add	r3, r3, #1
   182f4:	str	r3, [fp, #-20]	; 0xffffffec
   182f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   182fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18300:	cmp	r2, r3
   18304:	bcs	1831c <__assert_fail@plt+0x6e28>
   18308:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1830c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18310:	add	r3, r2, r3
   18314:	mov	r2, #39	; 0x27
   18318:	strb	r2, [r3]
   1831c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18320:	add	r3, r3, #1
   18324:	str	r3, [fp, #-20]	; 0xffffffec
   18328:	mov	r3, #0
   1832c:	strb	r3, [fp, #-35]	; 0xffffffdd
   18330:	ldr	r2, [fp, #-20]	; 0xffffffec
   18334:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18338:	cmp	r2, r3
   1833c:	bcs	18354 <__assert_fail@plt+0x6e60>
   18340:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18344:	ldr	r3, [fp, #-20]	; 0xffffffec
   18348:	add	r3, r2, r3
   1834c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   18350:	strb	r2, [r3]
   18354:	ldr	r3, [fp, #-20]	; 0xffffffec
   18358:	add	r3, r3, #1
   1835c:	str	r3, [fp, #-20]	; 0xffffffec
   18360:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   18364:	eor	r3, r3, #1
   18368:	uxtb	r3, r3
   1836c:	cmp	r3, #0
   18370:	beq	1837c <__assert_fail@plt+0x6e88>
   18374:	mov	r3, #0
   18378:	strb	r3, [fp, #-37]	; 0xffffffdb
   1837c:	ldr	r3, [fp, #-16]
   18380:	add	r3, r3, #1
   18384:	str	r3, [fp, #-16]
   18388:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1838c:	cmn	r3, #1
   18390:	bne	183b8 <__assert_fail@plt+0x6ec4>
   18394:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18398:	ldr	r3, [fp, #-16]
   1839c:	add	r3, r2, r3
   183a0:	ldrb	r3, [r3]
   183a4:	cmp	r3, #0
   183a8:	movne	r3, #1
   183ac:	moveq	r3, #0
   183b0:	uxtb	r3, r3
   183b4:	b	183d0 <__assert_fail@plt+0x6edc>
   183b8:	ldr	r2, [fp, #-16]
   183bc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   183c0:	cmp	r2, r3
   183c4:	movne	r3, #1
   183c8:	moveq	r3, #0
   183cc:	uxtb	r3, r3
   183d0:	cmp	r3, #0
   183d4:	bne	171fc <__assert_fail@plt+0x5d08>
   183d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   183dc:	cmp	r3, #0
   183e0:	bne	183fc <__assert_fail@plt+0x6f08>
   183e4:	ldr	r3, [fp, #4]
   183e8:	cmp	r3, #2
   183ec:	bne	183fc <__assert_fail@plt+0x6f08>
   183f0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   183f4:	cmp	r3, #0
   183f8:	bne	18584 <__assert_fail@plt+0x7090>
   183fc:	ldr	r3, [fp, #4]
   18400:	cmp	r3, #2
   18404:	bne	184a4 <__assert_fail@plt+0x6fb0>
   18408:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1840c:	eor	r3, r3, #1
   18410:	uxtb	r3, r3
   18414:	cmp	r3, #0
   18418:	beq	184a4 <__assert_fail@plt+0x6fb0>
   1841c:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   18420:	cmp	r3, #0
   18424:	beq	184a4 <__assert_fail@plt+0x6fb0>
   18428:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1842c:	cmp	r3, #0
   18430:	beq	18478 <__assert_fail@plt+0x6f84>
   18434:	ldr	r3, [fp, #20]
   18438:	str	r3, [sp, #16]
   1843c:	ldr	r3, [fp, #16]
   18440:	str	r3, [sp, #12]
   18444:	ldr	r3, [fp, #12]
   18448:	str	r3, [sp, #8]
   1844c:	ldr	r3, [fp, #8]
   18450:	str	r3, [sp, #4]
   18454:	mov	r3, #5
   18458:	str	r3, [sp]
   1845c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18460:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18464:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18468:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1846c:	bl	16f4c <__assert_fail@plt+0x5a58>
   18470:	mov	r3, r0
   18474:	b	185ec <__assert_fail@plt+0x70f8>
   18478:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1847c:	cmp	r3, #0
   18480:	bne	184a4 <__assert_fail@plt+0x6fb0>
   18484:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18488:	cmp	r3, #0
   1848c:	beq	184a4 <__assert_fail@plt+0x6fb0>
   18490:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18494:	str	r3, [fp, #-92]	; 0xffffffa4
   18498:	mov	r3, #0
   1849c:	str	r3, [fp, #-20]	; 0xffffffec
   184a0:	b	16fd8 <__assert_fail@plt+0x5ae4>
   184a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   184a8:	cmp	r3, #0
   184ac:	beq	18518 <__assert_fail@plt+0x7024>
   184b0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   184b4:	eor	r3, r3, #1
   184b8:	uxtb	r3, r3
   184bc:	cmp	r3, #0
   184c0:	beq	18518 <__assert_fail@plt+0x7024>
   184c4:	b	18508 <__assert_fail@plt+0x7014>
   184c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   184cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   184d0:	cmp	r2, r3
   184d4:	bcs	184f0 <__assert_fail@plt+0x6ffc>
   184d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   184dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   184e0:	add	r3, r2, r3
   184e4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   184e8:	ldrb	r2, [r2]
   184ec:	strb	r2, [r3]
   184f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   184f4:	add	r3, r3, #1
   184f8:	str	r3, [fp, #-20]	; 0xffffffec
   184fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18500:	add	r3, r3, #1
   18504:	str	r3, [fp, #-28]	; 0xffffffe4
   18508:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1850c:	ldrb	r3, [r3]
   18510:	cmp	r3, #0
   18514:	bne	184c8 <__assert_fail@plt+0x6fd4>
   18518:	ldr	r2, [fp, #-20]	; 0xffffffec
   1851c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18520:	cmp	r2, r3
   18524:	bcs	1853c <__assert_fail@plt+0x7048>
   18528:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1852c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18530:	add	r3, r2, r3
   18534:	mov	r2, #0
   18538:	strb	r2, [r3]
   1853c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18540:	b	185ec <__assert_fail@plt+0x70f8>
   18544:	nop			; (mov r0, r0)
   18548:	b	18588 <__assert_fail@plt+0x7094>
   1854c:	nop			; (mov r0, r0)
   18550:	b	18588 <__assert_fail@plt+0x7094>
   18554:	nop			; (mov r0, r0)
   18558:	b	18588 <__assert_fail@plt+0x7094>
   1855c:	nop			; (mov r0, r0)
   18560:	b	18588 <__assert_fail@plt+0x7094>
   18564:	nop			; (mov r0, r0)
   18568:	b	18588 <__assert_fail@plt+0x7094>
   1856c:	nop			; (mov r0, r0)
   18570:	b	18588 <__assert_fail@plt+0x7094>
   18574:	nop			; (mov r0, r0)
   18578:	b	18588 <__assert_fail@plt+0x7094>
   1857c:	nop			; (mov r0, r0)
   18580:	b	18588 <__assert_fail@plt+0x7094>
   18584:	nop			; (mov r0, r0)
   18588:	ldr	r3, [fp, #4]
   1858c:	cmp	r3, #2
   18590:	bne	185a8 <__assert_fail@plt+0x70b4>
   18594:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18598:	cmp	r3, #0
   1859c:	beq	185a8 <__assert_fail@plt+0x70b4>
   185a0:	mov	r3, #4
   185a4:	str	r3, [fp, #4]
   185a8:	ldr	r3, [fp, #8]
   185ac:	bic	r3, r3, #2
   185b0:	ldr	r2, [fp, #20]
   185b4:	str	r2, [sp, #16]
   185b8:	ldr	r2, [fp, #16]
   185bc:	str	r2, [sp, #12]
   185c0:	mov	r2, #0
   185c4:	str	r2, [sp, #8]
   185c8:	str	r3, [sp, #4]
   185cc:	ldr	r3, [fp, #4]
   185d0:	str	r3, [sp]
   185d4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   185d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   185dc:	ldr	r1, [fp, #-92]	; 0xffffffa4
   185e0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   185e4:	bl	16f4c <__assert_fail@plt+0x5a58>
   185e8:	mov	r3, r0
   185ec:	mov	r0, r3
   185f0:	sub	sp, fp, #8
   185f4:	pop	{r4, fp, pc}
   185f8:	push	{fp, lr}
   185fc:	add	fp, sp, #4
   18600:	sub	sp, sp, #56	; 0x38
   18604:	str	r0, [fp, #-24]	; 0xffffffe8
   18608:	str	r1, [fp, #-28]	; 0xffffffe4
   1860c:	str	r2, [fp, #-32]	; 0xffffffe0
   18610:	str	r3, [fp, #-36]	; 0xffffffdc
   18614:	ldr	r3, [fp, #4]
   18618:	cmp	r3, #0
   1861c:	beq	18628 <__assert_fail@plt+0x7134>
   18620:	ldr	r3, [fp, #4]
   18624:	b	1862c <__assert_fail@plt+0x7138>
   18628:	ldr	r3, [pc, #132]	; 186b4 <__assert_fail@plt+0x71c0>
   1862c:	str	r3, [fp, #-8]
   18630:	bl	113bc <__errno_location@plt>
   18634:	mov	r3, r0
   18638:	ldr	r3, [r3]
   1863c:	str	r3, [fp, #-12]
   18640:	ldr	r3, [fp, #-8]
   18644:	ldr	r3, [r3]
   18648:	ldr	r2, [fp, #-8]
   1864c:	ldr	r2, [r2, #4]
   18650:	ldr	r1, [fp, #-8]
   18654:	add	r1, r1, #8
   18658:	ldr	r0, [fp, #-8]
   1865c:	ldr	r0, [r0, #40]	; 0x28
   18660:	ldr	ip, [fp, #-8]
   18664:	ldr	ip, [ip, #44]	; 0x2c
   18668:	str	ip, [sp, #16]
   1866c:	str	r0, [sp, #12]
   18670:	str	r1, [sp, #8]
   18674:	str	r2, [sp, #4]
   18678:	str	r3, [sp]
   1867c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18680:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18684:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18688:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1868c:	bl	16f4c <__assert_fail@plt+0x5a58>
   18690:	str	r0, [fp, #-16]
   18694:	bl	113bc <__errno_location@plt>
   18698:	mov	r2, r0
   1869c:	ldr	r3, [fp, #-12]
   186a0:	str	r3, [r2]
   186a4:	ldr	r3, [fp, #-16]
   186a8:	mov	r0, r3
   186ac:	sub	sp, fp, #4
   186b0:	pop	{fp, pc}
   186b4:	andeq	pc, r2, r0, lsr r5	; <UNPREDICTABLE>
   186b8:	push	{fp, lr}
   186bc:	add	fp, sp, #4
   186c0:	sub	sp, sp, #16
   186c4:	str	r0, [fp, #-8]
   186c8:	str	r1, [fp, #-12]
   186cc:	str	r2, [fp, #-16]
   186d0:	ldr	r3, [fp, #-16]
   186d4:	mov	r2, #0
   186d8:	ldr	r1, [fp, #-12]
   186dc:	ldr	r0, [fp, #-8]
   186e0:	bl	186f4 <__assert_fail@plt+0x7200>
   186e4:	mov	r3, r0
   186e8:	mov	r0, r3
   186ec:	sub	sp, fp, #4
   186f0:	pop	{fp, pc}
   186f4:	push	{fp, lr}
   186f8:	add	fp, sp, #4
   186fc:	sub	sp, sp, #64	; 0x40
   18700:	str	r0, [fp, #-32]	; 0xffffffe0
   18704:	str	r1, [fp, #-36]	; 0xffffffdc
   18708:	str	r2, [fp, #-40]	; 0xffffffd8
   1870c:	str	r3, [fp, #-44]	; 0xffffffd4
   18710:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18714:	cmp	r3, #0
   18718:	beq	18724 <__assert_fail@plt+0x7230>
   1871c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18720:	b	18728 <__assert_fail@plt+0x7234>
   18724:	ldr	r3, [pc, #292]	; 18850 <__assert_fail@plt+0x735c>
   18728:	str	r3, [fp, #-8]
   1872c:	bl	113bc <__errno_location@plt>
   18730:	mov	r3, r0
   18734:	ldr	r3, [r3]
   18738:	str	r3, [fp, #-12]
   1873c:	ldr	r3, [fp, #-8]
   18740:	ldr	r3, [r3, #4]
   18744:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18748:	cmp	r2, #0
   1874c:	moveq	r2, #1
   18750:	movne	r2, #0
   18754:	uxtb	r2, r2
   18758:	orr	r3, r3, r2
   1875c:	str	r3, [fp, #-16]
   18760:	ldr	r3, [fp, #-8]
   18764:	ldr	r3, [r3]
   18768:	ldr	r2, [fp, #-8]
   1876c:	add	r2, r2, #8
   18770:	ldr	r1, [fp, #-8]
   18774:	ldr	r1, [r1, #40]	; 0x28
   18778:	ldr	r0, [fp, #-8]
   1877c:	ldr	r0, [r0, #44]	; 0x2c
   18780:	str	r0, [sp, #16]
   18784:	str	r1, [sp, #12]
   18788:	str	r2, [sp, #8]
   1878c:	ldr	r2, [fp, #-16]
   18790:	str	r2, [sp, #4]
   18794:	str	r3, [sp]
   18798:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1879c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   187a0:	mov	r1, #0
   187a4:	mov	r0, #0
   187a8:	bl	16f4c <__assert_fail@plt+0x5a58>
   187ac:	mov	r3, r0
   187b0:	add	r3, r3, #1
   187b4:	str	r3, [fp, #-20]	; 0xffffffec
   187b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   187bc:	bl	19ffc <__assert_fail@plt+0x8b08>
   187c0:	mov	r3, r0
   187c4:	str	r3, [fp, #-24]	; 0xffffffe8
   187c8:	ldr	r3, [fp, #-8]
   187cc:	ldr	r3, [r3]
   187d0:	ldr	r2, [fp, #-8]
   187d4:	add	r2, r2, #8
   187d8:	ldr	r1, [fp, #-8]
   187dc:	ldr	r1, [r1, #40]	; 0x28
   187e0:	ldr	r0, [fp, #-8]
   187e4:	ldr	r0, [r0, #44]	; 0x2c
   187e8:	str	r0, [sp, #16]
   187ec:	str	r1, [sp, #12]
   187f0:	str	r2, [sp, #8]
   187f4:	ldr	r2, [fp, #-16]
   187f8:	str	r2, [sp, #4]
   187fc:	str	r3, [sp]
   18800:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18804:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18808:	ldr	r1, [fp, #-20]	; 0xffffffec
   1880c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18810:	bl	16f4c <__assert_fail@plt+0x5a58>
   18814:	bl	113bc <__errno_location@plt>
   18818:	mov	r2, r0
   1881c:	ldr	r3, [fp, #-12]
   18820:	str	r3, [r2]
   18824:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18828:	cmp	r3, #0
   1882c:	beq	18840 <__assert_fail@plt+0x734c>
   18830:	ldr	r3, [fp, #-20]	; 0xffffffec
   18834:	sub	r2, r3, #1
   18838:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1883c:	str	r2, [r3]
   18840:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18844:	mov	r0, r3
   18848:	sub	sp, fp, #4
   1884c:	pop	{fp, pc}
   18850:	andeq	pc, r2, r0, lsr r5	; <UNPREDICTABLE>
   18854:	push	{fp, lr}
   18858:	add	fp, sp, #4
   1885c:	sub	sp, sp, #8
   18860:	ldr	r3, [pc, #196]	; 1892c <__assert_fail@plt+0x7438>
   18864:	ldr	r3, [r3]
   18868:	str	r3, [fp, #-12]
   1886c:	mov	r3, #1
   18870:	str	r3, [fp, #-8]
   18874:	b	188a0 <__assert_fail@plt+0x73ac>
   18878:	ldr	r3, [fp, #-8]
   1887c:	lsl	r3, r3, #3
   18880:	ldr	r2, [fp, #-12]
   18884:	add	r3, r2, r3
   18888:	ldr	r3, [r3, #4]
   1888c:	mov	r0, r3
   18890:	bl	1677c <__assert_fail@plt+0x5288>
   18894:	ldr	r3, [fp, #-8]
   18898:	add	r3, r3, #1
   1889c:	str	r3, [fp, #-8]
   188a0:	ldr	r3, [pc, #136]	; 18930 <__assert_fail@plt+0x743c>
   188a4:	ldr	r3, [r3]
   188a8:	ldr	r2, [fp, #-8]
   188ac:	cmp	r2, r3
   188b0:	blt	18878 <__assert_fail@plt+0x7384>
   188b4:	ldr	r3, [fp, #-12]
   188b8:	ldr	r3, [r3, #4]
   188bc:	ldr	r2, [pc, #112]	; 18934 <__assert_fail@plt+0x7440>
   188c0:	cmp	r3, r2
   188c4:	beq	188f0 <__assert_fail@plt+0x73fc>
   188c8:	ldr	r3, [fp, #-12]
   188cc:	ldr	r3, [r3, #4]
   188d0:	mov	r0, r3
   188d4:	bl	1677c <__assert_fail@plt+0x5288>
   188d8:	ldr	r3, [pc, #88]	; 18938 <__assert_fail@plt+0x7444>
   188dc:	mov	r2, #256	; 0x100
   188e0:	str	r2, [r3]
   188e4:	ldr	r3, [pc, #76]	; 18938 <__assert_fail@plt+0x7444>
   188e8:	ldr	r2, [pc, #68]	; 18934 <__assert_fail@plt+0x7440>
   188ec:	str	r2, [r3, #4]
   188f0:	ldr	r3, [fp, #-12]
   188f4:	ldr	r2, [pc, #60]	; 18938 <__assert_fail@plt+0x7444>
   188f8:	cmp	r3, r2
   188fc:	beq	18914 <__assert_fail@plt+0x7420>
   18900:	ldr	r0, [fp, #-12]
   18904:	bl	1677c <__assert_fail@plt+0x5288>
   18908:	ldr	r3, [pc, #28]	; 1892c <__assert_fail@plt+0x7438>
   1890c:	ldr	r2, [pc, #36]	; 18938 <__assert_fail@plt+0x7444>
   18910:	str	r2, [r3]
   18914:	ldr	r3, [pc, #20]	; 18930 <__assert_fail@plt+0x743c>
   18918:	mov	r2, #1
   1891c:	str	r2, [r3]
   18920:	nop			; (mov r0, r0)
   18924:	sub	sp, fp, #4
   18928:	pop	{fp, pc}
   1892c:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   18930:	andeq	pc, r2, r0, ror r1	; <UNPREDICTABLE>
   18934:	andeq	pc, r2, r0, ror #10
   18938:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   1893c:	push	{r4, fp, lr}
   18940:	add	fp, sp, #8
   18944:	sub	sp, sp, #84	; 0x54
   18948:	str	r0, [fp, #-56]	; 0xffffffc8
   1894c:	str	r1, [fp, #-60]	; 0xffffffc4
   18950:	str	r2, [fp, #-64]	; 0xffffffc0
   18954:	str	r3, [fp, #-68]	; 0xffffffbc
   18958:	bl	113bc <__errno_location@plt>
   1895c:	mov	r3, r0
   18960:	ldr	r3, [r3]
   18964:	str	r3, [fp, #-24]	; 0xffffffe8
   18968:	ldr	r3, [pc, #640]	; 18bf0 <__assert_fail@plt+0x76fc>
   1896c:	ldr	r3, [r3]
   18970:	str	r3, [fp, #-16]
   18974:	mvn	r3, #-2147483648	; 0x80000000
   18978:	str	r3, [fp, #-28]	; 0xffffffe4
   1897c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18980:	cmp	r3, #0
   18984:	blt	18998 <__assert_fail@plt+0x74a4>
   18988:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1898c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18990:	cmp	r2, r3
   18994:	blt	1899c <__assert_fail@plt+0x74a8>
   18998:	bl	114d0 <abort@plt>
   1899c:	ldr	r3, [pc, #592]	; 18bf4 <__assert_fail@plt+0x7700>
   189a0:	ldr	r2, [r3]
   189a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   189a8:	cmp	r2, r3
   189ac:	bgt	18a80 <__assert_fail@plt+0x758c>
   189b0:	ldr	r3, [fp, #-16]
   189b4:	ldr	r2, [pc, #572]	; 18bf8 <__assert_fail@plt+0x7704>
   189b8:	cmp	r3, r2
   189bc:	moveq	r3, #1
   189c0:	movne	r3, #0
   189c4:	strb	r3, [fp, #-29]	; 0xffffffe3
   189c8:	ldr	r3, [pc, #548]	; 18bf4 <__assert_fail@plt+0x7700>
   189cc:	ldr	r3, [r3]
   189d0:	str	r3, [fp, #-48]	; 0xffffffd0
   189d4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   189d8:	cmp	r3, #0
   189dc:	beq	189e8 <__assert_fail@plt+0x74f4>
   189e0:	mov	r0, #0
   189e4:	b	189ec <__assert_fail@plt+0x74f8>
   189e8:	ldr	r0, [fp, #-16]
   189ec:	ldr	r3, [pc, #512]	; 18bf4 <__assert_fail@plt+0x7700>
   189f0:	ldr	r3, [r3]
   189f4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   189f8:	sub	r3, r2, r3
   189fc:	add	r2, r3, #1
   18a00:	sub	r1, fp, #48	; 0x30
   18a04:	mov	r3, #8
   18a08:	str	r3, [sp]
   18a0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18a10:	bl	1a31c <__assert_fail@plt+0x8e28>
   18a14:	str	r0, [fp, #-16]
   18a18:	ldr	r2, [pc, #464]	; 18bf0 <__assert_fail@plt+0x76fc>
   18a1c:	ldr	r3, [fp, #-16]
   18a20:	str	r3, [r2]
   18a24:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   18a28:	cmp	r3, #0
   18a2c:	beq	18a40 <__assert_fail@plt+0x754c>
   18a30:	ldr	r3, [fp, #-16]
   18a34:	ldr	r2, [pc, #444]	; 18bf8 <__assert_fail@plt+0x7704>
   18a38:	ldm	r2, {r0, r1}
   18a3c:	stm	r3, {r0, r1}
   18a40:	ldr	r3, [pc, #428]	; 18bf4 <__assert_fail@plt+0x7700>
   18a44:	ldr	r3, [r3]
   18a48:	lsl	r3, r3, #3
   18a4c:	ldr	r2, [fp, #-16]
   18a50:	add	r0, r2, r3
   18a54:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18a58:	ldr	r3, [pc, #404]	; 18bf4 <__assert_fail@plt+0x7700>
   18a5c:	ldr	r3, [r3]
   18a60:	sub	r3, r2, r3
   18a64:	lsl	r3, r3, #3
   18a68:	mov	r2, r3
   18a6c:	mov	r1, #0
   18a70:	bl	113d4 <memset@plt>
   18a74:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18a78:	ldr	r2, [pc, #372]	; 18bf4 <__assert_fail@plt+0x7700>
   18a7c:	str	r3, [r2]
   18a80:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18a84:	lsl	r3, r3, #3
   18a88:	ldr	r2, [fp, #-16]
   18a8c:	add	r3, r2, r3
   18a90:	ldr	r3, [r3]
   18a94:	str	r3, [fp, #-36]	; 0xffffffdc
   18a98:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18a9c:	lsl	r3, r3, #3
   18aa0:	ldr	r2, [fp, #-16]
   18aa4:	add	r3, r2, r3
   18aa8:	ldr	r3, [r3, #4]
   18aac:	str	r3, [fp, #-20]	; 0xffffffec
   18ab0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   18ab4:	ldr	r3, [r3, #4]
   18ab8:	orr	r3, r3, #1
   18abc:	str	r3, [fp, #-40]	; 0xffffffd8
   18ac0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   18ac4:	ldr	r3, [r3]
   18ac8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18acc:	add	r2, r2, #8
   18ad0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   18ad4:	ldr	r1, [r1, #40]	; 0x28
   18ad8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18adc:	ldr	r0, [r0, #44]	; 0x2c
   18ae0:	str	r0, [sp, #16]
   18ae4:	str	r1, [sp, #12]
   18ae8:	str	r2, [sp, #8]
   18aec:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18af0:	str	r2, [sp, #4]
   18af4:	str	r3, [sp]
   18af8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   18afc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   18b00:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18b04:	ldr	r0, [fp, #-20]	; 0xffffffec
   18b08:	bl	16f4c <__assert_fail@plt+0x5a58>
   18b0c:	str	r0, [fp, #-44]	; 0xffffffd4
   18b10:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18b14:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18b18:	cmp	r2, r3
   18b1c:	bhi	18bd0 <__assert_fail@plt+0x76dc>
   18b20:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18b24:	lsl	r3, r3, #3
   18b28:	ldr	r2, [fp, #-16]
   18b2c:	add	r3, r2, r3
   18b30:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18b34:	add	r2, r2, #1
   18b38:	str	r2, [fp, #-36]	; 0xffffffdc
   18b3c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18b40:	str	r2, [r3]
   18b44:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b48:	ldr	r2, [pc, #172]	; 18bfc <__assert_fail@plt+0x7708>
   18b4c:	cmp	r3, r2
   18b50:	beq	18b5c <__assert_fail@plt+0x7668>
   18b54:	ldr	r0, [fp, #-20]	; 0xffffffec
   18b58:	bl	1677c <__assert_fail@plt+0x5288>
   18b5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18b60:	lsl	r3, r3, #3
   18b64:	ldr	r2, [fp, #-16]
   18b68:	add	r4, r2, r3
   18b6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18b70:	bl	19ffc <__assert_fail@plt+0x8b08>
   18b74:	mov	r3, r0
   18b78:	str	r3, [fp, #-20]	; 0xffffffec
   18b7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b80:	str	r3, [r4, #4]
   18b84:	ldr	r3, [fp, #-68]	; 0xffffffbc
   18b88:	ldr	r3, [r3]
   18b8c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18b90:	add	r2, r2, #8
   18b94:	ldr	r1, [fp, #-68]	; 0xffffffbc
   18b98:	ldr	r1, [r1, #40]	; 0x28
   18b9c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18ba0:	ldr	r0, [r0, #44]	; 0x2c
   18ba4:	str	r0, [sp, #16]
   18ba8:	str	r1, [sp, #12]
   18bac:	str	r2, [sp, #8]
   18bb0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18bb4:	str	r2, [sp, #4]
   18bb8:	str	r3, [sp]
   18bbc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   18bc0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   18bc4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18bc8:	ldr	r0, [fp, #-20]	; 0xffffffec
   18bcc:	bl	16f4c <__assert_fail@plt+0x5a58>
   18bd0:	bl	113bc <__errno_location@plt>
   18bd4:	mov	r2, r0
   18bd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18bdc:	str	r3, [r2]
   18be0:	ldr	r3, [fp, #-20]	; 0xffffffec
   18be4:	mov	r0, r3
   18be8:	sub	sp, fp, #8
   18bec:	pop	{r4, fp, pc}
   18bf0:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   18bf4:	andeq	pc, r2, r0, ror r1	; <UNPREDICTABLE>
   18bf8:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   18bfc:	andeq	pc, r2, r0, ror #10
   18c00:	push	{fp, lr}
   18c04:	add	fp, sp, #4
   18c08:	sub	sp, sp, #8
   18c0c:	str	r0, [fp, #-8]
   18c10:	str	r1, [fp, #-12]
   18c14:	ldr	r3, [pc, #28]	; 18c38 <__assert_fail@plt+0x7744>
   18c18:	mvn	r2, #0
   18c1c:	ldr	r1, [fp, #-12]
   18c20:	ldr	r0, [fp, #-8]
   18c24:	bl	1893c <__assert_fail@plt+0x7448>
   18c28:	mov	r3, r0
   18c2c:	mov	r0, r3
   18c30:	sub	sp, fp, #4
   18c34:	pop	{fp, pc}
   18c38:	andeq	pc, r2, r0, lsr r5	; <UNPREDICTABLE>
   18c3c:	push	{fp, lr}
   18c40:	add	fp, sp, #4
   18c44:	sub	sp, sp, #16
   18c48:	str	r0, [fp, #-8]
   18c4c:	str	r1, [fp, #-12]
   18c50:	str	r2, [fp, #-16]
   18c54:	ldr	r3, [pc, #28]	; 18c78 <__assert_fail@plt+0x7784>
   18c58:	ldr	r2, [fp, #-16]
   18c5c:	ldr	r1, [fp, #-12]
   18c60:	ldr	r0, [fp, #-8]
   18c64:	bl	1893c <__assert_fail@plt+0x7448>
   18c68:	mov	r3, r0
   18c6c:	mov	r0, r3
   18c70:	sub	sp, fp, #4
   18c74:	pop	{fp, pc}
   18c78:	andeq	pc, r2, r0, lsr r5	; <UNPREDICTABLE>
   18c7c:	push	{fp, lr}
   18c80:	add	fp, sp, #4
   18c84:	sub	sp, sp, #8
   18c88:	str	r0, [fp, #-8]
   18c8c:	ldr	r1, [fp, #-8]
   18c90:	mov	r0, #0
   18c94:	bl	18c00 <__assert_fail@plt+0x770c>
   18c98:	mov	r3, r0
   18c9c:	mov	r0, r3
   18ca0:	sub	sp, fp, #4
   18ca4:	pop	{fp, pc}
   18ca8:	push	{fp, lr}
   18cac:	add	fp, sp, #4
   18cb0:	sub	sp, sp, #8
   18cb4:	str	r0, [fp, #-8]
   18cb8:	str	r1, [fp, #-12]
   18cbc:	ldr	r2, [fp, #-12]
   18cc0:	ldr	r1, [fp, #-8]
   18cc4:	mov	r0, #0
   18cc8:	bl	18c3c <__assert_fail@plt+0x7748>
   18ccc:	mov	r3, r0
   18cd0:	mov	r0, r3
   18cd4:	sub	sp, fp, #4
   18cd8:	pop	{fp, pc}
   18cdc:	push	{fp, lr}
   18ce0:	add	fp, sp, #4
   18ce4:	sub	sp, sp, #64	; 0x40
   18ce8:	str	r0, [fp, #-56]	; 0xffffffc8
   18cec:	str	r1, [fp, #-60]	; 0xffffffc4
   18cf0:	str	r2, [fp, #-64]	; 0xffffffc0
   18cf4:	sub	r3, fp, #52	; 0x34
   18cf8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18cfc:	mov	r0, r3
   18d00:	bl	16de8 <__assert_fail@plt+0x58f4>
   18d04:	sub	r3, fp, #52	; 0x34
   18d08:	mvn	r2, #0
   18d0c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18d10:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18d14:	bl	1893c <__assert_fail@plt+0x7448>
   18d18:	mov	r3, r0
   18d1c:	mov	r0, r3
   18d20:	sub	sp, fp, #4
   18d24:	pop	{fp, pc}
   18d28:	push	{fp, lr}
   18d2c:	add	fp, sp, #4
   18d30:	sub	sp, sp, #64	; 0x40
   18d34:	str	r0, [fp, #-56]	; 0xffffffc8
   18d38:	str	r1, [fp, #-60]	; 0xffffffc4
   18d3c:	str	r2, [fp, #-64]	; 0xffffffc0
   18d40:	str	r3, [fp, #-68]	; 0xffffffbc
   18d44:	sub	r3, fp, #52	; 0x34
   18d48:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18d4c:	mov	r0, r3
   18d50:	bl	16de8 <__assert_fail@plt+0x58f4>
   18d54:	sub	r3, fp, #52	; 0x34
   18d58:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18d5c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18d60:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18d64:	bl	1893c <__assert_fail@plt+0x7448>
   18d68:	mov	r3, r0
   18d6c:	mov	r0, r3
   18d70:	sub	sp, fp, #4
   18d74:	pop	{fp, pc}
   18d78:	push	{fp, lr}
   18d7c:	add	fp, sp, #4
   18d80:	sub	sp, sp, #8
   18d84:	str	r0, [fp, #-8]
   18d88:	str	r1, [fp, #-12]
   18d8c:	ldr	r2, [fp, #-12]
   18d90:	ldr	r1, [fp, #-8]
   18d94:	mov	r0, #0
   18d98:	bl	18cdc <__assert_fail@plt+0x77e8>
   18d9c:	mov	r3, r0
   18da0:	mov	r0, r3
   18da4:	sub	sp, fp, #4
   18da8:	pop	{fp, pc}
   18dac:	push	{fp, lr}
   18db0:	add	fp, sp, #4
   18db4:	sub	sp, sp, #16
   18db8:	str	r0, [fp, #-8]
   18dbc:	str	r1, [fp, #-12]
   18dc0:	str	r2, [fp, #-16]
   18dc4:	ldr	r3, [fp, #-16]
   18dc8:	ldr	r2, [fp, #-12]
   18dcc:	ldr	r1, [fp, #-8]
   18dd0:	mov	r0, #0
   18dd4:	bl	18d28 <__assert_fail@plt+0x7834>
   18dd8:	mov	r3, r0
   18ddc:	mov	r0, r3
   18de0:	sub	sp, fp, #4
   18de4:	pop	{fp, pc}
   18de8:	push	{fp, lr}
   18dec:	add	fp, sp, #4
   18df0:	sub	sp, sp, #64	; 0x40
   18df4:	str	r0, [fp, #-56]	; 0xffffffc8
   18df8:	str	r1, [fp, #-60]	; 0xffffffc4
   18dfc:	mov	r3, r2
   18e00:	strb	r3, [fp, #-61]	; 0xffffffc3
   18e04:	ldr	r3, [pc, #84]	; 18e60 <__assert_fail@plt+0x796c>
   18e08:	sub	ip, fp, #52	; 0x34
   18e0c:	mov	lr, r3
   18e10:	ldm	lr!, {r0, r1, r2, r3}
   18e14:	stmia	ip!, {r0, r1, r2, r3}
   18e18:	ldm	lr!, {r0, r1, r2, r3}
   18e1c:	stmia	ip!, {r0, r1, r2, r3}
   18e20:	ldm	lr, {r0, r1, r2, r3}
   18e24:	stm	ip, {r0, r1, r2, r3}
   18e28:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   18e2c:	sub	r3, fp, #52	; 0x34
   18e30:	mov	r2, #1
   18e34:	mov	r0, r3
   18e38:	bl	16c54 <__assert_fail@plt+0x5760>
   18e3c:	sub	r3, fp, #52	; 0x34
   18e40:	ldr	r2, [fp, #-60]	; 0xffffffc4
   18e44:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18e48:	mov	r0, #0
   18e4c:	bl	1893c <__assert_fail@plt+0x7448>
   18e50:	mov	r3, r0
   18e54:	mov	r0, r3
   18e58:	sub	sp, fp, #4
   18e5c:	pop	{fp, pc}
   18e60:	andeq	pc, r2, r0, lsr r5	; <UNPREDICTABLE>
   18e64:	push	{fp, lr}
   18e68:	add	fp, sp, #4
   18e6c:	sub	sp, sp, #8
   18e70:	str	r0, [fp, #-8]
   18e74:	mov	r3, r1
   18e78:	strb	r3, [fp, #-9]
   18e7c:	ldrb	r3, [fp, #-9]
   18e80:	mov	r2, r3
   18e84:	mvn	r1, #0
   18e88:	ldr	r0, [fp, #-8]
   18e8c:	bl	18de8 <__assert_fail@plt+0x78f4>
   18e90:	mov	r3, r0
   18e94:	mov	r0, r3
   18e98:	sub	sp, fp, #4
   18e9c:	pop	{fp, pc}
   18ea0:	push	{fp, lr}
   18ea4:	add	fp, sp, #4
   18ea8:	sub	sp, sp, #8
   18eac:	str	r0, [fp, #-8]
   18eb0:	mov	r1, #58	; 0x3a
   18eb4:	ldr	r0, [fp, #-8]
   18eb8:	bl	18e64 <__assert_fail@plt+0x7970>
   18ebc:	mov	r3, r0
   18ec0:	mov	r0, r3
   18ec4:	sub	sp, fp, #4
   18ec8:	pop	{fp, pc}
   18ecc:	push	{fp, lr}
   18ed0:	add	fp, sp, #4
   18ed4:	sub	sp, sp, #8
   18ed8:	str	r0, [fp, #-8]
   18edc:	str	r1, [fp, #-12]
   18ee0:	mov	r2, #58	; 0x3a
   18ee4:	ldr	r1, [fp, #-12]
   18ee8:	ldr	r0, [fp, #-8]
   18eec:	bl	18de8 <__assert_fail@plt+0x78f4>
   18ef0:	mov	r3, r0
   18ef4:	mov	r0, r3
   18ef8:	sub	sp, fp, #4
   18efc:	pop	{fp, pc}
   18f00:	push	{fp, lr}
   18f04:	add	fp, sp, #4
   18f08:	sub	sp, sp, #112	; 0x70
   18f0c:	str	r0, [fp, #-56]	; 0xffffffc8
   18f10:	str	r1, [fp, #-60]	; 0xffffffc4
   18f14:	str	r2, [fp, #-64]	; 0xffffffc0
   18f18:	sub	r3, fp, #116	; 0x74
   18f1c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18f20:	mov	r0, r3
   18f24:	bl	16de8 <__assert_fail@plt+0x58f4>
   18f28:	sub	ip, fp, #52	; 0x34
   18f2c:	sub	lr, fp, #116	; 0x74
   18f30:	ldm	lr!, {r0, r1, r2, r3}
   18f34:	stmia	ip!, {r0, r1, r2, r3}
   18f38:	ldm	lr!, {r0, r1, r2, r3}
   18f3c:	stmia	ip!, {r0, r1, r2, r3}
   18f40:	ldm	lr, {r0, r1, r2, r3}
   18f44:	stm	ip, {r0, r1, r2, r3}
   18f48:	sub	r3, fp, #52	; 0x34
   18f4c:	mov	r2, #1
   18f50:	mov	r1, #58	; 0x3a
   18f54:	mov	r0, r3
   18f58:	bl	16c54 <__assert_fail@plt+0x5760>
   18f5c:	sub	r3, fp, #52	; 0x34
   18f60:	mvn	r2, #0
   18f64:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18f68:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18f6c:	bl	1893c <__assert_fail@plt+0x7448>
   18f70:	mov	r3, r0
   18f74:	mov	r0, r3
   18f78:	sub	sp, fp, #4
   18f7c:	pop	{fp, pc}
   18f80:	push	{fp, lr}
   18f84:	add	fp, sp, #4
   18f88:	sub	sp, sp, #24
   18f8c:	str	r0, [fp, #-8]
   18f90:	str	r1, [fp, #-12]
   18f94:	str	r2, [fp, #-16]
   18f98:	str	r3, [fp, #-20]	; 0xffffffec
   18f9c:	mvn	r3, #0
   18fa0:	str	r3, [sp]
   18fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   18fa8:	ldr	r2, [fp, #-16]
   18fac:	ldr	r1, [fp, #-12]
   18fb0:	ldr	r0, [fp, #-8]
   18fb4:	bl	18fc8 <__assert_fail@plt+0x7ad4>
   18fb8:	mov	r3, r0
   18fbc:	mov	r0, r3
   18fc0:	sub	sp, fp, #4
   18fc4:	pop	{fp, pc}
   18fc8:	push	{fp, lr}
   18fcc:	add	fp, sp, #4
   18fd0:	sub	sp, sp, #64	; 0x40
   18fd4:	str	r0, [fp, #-56]	; 0xffffffc8
   18fd8:	str	r1, [fp, #-60]	; 0xffffffc4
   18fdc:	str	r2, [fp, #-64]	; 0xffffffc0
   18fe0:	str	r3, [fp, #-68]	; 0xffffffbc
   18fe4:	ldr	r3, [pc, #84]	; 19040 <__assert_fail@plt+0x7b4c>
   18fe8:	sub	ip, fp, #52	; 0x34
   18fec:	mov	lr, r3
   18ff0:	ldm	lr!, {r0, r1, r2, r3}
   18ff4:	stmia	ip!, {r0, r1, r2, r3}
   18ff8:	ldm	lr!, {r0, r1, r2, r3}
   18ffc:	stmia	ip!, {r0, r1, r2, r3}
   19000:	ldm	lr, {r0, r1, r2, r3}
   19004:	stm	ip, {r0, r1, r2, r3}
   19008:	sub	r3, fp, #52	; 0x34
   1900c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   19010:	ldr	r1, [fp, #-60]	; 0xffffffc4
   19014:	mov	r0, r3
   19018:	bl	16d6c <__assert_fail@plt+0x5878>
   1901c:	sub	r3, fp, #52	; 0x34
   19020:	ldr	r2, [fp, #4]
   19024:	ldr	r1, [fp, #-68]	; 0xffffffbc
   19028:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1902c:	bl	1893c <__assert_fail@plt+0x7448>
   19030:	mov	r3, r0
   19034:	mov	r0, r3
   19038:	sub	sp, fp, #4
   1903c:	pop	{fp, pc}
   19040:	andeq	pc, r2, r0, lsr r5	; <UNPREDICTABLE>
   19044:	push	{fp, lr}
   19048:	add	fp, sp, #4
   1904c:	sub	sp, sp, #16
   19050:	str	r0, [fp, #-8]
   19054:	str	r1, [fp, #-12]
   19058:	str	r2, [fp, #-16]
   1905c:	ldr	r3, [fp, #-16]
   19060:	ldr	r2, [fp, #-12]
   19064:	ldr	r1, [fp, #-8]
   19068:	mov	r0, #0
   1906c:	bl	18f80 <__assert_fail@plt+0x7a8c>
   19070:	mov	r3, r0
   19074:	mov	r0, r3
   19078:	sub	sp, fp, #4
   1907c:	pop	{fp, pc}
   19080:	push	{fp, lr}
   19084:	add	fp, sp, #4
   19088:	sub	sp, sp, #24
   1908c:	str	r0, [fp, #-8]
   19090:	str	r1, [fp, #-12]
   19094:	str	r2, [fp, #-16]
   19098:	str	r3, [fp, #-20]	; 0xffffffec
   1909c:	ldr	r3, [fp, #-20]	; 0xffffffec
   190a0:	str	r3, [sp]
   190a4:	ldr	r3, [fp, #-16]
   190a8:	ldr	r2, [fp, #-12]
   190ac:	ldr	r1, [fp, #-8]
   190b0:	mov	r0, #0
   190b4:	bl	18fc8 <__assert_fail@plt+0x7ad4>
   190b8:	mov	r3, r0
   190bc:	mov	r0, r3
   190c0:	sub	sp, fp, #4
   190c4:	pop	{fp, pc}
   190c8:	push	{fp, lr}
   190cc:	add	fp, sp, #4
   190d0:	sub	sp, sp, #16
   190d4:	str	r0, [fp, #-8]
   190d8:	str	r1, [fp, #-12]
   190dc:	str	r2, [fp, #-16]
   190e0:	ldr	r3, [pc, #28]	; 19104 <__assert_fail@plt+0x7c10>
   190e4:	ldr	r2, [fp, #-16]
   190e8:	ldr	r1, [fp, #-12]
   190ec:	ldr	r0, [fp, #-8]
   190f0:	bl	1893c <__assert_fail@plt+0x7448>
   190f4:	mov	r3, r0
   190f8:	mov	r0, r3
   190fc:	sub	sp, fp, #4
   19100:	pop	{fp, pc}
   19104:	andeq	pc, r2, r0, lsl #3
   19108:	push	{fp, lr}
   1910c:	add	fp, sp, #4
   19110:	sub	sp, sp, #8
   19114:	str	r0, [fp, #-8]
   19118:	str	r1, [fp, #-12]
   1911c:	ldr	r2, [fp, #-12]
   19120:	ldr	r1, [fp, #-8]
   19124:	mov	r0, #0
   19128:	bl	190c8 <__assert_fail@plt+0x7bd4>
   1912c:	mov	r3, r0
   19130:	mov	r0, r3
   19134:	sub	sp, fp, #4
   19138:	pop	{fp, pc}
   1913c:	push	{fp, lr}
   19140:	add	fp, sp, #4
   19144:	sub	sp, sp, #8
   19148:	str	r0, [fp, #-8]
   1914c:	str	r1, [fp, #-12]
   19150:	mvn	r2, #0
   19154:	ldr	r1, [fp, #-12]
   19158:	ldr	r0, [fp, #-8]
   1915c:	bl	190c8 <__assert_fail@plt+0x7bd4>
   19160:	mov	r3, r0
   19164:	mov	r0, r3
   19168:	sub	sp, fp, #4
   1916c:	pop	{fp, pc}
   19170:	push	{fp, lr}
   19174:	add	fp, sp, #4
   19178:	sub	sp, sp, #8
   1917c:	str	r0, [fp, #-8]
   19180:	ldr	r1, [fp, #-8]
   19184:	mov	r0, #0
   19188:	bl	1913c <__assert_fail@plt+0x7c48>
   1918c:	mov	r3, r0
   19190:	mov	r0, r3
   19194:	sub	sp, fp, #4
   19198:	pop	{fp, pc}
   1919c:	push	{fp, lr}
   191a0:	add	fp, sp, #4
   191a4:	sub	sp, sp, #24
   191a8:	str	r0, [fp, #-16]
   191ac:	str	r1, [fp, #-20]	; 0xffffffec
   191b0:	str	r2, [fp, #-24]	; 0xffffffe8
   191b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   191b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   191bc:	ldr	r0, [fp, #-16]
   191c0:	bl	11194 <read@plt>
   191c4:	str	r0, [fp, #-8]
   191c8:	ldr	r3, [fp, #-8]
   191cc:	cmp	r3, #0
   191d0:	blt	191dc <__assert_fail@plt+0x7ce8>
   191d4:	ldr	r3, [fp, #-8]
   191d8:	b	19230 <__assert_fail@plt+0x7d3c>
   191dc:	bl	113bc <__errno_location@plt>
   191e0:	mov	r3, r0
   191e4:	ldr	r3, [r3]
   191e8:	cmp	r3, #4
   191ec:	beq	19228 <__assert_fail@plt+0x7d34>
   191f0:	bl	113bc <__errno_location@plt>
   191f4:	mov	r3, r0
   191f8:	ldr	r3, [r3]
   191fc:	cmp	r3, #22
   19200:	bne	19220 <__assert_fail@plt+0x7d2c>
   19204:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19208:	ldr	r2, [pc, #44]	; 1923c <__assert_fail@plt+0x7d48>
   1920c:	cmp	r3, r2
   19210:	bls	19220 <__assert_fail@plt+0x7d2c>
   19214:	ldr	r3, [pc, #32]	; 1923c <__assert_fail@plt+0x7d48>
   19218:	str	r3, [fp, #-24]	; 0xffffffe8
   1921c:	b	1922c <__assert_fail@plt+0x7d38>
   19220:	ldr	r3, [fp, #-8]
   19224:	b	19230 <__assert_fail@plt+0x7d3c>
   19228:	nop			; (mov r0, r0)
   1922c:	b	191b4 <__assert_fail@plt+0x7cc0>
   19230:	mov	r0, r3
   19234:	sub	sp, fp, #4
   19238:	pop	{fp, pc}
   1923c:	svcvc	0x00f00000	; IMB
   19240:	push	{fp, lr}
   19244:	add	fp, sp, #4
   19248:	sub	sp, sp, #24
   1924c:	str	r0, [fp, #-16]
   19250:	str	r1, [fp, #-20]	; 0xffffffec
   19254:	str	r2, [fp, #-24]	; 0xffffffe8
   19258:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1925c:	ldr	r1, [fp, #-20]	; 0xffffffec
   19260:	ldr	r0, [fp, #-16]
   19264:	bl	113e0 <write@plt>
   19268:	str	r0, [fp, #-8]
   1926c:	ldr	r3, [fp, #-8]
   19270:	cmp	r3, #0
   19274:	blt	19280 <__assert_fail@plt+0x7d8c>
   19278:	ldr	r3, [fp, #-8]
   1927c:	b	192d4 <__assert_fail@plt+0x7de0>
   19280:	bl	113bc <__errno_location@plt>
   19284:	mov	r3, r0
   19288:	ldr	r3, [r3]
   1928c:	cmp	r3, #4
   19290:	beq	192cc <__assert_fail@plt+0x7dd8>
   19294:	bl	113bc <__errno_location@plt>
   19298:	mov	r3, r0
   1929c:	ldr	r3, [r3]
   192a0:	cmp	r3, #22
   192a4:	bne	192c4 <__assert_fail@plt+0x7dd0>
   192a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   192ac:	ldr	r2, [pc, #44]	; 192e0 <__assert_fail@plt+0x7dec>
   192b0:	cmp	r3, r2
   192b4:	bls	192c4 <__assert_fail@plt+0x7dd0>
   192b8:	ldr	r3, [pc, #32]	; 192e0 <__assert_fail@plt+0x7dec>
   192bc:	str	r3, [fp, #-24]	; 0xffffffe8
   192c0:	b	192d0 <__assert_fail@plt+0x7ddc>
   192c4:	ldr	r3, [fp, #-8]
   192c8:	b	192d4 <__assert_fail@plt+0x7de0>
   192cc:	nop			; (mov r0, r0)
   192d0:	b	19258 <__assert_fail@plt+0x7d64>
   192d4:	mov	r0, r3
   192d8:	sub	sp, fp, #4
   192dc:	pop	{fp, pc}
   192e0:	svcvc	0x00f00000	; IMB
   192e4:	push	{fp, lr}
   192e8:	add	fp, sp, #4
   192ec:	sub	sp, sp, #40	; 0x28
   192f0:	str	r0, [fp, #-40]	; 0xffffffd8
   192f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   192f8:	ldrb	r3, [r3]
   192fc:	sub	r3, r3, #48	; 0x30
   19300:	cmp	r3, #9
   19304:	bhi	19344 <__assert_fail@plt+0x7e50>
   19308:	sub	r3, fp, #32
   1930c:	mov	r2, #10
   19310:	mov	r1, r3
   19314:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19318:	bl	1117c <strtol@plt>
   1931c:	str	r0, [fp, #-12]
   19320:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19324:	ldrb	r3, [r3]
   19328:	cmp	r3, #0
   1932c:	bne	194e8 <__assert_fail@plt+0x7ff4>
   19330:	ldr	r3, [fp, #-12]
   19334:	cmp	r3, #64	; 0x40
   19338:	bgt	194e8 <__assert_fail@plt+0x7ff4>
   1933c:	ldr	r3, [fp, #-12]
   19340:	b	194ec <__assert_fail@plt+0x7ff8>
   19344:	mov	r3, #0
   19348:	str	r3, [fp, #-8]
   1934c:	b	193b8 <__assert_fail@plt+0x7ec4>
   19350:	ldr	r2, [fp, #-8]
   19354:	mov	r3, r2
   19358:	lsl	r3, r3, #1
   1935c:	add	r3, r3, r2
   19360:	lsl	r3, r3, #2
   19364:	ldr	r2, [pc, #396]	; 194f8 <__assert_fail@plt+0x8004>
   19368:	add	r3, r3, r2
   1936c:	add	r3, r3, #4
   19370:	ldr	r1, [fp, #-40]	; 0xffffffd8
   19374:	mov	r0, r3
   19378:	bl	11170 <strcmp@plt>
   1937c:	mov	r3, r0
   19380:	cmp	r3, #0
   19384:	bne	193ac <__assert_fail@plt+0x7eb8>
   19388:	ldr	r1, [pc, #360]	; 194f8 <__assert_fail@plt+0x8004>
   1938c:	ldr	r2, [fp, #-8]
   19390:	mov	r3, r2
   19394:	lsl	r3, r3, #1
   19398:	add	r3, r3, r2
   1939c:	lsl	r3, r3, #2
   193a0:	add	r3, r1, r3
   193a4:	ldr	r3, [r3]
   193a8:	b	194ec <__assert_fail@plt+0x7ff8>
   193ac:	ldr	r3, [fp, #-8]
   193b0:	add	r3, r3, #1
   193b4:	str	r3, [fp, #-8]
   193b8:	ldr	r3, [fp, #-8]
   193bc:	cmp	r3, #34	; 0x22
   193c0:	bls	19350 <__assert_fail@plt+0x7e5c>
   193c4:	bl	114b8 <__libc_current_sigrtmin@plt>
   193c8:	str	r0, [fp, #-16]
   193cc:	bl	11374 <__libc_current_sigrtmax@plt>
   193d0:	str	r0, [fp, #-20]	; 0xffffffec
   193d4:	ldr	r3, [fp, #-16]
   193d8:	cmp	r3, #0
   193dc:	ble	1945c <__assert_fail@plt+0x7f68>
   193e0:	mov	r2, #5
   193e4:	ldr	r1, [pc, #272]	; 194fc <__assert_fail@plt+0x8008>
   193e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   193ec:	bl	114c4 <strncmp@plt>
   193f0:	mov	r3, r0
   193f4:	cmp	r3, #0
   193f8:	bne	1945c <__assert_fail@plt+0x7f68>
   193fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19400:	add	r3, r3, #5
   19404:	sub	r1, fp, #36	; 0x24
   19408:	mov	r2, #10
   1940c:	mov	r0, r3
   19410:	bl	1117c <strtol@plt>
   19414:	str	r0, [fp, #-24]	; 0xffffffe8
   19418:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1941c:	ldrb	r3, [r3]
   19420:	cmp	r3, #0
   19424:	bne	194e4 <__assert_fail@plt+0x7ff0>
   19428:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1942c:	cmp	r3, #0
   19430:	blt	194e4 <__assert_fail@plt+0x7ff0>
   19434:	ldr	r2, [fp, #-20]	; 0xffffffec
   19438:	ldr	r3, [fp, #-16]
   1943c:	sub	r2, r2, r3
   19440:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19444:	cmp	r2, r3
   19448:	blt	194e4 <__assert_fail@plt+0x7ff0>
   1944c:	ldr	r2, [fp, #-16]
   19450:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19454:	add	r3, r2, r3
   19458:	b	194ec <__assert_fail@plt+0x7ff8>
   1945c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19460:	cmp	r3, #0
   19464:	ble	194e8 <__assert_fail@plt+0x7ff4>
   19468:	mov	r2, #5
   1946c:	ldr	r1, [pc, #140]	; 19500 <__assert_fail@plt+0x800c>
   19470:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19474:	bl	114c4 <strncmp@plt>
   19478:	mov	r3, r0
   1947c:	cmp	r3, #0
   19480:	bne	194e8 <__assert_fail@plt+0x7ff4>
   19484:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19488:	add	r3, r3, #5
   1948c:	sub	r1, fp, #36	; 0x24
   19490:	mov	r2, #10
   19494:	mov	r0, r3
   19498:	bl	1117c <strtol@plt>
   1949c:	str	r0, [fp, #-28]	; 0xffffffe4
   194a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   194a4:	ldrb	r3, [r3]
   194a8:	cmp	r3, #0
   194ac:	bne	194e8 <__assert_fail@plt+0x7ff4>
   194b0:	ldr	r2, [fp, #-16]
   194b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   194b8:	sub	r2, r2, r3
   194bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   194c0:	cmp	r2, r3
   194c4:	bgt	194e8 <__assert_fail@plt+0x7ff4>
   194c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   194cc:	cmp	r3, #0
   194d0:	bgt	194e8 <__assert_fail@plt+0x7ff4>
   194d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   194d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   194dc:	add	r3, r2, r3
   194e0:	b	194ec <__assert_fail@plt+0x7ff8>
   194e4:	nop			; (mov r0, r0)
   194e8:	mvn	r3, #0
   194ec:	mov	r0, r3
   194f0:	sub	sp, fp, #4
   194f4:	pop	{fp, pc}
   194f8:			; <UNDEFINED> instruction: 0x0002f1b0
   194fc:	andeq	lr, r1, r0, asr #2
   19500:	andeq	lr, r1, r8, asr #2
   19504:	push	{fp, lr}
   19508:	add	fp, sp, #4
   1950c:	sub	sp, sp, #8
   19510:	str	r0, [fp, #-8]
   19514:	str	r1, [fp, #-12]
   19518:	ldr	r0, [fp, #-8]
   1951c:	bl	192e4 <__assert_fail@plt+0x7df0>
   19520:	mov	r2, r0
   19524:	ldr	r3, [fp, #-12]
   19528:	str	r2, [r3]
   1952c:	ldr	r3, [fp, #-12]
   19530:	ldr	r3, [r3]
   19534:	cmp	r3, #0
   19538:	bge	19544 <__assert_fail@plt+0x8050>
   1953c:	mvn	r3, #0
   19540:	b	19548 <__assert_fail@plt+0x8054>
   19544:	mov	r3, #0
   19548:	mov	r0, r3
   1954c:	sub	sp, fp, #4
   19550:	pop	{fp, pc}
   19554:	push	{fp, lr}
   19558:	add	fp, sp, #4
   1955c:	sub	sp, sp, #32
   19560:	str	r0, [fp, #-32]	; 0xffffffe0
   19564:	str	r1, [fp, #-36]	; 0xffffffdc
   19568:	mov	r3, #0
   1956c:	str	r3, [fp, #-8]
   19570:	b	195e0 <__assert_fail@plt+0x80ec>
   19574:	ldr	r1, [pc, #352]	; 196dc <__assert_fail@plt+0x81e8>
   19578:	ldr	r2, [fp, #-8]
   1957c:	mov	r3, r2
   19580:	lsl	r3, r3, #1
   19584:	add	r3, r3, r2
   19588:	lsl	r3, r3, #2
   1958c:	add	r3, r1, r3
   19590:	ldr	r2, [r3]
   19594:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19598:	cmp	r2, r3
   1959c:	bne	195d4 <__assert_fail@plt+0x80e0>
   195a0:	ldr	r2, [fp, #-8]
   195a4:	mov	r3, r2
   195a8:	lsl	r3, r3, #1
   195ac:	add	r3, r3, r2
   195b0:	lsl	r3, r3, #2
   195b4:	ldr	r2, [pc, #288]	; 196dc <__assert_fail@plt+0x81e8>
   195b8:	add	r3, r3, r2
   195bc:	add	r3, r3, #4
   195c0:	mov	r1, r3
   195c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   195c8:	bl	112a8 <strcpy@plt>
   195cc:	mov	r3, #0
   195d0:	b	196d0 <__assert_fail@plt+0x81dc>
   195d4:	ldr	r3, [fp, #-8]
   195d8:	add	r3, r3, #1
   195dc:	str	r3, [fp, #-8]
   195e0:	ldr	r3, [fp, #-8]
   195e4:	cmp	r3, #34	; 0x22
   195e8:	bls	19574 <__assert_fail@plt+0x8080>
   195ec:	bl	114b8 <__libc_current_sigrtmin@plt>
   195f0:	str	r0, [fp, #-16]
   195f4:	bl	11374 <__libc_current_sigrtmax@plt>
   195f8:	str	r0, [fp, #-20]	; 0xffffffec
   195fc:	ldr	r2, [fp, #-16]
   19600:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19604:	cmp	r2, r3
   19608:	bgt	1961c <__assert_fail@plt+0x8128>
   1960c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19610:	ldr	r3, [fp, #-20]	; 0xffffffec
   19614:	cmp	r2, r3
   19618:	ble	19624 <__assert_fail@plt+0x8130>
   1961c:	mvn	r3, #0
   19620:	b	196d0 <__assert_fail@plt+0x81dc>
   19624:	ldr	r2, [fp, #-20]	; 0xffffffec
   19628:	ldr	r3, [fp, #-16]
   1962c:	sub	r3, r2, r3
   19630:	lsr	r2, r3, #31
   19634:	add	r3, r2, r3
   19638:	asr	r3, r3, #1
   1963c:	mov	r2, r3
   19640:	ldr	r3, [fp, #-16]
   19644:	add	r2, r2, r3
   19648:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1964c:	cmp	r2, r3
   19650:	blt	19678 <__assert_fail@plt+0x8184>
   19654:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19658:	ldr	r2, [pc, #128]	; 196e0 <__assert_fail@plt+0x81ec>
   1965c:	ldr	r0, [r2]
   19660:	str	r0, [r3]
   19664:	ldrh	r2, [r2, #4]
   19668:	strh	r2, [r3, #4]
   1966c:	ldr	r3, [fp, #-16]
   19670:	str	r3, [fp, #-12]
   19674:	b	19698 <__assert_fail@plt+0x81a4>
   19678:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1967c:	ldr	r2, [pc, #96]	; 196e4 <__assert_fail@plt+0x81f0>
   19680:	ldr	r0, [r2]
   19684:	str	r0, [r3]
   19688:	ldrh	r2, [r2, #4]
   1968c:	strh	r2, [r3, #4]
   19690:	ldr	r3, [fp, #-20]	; 0xffffffec
   19694:	str	r3, [fp, #-12]
   19698:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1969c:	ldr	r3, [fp, #-12]
   196a0:	sub	r3, r2, r3
   196a4:	str	r3, [fp, #-24]	; 0xffffffe8
   196a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   196ac:	cmp	r3, #0
   196b0:	beq	196cc <__assert_fail@plt+0x81d8>
   196b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   196b8:	add	r3, r3, #5
   196bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   196c0:	ldr	r1, [pc, #32]	; 196e8 <__assert_fail@plt+0x81f4>
   196c4:	mov	r0, r3
   196c8:	bl	11488 <sprintf@plt>
   196cc:	mov	r3, #0
   196d0:	mov	r0, r3
   196d4:	sub	sp, fp, #4
   196d8:	pop	{fp, pc}
   196dc:			; <UNDEFINED> instruction: 0x0002f1b0
   196e0:	andeq	lr, r1, r0, asr #2
   196e4:	andeq	lr, r1, r8, asr #2
   196e8:	andeq	lr, r1, r0, asr r1
   196ec:	push	{fp, lr}
   196f0:	add	fp, sp, #4
   196f4:	sub	sp, sp, #16
   196f8:	str	r0, [fp, #-16]
   196fc:	ldr	r3, [fp, #-16]
   19700:	cmp	r3, #0
   19704:	blt	19750 <__assert_fail@plt+0x825c>
   19708:	ldr	r3, [fp, #-16]
   1970c:	cmp	r3, #2
   19710:	bgt	19750 <__assert_fail@plt+0x825c>
   19714:	ldr	r0, [fp, #-16]
   19718:	bl	1bc74 <__assert_fail@plt+0xa780>
   1971c:	str	r0, [fp, #-8]
   19720:	bl	113bc <__errno_location@plt>
   19724:	mov	r3, r0
   19728:	ldr	r3, [r3]
   1972c:	str	r3, [fp, #-12]
   19730:	ldr	r0, [fp, #-16]
   19734:	bl	114dc <close@plt>
   19738:	bl	113bc <__errno_location@plt>
   1973c:	mov	r2, r0
   19740:	ldr	r3, [fp, #-12]
   19744:	str	r3, [r2]
   19748:	ldr	r3, [fp, #-8]
   1974c:	str	r3, [fp, #-16]
   19750:	ldr	r3, [fp, #-16]
   19754:	mov	r0, r3
   19758:	sub	sp, fp, #4
   1975c:	pop	{fp, pc}
   19760:	push	{r4, r5, r6, r7, fp, lr}
   19764:	add	fp, sp, #20
   19768:	sub	sp, sp, #48	; 0x30
   1976c:	str	r0, [fp, #-24]	; 0xffffffe8
   19770:	str	r1, [fp, #-28]	; 0xffffffe4
   19774:	str	r2, [fp, #-32]	; 0xffffffe0
   19778:	str	r3, [fp, #-36]	; 0xffffffdc
   1977c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19780:	cmp	r3, #0
   19784:	beq	197a8 <__assert_fail@plt+0x82b4>
   19788:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1978c:	str	r3, [sp]
   19790:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19794:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19798:	ldr	r1, [pc, #1260]	; 19c8c <__assert_fail@plt+0x8798>
   1979c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   197a0:	bl	113a4 <fprintf@plt>
   197a4:	b	197bc <__assert_fail@plt+0x82c8>
   197a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   197ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   197b0:	ldr	r1, [pc, #1240]	; 19c90 <__assert_fail@plt+0x879c>
   197b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   197b8:	bl	113a4 <fprintf@plt>
   197bc:	ldr	r0, [pc, #1232]	; 19c94 <__assert_fail@plt+0x87a0>
   197c0:	bl	1135c <gettext@plt>
   197c4:	mov	r2, r0
   197c8:	ldr	r3, [pc, #1224]	; 19c98 <__assert_fail@plt+0x87a4>
   197cc:	ldr	r1, [pc, #1224]	; 19c9c <__assert_fail@plt+0x87a8>
   197d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   197d4:	bl	113a4 <fprintf@plt>
   197d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   197dc:	mov	r0, #10
   197e0:	bl	11218 <fputc_unlocked@plt>
   197e4:	ldr	r0, [pc, #1204]	; 19ca0 <__assert_fail@plt+0x87ac>
   197e8:	bl	1135c <gettext@plt>
   197ec:	mov	r3, r0
   197f0:	ldr	r2, [pc, #1196]	; 19ca4 <__assert_fail@plt+0x87b0>
   197f4:	mov	r1, r3
   197f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   197fc:	bl	113a4 <fprintf@plt>
   19800:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19804:	mov	r0, #10
   19808:	bl	11218 <fputc_unlocked@plt>
   1980c:	ldr	r3, [fp, #8]
   19810:	cmp	r3, #9
   19814:	ldrls	pc, [pc, r3, lsl #2]
   19818:	b	19bd4 <__assert_fail@plt+0x86e0>
   1981c:	andeq	r9, r1, ip, ror ip
   19820:	andeq	r9, r1, r4, asr #16
   19824:	andeq	r9, r1, r8, ror #16
   19828:	muleq	r1, r4, r8
   1982c:	ldrdeq	r9, [r1], -r4
   19830:	andeq	r9, r1, ip, lsr #18
   19834:	muleq	r1, r4, r9
   19838:	andeq	r9, r1, ip, lsl #20
   1983c:	muleq	r1, r4, sl
   19840:	andeq	r9, r1, ip, lsr #22
   19844:	ldr	r0, [pc, #1116]	; 19ca8 <__assert_fail@plt+0x87b4>
   19848:	bl	1135c <gettext@plt>
   1984c:	mov	r1, r0
   19850:	ldr	r3, [fp, #4]
   19854:	ldr	r3, [r3]
   19858:	mov	r2, r3
   1985c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19860:	bl	113a4 <fprintf@plt>
   19864:	b	19c80 <__assert_fail@plt+0x878c>
   19868:	ldr	r0, [pc, #1084]	; 19cac <__assert_fail@plt+0x87b8>
   1986c:	bl	1135c <gettext@plt>
   19870:	mov	r1, r0
   19874:	ldr	r3, [fp, #4]
   19878:	ldr	r2, [r3]
   1987c:	ldr	r3, [fp, #4]
   19880:	add	r3, r3, #4
   19884:	ldr	r3, [r3]
   19888:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1988c:	bl	113a4 <fprintf@plt>
   19890:	b	19c80 <__assert_fail@plt+0x878c>
   19894:	ldr	r0, [pc, #1044]	; 19cb0 <__assert_fail@plt+0x87bc>
   19898:	bl	1135c <gettext@plt>
   1989c:	ldr	r3, [fp, #4]
   198a0:	ldr	r2, [r3]
   198a4:	ldr	r3, [fp, #4]
   198a8:	add	r3, r3, #4
   198ac:	ldr	r1, [r3]
   198b0:	ldr	r3, [fp, #4]
   198b4:	add	r3, r3, #8
   198b8:	ldr	r3, [r3]
   198bc:	str	r3, [sp]
   198c0:	mov	r3, r1
   198c4:	mov	r1, r0
   198c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   198cc:	bl	113a4 <fprintf@plt>
   198d0:	b	19c80 <__assert_fail@plt+0x878c>
   198d4:	ldr	r0, [pc, #984]	; 19cb4 <__assert_fail@plt+0x87c0>
   198d8:	bl	1135c <gettext@plt>
   198dc:	mov	ip, r0
   198e0:	ldr	r3, [fp, #4]
   198e4:	ldr	r1, [r3]
   198e8:	ldr	r3, [fp, #4]
   198ec:	add	r3, r3, #4
   198f0:	ldr	r0, [r3]
   198f4:	ldr	r3, [fp, #4]
   198f8:	add	r3, r3, #8
   198fc:	ldr	r3, [r3]
   19900:	ldr	r2, [fp, #4]
   19904:	add	r2, r2, #12
   19908:	ldr	r2, [r2]
   1990c:	str	r2, [sp, #4]
   19910:	str	r3, [sp]
   19914:	mov	r3, r0
   19918:	mov	r2, r1
   1991c:	mov	r1, ip
   19920:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19924:	bl	113a4 <fprintf@plt>
   19928:	b	19c80 <__assert_fail@plt+0x878c>
   1992c:	ldr	r0, [pc, #900]	; 19cb8 <__assert_fail@plt+0x87c4>
   19930:	bl	1135c <gettext@plt>
   19934:	mov	lr, r0
   19938:	ldr	r3, [fp, #4]
   1993c:	ldr	r0, [r3]
   19940:	ldr	r3, [fp, #4]
   19944:	add	r3, r3, #4
   19948:	ldr	ip, [r3]
   1994c:	ldr	r3, [fp, #4]
   19950:	add	r3, r3, #8
   19954:	ldr	r3, [r3]
   19958:	ldr	r2, [fp, #4]
   1995c:	add	r2, r2, #12
   19960:	ldr	r2, [r2]
   19964:	ldr	r1, [fp, #4]
   19968:	add	r1, r1, #16
   1996c:	ldr	r1, [r1]
   19970:	str	r1, [sp, #8]
   19974:	str	r2, [sp, #4]
   19978:	str	r3, [sp]
   1997c:	mov	r3, ip
   19980:	mov	r2, r0
   19984:	mov	r1, lr
   19988:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1998c:	bl	113a4 <fprintf@plt>
   19990:	b	19c80 <__assert_fail@plt+0x878c>
   19994:	ldr	r0, [pc, #800]	; 19cbc <__assert_fail@plt+0x87c8>
   19998:	bl	1135c <gettext@plt>
   1999c:	mov	r4, r0
   199a0:	ldr	r3, [fp, #4]
   199a4:	ldr	ip, [r3]
   199a8:	ldr	r3, [fp, #4]
   199ac:	add	r3, r3, #4
   199b0:	ldr	lr, [r3]
   199b4:	ldr	r3, [fp, #4]
   199b8:	add	r3, r3, #8
   199bc:	ldr	r3, [r3]
   199c0:	ldr	r2, [fp, #4]
   199c4:	add	r2, r2, #12
   199c8:	ldr	r2, [r2]
   199cc:	ldr	r1, [fp, #4]
   199d0:	add	r1, r1, #16
   199d4:	ldr	r1, [r1]
   199d8:	ldr	r0, [fp, #4]
   199dc:	add	r0, r0, #20
   199e0:	ldr	r0, [r0]
   199e4:	str	r0, [sp, #12]
   199e8:	str	r1, [sp, #8]
   199ec:	str	r2, [sp, #4]
   199f0:	str	r3, [sp]
   199f4:	mov	r3, lr
   199f8:	mov	r2, ip
   199fc:	mov	r1, r4
   19a00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19a04:	bl	113a4 <fprintf@plt>
   19a08:	b	19c80 <__assert_fail@plt+0x878c>
   19a0c:	ldr	r0, [pc, #684]	; 19cc0 <__assert_fail@plt+0x87cc>
   19a10:	bl	1135c <gettext@plt>
   19a14:	mov	r5, r0
   19a18:	ldr	r3, [fp, #4]
   19a1c:	ldr	lr, [r3]
   19a20:	ldr	r3, [fp, #4]
   19a24:	add	r3, r3, #4
   19a28:	ldr	r4, [r3]
   19a2c:	ldr	r3, [fp, #4]
   19a30:	add	r3, r3, #8
   19a34:	ldr	r3, [r3]
   19a38:	ldr	r2, [fp, #4]
   19a3c:	add	r2, r2, #12
   19a40:	ldr	r2, [r2]
   19a44:	ldr	r1, [fp, #4]
   19a48:	add	r1, r1, #16
   19a4c:	ldr	r1, [r1]
   19a50:	ldr	r0, [fp, #4]
   19a54:	add	r0, r0, #20
   19a58:	ldr	r0, [r0]
   19a5c:	ldr	ip, [fp, #4]
   19a60:	add	ip, ip, #24
   19a64:	ldr	ip, [ip]
   19a68:	str	ip, [sp, #16]
   19a6c:	str	r0, [sp, #12]
   19a70:	str	r1, [sp, #8]
   19a74:	str	r2, [sp, #4]
   19a78:	str	r3, [sp]
   19a7c:	mov	r3, r4
   19a80:	mov	r2, lr
   19a84:	mov	r1, r5
   19a88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19a8c:	bl	113a4 <fprintf@plt>
   19a90:	b	19c80 <__assert_fail@plt+0x878c>
   19a94:	ldr	r0, [pc, #552]	; 19cc4 <__assert_fail@plt+0x87d0>
   19a98:	bl	1135c <gettext@plt>
   19a9c:	mov	r6, r0
   19aa0:	ldr	r3, [fp, #4]
   19aa4:	ldr	r4, [r3]
   19aa8:	ldr	r3, [fp, #4]
   19aac:	add	r3, r3, #4
   19ab0:	ldr	r5, [r3]
   19ab4:	ldr	r3, [fp, #4]
   19ab8:	add	r3, r3, #8
   19abc:	ldr	r3, [r3]
   19ac0:	ldr	r2, [fp, #4]
   19ac4:	add	r2, r2, #12
   19ac8:	ldr	r2, [r2]
   19acc:	ldr	r1, [fp, #4]
   19ad0:	add	r1, r1, #16
   19ad4:	ldr	r1, [r1]
   19ad8:	ldr	r0, [fp, #4]
   19adc:	add	r0, r0, #20
   19ae0:	ldr	r0, [r0]
   19ae4:	ldr	ip, [fp, #4]
   19ae8:	add	ip, ip, #24
   19aec:	ldr	ip, [ip]
   19af0:	ldr	lr, [fp, #4]
   19af4:	add	lr, lr, #28
   19af8:	ldr	lr, [lr]
   19afc:	str	lr, [sp, #20]
   19b00:	str	ip, [sp, #16]
   19b04:	str	r0, [sp, #12]
   19b08:	str	r1, [sp, #8]
   19b0c:	str	r2, [sp, #4]
   19b10:	str	r3, [sp]
   19b14:	mov	r3, r5
   19b18:	mov	r2, r4
   19b1c:	mov	r1, r6
   19b20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19b24:	bl	113a4 <fprintf@plt>
   19b28:	b	19c80 <__assert_fail@plt+0x878c>
   19b2c:	ldr	r0, [pc, #404]	; 19cc8 <__assert_fail@plt+0x87d4>
   19b30:	bl	1135c <gettext@plt>
   19b34:	mov	r7, r0
   19b38:	ldr	r3, [fp, #4]
   19b3c:	ldr	r5, [r3]
   19b40:	ldr	r3, [fp, #4]
   19b44:	add	r3, r3, #4
   19b48:	ldr	r6, [r3]
   19b4c:	ldr	r3, [fp, #4]
   19b50:	add	r3, r3, #8
   19b54:	ldr	r3, [r3]
   19b58:	ldr	r2, [fp, #4]
   19b5c:	add	r2, r2, #12
   19b60:	ldr	r2, [r2]
   19b64:	ldr	r1, [fp, #4]
   19b68:	add	r1, r1, #16
   19b6c:	ldr	r1, [r1]
   19b70:	ldr	r0, [fp, #4]
   19b74:	add	r0, r0, #20
   19b78:	ldr	r0, [r0]
   19b7c:	ldr	ip, [fp, #4]
   19b80:	add	ip, ip, #24
   19b84:	ldr	ip, [ip]
   19b88:	ldr	lr, [fp, #4]
   19b8c:	add	lr, lr, #28
   19b90:	ldr	lr, [lr]
   19b94:	ldr	r4, [fp, #4]
   19b98:	add	r4, r4, #32
   19b9c:	ldr	r4, [r4]
   19ba0:	str	r4, [sp, #24]
   19ba4:	str	lr, [sp, #20]
   19ba8:	str	ip, [sp, #16]
   19bac:	str	r0, [sp, #12]
   19bb0:	str	r1, [sp, #8]
   19bb4:	str	r2, [sp, #4]
   19bb8:	str	r3, [sp]
   19bbc:	mov	r3, r6
   19bc0:	mov	r2, r5
   19bc4:	mov	r1, r7
   19bc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19bcc:	bl	113a4 <fprintf@plt>
   19bd0:	b	19c80 <__assert_fail@plt+0x878c>
   19bd4:	ldr	r0, [pc, #240]	; 19ccc <__assert_fail@plt+0x87d8>
   19bd8:	bl	1135c <gettext@plt>
   19bdc:	mov	r7, r0
   19be0:	ldr	r3, [fp, #4]
   19be4:	ldr	r5, [r3]
   19be8:	ldr	r3, [fp, #4]
   19bec:	add	r3, r3, #4
   19bf0:	ldr	r6, [r3]
   19bf4:	ldr	r3, [fp, #4]
   19bf8:	add	r3, r3, #8
   19bfc:	ldr	r3, [r3]
   19c00:	ldr	r2, [fp, #4]
   19c04:	add	r2, r2, #12
   19c08:	ldr	r2, [r2]
   19c0c:	ldr	r1, [fp, #4]
   19c10:	add	r1, r1, #16
   19c14:	ldr	r1, [r1]
   19c18:	ldr	r0, [fp, #4]
   19c1c:	add	r0, r0, #20
   19c20:	ldr	r0, [r0]
   19c24:	ldr	ip, [fp, #4]
   19c28:	add	ip, ip, #24
   19c2c:	ldr	ip, [ip]
   19c30:	ldr	lr, [fp, #4]
   19c34:	add	lr, lr, #28
   19c38:	ldr	lr, [lr]
   19c3c:	ldr	r4, [fp, #4]
   19c40:	add	r4, r4, #32
   19c44:	ldr	r4, [r4]
   19c48:	str	r4, [sp, #24]
   19c4c:	str	lr, [sp, #20]
   19c50:	str	ip, [sp, #16]
   19c54:	str	r0, [sp, #12]
   19c58:	str	r1, [sp, #8]
   19c5c:	str	r2, [sp, #4]
   19c60:	str	r3, [sp]
   19c64:	mov	r3, r6
   19c68:	mov	r2, r5
   19c6c:	mov	r1, r7
   19c70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19c74:	bl	113a4 <fprintf@plt>
   19c78:	b	19c80 <__assert_fail@plt+0x878c>
   19c7c:	nop			; (mov r0, r0)
   19c80:	nop			; (mov r0, r0)
   19c84:	sub	sp, fp, #20
   19c88:	pop	{r4, r5, r6, r7, fp, pc}
   19c8c:	andeq	lr, r1, r4, asr r1
   19c90:	andeq	lr, r1, r0, ror #2
   19c94:	andeq	lr, r1, r8, ror #2
   19c98:	andeq	r0, r0, r6, ror #15
   19c9c:	andeq	lr, r1, r8, ror r4
   19ca0:	andeq	lr, r1, ip, ror #2
   19ca4:	andeq	lr, r1, r8, lsl r2
   19ca8:	andeq	lr, r1, ip, lsr r2
   19cac:	andeq	lr, r1, ip, asr #4
   19cb0:	andeq	lr, r1, r4, ror #4
   19cb4:	andeq	lr, r1, r0, lsl #5
   19cb8:	andeq	lr, r1, r0, lsr #5
   19cbc:	andeq	lr, r1, r4, asr #5
   19cc0:	andeq	lr, r1, ip, ror #5
   19cc4:	andeq	lr, r1, r8, lsl r3
   19cc8:	andeq	lr, r1, r8, asr #6
   19ccc:	andeq	lr, r1, ip, ror r3
   19cd0:	push	{fp, lr}
   19cd4:	add	fp, sp, #4
   19cd8:	sub	sp, sp, #32
   19cdc:	str	r0, [fp, #-16]
   19ce0:	str	r1, [fp, #-20]	; 0xffffffec
   19ce4:	str	r2, [fp, #-24]	; 0xffffffe8
   19ce8:	str	r3, [fp, #-28]	; 0xffffffe4
   19cec:	mov	r3, #0
   19cf0:	str	r3, [fp, #-8]
   19cf4:	b	19d04 <__assert_fail@plt+0x8810>
   19cf8:	ldr	r3, [fp, #-8]
   19cfc:	add	r3, r3, #1
   19d00:	str	r3, [fp, #-8]
   19d04:	ldr	r3, [fp, #-8]
   19d08:	lsl	r3, r3, #2
   19d0c:	ldr	r2, [fp, #4]
   19d10:	add	r3, r2, r3
   19d14:	ldr	r3, [r3]
   19d18:	cmp	r3, #0
   19d1c:	bne	19cf8 <__assert_fail@plt+0x8804>
   19d20:	ldr	r3, [fp, #-8]
   19d24:	str	r3, [sp, #4]
   19d28:	ldr	r3, [fp, #4]
   19d2c:	str	r3, [sp]
   19d30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19d34:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19d38:	ldr	r1, [fp, #-20]	; 0xffffffec
   19d3c:	ldr	r0, [fp, #-16]
   19d40:	bl	19760 <__assert_fail@plt+0x826c>
   19d44:	nop			; (mov r0, r0)
   19d48:	sub	sp, fp, #4
   19d4c:	pop	{fp, pc}
   19d50:	push	{fp, lr}
   19d54:	add	fp, sp, #4
   19d58:	sub	sp, sp, #72	; 0x48
   19d5c:	str	r0, [fp, #-56]	; 0xffffffc8
   19d60:	str	r1, [fp, #-60]	; 0xffffffc4
   19d64:	str	r2, [fp, #-64]	; 0xffffffc0
   19d68:	str	r3, [fp, #-68]	; 0xffffffbc
   19d6c:	mov	r3, #0
   19d70:	str	r3, [fp, #-8]
   19d74:	b	19d84 <__assert_fail@plt+0x8890>
   19d78:	ldr	r3, [fp, #-8]
   19d7c:	add	r3, r3, #1
   19d80:	str	r3, [fp, #-8]
   19d84:	ldr	r3, [fp, #-8]
   19d88:	cmp	r3, #9
   19d8c:	bhi	19dd0 <__assert_fail@plt+0x88dc>
   19d90:	ldr	r3, [fp, #4]
   19d94:	add	r2, r3, #4
   19d98:	str	r2, [fp, #4]
   19d9c:	ldr	r2, [r3]
   19da0:	ldr	r3, [fp, #-8]
   19da4:	lsl	r3, r3, #2
   19da8:	sub	r1, fp, #4
   19dac:	add	r3, r1, r3
   19db0:	str	r2, [r3, #-44]	; 0xffffffd4
   19db4:	ldr	r3, [fp, #-8]
   19db8:	lsl	r3, r3, #2
   19dbc:	sub	r2, fp, #4
   19dc0:	add	r3, r2, r3
   19dc4:	ldr	r3, [r3, #-44]	; 0xffffffd4
   19dc8:	cmp	r3, #0
   19dcc:	bne	19d78 <__assert_fail@plt+0x8884>
   19dd0:	ldr	r3, [fp, #-8]
   19dd4:	str	r3, [sp, #4]
   19dd8:	sub	r3, fp, #48	; 0x30
   19ddc:	str	r3, [sp]
   19de0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   19de4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   19de8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   19dec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   19df0:	bl	19760 <__assert_fail@plt+0x826c>
   19df4:	nop			; (mov r0, r0)
   19df8:	sub	sp, fp, #4
   19dfc:	pop	{fp, pc}
   19e00:	push	{r3}		; (str r3, [sp, #-4]!)
   19e04:	push	{fp, lr}
   19e08:	add	fp, sp, #4
   19e0c:	sub	sp, sp, #36	; 0x24
   19e10:	str	r0, [fp, #-20]	; 0xffffffec
   19e14:	str	r1, [fp, #-24]	; 0xffffffe8
   19e18:	str	r2, [fp, #-28]	; 0xffffffe4
   19e1c:	add	r3, fp, #8
   19e20:	str	r3, [fp, #-12]
   19e24:	ldr	r3, [fp, #-12]
   19e28:	str	r3, [sp]
   19e2c:	ldr	r3, [fp, #4]
   19e30:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19e34:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19e38:	ldr	r0, [fp, #-20]	; 0xffffffec
   19e3c:	bl	19d50 <__assert_fail@plt+0x885c>
   19e40:	nop			; (mov r0, r0)
   19e44:	sub	sp, fp, #4
   19e48:	pop	{fp, lr}
   19e4c:	add	sp, sp, #4
   19e50:	bx	lr
   19e54:	push	{fp, lr}
   19e58:	add	fp, sp, #4
   19e5c:	ldr	r3, [pc, #96]	; 19ec4 <__assert_fail@plt+0x89d0>
   19e60:	ldr	r3, [r3]
   19e64:	mov	r1, r3
   19e68:	mov	r0, #10
   19e6c:	bl	11218 <fputc_unlocked@plt>
   19e70:	ldr	r0, [pc, #80]	; 19ec8 <__assert_fail@plt+0x89d4>
   19e74:	bl	1135c <gettext@plt>
   19e78:	mov	r3, r0
   19e7c:	ldr	r1, [pc, #72]	; 19ecc <__assert_fail@plt+0x89d8>
   19e80:	mov	r0, r3
   19e84:	bl	11188 <printf@plt>
   19e88:	ldr	r0, [pc, #64]	; 19ed0 <__assert_fail@plt+0x89dc>
   19e8c:	bl	1135c <gettext@plt>
   19e90:	mov	r3, r0
   19e94:	ldr	r2, [pc, #56]	; 19ed4 <__assert_fail@plt+0x89e0>
   19e98:	ldr	r1, [pc, #56]	; 19ed8 <__assert_fail@plt+0x89e4>
   19e9c:	mov	r0, r3
   19ea0:	bl	11188 <printf@plt>
   19ea4:	ldr	r0, [pc, #48]	; 19edc <__assert_fail@plt+0x89e8>
   19ea8:	bl	1135c <gettext@plt>
   19eac:	mov	r3, r0
   19eb0:	ldr	r1, [pc, #40]	; 19ee0 <__assert_fail@plt+0x89ec>
   19eb4:	mov	r0, r3
   19eb8:	bl	11188 <printf@plt>
   19ebc:	nop			; (mov r0, r0)
   19ec0:	pop	{fp, pc}
   19ec4:	andeq	pc, r2, ip, ror #6
   19ec8:			; <UNDEFINED> instruction: 0x0001e3b8
   19ecc:	andeq	lr, r1, ip, asr #7
   19ed0:	andeq	lr, r1, r4, ror #7
   19ed4:	strdeq	lr, [r1], -r8
   19ed8:	andeq	lr, r1, r0, lsr #8
   19edc:	andeq	lr, r1, r0, lsr r4
   19ee0:	andeq	lr, r1, r8, asr r4
   19ee4:	push	{fp, lr}
   19ee8:	add	fp, sp, #4
   19eec:	sub	sp, sp, #16
   19ef0:	str	r0, [fp, #-16]
   19ef4:	str	r1, [fp, #-20]	; 0xffffffec
   19ef8:	ldr	r1, [fp, #-20]	; 0xffffffec
   19efc:	ldr	r0, [fp, #-16]
   19f00:	bl	1b780 <__assert_fail@plt+0xa28c>
   19f04:	mov	r3, r0
   19f08:	str	r3, [fp, #-8]
   19f0c:	ldr	r3, [fp, #-8]
   19f10:	cmp	r3, #0
   19f14:	bne	19f1c <__assert_fail@plt+0x8a28>
   19f18:	bl	1aab0 <__assert_fail@plt+0x95bc>
   19f1c:	ldr	r3, [fp, #-8]
   19f20:	mov	r0, r3
   19f24:	sub	sp, fp, #4
   19f28:	pop	{fp, pc}
   19f2c:	push	{fp, lr}
   19f30:	add	fp, sp, #4
   19f34:	sub	sp, sp, #16
   19f38:	str	r0, [fp, #-8]
   19f3c:	str	r1, [fp, #-12]
   19f40:	str	r2, [fp, #-16]
   19f44:	ldr	r2, [fp, #-16]
   19f48:	ldr	r1, [fp, #-12]
   19f4c:	ldr	r0, [fp, #-8]
   19f50:	bl	1a0bc <__assert_fail@plt+0x8bc8>
   19f54:	mov	r3, r0
   19f58:	mov	r0, r3
   19f5c:	sub	sp, fp, #4
   19f60:	pop	{fp, pc}
   19f64:	push	{fp, lr}
   19f68:	add	fp, sp, #4
   19f6c:	sub	sp, sp, #8
   19f70:	str	r0, [fp, #-8]
   19f74:	ldr	r3, [fp, #-8]
   19f78:	cmp	r3, #0
   19f7c:	bne	19f84 <__assert_fail@plt+0x8a90>
   19f80:	bl	1aab0 <__assert_fail@plt+0x95bc>
   19f84:	ldr	r3, [fp, #-8]
   19f88:	mov	r0, r3
   19f8c:	sub	sp, fp, #4
   19f90:	pop	{fp, pc}
   19f94:	push	{fp, lr}
   19f98:	add	fp, sp, #4
   19f9c:	sub	sp, sp, #8
   19fa0:	str	r0, [fp, #-8]
   19fa4:	ldr	r0, [fp, #-8]
   19fa8:	bl	1b5e4 <__assert_fail@plt+0xa0f0>
   19fac:	mov	r3, r0
   19fb0:	mov	r0, r3
   19fb4:	bl	19f64 <__assert_fail@plt+0x8a70>
   19fb8:	mov	r3, r0
   19fbc:	mov	r0, r3
   19fc0:	sub	sp, fp, #4
   19fc4:	pop	{fp, pc}
   19fc8:	push	{fp, lr}
   19fcc:	add	fp, sp, #4
   19fd0:	sub	sp, sp, #8
   19fd4:	str	r0, [fp, #-8]
   19fd8:	ldr	r0, [fp, #-8]
   19fdc:	bl	1b9a4 <__assert_fail@plt+0xa4b0>
   19fe0:	mov	r3, r0
   19fe4:	mov	r0, r3
   19fe8:	bl	19f64 <__assert_fail@plt+0x8a70>
   19fec:	mov	r3, r0
   19ff0:	mov	r0, r3
   19ff4:	sub	sp, fp, #4
   19ff8:	pop	{fp, pc}
   19ffc:	push	{fp, lr}
   1a000:	add	fp, sp, #4
   1a004:	sub	sp, sp, #8
   1a008:	str	r0, [fp, #-8]
   1a00c:	ldr	r0, [fp, #-8]
   1a010:	bl	19f94 <__assert_fail@plt+0x8aa0>
   1a014:	mov	r3, r0
   1a018:	mov	r0, r3
   1a01c:	sub	sp, fp, #4
   1a020:	pop	{fp, pc}
   1a024:	push	{fp, lr}
   1a028:	add	fp, sp, #4
   1a02c:	sub	sp, sp, #16
   1a030:	str	r0, [fp, #-16]
   1a034:	str	r1, [fp, #-20]	; 0xffffffec
   1a038:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a03c:	ldr	r0, [fp, #-16]
   1a040:	bl	1b68c <__assert_fail@plt+0xa198>
   1a044:	str	r0, [fp, #-8]
   1a048:	ldr	r3, [fp, #-8]
   1a04c:	cmp	r3, #0
   1a050:	bne	1a070 <__assert_fail@plt+0x8b7c>
   1a054:	ldr	r3, [fp, #-16]
   1a058:	cmp	r3, #0
   1a05c:	beq	1a06c <__assert_fail@plt+0x8b78>
   1a060:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a064:	cmp	r3, #0
   1a068:	beq	1a070 <__assert_fail@plt+0x8b7c>
   1a06c:	bl	1aab0 <__assert_fail@plt+0x95bc>
   1a070:	ldr	r3, [fp, #-8]
   1a074:	mov	r0, r3
   1a078:	sub	sp, fp, #4
   1a07c:	pop	{fp, pc}
   1a080:	push	{fp, lr}
   1a084:	add	fp, sp, #4
   1a088:	sub	sp, sp, #8
   1a08c:	str	r0, [fp, #-8]
   1a090:	str	r1, [fp, #-12]
   1a094:	ldr	r1, [fp, #-12]
   1a098:	ldr	r0, [fp, #-8]
   1a09c:	bl	1b9d0 <__assert_fail@plt+0xa4dc>
   1a0a0:	mov	r3, r0
   1a0a4:	mov	r0, r3
   1a0a8:	bl	19f64 <__assert_fail@plt+0x8a70>
   1a0ac:	mov	r3, r0
   1a0b0:	mov	r0, r3
   1a0b4:	sub	sp, fp, #4
   1a0b8:	pop	{fp, pc}
   1a0bc:	push	{fp, lr}
   1a0c0:	add	fp, sp, #4
   1a0c4:	sub	sp, sp, #24
   1a0c8:	str	r0, [fp, #-16]
   1a0cc:	str	r1, [fp, #-20]	; 0xffffffec
   1a0d0:	str	r2, [fp, #-24]	; 0xffffffe8
   1a0d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a0d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a0dc:	ldr	r0, [fp, #-16]
   1a0e0:	bl	1bbc4 <__assert_fail@plt+0xa6d0>
   1a0e4:	str	r0, [fp, #-8]
   1a0e8:	ldr	r3, [fp, #-8]
   1a0ec:	cmp	r3, #0
   1a0f0:	bne	1a11c <__assert_fail@plt+0x8c28>
   1a0f4:	ldr	r3, [fp, #-16]
   1a0f8:	cmp	r3, #0
   1a0fc:	beq	1a118 <__assert_fail@plt+0x8c24>
   1a100:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a104:	cmp	r3, #0
   1a108:	beq	1a11c <__assert_fail@plt+0x8c28>
   1a10c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a110:	cmp	r3, #0
   1a114:	beq	1a11c <__assert_fail@plt+0x8c28>
   1a118:	bl	1aab0 <__assert_fail@plt+0x95bc>
   1a11c:	ldr	r3, [fp, #-8]
   1a120:	mov	r0, r3
   1a124:	sub	sp, fp, #4
   1a128:	pop	{fp, pc}
   1a12c:	push	{fp, lr}
   1a130:	add	fp, sp, #4
   1a134:	sub	sp, sp, #16
   1a138:	str	r0, [fp, #-8]
   1a13c:	str	r1, [fp, #-12]
   1a140:	str	r2, [fp, #-16]
   1a144:	ldr	r2, [fp, #-16]
   1a148:	ldr	r1, [fp, #-12]
   1a14c:	ldr	r0, [fp, #-8]
   1a150:	bl	1ba58 <__assert_fail@plt+0xa564>
   1a154:	mov	r3, r0
   1a158:	mov	r0, r3
   1a15c:	bl	19f64 <__assert_fail@plt+0x8a70>
   1a160:	mov	r3, r0
   1a164:	mov	r0, r3
   1a168:	sub	sp, fp, #4
   1a16c:	pop	{fp, pc}
   1a170:	push	{fp, lr}
   1a174:	add	fp, sp, #4
   1a178:	sub	sp, sp, #8
   1a17c:	str	r0, [fp, #-8]
   1a180:	str	r1, [fp, #-12]
   1a184:	ldr	r2, [fp, #-12]
   1a188:	ldr	r1, [fp, #-8]
   1a18c:	mov	r0, #0
   1a190:	bl	1a0bc <__assert_fail@plt+0x8bc8>
   1a194:	mov	r3, r0
   1a198:	mov	r0, r3
   1a19c:	sub	sp, fp, #4
   1a1a0:	pop	{fp, pc}
   1a1a4:	push	{fp, lr}
   1a1a8:	add	fp, sp, #4
   1a1ac:	sub	sp, sp, #8
   1a1b0:	str	r0, [fp, #-8]
   1a1b4:	str	r1, [fp, #-12]
   1a1b8:	ldr	r2, [fp, #-12]
   1a1bc:	ldr	r1, [fp, #-8]
   1a1c0:	mov	r0, #0
   1a1c4:	bl	1a12c <__assert_fail@plt+0x8c38>
   1a1c8:	mov	r3, r0
   1a1cc:	mov	r0, r3
   1a1d0:	sub	sp, fp, #4
   1a1d4:	pop	{fp, pc}
   1a1d8:	push	{fp, lr}
   1a1dc:	add	fp, sp, #4
   1a1e0:	sub	sp, sp, #8
   1a1e4:	str	r0, [fp, #-8]
   1a1e8:	str	r1, [fp, #-12]
   1a1ec:	mov	r2, #1
   1a1f0:	ldr	r1, [fp, #-12]
   1a1f4:	ldr	r0, [fp, #-8]
   1a1f8:	bl	1a20c <__assert_fail@plt+0x8d18>
   1a1fc:	mov	r3, r0
   1a200:	mov	r0, r3
   1a204:	sub	sp, fp, #4
   1a208:	pop	{fp, pc}
   1a20c:	push	{fp, lr}
   1a210:	add	fp, sp, #4
   1a214:	sub	sp, sp, #24
   1a218:	str	r0, [fp, #-16]
   1a21c:	str	r1, [fp, #-20]	; 0xffffffec
   1a220:	str	r2, [fp, #-24]	; 0xffffffe8
   1a224:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a228:	ldr	r3, [r3]
   1a22c:	str	r3, [fp, #-8]
   1a230:	ldr	r3, [fp, #-16]
   1a234:	cmp	r3, #0
   1a238:	bne	1a284 <__assert_fail@plt+0x8d90>
   1a23c:	ldr	r3, [fp, #-8]
   1a240:	cmp	r3, #0
   1a244:	bne	1a2e8 <__assert_fail@plt+0x8df4>
   1a248:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a24c:	mov	r0, #64	; 0x40
   1a250:	bl	1c71c <__assert_fail@plt+0xb228>
   1a254:	mov	r3, r0
   1a258:	str	r3, [fp, #-8]
   1a25c:	ldr	r3, [fp, #-8]
   1a260:	cmp	r3, #0
   1a264:	moveq	r3, #1
   1a268:	movne	r3, #0
   1a26c:	uxtb	r3, r3
   1a270:	mov	r2, r3
   1a274:	ldr	r3, [fp, #-8]
   1a278:	add	r3, r2, r3
   1a27c:	str	r3, [fp, #-8]
   1a280:	b	1a2e8 <__assert_fail@plt+0x8df4>
   1a284:	ldr	r3, [fp, #-8]
   1a288:	lsr	r3, r3, #1
   1a28c:	add	r3, r3, #1
   1a290:	mvn	r2, r3
   1a294:	ldr	r3, [fp, #-8]
   1a298:	cmp	r2, r3
   1a29c:	bcs	1a2c0 <__assert_fail@plt+0x8dcc>
   1a2a0:	ldr	r3, [fp, #-8]
   1a2a4:	lsr	r2, r3, #1
   1a2a8:	ldr	r3, [fp, #-8]
   1a2ac:	add	r3, r2, r3
   1a2b0:	add	r3, r3, #1
   1a2b4:	str	r3, [fp, #-8]
   1a2b8:	mov	r3, #1
   1a2bc:	b	1a2dc <__assert_fail@plt+0x8de8>
   1a2c0:	ldr	r3, [fp, #-8]
   1a2c4:	lsr	r2, r3, #1
   1a2c8:	ldr	r3, [fp, #-8]
   1a2cc:	add	r3, r2, r3
   1a2d0:	add	r3, r3, #1
   1a2d4:	str	r3, [fp, #-8]
   1a2d8:	mov	r3, #0
   1a2dc:	cmp	r3, #0
   1a2e0:	beq	1a2e8 <__assert_fail@plt+0x8df4>
   1a2e4:	bl	1aab0 <__assert_fail@plt+0x95bc>
   1a2e8:	ldr	r3, [fp, #-8]
   1a2ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a2f0:	mov	r1, r3
   1a2f4:	ldr	r0, [fp, #-16]
   1a2f8:	bl	1a0bc <__assert_fail@plt+0x8bc8>
   1a2fc:	str	r0, [fp, #-16]
   1a300:	ldr	r2, [fp, #-8]
   1a304:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a308:	str	r2, [r3]
   1a30c:	ldr	r3, [fp, #-16]
   1a310:	mov	r0, r3
   1a314:	sub	sp, fp, #4
   1a318:	pop	{fp, pc}
   1a31c:	push	{fp, lr}
   1a320:	add	fp, sp, #4
   1a324:	sub	sp, sp, #32
   1a328:	str	r0, [fp, #-24]	; 0xffffffe8
   1a32c:	str	r1, [fp, #-28]	; 0xffffffe4
   1a330:	str	r2, [fp, #-32]	; 0xffffffe0
   1a334:	str	r3, [fp, #-36]	; 0xffffffdc
   1a338:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a33c:	ldr	r3, [r3]
   1a340:	str	r3, [fp, #-8]
   1a344:	ldr	r3, [fp, #-8]
   1a348:	asr	r3, r3, #1
   1a34c:	cmp	r3, #0
   1a350:	bge	1a378 <__assert_fail@plt+0x8e84>
   1a354:	ldr	r3, [fp, #-8]
   1a358:	asr	r3, r3, #1
   1a35c:	rsb	r2, r3, #-2147483648	; 0x80000000
   1a360:	ldr	r3, [fp, #-8]
   1a364:	cmp	r2, r3
   1a368:	movgt	r3, #1
   1a36c:	movle	r3, #0
   1a370:	uxtb	r3, r3
   1a374:	b	1a3cc <__assert_fail@plt+0x8ed8>
   1a378:	ldr	r3, [fp, #-8]
   1a37c:	cmp	r3, #0
   1a380:	bge	1a3a8 <__assert_fail@plt+0x8eb4>
   1a384:	ldr	r3, [fp, #-8]
   1a388:	asr	r2, r3, #1
   1a38c:	ldr	r3, [fp, #-8]
   1a390:	rsb	r3, r3, #-2147483648	; 0x80000000
   1a394:	cmp	r2, r3
   1a398:	movlt	r3, #1
   1a39c:	movge	r3, #0
   1a3a0:	uxtb	r3, r3
   1a3a4:	b	1a3cc <__assert_fail@plt+0x8ed8>
   1a3a8:	ldr	r3, [fp, #-8]
   1a3ac:	asr	r2, r3, #1
   1a3b0:	mvn	r3, #-2147483648	; 0x80000000
   1a3b4:	sub	r3, r3, r2
   1a3b8:	ldr	r2, [fp, #-8]
   1a3bc:	cmp	r3, r2
   1a3c0:	movlt	r3, #1
   1a3c4:	movge	r3, #0
   1a3c8:	uxtb	r3, r3
   1a3cc:	cmp	r3, #0
   1a3d0:	beq	1a3f4 <__assert_fail@plt+0x8f00>
   1a3d4:	ldr	r3, [fp, #-8]
   1a3d8:	asr	r3, r3, #1
   1a3dc:	mov	r2, r3
   1a3e0:	ldr	r3, [fp, #-8]
   1a3e4:	add	r3, r2, r3
   1a3e8:	str	r3, [fp, #-16]
   1a3ec:	mov	r3, #1
   1a3f0:	b	1a410 <__assert_fail@plt+0x8f1c>
   1a3f4:	ldr	r3, [fp, #-8]
   1a3f8:	asr	r3, r3, #1
   1a3fc:	mov	r2, r3
   1a400:	ldr	r3, [fp, #-8]
   1a404:	add	r3, r2, r3
   1a408:	str	r3, [fp, #-16]
   1a40c:	mov	r3, #0
   1a410:	cmp	r3, #0
   1a414:	beq	1a420 <__assert_fail@plt+0x8f2c>
   1a418:	mvn	r3, #-2147483648	; 0x80000000
   1a41c:	str	r3, [fp, #-16]
   1a420:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a424:	cmp	r3, #0
   1a428:	blt	1a444 <__assert_fail@plt+0x8f50>
   1a42c:	ldr	r3, [fp, #-16]
   1a430:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a434:	cmp	r2, r3
   1a438:	bge	1a444 <__assert_fail@plt+0x8f50>
   1a43c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a440:	str	r3, [fp, #-16]
   1a444:	ldr	r3, [fp, #4]
   1a448:	cmp	r3, #0
   1a44c:	bge	1a4dc <__assert_fail@plt+0x8fe8>
   1a450:	ldr	r3, [fp, #-16]
   1a454:	cmp	r3, #0
   1a458:	bge	1a488 <__assert_fail@plt+0x8f94>
   1a45c:	ldr	r1, [fp, #4]
   1a460:	mvn	r0, #-2147483648	; 0x80000000
   1a464:	bl	1c928 <__assert_fail@plt+0xb434>
   1a468:	mov	r3, r0
   1a46c:	mov	r2, r3
   1a470:	ldr	r3, [fp, #-16]
   1a474:	cmp	r2, r3
   1a478:	movgt	r3, #1
   1a47c:	movle	r3, #0
   1a480:	uxtb	r3, r3
   1a484:	b	1a57c <__assert_fail@plt+0x9088>
   1a488:	ldr	r3, [fp, #4]
   1a48c:	cmn	r3, #1
   1a490:	bne	1a4b0 <__assert_fail@plt+0x8fbc>
   1a494:	ldr	r3, [fp, #-16]
   1a498:	add	r3, r3, #-2147483648	; 0x80000000
   1a49c:	cmp	r3, #0
   1a4a0:	movgt	r3, #1
   1a4a4:	movle	r3, #0
   1a4a8:	uxtb	r3, r3
   1a4ac:	b	1a57c <__assert_fail@plt+0x9088>
   1a4b0:	ldr	r1, [fp, #4]
   1a4b4:	mov	r0, #-2147483648	; 0x80000000
   1a4b8:	bl	1c928 <__assert_fail@plt+0xb434>
   1a4bc:	mov	r3, r0
   1a4c0:	mov	r2, r3
   1a4c4:	ldr	r3, [fp, #-16]
   1a4c8:	cmp	r2, r3
   1a4cc:	movlt	r3, #1
   1a4d0:	movge	r3, #0
   1a4d4:	uxtb	r3, r3
   1a4d8:	b	1a57c <__assert_fail@plt+0x9088>
   1a4dc:	ldr	r3, [fp, #4]
   1a4e0:	cmp	r3, #0
   1a4e4:	beq	1a578 <__assert_fail@plt+0x9084>
   1a4e8:	ldr	r3, [fp, #-16]
   1a4ec:	cmp	r3, #0
   1a4f0:	bge	1a54c <__assert_fail@plt+0x9058>
   1a4f4:	ldr	r3, [fp, #-16]
   1a4f8:	cmn	r3, #1
   1a4fc:	bne	1a51c <__assert_fail@plt+0x9028>
   1a500:	ldr	r3, [fp, #4]
   1a504:	add	r3, r3, #-2147483648	; 0x80000000
   1a508:	cmp	r3, #0
   1a50c:	movgt	r3, #1
   1a510:	movle	r3, #0
   1a514:	uxtb	r3, r3
   1a518:	b	1a57c <__assert_fail@plt+0x9088>
   1a51c:	ldr	r3, [fp, #-16]
   1a520:	mov	r1, r3
   1a524:	mov	r0, #-2147483648	; 0x80000000
   1a528:	bl	1c928 <__assert_fail@plt+0xb434>
   1a52c:	mov	r3, r0
   1a530:	mov	r2, r3
   1a534:	ldr	r3, [fp, #4]
   1a538:	cmp	r2, r3
   1a53c:	movlt	r3, #1
   1a540:	movge	r3, #0
   1a544:	uxtb	r3, r3
   1a548:	b	1a57c <__assert_fail@plt+0x9088>
   1a54c:	ldr	r1, [fp, #4]
   1a550:	mvn	r0, #-2147483648	; 0x80000000
   1a554:	bl	1c928 <__assert_fail@plt+0xb434>
   1a558:	mov	r3, r0
   1a55c:	mov	r2, r3
   1a560:	ldr	r3, [fp, #-16]
   1a564:	cmp	r2, r3
   1a568:	movlt	r3, #1
   1a56c:	movge	r3, #0
   1a570:	uxtb	r3, r3
   1a574:	b	1a57c <__assert_fail@plt+0x9088>
   1a578:	mov	r3, #0
   1a57c:	cmp	r3, #0
   1a580:	beq	1a5a0 <__assert_fail@plt+0x90ac>
   1a584:	ldr	r3, [fp, #-16]
   1a588:	mov	r2, r3
   1a58c:	ldr	r3, [fp, #4]
   1a590:	mul	r3, r3, r2
   1a594:	str	r3, [fp, #-20]	; 0xffffffec
   1a598:	mov	r3, #1
   1a59c:	b	1a5b8 <__assert_fail@plt+0x90c4>
   1a5a0:	ldr	r3, [fp, #-16]
   1a5a4:	mov	r2, r3
   1a5a8:	ldr	r3, [fp, #4]
   1a5ac:	mul	r3, r3, r2
   1a5b0:	str	r3, [fp, #-20]	; 0xffffffec
   1a5b4:	mov	r3, #0
   1a5b8:	cmp	r3, #0
   1a5bc:	beq	1a5c8 <__assert_fail@plt+0x90d4>
   1a5c0:	mvn	r3, #-2147483648	; 0x80000000
   1a5c4:	b	1a5e0 <__assert_fail@plt+0x90ec>
   1a5c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a5cc:	cmp	r3, #63	; 0x3f
   1a5d0:	bgt	1a5dc <__assert_fail@plt+0x90e8>
   1a5d4:	mov	r3, #64	; 0x40
   1a5d8:	b	1a5e0 <__assert_fail@plt+0x90ec>
   1a5dc:	mov	r3, #0
   1a5e0:	str	r3, [fp, #-12]
   1a5e4:	ldr	r3, [fp, #-12]
   1a5e8:	cmp	r3, #0
   1a5ec:	beq	1a628 <__assert_fail@plt+0x9134>
   1a5f0:	ldr	r1, [fp, #4]
   1a5f4:	ldr	r0, [fp, #-12]
   1a5f8:	bl	1c928 <__assert_fail@plt+0xb434>
   1a5fc:	mov	r3, r0
   1a600:	str	r3, [fp, #-16]
   1a604:	ldr	r3, [fp, #-12]
   1a608:	ldr	r1, [fp, #4]
   1a60c:	mov	r0, r3
   1a610:	bl	1cb48 <__assert_fail@plt+0xb654>
   1a614:	mov	r3, r1
   1a618:	mov	r2, r3
   1a61c:	ldr	r3, [fp, #-12]
   1a620:	sub	r3, r3, r2
   1a624:	str	r3, [fp, #-20]	; 0xffffffec
   1a628:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a62c:	cmp	r3, #0
   1a630:	bne	1a640 <__assert_fail@plt+0x914c>
   1a634:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a638:	mov	r2, #0
   1a63c:	str	r2, [r3]
   1a640:	ldr	r2, [fp, #-16]
   1a644:	ldr	r3, [fp, #-8]
   1a648:	sub	r2, r2, r3
   1a64c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a650:	cmp	r2, r3
   1a654:	bge	1a88c <__assert_fail@plt+0x9398>
   1a658:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a65c:	cmp	r3, #0
   1a660:	bge	1a684 <__assert_fail@plt+0x9190>
   1a664:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a668:	rsb	r2, r3, #-2147483648	; 0x80000000
   1a66c:	ldr	r3, [fp, #-8]
   1a670:	cmp	r2, r3
   1a674:	movgt	r3, #1
   1a678:	movle	r3, #0
   1a67c:	uxtb	r3, r3
   1a680:	b	1a6d0 <__assert_fail@plt+0x91dc>
   1a684:	ldr	r3, [fp, #-8]
   1a688:	cmp	r3, #0
   1a68c:	bge	1a6b0 <__assert_fail@plt+0x91bc>
   1a690:	ldr	r3, [fp, #-8]
   1a694:	rsb	r2, r3, #-2147483648	; 0x80000000
   1a698:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a69c:	cmp	r2, r3
   1a6a0:	movgt	r3, #1
   1a6a4:	movle	r3, #0
   1a6a8:	uxtb	r3, r3
   1a6ac:	b	1a6d0 <__assert_fail@plt+0x91dc>
   1a6b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a6b4:	mvn	r3, #-2147483648	; 0x80000000
   1a6b8:	sub	r3, r3, r2
   1a6bc:	ldr	r2, [fp, #-8]
   1a6c0:	cmp	r3, r2
   1a6c4:	movlt	r3, #1
   1a6c8:	movge	r3, #0
   1a6cc:	uxtb	r3, r3
   1a6d0:	cmp	r3, #0
   1a6d4:	beq	1a6ec <__assert_fail@plt+0x91f8>
   1a6d8:	ldr	r2, [fp, #-8]
   1a6dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a6e0:	add	r3, r2, r3
   1a6e4:	str	r3, [fp, #-16]
   1a6e8:	b	1a888 <__assert_fail@plt+0x9394>
   1a6ec:	ldr	r2, [fp, #-8]
   1a6f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a6f4:	add	r3, r2, r3
   1a6f8:	str	r3, [fp, #-16]
   1a6fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a700:	cmp	r3, #0
   1a704:	blt	1a718 <__assert_fail@plt+0x9224>
   1a708:	ldr	r3, [fp, #-16]
   1a70c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a710:	cmp	r2, r3
   1a714:	blt	1a888 <__assert_fail@plt+0x9394>
   1a718:	ldr	r3, [fp, #4]
   1a71c:	cmp	r3, #0
   1a720:	bge	1a7b0 <__assert_fail@plt+0x92bc>
   1a724:	ldr	r3, [fp, #-16]
   1a728:	cmp	r3, #0
   1a72c:	bge	1a75c <__assert_fail@plt+0x9268>
   1a730:	ldr	r1, [fp, #4]
   1a734:	mvn	r0, #-2147483648	; 0x80000000
   1a738:	bl	1c928 <__assert_fail@plt+0xb434>
   1a73c:	mov	r3, r0
   1a740:	mov	r2, r3
   1a744:	ldr	r3, [fp, #-16]
   1a748:	cmp	r2, r3
   1a74c:	movgt	r3, #1
   1a750:	movle	r3, #0
   1a754:	uxtb	r3, r3
   1a758:	b	1a850 <__assert_fail@plt+0x935c>
   1a75c:	ldr	r3, [fp, #4]
   1a760:	cmn	r3, #1
   1a764:	bne	1a784 <__assert_fail@plt+0x9290>
   1a768:	ldr	r3, [fp, #-16]
   1a76c:	add	r3, r3, #-2147483648	; 0x80000000
   1a770:	cmp	r3, #0
   1a774:	movgt	r3, #1
   1a778:	movle	r3, #0
   1a77c:	uxtb	r3, r3
   1a780:	b	1a850 <__assert_fail@plt+0x935c>
   1a784:	ldr	r1, [fp, #4]
   1a788:	mov	r0, #-2147483648	; 0x80000000
   1a78c:	bl	1c928 <__assert_fail@plt+0xb434>
   1a790:	mov	r3, r0
   1a794:	mov	r2, r3
   1a798:	ldr	r3, [fp, #-16]
   1a79c:	cmp	r2, r3
   1a7a0:	movlt	r3, #1
   1a7a4:	movge	r3, #0
   1a7a8:	uxtb	r3, r3
   1a7ac:	b	1a850 <__assert_fail@plt+0x935c>
   1a7b0:	ldr	r3, [fp, #4]
   1a7b4:	cmp	r3, #0
   1a7b8:	beq	1a84c <__assert_fail@plt+0x9358>
   1a7bc:	ldr	r3, [fp, #-16]
   1a7c0:	cmp	r3, #0
   1a7c4:	bge	1a820 <__assert_fail@plt+0x932c>
   1a7c8:	ldr	r3, [fp, #-16]
   1a7cc:	cmn	r3, #1
   1a7d0:	bne	1a7f0 <__assert_fail@plt+0x92fc>
   1a7d4:	ldr	r3, [fp, #4]
   1a7d8:	add	r3, r3, #-2147483648	; 0x80000000
   1a7dc:	cmp	r3, #0
   1a7e0:	movgt	r3, #1
   1a7e4:	movle	r3, #0
   1a7e8:	uxtb	r3, r3
   1a7ec:	b	1a850 <__assert_fail@plt+0x935c>
   1a7f0:	ldr	r3, [fp, #-16]
   1a7f4:	mov	r1, r3
   1a7f8:	mov	r0, #-2147483648	; 0x80000000
   1a7fc:	bl	1c928 <__assert_fail@plt+0xb434>
   1a800:	mov	r3, r0
   1a804:	mov	r2, r3
   1a808:	ldr	r3, [fp, #4]
   1a80c:	cmp	r2, r3
   1a810:	movlt	r3, #1
   1a814:	movge	r3, #0
   1a818:	uxtb	r3, r3
   1a81c:	b	1a850 <__assert_fail@plt+0x935c>
   1a820:	ldr	r1, [fp, #4]
   1a824:	mvn	r0, #-2147483648	; 0x80000000
   1a828:	bl	1c928 <__assert_fail@plt+0xb434>
   1a82c:	mov	r3, r0
   1a830:	mov	r2, r3
   1a834:	ldr	r3, [fp, #-16]
   1a838:	cmp	r2, r3
   1a83c:	movlt	r3, #1
   1a840:	movge	r3, #0
   1a844:	uxtb	r3, r3
   1a848:	b	1a850 <__assert_fail@plt+0x935c>
   1a84c:	mov	r3, #0
   1a850:	cmp	r3, #0
   1a854:	beq	1a870 <__assert_fail@plt+0x937c>
   1a858:	ldr	r3, [fp, #-16]
   1a85c:	mov	r2, r3
   1a860:	ldr	r3, [fp, #4]
   1a864:	mul	r3, r3, r2
   1a868:	str	r3, [fp, #-20]	; 0xffffffec
   1a86c:	b	1a888 <__assert_fail@plt+0x9394>
   1a870:	ldr	r3, [fp, #-16]
   1a874:	mov	r2, r3
   1a878:	ldr	r3, [fp, #4]
   1a87c:	mul	r3, r3, r2
   1a880:	str	r3, [fp, #-20]	; 0xffffffec
   1a884:	b	1a88c <__assert_fail@plt+0x9398>
   1a888:	bl	1aab0 <__assert_fail@plt+0x95bc>
   1a88c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a890:	mov	r1, r3
   1a894:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a898:	bl	1a024 <__assert_fail@plt+0x8b30>
   1a89c:	str	r0, [fp, #-24]	; 0xffffffe8
   1a8a0:	ldr	r2, [fp, #-16]
   1a8a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a8a8:	str	r2, [r3]
   1a8ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a8b0:	mov	r0, r3
   1a8b4:	sub	sp, fp, #4
   1a8b8:	pop	{fp, pc}
   1a8bc:	push	{fp, lr}
   1a8c0:	add	fp, sp, #4
   1a8c4:	sub	sp, sp, #8
   1a8c8:	str	r0, [fp, #-8]
   1a8cc:	mov	r1, #1
   1a8d0:	ldr	r0, [fp, #-8]
   1a8d4:	bl	1a914 <__assert_fail@plt+0x9420>
   1a8d8:	mov	r3, r0
   1a8dc:	mov	r0, r3
   1a8e0:	sub	sp, fp, #4
   1a8e4:	pop	{fp, pc}
   1a8e8:	push	{fp, lr}
   1a8ec:	add	fp, sp, #4
   1a8f0:	sub	sp, sp, #8
   1a8f4:	str	r0, [fp, #-8]
   1a8f8:	mov	r1, #1
   1a8fc:	ldr	r0, [fp, #-8]
   1a900:	bl	1a950 <__assert_fail@plt+0x945c>
   1a904:	mov	r3, r0
   1a908:	mov	r0, r3
   1a90c:	sub	sp, fp, #4
   1a910:	pop	{fp, pc}
   1a914:	push	{fp, lr}
   1a918:	add	fp, sp, #4
   1a91c:	sub	sp, sp, #8
   1a920:	str	r0, [fp, #-8]
   1a924:	str	r1, [fp, #-12]
   1a928:	ldr	r1, [fp, #-12]
   1a92c:	ldr	r0, [fp, #-8]
   1a930:	bl	1b520 <__assert_fail@plt+0xa02c>
   1a934:	mov	r3, r0
   1a938:	mov	r0, r3
   1a93c:	bl	19f64 <__assert_fail@plt+0x8a70>
   1a940:	mov	r3, r0
   1a944:	mov	r0, r3
   1a948:	sub	sp, fp, #4
   1a94c:	pop	{fp, pc}
   1a950:	push	{fp, lr}
   1a954:	add	fp, sp, #4
   1a958:	sub	sp, sp, #8
   1a95c:	str	r0, [fp, #-8]
   1a960:	str	r1, [fp, #-12]
   1a964:	ldr	r1, [fp, #-12]
   1a968:	ldr	r0, [fp, #-8]
   1a96c:	bl	1ba20 <__assert_fail@plt+0xa52c>
   1a970:	mov	r3, r0
   1a974:	mov	r0, r3
   1a978:	bl	19f64 <__assert_fail@plt+0x8a70>
   1a97c:	mov	r3, r0
   1a980:	mov	r0, r3
   1a984:	sub	sp, fp, #4
   1a988:	pop	{fp, pc}
   1a98c:	push	{fp, lr}
   1a990:	add	fp, sp, #4
   1a994:	sub	sp, sp, #8
   1a998:	str	r0, [fp, #-8]
   1a99c:	str	r1, [fp, #-12]
   1a9a0:	ldr	r0, [fp, #-12]
   1a9a4:	bl	19f94 <__assert_fail@plt+0x8aa0>
   1a9a8:	mov	r3, r0
   1a9ac:	ldr	r2, [fp, #-12]
   1a9b0:	ldr	r1, [fp, #-8]
   1a9b4:	mov	r0, r3
   1a9b8:	bl	111dc <memcpy@plt>
   1a9bc:	mov	r3, r0
   1a9c0:	mov	r0, r3
   1a9c4:	sub	sp, fp, #4
   1a9c8:	pop	{fp, pc}
   1a9cc:	push	{fp, lr}
   1a9d0:	add	fp, sp, #4
   1a9d4:	sub	sp, sp, #8
   1a9d8:	str	r0, [fp, #-8]
   1a9dc:	str	r1, [fp, #-12]
   1a9e0:	ldr	r0, [fp, #-12]
   1a9e4:	bl	19fc8 <__assert_fail@plt+0x8ad4>
   1a9e8:	mov	r3, r0
   1a9ec:	mov	r0, r3
   1a9f0:	ldr	r3, [fp, #-12]
   1a9f4:	mov	r2, r3
   1a9f8:	ldr	r1, [fp, #-8]
   1a9fc:	bl	111dc <memcpy@plt>
   1aa00:	mov	r3, r0
   1aa04:	mov	r0, r3
   1aa08:	sub	sp, fp, #4
   1aa0c:	pop	{fp, pc}
   1aa10:	push	{fp, lr}
   1aa14:	add	fp, sp, #4
   1aa18:	sub	sp, sp, #16
   1aa1c:	str	r0, [fp, #-16]
   1aa20:	str	r1, [fp, #-20]	; 0xffffffec
   1aa24:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa28:	add	r3, r3, #1
   1aa2c:	mov	r0, r3
   1aa30:	bl	19fc8 <__assert_fail@plt+0x8ad4>
   1aa34:	mov	r3, r0
   1aa38:	str	r3, [fp, #-8]
   1aa3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa40:	ldr	r2, [fp, #-8]
   1aa44:	add	r3, r2, r3
   1aa48:	mov	r2, #0
   1aa4c:	strb	r2, [r3]
   1aa50:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa54:	mov	r2, r3
   1aa58:	ldr	r1, [fp, #-16]
   1aa5c:	ldr	r0, [fp, #-8]
   1aa60:	bl	111dc <memcpy@plt>
   1aa64:	mov	r3, r0
   1aa68:	mov	r0, r3
   1aa6c:	sub	sp, fp, #4
   1aa70:	pop	{fp, pc}
   1aa74:	push	{fp, lr}
   1aa78:	add	fp, sp, #4
   1aa7c:	sub	sp, sp, #8
   1aa80:	str	r0, [fp, #-8]
   1aa84:	ldr	r0, [fp, #-8]
   1aa88:	bl	11368 <strlen@plt>
   1aa8c:	mov	r3, r0
   1aa90:	add	r3, r3, #1
   1aa94:	mov	r1, r3
   1aa98:	ldr	r0, [fp, #-8]
   1aa9c:	bl	1a98c <__assert_fail@plt+0x9498>
   1aaa0:	mov	r3, r0
   1aaa4:	mov	r0, r3
   1aaa8:	sub	sp, fp, #4
   1aaac:	pop	{fp, pc}
   1aab0:	push	{r4, r5, fp, lr}
   1aab4:	add	fp, sp, #12
   1aab8:	ldr	r3, [pc, #32]	; 1aae0 <__assert_fail@plt+0x95ec>
   1aabc:	ldr	r4, [r3]
   1aac0:	ldr	r0, [pc, #28]	; 1aae4 <__assert_fail@plt+0x95f0>
   1aac4:	bl	1135c <gettext@plt>
   1aac8:	mov	r3, r0
   1aacc:	ldr	r2, [pc, #20]	; 1aae8 <__assert_fail@plt+0x95f4>
   1aad0:	mov	r1, #0
   1aad4:	mov	r0, r4
   1aad8:	bl	112d8 <error@plt>
   1aadc:	bl	114d0 <abort@plt>
   1aae0:	andeq	pc, r2, ip, ror #2
   1aae4:	andeq	lr, r1, r8, lsr #9
   1aae8:			; <UNDEFINED> instruction: 0x0001e4bc
   1aaec:	push	{fp}		; (str fp, [sp, #-4]!)
   1aaf0:	add	fp, sp, #0
   1aaf4:	nop			; (mov r0, r0)
   1aaf8:	add	sp, fp, #0
   1aafc:	pop	{fp}		; (ldr fp, [sp], #4)
   1ab00:	bx	lr
   1ab04:	push	{fp, lr}
   1ab08:	add	fp, sp, #4
   1ab0c:	sub	sp, sp, #8
   1ab10:	str	r0, [fp, #-8]
   1ab14:	str	r1, [fp, #-12]
   1ab18:	ldr	r1, [fp, #-12]
   1ab1c:	ldr	r0, [fp, #-8]
   1ab20:	bl	1b7e0 <__assert_fail@plt+0xa2ec>
   1ab24:	mov	r3, r0
   1ab28:	cmp	r3, #0
   1ab2c:	bge	1ab34 <__assert_fail@plt+0x9640>
   1ab30:	bl	1aaec <__assert_fail@plt+0x95f8>
   1ab34:	nop			; (mov r0, r0)
   1ab38:	sub	sp, fp, #4
   1ab3c:	pop	{fp, pc}
   1ab40:	push	{r4, r5, fp, lr}
   1ab44:	add	fp, sp, #12
   1ab48:	sub	sp, sp, #40	; 0x28
   1ab4c:	str	r0, [fp, #-32]	; 0xffffffe0
   1ab50:	str	r1, [fp, #-36]	; 0xffffffdc
   1ab54:	strd	r2, [fp, #-44]	; 0xffffffd4
   1ab58:	sub	r2, fp, #28
   1ab5c:	ldr	r3, [fp, #12]
   1ab60:	str	r3, [sp]
   1ab64:	mov	r3, r2
   1ab68:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1ab6c:	mov	r1, #0
   1ab70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ab74:	bl	1aee0 <__assert_fail@plt+0x99ec>
   1ab78:	str	r0, [fp, #-16]
   1ab7c:	ldr	r3, [fp, #-16]
   1ab80:	cmp	r3, #0
   1ab84:	bne	1abf8 <__assert_fail@plt+0x9704>
   1ab88:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   1ab8c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1ab90:	cmp	r1, r3
   1ab94:	cmpeq	r0, r2
   1ab98:	bcc	1abb0 <__assert_fail@plt+0x96bc>
   1ab9c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1aba0:	ldrd	r0, [fp, #4]
   1aba4:	cmp	r1, r3
   1aba8:	cmpeq	r0, r2
   1abac:	bcs	1ac34 <__assert_fail@plt+0x9740>
   1abb0:	mov	r3, #1
   1abb4:	str	r3, [fp, #-16]
   1abb8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1abbc:	mvn	r0, #-1073741824	; 0xc0000000
   1abc0:	mov	r1, #0
   1abc4:	cmp	r3, r1
   1abc8:	cmpeq	r2, r0
   1abcc:	bls	1abe4 <__assert_fail@plt+0x96f0>
   1abd0:	bl	113bc <__errno_location@plt>
   1abd4:	mov	r2, r0
   1abd8:	mov	r3, #75	; 0x4b
   1abdc:	str	r3, [r2]
   1abe0:	b	1ac34 <__assert_fail@plt+0x9740>
   1abe4:	bl	113bc <__errno_location@plt>
   1abe8:	mov	r2, r0
   1abec:	mov	r3, #34	; 0x22
   1abf0:	str	r3, [r2]
   1abf4:	b	1ac34 <__assert_fail@plt+0x9740>
   1abf8:	ldr	r3, [fp, #-16]
   1abfc:	cmp	r3, #1
   1ac00:	bne	1ac18 <__assert_fail@plt+0x9724>
   1ac04:	bl	113bc <__errno_location@plt>
   1ac08:	mov	r2, r0
   1ac0c:	mov	r3, #75	; 0x4b
   1ac10:	str	r3, [r2]
   1ac14:	b	1ac34 <__assert_fail@plt+0x9740>
   1ac18:	ldr	r3, [fp, #-16]
   1ac1c:	cmp	r3, #3
   1ac20:	bne	1ac34 <__assert_fail@plt+0x9740>
   1ac24:	bl	113bc <__errno_location@plt>
   1ac28:	mov	r2, r0
   1ac2c:	mov	r3, #0
   1ac30:	str	r3, [r2]
   1ac34:	ldr	r3, [fp, #-16]
   1ac38:	cmp	r3, #0
   1ac3c:	beq	1aca4 <__assert_fail@plt+0x97b0>
   1ac40:	ldr	r3, [fp, #20]
   1ac44:	cmp	r3, #0
   1ac48:	beq	1ac54 <__assert_fail@plt+0x9760>
   1ac4c:	ldr	r4, [fp, #20]
   1ac50:	b	1ac58 <__assert_fail@plt+0x9764>
   1ac54:	mov	r4, #1
   1ac58:	bl	113bc <__errno_location@plt>
   1ac5c:	mov	r3, r0
   1ac60:	ldr	r3, [r3]
   1ac64:	cmp	r3, #22
   1ac68:	beq	1ac7c <__assert_fail@plt+0x9788>
   1ac6c:	bl	113bc <__errno_location@plt>
   1ac70:	mov	r3, r0
   1ac74:	ldr	r5, [r3]
   1ac78:	b	1ac80 <__assert_fail@plt+0x978c>
   1ac7c:	mov	r5, #0
   1ac80:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ac84:	bl	19170 <__assert_fail@plt+0x7c7c>
   1ac88:	mov	r3, r0
   1ac8c:	str	r3, [sp]
   1ac90:	ldr	r3, [fp, #16]
   1ac94:	ldr	r2, [pc, #28]	; 1acb8 <__assert_fail@plt+0x97c4>
   1ac98:	mov	r1, r5
   1ac9c:	mov	r0, r4
   1aca0:	bl	112d8 <error@plt>
   1aca4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1aca8:	mov	r0, r2
   1acac:	mov	r1, r3
   1acb0:	sub	sp, fp, #12
   1acb4:	pop	{r4, r5, fp, pc}
   1acb8:	andeq	lr, r1, r0, asr #9
   1acbc:	push	{fp, lr}
   1acc0:	add	fp, sp, #4
   1acc4:	sub	sp, sp, #40	; 0x28
   1acc8:	str	r0, [fp, #-8]
   1accc:	strd	r2, [fp, #-20]	; 0xffffffec
   1acd0:	ldr	r3, [fp, #20]
   1acd4:	str	r3, [sp, #16]
   1acd8:	ldr	r3, [fp, #16]
   1acdc:	str	r3, [sp, #12]
   1ace0:	ldr	r3, [fp, #12]
   1ace4:	str	r3, [sp, #8]
   1ace8:	ldrd	r2, [fp, #4]
   1acec:	strd	r2, [sp]
   1acf0:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1acf4:	mov	r1, #10
   1acf8:	ldr	r0, [fp, #-8]
   1acfc:	bl	1ab40 <__assert_fail@plt+0x964c>
   1ad00:	mov	r2, r0
   1ad04:	mov	r3, r1
   1ad08:	mov	r0, r2
   1ad0c:	mov	r1, r3
   1ad10:	sub	sp, fp, #4
   1ad14:	pop	{fp, pc}
   1ad18:	push	{fp, lr}
   1ad1c:	add	fp, sp, #4
   1ad20:	sub	sp, sp, #16
   1ad24:	str	r0, [fp, #-16]
   1ad28:	str	r1, [fp, #-20]	; 0xffffffec
   1ad2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ad30:	cmp	r3, #0
   1ad34:	bge	1ad70 <__assert_fail@plt+0x987c>
   1ad38:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ad3c:	mov	r0, #0
   1ad40:	bl	1c928 <__assert_fail@plt+0xb434>
   1ad44:	mov	r3, r0
   1ad48:	mov	r0, r3
   1ad4c:	asr	r1, r0, #31
   1ad50:	ldr	r3, [fp, #-16]
   1ad54:	ldrd	r2, [r3]
   1ad58:	cmp	r1, r3
   1ad5c:	cmpeq	r0, r2
   1ad60:	movcc	r3, #1
   1ad64:	movcs	r3, #0
   1ad68:	uxtb	r3, r3
   1ad6c:	b	1adcc <__assert_fail@plt+0x98d8>
   1ad70:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ad74:	cmp	r3, #0
   1ad78:	beq	1adc0 <__assert_fail@plt+0x98cc>
   1ad7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ad80:	mov	r2, r3
   1ad84:	asr	r3, r2, #31
   1ad88:	mvn	r0, #0
   1ad8c:	mvn	r1, #0
   1ad90:	bl	1cb68 <__assert_fail@plt+0xb674>
   1ad94:	mov	r2, r0
   1ad98:	mov	r3, r1
   1ad9c:	mov	r0, r2
   1ada0:	mov	r1, r3
   1ada4:	ldr	r3, [fp, #-16]
   1ada8:	ldrd	r2, [r3]
   1adac:	cmp	r1, r3
   1adb0:	cmpeq	r0, r2
   1adb4:	bcs	1adc0 <__assert_fail@plt+0x98cc>
   1adb8:	mov	r3, #1
   1adbc:	b	1adc4 <__assert_fail@plt+0x98d0>
   1adc0:	mov	r3, #0
   1adc4:	and	r3, r3, #1
   1adc8:	uxtb	r3, r3
   1adcc:	cmp	r3, #0
   1add0:	beq	1ae0c <__assert_fail@plt+0x9918>
   1add4:	ldr	r3, [fp, #-16]
   1add8:	ldrd	r0, [r3]
   1addc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ade0:	mov	r2, r3
   1ade4:	asr	r3, r2, #31
   1ade8:	mul	lr, r2, r1
   1adec:	mul	ip, r0, r3
   1adf0:	add	ip, lr, ip
   1adf4:	umull	r2, r3, r0, r2
   1adf8:	add	r1, ip, r3
   1adfc:	mov	r3, r1
   1ae00:	strd	r2, [fp, #-12]
   1ae04:	mov	r3, #1
   1ae08:	b	1ae40 <__assert_fail@plt+0x994c>
   1ae0c:	ldr	r3, [fp, #-16]
   1ae10:	ldrd	r0, [r3]
   1ae14:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ae18:	mov	r2, r3
   1ae1c:	asr	r3, r2, #31
   1ae20:	mul	lr, r2, r1
   1ae24:	mul	ip, r0, r3
   1ae28:	add	ip, lr, ip
   1ae2c:	umull	r2, r3, r0, r2
   1ae30:	add	r1, ip, r3
   1ae34:	mov	r3, r1
   1ae38:	strd	r2, [fp, #-12]
   1ae3c:	mov	r3, #0
   1ae40:	cmp	r3, #0
   1ae44:	beq	1ae60 <__assert_fail@plt+0x996c>
   1ae48:	ldr	r1, [fp, #-16]
   1ae4c:	mvn	r2, #0
   1ae50:	mvn	r3, #0
   1ae54:	strd	r2, [r1]
   1ae58:	mov	r3, #1
   1ae5c:	b	1ae70 <__assert_fail@plt+0x997c>
   1ae60:	ldrd	r2, [fp, #-12]
   1ae64:	ldr	r1, [fp, #-16]
   1ae68:	strd	r2, [r1]
   1ae6c:	mov	r3, #0
   1ae70:	mov	r0, r3
   1ae74:	sub	sp, fp, #4
   1ae78:	pop	{fp, pc}
   1ae7c:	push	{fp, lr}
   1ae80:	add	fp, sp, #4
   1ae84:	sub	sp, sp, #24
   1ae88:	str	r0, [fp, #-16]
   1ae8c:	str	r1, [fp, #-20]	; 0xffffffec
   1ae90:	str	r2, [fp, #-24]	; 0xffffffe8
   1ae94:	mov	r3, #0
   1ae98:	str	r3, [fp, #-8]
   1ae9c:	b	1aebc <__assert_fail@plt+0x99c8>
   1aea0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1aea4:	ldr	r0, [fp, #-16]
   1aea8:	bl	1ad18 <__assert_fail@plt+0x9824>
   1aeac:	mov	r2, r0
   1aeb0:	ldr	r3, [fp, #-8]
   1aeb4:	orr	r3, r3, r2
   1aeb8:	str	r3, [fp, #-8]
   1aebc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1aec0:	sub	r2, r3, #1
   1aec4:	str	r2, [fp, #-24]	; 0xffffffe8
   1aec8:	cmp	r3, #0
   1aecc:	bne	1aea0 <__assert_fail@plt+0x99ac>
   1aed0:	ldr	r3, [fp, #-8]
   1aed4:	mov	r0, r3
   1aed8:	sub	sp, fp, #4
   1aedc:	pop	{fp, pc}
   1aee0:	push	{fp, lr}
   1aee4:	add	fp, sp, #4
   1aee8:	sub	sp, sp, #56	; 0x38
   1aeec:	str	r0, [fp, #-48]	; 0xffffffd0
   1aef0:	str	r1, [fp, #-52]	; 0xffffffcc
   1aef4:	str	r2, [fp, #-56]	; 0xffffffc8
   1aef8:	str	r3, [fp, #-60]	; 0xffffffc4
   1aefc:	mov	r3, #0
   1af00:	str	r3, [fp, #-8]
   1af04:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1af08:	cmp	r3, #0
   1af0c:	blt	1af1c <__assert_fail@plt+0x9a28>
   1af10:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1af14:	cmp	r3, #36	; 0x24
   1af18:	ble	1af30 <__assert_fail@plt+0x9a3c>
   1af1c:	ldr	r3, [pc, #1520]	; 1b514 <__assert_fail@plt+0xa020>
   1af20:	mov	r2, #85	; 0x55
   1af24:	ldr	r1, [pc, #1516]	; 1b518 <__assert_fail@plt+0xa024>
   1af28:	ldr	r0, [pc, #1516]	; 1b51c <__assert_fail@plt+0xa028>
   1af2c:	bl	114f4 <__assert_fail@plt>
   1af30:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1af34:	cmp	r3, #0
   1af38:	bne	1af44 <__assert_fail@plt+0x9a50>
   1af3c:	sub	r3, fp, #36	; 0x24
   1af40:	b	1af48 <__assert_fail@plt+0x9a54>
   1af44:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1af48:	str	r3, [fp, #-32]	; 0xffffffe0
   1af4c:	bl	113bc <__errno_location@plt>
   1af50:	mov	r2, r0
   1af54:	mov	r3, #0
   1af58:	str	r3, [r2]
   1af5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1af60:	str	r3, [fp, #-12]
   1af64:	ldr	r3, [fp, #-12]
   1af68:	ldrb	r3, [r3]
   1af6c:	strb	r3, [fp, #-13]
   1af70:	b	1af8c <__assert_fail@plt+0x9a98>
   1af74:	ldr	r3, [fp, #-12]
   1af78:	add	r3, r3, #1
   1af7c:	str	r3, [fp, #-12]
   1af80:	ldr	r3, [fp, #-12]
   1af84:	ldrb	r3, [r3]
   1af88:	strb	r3, [fp, #-13]
   1af8c:	bl	11344 <__ctype_b_loc@plt>
   1af90:	mov	r3, r0
   1af94:	ldr	r2, [r3]
   1af98:	ldrb	r3, [fp, #-13]
   1af9c:	lsl	r3, r3, #1
   1afa0:	add	r3, r2, r3
   1afa4:	ldrh	r3, [r3]
   1afa8:	and	r3, r3, #8192	; 0x2000
   1afac:	cmp	r3, #0
   1afb0:	bne	1af74 <__assert_fail@plt+0x9a80>
   1afb4:	ldrb	r3, [fp, #-13]
   1afb8:	cmp	r3, #45	; 0x2d
   1afbc:	bne	1afc8 <__assert_fail@plt+0x9ad4>
   1afc0:	mov	r3, #4
   1afc4:	b	1b508 <__assert_fail@plt+0xa014>
   1afc8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1afcc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1afd0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1afd4:	bl	113f8 <strtoumax@plt>
   1afd8:	mov	r2, r0
   1afdc:	mov	r3, r1
   1afe0:	strd	r2, [fp, #-44]	; 0xffffffd4
   1afe4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1afe8:	ldr	r2, [r3]
   1afec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1aff0:	cmp	r2, r3
   1aff4:	bne	1b054 <__assert_fail@plt+0x9b60>
   1aff8:	ldr	r3, [fp, #4]
   1affc:	cmp	r3, #0
   1b000:	beq	1b04c <__assert_fail@plt+0x9b58>
   1b004:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b008:	ldr	r3, [r3]
   1b00c:	ldrb	r3, [r3]
   1b010:	cmp	r3, #0
   1b014:	beq	1b04c <__assert_fail@plt+0x9b58>
   1b018:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b01c:	ldr	r3, [r3]
   1b020:	ldrb	r3, [r3]
   1b024:	mov	r1, r3
   1b028:	ldr	r0, [fp, #4]
   1b02c:	bl	11380 <strchr@plt>
   1b030:	mov	r3, r0
   1b034:	cmp	r3, #0
   1b038:	beq	1b04c <__assert_fail@plt+0x9b58>
   1b03c:	mov	r2, #1
   1b040:	mov	r3, #0
   1b044:	strd	r2, [fp, #-44]	; 0xffffffd4
   1b048:	b	1b08c <__assert_fail@plt+0x9b98>
   1b04c:	mov	r3, #4
   1b050:	b	1b508 <__assert_fail@plt+0xa014>
   1b054:	bl	113bc <__errno_location@plt>
   1b058:	mov	r3, r0
   1b05c:	ldr	r3, [r3]
   1b060:	cmp	r3, #0
   1b064:	beq	1b08c <__assert_fail@plt+0x9b98>
   1b068:	bl	113bc <__errno_location@plt>
   1b06c:	mov	r3, r0
   1b070:	ldr	r3, [r3]
   1b074:	cmp	r3, #34	; 0x22
   1b078:	beq	1b084 <__assert_fail@plt+0x9b90>
   1b07c:	mov	r3, #4
   1b080:	b	1b508 <__assert_fail@plt+0xa014>
   1b084:	mov	r3, #1
   1b088:	str	r3, [fp, #-8]
   1b08c:	ldr	r3, [fp, #4]
   1b090:	cmp	r3, #0
   1b094:	bne	1b0ac <__assert_fail@plt+0x9bb8>
   1b098:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1b09c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b0a0:	strd	r2, [r1]
   1b0a4:	ldr	r3, [fp, #-8]
   1b0a8:	b	1b508 <__assert_fail@plt+0xa014>
   1b0ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b0b0:	ldr	r3, [r3]
   1b0b4:	ldrb	r3, [r3]
   1b0b8:	cmp	r3, #0
   1b0bc:	beq	1b4f8 <__assert_fail@plt+0xa004>
   1b0c0:	mov	r3, #1024	; 0x400
   1b0c4:	str	r3, [fp, #-20]	; 0xffffffec
   1b0c8:	mov	r3, #1
   1b0cc:	str	r3, [fp, #-24]	; 0xffffffe8
   1b0d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b0d4:	ldr	r3, [r3]
   1b0d8:	ldrb	r3, [r3]
   1b0dc:	mov	r1, r3
   1b0e0:	ldr	r0, [fp, #4]
   1b0e4:	bl	11380 <strchr@plt>
   1b0e8:	mov	r3, r0
   1b0ec:	cmp	r3, #0
   1b0f0:	bne	1b10c <__assert_fail@plt+0x9c18>
   1b0f4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1b0f8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b0fc:	strd	r2, [r1]
   1b100:	ldr	r3, [fp, #-8]
   1b104:	orr	r3, r3, #2
   1b108:	b	1b508 <__assert_fail@plt+0xa014>
   1b10c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b110:	ldr	r3, [r3]
   1b114:	ldrb	r3, [r3]
   1b118:	sub	r3, r3, #69	; 0x45
   1b11c:	cmp	r3, #47	; 0x2f
   1b120:	ldrls	pc, [pc, r3, lsl #2]
   1b124:	b	1b270 <__assert_fail@plt+0x9d7c>
   1b128:	andeq	fp, r1, r8, ror #3
   1b12c:	andeq	fp, r1, r0, ror r2
   1b130:	andeq	fp, r1, r8, ror #3
   1b134:	andeq	fp, r1, r0, ror r2
   1b138:	andeq	fp, r1, r0, ror r2
   1b13c:	andeq	fp, r1, r0, ror r2
   1b140:	andeq	fp, r1, r8, ror #3
   1b144:	andeq	fp, r1, r0, ror r2
   1b148:	andeq	fp, r1, r8, ror #3
   1b14c:	andeq	fp, r1, r0, ror r2
   1b150:	andeq	fp, r1, r0, ror r2
   1b154:	andeq	fp, r1, r8, ror #3
   1b158:	andeq	fp, r1, r0, ror r2
   1b15c:	andeq	fp, r1, r0, ror r2
   1b160:	andeq	fp, r1, r0, ror r2
   1b164:	andeq	fp, r1, r8, ror #3
   1b168:	andeq	fp, r1, r0, ror r2
   1b16c:	andeq	fp, r1, r0, ror r2
   1b170:	andeq	fp, r1, r0, ror r2
   1b174:	andeq	fp, r1, r0, ror r2
   1b178:	andeq	fp, r1, r8, ror #3
   1b17c:	andeq	fp, r1, r8, ror #3
   1b180:	andeq	fp, r1, r0, ror r2
   1b184:	andeq	fp, r1, r0, ror r2
   1b188:	andeq	fp, r1, r0, ror r2
   1b18c:	andeq	fp, r1, r0, ror r2
   1b190:	andeq	fp, r1, r0, ror r2
   1b194:	andeq	fp, r1, r0, ror r2
   1b198:	andeq	fp, r1, r0, ror r2
   1b19c:	andeq	fp, r1, r0, ror r2
   1b1a0:	andeq	fp, r1, r0, ror r2
   1b1a4:	andeq	fp, r1, r0, ror r2
   1b1a8:	andeq	fp, r1, r0, ror r2
   1b1ac:	andeq	fp, r1, r0, ror r2
   1b1b0:	andeq	fp, r1, r8, ror #3
   1b1b4:	andeq	fp, r1, r0, ror r2
   1b1b8:	andeq	fp, r1, r0, ror r2
   1b1bc:	andeq	fp, r1, r0, ror r2
   1b1c0:	andeq	fp, r1, r8, ror #3
   1b1c4:	andeq	fp, r1, r0, ror r2
   1b1c8:	andeq	fp, r1, r8, ror #3
   1b1cc:	andeq	fp, r1, r0, ror r2
   1b1d0:	andeq	fp, r1, r0, ror r2
   1b1d4:	andeq	fp, r1, r0, ror r2
   1b1d8:	andeq	fp, r1, r0, ror r2
   1b1dc:	andeq	fp, r1, r0, ror r2
   1b1e0:	andeq	fp, r1, r0, ror r2
   1b1e4:	andeq	fp, r1, r8, ror #3
   1b1e8:	mov	r1, #48	; 0x30
   1b1ec:	ldr	r0, [fp, #4]
   1b1f0:	bl	11380 <strchr@plt>
   1b1f4:	mov	r3, r0
   1b1f8:	cmp	r3, #0
   1b1fc:	beq	1b270 <__assert_fail@plt+0x9d7c>
   1b200:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b204:	ldr	r3, [r3]
   1b208:	add	r3, r3, #1
   1b20c:	ldrb	r3, [r3]
   1b210:	cmp	r3, #68	; 0x44
   1b214:	beq	1b254 <__assert_fail@plt+0x9d60>
   1b218:	cmp	r3, #105	; 0x69
   1b21c:	beq	1b22c <__assert_fail@plt+0x9d38>
   1b220:	cmp	r3, #66	; 0x42
   1b224:	beq	1b254 <__assert_fail@plt+0x9d60>
   1b228:	b	1b270 <__assert_fail@plt+0x9d7c>
   1b22c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b230:	ldr	r3, [r3]
   1b234:	add	r3, r3, #2
   1b238:	ldrb	r3, [r3]
   1b23c:	cmp	r3, #66	; 0x42
   1b240:	bne	1b26c <__assert_fail@plt+0x9d78>
   1b244:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b248:	add	r3, r3, #2
   1b24c:	str	r3, [fp, #-24]	; 0xffffffe8
   1b250:	b	1b26c <__assert_fail@plt+0x9d78>
   1b254:	mov	r3, #1000	; 0x3e8
   1b258:	str	r3, [fp, #-20]	; 0xffffffec
   1b25c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b260:	add	r3, r3, #1
   1b264:	str	r3, [fp, #-24]	; 0xffffffe8
   1b268:	b	1b270 <__assert_fail@plt+0x9d7c>
   1b26c:	nop			; (mov r0, r0)
   1b270:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b274:	ldr	r3, [r3]
   1b278:	ldrb	r3, [r3]
   1b27c:	sub	r3, r3, #66	; 0x42
   1b280:	cmp	r3, #53	; 0x35
   1b284:	ldrls	pc, [pc, r3, lsl #2]
   1b288:	b	1b498 <__assert_fail@plt+0x9fa4>
   1b28c:	andeq	fp, r1, ip, ror r3
   1b290:	muleq	r1, r8, r4
   1b294:	muleq	r1, r8, r4
   1b298:	andeq	fp, r1, r0, lsr #7
   1b29c:	muleq	r1, r8, r4
   1b2a0:			; <UNDEFINED> instruction: 0x0001b3bc
   1b2a4:	muleq	r1, r8, r4
   1b2a8:	muleq	r1, r8, r4
   1b2ac:	muleq	r1, r8, r4
   1b2b0:	ldrdeq	fp, [r1], -r8
   1b2b4:	muleq	r1, r8, r4
   1b2b8:	strdeq	fp, [r1], -r4
   1b2bc:	muleq	r1, r8, r4
   1b2c0:	muleq	r1, r8, r4
   1b2c4:	andeq	fp, r1, r0, lsl r4
   1b2c8:	muleq	r1, r8, r4
   1b2cc:	muleq	r1, r8, r4
   1b2d0:	muleq	r1, r8, r4
   1b2d4:	andeq	fp, r1, ip, lsr #8
   1b2d8:	muleq	r1, r8, r4
   1b2dc:	muleq	r1, r8, r4
   1b2e0:	muleq	r1, r8, r4
   1b2e4:	muleq	r1, r8, r4
   1b2e8:	andeq	fp, r1, r0, ror #8
   1b2ec:	andeq	fp, r1, ip, ror r4
   1b2f0:	muleq	r1, r8, r4
   1b2f4:	muleq	r1, r8, r4
   1b2f8:	muleq	r1, r8, r4
   1b2fc:	muleq	r1, r8, r4
   1b300:	muleq	r1, r8, r4
   1b304:	muleq	r1, r8, r4
   1b308:	muleq	r1, r8, r4
   1b30c:	andeq	fp, r1, r4, ror #6
   1b310:	muleq	r1, r4, r3
   1b314:	muleq	r1, r8, r4
   1b318:	muleq	r1, r8, r4
   1b31c:	muleq	r1, r8, r4
   1b320:			; <UNDEFINED> instruction: 0x0001b3bc
   1b324:	muleq	r1, r8, r4
   1b328:	muleq	r1, r8, r4
   1b32c:	muleq	r1, r8, r4
   1b330:	ldrdeq	fp, [r1], -r8
   1b334:	muleq	r1, r8, r4
   1b338:	strdeq	fp, [r1], -r4
   1b33c:	muleq	r1, r8, r4
   1b340:	muleq	r1, r8, r4
   1b344:	muleq	r1, r8, r4
   1b348:	muleq	r1, r8, r4
   1b34c:	muleq	r1, r8, r4
   1b350:	muleq	r1, r8, r4
   1b354:	andeq	fp, r1, ip, lsr #8
   1b358:	muleq	r1, r8, r4
   1b35c:	muleq	r1, r8, r4
   1b360:	andeq	fp, r1, r8, asr #8
   1b364:	sub	r3, fp, #44	; 0x2c
   1b368:	mov	r1, #512	; 0x200
   1b36c:	mov	r0, r3
   1b370:	bl	1ad18 <__assert_fail@plt+0x9824>
   1b374:	str	r0, [fp, #-28]	; 0xffffffe4
   1b378:	b	1b4b0 <__assert_fail@plt+0x9fbc>
   1b37c:	sub	r3, fp, #44	; 0x2c
   1b380:	mov	r1, #1024	; 0x400
   1b384:	mov	r0, r3
   1b388:	bl	1ad18 <__assert_fail@plt+0x9824>
   1b38c:	str	r0, [fp, #-28]	; 0xffffffe4
   1b390:	b	1b4b0 <__assert_fail@plt+0x9fbc>
   1b394:	mov	r3, #0
   1b398:	str	r3, [fp, #-28]	; 0xffffffe4
   1b39c:	b	1b4b0 <__assert_fail@plt+0x9fbc>
   1b3a0:	sub	r3, fp, #44	; 0x2c
   1b3a4:	mov	r2, #6
   1b3a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b3ac:	mov	r0, r3
   1b3b0:	bl	1ae7c <__assert_fail@plt+0x9988>
   1b3b4:	str	r0, [fp, #-28]	; 0xffffffe4
   1b3b8:	b	1b4b0 <__assert_fail@plt+0x9fbc>
   1b3bc:	sub	r3, fp, #44	; 0x2c
   1b3c0:	mov	r2, #3
   1b3c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b3c8:	mov	r0, r3
   1b3cc:	bl	1ae7c <__assert_fail@plt+0x9988>
   1b3d0:	str	r0, [fp, #-28]	; 0xffffffe4
   1b3d4:	b	1b4b0 <__assert_fail@plt+0x9fbc>
   1b3d8:	sub	r3, fp, #44	; 0x2c
   1b3dc:	mov	r2, #1
   1b3e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b3e4:	mov	r0, r3
   1b3e8:	bl	1ae7c <__assert_fail@plt+0x9988>
   1b3ec:	str	r0, [fp, #-28]	; 0xffffffe4
   1b3f0:	b	1b4b0 <__assert_fail@plt+0x9fbc>
   1b3f4:	sub	r3, fp, #44	; 0x2c
   1b3f8:	mov	r2, #2
   1b3fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b400:	mov	r0, r3
   1b404:	bl	1ae7c <__assert_fail@plt+0x9988>
   1b408:	str	r0, [fp, #-28]	; 0xffffffe4
   1b40c:	b	1b4b0 <__assert_fail@plt+0x9fbc>
   1b410:	sub	r3, fp, #44	; 0x2c
   1b414:	mov	r2, #5
   1b418:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b41c:	mov	r0, r3
   1b420:	bl	1ae7c <__assert_fail@plt+0x9988>
   1b424:	str	r0, [fp, #-28]	; 0xffffffe4
   1b428:	b	1b4b0 <__assert_fail@plt+0x9fbc>
   1b42c:	sub	r3, fp, #44	; 0x2c
   1b430:	mov	r2, #4
   1b434:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b438:	mov	r0, r3
   1b43c:	bl	1ae7c <__assert_fail@plt+0x9988>
   1b440:	str	r0, [fp, #-28]	; 0xffffffe4
   1b444:	b	1b4b0 <__assert_fail@plt+0x9fbc>
   1b448:	sub	r3, fp, #44	; 0x2c
   1b44c:	mov	r1, #2
   1b450:	mov	r0, r3
   1b454:	bl	1ad18 <__assert_fail@plt+0x9824>
   1b458:	str	r0, [fp, #-28]	; 0xffffffe4
   1b45c:	b	1b4b0 <__assert_fail@plt+0x9fbc>
   1b460:	sub	r3, fp, #44	; 0x2c
   1b464:	mov	r2, #8
   1b468:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b46c:	mov	r0, r3
   1b470:	bl	1ae7c <__assert_fail@plt+0x9988>
   1b474:	str	r0, [fp, #-28]	; 0xffffffe4
   1b478:	b	1b4b0 <__assert_fail@plt+0x9fbc>
   1b47c:	sub	r3, fp, #44	; 0x2c
   1b480:	mov	r2, #7
   1b484:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b488:	mov	r0, r3
   1b48c:	bl	1ae7c <__assert_fail@plt+0x9988>
   1b490:	str	r0, [fp, #-28]	; 0xffffffe4
   1b494:	b	1b4b0 <__assert_fail@plt+0x9fbc>
   1b498:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1b49c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b4a0:	strd	r2, [r1]
   1b4a4:	ldr	r3, [fp, #-8]
   1b4a8:	orr	r3, r3, #2
   1b4ac:	b	1b508 <__assert_fail@plt+0xa014>
   1b4b0:	ldr	r2, [fp, #-8]
   1b4b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b4b8:	orr	r3, r2, r3
   1b4bc:	str	r3, [fp, #-8]
   1b4c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b4c4:	ldr	r2, [r3]
   1b4c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b4cc:	add	r2, r2, r3
   1b4d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b4d4:	str	r2, [r3]
   1b4d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b4dc:	ldr	r3, [r3]
   1b4e0:	ldrb	r3, [r3]
   1b4e4:	cmp	r3, #0
   1b4e8:	beq	1b4f8 <__assert_fail@plt+0xa004>
   1b4ec:	ldr	r3, [fp, #-8]
   1b4f0:	orr	r3, r3, #2
   1b4f4:	str	r3, [fp, #-8]
   1b4f8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1b4fc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b500:	strd	r2, [r1]
   1b504:	ldr	r3, [fp, #-8]
   1b508:	mov	r0, r3
   1b50c:	sub	sp, fp, #4
   1b510:	pop	{fp, pc}
   1b514:	andeq	lr, r1, r0, lsl #10
   1b518:	andeq	lr, r1, r8, asr #9
   1b51c:	ldrdeq	lr, [r1], -r8
   1b520:	push	{r4, r5, fp, lr}
   1b524:	add	fp, sp, #12
   1b528:	sub	sp, sp, #16
   1b52c:	str	r0, [fp, #-24]	; 0xffffffe8
   1b530:	str	r1, [fp, #-28]	; 0xffffffe4
   1b534:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b538:	cmp	r3, #0
   1b53c:	beq	1b54c <__assert_fail@plt+0xa058>
   1b540:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b544:	cmp	r3, #0
   1b548:	bne	1b55c <__assert_fail@plt+0xa068>
   1b54c:	mov	r3, #1
   1b550:	str	r3, [fp, #-28]	; 0xffffffe4
   1b554:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b558:	str	r3, [fp, #-24]	; 0xffffffe8
   1b55c:	mov	r1, #0
   1b560:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b564:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b568:	umull	r2, r3, r2, r3
   1b56c:	mov	r4, r3
   1b570:	mov	r5, #0
   1b574:	cmp	r4, #0
   1b578:	beq	1b580 <__assert_fail@plt+0xa08c>
   1b57c:	mov	r1, #1
   1b580:	cmp	r2, #0
   1b584:	bge	1b58c <__assert_fail@plt+0xa098>
   1b588:	mov	r1, #1
   1b58c:	mov	r3, r2
   1b590:	str	r3, [fp, #-20]	; 0xffffffec
   1b594:	mov	r3, r1
   1b598:	and	r3, r3, #1
   1b59c:	uxtb	r3, r3
   1b5a0:	cmp	r3, #0
   1b5a4:	beq	1b5c0 <__assert_fail@plt+0xa0cc>
   1b5a8:	bl	113bc <__errno_location@plt>
   1b5ac:	mov	r2, r0
   1b5b0:	mov	r3, #12
   1b5b4:	str	r3, [r2]
   1b5b8:	mov	r3, #0
   1b5bc:	b	1b5d8 <__assert_fail@plt+0xa0e4>
   1b5c0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b5c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b5c8:	bl	1114c <calloc@plt>
   1b5cc:	mov	r3, r0
   1b5d0:	str	r3, [fp, #-16]
   1b5d4:	ldr	r3, [fp, #-16]
   1b5d8:	mov	r0, r3
   1b5dc:	sub	sp, fp, #12
   1b5e0:	pop	{r4, r5, fp, pc}
   1b5e4:	push	{r4, r5, fp, lr}
   1b5e8:	add	fp, sp, #12
   1b5ec:	sub	sp, sp, #16
   1b5f0:	str	r0, [fp, #-24]	; 0xffffffe8
   1b5f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b5f8:	cmp	r3, #0
   1b5fc:	bne	1b608 <__assert_fail@plt+0xa114>
   1b600:	mov	r3, #1
   1b604:	str	r3, [fp, #-24]	; 0xffffffe8
   1b608:	mov	r1, #0
   1b60c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b610:	mov	r2, r3
   1b614:	mov	r3, #0
   1b618:	mov	r4, r3
   1b61c:	mov	r5, #0
   1b620:	cmp	r4, #0
   1b624:	beq	1b62c <__assert_fail@plt+0xa138>
   1b628:	mov	r1, #1
   1b62c:	cmp	r2, #0
   1b630:	bge	1b638 <__assert_fail@plt+0xa144>
   1b634:	mov	r1, #1
   1b638:	mov	r3, r2
   1b63c:	str	r3, [fp, #-20]	; 0xffffffec
   1b640:	mov	r3, r1
   1b644:	and	r3, r3, #1
   1b648:	uxtb	r3, r3
   1b64c:	cmp	r3, #0
   1b650:	beq	1b66c <__assert_fail@plt+0xa178>
   1b654:	bl	113bc <__errno_location@plt>
   1b658:	mov	r2, r0
   1b65c:	mov	r3, #12
   1b660:	str	r3, [r2]
   1b664:	mov	r3, #0
   1b668:	b	1b680 <__assert_fail@plt+0xa18c>
   1b66c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b670:	bl	112fc <malloc@plt>
   1b674:	mov	r3, r0
   1b678:	str	r3, [fp, #-16]
   1b67c:	ldr	r3, [fp, #-16]
   1b680:	mov	r0, r3
   1b684:	sub	sp, fp, #12
   1b688:	pop	{r4, r5, fp, pc}
   1b68c:	push	{r4, r5, fp, lr}
   1b690:	add	fp, sp, #12
   1b694:	sub	sp, sp, #16
   1b698:	str	r0, [fp, #-24]	; 0xffffffe8
   1b69c:	str	r1, [fp, #-28]	; 0xffffffe4
   1b6a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b6a4:	cmp	r3, #0
   1b6a8:	bne	1b6bc <__assert_fail@plt+0xa1c8>
   1b6ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b6b0:	bl	1b5e4 <__assert_fail@plt+0xa0f0>
   1b6b4:	mov	r3, r0
   1b6b8:	b	1b750 <__assert_fail@plt+0xa25c>
   1b6bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b6c0:	cmp	r3, #0
   1b6c4:	bne	1b6d8 <__assert_fail@plt+0xa1e4>
   1b6c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b6cc:	bl	1677c <__assert_fail@plt+0x5288>
   1b6d0:	mov	r3, #0
   1b6d4:	b	1b750 <__assert_fail@plt+0xa25c>
   1b6d8:	mov	r1, #0
   1b6dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b6e0:	mov	r2, r3
   1b6e4:	mov	r3, #0
   1b6e8:	mov	r4, r3
   1b6ec:	mov	r5, #0
   1b6f0:	cmp	r4, #0
   1b6f4:	beq	1b6fc <__assert_fail@plt+0xa208>
   1b6f8:	mov	r1, #1
   1b6fc:	cmp	r2, #0
   1b700:	bge	1b708 <__assert_fail@plt+0xa214>
   1b704:	mov	r1, #1
   1b708:	mov	r3, r2
   1b70c:	str	r3, [fp, #-20]	; 0xffffffec
   1b710:	mov	r3, r1
   1b714:	and	r3, r3, #1
   1b718:	uxtb	r3, r3
   1b71c:	cmp	r3, #0
   1b720:	beq	1b73c <__assert_fail@plt+0xa248>
   1b724:	bl	113bc <__errno_location@plt>
   1b728:	mov	r2, r0
   1b72c:	mov	r3, #12
   1b730:	str	r3, [r2]
   1b734:	mov	r3, #0
   1b738:	b	1b750 <__assert_fail@plt+0xa25c>
   1b73c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b740:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b744:	bl	11230 <realloc@plt>
   1b748:	str	r0, [fp, #-16]
   1b74c:	ldr	r3, [fp, #-16]
   1b750:	mov	r0, r3
   1b754:	sub	sp, fp, #12
   1b758:	pop	{r4, r5, fp, pc}
   1b75c:	push	{fp, lr}
   1b760:	add	fp, sp, #4
   1b764:	sub	sp, sp, #8
   1b768:	str	r0, [fp, #-8]
   1b76c:	ldr	r0, [fp, #-8]
   1b770:	bl	1677c <__assert_fail@plt+0x5288>
   1b774:	nop			; (mov r0, r0)
   1b778:	sub	sp, fp, #4
   1b77c:	pop	{fp, pc}
   1b780:	push	{fp, lr}
   1b784:	add	fp, sp, #4
   1b788:	sub	sp, sp, #8
   1b78c:	str	r0, [fp, #-8]
   1b790:	str	r1, [fp, #-12]
   1b794:	ldr	r3, [fp, #-8]
   1b798:	ldr	r2, [fp, #-12]
   1b79c:	mov	r1, r2
   1b7a0:	mov	r0, r3
   1b7a4:	bl	114ac <aligned_alloc@plt>
   1b7a8:	mov	r3, r0
   1b7ac:	mov	r0, r3
   1b7b0:	sub	sp, fp, #4
   1b7b4:	pop	{fp, pc}
   1b7b8:	push	{fp}		; (str fp, [sp, #-4]!)
   1b7bc:	add	fp, sp, #0
   1b7c0:	sub	sp, sp, #12
   1b7c4:	str	r0, [fp, #-8]
   1b7c8:	str	r1, [fp, #-12]
   1b7cc:	mov	r3, #0
   1b7d0:	mov	r0, r3
   1b7d4:	add	sp, fp, #0
   1b7d8:	pop	{fp}		; (ldr fp, [sp], #4)
   1b7dc:	bx	lr
   1b7e0:	push	{fp, lr}
   1b7e4:	add	fp, sp, #4
   1b7e8:	sub	sp, sp, #8
   1b7ec:	str	r0, [fp, #-8]
   1b7f0:	str	r1, [fp, #-12]
   1b7f4:	ldr	r1, [fp, #-12]
   1b7f8:	ldr	r0, [fp, #-8]
   1b7fc:	bl	1b7b8 <__assert_fail@plt+0xa2c4>
   1b800:	mov	r3, r0
   1b804:	mov	r0, r3
   1b808:	sub	sp, fp, #4
   1b80c:	pop	{fp, pc}
   1b810:	push	{r4, r5, fp, lr}
   1b814:	add	fp, sp, #12
   1b818:	sub	sp, sp, #16
   1b81c:	str	r0, [fp, #-24]	; 0xffffffe8
   1b820:	str	r1, [fp, #-28]	; 0xffffffe4
   1b824:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1b828:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1b82c:	cmp	r5, r4
   1b830:	bne	1b83c <__assert_fail@plt+0xa348>
   1b834:	mov	r3, #0
   1b838:	b	1b89c <__assert_fail@plt+0xa3a8>
   1b83c:	ldrb	r3, [r5]
   1b840:	mov	r0, r3
   1b844:	bl	1c118 <__assert_fail@plt+0xac24>
   1b848:	mov	r3, r0
   1b84c:	strb	r3, [fp, #-13]
   1b850:	ldrb	r3, [r4]
   1b854:	mov	r0, r3
   1b858:	bl	1c118 <__assert_fail@plt+0xac24>
   1b85c:	mov	r3, r0
   1b860:	strb	r3, [fp, #-14]
   1b864:	ldrb	r3, [fp, #-13]
   1b868:	cmp	r3, #0
   1b86c:	beq	1b88c <__assert_fail@plt+0xa398>
   1b870:	add	r5, r5, #1
   1b874:	add	r4, r4, #1
   1b878:	ldrb	r2, [fp, #-13]
   1b87c:	ldrb	r3, [fp, #-14]
   1b880:	cmp	r2, r3
   1b884:	beq	1b83c <__assert_fail@plt+0xa348>
   1b888:	b	1b890 <__assert_fail@plt+0xa39c>
   1b88c:	nop			; (mov r0, r0)
   1b890:	ldrb	r2, [fp, #-13]
   1b894:	ldrb	r3, [fp, #-14]
   1b898:	sub	r3, r2, r3
   1b89c:	mov	r0, r3
   1b8a0:	sub	sp, fp, #12
   1b8a4:	pop	{r4, r5, fp, pc}
   1b8a8:	push	{fp, lr}
   1b8ac:	add	fp, sp, #4
   1b8b0:	sub	sp, sp, #16
   1b8b4:	str	r0, [fp, #-16]
   1b8b8:	ldr	r0, [fp, #-16]
   1b8bc:	bl	112b4 <__fpending@plt>
   1b8c0:	mov	r3, r0
   1b8c4:	cmp	r3, #0
   1b8c8:	movne	r3, #1
   1b8cc:	moveq	r3, #0
   1b8d0:	strb	r3, [fp, #-5]
   1b8d4:	ldr	r0, [fp, #-16]
   1b8d8:	bl	112c0 <ferror_unlocked@plt>
   1b8dc:	mov	r3, r0
   1b8e0:	cmp	r3, #0
   1b8e4:	movne	r3, #1
   1b8e8:	moveq	r3, #0
   1b8ec:	strb	r3, [fp, #-6]
   1b8f0:	ldr	r0, [fp, #-16]
   1b8f4:	bl	164c4 <__assert_fail@plt+0x4fd0>
   1b8f8:	mov	r3, r0
   1b8fc:	cmp	r3, #0
   1b900:	movne	r3, #1
   1b904:	moveq	r3, #0
   1b908:	strb	r3, [fp, #-7]
   1b90c:	ldrb	r3, [fp, #-6]
   1b910:	cmp	r3, #0
   1b914:	bne	1b944 <__assert_fail@plt+0xa450>
   1b918:	ldrb	r3, [fp, #-7]
   1b91c:	cmp	r3, #0
   1b920:	beq	1b970 <__assert_fail@plt+0xa47c>
   1b924:	ldrb	r3, [fp, #-5]
   1b928:	cmp	r3, #0
   1b92c:	bne	1b944 <__assert_fail@plt+0xa450>
   1b930:	bl	113bc <__errno_location@plt>
   1b934:	mov	r3, r0
   1b938:	ldr	r3, [r3]
   1b93c:	cmp	r3, #9
   1b940:	beq	1b970 <__assert_fail@plt+0xa47c>
   1b944:	ldrb	r3, [fp, #-7]
   1b948:	eor	r3, r3, #1
   1b94c:	uxtb	r3, r3
   1b950:	cmp	r3, #0
   1b954:	beq	1b968 <__assert_fail@plt+0xa474>
   1b958:	bl	113bc <__errno_location@plt>
   1b95c:	mov	r2, r0
   1b960:	mov	r3, #0
   1b964:	str	r3, [r2]
   1b968:	mvn	r3, #0
   1b96c:	b	1b974 <__assert_fail@plt+0xa480>
   1b970:	mov	r3, #0
   1b974:	mov	r0, r3
   1b978:	sub	sp, fp, #4
   1b97c:	pop	{fp, pc}
   1b980:	push	{fp, lr}
   1b984:	add	fp, sp, #4
   1b988:	bl	113bc <__errno_location@plt>
   1b98c:	mov	r2, r0
   1b990:	mov	r3, #12
   1b994:	str	r3, [r2]
   1b998:	mov	r3, #0
   1b99c:	mov	r0, r3
   1b9a0:	pop	{fp, pc}
   1b9a4:	push	{fp, lr}
   1b9a8:	add	fp, sp, #4
   1b9ac:	sub	sp, sp, #8
   1b9b0:	str	r0, [fp, #-8]
   1b9b4:	ldr	r3, [fp, #-8]
   1b9b8:	mov	r0, r3
   1b9bc:	bl	1b5e4 <__assert_fail@plt+0xa0f0>
   1b9c0:	mov	r3, r0
   1b9c4:	mov	r0, r3
   1b9c8:	sub	sp, fp, #4
   1b9cc:	pop	{fp, pc}
   1b9d0:	push	{fp, lr}
   1b9d4:	add	fp, sp, #4
   1b9d8:	sub	sp, sp, #8
   1b9dc:	str	r0, [fp, #-8]
   1b9e0:	str	r1, [fp, #-12]
   1b9e4:	ldr	r3, [fp, #-12]
   1b9e8:	cmp	r3, #0
   1b9ec:	moveq	r3, #1
   1b9f0:	movne	r3, #0
   1b9f4:	uxtb	r3, r3
   1b9f8:	mov	r2, r3
   1b9fc:	ldr	r3, [fp, #-12]
   1ba00:	orr	r3, r2, r3
   1ba04:	mov	r1, r3
   1ba08:	ldr	r0, [fp, #-8]
   1ba0c:	bl	1b68c <__assert_fail@plt+0xa198>
   1ba10:	mov	r3, r0
   1ba14:	mov	r0, r3
   1ba18:	sub	sp, fp, #4
   1ba1c:	pop	{fp, pc}
   1ba20:	push	{fp, lr}
   1ba24:	add	fp, sp, #4
   1ba28:	sub	sp, sp, #8
   1ba2c:	str	r0, [fp, #-8]
   1ba30:	str	r1, [fp, #-12]
   1ba34:	ldr	r3, [fp, #-8]
   1ba38:	ldr	r2, [fp, #-12]
   1ba3c:	mov	r1, r2
   1ba40:	mov	r0, r3
   1ba44:	bl	1b520 <__assert_fail@plt+0xa02c>
   1ba48:	mov	r3, r0
   1ba4c:	mov	r0, r3
   1ba50:	sub	sp, fp, #4
   1ba54:	pop	{fp, pc}
   1ba58:	push	{fp, lr}
   1ba5c:	add	fp, sp, #4
   1ba60:	sub	sp, sp, #16
   1ba64:	str	r0, [fp, #-8]
   1ba68:	str	r1, [fp, #-12]
   1ba6c:	str	r2, [fp, #-16]
   1ba70:	ldr	r3, [fp, #-12]
   1ba74:	cmp	r3, #0
   1ba78:	beq	1ba88 <__assert_fail@plt+0xa594>
   1ba7c:	ldr	r3, [fp, #-16]
   1ba80:	cmp	r3, #0
   1ba84:	bne	1ba98 <__assert_fail@plt+0xa5a4>
   1ba88:	mov	r3, #1
   1ba8c:	str	r3, [fp, #-16]
   1ba90:	ldr	r3, [fp, #-16]
   1ba94:	str	r3, [fp, #-12]
   1ba98:	ldr	r3, [fp, #-12]
   1ba9c:	ldr	r2, [fp, #-16]
   1baa0:	mov	r1, r3
   1baa4:	ldr	r0, [fp, #-8]
   1baa8:	bl	1bbc4 <__assert_fail@plt+0xa6d0>
   1baac:	mov	r3, r0
   1bab0:	mov	r0, r3
   1bab4:	sub	sp, fp, #4
   1bab8:	pop	{fp, pc}
   1babc:	push	{fp, lr}
   1bac0:	add	fp, sp, #4
   1bac4:	sub	sp, sp, #8
   1bac8:	mov	r0, #14
   1bacc:	bl	1147c <nl_langinfo@plt>
   1bad0:	str	r0, [fp, #-8]
   1bad4:	ldr	r3, [fp, #-8]
   1bad8:	cmp	r3, #0
   1badc:	bne	1bae8 <__assert_fail@plt+0xa5f4>
   1bae0:	ldr	r3, [pc, #40]	; 1bb10 <__assert_fail@plt+0xa61c>
   1bae4:	str	r3, [fp, #-8]
   1bae8:	ldr	r3, [fp, #-8]
   1baec:	ldrb	r3, [r3]
   1baf0:	cmp	r3, #0
   1baf4:	bne	1bb00 <__assert_fail@plt+0xa60c>
   1baf8:	ldr	r3, [pc, #20]	; 1bb14 <__assert_fail@plt+0xa620>
   1bafc:	str	r3, [fp, #-8]
   1bb00:	ldr	r3, [fp, #-8]
   1bb04:	mov	r0, r3
   1bb08:	sub	sp, fp, #4
   1bb0c:	pop	{fp, pc}
   1bb10:	andeq	lr, r1, ip, lsl #10
   1bb14:	andeq	lr, r1, r0, lsl r5
   1bb18:	push	{fp, lr}
   1bb1c:	add	fp, sp, #4
   1bb20:	sub	sp, sp, #32
   1bb24:	str	r0, [fp, #-24]	; 0xffffffe8
   1bb28:	str	r1, [fp, #-28]	; 0xffffffe4
   1bb2c:	str	r2, [fp, #-32]	; 0xffffffe0
   1bb30:	str	r3, [fp, #-36]	; 0xffffffdc
   1bb34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bb38:	cmp	r3, #0
   1bb3c:	bne	1bb48 <__assert_fail@plt+0xa654>
   1bb40:	sub	r3, fp, #16
   1bb44:	str	r3, [fp, #-24]	; 0xffffffe8
   1bb48:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bb4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1bb50:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1bb54:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1bb58:	bl	112cc <mbrtowc@plt>
   1bb5c:	str	r0, [fp, #-8]
   1bb60:	ldr	r3, [fp, #-8]
   1bb64:	cmn	r3, #3
   1bb68:	bls	1bbb4 <__assert_fail@plt+0xa6c0>
   1bb6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bb70:	cmp	r3, #0
   1bb74:	beq	1bbb4 <__assert_fail@plt+0xa6c0>
   1bb78:	mov	r0, #0
   1bb7c:	bl	1c518 <__assert_fail@plt+0xb024>
   1bb80:	mov	r3, r0
   1bb84:	eor	r3, r3, #1
   1bb88:	uxtb	r3, r3
   1bb8c:	cmp	r3, #0
   1bb90:	beq	1bbb4 <__assert_fail@plt+0xa6c0>
   1bb94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bb98:	ldrb	r3, [r3]
   1bb9c:	strb	r3, [fp, #-9]
   1bba0:	ldrb	r2, [fp, #-9]
   1bba4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bba8:	str	r2, [r3]
   1bbac:	mov	r3, #1
   1bbb0:	b	1bbb8 <__assert_fail@plt+0xa6c4>
   1bbb4:	ldr	r3, [fp, #-8]
   1bbb8:	mov	r0, r3
   1bbbc:	sub	sp, fp, #4
   1bbc0:	pop	{fp, pc}
   1bbc4:	push	{fp, lr}
   1bbc8:	add	fp, sp, #4
   1bbcc:	sub	sp, sp, #24
   1bbd0:	str	r0, [fp, #-16]
   1bbd4:	str	r1, [fp, #-20]	; 0xffffffec
   1bbd8:	str	r2, [fp, #-24]	; 0xffffffe8
   1bbdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1bbe0:	cmp	r3, #0
   1bbe4:	beq	1bc20 <__assert_fail@plt+0xa72c>
   1bbe8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bbec:	mvn	r0, #0
   1bbf0:	bl	1c71c <__assert_fail@plt+0xb228>
   1bbf4:	mov	r3, r0
   1bbf8:	mov	r2, r3
   1bbfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc00:	cmp	r2, r3
   1bc04:	bcs	1bc20 <__assert_fail@plt+0xa72c>
   1bc08:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bc10:	mul	r3, r2, r3
   1bc14:	str	r3, [fp, #-8]
   1bc18:	mov	r3, #1
   1bc1c:	b	1bc34 <__assert_fail@plt+0xa740>
   1bc20:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bc24:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bc28:	mul	r3, r2, r3
   1bc2c:	str	r3, [fp, #-8]
   1bc30:	mov	r3, #0
   1bc34:	cmp	r3, #0
   1bc38:	beq	1bc54 <__assert_fail@plt+0xa760>
   1bc3c:	bl	113bc <__errno_location@plt>
   1bc40:	mov	r2, r0
   1bc44:	mov	r3, #12
   1bc48:	str	r3, [r2]
   1bc4c:	mov	r3, #0
   1bc50:	b	1bc68 <__assert_fail@plt+0xa774>
   1bc54:	ldr	r3, [fp, #-8]
   1bc58:	mov	r1, r3
   1bc5c:	ldr	r0, [fp, #-16]
   1bc60:	bl	1b68c <__assert_fail@plt+0xa198>
   1bc64:	mov	r3, r0
   1bc68:	mov	r0, r3
   1bc6c:	sub	sp, fp, #4
   1bc70:	pop	{fp, pc}
   1bc74:	push	{fp, lr}
   1bc78:	add	fp, sp, #4
   1bc7c:	sub	sp, sp, #8
   1bc80:	str	r0, [fp, #-8]
   1bc84:	mov	r2, #3
   1bc88:	mov	r1, #0
   1bc8c:	ldr	r0, [fp, #-8]
   1bc90:	bl	1c198 <__assert_fail@plt+0xaca4>
   1bc94:	mov	r3, r0
   1bc98:	mov	r0, r3
   1bc9c:	sub	sp, fp, #4
   1bca0:	pop	{fp, pc}
   1bca4:	push	{fp}		; (str fp, [sp, #-4]!)
   1bca8:	add	fp, sp, #0
   1bcac:	sub	sp, sp, #12
   1bcb0:	str	r0, [fp, #-8]
   1bcb4:	ldr	r3, [fp, #-8]
   1bcb8:	cmp	r3, #90	; 0x5a
   1bcbc:	bgt	1bcd8 <__assert_fail@plt+0xa7e4>
   1bcc0:	cmp	r3, #65	; 0x41
   1bcc4:	bge	1bce4 <__assert_fail@plt+0xa7f0>
   1bcc8:	sub	r3, r3, #48	; 0x30
   1bccc:	cmp	r3, #9
   1bcd0:	bhi	1bcec <__assert_fail@plt+0xa7f8>
   1bcd4:	b	1bce4 <__assert_fail@plt+0xa7f0>
   1bcd8:	sub	r3, r3, #97	; 0x61
   1bcdc:	cmp	r3, #25
   1bce0:	bhi	1bcec <__assert_fail@plt+0xa7f8>
   1bce4:	mov	r3, #1
   1bce8:	b	1bcf0 <__assert_fail@plt+0xa7fc>
   1bcec:	mov	r3, #0
   1bcf0:	mov	r0, r3
   1bcf4:	add	sp, fp, #0
   1bcf8:	pop	{fp}		; (ldr fp, [sp], #4)
   1bcfc:	bx	lr
   1bd00:	push	{fp}		; (str fp, [sp, #-4]!)
   1bd04:	add	fp, sp, #0
   1bd08:	sub	sp, sp, #12
   1bd0c:	str	r0, [fp, #-8]
   1bd10:	ldr	r3, [fp, #-8]
   1bd14:	cmp	r3, #65	; 0x41
   1bd18:	blt	1bd38 <__assert_fail@plt+0xa844>
   1bd1c:	cmp	r3, #90	; 0x5a
   1bd20:	ble	1bd30 <__assert_fail@plt+0xa83c>
   1bd24:	sub	r3, r3, #97	; 0x61
   1bd28:	cmp	r3, #25
   1bd2c:	bhi	1bd38 <__assert_fail@plt+0xa844>
   1bd30:	mov	r3, #1
   1bd34:	b	1bd3c <__assert_fail@plt+0xa848>
   1bd38:	mov	r3, #0
   1bd3c:	mov	r0, r3
   1bd40:	add	sp, fp, #0
   1bd44:	pop	{fp}		; (ldr fp, [sp], #4)
   1bd48:	bx	lr
   1bd4c:	push	{fp}		; (str fp, [sp, #-4]!)
   1bd50:	add	fp, sp, #0
   1bd54:	sub	sp, sp, #12
   1bd58:	str	r0, [fp, #-8]
   1bd5c:	ldr	r3, [fp, #-8]
   1bd60:	add	r3, r3, #0
   1bd64:	cmp	r3, #127	; 0x7f
   1bd68:	bhi	1bd74 <__assert_fail@plt+0xa880>
   1bd6c:	mov	r3, #1
   1bd70:	b	1bd78 <__assert_fail@plt+0xa884>
   1bd74:	mov	r3, #0
   1bd78:	mov	r0, r3
   1bd7c:	add	sp, fp, #0
   1bd80:	pop	{fp}		; (ldr fp, [sp], #4)
   1bd84:	bx	lr
   1bd88:	push	{fp}		; (str fp, [sp, #-4]!)
   1bd8c:	add	fp, sp, #0
   1bd90:	sub	sp, sp, #12
   1bd94:	str	r0, [fp, #-8]
   1bd98:	ldr	r3, [fp, #-8]
   1bd9c:	cmp	r3, #32
   1bda0:	beq	1bdb0 <__assert_fail@plt+0xa8bc>
   1bda4:	ldr	r3, [fp, #-8]
   1bda8:	cmp	r3, #9
   1bdac:	bne	1bdb8 <__assert_fail@plt+0xa8c4>
   1bdb0:	mov	r3, #1
   1bdb4:	b	1bdbc <__assert_fail@plt+0xa8c8>
   1bdb8:	mov	r3, #0
   1bdbc:	and	r3, r3, #1
   1bdc0:	uxtb	r3, r3
   1bdc4:	mov	r0, r3
   1bdc8:	add	sp, fp, #0
   1bdcc:	pop	{fp}		; (ldr fp, [sp], #4)
   1bdd0:	bx	lr
   1bdd4:	push	{fp}		; (str fp, [sp, #-4]!)
   1bdd8:	add	fp, sp, #0
   1bddc:	sub	sp, sp, #12
   1bde0:	str	r0, [fp, #-8]
   1bde4:	ldr	r3, [fp, #-8]
   1bde8:	cmp	r3, #0
   1bdec:	blt	1be08 <__assert_fail@plt+0xa914>
   1bdf0:	cmp	r3, #31
   1bdf4:	ble	1be00 <__assert_fail@plt+0xa90c>
   1bdf8:	cmp	r3, #127	; 0x7f
   1bdfc:	bne	1be08 <__assert_fail@plt+0xa914>
   1be00:	mov	r3, #1
   1be04:	b	1be0c <__assert_fail@plt+0xa918>
   1be08:	mov	r3, #0
   1be0c:	mov	r0, r3
   1be10:	add	sp, fp, #0
   1be14:	pop	{fp}		; (ldr fp, [sp], #4)
   1be18:	bx	lr
   1be1c:	push	{fp}		; (str fp, [sp, #-4]!)
   1be20:	add	fp, sp, #0
   1be24:	sub	sp, sp, #12
   1be28:	str	r0, [fp, #-8]
   1be2c:	ldr	r3, [fp, #-8]
   1be30:	sub	r3, r3, #48	; 0x30
   1be34:	cmp	r3, #9
   1be38:	bhi	1be44 <__assert_fail@plt+0xa950>
   1be3c:	mov	r3, #1
   1be40:	b	1be48 <__assert_fail@plt+0xa954>
   1be44:	mov	r3, #0
   1be48:	mov	r0, r3
   1be4c:	add	sp, fp, #0
   1be50:	pop	{fp}		; (ldr fp, [sp], #4)
   1be54:	bx	lr
   1be58:	push	{fp}		; (str fp, [sp, #-4]!)
   1be5c:	add	fp, sp, #0
   1be60:	sub	sp, sp, #12
   1be64:	str	r0, [fp, #-8]
   1be68:	ldr	r3, [fp, #-8]
   1be6c:	sub	r3, r3, #33	; 0x21
   1be70:	cmp	r3, #93	; 0x5d
   1be74:	bhi	1be80 <__assert_fail@plt+0xa98c>
   1be78:	mov	r3, #1
   1be7c:	b	1be84 <__assert_fail@plt+0xa990>
   1be80:	mov	r3, #0
   1be84:	mov	r0, r3
   1be88:	add	sp, fp, #0
   1be8c:	pop	{fp}		; (ldr fp, [sp], #4)
   1be90:	bx	lr
   1be94:	push	{fp}		; (str fp, [sp, #-4]!)
   1be98:	add	fp, sp, #0
   1be9c:	sub	sp, sp, #12
   1bea0:	str	r0, [fp, #-8]
   1bea4:	ldr	r3, [fp, #-8]
   1bea8:	sub	r3, r3, #97	; 0x61
   1beac:	cmp	r3, #25
   1beb0:	bhi	1bebc <__assert_fail@plt+0xa9c8>
   1beb4:	mov	r3, #1
   1beb8:	b	1bec0 <__assert_fail@plt+0xa9cc>
   1bebc:	mov	r3, #0
   1bec0:	mov	r0, r3
   1bec4:	add	sp, fp, #0
   1bec8:	pop	{fp}		; (ldr fp, [sp], #4)
   1becc:	bx	lr
   1bed0:	push	{fp}		; (str fp, [sp, #-4]!)
   1bed4:	add	fp, sp, #0
   1bed8:	sub	sp, sp, #12
   1bedc:	str	r0, [fp, #-8]
   1bee0:	ldr	r3, [fp, #-8]
   1bee4:	sub	r3, r3, #32
   1bee8:	cmp	r3, #94	; 0x5e
   1beec:	bhi	1bef8 <__assert_fail@plt+0xaa04>
   1bef0:	mov	r3, #1
   1bef4:	b	1befc <__assert_fail@plt+0xaa08>
   1bef8:	mov	r3, #0
   1befc:	mov	r0, r3
   1bf00:	add	sp, fp, #0
   1bf04:	pop	{fp}		; (ldr fp, [sp], #4)
   1bf08:	bx	lr
   1bf0c:	push	{fp}		; (str fp, [sp, #-4]!)
   1bf10:	add	fp, sp, #0
   1bf14:	sub	sp, sp, #12
   1bf18:	str	r0, [fp, #-8]
   1bf1c:	ldr	r3, [fp, #-8]
   1bf20:	cmp	r3, #64	; 0x40
   1bf24:	bgt	1bf40 <__assert_fail@plt+0xaa4c>
   1bf28:	cmp	r3, #58	; 0x3a
   1bf2c:	bge	1bf5c <__assert_fail@plt+0xaa68>
   1bf30:	sub	r3, r3, #33	; 0x21
   1bf34:	cmp	r3, #14
   1bf38:	bhi	1bf64 <__assert_fail@plt+0xaa70>
   1bf3c:	b	1bf5c <__assert_fail@plt+0xaa68>
   1bf40:	cmp	r3, #91	; 0x5b
   1bf44:	blt	1bf64 <__assert_fail@plt+0xaa70>
   1bf48:	cmp	r3, #96	; 0x60
   1bf4c:	ble	1bf5c <__assert_fail@plt+0xaa68>
   1bf50:	sub	r3, r3, #123	; 0x7b
   1bf54:	cmp	r3, #3
   1bf58:	bhi	1bf64 <__assert_fail@plt+0xaa70>
   1bf5c:	mov	r3, #1
   1bf60:	b	1bf68 <__assert_fail@plt+0xaa74>
   1bf64:	mov	r3, #0
   1bf68:	mov	r0, r3
   1bf6c:	add	sp, fp, #0
   1bf70:	pop	{fp}		; (ldr fp, [sp], #4)
   1bf74:	bx	lr
   1bf78:	push	{fp}		; (str fp, [sp, #-4]!)
   1bf7c:	add	fp, sp, #0
   1bf80:	sub	sp, sp, #12
   1bf84:	str	r0, [fp, #-8]
   1bf88:	ldr	r3, [fp, #-8]
   1bf8c:	cmp	r3, #9
   1bf90:	blt	1bfac <__assert_fail@plt+0xaab8>
   1bf94:	cmp	r3, #13
   1bf98:	ble	1bfa4 <__assert_fail@plt+0xaab0>
   1bf9c:	cmp	r3, #32
   1bfa0:	bne	1bfac <__assert_fail@plt+0xaab8>
   1bfa4:	mov	r3, #1
   1bfa8:	b	1bfb0 <__assert_fail@plt+0xaabc>
   1bfac:	mov	r3, #0
   1bfb0:	mov	r0, r3
   1bfb4:	add	sp, fp, #0
   1bfb8:	pop	{fp}		; (ldr fp, [sp], #4)
   1bfbc:	bx	lr
   1bfc0:	push	{fp}		; (str fp, [sp, #-4]!)
   1bfc4:	add	fp, sp, #0
   1bfc8:	sub	sp, sp, #12
   1bfcc:	str	r0, [fp, #-8]
   1bfd0:	ldr	r3, [fp, #-8]
   1bfd4:	sub	r3, r3, #65	; 0x41
   1bfd8:	cmp	r3, #25
   1bfdc:	bhi	1bfe8 <__assert_fail@plt+0xaaf4>
   1bfe0:	mov	r3, #1
   1bfe4:	b	1bfec <__assert_fail@plt+0xaaf8>
   1bfe8:	mov	r3, #0
   1bfec:	mov	r0, r3
   1bff0:	add	sp, fp, #0
   1bff4:	pop	{fp}		; (ldr fp, [sp], #4)
   1bff8:	bx	lr
   1bffc:	push	{fp}		; (str fp, [sp, #-4]!)
   1c000:	add	fp, sp, #0
   1c004:	sub	sp, sp, #12
   1c008:	str	r0, [fp, #-8]
   1c00c:	ldr	r3, [fp, #-8]
   1c010:	sub	r3, r3, #48	; 0x30
   1c014:	cmp	r3, #54	; 0x36
   1c018:	addls	pc, pc, r3, lsl #2
   1c01c:	b	1c104 <__assert_fail@plt+0xac10>
   1c020:	b	1c0fc <__assert_fail@plt+0xac08>
   1c024:	b	1c0fc <__assert_fail@plt+0xac08>
   1c028:	b	1c0fc <__assert_fail@plt+0xac08>
   1c02c:	b	1c0fc <__assert_fail@plt+0xac08>
   1c030:	b	1c0fc <__assert_fail@plt+0xac08>
   1c034:	b	1c0fc <__assert_fail@plt+0xac08>
   1c038:	b	1c0fc <__assert_fail@plt+0xac08>
   1c03c:	b	1c0fc <__assert_fail@plt+0xac08>
   1c040:	b	1c0fc <__assert_fail@plt+0xac08>
   1c044:	b	1c0fc <__assert_fail@plt+0xac08>
   1c048:	b	1c104 <__assert_fail@plt+0xac10>
   1c04c:	b	1c104 <__assert_fail@plt+0xac10>
   1c050:	b	1c104 <__assert_fail@plt+0xac10>
   1c054:	b	1c104 <__assert_fail@plt+0xac10>
   1c058:	b	1c104 <__assert_fail@plt+0xac10>
   1c05c:	b	1c104 <__assert_fail@plt+0xac10>
   1c060:	b	1c104 <__assert_fail@plt+0xac10>
   1c064:	b	1c0fc <__assert_fail@plt+0xac08>
   1c068:	b	1c0fc <__assert_fail@plt+0xac08>
   1c06c:	b	1c0fc <__assert_fail@plt+0xac08>
   1c070:	b	1c0fc <__assert_fail@plt+0xac08>
   1c074:	b	1c0fc <__assert_fail@plt+0xac08>
   1c078:	b	1c0fc <__assert_fail@plt+0xac08>
   1c07c:	b	1c104 <__assert_fail@plt+0xac10>
   1c080:	b	1c104 <__assert_fail@plt+0xac10>
   1c084:	b	1c104 <__assert_fail@plt+0xac10>
   1c088:	b	1c104 <__assert_fail@plt+0xac10>
   1c08c:	b	1c104 <__assert_fail@plt+0xac10>
   1c090:	b	1c104 <__assert_fail@plt+0xac10>
   1c094:	b	1c104 <__assert_fail@plt+0xac10>
   1c098:	b	1c104 <__assert_fail@plt+0xac10>
   1c09c:	b	1c104 <__assert_fail@plt+0xac10>
   1c0a0:	b	1c104 <__assert_fail@plt+0xac10>
   1c0a4:	b	1c104 <__assert_fail@plt+0xac10>
   1c0a8:	b	1c104 <__assert_fail@plt+0xac10>
   1c0ac:	b	1c104 <__assert_fail@plt+0xac10>
   1c0b0:	b	1c104 <__assert_fail@plt+0xac10>
   1c0b4:	b	1c104 <__assert_fail@plt+0xac10>
   1c0b8:	b	1c104 <__assert_fail@plt+0xac10>
   1c0bc:	b	1c104 <__assert_fail@plt+0xac10>
   1c0c0:	b	1c104 <__assert_fail@plt+0xac10>
   1c0c4:	b	1c104 <__assert_fail@plt+0xac10>
   1c0c8:	b	1c104 <__assert_fail@plt+0xac10>
   1c0cc:	b	1c104 <__assert_fail@plt+0xac10>
   1c0d0:	b	1c104 <__assert_fail@plt+0xac10>
   1c0d4:	b	1c104 <__assert_fail@plt+0xac10>
   1c0d8:	b	1c104 <__assert_fail@plt+0xac10>
   1c0dc:	b	1c104 <__assert_fail@plt+0xac10>
   1c0e0:	b	1c104 <__assert_fail@plt+0xac10>
   1c0e4:	b	1c0fc <__assert_fail@plt+0xac08>
   1c0e8:	b	1c0fc <__assert_fail@plt+0xac08>
   1c0ec:	b	1c0fc <__assert_fail@plt+0xac08>
   1c0f0:	b	1c0fc <__assert_fail@plt+0xac08>
   1c0f4:	b	1c0fc <__assert_fail@plt+0xac08>
   1c0f8:	b	1c0fc <__assert_fail@plt+0xac08>
   1c0fc:	mov	r3, #1
   1c100:	b	1c108 <__assert_fail@plt+0xac14>
   1c104:	mov	r3, #0
   1c108:	mov	r0, r3
   1c10c:	add	sp, fp, #0
   1c110:	pop	{fp}		; (ldr fp, [sp], #4)
   1c114:	bx	lr
   1c118:	push	{fp}		; (str fp, [sp, #-4]!)
   1c11c:	add	fp, sp, #0
   1c120:	sub	sp, sp, #12
   1c124:	str	r0, [fp, #-8]
   1c128:	ldr	r3, [fp, #-8]
   1c12c:	sub	r3, r3, #65	; 0x41
   1c130:	cmp	r3, #25
   1c134:	bhi	1c144 <__assert_fail@plt+0xac50>
   1c138:	ldr	r3, [fp, #-8]
   1c13c:	add	r3, r3, #32
   1c140:	b	1c148 <__assert_fail@plt+0xac54>
   1c144:	ldr	r3, [fp, #-8]
   1c148:	mov	r0, r3
   1c14c:	add	sp, fp, #0
   1c150:	pop	{fp}		; (ldr fp, [sp], #4)
   1c154:	bx	lr
   1c158:	push	{fp}		; (str fp, [sp, #-4]!)
   1c15c:	add	fp, sp, #0
   1c160:	sub	sp, sp, #12
   1c164:	str	r0, [fp, #-8]
   1c168:	ldr	r3, [fp, #-8]
   1c16c:	sub	r3, r3, #97	; 0x61
   1c170:	cmp	r3, #25
   1c174:	bhi	1c184 <__assert_fail@plt+0xac90>
   1c178:	ldr	r3, [fp, #-8]
   1c17c:	sub	r3, r3, #32
   1c180:	b	1c188 <__assert_fail@plt+0xac94>
   1c184:	ldr	r3, [fp, #-8]
   1c188:	mov	r0, r3
   1c18c:	add	sp, fp, #0
   1c190:	pop	{fp}		; (ldr fp, [sp], #4)
   1c194:	bx	lr
   1c198:	push	{r1, r2, r3}
   1c19c:	push	{fp, lr}
   1c1a0:	add	fp, sp, #4
   1c1a4:	sub	sp, sp, #36	; 0x24
   1c1a8:	str	r0, [fp, #-36]	; 0xffffffdc
   1c1ac:	mvn	r3, #0
   1c1b0:	str	r3, [fp, #-12]
   1c1b4:	add	r3, fp, #8
   1c1b8:	str	r3, [fp, #-32]	; 0xffffffe0
   1c1bc:	ldr	r3, [fp, #4]
   1c1c0:	cmp	r3, #0
   1c1c4:	beq	1c1d8 <__assert_fail@plt+0xace4>
   1c1c8:	ldr	r2, [pc, #432]	; 1c380 <__assert_fail@plt+0xae8c>
   1c1cc:	cmp	r3, r2
   1c1d0:	beq	1c200 <__assert_fail@plt+0xad0c>
   1c1d4:	b	1c228 <__assert_fail@plt+0xad34>
   1c1d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c1dc:	add	r2, r3, #4
   1c1e0:	str	r2, [fp, #-32]	; 0xffffffe0
   1c1e4:	ldr	r3, [r3]
   1c1e8:	str	r3, [fp, #-16]
   1c1ec:	ldr	r1, [fp, #-16]
   1c1f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c1f4:	bl	1c398 <__assert_fail@plt+0xaea4>
   1c1f8:	str	r0, [fp, #-12]
   1c1fc:	b	1c368 <__assert_fail@plt+0xae74>
   1c200:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c204:	add	r2, r3, #4
   1c208:	str	r2, [fp, #-32]	; 0xffffffe0
   1c20c:	ldr	r3, [r3]
   1c210:	str	r3, [fp, #-20]	; 0xffffffec
   1c214:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c218:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c21c:	bl	1c3d0 <__assert_fail@plt+0xaedc>
   1c220:	str	r0, [fp, #-12]
   1c224:	b	1c368 <__assert_fail@plt+0xae74>
   1c228:	ldr	r3, [fp, #4]
   1c22c:	cmp	r3, #11
   1c230:	beq	1c2f8 <__assert_fail@plt+0xae04>
   1c234:	cmp	r3, #11
   1c238:	bgt	1c298 <__assert_fail@plt+0xada4>
   1c23c:	cmp	r3, #3
   1c240:	beq	1c2f8 <__assert_fail@plt+0xae04>
   1c244:	cmp	r3, #3
   1c248:	bgt	1c268 <__assert_fail@plt+0xad74>
   1c24c:	cmp	r3, #1
   1c250:	beq	1c2f8 <__assert_fail@plt+0xae04>
   1c254:	cmp	r3, #1
   1c258:	bgt	1c30c <__assert_fail@plt+0xae18>
   1c25c:	cmp	r3, #0
   1c260:	beq	1c30c <__assert_fail@plt+0xae18>
   1c264:	b	1c338 <__assert_fail@plt+0xae44>
   1c268:	cmp	r3, #8
   1c26c:	beq	1c30c <__assert_fail@plt+0xae18>
   1c270:	cmp	r3, #8
   1c274:	bgt	1c284 <__assert_fail@plt+0xad90>
   1c278:	cmp	r3, #4
   1c27c:	beq	1c30c <__assert_fail@plt+0xae18>
   1c280:	b	1c338 <__assert_fail@plt+0xae44>
   1c284:	cmp	r3, #9
   1c288:	beq	1c2f8 <__assert_fail@plt+0xae04>
   1c28c:	cmp	r3, #10
   1c290:	beq	1c30c <__assert_fail@plt+0xae18>
   1c294:	b	1c338 <__assert_fail@plt+0xae44>
   1c298:	ldr	r2, [pc, #228]	; 1c384 <__assert_fail@plt+0xae90>
   1c29c:	cmp	r3, r2
   1c2a0:	bgt	1c2d4 <__assert_fail@plt+0xade0>
   1c2a4:	ldr	r2, [pc, #212]	; 1c380 <__assert_fail@plt+0xae8c>
   1c2a8:	cmp	r3, r2
   1c2ac:	bge	1c30c <__assert_fail@plt+0xae18>
   1c2b0:	ldr	r2, [pc, #208]	; 1c388 <__assert_fail@plt+0xae94>
   1c2b4:	cmp	r3, r2
   1c2b8:	beq	1c2f8 <__assert_fail@plt+0xae04>
   1c2bc:	ldr	r2, [pc, #200]	; 1c38c <__assert_fail@plt+0xae98>
   1c2c0:	cmp	r3, r2
   1c2c4:	beq	1c30c <__assert_fail@plt+0xae18>
   1c2c8:	cmp	r3, #1024	; 0x400
   1c2cc:	beq	1c30c <__assert_fail@plt+0xae18>
   1c2d0:	b	1c338 <__assert_fail@plt+0xae44>
   1c2d4:	ldr	r2, [pc, #180]	; 1c390 <__assert_fail@plt+0xae9c>
   1c2d8:	cmp	r3, r2
   1c2dc:	beq	1c30c <__assert_fail@plt+0xae18>
   1c2e0:	ldr	r2, [pc, #168]	; 1c390 <__assert_fail@plt+0xae9c>
   1c2e4:	cmp	r3, r2
   1c2e8:	blt	1c2f8 <__assert_fail@plt+0xae04>
   1c2ec:	ldr	r2, [pc, #160]	; 1c394 <__assert_fail@plt+0xaea0>
   1c2f0:	cmp	r3, r2
   1c2f4:	bne	1c338 <__assert_fail@plt+0xae44>
   1c2f8:	ldr	r1, [fp, #4]
   1c2fc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c300:	bl	11434 <fcntl64@plt>
   1c304:	str	r0, [fp, #-12]
   1c308:	b	1c364 <__assert_fail@plt+0xae70>
   1c30c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c310:	add	r2, r3, #4
   1c314:	str	r2, [fp, #-32]	; 0xffffffe0
   1c318:	ldr	r3, [r3]
   1c31c:	str	r3, [fp, #-24]	; 0xffffffe8
   1c320:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c324:	ldr	r1, [fp, #4]
   1c328:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c32c:	bl	11434 <fcntl64@plt>
   1c330:	str	r0, [fp, #-12]
   1c334:	b	1c364 <__assert_fail@plt+0xae70>
   1c338:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c33c:	add	r2, r3, #4
   1c340:	str	r2, [fp, #-32]	; 0xffffffe0
   1c344:	ldr	r3, [r3]
   1c348:	str	r3, [fp, #-28]	; 0xffffffe4
   1c34c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c350:	ldr	r1, [fp, #4]
   1c354:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1c358:	bl	11434 <fcntl64@plt>
   1c35c:	str	r0, [fp, #-12]
   1c360:	nop			; (mov r0, r0)
   1c364:	nop			; (mov r0, r0)
   1c368:	ldr	r3, [fp, #-12]
   1c36c:	mov	r0, r3
   1c370:	sub	sp, fp, #4
   1c374:	pop	{fp, lr}
   1c378:	add	sp, sp, #12
   1c37c:	bx	lr
   1c380:	andeq	r0, r0, r6, lsl #8
   1c384:	andeq	r0, r0, r7, lsl #8
   1c388:	andeq	r0, r0, r1, lsl #8
   1c38c:	andeq	r0, r0, r2, lsl #8
   1c390:	andeq	r0, r0, r9, lsl #8
   1c394:	andeq	r0, r0, sl, lsl #8
   1c398:	push	{fp, lr}
   1c39c:	add	fp, sp, #4
   1c3a0:	sub	sp, sp, #16
   1c3a4:	str	r0, [fp, #-16]
   1c3a8:	str	r1, [fp, #-20]	; 0xffffffec
   1c3ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c3b0:	mov	r1, #0
   1c3b4:	ldr	r0, [fp, #-16]
   1c3b8:	bl	11434 <fcntl64@plt>
   1c3bc:	str	r0, [fp, #-8]
   1c3c0:	ldr	r3, [fp, #-8]
   1c3c4:	mov	r0, r3
   1c3c8:	sub	sp, fp, #4
   1c3cc:	pop	{fp, pc}
   1c3d0:	push	{fp, lr}
   1c3d4:	add	fp, sp, #4
   1c3d8:	sub	sp, sp, #24
   1c3dc:	str	r0, [fp, #-24]	; 0xffffffe8
   1c3e0:	str	r1, [fp, #-28]	; 0xffffffe4
   1c3e4:	ldr	r3, [pc, #292]	; 1c510 <__assert_fail@plt+0xb01c>
   1c3e8:	ldr	r3, [r3]
   1c3ec:	cmp	r3, #0
   1c3f0:	blt	1c464 <__assert_fail@plt+0xaf70>
   1c3f4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c3f8:	ldr	r1, [pc, #276]	; 1c514 <__assert_fail@plt+0xb020>
   1c3fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c400:	bl	11434 <fcntl64@plt>
   1c404:	str	r0, [fp, #-8]
   1c408:	ldr	r3, [fp, #-8]
   1c40c:	cmp	r3, #0
   1c410:	bge	1c428 <__assert_fail@plt+0xaf34>
   1c414:	bl	113bc <__errno_location@plt>
   1c418:	mov	r3, r0
   1c41c:	ldr	r3, [r3]
   1c420:	cmp	r3, #22
   1c424:	beq	1c438 <__assert_fail@plt+0xaf44>
   1c428:	ldr	r3, [pc, #224]	; 1c510 <__assert_fail@plt+0xb01c>
   1c42c:	mov	r2, #1
   1c430:	str	r2, [r3]
   1c434:	b	1c474 <__assert_fail@plt+0xaf80>
   1c438:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1c43c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c440:	bl	1c398 <__assert_fail@plt+0xaea4>
   1c444:	str	r0, [fp, #-8]
   1c448:	ldr	r3, [fp, #-8]
   1c44c:	cmp	r3, #0
   1c450:	blt	1c474 <__assert_fail@plt+0xaf80>
   1c454:	ldr	r3, [pc, #180]	; 1c510 <__assert_fail@plt+0xb01c>
   1c458:	mvn	r2, #0
   1c45c:	str	r2, [r3]
   1c460:	b	1c474 <__assert_fail@plt+0xaf80>
   1c464:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1c468:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c46c:	bl	1c398 <__assert_fail@plt+0xaea4>
   1c470:	str	r0, [fp, #-8]
   1c474:	ldr	r3, [fp, #-8]
   1c478:	cmp	r3, #0
   1c47c:	blt	1c500 <__assert_fail@plt+0xb00c>
   1c480:	ldr	r3, [pc, #136]	; 1c510 <__assert_fail@plt+0xb01c>
   1c484:	ldr	r3, [r3]
   1c488:	cmn	r3, #1
   1c48c:	bne	1c500 <__assert_fail@plt+0xb00c>
   1c490:	mov	r1, #1
   1c494:	ldr	r0, [fp, #-8]
   1c498:	bl	11434 <fcntl64@plt>
   1c49c:	str	r0, [fp, #-12]
   1c4a0:	ldr	r3, [fp, #-12]
   1c4a4:	cmp	r3, #0
   1c4a8:	blt	1c4d0 <__assert_fail@plt+0xafdc>
   1c4ac:	ldr	r3, [fp, #-12]
   1c4b0:	orr	r3, r3, #1
   1c4b4:	mov	r2, r3
   1c4b8:	mov	r1, #2
   1c4bc:	ldr	r0, [fp, #-8]
   1c4c0:	bl	11434 <fcntl64@plt>
   1c4c4:	mov	r3, r0
   1c4c8:	cmn	r3, #1
   1c4cc:	bne	1c500 <__assert_fail@plt+0xb00c>
   1c4d0:	bl	113bc <__errno_location@plt>
   1c4d4:	mov	r3, r0
   1c4d8:	ldr	r3, [r3]
   1c4dc:	str	r3, [fp, #-16]
   1c4e0:	ldr	r0, [fp, #-8]
   1c4e4:	bl	114dc <close@plt>
   1c4e8:	bl	113bc <__errno_location@plt>
   1c4ec:	mov	r2, r0
   1c4f0:	ldr	r3, [fp, #-16]
   1c4f4:	str	r3, [r2]
   1c4f8:	mvn	r3, #0
   1c4fc:	str	r3, [fp, #-8]
   1c500:	ldr	r3, [fp, #-8]
   1c504:	mov	r0, r3
   1c508:	sub	sp, fp, #4
   1c50c:	pop	{fp, pc}
   1c510:	andeq	pc, r2, r0, ror #12
   1c514:	andeq	r0, r0, r6, lsl #8
   1c518:	push	{fp, lr}
   1c51c:	add	fp, sp, #4
   1c520:	sub	sp, sp, #272	; 0x110
   1c524:	str	r0, [fp, #-272]	; 0xfffffef0
   1c528:	sub	r3, fp, #264	; 0x108
   1c52c:	ldr	r2, [pc, #116]	; 1c5a8 <__assert_fail@plt+0xb0b4>
   1c530:	mov	r1, r3
   1c534:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1c538:	bl	1c6bc <__assert_fail@plt+0xb1c8>
   1c53c:	mov	r3, r0
   1c540:	cmp	r3, #0
   1c544:	beq	1c550 <__assert_fail@plt+0xb05c>
   1c548:	mov	r3, #0
   1c54c:	b	1c59c <__assert_fail@plt+0xb0a8>
   1c550:	sub	r3, fp, #264	; 0x108
   1c554:	ldr	r1, [pc, #80]	; 1c5ac <__assert_fail@plt+0xb0b8>
   1c558:	mov	r0, r3
   1c55c:	bl	11170 <strcmp@plt>
   1c560:	mov	r3, r0
   1c564:	cmp	r3, #0
   1c568:	beq	1c590 <__assert_fail@plt+0xb09c>
   1c56c:	sub	r3, fp, #264	; 0x108
   1c570:	ldr	r1, [pc, #56]	; 1c5b0 <__assert_fail@plt+0xb0bc>
   1c574:	mov	r0, r3
   1c578:	bl	11170 <strcmp@plt>
   1c57c:	mov	r3, r0
   1c580:	cmp	r3, #0
   1c584:	beq	1c590 <__assert_fail@plt+0xb09c>
   1c588:	mov	r3, #1
   1c58c:	b	1c594 <__assert_fail@plt+0xb0a0>
   1c590:	mov	r3, #0
   1c594:	and	r3, r3, #1
   1c598:	uxtb	r3, r3
   1c59c:	mov	r0, r3
   1c5a0:	sub	sp, fp, #4
   1c5a4:	pop	{fp, pc}
   1c5a8:	andeq	r0, r0, r1, lsl #2
   1c5ac:	andeq	lr, r1, r8, lsl r5
   1c5b0:	andeq	lr, r1, ip, lsl r5
   1c5b4:	push	{fp, lr}
   1c5b8:	add	fp, sp, #4
   1c5bc:	sub	sp, sp, #16
   1c5c0:	str	r0, [fp, #-16]
   1c5c4:	mov	r1, #0
   1c5c8:	ldr	r0, [fp, #-16]
   1c5cc:	bl	11440 <setlocale@plt>
   1c5d0:	str	r0, [fp, #-8]
   1c5d4:	ldr	r3, [fp, #-8]
   1c5d8:	mov	r0, r3
   1c5dc:	sub	sp, fp, #4
   1c5e0:	pop	{fp, pc}
   1c5e4:	push	{fp, lr}
   1c5e8:	add	fp, sp, #4
   1c5ec:	sub	sp, sp, #24
   1c5f0:	str	r0, [fp, #-16]
   1c5f4:	str	r1, [fp, #-20]	; 0xffffffec
   1c5f8:	str	r2, [fp, #-24]	; 0xffffffe8
   1c5fc:	ldr	r0, [fp, #-16]
   1c600:	bl	1c5b4 <__assert_fail@plt+0xb0c0>
   1c604:	str	r0, [fp, #-8]
   1c608:	ldr	r3, [fp, #-8]
   1c60c:	cmp	r3, #0
   1c610:	bne	1c634 <__assert_fail@plt+0xb140>
   1c614:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c618:	cmp	r3, #0
   1c61c:	beq	1c62c <__assert_fail@plt+0xb138>
   1c620:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c624:	mov	r2, #0
   1c628:	strb	r2, [r3]
   1c62c:	mov	r3, #22
   1c630:	b	1c6b0 <__assert_fail@plt+0xb1bc>
   1c634:	ldr	r0, [fp, #-8]
   1c638:	bl	11368 <strlen@plt>
   1c63c:	str	r0, [fp, #-12]
   1c640:	ldr	r2, [fp, #-12]
   1c644:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c648:	cmp	r2, r3
   1c64c:	bcs	1c670 <__assert_fail@plt+0xb17c>
   1c650:	ldr	r3, [fp, #-12]
   1c654:	add	r3, r3, #1
   1c658:	mov	r2, r3
   1c65c:	ldr	r1, [fp, #-8]
   1c660:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c664:	bl	111dc <memcpy@plt>
   1c668:	mov	r3, #0
   1c66c:	b	1c6b0 <__assert_fail@plt+0xb1bc>
   1c670:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c674:	cmp	r3, #0
   1c678:	beq	1c6ac <__assert_fail@plt+0xb1b8>
   1c67c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c680:	sub	r3, r3, #1
   1c684:	mov	r2, r3
   1c688:	ldr	r1, [fp, #-8]
   1c68c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c690:	bl	111dc <memcpy@plt>
   1c694:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c698:	sub	r3, r3, #1
   1c69c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c6a0:	add	r3, r2, r3
   1c6a4:	mov	r2, #0
   1c6a8:	strb	r2, [r3]
   1c6ac:	mov	r3, #34	; 0x22
   1c6b0:	mov	r0, r3
   1c6b4:	sub	sp, fp, #4
   1c6b8:	pop	{fp, pc}
   1c6bc:	push	{fp, lr}
   1c6c0:	add	fp, sp, #4
   1c6c4:	sub	sp, sp, #16
   1c6c8:	str	r0, [fp, #-8]
   1c6cc:	str	r1, [fp, #-12]
   1c6d0:	str	r2, [fp, #-16]
   1c6d4:	ldr	r2, [fp, #-16]
   1c6d8:	ldr	r1, [fp, #-12]
   1c6dc:	ldr	r0, [fp, #-8]
   1c6e0:	bl	1c5e4 <__assert_fail@plt+0xb0f0>
   1c6e4:	mov	r3, r0
   1c6e8:	mov	r0, r3
   1c6ec:	sub	sp, fp, #4
   1c6f0:	pop	{fp, pc}
   1c6f4:	push	{fp, lr}
   1c6f8:	add	fp, sp, #4
   1c6fc:	sub	sp, sp, #8
   1c700:	str	r0, [fp, #-8]
   1c704:	ldr	r0, [fp, #-8]
   1c708:	bl	1c5b4 <__assert_fail@plt+0xb0c0>
   1c70c:	mov	r3, r0
   1c710:	mov	r0, r3
   1c714:	sub	sp, fp, #4
   1c718:	pop	{fp, pc}
   1c71c:	subs	r2, r1, #1
   1c720:	bxeq	lr
   1c724:	bcc	1c8fc <__assert_fail@plt+0xb408>
   1c728:	cmp	r0, r1
   1c72c:	bls	1c8e0 <__assert_fail@plt+0xb3ec>
   1c730:	tst	r1, r2
   1c734:	beq	1c8ec <__assert_fail@plt+0xb3f8>
   1c738:	clz	r3, r0
   1c73c:	clz	r2, r1
   1c740:	sub	r3, r2, r3
   1c744:	rsbs	r3, r3, #31
   1c748:	addne	r3, r3, r3, lsl #1
   1c74c:	mov	r2, #0
   1c750:	addne	pc, pc, r3, lsl #2
   1c754:	nop			; (mov r0, r0)
   1c758:	cmp	r0, r1, lsl #31
   1c75c:	adc	r2, r2, r2
   1c760:	subcs	r0, r0, r1, lsl #31
   1c764:	cmp	r0, r1, lsl #30
   1c768:	adc	r2, r2, r2
   1c76c:	subcs	r0, r0, r1, lsl #30
   1c770:	cmp	r0, r1, lsl #29
   1c774:	adc	r2, r2, r2
   1c778:	subcs	r0, r0, r1, lsl #29
   1c77c:	cmp	r0, r1, lsl #28
   1c780:	adc	r2, r2, r2
   1c784:	subcs	r0, r0, r1, lsl #28
   1c788:	cmp	r0, r1, lsl #27
   1c78c:	adc	r2, r2, r2
   1c790:	subcs	r0, r0, r1, lsl #27
   1c794:	cmp	r0, r1, lsl #26
   1c798:	adc	r2, r2, r2
   1c79c:	subcs	r0, r0, r1, lsl #26
   1c7a0:	cmp	r0, r1, lsl #25
   1c7a4:	adc	r2, r2, r2
   1c7a8:	subcs	r0, r0, r1, lsl #25
   1c7ac:	cmp	r0, r1, lsl #24
   1c7b0:	adc	r2, r2, r2
   1c7b4:	subcs	r0, r0, r1, lsl #24
   1c7b8:	cmp	r0, r1, lsl #23
   1c7bc:	adc	r2, r2, r2
   1c7c0:	subcs	r0, r0, r1, lsl #23
   1c7c4:	cmp	r0, r1, lsl #22
   1c7c8:	adc	r2, r2, r2
   1c7cc:	subcs	r0, r0, r1, lsl #22
   1c7d0:	cmp	r0, r1, lsl #21
   1c7d4:	adc	r2, r2, r2
   1c7d8:	subcs	r0, r0, r1, lsl #21
   1c7dc:	cmp	r0, r1, lsl #20
   1c7e0:	adc	r2, r2, r2
   1c7e4:	subcs	r0, r0, r1, lsl #20
   1c7e8:	cmp	r0, r1, lsl #19
   1c7ec:	adc	r2, r2, r2
   1c7f0:	subcs	r0, r0, r1, lsl #19
   1c7f4:	cmp	r0, r1, lsl #18
   1c7f8:	adc	r2, r2, r2
   1c7fc:	subcs	r0, r0, r1, lsl #18
   1c800:	cmp	r0, r1, lsl #17
   1c804:	adc	r2, r2, r2
   1c808:	subcs	r0, r0, r1, lsl #17
   1c80c:	cmp	r0, r1, lsl #16
   1c810:	adc	r2, r2, r2
   1c814:	subcs	r0, r0, r1, lsl #16
   1c818:	cmp	r0, r1, lsl #15
   1c81c:	adc	r2, r2, r2
   1c820:	subcs	r0, r0, r1, lsl #15
   1c824:	cmp	r0, r1, lsl #14
   1c828:	adc	r2, r2, r2
   1c82c:	subcs	r0, r0, r1, lsl #14
   1c830:	cmp	r0, r1, lsl #13
   1c834:	adc	r2, r2, r2
   1c838:	subcs	r0, r0, r1, lsl #13
   1c83c:	cmp	r0, r1, lsl #12
   1c840:	adc	r2, r2, r2
   1c844:	subcs	r0, r0, r1, lsl #12
   1c848:	cmp	r0, r1, lsl #11
   1c84c:	adc	r2, r2, r2
   1c850:	subcs	r0, r0, r1, lsl #11
   1c854:	cmp	r0, r1, lsl #10
   1c858:	adc	r2, r2, r2
   1c85c:	subcs	r0, r0, r1, lsl #10
   1c860:	cmp	r0, r1, lsl #9
   1c864:	adc	r2, r2, r2
   1c868:	subcs	r0, r0, r1, lsl #9
   1c86c:	cmp	r0, r1, lsl #8
   1c870:	adc	r2, r2, r2
   1c874:	subcs	r0, r0, r1, lsl #8
   1c878:	cmp	r0, r1, lsl #7
   1c87c:	adc	r2, r2, r2
   1c880:	subcs	r0, r0, r1, lsl #7
   1c884:	cmp	r0, r1, lsl #6
   1c888:	adc	r2, r2, r2
   1c88c:	subcs	r0, r0, r1, lsl #6
   1c890:	cmp	r0, r1, lsl #5
   1c894:	adc	r2, r2, r2
   1c898:	subcs	r0, r0, r1, lsl #5
   1c89c:	cmp	r0, r1, lsl #4
   1c8a0:	adc	r2, r2, r2
   1c8a4:	subcs	r0, r0, r1, lsl #4
   1c8a8:	cmp	r0, r1, lsl #3
   1c8ac:	adc	r2, r2, r2
   1c8b0:	subcs	r0, r0, r1, lsl #3
   1c8b4:	cmp	r0, r1, lsl #2
   1c8b8:	adc	r2, r2, r2
   1c8bc:	subcs	r0, r0, r1, lsl #2
   1c8c0:	cmp	r0, r1, lsl #1
   1c8c4:	adc	r2, r2, r2
   1c8c8:	subcs	r0, r0, r1, lsl #1
   1c8cc:	cmp	r0, r1
   1c8d0:	adc	r2, r2, r2
   1c8d4:	subcs	r0, r0, r1
   1c8d8:	mov	r0, r2
   1c8dc:	bx	lr
   1c8e0:	moveq	r0, #1
   1c8e4:	movne	r0, #0
   1c8e8:	bx	lr
   1c8ec:	clz	r2, r1
   1c8f0:	rsb	r2, r2, #31
   1c8f4:	lsr	r0, r0, r2
   1c8f8:	bx	lr
   1c8fc:	cmp	r0, #0
   1c900:	mvnne	r0, #0
   1c904:	b	1cba4 <__assert_fail@plt+0xb6b0>
   1c908:	cmp	r1, #0
   1c90c:	beq	1c8fc <__assert_fail@plt+0xb408>
   1c910:	push	{r0, r1, lr}
   1c914:	bl	1c71c <__assert_fail@plt+0xb228>
   1c918:	pop	{r1, r2, lr}
   1c91c:	mul	r3, r2, r0
   1c920:	sub	r1, r1, r3
   1c924:	bx	lr
   1c928:	cmp	r1, #0
   1c92c:	beq	1cb38 <__assert_fail@plt+0xb644>
   1c930:	eor	ip, r0, r1
   1c934:	rsbmi	r1, r1, #0
   1c938:	subs	r2, r1, #1
   1c93c:	beq	1cb04 <__assert_fail@plt+0xb610>
   1c940:	movs	r3, r0
   1c944:	rsbmi	r3, r0, #0
   1c948:	cmp	r3, r1
   1c94c:	bls	1cb10 <__assert_fail@plt+0xb61c>
   1c950:	tst	r1, r2
   1c954:	beq	1cb20 <__assert_fail@plt+0xb62c>
   1c958:	clz	r2, r3
   1c95c:	clz	r0, r1
   1c960:	sub	r2, r0, r2
   1c964:	rsbs	r2, r2, #31
   1c968:	addne	r2, r2, r2, lsl #1
   1c96c:	mov	r0, #0
   1c970:	addne	pc, pc, r2, lsl #2
   1c974:	nop			; (mov r0, r0)
   1c978:	cmp	r3, r1, lsl #31
   1c97c:	adc	r0, r0, r0
   1c980:	subcs	r3, r3, r1, lsl #31
   1c984:	cmp	r3, r1, lsl #30
   1c988:	adc	r0, r0, r0
   1c98c:	subcs	r3, r3, r1, lsl #30
   1c990:	cmp	r3, r1, lsl #29
   1c994:	adc	r0, r0, r0
   1c998:	subcs	r3, r3, r1, lsl #29
   1c99c:	cmp	r3, r1, lsl #28
   1c9a0:	adc	r0, r0, r0
   1c9a4:	subcs	r3, r3, r1, lsl #28
   1c9a8:	cmp	r3, r1, lsl #27
   1c9ac:	adc	r0, r0, r0
   1c9b0:	subcs	r3, r3, r1, lsl #27
   1c9b4:	cmp	r3, r1, lsl #26
   1c9b8:	adc	r0, r0, r0
   1c9bc:	subcs	r3, r3, r1, lsl #26
   1c9c0:	cmp	r3, r1, lsl #25
   1c9c4:	adc	r0, r0, r0
   1c9c8:	subcs	r3, r3, r1, lsl #25
   1c9cc:	cmp	r3, r1, lsl #24
   1c9d0:	adc	r0, r0, r0
   1c9d4:	subcs	r3, r3, r1, lsl #24
   1c9d8:	cmp	r3, r1, lsl #23
   1c9dc:	adc	r0, r0, r0
   1c9e0:	subcs	r3, r3, r1, lsl #23
   1c9e4:	cmp	r3, r1, lsl #22
   1c9e8:	adc	r0, r0, r0
   1c9ec:	subcs	r3, r3, r1, lsl #22
   1c9f0:	cmp	r3, r1, lsl #21
   1c9f4:	adc	r0, r0, r0
   1c9f8:	subcs	r3, r3, r1, lsl #21
   1c9fc:	cmp	r3, r1, lsl #20
   1ca00:	adc	r0, r0, r0
   1ca04:	subcs	r3, r3, r1, lsl #20
   1ca08:	cmp	r3, r1, lsl #19
   1ca0c:	adc	r0, r0, r0
   1ca10:	subcs	r3, r3, r1, lsl #19
   1ca14:	cmp	r3, r1, lsl #18
   1ca18:	adc	r0, r0, r0
   1ca1c:	subcs	r3, r3, r1, lsl #18
   1ca20:	cmp	r3, r1, lsl #17
   1ca24:	adc	r0, r0, r0
   1ca28:	subcs	r3, r3, r1, lsl #17
   1ca2c:	cmp	r3, r1, lsl #16
   1ca30:	adc	r0, r0, r0
   1ca34:	subcs	r3, r3, r1, lsl #16
   1ca38:	cmp	r3, r1, lsl #15
   1ca3c:	adc	r0, r0, r0
   1ca40:	subcs	r3, r3, r1, lsl #15
   1ca44:	cmp	r3, r1, lsl #14
   1ca48:	adc	r0, r0, r0
   1ca4c:	subcs	r3, r3, r1, lsl #14
   1ca50:	cmp	r3, r1, lsl #13
   1ca54:	adc	r0, r0, r0
   1ca58:	subcs	r3, r3, r1, lsl #13
   1ca5c:	cmp	r3, r1, lsl #12
   1ca60:	adc	r0, r0, r0
   1ca64:	subcs	r3, r3, r1, lsl #12
   1ca68:	cmp	r3, r1, lsl #11
   1ca6c:	adc	r0, r0, r0
   1ca70:	subcs	r3, r3, r1, lsl #11
   1ca74:	cmp	r3, r1, lsl #10
   1ca78:	adc	r0, r0, r0
   1ca7c:	subcs	r3, r3, r1, lsl #10
   1ca80:	cmp	r3, r1, lsl #9
   1ca84:	adc	r0, r0, r0
   1ca88:	subcs	r3, r3, r1, lsl #9
   1ca8c:	cmp	r3, r1, lsl #8
   1ca90:	adc	r0, r0, r0
   1ca94:	subcs	r3, r3, r1, lsl #8
   1ca98:	cmp	r3, r1, lsl #7
   1ca9c:	adc	r0, r0, r0
   1caa0:	subcs	r3, r3, r1, lsl #7
   1caa4:	cmp	r3, r1, lsl #6
   1caa8:	adc	r0, r0, r0
   1caac:	subcs	r3, r3, r1, lsl #6
   1cab0:	cmp	r3, r1, lsl #5
   1cab4:	adc	r0, r0, r0
   1cab8:	subcs	r3, r3, r1, lsl #5
   1cabc:	cmp	r3, r1, lsl #4
   1cac0:	adc	r0, r0, r0
   1cac4:	subcs	r3, r3, r1, lsl #4
   1cac8:	cmp	r3, r1, lsl #3
   1cacc:	adc	r0, r0, r0
   1cad0:	subcs	r3, r3, r1, lsl #3
   1cad4:	cmp	r3, r1, lsl #2
   1cad8:	adc	r0, r0, r0
   1cadc:	subcs	r3, r3, r1, lsl #2
   1cae0:	cmp	r3, r1, lsl #1
   1cae4:	adc	r0, r0, r0
   1cae8:	subcs	r3, r3, r1, lsl #1
   1caec:	cmp	r3, r1
   1caf0:	adc	r0, r0, r0
   1caf4:	subcs	r3, r3, r1
   1caf8:	cmp	ip, #0
   1cafc:	rsbmi	r0, r0, #0
   1cb00:	bx	lr
   1cb04:	teq	ip, r0
   1cb08:	rsbmi	r0, r0, #0
   1cb0c:	bx	lr
   1cb10:	movcc	r0, #0
   1cb14:	asreq	r0, ip, #31
   1cb18:	orreq	r0, r0, #1
   1cb1c:	bx	lr
   1cb20:	clz	r2, r1
   1cb24:	rsb	r2, r2, #31
   1cb28:	cmp	ip, #0
   1cb2c:	lsr	r0, r3, r2
   1cb30:	rsbmi	r0, r0, #0
   1cb34:	bx	lr
   1cb38:	cmp	r0, #0
   1cb3c:	mvngt	r0, #-2147483648	; 0x80000000
   1cb40:	movlt	r0, #-2147483648	; 0x80000000
   1cb44:	b	1cba4 <__assert_fail@plt+0xb6b0>
   1cb48:	cmp	r1, #0
   1cb4c:	beq	1cb38 <__assert_fail@plt+0xb644>
   1cb50:	push	{r0, r1, lr}
   1cb54:	bl	1c930 <__assert_fail@plt+0xb43c>
   1cb58:	pop	{r1, r2, lr}
   1cb5c:	mul	r3, r2, r0
   1cb60:	sub	r1, r1, r3
   1cb64:	bx	lr
   1cb68:	cmp	r3, #0
   1cb6c:	cmpeq	r2, #0
   1cb70:	bne	1cb88 <__assert_fail@plt+0xb694>
   1cb74:	cmp	r1, #0
   1cb78:	cmpeq	r0, #0
   1cb7c:	mvnne	r1, #0
   1cb80:	mvnne	r0, #0
   1cb84:	b	1cba4 <__assert_fail@plt+0xb6b0>
   1cb88:	sub	sp, sp, #8
   1cb8c:	push	{sp, lr}
   1cb90:	bl	1cbb4 <__assert_fail@plt+0xb6c0>
   1cb94:	ldr	lr, [sp, #4]
   1cb98:	add	sp, sp, #8
   1cb9c:	pop	{r2, r3}
   1cba0:	bx	lr
   1cba4:	push	{r1, lr}
   1cba8:	mov	r0, #8
   1cbac:	bl	11164 <raise@plt>
   1cbb0:	pop	{r1, pc}
   1cbb4:	cmp	r1, r3
   1cbb8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1cbbc:	cmpeq	r0, r2
   1cbc0:	mov	r4, r0
   1cbc4:	mov	r5, r1
   1cbc8:	ldr	r9, [sp, #28]
   1cbcc:	movcc	r0, #0
   1cbd0:	movcc	r1, #0
   1cbd4:	bcc	1cccc <__assert_fail@plt+0xb7d8>
   1cbd8:	cmp	r3, #0
   1cbdc:	clzeq	ip, r2
   1cbe0:	clzne	ip, r3
   1cbe4:	addeq	ip, ip, #32
   1cbe8:	cmp	r5, #0
   1cbec:	clzeq	r1, r4
   1cbf0:	addeq	r1, r1, #32
   1cbf4:	clzne	r1, r5
   1cbf8:	sub	ip, ip, r1
   1cbfc:	sub	lr, ip, #32
   1cc00:	lsl	r7, r3, ip
   1cc04:	rsb	r8, ip, #32
   1cc08:	orr	r7, r7, r2, lsl lr
   1cc0c:	orr	r7, r7, r2, lsr r8
   1cc10:	lsl	r6, r2, ip
   1cc14:	cmp	r5, r7
   1cc18:	cmpeq	r4, r6
   1cc1c:	movcc	r0, #0
   1cc20:	movcc	r1, #0
   1cc24:	bcc	1cc40 <__assert_fail@plt+0xb74c>
   1cc28:	mov	r3, #1
   1cc2c:	subs	r4, r4, r6
   1cc30:	lsl	r1, r3, lr
   1cc34:	lsl	r0, r3, ip
   1cc38:	orr	r1, r1, r3, lsr r8
   1cc3c:	sbc	r5, r5, r7
   1cc40:	cmp	ip, #0
   1cc44:	beq	1cccc <__assert_fail@plt+0xb7d8>
   1cc48:	lsrs	r3, r7, #1
   1cc4c:	rrx	r2, r6
   1cc50:	mov	r6, ip
   1cc54:	b	1cc78 <__assert_fail@plt+0xb784>
   1cc58:	subs	r4, r4, r2
   1cc5c:	sbc	r5, r5, r3
   1cc60:	adds	r4, r4, r4
   1cc64:	adc	r5, r5, r5
   1cc68:	adds	r4, r4, #1
   1cc6c:	adc	r5, r5, #0
   1cc70:	subs	r6, r6, #1
   1cc74:	beq	1cc94 <__assert_fail@plt+0xb7a0>
   1cc78:	cmp	r5, r3
   1cc7c:	cmpeq	r4, r2
   1cc80:	bcs	1cc58 <__assert_fail@plt+0xb764>
   1cc84:	adds	r4, r4, r4
   1cc88:	adc	r5, r5, r5
   1cc8c:	subs	r6, r6, #1
   1cc90:	bne	1cc78 <__assert_fail@plt+0xb784>
   1cc94:	lsr	r6, r4, ip
   1cc98:	lsr	r7, r5, ip
   1cc9c:	orr	r6, r6, r5, lsl r8
   1cca0:	adds	r2, r0, r4
   1cca4:	orr	r6, r6, r5, lsr lr
   1cca8:	adc	r3, r1, r5
   1ccac:	lsl	r1, r7, ip
   1ccb0:	orr	r1, r1, r6, lsl lr
   1ccb4:	lsl	r0, r6, ip
   1ccb8:	orr	r1, r1, r6, lsr r8
   1ccbc:	subs	r0, r2, r0
   1ccc0:	mov	r4, r6
   1ccc4:	mov	r5, r7
   1ccc8:	sbc	r1, r3, r1
   1cccc:	cmp	r9, #0
   1ccd0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1ccd4:	strd	r4, [r9]
   1ccd8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ccdc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cce0:	mov	r7, r0
   1cce4:	ldr	r6, [pc, #72]	; 1cd34 <__assert_fail@plt+0xb840>
   1cce8:	ldr	r5, [pc, #72]	; 1cd38 <__assert_fail@plt+0xb844>
   1ccec:	add	r6, pc, r6
   1ccf0:	add	r5, pc, r5
   1ccf4:	sub	r6, r6, r5
   1ccf8:	mov	r8, r1
   1ccfc:	mov	r9, r2
   1cd00:	bl	11120 <fdopen@plt-0x20>
   1cd04:	asrs	r6, r6, #2
   1cd08:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cd0c:	mov	r4, #0
   1cd10:	add	r4, r4, #1
   1cd14:	ldr	r3, [r5], #4
   1cd18:	mov	r2, r9
   1cd1c:	mov	r1, r8
   1cd20:	mov	r0, r7
   1cd24:	blx	r3
   1cd28:	cmp	r6, r4
   1cd2c:	bne	1cd10 <__assert_fail@plt+0xb81c>
   1cd30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cd34:	andeq	r2, r1, ip, lsl r2
   1cd38:	andeq	r2, r1, r4, lsl r2
   1cd3c:	bx	lr
   1cd40:	ldr	r3, [pc, #12]	; 1cd54 <__assert_fail@plt+0xb860>
   1cd44:	mov	r1, #0
   1cd48:	add	r3, pc, r3
   1cd4c:	ldr	r2, [r3]
   1cd50:	b	113c8 <__cxa_atexit@plt>
   1cd54:	andeq	r2, r1, r4, lsl #8
   1cd58:	mov	r2, r1
   1cd5c:	mov	r1, r0
   1cd60:	mov	r0, #3
   1cd64:	b	11260 <__fxstat64@plt>

Disassembly of section .fini:

0001cd68 <.fini>:
   1cd68:	push	{r3, lr}
   1cd6c:	pop	{r3, pc}
