
../repos/prog2/3.2:     file format elf32-littlearm


Disassembly of section .init:

00010690 <.init>:
   10690:	push	{r3, lr}
   10694:	bl	10734 <_start@@Base+0x3c>
   10698:	pop	{r3, pc}

Disassembly of section .plt:

0001069c <printf@plt-0x14>:
   1069c:	push	{lr}		; (str lr, [sp, #-4]!)
   106a0:	ldr	lr, [pc, #4]	; 106ac <printf@plt-0x4>
   106a4:	add	lr, pc, lr
   106a8:	ldr	pc, [lr, #8]!
   106ac:	andeq	r0, r1, r4, asr r9

000106b0 <printf@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2388]!	; 0x954

000106bc <puts@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2380]!	; 0x94c

000106c8 <__libc_start_main@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2372]!	; 0x944

000106d4 <__gmon_start__@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2364]!	; 0x93c

000106e0 <strlen@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2356]!	; 0x934

000106ec <abort@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2348]!	; 0x92c

Disassembly of section .text:

000106f8 <_start@@Base>:
   106f8:	mov	fp, #0
   106fc:	mov	lr, #0
   10700:	pop	{r1}		; (ldr r1, [sp], #4)
   10704:	mov	r2, sp
   10708:	push	{r2}		; (str r2, [sp, #-4]!)
   1070c:	push	{r0}		; (str r0, [sp, #-4]!)
   10710:	ldr	ip, [pc, #16]	; 10728 <_start@@Base+0x30>
   10714:	push	{ip}		; (str ip, [sp, #-4]!)
   10718:	ldr	r0, [pc, #12]	; 1072c <_start@@Base+0x34>
   1071c:	ldr	r3, [pc, #12]	; 10730 <_start@@Base+0x38>
   10720:	bl	106c8 <__libc_start_main@plt>
   10724:	bl	106ec <abort@plt>
   10728:	strdeq	r0, [r1], -r4
   1072c:	andeq	r0, r1, ip, asr #21
   10730:	muleq	r1, r4, sp
   10734:	ldr	r3, [pc, #20]	; 10750 <_start@@Base+0x58>
   10738:	ldr	r2, [pc, #20]	; 10754 <_start@@Base+0x5c>
   1073c:	add	r3, pc, r3
   10740:	ldr	r2, [r3, r2]
   10744:	cmp	r2, #0
   10748:	bxeq	lr
   1074c:	b	106d4 <__gmon_start__@plt>
   10750:			; <UNDEFINED> instruction: 0x000108bc
   10754:	andeq	r0, r0, r4, lsr #32
   10758:	ldr	r3, [pc, #28]	; 1077c <_start@@Base+0x84>
   1075c:	ldr	r0, [pc, #28]	; 10780 <_start@@Base+0x88>
   10760:	sub	r3, r3, r0
   10764:	cmp	r3, #6
   10768:	bxls	lr
   1076c:	ldr	r3, [pc, #16]	; 10784 <_start@@Base+0x8c>
   10770:	cmp	r3, #0
   10774:	bxeq	lr
   10778:	bx	r3
   1077c:	andeq	r1, r2, r3, lsr r0
   10780:	andeq	r1, r2, r0, lsr r0
   10784:	andeq	r0, r0, r0
   10788:	ldr	r1, [pc, #36]	; 107b4 <_start@@Base+0xbc>
   1078c:	ldr	r0, [pc, #36]	; 107b8 <_start@@Base+0xc0>
   10790:	sub	r1, r1, r0
   10794:	asr	r1, r1, #2
   10798:	add	r1, r1, r1, lsr #31
   1079c:	asrs	r1, r1, #1
   107a0:	bxeq	lr
   107a4:	ldr	r3, [pc, #16]	; 107bc <_start@@Base+0xc4>
   107a8:	cmp	r3, #0
   107ac:	bxeq	lr
   107b0:	bx	r3
   107b4:	andeq	r1, r2, r0, lsr r0
   107b8:	andeq	r1, r2, r0, lsr r0
   107bc:	andeq	r0, r0, r0
   107c0:	push	{r4, lr}
   107c4:	ldr	r4, [pc, #24]	; 107e4 <_start@@Base+0xec>
   107c8:	ldrb	r3, [r4]
   107cc:	cmp	r3, #0
   107d0:	popne	{r4, pc}
   107d4:	bl	10758 <_start@@Base+0x60>
   107d8:	mov	r3, #1
   107dc:	strb	r3, [r4]
   107e0:	pop	{r4, pc}
   107e4:	andeq	r1, r2, r0, lsr r0
   107e8:	ldr	r0, [pc, #40]	; 10818 <_start@@Base+0x120>
   107ec:	ldr	r3, [r0]
   107f0:	cmp	r3, #0
   107f4:	bne	107fc <_start@@Base+0x104>
   107f8:	b	10788 <_start@@Base+0x90>
   107fc:	ldr	r3, [pc, #24]	; 1081c <_start@@Base+0x124>
   10800:	cmp	r3, #0
   10804:	beq	107f8 <_start@@Base+0x100>
   10808:	push	{r4, lr}
   1080c:	blx	r3
   10810:	pop	{r4, lr}
   10814:	b	10788 <_start@@Base+0x90>
   10818:	andeq	r0, r2, r4, lsl pc
   1081c:	andeq	r0, r0, r0

00010820 <comp_int_asc@@Base>:
   10820:	ldr	r0, [r0]
   10824:	ldr	r3, [r1]
   10828:	cmp	r0, r3
   1082c:	blt	10840 <comp_int_asc@@Base+0x20>
   10830:	cmp	r0, r3
   10834:	movle	r0, #0
   10838:	movgt	r0, #1
   1083c:	bx	lr
   10840:	mvn	r0, #0
   10844:	bx	lr

00010848 <comp_char_desc@@Base>:
   10848:	ldrb	r0, [r0]
   1084c:	ldrb	r3, [r1]
   10850:	cmp	r0, r3
   10854:	bcc	10868 <comp_char_desc@@Base+0x20>
   10858:	cmp	r0, r3
   1085c:	movls	r0, #0
   10860:	mvnhi	r0, #0
   10864:	bx	lr
   10868:	mov	r0, #1
   1086c:	bx	lr

00010870 <get_elem@@Base>:
   10870:	mla	r0, r2, r1, r0
   10874:	bx	lr

00010878 <swap@@Base>:
   10878:	cmp	r2, #0
   1087c:	bxle	lr
   10880:	push	{lr}		; (str lr, [sp, #-4]!)
   10884:	mov	r3, r0
   10888:	sub	r1, r1, #1
   1088c:	add	r0, r0, r2
   10890:	ldrb	ip, [r3]
   10894:	ldrb	lr, [r1, #1]
   10898:	strb	lr, [r3], #1
   1089c:	strb	ip, [r1, #1]!
   108a0:	cmp	r3, r0
   108a4:	bne	10890 <swap@@Base+0x18>
   108a8:	pop	{pc}		; (ldr pc, [sp], #4)

000108ac <sort@@Base>:
   108ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108b0:	sub	sp, sp, #20
   108b4:	subs	r7, r1, #0
   108b8:	ble	10948 <sort@@Base+0x9c>
   108bc:	mov	r9, r3
   108c0:	str	r2, [sp, #8]
   108c4:	str	r0, [sp, #12]
   108c8:	mov	r8, r2
   108cc:	mov	fp, r0
   108d0:	mov	sl, #0
   108d4:	mov	r5, fp
   108d8:	str	fp, [sp, #4]
   108dc:	add	sl, sl, #1
   108e0:	cmp	r7, sl
   108e4:	beq	1092c <sort@@Base+0x80>
   108e8:	add	fp, fp, r8
   108ec:	mov	r4, fp
   108f0:	mov	r6, sl
   108f4:	mov	r1, r5
   108f8:	mov	r0, r4
   108fc:	blx	r9
   10900:	cmp	r0, #0
   10904:	movlt	r5, r4
   10908:	add	r6, r6, #1
   1090c:	add	r4, r4, r8
   10910:	cmp	r7, r6
   10914:	bgt	108f4 <sort@@Base+0x48>
   10918:	ldr	r2, [sp, #8]
   1091c:	ldr	r1, [sp, #4]
   10920:	mov	r0, r5
   10924:	bl	10878 <swap@@Base>
   10928:	b	108d4 <sort@@Base+0x28>
   1092c:	sub	r0, sl, #1
   10930:	ldr	r3, [sp, #8]
   10934:	ldr	r2, [sp, #12]
   10938:	mla	r0, r3, r0, r2
   1093c:	mov	r2, r3
   10940:	mov	r1, r0
   10944:	bl	10878 <swap@@Base>
   10948:	add	sp, sp, #20
   1094c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010950 <linear_search@@Base>:
   10950:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10954:	ldr	r8, [sp, #40]	; 0x28
   10958:	subs	r6, r2, #0
   1095c:	ble	109ac <linear_search@@Base+0x5c>
   10960:	mov	r9, r3
   10964:	mov	sl, r1
   10968:	mov	r7, r0
   1096c:	mov	fp, r6
   10970:	mov	r5, r1
   10974:	mov	r4, #0
   10978:	mov	r1, r7
   1097c:	mov	r0, r5
   10980:	blx	r8
   10984:	cmp	r0, #0
   10988:	beq	109a4 <linear_search@@Base+0x54>
   1098c:	add	r4, r4, #1
   10990:	add	r5, r5, fp
   10994:	cmp	r6, r4
   10998:	bne	10978 <linear_search@@Base+0x28>
   1099c:	mov	r0, #0
   109a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109a4:	mla	r0, r4, r9, sl
   109a8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109ac:	mov	r0, #0
   109b0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000109b4 <binary_search@@Base>:
   109b4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109b8:	ldr	r8, [sp, #40]	; 0x28
   109bc:	subs	r6, r2, #1
   109c0:	bmi	10a24 <binary_search@@Base+0x70>
   109c4:	mov	sl, r3
   109c8:	mov	r9, r1
   109cc:	mov	r7, r0
   109d0:	mov	r5, #0
   109d4:	add	r2, r5, r6
   109d8:	add	r2, r2, r2, lsr #31
   109dc:	asr	r4, r2, #1
   109e0:	mla	fp, sl, r4, r9
   109e4:	mov	r1, fp
   109e8:	mov	r0, r7
   109ec:	blx	r8
   109f0:	cmp	r0, #0
   109f4:	bne	10a1c <binary_search@@Base+0x68>
   109f8:	mov	r1, fp
   109fc:	mov	r0, r7
   10a00:	blx	r8
   10a04:	cmn	r0, #1
   10a08:	subeq	r6, r4, #1
   10a0c:	addne	r5, r4, #1
   10a10:	cmp	r5, r6
   10a14:	ble	109d4 <binary_search@@Base+0x20>
   10a18:	mov	fp, #0
   10a1c:	mov	r0, fp
   10a20:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a24:	mov	fp, #0
   10a28:	b	10a1c <binary_search@@Base+0x68>

00010a2c <insertion_sort@@Base>:
   10a2c:	cmp	r1, #1
   10a30:	bxle	lr
   10a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a38:	sub	sp, sp, #12
   10a3c:	mov	r9, r3
   10a40:	mov	r7, r2
   10a44:	str	r1, [sp]
   10a48:	str	r0, [sp, #4]
   10a4c:	mov	r8, r2
   10a50:	mov	fp, #0
   10a54:	mov	sl, #1
   10a58:	b	10a70 <insertion_sort@@Base+0x44>
   10a5c:	add	sl, sl, #1
   10a60:	add	fp, fp, r8
   10a64:	ldr	r3, [sp]
   10a68:	cmp	r3, sl
   10a6c:	beq	10ac4 <insertion_sort@@Base+0x98>
   10a70:	cmp	sl, #0
   10a74:	ble	10a5c <insertion_sort@@Base+0x30>
   10a78:	add	r4, fp, r8
   10a7c:	ldr	r3, [sp, #4]
   10a80:	add	r4, r3, r4
   10a84:	mov	r5, sl
   10a88:	sub	r5, r5, #1
   10a8c:	sub	r6, r4, r8
   10a90:	mov	r1, r6
   10a94:	mov	r0, r4
   10a98:	blx	r9
   10a9c:	cmn	r0, #1
   10aa0:	bne	10a5c <insertion_sort@@Base+0x30>
   10aa4:	mov	r2, r7
   10aa8:	mov	r1, r6
   10aac:	mov	r0, r4
   10ab0:	bl	10878 <swap@@Base>
   10ab4:	sub	r4, r4, r7
   10ab8:	cmp	r5, #0
   10abc:	bne	10a88 <insertion_sort@@Base+0x5c>
   10ac0:	b	10a5c <insertion_sort@@Base+0x30>
   10ac4:	add	sp, sp, #12
   10ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010acc <main@@Base>:
   10acc:	push	{r4, r5, r6, r7, lr}
   10ad0:	sub	sp, sp, #76	; 0x4c
   10ad4:	add	ip, sp, #48	; 0x30
   10ad8:	ldr	lr, [pc, #632]	; 10d58 <main@@Base+0x28c>
   10adc:	ldm	lr!, {r0, r1, r2, r3}
   10ae0:	stmia	ip!, {r0, r1, r2, r3}
   10ae4:	ldm	lr, {r0, r1}
   10ae8:	stm	ip, {r0, r1}
   10aec:	add	ip, sp, #24
   10af0:	add	lr, sp, #48	; 0x30
   10af4:	ldm	lr!, {r0, r1, r2, r3}
   10af8:	stmia	ip!, {r0, r1, r2, r3}
   10afc:	ldm	lr, {r0, r1}
   10b00:	stm	ip, {r0, r1}
   10b04:	ldr	r0, [pc, #592]	; 10d5c <main@@Base+0x290>
   10b08:	bl	106bc <puts@plt>
   10b0c:	ldr	r0, [pc, #588]	; 10d60 <main@@Base+0x294>
   10b10:	bl	106b0 <printf@plt>
   10b14:	add	r6, sp, #20
   10b18:	add	r7, sp, #44	; 0x2c
   10b1c:	mov	r5, r6
   10b20:	ldr	r4, [pc, #572]	; 10d64 <main@@Base+0x298>
   10b24:	ldr	r1, [r5, #4]!
   10b28:	mov	r0, r4
   10b2c:	bl	106b0 <printf@plt>
   10b30:	cmp	r5, r7
   10b34:	bne	10b24 <main@@Base+0x58>
   10b38:	ldr	r0, [pc, #552]	; 10d68 <main@@Base+0x29c>
   10b3c:	bl	106bc <puts@plt>
   10b40:	ldr	r3, [pc, #548]	; 10d6c <main@@Base+0x2a0>
   10b44:	mov	r2, #4
   10b48:	mov	r1, #6
   10b4c:	add	r0, sp, #24
   10b50:	bl	108ac <sort@@Base>
   10b54:	ldr	r0, [pc, #532]	; 10d70 <main@@Base+0x2a4>
   10b58:	bl	106b0 <printf@plt>
   10b5c:	mov	r4, r6
   10b60:	ldr	r7, [pc, #508]	; 10d64 <main@@Base+0x298>
   10b64:	ldr	r1, [r4, #4]!
   10b68:	mov	r0, r7
   10b6c:	bl	106b0 <printf@plt>
   10b70:	cmp	r4, r5
   10b74:	bne	10b64 <main@@Base+0x98>
   10b78:	ldr	r0, [pc, #488]	; 10d68 <main@@Base+0x29c>
   10b7c:	bl	106bc <puts@plt>
   10b80:	add	ip, sp, #24
   10b84:	add	lr, sp, #48	; 0x30
   10b88:	ldm	lr!, {r0, r1, r2, r3}
   10b8c:	stmia	ip!, {r0, r1, r2, r3}
   10b90:	ldm	lr, {r0, r1}
   10b94:	stm	ip, {r0, r1}
   10b98:	ldr	r0, [pc, #468]	; 10d74 <main@@Base+0x2a8>
   10b9c:	bl	106bc <puts@plt>
   10ba0:	mov	r3, #4
   10ba4:	str	r3, [sp, #20]
   10ba8:	ldr	r2, [pc, #444]	; 10d6c <main@@Base+0x2a0>
   10bac:	str	r2, [sp]
   10bb0:	mov	r2, #6
   10bb4:	add	r1, sp, #24
   10bb8:	add	r0, sp, #20
   10bbc:	bl	10950 <linear_search@@Base>
   10bc0:	cmp	r0, #0
   10bc4:	beq	10d38 <main@@Base+0x26c>
   10bc8:	add	r2, sp, #24
   10bcc:	sub	r2, r0, r2
   10bd0:	asr	r2, r2, #2
   10bd4:	ldr	r1, [sp, #20]
   10bd8:	ldr	r0, [pc, #408]	; 10d78 <main@@Base+0x2ac>
   10bdc:	bl	106b0 <printf@plt>
   10be0:	add	ip, sp, #24
   10be4:	add	lr, sp, #48	; 0x30
   10be8:	ldm	lr!, {r0, r1, r2, r3}
   10bec:	stmia	ip!, {r0, r1, r2, r3}
   10bf0:	ldm	lr, {r0, r1}
   10bf4:	stm	ip, {r0, r1}
   10bf8:	ldr	r5, [pc, #364]	; 10d6c <main@@Base+0x2a0>
   10bfc:	mov	r3, r5
   10c00:	mov	r2, #4
   10c04:	mov	r1, #6
   10c08:	add	r0, sp, #24
   10c0c:	bl	108ac <sort@@Base>
   10c10:	ldr	r0, [pc, #356]	; 10d7c <main@@Base+0x2b0>
   10c14:	bl	106bc <puts@plt>
   10c18:	str	r5, [sp]
   10c1c:	mov	r3, #4
   10c20:	mov	r2, #6
   10c24:	add	r1, sp, #24
   10c28:	add	r0, sp, #20
   10c2c:	bl	109b4 <binary_search@@Base>
   10c30:	cmp	r0, #0
   10c34:	beq	10d48 <main@@Base+0x27c>
   10c38:	add	r2, sp, #24
   10c3c:	sub	r2, r0, r2
   10c40:	asr	r2, r2, #2
   10c44:	ldr	r1, [sp, #20]
   10c48:	ldr	r0, [pc, #296]	; 10d78 <main@@Base+0x2ac>
   10c4c:	bl	106b0 <printf@plt>
   10c50:	add	ip, sp, #24
   10c54:	add	lr, sp, #48	; 0x30
   10c58:	ldm	lr!, {r0, r1, r2, r3}
   10c5c:	stmia	ip!, {r0, r1, r2, r3}
   10c60:	ldm	lr, {r0, r1}
   10c64:	stm	ip, {r0, r1}
   10c68:	ldr	r0, [pc, #272]	; 10d80 <main@@Base+0x2b4>
   10c6c:	bl	106bc <puts@plt>
   10c70:	ldr	r0, [pc, #232]	; 10d60 <main@@Base+0x294>
   10c74:	bl	106b0 <printf@plt>
   10c78:	mov	r5, r6
   10c7c:	ldr	r7, [pc, #224]	; 10d64 <main@@Base+0x298>
   10c80:	ldr	r1, [r5, #4]!
   10c84:	mov	r0, r7
   10c88:	bl	106b0 <printf@plt>
   10c8c:	cmp	r5, r4
   10c90:	bne	10c80 <main@@Base+0x1b4>
   10c94:	ldr	r0, [pc, #204]	; 10d68 <main@@Base+0x29c>
   10c98:	bl	106bc <puts@plt>
   10c9c:	ldr	r3, [pc, #200]	; 10d6c <main@@Base+0x2a0>
   10ca0:	mov	r2, #4
   10ca4:	mov	r1, #6
   10ca8:	add	r0, sp, #24
   10cac:	bl	10a2c <insertion_sort@@Base>
   10cb0:	ldr	r0, [pc, #184]	; 10d70 <main@@Base+0x2a4>
   10cb4:	bl	106b0 <printf@plt>
   10cb8:	ldr	r5, [pc, #164]	; 10d64 <main@@Base+0x298>
   10cbc:	ldr	r1, [r6, #4]!
   10cc0:	mov	r0, r5
   10cc4:	bl	106b0 <printf@plt>
   10cc8:	cmp	r6, r4
   10ccc:	bne	10cbc <main@@Base+0x1f0>
   10cd0:	ldr	r0, [pc, #144]	; 10d68 <main@@Base+0x29c>
   10cd4:	bl	106bc <puts@plt>
   10cd8:	ldr	r0, [pc, #164]	; 10d84 <main@@Base+0x2b8>
   10cdc:	bl	106bc <puts@plt>
   10ce0:	ldr	r3, [pc, #160]	; 10d88 <main@@Base+0x2bc>
   10ce4:	ldm	r3, {r0, r1}
   10ce8:	str	r0, [sp, #12]
   10cec:	strb	r1, [sp, #16]
   10cf0:	ldr	r0, [pc, #104]	; 10d60 <main@@Base+0x294>
   10cf4:	bl	106b0 <printf@plt>
   10cf8:	add	r0, sp, #12
   10cfc:	bl	106bc <puts@plt>
   10d00:	add	r0, sp, #12
   10d04:	bl	106e0 <strlen@plt>
   10d08:	ldr	r3, [pc, #124]	; 10d8c <main@@Base+0x2c0>
   10d0c:	mov	r2, #1
   10d10:	mov	r1, r0
   10d14:	add	r0, sp, #12
   10d18:	bl	108ac <sort@@Base>
   10d1c:	ldr	r0, [pc, #76]	; 10d70 <main@@Base+0x2a4>
   10d20:	bl	106b0 <printf@plt>
   10d24:	add	r0, sp, #12
   10d28:	bl	106bc <puts@plt>
   10d2c:	mov	r0, #0
   10d30:	add	sp, sp, #76	; 0x4c
   10d34:	pop	{r4, r5, r6, r7, pc}
   10d38:	ldr	r1, [sp, #20]
   10d3c:	ldr	r0, [pc, #76]	; 10d90 <main@@Base+0x2c4>
   10d40:	bl	106b0 <printf@plt>
   10d44:	b	10be0 <main@@Base+0x114>
   10d48:	ldr	r1, [sp, #20]
   10d4c:	ldr	r0, [pc, #60]	; 10d90 <main@@Base+0x2c4>
   10d50:	bl	106b0 <printf@plt>
   10d54:	b	10c50 <main@@Base+0x184>
   10d58:	andeq	r0, r1, r4, lsl #28
   10d5c:	andeq	r0, r1, ip, lsl lr
   10d60:	andeq	r0, r1, ip, lsr #28
   10d64:	andeq	r0, r1, r4, lsr lr
   10d68:	andeq	r0, r1, r8, ror lr
   10d6c:	andeq	r0, r1, r0, lsr #16
   10d70:	andeq	r0, r1, r8, lsr lr
   10d74:	andeq	r0, r1, r0, asr #28
   10d78:	andeq	r0, r1, ip, asr #28
   10d7c:	andeq	r0, r1, r0, lsr #29
   10d80:	andeq	r0, r1, ip, lsr #29
   10d84:			; <UNDEFINED> instruction: 0x00010eb8
   10d88:	andeq	r0, r1, r4, asr #29
   10d8c:	andeq	r0, r1, r8, asr #16
   10d90:	andeq	r0, r1, ip, ror lr

00010d94 <__libc_csu_init@@Base>:
   10d94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d98:	mov	r7, r0
   10d9c:	ldr	r6, [pc, #72]	; 10dec <__libc_csu_init@@Base+0x58>
   10da0:	ldr	r5, [pc, #72]	; 10df0 <__libc_csu_init@@Base+0x5c>
   10da4:	add	r6, pc, r6
   10da8:	add	r5, pc, r5
   10dac:	sub	r6, r6, r5
   10db0:	mov	r8, r1
   10db4:	mov	r9, r2
   10db8:	bl	10690 <printf@plt-0x20>
   10dbc:	asrs	r6, r6, #2
   10dc0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10dc4:	mov	r4, #0
   10dc8:	add	r4, r4, #1
   10dcc:	ldr	r3, [r5], #4
   10dd0:	mov	r2, r9
   10dd4:	mov	r1, r8
   10dd8:	mov	r0, r7
   10ddc:	blx	r3
   10de0:	cmp	r6, r4
   10de4:	bne	10dc8 <__libc_csu_init@@Base+0x34>
   10de8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10dec:	andeq	r0, r1, r4, ror #2
   10df0:	andeq	r0, r1, ip, asr r1

00010df4 <__libc_csu_fini@@Base>:
   10df4:	bx	lr

Disassembly of section .fini:

00010df8 <.fini>:
   10df8:	push	{r3, lr}
   10dfc:	pop	{r3, pc}
