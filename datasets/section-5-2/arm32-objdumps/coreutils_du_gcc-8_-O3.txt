
../repos/coreutils/src/du:     file format elf32-littlearm


Disassembly of section .init:

00011674 <.init>:
   11674:	push	{r3, lr}
   11678:	bl	137fc <__assert_fail@plt+0x1c58>
   1167c:	pop	{r3, pc}

Disassembly of section .plt:

00011680 <pthread_mutex_unlock@plt-0x14>:
   11680:	push	{lr}		; (str lr, [sp, #-4]!)
   11684:	ldr	lr, [pc, #4]	; 11690 <pthread_mutex_unlock@plt-0x4>
   11688:	add	lr, pc, lr
   1168c:	ldr	pc, [lr, #8]!
   11690:	andeq	fp, r3, r0, ror r9

00011694 <pthread_mutex_unlock@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #241664	; 0x3b000
   1169c:	ldr	pc, [ip, #2416]!	; 0x970

000116a0 <fstatfs64@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #241664	; 0x3b000
   116a8:	ldr	pc, [ip, #2408]!	; 0x968

000116ac <calloc@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #241664	; 0x3b000
   116b4:	ldr	pc, [ip, #2400]!	; 0x960

000116b8 <fputs_unlocked@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #241664	; 0x3b000
   116c0:	ldr	pc, [ip, #2392]!	; 0x958

000116c4 <wctype@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #241664	; 0x3b000
   116cc:	ldr	pc, [ip, #2384]!	; 0x950

000116d0 <raise@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #241664	; 0x3b000
   116d8:	ldr	pc, [ip, #2376]!	; 0x948

000116dc <wcrtomb@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #241664	; 0x3b000
   116e4:	ldr	pc, [ip, #2368]!	; 0x940

000116e8 <gmtime_r@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #241664	; 0x3b000
   116f0:	ldr	pc, [ip, #2360]!	; 0x938

000116f4 <__getdelim@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #241664	; 0x3b000
   116fc:	ldr	pc, [ip, #2352]!	; 0x930

00011700 <iswctype@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #241664	; 0x3b000
   11708:	ldr	pc, [ip, #2344]!	; 0x928

0001170c <strcmp@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #241664	; 0x3b000
   11714:	ldr	pc, [ip, #2336]!	; 0x920

00011718 <pthread_mutex_destroy@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #241664	; 0x3b000
   11720:	ldr	pc, [ip, #2328]!	; 0x918

00011724 <mktime@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #241664	; 0x3b000
   1172c:	ldr	pc, [ip, #2320]!	; 0x910

00011730 <fflush@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #241664	; 0x3b000
   11738:	ldr	pc, [ip, #2312]!	; 0x908

0001173c <wcwidth@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #241664	; 0x3b000
   11744:	ldr	pc, [ip, #2304]!	; 0x900

00011748 <memmove@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #241664	; 0x3b000
   11750:	ldr	pc, [ip, #2296]!	; 0x8f8

00011754 <free@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #241664	; 0x3b000
   1175c:	ldr	pc, [ip, #2288]!	; 0x8f0

00011760 <pthread_mutex_lock@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #241664	; 0x3b000
   11768:	ldr	pc, [ip, #2280]!	; 0x8e8

0001176c <ferror@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #241664	; 0x3b000
   11774:	ldr	pc, [ip, #2272]!	; 0x8e0

00011778 <_exit@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #241664	; 0x3b000
   11780:	ldr	pc, [ip, #2264]!	; 0x8d8

00011784 <memcpy@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #241664	; 0x3b000
   1178c:	ldr	pc, [ip, #2256]!	; 0x8d0

00011790 <pthread_mutex_init@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #241664	; 0x3b000
   11798:	ldr	pc, [ip, #2248]!	; 0x8c8

0001179c <__strtoull_internal@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #241664	; 0x3b000
   117a4:	ldr	pc, [ip, #2240]!	; 0x8c0

000117a8 <towlower@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #241664	; 0x3b000
   117b0:	ldr	pc, [ip, #2232]!	; 0x8b8

000117b4 <mbsinit@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #241664	; 0x3b000
   117bc:	ldr	pc, [ip, #2224]!	; 0x8b0

000117c0 <memcmp@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #241664	; 0x3b000
   117c8:	ldr	pc, [ip, #2216]!	; 0x8a8

000117cc <fputc_unlocked@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #241664	; 0x3b000
   117d4:	ldr	pc, [ip, #2208]!	; 0x8a0

000117d8 <dcgettext@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #241664	; 0x3b000
   117e0:	ldr	pc, [ip, #2200]!	; 0x898

000117e4 <dup2@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #241664	; 0x3b000
   117ec:	ldr	pc, [ip, #2192]!	; 0x890

000117f0 <realloc@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #241664	; 0x3b000
   117f8:	ldr	pc, [ip, #2184]!	; 0x888

000117fc <localtime_r@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #241664	; 0x3b000
   11804:	ldr	pc, [ip, #2176]!	; 0x880

00011808 <textdomain@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #241664	; 0x3b000
   11810:	ldr	pc, [ip, #2168]!	; 0x878

00011814 <iswcntrl@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #241664	; 0x3b000
   1181c:	ldr	pc, [ip, #2160]!	; 0x870

00011820 <__fxstatat64@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #241664	; 0x3b000
   11828:	ldr	pc, [ip, #2152]!	; 0x868

0001182c <fflush_unlocked@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #241664	; 0x3b000
   11834:	ldr	pc, [ip, #2144]!	; 0x860

00011838 <iswprint@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #241664	; 0x3b000
   11840:	ldr	pc, [ip, #2136]!	; 0x858

00011844 <tzset@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #241664	; 0x3b000
   1184c:	ldr	pc, [ip, #2128]!	; 0x850

00011850 <__fxstat64@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #241664	; 0x3b000
   11858:	ldr	pc, [ip, #2120]!	; 0x848

0001185c <__memcpy_chk@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #241664	; 0x3b000
   11864:	ldr	pc, [ip, #2112]!	; 0x840

00011868 <fwrite@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #241664	; 0x3b000
   11870:	ldr	pc, [ip, #2104]!	; 0x838

00011874 <lseek64@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #241664	; 0x3b000
   1187c:	ldr	pc, [ip, #2096]!	; 0x830

00011880 <__ctype_get_mb_cur_max@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #241664	; 0x3b000
   11888:	ldr	pc, [ip, #2088]!	; 0x828

0001188c <hasmntopt@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #241664	; 0x3b000
   11894:	ldr	pc, [ip, #2080]!	; 0x820

00011898 <strcpy@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #241664	; 0x3b000
   118a0:	ldr	pc, [ip, #2072]!	; 0x818

000118a4 <__fpending@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #241664	; 0x3b000
   118ac:	ldr	pc, [ip, #2064]!	; 0x810

000118b0 <mbrtowc@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #241664	; 0x3b000
   118b8:	ldr	pc, [ip, #2056]!	; 0x808

000118bc <error@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #241664	; 0x3b000
   118c4:	ldr	pc, [ip, #2048]!	; 0x800

000118c8 <getmntent@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #241664	; 0x3b000
   118d0:	ldr	pc, [ip, #2040]!	; 0x7f8

000118d4 <fnmatch@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #241664	; 0x3b000
   118dc:	ldr	pc, [ip, #2032]!	; 0x7f0

000118e0 <open64@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #241664	; 0x3b000
   118e8:	ldr	pc, [ip, #2024]!	; 0x7e8

000118ec <getenv@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #241664	; 0x3b000
   118f4:	ldr	pc, [ip, #2016]!	; 0x7e0

000118f8 <malloc@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #241664	; 0x3b000
   11900:	ldr	pc, [ip, #2008]!	; 0x7d8

00011904 <__libc_start_main@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #241664	; 0x3b000
   1190c:	ldr	pc, [ip, #2000]!	; 0x7d0

00011910 <strftime@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #241664	; 0x3b000
   11918:	ldr	pc, [ip, #1992]!	; 0x7c8

0001191c <__freading@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #241664	; 0x3b000
   11924:	ldr	pc, [ip, #1984]!	; 0x7c0

00011928 <__ctype_tolower_loc@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #241664	; 0x3b000
   11930:	ldr	pc, [ip, #1976]!	; 0x7b8

00011934 <__ctype_toupper_loc@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #241664	; 0x3b000
   1193c:	ldr	pc, [ip, #1968]!	; 0x7b0

00011940 <__gmon_start__@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #241664	; 0x3b000
   11948:	ldr	pc, [ip, #1960]!	; 0x7a8

0001194c <freopen64@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #241664	; 0x3b000
   11954:	ldr	pc, [ip, #1952]!	; 0x7a0

00011958 <getopt_long@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #241664	; 0x3b000
   11960:	ldr	pc, [ip, #1944]!	; 0x798

00011964 <__ctype_b_loc@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #241664	; 0x3b000
   1196c:	ldr	pc, [ip, #1936]!	; 0x790

00011970 <exit@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #241664	; 0x3b000
   11978:	ldr	pc, [ip, #1928]!	; 0x788

0001197c <feof@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #241664	; 0x3b000
   11984:	ldr	pc, [ip, #1920]!	; 0x780

00011988 <strlen@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #241664	; 0x3b000
   11990:	ldr	pc, [ip, #1912]!	; 0x778

00011994 <strchr@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #241664	; 0x3b000
   1199c:	ldr	pc, [ip, #1904]!	; 0x770

000119a0 <setenv@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #241664	; 0x3b000
   119a8:	ldr	pc, [ip, #1896]!	; 0x768

000119ac <openat64@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #241664	; 0x3b000
   119b4:	ldr	pc, [ip, #1888]!	; 0x760

000119b8 <__errno_location@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #241664	; 0x3b000
   119c0:	ldr	pc, [ip, #1880]!	; 0x758

000119c4 <iswalnum@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #241664	; 0x3b000
   119cc:	ldr	pc, [ip, #1872]!	; 0x750

000119d0 <__sprintf_chk@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #241664	; 0x3b000
   119d8:	ldr	pc, [ip, #1864]!	; 0x748

000119dc <__cxa_atexit@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #241664	; 0x3b000
   119e4:	ldr	pc, [ip, #1856]!	; 0x740

000119e8 <memset@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #241664	; 0x3b000
   119f0:	ldr	pc, [ip, #1848]!	; 0x738

000119f4 <btowc@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #241664	; 0x3b000
   119fc:	ldr	pc, [ip, #1840]!	; 0x730

00011a00 <__printf_chk@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #241664	; 0x3b000
   11a08:	ldr	pc, [ip, #1832]!	; 0x728

00011a0c <fileno@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #241664	; 0x3b000
   11a14:	ldr	pc, [ip, #1824]!	; 0x720

00011a18 <__fprintf_chk@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #241664	; 0x3b000
   11a20:	ldr	pc, [ip, #1816]!	; 0x718

00011a24 <memchr@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #241664	; 0x3b000
   11a2c:	ldr	pc, [ip, #1808]!	; 0x710

00011a30 <fclose@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #241664	; 0x3b000
   11a38:	ldr	pc, [ip, #1800]!	; 0x708

00011a3c <fseeko64@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #241664	; 0x3b000
   11a44:	ldr	pc, [ip, #1792]!	; 0x700

00011a48 <endmntent@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #241664	; 0x3b000
   11a50:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a54 <fcntl64@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #241664	; 0x3b000
   11a5c:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a60 <__overflow@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #241664	; 0x3b000
   11a68:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a6c <setlocale@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #241664	; 0x3b000
   11a74:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a78 <strrchr@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #241664	; 0x3b000
   11a80:	ldr	pc, [ip, #1752]!	; 0x6d8

00011a84 <nl_langinfo@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #241664	; 0x3b000
   11a8c:	ldr	pc, [ip, #1744]!	; 0x6d0

00011a90 <fputc@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #241664	; 0x3b000
   11a98:	ldr	pc, [ip, #1736]!	; 0x6c8

00011a9c <sscanf@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #241664	; 0x3b000
   11aa4:	ldr	pc, [ip, #1728]!	; 0x6c0

00011aa8 <localeconv@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #241664	; 0x3b000
   11ab0:	ldr	pc, [ip, #1720]!	; 0x6b8

00011ab4 <readdir64@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #241664	; 0x3b000
   11abc:	ldr	pc, [ip, #1712]!	; 0x6b0

00011ac0 <fdopendir@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #241664	; 0x3b000
   11ac8:	ldr	pc, [ip, #1704]!	; 0x6a8

00011acc <timegm@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #241664	; 0x3b000
   11ad4:	ldr	pc, [ip, #1696]!	; 0x6a0

00011ad8 <dirfd@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #241664	; 0x3b000
   11ae0:	ldr	pc, [ip, #1688]!	; 0x698

00011ae4 <fchdir@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #241664	; 0x3b000
   11aec:	ldr	pc, [ip, #1680]!	; 0x690

00011af0 <__strtoll_internal@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #241664	; 0x3b000
   11af8:	ldr	pc, [ip, #1672]!	; 0x688

00011afc <fopen64@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #241664	; 0x3b000
   11b04:	ldr	pc, [ip, #1664]!	; 0x680

00011b08 <qsort@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #241664	; 0x3b000
   11b10:	ldr	pc, [ip, #1656]!	; 0x678

00011b14 <setmntent@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #241664	; 0x3b000
   11b1c:	ldr	pc, [ip, #1648]!	; 0x670

00011b20 <bindtextdomain@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #241664	; 0x3b000
   11b28:	ldr	pc, [ip, #1640]!	; 0x668

00011b2c <getdelim@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #241664	; 0x3b000
   11b34:	ldr	pc, [ip, #1632]!	; 0x660

00011b38 <__xstat64@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #241664	; 0x3b000
   11b40:	ldr	pc, [ip, #1624]!	; 0x658

00011b44 <unsetenv@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #241664	; 0x3b000
   11b4c:	ldr	pc, [ip, #1616]!	; 0x650

00011b50 <towupper@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #241664	; 0x3b000
   11b58:	ldr	pc, [ip, #1608]!	; 0x648

00011b5c <strncmp@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #241664	; 0x3b000
   11b64:	ldr	pc, [ip, #1600]!	; 0x640

00011b68 <abort@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #241664	; 0x3b000
   11b70:	ldr	pc, [ip, #1592]!	; 0x638

00011b74 <getc@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #241664	; 0x3b000
   11b7c:	ldr	pc, [ip, #1584]!	; 0x630

00011b80 <close@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #241664	; 0x3b000
   11b88:	ldr	pc, [ip, #1576]!	; 0x628

00011b8c <__lxstat64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #241664	; 0x3b000
   11b94:	ldr	pc, [ip, #1568]!	; 0x620

00011b98 <closedir@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #241664	; 0x3b000
   11ba0:	ldr	pc, [ip, #1560]!	; 0x618

00011ba4 <__assert_fail@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #241664	; 0x3b000
   11bac:	ldr	pc, [ip, #1552]!	; 0x610

Disassembly of section .text:

00011bb0 <.text>:
   11bb0:	movw	r3, #47404	; 0xb92c
   11bb4:	movt	r3, #3
   11bb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11bbc:	strd	r6, [sp, #8]
   11bc0:	mov	r2, #0
   11bc4:	mov	r6, r0
   11bc8:	strd	r8, [sp, #16]
   11bcc:	mov	r7, r2
   11bd0:	mov	r5, r1
   11bd4:	strd	sl, [sp, #24]
   11bd8:	movw	r9, #53832	; 0xd248
   11bdc:	movt	r9, #4
   11be0:	str	lr, [sp, #32]
   11be4:	sub	sp, sp, #236	; 0xec
   11be8:	mov	fp, #8
   11bec:	ldr	r0, [r1]
   11bf0:	add	sl, sp, #116	; 0x74
   11bf4:	str	r2, [sp, #28]
   11bf8:	str	r3, [sp, #120]	; 0x78
   11bfc:	mov	r3, #16
   11c00:	ldr	r4, [pc, #4080]	; 12bf8 <__assert_fail@plt+0x1054>
   11c04:	str	r3, [sp, #32]
   11c08:	str	r2, [sp, #40]	; 0x28
   11c0c:	str	r2, [sp, #124]	; 0x7c
   11c10:	bl	1fe2c <__assert_fail@plt+0xe288>
   11c14:	movw	r1, #49420	; 0xc10c
   11c18:	movt	r1, #3
   11c1c:	mov	r0, #6
   11c20:	bl	11a6c <setlocale@plt>
   11c24:	movw	r1, #47408	; 0xb930
   11c28:	movt	r1, #3
   11c2c:	movw	r0, #47224	; 0xb878
   11c30:	movt	r0, #3
   11c34:	bl	11b20 <bindtextdomain@plt>
   11c38:	movw	r0, #47224	; 0xb878
   11c3c:	movt	r0, #3
   11c40:	bl	11808 <textdomain@plt>
   11c44:	movw	r0, #17864	; 0x45c8
   11c48:	movt	r0, #1
   11c4c:	bl	3a744 <__assert_fail@plt+0x28ba0>
   11c50:	bl	15b40 <__assert_fail@plt+0x3f9c>
   11c54:	str	r0, [r9, #32]
   11c58:	movw	r0, #47432	; 0xb948
   11c5c:	movt	r0, #3
   11c60:	bl	118ec <getenv@plt>
   11c64:	add	r3, r4, #416	; 0x1a0
   11c68:	add	r2, r9, fp
   11c6c:	mov	r1, r9
   11c70:	str	r3, [sp, #44]	; 0x2c
   11c74:	mov	r3, #1
   11c78:	str	r3, [sp, #60]	; 0x3c
   11c7c:	bl	1e5ec <__assert_fail@plt+0xca48>
   11c80:	mvn	ip, #0
   11c84:	movw	r2, #47448	; 0xb958
   11c88:	movt	r2, #3
   11c8c:	mov	r3, r4
   11c90:	str	sl, [sp]
   11c94:	mov	r1, r5
   11c98:	mov	r0, r6
   11c9c:	str	ip, [sp, #116]	; 0x74
   11ca0:	bl	11958 <getopt_long@plt>
   11ca4:	cmn	r0, #1
   11ca8:	beq	124e0 <__assert_fail@plt+0x93c>
   11cac:	add	r0, r0, #3
   11cb0:	movw	r3, #266	; 0x10a
   11cb4:	cmp	r0, r3
   11cb8:	ldrls	pc, [pc, r0, lsl #2]
   11cbc:	b	12490 <__assert_fail@plt+0x8ec>
   11cc0:	andeq	r2, r1, r8, asr #5
   11cc4:	andeq	r3, r1, r8, asr #9
   11cc8:	muleq	r1, r0, r4
   11ccc:	muleq	r1, r0, r4
   11cd0:	muleq	r1, r0, r4
   11cd4:	muleq	r1, r0, r4
   11cd8:	muleq	r1, r0, r4
   11cdc:	muleq	r1, r0, r4
   11ce0:	muleq	r1, r0, r4
   11ce4:	muleq	r1, r0, r4
   11ce8:	muleq	r1, r0, r4
   11cec:	muleq	r1, r0, r4
   11cf0:	muleq	r1, r0, r4
   11cf4:	muleq	r1, r0, r4
   11cf8:	muleq	r1, r0, r4
   11cfc:	muleq	r1, r0, r4
   11d00:	muleq	r1, r0, r4
   11d04:	muleq	r1, r0, r4
   11d08:	muleq	r1, r0, r4
   11d0c:	muleq	r1, r0, r4
   11d10:	muleq	r1, r0, r4
   11d14:	muleq	r1, r0, r4
   11d18:	muleq	r1, r0, r4
   11d1c:	muleq	r1, r0, r4
   11d20:	muleq	r1, r0, r4
   11d24:	muleq	r1, r0, r4
   11d28:	muleq	r1, r0, r4
   11d2c:	muleq	r1, r0, r4
   11d30:	muleq	r1, r0, r4
   11d34:	muleq	r1, r0, r4
   11d38:	muleq	r1, r0, r4
   11d3c:	muleq	r1, r0, r4
   11d40:	muleq	r1, r0, r4
   11d44:	muleq	r1, r0, r4
   11d48:	muleq	r1, r0, r4
   11d4c:	muleq	r1, r0, r4
   11d50:	muleq	r1, r0, r4
   11d54:	muleq	r1, r0, r4
   11d58:	muleq	r1, r0, r4
   11d5c:	muleq	r1, r0, r4
   11d60:	muleq	r1, r0, r4
   11d64:	muleq	r1, r0, r4
   11d68:	muleq	r1, r0, r4
   11d6c:	muleq	r1, r0, r4
   11d70:	muleq	r1, r0, r4
   11d74:	muleq	r1, r0, r4
   11d78:	muleq	r1, r0, r4
   11d7c:	muleq	r1, r0, r4
   11d80:	muleq	r1, r0, r4
   11d84:	muleq	r1, r0, r4
   11d88:	muleq	r1, r0, r4
   11d8c:			; <UNDEFINED> instruction: 0x000122bc
   11d90:	muleq	r1, r0, r4
   11d94:	muleq	r1, r0, r4
   11d98:	muleq	r1, r0, r4
   11d9c:	muleq	r1, r0, r4
   11da0:	muleq	r1, r0, r4
   11da4:	muleq	r1, r0, r4
   11da8:	muleq	r1, r0, r4
   11dac:	muleq	r1, r0, r4
   11db0:	muleq	r1, r0, r4
   11db4:	muleq	r1, r0, r4
   11db8:	muleq	r1, r0, r4
   11dbc:	muleq	r1, r0, r4
   11dc0:	muleq	r1, r0, r4
   11dc4:	muleq	r1, r0, r4
   11dc8:	muleq	r1, r0, r4
   11dcc:	muleq	r1, r0, r4
   11dd0:	muleq	r1, r0, r4
   11dd4:	andeq	r2, r1, r4, lsl #5
   11dd8:	muleq	r1, r0, r4
   11ddc:	andeq	r2, r1, r8, ror r2
   11de0:	muleq	r1, r0, r4
   11de4:	muleq	r1, r0, r4
   11de8:	muleq	r1, r0, r4
   11dec:	andeq	r2, r1, r8, ror r2
   11df0:	muleq	r1, r0, r4
   11df4:	muleq	r1, r0, r4
   11df8:	muleq	r1, r0, r4
   11dfc:	andeq	r2, r1, ip, ror #4
   11e00:	muleq	r1, r0, r4
   11e04:	muleq	r1, r0, r4
   11e08:	muleq	r1, r0, r4
   11e0c:	andeq	r2, r1, r0, ror #4
   11e10:	muleq	r1, r0, r4
   11e14:	muleq	r1, r0, r4
   11e18:	andeq	r2, r1, r4, asr r2
   11e1c:	muleq	r1, r0, r4
   11e20:	muleq	r1, r0, r4
   11e24:	muleq	r1, r0, r4
   11e28:	muleq	r1, r0, r4
   11e2c:	andeq	r2, r1, r8, ror #3
   11e30:	muleq	r1, r0, r4
   11e34:	muleq	r1, r0, r4
   11e38:	muleq	r1, r0, r4
   11e3c:	muleq	r1, r0, r4
   11e40:	muleq	r1, r0, r4
   11e44:	muleq	r1, r0, r4
   11e48:	muleq	r1, r0, r4
   11e4c:	muleq	r1, r0, r4
   11e50:	ldrdeq	r2, [r1], -ip
   11e54:			; <UNDEFINED> instruction: 0x000121bc
   11e58:			; <UNDEFINED> instruction: 0x000121b0
   11e5c:	andeq	r2, r1, r8, asr #2
   11e60:	muleq	r1, r0, r4
   11e64:	muleq	r1, r0, r4
   11e68:	muleq	r1, r0, r4
   11e6c:	andeq	r2, r1, r0, lsr r1
   11e70:	muleq	r1, r0, r4
   11e74:	muleq	r1, r0, r4
   11e78:	andeq	r2, r1, r8, lsl r1
   11e7c:	andeq	r2, r1, ip, lsl #2
   11e80:	strdeq	r2, [r1], -r4
   11e84:	muleq	r1, r0, r4
   11e88:	muleq	r1, r0, r4
   11e8c:	muleq	r1, r0, r4
   11e90:	muleq	r1, r0, r4
   11e94:	muleq	r1, r0, r4
   11e98:	andeq	r2, r1, ip, ror #1
   11e9c:	andeq	r2, r1, r0, lsr #8
   11ea0:	muleq	r1, r0, r4
   11ea4:	muleq	r1, r0, r4
   11ea8:	muleq	r1, r0, r4
   11eac:	andeq	r2, r1, r8, lsl r4
   11eb0:	muleq	r1, r0, r4
   11eb4:	muleq	r1, r0, r4
   11eb8:	muleq	r1, r0, r4
   11ebc:	muleq	r1, r0, r4
   11ec0:	muleq	r1, r0, r4
   11ec4:	muleq	r1, r0, r4
   11ec8:	muleq	r1, r0, r4
   11ecc:	muleq	r1, r0, r4
   11ed0:	muleq	r1, r0, r4
   11ed4:	muleq	r1, r0, r4
   11ed8:	muleq	r1, r0, r4
   11edc:	muleq	r1, r0, r4
   11ee0:	muleq	r1, r0, r4
   11ee4:	muleq	r1, r0, r4
   11ee8:	muleq	r1, r0, r4
   11eec:	muleq	r1, r0, r4
   11ef0:	muleq	r1, r0, r4
   11ef4:	muleq	r1, r0, r4
   11ef8:	muleq	r1, r0, r4
   11efc:	muleq	r1, r0, r4
   11f00:	muleq	r1, r0, r4
   11f04:	muleq	r1, r0, r4
   11f08:	muleq	r1, r0, r4
   11f0c:	muleq	r1, r0, r4
   11f10:	muleq	r1, r0, r4
   11f14:	muleq	r1, r0, r4
   11f18:	muleq	r1, r0, r4
   11f1c:	muleq	r1, r0, r4
   11f20:	muleq	r1, r0, r4
   11f24:	muleq	r1, r0, r4
   11f28:	muleq	r1, r0, r4
   11f2c:	muleq	r1, r0, r4
   11f30:	muleq	r1, r0, r4
   11f34:	muleq	r1, r0, r4
   11f38:	muleq	r1, r0, r4
   11f3c:	muleq	r1, r0, r4
   11f40:	muleq	r1, r0, r4
   11f44:	muleq	r1, r0, r4
   11f48:	muleq	r1, r0, r4
   11f4c:	muleq	r1, r0, r4
   11f50:	muleq	r1, r0, r4
   11f54:	muleq	r1, r0, r4
   11f58:	muleq	r1, r0, r4
   11f5c:	muleq	r1, r0, r4
   11f60:	muleq	r1, r0, r4
   11f64:	muleq	r1, r0, r4
   11f68:	muleq	r1, r0, r4
   11f6c:	muleq	r1, r0, r4
   11f70:	muleq	r1, r0, r4
   11f74:	muleq	r1, r0, r4
   11f78:	muleq	r1, r0, r4
   11f7c:	muleq	r1, r0, r4
   11f80:	muleq	r1, r0, r4
   11f84:	muleq	r1, r0, r4
   11f88:	muleq	r1, r0, r4
   11f8c:	muleq	r1, r0, r4
   11f90:	muleq	r1, r0, r4
   11f94:	muleq	r1, r0, r4
   11f98:	muleq	r1, r0, r4
   11f9c:	muleq	r1, r0, r4
   11fa0:	muleq	r1, r0, r4
   11fa4:	muleq	r1, r0, r4
   11fa8:	muleq	r1, r0, r4
   11fac:	muleq	r1, r0, r4
   11fb0:	muleq	r1, r0, r4
   11fb4:	muleq	r1, r0, r4
   11fb8:	muleq	r1, r0, r4
   11fbc:	muleq	r1, r0, r4
   11fc0:	muleq	r1, r0, r4
   11fc4:	muleq	r1, r0, r4
   11fc8:	muleq	r1, r0, r4
   11fcc:	muleq	r1, r0, r4
   11fd0:	muleq	r1, r0, r4
   11fd4:	muleq	r1, r0, r4
   11fd8:	muleq	r1, r0, r4
   11fdc:	muleq	r1, r0, r4
   11fe0:	muleq	r1, r0, r4
   11fe4:	muleq	r1, r0, r4
   11fe8:	muleq	r1, r0, r4
   11fec:	muleq	r1, r0, r4
   11ff0:	muleq	r1, r0, r4
   11ff4:	muleq	r1, r0, r4
   11ff8:	muleq	r1, r0, r4
   11ffc:	muleq	r1, r0, r4
   12000:	muleq	r1, r0, r4
   12004:	muleq	r1, r0, r4
   12008:	muleq	r1, r0, r4
   1200c:	muleq	r1, r0, r4
   12010:	muleq	r1, r0, r4
   12014:	muleq	r1, r0, r4
   12018:	muleq	r1, r0, r4
   1201c:	muleq	r1, r0, r4
   12020:	muleq	r1, r0, r4
   12024:	muleq	r1, r0, r4
   12028:	muleq	r1, r0, r4
   1202c:	muleq	r1, r0, r4
   12030:	muleq	r1, r0, r4
   12034:	muleq	r1, r0, r4
   12038:	muleq	r1, r0, r4
   1203c:	muleq	r1, r0, r4
   12040:	muleq	r1, r0, r4
   12044:	muleq	r1, r0, r4
   12048:	muleq	r1, r0, r4
   1204c:	muleq	r1, r0, r4
   12050:	muleq	r1, r0, r4
   12054:	muleq	r1, r0, r4
   12058:	muleq	r1, r0, r4
   1205c:	muleq	r1, r0, r4
   12060:	muleq	r1, r0, r4
   12064:	muleq	r1, r0, r4
   12068:	muleq	r1, r0, r4
   1206c:	muleq	r1, r0, r4
   12070:	muleq	r1, r0, r4
   12074:	muleq	r1, r0, r4
   12078:	muleq	r1, r0, r4
   1207c:	muleq	r1, r0, r4
   12080:	muleq	r1, r0, r4
   12084:	muleq	r1, r0, r4
   12088:	muleq	r1, r0, r4
   1208c:	muleq	r1, r0, r4
   12090:	muleq	r1, r0, r4
   12094:	muleq	r1, r0, r4
   12098:	muleq	r1, r0, r4
   1209c:	muleq	r1, r0, r4
   120a0:	muleq	r1, r0, r4
   120a4:	muleq	r1, r0, r4
   120a8:	muleq	r1, r0, r4
   120ac:	muleq	r1, r0, r4
   120b0:	muleq	r1, r0, r4
   120b4:	muleq	r1, r0, r4
   120b8:	muleq	r1, r0, r4
   120bc:	muleq	r1, r0, r4
   120c0:	muleq	r1, r0, r4
   120c4:	muleq	r1, r0, r4
   120c8:	muleq	r1, r0, r4
   120cc:	andeq	r2, r1, ip, lsl #8
   120d0:	strdeq	r2, [r1], -r0
   120d4:	ldrdeq	r2, [r1], -ip
   120d8:	andeq	r2, r1, r4, asr #7
   120dc:	muleq	r1, r0, r4
   120e0:	andeq	r2, r1, r0, asr r3
   120e4:	andeq	r2, r1, ip, lsr r3
   120e8:	andeq	r2, r1, r0, lsr r3
   120ec:	mov	r7, #1
   120f0:	b	11c80 <__assert_fail@plt+0xdc>
   120f4:	mov	r1, #0
   120f8:	mov	r2, #1048576	; 0x100000
   120fc:	mov	r3, #0
   12100:	str	r1, [r9]
   12104:	strd	r2, [r9, #8]
   12108:	b	11c80 <__assert_fail@plt+0xdc>
   1210c:	mov	r3, #1
   12110:	strb	r3, [r9, #39]	; 0x27
   12114:	b	11c80 <__assert_fail@plt+0xdc>
   12118:	mov	r1, #0
   1211c:	mov	r2, #1024	; 0x400
   12120:	mov	r3, #0
   12124:	str	r1, [r9]
   12128:	strd	r2, [r9, #8]
   1212c:	b	11c80 <__assert_fail@plt+0xdc>
   12130:	mov	r1, #176	; 0xb0
   12134:	mov	r2, #1
   12138:	mov	r3, #0
   1213c:	str	r1, [r9]
   12140:	strd	r2, [r9, #8]
   12144:	b	11c80 <__assert_fail@plt+0xdc>
   12148:	movw	r1, #49420	; 0xc10c
   1214c:	movt	r1, #3
   12150:	mov	r2, #0
   12154:	movw	r8, #53824	; 0xd240
   12158:	movt	r8, #4
   1215c:	add	r3, sp, #128	; 0x80
   12160:	str	r1, [sp]
   12164:	mov	r1, r2
   12168:	ldr	r0, [r8]
   1216c:	bl	38258 <__assert_fail@plt+0x266b4>
   12170:	cmp	r0, #0
   12174:	bne	1249c <__assert_fail@plt+0x8f8>
   12178:	ldrd	r2, [sp, #128]	; 0x80
   1217c:	mov	r1, #0
   12180:	mvn	r0, #0
   12184:	cmp	r3, r1
   12188:	strd	r2, [sp, #48]	; 0x30
   1218c:	cmpeq	r2, r0
   12190:	bhi	1249c <__assert_fail@plt+0x8f8>
   12194:	mov	r2, #1
   12198:	movw	r3, #53708	; 0xd1cc
   1219c:	movt	r3, #4
   121a0:	str	r2, [sp, #40]	; 0x28
   121a4:	ldr	r2, [sp, #48]	; 0x30
   121a8:	str	r2, [r3]
   121ac:	b	11c80 <__assert_fail@plt+0xdc>
   121b0:	mov	r3, #1
   121b4:	strb	r3, [r9, #38]	; 0x26
   121b8:	b	11c80 <__assert_fail@plt+0xdc>
   121bc:	mov	r3, #1
   121c0:	mov	r2, #0
   121c4:	mov	r0, #1
   121c8:	mov	r1, #0
   121cc:	str	r2, [r9]
   121d0:	strd	r0, [r9, #8]
   121d4:	strb	r3, [r9, #37]	; 0x25
   121d8:	b	11c80 <__assert_fail@plt+0xdc>
   121dc:	mov	r3, #1
   121e0:	strb	r3, [r9, #36]	; 0x24
   121e4:	b	11c80 <__assert_fail@plt+0xdc>
   121e8:	mov	r2, #10
   121ec:	movw	r8, #53824	; 0xd240
   121f0:	movt	r8, #4
   121f4:	movw	r0, #24528	; 0x5fd0
   121f8:	movt	r0, #1
   121fc:	mov	r3, #268435456	; 0x10000000
   12200:	str	r2, [sp]
   12204:	ldr	r2, [r8]
   12208:	ldr	r1, [r9, #32]
   1220c:	bl	16eb4 <__assert_fail@plt+0x5310>
   12210:	cmp	r0, #0
   12214:	beq	11c80 <__assert_fail@plt+0xdc>
   12218:	bl	119b8 <__errno_location@plt>
   1221c:	ldr	r3, [r0]
   12220:	mov	r0, #0
   12224:	mov	r1, #3
   12228:	ldr	r2, [r8]
   1222c:	str	r3, [sp, #48]	; 0x30
   12230:	str	r0, [sp, #60]	; 0x3c
   12234:	bl	22ff0 <__assert_fail@plt+0x1144c>
   12238:	mov	r3, r0
   1223c:	movw	r2, #49108	; 0xbfd4
   12240:	movt	r2, #3
   12244:	mov	r0, #0
   12248:	ldr	r1, [sp, #48]	; 0x30
   1224c:	bl	118bc <error@plt>
   12250:	b	11c80 <__assert_fail@plt+0xdc>
   12254:	mov	r3, #1
   12258:	strb	r3, [r9, #48]	; 0x30
   1225c:	b	11c80 <__assert_fail@plt+0xdc>
   12260:	mov	r3, #16
   12264:	str	r3, [sp, #32]
   12268:	b	11c80 <__assert_fail@plt+0xdc>
   1226c:	mov	r3, #2
   12270:	str	r3, [sp, #32]
   12274:	b	11c80 <__assert_fail@plt+0xdc>
   12278:	mov	r3, #17
   1227c:	str	r3, [sp, #32]
   12280:	b	11c80 <__assert_fail@plt+0xdc>
   12284:	ldr	r2, [pc, #2380]	; 12bd8 <__assert_fail@plt+0x1034>
   12288:	movw	r8, #53824	; 0xd240
   1228c:	movt	r8, #4
   12290:	ldr	r0, [r8]
   12294:	sub	r1, r2, #8
   12298:	bl	1e5ec <__assert_fail@plt+0xca48>
   1229c:	cmp	r0, #0
   122a0:	beq	11c80 <__assert_fail@plt+0xdc>
   122a4:	ldr	ip, [r8]
   122a8:	mov	r2, #66	; 0x42
   122ac:	ldr	r3, [pc, #2372]	; 12bf8 <__assert_fail@plt+0x1054>
   122b0:	ldr	r1, [sp, #116]	; 0x74
   122b4:	str	ip, [sp]
   122b8:	bl	381c8 <__assert_fail@plt+0x26624>
   122bc:	mov	r3, #1
   122c0:	strb	r3, [r9, #28]
   122c4:	b	11c80 <__assert_fail@plt+0xdc>
   122c8:	movw	r2, #47560	; 0xb9c8
   122cc:	movt	r2, #3
   122d0:	movw	r3, #47576	; 0xb9d8
   122d4:	movt	r3, #3
   122d8:	movw	r1, #47588	; 0xb9e4
   122dc:	movt	r1, #3
   122e0:	mov	r4, #0
   122e4:	movw	r0, #53820	; 0xd23c
   122e8:	movt	r0, #4
   122ec:	str	r2, [sp, #12]
   122f0:	movw	r2, #47604	; 0xb9f4
   122f4:	movt	r2, #3
   122f8:	stmib	sp, {r1, r3}
   122fc:	movw	r3, #53712	; 0xd1d0
   12300:	movt	r3, #4
   12304:	movw	r1, #43476	; 0xa9d4
   12308:	movt	r1, #3
   1230c:	str	r2, [sp]
   12310:	movw	r2, #47220	; 0xb874
   12314:	movt	r2, #3
   12318:	str	r4, [sp, #16]
   1231c:	ldr	r0, [r0]
   12320:	ldr	r3, [r3]
   12324:	bl	368c8 <__assert_fail@plt+0x24d24>
   12328:	mov	r0, r4
   1232c:	bl	11970 <exit@plt>
   12330:	mov	r3, #1
   12334:	strb	r3, [r9, #16]
   12338:	b	11c80 <__assert_fail@plt+0xdc>
   1233c:	movw	r3, #53824	; 0xd240
   12340:	movt	r3, #4
   12344:	ldr	r3, [r3]
   12348:	str	r3, [r9, #56]	; 0x38
   1234c:	b	11c80 <__assert_fail@plt+0xdc>
   12350:	movw	r3, #53824	; 0xd240
   12354:	movt	r3, #4
   12358:	ldr	r1, [r3]
   1235c:	mov	r3, #1
   12360:	strb	r3, [r9, #17]
   12364:	cmp	r1, #0
   12368:	beq	123a8 <__assert_fail@plt+0x804>
   1236c:	movw	r0, #53716	; 0xd1d4
   12370:	movt	r0, #4
   12374:	str	r3, [sp, #8]
   12378:	ldr	ip, [r0]
   1237c:	mov	r3, #4
   12380:	movw	r0, #47548	; 0xb9bc
   12384:	movt	r0, #3
   12388:	ldr	r2, [pc, #2124]	; 12bdc <__assert_fail@plt+0x1038>
   1238c:	stm	sp, {r3, ip}
   12390:	ldr	r3, [sp, #44]	; 0x2c
   12394:	bl	14280 <__assert_fail@plt+0x26dc>
   12398:	movw	r3, #42856	; 0xa768
   1239c:	movt	r3, #3
   123a0:	add	r0, r3, r0, lsl #2
   123a4:	ldr	r1, [r0, #472]	; 0x1d8
   123a8:	movw	r0, #47556	; 0xb9c4
   123ac:	movt	r0, #3
   123b0:	str	r1, [r9, #52]	; 0x34
   123b4:	bl	118ec <getenv@plt>
   123b8:	bl	35fdc <__assert_fail@plt+0x24438>
   123bc:	str	r0, [r9, #24]
   123c0:	b	11c80 <__assert_fail@plt+0xdc>
   123c4:	mov	r1, #144	; 0x90
   123c8:	mov	r2, #1
   123cc:	mov	r3, #0
   123d0:	str	r1, [r9]
   123d4:	strd	r2, [r9, #8]
   123d8:	b	11c80 <__assert_fail@plt+0xdc>
   123dc:	movw	r3, #53824	; 0xd240
   123e0:	movt	r3, #4
   123e4:	ldr	r3, [r3]
   123e8:	str	r3, [sp, #28]
   123ec:	b	11c80 <__assert_fail@plt+0xdc>
   123f0:	movw	r3, #53824	; 0xd240
   123f4:	movt	r3, #4
   123f8:	ldr	r0, [r9, #32]
   123fc:	mov	r2, #268435456	; 0x10000000
   12400:	ldr	r1, [r3]
   12404:	bl	15fd0 <__assert_fail@plt+0x442c>
   12408:	b	11c80 <__assert_fail@plt+0xdc>
   1240c:	mov	r3, #1
   12410:	strb	r3, [r9, #37]	; 0x25
   12414:	b	11c80 <__assert_fail@plt+0xdc>
   12418:	mov	fp, #72	; 0x48
   1241c:	b	11c80 <__assert_fail@plt+0xdc>
   12420:	movw	r1, #47500	; 0xb98c
   12424:	movt	r1, #3
   12428:	ldr	r3, [pc, #1968]	; 12be0 <__assert_fail@plt+0x103c>
   1242c:	mov	r2, #0
   12430:	movw	r8, #53824	; 0xd240
   12434:	movt	r8, #4
   12438:	str	r1, [sp]
   1243c:	mov	r1, r2
   12440:	ldr	r0, [r8]
   12444:	bl	37164 <__assert_fail@plt+0x255c0>
   12448:	subs	r1, r0, #0
   1244c:	bne	137a8 <__assert_fail@plt+0x1c04>
   12450:	ldrd	r2, [r9, #40]	; 0x28
   12454:	orrs	r3, r2, r3
   12458:	bne	11c80 <__assert_fail@plt+0xdc>
   1245c:	ldr	r3, [r8]
   12460:	ldrb	r3, [r3]
   12464:	cmp	r3, #45	; 0x2d
   12468:	bne	11c80 <__assert_fail@plt+0xdc>
   1246c:	mov	r4, r1
   12470:	mov	r2, #5
   12474:	movw	r1, #47512	; 0xb998
   12478:	movt	r1, #3
   1247c:	bl	117d8 <dcgettext@plt>
   12480:	mov	r2, r0
   12484:	mov	r1, r4
   12488:	mov	r0, #1
   1248c:	bl	118bc <error@plt>
   12490:	mov	r3, #0
   12494:	str	r3, [sp, #60]	; 0x3c
   12498:	b	11c80 <__assert_fail@plt+0xdc>
   1249c:	mov	r2, #5
   124a0:	movw	r1, #47472	; 0xb970
   124a4:	movt	r1, #3
   124a8:	mov	r0, #0
   124ac:	bl	117d8 <dcgettext@plt>
   124b0:	mov	r2, r0
   124b4:	mov	r3, #0
   124b8:	ldr	r0, [r8]
   124bc:	str	r2, [sp, #48]	; 0x30
   124c0:	str	r3, [sp, #60]	; 0x3c
   124c4:	bl	2379c <__assert_fail@plt+0x11bf8>
   124c8:	mov	r1, #0
   124cc:	mov	r3, r0
   124d0:	ldr	r2, [sp, #48]	; 0x30
   124d4:	mov	r0, r1
   124d8:	bl	118bc <error@plt>
   124dc:	b	11c80 <__assert_fail@plt+0xdc>
   124e0:	ldr	r3, [sp, #60]	; 0x3c
   124e4:	cmp	r3, #0
   124e8:	beq	13624 <__assert_fail@plt+0x1a80>
   124ec:	ldrb	r3, [r9, #36]	; 0x24
   124f0:	cmp	r3, #0
   124f4:	beq	12a34 <__assert_fail@plt+0xe90>
   124f8:	cmp	r7, #0
   124fc:	bne	13600 <__assert_fail@plt+0x1a5c>
   12500:	ldrb	r3, [r9, #16]
   12504:	cmp	r3, #0
   12508:	beq	12524 <__assert_fail@plt+0x980>
   1250c:	ldrb	r3, [r9, #37]	; 0x25
   12510:	cmp	r3, #0
   12514:	bne	134a0 <__assert_fail@plt+0x18fc>
   12518:	mov	r2, #1
   1251c:	mov	r3, #0
   12520:	strd	r2, [r9, #8]
   12524:	ldrb	r3, [r9, #17]
   12528:	cmp	r3, #0
   1252c:	beq	12554 <__assert_fail@plt+0x9b0>
   12530:	ldr	r4, [r9, #56]	; 0x38
   12534:	cmp	r4, #0
   12538:	beq	134d0 <__assert_fail@plt+0x192c>
   1253c:	ldr	r7, [r9, #56]	; 0x38
   12540:	ldrb	r3, [r7]
   12544:	cmp	r3, #43	; 0x2b
   12548:	bne	1325c <__assert_fail@plt+0x16b8>
   1254c:	add	r7, r7, #1
   12550:	str	r7, [r9, #20]
   12554:	ldr	r3, [sp, #28]
   12558:	movw	r4, #53800	; 0xd228
   1255c:	movt	r4, #4
   12560:	cmp	r3, #0
   12564:	ldr	r3, [r4]
   12568:	beq	13130 <__assert_fail@plt+0x158c>
   1256c:	cmp	r6, r3
   12570:	bgt	13698 <__assert_fail@plt+0x1af4>
   12574:	movw	r1, #48004	; 0xbb84
   12578:	movt	r1, #3
   1257c:	ldr	r0, [sp, #28]
   12580:	bl	1170c <strcmp@plt>
   12584:	cmp	r0, #0
   12588:	movw	r4, #53816	; 0xd238
   1258c:	movt	r4, #4
   12590:	beq	125b0 <__assert_fail@plt+0xa0c>
   12594:	movw	r1, #50664	; 0xc5e8
   12598:	movt	r1, #3
   1259c:	ldr	r2, [r4]
   125a0:	ldr	r0, [sp, #28]
   125a4:	bl	19670 <__assert_fail@plt+0x7acc>
   125a8:	subs	r5, r0, #0
   125ac:	beq	1362c <__assert_fail@plt+0x1a88>
   125b0:	ldr	r0, [r4]
   125b4:	bl	14458 <__assert_fail@plt+0x28b4>
   125b8:	mov	r3, #1
   125bc:	str	r0, [sp, #48]	; 0x30
   125c0:	strb	r3, [r9, #60]	; 0x3c
   125c4:	ldr	r3, [sp, #48]	; 0x30
   125c8:	cmp	r3, #0
   125cc:	beq	135d8 <__assert_fail@plt+0x1a34>
   125d0:	bl	14724 <__assert_fail@plt+0x2b80>
   125d4:	cmp	r0, #0
   125d8:	str	r0, [r9, #64]	; 0x40
   125dc:	beq	135d8 <__assert_fail@plt+0x1a34>
   125e0:	ldrb	r3, [r9, #39]	; 0x27
   125e4:	cmp	r3, #0
   125e8:	bne	125f8 <__assert_fail@plt+0xa54>
   125ec:	ldrb	r3, [r9, #60]	; 0x3c
   125f0:	cmp	r3, #0
   125f4:	bne	125fc <__assert_fail@plt+0xa58>
   125f8:	orr	fp, fp, #256	; 0x100
   125fc:	ldr	r3, [sp, #32]
   12600:	mov	r8, r9
   12604:	orr	r3, fp, r3
   12608:	str	r3, [sp, #92]	; 0x5c
   1260c:	movw	r3, #53708	; 0xd1cc
   12610:	movt	r3, #4
   12614:	str	r3, [sp, #88]	; 0x58
   12618:	ldr	r3, [sp, #60]	; 0x3c
   1261c:	str	r3, [sp, #76]	; 0x4c
   12620:	mov	r1, sl
   12624:	ldr	r0, [sp, #48]	; 0x30
   12628:	bl	14498 <__assert_fail@plt+0x28f4>
   1262c:	subs	r4, r0, #0
   12630:	beq	12c60 <__assert_fail@plt+0x10bc>
   12634:	ldr	r3, [sp, #28]
   12638:	cmp	r3, #0
   1263c:	beq	12b40 <__assert_fail@plt+0xf9c>
   12640:	mov	r0, r3
   12644:	movw	r1, #48004	; 0xbb84
   12648:	movt	r1, #3
   1264c:	bl	1170c <strcmp@plt>
   12650:	cmp	r0, #0
   12654:	bne	12670 <__assert_fail@plt+0xacc>
   12658:	movw	r1, #48004	; 0xbb84
   1265c:	movt	r1, #3
   12660:	mov	r0, r4
   12664:	bl	1170c <strcmp@plt>
   12668:	subs	r5, r0, #0
   1266c:	beq	12a9c <__assert_fail@plt+0xef8>
   12670:	ldrb	r3, [r4]
   12674:	cmp	r3, #0
   12678:	beq	12ae0 <__assert_fail@plt+0xf3c>
   1267c:	ldr	r3, [sp, #60]	; 0x3c
   12680:	mov	r2, #0
   12684:	str	r4, [r8, #68]	; 0x44
   12688:	ldr	r0, [pc, #1364]	; 12be4 <__assert_fail@plt+0x1040>
   1268c:	ldr	r1, [sp, #92]	; 0x5c
   12690:	str	r3, [sp, #56]	; 0x38
   12694:	bl	370d4 <__assert_fail@plt+0x25530>
   12698:	str	r0, [sp, #72]	; 0x48
   1269c:	b	12730 <__assert_fail@plt+0xb8c>
   126a0:	ldr	r0, [r8, #32]
   126a4:	ldr	r1, [sp, #68]	; 0x44
   126a8:	bl	15d24 <__assert_fail@plt+0x4180>
   126ac:	cmp	r0, #0
   126b0:	bne	12708 <__assert_fail@plt+0xb64>
   126b4:	cmp	r4, #11
   126b8:	beq	13398 <__assert_fail@plt+0x17f4>
   126bc:	ldr	r3, [sp, #44]	; 0x2c
   126c0:	cmp	r3, #13
   126c4:	cmpne	r3, #10
   126c8:	moveq	r3, #1
   126cc:	movne	r3, #0
   126d0:	str	r3, [sp, #64]	; 0x40
   126d4:	beq	13350 <__assert_fail@plt+0x17ac>
   126d8:	ldr	r2, [sp, #72]	; 0x48
   126dc:	ldr	r3, [r2, #48]	; 0x30
   126e0:	tst	r3, #64	; 0x40
   126e4:	beq	12d68 <__assert_fail@plt+0x11c4>
   126e8:	ldr	r3, [r5, #48]	; 0x30
   126ec:	cmp	r3, #0
   126f0:	ble	12d68 <__assert_fail@plt+0x11c4>
   126f4:	ldrd	r0, [r2, #16]
   126f8:	ldrd	r2, [r5, #64]	; 0x40
   126fc:	cmp	r1, r3
   12700:	cmpeq	r0, r2
   12704:	beq	12d68 <__assert_fail@plt+0x11c4>
   12708:	ldr	r3, [sp, #44]	; 0x2c
   1270c:	cmp	r3, #1
   12710:	beq	130cc <__assert_fail@plt+0x1528>
   12714:	ldr	r3, [sp, #60]	; 0x3c
   12718:	str	r3, [sp, #64]	; 0x40
   1271c:	ldr	r3, [sp, #56]	; 0x38
   12720:	ldr	r2, [sp, #64]	; 0x40
   12724:	and	r3, r3, r2
   12728:	uxtb	r3, r3
   1272c:	str	r3, [sp, #56]	; 0x38
   12730:	ldr	r0, [sp, #72]	; 0x48
   12734:	bl	1b598 <__assert_fail@plt+0x99f4>
   12738:	subs	r5, r0, #0
   1273c:	beq	1304c <__assert_fail@plt+0x14a8>
   12740:	ldrh	r2, [r5, #56]	; 0x38
   12744:	ldr	r3, [r5, #28]
   12748:	cmp	r2, #4
   1274c:	str	r2, [sp, #44]	; 0x2c
   12750:	str	r3, [sp, #68]	; 0x44
   12754:	beq	12bfc <__assert_fail@plt+0x1058>
   12758:	cmp	r2, #6
   1275c:	mov	r4, r2
   12760:	bne	126a0 <__assert_fail@plt+0xafc>
   12764:	ldr	r3, [sp, #60]	; 0x3c
   12768:	str	r3, [sp, #64]	; 0x40
   1276c:	ldrb	r3, [r8, #37]	; 0x25
   12770:	cmp	r3, #0
   12774:	beq	12b9c <__assert_fail@plt+0xff8>
   12778:	ldrd	r2, [r5, #112]	; 0x70
   1277c:	cmp	r2, #0
   12780:	strd	r2, [sp, #32]
   12784:	sbcs	r3, r3, #0
   12788:	bge	12798 <__assert_fail@plt+0xbf4>
   1278c:	mov	r2, #0
   12790:	mov	r3, #0
   12794:	strd	r2, [sp, #32]
   12798:	ldr	r3, [r8, #52]	; 0x34
   1279c:	cmp	r3, #0
   127a0:	bne	12b84 <__assert_fail@plt+0xfe0>
   127a4:	ldr	r9, [r5, #144]	; 0x90
   127a8:	ldr	fp, [r5, #148]	; 0x94
   127ac:	ldrd	r0, [sp, #32]
   127b0:	ldr	r3, [r8, #84]	; 0x54
   127b4:	ldr	r2, [r5, #48]	; 0x30
   127b8:	cmp	r3, #0
   127bc:	strd	r0, [sp, #128]	; 0x80
   127c0:	mov	r0, #1
   127c4:	mov	r1, #0
   127c8:	str	r2, [sp, #40]	; 0x28
   127cc:	strd	r0, [sp, #136]	; 0x88
   127d0:	str	r9, [sp, #144]	; 0x90
   127d4:	str	fp, [sp, #148]	; 0x94
   127d8:	beq	12bbc <__assert_fail@plt+0x1018>
   127dc:	ldr	r6, [r8, #76]	; 0x4c
   127e0:	cmp	r2, r6
   127e4:	beq	12858 <__assert_fail@plt+0xcb4>
   127e8:	bls	12de4 <__assert_fail@plt+0x1240>
   127ec:	cmp	r2, r3
   127f0:	bcs	13228 <__assert_fail@plt+0x1684>
   127f4:	ldr	r3, [r8, #76]	; 0x4c
   127f8:	ldr	r5, [sp, #40]	; 0x28
   127fc:	add	r2, r3, #1
   12800:	cmp	r5, r2
   12804:	bcc	12858 <__assert_fail@plt+0xcb4>
   12808:	ldr	ip, [r8, #88]	; 0x58
   1280c:	mov	lr, #48	; 0x30
   12810:	mov	r0, #-2147483648	; 0x80000000
   12814:	mvn	r1, #0
   12818:	ldr	r4, [sp, #44]	; 0x2c
   1281c:	mla	r3, lr, r3, ip
   12820:	mov	r6, #0
   12824:	mov	r7, #0
   12828:	add	r2, r2, #1
   1282c:	add	r3, r3, #48	; 0x30
   12830:	cmp	r5, r2
   12834:	strd	r6, [r3]
   12838:	strd	r6, [r3, #8]
   1283c:	strd	r0, [r3, #16]
   12840:	strd	r6, [r3, #24]
   12844:	strd	r6, [r3, #32]
   12848:	strd	r0, [r3, #40]	; 0x28
   1284c:	bcs	12820 <__assert_fail@plt+0xc7c>
   12850:	str	r5, [sp, #40]	; 0x28
   12854:	str	r4, [sp, #44]	; 0x2c
   12858:	ldrb	r3, [r8, #48]	; 0x30
   1285c:	ldr	r2, [sp, #44]	; 0x2c
   12860:	ldr	r1, [sp, #40]	; 0x28
   12864:	cmp	r3, #0
   12868:	bic	r2, r2, #2
   1286c:	str	r2, [sp, #44]	; 0x2c
   12870:	str	r1, [r8, #76]	; 0x4c
   12874:	beq	12880 <__assert_fail@plt+0xcdc>
   12878:	cmp	r2, #4
   1287c:	beq	12934 <__assert_fail@plt+0xd90>
   12880:	ldr	r3, [sp, #40]	; 0x28
   12884:	mov	r2, #0
   12888:	ldr	r6, [r8, #88]	; 0x58
   1288c:	add	ip, r3, r3, lsl #1
   12890:	mov	r3, #0
   12894:	lsl	ip, ip, #4
   12898:	strd	r2, [sp, #80]	; 0x50
   1289c:	ldrd	r2, [sp, #32]
   128a0:	add	lr, r6, ip
   128a4:	ldrd	r4, [r6, ip]
   128a8:	adds	r0, r2, r4
   128ac:	adcs	r1, r3, r5
   128b0:	bcs	13688 <__assert_fail@plt+0x1ae4>
   128b4:	ldrd	r2, [sp, #80]	; 0x50
   128b8:	orrs	r3, r2, r3
   128bc:	mov	r2, r0
   128c0:	mvnne	r2, #0
   128c4:	mov	r3, r1
   128c8:	ldr	r1, [lr, #12]
   128cc:	movne	r3, r2
   128d0:	add	r0, r6, ip
   128d4:	str	r2, [r6, ip]
   128d8:	str	r3, [r0, #4]
   128dc:	ldr	r3, [lr, #8]
   128e0:	ldr	ip, [lr, #16]
   128e4:	ldr	r0, [lr, #20]
   128e8:	adds	r3, r3, #1
   128ec:	adc	r1, r1, #0
   128f0:	cmp	r9, ip
   128f4:	str	r3, [lr, #8]
   128f8:	movle	r2, #0
   128fc:	movgt	r2, #1
   12900:	str	r1, [lr, #12]
   12904:	cmp	r9, ip
   12908:	rsbge	r2, r2, #0
   1290c:	rsblt	r2, r2, #1
   12910:	cmp	fp, r0
   12914:	movle	r3, #0
   12918:	movgt	r3, #1
   1291c:	cmp	fp, r0
   12920:	rsbge	r0, r3, #0
   12924:	rsblt	r0, r3, #1
   12928:	adds	r3, r0, r2, lsl #1
   1292c:	strmi	r9, [lr, #16]
   12930:	strmi	fp, [lr, #20]
   12934:	ldrd	r0, [sp, #32]
   12938:	mov	r6, #0
   1293c:	mov	r7, #0
   12940:	ldrd	r2, [r8, #96]	; 0x60
   12944:	adds	r4, r0, r2
   12948:	adcs	r5, r1, r3
   1294c:	mov	r0, r4
   12950:	ldr	r1, [r8, #116]	; 0x74
   12954:	movcs	r6, #1
   12958:	movcs	r7, #0
   1295c:	orrs	r3, r6, r7
   12960:	ldr	r3, [r8, #104]	; 0x68
   12964:	mov	r2, r5
   12968:	mvnne	r0, #0
   1296c:	movne	r2, r0
   12970:	str	r0, [r8, #96]	; 0x60
   12974:	ldr	r0, [r8, #108]	; 0x6c
   12978:	adds	r3, r3, #1
   1297c:	strd	r2, [r8, #100]	; 0x64
   12980:	ldr	r2, [r8, #112]	; 0x70
   12984:	adc	r0, r0, #0
   12988:	str	r0, [r8, #108]	; 0x6c
   1298c:	cmp	r9, r2
   12990:	movle	r3, #0
   12994:	movgt	r3, #1
   12998:	cmp	r9, r2
   1299c:	rsbge	r2, r3, #0
   129a0:	rsblt	r2, r3, #1
   129a4:	cmp	fp, r1
   129a8:	movle	r3, #0
   129ac:	movgt	r3, #1
   129b0:	cmp	fp, r1
   129b4:	rsbge	r3, r3, #0
   129b8:	rsblt	r3, r3, #1
   129bc:	adds	r3, r3, r2, lsl #1
   129c0:	ldr	r3, [sp, #44]	; 0x2c
   129c4:	strmi	r9, [r8, #112]	; 0x70
   129c8:	strmi	fp, [r8, #116]	; 0x74
   129cc:	cmp	r3, #4
   129d0:	beq	12a84 <__assert_fail@plt+0xee0>
   129d4:	ldrb	r3, [r8, #36]	; 0x24
   129d8:	cmp	r3, #0
   129dc:	bne	12a84 <__assert_fail@plt+0xee0>
   129e0:	ldr	r3, [sp, #40]	; 0x28
   129e4:	cmp	r3, #0
   129e8:	bne	1271c <__assert_fail@plt+0xb78>
   129ec:	ldrb	r3, [r8, #16]
   129f0:	cmp	r3, #0
   129f4:	ldrd	r2, [r8, #40]	; 0x28
   129f8:	ldrdne	r0, [sp, #136]	; 0x88
   129fc:	ldrdeq	r0, [sp, #128]	; 0x80
   12a00:	cmp	r2, #0
   12a04:	sbcs	ip, r3, #0
   12a08:	blt	12c44 <__assert_fail@plt+0x10a0>
   12a0c:	cmp	r1, r3
   12a10:	cmpeq	r0, r2
   12a14:	movcs	r3, #1
   12a18:	movcc	r3, #0
   12a1c:	cmp	r3, #0
   12a20:	beq	1271c <__assert_fail@plt+0xb78>
   12a24:	add	r0, sp, #128	; 0x80
   12a28:	ldr	r1, [sp, #68]	; 0x44
   12a2c:	bl	13938 <__assert_fail@plt+0x1d94>
   12a30:	b	1271c <__assert_fail@plt+0xb78>
   12a34:	ldr	r3, [sp, #40]	; 0x28
   12a38:	tst	r3, r7
   12a3c:	beq	13794 <__assert_fail@plt+0x1bf0>
   12a40:	movw	r4, #53708	; 0xd1cc
   12a44:	movt	r4, #4
   12a48:	ldr	r7, [r4]
   12a4c:	cmp	r7, #0
   12a50:	beq	13090 <__assert_fail@plt+0x14ec>
   12a54:	mov	r2, #5
   12a58:	movw	r1, #47724	; 0xba6c
   12a5c:	movt	r1, #3
   12a60:	mov	r0, #0
   12a64:	bl	117d8 <dcgettext@plt>
   12a68:	mov	r1, #0
   12a6c:	mov	r2, r0
   12a70:	mov	r3, r7
   12a74:	mov	r0, r1
   12a78:	bl	118bc <error@plt>
   12a7c:	mov	r0, #1
   12a80:	bl	13a9c <__assert_fail@plt+0x1ef8>
   12a84:	ldr	r2, [sp, #40]	; 0x28
   12a88:	ldr	r3, [sp, #88]	; 0x58
   12a8c:	ldr	r3, [r3]
   12a90:	cmp	r2, r3
   12a94:	bls	129ec <__assert_fail@plt+0xe48>
   12a98:	b	129e0 <__assert_fail@plt+0xe3c>
   12a9c:	mov	r2, #5
   12aa0:	movw	r1, #48104	; 0xbbe8
   12aa4:	movt	r1, #3
   12aa8:	bl	117d8 <dcgettext@plt>
   12aac:	mov	r6, r0
   12ab0:	mov	r1, r4
   12ab4:	mov	r0, #4
   12ab8:	bl	22470 <__assert_fail@plt+0x108cc>
   12abc:	mov	r3, r0
   12ac0:	mov	r2, r6
   12ac4:	mov	r1, r5
   12ac8:	mov	r0, r5
   12acc:	bl	118bc <error@plt>
   12ad0:	ldrb	r3, [r4]
   12ad4:	cmp	r3, #0
   12ad8:	strne	r5, [sp, #76]	; 0x4c
   12adc:	bne	12620 <__assert_fail@plt+0xa7c>
   12ae0:	mov	r3, #0
   12ae4:	ldr	r0, [sp, #48]	; 0x30
   12ae8:	str	r3, [sp, #76]	; 0x4c
   12aec:	bl	1454c <__assert_fail@plt+0x29a8>
   12af0:	mov	r4, r0
   12af4:	mov	r1, #3
   12af8:	ldr	r2, [sp, #28]
   12afc:	mov	r0, #0
   12b00:	bl	22ff0 <__assert_fail@plt+0x1144c>
   12b04:	mov	r5, r0
   12b08:	mov	r2, #5
   12b0c:	movw	r1, #48320	; 0xbcc0
   12b10:	movt	r1, #3
   12b14:	mov	r0, #0
   12b18:	bl	117d8 <dcgettext@plt>
   12b1c:	mov	r1, #0
   12b20:	mov	r3, r5
   12b24:	str	r4, [sp]
   12b28:	movw	r2, #48352	; 0xbce0
   12b2c:	movt	r2, #3
   12b30:	str	r0, [sp, #4]
   12b34:	mov	r0, r1
   12b38:	bl	118bc <error@plt>
   12b3c:	b	12620 <__assert_fail@plt+0xa7c>
   12b40:	ldrb	r3, [r4]
   12b44:	cmp	r3, #0
   12b48:	bne	1267c <__assert_fail@plt+0xad8>
   12b4c:	ldr	r4, [sp, #28]
   12b50:	mov	r2, #5
   12b54:	movw	r1, #48320	; 0xbcc0
   12b58:	movt	r1, #3
   12b5c:	mov	r0, r4
   12b60:	bl	117d8 <dcgettext@plt>
   12b64:	mov	r3, r0
   12b68:	movw	r2, #49108	; 0xbfd4
   12b6c:	movt	r2, #3
   12b70:	mov	r1, r4
   12b74:	str	r4, [sp, #76]	; 0x4c
   12b78:	mov	r0, r4
   12b7c:	bl	118bc <error@plt>
   12b80:	b	12620 <__assert_fail@plt+0xa7c>
   12b84:	cmp	r3, #2
   12b88:	ldreq	r9, [r5, #136]	; 0x88
   12b8c:	ldreq	fp, [r5, #140]	; 0x8c
   12b90:	ldrne	r9, [r5, #152]	; 0x98
   12b94:	ldrne	fp, [r5, #156]	; 0x9c
   12b98:	b	127ac <__assert_fail@plt+0xc08>
   12b9c:	ldr	r3, [r5, #128]	; 0x80
   12ba0:	ldr	r2, [r5, #132]	; 0x84
   12ba4:	lsl	r2, r2, #9
   12ba8:	orr	r2, r2, r3, lsr #23
   12bac:	lsl	r3, r3, #9
   12bb0:	str	r3, [sp, #32]
   12bb4:	str	r2, [sp, #36]	; 0x24
   12bb8:	b	12798 <__assert_fail@plt+0xbf4>
   12bbc:	add	r3, r2, #10
   12bc0:	mov	r1, #48	; 0x30
   12bc4:	mov	r0, r3
   12bc8:	str	r3, [r8, #84]	; 0x54
   12bcc:	bl	36f1c <__assert_fail@plt+0x25378>
   12bd0:	str	r0, [r8, #88]	; 0x58
   12bd4:	b	12858 <__assert_fail@plt+0xcb4>
   12bd8:	andeq	sp, r4, r0, asr r2
   12bdc:	andeq	sl, r3, r4, asr r9
   12be0:	andeq	sp, r4, r0, ror r2
   12be4:	andeq	sp, r4, ip, lsl #5
   12be8:	muleq	r3, r0, r9
   12bec:	andeq	sp, r4, r8, lsr #5
   12bf0:	andeq	sl, r3, ip, ror #18
   12bf4:	muleq	r3, r8, r9
   12bf8:	andeq	sl, r3, r0, lsr #15
   12bfc:	ldr	r6, [r5, #32]
   12c00:	mov	r2, #5
   12c04:	movw	r1, #48188	; 0xbc3c
   12c08:	movt	r1, #3
   12c0c:	mov	r0, #0
   12c10:	bl	117d8 <dcgettext@plt>
   12c14:	mov	r3, #0
   12c18:	mov	r7, r0
   12c1c:	ldr	r0, [sp, #44]	; 0x2c
   12c20:	ldr	r1, [sp, #68]	; 0x44
   12c24:	str	r3, [sp, #64]	; 0x40
   12c28:	bl	22470 <__assert_fail@plt+0x108cc>
   12c2c:	mov	r3, r0
   12c30:	mov	r2, r7
   12c34:	mov	r1, r6
   12c38:	mov	r0, #0
   12c3c:	bl	118bc <error@plt>
   12c40:	b	1276c <__assert_fail@plt+0xbc8>
   12c44:	rsbs	r2, r2, #0
   12c48:	rsc	r3, r3, #0
   12c4c:	cmp	r3, r1
   12c50:	cmpeq	r2, r0
   12c54:	movcs	r3, #1
   12c58:	movcc	r3, #0
   12c5c:	b	12a1c <__assert_fail@plt+0xe78>
   12c60:	ldr	r3, [sp, #116]	; 0x74
   12c64:	mov	r9, r8
   12c68:	cmp	r3, #3
   12c6c:	beq	135d8 <__assert_fail@plt+0x1a34>
   12c70:	cmp	r3, #4
   12c74:	bne	12d44 <__assert_fail@plt+0x11a0>
   12c78:	bl	119b8 <__errno_location@plt>
   12c7c:	ldr	r5, [r0]
   12c80:	mov	r2, #5
   12c84:	movw	r1, #48036	; 0xbba4
   12c88:	movt	r1, #3
   12c8c:	mov	r0, r4
   12c90:	bl	117d8 <dcgettext@plt>
   12c94:	mov	r6, r0
   12c98:	mov	r1, #3
   12c9c:	ldr	r2, [sp, #28]
   12ca0:	mov	r0, r4
   12ca4:	bl	22ff0 <__assert_fail@plt+0x1144c>
   12ca8:	mov	r3, r0
   12cac:	mov	r2, r6
   12cb0:	mov	r1, r5
   12cb4:	mov	r0, r4
   12cb8:	bl	118bc <error@plt>
   12cbc:	str	r4, [sp, #76]	; 0x4c
   12cc0:	ldr	r0, [sp, #48]	; 0x30
   12cc4:	bl	14574 <__assert_fail@plt+0x29d0>
   12cc8:	ldr	r0, [r9, #64]	; 0x40
   12ccc:	bl	147a8 <__assert_fail@plt+0x2c04>
   12cd0:	ldr	r0, [r9, #80]	; 0x50
   12cd4:	cmp	r0, #0
   12cd8:	beq	12ce0 <__assert_fail@plt+0x113c>
   12cdc:	bl	147a8 <__assert_fail@plt+0x2c04>
   12ce0:	ldr	r3, [sp, #28]
   12ce4:	cmp	r3, #0
   12ce8:	beq	12d10 <__assert_fail@plt+0x116c>
   12cec:	movw	r3, #53816	; 0xd238
   12cf0:	movt	r3, #4
   12cf4:	ldr	r0, [r3]
   12cf8:	ldr	r3, [r0]
   12cfc:	tst	r3, #32
   12d00:	beq	13340 <__assert_fail@plt+0x179c>
   12d04:	ldr	r3, [sp, #76]	; 0x4c
   12d08:	cmp	r3, #0
   12d0c:	bne	1372c <__assert_fail@plt+0x1b88>
   12d10:	ldrb	r3, [r9, #38]	; 0x26
   12d14:	cmp	r3, #0
   12d18:	bne	1310c <__assert_fail@plt+0x1568>
   12d1c:	ldr	r3, [sp, #76]	; 0x4c
   12d20:	eor	r0, r3, #1
   12d24:	uxtb	r0, r0
   12d28:	add	sp, sp, #236	; 0xec
   12d2c:	ldrd	r4, [sp]
   12d30:	ldrd	r6, [sp, #8]
   12d34:	ldrd	r8, [sp, #16]
   12d38:	ldrd	sl, [sp, #24]
   12d3c:	add	sp, sp, #32
   12d40:	pop	{pc}		; (ldr pc, [sp], #4)
   12d44:	cmp	r3, #2
   12d48:	beq	12cc0 <__assert_fail@plt+0x111c>
   12d4c:	movw	r1, #48052	; 0xbbb4
   12d50:	movt	r1, #3
   12d54:	ldr	r3, [pc, #-372]	; 12be8 <__assert_fail@plt+0x1044>
   12d58:	movw	r0, #48064	; 0xbbc0
   12d5c:	movt	r0, #3
   12d60:	movw	r2, #1081	; 0x439
   12d64:	bl	11ba4 <__assert_fail@plt>
   12d68:	ldrb	r3, [r8, #39]	; 0x27
   12d6c:	cmp	r3, #0
   12d70:	bne	12dbc <__assert_fail@plt+0x1218>
   12d74:	ldrb	r3, [r8, #60]	; 0x3c
   12d78:	cmp	r3, #0
   12d7c:	bne	12d9c <__assert_fail@plt+0x11f8>
   12d80:	ldr	r3, [r5, #80]	; 0x50
   12d84:	and	r3, r3, #61440	; 0xf000
   12d88:	cmp	r3, #16384	; 0x4000
   12d8c:	beq	12dbc <__assert_fail@plt+0x1218>
   12d90:	ldr	r3, [r5, #84]	; 0x54
   12d94:	cmp	r3, #1
   12d98:	bls	12dbc <__assert_fail@plt+0x1218>
   12d9c:	ldrd	r2, [r5, #160]	; 0xa0
   12da0:	ldr	r0, [r8, #64]	; 0x40
   12da4:	strd	r2, [sp]
   12da8:	ldrd	r2, [r5, #64]	; 0x40
   12dac:	bl	147e8 <__assert_fail@plt+0x2c44>
   12db0:	cmp	r0, #0
   12db4:	blt	135d8 <__assert_fail@plt+0x1a34>
   12db8:	beq	12708 <__assert_fail@plt+0xb64>
   12dbc:	ldr	r3, [sp, #44]	; 0x2c
   12dc0:	cmp	r3, #2
   12dc4:	beq	133f8 <__assert_fail@plt+0x1854>
   12dc8:	cmp	r3, #7
   12dcc:	beq	133c8 <__assert_fail@plt+0x1824>
   12dd0:	cmp	r3, #1
   12dd4:	ldr	r3, [sp, #60]	; 0x3c
   12dd8:	str	r3, [sp, #64]	; 0x40
   12ddc:	bne	1276c <__assert_fail@plt+0xbc8>
   12de0:	b	1271c <__assert_fail@plt+0xb78>
   12de4:	ldr	r2, [sp, #40]	; 0x28
   12de8:	sub	r3, r6, #1
   12dec:	cmp	r2, r3
   12df0:	bne	13710 <__assert_fail@plt+0x1b6c>
   12df4:	mov	r1, #48	; 0x30
   12df8:	mov	r2, #0
   12dfc:	ldr	lr, [r8, #88]	; 0x58
   12e00:	mov	r3, #0
   12e04:	strd	r2, [sp, #96]	; 0x60
   12e08:	mul	r3, r1, r6
   12e0c:	str	r3, [sp, #80]	; 0x50
   12e10:	add	ip, lr, r3
   12e14:	ldrd	r2, [sp, #32]
   12e18:	ldr	r1, [sp, #80]	; 0x50
   12e1c:	ldrd	r4, [lr, r1]
   12e20:	adds	r0, r2, r4
   12e24:	adcs	r1, r3, r5
   12e28:	bcs	13784 <__assert_fail@plt+0x1be0>
   12e2c:	ldrd	r2, [sp, #96]	; 0x60
   12e30:	mov	r4, r0
   12e34:	mov	r5, r1
   12e38:	orrs	r3, r2, r3
   12e3c:	beq	12e50 <__assert_fail@plt+0x12ac>
   12e40:	mvn	r2, #0
   12e44:	mvn	r3, #0
   12e48:	mov	r4, r2
   12e4c:	mov	r5, r3
   12e50:	ldr	r1, [ip, #8]
   12e54:	mov	r2, r4
   12e58:	mov	r3, r5
   12e5c:	ldr	r0, [ip, #12]
   12e60:	strd	r2, [sp, #128]	; 0x80
   12e64:	adds	r1, r1, #1
   12e68:	adc	r0, r0, #0
   12e6c:	str	r1, [sp, #136]	; 0x88
   12e70:	str	r0, [sp, #140]	; 0x8c
   12e74:	ldr	r3, [ip, #16]
   12e78:	ldr	r7, [ip, #20]
   12e7c:	cmp	r9, r3
   12e80:	movge	r2, #0
   12e84:	movlt	r2, #1
   12e88:	cmp	r9, r3
   12e8c:	rsble	r2, r2, #0
   12e90:	rsbgt	r2, r2, #1
   12e94:	cmp	fp, r7
   12e98:	movge	r3, #0
   12e9c:	movlt	r3, #1
   12ea0:	cmp	fp, r7
   12ea4:	rsble	r3, r3, #0
   12ea8:	rsbgt	r3, r3, #1
   12eac:	adds	r3, r3, r2, lsl #1
   12eb0:	ldrdmi	r2, [ip, #16]
   12eb4:	strdmi	r2, [sp, #144]	; 0x90
   12eb8:	ldrb	r3, [r8, #48]	; 0x30
   12ebc:	cmp	r3, #0
   12ec0:	beq	13170 <__assert_fail@plt+0x15cc>
   12ec4:	ldr	r0, [sp, #40]	; 0x28
   12ec8:	mov	r1, #48	; 0x30
   12ecc:	mov	r2, #0
   12ed0:	ldr	r3, [sp, #80]	; 0x50
   12ed4:	ldrd	r6, [lr, r3]
   12ed8:	mla	lr, r1, r0, lr
   12edc:	mov	r3, #0
   12ee0:	ldrd	r4, [lr, #24]
   12ee4:	adds	r0, r4, r6
   12ee8:	adcs	r1, r5, r7
   12eec:	movcs	r2, #1
   12ef0:	movcs	r3, #0
   12ef4:	orrs	r3, r2, r3
   12ef8:	strd	r0, [sp, #80]	; 0x50
   12efc:	beq	12f0c <__assert_fail@plt+0x1368>
   12f00:	mvn	r2, #0
   12f04:	mvn	r3, #0
   12f08:	strd	r2, [sp, #80]	; 0x50
   12f0c:	ldr	r2, [ip, #8]
   12f10:	ldr	r3, [lr, #32]
   12f14:	ldrd	r0, [sp, #80]	; 0x50
   12f18:	ldr	r7, [lr, #40]	; 0x28
   12f1c:	adds	r3, r3, r2
   12f20:	ldr	r6, [lr, #44]	; 0x2c
   12f24:	strd	r0, [lr, #24]
   12f28:	str	r3, [sp, #104]	; 0x68
   12f2c:	ldr	r0, [ip, #12]
   12f30:	str	r3, [lr, #32]
   12f34:	ldr	r3, [lr, #36]	; 0x24
   12f38:	adc	r3, r3, r0
   12f3c:	str	r3, [lr, #36]	; 0x24
   12f40:	str	r3, [sp, #108]	; 0x6c
   12f44:	ldr	r3, [ip, #16]
   12f48:	ldr	r1, [ip, #20]
   12f4c:	cmp	r7, r3
   12f50:	movge	r2, #0
   12f54:	movlt	r2, #1
   12f58:	cmp	r7, r3
   12f5c:	rsble	r2, r2, #0
   12f60:	rsbgt	r2, r2, #1
   12f64:	ldr	r3, [ip, #20]
   12f68:	cmp	r6, r3
   12f6c:	movge	r3, #0
   12f70:	movlt	r3, #1
   12f74:	cmp	r6, r1
   12f78:	rsble	r3, r3, #0
   12f7c:	rsbgt	r3, r3, #1
   12f80:	adds	r3, r3, r2, lsl #1
   12f84:	bpl	12f9c <__assert_fail@plt+0x13f8>
   12f88:	ldr	r3, [ip, #16]
   12f8c:	mov	r6, r1
   12f90:	mov	r7, r3
   12f94:	str	r3, [lr, #40]	; 0x28
   12f98:	str	r1, [lr, #44]	; 0x2c
   12f9c:	ldrd	r4, [ip, #24]
   12fa0:	mov	r2, #0
   12fa4:	mov	r3, #0
   12fa8:	ldrd	r0, [sp, #80]	; 0x50
   12fac:	strd	r2, [sp, #96]	; 0x60
   12fb0:	adds	r2, r4, r0
   12fb4:	adcs	r3, r5, r1
   12fb8:	bcs	13774 <__assert_fail@plt+0x1bd0>
   12fbc:	ldrd	r0, [sp, #96]	; 0x60
   12fc0:	orrs	r1, r0, r1
   12fc4:	mov	r1, r2
   12fc8:	mov	r2, r3
   12fcc:	beq	12fdc <__assert_fail@plt+0x1438>
   12fd0:	mvn	r3, #0
   12fd4:	mov	r1, r3
   12fd8:	mov	r2, r3
   12fdc:	mov	r3, r1
   12fe0:	str	r2, [lr, #28]
   12fe4:	ldr	r2, [ip, #32]
   12fe8:	str	r3, [lr, #24]
   12fec:	ldr	r1, [sp, #104]	; 0x68
   12ff0:	ldr	r3, [ip, #36]	; 0x24
   12ff4:	adds	r2, r2, r1
   12ff8:	ldr	r1, [sp, #108]	; 0x6c
   12ffc:	adc	r3, r3, r1
   13000:	strd	r2, [lr, #32]
   13004:	ldr	r1, [ip, #40]	; 0x28
   13008:	ldr	r2, [ip, #44]	; 0x2c
   1300c:	cmp	r7, r1
   13010:	movge	r3, #0
   13014:	movlt	r3, #1
   13018:	cmp	r7, r1
   1301c:	rsble	r7, r3, #0
   13020:	rsbgt	r7, r3, #1
   13024:	cmp	r6, r2
   13028:	movge	r3, #0
   1302c:	movlt	r3, #1
   13030:	cmp	r6, r2
   13034:	rsble	r6, r3, #0
   13038:	rsbgt	r6, r3, #1
   1303c:	adds	r3, r6, r7, lsl #1
   13040:	ldrdmi	r2, [ip, #40]	; 0x28
   13044:	strdmi	r2, [lr, #40]	; 0x28
   13048:	b	12858 <__assert_fail@plt+0xcb4>
   1304c:	bl	119b8 <__errno_location@plt>
   13050:	ldr	r6, [r0]
   13054:	mov	r4, r0
   13058:	cmp	r6, #0
   1305c:	bne	132f8 <__assert_fail@plt+0x1754>
   13060:	mov	r5, #0
   13064:	ldr	r0, [sp, #72]	; 0x48
   13068:	str	r5, [r8, #76]	; 0x4c
   1306c:	bl	1b390 <__assert_fail@plt+0x97ec>
   13070:	cmp	r0, r5
   13074:	bne	132c8 <__assert_fail@plt+0x1724>
   13078:	ldr	r3, [sp, #56]	; 0x38
   1307c:	ldr	fp, [sp, #76]	; 0x4c
   13080:	and	fp, fp, r3
   13084:	uxtb	r3, fp
   13088:	str	r3, [sp, #76]	; 0x4c
   1308c:	b	12620 <__assert_fail@plt+0xa7c>
   13090:	mov	r2, #5
   13094:	mov	r0, r7
   13098:	movw	r1, #47668	; 0xba34
   1309c:	movt	r1, #3
   130a0:	bl	117d8 <dcgettext@plt>
   130a4:	mov	r2, r0
   130a8:	mov	r1, r7
   130ac:	mov	r0, r7
   130b0:	bl	118bc <error@plt>
   130b4:	ldr	r7, [r4]
   130b8:	cmp	r7, #0
   130bc:	bne	12a54 <__assert_fail@plt+0xeb0>
   130c0:	mov	r3, #0
   130c4:	str	r3, [r4]
   130c8:	b	12500 <__assert_fail@plt+0x95c>
   130cc:	ldr	r4, [sp, #72]	; 0x48
   130d0:	mov	r2, #4
   130d4:	mov	r1, r5
   130d8:	mov	r0, r4
   130dc:	bl	1bdac <__assert_fail@plt+0xa208>
   130e0:	mov	r0, r4
   130e4:	bl	1b598 <__assert_fail@plt+0x99f4>
   130e8:	cmp	r5, r0
   130ec:	beq	12714 <__assert_fail@plt+0xb70>
   130f0:	movw	r1, #48052	; 0xbbb4
   130f4:	movt	r1, #3
   130f8:	ldr	r3, [pc, #-1292]	; 12bf4 <__assert_fail@plt+0x1050>
   130fc:	movw	r0, #48216	; 0xbc58
   13100:	movt	r0, #3
   13104:	mov	r2, #560	; 0x230
   13108:	bl	11ba4 <__assert_fail@plt>
   1310c:	mov	r2, #5
   13110:	movw	r1, #48312	; 0xbcb8
   13114:	movt	r1, #3
   13118:	mov	r0, #0
   1311c:	bl	117d8 <dcgettext@plt>
   13120:	mov	r1, r0
   13124:	ldr	r0, [pc, #-1344]	; 12bec <__assert_fail@plt+0x1048>
   13128:	bl	13938 <__assert_fail@plt+0x1d94>
   1312c:	b	12d1c <__assert_fail@plt+0x1178>
   13130:	cmp	r6, r3
   13134:	addgt	r0, r5, r3, lsl #2
   13138:	addle	r0, sp, #120	; 0x78
   1313c:	bl	14420 <__assert_fail@plt+0x287c>
   13140:	ldr	r3, [sp, #32]
   13144:	str	r0, [sp, #48]	; 0x30
   13148:	ldr	r2, [r4]
   1314c:	sub	r3, r3, #2
   13150:	clz	r3, r3
   13154:	lsr	r3, r3, #5
   13158:	add	r2, r2, #1
   1315c:	cmp	r2, r6
   13160:	movge	r6, r3
   13164:	orrlt	r6, r3, #1
   13168:	strb	r6, [r9, #60]	; 0x3c
   1316c:	b	125c4 <__assert_fail@plt+0xa20>
   13170:	mov	r2, #0
   13174:	mov	r3, #0
   13178:	strd	r2, [sp, #96]	; 0x60
   1317c:	mov	r2, r4
   13180:	mov	r3, r5
   13184:	ldrd	r4, [ip, #24]
   13188:	adds	r6, r2, r4
   1318c:	adcs	r7, r3, r5
   13190:	mov	r4, r6
   13194:	mov	r5, r7
   13198:	bcs	13764 <__assert_fail@plt+0x1bc0>
   1319c:	ldrd	r2, [sp, #96]	; 0x60
   131a0:	mov	r7, r5
   131a4:	orrs	r3, r2, r3
   131a8:	mov	r2, r4
   131ac:	ldr	r3, [ip, #32]
   131b0:	mvnne	r2, #0
   131b4:	movne	r7, r2
   131b8:	str	r2, [sp, #128]	; 0x80
   131bc:	ldr	r2, [ip, #36]	; 0x24
   131c0:	adds	r3, r3, r1
   131c4:	str	r7, [sp, #132]	; 0x84
   131c8:	ldr	r7, [sp, #144]	; 0x90
   131cc:	str	r3, [sp, #136]	; 0x88
   131d0:	adc	r2, r2, r0
   131d4:	ldr	r0, [sp, #148]	; 0x94
   131d8:	str	r2, [sp, #140]	; 0x8c
   131dc:	ldr	r3, [ip, #40]	; 0x28
   131e0:	ldr	r1, [ip, #44]	; 0x2c
   131e4:	cmp	r7, r3
   131e8:	movge	r2, #0
   131ec:	movlt	r2, #1
   131f0:	cmp	r7, r3
   131f4:	rsble	r2, r2, #0
   131f8:	rsbgt	r2, r2, #1
   131fc:	ldr	r3, [sp, #148]	; 0x94
   13200:	cmp	r3, r1
   13204:	movge	r3, #0
   13208:	movlt	r3, #1
   1320c:	cmp	r0, r1
   13210:	rsble	r3, r3, #0
   13214:	rsbgt	r3, r3, #1
   13218:	adds	r3, r3, r2, lsl #1
   1321c:	ldrdmi	r2, [ip, #40]	; 0x28
   13220:	strdmi	r2, [sp, #144]	; 0x90
   13224:	b	12ec4 <__assert_fail@plt+0x1320>
   13228:	ldr	r4, [sp, #40]	; 0x28
   1322c:	mov	r2, #96	; 0x60
   13230:	ldr	r0, [r8, #88]	; 0x58
   13234:	mov	r1, r4
   13238:	bl	36bbc <__assert_fail@plt+0x25018>
   1323c:	lsl	r3, r4, #1
   13240:	str	r3, [r8, #84]	; 0x54
   13244:	str	r0, [r8, #88]	; 0x58
   13248:	b	127f4 <__assert_fail@plt+0xc50>
   1324c:	movw	r3, #47392	; 0xb920
   13250:	movt	r3, #3
   13254:	mov	r7, r3
   13258:	str	r3, [r9, #56]	; 0x38
   1325c:	movw	r3, #53716	; 0xd1d4
   13260:	movt	r3, #4
   13264:	ldr	ip, [r3]
   13268:	mov	r2, #1
   1326c:	mov	r0, #4
   13270:	movw	r4, #42856	; 0xa768
   13274:	movt	r4, #3
   13278:	add	r3, r4, #524	; 0x20c
   1327c:	mov	r1, r7
   13280:	stm	sp, {r0, ip}
   13284:	movw	r0, #47868	; 0xbafc
   13288:	movt	r0, #3
   1328c:	str	r2, [sp, #8]
   13290:	add	r2, r4, #536	; 0x218
   13294:	bl	14280 <__assert_fail@plt+0x26dc>
   13298:	add	r0, r4, r0, lsl #2
   1329c:	ldr	r3, [r0, #524]	; 0x20c
   132a0:	cmp	r3, #1
   132a4:	beq	1354c <__assert_fail@plt+0x19a8>
   132a8:	cmp	r3, #0
   132ac:	beq	1353c <__assert_fail@plt+0x1998>
   132b0:	cmp	r3, #2
   132b4:	bne	12554 <__assert_fail@plt+0x9b0>
   132b8:	movw	r3, #47920	; 0xbb30
   132bc:	movt	r3, #3
   132c0:	str	r3, [r9, #20]
   132c4:	b	12554 <__assert_fail@plt+0x9b0>
   132c8:	ldr	r4, [r4]
   132cc:	mov	r2, #5
   132d0:	mov	r0, r5
   132d4:	movw	r1, #48272	; 0xbc90
   132d8:	movt	r1, #3
   132dc:	bl	117d8 <dcgettext@plt>
   132e0:	mov	r2, r0
   132e4:	mov	r0, r5
   132e8:	str	r5, [sp, #56]	; 0x38
   132ec:	mov	r1, r4
   132f0:	bl	118bc <error@plt>
   132f4:	b	13078 <__assert_fail@plt+0x14d4>
   132f8:	mov	r2, #5
   132fc:	mov	r0, r5
   13300:	movw	r1, #48168	; 0xbc28
   13304:	movt	r1, #3
   13308:	bl	117d8 <dcgettext@plt>
   1330c:	ldr	r3, [sp, #72]	; 0x48
   13310:	mov	r7, r0
   13314:	mov	r1, #3
   13318:	mov	r0, r5
   1331c:	str	r5, [sp, #56]	; 0x38
   13320:	ldr	r2, [r3, #24]
   13324:	bl	22ff0 <__assert_fail@plt+0x1144c>
   13328:	mov	r3, r0
   1332c:	mov	r2, r7
   13330:	mov	r1, r6
   13334:	mov	r0, r5
   13338:	bl	118bc <error@plt>
   1333c:	b	13060 <__assert_fail@plt+0x14bc>
   13340:	bl	172cc <__assert_fail@plt+0x5728>
   13344:	cmp	r0, #0
   13348:	bne	12d04 <__assert_fail@plt+0x1160>
   1334c:	b	12d10 <__assert_fail@plt+0x116c>
   13350:	ldr	r4, [r5, #32]
   13354:	mov	r2, #5
   13358:	movw	r1, #48228	; 0xbc64
   1335c:	movt	r1, #3
   13360:	mov	r0, #0
   13364:	bl	117d8 <dcgettext@plt>
   13368:	mov	r3, #0
   1336c:	mov	r5, r0
   13370:	ldr	r1, [sp, #68]	; 0x44
   13374:	mov	r0, #4
   13378:	str	r3, [sp, #64]	; 0x40
   1337c:	bl	22470 <__assert_fail@plt+0x108cc>
   13380:	mov	r3, r0
   13384:	mov	r2, r5
   13388:	mov	r1, r4
   1338c:	mov	r0, #0
   13390:	bl	118bc <error@plt>
   13394:	b	1271c <__assert_fail@plt+0xb78>
   13398:	ldr	r4, [sp, #72]	; 0x48
   1339c:	mov	r2, #1
   133a0:	mov	r1, r5
   133a4:	mov	r0, r4
   133a8:	bl	1bdac <__assert_fail@plt+0xa208>
   133ac:	mov	r0, r4
   133b0:	bl	1b598 <__assert_fail@plt+0x99f4>
   133b4:	cmp	r5, r0
   133b8:	bne	1366c <__assert_fail@plt+0x1ac8>
   133bc:	ldrh	r3, [r5, #56]	; 0x38
   133c0:	str	r3, [sp, #44]	; 0x2c
   133c4:	b	126bc <__assert_fail@plt+0xb18>
   133c8:	ldr	r6, [r5, #32]
   133cc:	mov	r1, #3
   133d0:	mov	r0, #0
   133d4:	ldr	r2, [sp, #68]	; 0x44
   133d8:	bl	22ff0 <__assert_fail@plt+0x1144c>
   133dc:	mov	r3, r0
   133e0:	movw	r2, #49108	; 0xbfd4
   133e4:	movt	r2, #3
   133e8:	mov	r0, #0
   133ec:	mov	r1, r6
   133f0:	bl	118bc <error@plt>
   133f4:	b	1276c <__assert_fail@plt+0xbc8>
   133f8:	mov	r1, r5
   133fc:	ldr	r0, [sp, #72]	; 0x48
   13400:	bl	3712c <__assert_fail@plt+0x25588>
   13404:	cmp	r0, #0
   13408:	beq	12714 <__assert_fail@plt+0xb70>
   1340c:	ldr	r6, [r8, #80]	; 0x50
   13410:	ldr	r4, [r5]
   13414:	cmp	r6, #0
   13418:	bne	13440 <__assert_fail@plt+0x189c>
   1341c:	b	1355c <__assert_fail@plt+0x19b8>
   13420:	ldrd	r2, [r5, #160]	; 0xa0
   13424:	ldr	r0, [r8, #80]	; 0x50
   13428:	strd	r2, [sp]
   1342c:	ldrd	r2, [r5, #64]	; 0x40
   13430:	bl	14954 <__assert_fail@plt+0x2db0>
   13434:	cmp	r0, #0
   13438:	bgt	12714 <__assert_fail@plt+0xb70>
   1343c:	ldr	r5, [r5, #4]
   13440:	subs	r3, r4, r5
   13444:	movne	r3, #1
   13448:	cmp	r5, #0
   1344c:	moveq	r3, #0
   13450:	cmp	r3, #0
   13454:	bne	13420 <__assert_fail@plt+0x187c>
   13458:	mov	r0, r3
   1345c:	mov	r2, #5
   13460:	str	r3, [sp, #64]	; 0x40
   13464:	movw	r1, #48364	; 0xbcec
   13468:	movt	r1, #3
   1346c:	mov	r5, r3
   13470:	bl	117d8 <dcgettext@plt>
   13474:	mov	r4, r0
   13478:	mov	r1, #3
   1347c:	ldr	r2, [sp, #68]	; 0x44
   13480:	mov	r0, r5
   13484:	bl	22ff0 <__assert_fail@plt+0x1144c>
   13488:	mov	r3, r0
   1348c:	mov	r2, r4
   13490:	mov	r1, r5
   13494:	mov	r0, r5
   13498:	bl	118bc <error@plt>
   1349c:	b	1271c <__assert_fail@plt+0xb78>
   134a0:	mov	r2, #5
   134a4:	movw	r1, #47776	; 0xbaa0
   134a8:	movt	r1, #3
   134ac:	mov	r0, #0
   134b0:	bl	117d8 <dcgettext@plt>
   134b4:	mov	r1, #0
   134b8:	mov	r2, r0
   134bc:	mov	r0, r1
   134c0:	bl	118bc <error@plt>
   134c4:	b	12518 <__assert_fail@plt+0x974>
   134c8:	mov	r0, #0
   134cc:	bl	13a9c <__assert_fail@plt+0x1ef8>
   134d0:	movw	r0, #47848	; 0xbae8
   134d4:	movt	r0, #3
   134d8:	bl	118ec <getenv@plt>
   134dc:	cmp	r0, #0
   134e0:	mov	r7, r0
   134e4:	str	r0, [r9, #56]	; 0x38
   134e8:	beq	1324c <__assert_fail@plt+0x16a8>
   134ec:	movw	r1, #47860	; 0xbaf4
   134f0:	movt	r1, #3
   134f4:	bl	1170c <strcmp@plt>
   134f8:	cmp	r0, #0
   134fc:	beq	1324c <__assert_fail@plt+0x16a8>
   13500:	ldrb	r3, [r7]
   13504:	cmp	r3, #43	; 0x2b
   13508:	beq	135e4 <__assert_fail@plt+0x1a40>
   1350c:	ldr	r4, [pc, #-2340]	; 12bf0 <__assert_fail@plt+0x104c>
   13510:	b	1351c <__assert_fail@plt+0x1978>
   13514:	add	r7, r7, #6
   13518:	str	r7, [r9, #56]	; 0x38
   1351c:	ldr	r7, [r9, #56]	; 0x38
   13520:	mov	r2, #6
   13524:	mov	r1, r4
   13528:	mov	r0, r7
   1352c:	bl	11b5c <strncmp@plt>
   13530:	cmp	r0, #0
   13534:	beq	13514 <__assert_fail@plt+0x1970>
   13538:	b	1253c <__assert_fail@plt+0x998>
   1353c:	movw	r3, #47880	; 0xbb08
   13540:	movt	r3, #3
   13544:	str	r3, [r9, #20]
   13548:	b	12554 <__assert_fail@plt+0x9b0>
   1354c:	movw	r3, #47904	; 0xbb20
   13550:	movt	r3, #3
   13554:	str	r3, [r9, #20]
   13558:	b	12554 <__assert_fail@plt+0x9b0>
   1355c:	bl	14724 <__assert_fail@plt+0x2b80>
   13560:	cmp	r0, #0
   13564:	str	r0, [r8, #80]	; 0x50
   13568:	beq	135d8 <__assert_fail@plt+0x1a34>
   1356c:	mov	r0, r6
   13570:	mov	fp, r8
   13574:	bl	1f3d4 <__assert_fail@plt+0xd830>
   13578:	mov	r6, r0
   1357c:	b	13590 <__assert_fail@plt+0x19ec>
   13580:	ldr	r7, [r6, #28]
   13584:	mov	r0, r6
   13588:	bl	1fd38 <__assert_fail@plt+0xe194>
   1358c:	mov	r6, r7
   13590:	cmp	r6, #0
   13594:	beq	135dc <__assert_fail@plt+0x1a38>
   13598:	ldrb	r3, [r6, #24]
   1359c:	tst	r3, #3
   135a0:	bne	13580 <__assert_fail@plt+0x19dc>
   135a4:	add	r2, sp, #128	; 0x80
   135a8:	mov	r0, #3
   135ac:	ldr	r1, [r6, #4]
   135b0:	bl	11b38 <__xstat64@plt>
   135b4:	cmp	r0, #0
   135b8:	bne	13580 <__assert_fail@plt+0x19dc>
   135bc:	ldr	r0, [fp, #80]	; 0x50
   135c0:	ldrd	r8, [sp, #224]	; 0xe0
   135c4:	ldrd	r2, [sp, #128]	; 0x80
   135c8:	strd	r8, [sp]
   135cc:	bl	147e8 <__assert_fail@plt+0x2c44>
   135d0:	cmp	r0, #0
   135d4:	bge	13580 <__assert_fail@plt+0x19dc>
   135d8:	bl	37090 <__assert_fail@plt+0x254ec>
   135dc:	mov	r8, fp
   135e0:	b	13440 <__assert_fail@plt+0x189c>
   135e4:	mov	r1, #10
   135e8:	mov	r0, r7
   135ec:	bl	11994 <strchr@plt>
   135f0:	cmp	r0, #0
   135f4:	strbne	r4, [r0]
   135f8:	bne	1253c <__assert_fail@plt+0x998>
   135fc:	b	1254c <__assert_fail@plt+0x9a8>
   13600:	mov	r2, #5
   13604:	movw	r1, #47624	; 0xba08
   13608:	movt	r1, #3
   1360c:	mov	r0, #0
   13610:	bl	117d8 <dcgettext@plt>
   13614:	mov	r1, #0
   13618:	mov	r2, r0
   1361c:	mov	r0, r1
   13620:	bl	118bc <error@plt>
   13624:	mov	r0, #1
   13628:	bl	13a9c <__assert_fail@plt+0x1ef8>
   1362c:	bl	119b8 <__errno_location@plt>
   13630:	ldr	r4, [r0]
   13634:	mov	r2, #5
   13638:	mov	r0, r5
   1363c:	movw	r1, #48008	; 0xbb88
   13640:	movt	r1, #3
   13644:	bl	117d8 <dcgettext@plt>
   13648:	mov	r5, r0
   1364c:	mov	r0, #4
   13650:	ldr	r1, [sp, #28]
   13654:	bl	22470 <__assert_fail@plt+0x108cc>
   13658:	mov	r3, r0
   1365c:	mov	r2, r5
   13660:	mov	r1, r4
   13664:	mov	r0, #1
   13668:	bl	118bc <error@plt>
   1366c:	movw	r1, #48052	; 0xbbb4
   13670:	movt	r1, #3
   13674:	ldr	r3, [pc, #-2696]	; 12bf4 <__assert_fail@plt+0x1050>
   13678:	movw	r0, #48216	; 0xbc58
   1367c:	movt	r0, #3
   13680:	movw	r2, #527	; 0x20f
   13684:	bl	11ba4 <__assert_fail@plt>
   13688:	mov	r2, #1
   1368c:	mov	r3, #0
   13690:	strd	r2, [sp, #80]	; 0x50
   13694:	b	128b4 <__assert_fail@plt+0xd10>
   13698:	mov	r2, #5
   1369c:	movw	r1, #47932	; 0xbb3c
   136a0:	movt	r1, #3
   136a4:	mov	r0, #0
   136a8:	bl	117d8 <dcgettext@plt>
   136ac:	ldr	r3, [r4]
   136b0:	mov	r6, r0
   136b4:	ldr	r0, [r5, r3, lsl #2]
   136b8:	bl	2379c <__assert_fail@plt+0x11bf8>
   136bc:	mov	r1, #0
   136c0:	mov	r3, r0
   136c4:	mov	r2, r6
   136c8:	mov	r0, r1
   136cc:	bl	118bc <error@plt>
   136d0:	movw	r3, #53808	; 0xd230
   136d4:	movt	r3, #4
   136d8:	ldr	r4, [r3]
   136dc:	mov	r2, #5
   136e0:	movw	r1, #47952	; 0xbb50
   136e4:	movt	r1, #3
   136e8:	mov	r0, #0
   136ec:	bl	117d8 <dcgettext@plt>
   136f0:	mov	r3, r0
   136f4:	movw	r2, #50764	; 0xc64c
   136f8:	movt	r2, #3
   136fc:	mov	r1, #1
   13700:	mov	r0, r4
   13704:	bl	11a18 <__fprintf_chk@plt>
   13708:	mov	r0, #1
   1370c:	bl	13a9c <__assert_fail@plt+0x1ef8>
   13710:	movw	r1, #48052	; 0xbbb4
   13714:	movt	r1, #3
   13718:	ldr	r3, [pc, #-2860]	; 12bf4 <__assert_fail@plt+0x1050>
   1371c:	movw	r0, #48248	; 0xbc78
   13720:	movt	r0, #3
   13724:	movw	r2, #638	; 0x27e
   13728:	bl	11ba4 <__assert_fail@plt>
   1372c:	mov	r2, #5
   13730:	movw	r1, #48292	; 0xbca4
   13734:	movt	r1, #3
   13738:	mov	r0, #0
   1373c:	bl	117d8 <dcgettext@plt>
   13740:	mov	r4, r0
   13744:	mov	r0, #4
   13748:	ldr	r1, [sp, #28]
   1374c:	bl	22470 <__assert_fail@plt+0x108cc>
   13750:	mov	r3, r0
   13754:	mov	r2, r4
   13758:	mov	r1, #0
   1375c:	mov	r0, #1
   13760:	bl	118bc <error@plt>
   13764:	mov	r2, #1
   13768:	mov	r3, #0
   1376c:	strd	r2, [sp, #96]	; 0x60
   13770:	b	1319c <__assert_fail@plt+0x15f8>
   13774:	mov	r0, #1
   13778:	mov	r1, #0
   1377c:	strd	r0, [sp, #96]	; 0x60
   13780:	b	12fbc <__assert_fail@plt+0x1418>
   13784:	mov	r2, #1
   13788:	mov	r3, #0
   1378c:	strd	r2, [sp, #96]	; 0x60
   13790:	b	12e2c <__assert_fail@plt+0x1288>
   13794:	cmp	r7, #0
   13798:	beq	12500 <__assert_fail@plt+0x95c>
   1379c:	movw	r4, #53708	; 0xd1cc
   137a0:	movt	r4, #4
   137a4:	b	130c0 <__assert_fail@plt+0x151c>
   137a8:	ldr	ip, [r8]
   137ac:	mov	r2, #116	; 0x74
   137b0:	ldr	r3, [pc, #-3008]	; 12bf8 <__assert_fail@plt+0x1054>
   137b4:	ldr	r1, [sp, #116]	; 0x74
   137b8:	str	ip, [sp]
   137bc:	bl	381c8 <__assert_fail@plt+0x26624>
   137c0:	mov	fp, #0
   137c4:	mov	lr, #0
   137c8:	pop	{r1}		; (ldr r1, [sp], #4)
   137cc:	mov	r2, sp
   137d0:	push	{r2}		; (str r2, [sp, #-4]!)
   137d4:	push	{r0}		; (str r0, [sp, #-4]!)
   137d8:	ldr	ip, [pc, #16]	; 137f0 <__assert_fail@plt+0x1c4c>
   137dc:	push	{ip}		; (str ip, [sp, #-4]!)
   137e0:	ldr	r0, [pc, #12]	; 137f4 <__assert_fail@plt+0x1c50>
   137e4:	ldr	r3, [pc, #12]	; 137f8 <__assert_fail@plt+0x1c54>
   137e8:	bl	11904 <__libc_start_main@plt>
   137ec:	bl	11b68 <abort@plt>
   137f0:	andeq	sl, r3, r0, asr #14
   137f4:			; <UNDEFINED> instruction: 0x00011bb0
   137f8:	andeq	sl, r3, r0, ror #13
   137fc:	ldr	r3, [pc, #20]	; 13818 <__assert_fail@plt+0x1c74>
   13800:	ldr	r2, [pc, #20]	; 1381c <__assert_fail@plt+0x1c78>
   13804:	add	r3, pc, r3
   13808:	ldr	r2, [r3, r2]
   1380c:	cmp	r2, #0
   13810:	bxeq	lr
   13814:	b	11940 <__gmon_start__@plt>
   13818:	strdeq	r9, [r3], -r4
   1381c:	andeq	r0, r0, r0, asr #3
   13820:	ldr	r0, [pc, #24]	; 13840 <__assert_fail@plt+0x1c9c>
   13824:	ldr	r3, [pc, #24]	; 13844 <__assert_fail@plt+0x1ca0>
   13828:	cmp	r3, r0
   1382c:	bxeq	lr
   13830:	ldr	r3, [pc, #16]	; 13848 <__assert_fail@plt+0x1ca4>
   13834:	cmp	r3, #0
   13838:	bxeq	lr
   1383c:	bx	r3
   13840:	andeq	sp, r4, ip, lsl r2
   13844:	andeq	sp, r4, ip, lsl r2
   13848:	andeq	r0, r0, r0
   1384c:	ldr	r0, [pc, #36]	; 13878 <__assert_fail@plt+0x1cd4>
   13850:	ldr	r1, [pc, #36]	; 1387c <__assert_fail@plt+0x1cd8>
   13854:	sub	r1, r1, r0
   13858:	asr	r1, r1, #2
   1385c:	add	r1, r1, r1, lsr #31
   13860:	asrs	r1, r1, #1
   13864:	bxeq	lr
   13868:	ldr	r3, [pc, #16]	; 13880 <__assert_fail@plt+0x1cdc>
   1386c:	cmp	r3, #0
   13870:	bxeq	lr
   13874:	bx	r3
   13878:	andeq	sp, r4, ip, lsl r2
   1387c:	andeq	sp, r4, ip, lsl r2
   13880:	andeq	r0, r0, r0
   13884:	push	{r4, lr}
   13888:	ldr	r4, [pc, #24]	; 138a8 <__assert_fail@plt+0x1d04>
   1388c:	ldrb	r3, [r4]
   13890:	cmp	r3, #0
   13894:	popne	{r4, pc}
   13898:	bl	13820 <__assert_fail@plt+0x1c7c>
   1389c:	mov	r3, #1
   138a0:	strb	r3, [r4]
   138a4:	pop	{r4, pc}
   138a8:	andeq	sp, r4, r4, asr #4
   138ac:	b	1384c <__assert_fail@plt+0x1ca8>
   138b0:	mvn	r3, #0
   138b4:	mvn	r2, #0
   138b8:	strd	r4, [sp, #-20]!	; 0xffffffec
   138bc:	cmp	r1, r3
   138c0:	strd	r6, [sp, #8]
   138c4:	cmpeq	r0, r2
   138c8:	str	lr, [sp, #16]
   138cc:	sub	sp, sp, #676	; 0x2a4
   138d0:	beq	13920 <__assert_fail@plt+0x1d7c>
   138d4:	movw	r3, #53832	; 0xd248
   138d8:	movt	r3, #4
   138dc:	ldrd	r4, [r3, #8]
   138e0:	mov	r6, #1
   138e4:	mov	r7, #0
   138e8:	add	r2, sp, #20
   138ec:	strd	r6, [sp]
   138f0:	ldr	r3, [r3]
   138f4:	strd	r4, [sp, #8]
   138f8:	bl	1d708 <__assert_fail@plt+0xbb64>
   138fc:	movw	r3, #53820	; 0xd23c
   13900:	movt	r3, #4
   13904:	ldr	r1, [r3]
   13908:	bl	116b8 <fputs_unlocked@plt>
   1390c:	add	sp, sp, #676	; 0x2a4
   13910:	ldrd	r4, [sp]
   13914:	ldrd	r6, [sp, #8]
   13918:	add	sp, sp, #16
   1391c:	pop	{pc}		; (ldr pc, [sp], #4)
   13920:	movw	r1, #43432	; 0xa9a8
   13924:	movt	r1, #3
   13928:	mov	r2, #5
   1392c:	mov	r0, #0
   13930:	bl	117d8 <dcgettext@plt>
   13934:	b	138fc <__assert_fail@plt+0x1d58>
   13938:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1393c:	movw	r4, #53832	; 0xd248
   13940:	movt	r4, #4
   13944:	ldrb	r3, [r4, #16]
   13948:	movw	r5, #53820	; 0xd23c
   1394c:	movt	r5, #4
   13950:	strd	r6, [sp, #8]
   13954:	mov	r6, r0
   13958:	strd	r8, [sp, #16]
   1395c:	mov	r8, r1
   13960:	str	sl, [sp, #24]
   13964:	str	lr, [sp, #28]
   13968:	sub	sp, sp, #88	; 0x58
   1396c:	cmp	r3, #0
   13970:	ldrdne	r0, [r0, #8]
   13974:	ldrdeq	r0, [r6]
   13978:	bl	138b0 <__assert_fail@plt+0x1d0c>
   1397c:	ldrb	r3, [r4, #17]
   13980:	cmp	r3, #0
   13984:	beq	139f0 <__assert_fail@plt+0x1e4c>
   13988:	ldr	r0, [r5]
   1398c:	ldr	r3, [r0, #20]
   13990:	ldr	r2, [r0, #24]
   13994:	cmp	r3, r2
   13998:	addcc	r1, r3, #1
   1399c:	movcc	r2, #9
   139a0:	strcc	r1, [r0, #20]
   139a4:	strbcc	r2, [r3]
   139a8:	bcs	13a38 <__assert_fail@plt+0x1e94>
   139ac:	ldrd	r6, [r6, #16]
   139b0:	add	r1, sp, #12
   139b4:	add	r2, sp, #44	; 0x2c
   139b8:	ldr	r9, [r4, #24]
   139bc:	ldr	sl, [r4, #20]
   139c0:	strd	r6, [sp, #12]
   139c4:	mov	r0, r9
   139c8:	bl	360a8 <__assert_fail@plt+0x24504>
   139cc:	subs	r6, r0, #0
   139d0:	beq	13a44 <__assert_fail@plt+0x1ea0>
   139d4:	ldr	ip, [sp, #16]
   139d8:	mov	r3, r9
   139dc:	add	r2, sp, #44	; 0x2c
   139e0:	mov	r1, sl
   139e4:	ldr	r0, [r5]
   139e8:	str	ip, [sp]
   139ec:	bl	195c4 <__assert_fail@plt+0x7a20>
   139f0:	ldrb	r3, [r4, #28]
   139f4:	mov	r2, r8
   139f8:	movw	r1, #43468	; 0xa9cc
   139fc:	movt	r1, #3
   13a00:	mov	r0, #1
   13a04:	cmp	r3, #0
   13a08:	moveq	r3, #10
   13a0c:	movne	r3, #0
   13a10:	bl	11a00 <__printf_chk@plt>
   13a14:	ldr	r0, [r5]
   13a18:	bl	1182c <fflush_unlocked@plt>
   13a1c:	add	sp, sp, #88	; 0x58
   13a20:	ldrd	r4, [sp]
   13a24:	ldrd	r6, [sp, #8]
   13a28:	ldrd	r8, [sp, #16]
   13a2c:	ldr	sl, [sp, #24]
   13a30:	add	sp, sp, #28
   13a34:	pop	{pc}		; (ldr pc, [sp], #4)
   13a38:	mov	r1, #9
   13a3c:	bl	11a60 <__overflow@plt>
   13a40:	b	139ac <__assert_fail@plt+0x1e08>
   13a44:	ldr	r0, [sp, #12]
   13a48:	add	r2, sp, #20
   13a4c:	asr	r1, r0, #31
   13a50:	bl	1ea7c <__assert_fail@plt+0xced8>
   13a54:	mov	r7, r0
   13a58:	mov	r2, #5
   13a5c:	mov	r0, r6
   13a60:	movw	r1, #43444	; 0xa9b4
   13a64:	movt	r1, #3
   13a68:	bl	117d8 <dcgettext@plt>
   13a6c:	mov	r9, r0
   13a70:	mov	r0, r7
   13a74:	bl	2379c <__assert_fail@plt+0x11bf8>
   13a78:	mov	r3, r0
   13a7c:	mov	r1, r6
   13a80:	mov	r0, r6
   13a84:	mov	r2, r9
   13a88:	bl	118bc <error@plt>
   13a8c:	mov	r0, r7
   13a90:	ldr	r1, [r5]
   13a94:	bl	116b8 <fputs_unlocked@plt>
   13a98:	b	139f0 <__assert_fail@plt+0x1e4c>
   13a9c:	subs	r6, r0, #0
   13aa0:	str	r7, [sp, #-8]!
   13aa4:	str	lr, [sp, #4]
   13aa8:	sub	sp, sp, #56	; 0x38
   13aac:	beq	13af4 <__assert_fail@plt+0x1f50>
   13ab0:	movw	r3, #53808	; 0xd230
   13ab4:	movt	r3, #4
   13ab8:	ldr	r4, [r3]
   13abc:	mov	r2, #5
   13ac0:	movw	r1, #43480	; 0xa9d8
   13ac4:	movt	r1, #3
   13ac8:	mov	r0, #0
   13acc:	bl	117d8 <dcgettext@plt>
   13ad0:	movw	r3, #53960	; 0xd2c8
   13ad4:	movt	r3, #4
   13ad8:	mov	r2, r0
   13adc:	mov	r1, #1
   13ae0:	ldr	r3, [r3]
   13ae4:	mov	r0, r4
   13ae8:	bl	11a18 <__fprintf_chk@plt>
   13aec:	mov	r0, r6
   13af0:	bl	11970 <exit@plt>
   13af4:	mov	r2, #5
   13af8:	movw	r1, #43520	; 0xaa00
   13afc:	movt	r1, #3
   13b00:	movw	r7, #53820	; 0xd23c
   13b04:	movt	r7, #4
   13b08:	bl	117d8 <dcgettext@plt>
   13b0c:	movw	r3, #53960	; 0xd2c8
   13b10:	movt	r3, #4
   13b14:	ldr	r3, [r3]
   13b18:	mov	r1, r0
   13b1c:	mov	r0, #1
   13b20:	mov	r2, r3
   13b24:	bl	11a00 <__printf_chk@plt>
   13b28:	mov	r2, #5
   13b2c:	movw	r1, #43592	; 0xaa48
   13b30:	movt	r1, #3
   13b34:	mov	r0, r6
   13b38:	bl	117d8 <dcgettext@plt>
   13b3c:	ldr	r1, [r7]
   13b40:	bl	116b8 <fputs_unlocked@plt>
   13b44:	mov	r2, #5
   13b48:	movw	r1, #43668	; 0xaa94
   13b4c:	movt	r1, #3
   13b50:	mov	r0, r6
   13b54:	bl	117d8 <dcgettext@plt>
   13b58:	ldr	r1, [r7]
   13b5c:	bl	116b8 <fputs_unlocked@plt>
   13b60:	mov	r2, #5
   13b64:	movw	r1, #43744	; 0xaae0
   13b68:	movt	r1, #3
   13b6c:	mov	r0, r6
   13b70:	bl	117d8 <dcgettext@plt>
   13b74:	ldr	r1, [r7]
   13b78:	bl	116b8 <fputs_unlocked@plt>
   13b7c:	mov	r2, #5
   13b80:	movw	r1, #44188	; 0xac9c
   13b84:	movt	r1, #3
   13b88:	mov	r0, r6
   13b8c:	bl	117d8 <dcgettext@plt>
   13b90:	ldr	r1, [r7]
   13b94:	bl	116b8 <fputs_unlocked@plt>
   13b98:	mov	r2, #5
   13b9c:	movw	r1, #44880	; 0xaf50
   13ba0:	movt	r1, #3
   13ba4:	mov	r0, r6
   13ba8:	bl	117d8 <dcgettext@plt>
   13bac:	ldr	r1, [r7]
   13bb0:	bl	116b8 <fputs_unlocked@plt>
   13bb4:	mov	r2, #5
   13bb8:	movw	r1, #45300	; 0xb0f4
   13bbc:	movt	r1, #3
   13bc0:	mov	r0, r6
   13bc4:	bl	117d8 <dcgettext@plt>
   13bc8:	ldr	r1, [r7]
   13bcc:	bl	116b8 <fputs_unlocked@plt>
   13bd0:	mov	r2, #5
   13bd4:	movw	r1, #45508	; 0xb1c4
   13bd8:	movt	r1, #3
   13bdc:	mov	r0, r6
   13be0:	bl	117d8 <dcgettext@plt>
   13be4:	ldr	r1, [r7]
   13be8:	bl	116b8 <fputs_unlocked@plt>
   13bec:	mov	r2, #5
   13bf0:	movw	r1, #45796	; 0xb2e4
   13bf4:	movt	r1, #3
   13bf8:	mov	r0, r6
   13bfc:	bl	117d8 <dcgettext@plt>
   13c00:	ldr	r1, [r7]
   13c04:	bl	116b8 <fputs_unlocked@plt>
   13c08:	mov	r2, #5
   13c0c:	movw	r1, #46408	; 0xb548
   13c10:	movt	r1, #3
   13c14:	mov	r0, r6
   13c18:	bl	117d8 <dcgettext@plt>
   13c1c:	ldr	r1, [r7]
   13c20:	bl	116b8 <fputs_unlocked@plt>
   13c24:	mov	r2, #5
   13c28:	movw	r1, #46612	; 0xb614
   13c2c:	movt	r1, #3
   13c30:	mov	r0, r6
   13c34:	bl	117d8 <dcgettext@plt>
   13c38:	ldr	r1, [r7]
   13c3c:	bl	116b8 <fputs_unlocked@plt>
   13c40:	mov	r2, #5
   13c44:	movw	r1, #46660	; 0xb644
   13c48:	movt	r1, #3
   13c4c:	mov	r0, r6
   13c50:	bl	117d8 <dcgettext@plt>
   13c54:	ldr	r1, [r7]
   13c58:	bl	116b8 <fputs_unlocked@plt>
   13c5c:	mov	r2, #5
   13c60:	movw	r1, #46716	; 0xb67c
   13c64:	movt	r1, #3
   13c68:	mov	r0, r6
   13c6c:	bl	117d8 <dcgettext@plt>
   13c70:	mov	r1, r0
   13c74:	movw	r2, #46940	; 0xb75c
   13c78:	movt	r2, #3
   13c7c:	mov	r0, #1
   13c80:	bl	11a00 <__printf_chk@plt>
   13c84:	mov	r2, #5
   13c88:	movw	r1, #46944	; 0xb760
   13c8c:	movt	r1, #3
   13c90:	mov	r0, r6
   13c94:	bl	117d8 <dcgettext@plt>
   13c98:	ldr	r1, [r7]
   13c9c:	bl	116b8 <fputs_unlocked@plt>
   13ca0:	movw	lr, #42856	; 0xa768
   13ca4:	movt	lr, #3
   13ca8:	ldr	ip, [lr]
   13cac:	ldr	r4, [lr, #4]
   13cb0:	ldrd	r8, [lr, #8]
   13cb4:	subs	r1, ip, #0
   13cb8:	str	ip, [sp]
   13cbc:	ldrd	r2, [lr, #16]
   13cc0:	str	r4, [sp, #4]
   13cc4:	ldrd	r4, [lr, #24]
   13cc8:	strd	r8, [sp, #8]
   13ccc:	ldrd	r8, [lr, #32]
   13cd0:	strd	r2, [sp, #16]
   13cd4:	ldrd	r2, [lr, #40]	; 0x28
   13cd8:	strd	r4, [sp, #24]
   13cdc:	ldrd	r4, [lr, #48]	; 0x30
   13ce0:	strd	r8, [sp, #32]
   13ce4:	strd	r2, [sp, #40]	; 0x28
   13ce8:	strd	r4, [sp, #48]	; 0x30
   13cec:	movwne	r5, #43476	; 0xa9d4
   13cf0:	mov	r4, sp
   13cf4:	movtne	r5, #3
   13cf8:	bne	13df0 <__assert_fail@plt+0x224c>
   13cfc:	ldr	r4, [r4, #4]
   13d00:	movw	r1, #47156	; 0xb834
   13d04:	movt	r1, #3
   13d08:	mov	r2, #5
   13d0c:	cmp	r4, #0
   13d10:	beq	13e04 <__assert_fail@plt+0x2260>
   13d14:	mov	r0, #0
   13d18:	bl	117d8 <dcgettext@plt>
   13d1c:	mov	r1, r0
   13d20:	movw	r3, #47180	; 0xb84c
   13d24:	movt	r3, #3
   13d28:	movw	r2, #47220	; 0xb874
   13d2c:	movt	r2, #3
   13d30:	mov	r0, #1
   13d34:	bl	11a00 <__printf_chk@plt>
   13d38:	mov	r1, #0
   13d3c:	mov	r0, #5
   13d40:	bl	11a6c <setlocale@plt>
   13d44:	cmp	r0, #0
   13d48:	movweq	r5, #43476	; 0xa9d4
   13d4c:	movteq	r5, #3
   13d50:	beq	13d74 <__assert_fail@plt+0x21d0>
   13d54:	movw	r1, #47236	; 0xb884
   13d58:	movt	r1, #3
   13d5c:	mov	r2, #3
   13d60:	movw	r5, #43476	; 0xa9d4
   13d64:	movt	r5, #3
   13d68:	bl	11b5c <strncmp@plt>
   13d6c:	cmp	r0, #0
   13d70:	bne	13ebc <__assert_fail@plt+0x2318>
   13d74:	mov	r2, #5
   13d78:	movw	r1, #47312	; 0xb8d0
   13d7c:	movt	r1, #3
   13d80:	mov	r0, #0
   13d84:	bl	117d8 <dcgettext@plt>
   13d88:	mov	r1, r0
   13d8c:	movw	r3, #43476	; 0xa9d4
   13d90:	movt	r3, #3
   13d94:	movw	r2, #47180	; 0xb84c
   13d98:	movt	r2, #3
   13d9c:	mov	r0, #1
   13da0:	bl	11a00 <__printf_chk@plt>
   13da4:	mov	r2, #5
   13da8:	movw	r1, #47340	; 0xb8ec
   13dac:	movt	r1, #3
   13db0:	mov	r0, #0
   13db4:	bl	117d8 <dcgettext@plt>
   13db8:	movw	r2, #48560	; 0xbdb0
   13dbc:	movt	r2, #3
   13dc0:	cmp	r4, r5
   13dc4:	movw	r3, #49420	; 0xc10c
   13dc8:	movt	r3, #3
   13dcc:	mov	r1, r0
   13dd0:	moveq	r3, r2
   13dd4:	mov	r2, r4
   13dd8:	mov	r0, #1
   13ddc:	bl	11a00 <__printf_chk@plt>
   13de0:	b	13aec <__assert_fail@plt+0x1f48>
   13de4:	ldr	r1, [r4, #8]!
   13de8:	cmp	r1, #0
   13dec:	beq	13cfc <__assert_fail@plt+0x2158>
   13df0:	mov	r0, r5
   13df4:	bl	1170c <strcmp@plt>
   13df8:	cmp	r0, #0
   13dfc:	bne	13de4 <__assert_fail@plt+0x2240>
   13e00:	b	13cfc <__assert_fail@plt+0x2158>
   13e04:	mov	r0, r4
   13e08:	bl	117d8 <dcgettext@plt>
   13e0c:	mov	r1, r0
   13e10:	movw	r3, #47180	; 0xb84c
   13e14:	movt	r3, #3
   13e18:	movw	r2, #47220	; 0xb874
   13e1c:	movt	r2, #3
   13e20:	mov	r0, #1
   13e24:	bl	11a00 <__printf_chk@plt>
   13e28:	mov	r1, r4
   13e2c:	mov	r0, #5
   13e30:	bl	11a6c <setlocale@plt>
   13e34:	cmp	r0, #0
   13e38:	beq	13e54 <__assert_fail@plt+0x22b0>
   13e3c:	movw	r1, #47236	; 0xb884
   13e40:	movt	r1, #3
   13e44:	mov	r2, #3
   13e48:	bl	11b5c <strncmp@plt>
   13e4c:	cmp	r0, #0
   13e50:	bne	13eb0 <__assert_fail@plt+0x230c>
   13e54:	mov	r2, #5
   13e58:	movw	r1, #47312	; 0xb8d0
   13e5c:	movt	r1, #3
   13e60:	mov	r0, #0
   13e64:	bl	117d8 <dcgettext@plt>
   13e68:	mov	r1, r0
   13e6c:	movw	r3, #43476	; 0xa9d4
   13e70:	movt	r3, #3
   13e74:	movw	r2, #47180	; 0xb84c
   13e78:	movt	r2, #3
   13e7c:	mov	r0, #1
   13e80:	bl	11a00 <__printf_chk@plt>
   13e84:	movw	r1, #47340	; 0xb8ec
   13e88:	movt	r1, #3
   13e8c:	mov	r2, #5
   13e90:	mov	r0, #0
   13e94:	bl	117d8 <dcgettext@plt>
   13e98:	movw	r4, #43476	; 0xa9d4
   13e9c:	movt	r4, #3
   13ea0:	movw	r3, #48560	; 0xbdb0
   13ea4:	movt	r3, #3
   13ea8:	mov	r1, r0
   13eac:	b	13dd4 <__assert_fail@plt+0x2230>
   13eb0:	movw	r5, #43476	; 0xa9d4
   13eb4:	movt	r5, #3
   13eb8:	mov	r4, r5
   13ebc:	mov	r2, #5
   13ec0:	movw	r1, #47240	; 0xb888
   13ec4:	movt	r1, #3
   13ec8:	mov	r0, #0
   13ecc:	bl	117d8 <dcgettext@plt>
   13ed0:	ldr	r1, [r7]
   13ed4:	bl	116b8 <fputs_unlocked@plt>
   13ed8:	b	13d74 <__assert_fail@plt+0x21d0>
   13edc:	mov	r0, #1
   13ee0:	b	13a9c <__assert_fail@plt+0x1ef8>
   13ee4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ee8:	mov	r4, r1
   13eec:	strd	r6, [sp, #8]
   13ef0:	mov	r6, r2
   13ef4:	strd	r8, [sp, #16]
   13ef8:	mov	r8, r3
   13efc:	strd	sl, [sp, #24]
   13f00:	mov	sl, r0
   13f04:	str	lr, [sp, #32]
   13f08:	sub	sp, sp, #12
   13f0c:	str	r2, [sp]
   13f10:	bl	11988 <strlen@plt>
   13f14:	ldr	fp, [r4]
   13f18:	cmp	fp, #0
   13f1c:	beq	1402c <__assert_fail@plt+0x2488>
   13f20:	cmp	r6, #0
   13f24:	mov	r7, r0
   13f28:	beq	13fd8 <__assert_fail@plt+0x2434>
   13f2c:	mov	r5, #0
   13f30:	mvn	r9, #0
   13f34:	str	r5, [sp, #4]
   13f38:	mov	r2, r7
   13f3c:	mov	r1, sl
   13f40:	mov	r0, fp
   13f44:	bl	11b5c <strncmp@plt>
   13f48:	cmp	r0, #0
   13f4c:	mov	r0, fp
   13f50:	bne	13f90 <__assert_fail@plt+0x23ec>
   13f54:	bl	11988 <strlen@plt>
   13f58:	ldr	r3, [sp]
   13f5c:	cmp	r0, r7
   13f60:	mov	r2, r8
   13f64:	mov	r1, r6
   13f68:	mla	r0, r8, r9, r3
   13f6c:	beq	13fd0 <__assert_fail@plt+0x242c>
   13f70:	cmn	r9, #1
   13f74:	moveq	r9, r5
   13f78:	beq	13f90 <__assert_fail@plt+0x23ec>
   13f7c:	bl	117c0 <memcmp@plt>
   13f80:	ldr	r3, [sp, #4]
   13f84:	cmp	r0, #0
   13f88:	movne	r3, #1
   13f8c:	str	r3, [sp, #4]
   13f90:	ldr	fp, [r4, #4]!
   13f94:	add	r5, r5, #1
   13f98:	add	r6, r6, r8
   13f9c:	cmp	fp, #0
   13fa0:	bne	13f38 <__assert_fail@plt+0x2394>
   13fa4:	ldr	r3, [sp, #4]
   13fa8:	cmp	r3, #0
   13fac:	mvnne	r9, #1
   13fb0:	mov	r0, r9
   13fb4:	add	sp, sp, #12
   13fb8:	ldrd	r4, [sp]
   13fbc:	ldrd	r6, [sp, #8]
   13fc0:	ldrd	r8, [sp, #16]
   13fc4:	ldrd	sl, [sp, #24]
   13fc8:	add	sp, sp, #32
   13fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   13fd0:	mov	r9, r5
   13fd4:	b	13fb0 <__assert_fail@plt+0x240c>
   13fd8:	mov	r5, r6
   13fdc:	mvn	r9, #0
   13fe0:	mov	r2, r7
   13fe4:	mov	r1, sl
   13fe8:	mov	r0, fp
   13fec:	bl	11b5c <strncmp@plt>
   13ff0:	cmp	r0, #0
   13ff4:	mov	r0, fp
   13ff8:	bne	14014 <__assert_fail@plt+0x2470>
   13ffc:	bl	11988 <strlen@plt>
   14000:	cmp	r0, r7
   14004:	beq	13fd0 <__assert_fail@plt+0x242c>
   14008:	cmn	r9, #1
   1400c:	moveq	r9, r5
   14010:	movne	r6, #1
   14014:	ldr	fp, [r4, #4]!
   14018:	add	r5, r5, #1
   1401c:	cmp	fp, #0
   14020:	bne	13fe0 <__assert_fail@plt+0x243c>
   14024:	str	r6, [sp, #4]
   14028:	b	13fa4 <__assert_fail@plt+0x2400>
   1402c:	mvn	r9, #0
   14030:	b	13fb0 <__assert_fail@plt+0x240c>
   14034:	strd	r4, [sp, #-16]!
   14038:	str	r6, [sp, #8]
   1403c:	mov	r6, r0
   14040:	ldr	r0, [r1]
   14044:	str	lr, [sp, #12]
   14048:	cmp	r0, #0
   1404c:	beq	14090 <__assert_fail@plt+0x24ec>
   14050:	mov	r4, r1
   14054:	mov	r5, #0
   14058:	b	1406c <__assert_fail@plt+0x24c8>
   1405c:	ldr	r0, [r4, #4]!
   14060:	add	r5, r5, #1
   14064:	cmp	r0, #0
   14068:	beq	14090 <__assert_fail@plt+0x24ec>
   1406c:	mov	r1, r6
   14070:	bl	1170c <strcmp@plt>
   14074:	cmp	r0, #0
   14078:	bne	1405c <__assert_fail@plt+0x24b8>
   1407c:	mov	r0, r5
   14080:	ldrd	r4, [sp]
   14084:	ldr	r6, [sp, #8]
   14088:	add	sp, sp, #12
   1408c:	pop	{pc}		; (ldr pc, [sp], #4)
   14090:	ldrd	r4, [sp]
   14094:	mvn	r0, #0
   14098:	ldr	r6, [sp, #8]
   1409c:	add	sp, sp, #12
   140a0:	pop	{pc}		; (ldr pc, [sp], #4)
   140a4:	cmn	r2, #1
   140a8:	strd	r4, [sp, #-16]!
   140ac:	mov	r5, r1
   140b0:	movweq	r1, #48992	; 0xbf60
   140b4:	movwne	r1, #49020	; 0xbf7c
   140b8:	str	r6, [sp, #8]
   140bc:	movteq	r1, #3
   140c0:	movtne	r1, #3
   140c4:	str	lr, [sp, #12]
   140c8:	mov	r6, r0
   140cc:	sub	sp, sp, #8
   140d0:	mov	r2, #5
   140d4:	mov	r0, #0
   140d8:	bl	117d8 <dcgettext@plt>
   140dc:	mov	r4, r0
   140e0:	mov	r2, r5
   140e4:	mov	r1, #8
   140e8:	mov	r0, #0
   140ec:	bl	22394 <__assert_fail@plt+0x107f0>
   140f0:	mov	r5, r0
   140f4:	mov	r1, r6
   140f8:	mov	r0, #1
   140fc:	bl	2378c <__assert_fail@plt+0x11be8>
   14100:	mov	r1, #0
   14104:	mov	r3, r5
   14108:	str	r0, [sp]
   1410c:	mov	r2, r4
   14110:	mov	r0, r1
   14114:	bl	118bc <error@plt>
   14118:	add	sp, sp, #8
   1411c:	ldrd	r4, [sp]
   14120:	ldr	r6, [sp, #8]
   14124:	add	sp, sp, #12
   14128:	pop	{pc}		; (ldr pc, [sp], #4)
   1412c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14130:	mov	r4, r1
   14134:	movw	r1, #49052	; 0xbf9c
   14138:	movt	r1, #3
   1413c:	strd	r6, [sp, #8]
   14140:	mov	r6, r0
   14144:	mov	r7, r2
   14148:	mov	r0, #0
   1414c:	strd	r8, [sp, #16]
   14150:	mov	r2, #5
   14154:	strd	sl, [sp, #24]
   14158:	movw	sl, #53808	; 0xd230
   1415c:	movt	sl, #4
   14160:	str	lr, [sp, #32]
   14164:	sub	sp, sp, #12
   14168:	bl	117d8 <dcgettext@plt>
   1416c:	ldr	r1, [sl]
   14170:	bl	116b8 <fputs_unlocked@plt>
   14174:	ldr	fp, [r6]
   14178:	cmp	fp, #0
   1417c:	beq	1421c <__assert_fail@plt+0x2678>
   14180:	movw	r3, #49076	; 0xbfb4
   14184:	movt	r3, #3
   14188:	mov	r9, #0
   1418c:	str	r3, [sp]
   14190:	movw	r3, #49084	; 0xbfbc
   14194:	movt	r3, #3
   14198:	mov	r5, r9
   1419c:	str	r3, [sp, #4]
   141a0:	b	141d8 <__assert_fail@plt+0x2634>
   141a4:	mov	r0, fp
   141a8:	mov	r9, r4
   141ac:	bl	2379c <__assert_fail@plt+0x11bf8>
   141b0:	mov	r3, r0
   141b4:	mov	r1, #1
   141b8:	ldr	r2, [sp]
   141bc:	mov	r0, r8
   141c0:	bl	11a18 <__fprintf_chk@plt>
   141c4:	ldr	fp, [r6, #4]!
   141c8:	add	r5, r5, #1
   141cc:	add	r4, r4, r7
   141d0:	cmp	fp, #0
   141d4:	beq	1421c <__assert_fail@plt+0x2678>
   141d8:	cmp	r5, #0
   141dc:	mov	r1, r4
   141e0:	ldr	r8, [sl]
   141e4:	mov	r2, r7
   141e8:	mov	r0, r9
   141ec:	beq	141a4 <__assert_fail@plt+0x2600>
   141f0:	bl	117c0 <memcmp@plt>
   141f4:	cmp	r0, #0
   141f8:	bne	141a4 <__assert_fail@plt+0x2600>
   141fc:	mov	r0, fp
   14200:	bl	2379c <__assert_fail@plt+0x11bf8>
   14204:	mov	r3, r0
   14208:	mov	r1, #1
   1420c:	ldr	r2, [sp, #4]
   14210:	mov	r0, r8
   14214:	bl	11a18 <__fprintf_chk@plt>
   14218:	b	141c4 <__assert_fail@plt+0x2620>
   1421c:	ldr	r0, [sl]
   14220:	ldr	r3, [r0, #20]
   14224:	ldr	r2, [r0, #24]
   14228:	cmp	r3, r2
   1422c:	bcs	1425c <__assert_fail@plt+0x26b8>
   14230:	add	r1, r3, #1
   14234:	mov	r2, #10
   14238:	str	r1, [r0, #20]
   1423c:	strb	r2, [r3]
   14240:	add	sp, sp, #12
   14244:	ldrd	r4, [sp]
   14248:	ldrd	r6, [sp, #8]
   1424c:	ldrd	r8, [sp, #16]
   14250:	ldrd	sl, [sp, #24]
   14254:	add	sp, sp, #32
   14258:	pop	{pc}		; (ldr pc, [sp], #4)
   1425c:	mov	r1, #10
   14260:	add	sp, sp, #12
   14264:	ldrd	r4, [sp]
   14268:	ldrd	r6, [sp, #8]
   1426c:	ldrd	r8, [sp, #16]
   14270:	ldrd	sl, [sp, #24]
   14274:	ldr	lr, [sp, #32]
   14278:	add	sp, sp, #36	; 0x24
   1427c:	b	11a60 <__overflow@plt>
   14280:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14284:	mov	r5, r1
   14288:	strd	r6, [sp, #8]
   1428c:	mov	r6, r2
   14290:	mov	r7, r3
   14294:	strd	r8, [sp, #16]
   14298:	mov	r8, r0
   1429c:	str	lr, [sp, #24]
   142a0:	sub	sp, sp, #12
   142a4:	ldrb	r4, [sp, #48]	; 0x30
   142a8:	cmp	r4, #0
   142ac:	bne	14358 <__assert_fail@plt+0x27b4>
   142b0:	ldr	r0, [r2]
   142b4:	cmp	r0, #0
   142b8:	movne	r9, r2
   142bc:	bne	14340 <__assert_fail@plt+0x279c>
   142c0:	movw	r1, #48992	; 0xbf60
   142c4:	movt	r1, #3
   142c8:	mov	r2, #5
   142cc:	mov	r0, #0
   142d0:	bl	117d8 <dcgettext@plt>
   142d4:	mov	r9, r0
   142d8:	mov	r2, r5
   142dc:	mov	r1, #8
   142e0:	mov	r0, #0
   142e4:	bl	22394 <__assert_fail@plt+0x107f0>
   142e8:	mov	r4, r0
   142ec:	mov	r1, r8
   142f0:	mov	r0, #1
   142f4:	bl	2378c <__assert_fail@plt+0x11be8>
   142f8:	mov	r1, #0
   142fc:	mov	r3, r4
   14300:	str	r0, [sp]
   14304:	mov	r2, r9
   14308:	mov	r0, r1
   1430c:	bl	118bc <error@plt>
   14310:	mov	r0, r6
   14314:	mov	r1, r7
   14318:	ldr	r2, [sp, #40]	; 0x28
   1431c:	bl	1412c <__assert_fail@plt+0x2588>
   14320:	ldr	r3, [sp, #44]	; 0x2c
   14324:	blx	r3
   14328:	mvn	r0, #0
   1432c:	b	14374 <__assert_fail@plt+0x27d0>
   14330:	ldr	r0, [r9, #4]!
   14334:	add	r4, r4, #1
   14338:	cmp	r0, #0
   1433c:	beq	142c0 <__assert_fail@plt+0x271c>
   14340:	mov	r1, r5
   14344:	bl	1170c <strcmp@plt>
   14348:	cmp	r0, #0
   1434c:	bne	14330 <__assert_fail@plt+0x278c>
   14350:	mov	r0, r4
   14354:	b	14374 <__assert_fail@plt+0x27d0>
   14358:	mov	r2, r3
   1435c:	mov	r1, r6
   14360:	ldr	r3, [sp, #40]	; 0x28
   14364:	mov	r0, r5
   14368:	bl	13ee4 <__assert_fail@plt+0x2340>
   1436c:	cmp	r0, #0
   14370:	blt	1438c <__assert_fail@plt+0x27e8>
   14374:	add	sp, sp, #12
   14378:	ldrd	r4, [sp]
   1437c:	ldrd	r6, [sp, #8]
   14380:	ldrd	r8, [sp, #16]
   14384:	add	sp, sp, #24
   14388:	pop	{pc}		; (ldr pc, [sp], #4)
   1438c:	cmn	r0, #1
   14390:	beq	142c0 <__assert_fail@plt+0x271c>
   14394:	movw	r1, #49020	; 0xbf7c
   14398:	movt	r1, #3
   1439c:	mov	r2, #5
   143a0:	mov	r0, #0
   143a4:	bl	117d8 <dcgettext@plt>
   143a8:	mov	r9, r0
   143ac:	b	142d8 <__assert_fail@plt+0x2734>
   143b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   143b4:	strd	r6, [sp, #8]
   143b8:	ldr	r7, [r1]
   143bc:	str	r8, [sp, #16]
   143c0:	str	lr, [sp, #20]
   143c4:	cmp	r7, #0
   143c8:	beq	14408 <__assert_fail@plt+0x2864>
   143cc:	mov	r6, r3
   143d0:	mov	r8, r0
   143d4:	mov	r4, r2
   143d8:	mov	r5, r1
   143dc:	b	143ec <__assert_fail@plt+0x2848>
   143e0:	ldr	r7, [r5, #4]!
   143e4:	cmp	r7, #0
   143e8:	beq	14408 <__assert_fail@plt+0x2864>
   143ec:	mov	r1, r4
   143f0:	mov	r2, r6
   143f4:	mov	r0, r8
   143f8:	add	r4, r4, r6
   143fc:	bl	117c0 <memcmp@plt>
   14400:	cmp	r0, #0
   14404:	bne	143e0 <__assert_fail@plt+0x283c>
   14408:	mov	r0, r7
   1440c:	ldrd	r4, [sp]
   14410:	ldrd	r6, [sp, #8]
   14414:	ldr	r8, [sp, #16]
   14418:	add	sp, sp, #20
   1441c:	pop	{pc}		; (ldr pc, [sp], #4)
   14420:	str	r4, [sp, #-8]!
   14424:	mov	r4, r0
   14428:	mov	r0, #24
   1442c:	str	lr, [sp, #4]
   14430:	bl	39028 <__assert_fail@plt+0x27484>
   14434:	cmp	r0, #0
   14438:	beq	1444c <__assert_fail@plt+0x28a8>
   1443c:	mov	r3, #0
   14440:	str	r3, [r0]
   14444:	str	r4, [r0, #16]
   14448:	str	r4, [r0, #20]
   1444c:	ldr	r4, [sp]
   14450:	add	sp, sp, #4
   14454:	pop	{pc}		; (ldr pc, [sp], #4)
   14458:	str	r4, [sp, #-8]!
   1445c:	mov	r4, r0
   14460:	mov	r0, #24
   14464:	str	lr, [sp, #4]
   14468:	bl	39028 <__assert_fail@plt+0x27484>
   1446c:	cmp	r0, #0
   14470:	beq	1448c <__assert_fail@plt+0x28e8>
   14474:	mov	r3, #0
   14478:	str	r4, [r0]
   1447c:	str	r3, [r0, #4]
   14480:	str	r3, [r0, #8]
   14484:	str	r3, [r0, #12]
   14488:	str	r3, [r0, #16]
   1448c:	ldr	r4, [sp]
   14490:	add	sp, sp, #4
   14494:	pop	{pc}		; (ldr pc, [sp], #4)
   14498:	ldr	r3, [r0]
   1449c:	cmp	r3, #0
   144a0:	beq	144fc <__assert_fail@plt+0x2958>
   144a4:	mov	r2, #0
   144a8:	strd	r4, [sp, #-16]!
   144ac:	mov	r5, r1
   144b0:	mov	r4, r0
   144b4:	add	r1, r0, #12
   144b8:	str	r6, [sp, #8]
   144bc:	add	r0, r0, #8
   144c0:	str	lr, [sp, #12]
   144c4:	bl	11b2c <getdelim@plt>
   144c8:	cmp	r0, #0
   144cc:	blt	1452c <__assert_fail@plt+0x2988>
   144d0:	mov	r3, #1
   144d4:	ldr	r2, [r4, #4]
   144d8:	str	r3, [r5]
   144dc:	ldr	r3, [r4, #8]
   144e0:	add	r2, r2, #1
   144e4:	str	r2, [r4, #4]
   144e8:	ldrd	r4, [sp]
   144ec:	mov	r0, r3
   144f0:	ldr	r6, [sp, #8]
   144f4:	add	sp, sp, #12
   144f8:	pop	{pc}		; (ldr pc, [sp], #4)
   144fc:	ldr	r2, [r0, #20]
   14500:	ldr	r3, [r2]
   14504:	cmp	r3, #0
   14508:	moveq	r2, #2
   1450c:	streq	r2, [r1]
   14510:	beq	14524 <__assert_fail@plt+0x2980>
   14514:	add	r2, r2, #4
   14518:	mov	ip, #1
   1451c:	str	ip, [r1]
   14520:	str	r2, [r0, #20]
   14524:	mov	r0, r3
   14528:	bx	lr
   1452c:	ldr	r0, [r4]
   14530:	bl	1197c <feof@plt>
   14534:	cmp	r0, #0
   14538:	mov	r3, #0
   1453c:	movne	r2, #2
   14540:	moveq	r2, #4
   14544:	str	r2, [r5]
   14548:	b	144e8 <__assert_fail@plt+0x2944>
   1454c:	ldr	r3, [r0]
   14550:	cmp	r3, #0
   14554:	beq	14560 <__assert_fail@plt+0x29bc>
   14558:	ldr	r0, [r0, #4]
   1455c:	bx	lr
   14560:	ldr	r3, [r0, #16]
   14564:	ldr	r0, [r0, #20]
   14568:	sub	r0, r0, r3
   1456c:	asr	r0, r0, #2
   14570:	bx	lr
   14574:	ldr	r3, [r0]
   14578:	str	r4, [sp, #-8]!
   1457c:	mov	r4, r0
   14580:	str	lr, [sp, #4]
   14584:	cmp	r3, #0
   14588:	beq	14594 <__assert_fail@plt+0x29f0>
   1458c:	ldr	r0, [r0, #8]
   14590:	bl	19610 <__assert_fail@plt+0x7a6c>
   14594:	mov	r0, r4
   14598:	ldr	r4, [sp]
   1459c:	ldr	lr, [sp, #4]
   145a0:	add	sp, sp, #8
   145a4:	b	19610 <__assert_fail@plt+0x7a6c>
   145a8:	movw	r3, #53952	; 0xd2c0
   145ac:	movt	r3, #4
   145b0:	str	r0, [r3]
   145b4:	bx	lr
   145b8:	movw	r3, #53952	; 0xd2c0
   145bc:	movt	r3, #4
   145c0:	strb	r0, [r3, #4]
   145c4:	bx	lr
   145c8:	movw	r3, #53820	; 0xd23c
   145cc:	movt	r3, #4
   145d0:	strd	r4, [sp, #-16]!
   145d4:	ldr	r0, [r3]
   145d8:	str	r6, [sp, #8]
   145dc:	str	lr, [sp, #12]
   145e0:	sub	sp, sp, #8
   145e4:	bl	39a4c <__assert_fail@plt+0x27ea8>
   145e8:	cmp	r0, #0
   145ec:	beq	14618 <__assert_fail@plt+0x2a74>
   145f0:	movw	r4, #53952	; 0xd2c0
   145f4:	movt	r4, #4
   145f8:	ldrb	r6, [r4, #4]
   145fc:	bl	119b8 <__errno_location@plt>
   14600:	mov	r5, r0
   14604:	cmp	r6, #0
   14608:	beq	14644 <__assert_fail@plt+0x2aa0>
   1460c:	ldr	r3, [r0]
   14610:	cmp	r3, #32
   14614:	bne	14644 <__assert_fail@plt+0x2aa0>
   14618:	movw	r3, #53808	; 0xd230
   1461c:	movt	r3, #4
   14620:	ldr	r0, [r3]
   14624:	bl	39a4c <__assert_fail@plt+0x27ea8>
   14628:	cmp	r0, #0
   1462c:	bne	1468c <__assert_fail@plt+0x2ae8>
   14630:	add	sp, sp, #8
   14634:	ldrd	r4, [sp]
   14638:	ldr	r6, [sp, #8]
   1463c:	add	sp, sp, #12
   14640:	pop	{pc}		; (ldr pc, [sp], #4)
   14644:	movw	r1, #49092	; 0xbfc4
   14648:	movt	r1, #3
   1464c:	mov	r2, #5
   14650:	mov	r0, #0
   14654:	bl	117d8 <dcgettext@plt>
   14658:	mov	r6, r0
   1465c:	ldr	r0, [r4]
   14660:	cmp	r0, #0
   14664:	beq	1469c <__assert_fail@plt+0x2af8>
   14668:	ldr	r4, [r5]
   1466c:	bl	22c20 <__assert_fail@plt+0x1107c>
   14670:	mov	r3, r0
   14674:	movw	r2, #49104	; 0xbfd0
   14678:	movt	r2, #3
   1467c:	mov	r0, #0
   14680:	str	r6, [sp]
   14684:	mov	r1, r4
   14688:	bl	118bc <error@plt>
   1468c:	movw	r3, #53720	; 0xd1d8
   14690:	movt	r3, #4
   14694:	ldr	r0, [r3]
   14698:	bl	11778 <_exit@plt>
   1469c:	mov	r3, r6
   146a0:	movw	r2, #49108	; 0xbfd4
   146a4:	movt	r2, #3
   146a8:	ldr	r1, [r5]
   146ac:	bl	118bc <error@plt>
   146b0:	b	1468c <__assert_fail@plt+0x2ae8>
   146b4:	ldm	r0, {r0, r3}
   146b8:	eor	r3, r3, r0
   146bc:	udiv	r0, r3, r1
   146c0:	mls	r0, r0, r1, r3
   146c4:	bx	lr
   146c8:	strd	r4, [sp, #-8]!
   146cc:	ldrd	r2, [r1]
   146d0:	ldrd	r4, [r0]
   146d4:	cmp	r5, r3
   146d8:	cmpeq	r4, r2
   146dc:	ldrd	r4, [sp]
   146e0:	add	sp, sp, #8
   146e4:	moveq	r0, #1
   146e8:	movne	r0, #0
   146ec:	bx	lr
   146f0:	udiv	r3, r0, r1
   146f4:	mls	r0, r3, r1, r0
   146f8:	bx	lr
   146fc:	str	r4, [sp, #-8]!
   14700:	mov	r4, r0
   14704:	ldr	r0, [r0, #8]
   14708:	str	lr, [sp, #4]
   1470c:	bl	1cc7c <__assert_fail@plt+0xb0d8>
   14710:	mov	r0, r4
   14714:	ldr	r4, [sp]
   14718:	ldr	lr, [sp, #4]
   1471c:	add	sp, sp, #8
   14720:	b	19610 <__assert_fail@plt+0x7a6c>
   14724:	mov	r0, #12
   14728:	str	r4, [sp, #-8]!
   1472c:	str	lr, [sp, #4]
   14730:	sub	sp, sp, #8
   14734:	bl	39028 <__assert_fail@plt+0x27484>
   14738:	subs	r4, r0, #0
   1473c:	beq	14784 <__assert_fail@plt+0x2be0>
   14740:	movw	r1, #18172	; 0x46fc
   14744:	movt	r1, #1
   14748:	movw	r3, #18120	; 0x46c8
   1474c:	movt	r3, #1
   14750:	movw	r2, #18100	; 0x46b4
   14754:	movt	r2, #1
   14758:	str	r1, [sp]
   1475c:	mov	r0, #11
   14760:	mov	r1, #0
   14764:	bl	1c93c <__assert_fail@plt+0xad98>
   14768:	cmp	r0, #0
   1476c:	mov	r3, r0
   14770:	str	r0, [r4]
   14774:	movne	r3, #0
   14778:	strne	r3, [r4, #4]
   1477c:	strne	r3, [r4, #8]
   14780:	beq	14798 <__assert_fail@plt+0x2bf4>
   14784:	mov	r0, r4
   14788:	add	sp, sp, #8
   1478c:	ldr	r4, [sp]
   14790:	add	sp, sp, #4
   14794:	pop	{pc}		; (ldr pc, [sp], #4)
   14798:	mov	r0, r4
   1479c:	mov	r4, r3
   147a0:	bl	19610 <__assert_fail@plt+0x7a6c>
   147a4:	b	14784 <__assert_fail@plt+0x2be0>
   147a8:	str	r4, [sp, #-8]!
   147ac:	mov	r4, r0
   147b0:	ldr	r0, [r0]
   147b4:	str	lr, [sp, #4]
   147b8:	bl	1cc7c <__assert_fail@plt+0xb0d8>
   147bc:	ldr	r0, [r4, #4]
   147c0:	cmp	r0, #0
   147c4:	beq	147cc <__assert_fail@plt+0x2c28>
   147c8:	bl	1e978 <__assert_fail@plt+0xcdd4>
   147cc:	ldr	r0, [r4, #8]
   147d0:	bl	19610 <__assert_fail@plt+0x7a6c>
   147d4:	mov	r0, r4
   147d8:	ldr	r4, [sp]
   147dc:	ldr	lr, [sp, #4]
   147e0:	add	sp, sp, #8
   147e4:	b	19610 <__assert_fail@plt+0x7a6c>
   147e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   147ec:	ldr	r5, [r0, #8]
   147f0:	strd	r6, [sp, #8]
   147f4:	mov	r6, r0
   147f8:	strd	r8, [sp, #16]
   147fc:	str	sl, [sp, #24]
   14800:	str	lr, [sp, #28]
   14804:	sub	sp, sp, #16
   14808:	cmp	r5, #0
   1480c:	ldr	r4, [sp, #48]	; 0x30
   14810:	ldr	r7, [sp, #52]	; 0x34
   14814:	beq	148f8 <__assert_fail@plt+0x2d54>
   14818:	ldrd	r0, [r5]
   1481c:	cmp	r3, r1
   14820:	cmpeq	r2, r0
   14824:	beq	1491c <__assert_fail@plt+0x2d78>
   14828:	mov	r1, r5
   1482c:	ldr	r0, [r6]
   14830:	strd	r2, [r5]
   14834:	bl	1d1a4 <__assert_fail@plt+0xb600>
   14838:	cmp	r0, #0
   1483c:	beq	148d8 <__assert_fail@plt+0x2d34>
   14840:	cmp	r5, r0
   14844:	beq	14924 <__assert_fail@plt+0x2d80>
   14848:	ldr	sl, [r0, #8]
   1484c:	str	sl, [r5, #8]
   14850:	cmp	sl, #0
   14854:	beq	148d8 <__assert_fail@plt+0x2d34>
   14858:	subs	r8, r4, #1
   1485c:	mov	r3, #0
   14860:	sbc	r9, r7, #0
   14864:	mvn	r2, #-2147483646	; 0x80000002
   14868:	cmp	r9, r3
   1486c:	cmpeq	r8, r2
   14870:	movls	r1, r4
   14874:	bls	1489c <__assert_fail@plt+0x2cf8>
   14878:	ldr	r0, [r6, #4]
   1487c:	cmp	r0, #0
   14880:	beq	148c4 <__assert_fail@plt+0x2d20>
   14884:	mov	r2, r4
   14888:	mov	r3, r7
   1488c:	bl	1e9a8 <__assert_fail@plt+0xce04>
   14890:	cmn	r0, #1
   14894:	mov	r1, r0
   14898:	beq	148d8 <__assert_fail@plt+0x2d34>
   1489c:	mov	r0, sl
   148a0:	mov	r2, #0
   148a4:	add	sp, sp, #16
   148a8:	ldrd	r4, [sp]
   148ac:	ldrd	r6, [sp, #8]
   148b0:	ldrd	r8, [sp, #16]
   148b4:	ldr	sl, [sp, #24]
   148b8:	ldr	lr, [sp, #28]
   148bc:	add	sp, sp, #32
   148c0:	b	1cf68 <__assert_fail@plt+0xb3c4>
   148c4:	mvn	r0, #-2147483648	; 0x80000000
   148c8:	bl	1e8f0 <__assert_fail@plt+0xcd4c>
   148cc:	cmp	r0, #0
   148d0:	str	r0, [r6, #4]
   148d4:	bne	14884 <__assert_fail@plt+0x2ce0>
   148d8:	mvn	r0, #0
   148dc:	add	sp, sp, #16
   148e0:	ldrd	r4, [sp]
   148e4:	ldrd	r6, [sp, #8]
   148e8:	ldrd	r8, [sp, #16]
   148ec:	ldr	sl, [sp, #24]
   148f0:	add	sp, sp, #28
   148f4:	pop	{pc}		; (ldr pc, [sp], #4)
   148f8:	mov	r0, #16
   148fc:	strd	r2, [sp, #8]
   14900:	bl	39028 <__assert_fail@plt+0x27484>
   14904:	cmp	r0, #0
   14908:	mov	r5, r0
   1490c:	str	r0, [r6, #8]
   14910:	ldrd	r2, [sp, #8]
   14914:	bne	14828 <__assert_fail@plt+0x2c84>
   14918:	b	148d8 <__assert_fail@plt+0x2d34>
   1491c:	ldr	sl, [r5, #8]
   14920:	b	14850 <__assert_fail@plt+0x2cac>
   14924:	mov	ip, #0
   14928:	movw	r2, #18160	; 0x46f0
   1492c:	movt	r2, #1
   14930:	mov	r3, ip
   14934:	mov	r1, ip
   14938:	movw	r0, #1021	; 0x3fd
   1493c:	str	ip, [sp]
   14940:	str	ip, [r6, #8]
   14944:	bl	1c93c <__assert_fail@plt+0xad98>
   14948:	mov	sl, r0
   1494c:	str	r0, [r5, #8]
   14950:	b	14850 <__assert_fail@plt+0x2cac>
   14954:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14958:	ldr	r4, [r0, #8]
   1495c:	strd	r6, [sp, #8]
   14960:	mov	r6, r0
   14964:	strd	r8, [sp, #16]
   14968:	str	sl, [sp, #24]
   1496c:	str	lr, [sp, #28]
   14970:	sub	sp, sp, #16
   14974:	cmp	r4, #0
   14978:	ldr	r5, [sp, #48]	; 0x30
   1497c:	ldr	sl, [sp, #52]	; 0x34
   14980:	beq	14a50 <__assert_fail@plt+0x2eac>
   14984:	ldrd	r0, [r4]
   14988:	cmp	r3, r1
   1498c:	cmpeq	r2, r0
   14990:	beq	14a74 <__assert_fail@plt+0x2ed0>
   14994:	mov	r1, r4
   14998:	ldr	r0, [r6]
   1499c:	strd	r2, [r4]
   149a0:	bl	1d1a4 <__assert_fail@plt+0xb600>
   149a4:	cmp	r0, #0
   149a8:	beq	14a30 <__assert_fail@plt+0x2e8c>
   149ac:	cmp	r4, r0
   149b0:	beq	14a7c <__assert_fail@plt+0x2ed8>
   149b4:	ldr	r7, [r0, #8]
   149b8:	str	r7, [r4, #8]
   149bc:	cmp	r7, #0
   149c0:	beq	14a30 <__assert_fail@plt+0x2e8c>
   149c4:	subs	r8, r5, #1
   149c8:	mov	r3, #0
   149cc:	sbc	r9, sl, #0
   149d0:	mvn	r2, #-2147483646	; 0x80000002
   149d4:	cmp	r9, r3
   149d8:	cmpeq	r8, r2
   149dc:	movls	r1, r5
   149e0:	bls	14a08 <__assert_fail@plt+0x2e64>
   149e4:	ldr	r0, [r6, #4]
   149e8:	cmp	r0, #0
   149ec:	beq	14a1c <__assert_fail@plt+0x2e78>
   149f0:	mov	r2, r5
   149f4:	mov	r3, sl
   149f8:	bl	1e9a8 <__assert_fail@plt+0xce04>
   149fc:	cmn	r0, #1
   14a00:	mov	r1, r0
   14a04:	beq	14a30 <__assert_fail@plt+0x2e8c>
   14a08:	mov	r0, r7
   14a0c:	bl	1c5b8 <__assert_fail@plt+0xaa14>
   14a10:	adds	r0, r0, #0
   14a14:	movne	r0, #1
   14a18:	b	14a34 <__assert_fail@plt+0x2e90>
   14a1c:	mvn	r0, #-2147483648	; 0x80000000
   14a20:	bl	1e8f0 <__assert_fail@plt+0xcd4c>
   14a24:	cmp	r0, #0
   14a28:	str	r0, [r6, #4]
   14a2c:	bne	149f0 <__assert_fail@plt+0x2e4c>
   14a30:	mvn	r0, #0
   14a34:	add	sp, sp, #16
   14a38:	ldrd	r4, [sp]
   14a3c:	ldrd	r6, [sp, #8]
   14a40:	ldrd	r8, [sp, #16]
   14a44:	ldr	sl, [sp, #24]
   14a48:	add	sp, sp, #28
   14a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a50:	mov	r0, #16
   14a54:	strd	r2, [sp, #8]
   14a58:	bl	39028 <__assert_fail@plt+0x27484>
   14a5c:	cmp	r0, #0
   14a60:	mov	r4, r0
   14a64:	str	r0, [r6, #8]
   14a68:	ldrd	r2, [sp, #8]
   14a6c:	bne	14994 <__assert_fail@plt+0x2df0>
   14a70:	b	14a30 <__assert_fail@plt+0x2e8c>
   14a74:	ldr	r7, [r4, #8]
   14a78:	b	149bc <__assert_fail@plt+0x2e18>
   14a7c:	mov	ip, #0
   14a80:	movw	r2, #18160	; 0x46f0
   14a84:	movt	r2, #1
   14a88:	mov	r3, ip
   14a8c:	mov	r1, ip
   14a90:	movw	r0, #1021	; 0x3fd
   14a94:	str	ip, [sp]
   14a98:	str	ip, [r6, #8]
   14a9c:	bl	1c93c <__assert_fail@plt+0xad98>
   14aa0:	mov	r7, r0
   14aa4:	str	r0, [r4, #8]
   14aa8:	b	149bc <__assert_fail@plt+0x2e18>
   14aac:	b	19610 <__assert_fail@plt+0x7a6c>
   14ab0:	str	r4, [sp, #-8]!
   14ab4:	str	lr, [sp, #4]
   14ab8:	bl	1ecb4 <__assert_fail@plt+0xd110>
   14abc:	clz	r0, r0
   14ac0:	ldr	r4, [sp]
   14ac4:	add	sp, sp, #4
   14ac8:	lsr	r0, r0, #5
   14acc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad0:	str	r4, [sp, #-8]!
   14ad4:	str	lr, [sp, #4]
   14ad8:	bl	1170c <strcmp@plt>
   14adc:	clz	r0, r0
   14ae0:	ldr	r4, [sp]
   14ae4:	add	sp, sp, #4
   14ae8:	lsr	r0, r0, #5
   14aec:	pop	{pc}		; (ldr pc, [sp], #4)
   14af0:	b	1c8cc <__assert_fail@plt+0xad28>
   14af4:	tst	r2, #8
   14af8:	and	r2, r2, #16
   14afc:	beq	14bc8 <__assert_fail@plt+0x3024>
   14b00:	cmp	r2, #0
   14b04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14b08:	mov	r5, r0
   14b0c:	strd	r6, [sp, #8]
   14b10:	mov	r6, r1
   14b14:	str	r8, [sp, #16]
   14b18:	str	lr, [sp, #20]
   14b1c:	bne	14b64 <__assert_fail@plt+0x2fc0>
   14b20:	bl	11988 <strlen@plt>
   14b24:	mov	r2, r0
   14b28:	mov	r7, r0
   14b2c:	mov	r1, r6
   14b30:	mov	r0, r5
   14b34:	bl	11b5c <strncmp@plt>
   14b38:	subs	r4, r0, #0
   14b3c:	bne	14b4c <__assert_fail@plt+0x2fa8>
   14b40:	ldrb	r3, [r6, r7]
   14b44:	cmp	r3, #47	; 0x2f
   14b48:	movne	r4, r3
   14b4c:	mov	r0, r4
   14b50:	ldrd	r4, [sp]
   14b54:	ldrd	r6, [sp, #8]
   14b58:	ldr	r8, [sp, #16]
   14b5c:	add	sp, sp, #20
   14b60:	pop	{pc}		; (ldr pc, [sp], #4)
   14b64:	mov	r0, r1
   14b68:	mov	r8, #47	; 0x2f
   14b6c:	bl	37044 <__assert_fail@plt+0x254a0>
   14b70:	mov	r6, r0
   14b74:	mov	r7, #0
   14b78:	mov	r3, r0
   14b7c:	b	14b98 <__assert_fail@plt+0x2ff4>
   14b80:	strb	r7, [r4]
   14b84:	bl	1ecb4 <__assert_fail@plt+0xd110>
   14b88:	mov	r3, r4
   14b8c:	subs	r4, r0, #0
   14b90:	ble	14bbc <__assert_fail@plt+0x3018>
   14b94:	strb	r8, [r3], #1
   14b98:	mov	r1, #47	; 0x2f
   14b9c:	mov	r0, r3
   14ba0:	bl	11994 <strchr@plt>
   14ba4:	subs	r4, r0, #0
   14ba8:	mov	r1, r6
   14bac:	mov	r0, r5
   14bb0:	bne	14b80 <__assert_fail@plt+0x2fdc>
   14bb4:	bl	1ecb4 <__assert_fail@plt+0xd110>
   14bb8:	mov	r4, r0
   14bbc:	mov	r0, r6
   14bc0:	bl	19610 <__assert_fail@plt+0x7a6c>
   14bc4:	b	14b4c <__assert_fail@plt+0x2fa8>
   14bc8:	cmp	r2, #0
   14bcc:	beq	14bd4 <__assert_fail@plt+0x3030>
   14bd0:	b	1ecb4 <__assert_fail@plt+0xd110>
   14bd4:	b	1170c <strcmp@plt>
   14bd8:	mov	r3, #0
   14bdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14be0:	mov	r4, r0
   14be4:	strd	r6, [sp, #8]
   14be8:	mov	r5, r3
   14bec:	movw	r7, #49556	; 0xc194
   14bf0:	movt	r7, #3
   14bf4:	strd	r8, [sp, #16]
   14bf8:	mov	r6, #1
   14bfc:	strd	sl, [sp, #24]
   14c00:	mov	sl, #0
   14c04:	mov	fp, #0
   14c08:	str	lr, [sp, #32]
   14c0c:	sub	sp, sp, #60	; 0x3c
   14c10:	mov	r8, r1
   14c14:	strb	r3, [sp]
   14c18:	strd	sl, [sp, #4]
   14c1c:	strb	r3, [sp, #12]
   14c20:	str	r0, [sp, #16]
   14c24:	b	14c4c <__assert_fail@plt+0x30a8>
   14c28:	mov	r0, r9
   14c2c:	bl	117a8 <towlower@plt>
   14c30:	ldr	r3, [sp, #20]
   14c34:	rsb	r5, r5, r5, lsl #5
   14c38:	mov	r2, #0
   14c3c:	add	r5, r5, r0
   14c40:	strb	r2, [sp, #12]
   14c44:	add	r4, r4, r3
   14c48:	str	r4, [sp, #16]
   14c4c:	ldrb	r3, [sp]
   14c50:	cmp	r3, #0
   14c54:	addne	sl, sp, #4
   14c58:	bne	14cc4 <__assert_fail@plt+0x3120>
   14c5c:	ldrb	r3, [r4]
   14c60:	lsr	r2, r3, #5
   14c64:	and	r3, r3, #31
   14c68:	ldr	r2, [r7, r2, lsl #2]
   14c6c:	lsr	r3, r2, r3
   14c70:	tst	r3, #1
   14c74:	beq	14cac <__assert_fail@plt+0x3108>
   14c78:	str	r6, [sp, #20]
   14c7c:	ldrb	r9, [r4]
   14c80:	strb	r6, [sp, #12]
   14c84:	strb	r6, [sp, #24]
   14c88:	cmp	r9, #0
   14c8c:	str	r9, [sp, #28]
   14c90:	beq	14d48 <__assert_fail@plt+0x31a4>
   14c94:	ldrb	r3, [sp, #24]
   14c98:	ldr	r4, [sp, #16]
   14c9c:	cmp	r3, #0
   14ca0:	bne	14c28 <__assert_fail@plt+0x3084>
   14ca4:	ldrb	r0, [r4]
   14ca8:	b	14c30 <__assert_fail@plt+0x308c>
   14cac:	add	sl, sp, #4
   14cb0:	mov	r0, sl
   14cb4:	bl	117b4 <mbsinit@plt>
   14cb8:	cmp	r0, #0
   14cbc:	beq	14dac <__assert_fail@plt+0x3208>
   14cc0:	strb	r6, [sp]
   14cc4:	bl	11880 <__ctype_get_mb_cur_max@plt>
   14cc8:	mov	r1, r0
   14ccc:	mov	r0, r4
   14cd0:	bl	35ccc <__assert_fail@plt+0x24128>
   14cd4:	mov	r2, r0
   14cd8:	mov	r3, sl
   14cdc:	mov	r1, r4
   14ce0:	add	r0, sp, #28
   14ce4:	bl	1ec1c <__assert_fail@plt+0xd078>
   14ce8:	cmn	r0, #1
   14cec:	str	r0, [sp, #20]
   14cf0:	beq	14d6c <__assert_fail@plt+0x31c8>
   14cf4:	cmn	r0, #2
   14cf8:	beq	14d84 <__assert_fail@plt+0x31e0>
   14cfc:	cmp	r0, #0
   14d00:	bne	14da4 <__assert_fail@plt+0x3200>
   14d04:	ldr	r3, [sp, #16]
   14d08:	str	r6, [sp, #20]
   14d0c:	ldrb	r3, [r3]
   14d10:	cmp	r3, #0
   14d14:	bne	14dec <__assert_fail@plt+0x3248>
   14d18:	ldr	r9, [sp, #28]
   14d1c:	cmp	r9, #0
   14d20:	bne	14dcc <__assert_fail@plt+0x3228>
   14d24:	mov	r0, sl
   14d28:	strb	r6, [sp, #24]
   14d2c:	bl	117b4 <mbsinit@plt>
   14d30:	cmp	r0, #0
   14d34:	strb	r6, [sp, #12]
   14d38:	movne	r3, #0
   14d3c:	strbne	r3, [sp]
   14d40:	cmp	r9, #0
   14d44:	bne	14c94 <__assert_fail@plt+0x30f0>
   14d48:	udiv	r0, r5, r8
   14d4c:	mls	r0, r8, r0, r5
   14d50:	add	sp, sp, #60	; 0x3c
   14d54:	ldrd	r4, [sp]
   14d58:	ldrd	r6, [sp, #8]
   14d5c:	ldrd	r8, [sp, #16]
   14d60:	ldrd	sl, [sp, #24]
   14d64:	add	sp, sp, #32
   14d68:	pop	{pc}		; (ldr pc, [sp], #4)
   14d6c:	mov	r3, #0
   14d70:	strb	r6, [sp, #12]
   14d74:	str	r6, [sp, #20]
   14d78:	strb	r3, [sp, #24]
   14d7c:	ldr	r9, [sp, #28]
   14d80:	b	14c94 <__assert_fail@plt+0x30f0>
   14d84:	ldr	r0, [sp, #16]
   14d88:	bl	11988 <strlen@plt>
   14d8c:	mov	r3, #0
   14d90:	strb	r6, [sp, #12]
   14d94:	str	r0, [sp, #20]
   14d98:	strb	r3, [sp, #24]
   14d9c:	ldr	r9, [sp, #28]
   14da0:	b	14c94 <__assert_fail@plt+0x30f0>
   14da4:	ldr	r9, [sp, #28]
   14da8:	b	14d24 <__assert_fail@plt+0x3180>
   14dac:	movw	r3, #49112	; 0xbfd8
   14db0:	movt	r3, #3
   14db4:	movw	r1, #49132	; 0xbfec
   14db8:	movt	r1, #3
   14dbc:	movw	r0, #49148	; 0xbffc
   14dc0:	movt	r0, #3
   14dc4:	mov	r2, #143	; 0x8f
   14dc8:	bl	11ba4 <__assert_fail@plt>
   14dcc:	movw	r3, #49112	; 0xbfd8
   14dd0:	movt	r3, #3
   14dd4:	movw	r1, #49132	; 0xbfec
   14dd8:	movt	r1, #3
   14ddc:	movw	r0, #49196	; 0xc02c
   14de0:	movt	r0, #3
   14de4:	mov	r2, #172	; 0xac
   14de8:	bl	11ba4 <__assert_fail@plt>
   14dec:	movw	r3, #49112	; 0xbfd8
   14df0:	movt	r3, #3
   14df4:	movw	r1, #49132	; 0xbfec
   14df8:	movt	r1, #3
   14dfc:	movw	r0, #49172	; 0xc014
   14e00:	movt	r0, #3
   14e04:	mov	r2, #171	; 0xab
   14e08:	bl	11ba4 <__assert_fail@plt>
   14e0c:	strd	r4, [sp, #-16]!
   14e10:	mov	r4, r0
   14e14:	mov	r0, #8
   14e18:	mov	r5, r1
   14e1c:	str	r6, [sp, #8]
   14e20:	str	lr, [sp, #12]
   14e24:	bl	36ad8 <__assert_fail@plt+0x24f34>
   14e28:	ldr	r3, [r4, #4]
   14e2c:	ldr	r6, [sp, #8]
   14e30:	str	r0, [r4, #4]
   14e34:	stm	r0, {r3, r5}
   14e38:	ldrd	r4, [sp]
   14e3c:	add	sp, sp, #12
   14e40:	pop	{pc}		; (ldr pc, [sp], #4)
   14e44:	tst	r1, #32
   14e48:	and	r2, r1, #134217728	; 0x8000000
   14e4c:	ldrb	r3, [r0]
   14e50:	and	r1, r1, #2
   14e54:	beq	15070 <__assert_fail@plt+0x34cc>
   14e58:	cmp	r2, #0
   14e5c:	bne	156d4 <__assert_fail@plt+0x3b30>
   14e60:	cmp	r1, #0
   14e64:	beq	154c8 <__assert_fail@plt+0x3924>
   14e68:	add	r0, r0, #1
   14e6c:	cmp	r3, #125	; 0x7d
   14e70:	ldrls	pc, [pc, r3, lsl #2]
   14e74:	b	154b8 <__assert_fail@plt+0x3914>
   14e78:	strdeq	r5, [r1], -r0
   14e7c:			; <UNDEFINED> instruction: 0x000154b8
   14e80:			; <UNDEFINED> instruction: 0x000154b8
   14e84:			; <UNDEFINED> instruction: 0x000154b8
   14e88:			; <UNDEFINED> instruction: 0x000154b8
   14e8c:			; <UNDEFINED> instruction: 0x000154b8
   14e90:			; <UNDEFINED> instruction: 0x000154b8
   14e94:			; <UNDEFINED> instruction: 0x000154b8
   14e98:			; <UNDEFINED> instruction: 0x000154b8
   14e9c:			; <UNDEFINED> instruction: 0x000154b8
   14ea0:			; <UNDEFINED> instruction: 0x000154b8
   14ea4:			; <UNDEFINED> instruction: 0x000154b8
   14ea8:			; <UNDEFINED> instruction: 0x000154b8
   14eac:			; <UNDEFINED> instruction: 0x000154b8
   14eb0:			; <UNDEFINED> instruction: 0x000154b8
   14eb4:			; <UNDEFINED> instruction: 0x000154b8
   14eb8:			; <UNDEFINED> instruction: 0x000154b8
   14ebc:			; <UNDEFINED> instruction: 0x000154b8
   14ec0:			; <UNDEFINED> instruction: 0x000154b8
   14ec4:			; <UNDEFINED> instruction: 0x000154b8
   14ec8:			; <UNDEFINED> instruction: 0x000154b8
   14ecc:			; <UNDEFINED> instruction: 0x000154b8
   14ed0:			; <UNDEFINED> instruction: 0x000154b8
   14ed4:			; <UNDEFINED> instruction: 0x000154b8
   14ed8:			; <UNDEFINED> instruction: 0x000154b8
   14edc:			; <UNDEFINED> instruction: 0x000154b8
   14ee0:			; <UNDEFINED> instruction: 0x000154b8
   14ee4:			; <UNDEFINED> instruction: 0x000154b8
   14ee8:			; <UNDEFINED> instruction: 0x000154b8
   14eec:			; <UNDEFINED> instruction: 0x000154b8
   14ef0:			; <UNDEFINED> instruction: 0x000154b8
   14ef4:			; <UNDEFINED> instruction: 0x000154b8
   14ef8:			; <UNDEFINED> instruction: 0x000154b8
   14efc:	ldrdeq	r5, [r1], -ip
   14f00:			; <UNDEFINED> instruction: 0x000154b8
   14f04:			; <UNDEFINED> instruction: 0x000154b8
   14f08:			; <UNDEFINED> instruction: 0x000154b8
   14f0c:			; <UNDEFINED> instruction: 0x000154b8
   14f10:			; <UNDEFINED> instruction: 0x000154b8
   14f14:			; <UNDEFINED> instruction: 0x000154b8
   14f18:			; <UNDEFINED> instruction: 0x000154b8
   14f1c:			; <UNDEFINED> instruction: 0x000154b8
   14f20:	andeq	r5, r1, r8, ror #17
   14f24:	ldrdeq	r5, [r1], -ip
   14f28:			; <UNDEFINED> instruction: 0x000154b8
   14f2c:			; <UNDEFINED> instruction: 0x000154b8
   14f30:			; <UNDEFINED> instruction: 0x000154b8
   14f34:			; <UNDEFINED> instruction: 0x000154b8
   14f38:			; <UNDEFINED> instruction: 0x000154b8
   14f3c:			; <UNDEFINED> instruction: 0x000154b8
   14f40:			; <UNDEFINED> instruction: 0x000154b8
   14f44:			; <UNDEFINED> instruction: 0x000154b8
   14f48:			; <UNDEFINED> instruction: 0x000154b8
   14f4c:			; <UNDEFINED> instruction: 0x000154b8
   14f50:			; <UNDEFINED> instruction: 0x000154b8
   14f54:			; <UNDEFINED> instruction: 0x000154b8
   14f58:			; <UNDEFINED> instruction: 0x000154b8
   14f5c:			; <UNDEFINED> instruction: 0x000154b8
   14f60:			; <UNDEFINED> instruction: 0x000154b8
   14f64:			; <UNDEFINED> instruction: 0x000154b8
   14f68:			; <UNDEFINED> instruction: 0x000154b8
   14f6c:			; <UNDEFINED> instruction: 0x000154b8
   14f70:			; <UNDEFINED> instruction: 0x000154b8
   14f74:	andeq	r5, r1, r8, ror #17
   14f78:	ldrdeq	r5, [r1], -ip
   14f7c:			; <UNDEFINED> instruction: 0x000154b8
   14f80:			; <UNDEFINED> instruction: 0x000154b8
   14f84:			; <UNDEFINED> instruction: 0x000154b8
   14f88:			; <UNDEFINED> instruction: 0x000154b8
   14f8c:			; <UNDEFINED> instruction: 0x000154b8
   14f90:			; <UNDEFINED> instruction: 0x000154b8
   14f94:			; <UNDEFINED> instruction: 0x000154b8
   14f98:			; <UNDEFINED> instruction: 0x000154b8
   14f9c:			; <UNDEFINED> instruction: 0x000154b8
   14fa0:			; <UNDEFINED> instruction: 0x000154b8
   14fa4:			; <UNDEFINED> instruction: 0x000154b8
   14fa8:			; <UNDEFINED> instruction: 0x000154b8
   14fac:			; <UNDEFINED> instruction: 0x000154b8
   14fb0:			; <UNDEFINED> instruction: 0x000154b8
   14fb4:			; <UNDEFINED> instruction: 0x000154b8
   14fb8:			; <UNDEFINED> instruction: 0x000154b8
   14fbc:			; <UNDEFINED> instruction: 0x000154b8
   14fc0:			; <UNDEFINED> instruction: 0x000154b8
   14fc4:			; <UNDEFINED> instruction: 0x000154b8
   14fc8:			; <UNDEFINED> instruction: 0x000154b8
   14fcc:			; <UNDEFINED> instruction: 0x000154b8
   14fd0:			; <UNDEFINED> instruction: 0x000154b8
   14fd4:			; <UNDEFINED> instruction: 0x000154b8
   14fd8:			; <UNDEFINED> instruction: 0x000154b8
   14fdc:			; <UNDEFINED> instruction: 0x000154b8
   14fe0:			; <UNDEFINED> instruction: 0x000154b8
   14fe4:	andeq	r5, r1, r8, ror #17
   14fe8:			; <UNDEFINED> instruction: 0x000154b8
   14fec:			; <UNDEFINED> instruction: 0x000154b8
   14ff0:			; <UNDEFINED> instruction: 0x000154b8
   14ff4:			; <UNDEFINED> instruction: 0x000154b8
   14ff8:			; <UNDEFINED> instruction: 0x000154b8
   14ffc:			; <UNDEFINED> instruction: 0x000154b8
   15000:			; <UNDEFINED> instruction: 0x000154b8
   15004:			; <UNDEFINED> instruction: 0x000154b8
   15008:			; <UNDEFINED> instruction: 0x000154b8
   1500c:			; <UNDEFINED> instruction: 0x000154b8
   15010:			; <UNDEFINED> instruction: 0x000154b8
   15014:			; <UNDEFINED> instruction: 0x000154b8
   15018:			; <UNDEFINED> instruction: 0x000154b8
   1501c:			; <UNDEFINED> instruction: 0x000154b8
   15020:			; <UNDEFINED> instruction: 0x000154b8
   15024:			; <UNDEFINED> instruction: 0x000154b8
   15028:			; <UNDEFINED> instruction: 0x000154b8
   1502c:			; <UNDEFINED> instruction: 0x000154b8
   15030:			; <UNDEFINED> instruction: 0x000154b8
   15034:			; <UNDEFINED> instruction: 0x000154b8
   15038:			; <UNDEFINED> instruction: 0x000154b8
   1503c:			; <UNDEFINED> instruction: 0x000154b8
   15040:			; <UNDEFINED> instruction: 0x000154b8
   15044:			; <UNDEFINED> instruction: 0x000154b8
   15048:			; <UNDEFINED> instruction: 0x000154b8
   1504c:			; <UNDEFINED> instruction: 0x000154b8
   15050:			; <UNDEFINED> instruction: 0x000154b8
   15054:			; <UNDEFINED> instruction: 0x000154b8
   15058:			; <UNDEFINED> instruction: 0x000154b8
   1505c:			; <UNDEFINED> instruction: 0x000154b8
   15060:			; <UNDEFINED> instruction: 0x000154b8
   15064:			; <UNDEFINED> instruction: 0x000154b8
   15068:			; <UNDEFINED> instruction: 0x000154b8
   1506c:			; <UNDEFINED> instruction: 0x000154b8
   15070:	cmp	r2, #0
   15074:	bne	15938 <__assert_fail@plt+0x3d94>
   15078:	cmp	r1, #0
   1507c:	beq	152a4 <__assert_fail@plt+0x3700>
   15080:	add	r0, r0, #1
   15084:	cmp	r3, #125	; 0x7d
   15088:	ldrls	pc, [pc, r3, lsl #2]
   1508c:	b	15288 <__assert_fail@plt+0x36e4>
   15090:	strdeq	r5, [r1], -r0
   15094:	andeq	r5, r1, r8, lsl #5
   15098:	andeq	r5, r1, r8, lsl #5
   1509c:	andeq	r5, r1, r8, lsl #5
   150a0:	andeq	r5, r1, r8, lsl #5
   150a4:	andeq	r5, r1, r8, lsl #5
   150a8:	andeq	r5, r1, r8, lsl #5
   150ac:	andeq	r5, r1, r8, lsl #5
   150b0:	andeq	r5, r1, r8, lsl #5
   150b4:	andeq	r5, r1, r8, lsl #5
   150b8:	andeq	r5, r1, r8, lsl #5
   150bc:	andeq	r5, r1, r8, lsl #5
   150c0:	andeq	r5, r1, r8, lsl #5
   150c4:	andeq	r5, r1, r8, lsl #5
   150c8:	andeq	r5, r1, r8, lsl #5
   150cc:	andeq	r5, r1, r8, lsl #5
   150d0:	andeq	r5, r1, r8, lsl #5
   150d4:	andeq	r5, r1, r8, lsl #5
   150d8:	andeq	r5, r1, r8, lsl #5
   150dc:	andeq	r5, r1, r8, lsl #5
   150e0:	andeq	r5, r1, r8, lsl #5
   150e4:	andeq	r5, r1, r8, lsl #5
   150e8:	andeq	r5, r1, r8, lsl #5
   150ec:	andeq	r5, r1, r8, lsl #5
   150f0:	andeq	r5, r1, r8, lsl #5
   150f4:	andeq	r5, r1, r8, lsl #5
   150f8:	andeq	r5, r1, r8, lsl #5
   150fc:	andeq	r5, r1, r8, lsl #5
   15100:	andeq	r5, r1, r8, lsl #5
   15104:	andeq	r5, r1, r8, lsl #5
   15108:	andeq	r5, r1, r8, lsl #5
   1510c:	andeq	r5, r1, r8, lsl #5
   15110:	andeq	r5, r1, r8, lsl #5
   15114:	andeq	r5, r1, r8, lsl #5
   15118:	andeq	r5, r1, r8, lsl #5
   1511c:	andeq	r5, r1, r8, lsl #5
   15120:	andeq	r5, r1, r8, lsl #5
   15124:	andeq	r5, r1, r8, lsl #5
   15128:	andeq	r5, r1, r8, lsl #5
   1512c:	andeq	r5, r1, r8, lsl #5
   15130:	andeq	r5, r1, r8, lsl #5
   15134:	andeq	r5, r1, r8, lsl #5
   15138:	andeq	r5, r1, r8, ror #17
   1513c:	andeq	r5, r1, r8, lsl #5
   15140:	andeq	r5, r1, r8, lsl #5
   15144:	andeq	r5, r1, r8, lsl #5
   15148:	andeq	r5, r1, r8, lsl #5
   1514c:	andeq	r5, r1, r8, lsl #5
   15150:	andeq	r5, r1, r8, lsl #5
   15154:	andeq	r5, r1, r8, lsl #5
   15158:	andeq	r5, r1, r8, lsl #5
   1515c:	andeq	r5, r1, r8, lsl #5
   15160:	andeq	r5, r1, r8, lsl #5
   15164:	andeq	r5, r1, r8, lsl #5
   15168:	andeq	r5, r1, r8, lsl #5
   1516c:	andeq	r5, r1, r8, lsl #5
   15170:	andeq	r5, r1, r8, lsl #5
   15174:	andeq	r5, r1, r8, lsl #5
   15178:	andeq	r5, r1, r8, lsl #5
   1517c:	andeq	r5, r1, r8, lsl #5
   15180:	andeq	r5, r1, r8, lsl #5
   15184:	andeq	r5, r1, r8, lsl #5
   15188:	andeq	r5, r1, r8, lsl #5
   1518c:	andeq	r5, r1, r8, ror #17
   15190:	andeq	r5, r1, r8, lsl #5
   15194:	andeq	r5, r1, r8, lsl #5
   15198:	andeq	r5, r1, r8, lsl #5
   1519c:	andeq	r5, r1, r8, lsl #5
   151a0:	andeq	r5, r1, r8, lsl #5
   151a4:	andeq	r5, r1, r8, lsl #5
   151a8:	andeq	r5, r1, r8, lsl #5
   151ac:	andeq	r5, r1, r8, lsl #5
   151b0:	andeq	r5, r1, r8, lsl #5
   151b4:	andeq	r5, r1, r8, lsl #5
   151b8:	andeq	r5, r1, r8, lsl #5
   151bc:	andeq	r5, r1, r8, lsl #5
   151c0:	andeq	r5, r1, r8, lsl #5
   151c4:	andeq	r5, r1, r8, lsl #5
   151c8:	andeq	r5, r1, r8, lsl #5
   151cc:	andeq	r5, r1, r8, lsl #5
   151d0:	andeq	r5, r1, r8, lsl #5
   151d4:	andeq	r5, r1, r8, lsl #5
   151d8:	andeq	r5, r1, r8, lsl #5
   151dc:	andeq	r5, r1, r8, lsl #5
   151e0:	andeq	r5, r1, r8, lsl #5
   151e4:	andeq	r5, r1, r8, lsl #5
   151e8:	andeq	r5, r1, r8, lsl #5
   151ec:	andeq	r5, r1, r8, lsl #5
   151f0:	andeq	r5, r1, r8, lsl #5
   151f4:	andeq	r5, r1, r8, lsl #5
   151f8:	andeq	r5, r1, r8, lsl #5
   151fc:	andeq	r5, r1, r8, ror #17
   15200:	andeq	r5, r1, r8, lsl #5
   15204:	andeq	r5, r1, r8, lsl #5
   15208:	andeq	r5, r1, r8, lsl #5
   1520c:	andeq	r5, r1, r8, lsl #5
   15210:	andeq	r5, r1, r8, lsl #5
   15214:	andeq	r5, r1, r8, lsl #5
   15218:	andeq	r5, r1, r8, lsl #5
   1521c:	andeq	r5, r1, r8, lsl #5
   15220:	andeq	r5, r1, r8, lsl #5
   15224:	andeq	r5, r1, r8, lsl #5
   15228:	andeq	r5, r1, r8, lsl #5
   1522c:	andeq	r5, r1, r8, lsl #5
   15230:	andeq	r5, r1, r8, lsl #5
   15234:	andeq	r5, r1, r8, lsl #5
   15238:	andeq	r5, r1, r8, lsl #5
   1523c:	andeq	r5, r1, r8, lsl #5
   15240:	andeq	r5, r1, r8, lsl #5
   15244:	andeq	r5, r1, r8, lsl #5
   15248:	andeq	r5, r1, r8, lsl #5
   1524c:	andeq	r5, r1, r8, lsl #5
   15250:	andeq	r5, r1, r8, lsl #5
   15254:	andeq	r5, r1, r8, lsl #5
   15258:	andeq	r5, r1, r8, lsl #5
   1525c:	andeq	r5, r1, r8, lsl #5
   15260:	andeq	r5, r1, r8, lsl #5
   15264:	andeq	r5, r1, r8, lsl #5
   15268:	andeq	r5, r1, r8, lsl #5
   1526c:	andeq	r5, r1, r8, lsl #5
   15270:	andeq	r5, r1, r8, lsl #5
   15274:	andeq	r5, r1, r8, lsl #5
   15278:	andeq	r5, r1, r8, lsl #5
   1527c:	andeq	r5, r1, r8, lsl #5
   15280:	andeq	r5, r1, r8, lsl #5
   15284:	andeq	r5, r1, r8, lsl #5
   15288:	ldrb	r3, [r0]
   1528c:	b	15080 <__assert_fail@plt+0x34dc>
   15290:	ldrb	r3, [r0, #1]
   15294:	add	r0, r0, #2
   15298:	cmp	r3, #0
   1529c:	moveq	r0, r2
   152a0:	ldrb	r3, [r0]
   152a4:	add	r2, r0, #1
   152a8:	cmp	r3, #125	; 0x7d
   152ac:	ldrls	pc, [pc, r3, lsl #2]
   152b0:	b	154ac <__assert_fail@plt+0x3908>
   152b4:	strdeq	r5, [r1], -r0
   152b8:	andeq	r5, r1, ip, lsr #9
   152bc:	andeq	r5, r1, ip, lsr #9
   152c0:	andeq	r5, r1, ip, lsr #9
   152c4:	andeq	r5, r1, ip, lsr #9
   152c8:	andeq	r5, r1, ip, lsr #9
   152cc:	andeq	r5, r1, ip, lsr #9
   152d0:	andeq	r5, r1, ip, lsr #9
   152d4:	andeq	r5, r1, ip, lsr #9
   152d8:	andeq	r5, r1, ip, lsr #9
   152dc:	andeq	r5, r1, ip, lsr #9
   152e0:	andeq	r5, r1, ip, lsr #9
   152e4:	andeq	r5, r1, ip, lsr #9
   152e8:	andeq	r5, r1, ip, lsr #9
   152ec:	andeq	r5, r1, ip, lsr #9
   152f0:	andeq	r5, r1, ip, lsr #9
   152f4:	andeq	r5, r1, ip, lsr #9
   152f8:	andeq	r5, r1, ip, lsr #9
   152fc:	andeq	r5, r1, ip, lsr #9
   15300:	andeq	r5, r1, ip, lsr #9
   15304:	andeq	r5, r1, ip, lsr #9
   15308:	andeq	r5, r1, ip, lsr #9
   1530c:	andeq	r5, r1, ip, lsr #9
   15310:	andeq	r5, r1, ip, lsr #9
   15314:	andeq	r5, r1, ip, lsr #9
   15318:	andeq	r5, r1, ip, lsr #9
   1531c:	andeq	r5, r1, ip, lsr #9
   15320:	andeq	r5, r1, ip, lsr #9
   15324:	andeq	r5, r1, ip, lsr #9
   15328:	andeq	r5, r1, ip, lsr #9
   1532c:	andeq	r5, r1, ip, lsr #9
   15330:	andeq	r5, r1, ip, lsr #9
   15334:	andeq	r5, r1, ip, lsr #9
   15338:	andeq	r5, r1, ip, lsr #9
   1533c:	andeq	r5, r1, ip, lsr #9
   15340:	andeq	r5, r1, ip, lsr #9
   15344:	andeq	r5, r1, ip, lsr #9
   15348:	andeq	r5, r1, ip, lsr #9
   1534c:	andeq	r5, r1, ip, lsr #9
   15350:	andeq	r5, r1, ip, lsr #9
   15354:	andeq	r5, r1, ip, lsr #9
   15358:	andeq	r5, r1, ip, lsr #9
   1535c:	andeq	r5, r1, r8, ror #17
   15360:	andeq	r5, r1, ip, lsr #9
   15364:	andeq	r5, r1, ip, lsr #9
   15368:	andeq	r5, r1, ip, lsr #9
   1536c:	andeq	r5, r1, ip, lsr #9
   15370:	andeq	r5, r1, ip, lsr #9
   15374:	andeq	r5, r1, ip, lsr #9
   15378:	andeq	r5, r1, ip, lsr #9
   1537c:	andeq	r5, r1, ip, lsr #9
   15380:	andeq	r5, r1, ip, lsr #9
   15384:	andeq	r5, r1, ip, lsr #9
   15388:	andeq	r5, r1, ip, lsr #9
   1538c:	andeq	r5, r1, ip, lsr #9
   15390:	andeq	r5, r1, ip, lsr #9
   15394:	andeq	r5, r1, ip, lsr #9
   15398:	andeq	r5, r1, ip, lsr #9
   1539c:	andeq	r5, r1, ip, lsr #9
   153a0:	andeq	r5, r1, ip, lsr #9
   153a4:	andeq	r5, r1, ip, lsr #9
   153a8:	andeq	r5, r1, ip, lsr #9
   153ac:	andeq	r5, r1, ip, lsr #9
   153b0:	andeq	r5, r1, r8, ror #17
   153b4:	andeq	r5, r1, ip, lsr #9
   153b8:	andeq	r5, r1, ip, lsr #9
   153bc:	andeq	r5, r1, ip, lsr #9
   153c0:	andeq	r5, r1, ip, lsr #9
   153c4:	andeq	r5, r1, ip, lsr #9
   153c8:	andeq	r5, r1, ip, lsr #9
   153cc:	andeq	r5, r1, ip, lsr #9
   153d0:	andeq	r5, r1, ip, lsr #9
   153d4:	andeq	r5, r1, ip, lsr #9
   153d8:	andeq	r5, r1, ip, lsr #9
   153dc:	andeq	r5, r1, ip, lsr #9
   153e0:	andeq	r5, r1, ip, lsr #9
   153e4:	andeq	r5, r1, ip, lsr #9
   153e8:	andeq	r5, r1, ip, lsr #9
   153ec:	andeq	r5, r1, ip, lsr #9
   153f0:	andeq	r5, r1, ip, lsr #9
   153f4:	andeq	r5, r1, ip, lsr #9
   153f8:	andeq	r5, r1, ip, lsr #9
   153fc:	andeq	r5, r1, ip, lsr #9
   15400:	andeq	r5, r1, ip, lsr #9
   15404:	andeq	r5, r1, ip, lsr #9
   15408:	andeq	r5, r1, ip, lsr #9
   1540c:	andeq	r5, r1, ip, lsr #9
   15410:	andeq	r5, r1, ip, lsr #9
   15414:	andeq	r5, r1, ip, lsr #9
   15418:	andeq	r5, r1, ip, lsr #9
   1541c:	andeq	r5, r1, ip, lsr #9
   15420:	andeq	r5, r1, r8, ror #17
   15424:	muleq	r1, r0, r2
   15428:	andeq	r5, r1, ip, lsr #9
   1542c:	andeq	r5, r1, ip, lsr #9
   15430:	andeq	r5, r1, ip, lsr #9
   15434:	andeq	r5, r1, ip, lsr #9
   15438:	andeq	r5, r1, ip, lsr #9
   1543c:	andeq	r5, r1, ip, lsr #9
   15440:	andeq	r5, r1, ip, lsr #9
   15444:	andeq	r5, r1, ip, lsr #9
   15448:	andeq	r5, r1, ip, lsr #9
   1544c:	andeq	r5, r1, ip, lsr #9
   15450:	andeq	r5, r1, ip, lsr #9
   15454:	andeq	r5, r1, ip, lsr #9
   15458:	andeq	r5, r1, ip, lsr #9
   1545c:	andeq	r5, r1, ip, lsr #9
   15460:	andeq	r5, r1, ip, lsr #9
   15464:	andeq	r5, r1, ip, lsr #9
   15468:	andeq	r5, r1, ip, lsr #9
   1546c:	andeq	r5, r1, ip, lsr #9
   15470:	andeq	r5, r1, ip, lsr #9
   15474:	andeq	r5, r1, ip, lsr #9
   15478:	andeq	r5, r1, ip, lsr #9
   1547c:	andeq	r5, r1, ip, lsr #9
   15480:	andeq	r5, r1, ip, lsr #9
   15484:	andeq	r5, r1, ip, lsr #9
   15488:	andeq	r5, r1, ip, lsr #9
   1548c:	andeq	r5, r1, ip, lsr #9
   15490:	andeq	r5, r1, ip, lsr #9
   15494:	andeq	r5, r1, ip, lsr #9
   15498:	andeq	r5, r1, ip, lsr #9
   1549c:	andeq	r5, r1, ip, lsr #9
   154a0:	andeq	r5, r1, ip, lsr #9
   154a4:	andeq	r5, r1, ip, lsr #9
   154a8:	andeq	r5, r1, ip, lsr #9
   154ac:	ldrb	r3, [r0, #1]
   154b0:	mov	r0, r2
   154b4:	b	152a4 <__assert_fail@plt+0x3700>
   154b8:	ldrb	r3, [r0]
   154bc:	b	14e68 <__assert_fail@plt+0x32c4>
   154c0:	ldrb	r3, [r0, #1]
   154c4:	mov	r0, r2
   154c8:	add	r2, r0, #1
   154cc:	cmp	r3, #125	; 0x7d
   154d0:	ldrls	pc, [pc, r3, lsl #2]
   154d4:	b	154c0 <__assert_fail@plt+0x391c>
   154d8:	strdeq	r5, [r1], -r0
   154dc:	andeq	r5, r1, r0, asr #9
   154e0:	andeq	r5, r1, r0, asr #9
   154e4:	andeq	r5, r1, r0, asr #9
   154e8:	andeq	r5, r1, r0, asr #9
   154ec:	andeq	r5, r1, r0, asr #9
   154f0:	andeq	r5, r1, r0, asr #9
   154f4:	andeq	r5, r1, r0, asr #9
   154f8:	andeq	r5, r1, r0, asr #9
   154fc:	andeq	r5, r1, r0, asr #9
   15500:	andeq	r5, r1, r0, asr #9
   15504:	andeq	r5, r1, r0, asr #9
   15508:	andeq	r5, r1, r0, asr #9
   1550c:	andeq	r5, r1, r0, asr #9
   15510:	andeq	r5, r1, r0, asr #9
   15514:	andeq	r5, r1, r0, asr #9
   15518:	andeq	r5, r1, r0, asr #9
   1551c:	andeq	r5, r1, r0, asr #9
   15520:	andeq	r5, r1, r0, asr #9
   15524:	andeq	r5, r1, r0, asr #9
   15528:	andeq	r5, r1, r0, asr #9
   1552c:	andeq	r5, r1, r0, asr #9
   15530:	andeq	r5, r1, r0, asr #9
   15534:	andeq	r5, r1, r0, asr #9
   15538:	andeq	r5, r1, r0, asr #9
   1553c:	andeq	r5, r1, r0, asr #9
   15540:	andeq	r5, r1, r0, asr #9
   15544:	andeq	r5, r1, r0, asr #9
   15548:	andeq	r5, r1, r0, asr #9
   1554c:	andeq	r5, r1, r0, asr #9
   15550:	andeq	r5, r1, r0, asr #9
   15554:	andeq	r5, r1, r0, asr #9
   15558:	andeq	r5, r1, r0, asr #9
   1555c:	strdeq	r5, [r1], -r8
   15560:	andeq	r5, r1, r0, asr #9
   15564:	andeq	r5, r1, r0, asr #9
   15568:	andeq	r5, r1, r0, asr #9
   1556c:	andeq	r5, r1, r0, asr #9
   15570:	andeq	r5, r1, r0, asr #9
   15574:	andeq	r5, r1, r0, asr #9
   15578:	andeq	r5, r1, r0, asr #9
   1557c:	andeq	r5, r1, r0, asr #9
   15580:	andeq	r5, r1, r8, ror #17
   15584:	strdeq	r5, [r1], -r8
   15588:	andeq	r5, r1, r0, asr #9
   1558c:	andeq	r5, r1, r0, asr #9
   15590:	andeq	r5, r1, r0, asr #9
   15594:	andeq	r5, r1, r0, asr #9
   15598:	andeq	r5, r1, r0, asr #9
   1559c:	andeq	r5, r1, r0, asr #9
   155a0:	andeq	r5, r1, r0, asr #9
   155a4:	andeq	r5, r1, r0, asr #9
   155a8:	andeq	r5, r1, r0, asr #9
   155ac:	andeq	r5, r1, r0, asr #9
   155b0:	andeq	r5, r1, r0, asr #9
   155b4:	andeq	r5, r1, r0, asr #9
   155b8:	andeq	r5, r1, r0, asr #9
   155bc:	andeq	r5, r1, r0, asr #9
   155c0:	andeq	r5, r1, r0, asr #9
   155c4:	andeq	r5, r1, r0, asr #9
   155c8:	andeq	r5, r1, r0, asr #9
   155cc:	andeq	r5, r1, r0, asr #9
   155d0:	andeq	r5, r1, r0, asr #9
   155d4:	andeq	r5, r1, r8, ror #17
   155d8:	strdeq	r5, [r1], -r8
   155dc:	andeq	r5, r1, r0, asr #9
   155e0:	andeq	r5, r1, r0, asr #9
   155e4:	andeq	r5, r1, r0, asr #9
   155e8:	andeq	r5, r1, r0, asr #9
   155ec:	andeq	r5, r1, r0, asr #9
   155f0:	andeq	r5, r1, r0, asr #9
   155f4:	andeq	r5, r1, r0, asr #9
   155f8:	andeq	r5, r1, r0, asr #9
   155fc:	andeq	r5, r1, r0, asr #9
   15600:	andeq	r5, r1, r0, asr #9
   15604:	andeq	r5, r1, r0, asr #9
   15608:	andeq	r5, r1, r0, asr #9
   1560c:	andeq	r5, r1, r0, asr #9
   15610:	andeq	r5, r1, r0, asr #9
   15614:	andeq	r5, r1, r0, asr #9
   15618:	andeq	r5, r1, r0, asr #9
   1561c:	andeq	r5, r1, r0, asr #9
   15620:	andeq	r5, r1, r0, asr #9
   15624:	andeq	r5, r1, r0, asr #9
   15628:	andeq	r5, r1, r0, asr #9
   1562c:	andeq	r5, r1, r0, asr #9
   15630:	andeq	r5, r1, r0, asr #9
   15634:	andeq	r5, r1, r0, asr #9
   15638:	andeq	r5, r1, r0, asr #9
   1563c:	andeq	r5, r1, r0, asr #9
   15640:	andeq	r5, r1, r0, asr #9
   15644:	andeq	r5, r1, r8, ror #17
   15648:	andeq	r5, r1, ip, lsl #18
   1564c:	andeq	r5, r1, r0, asr #9
   15650:	andeq	r5, r1, r0, asr #9
   15654:	andeq	r5, r1, r0, asr #9
   15658:	andeq	r5, r1, r0, asr #9
   1565c:	andeq	r5, r1, r0, asr #9
   15660:	andeq	r5, r1, r0, asr #9
   15664:	andeq	r5, r1, r0, asr #9
   15668:	andeq	r5, r1, r0, asr #9
   1566c:	andeq	r5, r1, r0, asr #9
   15670:	andeq	r5, r1, r0, asr #9
   15674:	andeq	r5, r1, r0, asr #9
   15678:	andeq	r5, r1, r0, asr #9
   1567c:	andeq	r5, r1, r0, asr #9
   15680:	andeq	r5, r1, r0, asr #9
   15684:	andeq	r5, r1, r0, asr #9
   15688:	andeq	r5, r1, r0, asr #9
   1568c:	andeq	r5, r1, r0, asr #9
   15690:	andeq	r5, r1, r0, asr #9
   15694:	andeq	r5, r1, r0, asr #9
   15698:	andeq	r5, r1, r0, asr #9
   1569c:	andeq	r5, r1, r0, asr #9
   156a0:	andeq	r5, r1, r0, asr #9
   156a4:	andeq	r5, r1, r0, asr #9
   156a8:	andeq	r5, r1, r0, asr #9
   156ac:	andeq	r5, r1, r0, asr #9
   156b0:	andeq	r5, r1, r0, asr #9
   156b4:	andeq	r5, r1, r0, asr #9
   156b8:	andeq	r5, r1, r0, asr #9
   156bc:	andeq	r5, r1, r0, asr #9
   156c0:	andeq	r5, r1, r0, asr #9
   156c4:	andeq	r5, r1, r0, asr #9
   156c8:	andeq	r5, r1, r0, asr #9
   156cc:	andeq	r5, r1, r0, asr #9
   156d0:	ldrb	r3, [r0]
   156d4:	add	r0, r0, #1
   156d8:	cmp	r3, #125	; 0x7d
   156dc:	ldrls	pc, [pc, r3, lsl #2]
   156e0:	b	156d0 <__assert_fail@plt+0x3b2c>
   156e4:	strdeq	r5, [r1], -r0
   156e8:	ldrdeq	r5, [r1], -r0
   156ec:	ldrdeq	r5, [r1], -r0
   156f0:	ldrdeq	r5, [r1], -r0
   156f4:	ldrdeq	r5, [r1], -r0
   156f8:	ldrdeq	r5, [r1], -r0
   156fc:	ldrdeq	r5, [r1], -r0
   15700:	ldrdeq	r5, [r1], -r0
   15704:	ldrdeq	r5, [r1], -r0
   15708:	ldrdeq	r5, [r1], -r0
   1570c:	ldrdeq	r5, [r1], -r0
   15710:	ldrdeq	r5, [r1], -r0
   15714:	ldrdeq	r5, [r1], -r0
   15718:	ldrdeq	r5, [r1], -r0
   1571c:	ldrdeq	r5, [r1], -r0
   15720:	ldrdeq	r5, [r1], -r0
   15724:	ldrdeq	r5, [r1], -r0
   15728:	ldrdeq	r5, [r1], -r0
   1572c:	ldrdeq	r5, [r1], -r0
   15730:	ldrdeq	r5, [r1], -r0
   15734:	ldrdeq	r5, [r1], -r0
   15738:	ldrdeq	r5, [r1], -r0
   1573c:	ldrdeq	r5, [r1], -r0
   15740:	ldrdeq	r5, [r1], -r0
   15744:	ldrdeq	r5, [r1], -r0
   15748:	ldrdeq	r5, [r1], -r0
   1574c:	ldrdeq	r5, [r1], -r0
   15750:	ldrdeq	r5, [r1], -r0
   15754:	ldrdeq	r5, [r1], -r0
   15758:	ldrdeq	r5, [r1], -r0
   1575c:	ldrdeq	r5, [r1], -r0
   15760:	ldrdeq	r5, [r1], -r0
   15764:	ldrdeq	r5, [r1], -r0
   15768:	andeq	r5, r1, r4, lsr #18
   1576c:	ldrdeq	r5, [r1], -r0
   15770:	ldrdeq	r5, [r1], -r0
   15774:	ldrdeq	r5, [r1], -r0
   15778:	ldrdeq	r5, [r1], -r0
   1577c:	ldrdeq	r5, [r1], -r0
   15780:	ldrdeq	r5, [r1], -r0
   15784:	andeq	r5, r1, r8, ror #17
   15788:	andeq	r5, r1, r8, ror #17
   1578c:	andeq	r5, r1, r8, ror #17
   15790:	andeq	r5, r1, r4, lsr #18
   15794:	ldrdeq	r5, [r1], -r0
   15798:	ldrdeq	r5, [r1], -r0
   1579c:	andeq	r5, r1, r8, ror #17
   157a0:	ldrdeq	r5, [r1], -r0
   157a4:	ldrdeq	r5, [r1], -r0
   157a8:	ldrdeq	r5, [r1], -r0
   157ac:	ldrdeq	r5, [r1], -r0
   157b0:	ldrdeq	r5, [r1], -r0
   157b4:	ldrdeq	r5, [r1], -r0
   157b8:	ldrdeq	r5, [r1], -r0
   157bc:	ldrdeq	r5, [r1], -r0
   157c0:	ldrdeq	r5, [r1], -r0
   157c4:	ldrdeq	r5, [r1], -r0
   157c8:	ldrdeq	r5, [r1], -r0
   157cc:	ldrdeq	r5, [r1], -r0
   157d0:	ldrdeq	r5, [r1], -r0
   157d4:	ldrdeq	r5, [r1], -r0
   157d8:	ldrdeq	r5, [r1], -r0
   157dc:	ldrdeq	r5, [r1], -r0
   157e0:	andeq	r5, r1, r8, ror #17
   157e4:	andeq	r5, r1, r4, lsr #18
   157e8:	ldrdeq	r5, [r1], -r0
   157ec:	ldrdeq	r5, [r1], -r0
   157f0:	ldrdeq	r5, [r1], -r0
   157f4:	ldrdeq	r5, [r1], -r0
   157f8:	ldrdeq	r5, [r1], -r0
   157fc:	ldrdeq	r5, [r1], -r0
   15800:	ldrdeq	r5, [r1], -r0
   15804:	ldrdeq	r5, [r1], -r0
   15808:	ldrdeq	r5, [r1], -r0
   1580c:	ldrdeq	r5, [r1], -r0
   15810:	ldrdeq	r5, [r1], -r0
   15814:	ldrdeq	r5, [r1], -r0
   15818:	ldrdeq	r5, [r1], -r0
   1581c:	ldrdeq	r5, [r1], -r0
   15820:	ldrdeq	r5, [r1], -r0
   15824:	ldrdeq	r5, [r1], -r0
   15828:	ldrdeq	r5, [r1], -r0
   1582c:	ldrdeq	r5, [r1], -r0
   15830:	ldrdeq	r5, [r1], -r0
   15834:	ldrdeq	r5, [r1], -r0
   15838:	ldrdeq	r5, [r1], -r0
   1583c:	ldrdeq	r5, [r1], -r0
   15840:	ldrdeq	r5, [r1], -r0
   15844:	ldrdeq	r5, [r1], -r0
   15848:	ldrdeq	r5, [r1], -r0
   1584c:	ldrdeq	r5, [r1], -r0
   15850:	andeq	r5, r1, r8, ror #17
   15854:	ldrdeq	r5, [r1], -r0
   15858:	ldrdeq	r5, [r1], -r0
   1585c:	ldrdeq	r5, [r1], -r0
   15860:	ldrdeq	r5, [r1], -r0
   15864:	ldrdeq	r5, [r1], -r0
   15868:	ldrdeq	r5, [r1], -r0
   1586c:	ldrdeq	r5, [r1], -r0
   15870:	ldrdeq	r5, [r1], -r0
   15874:	ldrdeq	r5, [r1], -r0
   15878:	ldrdeq	r5, [r1], -r0
   1587c:	ldrdeq	r5, [r1], -r0
   15880:	ldrdeq	r5, [r1], -r0
   15884:	ldrdeq	r5, [r1], -r0
   15888:	ldrdeq	r5, [r1], -r0
   1588c:	ldrdeq	r5, [r1], -r0
   15890:	ldrdeq	r5, [r1], -r0
   15894:	ldrdeq	r5, [r1], -r0
   15898:	ldrdeq	r5, [r1], -r0
   1589c:	ldrdeq	r5, [r1], -r0
   158a0:	ldrdeq	r5, [r1], -r0
   158a4:	ldrdeq	r5, [r1], -r0
   158a8:	ldrdeq	r5, [r1], -r0
   158ac:	ldrdeq	r5, [r1], -r0
   158b0:	ldrdeq	r5, [r1], -r0
   158b4:	ldrdeq	r5, [r1], -r0
   158b8:	ldrdeq	r5, [r1], -r0
   158bc:	ldrdeq	r5, [r1], -r0
   158c0:	ldrdeq	r5, [r1], -r0
   158c4:	ldrdeq	r5, [r1], -r0
   158c8:	ldrdeq	r5, [r1], -r0
   158cc:	ldrdeq	r5, [r1], -r0
   158d0:	andeq	r5, r1, r8, ror #17
   158d4:	ldrdeq	r5, [r1], -r0
   158d8:	andeq	r5, r1, r8, ror #17
   158dc:	ldrb	r3, [r0]
   158e0:	cmp	r3, #40	; 0x28
   158e4:	bne	14e68 <__assert_fail@plt+0x32c4>
   158e8:	mov	r0, #1
   158ec:	bx	lr
   158f0:	mov	r0, #0
   158f4:	bx	lr
   158f8:	ldrb	r3, [r0, #1]
   158fc:	mov	r0, r2
   15900:	cmp	r3, #40	; 0x28
   15904:	bne	154c8 <__assert_fail@plt+0x3924>
   15908:	b	158e8 <__assert_fail@plt+0x3d44>
   1590c:	ldrb	r3, [r0, #1]
   15910:	add	r0, r0, #2
   15914:	cmp	r3, #0
   15918:	moveq	r0, r2
   1591c:	ldrb	r3, [r0]
   15920:	b	154c8 <__assert_fail@plt+0x3924>
   15924:	ldrb	r3, [r0]
   15928:	cmp	r3, #40	; 0x28
   1592c:	bne	156d4 <__assert_fail@plt+0x3b30>
   15930:	b	158e8 <__assert_fail@plt+0x3d44>
   15934:	ldrb	r3, [r0]
   15938:	add	r0, r0, #1
   1593c:	cmp	r3, #125	; 0x7d
   15940:	ldrls	pc, [pc, r3, lsl #2]
   15944:	b	15934 <__assert_fail@plt+0x3d90>
   15948:	strdeq	r5, [r1], -r0
   1594c:	andeq	r5, r1, r4, lsr r9
   15950:	andeq	r5, r1, r4, lsr r9
   15954:	andeq	r5, r1, r4, lsr r9
   15958:	andeq	r5, r1, r4, lsr r9
   1595c:	andeq	r5, r1, r4, lsr r9
   15960:	andeq	r5, r1, r4, lsr r9
   15964:	andeq	r5, r1, r4, lsr r9
   15968:	andeq	r5, r1, r4, lsr r9
   1596c:	andeq	r5, r1, r4, lsr r9
   15970:	andeq	r5, r1, r4, lsr r9
   15974:	andeq	r5, r1, r4, lsr r9
   15978:	andeq	r5, r1, r4, lsr r9
   1597c:	andeq	r5, r1, r4, lsr r9
   15980:	andeq	r5, r1, r4, lsr r9
   15984:	andeq	r5, r1, r4, lsr r9
   15988:	andeq	r5, r1, r4, lsr r9
   1598c:	andeq	r5, r1, r4, lsr r9
   15990:	andeq	r5, r1, r4, lsr r9
   15994:	andeq	r5, r1, r4, lsr r9
   15998:	andeq	r5, r1, r4, lsr r9
   1599c:	andeq	r5, r1, r4, lsr r9
   159a0:	andeq	r5, r1, r4, lsr r9
   159a4:	andeq	r5, r1, r4, lsr r9
   159a8:	andeq	r5, r1, r4, lsr r9
   159ac:	andeq	r5, r1, r4, lsr r9
   159b0:	andeq	r5, r1, r4, lsr r9
   159b4:	andeq	r5, r1, r4, lsr r9
   159b8:	andeq	r5, r1, r4, lsr r9
   159bc:	andeq	r5, r1, r4, lsr r9
   159c0:	andeq	r5, r1, r4, lsr r9
   159c4:	andeq	r5, r1, r4, lsr r9
   159c8:	andeq	r5, r1, r4, lsr r9
   159cc:	andeq	r5, r1, r4, lsr r9
   159d0:	andeq	r5, r1, r4, lsr r9
   159d4:	andeq	r5, r1, r4, lsr r9
   159d8:	andeq	r5, r1, r4, lsr r9
   159dc:	andeq	r5, r1, r4, lsr r9
   159e0:	andeq	r5, r1, r4, lsr r9
   159e4:	andeq	r5, r1, r4, lsr r9
   159e8:	andeq	r5, r1, r8, ror #17
   159ec:	andeq	r5, r1, r8, ror #17
   159f0:	andeq	r5, r1, r8, ror #17
   159f4:	andeq	r5, r1, r4, lsr r9
   159f8:	andeq	r5, r1, r4, lsr r9
   159fc:	andeq	r5, r1, r4, lsr r9
   15a00:	andeq	r5, r1, r8, ror #17
   15a04:	andeq	r5, r1, r4, lsr r9
   15a08:	andeq	r5, r1, r4, lsr r9
   15a0c:	andeq	r5, r1, r4, lsr r9
   15a10:	andeq	r5, r1, r4, lsr r9
   15a14:	andeq	r5, r1, r4, lsr r9
   15a18:	andeq	r5, r1, r4, lsr r9
   15a1c:	andeq	r5, r1, r4, lsr r9
   15a20:	andeq	r5, r1, r4, lsr r9
   15a24:	andeq	r5, r1, r4, lsr r9
   15a28:	andeq	r5, r1, r4, lsr r9
   15a2c:	andeq	r5, r1, r4, lsr r9
   15a30:	andeq	r5, r1, r4, lsr r9
   15a34:	andeq	r5, r1, r4, lsr r9
   15a38:	andeq	r5, r1, r4, lsr r9
   15a3c:	andeq	r5, r1, r4, lsr r9
   15a40:	andeq	r5, r1, r4, lsr r9
   15a44:	andeq	r5, r1, r8, ror #17
   15a48:	andeq	r5, r1, r4, lsr r9
   15a4c:	andeq	r5, r1, r4, lsr r9
   15a50:	andeq	r5, r1, r4, lsr r9
   15a54:	andeq	r5, r1, r4, lsr r9
   15a58:	andeq	r5, r1, r4, lsr r9
   15a5c:	andeq	r5, r1, r4, lsr r9
   15a60:	andeq	r5, r1, r4, lsr r9
   15a64:	andeq	r5, r1, r4, lsr r9
   15a68:	andeq	r5, r1, r4, lsr r9
   15a6c:	andeq	r5, r1, r4, lsr r9
   15a70:	andeq	r5, r1, r4, lsr r9
   15a74:	andeq	r5, r1, r4, lsr r9
   15a78:	andeq	r5, r1, r4, lsr r9
   15a7c:	andeq	r5, r1, r4, lsr r9
   15a80:	andeq	r5, r1, r4, lsr r9
   15a84:	andeq	r5, r1, r4, lsr r9
   15a88:	andeq	r5, r1, r4, lsr r9
   15a8c:	andeq	r5, r1, r4, lsr r9
   15a90:	andeq	r5, r1, r4, lsr r9
   15a94:	andeq	r5, r1, r4, lsr r9
   15a98:	andeq	r5, r1, r4, lsr r9
   15a9c:	andeq	r5, r1, r4, lsr r9
   15aa0:	andeq	r5, r1, r4, lsr r9
   15aa4:	andeq	r5, r1, r4, lsr r9
   15aa8:	andeq	r5, r1, r4, lsr r9
   15aac:	andeq	r5, r1, r4, lsr r9
   15ab0:	andeq	r5, r1, r4, lsr r9
   15ab4:	andeq	r5, r1, r8, ror #17
   15ab8:	andeq	r5, r1, r4, lsr r9
   15abc:	andeq	r5, r1, r4, lsr r9
   15ac0:	andeq	r5, r1, r4, lsr r9
   15ac4:	andeq	r5, r1, r4, lsr r9
   15ac8:	andeq	r5, r1, r4, lsr r9
   15acc:	andeq	r5, r1, r4, lsr r9
   15ad0:	andeq	r5, r1, r4, lsr r9
   15ad4:	andeq	r5, r1, r4, lsr r9
   15ad8:	andeq	r5, r1, r4, lsr r9
   15adc:	andeq	r5, r1, r4, lsr r9
   15ae0:	andeq	r5, r1, r4, lsr r9
   15ae4:	andeq	r5, r1, r4, lsr r9
   15ae8:	andeq	r5, r1, r4, lsr r9
   15aec:	andeq	r5, r1, r4, lsr r9
   15af0:	andeq	r5, r1, r4, lsr r9
   15af4:	andeq	r5, r1, r4, lsr r9
   15af8:	andeq	r5, r1, r4, lsr r9
   15afc:	andeq	r5, r1, r4, lsr r9
   15b00:	andeq	r5, r1, r4, lsr r9
   15b04:	andeq	r5, r1, r4, lsr r9
   15b08:	andeq	r5, r1, r4, lsr r9
   15b0c:	andeq	r5, r1, r4, lsr r9
   15b10:	andeq	r5, r1, r4, lsr r9
   15b14:	andeq	r5, r1, r4, lsr r9
   15b18:	andeq	r5, r1, r4, lsr r9
   15b1c:	andeq	r5, r1, r4, lsr r9
   15b20:	andeq	r5, r1, r4, lsr r9
   15b24:	andeq	r5, r1, r4, lsr r9
   15b28:	andeq	r5, r1, r4, lsr r9
   15b2c:	andeq	r5, r1, r4, lsr r9
   15b30:	andeq	r5, r1, r4, lsr r9
   15b34:	andeq	r5, r1, r8, ror #17
   15b38:	andeq	r5, r1, r4, lsr r9
   15b3c:	andeq	r5, r1, r8, ror #17
   15b40:	mov	r0, #8
   15b44:	b	36ecc <__assert_fail@plt+0x25328>
   15b48:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b4c:	ldr	r4, [r0]
   15b50:	strd	r6, [sp, #8]
   15b54:	mov	r7, r0
   15b58:	str	r8, [sp, #16]
   15b5c:	str	lr, [sp, #20]
   15b60:	cmp	r4, #0
   15b64:	beq	15bcc <__assert_fail@plt+0x4028>
   15b68:	ldr	r8, [r4]
   15b6c:	ldr	r3, [r4, #4]
   15b70:	cmp	r3, #0
   15b74:	beq	15c34 <__assert_fail@plt+0x4090>
   15b78:	cmp	r3, #1
   15b7c:	bne	15bbc <__assert_fail@plt+0x4018>
   15b80:	ldr	r0, [r4, #12]
   15b84:	ldr	r3, [r4, #20]
   15b88:	cmp	r3, #0
   15b8c:	ble	15bb8 <__assert_fail@plt+0x4014>
   15b90:	mov	r5, #0
   15b94:	mov	r6, r5
   15b98:	ldr	r2, [r0, r5]
   15b9c:	add	r1, r0, r5
   15ba0:	tst	r2, #134217728	; 0x8000000
   15ba4:	bne	15c10 <__assert_fail@plt+0x406c>
   15ba8:	add	r6, r6, #1
   15bac:	add	r5, r5, #36	; 0x24
   15bb0:	cmp	r6, r3
   15bb4:	blt	15b98 <__assert_fail@plt+0x3ff4>
   15bb8:	bl	19610 <__assert_fail@plt+0x7a6c>
   15bbc:	mov	r0, r4
   15bc0:	bl	19610 <__assert_fail@plt+0x7a6c>
   15bc4:	subs	r4, r8, #0
   15bc8:	bne	15b68 <__assert_fail@plt+0x3fc4>
   15bcc:	ldr	r4, [r7, #4]
   15bd0:	cmp	r4, #0
   15bd4:	beq	15bf4 <__assert_fail@plt+0x4050>
   15bd8:	ldr	r5, [r4]
   15bdc:	ldr	r0, [r4, #4]
   15be0:	bl	19610 <__assert_fail@plt+0x7a6c>
   15be4:	mov	r0, r4
   15be8:	bl	19610 <__assert_fail@plt+0x7a6c>
   15bec:	subs	r4, r5, #0
   15bf0:	bne	15bd8 <__assert_fail@plt+0x4034>
   15bf4:	mov	r0, r7
   15bf8:	ldrd	r4, [sp]
   15bfc:	ldrd	r6, [sp, #8]
   15c00:	ldr	r8, [sp, #16]
   15c04:	ldr	lr, [sp, #20]
   15c08:	add	sp, sp, #24
   15c0c:	b	19610 <__assert_fail@plt+0x7a6c>
   15c10:	add	r0, r1, #4
   15c14:	add	r6, r6, #1
   15c18:	bl	35564 <__assert_fail@plt+0x239c0>
   15c1c:	add	r5, r5, #36	; 0x24
   15c20:	ldr	r0, [r4, #12]
   15c24:	ldr	r3, [r4, #20]
   15c28:	cmp	r6, r3
   15c2c:	blt	15b98 <__assert_fail@plt+0x3ff4>
   15c30:	b	15bb8 <__assert_fail@plt+0x4014>
   15c34:	ldr	r0, [r4, #12]
   15c38:	bl	1cc7c <__assert_fail@plt+0xb0d8>
   15c3c:	b	15bbc <__assert_fail@plt+0x4018>
   15c40:	tst	r2, #268435456	; 0x10000000
   15c44:	movw	r3, #19188	; 0x4af4
   15c48:	movt	r3, #1
   15c4c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c50:	mov	r4, r1
   15c54:	strd	r6, [sp, #8]
   15c58:	movw	r6, #6356	; 0x18d4
   15c5c:	movt	r6, #1
   15c60:	moveq	r6, r3
   15c64:	str	r8, [sp, #16]
   15c68:	mov	r7, r0
   15c6c:	str	lr, [sp, #20]
   15c70:	mov	r8, r2
   15c74:	blx	r6
   15c78:	clz	r2, r0
   15c7c:	tst	r8, #1073741824	; 0x40000000
   15c80:	lsr	r2, r2, #5
   15c84:	bne	15cbc <__assert_fail@plt+0x4118>
   15c88:	ldrb	r3, [r4]
   15c8c:	cmp	r3, #0
   15c90:	beq	15cbc <__assert_fail@plt+0x4118>
   15c94:	cmp	r0, #0
   15c98:	beq	15d10 <__assert_fail@plt+0x416c>
   15c9c:	cmp	r3, #47	; 0x2f
   15ca0:	add	r5, r4, #1
   15ca4:	ldrb	r3, [r4, #1]
   15ca8:	beq	15ce0 <__assert_fail@plt+0x413c>
   15cac:	cmp	r3, #0
   15cb0:	mov	r4, r5
   15cb4:	bne	15c9c <__assert_fail@plt+0x40f8>
   15cb8:	mov	r2, r3
   15cbc:	ldrd	r4, [sp]
   15cc0:	mov	r0, r2
   15cc4:	ldrd	r6, [sp, #8]
   15cc8:	ldr	r8, [sp, #16]
   15ccc:	add	sp, sp, #20
   15cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd4:	ldrb	r3, [r5, #1]
   15cd8:	mov	r4, r5
   15cdc:	add	r5, r5, #1
   15ce0:	cmp	r3, #47	; 0x2f
   15ce4:	beq	15cd4 <__assert_fail@plt+0x4130>
   15ce8:	mov	r2, r8
   15cec:	mov	r1, r5
   15cf0:	mov	r0, r7
   15cf4:	blx	r6
   15cf8:	ldrb	r3, [r4, #1]
   15cfc:	cmp	r3, #0
   15d00:	beq	15d18 <__assert_fail@plt+0x4174>
   15d04:	cmp	r0, #0
   15d08:	mov	r4, r5
   15d0c:	bne	15c9c <__assert_fail@plt+0x40f8>
   15d10:	mov	r2, #1
   15d14:	b	15cbc <__assert_fail@plt+0x4118>
   15d18:	clz	r2, r0
   15d1c:	lsr	r2, r2, #5
   15d20:	b	15cbc <__assert_fail@plt+0x4118>
   15d24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d28:	strd	r6, [sp, #8]
   15d2c:	strd	sl, [sp, #24]
   15d30:	ldr	fp, [r0]
   15d34:	strd	r8, [sp, #16]
   15d38:	str	lr, [sp, #32]
   15d3c:	sub	sp, sp, #36	; 0x24
   15d40:	cmp	fp, #0
   15d44:	moveq	r0, fp
   15d48:	beq	15f68 <__assert_fail@plt+0x43c4>
   15d4c:	movw	r3, #6356	; 0x18d4
   15d50:	movt	r3, #1
   15d54:	mov	r9, r1
   15d58:	mov	sl, #0
   15d5c:	str	r3, [sp, #16]
   15d60:	movw	r3, #19188	; 0x4af4
   15d64:	movt	r3, #1
   15d68:	str	r3, [sp, #20]
   15d6c:	ldr	r3, [fp, #4]
   15d70:	cmp	r3, #0
   15d74:	bne	15e28 <__assert_fail@plt+0x4284>
   15d78:	cmp	sl, #0
   15d7c:	beq	15f90 <__assert_fail@plt+0x43ec>
   15d80:	ldrd	r6, [fp, #8]
   15d84:	mov	r5, r9
   15d88:	and	r4, r6, #8
   15d8c:	and	r6, r6, #1073741824	; 0x40000000
   15d90:	mov	r1, r5
   15d94:	mov	r0, sl
   15d98:	bl	11898 <strcpy@plt>
   15d9c:	cmp	r4, #0
   15da0:	beq	15dd4 <__assert_fail@plt+0x4230>
   15da4:	mov	r1, sl
   15da8:	mov	r0, r7
   15dac:	bl	1c5b8 <__assert_fail@plt+0xaa14>
   15db0:	subs	r8, r0, #0
   15db4:	mov	r1, #47	; 0x2f
   15db8:	mov	r0, sl
   15dbc:	bne	15f4c <__assert_fail@plt+0x43a8>
   15dc0:	bl	11a78 <strrchr@plt>
   15dc4:	cmp	r0, #0
   15dc8:	beq	15de8 <__assert_fail@plt+0x4244>
   15dcc:	strb	r8, [r0]
   15dd0:	b	15da4 <__assert_fail@plt+0x4200>
   15dd4:	mov	r1, sl
   15dd8:	mov	r0, r7
   15ddc:	bl	1c5b8 <__assert_fail@plt+0xaa14>
   15de0:	cmp	r0, #0
   15de4:	bne	15f50 <__assert_fail@plt+0x43ac>
   15de8:	cmp	r6, #0
   15dec:	bne	15e0c <__assert_fail@plt+0x4268>
   15df0:	mov	r0, r5
   15df4:	mov	r1, #47	; 0x2f
   15df8:	bl	11994 <strchr@plt>
   15dfc:	cmp	r0, #0
   15e00:	beq	15e0c <__assert_fail@plt+0x4268>
   15e04:	adds	r5, r0, #1
   15e08:	bne	15d90 <__assert_fail@plt+0x41ec>
   15e0c:	ldr	r3, [fp]
   15e10:	cmp	r3, #0
   15e14:	beq	15fbc <__assert_fail@plt+0x4418>
   15e18:	mov	fp, r3
   15e1c:	ldr	r3, [fp, #4]
   15e20:	cmp	r3, #0
   15e24:	beq	15d78 <__assert_fail@plt+0x41d4>
   15e28:	ldr	r5, [fp, #12]
   15e2c:	ldr	r3, [fp, #20]
   15e30:	cmp	r3, #0
   15e34:	str	r3, [sp, #12]
   15e38:	ble	15e0c <__assert_fail@plt+0x4268>
   15e3c:	mov	r7, #0
   15e40:	add	r5, r5, #4
   15e44:	str	fp, [sp, #24]
   15e48:	str	sl, [sp, #28]
   15e4c:	b	15e8c <__assert_fail@plt+0x42e8>
   15e50:	mov	r3, #0
   15e54:	mov	r1, r9
   15e58:	mov	r2, r3
   15e5c:	mov	r0, r5
   15e60:	str	r3, [sp]
   15e64:	bl	355f8 <__assert_fail@plt+0x23a54>
   15e68:	clz	r3, r0
   15e6c:	lsr	r3, r3, #5
   15e70:	cmp	r3, #0
   15e74:	bne	15f44 <__assert_fail@plt+0x43a0>
   15e78:	ldr	r3, [sp, #12]
   15e7c:	add	r7, r7, #1
   15e80:	add	r5, r5, #36	; 0x24
   15e84:	cmp	r3, r7
   15e88:	beq	15fa8 <__assert_fail@plt+0x4404>
   15e8c:	ldr	r6, [r5, #-4]
   15e90:	tst	r6, #134217728	; 0x8000000
   15e94:	bne	15e50 <__assert_fail@plt+0x42ac>
   15e98:	ldr	r8, [r5]
   15e9c:	tst	r6, #268435456	; 0x10000000
   15ea0:	mov	r2, r6
   15ea4:	ldr	r3, [sp, #16]
   15ea8:	ldr	r1, [sp, #20]
   15eac:	mov	r0, r8
   15eb0:	movne	sl, r3
   15eb4:	moveq	sl, r1
   15eb8:	mov	r1, r9
   15ebc:	blx	sl
   15ec0:	clz	r3, r0
   15ec4:	tst	r6, #1073741824	; 0x40000000
   15ec8:	lsr	r3, r3, #5
   15ecc:	bne	15e70 <__assert_fail@plt+0x42cc>
   15ed0:	ldrb	r2, [r9]
   15ed4:	cmp	r2, #0
   15ed8:	beq	15e70 <__assert_fail@plt+0x42cc>
   15edc:	cmp	r0, #0
   15ee0:	beq	15f44 <__assert_fail@plt+0x43a0>
   15ee4:	mov	fp, r9
   15ee8:	cmp	r2, #47	; 0x2f
   15eec:	mov	r4, fp
   15ef0:	ldrb	r2, [r4, #1]!
   15ef4:	beq	15f14 <__assert_fail@plt+0x4370>
   15ef8:	cmp	r2, #0
   15efc:	mov	fp, r4
   15f00:	beq	15e78 <__assert_fail@plt+0x42d4>
   15f04:	cmp	r2, #47	; 0x2f
   15f08:	mov	r4, fp
   15f0c:	ldrb	r2, [r4, #1]!
   15f10:	bne	15ef8 <__assert_fail@plt+0x4354>
   15f14:	cmp	r2, #47	; 0x2f
   15f18:	beq	15f84 <__assert_fail@plt+0x43e0>
   15f1c:	mov	r2, r6
   15f20:	mov	r1, r4
   15f24:	mov	r0, r8
   15f28:	blx	sl
   15f2c:	ldrb	r2, [fp, #1]
   15f30:	cmp	r2, #0
   15f34:	beq	15fc4 <__assert_fail@plt+0x4420>
   15f38:	cmp	r0, #0
   15f3c:	mov	fp, r4
   15f40:	bne	15ee8 <__assert_fail@plt+0x4344>
   15f44:	ldr	fp, [sp, #24]
   15f48:	ldr	sl, [sp, #28]
   15f4c:	mov	r4, #0
   15f50:	mov	r0, sl
   15f54:	bl	19610 <__assert_fail@plt+0x7a6c>
   15f58:	ldr	r0, [fp, #8]
   15f5c:	eor	r0, r0, #536870912	; 0x20000000
   15f60:	ubfx	r0, r0, #29, #1
   15f64:	eor	r0, r0, r4
   15f68:	add	sp, sp, #36	; 0x24
   15f6c:	ldrd	r4, [sp]
   15f70:	ldrd	r6, [sp, #8]
   15f74:	ldrd	r8, [sp, #16]
   15f78:	ldrd	sl, [sp, #24]
   15f7c:	add	sp, sp, #32
   15f80:	pop	{pc}		; (ldr pc, [sp], #4)
   15f84:	mov	fp, r4
   15f88:	ldrb	r2, [r4, #1]!
   15f8c:	b	15f14 <__assert_fail@plt+0x4370>
   15f90:	mov	r0, r9
   15f94:	bl	11988 <strlen@plt>
   15f98:	add	r0, r0, #1
   15f9c:	bl	36ad8 <__assert_fail@plt+0x24f34>
   15fa0:	mov	sl, r0
   15fa4:	b	15d80 <__assert_fail@plt+0x41dc>
   15fa8:	ldr	fp, [sp, #24]
   15fac:	ldr	sl, [sp, #28]
   15fb0:	ldr	r3, [fp]
   15fb4:	cmp	r3, #0
   15fb8:	bne	15e18 <__assert_fail@plt+0x4274>
   15fbc:	mov	r4, #1
   15fc0:	b	15f50 <__assert_fail@plt+0x43ac>
   15fc4:	clz	r3, r0
   15fc8:	lsr	r3, r3, #5
   15fcc:	b	15e70 <__assert_fail@plt+0x42cc>
   15fd0:	tst	r2, #402653184	; 0x18000000
   15fd4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15fd8:	mov	r4, r2
   15fdc:	strd	r6, [sp, #8]
   15fe0:	mov	r6, r0
   15fe4:	mov	r7, r1
   15fe8:	strd	r8, [sp, #16]
   15fec:	str	lr, [sp, #24]
   15ff0:	sub	sp, sp, #12
   15ff4:	beq	16240 <__assert_fail@plt+0x469c>
   15ff8:	tst	r2, #32
   15ffc:	and	r8, r2, #134217728	; 0x8000000
   16000:	ldrb	r3, [r1]
   16004:	and	r2, r2, #2
   16008:	bne	1641c <__assert_fail@plt+0x4878>
   1600c:	cmp	r8, #0
   16010:	bne	16c74 <__assert_fail@plt+0x50d0>
   16014:	cmp	r2, #0
   16018:	mov	r2, r1
   1601c:	beq	1664c <__assert_fail@plt+0x4aa8>
   16020:	add	r2, r2, #1
   16024:	cmp	r3, #125	; 0x7d
   16028:	ldrls	pc, [pc, r3, lsl #2]
   1602c:	b	1685c <__assert_fail@plt+0x4cb8>
   16030:	andeq	r6, r1, r0, asr #4
   16034:	andeq	r6, r1, ip, asr r8
   16038:	andeq	r6, r1, ip, asr r8
   1603c:	andeq	r6, r1, ip, asr r8
   16040:	andeq	r6, r1, ip, asr r8
   16044:	andeq	r6, r1, ip, asr r8
   16048:	andeq	r6, r1, ip, asr r8
   1604c:	andeq	r6, r1, ip, asr r8
   16050:	andeq	r6, r1, ip, asr r8
   16054:	andeq	r6, r1, ip, asr r8
   16058:	andeq	r6, r1, ip, asr r8
   1605c:	andeq	r6, r1, ip, asr r8
   16060:	andeq	r6, r1, ip, asr r8
   16064:	andeq	r6, r1, ip, asr r8
   16068:	andeq	r6, r1, ip, asr r8
   1606c:	andeq	r6, r1, ip, asr r8
   16070:	andeq	r6, r1, ip, asr r8
   16074:	andeq	r6, r1, ip, asr r8
   16078:	andeq	r6, r1, ip, asr r8
   1607c:	andeq	r6, r1, ip, asr r8
   16080:	andeq	r6, r1, ip, asr r8
   16084:	andeq	r6, r1, ip, asr r8
   16088:	andeq	r6, r1, ip, asr r8
   1608c:	andeq	r6, r1, ip, asr r8
   16090:	andeq	r6, r1, ip, asr r8
   16094:	andeq	r6, r1, ip, asr r8
   16098:	andeq	r6, r1, ip, asr r8
   1609c:	andeq	r6, r1, ip, asr r8
   160a0:	andeq	r6, r1, ip, asr r8
   160a4:	andeq	r6, r1, ip, asr r8
   160a8:	andeq	r6, r1, ip, asr r8
   160ac:	andeq	r6, r1, ip, asr r8
   160b0:	andeq	r6, r1, ip, asr r8
   160b4:	andeq	r6, r1, ip, asr r8
   160b8:	andeq	r6, r1, ip, asr r8
   160bc:	andeq	r6, r1, ip, asr r8
   160c0:	andeq	r6, r1, ip, asr r8
   160c4:	andeq	r6, r1, ip, asr r8
   160c8:	andeq	r6, r1, ip, asr r8
   160cc:	andeq	r6, r1, ip, asr r8
   160d0:	andeq	r6, r1, ip, asr r8
   160d4:	andeq	r6, r1, ip, asr r8
   160d8:	andeq	r6, r1, r4, lsl r3
   160dc:	andeq	r6, r1, ip, asr r8
   160e0:	andeq	r6, r1, ip, asr r8
   160e4:	andeq	r6, r1, ip, asr r8
   160e8:	andeq	r6, r1, ip, asr r8
   160ec:	andeq	r6, r1, ip, asr r8
   160f0:	andeq	r6, r1, ip, asr r8
   160f4:	andeq	r6, r1, ip, asr r8
   160f8:	andeq	r6, r1, ip, asr r8
   160fc:	andeq	r6, r1, ip, asr r8
   16100:	andeq	r6, r1, ip, asr r8
   16104:	andeq	r6, r1, ip, asr r8
   16108:	andeq	r6, r1, ip, asr r8
   1610c:	andeq	r6, r1, ip, asr r8
   16110:	andeq	r6, r1, ip, asr r8
   16114:	andeq	r6, r1, ip, asr r8
   16118:	andeq	r6, r1, ip, asr r8
   1611c:	andeq	r6, r1, ip, asr r8
   16120:	andeq	r6, r1, ip, asr r8
   16124:	andeq	r6, r1, ip, asr r8
   16128:	andeq	r6, r1, ip, asr r8
   1612c:	andeq	r6, r1, r4, lsl r3
   16130:	andeq	r6, r1, ip, asr r8
   16134:	andeq	r6, r1, ip, asr r8
   16138:	andeq	r6, r1, ip, asr r8
   1613c:	andeq	r6, r1, ip, asr r8
   16140:	andeq	r6, r1, ip, asr r8
   16144:	andeq	r6, r1, ip, asr r8
   16148:	andeq	r6, r1, ip, asr r8
   1614c:	andeq	r6, r1, ip, asr r8
   16150:	andeq	r6, r1, ip, asr r8
   16154:	andeq	r6, r1, ip, asr r8
   16158:	andeq	r6, r1, ip, asr r8
   1615c:	andeq	r6, r1, ip, asr r8
   16160:	andeq	r6, r1, ip, asr r8
   16164:	andeq	r6, r1, ip, asr r8
   16168:	andeq	r6, r1, ip, asr r8
   1616c:	andeq	r6, r1, ip, asr r8
   16170:	andeq	r6, r1, ip, asr r8
   16174:	andeq	r6, r1, ip, asr r8
   16178:	andeq	r6, r1, ip, asr r8
   1617c:	andeq	r6, r1, ip, asr r8
   16180:	andeq	r6, r1, ip, asr r8
   16184:	andeq	r6, r1, ip, asr r8
   16188:	andeq	r6, r1, ip, asr r8
   1618c:	andeq	r6, r1, ip, asr r8
   16190:	andeq	r6, r1, ip, asr r8
   16194:	andeq	r6, r1, ip, asr r8
   16198:	andeq	r6, r1, ip, asr r8
   1619c:	andeq	r6, r1, r4, lsl r3
   161a0:	andeq	r6, r1, ip, asr r8
   161a4:	andeq	r6, r1, ip, asr r8
   161a8:	andeq	r6, r1, ip, asr r8
   161ac:	andeq	r6, r1, ip, asr r8
   161b0:	andeq	r6, r1, ip, asr r8
   161b4:	andeq	r6, r1, ip, asr r8
   161b8:	andeq	r6, r1, ip, asr r8
   161bc:	andeq	r6, r1, ip, asr r8
   161c0:	andeq	r6, r1, ip, asr r8
   161c4:	andeq	r6, r1, ip, asr r8
   161c8:	andeq	r6, r1, ip, asr r8
   161cc:	andeq	r6, r1, ip, asr r8
   161d0:	andeq	r6, r1, ip, asr r8
   161d4:	andeq	r6, r1, ip, asr r8
   161d8:	andeq	r6, r1, ip, asr r8
   161dc:	andeq	r6, r1, ip, asr r8
   161e0:	andeq	r6, r1, ip, asr r8
   161e4:	andeq	r6, r1, ip, asr r8
   161e8:	andeq	r6, r1, ip, asr r8
   161ec:	andeq	r6, r1, ip, asr r8
   161f0:	andeq	r6, r1, ip, asr r8
   161f4:	andeq	r6, r1, ip, asr r8
   161f8:	andeq	r6, r1, ip, asr r8
   161fc:	andeq	r6, r1, ip, asr r8
   16200:	andeq	r6, r1, ip, asr r8
   16204:	andeq	r6, r1, ip, asr r8
   16208:	andeq	r6, r1, ip, asr r8
   1620c:	andeq	r6, r1, ip, asr r8
   16210:	andeq	r6, r1, ip, asr r8
   16214:	andeq	r6, r1, ip, asr r8
   16218:	andeq	r6, r1, ip, asr r8
   1621c:	andeq	r6, r1, ip, asr r8
   16220:	andeq	r6, r1, ip, asr r8
   16224:	andeq	r6, r1, ip, asr r8
   16228:	cmp	r3, #42	; 0x2a
   1622c:	bhi	16ca4 <__assert_fail@plt+0x5100>
   16230:	cmp	r3, #40	; 0x28
   16234:	bcs	16314 <__assert_fail@plt+0x4770>
   16238:	cmp	r3, #0
   1623c:	bne	16ca4 <__assert_fail@plt+0x5100>
   16240:	ldr	r5, [r6]
   16244:	cmp	r5, #0
   16248:	beq	16258 <__assert_fail@plt+0x46b4>
   1624c:	ldr	r3, [r5, #4]
   16250:	cmp	r3, #0
   16254:	beq	163c0 <__assert_fail@plt+0x481c>
   16258:	mov	r0, #24
   1625c:	bl	36ecc <__assert_fail@plt+0x25328>
   16260:	mov	r5, r0
   16264:	mov	r1, #0
   16268:	and	r3, r4, #16
   1626c:	movw	r2, #19116	; 0x4aac
   16270:	movt	r2, #1
   16274:	cmp	r3, r1
   16278:	stmib	r5, {r1, r4}
   1627c:	movw	ip, #19152	; 0x4ad0
   16280:	movt	ip, #1
   16284:	movw	r0, #19184	; 0x4af0
   16288:	movt	r0, #1
   1628c:	str	r2, [sp]
   16290:	movw	r3, #19120	; 0x4ab0
   16294:	movt	r3, #1
   16298:	movw	r2, #19416	; 0x4bd8
   1629c:	movt	r2, #1
   162a0:	moveq	r3, ip
   162a4:	moveq	r2, r0
   162a8:	mov	r0, r1
   162ac:	bl	1c93c <__assert_fail@plt+0xad98>
   162b0:	ldr	r3, [r6]
   162b4:	str	r5, [r6]
   162b8:	str	r3, [r5]
   162bc:	str	r0, [r5, #12]
   162c0:	mov	r0, r7
   162c4:	and	r4, r4, #268435458	; 0x10000002
   162c8:	bl	37044 <__assert_fail@plt+0x254a0>
   162cc:	cmp	r4, #268435456	; 0x10000000
   162d0:	mov	r6, r0
   162d4:	beq	163dc <__assert_fail@plt+0x4838>
   162d8:	mov	r1, r6
   162dc:	ldr	r0, [r5, #12]
   162e0:	bl	1d1a4 <__assert_fail@plt+0xb600>
   162e4:	cmp	r6, r0
   162e8:	beq	163a8 <__assert_fail@plt+0x4804>
   162ec:	mov	r0, r6
   162f0:	add	sp, sp, #12
   162f4:	ldrd	r4, [sp]
   162f8:	ldrd	r6, [sp, #8]
   162fc:	ldrd	r8, [sp, #16]
   16300:	ldr	lr, [sp, #24]
   16304:	add	sp, sp, #28
   16308:	b	19610 <__assert_fail@plt+0x7a6c>
   1630c:	cmp	r3, #63	; 0x3f
   16310:	bne	16ca4 <__assert_fail@plt+0x5100>
   16314:	ldr	r5, [r6]
   16318:	cmp	r5, #0
   1631c:	beq	1632c <__assert_fail@plt+0x4788>
   16320:	ldr	r3, [r5, #4]
   16324:	cmp	r3, #1
   16328:	beq	16b4c <__assert_fail@plt+0x4fa8>
   1632c:	mov	r0, #24
   16330:	bl	36ecc <__assert_fail@plt+0x25328>
   16334:	ldr	r3, [r6]
   16338:	mov	r2, #1
   1633c:	mov	r5, r0
   16340:	str	r0, [r6]
   16344:	str	r3, [r0]
   16348:	stmib	r0, {r2, r4}
   1634c:	add	r0, r5, #12
   16350:	ldm	r0, {r0, r3, r9}
   16354:	cmp	r9, r3
   16358:	bne	1637c <__assert_fail@plt+0x47d8>
   1635c:	mov	r1, #36	; 0x24
   16360:	mvn	r3, #0
   16364:	mov	r2, #1
   16368:	str	r1, [sp]
   1636c:	add	r1, r5, #16
   16370:	bl	36dc4 <__assert_fail@plt+0x25220>
   16374:	ldr	r9, [r5, #20]
   16378:	str	r0, [r5, #12]
   1637c:	add	r3, r9, r9, lsl #3
   16380:	add	r2, r9, #1
   16384:	cmp	r8, #0
   16388:	lsl	r3, r3, #2
   1638c:	str	r2, [r5, #20]
   16390:	add	r8, r0, r3
   16394:	str	r4, [r0, r3]
   16398:	bne	16870 <__assert_fail@plt+0x4ccc>
   1639c:	tst	r4, #67108864	; 0x4000000
   163a0:	bne	16bf0 <__assert_fail@plt+0x504c>
   163a4:	str	r7, [r8, #4]
   163a8:	add	sp, sp, #12
   163ac:	ldrd	r4, [sp]
   163b0:	ldrd	r6, [sp, #8]
   163b4:	ldrd	r8, [sp, #16]
   163b8:	add	sp, sp, #24
   163bc:	pop	{pc}		; (ldr pc, [sp], #4)
   163c0:	ldr	r3, [r5, #8]
   163c4:	mov	r2, #24
   163c8:	movt	r2, #24576	; 0x6000
   163cc:	eor	r3, r3, r4
   163d0:	tst	r3, r2
   163d4:	beq	162c0 <__assert_fail@plt+0x471c>
   163d8:	b	16258 <__assert_fail@plt+0x46b4>
   163dc:	mov	r1, r0
   163e0:	b	163f4 <__assert_fail@plt+0x4850>
   163e4:	cmp	r2, #0
   163e8:	strb	r2, [r0], #1
   163ec:	beq	162d8 <__assert_fail@plt+0x4734>
   163f0:	mov	r1, r3
   163f4:	mov	r3, r1
   163f8:	ldrb	r2, [r3], #1
   163fc:	cmp	r2, #92	; 0x5c
   16400:	bne	163e4 <__assert_fail@plt+0x4840>
   16404:	ldrb	ip, [r1, #1]
   16408:	cmp	ip, #0
   1640c:	beq	16854 <__assert_fail@plt+0x4cb0>
   16410:	mov	r2, ip
   16414:	add	r3, r1, #2
   16418:	b	163e4 <__assert_fail@plt+0x4840>
   1641c:	cmp	r8, #0
   16420:	bne	16ae4 <__assert_fail@plt+0x4f40>
   16424:	cmp	r2, #0
   16428:	mov	r2, r1
   1642c:	beq	168dc <__assert_fail@plt+0x4d38>
   16430:	add	r2, r2, #1
   16434:	cmp	r3, #125	; 0x7d
   16438:	ldrls	pc, [pc, r3, lsl #2]
   1643c:	b	168cc <__assert_fail@plt+0x4d28>
   16440:	andeq	r6, r1, r0, asr #4
   16444:	andeq	r6, r1, ip, asr #17
   16448:	andeq	r6, r1, ip, asr #17
   1644c:	andeq	r6, r1, ip, asr #17
   16450:	andeq	r6, r1, ip, asr #17
   16454:	andeq	r6, r1, ip, asr #17
   16458:	andeq	r6, r1, ip, asr #17
   1645c:	andeq	r6, r1, ip, asr #17
   16460:	andeq	r6, r1, ip, asr #17
   16464:	andeq	r6, r1, ip, asr #17
   16468:	andeq	r6, r1, ip, asr #17
   1646c:	andeq	r6, r1, ip, asr #17
   16470:	andeq	r6, r1, ip, asr #17
   16474:	andeq	r6, r1, ip, asr #17
   16478:	andeq	r6, r1, ip, asr #17
   1647c:	andeq	r6, r1, ip, asr #17
   16480:	andeq	r6, r1, ip, asr #17
   16484:	andeq	r6, r1, ip, asr #17
   16488:	andeq	r6, r1, ip, asr #17
   1648c:	andeq	r6, r1, ip, asr #17
   16490:	andeq	r6, r1, ip, asr #17
   16494:	andeq	r6, r1, ip, asr #17
   16498:	andeq	r6, r1, ip, asr #17
   1649c:	andeq	r6, r1, ip, asr #17
   164a0:	andeq	r6, r1, ip, asr #17
   164a4:	andeq	r6, r1, ip, asr #17
   164a8:	andeq	r6, r1, ip, asr #17
   164ac:	andeq	r6, r1, ip, asr #17
   164b0:	andeq	r6, r1, ip, asr #17
   164b4:	andeq	r6, r1, ip, asr #17
   164b8:	andeq	r6, r1, ip, asr #17
   164bc:	andeq	r6, r1, ip, asr #17
   164c0:	andeq	r6, r1, ip, asr #17
   164c4:	andeq	r6, r1, r0, lsr #23
   164c8:	andeq	r6, r1, ip, asr #17
   164cc:	andeq	r6, r1, ip, asr #17
   164d0:	andeq	r6, r1, ip, asr #17
   164d4:	andeq	r6, r1, ip, asr #17
   164d8:	andeq	r6, r1, ip, asr #17
   164dc:	andeq	r6, r1, ip, asr #17
   164e0:	andeq	r6, r1, ip, asr #17
   164e4:	andeq	r6, r1, ip, asr #17
   164e8:	andeq	r6, r1, r4, lsl r3
   164ec:	andeq	r6, r1, r0, lsr #23
   164f0:	andeq	r6, r1, ip, asr #17
   164f4:	andeq	r6, r1, ip, asr #17
   164f8:	andeq	r6, r1, ip, asr #17
   164fc:	andeq	r6, r1, ip, asr #17
   16500:	andeq	r6, r1, ip, asr #17
   16504:	andeq	r6, r1, ip, asr #17
   16508:	andeq	r6, r1, ip, asr #17
   1650c:	andeq	r6, r1, ip, asr #17
   16510:	andeq	r6, r1, ip, asr #17
   16514:	andeq	r6, r1, ip, asr #17
   16518:	andeq	r6, r1, ip, asr #17
   1651c:	andeq	r6, r1, ip, asr #17
   16520:	andeq	r6, r1, ip, asr #17
   16524:	andeq	r6, r1, ip, asr #17
   16528:	andeq	r6, r1, ip, asr #17
   1652c:	andeq	r6, r1, ip, asr #17
   16530:	andeq	r6, r1, ip, asr #17
   16534:	andeq	r6, r1, ip, asr #17
   16538:	andeq	r6, r1, ip, asr #17
   1653c:	andeq	r6, r1, r4, lsl r3
   16540:	andeq	r6, r1, r0, lsr #23
   16544:	andeq	r6, r1, ip, asr #17
   16548:	andeq	r6, r1, ip, asr #17
   1654c:	andeq	r6, r1, ip, asr #17
   16550:	andeq	r6, r1, ip, asr #17
   16554:	andeq	r6, r1, ip, asr #17
   16558:	andeq	r6, r1, ip, asr #17
   1655c:	andeq	r6, r1, ip, asr #17
   16560:	andeq	r6, r1, ip, asr #17
   16564:	andeq	r6, r1, ip, asr #17
   16568:	andeq	r6, r1, ip, asr #17
   1656c:	andeq	r6, r1, ip, asr #17
   16570:	andeq	r6, r1, ip, asr #17
   16574:	andeq	r6, r1, ip, asr #17
   16578:	andeq	r6, r1, ip, asr #17
   1657c:	andeq	r6, r1, ip, asr #17
   16580:	andeq	r6, r1, ip, asr #17
   16584:	andeq	r6, r1, ip, asr #17
   16588:	andeq	r6, r1, ip, asr #17
   1658c:	andeq	r6, r1, ip, asr #17
   16590:	andeq	r6, r1, ip, asr #17
   16594:	andeq	r6, r1, ip, asr #17
   16598:	andeq	r6, r1, ip, asr #17
   1659c:	andeq	r6, r1, ip, asr #17
   165a0:	andeq	r6, r1, ip, asr #17
   165a4:	andeq	r6, r1, ip, asr #17
   165a8:	andeq	r6, r1, ip, asr #17
   165ac:	andeq	r6, r1, r4, lsl r3
   165b0:	andeq	r6, r1, ip, asr #17
   165b4:	andeq	r6, r1, ip, asr #17
   165b8:	andeq	r6, r1, ip, asr #17
   165bc:	andeq	r6, r1, ip, asr #17
   165c0:	andeq	r6, r1, ip, asr #17
   165c4:	andeq	r6, r1, ip, asr #17
   165c8:	andeq	r6, r1, ip, asr #17
   165cc:	andeq	r6, r1, ip, asr #17
   165d0:	andeq	r6, r1, ip, asr #17
   165d4:	andeq	r6, r1, ip, asr #17
   165d8:	andeq	r6, r1, ip, asr #17
   165dc:	andeq	r6, r1, ip, asr #17
   165e0:	andeq	r6, r1, ip, asr #17
   165e4:	andeq	r6, r1, ip, asr #17
   165e8:	andeq	r6, r1, ip, asr #17
   165ec:	andeq	r6, r1, ip, asr #17
   165f0:	andeq	r6, r1, ip, asr #17
   165f4:	andeq	r6, r1, ip, asr #17
   165f8:	andeq	r6, r1, ip, asr #17
   165fc:	andeq	r6, r1, ip, asr #17
   16600:	andeq	r6, r1, ip, asr #17
   16604:	andeq	r6, r1, ip, asr #17
   16608:	andeq	r6, r1, ip, asr #17
   1660c:	andeq	r6, r1, ip, asr #17
   16610:	andeq	r6, r1, ip, asr #17
   16614:	andeq	r6, r1, ip, asr #17
   16618:	andeq	r6, r1, ip, asr #17
   1661c:	andeq	r6, r1, ip, asr #17
   16620:	andeq	r6, r1, ip, asr #17
   16624:	andeq	r6, r1, ip, asr #17
   16628:	andeq	r6, r1, ip, asr #17
   1662c:	andeq	r6, r1, ip, asr #17
   16630:	andeq	r6, r1, ip, asr #17
   16634:	andeq	r6, r1, ip, asr #17
   16638:	ldrb	r3, [r2, #1]
   1663c:	add	r2, r2, #2
   16640:	cmp	r3, #0
   16644:	moveq	r2, r1
   16648:	ldrb	r3, [r2]
   1664c:	add	r1, r2, #1
   16650:	cmp	r3, #125	; 0x7d
   16654:	ldrls	pc, [pc, r3, lsl #2]
   16658:	b	16864 <__assert_fail@plt+0x4cc0>
   1665c:	andeq	r6, r1, r0, asr #4
   16660:	andeq	r6, r1, r4, ror #16
   16664:	andeq	r6, r1, r4, ror #16
   16668:	andeq	r6, r1, r4, ror #16
   1666c:	andeq	r6, r1, r4, ror #16
   16670:	andeq	r6, r1, r4, ror #16
   16674:	andeq	r6, r1, r4, ror #16
   16678:	andeq	r6, r1, r4, ror #16
   1667c:	andeq	r6, r1, r4, ror #16
   16680:	andeq	r6, r1, r4, ror #16
   16684:	andeq	r6, r1, r4, ror #16
   16688:	andeq	r6, r1, r4, ror #16
   1668c:	andeq	r6, r1, r4, ror #16
   16690:	andeq	r6, r1, r4, ror #16
   16694:	andeq	r6, r1, r4, ror #16
   16698:	andeq	r6, r1, r4, ror #16
   1669c:	andeq	r6, r1, r4, ror #16
   166a0:	andeq	r6, r1, r4, ror #16
   166a4:	andeq	r6, r1, r4, ror #16
   166a8:	andeq	r6, r1, r4, ror #16
   166ac:	andeq	r6, r1, r4, ror #16
   166b0:	andeq	r6, r1, r4, ror #16
   166b4:	andeq	r6, r1, r4, ror #16
   166b8:	andeq	r6, r1, r4, ror #16
   166bc:	andeq	r6, r1, r4, ror #16
   166c0:	andeq	r6, r1, r4, ror #16
   166c4:	andeq	r6, r1, r4, ror #16
   166c8:	andeq	r6, r1, r4, ror #16
   166cc:	andeq	r6, r1, r4, ror #16
   166d0:	andeq	r6, r1, r4, ror #16
   166d4:	andeq	r6, r1, r4, ror #16
   166d8:	andeq	r6, r1, r4, ror #16
   166dc:	andeq	r6, r1, r4, ror #16
   166e0:	andeq	r6, r1, r4, ror #16
   166e4:	andeq	r6, r1, r4, ror #16
   166e8:	andeq	r6, r1, r4, ror #16
   166ec:	andeq	r6, r1, r4, ror #16
   166f0:	andeq	r6, r1, r4, ror #16
   166f4:	andeq	r6, r1, r4, ror #16
   166f8:	andeq	r6, r1, r4, ror #16
   166fc:	andeq	r6, r1, r4, ror #16
   16700:	andeq	r6, r1, r4, ror #16
   16704:	andeq	r6, r1, r4, lsl r3
   16708:	andeq	r6, r1, r4, ror #16
   1670c:	andeq	r6, r1, r4, ror #16
   16710:	andeq	r6, r1, r4, ror #16
   16714:	andeq	r6, r1, r4, ror #16
   16718:	andeq	r6, r1, r4, ror #16
   1671c:	andeq	r6, r1, r4, ror #16
   16720:	andeq	r6, r1, r4, ror #16
   16724:	andeq	r6, r1, r4, ror #16
   16728:	andeq	r6, r1, r4, ror #16
   1672c:	andeq	r6, r1, r4, ror #16
   16730:	andeq	r6, r1, r4, ror #16
   16734:	andeq	r6, r1, r4, ror #16
   16738:	andeq	r6, r1, r4, ror #16
   1673c:	andeq	r6, r1, r4, ror #16
   16740:	andeq	r6, r1, r4, ror #16
   16744:	andeq	r6, r1, r4, ror #16
   16748:	andeq	r6, r1, r4, ror #16
   1674c:	andeq	r6, r1, r4, ror #16
   16750:	andeq	r6, r1, r4, ror #16
   16754:	andeq	r6, r1, r4, ror #16
   16758:	andeq	r6, r1, r4, lsl r3
   1675c:	andeq	r6, r1, r4, ror #16
   16760:	andeq	r6, r1, r4, ror #16
   16764:	andeq	r6, r1, r4, ror #16
   16768:	andeq	r6, r1, r4, ror #16
   1676c:	andeq	r6, r1, r4, ror #16
   16770:	andeq	r6, r1, r4, ror #16
   16774:	andeq	r6, r1, r4, ror #16
   16778:	andeq	r6, r1, r4, ror #16
   1677c:	andeq	r6, r1, r4, ror #16
   16780:	andeq	r6, r1, r4, ror #16
   16784:	andeq	r6, r1, r4, ror #16
   16788:	andeq	r6, r1, r4, ror #16
   1678c:	andeq	r6, r1, r4, ror #16
   16790:	andeq	r6, r1, r4, ror #16
   16794:	andeq	r6, r1, r4, ror #16
   16798:	andeq	r6, r1, r4, ror #16
   1679c:	andeq	r6, r1, r4, ror #16
   167a0:	andeq	r6, r1, r4, ror #16
   167a4:	andeq	r6, r1, r4, ror #16
   167a8:	andeq	r6, r1, r4, ror #16
   167ac:	andeq	r6, r1, r4, ror #16
   167b0:	andeq	r6, r1, r4, ror #16
   167b4:	andeq	r6, r1, r4, ror #16
   167b8:	andeq	r6, r1, r4, ror #16
   167bc:	andeq	r6, r1, r4, ror #16
   167c0:	andeq	r6, r1, r4, ror #16
   167c4:	andeq	r6, r1, r4, ror #16
   167c8:	andeq	r6, r1, r4, lsl r3
   167cc:	andeq	r6, r1, r8, lsr r6
   167d0:	andeq	r6, r1, r4, ror #16
   167d4:	andeq	r6, r1, r4, ror #16
   167d8:	andeq	r6, r1, r4, ror #16
   167dc:	andeq	r6, r1, r4, ror #16
   167e0:	andeq	r6, r1, r4, ror #16
   167e4:	andeq	r6, r1, r4, ror #16
   167e8:	andeq	r6, r1, r4, ror #16
   167ec:	andeq	r6, r1, r4, ror #16
   167f0:	andeq	r6, r1, r4, ror #16
   167f4:	andeq	r6, r1, r4, ror #16
   167f8:	andeq	r6, r1, r4, ror #16
   167fc:	andeq	r6, r1, r4, ror #16
   16800:	andeq	r6, r1, r4, ror #16
   16804:	andeq	r6, r1, r4, ror #16
   16808:	andeq	r6, r1, r4, ror #16
   1680c:	andeq	r6, r1, r4, ror #16
   16810:	andeq	r6, r1, r4, ror #16
   16814:	andeq	r6, r1, r4, ror #16
   16818:	andeq	r6, r1, r4, ror #16
   1681c:	andeq	r6, r1, r4, ror #16
   16820:	andeq	r6, r1, r4, ror #16
   16824:	andeq	r6, r1, r4, ror #16
   16828:	andeq	r6, r1, r4, ror #16
   1682c:	andeq	r6, r1, r4, ror #16
   16830:	andeq	r6, r1, r4, ror #16
   16834:	andeq	r6, r1, r4, ror #16
   16838:	andeq	r6, r1, r4, ror #16
   1683c:	andeq	r6, r1, r4, ror #16
   16840:	andeq	r6, r1, r4, ror #16
   16844:	andeq	r6, r1, r4, ror #16
   16848:	andeq	r6, r1, r4, ror #16
   1684c:	andeq	r6, r1, r4, ror #16
   16850:	andeq	r6, r1, r4, ror #16
   16854:	strb	r2, [r0], #1
   16858:	b	163f0 <__assert_fail@plt+0x484c>
   1685c:	ldrb	r3, [r2]
   16860:	b	16020 <__assert_fail@plt+0x447c>
   16864:	ldrb	r3, [r2, #1]
   16868:	mov	r2, r1
   1686c:	b	1664c <__assert_fail@plt+0x4aa8>
   16870:	asr	r3, r4, #3
   16874:	tst	r4, #8
   16878:	and	r4, r3, #2
   1687c:	orr	r4, r4, #9
   16880:	beq	16bc8 <__assert_fail@plt+0x5024>
   16884:	mov	r0, r7
   16888:	bl	11988 <strlen@plt>
   1688c:	subs	r3, r0, #0
   16890:	mov	r6, r0
   16894:	beq	168c4 <__assert_fail@plt+0x4d20>
   16898:	sub	r2, r3, #1
   1689c:	ldrb	r1, [r7, r2]
   168a0:	add	r2, r7, r2
   168a4:	cmp	r1, #47	; 0x2f
   168a8:	beq	168bc <__assert_fail@plt+0x4d18>
   168ac:	b	16c18 <__assert_fail@plt+0x5074>
   168b0:	ldrb	r1, [r2, #-1]!
   168b4:	cmp	r1, #47	; 0x2f
   168b8:	bne	16c14 <__assert_fail@plt+0x5070>
   168bc:	subs	r3, r3, #1
   168c0:	bne	168b0 <__assert_fail@plt+0x4d0c>
   168c4:	str	r9, [r5, #20]
   168c8:	b	163a8 <__assert_fail@plt+0x4804>
   168cc:	ldrb	r3, [r2]
   168d0:	b	16430 <__assert_fail@plt+0x488c>
   168d4:	ldrb	r3, [r2, #1]
   168d8:	mov	r2, r1
   168dc:	add	r1, r2, #1
   168e0:	cmp	r3, #125	; 0x7d
   168e4:	ldrls	pc, [pc, r3, lsl #2]
   168e8:	b	168d4 <__assert_fail@plt+0x4d30>
   168ec:	andeq	r6, r1, r0, asr #4
   168f0:	ldrdeq	r6, [r1], -r4
   168f4:	ldrdeq	r6, [r1], -r4
   168f8:	ldrdeq	r6, [r1], -r4
   168fc:	ldrdeq	r6, [r1], -r4
   16900:	ldrdeq	r6, [r1], -r4
   16904:	ldrdeq	r6, [r1], -r4
   16908:	ldrdeq	r6, [r1], -r4
   1690c:	ldrdeq	r6, [r1], -r4
   16910:	ldrdeq	r6, [r1], -r4
   16914:	ldrdeq	r6, [r1], -r4
   16918:	ldrdeq	r6, [r1], -r4
   1691c:	ldrdeq	r6, [r1], -r4
   16920:	ldrdeq	r6, [r1], -r4
   16924:	ldrdeq	r6, [r1], -r4
   16928:	ldrdeq	r6, [r1], -r4
   1692c:	ldrdeq	r6, [r1], -r4
   16930:	ldrdeq	r6, [r1], -r4
   16934:	ldrdeq	r6, [r1], -r4
   16938:	ldrdeq	r6, [r1], -r4
   1693c:	ldrdeq	r6, [r1], -r4
   16940:	ldrdeq	r6, [r1], -r4
   16944:	ldrdeq	r6, [r1], -r4
   16948:	ldrdeq	r6, [r1], -r4
   1694c:	ldrdeq	r6, [r1], -r4
   16950:	ldrdeq	r6, [r1], -r4
   16954:	ldrdeq	r6, [r1], -r4
   16958:	ldrdeq	r6, [r1], -r4
   1695c:	ldrdeq	r6, [r1], -r4
   16960:	ldrdeq	r6, [r1], -r4
   16964:	ldrdeq	r6, [r1], -r4
   16968:	ldrdeq	r6, [r1], -r4
   1696c:	ldrdeq	r6, [r1], -r4
   16970:	andeq	r6, r1, ip, lsl #23
   16974:	ldrdeq	r6, [r1], -r4
   16978:	ldrdeq	r6, [r1], -r4
   1697c:	ldrdeq	r6, [r1], -r4
   16980:	ldrdeq	r6, [r1], -r4
   16984:	ldrdeq	r6, [r1], -r4
   16988:	ldrdeq	r6, [r1], -r4
   1698c:	ldrdeq	r6, [r1], -r4
   16990:	ldrdeq	r6, [r1], -r4
   16994:	andeq	r6, r1, r4, lsl r3
   16998:	andeq	r6, r1, ip, lsl #23
   1699c:	ldrdeq	r6, [r1], -r4
   169a0:	ldrdeq	r6, [r1], -r4
   169a4:	ldrdeq	r6, [r1], -r4
   169a8:	ldrdeq	r6, [r1], -r4
   169ac:	ldrdeq	r6, [r1], -r4
   169b0:	ldrdeq	r6, [r1], -r4
   169b4:	ldrdeq	r6, [r1], -r4
   169b8:	ldrdeq	r6, [r1], -r4
   169bc:	ldrdeq	r6, [r1], -r4
   169c0:	ldrdeq	r6, [r1], -r4
   169c4:	ldrdeq	r6, [r1], -r4
   169c8:	ldrdeq	r6, [r1], -r4
   169cc:	ldrdeq	r6, [r1], -r4
   169d0:	ldrdeq	r6, [r1], -r4
   169d4:	ldrdeq	r6, [r1], -r4
   169d8:	ldrdeq	r6, [r1], -r4
   169dc:	ldrdeq	r6, [r1], -r4
   169e0:	ldrdeq	r6, [r1], -r4
   169e4:	ldrdeq	r6, [r1], -r4
   169e8:	andeq	r6, r1, r4, lsl r3
   169ec:	andeq	r6, r1, ip, lsl #23
   169f0:	ldrdeq	r6, [r1], -r4
   169f4:	ldrdeq	r6, [r1], -r4
   169f8:	ldrdeq	r6, [r1], -r4
   169fc:	ldrdeq	r6, [r1], -r4
   16a00:	ldrdeq	r6, [r1], -r4
   16a04:	ldrdeq	r6, [r1], -r4
   16a08:	ldrdeq	r6, [r1], -r4
   16a0c:	ldrdeq	r6, [r1], -r4
   16a10:	ldrdeq	r6, [r1], -r4
   16a14:	ldrdeq	r6, [r1], -r4
   16a18:	ldrdeq	r6, [r1], -r4
   16a1c:	ldrdeq	r6, [r1], -r4
   16a20:	ldrdeq	r6, [r1], -r4
   16a24:	ldrdeq	r6, [r1], -r4
   16a28:	ldrdeq	r6, [r1], -r4
   16a2c:	ldrdeq	r6, [r1], -r4
   16a30:	ldrdeq	r6, [r1], -r4
   16a34:	ldrdeq	r6, [r1], -r4
   16a38:	ldrdeq	r6, [r1], -r4
   16a3c:	ldrdeq	r6, [r1], -r4
   16a40:	ldrdeq	r6, [r1], -r4
   16a44:	ldrdeq	r6, [r1], -r4
   16a48:	ldrdeq	r6, [r1], -r4
   16a4c:	ldrdeq	r6, [r1], -r4
   16a50:	ldrdeq	r6, [r1], -r4
   16a54:	ldrdeq	r6, [r1], -r4
   16a58:	andeq	r6, r1, r4, lsl r3
   16a5c:			; <UNDEFINED> instruction: 0x00016bb0
   16a60:	ldrdeq	r6, [r1], -r4
   16a64:	ldrdeq	r6, [r1], -r4
   16a68:	ldrdeq	r6, [r1], -r4
   16a6c:	ldrdeq	r6, [r1], -r4
   16a70:	ldrdeq	r6, [r1], -r4
   16a74:	ldrdeq	r6, [r1], -r4
   16a78:	ldrdeq	r6, [r1], -r4
   16a7c:	ldrdeq	r6, [r1], -r4
   16a80:	ldrdeq	r6, [r1], -r4
   16a84:	ldrdeq	r6, [r1], -r4
   16a88:	ldrdeq	r6, [r1], -r4
   16a8c:	ldrdeq	r6, [r1], -r4
   16a90:	ldrdeq	r6, [r1], -r4
   16a94:	ldrdeq	r6, [r1], -r4
   16a98:	ldrdeq	r6, [r1], -r4
   16a9c:	ldrdeq	r6, [r1], -r4
   16aa0:	ldrdeq	r6, [r1], -r4
   16aa4:	ldrdeq	r6, [r1], -r4
   16aa8:	ldrdeq	r6, [r1], -r4
   16aac:	ldrdeq	r6, [r1], -r4
   16ab0:	ldrdeq	r6, [r1], -r4
   16ab4:	ldrdeq	r6, [r1], -r4
   16ab8:	ldrdeq	r6, [r1], -r4
   16abc:	ldrdeq	r6, [r1], -r4
   16ac0:	ldrdeq	r6, [r1], -r4
   16ac4:	ldrdeq	r6, [r1], -r4
   16ac8:	ldrdeq	r6, [r1], -r4
   16acc:	ldrdeq	r6, [r1], -r4
   16ad0:	ldrdeq	r6, [r1], -r4
   16ad4:	ldrdeq	r6, [r1], -r4
   16ad8:	ldrdeq	r6, [r1], -r4
   16adc:	ldrdeq	r6, [r1], -r4
   16ae0:	ldrdeq	r6, [r1], -r4
   16ae4:	mov	r2, r1
   16ae8:	cmp	r3, #46	; 0x2e
   16aec:	add	r2, r2, #1
   16af0:	beq	16314 <__assert_fail@plt+0x4770>
   16af4:	bls	16b28 <__assert_fail@plt+0x4f84>
   16af8:	cmp	r3, #91	; 0x5b
   16afc:	beq	16314 <__assert_fail@plt+0x4770>
   16b00:	bls	16b60 <__assert_fail@plt+0x4fbc>
   16b04:	cmp	r3, #123	; 0x7b
   16b08:	beq	16314 <__assert_fail@plt+0x4770>
   16b0c:	cmp	r3, #125	; 0x7d
   16b10:	beq	16314 <__assert_fail@plt+0x4770>
   16b14:	ldrb	r3, [r2]
   16b18:	add	r2, r2, #1
   16b1c:	cmp	r3, #46	; 0x2e
   16b20:	beq	16314 <__assert_fail@plt+0x4770>
   16b24:	bhi	16af8 <__assert_fail@plt+0x4f54>
   16b28:	cmp	r3, #42	; 0x2a
   16b2c:	bhi	16b80 <__assert_fail@plt+0x4fdc>
   16b30:	cmp	r3, #40	; 0x28
   16b34:	bcs	16314 <__assert_fail@plt+0x4770>
   16b38:	cmp	r3, #0
   16b3c:	beq	16240 <__assert_fail@plt+0x469c>
   16b40:	cmp	r3, #33	; 0x21
   16b44:	beq	16b70 <__assert_fail@plt+0x4fcc>
   16b48:	b	16b14 <__assert_fail@plt+0x4f70>
   16b4c:	ldr	r3, [r5, #8]
   16b50:	eor	r3, r3, r4
   16b54:	tst	r3, #536870912	; 0x20000000
   16b58:	beq	1634c <__assert_fail@plt+0x47a8>
   16b5c:	b	1632c <__assert_fail@plt+0x4788>
   16b60:	cmp	r3, #63	; 0x3f
   16b64:	beq	16314 <__assert_fail@plt+0x4770>
   16b68:	cmp	r3, #64	; 0x40
   16b6c:	bne	16b14 <__assert_fail@plt+0x4f70>
   16b70:	ldrb	r3, [r2]
   16b74:	cmp	r3, #40	; 0x28
   16b78:	bne	16ae8 <__assert_fail@plt+0x4f44>
   16b7c:	b	16314 <__assert_fail@plt+0x4770>
   16b80:	cmp	r3, #43	; 0x2b
   16b84:	beq	16b70 <__assert_fail@plt+0x4fcc>
   16b88:	b	16b14 <__assert_fail@plt+0x4f70>
   16b8c:	ldrb	r3, [r2, #1]
   16b90:	mov	r2, r1
   16b94:	cmp	r3, #40	; 0x28
   16b98:	bne	168dc <__assert_fail@plt+0x4d38>
   16b9c:	b	16314 <__assert_fail@plt+0x4770>
   16ba0:	ldrb	r3, [r2]
   16ba4:	cmp	r3, #40	; 0x28
   16ba8:	bne	16430 <__assert_fail@plt+0x488c>
   16bac:	b	16314 <__assert_fail@plt+0x4770>
   16bb0:	ldrb	r3, [r2, #1]
   16bb4:	add	r2, r2, #2
   16bb8:	cmp	r3, #0
   16bbc:	moveq	r2, r1
   16bc0:	ldrb	r3, [r2]
   16bc4:	b	168dc <__assert_fail@plt+0x4d38>
   16bc8:	mov	r2, r4
   16bcc:	mov	r1, r7
   16bd0:	add	r0, r8, #4
   16bd4:	bl	353c4 <__assert_fail@plt+0x23820>
   16bd8:	mov	r4, r0
   16bdc:	cmp	r4, #0
   16be0:	beq	163a8 <__assert_fail@plt+0x4804>
   16be4:	ldr	r9, [r5, #20]
   16be8:	sub	r9, r9, #1
   16bec:	b	168c4 <__assert_fail@plt+0x4d20>
   16bf0:	mov	r0, r7
   16bf4:	bl	37044 <__assert_fail@plt+0x254a0>
   16bf8:	mov	r7, r0
   16bfc:	mov	r0, #8
   16c00:	bl	36ad8 <__assert_fail@plt+0x24f34>
   16c04:	ldr	r3, [r6, #4]
   16c08:	str	r0, [r6, #4]
   16c0c:	stm	r0, {r3, r7}
   16c10:	b	163a4 <__assert_fail@plt+0x4800>
   16c14:	mov	r6, r3
   16c18:	add	r0, r3, #7
   16c1c:	bl	36afc <__assert_fail@plt+0x24f58>
   16c20:	mov	r2, r6
   16c24:	mov	r1, r7
   16c28:	mov	r9, r0
   16c2c:	bl	11784 <memcpy@plt>
   16c30:	movw	r3, #49216	; 0xc040
   16c34:	movt	r3, #3
   16c38:	ldrh	lr, [r3, #4]
   16c3c:	mov	r2, r4
   16c40:	add	ip, r9, r6
   16c44:	add	r0, r8, #4
   16c48:	mov	r1, r9
   16c4c:	ldr	r4, [r3]
   16c50:	ldrb	r3, [r3, #6]
   16c54:	str	r4, [r9, r6]
   16c58:	strh	lr, [ip, #4]
   16c5c:	strb	r3, [ip, #6]
   16c60:	bl	353c4 <__assert_fail@plt+0x23820>
   16c64:	mov	r4, r0
   16c68:	mov	r0, r9
   16c6c:	bl	19610 <__assert_fail@plt+0x7a6c>
   16c70:	b	16bdc <__assert_fail@plt+0x5038>
   16c74:	mov	r2, r1
   16c78:	cmp	r3, #46	; 0x2e
   16c7c:	add	r2, r2, #1
   16c80:	beq	16314 <__assert_fail@plt+0x4770>
   16c84:	bls	16228 <__assert_fail@plt+0x4684>
   16c88:	cmp	r3, #91	; 0x5b
   16c8c:	beq	16314 <__assert_fail@plt+0x4770>
   16c90:	bls	1630c <__assert_fail@plt+0x4768>
   16c94:	cmp	r3, #123	; 0x7b
   16c98:	beq	16314 <__assert_fail@plt+0x4770>
   16c9c:	cmp	r3, #125	; 0x7d
   16ca0:	beq	16314 <__assert_fail@plt+0x4770>
   16ca4:	ldrb	r3, [r2]
   16ca8:	add	r2, r2, #1
   16cac:	cmp	r3, #46	; 0x2e
   16cb0:	bne	16c84 <__assert_fail@plt+0x50e0>
   16cb4:	b	16314 <__assert_fail@plt+0x4770>
   16cb8:	mov	ip, #0
   16cbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16cc0:	strd	r6, [sp, #8]
   16cc4:	mov	r4, ip
   16cc8:	mov	r6, ip
   16ccc:	strd	r8, [sp, #16]
   16cd0:	mov	r9, r1
   16cd4:	mov	r8, r2
   16cd8:	strd	sl, [sp, #24]
   16cdc:	mov	fp, #1
   16ce0:	str	lr, [sp, #32]
   16ce4:	sub	sp, sp, #36	; 0x24
   16ce8:	ldrb	r7, [sp, #72]	; 0x48
   16cec:	str	r0, [sp, #8]
   16cf0:	str	r3, [sp, #12]
   16cf4:	str	ip, [sp, #28]
   16cf8:	b	16d04 <__assert_fail@plt+0x5160>
   16cfc:	strb	r5, [r6, r4]
   16d00:	add	r4, r4, #1
   16d04:	mov	r0, r8
   16d08:	bl	11b74 <getc@plt>
   16d0c:	cmn	r0, #1
   16d10:	mov	r5, r0
   16d14:	beq	16d44 <__assert_fail@plt+0x51a0>
   16d18:	ldr	r3, [sp, #28]
   16d1c:	cmp	r3, r4
   16d20:	bne	16cfc <__assert_fail@plt+0x5158>
   16d24:	mov	r0, r6
   16d28:	mvn	r3, #0
   16d2c:	str	fp, [sp]
   16d30:	mov	r2, #1
   16d34:	add	r1, sp, #28
   16d38:	bl	36dc4 <__assert_fail@plt+0x25220>
   16d3c:	mov	r6, r0
   16d40:	b	16cfc <__assert_fail@plt+0x5158>
   16d44:	mov	r0, r8
   16d48:	bl	1176c <ferror@plt>
   16d4c:	mov	r5, r0
   16d50:	bl	119b8 <__errno_location@plt>
   16d54:	cmp	r5, #0
   16d58:	str	r0, [sp, #16]
   16d5c:	streq	r5, [sp, #20]
   16d60:	beq	16d78 <__assert_fail@plt+0x51d4>
   16d64:	ldr	r5, [r0]
   16d68:	adds	r3, r5, #0
   16d6c:	movne	r3, #1
   16d70:	rsb	r3, r3, #0
   16d74:	str	r3, [sp, #20]
   16d78:	mov	r0, r6
   16d7c:	add	r1, r4, #1
   16d80:	bl	36b90 <__assert_fail@plt+0x24fec>
   16d84:	cmp	r4, #0
   16d88:	mov	fp, r0
   16d8c:	strb	r7, [r0, r4]
   16d90:	bne	16dd0 <__assert_fail@plt+0x522c>
   16d94:	mov	r0, #8
   16d98:	bl	36ad8 <__assert_fail@plt+0x24f34>
   16d9c:	ldr	r3, [r9, #4]
   16da0:	str	r0, [r9, #4]
   16da4:	stm	r0, {r3, fp}
   16da8:	ldr	r3, [sp, #16]
   16dac:	ldr	r0, [sp, #20]
   16db0:	str	r5, [r3]
   16db4:	add	sp, sp, #36	; 0x24
   16db8:	ldrd	r4, [sp]
   16dbc:	ldrd	r6, [sp, #8]
   16dc0:	ldrd	r8, [sp, #16]
   16dc4:	ldrd	sl, [sp, #24]
   16dc8:	add	sp, sp, #32
   16dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   16dd0:	add	r3, r0, r4
   16dd4:	mov	r0, #8
   16dd8:	ldrb	r3, [r3, #-1]
   16ddc:	cmp	r3, r7
   16de0:	addne	r4, r4, #1
   16de4:	bl	36ad8 <__assert_fail@plt+0x24f34>
   16de8:	ldr	r3, [r9, #4]
   16dec:	add	r4, fp, r4
   16df0:	cmp	fp, r4
   16df4:	str	r0, [r9, #4]
   16df8:	stm	r0, {r3, fp}
   16dfc:	bcs	16da8 <__assert_fail@plt+0x5204>
   16e00:	mov	r3, r9
   16e04:	lsl	r8, r7, #1
   16e08:	mov	r9, fp
   16e0c:	mov	sl, r3
   16e10:	b	16e20 <__assert_fail@plt+0x527c>
   16e14:	cmp	r4, r6
   16e18:	mov	r9, r6
   16e1c:	beq	16da8 <__assert_fail@plt+0x5204>
   16e20:	mov	r6, r9
   16e24:	ldrb	r3, [r6], #1
   16e28:	cmp	r3, r7
   16e2c:	bne	16e14 <__assert_fail@plt+0x5270>
   16e30:	bl	11964 <__ctype_b_loc@plt>
   16e34:	ldr	ip, [r0]
   16e38:	ldrh	r3, [ip, r8]
   16e3c:	tst	r3, #8192	; 0x2000
   16e40:	bne	16e6c <__assert_fail@plt+0x52c8>
   16e44:	mov	r2, #0
   16e48:	mov	r1, fp
   16e4c:	ldr	ip, [sp, #8]
   16e50:	mov	r0, sl
   16e54:	strb	r2, [r9]
   16e58:	ldr	r2, [sp, #12]
   16e5c:	ldr	r3, [sp, #76]	; 0x4c
   16e60:	blx	ip
   16e64:	mov	fp, r6
   16e68:	b	16e14 <__assert_fail@plt+0x5270>
   16e6c:	cmp	fp, r9
   16e70:	beq	16e64 <__assert_fail@plt+0x52c0>
   16e74:	ldrb	r3, [r6, #-2]
   16e78:	lsl	r3, r3, #1
   16e7c:	ldrh	r3, [ip, r3]
   16e80:	tst	r3, #8192	; 0x2000
   16e84:	beq	16e44 <__assert_fail@plt+0x52a0>
   16e88:	sub	r3, r9, #1
   16e8c:	b	16ea4 <__assert_fail@plt+0x5300>
   16e90:	ldrb	r2, [r3, #-1]!
   16e94:	lsl	r2, r2, #1
   16e98:	ldrh	r2, [ip, r2]
   16e9c:	tst	r2, #8192	; 0x2000
   16ea0:	beq	16e44 <__assert_fail@plt+0x52a0>
   16ea4:	cmp	fp, r3
   16ea8:	mov	r9, r3
   16eac:	bne	16e90 <__assert_fail@plt+0x52ec>
   16eb0:	b	16e64 <__assert_fail@plt+0x52c0>
   16eb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16eb8:	mov	r4, r2
   16ebc:	strd	r6, [sp, #8]
   16ec0:	mov	r7, r1
   16ec4:	movw	r1, #48004	; 0xbb84
   16ec8:	movt	r1, #3
   16ecc:	strd	r8, [sp, #16]
   16ed0:	mov	r8, r0
   16ed4:	strd	sl, [sp, #24]
   16ed8:	mov	r0, r2
   16edc:	str	lr, [sp, #32]
   16ee0:	sub	sp, sp, #44	; 0x2c
   16ee4:	ldrb	r6, [sp, #80]	; 0x50
   16ee8:	str	r3, [sp, #12]
   16eec:	bl	1170c <strcmp@plt>
   16ef0:	cmp	r0, #0
   16ef4:	beq	170e8 <__assert_fail@plt+0x5544>
   16ef8:	mov	r0, r4
   16efc:	movw	r1, #49764	; 0xc264
   16f00:	movt	r1, #3
   16f04:	bl	11afc <fopen64@plt>
   16f08:	subs	sl, r0, #0
   16f0c:	beq	172c0 <__assert_fail@plt+0x571c>
   16f10:	mov	r3, #0
   16f14:	mov	r9, #1
   16f18:	mov	r5, r3
   16f1c:	mov	fp, r3
   16f20:	str	r3, [sp, #36]	; 0x24
   16f24:	b	16f30 <__assert_fail@plt+0x538c>
   16f28:	strb	r4, [fp, r5]
   16f2c:	add	r5, r5, #1
   16f30:	mov	r0, sl
   16f34:	bl	11b74 <getc@plt>
   16f38:	cmn	r0, #1
   16f3c:	mov	r4, r0
   16f40:	beq	16f70 <__assert_fail@plt+0x53cc>
   16f44:	ldr	r3, [sp, #36]	; 0x24
   16f48:	cmp	r3, r5
   16f4c:	bne	16f28 <__assert_fail@plt+0x5384>
   16f50:	mov	r0, fp
   16f54:	mvn	r3, #0
   16f58:	str	r9, [sp]
   16f5c:	mov	r2, #1
   16f60:	add	r1, sp, #36	; 0x24
   16f64:	bl	36dc4 <__assert_fail@plt+0x25220>
   16f68:	mov	fp, r0
   16f6c:	b	16f28 <__assert_fail@plt+0x5384>
   16f70:	mov	r0, sl
   16f74:	bl	1176c <ferror@plt>
   16f78:	mov	r9, r0
   16f7c:	bl	119b8 <__errno_location@plt>
   16f80:	cmp	r9, #0
   16f84:	str	r0, [sp, #24]
   16f88:	streq	r9, [sp, #16]
   16f8c:	beq	16fa4 <__assert_fail@plt+0x5400>
   16f90:	ldr	r9, [r0]
   16f94:	adds	r2, r9, #0
   16f98:	movne	r2, #1
   16f9c:	rsb	r3, r2, #0
   16fa0:	str	r3, [sp, #16]
   16fa4:	mov	r0, fp
   16fa8:	add	r1, r5, #1
   16fac:	bl	36b90 <__assert_fail@plt+0x24fec>
   16fb0:	cmp	r5, #0
   16fb4:	mov	r4, r0
   16fb8:	strb	r6, [r0, r5]
   16fbc:	beq	17290 <__assert_fail@plt+0x56ec>
   16fc0:	add	r3, r0, r5
   16fc4:	mov	r0, #8
   16fc8:	ldrb	r3, [r3, #-1]
   16fcc:	cmp	r3, r6
   16fd0:	addne	r5, r5, #1
   16fd4:	bl	36ad8 <__assert_fail@plt+0x24f34>
   16fd8:	ldr	r3, [r7, #4]
   16fdc:	add	r5, r4, r5
   16fe0:	cmp	r4, r5
   16fe4:	str	r0, [r7, #4]
   16fe8:	stm	r0, {r3, r4}
   16fec:	bcs	17064 <__assert_fail@plt+0x54c0>
   16ff0:	lsl	r3, r6, #1
   16ff4:	mov	fp, r4
   16ff8:	str	r3, [sp, #20]
   16ffc:	str	r9, [sp, #28]
   17000:	b	17010 <__assert_fail@plt+0x546c>
   17004:	cmp	r5, r9
   17008:	mov	r4, r9
   1700c:	beq	17060 <__assert_fail@plt+0x54bc>
   17010:	mov	r9, r4
   17014:	ldrb	r2, [r9], #1
   17018:	cmp	r2, r6
   1701c:	bne	17004 <__assert_fail@plt+0x5460>
   17020:	bl	11964 <__ctype_b_loc@plt>
   17024:	ldr	ip, [r0]
   17028:	ldr	r3, [sp, #20]
   1702c:	ldrh	r2, [ip, r3]
   17030:	tst	r2, #8192	; 0x2000
   17034:	bne	170a0 <__assert_fail@plt+0x54fc>
   17038:	mov	r3, #0
   1703c:	mov	r1, fp
   17040:	ldr	r2, [sp, #12]
   17044:	mov	r0, r7
   17048:	strb	r3, [r4]
   1704c:	blx	r8
   17050:	cmp	r5, r9
   17054:	mov	fp, r9
   17058:	mov	r4, r9
   1705c:	bne	17010 <__assert_fail@plt+0x546c>
   17060:	ldr	r9, [sp, #28]
   17064:	mov	r0, sl
   17068:	ldr	r4, [sp, #24]
   1706c:	str	r9, [r4]
   17070:	bl	172cc <__assert_fail@plt+0x5728>
   17074:	cmp	r0, #0
   17078:	bne	172c0 <__assert_fail@plt+0x571c>
   1707c:	str	r9, [r4]
   17080:	ldr	r0, [sp, #16]
   17084:	add	sp, sp, #44	; 0x2c
   17088:	ldrd	r4, [sp]
   1708c:	ldrd	r6, [sp, #8]
   17090:	ldrd	r8, [sp, #16]
   17094:	ldrd	sl, [sp, #24]
   17098:	add	sp, sp, #32
   1709c:	pop	{pc}		; (ldr pc, [sp], #4)
   170a0:	cmp	fp, r4
   170a4:	beq	17050 <__assert_fail@plt+0x54ac>
   170a8:	ldrb	r2, [r9, #-2]
   170ac:	lsl	r2, r2, #1
   170b0:	ldrh	r2, [ip, r2]
   170b4:	tst	r2, #8192	; 0x2000
   170b8:	beq	17038 <__assert_fail@plt+0x5494>
   170bc:	sub	r2, r4, #1
   170c0:	b	170d8 <__assert_fail@plt+0x5534>
   170c4:	ldrb	r3, [r2, #-1]!
   170c8:	lsl	r3, r3, #1
   170cc:	ldrh	r3, [ip, r3]
   170d0:	tst	r3, #8192	; 0x2000
   170d4:	beq	17038 <__assert_fail@plt+0x5494>
   170d8:	cmp	r2, fp
   170dc:	mov	r4, r2
   170e0:	bne	170c4 <__assert_fail@plt+0x5520>
   170e4:	b	17050 <__assert_fail@plt+0x54ac>
   170e8:	movw	r3, #53816	; 0xd238
   170ec:	movt	r3, #4
   170f0:	str	r0, [sp, #36]	; 0x24
   170f4:	mov	r4, r0
   170f8:	mov	fp, r0
   170fc:	ldr	r9, [r3]
   17100:	mov	sl, #1
   17104:	b	17110 <__assert_fail@plt+0x556c>
   17108:	strb	r5, [fp, r4]
   1710c:	add	r4, r4, #1
   17110:	mov	r0, r9
   17114:	bl	11b74 <getc@plt>
   17118:	cmn	r0, #1
   1711c:	mov	r5, r0
   17120:	beq	17150 <__assert_fail@plt+0x55ac>
   17124:	ldr	r3, [sp, #36]	; 0x24
   17128:	cmp	r3, r4
   1712c:	bne	17108 <__assert_fail@plt+0x5564>
   17130:	mov	r0, fp
   17134:	mvn	r3, #0
   17138:	str	sl, [sp]
   1713c:	mov	r2, #1
   17140:	add	r1, sp, #36	; 0x24
   17144:	bl	36dc4 <__assert_fail@plt+0x25220>
   17148:	mov	fp, r0
   1714c:	b	17108 <__assert_fail@plt+0x5564>
   17150:	mov	r0, r9
   17154:	bl	1176c <ferror@plt>
   17158:	mov	r9, r0
   1715c:	bl	119b8 <__errno_location@plt>
   17160:	cmp	r9, #0
   17164:	str	r0, [sp, #20]
   17168:	streq	r9, [sp, #16]
   1716c:	beq	17184 <__assert_fail@plt+0x55e0>
   17170:	ldr	r9, [r0]
   17174:	adds	r3, r9, #0
   17178:	movne	r3, #1
   1717c:	rsb	r3, r3, #0
   17180:	str	r3, [sp, #16]
   17184:	mov	r0, fp
   17188:	add	r1, r4, #1
   1718c:	bl	36b90 <__assert_fail@plt+0x24fec>
   17190:	cmp	r4, #0
   17194:	mov	r5, r0
   17198:	strb	r6, [r0, r4]
   1719c:	beq	172a8 <__assert_fail@plt+0x5704>
   171a0:	add	r3, r0, r4
   171a4:	mov	r0, #8
   171a8:	ldrb	r3, [r3, #-1]
   171ac:	cmp	r3, r6
   171b0:	addne	r4, r4, #1
   171b4:	bl	36ad8 <__assert_fail@plt+0x24f34>
   171b8:	ldr	r3, [r7, #4]
   171bc:	add	r4, r5, r4
   171c0:	cmp	r5, r4
   171c4:	str	r0, [r7, #4]
   171c8:	stm	r0, {r3, r5}
   171cc:	bcs	1723c <__assert_fail@plt+0x5698>
   171d0:	lsl	sl, r6, #1
   171d4:	mov	fp, r5
   171d8:	str	r9, [sp, #24]
   171dc:	b	171ec <__assert_fail@plt+0x5648>
   171e0:	cmp	r4, r9
   171e4:	mov	r5, r9
   171e8:	beq	17238 <__assert_fail@plt+0x5694>
   171ec:	mov	r9, r5
   171f0:	ldrb	r2, [r9], #1
   171f4:	cmp	r2, r6
   171f8:	bne	171e0 <__assert_fail@plt+0x563c>
   171fc:	bl	11964 <__ctype_b_loc@plt>
   17200:	ldr	ip, [r0]
   17204:	ldrh	r2, [ip, sl]
   17208:	tst	r2, #8192	; 0x2000
   1720c:	bne	17248 <__assert_fail@plt+0x56a4>
   17210:	mov	r3, #0
   17214:	mov	r1, fp
   17218:	ldr	r2, [sp, #12]
   1721c:	mov	r0, r7
   17220:	strb	r3, [r5]
   17224:	blx	r8
   17228:	cmp	r4, r9
   1722c:	mov	fp, r9
   17230:	mov	r5, r9
   17234:	bne	171ec <__assert_fail@plt+0x5648>
   17238:	ldr	r9, [sp, #24]
   1723c:	ldr	r3, [sp, #20]
   17240:	str	r9, [r3]
   17244:	b	17080 <__assert_fail@plt+0x54dc>
   17248:	cmp	fp, r5
   1724c:	beq	17228 <__assert_fail@plt+0x5684>
   17250:	ldrb	r2, [r9, #-2]
   17254:	lsl	r2, r2, #1
   17258:	ldrh	r2, [ip, r2]
   1725c:	tst	r2, #8192	; 0x2000
   17260:	beq	17210 <__assert_fail@plt+0x566c>
   17264:	sub	r2, r5, #1
   17268:	b	17280 <__assert_fail@plt+0x56dc>
   1726c:	ldrb	r3, [r2, #-1]!
   17270:	lsl	r3, r3, #1
   17274:	ldrh	r3, [ip, r3]
   17278:	tst	r3, #8192	; 0x2000
   1727c:	beq	17210 <__assert_fail@plt+0x566c>
   17280:	cmp	fp, r2
   17284:	mov	r5, r2
   17288:	bne	1726c <__assert_fail@plt+0x56c8>
   1728c:	b	17228 <__assert_fail@plt+0x5684>
   17290:	mov	r0, #8
   17294:	bl	36ad8 <__assert_fail@plt+0x24f34>
   17298:	ldr	r3, [r7, #4]
   1729c:	str	r0, [r7, #4]
   172a0:	stm	r0, {r3, r4}
   172a4:	b	17064 <__assert_fail@plt+0x54c0>
   172a8:	mov	r0, #8
   172ac:	bl	36ad8 <__assert_fail@plt+0x24f34>
   172b0:	ldr	r3, [r7, #4]
   172b4:	str	r0, [r7, #4]
   172b8:	stm	r0, {r3, r5}
   172bc:	b	1723c <__assert_fail@plt+0x5698>
   172c0:	mvn	r3, #0
   172c4:	str	r3, [sp, #16]
   172c8:	b	17080 <__assert_fail@plt+0x54dc>
   172cc:	strd	r4, [sp, #-12]!
   172d0:	mov	r4, r0
   172d4:	str	lr, [sp, #8]
   172d8:	sub	sp, sp, #12
   172dc:	bl	11a0c <fileno@plt>
   172e0:	cmp	r0, #0
   172e4:	mov	r0, r4
   172e8:	blt	1736c <__assert_fail@plt+0x57c8>
   172ec:	bl	1191c <__freading@plt>
   172f0:	cmp	r0, #0
   172f4:	bne	17338 <__assert_fail@plt+0x5794>
   172f8:	mov	r0, r4
   172fc:	bl	17380 <__assert_fail@plt+0x57dc>
   17300:	cmp	r0, #0
   17304:	beq	17368 <__assert_fail@plt+0x57c4>
   17308:	bl	119b8 <__errno_location@plt>
   1730c:	mov	r5, r0
   17310:	mov	r0, r4
   17314:	ldr	r4, [r5]
   17318:	bl	11a30 <fclose@plt>
   1731c:	cmp	r4, #0
   17320:	mvnne	r0, #0
   17324:	strne	r4, [r5]
   17328:	add	sp, sp, #12
   1732c:	ldrd	r4, [sp]
   17330:	add	sp, sp, #8
   17334:	pop	{pc}		; (ldr pc, [sp], #4)
   17338:	mov	r0, r4
   1733c:	bl	11a0c <fileno@plt>
   17340:	mov	r1, #1
   17344:	mov	r2, #0
   17348:	mov	r3, #0
   1734c:	str	r1, [sp]
   17350:	bl	11874 <lseek64@plt>
   17354:	mvn	r3, #0
   17358:	mvn	r2, #0
   1735c:	cmp	r1, r3
   17360:	cmpeq	r0, r2
   17364:	bne	172f8 <__assert_fail@plt+0x5754>
   17368:	mov	r0, r4
   1736c:	add	sp, sp, #12
   17370:	ldrd	r4, [sp]
   17374:	ldr	lr, [sp, #8]
   17378:	add	sp, sp, #12
   1737c:	b	11a30 <fclose@plt>
   17380:	str	r4, [sp, #-8]!
   17384:	subs	r4, r0, #0
   17388:	str	lr, [sp, #4]
   1738c:	sub	sp, sp, #8
   17390:	beq	173ac <__assert_fail@plt+0x5808>
   17394:	bl	1191c <__freading@plt>
   17398:	cmp	r0, #0
   1739c:	beq	173ac <__assert_fail@plt+0x5808>
   173a0:	ldr	r3, [r4]
   173a4:	tst	r3, #256	; 0x100
   173a8:	bne	173c4 <__assert_fail@plt+0x5820>
   173ac:	mov	r0, r4
   173b0:	add	sp, sp, #8
   173b4:	ldr	r4, [sp]
   173b8:	ldr	lr, [sp, #4]
   173bc:	add	sp, sp, #8
   173c0:	b	11730 <fflush@plt>
   173c4:	mov	r1, #1
   173c8:	mov	r2, #0
   173cc:	mov	r3, #0
   173d0:	mov	r0, r4
   173d4:	str	r1, [sp]
   173d8:	bl	19880 <__assert_fail@plt+0x7cdc>
   173dc:	b	173ac <__assert_fail@plt+0x5808>
   173e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   173e4:	mov	r4, r2
   173e8:	strd	r6, [sp, #8]
   173ec:	strd	r8, [sp, #16]
   173f0:	strd	sl, [sp, #24]
   173f4:	str	lr, [sp, #32]
   173f8:	sub	sp, sp, #1184	; 0x4a0
   173fc:	sub	sp, sp, #12
   17400:	str	r1, [sp, #48]	; 0x30
   17404:	str	r0, [sp, #88]	; 0x58
   17408:	str	r3, [sp, #96]	; 0x60
   1740c:	str	r2, [sp, #100]	; 0x64
   17410:	bl	119b8 <__errno_location@plt>
   17414:	ldr	r1, [r0]
   17418:	movw	r3, #49420	; 0xc10c
   1741c:	movt	r3, #3
   17420:	str	r0, [sp, #84]	; 0x54
   17424:	ldr	r2, [r4, #40]	; 0x28
   17428:	ldr	ip, [r4, #8]
   1742c:	ldr	r9, [sp, #1236]	; 0x4d4
   17430:	cmp	r2, #0
   17434:	ldr	fp, [sp, #1248]	; 0x4e0
   17438:	str	r1, [sp, #104]	; 0x68
   1743c:	mov	r1, r2
   17440:	moveq	r1, r3
   17444:	cmp	ip, #12
   17448:	str	ip, [sp, #80]	; 0x50
   1744c:	subgt	r3, ip, #12
   17450:	str	r1, [sp, #112]	; 0x70
   17454:	strgt	r3, [sp, #80]	; 0x50
   17458:	bgt	1746c <__assert_fail@plt+0x58c8>
   1745c:	cmp	ip, #0
   17460:	mov	r3, ip
   17464:	moveq	r3, #12
   17468:	str	r3, [sp, #80]	; 0x50
   1746c:	ldr	r3, [sp, #48]	; 0x30
   17470:	ldrb	r0, [r3]
   17474:	cmp	r0, #0
   17478:	beq	18d84 <__assert_fail@plt+0x71e0>
   1747c:	movw	r8, #34079	; 0x851f
   17480:	movt	r8, #20971	; 0x51eb
   17484:	asr	r2, fp, #31
   17488:	movw	r3, #26215	; 0x6667
   1748c:	movt	r3, #26214	; 0x6666
   17490:	smull	r1, r8, r8, fp
   17494:	movw	r4, #46473	; 0xb589
   17498:	movt	r4, #5368	; 0x14f8
   1749c:	smull	r1, r6, r3, fp
   174a0:	movw	ip, #51819	; 0xca6b
   174a4:	movt	ip, #27487	; 0x6b5f
   174a8:	movw	r5, #35757	; 0x8bad
   174ac:	movt	r5, #26843	; 0x68db
   174b0:	smull	r1, r4, r4, fp
   174b4:	rsb	r8, r2, r8, asr #5
   174b8:	movw	r7, #19923	; 0x4dd3
   174bc:	movt	r7, #4194	; 0x1062
   174c0:	smull	sl, ip, ip, fp
   174c4:	movw	lr, #56963	; 0xde83
   174c8:	movt	lr, #17179	; 0x431b
   174cc:	smull	r1, r5, r5, fp
   174d0:	movw	sl, #46021	; 0xb3c5
   174d4:	movt	sl, #37282	; 0x91a2
   174d8:	asr	r6, r6, #2
   174dc:	str	r8, [sp, #44]	; 0x2c
   174e0:	smull	r1, r7, r7, fp
   174e4:	str	sl, [sp, #116]	; 0x74
   174e8:	movw	sl, #52429	; 0xcccd
   174ec:	movt	sl, #52428	; 0xcccc
   174f0:	sub	r8, r6, r2
   174f4:	rsb	r6, r2, r4, asr #13
   174f8:	rsb	r4, r2, ip, asr #22
   174fc:	ldr	ip, [sp, #44]	; 0x2c
   17500:	rsb	r5, r2, r5, asr #12
   17504:	rsb	r7, r2, r7, asr #6
   17508:	str	r4, [sp, #28]
   1750c:	smull	r1, lr, lr, fp
   17510:	movw	r1, #15241	; 0x3b89
   17514:	movt	r1, #21990	; 0x55e6
   17518:	str	r6, [sp, #36]	; 0x24
   1751c:	str	r5, [sp, #40]	; 0x28
   17520:	smull	r5, r6, r3, ip
   17524:	str	r8, [sp, #52]	; 0x34
   17528:	rsb	lr, r2, lr, asr #18
   1752c:	str	r8, [sp, #76]	; 0x4c
   17530:	smull	r5, r8, r3, r8
   17534:	smull	r4, r5, r3, r7
   17538:	ldr	r4, [sp, #40]	; 0x28
   1753c:	str	lr, [sp, #32]
   17540:	smull	lr, r1, r1, fp
   17544:	str	r7, [sp, #72]	; 0x48
   17548:	str	sl, [sp, #108]	; 0x6c
   1754c:	mov	sl, #0
   17550:	rsb	r2, r2, r1, asr #25
   17554:	smull	ip, r4, r3, r4
   17558:	ldr	ip, [sp, #36]	; 0x24
   1755c:	str	r2, [sp, #92]	; 0x5c
   17560:	ldr	r2, [sp, #44]	; 0x2c
   17564:	smull	r7, lr, r3, ip
   17568:	ldr	ip, [sp, #32]
   1756c:	asr	r2, r2, #31
   17570:	smull	r7, ip, r3, ip
   17574:	ldr	r7, [sp, #28]
   17578:	rsb	r6, r2, r6, asr #2
   1757c:	ldr	r2, [sp, #40]	; 0x28
   17580:	add	r6, r6, r6, lsl #2
   17584:	smull	r7, r3, r3, r7
   17588:	ldr	r7, [sp, #76]	; 0x4c
   1758c:	asr	r2, r2, #31
   17590:	rsb	r4, r2, r4, asr #2
   17594:	asr	r7, r7, #31
   17598:	rsb	r8, r7, r8, asr #2
   1759c:	ldr	r7, [sp, #72]	; 0x48
   175a0:	asr	r1, r7, #31
   175a4:	add	r7, r8, r8, lsl #2
   175a8:	rsb	r5, r1, r5, asr #2
   175ac:	strd	r4, [sp, #64]	; 0x40
   175b0:	ldrd	r4, [sp, #32]
   175b4:	asr	r1, r5, #31
   175b8:	asr	r2, r4, #31
   175bc:	rsb	lr, r1, lr, asr #2
   175c0:	rsb	r2, r2, ip, asr #2
   175c4:	ldr	ip, [sp, #92]	; 0x5c
   175c8:	str	lr, [sp, #60]	; 0x3c
   175cc:	ldr	lr, [sp, #28]
   175d0:	str	r2, [sp, #56]	; 0x38
   175d4:	movw	r2, #26215	; 0x6667
   175d8:	movt	r2, #26214	; 0x6666
   175dc:	asr	r1, lr, #31
   175e0:	rsb	r3, r1, r3, asr #2
   175e4:	smull	r1, r2, r2, ip
   175e8:	ldr	ip, [sp, #52]	; 0x34
   175ec:	add	r3, r3, r3, lsl #2
   175f0:	asr	r2, r2, #2
   175f4:	add	r1, ip, ip, lsl #2
   175f8:	ldr	ip, [sp, #68]	; 0x44
   175fc:	sub	r8, fp, r1, lsl #1
   17600:	ldr	r1, [sp, #44]	; 0x2c
   17604:	add	r5, ip, ip, lsl #2
   17608:	ldr	ip, [sp, #64]	; 0x40
   1760c:	sub	r6, r1, r6, lsl #1
   17610:	add	r4, ip, ip, lsl #2
   17614:	ldr	ip, [sp, #60]	; 0x3c
   17618:	add	lr, ip, ip, lsl #2
   1761c:	ldr	ip, [sp, #56]	; 0x38
   17620:	ldr	r1, [sp, #72]	; 0x48
   17624:	str	r8, [sp, #52]	; 0x34
   17628:	ldr	r8, [sp, #76]	; 0x4c
   1762c:	add	ip, ip, ip, lsl #2
   17630:	str	r2, [sp, #124]	; 0x7c
   17634:	str	r6, [sp, #128]	; 0x80
   17638:	sub	r1, r1, r5, lsl #1
   1763c:	ldr	r5, [sp, #36]	; 0x24
   17640:	sub	r8, r8, r7, lsl #1
   17644:	ldr	r7, [sp, #48]	; 0x30
   17648:	str	r1, [sp, #68]	; 0x44
   1764c:	ldr	r1, [sp, #40]	; 0x28
   17650:	str	r8, [sp, #132]	; 0x84
   17654:	str	fp, [sp, #1248]	; 0x4e0
   17658:	sub	r1, r1, r4, lsl #1
   1765c:	ldr	r4, [sp, #32]
   17660:	str	r1, [sp, #64]	; 0x40
   17664:	sub	r1, r5, lr, lsl #1
   17668:	ldr	lr, [sp, #28]
   1766c:	str	r1, [sp, #60]	; 0x3c
   17670:	sub	r1, r4, ip, lsl #1
   17674:	ldr	r5, [sp, #88]	; 0x58
   17678:	str	r1, [sp, #56]	; 0x38
   1767c:	sub	r1, lr, r3, lsl #1
   17680:	str	r1, [sp, #120]	; 0x78
   17684:	cmp	r0, #37	; 0x25
   17688:	beq	17768 <__assert_fail@plt+0x5bc4>
   1768c:	cmp	r9, #0
   17690:	blt	17714 <__assert_fail@plt+0x5b70>
   17694:	cmp	r9, #1
   17698:	mvn	r3, sl
   1769c:	movcs	r4, r9
   176a0:	movcc	r4, #1
   176a4:	cmp	r4, r3
   176a8:	bcs	1771c <__assert_fail@plt+0x5b78>
   176ac:	cmp	r5, #0
   176b0:	beq	176e8 <__assert_fail@plt+0x5b44>
   176b4:	cmp	r9, #1
   176b8:	ble	1775c <__assert_fail@plt+0x5bb8>
   176bc:	sub	r9, r9, #1
   176c0:	mov	r6, #0
   176c4:	add	r6, r6, #1
   176c8:	mov	r1, r5
   176cc:	mov	r0, #32
   176d0:	bl	11a90 <fputc@plt>
   176d4:	cmp	r9, r6
   176d8:	bne	176c4 <__assert_fail@plt+0x5b20>
   176dc:	ldrb	r0, [r7]
   176e0:	mov	r1, r5
   176e4:	bl	11a90 <fputc@plt>
   176e8:	add	sl, sl, r4
   176ec:	mov	r4, r7
   176f0:	ldrb	r0, [r4, #1]
   176f4:	add	r7, r4, #1
   176f8:	mvn	r9, #0
   176fc:	cmp	r0, #0
   17700:	bne	17684 <__assert_fail@plt+0x5ae0>
   17704:	ldr	r3, [sp, #84]	; 0x54
   17708:	ldr	r2, [sp, #104]	; 0x68
   1770c:	str	r2, [r3]
   17710:	b	1772c <__assert_fail@plt+0x5b88>
   17714:	cmn	sl, #3
   17718:	bls	17750 <__assert_fail@plt+0x5bac>
   1771c:	ldr	r2, [sp, #84]	; 0x54
   17720:	mov	r3, #34	; 0x22
   17724:	str	r3, [r2]
   17728:	mov	sl, #0
   1772c:	mov	r0, sl
   17730:	add	sp, sp, #1184	; 0x4a0
   17734:	add	sp, sp, #12
   17738:	ldrd	r4, [sp]
   1773c:	ldrd	r6, [sp, #8]
   17740:	ldrd	r8, [sp, #16]
   17744:	ldrd	sl, [sp, #24]
   17748:	add	sp, sp, #32
   1774c:	pop	{pc}		; (ldr pc, [sp], #4)
   17750:	cmp	r5, #0
   17754:	mov	r4, #1
   17758:	beq	176e8 <__assert_fail@plt+0x5b44>
   1775c:	mov	r1, r5
   17760:	bl	11a90 <fputc@plt>
   17764:	b	176e8 <__assert_fail@plt+0x5b44>
   17768:	ldr	r3, [sp, #96]	; 0x60
   1776c:	mov	r8, #0
   17770:	mov	r4, r7
   17774:	mov	fp, r8
   17778:	str	r3, [sp, #48]	; 0x30
   1777c:	ldrb	lr, [r4, #1]!
   17780:	sub	r3, lr, #35	; 0x23
   17784:	mov	r6, lr
   17788:	cmp	r3, #60	; 0x3c
   1778c:	ldrls	pc, [pc, r3, lsl #2]
   17790:	b	178a4 <__assert_fail@plt+0x5d00>
   17794:	muleq	r1, ip, r8
   17798:	andeq	r7, r1, r4, lsr #17
   1779c:	andeq	r7, r1, r4, lsr #17
   177a0:	andeq	r7, r1, r4, lsr #17
   177a4:	andeq	r7, r1, r4, lsr #17
   177a8:	andeq	r7, r1, r4, lsr #17
   177ac:	andeq	r7, r1, r4, lsr #17
   177b0:	andeq	r7, r1, r4, lsr #17
   177b4:	muleq	r1, r4, r8
   177b8:	andeq	r7, r1, r4, lsr #17
   177bc:	muleq	r1, r4, r8
   177c0:	andeq	r7, r1, r4, lsr #17
   177c4:	andeq	r7, r1, r4, lsr #17
   177c8:	muleq	r1, r4, r8
   177cc:	andeq	r7, r1, r4, lsr #17
   177d0:	andeq	r7, r1, r4, lsr #17
   177d4:	andeq	r7, r1, r4, lsr #17
   177d8:	andeq	r7, r1, r4, lsr #17
   177dc:	andeq	r7, r1, r4, lsr #17
   177e0:	andeq	r7, r1, r4, lsr #17
   177e4:	andeq	r7, r1, r4, lsr #17
   177e8:	andeq	r7, r1, r4, lsr #17
   177ec:	andeq	r7, r1, r4, lsr #17
   177f0:	andeq	r7, r1, r4, lsr #17
   177f4:	andeq	r7, r1, r4, lsr #17
   177f8:	andeq	r7, r1, r4, lsr #17
   177fc:	andeq	r7, r1, r4, lsr #17
   17800:	andeq	r7, r1, r4, lsr #17
   17804:	andeq	r7, r1, r4, lsr #17
   17808:	andeq	r7, r1, r4, lsr #17
   1780c:	andeq	r7, r1, r4, lsr #17
   17810:	andeq	r7, r1, r4, lsr #17
   17814:	andeq	r7, r1, r4, lsr #17
   17818:	andeq	r7, r1, r4, lsr #17
   1781c:	andeq	r7, r1, r4, lsr #17
   17820:	andeq	r7, r1, r4, lsr #17
   17824:	andeq	r7, r1, r4, lsr #17
   17828:	andeq	r7, r1, r4, lsr #17
   1782c:	andeq	r7, r1, r4, lsr #17
   17830:	andeq	r7, r1, r4, lsr #17
   17834:	andeq	r7, r1, r4, lsr #17
   17838:	andeq	r7, r1, r4, lsr #17
   1783c:	andeq	r7, r1, r4, lsr #17
   17840:	andeq	r7, r1, r4, lsr #17
   17844:	andeq	r7, r1, r4, lsr #17
   17848:	andeq	r7, r1, r4, lsr #17
   1784c:	andeq	r7, r1, r4, lsr #17
   17850:	andeq	r7, r1, r4, lsr #17
   17854:	andeq	r7, r1, r4, lsr #17
   17858:	andeq	r7, r1, r4, lsr #17
   1785c:	andeq	r7, r1, r4, lsr #17
   17860:	andeq	r7, r1, r4, lsr #17
   17864:	andeq	r7, r1, r4, lsr #17
   17868:	andeq	r7, r1, r4, lsr #17
   1786c:	andeq	r7, r1, r4, lsr #17
   17870:	andeq	r7, r1, r4, lsr #17
   17874:	andeq	r7, r1, r4, lsr #17
   17878:	andeq	r7, r1, r4, lsr #17
   1787c:	andeq	r7, r1, r4, lsr #17
   17880:	andeq	r7, r1, r8, lsl #17
   17884:	muleq	r1, r4, r8
   17888:	mov	r3, #1
   1788c:	str	r3, [sp, #48]	; 0x30
   17890:	b	1777c <__assert_fail@plt+0x5bd8>
   17894:	mov	fp, lr
   17898:	b	1777c <__assert_fail@plt+0x5bd8>
   1789c:	mov	r8, #1
   178a0:	b	1777c <__assert_fail@plt+0x5bd8>
   178a4:	sub	r3, lr, #48	; 0x30
   178a8:	cmp	r3, #9
   178ac:	bls	17bb8 <__assert_fail@plt+0x6014>
   178b0:	cmp	lr, #69	; 0x45
   178b4:	beq	17ba8 <__assert_fail@plt+0x6004>
   178b8:	cmp	lr, #79	; 0x4f
   178bc:	movne	r6, #0
   178c0:	movne	ip, r6
   178c4:	beq	17ba8 <__assert_fail@plt+0x6004>
   178c8:	cmp	lr, #122	; 0x7a
   178cc:	ldrls	pc, [pc, lr, lsl #2]
   178d0:	b	17ac4 <__assert_fail@plt+0x5f20>
   178d4:	andeq	r7, r1, r0, asr #21
   178d8:	andeq	r7, r1, r4, asr #21
   178dc:	andeq	r7, r1, r4, asr #21
   178e0:	andeq	r7, r1, r4, asr #21
   178e4:	andeq	r7, r1, r4, asr #21
   178e8:	andeq	r7, r1, r4, asr #21
   178ec:	andeq	r7, r1, r4, asr #21
   178f0:	andeq	r7, r1, r4, asr #21
   178f4:	andeq	r7, r1, r4, asr #21
   178f8:	andeq	r7, r1, r4, asr #21
   178fc:	andeq	r7, r1, r4, asr #21
   17900:	andeq	r7, r1, r4, asr #21
   17904:	andeq	r7, r1, r4, asr #21
   17908:	andeq	r7, r1, r4, asr #21
   1790c:	andeq	r7, r1, r4, asr #21
   17910:	andeq	r7, r1, r4, asr #21
   17914:	andeq	r7, r1, r4, asr #21
   17918:	andeq	r7, r1, r4, asr #21
   1791c:	andeq	r7, r1, r4, asr #21
   17920:	andeq	r7, r1, r4, asr #21
   17924:	andeq	r7, r1, r4, asr #21
   17928:	andeq	r7, r1, r4, asr #21
   1792c:	andeq	r7, r1, r4, asr #21
   17930:	andeq	r7, r1, r4, asr #21
   17934:	andeq	r7, r1, r4, asr #21
   17938:	andeq	r7, r1, r4, asr #21
   1793c:	andeq	r7, r1, r4, asr #21
   17940:	andeq	r7, r1, r4, asr #21
   17944:	andeq	r7, r1, r4, asr #21
   17948:	andeq	r7, r1, r4, asr #21
   1794c:	andeq	r7, r1, r4, asr #21
   17950:	andeq	r7, r1, r4, asr #21
   17954:	andeq	r7, r1, r4, asr #21
   17958:	andeq	r7, r1, r4, asr #21
   1795c:	andeq	r7, r1, r4, asr #21
   17960:	andeq	r7, r1, r4, asr #21
   17964:	andeq	r7, r1, r4, asr #21
   17968:	muleq	r1, r4, r2
   1796c:	andeq	r7, r1, r4, asr #21
   17970:	andeq	r7, r1, r4, asr #21
   17974:	andeq	r7, r1, r4, asr #21
   17978:	andeq	r7, r1, r4, asr #21
   1797c:	andeq	r7, r1, r4, asr #21
   17980:	andeq	r7, r1, r4, asr #21
   17984:	andeq	r7, r1, r4, asr #21
   17988:	andeq	r7, r1, r4, asr #21
   1798c:	andeq	r7, r1, r4, asr #21
   17990:	andeq	r7, r1, r4, asr #21
   17994:	andeq	r7, r1, r4, asr #21
   17998:	andeq	r7, r1, r4, asr #21
   1799c:	andeq	r7, r1, r4, asr #21
   179a0:	andeq	r7, r1, r4, asr #21
   179a4:	andeq	r7, r1, r4, asr #21
   179a8:	andeq	r7, r1, r4, asr #21
   179ac:	andeq	r7, r1, r4, asr #21
   179b0:	andeq	r7, r1, r4, asr #21
   179b4:	andeq	r7, r1, r4, asr #21
   179b8:	andeq	r7, r1, r4, asr #21
   179bc:	andeq	r8, r1, r8, lsl #24
   179c0:	andeq	r7, r1, r4, asr #21
   179c4:	andeq	r7, r1, r4, asr #21
   179c8:	andeq	r7, r1, r4, asr #21
   179cc:	andeq	r7, r1, r4, asr #21
   179d0:	andeq	r7, r1, r4, asr #21
   179d4:	andeq	r7, r1, r4, asr #21
   179d8:	andeq	r7, r1, r4, lsr #26
   179dc:	andeq	r8, r1, r0, ror r2
   179e0:	ldrdeq	r8, [r1], -ip
   179e4:	andeq	r8, r1, ip, ror #16
   179e8:	andeq	r7, r1, r4, asr #21
   179ec:	andeq	r8, r1, ip, lsl sl
   179f0:	andeq	r8, r1, ip, asr sl
   179f4:	muleq	r1, r4, r8
   179f8:			; <UNDEFINED> instruction: 0x000188b0
   179fc:	andeq	r7, r1, r4, asr #21
   17a00:	andeq	r7, r1, r4, asr #21
   17a04:	andeq	r7, r1, r4, asr #21
   17a08:	andeq	r8, r1, r8, asr #17
   17a0c:	andeq	r8, r1, r4, ror #17
   17a10:	andeq	r7, r1, r4, asr #21
   17a14:	strdeq	r8, [r1], -r0
   17a18:	andeq	r7, r1, r4, asr #21
   17a1c:	strdeq	r8, [r1], -ip
   17a20:	andeq	r8, r1, r4, asr #11
   17a24:	andeq	r8, r1, r0, ror #11
   17a28:	ldrdeq	r8, [r1], -r4
   17a2c:	andeq	r8, r1, ip, asr sl
   17a30:	andeq	r8, r1, r4, lsl r7
   17a34:	strdeq	r7, [r1], -r8
   17a38:	andeq	r8, r1, r0, ror r7
   17a3c:	andeq	r7, r1, r0, lsr #28
   17a40:	andeq	r7, r1, r4, asr #21
   17a44:	andeq	r7, r1, r4, asr #21
   17a48:	andeq	r7, r1, r4, asr #21
   17a4c:	andeq	r7, r1, r4, asr #21
   17a50:	andeq	r7, r1, r4, asr #21
   17a54:	andeq	r7, r1, r4, asr #21
   17a58:	andeq	r7, r1, r4, lsr #26
   17a5c:	ldrdeq	r7, [r1], -r0
   17a60:	strdeq	r7, [r1], -r8
   17a64:	andeq	r8, r1, r4, lsr r2
   17a68:	andeq	r8, r1, r0, lsl #11
   17a6c:	andeq	r7, r1, r4, asr #21
   17a70:	andeq	r8, r1, ip, asr sl
   17a74:	ldrdeq	r7, [r1], -r0
   17a78:	andeq	r7, r1, r4, asr #21
   17a7c:	muleq	r1, r4, r5
   17a80:			; <UNDEFINED> instruction: 0x000185b0
   17a84:	andeq	r8, r1, ip, ror r3
   17a88:	muleq	r1, ip, r3
   17a8c:	ldrdeq	r8, [r1], -ip
   17a90:	andeq	r7, r1, r4, asr #21
   17a94:	andeq	r8, r1, r8, ror r4
   17a98:	strdeq	r7, [r1], -r0
   17a9c:	andeq	r7, r1, r0, lsl #24
   17aa0:	andeq	r8, r1, r0, lsr #9
   17aa4:	andeq	r7, r1, r8, asr sp
   17aa8:	andeq	r8, r1, r4, lsr #6
   17aac:	andeq	r7, r1, r4, asr #21
   17ab0:	andeq	r8, r1, r0, ror #6
   17ab4:	strdeq	r7, [r1], -r8
   17ab8:	andeq	r7, r1, ip, ror #31
   17abc:	andeq	r7, r1, r4, lsl #30
   17ac0:	sub	r4, r4, #1
   17ac4:	mvn	r3, sl
   17ac8:	str	r3, [sp, #136]	; 0x88
   17acc:	subs	r6, fp, #45	; 0x2d
   17ad0:	sub	r8, r4, r7
   17ad4:	movne	r6, #1
   17ad8:	cmp	r9, #0
   17adc:	movlt	r6, #0
   17ae0:	add	r8, r8, #1
   17ae4:	cmp	r6, #0
   17ae8:	bne	18d04 <__assert_fail@plt+0x7160>
   17aec:	mov	r9, r6
   17af0:	mov	r3, r8
   17af4:	str	r8, [sp, #88]	; 0x58
   17af8:	ldr	r2, [sp, #136]	; 0x88
   17afc:	cmp	r3, r2
   17b00:	bcs	1771c <__assert_fail@plt+0x5b78>
   17b04:	cmp	r5, #0
   17b08:	beq	17b9c <__assert_fail@plt+0x5ff8>
   17b0c:	cmp	r8, r9
   17b10:	bcs	17b48 <__assert_fail@plt+0x5fa4>
   17b14:	cmp	fp, #43	; 0x2b
   17b18:	cmpne	fp, #48	; 0x30
   17b1c:	sub	r6, r9, r8
   17b20:	moveq	r3, #1
   17b24:	movne	r3, #0
   17b28:	bne	18d8c <__assert_fail@plt+0x71e8>
   17b2c:	mov	r9, #0
   17b30:	add	r9, r9, #1
   17b34:	mov	r1, r5
   17b38:	mov	r0, #48	; 0x30
   17b3c:	bl	11a90 <fputc@plt>
   17b40:	cmp	r6, r9
   17b44:	bne	17b30 <__assert_fail@plt+0x5f8c>
   17b48:	ldr	r3, [sp, #48]	; 0x30
   17b4c:	cmp	r3, #0
   17b50:	beq	17b88 <__assert_fail@plt+0x5fe4>
   17b54:	cmp	r8, #0
   17b58:	beq	17b9c <__assert_fail@plt+0x5ff8>
   17b5c:	bl	11934 <__ctype_toupper_loc@plt>
   17b60:	add	r8, r7, r8
   17b64:	mov	r6, r0
   17b68:	ldrb	r2, [r7], #1
   17b6c:	mov	r1, r5
   17b70:	ldr	r3, [r6]
   17b74:	ldr	r0, [r3, r2, lsl #2]
   17b78:	bl	11a90 <fputc@plt>
   17b7c:	cmp	r7, r8
   17b80:	bne	17b68 <__assert_fail@plt+0x5fc4>
   17b84:	b	17b9c <__assert_fail@plt+0x5ff8>
   17b88:	mov	r1, r8
   17b8c:	mov	r0, r7
   17b90:	mov	r3, r5
   17b94:	mov	r2, #1
   17b98:	bl	11868 <fwrite@plt>
   17b9c:	ldr	r3, [sp, #88]	; 0x58
   17ba0:	add	sl, sl, r3
   17ba4:	b	176f0 <__assert_fail@plt+0x5b4c>
   17ba8:	mov	ip, lr
   17bac:	add	r4, r4, #1
   17bb0:	ldrb	lr, [r4]
   17bb4:	b	178c8 <__assert_fail@plt+0x5d24>
   17bb8:	mov	r9, #0
   17bbc:	mov	r1, #10
   17bc0:	smull	r2, r3, r9, r1
   17bc4:	mvn	r9, #-2147483648	; 0x80000000
   17bc8:	cmp	r3, r2, asr #31
   17bcc:	bne	17be0 <__assert_fail@plt+0x603c>
   17bd0:	ldrb	r3, [r4]
   17bd4:	sub	r9, r3, #48	; 0x30
   17bd8:	adds	r9, r2, r9
   17bdc:	mvnvs	r9, #-2147483648	; 0x80000000
   17be0:	ldrb	lr, [r4, #1]!
   17be4:	sub	r3, lr, #48	; 0x30
   17be8:	cmp	r3, #9
   17bec:	bls	17bc0 <__assert_fail@plt+0x601c>
   17bf0:	mov	r6, lr
   17bf4:	b	178b0 <__assert_fail@plt+0x5d0c>
   17bf8:	cmp	r6, #79	; 0x4f
   17bfc:	beq	17ac4 <__assert_fail@plt+0x5f20>
   17c00:	mov	r3, #0
   17c04:	str	r3, [sp, #88]	; 0x58
   17c08:	add	r2, sp, #152	; 0x98
   17c0c:	movw	r3, #9504	; 0x2520
   17c10:	cmp	r6, #0
   17c14:	addeq	r1, r2, #2
   17c18:	strh	r3, [r2]
   17c1c:	bne	17e14 <__assert_fail@plt+0x6270>
   17c20:	mov	ip, #0
   17c24:	add	r0, sp, #168	; 0xa8
   17c28:	strb	lr, [r1]
   17c2c:	ldr	r3, [sp, #100]	; 0x64
   17c30:	strb	ip, [r1, #1]
   17c34:	mov	r1, #1024	; 0x400
   17c38:	bl	11910 <strftime@plt>
   17c3c:	subs	r7, r0, #0
   17c40:	beq	176f0 <__assert_fail@plt+0x5b4c>
   17c44:	subs	r6, fp, #45	; 0x2d
   17c48:	sub	r8, r7, #1
   17c4c:	movne	r6, #1
   17c50:	cmp	r9, #0
   17c54:	movlt	r6, #0
   17c58:	cmp	r6, #0
   17c5c:	moveq	r9, r8
   17c60:	beq	17c74 <__assert_fail@plt+0x60d0>
   17c64:	mov	r6, r9
   17c68:	cmp	r8, r9
   17c6c:	movcs	r9, r8
   17c70:	movcc	r9, r6
   17c74:	mvn	r3, sl
   17c78:	cmp	r3, r9
   17c7c:	bls	1771c <__assert_fail@plt+0x5b78>
   17c80:	cmp	r5, #0
   17c84:	beq	17d1c <__assert_fail@plt+0x6178>
   17c88:	cmp	r8, r6
   17c8c:	bcs	17ccc <__assert_fail@plt+0x6128>
   17c90:	cmp	fp, #43	; 0x2b
   17c94:	cmpne	fp, #48	; 0x30
   17c98:	sub	r6, r6, r8
   17c9c:	moveq	r3, #1
   17ca0:	movne	r3, #0
   17ca4:	beq	18e18 <__assert_fail@plt+0x7274>
   17ca8:	cmp	r6, #0
   17cac:	movne	fp, r3
   17cb0:	beq	17ccc <__assert_fail@plt+0x6128>
   17cb4:	add	fp, fp, #1
   17cb8:	mov	r1, r5
   17cbc:	mov	r0, #32
   17cc0:	bl	11a90 <fputc@plt>
   17cc4:	cmp	r6, fp
   17cc8:	bne	17cb4 <__assert_fail@plt+0x6110>
   17ccc:	ldr	r3, [sp, #88]	; 0x58
   17cd0:	cmp	r3, #0
   17cd4:	bne	18dc4 <__assert_fail@plt+0x7220>
   17cd8:	ldr	r3, [sp, #48]	; 0x30
   17cdc:	cmp	r3, #0
   17ce0:	beq	18dac <__assert_fail@plt+0x7208>
   17ce4:	cmp	r8, #0
   17ce8:	beq	17d1c <__assert_fail@plt+0x6178>
   17cec:	add	r3, sp, #168	; 0xa8
   17cf0:	add	r7, r3, r7
   17cf4:	add	r6, r3, #1
   17cf8:	bl	11934 <__ctype_toupper_loc@plt>
   17cfc:	mov	r8, r0
   17d00:	ldrb	r2, [r6], #1
   17d04:	mov	r1, r5
   17d08:	ldr	r3, [r8]
   17d0c:	ldr	r0, [r3, r2, lsl #2]
   17d10:	bl	11a90 <fputc@plt>
   17d14:	cmp	r7, r6
   17d18:	bne	17d00 <__assert_fail@plt+0x615c>
   17d1c:	add	sl, sl, r9
   17d20:	b	176f0 <__assert_fail@plt+0x5b4c>
   17d24:	cmp	r6, #0
   17d28:	bne	17ac4 <__assert_fail@plt+0x5f20>
   17d2c:	ldr	r3, [sp, #48]	; 0x30
   17d30:	cmp	r8, #0
   17d34:	add	r2, sp, #152	; 0x98
   17d38:	movne	r3, r8
   17d3c:	mov	r1, r2
   17d40:	mov	r0, #0
   17d44:	str	r3, [sp, #48]	; 0x30
   17d48:	movw	r3, #9504	; 0x2520
   17d4c:	str	r0, [sp, #88]	; 0x58
   17d50:	strh	r3, [r1], #2
   17d54:	b	17c20 <__assert_fail@plt+0x607c>
   17d58:	cmp	fp, #45	; 0x2d
   17d5c:	beq	18ea4 <__assert_fail@plt+0x7300>
   17d60:	cmp	r9, #0
   17d64:	blt	18ea4 <__assert_fail@plt+0x7300>
   17d68:	cmp	r9, #1
   17d6c:	mvn	r3, sl
   17d70:	movcs	r6, r9
   17d74:	movcc	r6, #1
   17d78:	cmp	r6, r3
   17d7c:	bcs	1771c <__assert_fail@plt+0x5b78>
   17d80:	cmp	r5, #0
   17d84:	beq	18454 <__assert_fail@plt+0x68b0>
   17d88:	cmp	r9, #1
   17d8c:	ble	17dc4 <__assert_fail@plt+0x6220>
   17d90:	cmp	fp, #43	; 0x2b
   17d94:	cmpne	fp, #48	; 0x30
   17d98:	sub	r9, r9, #1
   17d9c:	moveq	r7, #1
   17da0:	movne	r7, #0
   17da4:	bne	17dd4 <__assert_fail@plt+0x6230>
   17da8:	mov	r7, #0
   17dac:	add	r7, r7, #1
   17db0:	mov	r1, r5
   17db4:	mov	r0, #48	; 0x30
   17db8:	bl	11a90 <fputc@plt>
   17dbc:	cmp	r9, r7
   17dc0:	bne	17dac <__assert_fail@plt+0x6208>
   17dc4:	mov	r1, r5
   17dc8:	mov	r0, #9
   17dcc:	bl	11a90 <fputc@plt>
   17dd0:	b	18454 <__assert_fail@plt+0x68b0>
   17dd4:	add	r7, r7, #1
   17dd8:	mov	r1, r5
   17ddc:	mov	r0, #32
   17de0:	bl	11a90 <fputc@plt>
   17de4:	cmp	r9, r7
   17de8:	bne	17dd4 <__assert_fail@plt+0x6230>
   17dec:	b	17dc4 <__assert_fail@plt+0x6220>
   17df0:	ldr	r3, [sp, #100]	; 0x64
   17df4:	cmp	r6, #79	; 0x4f
   17df8:	ldr	r3, [r3, #16]
   17dfc:	bne	18f9c <__assert_fail@plt+0x73f8>
   17e00:	add	r2, sp, #152	; 0x98
   17e04:	movw	r3, #9504	; 0x2520
   17e08:	mov	r1, #0
   17e0c:	strh	r3, [r2]
   17e10:	str	r1, [sp, #88]	; 0x58
   17e14:	add	r1, r2, #3
   17e18:	strb	ip, [sp, #154]	; 0x9a
   17e1c:	b	17c20 <__assert_fail@plt+0x607c>
   17e20:	ldr	r3, [sp, #48]	; 0x30
   17e24:	cmp	r8, #0
   17e28:	movne	r3, #0
   17e2c:	ldr	r0, [sp, #112]	; 0x70
   17e30:	str	r3, [sp, #48]	; 0x30
   17e34:	bl	11988 <strlen@plt>
   17e38:	subs	r6, fp, #45	; 0x2d
   17e3c:	mov	r7, r0
   17e40:	movne	r6, #1
   17e44:	cmp	r9, #0
   17e48:	movlt	r6, #0
   17e4c:	cmp	r6, #0
   17e50:	moveq	r9, r0
   17e54:	beq	17e64 <__assert_fail@plt+0x62c0>
   17e58:	cmp	r9, r0
   17e5c:	mov	r6, r9
   17e60:	movcc	r9, r0
   17e64:	mvn	r3, sl
   17e68:	cmp	r9, r3
   17e6c:	bcs	1771c <__assert_fail@plt+0x5b78>
   17e70:	cmp	r5, #0
   17e74:	beq	17d1c <__assert_fail@plt+0x6178>
   17e78:	cmp	r6, r7
   17e7c:	bls	17eb8 <__assert_fail@plt+0x6314>
   17e80:	cmp	fp, #43	; 0x2b
   17e84:	cmpne	fp, #48	; 0x30
   17e88:	sub	r6, r6, r7
   17e8c:	moveq	fp, #1
   17e90:	movne	fp, #0
   17e94:	beq	194c8 <__assert_fail@plt+0x7924>
   17e98:	cmp	r6, #0
   17e9c:	beq	17eb8 <__assert_fail@plt+0x6314>
   17ea0:	add	fp, fp, #1
   17ea4:	mov	r1, r5
   17ea8:	mov	r0, #32
   17eac:	bl	11a90 <fputc@plt>
   17eb0:	cmp	r6, fp
   17eb4:	bne	17ea0 <__assert_fail@plt+0x62fc>
   17eb8:	cmp	r8, #0
   17ebc:	bne	19430 <__assert_fail@plt+0x788c>
   17ec0:	ldr	r3, [sp, #48]	; 0x30
   17ec4:	cmp	r3, #0
   17ec8:	beq	19418 <__assert_fail@plt+0x7874>
   17ecc:	cmp	r7, #0
   17ed0:	beq	17d1c <__assert_fail@plt+0x6178>
   17ed4:	bl	11934 <__ctype_toupper_loc@plt>
   17ed8:	ldr	r6, [sp, #112]	; 0x70
   17edc:	mov	r8, r0
   17ee0:	add	r7, r6, r7
   17ee4:	ldrb	r2, [r6], #1
   17ee8:	mov	r1, r5
   17eec:	ldr	r3, [r8]
   17ef0:	ldr	r0, [r3, r2, lsl #2]
   17ef4:	bl	11a90 <fputc@plt>
   17ef8:	cmp	r6, r7
   17efc:	bne	17ee4 <__assert_fail@plt+0x6340>
   17f00:	b	17d1c <__assert_fail@plt+0x6178>
   17f04:	mov	r3, #0
   17f08:	str	r3, [sp, #140]	; 0x8c
   17f0c:	ldr	r2, [sp, #100]	; 0x64
   17f10:	ldr	r3, [r2, #32]
   17f14:	cmp	r3, #0
   17f18:	blt	176f0 <__assert_fail@plt+0x5b4c>
   17f1c:	ldr	r2, [r2, #36]	; 0x24
   17f20:	cmp	r2, #0
   17f24:	str	r2, [sp, #136]	; 0x88
   17f28:	blt	19094 <__assert_fail@plt+0x74f0>
   17f2c:	bne	19138 <__assert_fail@plt+0x7594>
   17f30:	ldr	r3, [sp, #112]	; 0x70
   17f34:	ldrb	r3, [r3]
   17f38:	cmp	r3, #45	; 0x2d
   17f3c:	movne	r3, r2
   17f40:	moveq	r3, #1
   17f44:	moveq	r8, r2
   17f48:	movne	r8, #1
   17f4c:	str	r3, [sp, #88]	; 0x58
   17f50:	ldr	r0, [sp, #116]	; 0x74
   17f54:	asr	r3, r2, #31
   17f58:	movw	r1, #34953	; 0x8889
   17f5c:	movt	r1, #34952	; 0x8888
   17f60:	str	r3, [sp, #144]	; 0x90
   17f64:	smull	r3, r0, r0, r2
   17f68:	smull	r2, r3, r1, r2
   17f6c:	ldr	r2, [sp, #136]	; 0x88
   17f70:	add	r0, r0, r2
   17f74:	add	r3, r3, r2
   17f78:	ldr	r2, [sp, #144]	; 0x90
   17f7c:	rsb	r3, r2, r3, asr #5
   17f80:	rsb	r0, r2, r0, asr #11
   17f84:	smull	r2, r1, r1, r3
   17f88:	rsb	r2, r3, r3, lsl #4
   17f8c:	add	r1, r1, r3
   17f90:	strd	r0, [sp, #144]	; 0x90
   17f94:	asr	r0, r3, #31
   17f98:	ldr	r1, [sp, #136]	; 0x88
   17f9c:	sub	r2, r1, r2, lsl #2
   17fa0:	ldr	r1, [sp, #148]	; 0x94
   17fa4:	rsb	r0, r0, r1, asr #5
   17fa8:	rsb	r0, r0, r0, lsl #4
   17fac:	sub	r0, r3, r0, lsl #2
   17fb0:	ldr	r3, [sp, #140]	; 0x8c
   17fb4:	cmp	r3, #3
   17fb8:	ldrls	pc, [pc, r3, lsl #2]
   17fbc:	b	17ac4 <__assert_fail@plt+0x5f20>
   17fc0:	andeq	r8, r1, r8, asr #25
   17fc4:	andeq	r8, r1, ip, asr #24
   17fc8:	andeq	r8, r1, r0, ror ip
   17fcc:	andeq	r8, r1, r0, lsr #25
   17fd0:	ldr	r3, [sp, #48]	; 0x30
   17fd4:	cmp	r8, #0
   17fd8:	movne	r3, r8
   17fdc:	cmp	r6, #69	; 0x45
   17fe0:	str	r3, [sp, #48]	; 0x30
   17fe4:	bne	17c00 <__assert_fail@plt+0x605c>
   17fe8:	b	17ac4 <__assert_fail@plt+0x5f20>
   17fec:	cmp	r6, #69	; 0x45
   17ff0:	beq	17e00 <__assert_fail@plt+0x625c>
   17ff4:	ldr	r3, [sp, #100]	; 0x64
   17ff8:	mov	r1, #100	; 0x64
   17ffc:	ldr	r2, [r3, #20]
   18000:	movw	r3, #34079	; 0x851f
   18004:	movt	r3, #20971	; 0x51eb
   18008:	smull	r3, r0, r3, r2
   1800c:	asr	r3, r2, #31
   18010:	rsb	r3, r3, r0, asr #5
   18014:	mls	r3, r1, r3, r2
   18018:	cmp	r3, #0
   1801c:	bge	18034 <__assert_fail@plt+0x6490>
   18020:	movw	r1, #63636	; 0xf894
   18024:	movt	r1, #65535	; 0xffff
   18028:	cmp	r2, r1
   1802c:	rsblt	r3, r3, #0
   18030:	addge	r3, r3, #100	; 0x64
   18034:	cmp	fp, #0
   18038:	bne	18f78 <__assert_fail@plt+0x73d4>
   1803c:	ldr	r2, [sp, #1232]	; 0x4d0
   18040:	cmp	r2, #43	; 0x2b
   18044:	beq	194f0 <__assert_fail@plt+0x794c>
   18048:	mov	fp, r2
   1804c:	mov	r2, #0
   18050:	mov	r8, #1
   18054:	str	r2, [sp, #88]	; 0x58
   18058:	str	r2, [sp, #140]	; 0x8c
   1805c:	mov	r2, #2
   18060:	str	r2, [sp, #136]	; 0x88
   18064:	mov	r0, #0
   18068:	cmp	r6, #79	; 0x4f
   1806c:	movne	r6, #0
   18070:	andeq	r6, r8, #1
   18074:	cmp	r6, #0
   18078:	bne	17e00 <__assert_fail@plt+0x625c>
   1807c:	ldr	r2, [sp, #88]	; 0x58
   18080:	cmp	r2, #0
   18084:	rsbne	r3, r3, #0
   18088:	add	r2, sp, #152	; 0x98
   1808c:	mov	r6, #58	; 0x3a
   18090:	str	r4, [sp, #144]	; 0x90
   18094:	add	ip, r2, #14
   18098:	ldr	r4, [sp, #108]	; 0x6c
   1809c:	b	180e0 <__assert_fail@plt+0x653c>
   180a0:	lsr	r1, r1, #3
   180a4:	sub	r7, ip, #2
   180a8:	strb	r6, [ip, #-1]
   180ac:	asrs	r0, r0, #1
   180b0:	add	lr, r1, r1, lsl #2
   180b4:	movne	r8, #1
   180b8:	moveq	r8, #0
   180bc:	cmp	r3, #9
   180c0:	orrhi	r8, r8, #1
   180c4:	sub	r3, r3, lr, lsl #1
   180c8:	cmp	r8, #0
   180cc:	add	r3, r3, #48	; 0x30
   180d0:	strb	r3, [ip, #-2]
   180d4:	beq	18120 <__assert_fail@plt+0x657c>
   180d8:	mov	ip, r7
   180dc:	mov	r3, r1
   180e0:	tst	r0, #1
   180e4:	umull	lr, r1, r4, r3
   180e8:	sub	r7, ip, #1
   180ec:	bne	180a0 <__assert_fail@plt+0x64fc>
   180f0:	lsr	r1, r1, #3
   180f4:	asrs	r0, r0, #1
   180f8:	add	lr, r1, r1, lsl #2
   180fc:	movne	r8, #1
   18100:	moveq	r8, #0
   18104:	cmp	r3, #9
   18108:	orrhi	r8, r8, #1
   1810c:	sub	r3, r3, lr, lsl #1
   18110:	cmp	r8, #0
   18114:	add	r3, r3, #48	; 0x30
   18118:	strb	r3, [ip, #-1]
   1811c:	bne	180d8 <__assert_fail@plt+0x6534>
   18120:	ldr	r4, [sp, #144]	; 0x90
   18124:	cmp	fp, #0
   18128:	moveq	r3, #1
   1812c:	moveq	fp, #48	; 0x30
   18130:	beq	1813c <__assert_fail@plt+0x6598>
   18134:	subs	r3, fp, #45	; 0x2d
   18138:	movne	r3, #1
   1813c:	ldr	r1, [sp, #136]	; 0x88
   18140:	cmp	r9, #0
   18144:	add	r2, r2, #14
   18148:	sub	r8, r2, r7
   1814c:	movlt	r9, r1
   18150:	ldr	r1, [sp, #88]	; 0x58
   18154:	cmp	r1, #0
   18158:	bne	18d18 <__assert_fail@plt+0x7174>
   1815c:	ldr	r1, [sp, #140]	; 0x8c
   18160:	cmp	r1, #0
   18164:	bne	18e0c <__assert_fail@plt+0x7268>
   18168:	sub	r2, r9, r8
   1816c:	cmp	r2, #0
   18170:	movle	r3, #0
   18174:	andgt	r3, r3, #1
   18178:	cmp	r3, #0
   1817c:	bne	18188 <__assert_fail@plt+0x65e4>
   18180:	cmp	fp, #45	; 0x2d
   18184:	beq	18e40 <__assert_fail@plt+0x729c>
   18188:	cmp	r9, r8
   1818c:	movcs	r3, r9
   18190:	movcc	r3, r8
   18194:	mov	r2, r3
   18198:	str	r3, [sp, #88]	; 0x58
   1819c:	mvn	r3, sl
   181a0:	cmp	r3, r2
   181a4:	bls	1771c <__assert_fail@plt+0x5b78>
   181a8:	cmp	r5, #0
   181ac:	beq	17b9c <__assert_fail@plt+0x5ff8>
   181b0:	cmp	r9, r8
   181b4:	bls	181f4 <__assert_fail@plt+0x6650>
   181b8:	cmp	fp, #43	; 0x2b
   181bc:	cmpne	fp, #48	; 0x30
   181c0:	sub	r6, r9, r8
   181c4:	moveq	r3, #1
   181c8:	movne	r3, #0
   181cc:	beq	18e50 <__assert_fail@plt+0x72ac>
   181d0:	cmp	r6, #0
   181d4:	movne	r9, r3
   181d8:	beq	181f4 <__assert_fail@plt+0x6650>
   181dc:	add	r9, r9, #1
   181e0:	mov	r1, r5
   181e4:	mov	r0, #32
   181e8:	bl	11a90 <fputc@plt>
   181ec:	cmp	r6, r9
   181f0:	bne	181dc <__assert_fail@plt+0x6638>
   181f4:	ldr	r3, [sp, #48]	; 0x30
   181f8:	cmp	r3, #0
   181fc:	beq	17b88 <__assert_fail@plt+0x5fe4>
   18200:	cmp	r8, #0
   18204:	beq	17b9c <__assert_fail@plt+0x5ff8>
   18208:	bl	11934 <__ctype_toupper_loc@plt>
   1820c:	add	r8, r7, r8
   18210:	mov	r6, r0
   18214:	ldrb	r2, [r7], #1
   18218:	mov	r1, r5
   1821c:	ldr	r3, [r6]
   18220:	ldr	r0, [r3, r2, lsl #2]
   18224:	bl	11a90 <fputc@plt>
   18228:	cmp	r7, r8
   1822c:	bne	18214 <__assert_fail@plt+0x6670>
   18230:	b	17b9c <__assert_fail@plt+0x5ff8>
   18234:	cmp	r6, #69	; 0x45
   18238:	beq	17ac4 <__assert_fail@plt+0x5f20>
   1823c:	mov	r3, #2
   18240:	str	r3, [sp, #136]	; 0x88
   18244:	ldr	r3, [sp, #100]	; 0x64
   18248:	ldr	r2, [r3, #12]
   1824c:	mov	r3, r2
   18250:	lsr	r2, r2, #31
   18254:	mov	r0, #0
   18258:	cmp	r3, r0
   1825c:	movlt	r8, #0
   18260:	movge	r8, #1
   18264:	str	r2, [sp, #88]	; 0x58
   18268:	str	r0, [sp, #140]	; 0x8c
   1826c:	b	18068 <__assert_fail@plt+0x64c4>
   18270:	cmp	r6, #69	; 0x45
   18274:	beq	17ac4 <__assert_fail@plt+0x5f20>
   18278:	mov	r3, #0
   1827c:	cmp	r8, #0
   18280:	str	r3, [sp, #88]	; 0x58
   18284:	ldr	r3, [sp, #48]	; 0x30
   18288:	movne	r3, r8
   1828c:	str	r3, [sp, #48]	; 0x30
   18290:	b	17c08 <__assert_fail@plt+0x6064>
   18294:	sub	r3, r4, #1
   18298:	mvn	r2, sl
   1829c:	cmp	r3, r7
   182a0:	movne	r4, r3
   182a4:	str	r2, [sp, #136]	; 0x88
   182a8:	bne	17acc <__assert_fail@plt+0x5f28>
   182ac:	cmp	fp, #45	; 0x2d
   182b0:	beq	190a4 <__assert_fail@plt+0x7500>
   182b4:	cmp	r9, #0
   182b8:	blt	190a4 <__assert_fail@plt+0x7500>
   182bc:	cmp	r9, #1
   182c0:	movcs	r6, r9
   182c4:	movcc	r6, #1
   182c8:	cmp	r6, r2
   182cc:	bcs	1771c <__assert_fail@plt+0x5b78>
   182d0:	cmp	r5, #0
   182d4:	beq	18454 <__assert_fail@plt+0x68b0>
   182d8:	cmp	r9, #1
   182dc:	ble	18314 <__assert_fail@plt+0x6770>
   182e0:	cmp	fp, #43	; 0x2b
   182e4:	cmpne	fp, #48	; 0x30
   182e8:	sub	r9, r9, #1
   182ec:	moveq	r7, #1
   182f0:	movne	r7, #0
   182f4:	bne	18c30 <__assert_fail@plt+0x708c>
   182f8:	mov	r7, #0
   182fc:	add	r7, r7, #1
   18300:	mov	r1, r5
   18304:	mov	r0, #48	; 0x30
   18308:	bl	11a90 <fputc@plt>
   1830c:	cmp	r9, r7
   18310:	bne	182fc <__assert_fail@plt+0x6758>
   18314:	mov	r1, r5
   18318:	ldrb	r0, [r4]
   1831c:	bl	11a90 <fputc@plt>
   18320:	b	18454 <__assert_fail@plt+0x68b0>
   18324:	ldr	r3, [sp, #100]	; 0x64
   18328:	movw	r1, #9363	; 0x2493
   1832c:	movt	r1, #37449	; 0x9249
   18330:	mov	r2, #1
   18334:	str	r2, [sp, #136]	; 0x88
   18338:	ldr	r3, [r3, #24]
   1833c:	add	r3, r3, #6
   18340:	asr	r2, r3, #31
   18344:	smull	r0, r1, r1, r3
   18348:	add	r1, r1, r3
   1834c:	rsb	r2, r2, r1, asr #2
   18350:	rsb	r2, r2, r2, lsl #3
   18354:	sub	r3, r3, r2
   18358:	add	r2, r3, #1
   1835c:	b	1824c <__assert_fail@plt+0x66a8>
   18360:	cmp	r6, #69	; 0x45
   18364:	beq	17ac4 <__assert_fail@plt+0x5f20>
   18368:	mov	r3, #1
   1836c:	str	r3, [sp, #136]	; 0x88
   18370:	ldr	r3, [sp, #100]	; 0x64
   18374:	ldr	r2, [r3, #24]
   18378:	b	1824c <__assert_fail@plt+0x66a8>
   1837c:	cmp	r6, #69	; 0x45
   18380:	beq	17ac4 <__assert_fail@plt+0x5f20>
   18384:	ldr	r2, [sp, #80]	; 0x50
   18388:	mov	r3, #2
   1838c:	cmp	fp, #0
   18390:	moveq	fp, #95	; 0x5f
   18394:	str	r3, [sp, #136]	; 0x88
   18398:	b	1824c <__assert_fail@plt+0x66a8>
   1839c:	cmp	r6, #69	; 0x45
   183a0:	beq	17ac4 <__assert_fail@plt+0x5f20>
   183a4:	ldr	r3, [sp, #100]	; 0x64
   183a8:	mov	r0, #0
   183ac:	mov	r2, #2
   183b0:	ldr	r3, [r3, #16]
   183b4:	cmn	r3, #1
   183b8:	str	r2, [sp, #136]	; 0x88
   183bc:	add	r3, r3, #1
   183c0:	movlt	r2, #1
   183c4:	movge	r2, r0
   183c8:	movge	r8, #1
   183cc:	movlt	r8, r0
   183d0:	str	r2, [sp, #88]	; 0x58
   183d4:	str	r0, [sp, #140]	; 0x8c
   183d8:	b	18068 <__assert_fail@plt+0x64c4>
   183dc:	cmp	fp, #45	; 0x2d
   183e0:	beq	18e8c <__assert_fail@plt+0x72e8>
   183e4:	cmp	r9, #0
   183e8:	blt	18e8c <__assert_fail@plt+0x72e8>
   183ec:	cmp	r9, #1
   183f0:	mvn	r3, sl
   183f4:	movcs	r6, r9
   183f8:	movcc	r6, #1
   183fc:	cmp	r6, r3
   18400:	bcs	1771c <__assert_fail@plt+0x5b78>
   18404:	cmp	r5, #0
   18408:	beq	18454 <__assert_fail@plt+0x68b0>
   1840c:	cmp	r9, #1
   18410:	ble	18448 <__assert_fail@plt+0x68a4>
   18414:	cmp	fp, #43	; 0x2b
   18418:	cmpne	fp, #48	; 0x30
   1841c:	sub	r9, r9, #1
   18420:	moveq	r7, #1
   18424:	movne	r7, #0
   18428:	bne	1845c <__assert_fail@plt+0x68b8>
   1842c:	mov	r7, #0
   18430:	add	r7, r7, #1
   18434:	mov	r1, r5
   18438:	mov	r0, #48	; 0x30
   1843c:	bl	11a90 <fputc@plt>
   18440:	cmp	r9, r7
   18444:	bne	18430 <__assert_fail@plt+0x688c>
   18448:	mov	r1, r5
   1844c:	mov	r0, #10
   18450:	bl	11a90 <fputc@plt>
   18454:	add	sl, sl, r6
   18458:	b	176f0 <__assert_fail@plt+0x5b4c>
   1845c:	add	r7, r7, #1
   18460:	mov	r1, r5
   18464:	mov	r0, #32
   18468:	bl	11a90 <fputc@plt>
   1846c:	cmp	r9, r7
   18470:	bne	1845c <__assert_fail@plt+0x68b8>
   18474:	b	18448 <__assert_fail@plt+0x68a4>
   18478:	mov	r3, #0
   1847c:	str	r3, [sp, #88]	; 0x58
   18480:	cmp	r8, #0
   18484:	mov	lr, #112	; 0x70
   18488:	movne	r3, r8
   1848c:	str	r3, [sp, #88]	; 0x58
   18490:	ldr	r3, [sp, #48]	; 0x30
   18494:	movne	r3, #0
   18498:	str	r3, [sp, #48]	; 0x30
   1849c:	b	17c08 <__assert_fail@plt+0x6064>
   184a0:	ldr	lr, [sp, #100]	; 0x64
   184a4:	mvn	ip, #0
   184a8:	add	r1, sp, #168	; 0xa8
   184ac:	ldr	r0, [sp, #1244]	; 0x4dc
   184b0:	ldrd	r6, [lr]
   184b4:	ldrd	r2, [lr, #24]
   184b8:	strd	r6, [sp, #168]	; 0xa8
   184bc:	ldrd	r6, [lr, #8]
   184c0:	strd	r2, [sp, #192]	; 0xc0
   184c4:	ldr	r3, [lr, #40]	; 0x28
   184c8:	strd	r6, [sp, #176]	; 0xb0
   184cc:	ldrd	r6, [lr, #32]
   184d0:	str	ip, [sp, #196]	; 0xc4
   184d4:	str	r3, [sp, #208]	; 0xd0
   184d8:	ldrd	r2, [lr, #16]
   184dc:	strd	r2, [sp, #184]	; 0xb8
   184e0:	strd	r6, [sp, #200]	; 0xc8
   184e4:	bl	361c4 <__assert_fail@plt+0x24620>
   184e8:	ldr	r3, [sp, #196]	; 0xc4
   184ec:	cmp	r3, #0
   184f0:	blt	1957c <__assert_fail@plt+0x79d8>
   184f4:	lsr	r3, r0, #31
   184f8:	add	r2, sp, #152	; 0x98
   184fc:	cmp	r0, #0
   18500:	add	r7, r2, #14
   18504:	str	r3, [sp, #88]	; 0x58
   18508:	blt	1854c <__assert_fail@plt+0x69a8>
   1850c:	movw	r3, #26215	; 0x6667
   18510:	movt	r3, #26214	; 0x6666
   18514:	asr	ip, r0, #31
   18518:	smull	r3, r1, r3, r0
   1851c:	asr	r1, r1, #2
   18520:	sub	r3, r1, ip
   18524:	add	r3, r3, r3, lsl #2
   18528:	sub	r3, r0, r3, lsl #1
   1852c:	subs	r0, r1, ip
   18530:	add	r3, r3, #48	; 0x30
   18534:	strb	r3, [r7, #-1]!
   18538:	bne	1850c <__assert_fail@plt+0x6968>
   1853c:	mov	r0, #1
   18540:	mov	r1, #0
   18544:	strd	r0, [sp, #136]	; 0x88
   18548:	b	18124 <__assert_fail@plt+0x6580>
   1854c:	movw	r3, #26215	; 0x6667
   18550:	movt	r3, #26214	; 0x6666
   18554:	asr	ip, r0, #31
   18558:	smull	r3, r1, r3, r0
   1855c:	asr	r1, r1, #2
   18560:	sub	r3, r1, ip
   18564:	add	r3, r3, r3, lsl #2
   18568:	sub	r3, r0, r3, lsl #1
   1856c:	subs	r0, r1, ip
   18570:	rsb	r3, r3, #48	; 0x30
   18574:	strb	r3, [r7, #-1]!
   18578:	bne	1854c <__assert_fail@plt+0x69a8>
   1857c:	b	1853c <__assert_fail@plt+0x6998>
   18580:	cmp	r6, #69	; 0x45
   18584:	beq	17ac4 <__assert_fail@plt+0x5f20>
   18588:	ldr	r3, [sp, #100]	; 0x64
   1858c:	ldr	r2, [r3, #12]
   18590:	b	18388 <__assert_fail@plt+0x67e4>
   18594:	cmp	r6, #69	; 0x45
   18598:	beq	17ac4 <__assert_fail@plt+0x5f20>
   1859c:	ldr	r3, [sp, #100]	; 0x64
   185a0:	mov	r0, #0
   185a4:	mov	r2, #3
   185a8:	ldr	r3, [r3, #28]
   185ac:	b	183b4 <__assert_fail@plt+0x6810>
   185b0:	cmp	r6, #69	; 0x45
   185b4:	beq	17ac4 <__assert_fail@plt+0x5f20>
   185b8:	ldr	r3, [sp, #100]	; 0x64
   185bc:	ldr	r2, [r3, #8]
   185c0:	b	18388 <__assert_fail@plt+0x67e4>
   185c4:	cmp	r6, #69	; 0x45
   185c8:	beq	17ac4 <__assert_fail@plt+0x5f20>
   185cc:	mov	r3, #2
   185d0:	str	r3, [sp, #136]	; 0x88
   185d4:	ldr	r3, [sp, #100]	; 0x64
   185d8:	ldr	r2, [r3]
   185dc:	b	1824c <__assert_fail@plt+0x66a8>
   185e0:	movw	r8, #49224	; 0xc048
   185e4:	movt	r8, #3
   185e8:	mvn	r3, sl
   185ec:	str	r3, [sp, #136]	; 0x88
   185f0:	mvn	r3, #0
   185f4:	mov	ip, r3
   185f8:	str	r3, [sp, #88]	; 0x58
   185fc:	stm	sp, {fp, ip}
   18600:	mov	r1, r8
   18604:	mov	r0, #0
   18608:	ldr	r3, [sp, #48]	; 0x30
   1860c:	ldr	ip, [sp, #1240]	; 0x4d8
   18610:	ldr	r2, [sp, #100]	; 0x64
   18614:	str	ip, [sp, #8]
   18618:	ldr	ip, [sp, #1244]	; 0x4dc
   1861c:	str	ip, [sp, #12]
   18620:	ldr	ip, [sp, #1248]	; 0x4e0
   18624:	str	ip, [sp, #16]
   18628:	bl	173e0 <__assert_fail@plt+0x583c>
   1862c:	cmp	fp, #45	; 0x2d
   18630:	beq	18e00 <__assert_fail@plt+0x725c>
   18634:	cmp	r9, #0
   18638:	blt	18e00 <__assert_fail@plt+0x725c>
   1863c:	cmp	r0, r9
   18640:	movcs	r7, r0
   18644:	movcc	r7, r9
   18648:	ldr	r3, [sp, #136]	; 0x88
   1864c:	cmp	r7, r3
   18650:	bcs	1771c <__assert_fail@plt+0x5b78>
   18654:	cmp	r5, #0
   18658:	beq	186cc <__assert_fail@plt+0x6b28>
   1865c:	cmp	r9, r0
   18660:	bls	18698 <__assert_fail@plt+0x6af4>
   18664:	cmp	fp, #43	; 0x2b
   18668:	cmpne	fp, #48	; 0x30
   1866c:	sub	r6, r9, r0
   18670:	moveq	r3, #1
   18674:	movne	r3, #0
   18678:	bne	18ef0 <__assert_fail@plt+0x734c>
   1867c:	mov	r9, #0
   18680:	add	r9, r9, #1
   18684:	mov	r1, r5
   18688:	mov	r0, #48	; 0x30
   1868c:	bl	11a90 <fputc@plt>
   18690:	cmp	r6, r9
   18694:	bne	18680 <__assert_fail@plt+0x6adc>
   18698:	mov	r1, r8
   1869c:	str	fp, [sp]
   186a0:	ldr	r0, [sp, #88]	; 0x58
   186a4:	ldr	ip, [sp, #1240]	; 0x4d8
   186a8:	ldr	r3, [sp, #48]	; 0x30
   186ac:	ldr	r2, [sp, #100]	; 0x64
   186b0:	stmib	sp, {r0, ip}
   186b4:	mov	r0, r5
   186b8:	ldr	ip, [sp, #1244]	; 0x4dc
   186bc:	str	ip, [sp, #12]
   186c0:	ldr	ip, [sp, #1248]	; 0x4e0
   186c4:	str	ip, [sp, #16]
   186c8:	bl	173e0 <__assert_fail@plt+0x583c>
   186cc:	add	sl, sl, r7
   186d0:	b	176f0 <__assert_fail@plt+0x5b4c>
   186d4:	cmp	r6, #69	; 0x45
   186d8:	beq	17ac4 <__assert_fail@plt+0x5f20>
   186dc:	ldr	r3, [sp, #100]	; 0x64
   186e0:	movw	r2, #9363	; 0x2493
   186e4:	movt	r2, #37449	; 0x9249
   186e8:	mov	r0, #2
   186ec:	str	r0, [sp, #136]	; 0x88
   186f0:	ldr	r1, [r3, #24]
   186f4:	ldr	r3, [r3, #28]
   186f8:	sub	r3, r3, r1
   186fc:	add	r3, r3, #7
   18700:	smull	r2, r1, r2, r3
   18704:	asr	r2, r3, #31
   18708:	add	r3, r1, r3
   1870c:	rsb	r2, r2, r3, asr r0
   18710:	b	1824c <__assert_fail@plt+0x66a8>
   18714:	cmp	r6, #69	; 0x45
   18718:	beq	17ac4 <__assert_fail@plt+0x5f20>
   1871c:	ldr	r1, [sp, #100]	; 0x64
   18720:	mov	r0, #2
   18724:	movw	r2, #9363	; 0x2493
   18728:	movt	r2, #37449	; 0x9249
   1872c:	str	r0, [sp, #136]	; 0x88
   18730:	ldr	r3, [r1, #24]
   18734:	ldr	r7, [r1, #28]
   18738:	add	r3, r3, #6
   1873c:	asr	r1, r3, #31
   18740:	smull	r8, r0, r2, r3
   18744:	add	r0, r0, r3
   18748:	rsb	r1, r1, r0, asr #2
   1874c:	rsb	r1, r1, r1, lsl #3
   18750:	sub	r1, r3, r1
   18754:	sub	r1, r7, r1
   18758:	add	r1, r1, #7
   1875c:	asr	r3, r1, #31
   18760:	smull	r0, r2, r2, r1
   18764:	add	r2, r2, r1
   18768:	rsb	r2, r3, r2, asr #2
   1876c:	b	1824c <__assert_fail@plt+0x66a8>
   18770:	cmp	r6, #69	; 0x45
   18774:	beq	17e00 <__assert_fail@plt+0x625c>
   18778:	cmp	r6, #79	; 0x4f
   1877c:	beq	17ac4 <__assert_fail@plt+0x5f20>
   18780:	ldr	r3, [sp, #100]	; 0x64
   18784:	movw	r2, #63636	; 0xf894
   18788:	movt	r2, #65535	; 0xffff
   1878c:	ldr	r3, [r3, #20]
   18790:	cmp	r3, r2
   18794:	add	r3, r3, #1888	; 0x760
   18798:	movlt	r2, #1
   1879c:	movge	r2, #0
   187a0:	movge	r8, #1
   187a4:	movlt	r8, #0
   187a8:	cmp	fp, #0
   187ac:	add	r3, r3, #12
   187b0:	str	r2, [sp, #88]	; 0x58
   187b4:	bne	18f10 <__assert_fail@plt+0x736c>
   187b8:	ldr	r2, [sp, #1232]	; 0x4d0
   187bc:	cmp	r2, #43	; 0x2b
   187c0:	beq	18f24 <__assert_fail@plt+0x7380>
   187c4:	mov	r0, fp
   187c8:	mov	r2, #4
   187cc:	ldr	fp, [sp, #1232]	; 0x4d0
   187d0:	str	r2, [sp, #136]	; 0x88
   187d4:	str	r0, [sp, #140]	; 0x8c
   187d8:	b	1807c <__assert_fail@plt+0x64d8>
   187dc:	cmp	r6, #69	; 0x45
   187e0:	beq	17e00 <__assert_fail@plt+0x625c>
   187e4:	ldr	r3, [sp, #100]	; 0x64
   187e8:	movw	r8, #63636	; 0xf894
   187ec:	movt	r8, #65535	; 0xffff
   187f0:	movw	r0, #1899	; 0x76b
   187f4:	movw	r1, #34079	; 0x851f
   187f8:	movt	r1, #20971	; 0x51eb
   187fc:	ldr	r2, [r3, #20]
   18800:	add	r3, r2, #1888	; 0x760
   18804:	cmp	r2, r8
   18808:	add	r3, r3, #12
   1880c:	movge	r7, #0
   18810:	movlt	r7, #1
   18814:	cmp	r3, r0
   18818:	mvnls	r3, #98	; 0x62
   1881c:	movhi	r3, #0
   18820:	add	r3, r3, r2
   18824:	cmp	r2, r8
   18828:	str	r7, [sp, #88]	; 0x58
   1882c:	asr	r0, r3, #31
   18830:	movlt	r8, #0
   18834:	movge	r8, #1
   18838:	smull	r2, r3, r1, r3
   1883c:	cmp	fp, #0
   18840:	rsb	r3, r0, r3, asr #5
   18844:	add	r3, r3, #19
   18848:	bne	1907c <__assert_fail@plt+0x74d8>
   1884c:	ldr	r2, [sp, #1232]	; 0x4d0
   18850:	cmp	r2, #43	; 0x2b
   18854:	beq	1955c <__assert_fail@plt+0x79b8>
   18858:	mov	r0, #2
   1885c:	mov	r1, #0
   18860:	mov	fp, r2
   18864:	strd	r0, [sp, #136]	; 0x88
   18868:	b	18064 <__assert_fail@plt+0x64c0>
   1886c:	mvn	r3, sl
   18870:	cmp	r6, #0
   18874:	str	r3, [sp, #136]	; 0x88
   18878:	bne	17acc <__assert_fail@plt+0x5f28>
   1887c:	mvn	r3, #0
   18880:	movw	r8, #49244	; 0xc05c
   18884:	movt	r8, #3
   18888:	mov	ip, r3
   1888c:	str	r3, [sp, #88]	; 0x58
   18890:	b	185fc <__assert_fail@plt+0x6a58>
   18894:	cmp	r6, #69	; 0x45
   18898:	beq	17ac4 <__assert_fail@plt+0x5f20>
   1889c:	mov	r3, #2
   188a0:	str	r3, [sp, #136]	; 0x88
   188a4:	ldr	r3, [sp, #100]	; 0x64
   188a8:	ldr	r2, [r3, #8]
   188ac:	b	1824c <__assert_fail@plt+0x66a8>
   188b0:	cmp	r6, #69	; 0x45
   188b4:	beq	17ac4 <__assert_fail@plt+0x5f20>
   188b8:	mov	r3, #2
   188bc:	ldr	r2, [sp, #80]	; 0x50
   188c0:	str	r3, [sp, #136]	; 0x88
   188c4:	b	1824c <__assert_fail@plt+0x66a8>
   188c8:	cmp	r6, #69	; 0x45
   188cc:	beq	17ac4 <__assert_fail@plt+0x5f20>
   188d0:	mov	r3, #2
   188d4:	str	r3, [sp, #136]	; 0x88
   188d8:	ldr	r3, [sp, #100]	; 0x64
   188dc:	ldr	r2, [r3, #4]
   188e0:	b	1824c <__assert_fail@plt+0x66a8>
   188e4:	mvn	r3, sl
   188e8:	cmp	r6, #69	; 0x45
   188ec:	str	r3, [sp, #136]	; 0x88
   188f0:	beq	17acc <__assert_fail@plt+0x5f28>
   188f4:	cmp	r9, #0
   188f8:	ble	19148 <__assert_fail@plt+0x75a4>
   188fc:	cmp	r9, #8
   18900:	bgt	195ac <__assert_fail@plt+0x7a08>
   18904:	cmp	r9, #7
   18908:	bgt	19158 <__assert_fail@plt+0x75b4>
   1890c:	beq	1916c <__assert_fail@plt+0x75c8>
   18910:	cmp	r9, #6
   18914:	beq	19180 <__assert_fail@plt+0x75dc>
   18918:	cmp	r9, #5
   1891c:	beq	19194 <__assert_fail@plt+0x75f0>
   18920:	cmp	r9, #4
   18924:	beq	191a8 <__assert_fail@plt+0x7604>
   18928:	cmp	r9, #3
   1892c:	beq	191bc <__assert_fail@plt+0x7618>
   18930:	cmp	r9, #1
   18934:	bne	195a4 <__assert_fail@plt+0x7a00>
   18938:	ldr	r2, [sp, #92]	; 0x5c
   1893c:	mov	r7, #1
   18940:	ldr	r3, [sp, #124]	; 0x7c
   18944:	sub	r3, r3, r2, asr #31
   18948:	add	r3, r3, r3, lsl #2
   1894c:	sub	r3, r2, r3, lsl r7
   18950:	add	r3, r3, #48	; 0x30
   18954:	strb	r3, [sp, #152]	; 0x98
   18958:	ldr	r3, [sp, #136]	; 0x88
   1895c:	cmp	fp, #0
   18960:	moveq	fp, #48	; 0x30
   18964:	cmp	r7, r3
   18968:	bcs	1771c <__assert_fail@plt+0x5b78>
   1896c:	cmp	r5, #0
   18970:	beq	189bc <__assert_fail@plt+0x6e18>
   18974:	ldr	r3, [sp, #48]	; 0x30
   18978:	cmp	r3, #0
   1897c:	beq	19468 <__assert_fail@plt+0x78c4>
   18980:	bl	11934 <__ctype_toupper_loc@plt>
   18984:	add	r3, sp, #152	; 0x98
   18988:	mov	r6, r0
   1898c:	str	r4, [sp, #48]	; 0x30
   18990:	add	r3, r3, r7
   18994:	add	r8, sp, #152	; 0x98
   18998:	mov	r4, r3
   1899c:	ldrb	r0, [r8], #1
   189a0:	mov	r1, r5
   189a4:	ldr	r3, [r6]
   189a8:	ldr	r0, [r3, r0, lsl #2]
   189ac:	bl	11a90 <fputc@plt>
   189b0:	cmp	r8, r4
   189b4:	bne	1899c <__assert_fail@plt+0x6df8>
   189b8:	ldr	r4, [sp, #48]	; 0x30
   189bc:	cmp	fp, #45	; 0x2d
   189c0:	add	sl, sl, r7
   189c4:	beq	194bc <__assert_fail@plt+0x7918>
   189c8:	sub	r7, r9, r7
   189cc:	mvn	r3, sl
   189d0:	cmp	r7, r3
   189d4:	bcs	1771c <__assert_fail@plt+0x5b78>
   189d8:	cmp	r5, #0
   189dc:	beq	186cc <__assert_fail@plt+0x6b28>
   189e0:	cmp	r7, #0
   189e4:	beq	176f0 <__assert_fail@plt+0x5b4c>
   189e8:	cmp	fp, #43	; 0x2b
   189ec:	cmpne	fp, #48	; 0x30
   189f0:	moveq	r6, #1
   189f4:	movne	r6, #0
   189f8:	bne	18ce8 <__assert_fail@plt+0x7144>
   189fc:	mov	r6, #0
   18a00:	add	r6, r6, #1
   18a04:	mov	r1, r5
   18a08:	mov	r0, #48	; 0x30
   18a0c:	bl	11a90 <fputc@plt>
   18a10:	cmp	r7, r6
   18a14:	bne	18a00 <__assert_fail@plt+0x6e5c>
   18a18:	b	186cc <__assert_fail@plt+0x6b28>
   18a1c:	mvn	r3, sl
   18a20:	cmp	r6, #0
   18a24:	str	r3, [sp, #136]	; 0x88
   18a28:	bne	17acc <__assert_fail@plt+0x5f28>
   18a2c:	cmp	fp, #0
   18a30:	lsreq	r3, r9, #31
   18a34:	movne	r3, #0
   18a38:	cmp	r3, #0
   18a3c:	bne	19504 <__assert_fail@plt+0x7960>
   18a40:	sub	r3, r9, #6
   18a44:	movw	r8, #47920	; 0xbb30
   18a48:	movt	r8, #3
   18a4c:	bic	r3, r3, r3, asr #31
   18a50:	mov	ip, r3
   18a54:	str	r3, [sp, #88]	; 0x58
   18a58:	b	185fc <__assert_fail@plt+0x6a58>
   18a5c:	cmp	r6, #69	; 0x45
   18a60:	beq	17ac4 <__assert_fail@plt+0x5f20>
   18a64:	ldr	r3, [sp, #100]	; 0x64
   18a68:	movw	r1, #9363	; 0x2493
   18a6c:	movt	r1, #37449	; 0x9249
   18a70:	ldr	r7, [r3, #20]
   18a74:	ldr	r2, [r3, #24]
   18a78:	ldr	r8, [r3, #28]
   18a7c:	cmp	r7, #0
   18a80:	str	r2, [sp, #136]	; 0x88
   18a84:	sub	r3, r8, r2
   18a88:	add	r3, r3, #380	; 0x17c
   18a8c:	add	r3, r3, #2
   18a90:	asr	r2, r3, #31
   18a94:	smull	r0, r1, r1, r3
   18a98:	movlt	r0, #300	; 0x12c
   18a9c:	mvnge	r0, #99	; 0x63
   18aa0:	add	r1, r1, r3
   18aa4:	add	r0, r7, r0
   18aa8:	rsb	r2, r2, r1, asr #2
   18aac:	rsb	r2, r2, r2, lsl #3
   18ab0:	sub	r3, r3, r2
   18ab4:	sub	r3, r8, r3
   18ab8:	adds	r3, r3, #3
   18abc:	str	r3, [sp, #88]	; 0x58
   18ac0:	bmi	18fc4 <__assert_fail@plt+0x7420>
   18ac4:	tst	r0, #3
   18ac8:	movwne	r2, #365	; 0x16d
   18acc:	bne	18b18 <__assert_fail@plt+0x6f74>
   18ad0:	movw	r2, #34079	; 0x851f
   18ad4:	movt	r2, #20971	; 0x51eb
   18ad8:	asr	r3, r0, #31
   18adc:	smull	r1, r2, r2, r0
   18ae0:	rsb	r3, r3, r2, asr #5
   18ae4:	mov	r2, #100	; 0x64
   18ae8:	mls	r3, r2, r3, r0
   18aec:	cmp	r3, #0
   18af0:	movwne	r2, #366	; 0x16e
   18af4:	bne	18b18 <__assert_fail@plt+0x6f74>
   18af8:	mov	r1, #400	; 0x190
   18afc:	movw	r3, #365	; 0x16d
   18b00:	sdiv	r2, r0, r1
   18b04:	mls	r2, r1, r2, r0
   18b08:	movw	r1, #366	; 0x16e
   18b0c:	cmp	r2, #0
   18b10:	movne	r1, r3
   18b14:	mov	r2, r1
   18b18:	ldr	r3, [sp, #136]	; 0x88
   18b1c:	sub	r2, r8, r2
   18b20:	movw	r0, #9363	; 0x2493
   18b24:	movt	r0, #37449	; 0x9249
   18b28:	sub	r3, r2, r3
   18b2c:	add	r3, r3, #380	; 0x17c
   18b30:	add	r3, r3, #2
   18b34:	asr	r1, r3, #31
   18b38:	smull	r8, r0, r0, r3
   18b3c:	add	r0, r0, r3
   18b40:	rsb	r1, r1, r0, asr #2
   18b44:	rsb	r1, r1, r1, lsl #3
   18b48:	sub	r1, r3, r1
   18b4c:	sub	r1, r2, r1
   18b50:	adds	r1, r1, #3
   18b54:	bmi	194a4 <__assert_fail@plt+0x7900>
   18b58:	mov	r3, #1
   18b5c:	movw	r2, #63635	; 0xf893
   18b60:	movt	r2, #65535	; 0xffff
   18b64:	mov	r8, r3
   18b68:	str	r1, [sp, #88]	; 0x58
   18b6c:	str	r2, [sp, #136]	; 0x88
   18b70:	cmp	lr, #71	; 0x47
   18b74:	beq	190e8 <__assert_fail@plt+0x7544>
   18b78:	cmp	lr, #103	; 0x67
   18b7c:	bne	190bc <__assert_fail@plt+0x7518>
   18b80:	movw	r0, #34079	; 0x851f
   18b84:	movt	r0, #20971	; 0x51eb
   18b88:	asr	r3, r7, #31
   18b8c:	smull	r1, r2, r0, r7
   18b90:	rsb	r2, r3, r2, asr #5
   18b94:	mov	r3, #100	; 0x64
   18b98:	mls	r2, r3, r2, r7
   18b9c:	add	r2, r2, r8
   18ba0:	asr	r3, r2, #31
   18ba4:	smull	r1, r0, r0, r2
   18ba8:	rsb	r3, r3, r0, asr #5
   18bac:	mov	r0, #100	; 0x64
   18bb0:	mls	r3, r0, r3, r2
   18bb4:	cmp	r3, #0
   18bb8:	blt	18f60 <__assert_fail@plt+0x73bc>
   18bbc:	cmp	fp, #0
   18bc0:	bne	18f78 <__assert_fail@plt+0x73d4>
   18bc4:	ldr	r2, [sp, #1232]	; 0x4d0
   18bc8:	cmp	r2, #43	; 0x2b
   18bcc:	beq	194f0 <__assert_fail@plt+0x794c>
   18bd0:	mov	r2, #0
   18bd4:	mov	r8, #1
   18bd8:	ldr	fp, [sp, #1232]	; 0x4d0
   18bdc:	str	r2, [sp, #88]	; 0x58
   18be0:	str	r2, [sp, #140]	; 0x8c
   18be4:	mov	r2, #2
   18be8:	str	r2, [sp, #136]	; 0x88
   18bec:	b	18064 <__assert_fail@plt+0x64c0>
   18bf0:	mov	r3, #1
   18bf4:	str	r3, [sp, #88]	; 0x58
   18bf8:	b	18480 <__assert_fail@plt+0x68dc>
   18bfc:	movw	r8, #49236	; 0xc054
   18c00:	movt	r8, #3
   18c04:	b	185e8 <__assert_fail@plt+0x6a44>
   18c08:	ldrb	r3, [r4, #1]
   18c0c:	add	r2, r4, #1
   18c10:	cmp	r3, #58	; 0x3a
   18c14:	beq	19480 <__assert_fail@plt+0x78dc>
   18c18:	mov	r1, #1
   18c1c:	str	r1, [sp, #140]	; 0x8c
   18c20:	cmp	r3, #122	; 0x7a
   18c24:	bne	17ac4 <__assert_fail@plt+0x5f20>
   18c28:	mov	r4, r2
   18c2c:	b	17f0c <__assert_fail@plt+0x6368>
   18c30:	add	r7, r7, #1
   18c34:	mov	r1, r5
   18c38:	mov	r0, #32
   18c3c:	bl	11a90 <fputc@plt>
   18c40:	cmp	r9, r7
   18c44:	bne	18c30 <__assert_fail@plt+0x708c>
   18c48:	b	18314 <__assert_fail@plt+0x6770>
   18c4c:	mov	r2, #1
   18c50:	mov	r3, #100	; 0x64
   18c54:	str	r2, [sp, #140]	; 0x8c
   18c58:	mov	r2, #6
   18c5c:	str	r2, [sp, #136]	; 0x88
   18c60:	ldr	r2, [sp, #144]	; 0x90
   18c64:	mla	r3, r3, r2, r0
   18c68:	mov	r0, #4
   18c6c:	b	18068 <__assert_fail@plt+0x64c4>
   18c70:	mov	r3, #100	; 0x64
   18c74:	ldr	r7, [sp, #144]	; 0x90
   18c78:	movw	r1, #10000	; 0x2710
   18c7c:	mul	r3, r3, r0
   18c80:	mov	r0, #1
   18c84:	str	r0, [sp, #140]	; 0x8c
   18c88:	mov	r0, #20
   18c8c:	mla	r3, r1, r7, r3
   18c90:	mov	r1, #9
   18c94:	str	r1, [sp, #136]	; 0x88
   18c98:	add	r3, r3, r2
   18c9c:	b	18068 <__assert_fail@plt+0x64c4>
   18ca0:	cmp	r2, #0
   18ca4:	bne	18c70 <__assert_fail@plt+0x70cc>
   18ca8:	cmp	r0, #0
   18cac:	bne	18c4c <__assert_fail@plt+0x70a8>
   18cb0:	mov	r2, #1
   18cb4:	ldr	r3, [sp, #144]	; 0x90
   18cb8:	str	r2, [sp, #140]	; 0x8c
   18cbc:	mov	r2, #3
   18cc0:	str	r2, [sp, #136]	; 0x88
   18cc4:	b	18068 <__assert_fail@plt+0x64c4>
   18cc8:	mov	r2, #1
   18ccc:	mov	r3, #100	; 0x64
   18cd0:	str	r2, [sp, #140]	; 0x8c
   18cd4:	mov	r2, #5
   18cd8:	str	r2, [sp, #136]	; 0x88
   18cdc:	ldr	r2, [sp, #144]	; 0x90
   18ce0:	mla	r3, r3, r2, r0
   18ce4:	b	18064 <__assert_fail@plt+0x64c0>
   18ce8:	add	r6, r6, #1
   18cec:	mov	r1, r5
   18cf0:	mov	r0, #32
   18cf4:	bl	11a90 <fputc@plt>
   18cf8:	cmp	r7, r6
   18cfc:	bne	18ce8 <__assert_fail@plt+0x7144>
   18d00:	b	186cc <__assert_fail@plt+0x6b28>
   18d04:	cmp	r8, r9
   18d08:	movcs	r3, r8
   18d0c:	movcc	r3, r9
   18d10:	str	r3, [sp, #88]	; 0x58
   18d14:	b	17af8 <__assert_fail@plt+0x5f54>
   18d18:	mov	r2, #45	; 0x2d
   18d1c:	str	r2, [sp, #88]	; 0x58
   18d20:	sub	r2, r9, #1
   18d24:	sub	r6, r2, r8
   18d28:	cmp	r6, #0
   18d2c:	movle	r3, #0
   18d30:	andgt	r3, r3, #1
   18d34:	cmp	r3, #0
   18d38:	moveq	r6, #0
   18d3c:	cmp	fp, #95	; 0x5f
   18d40:	beq	18e78 <__assert_fail@plt+0x72d4>
   18d44:	cmn	sl, #3
   18d48:	bhi	1771c <__assert_fail@plt+0x5b78>
   18d4c:	cmp	r5, #0
   18d50:	beq	18d60 <__assert_fail@plt+0x71bc>
   18d54:	mov	r1, r5
   18d58:	ldr	r0, [sp, #88]	; 0x58
   18d5c:	bl	11a90 <fputc@plt>
   18d60:	cmp	fp, #45	; 0x2d
   18d64:	add	sl, sl, #1
   18d68:	beq	18d74 <__assert_fail@plt+0x71d0>
   18d6c:	subs	r9, r9, #1
   18d70:	bpl	18188 <__assert_fail@plt+0x65e4>
   18d74:	mov	r9, #0
   18d78:	mov	r2, r8
   18d7c:	str	r8, [sp, #88]	; 0x58
   18d80:	b	1819c <__assert_fail@plt+0x65f8>
   18d84:	mov	sl, r0
   18d88:	b	17704 <__assert_fail@plt+0x5b60>
   18d8c:	mov	r9, r3
   18d90:	add	r9, r9, #1
   18d94:	mov	r1, r5
   18d98:	mov	r0, #32
   18d9c:	bl	11a90 <fputc@plt>
   18da0:	cmp	r6, r9
   18da4:	bne	18d90 <__assert_fail@plt+0x71ec>
   18da8:	b	17b48 <__assert_fail@plt+0x5fa4>
   18dac:	mov	r1, r8
   18db0:	add	r0, sp, #169	; 0xa9
   18db4:	mov	r3, r5
   18db8:	mov	r2, #1
   18dbc:	bl	11868 <fwrite@plt>
   18dc0:	b	17d1c <__assert_fail@plt+0x6178>
   18dc4:	cmp	r8, #0
   18dc8:	beq	17d1c <__assert_fail@plt+0x6178>
   18dcc:	add	r3, sp, #168	; 0xa8
   18dd0:	add	r7, r3, r7
   18dd4:	add	r6, r3, #1
   18dd8:	bl	11928 <__ctype_tolower_loc@plt>
   18ddc:	mov	r8, r0
   18de0:	ldrb	r2, [r6], #1
   18de4:	mov	r1, r5
   18de8:	ldr	r3, [r8]
   18dec:	ldr	r0, [r3, r2, lsl #2]
   18df0:	bl	11a90 <fputc@plt>
   18df4:	cmp	r7, r6
   18df8:	bne	18de0 <__assert_fail@plt+0x723c>
   18dfc:	b	17d1c <__assert_fail@plt+0x6178>
   18e00:	mov	r7, r0
   18e04:	mov	r9, #0
   18e08:	b	18648 <__assert_fail@plt+0x6aa4>
   18e0c:	mov	r2, #43	; 0x2b
   18e10:	str	r2, [sp, #88]	; 0x58
   18e14:	b	18d20 <__assert_fail@plt+0x717c>
   18e18:	cmp	r6, #0
   18e1c:	beq	17ccc <__assert_fail@plt+0x6128>
   18e20:	mov	fp, #0
   18e24:	add	fp, fp, #1
   18e28:	mov	r1, r5
   18e2c:	mov	r0, #48	; 0x30
   18e30:	bl	11a90 <fputc@plt>
   18e34:	cmp	r6, fp
   18e38:	bne	18e24 <__assert_fail@plt+0x7280>
   18e3c:	b	17ccc <__assert_fail@plt+0x6128>
   18e40:	mov	r9, r1
   18e44:	mov	r2, r8
   18e48:	str	r8, [sp, #88]	; 0x58
   18e4c:	b	1819c <__assert_fail@plt+0x65f8>
   18e50:	cmp	r6, #0
   18e54:	beq	181f4 <__assert_fail@plt+0x6650>
   18e58:	mov	r9, #0
   18e5c:	add	r9, r9, #1
   18e60:	mov	r1, r5
   18e64:	mov	r0, #48	; 0x30
   18e68:	bl	11a90 <fputc@plt>
   18e6c:	cmp	r6, r9
   18e70:	bne	18e5c <__assert_fail@plt+0x72b8>
   18e74:	b	181f4 <__assert_fail@plt+0x6650>
   18e78:	cmp	r5, #0
   18e7c:	bne	18ebc <__assert_fail@plt+0x7318>
   18e80:	add	sl, sl, r6
   18e84:	sub	r9, r9, r6
   18e88:	b	18d44 <__assert_fail@plt+0x71a0>
   18e8c:	cmn	sl, #3
   18e90:	bhi	1771c <__assert_fail@plt+0x5b78>
   18e94:	cmp	r5, #0
   18e98:	mov	r6, #1
   18e9c:	bne	18448 <__assert_fail@plt+0x68a4>
   18ea0:	b	18454 <__assert_fail@plt+0x68b0>
   18ea4:	cmn	sl, #3
   18ea8:	bhi	1771c <__assert_fail@plt+0x5b78>
   18eac:	cmp	r5, #0
   18eb0:	mov	r6, #1
   18eb4:	bne	17dc4 <__assert_fail@plt+0x6220>
   18eb8:	b	18454 <__assert_fail@plt+0x68b0>
   18ebc:	cmp	r6, #0
   18ec0:	beq	18e80 <__assert_fail@plt+0x72dc>
   18ec4:	mov	r3, #0
   18ec8:	str	r4, [sp, #136]	; 0x88
   18ecc:	mov	r4, r3
   18ed0:	add	r4, r4, #1
   18ed4:	mov	r1, r5
   18ed8:	mov	r0, #32
   18edc:	bl	11a90 <fputc@plt>
   18ee0:	cmp	r4, r6
   18ee4:	bne	18ed0 <__assert_fail@plt+0x732c>
   18ee8:	ldr	r4, [sp, #136]	; 0x88
   18eec:	b	18e80 <__assert_fail@plt+0x72dc>
   18ef0:	mov	r9, r3
   18ef4:	add	r9, r9, #1
   18ef8:	mov	r1, r5
   18efc:	mov	r0, #32
   18f00:	bl	11a90 <fputc@plt>
   18f04:	cmp	r6, r9
   18f08:	bne	18ef4 <__assert_fail@plt+0x7350>
   18f0c:	b	18698 <__assert_fail@plt+0x6af4>
   18f10:	cmp	fp, #43	; 0x2b
   18f14:	movne	r0, #4
   18f18:	movne	r1, #0
   18f1c:	strdne	r0, [sp, #136]	; 0x88
   18f20:	bne	18064 <__assert_fail@plt+0x64c0>
   18f24:	mov	r2, #4
   18f28:	str	r2, [sp, #136]	; 0x88
   18f2c:	movw	r2, #9999	; 0x270f
   18f30:	cmp	r2, r3
   18f34:	movcc	r2, #1
   18f38:	movcc	fp, #43	; 0x2b
   18f3c:	strcc	r2, [sp, #140]	; 0x8c
   18f40:	bcc	18064 <__assert_fail@plt+0x64c0>
   18f44:	ldr	r2, [sp, #136]	; 0x88
   18f48:	mov	fp, #43	; 0x2b
   18f4c:	cmp	r9, r2
   18f50:	movle	r2, #0
   18f54:	movgt	r2, #1
   18f58:	str	r2, [sp, #140]	; 0x8c
   18f5c:	b	18064 <__assert_fail@plt+0x64c0>
   18f60:	ldr	r2, [sp, #136]	; 0x88
   18f64:	cmp	r7, r2
   18f68:	bge	1956c <__assert_fail@plt+0x79c8>
   18f6c:	cmp	fp, #0
   18f70:	rsb	r3, r3, #0
   18f74:	beq	18bc4 <__assert_fail@plt+0x7020>
   18f78:	cmp	fp, #43	; 0x2b
   18f7c:	beq	1958c <__assert_fail@plt+0x79e8>
   18f80:	mov	r2, #0
   18f84:	mov	r8, #1
   18f88:	str	r2, [sp, #88]	; 0x58
   18f8c:	str	r2, [sp, #140]	; 0x8c
   18f90:	mov	r2, #2
   18f94:	str	r2, [sp, #136]	; 0x88
   18f98:	b	18064 <__assert_fail@plt+0x64c0>
   18f9c:	mov	r2, #11
   18fa0:	mov	r0, #0
   18fa4:	mul	r3, r2, r3
   18fa8:	mov	r2, #1
   18fac:	str	r0, [sp, #88]	; 0x58
   18fb0:	str	r2, [sp, #136]	; 0x88
   18fb4:	asr	r3, r3, #5
   18fb8:	str	r0, [sp, #140]	; 0x8c
   18fbc:	add	r3, r3, r2
   18fc0:	b	18088 <__assert_fail@plt+0x64e4>
   18fc4:	sub	r0, r0, #1
   18fc8:	tst	r0, #3
   18fcc:	movwne	r2, #365	; 0x16d
   18fd0:	bne	1901c <__assert_fail@plt+0x7478>
   18fd4:	movw	r2, #34079	; 0x851f
   18fd8:	movt	r2, #20971	; 0x51eb
   18fdc:	asr	r3, r0, #31
   18fe0:	smull	r1, r2, r2, r0
   18fe4:	rsb	r3, r3, r2, asr #5
   18fe8:	mov	r2, #100	; 0x64
   18fec:	mls	r3, r2, r3, r0
   18ff0:	cmp	r3, #0
   18ff4:	movwne	r2, #366	; 0x16e
   18ff8:	bne	1901c <__assert_fail@plt+0x7478>
   18ffc:	mov	r1, #400	; 0x190
   19000:	movw	r3, #365	; 0x16d
   19004:	sdiv	r2, r0, r1
   19008:	mls	r2, r1, r2, r0
   1900c:	movw	r1, #366	; 0x16e
   19010:	cmp	r2, #0
   19014:	movne	r1, r3
   19018:	mov	r2, r1
   1901c:	add	r3, r8, r2
   19020:	ldr	r2, [sp, #136]	; 0x88
   19024:	movw	r0, #9363	; 0x2493
   19028:	movt	r0, #37449	; 0x9249
   1902c:	movw	r1, #63637	; 0xf895
   19030:	movt	r1, #65535	; 0xffff
   19034:	str	r3, [sp, #88]	; 0x58
   19038:	str	r1, [sp, #136]	; 0x88
   1903c:	sub	r3, r3, r2
   19040:	add	r2, r3, #380	; 0x17c
   19044:	mvn	r3, #0
   19048:	add	r2, r2, #2
   1904c:	asr	r1, r2, #31
   19050:	smull	r8, r0, r0, r2
   19054:	mov	r8, r3
   19058:	add	r0, r0, r2
   1905c:	rsb	r0, r1, r0, asr #2
   19060:	rsb	r0, r0, r0, lsl #3
   19064:	sub	r2, r2, r0
   19068:	ldr	r0, [sp, #88]	; 0x58
   1906c:	sub	r2, r0, r2
   19070:	add	r2, r2, #3
   19074:	str	r2, [sp, #88]	; 0x58
   19078:	b	18b70 <__assert_fail@plt+0x6fcc>
   1907c:	cmp	fp, #43	; 0x2b
   19080:	beq	1955c <__assert_fail@plt+0x79b8>
   19084:	mov	r0, #2
   19088:	mov	r1, #0
   1908c:	strd	r0, [sp, #136]	; 0x88
   19090:	b	18064 <__assert_fail@plt+0x64c0>
   19094:	mov	r3, #1
   19098:	mov	r8, #0
   1909c:	str	r3, [sp, #88]	; 0x58
   190a0:	b	17f50 <__assert_fail@plt+0x63ac>
   190a4:	cmn	sl, #3
   190a8:	bhi	1771c <__assert_fail@plt+0x5b78>
   190ac:	cmp	r5, #0
   190b0:	mov	r6, #1
   190b4:	bne	18314 <__assert_fail@plt+0x6770>
   190b8:	b	18454 <__assert_fail@plt+0x68b0>
   190bc:	ldr	r1, [sp, #88]	; 0x58
   190c0:	movw	r3, #9363	; 0x2493
   190c4:	movt	r3, #37449	; 0x9249
   190c8:	smull	r0, r3, r3, r1
   190cc:	mov	r0, #2
   190d0:	asr	r2, r1, #31
   190d4:	str	r0, [sp, #136]	; 0x88
   190d8:	add	r3, r3, r1
   190dc:	rsb	r2, r2, r3, asr r0
   190e0:	add	r2, r2, #1
   190e4:	b	1824c <__assert_fail@plt+0x66a8>
   190e8:	ldr	r2, [sp, #136]	; 0x88
   190ec:	cmp	r7, r2
   190f0:	add	r7, r7, #1888	; 0x760
   190f4:	movlt	r2, #1
   190f8:	movge	r2, #0
   190fc:	add	r7, r7, #12
   19100:	movge	r8, #1
   19104:	movlt	r8, #0
   19108:	cmp	fp, #0
   1910c:	str	r2, [sp, #88]	; 0x58
   19110:	add	r3, r7, r3
   19114:	bne	18f10 <__assert_fail@plt+0x736c>
   19118:	ldr	r2, [sp, #1232]	; 0x4d0
   1911c:	cmp	r2, #43	; 0x2b
   19120:	beq	18f24 <__assert_fail@plt+0x7380>
   19124:	mov	r0, #4
   19128:	mov	r1, #0
   1912c:	mov	fp, r2
   19130:	strd	r0, [sp, #136]	; 0x88
   19134:	b	18064 <__assert_fail@plt+0x64c0>
   19138:	mov	r3, #0
   1913c:	mov	r8, #1
   19140:	str	r3, [sp, #88]	; 0x58
   19144:	b	17f50 <__assert_fail@plt+0x63ac>
   19148:	ldr	r3, [sp, #52]	; 0x34
   1914c:	mov	r9, #9
   19150:	cmp	r3, #0
   19154:	bne	195b8 <__assert_fail@plt+0x7a14>
   19158:	ldr	r3, [sp, #132]	; 0x84
   1915c:	cmp	r3, #0
   19160:	movne	r7, #8
   19164:	ldrne	r3, [sp, #76]	; 0x4c
   19168:	bne	191e4 <__assert_fail@plt+0x7640>
   1916c:	ldr	r3, [sp, #128]	; 0x80
   19170:	cmp	r3, #0
   19174:	movne	r7, #7
   19178:	ldrne	r3, [sp, #44]	; 0x2c
   1917c:	bne	191e4 <__assert_fail@plt+0x7640>
   19180:	ldr	r3, [sp, #68]	; 0x44
   19184:	cmp	r3, #0
   19188:	movne	r7, #6
   1918c:	ldrne	r3, [sp, #72]	; 0x48
   19190:	bne	191e4 <__assert_fail@plt+0x7640>
   19194:	ldr	r3, [sp, #64]	; 0x40
   19198:	cmp	r3, #0
   1919c:	movne	r7, #5
   191a0:	ldrne	r3, [sp, #40]	; 0x28
   191a4:	bne	191e4 <__assert_fail@plt+0x7640>
   191a8:	ldr	r3, [sp, #60]	; 0x3c
   191ac:	cmp	r3, #0
   191b0:	movne	r7, #4
   191b4:	ldrne	r3, [sp, #36]	; 0x24
   191b8:	bne	191e4 <__assert_fail@plt+0x7640>
   191bc:	ldr	r3, [sp, #56]	; 0x38
   191c0:	cmp	r3, #0
   191c4:	movne	r7, #3
   191c8:	ldrne	r3, [sp, #32]
   191cc:	bne	191e4 <__assert_fail@plt+0x7640>
   191d0:	ldr	r3, [sp, #120]	; 0x78
   191d4:	cmp	r3, #0
   191d8:	beq	18938 <__assert_fail@plt+0x6d94>
   191dc:	ldr	r3, [sp, #28]
   191e0:	mov	r7, #2
   191e4:	movw	ip, #26215	; 0x6667
   191e8:	movt	ip, #26214	; 0x6666
   191ec:	asr	r0, r3, #31
   191f0:	sub	r6, r7, #2
   191f4:	smull	r1, r2, ip, r3
   191f8:	movw	r1, #34079	; 0x851f
   191fc:	movt	r1, #20971	; 0x51eb
   19200:	cmp	r6, #0
   19204:	smull	lr, r1, r1, r3
   19208:	rsb	lr, r0, r2, asr #2
   1920c:	add	r2, sp, #1184	; 0x4a0
   19210:	add	r2, r2, #8
   19214:	add	r6, r2, r6
   19218:	asr	r2, lr, #31
   1921c:	smull	r8, ip, ip, lr
   19220:	rsb	r1, r0, r1, asr #5
   19224:	rsb	r2, r2, ip, asr #2
   19228:	add	ip, lr, lr, lsl #2
   1922c:	add	r2, r2, r2, lsl #2
   19230:	sub	ip, r3, ip, lsl #1
   19234:	sub	r2, lr, r2, lsl #1
   19238:	add	lr, sp, #1184	; 0x4a0
   1923c:	add	lr, lr, #8
   19240:	add	ip, ip, #48	; 0x30
   19244:	add	r2, r2, #48	; 0x30
   19248:	add	lr, lr, r7
   1924c:	strb	ip, [lr, #-1041]	; 0xfffffbef
   19250:	strb	r2, [r6, #-1040]	; 0xfffffbf0
   19254:	beq	18958 <__assert_fail@plt+0x6db4>
   19258:	movw	r6, #26215	; 0x6667
   1925c:	movt	r6, #26214	; 0x6666
   19260:	asr	lr, r1, #31
   19264:	smull	r2, ip, r6, r1
   19268:	movw	r2, #19923	; 0x4dd3
   1926c:	movt	r2, #4194	; 0x1062
   19270:	smull	r8, r2, r2, r3
   19274:	add	r8, sp, #1184	; 0x4a0
   19278:	rsb	lr, lr, ip, asr #2
   1927c:	add	r8, r8, #8
   19280:	sub	ip, r7, #3
   19284:	cmp	ip, #0
   19288:	add	ip, r8, ip
   1928c:	add	lr, lr, lr, lsl #2
   19290:	rsb	r2, r0, r2, asr #6
   19294:	sub	r1, r1, lr, lsl #1
   19298:	add	r1, r1, #48	; 0x30
   1929c:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   192a0:	beq	18958 <__assert_fail@plt+0x6db4>
   192a4:	smull	r1, ip, r6, r2
   192a8:	movw	r1, #35757	; 0x8bad
   192ac:	movt	r1, #26843	; 0x68db
   192b0:	asr	lr, r2, #31
   192b4:	smull	r8, r1, r1, r3
   192b8:	add	r8, sp, #1184	; 0x4a0
   192bc:	rsb	lr, lr, ip, asr #2
   192c0:	add	r8, r8, #8
   192c4:	sub	ip, r7, #4
   192c8:	cmp	ip, #0
   192cc:	add	ip, r8, ip
   192d0:	add	lr, lr, lr, lsl #2
   192d4:	rsb	r1, r0, r1, asr #12
   192d8:	sub	r2, r2, lr, lsl #1
   192dc:	add	r2, r2, #48	; 0x30
   192e0:	strb	r2, [ip, #-1040]	; 0xfffffbf0
   192e4:	beq	18958 <__assert_fail@plt+0x6db4>
   192e8:	smull	r2, ip, r6, r1
   192ec:	movw	r2, #46473	; 0xb589
   192f0:	movt	r2, #5368	; 0x14f8
   192f4:	asr	lr, r1, #31
   192f8:	smull	r8, r2, r2, r3
   192fc:	add	r8, sp, #1184	; 0x4a0
   19300:	rsb	lr, lr, ip, asr #2
   19304:	add	r8, r8, #8
   19308:	sub	ip, r7, #5
   1930c:	cmp	ip, #0
   19310:	add	ip, r8, ip
   19314:	add	lr, lr, lr, lsl #2
   19318:	rsb	r2, r0, r2, asr #13
   1931c:	sub	r1, r1, lr, lsl #1
   19320:	add	r1, r1, #48	; 0x30
   19324:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   19328:	beq	18958 <__assert_fail@plt+0x6db4>
   1932c:	smull	r1, ip, r6, r2
   19330:	movw	r1, #56963	; 0xde83
   19334:	movt	r1, #17179	; 0x431b
   19338:	asr	lr, r2, #31
   1933c:	smull	r8, r1, r1, r3
   19340:	add	r8, sp, #1184	; 0x4a0
   19344:	rsb	lr, lr, ip, asr #2
   19348:	add	r8, r8, #8
   1934c:	sub	ip, r7, #6
   19350:	cmp	ip, #0
   19354:	add	ip, r8, ip
   19358:	add	lr, lr, lr, lsl #2
   1935c:	rsb	r1, r0, r1, asr #18
   19360:	sub	r2, r2, lr, lsl #1
   19364:	add	r2, r2, #48	; 0x30
   19368:	strb	r2, [ip, #-1040]	; 0xfffffbf0
   1936c:	beq	18958 <__assert_fail@plt+0x6db4>
   19370:	smull	r2, ip, r6, r1
   19374:	movw	r2, #51819	; 0xca6b
   19378:	movt	r2, #27487	; 0x6b5f
   1937c:	asr	lr, r1, #31
   19380:	smull	r8, r2, r2, r3
   19384:	add	r8, sp, #1184	; 0x4a0
   19388:	rsb	lr, lr, ip, asr #2
   1938c:	add	r8, r8, #8
   19390:	sub	ip, r7, #7
   19394:	cmp	ip, #0
   19398:	add	ip, r8, ip
   1939c:	add	lr, lr, lr, lsl #2
   193a0:	rsb	r2, r0, r2, asr #22
   193a4:	sub	r1, r1, lr, lsl #1
   193a8:	add	r1, r1, #48	; 0x30
   193ac:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   193b0:	beq	18958 <__assert_fail@plt+0x6db4>
   193b4:	smull	r1, ip, r6, r2
   193b8:	movw	lr, #15241	; 0x3b89
   193bc:	movt	lr, #21990	; 0x55e6
   193c0:	asr	r1, r2, #31
   193c4:	smull	lr, r3, lr, r3
   193c8:	sub	lr, r7, #8
   193cc:	rsb	ip, r1, ip, asr #2
   193d0:	mov	r1, lr
   193d4:	cmp	lr, #1
   193d8:	add	r1, r8, r1
   193dc:	mov	lr, r8
   193e0:	add	ip, ip, ip, lsl #2
   193e4:	rsb	r0, r0, r3, asr #25
   193e8:	sub	r3, r2, ip, lsl #1
   193ec:	add	r3, r3, #48	; 0x30
   193f0:	strb	r3, [r1, #-1040]	; 0xfffffbf0
   193f4:	bne	18958 <__assert_fail@plt+0x6db4>
   193f8:	smull	r3, r2, r6, r0
   193fc:	asr	r3, r0, #31
   19400:	rsb	r3, r3, r2, asr #2
   19404:	add	r3, r3, r3, lsl #2
   19408:	sub	r0, r0, r3, lsl #1
   1940c:	add	r3, r0, #48	; 0x30
   19410:	strb	r3, [sp, #152]	; 0x98
   19414:	b	18958 <__assert_fail@plt+0x6db4>
   19418:	mov	r1, r7
   1941c:	mov	r3, r5
   19420:	ldr	r0, [sp, #112]	; 0x70
   19424:	mov	r2, #1
   19428:	bl	11868 <fwrite@plt>
   1942c:	b	17d1c <__assert_fail@plt+0x6178>
   19430:	cmp	r7, #0
   19434:	beq	17d1c <__assert_fail@plt+0x6178>
   19438:	bl	11928 <__ctype_tolower_loc@plt>
   1943c:	ldr	r6, [sp, #112]	; 0x70
   19440:	mov	r8, r0
   19444:	add	r7, r6, r7
   19448:	ldrb	r2, [r6], #1
   1944c:	mov	r1, r5
   19450:	ldr	r3, [r8]
   19454:	ldr	r0, [r3, r2, lsl #2]
   19458:	bl	11a90 <fputc@plt>
   1945c:	cmp	r6, r7
   19460:	bne	19448 <__assert_fail@plt+0x78a4>
   19464:	b	17d1c <__assert_fail@plt+0x6178>
   19468:	mov	r3, r5
   1946c:	mov	r2, #1
   19470:	mov	r1, r7
   19474:	add	r0, sp, #152	; 0x98
   19478:	bl	11868 <fwrite@plt>
   1947c:	b	189bc <__assert_fail@plt+0x6e18>
   19480:	add	r1, r4, #2
   19484:	mov	r0, #1
   19488:	mov	r2, r1
   1948c:	ldrb	r3, [r1], #1
   19490:	add	r0, r0, #1
   19494:	cmp	r3, #58	; 0x3a
   19498:	beq	19488 <__assert_fail@plt+0x78e4>
   1949c:	str	r0, [sp, #140]	; 0x8c
   194a0:	b	18c20 <__assert_fail@plt+0x707c>
   194a4:	movw	r2, #63636	; 0xf894
   194a8:	movt	r2, #65535	; 0xffff
   194ac:	mov	r3, #0
   194b0:	mov	r8, r3
   194b4:	str	r2, [sp, #136]	; 0x88
   194b8:	b	18b70 <__assert_fail@plt+0x6fcc>
   194bc:	cmn	sl, #1
   194c0:	bne	176f0 <__assert_fail@plt+0x5b4c>
   194c4:	b	1771c <__assert_fail@plt+0x5b78>
   194c8:	cmp	r6, #0
   194cc:	beq	17eb8 <__assert_fail@plt+0x6314>
   194d0:	mov	fp, #0
   194d4:	add	fp, fp, #1
   194d8:	mov	r1, r5
   194dc:	mov	r0, #48	; 0x30
   194e0:	bl	11a90 <fputc@plt>
   194e4:	cmp	r6, fp
   194e8:	bne	194d4 <__assert_fail@plt+0x7930>
   194ec:	b	17eb8 <__assert_fail@plt+0x6314>
   194f0:	mov	r2, #2
   194f4:	mov	r8, #1
   194f8:	str	fp, [sp, #88]	; 0x58
   194fc:	str	r2, [sp, #136]	; 0x88
   19500:	b	18f44 <__assert_fail@plt+0x73a0>
   19504:	mov	fp, #4
   19508:	mov	ip, #43	; 0x2b
   1950c:	ldr	r2, [sp, #100]	; 0x64
   19510:	movw	r1, #47920	; 0xbb30
   19514:	movt	r1, #3
   19518:	ldr	r3, [sp, #1240]	; 0x4d8
   1951c:	mov	r0, r6
   19520:	mov	r8, r1
   19524:	str	ip, [sp]
   19528:	mov	r9, r6
   1952c:	ldr	lr, [sp, #1248]	; 0x4e0
   19530:	str	fp, [sp, #4]
   19534:	str	r3, [sp, #8]
   19538:	ldr	r3, [sp, #1244]	; 0x4dc
   1953c:	str	fp, [sp, #88]	; 0x58
   19540:	mov	fp, ip
   19544:	str	r3, [sp, #12]
   19548:	str	lr, [sp, #16]
   1954c:	ldr	r3, [sp, #48]	; 0x30
   19550:	bl	173e0 <__assert_fail@plt+0x583c>
   19554:	mov	r7, r0
   19558:	b	18648 <__assert_fail@plt+0x6aa4>
   1955c:	mov	r2, #2
   19560:	str	r2, [sp, #136]	; 0x88
   19564:	mov	r2, #99	; 0x63
   19568:	b	18f30 <__assert_fail@plt+0x738c>
   1956c:	cmp	fp, #0
   19570:	add	r3, r3, #100	; 0x64
   19574:	beq	18bc4 <__assert_fail@plt+0x7020>
   19578:	b	18f78 <__assert_fail@plt+0x73d4>
   1957c:	ldr	r2, [sp, #84]	; 0x54
   19580:	mov	r3, #75	; 0x4b
   19584:	str	r3, [r2]
   19588:	b	17728 <__assert_fail@plt+0x5b84>
   1958c:	mov	r2, #0
   19590:	mov	r8, #1
   19594:	str	r2, [sp, #88]	; 0x58
   19598:	mov	r2, #2
   1959c:	str	r2, [sp, #136]	; 0x88
   195a0:	b	18f44 <__assert_fail@plt+0x73a0>
   195a4:	mov	r9, #2
   195a8:	b	191d0 <__assert_fail@plt+0x762c>
   195ac:	ldr	r3, [sp, #52]	; 0x34
   195b0:	cmp	r3, #0
   195b4:	beq	19158 <__assert_fail@plt+0x75b4>
   195b8:	mov	r7, #9
   195bc:	ldr	r3, [sp, #1248]	; 0x4e0
   195c0:	b	191e4 <__assert_fail@plt+0x7640>
   195c4:	str	r4, [sp, #-8]!
   195c8:	mov	ip, #0
   195cc:	str	lr, [sp, #4]
   195d0:	sub	sp, sp, #32
   195d4:	ldr	lr, [sp, #40]	; 0x28
   195d8:	add	r4, sp, #31
   195dc:	str	ip, [sp]
   195e0:	str	r3, [sp, #12]
   195e4:	mvn	r3, #0
   195e8:	str	r3, [sp, #4]
   195ec:	mov	r3, ip
   195f0:	str	r4, [sp, #8]
   195f4:	str	lr, [sp, #16]
   195f8:	strb	ip, [sp, #31]
   195fc:	bl	173e0 <__assert_fail@plt+0x583c>
   19600:	add	sp, sp, #32
   19604:	ldr	r4, [sp]
   19608:	add	sp, sp, #4
   1960c:	pop	{pc}		; (ldr pc, [sp], #4)
   19610:	strd	r4, [sp, #-12]!
   19614:	mov	r5, r0
   19618:	str	lr, [sp, #8]
   1961c:	sub	sp, sp, #12
   19620:	bl	119b8 <__errno_location@plt>
   19624:	mov	r4, r0
   19628:	mov	r2, #0
   1962c:	ldr	r3, [r4]
   19630:	mov	r0, r5
   19634:	str	r2, [r4]
   19638:	str	r3, [sp]
   1963c:	str	r3, [sp, #4]
   19640:	bl	11754 <free@plt>
   19644:	ldr	r3, [r4]
   19648:	add	r2, sp, #8
   1964c:	clz	r3, r3
   19650:	lsr	r3, r3, #5
   19654:	add	r3, r2, r3, lsl #2
   19658:	ldr	r3, [r3, #-8]
   1965c:	str	r3, [r4]
   19660:	add	sp, sp, #12
   19664:	ldrd	r4, [sp]
   19668:	add	sp, sp, #8
   1966c:	pop	{pc}		; (ldr pc, [sp], #4)
   19670:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19674:	mov	r5, r2
   19678:	strd	r6, [sp, #8]
   1967c:	strd	r8, [sp, #16]
   19680:	mov	r9, r0
   19684:	mov	r0, r2
   19688:	str	sl, [sp, #24]
   1968c:	mov	sl, r1
   19690:	str	lr, [sp, #28]
   19694:	bl	11a0c <fileno@plt>
   19698:	mov	r4, r0
   1969c:	bl	119b8 <__errno_location@plt>
   196a0:	cmp	r4, #1
   196a4:	mov	r8, r0
   196a8:	beq	19830 <__assert_fail@plt+0x7c8c>
   196ac:	cmp	r4, #2
   196b0:	beq	197e8 <__assert_fail@plt+0x7c44>
   196b4:	cmp	r4, #0
   196b8:	beq	1978c <__assert_fail@plt+0x7be8>
   196bc:	mov	r1, #2
   196c0:	mov	r0, r1
   196c4:	bl	117e4 <dup2@plt>
   196c8:	subs	r4, r0, #2
   196cc:	movne	r4, #1
   196d0:	mov	r1, #1
   196d4:	mov	r0, r1
   196d8:	bl	117e4 <dup2@plt>
   196dc:	subs	r7, r0, #1
   196e0:	movne	r7, #1
   196e4:	mov	r1, #0
   196e8:	mov	r0, r1
   196ec:	bl	117e4 <dup2@plt>
   196f0:	subs	r6, r0, #0
   196f4:	beq	19728 <__assert_fail@plt+0x7b84>
   196f8:	movw	r0, #49256	; 0xc068
   196fc:	movt	r0, #3
   19700:	mov	r1, #0
   19704:	bl	118e0 <open64@plt>
   19708:	cmp	r0, #0
   1970c:	beq	19724 <__assert_fail@plt+0x7b80>
   19710:	bge	19850 <__assert_fail@plt+0x7cac>
   19714:	mov	r6, #1
   19718:	mov	r5, #0
   1971c:	ldr	r9, [r8]
   19720:	b	197ac <__assert_fail@plt+0x7c08>
   19724:	mov	r6, #1
   19728:	cmp	r7, #0
   1972c:	bne	197f0 <__assert_fail@plt+0x7c4c>
   19730:	cmp	r4, #0
   19734:	beq	19794 <__assert_fail@plt+0x7bf0>
   19738:	movw	r0, #49256	; 0xc068
   1973c:	movt	r0, #3
   19740:	mov	r1, #0
   19744:	bl	118e0 <open64@plt>
   19748:	cmp	r0, #2
   1974c:	beq	19794 <__assert_fail@plt+0x7bf0>
   19750:	cmp	r0, #0
   19754:	bge	1983c <__assert_fail@plt+0x7c98>
   19758:	ldr	r9, [r8]
   1975c:	mov	r5, #0
   19760:	mov	r0, #2
   19764:	bl	11b80 <close@plt>
   19768:	cmp	r7, #0
   1976c:	beq	197bc <__assert_fail@plt+0x7c18>
   19770:	mov	r0, #1
   19774:	bl	11b80 <close@plt>
   19778:	cmp	r6, #0
   1977c:	beq	197c4 <__assert_fail@plt+0x7c20>
   19780:	mov	r0, #0
   19784:	bl	11b80 <close@plt>
   19788:	b	197c4 <__assert_fail@plt+0x7c20>
   1978c:	mov	r7, r4
   19790:	mov	r6, r4
   19794:	mov	r2, r5
   19798:	mov	r0, r9
   1979c:	mov	r1, sl
   197a0:	bl	1194c <freopen64@plt>
   197a4:	ldr	r9, [r8]
   197a8:	mov	r5, r0
   197ac:	cmp	r4, #0
   197b0:	bne	19760 <__assert_fail@plt+0x7bbc>
   197b4:	cmp	r7, #0
   197b8:	bne	19770 <__assert_fail@plt+0x7bcc>
   197bc:	cmp	r6, #0
   197c0:	bne	19780 <__assert_fail@plt+0x7bdc>
   197c4:	cmp	r5, #0
   197c8:	mov	r0, r5
   197cc:	ldrd	r4, [sp]
   197d0:	streq	r9, [r8]
   197d4:	ldrd	r6, [sp, #8]
   197d8:	ldrd	r8, [sp, #16]
   197dc:	ldr	sl, [sp, #24]
   197e0:	add	sp, sp, #28
   197e4:	pop	{pc}		; (ldr pc, [sp], #4)
   197e8:	mov	r4, #0
   197ec:	b	196d0 <__assert_fail@plt+0x7b2c>
   197f0:	movw	r0, #49256	; 0xc068
   197f4:	movt	r0, #3
   197f8:	mov	r1, #0
   197fc:	bl	118e0 <open64@plt>
   19800:	cmp	r0, #1
   19804:	beq	19730 <__assert_fail@plt+0x7b8c>
   19808:	cmp	r0, #0
   1980c:	bge	1986c <__assert_fail@plt+0x7cc8>
   19810:	ldr	r9, [r8]
   19814:	cmp	r4, #0
   19818:	moveq	r5, r4
   1981c:	beq	19770 <__assert_fail@plt+0x7bcc>
   19820:	mov	r0, #2
   19824:	mov	r5, #0
   19828:	bl	11b80 <close@plt>
   1982c:	b	19770 <__assert_fail@plt+0x7bcc>
   19830:	mov	r4, #0
   19834:	mov	r7, r4
   19838:	b	196e4 <__assert_fail@plt+0x7b40>
   1983c:	bl	11b80 <close@plt>
   19840:	mov	r3, #9
   19844:	mov	r9, r3
   19848:	str	r3, [r8]
   1984c:	b	1975c <__assert_fail@plt+0x7bb8>
   19850:	bl	11b80 <close@plt>
   19854:	mov	r3, #9
   19858:	mov	r6, #1
   1985c:	mov	r9, r3
   19860:	mov	r5, #0
   19864:	str	r3, [r8]
   19868:	b	197ac <__assert_fail@plt+0x7c08>
   1986c:	bl	11b80 <close@plt>
   19870:	mov	r3, #9
   19874:	mov	r9, r3
   19878:	str	r3, [r8]
   1987c:	b	19814 <__assert_fail@plt+0x7c70>
   19880:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19884:	mov	r4, r0
   19888:	ldr	ip, [r0, #4]
   1988c:	strd	r6, [sp, #8]
   19890:	str	lr, [sp, #20]
   19894:	ldr	lr, [r0, #8]
   19898:	str	r8, [sp, #16]
   1989c:	sub	sp, sp, #8
   198a0:	ldr	r5, [sp, #32]
   198a4:	cmp	lr, ip
   198a8:	beq	198d0 <__assert_fail@plt+0x7d2c>
   198ac:	mov	r0, r4
   198b0:	str	r5, [sp, #32]
   198b4:	add	sp, sp, #8
   198b8:	ldrd	r4, [sp]
   198bc:	ldrd	r6, [sp, #8]
   198c0:	ldr	r8, [sp, #16]
   198c4:	ldr	lr, [sp, #20]
   198c8:	add	sp, sp, #24
   198cc:	b	11a3c <fseeko64@plt>
   198d0:	ldr	ip, [r0, #16]
   198d4:	ldr	lr, [r0, #20]
   198d8:	cmp	lr, ip
   198dc:	bne	198ac <__assert_fail@plt+0x7d08>
   198e0:	ldr	r8, [r0, #36]	; 0x24
   198e4:	cmp	r8, #0
   198e8:	bne	198ac <__assert_fail@plt+0x7d08>
   198ec:	mov	r6, r2
   198f0:	mov	r7, r3
   198f4:	bl	11a0c <fileno@plt>
   198f8:	mov	r2, r6
   198fc:	mov	r3, r7
   19900:	str	r5, [sp]
   19904:	bl	11874 <lseek64@plt>
   19908:	mvn	r3, #0
   1990c:	mvn	r2, #0
   19910:	cmp	r1, r3
   19914:	cmpeq	r0, r2
   19918:	beq	19948 <__assert_fail@plt+0x7da4>
   1991c:	ldr	r3, [r4]
   19920:	strd	r0, [r4, #80]	; 0x50
   19924:	bic	r3, r3, #16
   19928:	str	r3, [r4]
   1992c:	mov	r0, r8
   19930:	add	sp, sp, #8
   19934:	ldrd	r4, [sp]
   19938:	ldrd	r6, [sp, #8]
   1993c:	ldr	r8, [sp, #16]
   19940:	add	sp, sp, #20
   19944:	pop	{pc}		; (ldr pc, [sp], #4)
   19948:	mvn	r8, #0
   1994c:	b	1992c <__assert_fail@plt+0x7d88>
   19950:	strd	r4, [sp, #-8]!
   19954:	ldrd	r2, [r1, #8]
   19958:	ldrd	r4, [r0, #8]
   1995c:	cmp	r5, r3
   19960:	cmpeq	r4, r2
   19964:	movne	r0, #0
   19968:	bne	19984 <__assert_fail@plt+0x7de0>
   1996c:	ldrd	r4, [r0]
   19970:	ldrd	r2, [r1]
   19974:	cmp	r5, r3
   19978:	cmpeq	r4, r2
   1997c:	moveq	r0, #1
   19980:	movne	r0, #0
   19984:	ldrd	r4, [sp]
   19988:	add	sp, sp, #8
   1998c:	bx	lr
   19990:	mov	r2, r1
   19994:	mov	r3, #0
   19998:	str	r4, [sp, #-8]!
   1999c:	ldrd	r0, [r0, #8]
   199a0:	str	lr, [sp, #4]
   199a4:	bl	3a528 <__assert_fail@plt+0x28984>
   199a8:	ldr	r4, [sp]
   199ac:	add	sp, sp, #4
   199b0:	mov	r0, r2
   199b4:	pop	{pc}		; (ldr pc, [sp], #4)
   199b8:	mov	r2, r1
   199bc:	mov	r3, #0
   199c0:	str	r4, [sp, #-8]!
   199c4:	ldrd	r0, [r0]
   199c8:	str	lr, [sp, #4]
   199cc:	bl	3a528 <__assert_fail@plt+0x28984>
   199d0:	ldr	r4, [sp]
   199d4:	add	sp, sp, #4
   199d8:	mov	r0, r2
   199dc:	pop	{pc}		; (ldr pc, [sp], #4)
   199e0:	strd	r4, [sp, #-8]!
   199e4:	ldrd	r2, [r1]
   199e8:	ldrd	r4, [r0]
   199ec:	cmp	r5, r3
   199f0:	cmpeq	r4, r2
   199f4:	ldrd	r4, [sp]
   199f8:	add	sp, sp, #8
   199fc:	moveq	r0, #1
   19a00:	movne	r0, #0
   19a04:	bx	lr
   19a08:	ldr	r2, [r0]
   19a0c:	ldr	r3, [r1]
   19a10:	ldrd	r0, [r2, #160]	; 0xa0
   19a14:	ldrd	r2, [r3, #160]	; 0xa0
   19a18:	cmp	r1, r3
   19a1c:	cmpeq	r0, r2
   19a20:	movhi	r0, #1
   19a24:	movls	r0, #0
   19a28:	movcc	r3, #1
   19a2c:	movcs	r3, #0
   19a30:	sub	r0, r0, r3
   19a34:	bx	lr
   19a38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19a3c:	mov	r5, r2
   19a40:	mov	r4, r1
   19a44:	ldr	r2, [r0, #40]	; 0x28
   19a48:	strd	r6, [sp, #8]
   19a4c:	mov	r6, r0
   19a50:	str	r8, [sp, #16]
   19a54:	str	lr, [sp, #20]
   19a58:	ldr	r0, [r0, #8]
   19a5c:	cmp	r2, r5
   19a60:	ldr	r7, [r6, #44]	; 0x2c
   19a64:	bcs	19a8c <__assert_fail@plt+0x7ee8>
   19a68:	add	r1, r5, #40	; 0x28
   19a6c:	cmn	r1, #-1073741823	; 0xc0000001
   19a70:	str	r1, [r6, #40]	; 0x28
   19a74:	bhi	19b0c <__assert_fail@plt+0x7f68>
   19a78:	lsl	r1, r1, #2
   19a7c:	bl	39064 <__assert_fail@plt+0x274c0>
   19a80:	cmp	r0, #0
   19a84:	strne	r0, [r6, #8]
   19a88:	beq	19b08 <__assert_fail@plt+0x7f64>
   19a8c:	cmp	r4, #0
   19a90:	movne	r2, r0
   19a94:	beq	19aa8 <__assert_fail@plt+0x7f04>
   19a98:	str	r4, [r2], #4
   19a9c:	ldr	r4, [r4, #8]
   19aa0:	cmp	r4, #0
   19aa4:	bne	19a98 <__assert_fail@plt+0x7ef4>
   19aa8:	mov	r3, r7
   19aac:	mov	r2, #4
   19ab0:	mov	r1, r5
   19ab4:	bl	11b08 <qsort@plt>
   19ab8:	ldr	lr, [r6, #8]
   19abc:	subs	r3, r5, #1
   19ac0:	ldr	r0, [lr]
   19ac4:	moveq	r2, r0
   19ac8:	beq	19aec <__assert_fail@plt+0x7f48>
   19acc:	mov	r2, lr
   19ad0:	ldr	r1, [r2]
   19ad4:	subs	r3, r3, #1
   19ad8:	ldr	ip, [r2, #4]!
   19adc:	str	ip, [r1, #8]
   19ae0:	bne	19ad0 <__assert_fail@plt+0x7f2c>
   19ae4:	add	r5, lr, r5, lsl #2
   19ae8:	ldr	r2, [r5, #-4]
   19aec:	mov	r3, #0
   19af0:	str	r3, [r2, #8]
   19af4:	ldrd	r4, [sp]
   19af8:	ldrd	r6, [sp, #8]
   19afc:	ldr	r8, [sp, #16]
   19b00:	add	sp, sp, #20
   19b04:	pop	{pc}		; (ldr pc, [sp], #4)
   19b08:	ldr	r0, [r6, #8]
   19b0c:	bl	19610 <__assert_fail@plt+0x7a6c>
   19b10:	mov	r3, #0
   19b14:	mov	r0, r4
   19b18:	str	r3, [r6, #8]
   19b1c:	str	r3, [r6, #40]	; 0x28
   19b20:	b	19af4 <__assert_fail@plt+0x7f50>
   19b24:	strd	r4, [sp, #-20]!	; 0xffffffec
   19b28:	ldr	r5, [r0, #44]	; 0x2c
   19b2c:	ldr	r3, [r5, #48]	; 0x30
   19b30:	strd	r6, [sp, #8]
   19b34:	str	lr, [sp, #16]
   19b38:	sub	sp, sp, #100	; 0x64
   19b3c:	tst	r3, #512	; 0x200
   19b40:	beq	19bd0 <__assert_fail@plt+0x802c>
   19b44:	ldr	r4, [r5, #52]	; 0x34
   19b48:	mov	r7, r1
   19b4c:	mov	r6, r0
   19b50:	cmp	r4, #0
   19b54:	beq	19b7c <__assert_fail@plt+0x7fd8>
   19b58:	ldrd	r2, [r6, #64]	; 0x40
   19b5c:	add	r1, sp, #8
   19b60:	mov	r0, r4
   19b64:	strd	r2, [sp, #8]
   19b68:	bl	1c5b8 <__assert_fail@plt+0xaa14>
   19b6c:	cmp	r0, #0
   19b70:	beq	19bb4 <__assert_fail@plt+0x8010>
   19b74:	ldr	r0, [r0, #8]
   19b78:	b	19bd4 <__assert_fail@plt+0x8030>
   19b7c:	movw	r0, #38416	; 0x9610
   19b80:	movt	r0, #1
   19b84:	mov	r1, r4
   19b88:	movw	r3, #39392	; 0x99e0
   19b8c:	movt	r3, #1
   19b90:	movw	r2, #39352	; 0x99b8
   19b94:	movt	r2, #1
   19b98:	str	r0, [sp]
   19b9c:	mov	r0, #13
   19ba0:	bl	1c93c <__assert_fail@plt+0xad98>
   19ba4:	cmp	r0, #0
   19ba8:	mov	r4, r0
   19bac:	str	r0, [r5, #52]	; 0x34
   19bb0:	bne	19b58 <__assert_fail@plt+0x7fb4>
   19bb4:	cmp	r7, #0
   19bb8:	blt	19bd0 <__assert_fail@plt+0x802c>
   19bbc:	mov	r0, r7
   19bc0:	add	r1, sp, #8
   19bc4:	bl	116a0 <fstatfs64@plt>
   19bc8:	cmp	r0, #0
   19bcc:	beq	19be8 <__assert_fail@plt+0x8044>
   19bd0:	mov	r0, #0
   19bd4:	add	sp, sp, #100	; 0x64
   19bd8:	ldrd	r4, [sp]
   19bdc:	ldrd	r6, [sp, #8]
   19be0:	add	sp, sp, #16
   19be4:	pop	{pc}		; (ldr pc, [sp], #4)
   19be8:	cmp	r4, #0
   19bec:	beq	19c2c <__assert_fail@plt+0x8088>
   19bf0:	mov	r0, #16
   19bf4:	bl	39028 <__assert_fail@plt+0x27484>
   19bf8:	subs	r5, r0, #0
   19bfc:	beq	19c2c <__assert_fail@plt+0x8088>
   19c00:	ldr	ip, [sp, #8]
   19c04:	mov	r0, r4
   19c08:	mov	r1, r5
   19c0c:	ldrd	r2, [r6, #64]	; 0x40
   19c10:	strd	r2, [r5]
   19c14:	str	ip, [r5, #8]
   19c18:	bl	1d1a4 <__assert_fail@plt+0xb600>
   19c1c:	cmp	r0, #0
   19c20:	beq	19c34 <__assert_fail@plt+0x8090>
   19c24:	cmp	r5, r0
   19c28:	bne	19c40 <__assert_fail@plt+0x809c>
   19c2c:	ldr	r0, [sp, #8]
   19c30:	b	19bd4 <__assert_fail@plt+0x8030>
   19c34:	mov	r0, r5
   19c38:	bl	19610 <__assert_fail@plt+0x7a6c>
   19c3c:	b	19c2c <__assert_fail@plt+0x8088>
   19c40:	bl	11b68 <abort@plt>
   19c44:	ldr	ip, [r2, #48]	; 0x30
   19c48:	strd	r4, [sp, #-16]!
   19c4c:	mov	r4, r2
   19c50:	add	r5, r2, #64	; 0x40
   19c54:	ldr	r2, [r2, #24]
   19c58:	str	r6, [sp, #8]
   19c5c:	str	lr, [sp, #12]
   19c60:	sub	sp, sp, #8
   19c64:	cmp	ip, #0
   19c68:	bne	19ce0 <__assert_fail@plt+0x813c>
   19c6c:	tst	r1, #1
   19c70:	beq	19ce0 <__assert_fail@plt+0x813c>
   19c74:	mov	r1, r2
   19c78:	mov	r0, #3
   19c7c:	mov	r2, r5
   19c80:	bl	11b38 <__xstat64@plt>
   19c84:	cmp	r0, #0
   19c88:	beq	19d0c <__assert_fail@plt+0x8168>
   19c8c:	bl	119b8 <__errno_location@plt>
   19c90:	ldr	r3, [r0]
   19c94:	mov	r6, r0
   19c98:	cmp	r3, #2
   19c9c:	bne	19cc4 <__assert_fail@plt+0x8120>
   19ca0:	mov	r2, r5
   19ca4:	mov	r0, #3
   19ca8:	ldr	r1, [r4, #24]
   19cac:	bl	11b8c <__lxstat64@plt>
   19cb0:	subs	r3, r0, #0
   19cb4:	moveq	r0, #13
   19cb8:	streq	r3, [r6]
   19cbc:	beq	19d30 <__assert_fail@plt+0x818c>
   19cc0:	ldr	r3, [r6]
   19cc4:	mov	r0, r5
   19cc8:	mov	r2, #104	; 0x68
   19ccc:	str	r3, [r4, #32]
   19cd0:	mov	r1, #0
   19cd4:	bl	119e8 <memset@plt>
   19cd8:	mov	r0, #10
   19cdc:	b	19d30 <__assert_fail@plt+0x818c>
   19ce0:	ubfx	ip, r1, #1, #1
   19ce4:	orrs	r3, r3, ip
   19ce8:	bne	19c74 <__assert_fail@plt+0x80d0>
   19cec:	mov	ip, #256	; 0x100
   19cf0:	mov	r1, r0
   19cf4:	mov	r3, r5
   19cf8:	mov	r0, #3
   19cfc:	str	ip, [sp]
   19d00:	bl	11820 <__fxstatat64@plt>
   19d04:	cmp	r0, #0
   19d08:	bne	19d8c <__assert_fail@plt+0x81e8>
   19d0c:	ldr	r3, [r4, #80]	; 0x50
   19d10:	and	r3, r3, #61440	; 0xf000
   19d14:	cmp	r3, #16384	; 0x4000
   19d18:	beq	19d44 <__assert_fail@plt+0x81a0>
   19d1c:	cmp	r3, #40960	; 0xa000
   19d20:	beq	19d98 <__assert_fail@plt+0x81f4>
   19d24:	cmp	r3, #32768	; 0x8000
   19d28:	movne	r0, #3
   19d2c:	moveq	r0, #8
   19d30:	add	sp, sp, #8
   19d34:	ldrd	r4, [sp]
   19d38:	ldr	r6, [sp, #8]
   19d3c:	add	sp, sp, #12
   19d40:	pop	{pc}		; (ldr pc, [sp], #4)
   19d44:	ldrb	r3, [r4, #168]	; 0xa8
   19d48:	cmp	r3, #46	; 0x2e
   19d4c:	bne	19d70 <__assert_fail@plt+0x81cc>
   19d50:	ldrb	r3, [r4, #169]	; 0xa9
   19d54:	cmp	r3, #0
   19d58:	beq	19d78 <__assert_fail@plt+0x81d4>
   19d5c:	ldr	r3, [r4, #168]	; 0xa8
   19d60:	bic	r3, r3, #-16777216	; 0xff000000
   19d64:	bic	r3, r3, #255	; 0xff
   19d68:	cmp	r3, #11776	; 0x2e00
   19d6c:	beq	19d78 <__assert_fail@plt+0x81d4>
   19d70:	mov	r0, #1
   19d74:	b	19d30 <__assert_fail@plt+0x818c>
   19d78:	ldr	r3, [r4, #48]	; 0x30
   19d7c:	cmp	r3, #0
   19d80:	moveq	r0, #1
   19d84:	movne	r0, #5
   19d88:	b	19d30 <__assert_fail@plt+0x818c>
   19d8c:	bl	119b8 <__errno_location@plt>
   19d90:	ldr	r3, [r0]
   19d94:	b	19cc4 <__assert_fail@plt+0x8120>
   19d98:	mov	r0, #12
   19d9c:	b	19d30 <__assert_fail@plt+0x818c>
   19da0:	movw	r3, #258	; 0x102
   19da4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19da8:	tst	r0, r3
   19dac:	strd	r6, [sp, #8]
   19db0:	strd	r8, [sp, #16]
   19db4:	mov	r8, r2
   19db8:	str	sl, [sp, #24]
   19dbc:	mov	sl, r1
   19dc0:	str	lr, [sp, #28]
   19dc4:	beq	19e48 <__assert_fail@plt+0x82a4>
   19dc8:	mov	r0, #24
   19dcc:	bl	39028 <__assert_fail@plt+0x27484>
   19dd0:	subs	r9, r0, #0
   19dd4:	beq	19e6c <__assert_fail@plt+0x82c8>
   19dd8:	ldrd	r6, [r8, #64]	; 0x40
   19ddc:	mov	r1, r9
   19de0:	ldrd	r4, [r8, #160]	; 0xa0
   19de4:	ldr	r0, [sl]
   19de8:	strd	r6, [r9]
   19dec:	str	r8, [r9, #16]
   19df0:	strd	r4, [r9, #8]
   19df4:	bl	1d1a4 <__assert_fail@plt+0xb600>
   19df8:	cmp	r9, r0
   19dfc:	mov	r4, r0
   19e00:	beq	19e2c <__assert_fail@plt+0x8288>
   19e04:	mov	r0, r9
   19e08:	bl	19610 <__assert_fail@plt+0x7a6c>
   19e0c:	cmp	r4, #0
   19e10:	beq	19e6c <__assert_fail@plt+0x82c8>
   19e14:	ldr	r3, [r4, #16]
   19e18:	mov	r2, #2
   19e1c:	mov	r0, #1
   19e20:	str	r3, [r8]
   19e24:	strh	r2, [r8, #56]	; 0x38
   19e28:	b	19e30 <__assert_fail@plt+0x828c>
   19e2c:	mov	r0, #1
   19e30:	ldrd	r4, [sp]
   19e34:	ldrd	r6, [sp, #8]
   19e38:	ldrd	r8, [sp, #16]
   19e3c:	ldr	sl, [sp, #24]
   19e40:	add	sp, sp, #28
   19e44:	pop	{pc}		; (ldr pc, [sp], #4)
   19e48:	add	r1, r2, #64	; 0x40
   19e4c:	ldr	r0, [sl]
   19e50:	bl	39afc <__assert_fail@plt+0x27f58>
   19e54:	cmp	r0, #0
   19e58:	beq	19e2c <__assert_fail@plt+0x8288>
   19e5c:	mov	r3, #2
   19e60:	str	r8, [r8]
   19e64:	strh	r3, [r8, #56]	; 0x38
   19e68:	b	19e30 <__assert_fail@plt+0x828c>
   19e6c:	mov	r0, #0
   19e70:	b	19e30 <__assert_fail@plt+0x828c>
   19e74:	movw	r3, #258	; 0x102
   19e78:	mov	ip, r1
   19e7c:	strd	r4, [sp, #-12]!
   19e80:	tst	r0, r3
   19e84:	str	lr, [sp, #8]
   19e88:	sub	sp, sp, #28
   19e8c:	bne	19edc <__assert_fail@plt+0x8338>
   19e90:	ldr	r3, [r2, #4]
   19e94:	cmp	r3, #0
   19e98:	beq	19ecc <__assert_fail@plt+0x8328>
   19e9c:	ldr	r1, [r3, #48]	; 0x30
   19ea0:	cmp	r1, #0
   19ea4:	blt	19ecc <__assert_fail@plt+0x8328>
   19ea8:	ldr	ip, [ip]
   19eac:	ldrd	r0, [ip, #16]
   19eb0:	orrs	r1, r0, r1
   19eb4:	beq	19f3c <__assert_fail@plt+0x8398>
   19eb8:	ldrd	r4, [ip]
   19ebc:	ldrd	r0, [r2, #160]	; 0xa0
   19ec0:	cmp	r5, r1
   19ec4:	cmpeq	r4, r0
   19ec8:	beq	19f14 <__assert_fail@plt+0x8370>
   19ecc:	add	sp, sp, #28
   19ed0:	ldrd	r4, [sp]
   19ed4:	add	sp, sp, #8
   19ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   19edc:	ldrd	r4, [r2, #64]	; 0x40
   19ee0:	mov	r1, sp
   19ee4:	ldrd	r2, [r2, #160]	; 0xa0
   19ee8:	ldr	r0, [ip]
   19eec:	strd	r4, [sp]
   19ef0:	strd	r2, [sp, #8]
   19ef4:	bl	1d3c8 <__assert_fail@plt+0xb824>
   19ef8:	cmp	r0, #0
   19efc:	beq	19f3c <__assert_fail@plt+0x8398>
   19f00:	bl	19610 <__assert_fail@plt+0x7a6c>
   19f04:	add	sp, sp, #28
   19f08:	ldrd	r4, [sp]
   19f0c:	add	sp, sp, #8
   19f10:	pop	{pc}		; (ldr pc, [sp], #4)
   19f14:	ldrd	r0, [ip, #8]
   19f18:	ldrd	r4, [r2, #64]	; 0x40
   19f1c:	cmp	r1, r5
   19f20:	cmpeq	r0, r4
   19f24:	bne	19ecc <__assert_fail@plt+0x8328>
   19f28:	ldrd	r0, [r3, #64]	; 0x40
   19f2c:	ldrd	r2, [r3, #160]	; 0xa0
   19f30:	strd	r2, [ip]
   19f34:	strd	r0, [ip, #8]
   19f38:	b	19ecc <__assert_fail@plt+0x8328>
   19f3c:	bl	11b68 <abort@plt>
   19f40:	ldr	r3, [r0, #48]	; 0x30
   19f44:	strd	r4, [sp, #-16]!
   19f48:	add	r5, r0, #60	; 0x3c
   19f4c:	str	r6, [sp, #8]
   19f50:	str	lr, [sp, #12]
   19f54:	ands	r6, r3, #4
   19f58:	movne	r6, #0
   19f5c:	bne	19f98 <__assert_fail@plt+0x83f4>
   19f60:	tst	r3, #512	; 0x200
   19f64:	mov	r4, r0
   19f68:	beq	19fc8 <__assert_fail@plt+0x8424>
   19f6c:	mov	r0, r5
   19f70:	ldr	r1, [r4, #32]
   19f74:	bl	1e81c <__assert_fail@plt+0xcc78>
   19f78:	cmp	r0, #0
   19f7c:	bge	19fdc <__assert_fail@plt+0x8438>
   19f80:	mvn	r3, #99	; 0x63
   19f84:	str	r3, [r4, #32]
   19f88:	b	19f98 <__assert_fail@plt+0x83f4>
   19f8c:	bl	1e864 <__assert_fail@plt+0xccc0>
   19f90:	cmp	r0, #0
   19f94:	bge	19fc0 <__assert_fail@plt+0x841c>
   19f98:	mov	r0, r5
   19f9c:	bl	1e814 <__assert_fail@plt+0xcc70>
   19fa0:	cmp	r0, #0
   19fa4:	mov	r0, r5
   19fa8:	beq	19f8c <__assert_fail@plt+0x83e8>
   19fac:	mov	r0, r6
   19fb0:	ldrd	r4, [sp]
   19fb4:	ldr	r6, [sp, #8]
   19fb8:	add	sp, sp, #12
   19fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   19fc0:	bl	11b80 <close@plt>
   19fc4:	b	19f98 <__assert_fail@plt+0x83f4>
   19fc8:	ldr	r0, [r0, #28]
   19fcc:	bl	11ae4 <fchdir@plt>
   19fd0:	adds	r6, r0, #0
   19fd4:	movne	r6, #1
   19fd8:	b	19f98 <__assert_fail@plt+0x83f4>
   19fdc:	bl	11b80 <close@plt>
   19fe0:	mvn	r3, #99	; 0x63
   19fe4:	str	r3, [r4, #32]
   19fe8:	b	19f98 <__assert_fail@plt+0x83f4>
   19fec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19ff0:	mov	r5, r0
   19ff4:	mov	r4, r2
   19ff8:	strd	r6, [sp, #8]
   19ffc:	strd	r8, [sp, #16]
   1a000:	mov	r8, r1
   1a004:	ldr	r9, [r0, #48]	; 0x30
   1a008:	str	sl, [sp, #24]
   1a00c:	subs	sl, r3, #0
   1a010:	str	lr, [sp, #28]
   1a014:	sub	sp, sp, #104	; 0x68
   1a018:	and	r6, r9, #4
   1a01c:	beq	1a118 <__assert_fail@plt+0x8574>
   1a020:	movw	r1, #49316	; 0xc0a4
   1a024:	movt	r1, #3
   1a028:	mov	r0, sl
   1a02c:	bl	1170c <strcmp@plt>
   1a030:	cmp	r0, #0
   1a034:	bne	1a118 <__assert_fail@plt+0x8574>
   1a038:	cmp	r6, #0
   1a03c:	bne	1a158 <__assert_fail@plt+0x85b4>
   1a040:	cmp	r4, #0
   1a044:	bge	1a294 <__assert_fail@plt+0x86f0>
   1a048:	tst	r9, #512	; 0x200
   1a04c:	beq	1a19c <__assert_fail@plt+0x85f8>
   1a050:	add	r6, r5, #60	; 0x3c
   1a054:	mov	r0, r6
   1a058:	bl	1e814 <__assert_fail@plt+0xcc70>
   1a05c:	cmp	r0, #0
   1a060:	beq	1a21c <__assert_fail@plt+0x8678>
   1a064:	lsl	r2, r9, #11
   1a068:	mov	r6, #1
   1a06c:	and	r2, r2, #32768	; 0x8000
   1a070:	orr	r2, r2, #540672	; 0x84000
   1a074:	orr	r2, r2, #2304	; 0x900
   1a078:	mov	r1, sl
   1a07c:	ldr	r0, [r5, #32]
   1a080:	bl	1fd88 <__assert_fail@plt+0xe1e4>
   1a084:	mov	r7, r0
   1a088:	cmp	r7, #0
   1a08c:	blt	1a28c <__assert_fail@plt+0x86e8>
   1a090:	ldr	r9, [r5, #48]	; 0x30
   1a094:	tst	r9, #2
   1a098:	beq	1a134 <__assert_fail@plt+0x8590>
   1a09c:	mov	r2, sp
   1a0a0:	mov	r1, r7
   1a0a4:	mov	r0, #3
   1a0a8:	bl	11850 <__fxstat64@plt>
   1a0ac:	cmp	r0, #0
   1a0b0:	bne	1a194 <__assert_fail@plt+0x85f0>
   1a0b4:	ldrd	r2, [sp]
   1a0b8:	ldrd	r0, [r8, #64]	; 0x40
   1a0bc:	cmp	r1, r3
   1a0c0:	cmpeq	r0, r2
   1a0c4:	bne	1a188 <__assert_fail@plt+0x85e4>
   1a0c8:	ldrd	r2, [sp, #96]	; 0x60
   1a0cc:	ldrd	r0, [r8, #160]	; 0xa0
   1a0d0:	cmp	r1, r3
   1a0d4:	cmpeq	r0, r2
   1a0d8:	bne	1a188 <__assert_fail@plt+0x85e4>
   1a0dc:	ldr	r9, [r5, #48]	; 0x30
   1a0e0:	tst	r9, #512	; 0x200
   1a0e4:	bne	1a1c4 <__assert_fail@plt+0x8620>
   1a0e8:	mov	r0, r7
   1a0ec:	bl	11ae4 <fchdir@plt>
   1a0f0:	mov	r9, r0
   1a0f4:	cmp	r4, #0
   1a0f8:	bge	1a168 <__assert_fail@plt+0x85c4>
   1a0fc:	bl	119b8 <__errno_location@plt>
   1a100:	mov	r4, r0
   1a104:	mov	r0, r7
   1a108:	ldr	r5, [r4]
   1a10c:	bl	11b80 <close@plt>
   1a110:	str	r5, [r4]
   1a114:	b	1a168 <__assert_fail@plt+0x85c4>
   1a118:	cmp	r6, #0
   1a11c:	bne	1a158 <__assert_fail@plt+0x85b4>
   1a120:	cmp	r4, #0
   1a124:	movge	r7, r4
   1a128:	blt	1a24c <__assert_fail@plt+0x86a8>
   1a12c:	tst	r9, #2
   1a130:	bne	1a09c <__assert_fail@plt+0x84f8>
   1a134:	cmp	sl, #0
   1a138:	beq	1a0e0 <__assert_fail@plt+0x853c>
   1a13c:	mov	r0, sl
   1a140:	movw	r1, #49316	; 0xc0a4
   1a144:	movt	r1, #3
   1a148:	bl	1170c <strcmp@plt>
   1a14c:	cmp	r0, #0
   1a150:	bne	1a0e0 <__assert_fail@plt+0x853c>
   1a154:	b	1a09c <__assert_fail@plt+0x84f8>
   1a158:	mvn	r3, r4
   1a15c:	lsr	r3, r3, #31
   1a160:	ands	r9, r3, r9, lsr #9
   1a164:	bne	1a20c <__assert_fail@plt+0x8668>
   1a168:	mov	r0, r9
   1a16c:	add	sp, sp, #104	; 0x68
   1a170:	ldrd	r4, [sp]
   1a174:	ldrd	r6, [sp, #8]
   1a178:	ldrd	r8, [sp, #16]
   1a17c:	ldr	sl, [sp, #24]
   1a180:	add	sp, sp, #28
   1a184:	pop	{pc}		; (ldr pc, [sp], #4)
   1a188:	bl	119b8 <__errno_location@plt>
   1a18c:	mov	r3, #2
   1a190:	str	r3, [r0]
   1a194:	mvn	r9, #0
   1a198:	b	1a0f4 <__assert_fail@plt+0x8550>
   1a19c:	lsl	r2, r9, #11
   1a1a0:	mov	r6, #1
   1a1a4:	and	r2, r2, #32768	; 0x8000
   1a1a8:	orr	r2, r2, #540672	; 0x84000
   1a1ac:	orr	r2, r2, #2304	; 0x900
   1a1b0:	mov	r1, r2
   1a1b4:	mov	r0, sl
   1a1b8:	bl	39ea8 <__assert_fail@plt+0x28304>
   1a1bc:	mov	r7, r0
   1a1c0:	b	1a088 <__assert_fail@plt+0x84e4>
   1a1c4:	ldr	r1, [r5, #32]
   1a1c8:	sub	r3, r1, r7
   1a1cc:	cmn	r1, #100	; 0x64
   1a1d0:	clz	r3, r3
   1a1d4:	lsr	r3, r3, #5
   1a1d8:	moveq	r3, #0
   1a1dc:	cmp	r3, #0
   1a1e0:	bne	1a2a8 <__assert_fail@plt+0x8704>
   1a1e4:	cmp	r6, #0
   1a1e8:	beq	1a26c <__assert_fail@plt+0x86c8>
   1a1ec:	mvn	r3, r1
   1a1f0:	eor	r9, r9, #4
   1a1f4:	lsr	r3, r3, #31
   1a1f8:	ands	r3, r3, r9, lsr #2
   1a1fc:	bne	1a284 <__assert_fail@plt+0x86e0>
   1a200:	mov	r9, #0
   1a204:	str	r7, [r5, #32]
   1a208:	b	1a168 <__assert_fail@plt+0x85c4>
   1a20c:	mov	r0, r4
   1a210:	mov	r9, #0
   1a214:	bl	11b80 <close@plt>
   1a218:	b	1a168 <__assert_fail@plt+0x85c4>
   1a21c:	mov	r0, r6
   1a220:	bl	1e864 <__assert_fail@plt+0xccc0>
   1a224:	ldr	r9, [r5, #48]	; 0x30
   1a228:	subs	r7, r0, #0
   1a22c:	movlt	r6, #1
   1a230:	andlt	r3, r9, #512	; 0x200
   1a234:	blt	1a250 <__assert_fail@plt+0x86ac>
   1a238:	tst	r9, #2
   1a23c:	mov	r4, r7
   1a240:	mov	r6, #1
   1a244:	beq	1a0e0 <__assert_fail@plt+0x853c>
   1a248:	b	1a09c <__assert_fail@plt+0x84f8>
   1a24c:	and	r3, r9, #512	; 0x200
   1a250:	lsl	r2, r9, #11
   1a254:	cmp	r3, #0
   1a258:	and	r2, r2, #32768	; 0x8000
   1a25c:	orr	r2, r2, #540672	; 0x84000
   1a260:	orr	r2, r2, #2304	; 0x900
   1a264:	bne	1a078 <__assert_fail@plt+0x84d4>
   1a268:	b	1a1b0 <__assert_fail@plt+0x860c>
   1a26c:	add	r0, r5, #60	; 0x3c
   1a270:	bl	1e81c <__assert_fail@plt+0xcc78>
   1a274:	cmp	r0, #0
   1a278:	blt	1a200 <__assert_fail@plt+0x865c>
   1a27c:	bl	11b80 <close@plt>
   1a280:	b	1a200 <__assert_fail@plt+0x865c>
   1a284:	mov	r0, r1
   1a288:	b	1a27c <__assert_fail@plt+0x86d8>
   1a28c:	mvn	r9, #0
   1a290:	b	1a168 <__assert_fail@plt+0x85c4>
   1a294:	tst	r9, #2
   1a298:	mov	r7, r4
   1a29c:	mov	r6, #1
   1a2a0:	beq	1a13c <__assert_fail@plt+0x8598>
   1a2a4:	b	1a09c <__assert_fail@plt+0x84f8>
   1a2a8:	bl	11b68 <abort@plt>
   1a2ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a2b0:	strd	r6, [sp, #8]
   1a2b4:	mov	r6, r0
   1a2b8:	strd	sl, [sp, #24]
   1a2bc:	ldr	fp, [r0]
   1a2c0:	strd	r8, [sp, #16]
   1a2c4:	str	lr, [sp, #32]
   1a2c8:	sub	sp, sp, #76	; 0x4c
   1a2cc:	str	r1, [sp, #40]	; 0x28
   1a2d0:	ldr	r0, [fp, #12]
   1a2d4:	cmp	r0, #0
   1a2d8:	str	r0, [sp, #48]	; 0x30
   1a2dc:	beq	1a74c <__assert_fail@plt+0x8ba8>
   1a2e0:	bl	11ad8 <dirfd@plt>
   1a2e4:	cmp	r0, #0
   1a2e8:	str	r0, [sp, #68]	; 0x44
   1a2ec:	blt	1acc0 <__assert_fail@plt+0x911c>
   1a2f0:	ldr	r3, [r6, #44]	; 0x2c
   1a2f4:	cmp	r3, #0
   1a2f8:	beq	1ab6c <__assert_fail@plt+0x8fc8>
   1a2fc:	ldr	r3, [r6, #48]	; 0x30
   1a300:	mvn	r2, #0
   1a304:	str	r2, [sp, #28]
   1a308:	mov	r2, #1
   1a30c:	str	r2, [sp, #60]	; 0x3c
   1a310:	ldr	r1, [fp, #28]
   1a314:	ldr	r0, [fp, #40]	; 0x28
   1a318:	sub	r2, r0, #1
   1a31c:	str	r0, [sp, #4]
   1a320:	ldrb	r1, [r1, r2]
   1a324:	cmp	r1, #47	; 0x2f
   1a328:	beq	1a338 <__assert_fail@plt+0x8794>
   1a32c:	add	r1, r0, #1
   1a330:	mov	r2, r0
   1a334:	str	r1, [sp, #4]
   1a338:	ands	r3, r3, #4
   1a33c:	streq	r3, [sp, #32]
   1a340:	beq	1a35c <__assert_fail@plt+0x87b8>
   1a344:	ldr	r3, [r6, #24]
   1a348:	mov	r0, #47	; 0x2f
   1a34c:	add	r1, r3, r2
   1a350:	strb	r0, [r3, r2]
   1a354:	add	r3, r1, #1
   1a358:	str	r3, [sp, #32]
   1a35c:	movw	r3, #6548	; 0x1994
   1a360:	movt	r3, #258	; 0x102
   1a364:	ldr	r2, [r6, #36]	; 0x24
   1a368:	movw	r0, #19778	; 0x4d42
   1a36c:	movt	r0, #65363	; 0xff53
   1a370:	str	fp, [sp, #16]
   1a374:	str	r3, [sp, #52]	; 0x34
   1a378:	mov	r1, #0
   1a37c:	ldr	r3, [fp, #48]	; 0x30
   1a380:	mov	r9, r1
   1a384:	mov	fp, r1
   1a388:	str	r0, [sp, #56]	; 0x38
   1a38c:	ldr	r0, [sp, #4]
   1a390:	str	r1, [sp, #12]
   1a394:	str	r1, [sp, #36]	; 0x24
   1a398:	add	r3, r3, #1
   1a39c:	sub	r2, r2, r0
   1a3a0:	str	r1, [sp, #44]	; 0x2c
   1a3a4:	str	r2, [sp, #20]
   1a3a8:	str	r3, [sp, #24]
   1a3ac:	b	1a3c4 <__assert_fail@plt+0x8820>
   1a3b0:	ldr	r3, [sp, #28]
   1a3b4:	add	r9, r9, #1
   1a3b8:	cmp	r9, r3
   1a3bc:	bcs	1a8a8 <__assert_fail@plt+0x8d04>
   1a3c0:	mov	fp, r4
   1a3c4:	ldr	r3, [sp, #16]
   1a3c8:	ldr	r4, [r3, #12]
   1a3cc:	cmp	r4, #0
   1a3d0:	beq	1a9e8 <__assert_fail@plt+0x8e44>
   1a3d4:	bl	119b8 <__errno_location@plt>
   1a3d8:	mov	sl, r0
   1a3dc:	mov	r3, #0
   1a3e0:	mov	r0, r4
   1a3e4:	str	r3, [sl]
   1a3e8:	bl	11ab4 <readdir64@plt>
   1a3ec:	subs	r7, r0, #0
   1a3f0:	beq	1aabc <__assert_fail@plt+0x8f18>
   1a3f4:	ldr	r3, [r6, #48]	; 0x30
   1a3f8:	tst	r3, #32
   1a3fc:	bne	1a40c <__assert_fail@plt+0x8868>
   1a400:	ldrb	r3, [r7, #19]
   1a404:	cmp	r3, #46	; 0x2e
   1a408:	beq	1a60c <__assert_fail@plt+0x8a68>
   1a40c:	add	r1, r7, #19
   1a410:	mov	r0, r1
   1a414:	str	r1, [sp, #8]
   1a418:	bl	11988 <strlen@plt>
   1a41c:	mov	r5, r0
   1a420:	add	r0, r0, #176	; 0xb0
   1a424:	bic	r0, r0, #7
   1a428:	bl	39028 <__assert_fail@plt+0x27484>
   1a42c:	subs	r4, r0, #0
   1a430:	beq	1a640 <__assert_fail@plt+0x8a9c>
   1a434:	add	r8, r4, #168	; 0xa8
   1a438:	mov	r2, r5
   1a43c:	ldr	r1, [sp, #8]
   1a440:	mov	r0, r8
   1a444:	bl	11784 <memcpy@plt>
   1a448:	ldr	r3, [sp, #20]
   1a44c:	mov	r1, #0
   1a450:	add	r0, r4, r5
   1a454:	mov	ip, #196608	; 0x30000
   1a458:	ldr	r2, [r6, #24]
   1a45c:	strb	r1, [r0, #168]	; 0xa8
   1a460:	str	r1, [r4, #12]
   1a464:	cmp	r3, r5
   1a468:	str	r1, [r4, #16]
   1a46c:	str	r1, [r4, #20]
   1a470:	str	r2, [r4, #28]
   1a474:	str	r1, [r4, #32]
   1a478:	str	r6, [r4, #44]	; 0x2c
   1a47c:	str	r5, [r4, #52]	; 0x34
   1a480:	str	ip, [r4, #58]	; 0x3a
   1a484:	bls	1a548 <__assert_fail@plt+0x89a4>
   1a488:	ldr	r3, [sp, #4]
   1a48c:	adds	r5, r5, r3
   1a490:	bcs	1ada8 <__assert_fail@plt+0x9204>
   1a494:	ldr	r3, [sp, #24]
   1a498:	str	r5, [r4, #40]	; 0x28
   1a49c:	ldr	ip, [r6]
   1a4a0:	ldr	r1, [r6, #48]	; 0x30
   1a4a4:	str	r3, [r4, #48]	; 0x30
   1a4a8:	ldrd	r2, [r7]
   1a4ac:	str	ip, [r4, #4]
   1a4b0:	tst	r1, #4
   1a4b4:	streq	r8, [r4, #24]
   1a4b8:	strd	r2, [r4, #160]	; 0xa0
   1a4bc:	bne	1a5e8 <__assert_fail@plt+0x8a44>
   1a4c0:	ldr	r3, [r6, #44]	; 0x2c
   1a4c4:	cmp	r3, #0
   1a4c8:	beq	1a4d4 <__assert_fail@plt+0x8930>
   1a4cc:	ands	r3, r1, #1024	; 0x400
   1a4d0:	beq	1a62c <__assert_fail@plt+0x8a88>
   1a4d4:	ldrb	r3, [r7, #18]
   1a4d8:	tst	r1, #8
   1a4dc:	sub	r0, r3, #1
   1a4e0:	beq	1a4ec <__assert_fail@plt+0x8948>
   1a4e4:	tst	r3, #251	; 0xfb
   1a4e8:	bne	1a6e8 <__assert_fail@plt+0x8b44>
   1a4ec:	mov	r3, #11
   1a4f0:	cmp	r0, r3
   1a4f4:	strh	r3, [r4, #56]	; 0x38
   1a4f8:	bls	1a5cc <__assert_fail@plt+0x8a28>
   1a4fc:	mov	r1, #0
   1a500:	mov	r2, #2
   1a504:	mov	r3, #0
   1a508:	str	r1, [r4, #80]	; 0x50
   1a50c:	strd	r2, [r4, #112]	; 0x70
   1a510:	ldr	r2, [sp, #12]
   1a514:	mov	r3, #0
   1a518:	str	r3, [r4, #8]
   1a51c:	cmp	r2, r3
   1a520:	movw	r3, #10000	; 0x2710
   1a524:	strne	r4, [fp, #8]
   1a528:	streq	r4, [sp, #12]
   1a52c:	cmp	r9, r3
   1a530:	bne	1a3b0 <__assert_fail@plt+0x880c>
   1a534:	ldr	r5, [r6, #44]	; 0x2c
   1a538:	cmp	r5, #0
   1a53c:	beq	1a85c <__assert_fail@plt+0x8cb8>
   1a540:	movw	r9, #10001	; 0x2711
   1a544:	b	1a3c0 <__assert_fail@plt+0x881c>
   1a548:	ldr	ip, [r6, #36]	; 0x24
   1a54c:	ldr	r3, [sp, #4]
   1a550:	add	r0, ip, #256	; 0x100
   1a554:	add	r0, r0, #1
   1a558:	add	r0, r0, r3
   1a55c:	add	r0, r0, r5
   1a560:	cmp	ip, r0
   1a564:	bhi	1a724 <__assert_fail@plt+0x8b80>
   1a568:	mov	r1, r0
   1a56c:	str	r0, [r6, #36]	; 0x24
   1a570:	mov	r0, r2
   1a574:	str	r2, [sp, #8]
   1a578:	bl	39064 <__assert_fail@plt+0x274c0>
   1a57c:	cmp	r0, #0
   1a580:	ldr	r2, [sp, #8]
   1a584:	beq	1ab18 <__assert_fail@plt+0x8f74>
   1a588:	cmp	r2, r0
   1a58c:	str	r0, [r6, #24]
   1a590:	beq	1a5b0 <__assert_fail@plt+0x8a0c>
   1a594:	ldr	r2, [r6, #48]	; 0x30
   1a598:	tst	r2, #4
   1a59c:	ldrne	r3, [sp, #4]
   1a5a0:	addne	r3, r0, r3
   1a5a4:	strne	r3, [sp, #32]
   1a5a8:	mov	r3, #1
   1a5ac:	str	r3, [sp, #36]	; 0x24
   1a5b0:	ldr	r3, [sp, #4]
   1a5b4:	ldr	r2, [r6, #36]	; 0x24
   1a5b8:	sub	r3, r2, r3
   1a5bc:	str	r3, [sp, #20]
   1a5c0:	b	1a488 <__assert_fail@plt+0x88e4>
   1a5c4:	mov	r3, #11
   1a5c8:	strh	r3, [r4, #56]	; 0x38
   1a5cc:	movw	r3, #49268	; 0xc074
   1a5d0:	movt	r3, #3
   1a5d4:	ldr	r1, [r3, r0, lsl #2]
   1a5d8:	mov	r2, #2
   1a5dc:	mov	r3, #0
   1a5e0:	str	r1, [r4, #80]	; 0x50
   1a5e4:	b	1a50c <__assert_fail@plt+0x8968>
   1a5e8:	ldr	ip, [r4, #28]
   1a5ec:	mov	r1, r8
   1a5f0:	ldr	r2, [r4, #52]	; 0x34
   1a5f4:	ldr	r0, [sp, #32]
   1a5f8:	str	ip, [r4, #24]
   1a5fc:	add	r2, r2, #1
   1a600:	bl	11748 <memmove@plt>
   1a604:	ldr	r1, [r6, #48]	; 0x30
   1a608:	b	1a4c0 <__assert_fail@plt+0x891c>
   1a60c:	ldrb	r3, [r7, #20]
   1a610:	cmp	r3, #0
   1a614:	beq	1a624 <__assert_fail@plt+0x8a80>
   1a618:	ldrh	r3, [r7, #20]
   1a61c:	cmp	r3, #46	; 0x2e
   1a620:	bne	1a40c <__assert_fail@plt+0x8868>
   1a624:	mov	r4, fp
   1a628:	b	1a3c0 <__assert_fail@plt+0x881c>
   1a62c:	mov	r2, r4
   1a630:	ldr	r0, [r6, #32]
   1a634:	bl	19c44 <__assert_fail@plt+0x80a0>
   1a638:	strh	r0, [r4, #56]	; 0x38
   1a63c:	b	1a510 <__assert_fail@plt+0x896c>
   1a640:	ldr	r5, [sl]
   1a644:	ldr	r8, [sp, #12]
   1a648:	ldr	fp, [sp, #16]
   1a64c:	mov	r0, r4
   1a650:	bl	19610 <__assert_fail@plt+0x7a6c>
   1a654:	cmp	r8, #0
   1a658:	bne	1a6c4 <__assert_fail@plt+0x8b20>
   1a65c:	ldr	r0, [fp, #12]
   1a660:	bl	11b98 <closedir@plt>
   1a664:	ldr	r3, [r6, #48]	; 0x30
   1a668:	mov	r2, #0
   1a66c:	mov	r1, #7
   1a670:	mov	r8, r2
   1a674:	str	r2, [fp, #12]
   1a678:	strh	r1, [fp, #56]	; 0x38
   1a67c:	orr	r3, r3, #8192	; 0x2000
   1a680:	str	r3, [r6, #48]	; 0x30
   1a684:	str	r5, [sl]
   1a688:	mov	r0, r8
   1a68c:	add	sp, sp, #76	; 0x4c
   1a690:	ldrd	r4, [sp]
   1a694:	ldrd	r6, [sp, #8]
   1a698:	ldrd	r8, [sp, #16]
   1a69c:	ldrd	sl, [sp, #24]
   1a6a0:	add	sp, sp, #32
   1a6a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6a8:	mov	r0, r3
   1a6ac:	bl	11b98 <closedir@plt>
   1a6b0:	mov	r0, r8
   1a6b4:	bl	19610 <__assert_fail@plt+0x7a6c>
   1a6b8:	cmp	r4, #0
   1a6bc:	beq	1a65c <__assert_fail@plt+0x8ab8>
   1a6c0:	mov	r8, r4
   1a6c4:	mov	r0, r8
   1a6c8:	ldr	r4, [r8, #8]
   1a6cc:	ldr	r3, [r8, #12]
   1a6d0:	cmp	r3, #0
   1a6d4:	bne	1a6a8 <__assert_fail@plt+0x8b04>
   1a6d8:	bl	19610 <__assert_fail@plt+0x7a6c>
   1a6dc:	cmp	r4, #0
   1a6e0:	bne	1a6c0 <__assert_fail@plt+0x8b1c>
   1a6e4:	b	1a65c <__assert_fail@plt+0x8ab8>
   1a6e8:	ubfx	r2, r1, #4, #1
   1a6ec:	cmp	r3, #10
   1a6f0:	moveq	r3, r2
   1a6f4:	orrne	r3, r2, #1
   1a6f8:	cmp	r3, #0
   1a6fc:	beq	1a5c4 <__assert_fail@plt+0x8a20>
   1a700:	mov	r3, #11
   1a704:	cmp	r0, r3
   1a708:	strh	r3, [r4, #56]	; 0x38
   1a70c:	bls	1a964 <__assert_fail@plt+0x8dc0>
   1a710:	mov	r1, #0
   1a714:	mov	r2, #1
   1a718:	mov	r3, #0
   1a71c:	str	r1, [r4, #80]	; 0x50
   1a720:	b	1a50c <__assert_fail@plt+0x8968>
   1a724:	mov	r0, r2
   1a728:	ldr	r8, [sp, #12]
   1a72c:	ldr	fp, [sp, #16]
   1a730:	bl	19610 <__assert_fail@plt+0x7a6c>
   1a734:	mov	r3, #36	; 0x24
   1a738:	mov	r1, #0
   1a73c:	mov	r5, r3
   1a740:	str	r1, [r6, #24]
   1a744:	str	r3, [sl]
   1a748:	b	1a64c <__assert_fail@plt+0x8aa8>
   1a74c:	ldr	r3, [r6, #48]	; 0x30
   1a750:	ldr	r1, [fp, #24]
   1a754:	and	r2, r3, #516	; 0x204
   1a758:	cmp	r2, #512	; 0x200
   1a75c:	ldreq	r0, [r6, #32]
   1a760:	mvnne	r0, #99	; 0x63
   1a764:	ands	r2, r3, #16
   1a768:	beq	1a778 <__assert_fail@plt+0x8bd4>
   1a76c:	tst	r3, #1
   1a770:	moveq	r2, #32768	; 0x8000
   1a774:	bne	1a980 <__assert_fail@plt+0x8ddc>
   1a778:	add	r3, sp, #68	; 0x44
   1a77c:	bl	1fdc8 <__assert_fail@plt+0xe224>
   1a780:	cmp	r0, #0
   1a784:	mov	r8, r0
   1a788:	str	r0, [fp, #12]
   1a78c:	beq	1ad14 <__assert_fail@plt+0x9170>
   1a790:	ldrh	r3, [fp, #56]	; 0x38
   1a794:	ldr	r0, [r6, #48]	; 0x30
   1a798:	cmp	r3, #11
   1a79c:	beq	1ac54 <__assert_fail@plt+0x90b0>
   1a7a0:	tst	r0, #256	; 0x100
   1a7a4:	bne	1ab98 <__assert_fail@plt+0x8ff4>
   1a7a8:	ldr	r2, [r6, #44]	; 0x2c
   1a7ac:	movw	r3, #34464	; 0x86a0
   1a7b0:	movt	r3, #1
   1a7b4:	cmp	r2, #0
   1a7b8:	mvnne	r3, #0
   1a7bc:	str	r3, [sp, #28]
   1a7c0:	ldr	r3, [sp, #40]	; 0x28
   1a7c4:	cmp	r3, #2
   1a7c8:	beq	1ab88 <__assert_fail@plt+0x8fe4>
   1a7cc:	ldr	r3, [r6, #48]	; 0x30
   1a7d0:	ldr	r0, [sp, #68]	; 0x44
   1a7d4:	and	r3, r3, #56	; 0x38
   1a7d8:	cmp	r3, #24
   1a7dc:	beq	1a990 <__assert_fail@plt+0x8dec>
   1a7e0:	ldr	r3, [sp, #40]	; 0x28
   1a7e4:	sub	r4, r3, #3
   1a7e8:	clz	r4, r4
   1a7ec:	lsr	r4, r4, #5
   1a7f0:	ldr	r3, [r6, #48]	; 0x30
   1a7f4:	tst	r3, #512	; 0x200
   1a7f8:	bne	1ad00 <__assert_fail@plt+0x915c>
   1a7fc:	cmp	r0, #0
   1a800:	bge	1ac94 <__assert_fail@plt+0x90f0>
   1a804:	cmp	r4, #0
   1a808:	beq	1a818 <__assert_fail@plt+0x8c74>
   1a80c:	bl	119b8 <__errno_location@plt>
   1a810:	ldr	r3, [r0]
   1a814:	str	r3, [fp, #32]
   1a818:	ldrh	r3, [fp, #58]	; 0x3a
   1a81c:	ldr	r0, [fp, #12]
   1a820:	orr	r3, r3, #1
   1a824:	strh	r3, [fp, #58]	; 0x3a
   1a828:	bl	11b98 <closedir@plt>
   1a82c:	ldr	r3, [r6, #48]	; 0x30
   1a830:	mov	r2, #0
   1a834:	str	r2, [fp, #12]
   1a838:	tst	r3, #512	; 0x200
   1a83c:	beq	1a84c <__assert_fail@plt+0x8ca8>
   1a840:	ldr	r0, [sp, #68]	; 0x44
   1a844:	cmp	r0, r2
   1a848:	bge	1acf4 <__assert_fail@plt+0x9150>
   1a84c:	mov	r2, #0
   1a850:	str	r2, [fp, #12]
   1a854:	str	r2, [sp, #60]	; 0x3c
   1a858:	b	1a310 <__assert_fail@plt+0x876c>
   1a85c:	ldr	r0, [sp, #16]
   1a860:	ldr	r1, [sp, #68]	; 0x44
   1a864:	bl	19b24 <__assert_fail@plt+0x7f80>
   1a868:	movw	r3, #26985	; 0x6969
   1a86c:	cmp	r0, r3
   1a870:	beq	1a894 <__assert_fail@plt+0x8cf0>
   1a874:	ldr	r3, [sp, #52]	; 0x34
   1a878:	cmp	r0, r3
   1a87c:	beq	1a894 <__assert_fail@plt+0x8cf0>
   1a880:	ldr	r3, [sp, #56]	; 0x38
   1a884:	cmp	r0, r3
   1a888:	movne	r3, #1
   1a88c:	strne	r3, [sp, #44]	; 0x2c
   1a890:	bne	1a540 <__assert_fail@plt+0x899c>
   1a894:	ldr	r3, [sp, #28]
   1a898:	add	r9, r9, #1
   1a89c:	str	r5, [sp, #44]	; 0x2c
   1a8a0:	cmp	r9, r3
   1a8a4:	bcc	1a3c0 <__assert_fail@plt+0x881c>
   1a8a8:	ldr	r8, [sp, #12]
   1a8ac:	ldr	r3, [sp, #36]	; 0x24
   1a8b0:	ldr	fp, [sp, #16]
   1a8b4:	cmp	r3, #0
   1a8b8:	beq	1a9fc <__assert_fail@plt+0x8e58>
   1a8bc:	ldr	r3, [r6, #4]
   1a8c0:	ldr	r1, [r6, #24]
   1a8c4:	cmp	r3, #0
   1a8c8:	beq	1a8fc <__assert_fail@plt+0x8d58>
   1a8cc:	ldr	r2, [r3, #24]
   1a8d0:	add	r0, r3, #168	; 0xa8
   1a8d4:	cmp	r2, r0
   1a8d8:	beq	1ab04 <__assert_fail@plt+0x8f60>
   1a8dc:	ldr	r0, [r3, #28]
   1a8e0:	str	r1, [r3, #28]
   1a8e4:	sub	r2, r2, r0
   1a8e8:	add	r2, r1, r2
   1a8ec:	str	r2, [r3, #24]
   1a8f0:	ldr	r3, [r3, #8]
   1a8f4:	cmp	r3, #0
   1a8f8:	bne	1a8cc <__assert_fail@plt+0x8d28>
   1a8fc:	ldr	r3, [r8, #48]	; 0x30
   1a900:	cmp	r3, #0
   1a904:	movge	r3, r8
   1a908:	bge	1a920 <__assert_fail@plt+0x8d7c>
   1a90c:	b	1a9fc <__assert_fail@plt+0x8e58>
   1a910:	ldr	r3, [r2, #48]	; 0x30
   1a914:	cmp	r3, #0
   1a918:	blt	1a9fc <__assert_fail@plt+0x8e58>
   1a91c:	mov	r3, r2
   1a920:	ldr	r2, [r3, #24]
   1a924:	add	r0, r3, #168	; 0xa8
   1a928:	cmp	r2, r0
   1a92c:	beq	1a940 <__assert_fail@plt+0x8d9c>
   1a930:	ldr	r0, [r3, #28]
   1a934:	sub	r2, r2, r0
   1a938:	add	r2, r1, r2
   1a93c:	str	r2, [r3, #24]
   1a940:	ldr	r2, [r3, #8]
   1a944:	str	r1, [r3, #28]
   1a948:	cmp	r2, #0
   1a94c:	bne	1a910 <__assert_fail@plt+0x8d6c>
   1a950:	ldr	r2, [r3, #4]
   1a954:	ldr	r3, [r2, #48]	; 0x30
   1a958:	cmp	r3, #0
   1a95c:	bge	1a91c <__assert_fail@plt+0x8d78>
   1a960:	b	1a9fc <__assert_fail@plt+0x8e58>
   1a964:	movw	r3, #49268	; 0xc074
   1a968:	movt	r3, #3
   1a96c:	ldr	r1, [r3, r0, lsl #2]
   1a970:	mov	r2, #1
   1a974:	mov	r3, #0
   1a978:	str	r1, [r4, #80]	; 0x50
   1a97c:	b	1a50c <__assert_fail@plt+0x8968>
   1a980:	ldr	r2, [fp, #48]	; 0x30
   1a984:	cmp	r2, #0
   1a988:	movne	r2, #32768	; 0x8000
   1a98c:	b	1a778 <__assert_fail@plt+0x8bd4>
   1a990:	ldr	r3, [fp, #84]	; 0x54
   1a994:	cmp	r3, #2
   1a998:	bne	1a7e0 <__assert_fail@plt+0x8c3c>
   1a99c:	mov	r1, r0
   1a9a0:	mov	r0, fp
   1a9a4:	bl	19b24 <__assert_fail@plt+0x7f80>
   1a9a8:	movw	r3, #26985	; 0x6969
   1a9ac:	cmp	r0, r3
   1a9b0:	beq	1ada0 <__assert_fail@plt+0x91fc>
   1a9b4:	bgt	1ad84 <__assert_fail@plt+0x91e0>
   1a9b8:	movw	r3, #19778	; 0x4d42
   1a9bc:	movt	r3, #65363	; 0xff53
   1a9c0:	cmp	r0, r3
   1a9c4:	beq	1ada0 <__assert_fail@plt+0x91fc>
   1a9c8:	cmp	r0, #0
   1a9cc:	beq	1ada0 <__assert_fail@plt+0x91fc>
   1a9d0:	ldr	r3, [sp, #40]	; 0x28
   1a9d4:	cmp	r3, #3
   1a9d8:	bne	1ab88 <__assert_fail@plt+0x8fe4>
   1a9dc:	mov	r4, #0
   1a9e0:	ldr	r0, [sp, #68]	; 0x44
   1a9e4:	b	1a7f0 <__assert_fail@plt+0x8c4c>
   1a9e8:	ldr	r8, [sp, #12]
   1a9ec:	mov	fp, r3
   1a9f0:	ldr	r3, [sp, #36]	; 0x24
   1a9f4:	cmp	r3, #0
   1a9f8:	bne	1a8bc <__assert_fail@plt+0x8d18>
   1a9fc:	ldr	r3, [r6, #48]	; 0x30
   1aa00:	tst	r3, #4
   1aa04:	beq	1aa34 <__assert_fail@plt+0x8e90>
   1aa08:	ldr	r2, [sp, #4]
   1aa0c:	ldr	r3, [r6, #36]	; 0x24
   1aa10:	cmp	r9, #0
   1aa14:	cmpne	r3, r2
   1aa18:	bne	1aa28 <__assert_fail@plt+0x8e84>
   1aa1c:	ldr	r3, [sp, #32]
   1aa20:	sub	r3, r3, #1
   1aa24:	str	r3, [sp, #32]
   1aa28:	ldr	r2, [sp, #32]
   1aa2c:	mov	r3, #0
   1aa30:	strb	r3, [r2]
   1aa34:	ldr	r2, [sp, #48]	; 0x30
   1aa38:	ldr	r3, [sp, #60]	; 0x3c
   1aa3c:	cmp	r2, #0
   1aa40:	movne	r3, #0
   1aa44:	cmp	r3, #0
   1aa48:	beq	1aa80 <__assert_fail@plt+0x8edc>
   1aa4c:	ldr	r3, [sp, #40]	; 0x28
   1aa50:	cmp	r9, #0
   1aa54:	cmpne	r3, #1
   1aa58:	bne	1aa88 <__assert_fail@plt+0x8ee4>
   1aa5c:	ldr	r3, [fp, #48]	; 0x30
   1aa60:	cmp	r3, #0
   1aa64:	bne	1ac70 <__assert_fail@plt+0x90cc>
   1aa68:	mov	r0, r6
   1aa6c:	bl	19f40 <__assert_fail@plt+0x839c>
   1aa70:	adds	r0, r0, #0
   1aa74:	movne	r0, #1
   1aa78:	cmp	r0, #0
   1aa7c:	bne	1ad24 <__assert_fail@plt+0x9180>
   1aa80:	cmp	r9, #0
   1aa84:	beq	1abe4 <__assert_fail@plt+0x9040>
   1aa88:	ldr	r3, [sp, #44]	; 0x2c
   1aa8c:	cmp	r3, #0
   1aa90:	bne	1ab40 <__assert_fail@plt+0x8f9c>
   1aa94:	ldr	r3, [r6, #44]	; 0x2c
   1aa98:	cmp	r3, #0
   1aa9c:	cmpne	r9, #1
   1aaa0:	beq	1a688 <__assert_fail@plt+0x8ae4>
   1aaa4:	mov	r1, r8
   1aaa8:	mov	r2, r9
   1aaac:	mov	r0, r6
   1aab0:	bl	19a38 <__assert_fail@plt+0x7e94>
   1aab4:	mov	r8, r0
   1aab8:	b	1a688 <__assert_fail@plt+0x8ae4>
   1aabc:	ldr	r3, [sl]
   1aac0:	ldr	r8, [sp, #12]
   1aac4:	ldr	fp, [sp, #16]
   1aac8:	cmp	r3, #0
   1aacc:	beq	1aae8 <__assert_fail@plt+0x8f44>
   1aad0:	ldr	r2, [sp, #48]	; 0x30
   1aad4:	str	r3, [fp, #32]
   1aad8:	orrs	r2, r2, r9
   1aadc:	moveq	r3, #4
   1aae0:	movne	r3, #7
   1aae4:	strh	r3, [fp, #56]	; 0x38
   1aae8:	ldr	r0, [fp, #12]
   1aaec:	cmp	r0, #0
   1aaf0:	beq	1a9f0 <__assert_fail@plt+0x8e4c>
   1aaf4:	bl	11b98 <closedir@plt>
   1aaf8:	mov	r3, #0
   1aafc:	str	r3, [fp, #12]
   1ab00:	b	1a9f0 <__assert_fail@plt+0x8e4c>
   1ab04:	str	r1, [r3, #28]
   1ab08:	ldr	r3, [r3, #8]
   1ab0c:	cmp	r3, #0
   1ab10:	bne	1a8cc <__assert_fail@plt+0x8d28>
   1ab14:	b	1a8fc <__assert_fail@plt+0x8d58>
   1ab18:	mov	r1, r0
   1ab1c:	ldr	r0, [r6, #24]
   1ab20:	str	r1, [sp, #4]
   1ab24:	ldr	r8, [sp, #12]
   1ab28:	ldr	fp, [sp, #16]
   1ab2c:	bl	19610 <__assert_fail@plt+0x7a6c>
   1ab30:	ldr	r1, [sp, #4]
   1ab34:	ldr	r5, [sl]
   1ab38:	str	r1, [r6, #24]
   1ab3c:	b	1a64c <__assert_fail@plt+0x8aa8>
   1ab40:	movw	r3, #39432	; 0x9a08
   1ab44:	movt	r3, #1
   1ab48:	mov	r1, r8
   1ab4c:	mov	r2, r9
   1ab50:	mov	r0, r6
   1ab54:	str	r3, [r6, #44]	; 0x2c
   1ab58:	bl	19a38 <__assert_fail@plt+0x7e94>
   1ab5c:	mov	r3, #0
   1ab60:	mov	r8, r0
   1ab64:	str	r3, [r6, #44]	; 0x2c
   1ab68:	b	1a688 <__assert_fail@plt+0x8ae4>
   1ab6c:	movw	r3, #34464	; 0x86a0
   1ab70:	movt	r3, #1
   1ab74:	mov	r2, #1
   1ab78:	str	r3, [sp, #28]
   1ab7c:	str	r2, [sp, #60]	; 0x3c
   1ab80:	ldr	r3, [r6, #48]	; 0x30
   1ab84:	b	1a310 <__assert_fail@plt+0x876c>
   1ab88:	mov	r3, #0
   1ab8c:	str	r3, [sp, #60]	; 0x3c
   1ab90:	ldr	r3, [r6, #48]	; 0x30
   1ab94:	b	1a310 <__assert_fail@plt+0x876c>
   1ab98:	add	r4, r6, #56	; 0x38
   1ab9c:	mov	r2, fp
   1aba0:	mov	r1, r4
   1aba4:	bl	19e74 <__assert_fail@plt+0x82d0>
   1aba8:	mov	r3, #0
   1abac:	mov	r2, fp
   1abb0:	ldr	r0, [r6, #32]
   1abb4:	ldr	r1, [r6, #48]	; 0x30
   1abb8:	bl	19c44 <__assert_fail@plt+0x80a0>
   1abbc:	mov	r2, fp
   1abc0:	mov	r1, r4
   1abc4:	ldr	r0, [r6, #48]	; 0x30
   1abc8:	bl	19da0 <__assert_fail@plt+0x81fc>
   1abcc:	subs	r8, r0, #0
   1abd0:	bne	1a7a8 <__assert_fail@plt+0x8c04>
   1abd4:	bl	119b8 <__errno_location@plt>
   1abd8:	mov	r3, #12
   1abdc:	str	r3, [r0]
   1abe0:	b	1a688 <__assert_fail@plt+0x8ae4>
   1abe4:	ldr	r3, [sp, #40]	; 0x28
   1abe8:	cmp	r3, #3
   1abec:	bne	1ac04 <__assert_fail@plt+0x9060>
   1abf0:	ldrh	r3, [fp, #56]	; 0x38
   1abf4:	cmp	r3, #4
   1abf8:	cmpne	r3, #7
   1abfc:	movne	r3, #6
   1ac00:	strhne	r3, [fp, #56]	; 0x38
   1ac04:	cmp	r8, #0
   1ac08:	bne	1ac2c <__assert_fail@plt+0x9088>
   1ac0c:	b	1ac4c <__assert_fail@plt+0x90a8>
   1ac10:	mov	r0, r3
   1ac14:	bl	11b98 <closedir@plt>
   1ac18:	mov	r0, r8
   1ac1c:	bl	19610 <__assert_fail@plt+0x7a6c>
   1ac20:	cmp	r4, #0
   1ac24:	beq	1ac4c <__assert_fail@plt+0x90a8>
   1ac28:	mov	r8, r4
   1ac2c:	mov	r0, r8
   1ac30:	ldr	r4, [r8, #8]
   1ac34:	ldr	r3, [r8, #12]
   1ac38:	cmp	r3, #0
   1ac3c:	bne	1ac10 <__assert_fail@plt+0x906c>
   1ac40:	bl	19610 <__assert_fail@plt+0x7a6c>
   1ac44:	cmp	r4, #0
   1ac48:	bne	1ac28 <__assert_fail@plt+0x9084>
   1ac4c:	mov	r8, #0
   1ac50:	b	1a688 <__assert_fail@plt+0x8ae4>
   1ac54:	mov	r1, r0
   1ac58:	mov	r3, #0
   1ac5c:	ldr	r0, [r6, #32]
   1ac60:	mov	r2, fp
   1ac64:	bl	19c44 <__assert_fail@plt+0x80a0>
   1ac68:	strh	r0, [fp, #56]	; 0x38
   1ac6c:	b	1a7a8 <__assert_fail@plt+0x8c04>
   1ac70:	movw	r3, #49316	; 0xc0a4
   1ac74:	movt	r3, #3
   1ac78:	ldr	r1, [fp, #4]
   1ac7c:	mvn	r2, #0
   1ac80:	mov	r0, r6
   1ac84:	bl	19fec <__assert_fail@plt+0x8448>
   1ac88:	adds	r0, r0, #0
   1ac8c:	movne	r0, #1
   1ac90:	b	1aa78 <__assert_fail@plt+0x8ed4>
   1ac94:	mov	r2, r0
   1ac98:	mov	r3, #0
   1ac9c:	mov	r1, fp
   1aca0:	mov	r0, r6
   1aca4:	bl	19fec <__assert_fail@plt+0x8448>
   1aca8:	cmp	r0, #0
   1acac:	bne	1a804 <__assert_fail@plt+0x8c60>
   1acb0:	mov	r3, #1
   1acb4:	str	r3, [sp, #60]	; 0x3c
   1acb8:	ldr	r3, [r6, #48]	; 0x30
   1acbc:	b	1a310 <__assert_fail@plt+0x876c>
   1acc0:	ldr	r0, [fp, #12]
   1acc4:	mov	r8, #0
   1acc8:	bl	11b98 <closedir@plt>
   1accc:	ldr	r3, [sp, #40]	; 0x28
   1acd0:	str	r8, [fp, #12]
   1acd4:	cmp	r3, #3
   1acd8:	bne	1ac4c <__assert_fail@plt+0x90a8>
   1acdc:	mov	r3, #4
   1ace0:	strh	r3, [fp, #56]	; 0x38
   1ace4:	bl	119b8 <__errno_location@plt>
   1ace8:	ldr	r3, [r0]
   1acec:	str	r3, [fp, #32]
   1acf0:	b	1a688 <__assert_fail@plt+0x8ae4>
   1acf4:	bl	11b80 <close@plt>
   1acf8:	ldr	r3, [r6, #48]	; 0x30
   1acfc:	b	1a84c <__assert_fail@plt+0x8ca8>
   1ad00:	mov	r2, #3
   1ad04:	movw	r1, #1030	; 0x406
   1ad08:	bl	39cc0 <__assert_fail@plt+0x2811c>
   1ad0c:	str	r0, [sp, #68]	; 0x44
   1ad10:	b	1a7fc <__assert_fail@plt+0x8c58>
   1ad14:	ldr	r3, [sp, #40]	; 0x28
   1ad18:	cmp	r3, #3
   1ad1c:	bne	1ac4c <__assert_fail@plt+0x90a8>
   1ad20:	b	1acdc <__assert_fail@plt+0x9138>
   1ad24:	ldr	r3, [r6, #48]	; 0x30
   1ad28:	mov	r2, #7
   1ad2c:	cmp	r8, #0
   1ad30:	strh	r2, [fp, #56]	; 0x38
   1ad34:	orr	r3, r3, #8192	; 0x2000
   1ad38:	str	r3, [r6, #48]	; 0x30
   1ad3c:	bne	1ad60 <__assert_fail@plt+0x91bc>
   1ad40:	b	1ac4c <__assert_fail@plt+0x90a8>
   1ad44:	mov	r0, r3
   1ad48:	bl	11b98 <closedir@plt>
   1ad4c:	mov	r0, r8
   1ad50:	bl	19610 <__assert_fail@plt+0x7a6c>
   1ad54:	cmp	r4, #0
   1ad58:	beq	1ac4c <__assert_fail@plt+0x90a8>
   1ad5c:	mov	r8, r4
   1ad60:	mov	r0, r8
   1ad64:	ldr	r4, [r8, #8]
   1ad68:	ldr	r3, [r8, #12]
   1ad6c:	cmp	r3, #0
   1ad70:	bne	1ad44 <__assert_fail@plt+0x91a0>
   1ad74:	bl	19610 <__assert_fail@plt+0x7a6c>
   1ad78:	cmp	r4, #0
   1ad7c:	bne	1ad5c <__assert_fail@plt+0x91b8>
   1ad80:	b	1ac4c <__assert_fail@plt+0x90a8>
   1ad84:	movw	r3, #40864	; 0x9fa0
   1ad88:	cmp	r0, r3
   1ad8c:	beq	1ada0 <__assert_fail@plt+0x91fc>
   1ad90:	movw	r3, #16719	; 0x414f
   1ad94:	movt	r3, #21318	; 0x5346
   1ad98:	cmp	r0, r3
   1ad9c:	bne	1a9d0 <__assert_fail@plt+0x8e2c>
   1ada0:	ldr	r0, [sp, #68]	; 0x44
   1ada4:	b	1a7e0 <__assert_fail@plt+0x8c3c>
   1ada8:	ldr	r8, [sp, #12]
   1adac:	mov	r0, r4
   1adb0:	ldr	fp, [sp, #16]
   1adb4:	bl	19610 <__assert_fail@plt+0x7a6c>
   1adb8:	cmp	r8, #0
   1adbc:	bne	1ade0 <__assert_fail@plt+0x923c>
   1adc0:	b	1ae00 <__assert_fail@plt+0x925c>
   1adc4:	mov	r0, r3
   1adc8:	bl	11b98 <closedir@plt>
   1adcc:	mov	r0, r8
   1add0:	bl	19610 <__assert_fail@plt+0x7a6c>
   1add4:	cmp	r4, #0
   1add8:	beq	1ae00 <__assert_fail@plt+0x925c>
   1addc:	mov	r8, r4
   1ade0:	mov	r0, r8
   1ade4:	ldr	r4, [r8, #8]
   1ade8:	ldr	r3, [r8, #12]
   1adec:	cmp	r3, #0
   1adf0:	bne	1adc4 <__assert_fail@plt+0x9220>
   1adf4:	bl	19610 <__assert_fail@plt+0x7a6c>
   1adf8:	cmp	r4, #0
   1adfc:	bne	1addc <__assert_fail@plt+0x9238>
   1ae00:	ldr	r0, [fp, #12]
   1ae04:	mov	r8, #0
   1ae08:	bl	11b98 <closedir@plt>
   1ae0c:	ldr	r3, [r6, #48]	; 0x30
   1ae10:	mov	r1, #7
   1ae14:	mov	r2, #36	; 0x24
   1ae18:	str	r8, [fp, #12]
   1ae1c:	strh	r1, [fp, #56]	; 0x38
   1ae20:	orr	r3, r3, #8192	; 0x2000
   1ae24:	str	r3, [r6, #48]	; 0x30
   1ae28:	str	r2, [sl]
   1ae2c:	b	1a688 <__assert_fail@plt+0x8ae4>
   1ae30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ae34:	strd	r6, [sp, #8]
   1ae38:	bic	r7, r1, #4080	; 0xff0
   1ae3c:	bic	r7, r7, #15
   1ae40:	strd	r8, [sp, #16]
   1ae44:	strd	sl, [sp, #24]
   1ae48:	cmp	r7, #0
   1ae4c:	str	lr, [sp, #32]
   1ae50:	sub	sp, sp, #36	; 0x24
   1ae54:	str	r2, [sp, #12]
   1ae58:	bne	1b2c4 <__assert_fail@plt+0x9720>
   1ae5c:	and	r3, r1, #516	; 0x204
   1ae60:	mov	r5, r1
   1ae64:	cmp	r3, #516	; 0x204
   1ae68:	beq	1b258 <__assert_fail@plt+0x96b4>
   1ae6c:	ands	r7, r1, #18
   1ae70:	beq	1b258 <__assert_fail@plt+0x96b4>
   1ae74:	mov	r9, r0
   1ae78:	mov	r1, #96	; 0x60
   1ae7c:	mov	r0, #1
   1ae80:	bl	38fb4 <__assert_fail@plt+0x27410>
   1ae84:	subs	r7, r0, #0
   1ae88:	beq	1b1d0 <__assert_fail@plt+0x962c>
   1ae8c:	ldr	r3, [sp, #12]
   1ae90:	tst	r5, #2
   1ae94:	mvn	r2, #99	; 0x63
   1ae98:	streq	r5, [r7, #48]	; 0x30
   1ae9c:	str	r2, [r7, #32]
   1aea0:	str	r3, [r7, #44]	; 0x2c
   1aea4:	bicne	r3, r5, #512	; 0x200
   1aea8:	orrne	r3, r3, #4
   1aeac:	strne	r3, [r7, #48]	; 0x30
   1aeb0:	ldr	r3, [r9]
   1aeb4:	cmp	r3, #0
   1aeb8:	beq	1b310 <__assert_fail@plt+0x976c>
   1aebc:	mov	r6, r9
   1aec0:	mov	r4, #0
   1aec4:	mov	r0, r3
   1aec8:	bl	11988 <strlen@plt>
   1aecc:	ldr	r3, [r6, #4]!
   1aed0:	cmp	r4, r0
   1aed4:	movcc	r4, r0
   1aed8:	cmp	r3, #0
   1aedc:	bne	1aec4 <__assert_fail@plt+0x9320>
   1aee0:	add	r4, r4, #1
   1aee4:	cmp	r4, #4096	; 0x1000
   1aee8:	movcc	r4, #4096	; 0x1000
   1aeec:	ldr	r0, [r7, #24]
   1aef0:	ldr	r3, [r7, #36]	; 0x24
   1aef4:	add	r1, r3, #256	; 0x100
   1aef8:	add	r1, r1, r4
   1aefc:	cmp	r3, r1
   1af00:	bhi	1b2d8 <__assert_fail@plt+0x9734>
   1af04:	str	r1, [r7, #36]	; 0x24
   1af08:	bl	39064 <__assert_fail@plt+0x274c0>
   1af0c:	subs	r4, r0, #0
   1af10:	beq	1b35c <__assert_fail@plt+0x97b8>
   1af14:	ldr	r3, [r9]
   1af18:	str	r4, [r7, #24]
   1af1c:	cmp	r3, #0
   1af20:	str	r3, [sp, #16]
   1af24:	beq	1b2b0 <__assert_fail@plt+0x970c>
   1af28:	mov	r0, #176	; 0xb0
   1af2c:	bl	39028 <__assert_fail@plt+0x27484>
   1af30:	subs	ip, r0, #0
   1af34:	str	ip, [sp, #16]
   1af38:	beq	1b240 <__assert_fail@plt+0x969c>
   1af3c:	ldr	r2, [sp, #12]
   1af40:	mov	r3, #0
   1af44:	mvn	r1, #0
   1af48:	ldr	r0, [r7, #24]
   1af4c:	str	r3, [ip, #12]
   1af50:	str	r3, [ip, #16]
   1af54:	cmp	r2, r3
   1af58:	mov	r2, #196608	; 0x30000
   1af5c:	str	r3, [ip, #20]
   1af60:	str	r7, [ip, #44]	; 0x2c
   1af64:	str	r3, [ip, #32]
   1af68:	str	r3, [ip, #52]	; 0x34
   1af6c:	strb	r3, [ip, #168]	; 0xa8
   1af70:	moveq	r3, #1
   1af74:	str	r0, [ip, #28]
   1af78:	streq	r3, [sp, #24]
   1af7c:	str	r1, [ip, #48]	; 0x30
   1af80:	str	r2, [ip, #58]	; 0x3a
   1af84:	ldr	fp, [r9]
   1af88:	beq	1af98 <__assert_fail@plt+0x93f4>
   1af8c:	ldr	r3, [r7, #48]	; 0x30
   1af90:	ubfx	r3, r3, #10, #1
   1af94:	str	r3, [sp, #24]
   1af98:	cmp	fp, #0
   1af9c:	beq	1b388 <__assert_fail@plt+0x97e4>
   1afa0:	eor	r5, r5, #2048	; 0x800
   1afa4:	mov	r3, #0
   1afa8:	ubfx	r2, r5, #11, #1
   1afac:	mov	r6, r3
   1afb0:	mov	sl, r3
   1afb4:	mov	r8, r3
   1afb8:	str	r2, [sp, #20]
   1afbc:	str	r3, [sp, #28]
   1afc0:	b	1affc <__assert_fail@plt+0x9458>
   1afc4:	ldr	r2, [sp, #12]
   1afc8:	mov	r3, #11
   1afcc:	mov	r0, #2
   1afd0:	mov	r1, #0
   1afd4:	strh	r3, [r4, #56]	; 0x38
   1afd8:	strd	r0, [r4, #112]	; 0x70
   1afdc:	cmp	r2, #0
   1afe0:	beq	1b29c <__assert_fail@plt+0x96f8>
   1afe4:	str	r8, [r4, #8]
   1afe8:	mov	r8, r4
   1afec:	ldr	fp, [r9, #4]!
   1aff0:	add	sl, sl, #1
   1aff4:	cmp	fp, #0
   1aff8:	beq	1b0f8 <__assert_fail@plt+0x9554>
   1affc:	mov	r0, fp
   1b000:	bl	11988 <strlen@plt>
   1b004:	ldr	r3, [sp, #20]
   1b008:	mov	r5, r0
   1b00c:	cmp	r0, #2
   1b010:	movls	r3, #0
   1b014:	andhi	r3, r3, #1
   1b018:	cmp	r3, #0
   1b01c:	bne	1b268 <__assert_fail@plt+0x96c4>
   1b020:	add	r0, r5, #176	; 0xb0
   1b024:	bic	r0, r0, #7
   1b028:	bl	39028 <__assert_fail@plt+0x27484>
   1b02c:	subs	r4, r0, #0
   1b030:	beq	1b1f0 <__assert_fail@plt+0x964c>
   1b034:	add	r3, r4, #168	; 0xa8
   1b038:	mov	r1, fp
   1b03c:	mov	r0, r3
   1b040:	mov	r2, r5
   1b044:	bl	11784 <memcpy@plt>
   1b048:	add	ip, r4, r5
   1b04c:	ldr	r2, [sp, #24]
   1b050:	mov	r3, r0
   1b054:	cmp	r8, #0
   1b058:	mov	r1, #3
   1b05c:	strb	r6, [ip, #168]	; 0xa8
   1b060:	moveq	r2, #0
   1b064:	ldr	ip, [sp, #16]
   1b068:	ldr	r0, [r7, #24]
   1b06c:	cmp	r2, #0
   1b070:	str	ip, [r4, #4]
   1b074:	str	r6, [r4, #12]
   1b078:	str	r6, [r4, #16]
   1b07c:	str	r6, [r4, #20]
   1b080:	str	r3, [r4, #24]
   1b084:	str	r0, [r4, #28]
   1b088:	str	r6, [r4, #32]
   1b08c:	str	r7, [r4, #44]	; 0x2c
   1b090:	str	r6, [r4, #48]	; 0x30
   1b094:	str	r5, [r4, #52]	; 0x34
   1b098:	strh	r6, [r4, #58]	; 0x3a
   1b09c:	strh	r1, [r4, #60]	; 0x3c
   1b0a0:	bne	1afc4 <__assert_fail@plt+0x9420>
   1b0a4:	mov	r3, r2
   1b0a8:	mov	r2, r4
   1b0ac:	ldr	r0, [r7, #32]
   1b0b0:	ldr	r1, [r7, #48]	; 0x30
   1b0b4:	bl	19c44 <__assert_fail@plt+0x80a0>
   1b0b8:	ldr	r3, [sp, #12]
   1b0bc:	strh	r0, [r4, #56]	; 0x38
   1b0c0:	cmp	r3, #0
   1b0c4:	bne	1afe4 <__assert_fail@plt+0x9440>
   1b0c8:	cmp	r8, #0
   1b0cc:	str	r3, [r4, #8]
   1b0d0:	moveq	r8, r4
   1b0d4:	streq	r4, [sp, #28]
   1b0d8:	beq	1afec <__assert_fail@plt+0x9448>
   1b0dc:	ldr	r3, [sp, #28]
   1b0e0:	str	r4, [sp, #28]
   1b0e4:	str	r4, [r3, #8]
   1b0e8:	ldr	fp, [r9, #4]!
   1b0ec:	add	sl, sl, #1
   1b0f0:	cmp	fp, #0
   1b0f4:	bne	1affc <__assert_fail@plt+0x9458>
   1b0f8:	ldr	r3, [sp, #12]
   1b0fc:	cmp	r3, #0
   1b100:	cmpne	sl, #1
   1b104:	bls	1b11c <__assert_fail@plt+0x9578>
   1b108:	mov	r1, r8
   1b10c:	mov	r2, sl
   1b110:	mov	r0, r7
   1b114:	bl	19a38 <__assert_fail@plt+0x7e94>
   1b118:	mov	r8, r0
   1b11c:	mov	r0, #176	; 0xb0
   1b120:	bl	39028 <__assert_fail@plt+0x27484>
   1b124:	cmp	r0, #0
   1b128:	streq	r0, [r7]
   1b12c:	beq	1b1f0 <__assert_fail@plt+0x964c>
   1b130:	ldr	lr, [r7, #24]
   1b134:	movw	r4, #258	; 0x102
   1b138:	mov	r1, #0
   1b13c:	mov	ip, #1
   1b140:	mov	r2, #9
   1b144:	str	r0, [r7]
   1b148:	ldr	r3, [r7, #48]	; 0x30
   1b14c:	str	r8, [r0, #8]
   1b150:	str	r1, [r0, #12]
   1b154:	str	r1, [r0, #16]
   1b158:	str	r1, [r0, #20]
   1b15c:	tst	r4, r3
   1b160:	mov	r3, #3
   1b164:	str	lr, [r0, #28]
   1b168:	str	r1, [r0, #32]
   1b16c:	str	r7, [r0, #44]	; 0x2c
   1b170:	str	ip, [r0, #48]	; 0x30
   1b174:	str	r1, [r0, #52]	; 0x34
   1b178:	str	r2, [r0, #56]	; 0x38
   1b17c:	strh	r3, [r0, #60]	; 0x3c
   1b180:	strb	r1, [r0, #168]	; 0xa8
   1b184:	beq	1b2f4 <__assert_fail@plt+0x9750>
   1b188:	movw	r0, #38416	; 0x9610
   1b18c:	movt	r0, #1
   1b190:	movw	r3, #39248	; 0x9950
   1b194:	movt	r3, #1
   1b198:	movw	r2, #39312	; 0x9990
   1b19c:	movt	r2, #1
   1b1a0:	str	r0, [sp]
   1b1a4:	mov	r0, #31
   1b1a8:	bl	1c93c <__assert_fail@plt+0xad98>
   1b1ac:	cmp	r0, #0
   1b1b0:	str	r0, [r7, #56]	; 0x38
   1b1b4:	beq	1b1f0 <__assert_fail@plt+0x964c>
   1b1b8:	ldr	r3, [r7, #48]	; 0x30
   1b1bc:	tst	r3, #516	; 0x204
   1b1c0:	beq	1b318 <__assert_fail@plt+0x9774>
   1b1c4:	mvn	r1, #0
   1b1c8:	add	r0, r7, #60	; 0x3c
   1b1cc:	bl	1e7e8 <__assert_fail@plt+0xcc44>
   1b1d0:	mov	r0, r7
   1b1d4:	add	sp, sp, #36	; 0x24
   1b1d8:	ldrd	r4, [sp]
   1b1dc:	ldrd	r6, [sp, #8]
   1b1e0:	ldrd	r8, [sp, #16]
   1b1e4:	ldrd	sl, [sp, #24]
   1b1e8:	add	sp, sp, #32
   1b1ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1f0:	cmp	r8, #0
   1b1f4:	bne	1b218 <__assert_fail@plt+0x9674>
   1b1f8:	b	1b238 <__assert_fail@plt+0x9694>
   1b1fc:	mov	r0, r3
   1b200:	bl	11b98 <closedir@plt>
   1b204:	mov	r0, r8
   1b208:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b20c:	cmp	r4, #0
   1b210:	beq	1b238 <__assert_fail@plt+0x9694>
   1b214:	mov	r8, r4
   1b218:	mov	r0, r8
   1b21c:	ldr	r4, [r8, #8]
   1b220:	ldr	r3, [r8, #12]
   1b224:	cmp	r3, #0
   1b228:	bne	1b1fc <__assert_fail@plt+0x9658>
   1b22c:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b230:	cmp	r4, #0
   1b234:	bne	1b214 <__assert_fail@plt+0x9670>
   1b238:	ldr	r0, [sp, #16]
   1b23c:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b240:	ldr	r0, [r7, #24]
   1b244:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b248:	mov	r0, r7
   1b24c:	mov	r7, #0
   1b250:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b254:	b	1b1d0 <__assert_fail@plt+0x962c>
   1b258:	bl	119b8 <__errno_location@plt>
   1b25c:	mov	r3, #22
   1b260:	str	r3, [r0]
   1b264:	b	1b1d0 <__assert_fail@plt+0x962c>
   1b268:	sub	r3, r0, #1
   1b26c:	ldrb	r2, [fp, r3]
   1b270:	add	r3, fp, r3
   1b274:	cmp	r2, #47	; 0x2f
   1b278:	bne	1b020 <__assert_fail@plt+0x947c>
   1b27c:	ldrb	r2, [r3, #-1]!
   1b280:	cmp	r2, #47	; 0x2f
   1b284:	bne	1b020 <__assert_fail@plt+0x947c>
   1b288:	sub	r5, r5, #1
   1b28c:	cmp	r5, #1
   1b290:	bne	1b27c <__assert_fail@plt+0x96d8>
   1b294:	mov	r0, #176	; 0xb0
   1b298:	b	1b028 <__assert_fail@plt+0x9484>
   1b29c:	ldr	r3, [sp, #28]
   1b2a0:	str	r2, [r4, #8]
   1b2a4:	str	r4, [sp, #28]
   1b2a8:	str	r4, [r3, #8]
   1b2ac:	b	1b0e8 <__assert_fail@plt+0x9544>
   1b2b0:	ldr	r3, [sp, #12]
   1b2b4:	cmp	r3, #0
   1b2b8:	beq	1b380 <__assert_fail@plt+0x97dc>
   1b2bc:	ldr	fp, [sp, #16]
   1b2c0:	b	1af8c <__assert_fail@plt+0x93e8>
   1b2c4:	bl	119b8 <__errno_location@plt>
   1b2c8:	mov	r3, #22
   1b2cc:	mov	r7, #0
   1b2d0:	str	r3, [r0]
   1b2d4:	b	1b1d0 <__assert_fail@plt+0x962c>
   1b2d8:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b2dc:	mov	r3, #0
   1b2e0:	str	r3, [r7, #24]
   1b2e4:	bl	119b8 <__errno_location@plt>
   1b2e8:	mov	r3, #36	; 0x24
   1b2ec:	str	r3, [r0]
   1b2f0:	b	1b248 <__assert_fail@plt+0x96a4>
   1b2f4:	mov	r0, #32
   1b2f8:	bl	39028 <__assert_fail@plt+0x27484>
   1b2fc:	cmp	r0, #0
   1b300:	str	r0, [r7, #56]	; 0x38
   1b304:	beq	1b1f0 <__assert_fail@plt+0x964c>
   1b308:	bl	39ad4 <__assert_fail@plt+0x27f30>
   1b30c:	b	1b1b8 <__assert_fail@plt+0x9614>
   1b310:	mov	r4, #4096	; 0x1000
   1b314:	b	1aeec <__assert_fail@plt+0x9348>
   1b318:	lsl	r2, r3, #11
   1b31c:	tst	r3, #512	; 0x200
   1b320:	and	r2, r2, #32768	; 0x8000
   1b324:	orr	r2, r2, #540672	; 0x84000
   1b328:	orr	r2, r2, #2304	; 0x900
   1b32c:	beq	1b36c <__assert_fail@plt+0x97c8>
   1b330:	movw	r1, #47404	; 0xb92c
   1b334:	movt	r1, #3
   1b338:	ldr	r0, [r7, #32]
   1b33c:	bl	1fd88 <__assert_fail@plt+0xe1e4>
   1b340:	cmp	r0, #0
   1b344:	str	r0, [r7, #28]
   1b348:	bge	1b1c4 <__assert_fail@plt+0x9620>
   1b34c:	ldr	r3, [r7, #48]	; 0x30
   1b350:	orr	r3, r3, #4
   1b354:	str	r3, [r7, #48]	; 0x30
   1b358:	b	1b1c4 <__assert_fail@plt+0x9620>
   1b35c:	ldr	r0, [r7, #24]
   1b360:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b364:	str	r4, [r7, #24]
   1b368:	b	1b248 <__assert_fail@plt+0x96a4>
   1b36c:	mov	r1, r2
   1b370:	movw	r0, #47404	; 0xb92c
   1b374:	movt	r0, #3
   1b378:	bl	39ea8 <__assert_fail@plt+0x28304>
   1b37c:	b	1b340 <__assert_fail@plt+0x979c>
   1b380:	ldr	r8, [sp, #16]
   1b384:	b	1b11c <__assert_fail@plt+0x9578>
   1b388:	mov	r8, fp
   1b38c:	b	1b11c <__assert_fail@plt+0x9578>
   1b390:	ldr	r3, [r0]
   1b394:	strd	r4, [sp, #-16]!
   1b398:	str	r6, [sp, #8]
   1b39c:	mov	r6, r0
   1b3a0:	str	lr, [sp, #12]
   1b3a4:	cmp	r3, #0
   1b3a8:	beq	1b3fc <__assert_fail@plt+0x9858>
   1b3ac:	ldr	r2, [r3, #48]	; 0x30
   1b3b0:	cmp	r2, #0
   1b3b4:	bge	1b3d0 <__assert_fail@plt+0x982c>
   1b3b8:	b	1b580 <__assert_fail@plt+0x99dc>
   1b3bc:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b3c0:	ldr	r3, [r4, #48]	; 0x30
   1b3c4:	cmp	r3, #0
   1b3c8:	blt	1b3f4 <__assert_fail@plt+0x9850>
   1b3cc:	mov	r3, r4
   1b3d0:	ldr	r4, [r3, #8]
   1b3d4:	mov	r0, r3
   1b3d8:	cmp	r4, #0
   1b3dc:	bne	1b3bc <__assert_fail@plt+0x9818>
   1b3e0:	ldr	r4, [r3, #4]
   1b3e4:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b3e8:	ldr	r3, [r4, #48]	; 0x30
   1b3ec:	cmp	r3, #0
   1b3f0:	bge	1b3cc <__assert_fail@plt+0x9828>
   1b3f4:	mov	r0, r4
   1b3f8:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b3fc:	ldr	r4, [r6, #4]
   1b400:	cmp	r4, #0
   1b404:	bne	1b428 <__assert_fail@plt+0x9884>
   1b408:	b	1b448 <__assert_fail@plt+0x98a4>
   1b40c:	mov	r0, r3
   1b410:	bl	11b98 <closedir@plt>
   1b414:	mov	r0, r4
   1b418:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b41c:	cmp	r5, #0
   1b420:	beq	1b448 <__assert_fail@plt+0x98a4>
   1b424:	mov	r4, r5
   1b428:	mov	r0, r4
   1b42c:	ldr	r5, [r4, #8]
   1b430:	ldr	r3, [r4, #12]
   1b434:	cmp	r3, #0
   1b438:	bne	1b40c <__assert_fail@plt+0x9868>
   1b43c:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b440:	cmp	r5, #0
   1b444:	bne	1b424 <__assert_fail@plt+0x9880>
   1b448:	ldr	r0, [r6, #8]
   1b44c:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b450:	ldr	r0, [r6, #24]
   1b454:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b458:	ldr	r3, [r6, #48]	; 0x30
   1b45c:	tst	r3, #512	; 0x200
   1b460:	beq	1b510 <__assert_fail@plt+0x996c>
   1b464:	ldr	r0, [r6, #32]
   1b468:	cmp	r0, #0
   1b46c:	bge	1b4f8 <__assert_fail@plt+0x9954>
   1b470:	mov	r5, #0
   1b474:	add	r4, r6, #60	; 0x3c
   1b478:	b	1b488 <__assert_fail@plt+0x98e4>
   1b47c:	bl	1e864 <__assert_fail@plt+0xccc0>
   1b480:	cmp	r0, #0
   1b484:	bge	1b4f0 <__assert_fail@plt+0x994c>
   1b488:	mov	r0, r4
   1b48c:	bl	1e814 <__assert_fail@plt+0xcc70>
   1b490:	cmp	r0, #0
   1b494:	mov	r0, r4
   1b498:	beq	1b47c <__assert_fail@plt+0x98d8>
   1b49c:	ldr	r0, [r6, #52]	; 0x34
   1b4a0:	cmp	r0, #0
   1b4a4:	beq	1b4ac <__assert_fail@plt+0x9908>
   1b4a8:	bl	1cc7c <__assert_fail@plt+0xb0d8>
   1b4ac:	ldr	r3, [r6, #48]	; 0x30
   1b4b0:	movw	r2, #258	; 0x102
   1b4b4:	ldr	r0, [r6, #56]	; 0x38
   1b4b8:	tst	r2, r3
   1b4bc:	beq	1b548 <__assert_fail@plt+0x99a4>
   1b4c0:	cmp	r0, #0
   1b4c4:	beq	1b4cc <__assert_fail@plt+0x9928>
   1b4c8:	bl	1cc7c <__assert_fail@plt+0xb0d8>
   1b4cc:	mov	r0, r6
   1b4d0:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b4d4:	cmp	r5, #0
   1b4d8:	bne	1b588 <__assert_fail@plt+0x99e4>
   1b4dc:	mov	r0, r5
   1b4e0:	ldrd	r4, [sp]
   1b4e4:	ldr	r6, [sp, #8]
   1b4e8:	add	sp, sp, #12
   1b4ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4f0:	bl	11b80 <close@plt>
   1b4f4:	b	1b488 <__assert_fail@plt+0x98e4>
   1b4f8:	bl	11b80 <close@plt>
   1b4fc:	cmp	r0, #0
   1b500:	beq	1b470 <__assert_fail@plt+0x98cc>
   1b504:	bl	119b8 <__errno_location@plt>
   1b508:	ldr	r5, [r0]
   1b50c:	b	1b474 <__assert_fail@plt+0x98d0>
   1b510:	tst	r3, #4
   1b514:	bne	1b470 <__assert_fail@plt+0x98cc>
   1b518:	ldr	r0, [r6, #28]
   1b51c:	bl	11ae4 <fchdir@plt>
   1b520:	cmp	r0, #0
   1b524:	bne	1b550 <__assert_fail@plt+0x99ac>
   1b528:	ldr	r0, [r6, #28]
   1b52c:	bl	11b80 <close@plt>
   1b530:	cmp	r0, #0
   1b534:	beq	1b470 <__assert_fail@plt+0x98cc>
   1b538:	bl	119b8 <__errno_location@plt>
   1b53c:	mov	r4, r0
   1b540:	ldr	r5, [r4]
   1b544:	b	1b474 <__assert_fail@plt+0x98d0>
   1b548:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b54c:	b	1b4cc <__assert_fail@plt+0x9928>
   1b550:	bl	119b8 <__errno_location@plt>
   1b554:	ldr	r5, [r0]
   1b558:	mov	r4, r0
   1b55c:	ldr	r0, [r6, #28]
   1b560:	bl	11b80 <close@plt>
   1b564:	adds	r3, r0, #0
   1b568:	movne	r3, #1
   1b56c:	cmp	r5, #0
   1b570:	movne	r3, #0
   1b574:	cmp	r3, #0
   1b578:	beq	1b474 <__assert_fail@plt+0x98d0>
   1b57c:	b	1b540 <__assert_fail@plt+0x999c>
   1b580:	mov	r4, r3
   1b584:	b	1b3f4 <__assert_fail@plt+0x9850>
   1b588:	bl	119b8 <__errno_location@plt>
   1b58c:	str	r5, [r0]
   1b590:	mvn	r5, #0
   1b594:	b	1b4dc <__assert_fail@plt+0x9938>
   1b598:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b59c:	ldr	r4, [r0]
   1b5a0:	strd	r6, [sp, #8]
   1b5a4:	str	r8, [sp, #16]
   1b5a8:	str	lr, [sp, #20]
   1b5ac:	sub	sp, sp, #8
   1b5b0:	cmp	r4, #0
   1b5b4:	beq	1b7c4 <__assert_fail@plt+0x9c20>
   1b5b8:	ldr	r1, [r0, #48]	; 0x30
   1b5bc:	ands	r3, r1, #8192	; 0x2000
   1b5c0:	bne	1b7c4 <__assert_fail@plt+0x9c20>
   1b5c4:	ldrh	r2, [r4, #60]	; 0x3c
   1b5c8:	mov	r8, r0
   1b5cc:	mov	r0, #3
   1b5d0:	strh	r0, [r4, #60]	; 0x3c
   1b5d4:	cmp	r2, #1
   1b5d8:	beq	1ba1c <__assert_fail@plt+0x9e78>
   1b5dc:	cmp	r2, #2
   1b5e0:	ldrh	r3, [r4, #56]	; 0x38
   1b5e4:	beq	1b6e4 <__assert_fail@plt+0x9b40>
   1b5e8:	cmp	r3, #1
   1b5ec:	bne	1b61c <__assert_fail@plt+0x9a78>
   1b5f0:	b	1b7e4 <__assert_fail@plt+0x9c40>
   1b5f4:	mov	r0, r4
   1b5f8:	str	r5, [r8]
   1b5fc:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b600:	ldr	r4, [r5, #48]	; 0x30
   1b604:	cmp	r4, #0
   1b608:	beq	1b864 <__assert_fail@plt+0x9cc0>
   1b60c:	ldrh	r3, [r5, #60]	; 0x3c
   1b610:	mov	r4, r5
   1b614:	cmp	r3, #4
   1b618:	bne	1b938 <__assert_fail@plt+0x9d94>
   1b61c:	ldr	r5, [r4, #8]
   1b620:	cmp	r5, #0
   1b624:	bne	1b5f4 <__assert_fail@plt+0x9a50>
   1b628:	ldr	r6, [r4, #4]
   1b62c:	ldr	r3, [r6, #12]
   1b630:	cmp	r3, #0
   1b634:	bne	1bb94 <__assert_fail@plt+0x9ff0>
   1b638:	mov	r0, r4
   1b63c:	str	r6, [r8]
   1b640:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b644:	ldr	r3, [r6, #48]	; 0x30
   1b648:	cmn	r3, #1
   1b64c:	beq	1bb74 <__assert_fail@plt+0x9fd0>
   1b650:	ldrh	r3, [r6, #56]	; 0x38
   1b654:	cmp	r3, #11
   1b658:	beq	1ba18 <__assert_fail@plt+0x9e74>
   1b65c:	ldr	r2, [r8, #24]
   1b660:	mov	r1, #0
   1b664:	ldr	r3, [r6, #40]	; 0x28
   1b668:	strb	r1, [r2, r3]
   1b66c:	ldr	r3, [r6, #48]	; 0x30
   1b670:	cmp	r3, r1
   1b674:	beq	1b790 <__assert_fail@plt+0x9bec>
   1b678:	ldrh	r3, [r6, #58]	; 0x3a
   1b67c:	tst	r3, #2
   1b680:	beq	1bad0 <__assert_fail@plt+0x9f2c>
   1b684:	ldr	r3, [r8, #48]	; 0x30
   1b688:	ldr	r4, [r6, #36]	; 0x24
   1b68c:	tst	r3, #4
   1b690:	bne	1b6d8 <__assert_fail@plt+0x9b34>
   1b694:	tst	r3, #512	; 0x200
   1b698:	beq	1bc70 <__assert_fail@plt+0xa0cc>
   1b69c:	ldr	r1, [r8, #32]
   1b6a0:	sub	r3, r4, r1
   1b6a4:	cmn	r1, #100	; 0x64
   1b6a8:	clz	r3, r3
   1b6ac:	lsr	r3, r3, #5
   1b6b0:	moveq	r3, #0
   1b6b4:	cmp	r3, #0
   1b6b8:	bne	1ba18 <__assert_fail@plt+0x9e74>
   1b6bc:	add	r0, r8, #60	; 0x3c
   1b6c0:	bl	1e81c <__assert_fail@plt+0xcc78>
   1b6c4:	cmp	r0, #0
   1b6c8:	blt	1b6d0 <__assert_fail@plt+0x9b2c>
   1b6cc:	bl	11b80 <close@plt>
   1b6d0:	str	r4, [r8, #32]
   1b6d4:	ldr	r4, [r6, #36]	; 0x24
   1b6d8:	mov	r0, r4
   1b6dc:	bl	11b80 <close@plt>
   1b6e0:	b	1bad8 <__assert_fail@plt+0x9f34>
   1b6e4:	sub	r2, r3, #12
   1b6e8:	cmp	r2, #1
   1b6ec:	bls	1b9d4 <__assert_fail@plt+0x9e30>
   1b6f0:	cmp	r3, #1
   1b6f4:	bne	1b61c <__assert_fail@plt+0x9a78>
   1b6f8:	tst	r1, #64	; 0x40
   1b6fc:	beq	1b714 <__assert_fail@plt+0x9b70>
   1b700:	ldrd	r2, [r8, #16]
   1b704:	ldrd	r6, [r4, #64]	; 0x40
   1b708:	cmp	r7, r3
   1b70c:	cmpeq	r6, r2
   1b710:	bne	1b7ec <__assert_fail@plt+0x9c48>
   1b714:	ldr	r5, [r8, #4]
   1b718:	cmp	r5, #0
   1b71c:	beq	1ba7c <__assert_fail@plt+0x9ed8>
   1b720:	tst	r1, #4096	; 0x1000
   1b724:	bne	1ba30 <__assert_fail@plt+0x9e8c>
   1b728:	mvn	r2, #0
   1b72c:	mov	r1, r4
   1b730:	ldr	r3, [r4, #24]
   1b734:	mov	r0, r8
   1b738:	bl	19fec <__assert_fail@plt+0x8448>
   1b73c:	cmp	r0, #0
   1b740:	beq	1bb5c <__assert_fail@plt+0x9fb8>
   1b744:	bl	119b8 <__errno_location@plt>
   1b748:	ldrh	r3, [r4, #58]	; 0x3a
   1b74c:	ldr	r2, [r0]
   1b750:	orr	r3, r3, #1
   1b754:	str	r2, [r4, #32]
   1b758:	strh	r3, [r4, #58]	; 0x3a
   1b75c:	ldr	r4, [r8, #4]
   1b760:	cmp	r4, #0
   1b764:	beq	1b784 <__assert_fail@plt+0x9be0>
   1b768:	mov	r3, r4
   1b76c:	ldr	r2, [r3, #4]
   1b770:	ldr	r2, [r2, #24]
   1b774:	str	r2, [r3, #24]
   1b778:	ldr	r3, [r3, #8]
   1b77c:	cmp	r3, #0
   1b780:	bne	1b76c <__assert_fail@plt+0x9bc8>
   1b784:	mov	r3, #0
   1b788:	str	r3, [r8, #4]
   1b78c:	b	1b940 <__assert_fail@plt+0x9d9c>
   1b790:	mov	r0, r8
   1b794:	bl	19f40 <__assert_fail@plt+0x839c>
   1b798:	cmp	r0, #0
   1b79c:	beq	1bad8 <__assert_fail@plt+0x9f34>
   1b7a0:	bl	119b8 <__errno_location@plt>
   1b7a4:	ldr	r3, [r8, #48]	; 0x30
   1b7a8:	ldr	r2, [r0]
   1b7ac:	orr	r0, r3, #8192	; 0x2000
   1b7b0:	ldrh	r3, [r6, #56]	; 0x38
   1b7b4:	str	r2, [r6, #32]
   1b7b8:	str	r0, [r8, #48]	; 0x30
   1b7bc:	cmp	r3, #2
   1b7c0:	bne	1baec <__assert_fail@plt+0x9f48>
   1b7c4:	mov	r4, #0
   1b7c8:	mov	r0, r4
   1b7cc:	add	sp, sp, #8
   1b7d0:	ldrd	r4, [sp]
   1b7d4:	ldrd	r6, [sp, #8]
   1b7d8:	ldr	r8, [sp, #16]
   1b7dc:	add	sp, sp, #20
   1b7e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7e4:	cmp	r2, #4
   1b7e8:	bne	1b6f8 <__assert_fail@plt+0x9b54>
   1b7ec:	ldrh	r3, [r4, #58]	; 0x3a
   1b7f0:	tst	r3, #2
   1b7f4:	bne	1bbd4 <__assert_fail@plt+0xa030>
   1b7f8:	ldr	r5, [r8, #4]
   1b7fc:	cmp	r5, #0
   1b800:	bne	1b838 <__assert_fail@plt+0x9c94>
   1b804:	mov	r3, #6
   1b808:	mov	r2, r4
   1b80c:	ldr	r0, [r8, #48]	; 0x30
   1b810:	add	r1, r8, #56	; 0x38
   1b814:	strh	r3, [r4, #56]	; 0x38
   1b818:	bl	19e74 <__assert_fail@plt+0x82d0>
   1b81c:	b	1b7c8 <__assert_fail@plt+0x9c24>
   1b820:	bl	11b98 <closedir@plt>
   1b824:	mov	r0, r5
   1b828:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b82c:	cmp	r6, #0
   1b830:	beq	1b858 <__assert_fail@plt+0x9cb4>
   1b834:	mov	r5, r6
   1b838:	ldr	r6, [r5, #8]
   1b83c:	ldr	r0, [r5, #12]
   1b840:	cmp	r0, #0
   1b844:	bne	1b820 <__assert_fail@plt+0x9c7c>
   1b848:	mov	r0, r5
   1b84c:	bl	19610 <__assert_fail@plt+0x7a6c>
   1b850:	cmp	r6, #0
   1b854:	bne	1b834 <__assert_fail@plt+0x9c90>
   1b858:	mov	r3, #0
   1b85c:	str	r3, [r8, #4]
   1b860:	b	1b804 <__assert_fail@plt+0x9c60>
   1b864:	mov	r0, r8
   1b868:	bl	19f40 <__assert_fail@plt+0x839c>
   1b86c:	ldr	r3, [r8, #48]	; 0x30
   1b870:	cmp	r0, #0
   1b874:	orrne	r3, r3, #8192	; 0x2000
   1b878:	strne	r3, [r8, #48]	; 0x30
   1b87c:	bne	1b7c8 <__assert_fail@plt+0x9c24>
   1b880:	movw	r2, #258	; 0x102
   1b884:	ldr	r0, [r8, #56]	; 0x38
   1b888:	tst	r2, r3
   1b88c:	beq	1bbcc <__assert_fail@plt+0xa028>
   1b890:	cmp	r0, #0
   1b894:	beq	1b89c <__assert_fail@plt+0x9cf8>
   1b898:	bl	1cc7c <__assert_fail@plt+0xb0d8>
   1b89c:	ldr	r2, [r5, #52]	; 0x34
   1b8a0:	add	r4, r5, #168	; 0xa8
   1b8a4:	mov	r1, r4
   1b8a8:	ldr	r0, [r8, #24]
   1b8ac:	str	r2, [r5, #40]	; 0x28
   1b8b0:	add	r2, r2, #1
   1b8b4:	bl	11748 <memmove@plt>
   1b8b8:	mov	r0, r4
   1b8bc:	mov	r1, #47	; 0x2f
   1b8c0:	bl	11a78 <strrchr@plt>
   1b8c4:	cmp	r0, #0
   1b8c8:	beq	1b8f8 <__assert_fail@plt+0x9d54>
   1b8cc:	cmp	r4, r0
   1b8d0:	beq	1bb64 <__assert_fail@plt+0x9fc0>
   1b8d4:	add	r6, r0, #1
   1b8d8:	mov	r0, r6
   1b8dc:	bl	11988 <strlen@plt>
   1b8e0:	mov	r7, r0
   1b8e4:	mov	r1, r6
   1b8e8:	mov	r0, r4
   1b8ec:	add	r2, r7, #1
   1b8f0:	bl	11748 <memmove@plt>
   1b8f4:	str	r7, [r5, #52]	; 0x34
   1b8f8:	ldr	r3, [r8, #24]
   1b8fc:	movw	r1, #258	; 0x102
   1b900:	ldr	r2, [r8, #48]	; 0x30
   1b904:	str	r3, [r5, #24]
   1b908:	str	r3, [r5, #28]
   1b90c:	tst	r1, r2
   1b910:	bne	1bb24 <__assert_fail@plt+0x9f80>
   1b914:	mov	r0, #32
   1b918:	bl	39028 <__assert_fail@plt+0x27484>
   1b91c:	cmp	r0, #0
   1b920:	str	r0, [r8, #56]	; 0x38
   1b924:	beq	1bc64 <__assert_fail@plt+0xa0c0>
   1b928:	bl	39ad4 <__assert_fail@plt+0x27f30>
   1b92c:	mov	r4, r5
   1b930:	ldrh	r3, [r5, #56]	; 0x38
   1b934:	b	1b984 <__assert_fail@plt+0x9de0>
   1b938:	cmp	r3, #2
   1b93c:	beq	1bbe0 <__assert_fail@plt+0xa03c>
   1b940:	ldr	r0, [r4, #4]
   1b944:	mov	ip, #47	; 0x2f
   1b948:	add	r1, r4, #168	; 0xa8
   1b94c:	ldr	r3, [r8, #24]
   1b950:	ldr	lr, [r0, #28]
   1b954:	ldr	r2, [r0, #40]	; 0x28
   1b958:	sub	r0, r2, #1
   1b95c:	ldrb	lr, [lr, r0]
   1b960:	cmp	lr, ip
   1b964:	movne	r0, r2
   1b968:	strb	ip, [r3, r0]
   1b96c:	add	r0, r3, r0
   1b970:	ldr	r2, [r4, #52]	; 0x34
   1b974:	add	r0, r0, #1
   1b978:	add	r2, r2, #1
   1b97c:	bl	11748 <memmove@plt>
   1b980:	ldrh	r3, [r4, #56]	; 0x38
   1b984:	cmp	r3, #11
   1b988:	str	r4, [r8]
   1b98c:	beq	1b9fc <__assert_fail@plt+0x9e58>
   1b990:	cmp	r3, #1
   1b994:	bne	1b7c8 <__assert_fail@plt+0x9c24>
   1b998:	ldr	r3, [r4, #48]	; 0x30
   1b99c:	add	r1, r8, #56	; 0x38
   1b9a0:	ldr	r0, [r8, #48]	; 0x30
   1b9a4:	cmp	r3, #0
   1b9a8:	ldrdeq	r2, [r4, #64]	; 0x40
   1b9ac:	strdeq	r2, [r8, #16]
   1b9b0:	mov	r2, r4
   1b9b4:	bl	19da0 <__assert_fail@plt+0x81fc>
   1b9b8:	subs	r5, r0, #0
   1b9bc:	bne	1b7c8 <__assert_fail@plt+0x9c24>
   1b9c0:	bl	119b8 <__errno_location@plt>
   1b9c4:	mov	r3, #12
   1b9c8:	mov	r4, r5
   1b9cc:	str	r3, [r0]
   1b9d0:	b	1b7c8 <__assert_fail@plt+0x9c24>
   1b9d4:	mov	r3, #1
   1b9d8:	mov	r2, r4
   1b9dc:	ldr	r0, [r8, #32]
   1b9e0:	bl	19c44 <__assert_fail@plt+0x80a0>
   1b9e4:	cmp	r0, #1
   1b9e8:	strh	r0, [r4, #56]	; 0x38
   1b9ec:	beq	1bc88 <__assert_fail@plt+0xa0e4>
   1b9f0:	cmp	r0, #11
   1b9f4:	str	r4, [r8]
   1b9f8:	bne	1b7c8 <__assert_fail@plt+0x9c24>
   1b9fc:	ldrd	r2, [r4, #112]	; 0x70
   1ba00:	cmp	r3, #0
   1ba04:	cmpeq	r2, #2
   1ba08:	beq	1bc10 <__assert_fail@plt+0xa06c>
   1ba0c:	cmp	r3, #0
   1ba10:	cmpeq	r2, #1
   1ba14:	beq	1b7c8 <__assert_fail@plt+0x9c24>
   1ba18:	bl	11b68 <abort@plt>
   1ba1c:	mov	r2, r4
   1ba20:	ldr	r0, [r8, #32]
   1ba24:	bl	19c44 <__assert_fail@plt+0x80a0>
   1ba28:	strh	r0, [r4, #56]	; 0x38
   1ba2c:	b	1b7c8 <__assert_fail@plt+0x9c24>
   1ba30:	bic	r1, r1, #4096	; 0x1000
   1ba34:	str	r1, [r8, #48]	; 0x30
   1ba38:	b	1ba54 <__assert_fail@plt+0x9eb0>
   1ba3c:	bl	11b98 <closedir@plt>
   1ba40:	mov	r0, r5
   1ba44:	bl	19610 <__assert_fail@plt+0x7a6c>
   1ba48:	cmp	r6, #0
   1ba4c:	beq	1ba74 <__assert_fail@plt+0x9ed0>
   1ba50:	mov	r5, r6
   1ba54:	ldr	r6, [r5, #8]
   1ba58:	ldr	r0, [r5, #12]
   1ba5c:	cmp	r0, #0
   1ba60:	bne	1ba3c <__assert_fail@plt+0x9e98>
   1ba64:	mov	r0, r5
   1ba68:	bl	19610 <__assert_fail@plt+0x7a6c>
   1ba6c:	cmp	r6, #0
   1ba70:	bne	1ba50 <__assert_fail@plt+0x9eac>
   1ba74:	mov	r3, #0
   1ba78:	str	r3, [r8, #4]
   1ba7c:	mov	r1, #3
   1ba80:	mov	r0, r8
   1ba84:	bl	1a2ac <__assert_fail@plt+0x8708>
   1ba88:	cmp	r0, #0
   1ba8c:	str	r0, [r8, #4]
   1ba90:	movne	r4, r0
   1ba94:	bne	1b784 <__assert_fail@plt+0x9be0>
   1ba98:	ldr	r0, [r8, #48]	; 0x30
   1ba9c:	tst	r0, #8192	; 0x2000
   1baa0:	bne	1b7c4 <__assert_fail@plt+0x9c20>
   1baa4:	ldr	r3, [r4, #32]
   1baa8:	cmp	r3, #0
   1baac:	beq	1bac0 <__assert_fail@plt+0x9f1c>
   1bab0:	ldrh	r3, [r4, #56]	; 0x38
   1bab4:	cmp	r3, #4
   1bab8:	movne	r3, #7
   1babc:	strhne	r3, [r4, #56]	; 0x38
   1bac0:	add	r1, r8, #56	; 0x38
   1bac4:	mov	r2, r4
   1bac8:	bl	19e74 <__assert_fail@plt+0x82d0>
   1bacc:	b	1b7c8 <__assert_fail@plt+0x9c24>
   1bad0:	tst	r3, #1
   1bad4:	beq	1bc30 <__assert_fail@plt+0xa08c>
   1bad8:	ldrh	r3, [r6, #56]	; 0x38
   1badc:	ldr	r0, [r8, #48]	; 0x30
   1bae0:	cmp	r3, #2
   1bae4:	beq	1bb14 <__assert_fail@plt+0x9f70>
   1bae8:	ldr	r2, [r6, #32]
   1baec:	cmp	r2, #0
   1baf0:	movne	r3, #7
   1baf4:	strhne	r3, [r6, #56]	; 0x38
   1baf8:	bne	1bb14 <__assert_fail@plt+0x9f70>
   1bafc:	mov	r3, #6
   1bb00:	mov	r2, r6
   1bb04:	add	r1, r8, #56	; 0x38
   1bb08:	strh	r3, [r6, #56]	; 0x38
   1bb0c:	bl	19e74 <__assert_fail@plt+0x82d0>
   1bb10:	ldr	r0, [r8, #48]	; 0x30
   1bb14:	tst	r0, #8192	; 0x2000
   1bb18:	moveq	r4, r6
   1bb1c:	beq	1b7c8 <__assert_fail@plt+0x9c24>
   1bb20:	b	1b7c4 <__assert_fail@plt+0x9c20>
   1bb24:	movw	r1, #38416	; 0x9610
   1bb28:	movt	r1, #1
   1bb2c:	movw	r3, #39248	; 0x9950
   1bb30:	movt	r3, #1
   1bb34:	movw	r2, #39312	; 0x9990
   1bb38:	movt	r2, #1
   1bb3c:	str	r1, [sp]
   1bb40:	mov	r0, #31
   1bb44:	mov	r1, #0
   1bb48:	bl	1c93c <__assert_fail@plt+0xad98>
   1bb4c:	mov	r4, r5
   1bb50:	ldrh	r3, [r5, #56]	; 0x38
   1bb54:	str	r0, [r8, #56]	; 0x38
   1bb58:	b	1b984 <__assert_fail@plt+0x9de0>
   1bb5c:	ldr	r4, [r8, #4]
   1bb60:	b	1b784 <__assert_fail@plt+0x9be0>
   1bb64:	ldrb	r3, [r4, #1]
   1bb68:	cmp	r3, #0
   1bb6c:	beq	1b8f8 <__assert_fail@plt+0x9d54>
   1bb70:	b	1b8d4 <__assert_fail@plt+0x9d30>
   1bb74:	mov	r0, r6
   1bb78:	bl	19610 <__assert_fail@plt+0x7a6c>
   1bb7c:	bl	119b8 <__errno_location@plt>
   1bb80:	mov	r3, #0
   1bb84:	mov	r4, r3
   1bb88:	str	r3, [r0]
   1bb8c:	str	r3, [r8]
   1bb90:	b	1b7c8 <__assert_fail@plt+0x9c24>
   1bb94:	ldr	r2, [r8, #24]
   1bb98:	mov	r1, #3
   1bb9c:	mov	r0, r8
   1bba0:	ldr	r3, [r6, #40]	; 0x28
   1bba4:	str	r6, [r8]
   1bba8:	strb	r5, [r2, r3]
   1bbac:	bl	1a2ac <__assert_fail@plt+0x8708>
   1bbb0:	subs	r3, r0, #0
   1bbb4:	bne	1bc54 <__assert_fail@plt+0xa0b0>
   1bbb8:	ldr	r3, [r8, #48]	; 0x30
   1bbbc:	tst	r3, #8192	; 0x2000
   1bbc0:	bne	1b7c4 <__assert_fail@plt+0x9c20>
   1bbc4:	ldr	r6, [r4, #4]
   1bbc8:	b	1b638 <__assert_fail@plt+0x9a94>
   1bbcc:	bl	19610 <__assert_fail@plt+0x7a6c>
   1bbd0:	b	1b89c <__assert_fail@plt+0x9cf8>
   1bbd4:	ldr	r0, [r4, #36]	; 0x24
   1bbd8:	bl	11b80 <close@plt>
   1bbdc:	b	1b7f8 <__assert_fail@plt+0x9c54>
   1bbe0:	mov	r3, #1
   1bbe4:	mov	r2, r5
   1bbe8:	ldr	r0, [r8, #32]
   1bbec:	ldr	r1, [r8, #48]	; 0x30
   1bbf0:	bl	19c44 <__assert_fail@plt+0x80a0>
   1bbf4:	cmp	r0, #1
   1bbf8:	strh	r0, [r5, #56]	; 0x38
   1bbfc:	beq	1bce0 <__assert_fail@plt+0xa13c>
   1bc00:	mov	r3, #3
   1bc04:	mov	r4, r5
   1bc08:	strh	r3, [r5, #60]	; 0x3c
   1bc0c:	b	1b940 <__assert_fail@plt+0x9d9c>
   1bc10:	mov	r3, #0
   1bc14:	mov	r2, r4
   1bc18:	ldr	r0, [r8, #32]
   1bc1c:	ldr	r1, [r8, #48]	; 0x30
   1bc20:	bl	19c44 <__assert_fail@plt+0x80a0>
   1bc24:	mov	r3, r0
   1bc28:	strh	r0, [r4, #56]	; 0x38
   1bc2c:	b	1b990 <__assert_fail@plt+0x9dec>
   1bc30:	movw	r3, #49316	; 0xc0a4
   1bc34:	movt	r3, #3
   1bc38:	ldr	r1, [r6, #4]
   1bc3c:	mvn	r2, #0
   1bc40:	mov	r0, r8
   1bc44:	bl	19fec <__assert_fail@plt+0x8448>
   1bc48:	cmp	r0, #0
   1bc4c:	beq	1bad8 <__assert_fail@plt+0x9f34>
   1bc50:	b	1b7a0 <__assert_fail@plt+0x9bfc>
   1bc54:	mov	r0, r4
   1bc58:	mov	r4, r3
   1bc5c:	bl	19610 <__assert_fail@plt+0x7a6c>
   1bc60:	b	1b940 <__assert_fail@plt+0x9d9c>
   1bc64:	ldrh	r3, [r5, #56]	; 0x38
   1bc68:	mov	r4, r5
   1bc6c:	b	1b984 <__assert_fail@plt+0x9de0>
   1bc70:	mov	r0, r4
   1bc74:	bl	11ae4 <fchdir@plt>
   1bc78:	cmp	r0, #0
   1bc7c:	bne	1bd30 <__assert_fail@plt+0xa18c>
   1bc80:	ldr	r4, [r6, #36]	; 0x24
   1bc84:	b	1b6d8 <__assert_fail@plt+0x9b34>
   1bc88:	ldr	r3, [r8, #48]	; 0x30
   1bc8c:	tst	r3, #4
   1bc90:	strne	r4, [r8]
   1bc94:	bne	1b998 <__assert_fail@plt+0x9df4>
   1bc98:	lsl	r2, r3, #11
   1bc9c:	tst	r3, #512	; 0x200
   1bca0:	and	r2, r2, #32768	; 0x8000
   1bca4:	orr	r2, r2, #540672	; 0x84000
   1bca8:	orr	r2, r2, #2304	; 0x900
   1bcac:	beq	1bd50 <__assert_fail@plt+0xa1ac>
   1bcb0:	movw	r1, #47404	; 0xb92c
   1bcb4:	movt	r1, #3
   1bcb8:	ldr	r0, [r8, #32]
   1bcbc:	bl	1fd88 <__assert_fail@plt+0xe1e4>
   1bcc0:	cmp	r0, #0
   1bcc4:	str	r0, [r4, #36]	; 0x24
   1bcc8:	blt	1bd64 <__assert_fail@plt+0xa1c0>
   1bccc:	ldrh	r2, [r4, #58]	; 0x3a
   1bcd0:	ldrh	r3, [r4, #56]	; 0x38
   1bcd4:	orr	r2, r2, #2
   1bcd8:	strh	r2, [r4, #58]	; 0x3a
   1bcdc:	b	1b984 <__assert_fail@plt+0x9de0>
   1bce0:	ldr	r3, [r8, #48]	; 0x30
   1bce4:	tst	r3, #4
   1bce8:	bne	1bc00 <__assert_fail@plt+0xa05c>
   1bcec:	lsl	r2, r3, #11
   1bcf0:	tst	r3, #512	; 0x200
   1bcf4:	and	r2, r2, #32768	; 0x8000
   1bcf8:	orr	r2, r2, #540672	; 0x84000
   1bcfc:	orr	r2, r2, #2304	; 0x900
   1bd00:	beq	1bd80 <__assert_fail@plt+0xa1dc>
   1bd04:	movw	r1, #47404	; 0xb92c
   1bd08:	movt	r1, #3
   1bd0c:	ldr	r0, [r8, #32]
   1bd10:	bl	1fd88 <__assert_fail@plt+0xe1e4>
   1bd14:	cmp	r0, #0
   1bd18:	str	r0, [r5, #36]	; 0x24
   1bd1c:	blt	1bd94 <__assert_fail@plt+0xa1f0>
   1bd20:	ldrh	r3, [r5, #58]	; 0x3a
   1bd24:	orr	r3, r3, #2
   1bd28:	strh	r3, [r5, #58]	; 0x3a
   1bd2c:	b	1bc00 <__assert_fail@plt+0xa05c>
   1bd30:	bl	119b8 <__errno_location@plt>
   1bd34:	ldr	r3, [r8, #48]	; 0x30
   1bd38:	ldr	r2, [r0]
   1bd3c:	ldr	r4, [r6, #36]	; 0x24
   1bd40:	orr	r3, r3, #8192	; 0x2000
   1bd44:	str	r2, [r6, #32]
   1bd48:	str	r3, [r8, #48]	; 0x30
   1bd4c:	b	1b6d8 <__assert_fail@plt+0x9b34>
   1bd50:	mov	r1, r2
   1bd54:	movw	r0, #47404	; 0xb92c
   1bd58:	movt	r0, #3
   1bd5c:	bl	39ea8 <__assert_fail@plt+0x28304>
   1bd60:	b	1bcc0 <__assert_fail@plt+0xa11c>
   1bd64:	bl	119b8 <__errno_location@plt>
   1bd68:	ldr	r3, [r0]
   1bd6c:	mov	r2, #7
   1bd70:	str	r3, [r4, #32]
   1bd74:	strh	r2, [r4, #56]	; 0x38
   1bd78:	str	r4, [r8]
   1bd7c:	b	1b7c8 <__assert_fail@plt+0x9c24>
   1bd80:	mov	r1, r2
   1bd84:	movw	r0, #47404	; 0xb92c
   1bd88:	movt	r0, #3
   1bd8c:	bl	39ea8 <__assert_fail@plt+0x28304>
   1bd90:	b	1bd14 <__assert_fail@plt+0xa170>
   1bd94:	bl	119b8 <__errno_location@plt>
   1bd98:	ldr	r3, [r0]
   1bd9c:	mov	r2, #7
   1bda0:	str	r3, [r5, #32]
   1bda4:	strh	r2, [r5, #56]	; 0x38
   1bda8:	b	1bc00 <__assert_fail@plt+0xa05c>
   1bdac:	cmp	r2, #4
   1bdb0:	bhi	1bdc4 <__assert_fail@plt+0xa220>
   1bdb4:	mov	r3, #0
   1bdb8:	strh	r2, [r1, #60]	; 0x3c
   1bdbc:	mov	r0, r3
   1bdc0:	bx	lr
   1bdc4:	str	r4, [sp, #-8]!
   1bdc8:	str	lr, [sp, #4]
   1bdcc:	bl	119b8 <__errno_location@plt>
   1bdd0:	mov	r2, #22
   1bdd4:	mov	r3, #1
   1bdd8:	ldr	r4, [sp]
   1bddc:	add	sp, sp, #4
   1bde0:	str	r2, [r0]
   1bde4:	mov	r0, r3
   1bde8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1bdf0:	mov	r5, r0
   1bdf4:	strd	r6, [sp, #8]
   1bdf8:	strd	r8, [sp, #16]
   1bdfc:	mov	r8, r1
   1be00:	str	sl, [sp, #24]
   1be04:	str	lr, [sp, #28]
   1be08:	bl	119b8 <__errno_location@plt>
   1be0c:	bics	r2, r8, #4096	; 0x1000
   1be10:	mov	r6, r0
   1be14:	movne	r3, #22
   1be18:	movne	r0, #0
   1be1c:	strne	r3, [r6]
   1be20:	bne	1bee8 <__assert_fail@plt+0xa344>
   1be24:	ldr	r9, [r5]
   1be28:	str	r2, [r6]
   1be2c:	ldr	r3, [r5, #48]	; 0x30
   1be30:	ands	r0, r3, #8192	; 0x2000
   1be34:	bne	1bf98 <__assert_fail@plt+0xa3f4>
   1be38:	ldrh	r3, [r9, #56]	; 0x38
   1be3c:	cmp	r3, #9
   1be40:	beq	1bfa0 <__assert_fail@plt+0xa3fc>
   1be44:	cmp	r3, #1
   1be48:	bne	1bee8 <__assert_fail@plt+0xa344>
   1be4c:	ldr	r4, [r5, #4]
   1be50:	cmp	r4, #0
   1be54:	bne	1be74 <__assert_fail@plt+0xa2d0>
   1be58:	b	1be94 <__assert_fail@plt+0xa2f0>
   1be5c:	bl	11b98 <closedir@plt>
   1be60:	mov	r0, r4
   1be64:	bl	19610 <__assert_fail@plt+0x7a6c>
   1be68:	cmp	r7, #0
   1be6c:	beq	1be94 <__assert_fail@plt+0xa2f0>
   1be70:	mov	r4, r7
   1be74:	ldr	r7, [r4, #8]
   1be78:	ldr	r0, [r4, #12]
   1be7c:	cmp	r0, #0
   1be80:	bne	1be5c <__assert_fail@plt+0xa2b8>
   1be84:	mov	r0, r4
   1be88:	bl	19610 <__assert_fail@plt+0x7a6c>
   1be8c:	cmp	r7, #0
   1be90:	bne	1be70 <__assert_fail@plt+0xa2cc>
   1be94:	cmp	r8, #4096	; 0x1000
   1be98:	movne	r4, #1
   1be9c:	bne	1beb0 <__assert_fail@plt+0xa30c>
   1bea0:	ldr	r3, [r5, #48]	; 0x30
   1bea4:	mov	r4, #2
   1bea8:	orr	r3, r3, #4096	; 0x1000
   1beac:	str	r3, [r5, #48]	; 0x30
   1beb0:	ldr	r3, [r9, #48]	; 0x30
   1beb4:	cmp	r3, #0
   1beb8:	bne	1bed8 <__assert_fail@plt+0xa334>
   1bebc:	ldr	r3, [r9, #24]
   1bec0:	ldrb	r3, [r3]
   1bec4:	cmp	r3, #47	; 0x2f
   1bec8:	beq	1bed8 <__assert_fail@plt+0xa334>
   1becc:	ldr	r3, [r5, #48]	; 0x30
   1bed0:	tst	r3, #4
   1bed4:	beq	1bf00 <__assert_fail@plt+0xa35c>
   1bed8:	mov	r1, r4
   1bedc:	mov	r0, r5
   1bee0:	bl	1a2ac <__assert_fail@plt+0x8708>
   1bee4:	str	r0, [r5, #4]
   1bee8:	ldrd	r4, [sp]
   1beec:	ldrd	r6, [sp, #8]
   1bef0:	ldrd	r8, [sp, #16]
   1bef4:	ldr	sl, [sp, #24]
   1bef8:	add	sp, sp, #28
   1befc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf00:	lsl	r2, r3, #11
   1bf04:	tst	r3, #512	; 0x200
   1bf08:	and	r2, r2, #32768	; 0x8000
   1bf0c:	orr	r2, r2, #540672	; 0x84000
   1bf10:	orr	r2, r2, #2304	; 0x900
   1bf14:	beq	1bfa8 <__assert_fail@plt+0xa404>
   1bf18:	movw	r1, #47404	; 0xb92c
   1bf1c:	movt	r1, #3
   1bf20:	ldr	r0, [r5, #32]
   1bf24:	bl	1fd88 <__assert_fail@plt+0xe1e4>
   1bf28:	mov	r7, r0
   1bf2c:	cmp	r7, #0
   1bf30:	movlt	r3, #0
   1bf34:	movlt	r0, r3
   1bf38:	strlt	r3, [r5, #4]
   1bf3c:	blt	1bee8 <__assert_fail@plt+0xa344>
   1bf40:	mov	r1, r4
   1bf44:	mov	r0, r5
   1bf48:	bl	1a2ac <__assert_fail@plt+0x8708>
   1bf4c:	ldr	r3, [r5, #48]	; 0x30
   1bf50:	str	r0, [r5, #4]
   1bf54:	ands	r4, r3, #512	; 0x200
   1bf58:	beq	1bfc0 <__assert_fail@plt+0xa41c>
   1bf5c:	ldr	r1, [r5, #32]
   1bf60:	sub	r3, r7, r1
   1bf64:	cmn	r1, #100	; 0x64
   1bf68:	clz	r3, r3
   1bf6c:	lsr	r3, r3, #5
   1bf70:	moveq	r3, #0
   1bf74:	cmp	r3, #0
   1bf78:	bne	1bff8 <__assert_fail@plt+0xa454>
   1bf7c:	add	r0, r5, #60	; 0x3c
   1bf80:	bl	1e81c <__assert_fail@plt+0xcc78>
   1bf84:	cmp	r0, #0
   1bf88:	blt	1bf90 <__assert_fail@plt+0xa3ec>
   1bf8c:	bl	11b80 <close@plt>
   1bf90:	str	r7, [r5, #32]
   1bf94:	b	1bfd8 <__assert_fail@plt+0xa434>
   1bf98:	mov	r0, r2
   1bf9c:	b	1bee8 <__assert_fail@plt+0xa344>
   1bfa0:	ldr	r0, [r9, #8]
   1bfa4:	b	1bee8 <__assert_fail@plt+0xa344>
   1bfa8:	mov	r1, r2
   1bfac:	movw	r0, #47404	; 0xb92c
   1bfb0:	movt	r0, #3
   1bfb4:	bl	39ea8 <__assert_fail@plt+0x28304>
   1bfb8:	mov	r7, r0
   1bfbc:	b	1bf2c <__assert_fail@plt+0xa388>
   1bfc0:	mov	r0, r7
   1bfc4:	bl	11ae4 <fchdir@plt>
   1bfc8:	cmp	r0, #0
   1bfcc:	bne	1bfe0 <__assert_fail@plt+0xa43c>
   1bfd0:	mov	r0, r7
   1bfd4:	bl	11b80 <close@plt>
   1bfd8:	ldr	r0, [r5, #4]
   1bfdc:	b	1bee8 <__assert_fail@plt+0xa344>
   1bfe0:	ldr	r5, [r6]
   1bfe4:	mov	r0, r7
   1bfe8:	bl	11b80 <close@plt>
   1bfec:	mov	r0, r4
   1bff0:	str	r5, [r6]
   1bff4:	b	1bee8 <__assert_fail@plt+0xa344>
   1bff8:	bl	11b68 <abort@plt>
   1bffc:	andeq	r0, r0, r0
   1c000:	ror	r0, r0, #3
   1c004:	udiv	r3, r0, r1
   1c008:	mls	r0, r3, r1, r0
   1c00c:	bx	lr
   1c010:	sub	r0, r1, r0
   1c014:	clz	r0, r0
   1c018:	lsr	r0, r0, #5
   1c01c:	bx	lr
   1c020:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c024:	mov	r5, r1
   1c028:	strd	r6, [sp, #8]
   1c02c:	mov	r6, r0
   1c030:	mov	r7, r3
   1c034:	mov	r0, r1
   1c038:	strd	r8, [sp, #16]
   1c03c:	strd	sl, [sp, #24]
   1c040:	mov	fp, r2
   1c044:	str	lr, [sp, #32]
   1c048:	sub	sp, sp, #4
   1c04c:	ldr	r1, [r6, #8]
   1c050:	ldr	r3, [r6, #24]
   1c054:	blx	r3
   1c058:	ldr	r3, [r6, #8]
   1c05c:	cmp	r0, r3
   1c060:	bcs	1c17c <__assert_fail@plt+0xa5d8>
   1c064:	ldr	r8, [r6]
   1c068:	lsl	r9, r0, #3
   1c06c:	mov	sl, r0
   1c070:	add	r4, r8, r9
   1c074:	str	r4, [fp]
   1c078:	ldr	r1, [r8, r0, lsl #3]
   1c07c:	cmp	r1, #0
   1c080:	beq	1c174 <__assert_fail@plt+0xa5d0>
   1c084:	cmp	r1, r5
   1c088:	beq	1c13c <__assert_fail@plt+0xa598>
   1c08c:	mov	r0, r5
   1c090:	ldr	r3, [r6, #28]
   1c094:	blx	r3
   1c098:	cmp	r0, #0
   1c09c:	bne	1c138 <__assert_fail@plt+0xa594>
   1c0a0:	ldr	r3, [r4, #4]
   1c0a4:	cmp	r3, #0
   1c0a8:	beq	1c174 <__assert_fail@plt+0xa5d0>
   1c0ac:	ldr	r1, [r3]
   1c0b0:	cmp	r5, r1
   1c0b4:	bne	1c0d8 <__assert_fail@plt+0xa534>
   1c0b8:	b	1c0f4 <__assert_fail@plt+0xa550>
   1c0bc:	ldr	r4, [r4, #4]
   1c0c0:	ldr	r3, [r4, #4]
   1c0c4:	cmp	r3, #0
   1c0c8:	beq	1c174 <__assert_fail@plt+0xa5d0>
   1c0cc:	ldr	r1, [r3]
   1c0d0:	cmp	r1, r5
   1c0d4:	beq	1c0f4 <__assert_fail@plt+0xa550>
   1c0d8:	mov	r0, r5
   1c0dc:	ldr	r3, [r6, #28]
   1c0e0:	blx	r3
   1c0e4:	cmp	r0, #0
   1c0e8:	beq	1c0bc <__assert_fail@plt+0xa518>
   1c0ec:	ldr	r3, [r4, #4]
   1c0f0:	ldr	r1, [r3]
   1c0f4:	cmp	r7, #0
   1c0f8:	beq	1c118 <__assert_fail@plt+0xa574>
   1c0fc:	ldr	r0, [r3, #4]
   1c100:	mov	r2, #0
   1c104:	str	r0, [r4, #4]
   1c108:	str	r2, [r3]
   1c10c:	ldr	r2, [r6, #36]	; 0x24
   1c110:	str	r2, [r3, #4]
   1c114:	str	r3, [r6, #36]	; 0x24
   1c118:	mov	r0, r1
   1c11c:	add	sp, sp, #4
   1c120:	ldrd	r4, [sp]
   1c124:	ldrd	r6, [sp, #8]
   1c128:	ldrd	r8, [sp, #16]
   1c12c:	ldrd	sl, [sp, #24]
   1c130:	add	sp, sp, #32
   1c134:	pop	{pc}		; (ldr pc, [sp], #4)
   1c138:	ldr	r1, [r8, sl, lsl #3]
   1c13c:	cmp	r7, #0
   1c140:	beq	1c118 <__assert_fail@plt+0xa574>
   1c144:	ldr	r0, [r4, #4]
   1c148:	cmp	r0, #0
   1c14c:	streq	r0, [r8, sl, lsl #3]
   1c150:	beq	1c118 <__assert_fail@plt+0xa574>
   1c154:	ldrd	r2, [r0]
   1c158:	mov	ip, #0
   1c15c:	strd	r2, [r8, r9]
   1c160:	str	ip, [r0]
   1c164:	ldr	r3, [r6, #36]	; 0x24
   1c168:	str	r3, [r0, #4]
   1c16c:	str	r0, [r6, #36]	; 0x24
   1c170:	b	1c118 <__assert_fail@plt+0xa574>
   1c174:	mov	r1, #0
   1c178:	b	1c118 <__assert_fail@plt+0xa574>
   1c17c:	bl	11b68 <abort@plt>
   1c180:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c184:	ldr	r3, [r1, #4]
   1c188:	strd	r6, [sp, #8]
   1c18c:	ldr	r6, [r1]
   1c190:	strd	r8, [sp, #16]
   1c194:	str	sl, [sp, #24]
   1c198:	str	lr, [sp, #28]
   1c19c:	cmp	r6, r3
   1c1a0:	bcs	1c280 <__assert_fail@plt+0xa6dc>
   1c1a4:	mov	r8, r2
   1c1a8:	mov	r5, r0
   1c1ac:	mov	r7, r1
   1c1b0:	add	r6, r6, #8
   1c1b4:	mov	r9, #0
   1c1b8:	b	1c1c8 <__assert_fail@plt+0xa624>
   1c1bc:	cmp	r3, r6
   1c1c0:	add	r6, r6, #8
   1c1c4:	bls	1c280 <__assert_fail@plt+0xa6dc>
   1c1c8:	ldr	sl, [r6, #-8]
   1c1cc:	cmp	sl, #0
   1c1d0:	beq	1c1bc <__assert_fail@plt+0xa618>
   1c1d4:	ldr	r4, [r6, #-4]
   1c1d8:	cmp	r4, #0
   1c1dc:	beq	1c264 <__assert_fail@plt+0xa6c0>
   1c1e0:	ldr	r1, [r5, #8]
   1c1e4:	b	1c200 <__assert_fail@plt+0xa65c>
   1c1e8:	ldr	r3, [ip, #4]
   1c1ec:	cmp	r2, #0
   1c1f0:	str	r3, [r4, #4]
   1c1f4:	str	r4, [ip, #4]
   1c1f8:	mov	r4, r2
   1c1fc:	beq	1c260 <__assert_fail@plt+0xa6bc>
   1c200:	ldr	sl, [r4]
   1c204:	ldr	r3, [r5, #24]
   1c208:	mov	r0, sl
   1c20c:	blx	r3
   1c210:	ldr	r1, [r5, #8]
   1c214:	cmp	r0, r1
   1c218:	bcs	1c334 <__assert_fail@plt+0xa790>
   1c21c:	ldr	r3, [r5]
   1c220:	ldr	r2, [r4, #4]
   1c224:	ldr	lr, [r3, r0, lsl #3]
   1c228:	add	ip, r3, r0, lsl #3
   1c22c:	cmp	lr, #0
   1c230:	bne	1c1e8 <__assert_fail@plt+0xa644>
   1c234:	ldr	ip, [r5, #12]
   1c238:	cmp	r2, #0
   1c23c:	str	sl, [r3, r0, lsl #3]
   1c240:	add	ip, ip, #1
   1c244:	str	ip, [r5, #12]
   1c248:	str	lr, [r4]
   1c24c:	ldr	r3, [r5, #36]	; 0x24
   1c250:	str	r3, [r4, #4]
   1c254:	str	r4, [r5, #36]	; 0x24
   1c258:	mov	r4, r2
   1c25c:	bne	1c200 <__assert_fail@plt+0xa65c>
   1c260:	ldr	sl, [r6, #-8]
   1c264:	cmp	r8, #0
   1c268:	str	r9, [r6, #-4]
   1c26c:	beq	1c29c <__assert_fail@plt+0xa6f8>
   1c270:	ldr	r3, [r7, #4]
   1c274:	cmp	r3, r6
   1c278:	add	r6, r6, #8
   1c27c:	bhi	1c1c8 <__assert_fail@plt+0xa624>
   1c280:	mov	r0, #1
   1c284:	ldrd	r4, [sp]
   1c288:	ldrd	r6, [sp, #8]
   1c28c:	ldrd	r8, [sp, #16]
   1c290:	ldr	sl, [sp, #24]
   1c294:	add	sp, sp, #28
   1c298:	pop	{pc}		; (ldr pc, [sp], #4)
   1c29c:	mov	r0, sl
   1c2a0:	ldr	r1, [r5, #8]
   1c2a4:	ldr	r3, [r5, #24]
   1c2a8:	blx	r3
   1c2ac:	ldr	r3, [r5, #8]
   1c2b0:	cmp	r0, r3
   1c2b4:	bcs	1c334 <__assert_fail@plt+0xa790>
   1c2b8:	ldr	r3, [r5]
   1c2bc:	ldr	r2, [r3, r0, lsl #3]
   1c2c0:	add	r4, r3, r0, lsl #3
   1c2c4:	cmp	r2, #0
   1c2c8:	beq	1c308 <__assert_fail@plt+0xa764>
   1c2cc:	ldr	r0, [r5, #36]	; 0x24
   1c2d0:	cmp	r0, #0
   1c2d4:	beq	1c31c <__assert_fail@plt+0xa778>
   1c2d8:	ldr	r3, [r0, #4]
   1c2dc:	str	r3, [r5, #36]	; 0x24
   1c2e0:	ldr	r3, [r4, #4]
   1c2e4:	str	sl, [r0]
   1c2e8:	str	r3, [r0, #4]
   1c2ec:	str	r0, [r4, #4]
   1c2f0:	ldr	r2, [r7, #12]
   1c2f4:	str	r9, [r6, #-8]
   1c2f8:	ldr	r3, [r7, #4]
   1c2fc:	sub	r2, r2, #1
   1c300:	str	r2, [r7, #12]
   1c304:	b	1c1bc <__assert_fail@plt+0xa618>
   1c308:	ldr	r2, [r5, #12]
   1c30c:	str	sl, [r3, r0, lsl #3]
   1c310:	add	r2, r2, #1
   1c314:	str	r2, [r5, #12]
   1c318:	b	1c2f0 <__assert_fail@plt+0xa74c>
   1c31c:	mov	r0, #8
   1c320:	bl	39028 <__assert_fail@plt+0x27484>
   1c324:	cmp	r0, #0
   1c328:	bne	1c2e0 <__assert_fail@plt+0xa73c>
   1c32c:	mov	r0, r8
   1c330:	b	1c284 <__assert_fail@plt+0xa6e0>
   1c334:	bl	11b68 <abort@plt>
   1c338:	ldr	r0, [r0, #8]
   1c33c:	bx	lr
   1c340:	ldr	r0, [r0, #12]
   1c344:	bx	lr
   1c348:	ldr	r0, [r0, #16]
   1c34c:	bx	lr
   1c350:	ldm	r0, {r1, r3}
   1c354:	cmp	r1, r3
   1c358:	bcs	1c3cc <__assert_fail@plt+0xa828>
   1c35c:	sub	ip, r3, #1
   1c360:	add	r3, r1, #16
   1c364:	sub	ip, ip, r1
   1c368:	mov	r0, #0
   1c36c:	bic	ip, ip, #7
   1c370:	add	r1, r1, #8
   1c374:	add	ip, ip, r3
   1c378:	b	1c388 <__assert_fail@plt+0xa7e4>
   1c37c:	add	r1, r1, #8
   1c380:	cmp	r1, ip
   1c384:	beq	1c3c8 <__assert_fail@plt+0xa824>
   1c388:	ldr	r3, [r1, #-8]
   1c38c:	cmp	r3, #0
   1c390:	beq	1c37c <__assert_fail@plt+0xa7d8>
   1c394:	ldr	r3, [r1, #-4]
   1c398:	mov	r2, #1
   1c39c:	cmp	r3, #0
   1c3a0:	beq	1c3b4 <__assert_fail@plt+0xa810>
   1c3a4:	ldr	r3, [r3, #4]
   1c3a8:	add	r2, r2, #1
   1c3ac:	cmp	r3, #0
   1c3b0:	bne	1c3a4 <__assert_fail@plt+0xa800>
   1c3b4:	cmp	r0, r2
   1c3b8:	add	r1, r1, #8
   1c3bc:	movcc	r0, r2
   1c3c0:	cmp	r1, ip
   1c3c4:	bne	1c388 <__assert_fail@plt+0xa7e4>
   1c3c8:	bx	lr
   1c3cc:	mov	r0, #0
   1c3d0:	bx	lr
   1c3d4:	ldm	r0, {r1, r3}
   1c3d8:	push	{lr}		; (str lr, [sp, #-4]!)
   1c3dc:	cmp	r1, r3
   1c3e0:	bcs	1c474 <__assert_fail@plt+0xa8d0>
   1c3e4:	sub	ip, r3, #1
   1c3e8:	mov	r2, #0
   1c3ec:	sub	ip, ip, r1
   1c3f0:	add	r3, r1, #16
   1c3f4:	bic	ip, ip, #7
   1c3f8:	add	r1, r1, #8
   1c3fc:	add	ip, ip, r3
   1c400:	mov	lr, r2
   1c404:	b	1c414 <__assert_fail@plt+0xa870>
   1c408:	add	r1, r1, #8
   1c40c:	cmp	r1, ip
   1c410:	beq	1c450 <__assert_fail@plt+0xa8ac>
   1c414:	ldr	r3, [r1, #-8]
   1c418:	cmp	r3, #0
   1c41c:	beq	1c408 <__assert_fail@plt+0xa864>
   1c420:	ldr	r3, [r1, #-4]
   1c424:	add	lr, lr, #1
   1c428:	add	r2, r2, #1
   1c42c:	cmp	r3, #0
   1c430:	beq	1c408 <__assert_fail@plt+0xa864>
   1c434:	ldr	r3, [r3, #4]
   1c438:	add	r2, r2, #1
   1c43c:	cmp	r3, #0
   1c440:	bne	1c434 <__assert_fail@plt+0xa890>
   1c444:	add	r1, r1, #8
   1c448:	cmp	r1, ip
   1c44c:	bne	1c414 <__assert_fail@plt+0xa870>
   1c450:	ldr	r3, [r0, #12]
   1c454:	cmp	r3, lr
   1c458:	movne	r0, #0
   1c45c:	bne	1c470 <__assert_fail@plt+0xa8cc>
   1c460:	ldr	r0, [r0, #16]
   1c464:	sub	r0, r0, r2
   1c468:	clz	r0, r0
   1c46c:	lsr	r0, r0, #5
   1c470:	pop	{pc}		; (ldr pc, [sp], #4)
   1c474:	mov	r2, #0
   1c478:	mov	lr, r2
   1c47c:	b	1c450 <__assert_fail@plt+0xa8ac>
   1c480:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c484:	mov	r4, r1
   1c488:	ldr	r2, [r0]
   1c48c:	ldr	r1, [r0, #4]
   1c490:	ldr	r3, [r0, #16]
   1c494:	strd	r6, [sp, #8]
   1c498:	str	lr, [sp, #16]
   1c49c:	sub	sp, sp, #12
   1c4a0:	cmp	r2, r1
   1c4a4:	ldrd	r6, [r0, #8]
   1c4a8:	bcs	1c5a8 <__assert_fail@plt+0xaa04>
   1c4ac:	sub	ip, r1, #1
   1c4b0:	add	r1, r2, #16
   1c4b4:	sub	ip, ip, r2
   1c4b8:	add	r0, r2, #8
   1c4bc:	bic	ip, ip, #7
   1c4c0:	mov	r5, #0
   1c4c4:	add	ip, ip, r1
   1c4c8:	b	1c4d8 <__assert_fail@plt+0xa934>
   1c4cc:	add	r0, r0, #8
   1c4d0:	cmp	r0, ip
   1c4d4:	beq	1c518 <__assert_fail@plt+0xa974>
   1c4d8:	ldr	r2, [r0, #-8]
   1c4dc:	cmp	r2, #0
   1c4e0:	beq	1c4cc <__assert_fail@plt+0xa928>
   1c4e4:	ldr	r2, [r0, #-4]
   1c4e8:	mov	r1, #1
   1c4ec:	cmp	r2, #0
   1c4f0:	beq	1c504 <__assert_fail@plt+0xa960>
   1c4f4:	ldr	r2, [r2, #4]
   1c4f8:	add	r1, r1, #1
   1c4fc:	cmp	r2, #0
   1c500:	bne	1c4f4 <__assert_fail@plt+0xa950>
   1c504:	cmp	r5, r1
   1c508:	add	r0, r0, #8
   1c50c:	movcc	r5, r1
   1c510:	cmp	r0, ip
   1c514:	bne	1c4d8 <__assert_fail@plt+0xa934>
   1c518:	mov	r1, #1
   1c51c:	mov	r0, r4
   1c520:	movw	r2, #49340	; 0xc0bc
   1c524:	movt	r2, #3
   1c528:	bl	11a18 <__fprintf_chk@plt>
   1c52c:	mov	r3, r6
   1c530:	mov	r1, #1
   1c534:	mov	r0, r4
   1c538:	movw	r2, #49364	; 0xc0d4
   1c53c:	movt	r2, #3
   1c540:	bl	11a18 <__fprintf_chk@plt>
   1c544:	vmov	s15, r7
   1c548:	mov	r3, r7
   1c54c:	mov	r1, #1
   1c550:	vldr	d5, [pc, #88]	; 1c5b0 <__assert_fail@plt+0xaa0c>
   1c554:	mov	r0, r4
   1c558:	movw	r2, #49388	; 0xc0ec
   1c55c:	movt	r2, #3
   1c560:	vcvt.f64.u32	d6, s15
   1c564:	vmov	s15, r6
   1c568:	vmul.f64	d6, d6, d5
   1c56c:	vcvt.f64.u32	d7, s15
   1c570:	vdiv.f64	d5, d6, d7
   1c574:	vstr	d5, [sp]
   1c578:	bl	11a18 <__fprintf_chk@plt>
   1c57c:	mov	r3, r5
   1c580:	mov	r0, r4
   1c584:	movw	r2, #49424	; 0xc110
   1c588:	movt	r2, #3
   1c58c:	mov	r1, #1
   1c590:	add	sp, sp, #12
   1c594:	ldrd	r4, [sp]
   1c598:	ldrd	r6, [sp, #8]
   1c59c:	ldr	lr, [sp, #16]
   1c5a0:	add	sp, sp, #20
   1c5a4:	b	11a18 <__fprintf_chk@plt>
   1c5a8:	mov	r5, #0
   1c5ac:	b	1c518 <__assert_fail@plt+0xa974>
   1c5b0:	andeq	r0, r0, r0
   1c5b4:	subsmi	r0, r9, r0
   1c5b8:	strd	r4, [sp, #-16]!
   1c5bc:	mov	r5, r1
   1c5c0:	str	r6, [sp, #8]
   1c5c4:	mov	r6, r0
   1c5c8:	mov	r0, r1
   1c5cc:	str	lr, [sp, #12]
   1c5d0:	ldr	r1, [r6, #8]
   1c5d4:	ldr	r3, [r6, #24]
   1c5d8:	blx	r3
   1c5dc:	ldr	r3, [r6, #8]
   1c5e0:	cmp	r0, r3
   1c5e4:	bcs	1c654 <__assert_fail@plt+0xaab0>
   1c5e8:	ldr	r4, [r6]
   1c5ec:	ldr	r1, [r4, r0, lsl #3]
   1c5f0:	add	r4, r4, r0, lsl #3
   1c5f4:	cmp	r1, #0
   1c5f8:	beq	1c634 <__assert_fail@plt+0xaa90>
   1c5fc:	cmp	r1, r5
   1c600:	bne	1c614 <__assert_fail@plt+0xaa70>
   1c604:	b	1c638 <__assert_fail@plt+0xaa94>
   1c608:	ldr	r1, [r4]
   1c60c:	cmp	r5, r1
   1c610:	beq	1c638 <__assert_fail@plt+0xaa94>
   1c614:	mov	r0, r5
   1c618:	ldr	r3, [r6, #28]
   1c61c:	blx	r3
   1c620:	cmp	r0, #0
   1c624:	bne	1c64c <__assert_fail@plt+0xaaa8>
   1c628:	ldr	r4, [r4, #4]
   1c62c:	cmp	r4, #0
   1c630:	bne	1c608 <__assert_fail@plt+0xaa64>
   1c634:	mov	r1, #0
   1c638:	ldrd	r4, [sp]
   1c63c:	mov	r0, r1
   1c640:	ldr	r6, [sp, #8]
   1c644:	add	sp, sp, #12
   1c648:	pop	{pc}		; (ldr pc, [sp], #4)
   1c64c:	ldr	r1, [r4]
   1c650:	b	1c638 <__assert_fail@plt+0xaa94>
   1c654:	bl	11b68 <abort@plt>
   1c658:	ldr	r3, [r0, #16]
   1c65c:	cmp	r3, #0
   1c660:	beq	1c6b4 <__assert_fail@plt+0xab10>
   1c664:	ldr	r3, [r0]
   1c668:	ldr	r2, [r0, #4]
   1c66c:	cmp	r3, r2
   1c670:	bcs	1c6a8 <__assert_fail@plt+0xab04>
   1c674:	ldr	r0, [r3]
   1c678:	cmp	r0, #0
   1c67c:	bxne	lr
   1c680:	sub	r2, r2, #1
   1c684:	sub	r2, r2, r3
   1c688:	bic	r2, r2, #7
   1c68c:	add	r2, r3, r2
   1c690:	b	1c6a0 <__assert_fail@plt+0xaafc>
   1c694:	ldr	r0, [r3, #8]!
   1c698:	cmp	r0, #0
   1c69c:	bxne	lr
   1c6a0:	cmp	r3, r2
   1c6a4:	bne	1c694 <__assert_fail@plt+0xaaf0>
   1c6a8:	str	r4, [sp, #-8]!
   1c6ac:	str	lr, [sp, #4]
   1c6b0:	bl	11b68 <abort@plt>
   1c6b4:	mov	r0, r3
   1c6b8:	bx	lr
   1c6bc:	strd	r4, [sp, #-16]!
   1c6c0:	mov	r5, r0
   1c6c4:	mov	r4, r1
   1c6c8:	mov	r0, r1
   1c6cc:	ldr	r1, [r5, #8]
   1c6d0:	ldr	r3, [r5, #24]
   1c6d4:	str	r6, [sp, #8]
   1c6d8:	str	lr, [sp, #12]
   1c6dc:	blx	r3
   1c6e0:	ldr	r3, [r5, #8]
   1c6e4:	cmp	r0, r3
   1c6e8:	bcs	1c750 <__assert_fail@plt+0xabac>
   1c6ec:	ldr	r2, [r5]
   1c6f0:	add	r2, r2, r0, lsl #3
   1c6f4:	mov	r3, r2
   1c6f8:	b	1c704 <__assert_fail@plt+0xab60>
   1c6fc:	cmp	r3, #0
   1c700:	beq	1c71c <__assert_fail@plt+0xab78>
   1c704:	ldm	r3, {r1, r3}
   1c708:	cmp	r1, r4
   1c70c:	bne	1c6fc <__assert_fail@plt+0xab58>
   1c710:	cmp	r3, #0
   1c714:	ldrne	r0, [r3]
   1c718:	bne	1c740 <__assert_fail@plt+0xab9c>
   1c71c:	ldr	r3, [r5, #4]
   1c720:	b	1c730 <__assert_fail@plt+0xab8c>
   1c724:	ldr	r0, [r2]
   1c728:	cmp	r0, #0
   1c72c:	bne	1c740 <__assert_fail@plt+0xab9c>
   1c730:	add	r2, r2, #8
   1c734:	cmp	r3, r2
   1c738:	bhi	1c724 <__assert_fail@plt+0xab80>
   1c73c:	mov	r0, #0
   1c740:	ldrd	r4, [sp]
   1c744:	ldr	r6, [sp, #8]
   1c748:	add	sp, sp, #12
   1c74c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c750:	bl	11b68 <abort@plt>
   1c754:	strd	r4, [sp, #-16]!
   1c758:	mov	r3, #0
   1c75c:	ldr	r5, [r0]
   1c760:	str	r6, [sp, #8]
   1c764:	str	lr, [sp, #12]
   1c768:	ldr	lr, [r0, #4]
   1c76c:	cmp	lr, r5
   1c770:	bls	1c78c <__assert_fail@plt+0xabe8>
   1c774:	ldr	ip, [r5]
   1c778:	cmp	ip, #0
   1c77c:	bne	1c7a0 <__assert_fail@plt+0xabfc>
   1c780:	add	r5, r5, #8
   1c784:	cmp	r5, lr
   1c788:	bcc	1c774 <__assert_fail@plt+0xabd0>
   1c78c:	ldrd	r4, [sp]
   1c790:	mov	r0, r3
   1c794:	ldr	r6, [sp, #8]
   1c798:	add	sp, sp, #12
   1c79c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7a0:	cmp	r2, r3
   1c7a4:	bls	1c78c <__assert_fail@plt+0xabe8>
   1c7a8:	str	ip, [r1, r3, lsl #2]
   1c7ac:	add	r4, r3, #1
   1c7b0:	lsl	lr, r3, #2
   1c7b4:	ldr	ip, [r5, #4]
   1c7b8:	cmp	ip, #0
   1c7bc:	beq	1c81c <__assert_fail@plt+0xac78>
   1c7c0:	cmp	r2, r4
   1c7c4:	bls	1c810 <__assert_fail@plt+0xac6c>
   1c7c8:	ldr	r6, [ip]
   1c7cc:	add	r3, r3, #2
   1c7d0:	str	r6, [r1, r4, lsl #2]
   1c7d4:	ldr	ip, [ip, #4]
   1c7d8:	cmp	ip, #0
   1c7dc:	beq	1c808 <__assert_fail@plt+0xac64>
   1c7e0:	add	lr, lr, #4
   1c7e4:	add	lr, r1, lr
   1c7e8:	cmp	r2, r3
   1c7ec:	add	r3, r3, #1
   1c7f0:	beq	1c814 <__assert_fail@plt+0xac70>
   1c7f4:	ldr	r4, [ip]
   1c7f8:	str	r4, [lr, #4]!
   1c7fc:	ldr	ip, [ip, #4]
   1c800:	cmp	ip, #0
   1c804:	bne	1c7e8 <__assert_fail@plt+0xac44>
   1c808:	ldr	lr, [r0, #4]
   1c80c:	b	1c780 <__assert_fail@plt+0xabdc>
   1c810:	mov	r2, r4
   1c814:	mov	r3, r2
   1c818:	b	1c78c <__assert_fail@plt+0xabe8>
   1c81c:	mov	r3, r4
   1c820:	ldr	lr, [r0, #4]
   1c824:	b	1c780 <__assert_fail@plt+0xabdc>
   1c828:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c82c:	ldr	r3, [r0, #4]
   1c830:	strd	r6, [sp, #8]
   1c834:	strd	r8, [sp, #16]
   1c838:	ldr	r8, [r0]
   1c83c:	str	sl, [sp, #24]
   1c840:	str	lr, [sp, #28]
   1c844:	cmp	r3, r8
   1c848:	bls	1c8c4 <__assert_fail@plt+0xad20>
   1c84c:	mov	r7, r2
   1c850:	mov	r6, r1
   1c854:	mov	r9, r0
   1c858:	mov	r5, #0
   1c85c:	ldr	r0, [r8]
   1c860:	cmp	r0, #0
   1c864:	bne	1c890 <__assert_fail@plt+0xacec>
   1c868:	add	r8, r8, #8
   1c86c:	cmp	r8, r3
   1c870:	bcc	1c85c <__assert_fail@plt+0xacb8>
   1c874:	mov	r0, r5
   1c878:	ldrd	r4, [sp]
   1c87c:	ldrd	r6, [sp, #8]
   1c880:	ldrd	r8, [sp, #16]
   1c884:	ldr	sl, [sp, #24]
   1c888:	add	sp, sp, #28
   1c88c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c890:	mov	r4, r8
   1c894:	b	1c89c <__assert_fail@plt+0xacf8>
   1c898:	ldr	r0, [r4]
   1c89c:	mov	r1, r7
   1c8a0:	blx	r6
   1c8a4:	cmp	r0, #0
   1c8a8:	beq	1c874 <__assert_fail@plt+0xacd0>
   1c8ac:	ldr	r4, [r4, #4]
   1c8b0:	add	r5, r5, #1
   1c8b4:	cmp	r4, #0
   1c8b8:	bne	1c898 <__assert_fail@plt+0xacf4>
   1c8bc:	ldr	r3, [r9, #4]
   1c8c0:	b	1c868 <__assert_fail@plt+0xacc4>
   1c8c4:	mov	r5, #0
   1c8c8:	b	1c874 <__assert_fail@plt+0xacd0>
   1c8cc:	ldrb	r2, [r0]
   1c8d0:	cmp	r2, #0
   1c8d4:	beq	1c900 <__assert_fail@plt+0xad5c>
   1c8d8:	mov	r3, #0
   1c8dc:	rsb	r3, r3, r3, lsl #5
   1c8e0:	add	r3, r3, r2
   1c8e4:	ldrb	r2, [r0, #1]!
   1c8e8:	udiv	ip, r3, r1
   1c8ec:	cmp	r2, #0
   1c8f0:	mls	r3, r1, ip, r3
   1c8f4:	bne	1c8dc <__assert_fail@plt+0xad38>
   1c8f8:	mov	r0, r3
   1c8fc:	bx	lr
   1c900:	mov	r3, r2
   1c904:	mov	r0, r3
   1c908:	bx	lr
   1c90c:	movw	r3, #49320	; 0xc0a8
   1c910:	movt	r3, #3
   1c914:	strd	r4, [sp, #-8]!
   1c918:	ldrd	r4, [r3]
   1c91c:	ldr	r1, [r3, #16]
   1c920:	ldrd	r2, [r3, #8]
   1c924:	strd	r4, [r0]
   1c928:	ldrd	r4, [sp]
   1c92c:	add	sp, sp, #8
   1c930:	strd	r2, [r0, #8]
   1c934:	str	r1, [r0, #16]
   1c938:	bx	lr
   1c93c:	cmp	r2, #0
   1c940:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c944:	movw	r4, #49152	; 0xc000
   1c948:	movt	r4, #1
   1c94c:	movne	r4, r2
   1c950:	strd	r6, [sp, #8]
   1c954:	cmp	r3, #0
   1c958:	str	r8, [sp, #16]
   1c95c:	mov	r8, r0
   1c960:	mov	r0, #40	; 0x28
   1c964:	movw	r5, #49168	; 0xc010
   1c968:	movt	r5, #1
   1c96c:	mov	r7, r1
   1c970:	str	lr, [sp, #20]
   1c974:	movne	r5, r3
   1c978:	bl	39028 <__assert_fail@plt+0x27484>
   1c97c:	subs	r6, r0, #0
   1c980:	beq	1c9c4 <__assert_fail@plt+0xae20>
   1c984:	cmp	r7, #0
   1c988:	movw	r3, #49320	; 0xc0a8
   1c98c:	movt	r3, #3
   1c990:	beq	1ca50 <__assert_fail@plt+0xaeac>
   1c994:	cmp	r7, r3
   1c998:	str	r7, [r6, #20]
   1c99c:	beq	1ca54 <__assert_fail@plt+0xaeb0>
   1c9a0:	vldr	s14, [pc, #456]	; 1cb70 <__assert_fail@plt+0xafcc>
   1c9a4:	vldr	s15, [r7, #8]
   1c9a8:	vcmpe.f32	s15, s14
   1c9ac:	vmrs	APSR_nzcv, fpscr
   1c9b0:	bgt	1c9dc <__assert_fail@plt+0xae38>
   1c9b4:	str	r3, [r6, #20]
   1c9b8:	mov	r0, r6
   1c9bc:	mov	r6, #0
   1c9c0:	bl	19610 <__assert_fail@plt+0x7a6c>
   1c9c4:	mov	r0, r6
   1c9c8:	ldrd	r4, [sp]
   1c9cc:	ldrd	r6, [sp, #8]
   1c9d0:	ldr	r8, [sp, #16]
   1c9d4:	add	sp, sp, #20
   1c9d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9dc:	vldr	s13, [pc, #400]	; 1cb74 <__assert_fail@plt+0xafd0>
   1c9e0:	vcmpe.f32	s15, s13
   1c9e4:	vmrs	APSR_nzcv, fpscr
   1c9e8:	bpl	1c9b4 <__assert_fail@plt+0xae10>
   1c9ec:	vldr	s13, [pc, #388]	; 1cb78 <__assert_fail@plt+0xafd4>
   1c9f0:	vldr	s12, [r7, #12]
   1c9f4:	vcmpe.f32	s12, s13
   1c9f8:	vmrs	APSR_nzcv, fpscr
   1c9fc:	ble	1c9b4 <__assert_fail@plt+0xae10>
   1ca00:	vldr	s13, [r7]
   1ca04:	vcmpe.f32	s13, #0.0
   1ca08:	vmrs	APSR_nzcv, fpscr
   1ca0c:	blt	1c9b4 <__assert_fail@plt+0xae10>
   1ca10:	vadd.f32	s14, s13, s14
   1ca14:	vldr	s13, [r7, #4]
   1ca18:	vcmpe.f32	s14, s13
   1ca1c:	vmrs	APSR_nzcv, fpscr
   1ca20:	bpl	1c9b4 <__assert_fail@plt+0xae10>
   1ca24:	vldr	s12, [pc, #336]	; 1cb7c <__assert_fail@plt+0xafd8>
   1ca28:	vcmpe.f32	s13, s12
   1ca2c:	vmrs	APSR_nzcv, fpscr
   1ca30:	bhi	1c9b4 <__assert_fail@plt+0xae10>
   1ca34:	vcmpe.f32	s15, s14
   1ca38:	vmrs	APSR_nzcv, fpscr
   1ca3c:	ble	1c9b4 <__assert_fail@plt+0xae10>
   1ca40:	ldrb	r3, [r7, #16]
   1ca44:	cmp	r3, #0
   1ca48:	bne	1ca7c <__assert_fail@plt+0xaed8>
   1ca4c:	b	1ca58 <__assert_fail@plt+0xaeb4>
   1ca50:	str	r3, [r6, #20]
   1ca54:	vldr	s15, [pc, #292]	; 1cb80 <__assert_fail@plt+0xafdc>
   1ca58:	vmov	s14, r8
   1ca5c:	vldr	s13, [pc, #288]	; 1cb84 <__assert_fail@plt+0xafe0>
   1ca60:	vcvt.f32.u32	s12, s14
   1ca64:	vdiv.f32	s14, s12, s15
   1ca68:	vcmpe.f32	s14, s13
   1ca6c:	vmrs	APSR_nzcv, fpscr
   1ca70:	bge	1cb04 <__assert_fail@plt+0xaf60>
   1ca74:	vcvt.u32.f32	s15, s14
   1ca78:	vmov	r8, s15
   1ca7c:	cmp	r8, #10
   1ca80:	movcs	r3, r8
   1ca84:	movcc	r3, #10
   1ca88:	orr	r3, r3, #1
   1ca8c:	cmn	r3, #1
   1ca90:	beq	1cb04 <__assert_fail@plt+0xaf60>
   1ca94:	movw	lr, #43691	; 0xaaab
   1ca98:	movt	lr, #43690	; 0xaaaa
   1ca9c:	umull	r1, r2, lr, r3
   1caa0:	cmp	r3, #9
   1caa4:	lsr	r2, r2, #1
   1caa8:	add	r2, r2, r2, lsl #1
   1caac:	sub	r2, r3, r2
   1cab0:	bls	1caf0 <__assert_fail@plt+0xaf4c>
   1cab4:	cmp	r2, #0
   1cab8:	beq	1caf8 <__assert_fail@plt+0xaf54>
   1cabc:	mov	ip, #16
   1cac0:	mov	r0, #9
   1cac4:	mov	r1, #3
   1cac8:	b	1cad4 <__assert_fail@plt+0xaf30>
   1cacc:	cmp	r2, #0
   1cad0:	beq	1caf8 <__assert_fail@plt+0xaf54>
   1cad4:	add	r1, r1, #2
   1cad8:	add	r0, r0, ip
   1cadc:	cmp	r0, r3
   1cae0:	add	ip, ip, #8
   1cae4:	udiv	r2, r3, r1
   1cae8:	mls	r2, r1, r2, r3
   1caec:	bcc	1cacc <__assert_fail@plt+0xaf28>
   1caf0:	cmp	r2, #0
   1caf4:	bne	1cb10 <__assert_fail@plt+0xaf6c>
   1caf8:	add	r3, r3, #2
   1cafc:	cmn	r3, #1
   1cb00:	bne	1ca9c <__assert_fail@plt+0xaef8>
   1cb04:	mov	r3, #0
   1cb08:	str	r3, [r6, #8]
   1cb0c:	b	1c9b8 <__assert_fail@plt+0xae14>
   1cb10:	lsrs	r2, r3, #30
   1cb14:	movne	r7, #1
   1cb18:	moveq	r7, #0
   1cb1c:	tst	r3, #536870912	; 0x20000000
   1cb20:	bne	1cb04 <__assert_fail@plt+0xaf60>
   1cb24:	cmp	r7, #0
   1cb28:	bne	1cb04 <__assert_fail@plt+0xaf60>
   1cb2c:	mov	r0, r3
   1cb30:	mov	r1, #8
   1cb34:	str	r3, [r6, #8]
   1cb38:	bl	38fb4 <__assert_fail@plt+0x27410>
   1cb3c:	cmp	r0, #0
   1cb40:	str	r0, [r6]
   1cb44:	beq	1c9b8 <__assert_fail@plt+0xae14>
   1cb48:	ldr	r3, [r6, #8]
   1cb4c:	str	r7, [r6, #12]
   1cb50:	str	r7, [r6, #16]
   1cb54:	strd	r4, [r6, #24]
   1cb58:	str	r7, [r6, #36]	; 0x24
   1cb5c:	add	r0, r0, r3, lsl #3
   1cb60:	ldr	r3, [sp, #24]
   1cb64:	str	r0, [r6, #4]
   1cb68:	str	r3, [r6, #32]
   1cb6c:	b	1c9c4 <__assert_fail@plt+0xae20>
   1cb70:	stclcc	12, cr12, [ip, #820]	; 0x334
   1cb74:	svccc	0x00666666
   1cb78:	svccc	0x008ccccd
   1cb7c:	svccc	0x00800000
   1cb80:	svccc	0x004ccccd
   1cb84:	svcmi	0x00800000
   1cb88:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cb8c:	mov	r5, r0
   1cb90:	ldr	r2, [r0, #4]
   1cb94:	strd	r6, [sp, #8]
   1cb98:	ldr	r6, [r0]
   1cb9c:	str	r8, [sp, #16]
   1cba0:	str	lr, [sp, #20]
   1cba4:	cmp	r6, r2
   1cba8:	addcc	r6, r6, #8
   1cbac:	movcc	r7, #0
   1cbb0:	bcc	1cbc4 <__assert_fail@plt+0xb020>
   1cbb4:	b	1cc38 <__assert_fail@plt+0xb094>
   1cbb8:	cmp	r2, r6
   1cbbc:	add	r6, r6, #8
   1cbc0:	bls	1cc38 <__assert_fail@plt+0xb094>
   1cbc4:	ldr	r3, [r6, #-8]
   1cbc8:	cmp	r3, #0
   1cbcc:	beq	1cbb8 <__assert_fail@plt+0xb014>
   1cbd0:	ldr	r4, [r6, #-4]
   1cbd4:	ldr	r3, [r5, #32]
   1cbd8:	cmp	r4, #0
   1cbdc:	beq	1cc10 <__assert_fail@plt+0xb06c>
   1cbe0:	cmp	r3, #0
   1cbe4:	beq	1cc58 <__assert_fail@plt+0xb0b4>
   1cbe8:	ldr	r0, [r4]
   1cbec:	blx	r3
   1cbf0:	ldr	r1, [r4, #4]
   1cbf4:	ldr	r3, [r5, #32]
   1cbf8:	ldr	r2, [r5, #36]	; 0x24
   1cbfc:	str	r7, [r4]
   1cc00:	str	r2, [r4, #4]
   1cc04:	str	r4, [r5, #36]	; 0x24
   1cc08:	subs	r4, r1, #0
   1cc0c:	bne	1cbe0 <__assert_fail@plt+0xb03c>
   1cc10:	cmp	r3, #0
   1cc14:	beq	1cc20 <__assert_fail@plt+0xb07c>
   1cc18:	ldr	r0, [r6, #-8]
   1cc1c:	blx	r3
   1cc20:	str	r7, [r6, #-8]
   1cc24:	str	r7, [r6, #-4]
   1cc28:	ldr	r2, [r5, #4]
   1cc2c:	cmp	r2, r6
   1cc30:	add	r6, r6, #8
   1cc34:	bhi	1cbc4 <__assert_fail@plt+0xb020>
   1cc38:	mov	r3, #0
   1cc3c:	ldrd	r6, [sp, #8]
   1cc40:	ldr	r8, [sp, #16]
   1cc44:	str	r3, [r5, #12]
   1cc48:	str	r3, [r5, #16]
   1cc4c:	ldrd	r4, [sp]
   1cc50:	add	sp, sp, #20
   1cc54:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc58:	ldr	r2, [r5, #36]	; 0x24
   1cc5c:	str	r7, [r4]
   1cc60:	ldr	r3, [r4, #4]
   1cc64:	str	r2, [r4, #4]
   1cc68:	mov	r2, r4
   1cc6c:	str	r2, [r5, #36]	; 0x24
   1cc70:	subs	r4, r3, #0
   1cc74:	bne	1cc5c <__assert_fail@plt+0xb0b8>
   1cc78:	b	1cc20 <__assert_fail@plt+0xb07c>
   1cc7c:	strd	r4, [sp, #-16]!
   1cc80:	ldr	r2, [r0, #32]
   1cc84:	ldr	r5, [r0]
   1cc88:	ldr	r3, [r0, #4]
   1cc8c:	cmp	r2, #0
   1cc90:	str	r6, [sp, #8]
   1cc94:	mov	r6, r0
   1cc98:	str	lr, [sp, #12]
   1cc9c:	beq	1cd04 <__assert_fail@plt+0xb160>
   1cca0:	ldr	r2, [r0, #16]
   1cca4:	cmp	r2, #0
   1cca8:	beq	1cd04 <__assert_fail@plt+0xb160>
   1ccac:	cmp	r5, r3
   1ccb0:	bcc	1ccc4 <__assert_fail@plt+0xb120>
   1ccb4:	b	1cd38 <__assert_fail@plt+0xb194>
   1ccb8:	add	r5, r5, #8
   1ccbc:	cmp	r5, r3
   1ccc0:	bcs	1cd00 <__assert_fail@plt+0xb15c>
   1ccc4:	ldr	r0, [r5]
   1ccc8:	cmp	r0, #0
   1cccc:	beq	1ccb8 <__assert_fail@plt+0xb114>
   1ccd0:	mov	r4, r5
   1ccd4:	b	1ccdc <__assert_fail@plt+0xb138>
   1ccd8:	ldr	r0, [r4]
   1ccdc:	ldr	r3, [r6, #32]
   1cce0:	blx	r3
   1cce4:	ldr	r4, [r4, #4]
   1cce8:	cmp	r4, #0
   1ccec:	bne	1ccd8 <__assert_fail@plt+0xb134>
   1ccf0:	ldr	r3, [r6, #4]
   1ccf4:	add	r5, r5, #8
   1ccf8:	cmp	r5, r3
   1ccfc:	bcc	1ccc4 <__assert_fail@plt+0xb120>
   1cd00:	ldr	r5, [r6]
   1cd04:	cmp	r3, r5
   1cd08:	bls	1cd38 <__assert_fail@plt+0xb194>
   1cd0c:	ldr	r0, [r5, #4]
   1cd10:	cmp	r0, #0
   1cd14:	beq	1cd2c <__assert_fail@plt+0xb188>
   1cd18:	ldr	r4, [r0, #4]
   1cd1c:	bl	19610 <__assert_fail@plt+0x7a6c>
   1cd20:	subs	r0, r4, #0
   1cd24:	bne	1cd18 <__assert_fail@plt+0xb174>
   1cd28:	ldr	r3, [r6, #4]
   1cd2c:	add	r5, r5, #8
   1cd30:	cmp	r5, r3
   1cd34:	bcc	1cd0c <__assert_fail@plt+0xb168>
   1cd38:	ldr	r0, [r6, #36]	; 0x24
   1cd3c:	cmp	r0, #0
   1cd40:	beq	1cd54 <__assert_fail@plt+0xb1b0>
   1cd44:	ldr	r4, [r0, #4]
   1cd48:	bl	19610 <__assert_fail@plt+0x7a6c>
   1cd4c:	subs	r0, r4, #0
   1cd50:	bne	1cd44 <__assert_fail@plt+0xb1a0>
   1cd54:	ldr	r0, [r6]
   1cd58:	bl	19610 <__assert_fail@plt+0x7a6c>
   1cd5c:	mov	r0, r6
   1cd60:	ldrd	r4, [sp]
   1cd64:	ldr	r6, [sp, #8]
   1cd68:	ldr	lr, [sp, #12]
   1cd6c:	add	sp, sp, #16
   1cd70:	b	19610 <__assert_fail@plt+0x7a6c>
   1cd74:	ldr	r3, [r0, #20]
   1cd78:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cd7c:	mov	r5, r0
   1cd80:	ldrb	r2, [r3, #16]
   1cd84:	strd	r6, [sp, #8]
   1cd88:	str	lr, [sp, #16]
   1cd8c:	sub	sp, sp, #44	; 0x2c
   1cd90:	cmp	r2, #0
   1cd94:	bne	1cdc0 <__assert_fail@plt+0xb21c>
   1cd98:	vmov	s15, r1
   1cd9c:	vldr	s12, [r3, #8]
   1cda0:	vldr	s13, [pc, #444]	; 1cf64 <__assert_fail@plt+0xb3c0>
   1cda4:	vcvt.f32.u32	s15, s15
   1cda8:	vdiv.f32	s14, s15, s12
   1cdac:	vcmpe.f32	s14, s13
   1cdb0:	vmrs	APSR_nzcv, fpscr
   1cdb4:	vcvtlt.u32.f32	s15, s14
   1cdb8:	vmovlt	r1, s15
   1cdbc:	bge	1ce44 <__assert_fail@plt+0xb2a0>
   1cdc0:	cmp	r1, #10
   1cdc4:	movcc	r1, #10
   1cdc8:	orr	r4, r1, #1
   1cdcc:	cmn	r4, #1
   1cdd0:	beq	1ce44 <__assert_fail@plt+0xb2a0>
   1cdd4:	movw	ip, #43691	; 0xaaab
   1cdd8:	movt	ip, #43690	; 0xaaaa
   1cddc:	umull	r2, r3, ip, r4
   1cde0:	cmp	r4, #9
   1cde4:	lsr	r3, r3, #1
   1cde8:	add	r3, r3, r3, lsl #1
   1cdec:	sub	r3, r4, r3
   1cdf0:	bls	1ce30 <__assert_fail@plt+0xb28c>
   1cdf4:	cmp	r3, #0
   1cdf8:	beq	1ce38 <__assert_fail@plt+0xb294>
   1cdfc:	mov	r0, #16
   1ce00:	mov	r1, #9
   1ce04:	mov	r2, #3
   1ce08:	b	1ce18 <__assert_fail@plt+0xb274>
   1ce0c:	cmp	r3, #0
   1ce10:	add	r0, r0, #8
   1ce14:	beq	1ce38 <__assert_fail@plt+0xb294>
   1ce18:	add	r2, r2, #2
   1ce1c:	add	r1, r1, r0
   1ce20:	cmp	r1, r4
   1ce24:	udiv	r3, r4, r2
   1ce28:	mls	r3, r2, r3, r4
   1ce2c:	bcc	1ce0c <__assert_fail@plt+0xb268>
   1ce30:	cmp	r3, #0
   1ce34:	bne	1ce60 <__assert_fail@plt+0xb2bc>
   1ce38:	add	r4, r4, #2
   1ce3c:	cmn	r4, #1
   1ce40:	bne	1cddc <__assert_fail@plt+0xb238>
   1ce44:	mov	r4, #0
   1ce48:	mov	r0, r4
   1ce4c:	add	sp, sp, #44	; 0x2c
   1ce50:	ldrd	r4, [sp]
   1ce54:	ldrd	r6, [sp, #8]
   1ce58:	add	sp, sp, #16
   1ce5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce60:	lsrs	r3, r4, #30
   1ce64:	movne	r6, #1
   1ce68:	moveq	r6, #0
   1ce6c:	tst	r4, #536870912	; 0x20000000
   1ce70:	bne	1ce44 <__assert_fail@plt+0xb2a0>
   1ce74:	cmp	r6, #0
   1ce78:	bne	1ce44 <__assert_fail@plt+0xb2a0>
   1ce7c:	ldr	r3, [r5, #8]
   1ce80:	cmp	r3, r4
   1ce84:	beq	1cf2c <__assert_fail@plt+0xb388>
   1ce88:	mov	r1, #8
   1ce8c:	mov	r0, r4
   1ce90:	bl	38fb4 <__assert_fail@plt+0x27410>
   1ce94:	cmp	r0, #0
   1ce98:	str	r0, [sp]
   1ce9c:	beq	1ce44 <__assert_fail@plt+0xb2a0>
   1cea0:	add	r3, r0, r4, lsl #3
   1cea4:	ldr	r7, [r5, #20]
   1cea8:	mov	r2, r6
   1ceac:	mov	r0, sp
   1ceb0:	mov	r1, r5
   1ceb4:	ldr	lr, [r5, #28]
   1ceb8:	stmib	sp, {r3, r4, r6}
   1cebc:	ldr	r4, [r5, #24]
   1cec0:	strd	r6, [sp, #16]
   1cec4:	ldr	ip, [r5, #32]
   1cec8:	ldr	r3, [r5, #36]	; 0x24
   1cecc:	str	r4, [sp, #24]
   1ced0:	str	lr, [sp, #28]
   1ced4:	str	ip, [sp, #32]
   1ced8:	str	r3, [sp, #36]	; 0x24
   1cedc:	bl	1c180 <__assert_fail@plt+0xa5dc>
   1cee0:	subs	r4, r0, #0
   1cee4:	bne	1cf34 <__assert_fail@plt+0xb390>
   1cee8:	ldr	r3, [sp, #36]	; 0x24
   1ceec:	mov	r2, #1
   1cef0:	mov	r1, sp
   1cef4:	mov	r0, r5
   1cef8:	str	r3, [r5, #36]	; 0x24
   1cefc:	bl	1c180 <__assert_fail@plt+0xa5dc>
   1cf00:	cmp	r0, #0
   1cf04:	beq	1cf60 <__assert_fail@plt+0xb3bc>
   1cf08:	mov	r1, sp
   1cf0c:	mov	r0, r5
   1cf10:	mov	r2, r4
   1cf14:	bl	1c180 <__assert_fail@plt+0xa5dc>
   1cf18:	cmp	r0, #0
   1cf1c:	beq	1cf60 <__assert_fail@plt+0xb3bc>
   1cf20:	ldr	r0, [sp]
   1cf24:	bl	19610 <__assert_fail@plt+0x7a6c>
   1cf28:	b	1ce48 <__assert_fail@plt+0xb2a4>
   1cf2c:	mov	r4, #1
   1cf30:	b	1ce48 <__assert_fail@plt+0xb2a4>
   1cf34:	ldr	r0, [r5]
   1cf38:	bl	19610 <__assert_fail@plt+0x7a6c>
   1cf3c:	ldrd	r2, [sp]
   1cf40:	ldr	r1, [sp, #8]
   1cf44:	strd	r2, [r5]
   1cf48:	ldr	r2, [sp, #12]
   1cf4c:	str	r1, [r5, #8]
   1cf50:	ldr	r3, [sp, #36]	; 0x24
   1cf54:	str	r2, [r5, #12]
   1cf58:	str	r3, [r5, #36]	; 0x24
   1cf5c:	b	1ce48 <__assert_fail@plt+0xb2a4>
   1cf60:	bl	11b68 <abort@plt>
   1cf64:	svcmi	0x00800000
   1cf68:	strd	r4, [sp, #-16]!
   1cf6c:	str	r6, [sp, #8]
   1cf70:	subs	r6, r1, #0
   1cf74:	str	lr, [sp, #12]
   1cf78:	sub	sp, sp, #8
   1cf7c:	beq	1d108 <__assert_fail@plt+0xb564>
   1cf80:	mov	r3, #0
   1cf84:	mov	r5, r2
   1cf88:	add	r2, sp, #4
   1cf8c:	mov	r4, r0
   1cf90:	bl	1c020 <__assert_fail@plt+0xa47c>
   1cf94:	subs	r3, r0, #0
   1cf98:	beq	1cfc4 <__assert_fail@plt+0xb420>
   1cf9c:	cmp	r5, #0
   1cfa0:	moveq	r0, r5
   1cfa4:	beq	1cfb0 <__assert_fail@plt+0xb40c>
   1cfa8:	mov	r0, #0
   1cfac:	str	r3, [r5]
   1cfb0:	add	sp, sp, #8
   1cfb4:	ldrd	r4, [sp]
   1cfb8:	ldr	r6, [sp, #8]
   1cfbc:	add	sp, sp, #12
   1cfc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cfc4:	vldr	s15, [r4, #8]
   1cfc8:	vldr	s14, [r4, #12]
   1cfcc:	ldr	r3, [r4, #20]
   1cfd0:	vcvt.f32.u32	s15, s15
   1cfd4:	vcvt.f32.u32	s14, s14
   1cfd8:	vldr	s13, [r3, #8]
   1cfdc:	vmul.f32	s12, s13, s15
   1cfe0:	vcmpe.f32	s14, s12
   1cfe4:	vmrs	APSR_nzcv, fpscr
   1cfe8:	bgt	1d030 <__assert_fail@plt+0xb48c>
   1cfec:	ldr	r2, [sp, #4]
   1cff0:	ldr	r3, [r2]
   1cff4:	cmp	r3, #0
   1cff8:	beq	1d134 <__assert_fail@plt+0xb590>
   1cffc:	ldr	r3, [r4, #36]	; 0x24
   1d000:	cmp	r3, #0
   1d004:	beq	1d158 <__assert_fail@plt+0xb5b4>
   1d008:	ldr	r1, [r3, #4]
   1d00c:	str	r1, [r4, #36]	; 0x24
   1d010:	ldr	r1, [r4, #16]
   1d014:	mov	r0, #1
   1d018:	ldr	ip, [r2, #4]
   1d01c:	add	r1, r1, r0
   1d020:	stm	r3, {r6, ip}
   1d024:	str	r3, [r2, #4]
   1d028:	str	r1, [r4, #16]
   1d02c:	b	1cfb0 <__assert_fail@plt+0xb40c>
   1d030:	movw	r2, #49320	; 0xc0a8
   1d034:	movt	r2, #3
   1d038:	cmp	r3, r2
   1d03c:	beq	1d170 <__assert_fail@plt+0xb5cc>
   1d040:	vldr	s12, [pc, #320]	; 1d188 <__assert_fail@plt+0xb5e4>
   1d044:	vcmpe.f32	s13, s12
   1d048:	vmrs	APSR_nzcv, fpscr
   1d04c:	ble	1d10c <__assert_fail@plt+0xb568>
   1d050:	vldr	s11, [pc, #308]	; 1d18c <__assert_fail@plt+0xb5e8>
   1d054:	vcmpe.f32	s13, s11
   1d058:	vmrs	APSR_nzcv, fpscr
   1d05c:	bpl	1d10c <__assert_fail@plt+0xb568>
   1d060:	vldr	s10, [pc, #296]	; 1d190 <__assert_fail@plt+0xb5ec>
   1d064:	vldr	s11, [r3, #12]
   1d068:	vcmpe.f32	s11, s10
   1d06c:	vmrs	APSR_nzcv, fpscr
   1d070:	ble	1d10c <__assert_fail@plt+0xb568>
   1d074:	vldr	s10, [r3]
   1d078:	vcmpe.f32	s10, #0.0
   1d07c:	vmrs	APSR_nzcv, fpscr
   1d080:	blt	1d10c <__assert_fail@plt+0xb568>
   1d084:	vadd.f32	s12, s10, s12
   1d088:	vldr	s10, [r3, #4]
   1d08c:	vcmpe.f32	s12, s10
   1d090:	vmrs	APSR_nzcv, fpscr
   1d094:	bpl	1d10c <__assert_fail@plt+0xb568>
   1d098:	vldr	s9, [pc, #244]	; 1d194 <__assert_fail@plt+0xb5f0>
   1d09c:	vcmpe.f32	s10, s9
   1d0a0:	vmrs	APSR_nzcv, fpscr
   1d0a4:	bhi	1d10c <__assert_fail@plt+0xb568>
   1d0a8:	vcmpe.f32	s13, s12
   1d0ac:	vmrs	APSR_nzcv, fpscr
   1d0b0:	ble	1d10c <__assert_fail@plt+0xb568>
   1d0b4:	ldrb	r3, [r3, #16]
   1d0b8:	vmul.f32	s15, s15, s11
   1d0bc:	cmp	r3, #0
   1d0c0:	beq	1d12c <__assert_fail@plt+0xb588>
   1d0c4:	vldr	s14, [pc, #204]	; 1d198 <__assert_fail@plt+0xb5f4>
   1d0c8:	vcmpe.f32	s15, s14
   1d0cc:	vmrs	APSR_nzcv, fpscr
   1d0d0:	bge	1d168 <__assert_fail@plt+0xb5c4>
   1d0d4:	vcvt.u32.f32	s15, s15
   1d0d8:	mov	r0, r4
   1d0dc:	vmov	r1, s15
   1d0e0:	bl	1cd74 <__assert_fail@plt+0xb1d0>
   1d0e4:	cmp	r0, #0
   1d0e8:	beq	1d168 <__assert_fail@plt+0xb5c4>
   1d0ec:	add	r2, sp, #4
   1d0f0:	mov	r3, #0
   1d0f4:	mov	r1, r6
   1d0f8:	mov	r0, r4
   1d0fc:	bl	1c020 <__assert_fail@plt+0xa47c>
   1d100:	cmp	r0, #0
   1d104:	beq	1cfec <__assert_fail@plt+0xb448>
   1d108:	bl	11b68 <abort@plt>
   1d10c:	vldr	s13, [pc, #136]	; 1d19c <__assert_fail@plt+0xb5f8>
   1d110:	str	r2, [r4, #20]
   1d114:	vmul.f32	s12, s15, s13
   1d118:	vcmpe.f32	s14, s12
   1d11c:	vmrs	APSR_nzcv, fpscr
   1d120:	ble	1cfec <__assert_fail@plt+0xb448>
   1d124:	vldr	s14, [pc, #116]	; 1d1a0 <__assert_fail@plt+0xb5fc>
   1d128:	vmul.f32	s15, s15, s14
   1d12c:	vmul.f32	s15, s15, s13
   1d130:	b	1d0c4 <__assert_fail@plt+0xb520>
   1d134:	ldr	r1, [r4, #12]
   1d138:	mov	r0, #1
   1d13c:	ldr	r3, [r4, #16]
   1d140:	str	r6, [r2]
   1d144:	add	r2, r1, r0
   1d148:	add	r3, r3, r0
   1d14c:	str	r2, [r4, #12]
   1d150:	str	r3, [r4, #16]
   1d154:	b	1cfb0 <__assert_fail@plt+0xb40c>
   1d158:	mov	r0, #8
   1d15c:	bl	39028 <__assert_fail@plt+0x27484>
   1d160:	subs	r3, r0, #0
   1d164:	bne	1d180 <__assert_fail@plt+0xb5dc>
   1d168:	mvn	r0, #0
   1d16c:	b	1cfb0 <__assert_fail@plt+0xb40c>
   1d170:	vldr	s14, [pc, #40]	; 1d1a0 <__assert_fail@plt+0xb5fc>
   1d174:	vldr	s13, [pc, #32]	; 1d19c <__assert_fail@plt+0xb5f8>
   1d178:	vmul.f32	s15, s15, s14
   1d17c:	b	1d12c <__assert_fail@plt+0xb588>
   1d180:	ldr	r2, [sp, #4]
   1d184:	b	1d010 <__assert_fail@plt+0xb46c>
   1d188:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d18c:	svccc	0x00666666
   1d190:	svccc	0x008ccccd
   1d194:	svccc	0x00800000
   1d198:	svcmi	0x00800000
   1d19c:	svccc	0x004ccccd
   1d1a0:	svccc	0x00b4fdf4
   1d1a4:	strd	r4, [sp, #-16]!
   1d1a8:	str	r6, [sp, #8]
   1d1ac:	subs	r6, r1, #0
   1d1b0:	str	lr, [sp, #12]
   1d1b4:	sub	sp, sp, #8
   1d1b8:	beq	1d334 <__assert_fail@plt+0xb790>
   1d1bc:	mov	r3, #0
   1d1c0:	add	r2, sp, #4
   1d1c4:	mov	r4, r0
   1d1c8:	bl	1c020 <__assert_fail@plt+0xa47c>
   1d1cc:	subs	r5, r0, #0
   1d1d0:	beq	1d1ec <__assert_fail@plt+0xb648>
   1d1d4:	mov	r0, r5
   1d1d8:	add	sp, sp, #8
   1d1dc:	ldrd	r4, [sp]
   1d1e0:	ldr	r6, [sp, #8]
   1d1e4:	add	sp, sp, #12
   1d1e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d1ec:	vldr	s15, [r4, #8]
   1d1f0:	vldr	s14, [r4, #12]
   1d1f4:	ldr	r3, [r4, #20]
   1d1f8:	vcvt.f32.u32	s15, s15
   1d1fc:	vcvt.f32.u32	s14, s14
   1d200:	vldr	s13, [r3, #8]
   1d204:	vmul.f32	s12, s13, s15
   1d208:	vcmpe.f32	s14, s12
   1d20c:	vmrs	APSR_nzcv, fpscr
   1d210:	bgt	1d25c <__assert_fail@plt+0xb6b8>
   1d214:	ldr	r3, [sp, #4]
   1d218:	ldr	r2, [r3]
   1d21c:	cmp	r2, #0
   1d220:	beq	1d360 <__assert_fail@plt+0xb7bc>
   1d224:	ldr	r0, [r4, #36]	; 0x24
   1d228:	cmp	r0, #0
   1d22c:	beq	1d384 <__assert_fail@plt+0xb7e0>
   1d230:	ldr	r2, [r0, #4]
   1d234:	str	r2, [r4, #36]	; 0x24
   1d238:	ldr	r2, [r4, #16]
   1d23c:	mov	r5, r6
   1d240:	ldr	r1, [r3, #4]
   1d244:	str	r6, [r0]
   1d248:	add	r2, r2, #1
   1d24c:	str	r1, [r0, #4]
   1d250:	str	r0, [r3, #4]
   1d254:	str	r2, [r4, #16]
   1d258:	b	1d1d4 <__assert_fail@plt+0xb630>
   1d25c:	movw	r2, #49320	; 0xc0a8
   1d260:	movt	r2, #3
   1d264:	cmp	r3, r2
   1d268:	beq	1d39c <__assert_fail@plt+0xb7f8>
   1d26c:	vldr	s12, [pc, #312]	; 1d3ac <__assert_fail@plt+0xb808>
   1d270:	vcmpe.f32	s13, s12
   1d274:	vmrs	APSR_nzcv, fpscr
   1d278:	ble	1d338 <__assert_fail@plt+0xb794>
   1d27c:	vldr	s11, [pc, #300]	; 1d3b0 <__assert_fail@plt+0xb80c>
   1d280:	vcmpe.f32	s13, s11
   1d284:	vmrs	APSR_nzcv, fpscr
   1d288:	bpl	1d338 <__assert_fail@plt+0xb794>
   1d28c:	vldr	s10, [pc, #288]	; 1d3b4 <__assert_fail@plt+0xb810>
   1d290:	vldr	s11, [r3, #12]
   1d294:	vcmpe.f32	s11, s10
   1d298:	vmrs	APSR_nzcv, fpscr
   1d29c:	ble	1d338 <__assert_fail@plt+0xb794>
   1d2a0:	vldr	s10, [r3]
   1d2a4:	vcmpe.f32	s10, #0.0
   1d2a8:	vmrs	APSR_nzcv, fpscr
   1d2ac:	blt	1d338 <__assert_fail@plt+0xb794>
   1d2b0:	vadd.f32	s12, s10, s12
   1d2b4:	vldr	s10, [r3, #4]
   1d2b8:	vcmpe.f32	s12, s10
   1d2bc:	vmrs	APSR_nzcv, fpscr
   1d2c0:	bpl	1d338 <__assert_fail@plt+0xb794>
   1d2c4:	vldr	s9, [pc, #236]	; 1d3b8 <__assert_fail@plt+0xb814>
   1d2c8:	vcmpe.f32	s10, s9
   1d2cc:	vmrs	APSR_nzcv, fpscr
   1d2d0:	bhi	1d338 <__assert_fail@plt+0xb794>
   1d2d4:	vcmpe.f32	s13, s12
   1d2d8:	vmrs	APSR_nzcv, fpscr
   1d2dc:	ble	1d338 <__assert_fail@plt+0xb794>
   1d2e0:	ldrb	r3, [r3, #16]
   1d2e4:	vmul.f32	s15, s15, s11
   1d2e8:	cmp	r3, #0
   1d2ec:	beq	1d358 <__assert_fail@plt+0xb7b4>
   1d2f0:	vldr	s14, [pc, #196]	; 1d3bc <__assert_fail@plt+0xb818>
   1d2f4:	vcmpe.f32	s15, s14
   1d2f8:	vmrs	APSR_nzcv, fpscr
   1d2fc:	bge	1d1d4 <__assert_fail@plt+0xb630>
   1d300:	vcvt.u32.f32	s15, s15
   1d304:	mov	r0, r4
   1d308:	vmov	r1, s15
   1d30c:	bl	1cd74 <__assert_fail@plt+0xb1d0>
   1d310:	cmp	r0, #0
   1d314:	beq	1d1d4 <__assert_fail@plt+0xb630>
   1d318:	add	r2, sp, #4
   1d31c:	mov	r3, #0
   1d320:	mov	r1, r6
   1d324:	mov	r0, r4
   1d328:	bl	1c020 <__assert_fail@plt+0xa47c>
   1d32c:	cmp	r0, #0
   1d330:	beq	1d214 <__assert_fail@plt+0xb670>
   1d334:	bl	11b68 <abort@plt>
   1d338:	vldr	s13, [pc, #128]	; 1d3c0 <__assert_fail@plt+0xb81c>
   1d33c:	str	r2, [r4, #20]
   1d340:	vmul.f32	s12, s15, s13
   1d344:	vcmpe.f32	s14, s12
   1d348:	vmrs	APSR_nzcv, fpscr
   1d34c:	ble	1d214 <__assert_fail@plt+0xb670>
   1d350:	vldr	s14, [pc, #108]	; 1d3c4 <__assert_fail@plt+0xb820>
   1d354:	vmul.f32	s15, s15, s14
   1d358:	vmul.f32	s15, s15, s13
   1d35c:	b	1d2f0 <__assert_fail@plt+0xb74c>
   1d360:	ldr	r2, [r4, #12]
   1d364:	mov	r5, r6
   1d368:	str	r6, [r3]
   1d36c:	ldr	r3, [r4, #16]
   1d370:	add	r2, r2, #1
   1d374:	add	r3, r3, #1
   1d378:	str	r2, [r4, #12]
   1d37c:	str	r3, [r4, #16]
   1d380:	b	1d1d4 <__assert_fail@plt+0xb630>
   1d384:	mov	r0, #8
   1d388:	bl	39028 <__assert_fail@plt+0x27484>
   1d38c:	cmp	r0, #0
   1d390:	beq	1d1d4 <__assert_fail@plt+0xb630>
   1d394:	ldr	r3, [sp, #4]
   1d398:	b	1d238 <__assert_fail@plt+0xb694>
   1d39c:	vldr	s14, [pc, #32]	; 1d3c4 <__assert_fail@plt+0xb820>
   1d3a0:	vldr	s13, [pc, #24]	; 1d3c0 <__assert_fail@plt+0xb81c>
   1d3a4:	vmul.f32	s15, s15, s14
   1d3a8:	b	1d358 <__assert_fail@plt+0xb7b4>
   1d3ac:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d3b0:	svccc	0x00666666
   1d3b4:	svccc	0x008ccccd
   1d3b8:	svccc	0x00800000
   1d3bc:	svcmi	0x00800000
   1d3c0:	svccc	0x004ccccd
   1d3c4:	svccc	0x00b4fdf4
   1d3c8:	strd	r4, [sp, #-16]!
   1d3cc:	mov	r3, #1
   1d3d0:	mov	r4, r0
   1d3d4:	str	r6, [sp, #8]
   1d3d8:	str	lr, [sp, #12]
   1d3dc:	sub	sp, sp, #8
   1d3e0:	add	r2, sp, #4
   1d3e4:	bl	1c020 <__assert_fail@plt+0xa47c>
   1d3e8:	subs	r5, r0, #0
   1d3ec:	beq	1d40c <__assert_fail@plt+0xb868>
   1d3f0:	ldr	r2, [sp, #4]
   1d3f4:	ldr	r3, [r4, #16]
   1d3f8:	ldr	r2, [r2]
   1d3fc:	sub	r3, r3, #1
   1d400:	str	r3, [r4, #16]
   1d404:	cmp	r2, #0
   1d408:	beq	1d424 <__assert_fail@plt+0xb880>
   1d40c:	mov	r0, r5
   1d410:	add	sp, sp, #8
   1d414:	ldrd	r4, [sp]
   1d418:	ldr	r6, [sp, #8]
   1d41c:	add	sp, sp, #12
   1d420:	pop	{pc}		; (ldr pc, [sp], #4)
   1d424:	vldr	s15, [r4, #8]
   1d428:	ldr	r3, [r4, #12]
   1d42c:	ldr	r2, [r4, #20]
   1d430:	vcvt.f32.u32	s15, s15
   1d434:	sub	r3, r3, #1
   1d438:	vmov	s14, r3
   1d43c:	vldr	s13, [r2]
   1d440:	str	r3, [r4, #12]
   1d444:	vmul.f32	s12, s13, s15
   1d448:	vcvt.f32.u32	s14, s14
   1d44c:	vcmpe.f32	s14, s12
   1d450:	vmrs	APSR_nzcv, fpscr
   1d454:	bpl	1d40c <__assert_fail@plt+0xb868>
   1d458:	movw	r3, #49320	; 0xc0a8
   1d45c:	movt	r3, #3
   1d460:	cmp	r2, r3
   1d464:	beq	1d544 <__assert_fail@plt+0xb9a0>
   1d468:	vldr	s11, [pc, #224]	; 1d550 <__assert_fail@plt+0xb9ac>
   1d46c:	vldr	s12, [r2, #8]
   1d470:	vcmpe.f32	s12, s11
   1d474:	vmrs	APSR_nzcv, fpscr
   1d478:	ble	1d52c <__assert_fail@plt+0xb988>
   1d47c:	vldr	s10, [pc, #208]	; 1d554 <__assert_fail@plt+0xb9b0>
   1d480:	vcmpe.f32	s12, s10
   1d484:	vmrs	APSR_nzcv, fpscr
   1d488:	bpl	1d52c <__assert_fail@plt+0xb988>
   1d48c:	vldr	s10, [pc, #196]	; 1d558 <__assert_fail@plt+0xb9b4>
   1d490:	vldr	s9, [r2, #12]
   1d494:	vcmpe.f32	s9, s10
   1d498:	vmrs	APSR_nzcv, fpscr
   1d49c:	ble	1d52c <__assert_fail@plt+0xb988>
   1d4a0:	vcmpe.f32	s13, #0.0
   1d4a4:	vmrs	APSR_nzcv, fpscr
   1d4a8:	blt	1d52c <__assert_fail@plt+0xb988>
   1d4ac:	vadd.f32	s13, s13, s11
   1d4b0:	vldr	s11, [r2, #4]
   1d4b4:	vcmpe.f32	s13, s11
   1d4b8:	vmrs	APSR_nzcv, fpscr
   1d4bc:	bpl	1d52c <__assert_fail@plt+0xb988>
   1d4c0:	vldr	s10, [pc, #148]	; 1d55c <__assert_fail@plt+0xb9b8>
   1d4c4:	vcmpe.f32	s11, s10
   1d4c8:	vmrs	APSR_nzcv, fpscr
   1d4cc:	bhi	1d52c <__assert_fail@plt+0xb988>
   1d4d0:	vcmpe.f32	s12, s13
   1d4d4:	vmrs	APSR_nzcv, fpscr
   1d4d8:	ble	1d52c <__assert_fail@plt+0xb988>
   1d4dc:	ldrb	r3, [r2, #16]
   1d4e0:	vmul.f32	s15, s15, s11
   1d4e4:	cmp	r3, #0
   1d4e8:	beq	1d548 <__assert_fail@plt+0xb9a4>
   1d4ec:	vcvt.u32.f32	s15, s15
   1d4f0:	mov	r0, r4
   1d4f4:	vmov	r1, s15
   1d4f8:	bl	1cd74 <__assert_fail@plt+0xb1d0>
   1d4fc:	cmp	r0, #0
   1d500:	bne	1d40c <__assert_fail@plt+0xb868>
   1d504:	ldr	r0, [r4, #36]	; 0x24
   1d508:	cmp	r0, #0
   1d50c:	beq	1d520 <__assert_fail@plt+0xb97c>
   1d510:	ldr	r6, [r0, #4]
   1d514:	bl	19610 <__assert_fail@plt+0x7a6c>
   1d518:	subs	r0, r6, #0
   1d51c:	bne	1d510 <__assert_fail@plt+0xb96c>
   1d520:	mov	r3, #0
   1d524:	str	r3, [r4, #36]	; 0x24
   1d528:	b	1d40c <__assert_fail@plt+0xb868>
   1d52c:	vldr	s13, [pc, #44]	; 1d560 <__assert_fail@plt+0xb9bc>
   1d530:	str	r3, [r4, #20]
   1d534:	vmul.f32	s13, s15, s13
   1d538:	vcmpe.f32	s14, s13
   1d53c:	vmrs	APSR_nzcv, fpscr
   1d540:	bpl	1d40c <__assert_fail@plt+0xb868>
   1d544:	vldr	s12, [pc, #24]	; 1d564 <__assert_fail@plt+0xb9c0>
   1d548:	vmul.f32	s15, s15, s12
   1d54c:	b	1d4ec <__assert_fail@plt+0xb948>
   1d550:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d554:	svccc	0x00666666
   1d558:	svccc	0x008ccccd
   1d55c:	svccc	0x00800000
   1d560:	andeq	r0, r0, r0
   1d564:	svccc	0x004ccccd
   1d568:	strd	r4, [sp, #-16]!
   1d56c:	mov	r3, #1
   1d570:	mov	r4, r0
   1d574:	str	r6, [sp, #8]
   1d578:	str	lr, [sp, #12]
   1d57c:	sub	sp, sp, #8
   1d580:	add	r2, sp, #4
   1d584:	bl	1c020 <__assert_fail@plt+0xa47c>
   1d588:	subs	r5, r0, #0
   1d58c:	beq	1d5ac <__assert_fail@plt+0xba08>
   1d590:	ldr	r2, [sp, #4]
   1d594:	ldr	r3, [r4, #16]
   1d598:	ldr	r2, [r2]
   1d59c:	sub	r3, r3, #1
   1d5a0:	str	r3, [r4, #16]
   1d5a4:	cmp	r2, #0
   1d5a8:	beq	1d5c4 <__assert_fail@plt+0xba20>
   1d5ac:	mov	r0, r5
   1d5b0:	add	sp, sp, #8
   1d5b4:	ldrd	r4, [sp]
   1d5b8:	ldr	r6, [sp, #8]
   1d5bc:	add	sp, sp, #12
   1d5c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5c4:	vldr	s15, [r4, #8]
   1d5c8:	ldr	r3, [r4, #12]
   1d5cc:	ldr	r2, [r4, #20]
   1d5d0:	vcvt.f32.u32	s15, s15
   1d5d4:	sub	r3, r3, #1
   1d5d8:	vmov	s14, r3
   1d5dc:	vldr	s13, [r2]
   1d5e0:	str	r3, [r4, #12]
   1d5e4:	vmul.f32	s12, s13, s15
   1d5e8:	vcvt.f32.u32	s14, s14
   1d5ec:	vcmpe.f32	s14, s12
   1d5f0:	vmrs	APSR_nzcv, fpscr
   1d5f4:	bpl	1d5ac <__assert_fail@plt+0xba08>
   1d5f8:	movw	r3, #49320	; 0xc0a8
   1d5fc:	movt	r3, #3
   1d600:	cmp	r2, r3
   1d604:	beq	1d6e4 <__assert_fail@plt+0xbb40>
   1d608:	vldr	s11, [pc, #224]	; 1d6f0 <__assert_fail@plt+0xbb4c>
   1d60c:	vldr	s12, [r2, #8]
   1d610:	vcmpe.f32	s12, s11
   1d614:	vmrs	APSR_nzcv, fpscr
   1d618:	ble	1d6cc <__assert_fail@plt+0xbb28>
   1d61c:	vldr	s10, [pc, #208]	; 1d6f4 <__assert_fail@plt+0xbb50>
   1d620:	vcmpe.f32	s12, s10
   1d624:	vmrs	APSR_nzcv, fpscr
   1d628:	bpl	1d6cc <__assert_fail@plt+0xbb28>
   1d62c:	vldr	s10, [pc, #196]	; 1d6f8 <__assert_fail@plt+0xbb54>
   1d630:	vldr	s9, [r2, #12]
   1d634:	vcmpe.f32	s9, s10
   1d638:	vmrs	APSR_nzcv, fpscr
   1d63c:	ble	1d6cc <__assert_fail@plt+0xbb28>
   1d640:	vcmpe.f32	s13, #0.0
   1d644:	vmrs	APSR_nzcv, fpscr
   1d648:	blt	1d6cc <__assert_fail@plt+0xbb28>
   1d64c:	vadd.f32	s13, s13, s11
   1d650:	vldr	s11, [r2, #4]
   1d654:	vcmpe.f32	s13, s11
   1d658:	vmrs	APSR_nzcv, fpscr
   1d65c:	bpl	1d6cc <__assert_fail@plt+0xbb28>
   1d660:	vldr	s10, [pc, #148]	; 1d6fc <__assert_fail@plt+0xbb58>
   1d664:	vcmpe.f32	s11, s10
   1d668:	vmrs	APSR_nzcv, fpscr
   1d66c:	bhi	1d6cc <__assert_fail@plt+0xbb28>
   1d670:	vcmpe.f32	s12, s13
   1d674:	vmrs	APSR_nzcv, fpscr
   1d678:	ble	1d6cc <__assert_fail@plt+0xbb28>
   1d67c:	ldrb	r3, [r2, #16]
   1d680:	vmul.f32	s15, s15, s11
   1d684:	cmp	r3, #0
   1d688:	beq	1d6e8 <__assert_fail@plt+0xbb44>
   1d68c:	vcvt.u32.f32	s15, s15
   1d690:	mov	r0, r4
   1d694:	vmov	r1, s15
   1d698:	bl	1cd74 <__assert_fail@plt+0xb1d0>
   1d69c:	cmp	r0, #0
   1d6a0:	bne	1d5ac <__assert_fail@plt+0xba08>
   1d6a4:	ldr	r0, [r4, #36]	; 0x24
   1d6a8:	cmp	r0, #0
   1d6ac:	beq	1d6c0 <__assert_fail@plt+0xbb1c>
   1d6b0:	ldr	r6, [r0, #4]
   1d6b4:	bl	19610 <__assert_fail@plt+0x7a6c>
   1d6b8:	subs	r0, r6, #0
   1d6bc:	bne	1d6b0 <__assert_fail@plt+0xbb0c>
   1d6c0:	mov	r3, #0
   1d6c4:	str	r3, [r4, #36]	; 0x24
   1d6c8:	b	1d5ac <__assert_fail@plt+0xba08>
   1d6cc:	vldr	s13, [pc, #44]	; 1d700 <__assert_fail@plt+0xbb5c>
   1d6d0:	str	r3, [r4, #20]
   1d6d4:	vmul.f32	s13, s15, s13
   1d6d8:	vcmpe.f32	s14, s13
   1d6dc:	vmrs	APSR_nzcv, fpscr
   1d6e0:	bpl	1d5ac <__assert_fail@plt+0xba08>
   1d6e4:	vldr	s12, [pc, #24]	; 1d704 <__assert_fail@plt+0xbb60>
   1d6e8:	vmul.f32	s15, s15, s12
   1d6ec:	b	1d68c <__assert_fail@plt+0xbae8>
   1d6f0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d6f4:	svccc	0x00666666
   1d6f8:	svccc	0x008ccccd
   1d6fc:	svccc	0x00800000
   1d700:	andeq	r0, r0, r0
   1d704:	svccc	0x004ccccd
   1d708:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d70c:	strd	r6, [sp, #8]
   1d710:	mov	r6, r3
   1d714:	ands	r3, r3, #32
   1d718:	strd	r8, [sp, #16]
   1d71c:	mov	r9, r1
   1d720:	moveq	r1, #1000	; 0x3e8
   1d724:	strd	sl, [sp, #24]
   1d728:	movne	r1, #1024	; 0x400
   1d72c:	mov	r8, r0
   1d730:	str	lr, [sp, #32]
   1d734:	vpush	{d8-d9}
   1d738:	sub	sp, sp, #108	; 0x6c
   1d73c:	str	r2, [sp, #12]
   1d740:	moveq	r2, #1000	; 0x3e8
   1d744:	movne	r2, #1024	; 0x400
   1d748:	str	r3, [sp, #40]	; 0x28
   1d74c:	and	r3, r6, #3
   1d750:	str	r1, [sp, #16]
   1d754:	str	r3, [sp, #32]
   1d758:	mov	r3, #0
   1d75c:	strd	r2, [sp, #24]
   1d760:	str	r1, [sp, #36]	; 0x24
   1d764:	bl	11aa8 <localeconv@plt>
   1d768:	ldr	r3, [sp, #12]
   1d76c:	mov	r4, r0
   1d770:	add	r2, r3, #644	; 0x284
   1d774:	ldr	r3, [r0]
   1d778:	add	r2, r2, #3
   1d77c:	str	r2, [sp, #32]
   1d780:	mov	r0, r3
   1d784:	mov	r5, r3
   1d788:	bl	11988 <strlen@plt>
   1d78c:	ldmib	r4, {r7, sl}
   1d790:	sub	r2, r0, #1
   1d794:	movw	r3, #47404	; 0xb92c
   1d798:	movt	r3, #3
   1d79c:	cmp	r2, #16
   1d7a0:	movcc	r3, r5
   1d7a4:	mov	fp, r0
   1d7a8:	movcs	fp, #1
   1d7ac:	str	r3, [sp, #44]	; 0x2c
   1d7b0:	mov	r0, r7
   1d7b4:	bl	11988 <strlen@plt>
   1d7b8:	cmp	r0, #16
   1d7bc:	movw	r3, #49420	; 0xc10c
   1d7c0:	movt	r3, #3
   1d7c4:	ldrd	r0, [sp, #160]	; 0xa0
   1d7c8:	movhi	r7, r3
   1d7cc:	ldrd	r2, [sp, #168]	; 0xa8
   1d7d0:	cmp	r3, r1
   1d7d4:	cmpeq	r2, r0
   1d7d8:	bhi	1daf0 <__assert_fail@plt+0xbf4c>
   1d7dc:	bl	3a528 <__assert_fail@plt+0x28984>
   1d7e0:	orrs	r3, r2, r3
   1d7e4:	bne	1d818 <__assert_fail@plt+0xbc74>
   1d7e8:	mul	ip, r0, r9
   1d7ec:	mov	r3, r1
   1d7f0:	mov	r2, r0
   1d7f4:	umull	r4, r5, r0, r8
   1d7f8:	mla	r1, r8, r1, ip
   1d7fc:	mov	r0, r4
   1d800:	add	r5, r1, r5
   1d804:	mov	r1, r5
   1d808:	bl	3a528 <__assert_fail@plt+0x28984>
   1d80c:	cmp	r1, r9
   1d810:	cmpeq	r0, r8
   1d814:	beq	1e0f0 <__assert_fail@plt+0xc54c>
   1d818:	ldrd	r0, [sp, #160]	; 0xa0
   1d81c:	bl	3a3e0 <__assert_fail@plt+0x2883c>
   1d820:	vmov	d9, r0, r1
   1d824:	ldrd	r0, [sp, #168]	; 0xa8
   1d828:	bl	3a3e0 <__assert_fail@plt+0x2883c>
   1d82c:	vmov	d7, r0, r1
   1d830:	mov	r0, r8
   1d834:	mov	r1, r9
   1d838:	vdiv.f64	d8, d9, d7
   1d83c:	bl	3a3e0 <__assert_fail@plt+0x2883c>
   1d840:	vmov	d7, r0, r1
   1d844:	tst	r6, #16
   1d848:	vmul.f64	d8, d8, d7
   1d84c:	beq	1da18 <__assert_fail@plt+0xbe74>
   1d850:	vldr	s15, [sp, #16]
   1d854:	vcvt.f64.s32	d7, s15
   1d858:	vmul.f64	d6, d7, d7
   1d85c:	vcmpe.f64	d8, d6
   1d860:	vmrs	APSR_nzcv, fpscr
   1d864:	blt	1e34c <__assert_fail@plt+0xc7a8>
   1d868:	vmul.f64	d5, d7, d6
   1d86c:	vcmpe.f64	d8, d5
   1d870:	vmrs	APSR_nzcv, fpscr
   1d874:	blt	1e358 <__assert_fail@plt+0xc7b4>
   1d878:	vmul.f64	d6, d7, d5
   1d87c:	vcmpe.f64	d8, d6
   1d880:	vmrs	APSR_nzcv, fpscr
   1d884:	blt	1e368 <__assert_fail@plt+0xc7c4>
   1d888:	vmul.f64	d5, d7, d6
   1d88c:	vcmpe.f64	d8, d5
   1d890:	vmrs	APSR_nzcv, fpscr
   1d894:	blt	1e38c <__assert_fail@plt+0xc7e8>
   1d898:	vmul.f64	d6, d7, d5
   1d89c:	vcmpe.f64	d8, d6
   1d8a0:	vmrs	APSR_nzcv, fpscr
   1d8a4:	blt	1e39c <__assert_fail@plt+0xc7f8>
   1d8a8:	vmul.f64	d5, d7, d6
   1d8ac:	vcmpe.f64	d8, d5
   1d8b0:	vmrs	APSR_nzcv, fpscr
   1d8b4:	blt	1e3ac <__assert_fail@plt+0xc808>
   1d8b8:	vmul.f64	d7, d7, d5
   1d8bc:	vcmpe.f64	d8, d7
   1d8c0:	vmrs	APSR_nzcv, fpscr
   1d8c4:	movlt	r3, #7
   1d8c8:	vmovlt.f64	d7, d5
   1d8cc:	strlt	r3, [sp, #16]
   1d8d0:	blt	1d8dc <__assert_fail@plt+0xbd38>
   1d8d4:	mov	r3, #8
   1d8d8:	str	r3, [sp, #16]
   1d8dc:	ands	r3, r6, #32
   1d8e0:	and	r9, r6, #3
   1d8e4:	vdiv.f64	d9, d8, d7
   1d8e8:	clz	r4, r3
   1d8ec:	add	fp, fp, #1
   1d8f0:	lsr	r4, r4, #5
   1d8f4:	cmp	r9, #1
   1d8f8:	add	r4, r4, #1
   1d8fc:	add	r4, r4, fp
   1d900:	beq	1e1a8 <__assert_fail@plt+0xc604>
   1d904:	vldr	d7, [pc, #468]	; 1dae0 <__assert_fail@plt+0xbf3c>
   1d908:	vcmpe.f64	d9, d7
   1d90c:	vmrs	APSR_nzcv, fpscr
   1d910:	vmovpl.f64	d7, d9
   1d914:	bpl	1d954 <__assert_fail@plt+0xbdb0>
   1d918:	vmov	r0, r1, d9
   1d91c:	bl	3a578 <__assert_fail@plt+0x289d4>
   1d920:	mov	r5, r0
   1d924:	mov	r8, r1
   1d928:	bl	3a3e0 <__assert_fail@plt+0x2883c>
   1d92c:	cmp	r9, #0
   1d930:	vmov	d7, r0, r1
   1d934:	bne	1d954 <__assert_fail@plt+0xbdb0>
   1d938:	vcmp.f64	d9, d7
   1d93c:	vmrs	APSR_nzcv, fpscr
   1d940:	beq	1d954 <__assert_fail@plt+0xbdb0>
   1d944:	adds	r0, r5, #1
   1d948:	adc	r1, r8, #0
   1d94c:	bl	3a3e0 <__assert_fail@plt+0x2883c>
   1d950:	vmov	d7, r0, r1
   1d954:	ldr	r5, [sp, #12]
   1d958:	mvn	r2, #0
   1d95c:	mov	r1, #1
   1d960:	movw	r3, #49488	; 0xc150
   1d964:	movt	r3, #3
   1d968:	vstr	d7, [sp]
   1d96c:	mov	r0, r5
   1d970:	bl	119d0 <__sprintf_chk@plt>
   1d974:	mov	r0, r5
   1d978:	bl	11988 <strlen@plt>
   1d97c:	cmp	r0, r4
   1d980:	bls	1e088 <__assert_fail@plt+0xc4e4>
   1d984:	vldr	d7, [pc, #348]	; 1dae8 <__assert_fail@plt+0xbf44>
   1d988:	vmul.f64	d9, d9, d7
   1d98c:	vldr	d7, [pc, #332]	; 1dae0 <__assert_fail@plt+0xbf3c>
   1d990:	vcmpe.f64	d9, d7
   1d994:	vmrs	APSR_nzcv, fpscr
   1d998:	bpl	1d9e0 <__assert_fail@plt+0xbe3c>
   1d99c:	vmov	r0, r1, d9
   1d9a0:	bl	3a578 <__assert_fail@plt+0x289d4>
   1d9a4:	mov	r4, r0
   1d9a8:	mov	r5, r1
   1d9ac:	bl	3a3e0 <__assert_fail@plt+0x2883c>
   1d9b0:	and	r3, r6, #3
   1d9b4:	vmov	d7, r0, r1
   1d9b8:	cmp	r3, #0
   1d9bc:	bne	1d9dc <__assert_fail@plt+0xbe38>
   1d9c0:	vcmp.f64	d9, d7
   1d9c4:	vmrs	APSR_nzcv, fpscr
   1d9c8:	beq	1d9dc <__assert_fail@plt+0xbe38>
   1d9cc:	adds	r0, r4, #1
   1d9d0:	adc	r1, r5, #0
   1d9d4:	bl	3a3e0 <__assert_fail@plt+0x2883c>
   1d9d8:	vmov	d7, r0, r1
   1d9dc:	vmov.f64	d9, d7
   1d9e0:	vldr	d6, [pc, #256]	; 1dae8 <__assert_fail@plt+0xbf44>
   1d9e4:	mvn	r2, #0
   1d9e8:	mov	r1, #1
   1d9ec:	movw	r3, #49480	; 0xc148
   1d9f0:	movt	r3, #3
   1d9f4:	ldr	r4, [sp, #12]
   1d9f8:	vdiv.f64	d7, d9, d6
   1d9fc:	mov	r0, r4
   1da00:	vstr	d7, [sp]
   1da04:	bl	119d0 <__sprintf_chk@plt>
   1da08:	mov	r0, r4
   1da0c:	bl	11988 <strlen@plt>
   1da10:	mov	r9, r0
   1da14:	b	1da64 <__assert_fail@plt+0xbec0>
   1da18:	and	r8, r6, #3
   1da1c:	cmp	r8, #1
   1da20:	beq	1da34 <__assert_fail@plt+0xbe90>
   1da24:	vldr	d7, [pc, #180]	; 1dae0 <__assert_fail@plt+0xbf3c>
   1da28:	vcmpe.f64	d8, d7
   1da2c:	vmrs	APSR_nzcv, fpscr
   1da30:	bmi	1e0ac <__assert_fail@plt+0xc508>
   1da34:	ldr	r4, [sp, #12]
   1da38:	mvn	r2, #0
   1da3c:	mov	r1, #1
   1da40:	movw	r3, #49480	; 0xc148
   1da44:	movt	r3, #3
   1da48:	vstr	d8, [sp]
   1da4c:	str	r2, [sp, #16]
   1da50:	mov	r0, r4
   1da54:	bl	119d0 <__sprintf_chk@plt>
   1da58:	mov	r0, r4
   1da5c:	bl	11988 <strlen@plt>
   1da60:	mov	r9, r0
   1da64:	mov	r2, r0
   1da68:	ldr	r1, [sp, #12]
   1da6c:	ldr	r3, [sp, #32]
   1da70:	sub	r8, r3, r0
   1da74:	mov	r0, r8
   1da78:	add	r9, r8, r9
   1da7c:	bl	11748 <memmove@plt>
   1da80:	tst	r6, #4
   1da84:	bne	1de7c <__assert_fail@plt+0xc2d8>
   1da88:	tst	r6, #128	; 0x80
   1da8c:	beq	1daac <__assert_fail@plt+0xbf08>
   1da90:	ldr	r3, [sp, #16]
   1da94:	cmn	r3, #1
   1da98:	beq	1df1c <__assert_fail@plt+0xc378>
   1da9c:	ldr	r2, [sp, #16]
   1daa0:	and	r3, r6, #256	; 0x100
   1daa4:	orrs	r2, r3, r2
   1daa8:	bne	1e220 <__assert_fail@plt+0xc67c>
   1daac:	ldr	r2, [sp, #32]
   1dab0:	mov	r3, #0
   1dab4:	mov	r0, r8
   1dab8:	strb	r3, [r2]
   1dabc:	add	sp, sp, #108	; 0x6c
   1dac0:	vpop	{d8-d9}
   1dac4:	ldrd	r4, [sp]
   1dac8:	ldrd	r6, [sp, #8]
   1dacc:	ldrd	r8, [sp, #16]
   1dad0:	ldrd	sl, [sp, #24]
   1dad4:	add	sp, sp, #32
   1dad8:	pop	{pc}		; (ldr pc, [sp], #4)
   1dadc:	nop	{0}
   1dae0:	andeq	r0, r0, r0
   1dae4:	mvnsmi	r0, #0
   1dae8:	andeq	r0, r0, r0
   1daec:	eormi	r0, r4, r0
   1daf0:	mov	r2, r0
   1daf4:	mov	r3, r1
   1daf8:	orrs	r3, r2, r3
   1dafc:	beq	1d818 <__assert_fail@plt+0xbc74>
   1db00:	ldrd	r2, [sp, #160]	; 0xa0
   1db04:	ldrd	r0, [sp, #168]	; 0xa8
   1db08:	bl	3a528 <__assert_fail@plt+0x28984>
   1db0c:	orrs	r3, r2, r3
   1db10:	mov	r4, r0
   1db14:	mov	r5, r1
   1db18:	bne	1d818 <__assert_fail@plt+0xbc74>
   1db1c:	mov	r0, r8
   1db20:	mov	r1, r9
   1db24:	mov	r2, r4
   1db28:	mov	r3, r5
   1db2c:	bl	3a528 <__assert_fail@plt+0x28984>
   1db30:	mov	lr, r2
   1db34:	mov	r8, r1
   1db38:	lsl	r1, r3, #2
   1db3c:	mov	r9, r0
   1db40:	lsl	r0, lr, #2
   1db44:	mov	ip, r3
   1db48:	orr	r1, r1, lr, lsr #30
   1db4c:	mov	r2, r4
   1db50:	mov	r3, r5
   1db54:	adds	r0, r0, lr
   1db58:	strd	r4, [sp, #16]
   1db5c:	mov	r4, r9
   1db60:	adc	r1, r1, ip
   1db64:	adds	r0, r0, r0
   1db68:	adc	r1, r1, r1
   1db6c:	mov	r5, r8
   1db70:	bl	3a528 <__assert_fail@plt+0x28984>
   1db74:	adds	r1, r2, r2
   1db78:	adc	r3, r3, r3
   1db7c:	str	r1, [sp, #48]	; 0x30
   1db80:	str	r3, [sp, #52]	; 0x34
   1db84:	ldrd	r2, [sp, #16]
   1db88:	ldrd	r8, [sp, #48]	; 0x30
   1db8c:	str	r0, [sp, #48]	; 0x30
   1db90:	cmp	r3, r9
   1db94:	cmpeq	r2, r8
   1db98:	bls	1e214 <__assert_fail@plt+0xc670>
   1db9c:	mov	r3, r8
   1dba0:	orrs	r3, r3, r9
   1dba4:	movne	r8, #1
   1dba8:	moveq	r8, #0
   1dbac:	ands	r3, r6, #16
   1dbb0:	str	r3, [sp, #16]
   1dbb4:	beq	1e104 <__assert_fail@plt+0xc560>
   1dbb8:	ldrd	r2, [sp, #24]
   1dbbc:	cmp	r5, r3
   1dbc0:	cmpeq	r4, r2
   1dbc4:	bcc	1e26c <__assert_fail@plt+0xc6c8>
   1dbc8:	mov	r0, r4
   1dbcc:	mov	r1, r5
   1dbd0:	bl	3a528 <__assert_fail@plt+0x28984>
   1dbd4:	ldr	ip, [sp, #48]	; 0x30
   1dbd8:	add	r2, r2, r2, lsl #2
   1dbdc:	mov	r4, r0
   1dbe0:	asr	r3, r8, #1
   1dbe4:	mov	r5, r1
   1dbe8:	add	r2, ip, r2, lsl #1
   1dbec:	ldr	ip, [sp, #36]	; 0x24
   1dbf0:	udiv	r9, r2, ip
   1dbf4:	mls	r2, ip, r9, r2
   1dbf8:	str	r9, [sp, #48]	; 0x30
   1dbfc:	add	r2, r3, r2, lsl #1
   1dc00:	cmp	ip, r2
   1dc04:	add	r2, r8, r2
   1dc08:	bhi	1e2a4 <__assert_fail@plt+0xc700>
   1dc0c:	cmp	ip, r2
   1dc10:	mov	ip, #1
   1dc14:	movcc	r8, #3
   1dc18:	movcs	r8, #2
   1dc1c:	ldrd	r2, [sp, #24]
   1dc20:	cmp	r1, r3
   1dc24:	cmpeq	r0, r2
   1dc28:	bcc	1e4f0 <__assert_fail@plt+0xc94c>
   1dc2c:	bl	3a528 <__assert_fail@plt+0x28984>
   1dc30:	add	r2, r2, r2, lsl #2
   1dc34:	ldr	ip, [sp, #36]	; 0x24
   1dc38:	mov	r4, r0
   1dc3c:	asr	r3, r8, #1
   1dc40:	mov	r5, r1
   1dc44:	add	r2, r9, r2, lsl #1
   1dc48:	udiv	r9, r2, ip
   1dc4c:	mls	r2, ip, r9, r2
   1dc50:	str	r9, [sp, #48]	; 0x30
   1dc54:	add	r3, r3, r2, lsl #1
   1dc58:	cmp	ip, r3
   1dc5c:	add	r3, r8, r3
   1dc60:	bhi	1e2e4 <__assert_fail@plt+0xc740>
   1dc64:	cmp	ip, r3
   1dc68:	mov	ip, #1
   1dc6c:	movcc	r8, #3
   1dc70:	movcs	r8, #2
   1dc74:	ldrd	r2, [sp, #24]
   1dc78:	cmp	r1, r3
   1dc7c:	cmpeq	r0, r2
   1dc80:	bcc	1e508 <__assert_fail@plt+0xc964>
   1dc84:	bl	3a528 <__assert_fail@plt+0x28984>
   1dc88:	add	r2, r2, r2, lsl #2
   1dc8c:	mov	r4, r0
   1dc90:	mov	r5, r1
   1dc94:	asr	r3, r8, #1
   1dc98:	add	r9, r9, r2, lsl #1
   1dc9c:	ldr	r2, [sp, #36]	; 0x24
   1dca0:	udiv	ip, r9, r2
   1dca4:	mls	r9, r2, ip, r9
   1dca8:	str	ip, [sp, #16]
   1dcac:	str	ip, [sp, #48]	; 0x30
   1dcb0:	add	r3, r3, r9, lsl #1
   1dcb4:	cmp	r2, r3
   1dcb8:	add	r3, r8, r3
   1dcbc:	bhi	1e2f4 <__assert_fail@plt+0xc750>
   1dcc0:	cmp	r2, r3
   1dcc4:	mov	ip, #1
   1dcc8:	movcc	r8, #3
   1dccc:	movcs	r8, #2
   1dcd0:	ldrd	r2, [sp, #24]
   1dcd4:	cmp	r1, r3
   1dcd8:	cmpeq	r0, r2
   1dcdc:	bcc	1e4fc <__assert_fail@plt+0xc958>
   1dce0:	bl	3a528 <__assert_fail@plt+0x28984>
   1dce4:	ldr	ip, [sp, #16]
   1dce8:	add	r2, r2, r2, lsl #2
   1dcec:	mov	r4, r0
   1dcf0:	asr	r3, r8, #1
   1dcf4:	mov	r5, r1
   1dcf8:	add	r2, ip, r2, lsl #1
   1dcfc:	ldr	ip, [sp, #36]	; 0x24
   1dd00:	udiv	r9, r2, ip
   1dd04:	mls	r2, ip, r9, r2
   1dd08:	str	r9, [sp, #48]	; 0x30
   1dd0c:	add	r3, r3, r2, lsl #1
   1dd10:	cmp	ip, r3
   1dd14:	add	r3, r8, r3
   1dd18:	bhi	1e31c <__assert_fail@plt+0xc778>
   1dd1c:	cmp	r3, ip
   1dd20:	mov	ip, #1
   1dd24:	movhi	r8, #3
   1dd28:	movls	r8, #2
   1dd2c:	ldrd	r2, [sp, #24]
   1dd30:	cmp	r1, r3
   1dd34:	cmpeq	r0, r2
   1dd38:	bcc	1e514 <__assert_fail@plt+0xc970>
   1dd3c:	bl	3a528 <__assert_fail@plt+0x28984>
   1dd40:	add	r2, r2, r2, lsl #2
   1dd44:	mov	r4, r0
   1dd48:	mov	r5, r1
   1dd4c:	asr	r3, r8, #1
   1dd50:	add	r9, r9, r2, lsl #1
   1dd54:	ldr	r2, [sp, #36]	; 0x24
   1dd58:	udiv	ip, r9, r2
   1dd5c:	mls	r9, r2, ip, r9
   1dd60:	str	ip, [sp, #16]
   1dd64:	str	ip, [sp, #48]	; 0x30
   1dd68:	add	r3, r3, r9, lsl #1
   1dd6c:	cmp	r2, r3
   1dd70:	add	r3, r8, r3
   1dd74:	bhi	1e32c <__assert_fail@plt+0xc788>
   1dd78:	cmp	r2, r3
   1dd7c:	mov	ip, #1
   1dd80:	movcc	r8, #3
   1dd84:	movcs	r8, #2
   1dd88:	ldrd	r2, [sp, #24]
   1dd8c:	cmp	r1, r3
   1dd90:	cmpeq	r0, r2
   1dd94:	bcc	1e52c <__assert_fail@plt+0xc988>
   1dd98:	bl	3a528 <__assert_fail@plt+0x28984>
   1dd9c:	mov	r5, r1
   1dda0:	ldr	r1, [sp, #16]
   1dda4:	add	r2, r2, r2, lsl #2
   1dda8:	mov	r4, r0
   1ddac:	asr	r3, r8, #1
   1ddb0:	ldr	r0, [sp, #36]	; 0x24
   1ddb4:	add	r1, r1, r2, lsl #1
   1ddb8:	udiv	r2, r1, r0
   1ddbc:	mls	r1, r0, r2, r1
   1ddc0:	str	r2, [sp, #48]	; 0x30
   1ddc4:	add	r3, r3, r1, lsl #1
   1ddc8:	cmp	r0, r3
   1ddcc:	add	r3, r8, r3
   1ddd0:	bhi	1e33c <__assert_fail@plt+0xc798>
   1ddd4:	cmp	r0, r3
   1ddd8:	mov	ip, #1
   1dddc:	movcs	r8, #2
   1dde0:	movcc	r8, #3
   1dde4:	mov	r3, #6
   1dde8:	str	r3, [sp, #16]
   1ddec:	cmp	r5, #0
   1ddf0:	cmpeq	r4, #9
   1ddf4:	bhi	1e10c <__assert_fail@plt+0xc568>
   1ddf8:	and	r3, r6, #3
   1ddfc:	cmp	r3, #1
   1de00:	beq	1e3bc <__assert_fail@plt+0xc818>
   1de04:	and	r3, r6, #3
   1de08:	cmp	r3, #0
   1de0c:	moveq	r3, ip
   1de10:	movne	r3, #0
   1de14:	cmp	r3, #0
   1de18:	ldr	r3, [sp, #48]	; 0x30
   1de1c:	bne	1e378 <__assert_fail@plt+0xc7d4>
   1de20:	cmp	r3, #0
   1de24:	addne	r3, r3, #48	; 0x30
   1de28:	uxtbne	r3, r3
   1de2c:	bne	1de3c <__assert_fail@plt+0xc298>
   1de30:	tst	r6, #8
   1de34:	bne	1e4c4 <__assert_fail@plt+0xc920>
   1de38:	mov	r3, #48	; 0x30
   1de3c:	ldr	r1, [sp, #12]
   1de40:	mov	r2, fp
   1de44:	mov	r8, #0
   1de48:	add	r9, r1, #644	; 0x284
   1de4c:	strb	r3, [r1, #646]	; 0x286
   1de50:	add	r9, r9, #2
   1de54:	ldr	r1, [sp, #44]	; 0x2c
   1de58:	sub	r9, r9, fp
   1de5c:	mov	r0, r9
   1de60:	bl	11784 <memcpy@plt>
   1de64:	and	r3, r6, #3
   1de68:	cmp	r3, #1
   1de6c:	beq	1e15c <__assert_fail@plt+0xc5b8>
   1de70:	mov	r3, #0
   1de74:	str	r3, [sp, #48]	; 0x30
   1de78:	b	1e11c <__assert_fail@plt+0xc578>
   1de7c:	mov	r0, r7
   1de80:	sub	r4, r9, r8
   1de84:	bl	11988 <strlen@plt>
   1de88:	mov	fp, r0
   1de8c:	mov	r1, r8
   1de90:	mov	r2, r4
   1de94:	add	r0, sp, #60	; 0x3c
   1de98:	mov	r3, #41	; 0x29
   1de9c:	mvn	r5, #0
   1dea0:	bl	1185c <__memcpy_chk@plt>
   1dea4:	ldrb	r3, [sl]
   1dea8:	cmp	r3, #0
   1deac:	beq	1dec0 <__assert_fail@plt+0xc31c>
   1deb0:	cmp	r3, #255	; 0xff
   1deb4:	add	sl, sl, #1
   1deb8:	movne	r5, r3
   1debc:	moveq	r5, r4
   1dec0:	sub	r8, r9, r5
   1dec4:	cmp	r5, r4
   1dec8:	mov	r2, r5
   1decc:	mov	r0, r8
   1ded0:	bls	1deec <__assert_fail@plt+0xc348>
   1ded4:	sub	r8, r9, r4
   1ded8:	mov	r2, r4
   1dedc:	add	r1, sp, #60	; 0x3c
   1dee0:	mov	r0, r8
   1dee4:	bl	11784 <memcpy@plt>
   1dee8:	b	1da88 <__assert_fail@plt+0xbee4>
   1deec:	sub	r4, r4, r5
   1def0:	add	r3, sp, #60	; 0x3c
   1def4:	add	r1, r3, r4
   1def8:	sub	r9, r8, fp
   1defc:	bl	11784 <memcpy@plt>
   1df00:	cmp	r4, #0
   1df04:	mov	r2, fp
   1df08:	mov	r1, r7
   1df0c:	mov	r0, r9
   1df10:	beq	1da88 <__assert_fail@plt+0xbee4>
   1df14:	bl	11784 <memcpy@plt>
   1df18:	b	1dea4 <__assert_fail@plt+0xc300>
   1df1c:	ldrd	r2, [sp, #168]	; 0xa8
   1df20:	cmp	r3, #0
   1df24:	cmpeq	r2, #1
   1df28:	bls	1e2d8 <__assert_fail@plt+0xc734>
   1df2c:	mov	r0, r2
   1df30:	mov	r1, r3
   1df34:	ldrd	r2, [sp, #24]
   1df38:	cmp	r1, r3
   1df3c:	cmpeq	r0, r2
   1df40:	bls	1e56c <__assert_fail@plt+0xc9c8>
   1df44:	mul	r1, r2, r3
   1df48:	mov	r4, r2
   1df4c:	mov	r5, r3
   1df50:	umull	sl, fp, r2, r2
   1df54:	add	fp, fp, r1, lsl #1
   1df58:	ldrd	r0, [sp, #168]	; 0xa8
   1df5c:	cmp	r1, fp
   1df60:	cmpeq	r0, sl
   1df64:	bls	1e3d8 <__assert_fail@plt+0xc834>
   1df68:	mul	r3, r2, fp
   1df6c:	umull	r0, r1, r4, sl
   1df70:	mla	r2, sl, r5, r3
   1df74:	strd	r0, [sp, #16]
   1df78:	add	r3, r2, r1
   1df7c:	str	r3, [sp, #20]
   1df80:	ldrd	sl, [sp, #16]
   1df84:	ldrd	r2, [sp, #168]	; 0xa8
   1df88:	cmp	r3, fp
   1df8c:	cmpeq	r2, sl
   1df90:	bls	1e40c <__assert_fail@plt+0xc868>
   1df94:	ldr	r2, [sp, #16]
   1df98:	mul	r1, r4, fp
   1df9c:	umull	sl, fp, r4, sl
   1dfa0:	mla	r0, r2, r5, r1
   1dfa4:	ldrd	r2, [sp, #168]	; 0xa8
   1dfa8:	add	fp, r0, fp
   1dfac:	cmp	r3, fp
   1dfb0:	cmpeq	r2, sl
   1dfb4:	bls	1e538 <__assert_fail@plt+0xc994>
   1dfb8:	mul	r3, r4, fp
   1dfbc:	umull	r0, r1, r4, sl
   1dfc0:	mla	r2, sl, r5, r3
   1dfc4:	add	r1, r2, r1
   1dfc8:	ldrd	r2, [sp, #168]	; 0xa8
   1dfcc:	cmp	r3, r1
   1dfd0:	cmpeq	r2, r0
   1dfd4:	bls	1e440 <__assert_fail@plt+0xc89c>
   1dfd8:	mul	ip, r0, r5
   1dfdc:	mov	lr, r4
   1dfe0:	umull	r2, r3, r0, r4
   1dfe4:	mla	r1, r4, r1, ip
   1dfe8:	add	r3, r1, r3
   1dfec:	ldrd	r0, [sp, #168]	; 0xa8
   1dff0:	cmp	r1, r3
   1dff4:	cmpeq	r0, r2
   1dff8:	bls	1e474 <__assert_fail@plt+0xc8d0>
   1dffc:	mul	ip, r2, r5
   1e000:	umull	r0, r1, r2, r4
   1e004:	mla	r3, r4, r3, ip
   1e008:	add	r1, r3, r1
   1e00c:	ldrd	r2, [sp, #168]	; 0xa8
   1e010:	cmp	r3, r1
   1e014:	cmpeq	r2, r0
   1e018:	bls	1e5b8 <__assert_fail@plt+0xca14>
   1e01c:	tst	r6, #64	; 0x40
   1e020:	and	r3, r6, #256	; 0x100
   1e024:	beq	1e03c <__assert_fail@plt+0xc498>
   1e028:	ldr	r1, [sp, #12]
   1e02c:	mov	r2, #32
   1e030:	add	r0, r1, #648	; 0x288
   1e034:	strb	r2, [r1, #647]	; 0x287
   1e038:	str	r0, [sp, #32]
   1e03c:	mov	r2, #8
   1e040:	str	r2, [sp, #16]
   1e044:	ldr	r2, [sp, #40]	; 0x28
   1e048:	adds	r1, r2, #0
   1e04c:	movne	r1, #1
   1e050:	ldr	r0, [sp, #16]
   1e054:	movw	r2, #49448	; 0xc128
   1e058:	movt	r2, #3
   1e05c:	cmp	r3, #0
   1e060:	ldrb	r0, [r2, r0]
   1e064:	ldr	r2, [sp, #32]
   1e068:	strb	r0, [r2], #1
   1e06c:	beq	1e264 <__assert_fail@plt+0xc6c0>
   1e070:	cmp	r1, #0
   1e074:	bne	1e278 <__assert_fail@plt+0xc6d4>
   1e078:	mov	r3, #66	; 0x42
   1e07c:	strb	r3, [r2], #1
   1e080:	str	r2, [sp, #32]
   1e084:	b	1daac <__assert_fail@plt+0xbf08>
   1e088:	tst	r6, #8
   1e08c:	beq	1e0a4 <__assert_fail@plt+0xc500>
   1e090:	ldr	r3, [sp, #12]
   1e094:	add	r3, r3, r0
   1e098:	ldrb	r3, [r3, #-1]
   1e09c:	cmp	r3, #48	; 0x30
   1e0a0:	beq	1e304 <__assert_fail@plt+0xc760>
   1e0a4:	sub	r9, r0, fp
   1e0a8:	b	1da64 <__assert_fail@plt+0xbec0>
   1e0ac:	vmov	r0, r1, d8
   1e0b0:	bl	3a578 <__assert_fail@plt+0x289d4>
   1e0b4:	mov	r4, r0
   1e0b8:	mov	r5, r1
   1e0bc:	bl	3a3e0 <__assert_fail@plt+0x2883c>
   1e0c0:	cmp	r8, #0
   1e0c4:	vmov	d7, r0, r1
   1e0c8:	bne	1e0e8 <__assert_fail@plt+0xc544>
   1e0cc:	vcmp.f64	d8, d7
   1e0d0:	vmrs	APSR_nzcv, fpscr
   1e0d4:	beq	1e0e8 <__assert_fail@plt+0xc544>
   1e0d8:	adds	r0, r4, #1
   1e0dc:	adc	r1, r5, #0
   1e0e0:	bl	3a3e0 <__assert_fail@plt+0x2883c>
   1e0e4:	vmov	d7, r0, r1
   1e0e8:	vmov.f64	d8, d7
   1e0ec:	b	1da34 <__assert_fail@plt+0xbe90>
   1e0f0:	mov	r8, #0
   1e0f4:	ands	r3, r6, #16
   1e0f8:	str	r3, [sp, #16]
   1e0fc:	str	r8, [sp, #48]	; 0x30
   1e100:	bne	1dbb8 <__assert_fail@plt+0xc014>
   1e104:	mvn	r3, #0
   1e108:	str	r3, [sp, #16]
   1e10c:	and	r3, r6, #3
   1e110:	cmp	r3, #1
   1e114:	beq	1e1e4 <__assert_fail@plt+0xc640>
   1e118:	ldr	r9, [sp, #32]
   1e11c:	and	r3, r6, #3
   1e120:	cmp	r3, #0
   1e124:	bne	1e15c <__assert_fail@plt+0xc5b8>
   1e128:	ldr	r3, [sp, #48]	; 0x30
   1e12c:	add	r3, r8, r3
   1e130:	cmp	r3, #0
   1e134:	ble	1e15c <__assert_fail@plt+0xc5b8>
   1e138:	adds	r4, r4, #1
   1e13c:	adc	r5, r5, #0
   1e140:	ands	r3, r6, #16
   1e144:	cmp	r3, #0
   1e148:	beq	1e15c <__assert_fail@plt+0xc5b8>
   1e14c:	ldrd	r2, [sp, #24]
   1e150:	cmp	r5, r3
   1e154:	cmpeq	r4, r2
   1e158:	beq	1e2b4 <__assert_fail@plt+0xc710>
   1e15c:	mov	r8, r9
   1e160:	mov	r0, r4
   1e164:	mov	r1, r5
   1e168:	mov	r2, #10
   1e16c:	mov	r3, #0
   1e170:	bl	3a528 <__assert_fail@plt+0x28984>
   1e174:	add	r2, r2, #48	; 0x30
   1e178:	mov	r0, r4
   1e17c:	mov	r1, r5
   1e180:	mov	r3, #0
   1e184:	strb	r2, [r8, #-1]!
   1e188:	mov	r2, #10
   1e18c:	bl	3a528 <__assert_fail@plt+0x28984>
   1e190:	cmp	r5, #0
   1e194:	mov	r5, r1
   1e198:	cmpeq	r4, #9
   1e19c:	mov	r4, r0
   1e1a0:	bhi	1e160 <__assert_fail@plt+0xc5bc>
   1e1a4:	b	1da80 <__assert_fail@plt+0xbedc>
   1e1a8:	ldr	r5, [sp, #12]
   1e1ac:	mvn	r2, #0
   1e1b0:	and	r1, r6, #3
   1e1b4:	movw	r3, #49488	; 0xc150
   1e1b8:	movt	r3, #3
   1e1bc:	vstr	d9, [sp]
   1e1c0:	mov	r0, r5
   1e1c4:	bl	119d0 <__sprintf_chk@plt>
   1e1c8:	mov	r0, r5
   1e1cc:	bl	11988 <strlen@plt>
   1e1d0:	cmp	r0, r4
   1e1d4:	bls	1e088 <__assert_fail@plt+0xc4e4>
   1e1d8:	vldr	d7, [pc, #976]	; 1e5b0 <__assert_fail@plt+0xca0c>
   1e1dc:	vmul.f64	d9, d9, d7
   1e1e0:	b	1d9e0 <__assert_fail@plt+0xbe3c>
   1e1e4:	and	r0, r4, #1
   1e1e8:	mov	r1, #0
   1e1ec:	ldr	r9, [sp, #32]
   1e1f0:	adds	r2, r0, r8
   1e1f4:	adc	r3, r1, r8, asr #31
   1e1f8:	orr	r2, r2, r3
   1e1fc:	ldr	r3, [sp, #48]	; 0x30
   1e200:	cmp	r2, r1
   1e204:	addne	r3, r3, #1
   1e208:	cmp	r3, #5
   1e20c:	bgt	1e138 <__assert_fail@plt+0xc594>
   1e210:	b	1e15c <__assert_fail@plt+0xc5b8>
   1e214:	movcs	r8, #2
   1e218:	movcc	r8, #3
   1e21c:	b	1dbac <__assert_fail@plt+0xc008>
   1e220:	tst	r6, #64	; 0x40
   1e224:	bne	1e28c <__assert_fail@plt+0xc6e8>
   1e228:	ldr	r2, [sp, #16]
   1e22c:	cmp	r2, #0
   1e230:	beq	1e5a0 <__assert_fail@plt+0xc9fc>
   1e234:	ldr	r0, [sp, #16]
   1e238:	ldr	r2, [sp, #40]	; 0x28
   1e23c:	adds	r1, r2, #0
   1e240:	movne	r1, #1
   1e244:	cmp	r2, #0
   1e248:	cmpeq	r0, #1
   1e24c:	bne	1e050 <__assert_fail@plt+0xc4ac>
   1e250:	ldr	r2, [sp, #32]
   1e254:	mov	r1, #107	; 0x6b
   1e258:	cmp	r3, #0
   1e25c:	strb	r1, [r2], #1
   1e260:	bne	1e078 <__assert_fail@plt+0xc4d4>
   1e264:	str	r2, [sp, #32]
   1e268:	b	1daac <__assert_fail@plt+0xbf08>
   1e26c:	mov	r3, #0
   1e270:	str	r3, [sp, #16]
   1e274:	b	1e10c <__assert_fail@plt+0xc568>
   1e278:	ldr	r1, [sp, #32]
   1e27c:	mov	r3, #105	; 0x69
   1e280:	add	r2, r1, #2
   1e284:	strb	r3, [r1, #1]
   1e288:	b	1e078 <__assert_fail@plt+0xc4d4>
   1e28c:	ldr	r1, [sp, #12]
   1e290:	mov	r2, #32
   1e294:	add	r0, r1, #648	; 0x288
   1e298:	strb	r2, [r1, #647]	; 0x287
   1e29c:	str	r0, [sp, #32]
   1e2a0:	b	1e228 <__assert_fail@plt+0xc684>
   1e2a4:	adds	r8, r2, #0
   1e2a8:	movne	r8, #1
   1e2ac:	mov	ip, r8
   1e2b0:	b	1dc1c <__assert_fail@plt+0xc078>
   1e2b4:	ldr	r3, [sp, #16]
   1e2b8:	tst	r6, #8
   1e2bc:	add	r3, r3, #1
   1e2c0:	str	r3, [sp, #16]
   1e2c4:	beq	1e4cc <__assert_fail@plt+0xc928>
   1e2c8:	mov	r3, #49	; 0x31
   1e2cc:	sub	r8, r9, #1
   1e2d0:	strb	r3, [r9, #-1]
   1e2d4:	b	1da80 <__assert_fail@plt+0xbedc>
   1e2d8:	mov	r3, #0
   1e2dc:	str	r3, [sp, #16]
   1e2e0:	b	1da9c <__assert_fail@plt+0xbef8>
   1e2e4:	adds	ip, r3, #0
   1e2e8:	movne	ip, #1
   1e2ec:	mov	r8, ip
   1e2f0:	b	1dc74 <__assert_fail@plt+0xc0d0>
   1e2f4:	adds	ip, r3, #0
   1e2f8:	movne	ip, #1
   1e2fc:	mov	r8, ip
   1e300:	b	1dcd0 <__assert_fail@plt+0xc12c>
   1e304:	vldr	d7, [pc, #676]	; 1e5b0 <__assert_fail@plt+0xca0c>
   1e308:	and	r3, r6, #3
   1e30c:	cmp	r3, #1
   1e310:	vmul.f64	d9, d9, d7
   1e314:	bne	1d98c <__assert_fail@plt+0xbde8>
   1e318:	b	1d9e0 <__assert_fail@plt+0xbe3c>
   1e31c:	adds	ip, r3, #0
   1e320:	movne	ip, #1
   1e324:	mov	r8, ip
   1e328:	b	1dd2c <__assert_fail@plt+0xc188>
   1e32c:	adds	ip, r3, #0
   1e330:	movne	ip, #1
   1e334:	mov	r8, ip
   1e338:	b	1dd88 <__assert_fail@plt+0xc1e4>
   1e33c:	adds	ip, r3, #0
   1e340:	movne	ip, #1
   1e344:	mov	r8, ip
   1e348:	b	1dde4 <__assert_fail@plt+0xc240>
   1e34c:	mov	r3, #1
   1e350:	str	r3, [sp, #16]
   1e354:	b	1d8dc <__assert_fail@plt+0xbd38>
   1e358:	mov	r3, #2
   1e35c:	vmov.f64	d7, d6
   1e360:	str	r3, [sp, #16]
   1e364:	b	1d8dc <__assert_fail@plt+0xbd38>
   1e368:	mov	r3, #3
   1e36c:	vmov.f64	d7, d5
   1e370:	str	r3, [sp, #16]
   1e374:	b	1d8dc <__assert_fail@plt+0xbd38>
   1e378:	cmp	r3, #9
   1e37c:	beq	1e4a8 <__assert_fail@plt+0xc904>
   1e380:	add	r3, r3, #49	; 0x31
   1e384:	uxtb	r3, r3
   1e388:	b	1de3c <__assert_fail@plt+0xc298>
   1e38c:	mov	r3, #4
   1e390:	vmov.f64	d7, d6
   1e394:	str	r3, [sp, #16]
   1e398:	b	1d8dc <__assert_fail@plt+0xbd38>
   1e39c:	mov	r3, #5
   1e3a0:	vmov.f64	d7, d5
   1e3a4:	str	r3, [sp, #16]
   1e3a8:	b	1d8dc <__assert_fail@plt+0xbd38>
   1e3ac:	mov	r3, #6
   1e3b0:	vmov.f64	d7, d6
   1e3b4:	str	r3, [sp, #16]
   1e3b8:	b	1d8dc <__assert_fail@plt+0xbd38>
   1e3bc:	ldr	r3, [sp, #48]	; 0x30
   1e3c0:	and	r3, r3, #1
   1e3c4:	add	r3, r3, r8
   1e3c8:	cmp	r3, #2
   1e3cc:	movle	r3, #0
   1e3d0:	movgt	r3, #1
   1e3d4:	b	1de14 <__assert_fail@plt+0xc270>
   1e3d8:	tst	r6, #64	; 0x40
   1e3dc:	and	r3, r6, #256	; 0x100
   1e3e0:	moveq	r2, #2
   1e3e4:	streq	r2, [sp, #16]
   1e3e8:	beq	1e044 <__assert_fail@plt+0xc4a0>
   1e3ec:	ldr	r1, [sp, #12]
   1e3f0:	mov	r2, #32
   1e3f4:	add	r0, r1, #648	; 0x288
   1e3f8:	strb	r2, [r1, #647]	; 0x287
   1e3fc:	mov	r2, #2
   1e400:	str	r2, [sp, #16]
   1e404:	str	r0, [sp, #32]
   1e408:	b	1e044 <__assert_fail@plt+0xc4a0>
   1e40c:	tst	r6, #64	; 0x40
   1e410:	and	r3, r6, #256	; 0x100
   1e414:	moveq	r2, #3
   1e418:	streq	r2, [sp, #16]
   1e41c:	beq	1e044 <__assert_fail@plt+0xc4a0>
   1e420:	ldr	r1, [sp, #12]
   1e424:	mov	r2, #32
   1e428:	add	r0, r1, #648	; 0x288
   1e42c:	strb	r2, [r1, #647]	; 0x287
   1e430:	mov	r2, #3
   1e434:	str	r2, [sp, #16]
   1e438:	str	r0, [sp, #32]
   1e43c:	b	1e044 <__assert_fail@plt+0xc4a0>
   1e440:	tst	r6, #64	; 0x40
   1e444:	and	r3, r6, #256	; 0x100
   1e448:	moveq	r2, #5
   1e44c:	streq	r2, [sp, #16]
   1e450:	beq	1e044 <__assert_fail@plt+0xc4a0>
   1e454:	ldr	r1, [sp, #12]
   1e458:	mov	r2, #32
   1e45c:	add	r0, r1, #648	; 0x288
   1e460:	strb	r2, [r1, #647]	; 0x287
   1e464:	mov	r2, #5
   1e468:	str	r2, [sp, #16]
   1e46c:	str	r0, [sp, #32]
   1e470:	b	1e044 <__assert_fail@plt+0xc4a0>
   1e474:	tst	r6, #64	; 0x40
   1e478:	and	r3, r6, #256	; 0x100
   1e47c:	moveq	r2, #6
   1e480:	streq	r2, [sp, #16]
   1e484:	beq	1e044 <__assert_fail@plt+0xc4a0>
   1e488:	ldr	r1, [sp, #12]
   1e48c:	mov	r2, #32
   1e490:	add	r0, r1, #648	; 0x288
   1e494:	strb	r2, [r1, #647]	; 0x287
   1e498:	mov	r2, #6
   1e49c:	str	r2, [sp, #16]
   1e4a0:	str	r0, [sp, #32]
   1e4a4:	b	1e044 <__assert_fail@plt+0xc4a0>
   1e4a8:	adds	r4, r4, #1
   1e4ac:	adc	r5, r5, #0
   1e4b0:	cmp	r5, #0
   1e4b4:	cmpeq	r4, #10
   1e4b8:	beq	1e520 <__assert_fail@plt+0xc97c>
   1e4bc:	mov	r8, #0
   1e4c0:	b	1de30 <__assert_fail@plt+0xc28c>
   1e4c4:	ldr	r9, [sp, #32]
   1e4c8:	b	1de64 <__assert_fail@plt+0xc2c0>
   1e4cc:	mov	r0, #48	; 0x30
   1e4d0:	mvn	r3, fp
   1e4d4:	ldr	r1, [sp, #44]	; 0x2c
   1e4d8:	mov	r2, fp
   1e4dc:	strb	r0, [r9, #-1]
   1e4e0:	add	r9, r9, r3
   1e4e4:	mov	r0, r9
   1e4e8:	bl	11784 <memcpy@plt>
   1e4ec:	b	1e2c8 <__assert_fail@plt+0xc724>
   1e4f0:	mov	r3, #1
   1e4f4:	str	r3, [sp, #16]
   1e4f8:	b	1ddec <__assert_fail@plt+0xc248>
   1e4fc:	mov	r3, #3
   1e500:	str	r3, [sp, #16]
   1e504:	b	1ddec <__assert_fail@plt+0xc248>
   1e508:	mov	r3, #2
   1e50c:	str	r3, [sp, #16]
   1e510:	b	1ddec <__assert_fail@plt+0xc248>
   1e514:	mov	r3, #4
   1e518:	str	r3, [sp, #16]
   1e51c:	b	1ddec <__assert_fail@plt+0xc248>
   1e520:	mov	r8, #0
   1e524:	ldr	r9, [sp, #32]
   1e528:	b	1de64 <__assert_fail@plt+0xc2c0>
   1e52c:	mov	r3, #5
   1e530:	str	r3, [sp, #16]
   1e534:	b	1ddec <__assert_fail@plt+0xc248>
   1e538:	tst	r6, #64	; 0x40
   1e53c:	and	r3, r6, #256	; 0x100
   1e540:	moveq	r2, #4
   1e544:	streq	r2, [sp, #16]
   1e548:	beq	1e044 <__assert_fail@plt+0xc4a0>
   1e54c:	ldr	r1, [sp, #12]
   1e550:	mov	r2, #32
   1e554:	add	r0, r1, #648	; 0x288
   1e558:	strb	r2, [r1, #647]	; 0x287
   1e55c:	mov	r2, #4
   1e560:	str	r2, [sp, #16]
   1e564:	str	r0, [sp, #32]
   1e568:	b	1e044 <__assert_fail@plt+0xc4a0>
   1e56c:	tst	r6, #64	; 0x40
   1e570:	and	r3, r6, #256	; 0x100
   1e574:	moveq	r2, #1
   1e578:	streq	r2, [sp, #16]
   1e57c:	beq	1e234 <__assert_fail@plt+0xc690>
   1e580:	ldr	r1, [sp, #12]
   1e584:	mov	r2, #32
   1e588:	add	r0, r1, #648	; 0x288
   1e58c:	strb	r2, [r1, #647]	; 0x287
   1e590:	mov	r2, #1
   1e594:	str	r2, [sp, #16]
   1e598:	str	r0, [sp, #32]
   1e59c:	b	1e234 <__assert_fail@plt+0xc690>
   1e5a0:	cmp	r3, #0
   1e5a4:	ldrne	r2, [sp, #32]
   1e5a8:	bne	1e078 <__assert_fail@plt+0xc4d4>
   1e5ac:	b	1daac <__assert_fail@plt+0xbf08>
   1e5b0:	andeq	r0, r0, r0
   1e5b4:	eormi	r0, r4, r0
   1e5b8:	tst	r6, #64	; 0x40
   1e5bc:	and	r3, r6, #256	; 0x100
   1e5c0:	moveq	r2, #7
   1e5c4:	streq	r2, [sp, #16]
   1e5c8:	beq	1e044 <__assert_fail@plt+0xc4a0>
   1e5cc:	ldr	r1, [sp, #12]
   1e5d0:	mov	r2, #32
   1e5d4:	add	r0, r1, #648	; 0x288
   1e5d8:	strb	r2, [r1, #647]	; 0x287
   1e5dc:	mov	r2, #7
   1e5e0:	str	r2, [sp, #16]
   1e5e4:	str	r0, [sp, #32]
   1e5e8:	b	1e044 <__assert_fail@plt+0xc4a0>
   1e5ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e5f0:	subs	r4, r0, #0
   1e5f4:	strd	r6, [sp, #8]
   1e5f8:	mov	r7, r1
   1e5fc:	mov	r6, r2
   1e600:	strd	r8, [sp, #16]
   1e604:	strd	sl, [sp, #24]
   1e608:	str	lr, [sp, #32]
   1e60c:	sub	sp, sp, #20
   1e610:	beq	1e750 <__assert_fail@plt+0xcbac>
   1e614:	ldrb	r3, [r4]
   1e618:	cmp	r3, #39	; 0x27
   1e61c:	beq	1e690 <__assert_fail@plt+0xcaec>
   1e620:	mov	r9, #160	; 0xa0
   1e624:	mov	fp, #416	; 0x1a0
   1e628:	mov	sl, #384	; 0x180
   1e62c:	mov	r8, #0
   1e630:	movw	r5, #49448	; 0xc128
   1e634:	movt	r5, #3
   1e638:	add	r2, r5, #12
   1e63c:	add	r1, r5, #20
   1e640:	mov	r3, #4
   1e644:	mov	r0, r4
   1e648:	bl	13ee4 <__assert_fail@plt+0x2340>
   1e64c:	cmp	r0, #0
   1e650:	blt	1e6a8 <__assert_fail@plt+0xcb04>
   1e654:	add	r5, r5, r0, lsl #2
   1e658:	mov	r2, #1
   1e65c:	mov	r3, #0
   1e660:	mov	r0, #0
   1e664:	ldr	r1, [r5, #12]
   1e668:	strd	r2, [r6]
   1e66c:	orr	r8, r8, r1
   1e670:	str	r8, [r7]
   1e674:	add	sp, sp, #20
   1e678:	ldrd	r4, [sp]
   1e67c:	ldrd	r6, [sp, #8]
   1e680:	ldrd	r8, [sp, #16]
   1e684:	ldrd	sl, [sp, #24]
   1e688:	add	sp, sp, #32
   1e68c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e690:	add	r4, r4, #1
   1e694:	mov	r9, #164	; 0xa4
   1e698:	mov	fp, #420	; 0x1a4
   1e69c:	mov	sl, #388	; 0x184
   1e6a0:	mov	r8, #4
   1e6a4:	b	1e630 <__assert_fail@plt+0xca8c>
   1e6a8:	movw	r0, #49536	; 0xc180
   1e6ac:	movt	r0, #3
   1e6b0:	mov	r3, r6
   1e6b4:	mov	r2, #0
   1e6b8:	add	r1, sp, #12
   1e6bc:	str	r0, [sp]
   1e6c0:	mov	r0, r4
   1e6c4:	bl	38258 <__assert_fail@plt+0x266b4>
   1e6c8:	cmp	r0, #0
   1e6cc:	bne	1e714 <__assert_fail@plt+0xcb70>
   1e6d0:	ldrb	r3, [r4]
   1e6d4:	sub	r3, r3, #48	; 0x30
   1e6d8:	cmp	r3, #9
   1e6dc:	bls	1e708 <__assert_fail@plt+0xcb64>
   1e6e0:	ldr	r2, [sp, #12]
   1e6e4:	cmp	r4, r2
   1e6e8:	bne	1e6f8 <__assert_fail@plt+0xcb54>
   1e6ec:	b	1e7a4 <__assert_fail@plt+0xcc00>
   1e6f0:	cmp	r2, r4
   1e6f4:	beq	1e7a4 <__assert_fail@plt+0xcc00>
   1e6f8:	ldrb	r3, [r4, #1]!
   1e6fc:	sub	r3, r3, #48	; 0x30
   1e700:	cmp	r3, #9
   1e704:	bhi	1e6f0 <__assert_fail@plt+0xcb4c>
   1e708:	ldrd	r2, [r6]
   1e70c:	str	r8, [r7]
   1e710:	b	1e720 <__assert_fail@plt+0xcb7c>
   1e714:	mov	r1, #0
   1e718:	ldrd	r2, [r6]
   1e71c:	str	r1, [r7]
   1e720:	orrs	r3, r2, r3
   1e724:	bne	1e674 <__assert_fail@plt+0xcad0>
   1e728:	movw	r0, #49520	; 0xc170
   1e72c:	movt	r0, #3
   1e730:	bl	118ec <getenv@plt>
   1e734:	cmp	r0, #0
   1e738:	mov	r3, #0
   1e73c:	moveq	r2, #1024	; 0x400
   1e740:	movne	r2, #512	; 0x200
   1e744:	mov	r0, #4
   1e748:	strd	r2, [r6]
   1e74c:	b	1e674 <__assert_fail@plt+0xcad0>
   1e750:	movw	r0, #49496	; 0xc158
   1e754:	movt	r0, #3
   1e758:	bl	118ec <getenv@plt>
   1e75c:	subs	r4, r0, #0
   1e760:	bne	1e614 <__assert_fail@plt+0xca70>
   1e764:	movw	r0, #49508	; 0xc164
   1e768:	movt	r0, #3
   1e76c:	bl	118ec <getenv@plt>
   1e770:	subs	r4, r0, #0
   1e774:	bne	1e614 <__assert_fail@plt+0xca70>
   1e778:	movw	r0, #49520	; 0xc170
   1e77c:	movt	r0, #3
   1e780:	bl	118ec <getenv@plt>
   1e784:	subs	r3, r0, #0
   1e788:	beq	1e7d0 <__assert_fail@plt+0xcc2c>
   1e78c:	mov	r2, #512	; 0x200
   1e790:	mov	r3, #0
   1e794:	mov	r0, r4
   1e798:	strd	r2, [r6]
   1e79c:	str	r4, [r7]
   1e7a0:	b	1e674 <__assert_fail@plt+0xcad0>
   1e7a4:	ldrb	r3, [r2, #-1]
   1e7a8:	cmp	r3, #66	; 0x42
   1e7ac:	beq	1e7b8 <__assert_fail@plt+0xcc14>
   1e7b0:	mov	r8, r9
   1e7b4:	b	1e708 <__assert_fail@plt+0xcb64>
   1e7b8:	ldrb	r3, [r2, #-2]
   1e7bc:	cmp	r3, #105	; 0x69
   1e7c0:	movne	r8, sl
   1e7c4:	bne	1e708 <__assert_fail@plt+0xcb64>
   1e7c8:	mov	r9, fp
   1e7cc:	b	1e7b0 <__assert_fail@plt+0xcc0c>
   1e7d0:	mov	r4, #1024	; 0x400
   1e7d4:	mov	r5, #0
   1e7d8:	mov	r0, r3
   1e7dc:	strd	r4, [r6]
   1e7e0:	str	r3, [r7]
   1e7e4:	b	1e674 <__assert_fail@plt+0xcad0>
   1e7e8:	mov	r3, #0
   1e7ec:	mov	r2, #1
   1e7f0:	str	r1, [r0]
   1e7f4:	str	r1, [r0, #4]
   1e7f8:	str	r1, [r0, #8]
   1e7fc:	str	r1, [r0, #12]
   1e800:	str	r1, [r0, #16]
   1e804:	str	r3, [r0, #20]
   1e808:	str	r3, [r0, #24]
   1e80c:	strb	r2, [r0, #28]
   1e810:	bx	lr
   1e814:	ldrb	r0, [r0, #28]
   1e818:	bx	lr
   1e81c:	ldrb	ip, [r0, #28]
   1e820:	mov	r2, r0
   1e824:	ldr	r3, [r0, #20]
   1e828:	eor	ip, ip, #1
   1e82c:	add	r3, ip, r3
   1e830:	and	r3, r3, #3
   1e834:	ldr	r0, [r0, r3, lsl #2]
   1e838:	str	r1, [r2, r3, lsl #2]
   1e83c:	ldr	r1, [r2, #24]
   1e840:	str	r3, [r2, #20]
   1e844:	cmp	r1, r3
   1e848:	bne	1e858 <__assert_fail@plt+0xccb4>
   1e84c:	add	ip, ip, r1
   1e850:	and	ip, ip, #3
   1e854:	str	ip, [r2, #24]
   1e858:	mov	r3, #0
   1e85c:	strb	r3, [r2, #28]
   1e860:	bx	lr
   1e864:	ldrb	r3, [r0, #28]
   1e868:	cmp	r3, #0
   1e86c:	bne	1e8a8 <__assert_fail@plt+0xcd04>
   1e870:	ldr	r1, [r0, #16]
   1e874:	ldr	r3, [r0, #20]
   1e878:	ldr	r2, [r0, r3, lsl #2]
   1e87c:	str	r1, [r0, r3, lsl #2]
   1e880:	ldr	r1, [r0, #24]
   1e884:	cmp	r3, r1
   1e888:	moveq	r3, #1
   1e88c:	strbeq	r3, [r0, #28]
   1e890:	beq	1e8a0 <__assert_fail@plt+0xccfc>
   1e894:	add	r3, r3, #3
   1e898:	and	r3, r3, #3
   1e89c:	str	r3, [r0, #20]
   1e8a0:	mov	r0, r2
   1e8a4:	bx	lr
   1e8a8:	str	r4, [sp, #-8]!
   1e8ac:	str	lr, [sp, #4]
   1e8b0:	bl	11b68 <abort@plt>
   1e8b4:	ldm	r0, {r0, r3}
   1e8b8:	eor	r3, r3, r0
   1e8bc:	udiv	r0, r3, r1
   1e8c0:	mls	r0, r0, r1, r3
   1e8c4:	bx	lr
   1e8c8:	strd	r4, [sp, #-8]!
   1e8cc:	ldrd	r2, [r1]
   1e8d0:	ldrd	r4, [r0]
   1e8d4:	cmp	r5, r3
   1e8d8:	cmpeq	r4, r2
   1e8dc:	ldrd	r4, [sp]
   1e8e0:	add	sp, sp, #8
   1e8e4:	moveq	r0, #1
   1e8e8:	movne	r0, #0
   1e8ec:	bx	lr
   1e8f0:	strd	r4, [sp, #-12]!
   1e8f4:	mov	r5, r0
   1e8f8:	mov	r0, #12
   1e8fc:	str	lr, [sp, #8]
   1e900:	sub	sp, sp, #12
   1e904:	bl	39028 <__assert_fail@plt+0x27484>
   1e908:	subs	r4, r0, #0
   1e90c:	beq	1e954 <__assert_fail@plt+0xcdb0>
   1e910:	movw	r1, #38416	; 0x9610
   1e914:	movt	r1, #1
   1e918:	movw	r3, #59592	; 0xe8c8
   1e91c:	movt	r3, #1
   1e920:	movw	r2, #59572	; 0xe8b4
   1e924:	movt	r2, #1
   1e928:	str	r1, [sp]
   1e92c:	movw	r0, #1021	; 0x3fd
   1e930:	mov	r1, #0
   1e934:	bl	1c93c <__assert_fail@plt+0xad98>
   1e938:	cmp	r0, #0
   1e93c:	mov	r3, r0
   1e940:	str	r0, [r4]
   1e944:	movne	r3, #0
   1e948:	strne	r5, [r4, #4]
   1e94c:	strne	r3, [r4, #8]
   1e950:	beq	1e968 <__assert_fail@plt+0xcdc4>
   1e954:	mov	r0, r4
   1e958:	add	sp, sp, #12
   1e95c:	ldrd	r4, [sp]
   1e960:	add	sp, sp, #8
   1e964:	pop	{pc}		; (ldr pc, [sp], #4)
   1e968:	mov	r0, r4
   1e96c:	mov	r4, r3
   1e970:	bl	19610 <__assert_fail@plt+0x7a6c>
   1e974:	b	1e954 <__assert_fail@plt+0xcdb0>
   1e978:	str	r4, [sp, #-8]!
   1e97c:	mov	r4, r0
   1e980:	ldr	r0, [r0]
   1e984:	str	lr, [sp, #4]
   1e988:	bl	1cc7c <__assert_fail@plt+0xb0d8>
   1e98c:	ldr	r0, [r4, #8]
   1e990:	bl	19610 <__assert_fail@plt+0x7a6c>
   1e994:	mov	r0, r4
   1e998:	ldr	r4, [sp]
   1e99c:	ldr	lr, [sp, #4]
   1e9a0:	add	sp, sp, #8
   1e9a4:	b	19610 <__assert_fail@plt+0x7a6c>
   1e9a8:	strd	r4, [sp, #-12]!
   1e9ac:	mov	r5, r0
   1e9b0:	ldr	r4, [r0, #8]
   1e9b4:	str	lr, [sp, #8]
   1e9b8:	sub	sp, sp, #12
   1e9bc:	cmp	r4, #0
   1e9c0:	beq	1ea34 <__assert_fail@plt+0xce90>
   1e9c4:	ldrd	r0, [r4]
   1e9c8:	cmp	r1, r3
   1e9cc:	cmpeq	r0, r2
   1e9d0:	beq	1ea68 <__assert_fail@plt+0xcec4>
   1e9d4:	mov	r1, r4
   1e9d8:	ldr	r0, [r5]
   1e9dc:	strd	r2, [r4]
   1e9e0:	bl	1d1a4 <__assert_fail@plt+0xb600>
   1e9e4:	cmp	r0, #0
   1e9e8:	beq	1ea54 <__assert_fail@plt+0xceb0>
   1e9ec:	cmp	r4, r0
   1e9f0:	beq	1ea0c <__assert_fail@plt+0xce68>
   1e9f4:	ldr	r0, [r0, #8]
   1e9f8:	str	r0, [r4, #8]
   1e9fc:	add	sp, sp, #12
   1ea00:	ldrd	r4, [sp]
   1ea04:	add	sp, sp, #8
   1ea08:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea0c:	ldr	r0, [r5, #4]
   1ea10:	mov	r3, #0
   1ea14:	str	r3, [r5, #8]
   1ea18:	add	r3, r0, #1
   1ea1c:	str	r3, [r5, #4]
   1ea20:	str	r0, [r4, #8]
   1ea24:	add	sp, sp, #12
   1ea28:	ldrd	r4, [sp]
   1ea2c:	add	sp, sp, #8
   1ea30:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea34:	mov	r0, #16
   1ea38:	strd	r2, [sp]
   1ea3c:	bl	39028 <__assert_fail@plt+0x27484>
   1ea40:	cmp	r0, #0
   1ea44:	mov	r4, r0
   1ea48:	str	r0, [r5, #8]
   1ea4c:	ldrd	r2, [sp]
   1ea50:	bne	1e9d4 <__assert_fail@plt+0xce30>
   1ea54:	mvn	r0, #0
   1ea58:	add	sp, sp, #12
   1ea5c:	ldrd	r4, [sp]
   1ea60:	add	sp, sp, #8
   1ea64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea68:	ldr	r0, [r4, #8]
   1ea6c:	add	sp, sp, #12
   1ea70:	ldrd	r4, [sp]
   1ea74:	add	sp, sp, #8
   1ea78:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea7c:	mov	r3, #0
   1ea80:	cmp	r0, #0
   1ea84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ea88:	mov	r5, r1
   1ea8c:	sbcs	r1, r1, #0
   1ea90:	strd	r6, [sp, #8]
   1ea94:	mov	r4, r0
   1ea98:	add	r6, r2, #20
   1ea9c:	str	r8, [sp, #16]
   1eaa0:	str	lr, [sp, #20]
   1eaa4:	strb	r3, [r2, #20]
   1eaa8:	blt	1eb08 <__assert_fail@plt+0xcf64>
   1eaac:	mov	r0, r4
   1eab0:	mov	r1, r5
   1eab4:	mov	r2, #10
   1eab8:	mov	r3, #0
   1eabc:	bl	3a454 <__assert_fail@plt+0x288b0>
   1eac0:	add	ip, r2, #48	; 0x30
   1eac4:	mov	r0, r4
   1eac8:	mov	r1, r5
   1eacc:	mov	r3, #0
   1ead0:	mov	r2, #10
   1ead4:	strb	ip, [r6, #-1]!
   1ead8:	bl	3a454 <__assert_fail@plt+0x288b0>
   1eadc:	mov	r4, r0
   1eae0:	mov	r5, r1
   1eae4:	orrs	r3, r4, r5
   1eae8:	bne	1eaac <__assert_fail@plt+0xcf08>
   1eaec:	mov	r0, r6
   1eaf0:	ldrd	r4, [sp]
   1eaf4:	ldrd	r6, [sp, #8]
   1eaf8:	ldr	r8, [sp, #16]
   1eafc:	add	sp, sp, #20
   1eb00:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb04:	mov	r6, r7
   1eb08:	mov	r0, r4
   1eb0c:	mov	r1, r5
   1eb10:	mov	r2, #10
   1eb14:	mov	r3, #0
   1eb18:	bl	3a454 <__assert_fail@plt+0x288b0>
   1eb1c:	rsb	ip, r2, #48	; 0x30
   1eb20:	mov	r0, r4
   1eb24:	mov	r1, r5
   1eb28:	mov	r3, #0
   1eb2c:	mov	r2, #10
   1eb30:	strb	ip, [r6, #-1]
   1eb34:	sub	r7, r6, #1
   1eb38:	bl	3a454 <__assert_fail@plt+0x288b0>
   1eb3c:	mov	r4, r0
   1eb40:	mov	r5, r1
   1eb44:	orrs	r3, r4, r5
   1eb48:	bne	1eb04 <__assert_fail@plt+0xcf60>
   1eb4c:	mov	r3, #45	; 0x2d
   1eb50:	sub	r6, r6, #2
   1eb54:	strb	r3, [r7, #-1]
   1eb58:	b	1eaec <__assert_fail@plt+0xcf48>
   1eb5c:	str	r4, [sp, #-8]!
   1eb60:	mov	r4, r0
   1eb64:	str	lr, [sp, #4]
   1eb68:	bl	1173c <wcwidth@plt>
   1eb6c:	cmp	r0, #0
   1eb70:	bge	1eb84 <__assert_fail@plt+0xcfe0>
   1eb74:	mov	r0, r4
   1eb78:	bl	11814 <iswcntrl@plt>
   1eb7c:	clz	r0, r0
   1eb80:	lsr	r0, r0, #5
   1eb84:	ldr	r4, [sp]
   1eb88:	add	sp, sp, #4
   1eb8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb90:	mov	r3, r1
   1eb94:	strd	r4, [sp, #-16]!
   1eb98:	mov	r4, r1
   1eb9c:	ldr	r2, [r1, #4]
   1eba0:	mov	r5, r0
   1eba4:	ldr	r1, [r3], #16
   1eba8:	str	r6, [sp, #8]
   1ebac:	str	lr, [sp, #12]
   1ebb0:	cmp	r1, r3
   1ebb4:	strne	r1, [r0]
   1ebb8:	beq	1ebe4 <__assert_fail@plt+0xd040>
   1ebbc:	ldrb	r3, [r4, #8]
   1ebc0:	str	r2, [r5, #4]
   1ebc4:	ldr	r6, [sp, #8]
   1ebc8:	cmp	r3, #0
   1ebcc:	strb	r3, [r5, #8]
   1ebd0:	ldrne	r3, [r4, #12]
   1ebd4:	strne	r3, [r5, #12]
   1ebd8:	ldrd	r4, [sp]
   1ebdc:	add	sp, sp, #12
   1ebe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ebe4:	add	r3, r0, #16
   1ebe8:	mov	r0, r3
   1ebec:	bl	11784 <memcpy@plt>
   1ebf0:	ldr	r2, [r4, #4]
   1ebf4:	str	r0, [r5]
   1ebf8:	b	1ebbc <__assert_fail@plt+0xd018>
   1ebfc:	lsr	r2, r0, #5
   1ec00:	movw	r3, #49556	; 0xc194
   1ec04:	movt	r3, #3
   1ec08:	and	r0, r0, #31
   1ec0c:	ldr	r3, [r3, r2, lsl #2]
   1ec10:	lsr	r0, r3, r0
   1ec14:	and	r0, r0, #1
   1ec18:	bx	lr
   1ec1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ec20:	mov	r5, r2
   1ec24:	strd	r6, [sp, #8]
   1ec28:	subs	r6, r0, #0
   1ec2c:	mov	r7, r1
   1ec30:	str	lr, [sp, #16]
   1ec34:	sub	sp, sp, #12
   1ec38:	addeq	r6, sp, #4
   1ec3c:	mov	r0, r6
   1ec40:	bl	118b0 <mbrtowc@plt>
   1ec44:	cmp	r5, #0
   1ec48:	cmnne	r0, #3
   1ec4c:	mov	r4, r0
   1ec50:	bhi	1ec6c <__assert_fail@plt+0xd0c8>
   1ec54:	mov	r0, r4
   1ec58:	add	sp, sp, #12
   1ec5c:	ldrd	r4, [sp]
   1ec60:	ldrd	r6, [sp, #8]
   1ec64:	add	sp, sp, #16
   1ec68:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec6c:	mov	r0, #0
   1ec70:	bl	39ee8 <__assert_fail@plt+0x28344>
   1ec74:	cmp	r0, #0
   1ec78:	bne	1ec54 <__assert_fail@plt+0xd0b0>
   1ec7c:	ldrb	r3, [r7]
   1ec80:	mov	r4, #1
   1ec84:	str	r3, [r6]
   1ec88:	b	1ec54 <__assert_fail@plt+0xd0b0>
   1ec8c:	movw	r3, #49588	; 0xc1b4
   1ec90:	movt	r3, #3
   1ec94:	str	r4, [sp, #-8]!
   1ec98:	movw	r1, #49132	; 0xbfec
   1ec9c:	movt	r1, #3
   1eca0:	str	lr, [sp, #4]
   1eca4:	movw	r0, #49196	; 0xc02c
   1eca8:	movt	r0, #3
   1ecac:	mov	r2, #172	; 0xac
   1ecb0:	bl	11ba4 <__assert_fail@plt>
   1ecb4:	cmp	r1, r0
   1ecb8:	beq	1f088 <__assert_fail@plt+0xd4e4>
   1ecbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ecc0:	mov	r4, r0
   1ecc4:	mov	r5, r1
   1ecc8:	strd	r6, [sp, #8]
   1eccc:	str	r8, [sp, #16]
   1ecd0:	str	lr, [sp, #20]
   1ecd4:	sub	sp, sp, #112	; 0x70
   1ecd8:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1ecdc:	cmp	r0, #1
   1ece0:	bls	1ee80 <__assert_fail@plt+0xd2dc>
   1ece4:	mov	r3, #0
   1ece8:	mov	r0, #0
   1ecec:	mov	r1, #0
   1ecf0:	movw	r6, #49556	; 0xc194
   1ecf4:	movt	r6, #3
   1ecf8:	strb	r3, [sp]
   1ecfc:	strd	r0, [sp, #4]
   1ed00:	strb	r3, [sp, #12]
   1ed04:	str	r4, [sp, #16]
   1ed08:	strb	r3, [sp, #56]	; 0x38
   1ed0c:	strd	r0, [sp, #60]	; 0x3c
   1ed10:	strb	r3, [sp, #68]	; 0x44
   1ed14:	str	r5, [sp, #72]	; 0x48
   1ed18:	mov	r5, #1
   1ed1c:	b	1ee0c <__assert_fail@plt+0xd268>
   1ed20:	ldrb	r3, [r4]
   1ed24:	lsr	r2, r3, #5
   1ed28:	and	r3, r3, #31
   1ed2c:	ldr	r2, [r6, r2, lsl #2]
   1ed30:	lsr	r3, r2, r3
   1ed34:	tst	r3, #1
   1ed38:	beq	1efbc <__assert_fail@plt+0xd418>
   1ed3c:	str	r5, [sp, #20]
   1ed40:	ldrb	r3, [r4]
   1ed44:	strb	r5, [sp, #12]
   1ed48:	strb	r5, [sp, #24]
   1ed4c:	mov	r4, r3
   1ed50:	str	r3, [sp, #28]
   1ed54:	cmp	r4, #0
   1ed58:	beq	1f174 <__assert_fail@plt+0xd5d0>
   1ed5c:	ldrb	r3, [sp, #68]	; 0x44
   1ed60:	cmp	r3, #0
   1ed64:	bne	1ef84 <__assert_fail@plt+0xd3e0>
   1ed68:	ldrb	r3, [sp, #56]	; 0x38
   1ed6c:	ldr	r4, [sp, #72]	; 0x48
   1ed70:	cmp	r3, #0
   1ed74:	addne	r8, sp, #60	; 0x3c
   1ed78:	bne	1ef20 <__assert_fail@plt+0xd37c>
   1ed7c:	ldrb	r3, [r4]
   1ed80:	lsr	r2, r3, #5
   1ed84:	and	r3, r3, #31
   1ed88:	ldr	r2, [r6, r2, lsl #2]
   1ed8c:	lsr	r3, r2, r3
   1ed90:	tst	r3, #1
   1ed94:	beq	1ef08 <__assert_fail@plt+0xd364>
   1ed98:	str	r5, [sp, #76]	; 0x4c
   1ed9c:	ldrb	r3, [r4]
   1eda0:	strb	r5, [sp, #68]	; 0x44
   1eda4:	strb	r5, [sp, #80]	; 0x50
   1eda8:	mov	r7, r3
   1edac:	str	r3, [sp, #84]	; 0x54
   1edb0:	cmp	r7, #0
   1edb4:	beq	1f0a8 <__assert_fail@plt+0xd504>
   1edb8:	ldrb	r3, [sp, #24]
   1edbc:	cmp	r3, #0
   1edc0:	beq	1f0a0 <__assert_fail@plt+0xd4fc>
   1edc4:	ldr	r0, [sp, #28]
   1edc8:	bl	117a8 <towlower@plt>
   1edcc:	mov	r4, r0
   1edd0:	mov	r0, r7
   1edd4:	bl	117a8 <towlower@plt>
   1edd8:	sub	r0, r4, r0
   1eddc:	cmp	r0, #0
   1ede0:	bne	1eef0 <__assert_fail@plt+0xd34c>
   1ede4:	ldr	r4, [sp, #16]
   1ede8:	strb	r0, [sp, #12]
   1edec:	ldr	r1, [sp, #20]
   1edf0:	strb	r0, [sp, #68]	; 0x44
   1edf4:	ldr	r3, [sp, #72]	; 0x48
   1edf8:	ldr	r2, [sp, #76]	; 0x4c
   1edfc:	add	r4, r4, r1
   1ee00:	str	r4, [sp, #16]
   1ee04:	add	r3, r3, r2
   1ee08:	str	r3, [sp, #72]	; 0x48
   1ee0c:	ldrb	r3, [sp]
   1ee10:	cmp	r3, #0
   1ee14:	addne	r7, sp, #4
   1ee18:	beq	1ed20 <__assert_fail@plt+0xd17c>
   1ee1c:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1ee20:	mov	r1, r0
   1ee24:	mov	r0, r4
   1ee28:	bl	35ccc <__assert_fail@plt+0x24128>
   1ee2c:	mov	r2, r0
   1ee30:	mov	r3, r7
   1ee34:	mov	r1, r4
   1ee38:	add	r0, sp, #28
   1ee3c:	bl	1ec1c <__assert_fail@plt+0xd078>
   1ee40:	cmn	r0, #1
   1ee44:	str	r0, [sp, #20]
   1ee48:	beq	1efd8 <__assert_fail@plt+0xd434>
   1ee4c:	cmn	r0, #2
   1ee50:	beq	1f000 <__assert_fail@plt+0xd45c>
   1ee54:	cmp	r0, #0
   1ee58:	beq	1f038 <__assert_fail@plt+0xd494>
   1ee5c:	ldr	r4, [sp, #28]
   1ee60:	mov	r0, r7
   1ee64:	strb	r5, [sp, #24]
   1ee68:	bl	117b4 <mbsinit@plt>
   1ee6c:	cmp	r0, #0
   1ee70:	strb	r5, [sp, #12]
   1ee74:	movne	r3, #0
   1ee78:	strbne	r3, [sp]
   1ee7c:	b	1ed54 <__assert_fail@plt+0xd1b0>
   1ee80:	bl	11964 <__ctype_b_loc@plt>
   1ee84:	sub	r7, r4, #1
   1ee88:	sub	r5, r5, #1
   1ee8c:	ldr	r8, [r0]
   1ee90:	b	1ee9c <__assert_fail@plt+0xd2f8>
   1ee94:	cmp	r4, r0
   1ee98:	bne	1eeec <__assert_fail@plt+0xd348>
   1ee9c:	ldrb	r4, [r7, #1]!
   1eea0:	sxth	r6, r4
   1eea4:	lsl	r3, r6, #1
   1eea8:	ldrh	r3, [r8, r3]
   1eeac:	tst	r3, #256	; 0x100
   1eeb0:	beq	1eec0 <__assert_fail@plt+0xd31c>
   1eeb4:	bl	11928 <__ctype_tolower_loc@plt>
   1eeb8:	ldr	r3, [r0]
   1eebc:	ldrb	r4, [r3, r6, lsl #2]
   1eec0:	ldrb	r0, [r5, #1]!
   1eec4:	sxth	r6, r0
   1eec8:	lsl	r3, r6, #1
   1eecc:	ldrh	r3, [r8, r3]
   1eed0:	tst	r3, #256	; 0x100
   1eed4:	beq	1eee4 <__assert_fail@plt+0xd340>
   1eed8:	bl	11928 <__ctype_tolower_loc@plt>
   1eedc:	ldr	r3, [r0]
   1eee0:	ldrb	r0, [r3, r6, lsl #2]
   1eee4:	cmp	r4, #0
   1eee8:	bne	1ee94 <__assert_fail@plt+0xd2f0>
   1eeec:	sub	r0, r4, r0
   1eef0:	add	sp, sp, #112	; 0x70
   1eef4:	ldrd	r4, [sp]
   1eef8:	ldrd	r6, [sp, #8]
   1eefc:	ldr	r8, [sp, #16]
   1ef00:	add	sp, sp, #20
   1ef04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef08:	add	r8, sp, #60	; 0x3c
   1ef0c:	mov	r0, r8
   1ef10:	bl	117b4 <mbsinit@plt>
   1ef14:	cmp	r0, #0
   1ef18:	beq	1f2d8 <__assert_fail@plt+0xd734>
   1ef1c:	strb	r5, [sp, #56]	; 0x38
   1ef20:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1ef24:	mov	r1, r0
   1ef28:	mov	r0, r4
   1ef2c:	bl	35ccc <__assert_fail@plt+0x24128>
   1ef30:	mov	r2, r0
   1ef34:	mov	r3, r8
   1ef38:	mov	r1, r4
   1ef3c:	add	r0, sp, #84	; 0x54
   1ef40:	bl	1ec1c <__assert_fail@plt+0xd078>
   1ef44:	cmn	r0, #1
   1ef48:	str	r0, [sp, #76]	; 0x4c
   1ef4c:	beq	1efec <__assert_fail@plt+0xd448>
   1ef50:	cmn	r0, #2
   1ef54:	beq	1f01c <__assert_fail@plt+0xd478>
   1ef58:	cmp	r0, #0
   1ef5c:	beq	1f05c <__assert_fail@plt+0xd4b8>
   1ef60:	ldr	r7, [sp, #84]	; 0x54
   1ef64:	mov	r0, r8
   1ef68:	strb	r5, [sp, #80]	; 0x50
   1ef6c:	bl	117b4 <mbsinit@plt>
   1ef70:	cmp	r0, #0
   1ef74:	strb	r5, [sp, #68]	; 0x44
   1ef78:	movne	r3, #0
   1ef7c:	strbne	r3, [sp, #56]	; 0x38
   1ef80:	b	1edb0 <__assert_fail@plt+0xd20c>
   1ef84:	ldrb	r3, [sp, #80]	; 0x50
   1ef88:	cmp	r3, #0
   1ef8c:	bne	1f080 <__assert_fail@plt+0xd4dc>
   1ef90:	ldrb	r3, [sp, #24]
   1ef94:	cmp	r3, #0
   1ef98:	bne	1f1d0 <__assert_fail@plt+0xd62c>
   1ef9c:	ldr	r0, [sp, #16]
   1efa0:	ldr	r2, [sp, #20]
   1efa4:	ldr	r3, [sp, #76]	; 0x4c
   1efa8:	ldr	r1, [sp, #72]	; 0x48
   1efac:	cmp	r2, r3
   1efb0:	bne	1f090 <__assert_fail@plt+0xd4ec>
   1efb4:	bl	117c0 <memcmp@plt>
   1efb8:	b	1eddc <__assert_fail@plt+0xd238>
   1efbc:	add	r7, sp, #4
   1efc0:	mov	r0, r7
   1efc4:	bl	117b4 <mbsinit@plt>
   1efc8:	cmp	r0, #0
   1efcc:	beq	1f2d8 <__assert_fail@plt+0xd734>
   1efd0:	strb	r5, [sp]
   1efd4:	b	1ee1c <__assert_fail@plt+0xd278>
   1efd8:	mov	r3, #0
   1efdc:	strb	r5, [sp, #12]
   1efe0:	str	r5, [sp, #20]
   1efe4:	strb	r3, [sp, #24]
   1efe8:	b	1ed5c <__assert_fail@plt+0xd1b8>
   1efec:	mov	r3, #0
   1eff0:	strb	r5, [sp, #68]	; 0x44
   1eff4:	str	r5, [sp, #76]	; 0x4c
   1eff8:	strb	r3, [sp, #80]	; 0x50
   1effc:	b	1ef90 <__assert_fail@plt+0xd3ec>
   1f000:	ldr	r0, [sp, #16]
   1f004:	bl	11988 <strlen@plt>
   1f008:	mov	r3, #0
   1f00c:	strb	r5, [sp, #12]
   1f010:	str	r0, [sp, #20]
   1f014:	strb	r3, [sp, #24]
   1f018:	b	1ed5c <__assert_fail@plt+0xd1b8>
   1f01c:	ldr	r0, [sp, #72]	; 0x48
   1f020:	bl	11988 <strlen@plt>
   1f024:	mov	r3, #0
   1f028:	strb	r5, [sp, #68]	; 0x44
   1f02c:	str	r0, [sp, #76]	; 0x4c
   1f030:	strb	r3, [sp, #80]	; 0x50
   1f034:	b	1ef90 <__assert_fail@plt+0xd3ec>
   1f038:	ldr	r3, [sp, #16]
   1f03c:	str	r5, [sp, #20]
   1f040:	ldrb	r3, [r3]
   1f044:	cmp	r3, #0
   1f048:	bne	1f2f8 <__assert_fail@plt+0xd754>
   1f04c:	ldr	r4, [sp, #28]
   1f050:	cmp	r4, #0
   1f054:	beq	1ee60 <__assert_fail@plt+0xd2bc>
   1f058:	b	1f298 <__assert_fail@plt+0xd6f4>
   1f05c:	ldr	r3, [sp, #72]	; 0x48
   1f060:	str	r5, [sp, #76]	; 0x4c
   1f064:	ldrb	r3, [r3]
   1f068:	cmp	r3, #0
   1f06c:	bne	1f2f8 <__assert_fail@plt+0xd754>
   1f070:	ldr	r7, [sp, #84]	; 0x54
   1f074:	cmp	r7, #0
   1f078:	beq	1ef64 <__assert_fail@plt+0xd3c0>
   1f07c:	b	1f298 <__assert_fail@plt+0xd6f4>
   1f080:	ldr	r7, [sp, #84]	; 0x54
   1f084:	b	1edb0 <__assert_fail@plt+0xd20c>
   1f088:	mov	r0, #0
   1f08c:	bx	lr
   1f090:	bcs	1f1f8 <__assert_fail@plt+0xd654>
   1f094:	bl	117c0 <memcmp@plt>
   1f098:	cmp	r0, #0
   1f09c:	ble	1f1d0 <__assert_fail@plt+0xd62c>
   1f0a0:	mov	r0, #1
   1f0a4:	b	1eef0 <__assert_fail@plt+0xd34c>
   1f0a8:	ldrb	r3, [sp, #12]
   1f0ac:	cmp	r3, #0
   1f0b0:	bne	1f20c <__assert_fail@plt+0xd668>
   1f0b4:	ldrb	r3, [sp]
   1f0b8:	ldr	r4, [sp, #16]
   1f0bc:	cmp	r3, #0
   1f0c0:	addne	r7, sp, #4
   1f0c4:	bne	1f108 <__assert_fail@plt+0xd564>
   1f0c8:	ldrb	r3, [r4]
   1f0cc:	movw	r2, #49556	; 0xc194
   1f0d0:	movt	r2, #3
   1f0d4:	lsr	r1, r3, #5
   1f0d8:	and	r3, r3, #31
   1f0dc:	ldr	r2, [r2, r1, lsl #2]
   1f0e0:	lsr	r3, r2, r3
   1f0e4:	tst	r3, #1
   1f0e8:	bne	1f1d8 <__assert_fail@plt+0xd634>
   1f0ec:	add	r7, sp, #4
   1f0f0:	mov	r0, r7
   1f0f4:	bl	117b4 <mbsinit@plt>
   1f0f8:	cmp	r0, #0
   1f0fc:	beq	1f2d8 <__assert_fail@plt+0xd734>
   1f100:	mov	r3, #1
   1f104:	strb	r3, [sp]
   1f108:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1f10c:	mov	r1, r0
   1f110:	mov	r0, r4
   1f114:	bl	35ccc <__assert_fail@plt+0x24128>
   1f118:	mov	r2, r0
   1f11c:	mov	r3, r7
   1f120:	mov	r1, r4
   1f124:	add	r0, sp, #28
   1f128:	bl	1ec1c <__assert_fail@plt+0xd078>
   1f12c:	cmn	r0, #1
   1f130:	str	r0, [sp, #20]
   1f134:	beq	1f0a0 <__assert_fail@plt+0xd4fc>
   1f138:	cmn	r0, #2
   1f13c:	beq	1f0a0 <__assert_fail@plt+0xd4fc>
   1f140:	cmp	r0, #0
   1f144:	beq	1f2b0 <__assert_fail@plt+0xd70c>
   1f148:	ldr	r4, [sp, #28]
   1f14c:	mov	r5, #1
   1f150:	mov	r0, r7
   1f154:	strb	r5, [sp, #24]
   1f158:	bl	117b4 <mbsinit@plt>
   1f15c:	cmp	r0, #0
   1f160:	strb	r5, [sp, #12]
   1f164:	movne	r3, #0
   1f168:	strbne	r3, [sp]
   1f16c:	cmp	r4, #0
   1f170:	bne	1f0a0 <__assert_fail@plt+0xd4fc>
   1f174:	ldrb	r3, [sp, #68]	; 0x44
   1f178:	cmp	r3, #0
   1f17c:	bne	1f29c <__assert_fail@plt+0xd6f8>
   1f180:	ldrb	r3, [sp, #56]	; 0x38
   1f184:	ldr	r4, [sp, #72]	; 0x48
   1f188:	cmp	r3, #0
   1f18c:	addne	r8, sp, #60	; 0x3c
   1f190:	bne	1f23c <__assert_fail@plt+0xd698>
   1f194:	ldrb	r3, [r4]
   1f198:	movw	r2, #49556	; 0xc194
   1f19c:	movt	r2, #3
   1f1a0:	lsr	r1, r3, #5
   1f1a4:	and	r3, r3, #31
   1f1a8:	ldr	r2, [r2, r1, lsl #2]
   1f1ac:	lsr	r3, r2, r3
   1f1b0:	tst	r3, #1
   1f1b4:	beq	1f220 <__assert_fail@plt+0xd67c>
   1f1b8:	mov	r3, #1
   1f1bc:	str	r3, [sp, #76]	; 0x4c
   1f1c0:	ldrb	r7, [r4]
   1f1c4:	cmp	r7, #0
   1f1c8:	moveq	r0, r7
   1f1cc:	beq	1eef0 <__assert_fail@plt+0xd34c>
   1f1d0:	mvn	r0, #0
   1f1d4:	b	1eef0 <__assert_fail@plt+0xd34c>
   1f1d8:	mov	r3, #1
   1f1dc:	str	r3, [sp, #20]
   1f1e0:	ldrb	r2, [r4]
   1f1e4:	strb	r3, [sp, #12]
   1f1e8:	strb	r3, [sp, #24]
   1f1ec:	mov	r4, r2
   1f1f0:	str	r2, [sp, #28]
   1f1f4:	b	1f16c <__assert_fail@plt+0xd5c8>
   1f1f8:	mov	r2, r3
   1f1fc:	bl	117c0 <memcmp@plt>
   1f200:	cmp	r0, #0
   1f204:	bge	1f0a0 <__assert_fail@plt+0xd4fc>
   1f208:	b	1f1d0 <__assert_fail@plt+0xd62c>
   1f20c:	ldrb	r3, [sp, #24]
   1f210:	cmp	r3, #0
   1f214:	beq	1f0a0 <__assert_fail@plt+0xd4fc>
   1f218:	ldr	r4, [sp, #28]
   1f21c:	b	1f16c <__assert_fail@plt+0xd5c8>
   1f220:	add	r8, sp, #60	; 0x3c
   1f224:	mov	r0, r8
   1f228:	bl	117b4 <mbsinit@plt>
   1f22c:	cmp	r0, #0
   1f230:	beq	1f2d8 <__assert_fail@plt+0xd734>
   1f234:	mov	r3, #1
   1f238:	strb	r3, [sp, #56]	; 0x38
   1f23c:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1f240:	mov	r1, r0
   1f244:	mov	r0, r4
   1f248:	bl	35ccc <__assert_fail@plt+0x24128>
   1f24c:	mov	r2, r0
   1f250:	mov	r3, r8
   1f254:	mov	r1, r4
   1f258:	add	r0, sp, #84	; 0x54
   1f25c:	bl	1ec1c <__assert_fail@plt+0xd078>
   1f260:	add	r3, r0, #2
   1f264:	cmp	r3, #1
   1f268:	bls	1f1d0 <__assert_fail@plt+0xd62c>
   1f26c:	cmp	r0, #0
   1f270:	bne	1f2a8 <__assert_fail@plt+0xd704>
   1f274:	ldr	r3, [sp, #72]	; 0x48
   1f278:	mov	r2, #1
   1f27c:	str	r2, [sp, #76]	; 0x4c
   1f280:	ldrb	r3, [r3]
   1f284:	cmp	r3, #0
   1f288:	bne	1f2f8 <__assert_fail@plt+0xd754>
   1f28c:	ldr	r7, [sp, #84]	; 0x54
   1f290:	cmp	r7, #0
   1f294:	beq	1f1c4 <__assert_fail@plt+0xd620>
   1f298:	bl	1ec8c <__assert_fail@plt+0xd0e8>
   1f29c:	ldrb	r3, [sp, #80]	; 0x50
   1f2a0:	cmp	r3, #0
   1f2a4:	beq	1f1d0 <__assert_fail@plt+0xd62c>
   1f2a8:	ldr	r7, [sp, #84]	; 0x54
   1f2ac:	b	1f1c4 <__assert_fail@plt+0xd620>
   1f2b0:	ldr	r3, [sp, #16]
   1f2b4:	mov	r2, #1
   1f2b8:	str	r2, [sp, #20]
   1f2bc:	ldrb	r3, [r3]
   1f2c0:	cmp	r3, #0
   1f2c4:	bne	1f2f8 <__assert_fail@plt+0xd754>
   1f2c8:	ldr	r4, [sp, #28]
   1f2cc:	cmp	r4, #0
   1f2d0:	beq	1f14c <__assert_fail@plt+0xd5a8>
   1f2d4:	b	1f298 <__assert_fail@plt+0xd6f4>
   1f2d8:	movw	r3, #49588	; 0xc1b4
   1f2dc:	movt	r3, #3
   1f2e0:	movw	r1, #49132	; 0xbfec
   1f2e4:	movt	r1, #3
   1f2e8:	movw	r0, #49148	; 0xbffc
   1f2ec:	movt	r0, #3
   1f2f0:	mov	r2, #143	; 0x8f
   1f2f4:	bl	11ba4 <__assert_fail@plt>
   1f2f8:	movw	r3, #49588	; 0xc1b4
   1f2fc:	movt	r3, #3
   1f300:	movw	r1, #49132	; 0xbfec
   1f304:	movt	r1, #3
   1f308:	movw	r0, #49172	; 0xc014
   1f30c:	movt	r0, #3
   1f310:	mov	r2, #171	; 0xab
   1f314:	bl	11ba4 <__assert_fail@plt>
   1f318:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f31c:	mov	r4, r0
   1f320:	strd	r6, [sp, #8]
   1f324:	str	r8, [sp, #16]
   1f328:	str	lr, [sp, #20]
   1f32c:	bl	11988 <strlen@plt>
   1f330:	add	r0, r0, #1
   1f334:	mov	ip, r4
   1f338:	mov	r3, #0
   1f33c:	b	1f350 <__assert_fail@plt+0xd7ac>
   1f340:	cmp	r0, r2
   1f344:	strb	r1, [ip], #1
   1f348:	bls	1f3c0 <__assert_fail@plt+0xd81c>
   1f34c:	mov	r3, r2
   1f350:	ldrb	r1, [r4, r3]
   1f354:	add	r2, r3, #1
   1f358:	cmp	r1, #92	; 0x5c
   1f35c:	bne	1f340 <__assert_fail@plt+0xd79c>
   1f360:	add	lr, r3, #4
   1f364:	cmp	lr, r0
   1f368:	bcs	1f340 <__assert_fail@plt+0xd79c>
   1f36c:	ldrb	r5, [r4, r2]
   1f370:	sub	r5, r5, #48	; 0x30
   1f374:	uxtb	r6, r5
   1f378:	cmp	r6, #3
   1f37c:	bhi	1f340 <__assert_fail@plt+0xd79c>
   1f380:	add	r3, r4, r3
   1f384:	ldrb	r6, [r3, #2]
   1f388:	sub	r6, r6, #48	; 0x30
   1f38c:	uxtb	r7, r6
   1f390:	cmp	r7, #7
   1f394:	bhi	1f340 <__assert_fail@plt+0xd79c>
   1f398:	ldrb	r3, [r3, #3]
   1f39c:	sub	r3, r3, #48	; 0x30
   1f3a0:	uxtb	r3, r3
   1f3a4:	cmp	r3, #7
   1f3a8:	bhi	1f340 <__assert_fail@plt+0xd79c>
   1f3ac:	add	r5, r6, r5, lsl #3
   1f3b0:	mov	r2, lr
   1f3b4:	add	r5, r3, r5, lsl #3
   1f3b8:	strb	r5, [ip], #1
   1f3bc:	b	1f34c <__assert_fail@plt+0xd7a8>
   1f3c0:	ldrd	r4, [sp]
   1f3c4:	ldrd	r6, [sp, #8]
   1f3c8:	ldr	r8, [sp, #16]
   1f3cc:	add	sp, sp, #20
   1f3d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3d4:	movw	r1, #49764	; 0xc264
   1f3d8:	movt	r1, #3
   1f3dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f3e0:	movw	r0, #49608	; 0xc1c8
   1f3e4:	movt	r0, #3
   1f3e8:	strd	r6, [sp, #8]
   1f3ec:	strd	r8, [sp, #16]
   1f3f0:	strd	sl, [sp, #24]
   1f3f4:	str	lr, [sp, #32]
   1f3f8:	sub	sp, sp, #44	; 0x2c
   1f3fc:	bl	11afc <fopen64@plt>
   1f400:	subs	r8, r0, #0
   1f404:	beq	1f88c <__assert_fail@plt+0xdce8>
   1f408:	movw	r2, #49652	; 0xc1f4
   1f40c:	movt	r2, #3
   1f410:	mov	r3, #0
   1f414:	movw	r9, #49632	; 0xc1e0
   1f418:	movt	r9, #3
   1f41c:	add	sl, sp, #16
   1f420:	str	r2, [sp, #8]
   1f424:	mov	r2, #65280	; 0xff00
   1f428:	movt	r2, #15
   1f42c:	str	r2, [sp, #12]
   1f430:	str	r3, [sp, #20]
   1f434:	str	r3, [sp, #24]
   1f438:	mov	r3, r8
   1f43c:	mov	r2, #10
   1f440:	add	r1, sp, #24
   1f444:	add	r0, sp, #20
   1f448:	bl	116f4 <__getdelim@plt>
   1f44c:	cmn	r0, #1
   1f450:	beq	1f618 <__assert_fail@plt+0xda74>
   1f454:	add	ip, sp, #36	; 0x24
   1f458:	add	r3, sp, #32
   1f45c:	ldr	r0, [sp, #20]
   1f460:	add	r2, sp, #28
   1f464:	mov	r1, r9
   1f468:	str	ip, [sp]
   1f46c:	bl	11a9c <sscanf@plt>
   1f470:	sub	r0, r0, #2
   1f474:	cmp	r0, #1
   1f478:	bhi	1f438 <__assert_fail@plt+0xd894>
   1f47c:	ldr	r5, [sp, #20]
   1f480:	mov	r1, #32
   1f484:	ldr	r3, [sp, #36]	; 0x24
   1f488:	add	r5, r5, r3
   1f48c:	mov	r0, r5
   1f490:	bl	11994 <strchr@plt>
   1f494:	subs	r4, r0, #0
   1f498:	beq	1f438 <__assert_fail@plt+0xd894>
   1f49c:	mov	r6, #0
   1f4a0:	mov	r1, #32
   1f4a4:	strb	r6, [r4], #1
   1f4a8:	mov	r0, r4
   1f4ac:	bl	11994 <strchr@plt>
   1f4b0:	cmp	r0, #0
   1f4b4:	beq	1f438 <__assert_fail@plt+0xd894>
   1f4b8:	strb	r6, [r0], #1
   1f4bc:	ldr	r1, [sp, #8]
   1f4c0:	bl	39644 <__assert_fail@plt+0x27aa0>
   1f4c4:	cmp	r0, #0
   1f4c8:	beq	1f438 <__assert_fail@plt+0xd894>
   1f4cc:	add	r7, r0, #3
   1f4d0:	mov	r1, #32
   1f4d4:	mov	r0, r7
   1f4d8:	bl	11994 <strchr@plt>
   1f4dc:	subs	fp, r0, #0
   1f4e0:	beq	1f438 <__assert_fail@plt+0xd894>
   1f4e4:	mov	r1, #32
   1f4e8:	strb	r6, [fp], #1
   1f4ec:	mov	r0, fp
   1f4f0:	bl	11994 <strchr@plt>
   1f4f4:	cmp	r0, #0
   1f4f8:	beq	1f438 <__assert_fail@plt+0xd894>
   1f4fc:	strb	r6, [r0]
   1f500:	mov	r0, fp
   1f504:	bl	1f318 <__assert_fail@plt+0xd774>
   1f508:	mov	r0, r4
   1f50c:	bl	1f318 <__assert_fail@plt+0xd774>
   1f510:	mov	r0, r5
   1f514:	bl	1f318 <__assert_fail@plt+0xd774>
   1f518:	mov	r0, r7
   1f51c:	bl	1f318 <__assert_fail@plt+0xd774>
   1f520:	mov	r0, #32
   1f524:	bl	36ad8 <__assert_fail@plt+0x24f34>
   1f528:	mov	r6, r0
   1f52c:	mov	r0, fp
   1f530:	bl	37044 <__assert_fail@plt+0x254a0>
   1f534:	str	r0, [r6]
   1f538:	mov	r0, r4
   1f53c:	bl	37044 <__assert_fail@plt+0x254a0>
   1f540:	str	r0, [r6, #4]
   1f544:	mov	r0, r5
   1f548:	bl	37044 <__assert_fail@plt+0x254a0>
   1f54c:	str	r0, [r6, #8]
   1f550:	mov	r0, r7
   1f554:	bl	37044 <__assert_fail@plt+0x254a0>
   1f558:	ldr	r1, [sp, #12]
   1f55c:	mov	r2, #0
   1f560:	movt	r2, #65520	; 0xfff0
   1f564:	str	r0, [r6, #12]
   1f568:	mov	r4, r0
   1f56c:	ldr	ip, [sp, #28]
   1f570:	ldr	r5, [sp, #32]
   1f574:	ldrb	r3, [r6, #24]
   1f578:	and	lr, r1, ip, lsl #8
   1f57c:	bic	ip, ip, #4080	; 0xff0
   1f580:	bic	ip, ip, #15
   1f584:	and	r1, r2, r5, lsl #12
   1f588:	uxtb	r2, r5
   1f58c:	orr	ip, ip, r5, lsr #20
   1f590:	orr	r2, r2, lr
   1f594:	orr	r2, r1, r2
   1f598:	orr	r3, r3, #4
   1f59c:	movw	r1, #49656	; 0xc1f8
   1f5a0:	movt	r1, #3
   1f5a4:	str	r2, [r6, #16]
   1f5a8:	str	ip, [r6, #20]
   1f5ac:	strb	r3, [r6, #24]
   1f5b0:	bl	1170c <strcmp@plt>
   1f5b4:	cmp	r0, #0
   1f5b8:	beq	1f5d4 <__assert_fail@plt+0xda30>
   1f5bc:	movw	r1, #49664	; 0xc200
   1f5c0:	movt	r1, #3
   1f5c4:	mov	r0, r4
   1f5c8:	bl	1170c <strcmp@plt>
   1f5cc:	cmp	r0, #0
   1f5d0:	bne	1f668 <__assert_fail@plt+0xdac4>
   1f5d4:	mov	r0, #1
   1f5d8:	ldrb	r3, [r6, #24]
   1f5dc:	mov	r1, #58	; 0x3a
   1f5e0:	ldr	r5, [r6]
   1f5e4:	bfi	r3, r0, #0, #1
   1f5e8:	mov	r0, r5
   1f5ec:	strb	r3, [r6, #24]
   1f5f0:	bl	11994 <strchr@plt>
   1f5f4:	cmp	r0, #0
   1f5f8:	beq	1f78c <__assert_fail@plt+0xdbe8>
   1f5fc:	mov	r0, #1
   1f600:	ldrb	r3, [r6, #24]
   1f604:	bfi	r3, r0, #1, #1
   1f608:	strb	r3, [r6, #24]
   1f60c:	str	r6, [sl]
   1f610:	add	sl, r6, #28
   1f614:	b	1f438 <__assert_fail@plt+0xd894>
   1f618:	ldr	r0, [sp, #20]
   1f61c:	bl	19610 <__assert_fail@plt+0x7a6c>
   1f620:	ldr	r3, [r8]
   1f624:	tst	r3, #32
   1f628:	bne	1fc6c <__assert_fail@plt+0xe0c8>
   1f62c:	mov	r0, r8
   1f630:	bl	172cc <__assert_fail@plt+0x5728>
   1f634:	cmn	r0, #1
   1f638:	beq	1fae0 <__assert_fail@plt+0xdf3c>
   1f63c:	mov	r3, #0
   1f640:	str	r3, [sl]
   1f644:	ldr	r6, [sp, #16]
   1f648:	mov	r0, r6
   1f64c:	add	sp, sp, #44	; 0x2c
   1f650:	ldrd	r4, [sp]
   1f654:	ldrd	r6, [sp, #8]
   1f658:	ldrd	r8, [sp, #16]
   1f65c:	ldrd	sl, [sp, #24]
   1f660:	add	sp, sp, #32
   1f664:	pop	{pc}		; (ldr pc, [sp], #4)
   1f668:	movw	r1, #49672	; 0xc208
   1f66c:	movt	r1, #3
   1f670:	mov	r0, r4
   1f674:	bl	1170c <strcmp@plt>
   1f678:	cmp	r0, #0
   1f67c:	beq	1f5d4 <__assert_fail@plt+0xda30>
   1f680:	movw	r1, #49680	; 0xc210
   1f684:	movt	r1, #3
   1f688:	mov	r0, r4
   1f68c:	bl	1170c <strcmp@plt>
   1f690:	cmp	r0, #0
   1f694:	beq	1f5d4 <__assert_fail@plt+0xda30>
   1f698:	movw	r1, #49688	; 0xc218
   1f69c:	movt	r1, #3
   1f6a0:	mov	r0, r4
   1f6a4:	bl	1170c <strcmp@plt>
   1f6a8:	cmp	r0, #0
   1f6ac:	beq	1f5d4 <__assert_fail@plt+0xda30>
   1f6b0:	movw	r1, #49696	; 0xc220
   1f6b4:	movt	r1, #3
   1f6b8:	mov	r0, r4
   1f6bc:	bl	1170c <strcmp@plt>
   1f6c0:	cmp	r0, #0
   1f6c4:	beq	1f5d4 <__assert_fail@plt+0xda30>
   1f6c8:	movw	r1, #49704	; 0xc228
   1f6cc:	movt	r1, #3
   1f6d0:	mov	r0, r4
   1f6d4:	bl	1170c <strcmp@plt>
   1f6d8:	cmp	r0, #0
   1f6dc:	beq	1f5d4 <__assert_fail@plt+0xda30>
   1f6e0:	movw	r1, #49716	; 0xc234
   1f6e4:	movt	r1, #3
   1f6e8:	mov	r0, r4
   1f6ec:	bl	1170c <strcmp@plt>
   1f6f0:	cmp	r0, #0
   1f6f4:	beq	1f5d4 <__assert_fail@plt+0xda30>
   1f6f8:	movw	r1, #49724	; 0xc23c
   1f6fc:	movt	r1, #3
   1f700:	mov	r0, r4
   1f704:	bl	1170c <strcmp@plt>
   1f708:	cmp	r0, #0
   1f70c:	beq	1f5d4 <__assert_fail@plt+0xda30>
   1f710:	movw	r1, #49736	; 0xc248
   1f714:	movt	r1, #3
   1f718:	mov	r0, r4
   1f71c:	bl	1170c <strcmp@plt>
   1f720:	cmp	r0, #0
   1f724:	beq	1f5d4 <__assert_fail@plt+0xda30>
   1f728:	movw	r1, #49744	; 0xc250
   1f72c:	movt	r1, #3
   1f730:	mov	r0, r4
   1f734:	bl	1170c <strcmp@plt>
   1f738:	cmp	r0, #0
   1f73c:	beq	1f5d4 <__assert_fail@plt+0xda30>
   1f740:	movw	r1, #49752	; 0xc258
   1f744:	movt	r1, #3
   1f748:	mov	r0, r4
   1f74c:	bl	1170c <strcmp@plt>
   1f750:	cmp	r0, #0
   1f754:	beq	1f5d4 <__assert_fail@plt+0xda30>
   1f758:	movw	r1, #49760	; 0xc260
   1f75c:	movt	r1, #3
   1f760:	mov	r0, r4
   1f764:	bl	1170c <strcmp@plt>
   1f768:	cmp	r0, #0
   1f76c:	beq	1f5d4 <__assert_fail@plt+0xda30>
   1f770:	movw	r1, #49768	; 0xc268
   1f774:	movt	r1, #3
   1f778:	mov	r0, r4
   1f77c:	bl	1170c <strcmp@plt>
   1f780:	clz	r0, r0
   1f784:	lsr	r0, r0, #5
   1f788:	b	1f5d8 <__assert_fail@plt+0xda34>
   1f78c:	ldrb	r3, [r5]
   1f790:	cmp	r3, #47	; 0x2f
   1f794:	beq	1fce0 <__assert_fail@plt+0xe13c>
   1f798:	movw	r1, #49800	; 0xc288
   1f79c:	movt	r1, #3
   1f7a0:	mov	r0, r4
   1f7a4:	bl	1170c <strcmp@plt>
   1f7a8:	cmp	r0, #0
   1f7ac:	beq	1f5fc <__assert_fail@plt+0xda58>
   1f7b0:	movw	r1, #49808	; 0xc290
   1f7b4:	movt	r1, #3
   1f7b8:	mov	r0, r4
   1f7bc:	bl	1170c <strcmp@plt>
   1f7c0:	cmp	r0, #0
   1f7c4:	beq	1f5fc <__assert_fail@plt+0xda58>
   1f7c8:	movw	r1, #49812	; 0xc294
   1f7cc:	movt	r1, #3
   1f7d0:	mov	r0, r4
   1f7d4:	bl	1170c <strcmp@plt>
   1f7d8:	cmp	r0, #0
   1f7dc:	beq	1f5fc <__assert_fail@plt+0xda58>
   1f7e0:	movw	r1, #49820	; 0xc29c
   1f7e4:	movt	r1, #3
   1f7e8:	mov	r0, r4
   1f7ec:	bl	1170c <strcmp@plt>
   1f7f0:	cmp	r0, #0
   1f7f4:	beq	1f5fc <__assert_fail@plt+0xda58>
   1f7f8:	movw	r1, #49832	; 0xc2a8
   1f7fc:	movt	r1, #3
   1f800:	mov	r0, r4
   1f804:	bl	1170c <strcmp@plt>
   1f808:	cmp	r0, #0
   1f80c:	beq	1f5fc <__assert_fail@plt+0xda58>
   1f810:	movw	r1, #49840	; 0xc2b0
   1f814:	movt	r1, #3
   1f818:	mov	r0, r4
   1f81c:	bl	1170c <strcmp@plt>
   1f820:	cmp	r0, #0
   1f824:	beq	1f5fc <__assert_fail@plt+0xda58>
   1f828:	movw	r1, #49848	; 0xc2b8
   1f82c:	movt	r1, #3
   1f830:	mov	r0, r4
   1f834:	bl	1170c <strcmp@plt>
   1f838:	cmp	r0, #0
   1f83c:	beq	1f5fc <__assert_fail@plt+0xda58>
   1f840:	movw	r1, #49856	; 0xc2c0
   1f844:	movt	r1, #3
   1f848:	mov	r0, r4
   1f84c:	bl	1170c <strcmp@plt>
   1f850:	cmp	r0, #0
   1f854:	beq	1f5fc <__assert_fail@plt+0xda58>
   1f858:	mov	r0, r4
   1f85c:	movw	r1, #49864	; 0xc2c8
   1f860:	movt	r1, #3
   1f864:	bl	1170c <strcmp@plt>
   1f868:	cmp	r0, #0
   1f86c:	beq	1f5fc <__assert_fail@plt+0xda58>
   1f870:	mov	r1, r5
   1f874:	movw	r0, #49872	; 0xc2d0
   1f878:	movt	r0, #3
   1f87c:	bl	1170c <strcmp@plt>
   1f880:	clz	r0, r0
   1f884:	lsr	r0, r0, #5
   1f888:	b	1f600 <__assert_fail@plt+0xda5c>
   1f88c:	movw	r1, #50664	; 0xc5e8
   1f890:	movt	r1, #3
   1f894:	movw	r0, #49880	; 0xc2d8
   1f898:	movt	r0, #3
   1f89c:	bl	11b14 <setmntent@plt>
   1f8a0:	subs	r6, r0, #0
   1f8a4:	beq	1f648 <__assert_fail@plt+0xdaa4>
   1f8a8:	mov	r0, r6
   1f8ac:	movw	r8, #49892	; 0xc2e4
   1f8b0:	movt	r8, #3
   1f8b4:	movw	r7, #49656	; 0xc1f8
   1f8b8:	movt	r7, #3
   1f8bc:	movw	fp, #49664	; 0xc200
   1f8c0:	movt	fp, #3
   1f8c4:	add	sl, sp, #16
   1f8c8:	bl	118c8 <getmntent@plt>
   1f8cc:	subs	r5, r0, #0
   1f8d0:	beq	1fad0 <__assert_fail@plt+0xdf2c>
   1f8d4:	mov	r1, r8
   1f8d8:	bl	1188c <hasmntopt@plt>
   1f8dc:	mov	r9, r0
   1f8e0:	mov	r0, #32
   1f8e4:	bl	36ad8 <__assert_fail@plt+0x24f34>
   1f8e8:	mov	r4, r0
   1f8ec:	ldr	r0, [r5]
   1f8f0:	bl	37044 <__assert_fail@plt+0x254a0>
   1f8f4:	str	r0, [r4]
   1f8f8:	ldr	r0, [r5, #4]
   1f8fc:	bl	37044 <__assert_fail@plt+0x254a0>
   1f900:	mov	r3, #0
   1f904:	str	r0, [r4, #4]
   1f908:	ldr	r0, [r5, #8]
   1f90c:	str	r3, [r4, #8]
   1f910:	bl	37044 <__assert_fail@plt+0x254a0>
   1f914:	ldrb	r3, [r4, #24]
   1f918:	mov	r1, r7
   1f91c:	mov	r5, r0
   1f920:	str	r0, [r4, #12]
   1f924:	orr	r3, r3, #4
   1f928:	strb	r3, [r4, #24]
   1f92c:	bl	1170c <strcmp@plt>
   1f930:	cmp	r0, #0
   1f934:	beq	1fa74 <__assert_fail@plt+0xded0>
   1f938:	mov	r1, fp
   1f93c:	mov	r0, r5
   1f940:	bl	1170c <strcmp@plt>
   1f944:	cmp	r0, #0
   1f948:	beq	1fa74 <__assert_fail@plt+0xded0>
   1f94c:	movw	r1, #49672	; 0xc208
   1f950:	movt	r1, #3
   1f954:	mov	r0, r5
   1f958:	bl	1170c <strcmp@plt>
   1f95c:	cmp	r0, #0
   1f960:	beq	1fa74 <__assert_fail@plt+0xded0>
   1f964:	movw	r1, #49680	; 0xc210
   1f968:	movt	r1, #3
   1f96c:	mov	r0, r5
   1f970:	bl	1170c <strcmp@plt>
   1f974:	cmp	r0, #0
   1f978:	beq	1fa74 <__assert_fail@plt+0xded0>
   1f97c:	movw	r1, #49688	; 0xc218
   1f980:	movt	r1, #3
   1f984:	mov	r0, r5
   1f988:	bl	1170c <strcmp@plt>
   1f98c:	cmp	r0, #0
   1f990:	beq	1fa74 <__assert_fail@plt+0xded0>
   1f994:	movw	r1, #49696	; 0xc220
   1f998:	movt	r1, #3
   1f99c:	mov	r0, r5
   1f9a0:	bl	1170c <strcmp@plt>
   1f9a4:	cmp	r0, #0
   1f9a8:	beq	1fa74 <__assert_fail@plt+0xded0>
   1f9ac:	movw	r1, #49704	; 0xc228
   1f9b0:	movt	r1, #3
   1f9b4:	mov	r0, r5
   1f9b8:	bl	1170c <strcmp@plt>
   1f9bc:	cmp	r0, #0
   1f9c0:	beq	1fa74 <__assert_fail@plt+0xded0>
   1f9c4:	movw	r1, #49716	; 0xc234
   1f9c8:	movt	r1, #3
   1f9cc:	mov	r0, r5
   1f9d0:	bl	1170c <strcmp@plt>
   1f9d4:	cmp	r0, #0
   1f9d8:	beq	1fa74 <__assert_fail@plt+0xded0>
   1f9dc:	movw	r1, #49724	; 0xc23c
   1f9e0:	movt	r1, #3
   1f9e4:	mov	r0, r5
   1f9e8:	bl	1170c <strcmp@plt>
   1f9ec:	cmp	r0, #0
   1f9f0:	beq	1fa74 <__assert_fail@plt+0xded0>
   1f9f4:	movw	r1, #49736	; 0xc248
   1f9f8:	movt	r1, #3
   1f9fc:	mov	r0, r5
   1fa00:	bl	1170c <strcmp@plt>
   1fa04:	cmp	r0, #0
   1fa08:	beq	1fa74 <__assert_fail@plt+0xded0>
   1fa0c:	movw	r1, #49744	; 0xc250
   1fa10:	movt	r1, #3
   1fa14:	mov	r0, r5
   1fa18:	bl	1170c <strcmp@plt>
   1fa1c:	cmp	r0, #0
   1fa20:	beq	1fa74 <__assert_fail@plt+0xded0>
   1fa24:	movw	r1, #49752	; 0xc258
   1fa28:	movt	r1, #3
   1fa2c:	mov	r0, r5
   1fa30:	bl	1170c <strcmp@plt>
   1fa34:	cmp	r0, #0
   1fa38:	beq	1fa74 <__assert_fail@plt+0xded0>
   1fa3c:	movw	r1, #49760	; 0xc260
   1fa40:	movt	r1, #3
   1fa44:	mov	r0, r5
   1fa48:	bl	1170c <strcmp@plt>
   1fa4c:	cmp	r0, #0
   1fa50:	beq	1fa74 <__assert_fail@plt+0xded0>
   1fa54:	movw	r1, #49768	; 0xc268
   1fa58:	movt	r1, #3
   1fa5c:	mov	r0, r5
   1fa60:	bl	1170c <strcmp@plt>
   1fa64:	orrs	r3, r9, r0
   1fa68:	moveq	r2, #1
   1fa6c:	movne	r2, #0
   1fa70:	b	1fa78 <__assert_fail@plt+0xded4>
   1fa74:	mov	r2, #1
   1fa78:	ldrb	r3, [r4, #24]
   1fa7c:	mov	r1, #58	; 0x3a
   1fa80:	ldr	r9, [r4]
   1fa84:	bfi	r3, r2, #0, #1
   1fa88:	mov	r0, r9
   1fa8c:	strb	r3, [r4, #24]
   1fa90:	bl	11994 <strchr@plt>
   1fa94:	cmp	r0, #0
   1fa98:	beq	1fb6c <__assert_fail@plt+0xdfc8>
   1fa9c:	mov	r0, #1
   1faa0:	ldrb	r1, [r4, #24]
   1faa4:	mvn	r2, #0
   1faa8:	mvn	r3, #0
   1faac:	strd	r2, [r4, #16]
   1fab0:	bfi	r1, r0, #1, #1
   1fab4:	mov	r0, r6
   1fab8:	strb	r1, [r4, #24]
   1fabc:	str	r4, [sl]
   1fac0:	add	sl, r4, #28
   1fac4:	bl	118c8 <getmntent@plt>
   1fac8:	subs	r5, r0, #0
   1facc:	bne	1f8d4 <__assert_fail@plt+0xdd30>
   1fad0:	mov	r0, r6
   1fad4:	bl	11a48 <endmntent@plt>
   1fad8:	cmp	r0, #0
   1fadc:	bne	1f63c <__assert_fail@plt+0xda98>
   1fae0:	bl	119b8 <__errno_location@plt>
   1fae4:	ldr	r8, [r0]
   1fae8:	mov	r7, r0
   1faec:	mov	r3, #0
   1faf0:	str	r3, [sl]
   1faf4:	ldr	r4, [sp, #16]
   1faf8:	cmp	r4, r3
   1fafc:	bne	1fb18 <__assert_fail@plt+0xdf74>
   1fb00:	b	1fb60 <__assert_fail@plt+0xdfbc>
   1fb04:	bl	19610 <__assert_fail@plt+0x7a6c>
   1fb08:	cmp	r5, #0
   1fb0c:	str	r5, [sp, #16]
   1fb10:	beq	1fb60 <__assert_fail@plt+0xdfbc>
   1fb14:	mov	r4, r5
   1fb18:	ldr	r0, [r4]
   1fb1c:	ldr	r5, [r4, #28]
   1fb20:	bl	19610 <__assert_fail@plt+0x7a6c>
   1fb24:	ldr	r0, [r4, #4]
   1fb28:	bl	19610 <__assert_fail@plt+0x7a6c>
   1fb2c:	ldr	r0, [r4, #8]
   1fb30:	bl	19610 <__assert_fail@plt+0x7a6c>
   1fb34:	ldrb	r3, [r4, #24]
   1fb38:	mov	r0, r4
   1fb3c:	tst	r3, #4
   1fb40:	beq	1fb04 <__assert_fail@plt+0xdf60>
   1fb44:	ldr	r0, [r4, #12]
   1fb48:	bl	19610 <__assert_fail@plt+0x7a6c>
   1fb4c:	mov	r0, r4
   1fb50:	bl	19610 <__assert_fail@plt+0x7a6c>
   1fb54:	cmp	r5, #0
   1fb58:	str	r5, [sp, #16]
   1fb5c:	bne	1fb14 <__assert_fail@plt+0xdf70>
   1fb60:	mov	r6, #0
   1fb64:	str	r8, [r7]
   1fb68:	b	1f648 <__assert_fail@plt+0xdaa4>
   1fb6c:	ldrb	r3, [r9]
   1fb70:	cmp	r3, #47	; 0x2f
   1fb74:	beq	1fc88 <__assert_fail@plt+0xe0e4>
   1fb78:	movw	r1, #49800	; 0xc288
   1fb7c:	movt	r1, #3
   1fb80:	mov	r0, r5
   1fb84:	bl	1170c <strcmp@plt>
   1fb88:	cmp	r0, #0
   1fb8c:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fb90:	movw	r1, #49808	; 0xc290
   1fb94:	movt	r1, #3
   1fb98:	mov	r0, r5
   1fb9c:	bl	1170c <strcmp@plt>
   1fba0:	cmp	r0, #0
   1fba4:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fba8:	movw	r1, #49812	; 0xc294
   1fbac:	movt	r1, #3
   1fbb0:	mov	r0, r5
   1fbb4:	bl	1170c <strcmp@plt>
   1fbb8:	cmp	r0, #0
   1fbbc:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fbc0:	movw	r1, #49820	; 0xc29c
   1fbc4:	movt	r1, #3
   1fbc8:	mov	r0, r5
   1fbcc:	bl	1170c <strcmp@plt>
   1fbd0:	cmp	r0, #0
   1fbd4:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fbd8:	movw	r1, #49832	; 0xc2a8
   1fbdc:	movt	r1, #3
   1fbe0:	mov	r0, r5
   1fbe4:	bl	1170c <strcmp@plt>
   1fbe8:	cmp	r0, #0
   1fbec:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fbf0:	movw	r1, #49840	; 0xc2b0
   1fbf4:	movt	r1, #3
   1fbf8:	mov	r0, r5
   1fbfc:	bl	1170c <strcmp@plt>
   1fc00:	cmp	r0, #0
   1fc04:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fc08:	movw	r1, #49848	; 0xc2b8
   1fc0c:	movt	r1, #3
   1fc10:	mov	r0, r5
   1fc14:	bl	1170c <strcmp@plt>
   1fc18:	cmp	r0, #0
   1fc1c:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fc20:	movw	r1, #49856	; 0xc2c0
   1fc24:	movt	r1, #3
   1fc28:	mov	r0, r5
   1fc2c:	bl	1170c <strcmp@plt>
   1fc30:	cmp	r0, #0
   1fc34:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fc38:	mov	r0, r5
   1fc3c:	movw	r1, #49864	; 0xc2c8
   1fc40:	movt	r1, #3
   1fc44:	bl	1170c <strcmp@plt>
   1fc48:	cmp	r0, #0
   1fc4c:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fc50:	mov	r1, r9
   1fc54:	movw	r0, #49872	; 0xc2d0
   1fc58:	movt	r0, #3
   1fc5c:	bl	1170c <strcmp@plt>
   1fc60:	clz	r0, r0
   1fc64:	lsr	r0, r0, #5
   1fc68:	b	1faa0 <__assert_fail@plt+0xdefc>
   1fc6c:	bl	119b8 <__errno_location@plt>
   1fc70:	mov	r7, r0
   1fc74:	mov	r0, r8
   1fc78:	ldr	r8, [r7]
   1fc7c:	bl	172cc <__assert_fail@plt+0x5728>
   1fc80:	str	r8, [r7]
   1fc84:	b	1faec <__assert_fail@plt+0xdf48>
   1fc88:	ldrb	r3, [r9, #1]
   1fc8c:	cmp	r3, #47	; 0x2f
   1fc90:	bne	1fb78 <__assert_fail@plt+0xdfd4>
   1fc94:	movw	r1, #49776	; 0xc270
   1fc98:	movt	r1, #3
   1fc9c:	mov	r0, r5
   1fca0:	bl	1170c <strcmp@plt>
   1fca4:	cmp	r0, #0
   1fca8:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fcac:	movw	r1, #49784	; 0xc278
   1fcb0:	movt	r1, #3
   1fcb4:	mov	r0, r5
   1fcb8:	bl	1170c <strcmp@plt>
   1fcbc:	cmp	r0, #0
   1fcc0:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fcc4:	movw	r1, #49792	; 0xc280
   1fcc8:	movt	r1, #3
   1fccc:	mov	r0, r5
   1fcd0:	bl	1170c <strcmp@plt>
   1fcd4:	cmp	r0, #0
   1fcd8:	beq	1fa9c <__assert_fail@plt+0xdef8>
   1fcdc:	b	1fb78 <__assert_fail@plt+0xdfd4>
   1fce0:	ldrb	r3, [r5, #1]
   1fce4:	cmp	r3, #47	; 0x2f
   1fce8:	bne	1f798 <__assert_fail@plt+0xdbf4>
   1fcec:	movw	r1, #49776	; 0xc270
   1fcf0:	movt	r1, #3
   1fcf4:	mov	r0, r4
   1fcf8:	bl	1170c <strcmp@plt>
   1fcfc:	cmp	r0, #0
   1fd00:	beq	1f5fc <__assert_fail@plt+0xda58>
   1fd04:	movw	r1, #49784	; 0xc278
   1fd08:	movt	r1, #3
   1fd0c:	mov	r0, r4
   1fd10:	bl	1170c <strcmp@plt>
   1fd14:	cmp	r0, #0
   1fd18:	beq	1f5fc <__assert_fail@plt+0xda58>
   1fd1c:	movw	r1, #49792	; 0xc280
   1fd20:	movt	r1, #3
   1fd24:	mov	r0, r4
   1fd28:	bl	1170c <strcmp@plt>
   1fd2c:	cmp	r0, #0
   1fd30:	beq	1f5fc <__assert_fail@plt+0xda58>
   1fd34:	b	1f798 <__assert_fail@plt+0xdbf4>
   1fd38:	str	r4, [sp, #-8]!
   1fd3c:	mov	r4, r0
   1fd40:	ldr	r0, [r0]
   1fd44:	str	lr, [sp, #4]
   1fd48:	bl	19610 <__assert_fail@plt+0x7a6c>
   1fd4c:	ldr	r0, [r4, #4]
   1fd50:	bl	19610 <__assert_fail@plt+0x7a6c>
   1fd54:	ldr	r0, [r4, #8]
   1fd58:	bl	19610 <__assert_fail@plt+0x7a6c>
   1fd5c:	ldrb	r3, [r4, #24]
   1fd60:	tst	r3, #4
   1fd64:	bne	1fd7c <__assert_fail@plt+0xe1d8>
   1fd68:	mov	r0, r4
   1fd6c:	ldr	r4, [sp]
   1fd70:	ldr	lr, [sp, #4]
   1fd74:	add	sp, sp, #8
   1fd78:	b	19610 <__assert_fail@plt+0x7a6c>
   1fd7c:	ldr	r0, [r4, #12]
   1fd80:	bl	19610 <__assert_fail@plt+0x7a6c>
   1fd84:	b	1fd68 <__assert_fail@plt+0xe1c4>
   1fd88:	push	{r2, r3}
   1fd8c:	push	{lr}		; (str lr, [sp, #-4]!)
   1fd90:	sub	sp, sp, #12
   1fd94:	ldr	r2, [sp, #16]
   1fd98:	ands	r3, r2, #64	; 0x40
   1fd9c:	bne	1fdb8 <__assert_fail@plt+0xe214>
   1fda0:	bl	119ac <openat64@plt>
   1fda4:	bl	3633c <__assert_fail@plt+0x24798>
   1fda8:	add	sp, sp, #12
   1fdac:	pop	{lr}		; (ldr lr, [sp], #4)
   1fdb0:	add	sp, sp, #8
   1fdb4:	bx	lr
   1fdb8:	add	ip, sp, #20
   1fdbc:	ldr	r3, [sp, #20]
   1fdc0:	str	ip, [sp, #4]
   1fdc4:	b	1fda0 <__assert_fail@plt+0xe1fc>
   1fdc8:	orr	r2, r2, #540672	; 0x84000
   1fdcc:	strd	r4, [sp, #-16]!
   1fdd0:	orr	r2, r2, #2304	; 0x900
   1fdd4:	str	r6, [sp, #8]
   1fdd8:	mov	r6, r3
   1fddc:	str	lr, [sp, #12]
   1fde0:	bl	1fd88 <__assert_fail@plt+0xe1e4>
   1fde4:	subs	r5, r0, #0
   1fde8:	movlt	r4, #0
   1fdec:	blt	1fe00 <__assert_fail@plt+0xe25c>
   1fdf0:	bl	11ac0 <fdopendir@plt>
   1fdf4:	subs	r4, r0, #0
   1fdf8:	beq	1fe14 <__assert_fail@plt+0xe270>
   1fdfc:	str	r5, [r6]
   1fe00:	mov	r0, r4
   1fe04:	ldrd	r4, [sp]
   1fe08:	ldr	r6, [sp, #8]
   1fe0c:	add	sp, sp, #12
   1fe10:	pop	{pc}		; (ldr pc, [sp], #4)
   1fe14:	bl	119b8 <__errno_location@plt>
   1fe18:	mov	r6, r0
   1fe1c:	mov	r0, r5
   1fe20:	ldr	r5, [r6]
   1fe24:	bl	11b80 <close@plt>
   1fe28:	b	1fdfc <__assert_fail@plt+0xe258>
   1fe2c:	strd	r4, [sp, #-16]!
   1fe30:	subs	r4, r0, #0
   1fe34:	str	r6, [sp, #8]
   1fe38:	str	lr, [sp, #12]
   1fe3c:	beq	1fed4 <__assert_fail@plt+0xe330>
   1fe40:	mov	r1, #47	; 0x2f
   1fe44:	bl	11a78 <strrchr@plt>
   1fe48:	subs	r5, r0, #0
   1fe4c:	beq	1feac <__assert_fail@plt+0xe308>
   1fe50:	add	r6, r5, #1
   1fe54:	sub	r3, r6, r4
   1fe58:	cmp	r3, #6
   1fe5c:	ble	1feac <__assert_fail@plt+0xe308>
   1fe60:	movw	r1, #49956	; 0xc324
   1fe64:	movt	r1, #3
   1fe68:	mov	r2, #7
   1fe6c:	sub	r0, r5, #6
   1fe70:	bl	11b5c <strncmp@plt>
   1fe74:	cmp	r0, #0
   1fe78:	bne	1feac <__assert_fail@plt+0xe308>
   1fe7c:	movw	r1, #49964	; 0xc32c
   1fe80:	movt	r1, #3
   1fe84:	mov	r2, #3
   1fe88:	mov	r0, r6
   1fe8c:	bl	11b5c <strncmp@plt>
   1fe90:	cmp	r0, #0
   1fe94:	movne	r4, r6
   1fe98:	bne	1feac <__assert_fail@plt+0xe308>
   1fe9c:	add	r4, r5, #4
   1fea0:	movw	r3, #53792	; 0xd220
   1fea4:	movt	r3, #4
   1fea8:	str	r4, [r3]
   1feac:	movw	r2, #53960	; 0xd2c8
   1feb0:	movt	r2, #4
   1feb4:	ldr	r6, [sp, #8]
   1feb8:	movw	r3, #53796	; 0xd224
   1febc:	movt	r3, #4
   1fec0:	str	r4, [r2]
   1fec4:	str	r4, [r3]
   1fec8:	ldrd	r4, [sp]
   1fecc:	add	sp, sp, #12
   1fed0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fed4:	movw	r3, #53808	; 0xd230
   1fed8:	movt	r3, #4
   1fedc:	movw	r0, #49900	; 0xc2ec
   1fee0:	movt	r0, #3
   1fee4:	ldr	r3, [r3]
   1fee8:	mov	r2, #55	; 0x37
   1feec:	mov	r1, #1
   1fef0:	bl	11868 <fwrite@plt>
   1fef4:	bl	11b68 <abort@plt>
   1fef8:	mov	r2, #5
   1fefc:	strd	r4, [sp, #-16]!
   1ff00:	mov	r5, r0
   1ff04:	str	r6, [sp, #8]
   1ff08:	mov	r6, r1
   1ff0c:	mov	r1, r0
   1ff10:	mov	r0, #0
   1ff14:	str	lr, [sp, #12]
   1ff18:	bl	117d8 <dcgettext@plt>
   1ff1c:	cmp	r5, r0
   1ff20:	mov	r4, r0
   1ff24:	beq	1ff3c <__assert_fail@plt+0xe398>
   1ff28:	mov	r0, r4
   1ff2c:	ldrd	r4, [sp]
   1ff30:	ldr	r6, [sp, #8]
   1ff34:	add	sp, sp, #12
   1ff38:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff3c:	bl	39f40 <__assert_fail@plt+0x2839c>
   1ff40:	ldrb	r3, [r0]
   1ff44:	bic	r3, r3, #32
   1ff48:	cmp	r3, #85	; 0x55
   1ff4c:	bne	1ffb4 <__assert_fail@plt+0xe410>
   1ff50:	ldrb	r3, [r0, #1]
   1ff54:	bic	r3, r3, #32
   1ff58:	cmp	r3, #84	; 0x54
   1ff5c:	bne	20034 <__assert_fail@plt+0xe490>
   1ff60:	ldrb	r3, [r0, #2]
   1ff64:	bic	r3, r3, #32
   1ff68:	cmp	r3, #70	; 0x46
   1ff6c:	bne	20034 <__assert_fail@plt+0xe490>
   1ff70:	ldrb	r3, [r0, #3]
   1ff74:	cmp	r3, #45	; 0x2d
   1ff78:	bne	20034 <__assert_fail@plt+0xe490>
   1ff7c:	ldrb	r3, [r0, #4]
   1ff80:	cmp	r3, #56	; 0x38
   1ff84:	bne	20034 <__assert_fail@plt+0xe490>
   1ff88:	ldrb	r3, [r0, #5]
   1ff8c:	cmp	r3, #0
   1ff90:	bne	20034 <__assert_fail@plt+0xe490>
   1ff94:	ldrb	r2, [r4]
   1ff98:	movw	r3, #50056	; 0xc388
   1ff9c:	movt	r3, #3
   1ffa0:	movw	r4, #50068	; 0xc394
   1ffa4:	movt	r4, #3
   1ffa8:	cmp	r2, #96	; 0x60
   1ffac:	movne	r4, r3
   1ffb0:	b	1ff28 <__assert_fail@plt+0xe384>
   1ffb4:	cmp	r3, #71	; 0x47
   1ffb8:	bne	20034 <__assert_fail@plt+0xe490>
   1ffbc:	ldrb	r3, [r0, #1]
   1ffc0:	bic	r3, r3, #32
   1ffc4:	cmp	r3, #66	; 0x42
   1ffc8:	bne	20034 <__assert_fail@plt+0xe490>
   1ffcc:	ldrb	r3, [r0, #2]
   1ffd0:	cmp	r3, #49	; 0x31
   1ffd4:	bne	20034 <__assert_fail@plt+0xe490>
   1ffd8:	ldrb	r3, [r0, #3]
   1ffdc:	cmp	r3, #56	; 0x38
   1ffe0:	bne	20034 <__assert_fail@plt+0xe490>
   1ffe4:	ldrb	r3, [r0, #4]
   1ffe8:	cmp	r3, #48	; 0x30
   1ffec:	bne	20034 <__assert_fail@plt+0xe490>
   1fff0:	ldrb	r3, [r0, #5]
   1fff4:	cmp	r3, #51	; 0x33
   1fff8:	bne	20034 <__assert_fail@plt+0xe490>
   1fffc:	ldrb	r3, [r0, #6]
   20000:	cmp	r3, #48	; 0x30
   20004:	bne	20034 <__assert_fail@plt+0xe490>
   20008:	ldrb	r3, [r0, #7]
   2000c:	cmp	r3, #0
   20010:	bne	20034 <__assert_fail@plt+0xe490>
   20014:	ldrb	r2, [r4]
   20018:	movw	r3, #50060	; 0xc38c
   2001c:	movt	r3, #3
   20020:	movw	r4, #50064	; 0xc390
   20024:	movt	r4, #3
   20028:	cmp	r2, #96	; 0x60
   2002c:	movne	r4, r3
   20030:	b	1ff28 <__assert_fail@plt+0xe384>
   20034:	movw	r3, #47544	; 0xb9b8
   20038:	movt	r3, #3
   2003c:	cmp	r6, #9
   20040:	movw	r4, #50052	; 0xc384
   20044:	movt	r4, #3
   20048:	movne	r4, r3
   2004c:	b	1ff28 <__assert_fail@plt+0xe384>
   20050:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20054:	strd	r6, [sp, #8]
   20058:	strd	r8, [sp, #16]
   2005c:	mov	r8, r3
   20060:	strd	sl, [sp, #24]
   20064:	mov	fp, r0
   20068:	mov	sl, r1
   2006c:	str	lr, [sp, #32]
   20070:	sub	sp, sp, #140	; 0x8c
   20074:	ldr	r3, [sp, #180]	; 0xb4
   20078:	str	r2, [sp, #28]
   2007c:	and	r4, r3, #2
   20080:	ubfx	r3, r3, #1, #1
   20084:	str	r3, [sp, #44]	; 0x2c
   20088:	bl	11880 <__ctype_get_mb_cur_max@plt>
   2008c:	ldr	r3, [sp, #176]	; 0xb0
   20090:	str	r0, [sp, #76]	; 0x4c
   20094:	cmp	r3, #10
   20098:	ldrls	pc, [pc, r3, lsl #2]
   2009c:	b	21a38 <__assert_fail@plt+0xfe94>
   200a0:	andeq	r0, r2, r0, lsr #10
   200a4:	andeq	r0, r2, ip, lsr r6
   200a8:			; <UNDEFINED> instruction: 0x00020bb8
   200ac:	andeq	r0, r2, r8, lsr #13
   200b0:	andeq	r0, r2, r8, lsr #8
   200b4:	andeq	r0, r2, r4, lsr #9
   200b8:	andeq	r0, r2, ip, ror r5
   200bc:	andeq	r0, r2, r4, ror #11
   200c0:	andeq	r0, r2, ip, asr #1
   200c4:	andeq	r0, r2, ip, asr #1
   200c8:	andeq	r0, r2, ip, asr #1
   200cc:	ldr	r3, [sp, #176]	; 0xb0
   200d0:	cmp	r3, #10
   200d4:	beq	20100 <__assert_fail@plt+0xe55c>
   200d8:	mov	r1, r3
   200dc:	movw	r0, #50072	; 0xc398
   200e0:	movt	r0, #3
   200e4:	bl	1fef8 <__assert_fail@plt+0xe354>
   200e8:	str	r0, [sp, #188]	; 0xbc
   200ec:	movw	r0, #47544	; 0xb9b8
   200f0:	movt	r0, #3
   200f4:	ldr	r1, [sp, #176]	; 0xb0
   200f8:	bl	1fef8 <__assert_fail@plt+0xe354>
   200fc:	str	r0, [sp, #192]	; 0xc0
   20100:	cmp	r4, #0
   20104:	movne	r4, #0
   20108:	beq	217c4 <__assert_fail@plt+0xfc20>
   2010c:	mov	r5, #0
   20110:	ldr	r0, [sp, #192]	; 0xc0
   20114:	mov	r9, r5
   20118:	str	r5, [sp, #64]	; 0x40
   2011c:	bl	11988 <strlen@plt>
   20120:	mov	r3, #1
   20124:	ldr	r2, [sp, #44]	; 0x2c
   20128:	cmp	r0, r5
   2012c:	moveq	r2, r5
   20130:	str	r3, [sp, #32]
   20134:	str	r3, [sp, #48]	; 0x30
   20138:	str	r5, [sp, #52]	; 0x34
   2013c:	str	r3, [sp, #60]	; 0x3c
   20140:	ldr	r3, [sp, #180]	; 0xb4
   20144:	str	r0, [sp, #56]	; 0x38
   20148:	str	r5, [sp, #68]	; 0x44
   2014c:	str	r5, [sp, #80]	; 0x50
   20150:	str	r5, [sp, #84]	; 0x54
   20154:	and	r3, r3, #1
   20158:	str	r2, [sp, #88]	; 0x58
   2015c:	str	r3, [sp, #92]	; 0x5c
   20160:	ldr	r3, [sp, #180]	; 0xb4
   20164:	and	r3, r3, #4
   20168:	str	r3, [sp, #96]	; 0x60
   2016c:	ldr	r3, [sp, #192]	; 0xc0
   20170:	str	r3, [sp, #72]	; 0x48
   20174:	mov	r3, fp
   20178:	mov	r7, #0
   2017c:	mov	fp, r9
   20180:	mov	r9, r3
   20184:	cmn	r8, #1
   20188:	beq	2078c <__assert_fail@plt+0xebe8>
   2018c:	subs	r6, r8, r7
   20190:	movne	r6, #1
   20194:	cmp	r6, #0
   20198:	beq	207a4 <__assert_fail@plt+0xec00>
   2019c:	ldr	r0, [sp, #28]
   201a0:	ldr	r3, [sp, #48]	; 0x30
   201a4:	cmp	r3, #0
   201a8:	add	r3, r0, r7
   201ac:	str	r3, [sp, #36]	; 0x24
   201b0:	beq	20c30 <__assert_fail@plt+0xf08c>
   201b4:	ldr	r2, [sp, #56]	; 0x38
   201b8:	cmp	r2, #0
   201bc:	beq	21130 <__assert_fail@plt+0xf58c>
   201c0:	cmp	r2, #1
   201c4:	mov	r3, r2
   201c8:	movls	r3, #0
   201cc:	movhi	r3, #1
   201d0:	cmn	r8, #1
   201d4:	add	r5, r7, r2
   201d8:	movne	r3, #0
   201dc:	cmp	r3, #0
   201e0:	beq	201ec <__assert_fail@plt+0xe648>
   201e4:	bl	11988 <strlen@plt>
   201e8:	mov	r8, r0
   201ec:	cmp	r5, r8
   201f0:	bhi	21130 <__assert_fail@plt+0xf58c>
   201f4:	ldr	r0, [sp, #36]	; 0x24
   201f8:	ldr	r2, [sp, #56]	; 0x38
   201fc:	ldr	r1, [sp, #72]	; 0x48
   20200:	bl	117c0 <memcmp@plt>
   20204:	cmp	r0, #0
   20208:	bne	21130 <__assert_fail@plt+0xf58c>
   2020c:	ldr	r3, [sp, #44]	; 0x2c
   20210:	cmp	r3, #0
   20214:	bne	218dc <__assert_fail@plt+0xfd38>
   20218:	ldr	r3, [sp, #36]	; 0x24
   2021c:	ldrb	r5, [r3]
   20220:	cmp	r5, #126	; 0x7e
   20224:	ldrls	pc, [pc, r5, lsl #2]
   20228:	b	216c4 <__assert_fail@plt+0xfb20>
   2022c:	andeq	r0, r2, r0, lsl #18
   20230:	andeq	r1, r2, r4, asr #13
   20234:	andeq	r1, r2, r4, asr #13
   20238:	andeq	r1, r2, r4, asr #13
   2023c:	andeq	r1, r2, r4, asr #13
   20240:	andeq	r1, r2, r4, asr #13
   20244:	andeq	r1, r2, r4, asr #13
   20248:	andeq	r0, r2, r8, asr r8
   2024c:	andeq	r0, r2, r0, asr r8
   20250:	andeq	r0, r2, r0, ror #16
   20254:	andeq	r0, r2, r4, ror #19
   20258:	ldrdeq	r0, [r2], -r4
   2025c:	strdeq	r0, [r2], -ip
   20260:			; <UNDEFINED> instruction: 0x000209b0
   20264:	andeq	r1, r2, r4, asr #13
   20268:	andeq	r1, r2, r4, asr #13
   2026c:	andeq	r1, r2, r4, asr #13
   20270:	andeq	r1, r2, r4, asr #13
   20274:	andeq	r1, r2, r4, asr #13
   20278:	andeq	r1, r2, r4, asr #13
   2027c:	andeq	r1, r2, r4, asr #13
   20280:	andeq	r1, r2, r4, asr #13
   20284:	andeq	r1, r2, r4, asr #13
   20288:	andeq	r1, r2, r4, asr #13
   2028c:	andeq	r1, r2, r4, asr #13
   20290:	andeq	r1, r2, r4, asr #13
   20294:	andeq	r1, r2, r4, asr #13
   20298:	andeq	r1, r2, r4, asr #13
   2029c:	andeq	r1, r2, r4, asr #13
   202a0:	andeq	r1, r2, r4, asr #13
   202a4:	andeq	r1, r2, r4, asr #13
   202a8:	andeq	r1, r2, r4, asr #13
   202ac:	andeq	r0, r2, ip, asr sl
   202b0:	andeq	r0, r2, r0, asr sl
   202b4:	andeq	r0, r2, r0, asr sl
   202b8:	andeq	r0, r2, r4, asr #20
   202bc:	andeq	r0, r2, r0, asr sl
   202c0:	andeq	r0, r2, r8, lsr #22
   202c4:	andeq	r0, r2, r0, asr sl
   202c8:	muleq	r2, r8, fp
   202cc:	andeq	r0, r2, r0, asr sl
   202d0:	andeq	r0, r2, r0, asr sl
   202d4:	andeq	r0, r2, r0, asr sl
   202d8:	andeq	r0, r2, r8, lsr #22
   202dc:	andeq	r0, r2, r8, lsr #22
   202e0:	andeq	r0, r2, r8, lsr #22
   202e4:	andeq	r0, r2, r8, lsr #22
   202e8:	andeq	r0, r2, r8, lsr #22
   202ec:	andeq	r0, r2, r8, lsr #22
   202f0:	andeq	r0, r2, r8, lsr #22
   202f4:	andeq	r0, r2, r8, lsr #22
   202f8:	andeq	r0, r2, r8, lsr #22
   202fc:	andeq	r0, r2, r8, lsr #22
   20300:	andeq	r0, r2, r8, lsr #22
   20304:	andeq	r0, r2, r8, lsr #22
   20308:	andeq	r0, r2, r8, lsr #22
   2030c:	andeq	r0, r2, r8, lsr #22
   20310:	andeq	r0, r2, r8, lsr #22
   20314:	andeq	r0, r2, r8, lsr #22
   20318:	andeq	r0, r2, r0, asr sl
   2031c:	andeq	r0, r2, r0, asr sl
   20320:	andeq	r0, r2, r0, asr sl
   20324:	andeq	r0, r2, r0, asr sl
   20328:	andeq	r0, r2, r8, asr #22
   2032c:	andeq	r1, r2, r4, asr #13
   20330:	andeq	r0, r2, r8, lsr #22
   20334:	andeq	r0, r2, r8, lsr #22
   20338:	andeq	r0, r2, r8, lsr #22
   2033c:	andeq	r0, r2, r8, lsr #22
   20340:	andeq	r0, r2, r8, lsr #22
   20344:	andeq	r0, r2, r8, lsr #22
   20348:	andeq	r0, r2, r8, lsr #22
   2034c:	andeq	r0, r2, r8, lsr #22
   20350:	andeq	r0, r2, r8, lsr #22
   20354:	andeq	r0, r2, r8, lsr #22
   20358:	andeq	r0, r2, r8, lsr #22
   2035c:	andeq	r0, r2, r8, lsr #22
   20360:	andeq	r0, r2, r8, lsr #22
   20364:	andeq	r0, r2, r8, lsr #22
   20368:	andeq	r0, r2, r8, lsr #22
   2036c:	andeq	r0, r2, r8, lsr #22
   20370:	andeq	r0, r2, r8, lsr #22
   20374:	andeq	r0, r2, r8, lsr #22
   20378:	andeq	r0, r2, r8, lsr #22
   2037c:	andeq	r0, r2, r8, lsr #22
   20380:	andeq	r0, r2, r8, lsr #22
   20384:	andeq	r0, r2, r8, lsr #22
   20388:	andeq	r0, r2, r8, lsr #22
   2038c:	andeq	r0, r2, r8, lsr #22
   20390:	andeq	r0, r2, r8, lsr #22
   20394:	andeq	r0, r2, r8, lsr #22
   20398:	andeq	r0, r2, r0, asr sl
   2039c:	andeq	r0, r2, ip, ror #21
   203a0:	andeq	r0, r2, r8, lsr #22
   203a4:	andeq	r0, r2, r0, asr sl
   203a8:	andeq	r0, r2, r8, lsr #22
   203ac:	andeq	r0, r2, r0, asr sl
   203b0:	andeq	r0, r2, r8, lsr #22
   203b4:	andeq	r0, r2, r8, lsr #22
   203b8:	andeq	r0, r2, r8, lsr #22
   203bc:	andeq	r0, r2, r8, lsr #22
   203c0:	andeq	r0, r2, r8, lsr #22
   203c4:	andeq	r0, r2, r8, lsr #22
   203c8:	andeq	r0, r2, r8, lsr #22
   203cc:	andeq	r0, r2, r8, lsr #22
   203d0:	andeq	r0, r2, r8, lsr #22
   203d4:	andeq	r0, r2, r8, lsr #22
   203d8:	andeq	r0, r2, r8, lsr #22
   203dc:	andeq	r0, r2, r8, lsr #22
   203e0:	andeq	r0, r2, r8, lsr #22
   203e4:	andeq	r0, r2, r8, lsr #22
   203e8:	andeq	r0, r2, r8, lsr #22
   203ec:	andeq	r0, r2, r8, lsr #22
   203f0:	andeq	r0, r2, r8, lsr #22
   203f4:	andeq	r0, r2, r8, lsr #22
   203f8:	andeq	r0, r2, r8, lsr #22
   203fc:	andeq	r0, r2, r8, lsr #22
   20400:	andeq	r0, r2, r8, lsr #22
   20404:	andeq	r0, r2, r8, lsr #22
   20408:	andeq	r0, r2, r8, lsr #22
   2040c:	andeq	r0, r2, r8, lsr #22
   20410:	andeq	r0, r2, r8, lsr #22
   20414:	andeq	r0, r2, r8, lsr #22
   20418:	strdeq	r0, [r2], -r8
   2041c:	andeq	r0, r2, r0, asr sl
   20420:	strdeq	r0, [r2], -r8
   20424:	andeq	r0, r2, r4, asr #20
   20428:	ldr	r3, [sp, #180]	; 0xb4
   2042c:	cmp	r4, #0
   20430:	and	r3, r3, #1
   20434:	str	r3, [sp, #92]	; 0x5c
   20438:	ldr	r3, [sp, #180]	; 0xb4
   2043c:	and	r3, r3, #4
   20440:	str	r3, [sp, #96]	; 0x60
   20444:	moveq	r3, #1
   20448:	streq	r3, [sp, #60]	; 0x3c
   2044c:	beq	20bdc <__assert_fail@plt+0xf038>
   20450:	mov	r3, #0
   20454:	mov	r2, #1
   20458:	mov	r4, r3
   2045c:	mov	r9, r3
   20460:	str	r2, [sp, #32]
   20464:	str	r2, [sp, #44]	; 0x2c
   20468:	str	r3, [sp, #48]	; 0x30
   2046c:	str	r2, [sp, #52]	; 0x34
   20470:	str	r2, [sp, #56]	; 0x38
   20474:	str	r3, [sp, #60]	; 0x3c
   20478:	str	r2, [sp, #64]	; 0x40
   2047c:	str	r2, [sp, #68]	; 0x44
   20480:	str	r3, [sp, #80]	; 0x50
   20484:	str	r3, [sp, #84]	; 0x54
   20488:	str	r3, [sp, #88]	; 0x58
   2048c:	movw	r3, #47544	; 0xb9b8
   20490:	movt	r3, #3
   20494:	str	r3, [sp, #72]	; 0x48
   20498:	mov	r3, #2
   2049c:	str	r3, [sp, #176]	; 0xb0
   204a0:	b	20174 <__assert_fail@plt+0xe5d0>
   204a4:	ldr	r3, [sp, #180]	; 0xb4
   204a8:	cmp	r4, #0
   204ac:	and	r3, r3, #1
   204b0:	str	r3, [sp, #92]	; 0x5c
   204b4:	ldr	r3, [sp, #180]	; 0xb4
   204b8:	and	r3, r3, #4
   204bc:	str	r3, [sp, #96]	; 0x60
   204c0:	bne	21894 <__assert_fail@plt+0xfcf0>
   204c4:	cmp	sl, #0
   204c8:	beq	21640 <__assert_fail@plt+0xfa9c>
   204cc:	mov	r3, #34	; 0x22
   204d0:	mov	r2, r4
   204d4:	mov	r1, #1
   204d8:	mov	r9, r2
   204dc:	strb	r3, [fp]
   204e0:	movw	r3, #50052	; 0xc384
   204e4:	movt	r3, #3
   204e8:	mov	r4, r1
   204ec:	str	r1, [sp, #32]
   204f0:	str	r2, [sp, #44]	; 0x2c
   204f4:	str	r1, [sp, #48]	; 0x30
   204f8:	str	r2, [sp, #52]	; 0x34
   204fc:	str	r1, [sp, #56]	; 0x38
   20500:	str	r1, [sp, #60]	; 0x3c
   20504:	str	r2, [sp, #64]	; 0x40
   20508:	str	r2, [sp, #68]	; 0x44
   2050c:	str	r3, [sp, #72]	; 0x48
   20510:	str	r2, [sp, #80]	; 0x50
   20514:	str	r2, [sp, #84]	; 0x54
   20518:	str	r2, [sp, #88]	; 0x58
   2051c:	b	20174 <__assert_fail@plt+0xe5d0>
   20520:	mov	r3, #0
   20524:	mov	r2, #1
   20528:	mov	r9, r3
   2052c:	str	r2, [sp, #32]
   20530:	str	r3, [sp, #44]	; 0x2c
   20534:	str	r3, [sp, #48]	; 0x30
   20538:	str	r3, [sp, #52]	; 0x34
   2053c:	str	r3, [sp, #60]	; 0x3c
   20540:	strd	r2, [sp, #64]	; 0x40
   20544:	str	r3, [sp, #72]	; 0x48
   20548:	str	r3, [sp, #80]	; 0x50
   2054c:	str	r3, [sp, #88]	; 0x58
   20550:	ldr	r3, [sp, #180]	; 0xb4
   20554:	and	r3, r3, r2
   20558:	str	r3, [sp, #92]	; 0x5c
   2055c:	ldr	r3, [sp, #180]	; 0xb4
   20560:	and	r3, r3, #4
   20564:	str	r3, [sp, #96]	; 0x60
   20568:	ldr	r3, [sp, #176]	; 0xb0
   2056c:	mov	r4, r3
   20570:	str	r3, [sp, #56]	; 0x38
   20574:	str	r3, [sp, #84]	; 0x54
   20578:	b	20174 <__assert_fail@plt+0xe5d0>
   2057c:	mov	r3, #1
   20580:	mov	r4, #0
   20584:	mov	r9, r4
   20588:	str	r3, [sp, #32]
   2058c:	str	r3, [sp, #44]	; 0x2c
   20590:	str	r3, [sp, #48]	; 0x30
   20594:	str	r4, [sp, #52]	; 0x34
   20598:	str	r3, [sp, #56]	; 0x38
   2059c:	str	r3, [sp, #60]	; 0x3c
   205a0:	str	r3, [sp, #88]	; 0x58
   205a4:	movw	r3, #50052	; 0xc384
   205a8:	movt	r3, #3
   205ac:	str	r4, [sp, #64]	; 0x40
   205b0:	str	r4, [sp, #68]	; 0x44
   205b4:	str	r3, [sp, #72]	; 0x48
   205b8:	ldr	r3, [sp, #180]	; 0xb4
   205bc:	str	r4, [sp, #80]	; 0x50
   205c0:	str	r4, [sp, #84]	; 0x54
   205c4:	and	r3, r3, #1
   205c8:	str	r3, [sp, #92]	; 0x5c
   205cc:	ldr	r3, [sp, #180]	; 0xb4
   205d0:	and	r3, r3, #4
   205d4:	str	r3, [sp, #96]	; 0x60
   205d8:	mov	r3, #5
   205dc:	str	r3, [sp, #176]	; 0xb0
   205e0:	b	20174 <__assert_fail@plt+0xe5d0>
   205e4:	mov	r3, #1
   205e8:	mov	r4, #0
   205ec:	mov	r9, r4
   205f0:	str	r3, [sp, #32]
   205f4:	str	r4, [sp, #44]	; 0x2c
   205f8:	str	r3, [sp, #48]	; 0x30
   205fc:	str	r3, [sp, #60]	; 0x3c
   20600:	ldr	r3, [sp, #180]	; 0xb4
   20604:	str	r4, [sp, #52]	; 0x34
   20608:	str	r4, [sp, #56]	; 0x38
   2060c:	str	r4, [sp, #64]	; 0x40
   20610:	str	r4, [sp, #68]	; 0x44
   20614:	and	r3, r3, #1
   20618:	str	r4, [sp, #72]	; 0x48
   2061c:	str	r4, [sp, #80]	; 0x50
   20620:	str	r4, [sp, #84]	; 0x54
   20624:	str	r3, [sp, #92]	; 0x5c
   20628:	ldr	r3, [sp, #180]	; 0xb4
   2062c:	str	r4, [sp, #88]	; 0x58
   20630:	and	r3, r3, #4
   20634:	str	r3, [sp, #96]	; 0x60
   20638:	b	20174 <__assert_fail@plt+0xe5d0>
   2063c:	mov	r3, #0
   20640:	mov	r2, #1
   20644:	ldr	r1, [sp, #176]	; 0xb0
   20648:	mov	r4, r3
   2064c:	mov	r9, r3
   20650:	movw	r3, #47544	; 0xb9b8
   20654:	movt	r3, #3
   20658:	str	r2, [sp, #32]
   2065c:	str	r2, [sp, #44]	; 0x2c
   20660:	str	r4, [sp, #48]	; 0x30
   20664:	strd	r2, [sp, #68]	; 0x44
   20668:	ldr	r3, [sp, #180]	; 0xb4
   2066c:	str	r2, [sp, #52]	; 0x34
   20670:	str	r1, [sp, #56]	; 0x38
   20674:	str	r4, [sp, #60]	; 0x3c
   20678:	str	r2, [sp, #64]	; 0x40
   2067c:	and	r3, r3, r2
   20680:	str	r4, [sp, #80]	; 0x50
   20684:	str	r4, [sp, #84]	; 0x54
   20688:	str	r4, [sp, #88]	; 0x58
   2068c:	str	r3, [sp, #92]	; 0x5c
   20690:	ldr	r3, [sp, #180]	; 0xb4
   20694:	and	r3, r3, #4
   20698:	str	r3, [sp, #96]	; 0x60
   2069c:	mov	r3, #2
   206a0:	str	r3, [sp, #176]	; 0xb0
   206a4:	b	20174 <__assert_fail@plt+0xe5d0>
   206a8:	mov	r3, #1
   206ac:	mov	r2, #0
   206b0:	mov	r4, r2
   206b4:	mov	r9, r2
   206b8:	str	r3, [sp, #32]
   206bc:	str	r3, [sp, #44]	; 0x2c
   206c0:	str	r2, [sp, #48]	; 0x30
   206c4:	str	r3, [sp, #52]	; 0x34
   206c8:	str	r3, [sp, #56]	; 0x38
   206cc:	str	r3, [sp, #60]	; 0x3c
   206d0:	str	r3, [sp, #64]	; 0x40
   206d4:	str	r3, [sp, #68]	; 0x44
   206d8:	str	r3, [sp, #88]	; 0x58
   206dc:	movw	r3, #47544	; 0xb9b8
   206e0:	movt	r3, #3
   206e4:	str	r3, [sp, #72]	; 0x48
   206e8:	ldr	r3, [sp, #180]	; 0xb4
   206ec:	str	r2, [sp, #80]	; 0x50
   206f0:	str	r2, [sp, #84]	; 0x54
   206f4:	and	r3, r3, #1
   206f8:	b	2068c <__assert_fail@plt+0xeae8>
   206fc:	mov	r5, #102	; 0x66
   20700:	mov	r6, #0
   20704:	ldr	r3, [sp, #44]	; 0x2c
   20708:	cmp	r3, #0
   2070c:	bne	215bc <__assert_fail@plt+0xfa18>
   20710:	ldr	r2, [sp, #52]	; 0x34
   20714:	eor	r3, fp, #1
   20718:	ands	r3, r2, r3
   2071c:	beq	20754 <__assert_fail@plt+0xebb0>
   20720:	cmp	sl, r4
   20724:	mov	fp, r3
   20728:	movhi	r2, #39	; 0x27
   2072c:	strbhi	r2, [r9, r4]
   20730:	add	r2, r4, #1
   20734:	cmp	sl, r2
   20738:	movhi	r1, #36	; 0x24
   2073c:	strbhi	r1, [r9, r2]
   20740:	add	r2, r4, #2
   20744:	add	r4, r4, #3
   20748:	cmp	sl, r2
   2074c:	movhi	r1, #39	; 0x27
   20750:	strbhi	r1, [r9, r2]
   20754:	cmp	sl, r4
   20758:	add	r7, r7, #1
   2075c:	movhi	r3, #92	; 0x5c
   20760:	strbhi	r3, [r9, r4]
   20764:	add	r4, r4, #1
   20768:	cmp	r4, sl
   2076c:	ldr	r3, [sp, #32]
   20770:	strbcc	r5, [r9, r4]
   20774:	cmp	r6, #0
   20778:	add	r4, r4, #1
   2077c:	moveq	r3, #0
   20780:	cmn	r8, #1
   20784:	str	r3, [sp, #32]
   20788:	bne	2018c <__assert_fail@plt+0xe5e8>
   2078c:	ldr	r3, [sp, #28]
   20790:	ldrb	r6, [r3, r7]
   20794:	adds	r6, r6, #0
   20798:	movne	r6, #1
   2079c:	cmp	r6, #0
   207a0:	bne	2019c <__assert_fail@plt+0xe5f8>
   207a4:	mov	r3, r9
   207a8:	mov	r9, fp
   207ac:	mov	fp, r3
   207b0:	ldr	r3, [sp, #68]	; 0x44
   207b4:	cmp	r4, #0
   207b8:	movne	r3, #0
   207bc:	cmp	r3, #0
   207c0:	bne	219b4 <__assert_fail@plt+0xfe10>
   207c4:	ldr	r3, [sp, #44]	; 0x2c
   207c8:	ldr	r2, [sp, #52]	; 0x34
   207cc:	eor	r3, r3, #1
   207d0:	ands	r2, r3, r2
   207d4:	beq	218ec <__assert_fail@plt+0xfd48>
   207d8:	ldr	r3, [sp, #80]	; 0x50
   207dc:	cmp	r3, #0
   207e0:	beq	218f0 <__assert_fail@plt+0xfd4c>
   207e4:	ldr	r3, [sp, #32]
   207e8:	cmp	r3, #0
   207ec:	bne	21964 <__assert_fail@plt+0xfdc0>
   207f0:	ldr	r3, [sp, #84]	; 0x54
   207f4:	adds	r3, r3, #0
   207f8:	movne	r3, #1
   207fc:	cmp	sl, #0
   20800:	movne	r3, #0
   20804:	cmp	r3, #0
   20808:	ldreq	r2, [sp, #80]	; 0x50
   2080c:	beq	218f0 <__assert_fail@plt+0xfd4c>
   20810:	ldr	r2, [sp, #84]	; 0x54
   20814:	mov	sl, r2
   20818:	mov	r0, #0
   2081c:	mov	r4, #1
   20820:	mov	r1, #39	; 0x27
   20824:	str	r0, [sp, #44]	; 0x2c
   20828:	strb	r1, [fp]
   2082c:	str	r0, [sp, #48]	; 0x30
   20830:	str	r4, [sp, #52]	; 0x34
   20834:	str	r4, [sp, #56]	; 0x38
   20838:	str	r4, [sp, #64]	; 0x40
   2083c:	str	r0, [sp, #68]	; 0x44
   20840:	str	r3, [sp, #80]	; 0x50
   20844:	str	r2, [sp, #84]	; 0x54
   20848:	str	r0, [sp, #88]	; 0x58
   2084c:	b	2048c <__assert_fail@plt+0xe8e8>
   20850:	mov	r5, #98	; 0x62
   20854:	b	20700 <__assert_fail@plt+0xeb5c>
   20858:	mov	r5, #97	; 0x61
   2085c:	b	20700 <__assert_fail@plt+0xeb5c>
   20860:	ldr	r3, [sp, #48]	; 0x30
   20864:	str	r3, [sp, #40]	; 0x28
   20868:	mov	r3, #116	; 0x74
   2086c:	ldr	r2, [sp, #68]	; 0x44
   20870:	cmp	r2, #0
   20874:	bne	20a70 <__assert_fail@plt+0xeecc>
   20878:	ldr	r2, [sp, #60]	; 0x3c
   2087c:	cmp	r2, #0
   20880:	bne	209cc <__assert_fail@plt+0xee28>
   20884:	ldr	r3, [sp, #44]	; 0x2c
   20888:	mov	r6, #0
   2088c:	cmp	r3, #0
   20890:	beq	20a3c <__assert_fail@plt+0xee98>
   20894:	mov	r3, fp
   20898:	ldr	r2, [sp, #184]	; 0xb8
   2089c:	cmp	r2, #0
   208a0:	beq	208c0 <__assert_fail@plt+0xed1c>
   208a4:	ubfx	r1, r5, #5, #8
   208a8:	mov	r0, r2
   208ac:	and	r2, r5, #31
   208b0:	ldr	r1, [r0, r1, lsl #2]
   208b4:	lsr	r2, r1, r2
   208b8:	tst	r2, #1
   208bc:	bne	20704 <__assert_fail@plt+0xeb60>
   208c0:	ldr	r2, [sp, #40]	; 0x28
   208c4:	cmp	r2, #0
   208c8:	addeq	r7, r7, #1
   208cc:	bne	20704 <__assert_fail@plt+0xeb60>
   208d0:	cmp	r3, #0
   208d4:	beq	20768 <__assert_fail@plt+0xebc4>
   208d8:	cmp	sl, r4
   208dc:	mov	fp, #0
   208e0:	movhi	r3, #39	; 0x27
   208e4:	strbhi	r3, [r9, r4]
   208e8:	add	r3, r4, #1
   208ec:	add	r4, r4, #2
   208f0:	cmp	sl, r3
   208f4:	movhi	r2, #39	; 0x27
   208f8:	strbhi	r2, [r9, r3]
   208fc:	b	20768 <__assert_fail@plt+0xebc4>
   20900:	ldr	r3, [sp, #48]	; 0x30
   20904:	str	r3, [sp, #40]	; 0x28
   20908:	eor	r3, fp, #1
   2090c:	ldr	r2, [sp, #52]	; 0x34
   20910:	ands	r2, r2, r3
   20914:	beq	215d4 <__assert_fail@plt+0xfa30>
   20918:	cmp	sl, r4
   2091c:	movhi	r3, #39	; 0x27
   20920:	strbhi	r3, [r9, r4]
   20924:	add	r3, r4, #1
   20928:	cmp	sl, r3
   2092c:	movhi	r1, #36	; 0x24
   20930:	strbhi	r1, [r9, r3]
   20934:	add	r3, r4, #2
   20938:	cmp	sl, r3
   2093c:	movhi	r1, #39	; 0x27
   20940:	strbhi	r1, [r9, r3]
   20944:	add	r3, r4, #3
   20948:	cmp	sl, r3
   2094c:	bls	21620 <__assert_fail@plt+0xfa7c>
   20950:	mov	r4, r3
   20954:	mov	r3, #92	; 0x5c
   20958:	mov	fp, r2
   2095c:	mov	r2, r4
   20960:	strb	r3, [r9, r4]
   20964:	ldr	r3, [sp, #176]	; 0xb0
   20968:	add	r4, r4, #1
   2096c:	cmp	r3, #2
   20970:	beq	21688 <__assert_fail@plt+0xfae4>
   20974:	add	r3, r7, #1
   20978:	cmp	r3, r8
   2097c:	bcs	20994 <__assert_fail@plt+0xedf0>
   20980:	ldr	r1, [sp, #28]
   20984:	ldrb	r3, [r1, r3]
   20988:	sub	r3, r3, #48	; 0x30
   2098c:	cmp	r3, #9
   20990:	bls	21698 <__assert_fail@plt+0xfaf4>
   20994:	mov	r3, #0
   20998:	mov	r5, #48	; 0x30
   2099c:	ldr	r6, [sp, #64]	; 0x40
   209a0:	cmp	r6, #0
   209a4:	beq	20898 <__assert_fail@plt+0xecf4>
   209a8:	mov	r6, #0
   209ac:	b	208c0 <__assert_fail@plt+0xed1c>
   209b0:	ldr	r3, [sp, #48]	; 0x30
   209b4:	str	r3, [sp, #40]	; 0x28
   209b8:	ldr	r2, [sp, #60]	; 0x3c
   209bc:	mov	r5, #13
   209c0:	mov	r3, #114	; 0x72
   209c4:	cmp	r2, #0
   209c8:	beq	20884 <__assert_fail@plt+0xece0>
   209cc:	mov	r5, r3
   209d0:	b	20700 <__assert_fail@plt+0xeb5c>
   209d4:	ldr	r3, [sp, #48]	; 0x30
   209d8:	str	r3, [sp, #40]	; 0x28
   209dc:	mov	r3, #118	; 0x76
   209e0:	b	20878 <__assert_fail@plt+0xecd4>
   209e4:	ldr	r3, [sp, #48]	; 0x30
   209e8:	str	r3, [sp, #40]	; 0x28
   209ec:	mov	r5, #10
   209f0:	mov	r3, #110	; 0x6e
   209f4:	b	20878 <__assert_fail@plt+0xecd4>
   209f8:	ldr	r3, [sp, #48]	; 0x30
   209fc:	cmn	r8, #1
   20a00:	str	r3, [sp, #40]	; 0x28
   20a04:	beq	20e4c <__assert_fail@plt+0xf2a8>
   20a08:	subs	r3, r8, #1
   20a0c:	movne	r3, #1
   20a10:	cmp	r3, #0
   20a14:	bne	20a20 <__assert_fail@plt+0xee7c>
   20a18:	cmp	r7, #0
   20a1c:	beq	20a64 <__assert_fail@plt+0xeec0>
   20a20:	mov	r6, #0
   20a24:	ldr	r3, [sp, #64]	; 0x40
   20a28:	cmp	r3, #0
   20a2c:	beq	20894 <__assert_fail@plt+0xecf0>
   20a30:	ldr	r3, [sp, #44]	; 0x2c
   20a34:	cmp	r3, #0
   20a38:	bne	20894 <__assert_fail@plt+0xecf0>
   20a3c:	mov	r3, fp
   20a40:	b	208c0 <__assert_fail@plt+0xed1c>
   20a44:	ldr	r3, [sp, #48]	; 0x30
   20a48:	str	r3, [sp, #40]	; 0x28
   20a4c:	b	20a18 <__assert_fail@plt+0xee74>
   20a50:	ldr	r3, [sp, #48]	; 0x30
   20a54:	str	r3, [sp, #40]	; 0x28
   20a58:	b	20a20 <__assert_fail@plt+0xee7c>
   20a5c:	ldr	r6, [sp, #48]	; 0x30
   20a60:	str	r6, [sp, #40]	; 0x28
   20a64:	ldr	r3, [sp, #68]	; 0x44
   20a68:	cmp	r3, #0
   20a6c:	beq	20a24 <__assert_fail@plt+0xee80>
   20a70:	mov	r3, #2
   20a74:	mov	fp, r9
   20a78:	str	r3, [sp, #176]	; 0xb0
   20a7c:	ldr	r3, [sp, #60]	; 0x3c
   20a80:	cmp	r3, #0
   20a84:	ldr	r3, [sp, #176]	; 0xb0
   20a88:	movne	r3, #4
   20a8c:	str	r3, [sp, #176]	; 0xb0
   20a90:	mov	lr, #0
   20a94:	mov	r0, fp
   20a98:	ldr	r2, [sp, #28]
   20a9c:	ldr	r3, [sp, #180]	; 0xb4
   20aa0:	ldr	r1, [sp, #188]	; 0xbc
   20aa4:	bic	ip, r3, #2
   20aa8:	ldr	r3, [sp, #176]	; 0xb0
   20aac:	stm	sp, {r3, ip, lr}
   20ab0:	mov	r3, r8
   20ab4:	ldr	ip, [sp, #192]	; 0xc0
   20ab8:	str	r1, [sp, #12]
   20abc:	mov	r1, sl
   20ac0:	str	ip, [sp, #16]
   20ac4:	bl	20050 <__assert_fail@plt+0xe4ac>
   20ac8:	mov	r4, r0
   20acc:	mov	r0, r4
   20ad0:	add	sp, sp, #140	; 0x8c
   20ad4:	ldrd	r4, [sp]
   20ad8:	ldrd	r6, [sp, #8]
   20adc:	ldrd	r8, [sp, #16]
   20ae0:	ldrd	sl, [sp, #24]
   20ae4:	add	sp, sp, #32
   20ae8:	pop	{pc}		; (ldr pc, [sp], #4)
   20aec:	ldr	r3, [sp, #48]	; 0x30
   20af0:	str	r3, [sp, #40]	; 0x28
   20af4:	ldr	r3, [sp, #176]	; 0xb0
   20af8:	cmp	r3, #2
   20afc:	beq	20e74 <__assert_fail@plt+0xf2d0>
   20b00:	ldr	r3, [sp, #88]	; 0x58
   20b04:	cmp	r3, #0
   20b08:	moveq	r5, #92	; 0x5c
   20b0c:	moveq	r3, r5
   20b10:	beq	20878 <__assert_fail@plt+0xecd4>
   20b14:	add	r7, r7, #1
   20b18:	mov	r3, fp
   20b1c:	mov	r6, #0
   20b20:	mov	r5, #92	; 0x5c
   20b24:	b	208d0 <__assert_fail@plt+0xed2c>
   20b28:	ldr	r3, [sp, #64]	; 0x40
   20b2c:	cmp	r3, #0
   20b30:	bne	219a8 <__assert_fail@plt+0xfe04>
   20b34:	ldr	r2, [sp, #48]	; 0x30
   20b38:	mov	r3, fp
   20b3c:	mov	r6, r2
   20b40:	str	r2, [sp, #40]	; 0x28
   20b44:	b	20898 <__assert_fail@plt+0xecf4>
   20b48:	ldr	r3, [sp, #176]	; 0xb0
   20b4c:	cmp	r3, #2
   20b50:	beq	218e4 <__assert_fail@plt+0xfd40>
   20b54:	cmp	r3, #5
   20b58:	ldr	r3, [sp, #48]	; 0x30
   20b5c:	str	r3, [sp, #40]	; 0x28
   20b60:	bne	20b8c <__assert_fail@plt+0xefe8>
   20b64:	ldr	r3, [sp, #96]	; 0x60
   20b68:	cmp	r3, #0
   20b6c:	beq	215e8 <__assert_fail@plt+0xfa44>
   20b70:	add	r3, r7, #2
   20b74:	cmp	r3, r8
   20b78:	bcs	20b8c <__assert_fail@plt+0xefe8>
   20b7c:	ldr	r2, [sp, #36]	; 0x24
   20b80:	ldrb	r5, [r2, #1]
   20b84:	cmp	r5, #63	; 0x3f
   20b88:	beq	216d0 <__assert_fail@plt+0xfb2c>
   20b8c:	mov	r6, #0
   20b90:	mov	r5, #63	; 0x3f
   20b94:	b	20a24 <__assert_fail@plt+0xee80>
   20b98:	ldr	r3, [sp, #176]	; 0xb0
   20b9c:	cmp	r3, #2
   20ba0:	ldr	r3, [sp, #48]	; 0x30
   20ba4:	beq	2138c <__assert_fail@plt+0xf7e8>
   20ba8:	mov	r5, #39	; 0x27
   20bac:	str	r3, [sp, #40]	; 0x28
   20bb0:	str	r6, [sp, #80]	; 0x50
   20bb4:	b	20a24 <__assert_fail@plt+0xee80>
   20bb8:	ldr	r3, [sp, #180]	; 0xb4
   20bbc:	cmp	r4, #0
   20bc0:	and	r3, r3, #1
   20bc4:	str	r3, [sp, #92]	; 0x5c
   20bc8:	ldr	r3, [sp, #180]	; 0xb4
   20bcc:	and	r3, r3, #4
   20bd0:	str	r3, [sp, #96]	; 0x60
   20bd4:	bne	219f4 <__assert_fail@plt+0xfe50>
   20bd8:	str	r4, [sp, #60]	; 0x3c
   20bdc:	cmp	sl, #0
   20be0:	bne	219d8 <__assert_fail@plt+0xfe34>
   20be4:	mov	r3, #1
   20be8:	movw	r2, #47544	; 0xb9b8
   20bec:	movt	r2, #3
   20bf0:	mov	r4, r3
   20bf4:	mov	r3, #2
   20bf8:	mov	r9, sl
   20bfc:	str	r4, [sp, #32]
   20c00:	str	sl, [sp, #44]	; 0x2c
   20c04:	str	sl, [sp, #48]	; 0x30
   20c08:	str	r4, [sp, #52]	; 0x34
   20c0c:	str	r4, [sp, #56]	; 0x38
   20c10:	str	r4, [sp, #64]	; 0x40
   20c14:	str	sl, [sp, #68]	; 0x44
   20c18:	str	r2, [sp, #72]	; 0x48
   20c1c:	str	sl, [sp, #80]	; 0x50
   20c20:	str	sl, [sp, #84]	; 0x54
   20c24:	str	sl, [sp, #88]	; 0x58
   20c28:	str	r3, [sp, #176]	; 0xb0
   20c2c:	b	20174 <__assert_fail@plt+0xe5d0>
   20c30:	ldrb	r5, [r0, r7]
   20c34:	cmp	r5, #126	; 0x7e
   20c38:	ldrls	pc, [pc, r5, lsl #2]
   20c3c:	b	20fa0 <__assert_fail@plt+0xf3fc>
   20c40:	andeq	r0, r2, ip, ror #30
   20c44:	andeq	r0, r2, r0, lsr #31
   20c48:	andeq	r0, r2, r0, lsr #31
   20c4c:	andeq	r0, r2, r0, lsr #31
   20c50:	andeq	r0, r2, r0, lsr #31
   20c54:	andeq	r0, r2, r0, lsr #31
   20c58:	andeq	r0, r2, r0, lsr #31
   20c5c:	andeq	r0, r2, ip, asr pc
   20c60:	andeq	r0, r2, ip, asr #30
   20c64:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20c68:	andeq	r0, r2, ip, lsr pc
   20c6c:			; <UNDEFINED> instruction: 0x00020eb0
   20c70:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   20c74:	andeq	r0, r2, ip, lsl pc
   20c78:	andeq	r0, r2, r0, lsr #31
   20c7c:	andeq	r0, r2, r0, lsr #31
   20c80:	andeq	r0, r2, r0, lsr #31
   20c84:	andeq	r0, r2, r0, lsr #31
   20c88:	andeq	r0, r2, r0, lsr #31
   20c8c:	andeq	r0, r2, r0, lsr #31
   20c90:	andeq	r0, r2, r0, lsr #31
   20c94:	andeq	r0, r2, r0, lsr #31
   20c98:	andeq	r0, r2, r0, lsr #31
   20c9c:	andeq	r0, r2, r0, lsr #31
   20ca0:	andeq	r0, r2, r0, lsr #31
   20ca4:	andeq	r0, r2, r0, lsr #31
   20ca8:	andeq	r0, r2, r0, lsr #31
   20cac:	andeq	r0, r2, r0, lsr #31
   20cb0:	andeq	r0, r2, r0, lsr #31
   20cb4:	andeq	r0, r2, r0, lsr #31
   20cb8:	andeq	r0, r2, r0, lsr #31
   20cbc:	andeq	r0, r2, r0, lsr #31
   20cc0:	andeq	r0, r2, r4, asr #29
   20cc4:	andeq	r0, r2, ip, lsr #30
   20cc8:	andeq	r0, r2, ip, lsr #30
   20ccc:	andeq	r0, r2, r4, lsr #29
   20cd0:	andeq	r0, r2, ip, lsr #30
   20cd4:	muleq	r2, r8, lr
   20cd8:	andeq	r0, r2, ip, lsr #30
   20cdc:	andeq	r0, r2, r8, lsl #30
   20ce0:	andeq	r0, r2, ip, lsr #30
   20ce4:	andeq	r0, r2, ip, lsr #30
   20ce8:	andeq	r0, r2, ip, lsr #30
   20cec:	muleq	r2, r8, lr
   20cf0:	muleq	r2, r8, lr
   20cf4:	muleq	r2, r8, lr
   20cf8:	muleq	r2, r8, lr
   20cfc:	muleq	r2, r8, lr
   20d00:	muleq	r2, r8, lr
   20d04:	muleq	r2, r8, lr
   20d08:	muleq	r2, r8, lr
   20d0c:	muleq	r2, r8, lr
   20d10:	muleq	r2, r8, lr
   20d14:	muleq	r2, r8, lr
   20d18:	muleq	r2, r8, lr
   20d1c:	muleq	r2, r8, lr
   20d20:	muleq	r2, r8, lr
   20d24:	muleq	r2, r8, lr
   20d28:	muleq	r2, r8, lr
   20d2c:	andeq	r0, r2, ip, lsr #30
   20d30:	andeq	r0, r2, ip, lsr #30
   20d34:	andeq	r0, r2, ip, lsr #30
   20d38:	andeq	r0, r2, ip, lsr #30
   20d3c:	andeq	r0, r2, r0, ror #29
   20d40:	andeq	r0, r2, r0, lsr #31
   20d44:	muleq	r2, r8, lr
   20d48:	muleq	r2, r8, lr
   20d4c:	muleq	r2, r8, lr
   20d50:	muleq	r2, r8, lr
   20d54:	muleq	r2, r8, lr
   20d58:	muleq	r2, r8, lr
   20d5c:	muleq	r2, r8, lr
   20d60:	muleq	r2, r8, lr
   20d64:	muleq	r2, r8, lr
   20d68:	muleq	r2, r8, lr
   20d6c:	muleq	r2, r8, lr
   20d70:	muleq	r2, r8, lr
   20d74:	muleq	r2, r8, lr
   20d78:	muleq	r2, r8, lr
   20d7c:	muleq	r2, r8, lr
   20d80:	muleq	r2, r8, lr
   20d84:	muleq	r2, r8, lr
   20d88:	muleq	r2, r8, lr
   20d8c:	muleq	r2, r8, lr
   20d90:	muleq	r2, r8, lr
   20d94:	muleq	r2, r8, lr
   20d98:	muleq	r2, r8, lr
   20d9c:	muleq	r2, r8, lr
   20da0:	muleq	r2, r8, lr
   20da4:	muleq	r2, r8, lr
   20da8:	muleq	r2, r8, lr
   20dac:	andeq	r0, r2, ip, lsr #30
   20db0:	andeq	r0, r2, r0, ror #28
   20db4:	muleq	r2, r8, lr
   20db8:	andeq	r0, r2, ip, lsr #30
   20dbc:	muleq	r2, r8, lr
   20dc0:	andeq	r0, r2, ip, lsr #30
   20dc4:	muleq	r2, r8, lr
   20dc8:	muleq	r2, r8, lr
   20dcc:	muleq	r2, r8, lr
   20dd0:	muleq	r2, r8, lr
   20dd4:	muleq	r2, r8, lr
   20dd8:	muleq	r2, r8, lr
   20ddc:	muleq	r2, r8, lr
   20de0:	muleq	r2, r8, lr
   20de4:	muleq	r2, r8, lr
   20de8:	muleq	r2, r8, lr
   20dec:	muleq	r2, r8, lr
   20df0:	muleq	r2, r8, lr
   20df4:	muleq	r2, r8, lr
   20df8:	muleq	r2, r8, lr
   20dfc:	muleq	r2, r8, lr
   20e00:	muleq	r2, r8, lr
   20e04:	muleq	r2, r8, lr
   20e08:	muleq	r2, r8, lr
   20e0c:	muleq	r2, r8, lr
   20e10:	muleq	r2, r8, lr
   20e14:	muleq	r2, r8, lr
   20e18:	muleq	r2, r8, lr
   20e1c:	muleq	r2, r8, lr
   20e20:	muleq	r2, r8, lr
   20e24:	muleq	r2, r8, lr
   20e28:	muleq	r2, r8, lr
   20e2c:	andeq	r0, r2, ip, lsr lr
   20e30:	andeq	r0, r2, ip, lsr #30
   20e34:	andeq	r0, r2, ip, lsr lr
   20e38:	andeq	r0, r2, r4, lsr #29
   20e3c:	mov	r3, #0
   20e40:	cmn	r8, #1
   20e44:	str	r3, [sp, #40]	; 0x28
   20e48:	bne	20a08 <__assert_fail@plt+0xee64>
   20e4c:	ldr	r3, [sp, #28]
   20e50:	ldrb	r3, [r3, #1]
   20e54:	adds	r3, r3, #0
   20e58:	movne	r3, #1
   20e5c:	b	20a10 <__assert_fail@plt+0xee6c>
   20e60:	mov	r3, #0
   20e64:	str	r3, [sp, #40]	; 0x28
   20e68:	ldr	r3, [sp, #176]	; 0xb0
   20e6c:	cmp	r3, #2
   20e70:	bne	20b00 <__assert_fail@plt+0xef5c>
   20e74:	ldr	r3, [sp, #44]	; 0x2c
   20e78:	cmp	r3, #0
   20e7c:	bne	217bc <__assert_fail@plt+0xfc18>
   20e80:	mov	r6, r3
   20e84:	add	r7, r7, #1
   20e88:	mov	r3, fp
   20e8c:	mov	r5, #92	; 0x5c
   20e90:	b	208d0 <__assert_fail@plt+0xed2c>
   20e94:	ldr	r6, [sp, #48]	; 0x30
   20e98:	mov	r3, #0
   20e9c:	str	r3, [sp, #40]	; 0x28
   20ea0:	b	20a24 <__assert_fail@plt+0xee80>
   20ea4:	mov	r3, #0
   20ea8:	str	r3, [sp, #40]	; 0x28
   20eac:	b	20a18 <__assert_fail@plt+0xee74>
   20eb0:	mov	r3, #0
   20eb4:	str	r3, [sp, #40]	; 0x28
   20eb8:	mov	r3, #118	; 0x76
   20ebc:	b	20878 <__assert_fail@plt+0xecd4>
   20ec0:	ldr	r6, [sp, #48]	; 0x30
   20ec4:	mov	r3, #0
   20ec8:	str	r3, [sp, #40]	; 0x28
   20ecc:	b	20a64 <__assert_fail@plt+0xeec0>
   20ed0:	mov	r3, #0
   20ed4:	str	r3, [sp, #40]	; 0x28
   20ed8:	mov	r3, #116	; 0x74
   20edc:	b	2086c <__assert_fail@plt+0xecc8>
   20ee0:	ldr	r3, [sp, #176]	; 0xb0
   20ee4:	cmp	r3, #2
   20ee8:	beq	213f8 <__assert_fail@plt+0xf854>
   20eec:	cmp	r3, #5
   20ef0:	mov	r3, #0
   20ef4:	str	r3, [sp, #40]	; 0x28
   20ef8:	beq	20b64 <__assert_fail@plt+0xefc0>
   20efc:	mov	r6, #0
   20f00:	mov	r5, #63	; 0x3f
   20f04:	b	20a24 <__assert_fail@plt+0xee80>
   20f08:	ldr	r3, [sp, #176]	; 0xb0
   20f0c:	cmp	r3, #2
   20f10:	beq	21380 <__assert_fail@plt+0xf7dc>
   20f14:	mov	r3, #0
   20f18:	b	20ba8 <__assert_fail@plt+0xf004>
   20f1c:	mov	r3, #0
   20f20:	str	r3, [sp, #40]	; 0x28
   20f24:	mov	r3, #114	; 0x72
   20f28:	b	2086c <__assert_fail@plt+0xecc8>
   20f2c:	mov	r3, #0
   20f30:	mov	r6, r3
   20f34:	str	r3, [sp, #40]	; 0x28
   20f38:	b	20a64 <__assert_fail@plt+0xeec0>
   20f3c:	mov	r3, #0
   20f40:	str	r3, [sp, #40]	; 0x28
   20f44:	mov	r3, #110	; 0x6e
   20f48:	b	2086c <__assert_fail@plt+0xecc8>
   20f4c:	mov	r3, #0
   20f50:	str	r3, [sp, #40]	; 0x28
   20f54:	mov	r3, #98	; 0x62
   20f58:	b	20878 <__assert_fail@plt+0xecd4>
   20f5c:	mov	r3, #0
   20f60:	str	r3, [sp, #40]	; 0x28
   20f64:	mov	r3, #97	; 0x61
   20f68:	b	20878 <__assert_fail@plt+0xecd4>
   20f6c:	ldr	r3, [sp, #60]	; 0x3c
   20f70:	cmp	r3, #0
   20f74:	bne	21364 <__assert_fail@plt+0xf7c0>
   20f78:	ldr	r3, [sp, #92]	; 0x5c
   20f7c:	cmp	r3, #0
   20f80:	addne	r7, r7, #1
   20f84:	bne	20184 <__assert_fail@plt+0xe5e0>
   20f88:	str	r3, [sp, #40]	; 0x28
   20f8c:	b	20884 <__assert_fail@plt+0xece0>
   20f90:	mov	r3, #0
   20f94:	str	r3, [sp, #40]	; 0x28
   20f98:	mov	r3, #102	; 0x66
   20f9c:	b	20878 <__assert_fail@plt+0xecd4>
   20fa0:	mov	r3, #0
   20fa4:	str	r3, [sp, #40]	; 0x28
   20fa8:	ldr	r3, [sp, #76]	; 0x4c
   20fac:	cmp	r3, #1
   20fb0:	bne	21418 <__assert_fail@plt+0xf874>
   20fb4:	bl	11964 <__ctype_b_loc@plt>
   20fb8:	ldr	r2, [r0]
   20fbc:	sxth	r3, r5
   20fc0:	lsl	r3, r3, #1
   20fc4:	ldr	r1, [sp, #76]	; 0x4c
   20fc8:	ldrh	r3, [r2, r3]
   20fcc:	mov	r0, r1
   20fd0:	and	r3, r3, #16384	; 0x4000
   20fd4:	cmp	r3, #0
   20fd8:	ldr	r3, [sp, #60]	; 0x3c
   20fdc:	movne	r6, #1
   20fe0:	moveq	r6, #0
   20fe4:	movne	r2, #0
   20fe8:	andeq	r2, r3, #1
   20fec:	cmp	r2, #0
   20ff0:	beq	20a24 <__assert_fail@plt+0xee80>
   20ff4:	ldr	r2, [sp, #60]	; 0x3c
   20ff8:	mov	r6, #0
   20ffc:	add	r1, r0, r7
   21000:	mov	ip, #39	; 0x27
   21004:	str	r6, [sp, #100]	; 0x64
   21008:	mov	r0, #0
   2100c:	ldr	lr, [sp, #36]	; 0x24
   21010:	str	r8, [sp, #36]	; 0x24
   21014:	ldr	r6, [sp, #40]	; 0x28
   21018:	ldr	r8, [sp, #44]	; 0x2c
   2101c:	b	210cc <__assert_fail@plt+0xf528>
   21020:	cmp	r8, #0
   21024:	bne	21600 <__assert_fail@plt+0xfa5c>
   21028:	ldr	r0, [sp, #52]	; 0x34
   2102c:	eor	r3, fp, #1
   21030:	ands	r3, r0, r3
   21034:	beq	21064 <__assert_fail@plt+0xf4c0>
   21038:	cmp	sl, r4
   2103c:	add	r0, r4, #1
   21040:	strbhi	ip, [r9, r4]
   21044:	cmp	sl, r0
   21048:	movhi	fp, #36	; 0x24
   2104c:	strbhi	fp, [r9, r0]
   21050:	add	r0, r4, #2
   21054:	mov	fp, r3
   21058:	cmp	sl, r0
   2105c:	add	r4, r4, #3
   21060:	strbhi	ip, [r9, r0]
   21064:	cmp	sl, r4
   21068:	movhi	r3, #92	; 0x5c
   2106c:	strbhi	r3, [r9, r4]
   21070:	add	r3, r4, #1
   21074:	cmp	sl, r3
   21078:	bls	21088 <__assert_fail@plt+0xf4e4>
   2107c:	lsr	r0, r5, #6
   21080:	add	r0, r0, #48	; 0x30
   21084:	strb	r0, [r9, r3]
   21088:	add	r3, r4, #2
   2108c:	cmp	sl, r3
   21090:	bls	210a0 <__assert_fail@plt+0xf4fc>
   21094:	ubfx	r0, r5, #3, #3
   21098:	add	r0, r0, #48	; 0x30
   2109c:	strb	r0, [r9, r3]
   210a0:	add	r7, r7, #1
   210a4:	and	r5, r5, #7
   210a8:	cmp	r1, r7
   210ac:	add	r5, r5, #48	; 0x30
   210b0:	add	r4, r4, #3
   210b4:	bls	21614 <__assert_fail@plt+0xfa70>
   210b8:	mov	r0, r2
   210bc:	cmp	sl, r4
   210c0:	strbhi	r5, [r9, r4]
   210c4:	add	r4, r4, #1
   210c8:	ldrb	r5, [lr, #1]!
   210cc:	cmp	r2, #0
   210d0:	bne	21020 <__assert_fail@plt+0xf47c>
   210d4:	eor	r3, r0, #1
   210d8:	cmp	r6, #0
   210dc:	and	r3, r3, fp
   210e0:	uxtb	r3, r3
   210e4:	beq	210f8 <__assert_fail@plt+0xf554>
   210e8:	cmp	sl, r4
   210ec:	movhi	r6, #92	; 0x5c
   210f0:	strbhi	r6, [r9, r4]
   210f4:	add	r4, r4, #1
   210f8:	add	r7, r7, #1
   210fc:	cmp	r7, r1
   21100:	bcs	215f4 <__assert_fail@plt+0xfa50>
   21104:	cmp	r3, #0
   21108:	beq	21638 <__assert_fail@plt+0xfa94>
   2110c:	cmp	sl, r4
   21110:	add	r3, r4, #1
   21114:	mov	r6, #0
   21118:	strbhi	ip, [r9, r4]
   2111c:	cmp	sl, r3
   21120:	add	r4, r4, #2
   21124:	mov	fp, r6
   21128:	strbhi	ip, [r9, r3]
   2112c:	b	210bc <__assert_fail@plt+0xf518>
   21130:	ldr	r3, [sp, #36]	; 0x24
   21134:	ldrb	r5, [r3]
   21138:	cmp	r5, #126	; 0x7e
   2113c:	ldrls	pc, [pc, r5, lsl #2]
   21140:	b	20fa0 <__assert_fail@plt+0xf3fc>
   21144:	andeq	r1, r2, r4, ror #6
   21148:	andeq	r0, r2, r0, lsr #31
   2114c:	andeq	r0, r2, r0, lsr #31
   21150:	andeq	r0, r2, r0, lsr #31
   21154:	andeq	r0, r2, r0, lsr #31
   21158:	andeq	r0, r2, r0, lsr #31
   2115c:	andeq	r0, r2, r0, lsr #31
   21160:	andeq	r0, r2, r8, asr r8
   21164:	andeq	r0, r2, r0, asr r8
   21168:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2116c:	andeq	r1, r2, r8, asr r3
   21170:			; <UNDEFINED> instruction: 0x00020eb0
   21174:	strdeq	r0, [r2], -ip
   21178:	andeq	r1, r2, ip, asr #6
   2117c:	andeq	r0, r2, r0, lsr #31
   21180:	andeq	r0, r2, r0, lsr #31
   21184:	andeq	r0, r2, r0, lsr #31
   21188:	andeq	r0, r2, r0, lsr #31
   2118c:	andeq	r0, r2, r0, lsr #31
   21190:	andeq	r0, r2, r0, lsr #31
   21194:	andeq	r0, r2, r0, lsr #31
   21198:	andeq	r0, r2, r0, lsr #31
   2119c:	andeq	r0, r2, r0, lsr #31
   211a0:	andeq	r0, r2, r0, lsr #31
   211a4:	andeq	r0, r2, r0, lsr #31
   211a8:	andeq	r0, r2, r0, lsr #31
   211ac:	andeq	r0, r2, r0, lsr #31
   211b0:	andeq	r0, r2, r0, lsr #31
   211b4:	andeq	r0, r2, r0, lsr #31
   211b8:	andeq	r0, r2, r0, lsr #31
   211bc:	andeq	r0, r2, r0, lsr #31
   211c0:	andeq	r0, r2, r0, lsr #31
   211c4:	andeq	r0, r2, r0, asr #29
   211c8:	andeq	r1, r2, r0, asr #6
   211cc:	andeq	r1, r2, r0, asr #6
   211d0:	andeq	r0, r2, r4, lsr #29
   211d4:	andeq	r1, r2, r0, asr #6
   211d8:	muleq	r2, r4, lr
   211dc:	andeq	r1, r2, r0, asr #6
   211e0:	andeq	r0, r2, r8, lsl #30
   211e4:	andeq	r1, r2, r0, asr #6
   211e8:	andeq	r1, r2, r0, asr #6
   211ec:	andeq	r1, r2, r0, asr #6
   211f0:	muleq	r2, r4, lr
   211f4:	muleq	r2, r4, lr
   211f8:	muleq	r2, r4, lr
   211fc:	muleq	r2, r4, lr
   21200:	muleq	r2, r4, lr
   21204:	muleq	r2, r4, lr
   21208:	muleq	r2, r4, lr
   2120c:	muleq	r2, r4, lr
   21210:	muleq	r2, r4, lr
   21214:	muleq	r2, r4, lr
   21218:	muleq	r2, r4, lr
   2121c:	muleq	r2, r4, lr
   21220:	muleq	r2, r4, lr
   21224:	muleq	r2, r4, lr
   21228:	muleq	r2, r4, lr
   2122c:	muleq	r2, r4, lr
   21230:	andeq	r1, r2, r0, asr #6
   21234:	andeq	r1, r2, r0, asr #6
   21238:	andeq	r1, r2, r0, asr #6
   2123c:	andeq	r1, r2, r0, asr #6
   21240:	andeq	r0, r2, r0, ror #29
   21244:	andeq	r0, r2, r0, lsr #31
   21248:	muleq	r2, r4, lr
   2124c:	muleq	r2, r4, lr
   21250:	muleq	r2, r4, lr
   21254:	muleq	r2, r4, lr
   21258:	muleq	r2, r4, lr
   2125c:	muleq	r2, r4, lr
   21260:	muleq	r2, r4, lr
   21264:	muleq	r2, r4, lr
   21268:	muleq	r2, r4, lr
   2126c:	muleq	r2, r4, lr
   21270:	muleq	r2, r4, lr
   21274:	muleq	r2, r4, lr
   21278:	muleq	r2, r4, lr
   2127c:	muleq	r2, r4, lr
   21280:	muleq	r2, r4, lr
   21284:	muleq	r2, r4, lr
   21288:	muleq	r2, r4, lr
   2128c:	muleq	r2, r4, lr
   21290:	muleq	r2, r4, lr
   21294:	muleq	r2, r4, lr
   21298:	muleq	r2, r4, lr
   2129c:	muleq	r2, r4, lr
   212a0:	muleq	r2, r4, lr
   212a4:	muleq	r2, r4, lr
   212a8:	muleq	r2, r4, lr
   212ac:	muleq	r2, r4, lr
   212b0:	andeq	r1, r2, r0, asr #6
   212b4:	andeq	r0, r2, r0, ror #28
   212b8:	muleq	r2, r4, lr
   212bc:	andeq	r1, r2, r0, asr #6
   212c0:	muleq	r2, r4, lr
   212c4:	andeq	r1, r2, r0, asr #6
   212c8:	muleq	r2, r4, lr
   212cc:	muleq	r2, r4, lr
   212d0:	muleq	r2, r4, lr
   212d4:	muleq	r2, r4, lr
   212d8:	muleq	r2, r4, lr
   212dc:	muleq	r2, r4, lr
   212e0:	muleq	r2, r4, lr
   212e4:	muleq	r2, r4, lr
   212e8:	muleq	r2, r4, lr
   212ec:	muleq	r2, r4, lr
   212f0:	muleq	r2, r4, lr
   212f4:	muleq	r2, r4, lr
   212f8:	muleq	r2, r4, lr
   212fc:	muleq	r2, r4, lr
   21300:	muleq	r2, r4, lr
   21304:	muleq	r2, r4, lr
   21308:	muleq	r2, r4, lr
   2130c:	muleq	r2, r4, lr
   21310:	muleq	r2, r4, lr
   21314:	muleq	r2, r4, lr
   21318:	muleq	r2, r4, lr
   2131c:	muleq	r2, r4, lr
   21320:	muleq	r2, r4, lr
   21324:	muleq	r2, r4, lr
   21328:	muleq	r2, r4, lr
   2132c:	muleq	r2, r4, lr
   21330:	andeq	r0, r2, ip, lsr lr
   21334:	andeq	r1, r2, r0, asr #6
   21338:	andeq	r0, r2, ip, lsr lr
   2133c:	andeq	r0, r2, r4, lsr #29
   21340:	mov	r3, #0
   21344:	str	r3, [sp, #40]	; 0x28
   21348:	b	20a20 <__assert_fail@plt+0xee7c>
   2134c:	mov	r3, #0
   21350:	str	r3, [sp, #40]	; 0x28
   21354:	b	209b8 <__assert_fail@plt+0xee14>
   21358:	mov	r3, #0
   2135c:	str	r3, [sp, #40]	; 0x28
   21360:	b	209ec <__assert_fail@plt+0xee48>
   21364:	ldr	r3, [sp, #44]	; 0x2c
   21368:	cmp	r3, #0
   2136c:	beq	20904 <__assert_fail@plt+0xed60>
   21370:	ldr	r3, [sp, #52]	; 0x34
   21374:	mov	fp, r9
   21378:	str	r3, [sp, #60]	; 0x3c
   2137c:	b	20a7c <__assert_fail@plt+0xeed8>
   21380:	ldr	r3, [sp, #44]	; 0x2c
   21384:	cmp	r3, #0
   21388:	bne	217bc <__assert_fail@plt+0xfc18>
   2138c:	str	r3, [sp, #40]	; 0x28
   21390:	cmp	sl, #0
   21394:	ldr	r3, [sp, #84]	; 0x54
   21398:	clz	r3, r3
   2139c:	lsr	r3, r3, #5
   213a0:	moveq	r3, #0
   213a4:	cmp	r3, #0
   213a8:	strne	sl, [sp, #84]	; 0x54
   213ac:	movne	sl, #0
   213b0:	bne	213e0 <__assert_fail@plt+0xf83c>
   213b4:	cmp	sl, r4
   213b8:	movhi	r3, #39	; 0x27
   213bc:	strbhi	r3, [r9, r4]
   213c0:	add	r3, r4, #1
   213c4:	cmp	sl, r3
   213c8:	movhi	r2, #92	; 0x5c
   213cc:	strbhi	r2, [r9, r3]
   213d0:	add	r3, r4, #2
   213d4:	cmp	sl, r3
   213d8:	movhi	r2, #39	; 0x27
   213dc:	strbhi	r2, [r9, r3]
   213e0:	mov	r3, #0
   213e4:	add	r4, r4, #3
   213e8:	str	r6, [sp, #80]	; 0x50
   213ec:	mov	fp, r3
   213f0:	mov	r5, #39	; 0x27
   213f4:	b	208c0 <__assert_fail@plt+0xed1c>
   213f8:	ldr	r3, [sp, #44]	; 0x2c
   213fc:	cmp	r3, #0
   21400:	bne	217bc <__assert_fail@plt+0xfc18>
   21404:	mov	r6, #0
   21408:	mov	r5, #63	; 0x3f
   2140c:	str	r3, [sp, #40]	; 0x28
   21410:	mov	r3, fp
   21414:	b	208c0 <__assert_fail@plt+0xed1c>
   21418:	mov	r2, #0
   2141c:	mov	r3, #0
   21420:	cmn	r8, #1
   21424:	strd	r2, [sp, #128]	; 0x80
   21428:	bne	21438 <__assert_fail@plt+0xf894>
   2142c:	ldr	r0, [sp, #28]
   21430:	bl	11988 <strlen@plt>
   21434:	mov	r8, r0
   21438:	str	r9, [sp, #100]	; 0x64
   2143c:	mov	r3, #0
   21440:	strd	sl, [sp, #104]	; 0x68
   21444:	ldr	sl, [sp, #28]
   21448:	str	r5, [sp, #112]	; 0x70
   2144c:	mov	r5, r3
   21450:	ldr	r9, [sp, #68]	; 0x44
   21454:	str	r4, [sp, #116]	; 0x74
   21458:	add	r4, r7, r5
   2145c:	add	r3, sp, #128	; 0x80
   21460:	add	fp, sl, r4
   21464:	sub	r2, r8, r4
   21468:	mov	r1, fp
   2146c:	add	r0, sp, #124	; 0x7c
   21470:	bl	1ec1c <__assert_fail@plt+0xd078>
   21474:	subs	r1, r0, #0
   21478:	beq	214b8 <__assert_fail@plt+0xf914>
   2147c:	cmn	r1, #1
   21480:	beq	21810 <__assert_fail@plt+0xfc6c>
   21484:	cmn	r1, #2
   21488:	beq	21830 <__assert_fail@plt+0xfc8c>
   2148c:	cmp	r9, #0
   21490:	bne	214e8 <__assert_fail@plt+0xf944>
   21494:	ldr	r0, [sp, #124]	; 0x7c
   21498:	add	r5, r5, r1
   2149c:	bl	11838 <iswprint@plt>
   214a0:	cmp	r0, #0
   214a4:	add	r0, sp, #128	; 0x80
   214a8:	moveq	r6, #0
   214ac:	bl	117b4 <mbsinit@plt>
   214b0:	cmp	r0, #0
   214b4:	beq	21458 <__assert_fail@plt+0xf8b4>
   214b8:	ldr	r3, [sp, #60]	; 0x3c
   214bc:	add	r9, sp, #100	; 0x64
   214c0:	mov	r0, r5
   214c4:	ldm	r9, {r9, sl, fp}
   214c8:	eor	r2, r6, #1
   214cc:	ldr	r5, [sp, #112]	; 0x70
   214d0:	and	r2, r2, r3
   214d4:	uxtb	r2, r2
   214d8:	ldr	r4, [sp, #116]	; 0x74
   214dc:	cmp	r0, #1
   214e0:	bhi	20ffc <__assert_fail@plt+0xf458>
   214e4:	b	20fec <__assert_fail@plt+0xf448>
   214e8:	cmp	r1, #1
   214ec:	beq	21494 <__assert_fail@plt+0xf8f0>
   214f0:	add	r2, r4, #1
   214f4:	add	r3, sl, r1
   214f8:	add	r2, sl, r2
   214fc:	add	r4, r3, r4
   21500:	ldrb	r3, [r2], #1
   21504:	sub	r3, r3, #91	; 0x5b
   21508:	cmp	r3, #33	; 0x21
   2150c:	ldrls	pc, [pc, r3, lsl #2]
   21510:	b	2159c <__assert_fail@plt+0xf9f8>
   21514:	andeq	r1, r2, r8, lsr #11
   21518:	andeq	r1, r2, r8, lsr #11
   2151c:	muleq	r2, ip, r5
   21520:	andeq	r1, r2, r8, lsr #11
   21524:	muleq	r2, ip, r5
   21528:	andeq	r1, r2, r8, lsr #11
   2152c:	muleq	r2, ip, r5
   21530:	muleq	r2, ip, r5
   21534:	muleq	r2, ip, r5
   21538:	muleq	r2, ip, r5
   2153c:	muleq	r2, ip, r5
   21540:	muleq	r2, ip, r5
   21544:	muleq	r2, ip, r5
   21548:	muleq	r2, ip, r5
   2154c:	muleq	r2, ip, r5
   21550:	muleq	r2, ip, r5
   21554:	muleq	r2, ip, r5
   21558:	muleq	r2, ip, r5
   2155c:	muleq	r2, ip, r5
   21560:	muleq	r2, ip, r5
   21564:	muleq	r2, ip, r5
   21568:	muleq	r2, ip, r5
   2156c:	muleq	r2, ip, r5
   21570:	muleq	r2, ip, r5
   21574:	muleq	r2, ip, r5
   21578:	muleq	r2, ip, r5
   2157c:	muleq	r2, ip, r5
   21580:	muleq	r2, ip, r5
   21584:	muleq	r2, ip, r5
   21588:	muleq	r2, ip, r5
   2158c:	muleq	r2, ip, r5
   21590:	muleq	r2, ip, r5
   21594:	muleq	r2, ip, r5
   21598:	andeq	r1, r2, r8, lsr #11
   2159c:	cmp	r4, r2
   215a0:	bne	21500 <__assert_fail@plt+0xf95c>
   215a4:	b	21494 <__assert_fail@plt+0xf8f0>
   215a8:	mov	r3, #2
   215ac:	ldr	fp, [sp, #100]	; 0x64
   215b0:	str	r3, [sp, #176]	; 0xb0
   215b4:	ldr	sl, [sp, #104]	; 0x68
   215b8:	b	20a7c <__assert_fail@plt+0xeed8>
   215bc:	ldr	r2, [sp, #52]	; 0x34
   215c0:	mov	fp, r9
   215c4:	ldr	r3, [sp, #60]	; 0x3c
   215c8:	and	r3, r3, r2
   215cc:	str	r3, [sp, #60]	; 0x3c
   215d0:	b	20a7c <__assert_fail@plt+0xeed8>
   215d4:	cmp	sl, r4
   215d8:	movhi	r2, fp
   215dc:	bhi	20954 <__assert_fail@plt+0xedb0>
   215e0:	mov	r2, r4
   215e4:	b	20964 <__assert_fail@plt+0xedc0>
   215e8:	mov	r6, r3
   215ec:	mov	r5, #63	; 0x3f
   215f0:	b	20a24 <__assert_fail@plt+0xee80>
   215f4:	ldr	r8, [sp, #36]	; 0x24
   215f8:	ldr	r6, [sp, #100]	; 0x64
   215fc:	b	208d0 <__assert_fail@plt+0xed2c>
   21600:	mov	fp, r9
   21604:	ldr	r8, [sp, #36]	; 0x24
   21608:	ldr	r3, [sp, #52]	; 0x34
   2160c:	str	r3, [sp, #60]	; 0x3c
   21610:	b	20a7c <__assert_fail@plt+0xeed8>
   21614:	ldr	r8, [sp, #36]	; 0x24
   21618:	ldr	r6, [sp, #100]	; 0x64
   2161c:	b	20768 <__assert_fail@plt+0xebc4>
   21620:	mov	r3, #0
   21624:	add	r4, r4, #4
   21628:	mov	fp, r2
   2162c:	mov	r6, r3
   21630:	mov	r5, #48	; 0x30
   21634:	b	208c0 <__assert_fail@plt+0xed1c>
   21638:	mov	r6, r3
   2163c:	b	210bc <__assert_fail@plt+0xf518>
   21640:	mov	r3, #1
   21644:	movw	r2, #50052	; 0xc384
   21648:	movt	r2, #3
   2164c:	mov	r4, r3
   21650:	mov	r9, sl
   21654:	str	r3, [sp, #32]
   21658:	str	sl, [sp, #44]	; 0x2c
   2165c:	str	r3, [sp, #48]	; 0x30
   21660:	str	sl, [sp, #52]	; 0x34
   21664:	str	r3, [sp, #56]	; 0x38
   21668:	str	r3, [sp, #60]	; 0x3c
   2166c:	str	sl, [sp, #64]	; 0x40
   21670:	str	sl, [sp, #68]	; 0x44
   21674:	str	r2, [sp, #72]	; 0x48
   21678:	str	sl, [sp, #80]	; 0x50
   2167c:	str	sl, [sp, #84]	; 0x54
   21680:	str	sl, [sp, #88]	; 0x58
   21684:	b	20174 <__assert_fail@plt+0xe5d0>
   21688:	mov	r3, #0
   2168c:	mov	r5, #48	; 0x30
   21690:	mov	r6, r3
   21694:	b	208c0 <__assert_fail@plt+0xed1c>
   21698:	cmp	sl, r4
   2169c:	mov	r5, #48	; 0x30
   216a0:	movhi	r3, #48	; 0x30
   216a4:	strbhi	r3, [r9, r4]
   216a8:	add	r3, r2, #2
   216ac:	add	r4, r2, #3
   216b0:	cmp	sl, r3
   216b4:	movhi	r1, #48	; 0x30
   216b8:	strbhi	r1, [r9, r3]
   216bc:	mov	r3, #0
   216c0:	b	2099c <__assert_fail@plt+0xedf8>
   216c4:	ldr	r3, [sp, #48]	; 0x30
   216c8:	str	r3, [sp, #40]	; 0x28
   216cc:	b	20fa8 <__assert_fail@plt+0xf404>
   216d0:	ldr	r2, [sp, #28]
   216d4:	ldrb	r2, [r2, r3]
   216d8:	sub	r1, r2, #33	; 0x21
   216dc:	cmp	r1, #29
   216e0:	ldrls	pc, [pc, r1, lsl #2]
   216e4:	b	20a20 <__assert_fail@plt+0xee7c>
   216e8:	andeq	r1, r2, r0, ror #14
   216ec:	andeq	r0, r2, r0, lsr #20
   216f0:	andeq	r0, r2, r0, lsr #20
   216f4:	andeq	r0, r2, r0, lsr #20
   216f8:	andeq	r0, r2, r0, lsr #20
   216fc:	andeq	r0, r2, r0, lsr #20
   21700:	andeq	r1, r2, r0, ror #14
   21704:	andeq	r1, r2, r0, ror #14
   21708:	andeq	r1, r2, r0, ror #14
   2170c:	andeq	r0, r2, r0, lsr #20
   21710:	andeq	r0, r2, r0, lsr #20
   21714:	andeq	r0, r2, r0, lsr #20
   21718:	andeq	r1, r2, r0, ror #14
   2171c:	andeq	r0, r2, r0, lsr #20
   21720:	andeq	r1, r2, r0, ror #14
   21724:	andeq	r0, r2, r0, lsr #20
   21728:	andeq	r0, r2, r0, lsr #20
   2172c:	andeq	r0, r2, r0, lsr #20
   21730:	andeq	r0, r2, r0, lsr #20
   21734:	andeq	r0, r2, r0, lsr #20
   21738:	andeq	r0, r2, r0, lsr #20
   2173c:	andeq	r0, r2, r0, lsr #20
   21740:	andeq	r0, r2, r0, lsr #20
   21744:	andeq	r0, r2, r0, lsr #20
   21748:	andeq	r0, r2, r0, lsr #20
   2174c:	andeq	r0, r2, r0, lsr #20
   21750:	andeq	r0, r2, r0, lsr #20
   21754:	andeq	r1, r2, r0, ror #14
   21758:	andeq	r1, r2, r0, ror #14
   2175c:	andeq	r1, r2, r0, ror #14
   21760:	ldr	r1, [sp, #44]	; 0x2c
   21764:	cmp	r1, #0
   21768:	bne	219c8 <__assert_fail@plt+0xfe24>
   2176c:	cmp	sl, r4
   21770:	mov	r7, r3
   21774:	movhi	r1, #63	; 0x3f
   21778:	mov	r5, r2
   2177c:	mov	r3, fp
   21780:	strbhi	r1, [r9, r4]
   21784:	add	r1, r4, #1
   21788:	cmp	sl, r1
   2178c:	movhi	r0, #34	; 0x22
   21790:	strbhi	r0, [r9, r1]
   21794:	add	r1, r4, #2
   21798:	cmp	sl, r1
   2179c:	movhi	r0, #34	; 0x22
   217a0:	strbhi	r0, [r9, r1]
   217a4:	add	r1, r4, #3
   217a8:	add	r4, r4, #4
   217ac:	cmp	sl, r1
   217b0:	movhi	r0, #63	; 0x3f
   217b4:	strbhi	r0, [r9, r1]
   217b8:	b	2099c <__assert_fail@plt+0xedf8>
   217bc:	mov	fp, r9
   217c0:	b	20a7c <__assert_fail@plt+0xeed8>
   217c4:	ldr	r3, [sp, #188]	; 0xbc
   217c8:	ldrb	r3, [r3]
   217cc:	cmp	r3, #0
   217d0:	beq	2010c <__assert_fail@plt+0xe568>
   217d4:	ldr	r2, [sp, #188]	; 0xbc
   217d8:	cmp	sl, r4
   217dc:	bls	217fc <__assert_fail@plt+0xfc58>
   217e0:	strb	r3, [fp, r4]
   217e4:	add	r4, r4, #1
   217e8:	ldrb	r3, [r2, #1]!
   217ec:	cmp	r3, #0
   217f0:	beq	2010c <__assert_fail@plt+0xe568>
   217f4:	cmp	sl, r4
   217f8:	bhi	217e0 <__assert_fail@plt+0xfc3c>
   217fc:	ldrb	r3, [r2, #1]!
   21800:	add	r4, r4, #1
   21804:	cmp	r3, #0
   21808:	bne	217d8 <__assert_fail@plt+0xfc34>
   2180c:	b	2010c <__assert_fail@plt+0xe568>
   21810:	add	r9, sp, #100	; 0x64
   21814:	mov	r0, r5
   21818:	ldr	r2, [sp, #60]	; 0x3c
   2181c:	mov	r6, #0
   21820:	ldm	r9, {r9, sl, fp}
   21824:	ldr	r5, [sp, #112]	; 0x70
   21828:	ldr	r4, [sp, #116]	; 0x74
   2182c:	b	214dc <__assert_fail@plt+0xf938>
   21830:	cmp	r4, r8
   21834:	add	r9, sp, #100	; 0x64
   21838:	mov	r1, r4
   2183c:	mov	r2, fp
   21840:	ldm	r9, {r9, sl, fp}
   21844:	mov	r3, r5
   21848:	mov	r0, r5
   2184c:	ldr	r5, [sp, #112]	; 0x70
   21850:	ldr	r4, [sp, #116]	; 0x74
   21854:	bcs	21888 <__assert_fail@plt+0xfce4>
   21858:	ldrb	r6, [r2]
   2185c:	cmp	r6, #0
   21860:	bne	21874 <__assert_fail@plt+0xfcd0>
   21864:	b	219c0 <__assert_fail@plt+0xfe1c>
   21868:	ldrb	r6, [r2, #1]!
   2186c:	cmp	r6, #0
   21870:	beq	21958 <__assert_fail@plt+0xfdb4>
   21874:	add	r3, r3, #1
   21878:	add	r1, r7, r3
   2187c:	cmp	r8, r1
   21880:	bhi	21868 <__assert_fail@plt+0xfcc4>
   21884:	mov	r0, r3
   21888:	mov	r6, #0
   2188c:	ldr	r2, [sp, #60]	; 0x3c
   21890:	b	214dc <__assert_fail@plt+0xf938>
   21894:	mov	r3, #1
   21898:	mov	r4, #0
   2189c:	mov	r9, r4
   218a0:	str	r3, [sp, #32]
   218a4:	str	r3, [sp, #44]	; 0x2c
   218a8:	str	r3, [sp, #48]	; 0x30
   218ac:	str	r4, [sp, #52]	; 0x34
   218b0:	str	r3, [sp, #56]	; 0x38
   218b4:	str	r3, [sp, #60]	; 0x3c
   218b8:	str	r3, [sp, #88]	; 0x58
   218bc:	movw	r3, #50052	; 0xc384
   218c0:	movt	r3, #3
   218c4:	str	r4, [sp, #64]	; 0x40
   218c8:	str	r4, [sp, #68]	; 0x44
   218cc:	str	r3, [sp, #72]	; 0x48
   218d0:	str	r4, [sp, #80]	; 0x50
   218d4:	str	r4, [sp, #84]	; 0x54
   218d8:	b	20174 <__assert_fail@plt+0xe5d0>
   218dc:	mov	fp, r9
   218e0:	b	20a90 <__assert_fail@plt+0xeeec>
   218e4:	ldr	r3, [sp, #48]	; 0x30
   218e8:	b	21404 <__assert_fail@plt+0xf860>
   218ec:	mov	r2, r3
   218f0:	ldr	r3, [sp, #72]	; 0x48
   218f4:	cmp	r3, #0
   218f8:	moveq	r2, #0
   218fc:	andne	r2, r2, #1
   21900:	cmp	r2, #0
   21904:	beq	21934 <__assert_fail@plt+0xfd90>
   21908:	mov	r2, r3
   2190c:	ldrb	r3, [r3]
   21910:	cmp	r3, #0
   21914:	beq	21934 <__assert_fail@plt+0xfd90>
   21918:	cmp	sl, r4
   2191c:	bls	21944 <__assert_fail@plt+0xfda0>
   21920:	strb	r3, [fp, r4]
   21924:	add	r4, r4, #1
   21928:	ldrb	r3, [r2, #1]!
   2192c:	cmp	r3, #0
   21930:	bne	21918 <__assert_fail@plt+0xfd74>
   21934:	cmp	sl, r4
   21938:	movhi	r3, #0
   2193c:	strbhi	r3, [fp, r4]
   21940:	b	20acc <__assert_fail@plt+0xef28>
   21944:	ldrb	r3, [r2, #1]!
   21948:	add	r4, r4, #1
   2194c:	cmp	r3, #0
   21950:	bne	21918 <__assert_fail@plt+0xfd74>
   21954:	b	21934 <__assert_fail@plt+0xfd90>
   21958:	mov	r0, r3
   2195c:	ldr	r2, [sp, #60]	; 0x3c
   21960:	b	214dc <__assert_fail@plt+0xf938>
   21964:	mov	ip, #5
   21968:	mov	r3, r8
   2196c:	ldr	r1, [sp, #84]	; 0x54
   21970:	str	ip, [sp]
   21974:	ldr	r2, [sp, #180]	; 0xb4
   21978:	ldr	ip, [sp, #188]	; 0xbc
   2197c:	ldr	r0, [sp, #184]	; 0xb8
   21980:	str	r2, [sp, #4]
   21984:	ldr	r2, [sp, #28]
   21988:	str	ip, [sp, #12]
   2198c:	ldr	ip, [sp, #192]	; 0xc0
   21990:	str	r0, [sp, #8]
   21994:	mov	r0, fp
   21998:	str	ip, [sp, #16]
   2199c:	bl	20050 <__assert_fail@plt+0xe4ac>
   219a0:	mov	r4, r0
   219a4:	b	20acc <__assert_fail@plt+0xef28>
   219a8:	mov	r6, r3
   219ac:	str	r3, [sp, #40]	; 0x28
   219b0:	b	20a3c <__assert_fail@plt+0xee98>
   219b4:	mov	r3, #2
   219b8:	str	r3, [sp, #176]	; 0xb0
   219bc:	b	20a7c <__assert_fail@plt+0xeed8>
   219c0:	ldr	r2, [sp, #60]	; 0x3c
   219c4:	b	214dc <__assert_fail@plt+0xf938>
   219c8:	mov	r3, #5
   219cc:	mov	fp, r9
   219d0:	str	r3, [sp, #176]	; 0xb0
   219d4:	b	20a90 <__assert_fail@plt+0xeeec>
   219d8:	mov	r1, #1
   219dc:	mov	r9, #0
   219e0:	mov	r3, r9
   219e4:	mov	r2, r9
   219e8:	str	r1, [sp, #32]
   219ec:	str	sl, [sp, #84]	; 0x54
   219f0:	b	20818 <__assert_fail@plt+0xec74>
   219f4:	mov	r3, #0
   219f8:	mov	r2, #1
   219fc:	mov	r9, r3
   21a00:	mov	r4, r3
   21a04:	str	r2, [sp, #32]
   21a08:	strd	r2, [sp, #44]	; 0x2c
   21a0c:	strd	r2, [sp, #56]	; 0x38
   21a10:	str	r3, [sp, #80]	; 0x50
   21a14:	str	r3, [sp, #84]	; 0x54
   21a18:	str	r3, [sp, #88]	; 0x58
   21a1c:	movw	r3, #47544	; 0xb9b8
   21a20:	movt	r3, #3
   21a24:	str	r2, [sp, #52]	; 0x34
   21a28:	str	r2, [sp, #64]	; 0x40
   21a2c:	str	r2, [sp, #68]	; 0x44
   21a30:	str	r3, [sp, #72]	; 0x48
   21a34:	b	20174 <__assert_fail@plt+0xe5d0>
   21a38:	bl	11b68 <abort@plt>
   21a3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21a40:	mov	r4, r0
   21a44:	mov	r5, r3
   21a48:	strd	r6, [sp, #8]
   21a4c:	movw	r7, #53724	; 0xd1dc
   21a50:	movt	r7, #4
   21a54:	strd	r8, [sp, #16]
   21a58:	strd	sl, [sp, #24]
   21a5c:	mov	sl, r1
   21a60:	mov	fp, r2
   21a64:	str	lr, [sp, #32]
   21a68:	sub	sp, sp, #60	; 0x3c
   21a6c:	bl	119b8 <__errno_location@plt>
   21a70:	mov	r8, r0
   21a74:	cmn	r4, #-2147483647	; 0x80000001
   21a78:	ldr	r6, [r7]
   21a7c:	movne	r0, #0
   21a80:	moveq	r0, #1
   21a84:	ldr	r3, [r8]
   21a88:	orrs	r0, r0, r4, lsr #31
   21a8c:	str	r3, [sp, #28]
   21a90:	bne	21c20 <__assert_fail@plt+0x1007c>
   21a94:	ldr	r3, [r7, #4]
   21a98:	cmp	r3, r4
   21a9c:	bgt	21afc <__assert_fail@plt+0xff58>
   21aa0:	add	r1, r7, #8
   21aa4:	sub	r2, r4, r3
   21aa8:	str	r3, [sp, #52]	; 0x34
   21aac:	cmp	r6, r1
   21ab0:	add	r2, r2, #1
   21ab4:	beq	21bf8 <__assert_fail@plt+0x10054>
   21ab8:	mov	r1, #8
   21abc:	mov	r0, r6
   21ac0:	mvn	r3, #-2147483648	; 0x80000000
   21ac4:	str	r1, [sp]
   21ac8:	add	r1, sp, #52	; 0x34
   21acc:	bl	36dc4 <__assert_fail@plt+0x25220>
   21ad0:	mov	r6, r0
   21ad4:	str	r0, [r7]
   21ad8:	ldr	r0, [r7, #4]
   21adc:	mov	r1, #0
   21ae0:	ldr	r2, [sp, #52]	; 0x34
   21ae4:	sub	r2, r2, r0
   21ae8:	add	r0, r6, r0, lsl #3
   21aec:	lsl	r2, r2, #3
   21af0:	bl	119e8 <memset@plt>
   21af4:	ldr	r3, [sp, #52]	; 0x34
   21af8:	str	r3, [r7, #4]
   21afc:	ldr	r1, [r5, #4]
   21b00:	add	r0, r6, r4, lsl #3
   21b04:	add	ip, r5, #8
   21b08:	mov	r3, fp
   21b0c:	mov	r2, sl
   21b10:	ldr	r7, [r0, #4]
   21b14:	str	r0, [sp, #36]	; 0x24
   21b18:	str	ip, [sp, #40]	; 0x28
   21b1c:	orr	r0, r1, #1
   21b20:	ldr	r9, [r6, r4, lsl #3]
   21b24:	str	ip, [sp, #8]
   21b28:	ldr	lr, [r5, #44]	; 0x2c
   21b2c:	str	r0, [sp, #4]
   21b30:	ldr	ip, [r5]
   21b34:	mov	r1, r9
   21b38:	str	ip, [sp, #32]
   21b3c:	ldr	ip, [r5, #40]	; 0x28
   21b40:	str	ip, [sp, #12]
   21b44:	ldr	ip, [sp, #32]
   21b48:	str	lr, [sp, #16]
   21b4c:	str	r0, [sp, #44]	; 0x2c
   21b50:	mov	r0, r7
   21b54:	str	ip, [sp]
   21b58:	bl	20050 <__assert_fail@plt+0xe4ac>
   21b5c:	cmp	r9, r0
   21b60:	bhi	21bd0 <__assert_fail@plt+0x1002c>
   21b64:	add	r9, r0, #1
   21b68:	movw	r3, #53964	; 0xd2cc
   21b6c:	movt	r3, #4
   21b70:	cmp	r7, r3
   21b74:	str	r9, [r6, r4, lsl #3]
   21b78:	beq	21b84 <__assert_fail@plt+0xffe0>
   21b7c:	mov	r0, r7
   21b80:	bl	19610 <__assert_fail@plt+0x7a6c>
   21b84:	mov	r0, r9
   21b88:	bl	36b20 <__assert_fail@plt+0x24f7c>
   21b8c:	ldr	ip, [r5]
   21b90:	mov	r3, fp
   21b94:	mov	r2, sl
   21b98:	mov	r1, r9
   21b9c:	mov	r7, r0
   21ba0:	ldr	lr, [sp, #36]	; 0x24
   21ba4:	ldr	r4, [r5, #40]	; 0x28
   21ba8:	str	r0, [lr, #4]
   21bac:	ldr	lr, [r5, #44]	; 0x2c
   21bb0:	str	ip, [sp]
   21bb4:	ldr	ip, [sp, #44]	; 0x2c
   21bb8:	str	ip, [sp, #4]
   21bbc:	ldr	ip, [sp, #40]	; 0x28
   21bc0:	str	r4, [sp, #12]
   21bc4:	str	lr, [sp, #16]
   21bc8:	str	ip, [sp, #8]
   21bcc:	bl	20050 <__assert_fail@plt+0xe4ac>
   21bd0:	ldr	r3, [sp, #28]
   21bd4:	mov	r0, r7
   21bd8:	str	r3, [r8]
   21bdc:	add	sp, sp, #60	; 0x3c
   21be0:	ldrd	r4, [sp]
   21be4:	ldrd	r6, [sp, #8]
   21be8:	ldrd	r8, [sp, #16]
   21bec:	ldrd	sl, [sp, #24]
   21bf0:	add	sp, sp, #32
   21bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   21bf8:	mov	r1, #8
   21bfc:	mvn	r3, #-2147483648	; 0x80000000
   21c00:	str	r1, [sp]
   21c04:	add	r1, sp, #52	; 0x34
   21c08:	bl	36dc4 <__assert_fail@plt+0x25220>
   21c0c:	ldrd	r2, [r7, #8]
   21c10:	mov	r6, r0
   21c14:	str	r0, [r7]
   21c18:	strd	r2, [r0]
   21c1c:	b	21ad8 <__assert_fail@plt+0xff34>
   21c20:	bl	11b68 <abort@plt>
   21c24:	strd	r4, [sp, #-16]!
   21c28:	mov	r5, r0
   21c2c:	str	r6, [sp, #8]
   21c30:	str	lr, [sp, #12]
   21c34:	bl	119b8 <__errno_location@plt>
   21c38:	mov	r4, r0
   21c3c:	cmp	r5, #0
   21c40:	ldr	r0, [pc, #32]	; 21c68 <__assert_fail@plt+0x100c4>
   21c44:	mov	r1, #48	; 0x30
   21c48:	movne	r0, r5
   21c4c:	ldr	r6, [r4]
   21c50:	bl	36f64 <__assert_fail@plt+0x253c0>
   21c54:	str	r6, [r4]
   21c58:	ldrd	r4, [sp]
   21c5c:	ldr	r6, [sp, #8]
   21c60:	add	sp, sp, #12
   21c64:	pop	{pc}		; (ldr pc, [sp], #4)
   21c68:	andeq	sp, r4, ip, asr #7
   21c6c:	ldr	r3, [pc, #12]	; 21c80 <__assert_fail@plt+0x100dc>
   21c70:	cmp	r0, #0
   21c74:	moveq	r0, r3
   21c78:	ldr	r0, [r0]
   21c7c:	bx	lr
   21c80:	andeq	sp, r4, ip, asr #7
   21c84:	ldr	r3, [pc, #12]	; 21c98 <__assert_fail@plt+0x100f4>
   21c88:	cmp	r0, #0
   21c8c:	moveq	r0, r3
   21c90:	str	r1, [r0]
   21c94:	bx	lr
   21c98:	andeq	sp, r4, ip, asr #7
   21c9c:	ldr	r3, [pc, #52]	; 21cd8 <__assert_fail@plt+0x10134>
   21ca0:	cmp	r0, #0
   21ca4:	push	{lr}		; (str lr, [sp, #-4]!)
   21ca8:	lsr	lr, r1, #5
   21cac:	and	r1, r1, #31
   21cb0:	moveq	r0, r3
   21cb4:	add	r3, r0, #8
   21cb8:	ldr	ip, [r3, lr, lsl #2]
   21cbc:	lsr	r0, ip, r1
   21cc0:	eor	r2, r2, r0
   21cc4:	and	r0, r0, #1
   21cc8:	and	r2, r2, #1
   21ccc:	eor	r1, ip, r2, lsl r1
   21cd0:	str	r1, [r3, lr, lsl #2]
   21cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   21cd8:	andeq	sp, r4, ip, asr #7
   21cdc:	ldr	r3, [pc, #16]	; 21cf4 <__assert_fail@plt+0x10150>
   21ce0:	cmp	r0, #0
   21ce4:	movne	r3, r0
   21ce8:	ldr	r0, [r3, #4]
   21cec:	str	r1, [r3, #4]
   21cf0:	bx	lr
   21cf4:	andeq	sp, r4, ip, asr #7
   21cf8:	ldr	r3, [pc, #48]	; 21d30 <__assert_fail@plt+0x1018c>
   21cfc:	cmp	r0, #0
   21d00:	mov	ip, #10
   21d04:	moveq	r0, r3
   21d08:	cmp	r2, #0
   21d0c:	cmpne	r1, #0
   21d10:	str	ip, [r0]
   21d14:	beq	21d24 <__assert_fail@plt+0x10180>
   21d18:	str	r1, [r0, #40]	; 0x28
   21d1c:	str	r2, [r0, #44]	; 0x2c
   21d20:	bx	lr
   21d24:	str	r4, [sp, #-8]!
   21d28:	str	lr, [sp, #4]
   21d2c:	bl	11b68 <abort@plt>
   21d30:	andeq	sp, r4, ip, asr #7
   21d34:	strd	r4, [sp, #-28]!	; 0xffffffe4
   21d38:	strd	r6, [sp, #8]
   21d3c:	mov	r7, r0
   21d40:	mov	r6, r1
   21d44:	strd	r8, [sp, #16]
   21d48:	mov	r8, r2
   21d4c:	mov	r9, r3
   21d50:	str	lr, [sp, #24]
   21d54:	sub	sp, sp, #28
   21d58:	ldr	r4, [sp, #56]	; 0x38
   21d5c:	ldr	ip, [pc, #104]	; 21dcc <__assert_fail@plt+0x10228>
   21d60:	cmp	r4, #0
   21d64:	moveq	r4, ip
   21d68:	bl	119b8 <__errno_location@plt>
   21d6c:	ldr	ip, [r4, #44]	; 0x2c
   21d70:	mov	r5, r0
   21d74:	mov	r1, r6
   21d78:	add	lr, r4, #8
   21d7c:	mov	r3, r9
   21d80:	ldr	r6, [r5]
   21d84:	mov	r2, r8
   21d88:	mov	r0, r7
   21d8c:	str	ip, [sp, #16]
   21d90:	ldr	ip, [r4, #40]	; 0x28
   21d94:	str	lr, [sp, #8]
   21d98:	str	ip, [sp, #12]
   21d9c:	ldr	ip, [r4, #4]
   21da0:	str	ip, [sp, #4]
   21da4:	ldr	ip, [r4]
   21da8:	str	ip, [sp]
   21dac:	bl	20050 <__assert_fail@plt+0xe4ac>
   21db0:	str	r6, [r5]
   21db4:	add	sp, sp, #28
   21db8:	ldrd	r4, [sp]
   21dbc:	ldrd	r6, [sp, #8]
   21dc0:	ldrd	r8, [sp, #16]
   21dc4:	add	sp, sp, #24
   21dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   21dcc:	andeq	sp, r4, ip, asr #7
   21dd0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21dd4:	cmp	r2, #0
   21dd8:	ldr	r4, [pc, #192]	; 21ea0 <__assert_fail@plt+0x102fc>
   21ddc:	movne	r4, r2
   21de0:	strd	r6, [sp, #8]
   21de4:	strd	r8, [sp, #16]
   21de8:	mov	r9, r1
   21dec:	mov	r8, r0
   21df0:	strd	sl, [sp, #24]
   21df4:	str	lr, [sp, #32]
   21df8:	sub	sp, sp, #36	; 0x24
   21dfc:	bl	119b8 <__errno_location@plt>
   21e00:	ldr	r5, [r4, #4]
   21e04:	mov	r6, r0
   21e08:	add	r7, r4, #8
   21e0c:	mov	r1, #0
   21e10:	mov	r3, r9
   21e14:	ldr	ip, [r4, #44]	; 0x2c
   21e18:	mov	r2, r8
   21e1c:	mov	r0, r1
   21e20:	ldr	sl, [r6]
   21e24:	orr	r5, r5, #1
   21e28:	str	ip, [sp, #16]
   21e2c:	ldr	ip, [r4, #40]	; 0x28
   21e30:	stmib	sp, {r5, r7, ip}
   21e34:	ldr	ip, [r4]
   21e38:	str	ip, [sp]
   21e3c:	bl	20050 <__assert_fail@plt+0xe4ac>
   21e40:	add	r1, r0, #1
   21e44:	mov	r0, r1
   21e48:	str	r1, [sp, #28]
   21e4c:	bl	36b20 <__assert_fail@plt+0x24f7c>
   21e50:	ldr	ip, [r4, #44]	; 0x2c
   21e54:	mov	fp, r0
   21e58:	mov	r3, r9
   21e5c:	mov	r2, r8
   21e60:	ldr	r1, [sp, #28]
   21e64:	str	ip, [sp, #16]
   21e68:	ldr	ip, [r4, #40]	; 0x28
   21e6c:	stmib	sp, {r5, r7, ip}
   21e70:	ldr	ip, [r4]
   21e74:	str	ip, [sp]
   21e78:	bl	20050 <__assert_fail@plt+0xe4ac>
   21e7c:	mov	r0, fp
   21e80:	str	sl, [r6]
   21e84:	add	sp, sp, #36	; 0x24
   21e88:	ldrd	r4, [sp]
   21e8c:	ldrd	r6, [sp, #8]
   21e90:	ldrd	r8, [sp, #16]
   21e94:	ldrd	sl, [sp, #24]
   21e98:	add	sp, sp, #32
   21e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   21ea0:	andeq	sp, r4, ip, asr #7
   21ea4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21ea8:	cmp	r3, #0
   21eac:	ldr	r4, [pc, #220]	; 21f90 <__assert_fail@plt+0x103ec>
   21eb0:	movne	r4, r3
   21eb4:	strd	r6, [sp, #8]
   21eb8:	mov	r6, r2
   21ebc:	strd	r8, [sp, #16]
   21ec0:	mov	r9, r0
   21ec4:	strd	sl, [sp, #24]
   21ec8:	mov	sl, r1
   21ecc:	str	lr, [sp, #32]
   21ed0:	sub	sp, sp, #44	; 0x2c
   21ed4:	bl	119b8 <__errno_location@plt>
   21ed8:	ldr	r5, [r4, #4]
   21edc:	mov	r7, r0
   21ee0:	mov	r1, #0
   21ee4:	add	r8, r4, #8
   21ee8:	mov	r3, sl
   21eec:	ldr	ip, [r4, #44]	; 0x2c
   21ef0:	mov	r2, r9
   21ef4:	mov	r0, r1
   21ef8:	ldr	lr, [r7]
   21efc:	cmp	r6, r1
   21f00:	orreq	r5, r5, #1
   21f04:	str	ip, [sp, #16]
   21f08:	ldr	ip, [r4, #40]	; 0x28
   21f0c:	stmib	sp, {r5, r8, ip}
   21f10:	ldr	ip, [r4]
   21f14:	str	lr, [sp, #28]
   21f18:	str	ip, [sp]
   21f1c:	bl	20050 <__assert_fail@plt+0xe4ac>
   21f20:	add	r1, r0, #1
   21f24:	mov	fp, r0
   21f28:	mov	r0, r1
   21f2c:	str	r1, [sp, #36]	; 0x24
   21f30:	bl	36b20 <__assert_fail@plt+0x24f7c>
   21f34:	ldr	ip, [r4, #44]	; 0x2c
   21f38:	mov	r3, sl
   21f3c:	mov	r2, r9
   21f40:	ldr	r1, [sp, #36]	; 0x24
   21f44:	str	ip, [sp, #16]
   21f48:	ldr	ip, [r4, #40]	; 0x28
   21f4c:	str	r0, [sp, #32]
   21f50:	stmib	sp, {r5, r8, ip}
   21f54:	ldr	ip, [r4]
   21f58:	str	ip, [sp]
   21f5c:	bl	20050 <__assert_fail@plt+0xe4ac>
   21f60:	ldr	lr, [sp, #28]
   21f64:	cmp	r6, #0
   21f68:	ldr	r0, [sp, #32]
   21f6c:	str	lr, [r7]
   21f70:	strne	fp, [r6]
   21f74:	add	sp, sp, #44	; 0x2c
   21f78:	ldrd	r4, [sp]
   21f7c:	ldrd	r6, [sp, #8]
   21f80:	ldrd	r8, [sp, #16]
   21f84:	ldrd	sl, [sp, #24]
   21f88:	add	sp, sp, #32
   21f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   21f90:	andeq	sp, r4, ip, asr #7
   21f94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21f98:	movw	r5, #53724	; 0xd1dc
   21f9c:	movt	r5, #4
   21fa0:	ldr	r3, [r5, #4]
   21fa4:	strd	r6, [sp, #8]
   21fa8:	str	r8, [sp, #16]
   21fac:	str	lr, [sp, #20]
   21fb0:	ldr	r7, [r5]
   21fb4:	cmp	r3, #1
   21fb8:	ble	21fdc <__assert_fail@plt+0x10438>
   21fbc:	mov	r4, #1
   21fc0:	add	r6, r7, #4
   21fc4:	ldr	r0, [r6, r4, lsl #3]
   21fc8:	add	r4, r4, #1
   21fcc:	bl	19610 <__assert_fail@plt+0x7a6c>
   21fd0:	ldr	r3, [r5, #4]
   21fd4:	cmp	r3, r4
   21fd8:	bgt	21fc4 <__assert_fail@plt+0x10420>
   21fdc:	ldr	r0, [r7, #4]
   21fe0:	movw	r4, #53964	; 0xd2cc
   21fe4:	movt	r4, #4
   21fe8:	cmp	r0, r4
   21fec:	beq	22000 <__assert_fail@plt+0x1045c>
   21ff0:	bl	19610 <__assert_fail@plt+0x7a6c>
   21ff4:	mov	r3, #256	; 0x100
   21ff8:	str	r3, [r5, #8]
   21ffc:	str	r4, [r5, #12]
   22000:	ldr	r4, [pc, #44]	; 22034 <__assert_fail@plt+0x10490>
   22004:	cmp	r7, r4
   22008:	beq	22018 <__assert_fail@plt+0x10474>
   2200c:	mov	r0, r7
   22010:	bl	19610 <__assert_fail@plt+0x7a6c>
   22014:	str	r4, [r5]
   22018:	mov	r3, #1
   2201c:	ldrd	r6, [sp, #8]
   22020:	str	r3, [r5, #4]
   22024:	ldrd	r4, [sp]
   22028:	ldr	r8, [sp, #16]
   2202c:	add	sp, sp, #20
   22030:	pop	{pc}		; (ldr pc, [sp], #4)
   22034:	andeq	sp, r4, r4, ror #3
   22038:	ldr	r3, [pc, #4]	; 22044 <__assert_fail@plt+0x104a0>
   2203c:	mvn	r2, #0
   22040:	b	21a3c <__assert_fail@plt+0xfe98>
   22044:	andeq	sp, r4, ip, asr #7
   22048:	ldr	r3, [pc]	; 22050 <__assert_fail@plt+0x104ac>
   2204c:	b	21a3c <__assert_fail@plt+0xfe98>
   22050:	andeq	sp, r4, ip, asr #7
   22054:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22058:	movw	r4, #53724	; 0xd1dc
   2205c:	movt	r4, #4
   22060:	strd	r6, [sp, #8]
   22064:	strd	r8, [sp, #16]
   22068:	strd	sl, [sp, #24]
   2206c:	mov	sl, r0
   22070:	str	lr, [sp, #32]
   22074:	sub	sp, sp, #44	; 0x2c
   22078:	bl	119b8 <__errno_location@plt>
   2207c:	ldr	r3, [r0]
   22080:	mov	r8, r0
   22084:	ldr	r2, [r4, #4]
   22088:	ldr	r5, [r4]
   2208c:	str	r3, [sp, #28]
   22090:	cmp	r2, #0
   22094:	bgt	220f0 <__assert_fail@plt+0x1054c>
   22098:	add	r3, r4, #8
   2209c:	str	r2, [sp, #36]	; 0x24
   220a0:	rsb	r2, r2, #1
   220a4:	cmp	r5, r3
   220a8:	beq	221bc <__assert_fail@plt+0x10618>
   220ac:	mov	r1, #8
   220b0:	mov	r0, r5
   220b4:	mvn	r3, #-2147483648	; 0x80000000
   220b8:	str	r1, [sp]
   220bc:	add	r1, sp, #36	; 0x24
   220c0:	bl	36dc4 <__assert_fail@plt+0x25220>
   220c4:	mov	r5, r0
   220c8:	str	r0, [r4]
   220cc:	ldr	r0, [r4, #4]
   220d0:	mov	r1, #0
   220d4:	ldr	r2, [sp, #36]	; 0x24
   220d8:	sub	r2, r2, r0
   220dc:	add	r0, r5, r0, lsl #3
   220e0:	lsl	r2, r2, #3
   220e4:	bl	119e8 <memset@plt>
   220e8:	ldr	r3, [sp, #36]	; 0x24
   220ec:	str	r3, [r4, #4]
   220f0:	movw	r4, #53964	; 0xd2cc
   220f4:	movt	r4, #4
   220f8:	ldr	r9, [r5]
   220fc:	add	fp, r4, #264	; 0x108
   22100:	mvn	r3, #0
   22104:	ldr	r7, [r4, #260]	; 0x104
   22108:	mov	r2, sl
   2210c:	ldr	r6, [r5, #4]
   22110:	str	fp, [sp, #8]
   22114:	mov	r1, r9
   22118:	ldr	ip, [r4, #256]	; 0x100
   2211c:	orr	r7, r7, #1
   22120:	ldr	lr, [r4, #300]	; 0x12c
   22124:	mov	r0, r6
   22128:	str	ip, [sp]
   2212c:	str	r7, [sp, #4]
   22130:	str	lr, [sp, #16]
   22134:	ldr	ip, [r4, #296]	; 0x128
   22138:	str	ip, [sp, #12]
   2213c:	bl	20050 <__assert_fail@plt+0xe4ac>
   22140:	cmp	r9, r0
   22144:	bhi	22194 <__assert_fail@plt+0x105f0>
   22148:	add	r9, r0, #1
   2214c:	cmp	r6, r4
   22150:	str	r9, [r5]
   22154:	beq	22160 <__assert_fail@plt+0x105bc>
   22158:	mov	r0, r6
   2215c:	bl	19610 <__assert_fail@plt+0x7a6c>
   22160:	mov	r0, r9
   22164:	bl	36b20 <__assert_fail@plt+0x24f7c>
   22168:	ldr	r3, [r4, #256]	; 0x100
   2216c:	mov	r2, sl
   22170:	mov	r1, r9
   22174:	mov	r6, r0
   22178:	ldr	lr, [r4, #296]	; 0x128
   2217c:	ldr	ip, [r4, #300]	; 0x12c
   22180:	str	r0, [r5, #4]
   22184:	stm	sp, {r3, r7, fp, lr}
   22188:	mvn	r3, #0
   2218c:	str	ip, [sp, #16]
   22190:	bl	20050 <__assert_fail@plt+0xe4ac>
   22194:	ldr	r3, [sp, #28]
   22198:	mov	r0, r6
   2219c:	str	r3, [r8]
   221a0:	add	sp, sp, #44	; 0x2c
   221a4:	ldrd	r4, [sp]
   221a8:	ldrd	r6, [sp, #8]
   221ac:	ldrd	r8, [sp, #16]
   221b0:	ldrd	sl, [sp, #24]
   221b4:	add	sp, sp, #32
   221b8:	pop	{pc}		; (ldr pc, [sp], #4)
   221bc:	mov	r0, #8
   221c0:	mvn	r3, #-2147483648	; 0x80000000
   221c4:	add	r1, sp, #36	; 0x24
   221c8:	str	r0, [sp]
   221cc:	mov	r0, #0
   221d0:	bl	36dc4 <__assert_fail@plt+0x25220>
   221d4:	ldrd	r2, [r4, #8]
   221d8:	mov	r5, r0
   221dc:	str	r0, [r4]
   221e0:	strd	r2, [r0]
   221e4:	b	220cc <__assert_fail@plt+0x10528>
   221e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   221ec:	movw	r4, #53724	; 0xd1dc
   221f0:	movt	r4, #4
   221f4:	strd	r6, [sp, #8]
   221f8:	strd	r8, [sp, #16]
   221fc:	strd	sl, [sp, #24]
   22200:	mov	sl, r0
   22204:	mov	fp, r1
   22208:	str	lr, [sp, #32]
   2220c:	sub	sp, sp, #44	; 0x2c
   22210:	bl	119b8 <__errno_location@plt>
   22214:	ldr	r3, [r0]
   22218:	mov	r8, r0
   2221c:	ldr	r2, [r4, #4]
   22220:	ldr	r5, [r4]
   22224:	str	r3, [sp, #28]
   22228:	cmp	r2, #0
   2222c:	bgt	22288 <__assert_fail@plt+0x106e4>
   22230:	add	r3, r4, #8
   22234:	str	r2, [sp, #36]	; 0x24
   22238:	rsb	r2, r2, #1
   2223c:	cmp	r5, r3
   22240:	beq	22364 <__assert_fail@plt+0x107c0>
   22244:	mov	r1, #8
   22248:	mov	r0, r5
   2224c:	mvn	r3, #-2147483648	; 0x80000000
   22250:	str	r1, [sp]
   22254:	add	r1, sp, #36	; 0x24
   22258:	bl	36dc4 <__assert_fail@plt+0x25220>
   2225c:	mov	r5, r0
   22260:	str	r0, [r4]
   22264:	ldr	r0, [r4, #4]
   22268:	mov	r1, #0
   2226c:	ldr	r2, [sp, #36]	; 0x24
   22270:	sub	r2, r2, r0
   22274:	add	r0, r5, r0, lsl #3
   22278:	lsl	r2, r2, #3
   2227c:	bl	119e8 <memset@plt>
   22280:	ldr	r3, [sp, #36]	; 0x24
   22284:	str	r3, [r4, #4]
   22288:	movw	r4, #53964	; 0xd2cc
   2228c:	movt	r4, #4
   22290:	ldr	r9, [r5]
   22294:	add	r0, r4, #264	; 0x108
   22298:	mov	r3, fp
   2229c:	ldr	r7, [r4, #260]	; 0x104
   222a0:	mov	r2, sl
   222a4:	ldr	r6, [r5, #4]
   222a8:	str	r0, [sp, #8]
   222ac:	mov	r1, r9
   222b0:	ldr	ip, [r4, #256]	; 0x100
   222b4:	orr	r7, r7, #1
   222b8:	ldr	lr, [r4, #300]	; 0x12c
   222bc:	mov	r0, r6
   222c0:	str	ip, [sp]
   222c4:	str	r7, [sp, #4]
   222c8:	str	lr, [sp, #16]
   222cc:	ldr	ip, [r4, #296]	; 0x128
   222d0:	str	ip, [sp, #12]
   222d4:	bl	20050 <__assert_fail@plt+0xe4ac>
   222d8:	cmp	r9, r0
   222dc:	bhi	2233c <__assert_fail@plt+0x10798>
   222e0:	add	r9, r0, #1
   222e4:	cmp	r6, r4
   222e8:	str	r9, [r5]
   222ec:	beq	222f8 <__assert_fail@plt+0x10754>
   222f0:	mov	r0, r6
   222f4:	bl	19610 <__assert_fail@plt+0x7a6c>
   222f8:	mov	r0, r9
   222fc:	bl	36b20 <__assert_fail@plt+0x24f7c>
   22300:	ldr	ip, [r4, #256]	; 0x100
   22304:	mov	r1, r9
   22308:	mov	r3, fp
   2230c:	mov	r2, sl
   22310:	mov	r6, r0
   22314:	ldr	r9, [r4, #296]	; 0x128
   22318:	ldr	lr, [r4, #300]	; 0x12c
   2231c:	str	r0, [r5, #4]
   22320:	str	ip, [sp]
   22324:	ldr	ip, [pc, #100]	; 22390 <__assert_fail@plt+0x107ec>
   22328:	str	r7, [sp, #4]
   2232c:	str	ip, [sp, #8]
   22330:	str	r9, [sp, #12]
   22334:	str	lr, [sp, #16]
   22338:	bl	20050 <__assert_fail@plt+0xe4ac>
   2233c:	ldr	r3, [sp, #28]
   22340:	mov	r0, r6
   22344:	str	r3, [r8]
   22348:	add	sp, sp, #44	; 0x2c
   2234c:	ldrd	r4, [sp]
   22350:	ldrd	r6, [sp, #8]
   22354:	ldrd	r8, [sp, #16]
   22358:	ldrd	sl, [sp, #24]
   2235c:	add	sp, sp, #32
   22360:	pop	{pc}		; (ldr pc, [sp], #4)
   22364:	mov	r0, #8
   22368:	mvn	r3, #-2147483648	; 0x80000000
   2236c:	add	r1, sp, #36	; 0x24
   22370:	str	r0, [sp]
   22374:	mov	r0, #0
   22378:	bl	36dc4 <__assert_fail@plt+0x25220>
   2237c:	ldrd	r2, [r4, #8]
   22380:	mov	r5, r0
   22384:	str	r0, [r4]
   22388:	strd	r2, [r0]
   2238c:	b	22264 <__assert_fail@plt+0x106c0>
   22390:	ldrdeq	sp, [r4], -r4
   22394:	strd	r4, [sp, #-20]!	; 0xffffffec
   22398:	mov	r4, #0
   2239c:	mov	r5, #0
   223a0:	strd	r6, [sp, #8]
   223a4:	cmp	r1, #10
   223a8:	str	lr, [sp, #16]
   223ac:	sub	sp, sp, #100	; 0x64
   223b0:	strd	r4, [sp, #48]	; 0x30
   223b4:	beq	223fc <__assert_fail@plt+0x10858>
   223b8:	mov	r3, sp
   223bc:	strd	r4, [sp, #8]
   223c0:	str	r1, [sp, #48]	; 0x30
   223c4:	mov	r1, r2
   223c8:	mvn	r2, #0
   223cc:	ldrd	r6, [sp, #48]	; 0x30
   223d0:	strd	r6, [sp]
   223d4:	strd	r4, [sp, #16]
   223d8:	strd	r4, [sp, #24]
   223dc:	strd	r4, [sp, #32]
   223e0:	strd	r4, [sp, #40]	; 0x28
   223e4:	bl	21a3c <__assert_fail@plt+0xfe98>
   223e8:	add	sp, sp, #100	; 0x64
   223ec:	ldrd	r4, [sp]
   223f0:	ldrd	r6, [sp, #8]
   223f4:	add	sp, sp, #16
   223f8:	pop	{pc}		; (ldr pc, [sp], #4)
   223fc:	bl	11b68 <abort@plt>
   22400:	strd	r4, [sp, #-20]!	; 0xffffffec
   22404:	mov	r4, #0
   22408:	mov	r5, #0
   2240c:	strd	r6, [sp, #8]
   22410:	cmp	r1, #10
   22414:	str	lr, [sp, #16]
   22418:	sub	sp, sp, #100	; 0x64
   2241c:	strd	r4, [sp, #48]	; 0x30
   22420:	beq	2246c <__assert_fail@plt+0x108c8>
   22424:	mov	ip, r2
   22428:	mov	r2, r3
   2242c:	strd	r4, [sp, #8]
   22430:	str	r1, [sp, #48]	; 0x30
   22434:	mov	r3, sp
   22438:	mov	r1, ip
   2243c:	ldrd	r6, [sp, #48]	; 0x30
   22440:	strd	r6, [sp]
   22444:	strd	r4, [sp, #16]
   22448:	strd	r4, [sp, #24]
   2244c:	strd	r4, [sp, #32]
   22450:	strd	r4, [sp, #40]	; 0x28
   22454:	bl	21a3c <__assert_fail@plt+0xfe98>
   22458:	add	sp, sp, #100	; 0x64
   2245c:	ldrd	r4, [sp]
   22460:	ldrd	r6, [sp, #8]
   22464:	add	sp, sp, #16
   22468:	pop	{pc}		; (ldr pc, [sp], #4)
   2246c:	bl	11b68 <abort@plt>
   22470:	mov	r2, #0
   22474:	mov	r3, #0
   22478:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2247c:	strd	r6, [sp, #8]
   22480:	cmp	r0, #10
   22484:	strd	r8, [sp, #16]
   22488:	strd	sl, [sp, #24]
   2248c:	str	lr, [sp, #32]
   22490:	sub	sp, sp, #124	; 0x7c
   22494:	strd	r2, [sp, #72]	; 0x48
   22498:	strd	r2, [sp, #80]	; 0x50
   2249c:	strd	r2, [sp, #88]	; 0x58
   224a0:	strd	r2, [sp, #96]	; 0x60
   224a4:	strd	r2, [sp, #104]	; 0x68
   224a8:	strd	r2, [sp, #112]	; 0x70
   224ac:	beq	22650 <__assert_fail@plt+0x10aac>
   224b0:	mov	r6, r1
   224b4:	movw	r4, #53724	; 0xd1dc
   224b8:	movt	r4, #4
   224bc:	str	r0, [sp, #72]	; 0x48
   224c0:	ldrd	r0, [sp, #72]	; 0x48
   224c4:	strd	r0, [sp, #24]
   224c8:	strd	r2, [sp, #32]
   224cc:	strd	r2, [sp, #40]	; 0x28
   224d0:	strd	r2, [sp, #48]	; 0x30
   224d4:	strd	r2, [sp, #56]	; 0x38
   224d8:	strd	r2, [sp, #64]	; 0x40
   224dc:	bl	119b8 <__errno_location@plt>
   224e0:	mov	r8, r0
   224e4:	ldr	r5, [r4]
   224e8:	ldr	r2, [r4, #4]
   224ec:	ldr	r9, [r0]
   224f0:	cmp	r2, #0
   224f4:	bgt	22550 <__assert_fail@plt+0x109ac>
   224f8:	add	r3, r4, #8
   224fc:	str	r2, [sp, #72]	; 0x48
   22500:	rsb	r2, r2, #1
   22504:	cmp	r5, r3
   22508:	beq	22624 <__assert_fail@plt+0x10a80>
   2250c:	mov	r3, #8
   22510:	mov	r0, r5
   22514:	add	r1, sp, #72	; 0x48
   22518:	str	r3, [sp]
   2251c:	mvn	r3, #-2147483648	; 0x80000000
   22520:	bl	36dc4 <__assert_fail@plt+0x25220>
   22524:	mov	r5, r0
   22528:	str	r0, [r4]
   2252c:	ldr	r0, [r4, #4]
   22530:	mov	r1, #0
   22534:	ldr	r2, [sp, #72]	; 0x48
   22538:	sub	r2, r2, r0
   2253c:	add	r0, r5, r0, lsl #3
   22540:	lsl	r2, r2, #3
   22544:	bl	119e8 <memset@plt>
   22548:	ldr	r3, [sp, #72]	; 0x48
   2254c:	str	r3, [r4, #4]
   22550:	ldr	sl, [r5]
   22554:	add	r0, sp, #32
   22558:	mvn	r3, #0
   2255c:	mov	r2, r6
   22560:	ldr	r7, [sp, #28]
   22564:	ldr	r4, [r5, #4]
   22568:	mov	r1, sl
   2256c:	str	r0, [sp, #8]
   22570:	ldr	lr, [sp, #24]
   22574:	orr	r7, r7, #1
   22578:	ldr	ip, [sp, #64]	; 0x40
   2257c:	mov	r0, r4
   22580:	ldr	fp, [sp, #68]	; 0x44
   22584:	str	lr, [sp]
   22588:	str	r7, [sp, #4]
   2258c:	str	ip, [sp, #12]
   22590:	str	fp, [sp, #16]
   22594:	bl	20050 <__assert_fail@plt+0xe4ac>
   22598:	cmp	sl, r0
   2259c:	bhi	22600 <__assert_fail@plt+0x10a5c>
   225a0:	add	sl, r0, #1
   225a4:	movw	r3, #53964	; 0xd2cc
   225a8:	movt	r3, #4
   225ac:	cmp	r4, r3
   225b0:	str	sl, [r5]
   225b4:	beq	225c0 <__assert_fail@plt+0x10a1c>
   225b8:	mov	r0, r4
   225bc:	bl	19610 <__assert_fail@plt+0x7a6c>
   225c0:	mov	r0, sl
   225c4:	bl	36b20 <__assert_fail@plt+0x24f7c>
   225c8:	ldr	r3, [sp, #24]
   225cc:	mov	r2, r6
   225d0:	mov	r1, sl
   225d4:	mov	r4, r0
   225d8:	ldr	lr, [sp, #64]	; 0x40
   225dc:	ldr	ip, [sp, #68]	; 0x44
   225e0:	str	r0, [r5, #4]
   225e4:	add	r5, sp, #32
   225e8:	stm	sp, {r3, r7}
   225ec:	mvn	r3, #0
   225f0:	str	r5, [sp, #8]
   225f4:	str	lr, [sp, #12]
   225f8:	str	ip, [sp, #16]
   225fc:	bl	20050 <__assert_fail@plt+0xe4ac>
   22600:	mov	r0, r4
   22604:	str	r9, [r8]
   22608:	add	sp, sp, #124	; 0x7c
   2260c:	ldrd	r4, [sp]
   22610:	ldrd	r6, [sp, #8]
   22614:	ldrd	r8, [sp, #16]
   22618:	ldrd	sl, [sp, #24]
   2261c:	add	sp, sp, #32
   22620:	pop	{pc}		; (ldr pc, [sp], #4)
   22624:	mov	r0, #8
   22628:	mvn	r3, #-2147483648	; 0x80000000
   2262c:	add	r1, sp, #72	; 0x48
   22630:	str	r0, [sp]
   22634:	mov	r0, #0
   22638:	bl	36dc4 <__assert_fail@plt+0x25220>
   2263c:	ldrd	r2, [r4, #8]
   22640:	mov	r5, r0
   22644:	str	r0, [r4]
   22648:	strd	r2, [r0]
   2264c:	b	2252c <__assert_fail@plt+0x10988>
   22650:	bl	11b68 <abort@plt>
   22654:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22658:	cmp	r0, #10
   2265c:	strd	r6, [sp, #8]
   22660:	mov	r6, #0
   22664:	mov	r7, #0
   22668:	strd	r8, [sp, #16]
   2266c:	strd	sl, [sp, #24]
   22670:	str	lr, [sp, #32]
   22674:	sub	sp, sp, #124	; 0x7c
   22678:	strd	r6, [sp, #72]	; 0x48
   2267c:	strd	r6, [sp, #80]	; 0x50
   22680:	strd	r6, [sp, #88]	; 0x58
   22684:	strd	r6, [sp, #96]	; 0x60
   22688:	strd	r6, [sp, #104]	; 0x68
   2268c:	strd	r6, [sp, #112]	; 0x70
   22690:	beq	2283c <__assert_fail@plt+0x10c98>
   22694:	mov	sl, r2
   22698:	movw	r5, #53724	; 0xd1dc
   2269c:	movt	r5, #4
   226a0:	str	r0, [sp, #72]	; 0x48
   226a4:	mov	r9, r1
   226a8:	ldrd	r2, [sp, #72]	; 0x48
   226ac:	strd	r2, [sp, #24]
   226b0:	strd	r6, [sp, #32]
   226b4:	strd	r6, [sp, #40]	; 0x28
   226b8:	strd	r6, [sp, #48]	; 0x30
   226bc:	strd	r6, [sp, #56]	; 0x38
   226c0:	strd	r6, [sp, #64]	; 0x40
   226c4:	bl	119b8 <__errno_location@plt>
   226c8:	mov	r7, r0
   226cc:	ldr	r4, [r5]
   226d0:	ldr	r2, [r5, #4]
   226d4:	ldr	fp, [r0]
   226d8:	cmp	r2, #0
   226dc:	bgt	22738 <__assert_fail@plt+0x10b94>
   226e0:	add	r3, r5, #8
   226e4:	str	r2, [sp, #72]	; 0x48
   226e8:	rsb	r2, r2, #1
   226ec:	cmp	r4, r3
   226f0:	beq	22810 <__assert_fail@plt+0x10c6c>
   226f4:	mov	r3, #8
   226f8:	mov	r0, r4
   226fc:	add	r1, sp, #72	; 0x48
   22700:	str	r3, [sp]
   22704:	mvn	r3, #-2147483648	; 0x80000000
   22708:	bl	36dc4 <__assert_fail@plt+0x25220>
   2270c:	mov	r4, r0
   22710:	str	r0, [r5]
   22714:	ldr	r0, [r5, #4]
   22718:	mov	r1, #0
   2271c:	ldr	r2, [sp, #72]	; 0x48
   22720:	sub	r2, r2, r0
   22724:	add	r0, r4, r0, lsl #3
   22728:	lsl	r2, r2, #3
   2272c:	bl	119e8 <memset@plt>
   22730:	ldr	r3, [sp, #72]	; 0x48
   22734:	str	r3, [r5, #4]
   22738:	ldr	ip, [sp, #24]
   2273c:	add	r0, sp, #32
   22740:	mov	r3, sl
   22744:	mov	r2, r9
   22748:	ldr	r6, [sp, #28]
   2274c:	ldr	r8, [r4]
   22750:	ldr	r5, [r4, #4]
   22754:	str	ip, [sp]
   22758:	orr	r6, r6, #1
   2275c:	ldr	ip, [sp, #64]	; 0x40
   22760:	mov	r1, r8
   22764:	str	r6, [sp, #4]
   22768:	ldr	lr, [sp, #68]	; 0x44
   2276c:	str	r0, [sp, #8]
   22770:	mov	r0, r5
   22774:	str	ip, [sp, #12]
   22778:	str	lr, [sp, #16]
   2277c:	bl	20050 <__assert_fail@plt+0xe4ac>
   22780:	cmp	r8, r0
   22784:	bhi	227ec <__assert_fail@plt+0x10c48>
   22788:	add	r8, r0, #1
   2278c:	movw	r3, #53964	; 0xd2cc
   22790:	movt	r3, #4
   22794:	cmp	r5, r3
   22798:	str	r8, [r4]
   2279c:	beq	227a8 <__assert_fail@plt+0x10c04>
   227a0:	mov	r0, r5
   227a4:	bl	19610 <__assert_fail@plt+0x7a6c>
   227a8:	mov	r0, r8
   227ac:	bl	36b20 <__assert_fail@plt+0x24f7c>
   227b0:	ldr	lr, [sp, #24]
   227b4:	mov	r1, r8
   227b8:	mov	r3, sl
   227bc:	mov	r2, r9
   227c0:	mov	r5, r0
   227c4:	ldr	r8, [sp, #64]	; 0x40
   227c8:	ldr	ip, [sp, #68]	; 0x44
   227cc:	str	r0, [r4, #4]
   227d0:	str	lr, [sp]
   227d4:	add	lr, sp, #32
   227d8:	str	r6, [sp, #4]
   227dc:	str	lr, [sp, #8]
   227e0:	str	r8, [sp, #12]
   227e4:	str	ip, [sp, #16]
   227e8:	bl	20050 <__assert_fail@plt+0xe4ac>
   227ec:	mov	r0, r5
   227f0:	str	fp, [r7]
   227f4:	add	sp, sp, #124	; 0x7c
   227f8:	ldrd	r4, [sp]
   227fc:	ldrd	r6, [sp, #8]
   22800:	ldrd	r8, [sp, #16]
   22804:	ldrd	sl, [sp, #24]
   22808:	add	sp, sp, #32
   2280c:	pop	{pc}		; (ldr pc, [sp], #4)
   22810:	mov	r0, #8
   22814:	mvn	r3, #-2147483648	; 0x80000000
   22818:	add	r1, sp, #72	; 0x48
   2281c:	str	r0, [sp]
   22820:	mov	r0, #0
   22824:	bl	36dc4 <__assert_fail@plt+0x25220>
   22828:	ldrd	r2, [r5, #8]
   2282c:	mov	r4, r0
   22830:	str	r0, [r5]
   22834:	strd	r2, [r0]
   22838:	b	22714 <__assert_fail@plt+0x10b70>
   2283c:	bl	11b68 <abort@plt>
   22840:	ldr	r3, [pc, #492]	; 22a34 <__assert_fail@plt+0x10e90>
   22844:	lsr	ip, r2, #5
   22848:	and	r2, r2, #31
   2284c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22850:	movw	r5, #53724	; 0xd1dc
   22854:	movt	r5, #4
   22858:	strd	r6, [sp, #8]
   2285c:	strd	r8, [sp, #16]
   22860:	strd	sl, [sp, #24]
   22864:	mov	sl, r0
   22868:	mov	fp, r1
   2286c:	ldrd	r0, [r3]
   22870:	str	lr, [sp, #32]
   22874:	sub	sp, sp, #92	; 0x5c
   22878:	ldrd	r8, [r3, #8]
   2287c:	add	r6, sp, #48	; 0x30
   22880:	strd	r0, [sp, #40]	; 0x28
   22884:	ldrd	r0, [r3, #16]
   22888:	strd	r8, [sp, #48]	; 0x30
   2288c:	ldrd	r8, [r3, #24]
   22890:	strd	r0, [sp, #56]	; 0x38
   22894:	ldrd	r0, [r3, #32]
   22898:	strd	r8, [sp, #64]	; 0x40
   2289c:	ldrd	r8, [r3, #40]	; 0x28
   228a0:	strd	r0, [sp, #72]	; 0x48
   228a4:	strd	r8, [sp, #80]	; 0x50
   228a8:	ldr	r3, [r6, ip, lsl #2]
   228ac:	mvn	r1, r3, lsr r2
   228b0:	and	r1, r1, #1
   228b4:	eor	r2, r3, r1, lsl r2
   228b8:	str	r2, [r6, ip, lsl #2]
   228bc:	bl	119b8 <__errno_location@plt>
   228c0:	ldr	r3, [r0]
   228c4:	mov	r8, r0
   228c8:	ldr	r2, [r5, #4]
   228cc:	ldr	r4, [r5]
   228d0:	str	r3, [sp, #28]
   228d4:	cmp	r2, #0
   228d8:	bgt	22934 <__assert_fail@plt+0x10d90>
   228dc:	add	r3, r5, #8
   228e0:	str	r2, [sp, #36]	; 0x24
   228e4:	rsb	r2, r2, #1
   228e8:	cmp	r4, r3
   228ec:	beq	22a08 <__assert_fail@plt+0x10e64>
   228f0:	mov	r1, #8
   228f4:	mov	r0, r4
   228f8:	mvn	r3, #-2147483648	; 0x80000000
   228fc:	str	r1, [sp]
   22900:	add	r1, sp, #36	; 0x24
   22904:	bl	36dc4 <__assert_fail@plt+0x25220>
   22908:	mov	r4, r0
   2290c:	str	r0, [r5]
   22910:	ldr	r0, [r5, #4]
   22914:	mov	r1, #0
   22918:	ldr	r2, [sp, #36]	; 0x24
   2291c:	sub	r2, r2, r0
   22920:	add	r0, r4, r0, lsl #3
   22924:	lsl	r2, r2, #3
   22928:	bl	119e8 <memset@plt>
   2292c:	ldr	r3, [sp, #36]	; 0x24
   22930:	str	r3, [r5, #4]
   22934:	ldr	ip, [sp, #40]	; 0x28
   22938:	mov	r3, fp
   2293c:	mov	r2, sl
   22940:	ldr	r7, [sp, #44]	; 0x2c
   22944:	ldr	r9, [r4]
   22948:	ldr	r5, [r4, #4]
   2294c:	str	ip, [sp]
   22950:	orr	r7, r7, #1
   22954:	ldr	ip, [sp, #80]	; 0x50
   22958:	mov	r1, r9
   2295c:	str	r7, [sp, #4]
   22960:	ldr	lr, [sp, #84]	; 0x54
   22964:	mov	r0, r5
   22968:	str	r6, [sp, #8]
   2296c:	str	ip, [sp, #12]
   22970:	str	lr, [sp, #16]
   22974:	bl	20050 <__assert_fail@plt+0xe4ac>
   22978:	cmp	r9, r0
   2297c:	bhi	229e0 <__assert_fail@plt+0x10e3c>
   22980:	add	r9, r0, #1
   22984:	movw	r3, #53964	; 0xd2cc
   22988:	movt	r3, #4
   2298c:	cmp	r5, r3
   22990:	str	r9, [r4]
   22994:	beq	229a0 <__assert_fail@plt+0x10dfc>
   22998:	mov	r0, r5
   2299c:	bl	19610 <__assert_fail@plt+0x7a6c>
   229a0:	mov	r0, r9
   229a4:	bl	36b20 <__assert_fail@plt+0x24f7c>
   229a8:	mov	r1, r9
   229ac:	ldr	ip, [sp, #40]	; 0x28
   229b0:	mov	r3, fp
   229b4:	mov	r2, sl
   229b8:	mov	r5, r0
   229bc:	ldr	r9, [sp, #80]	; 0x50
   229c0:	ldr	lr, [sp, #84]	; 0x54
   229c4:	str	r0, [r4, #4]
   229c8:	str	ip, [sp]
   229cc:	str	r7, [sp, #4]
   229d0:	str	r6, [sp, #8]
   229d4:	str	r9, [sp, #12]
   229d8:	str	lr, [sp, #16]
   229dc:	bl	20050 <__assert_fail@plt+0xe4ac>
   229e0:	ldr	r3, [sp, #28]
   229e4:	mov	r0, r5
   229e8:	str	r3, [r8]
   229ec:	add	sp, sp, #92	; 0x5c
   229f0:	ldrd	r4, [sp]
   229f4:	ldrd	r6, [sp, #8]
   229f8:	ldrd	r8, [sp, #16]
   229fc:	ldrd	sl, [sp, #24]
   22a00:	add	sp, sp, #32
   22a04:	pop	{pc}		; (ldr pc, [sp], #4)
   22a08:	mov	r0, #8
   22a0c:	mvn	r3, #-2147483648	; 0x80000000
   22a10:	add	r1, sp, #36	; 0x24
   22a14:	str	r0, [sp]
   22a18:	mov	r0, #0
   22a1c:	bl	36dc4 <__assert_fail@plt+0x25220>
   22a20:	ldrd	r2, [r5, #8]
   22a24:	mov	r4, r0
   22a28:	str	r0, [r5]
   22a2c:	strd	r2, [r0]
   22a30:	b	22910 <__assert_fail@plt+0x10d6c>
   22a34:	andeq	sp, r4, ip, asr #7
   22a38:	ldr	ip, [pc, #476]	; 22c1c <__assert_fail@plt+0x11078>
   22a3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22a40:	movw	r4, #53724	; 0xd1dc
   22a44:	movt	r4, #4
   22a48:	ldrd	r2, [ip, #8]
   22a4c:	strd	r6, [sp, #8]
   22a50:	lsr	r7, r1, #5
   22a54:	mov	r6, r0
   22a58:	strd	r8, [sp, #16]
   22a5c:	str	lr, [sp, #32]
   22a60:	and	lr, r1, #31
   22a64:	ldrd	r0, [ip]
   22a68:	strd	sl, [sp, #24]
   22a6c:	sub	sp, sp, #84	; 0x54
   22a70:	add	r5, sp, #40	; 0x28
   22a74:	strd	r0, [sp, #32]
   22a78:	strd	r2, [sp, #40]	; 0x28
   22a7c:	ldrd	r0, [ip, #16]
   22a80:	ldrd	r2, [ip, #24]
   22a84:	strd	r0, [sp, #48]	; 0x30
   22a88:	ldrd	r0, [ip, #32]
   22a8c:	strd	r2, [sp, #56]	; 0x38
   22a90:	ldrd	r2, [ip, #40]	; 0x28
   22a94:	strd	r0, [sp, #64]	; 0x40
   22a98:	strd	r2, [sp, #72]	; 0x48
   22a9c:	ldr	r1, [r5, r7, lsl #2]
   22aa0:	mvn	r3, r1, lsr lr
   22aa4:	and	r3, r3, #1
   22aa8:	eor	r1, r1, r3, lsl lr
   22aac:	str	r1, [r5, r7, lsl #2]
   22ab0:	bl	119b8 <__errno_location@plt>
   22ab4:	mov	r9, r0
   22ab8:	ldr	sl, [r0]
   22abc:	ldr	r2, [r4, #4]
   22ac0:	ldr	r7, [r4]
   22ac4:	cmp	r2, #0
   22ac8:	bgt	22b24 <__assert_fail@plt+0x10f80>
   22acc:	add	r3, r4, #8
   22ad0:	str	r2, [sp, #28]
   22ad4:	rsb	r2, r2, #1
   22ad8:	cmp	r7, r3
   22adc:	beq	22bf0 <__assert_fail@plt+0x1104c>
   22ae0:	mov	r1, #8
   22ae4:	mov	r0, r7
   22ae8:	mvn	r3, #-2147483648	; 0x80000000
   22aec:	str	r1, [sp]
   22af0:	add	r1, sp, #28
   22af4:	bl	36dc4 <__assert_fail@plt+0x25220>
   22af8:	mov	r7, r0
   22afc:	str	r0, [r4]
   22b00:	ldr	r0, [r4, #4]
   22b04:	mov	r1, #0
   22b08:	ldr	r2, [sp, #28]
   22b0c:	sub	r2, r2, r0
   22b10:	add	r0, r7, r0, lsl #3
   22b14:	lsl	r2, r2, #3
   22b18:	bl	119e8 <memset@plt>
   22b1c:	ldr	r3, [sp, #28]
   22b20:	str	r3, [r4, #4]
   22b24:	ldr	ip, [sp, #32]
   22b28:	mvn	r3, #0
   22b2c:	mov	r2, r6
   22b30:	ldr	r8, [sp, #36]	; 0x24
   22b34:	ldr	fp, [r7]
   22b38:	ldr	r4, [r7, #4]
   22b3c:	str	ip, [sp]
   22b40:	orr	r8, r8, #1
   22b44:	ldr	ip, [sp, #72]	; 0x48
   22b48:	mov	r1, fp
   22b4c:	str	r8, [sp, #4]
   22b50:	ldr	lr, [sp, #76]	; 0x4c
   22b54:	mov	r0, r4
   22b58:	str	r5, [sp, #8]
   22b5c:	str	ip, [sp, #12]
   22b60:	str	lr, [sp, #16]
   22b64:	bl	20050 <__assert_fail@plt+0xe4ac>
   22b68:	cmp	fp, r0
   22b6c:	bhi	22bcc <__assert_fail@plt+0x11028>
   22b70:	add	fp, r0, #1
   22b74:	movw	r3, #53964	; 0xd2cc
   22b78:	movt	r3, #4
   22b7c:	cmp	r4, r3
   22b80:	str	fp, [r7]
   22b84:	beq	22b90 <__assert_fail@plt+0x10fec>
   22b88:	mov	r0, r4
   22b8c:	bl	19610 <__assert_fail@plt+0x7a6c>
   22b90:	mov	r0, fp
   22b94:	bl	36b20 <__assert_fail@plt+0x24f7c>
   22b98:	ldr	r3, [sp, #32]
   22b9c:	mov	r2, r6
   22ba0:	mov	r1, fp
   22ba4:	mov	r4, r0
   22ba8:	ldr	lr, [sp, #72]	; 0x48
   22bac:	ldr	ip, [sp, #76]	; 0x4c
   22bb0:	str	r0, [r7, #4]
   22bb4:	stm	sp, {r3, r8}
   22bb8:	mvn	r3, #0
   22bbc:	str	r5, [sp, #8]
   22bc0:	str	lr, [sp, #12]
   22bc4:	str	ip, [sp, #16]
   22bc8:	bl	20050 <__assert_fail@plt+0xe4ac>
   22bcc:	mov	r0, r4
   22bd0:	str	sl, [r9]
   22bd4:	add	sp, sp, #84	; 0x54
   22bd8:	ldrd	r4, [sp]
   22bdc:	ldrd	r6, [sp, #8]
   22be0:	ldrd	r8, [sp, #16]
   22be4:	ldrd	sl, [sp, #24]
   22be8:	add	sp, sp, #32
   22bec:	pop	{pc}		; (ldr pc, [sp], #4)
   22bf0:	mov	r0, #8
   22bf4:	mvn	r3, #-2147483648	; 0x80000000
   22bf8:	add	r1, sp, #28
   22bfc:	str	r0, [sp]
   22c00:	mov	r0, #0
   22c04:	bl	36dc4 <__assert_fail@plt+0x25220>
   22c08:	ldrd	r2, [r4, #8]
   22c0c:	mov	r7, r0
   22c10:	str	r0, [r4]
   22c14:	strd	r2, [r0]
   22c18:	b	22b00 <__assert_fail@plt+0x10f5c>
   22c1c:	andeq	sp, r4, ip, asr #7
   22c20:	ldr	ip, [pc, #472]	; 22e00 <__assert_fail@plt+0x1125c>
   22c24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22c28:	mov	r5, r0
   22c2c:	movw	r4, #53724	; 0xd1dc
   22c30:	movt	r4, #4
   22c34:	ldrd	r2, [ip]
   22c38:	ldrd	r0, [ip, #8]
   22c3c:	strd	r6, [sp, #8]
   22c40:	strd	r8, [sp, #16]
   22c44:	strd	sl, [sp, #24]
   22c48:	str	lr, [sp, #32]
   22c4c:	sub	sp, sp, #84	; 0x54
   22c50:	strd	r2, [sp, #32]
   22c54:	strd	r0, [sp, #40]	; 0x28
   22c58:	ldr	r6, [sp, #44]	; 0x2c
   22c5c:	ldrd	r2, [ip, #16]
   22c60:	ldrd	r0, [ip, #24]
   22c64:	mvn	lr, r6
   22c68:	and	lr, lr, #67108864	; 0x4000000
   22c6c:	eor	lr, lr, r6
   22c70:	ldrd	r6, [ip, #40]	; 0x28
   22c74:	strd	r2, [sp, #48]	; 0x30
   22c78:	ldrd	r2, [ip, #32]
   22c7c:	str	lr, [sp, #44]	; 0x2c
   22c80:	strd	r0, [sp, #56]	; 0x38
   22c84:	strd	r2, [sp, #64]	; 0x40
   22c88:	strd	r6, [sp, #72]	; 0x48
   22c8c:	bl	119b8 <__errno_location@plt>
   22c90:	mov	r8, r0
   22c94:	ldr	r9, [r0]
   22c98:	ldr	r2, [r4, #4]
   22c9c:	ldr	r6, [r4]
   22ca0:	cmp	r2, #0
   22ca4:	bgt	22d00 <__assert_fail@plt+0x1115c>
   22ca8:	add	r3, r4, #8
   22cac:	str	r2, [sp, #28]
   22cb0:	rsb	r2, r2, #1
   22cb4:	cmp	r6, r3
   22cb8:	beq	22dd4 <__assert_fail@plt+0x11230>
   22cbc:	mov	r1, #8
   22cc0:	mov	r0, r6
   22cc4:	mvn	r3, #-2147483648	; 0x80000000
   22cc8:	str	r1, [sp]
   22ccc:	add	r1, sp, #28
   22cd0:	bl	36dc4 <__assert_fail@plt+0x25220>
   22cd4:	mov	r6, r0
   22cd8:	str	r0, [r4]
   22cdc:	ldr	r0, [r4, #4]
   22ce0:	mov	r1, #0
   22ce4:	ldr	r2, [sp, #28]
   22ce8:	sub	r2, r2, r0
   22cec:	add	r0, r6, r0, lsl #3
   22cf0:	lsl	r2, r2, #3
   22cf4:	bl	119e8 <memset@plt>
   22cf8:	ldr	r3, [sp, #28]
   22cfc:	str	r3, [r4, #4]
   22d00:	ldr	sl, [r6]
   22d04:	add	r0, sp, #40	; 0x28
   22d08:	mvn	r3, #0
   22d0c:	mov	r2, r5
   22d10:	ldr	r7, [sp, #36]	; 0x24
   22d14:	ldr	r4, [r6, #4]
   22d18:	mov	r1, sl
   22d1c:	str	r0, [sp, #8]
   22d20:	ldr	lr, [sp, #32]
   22d24:	orr	r7, r7, #1
   22d28:	ldr	ip, [sp, #72]	; 0x48
   22d2c:	mov	r0, r4
   22d30:	ldr	fp, [sp, #76]	; 0x4c
   22d34:	str	lr, [sp]
   22d38:	str	r7, [sp, #4]
   22d3c:	str	ip, [sp, #12]
   22d40:	str	fp, [sp, #16]
   22d44:	bl	20050 <__assert_fail@plt+0xe4ac>
   22d48:	cmp	sl, r0
   22d4c:	bhi	22db0 <__assert_fail@plt+0x1120c>
   22d50:	add	sl, r0, #1
   22d54:	movw	r3, #53964	; 0xd2cc
   22d58:	movt	r3, #4
   22d5c:	cmp	r4, r3
   22d60:	str	sl, [r6]
   22d64:	beq	22d70 <__assert_fail@plt+0x111cc>
   22d68:	mov	r0, r4
   22d6c:	bl	19610 <__assert_fail@plt+0x7a6c>
   22d70:	mov	r0, sl
   22d74:	bl	36b20 <__assert_fail@plt+0x24f7c>
   22d78:	ldr	r3, [sp, #32]
   22d7c:	mov	r2, r5
   22d80:	add	r5, sp, #40	; 0x28
   22d84:	mov	r1, sl
   22d88:	mov	r4, r0
   22d8c:	ldr	lr, [sp, #72]	; 0x48
   22d90:	ldr	ip, [sp, #76]	; 0x4c
   22d94:	str	r0, [r6, #4]
   22d98:	stm	sp, {r3, r7}
   22d9c:	mvn	r3, #0
   22da0:	str	r5, [sp, #8]
   22da4:	str	lr, [sp, #12]
   22da8:	str	ip, [sp, #16]
   22dac:	bl	20050 <__assert_fail@plt+0xe4ac>
   22db0:	mov	r0, r4
   22db4:	str	r9, [r8]
   22db8:	add	sp, sp, #84	; 0x54
   22dbc:	ldrd	r4, [sp]
   22dc0:	ldrd	r6, [sp, #8]
   22dc4:	ldrd	r8, [sp, #16]
   22dc8:	ldrd	sl, [sp, #24]
   22dcc:	add	sp, sp, #32
   22dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   22dd4:	mov	r0, #8
   22dd8:	mvn	r3, #-2147483648	; 0x80000000
   22ddc:	add	r1, sp, #28
   22de0:	str	r0, [sp]
   22de4:	mov	r0, #0
   22de8:	bl	36dc4 <__assert_fail@plt+0x25220>
   22dec:	ldrd	r2, [r4, #8]
   22df0:	mov	r6, r0
   22df4:	str	r0, [r4]
   22df8:	strd	r2, [r0]
   22dfc:	b	22cdc <__assert_fail@plt+0x11138>
   22e00:	andeq	sp, r4, ip, asr #7
   22e04:	ldr	ip, [pc, #480]	; 22fec <__assert_fail@plt+0x11448>
   22e08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22e0c:	mov	r5, r0
   22e10:	movw	r4, #53724	; 0xd1dc
   22e14:	movt	r4, #4
   22e18:	ldrd	r2, [ip]
   22e1c:	strd	r6, [sp, #8]
   22e20:	mov	r6, r1
   22e24:	ldrd	r0, [ip, #8]
   22e28:	strd	r8, [sp, #16]
   22e2c:	strd	sl, [sp, #24]
   22e30:	str	lr, [sp, #32]
   22e34:	sub	sp, sp, #84	; 0x54
   22e38:	ldrd	r8, [ip, #40]	; 0x28
   22e3c:	strd	r2, [sp, #32]
   22e40:	strd	r0, [sp, #40]	; 0x28
   22e44:	ldrd	r2, [ip, #16]
   22e48:	ldr	r7, [sp, #44]	; 0x2c
   22e4c:	ldrd	r0, [ip, #24]
   22e50:	strd	r2, [sp, #48]	; 0x30
   22e54:	ldrd	r2, [ip, #32]
   22e58:	mvn	lr, r7
   22e5c:	and	lr, lr, #67108864	; 0x4000000
   22e60:	eor	lr, lr, r7
   22e64:	str	lr, [sp, #44]	; 0x2c
   22e68:	strd	r0, [sp, #56]	; 0x38
   22e6c:	strd	r2, [sp, #64]	; 0x40
   22e70:	strd	r8, [sp, #72]	; 0x48
   22e74:	bl	119b8 <__errno_location@plt>
   22e78:	mov	r9, r0
   22e7c:	ldr	sl, [r0]
   22e80:	ldr	r2, [r4, #4]
   22e84:	ldr	r7, [r4]
   22e88:	cmp	r2, #0
   22e8c:	bgt	22ee8 <__assert_fail@plt+0x11344>
   22e90:	add	r3, r4, #8
   22e94:	str	r2, [sp, #28]
   22e98:	rsb	r2, r2, #1
   22e9c:	cmp	r7, r3
   22ea0:	beq	22fc0 <__assert_fail@plt+0x1141c>
   22ea4:	mov	r1, #8
   22ea8:	mov	r0, r7
   22eac:	mvn	r3, #-2147483648	; 0x80000000
   22eb0:	str	r1, [sp]
   22eb4:	add	r1, sp, #28
   22eb8:	bl	36dc4 <__assert_fail@plt+0x25220>
   22ebc:	mov	r7, r0
   22ec0:	str	r0, [r4]
   22ec4:	ldr	r0, [r4, #4]
   22ec8:	mov	r1, #0
   22ecc:	ldr	r2, [sp, #28]
   22ed0:	sub	r2, r2, r0
   22ed4:	add	r0, r7, r0, lsl #3
   22ed8:	lsl	r2, r2, #3
   22edc:	bl	119e8 <memset@plt>
   22ee0:	ldr	r3, [sp, #28]
   22ee4:	str	r3, [r4, #4]
   22ee8:	ldr	ip, [sp, #32]
   22eec:	add	r0, sp, #40	; 0x28
   22ef0:	mov	r3, r6
   22ef4:	mov	r2, r5
   22ef8:	ldr	r8, [sp, #36]	; 0x24
   22efc:	ldr	fp, [r7]
   22f00:	ldr	r4, [r7, #4]
   22f04:	str	ip, [sp]
   22f08:	orr	r8, r8, #1
   22f0c:	ldr	ip, [sp, #72]	; 0x48
   22f10:	mov	r1, fp
   22f14:	str	r8, [sp, #4]
   22f18:	ldr	lr, [sp, #76]	; 0x4c
   22f1c:	str	r0, [sp, #8]
   22f20:	mov	r0, r4
   22f24:	str	ip, [sp, #12]
   22f28:	str	lr, [sp, #16]
   22f2c:	bl	20050 <__assert_fail@plt+0xe4ac>
   22f30:	cmp	fp, r0
   22f34:	bhi	22f9c <__assert_fail@plt+0x113f8>
   22f38:	add	fp, r0, #1
   22f3c:	movw	r3, #53964	; 0xd2cc
   22f40:	movt	r3, #4
   22f44:	cmp	r4, r3
   22f48:	str	fp, [r7]
   22f4c:	beq	22f58 <__assert_fail@plt+0x113b4>
   22f50:	mov	r0, r4
   22f54:	bl	19610 <__assert_fail@plt+0x7a6c>
   22f58:	mov	r0, fp
   22f5c:	bl	36b20 <__assert_fail@plt+0x24f7c>
   22f60:	ldr	lr, [sp, #32]
   22f64:	mov	r2, r5
   22f68:	mov	r3, r6
   22f6c:	mov	r1, fp
   22f70:	mov	r4, r0
   22f74:	ldr	r5, [sp, #72]	; 0x48
   22f78:	ldr	ip, [sp, #76]	; 0x4c
   22f7c:	str	r0, [r7, #4]
   22f80:	str	lr, [sp]
   22f84:	add	lr, sp, #40	; 0x28
   22f88:	str	r8, [sp, #4]
   22f8c:	str	lr, [sp, #8]
   22f90:	str	r5, [sp, #12]
   22f94:	str	ip, [sp, #16]
   22f98:	bl	20050 <__assert_fail@plt+0xe4ac>
   22f9c:	mov	r0, r4
   22fa0:	str	sl, [r9]
   22fa4:	add	sp, sp, #84	; 0x54
   22fa8:	ldrd	r4, [sp]
   22fac:	ldrd	r6, [sp, #8]
   22fb0:	ldrd	r8, [sp, #16]
   22fb4:	ldrd	sl, [sp, #24]
   22fb8:	add	sp, sp, #32
   22fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   22fc0:	mov	r0, #8
   22fc4:	mvn	r3, #-2147483648	; 0x80000000
   22fc8:	add	r1, sp, #28
   22fcc:	str	r0, [sp]
   22fd0:	mov	r0, #0
   22fd4:	bl	36dc4 <__assert_fail@plt+0x25220>
   22fd8:	ldrd	r2, [r4, #8]
   22fdc:	mov	r7, r0
   22fe0:	str	r0, [r4]
   22fe4:	strd	r2, [r0]
   22fe8:	b	22ec4 <__assert_fail@plt+0x11320>
   22fec:	andeq	sp, r4, ip, asr #7
   22ff0:	strd	r4, [sp, #-12]!
   22ff4:	mov	r4, #0
   22ff8:	mov	r5, #0
   22ffc:	str	lr, [sp, #8]
   23000:	sub	sp, sp, #100	; 0x64
   23004:	cmp	r1, #10
   23008:	strd	r4, [sp]
   2300c:	strd	r4, [sp, #8]
   23010:	strd	r4, [sp, #16]
   23014:	strd	r4, [sp, #24]
   23018:	strd	r4, [sp, #32]
   2301c:	strd	r4, [sp, #40]	; 0x28
   23020:	beq	23050 <__assert_fail@plt+0x114ac>
   23024:	mov	ip, #67108864	; 0x4000000
   23028:	mov	r3, sp
   2302c:	str	r1, [sp]
   23030:	mov	r1, r2
   23034:	mvn	r2, #0
   23038:	str	ip, [sp, #12]
   2303c:	bl	21a3c <__assert_fail@plt+0xfe98>
   23040:	add	sp, sp, #100	; 0x64
   23044:	ldrd	r4, [sp]
   23048:	add	sp, sp, #8
   2304c:	pop	{pc}		; (ldr pc, [sp], #4)
   23050:	bl	11b68 <abort@plt>
   23054:	ldr	ip, [pc, #156]	; 230f8 <__assert_fail@plt+0x11554>
   23058:	cmp	r2, #0
   2305c:	cmpne	r1, #0
   23060:	strd	r4, [sp, #-32]!	; 0xffffffe0
   23064:	strd	r6, [sp, #8]
   23068:	mov	r6, r2
   2306c:	str	r8, [sp, #16]
   23070:	mov	r8, r3
   23074:	strd	sl, [sp, #20]
   23078:	ldrd	r4, [ip]
   2307c:	str	lr, [sp, #28]
   23080:	sub	sp, sp, #48	; 0x30
   23084:	mov	lr, #10
   23088:	ldrd	r2, [ip, #8]
   2308c:	ldrd	sl, [ip, #16]
   23090:	strd	r4, [sp]
   23094:	ldrd	r4, [ip, #32]
   23098:	str	lr, [sp]
   2309c:	strd	r2, [sp, #8]
   230a0:	strd	sl, [sp, #16]
   230a4:	ldrd	r2, [ip, #24]
   230a8:	ldrd	sl, [ip, #40]	; 0x28
   230ac:	strd	r2, [sp, #24]
   230b0:	strd	r4, [sp, #32]
   230b4:	strd	sl, [sp, #40]	; 0x28
   230b8:	beq	230f4 <__assert_fail@plt+0x11550>
   230bc:	mov	r7, r1
   230c0:	mov	r3, sp
   230c4:	mov	r1, r8
   230c8:	mvn	r2, #0
   230cc:	str	r7, [sp, #40]	; 0x28
   230d0:	str	r6, [sp, #44]	; 0x2c
   230d4:	bl	21a3c <__assert_fail@plt+0xfe98>
   230d8:	add	sp, sp, #48	; 0x30
   230dc:	ldrd	r4, [sp]
   230e0:	ldrd	r6, [sp, #8]
   230e4:	ldr	r8, [sp, #16]
   230e8:	ldrd	sl, [sp, #20]
   230ec:	add	sp, sp, #28
   230f0:	pop	{pc}		; (ldr pc, [sp], #4)
   230f4:	bl	11b68 <abort@plt>
   230f8:	andeq	sp, r4, ip, asr #7
   230fc:	ldr	ip, [pc, #156]	; 231a0 <__assert_fail@plt+0x115fc>
   23100:	cmp	r2, #0
   23104:	cmpne	r1, #0
   23108:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2310c:	strd	r6, [sp, #8]
   23110:	mov	r6, r2
   23114:	str	r8, [sp, #16]
   23118:	mov	r8, r3
   2311c:	strd	sl, [sp, #20]
   23120:	ldrd	r4, [ip]
   23124:	str	lr, [sp, #28]
   23128:	sub	sp, sp, #48	; 0x30
   2312c:	mov	lr, #10
   23130:	ldrd	r2, [ip, #8]
   23134:	ldrd	sl, [ip, #16]
   23138:	strd	r4, [sp]
   2313c:	ldrd	r4, [ip, #32]
   23140:	str	lr, [sp]
   23144:	strd	r2, [sp, #8]
   23148:	strd	sl, [sp, #16]
   2314c:	ldrd	r2, [ip, #24]
   23150:	ldrd	sl, [ip, #40]	; 0x28
   23154:	strd	r2, [sp, #24]
   23158:	strd	r4, [sp, #32]
   2315c:	strd	sl, [sp, #40]	; 0x28
   23160:	beq	2319c <__assert_fail@plt+0x115f8>
   23164:	ldr	r2, [sp, #80]	; 0x50
   23168:	mov	r7, r1
   2316c:	mov	r3, sp
   23170:	mov	r1, r8
   23174:	str	r7, [sp, #40]	; 0x28
   23178:	str	r6, [sp, #44]	; 0x2c
   2317c:	bl	21a3c <__assert_fail@plt+0xfe98>
   23180:	add	sp, sp, #48	; 0x30
   23184:	ldrd	r4, [sp]
   23188:	ldrd	r6, [sp, #8]
   2318c:	ldr	r8, [sp, #16]
   23190:	ldrd	sl, [sp, #20]
   23194:	add	sp, sp, #28
   23198:	pop	{pc}		; (ldr pc, [sp], #4)
   2319c:	bl	11b68 <abort@plt>
   231a0:	andeq	sp, r4, ip, asr #7
   231a4:	ldr	ip, [pc, #512]	; 233ac <__assert_fail@plt+0x11808>
   231a8:	cmp	r0, #0
   231ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   231b0:	ldrd	r4, [ip, #16]
   231b4:	strd	r6, [sp, #8]
   231b8:	clz	r6, r1
   231bc:	mov	r7, r1
   231c0:	strd	r8, [sp, #16]
   231c4:	mov	r8, r0
   231c8:	lsr	r6, r6, #5
   231cc:	strd	sl, [sp, #24]
   231d0:	mov	fp, r2
   231d4:	mov	sl, #10
   231d8:	ldrd	r2, [ip]
   231dc:	moveq	r6, #1
   231e0:	str	lr, [sp, #32]
   231e4:	sub	sp, sp, #92	; 0x5c
   231e8:	cmp	r6, #0
   231ec:	ldrd	r0, [ip, #8]
   231f0:	strd	r2, [sp, #40]	; 0x28
   231f4:	strd	r4, [sp, #56]	; 0x38
   231f8:	ldrd	r2, [ip, #24]
   231fc:	strd	r0, [sp, #48]	; 0x30
   23200:	ldrd	r0, [ip, #32]
   23204:	str	sl, [sp, #40]	; 0x28
   23208:	ldrd	r4, [ip, #40]	; 0x28
   2320c:	strd	r2, [sp, #64]	; 0x40
   23210:	strd	r0, [sp, #72]	; 0x48
   23214:	strd	r4, [sp, #80]	; 0x50
   23218:	bne	233a8 <__assert_fail@plt+0x11804>
   2321c:	movw	r5, #53724	; 0xd1dc
   23220:	movt	r5, #4
   23224:	str	r8, [sp, #80]	; 0x50
   23228:	str	r7, [sp, #84]	; 0x54
   2322c:	bl	119b8 <__errno_location@plt>
   23230:	ldr	r3, [r0]
   23234:	mov	r9, r0
   23238:	ldr	r2, [r5, #4]
   2323c:	ldr	r4, [r5]
   23240:	str	r3, [sp, #28]
   23244:	cmp	r2, #0
   23248:	movgt	r1, sl
   2324c:	bgt	232b4 <__assert_fail@plt+0x11710>
   23250:	add	r3, r5, #8
   23254:	str	r2, [sp, #36]	; 0x24
   23258:	rsb	r2, r2, #1
   2325c:	cmp	r4, r3
   23260:	beq	2337c <__assert_fail@plt+0x117d8>
   23264:	mov	r1, #8
   23268:	mov	r0, r4
   2326c:	mvn	r3, #-2147483648	; 0x80000000
   23270:	str	r1, [sp]
   23274:	add	r1, sp, #36	; 0x24
   23278:	bl	36dc4 <__assert_fail@plt+0x25220>
   2327c:	mov	r4, r0
   23280:	str	r0, [r5]
   23284:	ldr	r0, [r5, #4]
   23288:	mov	r1, #0
   2328c:	ldr	r2, [sp, #36]	; 0x24
   23290:	sub	r2, r2, r0
   23294:	add	r0, r4, r0, lsl #3
   23298:	lsl	r2, r2, #3
   2329c:	bl	119e8 <memset@plt>
   232a0:	ldr	r3, [sp, #36]	; 0x24
   232a4:	ldr	r1, [sp, #40]	; 0x28
   232a8:	ldr	r8, [sp, #80]	; 0x50
   232ac:	str	r3, [r5, #4]
   232b0:	ldr	r7, [sp, #84]	; 0x54
   232b4:	mvn	r3, #0
   232b8:	mov	r2, fp
   232bc:	ldr	r6, [sp, #44]	; 0x2c
   232c0:	ldr	sl, [r4]
   232c4:	ldr	r5, [r4, #4]
   232c8:	orr	r6, r6, #1
   232cc:	stm	sp, {r1, r6}
   232d0:	add	r1, sp, #48	; 0x30
   232d4:	str	r8, [sp, #12]
   232d8:	mov	r0, r5
   232dc:	str	r1, [sp, #8]
   232e0:	mov	r1, sl
   232e4:	str	r7, [sp, #16]
   232e8:	bl	20050 <__assert_fail@plt+0xe4ac>
   232ec:	cmp	sl, r0
   232f0:	bhi	23354 <__assert_fail@plt+0x117b0>
   232f4:	add	r7, r0, #1
   232f8:	movw	r3, #53964	; 0xd2cc
   232fc:	movt	r3, #4
   23300:	cmp	r5, r3
   23304:	str	r7, [r4]
   23308:	beq	23314 <__assert_fail@plt+0x11770>
   2330c:	mov	r0, r5
   23310:	bl	19610 <__assert_fail@plt+0x7a6c>
   23314:	mov	r0, r7
   23318:	bl	36b20 <__assert_fail@plt+0x24f7c>
   2331c:	ldr	r3, [sp, #40]	; 0x28
   23320:	mov	r2, fp
   23324:	mov	r1, r7
   23328:	mov	r5, r0
   2332c:	ldr	lr, [sp, #80]	; 0x50
   23330:	ldr	ip, [sp, #84]	; 0x54
   23334:	str	r0, [r4, #4]
   23338:	add	r4, sp, #48	; 0x30
   2333c:	stm	sp, {r3, r6}
   23340:	mvn	r3, #0
   23344:	str	r4, [sp, #8]
   23348:	str	lr, [sp, #12]
   2334c:	str	ip, [sp, #16]
   23350:	bl	20050 <__assert_fail@plt+0xe4ac>
   23354:	ldr	r3, [sp, #28]
   23358:	mov	r0, r5
   2335c:	str	r3, [r9]
   23360:	add	sp, sp, #92	; 0x5c
   23364:	ldrd	r4, [sp]
   23368:	ldrd	r6, [sp, #8]
   2336c:	ldrd	r8, [sp, #16]
   23370:	ldrd	sl, [sp, #24]
   23374:	add	sp, sp, #32
   23378:	pop	{pc}		; (ldr pc, [sp], #4)
   2337c:	mov	r1, #8
   23380:	mvn	r3, #-2147483648	; 0x80000000
   23384:	mov	r0, r6
   23388:	str	r1, [sp]
   2338c:	add	r1, sp, #36	; 0x24
   23390:	bl	36dc4 <__assert_fail@plt+0x25220>
   23394:	ldrd	r2, [r5, #8]
   23398:	mov	r4, r0
   2339c:	str	r0, [r5]
   233a0:	strd	r2, [r0]
   233a4:	b	23284 <__assert_fail@plt+0x116e0>
   233a8:	bl	11b68 <abort@plt>
   233ac:	andeq	sp, r4, ip, asr #7
   233b0:	ldr	ip, [pc, #536]	; 235d0 <__assert_fail@plt+0x11a2c>
   233b4:	cmp	r0, #0
   233b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   233bc:	ldrd	r4, [ip, #16]
   233c0:	strd	r6, [sp, #8]
   233c4:	mov	r6, r1
   233c8:	mov	r7, r0
   233cc:	strd	r8, [sp, #16]
   233d0:	mov	r9, #10
   233d4:	strd	sl, [sp, #24]
   233d8:	mov	sl, r2
   233dc:	mov	fp, r3
   233e0:	str	lr, [sp, #32]
   233e4:	clz	lr, r1
   233e8:	sub	sp, sp, #92	; 0x5c
   233ec:	ldrd	r2, [ip]
   233f0:	lsr	lr, lr, #5
   233f4:	moveq	lr, #1
   233f8:	ldrd	r0, [ip, #8]
   233fc:	cmp	lr, #0
   23400:	strd	r4, [sp, #56]	; 0x38
   23404:	ldrd	r4, [ip, #40]	; 0x28
   23408:	str	lr, [sp, #28]
   2340c:	strd	r2, [sp, #40]	; 0x28
   23410:	ldrd	r2, [ip, #24]
   23414:	strd	r0, [sp, #48]	; 0x30
   23418:	ldrd	r0, [ip, #32]
   2341c:	str	r9, [sp, #40]	; 0x28
   23420:	strd	r2, [sp, #64]	; 0x40
   23424:	strd	r4, [sp, #80]	; 0x50
   23428:	strd	r0, [sp, #72]	; 0x48
   2342c:	bne	235cc <__assert_fail@plt+0x11a28>
   23430:	movw	r5, #53724	; 0xd1dc
   23434:	movt	r5, #4
   23438:	str	r7, [sp, #80]	; 0x50
   2343c:	str	r6, [sp, #84]	; 0x54
   23440:	bl	119b8 <__errno_location@plt>
   23444:	ldr	r3, [r0]
   23448:	mov	r8, r0
   2344c:	ldr	r2, [r5, #4]
   23450:	ldr	r4, [r5]
   23454:	str	r3, [sp, #24]
   23458:	cmp	r2, #0
   2345c:	movgt	r1, r9
   23460:	bgt	234c8 <__assert_fail@plt+0x11924>
   23464:	add	r3, r5, #8
   23468:	str	r2, [sp, #36]	; 0x24
   2346c:	rsb	r2, r2, #1
   23470:	cmp	r4, r3
   23474:	beq	235a0 <__assert_fail@plt+0x119fc>
   23478:	mov	r1, #8
   2347c:	mov	r0, r4
   23480:	mvn	r3, #-2147483648	; 0x80000000
   23484:	str	r1, [sp]
   23488:	add	r1, sp, #36	; 0x24
   2348c:	bl	36dc4 <__assert_fail@plt+0x25220>
   23490:	mov	r4, r0
   23494:	str	r0, [r5]
   23498:	ldr	r0, [r5, #4]
   2349c:	mov	r1, #0
   234a0:	ldr	r2, [sp, #36]	; 0x24
   234a4:	sub	r2, r2, r0
   234a8:	add	r0, r4, r0, lsl #3
   234ac:	lsl	r2, r2, #3
   234b0:	bl	119e8 <memset@plt>
   234b4:	ldr	r3, [sp, #36]	; 0x24
   234b8:	ldr	r1, [sp, #40]	; 0x28
   234bc:	ldr	r7, [sp, #80]	; 0x50
   234c0:	str	r3, [r5, #4]
   234c4:	ldr	r6, [sp, #84]	; 0x54
   234c8:	mov	r3, fp
   234cc:	mov	r2, sl
   234d0:	ldr	r0, [sp, #44]	; 0x2c
   234d4:	ldr	r9, [r4]
   234d8:	ldr	r5, [r4, #4]
   234dc:	orr	r0, r0, #1
   234e0:	str	r1, [sp]
   234e4:	add	r1, sp, #48	; 0x30
   234e8:	str	r0, [sp, #4]
   234ec:	str	r1, [sp, #8]
   234f0:	mov	r1, r9
   234f4:	str	r7, [sp, #12]
   234f8:	str	r6, [sp, #16]
   234fc:	str	r0, [sp, #28]
   23500:	mov	r0, r5
   23504:	bl	20050 <__assert_fail@plt+0xe4ac>
   23508:	cmp	r9, r0
   2350c:	bhi	23578 <__assert_fail@plt+0x119d4>
   23510:	add	r6, r0, #1
   23514:	movw	r3, #53964	; 0xd2cc
   23518:	movt	r3, #4
   2351c:	cmp	r5, r3
   23520:	str	r6, [r4]
   23524:	beq	23530 <__assert_fail@plt+0x1198c>
   23528:	mov	r0, r5
   2352c:	bl	19610 <__assert_fail@plt+0x7a6c>
   23530:	mov	r0, r6
   23534:	bl	36b20 <__assert_fail@plt+0x24f7c>
   23538:	ldr	lr, [sp, #40]	; 0x28
   2353c:	mov	r1, r6
   23540:	mov	r3, fp
   23544:	mov	r2, sl
   23548:	mov	r5, r0
   2354c:	ldr	r6, [sp, #80]	; 0x50
   23550:	ldr	ip, [sp, #84]	; 0x54
   23554:	str	r0, [r4, #4]
   23558:	str	lr, [sp]
   2355c:	ldr	lr, [sp, #28]
   23560:	str	lr, [sp, #4]
   23564:	add	lr, sp, #48	; 0x30
   23568:	str	r6, [sp, #12]
   2356c:	str	lr, [sp, #8]
   23570:	str	ip, [sp, #16]
   23574:	bl	20050 <__assert_fail@plt+0xe4ac>
   23578:	ldr	r3, [sp, #24]
   2357c:	mov	r0, r5
   23580:	str	r3, [r8]
   23584:	add	sp, sp, #92	; 0x5c
   23588:	ldrd	r4, [sp]
   2358c:	ldrd	r6, [sp, #8]
   23590:	ldrd	r8, [sp, #16]
   23594:	ldrd	sl, [sp, #24]
   23598:	add	sp, sp, #32
   2359c:	pop	{pc}		; (ldr pc, [sp], #4)
   235a0:	mov	r1, #8
   235a4:	mvn	r3, #-2147483648	; 0x80000000
   235a8:	ldr	r0, [sp, #28]
   235ac:	str	r1, [sp]
   235b0:	add	r1, sp, #36	; 0x24
   235b4:	bl	36dc4 <__assert_fail@plt+0x25220>
   235b8:	ldrd	r2, [r5, #8]
   235bc:	mov	r4, r0
   235c0:	str	r0, [r5]
   235c4:	strd	r2, [r0]
   235c8:	b	23498 <__assert_fail@plt+0x118f4>
   235cc:	bl	11b68 <abort@plt>
   235d0:	andeq	sp, r4, ip, asr #7
   235d4:	ldr	r3, [pc]	; 235dc <__assert_fail@plt+0x11a38>
   235d8:	b	21a3c <__assert_fail@plt+0xfe98>
   235dc:	andeq	sp, r4, ip, ror #3
   235e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   235e4:	movw	r4, #53724	; 0xd1dc
   235e8:	movt	r4, #4
   235ec:	strd	r6, [sp, #8]
   235f0:	strd	r8, [sp, #16]
   235f4:	strd	sl, [sp, #24]
   235f8:	mov	sl, r0
   235fc:	mov	fp, r1
   23600:	str	lr, [sp, #32]
   23604:	sub	sp, sp, #44	; 0x2c
   23608:	bl	119b8 <__errno_location@plt>
   2360c:	ldr	r3, [r0]
   23610:	mov	r8, r0
   23614:	ldr	r2, [r4, #4]
   23618:	ldr	r5, [r4]
   2361c:	str	r3, [sp, #28]
   23620:	cmp	r2, #0
   23624:	bgt	23680 <__assert_fail@plt+0x11adc>
   23628:	add	r3, r4, #8
   2362c:	str	r2, [sp, #36]	; 0x24
   23630:	rsb	r2, r2, #1
   23634:	cmp	r5, r3
   23638:	beq	2375c <__assert_fail@plt+0x11bb8>
   2363c:	mov	r1, #8
   23640:	mov	r0, r5
   23644:	mvn	r3, #-2147483648	; 0x80000000
   23648:	str	r1, [sp]
   2364c:	add	r1, sp, #36	; 0x24
   23650:	bl	36dc4 <__assert_fail@plt+0x25220>
   23654:	mov	r5, r0
   23658:	str	r0, [r4]
   2365c:	ldr	r0, [r4, #4]
   23660:	mov	r1, #0
   23664:	ldr	r2, [sp, #36]	; 0x24
   23668:	sub	r2, r2, r0
   2366c:	add	r0, r5, r0, lsl #3
   23670:	lsl	r2, r2, #3
   23674:	bl	119e8 <memset@plt>
   23678:	ldr	r3, [sp, #36]	; 0x24
   2367c:	str	r3, [r4, #4]
   23680:	ldr	ip, [r4, #16]
   23684:	mov	r3, fp
   23688:	mov	r2, sl
   2368c:	ldr	r7, [r4, #20]
   23690:	ldr	r0, [pc, #240]	; 23788 <__assert_fail@plt+0x11be4>
   23694:	ldr	r9, [r5]
   23698:	orr	r7, r7, #1
   2369c:	ldr	r6, [r5, #4]
   236a0:	str	ip, [sp]
   236a4:	ldr	ip, [r4, #56]	; 0x38
   236a8:	mov	r1, r9
   236ac:	str	r7, [sp, #4]
   236b0:	ldr	lr, [r4, #60]	; 0x3c
   236b4:	str	r0, [sp, #8]
   236b8:	mov	r0, r6
   236bc:	str	ip, [sp, #12]
   236c0:	str	lr, [sp, #16]
   236c4:	bl	20050 <__assert_fail@plt+0xe4ac>
   236c8:	cmp	r9, r0
   236cc:	bhi	23734 <__assert_fail@plt+0x11b90>
   236d0:	add	r9, r0, #1
   236d4:	movw	r3, #53964	; 0xd2cc
   236d8:	movt	r3, #4
   236dc:	cmp	r6, r3
   236e0:	str	r9, [r5]
   236e4:	beq	236f0 <__assert_fail@plt+0x11b4c>
   236e8:	mov	r0, r6
   236ec:	bl	19610 <__assert_fail@plt+0x7a6c>
   236f0:	mov	r0, r9
   236f4:	bl	36b20 <__assert_fail@plt+0x24f7c>
   236f8:	ldr	ip, [r4, #16]
   236fc:	mov	r1, r9
   23700:	mov	r3, fp
   23704:	mov	r2, sl
   23708:	mov	r6, r0
   2370c:	ldr	r9, [r4, #56]	; 0x38
   23710:	ldr	lr, [r4, #60]	; 0x3c
   23714:	str	r0, [r5, #4]
   23718:	str	ip, [sp]
   2371c:	ldr	ip, [pc, #100]	; 23788 <__assert_fail@plt+0x11be4>
   23720:	str	r7, [sp, #4]
   23724:	str	ip, [sp, #8]
   23728:	str	r9, [sp, #12]
   2372c:	str	lr, [sp, #16]
   23730:	bl	20050 <__assert_fail@plt+0xe4ac>
   23734:	ldr	r3, [sp, #28]
   23738:	mov	r0, r6
   2373c:	str	r3, [r8]
   23740:	add	sp, sp, #44	; 0x2c
   23744:	ldrd	r4, [sp]
   23748:	ldrd	r6, [sp, #8]
   2374c:	ldrd	r8, [sp, #16]
   23750:	ldrd	sl, [sp, #24]
   23754:	add	sp, sp, #32
   23758:	pop	{pc}		; (ldr pc, [sp], #4)
   2375c:	mov	r0, #8
   23760:	mvn	r3, #-2147483648	; 0x80000000
   23764:	add	r1, sp, #36	; 0x24
   23768:	str	r0, [sp]
   2376c:	mov	r0, #0
   23770:	bl	36dc4 <__assert_fail@plt+0x25220>
   23774:	ldrd	r2, [r4, #8]
   23778:	mov	r5, r0
   2377c:	str	r0, [r4]
   23780:	strd	r2, [r0]
   23784:	b	2365c <__assert_fail@plt+0x11ab8>
   23788:	strdeq	sp, [r4], -r4
   2378c:	ldr	r3, [pc, #4]	; 23798 <__assert_fail@plt+0x11bf4>
   23790:	mvn	r2, #0
   23794:	b	21a3c <__assert_fail@plt+0xfe98>
   23798:	andeq	sp, r4, ip, ror #3
   2379c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   237a0:	movw	r4, #53724	; 0xd1dc
   237a4:	movt	r4, #4
   237a8:	strd	r6, [sp, #8]
   237ac:	strd	r8, [sp, #16]
   237b0:	strd	sl, [sp, #24]
   237b4:	mov	sl, r0
   237b8:	str	lr, [sp, #32]
   237bc:	sub	sp, sp, #44	; 0x2c
   237c0:	bl	119b8 <__errno_location@plt>
   237c4:	ldr	r3, [r0]
   237c8:	mov	r8, r0
   237cc:	ldr	r2, [r4, #4]
   237d0:	ldr	r5, [r4]
   237d4:	str	r3, [sp, #28]
   237d8:	cmp	r2, #0
   237dc:	bgt	23838 <__assert_fail@plt+0x11c94>
   237e0:	add	r3, r4, #8
   237e4:	str	r2, [sp, #36]	; 0x24
   237e8:	rsb	r2, r2, #1
   237ec:	cmp	r5, r3
   237f0:	beq	23900 <__assert_fail@plt+0x11d5c>
   237f4:	mov	r1, #8
   237f8:	mov	r0, r5
   237fc:	mvn	r3, #-2147483648	; 0x80000000
   23800:	str	r1, [sp]
   23804:	add	r1, sp, #36	; 0x24
   23808:	bl	36dc4 <__assert_fail@plt+0x25220>
   2380c:	mov	r5, r0
   23810:	str	r0, [r4]
   23814:	ldr	r0, [r4, #4]
   23818:	mov	r1, #0
   2381c:	ldr	r2, [sp, #36]	; 0x24
   23820:	sub	r2, r2, r0
   23824:	add	r0, r5, r0, lsl #3
   23828:	lsl	r2, r2, #3
   2382c:	bl	119e8 <memset@plt>
   23830:	ldr	r3, [sp, #36]	; 0x24
   23834:	str	r3, [r4, #4]
   23838:	ldr	ip, [r4, #16]
   2383c:	mvn	r3, #0
   23840:	mov	r2, sl
   23844:	ldr	r7, [r4, #20]
   23848:	ldr	fp, [pc, #220]	; 2392c <__assert_fail@plt+0x11d88>
   2384c:	ldr	r9, [r5]
   23850:	orr	r7, r7, #1
   23854:	ldr	r6, [r5, #4]
   23858:	str	ip, [sp]
   2385c:	ldr	ip, [r4, #56]	; 0x38
   23860:	mov	r1, r9
   23864:	stmib	sp, {r7, fp}
   23868:	ldr	lr, [r4, #60]	; 0x3c
   2386c:	mov	r0, r6
   23870:	str	ip, [sp, #12]
   23874:	str	lr, [sp, #16]
   23878:	bl	20050 <__assert_fail@plt+0xe4ac>
   2387c:	cmp	r9, r0
   23880:	bhi	238d8 <__assert_fail@plt+0x11d34>
   23884:	add	r9, r0, #1
   23888:	movw	r3, #53964	; 0xd2cc
   2388c:	movt	r3, #4
   23890:	cmp	r6, r3
   23894:	str	r9, [r5]
   23898:	beq	238a4 <__assert_fail@plt+0x11d00>
   2389c:	mov	r0, r6
   238a0:	bl	19610 <__assert_fail@plt+0x7a6c>
   238a4:	mov	r0, r9
   238a8:	bl	36b20 <__assert_fail@plt+0x24f7c>
   238ac:	ldr	r3, [r4, #16]
   238b0:	mov	r2, sl
   238b4:	mov	r1, r9
   238b8:	mov	r6, r0
   238bc:	ldr	lr, [r4, #56]	; 0x38
   238c0:	ldr	ip, [r4, #60]	; 0x3c
   238c4:	str	r0, [r5, #4]
   238c8:	stm	sp, {r3, r7, fp, lr}
   238cc:	mvn	r3, #0
   238d0:	str	ip, [sp, #16]
   238d4:	bl	20050 <__assert_fail@plt+0xe4ac>
   238d8:	ldr	r3, [sp, #28]
   238dc:	mov	r0, r6
   238e0:	str	r3, [r8]
   238e4:	add	sp, sp, #44	; 0x2c
   238e8:	ldrd	r4, [sp]
   238ec:	ldrd	r6, [sp, #8]
   238f0:	ldrd	r8, [sp, #16]
   238f4:	ldrd	sl, [sp, #24]
   238f8:	add	sp, sp, #32
   238fc:	pop	{pc}		; (ldr pc, [sp], #4)
   23900:	mov	r0, #8
   23904:	mvn	r3, #-2147483648	; 0x80000000
   23908:	add	r1, sp, #36	; 0x24
   2390c:	str	r0, [sp]
   23910:	mov	r0, #0
   23914:	bl	36dc4 <__assert_fail@plt+0x25220>
   23918:	ldrd	r2, [r4, #8]
   2391c:	mov	r5, r0
   23920:	str	r0, [r4]
   23924:	strd	r2, [r0]
   23928:	b	23814 <__assert_fail@plt+0x11c70>
   2392c:	strdeq	sp, [r4], -r4
   23930:	ldr	r3, [r1, #40]	; 0x28
   23934:	ldr	ip, [r1, #56]	; 0x38
   23938:	cmp	ip, r3
   2393c:	ble	23a00 <__assert_fail@plt+0x11e5c>
   23940:	str	r4, [sp, #-8]!
   23944:	ldr	r4, [r1, #80]	; 0x50
   23948:	str	lr, [sp, #4]
   2394c:	ldr	lr, [r1, #4]
   23950:	cmp	r4, #1
   23954:	ldrb	ip, [lr, r3]
   23958:	strb	ip, [r0]
   2395c:	ble	2397c <__assert_fail@plt+0x11dd8>
   23960:	ldr	r4, [r1, #28]
   23964:	cmp	r3, r4
   23968:	beq	2397c <__assert_fail@plt+0x11dd8>
   2396c:	ldr	r4, [r1, #8]
   23970:	ldr	r4, [r4, r3, lsl #2]
   23974:	cmn	r4, #1
   23978:	beq	239c0 <__assert_fail@plt+0x11e1c>
   2397c:	cmp	ip, #92	; 0x5c
   23980:	beq	239b8 <__assert_fail@plt+0x11e14>
   23984:	cmp	ip, #91	; 0x5b
   23988:	beq	23a40 <__assert_fail@plt+0x11e9c>
   2398c:	cmp	ip, #93	; 0x5d
   23990:	beq	23a98 <__assert_fail@plt+0x11ef4>
   23994:	cmp	ip, #94	; 0x5e
   23998:	bne	239dc <__assert_fail@plt+0x11e38>
   2399c:	mov	r2, #25
   239a0:	mov	r3, #1
   239a4:	ldr	r4, [sp]
   239a8:	add	sp, sp, #4
   239ac:	strb	r2, [r0, #4]
   239b0:	mov	r0, r3
   239b4:	pop	{pc}		; (ldr pc, [sp], #4)
   239b8:	tst	r2, #1
   239bc:	bne	23a14 <__assert_fail@plt+0x11e70>
   239c0:	mov	r2, #1
   239c4:	mov	r3, r2
   239c8:	strb	r2, [r0, #4]
   239cc:	ldr	r4, [sp]
   239d0:	add	sp, sp, #4
   239d4:	mov	r0, r3
   239d8:	pop	{pc}		; (ldr pc, [sp], #4)
   239dc:	cmp	ip, #45	; 0x2d
   239e0:	bne	239c0 <__assert_fail@plt+0x11e1c>
   239e4:	mov	r2, #22
   239e8:	mov	r3, #1
   239ec:	ldr	r4, [sp]
   239f0:	add	sp, sp, #4
   239f4:	strb	r2, [r0, #4]
   239f8:	mov	r0, r3
   239fc:	pop	{pc}		; (ldr pc, [sp], #4)
   23a00:	mov	r2, #2
   23a04:	mov	r3, #0
   23a08:	strb	r2, [r0, #4]
   23a0c:	mov	r0, r3
   23a10:	bx	lr
   23a14:	ldr	r2, [r1, #48]	; 0x30
   23a18:	add	r3, r3, #1
   23a1c:	cmp	r3, r2
   23a20:	bge	239c0 <__assert_fail@plt+0x11e1c>
   23a24:	str	r3, [r1, #40]	; 0x28
   23a28:	mov	r2, #1
   23a2c:	ldrb	r1, [lr, r3]
   23a30:	mov	r3, r2
   23a34:	strb	r1, [r0]
   23a38:	strb	r2, [r0, #4]
   23a3c:	b	239cc <__assert_fail@plt+0x11e28>
   23a40:	ldr	r1, [r1, #48]	; 0x30
   23a44:	add	ip, r3, #1
   23a48:	cmp	ip, r1
   23a4c:	bge	23a80 <__assert_fail@plt+0x11edc>
   23a50:	add	r3, lr, r3
   23a54:	ldrb	r3, [r3, #1]
   23a58:	cmp	r3, #58	; 0x3a
   23a5c:	strb	r3, [r0]
   23a60:	beq	23ac4 <__assert_fail@plt+0x11f20>
   23a64:	cmp	r3, #61	; 0x3d
   23a68:	beq	23ab4 <__assert_fail@plt+0x11f10>
   23a6c:	cmp	r3, #46	; 0x2e
   23a70:	moveq	r2, #26
   23a74:	moveq	r3, #2
   23a78:	strbeq	r2, [r0, #4]
   23a7c:	beq	239cc <__assert_fail@plt+0x11e28>
   23a80:	mov	r2, #1
   23a84:	mov	r1, #91	; 0x5b
   23a88:	mov	r3, r2
   23a8c:	strb	r1, [r0]
   23a90:	strb	r2, [r0, #4]
   23a94:	b	239cc <__assert_fail@plt+0x11e28>
   23a98:	mov	r2, #21
   23a9c:	mov	r3, #1
   23aa0:	ldr	r4, [sp]
   23aa4:	add	sp, sp, #4
   23aa8:	strb	r2, [r0, #4]
   23aac:	mov	r0, r3
   23ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   23ab4:	mov	r2, #28
   23ab8:	mov	r3, #2
   23abc:	strb	r2, [r0, #4]
   23ac0:	b	239cc <__assert_fail@plt+0x11e28>
   23ac4:	tst	r2, #4
   23ac8:	beq	23a80 <__assert_fail@plt+0x11edc>
   23acc:	mov	r2, #30
   23ad0:	mov	r3, #2
   23ad4:	strb	r2, [r0, #4]
   23ad8:	b	239cc <__assert_fail@plt+0x11e28>
   23adc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23ae0:	strd	r6, [sp, #8]
   23ae4:	ldr	r7, [r0, #84]	; 0x54
   23ae8:	strd	r8, [sp, #16]
   23aec:	strd	sl, [sp, #24]
   23af0:	mov	fp, r1
   23af4:	str	lr, [sp, #32]
   23af8:	sub	sp, sp, #52	; 0x34
   23afc:	ldr	r8, [r7, #24]
   23b00:	str	r3, [sp, #24]
   23b04:	add	r3, r3, r3, lsl #1
   23b08:	add	r8, r8, r3, lsl #2
   23b0c:	ldr	r1, [r8, #4]
   23b10:	cmp	r1, #0
   23b14:	ble	23cc8 <__assert_fail@plt+0x12124>
   23b18:	ldr	r3, [sp, #88]	; 0x58
   23b1c:	mov	r9, r2
   23b20:	mov	r2, #1
   23b24:	mov	sl, r0
   23b28:	and	r0, fp, #2
   23b2c:	mov	r4, #0
   23b30:	str	r0, [sp, #12]
   23b34:	and	r0, fp, #1
   23b38:	add	r3, r3, r3, lsl r2
   23b3c:	str	r0, [sp, #16]
   23b40:	lsl	r2, r2, r9
   23b44:	lsl	r3, r3, #3
   23b48:	str	r2, [sp, #20]
   23b4c:	str	r3, [sp, #28]
   23b50:	mvn	r3, r2
   23b54:	str	r3, [sp, #32]
   23b58:	b	23b70 <__assert_fail@plt+0x11fcc>
   23b5c:	cmp	r3, #4
   23b60:	beq	23bec <__assert_fail@plt+0x12048>
   23b64:	add	r4, r4, #1
   23b68:	cmp	r4, r1
   23b6c:	bge	23cc8 <__assert_fail@plt+0x12124>
   23b70:	ldr	r3, [r8, #8]
   23b74:	ldr	r2, [r7]
   23b78:	ldr	r5, [r3, r4, lsl #2]
   23b7c:	add	r3, r2, r5, lsl #3
   23b80:	ldrb	r3, [r3, #4]
   23b84:	cmp	r3, #8
   23b88:	beq	23bb4 <__assert_fail@plt+0x12010>
   23b8c:	cmp	r3, #9
   23b90:	bne	23b5c <__assert_fail@plt+0x11fb8>
   23b94:	ldr	r3, [sp, #12]
   23b98:	cmp	r3, #0
   23b9c:	beq	23b64 <__assert_fail@plt+0x11fc0>
   23ba0:	ldr	r3, [r2, r5, lsl #3]
   23ba4:	cmp	r3, r9
   23ba8:	bne	23b64 <__assert_fail@plt+0x11fc0>
   23bac:	mov	r0, #0
   23bb0:	b	23bd0 <__assert_fail@plt+0x1202c>
   23bb4:	ldr	r3, [sp, #16]
   23bb8:	cmp	r3, #0
   23bbc:	beq	23b64 <__assert_fail@plt+0x11fc0>
   23bc0:	ldr	r3, [r2, r5, lsl #3]
   23bc4:	cmp	r3, r9
   23bc8:	bne	23b64 <__assert_fail@plt+0x11fc0>
   23bcc:	mvn	r0, #0
   23bd0:	add	sp, sp, #52	; 0x34
   23bd4:	ldrd	r4, [sp]
   23bd8:	ldrd	r6, [sp, #8]
   23bdc:	ldrd	r8, [sp, #16]
   23be0:	ldrd	sl, [sp, #24]
   23be4:	add	sp, sp, #32
   23be8:	pop	{pc}		; (ldr pc, [sp], #4)
   23bec:	ldr	r3, [sp, #88]	; 0x58
   23bf0:	cmn	r3, #1
   23bf4:	beq	23b64 <__assert_fail@plt+0x11fc0>
   23bf8:	add	r3, r5, r5, lsl #1
   23bfc:	ldr	r2, [sp, #28]
   23c00:	cmp	r9, #31
   23c04:	ldr	r6, [sl, #116]	; 0x74
   23c08:	lsl	r3, r3, #2
   23c0c:	str	r3, [sp, #36]	; 0x24
   23c10:	add	r6, r6, r2
   23c14:	bgt	23cd0 <__assert_fail@plt+0x1212c>
   23c18:	ldr	r3, [sp, #12]
   23c1c:	add	r6, r6, #24
   23c20:	str	r8, [sp, #40]	; 0x28
   23c24:	str	r4, [sp, #44]	; 0x2c
   23c28:	ldr	r4, [sp, #24]
   23c2c:	cmp	r3, #0
   23c30:	bne	23d60 <__assert_fail@plt+0x121bc>
   23c34:	ldr	r8, [sp, #36]	; 0x24
   23c38:	ldr	r3, [r6, #-24]	; 0xffffffe8
   23c3c:	cmp	r5, r3
   23c40:	bne	23ca0 <__assert_fail@plt+0x120fc>
   23c44:	ldr	r3, [r6, #-8]
   23c48:	mov	r2, r9
   23c4c:	mov	r1, fp
   23c50:	mov	r0, sl
   23c54:	ldr	ip, [sp, #20]
   23c58:	tst	ip, r3
   23c5c:	beq	23ca0 <__assert_fail@plt+0x120fc>
   23c60:	ldr	r3, [r7, #20]
   23c64:	add	r3, r3, r8
   23c68:	ldr	r3, [r3, #8]
   23c6c:	ldr	ip, [r3]
   23c70:	cmp	r4, ip
   23c74:	mov	r3, ip
   23c78:	beq	23d54 <__assert_fail@plt+0x121b0>
   23c7c:	ldr	ip, [sp, #88]	; 0x58
   23c80:	str	ip, [sp]
   23c84:	bl	23adc <__assert_fail@plt+0x11f38>
   23c88:	cmn	r0, #1
   23c8c:	beq	23bcc <__assert_fail@plt+0x12028>
   23c90:	ldr	r3, [r6, #-8]
   23c94:	ldr	r2, [sp, #32]
   23c98:	and	r3, r3, r2
   23c9c:	str	r3, [r6, #-8]
   23ca0:	add	r6, r6, #24
   23ca4:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   23ca8:	cmp	r3, #0
   23cac:	bne	23c38 <__assert_fail@plt+0x12094>
   23cb0:	ldr	r8, [sp, #40]	; 0x28
   23cb4:	ldr	r4, [sp, #44]	; 0x2c
   23cb8:	add	r4, r4, #1
   23cbc:	ldr	r1, [r8, #4]
   23cc0:	cmp	r4, r1
   23cc4:	blt	23b70 <__assert_fail@plt+0x11fcc>
   23cc8:	asr	r0, fp, #1
   23ccc:	b	23bd0 <__assert_fail@plt+0x1202c>
   23cd0:	ldr	r2, [sp, #12]
   23cd4:	add	r6, r6, #24
   23cd8:	cmp	r2, #0
   23cdc:	bne	23dec <__assert_fail@plt+0x12248>
   23ce0:	str	r8, [sp, #36]	; 0x24
   23ce4:	mov	r8, r3
   23ce8:	str	r4, [sp, #40]	; 0x28
   23cec:	ldr	r4, [sp, #24]
   23cf0:	mov	r2, r9
   23cf4:	mov	r1, fp
   23cf8:	ldr	r3, [r6, #-24]	; 0xffffffe8
   23cfc:	mov	r0, sl
   23d00:	add	r6, r6, #24
   23d04:	cmp	r5, r3
   23d08:	bne	23d3c <__assert_fail@plt+0x12198>
   23d0c:	ldr	r3, [r7, #20]
   23d10:	add	r3, r3, r8
   23d14:	ldr	r3, [r3, #8]
   23d18:	ldr	ip, [r3]
   23d1c:	cmp	r4, ip
   23d20:	mov	r3, ip
   23d24:	beq	23d54 <__assert_fail@plt+0x121b0>
   23d28:	ldr	ip, [sp, #88]	; 0x58
   23d2c:	str	ip, [sp]
   23d30:	bl	23adc <__assert_fail@plt+0x11f38>
   23d34:	cmn	r0, #1
   23d38:	beq	23bcc <__assert_fail@plt+0x12028>
   23d3c:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   23d40:	cmp	r3, #0
   23d44:	bne	23cf0 <__assert_fail@plt+0x1214c>
   23d48:	ldr	r8, [sp, #36]	; 0x24
   23d4c:	ldr	r4, [sp, #40]	; 0x28
   23d50:	b	23cb8 <__assert_fail@plt+0x12114>
   23d54:	ldr	r3, [sp, #16]
   23d58:	rsb	r0, r3, #0
   23d5c:	b	23bd0 <__assert_fail@plt+0x1202c>
   23d60:	ldr	r8, [sp, #88]	; 0x58
   23d64:	b	23d88 <__assert_fail@plt+0x121e4>
   23d68:	ldr	r3, [r6, #-8]
   23d6c:	ldr	r2, [sp, #32]
   23d70:	and	r3, r3, r2
   23d74:	str	r3, [r6, #-8]
   23d78:	add	r6, r6, #24
   23d7c:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   23d80:	cmp	r3, #0
   23d84:	beq	23cb0 <__assert_fail@plt+0x1210c>
   23d88:	ldr	r3, [r6, #-24]	; 0xffffffe8
   23d8c:	cmp	r3, r5
   23d90:	bne	23d78 <__assert_fail@plt+0x121d4>
   23d94:	ldr	r3, [r6, #-8]
   23d98:	mov	r2, r9
   23d9c:	mov	r1, fp
   23da0:	mov	r0, sl
   23da4:	ldr	ip, [sp, #20]
   23da8:	tst	ip, r3
   23dac:	beq	23d78 <__assert_fail@plt+0x121d4>
   23db0:	ldr	r3, [r7, #20]
   23db4:	ldr	ip, [sp, #36]	; 0x24
   23db8:	add	r3, r3, ip
   23dbc:	ldr	r3, [r3, #8]
   23dc0:	ldr	ip, [r3]
   23dc4:	cmp	r4, ip
   23dc8:	mov	r3, ip
   23dcc:	beq	23d54 <__assert_fail@plt+0x121b0>
   23dd0:	str	r8, [sp]
   23dd4:	bl	23adc <__assert_fail@plt+0x11f38>
   23dd8:	cmn	r0, #1
   23ddc:	beq	23bcc <__assert_fail@plt+0x12028>
   23de0:	cmp	r0, #0
   23de4:	bne	23d68 <__assert_fail@plt+0x121c4>
   23de8:	b	23bac <__assert_fail@plt+0x12008>
   23dec:	str	r8, [sp, #40]	; 0x28
   23df0:	str	r4, [sp, #44]	; 0x2c
   23df4:	ldr	r4, [sp, #24]
   23df8:	ldr	r8, [sp, #88]	; 0x58
   23dfc:	b	23e0c <__assert_fail@plt+0x12268>
   23e00:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   23e04:	cmp	r3, #0
   23e08:	beq	23cb0 <__assert_fail@plt+0x1210c>
   23e0c:	ldr	r3, [r6, #-24]	; 0xffffffe8
   23e10:	mov	r2, r9
   23e14:	mov	r1, fp
   23e18:	mov	r0, sl
   23e1c:	add	r6, r6, #24
   23e20:	cmp	r5, r3
   23e24:	bne	23e00 <__assert_fail@plt+0x1225c>
   23e28:	ldr	r3, [r7, #20]
   23e2c:	ldr	ip, [sp, #36]	; 0x24
   23e30:	add	r3, r3, ip
   23e34:	ldr	r3, [r3, #8]
   23e38:	ldr	ip, [r3]
   23e3c:	cmp	r4, ip
   23e40:	mov	r3, ip
   23e44:	beq	23d54 <__assert_fail@plt+0x121b0>
   23e48:	str	r8, [sp]
   23e4c:	bl	23adc <__assert_fail@plt+0x11f38>
   23e50:	cmn	r0, #1
   23e54:	beq	23bcc <__assert_fail@plt+0x12028>
   23e58:	cmp	r0, #0
   23e5c:	beq	23bac <__assert_fail@plt+0x12008>
   23e60:	b	23e00 <__assert_fail@plt+0x1225c>
   23e64:	ldr	r3, [r0, #80]	; 0x50
   23e68:	strd	r4, [sp, #-16]!
   23e6c:	mov	r4, r0
   23e70:	mov	r5, r1
   23e74:	str	r6, [sp, #8]
   23e78:	str	lr, [sp, #12]
   23e7c:	cmp	r3, #1
   23e80:	ble	23ec8 <__assert_fail@plt+0x12324>
   23e84:	cmn	r1, #-1073741823	; 0xc0000001
   23e88:	bhi	23f08 <__assert_fail@plt+0x12364>
   23e8c:	lsl	r6, r1, #2
   23e90:	ldr	r0, [r0, #8]
   23e94:	mov	r1, r6
   23e98:	bl	39064 <__assert_fail@plt+0x274c0>
   23e9c:	subs	r3, r0, #0
   23ea0:	beq	23f08 <__assert_fail@plt+0x12364>
   23ea4:	ldr	r0, [r4, #12]
   23ea8:	str	r3, [r4, #8]
   23eac:	cmp	r0, #0
   23eb0:	beq	23ec8 <__assert_fail@plt+0x12324>
   23eb4:	mov	r1, r6
   23eb8:	bl	39064 <__assert_fail@plt+0x274c0>
   23ebc:	cmp	r0, #0
   23ec0:	beq	23f08 <__assert_fail@plt+0x12364>
   23ec4:	str	r0, [r4, #12]
   23ec8:	ldrb	r3, [r4, #75]	; 0x4b
   23ecc:	cmp	r3, #0
   23ed0:	bne	23eec <__assert_fail@plt+0x12348>
   23ed4:	str	r5, [r4, #36]	; 0x24
   23ed8:	mov	r0, #0
   23edc:	ldrd	r4, [sp]
   23ee0:	ldr	r6, [sp, #8]
   23ee4:	add	sp, sp, #12
   23ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   23eec:	mov	r1, r5
   23ef0:	ldr	r0, [r4, #4]
   23ef4:	bl	39064 <__assert_fail@plt+0x274c0>
   23ef8:	cmp	r0, #0
   23efc:	beq	23f08 <__assert_fail@plt+0x12364>
   23f00:	str	r0, [r4, #4]
   23f04:	b	23ed4 <__assert_fail@plt+0x12330>
   23f08:	ldrd	r4, [sp]
   23f0c:	mov	r0, #12
   23f10:	ldr	r6, [sp, #8]
   23f14:	add	sp, sp, #12
   23f18:	pop	{pc}		; (ldr pc, [sp], #4)
   23f1c:	ldr	r3, [r1, #8]
   23f20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23f24:	mov	r4, #0
   23f28:	mov	r5, r1
   23f2c:	strd	r6, [sp, #8]
   23f30:	mov	r7, r2
   23f34:	str	r8, [sp, #16]
   23f38:	mov	r8, r0
   23f3c:	str	lr, [sp, #20]
   23f40:	lsl	r0, r3, #2
   23f44:	str	r2, [r1]
   23f48:	str	r3, [r1, #16]
   23f4c:	str	r4, [r1, #20]
   23f50:	bl	39028 <__assert_fail@plt+0x27484>
   23f54:	cmp	r0, r4
   23f58:	str	r0, [r5, #24]
   23f5c:	beq	24038 <__assert_fail@plt+0x12494>
   23f60:	ldr	r1, [r5, #8]
   23f64:	cmp	r1, #0
   23f68:	bgt	23f78 <__assert_fail@plt+0x123d4>
   23f6c:	b	23fc4 <__assert_fail@plt+0x12420>
   23f70:	cmp	r4, r1
   23f74:	bge	23fc4 <__assert_fail@plt+0x12420>
   23f78:	ldr	r2, [r5, #12]
   23f7c:	ldr	r3, [r8]
   23f80:	ldr	r6, [r2, r4, lsl #2]
   23f84:	add	r4, r4, #1
   23f88:	add	r3, r3, r6, lsl #3
   23f8c:	ldrb	r3, [r3, #4]
   23f90:	tst	r3, #8
   23f94:	bne	23f70 <__assert_fail@plt+0x123cc>
   23f98:	ldr	r3, [r5, #16]
   23f9c:	ldr	r1, [r5, #20]
   23fa0:	ldr	r0, [r5, #24]
   23fa4:	cmp	r3, r1
   23fa8:	beq	24010 <__assert_fail@plt+0x1246c>
   23fac:	add	r3, r1, #1
   23fb0:	str	r3, [r5, #20]
   23fb4:	str	r6, [r0, r1, lsl #2]
   23fb8:	ldr	r1, [r5, #8]
   23fbc:	cmp	r4, r1
   23fc0:	blt	23f78 <__assert_fail@plt+0x123d4>
   23fc4:	ldr	r6, [r8, #32]
   23fc8:	ldr	r4, [r8, #68]	; 0x44
   23fcc:	and	r7, r7, r4
   23fd0:	add	r7, r7, r7, lsl #1
   23fd4:	lsl	r4, r7, #2
   23fd8:	add	r7, r6, r4
   23fdc:	ldr	r3, [r6, r4]
   23fe0:	ldrd	r0, [r7, #4]
   23fe4:	add	r2, r3, #1
   23fe8:	cmp	r0, r3
   23fec:	ble	24040 <__assert_fail@plt+0x1249c>
   23ff0:	mov	r0, #0
   23ff4:	str	r2, [r6, r4]
   23ff8:	str	r5, [r1, r3, lsl #2]
   23ffc:	ldrd	r4, [sp]
   24000:	ldrd	r6, [sp, #8]
   24004:	ldr	r8, [sp, #16]
   24008:	add	sp, sp, #20
   2400c:	pop	{pc}		; (ldr pc, [sp], #4)
   24010:	add	r1, r1, #1
   24014:	lsl	r3, r1, #1
   24018:	lsl	r1, r1, #3
   2401c:	str	r3, [r5, #16]
   24020:	bl	39064 <__assert_fail@plt+0x274c0>
   24024:	cmp	r0, #0
   24028:	beq	24038 <__assert_fail@plt+0x12494>
   2402c:	str	r0, [r5, #24]
   24030:	ldr	r1, [r5, #20]
   24034:	b	23fac <__assert_fail@plt+0x12408>
   24038:	mov	r0, #12
   2403c:	b	23ffc <__assert_fail@plt+0x12458>
   24040:	mov	r0, r1
   24044:	lsl	r1, r2, #3
   24048:	lsl	r8, r2, #1
   2404c:	bl	39064 <__assert_fail@plt+0x274c0>
   24050:	subs	r1, r0, #0
   24054:	beq	24038 <__assert_fail@plt+0x12494>
   24058:	ldr	r3, [r6, r4]
   2405c:	str	r8, [r7, #4]
   24060:	str	r1, [r7, #8]
   24064:	add	r2, r3, #1
   24068:	b	23ff0 <__assert_fail@plt+0x1244c>
   2406c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   24070:	mov	r5, r0
   24074:	ldr	r4, [r0, #28]
   24078:	ldr	r3, [r0, #48]	; 0x30
   2407c:	strd	r6, [sp, #8]
   24080:	strd	r8, [sp, #16]
   24084:	ldr	r8, [r0, #36]	; 0x24
   24088:	str	lr, [sp, #24]
   2408c:	sub	sp, sp, #84	; 0x54
   24090:	cmp	r8, r3
   24094:	movge	r8, r3
   24098:	cmp	r8, r4
   2409c:	ble	24130 <__assert_fail@plt+0x1258c>
   240a0:	add	r9, r0, #16
   240a4:	ldr	r3, [r5, #64]	; 0x40
   240a8:	sub	r2, r8, r4
   240ac:	ldrd	r0, [r9]
   240b0:	cmp	r3, #0
   240b4:	strd	r0, [sp, #8]
   240b8:	bne	24184 <__assert_fail@plt+0x125e0>
   240bc:	ldr	r1, [r5]
   240c0:	ldr	r3, [r5, #24]
   240c4:	add	r3, r4, r3
   240c8:	add	r1, r1, r3
   240cc:	mov	r3, r9
   240d0:	add	r0, sp, #4
   240d4:	bl	1ec1c <__assert_fail@plt+0xd078>
   240d8:	sub	r3, r0, #1
   240dc:	cmn	r3, #3
   240e0:	bhi	24150 <__assert_fail@plt+0x125ac>
   240e4:	cmn	r0, #2
   240e8:	ldrne	lr, [sp, #4]
   240ec:	beq	2422c <__assert_fail@plt+0x12688>
   240f0:	add	r2, r4, #1
   240f4:	add	r1, r4, r0
   240f8:	lsl	r3, r4, #2
   240fc:	ldr	ip, [r5, #8]
   24100:	cmp	r2, r1
   24104:	str	lr, [ip, r4, lsl #2]
   24108:	bge	2421c <__assert_fail@plt+0x12678>
   2410c:	sub	r2, r0, #-1073741823	; 0xc0000001
   24110:	add	r3, r3, #4
   24114:	mov	r4, r1
   24118:	lsl	r2, r2, #2
   2411c:	add	r0, ip, r3
   24120:	mov	r1, #255	; 0xff
   24124:	bl	119e8 <memset@plt>
   24128:	cmp	r4, r8
   2412c:	blt	240a4 <__assert_fail@plt+0x12500>
   24130:	str	r4, [r5, #28]
   24134:	str	r4, [r5, #32]
   24138:	add	sp, sp, #84	; 0x54
   2413c:	ldrd	r4, [sp]
   24140:	ldrd	r6, [sp, #8]
   24144:	ldrd	r8, [sp, #16]
   24148:	add	sp, sp, #24
   2414c:	pop	{pc}		; (ldr pc, [sp], #4)
   24150:	ldr	r3, [r5]
   24154:	mov	r0, #1
   24158:	ldr	r1, [r5, #24]
   2415c:	ldr	r2, [r5, #64]	; 0x40
   24160:	add	r3, r3, r4
   24164:	ldrd	r6, [sp, #8]
   24168:	ldrb	lr, [r3, r1]
   2416c:	cmp	r2, #0
   24170:	str	lr, [sp, #4]
   24174:	ldrbne	lr, [r2, lr]
   24178:	strd	r6, [r9]
   2417c:	strne	lr, [sp, #4]
   24180:	b	240f0 <__assert_fail@plt+0x1254c>
   24184:	ldr	r1, [r5, #80]	; 0x50
   24188:	cmp	r1, #0
   2418c:	cmpgt	r2, #0
   24190:	ble	24214 <__assert_fail@plt+0x12670>
   24194:	ldr	r1, [r5]
   24198:	ldr	r0, [r5, #4]
   2419c:	ldr	ip, [r5, #24]
   241a0:	add	r1, r1, r4
   241a4:	ldrb	r1, [r1, ip]
   241a8:	ldrb	r1, [r3, r1]
   241ac:	strb	r1, [r0, r4]
   241b0:	ldr	r3, [r5, #80]	; 0x50
   241b4:	strb	r1, [sp, #16]
   241b8:	cmp	r2, r3
   241bc:	movlt	r3, r2
   241c0:	cmp	r3, #1
   241c4:	ble	24214 <__assert_fail@plt+0x12670>
   241c8:	add	r0, sp, #16
   241cc:	mov	r1, #1
   241d0:	ldr	r3, [r5]
   241d4:	ldr	ip, [r5, #24]
   241d8:	ldr	lr, [r5, #64]	; 0x40
   241dc:	add	r3, r3, r4
   241e0:	add	r3, r3, r1
   241e4:	ldrb	ip, [r3, ip]
   241e8:	ldr	r3, [r5, #4]
   241ec:	ldrb	ip, [lr, ip]
   241f0:	add	r3, r3, r1
   241f4:	add	r1, r1, #1
   241f8:	strb	ip, [r3, r4]
   241fc:	ldr	r3, [r5, #80]	; 0x50
   24200:	strb	ip, [r0, #1]!
   24204:	cmp	r2, r3
   24208:	movlt	r3, r2
   2420c:	cmp	r3, r1
   24210:	bgt	241d0 <__assert_fail@plt+0x1262c>
   24214:	add	r1, sp, #16
   24218:	b	240cc <__assert_fail@plt+0x12528>
   2421c:	cmp	r8, r2
   24220:	mov	r4, r2
   24224:	bgt	240a4 <__assert_fail@plt+0x12500>
   24228:	b	24130 <__assert_fail@plt+0x1258c>
   2422c:	ldr	r2, [r5, #36]	; 0x24
   24230:	ldr	r3, [r5, #48]	; 0x30
   24234:	cmp	r2, r3
   24238:	bge	24150 <__assert_fail@plt+0x125ac>
   2423c:	ldrd	r2, [sp, #8]
   24240:	strd	r2, [r5, #16]
   24244:	b	24130 <__assert_fail@plt+0x1258c>
   24248:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2424c:	mov	r4, r0
   24250:	ldr	r5, [r0, #28]
   24254:	ldr	r3, [r0, #48]	; 0x30
   24258:	strd	r6, [sp, #8]
   2425c:	ldr	r6, [r0, #36]	; 0x24
   24260:	strd	r8, [sp, #16]
   24264:	strd	sl, [sp, #24]
   24268:	str	lr, [sp, #32]
   2426c:	sub	sp, sp, #108	; 0x6c
   24270:	ldrb	r2, [r0, #74]	; 0x4a
   24274:	cmp	r6, r3
   24278:	movge	r6, r3
   2427c:	cmp	r2, #0
   24280:	bne	24290 <__assert_fail@plt+0x126ec>
   24284:	ldr	r3, [r0, #64]	; 0x40
   24288:	cmp	r3, #0
   2428c:	beq	243d0 <__assert_fail@plt+0x1282c>
   24290:	ldr	r7, [r4, #32]
   24294:	cmp	r5, r6
   24298:	bge	243a8 <__assert_fail@plt+0x12804>
   2429c:	add	r3, r4, #16
   242a0:	sub	fp, r6, r5
   242a4:	str	r3, [sp, #20]
   242a8:	add	r3, sp, #28
   242ac:	str	r3, [sp, #12]
   242b0:	ldrd	r0, [r4, #16]
   242b4:	ldr	r3, [r4, #64]	; 0x40
   242b8:	strd	r0, [sp, #32]
   242bc:	cmp	r3, #0
   242c0:	bne	245a0 <__assert_fail@plt+0x129fc>
   242c4:	ldr	r8, [r4]
   242c8:	ldr	r3, [r4, #24]
   242cc:	add	r3, r7, r3
   242d0:	add	r3, r8, r3
   242d4:	mov	r1, r3
   242d8:	str	r3, [sp, #4]
   242dc:	mov	r2, fp
   242e0:	ldr	r0, [sp, #12]
   242e4:	ldr	r3, [sp, #20]
   242e8:	bl	1ec1c <__assert_fail@plt+0xd078>
   242ec:	sub	r3, r0, #1
   242f0:	mov	r8, r0
   242f4:	cmn	r3, #4
   242f8:	str	r3, [sp, #8]
   242fc:	bhi	24638 <__assert_fail@plt+0x12a94>
   24300:	ldr	r9, [sp, #28]
   24304:	mov	fp, r5
   24308:	mov	r0, r9
   2430c:	bl	11b50 <towupper@plt>
   24310:	cmp	r9, r0
   24314:	mov	sl, r0
   24318:	beq	24620 <__assert_fail@plt+0x12a7c>
   2431c:	add	r9, sp, #40	; 0x28
   24320:	add	r2, sp, #32
   24324:	mov	r0, r9
   24328:	mov	r1, sl
   2432c:	bl	116dc <wcrtomb@plt>
   24330:	cmp	r8, r0
   24334:	mov	r3, r0
   24338:	bne	246c8 <__assert_fail@plt+0x12b24>
   2433c:	ldr	r0, [r4, #4]
   24340:	mov	r1, r9
   24344:	mov	r2, r8
   24348:	add	r0, r0, r5
   2434c:	bl	11784 <memcpy@plt>
   24350:	ldrb	r2, [r4, #76]	; 0x4c
   24354:	cmp	r2, #0
   24358:	bne	246a8 <__assert_fail@plt+0x12b04>
   2435c:	add	r2, r8, r7
   24360:	ldr	r0, [r4, #8]
   24364:	add	r5, r5, #1
   24368:	add	ip, r8, fp
   2436c:	cmp	r5, ip
   24370:	mov	r7, r2
   24374:	lsl	r1, fp, #2
   24378:	str	sl, [r0, fp, lsl #2]
   2437c:	bge	24294 <__assert_fail@plt+0x126f0>
   24380:	sub	r2, r8, #-1073741823	; 0xc0000001
   24384:	add	r1, r1, #4
   24388:	lsl	r2, r2, #2
   2438c:	add	r0, r0, r1
   24390:	mov	r1, #255	; 0xff
   24394:	mov	r5, ip
   24398:	bl	119e8 <memset@plt>
   2439c:	b	24294 <__assert_fail@plt+0x126f0>
   243a0:	ldrd	r2, [sp, #32]
   243a4:	strd	r2, [r4, #16]
   243a8:	mov	r0, #0
   243ac:	str	r5, [r4, #28]
   243b0:	str	r7, [r4, #32]
   243b4:	add	sp, sp, #108	; 0x6c
   243b8:	ldrd	r4, [sp]
   243bc:	ldrd	r6, [sp, #8]
   243c0:	ldrd	r8, [sp, #16]
   243c4:	ldrd	sl, [sp, #24]
   243c8:	add	sp, sp, #32
   243cc:	pop	{pc}		; (ldr pc, [sp], #4)
   243d0:	ldrb	r3, [r0, #76]	; 0x4c
   243d4:	cmp	r3, #0
   243d8:	bne	24290 <__assert_fail@plt+0x126ec>
   243dc:	cmp	r5, r6
   243e0:	bge	24610 <__assert_fail@plt+0x12a6c>
   243e4:	add	sl, r0, #16
   243e8:	str	r6, [sp, #4]
   243ec:	str	sl, [sp, #20]
   243f0:	b	24470 <__assert_fail@plt+0x128cc>
   243f4:	add	r3, sp, #40	; 0x28
   243f8:	add	r2, sp, #32
   243fc:	mov	r0, r3
   24400:	mov	r1, r9
   24404:	str	r3, [sp, #8]
   24408:	bl	116dc <wcrtomb@plt>
   2440c:	cmp	r7, r0
   24410:	bne	245f8 <__assert_fail@plt+0x12a54>
   24414:	ldr	r0, [r4, #4]
   24418:	mov	r2, r7
   2441c:	ldr	r3, [sp, #8]
   24420:	add	r0, r0, r5
   24424:	mov	r1, r3
   24428:	bl	11784 <memcpy@plt>
   2442c:	ldr	r0, [r4, #8]
   24430:	add	r5, r5, #1
   24434:	add	ip, r7, r8
   24438:	cmp	r5, ip
   2443c:	lsl	r3, r8, #2
   24440:	str	r9, [r0, r8, lsl #2]
   24444:	bge	24464 <__assert_fail@plt+0x128c0>
   24448:	sub	r2, r7, #-1073741823	; 0xc0000001
   2444c:	add	r3, r3, #4
   24450:	lsl	r2, r2, #2
   24454:	add	r0, r0, r3
   24458:	mov	r1, #255	; 0xff
   2445c:	mov	r5, ip
   24460:	bl	119e8 <memset@plt>
   24464:	ldr	r3, [sp, #4]
   24468:	cmp	r3, r5
   2446c:	ble	24610 <__assert_fail@plt+0x12a6c>
   24470:	ldr	fp, [r4]
   24474:	mov	r8, r5
   24478:	ldr	r7, [r4, #24]
   2447c:	add	r2, fp, r7
   24480:	ldrb	r9, [r2, r5]
   24484:	tst	r9, #128	; 0x80
   24488:	bne	244ac <__assert_fail@plt+0x12908>
   2448c:	mov	r0, sl
   24490:	bl	117b4 <mbsinit@plt>
   24494:	cmp	r0, #0
   24498:	beq	244ac <__assert_fail@plt+0x12908>
   2449c:	mov	r0, r9
   244a0:	bl	11b50 <towupper@plt>
   244a4:	bics	r3, r0, #127	; 0x7f
   244a8:	beq	24530 <__assert_fail@plt+0x1298c>
   244ac:	ldr	r3, [sp, #4]
   244b0:	add	r1, r7, r5
   244b4:	add	r0, sp, #28
   244b8:	add	r1, fp, r1
   244bc:	ldrd	r6, [sl]
   244c0:	str	r0, [sp, #12]
   244c4:	sub	r3, r3, r5
   244c8:	mov	r2, r3
   244cc:	str	r3, [sp, #16]
   244d0:	mov	r3, sl
   244d4:	strd	r6, [sp, #32]
   244d8:	bl	1ec1c <__assert_fail@plt+0xd078>
   244dc:	sub	r3, r0, #1
   244e0:	mov	r7, r0
   244e4:	cmn	r3, #4
   244e8:	bhi	24548 <__assert_fail@plt+0x129a4>
   244ec:	ldr	r3, [sp, #28]
   244f0:	mov	r0, r3
   244f4:	str	r3, [sp, #8]
   244f8:	bl	11b50 <towupper@plt>
   244fc:	ldr	r3, [sp, #8]
   24500:	mov	r9, r0
   24504:	cmp	r3, r0
   24508:	bne	243f4 <__assert_fail@plt+0x12850>
   2450c:	ldr	r1, [r4]
   24510:	mov	r2, r7
   24514:	ldr	r3, [r4, #24]
   24518:	ldr	r0, [r4, #4]
   2451c:	add	r3, r5, r3
   24520:	add	r1, r1, r3
   24524:	add	r0, r0, r5
   24528:	bl	11784 <memcpy@plt>
   2452c:	b	2442c <__assert_fail@plt+0x12888>
   24530:	ldr	r3, [r4, #4]
   24534:	strb	r0, [r3, r5]
   24538:	ldr	r3, [r4, #8]
   2453c:	str	r0, [r3, r5, lsl #2]
   24540:	add	r5, r5, #1
   24544:	b	24464 <__assert_fail@plt+0x128c0>
   24548:	cmn	r3, #3
   2454c:	beq	24578 <__assert_fail@plt+0x129d4>
   24550:	ldr	r3, [r4, #4]
   24554:	cmn	r0, #1
   24558:	strb	r9, [r3, r5]
   2455c:	add	r5, r5, #1
   24560:	ldr	r3, [r4, #8]
   24564:	str	r9, [r3, r8, lsl #2]
   24568:	bne	24464 <__assert_fail@plt+0x128c0>
   2456c:	ldrd	r2, [sp, #32]
   24570:	strd	r2, [sl]
   24574:	b	24464 <__assert_fail@plt+0x128c0>
   24578:	ldr	r2, [r4, #36]	; 0x24
   2457c:	ldr	r3, [r4, #48]	; 0x30
   24580:	cmp	r2, r3
   24584:	blt	24608 <__assert_fail@plt+0x12a64>
   24588:	ldr	r3, [r4, #4]
   2458c:	strb	r9, [r3, r5]
   24590:	add	r5, r5, #1
   24594:	ldr	r3, [r4, #8]
   24598:	str	r9, [r3, r8, lsl #2]
   2459c:	b	24464 <__assert_fail@plt+0x128c0>
   245a0:	ldr	lr, [r4, #80]	; 0x50
   245a4:	cmp	fp, #0
   245a8:	cmpgt	lr, #0
   245ac:	ble	24890 <__assert_fail@plt+0x12cec>
   245b0:	ldr	r8, [r4]
   245b4:	cmp	lr, fp
   245b8:	add	r9, sp, #40	; 0x28
   245bc:	movge	lr, fp
   245c0:	mov	r1, r9
   245c4:	ldr	r2, [r4, #24]
   245c8:	add	r2, r7, r2
   245cc:	add	r8, r8, r2
   245d0:	mov	r2, r8
   245d4:	ldrb	r0, [r2], #1
   245d8:	ldrb	r0, [r3, r0]
   245dc:	sub	ip, r2, r8
   245e0:	cmp	ip, lr
   245e4:	strb	r0, [r1], #1
   245e8:	blt	245d4 <__assert_fail@plt+0x12a30>
   245ec:	mov	r1, r9
   245f0:	str	r9, [sp, #4]
   245f4:	b	242dc <__assert_fail@plt+0x12738>
   245f8:	mov	r7, r5
   245fc:	ldr	r6, [sp, #4]
   24600:	ldr	fp, [sp, #16]
   24604:	b	242b0 <__assert_fail@plt+0x1270c>
   24608:	ldrd	r2, [sp, #32]
   2460c:	strd	r2, [sl]
   24610:	mov	r0, #0
   24614:	str	r5, [r4, #28]
   24618:	str	r5, [r4, #32]
   2461c:	b	243b4 <__assert_fail@plt+0x12810>
   24620:	ldr	r0, [r4, #4]
   24624:	mov	r2, r8
   24628:	ldr	r1, [sp, #4]
   2462c:	add	r0, r0, r5
   24630:	bl	11784 <memcpy@plt>
   24634:	b	24350 <__assert_fail@plt+0x127ac>
   24638:	cmn	r3, #3
   2463c:	bne	24650 <__assert_fail@plt+0x12aac>
   24640:	ldr	r1, [r4, #36]	; 0x24
   24644:	ldr	r2, [r4, #48]	; 0x30
   24648:	cmp	r1, r2
   2464c:	blt	243a0 <__assert_fail@plt+0x127fc>
   24650:	ldr	r2, [r4]
   24654:	ldr	r0, [r4, #24]
   24658:	ldr	r1, [r4, #64]	; 0x40
   2465c:	add	r2, r2, r7
   24660:	ldrb	r2, [r2, r0]
   24664:	cmp	r1, #0
   24668:	ldr	r0, [r4, #4]
   2466c:	ldrbne	r2, [r1, r2]
   24670:	lsl	r1, r5, #2
   24674:	strb	r2, [r0, r5]
   24678:	ldrb	r0, [r4, #76]	; 0x4c
   2467c:	cmp	r0, #0
   24680:	ldrne	r0, [r4, #12]
   24684:	strne	r7, [r0, r5, lsl #2]
   24688:	cmn	r8, #1
   2468c:	add	r7, r7, #1
   24690:	ldr	r0, [r4, #8]
   24694:	add	r5, r5, #1
   24698:	str	r2, [r0, r1]
   2469c:	ldrdeq	r2, [sp, #32]
   246a0:	strdeq	r2, [r4, #16]
   246a4:	b	24294 <__assert_fail@plt+0x126f0>
   246a8:	ldr	r1, [r4, #12]
   246ac:	add	r2, r8, r7
   246b0:	add	r1, r1, r5, lsl #2
   246b4:	str	r7, [r1], #4
   246b8:	add	r7, r7, #1
   246bc:	cmp	r2, r7
   246c0:	bne	246b4 <__assert_fail@plt+0x12b10>
   246c4:	b	24360 <__assert_fail@plt+0x127bc>
   246c8:	cmn	r0, #1
   246cc:	beq	24620 <__assert_fail@plt+0x12a7c>
   246d0:	add	r2, r0, r5
   246d4:	ldr	r0, [r4, #36]	; 0x24
   246d8:	str	r2, [sp, #4]
   246dc:	cmp	r2, r0
   246e0:	bhi	243a0 <__assert_fail@plt+0x127fc>
   246e4:	ldr	r2, [r4, #12]
   246e8:	cmp	r2, #0
   246ec:	beq	24898 <__assert_fail@plt+0x12cf4>
   246f0:	ldrb	r0, [r4, #76]	; 0x4c
   246f4:	cmp	r0, #0
   246f8:	bne	24798 <__assert_fail@plt+0x12bf4>
   246fc:	cmp	r5, #0
   24700:	beq	24790 <__assert_fail@plt+0x12bec>
   24704:	ldr	r2, [r4, #12]
   24708:	sub	r1, r5, #1
   2470c:	cmp	r1, #3
   24710:	ubfx	r1, r2, #2, #1
   24714:	bls	248bc <__assert_fail@plt+0x12d18>
   24718:	cmp	r1, #0
   2471c:	sub	fp, r5, r1
   24720:	lsr	ip, fp, #1
   24724:	mov	r6, r1
   24728:	add	lr, r1, #1
   2472c:	strne	r0, [r2]
   24730:	add	r0, r2, r1, lsl #2
   24734:	add	ip, r0, ip, lsl #3
   24738:	stm	r0, {r6, lr}
   2473c:	add	r0, r0, #8
   24740:	add	r6, r6, #2
   24744:	cmp	ip, r0
   24748:	add	lr, lr, #2
   2474c:	bne	24738 <__assert_fail@plt+0x12b94>
   24750:	bic	r0, fp, #1
   24754:	cmp	r0, fp
   24758:	add	r1, r0, r1
   2475c:	beq	24790 <__assert_fail@plt+0x12bec>
   24760:	add	ip, r1, #1
   24764:	str	r1, [r2, r1, lsl #2]
   24768:	cmp	ip, r5
   2476c:	bcs	24790 <__assert_fail@plt+0x12bec>
   24770:	add	r0, r1, #2
   24774:	str	ip, [r2, ip, lsl #2]
   24778:	cmp	r0, r5
   2477c:	bcs	24790 <__assert_fail@plt+0x12bec>
   24780:	add	r1, r1, #3
   24784:	str	r0, [r2, r0, lsl #2]
   24788:	cmp	r1, r5
   2478c:	strcc	r1, [r2, r1, lsl #2]
   24790:	mov	r2, #1
   24794:	strb	r2, [r4, #76]	; 0x4c
   24798:	ldr	r0, [r4, #4]
   2479c:	mov	r2, r3
   247a0:	mov	r1, r9
   247a4:	str	r3, [sp, #12]
   247a8:	add	r0, r0, r5
   247ac:	bl	11784 <memcpy@plt>
   247b0:	ldr	r3, [sp, #12]
   247b4:	lsl	r2, r5, #2
   247b8:	ldr	r0, [r4, #8]
   247bc:	ldr	ip, [r4, #12]
   247c0:	cmp	r3, #1
   247c4:	add	lr, r0, r2
   247c8:	str	sl, [r0, r5, lsl #2]
   247cc:	add	r2, ip, r2
   247d0:	str	r7, [ip, r5, lsl #2]
   247d4:	bls	24850 <__assert_fail@plt+0x12cac>
   247d8:	cmp	r8, #1
   247dc:	movls	r2, #1
   247e0:	bls	2481c <__assert_fail@plt+0x12c78>
   247e4:	cmp	r8, r3
   247e8:	mov	r1, r2
   247ec:	movcc	sl, r8
   247f0:	movcs	sl, r3
   247f4:	mov	r2, #1
   247f8:	mvn	r6, #0
   247fc:	add	r9, r2, r7
   24800:	add	r2, r2, #1
   24804:	cmp	r2, sl
   24808:	str	r9, [r1, #4]!
   2480c:	str	r6, [lr, #4]!
   24810:	bcc	247fc <__assert_fail@plt+0x12c58>
   24814:	cmp	r2, r3
   24818:	bcs	24850 <__assert_fail@plt+0x12cac>
   2481c:	ldr	lr, [sp, #8]
   24820:	sub	r1, r5, #-1073741823	; 0xc0000001
   24824:	mvn	r5, #0
   24828:	add	r1, r1, r2
   2482c:	lsl	r1, r1, #2
   24830:	add	ip, ip, r1
   24834:	add	r0, r0, r1
   24838:	add	lr, lr, r7
   2483c:	add	r2, r2, #1
   24840:	str	lr, [ip, #4]!
   24844:	cmp	r3, r2
   24848:	str	r5, [r0, #4]!
   2484c:	bhi	2483c <__assert_fail@plt+0x12c98>
   24850:	ldr	r6, [r4, #48]	; 0x30
   24854:	sub	r2, r3, r8
   24858:	ldr	r1, [r4, #52]	; 0x34
   2485c:	add	r6, r2, r6
   24860:	cmp	r1, r7
   24864:	str	r6, [r4, #48]	; 0x30
   24868:	ble	24878 <__assert_fail@plt+0x12cd4>
   2486c:	ldr	r1, [r4, #56]	; 0x38
   24870:	add	r2, r1, r2
   24874:	str	r2, [r4, #56]	; 0x38
   24878:	ldr	r2, [r4, #36]	; 0x24
   2487c:	add	r7, r8, r7
   24880:	ldr	r5, [sp, #4]
   24884:	cmp	r6, r2
   24888:	movge	r6, r2
   2488c:	b	24294 <__assert_fail@plt+0x126f0>
   24890:	add	r9, sp, #40	; 0x28
   24894:	b	245ec <__assert_fail@plt+0x12a48>
   24898:	lsl	r0, r0, #2
   2489c:	str	r3, [sp, #12]
   248a0:	bl	39028 <__assert_fail@plt+0x27484>
   248a4:	cmp	r0, #0
   248a8:	str	r0, [r4, #12]
   248ac:	moveq	r0, #12
   248b0:	ldr	r3, [sp, #12]
   248b4:	bne	246f0 <__assert_fail@plt+0x12b4c>
   248b8:	b	243b4 <__assert_fail@plt+0x12810>
   248bc:	mov	r1, r0
   248c0:	b	24760 <__assert_fail@plt+0x12bbc>
   248c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   248c8:	mov	r4, r0
   248cc:	ldr	ip, [r0, #8]
   248d0:	strd	r6, [sp, #8]
   248d4:	ldr	r6, [r0, #4]
   248d8:	strd	r8, [sp, #16]
   248dc:	str	sl, [sp, #24]
   248e0:	str	lr, [sp, #28]
   248e4:	sub	sp, sp, #8
   248e8:	add	r3, sp, #8
   248ec:	cmp	ip, r6
   248f0:	stmdb	r3, {r1, r2}
   248f4:	ldrb	r5, [sp, #4]
   248f8:	bcs	249c8 <__assert_fail@plt+0x12e24>
   248fc:	ldr	r7, [r0, #12]
   24900:	ldr	r6, [r0, #20]
   24904:	lsl	r0, ip, #3
   24908:	cmp	r5, #5
   2490c:	ldr	lr, [r4]
   24910:	ldrd	r2, [sp]
   24914:	add	r1, lr, r0
   24918:	strd	r2, [lr, r0]
   2491c:	ldr	r3, [r1, #4]
   24920:	bfc	r3, #8, #10
   24924:	str	r3, [r1, #4]
   24928:	beq	249b4 <__assert_fail@plt+0x12e10>
   2492c:	sub	r5, r5, #6
   24930:	clz	r5, r5
   24934:	lsr	r5, r5, #5
   24938:	ldrb	r3, [r1, #6]
   2493c:	mvn	r0, #0
   24940:	mov	r2, #0
   24944:	bfi	r3, r5, #4, #1
   24948:	strb	r3, [r1, #6]
   2494c:	str	r0, [r7, ip, lsl #2]
   24950:	ldr	r3, [r4, #8]
   24954:	add	r3, r3, r3, lsl #1
   24958:	lsl	r3, r3, #2
   2495c:	add	r1, r6, r3
   24960:	str	r2, [r6, r3]
   24964:	str	r2, [r1, #4]
   24968:	str	r2, [r1, #8]
   2496c:	ldr	r3, [r4, #8]
   24970:	ldr	r0, [r4, #24]
   24974:	add	r3, r3, r3, lsl #1
   24978:	lsl	r3, r3, #2
   2497c:	add	r1, r0, r3
   24980:	str	r2, [r0, r3]
   24984:	str	r2, [r1, #4]
   24988:	str	r2, [r1, #8]
   2498c:	ldr	r0, [r4, #8]
   24990:	add	r3, r0, #1
   24994:	str	r3, [r4, #8]
   24998:	add	sp, sp, #8
   2499c:	ldrd	r4, [sp]
   249a0:	ldrd	r6, [sp, #8]
   249a4:	ldrd	r8, [sp, #16]
   249a8:	ldr	sl, [sp, #24]
   249ac:	add	sp, sp, #28
   249b0:	pop	{pc}		; (ldr pc, [sp], #4)
   249b4:	ldr	r5, [r4, #92]	; 0x5c
   249b8:	cmp	r5, #1
   249bc:	movle	r5, #0
   249c0:	movgt	r5, #1
   249c4:	b	24938 <__assert_fail@plt+0x12d94>
   249c8:	lsl	r9, r6, #1
   249cc:	movw	r3, #21845	; 0x5555
   249d0:	movt	r3, #5461	; 0x1555
   249d4:	cmp	r9, r3
   249d8:	bhi	24a94 <__assert_fail@plt+0x12ef0>
   249dc:	lsl	r1, r6, #4
   249e0:	ldr	r0, [r0]
   249e4:	bl	39064 <__assert_fail@plt+0x274c0>
   249e8:	cmp	r0, #0
   249ec:	beq	24a94 <__assert_fail@plt+0x12ef0>
   249f0:	lsl	r8, r6, #3
   249f4:	str	r0, [r4]
   249f8:	add	r6, r9, r6
   249fc:	ldr	r0, [r4, #12]
   24a00:	mov	r1, r8
   24a04:	bl	39064 <__assert_fail@plt+0x274c0>
   24a08:	mov	r7, r0
   24a0c:	mov	r1, r8
   24a10:	lsl	r8, r6, #3
   24a14:	ldr	r0, [r4, #16]
   24a18:	bl	39064 <__assert_fail@plt+0x274c0>
   24a1c:	mov	sl, r0
   24a20:	mov	r1, r8
   24a24:	ldr	r0, [r4, #20]
   24a28:	bl	39064 <__assert_fail@plt+0x274c0>
   24a2c:	mov	r6, r0
   24a30:	mov	r1, r8
   24a34:	ldr	r0, [r4, #24]
   24a38:	bl	39064 <__assert_fail@plt+0x274c0>
   24a3c:	cmp	sl, #0
   24a40:	cmpne	r7, #0
   24a44:	mov	r8, r0
   24a48:	beq	24a74 <__assert_fail@plt+0x12ed0>
   24a4c:	cmp	r0, #0
   24a50:	cmpne	r6, #0
   24a54:	beq	24a74 <__assert_fail@plt+0x12ed0>
   24a58:	str	r9, [r4, #4]
   24a5c:	str	r7, [r4, #12]
   24a60:	str	sl, [r4, #16]
   24a64:	str	r6, [r4, #20]
   24a68:	str	r0, [r4, #24]
   24a6c:	ldr	ip, [r4, #8]
   24a70:	b	24904 <__assert_fail@plt+0x12d60>
   24a74:	mov	r0, r7
   24a78:	bl	19610 <__assert_fail@plt+0x7a6c>
   24a7c:	mov	r0, sl
   24a80:	bl	19610 <__assert_fail@plt+0x7a6c>
   24a84:	mov	r0, r6
   24a88:	bl	19610 <__assert_fail@plt+0x7a6c>
   24a8c:	mov	r0, r8
   24a90:	bl	19610 <__assert_fail@plt+0x7a6c>
   24a94:	mvn	r0, #0
   24a98:	b	24998 <__assert_fail@plt+0x12df4>
   24a9c:	ldr	r3, [r0, #124]	; 0x7c
   24aa0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24aa4:	strd	r6, [sp, #8]
   24aa8:	str	r8, [sp, #16]
   24aac:	mov	r8, r0
   24ab0:	str	lr, [sp, #20]
   24ab4:	cmp	r3, #0
   24ab8:	ble	24b3c <__assert_fail@plt+0x12f98>
   24abc:	mov	r7, #0
   24ac0:	ldr	r3, [r8, #132]	; 0x84
   24ac4:	ldr	r6, [r3, r7, lsl #2]
   24ac8:	ldr	r3, [r6, #16]
   24acc:	cmp	r3, #0
   24ad0:	ble	24b00 <__assert_fail@plt+0x12f5c>
   24ad4:	mov	r4, #0
   24ad8:	ldr	r3, [r6, #20]
   24adc:	ldr	r5, [r3, r4, lsl #2]
   24ae0:	add	r4, r4, #1
   24ae4:	ldr	r0, [r5, #16]
   24ae8:	bl	19610 <__assert_fail@plt+0x7a6c>
   24aec:	mov	r0, r5
   24af0:	bl	19610 <__assert_fail@plt+0x7a6c>
   24af4:	ldr	r3, [r6, #16]
   24af8:	cmp	r3, r4
   24afc:	bgt	24ad8 <__assert_fail@plt+0x12f34>
   24b00:	ldr	r0, [r6, #20]
   24b04:	bl	19610 <__assert_fail@plt+0x7a6c>
   24b08:	ldr	r3, [r6, #8]
   24b0c:	cmp	r3, #0
   24b10:	beq	24b5c <__assert_fail@plt+0x12fb8>
   24b14:	ldr	r0, [r3, #8]
   24b18:	add	r7, r7, #1
   24b1c:	bl	19610 <__assert_fail@plt+0x7a6c>
   24b20:	ldr	r0, [r6, #8]
   24b24:	bl	19610 <__assert_fail@plt+0x7a6c>
   24b28:	mov	r0, r6
   24b2c:	bl	19610 <__assert_fail@plt+0x7a6c>
   24b30:	ldr	r3, [r8, #124]	; 0x7c
   24b34:	cmp	r3, r7
   24b38:	bgt	24ac0 <__assert_fail@plt+0x12f1c>
   24b3c:	mov	r3, #0
   24b40:	ldrd	r4, [sp]
   24b44:	ldrd	r6, [sp, #8]
   24b48:	str	r3, [r8, #108]	; 0x6c
   24b4c:	str	r3, [r8, #124]	; 0x7c
   24b50:	ldr	r8, [sp, #16]
   24b54:	add	sp, sp, #20
   24b58:	pop	{pc}		; (ldr pc, [sp], #4)
   24b5c:	mov	r0, r6
   24b60:	add	r7, r7, #1
   24b64:	bl	19610 <__assert_fail@plt+0x7a6c>
   24b68:	ldr	r3, [r8, #124]	; 0x7c
   24b6c:	cmp	r3, r7
   24b70:	bgt	24ac0 <__assert_fail@plt+0x12f1c>
   24b74:	b	24b3c <__assert_fail@plt+0x12f98>
   24b78:	ldr	r3, [r0]
   24b7c:	strd	r4, [sp, #-16]!
   24b80:	mov	r4, r0
   24b84:	str	r6, [sp, #8]
   24b88:	mov	r6, r1
   24b8c:	str	lr, [sp, #12]
   24b90:	cmp	r3, #0
   24b94:	beq	24bc8 <__assert_fail@plt+0x13024>
   24b98:	ldmib	r0, {r1, r5}
   24b9c:	cmp	r1, #0
   24ba0:	bne	24c0c <__assert_fail@plt+0x13068>
   24ba4:	str	r6, [r5]
   24ba8:	mov	r0, #1
   24bac:	ldr	r3, [r4, #4]
   24bb0:	add	r3, r3, r0
   24bb4:	str	r3, [r4, #4]
   24bb8:	ldrd	r4, [sp]
   24bbc:	ldr	r6, [sp, #8]
   24bc0:	add	sp, sp, #12
   24bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   24bc8:	mov	r5, #1
   24bcc:	mov	r0, #4
   24bd0:	str	r5, [r4]
   24bd4:	str	r5, [r4, #4]
   24bd8:	bl	39028 <__assert_fail@plt+0x27484>
   24bdc:	mov	r3, r0
   24be0:	cmp	r0, #0
   24be4:	str	r0, [r4, #8]
   24be8:	streq	r3, [r4]
   24bec:	streq	r3, [r4, #4]
   24bf0:	beq	24bb8 <__assert_fail@plt+0x13014>
   24bf4:	mov	r0, r5
   24bf8:	str	r6, [r3]
   24bfc:	ldrd	r4, [sp]
   24c00:	ldr	r6, [sp, #8]
   24c04:	add	sp, sp, #12
   24c08:	pop	{pc}		; (ldr pc, [sp], #4)
   24c0c:	cmp	r3, r1
   24c10:	beq	24c90 <__assert_fail@plt+0x130ec>
   24c14:	ldr	r3, [r5]
   24c18:	mov	r2, r1
   24c1c:	cmp	r3, r6
   24c20:	ble	24c58 <__assert_fail@plt+0x130b4>
   24c24:	cmp	r1, #0
   24c28:	ble	24c40 <__assert_fail@plt+0x1309c>
   24c2c:	lsl	r2, r1, #2
   24c30:	add	r0, r5, #4
   24c34:	mov	r1, r5
   24c38:	bl	11748 <memmove@plt>
   24c3c:	mov	r2, #0
   24c40:	str	r6, [r5, r2, lsl #2]
   24c44:	mov	r0, #1
   24c48:	ldr	r3, [r4, #4]
   24c4c:	add	r3, r3, r0
   24c50:	str	r3, [r4, #4]
   24c54:	b	24bb8 <__assert_fail@plt+0x13014>
   24c58:	sub	r3, r1, #-1073741823	; 0xc0000001
   24c5c:	ldr	r0, [r5, r3, lsl #2]
   24c60:	lsl	r3, r3, #2
   24c64:	cmp	r6, r0
   24c68:	bge	24c40 <__assert_fail@plt+0x1309c>
   24c6c:	add	r3, r3, #4
   24c70:	add	r3, r5, r3
   24c74:	str	r0, [r3], #-4
   24c78:	sub	r1, r1, #1
   24c7c:	ldr	r0, [r3, #-4]
   24c80:	mov	r2, r1
   24c84:	cmp	r0, r6
   24c88:	bgt	24c74 <__assert_fail@plt+0x130d0>
   24c8c:	b	24c40 <__assert_fail@plt+0x1309c>
   24c90:	lsl	r3, r1, #1
   24c94:	mov	r0, r5
   24c98:	lsl	r1, r1, #3
   24c9c:	str	r3, [r4]
   24ca0:	bl	39064 <__assert_fail@plt+0x274c0>
   24ca4:	subs	r5, r0, #0
   24ca8:	beq	24cb8 <__assert_fail@plt+0x13114>
   24cac:	str	r5, [r4, #8]
   24cb0:	ldr	r1, [r4, #4]
   24cb4:	b	24c14 <__assert_fail@plt+0x13070>
   24cb8:	mov	r0, r5
   24cbc:	b	24bb8 <__assert_fail@plt+0x13014>
   24cc0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24cc4:	subs	r4, r0, #0
   24cc8:	strd	r6, [sp, #8]
   24ccc:	str	r8, [sp, #16]
   24cd0:	str	lr, [sp, #20]
   24cd4:	ldr	r7, [sp, #28]
   24cd8:	beq	24d84 <__assert_fail@plt+0x131e0>
   24cdc:	ldr	ip, [r4]
   24ce0:	cmp	ip, #0
   24ce4:	beq	24d84 <__assert_fail@plt+0x131e0>
   24ce8:	sub	ip, ip, #1
   24cec:	ldr	lr, [r4, #8]
   24cf0:	mov	r0, r3
   24cf4:	add	r5, ip, ip, lsl #1
   24cf8:	mov	r8, r1
   24cfc:	lsl	r6, r2, #3
   24d00:	lsl	r5, r5, #3
   24d04:	mov	r2, r6
   24d08:	ldr	r3, [lr, r5]
   24d0c:	add	lr, lr, r5
   24d10:	ldr	r1, [lr, #8]
   24d14:	str	ip, [r4]
   24d18:	str	r3, [r8]
   24d1c:	bl	11784 <memcpy@plt>
   24d20:	ldr	r3, [r4, #8]
   24d24:	mov	r2, r6
   24d28:	ldr	r0, [sp, #24]
   24d2c:	add	r3, r3, r5
   24d30:	ldr	r1, [r3, #8]
   24d34:	add	r1, r1, r6
   24d38:	bl	11784 <memcpy@plt>
   24d3c:	ldr	r0, [r7, #8]
   24d40:	bl	19610 <__assert_fail@plt+0x7a6c>
   24d44:	ldr	r3, [r4, #8]
   24d48:	add	r3, r3, r5
   24d4c:	ldr	r0, [r3, #8]
   24d50:	bl	19610 <__assert_fail@plt+0x7a6c>
   24d54:	ldr	r3, [r4, #8]
   24d58:	add	r5, r3, r5
   24d5c:	ldr	r0, [r5, #4]
   24d60:	ldrd	r2, [r5, #12]
   24d64:	strd	r2, [r7]
   24d68:	ldr	r3, [r5, #20]
   24d6c:	str	r3, [r7, #8]
   24d70:	ldrd	r4, [sp]
   24d74:	ldrd	r6, [sp, #8]
   24d78:	ldr	r8, [sp, #16]
   24d7c:	add	sp, sp, #20
   24d80:	pop	{pc}		; (ldr pc, [sp], #4)
   24d84:	mvn	r0, #0
   24d88:	b	24d70 <__assert_fail@plt+0x131cc>
   24d8c:	ldr	ip, [r1, #4]
   24d90:	cmp	ip, #0
   24d94:	beq	24f2c <__assert_fail@plt+0x13388>
   24d98:	strd	r4, [sp, #-32]!	; 0xffffffe0
   24d9c:	strd	r6, [sp, #8]
   24da0:	str	lr, [sp, #28]
   24da4:	ldr	lr, [r2, #4]
   24da8:	strd	r8, [sp, #16]
   24dac:	str	sl, [sp, #24]
   24db0:	cmp	lr, #0
   24db4:	beq	24eb4 <__assert_fail@plt+0x13310>
   24db8:	ldr	r4, [r0]
   24dbc:	mov	r9, r2
   24dc0:	add	r2, ip, lr
   24dc4:	mov	r8, r1
   24dc8:	mov	r7, r0
   24dcc:	ldmib	r0, {r3, sl}
   24dd0:	add	r1, r2, r3
   24dd4:	cmp	r1, r4
   24dd8:	bgt	24f3c <__assert_fail@plt+0x13398>
   24ddc:	ldr	r0, [r8, #8]
   24de0:	add	r1, r3, ip
   24de4:	sub	r5, ip, #1
   24de8:	sub	r6, lr, #1
   24dec:	add	r1, r1, lr
   24df0:	ldr	r2, [r9, #8]
   24df4:	sub	r3, r3, #1
   24df8:	ldr	ip, [r0, r5, lsl #2]
   24dfc:	ldr	lr, [r2, r6, lsl #2]
   24e00:	cmp	ip, lr
   24e04:	beq	24e20 <__assert_fail@plt+0x1327c>
   24e08:	bge	24ed4 <__assert_fail@plt+0x13330>
   24e0c:	subs	r6, r6, #1
   24e10:	bmi	24e70 <__assert_fail@plt+0x132cc>
   24e14:	ldr	lr, [r2, r6, lsl #2]
   24e18:	cmp	ip, lr
   24e1c:	bne	24e08 <__assert_fail@plt+0x13264>
   24e20:	cmp	r3, #0
   24e24:	blt	24e50 <__assert_fail@plt+0x132ac>
   24e28:	ldr	r4, [sl, r3, lsl #2]
   24e2c:	add	lr, sl, r3, lsl #2
   24e30:	cmp	r4, ip
   24e34:	bgt	24e48 <__assert_fail@plt+0x132a4>
   24e38:	b	24ee4 <__assert_fail@plt+0x13340>
   24e3c:	ldr	r4, [lr, #-4]!
   24e40:	cmp	r4, ip
   24e44:	ble	24ee4 <__assert_fail@plt+0x13340>
   24e48:	subs	r3, r3, #1
   24e4c:	bcs	24e3c <__assert_fail@plt+0x13298>
   24e50:	sub	r1, r1, #1
   24e54:	str	ip, [sl, r1, lsl #2]
   24e58:	subs	r5, r5, #1
   24e5c:	bmi	24e70 <__assert_fail@plt+0x132cc>
   24e60:	subs	r6, r6, #1
   24e64:	bmi	24e70 <__assert_fail@plt+0x132cc>
   24e68:	ldr	ip, [r0, r5, lsl #2]
   24e6c:	b	24e14 <__assert_fail@plt+0x13270>
   24e70:	ldr	ip, [r7, #4]
   24e74:	ldr	r0, [r8, #4]
   24e78:	ldr	r2, [r9, #4]
   24e7c:	sub	r3, ip, #1
   24e80:	add	r0, ip, r0
   24e84:	add	r0, r0, r2
   24e88:	sub	r2, r0, r1
   24e8c:	sub	r0, r0, #1
   24e90:	add	ip, ip, r2
   24e94:	cmp	r3, #0
   24e98:	cmpge	r2, #0
   24e9c:	str	ip, [r7, #4]
   24ea0:	bgt	24f00 <__assert_fail@plt+0x1335c>
   24ea4:	lsl	r2, r2, #2
   24ea8:	add	r1, sl, r1, lsl #2
   24eac:	mov	r0, sl
   24eb0:	bl	11784 <memcpy@plt>
   24eb4:	mov	ip, #0
   24eb8:	ldrd	r4, [sp]
   24ebc:	mov	r0, ip
   24ec0:	ldrd	r6, [sp, #8]
   24ec4:	ldrd	r8, [sp, #16]
   24ec8:	ldr	sl, [sp, #24]
   24ecc:	add	sp, sp, #28
   24ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   24ed4:	subs	r5, r5, #1
   24ed8:	bmi	24e70 <__assert_fail@plt+0x132cc>
   24edc:	ldr	ip, [r0, r5, lsl #2]
   24ee0:	b	24e00 <__assert_fail@plt+0x1325c>
   24ee4:	cmp	r4, ip
   24ee8:	bne	24e50 <__assert_fail@plt+0x132ac>
   24eec:	b	24e58 <__assert_fail@plt+0x132b4>
   24ef0:	sub	r3, r3, #1
   24ef4:	str	ip, [sl, r4, lsl #2]
   24ef8:	cmn	r3, #1
   24efc:	beq	24f34 <__assert_fail@plt+0x13390>
   24f00:	ldr	lr, [sl, r0, lsl #2]
   24f04:	add	r4, r3, r2
   24f08:	ldr	ip, [sl, r3, lsl #2]
   24f0c:	cmp	lr, ip
   24f10:	ble	24ef0 <__assert_fail@plt+0x1334c>
   24f14:	subs	r2, r2, #1
   24f18:	sub	r0, r0, #1
   24f1c:	str	lr, [sl, r4, lsl #2]
   24f20:	bne	24f00 <__assert_fail@plt+0x1335c>
   24f24:	ldr	sl, [r7, #8]
   24f28:	b	24ea8 <__assert_fail@plt+0x13304>
   24f2c:	mov	r0, ip
   24f30:	bx	lr
   24f34:	ldr	sl, [r7, #8]
   24f38:	b	24ea4 <__assert_fail@plt+0x13300>
   24f3c:	add	r4, r2, r4
   24f40:	mov	r0, sl
   24f44:	lsl	r1, r4, #2
   24f48:	bl	39064 <__assert_fail@plt+0x274c0>
   24f4c:	subs	sl, r0, #0
   24f50:	beq	24f6c <__assert_fail@plt+0x133c8>
   24f54:	ldr	ip, [r8, #4]
   24f58:	ldr	lr, [r9, #4]
   24f5c:	str	r4, [r7]
   24f60:	str	sl, [r7, #8]
   24f64:	ldr	r3, [r7, #4]
   24f68:	b	24ddc <__assert_fail@plt+0x13238>
   24f6c:	mov	ip, #12
   24f70:	b	24eb8 <__assert_fail@plt+0x13314>
   24f74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24f78:	strd	r6, [sp, #8]
   24f7c:	subs	r6, r1, #0
   24f80:	str	r8, [sp, #16]
   24f84:	str	lr, [sp, #20]
   24f88:	beq	25098 <__assert_fail@plt+0x134f4>
   24f8c:	ldr	r2, [r6, #4]
   24f90:	cmp	r2, #0
   24f94:	mov	ip, r2
   24f98:	beq	25098 <__assert_fail@plt+0x134f4>
   24f9c:	ldm	r0, {r1, r3}
   24fa0:	mov	r5, r0
   24fa4:	add	r4, r3, r2, lsl #1
   24fa8:	cmp	r1, r4
   24fac:	blt	250d4 <__assert_fail@plt+0x13530>
   24fb0:	cmp	r3, #0
   24fb4:	beq	25114 <__assert_fail@plt+0x13570>
   24fb8:	sub	r2, r2, #1
   24fbc:	sub	r3, r3, #1
   24fc0:	mvn	lr, r3
   24fc4:	mvn	ip, r2
   24fc8:	tst	lr, ip
   24fcc:	bpl	25028 <__assert_fail@plt+0x13484>
   24fd0:	ldr	r7, [r5, #8]
   24fd4:	ldr	r8, [r6, #8]
   24fd8:	b	25000 <__assert_fail@plt+0x1345c>
   24fdc:	subge	r3, r3, #1
   24fe0:	mvnge	lr, r3
   24fe4:	bge	24ff8 <__assert_fail@plt+0x13454>
   24fe8:	sub	r2, r2, #1
   24fec:	sub	r4, r4, #1
   24ff0:	mvn	ip, r2
   24ff4:	str	r1, [r7, r4, lsl #2]
   24ff8:	tst	ip, lr
   24ffc:	bpl	25028 <__assert_fail@plt+0x13484>
   25000:	ldr	r0, [r7, r3, lsl #2]
   25004:	ldr	r1, [r8, r2, lsl #2]
   25008:	cmp	r0, r1
   2500c:	bne	24fdc <__assert_fail@plt+0x13438>
   25010:	sub	r2, r2, #1
   25014:	sub	r3, r3, #1
   25018:	mvn	lr, r3
   2501c:	mvn	ip, r2
   25020:	tst	ip, lr
   25024:	bmi	25000 <__assert_fail@plt+0x1345c>
   25028:	cmp	r2, #0
   2502c:	blt	2504c <__assert_fail@plt+0x134a8>
   25030:	ldr	r0, [r5, #8]
   25034:	add	r2, r2, #1
   25038:	sub	r4, r4, r2
   2503c:	lsl	r2, r2, #2
   25040:	ldr	r1, [r6, #8]
   25044:	add	r0, r0, r4, lsl #2
   25048:	bl	11784 <memcpy@plt>
   2504c:	ldr	r3, [r5, #4]
   25050:	ldr	r0, [r6, #4]
   25054:	add	r0, r3, r0, lsl #1
   25058:	subs	r2, r0, r4
   2505c:	sub	r0, r0, #1
   25060:	beq	25098 <__assert_fail@plt+0x134f4>
   25064:	ldr	r1, [r5, #8]
   25068:	add	ip, r3, r2
   2506c:	sub	r3, r3, #1
   25070:	str	ip, [r5, #4]
   25074:	ldr	lr, [r1, r0, lsl #2]
   25078:	add	r5, r3, r2
   2507c:	ldr	ip, [r1, r3, lsl #2]
   25080:	cmp	lr, ip
   25084:	ble	250b0 <__assert_fail@plt+0x1350c>
   25088:	subs	r2, r2, #1
   2508c:	sub	r0, r0, #1
   25090:	str	lr, [r1, r5, lsl #2]
   25094:	bne	25074 <__assert_fail@plt+0x134d0>
   25098:	mov	r0, #0
   2509c:	ldrd	r4, [sp]
   250a0:	ldrd	r6, [sp, #8]
   250a4:	ldr	r8, [sp, #16]
   250a8:	add	sp, sp, #20
   250ac:	pop	{pc}		; (ldr pc, [sp], #4)
   250b0:	subs	r3, r3, #1
   250b4:	str	ip, [r1, r5, lsl #2]
   250b8:	bpl	25074 <__assert_fail@plt+0x134d0>
   250bc:	mov	r0, r1
   250c0:	lsl	r2, r2, #2
   250c4:	add	r1, r1, r4, lsl #2
   250c8:	bl	11784 <memcpy@plt>
   250cc:	mov	r0, #0
   250d0:	b	2509c <__assert_fail@plt+0x134f8>
   250d4:	add	r2, r2, r1
   250d8:	ldr	r0, [r0, #8]
   250dc:	lsl	r1, r2, #3
   250e0:	lsl	r4, r2, #1
   250e4:	bl	39064 <__assert_fail@plt+0x274c0>
   250e8:	cmp	r0, #0
   250ec:	beq	25130 <__assert_fail@plt+0x1358c>
   250f0:	ldr	r3, [r5, #4]
   250f4:	str	r4, [r5]
   250f8:	str	r0, [r5, #8]
   250fc:	cmp	r3, #0
   25100:	ldreq	ip, [r6, #4]
   25104:	beq	25118 <__assert_fail@plt+0x13574>
   25108:	ldr	r2, [r6, #4]
   2510c:	add	r4, r3, r2, lsl #1
   25110:	b	24fb8 <__assert_fail@plt+0x13414>
   25114:	ldr	r0, [r0, #8]
   25118:	ldr	r1, [r6, #8]
   2511c:	str	ip, [r5, #4]
   25120:	ldr	r2, [r6, #4]
   25124:	lsl	r2, r2, #2
   25128:	bl	11784 <memcpy@plt>
   2512c:	b	25098 <__assert_fail@plt+0x134f4>
   25130:	mov	r0, #12
   25134:	b	2509c <__assert_fail@plt+0x134f8>
   25138:	cmp	r1, #0
   2513c:	strd	r4, [sp, #-16]!
   25140:	mov	r5, r0
   25144:	str	r6, [sp, #8]
   25148:	str	lr, [sp, #12]
   2514c:	blt	25200 <__assert_fail@plt+0x1365c>
   25150:	ldr	r3, [r0, #48]	; 0x30
   25154:	cmp	r3, r1
   25158:	beq	25214 <__assert_fail@plt+0x13670>
   2515c:	ldr	r3, [r0, #80]	; 0x50
   25160:	cmp	r3, #1
   25164:	ble	251b4 <__assert_fail@plt+0x13610>
   25168:	ldr	r3, [r0, #8]
   2516c:	add	r3, r3, r1, lsl #2
   25170:	b	2517c <__assert_fail@plt+0x135d8>
   25174:	cmn	r1, #1
   25178:	beq	25200 <__assert_fail@plt+0x1365c>
   2517c:	ldr	r4, [r3], #-4
   25180:	sub	r1, r1, #1
   25184:	cmn	r4, #1
   25188:	beq	25174 <__assert_fail@plt+0x135d0>
   2518c:	ldrb	r3, [r5, #78]	; 0x4e
   25190:	cmp	r3, #0
   25194:	bne	25224 <__assert_fail@plt+0x13680>
   25198:	cmp	r4, #10
   2519c:	movne	r0, #0
   251a0:	beq	251e0 <__assert_fail@plt+0x1363c>
   251a4:	ldrd	r4, [sp]
   251a8:	ldr	r6, [sp, #8]
   251ac:	add	sp, sp, #12
   251b0:	pop	{pc}		; (ldr pc, [sp], #4)
   251b4:	ldr	r3, [r0, #4]
   251b8:	ldr	r0, [r0, #68]	; 0x44
   251bc:	ldrb	r3, [r3, r1]
   251c0:	asr	r1, r3, #5
   251c4:	and	r2, r3, #31
   251c8:	ldr	r0, [r0, r1, lsl #2]
   251cc:	lsr	r0, r0, r2
   251d0:	ands	r0, r0, #1
   251d4:	bne	251a4 <__assert_fail@plt+0x13600>
   251d8:	cmp	r3, #10
   251dc:	bne	251a4 <__assert_fail@plt+0x13600>
   251e0:	ldrb	r3, [r5, #77]	; 0x4d
   251e4:	ldrd	r4, [sp]
   251e8:	ldr	r6, [sp, #8]
   251ec:	add	sp, sp, #12
   251f0:	cmp	r3, #0
   251f4:	moveq	r0, #0
   251f8:	movne	r0, #2
   251fc:	pop	{pc}		; (ldr pc, [sp], #4)
   25200:	ldr	r6, [sp, #8]
   25204:	ldr	r0, [r5, #60]	; 0x3c
   25208:	ldrd	r4, [sp]
   2520c:	add	sp, sp, #12
   25210:	pop	{pc}		; (ldr pc, [sp], #4)
   25214:	tst	r2, #2
   25218:	movne	r0, #8
   2521c:	moveq	r0, #10
   25220:	b	251a4 <__assert_fail@plt+0x13600>
   25224:	mov	r0, r4
   25228:	bl	119c4 <iswalnum@plt>
   2522c:	sub	r3, r4, #95	; 0x5f
   25230:	cmp	r0, #0
   25234:	clz	r3, r3
   25238:	lsr	r3, r3, #5
   2523c:	movne	r3, #1
   25240:	cmp	r3, #0
   25244:	movne	r0, #1
   25248:	bne	251a4 <__assert_fail@plt+0x13600>
   2524c:	b	25198 <__assert_fail@plt+0x135f4>
   25250:	ldrb	ip, [r1, #4]
   25254:	str	r4, [sp, #-8]!
   25258:	ldr	r3, [r0, #4]
   2525c:	str	lr, [sp, #4]
   25260:	sub	ip, ip, #1
   25264:	ldrb	r3, [r3, r2]
   25268:	cmp	ip, #6
   2526c:	ldrls	pc, [pc, ip, lsl #2]
   25270:	b	2529c <__assert_fail@plt+0x136f8>
   25274:	muleq	r2, r0, r2
   25278:	muleq	r2, ip, r2
   2527c:	andeq	r5, r2, r0, asr #6
   25280:	muleq	r2, ip, r2
   25284:			; <UNDEFINED> instruction: 0x000252b4
   25288:	muleq	r2, ip, r2
   2528c:	andeq	r5, r2, ip, lsr #5
   25290:	ldrb	ip, [r1]
   25294:	cmp	ip, r3
   25298:	beq	252d4 <__assert_fail@plt+0x13730>
   2529c:	mov	r0, #0
   252a0:	ldr	r4, [sp]
   252a4:	add	sp, sp, #4
   252a8:	pop	{pc}		; (ldr pc, [sp], #4)
   252ac:	tst	r3, #128	; 0x80
   252b0:	bne	2529c <__assert_fail@plt+0x136f8>
   252b4:	cmp	r3, #10
   252b8:	beq	25374 <__assert_fail@plt+0x137d0>
   252bc:	cmp	r3, #0
   252c0:	bne	252d4 <__assert_fail@plt+0x13730>
   252c4:	ldr	ip, [r0, #84]	; 0x54
   252c8:	ldr	ip, [ip, #128]	; 0x80
   252cc:	tst	ip, #128	; 0x80
   252d0:	bne	2529c <__assert_fail@plt+0x136f8>
   252d4:	ldr	r4, [r1, #4]
   252d8:	mov	r3, #65280	; 0xff00
   252dc:	movt	r3, #3
   252e0:	and	r3, r3, r4
   252e4:	cmp	r3, #0
   252e8:	beq	25330 <__assert_fail@plt+0x1378c>
   252ec:	mov	r1, r2
   252f0:	ldr	r2, [r0, #88]	; 0x58
   252f4:	bl	25138 <__assert_fail@plt+0x13594>
   252f8:	ubfx	r1, r4, #8, #10
   252fc:	ands	r2, r1, #4
   25300:	bne	25360 <__assert_fail@plt+0x137bc>
   25304:	tst	r1, #8
   25308:	beq	25314 <__assert_fail@plt+0x13770>
   2530c:	tst	r0, #1
   25310:	bne	2529c <__assert_fail@plt+0x136f8>
   25314:	tst	r1, #32
   25318:	beq	25324 <__assert_fail@plt+0x13780>
   2531c:	ands	r3, r0, #2
   25320:	beq	2529c <__assert_fail@plt+0x136f8>
   25324:	tst	r1, #128	; 0x80
   25328:	ubfxne	r0, r0, #3, #1
   2532c:	bne	252a0 <__assert_fail@plt+0x136fc>
   25330:	ldr	r4, [sp]
   25334:	add	sp, sp, #4
   25338:	mov	r0, #1
   2533c:	pop	{pc}		; (ldr pc, [sp], #4)
   25340:	ldr	ip, [r1]
   25344:	asr	lr, r3, #5
   25348:	and	r3, r3, #31
   2534c:	ldr	ip, [ip, lr, lsl #2]
   25350:	lsr	r3, ip, r3
   25354:	ands	r3, r3, #1
   25358:	bne	252d4 <__assert_fail@plt+0x13730>
   2535c:	b	2529c <__assert_fail@plt+0x136f8>
   25360:	ands	r3, r0, #1
   25364:	beq	2529c <__assert_fail@plt+0x136f8>
   25368:	tst	r1, #8
   2536c:	beq	25314 <__assert_fail@plt+0x13770>
   25370:	b	2529c <__assert_fail@plt+0x136f8>
   25374:	ldr	r3, [r0, #84]	; 0x54
   25378:	ldr	r3, [r3, #128]	; 0x80
   2537c:	ands	r3, r3, #64	; 0x40
   25380:	bne	252d4 <__assert_fail@plt+0x13730>
   25384:	b	2529c <__assert_fail@plt+0x136f8>
   25388:	ldr	r3, [r0, #24]
   2538c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25390:	mov	r4, r0
   25394:	strd	r6, [sp, #8]
   25398:	mov	r7, r1
   2539c:	strd	r8, [sp, #16]
   253a0:	mov	r8, r2
   253a4:	strd	sl, [sp, #24]
   253a8:	cmp	r3, r1
   253ac:	str	lr, [sp, #32]
   253b0:	sub	sp, sp, #36	; 0x24
   253b4:	suble	r5, r1, r3
   253b8:	ble	2541c <__assert_fail@plt+0x13878>
   253bc:	ldr	r3, [r0, #80]	; 0x50
   253c0:	cmp	r3, #1
   253c4:	ble	253d4 <__assert_fail@plt+0x13830>
   253c8:	mov	r2, #0
   253cc:	mov	r3, #0
   253d0:	strd	r2, [r0, #16]
   253d4:	ldrb	r3, [r4, #75]	; 0x4b
   253d8:	tst	r8, #1
   253dc:	mov	r9, #0
   253e0:	movne	r1, #4
   253e4:	moveq	r1, #6
   253e8:	ldr	r0, [r4, #44]	; 0x2c
   253ec:	str	r9, [r4, #24]
   253f0:	ldr	r2, [r4, #52]	; 0x34
   253f4:	cmp	r3, r9
   253f8:	str	r9, [r4, #28]
   253fc:	movne	r3, r9
   25400:	movne	r5, r7
   25404:	str	r9, [r4, #32]
   25408:	str	r0, [r4, #48]	; 0x30
   2540c:	str	r2, [r4, #56]	; 0x38
   25410:	str	r1, [r4, #60]	; 0x3c
   25414:	strb	r9, [r4, #76]	; 0x4c
   25418:	beq	254f8 <__assert_fail@plt+0x13954>
   2541c:	cmp	r5, #0
   25420:	beq	2550c <__assert_fail@plt+0x13968>
   25424:	ldrb	r2, [r4, #76]	; 0x4c
   25428:	ldr	r1, [r4, #32]
   2542c:	ldr	r6, [r4, #28]
   25430:	cmp	r1, r5
   25434:	ble	255e0 <__assert_fail@plt+0x13a3c>
   25438:	cmp	r2, #0
   2543c:	bne	25744 <__assert_fail@plt+0x13ba0>
   25440:	mov	r2, r8
   25444:	sub	r1, r5, #1
   25448:	mov	r0, r4
   2544c:	bl	25138 <__assert_fail@plt+0x13594>
   25450:	ldr	r3, [r4, #80]	; 0x50
   25454:	sub	r2, r6, r5
   25458:	str	r0, [r4, #60]	; 0x3c
   2545c:	cmp	r3, #1
   25460:	bgt	2551c <__assert_fail@plt+0x13978>
   25464:	ldrb	r3, [r4, #75]	; 0x4b
   25468:	cmp	r3, #0
   2546c:	bne	25784 <__assert_fail@plt+0x13be0>
   25470:	ldr	ip, [r4, #32]
   25474:	str	r2, [r4, #28]
   25478:	ldr	r1, [r4, #48]	; 0x30
   2547c:	ldr	r0, [r4, #56]	; 0x38
   25480:	sub	ip, ip, r5
   25484:	ldr	r2, [r4, #80]	; 0x50
   25488:	sub	r1, r1, r5
   2548c:	str	ip, [r4, #32]
   25490:	sub	r0, r0, r5
   25494:	cmp	r3, #0
   25498:	bne	254a8 <__assert_fail@plt+0x13904>
   2549c:	ldr	r3, [r4, #4]
   254a0:	add	r5, r3, r5
   254a4:	str	r5, [r4, #4]
   254a8:	cmp	r2, #1
   254ac:	str	r7, [r4, #24]
   254b0:	str	r1, [r4, #48]	; 0x30
   254b4:	str	r0, [r4, #56]	; 0x38
   254b8:	ble	25548 <__assert_fail@plt+0x139a4>
   254bc:	ldrb	r3, [r4, #72]	; 0x48
   254c0:	mov	r0, r4
   254c4:	cmp	r3, #0
   254c8:	bne	25538 <__assert_fail@plt+0x13994>
   254cc:	bl	2406c <__assert_fail@plt+0x124c8>
   254d0:	mov	r3, #0
   254d4:	mov	r0, r3
   254d8:	str	r3, [r4, #40]	; 0x28
   254dc:	add	sp, sp, #36	; 0x24
   254e0:	ldrd	r4, [sp]
   254e4:	ldrd	r6, [sp, #8]
   254e8:	ldrd	r8, [sp, #16]
   254ec:	ldrd	sl, [sp, #24]
   254f0:	add	sp, sp, #32
   254f4:	pop	{pc}		; (ldr pc, [sp], #4)
   254f8:	ldr	r2, [r4]
   254fc:	mov	r5, r7
   25500:	cmp	r5, #0
   25504:	str	r2, [r4, #4]
   25508:	bne	25424 <__assert_fail@plt+0x13880>
   2550c:	ldr	r1, [r4, #48]	; 0x30
   25510:	ldr	r0, [r4, #56]	; 0x38
   25514:	ldr	r2, [r4, #80]	; 0x50
   25518:	b	254a8 <__assert_fail@plt+0x13904>
   2551c:	ldr	r0, [r4, #8]
   25520:	lsl	r2, r2, #2
   25524:	add	r1, r0, r5, lsl #2
   25528:	bl	11748 <memmove@plt>
   2552c:	ldr	r2, [r4, #28]
   25530:	sub	r2, r2, r5
   25534:	b	25464 <__assert_fail@plt+0x138c0>
   25538:	bl	24248 <__assert_fail@plt+0x126a4>
   2553c:	cmp	r0, #0
   25540:	beq	254d0 <__assert_fail@plt+0x1392c>
   25544:	b	254dc <__assert_fail@plt+0x13938>
   25548:	ldrb	r3, [r4, #75]	; 0x4b
   2554c:	cmp	r3, #0
   25550:	streq	r1, [r4, #28]
   25554:	beq	254d0 <__assert_fail@plt+0x1392c>
   25558:	ldrb	r3, [r4, #72]	; 0x48
   2555c:	cmp	r3, #0
   25560:	bne	25a44 <__assert_fail@plt+0x13ea0>
   25564:	ldr	r0, [r4, #64]	; 0x40
   25568:	cmp	r0, #0
   2556c:	beq	254d0 <__assert_fail@plt+0x1392c>
   25570:	ldr	r2, [r4, #28]
   25574:	ldr	r3, [r4, #36]	; 0x24
   25578:	cmp	r1, r3
   2557c:	movge	r1, r3
   25580:	cmp	r1, r2
   25584:	ble	25c1c <__assert_fail@plt+0x14078>
   25588:	ldm	r4, {ip, lr}
   2558c:	add	r3, r2, #1
   25590:	cmp	r1, r3
   25594:	add	ip, ip, r2
   25598:	ldrb	ip, [ip, r7]
   2559c:	ldrb	r0, [r0, ip]
   255a0:	strb	r0, [lr, r2]
   255a4:	ble	255d4 <__assert_fail@plt+0x13a30>
   255a8:	ldr	r2, [r4]
   255ac:	ldr	r0, [r4, #24]
   255b0:	ldr	ip, [r4, #64]	; 0x40
   255b4:	add	r2, r2, r3
   255b8:	ldrb	r0, [r2, r0]
   255bc:	ldr	r2, [r4, #4]
   255c0:	ldrb	r0, [ip, r0]
   255c4:	strb	r0, [r2, r3]
   255c8:	add	r3, r3, #1
   255cc:	cmp	r1, r3
   255d0:	bne	255a8 <__assert_fail@plt+0x13a04>
   255d4:	str	r1, [r4, #28]
   255d8:	str	r1, [r4, #32]
   255dc:	b	254d0 <__assert_fail@plt+0x1392c>
   255e0:	cmp	r2, #0
   255e4:	bne	25b4c <__assert_fail@plt+0x13fa8>
   255e8:	ldr	r2, [r4, #80]	; 0x50
   255ec:	mov	r0, #0
   255f0:	str	r0, [r4, #28]
   255f4:	cmp	r2, #1
   255f8:	ble	25904 <__assert_fail@plt+0x13d60>
   255fc:	ldrb	r0, [r4, #73]	; 0x49
   25600:	cmp	r0, #0
   25604:	beq	25678 <__assert_fail@plt+0x13ad4>
   25608:	ldr	ip, [r4]
   2560c:	sub	r2, r5, r2
   25610:	sub	r0, r5, #1
   25614:	add	lr, ip, r3
   25618:	add	r2, lr, r2
   2561c:	add	r9, lr, r0
   25620:	cmp	ip, r2
   25624:	str	lr, [sp]
   25628:	movcc	ip, r2
   2562c:	cmp	ip, r9
   25630:	bhi	25678 <__assert_fail@plt+0x13ad4>
   25634:	ldrb	r2, [lr, r0]
   25638:	and	r2, r2, #192	; 0xc0
   2563c:	cmp	r2, #128	; 0x80
   25640:	movne	r1, lr
   25644:	bne	25acc <__assert_fail@plt+0x13f28>
   25648:	mov	sl, lr
   2564c:	sub	r2, r9, #1
   25650:	sub	ip, ip, #1
   25654:	b	2566c <__assert_fail@plt+0x13ac8>
   25658:	ldrb	r0, [r9]
   2565c:	sub	r2, r2, #1
   25660:	and	r0, r0, #192	; 0xc0
   25664:	cmp	r0, #128	; 0x80
   25668:	bne	25ac4 <__assert_fail@plt+0x13f20>
   2566c:	cmp	ip, r2
   25670:	mov	r9, r2
   25674:	bne	25658 <__assert_fail@plt+0x13ab4>
   25678:	add	r9, r3, r1
   2567c:	cmp	r7, r9
   25680:	ble	25984 <__assert_fail@plt+0x13de0>
   25684:	add	fp, r4, #16
   25688:	str	r7, [sp]
   2568c:	str	r6, [sp, #4]
   25690:	ldr	r1, [r4]
   25694:	mov	r3, fp
   25698:	add	r0, sp, #16
   2569c:	ldr	sl, [r4, #44]	; 0x2c
   256a0:	ldrd	r6, [fp]
   256a4:	add	r1, r1, r9
   256a8:	sub	sl, sl, r9
   256ac:	mov	r2, sl
   256b0:	strd	r6, [sp, #24]
   256b4:	bl	1ec1c <__assert_fail@plt+0xd078>
   256b8:	sub	r3, r0, #1
   256bc:	cmn	r3, #4
   256c0:	ldrls	r1, [sp, #16]
   256c4:	bhi	25b78 <__assert_fail@plt+0x13fd4>
   256c8:	add	r9, r9, r0
   256cc:	ldr	r3, [sp]
   256d0:	cmp	r3, r9
   256d4:	bgt	25690 <__assert_fail@plt+0x13aec>
   256d8:	sub	r9, r9, r3
   256dc:	cmn	r1, #1
   256e0:	ldr	r6, [sp, #4]
   256e4:	mov	r7, r3
   256e8:	str	r9, [r4, #28]
   256ec:	beq	2598c <__assert_fail@plt+0x13de8>
   256f0:	ldrb	r3, [r4, #78]	; 0x4e
   256f4:	cmp	r3, #0
   256f8:	bne	25bec <__assert_fail@plt+0x14048>
   256fc:	cmp	r1, #10
   25700:	movne	r3, #0
   25704:	bne	25718 <__assert_fail@plt+0x13b74>
   25708:	ldrb	r3, [r4, #77]	; 0x4d
   2570c:	cmp	r3, #0
   25710:	moveq	r3, #0
   25714:	movne	r3, #2
   25718:	str	r3, [r4, #60]	; 0x3c
   2571c:	cmp	r9, #0
   25720:	bne	25b9c <__assert_fail@plt+0x13ff8>
   25724:	ldrb	r3, [r4, #75]	; 0x4b
   25728:	str	r9, [r4, #32]
   2572c:	ldr	r1, [r4, #48]	; 0x30
   25730:	ldr	r0, [r4, #56]	; 0x38
   25734:	ldr	r2, [r4, #80]	; 0x50
   25738:	sub	r1, r1, r5
   2573c:	sub	r0, r0, r5
   25740:	b	25494 <__assert_fail@plt+0x138f0>
   25744:	mov	r3, r6
   25748:	mov	r2, #0
   2574c:	ldr	r9, [r4, #12]
   25750:	b	25764 <__assert_fail@plt+0x13bc0>
   25754:	bge	258f8 <__assert_fail@plt+0x13d54>
   25758:	add	r2, r1, #1
   2575c:	cmp	r2, r3
   25760:	bge	257a0 <__assert_fail@plt+0x13bfc>
   25764:	add	r1, r2, r3
   25768:	add	r1, r1, r1, lsr #31
   2576c:	asr	r1, r1, #1
   25770:	ldr	r0, [r9, r1, lsl #2]
   25774:	cmp	r0, r5
   25778:	ble	25754 <__assert_fail@plt+0x13bb0>
   2577c:	mov	r3, r1
   25780:	b	2575c <__assert_fail@plt+0x13bb8>
   25784:	ldr	r0, [r4, #4]
   25788:	add	r1, r0, r5
   2578c:	bl	11748 <memmove@plt>
   25790:	ldr	r2, [r4, #28]
   25794:	ldrb	r3, [r4, #75]	; 0x4b
   25798:	sub	r2, r2, r5
   2579c:	b	25470 <__assert_fail@plt+0x138cc>
   257a0:	cmp	r0, r5
   257a4:	addlt	sl, r1, #1
   257a8:	bge	258f8 <__assert_fail@plt+0x13d54>
   257ac:	mov	r2, r8
   257b0:	mov	r0, r4
   257b4:	bl	25138 <__assert_fail@plt+0x13594>
   257b8:	sub	r3, r5, sl
   257bc:	cmp	r5, r6
   257c0:	str	r0, [r4, #60]	; 0x3c
   257c4:	clz	r3, r3
   257c8:	lsr	r3, r3, #5
   257cc:	movge	r3, #0
   257d0:	cmp	r3, #0
   257d4:	bne	259a4 <__assert_fail@plt+0x13e00>
   257d8:	ldr	r1, [r4, #44]	; 0x2c
   257dc:	mov	r3, #0
   257e0:	cmp	sl, #0
   257e4:	ldr	r0, [r4, #52]	; 0x34
   257e8:	strb	r3, [r4, #76]	; 0x4c
   257ec:	sub	r1, r1, r7
   257f0:	add	r2, r1, r5
   257f4:	sub	r0, r0, r7
   257f8:	add	r3, r0, r5
   257fc:	str	r2, [r4, #48]	; 0x30
   25800:	str	r3, [r4, #56]	; 0x38
   25804:	ble	25834 <__assert_fail@plt+0x13c90>
   25808:	sub	r3, sl, #-1073741823	; 0xc0000001
   2580c:	ldr	r2, [r9, r3, lsl #2]
   25810:	add	r3, r9, r3, lsl #2
   25814:	cmp	r2, r5
   25818:	beq	2582c <__assert_fail@plt+0x13c88>
   2581c:	b	25834 <__assert_fail@plt+0x13c90>
   25820:	ldr	r2, [r3, #-4]!
   25824:	cmp	r2, r5
   25828:	bne	25834 <__assert_fail@plt+0x13c90>
   2582c:	subs	sl, sl, #1
   25830:	bne	25820 <__assert_fail@plt+0x13c7c>
   25834:	cmp	sl, r6
   25838:	bge	25890 <__assert_fail@plt+0x13cec>
   2583c:	ldr	r3, [r4, #8]
   25840:	lsl	ip, sl, #2
   25844:	ldr	r2, [r3, sl, lsl #2]
   25848:	add	r3, r3, ip
   2584c:	cmn	r2, #1
   25850:	beq	25864 <__assert_fail@plt+0x13cc0>
   25854:	b	25898 <__assert_fail@plt+0x13cf4>
   25858:	ldr	r2, [r3, #4]!
   2585c:	cmn	r2, #1
   25860:	bne	25898 <__assert_fail@plt+0x13cf4>
   25864:	add	sl, sl, #1
   25868:	cmp	sl, r6
   2586c:	lsl	ip, sl, #2
   25870:	bne	25858 <__assert_fail@plt+0x13cb4>
   25874:	mov	r3, #0
   25878:	mov	r2, r3
   2587c:	str	r3, [r4, #28]
   25880:	ldrb	r3, [r4, #75]	; 0x4b
   25884:	str	r2, [r4, #32]
   25888:	ldr	r2, [r4, #80]	; 0x50
   2588c:	b	25494 <__assert_fail@plt+0x138f0>
   25890:	beq	25874 <__assert_fail@plt+0x13cd0>
   25894:	lsl	ip, sl, #2
   25898:	ldr	r2, [r9, ip]
   2589c:	sub	r2, r2, r5
   258a0:	cmp	r2, #0
   258a4:	str	r2, [r4, #28]
   258a8:	beq	25880 <__assert_fail@plt+0x13cdc>
   258ac:	ble	258d4 <__assert_fail@plt+0x13d30>
   258b0:	ldr	r1, [r4, #8]
   258b4:	mov	r3, #0
   258b8:	mvn	r0, #0
   258bc:	sub	r1, r1, #4
   258c0:	str	r0, [r1, #4]!
   258c4:	add	r3, r3, #1
   258c8:	ldr	r2, [r4, #28]
   258cc:	cmp	r2, r3
   258d0:	bgt	258c0 <__assert_fail@plt+0x13d1c>
   258d4:	mov	r1, #255	; 0xff
   258d8:	ldr	r0, [r4, #4]
   258dc:	bl	119e8 <memset@plt>
   258e0:	ldr	r2, [r4, #28]
   258e4:	ldr	r1, [r4, #48]	; 0x30
   258e8:	ldr	r0, [r4, #56]	; 0x38
   258ec:	sub	r1, r1, r5
   258f0:	sub	r0, r0, r5
   258f4:	b	25880 <__assert_fail@plt+0x13cdc>
   258f8:	mov	sl, r1
   258fc:	sub	r1, r1, #1
   25900:	b	257ac <__assert_fail@plt+0x13c08>
   25904:	ldr	r9, [r4]
   25908:	ldr	r1, [r4, #64]	; 0x40
   2590c:	add	r9, r9, r3
   25910:	add	r3, r9, r5
   25914:	ldrb	ip, [r3, #-1]
   25918:	cmp	r1, #0
   2591c:	str	r0, [r4, #32]
   25920:	ldr	r0, [r4, #68]	; 0x44
   25924:	ldrbne	ip, [r1, ip]
   25928:	asr	r1, ip, #5
   2592c:	and	r3, ip, #31
   25930:	ldr	r1, [r0, r1, lsl #2]
   25934:	lsr	r3, r1, r3
   25938:	ands	r1, r3, #1
   2593c:	bne	25954 <__assert_fail@plt+0x13db0>
   25940:	cmp	ip, #10
   25944:	bne	25954 <__assert_fail@plt+0x13db0>
   25948:	ldrb	r3, [r4, #77]	; 0x4d
   2594c:	cmp	r3, #0
   25950:	movne	r1, #2
   25954:	ldrb	r3, [r4, #75]	; 0x4b
   25958:	str	r1, [r4, #60]	; 0x3c
   2595c:	ldr	r1, [r4, #48]	; 0x30
   25960:	ldr	r0, [r4, #56]	; 0x38
   25964:	cmp	r3, #0
   25968:	sub	r1, r1, r5
   2596c:	sub	r0, r0, r5
   25970:	beq	2549c <__assert_fail@plt+0x138f8>
   25974:	str	r7, [r4, #24]
   25978:	str	r1, [r4, #48]	; 0x30
   2597c:	str	r0, [r4, #56]	; 0x38
   25980:	b	2554c <__assert_fail@plt+0x139a8>
   25984:	sub	r9, r9, r7
   25988:	str	r9, [r4, #28]
   2598c:	mov	r2, r8
   25990:	sub	r1, r6, #1
   25994:	mov	r0, r4
   25998:	bl	25138 <__assert_fail@plt+0x13594>
   2599c:	str	r0, [r4, #60]	; 0x3c
   259a0:	b	2571c <__assert_fail@plt+0x13b78>
   259a4:	ldr	r3, [r9, sl, lsl #2]
   259a8:	cmp	r3, r5
   259ac:	bne	257d8 <__assert_fail@plt+0x13c34>
   259b0:	ldr	r0, [r4, #8]
   259b4:	lsl	r8, r5, #2
   259b8:	sub	r2, r6, r5
   259bc:	lsl	r2, r2, #2
   259c0:	add	r1, r0, r8
   259c4:	bl	11748 <memmove@plt>
   259c8:	ldr	r0, [r4, #4]
   259cc:	ldr	r2, [r4, #28]
   259d0:	add	r1, r0, r5
   259d4:	sub	r2, r2, r5
   259d8:	bl	11748 <memmove@plt>
   259dc:	ldr	r3, [r4, #28]
   259e0:	ldr	r2, [r4, #32]
   259e4:	sub	r3, r3, r5
   259e8:	cmp	r3, #0
   259ec:	sub	r2, r2, r5
   259f0:	str	r3, [r4, #28]
   259f4:	str	r2, [r4, #32]
   259f8:	ble	25a28 <__assert_fail@plt+0x13e84>
   259fc:	ldr	r1, [r4, #12]
   25a00:	mov	r2, #0
   25a04:	add	r0, r1, r8
   25a08:	sub	r1, r1, #4
   25a0c:	ldr	r3, [r0], #4
   25a10:	add	r2, r2, #1
   25a14:	sub	r3, r3, r5
   25a18:	str	r3, [r1, #4]!
   25a1c:	ldr	r3, [r4, #28]
   25a20:	cmp	r3, r2
   25a24:	bgt	25a0c <__assert_fail@plt+0x13e68>
   25a28:	ldr	r1, [r4, #48]	; 0x30
   25a2c:	ldr	r0, [r4, #56]	; 0x38
   25a30:	ldrb	r3, [r4, #75]	; 0x4b
   25a34:	sub	r1, r1, r5
   25a38:	ldr	r2, [r4, #80]	; 0x50
   25a3c:	sub	r0, r0, r5
   25a40:	b	25494 <__assert_fail@plt+0x138f0>
   25a44:	ldr	r5, [r4, #28]
   25a48:	ldr	r6, [r4, #36]	; 0x24
   25a4c:	cmp	r1, r6
   25a50:	movlt	r6, r1
   25a54:	cmp	r6, r5
   25a58:	ble	25c24 <__assert_fail@plt+0x14080>
   25a5c:	bl	11934 <__ctype_toupper_loc@plt>
   25a60:	b	25a80 <__assert_fail@plt+0x13edc>
   25a64:	ldr	r3, [r1, r3, lsl #2]
   25a68:	ldr	r2, [r4, #4]
   25a6c:	strb	r3, [r2, r5]
   25a70:	add	r5, r5, #1
   25a74:	cmp	r6, r5
   25a78:	beq	25ab8 <__assert_fail@plt+0x13f14>
   25a7c:	ldr	r7, [r4, #24]
   25a80:	ldr	r3, [r4]
   25a84:	ldr	r2, [r4, #64]	; 0x40
   25a88:	ldr	r1, [r0]
   25a8c:	add	r3, r3, r5
   25a90:	ldrb	r3, [r3, r7]
   25a94:	cmp	r2, #0
   25a98:	beq	25a64 <__assert_fail@plt+0x13ec0>
   25a9c:	ldrb	r2, [r2, r3]
   25aa0:	ldr	r3, [r4, #4]
   25aa4:	ldr	r2, [r1, r2, lsl #2]
   25aa8:	strb	r2, [r3, r5]
   25aac:	add	r5, r5, #1
   25ab0:	cmp	r5, r6
   25ab4:	bne	25a7c <__assert_fail@plt+0x13ed8>
   25ab8:	str	r6, [r4, #28]
   25abc:	str	r6, [r4, #32]
   25ac0:	b	254d0 <__assert_fail@plt+0x1392c>
   25ac4:	mov	r1, sl
   25ac8:	str	sl, [sp]
   25acc:	ldr	r2, [r4, #48]	; 0x30
   25ad0:	ldr	r3, [r4, #64]	; 0x40
   25ad4:	add	r2, r1, r2
   25ad8:	sub	r2, r2, r9
   25adc:	cmp	r3, #0
   25ae0:	moveq	r1, r9
   25ae4:	bne	25c2c <__assert_fail@plt+0x14088>
   25ae8:	mov	sl, #0
   25aec:	mov	fp, #0
   25af0:	add	r3, sp, #24
   25af4:	add	r0, sp, #12
   25af8:	strd	sl, [sp, #24]
   25afc:	bl	1ec1c <__assert_fail@plt+0xd078>
   25b00:	ldr	r3, [sp]
   25b04:	add	sl, r3, r5
   25b08:	sub	r9, sl, r9
   25b0c:	cmp	r0, r9
   25b10:	bcc	25b1c <__assert_fail@plt+0x13f78>
   25b14:	cmn	r0, #3
   25b18:	bls	25b28 <__assert_fail@plt+0x13f84>
   25b1c:	ldr	r3, [r4, #24]
   25b20:	ldr	r1, [r4, #32]
   25b24:	b	25678 <__assert_fail@plt+0x13ad4>
   25b28:	ldr	r1, [sp, #12]
   25b2c:	sub	r9, r0, r9
   25b30:	mov	r2, #0
   25b34:	mov	r3, #0
   25b38:	strd	r2, [r4, #16]
   25b3c:	str	r9, [r4, #28]
   25b40:	cmn	r1, #1
   25b44:	bne	256f0 <__assert_fail@plt+0x13b4c>
   25b48:	b	25b1c <__assert_fail@plt+0x13f78>
   25b4c:	ldr	r0, [r4, #44]	; 0x2c
   25b50:	mov	ip, #0
   25b54:	ldr	r2, [r4, #52]	; 0x34
   25b58:	strb	ip, [r4, #76]	; 0x4c
   25b5c:	sub	r0, r0, r7
   25b60:	add	r0, r0, r5
   25b64:	sub	r2, r2, r7
   25b68:	add	r2, r2, r5
   25b6c:	str	r0, [r4, #48]	; 0x30
   25b70:	str	r2, [r4, #56]	; 0x38
   25b74:	b	255e8 <__assert_fail@plt+0x13a44>
   25b78:	mov	r1, #0
   25b7c:	cmp	sl, r1
   25b80:	cmpne	r0, r1
   25b84:	mov	r0, #1
   25b88:	ldrne	r3, [r4]
   25b8c:	ldrbne	r1, [r3, r9]
   25b90:	ldrd	r2, [sp, #24]
   25b94:	strd	r2, [fp]
   25b98:	b	256c8 <__assert_fail@plt+0x13b24>
   25b9c:	ble	25bc4 <__assert_fail@plt+0x14020>
   25ba0:	ldr	r2, [r4, #8]
   25ba4:	mov	r3, #0
   25ba8:	mvn	r1, #0
   25bac:	sub	r2, r2, #4
   25bb0:	str	r1, [r2, #4]!
   25bb4:	add	r3, r3, #1
   25bb8:	ldr	r9, [r4, #28]
   25bbc:	cmp	r9, r3
   25bc0:	bgt	25bb0 <__assert_fail@plt+0x1400c>
   25bc4:	ldrb	r3, [r4, #75]	; 0x4b
   25bc8:	cmp	r3, #0
   25bcc:	beq	25728 <__assert_fail@plt+0x13b84>
   25bd0:	mov	r2, r9
   25bd4:	mov	r1, #255	; 0xff
   25bd8:	ldr	r0, [r4, #4]
   25bdc:	bl	119e8 <memset@plt>
   25be0:	ldrb	r3, [r4, #75]	; 0x4b
   25be4:	ldr	r9, [r4, #28]
   25be8:	b	25728 <__assert_fail@plt+0x13b84>
   25bec:	mov	r0, r1
   25bf0:	str	r1, [sp]
   25bf4:	bl	119c4 <iswalnum@plt>
   25bf8:	ldr	r1, [sp]
   25bfc:	subs	r3, r1, #95	; 0x5f
   25c00:	movne	r3, #1
   25c04:	cmp	r0, #0
   25c08:	movne	r3, #0
   25c0c:	cmp	r3, #0
   25c10:	moveq	r3, #1
   25c14:	beq	25718 <__assert_fail@plt+0x13b74>
   25c18:	b	256fc <__assert_fail@plt+0x13b58>
   25c1c:	mov	r1, r2
   25c20:	b	255d4 <__assert_fail@plt+0x13a30>
   25c24:	mov	r6, r5
   25c28:	b	25ab8 <__assert_fail@plt+0x13f14>
   25c2c:	cmp	r2, #6
   25c30:	movlt	r1, r2
   25c34:	movge	r1, #6
   25c38:	subs	r0, r1, #1
   25c3c:	bmi	25ce4 <__assert_fail@plt+0x14140>
   25c40:	ldrb	lr, [r9, r0]
   25c44:	add	ip, sp, #32
   25c48:	add	ip, ip, r0
   25c4c:	sub	r0, r1, #2
   25c50:	cmn	r0, #1
   25c54:	ldrb	lr, [r3, lr]
   25c58:	strb	lr, [ip, #-16]
   25c5c:	beq	25ce4 <__assert_fail@plt+0x14140>
   25c60:	ldrb	lr, [r9, r0]
   25c64:	add	ip, sp, #32
   25c68:	add	ip, ip, r0
   25c6c:	sub	r0, r1, #3
   25c70:	cmn	r0, #1
   25c74:	ldrb	lr, [r3, lr]
   25c78:	strb	lr, [ip, #-16]
   25c7c:	beq	25ce4 <__assert_fail@plt+0x14140>
   25c80:	ldrb	lr, [r9, r0]
   25c84:	add	ip, sp, #32
   25c88:	add	ip, ip, r0
   25c8c:	sub	r0, r1, #4
   25c90:	cmn	r0, #1
   25c94:	ldrb	lr, [r3, lr]
   25c98:	strb	lr, [ip, #-16]
   25c9c:	beq	25ce4 <__assert_fail@plt+0x14140>
   25ca0:	ldrb	ip, [r9, r0]
   25ca4:	add	lr, sp, #32
   25ca8:	sub	r1, r1, #5
   25cac:	add	r0, lr, r0
   25cb0:	cmn	r1, #1
   25cb4:	ldrb	ip, [r3, ip]
   25cb8:	strb	ip, [r0, #-16]
   25cbc:	beq	25ce4 <__assert_fail@plt+0x14140>
   25cc0:	ldrb	r0, [r9, r1]
   25cc4:	add	r1, lr, r1
   25cc8:	cmp	r2, #5
   25ccc:	ldrb	r0, [r3, r0]
   25cd0:	strb	r0, [r1, #-16]
   25cd4:	ble	25ce4 <__assert_fail@plt+0x14140>
   25cd8:	ldrb	r1, [r9]
   25cdc:	ldrb	r3, [r3, r1]
   25ce0:	strb	r3, [sp, #16]
   25ce4:	add	r1, sp, #16
   25ce8:	b	25ae8 <__assert_fail@plt+0x13f44>
   25cec:	strd	r4, [sp, #-16]!
   25cf0:	mov	r4, r1
   25cf4:	mov	r1, r2
   25cf8:	ldr	r2, [r0, #88]	; 0x58
   25cfc:	mov	r5, r0
   25d00:	str	r6, [sp, #8]
   25d04:	str	lr, [sp, #12]
   25d08:	bl	25138 <__assert_fail@plt+0x13594>
   25d0c:	ldr	r1, [r4, #8]
   25d10:	cmp	r1, #0
   25d14:	ble	25d80 <__assert_fail@plt+0x141dc>
   25d18:	ldr	ip, [r5, #84]	; 0x54
   25d1c:	ands	r3, r0, #1
   25d20:	and	r2, r0, #2
   25d24:	and	r0, r0, #8
   25d28:	ldr	lr, [r4, #12]
   25d2c:	ldr	ip, [ip]
   25d30:	beq	25d94 <__assert_fail@plt+0x141f0>
   25d34:	cmp	r2, #0
   25d38:	beq	25ec4 <__assert_fail@plt+0x14320>
   25d3c:	cmp	r0, #0
   25d40:	beq	25f54 <__assert_fail@plt+0x143b0>
   25d44:	mov	r2, #0
   25d48:	ldr	r0, [lr, r2, lsl #2]
   25d4c:	add	r2, r2, #1
   25d50:	add	r3, ip, r0, lsl #3
   25d54:	ldrb	r4, [r3, #4]
   25d58:	ldr	r3, [r3, #4]
   25d5c:	cmp	r4, #2
   25d60:	ubfx	r3, r3, #8, #10
   25d64:	bne	25d78 <__assert_fail@plt+0x141d4>
   25d68:	cmp	r3, #0
   25d6c:	beq	25dd8 <__assert_fail@plt+0x14234>
   25d70:	tst	r3, #8
   25d74:	beq	25dd8 <__assert_fail@plt+0x14234>
   25d78:	cmp	r1, r2
   25d7c:	bne	25d48 <__assert_fail@plt+0x141a4>
   25d80:	ldrd	r4, [sp]
   25d84:	mov	r0, #0
   25d88:	ldr	r6, [sp, #8]
   25d8c:	add	sp, sp, #12
   25d90:	pop	{pc}		; (ldr pc, [sp], #4)
   25d94:	cmp	r2, #0
   25d98:	beq	25e34 <__assert_fail@plt+0x14290>
   25d9c:	cmp	r0, #0
   25da0:	sub	lr, lr, #4
   25da4:	beq	25df4 <__assert_fail@plt+0x14250>
   25da8:	ldr	r0, [lr, #4]!
   25dac:	add	r3, r3, #1
   25db0:	add	r2, ip, r0, lsl #3
   25db4:	ldrb	r4, [r2, #4]
   25db8:	ldr	r2, [r2, #4]
   25dbc:	cmp	r4, #2
   25dc0:	ubfx	r2, r2, #8, #10
   25dc4:	bne	25de8 <__assert_fail@plt+0x14244>
   25dc8:	cmp	r2, #0
   25dcc:	beq	25dd8 <__assert_fail@plt+0x14234>
   25dd0:	tst	r2, #4
   25dd4:	bne	25de8 <__assert_fail@plt+0x14244>
   25dd8:	ldrd	r4, [sp]
   25ddc:	ldr	r6, [sp, #8]
   25de0:	add	sp, sp, #12
   25de4:	pop	{pc}		; (ldr pc, [sp], #4)
   25de8:	cmp	r1, r3
   25dec:	bne	25da8 <__assert_fail@plt+0x14204>
   25df0:	b	25d80 <__assert_fail@plt+0x141dc>
   25df4:	mov	r3, r0
   25df8:	ldr	r0, [lr, #4]!
   25dfc:	add	r3, r3, #1
   25e00:	add	r2, ip, r0, lsl #3
   25e04:	ldrb	r4, [r2, #4]
   25e08:	ldr	r2, [r2, #4]
   25e0c:	cmp	r4, #2
   25e10:	ubfx	r2, r2, #8, #10
   25e14:	bne	25e28 <__assert_fail@plt+0x14284>
   25e18:	cmp	r2, #0
   25e1c:	beq	25dd8 <__assert_fail@plt+0x14234>
   25e20:	tst	r2, #132	; 0x84
   25e24:	beq	25dd8 <__assert_fail@plt+0x14234>
   25e28:	cmp	r1, r3
   25e2c:	bne	25df8 <__assert_fail@plt+0x14254>
   25e30:	b	25d80 <__assert_fail@plt+0x141dc>
   25e34:	cmp	r0, #0
   25e38:	beq	25e80 <__assert_fail@plt+0x142dc>
   25e3c:	sub	lr, lr, #4
   25e40:	mov	r3, r2
   25e44:	ldr	r0, [lr, #4]!
   25e48:	add	r3, r3, #1
   25e4c:	add	r2, ip, r0, lsl #3
   25e50:	ldrb	r4, [r2, #4]
   25e54:	ldr	r2, [r2, #4]
   25e58:	cmp	r4, #2
   25e5c:	ubfx	r2, r2, #8, #10
   25e60:	bne	25e74 <__assert_fail@plt+0x142d0>
   25e64:	cmp	r2, #0
   25e68:	beq	25dd8 <__assert_fail@plt+0x14234>
   25e6c:	tst	r2, #36	; 0x24
   25e70:	beq	25dd8 <__assert_fail@plt+0x14234>
   25e74:	cmp	r1, r3
   25e78:	bne	25e44 <__assert_fail@plt+0x142a0>
   25e7c:	b	25d80 <__assert_fail@plt+0x141dc>
   25e80:	sub	r2, lr, #4
   25e84:	mov	r3, r0
   25e88:	ldr	r0, [r2, #4]!
   25e8c:	add	r3, r3, #1
   25e90:	add	lr, ip, r0, lsl #3
   25e94:	ldrb	r4, [lr, #4]
   25e98:	ldr	lr, [lr, #4]
   25e9c:	cmp	r4, #2
   25ea0:	ubfx	lr, lr, #8, #10
   25ea4:	bne	25eb8 <__assert_fail@plt+0x14314>
   25ea8:	cmp	lr, #0
   25eac:	beq	25dd8 <__assert_fail@plt+0x14234>
   25eb0:	tst	lr, #164	; 0xa4
   25eb4:	beq	25dd8 <__assert_fail@plt+0x14234>
   25eb8:	cmp	r1, r3
   25ebc:	bne	25e88 <__assert_fail@plt+0x142e4>
   25ec0:	b	25d80 <__assert_fail@plt+0x141dc>
   25ec4:	cmp	r0, #0
   25ec8:	beq	25f0c <__assert_fail@plt+0x14368>
   25ecc:	mov	r3, r2
   25ed0:	ldr	r0, [lr, r3, lsl #2]
   25ed4:	add	r2, ip, r0, lsl #3
   25ed8:	ldrb	r4, [r2, #4]
   25edc:	ldr	r2, [r2, #4]
   25ee0:	cmp	r4, #2
   25ee4:	ubfx	r2, r2, #8, #10
   25ee8:	bne	25efc <__assert_fail@plt+0x14358>
   25eec:	cmp	r2, #0
   25ef0:	beq	25dd8 <__assert_fail@plt+0x14234>
   25ef4:	tst	r2, #8
   25ef8:	beq	25f94 <__assert_fail@plt+0x143f0>
   25efc:	add	r3, r3, #1
   25f00:	cmp	r1, r3
   25f04:	bne	25ed0 <__assert_fail@plt+0x1432c>
   25f08:	b	25d80 <__assert_fail@plt+0x141dc>
   25f0c:	mov	r3, r0
   25f10:	ldr	r0, [lr, r3, lsl #2]
   25f14:	add	r2, ip, r0, lsl #3
   25f18:	ldrb	r4, [r2, #4]
   25f1c:	ldr	r2, [r2, #4]
   25f20:	cmp	r4, #2
   25f24:	ubfx	r2, r2, #8, #10
   25f28:	bne	25f44 <__assert_fail@plt+0x143a0>
   25f2c:	cmp	r2, #0
   25f30:	beq	25dd8 <__assert_fail@plt+0x14234>
   25f34:	tst	r2, #8
   25f38:	bne	25f44 <__assert_fail@plt+0x143a0>
   25f3c:	tst	r2, #160	; 0xa0
   25f40:	beq	25dd8 <__assert_fail@plt+0x14234>
   25f44:	add	r3, r3, #1
   25f48:	cmp	r3, r1
   25f4c:	bne	25f10 <__assert_fail@plt+0x1436c>
   25f50:	b	25d80 <__assert_fail@plt+0x141dc>
   25f54:	mov	r3, r0
   25f58:	ldr	r0, [lr, r3, lsl #2]
   25f5c:	add	r2, ip, r0, lsl #3
   25f60:	ldrb	r4, [r2, #4]
   25f64:	ldr	r2, [r2, #4]
   25f68:	cmp	r4, #2
   25f6c:	ubfx	r2, r2, #8, #10
   25f70:	bne	25f84 <__assert_fail@plt+0x143e0>
   25f74:	cmp	r2, #0
   25f78:	beq	25dd8 <__assert_fail@plt+0x14234>
   25f7c:	tst	r2, #8
   25f80:	beq	25fa0 <__assert_fail@plt+0x143fc>
   25f84:	add	r3, r3, #1
   25f88:	cmp	r1, r3
   25f8c:	bne	25f58 <__assert_fail@plt+0x143b4>
   25f90:	b	25d80 <__assert_fail@plt+0x141dc>
   25f94:	tst	r2, #32
   25f98:	beq	25dd8 <__assert_fail@plt+0x14234>
   25f9c:	b	25efc <__assert_fail@plt+0x14358>
   25fa0:	tst	r2, #128	; 0x80
   25fa4:	beq	25dd8 <__assert_fail@plt+0x14234>
   25fa8:	b	25f84 <__assert_fail@plt+0x143e0>
   25fac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25fb0:	strd	r6, [sp, #8]
   25fb4:	strd	sl, [sp, #24]
   25fb8:	ldr	fp, [r1]
   25fbc:	strd	r8, [sp, #16]
   25fc0:	str	lr, [sp, #32]
   25fc4:	sub	sp, sp, #12
   25fc8:	ldr	r6, [r0, #84]	; 0x54
   25fcc:	cmp	fp, #0
   25fd0:	ble	2608c <__assert_fail@plt+0x144e8>
   25fd4:	mov	r8, r3
   25fd8:	mov	r9, r2
   25fdc:	mov	sl, r0
   25fe0:	mov	r7, r1
   25fe4:	mov	r4, #0
   25fe8:	b	25ff4 <__assert_fail@plt+0x14450>
   25fec:	cmp	r4, fp
   25ff0:	bge	2608c <__assert_fail@plt+0x144e8>
   25ff4:	ldr	r3, [r9]
   25ff8:	ldr	ip, [r6]
   25ffc:	ldr	r5, [r3, r4, lsl #2]
   26000:	add	r4, r4, #1
   26004:	add	lr, ip, r5, lsl #3
   26008:	ldrb	lr, [lr, #4]
   2600c:	cmp	lr, #8
   26010:	bne	25fec <__assert_fail@plt+0x14448>
   26014:	ldr	r3, [ip, r5, lsl #3]
   26018:	cmp	r3, #31
   2601c:	bgt	25fec <__assert_fail@plt+0x14448>
   26020:	ldr	r2, [r6, #80]	; 0x50
   26024:	lsr	r3, r2, r3
   26028:	tst	r3, #1
   2602c:	beq	25fec <__assert_fail@plt+0x14448>
   26030:	ldr	fp, [sl, #124]	; 0x7c
   26034:	ldr	r3, [sl, #128]	; 0x80
   26038:	ldr	r2, [sl, #132]	; 0x84
   2603c:	cmp	r3, fp
   26040:	beq	260b4 <__assert_fail@plt+0x14510>
   26044:	mov	r1, #24
   26048:	mov	r0, #1
   2604c:	str	r2, [sp, #4]
   26050:	bl	38fb4 <__assert_fail@plt+0x27410>
   26054:	ldr	r2, [sp, #4]
   26058:	ldr	r3, [sl, #124]	; 0x7c
   2605c:	str	r0, [r2, fp, lsl #2]
   26060:	ldr	r2, [sl, #132]	; 0x84
   26064:	add	r1, r3, #1
   26068:	ldr	r3, [r2, r3, lsl #2]
   2606c:	cmp	r3, #0
   26070:	beq	260ac <__assert_fail@plt+0x14508>
   26074:	str	r5, [r3, #4]
   26078:	str	r1, [sl, #124]	; 0x7c
   2607c:	str	r8, [r3]
   26080:	ldr	fp, [r7]
   26084:	cmp	r4, fp
   26088:	blt	25ff4 <__assert_fail@plt+0x14450>
   2608c:	mov	r0, #0
   26090:	add	sp, sp, #12
   26094:	ldrd	r4, [sp]
   26098:	ldrd	r6, [sp, #8]
   2609c:	ldrd	r8, [sp, #16]
   260a0:	ldrd	sl, [sp, #24]
   260a4:	add	sp, sp, #32
   260a8:	pop	{pc}		; (ldr pc, [sp], #4)
   260ac:	mov	r0, #12
   260b0:	b	26090 <__assert_fail@plt+0x144ec>
   260b4:	mov	r0, r2
   260b8:	lsl	r1, fp, #3
   260bc:	bl	39064 <__assert_fail@plt+0x274c0>
   260c0:	subs	r2, r0, #0
   260c4:	lsl	r3, fp, #1
   260c8:	beq	260ac <__assert_fail@plt+0x14508>
   260cc:	str	r3, [sl, #128]	; 0x80
   260d0:	str	r2, [sl, #132]	; 0x84
   260d4:	ldr	fp, [sl, #124]	; 0x7c
   260d8:	b	26044 <__assert_fail@plt+0x144a0>
   260dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   260e0:	mov	r5, r1
   260e4:	strd	r6, [sp, #8]
   260e8:	mov	r6, r0
   260ec:	strd	r8, [sp, #16]
   260f0:	mov	r8, r3
   260f4:	strd	sl, [sp, #24]
   260f8:	mov	sl, r2
   260fc:	str	lr, [sp, #32]
   26100:	sub	sp, sp, #4
   26104:	ldr	r9, [sp, #40]	; 0x28
   26108:	ldr	ip, [sp, #48]	; 0x30
   2610c:	ldr	r7, [sp, #44]	; 0x2c
   26110:	tst	ip, #4194304	; 0x400000
   26114:	beq	26138 <__assert_fail@plt+0x14594>
   26118:	mov	r0, r7
   2611c:	movw	r1, #50660	; 0xc5e4
   26120:	movt	r1, #3
   26124:	bl	1170c <strcmp@plt>
   26128:	cmp	r0, #0
   2612c:	movweq	r7, #50652	; 0xc5dc
   26130:	movteq	r7, #3
   26134:	bne	2623c <__assert_fail@plt+0x14698>
   26138:	ldr	r4, [r8]
   2613c:	ldr	r3, [r9]
   26140:	ldr	fp, [sl]
   26144:	cmp	r3, r4
   26148:	beq	26320 <__assert_fail@plt+0x1477c>
   2614c:	add	r3, r4, #1
   26150:	mov	r0, r7
   26154:	str	r3, [r8]
   26158:	bl	116c4 <wctype@plt>
   2615c:	movw	r1, #50676	; 0xc5f4
   26160:	movt	r1, #3
   26164:	str	r0, [fp, r4, lsl #2]
   26168:	mov	r0, r7
   2616c:	bl	1170c <strcmp@plt>
   26170:	subs	r4, r0, #0
   26174:	beq	261f4 <__assert_fail@plt+0x14650>
   26178:	movw	r1, #50684	; 0xc5fc
   2617c:	movt	r1, #3
   26180:	mov	r0, r7
   26184:	bl	1170c <strcmp@plt>
   26188:	subs	r4, r0, #0
   2618c:	bne	26260 <__assert_fail@plt+0x146bc>
   26190:	bl	11964 <__ctype_b_loc@plt>
   26194:	ldr	r3, [r0]
   26198:	cmp	r6, #0
   2619c:	moveq	ip, #1
   261a0:	sub	r3, r3, #2
   261a4:	bne	26448 <__assert_fail@plt+0x148a4>
   261a8:	ldrh	r2, [r3, #2]!
   261ac:	asr	r1, r4, #5
   261b0:	and	r0, r4, #31
   261b4:	add	r4, r4, #1
   261b8:	tst	r2, #2
   261bc:	beq	261cc <__assert_fail@plt+0x14628>
   261c0:	ldr	r2, [r5, r1, lsl #2]
   261c4:	orr	r2, r2, ip, lsl r0
   261c8:	str	r2, [r5, r1, lsl #2]
   261cc:	cmp	r4, #256	; 0x100
   261d0:	bne	261a8 <__assert_fail@plt+0x14604>
   261d4:	mov	r0, #0
   261d8:	add	sp, sp, #4
   261dc:	ldrd	r4, [sp]
   261e0:	ldrd	r6, [sp, #8]
   261e4:	ldrd	r8, [sp, #16]
   261e8:	ldrd	sl, [sp, #24]
   261ec:	add	sp, sp, #32
   261f0:	pop	{pc}		; (ldr pc, [sp], #4)
   261f4:	bl	11964 <__ctype_b_loc@plt>
   261f8:	ldr	r3, [r0]
   261fc:	cmp	r6, #0
   26200:	moveq	lr, #1
   26204:	sub	r3, r3, #2
   26208:	bne	2640c <__assert_fail@plt+0x14868>
   2620c:	ldrh	r0, [r3, #2]!
   26210:	asr	r2, r4, #5
   26214:	and	ip, r4, #31
   26218:	add	r4, r4, #1
   2621c:	tst	r0, #8
   26220:	beq	26230 <__assert_fail@plt+0x1468c>
   26224:	ldr	r1, [r5, r2, lsl #2]
   26228:	orr	r1, r1, lr, lsl ip
   2622c:	str	r1, [r5, r2, lsl #2]
   26230:	cmp	r4, #256	; 0x100
   26234:	bne	2620c <__assert_fail@plt+0x14668>
   26238:	b	261d4 <__assert_fail@plt+0x14630>
   2623c:	mov	r0, r7
   26240:	movw	r1, #50668	; 0xc5ec
   26244:	movt	r1, #3
   26248:	bl	1170c <strcmp@plt>
   2624c:	cmp	r0, #0
   26250:	movw	r3, #50652	; 0xc5dc
   26254:	movt	r3, #3
   26258:	moveq	r7, r3
   2625c:	b	26138 <__assert_fail@plt+0x14594>
   26260:	movw	r1, #50668	; 0xc5ec
   26264:	movt	r1, #3
   26268:	mov	r0, r7
   2626c:	bl	1170c <strcmp@plt>
   26270:	subs	r4, r0, #0
   26274:	beq	262d8 <__assert_fail@plt+0x14734>
   26278:	movw	r1, #50692	; 0xc604
   2627c:	movt	r1, #3
   26280:	mov	r0, r7
   26284:	bl	1170c <strcmp@plt>
   26288:	subs	r4, r0, #0
   2628c:	bne	2634c <__assert_fail@plt+0x147a8>
   26290:	bl	11964 <__ctype_b_loc@plt>
   26294:	ldr	r3, [r0]
   26298:	cmp	r6, #0
   2629c:	moveq	ip, #1
   262a0:	sub	r3, r3, #2
   262a4:	bne	26624 <__assert_fail@plt+0x14a80>
   262a8:	ldrh	r2, [r3, #2]!
   262ac:	asr	r1, r4, #5
   262b0:	and	r0, r4, #31
   262b4:	add	r4, r4, #1
   262b8:	tst	r2, #8192	; 0x2000
   262bc:	beq	262cc <__assert_fail@plt+0x14728>
   262c0:	ldr	r2, [r5, r1, lsl #2]
   262c4:	orr	r2, r2, ip, lsl r0
   262c8:	str	r2, [r5, r1, lsl #2]
   262cc:	cmp	r4, #256	; 0x100
   262d0:	bne	262a8 <__assert_fail@plt+0x14704>
   262d4:	b	261d4 <__assert_fail@plt+0x14630>
   262d8:	bl	11964 <__ctype_b_loc@plt>
   262dc:	ldr	r3, [r0]
   262e0:	cmp	r6, #0
   262e4:	moveq	ip, #1
   262e8:	sub	r3, r3, #2
   262ec:	bne	26484 <__assert_fail@plt+0x148e0>
   262f0:	ldrh	r2, [r3, #2]!
   262f4:	asr	r1, r4, #5
   262f8:	and	r0, r4, #31
   262fc:	add	r4, r4, #1
   26300:	tst	r2, #512	; 0x200
   26304:	beq	26314 <__assert_fail@plt+0x14770>
   26308:	ldr	r2, [r5, r1, lsl #2]
   2630c:	orr	r2, r2, ip, lsl r0
   26310:	str	r2, [r5, r1, lsl #2]
   26314:	cmp	r4, #256	; 0x100
   26318:	bne	262f0 <__assert_fail@plt+0x1474c>
   2631c:	b	261d4 <__assert_fail@plt+0x14630>
   26320:	lsl	r4, r4, #1
   26324:	mov	r0, fp
   26328:	add	r4, r4, #1
   2632c:	lsl	r1, r4, #2
   26330:	bl	39064 <__assert_fail@plt+0x274c0>
   26334:	subs	fp, r0, #0
   26338:	beq	26580 <__assert_fail@plt+0x149dc>
   2633c:	str	fp, [sl]
   26340:	str	r4, [r9]
   26344:	ldr	r4, [r8]
   26348:	b	2614c <__assert_fail@plt+0x145a8>
   2634c:	movw	r1, #50652	; 0xc5dc
   26350:	movt	r1, #3
   26354:	mov	r0, r7
   26358:	bl	1170c <strcmp@plt>
   2635c:	subs	r4, r0, #0
   26360:	beq	263c4 <__assert_fail@plt+0x14820>
   26364:	movw	r1, #50700	; 0xc60c
   26368:	movt	r1, #3
   2636c:	mov	r0, r7
   26370:	bl	1170c <strcmp@plt>
   26374:	subs	r4, r0, #0
   26378:	bne	264c0 <__assert_fail@plt+0x1491c>
   2637c:	bl	11964 <__ctype_b_loc@plt>
   26380:	ldr	r3, [r0]
   26384:	cmp	r6, #0
   26388:	moveq	ip, #1
   2638c:	sub	r3, r3, #2
   26390:	bne	26660 <__assert_fail@plt+0x14abc>
   26394:	ldrh	r1, [r3, #2]!
   26398:	asr	r2, r4, #5
   2639c:	and	r0, r4, #31
   263a0:	add	r4, r4, #1
   263a4:	tst	r1, #2048	; 0x800
   263a8:	beq	263b8 <__assert_fail@plt+0x14814>
   263ac:	ldr	r1, [r5, r2, lsl #2]
   263b0:	orr	r1, r1, ip, lsl r0
   263b4:	str	r1, [r5, r2, lsl #2]
   263b8:	cmp	r4, #256	; 0x100
   263bc:	bne	26394 <__assert_fail@plt+0x147f0>
   263c0:	b	261d4 <__assert_fail@plt+0x14630>
   263c4:	bl	11964 <__ctype_b_loc@plt>
   263c8:	ldr	r3, [r0]
   263cc:	cmp	r6, #0
   263d0:	moveq	ip, #1
   263d4:	sub	r3, r3, #2
   263d8:	bne	265e8 <__assert_fail@plt+0x14a44>
   263dc:	ldrh	r2, [r3, #2]!
   263e0:	asr	r1, r4, #5
   263e4:	and	r0, r4, #31
   263e8:	add	r4, r4, #1
   263ec:	tst	r2, #1024	; 0x400
   263f0:	beq	26400 <__assert_fail@plt+0x1485c>
   263f4:	ldr	r2, [r5, r1, lsl #2]
   263f8:	orr	r2, r2, ip, lsl r0
   263fc:	str	r2, [r5, r1, lsl #2]
   26400:	cmp	r4, #256	; 0x100
   26404:	bne	263dc <__assert_fail@plt+0x14838>
   26408:	b	261d4 <__assert_fail@plt+0x14630>
   2640c:	add	ip, r6, #256	; 0x100
   26410:	mov	lr, #1
   26414:	ldrh	r2, [r3, #2]!
   26418:	tst	r2, #8
   2641c:	beq	26438 <__assert_fail@plt+0x14894>
   26420:	ldrb	r2, [r6]
   26424:	asr	r0, r2, #5
   26428:	and	r2, r2, #31
   2642c:	ldr	r1, [r5, r0, lsl #2]
   26430:	orr	r2, r1, lr, lsl r2
   26434:	str	r2, [r5, r0, lsl #2]
   26438:	add	r6, r6, #1
   2643c:	cmp	ip, r6
   26440:	bne	26414 <__assert_fail@plt+0x14870>
   26444:	b	261d4 <__assert_fail@plt+0x14630>
   26448:	add	ip, r6, #256	; 0x100
   2644c:	mov	lr, #1
   26450:	ldrh	r2, [r3, #2]!
   26454:	tst	r2, #2
   26458:	beq	26474 <__assert_fail@plt+0x148d0>
   2645c:	ldrb	r2, [r6]
   26460:	asr	r0, r2, #5
   26464:	and	r2, r2, #31
   26468:	ldr	r1, [r5, r0, lsl #2]
   2646c:	orr	r2, r1, lr, lsl r2
   26470:	str	r2, [r5, r0, lsl #2]
   26474:	add	r6, r6, #1
   26478:	cmp	ip, r6
   2647c:	bne	26450 <__assert_fail@plt+0x148ac>
   26480:	b	261d4 <__assert_fail@plt+0x14630>
   26484:	add	ip, r6, #256	; 0x100
   26488:	mov	lr, #1
   2648c:	ldrh	r2, [r3, #2]!
   26490:	tst	r2, #512	; 0x200
   26494:	beq	264b0 <__assert_fail@plt+0x1490c>
   26498:	ldrb	r2, [r6]
   2649c:	asr	r0, r2, #5
   264a0:	and	r2, r2, #31
   264a4:	ldr	r1, [r5, r0, lsl #2]
   264a8:	orr	r2, r1, lr, lsl r2
   264ac:	str	r2, [r5, r0, lsl #2]
   264b0:	add	r6, r6, #1
   264b4:	cmp	ip, r6
   264b8:	bne	2648c <__assert_fail@plt+0x148e8>
   264bc:	b	261d4 <__assert_fail@plt+0x14630>
   264c0:	movw	r1, #50708	; 0xc614
   264c4:	movt	r1, #3
   264c8:	mov	r0, r7
   264cc:	bl	1170c <strcmp@plt>
   264d0:	subs	r4, r0, #0
   264d4:	bne	26520 <__assert_fail@plt+0x1497c>
   264d8:	bl	11964 <__ctype_b_loc@plt>
   264dc:	ldr	r3, [r0]
   264e0:	cmp	r6, #0
   264e4:	moveq	ip, #1
   264e8:	sub	r3, r3, #2
   264ec:	bne	26870 <__assert_fail@plt+0x14ccc>
   264f0:	ldrh	r2, [r3, #2]!
   264f4:	asr	r1, r4, #5
   264f8:	and	r0, r4, #31
   264fc:	add	r4, r4, #1
   26500:	tst	r2, #16384	; 0x4000
   26504:	beq	26514 <__assert_fail@plt+0x14970>
   26508:	ldr	r2, [r5, r1, lsl #2]
   2650c:	orr	r2, r2, ip, lsl r0
   26510:	str	r2, [r5, r1, lsl #2]
   26514:	cmp	r4, #256	; 0x100
   26518:	bne	264f0 <__assert_fail@plt+0x1494c>
   2651c:	b	261d4 <__assert_fail@plt+0x14630>
   26520:	movw	r1, #50660	; 0xc5e4
   26524:	movt	r1, #3
   26528:	mov	r0, r7
   2652c:	bl	1170c <strcmp@plt>
   26530:	subs	r4, r0, #0
   26534:	bne	26588 <__assert_fail@plt+0x149e4>
   26538:	bl	11964 <__ctype_b_loc@plt>
   2653c:	ldr	r3, [r0]
   26540:	cmp	r6, #0
   26544:	moveq	ip, #1
   26548:	sub	r3, r3, #2
   2654c:	bne	268e8 <__assert_fail@plt+0x14d44>
   26550:	ldrh	r2, [r3, #2]!
   26554:	asr	r1, r4, #5
   26558:	and	r0, r4, #31
   2655c:	add	r4, r4, #1
   26560:	tst	r2, #256	; 0x100
   26564:	beq	26574 <__assert_fail@plt+0x149d0>
   26568:	ldr	r2, [r5, r1, lsl #2]
   2656c:	orr	r2, r2, ip, lsl r0
   26570:	str	r2, [r5, r1, lsl #2]
   26574:	cmp	r4, #256	; 0x100
   26578:	bne	26550 <__assert_fail@plt+0x149ac>
   2657c:	b	261d4 <__assert_fail@plt+0x14630>
   26580:	mov	r0, #12
   26584:	b	261d8 <__assert_fail@plt+0x14634>
   26588:	movw	r1, #50716	; 0xc61c
   2658c:	movt	r1, #3
   26590:	mov	r0, r7
   26594:	bl	1170c <strcmp@plt>
   26598:	subs	r4, r0, #0
   2659c:	bne	2669c <__assert_fail@plt+0x14af8>
   265a0:	bl	11964 <__ctype_b_loc@plt>
   265a4:	ldr	r3, [r0]
   265a8:	cmp	r6, #0
   265ac:	moveq	ip, #1
   265b0:	sub	r3, r3, #2
   265b4:	bne	268ac <__assert_fail@plt+0x14d08>
   265b8:	ldrh	r2, [r3, #2]!
   265bc:	asr	r1, r4, #5
   265c0:	and	r0, r4, #31
   265c4:	add	r4, r4, #1
   265c8:	tst	r2, #1
   265cc:	beq	265dc <__assert_fail@plt+0x14a38>
   265d0:	ldr	r2, [r5, r1, lsl #2]
   265d4:	orr	r2, r2, ip, lsl r0
   265d8:	str	r2, [r5, r1, lsl #2]
   265dc:	cmp	r4, #256	; 0x100
   265e0:	bne	265b8 <__assert_fail@plt+0x14a14>
   265e4:	b	261d4 <__assert_fail@plt+0x14630>
   265e8:	add	ip, r6, #256	; 0x100
   265ec:	mov	lr, #1
   265f0:	ldrh	r2, [r3, #2]!
   265f4:	tst	r2, #1024	; 0x400
   265f8:	beq	26614 <__assert_fail@plt+0x14a70>
   265fc:	ldrb	r2, [r6]
   26600:	asr	r0, r2, #5
   26604:	and	r2, r2, #31
   26608:	ldr	r1, [r5, r0, lsl #2]
   2660c:	orr	r2, r1, lr, lsl r2
   26610:	str	r2, [r5, r0, lsl #2]
   26614:	add	r6, r6, #1
   26618:	cmp	ip, r6
   2661c:	bne	265f0 <__assert_fail@plt+0x14a4c>
   26620:	b	261d4 <__assert_fail@plt+0x14630>
   26624:	add	ip, r6, #256	; 0x100
   26628:	mov	lr, #1
   2662c:	ldrh	r2, [r3, #2]!
   26630:	tst	r2, #8192	; 0x2000
   26634:	beq	26650 <__assert_fail@plt+0x14aac>
   26638:	ldrb	r2, [r6]
   2663c:	asr	r0, r2, #5
   26640:	and	r2, r2, #31
   26644:	ldr	r1, [r5, r0, lsl #2]
   26648:	orr	r2, r1, lr, lsl r2
   2664c:	str	r2, [r5, r0, lsl #2]
   26650:	add	r6, r6, #1
   26654:	cmp	ip, r6
   26658:	bne	2662c <__assert_fail@plt+0x14a88>
   2665c:	b	261d4 <__assert_fail@plt+0x14630>
   26660:	add	r1, r6, #256	; 0x100
   26664:	mov	lr, #1
   26668:	ldrh	r2, [r3, #2]!
   2666c:	tst	r2, #2048	; 0x800
   26670:	beq	2668c <__assert_fail@plt+0x14ae8>
   26674:	ldrb	r2, [r6]
   26678:	asr	ip, r2, #5
   2667c:	and	r2, r2, #31
   26680:	ldr	r0, [r5, ip, lsl #2]
   26684:	orr	r2, r0, lr, lsl r2
   26688:	str	r2, [r5, ip, lsl #2]
   2668c:	add	r6, r6, #1
   26690:	cmp	r1, r6
   26694:	bne	26668 <__assert_fail@plt+0x14ac4>
   26698:	b	261d4 <__assert_fail@plt+0x14630>
   2669c:	movw	r1, #50724	; 0xc624
   266a0:	movt	r1, #3
   266a4:	mov	r0, r7
   266a8:	bl	1170c <strcmp@plt>
   266ac:	subs	r4, r0, #0
   266b0:	bne	26738 <__assert_fail@plt+0x14b94>
   266b4:	bl	11964 <__ctype_b_loc@plt>
   266b8:	ldr	r3, [r0]
   266bc:	cmp	r6, #0
   266c0:	moveq	r0, #1
   266c4:	sub	r3, r3, #2
   266c8:	bne	266fc <__assert_fail@plt+0x14b58>
   266cc:	ldrsh	r2, [r3, #2]!
   266d0:	asr	r1, r4, #5
   266d4:	and	ip, r4, #31
   266d8:	add	r4, r4, #1
   266dc:	cmp	r2, #0
   266e0:	bge	266f0 <__assert_fail@plt+0x14b4c>
   266e4:	ldr	r2, [r5, r1, lsl #2]
   266e8:	orr	r2, r2, r0, lsl ip
   266ec:	str	r2, [r5, r1, lsl #2]
   266f0:	cmp	r4, #256	; 0x100
   266f4:	bne	266cc <__assert_fail@plt+0x14b28>
   266f8:	b	261d4 <__assert_fail@plt+0x14630>
   266fc:	add	lr, r6, #256	; 0x100
   26700:	mov	ip, #1
   26704:	ldrsh	r2, [r3, #2]!
   26708:	cmp	r2, #0
   2670c:	bge	26728 <__assert_fail@plt+0x14b84>
   26710:	ldrb	r2, [r6]
   26714:	asr	r0, r2, #5
   26718:	and	r2, r2, #31
   2671c:	ldr	r1, [r5, r0, lsl #2]
   26720:	orr	r2, r1, ip, lsl r2
   26724:	str	r2, [r5, r0, lsl #2]
   26728:	add	r6, r6, #1
   2672c:	cmp	lr, r6
   26730:	bne	26704 <__assert_fail@plt+0x14b60>
   26734:	b	261d4 <__assert_fail@plt+0x14630>
   26738:	movw	r1, #50732	; 0xc62c
   2673c:	movt	r1, #3
   26740:	mov	r0, r7
   26744:	bl	1170c <strcmp@plt>
   26748:	subs	r4, r0, #0
   2674c:	bne	267d4 <__assert_fail@plt+0x14c30>
   26750:	bl	11964 <__ctype_b_loc@plt>
   26754:	ldr	r3, [r0]
   26758:	cmp	r6, #0
   2675c:	moveq	r0, #1
   26760:	sub	r3, r3, #2
   26764:	bne	26798 <__assert_fail@plt+0x14bf4>
   26768:	ldrh	r2, [r3, #2]!
   2676c:	asr	r1, r4, #5
   26770:	and	ip, r4, #31
   26774:	add	r4, r4, #1
   26778:	tst	r2, #4
   2677c:	beq	2678c <__assert_fail@plt+0x14be8>
   26780:	ldr	r2, [r5, r1, lsl #2]
   26784:	orr	r2, r2, r0, lsl ip
   26788:	str	r2, [r5, r1, lsl #2]
   2678c:	cmp	r4, #256	; 0x100
   26790:	bne	26768 <__assert_fail@plt+0x14bc4>
   26794:	b	261d4 <__assert_fail@plt+0x14630>
   26798:	add	lr, r6, #256	; 0x100
   2679c:	mov	ip, #1
   267a0:	ldrh	r2, [r3, #2]!
   267a4:	tst	r2, #4
   267a8:	beq	267c4 <__assert_fail@plt+0x14c20>
   267ac:	ldrb	r2, [r6]
   267b0:	asr	r0, r2, #5
   267b4:	and	r2, r2, #31
   267b8:	ldr	r1, [r5, r0, lsl #2]
   267bc:	orr	r2, r1, ip, lsl r2
   267c0:	str	r2, [r5, r0, lsl #2]
   267c4:	add	r6, r6, #1
   267c8:	cmp	lr, r6
   267cc:	bne	267a0 <__assert_fail@plt+0x14bfc>
   267d0:	b	261d4 <__assert_fail@plt+0x14630>
   267d4:	mov	r0, r7
   267d8:	movw	r1, #50740	; 0xc634
   267dc:	movt	r1, #3
   267e0:	bl	1170c <strcmp@plt>
   267e4:	subs	r4, r0, #0
   267e8:	movne	r0, #4
   267ec:	bne	261d8 <__assert_fail@plt+0x14634>
   267f0:	bl	11964 <__ctype_b_loc@plt>
   267f4:	ldr	r3, [r0]
   267f8:	cmp	r6, #0
   267fc:	moveq	r0, #1
   26800:	sub	r3, r3, #2
   26804:	bne	26838 <__assert_fail@plt+0x14c94>
   26808:	ldrh	r2, [r3, #2]!
   2680c:	asr	r1, r4, #5
   26810:	and	ip, r4, #31
   26814:	add	r4, r4, #1
   26818:	tst	r2, #4096	; 0x1000
   2681c:	beq	2682c <__assert_fail@plt+0x14c88>
   26820:	ldr	r2, [r5, r1, lsl #2]
   26824:	orr	r2, r2, r0, lsl ip
   26828:	str	r2, [r5, r1, lsl #2]
   2682c:	cmp	r4, #256	; 0x100
   26830:	bne	26808 <__assert_fail@plt+0x14c64>
   26834:	b	261d4 <__assert_fail@plt+0x14630>
   26838:	mov	ip, #1
   2683c:	ldrh	r2, [r3, #2]!
   26840:	tst	r2, #4096	; 0x1000
   26844:	beq	26860 <__assert_fail@plt+0x14cbc>
   26848:	ldrb	r2, [r6, r4]
   2684c:	asr	r0, r2, #5
   26850:	and	r2, r2, #31
   26854:	ldr	r1, [r5, r0, lsl #2]
   26858:	orr	r2, r1, ip, lsl r2
   2685c:	str	r2, [r5, r0, lsl #2]
   26860:	add	r4, r4, #1
   26864:	cmp	r4, #256	; 0x100
   26868:	bne	2683c <__assert_fail@plt+0x14c98>
   2686c:	b	261d4 <__assert_fail@plt+0x14630>
   26870:	add	lr, r6, #256	; 0x100
   26874:	mov	ip, #1
   26878:	ldrh	r2, [r3, #2]!
   2687c:	tst	r2, #16384	; 0x4000
   26880:	beq	2689c <__assert_fail@plt+0x14cf8>
   26884:	ldrb	r2, [r6]
   26888:	asr	r0, r2, #5
   2688c:	and	r2, r2, #31
   26890:	ldr	r1, [r5, r0, lsl #2]
   26894:	orr	r2, r1, ip, lsl r2
   26898:	str	r2, [r5, r0, lsl #2]
   2689c:	add	r6, r6, #1
   268a0:	cmp	lr, r6
   268a4:	bne	26878 <__assert_fail@plt+0x14cd4>
   268a8:	b	261d4 <__assert_fail@plt+0x14630>
   268ac:	add	lr, r6, #256	; 0x100
   268b0:	mov	ip, #1
   268b4:	ldrh	r2, [r3, #2]!
   268b8:	tst	r2, #1
   268bc:	beq	268d8 <__assert_fail@plt+0x14d34>
   268c0:	ldrb	r2, [r6]
   268c4:	asr	r0, r2, #5
   268c8:	and	r2, r2, #31
   268cc:	ldr	r1, [r5, r0, lsl #2]
   268d0:	orr	r2, r1, ip, lsl r2
   268d4:	str	r2, [r5, r0, lsl #2]
   268d8:	add	r6, r6, #1
   268dc:	cmp	lr, r6
   268e0:	bne	268b4 <__assert_fail@plt+0x14d10>
   268e4:	b	261d4 <__assert_fail@plt+0x14630>
   268e8:	add	lr, r6, #256	; 0x100
   268ec:	mov	ip, #1
   268f0:	ldrh	r2, [r3, #2]!
   268f4:	tst	r2, #256	; 0x100
   268f8:	beq	26914 <__assert_fail@plt+0x14d70>
   268fc:	ldrb	r2, [r6]
   26900:	asr	r0, r2, #5
   26904:	and	r2, r2, #31
   26908:	ldr	r1, [r5, r0, lsl #2]
   2690c:	orr	r2, r1, ip, lsl r2
   26910:	str	r2, [r5, r0, lsl #2]
   26914:	add	r6, r6, #1
   26918:	cmp	lr, r6
   2691c:	bne	268f0 <__assert_fail@plt+0x14d4c>
   26920:	b	261d4 <__assert_fail@plt+0x14630>
   26924:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26928:	strd	r6, [sp, #8]
   2692c:	ldr	r6, [r0]
   26930:	strd	r8, [sp, #16]
   26934:	strd	sl, [sp, #24]
   26938:	str	lr, [sp, #32]
   2693c:	sub	sp, sp, #316	; 0x13c
   26940:	ldr	ip, [r6, #92]	; 0x5c
   26944:	cmp	ip, #1
   26948:	ldreq	ip, [r0, #12]
   2694c:	movne	ip, #0
   26950:	ubfxeq	ip, ip, #22, #1
   26954:	str	ip, [sp, #12]
   26958:	ldr	ip, [r1]
   2695c:	cmp	ip, #0
   26960:	ble	26a44 <__assert_fail@plt+0x14ea0>
   26964:	mov	r4, r3
   26968:	mov	r3, #255	; 0xff
   2696c:	movt	r3, #32
   26970:	mov	r5, #0
   26974:	str	r2, [sp, #4]
   26978:	str	r1, [sp, #20]
   2697c:	str	r0, [sp, #24]
   26980:	str	r3, [sp, #32]
   26984:	mov	r3, #1
   26988:	movt	r3, #32
   2698c:	str	r3, [sp, #36]	; 0x24
   26990:	b	269c4 <__assert_fail@plt+0x14e20>
   26994:	cmp	r7, #3
   26998:	beq	26be8 <__assert_fail@plt+0x15044>
   2699c:	cmp	r7, #6
   269a0:	beq	26a60 <__assert_fail@plt+0x14ebc>
   269a4:	and	r3, r7, #253	; 0xfd
   269a8:	cmp	r3, #5
   269ac:	beq	26da0 <__assert_fail@plt+0x151fc>
   269b0:	cmp	r7, #2
   269b4:	beq	26dbc <__assert_fail@plt+0x15218>
   269b8:	add	r5, r5, #1
   269bc:	cmp	r5, ip
   269c0:	bge	26a44 <__assert_fail@plt+0x14ea0>
   269c4:	ldr	r3, [sp, #4]
   269c8:	ldr	r1, [r6]
   269cc:	ldr	r3, [r3]
   269d0:	ldr	r8, [r3, r5, lsl #2]
   269d4:	lsl	r3, r8, #3
   269d8:	add	r2, r1, r3
   269dc:	ldrb	r7, [r2, #4]
   269e0:	cmp	r7, #1
   269e4:	bne	26994 <__assert_fail@plt+0x14df0>
   269e8:	ldr	r2, [sp, #12]
   269ec:	ldrb	r9, [r1, r8, lsl #3]
   269f0:	cmp	r2, #0
   269f4:	strb	r7, [r4, r9]
   269f8:	beq	26a14 <__assert_fail@plt+0x14e70>
   269fc:	str	r3, [sp, #8]
   26a00:	bl	11928 <__ctype_tolower_loc@plt>
   26a04:	ldr	r2, [r0]
   26a08:	ldr	r3, [sp, #8]
   26a0c:	ldr	r2, [r2, r9, lsl #2]
   26a10:	strb	r7, [r4, r2]
   26a14:	ldr	r2, [sp, #24]
   26a18:	ldr	r2, [r2, #12]
   26a1c:	tst	r2, #4194304	; 0x400000
   26a20:	beq	26a30 <__assert_fail@plt+0x14e8c>
   26a24:	ldr	r2, [r6, #92]	; 0x5c
   26a28:	cmp	r2, #1
   26a2c:	bgt	26cc0 <__assert_fail@plt+0x1511c>
   26a30:	ldr	r3, [sp, #20]
   26a34:	add	r5, r5, #1
   26a38:	ldr	ip, [r3]
   26a3c:	cmp	r5, ip
   26a40:	blt	269c4 <__assert_fail@plt+0x14e20>
   26a44:	add	sp, sp, #316	; 0x13c
   26a48:	ldrd	r4, [sp]
   26a4c:	ldrd	r6, [sp, #8]
   26a50:	ldrd	r8, [sp, #16]
   26a54:	ldrd	sl, [sp, #24]
   26a58:	add	sp, sp, #32
   26a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   26a60:	ldr	r1, [r6, #92]	; 0x5c
   26a64:	ldr	fp, [r2]
   26a68:	cmp	r1, #1
   26a6c:	ble	26a94 <__assert_fail@plt+0x14ef0>
   26a70:	ldr	r2, [fp, #36]	; 0x24
   26a74:	cmp	r2, #0
   26a78:	bne	26b74 <__assert_fail@plt+0x14fd0>
   26a7c:	ldrb	r2, [fp, #16]
   26a80:	tst	r2, #1
   26a84:	bne	26b74 <__assert_fail@plt+0x14fd0>
   26a88:	ldr	r2, [fp, #32]
   26a8c:	cmp	r2, #0
   26a90:	bne	26b74 <__assert_fail@plt+0x14fd0>
   26a94:	ldr	r2, [fp, #20]
   26a98:	cmp	r2, #0
   26a9c:	ble	269b8 <__assert_fail@plt+0x14e14>
   26aa0:	str	r5, [sp, #28]
   26aa4:	mov	r5, fp
   26aa8:	mov	r7, #0
   26aac:	ldr	fp, [sp, #24]
   26ab0:	add	r8, sp, #56	; 0x38
   26ab4:	add	r9, sp, #48	; 0x30
   26ab8:	mov	sl, #1
   26abc:	mov	r2, #0
   26ac0:	mov	r3, #0
   26ac4:	mov	r0, r8
   26ac8:	strd	r2, [r9]
   26acc:	lsl	r3, r7, #2
   26ad0:	mov	r2, r9
   26ad4:	ldr	r1, [r5]
   26ad8:	str	r3, [sp, #8]
   26adc:	ldr	r1, [r1, r7, lsl #2]
   26ae0:	add	r7, r7, #1
   26ae4:	bl	116dc <wcrtomb@plt>
   26ae8:	cmn	r0, #1
   26aec:	beq	26b1c <__assert_fail@plt+0x14f78>
   26af0:	ldr	r3, [sp, #12]
   26af4:	ldrb	r2, [sp, #56]	; 0x38
   26af8:	cmp	r3, #0
   26afc:	strb	sl, [r4, r2]
   26b00:	str	r2, [sp, #16]
   26b04:	beq	26b1c <__assert_fail@plt+0x14f78>
   26b08:	bl	11928 <__ctype_tolower_loc@plt>
   26b0c:	ldr	r1, [r0]
   26b10:	ldr	r2, [sp, #16]
   26b14:	ldr	r2, [r1, r2, lsl #2]
   26b18:	strb	sl, [r4, r2]
   26b1c:	ldr	r2, [fp, #12]
   26b20:	tst	r2, #4194304	; 0x400000
   26b24:	beq	26b60 <__assert_fail@plt+0x14fbc>
   26b28:	ldr	r2, [r6, #92]	; 0x5c
   26b2c:	cmp	r2, #1
   26b30:	ble	26b60 <__assert_fail@plt+0x14fbc>
   26b34:	ldr	r2, [r5]
   26b38:	ldr	r3, [sp, #8]
   26b3c:	ldr	r0, [r2, r3]
   26b40:	bl	117a8 <towlower@plt>
   26b44:	mov	r1, r0
   26b48:	mov	r2, r9
   26b4c:	mov	r0, r8
   26b50:	bl	116dc <wcrtomb@plt>
   26b54:	cmn	r0, #1
   26b58:	ldrbne	r2, [sp, #56]	; 0x38
   26b5c:	strbne	sl, [r4, r2]
   26b60:	ldr	r2, [r5, #20]
   26b64:	cmp	r7, r2
   26b68:	blt	26abc <__assert_fail@plt+0x14f18>
   26b6c:	ldr	r5, [sp, #28]
   26b70:	b	26a30 <__assert_fail@plt+0x14e8c>
   26b74:	mov	r3, #0
   26b78:	add	r8, sp, #56	; 0x38
   26b7c:	add	r9, sp, #48	; 0x30
   26b80:	mov	r7, #1
   26b84:	strb	r3, [sp, #48]	; 0x30
   26b88:	mov	r0, #0
   26b8c:	mov	r1, #0
   26b90:	mov	r3, r8
   26b94:	mov	r2, #1
   26b98:	strd	r0, [r8]
   26b9c:	mov	r1, r9
   26ba0:	bl	1ec1c <__assert_fail@plt+0xd078>
   26ba4:	cmn	r0, #2
   26ba8:	beq	26bc8 <__assert_fail@plt+0x15024>
   26bac:	ldrb	r3, [sp, #48]	; 0x30
   26bb0:	add	r3, r3, #1
   26bb4:	uxtb	r3, r3
   26bb8:	cmp	r3, #0
   26bbc:	strb	r3, [sp, #48]	; 0x30
   26bc0:	bne	26b88 <__assert_fail@plt+0x14fe4>
   26bc4:	b	26a30 <__assert_fail@plt+0x14e8c>
   26bc8:	ldrb	r2, [sp, #48]	; 0x30
   26bcc:	add	r3, r2, #1
   26bd0:	strb	r7, [r4, r2]
   26bd4:	uxtb	r3, r3
   26bd8:	cmp	r3, #0
   26bdc:	strb	r3, [sp, #48]	; 0x30
   26be0:	bne	26b88 <__assert_fail@plt+0x14fe4>
   26be4:	b	26a30 <__assert_fail@plt+0x14e8c>
   26be8:	mov	sl, #0
   26bec:	mov	fp, #32
   26bf0:	str	r3, [sp, #8]
   26bf4:	str	r6, [sp, #16]
   26bf8:	mov	r6, fp
   26bfc:	mov	fp, sl
   26c00:	str	r5, [sp, #28]
   26c04:	mov	r5, sl
   26c08:	mov	r9, #1
   26c0c:	ldr	sl, [sp, #12]
   26c10:	mov	r0, r1
   26c14:	cmp	sl, #0
   26c18:	lsl	r7, fp, #3
   26c1c:	ldr	r3, [sp, #8]
   26c20:	ldr	r0, [r0, r3]
   26c24:	ldr	r8, [r0, fp]
   26c28:	bne	26c6c <__assert_fail@plt+0x150c8>
   26c2c:	mov	r0, sl
   26c30:	sub	lr, r4, r5
   26c34:	lsr	r3, r8, r0
   26c38:	tst	r3, #1
   26c3c:	strbne	r9, [lr, r0]
   26c40:	add	r0, r0, #1
   26c44:	cmp	r0, #32
   26c48:	bne	26c34 <__assert_fail@plt+0x15090>
   26c4c:	add	fp, fp, #4
   26c50:	add	r6, r6, #32
   26c54:	cmp	fp, #32
   26c58:	sub	r5, r5, #32
   26c5c:	beq	26cb4 <__assert_fail@plt+0x15110>
   26c60:	ldr	r3, [sp, #16]
   26c64:	ldr	r0, [r3]
   26c68:	b	26c14 <__assert_fail@plt+0x15070>
   26c6c:	add	r3, r5, r7
   26c70:	add	r2, r7, #128	; 0x80
   26c74:	lsr	r3, r8, r3
   26c78:	add	r1, r4, r7
   26c7c:	tst	r3, #1
   26c80:	beq	26ca4 <__assert_fail@plt+0x15100>
   26c84:	cmp	r2, #384	; 0x180
   26c88:	strb	r9, [r4, r7]
   26c8c:	bcs	26ca0 <__assert_fail@plt+0x150fc>
   26c90:	bl	11928 <__ctype_tolower_loc@plt>
   26c94:	ldr	r3, [r0]
   26c98:	ldr	r1, [r3, r7, lsl #2]
   26c9c:	add	r1, r4, r1
   26ca0:	strb	r9, [r1]
   26ca4:	add	r7, r7, #1
   26ca8:	cmp	r7, r6
   26cac:	bne	26c6c <__assert_fail@plt+0x150c8>
   26cb0:	b	26c4c <__assert_fail@plt+0x150a8>
   26cb4:	ldr	r6, [sp, #16]
   26cb8:	ldr	r5, [sp, #28]
   26cbc:	b	26a30 <__assert_fail@plt+0x14e8c>
   26cc0:	ldr	r1, [r6]
   26cc4:	add	r2, r8, #1
   26cc8:	ldrb	r0, [r1, r8, lsl #3]
   26ccc:	strb	r0, [sp, #56]	; 0x38
   26cd0:	ldr	r0, [r6, #8]
   26cd4:	cmp	r2, r0
   26cd8:	bcs	26de0 <__assert_fail@plt+0x1523c>
   26cdc:	add	r3, r3, #8
   26ce0:	ldr	r0, [sp, #32]
   26ce4:	add	r3, r1, r3
   26ce8:	ldr	r1, [r3, #4]
   26cec:	and	r1, r1, r0
   26cf0:	ldr	r0, [sp, #36]	; 0x24
   26cf4:	cmp	r1, r0
   26cf8:	bne	26de0 <__assert_fail@plt+0x1523c>
   26cfc:	mov	ip, r0
   26d00:	add	r7, sp, #57	; 0x39
   26d04:	ldr	r0, [sp, #32]
   26d08:	b	26d24 <__assert_fail@plt+0x15180>
   26d0c:	ldr	r3, [r6]
   26d10:	add	r3, r3, r2, lsl #3
   26d14:	ldr	r1, [r3, #4]
   26d18:	and	r1, r1, r0
   26d1c:	cmp	r1, ip
   26d20:	bne	26d3c <__assert_fail@plt+0x15198>
   26d24:	ldrb	r3, [r3]
   26d28:	add	r2, r2, #1
   26d2c:	strb	r3, [r7], #1
   26d30:	ldr	r3, [r6, #8]
   26d34:	cmp	r3, r2
   26d38:	bhi	26d0c <__assert_fail@plt+0x15168>
   26d3c:	add	r8, sp, #56	; 0x38
   26d40:	sub	r7, r7, r8
   26d44:	add	r9, sp, #48	; 0x30
   26d48:	mov	sl, #0
   26d4c:	mov	fp, #0
   26d50:	mov	r2, r7
   26d54:	mov	r3, r9
   26d58:	mov	r1, r8
   26d5c:	add	r0, sp, #44	; 0x2c
   26d60:	strd	sl, [sp, #48]	; 0x30
   26d64:	bl	1ec1c <__assert_fail@plt+0xd078>
   26d68:	cmp	r0, r7
   26d6c:	bne	26a30 <__assert_fail@plt+0x14e8c>
   26d70:	ldr	r0, [sp, #44]	; 0x2c
   26d74:	bl	117a8 <towlower@plt>
   26d78:	mov	r1, r0
   26d7c:	mov	r2, r9
   26d80:	mov	r0, r8
   26d84:	bl	116dc <wcrtomb@plt>
   26d88:	cmn	r0, #1
   26d8c:	beq	26a30 <__assert_fail@plt+0x14e8c>
   26d90:	ldrb	r3, [sp, #56]	; 0x38
   26d94:	mov	r2, #1
   26d98:	strb	r2, [r4, r3]
   26d9c:	b	26a30 <__assert_fail@plt+0x14e8c>
   26da0:	mov	r0, r4
   26da4:	mov	r2, #256	; 0x100
   26da8:	mov	r1, #1
   26dac:	bl	119e8 <memset@plt>
   26db0:	cmp	r7, #2
   26db4:	bne	26a44 <__assert_fail@plt+0x14ea0>
   26db8:	b	26dcc <__assert_fail@plt+0x15228>
   26dbc:	mov	r0, r4
   26dc0:	mov	r2, #256	; 0x100
   26dc4:	mov	r1, #1
   26dc8:	bl	119e8 <memset@plt>
   26dcc:	ldr	r2, [sp, #24]
   26dd0:	ldrb	r3, [r2, #28]
   26dd4:	orr	r3, r3, #1
   26dd8:	strb	r3, [r2, #28]
   26ddc:	b	26a44 <__assert_fail@plt+0x14ea0>
   26de0:	add	r8, sp, #56	; 0x38
   26de4:	b	26d44 <__assert_fail@plt+0x151a0>
   26de8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   26dec:	ldr	r3, [r1, #56]	; 0x38
   26df0:	strd	r6, [sp, #8]
   26df4:	mov	r6, r0
   26df8:	ldr	r7, [r1, #40]	; 0x28
   26dfc:	strd	r8, [sp, #16]
   26e00:	str	sl, [sp, #24]
   26e04:	str	lr, [sp, #28]
   26e08:	sub	sp, sp, #8
   26e0c:	cmp	r3, r7
   26e10:	movle	r3, #2
   26e14:	movle	r0, #0
   26e18:	strble	r3, [r6, #4]
   26e1c:	ble	270e4 <__assert_fail@plt+0x15540>
   26e20:	ldr	sl, [r1, #4]
   26e24:	mov	r8, r2
   26e28:	mov	r5, r1
   26e2c:	ldrb	r3, [r6, #6]
   26e30:	ldr	r2, [r1, #80]	; 0x50
   26e34:	ldrb	r4, [sl, r7]
   26e38:	bic	r3, r3, #96	; 0x60
   26e3c:	cmp	r2, #1
   26e40:	strb	r4, [r6]
   26e44:	strb	r3, [r6, #6]
   26e48:	ble	27100 <__assert_fail@plt+0x1555c>
   26e4c:	ldr	r3, [r1, #28]
   26e50:	cmp	r7, r3
   26e54:	beq	26e68 <__assert_fail@plt+0x152c4>
   26e58:	ldr	r3, [r1, #8]
   26e5c:	ldr	r3, [r3, r7, lsl #2]
   26e60:	cmn	r3, #1
   26e64:	beq	27348 <__assert_fail@plt+0x157a4>
   26e68:	cmp	r4, #92	; 0x5c
   26e6c:	beq	2713c <__assert_fail@plt+0x15598>
   26e70:	ldr	r3, [r5, #8]
   26e74:	mov	r2, #1
   26e78:	strb	r2, [r6, #4]
   26e7c:	ldr	r9, [r3, r7, lsl #2]
   26e80:	mov	r0, r9
   26e84:	sub	r9, r9, #95	; 0x5f
   26e88:	bl	119c4 <iswalnum@plt>
   26e8c:	ldrb	r3, [r6, #6]
   26e90:	clz	r9, r9
   26e94:	cmp	r0, #0
   26e98:	lsr	r9, r9, #5
   26e9c:	movne	r9, #1
   26ea0:	bfi	r3, r9, #6, #1
   26ea4:	strb	r3, [r6, #6]
   26ea8:	sub	r4, r4, #10
   26eac:	cmp	r4, #115	; 0x73
   26eb0:	ldrls	pc, [pc, r4, lsl #2]
   26eb4:	b	27340 <__assert_fail@plt+0x1579c>
   26eb8:	andeq	r7, r2, r0, lsr #9
   26ebc:	andeq	r7, r2, r0, asr #6
   26ec0:	andeq	r7, r2, r0, asr #6
   26ec4:	andeq	r7, r2, r0, asr #6
   26ec8:	andeq	r7, r2, r0, asr #6
   26ecc:	andeq	r7, r2, r0, asr #6
   26ed0:	andeq	r7, r2, r0, asr #6
   26ed4:	andeq	r7, r2, r0, asr #6
   26ed8:	andeq	r7, r2, r0, asr #6
   26edc:	andeq	r7, r2, r0, asr #6
   26ee0:	andeq	r7, r2, r0, asr #6
   26ee4:	andeq	r7, r2, r0, asr #6
   26ee8:	andeq	r7, r2, r0, asr #6
   26eec:	andeq	r7, r2, r0, asr #6
   26ef0:	andeq	r7, r2, r0, asr #6
   26ef4:	andeq	r7, r2, r0, asr #6
   26ef8:	andeq	r7, r2, r0, asr #6
   26efc:	andeq	r7, r2, r0, asr #6
   26f00:	andeq	r7, r2, r0, asr #6
   26f04:	andeq	r7, r2, r0, asr #6
   26f08:	andeq	r7, r2, r0, asr #6
   26f0c:	andeq	r7, r2, r0, asr #6
   26f10:	andeq	r7, r2, r0, asr #6
   26f14:	andeq	r7, r2, r0, asr #6
   26f18:	andeq	r7, r2, r0, asr #6
   26f1c:	andeq	r7, r2, r0, asr #6
   26f20:	andeq	r7, r2, r8, lsl #1
   26f24:	andeq	r7, r2, r0, asr #6
   26f28:	andeq	r7, r2, r0, asr #6
   26f2c:	andeq	r7, r2, r0, asr #6
   26f30:	andeq	r7, r2, ip, lsl r4
   26f34:	andeq	r7, r2, r4, lsr r4
   26f38:	andeq	r7, r2, ip, lsl #8
   26f3c:	andeq	r7, r2, ip, asr #8
   26f40:	andeq	r7, r2, r0, asr #6
   26f44:	andeq	r7, r2, r0, asr #6
   26f48:	muleq	r2, r4, r3
   26f4c:	andeq	r7, r2, r0, asr #6
   26f50:	andeq	r7, r2, r0, asr #6
   26f54:	andeq	r7, r2, r0, asr #6
   26f58:	andeq	r7, r2, r0, asr #6
   26f5c:	andeq	r7, r2, r0, asr #6
   26f60:	andeq	r7, r2, r0, asr #6
   26f64:	andeq	r7, r2, r0, asr #6
   26f68:	andeq	r7, r2, r0, asr #6
   26f6c:	andeq	r7, r2, r0, asr #6
   26f70:	andeq	r7, r2, r0, asr #6
   26f74:	andeq	r7, r2, r0, asr #6
   26f78:	andeq	r7, r2, r0, asr #6
   26f7c:	andeq	r7, r2, r0, asr #6
   26f80:	andeq	r7, r2, r0, asr #6
   26f84:	andeq	r7, r2, r0, asr #6
   26f88:	andeq	r7, r2, r0, asr #6
   26f8c:	andeq	r7, r2, r4, lsr #7
   26f90:	andeq	r7, r2, r0, asr #6
   26f94:	andeq	r7, r2, r0, asr #6
   26f98:	andeq	r7, r2, r0, asr #6
   26f9c:	andeq	r7, r2, r0, asr #6
   26fa0:	andeq	r7, r2, r0, asr #6
   26fa4:	andeq	r7, r2, r0, asr #6
   26fa8:	andeq	r7, r2, r0, asr #6
   26fac:	andeq	r7, r2, r0, asr #6
   26fb0:	andeq	r7, r2, r0, asr #6
   26fb4:	andeq	r7, r2, r0, asr #6
   26fb8:	andeq	r7, r2, r0, asr #6
   26fbc:	andeq	r7, r2, r0, asr #6
   26fc0:	andeq	r7, r2, r0, asr #6
   26fc4:	andeq	r7, r2, r0, asr #6
   26fc8:	andeq	r7, r2, r0, asr #6
   26fcc:	andeq	r7, r2, r0, asr #6
   26fd0:	andeq	r7, r2, r0, asr #6
   26fd4:	andeq	r7, r2, r0, asr #6
   26fd8:	andeq	r7, r2, r0, asr #6
   26fdc:	andeq	r7, r2, r0, asr #6
   26fe0:	andeq	r7, r2, r0, asr #6
   26fe4:	andeq	r7, r2, r0, asr #6
   26fe8:	andeq	r7, r2, r0, asr #6
   26fec:	andeq	r7, r2, r0, asr #6
   26ff0:	andeq	r7, r2, r0, asr #6
   26ff4:	andeq	r7, r2, r0, asr #6
   26ff8:	andeq	r7, r2, r0, asr #6
   26ffc:	andeq	r7, r2, r0, asr #7
   27000:	andeq	r7, r2, r0, asr #6
   27004:	andeq	r7, r2, r0, asr #6
   27008:	ldrdeq	r7, [r2], -r0
   2700c:	andeq	r7, r2, r0, asr #6
   27010:	andeq	r7, r2, r0, asr #6
   27014:	andeq	r7, r2, r0, asr #6
   27018:	andeq	r7, r2, r0, asr #6
   2701c:	andeq	r7, r2, r0, asr #6
   27020:	andeq	r7, r2, r0, asr #6
   27024:	andeq	r7, r2, r0, asr #6
   27028:	andeq	r7, r2, r0, asr #6
   2702c:	andeq	r7, r2, r0, asr #6
   27030:	andeq	r7, r2, r0, asr #6
   27034:	andeq	r7, r2, r0, asr #6
   27038:	andeq	r7, r2, r0, asr #6
   2703c:	andeq	r7, r2, r0, asr #6
   27040:	andeq	r7, r2, r0, asr #6
   27044:	andeq	r7, r2, r0, asr #6
   27048:	andeq	r7, r2, r0, asr #6
   2704c:	andeq	r7, r2, r0, asr #6
   27050:	andeq	r7, r2, r0, asr #6
   27054:	andeq	r7, r2, r0, asr #6
   27058:	andeq	r7, r2, r0, asr #6
   2705c:	andeq	r7, r2, r0, asr #6
   27060:	andeq	r7, r2, r0, asr #6
   27064:	andeq	r7, r2, r0, asr #6
   27068:	andeq	r7, r2, r0, asr #6
   2706c:	andeq	r7, r2, r0, asr #6
   27070:	andeq	r7, r2, r0, asr #6
   27074:	andeq	r7, r2, r0, asr #6
   27078:	andeq	r7, r2, r0, asr #6
   2707c:	andeq	r7, r2, r8, ror #8
   27080:	andeq	r7, r2, r4, lsl #9
   27084:	andeq	r7, r2, ip, lsr #9
   27088:	tst	r8, #8
   2708c:	bne	270d0 <__assert_fail@plt+0x1552c>
   27090:	ldr	r3, [r5, #48]	; 0x30
   27094:	add	r7, r7, #1
   27098:	cmp	r7, r3
   2709c:	beq	270d0 <__assert_fail@plt+0x1552c>
   270a0:	mov	r2, r8
   270a4:	mov	r1, r5
   270a8:	str	r7, [r5, #40]	; 0x28
   270ac:	mov	r0, sp
   270b0:	bl	26de8 <__assert_fail@plt+0x15244>
   270b4:	ldrb	r2, [sp, #4]
   270b8:	ldr	r3, [r5, #40]	; 0x28
   270bc:	sub	r2, r2, #9
   270c0:	cmp	r2, #1
   270c4:	sub	r3, r3, #1
   270c8:	str	r3, [r5, #40]	; 0x28
   270cc:	bhi	27340 <__assert_fail@plt+0x1579c>
   270d0:	mov	r3, #12
   270d4:	mov	r2, #32
   270d8:	mov	r0, #1
   270dc:	str	r2, [r6]
   270e0:	strb	r3, [r6, #4]
   270e4:	add	sp, sp, #8
   270e8:	ldrd	r4, [sp]
   270ec:	ldrd	r6, [sp, #8]
   270f0:	ldrd	r8, [sp, #16]
   270f4:	ldr	sl, [sp, #24]
   270f8:	add	sp, sp, #28
   270fc:	pop	{pc}		; (ldr pc, [sp], #4)
   27100:	cmp	r4, #92	; 0x5c
   27104:	beq	2713c <__assert_fail@plt+0x15598>
   27108:	mov	r3, #1
   2710c:	strb	r3, [r6, #4]
   27110:	bl	11964 <__ctype_b_loc@plt>
   27114:	ldr	r1, [r0]
   27118:	lsl	r3, r4, #1
   2711c:	ldrb	r2, [r6, #6]
   27120:	ldrh	r3, [r1, r3]
   27124:	ubfx	r3, r3, #3, #1
   27128:	cmp	r4, #95	; 0x5f
   2712c:	orreq	r3, r3, #1
   27130:	bfi	r2, r3, #6, #1
   27134:	strb	r2, [r6, #6]
   27138:	b	26ea8 <__assert_fail@plt+0x15304>
   2713c:	ldr	r1, [r5, #48]	; 0x30
   27140:	add	r3, r7, #1
   27144:	cmp	r3, r1
   27148:	blt	2715c <__assert_fail@plt+0x155b8>
   2714c:	mov	r3, #36	; 0x24
   27150:	mov	r0, #1
   27154:	strb	r3, [r6, #4]
   27158:	b	270e4 <__assert_fail@plt+0x15540>
   2715c:	ldrb	r1, [r5, #75]	; 0x4b
   27160:	cmp	r1, #0
   27164:	bne	276cc <__assert_fail@plt+0x15b28>
   27168:	ldrb	r7, [sl, r3]
   2716c:	mov	r1, #1
   27170:	strb	r7, [r6]
   27174:	cmp	r2, r1
   27178:	strb	r1, [r6, #4]
   2717c:	ble	27368 <__assert_fail@plt+0x157c4>
   27180:	ldr	r1, [r5, #8]
   27184:	add	r1, r1, r3, lsl #2
   27188:	ldr	r4, [r1]
   2718c:	mov	r0, r4
   27190:	sub	r4, r4, #95	; 0x5f
   27194:	bl	119c4 <iswalnum@plt>
   27198:	ldrb	r3, [r6, #6]
   2719c:	clz	r4, r4
   271a0:	cmp	r0, #0
   271a4:	lsr	r4, r4, #5
   271a8:	movne	r4, #1
   271ac:	bfi	r3, r4, #6, #1
   271b0:	strb	r3, [r6, #6]
   271b4:	sub	r3, r7, #39	; 0x27
   271b8:	cmp	r3, #86	; 0x56
   271bc:	ldrls	pc, [pc, r3, lsl #2]
   271c0:	b	274e0 <__assert_fail@plt+0x1593c>
   271c4:	muleq	r2, r4, r6
   271c8:			; <UNDEFINED> instruction: 0x000276b4
   271cc:	andeq	r7, r2, ip, ror r6
   271d0:	andeq	r7, r2, r0, ror #9
   271d4:	andeq	r7, r2, ip, asr r6
   271d8:	andeq	r7, r2, r0, ror #9
   271dc:	andeq	r7, r2, r0, ror #9
   271e0:	andeq	r7, r2, r0, ror #9
   271e4:	andeq	r7, r2, r0, ror #9
   271e8:	andeq	r7, r2, r0, ror #9
   271ec:	andeq	r7, r2, ip, lsr r6
   271f0:	andeq	r7, r2, ip, lsr r6
   271f4:	andeq	r7, r2, ip, lsr r6
   271f8:	andeq	r7, r2, ip, lsr r6
   271fc:	andeq	r7, r2, ip, lsr r6
   27200:	andeq	r7, r2, ip, lsr r6
   27204:	andeq	r7, r2, ip, lsr r6
   27208:	andeq	r7, r2, ip, lsr r6
   2720c:	andeq	r7, r2, ip, lsr r6
   27210:	andeq	r7, r2, r0, ror #9
   27214:	andeq	r7, r2, r0, ror #9
   27218:	andeq	r7, r2, ip, lsl r6
   2721c:	andeq	r7, r2, r0, ror #9
   27220:	strdeq	r7, [r2], -ip
   27224:	ldrdeq	r7, [r2], -ip
   27228:	andeq	r7, r2, r0, ror #9
   2722c:	andeq	r7, r2, r0, ror #9
   27230:			; <UNDEFINED> instruction: 0x000275bc
   27234:	andeq	r7, r2, r0, ror #9
   27238:	andeq	r7, r2, r0, ror #9
   2723c:	andeq	r7, r2, r0, ror #9
   27240:	andeq	r7, r2, r0, ror #9
   27244:	andeq	r7, r2, r0, ror #9
   27248:	andeq	r7, r2, r0, ror #9
   2724c:	andeq	r7, r2, r0, ror #9
   27250:	andeq	r7, r2, r0, ror #9
   27254:	andeq	r7, r2, r0, ror #9
   27258:	andeq	r7, r2, r0, ror #9
   2725c:	andeq	r7, r2, r0, ror #9
   27260:	andeq	r7, r2, r0, ror #9
   27264:	andeq	r7, r2, r0, ror #9
   27268:	andeq	r7, r2, r0, ror #9
   2726c:	andeq	r7, r2, r0, ror #9
   27270:	andeq	r7, r2, r0, ror #9
   27274:	andeq	r7, r2, r4, lsr #11
   27278:	andeq	r7, r2, r0, ror #9
   2727c:	andeq	r7, r2, r0, ror #9
   27280:	andeq	r7, r2, r0, ror #9
   27284:	andeq	r7, r2, ip, lsl #11
   27288:	andeq	r7, r2, r0, ror #9
   2728c:	andeq	r7, r2, r0, ror #9
   27290:	andeq	r7, r2, r0, ror #9
   27294:	andeq	r7, r2, r0, ror #9
   27298:	andeq	r7, r2, r0, ror #9
   2729c:	andeq	r7, r2, r0, ror #9
   272a0:	andeq	r7, r2, r0, ror #9
   272a4:	andeq	r7, r2, r0, ror #9
   272a8:	andeq	r7, r2, ip, ror #10
   272ac:	andeq	r7, r2, r0, ror #9
   272b0:	andeq	r7, r2, ip, asr #10
   272b4:	andeq	r7, r2, r0, ror #9
   272b8:	andeq	r7, r2, r0, ror #9
   272bc:	andeq	r7, r2, r0, ror #9
   272c0:	andeq	r7, r2, r0, ror #9
   272c4:	andeq	r7, r2, r0, ror #9
   272c8:	andeq	r7, r2, r0, ror #9
   272cc:	andeq	r7, r2, r0, ror #9
   272d0:	andeq	r7, r2, r0, ror #9
   272d4:	andeq	r7, r2, r0, ror #9
   272d8:	andeq	r7, r2, r0, ror #9
   272dc:	andeq	r7, r2, r0, ror #9
   272e0:	andeq	r7, r2, r0, ror #9
   272e4:	andeq	r7, r2, r0, ror #9
   272e8:	andeq	r7, r2, r0, ror #9
   272ec:	andeq	r7, r2, r0, ror #9
   272f0:	andeq	r7, r2, r0, ror #9
   272f4:	andeq	r7, r2, r4, lsr r5
   272f8:	andeq	r7, r2, r0, ror #9
   272fc:	andeq	r7, r2, r0, ror #9
   27300:	andeq	r7, r2, r0, ror #9
   27304:	andeq	r7, r2, ip, lsl r5
   27308:	andeq	r7, r2, r0, ror #9
   2730c:	andeq	r7, r2, r0, ror #9
   27310:	andeq	r7, r2, r0, ror #9
   27314:	andeq	r7, r2, r0, lsl #10
   27318:	andeq	r7, r2, r8, ror #9
   2731c:	andeq	r7, r2, r8, asr #9
   27320:	add	r7, sl, r7
   27324:	eor	r3, r8, #2048	; 0x800
   27328:	ldrb	r2, [r7, #-1]
   2732c:	ubfx	r3, r3, #11, #1
   27330:	cmp	r2, #10
   27334:	orrne	r3, r3, #1
   27338:	cmp	r3, #0
   2733c:	beq	273f4 <__assert_fail@plt+0x15850>
   27340:	mov	r0, #1
   27344:	b	270e4 <__assert_fail@plt+0x15540>
   27348:	ldr	r3, [r6, #4]
   2734c:	mov	r0, #1
   27350:	bic	r3, r3, #2097152	; 0x200000
   27354:	bic	r3, r3, #255	; 0xff
   27358:	orr	r3, r3, #2097152	; 0x200000
   2735c:	orr	r3, r3, r0
   27360:	str	r3, [r6, #4]
   27364:	b	270e4 <__assert_fail@plt+0x15540>
   27368:	bl	11964 <__ctype_b_loc@plt>
   2736c:	ldr	r1, [r0]
   27370:	lsl	r3, r7, #1
   27374:	ldrb	r2, [r6, #6]
   27378:	ldrh	r3, [r1, r3]
   2737c:	ubfx	r3, r3, #3, #1
   27380:	cmp	r7, #95	; 0x5f
   27384:	orreq	r3, r3, #1
   27388:	bfi	r2, r3, #6, #1
   2738c:	strb	r2, [r6, #6]
   27390:	b	271b4 <__assert_fail@plt+0x15610>
   27394:	mov	r3, #5
   27398:	mov	r0, #1
   2739c:	strb	r3, [r6, #4]
   273a0:	b	270e4 <__assert_fail@plt+0x15540>
   273a4:	movw	r3, #1026	; 0x402
   273a8:	tst	r8, r3
   273ac:	bne	27340 <__assert_fail@plt+0x1579c>
   273b0:	mov	r3, #19
   273b4:	mov	r0, #1
   273b8:	strb	r3, [r6, #4]
   273bc:	b	270e4 <__assert_fail@plt+0x15540>
   273c0:	mov	r3, #20
   273c4:	mov	r0, #1
   273c8:	strb	r3, [r6, #4]
   273cc:	b	270e4 <__assert_fail@plt+0x15540>
   273d0:	mov	r3, #8
   273d4:	movt	r3, #128	; 0x80
   273d8:	tst	r8, r3
   273dc:	moveq	r3, #1
   273e0:	movne	r3, #0
   273e4:	cmp	r7, #0
   273e8:	moveq	r3, #0
   273ec:	cmp	r3, #0
   273f0:	bne	27320 <__assert_fail@plt+0x1577c>
   273f4:	mov	r3, #12
   273f8:	mov	r2, #16
   273fc:	mov	r0, #1
   27400:	str	r2, [r6]
   27404:	strb	r3, [r6, #4]
   27408:	b	270e4 <__assert_fail@plt+0x15540>
   2740c:	mov	r3, #11
   27410:	mov	r0, #1
   27414:	strb	r3, [r6, #4]
   27418:	b	270e4 <__assert_fail@plt+0x15540>
   2741c:	tst	r8, #8192	; 0x2000
   27420:	beq	27340 <__assert_fail@plt+0x1579c>
   27424:	mov	r3, #8
   27428:	mov	r0, #1
   2742c:	strb	r3, [r6, #4]
   27430:	b	270e4 <__assert_fail@plt+0x15540>
   27434:	tst	r8, #8192	; 0x2000
   27438:	beq	27340 <__assert_fail@plt+0x1579c>
   2743c:	mov	r3, #9
   27440:	mov	r0, #1
   27444:	strb	r3, [r6, #4]
   27448:	b	270e4 <__assert_fail@plt+0x15540>
   2744c:	movw	r3, #1026	; 0x402
   27450:	tst	r8, r3
   27454:	bne	27340 <__assert_fail@plt+0x1579c>
   27458:	mov	r3, #18
   2745c:	mov	r0, #1
   27460:	strb	r3, [r6, #4]
   27464:	b	270e4 <__assert_fail@plt+0x15540>
   27468:	and	r2, r8, #4608	; 0x1200
   2746c:	cmp	r2, #4608	; 0x1200
   27470:	moveq	r3, #23
   27474:	moveq	r0, #1
   27478:	strbeq	r3, [r6, #4]
   2747c:	bne	27340 <__assert_fail@plt+0x1579c>
   27480:	b	270e4 <__assert_fail@plt+0x15540>
   27484:	and	r2, r8, #33792	; 0x8400
   27488:	cmp	r2, #32768	; 0x8000
   2748c:	bne	27340 <__assert_fail@plt+0x1579c>
   27490:	mov	r3, #10
   27494:	mov	r0, #1
   27498:	strb	r3, [r6, #4]
   2749c:	b	270e4 <__assert_fail@plt+0x15540>
   274a0:	tst	r8, #2048	; 0x800
   274a4:	beq	27340 <__assert_fail@plt+0x1579c>
   274a8:	b	27490 <__assert_fail@plt+0x158ec>
   274ac:	and	r2, r8, #4608	; 0x1200
   274b0:	cmp	r2, #4608	; 0x1200
   274b4:	moveq	r3, #24
   274b8:	moveq	r0, #1
   274bc:	strbeq	r3, [r6, #4]
   274c0:	bne	27340 <__assert_fail@plt+0x1579c>
   274c4:	b	270e4 <__assert_fail@plt+0x15540>
   274c8:	and	r2, r8, #4608	; 0x1200
   274cc:	cmp	r2, #512	; 0x200
   274d0:	moveq	r3, #24
   274d4:	moveq	r0, #2
   274d8:	strbeq	r3, [r6, #4]
   274dc:	beq	270e4 <__assert_fail@plt+0x15540>
   274e0:	mov	r0, #2
   274e4:	b	270e4 <__assert_fail@plt+0x15540>
   274e8:	tst	r8, #33792	; 0x8400
   274ec:	bne	274e0 <__assert_fail@plt+0x1593c>
   274f0:	mov	r3, #10
   274f4:	mov	r0, #2
   274f8:	strb	r3, [r6, #4]
   274fc:	b	270e4 <__assert_fail@plt+0x15540>
   27500:	and	r2, r8, #4608	; 0x1200
   27504:	cmp	r2, #512	; 0x200
   27508:	moveq	r3, #23
   2750c:	moveq	r0, #2
   27510:	strbeq	r3, [r6, #4]
   27514:	bne	274e0 <__assert_fail@plt+0x1593c>
   27518:	b	270e4 <__assert_fail@plt+0x15540>
   2751c:	tst	r8, #524288	; 0x80000
   27520:	bne	274e0 <__assert_fail@plt+0x1593c>
   27524:	mov	r3, #32
   27528:	mov	r0, #2
   2752c:	strb	r3, [r6, #4]
   27530:	b	270e4 <__assert_fail@plt+0x15540>
   27534:	tst	r8, #524288	; 0x80000
   27538:	bne	274e0 <__assert_fail@plt+0x1593c>
   2753c:	mov	r3, #34	; 0x22
   27540:	mov	r0, #2
   27544:	strb	r3, [r6, #4]
   27548:	b	270e4 <__assert_fail@plt+0x15540>
   2754c:	tst	r8, #524288	; 0x80000
   27550:	bne	274e0 <__assert_fail@plt+0x1593c>
   27554:	mov	r3, #12
   27558:	mov	r2, #256	; 0x100
   2755c:	mov	r0, #2
   27560:	str	r2, [r6]
   27564:	strb	r3, [r6, #4]
   27568:	b	270e4 <__assert_fail@plt+0x15540>
   2756c:	tst	r8, #524288	; 0x80000
   27570:	bne	274e0 <__assert_fail@plt+0x1593c>
   27574:	mov	r3, #12
   27578:	mov	r2, #64	; 0x40
   2757c:	mov	r0, #2
   27580:	str	r2, [r6]
   27584:	strb	r3, [r6, #4]
   27588:	b	270e4 <__assert_fail@plt+0x15540>
   2758c:	tst	r8, #524288	; 0x80000
   27590:	bne	274e0 <__assert_fail@plt+0x1593c>
   27594:	mov	r3, #33	; 0x21
   27598:	mov	r0, #2
   2759c:	strb	r3, [r6, #4]
   275a0:	b	270e4 <__assert_fail@plt+0x15540>
   275a4:	tst	r8, #524288	; 0x80000
   275a8:	bne	274e0 <__assert_fail@plt+0x1593c>
   275ac:	mov	r3, #35	; 0x23
   275b0:	mov	r0, #2
   275b4:	strb	r3, [r6, #4]
   275b8:	b	270e4 <__assert_fail@plt+0x15540>
   275bc:	tst	r8, #524288	; 0x80000
   275c0:	bne	274e0 <__assert_fail@plt+0x1593c>
   275c4:	mov	r3, #12
   275c8:	mov	r2, #512	; 0x200
   275cc:	mov	r0, #2
   275d0:	str	r2, [r6]
   275d4:	strb	r3, [r6, #4]
   275d8:	b	270e4 <__assert_fail@plt+0x15540>
   275dc:	movw	r2, #1026	; 0x402
   275e0:	and	r2, r2, r8
   275e4:	cmp	r2, #2
   275e8:	moveq	r3, #19
   275ec:	moveq	r0, r2
   275f0:	strbeq	r3, [r6, #4]
   275f4:	bne	274e0 <__assert_fail@plt+0x1593c>
   275f8:	b	270e4 <__assert_fail@plt+0x15540>
   275fc:	tst	r8, #524288	; 0x80000
   27600:	bne	274e0 <__assert_fail@plt+0x1593c>
   27604:	mov	r3, #12
   27608:	mov	r2, #9
   2760c:	mov	r0, #2
   27610:	str	r2, [r6]
   27614:	strb	r3, [r6, #4]
   27618:	b	270e4 <__assert_fail@plt+0x15540>
   2761c:	tst	r8, #524288	; 0x80000
   27620:	bne	274e0 <__assert_fail@plt+0x1593c>
   27624:	mov	r3, #12
   27628:	mov	r2, #6
   2762c:	mov	r0, #2
   27630:	str	r2, [r6]
   27634:	strb	r3, [r6, #4]
   27638:	b	270e4 <__assert_fail@plt+0x15540>
   2763c:	tst	r8, #16384	; 0x4000
   27640:	bne	274e0 <__assert_fail@plt+0x1593c>
   27644:	sub	r7, r7, #49	; 0x31
   27648:	mov	r3, #4
   2764c:	mov	r0, #2
   27650:	str	r7, [r6]
   27654:	strb	r3, [r6, #4]
   27658:	b	270e4 <__assert_fail@plt+0x15540>
   2765c:	movw	r2, #1026	; 0x402
   27660:	and	r2, r2, r8
   27664:	cmp	r2, #2
   27668:	moveq	r3, #18
   2766c:	moveq	r0, r2
   27670:	strbeq	r3, [r6, #4]
   27674:	bne	274e0 <__assert_fail@plt+0x1593c>
   27678:	b	270e4 <__assert_fail@plt+0x15540>
   2767c:	tst	r8, #8192	; 0x2000
   27680:	bne	274e0 <__assert_fail@plt+0x1593c>
   27684:	mov	r3, #9
   27688:	mov	r0, #2
   2768c:	strb	r3, [r6, #4]
   27690:	b	270e4 <__assert_fail@plt+0x15540>
   27694:	tst	r8, #524288	; 0x80000
   27698:	bne	274e0 <__assert_fail@plt+0x1593c>
   2769c:	mov	r3, #12
   276a0:	mov	r2, #128	; 0x80
   276a4:	mov	r0, #2
   276a8:	str	r2, [r6]
   276ac:	strb	r3, [r6, #4]
   276b0:	b	270e4 <__assert_fail@plt+0x15540>
   276b4:	tst	r8, #8192	; 0x2000
   276b8:	bne	274e0 <__assert_fail@plt+0x1593c>
   276bc:	mov	r3, #8
   276c0:	mov	r0, #2
   276c4:	strb	r3, [r6, #4]
   276c8:	b	270e4 <__assert_fail@plt+0x15540>
   276cc:	cmp	r2, #1
   276d0:	ble	27704 <__assert_fail@plt+0x15b60>
   276d4:	ldr	r1, [r5, #8]
   276d8:	ldr	r0, [r1, r3, lsl #2]
   276dc:	add	r1, r1, r3, lsl #2
   276e0:	cmn	r0, #1
   276e4:	beq	27740 <__assert_fail@plt+0x15b9c>
   276e8:	ldr	r0, [r5, #28]
   276ec:	add	r7, r7, #2
   276f0:	cmp	r0, r7
   276f4:	beq	27704 <__assert_fail@plt+0x15b60>
   276f8:	ldr	r0, [r1, #4]
   276fc:	cmn	r0, #1
   27700:	beq	27740 <__assert_fail@plt+0x15b9c>
   27704:	ldrb	r0, [r5, #76]	; 0x4c
   27708:	ldr	r1, [r5]
   2770c:	ldr	ip, [r5, #24]
   27710:	cmp	r0, #0
   27714:	beq	27734 <__assert_fail@plt+0x15b90>
   27718:	ldr	r0, [r5, #12]
   2771c:	add	r1, r1, ip
   27720:	ldr	r0, [r0, r3, lsl #2]
   27724:	ldrb	r7, [r1, r0]
   27728:	tst	r7, #128	; 0x80
   2772c:	beq	2716c <__assert_fail@plt+0x155c8>
   27730:	b	27168 <__assert_fail@plt+0x155c4>
   27734:	add	r1, r1, r3
   27738:	ldrb	r7, [r1, ip]
   2773c:	b	2716c <__assert_fail@plt+0x155c8>
   27740:	ldrb	r7, [sl, r3]
   27744:	mov	r3, #1
   27748:	strb	r7, [r6]
   2774c:	strb	r3, [r6, #4]
   27750:	b	27188 <__assert_fail@plt+0x155e4>
   27754:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27758:	ldr	ip, [r0, #84]	; 0x54
   2775c:	strd	r6, [sp, #8]
   27760:	strd	r8, [sp, #16]
   27764:	ldr	r8, [r0, #108]	; 0x6c
   27768:	strd	sl, [sp, #24]
   2776c:	str	lr, [sp, #32]
   27770:	sub	sp, sp, #36	; 0x24
   27774:	ldr	r7, [sp, #72]	; 0x48
   27778:	str	ip, [sp, #12]
   2777c:	cmp	r8, #0
   27780:	ldr	r6, [sp, #80]	; 0x50
   27784:	ble	27a6c <__assert_fail@plt+0x15ec8>
   27788:	ldr	sl, [r0, #116]	; 0x74
   2778c:	mov	lr, r8
   27790:	mov	r4, #0
   27794:	add	ip, lr, r4
   27798:	asr	ip, ip, #1
   2779c:	add	r5, ip, ip, lsl #1
   277a0:	add	r5, sl, r5, lsl #3
   277a4:	ldr	r5, [r5, #4]
   277a8:	cmp	r7, r5
   277ac:	bgt	279cc <__assert_fail@plt+0x15e28>
   277b0:	cmp	ip, r4
   277b4:	ble	27800 <__assert_fail@plt+0x15c5c>
   277b8:	add	lr, ip, r4
   277bc:	asr	lr, lr, #1
   277c0:	add	r5, lr, lr, lsl #1
   277c4:	add	r5, sl, r5, lsl #3
   277c8:	ldr	r5, [r5, #4]
   277cc:	cmp	r7, r5
   277d0:	ble	277f0 <__assert_fail@plt+0x15c4c>
   277d4:	b	279c0 <__assert_fail@plt+0x15e1c>
   277d8:	add	r5, ip, ip, lsl #1
   277dc:	add	r5, sl, r5, lsl #3
   277e0:	ldr	r5, [r5, #4]
   277e4:	cmp	r5, r7
   277e8:	blt	279cc <__assert_fail@plt+0x15e28>
   277ec:	mov	lr, ip
   277f0:	add	ip, r4, lr
   277f4:	cmp	r4, lr
   277f8:	asr	ip, ip, #1
   277fc:	blt	277d8 <__assert_fail@plt+0x15c34>
   27800:	cmp	r8, r4
   27804:	mvnle	r4, #0
   27808:	ble	27820 <__assert_fail@plt+0x15c7c>
   2780c:	add	ip, r4, r4, lsl #1
   27810:	add	ip, sl, ip, lsl #3
   27814:	ldr	ip, [ip, #4]
   27818:	cmp	r7, ip
   2781c:	mvnne	r4, #0
   27820:	mov	lr, r8
   27824:	mov	r5, #0
   27828:	add	fp, lr, r5
   2782c:	add	fp, fp, fp, lsr #31
   27830:	asr	fp, fp, #1
   27834:	add	ip, fp, fp, lsl #1
   27838:	add	ip, sl, ip, lsl #3
   2783c:	ldr	ip, [ip, #4]
   27840:	cmp	r6, ip
   27844:	bgt	279b0 <__assert_fail@plt+0x15e0c>
   27848:	cmp	fp, r5
   2784c:	ble	278a8 <__assert_fail@plt+0x15d04>
   27850:	add	lr, fp, r5
   27854:	add	lr, lr, lr, lsr #31
   27858:	asr	lr, lr, #1
   2785c:	add	ip, lr, lr, lsl #1
   27860:	mov	r9, lr
   27864:	add	ip, sl, ip, lsl #3
   27868:	ldr	ip, [ip, #4]
   2786c:	cmp	r6, ip
   27870:	ble	27898 <__assert_fail@plt+0x15cf4>
   27874:	b	279a8 <__assert_fail@plt+0x15e04>
   27878:	asr	ip, ip, #1
   2787c:	add	r9, ip, ip, lsl #1
   27880:	mov	fp, ip
   27884:	add	r9, sl, r9, lsl #3
   27888:	ldr	r9, [r9, #4]
   2788c:	cmp	r9, r6
   27890:	blt	279b0 <__assert_fail@plt+0x15e0c>
   27894:	mov	lr, ip
   27898:	add	ip, r5, lr
   2789c:	cmp	r5, lr
   278a0:	add	ip, ip, ip, lsr #31
   278a4:	blt	27878 <__assert_fail@plt+0x15cd4>
   278a8:	cmp	r8, r5
   278ac:	ble	27a9c <__assert_fail@plt+0x15ef8>
   278b0:	add	ip, r5, r5, lsl #1
   278b4:	add	sl, sl, ip, lsl #3
   278b8:	ldr	ip, [sl, #4]
   278bc:	cmp	r6, ip
   278c0:	mvnne	r5, #0
   278c4:	ldr	ip, [r1]
   278c8:	cmp	ip, #0
   278cc:	ble	27a14 <__assert_fail@plt+0x15e70>
   278d0:	mov	sl, r2
   278d4:	mov	r8, r0
   278d8:	str	r1, [sp, #16]
   278dc:	mov	fp, #0
   278e0:	str	r3, [sp, #20]
   278e4:	str	r5, [sp, #24]
   278e8:	str	r4, [sp, #28]
   278ec:	ldr	r3, [sl]
   278f0:	lsl	r4, fp, #2
   278f4:	ldr	r2, [sp, #12]
   278f8:	ldr	r0, [r8, #116]	; 0x74
   278fc:	ldr	r3, [r3, fp, lsl #2]
   27900:	ldr	r1, [r2]
   27904:	add	r3, r3, r3, lsl #1
   27908:	add	r2, r0, r3, lsl #3
   2790c:	ldr	r0, [r0, r3, lsl #3]
   27910:	ldr	r3, [r2, #8]
   27914:	ldr	r9, [r1, r0, lsl #3]
   27918:	cmp	r7, r3
   2791c:	blt	27a78 <__assert_fail@plt+0x15ed4>
   27920:	ldr	r2, [r2, #12]
   27924:	cmp	r7, r2
   27928:	bgt	27a64 <__assert_fail@plt+0x15ec0>
   2792c:	sub	r1, r7, r3
   27930:	cmp	r7, r2
   27934:	clz	r1, r1
   27938:	lsr	r1, r1, #5
   2793c:	beq	27a1c <__assert_fail@plt+0x15e78>
   27940:	cmp	r7, r3
   27944:	movne	r5, #0
   27948:	beq	27a20 <__assert_fail@plt+0x15e7c>
   2794c:	cmp	r6, r3
   27950:	blt	27988 <__assert_fail@plt+0x15de4>
   27954:	cmp	r6, r2
   27958:	movgt	r0, #1
   2795c:	bgt	27980 <__assert_fail@plt+0x15ddc>
   27960:	sub	r1, r6, r3
   27964:	cmp	r6, r2
   27968:	clz	r1, r1
   2796c:	lsr	r1, r1, #5
   27970:	beq	279dc <__assert_fail@plt+0x15e38>
   27974:	cmp	r6, r3
   27978:	movne	r0, #0
   2797c:	beq	279e0 <__assert_fail@plt+0x15e3c>
   27980:	cmp	r0, r5
   27984:	beq	27a00 <__assert_fail@plt+0x15e5c>
   27988:	mov	r0, #1
   2798c:	add	sp, sp, #36	; 0x24
   27990:	ldrd	r4, [sp]
   27994:	ldrd	r6, [sp, #8]
   27998:	ldrd	r8, [sp, #16]
   2799c:	ldrd	sl, [sp, #24]
   279a0:	add	sp, sp, #32
   279a4:	pop	{pc}		; (ldr pc, [sp], #4)
   279a8:	mov	lr, fp
   279ac:	mov	fp, r9
   279b0:	add	r5, fp, #1
   279b4:	cmp	r5, lr
   279b8:	blt	27828 <__assert_fail@plt+0x15c84>
   279bc:	b	278a8 <__assert_fail@plt+0x15d04>
   279c0:	mov	r4, lr
   279c4:	mov	lr, ip
   279c8:	mov	ip, r4
   279cc:	add	r4, ip, #1
   279d0:	cmp	r4, lr
   279d4:	blt	27794 <__assert_fail@plt+0x15bf0>
   279d8:	b	27800 <__assert_fail@plt+0x15c5c>
   279dc:	orr	r1, r1, #2
   279e0:	ldr	r3, [sp, #24]
   279e4:	mov	r2, r9
   279e8:	mov	r0, r8
   279ec:	str	r3, [sp]
   279f0:	ldr	r3, [sp, #76]	; 0x4c
   279f4:	bl	23adc <__assert_fail@plt+0x11f38>
   279f8:	cmp	r0, r5
   279fc:	bne	27988 <__assert_fail@plt+0x15de4>
   27a00:	ldr	r3, [sp, #16]
   27a04:	ldr	ip, [r3]
   27a08:	add	fp, fp, #1
   27a0c:	cmp	fp, ip
   27a10:	blt	278ec <__assert_fail@plt+0x15d48>
   27a14:	mov	r0, #0
   27a18:	b	2798c <__assert_fail@plt+0x15de8>
   27a1c:	orr	r1, r1, #2
   27a20:	mov	r0, r8
   27a24:	ldr	r3, [sp, #20]
   27a28:	ldr	r2, [sp, #28]
   27a2c:	str	r2, [sp]
   27a30:	mov	r2, r9
   27a34:	bl	23adc <__assert_fail@plt+0x11f38>
   27a38:	ldr	r3, [sl]
   27a3c:	mov	r5, r0
   27a40:	ldr	r2, [r8, #116]	; 0x74
   27a44:	ldr	r3, [r3, r4]
   27a48:	add	r3, r3, r3, lsl #1
   27a4c:	add	r2, r2, r3, lsl #3
   27a50:	ldr	r3, [r2, #8]
   27a54:	cmp	r6, r3
   27a58:	blt	27a94 <__assert_fail@plt+0x15ef0>
   27a5c:	ldr	r2, [r2, #12]
   27a60:	b	27954 <__assert_fail@plt+0x15db0>
   27a64:	mov	r5, #1
   27a68:	b	2794c <__assert_fail@plt+0x15da8>
   27a6c:	mvn	r4, #0
   27a70:	mov	r5, r4
   27a74:	b	278c4 <__assert_fail@plt+0x15d20>
   27a78:	cmp	r6, r3
   27a7c:	blt	27a08 <__assert_fail@plt+0x15e64>
   27a80:	ldr	r2, [r2, #12]
   27a84:	cmp	r6, r2
   27a88:	bgt	27988 <__assert_fail@plt+0x15de4>
   27a8c:	mvn	r5, #0
   27a90:	b	27960 <__assert_fail@plt+0x15dbc>
   27a94:	mvn	r0, #0
   27a98:	b	27980 <__assert_fail@plt+0x15ddc>
   27a9c:	mvn	r5, #0
   27aa0:	b	278c4 <__assert_fail@plt+0x15d20>
   27aa4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   27aa8:	mov	r4, r0
   27aac:	strd	r6, [sp, #8]
   27ab0:	ldr	r0, [r1, #80]	; 0x50
   27ab4:	strd	r8, [sp, #16]
   27ab8:	str	sl, [sp, #24]
   27abc:	str	lr, [sp, #28]
   27ac0:	sub	sp, sp, #8
   27ac4:	ldrb	r7, [sp, #44]	; 0x2c
   27ac8:	cmp	r0, #1
   27acc:	ldr	ip, [r1, #40]	; 0x28
   27ad0:	beq	27b38 <__assert_fail@plt+0x15f94>
   27ad4:	add	r5, ip, #1
   27ad8:	ldr	r6, [r1, #28]
   27adc:	cmp	r5, r6
   27ae0:	bge	27b38 <__assert_fail@plt+0x15f94>
   27ae4:	ldr	r0, [r1, #8]
   27ae8:	ldr	lr, [r0, r5, lsl #2]
   27aec:	add	r0, r0, r5, lsl #2
   27af0:	cmn	lr, #1
   27af4:	bne	27b38 <__assert_fail@plt+0x15f94>
   27af8:	add	r3, ip, #2
   27afc:	mov	r2, r0
   27b00:	b	27b14 <__assert_fail@plt+0x15f70>
   27b04:	ldr	ip, [r2, #4]!
   27b08:	add	r3, r3, #1
   27b0c:	cmn	ip, #1
   27b10:	bne	27b20 <__assert_fail@plt+0x15f7c>
   27b14:	cmp	r6, r3
   27b18:	mov	lr, r3
   27b1c:	bne	27b04 <__assert_fail@plt+0x15f60>
   27b20:	ldr	r3, [r0, #-4]
   27b24:	mov	r2, #1
   27b28:	mov	r0, #0
   27b2c:	strd	r2, [r4]
   27b30:	str	lr, [r1, #40]	; 0x28
   27b34:	b	27b80 <__assert_fail@plt+0x15fdc>
   27b38:	ldrb	lr, [r2, #4]
   27b3c:	add	r3, ip, r3
   27b40:	str	r3, [r1, #40]	; 0x28
   27b44:	and	r0, lr, #251	; 0xfb
   27b48:	cmp	lr, #28
   27b4c:	cmpne	r0, #26
   27b50:	beq	27b9c <__assert_fail@plt+0x15ff8>
   27b54:	cmp	lr, #22
   27b58:	moveq	lr, r7
   27b5c:	orrne	lr, r7, #1
   27b60:	mov	r5, r2
   27b64:	cmp	lr, #0
   27b68:	beq	27d14 <__assert_fail@plt+0x16170>
   27b6c:	ldrb	r2, [r5]
   27b70:	mov	r3, #0
   27b74:	mov	r0, r3
   27b78:	str	r3, [r4]
   27b7c:	strb	r2, [r4, #4]
   27b80:	add	sp, sp, #8
   27b84:	ldrd	r4, [sp]
   27b88:	ldrd	r6, [sp, #8]
   27b8c:	ldrd	r8, [sp, #16]
   27b90:	ldr	sl, [sp, #24]
   27b94:	add	sp, sp, #28
   27b98:	pop	{pc}		; (ldr pc, [sp], #4)
   27b9c:	ldr	r6, [r1, #56]	; 0x38
   27ba0:	cmp	r3, r6
   27ba4:	bge	27c44 <__assert_fail@plt+0x160a0>
   27ba8:	ldrb	r7, [r2]
   27bac:	mov	r5, #0
   27bb0:	b	27bd4 <__assert_fail@plt+0x16030>
   27bb4:	ldr	r3, [r4, #4]
   27bb8:	strb	r0, [r3, r5]
   27bbc:	add	r5, r5, #1
   27bc0:	cmp	r5, #32
   27bc4:	beq	27c44 <__assert_fail@plt+0x160a0>
   27bc8:	ldrb	lr, [r2, #4]
   27bcc:	ldr	r3, [r1, #40]	; 0x28
   27bd0:	ldr	r6, [r1, #56]	; 0x38
   27bd4:	cmp	lr, #30
   27bd8:	add	ip, r3, #1
   27bdc:	beq	27c4c <__assert_fail@plt+0x160a8>
   27be0:	ldr	r0, [r1, #4]
   27be4:	str	ip, [r1, #40]	; 0x28
   27be8:	ldrb	r0, [r0, r3]
   27bec:	cmp	r6, ip
   27bf0:	ble	27c44 <__assert_fail@plt+0x160a0>
   27bf4:	cmp	r7, r0
   27bf8:	bne	27bb4 <__assert_fail@plt+0x16010>
   27bfc:	ldr	r3, [r1, #4]
   27c00:	ldrb	r3, [r3, ip]
   27c04:	cmp	r3, #93	; 0x5d
   27c08:	bne	27bb4 <__assert_fail@plt+0x16010>
   27c0c:	ldr	r3, [r4, #4]
   27c10:	add	ip, ip, #1
   27c14:	mov	r0, #0
   27c18:	str	ip, [r1, #40]	; 0x28
   27c1c:	strb	r0, [r3, r5]
   27c20:	ldrb	r3, [r2, #4]
   27c24:	cmp	r3, #28
   27c28:	beq	27d40 <__assert_fail@plt+0x1619c>
   27c2c:	cmp	r3, #30
   27c30:	beq	27d34 <__assert_fail@plt+0x16190>
   27c34:	cmp	r3, #26
   27c38:	moveq	r3, #3
   27c3c:	streq	r3, [r4]
   27c40:	b	27b80 <__assert_fail@plt+0x15fdc>
   27c44:	mov	r0, #7
   27c48:	b	27b80 <__assert_fail@plt+0x15fdc>
   27c4c:	ldrb	r0, [r1, #75]	; 0x4b
   27c50:	cmp	r0, #0
   27c54:	beq	27be0 <__assert_fail@plt+0x1603c>
   27c58:	ldrb	r0, [r1, #76]	; 0x4c
   27c5c:	cmp	r0, #0
   27c60:	beq	27cfc <__assert_fail@plt+0x16158>
   27c64:	ldr	r8, [r1, #28]
   27c68:	lsl	lr, r3, #2
   27c6c:	cmp	r3, r8
   27c70:	beq	27c84 <__assert_fail@plt+0x160e0>
   27c74:	ldr	r0, [r1, #8]
   27c78:	ldr	r0, [r0, r3, lsl #2]
   27c7c:	cmn	r0, #1
   27c80:	beq	27be0 <__assert_fail@plt+0x1603c>
   27c84:	ldr	r0, [r1]
   27c88:	ldr	sl, [r1, #12]
   27c8c:	ldr	r9, [r1, #24]
   27c90:	ldr	sl, [sl, lr]
   27c94:	add	r0, r0, sl
   27c98:	ldrb	r0, [r0, r9]
   27c9c:	tst	r0, #128	; 0x80
   27ca0:	bne	27be0 <__assert_fail@plt+0x1603c>
   27ca4:	ldr	r9, [r1, #80]	; 0x50
   27ca8:	cmp	r9, #1
   27cac:	beq	27cf4 <__assert_fail@plt+0x16150>
   27cb0:	cmp	r8, ip
   27cb4:	ble	27cf4 <__assert_fail@plt+0x16150>
   27cb8:	ldr	r9, [r1, #8]
   27cbc:	add	lr, r9, lr
   27cc0:	ldr	lr, [lr, #4]
   27cc4:	cmn	lr, #1
   27cc8:	bne	27cf4 <__assert_fail@plt+0x16150>
   27ccc:	add	r3, r3, #2
   27cd0:	sub	r9, r9, #4
   27cd4:	b	27ce4 <__assert_fail@plt+0x16140>
   27cd8:	ldr	lr, [r9, r3, lsl #2]
   27cdc:	cmn	lr, #1
   27ce0:	bne	27cf4 <__assert_fail@plt+0x16150>
   27ce4:	cmp	r8, r3
   27ce8:	mov	ip, r3
   27cec:	add	r3, r3, #1
   27cf0:	bne	27cd8 <__assert_fail@plt+0x16134>
   27cf4:	str	ip, [r1, #40]	; 0x28
   27cf8:	b	27bec <__assert_fail@plt+0x16048>
   27cfc:	ldr	r0, [r1]
   27d00:	str	ip, [r1, #40]	; 0x28
   27d04:	ldr	lr, [r1, #24]
   27d08:	add	r3, r0, r3
   27d0c:	ldrb	r0, [r3, lr]
   27d10:	b	27bec <__assert_fail@plt+0x16048>
   27d14:	mov	r0, sp
   27d18:	ldr	r2, [sp, #40]	; 0x28
   27d1c:	bl	23930 <__assert_fail@plt+0x11d8c>
   27d20:	ldrb	r3, [sp, #4]
   27d24:	cmp	r3, #21
   27d28:	movne	r0, #11
   27d2c:	beq	27b6c <__assert_fail@plt+0x15fc8>
   27d30:	b	27b80 <__assert_fail@plt+0x15fdc>
   27d34:	mov	r3, #4
   27d38:	str	r3, [r4]
   27d3c:	b	27b80 <__assert_fail@plt+0x15fdc>
   27d40:	mov	r3, #2
   27d44:	str	r3, [r4]
   27d48:	b	27b80 <__assert_fail@plt+0x15fdc>
   27d4c:	add	ip, r0, r2, lsl #3
   27d50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27d54:	strd	r6, [sp, #8]
   27d58:	str	r8, [sp, #16]
   27d5c:	ldrb	r8, [ip, #4]
   27d60:	str	lr, [sp, #20]
   27d64:	ldr	r7, [sp, #24]
   27d68:	cmp	r8, #7
   27d6c:	beq	27ed4 <__assert_fail@plt+0x16330>
   27d70:	ldr	ip, [r3, #80]	; 0x50
   27d74:	cmp	ip, #1
   27d78:	beq	27dd8 <__assert_fail@plt+0x16234>
   27d7c:	ldr	ip, [r3, #28]
   27d80:	add	lr, r7, #1
   27d84:	cmp	lr, ip
   27d88:	bge	27dd8 <__assert_fail@plt+0x16234>
   27d8c:	ldr	r4, [r3, #8]
   27d90:	ldr	r5, [r4, lr, lsl #2]
   27d94:	add	r6, r4, lr, lsl #2
   27d98:	cmn	r5, #1
   27d9c:	bne	27dd8 <__assert_fail@plt+0x16234>
   27da0:	sub	ip, ip, r7
   27da4:	mov	lr, r6
   27da8:	mov	r4, #1
   27dac:	b	27dbc <__assert_fail@plt+0x16218>
   27db0:	ldr	r5, [lr, #4]!
   27db4:	cmn	r5, #1
   27db8:	bne	27dc8 <__assert_fail@plt+0x16224>
   27dbc:	add	r4, r4, #1
   27dc0:	cmp	ip, r4
   27dc4:	bne	27db0 <__assert_fail@plt+0x1620c>
   27dc8:	cmp	r8, #5
   27dcc:	beq	27df4 <__assert_fail@plt+0x16250>
   27dd0:	cmp	r8, #6
   27dd4:	beq	27e2c <__assert_fail@plt+0x16288>
   27dd8:	mov	r4, #0
   27ddc:	mov	r0, r4
   27de0:	ldrd	r4, [sp]
   27de4:	ldrd	r6, [sp, #8]
   27de8:	ldr	r8, [sp, #16]
   27dec:	add	sp, sp, #20
   27df0:	pop	{pc}		; (ldr pc, [sp], #4)
   27df4:	ldr	r2, [r1]
   27df8:	tst	r2, #64	; 0x40
   27dfc:	bne	27e10 <__assert_fail@plt+0x1626c>
   27e00:	ldr	r1, [r3, #4]
   27e04:	ldrb	r1, [r1, r7]
   27e08:	cmp	r1, #10
   27e0c:	beq	27dd8 <__assert_fail@plt+0x16234>
   27e10:	tst	r2, #128	; 0x80
   27e14:	beq	27ddc <__assert_fail@plt+0x16238>
   27e18:	ldr	r3, [r3, #4]
   27e1c:	ldrb	r3, [r3, r7]
   27e20:	cmp	r3, #0
   27e24:	beq	27dd8 <__assert_fail@plt+0x16234>
   27e28:	b	27ddc <__assert_fail@plt+0x16238>
   27e2c:	ldr	r7, [r0, r2, lsl #3]
   27e30:	ldr	r0, [r7, #20]
   27e34:	ldr	ip, [r7, #32]
   27e38:	cmp	ip, #0
   27e3c:	bne	27e4c <__assert_fail@plt+0x162a8>
   27e40:	ldr	r3, [r7, #36]	; 0x24
   27e44:	orrs	r3, r0, r3
   27e48:	beq	27fd4 <__assert_fail@plt+0x16430>
   27e4c:	cmp	r0, #0
   27e50:	ldr	r6, [r6, #-4]
   27e54:	ble	27e88 <__assert_fail@plt+0x162e4>
   27e58:	ldr	r2, [r7]
   27e5c:	ldr	r3, [r2]
   27e60:	cmp	r6, r3
   27e64:	beq	27ec4 <__assert_fail@plt+0x16320>
   27e68:	mov	r3, #0
   27e6c:	b	27e7c <__assert_fail@plt+0x162d8>
   27e70:	ldr	r1, [r2, #4]!
   27e74:	cmp	r6, r1
   27e78:	beq	27ec4 <__assert_fail@plt+0x16320>
   27e7c:	add	r3, r3, #1
   27e80:	cmp	r3, r0
   27e84:	bne	27e70 <__assert_fail@plt+0x162cc>
   27e88:	ldr	r3, [r7, #36]	; 0x24
   27e8c:	cmp	r3, #0
   27e90:	ble	27f98 <__assert_fail@plt+0x163f4>
   27e94:	mov	r5, #0
   27e98:	b	27ea8 <__assert_fail@plt+0x16304>
   27e9c:	ldr	r3, [r7, #36]	; 0x24
   27ea0:	cmp	r5, r3
   27ea4:	bge	27f94 <__assert_fail@plt+0x163f0>
   27ea8:	ldr	r3, [r7, #12]
   27eac:	mov	r0, r6
   27eb0:	ldr	r1, [r3, r5, lsl #2]
   27eb4:	add	r5, r5, #1
   27eb8:	bl	11700 <iswctype@plt>
   27ebc:	cmp	r0, #0
   27ec0:	beq	27e9c <__assert_fail@plt+0x162f8>
   27ec4:	ldrb	r3, [r7, #16]
   27ec8:	tst	r3, #1
   27ecc:	beq	27ddc <__assert_fail@plt+0x16238>
   27ed0:	b	27dd8 <__assert_fail@plt+0x16234>
   27ed4:	ldr	r1, [r3, #4]
   27ed8:	ldrb	r2, [r1, r7]
   27edc:	cmp	r2, #193	; 0xc1
   27ee0:	bls	27dd8 <__assert_fail@plt+0x16234>
   27ee4:	ldr	r3, [r3, #48]	; 0x30
   27ee8:	add	r0, r7, #1
   27eec:	cmp	r0, r3
   27ef0:	bge	27dd8 <__assert_fail@plt+0x16234>
   27ef4:	add	ip, r1, r7
   27ef8:	cmp	r2, #223	; 0xdf
   27efc:	ldrb	lr, [ip, #1]
   27f00:	bls	28000 <__assert_fail@plt+0x1645c>
   27f04:	cmp	r2, #239	; 0xef
   27f08:	bhi	27fe4 <__assert_fail@plt+0x16440>
   27f0c:	cmp	lr, #159	; 0x9f
   27f10:	cmpls	r2, #224	; 0xe0
   27f14:	movne	r4, #3
   27f18:	beq	27dd8 <__assert_fail@plt+0x16234>
   27f1c:	add	r7, r7, r4
   27f20:	cmp	r3, r7
   27f24:	blt	27dd8 <__assert_fail@plt+0x16234>
   27f28:	ldrb	r3, [r1, r0]
   27f2c:	eor	r3, r3, #128	; 0x80
   27f30:	cmp	r3, #63	; 0x3f
   27f34:	bhi	27dd8 <__assert_fail@plt+0x16234>
   27f38:	ldrb	r3, [ip, #2]
   27f3c:	eor	r3, r3, #128	; 0x80
   27f40:	cmp	r3, #63	; 0x3f
   27f44:	bhi	27dd8 <__assert_fail@plt+0x16234>
   27f48:	cmp	r4, #3
   27f4c:	beq	27ddc <__assert_fail@plt+0x16238>
   27f50:	ldrb	r3, [ip, #3]
   27f54:	eor	r3, r3, #128	; 0x80
   27f58:	cmp	r3, #63	; 0x3f
   27f5c:	bhi	27dd8 <__assert_fail@plt+0x16234>
   27f60:	cmp	r4, #4
   27f64:	beq	27ddc <__assert_fail@plt+0x16238>
   27f68:	ldrb	r3, [ip, #4]
   27f6c:	eor	r3, r3, #128	; 0x80
   27f70:	cmp	r3, #63	; 0x3f
   27f74:	bhi	27dd8 <__assert_fail@plt+0x16234>
   27f78:	cmp	r4, #6
   27f7c:	bne	2804c <__assert_fail@plt+0x164a8>
   27f80:	ldrb	r3, [ip, #5]
   27f84:	eor	r3, r3, #128	; 0x80
   27f88:	cmp	r3, #63	; 0x3f
   27f8c:	bls	27ddc <__assert_fail@plt+0x16238>
   27f90:	b	27dd8 <__assert_fail@plt+0x16234>
   27f94:	ldr	ip, [r7, #32]
   27f98:	cmp	ip, #0
   27f9c:	ble	27fd4 <__assert_fail@plt+0x16430>
   27fa0:	ldr	r2, [r7, #4]
   27fa4:	mov	r3, #0
   27fa8:	sub	r2, r2, #4
   27fac:	ldr	r1, [r2, #4]!
   27fb0:	cmp	r6, r1
   27fb4:	bcc	27fc8 <__assert_fail@plt+0x16424>
   27fb8:	ldr	r1, [r7, #8]
   27fbc:	ldr	r1, [r1, r3, lsl #2]
   27fc0:	cmp	r6, r1
   27fc4:	bls	27ec4 <__assert_fail@plt+0x16320>
   27fc8:	add	r3, r3, #1
   27fcc:	cmp	r3, ip
   27fd0:	bne	27fac <__assert_fail@plt+0x16408>
   27fd4:	ldrb	r3, [r7, #16]
   27fd8:	tst	r3, #1
   27fdc:	bne	27ddc <__assert_fail@plt+0x16238>
   27fe0:	b	27dd8 <__assert_fail@plt+0x16234>
   27fe4:	cmp	r2, #247	; 0xf7
   27fe8:	bhi	28014 <__assert_fail@plt+0x16470>
   27fec:	cmp	lr, #143	; 0x8f
   27ff0:	cmpls	r2, #240	; 0xf0
   27ff4:	movne	r4, #4
   27ff8:	bne	27f1c <__assert_fail@plt+0x16378>
   27ffc:	b	27dd8 <__assert_fail@plt+0x16234>
   28000:	eor	lr, lr, #128	; 0x80
   28004:	cmp	lr, #63	; 0x3f
   28008:	movls	r4, #2
   2800c:	bls	27ddc <__assert_fail@plt+0x16238>
   28010:	b	27dd8 <__assert_fail@plt+0x16234>
   28014:	cmp	r2, #251	; 0xfb
   28018:	bhi	28030 <__assert_fail@plt+0x1648c>
   2801c:	cmp	lr, #135	; 0x87
   28020:	cmpls	r2, #248	; 0xf8
   28024:	movne	r4, #5
   28028:	bne	27f1c <__assert_fail@plt+0x16378>
   2802c:	b	27dd8 <__assert_fail@plt+0x16234>
   28030:	cmp	r2, #253	; 0xfd
   28034:	bhi	27dd8 <__assert_fail@plt+0x16234>
   28038:	cmp	lr, #131	; 0x83
   2803c:	cmpls	r2, #252	; 0xfc
   28040:	beq	27dd8 <__assert_fail@plt+0x16234>
   28044:	mov	r4, #6
   28048:	b	27f1c <__assert_fail@plt+0x16378>
   2804c:	mov	r4, #5
   28050:	b	27ddc <__assert_fail@plt+0x16238>
   28054:	strd	r4, [sp, #-16]!
   28058:	mov	r5, #255	; 0xff
   2805c:	movt	r5, #4
   28060:	mov	r4, r0
   28064:	str	r6, [sp, #8]
   28068:	str	lr, [sp, #12]
   2806c:	b	28074 <__assert_fail@plt+0x164d0>
   28070:	mov	r4, r3
   28074:	ldr	r3, [r4, #4]
   28078:	cmp	r3, #0
   2807c:	bne	28070 <__assert_fail@plt+0x164cc>
   28080:	ldr	r3, [r4, #8]
   28084:	cmp	r3, #0
   28088:	bne	28070 <__assert_fail@plt+0x164cc>
   2808c:	ldr	r3, [r4, #24]
   28090:	and	r3, r3, r5
   28094:	cmp	r3, #6
   28098:	beq	280e0 <__assert_fail@plt+0x1653c>
   2809c:	cmp	r3, #3
   280a0:	beq	28128 <__assert_fail@plt+0x16584>
   280a4:	ldr	r0, [r4]
   280a8:	cmp	r0, #0
   280ac:	beq	28118 <__assert_fail@plt+0x16574>
   280b0:	ldr	r3, [r0, #8]
   280b4:	cmp	r3, #0
   280b8:	cmpne	r4, r3
   280bc:	mov	r4, r0
   280c0:	moveq	r2, #1
   280c4:	movne	r2, #0
   280c8:	cmp	r2, #0
   280cc:	beq	28070 <__assert_fail@plt+0x164cc>
   280d0:	ldr	r3, [r4, #24]
   280d4:	and	r3, r3, r5
   280d8:	cmp	r3, #6
   280dc:	bne	2809c <__assert_fail@plt+0x164f8>
   280e0:	ldr	r6, [r4, #20]
   280e4:	ldr	r0, [r6]
   280e8:	bl	19610 <__assert_fail@plt+0x7a6c>
   280ec:	ldr	r0, [r6, #4]
   280f0:	bl	19610 <__assert_fail@plt+0x7a6c>
   280f4:	ldr	r0, [r6, #8]
   280f8:	bl	19610 <__assert_fail@plt+0x7a6c>
   280fc:	ldr	r0, [r6, #12]
   28100:	bl	19610 <__assert_fail@plt+0x7a6c>
   28104:	mov	r0, r6
   28108:	bl	19610 <__assert_fail@plt+0x7a6c>
   2810c:	ldr	r0, [r4]
   28110:	cmp	r0, #0
   28114:	bne	280b0 <__assert_fail@plt+0x1650c>
   28118:	ldrd	r4, [sp]
   2811c:	ldr	r6, [sp, #8]
   28120:	add	sp, sp, #12
   28124:	pop	{pc}		; (ldr pc, [sp], #4)
   28128:	ldr	r0, [r4, #20]
   2812c:	bl	19610 <__assert_fail@plt+0x7a6c>
   28130:	b	280a4 <__assert_fail@plt+0x16500>
   28134:	ldr	r2, [r0]
   28138:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2813c:	strd	r6, [sp, #8]
   28140:	mov	r7, r0
   28144:	str	r8, [sp, #16]
   28148:	str	lr, [sp, #20]
   2814c:	cmp	r2, #0
   28150:	beq	281d8 <__assert_fail@plt+0x16634>
   28154:	ldr	r0, [r0, #8]
   28158:	cmp	r0, #0
   2815c:	beq	281d8 <__assert_fail@plt+0x16634>
   28160:	mov	r5, #255	; 0xff
   28164:	movt	r5, #4
   28168:	mov	r4, #0
   2816c:	b	28188 <__assert_fail@plt+0x165e4>
   28170:	cmp	r3, #3
   28174:	beq	283b0 <__assert_fail@plt+0x1680c>
   28178:	add	r4, r4, #1
   2817c:	cmp	r4, r0
   28180:	bcs	281d8 <__assert_fail@plt+0x16634>
   28184:	ldr	r2, [r7]
   28188:	add	r1, r2, r4, lsl #3
   2818c:	ldr	r3, [r1, #4]
   28190:	and	r3, r3, r5
   28194:	cmp	r3, #6
   28198:	bne	28170 <__assert_fail@plt+0x165cc>
   2819c:	ldr	r6, [r2, r4, lsl #3]
   281a0:	add	r4, r4, #1
   281a4:	ldr	r0, [r6]
   281a8:	bl	19610 <__assert_fail@plt+0x7a6c>
   281ac:	ldr	r0, [r6, #4]
   281b0:	bl	19610 <__assert_fail@plt+0x7a6c>
   281b4:	ldr	r0, [r6, #8]
   281b8:	bl	19610 <__assert_fail@plt+0x7a6c>
   281bc:	ldr	r0, [r6, #12]
   281c0:	bl	19610 <__assert_fail@plt+0x7a6c>
   281c4:	mov	r0, r6
   281c8:	bl	19610 <__assert_fail@plt+0x7a6c>
   281cc:	ldr	r0, [r7, #8]
   281d0:	cmp	r4, r0
   281d4:	bcc	28184 <__assert_fail@plt+0x165e0>
   281d8:	ldr	r0, [r7, #12]
   281dc:	bl	19610 <__assert_fail@plt+0x7a6c>
   281e0:	ldr	r3, [r7, #8]
   281e4:	cmp	r3, #0
   281e8:	movne	r4, #0
   281ec:	movne	r5, r4
   281f0:	beq	28250 <__assert_fail@plt+0x166ac>
   281f4:	ldr	r3, [r7, #24]
   281f8:	cmp	r3, #0
   281fc:	add	r2, r3, r4
   28200:	beq	2820c <__assert_fail@plt+0x16668>
   28204:	ldr	r0, [r2, #8]
   28208:	bl	19610 <__assert_fail@plt+0x7a6c>
   2820c:	ldr	r3, [r7, #28]
   28210:	cmp	r3, #0
   28214:	add	r2, r3, r4
   28218:	beq	28224 <__assert_fail@plt+0x16680>
   2821c:	ldr	r0, [r2, #8]
   28220:	bl	19610 <__assert_fail@plt+0x7a6c>
   28224:	ldr	r0, [r7, #20]
   28228:	cmp	r0, #0
   2822c:	add	r3, r0, r4
   28230:	beq	28354 <__assert_fail@plt+0x167b0>
   28234:	ldr	r0, [r3, #8]
   28238:	add	r5, r5, #1
   2823c:	add	r4, r4, #12
   28240:	bl	19610 <__assert_fail@plt+0x7a6c>
   28244:	ldr	r3, [r7, #8]
   28248:	cmp	r5, r3
   2824c:	bcc	281f4 <__assert_fail@plt+0x16650>
   28250:	ldr	r0, [r7, #20]
   28254:	bl	19610 <__assert_fail@plt+0x7a6c>
   28258:	ldr	r0, [r7, #24]
   2825c:	bl	19610 <__assert_fail@plt+0x7a6c>
   28260:	ldr	r0, [r7, #28]
   28264:	bl	19610 <__assert_fail@plt+0x7a6c>
   28268:	ldr	r0, [r7]
   2826c:	bl	19610 <__assert_fail@plt+0x7a6c>
   28270:	ldr	r0, [r7, #32]
   28274:	cmp	r0, #0
   28278:	movne	r8, #0
   2827c:	beq	28370 <__assert_fail@plt+0x167cc>
   28280:	add	r6, r8, r8, lsl #1
   28284:	ldr	r3, [r0, r6, lsl #2]
   28288:	add	r6, r0, r6, lsl #2
   2828c:	cmp	r3, #0
   28290:	movgt	r5, #0
   28294:	ble	28300 <__assert_fail@plt+0x1675c>
   28298:	ldr	r3, [r6, #8]
   2829c:	ldr	r4, [r3, r5, lsl #2]
   282a0:	ldr	r0, [r4, #24]
   282a4:	bl	19610 <__assert_fail@plt+0x7a6c>
   282a8:	ldr	r0, [r4, #36]	; 0x24
   282ac:	bl	19610 <__assert_fail@plt+0x7a6c>
   282b0:	ldr	r3, [r4, #40]	; 0x28
   282b4:	add	r2, r4, #4
   282b8:	cmp	r3, r2
   282bc:	beq	28320 <__assert_fail@plt+0x1677c>
   282c0:	ldr	r0, [r3, #8]
   282c4:	add	r5, r5, #1
   282c8:	bl	19610 <__assert_fail@plt+0x7a6c>
   282cc:	ldr	r0, [r4, #40]	; 0x28
   282d0:	bl	19610 <__assert_fail@plt+0x7a6c>
   282d4:	ldr	r0, [r4, #12]
   282d8:	bl	19610 <__assert_fail@plt+0x7a6c>
   282dc:	ldr	r0, [r4, #48]	; 0x30
   282e0:	bl	19610 <__assert_fail@plt+0x7a6c>
   282e4:	ldr	r0, [r4, #44]	; 0x2c
   282e8:	bl	19610 <__assert_fail@plt+0x7a6c>
   282ec:	mov	r0, r4
   282f0:	bl	19610 <__assert_fail@plt+0x7a6c>
   282f4:	ldr	r3, [r6]
   282f8:	cmp	r3, r5
   282fc:	bgt	28298 <__assert_fail@plt+0x166f4>
   28300:	ldr	r0, [r6, #8]
   28304:	add	r8, r8, #1
   28308:	bl	19610 <__assert_fail@plt+0x7a6c>
   2830c:	ldr	r3, [r7, #68]	; 0x44
   28310:	cmp	r3, r8
   28314:	bcc	2836c <__assert_fail@plt+0x167c8>
   28318:	ldr	r0, [r7, #32]
   2831c:	b	28280 <__assert_fail@plt+0x166dc>
   28320:	ldr	r0, [r4, #12]
   28324:	add	r5, r5, #1
   28328:	bl	19610 <__assert_fail@plt+0x7a6c>
   2832c:	ldr	r0, [r4, #48]	; 0x30
   28330:	bl	19610 <__assert_fail@plt+0x7a6c>
   28334:	ldr	r0, [r4, #44]	; 0x2c
   28338:	bl	19610 <__assert_fail@plt+0x7a6c>
   2833c:	mov	r0, r4
   28340:	bl	19610 <__assert_fail@plt+0x7a6c>
   28344:	ldr	r3, [r6]
   28348:	cmp	r5, r3
   2834c:	blt	28298 <__assert_fail@plt+0x166f4>
   28350:	b	28300 <__assert_fail@plt+0x1675c>
   28354:	ldr	r3, [r7, #8]
   28358:	add	r5, r5, #1
   2835c:	add	r4, r4, #12
   28360:	cmp	r3, r5
   28364:	bhi	281f4 <__assert_fail@plt+0x16650>
   28368:	b	28254 <__assert_fail@plt+0x166b0>
   2836c:	ldr	r0, [r7, #32]
   28370:	bl	19610 <__assert_fail@plt+0x7a6c>
   28374:	ldr	r0, [r7, #60]	; 0x3c
   28378:	movw	r3, #50168	; 0xc3f8
   2837c:	movt	r3, #3
   28380:	cmp	r0, r3
   28384:	beq	2838c <__assert_fail@plt+0x167e8>
   28388:	bl	19610 <__assert_fail@plt+0x7a6c>
   2838c:	ldr	r0, [r7, #132]	; 0x84
   28390:	bl	19610 <__assert_fail@plt+0x7a6c>
   28394:	mov	r0, r7
   28398:	ldrd	r4, [sp]
   2839c:	ldrd	r6, [sp, #8]
   283a0:	ldr	r8, [sp, #16]
   283a4:	ldr	lr, [sp, #20]
   283a8:	add	sp, sp, #24
   283ac:	b	19610 <__assert_fail@plt+0x7a6c>
   283b0:	ldr	r0, [r1]
   283b4:	bl	19610 <__assert_fail@plt+0x7a6c>
   283b8:	ldr	r0, [r7, #8]
   283bc:	b	28178 <__assert_fail@plt+0x165d4>
   283c0:	ldr	r2, [r1, #24]
   283c4:	mov	r3, #255	; 0xff
   283c8:	movt	r3, #4
   283cc:	str	r4, [sp, #-8]!
   283d0:	str	lr, [sp, #4]
   283d4:	and	r3, r3, r2
   283d8:	cmp	r3, #6
   283dc:	beq	283f8 <__assert_fail@plt+0x16854>
   283e0:	cmp	r3, #3
   283e4:	beq	28434 <__assert_fail@plt+0x16890>
   283e8:	ldr	r4, [sp]
   283ec:	add	sp, sp, #4
   283f0:	mov	r0, #0
   283f4:	pop	{pc}		; (ldr pc, [sp], #4)
   283f8:	ldr	r4, [r1, #20]
   283fc:	ldr	r0, [r4]
   28400:	bl	19610 <__assert_fail@plt+0x7a6c>
   28404:	ldr	r0, [r4, #4]
   28408:	bl	19610 <__assert_fail@plt+0x7a6c>
   2840c:	ldr	r0, [r4, #8]
   28410:	bl	19610 <__assert_fail@plt+0x7a6c>
   28414:	ldr	r0, [r4, #12]
   28418:	bl	19610 <__assert_fail@plt+0x7a6c>
   2841c:	mov	r0, r4
   28420:	bl	19610 <__assert_fail@plt+0x7a6c>
   28424:	ldr	r4, [sp]
   28428:	add	sp, sp, #4
   2842c:	mov	r0, #0
   28430:	pop	{pc}		; (ldr pc, [sp], #4)
   28434:	ldr	r0, [r1, #20]
   28438:	bl	19610 <__assert_fail@plt+0x7a6c>
   2843c:	ldr	r4, [sp]
   28440:	add	sp, sp, #4
   28444:	mov	r0, #0
   28448:	pop	{pc}		; (ldr pc, [sp], #4)
   2844c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28450:	mov	r4, r2
   28454:	strd	r6, [sp, #8]
   28458:	lsl	r7, r1, #3
   2845c:	mov	r6, r0
   28460:	strd	r8, [sp, #16]
   28464:	mov	r8, r1
   28468:	strd	sl, [sp, #24]
   2846c:	mov	sl, #0
   28470:	str	lr, [sp, #32]
   28474:	sub	sp, sp, #20
   28478:	ldr	r9, [sp, #56]	; 0x38
   2847c:	str	r3, [sp, #8]
   28480:	ldr	r2, [r6]
   28484:	mov	r5, r4
   28488:	ldr	r1, [r6, #20]
   2848c:	add	r3, r2, r7
   28490:	ldrb	r0, [r3, #4]
   28494:	cmp	r0, #4
   28498:	beq	286c0 <__assert_fail@plt+0x16b1c>
   2849c:	add	fp, r8, r8, lsl #1
   284a0:	lsl	fp, fp, #2
   284a4:	add	ip, r1, fp
   284a8:	ldr	r0, [ip, #4]
   284ac:	cmp	r0, #0
   284b0:	beq	28810 <__assert_fail@plt+0x16c6c>
   284b4:	ldr	ip, [ip, #8]
   284b8:	add	r5, r4, r4, lsl #1
   284bc:	cmp	r0, #1
   284c0:	lsl	r5, r5, #2
   284c4:	add	r0, r1, r5
   284c8:	ldr	r7, [ip]
   284cc:	beq	28608 <__assert_fail@plt+0x16a64>
   284d0:	ldr	ip, [r6, #8]
   284d4:	sub	r1, ip, #1
   284d8:	add	r3, r2, r1, lsl #3
   284dc:	cmp	r1, #0
   284e0:	movle	lr, #0
   284e4:	movgt	lr, #1
   284e8:	ldrb	r4, [r3, #6]
   284ec:	str	sl, [r0, #4]
   284f0:	ands	lr, lr, r4, lsr #2
   284f4:	beq	28770 <__assert_fail@plt+0x16bcc>
   284f8:	ldr	lr, [r6, #16]
   284fc:	add	r4, r2, ip, lsl #3
   28500:	sub	r4, r4, r3
   28504:	sub	r4, r4, #16
   28508:	add	lr, lr, ip, lsl #2
   2850c:	b	28530 <__assert_fail@plt+0x1698c>
   28510:	add	r3, r3, r4
   28514:	sub	r1, r1, #1
   28518:	ldrb	r8, [r3, #6]
   2851c:	cmp	r1, #0
   28520:	movle	ip, #0
   28524:	movgt	ip, #1
   28528:	ands	ip, ip, r8, lsr #2
   2852c:	beq	28770 <__assert_fail@plt+0x16bcc>
   28530:	ldr	ip, [lr, #-4]!
   28534:	cmp	ip, r7
   28538:	bne	28510 <__assert_fail@plt+0x1696c>
   2853c:	ldr	ip, [r3, #4]
   28540:	ubfx	ip, ip, #8, #10
   28544:	cmp	r9, ip
   28548:	bne	28510 <__assert_fail@plt+0x1696c>
   2854c:	bl	24b78 <__assert_fail@plt+0x12fd4>
   28550:	cmp	r0, #0
   28554:	beq	285e8 <__assert_fail@plt+0x16a44>
   28558:	ldr	r3, [r6]
   2855c:	mov	r0, r6
   28560:	ldr	r2, [r6, #20]
   28564:	add	fp, r2, fp
   28568:	ldr	r2, [fp, #8]
   2856c:	ldr	r8, [r2, #4]
   28570:	lsl	r7, r8, #3
   28574:	add	r3, r3, r7
   28578:	ldm	r3, {r1, r2}
   2857c:	bl	248c4 <__assert_fail@plt+0x12d20>
   28580:	cmn	r0, #1
   28584:	mov	r4, r0
   28588:	beq	285e8 <__assert_fail@plt+0x16a44>
   2858c:	ldr	r3, [r6]
   28590:	mov	r1, r0
   28594:	ubfx	r2, r9, #0, #10
   28598:	add	r0, r3, r0, lsl #3
   2859c:	add	ip, r3, r7
   285a0:	ldr	r3, [r0, #4]
   285a4:	bfi	r3, r2, #8, #10
   285a8:	str	r3, [r0, #4]
   285ac:	ldr	ip, [ip, #4]
   285b0:	ubfx	ip, ip, #8, #10
   285b4:	orr	r2, r2, ip
   285b8:	bfi	r3, r2, #8, #10
   285bc:	ubfx	r2, r3, #16, #8
   285c0:	str	r3, [r0, #4]
   285c4:	orr	r3, r2, #4
   285c8:	strb	r3, [r0, #6]
   285cc:	ldr	r3, [r6, #16]
   285d0:	ldr	r0, [r6, #20]
   285d4:	str	r8, [r3, r4, lsl #2]
   285d8:	add	r0, r0, r5
   285dc:	bl	24b78 <__assert_fail@plt+0x12fd4>
   285e0:	cmp	r0, #0
   285e4:	bne	28480 <__assert_fail@plt+0x168dc>
   285e8:	mov	r0, #12
   285ec:	add	sp, sp, #20
   285f0:	ldrd	r4, [sp]
   285f4:	ldrd	r6, [sp, #8]
   285f8:	ldrd	r8, [sp, #16]
   285fc:	ldrd	sl, [sp, #24]
   28600:	add	sp, sp, #32
   28604:	pop	{pc}		; (ldr pc, [sp], #4)
   28608:	ldr	r1, [sp, #8]
   2860c:	cmp	r8, r4
   28610:	str	sl, [r0, #4]
   28614:	sub	r1, r8, r1
   28618:	clz	r1, r1
   2861c:	lsr	r1, r1, #5
   28620:	moveq	r1, #0
   28624:	cmp	r1, #0
   28628:	bne	28820 <__assert_fail@plt+0x16c7c>
   2862c:	ldr	r3, [r3, #4]
   28630:	lsl	fp, r7, #3
   28634:	mov	r0, r6
   28638:	add	r2, r2, fp
   2863c:	ldm	r2, {r1, r2}
   28640:	ubfx	r3, r3, #8, #10
   28644:	orr	r9, r9, r3
   28648:	bl	248c4 <__assert_fail@plt+0x12d20>
   2864c:	cmn	r0, #1
   28650:	mov	r4, r0
   28654:	beq	285e8 <__assert_fail@plt+0x16a44>
   28658:	ldr	r3, [r6]
   2865c:	mov	r1, r0
   28660:	ubfx	r2, r9, #0, #10
   28664:	add	r0, r3, r0, lsl #3
   28668:	add	ip, r3, fp
   2866c:	ldr	r3, [r0, #4]
   28670:	bfi	r3, r2, #8, #10
   28674:	str	r3, [r0, #4]
   28678:	ldr	ip, [ip, #4]
   2867c:	ubfx	ip, ip, #8, #10
   28680:	orr	r2, r2, ip
   28684:	bfi	r3, r2, #8, #10
   28688:	ubfx	r2, r3, #16, #8
   2868c:	str	r3, [r0, #4]
   28690:	orr	r3, r2, #4
   28694:	strb	r3, [r0, #6]
   28698:	ldr	r3, [r6, #16]
   2869c:	ldr	r0, [r6, #20]
   286a0:	str	r7, [r3, r4, lsl #2]
   286a4:	add	r0, r0, r5
   286a8:	bl	24b78 <__assert_fail@plt+0x12fd4>
   286ac:	cmp	r0, #0
   286b0:	beq	285e8 <__assert_fail@plt+0x16a44>
   286b4:	mov	r8, r7
   286b8:	mov	r7, fp
   286bc:	b	28480 <__assert_fail@plt+0x168dc>
   286c0:	ldr	ip, [r6, #12]
   286c4:	lsl	r3, r8, #2
   286c8:	mov	r0, r6
   286cc:	add	r4, r4, r4, lsl #1
   286d0:	lsl	fp, r4, #2
   286d4:	str	r3, [sp, #12]
   286d8:	ldr	r8, [ip, r8, lsl #2]
   286dc:	add	r1, r1, fp
   286e0:	str	sl, [r1, #4]
   286e4:	lsl	r7, r8, #3
   286e8:	add	r2, r2, r7
   286ec:	ldm	r2, {r1, r2}
   286f0:	bl	248c4 <__assert_fail@plt+0x12d20>
   286f4:	cmn	r0, #1
   286f8:	mov	r4, r0
   286fc:	ldr	r3, [sp, #12]
   28700:	beq	285e8 <__assert_fail@plt+0x16a44>
   28704:	ldr	lr, [r6]
   28708:	ubfx	r0, r9, #0, #10
   2870c:	mov	r1, r4
   28710:	add	ip, lr, r4, lsl #3
   28714:	add	lr, lr, r7
   28718:	ldr	r2, [ip, #4]
   2871c:	bfi	r2, r0, #8, #10
   28720:	str	r2, [ip, #4]
   28724:	ldr	lr, [lr, #4]
   28728:	ubfx	lr, lr, #8, #10
   2872c:	orr	r0, r0, lr
   28730:	bfi	r2, r0, #8, #10
   28734:	ubfx	r0, r2, #16, #8
   28738:	str	r2, [ip, #4]
   2873c:	orr	r2, r0, #4
   28740:	strb	r2, [ip, #6]
   28744:	ldr	r2, [r6, #12]
   28748:	ldr	ip, [r6, #16]
   2874c:	ldr	r0, [r6, #20]
   28750:	str	r8, [ip, r4, lsl #2]
   28754:	ldr	r3, [r2, r3]
   28758:	add	r0, r0, fp
   2875c:	str	r3, [r2, r5, lsl #2]
   28760:	bl	24b78 <__assert_fail@plt+0x12fd4>
   28764:	cmp	r0, #0
   28768:	bne	28480 <__assert_fail@plt+0x168dc>
   2876c:	b	285e8 <__assert_fail@plt+0x16a44>
   28770:	lsl	r4, r7, #3
   28774:	mov	r0, r6
   28778:	add	r2, r2, r4
   2877c:	ldm	r2, {r1, r2}
   28780:	bl	248c4 <__assert_fail@plt+0x12d20>
   28784:	cmn	r0, #1
   28788:	mov	r8, r0
   2878c:	beq	285e8 <__assert_fail@plt+0x16a44>
   28790:	ldr	r3, [r6]
   28794:	ubfx	r0, r9, #0, #10
   28798:	mov	r1, r8
   2879c:	add	r2, r3, r8, lsl #3
   287a0:	add	r4, r3, r4
   287a4:	ldr	r3, [r2, #4]
   287a8:	bfi	r3, r0, #8, #10
   287ac:	str	r3, [r2, #4]
   287b0:	ldr	ip, [r4, #4]
   287b4:	ubfx	ip, ip, #8, #10
   287b8:	orr	r0, r0, ip
   287bc:	bfi	r3, r0, #8, #10
   287c0:	ubfx	r0, r3, #16, #8
   287c4:	str	r3, [r2, #4]
   287c8:	orr	r3, r0, #4
   287cc:	strb	r3, [r2, #6]
   287d0:	ldr	r3, [r6, #16]
   287d4:	ldr	r0, [r6, #20]
   287d8:	str	r7, [r3, r8, lsl #2]
   287dc:	add	r0, r0, r5
   287e0:	bl	24b78 <__assert_fail@plt+0x12fd4>
   287e4:	cmp	r0, #0
   287e8:	beq	285e8 <__assert_fail@plt+0x16a44>
   287ec:	mov	r2, r8
   287f0:	mov	r1, r7
   287f4:	str	r9, [sp]
   287f8:	mov	r0, r6
   287fc:	ldr	r3, [sp, #8]
   28800:	bl	2844c <__assert_fail@plt+0x168a8>
   28804:	cmp	r0, #0
   28808:	beq	28558 <__assert_fail@plt+0x169b4>
   2880c:	b	285ec <__assert_fail@plt+0x16a48>
   28810:	ldr	r3, [r6, #12]
   28814:	ldr	r2, [r3, r8, lsl #2]
   28818:	str	r2, [r3, r4, lsl #2]
   2881c:	b	285ec <__assert_fail@plt+0x16a48>
   28820:	mov	r1, r7
   28824:	bl	24b78 <__assert_fail@plt+0x12fd4>
   28828:	cmp	r0, #0
   2882c:	movne	r0, #0
   28830:	bne	285ec <__assert_fail@plt+0x16a48>
   28834:	b	285e8 <__assert_fail@plt+0x16a44>
   28838:	ldr	r3, [r0, #36]	; 0x24
   2883c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28840:	strd	r6, [sp, #8]
   28844:	str	r8, [sp, #16]
   28848:	str	lr, [sp, #20]
   2884c:	cmn	r3, #-536870910	; 0xe0000002
   28850:	bhi	28a18 <__assert_fail@plt+0x16e74>
   28854:	ldr	r2, [r0, #48]	; 0x30
   28858:	lsl	r3, r3, #1
   2885c:	mov	r4, r0
   28860:	cmp	r3, r2
   28864:	movge	r3, r2
   28868:	cmp	r3, r1
   2886c:	movge	r1, r3
   28870:	bl	23e64 <__assert_fail@plt+0x122c0>
   28874:	subs	r6, r0, #0
   28878:	bne	288e4 <__assert_fail@plt+0x16d40>
   2887c:	ldr	r0, [r4, #100]	; 0x64
   28880:	cmp	r0, #0
   28884:	beq	288a4 <__assert_fail@plt+0x16d00>
   28888:	ldr	r1, [r4, #36]	; 0x24
   2888c:	add	r1, r1, #1
   28890:	lsl	r1, r1, #2
   28894:	bl	39064 <__assert_fail@plt+0x274c0>
   28898:	cmp	r0, #0
   2889c:	beq	28a18 <__assert_fail@plt+0x16e74>
   288a0:	str	r0, [r4, #100]	; 0x64
   288a4:	ldrb	r3, [r4, #72]	; 0x48
   288a8:	ldr	r2, [r4, #80]	; 0x50
   288ac:	cmp	r3, #0
   288b0:	beq	288fc <__assert_fail@plt+0x16d58>
   288b4:	cmp	r2, #1
   288b8:	ble	28994 <__assert_fail@plt+0x16df0>
   288bc:	mov	r0, r4
   288c0:	ldrd	r4, [sp]
   288c4:	ldrd	r6, [sp, #8]
   288c8:	ldr	r8, [sp, #16]
   288cc:	ldr	lr, [sp, #20]
   288d0:	add	sp, sp, #24
   288d4:	b	24248 <__assert_fail@plt+0x126a4>
   288d8:	mov	r1, r2
   288dc:	str	r1, [r4, #28]
   288e0:	str	r1, [r4, #32]
   288e4:	mov	r0, r6
   288e8:	ldrd	r4, [sp]
   288ec:	ldrd	r6, [sp, #8]
   288f0:	ldr	r8, [sp, #16]
   288f4:	add	sp, sp, #20
   288f8:	pop	{pc}		; (ldr pc, [sp], #4)
   288fc:	cmp	r2, #1
   28900:	bgt	28988 <__assert_fail@plt+0x16de4>
   28904:	ldr	r0, [r4, #64]	; 0x40
   28908:	cmp	r0, #0
   2890c:	beq	288e4 <__assert_fail@plt+0x16d40>
   28910:	ldr	r2, [r4, #28]
   28914:	ldr	r1, [r4, #36]	; 0x24
   28918:	ldr	r3, [r4, #48]	; 0x30
   2891c:	cmp	r1, r3
   28920:	movge	r1, r3
   28924:	cmp	r1, r2
   28928:	ble	288d8 <__assert_fail@plt+0x16d34>
   2892c:	ldm	r4, {ip, lr}
   28930:	add	r3, r2, #1
   28934:	cmp	r1, r3
   28938:	ldr	r5, [r4, #24]
   2893c:	add	ip, ip, r2
   28940:	ldrb	ip, [ip, r5]
   28944:	ldrb	r0, [r0, ip]
   28948:	strb	r0, [lr, r2]
   2894c:	ble	288dc <__assert_fail@plt+0x16d38>
   28950:	ldr	r2, [r4]
   28954:	ldr	r0, [r4, #24]
   28958:	ldr	ip, [r4, #64]	; 0x40
   2895c:	add	r2, r2, r3
   28960:	ldrb	r0, [r2, r0]
   28964:	ldr	r2, [r4, #4]
   28968:	ldrb	r0, [ip, r0]
   2896c:	strb	r0, [r2, r3]
   28970:	add	r3, r3, #1
   28974:	cmp	r1, r3
   28978:	bne	28950 <__assert_fail@plt+0x16dac>
   2897c:	str	r1, [r4, #28]
   28980:	str	r1, [r4, #32]
   28984:	b	288e4 <__assert_fail@plt+0x16d40>
   28988:	mov	r0, r4
   2898c:	bl	2406c <__assert_fail@plt+0x124c8>
   28990:	b	288e4 <__assert_fail@plt+0x16d40>
   28994:	ldr	r5, [r4, #28]
   28998:	ldr	r7, [r4, #36]	; 0x24
   2899c:	ldr	r3, [r4, #48]	; 0x30
   289a0:	cmp	r7, r3
   289a4:	movge	r7, r3
   289a8:	cmp	r7, r5
   289ac:	ble	28a20 <__assert_fail@plt+0x16e7c>
   289b0:	bl	11934 <__ctype_toupper_loc@plt>
   289b4:	b	289d0 <__assert_fail@plt+0x16e2c>
   289b8:	ldr	r3, [r1, r3, lsl #2]
   289bc:	ldr	r2, [r4, #4]
   289c0:	strb	r3, [r2, r5]
   289c4:	add	r5, r5, #1
   289c8:	cmp	r7, r5
   289cc:	beq	28a0c <__assert_fail@plt+0x16e68>
   289d0:	ldr	r3, [r4]
   289d4:	ldr	r1, [r4, #24]
   289d8:	ldr	r2, [r4, #64]	; 0x40
   289dc:	add	r3, r3, r5
   289e0:	ldrb	r3, [r3, r1]
   289e4:	cmp	r2, #0
   289e8:	ldr	r1, [r0]
   289ec:	beq	289b8 <__assert_fail@plt+0x16e14>
   289f0:	ldrb	r2, [r2, r3]
   289f4:	ldr	r3, [r4, #4]
   289f8:	ldr	r2, [r1, r2, lsl #2]
   289fc:	strb	r2, [r3, r5]
   28a00:	add	r5, r5, #1
   28a04:	cmp	r7, r5
   28a08:	bne	289d0 <__assert_fail@plt+0x16e2c>
   28a0c:	str	r7, [r4, #28]
   28a10:	str	r7, [r4, #32]
   28a14:	b	288e4 <__assert_fail@plt+0x16d40>
   28a18:	mov	r6, #12
   28a1c:	b	288e4 <__assert_fail@plt+0x16d40>
   28a20:	mov	r7, r5
   28a24:	b	28a0c <__assert_fail@plt+0x16e68>
   28a28:	ldr	r3, [r0, #36]	; 0x24
   28a2c:	strd	r4, [sp, #-16]!
   28a30:	mov	r4, r0
   28a34:	mov	r5, r1
   28a38:	str	r6, [sp, #8]
   28a3c:	str	lr, [sp, #12]
   28a40:	ldr	r6, [r0, #104]	; 0x68
   28a44:	cmp	r3, r1
   28a48:	bgt	28a88 <__assert_fail@plt+0x16ee4>
   28a4c:	ldr	r2, [r0, #48]	; 0x30
   28a50:	cmp	r3, r2
   28a54:	bge	28a88 <__assert_fail@plt+0x16ee4>
   28a58:	add	r1, r5, #1
   28a5c:	mov	r0, r4
   28a60:	bl	28838 <__assert_fail@plt+0x16c94>
   28a64:	cmp	r0, #0
   28a68:	bne	28a78 <__assert_fail@plt+0x16ed4>
   28a6c:	cmp	r6, r5
   28a70:	movge	r0, #0
   28a74:	blt	28aa4 <__assert_fail@plt+0x16f00>
   28a78:	ldrd	r4, [sp]
   28a7c:	ldr	r6, [sp, #8]
   28a80:	add	sp, sp, #12
   28a84:	pop	{pc}		; (ldr pc, [sp], #4)
   28a88:	ldr	r3, [r4, #28]
   28a8c:	cmp	r3, r5
   28a90:	bgt	28a6c <__assert_fail@plt+0x16ec8>
   28a94:	ldr	r2, [r4, #48]	; 0x30
   28a98:	cmp	r3, r2
   28a9c:	bge	28a6c <__assert_fail@plt+0x16ec8>
   28aa0:	b	28a58 <__assert_fail@plt+0x16eb4>
   28aa4:	ldr	r3, [r4, #100]	; 0x64
   28aa8:	sub	r2, r5, r6
   28aac:	add	r0, r6, #1
   28ab0:	lsl	r2, r2, #2
   28ab4:	mov	r1, #0
   28ab8:	add	r0, r3, r0, lsl #2
   28abc:	bl	119e8 <memset@plt>
   28ac0:	str	r5, [r4, #104]	; 0x68
   28ac4:	mov	r0, #0
   28ac8:	ldrd	r4, [sp]
   28acc:	ldr	r6, [sp, #8]
   28ad0:	add	sp, sp, #12
   28ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   28ad8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   28adc:	mov	r5, r1
   28ae0:	mov	r4, r2
   28ae4:	strd	r6, [sp, #8]
   28ae8:	mov	r6, r0
   28aec:	strd	r8, [sp, #16]
   28af0:	mov	r8, r3
   28af4:	mov	r9, #1
   28af8:	str	sl, [sp, #24]
   28afc:	str	lr, [sp, #28]
   28b00:	sub	sp, sp, #8
   28b04:	ldr	r7, [sp, #40]	; 0x28
   28b08:	ldr	r1, [r5, #4]
   28b0c:	cmp	r1, #0
   28b10:	ble	28b88 <__assert_fail@plt+0x16fe4>
   28b14:	subs	r2, r1, #1
   28b18:	ldr	ip, [r5, #8]
   28b1c:	moveq	r0, r2
   28b20:	beq	28b7c <__assert_fail@plt+0x16fd8>
   28b24:	mov	r0, #0
   28b28:	add	r3, r0, r2
   28b2c:	lsr	r3, r3, #1
   28b30:	ldr	lr, [ip, r3, lsl #2]
   28b34:	cmp	lr, r4
   28b38:	blt	28c0c <__assert_fail@plt+0x17068>
   28b3c:	cmp	r0, r3
   28b40:	bcs	28b7c <__assert_fail@plt+0x16fd8>
   28b44:	add	r2, r0, r3
   28b48:	lsr	r2, r2, #1
   28b4c:	ldr	lr, [ip, r2, lsl #2]
   28b50:	cmp	r4, lr
   28b54:	ble	28b6c <__assert_fail@plt+0x16fc8>
   28b58:	b	28c00 <__assert_fail@plt+0x1705c>
   28b5c:	ldr	lr, [ip, r3, lsl #2]
   28b60:	cmp	r4, lr
   28b64:	bgt	28c0c <__assert_fail@plt+0x17068>
   28b68:	mov	r2, r3
   28b6c:	add	r3, r2, r0
   28b70:	cmp	r2, r0
   28b74:	lsr	r3, r3, #1
   28b78:	bhi	28b5c <__assert_fail@plt+0x16fb8>
   28b7c:	ldr	r3, [ip, r0, lsl #2]
   28b80:	cmp	r4, r3
   28b84:	beq	28c24 <__assert_fail@plt+0x17080>
   28b88:	ldr	r3, [r6]
   28b8c:	add	r2, r3, r4, lsl #3
   28b90:	ldrb	r2, [r2, #4]
   28b94:	cmp	r2, r7
   28b98:	bne	28ba8 <__assert_fail@plt+0x17004>
   28b9c:	ldr	r3, [r3, r4, lsl #3]
   28ba0:	cmp	r3, r8
   28ba4:	beq	28d1c <__assert_fail@plt+0x17178>
   28ba8:	ldr	r3, [r5]
   28bac:	cmp	r3, #0
   28bb0:	beq	28c44 <__assert_fail@plt+0x170a0>
   28bb4:	cmp	r1, #0
   28bb8:	ldr	sl, [r5, #8]
   28bbc:	bne	28c9c <__assert_fail@plt+0x170f8>
   28bc0:	str	r4, [sl]
   28bc4:	ldr	r3, [r5, #4]
   28bc8:	add	r3, r3, #1
   28bcc:	str	r3, [r5, #4]
   28bd0:	ldr	r3, [r6, #20]
   28bd4:	add	r4, r4, r4, lsl #1
   28bd8:	lsl	r4, r4, #2
   28bdc:	add	r3, r3, r4
   28be0:	ldr	r2, [r3, #4]
   28be4:	cmp	r2, #0
   28be8:	beq	28c24 <__assert_fail@plt+0x17080>
   28bec:	cmp	r2, #2
   28bf0:	ldr	r3, [r3, #8]
   28bf4:	beq	28c6c <__assert_fail@plt+0x170c8>
   28bf8:	ldr	r4, [r3]
   28bfc:	b	28b08 <__assert_fail@plt+0x16f64>
   28c00:	mov	r0, r2
   28c04:	mov	r2, r3
   28c08:	mov	r3, r0
   28c0c:	add	r0, r3, #1
   28c10:	cmp	r0, r2
   28c14:	bcc	28b28 <__assert_fail@plt+0x16f84>
   28c18:	ldr	r3, [ip, r0, lsl #2]
   28c1c:	cmp	r4, r3
   28c20:	bne	28b88 <__assert_fail@plt+0x16fe4>
   28c24:	mov	r0, #0
   28c28:	add	sp, sp, #8
   28c2c:	ldrd	r4, [sp]
   28c30:	ldrd	r6, [sp, #8]
   28c34:	ldrd	r8, [sp, #16]
   28c38:	ldr	sl, [sp, #24]
   28c3c:	add	sp, sp, #28
   28c40:	pop	{pc}		; (ldr pc, [sp], #4)
   28c44:	mov	r0, #4
   28c48:	str	r9, [r5]
   28c4c:	str	r9, [r5, #4]
   28c50:	bl	39028 <__assert_fail@plt+0x27484>
   28c54:	cmp	r0, #0
   28c58:	mov	r3, r0
   28c5c:	str	r0, [r5, #8]
   28c60:	beq	28d40 <__assert_fail@plt+0x1719c>
   28c64:	str	r4, [r0]
   28c68:	b	28bd0 <__assert_fail@plt+0x1702c>
   28c6c:	mov	r1, r5
   28c70:	mov	r0, r6
   28c74:	ldr	r2, [r3, #4]
   28c78:	mov	r3, r8
   28c7c:	str	r7, [sp]
   28c80:	bl	28ad8 <__assert_fail@plt+0x16f34>
   28c84:	cmp	r0, #0
   28c88:	bne	28c28 <__assert_fail@plt+0x17084>
   28c8c:	ldr	r3, [r6, #20]
   28c90:	add	r4, r3, r4
   28c94:	ldr	r3, [r4, #8]
   28c98:	b	28bf8 <__assert_fail@plt+0x17054>
   28c9c:	cmp	r1, r3
   28ca0:	beq	28d50 <__assert_fail@plt+0x171ac>
   28ca4:	ldr	r3, [sl]
   28ca8:	mov	r2, r1
   28cac:	cmp	r4, r3
   28cb0:	bge	28ce4 <__assert_fail@plt+0x17140>
   28cb4:	cmp	r1, #0
   28cb8:	ble	28cd0 <__assert_fail@plt+0x1712c>
   28cbc:	lsl	r2, r1, #2
   28cc0:	add	r0, sl, #4
   28cc4:	mov	r1, sl
   28cc8:	bl	11748 <memmove@plt>
   28ccc:	mov	r2, #0
   28cd0:	str	r4, [sl, r2, lsl #2]
   28cd4:	ldr	r3, [r5, #4]
   28cd8:	add	r3, r3, #1
   28cdc:	str	r3, [r5, #4]
   28ce0:	b	28bd0 <__assert_fail@plt+0x1702c>
   28ce4:	sub	r3, r1, #-1073741823	; 0xc0000001
   28ce8:	ldr	r0, [sl, r3, lsl #2]
   28cec:	lsl	r3, r3, #2
   28cf0:	cmp	r4, r0
   28cf4:	bge	28cd0 <__assert_fail@plt+0x1712c>
   28cf8:	add	r3, r3, #4
   28cfc:	add	r3, sl, r3
   28d00:	str	r0, [r3], #-4
   28d04:	sub	r1, r1, #1
   28d08:	ldr	r0, [r3, #-4]
   28d0c:	mov	r2, r1
   28d10:	cmp	r4, r0
   28d14:	blt	28d00 <__assert_fail@plt+0x1715c>
   28d18:	b	28cd0 <__assert_fail@plt+0x1712c>
   28d1c:	cmp	r7, #9
   28d20:	bne	28c24 <__assert_fail@plt+0x17080>
   28d24:	mov	r1, r4
   28d28:	mov	r0, r5
   28d2c:	bl	24b78 <__assert_fail@plt+0x12fd4>
   28d30:	cmp	r0, #0
   28d34:	bne	28c24 <__assert_fail@plt+0x17080>
   28d38:	mov	r0, #12
   28d3c:	b	28c28 <__assert_fail@plt+0x17084>
   28d40:	mov	r0, #12
   28d44:	str	r3, [r5]
   28d48:	str	r3, [r5, #4]
   28d4c:	b	28c28 <__assert_fail@plt+0x17084>
   28d50:	lsl	r3, r1, #1
   28d54:	mov	r0, sl
   28d58:	lsl	r1, r1, #3
   28d5c:	str	r3, [r5]
   28d60:	bl	39064 <__assert_fail@plt+0x274c0>
   28d64:	subs	sl, r0, #0
   28d68:	beq	28d38 <__assert_fail@plt+0x17194>
   28d6c:	str	sl, [r5, #8]
   28d70:	ldr	r1, [r5, #4]
   28d74:	b	28ca4 <__assert_fail@plt+0x17100>
   28d78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28d7c:	mov	r5, r2
   28d80:	mov	r4, r3
   28d84:	strd	r6, [sp, #8]
   28d88:	mov	r6, #0
   28d8c:	mov	r7, r0
   28d90:	strd	r8, [sp, #16]
   28d94:	mov	r8, r1
   28d98:	ldr	r1, [r1, #4]
   28d9c:	strd	sl, [sp, #24]
   28da0:	str	lr, [sp, #32]
   28da4:	sub	sp, sp, #28
   28da8:	lsl	r0, r1, #2
   28dac:	str	r1, [sp, #12]
   28db0:	str	r6, [sp, #16]
   28db4:	bl	39028 <__assert_fail@plt+0x27484>
   28db8:	cmp	r0, r6
   28dbc:	str	r0, [sp, #20]
   28dc0:	beq	28ec0 <__assert_fail@plt+0x1731c>
   28dc4:	ldr	r3, [r8, #4]
   28dc8:	add	r9, sp, #12
   28dcc:	cmp	r3, r6
   28dd0:	ble	28e68 <__assert_fail@plt+0x172c4>
   28dd4:	ldr	r3, [r8, #8]
   28dd8:	ldr	r1, [r7, #24]
   28ddc:	ldr	r2, [r3, r6, lsl #2]
   28de0:	add	r3, r2, r2, lsl #1
   28de4:	add	r1, r1, r3, lsl #2
   28de8:	ldr	fp, [r1, #4]
   28dec:	cmp	fp, #0
   28df0:	ble	28e88 <__assert_fail@plt+0x172e4>
   28df4:	ldr	ip, [r1, #8]
   28df8:	mov	r3, #0
   28dfc:	ldr	sl, [r7]
   28e00:	sub	ip, ip, #4
   28e04:	b	28e10 <__assert_fail@plt+0x1726c>
   28e08:	cmp	fp, r3
   28e0c:	beq	28e88 <__assert_fail@plt+0x172e4>
   28e10:	ldr	r0, [ip, #4]!
   28e14:	add	r3, r3, #1
   28e18:	add	lr, sl, r0, lsl #3
   28e1c:	ldrb	lr, [lr, #4]
   28e20:	cmp	r4, lr
   28e24:	bne	28e08 <__assert_fail@plt+0x17264>
   28e28:	ldr	lr, [sl, r0, lsl #3]
   28e2c:	cmp	r5, lr
   28e30:	bne	28e08 <__assert_fail@plt+0x17264>
   28e34:	cmn	r0, #1
   28e38:	beq	28e88 <__assert_fail@plt+0x172e4>
   28e3c:	mov	r3, r5
   28e40:	mov	r1, r9
   28e44:	str	r4, [sp]
   28e48:	mov	r0, r7
   28e4c:	bl	28ad8 <__assert_fail@plt+0x16f34>
   28e50:	subs	sl, r0, #0
   28e54:	bne	28e98 <__assert_fail@plt+0x172f4>
   28e58:	ldr	r3, [r8, #4]
   28e5c:	add	r6, r6, #1
   28e60:	cmp	r3, r6
   28e64:	bgt	28dd4 <__assert_fail@plt+0x17230>
   28e68:	ldr	r0, [r8, #8]
   28e6c:	mov	sl, #0
   28e70:	bl	19610 <__assert_fail@plt+0x7a6c>
   28e74:	ldr	r1, [r9, #8]
   28e78:	ldrd	r2, [sp, #12]
   28e7c:	strd	r2, [r8]
   28e80:	str	r1, [r8, #8]
   28e84:	b	28ea0 <__assert_fail@plt+0x172fc>
   28e88:	mov	r0, r9
   28e8c:	bl	24f74 <__assert_fail@plt+0x133d0>
   28e90:	subs	sl, r0, #0
   28e94:	beq	28e58 <__assert_fail@plt+0x172b4>
   28e98:	ldr	r0, [sp, #20]
   28e9c:	bl	19610 <__assert_fail@plt+0x7a6c>
   28ea0:	mov	r0, sl
   28ea4:	add	sp, sp, #28
   28ea8:	ldrd	r4, [sp]
   28eac:	ldrd	r6, [sp, #8]
   28eb0:	ldrd	r8, [sp, #16]
   28eb4:	ldrd	sl, [sp, #24]
   28eb8:	add	sp, sp, #32
   28ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   28ec0:	mov	sl, #12
   28ec4:	b	28ea0 <__assert_fail@plt+0x172fc>
   28ec8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28ecc:	mov	r4, #0
   28ed0:	strd	r6, [sp, #8]
   28ed4:	mov	r6, r0
   28ed8:	add	r0, r1, r1, lsl #1
   28edc:	strd	r8, [sp, #16]
   28ee0:	strd	sl, [sp, #24]
   28ee4:	str	lr, [sp, #32]
   28ee8:	sub	sp, sp, #44	; 0x2c
   28eec:	str	r1, [sp, #4]
   28ef0:	ldr	r1, [r6, #28]
   28ef4:	str	r3, [sp, #16]
   28ef8:	str	r4, [sp, #28]
   28efc:	str	r4, [sp, #32]
   28f00:	str	r4, [sp, #36]	; 0x24
   28f04:	add	r9, r1, r0, lsl #2
   28f08:	ldr	sl, [r9, #4]
   28f0c:	str	r9, [sp, #20]
   28f10:	cmp	sl, r4
   28f14:	ble	293f4 <__assert_fail@plt+0x17850>
   28f18:	str	r2, [sp, #8]
   28f1c:	ldr	r1, [r9, #8]
   28f20:	ldr	r3, [sp, #4]
   28f24:	ldr	r2, [r1, r4, lsl #2]
   28f28:	cmp	r3, r2
   28f2c:	beq	29168 <__assert_fail@plt+0x175c4>
   28f30:	ldr	r3, [r6]
   28f34:	add	r3, r3, r2, lsl #3
   28f38:	ldrb	r3, [r3, #4]
   28f3c:	tst	r3, #8
   28f40:	beq	29168 <__assert_fail@plt+0x175c4>
   28f44:	ldr	r3, [r6, #20]
   28f48:	add	r2, r2, r2, lsl #1
   28f4c:	lsl	r2, r2, #2
   28f50:	add	r3, r3, r2
   28f54:	ldmib	r3, {r0, r3}
   28f58:	cmp	r0, #1
   28f5c:	mvnle	r7, #0
   28f60:	ldrgt	r7, [r3, #4]
   28f64:	sub	lr, sl, #1
   28f68:	cmp	lr, #0
   28f6c:	mov	ip, lr
   28f70:	ldr	r5, [r3]
   28f74:	moveq	r8, lr
   28f78:	beq	28fd8 <__assert_fail@plt+0x17434>
   28f7c:	mov	r0, lr
   28f80:	mov	r8, #0
   28f84:	add	r3, r0, r8
   28f88:	lsr	r3, r3, #1
   28f8c:	ldr	fp, [r1, r3, lsl #2]
   28f90:	cmp	r5, fp
   28f94:	bgt	292fc <__assert_fail@plt+0x17758>
   28f98:	cmp	r3, r8
   28f9c:	bls	28fd8 <__assert_fail@plt+0x17434>
   28fa0:	add	r0, r3, r8
   28fa4:	lsr	r0, r0, #1
   28fa8:	ldr	fp, [r1, r0, lsl #2]
   28fac:	cmp	r5, fp
   28fb0:	ble	28fc8 <__assert_fail@plt+0x17424>
   28fb4:	b	292f0 <__assert_fail@plt+0x1774c>
   28fb8:	ldr	fp, [r1, r3, lsl #2]
   28fbc:	cmp	r5, fp
   28fc0:	bgt	292fc <__assert_fail@plt+0x17758>
   28fc4:	mov	r0, r3
   28fc8:	add	r3, r8, r0
   28fcc:	cmp	r8, r0
   28fd0:	lsr	r3, r3, #1
   28fd4:	bcc	28fb8 <__assert_fail@plt+0x17414>
   28fd8:	ldr	r3, [r1, r8, lsl #2]
   28fdc:	cmp	r5, r3
   28fe0:	beq	29070 <__assert_fail@plt+0x174cc>
   28fe4:	ldr	r3, [sp, #8]
   28fe8:	ldr	r0, [r3, #4]
   28fec:	cmp	r0, #0
   28ff0:	ble	29070 <__assert_fail@plt+0x174cc>
   28ff4:	subs	r0, r0, #1
   28ff8:	ldr	fp, [r3, #8]
   28ffc:	moveq	r8, r0
   29000:	beq	29064 <__assert_fail@plt+0x174c0>
   29004:	mov	r8, #0
   29008:	str	r2, [sp, #12]
   2900c:	add	r3, r0, r8
   29010:	lsr	r3, r3, #1
   29014:	ldr	r2, [fp, r3, lsl #2]
   29018:	cmp	r5, r2
   2901c:	bgt	2939c <__assert_fail@plt+0x177f8>
   29020:	cmp	r3, r8
   29024:	bls	29060 <__assert_fail@plt+0x174bc>
   29028:	add	r0, r3, r8
   2902c:	lsr	r0, r0, #1
   29030:	ldr	r2, [fp, r0, lsl #2]
   29034:	cmp	r5, r2
   29038:	ble	29050 <__assert_fail@plt+0x174ac>
   2903c:	b	29390 <__assert_fail@plt+0x177ec>
   29040:	ldr	r2, [fp, r3, lsl #2]
   29044:	cmp	r5, r2
   29048:	bgt	2939c <__assert_fail@plt+0x177f8>
   2904c:	mov	r0, r3
   29050:	add	r3, r8, r0
   29054:	cmp	r8, r0
   29058:	lsr	r3, r3, #1
   2905c:	bcc	29040 <__assert_fail@plt+0x1749c>
   29060:	ldr	r2, [sp, #12]
   29064:	ldr	r3, [fp, r8, lsl #2]
   29068:	cmp	r5, r3
   2906c:	beq	2936c <__assert_fail@plt+0x177c8>
   29070:	cmp	r7, #0
   29074:	ble	29168 <__assert_fail@plt+0x175c4>
   29078:	cmp	lr, #0
   2907c:	movne	lr, #0
   29080:	beq	290d8 <__assert_fail@plt+0x17534>
   29084:	add	r3, ip, lr
   29088:	lsr	r3, r3, #1
   2908c:	ldr	r0, [r1, r3, lsl #2]
   29090:	cmp	r0, r7
   29094:	blt	293b8 <__assert_fail@plt+0x17814>
   29098:	cmp	r3, lr
   2909c:	bls	290d8 <__assert_fail@plt+0x17534>
   290a0:	add	ip, r3, lr
   290a4:	lsr	ip, ip, #1
   290a8:	ldr	r0, [r1, ip, lsl #2]
   290ac:	cmp	r7, r0
   290b0:	ble	290c8 <__assert_fail@plt+0x17524>
   290b4:	b	293ac <__assert_fail@plt+0x17808>
   290b8:	ldr	r0, [r1, r3, lsl #2]
   290bc:	cmp	r0, r7
   290c0:	blt	293b8 <__assert_fail@plt+0x17814>
   290c4:	mov	ip, r3
   290c8:	add	r3, lr, ip
   290cc:	cmp	lr, ip
   290d0:	lsr	r3, r3, #1
   290d4:	bcc	290b8 <__assert_fail@plt+0x17514>
   290d8:	ldr	r3, [r1, lr, lsl #2]
   290dc:	cmp	r3, r7
   290e0:	beq	29168 <__assert_fail@plt+0x175c4>
   290e4:	ldr	r3, [sp, #8]
   290e8:	ldr	r1, [r3, #4]
   290ec:	cmp	r1, #0
   290f0:	ble	29168 <__assert_fail@plt+0x175c4>
   290f4:	subs	r1, r1, #1
   290f8:	ldr	ip, [r3, #8]
   290fc:	moveq	r0, r1
   29100:	beq	2915c <__assert_fail@plt+0x175b8>
   29104:	mov	r0, #0
   29108:	add	r3, r1, r0
   2910c:	lsr	r3, r3, #1
   29110:	ldr	lr, [ip, r3, lsl #2]
   29114:	cmp	lr, r7
   29118:	blt	293d4 <__assert_fail@plt+0x17830>
   2911c:	cmp	r3, r0
   29120:	bls	2915c <__assert_fail@plt+0x175b8>
   29124:	add	r1, r3, r0
   29128:	lsr	r1, r1, #1
   2912c:	ldr	lr, [ip, r1, lsl #2]
   29130:	cmp	r7, lr
   29134:	ble	2914c <__assert_fail@plt+0x175a8>
   29138:	b	293c8 <__assert_fail@plt+0x17824>
   2913c:	ldr	lr, [ip, r3, lsl #2]
   29140:	cmp	lr, r7
   29144:	blt	293d4 <__assert_fail@plt+0x17830>
   29148:	mov	r1, r3
   2914c:	add	r3, r0, r1
   29150:	cmp	r0, r1
   29154:	lsr	r3, r3, #1
   29158:	bcc	2913c <__assert_fail@plt+0x17598>
   2915c:	ldr	r3, [ip, r0, lsl #2]
   29160:	cmp	r3, r7
   29164:	beq	2936c <__assert_fail@plt+0x177c8>
   29168:	add	r4, r4, #1
   2916c:	cmp	r4, sl
   29170:	blt	28f1c <__assert_fail@plt+0x17378>
   29174:	cmp	sl, #0
   29178:	ldr	r5, [sp, #8]
   2917c:	ldr	r0, [sp, #36]	; 0x24
   29180:	ble	292ac <__assert_fail@plt+0x17708>
   29184:	mov	r1, #0
   29188:	ldr	r4, [sp, #20]
   2918c:	ldr	ip, [r4, #8]
   29190:	sub	ip, ip, #4
   29194:	ldr	r2, [sp, #32]
   29198:	ldr	lr, [ip, #4]!
   2919c:	cmp	r2, #0
   291a0:	ble	29214 <__assert_fail@plt+0x17670>
   291a4:	subs	r2, r2, #1
   291a8:	moveq	r7, r2
   291ac:	beq	29208 <__assert_fail@plt+0x17664>
   291b0:	mov	r7, #0
   291b4:	add	r3, r2, r7
   291b8:	lsr	r3, r3, #1
   291bc:	ldr	r6, [r0, r3, lsl #2]
   291c0:	cmp	r6, lr
   291c4:	blt	292e0 <__assert_fail@plt+0x1773c>
   291c8:	cmp	r3, r7
   291cc:	bls	29208 <__assert_fail@plt+0x17664>
   291d0:	add	r2, r3, r7
   291d4:	lsr	r2, r2, #1
   291d8:	ldr	r6, [r0, r2, lsl #2]
   291dc:	cmp	lr, r6
   291e0:	ble	291f8 <__assert_fail@plt+0x17654>
   291e4:	b	292d4 <__assert_fail@plt+0x17730>
   291e8:	ldr	r6, [r0, r3, lsl #2]
   291ec:	cmp	lr, r6
   291f0:	bgt	292e0 <__assert_fail@plt+0x1773c>
   291f4:	mov	r2, r3
   291f8:	add	r3, r7, r2
   291fc:	cmp	r7, r2
   29200:	lsr	r3, r3, #1
   29204:	bcc	291e8 <__assert_fail@plt+0x17644>
   29208:	ldr	r3, [r0, r7, lsl #2]
   2920c:	cmp	lr, r3
   29210:	beq	292a0 <__assert_fail@plt+0x176fc>
   29214:	ldr	r7, [r5, #4]
   29218:	cmp	r7, #0
   2921c:	ble	292a0 <__assert_fail@plt+0x176fc>
   29220:	sub	r8, r7, #1
   29224:	ldr	r3, [r5, #8]
   29228:	cmp	r8, #0
   2922c:	mov	r9, r8
   29230:	moveq	r6, r8
   29234:	beq	29290 <__assert_fail@plt+0x176ec>
   29238:	mov	r6, #0
   2923c:	add	r2, r9, r6
   29240:	lsr	r2, r2, #1
   29244:	ldr	fp, [r3, r2, lsl #2]
   29248:	cmp	lr, fp
   2924c:	bgt	2935c <__assert_fail@plt+0x177b8>
   29250:	cmp	r2, r6
   29254:	bls	29290 <__assert_fail@plt+0x176ec>
   29258:	add	r9, r2, r6
   2925c:	lsr	r9, r9, #1
   29260:	ldr	fp, [r3, r9, lsl #2]
   29264:	cmp	lr, fp
   29268:	ble	29280 <__assert_fail@plt+0x176dc>
   2926c:	b	29350 <__assert_fail@plt+0x177ac>
   29270:	ldr	fp, [r3, r2, lsl #2]
   29274:	cmp	lr, fp
   29278:	bgt	2935c <__assert_fail@plt+0x177b8>
   2927c:	mov	r9, r2
   29280:	add	r2, r6, r9
   29284:	cmp	r6, r9
   29288:	lsr	r2, r2, #1
   2928c:	bcc	29270 <__assert_fail@plt+0x176cc>
   29290:	ldr	r2, [r3, r6, lsl #2]
   29294:	add	r3, r3, r6, lsl #2
   29298:	cmp	lr, r2
   2929c:	beq	2930c <__assert_fail@plt+0x17768>
   292a0:	add	r1, r1, #1
   292a4:	cmp	r1, sl
   292a8:	blt	29194 <__assert_fail@plt+0x175f0>
   292ac:	mov	r7, #0
   292b0:	bl	19610 <__assert_fail@plt+0x7a6c>
   292b4:	mov	r0, r7
   292b8:	add	sp, sp, #44	; 0x2c
   292bc:	ldrd	r4, [sp]
   292c0:	ldrd	r6, [sp, #8]
   292c4:	ldrd	r8, [sp, #16]
   292c8:	ldrd	sl, [sp, #24]
   292cc:	add	sp, sp, #32
   292d0:	pop	{pc}		; (ldr pc, [sp], #4)
   292d4:	mov	r6, r2
   292d8:	mov	r2, r3
   292dc:	mov	r3, r6
   292e0:	add	r7, r3, #1
   292e4:	cmp	r7, r2
   292e8:	bcc	291b4 <__assert_fail@plt+0x17610>
   292ec:	b	29208 <__assert_fail@plt+0x17664>
   292f0:	mov	r8, r3
   292f4:	mov	r3, r0
   292f8:	mov	r0, r8
   292fc:	add	r8, r3, #1
   29300:	cmp	r0, r8
   29304:	bhi	28f84 <__assert_fail@plt+0x173e0>
   29308:	b	28fd8 <__assert_fail@plt+0x17434>
   2930c:	cmp	r6, r7
   29310:	mov	r2, r6
   29314:	movlt	r7, #0
   29318:	movge	r7, #1
   2931c:	orrs	lr, r7, r6, lsr #31
   29320:	bne	292a0 <__assert_fail@plt+0x176fc>
   29324:	cmp	r6, r8
   29328:	str	r8, [r5, #4]
   2932c:	bge	29348 <__assert_fail@plt+0x177a4>
   29330:	ldr	lr, [r3, #4]
   29334:	add	r2, r2, #1
   29338:	str	lr, [r3], #4
   2933c:	ldr	lr, [r5, #4]
   29340:	cmp	r2, lr
   29344:	blt	29330 <__assert_fail@plt+0x1778c>
   29348:	ldr	sl, [r4, #4]
   2934c:	b	292a0 <__assert_fail@plt+0x176fc>
   29350:	mov	r6, r2
   29354:	mov	r2, r9
   29358:	mov	r9, r6
   2935c:	add	r6, r2, #1
   29360:	cmp	r6, r9
   29364:	bcc	2923c <__assert_fail@plt+0x17698>
   29368:	b	29290 <__assert_fail@plt+0x176ec>
   2936c:	ldr	r3, [r6, #28]
   29370:	add	r0, sp, #28
   29374:	ldr	r1, [sp, #16]
   29378:	add	r2, r3, r2
   2937c:	bl	24d8c <__assert_fail@plt+0x131e8>
   29380:	cmp	r0, #0
   29384:	bne	293e4 <__assert_fail@plt+0x17840>
   29388:	ldr	sl, [r9, #4]
   2938c:	b	29168 <__assert_fail@plt+0x175c4>
   29390:	mov	r8, r0
   29394:	mov	r0, r3
   29398:	mov	r3, r8
   2939c:	add	r8, r3, #1
   293a0:	cmp	r8, r0
   293a4:	bcc	2900c <__assert_fail@plt+0x17468>
   293a8:	b	29060 <__assert_fail@plt+0x174bc>
   293ac:	mov	r0, ip
   293b0:	mov	ip, r3
   293b4:	mov	r3, r0
   293b8:	add	lr, r3, #1
   293bc:	cmp	lr, ip
   293c0:	bcc	29084 <__assert_fail@plt+0x174e0>
   293c4:	b	290d8 <__assert_fail@plt+0x17534>
   293c8:	mov	r0, r1
   293cc:	mov	r1, r3
   293d0:	mov	r3, r0
   293d4:	add	r0, r3, #1
   293d8:	cmp	r0, r1
   293dc:	bcc	29108 <__assert_fail@plt+0x17564>
   293e0:	b	2915c <__assert_fail@plt+0x175b8>
   293e4:	mov	r7, r0
   293e8:	ldr	r0, [sp, #36]	; 0x24
   293ec:	bl	19610 <__assert_fail@plt+0x7a6c>
   293f0:	b	292b4 <__assert_fail@plt+0x17710>
   293f4:	mov	r0, r4
   293f8:	b	292ac <__assert_fail@plt+0x17708>
   293fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29400:	mov	r5, r2
   29404:	ldr	r2, [r1, #20]
   29408:	strd	r6, [sp, #8]
   2940c:	mov	r7, r1
   29410:	strd	r8, [sp, #16]
   29414:	add	r9, r5, r5, lsl #1
   29418:	strd	sl, [sp, #24]
   2941c:	lsl	r9, r9, #2
   29420:	str	lr, [sp, #32]
   29424:	sub	sp, sp, #44	; 0x2c
   29428:	add	r2, r2, r9
   2942c:	str	r0, [sp, #16]
   29430:	ldr	r2, [r2, #4]
   29434:	str	r3, [sp, #20]
   29438:	add	r3, r2, #1
   2943c:	lsl	r0, r3, #2
   29440:	str	r3, [sp, #8]
   29444:	bl	39028 <__assert_fail@plt+0x27484>
   29448:	subs	r4, r0, #0
   2944c:	beq	29768 <__assert_fail@plt+0x17bc4>
   29450:	ldr	ip, [r7]
   29454:	lsl	r6, r5, #3
   29458:	mov	r3, #65280	; 0xff00
   2945c:	movt	r3, #3
   29460:	str	r5, [r4]
   29464:	mvn	r8, #0
   29468:	ldr	r1, [r7, #24]
   2946c:	add	r0, ip, r6
   29470:	ldr	lr, [r0, #4]
   29474:	add	r2, r1, r9
   29478:	str	r8, [r2, #4]
   2947c:	and	r3, r3, lr
   29480:	cmp	r3, #0
   29484:	beq	294b4 <__assert_fail@plt+0x17910>
   29488:	ldr	r3, [r7, #20]
   2948c:	add	r3, r3, r9
   29490:	ldr	r8, [r3, #4]
   29494:	cmp	r8, #0
   29498:	beq	2972c <__assert_fail@plt+0x17b88>
   2949c:	ldr	r3, [r3, #8]
   294a0:	ldr	r3, [r3]
   294a4:	add	ip, ip, r3, lsl #3
   294a8:	ldrb	r3, [ip, #6]
   294ac:	tst	r3, #4
   294b0:	beq	29734 <__assert_fail@plt+0x17b90>
   294b4:	ldrb	r3, [r0, #4]
   294b8:	tst	r3, #8
   294bc:	beq	29658 <__assert_fail@plt+0x17ab4>
   294c0:	ldr	ip, [r7, #20]
   294c4:	add	r3, ip, r9
   294c8:	ldr	r2, [r3, #4]
   294cc:	cmp	r2, #0
   294d0:	ble	29658 <__assert_fail@plt+0x17ab4>
   294d4:	mov	r2, #0
   294d8:	mov	sl, #1
   294dc:	mov	r8, r2
   294e0:	str	r2, [sp, #12]
   294e4:	ldr	r3, [r3, #8]
   294e8:	ldr	r2, [r3, r8, lsl #2]
   294ec:	add	r6, r2, r2, lsl #1
   294f0:	lsl	r6, r6, #2
   294f4:	add	r0, r1, r6
   294f8:	ldr	r3, [r0, #4]
   294fc:	cmn	r3, #1
   29500:	moveq	r3, #1
   29504:	streq	r3, [sp, #12]
   29508:	beq	29620 <__assert_fail@plt+0x17a7c>
   2950c:	cmp	r3, #0
   29510:	beq	296c0 <__assert_fail@plt+0x17b1c>
   29514:	ldrd	r2, [r0]
   29518:	strd	r2, [sp, #28]
   2951c:	ldr	r3, [r0, #8]
   29520:	str	r3, [sp, #36]	; 0x24
   29524:	ldr	r2, [sp, #32]
   29528:	cmp	r2, #0
   2952c:	mov	r3, r2
   29530:	beq	29608 <__assert_fail@plt+0x17a64>
   29534:	ldr	r1, [sp, #8]
   29538:	add	fp, sl, r2, lsl #1
   2953c:	cmp	r1, fp
   29540:	blt	296f4 <__assert_fail@plt+0x17b50>
   29544:	cmp	sl, #0
   29548:	beq	29770 <__assert_fail@plt+0x17bcc>
   2954c:	sub	r2, r2, #1
   29550:	sub	r5, sl, #1
   29554:	ldr	r1, [sp, #36]	; 0x24
   29558:	cmp	r2, #0
   2955c:	cmpge	r5, #0
   29560:	mvn	r0, r2
   29564:	blt	295b0 <__assert_fail@plt+0x17a0c>
   29568:	mov	r3, r5
   2956c:	ldr	lr, [r4, r3, lsl #2]
   29570:	ldr	ip, [r1, r2, lsl #2]
   29574:	cmp	lr, ip
   29578:	subeq	r2, r2, #1
   2957c:	subeq	r3, r3, #1
   29580:	mvneq	r0, r2
   29584:	beq	295a0 <__assert_fail@plt+0x179fc>
   29588:	subge	r3, r3, #1
   2958c:	bge	295a0 <__assert_fail@plt+0x179fc>
   29590:	sub	r2, r2, #1
   29594:	sub	fp, fp, #1
   29598:	mvn	r0, r2
   2959c:	str	ip, [r4, fp, lsl #2]
   295a0:	mvn	ip, r3
   295a4:	lsr	ip, ip, #31
   295a8:	ands	ip, ip, r0, lsr #31
   295ac:	bne	2956c <__assert_fail@plt+0x179c8>
   295b0:	cmp	r2, #0
   295b4:	blt	295cc <__assert_fail@plt+0x17a28>
   295b8:	add	r2, r2, #1
   295bc:	sub	fp, fp, r2
   295c0:	lsl	r2, r2, #2
   295c4:	add	r0, r4, fp, lsl #2
   295c8:	bl	11784 <memcpy@plt>
   295cc:	ldr	r3, [sp, #32]
   295d0:	add	r3, sl, r3, lsl #1
   295d4:	subs	r2, r3, fp
   295d8:	sub	r3, r3, #1
   295dc:	beq	29608 <__assert_fail@plt+0x17a64>
   295e0:	add	sl, sl, r2
   295e4:	ldr	ip, [r4, r3, lsl #2]
   295e8:	add	r1, r5, r2
   295ec:	ldr	r0, [r4, r5, lsl #2]
   295f0:	cmp	ip, r0
   295f4:	ble	296a0 <__assert_fail@plt+0x17afc>
   295f8:	subs	r2, r2, #1
   295fc:	sub	r3, r3, #1
   29600:	str	ip, [r4, r1, lsl #2]
   29604:	bne	295e4 <__assert_fail@plt+0x17a40>
   29608:	ldr	r1, [r7, #24]
   2960c:	add	r6, r1, r6
   29610:	ldr	r3, [r6, #4]
   29614:	cmp	r3, #0
   29618:	beq	296d8 <__assert_fail@plt+0x17b34>
   2961c:	ldr	ip, [r7, #20]
   29620:	add	r3, ip, r9
   29624:	add	r8, r8, #1
   29628:	ldr	r2, [r3, #4]
   2962c:	cmp	r2, r8
   29630:	bgt	294e4 <__assert_fail@plt+0x17940>
   29634:	ldr	r0, [sp, #12]
   29638:	add	r2, r1, r9
   2963c:	ldr	r3, [sp, #20]
   29640:	eor	r3, r3, #1
   29644:	tst	r0, r3
   29648:	beq	29660 <__assert_fail@plt+0x17abc>
   2964c:	mov	r3, #0
   29650:	str	r3, [r2, #4]
   29654:	b	29670 <__assert_fail@plt+0x17acc>
   29658:	mov	sl, #1
   2965c:	add	r2, r1, r9
   29660:	ldr	r3, [sp, #8]
   29664:	str	r3, [r1, r9]
   29668:	str	sl, [r2, #4]
   2966c:	str	r4, [r2, #8]
   29670:	ldr	r2, [sp, #8]
   29674:	mov	r0, #0
   29678:	ldr	r3, [sp, #16]
   2967c:	stm	r3, {r2, sl}
   29680:	str	r4, [r3, #8]
   29684:	add	sp, sp, #44	; 0x2c
   29688:	ldrd	r4, [sp]
   2968c:	ldrd	r6, [sp, #8]
   29690:	ldrd	r8, [sp, #16]
   29694:	ldrd	sl, [sp, #24]
   29698:	add	sp, sp, #32
   2969c:	pop	{pc}		; (ldr pc, [sp], #4)
   296a0:	subs	r5, r5, #1
   296a4:	str	r0, [r4, r1, lsl #2]
   296a8:	bpl	295e4 <__assert_fail@plt+0x17a40>
   296ac:	lsl	r2, r2, #2
   296b0:	mov	r0, r4
   296b4:	add	r1, r4, fp, lsl #2
   296b8:	bl	11784 <memcpy@plt>
   296bc:	b	29608 <__assert_fail@plt+0x17a64>
   296c0:	mov	r1, r7
   296c4:	add	r0, sp, #28
   296c8:	bl	293fc <__assert_fail@plt+0x17858>
   296cc:	cmp	r0, #0
   296d0:	beq	29524 <__assert_fail@plt+0x17980>
   296d4:	b	29684 <__assert_fail@plt+0x17ae0>
   296d8:	mov	r3, #1
   296dc:	ldr	r0, [sp, #36]	; 0x24
   296e0:	str	r3, [sp, #12]
   296e4:	bl	19610 <__assert_fail@plt+0x7a6c>
   296e8:	ldr	ip, [r7, #20]
   296ec:	ldr	r1, [r7, #24]
   296f0:	b	29620 <__assert_fail@plt+0x17a7c>
   296f4:	add	r2, r1, r2
   296f8:	mov	r0, r4
   296fc:	lsl	r3, r2, #1
   29700:	lsl	r1, r2, #3
   29704:	str	r3, [sp, #8]
   29708:	bl	39064 <__assert_fail@plt+0x274c0>
   2970c:	subs	r4, r0, #0
   29710:	beq	29768 <__assert_fail@plt+0x17bc4>
   29714:	cmp	sl, #0
   29718:	ldreq	r3, [sp, #32]
   2971c:	beq	29770 <__assert_fail@plt+0x17bcc>
   29720:	ldr	r2, [sp, #32]
   29724:	add	fp, sl, r2, lsl #1
   29728:	b	2954c <__assert_fail@plt+0x179a8>
   2972c:	mov	sl, #1
   29730:	b	29660 <__assert_fail@plt+0x17abc>
   29734:	ubfx	lr, lr, #8, #10
   29738:	mov	r3, r5
   2973c:	mov	r2, r5
   29740:	mov	r1, r5
   29744:	mov	r0, r7
   29748:	str	lr, [sp]
   2974c:	bl	2844c <__assert_fail@plt+0x168a8>
   29750:	cmp	r0, #0
   29754:	bne	29684 <__assert_fail@plt+0x17ae0>
   29758:	ldr	r0, [r7]
   2975c:	ldr	r1, [r7, #24]
   29760:	add	r0, r0, r6
   29764:	b	294b4 <__assert_fail@plt+0x17910>
   29768:	mov	r0, #12
   2976c:	b	29684 <__assert_fail@plt+0x17ae0>
   29770:	mov	r0, r4
   29774:	lsl	r2, r3, #2
   29778:	ldr	r1, [sp, #36]	; 0x24
   2977c:	mov	sl, r3
   29780:	bl	11784 <memcpy@plt>
   29784:	b	29608 <__assert_fail@plt+0x17a64>
   29788:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2978c:	mov	r3, #0
   29790:	strd	r6, [sp, #8]
   29794:	strd	r8, [sp, #16]
   29798:	ldr	r8, [r2, #4]
   2979c:	strd	sl, [sp, #24]
   297a0:	str	lr, [sp, #32]
   297a4:	sub	sp, sp, #4
   297a8:	str	r3, [r0]
   297ac:	cmp	r8, r3
   297b0:	beq	29a40 <__assert_fail@plt+0x17e9c>
   297b4:	mov	r5, r8
   297b8:	ble	297d4 <__assert_fail@plt+0x17c30>
   297bc:	ldr	r3, [r2, #8]
   297c0:	add	lr, r3, r8, lsl #2
   297c4:	ldr	ip, [r3], #4
   297c8:	cmp	r3, lr
   297cc:	add	r5, r5, ip
   297d0:	bne	297c4 <__assert_fail@plt+0x17c20>
   297d4:	ldr	ip, [r1, #32]
   297d8:	ldr	r3, [r1, #68]	; 0x44
   297dc:	and	r3, r3, r5
   297e0:	add	r3, r3, r3, lsl #1
   297e4:	lsl	r3, r3, #2
   297e8:	ldr	r9, [ip, r3]
   297ec:	add	r3, ip, r3
   297f0:	cmp	r9, #0
   297f4:	ble	2983c <__assert_fail@plt+0x17c98>
   297f8:	ldr	lr, [r3, #8]
   297fc:	mov	ip, #0
   29800:	sub	lr, lr, #4
   29804:	b	29814 <__assert_fail@plt+0x17c70>
   29808:	add	ip, ip, #1
   2980c:	cmp	ip, r9
   29810:	beq	2983c <__assert_fail@plt+0x17c98>
   29814:	ldr	r4, [lr, #4]!
   29818:	ldr	r3, [r4]
   2981c:	cmp	r3, r5
   29820:	bne	29808 <__assert_fail@plt+0x17c64>
   29824:	ldr	r3, [r4, #8]
   29828:	cmp	r8, r3
   2982c:	beq	29968 <__assert_fail@plt+0x17dc4>
   29830:	add	ip, ip, #1
   29834:	cmp	ip, r9
   29838:	bne	29814 <__assert_fail@plt+0x17c70>
   2983c:	mov	r6, r1
   29840:	mov	r7, r0
   29844:	mov	r1, #1
   29848:	mov	r0, #56	; 0x38
   2984c:	mov	r9, r2
   29850:	bl	38fb4 <__assert_fail@plt+0x27410>
   29854:	subs	r4, r0, #0
   29858:	beq	29a08 <__assert_fail@plt+0x17e64>
   2985c:	ldr	r3, [r9, #4]
   29860:	add	r8, r4, #4
   29864:	cmp	r3, #0
   29868:	str	r3, [r4, #8]
   2986c:	ble	29990 <__assert_fail@plt+0x17dec>
   29870:	lsl	r0, r3, #2
   29874:	str	r3, [r4, #4]
   29878:	bl	39028 <__assert_fail@plt+0x27484>
   2987c:	cmp	r0, #0
   29880:	mov	r3, r0
   29884:	str	r0, [r4, #12]
   29888:	beq	29a48 <__assert_fail@plt+0x17ea4>
   2988c:	ldr	sl, [r9, #4]
   29890:	ldr	r1, [r9, #8]
   29894:	lsl	fp, sl, #2
   29898:	mov	r2, fp
   2989c:	bl	11784 <memcpy@plt>
   298a0:	cmp	sl, #0
   298a4:	str	r8, [r4, #40]	; 0x28
   298a8:	ble	299a4 <__assert_fail@plt+0x17e00>
   298ac:	ldr	r1, [r9, #8]
   298b0:	mov	sl, #65280	; 0xff00
   298b4:	movt	sl, #3
   298b8:	ldr	r9, [r6]
   298bc:	add	lr, fp, r1
   298c0:	b	29904 <__assert_fail@plt+0x17d60>
   298c4:	ldrb	r2, [r4, #52]	; 0x34
   298c8:	cmp	r0, #2
   298cc:	ldrb	fp, [r3, #6]
   298d0:	ubfx	ip, r2, #5, #1
   298d4:	ubfx	fp, fp, #4, #1
   298d8:	orr	ip, ip, fp
   298dc:	bfi	r2, ip, #5, #1
   298e0:	strb	r2, [r4, #52]	; 0x34
   298e4:	beq	29a18 <__assert_fail@plt+0x17e74>
   298e8:	cmp	r0, #4
   298ec:	bne	29a28 <__assert_fail@plt+0x17e84>
   298f0:	ldrb	r3, [r4, #52]	; 0x34
   298f4:	orr	r3, r3, #64	; 0x40
   298f8:	strb	r3, [r4, #52]	; 0x34
   298fc:	cmp	lr, r1
   29900:	beq	299a4 <__assert_fail@plt+0x17e00>
   29904:	ldr	r3, [r1], #4
   29908:	add	r3, r9, r3, lsl #3
   2990c:	ldrb	r0, [r3, #4]
   29910:	cmp	r0, #1
   29914:	bne	298c4 <__assert_fail@plt+0x17d20>
   29918:	ldr	r2, [r3, #4]
   2991c:	tst	sl, r2
   29920:	beq	298fc <__assert_fail@plt+0x17d58>
   29924:	ldrb	r2, [r3, #6]
   29928:	ldrb	r3, [r4, #52]	; 0x34
   2992c:	ubfx	r0, r2, #4, #1
   29930:	ubfx	r2, r3, #5, #1
   29934:	orr	r2, r2, r0
   29938:	bfi	r3, r2, #5, #1
   2993c:	strb	r3, [r4, #52]	; 0x34
   29940:	ldrb	r3, [r4, #52]	; 0x34
   29944:	orr	r3, r3, #128	; 0x80
   29948:	strb	r3, [r4, #52]	; 0x34
   2994c:	b	298fc <__assert_fail@plt+0x17d58>
   29950:	ldr	r6, [r2, #8]
   29954:	ldr	r7, [r4, #12]
   29958:	ldr	r6, [r6, r3, lsl #2]
   2995c:	ldr	r7, [r7, r3, lsl #2]
   29960:	cmp	r7, r6
   29964:	bne	29808 <__assert_fail@plt+0x17c64>
   29968:	subs	r3, r3, #1
   2996c:	bpl	29950 <__assert_fail@plt+0x17dac>
   29970:	mov	r0, r4
   29974:	add	sp, sp, #4
   29978:	ldrd	r4, [sp]
   2997c:	ldrd	r6, [sp, #8]
   29980:	ldrd	r8, [sp, #16]
   29984:	ldrd	sl, [sp, #24]
   29988:	add	sp, sp, #32
   2998c:	pop	{pc}		; (ldr pc, [sp], #4)
   29990:	mov	r3, #0
   29994:	str	r3, [r4, #4]
   29998:	str	r3, [r8, #4]
   2999c:	str	r3, [r8, #8]
   299a0:	str	r8, [r4, #40]	; 0x28
   299a4:	mov	r2, r5
   299a8:	mov	r0, r6
   299ac:	mov	r1, r4
   299b0:	bl	23f1c <__assert_fail@plt+0x12378>
   299b4:	cmp	r0, #0
   299b8:	beq	29970 <__assert_fail@plt+0x17dcc>
   299bc:	ldr	r0, [r4, #24]
   299c0:	bl	19610 <__assert_fail@plt+0x7a6c>
   299c4:	ldr	r0, [r4, #36]	; 0x24
   299c8:	bl	19610 <__assert_fail@plt+0x7a6c>
   299cc:	ldr	r3, [r4, #40]	; 0x28
   299d0:	cmp	r8, r3
   299d4:	beq	299e8 <__assert_fail@plt+0x17e44>
   299d8:	ldr	r0, [r3, #8]
   299dc:	bl	19610 <__assert_fail@plt+0x7a6c>
   299e0:	ldr	r0, [r4, #40]	; 0x28
   299e4:	bl	19610 <__assert_fail@plt+0x7a6c>
   299e8:	ldr	r0, [r4, #12]
   299ec:	bl	19610 <__assert_fail@plt+0x7a6c>
   299f0:	ldr	r0, [r4, #48]	; 0x30
   299f4:	bl	19610 <__assert_fail@plt+0x7a6c>
   299f8:	ldr	r0, [r4, #44]	; 0x2c
   299fc:	bl	19610 <__assert_fail@plt+0x7a6c>
   29a00:	mov	r0, r4
   29a04:	bl	19610 <__assert_fail@plt+0x7a6c>
   29a08:	mov	r3, #12
   29a0c:	mov	r4, #0
   29a10:	str	r3, [r7]
   29a14:	b	29970 <__assert_fail@plt+0x17dcc>
   29a18:	uxtb	r3, r2
   29a1c:	orr	r3, r3, #16
   29a20:	strb	r3, [r4, #52]	; 0x34
   29a24:	b	298fc <__assert_fail@plt+0x17d58>
   29a28:	cmp	r0, #12
   29a2c:	beq	29940 <__assert_fail@plt+0x17d9c>
   29a30:	ldr	r3, [r3, #4]
   29a34:	tst	sl, r3
   29a38:	beq	298fc <__assert_fail@plt+0x17d58>
   29a3c:	b	29940 <__assert_fail@plt+0x17d9c>
   29a40:	mov	r4, r8
   29a44:	b	29970 <__assert_fail@plt+0x17dcc>
   29a48:	mov	r0, r4
   29a4c:	str	r3, [r4, #4]
   29a50:	str	r3, [r4, #8]
   29a54:	bl	19610 <__assert_fail@plt+0x7a6c>
   29a58:	b	29a08 <__assert_fail@plt+0x17e64>
   29a5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29a60:	strd	r6, [sp, #8]
   29a64:	ldr	r6, [r0, #108]	; 0x6c
   29a68:	strd	r8, [sp, #16]
   29a6c:	strd	sl, [sp, #24]
   29a70:	str	lr, [sp, #32]
   29a74:	sub	sp, sp, #44	; 0x2c
   29a78:	cmp	r6, #0
   29a7c:	ble	29bdc <__assert_fail@plt+0x18038>
   29a80:	ldr	r4, [r0, #116]	; 0x74
   29a84:	mov	r5, r6
   29a88:	mov	r9, #0
   29a8c:	add	ip, r5, r9
   29a90:	asr	ip, ip, #1
   29a94:	add	lr, ip, ip, lsl #1
   29a98:	add	lr, r4, lr, lsl #3
   29a9c:	ldr	lr, [lr, #4]
   29aa0:	cmp	lr, r2
   29aa4:	blt	29f00 <__assert_fail@plt+0x1835c>
   29aa8:	cmp	ip, r9
   29aac:	ble	29af8 <__assert_fail@plt+0x17f54>
   29ab0:	add	r5, ip, r9
   29ab4:	asr	r5, r5, #1
   29ab8:	add	lr, r5, r5, lsl #1
   29abc:	add	lr, r4, lr, lsl #3
   29ac0:	ldr	lr, [lr, #4]
   29ac4:	cmp	r2, lr
   29ac8:	ble	29ae8 <__assert_fail@plt+0x17f44>
   29acc:	b	29ef4 <__assert_fail@plt+0x18350>
   29ad0:	add	lr, ip, ip, lsl #1
   29ad4:	add	lr, r4, lr, lsl #3
   29ad8:	ldr	lr, [lr, #4]
   29adc:	cmp	r2, lr
   29ae0:	bgt	29f00 <__assert_fail@plt+0x1835c>
   29ae4:	mov	r5, ip
   29ae8:	add	ip, r9, r5
   29aec:	cmp	r9, r5
   29af0:	asr	ip, ip, #1
   29af4:	blt	29ad0 <__assert_fail@plt+0x17f2c>
   29af8:	cmp	r6, r9
   29afc:	ble	29bdc <__assert_fail@plt+0x18038>
   29b00:	add	r9, r9, r9, lsl #1
   29b04:	lsl	ip, r9, #3
   29b08:	add	lr, r4, ip
   29b0c:	ldr	lr, [lr, #4]
   29b10:	cmp	r2, lr
   29b14:	bne	29bdc <__assert_fail@plt+0x18038>
   29b18:	ldr	r9, [r0, #84]	; 0x54
   29b1c:	mov	r6, r2
   29b20:	mov	r7, r1
   29b24:	mov	r8, r0
   29b28:	str	r3, [sp, #12]
   29b2c:	add	r3, ip, #24
   29b30:	str	r3, [sp, #8]
   29b34:	ldr	r3, [sp, #8]
   29b38:	add	r4, r4, r3
   29b3c:	ldr	lr, [r7, #4]
   29b40:	cmp	lr, #0
   29b44:	ble	29bcc <__assert_fail@plt+0x18028>
   29b48:	sub	lr, lr, #1
   29b4c:	ldr	ip, [r4, #-24]	; 0xffffffe8
   29b50:	cmp	lr, #0
   29b54:	mov	r1, lr
   29b58:	moveq	r5, lr
   29b5c:	ldr	r2, [r7, #8]
   29b60:	beq	29bc0 <__assert_fail@plt+0x1801c>
   29b64:	mov	r0, lr
   29b68:	mov	r5, #0
   29b6c:	add	r3, r0, r5
   29b70:	lsr	r3, r3, #1
   29b74:	ldr	sl, [r2, r3, lsl #2]
   29b78:	cmp	ip, sl
   29b7c:	bgt	29c08 <__assert_fail@plt+0x18064>
   29b80:	cmp	r3, r5
   29b84:	bls	29bc0 <__assert_fail@plt+0x1801c>
   29b88:	add	r0, r3, r5
   29b8c:	lsr	r0, r0, #1
   29b90:	ldr	sl, [r2, r0, lsl #2]
   29b94:	cmp	ip, sl
   29b98:	ble	29bb0 <__assert_fail@plt+0x1800c>
   29b9c:	b	29bfc <__assert_fail@plt+0x18058>
   29ba0:	ldr	sl, [r2, r3, lsl #2]
   29ba4:	cmp	ip, sl
   29ba8:	bgt	29c08 <__assert_fail@plt+0x18064>
   29bac:	mov	r0, r3
   29bb0:	add	r3, r5, r0
   29bb4:	cmp	r5, r0
   29bb8:	lsr	r3, r3, #1
   29bbc:	bcc	29ba0 <__assert_fail@plt+0x17ffc>
   29bc0:	ldr	r3, [r2, r5, lsl #2]
   29bc4:	cmp	ip, r3
   29bc8:	beq	29c20 <__assert_fail@plt+0x1807c>
   29bcc:	add	r4, r4, #24
   29bd0:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   29bd4:	cmp	r3, #0
   29bd8:	bne	29b3c <__assert_fail@plt+0x17f98>
   29bdc:	mov	r0, #0
   29be0:	add	sp, sp, #44	; 0x2c
   29be4:	ldrd	r4, [sp]
   29be8:	ldrd	r6, [sp, #8]
   29bec:	ldrd	r8, [sp, #16]
   29bf0:	ldrd	sl, [sp, #24]
   29bf4:	add	sp, sp, #32
   29bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   29bfc:	mov	r5, r0
   29c00:	mov	r0, r3
   29c04:	mov	r3, r5
   29c08:	add	r5, r3, #1
   29c0c:	cmp	r5, r0
   29c10:	bcc	29b6c <__assert_fail@plt+0x17fc8>
   29c14:	ldr	r3, [r2, r5, lsl #2]
   29c18:	cmp	ip, r3
   29c1c:	bne	29bcc <__assert_fail@plt+0x18028>
   29c20:	ldr	r3, [r4, #-16]
   29c24:	ldr	r5, [r4, #-12]
   29c28:	add	r5, r6, r5
   29c2c:	sub	r5, r5, r3
   29c30:	cmp	r6, r5
   29c34:	beq	29d98 <__assert_fail@plt+0x181f4>
   29c38:	ldr	r2, [r8, #100]	; 0x64
   29c3c:	ldr	r3, [r9, #12]
   29c40:	ldr	fp, [r2, r5, lsl #2]
   29c44:	ldr	sl, [r3, ip, lsl #2]
   29c48:	cmp	fp, #0
   29c4c:	beq	29eac <__assert_fail@plt+0x18308>
   29c50:	ldr	ip, [fp, #8]
   29c54:	cmp	ip, #0
   29c58:	ble	29edc <__assert_fail@plt+0x18338>
   29c5c:	subs	r2, ip, #1
   29c60:	ldr	r0, [fp, #12]
   29c64:	moveq	r1, r2
   29c68:	beq	29cc4 <__assert_fail@plt+0x18120>
   29c6c:	mov	r1, #0
   29c70:	add	r3, r2, r1
   29c74:	lsr	r3, r3, #1
   29c78:	ldr	lr, [r0, r3, lsl #2]
   29c7c:	cmp	lr, sl
   29c80:	blt	29d88 <__assert_fail@plt+0x181e4>
   29c84:	cmp	r3, r1
   29c88:	bls	29cc4 <__assert_fail@plt+0x18120>
   29c8c:	add	r2, r3, r1
   29c90:	lsr	r2, r2, #1
   29c94:	ldr	lr, [r0, r2, lsl #2]
   29c98:	cmp	sl, lr
   29c9c:	ble	29cb4 <__assert_fail@plt+0x18110>
   29ca0:	b	29d7c <__assert_fail@plt+0x181d8>
   29ca4:	ldr	lr, [r0, r3, lsl #2]
   29ca8:	cmp	sl, lr
   29cac:	bgt	29d88 <__assert_fail@plt+0x181e4>
   29cb0:	mov	r2, r3
   29cb4:	add	r3, r1, r2
   29cb8:	cmp	r1, r2
   29cbc:	lsr	r3, r3, #1
   29cc0:	bcc	29ca4 <__assert_fail@plt+0x18100>
   29cc4:	ldr	r3, [r0, r1, lsl #2]
   29cc8:	cmp	sl, r3
   29ccc:	beq	29bcc <__assert_fail@plt+0x18028>
   29cd0:	lsl	r0, ip, #2
   29cd4:	str	ip, [sp, #24]
   29cd8:	str	ip, [sp, #28]
   29cdc:	bl	39028 <__assert_fail@plt+0x27484>
   29ce0:	cmp	r0, #0
   29ce4:	str	r0, [sp, #32]
   29ce8:	beq	29f70 <__assert_fail@plt+0x183cc>
   29cec:	ldr	r2, [fp, #8]
   29cf0:	add	r3, sp, #24
   29cf4:	ldr	r1, [fp, #12]
   29cf8:	str	r3, [sp, #4]
   29cfc:	lsl	r2, r2, #2
   29d00:	bl	11784 <memcpy@plt>
   29d04:	ldr	r3, [sp, #4]
   29d08:	mov	r2, #0
   29d0c:	mov	r0, r3
   29d10:	mov	r1, sl
   29d14:	str	r3, [sp, #4]
   29d18:	str	r2, [sp, #20]
   29d1c:	bl	24b78 <__assert_fail@plt+0x12fd4>
   29d20:	eor	r0, r0, #1
   29d24:	ldr	r3, [sp, #4]
   29d28:	ldr	r2, [sp, #20]
   29d2c:	cmp	r2, #0
   29d30:	orrne	r0, r0, #1
   29d34:	tst	r0, #255	; 0xff
   29d38:	bne	29f10 <__assert_fail@plt+0x1836c>
   29d3c:	ldr	sl, [r8, #100]	; 0x64
   29d40:	mov	r2, r3
   29d44:	mov	r1, r9
   29d48:	add	r0, sp, #20
   29d4c:	bl	29788 <__assert_fail@plt+0x17be4>
   29d50:	str	r0, [sl, r5, lsl #2]
   29d54:	ldr	r0, [sp, #32]
   29d58:	bl	19610 <__assert_fail@plt+0x7a6c>
   29d5c:	ldr	r3, [r8, #100]	; 0x64
   29d60:	ldr	r3, [r3, r5, lsl #2]
   29d64:	cmp	r3, #0
   29d68:	bne	29bcc <__assert_fail@plt+0x18028>
   29d6c:	ldr	r0, [sp, #20]
   29d70:	cmp	r0, #0
   29d74:	beq	29bcc <__assert_fail@plt+0x18028>
   29d78:	b	29be0 <__assert_fail@plt+0x1803c>
   29d7c:	mov	r1, r3
   29d80:	mov	r3, r2
   29d84:	mov	r2, r1
   29d88:	add	r1, r3, #1
   29d8c:	cmp	r2, r1
   29d90:	bhi	29c70 <__assert_fail@plt+0x180cc>
   29d94:	b	29cc4 <__assert_fail@plt+0x18120>
   29d98:	ldr	r3, [r9, #20]
   29d9c:	add	ip, ip, ip, lsl #1
   29da0:	cmp	lr, #0
   29da4:	movne	lr, #0
   29da8:	add	ip, r3, ip, lsl #2
   29dac:	ldr	r3, [ip, #8]
   29db0:	ldr	r5, [r3]
   29db4:	beq	29e0c <__assert_fail@plt+0x18268>
   29db8:	add	r3, r1, lr
   29dbc:	lsr	r3, r3, #1
   29dc0:	ldr	r0, [r2, r3, lsl #2]
   29dc4:	cmp	r0, r5
   29dc8:	blt	29e9c <__assert_fail@plt+0x182f8>
   29dcc:	cmp	r3, lr
   29dd0:	bls	29e0c <__assert_fail@plt+0x18268>
   29dd4:	add	r1, r3, lr
   29dd8:	lsr	r1, r1, #1
   29ddc:	ldr	r0, [r2, r1, lsl #2]
   29de0:	cmp	r5, r0
   29de4:	ble	29dfc <__assert_fail@plt+0x18258>
   29de8:	b	29e90 <__assert_fail@plt+0x182ec>
   29dec:	ldr	r0, [r2, r3, lsl #2]
   29df0:	cmp	r5, r0
   29df4:	bgt	29e9c <__assert_fail@plt+0x182f8>
   29df8:	mov	r1, r3
   29dfc:	add	r3, lr, r1
   29e00:	cmp	lr, r1
   29e04:	lsr	r3, r3, #1
   29e08:	bcc	29dec <__assert_fail@plt+0x18248>
   29e0c:	ldr	r3, [r2, lr, lsl #2]
   29e10:	cmp	r5, r3
   29e14:	beq	29bcc <__assert_fail@plt+0x18028>
   29e18:	mov	r2, #1
   29e1c:	mov	r3, #1
   29e20:	mov	r0, #4
   29e24:	strd	r2, [sp, #24]
   29e28:	bl	39028 <__assert_fail@plt+0x27484>
   29e2c:	cmp	r0, #0
   29e30:	str	r0, [sp, #32]
   29e34:	beq	29f2c <__assert_fail@plt+0x18388>
   29e38:	mov	r2, #0
   29e3c:	ldr	r3, [sp, #80]	; 0x50
   29e40:	add	r4, sp, #24
   29e44:	mov	r1, r4
   29e48:	str	r5, [r0]
   29e4c:	mov	r0, r9
   29e50:	str	r2, [sp, #20]
   29e54:	ldr	r2, [sp, #12]
   29e58:	bl	28d78 <__assert_fail@plt+0x171d4>
   29e5c:	mov	r5, r0
   29e60:	mov	r1, r4
   29e64:	mov	r0, r7
   29e68:	bl	24f74 <__assert_fail@plt+0x133d0>
   29e6c:	mov	r4, r0
   29e70:	ldr	r0, [sp, #32]
   29e74:	bl	19610 <__assert_fail@plt+0x7a6c>
   29e78:	ldr	r0, [sp, #20]
   29e7c:	orr	r3, r5, r4
   29e80:	orrs	r3, r3, r0
   29e84:	bne	29f58 <__assert_fail@plt+0x183b4>
   29e88:	ldr	r4, [r8, #116]	; 0x74
   29e8c:	b	29b34 <__assert_fail@plt+0x17f90>
   29e90:	mov	r0, r3
   29e94:	mov	r3, r1
   29e98:	mov	r1, r0
   29e9c:	add	lr, r3, #1
   29ea0:	cmp	lr, r1
   29ea4:	bcc	29db8 <__assert_fail@plt+0x18214>
   29ea8:	b	29e0c <__assert_fail@plt+0x18268>
   29eac:	mov	r2, #1
   29eb0:	mov	r3, #1
   29eb4:	mov	r0, #4
   29eb8:	strd	r2, [sp, #24]
   29ebc:	bl	39028 <__assert_fail@plt+0x27484>
   29ec0:	cmp	r0, #0
   29ec4:	str	r0, [sp, #32]
   29ec8:	beq	29f24 <__assert_fail@plt+0x18380>
   29ecc:	add	r3, sp, #24
   29ed0:	str	sl, [r0]
   29ed4:	str	fp, [sp, #20]
   29ed8:	b	29d3c <__assert_fail@plt+0x18198>
   29edc:	mov	r2, #0
   29ee0:	add	r3, sp, #24
   29ee4:	str	r2, [sp, #24]
   29ee8:	str	r2, [r3, #4]
   29eec:	str	r2, [r3, #8]
   29ef0:	b	29d0c <__assert_fail@plt+0x18168>
   29ef4:	mov	lr, r5
   29ef8:	mov	r5, ip
   29efc:	mov	ip, lr
   29f00:	add	r9, ip, #1
   29f04:	cmp	r9, r5
   29f08:	blt	29a8c <__assert_fail@plt+0x17ee8>
   29f0c:	b	29af8 <__assert_fail@plt+0x17f54>
   29f10:	ldr	r0, [sp, #32]
   29f14:	bl	19610 <__assert_fail@plt+0x7a6c>
   29f18:	ldr	r0, [sp, #20]
   29f1c:	cmp	r0, #0
   29f20:	bne	29be0 <__assert_fail@plt+0x1803c>
   29f24:	mov	r0, #12
   29f28:	b	29be0 <__assert_fail@plt+0x1803c>
   29f2c:	mov	r2, #0
   29f30:	mov	r3, #0
   29f34:	mov	ip, #12
   29f38:	add	r4, sp, #24
   29f3c:	mov	r1, r4
   29f40:	mov	r0, r9
   29f44:	str	ip, [sp, #20]
   29f48:	strd	r2, [sp, #24]
   29f4c:	ldr	r2, [sp, #12]
   29f50:	ldr	r3, [sp, #80]	; 0x50
   29f54:	b	29e58 <__assert_fail@plt+0x182b4>
   29f58:	cmp	r0, #0
   29f5c:	bne	29be0 <__assert_fail@plt+0x1803c>
   29f60:	cmp	r5, #0
   29f64:	movne	r0, r5
   29f68:	moveq	r0, r4
   29f6c:	b	29be0 <__assert_fail@plt+0x1803c>
   29f70:	mov	r0, #0
   29f74:	mov	r1, #0
   29f78:	mov	r2, #12
   29f7c:	add	r3, sp, #24
   29f80:	strd	r0, [sp, #24]
   29f84:	b	29d0c <__assert_fail@plt+0x18168>
   29f88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29f8c:	mov	ip, #0
   29f90:	strd	r6, [sp, #8]
   29f94:	ldr	r6, [r2, #4]
   29f98:	strd	r8, [sp, #16]
   29f9c:	strd	sl, [sp, #24]
   29fa0:	str	lr, [sp, #32]
   29fa4:	sub	sp, sp, #20
   29fa8:	str	ip, [r0]
   29fac:	cmp	r6, ip
   29fb0:	moveq	r4, r6
   29fb4:	beq	2a22c <__assert_fail@plt+0x18688>
   29fb8:	add	r7, r3, r6
   29fbc:	ble	29fd8 <__assert_fail@plt+0x18434>
   29fc0:	ldr	ip, [r2, #8]
   29fc4:	add	r4, ip, r6, lsl #2
   29fc8:	ldr	lr, [ip], #4
   29fcc:	cmp	r4, ip
   29fd0:	add	r7, r7, lr
   29fd4:	bne	29fc8 <__assert_fail@plt+0x18424>
   29fd8:	ldr	lr, [r1, #32]
   29fdc:	ldr	ip, [r1, #68]	; 0x44
   29fe0:	and	ip, ip, r7
   29fe4:	add	ip, ip, ip, lsl #1
   29fe8:	lsl	ip, ip, #2
   29fec:	ldr	r8, [lr, ip]
   29ff0:	add	ip, lr, ip
   29ff4:	cmp	r8, #0
   29ff8:	ble	2a05c <__assert_fail@plt+0x184b8>
   29ffc:	ldr	lr, [ip, #8]
   2a000:	mov	ip, #0
   2a004:	sub	lr, lr, #4
   2a008:	b	2a018 <__assert_fail@plt+0x18474>
   2a00c:	add	ip, ip, #1
   2a010:	cmp	ip, r8
   2a014:	beq	2a05c <__assert_fail@plt+0x184b8>
   2a018:	ldr	r4, [lr, #4]!
   2a01c:	ldr	r5, [r4]
   2a020:	cmp	r5, r7
   2a024:	bne	2a00c <__assert_fail@plt+0x18468>
   2a028:	ldrb	r5, [r4, #52]	; 0x34
   2a02c:	and	r5, r5, #15
   2a030:	cmp	r5, r3
   2a034:	bne	2a00c <__assert_fail@plt+0x18468>
   2a038:	ldr	fp, [r4, #40]	; 0x28
   2a03c:	cmp	fp, #0
   2a040:	beq	2a00c <__assert_fail@plt+0x18468>
   2a044:	ldr	r5, [fp, #4]
   2a048:	cmp	r6, r5
   2a04c:	beq	2a264 <__assert_fail@plt+0x186c0>
   2a050:	add	ip, ip, #1
   2a054:	cmp	ip, r8
   2a058:	bne	2a018 <__assert_fail@plt+0x18474>
   2a05c:	mov	r9, r1
   2a060:	mov	r1, #1
   2a064:	str	r0, [sp, #8]
   2a068:	mov	r0, #56	; 0x38
   2a06c:	mov	sl, r3
   2a070:	mov	r6, r2
   2a074:	bl	38fb4 <__assert_fail@plt+0x27410>
   2a078:	subs	r4, r0, #0
   2a07c:	beq	2a37c <__assert_fail@plt+0x187d8>
   2a080:	ldr	r3, [r6, #4]
   2a084:	add	fp, r4, #4
   2a088:	cmp	r3, #0
   2a08c:	str	r3, [r4, #8]
   2a090:	ble	2a270 <__assert_fail@plt+0x186cc>
   2a094:	lsl	r0, r3, #2
   2a098:	str	r3, [r4, #4]
   2a09c:	bl	39028 <__assert_fail@plt+0x27484>
   2a0a0:	cmp	r0, #0
   2a0a4:	mov	r3, r0
   2a0a8:	str	r0, [r4, #12]
   2a0ac:	beq	2a390 <__assert_fail@plt+0x187ec>
   2a0b0:	ldr	r8, [r6, #4]
   2a0b4:	ldr	r1, [r6, #8]
   2a0b8:	lsl	r2, r8, #2
   2a0bc:	bl	11784 <memcpy@plt>
   2a0c0:	ldrb	r3, [r4, #52]	; 0x34
   2a0c4:	cmp	r8, #0
   2a0c8:	str	fp, [r4, #40]	; 0x28
   2a0cc:	bfi	r3, sl, #0, #4
   2a0d0:	strb	r3, [r4, #52]	; 0x34
   2a0d4:	ble	2a214 <__assert_fail@plt+0x18670>
   2a0d8:	and	r2, sl, #2
   2a0dc:	mov	r1, #0
   2a0e0:	and	r3, sl, #1
   2a0e4:	mov	lr, r8
   2a0e8:	mov	r5, r1
   2a0ec:	mov	r8, r3
   2a0f0:	str	r2, [sp]
   2a0f4:	and	r2, sl, #4
   2a0f8:	str	r2, [sp, #4]
   2a0fc:	ldr	r3, [r6, #8]
   2a100:	ldr	r2, [r9]
   2a104:	ldr	r3, [r3, r5, lsl #2]
   2a108:	add	r2, r2, r3, lsl #3
   2a10c:	ldr	sl, [r2, #4]
   2a110:	ldrb	r3, [r2, #4]
   2a114:	ubfx	sl, sl, #8, #10
   2a118:	cmp	r3, #1
   2a11c:	cmpeq	sl, #0
   2a120:	beq	2a208 <__assert_fail@plt+0x18664>
   2a124:	ldrb	ip, [r2, #6]
   2a128:	cmp	r3, #2
   2a12c:	ldrb	r2, [r4, #52]	; 0x34
   2a130:	ubfx	ip, ip, #4, #1
   2a134:	ubfx	r0, r2, #5, #1
   2a138:	orr	r0, r0, ip
   2a13c:	bfi	r2, r0, #5, #1
   2a140:	uxtbeq	r3, r2
   2a144:	orreq	r3, r3, #16
   2a148:	strb	r2, [r4, #52]	; 0x34
   2a14c:	strbeq	r3, [r4, #52]	; 0x34
   2a150:	beq	2a168 <__assert_fail@plt+0x185c4>
   2a154:	cmp	r3, #4
   2a158:	bne	2a168 <__assert_fail@plt+0x185c4>
   2a15c:	ldrb	r3, [r4, #52]	; 0x34
   2a160:	orr	r3, r3, #64	; 0x40
   2a164:	strb	r3, [r4, #52]	; 0x34
   2a168:	cmp	sl, #0
   2a16c:	beq	2a208 <__assert_fail@plt+0x18664>
   2a170:	ldr	r3, [r4, #40]	; 0x28
   2a174:	cmp	fp, r3
   2a178:	beq	2a2a8 <__assert_fail@plt+0x18704>
   2a17c:	tst	sl, #1
   2a180:	beq	2a294 <__assert_fail@plt+0x186f0>
   2a184:	cmp	r8, #0
   2a188:	beq	2a1bc <__assert_fail@plt+0x18618>
   2a18c:	tst	sl, #2
   2a190:	bne	2a1bc <__assert_fail@plt+0x18618>
   2a194:	tst	sl, #16
   2a198:	beq	2a1a8 <__assert_fail@plt+0x18604>
   2a19c:	ldr	r3, [sp]
   2a1a0:	cmp	r3, #0
   2a1a4:	beq	2a1bc <__assert_fail@plt+0x18618>
   2a1a8:	tst	sl, #64	; 0x40
   2a1ac:	beq	2a204 <__assert_fail@plt+0x18660>
   2a1b0:	ldr	r3, [sp, #4]
   2a1b4:	cmp	r3, #0
   2a1b8:	bne	2a204 <__assert_fail@plt+0x18660>
   2a1bc:	subs	r3, r5, r1
   2a1c0:	bmi	2a200 <__assert_fail@plt+0x1865c>
   2a1c4:	ldr	r2, [r4, #8]
   2a1c8:	cmp	r3, r2
   2a1cc:	bge	2a200 <__assert_fail@plt+0x1865c>
   2a1d0:	sub	r2, r2, #1
   2a1d4:	cmp	r3, r2
   2a1d8:	str	r2, [r4, #8]
   2a1dc:	bge	2a200 <__assert_fail@plt+0x1865c>
   2a1e0:	ldr	r2, [r4, #12]
   2a1e4:	add	r2, r2, r3, lsl #2
   2a1e8:	ldr	r0, [r2, #4]
   2a1ec:	add	r3, r3, #1
   2a1f0:	str	r0, [r2], #4
   2a1f4:	ldr	r0, [r4, #8]
   2a1f8:	cmp	r3, r0
   2a1fc:	blt	2a1e8 <__assert_fail@plt+0x18644>
   2a200:	add	r1, r1, #1
   2a204:	ldr	lr, [r6, #4]
   2a208:	add	r5, r5, #1
   2a20c:	cmp	r5, lr
   2a210:	blt	2a0fc <__assert_fail@plt+0x18558>
   2a214:	mov	r2, r7
   2a218:	mov	r0, r9
   2a21c:	mov	r1, r4
   2a220:	bl	23f1c <__assert_fail@plt+0x12378>
   2a224:	cmp	r0, #0
   2a228:	bne	2a330 <__assert_fail@plt+0x1878c>
   2a22c:	mov	r0, r4
   2a230:	add	sp, sp, #20
   2a234:	ldrd	r4, [sp]
   2a238:	ldrd	r6, [sp, #8]
   2a23c:	ldrd	r8, [sp, #16]
   2a240:	ldrd	sl, [sp, #24]
   2a244:	add	sp, sp, #32
   2a248:	pop	{pc}		; (ldr pc, [sp], #4)
   2a24c:	ldr	r9, [r2, #8]
   2a250:	ldr	sl, [fp, #8]
   2a254:	ldr	r9, [r9, r5, lsl #2]
   2a258:	ldr	sl, [sl, r5, lsl #2]
   2a25c:	cmp	sl, r9
   2a260:	bne	2a00c <__assert_fail@plt+0x18468>
   2a264:	subs	r5, r5, #1
   2a268:	bpl	2a24c <__assert_fail@plt+0x186a8>
   2a26c:	b	2a22c <__assert_fail@plt+0x18688>
   2a270:	mov	r3, #0
   2a274:	str	r3, [r4, #4]
   2a278:	str	r3, [fp, #4]
   2a27c:	str	r3, [fp, #8]
   2a280:	ldrb	r3, [r4, #52]	; 0x34
   2a284:	str	fp, [r4, #40]	; 0x28
   2a288:	bfi	r3, sl, #0, #4
   2a28c:	strb	r3, [r4, #52]	; 0x34
   2a290:	b	2a214 <__assert_fail@plt+0x18670>
   2a294:	tst	sl, #2
   2a298:	beq	2a194 <__assert_fail@plt+0x185f0>
   2a29c:	cmp	r8, #0
   2a2a0:	beq	2a194 <__assert_fail@plt+0x185f0>
   2a2a4:	b	2a1bc <__assert_fail@plt+0x18618>
   2a2a8:	mov	r0, #12
   2a2ac:	bl	39028 <__assert_fail@plt+0x27484>
   2a2b0:	subs	r3, r0, #0
   2a2b4:	beq	2a330 <__assert_fail@plt+0x1878c>
   2a2b8:	ldr	r2, [r6, #4]
   2a2bc:	str	r3, [r4, #40]	; 0x28
   2a2c0:	cmp	r2, #0
   2a2c4:	str	r2, [r3, #4]
   2a2c8:	ble	2a310 <__assert_fail@plt+0x1876c>
   2a2cc:	lsl	r0, r2, #2
   2a2d0:	str	r2, [r3]
   2a2d4:	str	r3, [sp, #12]
   2a2d8:	bl	39028 <__assert_fail@plt+0x27484>
   2a2dc:	ldr	r3, [sp, #12]
   2a2e0:	cmp	r0, #0
   2a2e4:	str	r0, [r3, #8]
   2a2e8:	beq	2a324 <__assert_fail@plt+0x18780>
   2a2ec:	ldr	r2, [r6, #4]
   2a2f0:	ldr	r1, [r6, #8]
   2a2f4:	lsl	r2, r2, #2
   2a2f8:	bl	11784 <memcpy@plt>
   2a2fc:	ldrb	r3, [r4, #52]	; 0x34
   2a300:	mov	r1, #0
   2a304:	orr	r3, r3, #128	; 0x80
   2a308:	strb	r3, [r4, #52]	; 0x34
   2a30c:	b	2a17c <__assert_fail@plt+0x185d8>
   2a310:	mov	r2, #0
   2a314:	str	r2, [r3]
   2a318:	str	r2, [r3, #4]
   2a31c:	str	r2, [r3, #8]
   2a320:	b	2a2fc <__assert_fail@plt+0x18758>
   2a324:	mov	r8, r3
   2a328:	str	r0, [r8]
   2a32c:	str	r0, [r8, #4]
   2a330:	ldr	r0, [r4, #24]
   2a334:	bl	19610 <__assert_fail@plt+0x7a6c>
   2a338:	ldr	r0, [r4, #36]	; 0x24
   2a33c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2a340:	ldr	r3, [r4, #40]	; 0x28
   2a344:	cmp	fp, r3
   2a348:	beq	2a35c <__assert_fail@plt+0x187b8>
   2a34c:	ldr	r0, [r3, #8]
   2a350:	bl	19610 <__assert_fail@plt+0x7a6c>
   2a354:	ldr	r0, [r4, #40]	; 0x28
   2a358:	bl	19610 <__assert_fail@plt+0x7a6c>
   2a35c:	ldr	r0, [r4, #12]
   2a360:	bl	19610 <__assert_fail@plt+0x7a6c>
   2a364:	ldr	r0, [r4, #48]	; 0x30
   2a368:	bl	19610 <__assert_fail@plt+0x7a6c>
   2a36c:	ldr	r0, [r4, #44]	; 0x2c
   2a370:	bl	19610 <__assert_fail@plt+0x7a6c>
   2a374:	mov	r0, r4
   2a378:	bl	19610 <__assert_fail@plt+0x7a6c>
   2a37c:	ldr	r2, [sp, #8]
   2a380:	mov	r3, #12
   2a384:	mov	r4, #0
   2a388:	str	r3, [r2]
   2a38c:	b	2a22c <__assert_fail@plt+0x18688>
   2a390:	mov	r0, r4
   2a394:	str	r3, [r4, #4]
   2a398:	str	r3, [r4, #8]
   2a39c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2a3a0:	b	2a37c <__assert_fail@plt+0x187d8>
   2a3a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a3a8:	mov	ip, r1
   2a3ac:	strd	r6, [sp, #8]
   2a3b0:	strd	r8, [sp, #16]
   2a3b4:	ldr	r8, [r1, #8]
   2a3b8:	strd	sl, [sp, #24]
   2a3bc:	str	lr, [sp, #32]
   2a3c0:	sub	sp, sp, #14528	; 0x38c0
   2a3c4:	sub	sp, sp, #60	; 0x3c
   2a3c8:	add	r9, sp, #2288	; 0x8f0
   2a3cc:	add	r9, r9, #8
   2a3d0:	str	r1, [sp, #100]	; 0x64
   2a3d4:	mov	r1, #0
   2a3d8:	cmp	r8, r1
   2a3dc:	str	r1, [r9]
   2a3e0:	str	r1, [r9, #4]
   2a3e4:	str	r1, [r9, #8]
   2a3e8:	str	r1, [r9, #12]
   2a3ec:	str	r1, [r9, #16]
   2a3f0:	str	r1, [r9, #20]
   2a3f4:	str	r1, [r9, #24]
   2a3f8:	str	r1, [r9, #28]
   2a3fc:	str	r1, [ip, #44]	; 0x2c
   2a400:	str	r1, [ip, #48]	; 0x30
   2a404:	ble	2b37c <__assert_fail@plt+0x197d8>
   2a408:	mov	r3, r1
   2a40c:	mov	r2, r1
   2a410:	str	r1, [sp, #48]	; 0x30
   2a414:	mov	fp, r0
   2a418:	mov	r6, r8
   2a41c:	str	r1, [sp, #104]	; 0x68
   2a420:	str	r0, [sp, #116]	; 0x74
   2a424:	strd	r2, [sp, #128]	; 0x80
   2a428:	sub	r3, r9, #2080	; 0x820
   2a42c:	str	r3, [sp, #124]	; 0x7c
   2a430:	ldr	r3, [sp, #100]	; 0x64
   2a434:	ldr	r1, [sp, #104]	; 0x68
   2a438:	ldr	r3, [r3, #12]
   2a43c:	lsl	r2, r1, #2
   2a440:	str	r2, [sp, #112]	; 0x70
   2a444:	ldr	r2, [sp, #116]	; 0x74
   2a448:	ldr	r1, [r3, r1, lsl #2]
   2a44c:	ldr	r2, [r2]
   2a450:	add	r3, r2, r1, lsl #3
   2a454:	ldrb	r0, [r3, #4]
   2a458:	str	r3, [sp, #96]	; 0x60
   2a45c:	cmp	r0, #1
   2a460:	ldr	r3, [r3, #4]
   2a464:	str	r0, [sp, #52]	; 0x34
   2a468:	ubfx	r3, r3, #8, #10
   2a46c:	beq	2a778 <__assert_fail@plt+0x18bd4>
   2a470:	cmp	r0, #3
   2a474:	beq	2b128 <__assert_fail@plt+0x19584>
   2a478:	cmp	r0, #5
   2a47c:	beq	2ae50 <__assert_fail@plt+0x192ac>
   2a480:	cmp	r0, #7
   2a484:	beq	2b064 <__assert_fail@plt+0x194c0>
   2a488:	ldr	r3, [sp, #104]	; 0x68
   2a48c:	add	r3, r3, #1
   2a490:	cmp	r3, r6
   2a494:	str	r3, [sp, #104]	; 0x68
   2a498:	blt	2a430 <__assert_fail@plt+0x1888c>
   2a49c:	ldr	r3, [sp, #48]	; 0x30
   2a4a0:	ldr	fp, [sp, #116]	; 0x74
   2a4a4:	cmp	r3, #0
   2a4a8:	ble	2b378 <__assert_fail@plt+0x197d4>
   2a4ac:	add	r3, r3, #1
   2a4b0:	mov	r5, #0
   2a4b4:	lsl	r0, r3, #2
   2a4b8:	str	r3, [r9, #-2156]	; 0xfffff794
   2a4bc:	str	r5, [r9, #-2152]	; 0xfffff798
   2a4c0:	bl	39028 <__assert_fail@plt+0x27484>
   2a4c4:	cmp	r0, r5
   2a4c8:	str	r0, [r9, #-2148]	; 0xfffff79c
   2a4cc:	beq	2b328 <__assert_fail@plt+0x19784>
   2a4d0:	mov	r3, #0
   2a4d4:	mov	r2, #0
   2a4d8:	str	r5, [r9, #-2160]	; 0xfffff790
   2a4dc:	add	r1, sp, #3312	; 0xcf0
   2a4e0:	mov	sl, r5
   2a4e4:	str	r5, [sp]
   2a4e8:	add	r1, r1, #8
   2a4ec:	mov	r8, r5
   2a4f0:	str	r5, [sp, #8]
   2a4f4:	strd	r2, [sp, #152]	; 0x98
   2a4f8:	mov	r4, r1
   2a4fc:	strd	r2, [sp, #160]	; 0xa0
   2a500:	strd	r2, [sp, #168]	; 0xa8
   2a504:	strd	r2, [sp, #176]	; 0xb0
   2a508:	add	r3, sp, #136	; 0x88
   2a50c:	str	r5, [sp, #12]
   2a510:	str	r5, [sp, #16]
   2a514:	str	r3, [sp, #40]	; 0x28
   2a518:	add	r3, sp, #6336	; 0x18c0
   2a51c:	add	r3, r3, #56	; 0x38
   2a520:	str	r5, [sp, #24]
   2a524:	mov	r6, r3
   2a528:	str	r5, [sp, #32]
   2a52c:	str	r5, [sp, #52]	; 0x34
   2a530:	str	r3, [sp, #56]	; 0x38
   2a534:	str	r1, [sp, #60]	; 0x3c
   2a538:	str	r1, [sp, #108]	; 0x6c
   2a53c:	ldr	ip, [r4, #4]
   2a540:	mov	r3, #0
   2a544:	str	r3, [r9, #-2152]	; 0xfffff798
   2a548:	cmp	ip, r3
   2a54c:	movgt	r7, #0
   2a550:	ble	2a59c <__assert_fail@plt+0x189f8>
   2a554:	ldr	r2, [r4, #8]
   2a558:	add	r0, sp, #140	; 0x8c
   2a55c:	ldr	r3, [fp, #12]
   2a560:	ldr	r2, [r2, r7, lsl #2]
   2a564:	add	r7, r7, #1
   2a568:	ldr	r3, [r3, r2, lsl #2]
   2a56c:	cmn	r3, #1
   2a570:	add	r2, r3, r3, lsl #1
   2a574:	beq	2a594 <__assert_fail@plt+0x189f0>
   2a578:	ldr	r1, [fp, #24]
   2a57c:	add	r1, r1, r2, lsl #2
   2a580:	bl	24f74 <__assert_fail@plt+0x133d0>
   2a584:	cmp	r0, #0
   2a588:	str	r0, [r9, #-2160]	; 0xfffff790
   2a58c:	bne	2b244 <__assert_fail@plt+0x196a0>
   2a590:	ldr	ip, [r4, #4]
   2a594:	cmp	r7, ip
   2a598:	blt	2a554 <__assert_fail@plt+0x189b0>
   2a59c:	mov	r3, #0
   2a5a0:	add	r2, sp, #140	; 0x8c
   2a5a4:	ldr	r0, [sp, #40]	; 0x28
   2a5a8:	mov	r1, fp
   2a5ac:	bl	29f88 <__assert_fail@plt+0x183e4>
   2a5b0:	add	r3, sp, #248	; 0xf8
   2a5b4:	cmp	r0, #0
   2a5b8:	mov	r7, r0
   2a5bc:	str	r0, [r3, r8, lsl #2]
   2a5c0:	beq	2b318 <__assert_fail@plt+0x19774>
   2a5c4:	ldrsb	r3, [r7, #52]	; 0x34
   2a5c8:	cmp	r3, #0
   2a5cc:	blt	2b274 <__assert_fail@plt+0x196d0>
   2a5d0:	add	r3, sp, #1264	; 0x4f0
   2a5d4:	str	r7, [r9, r8, lsl #2]
   2a5d8:	add	r3, r3, #8
   2a5dc:	str	r7, [r3, r8, lsl #2]
   2a5e0:	add	r8, r8, #1
   2a5e4:	ldr	r0, [sp]
   2a5e8:	add	r4, r4, #12
   2a5ec:	add	r6, r6, #32
   2a5f0:	ldr	r3, [sp, #48]	; 0x30
   2a5f4:	ldr	r2, [r6, #-32]	; 0xffffffe0
   2a5f8:	ldr	r1, [r6, #-24]	; 0xffffffe8
   2a5fc:	cmp	r8, r3
   2a600:	ldr	r3, [r6, #-28]	; 0xffffffe4
   2a604:	orr	sl, sl, r2
   2a608:	ldr	r2, [r6, #-20]	; 0xffffffec
   2a60c:	str	sl, [r9, #-2144]	; 0xfffff7a0
   2a610:	ldr	ip, [sp, #8]
   2a614:	orr	r0, r0, r3
   2a618:	ldr	r3, [r6, #-16]
   2a61c:	str	r0, [r9, #-2140]	; 0xfffff7a4
   2a620:	str	r0, [sp]
   2a624:	ldr	r0, [sp, #12]
   2a628:	orr	ip, ip, r1
   2a62c:	str	ip, [r9, #-2136]	; 0xfffff7a8
   2a630:	str	ip, [sp, #8]
   2a634:	ldr	r1, [r6, #-12]
   2a638:	orr	r0, r0, r2
   2a63c:	ldr	ip, [sp, #16]
   2a640:	str	r0, [r9, #-2132]	; 0xfffff7ac
   2a644:	str	r0, [sp, #12]
   2a648:	ldr	r0, [sp, #24]
   2a64c:	orr	ip, ip, r3
   2a650:	ldrd	r2, [r6, #-8]
   2a654:	str	ip, [r9, #-2128]	; 0xfffff7b0
   2a658:	orr	r1, r0, r1
   2a65c:	ldr	r0, [sp, #32]
   2a660:	str	ip, [sp, #16]
   2a664:	orr	r5, r5, r3
   2a668:	str	r1, [r9, #-2124]	; 0xfffff7b4
   2a66c:	str	r1, [sp, #24]
   2a670:	str	r5, [r9, #-2116]	; 0xfffff7bc
   2a674:	orr	r2, r0, r2
   2a678:	str	r2, [r9, #-2120]	; 0xfffff7b8
   2a67c:	str	r2, [sp, #32]
   2a680:	bne	2a53c <__assert_fail@plt+0x18998>
   2a684:	ldr	r3, [sp, #52]	; 0x34
   2a688:	cmp	r3, #0
   2a68c:	bne	2b3c0 <__assert_fail@plt+0x1981c>
   2a690:	mov	r1, #256	; 0x100
   2a694:	mov	r0, #4
   2a698:	bl	38fb4 <__assert_fail@plt+0x27410>
   2a69c:	ldr	r3, [sp, #100]	; 0x64
   2a6a0:	cmp	r0, #0
   2a6a4:	mov	r7, r0
   2a6a8:	str	r0, [r3, #44]	; 0x2c
   2a6ac:	beq	2b244 <__assert_fail@plt+0x196a0>
   2a6b0:	ldr	lr, [sp, #56]	; 0x38
   2a6b4:	add	ip, sp, #148	; 0x94
   2a6b8:	add	r5, fp, #96	; 0x60
   2a6bc:	mov	r4, r0
   2a6c0:	add	r6, r0, #1024	; 0x400
   2a6c4:	ldr	r3, [ip, #4]!
   2a6c8:	cmp	r3, #0
   2a6cc:	movne	r0, r4
   2a6d0:	movne	r1, #1
   2a6d4:	beq	2a6f0 <__assert_fail@plt+0x18b4c>
   2a6d8:	tst	r3, #1
   2a6dc:	bne	2b340 <__assert_fail@plt+0x1979c>
   2a6e0:	lsrs	r3, r3, #1
   2a6e4:	add	r0, r0, #4
   2a6e8:	lsl	r1, r1, #1
   2a6ec:	bne	2a6d8 <__assert_fail@plt+0x18b34>
   2a6f0:	add	r4, r4, #128	; 0x80
   2a6f4:	add	r5, r5, #4
   2a6f8:	cmp	r6, r4
   2a6fc:	add	lr, lr, #4
   2a700:	bne	2a6c4 <__assert_fail@plt+0x18b20>
   2a704:	ubfx	r3, sl, #10, #1
   2a708:	cmp	r3, #0
   2a70c:	beq	2a740 <__assert_fail@plt+0x18b9c>
   2a710:	ldr	ip, [sp, #48]	; 0x30
   2a714:	add	r2, sp, #6336	; 0x18c0
   2a718:	add	r1, r3, #1
   2a71c:	add	r2, r2, #56	; 0x38
   2a720:	sub	r0, r3, #1
   2a724:	add	r2, r2, r3, lsl #5
   2a728:	ldr	r2, [r2, #-32]	; 0xffffffe0
   2a72c:	tst	r2, #1024	; 0x400
   2a730:	bne	2b3a8 <__assert_fail@plt+0x19804>
   2a734:	cmp	ip, r3
   2a738:	mov	r3, r1
   2a73c:	bne	2a714 <__assert_fail@plt+0x18b70>
   2a740:	ldr	r0, [r9, #-2148]	; 0xfffff79c
   2a744:	bl	19610 <__assert_fail@plt+0x7a6c>
   2a748:	ldr	r3, [sp, #48]	; 0x30
   2a74c:	ldr	r5, [sp, #60]	; 0x3c
   2a750:	add	r1, r3, r3, lsl #1
   2a754:	ldr	r3, [sp, #108]	; 0x6c
   2a758:	add	r4, r3, r1, lsl #2
   2a75c:	add	r5, r5, #12
   2a760:	ldr	r0, [r5, #-4]
   2a764:	bl	19610 <__assert_fail@plt+0x7a6c>
   2a768:	cmp	r4, r5
   2a76c:	bne	2a75c <__assert_fail@plt+0x18bb8>
   2a770:	mov	r0, #1
   2a774:	b	2af98 <__assert_fail@plt+0x193f4>
   2a778:	ldrb	r2, [r2, r1, lsl #3]
   2a77c:	mov	ip, r0
   2a780:	asr	r1, r2, #5
   2a784:	and	r2, r2, #31
   2a788:	ldr	r0, [r9, r1, lsl #2]
   2a78c:	orr	r2, r0, ip, lsl r2
   2a790:	str	r2, [r9, r1, lsl #2]
   2a794:	cmp	r3, #0
   2a798:	beq	2aa58 <__assert_fail@plt+0x18eb4>
   2a79c:	tst	r3, #32
   2a7a0:	bne	2af00 <__assert_fail@plt+0x1935c>
   2a7a4:	tst	r3, #128	; 0x80
   2a7a8:	bne	2af40 <__assert_fail@plt+0x1939c>
   2a7ac:	tst	r3, #4
   2a7b0:	beq	2a918 <__assert_fail@plt+0x18d74>
   2a7b4:	ldr	r2, [sp, #52]	; 0x34
   2a7b8:	cmp	r2, #1
   2a7bc:	beq	2b224 <__assert_fail@plt+0x19680>
   2a7c0:	ldr	r1, [sp, #116]	; 0x74
   2a7c4:	ldrd	r4, [r9]
   2a7c8:	ldr	lr, [r9, #16]
   2a7cc:	ldr	r2, [r1, #92]	; 0x5c
   2a7d0:	ldr	r0, [r9, #24]
   2a7d4:	ldr	ip, [r9, #28]
   2a7d8:	cmp	r2, #1
   2a7dc:	ldr	r2, [r9, #8]
   2a7e0:	str	lr, [sp, #56]	; 0x38
   2a7e4:	ldr	sl, [r9, #12]
   2a7e8:	str	r2, [sp]
   2a7ec:	ldr	r2, [r9, #20]
   2a7f0:	str	r0, [sp, #16]
   2a7f4:	str	ip, [sp, #32]
   2a7f8:	str	r2, [sp, #12]
   2a7fc:	mov	r2, r1
   2a800:	ldr	r1, [r1, #96]	; 0x60
   2a804:	ldr	r7, [r2, #120]	; 0x78
   2a808:	ldr	r8, [r2, #108]	; 0x6c
   2a80c:	ldr	ip, [r2, #100]	; 0x64
   2a810:	ldr	r0, [r2, #104]	; 0x68
   2a814:	str	r7, [sp, #24]
   2a818:	str	r8, [sp, #8]
   2a81c:	ldr	r7, [r2, #124]	; 0x7c
   2a820:	ldr	r8, [r2, #112]	; 0x70
   2a824:	ldr	fp, [r2, #116]	; 0x74
   2a828:	str	r7, [sp, #40]	; 0x28
   2a82c:	ble	2b0b0 <__assert_fail@plt+0x1950c>
   2a830:	ldr	r2, [sp, #116]	; 0x74
   2a834:	ldr	lr, [r2, #60]	; 0x3c
   2a838:	ldr	r2, [lr]
   2a83c:	mvn	r2, r2
   2a840:	orr	r2, r2, r1
   2a844:	ldr	r1, [lr, #4]
   2a848:	and	r2, r2, r4
   2a84c:	str	r2, [r9]
   2a850:	mvn	r1, r1
   2a854:	orr	r1, r1, ip
   2a858:	ldr	ip, [lr, #8]
   2a85c:	and	r1, r1, r5
   2a860:	orr	r2, r2, r1
   2a864:	mvn	r4, ip
   2a868:	ldr	ip, [lr, #20]
   2a86c:	orr	r4, r4, r0
   2a870:	ldr	r0, [lr, #12]
   2a874:	mvn	ip, ip
   2a878:	orr	ip, ip, fp
   2a87c:	mvn	r5, r0
   2a880:	ldr	r0, [sp]
   2a884:	and	r4, r4, r0
   2a888:	ldr	r0, [lr, #24]
   2a88c:	orr	r2, r2, r4
   2a890:	stmib	r9, {r1, r4}
   2a894:	ldr	r1, [sp, #8]
   2a898:	ldr	r4, [sp, #56]	; 0x38
   2a89c:	mvn	r0, r0
   2a8a0:	orr	r5, r5, r1
   2a8a4:	ldr	r1, [lr, #16]
   2a8a8:	and	r5, r5, sl
   2a8ac:	orr	r2, r2, r5
   2a8b0:	ldr	lr, [lr, #28]
   2a8b4:	str	r5, [r9, #12]
   2a8b8:	mvn	r1, r1
   2a8bc:	orr	r1, r1, r8
   2a8c0:	and	r1, r1, r4
   2a8c4:	ldr	r4, [sp, #12]
   2a8c8:	mvn	lr, lr
   2a8cc:	orr	r2, r2, r1
   2a8d0:	str	r1, [r9, #16]
   2a8d4:	ldr	r1, [sp, #24]
   2a8d8:	and	ip, ip, r4
   2a8dc:	orr	r2, r2, ip
   2a8e0:	str	ip, [r9, #20]
   2a8e4:	orr	r0, r0, r1
   2a8e8:	ldr	r1, [sp, #16]
   2a8ec:	and	r0, r0, r1
   2a8f0:	ldr	r1, [sp, #40]	; 0x28
   2a8f4:	orr	ip, r2, r0
   2a8f8:	ldr	r2, [sp, #32]
   2a8fc:	str	r0, [r9, #24]
   2a900:	orr	lr, lr, r1
   2a904:	and	lr, lr, r2
   2a908:	orr	ip, ip, lr
   2a90c:	str	lr, [r9, #28]
   2a910:	cmp	ip, #0
   2a914:	beq	2a488 <__assert_fail@plt+0x188e4>
   2a918:	tst	r3, #8
   2a91c:	beq	2aa58 <__assert_fail@plt+0x18eb4>
   2a920:	ldr	r3, [sp, #52]	; 0x34
   2a924:	cmp	r3, #1
   2a928:	beq	2b210 <__assert_fail@plt+0x1966c>
   2a92c:	ldr	r2, [sp, #116]	; 0x74
   2a930:	ldr	r5, [r9]
   2a934:	ldr	r1, [r9, #24]
   2a938:	add	r7, r2, #112	; 0x70
   2a93c:	ldr	r3, [r2, #92]	; 0x5c
   2a940:	ldm	r7, {r7, sl, lr}
   2a944:	str	r1, [sp, #12]
   2a948:	cmp	r3, #1
   2a94c:	ldr	ip, [r9, #28]
   2a950:	ldr	r3, [r9, #8]
   2a954:	ldr	r0, [r2, #100]	; 0x64
   2a958:	str	lr, [sp, #32]
   2a95c:	ldr	r1, [r2, #104]	; 0x68
   2a960:	str	r3, [sp]
   2a964:	str	ip, [sp, #16]
   2a968:	ldr	r3, [r9, #20]
   2a96c:	ldr	ip, [r2, #96]	; 0x60
   2a970:	ldr	r4, [r9, #4]
   2a974:	str	r3, [sp, #8]
   2a978:	ldr	r3, [r2, #108]	; 0x6c
   2a97c:	ldr	r2, [r2, #124]	; 0x7c
   2a980:	ldr	r8, [r9, #12]
   2a984:	ldr	fp, [r9, #16]
   2a988:	str	r2, [sp, #24]
   2a98c:	ble	2b1a4 <__assert_fail@plt+0x19600>
   2a990:	ldr	r2, [sp, #116]	; 0x74
   2a994:	ldr	r2, [r2, #60]	; 0x3c
   2a998:	ldr	lr, [r2]
   2a99c:	and	ip, ip, lr
   2a9a0:	ldr	lr, [r2, #4]
   2a9a4:	bic	ip, r5, ip
   2a9a8:	str	ip, [r9]
   2a9ac:	and	r0, r0, lr
   2a9b0:	ldr	lr, [r2, #16]
   2a9b4:	bic	r4, r4, r0
   2a9b8:	ldr	r0, [r2, #8]
   2a9bc:	orr	r5, ip, r4
   2a9c0:	str	r4, [r9, #4]
   2a9c4:	ldr	ip, [sp]
   2a9c8:	and	r7, r7, lr
   2a9cc:	bic	r7, fp, r7
   2a9d0:	and	r1, r1, r0
   2a9d4:	ldr	r0, [r2, #20]
   2a9d8:	str	r7, [r9, #16]
   2a9dc:	bic	r1, ip, r1
   2a9e0:	ldr	ip, [r2, #12]
   2a9e4:	orr	r5, r5, r1
   2a9e8:	str	r1, [r9, #8]
   2a9ec:	and	r0, r0, sl
   2a9f0:	and	r3, r3, ip
   2a9f4:	ldr	ip, [r2, #24]
   2a9f8:	bic	r3, r8, r3
   2a9fc:	orr	r5, r5, r3
   2aa00:	ldr	r2, [r2, #28]
   2aa04:	str	r3, [r9, #12]
   2aa08:	orr	r5, r5, r7
   2aa0c:	ldr	r3, [sp, #8]
   2aa10:	bic	r0, r3, r0
   2aa14:	ldr	r3, [sp, #32]
   2aa18:	orr	r5, r5, r0
   2aa1c:	str	r0, [r9, #20]
   2aa20:	and	r3, r3, ip
   2aa24:	mov	ip, r3
   2aa28:	ldr	r3, [sp, #12]
   2aa2c:	bic	ip, r3, ip
   2aa30:	ldr	r3, [sp, #24]
   2aa34:	orr	r5, r5, ip
   2aa38:	str	ip, [r9, #24]
   2aa3c:	and	r3, r3, r2
   2aa40:	ldr	r2, [sp, #16]
   2aa44:	bic	r3, r2, r3
   2aa48:	orr	r2, r5, r3
   2aa4c:	str	r3, [r9, #28]
   2aa50:	cmp	r2, #0
   2aa54:	beq	2a488 <__assert_fail@plt+0x188e4>
   2aa58:	ldr	r3, [sp, #48]	; 0x30
   2aa5c:	cmp	r3, #0
   2aa60:	movle	fp, #0
   2aa64:	ble	2ae1c <__assert_fail@plt+0x19278>
   2aa68:	add	r3, sp, #3312	; 0xcf0
   2aa6c:	mov	fp, #0
   2aa70:	add	r3, r3, #8
   2aa74:	add	r4, sp, #6336	; 0x18c0
   2aa78:	add	r4, r4, #56	; 0x38
   2aa7c:	str	fp, [sp]
   2aa80:	mov	r6, r4
   2aa84:	str	r3, [sp, #8]
   2aa88:	str	r3, [sp, #108]	; 0x6c
   2aa8c:	b	2aaec <__assert_fail@plt+0x18f48>
   2aa90:	ldr	r3, [sp, #96]	; 0x60
   2aa94:	add	r0, sp, #14528	; 0x38c0
   2aa98:	add	r0, r0, #56	; 0x38
   2aa9c:	ldrb	r2, [r3]
   2aaa0:	asr	r3, r2, #5
   2aaa4:	and	r2, r2, #31
   2aaa8:	add	r3, r0, r3, lsl #2
   2aaac:	add	r3, r3, r1
   2aab0:	sub	r3, r3, #8192	; 0x2000
   2aab4:	ldr	r3, [r3]
   2aab8:	lsr	r2, r3, r2
   2aabc:	tst	r2, #1
   2aac0:	bne	2ab00 <__assert_fail@plt+0x18f5c>
   2aac4:	ldr	r3, [sp]
   2aac8:	add	r6, r6, #32
   2aacc:	add	r2, r3, #1
   2aad0:	ldr	r3, [sp, #48]	; 0x30
   2aad4:	str	r2, [sp]
   2aad8:	cmp	r2, r3
   2aadc:	ldr	r3, [sp, #8]
   2aae0:	add	r3, r3, #12
   2aae4:	str	r3, [sp, #8]
   2aae8:	bge	2afb8 <__assert_fail@plt+0x19414>
   2aaec:	ldr	r3, [sp, #52]	; 0x34
   2aaf0:	cmp	r3, #1
   2aaf4:	ldr	r3, [sp]
   2aaf8:	lsl	r1, r3, #5
   2aafc:	beq	2aa90 <__assert_fail@plt+0x18eec>
   2ab00:	ldr	fp, [r6]
   2ab04:	ldm	r9, {r2, r4, lr}
   2ab08:	ldr	sl, [r6, #4]
   2ab0c:	and	r3, r2, fp
   2ab10:	str	fp, [sp, #56]	; 0x38
   2ab14:	ldr	r8, [r6, #8]
   2ab18:	str	r3, [sp, #64]	; 0x40
   2ab1c:	ldr	r7, [r6, #12]
   2ab20:	and	r1, r4, sl
   2ab24:	orr	r3, r3, r1
   2ab28:	ldr	ip, [r9, #12]
   2ab2c:	and	r0, lr, r8
   2ab30:	str	r1, [sp, #68]	; 0x44
   2ab34:	mov	r5, r0
   2ab38:	ldr	r1, [r6, #16]
   2ab3c:	orr	r3, r3, r5
   2ab40:	ldr	r0, [r9, #16]
   2ab44:	and	fp, ip, r7
   2ab48:	orr	r3, r3, fp
   2ab4c:	str	r5, [sp, #72]	; 0x48
   2ab50:	ldr	r5, [r9, #20]
   2ab54:	str	fp, [sp, #76]	; 0x4c
   2ab58:	ldr	fp, [r9, #24]
   2ab5c:	str	r5, [sp, #12]
   2ab60:	ldr	r5, [r6, #20]
   2ab64:	str	r1, [sp, #60]	; 0x3c
   2ab68:	str	r5, [sp, #16]
   2ab6c:	and	r5, r0, r1
   2ab70:	orr	r3, r3, r5
   2ab74:	ldr	r1, [sp, #12]
   2ab78:	str	fp, [sp, #24]
   2ab7c:	str	r5, [sp, #80]	; 0x50
   2ab80:	ldr	r5, [sp, #16]
   2ab84:	ldr	fp, [r6, #24]
   2ab88:	and	r1, r1, r5
   2ab8c:	ldr	r5, [r9, #28]
   2ab90:	orr	r3, r3, r1
   2ab94:	str	fp, [sp, #32]
   2ab98:	ldr	fp, [sp, #24]
   2ab9c:	str	r5, [sp, #40]	; 0x28
   2aba0:	str	r1, [sp, #84]	; 0x54
   2aba4:	ldr	r1, [r6, #28]
   2aba8:	ldr	r5, [sp, #32]
   2abac:	and	fp, fp, r5
   2abb0:	ldr	r5, [sp, #40]	; 0x28
   2abb4:	orr	r3, r3, fp
   2abb8:	str	fp, [sp, #88]	; 0x58
   2abbc:	and	r5, r5, r1
   2abc0:	orrs	r3, r3, r5
   2abc4:	str	r5, [sp, #92]	; 0x5c
   2abc8:	beq	2aac4 <__assert_fail@plt+0x18f20>
   2abcc:	ldr	fp, [sp, #56]	; 0x38
   2abd0:	bic	r5, sl, r4
   2abd4:	bic	r4, r4, sl
   2abd8:	str	r5, [sp, #120]	; 0x78
   2abdc:	bic	r3, fp, r2
   2abe0:	bic	r2, r2, fp
   2abe4:	ldr	fp, [sp, #32]
   2abe8:	mov	sl, r3
   2abec:	str	r3, [sp, #56]	; 0x38
   2abf0:	orr	r3, sl, r5
   2abf4:	bic	sl, r8, lr
   2abf8:	bic	lr, lr, r8
   2abfc:	stm	r9, {r2, r4}
   2ac00:	orr	r2, r2, r4
   2ac04:	orr	r2, r2, lr
   2ac08:	bic	r8, r7, ip
   2ac0c:	ldr	r5, [sp, #16]
   2ac10:	str	lr, [r9, #8]
   2ac14:	bic	ip, ip, r7
   2ac18:	orr	r3, r3, sl
   2ac1c:	ldr	lr, [sp, #60]	; 0x3c
   2ac20:	orr	r2, r2, ip
   2ac24:	orr	r3, r3, r8
   2ac28:	str	ip, [r9, #12]
   2ac2c:	ldr	ip, [sp, #24]
   2ac30:	bic	r7, lr, r0
   2ac34:	bic	r0, r0, lr
   2ac38:	ldr	lr, [sp, #12]
   2ac3c:	orr	r2, r2, r0
   2ac40:	orr	r3, r3, r7
   2ac44:	str	r0, [r9, #16]
   2ac48:	bic	r0, ip, fp
   2ac4c:	bic	r4, r5, lr
   2ac50:	bic	r5, lr, r5
   2ac54:	bic	lr, fp, ip
   2ac58:	ldr	fp, [sp, #40]	; 0x28
   2ac5c:	orr	r3, r3, r4
   2ac60:	orr	r2, r2, r5
   2ac64:	orr	r3, r3, lr
   2ac68:	str	r5, [r9, #20]
   2ac6c:	orr	r2, r2, r0
   2ac70:	bic	ip, r1, fp
   2ac74:	bic	r1, fp, r1
   2ac78:	orrs	r3, r3, ip
   2ac7c:	orr	r5, r2, r1
   2ac80:	strd	r0, [r9, #24]
   2ac84:	beq	2adf0 <__assert_fail@plt+0x1924c>
   2ac88:	ldr	r2, [sp, #48]	; 0x30
   2ac8c:	str	sl, [r9, #-2072]	; 0xfffff7e8
   2ac90:	ldr	r3, [sp, #64]	; 0x40
   2ac94:	str	ip, [r9, #-2052]	; 0xfffff7fc
   2ac98:	ldr	r1, [sp, #68]	; 0x44
   2ac9c:	ldr	r0, [sp, #72]	; 0x48
   2aca0:	str	r3, [r9, #-2112]	; 0xfffff7c0
   2aca4:	ldr	fp, [sp, #76]	; 0x4c
   2aca8:	str	r1, [r9, #-2108]	; 0xfffff7c4
   2acac:	lsl	r1, r2, #1
   2acb0:	ldr	ip, [sp, #124]	; 0x7c
   2acb4:	str	r0, [r9, #-2104]	; 0xfffff7c8
   2acb8:	add	r0, sp, #14528	; 0x38c0
   2acbc:	add	r0, r0, #56	; 0x38
   2acc0:	str	r1, [sp, #60]	; 0x3c
   2acc4:	add	r3, r0, r2, lsl #5
   2acc8:	add	r2, r1, r2
   2accc:	ldr	r1, [sp, #80]	; 0x50
   2acd0:	str	fp, [r9, #-2100]	; 0xfffff7cc
   2acd4:	ldr	fp, [sp, #88]	; 0x58
   2acd8:	sub	r3, r3, #8192	; 0x2000
   2acdc:	ldr	r0, [sp, #108]	; 0x6c
   2ace0:	str	r1, [r9, #-2096]	; 0xfffff7d0
   2ace4:	ldr	r1, [sp, #84]	; 0x54
   2ace8:	str	r8, [r9, #-2068]	; 0xfffff7ec
   2acec:	add	r0, r0, r2, lsl #2
   2acf0:	str	r1, [r9, #-2092]	; 0xfffff7d4
   2acf4:	ldr	r1, [sp, #92]	; 0x5c
   2acf8:	str	r7, [r9, #-2064]	; 0xfffff7f0
   2acfc:	str	r4, [r9, #-2060]	; 0xfffff7f4
   2ad00:	str	lr, [r9, #-2056]	; 0xfffff7f8
   2ad04:	str	r0, [sp, #12]
   2ad08:	str	fp, [r9, #-2088]	; 0xfffff7d8
   2ad0c:	str	r1, [r9, #-2084]	; 0xfffff7dc
   2ad10:	ldr	r1, [sp, #56]	; 0x38
   2ad14:	str	r1, [r9, #-2080]	; 0xfffff7e0
   2ad18:	ldr	r1, [sp, #120]	; 0x78
   2ad1c:	str	r1, [r9, #-2076]	; 0xfffff7e4
   2ad20:	ldrd	r0, [ip]
   2ad24:	ldrd	sl, [sp, #184]	; 0xb8
   2ad28:	ldr	r4, [sp, #12]
   2ad2c:	strd	r0, [r3]
   2ad30:	ldrd	r0, [sp, #192]	; 0xc0
   2ad34:	strd	sl, [sp, #24]
   2ad38:	ldrd	sl, [ip, #8]
   2ad3c:	strd	r0, [sp, #32]
   2ad40:	ldrd	r0, [ip, #16]
   2ad44:	strd	r0, [sp, #16]
   2ad48:	mov	r0, sl
   2ad4c:	mov	r1, fp
   2ad50:	ldrd	sl, [sp, #200]	; 0xc8
   2ad54:	strd	r0, [r3, #8]
   2ad58:	ldrd	r0, [sp, #16]
   2ad5c:	strd	sl, [sp, #40]	; 0x28
   2ad60:	ldrd	sl, [ip, #24]
   2ad64:	strd	r0, [r3, #16]
   2ad68:	ldrd	r0, [sp, #208]	; 0xd0
   2ad6c:	strd	r0, [sp, #16]
   2ad70:	mov	r0, sl
   2ad74:	mov	r1, fp
   2ad78:	ldrd	sl, [sp, #24]
   2ad7c:	strd	r0, [r3, #24]
   2ad80:	ldr	r3, [sp, #8]
   2ad84:	ldrd	r0, [sp, #32]
   2ad88:	strd	sl, [r6]
   2ad8c:	ldrd	sl, [sp, #40]	; 0x28
   2ad90:	ldr	r3, [r3, #4]
   2ad94:	strd	r0, [r6, #8]
   2ad98:	ldrd	r0, [sp, #16]
   2ad9c:	strd	sl, [r6, #16]
   2ada0:	cmp	r3, #0
   2ada4:	str	r3, [r4, #4]
   2ada8:	strd	r0, [r6, #24]
   2adac:	ble	2ae34 <__assert_fail@plt+0x19290>
   2adb0:	ldr	r1, [sp, #108]	; 0x6c
   2adb4:	lsl	r0, r3, #2
   2adb8:	str	r3, [r1, r2, lsl #2]
   2adbc:	bl	39028 <__assert_fail@plt+0x27484>
   2adc0:	cmp	r0, #0
   2adc4:	str	r0, [r4, #8]
   2adc8:	ldr	r1, [sp, #60]	; 0x3c
   2adcc:	beq	2b2e8 <__assert_fail@plt+0x19744>
   2add0:	ldr	r3, [sp, #8]
   2add4:	ldr	r2, [r3, #4]
   2add8:	ldr	r1, [r3, #8]
   2addc:	lsl	r2, r2, #2
   2ade0:	bl	11784 <memcpy@plt>
   2ade4:	ldr	r3, [sp, #48]	; 0x30
   2ade8:	add	r3, r3, #1
   2adec:	str	r3, [sp, #48]	; 0x30
   2adf0:	ldr	r0, [sp, #8]
   2adf4:	ldr	r3, [sp, #100]	; 0x64
   2adf8:	ldr	r2, [sp, #112]	; 0x70
   2adfc:	ldr	r3, [r3, #12]
   2ae00:	ldr	r1, [r3, r2]
   2ae04:	bl	24b78 <__assert_fail@plt+0x12fd4>
   2ae08:	cmp	r0, #0
   2ae0c:	beq	2af60 <__assert_fail@plt+0x193bc>
   2ae10:	cmp	r5, #0
   2ae14:	bne	2aac4 <__assert_fail@plt+0x18f20>
   2ae18:	ldr	fp, [sp]
   2ae1c:	ldr	r3, [sp, #48]	; 0x30
   2ae20:	cmp	r3, fp
   2ae24:	beq	2afc8 <__assert_fail@plt+0x19424>
   2ae28:	ldr	r3, [sp, #100]	; 0x64
   2ae2c:	ldr	r6, [r3, #8]
   2ae30:	b	2a488 <__assert_fail@plt+0x188e4>
   2ae34:	ldr	r1, [sp, #108]	; 0x6c
   2ae38:	mov	r3, #0
   2ae3c:	str	r3, [r1, r2, lsl #2]
   2ae40:	ldr	r2, [sp, #12]
   2ae44:	str	r3, [r2, #4]
   2ae48:	str	r3, [r2, #8]
   2ae4c:	b	2ade4 <__assert_fail@plt+0x19240>
   2ae50:	ldr	r1, [sp, #116]	; 0x74
   2ae54:	ldr	r2, [r1, #92]	; 0x5c
   2ae58:	cmp	r2, #1
   2ae5c:	ble	2b094 <__assert_fail@plt+0x194f0>
   2ae60:	ldr	r2, [r1, #60]	; 0x3c
   2ae64:	ldm	r9, {r1, ip}
   2ae68:	ldm	r2, {r0, lr}
   2ae6c:	ldr	r4, [r2, #8]
   2ae70:	orr	r1, r1, r0
   2ae74:	orr	ip, ip, lr
   2ae78:	ldr	r0, [r9, #8]
   2ae7c:	stm	r9, {r1, ip}
   2ae80:	ldr	lr, [r2, #12]
   2ae84:	ldr	r1, [r9, #12]
   2ae88:	orr	r0, r0, r4
   2ae8c:	str	r0, [r9, #8]
   2ae90:	ldr	r4, [r2, #16]
   2ae94:	orr	r1, r1, lr
   2ae98:	ldr	r0, [r9, #16]
   2ae9c:	ldr	ip, [r2, #20]
   2aea0:	str	r1, [r9, #12]
   2aea4:	ldr	lr, [r9, #20]
   2aea8:	orr	r0, r0, r4
   2aeac:	ldr	r1, [r2, #24]
   2aeb0:	str	r0, [r9, #16]
   2aeb4:	ldr	r0, [r9, #24]
   2aeb8:	orr	ip, lr, ip
   2aebc:	ldr	r2, [r2, #28]
   2aec0:	str	ip, [r9, #20]
   2aec4:	ldr	ip, [r9, #28]
   2aec8:	orr	r1, r0, r1
   2aecc:	str	r1, [r9, #24]
   2aed0:	orr	r2, ip, r2
   2aed4:	str	r2, [r9, #28]
   2aed8:	ldr	r2, [sp, #116]	; 0x74
   2aedc:	ldr	r2, [r2, #128]	; 0x80
   2aee0:	tst	r2, #64	; 0x40
   2aee4:	beq	2b084 <__assert_fail@plt+0x194e0>
   2aee8:	tst	r2, #128	; 0x80
   2aeec:	beq	2a794 <__assert_fail@plt+0x18bf0>
   2aef0:	ldr	r2, [r9]
   2aef4:	bic	r2, r2, #1
   2aef8:	str	r2, [r9]
   2aefc:	b	2a794 <__assert_fail@plt+0x18bf0>
   2af00:	ldr	r2, [r9]
   2af04:	ldr	r1, [sp, #128]	; 0x80
   2af08:	ldr	r0, [sp, #132]	; 0x84
   2af0c:	tst	r2, #1024	; 0x400
   2af10:	str	r1, [r9]
   2af14:	strd	r0, [r9, #4]
   2af18:	str	r0, [r9, #12]
   2af1c:	str	r1, [r9, #16]
   2af20:	str	r0, [r9, #20]
   2af24:	str	r1, [r9, #24]
   2af28:	str	r0, [r9, #28]
   2af2c:	beq	2a488 <__assert_fail@plt+0x188e4>
   2af30:	mov	r2, #1024	; 0x400
   2af34:	tst	r3, #128	; 0x80
   2af38:	str	r2, [r9]
   2af3c:	beq	2a7ac <__assert_fail@plt+0x18c08>
   2af40:	ldr	r3, [sp, #128]	; 0x80
   2af44:	ldr	r2, [sp, #132]	; 0x84
   2af48:	str	r3, [r9]
   2af4c:	strd	r2, [r9, #4]
   2af50:	strd	r2, [r9, #12]
   2af54:	strd	r2, [r9, #20]
   2af58:	str	r2, [r9, #28]
   2af5c:	b	2a488 <__assert_fail@plt+0x188e4>
   2af60:	ldr	r3, [sp, #48]	; 0x30
   2af64:	lsl	r3, r3, #1
   2af68:	mov	r2, r3
   2af6c:	mov	r3, r2
   2af70:	ldr	r2, [sp, #48]	; 0x30
   2af74:	ldr	r4, [sp, #108]	; 0x6c
   2af78:	add	r1, r3, r2
   2af7c:	add	r5, r4, r1, lsl #2
   2af80:	add	r4, r4, #12
   2af84:	ldr	r0, [r4, #-4]
   2af88:	bl	19610 <__assert_fail@plt+0x7a6c>
   2af8c:	cmp	r5, r4
   2af90:	bne	2af80 <__assert_fail@plt+0x193dc>
   2af94:	mov	r0, #0
   2af98:	add	sp, sp, #14528	; 0x38c0
   2af9c:	add	sp, sp, #60	; 0x3c
   2afa0:	ldrd	r4, [sp]
   2afa4:	ldrd	r6, [sp, #8]
   2afa8:	ldrd	r8, [sp, #16]
   2afac:	ldrd	sl, [sp, #24]
   2afb0:	add	sp, sp, #32
   2afb4:	pop	{pc}		; (ldr pc, [sp], #4)
   2afb8:	ldr	r3, [sp, #48]	; 0x30
   2afbc:	mov	fp, r2
   2afc0:	cmp	r3, fp
   2afc4:	bne	2ae28 <__assert_fail@plt+0x19284>
   2afc8:	ldr	r2, [sp, #100]	; 0x64
   2afcc:	lsl	sl, r3, #1
   2afd0:	add	ip, sp, #3312	; 0xcf0
   2afd4:	add	ip, ip, #8
   2afd8:	ldrd	r6, [r9]
   2afdc:	add	r1, sl, r3
   2afe0:	add	r5, ip, r1, lsl #2
   2afe4:	str	ip, [sp, #108]	; 0x6c
   2afe8:	ldr	lr, [sp, #112]	; 0x70
   2afec:	ldr	r0, [r2, #12]
   2aff0:	add	r2, sp, #14528	; 0x38c0
   2aff4:	add	r2, r2, #56	; 0x38
   2aff8:	add	r3, r2, r3, lsl #5
   2affc:	mov	r2, #1
   2b000:	sub	r3, r3, #8192	; 0x2000
   2b004:	ldr	r4, [r0, lr]
   2b008:	mov	r0, #4
   2b00c:	strd	r6, [r3]
   2b010:	ldrd	r6, [r9, #16]
   2b014:	str	r2, [ip, r1, lsl #2]
   2b018:	str	r2, [r5, #4]
   2b01c:	strd	r6, [sp]
   2b020:	ldrd	r6, [r9, #8]
   2b024:	strd	r6, [r3, #8]
   2b028:	ldrd	r6, [sp]
   2b02c:	strd	r6, [r3, #16]
   2b030:	ldrd	r6, [r9, #24]
   2b034:	strd	r6, [r3, #24]
   2b038:	bl	39028 <__assert_fail@plt+0x27484>
   2b03c:	cmp	r0, #0
   2b040:	str	r0, [r5, #8]
   2b044:	beq	2b2fc <__assert_fail@plt+0x19758>
   2b048:	ldr	r3, [sp, #100]	; 0x64
   2b04c:	str	r4, [r0]
   2b050:	ldr	r6, [r3, #8]
   2b054:	ldr	r3, [sp, #48]	; 0x30
   2b058:	add	r3, r3, #1
   2b05c:	str	r3, [sp, #48]	; 0x30
   2b060:	b	2af40 <__assert_fail@plt+0x1939c>
   2b064:	ldr	r2, [sp, #116]	; 0x74
   2b068:	mvn	r0, #0
   2b06c:	mvn	r1, #0
   2b070:	strd	r0, [r9]
   2b074:	strd	r0, [r9, #8]
   2b078:	ldr	r2, [r2, #128]	; 0x80
   2b07c:	tst	r2, #64	; 0x40
   2b080:	bne	2aee8 <__assert_fail@plt+0x19344>
   2b084:	ldr	r1, [r9]
   2b088:	bic	r1, r1, #1024	; 0x400
   2b08c:	str	r1, [r9]
   2b090:	b	2aee8 <__assert_fail@plt+0x19344>
   2b094:	mvn	r0, #0
   2b098:	mvn	r1, #0
   2b09c:	strd	r0, [r9]
   2b0a0:	strd	r0, [r9, #8]
   2b0a4:	strd	r0, [r9, #16]
   2b0a8:	strd	r0, [r9, #24]
   2b0ac:	b	2aed8 <__assert_fail@plt+0x19334>
   2b0b0:	and	r2, r4, r1
   2b0b4:	ldr	r4, [sp]
   2b0b8:	and	r1, r5, ip
   2b0bc:	orr	ip, r2, r1
   2b0c0:	and	lr, lr, r8
   2b0c4:	ldr	r5, [sp, #8]
   2b0c8:	mov	r8, lr
   2b0cc:	str	r2, [r9]
   2b0d0:	ldr	r2, [sp, #12]
   2b0d4:	and	r4, r4, r0
   2b0d8:	ldr	r0, [sp, #16]
   2b0dc:	orr	ip, ip, r4
   2b0e0:	and	r5, r5, sl
   2b0e4:	ldr	r7, [sp, #24]
   2b0e8:	orr	ip, ip, r5
   2b0ec:	and	r2, r2, fp
   2b0f0:	orr	ip, ip, lr
   2b0f4:	stmib	r9, {r1, r4, r5, r8}
   2b0f8:	mov	fp, r2
   2b0fc:	orr	ip, ip, r2
   2b100:	ldr	r2, [sp, #32]
   2b104:	and	r0, r0, r7
   2b108:	str	fp, [r9, #20]
   2b10c:	ldr	r7, [sp, #40]	; 0x28
   2b110:	orr	ip, ip, r0
   2b114:	str	r0, [r9, #24]
   2b118:	and	r2, r2, r7
   2b11c:	orr	ip, ip, r2
   2b120:	str	r2, [r9, #28]
   2b124:	b	2a910 <__assert_fail@plt+0x18d6c>
   2b128:	ldr	r2, [r2, r1, lsl #3]
   2b12c:	ldm	r9, {r1, ip}
   2b130:	ldm	r2, {r0, lr}
   2b134:	ldr	r4, [r2, #8]
   2b138:	orr	r1, r1, r0
   2b13c:	orr	ip, ip, lr
   2b140:	ldr	r0, [r9, #8]
   2b144:	stm	r9, {r1, ip}
   2b148:	ldr	lr, [r2, #12]
   2b14c:	ldr	r1, [r9, #12]
   2b150:	orr	r0, r0, r4
   2b154:	str	r0, [r9, #8]
   2b158:	ldr	r4, [r2, #16]
   2b15c:	orr	r1, r1, lr
   2b160:	ldr	r0, [r9, #16]
   2b164:	ldr	ip, [r2, #20]
   2b168:	str	r1, [r9, #12]
   2b16c:	ldr	lr, [r9, #20]
   2b170:	orr	r0, r0, r4
   2b174:	ldr	r1, [r2, #24]
   2b178:	str	r0, [r9, #16]
   2b17c:	ldr	r0, [r9, #24]
   2b180:	orr	ip, lr, ip
   2b184:	ldr	r2, [r2, #28]
   2b188:	str	ip, [r9, #20]
   2b18c:	ldr	ip, [r9, #28]
   2b190:	orr	r1, r0, r1
   2b194:	str	r1, [r9, #24]
   2b198:	orr	r2, ip, r2
   2b19c:	str	r2, [r9, #28]
   2b1a0:	b	2a794 <__assert_fail@plt+0x18bf0>
   2b1a4:	ldr	r2, [sp]
   2b1a8:	bic	ip, r5, ip
   2b1ac:	bic	r0, r4, r0
   2b1b0:	bic	r3, r8, r3
   2b1b4:	bic	r7, fp, r7
   2b1b8:	str	ip, [r9]
   2b1bc:	str	r3, [r9, #12]
   2b1c0:	str	r7, [r9, #16]
   2b1c4:	bic	r1, r2, r1
   2b1c8:	orr	r2, ip, r0
   2b1cc:	orr	r2, r2, r1
   2b1d0:	strd	r0, [r9, #4]
   2b1d4:	orr	r2, r2, r3
   2b1d8:	ldrd	r0, [sp, #8]
   2b1dc:	orr	r2, r2, r7
   2b1e0:	ldr	r3, [sp, #16]
   2b1e4:	bic	ip, r1, lr
   2b1e8:	ldr	r1, [sp, #24]
   2b1ec:	bic	sl, r0, sl
   2b1f0:	orr	r2, r2, sl
   2b1f4:	orr	r2, r2, ip
   2b1f8:	str	sl, [r9, #20]
   2b1fc:	str	ip, [r9, #24]
   2b200:	bic	r3, r3, r1
   2b204:	orr	r2, r2, r3
   2b208:	str	r3, [r9, #28]
   2b20c:	b	2aa50 <__assert_fail@plt+0x18eac>
   2b210:	ldr	r3, [sp, #96]	; 0x60
   2b214:	ldrb	r3, [r3, #6]
   2b218:	tst	r3, #64	; 0x40
   2b21c:	beq	2a92c <__assert_fail@plt+0x18d88>
   2b220:	b	2af40 <__assert_fail@plt+0x1939c>
   2b224:	ldr	r2, [sp, #96]	; 0x60
   2b228:	ldrb	r2, [r2, #6]
   2b22c:	tst	r2, #64	; 0x40
   2b230:	bne	2a7c0 <__assert_fail@plt+0x18c1c>
   2b234:	b	2af40 <__assert_fail@plt+0x1939c>
   2b238:	ldr	r3, [r9, #-2160]	; 0xfffff790
   2b23c:	cmp	r3, #0
   2b240:	beq	2b2a4 <__assert_fail@plt+0x19700>
   2b244:	ldr	r0, [r9, #-2148]	; 0xfffff79c
   2b248:	ldr	r4, [sp, #108]	; 0x6c
   2b24c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2b250:	ldr	r3, [sp, #48]	; 0x30
   2b254:	add	r5, r3, r3, lsl #1
   2b258:	add	r5, r4, r5, lsl #2
   2b25c:	add	r4, r4, #12
   2b260:	ldr	r0, [r4, #-4]
   2b264:	bl	19610 <__assert_fail@plt+0x7a6c>
   2b268:	cmp	r4, r5
   2b26c:	bne	2b25c <__assert_fail@plt+0x196b8>
   2b270:	b	2af94 <__assert_fail@plt+0x193f0>
   2b274:	mov	r3, #1
   2b278:	add	r2, sp, #140	; 0x8c
   2b27c:	ldr	r0, [sp, #40]	; 0x28
   2b280:	mov	r1, fp
   2b284:	bl	29f88 <__assert_fail@plt+0x183e4>
   2b288:	add	r3, sp, #1264	; 0x4f0
   2b28c:	cmp	r0, #0
   2b290:	add	r3, r3, #8
   2b294:	str	r0, [r3, r8, lsl #2]
   2b298:	beq	2b238 <__assert_fail@plt+0x19694>
   2b29c:	cmp	r7, r0
   2b2a0:	beq	2b2b8 <__assert_fail@plt+0x19714>
   2b2a4:	ldr	r3, [fp, #92]	; 0x5c
   2b2a8:	cmp	r3, #2
   2b2ac:	ldr	r3, [sp, #52]	; 0x34
   2b2b0:	movge	r3, #1
   2b2b4:	str	r3, [sp, #52]	; 0x34
   2b2b8:	mov	r3, #2
   2b2bc:	add	r2, sp, #140	; 0x8c
   2b2c0:	ldr	r0, [sp, #40]	; 0x28
   2b2c4:	mov	r1, fp
   2b2c8:	bl	29f88 <__assert_fail@plt+0x183e4>
   2b2cc:	cmp	r0, #0
   2b2d0:	str	r0, [r9, r8, lsl #2]
   2b2d4:	bne	2a5e0 <__assert_fail@plt+0x18a3c>
   2b2d8:	ldr	r3, [r9, #-2160]	; 0xfffff790
   2b2dc:	cmp	r3, #0
   2b2e0:	beq	2a5e0 <__assert_fail@plt+0x18a3c>
   2b2e4:	b	2b244 <__assert_fail@plt+0x196a0>
   2b2e8:	mov	r2, r1
   2b2ec:	ldr	r1, [sp, #12]
   2b2f0:	str	r0, [r1]
   2b2f4:	str	r0, [r1, #4]
   2b2f8:	b	2af6c <__assert_fail@plt+0x193c8>
   2b2fc:	ldr	r3, [sp, #48]	; 0x30
   2b300:	mov	r2, sl
   2b304:	str	r0, [r5]
   2b308:	str	r0, [r5, #4]
   2b30c:	cmp	r3, #0
   2b310:	beq	2af94 <__assert_fail@plt+0x193f0>
   2b314:	b	2af6c <__assert_fail@plt+0x193c8>
   2b318:	ldr	r3, [r9, #-2160]	; 0xfffff790
   2b31c:	cmp	r3, #0
   2b320:	beq	2a5c4 <__assert_fail@plt+0x18a20>
   2b324:	b	2b244 <__assert_fail@plt+0x196a0>
   2b328:	add	r2, sp, #3312	; 0xcf0
   2b32c:	mov	r3, #12
   2b330:	add	r2, r2, #8
   2b334:	str	r3, [r9, #-2160]	; 0xfffff790
   2b338:	str	r2, [sp, #108]	; 0x6c
   2b33c:	b	2b248 <__assert_fail@plt+0x196a4>
   2b340:	ldr	r2, [lr]
   2b344:	ands	r2, r1, r2
   2b348:	bne	2b3a0 <__assert_fail@plt+0x197fc>
   2b34c:	add	r2, r2, #1
   2b350:	ldr	r8, [lr, r2, lsl #5]
   2b354:	tst	r1, r8
   2b358:	beq	2b34c <__assert_fail@plt+0x197a8>
   2b35c:	ldr	r8, [r5]
   2b360:	add	r2, r9, r2, lsl #2
   2b364:	tst	r1, r8
   2b368:	ldrne	r2, [r2, #-1024]	; 0xfffffc00
   2b36c:	ldreq	r2, [r2, #-2048]	; 0xfffff800
   2b370:	str	r2, [r0]
   2b374:	b	2a6e0 <__assert_fail@plt+0x18b3c>
   2b378:	bne	2af94 <__assert_fail@plt+0x193f0>
   2b37c:	mov	r1, #256	; 0x100
   2b380:	mov	r0, #4
   2b384:	bl	38fb4 <__assert_fail@plt+0x27410>
   2b388:	ldr	r2, [sp, #100]	; 0x64
   2b38c:	mov	r3, r0
   2b390:	adds	r0, r0, #0
   2b394:	movne	r0, #1
   2b398:	str	r3, [r2, #44]	; 0x2c
   2b39c:	b	2af98 <__assert_fail@plt+0x193f4>
   2b3a0:	mov	r2, #0
   2b3a4:	b	2b35c <__assert_fail@plt+0x197b8>
   2b3a8:	ldr	r2, [sp, #52]	; 0x34
   2b3ac:	ldr	r3, [r9, r0, lsl #2]
   2b3b0:	cmp	r2, #0
   2b3b4:	strne	r3, [r7, #1064]	; 0x428
   2b3b8:	str	r3, [r7, #40]	; 0x28
   2b3bc:	b	2a740 <__assert_fail@plt+0x18b9c>
   2b3c0:	mov	r1, #512	; 0x200
   2b3c4:	mov	r0, #4
   2b3c8:	bl	38fb4 <__assert_fail@plt+0x27410>
   2b3cc:	ldr	r3, [sp, #100]	; 0x64
   2b3d0:	cmp	r0, #0
   2b3d4:	mov	r7, r0
   2b3d8:	str	r0, [r3, #48]	; 0x30
   2b3dc:	beq	2b244 <__assert_fail@plt+0x196a0>
   2b3e0:	ldr	ip, [sp, #56]	; 0x38
   2b3e4:	add	r4, sp, #148	; 0x94
   2b3e8:	mov	lr, r0
   2b3ec:	add	r5, r0, #1024	; 0x400
   2b3f0:	ldr	r3, [r4, #4]!
   2b3f4:	cmp	r3, #0
   2b3f8:	movne	r0, lr
   2b3fc:	movne	r1, #1
   2b400:	beq	2b41c <__assert_fail@plt+0x19878>
   2b404:	tst	r3, #1
   2b408:	bne	2b430 <__assert_fail@plt+0x1988c>
   2b40c:	lsrs	r3, r3, #1
   2b410:	add	r0, r0, #4
   2b414:	lsl	r1, r1, #1
   2b418:	bne	2b404 <__assert_fail@plt+0x19860>
   2b41c:	add	lr, lr, #128	; 0x80
   2b420:	add	ip, ip, #4
   2b424:	cmp	r5, lr
   2b428:	bne	2b3f0 <__assert_fail@plt+0x1984c>
   2b42c:	b	2a704 <__assert_fail@plt+0x18b60>
   2b430:	ldr	r2, [ip]
   2b434:	ands	r2, r1, r2
   2b438:	bne	2b464 <__assert_fail@plt+0x198c0>
   2b43c:	add	r2, r2, #1
   2b440:	ldr	r6, [ip, r2, lsl #5]
   2b444:	tst	r1, r6
   2b448:	beq	2b43c <__assert_fail@plt+0x19898>
   2b44c:	add	r2, r9, r2, lsl #2
   2b450:	ldr	r6, [r2, #-2048]	; 0xfffff800
   2b454:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   2b458:	str	r6, [r0]
   2b45c:	str	r2, [r0, #1024]	; 0x400
   2b460:	b	2b40c <__assert_fail@plt+0x19868>
   2b464:	mov	r2, #0
   2b468:	b	2b44c <__assert_fail@plt+0x198a8>
   2b46c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b470:	mov	r4, r0
   2b474:	ldr	r0, [r0, #84]	; 0x54
   2b478:	ldr	r5, [r1, #4]
   2b47c:	strd	r6, [sp, #8]
   2b480:	mov	r7, r3
   2b484:	mov	r6, #0
   2b488:	strd	r8, [sp, #16]
   2b48c:	mov	r9, r2
   2b490:	ldr	r3, [r0]
   2b494:	strd	sl, [sp, #24]
   2b498:	str	lr, [sp, #32]
   2b49c:	sub	sp, sp, #76	; 0x4c
   2b4a0:	ldr	r2, [r4, #120]	; 0x78
   2b4a4:	str	r0, [sp, #16]
   2b4a8:	str	r1, [sp, #28]
   2b4ac:	ldr	r1, [sp, #116]	; 0x74
   2b4b0:	ldr	r3, [r3, r9, lsl #3]
   2b4b4:	add	r2, r1, r2
   2b4b8:	cmp	r2, r5
   2b4bc:	str	r3, [sp, #20]
   2b4c0:	str	r6, [sp, #40]	; 0x28
   2b4c4:	bge	2bb70 <__assert_fail@plt+0x19fcc>
   2b4c8:	ldr	r3, [sp, #28]
   2b4cc:	ldr	r2, [r4, #88]	; 0x58
   2b4d0:	ldr	r6, [r3]
   2b4d4:	ldr	r5, [r3, #8]
   2b4d8:	ldr	r3, [r4, #40]	; 0x28
   2b4dc:	cmp	r6, #0
   2b4e0:	str	r3, [sp, #36]	; 0x24
   2b4e4:	ldr	r3, [r4, #100]	; 0x64
   2b4e8:	str	r3, [sp, #32]
   2b4ec:	bne	2b91c <__assert_fail@plt+0x19d78>
   2b4f0:	sub	r1, r7, #1
   2b4f4:	mov	r0, r4
   2b4f8:	str	r7, [r4, #40]	; 0x28
   2b4fc:	str	r5, [r4, #100]	; 0x64
   2b500:	bl	25138 <__assert_fail@plt+0x13594>
   2b504:	mov	r8, r0
   2b508:	mov	r2, #1
   2b50c:	mov	r3, #1
   2b510:	mov	r0, #4
   2b514:	strd	r2, [sp, #48]	; 0x30
   2b518:	bl	39028 <__assert_fail@plt+0x27484>
   2b51c:	cmp	r0, #0
   2b520:	str	r0, [sp, #56]	; 0x38
   2b524:	beq	2bbe0 <__assert_fail@plt+0x1a03c>
   2b528:	mov	ip, #0
   2b52c:	add	r5, sp, #48	; 0x30
   2b530:	str	r9, [r0]
   2b534:	mov	r1, r5
   2b538:	ldr	r0, [sp, #16]
   2b53c:	str	ip, [sp, #40]	; 0x28
   2b540:	ldr	r2, [sp, #20]
   2b544:	ldr	r3, [sp, #120]	; 0x78
   2b548:	bl	28d78 <__assert_fail@plt+0x171d4>
   2b54c:	cmp	r0, #0
   2b550:	str	r0, [sp, #40]	; 0x28
   2b554:	bne	2ba4c <__assert_fail@plt+0x19ea8>
   2b558:	ldr	r3, [sp, #52]	; 0x34
   2b55c:	mov	r6, r7
   2b560:	cmp	r3, #0
   2b564:	beq	2b590 <__assert_fail@plt+0x199ec>
   2b568:	mov	r2, r6
   2b56c:	mov	r0, r4
   2b570:	ldr	r3, [sp, #20]
   2b574:	ldr	r1, [sp, #120]	; 0x78
   2b578:	str	r1, [sp]
   2b57c:	mov	r1, r5
   2b580:	bl	29a5c <__assert_fail@plt+0x17eb8>
   2b584:	cmp	r0, #0
   2b588:	str	r0, [sp, #40]	; 0x28
   2b58c:	bne	2ba4c <__assert_fail@plt+0x19ea8>
   2b590:	mov	r3, r8
   2b594:	mov	r2, r5
   2b598:	ldr	r1, [sp, #16]
   2b59c:	add	r0, sp, #40	; 0x28
   2b5a0:	bl	29f88 <__assert_fail@plt+0x183e4>
   2b5a4:	subs	fp, r0, #0
   2b5a8:	beq	2bbe8 <__assert_fail@plt+0x1a044>
   2b5ac:	ldr	r3, [r4, #100]	; 0x64
   2b5b0:	str	fp, [r3, r6, lsl #2]
   2b5b4:	ldr	r3, [sp, #116]	; 0x74
   2b5b8:	cmp	r6, r3
   2b5bc:	bge	2b85c <__assert_fail@plt+0x19cb8>
   2b5c0:	ldr	r3, [r4, #120]	; 0x78
   2b5c4:	cmp	r3, #0
   2b5c8:	blt	2b85c <__assert_fail@plt+0x19cb8>
   2b5cc:	ldr	r3, [r4, #100]	; 0x64
   2b5d0:	mov	r2, #0
   2b5d4:	add	r9, r6, #1
   2b5d8:	str	r2, [sp, #8]
   2b5dc:	ldr	r1, [r3, r9, lsl #2]
   2b5e0:	lsl	r3, r9, #2
   2b5e4:	sub	r8, r9, #1
   2b5e8:	str	r3, [sp, #12]
   2b5ec:	mov	r3, #0
   2b5f0:	cmp	r1, r3
   2b5f4:	str	r3, [sp, #52]	; 0x34
   2b5f8:	beq	2ba1c <__assert_fail@plt+0x19e78>
   2b5fc:	add	r5, sp, #48	; 0x30
   2b600:	add	r1, r1, #4
   2b604:	mov	r0, r5
   2b608:	bl	24f74 <__assert_fail@plt+0x133d0>
   2b60c:	cmp	r0, #0
   2b610:	str	r0, [sp, #40]	; 0x28
   2b614:	bne	2ba4c <__assert_fail@plt+0x19ea8>
   2b618:	cmp	fp, #0
   2b61c:	beq	2b7a4 <__assert_fail@plt+0x19c00>
   2b620:	ldr	r3, [fp, #20]
   2b624:	mov	r2, #0
   2b628:	str	r2, [sp, #44]	; 0x2c
   2b62c:	str	r2, [sp, #60]	; 0x3c
   2b630:	str	r2, [sp, #64]	; 0x40
   2b634:	cmp	r3, r2
   2b638:	str	r2, [sp, #68]	; 0x44
   2b63c:	ldr	r7, [r4, #84]	; 0x54
   2b640:	ble	2bc18 <__assert_fail@plt+0x1a074>
   2b644:	str	r9, [sp, #24]
   2b648:	mov	r9, r2
   2b64c:	ldr	r3, [fp, #24]
   2b650:	ldr	r0, [r7]
   2b654:	ldr	r5, [r3]
   2b658:	lsl	sl, r5, #3
   2b65c:	add	r1, r0, sl
   2b660:	b	2b6d4 <__assert_fail@plt+0x19b30>
   2b664:	mov	r2, r8
   2b668:	mov	r0, r4
   2b66c:	bl	25250 <__assert_fail@plt+0x136ac>
   2b670:	cmp	r0, #0
   2b674:	beq	2b6b0 <__assert_fail@plt+0x19b0c>
   2b678:	lsl	sl, r5, #2
   2b67c:	ldr	r3, [sp, #48]	; 0x30
   2b680:	ldr	r2, [r7, #12]
   2b684:	cmp	r3, #0
   2b688:	ldr	r5, [r2, sl]
   2b68c:	beq	2b9cc <__assert_fail@plt+0x19e28>
   2b690:	ldr	r1, [sp, #52]	; 0x34
   2b694:	ldr	r6, [sp, #56]	; 0x38
   2b698:	cmp	r1, #0
   2b69c:	bne	2ba74 <__assert_fail@plt+0x19ed0>
   2b6a0:	str	r5, [r6]
   2b6a4:	ldr	r3, [sp, #52]	; 0x34
   2b6a8:	add	r3, r3, #1
   2b6ac:	str	r3, [sp, #52]	; 0x34
   2b6b0:	ldr	r3, [fp, #20]
   2b6b4:	add	r9, r9, #1
   2b6b8:	cmp	r9, r3
   2b6bc:	bge	2ba00 <__assert_fail@plt+0x19e5c>
   2b6c0:	ldr	r3, [fp, #24]
   2b6c4:	ldr	r0, [r7]
   2b6c8:	ldr	r5, [r3, r9, lsl #2]
   2b6cc:	lsl	sl, r5, #3
   2b6d0:	add	r1, r0, sl
   2b6d4:	ldrb	r3, [r1, #6]
   2b6d8:	tst	r3, #16
   2b6dc:	beq	2b664 <__assert_fail@plt+0x19ac0>
   2b6e0:	mov	r3, r4
   2b6e4:	mov	r2, r5
   2b6e8:	str	r8, [sp]
   2b6ec:	add	r1, r7, #128	; 0x80
   2b6f0:	bl	27d4c <__assert_fail@plt+0x161a8>
   2b6f4:	cmp	r0, #1
   2b6f8:	ble	2b9b8 <__assert_fail@plt+0x19e14>
   2b6fc:	ldr	r2, [r4, #100]	; 0x64
   2b700:	add	r6, r0, r8
   2b704:	lsl	sl, r5, #2
   2b708:	ldr	r3, [r7, #12]
   2b70c:	ldr	r1, [r2, r6, lsl #2]
   2b710:	ldr	r5, [r3, r5, lsl #2]
   2b714:	mov	r3, #0
   2b718:	str	r3, [sp, #64]	; 0x40
   2b71c:	cmp	r1, r3
   2b720:	beq	2b73c <__assert_fail@plt+0x19b98>
   2b724:	add	r1, r1, #4
   2b728:	add	r0, sp, #60	; 0x3c
   2b72c:	bl	24f74 <__assert_fail@plt+0x133d0>
   2b730:	cmp	r0, #0
   2b734:	str	r0, [sp, #44]	; 0x2c
   2b738:	bne	2b784 <__assert_fail@plt+0x19be0>
   2b73c:	mov	r1, r5
   2b740:	add	r0, sp, #60	; 0x3c
   2b744:	bl	24b78 <__assert_fail@plt+0x12fd4>
   2b748:	cmp	r0, #0
   2b74c:	beq	2ba3c <__assert_fail@plt+0x19e98>
   2b750:	add	r2, sp, #60	; 0x3c
   2b754:	mov	r1, r7
   2b758:	ldr	r5, [r4, #100]	; 0x64
   2b75c:	add	r0, sp, #44	; 0x2c
   2b760:	bl	29788 <__assert_fail@plt+0x17be4>
   2b764:	ldr	r3, [r4, #100]	; 0x64
   2b768:	str	r0, [r5, r6, lsl #2]
   2b76c:	ldr	r3, [r3, r6, lsl #2]
   2b770:	cmp	r3, #0
   2b774:	bne	2b67c <__assert_fail@plt+0x19ad8>
   2b778:	ldr	r3, [sp, #44]	; 0x2c
   2b77c:	cmp	r3, #0
   2b780:	beq	2b67c <__assert_fail@plt+0x19ad8>
   2b784:	ldr	r9, [sp, #24]
   2b788:	ldr	r0, [sp, #68]	; 0x44
   2b78c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2b790:	ldr	r3, [sp, #44]	; 0x2c
   2b794:	cmp	r3, #0
   2b798:	str	r3, [sp, #40]	; 0x28
   2b79c:	bne	2ba4c <__assert_fail@plt+0x19ea8>
   2b7a0:	add	r5, sp, #48	; 0x30
   2b7a4:	ldr	r3, [sp, #52]	; 0x34
   2b7a8:	mov	r6, r9
   2b7ac:	cmp	r3, #0
   2b7b0:	beq	2b7fc <__assert_fail@plt+0x19c58>
   2b7b4:	mov	r1, r5
   2b7b8:	ldr	r0, [sp, #16]
   2b7bc:	ldr	r2, [sp, #20]
   2b7c0:	ldr	r3, [sp, #120]	; 0x78
   2b7c4:	bl	28d78 <__assert_fail@plt+0x171d4>
   2b7c8:	cmp	r0, #0
   2b7cc:	str	r0, [sp, #40]	; 0x28
   2b7d0:	bne	2ba4c <__assert_fail@plt+0x19ea8>
   2b7d4:	mov	r2, r9
   2b7d8:	mov	r0, r4
   2b7dc:	ldr	r3, [sp, #20]
   2b7e0:	ldr	r1, [sp, #120]	; 0x78
   2b7e4:	str	r1, [sp]
   2b7e8:	mov	r1, r5
   2b7ec:	bl	29a5c <__assert_fail@plt+0x17eb8>
   2b7f0:	cmp	r0, #0
   2b7f4:	str	r0, [sp, #40]	; 0x28
   2b7f8:	bne	2ba4c <__assert_fail@plt+0x19ea8>
   2b7fc:	mov	r1, r8
   2b800:	mov	r0, r4
   2b804:	ldr	r2, [r4, #88]	; 0x58
   2b808:	bl	25138 <__assert_fail@plt+0x13594>
   2b80c:	mov	r3, r0
   2b810:	mov	r2, r5
   2b814:	ldr	r1, [sp, #16]
   2b818:	add	r0, sp, #40	; 0x28
   2b81c:	bl	29f88 <__assert_fail@plt+0x183e4>
   2b820:	subs	fp, r0, #0
   2b824:	beq	2baf4 <__assert_fail@plt+0x19f50>
   2b828:	mov	r2, #0
   2b82c:	ldr	r3, [r4, #100]	; 0x64
   2b830:	str	r2, [sp, #8]
   2b834:	ldr	r2, [sp, #12]
   2b838:	str	fp, [r3, r2]
   2b83c:	ldr	r2, [sp, #116]	; 0x74
   2b840:	cmp	r2, r9
   2b844:	ble	2b85c <__assert_fail@plt+0x19cb8>
   2b848:	ldr	r1, [sp, #8]
   2b84c:	add	r9, r9, #1
   2b850:	ldr	r2, [r4, #120]	; 0x78
   2b854:	cmp	r2, r1
   2b858:	bge	2b5dc <__assert_fail@plt+0x19a38>
   2b85c:	ldr	r0, [sp, #56]	; 0x38
   2b860:	bl	19610 <__assert_fail@plt+0x7a6c>
   2b864:	ldr	r3, [r4, #100]	; 0x64
   2b868:	ldr	r2, [sp, #116]	; 0x74
   2b86c:	ldr	r3, [r3, r2, lsl #2]
   2b870:	cmp	r3, #0
   2b874:	beq	2bbf8 <__assert_fail@plt+0x1a054>
   2b878:	ldr	r2, [sp, #28]
   2b87c:	ldr	r1, [sp, #32]
   2b880:	str	r6, [r2]
   2b884:	ldr	r2, [sp, #36]	; 0x24
   2b888:	str	r2, [r4, #40]	; 0x28
   2b88c:	ldr	r2, [r3, #8]
   2b890:	str	r1, [r4, #100]	; 0x64
   2b894:	cmp	r2, #0
   2b898:	ble	2bc20 <__assert_fail@plt+0x1a07c>
   2b89c:	subs	r2, r2, #1
   2b8a0:	ldr	ip, [r3, #12]
   2b8a4:	moveq	r1, r2
   2b8a8:	beq	2b908 <__assert_fail@plt+0x19d64>
   2b8ac:	ldr	lr, [sp, #112]	; 0x70
   2b8b0:	mov	r1, #0
   2b8b4:	add	r3, r1, r2
   2b8b8:	lsr	r3, r3, #1
   2b8bc:	ldr	r0, [ip, r3, lsl #2]
   2b8c0:	cmp	r0, lr
   2b8c4:	blt	2bbd0 <__assert_fail@plt+0x1a02c>
   2b8c8:	cmp	r3, r1
   2b8cc:	bls	2b908 <__assert_fail@plt+0x19d64>
   2b8d0:	add	r2, r3, r1
   2b8d4:	lsr	r2, r2, #1
   2b8d8:	ldr	r0, [ip, r2, lsl #2]
   2b8dc:	cmp	lr, r0
   2b8e0:	ble	2b8f8 <__assert_fail@plt+0x19d54>
   2b8e4:	b	2bbc4 <__assert_fail@plt+0x1a020>
   2b8e8:	ldr	r0, [ip, r3, lsl #2]
   2b8ec:	cmp	lr, r0
   2b8f0:	bgt	2bbd0 <__assert_fail@plt+0x1a02c>
   2b8f4:	mov	r2, r3
   2b8f8:	add	r3, r2, r1
   2b8fc:	cmp	r2, r1
   2b900:	lsr	r3, r3, #1
   2b904:	bhi	2b8e8 <__assert_fail@plt+0x19d44>
   2b908:	ldr	r0, [ip, r1, lsl #2]
   2b90c:	ldr	r3, [sp, #112]	; 0x70
   2b910:	subs	r0, r0, r3
   2b914:	movne	r0, #1
   2b918:	b	2ba58 <__assert_fail@plt+0x19eb4>
   2b91c:	sub	r1, r6, #1
   2b920:	mov	r0, r4
   2b924:	str	r6, [r4, #40]	; 0x28
   2b928:	str	r5, [r4, #100]	; 0x64
   2b92c:	bl	25138 <__assert_fail@plt+0x13594>
   2b930:	cmp	r6, r7
   2b934:	mov	r8, r0
   2b938:	beq	2b508 <__assert_fail@plt+0x19964>
   2b93c:	ldr	fp, [r5, r6, lsl #2]
   2b940:	cmp	fp, #0
   2b944:	beq	2bb60 <__assert_fail@plt+0x19fbc>
   2b948:	ldrb	r3, [fp, #52]	; 0x34
   2b94c:	ands	r3, r3, #64	; 0x40
   2b950:	streq	r3, [sp, #48]	; 0x30
   2b954:	streq	r3, [sp, #52]	; 0x34
   2b958:	streq	r3, [sp, #56]	; 0x38
   2b95c:	beq	2b5b4 <__assert_fail@plt+0x19a10>
   2b960:	ldr	r3, [fp, #8]
   2b964:	cmp	r3, #0
   2b968:	str	r3, [sp, #52]	; 0x34
   2b96c:	ble	2bb1c <__assert_fail@plt+0x19f78>
   2b970:	lsl	r0, r3, #2
   2b974:	str	r3, [sp, #48]	; 0x30
   2b978:	bl	39028 <__assert_fail@plt+0x27484>
   2b97c:	cmp	r0, #0
   2b980:	str	r0, [sp, #56]	; 0x38
   2b984:	beq	2bbe0 <__assert_fail@plt+0x1a03c>
   2b988:	ldr	r2, [fp, #8]
   2b98c:	ldr	r1, [fp, #12]
   2b990:	lsl	r2, r2, #2
   2b994:	bl	11784 <memcpy@plt>
   2b998:	ldrb	r3, [fp, #52]	; 0x34
   2b99c:	mov	r2, #0
   2b9a0:	str	r2, [sp, #40]	; 0x28
   2b9a4:	tst	r3, #64	; 0x40
   2b9a8:	beq	2b5b4 <__assert_fail@plt+0x19a10>
   2b9ac:	add	r5, sp, #48	; 0x30
   2b9b0:	ldr	r3, [sp, #52]	; 0x34
   2b9b4:	b	2b560 <__assert_fail@plt+0x199bc>
   2b9b8:	cmp	r0, #0
   2b9bc:	bne	2b678 <__assert_fail@plt+0x19ad4>
   2b9c0:	ldr	r0, [r7]
   2b9c4:	add	r1, r0, sl
   2b9c8:	b	2b664 <__assert_fail@plt+0x19ac0>
   2b9cc:	mov	r2, #1
   2b9d0:	mov	r3, #1
   2b9d4:	mov	r0, #4
   2b9d8:	strd	r2, [sp, #48]	; 0x30
   2b9dc:	bl	39028 <__assert_fail@plt+0x27484>
   2b9e0:	cmp	r0, #0
   2b9e4:	str	r0, [sp, #56]	; 0x38
   2b9e8:	beq	2ba30 <__assert_fail@plt+0x19e8c>
   2b9ec:	str	r5, [r0]
   2b9f0:	add	r9, r9, #1
   2b9f4:	ldr	r3, [fp, #20]
   2b9f8:	cmp	r9, r3
   2b9fc:	blt	2b6c0 <__assert_fail@plt+0x19b1c>
   2ba00:	ldr	r9, [sp, #24]
   2ba04:	ldr	r0, [sp, #68]	; 0x44
   2ba08:	bl	19610 <__assert_fail@plt+0x7a6c>
   2ba0c:	mov	r3, #0
   2ba10:	add	r5, sp, #48	; 0x30
   2ba14:	str	r3, [sp, #40]	; 0x28
   2ba18:	b	2b7a4 <__assert_fail@plt+0x19c00>
   2ba1c:	cmp	fp, #0
   2ba20:	bne	2b620 <__assert_fail@plt+0x19a7c>
   2ba24:	mov	r6, r9
   2ba28:	add	r5, sp, #48	; 0x30
   2ba2c:	b	2b7fc <__assert_fail@plt+0x19c58>
   2ba30:	mov	r2, #0
   2ba34:	mov	r3, #0
   2ba38:	strd	r2, [sp, #48]	; 0x30
   2ba3c:	ldr	r0, [sp, #68]	; 0x44
   2ba40:	bl	19610 <__assert_fail@plt+0x7a6c>
   2ba44:	mov	r3, #12
   2ba48:	str	r3, [sp, #40]	; 0x28
   2ba4c:	ldr	r0, [sp, #56]	; 0x38
   2ba50:	bl	19610 <__assert_fail@plt+0x7a6c>
   2ba54:	ldr	r0, [sp, #40]	; 0x28
   2ba58:	add	sp, sp, #76	; 0x4c
   2ba5c:	ldrd	r4, [sp]
   2ba60:	ldrd	r6, [sp, #8]
   2ba64:	ldrd	r8, [sp, #16]
   2ba68:	ldrd	sl, [sp, #24]
   2ba6c:	add	sp, sp, #32
   2ba70:	pop	{pc}		; (ldr pc, [sp], #4)
   2ba74:	cmp	r3, r1
   2ba78:	beq	2bb38 <__assert_fail@plt+0x19f94>
   2ba7c:	ldr	r3, [r6]
   2ba80:	mov	r2, r1
   2ba84:	cmp	r5, r3
   2ba88:	bge	2babc <__assert_fail@plt+0x19f18>
   2ba8c:	cmp	r1, #0
   2ba90:	ble	2baa8 <__assert_fail@plt+0x19f04>
   2ba94:	lsl	r2, r1, #2
   2ba98:	add	r0, r6, #4
   2ba9c:	mov	r1, r6
   2baa0:	bl	11748 <memmove@plt>
   2baa4:	mov	r2, #0
   2baa8:	str	r5, [r6, r2, lsl #2]
   2baac:	ldr	r3, [sp, #52]	; 0x34
   2bab0:	add	r3, r3, #1
   2bab4:	str	r3, [sp, #52]	; 0x34
   2bab8:	b	2b6b0 <__assert_fail@plt+0x19b0c>
   2babc:	sub	r3, r1, #-1073741823	; 0xc0000001
   2bac0:	ldr	r0, [r6, r3, lsl #2]
   2bac4:	lsl	r3, r3, #2
   2bac8:	cmp	r0, r5
   2bacc:	ble	2baa8 <__assert_fail@plt+0x19f04>
   2bad0:	add	r3, r3, #4
   2bad4:	add	r3, r6, r3
   2bad8:	str	r0, [r3], #-4
   2badc:	sub	r1, r1, #1
   2bae0:	ldr	r0, [r3, #-4]
   2bae4:	mov	r2, r1
   2bae8:	cmp	r5, r0
   2baec:	blt	2bad8 <__assert_fail@plt+0x19f34>
   2baf0:	b	2baa8 <__assert_fail@plt+0x19f04>
   2baf4:	ldr	r3, [sp, #40]	; 0x28
   2baf8:	cmp	r3, #0
   2bafc:	bne	2ba4c <__assert_fail@plt+0x19ea8>
   2bb00:	ldr	r2, [sp, #8]
   2bb04:	ldr	r3, [r4, #100]	; 0x64
   2bb08:	add	r2, r2, #1
   2bb0c:	str	r2, [sp, #8]
   2bb10:	ldr	r2, [sp, #12]
   2bb14:	str	fp, [r3, r2]
   2bb18:	b	2b83c <__assert_fail@plt+0x19c98>
   2bb1c:	mov	r3, #0
   2bb20:	add	r5, sp, #48	; 0x30
   2bb24:	str	r3, [sp, #40]	; 0x28
   2bb28:	str	r3, [sp, #48]	; 0x30
   2bb2c:	str	r3, [r5, #4]
   2bb30:	str	r3, [r5, #8]
   2bb34:	b	2b590 <__assert_fail@plt+0x199ec>
   2bb38:	lsl	r3, r1, #1
   2bb3c:	mov	r0, r6
   2bb40:	lsl	r1, r1, #3
   2bb44:	str	r3, [sp, #48]	; 0x30
   2bb48:	bl	39064 <__assert_fail@plt+0x274c0>
   2bb4c:	subs	r6, r0, #0
   2bb50:	beq	2ba3c <__assert_fail@plt+0x19e98>
   2bb54:	str	r6, [sp, #56]	; 0x38
   2bb58:	ldr	r1, [sp, #52]	; 0x34
   2bb5c:	b	2ba7c <__assert_fail@plt+0x19ed8>
   2bb60:	str	fp, [sp, #48]	; 0x30
   2bb64:	str	fp, [sp, #52]	; 0x34
   2bb68:	str	fp, [sp, #56]	; 0x38
   2bb6c:	b	2b5b4 <__assert_fail@plt+0x19a10>
   2bb70:	mvn	r3, #-2147483648	; 0x80000000
   2bb74:	add	sl, r2, #1
   2bb78:	sub	r3, r3, r5
   2bb7c:	cmp	r3, sl
   2bb80:	blt	2bbe0 <__assert_fail@plt+0x1a03c>
   2bb84:	add	r8, r5, sl
   2bb88:	cmn	r8, #-1073741823	; 0xc0000001
   2bb8c:	bhi	2bbe0 <__assert_fail@plt+0x1a03c>
   2bb90:	ldr	fp, [sp, #28]
   2bb94:	lsl	r1, r8, #2
   2bb98:	ldr	r0, [fp, #8]
   2bb9c:	bl	39064 <__assert_fail@plt+0x274c0>
   2bba0:	subs	r3, r0, #0
   2bba4:	beq	2bbe0 <__assert_fail@plt+0x1a03c>
   2bba8:	lsl	r2, sl, #2
   2bbac:	mov	r1, r6
   2bbb0:	str	r8, [fp, #4]
   2bbb4:	add	r0, r3, r5, lsl #2
   2bbb8:	str	r3, [fp, #8]
   2bbbc:	bl	119e8 <memset@plt>
   2bbc0:	b	2b4c8 <__assert_fail@plt+0x19924>
   2bbc4:	mov	r1, r2
   2bbc8:	mov	r2, r3
   2bbcc:	mov	r3, r1
   2bbd0:	add	r1, r3, #1
   2bbd4:	cmp	r1, r2
   2bbd8:	bcc	2b8b4 <__assert_fail@plt+0x19d10>
   2bbdc:	b	2b908 <__assert_fail@plt+0x19d64>
   2bbe0:	mov	r0, #12
   2bbe4:	b	2ba58 <__assert_fail@plt+0x19eb4>
   2bbe8:	ldr	r3, [sp, #40]	; 0x28
   2bbec:	cmp	r3, #0
   2bbf0:	beq	2b5ac <__assert_fail@plt+0x19a08>
   2bbf4:	b	2ba4c <__assert_fail@plt+0x19ea8>
   2bbf8:	ldr	r3, [sp, #28]
   2bbfc:	mov	r0, #1
   2bc00:	str	r6, [r3]
   2bc04:	ldr	r3, [sp, #36]	; 0x24
   2bc08:	str	r3, [r4, #40]	; 0x28
   2bc0c:	ldr	r3, [sp, #32]
   2bc10:	str	r3, [r4, #100]	; 0x64
   2bc14:	b	2ba58 <__assert_fail@plt+0x19eb4>
   2bc18:	mov	r0, #0
   2bc1c:	b	2ba08 <__assert_fail@plt+0x19e64>
   2bc20:	mov	r0, #1
   2bc24:	b	2ba58 <__assert_fail@plt+0x19eb4>
   2bc28:	mov	ip, r2
   2bc2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bc30:	mov	r4, r0
   2bc34:	strd	r6, [sp, #8]
   2bc38:	mov	r6, r2
   2bc3c:	mov	r7, r3
   2bc40:	strd	r8, [sp, #16]
   2bc44:	mov	r3, #8
   2bc48:	mov	r8, r1
   2bc4c:	strd	sl, [sp, #24]
   2bc50:	str	lr, [sp, #32]
   2bc54:	sub	sp, sp, #20
   2bc58:	ldr	r2, [ip], #8
   2bc5c:	str	r7, [sp]
   2bc60:	ldr	r5, [sp, #56]	; 0x38
   2bc64:	mov	r1, ip
   2bc68:	str	r5, [sp, #4]
   2bc6c:	str	r3, [sp, #8]
   2bc70:	ldr	r3, [r6, #4]
   2bc74:	bl	2b46c <__assert_fail@plt+0x198c8>
   2bc78:	subs	fp, r0, #0
   2bc7c:	beq	2bca0 <__assert_fail@plt+0x1a0fc>
   2bc80:	mov	r0, fp
   2bc84:	add	sp, sp, #20
   2bc88:	ldrd	r4, [sp]
   2bc8c:	ldrd	r6, [sp, #8]
   2bc90:	ldrd	r8, [sp, #16]
   2bc94:	ldrd	sl, [sp, #24]
   2bc98:	add	sp, sp, #32
   2bc9c:	pop	{pc}		; (ldr pc, [sp], #4)
   2bca0:	ldr	r3, [r4, #108]	; 0x6c
   2bca4:	ldr	r1, [r4, #112]	; 0x70
   2bca8:	ldr	r9, [r6, #4]
   2bcac:	ldr	sl, [r8]
   2bcb0:	cmp	r3, r1
   2bcb4:	ldr	r0, [r4, #116]	; 0x74
   2bcb8:	movlt	lr, r9
   2bcbc:	bge	2bd58 <__assert_fail@plt+0x1a1b4>
   2bcc0:	add	r2, r3, r3, lsl #1
   2bcc4:	cmp	r3, #0
   2bcc8:	lsl	r2, r2, #3
   2bccc:	ble	2bce8 <__assert_fail@plt+0x1a144>
   2bcd0:	sub	r1, r2, #24
   2bcd4:	add	r1, r0, r1
   2bcd8:	ldr	ip, [r1, #4]
   2bcdc:	cmp	r5, ip
   2bce0:	moveq	ip, #1
   2bce4:	strbeq	ip, [r1, #20]
   2bce8:	cmp	sl, r9
   2bcec:	add	ip, r0, r2
   2bcf0:	str	r7, [r0, r2]
   2bcf4:	add	r3, r3, #1
   2bcf8:	movne	r0, #0
   2bcfc:	mvneq	r0, #0
   2bd00:	mov	r1, #0
   2bd04:	stmib	ip, {r5, sl}
   2bd08:	str	r9, [ip, #12]
   2bd0c:	sub	r2, r9, sl
   2bd10:	add	r5, r5, lr
   2bd14:	str	r0, [ip, #16]
   2bd18:	mov	r0, r4
   2bd1c:	str	r3, [r4, #108]	; 0x6c
   2bd20:	strb	r1, [ip, #20]
   2bd24:	ldr	r3, [r4, #120]	; 0x78
   2bd28:	cmp	r3, r2
   2bd2c:	strlt	r2, [r4, #120]	; 0x78
   2bd30:	ldr	r1, [r8]
   2bd34:	sub	r1, r5, r1
   2bd38:	add	sp, sp, #20
   2bd3c:	ldrd	r4, [sp]
   2bd40:	ldrd	r6, [sp, #8]
   2bd44:	ldrd	r8, [sp, #16]
   2bd48:	ldrd	sl, [sp, #24]
   2bd4c:	ldr	lr, [sp, #32]
   2bd50:	add	sp, sp, #36	; 0x24
   2bd54:	b	28a28 <__assert_fail@plt+0x16e84>
   2bd58:	add	r1, r1, r1, lsl #1
   2bd5c:	lsl	r1, r1, #4
   2bd60:	bl	39064 <__assert_fail@plt+0x274c0>
   2bd64:	cmp	r0, #0
   2bd68:	beq	2bdac <__assert_fail@plt+0x1a208>
   2bd6c:	ldr	r3, [r4, #108]	; 0x6c
   2bd70:	mov	r1, fp
   2bd74:	str	r0, [r4, #116]	; 0x74
   2bd78:	ldr	r2, [r4, #112]	; 0x70
   2bd7c:	add	r3, r3, r3, lsl #1
   2bd80:	add	r2, r2, r2, lsl #1
   2bd84:	add	r0, r0, r3, lsl #3
   2bd88:	lsl	r2, r2, #3
   2bd8c:	bl	119e8 <memset@plt>
   2bd90:	ldr	lr, [r6, #4]
   2bd94:	ldr	r2, [r4, #112]	; 0x70
   2bd98:	ldr	r3, [r4, #108]	; 0x6c
   2bd9c:	ldr	r0, [r4, #116]	; 0x74
   2bda0:	lsl	r2, r2, #1
   2bda4:	str	r2, [r4, #112]	; 0x70
   2bda8:	b	2bcc0 <__assert_fail@plt+0x1a11c>
   2bdac:	ldr	r0, [r4, #116]	; 0x74
   2bdb0:	mov	fp, #12
   2bdb4:	bl	19610 <__assert_fail@plt+0x7a6c>
   2bdb8:	b	2bc80 <__assert_fail@plt+0x1a0dc>
   2bdbc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2bdc0:	ldr	r4, [r2, #4]
   2bdc4:	ldrb	ip, [r1, #28]
   2bdc8:	ldr	r5, [r1]
   2bdcc:	adds	r3, r4, #0
   2bdd0:	strd	r6, [sp, #8]
   2bdd4:	movne	r3, #1
   2bdd8:	strd	r8, [sp, #16]
   2bddc:	ands	r3, r3, ip, lsr #4
   2bde0:	strd	sl, [sp, #24]
   2bde4:	str	lr, [sp, #32]
   2bde8:	sub	sp, sp, #20
   2bdec:	bne	2c064 <__assert_fail@plt+0x1a4c0>
   2bdf0:	mov	sl, r2
   2bdf4:	ldr	r2, [r5, #64]	; 0x40
   2bdf8:	mov	r6, #0
   2bdfc:	mov	r7, #0
   2be00:	mov	r1, r0
   2be04:	strd	r6, [sp, #8]
   2be08:	cmp	r2, #31
   2be0c:	beq	2c094 <__assert_fail@plt+0x1a4f0>
   2be10:	ldr	r0, [r5, #56]	; 0x38
   2be14:	lsl	r3, r2, #5
   2be18:	add	r2, r2, #1
   2be1c:	add	r8, r3, #4
   2be20:	mov	lr, #8
   2be24:	add	ip, r0, r3
   2be28:	str	r2, [r5, #64]	; 0x40
   2be2c:	add	r3, r3, #16
   2be30:	add	r8, r0, r8
   2be34:	strb	lr, [sp, #12]
   2be38:	add	r0, r0, r3
   2be3c:	mov	lr, #0
   2be40:	ldrd	r2, [sp, #8]
   2be44:	mvn	r6, #0
   2be48:	str	lr, [ip, #4]
   2be4c:	str	lr, [ip, #8]
   2be50:	str	lr, [ip, #12]
   2be54:	strd	r2, [ip, #24]
   2be58:	ldrb	r3, [r0, #14]
   2be5c:	bic	r3, r3, #12
   2be60:	strb	r3, [r0, #14]
   2be64:	str	lr, [ip, #16]
   2be68:	str	lr, [ip, #20]
   2be6c:	str	r6, [ip, #32]
   2be70:	ldr	r0, [r5, #64]	; 0x40
   2be74:	mov	r2, #0
   2be78:	mov	r3, #0
   2be7c:	strd	r2, [sp, #8]
   2be80:	cmp	r0, #31
   2be84:	beq	2c0c8 <__assert_fail@plt+0x1a524>
   2be88:	lsl	r3, r0, #5
   2be8c:	add	r2, r0, #1
   2be90:	ldr	r0, [r5, #56]	; 0x38
   2be94:	add	r9, r3, #4
   2be98:	mov	lr, #9
   2be9c:	add	ip, r0, r3
   2bea0:	str	r2, [r5, #64]	; 0x40
   2bea4:	add	r3, r3, #16
   2bea8:	add	r9, r0, r9
   2beac:	strb	lr, [sp, #12]
   2beb0:	add	r0, r0, r3
   2beb4:	mov	lr, #0
   2beb8:	ldrd	r2, [sp, #8]
   2bebc:	mvn	r6, #0
   2bec0:	str	lr, [ip, #4]
   2bec4:	str	lr, [ip, #8]
   2bec8:	str	lr, [ip, #12]
   2becc:	strd	r2, [ip, #24]
   2bed0:	ldrb	r3, [r0, #14]
   2bed4:	bic	r3, r3, #12
   2bed8:	strb	r3, [r0, #14]
   2bedc:	str	lr, [ip, #16]
   2bee0:	str	lr, [ip, #20]
   2bee4:	str	r6, [ip, #32]
   2bee8:	cmp	r4, #0
   2beec:	ldr	r0, [r5, #64]	; 0x40
   2bef0:	moveq	fp, r9
   2bef4:	beq	2bf7c <__assert_fail@plt+0x1a3d8>
   2bef8:	mov	r2, #0
   2befc:	mov	r3, #0
   2bf00:	cmp	r0, #31
   2bf04:	strd	r2, [sp, #8]
   2bf08:	beq	2c130 <__assert_fail@plt+0x1a58c>
   2bf0c:	ldr	r2, [r5, #56]	; 0x38
   2bf10:	lsl	r3, r0, #5
   2bf14:	add	r0, r0, #1
   2bf18:	add	fp, r3, #4
   2bf1c:	mov	lr, #16
   2bf20:	str	r0, [r5, #64]	; 0x40
   2bf24:	add	ip, r2, r3
   2bf28:	add	r0, r3, lr
   2bf2c:	add	fp, r2, fp
   2bf30:	strb	lr, [sp, #12]
   2bf34:	add	r0, r2, r0
   2bf38:	mov	lr, #0
   2bf3c:	ldrd	r2, [sp, #8]
   2bf40:	mvn	r6, #0
   2bf44:	cmp	r9, lr
   2bf48:	str	lr, [ip, #4]
   2bf4c:	str	r4, [ip, #8]
   2bf50:	str	r9, [ip, #12]
   2bf54:	strd	r2, [ip, #24]
   2bf58:	ldrb	r3, [r0, #14]
   2bf5c:	bic	r3, r3, #12
   2bf60:	strb	r3, [r0, #14]
   2bf64:	str	lr, [ip, #16]
   2bf68:	str	lr, [ip, #20]
   2bf6c:	str	r6, [ip, #32]
   2bf70:	str	fp, [r4]
   2bf74:	strne	fp, [r9]
   2bf78:	ldr	r0, [r5, #64]	; 0x40
   2bf7c:	mov	r2, #0
   2bf80:	mov	r3, #0
   2bf84:	cmp	r0, #31
   2bf88:	strd	r2, [sp, #8]
   2bf8c:	beq	2c0fc <__assert_fail@plt+0x1a558>
   2bf90:	ldr	r4, [r5, #56]	; 0x38
   2bf94:	lsl	r3, r0, #5
   2bf98:	add	r0, r0, #1
   2bf9c:	add	r2, r3, #4
   2bfa0:	mov	ip, #16
   2bfa4:	str	r0, [r5, #64]	; 0x40
   2bfa8:	add	r0, r4, r3
   2bfac:	add	r3, r3, ip
   2bfb0:	cmp	r8, #0
   2bfb4:	strb	ip, [sp, #12]
   2bfb8:	mov	ip, #0
   2bfbc:	add	r3, r4, r3
   2bfc0:	ldrd	r6, [sp, #8]
   2bfc4:	add	r4, r4, r2
   2bfc8:	mvn	lr, #0
   2bfcc:	str	ip, [r0, #4]
   2bfd0:	str	r8, [r0, #8]
   2bfd4:	str	fp, [r0, #12]
   2bfd8:	strd	r6, [r0, #24]
   2bfdc:	ldrb	r2, [r3, #14]
   2bfe0:	bic	r2, r2, #12
   2bfe4:	strb	r2, [r3, #14]
   2bfe8:	str	ip, [r0, #16]
   2bfec:	str	ip, [r0, #20]
   2bff0:	str	lr, [r0, #32]
   2bff4:	strne	r4, [r8]
   2bff8:	cmp	fp, #0
   2bffc:	beq	2c084 <__assert_fail@plt+0x1a4e0>
   2c000:	cmp	r4, #0
   2c004:	str	r4, [fp]
   2c008:	beq	2c084 <__assert_fail@plt+0x1a4e0>
   2c00c:	cmp	r9, #0
   2c010:	cmpne	r8, #0
   2c014:	beq	2c084 <__assert_fail@plt+0x1a4e0>
   2c018:	ldr	r2, [sl, #20]
   2c01c:	ldrb	r3, [sl, #26]
   2c020:	str	r2, [r9, #20]
   2c024:	str	r2, [r8, #20]
   2c028:	ldrb	r2, [r9, #26]
   2c02c:	ubfx	r3, r3, #3, #1
   2c030:	bfi	r2, r3, #3, #1
   2c034:	strb	r2, [r9, #26]
   2c038:	ldrb	r2, [r8, #26]
   2c03c:	bfi	r2, r3, #3, #1
   2c040:	strb	r2, [r8, #26]
   2c044:	mov	r0, r4
   2c048:	add	sp, sp, #20
   2c04c:	ldrd	r4, [sp]
   2c050:	ldrd	r6, [sp, #8]
   2c054:	ldrd	r8, [sp, #16]
   2c058:	ldrd	sl, [sp, #24]
   2c05c:	add	sp, sp, #32
   2c060:	pop	{pc}		; (ldr pc, [sp], #4)
   2c064:	ldr	r3, [r2, #20]
   2c068:	cmp	r3, #31
   2c06c:	bgt	2c044 <__assert_fail@plt+0x1a4a0>
   2c070:	ldr	r1, [r5, #80]	; 0x50
   2c074:	lsr	r3, r1, r3
   2c078:	tst	r3, #1
   2c07c:	bne	2bdf0 <__assert_fail@plt+0x1a24c>
   2c080:	b	2c044 <__assert_fail@plt+0x1a4a0>
   2c084:	mov	r3, #12
   2c088:	mov	r4, #0
   2c08c:	str	r3, [r1]
   2c090:	b	2c044 <__assert_fail@plt+0x1a4a0>
   2c094:	mov	r0, #996	; 0x3e4
   2c098:	str	r1, [sp, #4]
   2c09c:	bl	39028 <__assert_fail@plt+0x27484>
   2c0a0:	cmp	r0, #0
   2c0a4:	ldr	r1, [sp, #4]
   2c0a8:	beq	2c16c <__assert_fail@plt+0x1a5c8>
   2c0ac:	ldr	ip, [r5, #56]	; 0x38
   2c0b0:	mov	r2, #1
   2c0b4:	mov	r8, #4
   2c0b8:	mov	r3, #0
   2c0bc:	str	ip, [r0]
   2c0c0:	str	r0, [r5, #56]	; 0x38
   2c0c4:	b	2be20 <__assert_fail@plt+0x1a27c>
   2c0c8:	mov	r0, #996	; 0x3e4
   2c0cc:	str	r1, [sp, #4]
   2c0d0:	bl	39028 <__assert_fail@plt+0x27484>
   2c0d4:	cmp	r0, #0
   2c0d8:	ldr	r1, [sp, #4]
   2c0dc:	beq	2c164 <__assert_fail@plt+0x1a5c0>
   2c0e0:	ldr	ip, [r5, #56]	; 0x38
   2c0e4:	mov	r2, #1
   2c0e8:	mov	r9, #4
   2c0ec:	mov	r3, #0
   2c0f0:	str	ip, [r0]
   2c0f4:	str	r0, [r5, #56]	; 0x38
   2c0f8:	b	2be98 <__assert_fail@plt+0x1a2f4>
   2c0fc:	mov	r0, #996	; 0x3e4
   2c100:	str	r1, [sp, #4]
   2c104:	bl	39028 <__assert_fail@plt+0x27484>
   2c108:	subs	r4, r0, #0
   2c10c:	ldr	r1, [sp, #4]
   2c110:	beq	2c084 <__assert_fail@plt+0x1a4e0>
   2c114:	ldr	ip, [r5, #56]	; 0x38
   2c118:	mov	r0, #1
   2c11c:	mov	r2, #4
   2c120:	mov	r3, #0
   2c124:	str	ip, [r4]
   2c128:	str	r4, [r5, #56]	; 0x38
   2c12c:	b	2bfa0 <__assert_fail@plt+0x1a3fc>
   2c130:	mov	r0, #996	; 0x3e4
   2c134:	str	r1, [sp, #4]
   2c138:	bl	39028 <__assert_fail@plt+0x27484>
   2c13c:	subs	r2, r0, #0
   2c140:	ldr	r1, [sp, #4]
   2c144:	beq	2c174 <__assert_fail@plt+0x1a5d0>
   2c148:	ldr	ip, [r5, #56]	; 0x38
   2c14c:	mov	fp, #4
   2c150:	mov	r0, #1
   2c154:	mov	r3, #0
   2c158:	str	ip, [r2]
   2c15c:	str	r2, [r5, #56]	; 0x38
   2c160:	b	2bf1c <__assert_fail@plt+0x1a378>
   2c164:	mov	r9, r0
   2c168:	b	2bee8 <__assert_fail@plt+0x1a344>
   2c16c:	mov	r8, r0
   2c170:	b	2be70 <__assert_fail@plt+0x1a2cc>
   2c174:	mov	fp, r2
   2c178:	b	2bf78 <__assert_fail@plt+0x1a3d4>
   2c17c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c180:	mov	r5, r0
   2c184:	mov	r0, #32
   2c188:	strd	r6, [sp, #8]
   2c18c:	mov	r7, r3
   2c190:	strd	r8, [sp, #16]
   2c194:	mov	r9, #0
   2c198:	strd	sl, [sp, #24]
   2c19c:	mov	fp, r1
   2c1a0:	mov	r1, #1
   2c1a4:	str	lr, [sp, #32]
   2c1a8:	sub	sp, sp, #44	; 0x2c
   2c1ac:	mov	sl, r2
   2c1b0:	ldrb	r8, [sp, #80]	; 0x50
   2c1b4:	str	r9, [sp, #20]
   2c1b8:	bl	38fb4 <__assert_fail@plt+0x27410>
   2c1bc:	subs	r4, r0, #0
   2c1c0:	beq	2c57c <__assert_fail@plt+0x1a9d8>
   2c1c4:	mov	r1, #1
   2c1c8:	mov	r0, #40	; 0x28
   2c1cc:	bl	38fb4 <__assert_fail@plt+0x27410>
   2c1d0:	subs	r6, r0, #0
   2c1d4:	beq	2c5bc <__assert_fail@plt+0x1aa18>
   2c1d8:	ldrb	ip, [r6, #16]
   2c1dc:	add	lr, sp, #20
   2c1e0:	mov	r0, fp
   2c1e4:	add	r3, r6, #36	; 0x24
   2c1e8:	add	r2, r6, #12
   2c1ec:	mov	r1, r4
   2c1f0:	bfi	ip, r8, #0, #1
   2c1f4:	strb	ip, [r6, #16]
   2c1f8:	str	lr, [sp]
   2c1fc:	str	sl, [sp, #4]
   2c200:	str	r9, [sp, #8]
   2c204:	bl	260dc <__assert_fail@plt+0x14538>
   2c208:	subs	sl, r0, #0
   2c20c:	bne	2c65c <__assert_fail@plt+0x1aab8>
   2c210:	ldrb	r3, [r7]
   2c214:	cmp	r3, #0
   2c218:	beq	2c240 <__assert_fail@plt+0x1a69c>
   2c21c:	mov	ip, #1
   2c220:	asr	r1, r3, #5
   2c224:	and	r0, r3, #31
   2c228:	ldrb	r3, [r7, #1]!
   2c22c:	ldr	r2, [r4, r1, lsl #2]
   2c230:	cmp	r3, #0
   2c234:	orr	r2, r2, ip, lsl r0
   2c238:	str	r2, [r4, r1, lsl #2]
   2c23c:	bne	2c220 <__assert_fail@plt+0x1a67c>
   2c240:	cmp	r8, #0
   2c244:	beq	2c2d8 <__assert_fail@plt+0x1a734>
   2c248:	ubfx	r1, r4, #2, #1
   2c24c:	cmp	r1, #0
   2c250:	moveq	r3, r1
   2c254:	beq	2c268 <__assert_fail@plt+0x1a6c4>
   2c258:	ldr	r2, [r4]
   2c25c:	mov	r3, #1
   2c260:	mvn	r2, r2
   2c264:	str	r2, [r4]
   2c268:	ldr	ip, [r4, r1, lsl #2]
   2c26c:	rsb	lr, r1, #8
   2c270:	add	r2, r4, r1, lsl #2
   2c274:	lsr	lr, lr, #1
   2c278:	ldr	r0, [r2, #4]
   2c27c:	cmp	lr, #4
   2c280:	mvn	ip, ip
   2c284:	str	ip, [r4, r1, lsl #2]
   2c288:	mvn	r1, r0
   2c28c:	ldr	lr, [r2, #8]
   2c290:	ldr	ip, [r2, #12]
   2c294:	ldr	r0, [r2, #16]
   2c298:	mvn	lr, lr
   2c29c:	stmib	r2, {r1, lr}
   2c2a0:	mvn	ip, ip
   2c2a4:	ldr	r1, [r2, #20]
   2c2a8:	mvn	r0, r0
   2c2ac:	str	ip, [r2, #12]
   2c2b0:	str	r0, [r2, #16]
   2c2b4:	mvn	r1, r1
   2c2b8:	str	r1, [r2, #20]
   2c2bc:	bne	2c528 <__assert_fail@plt+0x1a984>
   2c2c0:	ldr	r1, [r2, #24]
   2c2c4:	ldr	r3, [r2, #28]
   2c2c8:	mvn	r1, r1
   2c2cc:	mvn	r3, r3
   2c2d0:	str	r1, [r2, #24]
   2c2d4:	str	r3, [r2, #28]
   2c2d8:	ldr	r3, [r5, #92]	; 0x5c
   2c2dc:	cmp	r3, #1
   2c2e0:	ble	2c388 <__assert_fail@plt+0x1a7e4>
   2c2e4:	ldr	r3, [r5, #60]	; 0x3c
   2c2e8:	add	r2, r4, #8
   2c2ec:	add	r0, r3, #8
   2c2f0:	orr	r1, r3, r4
   2c2f4:	cmp	r4, r0
   2c2f8:	cmpcc	r3, r2
   2c2fc:	movcs	r2, #1
   2c300:	movcc	r2, #0
   2c304:	tst	r1, #7
   2c308:	movne	r2, #0
   2c30c:	cmp	r2, #0
   2c310:	beq	2c5d8 <__assert_fail@plt+0x1aa34>
   2c314:	ldr	ip, [r3]
   2c318:	ldr	r1, [r4]
   2c31c:	ldr	r2, [r3, #4]
   2c320:	ldr	r0, [r4, #4]
   2c324:	and	r1, r1, ip
   2c328:	ldr	ip, [r4, #8]
   2c32c:	ldr	lr, [r4, #12]
   2c330:	and	r2, r2, r0
   2c334:	stm	r4, {r1, r2}
   2c338:	ldrd	r0, [r3, #8]
   2c33c:	and	r0, r0, ip
   2c340:	and	r1, r1, lr
   2c344:	ldr	ip, [r4, #16]
   2c348:	strd	r0, [r4, #8]
   2c34c:	ldr	r2, [r3, #16]
   2c350:	ldr	r0, [r3, #20]
   2c354:	ldr	lr, [r4, #20]
   2c358:	and	r2, r2, ip
   2c35c:	ldr	ip, [r4, #24]
   2c360:	str	r2, [r4, #16]
   2c364:	ldr	r2, [r4, #28]
   2c368:	and	r0, r0, lr
   2c36c:	str	r0, [r4, #20]
   2c370:	ldr	r1, [r3, #24]
   2c374:	ldr	r3, [r3, #28]
   2c378:	and	r1, r1, ip
   2c37c:	and	r3, r3, r2
   2c380:	str	r1, [r4, #24]
   2c384:	str	r3, [r4, #28]
   2c388:	ldr	r2, [r5, #64]	; 0x40
   2c38c:	mov	r7, #0
   2c390:	str	r7, [sp, #28]
   2c394:	cmp	r2, #31
   2c398:	beq	2c69c <__assert_fail@plt+0x1aaf8>
   2c39c:	ldr	r0, [r5, #56]	; 0x38
   2c3a0:	lsl	r3, r2, #5
   2c3a4:	add	r2, r2, #1
   2c3a8:	add	r9, r3, #4
   2c3ac:	mov	r1, #3
   2c3b0:	add	r8, r0, r3
   2c3b4:	str	r4, [sp, #24]
   2c3b8:	add	r3, r3, #16
   2c3bc:	str	r2, [r5, #64]	; 0x40
   2c3c0:	mov	r7, #0
   2c3c4:	strb	r1, [sp, #28]
   2c3c8:	add	r1, r0, r3
   2c3cc:	mvn	ip, #0
   2c3d0:	ldrd	r2, [sp, #24]
   2c3d4:	adds	r9, r0, r9
   2c3d8:	str	r7, [r8, #4]
   2c3dc:	str	r7, [r8, #8]
   2c3e0:	str	r7, [r8, #12]
   2c3e4:	strd	r2, [r8, #24]
   2c3e8:	ldrb	r3, [r1, #14]
   2c3ec:	bic	r3, r3, #12
   2c3f0:	strb	r3, [r1, #14]
   2c3f4:	str	r7, [r8, #16]
   2c3f8:	str	r7, [r8, #20]
   2c3fc:	str	ip, [r8, #32]
   2c400:	beq	2c548 <__assert_fail@plt+0x1a9a4>
   2c404:	ldr	r3, [r5, #92]	; 0x5c
   2c408:	cmp	r3, #1
   2c40c:	ble	2c58c <__assert_fail@plt+0x1a9e8>
   2c410:	ldrb	r2, [r5, #88]	; 0x58
   2c414:	ldr	r3, [r5, #64]	; 0x40
   2c418:	orr	r2, r2, #2
   2c41c:	cmp	r3, #31
   2c420:	strb	r2, [r5, #88]	; 0x58
   2c424:	beq	2c6c8 <__assert_fail@plt+0x1ab24>
   2c428:	lsl	r7, r3, #5
   2c42c:	add	r3, r3, #1
   2c430:	add	fp, r7, #4
   2c434:	mov	r2, #6
   2c438:	str	r6, [sp, #24]
   2c43c:	add	sl, r0, r7
   2c440:	str	r3, [r5, #64]	; 0x40
   2c444:	add	r7, r7, #16
   2c448:	mvn	ip, #0
   2c44c:	strb	r2, [sp, #28]
   2c450:	add	r1, r0, r7
   2c454:	mov	r7, #0
   2c458:	ldrd	r2, [sp, #24]
   2c45c:	adds	fp, r0, fp
   2c460:	str	r7, [sl, #4]
   2c464:	str	r7, [sl, #8]
   2c468:	str	r7, [sl, #12]
   2c46c:	strd	r2, [sl, #24]
   2c470:	ldrb	r3, [r1, #14]
   2c474:	bic	r3, r3, #12
   2c478:	strb	r3, [r1, #14]
   2c47c:	str	r7, [sl, #16]
   2c480:	str	r7, [sl, #20]
   2c484:	str	ip, [sl, #32]
   2c488:	beq	2c548 <__assert_fail@plt+0x1a9a4>
   2c48c:	ldr	r1, [r5, #64]	; 0x40
   2c490:	mov	r2, #0
   2c494:	mov	r3, #0
   2c498:	strd	r2, [sp, #32]
   2c49c:	cmp	r1, #31
   2c4a0:	beq	2c6f0 <__assert_fail@plt+0x1ab4c>
   2c4a4:	lsl	r7, r1, #5
   2c4a8:	add	r1, r1, #1
   2c4ac:	add	r4, r7, #4
   2c4b0:	mov	r3, #10
   2c4b4:	mov	ip, #0
   2c4b8:	str	r1, [r5, #64]	; 0x40
   2c4bc:	add	r1, r0, r7
   2c4c0:	add	r7, r7, #16
   2c4c4:	strb	r3, [sp, #36]	; 0x24
   2c4c8:	add	r4, r0, r4
   2c4cc:	add	r0, r0, r7
   2c4d0:	ldrd	r2, [sp, #32]
   2c4d4:	mvn	lr, #0
   2c4d8:	str	ip, [r1, #4]
   2c4dc:	str	r9, [r1, #8]
   2c4e0:	str	fp, [r1, #12]
   2c4e4:	strd	r2, [r1, #24]
   2c4e8:	ldrb	r3, [r0, #14]
   2c4ec:	bic	r3, r3, #12
   2c4f0:	strb	r3, [r0, #14]
   2c4f4:	str	ip, [r1, #16]
   2c4f8:	str	ip, [r1, #20]
   2c4fc:	str	lr, [r1, #32]
   2c500:	str	r4, [r8, #4]
   2c504:	str	r4, [sl, #4]
   2c508:	mov	r0, r4
   2c50c:	add	sp, sp, #44	; 0x2c
   2c510:	ldrd	r4, [sp]
   2c514:	ldrd	r6, [sp, #8]
   2c518:	ldrd	r8, [sp, #16]
   2c51c:	ldrd	sl, [sp, #24]
   2c520:	add	sp, sp, #32
   2c524:	pop	{pc}		; (ldr pc, [sp], #4)
   2c528:	add	r3, r3, #6
   2c52c:	ldr	r2, [r4, r3, lsl #2]
   2c530:	mvn	r2, r2
   2c534:	str	r2, [r4, r3, lsl #2]
   2c538:	ldr	r3, [r5, #92]	; 0x5c
   2c53c:	cmp	r3, #1
   2c540:	bgt	2c2e4 <__assert_fail@plt+0x1a740>
   2c544:	b	2c388 <__assert_fail@plt+0x1a7e4>
   2c548:	mov	r0, r4
   2c54c:	mov	r4, #0
   2c550:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c554:	ldr	r0, [r6]
   2c558:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c55c:	ldr	r0, [r6, #4]
   2c560:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c564:	ldr	r0, [r6, #8]
   2c568:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c56c:	ldr	r0, [r6, #12]
   2c570:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c574:	mov	r0, r6
   2c578:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c57c:	ldr	r2, [sp, #84]	; 0x54
   2c580:	mov	r3, #12
   2c584:	str	r3, [r2]
   2c588:	b	2c508 <__assert_fail@plt+0x1a964>
   2c58c:	ldr	r0, [r6]
   2c590:	mov	r4, r9
   2c594:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c598:	ldr	r0, [r6, #4]
   2c59c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c5a0:	ldr	r0, [r6, #8]
   2c5a4:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c5a8:	ldr	r0, [r6, #12]
   2c5ac:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c5b0:	mov	r0, r6
   2c5b4:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c5b8:	b	2c508 <__assert_fail@plt+0x1a964>
   2c5bc:	mov	r0, r4
   2c5c0:	mov	r4, r6
   2c5c4:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c5c8:	ldr	r2, [sp, #84]	; 0x54
   2c5cc:	mov	r3, #12
   2c5d0:	str	r3, [r2]
   2c5d4:	b	2c508 <__assert_fail@plt+0x1a964>
   2c5d8:	ldr	r1, [r3]
   2c5dc:	ldr	r2, [r4]
   2c5e0:	ldr	r0, [r4, #4]
   2c5e4:	and	r2, r2, r1
   2c5e8:	ldr	r1, [r4, #8]
   2c5ec:	str	r2, [r4]
   2c5f0:	ldr	ip, [r3, #4]
   2c5f4:	ldr	r2, [r4, #12]
   2c5f8:	and	r0, r0, ip
   2c5fc:	ldr	ip, [r4, #16]
   2c600:	str	r0, [r4, #4]
   2c604:	ldr	lr, [r3, #8]
   2c608:	ldr	r0, [r4, #20]
   2c60c:	and	r1, r1, lr
   2c610:	str	r1, [r4, #8]
   2c614:	ldr	lr, [r3, #12]
   2c618:	ldr	r1, [r4, #24]
   2c61c:	and	r2, r2, lr
   2c620:	str	r2, [r4, #12]
   2c624:	ldr	lr, [r3, #16]
   2c628:	ldr	r2, [r4, #28]
   2c62c:	and	ip, ip, lr
   2c630:	str	ip, [r4, #16]
   2c634:	ldr	ip, [r3, #20]
   2c638:	and	r0, r0, ip
   2c63c:	str	r0, [r4, #20]
   2c640:	ldr	r0, [r3, #24]
   2c644:	and	r1, r1, r0
   2c648:	str	r1, [r4, #24]
   2c64c:	ldr	r3, [r3, #28]
   2c650:	and	r3, r3, r2
   2c654:	str	r3, [r4, #28]
   2c658:	b	2c388 <__assert_fail@plt+0x1a7e4>
   2c65c:	mov	r0, r4
   2c660:	mov	r4, r9
   2c664:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c668:	ldr	r0, [r6]
   2c66c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c670:	ldr	r0, [r6, #4]
   2c674:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c678:	ldr	r0, [r6, #8]
   2c67c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c680:	ldr	r0, [r6, #12]
   2c684:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c688:	mov	r0, r6
   2c68c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c690:	ldr	r3, [sp, #84]	; 0x54
   2c694:	str	sl, [r3]
   2c698:	b	2c508 <__assert_fail@plt+0x1a964>
   2c69c:	mov	r0, #996	; 0x3e4
   2c6a0:	bl	39028 <__assert_fail@plt+0x27484>
   2c6a4:	cmp	r0, #0
   2c6a8:	beq	2c548 <__assert_fail@plt+0x1a9a4>
   2c6ac:	ldr	r1, [r5, #56]	; 0x38
   2c6b0:	mov	r3, r7
   2c6b4:	mov	r2, #1
   2c6b8:	mov	r9, #4
   2c6bc:	str	r0, [r5, #56]	; 0x38
   2c6c0:	str	r1, [r0]
   2c6c4:	b	2c3ac <__assert_fail@plt+0x1a808>
   2c6c8:	mov	r0, #996	; 0x3e4
   2c6cc:	bl	39028 <__assert_fail@plt+0x27484>
   2c6d0:	cmp	r0, #0
   2c6d4:	beq	2c548 <__assert_fail@plt+0x1a9a4>
   2c6d8:	ldr	r2, [r5, #56]	; 0x38
   2c6dc:	mov	r3, #1
   2c6e0:	mov	fp, #4
   2c6e4:	str	r0, [r5, #56]	; 0x38
   2c6e8:	str	r2, [r0]
   2c6ec:	b	2c434 <__assert_fail@plt+0x1a890>
   2c6f0:	mov	r0, #996	; 0x3e4
   2c6f4:	bl	39028 <__assert_fail@plt+0x27484>
   2c6f8:	cmp	r0, #0
   2c6fc:	beq	2c718 <__assert_fail@plt+0x1ab74>
   2c700:	ldr	r3, [r5, #56]	; 0x38
   2c704:	mov	r4, #4
   2c708:	mov	r1, #1
   2c70c:	str	r0, [r5, #56]	; 0x38
   2c710:	str	r3, [r0]
   2c714:	b	2c4b0 <__assert_fail@plt+0x1a90c>
   2c718:	mov	r4, r0
   2c71c:	b	2c508 <__assert_fail@plt+0x1a964>
   2c720:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2c724:	mov	r4, r0
   2c728:	mov	r5, r2
   2c72c:	strd	r6, [sp, #8]
   2c730:	subs	r6, r1, #0
   2c734:	strd	r8, [sp, #16]
   2c738:	str	sl, [sp, #24]
   2c73c:	str	lr, [sp, #28]
   2c740:	beq	2c75c <__assert_fail@plt+0x1abb8>
   2c744:	ldr	r3, [r6, #4]
   2c748:	cmp	r2, #0
   2c74c:	cmpne	r3, #0
   2c750:	bgt	2c79c <__assert_fail@plt+0x1abf8>
   2c754:	cmp	r3, #0
   2c758:	bgt	2c7a8 <__assert_fail@plt+0x1ac04>
   2c75c:	cmp	r5, #0
   2c760:	beq	2c770 <__assert_fail@plt+0x1abcc>
   2c764:	ldr	r3, [r5, #4]
   2c768:	cmp	r3, #0
   2c76c:	bgt	2c7dc <__assert_fail@plt+0x1ac38>
   2c770:	mov	r3, #0
   2c774:	mov	r0, r3
   2c778:	str	r3, [r4]
   2c77c:	str	r3, [r4, #4]
   2c780:	str	r3, [r4, #8]
   2c784:	ldrd	r4, [sp]
   2c788:	ldrd	r6, [sp, #8]
   2c78c:	ldrd	r8, [sp, #16]
   2c790:	ldr	sl, [sp, #24]
   2c794:	add	sp, sp, #28
   2c798:	pop	{pc}		; (ldr pc, [sp], #4)
   2c79c:	ldr	r2, [r2, #4]
   2c7a0:	cmp	r2, #0
   2c7a4:	bgt	2c810 <__assert_fail@plt+0x1ac6c>
   2c7a8:	lsl	r0, r3, #2
   2c7ac:	str	r3, [r4]
   2c7b0:	str	r3, [r4, #4]
   2c7b4:	bl	39028 <__assert_fail@plt+0x27484>
   2c7b8:	cmp	r0, #0
   2c7bc:	str	r0, [r4, #8]
   2c7c0:	beq	2c8fc <__assert_fail@plt+0x1ad58>
   2c7c4:	ldr	r2, [r6, #4]
   2c7c8:	ldr	r1, [r6, #8]
   2c7cc:	lsl	r2, r2, #2
   2c7d0:	bl	11784 <memcpy@plt>
   2c7d4:	mov	r0, #0
   2c7d8:	b	2c784 <__assert_fail@plt+0x1abe0>
   2c7dc:	lsl	r0, r3, #2
   2c7e0:	str	r3, [r4]
   2c7e4:	str	r3, [r4, #4]
   2c7e8:	bl	39028 <__assert_fail@plt+0x27484>
   2c7ec:	cmp	r0, #0
   2c7f0:	str	r0, [r4, #8]
   2c7f4:	beq	2c8fc <__assert_fail@plt+0x1ad58>
   2c7f8:	ldr	r2, [r5, #4]
   2c7fc:	ldr	r1, [r5, #8]
   2c800:	lsl	r2, r2, #2
   2c804:	bl	11784 <memcpy@plt>
   2c808:	mov	r0, #0
   2c80c:	b	2c784 <__assert_fail@plt+0x1abe0>
   2c810:	add	r3, r3, r2
   2c814:	lsl	r0, r3, #2
   2c818:	str	r3, [r4]
   2c81c:	bl	39028 <__assert_fail@plt+0x27484>
   2c820:	cmp	r0, #0
   2c824:	str	r0, [r4, #8]
   2c828:	beq	2c910 <__assert_fail@plt+0x1ad6c>
   2c82c:	ldr	r7, [r6, #4]
   2c830:	ldr	r8, [r5, #4]
   2c834:	cmp	r7, #0
   2c838:	ble	2c918 <__assert_fail@plt+0x1ad74>
   2c83c:	ldr	r1, [r6, #8]
   2c840:	cmp	r8, #0
   2c844:	movle	r6, #0
   2c848:	movle	lr, r0
   2c84c:	movle	r3, r6
   2c850:	mov	r9, r1
   2c854:	ble	2c8e4 <__assert_fail@plt+0x1ad40>
   2c858:	mov	r6, #0
   2c85c:	mov	lr, r0
   2c860:	ldr	sl, [r5, #8]
   2c864:	mov	ip, r6
   2c868:	mov	r3, r6
   2c86c:	b	2c878 <__assert_fail@plt+0x1acd4>
   2c870:	cmp	r8, ip
   2c874:	ble	2c8e4 <__assert_fail@plt+0x1ad40>
   2c878:	ldr	r2, [r1]
   2c87c:	add	r6, r6, #1
   2c880:	ldr	r1, [sl, ip, lsl #2]
   2c884:	cmp	r2, r1
   2c888:	addgt	ip, ip, #1
   2c88c:	strgt	r1, [lr]
   2c890:	bgt	2c8a0 <__assert_fail@plt+0x1acfc>
   2c894:	add	r3, r3, #1
   2c898:	addeq	ip, ip, #1
   2c89c:	str	r2, [lr]
   2c8a0:	cmp	r7, r3
   2c8a4:	add	r1, r9, r3, lsl #2
   2c8a8:	add	lr, lr, #4
   2c8ac:	bgt	2c870 <__assert_fail@plt+0x1accc>
   2c8b0:	cmp	r8, ip
   2c8b4:	bgt	2c8c4 <__assert_fail@plt+0x1ad20>
   2c8b8:	mov	r0, #0
   2c8bc:	str	r6, [r4, #4]
   2c8c0:	b	2c784 <__assert_fail@plt+0x1abe0>
   2c8c4:	ldr	r1, [r5, #8]
   2c8c8:	sub	r2, r8, ip
   2c8cc:	add	r0, r0, r6, lsl #2
   2c8d0:	add	r6, r6, r2
   2c8d4:	lsl	r2, r2, #2
   2c8d8:	add	r1, r1, ip, lsl #2
   2c8dc:	bl	11784 <memcpy@plt>
   2c8e0:	b	2c8b8 <__assert_fail@plt+0x1ad14>
   2c8e4:	sub	r3, r7, r3
   2c8e8:	mov	r0, lr
   2c8ec:	lsl	r2, r3, #2
   2c8f0:	add	r6, r6, r3
   2c8f4:	bl	11784 <memcpy@plt>
   2c8f8:	b	2c8b8 <__assert_fail@plt+0x1ad14>
   2c8fc:	mov	r3, #0
   2c900:	mov	r0, #12
   2c904:	str	r3, [r4]
   2c908:	str	r3, [r4, #4]
   2c90c:	b	2c784 <__assert_fail@plt+0x1abe0>
   2c910:	mov	r0, #12
   2c914:	b	2c784 <__assert_fail@plt+0x1abe0>
   2c918:	mov	r6, #0
   2c91c:	mov	ip, r6
   2c920:	b	2c8b0 <__assert_fail@plt+0x1ad0c>
   2c924:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c928:	strd	r6, [sp, #8]
   2c92c:	subs	r7, r3, #0
   2c930:	subgt	r4, r1, #4
   2c934:	subgt	r6, r2, #4
   2c938:	str	r8, [sp, #16]
   2c93c:	movgt	r5, #0
   2c940:	movgt	r8, r0
   2c944:	str	lr, [sp, #20]
   2c948:	sub	sp, sp, #16
   2c94c:	bgt	2c97c <__assert_fail@plt+0x1add8>
   2c950:	b	2c9e0 <__assert_fail@plt+0x1ae3c>
   2c954:	bl	29788 <__assert_fail@plt+0x17be4>
   2c958:	str	r0, [r4]
   2c95c:	ldr	r0, [sp, #12]
   2c960:	bl	19610 <__assert_fail@plt+0x7a6c>
   2c964:	ldr	r3, [sp]
   2c968:	cmp	r3, #0
   2c96c:	bne	2c9c4 <__assert_fail@plt+0x1ae20>
   2c970:	add	r5, r5, #1
   2c974:	cmp	r7, r5
   2c978:	beq	2c9e0 <__assert_fail@plt+0x1ae3c>
   2c97c:	ldr	r1, [r4, #4]!
   2c980:	ldr	ip, [r6, #4]!
   2c984:	cmp	r1, #0
   2c988:	streq	ip, [r4]
   2c98c:	beq	2c970 <__assert_fail@plt+0x1adcc>
   2c990:	cmp	ip, #0
   2c994:	add	r2, ip, #4
   2c998:	add	r1, r1, #4
   2c99c:	add	r0, sp, #4
   2c9a0:	beq	2c970 <__assert_fail@plt+0x1adcc>
   2c9a4:	bl	2c720 <__assert_fail@plt+0x1ab7c>
   2c9a8:	mov	r3, r0
   2c9ac:	add	r2, sp, #4
   2c9b0:	cmp	r3, #0
   2c9b4:	mov	r1, r8
   2c9b8:	mov	r0, sp
   2c9bc:	str	r3, [sp]
   2c9c0:	beq	2c954 <__assert_fail@plt+0x1adb0>
   2c9c4:	mov	r0, r3
   2c9c8:	add	sp, sp, #16
   2c9cc:	ldrd	r4, [sp]
   2c9d0:	ldrd	r6, [sp, #8]
   2c9d4:	ldr	r8, [sp, #16]
   2c9d8:	add	sp, sp, #20
   2c9dc:	pop	{pc}		; (ldr pc, [sp], #4)
   2c9e0:	mov	r3, #0
   2c9e4:	b	2c9c4 <__assert_fail@plt+0x1ae20>
   2c9e8:	lsl	ip, r2, #2
   2c9ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c9f0:	mov	r4, r3
   2c9f4:	strd	r6, [sp, #8]
   2c9f8:	strd	r8, [sp, #16]
   2c9fc:	mov	r8, r2
   2ca00:	ldr	r9, [r3, #4]
   2ca04:	strd	sl, [sp, #24]
   2ca08:	mov	sl, r0
   2ca0c:	mov	fp, r1
   2ca10:	ldr	r2, [r0, #100]	; 0x64
   2ca14:	str	lr, [sp, #32]
   2ca18:	sub	sp, sp, #100	; 0x64
   2ca1c:	ldr	r6, [r0, #84]	; 0x54
   2ca20:	mov	r0, #0
   2ca24:	str	ip, [sp, #28]
   2ca28:	ldr	r3, [r2, r8, lsl #2]
   2ca2c:	add	r2, r2, ip
   2ca30:	cmp	r3, r0
   2ca34:	str	r3, [sp, #20]
   2ca38:	str	r0, [sp, #60]	; 0x3c
   2ca3c:	beq	2cdf0 <__assert_fail@plt+0x1b24c>
   2ca40:	cmp	r9, #0
   2ca44:	bne	2ca80 <__assert_fail@plt+0x1aedc>
   2ca48:	ldr	r3, [r1]
   2ca4c:	str	r9, [r3, r8, lsl #2]
   2ca50:	ldr	r3, [r2]
   2ca54:	ldrb	r9, [r3, #52]	; 0x34
   2ca58:	ands	r9, r9, #64	; 0x40
   2ca5c:	bne	2cba4 <__assert_fail@plt+0x1b000>
   2ca60:	mov	r0, r9
   2ca64:	add	sp, sp, #100	; 0x64
   2ca68:	ldrd	r4, [sp]
   2ca6c:	ldrd	r6, [sp, #8]
   2ca70:	ldrd	r8, [sp, #16]
   2ca74:	ldrd	sl, [sp, #24]
   2ca78:	add	sp, sp, #32
   2ca7c:	pop	{pc}		; (ldr pc, [sp], #4)
   2ca80:	mov	r2, r4
   2ca84:	mov	r1, r6
   2ca88:	str	r0, [sp, #64]	; 0x40
   2ca8c:	add	r0, sp, #64	; 0x40
   2ca90:	bl	29788 <__assert_fail@plt+0x17be4>
   2ca94:	ldr	r9, [sp, #64]	; 0x40
   2ca98:	mov	r2, r0
   2ca9c:	cmp	r9, #0
   2caa0:	bne	2ca60 <__assert_fail@plt+0x1aebc>
   2caa4:	mov	r5, r0
   2caa8:	ldr	r7, [r5, #28]!
   2caac:	cmp	r7, #0
   2cab0:	bne	2cb30 <__assert_fail@plt+0x1af8c>
   2cab4:	ldr	r3, [r4, #4]
   2cab8:	str	r2, [sp, #24]
   2cabc:	lsl	r0, r3, #2
   2cac0:	str	r3, [r2, #28]
   2cac4:	str	r9, [r2, #32]
   2cac8:	bl	39028 <__assert_fail@plt+0x27484>
   2cacc:	ldr	r2, [sp, #24]
   2cad0:	cmp	r0, #0
   2cad4:	str	r0, [r2, #36]	; 0x24
   2cad8:	beq	2cb28 <__assert_fail@plt+0x1af84>
   2cadc:	ldr	r3, [r4, #4]
   2cae0:	str	r7, [sp, #64]	; 0x40
   2cae4:	cmp	r3, #0
   2cae8:	bgt	2cafc <__assert_fail@plt+0x1af58>
   2caec:	b	2cb30 <__assert_fail@plt+0x1af8c>
   2caf0:	ldr	r3, [r4, #4]
   2caf4:	cmp	r7, r3
   2caf8:	bge	2cb30 <__assert_fail@plt+0x1af8c>
   2cafc:	ldr	r3, [r4, #8]
   2cb00:	mov	r0, r5
   2cb04:	ldr	r1, [r6, #28]
   2cb08:	ldr	r3, [r3, r7, lsl #2]
   2cb0c:	add	r7, r7, #1
   2cb10:	add	r3, r3, r3, lsl #1
   2cb14:	add	r1, r1, r3, lsl #2
   2cb18:	bl	24f74 <__assert_fail@plt+0x133d0>
   2cb1c:	cmp	r0, #0
   2cb20:	str	r0, [sp, #64]	; 0x40
   2cb24:	beq	2caf0 <__assert_fail@plt+0x1af4c>
   2cb28:	mov	r9, #12
   2cb2c:	b	2ca60 <__assert_fail@plt+0x1aebc>
   2cb30:	ldr	r3, [sp, #20]
   2cb34:	mov	r2, r5
   2cb38:	mov	r0, r4
   2cb3c:	add	r3, r3, #4
   2cb40:	mov	r1, r3
   2cb44:	str	r3, [sp, #36]	; 0x24
   2cb48:	bl	24d8c <__assert_fail@plt+0x131e8>
   2cb4c:	cmp	r0, #0
   2cb50:	str	r0, [sp, #60]	; 0x3c
   2cb54:	bne	2d350 <__assert_fail@plt+0x1b7ac>
   2cb58:	ldr	r9, [fp, #20]
   2cb5c:	cmp	r9, #0
   2cb60:	bne	2d070 <__assert_fail@plt+0x1b4cc>
   2cb64:	mov	r2, r4
   2cb68:	mov	r1, r6
   2cb6c:	ldr	r4, [fp]
   2cb70:	add	r0, sp, #60	; 0x3c
   2cb74:	bl	29788 <__assert_fail@plt+0x17be4>
   2cb78:	ldr	r9, [sp, #60]	; 0x3c
   2cb7c:	str	r0, [r4, r8, lsl #2]
   2cb80:	cmp	r9, #0
   2cb84:	bne	2ca60 <__assert_fail@plt+0x1aebc>
   2cb88:	ldr	r3, [sp, #28]
   2cb8c:	ldr	r2, [sl, #100]	; 0x64
   2cb90:	add	r2, r2, r3
   2cb94:	ldr	r3, [r2]
   2cb98:	ldrb	r9, [r3, #52]	; 0x34
   2cb9c:	ands	r9, r9, #64	; 0x40
   2cba0:	beq	2ca60 <__assert_fail@plt+0x1aebc>
   2cba4:	ldr	ip, [sl, #108]	; 0x6c
   2cba8:	cmp	ip, #0
   2cbac:	ble	2ce28 <__assert_fail@plt+0x1b284>
   2cbb0:	ldr	r0, [sl, #116]	; 0x74
   2cbb4:	mov	r2, ip
   2cbb8:	mov	lr, #0
   2cbbc:	add	r3, r2, lr
   2cbc0:	asr	r3, r3, #1
   2cbc4:	add	r1, r3, r3, lsl #1
   2cbc8:	add	r1, r0, r1, lsl #3
   2cbcc:	ldr	r1, [r1, #4]
   2cbd0:	cmp	r8, r1
   2cbd4:	bgt	2d000 <__assert_fail@plt+0x1b45c>
   2cbd8:	cmp	r3, lr
   2cbdc:	ble	2cc28 <__assert_fail@plt+0x1b084>
   2cbe0:	add	r2, r3, lr
   2cbe4:	asr	r2, r2, #1
   2cbe8:	add	r1, r2, r2, lsl #1
   2cbec:	add	r1, r0, r1, lsl #3
   2cbf0:	ldr	r1, [r1, #4]
   2cbf4:	cmp	r8, r1
   2cbf8:	ble	2cc18 <__assert_fail@plt+0x1b074>
   2cbfc:	b	2cff4 <__assert_fail@plt+0x1b450>
   2cc00:	add	r1, r3, r3, lsl #1
   2cc04:	add	r1, r0, r1, lsl #3
   2cc08:	ldr	r1, [r1, #4]
   2cc0c:	cmp	r8, r1
   2cc10:	bgt	2d000 <__assert_fail@plt+0x1b45c>
   2cc14:	mov	r2, r3
   2cc18:	add	r3, lr, r2
   2cc1c:	cmp	lr, r2
   2cc20:	asr	r3, r3, #1
   2cc24:	blt	2cc00 <__assert_fail@plt+0x1b05c>
   2cc28:	cmp	ip, lr
   2cc2c:	str	lr, [sp, #44]	; 0x2c
   2cc30:	ble	2ce28 <__assert_fail@plt+0x1b284>
   2cc34:	add	r3, lr, lr, lsl #1
   2cc38:	lsl	r3, r3, #3
   2cc3c:	add	r0, r0, r3
   2cc40:	str	r3, [sp, #48]	; 0x30
   2cc44:	ldr	r3, [r0, #4]
   2cc48:	cmp	r8, r3
   2cc4c:	bne	2ce28 <__assert_fail@plt+0x1b284>
   2cc50:	ldr	r3, [sp, #20]
   2cc54:	ldr	r7, [sl, #84]	; 0x54
   2cc58:	ldr	r0, [r3, #8]
   2cc5c:	mov	r3, #0
   2cc60:	str	r3, [sp, #64]	; 0x40
   2cc64:	cmp	r0, r3
   2cc68:	ble	2ce28 <__assert_fail@plt+0x1b284>
   2cc6c:	add	r2, fp, #24
   2cc70:	mov	r9, r8
   2cc74:	mov	r8, r3
   2cc78:	str	r2, [sp, #36]	; 0x24
   2cc7c:	add	r2, fp, #20
   2cc80:	str	r2, [sp, #40]	; 0x28
   2cc84:	b	2cc9c <__assert_fail@plt+0x1b0f8>
   2cc88:	cmp	r3, #4
   2cc8c:	beq	2ccd4 <__assert_fail@plt+0x1b130>
   2cc90:	add	r8, r8, #1
   2cc94:	cmp	r8, r0
   2cc98:	bge	2ce1c <__assert_fail@plt+0x1b278>
   2cc9c:	ldr	r3, [sp, #20]
   2cca0:	ldr	r2, [fp, #8]
   2cca4:	ldr	r1, [r3, #12]
   2cca8:	ldr	r3, [r7]
   2ccac:	ldr	r6, [r1, r8, lsl #2]
   2ccb0:	add	r3, r3, r6, lsl #3
   2ccb4:	cmp	r6, r2
   2ccb8:	ldrb	r3, [r3, #4]
   2ccbc:	bne	2cc88 <__assert_fail@plt+0x1b0e4>
   2ccc0:	ldr	r2, [fp, #12]
   2ccc4:	cmp	r9, r2
   2ccc8:	beq	2cc90 <__assert_fail@plt+0x1b0ec>
   2cccc:	cmp	r3, #4
   2ccd0:	bne	2cc90 <__assert_fail@plt+0x1b0ec>
   2ccd4:	add	r3, r6, r6, lsl #1
   2ccd8:	ldr	r4, [sl, #116]	; 0x74
   2ccdc:	lsl	r2, r6, #2
   2cce0:	str	r8, [sp, #52]	; 0x34
   2cce4:	lsl	r3, r3, #2
   2cce8:	ldr	r5, [sp, #44]	; 0x2c
   2ccec:	mov	r8, r2
   2ccf0:	str	r3, [sp, #32]
   2ccf4:	ldr	r3, [sp, #48]	; 0x30
   2ccf8:	add	r4, r4, r3
   2ccfc:	ldr	r3, [r4]
   2cd00:	cmp	r6, r3
   2cd04:	bne	2cdcc <__assert_fail@plt+0x1b228>
   2cd08:	ldr	r3, [r4, #8]
   2cd0c:	ldr	ip, [r4, #12]
   2cd10:	sub	ip, ip, r3
   2cd14:	cmp	ip, #0
   2cd18:	add	ip, r9, ip
   2cd1c:	beq	2ce4c <__assert_fail@plt+0x1b2a8>
   2cd20:	ldr	r3, [r7, #12]
   2cd24:	ldr	r0, [r3, r8]
   2cd28:	ldr	r3, [fp, #12]
   2cd2c:	cmp	ip, r3
   2cd30:	bgt	2cdcc <__assert_fail@plt+0x1b228>
   2cd34:	ldr	r3, [fp]
   2cd38:	ldr	r2, [r3, ip, lsl #2]
   2cd3c:	cmp	r2, #0
   2cd40:	beq	2cdcc <__assert_fail@plt+0x1b228>
   2cd44:	ldr	r3, [r2, #8]
   2cd48:	cmp	r3, #0
   2cd4c:	ble	2cdcc <__assert_fail@plt+0x1b228>
   2cd50:	subs	r3, r3, #1
   2cd54:	ldr	lr, [r2, #12]
   2cd58:	moveq	r1, r3
   2cd5c:	beq	2cdc0 <__assert_fail@plt+0x1b21c>
   2cd60:	mov	r1, #0
   2cd64:	str	ip, [sp, #24]
   2cd68:	add	r2, r3, r1
   2cd6c:	lsr	r2, r2, #1
   2cd70:	ldr	ip, [lr, r2, lsl #2]
   2cd74:	cmp	r0, ip
   2cd78:	bgt	2ce3c <__assert_fail@plt+0x1b298>
   2cd7c:	cmp	r2, r1
   2cd80:	bls	2cdbc <__assert_fail@plt+0x1b218>
   2cd84:	add	r3, r2, r1
   2cd88:	lsr	r3, r3, #1
   2cd8c:	ldr	ip, [lr, r3, lsl #2]
   2cd90:	cmp	r0, ip
   2cd94:	ble	2cdac <__assert_fail@plt+0x1b208>
   2cd98:	b	2ce30 <__assert_fail@plt+0x1b28c>
   2cd9c:	ldr	ip, [lr, r2, lsl #2]
   2cda0:	cmp	r0, ip
   2cda4:	bgt	2ce3c <__assert_fail@plt+0x1b298>
   2cda8:	mov	r3, r2
   2cdac:	add	r2, r1, r3
   2cdb0:	cmp	r1, r3
   2cdb4:	lsr	r2, r2, #1
   2cdb8:	bcc	2cd9c <__assert_fail@plt+0x1b1f8>
   2cdbc:	ldr	ip, [sp, #24]
   2cdc0:	ldr	r3, [lr, r1, lsl #2]
   2cdc4:	cmp	r0, r3
   2cdc8:	beq	2ce64 <__assert_fail@plt+0x1b2c0>
   2cdcc:	ldrb	r3, [r4, #20]
   2cdd0:	add	r5, r5, #1
   2cdd4:	add	r4, r4, #24
   2cdd8:	cmp	r3, #0
   2cddc:	bne	2ccfc <__assert_fail@plt+0x1b158>
   2cde0:	ldr	r3, [sp, #20]
   2cde4:	ldr	r8, [sp, #52]	; 0x34
   2cde8:	ldr	r0, [r3, #8]
   2cdec:	b	2cc90 <__assert_fail@plt+0x1b0ec>
   2cdf0:	ldr	r5, [r1]
   2cdf4:	cmp	r9, r0
   2cdf8:	streq	r9, [r5, r8, lsl #2]
   2cdfc:	beq	2ca60 <__assert_fail@plt+0x1aebc>
   2ce00:	mov	r2, r4
   2ce04:	mov	r1, r6
   2ce08:	add	r0, sp, #60	; 0x3c
   2ce0c:	bl	29788 <__assert_fail@plt+0x17be4>
   2ce10:	str	r0, [r5, r8, lsl #2]
   2ce14:	ldr	r9, [sp, #60]	; 0x3c
   2ce18:	b	2ca60 <__assert_fail@plt+0x1aebc>
   2ce1c:	ldr	r3, [sp, #64]	; 0x40
   2ce20:	cmp	r3, #0
   2ce24:	bne	2d430 <__assert_fail@plt+0x1b88c>
   2ce28:	mov	r9, #0
   2ce2c:	b	2ca60 <__assert_fail@plt+0x1aebc>
   2ce30:	mov	r1, r3
   2ce34:	mov	r3, r2
   2ce38:	mov	r2, r1
   2ce3c:	add	r1, r2, #1
   2ce40:	cmp	r3, r1
   2ce44:	bhi	2cd68 <__assert_fail@plt+0x1b1c4>
   2ce48:	b	2cdbc <__assert_fail@plt+0x1b218>
   2ce4c:	ldr	r3, [r7, #20]
   2ce50:	ldr	r2, [sp, #32]
   2ce54:	add	r3, r3, r2
   2ce58:	ldr	r3, [r3, #8]
   2ce5c:	ldr	r0, [r3]
   2ce60:	b	2cd28 <__assert_fail@plt+0x1b184>
   2ce64:	mov	r3, r6
   2ce68:	str	r9, [sp]
   2ce6c:	stmib	sp, {r0, ip}
   2ce70:	mov	r0, sl
   2ce74:	ldr	r2, [sp, #36]	; 0x24
   2ce78:	ldr	r1, [sp, #40]	; 0x28
   2ce7c:	bl	27754 <__assert_fail@plt+0x15bb0>
   2ce80:	cmp	r0, #0
   2ce84:	bne	2cdcc <__assert_fail@plt+0x1b228>
   2ce88:	ldr	r1, [sp, #64]	; 0x40
   2ce8c:	cmp	r1, #0
   2ce90:	beq	2d010 <__assert_fail@plt+0x1b46c>
   2ce94:	add	r4, sp, #64	; 0x40
   2ce98:	add	r0, sp, #80	; 0x50
   2ce9c:	mov	r1, r5
   2cea0:	str	r6, [sp, #72]	; 0x48
   2cea4:	str	r9, [sp, #76]	; 0x4c
   2cea8:	bl	24b78 <__assert_fail@plt+0x12fd4>
   2ceac:	cmp	r0, #0
   2ceb0:	beq	2d3c0 <__assert_fail@plt+0x1b81c>
   2ceb4:	ldr	r2, [sp, #28]
   2ceb8:	mov	r1, r4
   2cebc:	mov	r0, sl
   2cec0:	ldr	r3, [sp, #64]	; 0x40
   2cec4:	ldr	r4, [r3, r2]
   2cec8:	bl	2d438 <__assert_fail@plt+0x1b894>
   2cecc:	cmp	r0, #0
   2ced0:	bne	2d358 <__assert_fail@plt+0x1b7b4>
   2ced4:	ldr	r1, [fp, #4]
   2ced8:	ldr	r2, [sp, #64]	; 0x40
   2cedc:	cmp	r1, #0
   2cee0:	beq	2cefc <__assert_fail@plt+0x1b358>
   2cee4:	add	r3, r9, #1
   2cee8:	mov	r0, r7
   2ceec:	bl	2c924 <__assert_fail@plt+0x1ad80>
   2cef0:	cmp	r0, #0
   2cef4:	bne	2d358 <__assert_fail@plt+0x1b7b4>
   2cef8:	ldr	r2, [sp, #64]	; 0x40
   2cefc:	ldr	r3, [sp, #28]
   2cf00:	ldr	lr, [sp, #84]	; 0x54
   2cf04:	str	r4, [r2, r3]
   2cf08:	cmp	lr, #0
   2cf0c:	ble	2cf8c <__assert_fail@plt+0x1b3e8>
   2cf10:	sub	r4, lr, #1
   2cf14:	ldr	r1, [sp, #88]	; 0x58
   2cf18:	cmp	r4, #0
   2cf1c:	mov	r0, r4
   2cf20:	movne	r2, #0
   2cf24:	beq	2d408 <__assert_fail@plt+0x1b864>
   2cf28:	add	r3, r0, r2
   2cf2c:	lsr	r3, r3, #1
   2cf30:	ldr	ip, [r1, r3, lsl #2]
   2cf34:	cmp	r5, ip
   2cf38:	bgt	2cfe4 <__assert_fail@plt+0x1b440>
   2cf3c:	cmp	r3, r2
   2cf40:	bls	2cf7c <__assert_fail@plt+0x1b3d8>
   2cf44:	add	r0, r3, r2
   2cf48:	lsr	r0, r0, #1
   2cf4c:	ldr	ip, [r1, r0, lsl #2]
   2cf50:	cmp	r5, ip
   2cf54:	ble	2cf6c <__assert_fail@plt+0x1b3c8>
   2cf58:	b	2cfd8 <__assert_fail@plt+0x1b434>
   2cf5c:	ldr	ip, [r1, r3, lsl #2]
   2cf60:	cmp	r5, ip
   2cf64:	bgt	2cfe4 <__assert_fail@plt+0x1b440>
   2cf68:	mov	r0, r3
   2cf6c:	add	r3, r2, r0
   2cf70:	cmp	r2, r0
   2cf74:	lsr	r3, r3, #1
   2cf78:	bcc	2cf5c <__assert_fail@plt+0x1b3b8>
   2cf7c:	lsl	r3, r2, #2
   2cf80:	ldr	r3, [r1, r3]!
   2cf84:	cmp	r5, r3
   2cf88:	beq	2cf9c <__assert_fail@plt+0x1b3f8>
   2cf8c:	ldr	r4, [sl, #116]	; 0x74
   2cf90:	add	r3, r5, r5, lsl #1
   2cf94:	add	r4, r4, r3, lsl #3
   2cf98:	b	2cdcc <__assert_fail@plt+0x1b228>
   2cf9c:	cmp	lr, r2
   2cfa0:	movgt	lr, #0
   2cfa4:	movle	lr, #1
   2cfa8:	orrs	r3, lr, r2, lsr #31
   2cfac:	bne	2cf8c <__assert_fail@plt+0x1b3e8>
   2cfb0:	cmp	r2, r4
   2cfb4:	str	r4, [sp, #84]	; 0x54
   2cfb8:	bge	2cf8c <__assert_fail@plt+0x1b3e8>
   2cfbc:	ldr	r3, [r1, #4]
   2cfc0:	add	r2, r2, #1
   2cfc4:	str	r3, [r1], #4
   2cfc8:	ldr	r3, [sp, #84]	; 0x54
   2cfcc:	cmp	r2, r3
   2cfd0:	blt	2cfbc <__assert_fail@plt+0x1b418>
   2cfd4:	b	2cf8c <__assert_fail@plt+0x1b3e8>
   2cfd8:	mov	r2, r0
   2cfdc:	mov	r0, r3
   2cfe0:	mov	r3, r2
   2cfe4:	add	r2, r3, #1
   2cfe8:	cmp	r2, r0
   2cfec:	bcc	2cf28 <__assert_fail@plt+0x1b384>
   2cff0:	b	2cf7c <__assert_fail@plt+0x1b3d8>
   2cff4:	mov	r1, r2
   2cff8:	mov	r2, r3
   2cffc:	mov	r3, r1
   2d000:	add	lr, r3, #1
   2d004:	cmp	lr, r2
   2d008:	blt	2cbbc <__assert_fail@plt+0x1b018>
   2d00c:	b	2cc28 <__assert_fail@plt+0x1b084>
   2d010:	ldrd	r2, [fp]
   2d014:	add	r4, sp, #64	; 0x40
   2d018:	ldr	ip, [fp, #20]
   2d01c:	ldr	r0, [fp, #24]
   2d020:	strd	r2, [sp, #64]	; 0x40
   2d024:	ldrd	r2, [fp, #8]
   2d028:	cmp	ip, #0
   2d02c:	strd	r2, [r4, #8]
   2d030:	ldrd	r2, [fp, #16]
   2d034:	str	r0, [r4, #24]
   2d038:	strd	r2, [r4, #16]
   2d03c:	ble	2d374 <__assert_fail@plt+0x1b7d0>
   2d040:	lsl	r0, ip, #2
   2d044:	str	ip, [sp, #80]	; 0x50
   2d048:	bl	39028 <__assert_fail@plt+0x27484>
   2d04c:	cmp	r0, #0
   2d050:	str	r0, [sp, #88]	; 0x58
   2d054:	beq	2d41c <__assert_fail@plt+0x1b878>
   2d058:	ldr	r2, [fp, #20]
   2d05c:	ldr	r1, [fp, #24]
   2d060:	lsl	r2, r2, #2
   2d064:	bl	11784 <memcpy@plt>
   2d068:	add	r0, sp, #80	; 0x50
   2d06c:	b	2ce9c <__assert_fail@plt+0x1b2f8>
   2d070:	ldr	r3, [sl, #116]	; 0x74
   2d074:	str	r3, [sp, #32]
   2d078:	ble	2d168 <__assert_fail@plt+0x1b5c4>
   2d07c:	mov	r7, r0
   2d080:	str	r9, [sp, #24]
   2d084:	mov	r9, r8
   2d088:	str	sl, [sp, #48]	; 0x30
   2d08c:	ldr	r3, [fp, #24]
   2d090:	ldr	r0, [sp, #32]
   2d094:	ldr	r3, [r3, r7, lsl #2]
   2d098:	add	r3, r3, r3, lsl #1
   2d09c:	add	r2, r0, r3, lsl #3
   2d0a0:	ldr	r1, [r2, #8]
   2d0a4:	cmp	r9, r1
   2d0a8:	ble	2d150 <__assert_fail@plt+0x1b5ac>
   2d0ac:	ldr	r1, [r2, #4]
   2d0b0:	cmp	r9, r1
   2d0b4:	bgt	2d150 <__assert_fail@plt+0x1b5ac>
   2d0b8:	ldr	r1, [r2, #12]
   2d0bc:	ldr	r2, [r0, r3, lsl #3]
   2d0c0:	ldr	r3, [r6]
   2d0c4:	cmp	r9, r1
   2d0c8:	ldr	r0, [r4, #4]
   2d0cc:	ldr	r8, [r3, r2, lsl #3]
   2d0d0:	str	r0, [sp, #40]	; 0x28
   2d0d4:	beq	2d174 <__assert_fail@plt+0x1b5d0>
   2d0d8:	cmp	r0, #0
   2d0dc:	ble	2d150 <__assert_fail@plt+0x1b5ac>
   2d0e0:	mov	r5, #0
   2d0e4:	ldr	sl, [sp, #36]	; 0x24
   2d0e8:	b	2d0f8 <__assert_fail@plt+0x1b554>
   2d0ec:	cmp	r5, r0
   2d0f0:	bge	2d148 <__assert_fail@plt+0x1b5a4>
   2d0f4:	ldr	r3, [r6]
   2d0f8:	ldr	r2, [r4, #8]
   2d0fc:	ldr	r1, [r2, r5, lsl #2]
   2d100:	add	r5, r5, #1
   2d104:	add	r2, r3, r1, lsl #3
   2d108:	ldrb	r2, [r2, #4]
   2d10c:	sub	r2, r2, #8
   2d110:	cmp	r2, #1
   2d114:	bhi	2d0ec <__assert_fail@plt+0x1b548>
   2d118:	ldr	r3, [r3, r1, lsl #3]
   2d11c:	cmp	r8, r3
   2d120:	bne	2d0ec <__assert_fail@plt+0x1b548>
   2d124:	mov	r3, sl
   2d128:	mov	r2, r4
   2d12c:	mov	r0, r6
   2d130:	bl	28ec8 <__assert_fail@plt+0x17324>
   2d134:	cmp	r0, #0
   2d138:	bne	2d350 <__assert_fail@plt+0x1b7ac>
   2d13c:	ldr	r0, [r4, #4]
   2d140:	cmp	r5, r0
   2d144:	blt	2d0f4 <__assert_fail@plt+0x1b550>
   2d148:	ldr	r3, [fp, #20]
   2d14c:	str	r3, [sp, #24]
   2d150:	ldr	r3, [sp, #24]
   2d154:	add	r7, r7, #1
   2d158:	cmp	r7, r3
   2d15c:	blt	2d08c <__assert_fail@plt+0x1b4e8>
   2d160:	ldr	sl, [sp, #48]	; 0x30
   2d164:	mov	r8, r9
   2d168:	mov	r3, #0
   2d16c:	str	r3, [sp, #60]	; 0x3c
   2d170:	b	2cb64 <__assert_fail@plt+0x1afc0>
   2d174:	cmp	r0, #0
   2d178:	ble	2d150 <__assert_fail@plt+0x1b5ac>
   2d17c:	ldr	sl, [r4, #8]
   2d180:	mvn	r5, #0
   2d184:	mov	r1, r5
   2d188:	str	r6, [sp, #44]	; 0x2c
   2d18c:	add	r2, sl, r0, lsl #2
   2d190:	mov	r0, sl
   2d194:	mov	r6, r2
   2d198:	b	2d1b8 <__assert_fail@plt+0x1b614>
   2d19c:	cmp	ip, #9
   2d1a0:	bne	2d1b0 <__assert_fail@plt+0x1b60c>
   2d1a4:	ldr	ip, [lr]
   2d1a8:	cmp	r8, ip
   2d1ac:	moveq	r5, r2
   2d1b0:	cmp	r6, r0
   2d1b4:	beq	2d1e0 <__assert_fail@plt+0x1b63c>
   2d1b8:	ldr	r2, [r0], #4
   2d1bc:	add	lr, r3, r2, lsl #3
   2d1c0:	ldrb	ip, [lr, #4]
   2d1c4:	cmp	ip, #8
   2d1c8:	bne	2d19c <__assert_fail@plt+0x1b5f8>
   2d1cc:	ldr	ip, [r3, r2, lsl #3]
   2d1d0:	cmp	r8, ip
   2d1d4:	moveq	r1, r2
   2d1d8:	cmp	r6, r0
   2d1dc:	bne	2d1b8 <__assert_fail@plt+0x1b614>
   2d1e0:	cmp	r1, #0
   2d1e4:	ldr	r6, [sp, #44]	; 0x2c
   2d1e8:	bge	2d388 <__assert_fail@plt+0x1b7e4>
   2d1ec:	cmp	r5, #0
   2d1f0:	blt	2d150 <__assert_fail@plt+0x1b5ac>
   2d1f4:	mov	r3, sl
   2d1f8:	ldr	sl, [sp, #40]	; 0x28
   2d1fc:	mov	r8, #0
   2d200:	ldr	r1, [r3, r8, lsl #2]
   2d204:	ldr	r3, [r6, #28]
   2d208:	add	lr, r1, r1, lsl #1
   2d20c:	lsl	lr, lr, #2
   2d210:	add	r3, r3, lr
   2d214:	ldr	r2, [r3, #4]
   2d218:	cmp	r2, #0
   2d21c:	ble	2d29c <__assert_fail@plt+0x1b6f8>
   2d220:	subs	r2, r2, #1
   2d224:	ldr	ip, [r3, #8]
   2d228:	moveq	r0, r2
   2d22c:	beq	2d290 <__assert_fail@plt+0x1b6ec>
   2d230:	mov	r0, #0
   2d234:	str	r1, [sp, #24]
   2d238:	add	r3, r2, r0
   2d23c:	lsr	r3, r3, #1
   2d240:	ldr	r1, [ip, r3, lsl #2]
   2d244:	cmp	r5, r1
   2d248:	bgt	2d3d4 <__assert_fail@plt+0x1b830>
   2d24c:	cmp	r3, r0
   2d250:	bls	2d28c <__assert_fail@plt+0x1b6e8>
   2d254:	add	r2, r3, r0
   2d258:	lsr	r2, r2, #1
   2d25c:	ldr	r1, [ip, r2, lsl #2]
   2d260:	cmp	r5, r1
   2d264:	ble	2d27c <__assert_fail@plt+0x1b6d8>
   2d268:	b	2d3c8 <__assert_fail@plt+0x1b824>
   2d26c:	ldr	r1, [ip, r3, lsl #2]
   2d270:	cmp	r5, r1
   2d274:	bgt	2d3d4 <__assert_fail@plt+0x1b830>
   2d278:	mov	r2, r3
   2d27c:	add	r3, r0, r2
   2d280:	cmp	r0, r2
   2d284:	lsr	r3, r3, #1
   2d288:	bcc	2d26c <__assert_fail@plt+0x1b6c8>
   2d28c:	ldr	r1, [sp, #24]
   2d290:	ldr	r3, [ip, r0, lsl #2]
   2d294:	cmp	r5, r3
   2d298:	beq	2d3e4 <__assert_fail@plt+0x1b840>
   2d29c:	ldr	r3, [r6, #24]
   2d2a0:	add	lr, r3, lr
   2d2a4:	ldr	r2, [lr, #4]
   2d2a8:	cmp	r2, #0
   2d2ac:	ble	2d324 <__assert_fail@plt+0x1b780>
   2d2b0:	subs	r2, r2, #1
   2d2b4:	ldr	ip, [lr, #8]
   2d2b8:	moveq	r0, r2
   2d2bc:	beq	2d318 <__assert_fail@plt+0x1b774>
   2d2c0:	mov	r0, #0
   2d2c4:	add	r3, r2, r0
   2d2c8:	lsr	r3, r3, #1
   2d2cc:	ldr	lr, [ip, r3, lsl #2]
   2d2d0:	cmp	lr, r5
   2d2d4:	blt	2d3f8 <__assert_fail@plt+0x1b854>
   2d2d8:	cmp	r3, r0
   2d2dc:	bls	2d318 <__assert_fail@plt+0x1b774>
   2d2e0:	add	r2, r3, r0
   2d2e4:	lsr	r2, r2, #1
   2d2e8:	ldr	lr, [ip, r2, lsl #2]
   2d2ec:	cmp	r5, lr
   2d2f0:	ble	2d308 <__assert_fail@plt+0x1b764>
   2d2f4:	b	2d3ec <__assert_fail@plt+0x1b848>
   2d2f8:	ldr	lr, [ip, r3, lsl #2]
   2d2fc:	cmp	r5, lr
   2d300:	bgt	2d3f8 <__assert_fail@plt+0x1b854>
   2d304:	mov	r2, r3
   2d308:	add	r3, r0, r2
   2d30c:	cmp	r0, r2
   2d310:	lsr	r3, r3, #1
   2d314:	bcc	2d2f8 <__assert_fail@plt+0x1b754>
   2d318:	ldr	r3, [ip, r0, lsl #2]
   2d31c:	cmp	r5, r3
   2d320:	beq	2d3e4 <__assert_fail@plt+0x1b840>
   2d324:	mov	r2, r4
   2d328:	mov	r0, r6
   2d32c:	ldr	r3, [sp, #36]	; 0x24
   2d330:	bl	28ec8 <__assert_fail@plt+0x17324>
   2d334:	cmp	r0, #0
   2d338:	bne	2d350 <__assert_fail@plt+0x1b7ac>
   2d33c:	ldr	sl, [r4, #4]
   2d340:	cmp	sl, r8
   2d344:	ble	2d148 <__assert_fail@plt+0x1b5a4>
   2d348:	ldr	r3, [r4, #8]
   2d34c:	b	2d200 <__assert_fail@plt+0x1b65c>
   2d350:	mov	r9, r0
   2d354:	b	2ca60 <__assert_fail@plt+0x1aebc>
   2d358:	mov	r9, r0
   2d35c:	ldr	r3, [sp, #64]	; 0x40
   2d360:	cmp	r3, #0
   2d364:	beq	2ca60 <__assert_fail@plt+0x1aebc>
   2d368:	ldr	r0, [sp, #88]	; 0x58
   2d36c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2d370:	b	2ca60 <__assert_fail@plt+0x1aebc>
   2d374:	add	r0, sp, #80	; 0x50
   2d378:	str	r1, [sp, #80]	; 0x50
   2d37c:	str	r1, [r0, #4]
   2d380:	str	r1, [r0, #8]
   2d384:	b	2ce9c <__assert_fail@plt+0x1b2f8>
   2d388:	mov	r2, r4
   2d38c:	mov	r0, r6
   2d390:	ldr	r3, [sp, #36]	; 0x24
   2d394:	bl	28ec8 <__assert_fail@plt+0x17324>
   2d398:	cmp	r0, #0
   2d39c:	bne	2d350 <__assert_fail@plt+0x1b7ac>
   2d3a0:	cmp	r5, #0
   2d3a4:	blt	2d148 <__assert_fail@plt+0x1b5a4>
   2d3a8:	ldr	r3, [r4, #4]
   2d3ac:	cmp	r3, #0
   2d3b0:	str	r3, [sp, #40]	; 0x28
   2d3b4:	ble	2d148 <__assert_fail@plt+0x1b5a4>
   2d3b8:	ldr	sl, [r4, #8]
   2d3bc:	b	2d1f4 <__assert_fail@plt+0x1b650>
   2d3c0:	mov	r9, #12
   2d3c4:	b	2d35c <__assert_fail@plt+0x1b7b8>
   2d3c8:	mov	r0, r2
   2d3cc:	mov	r2, r3
   2d3d0:	mov	r3, r0
   2d3d4:	add	r0, r3, #1
   2d3d8:	cmp	r0, r2
   2d3dc:	bcc	2d238 <__assert_fail@plt+0x1b694>
   2d3e0:	b	2d28c <__assert_fail@plt+0x1b6e8>
   2d3e4:	add	r8, r8, #1
   2d3e8:	b	2d340 <__assert_fail@plt+0x1b79c>
   2d3ec:	mov	r0, r2
   2d3f0:	mov	r2, r3
   2d3f4:	mov	r3, r0
   2d3f8:	add	r0, r3, #1
   2d3fc:	cmp	r0, r2
   2d400:	bcc	2d2c4 <__assert_fail@plt+0x1b720>
   2d404:	b	2d318 <__assert_fail@plt+0x1b774>
   2d408:	ldr	r3, [r1]
   2d40c:	cmp	r3, r5
   2d410:	bne	2cf8c <__assert_fail@plt+0x1b3e8>
   2d414:	mov	r2, r4
   2d418:	b	2cfb0 <__assert_fail@plt+0x1b40c>
   2d41c:	mov	r2, #0
   2d420:	mov	r3, #0
   2d424:	mov	r9, #12
   2d428:	strd	r2, [sp, #80]	; 0x50
   2d42c:	b	2d35c <__assert_fail@plt+0x1b7b8>
   2d430:	mov	r9, #0
   2d434:	b	2d368 <__assert_fail@plt+0x1b7c4>
   2d438:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d43c:	ldr	r4, [r1, #8]
   2d440:	strd	r6, [sp, #8]
   2d444:	mov	r6, #1
   2d448:	strd	r8, [sp, #16]
   2d44c:	strd	sl, [sp, #24]
   2d450:	mov	sl, r0
   2d454:	mov	r0, #4
   2d458:	str	lr, [sp, #32]
   2d45c:	sub	sp, sp, #68	; 0x44
   2d460:	mov	fp, r1
   2d464:	ldr	r9, [r1, #12]
   2d468:	str	r6, [sp, #48]	; 0x30
   2d46c:	str	r6, [sp, #52]	; 0x34
   2d470:	bl	39028 <__assert_fail@plt+0x27484>
   2d474:	cmp	r0, #0
   2d478:	str	r0, [sp, #56]	; 0x38
   2d47c:	beq	2d944 <__assert_fail@plt+0x1bda0>
   2d480:	mov	r2, r9
   2d484:	add	r3, sp, #48	; 0x30
   2d488:	str	r4, [r0]
   2d48c:	mov	r1, fp
   2d490:	mov	r0, sl
   2d494:	bl	2c9e8 <__assert_fail@plt+0x1ae44>
   2d498:	subs	r4, r0, #0
   2d49c:	bne	2d920 <__assert_fail@plt+0x1bd7c>
   2d4a0:	cmp	r9, #0
   2d4a4:	movgt	r5, r6
   2d4a8:	strgt	r4, [sp, #24]
   2d4ac:	strgt	r6, [sp, #40]	; 0x28
   2d4b0:	strgt	r5, [sp, #44]	; 0x2c
   2d4b4:	ble	2d920 <__assert_fail@plt+0x1bd7c>
   2d4b8:	ldr	r0, [fp]
   2d4bc:	lsl	r3, r9, #2
   2d4c0:	str	r3, [sp, #20]
   2d4c4:	ldr	r3, [r0, r9, lsl #2]
   2d4c8:	cmp	r3, #0
   2d4cc:	ldreq	r3, [sp, #24]
   2d4d0:	movne	r3, #0
   2d4d4:	addeq	r3, r3, #1
   2d4d8:	mov	r2, r3
   2d4dc:	str	r3, [sp, #24]
   2d4e0:	ldr	r3, [sl, #120]	; 0x78
   2d4e4:	cmp	r3, r2
   2d4e8:	blt	2d928 <__assert_fail@plt+0x1bd84>
   2d4ec:	mov	r2, #0
   2d4f0:	ldr	r3, [sl, #100]	; 0x64
   2d4f4:	sub	r9, r9, #1
   2d4f8:	str	r2, [sp, #52]	; 0x34
   2d4fc:	ldr	r2, [sp, #20]
   2d500:	add	r3, r3, r2
   2d504:	ldr	r5, [r3, #-4]
   2d508:	cmp	r5, #0
   2d50c:	beq	2d7c4 <__assert_fail@plt+0x1bc20>
   2d510:	ldr	r3, [r5, #20]
   2d514:	ldr	r7, [sl, #84]	; 0x54
   2d518:	cmp	r3, #0
   2d51c:	ble	2d7c4 <__assert_fail@plt+0x1bc20>
   2d520:	ldr	r3, [r5, #24]
   2d524:	add	r2, fp, #24
   2d528:	mov	r8, #0
   2d52c:	ldr	r1, [r7]
   2d530:	str	r2, [sp, #32]
   2d534:	add	r2, fp, #20
   2d538:	ldr	r4, [r3]
   2d53c:	str	r2, [sp, #36]	; 0x24
   2d540:	lsl	r6, r4, #3
   2d544:	add	r1, r1, r6
   2d548:	ldrb	r3, [r1, #6]
   2d54c:	str	r6, [sp, #16]
   2d550:	mov	r6, r8
   2d554:	mov	r8, r5
   2d558:	tst	r3, #16
   2d55c:	bne	2d644 <__assert_fail@plt+0x1baa0>
   2d560:	mov	r2, r9
   2d564:	mov	r0, sl
   2d568:	bl	25250 <__assert_fail@plt+0x136ac>
   2d56c:	cmp	r0, #0
   2d570:	beq	2d610 <__assert_fail@plt+0x1ba6c>
   2d574:	ldr	r3, [fp]
   2d578:	ldr	r2, [sp, #20]
   2d57c:	ldr	r2, [r3, r2]
   2d580:	cmp	r2, #0
   2d584:	beq	2d610 <__assert_fail@plt+0x1ba6c>
   2d588:	ldr	r3, [r2, #8]
   2d58c:	cmp	r3, #0
   2d590:	ble	2d610 <__assert_fail@plt+0x1ba6c>
   2d594:	ldr	r1, [r7, #12]
   2d598:	subs	r3, r3, #1
   2d59c:	ldr	ip, [r2, #12]
   2d5a0:	ldr	r0, [r1, r4, lsl #2]
   2d5a4:	moveq	r1, r3
   2d5a8:	beq	2d604 <__assert_fail@plt+0x1ba60>
   2d5ac:	mov	r1, #0
   2d5b0:	add	r2, r3, r1
   2d5b4:	lsr	r2, r2, #1
   2d5b8:	ldr	lr, [ip, r2, lsl #2]
   2d5bc:	cmp	r0, lr
   2d5c0:	bgt	2d734 <__assert_fail@plt+0x1bb90>
   2d5c4:	cmp	r2, r1
   2d5c8:	bls	2d604 <__assert_fail@plt+0x1ba60>
   2d5cc:	add	r3, r2, r1
   2d5d0:	lsr	r3, r3, #1
   2d5d4:	ldr	lr, [ip, r3, lsl #2]
   2d5d8:	cmp	r0, lr
   2d5dc:	ble	2d5f4 <__assert_fail@plt+0x1ba50>
   2d5e0:	b	2d728 <__assert_fail@plt+0x1bb84>
   2d5e4:	ldr	lr, [ip, r2, lsl #2]
   2d5e8:	cmp	r0, lr
   2d5ec:	bgt	2d734 <__assert_fail@plt+0x1bb90>
   2d5f0:	mov	r3, r2
   2d5f4:	add	r2, r1, r3
   2d5f8:	cmp	r1, r3
   2d5fc:	lsr	r2, r2, #1
   2d600:	bcc	2d5e4 <__assert_fail@plt+0x1ba40>
   2d604:	ldr	r3, [ip, r1, lsl #2]
   2d608:	cmp	r0, r3
   2d60c:	beq	2d74c <__assert_fail@plt+0x1bba8>
   2d610:	ldr	r3, [r8, #20]
   2d614:	add	r6, r6, #1
   2d618:	cmp	r6, r3
   2d61c:	bge	2d7c4 <__assert_fail@plt+0x1bc20>
   2d620:	ldr	r3, [r8, #24]
   2d624:	ldr	r1, [r7]
   2d628:	ldr	r4, [r3, r6, lsl #2]
   2d62c:	lsl	r3, r4, #3
   2d630:	add	r1, r1, r3
   2d634:	str	r3, [sp, #16]
   2d638:	ldrb	r3, [r1, #6]
   2d63c:	tst	r3, #16
   2d640:	beq	2d560 <__assert_fail@plt+0x1b9bc>
   2d644:	ldr	r1, [fp, #12]
   2d648:	mov	r3, sl
   2d64c:	mov	r2, r4
   2d650:	ldr	r5, [sl, #84]	; 0x54
   2d654:	str	r1, [sp, #28]
   2d658:	mov	r1, r5
   2d65c:	ldr	r0, [r1], #128	; 0x80
   2d660:	str	r9, [sp]
   2d664:	bl	27d4c <__assert_fail@plt+0x161a8>
   2d668:	cmp	r0, #0
   2d66c:	ble	2d814 <__assert_fail@plt+0x1bc70>
   2d670:	ldr	r1, [sp, #28]
   2d674:	add	r3, r9, r0
   2d678:	cmp	r1, r3
   2d67c:	blt	2d750 <__assert_fail@plt+0x1bbac>
   2d680:	ldr	r2, [fp]
   2d684:	ldr	r3, [r2, r3, lsl #2]
   2d688:	cmp	r3, #0
   2d68c:	beq	2d718 <__assert_fail@plt+0x1bb74>
   2d690:	ldr	r2, [r3, #8]
   2d694:	cmp	r2, #0
   2d698:	ble	2d718 <__assert_fail@plt+0x1bb74>
   2d69c:	ldr	r1, [r5, #12]
   2d6a0:	subs	r2, r2, #1
   2d6a4:	ldr	lr, [r3, #12]
   2d6a8:	ldr	ip, [r1, r4, lsl #2]
   2d6ac:	moveq	r1, r2
   2d6b0:	beq	2d70c <__assert_fail@plt+0x1bb68>
   2d6b4:	mov	r1, #0
   2d6b8:	add	r3, r2, r1
   2d6bc:	lsr	r3, r3, #1
   2d6c0:	ldr	r5, [lr, r3, lsl #2]
   2d6c4:	cmp	ip, r5
   2d6c8:	bgt	2d89c <__assert_fail@plt+0x1bcf8>
   2d6cc:	cmp	r3, r1
   2d6d0:	bls	2d70c <__assert_fail@plt+0x1bb68>
   2d6d4:	add	r2, r3, r1
   2d6d8:	lsr	r2, r2, #1
   2d6dc:	ldr	r5, [lr, r2, lsl #2]
   2d6e0:	cmp	ip, r5
   2d6e4:	ble	2d6fc <__assert_fail@plt+0x1bb58>
   2d6e8:	b	2d890 <__assert_fail@plt+0x1bcec>
   2d6ec:	ldr	r5, [lr, r3, lsl #2]
   2d6f0:	cmp	ip, r5
   2d6f4:	bgt	2d89c <__assert_fail@plt+0x1bcf8>
   2d6f8:	mov	r2, r3
   2d6fc:	add	r3, r1, r2
   2d700:	cmp	r1, r2
   2d704:	lsr	r3, r3, #1
   2d708:	bcc	2d6ec <__assert_fail@plt+0x1bb48>
   2d70c:	ldr	r3, [lr, r1, lsl #2]
   2d710:	cmp	ip, r3
   2d714:	beq	2d750 <__assert_fail@plt+0x1bbac>
   2d718:	ldr	r1, [r7]
   2d71c:	ldr	r3, [sp, #16]
   2d720:	add	r1, r1, r3
   2d724:	b	2d560 <__assert_fail@plt+0x1b9bc>
   2d728:	mov	r1, r3
   2d72c:	mov	r3, r2
   2d730:	mov	r2, r1
   2d734:	add	r1, r2, #1
   2d738:	cmp	r3, r1
   2d73c:	bhi	2d5b0 <__assert_fail@plt+0x1ba0c>
   2d740:	ldr	r3, [ip, r1, lsl #2]
   2d744:	cmp	r0, r3
   2d748:	bne	2d610 <__assert_fail@plt+0x1ba6c>
   2d74c:	mov	r0, #1
   2d750:	ldr	r3, [fp, #20]
   2d754:	cmp	r3, #0
   2d758:	beq	2d788 <__assert_fail@plt+0x1bbe4>
   2d75c:	ldr	r3, [r7, #12]
   2d760:	add	ip, r9, r0
   2d764:	mov	r0, sl
   2d768:	ldr	r2, [sp, #32]
   2d76c:	ldr	r1, [sp, #36]	; 0x24
   2d770:	ldr	r3, [r3, r4, lsl #2]
   2d774:	str	ip, [sp]
   2d778:	stmib	sp, {r4, r9}
   2d77c:	bl	27754 <__assert_fail@plt+0x15bb0>
   2d780:	cmp	r0, #0
   2d784:	bne	2d610 <__assert_fail@plt+0x1ba6c>
   2d788:	ldr	r1, [sp, #48]	; 0x30
   2d78c:	cmp	r1, #0
   2d790:	beq	2d81c <__assert_fail@plt+0x1bc78>
   2d794:	ldr	r3, [sp, #52]	; 0x34
   2d798:	ldr	r5, [sp, #56]	; 0x38
   2d79c:	cmp	r3, #0
   2d7a0:	bne	2d848 <__assert_fail@plt+0x1bca4>
   2d7a4:	str	r4, [r5]
   2d7a8:	add	r6, r6, #1
   2d7ac:	ldr	r3, [sp, #52]	; 0x34
   2d7b0:	add	r3, r3, #1
   2d7b4:	str	r3, [sp, #52]	; 0x34
   2d7b8:	ldr	r3, [r8, #20]
   2d7bc:	cmp	r6, r3
   2d7c0:	blt	2d620 <__assert_fail@plt+0x1ba7c>
   2d7c4:	add	r3, sp, #48	; 0x30
   2d7c8:	mov	r2, r9
   2d7cc:	mov	r1, fp
   2d7d0:	mov	r0, sl
   2d7d4:	bl	2c9e8 <__assert_fail@plt+0x1ae44>
   2d7d8:	cmp	r0, #0
   2d7dc:	bne	2d7e8 <__assert_fail@plt+0x1bc44>
   2d7e0:	cmp	r9, #0
   2d7e4:	bne	2d4b8 <__assert_fail@plt+0x1b914>
   2d7e8:	mov	r4, r0
   2d7ec:	ldr	r0, [sp, #56]	; 0x38
   2d7f0:	bl	19610 <__assert_fail@plt+0x7a6c>
   2d7f4:	mov	r0, r4
   2d7f8:	add	sp, sp, #68	; 0x44
   2d7fc:	ldrd	r4, [sp]
   2d800:	ldrd	r6, [sp, #8]
   2d804:	ldrd	r8, [sp, #16]
   2d808:	ldrd	sl, [sp, #24]
   2d80c:	add	sp, sp, #32
   2d810:	pop	{pc}		; (ldr pc, [sp], #4)
   2d814:	beq	2d718 <__assert_fail@plt+0x1bb74>
   2d818:	b	2d750 <__assert_fail@plt+0x1bbac>
   2d81c:	ldr	r3, [sp, #40]	; 0x28
   2d820:	mov	r0, #4
   2d824:	str	r3, [sp, #48]	; 0x30
   2d828:	ldr	r3, [sp, #44]	; 0x2c
   2d82c:	str	r3, [sp, #52]	; 0x34
   2d830:	bl	39028 <__assert_fail@plt+0x27484>
   2d834:	cmp	r0, #0
   2d838:	str	r0, [sp, #56]	; 0x38
   2d83c:	beq	2d8e4 <__assert_fail@plt+0x1bd40>
   2d840:	str	r4, [r0]
   2d844:	b	2d610 <__assert_fail@plt+0x1ba6c>
   2d848:	cmp	r1, r3
   2d84c:	beq	2d8f8 <__assert_fail@plt+0x1bd54>
   2d850:	ldr	r1, [r5]
   2d854:	mov	r2, r3
   2d858:	cmp	r1, r4
   2d85c:	ble	2d8ac <__assert_fail@plt+0x1bd08>
   2d860:	cmp	r3, #0
   2d864:	ble	2d87c <__assert_fail@plt+0x1bcd8>
   2d868:	lsl	r2, r3, #2
   2d86c:	mov	r1, r5
   2d870:	add	r0, r5, #4
   2d874:	bl	11748 <memmove@plt>
   2d878:	mov	r2, #0
   2d87c:	str	r4, [r5, r2, lsl #2]
   2d880:	ldr	r3, [sp, #52]	; 0x34
   2d884:	add	r3, r3, #1
   2d888:	str	r3, [sp, #52]	; 0x34
   2d88c:	b	2d610 <__assert_fail@plt+0x1ba6c>
   2d890:	mov	r1, r2
   2d894:	mov	r2, r3
   2d898:	mov	r3, r1
   2d89c:	add	r1, r3, #1
   2d8a0:	cmp	r1, r2
   2d8a4:	bcc	2d6b8 <__assert_fail@plt+0x1bb14>
   2d8a8:	b	2d70c <__assert_fail@plt+0x1bb68>
   2d8ac:	sub	r1, r3, #-1073741823	; 0xc0000001
   2d8b0:	ldr	r0, [r5, r1, lsl #2]
   2d8b4:	lsl	r1, r1, #2
   2d8b8:	cmp	r0, r4
   2d8bc:	ble	2d87c <__assert_fail@plt+0x1bcd8>
   2d8c0:	add	r1, r1, #4
   2d8c4:	add	r1, r5, r1
   2d8c8:	str	r0, [r1], #-4
   2d8cc:	sub	r3, r3, #1
   2d8d0:	ldr	r0, [r1, #-4]
   2d8d4:	mov	r2, r3
   2d8d8:	cmp	r0, r4
   2d8dc:	bgt	2d8c8 <__assert_fail@plt+0x1bd24>
   2d8e0:	b	2d87c <__assert_fail@plt+0x1bcd8>
   2d8e4:	mov	r2, #0
   2d8e8:	mov	r3, #0
   2d8ec:	mov	r4, #12
   2d8f0:	strd	r2, [sp, #48]	; 0x30
   2d8f4:	b	2d7f0 <__assert_fail@plt+0x1bc4c>
   2d8f8:	lsl	r3, r1, #1
   2d8fc:	mov	r0, r5
   2d900:	lsl	r1, r1, #3
   2d904:	str	r3, [sp, #48]	; 0x30
   2d908:	bl	39064 <__assert_fail@plt+0x274c0>
   2d90c:	subs	r5, r0, #0
   2d910:	beq	2d94c <__assert_fail@plt+0x1bda8>
   2d914:	str	r5, [sp, #56]	; 0x38
   2d918:	ldr	r3, [sp, #52]	; 0x34
   2d91c:	b	2d850 <__assert_fail@plt+0x1bcac>
   2d920:	ldr	r0, [sp, #56]	; 0x38
   2d924:	b	2d7f0 <__assert_fail@plt+0x1bc4c>
   2d928:	mov	r1, #0
   2d92c:	ldr	r2, [sp, #20]
   2d930:	mov	r4, r1
   2d934:	bl	119e8 <memset@plt>
   2d938:	ldr	r0, [sp, #56]	; 0x38
   2d93c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2d940:	b	2d7f4 <__assert_fail@plt+0x1bc50>
   2d944:	mov	r4, #12
   2d948:	b	2d7f4 <__assert_fail@plt+0x1bc50>
   2d94c:	mov	r4, #12
   2d950:	ldr	r0, [sp, #56]	; 0x38
   2d954:	b	2d7f0 <__assert_fail@plt+0x1bc4c>
   2d958:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d95c:	ldr	r3, [r0, #84]	; 0x54
   2d960:	strd	r6, [sp, #8]
   2d964:	ldr	r6, [r1]
   2d968:	strd	r8, [sp, #16]
   2d96c:	strd	sl, [sp, #24]
   2d970:	str	lr, [sp, #32]
   2d974:	sub	sp, sp, #84	; 0x54
   2d978:	ldr	sl, [r0, #40]	; 0x28
   2d97c:	cmp	r6, #0
   2d980:	str	r3, [sp, #24]
   2d984:	ble	2deb4 <__assert_fail@plt+0x1c310>
   2d988:	lsl	r3, sl, #2
   2d98c:	mov	fp, r0
   2d990:	mov	r9, sl
   2d994:	str	r2, [sp, #36]	; 0x24
   2d998:	str	r3, [sp, #44]	; 0x2c
   2d99c:	mov	r3, #0
   2d9a0:	str	r1, [sp, #56]	; 0x38
   2d9a4:	str	r3, [sp, #16]
   2d9a8:	b	2d9f0 <__assert_fail@plt+0x1be4c>
   2d9ac:	tst	r0, #1
   2d9b0:	beq	2d9dc <__assert_fail@plt+0x1be38>
   2d9b4:	tst	r3, #8
   2d9b8:	bne	2d9dc <__assert_fail@plt+0x1be38>
   2d9bc:	tst	r3, #32
   2d9c0:	beq	2d9cc <__assert_fail@plt+0x1be28>
   2d9c4:	tst	r0, #2
   2d9c8:	beq	2d9dc <__assert_fail@plt+0x1be38>
   2d9cc:	tst	r3, #128	; 0x80
   2d9d0:	beq	2da60 <__assert_fail@plt+0x1bebc>
   2d9d4:	tst	r0, #8
   2d9d8:	bne	2da60 <__assert_fail@plt+0x1bebc>
   2d9dc:	ldr	r3, [sp, #16]
   2d9e0:	add	r3, r3, #1
   2d9e4:	cmp	r3, r6
   2d9e8:	str	r3, [sp, #16]
   2d9ec:	bge	2deb4 <__assert_fail@plt+0x1c310>
   2d9f0:	ldr	r1, [sp, #16]
   2d9f4:	ldr	r3, [sp, #36]	; 0x24
   2d9f8:	ldr	r2, [r3]
   2d9fc:	ldr	r3, [sp, #24]
   2da00:	ldr	sl, [r2, r1, lsl #2]
   2da04:	ldr	r3, [r3]
   2da08:	add	r3, r3, sl, lsl #3
   2da0c:	ldrb	r2, [r3, #4]
   2da10:	cmp	r2, #4
   2da14:	bne	2d9dc <__assert_fail@plt+0x1be38>
   2da18:	ldr	r4, [r3, #4]
   2da1c:	mov	r3, #65280	; 0xff00
   2da20:	movt	r3, #3
   2da24:	and	r3, r3, r4
   2da28:	cmp	r3, #0
   2da2c:	beq	2da60 <__assert_fail@plt+0x1bebc>
   2da30:	mov	r1, r9
   2da34:	mov	r0, fp
   2da38:	ldr	r2, [fp, #88]	; 0x58
   2da3c:	bl	25138 <__assert_fail@plt+0x13594>
   2da40:	ubfx	r3, r4, #8, #10
   2da44:	tst	r3, #4
   2da48:	bne	2d9ac <__assert_fail@plt+0x1be08>
   2da4c:	tst	r3, #8
   2da50:	beq	2d9bc <__assert_fail@plt+0x1be18>
   2da54:	tst	r0, #1
   2da58:	beq	2d9bc <__assert_fail@plt+0x1be18>
   2da5c:	b	2d9dc <__assert_fail@plt+0x1be38>
   2da60:	ldr	ip, [fp, #108]	; 0x6c
   2da64:	cmp	ip, #0
   2da68:	mov	r4, ip
   2da6c:	ble	2dcf4 <__assert_fail@plt+0x1c150>
   2da70:	ldr	r1, [fp, #116]	; 0x74
   2da74:	mov	r2, ip
   2da78:	mov	r0, #0
   2da7c:	add	r3, r2, r0
   2da80:	asr	r3, r3, #1
   2da84:	add	lr, r3, r3, lsl #1
   2da88:	add	lr, r1, lr, lsl #3
   2da8c:	ldr	lr, [lr, #4]
   2da90:	cmp	r9, lr
   2da94:	bgt	2dce4 <__assert_fail@plt+0x1c140>
   2da98:	cmp	r3, r0
   2da9c:	ble	2dae8 <__assert_fail@plt+0x1bf44>
   2daa0:	add	r2, r3, r0
   2daa4:	asr	r2, r2, #1
   2daa8:	add	lr, r2, r2, lsl #1
   2daac:	add	lr, r1, lr, lsl #3
   2dab0:	ldr	lr, [lr, #4]
   2dab4:	cmp	r9, lr
   2dab8:	ble	2dad8 <__assert_fail@plt+0x1bf34>
   2dabc:	b	2dcd8 <__assert_fail@plt+0x1c134>
   2dac0:	add	lr, r3, r3, lsl #1
   2dac4:	add	lr, r1, lr, lsl #3
   2dac8:	ldr	lr, [lr, #4]
   2dacc:	cmp	r9, lr
   2dad0:	bgt	2dce4 <__assert_fail@plt+0x1c140>
   2dad4:	mov	r2, r3
   2dad8:	add	r3, r0, r2
   2dadc:	cmp	r0, r2
   2dae0:	asr	r3, r3, #1
   2dae4:	blt	2dac0 <__assert_fail@plt+0x1bf1c>
   2dae8:	cmp	ip, r0
   2daec:	ble	2dcf4 <__assert_fail@plt+0x1c150>
   2daf0:	add	r0, r0, r0, lsl #1
   2daf4:	add	r1, r1, r0, lsl #3
   2daf8:	ldr	r3, [r1, #4]
   2dafc:	cmp	r9, r3
   2db00:	bne	2dcf4 <__assert_fail@plt+0x1c150>
   2db04:	add	r1, r1, #24
   2db08:	b	2db18 <__assert_fail@plt+0x1bf74>
   2db0c:	ldrb	r3, [r1, #-28]	; 0xffffffe4
   2db10:	cmp	r3, #0
   2db14:	beq	2dcf4 <__assert_fail@plt+0x1c150>
   2db18:	ldr	r3, [r1, #-24]	; 0xffffffe8
   2db1c:	add	r1, r1, #24
   2db20:	cmp	sl, r3
   2db24:	bne	2db0c <__assert_fail@plt+0x1bf68>
   2db28:	lsl	r2, sl, #2
   2db2c:	mov	r3, #0
   2db30:	cmp	r4, ip
   2db34:	str	r2, [sp, #40]	; 0x28
   2db38:	str	r3, [sp, #64]	; 0x40
   2db3c:	bge	2de68 <__assert_fail@plt+0x1c2c4>
   2db40:	add	r3, sl, sl, lsl #1
   2db44:	ldr	r8, [sp, #24]
   2db48:	lsl	r3, r3, #2
   2db4c:	str	r3, [sp, #48]	; 0x30
   2db50:	b	2dc38 <__assert_fail@plt+0x1c094>
   2db54:	ldr	r2, [r8, #20]
   2db58:	ldr	r1, [sp, #48]	; 0x30
   2db5c:	add	r2, r2, r1
   2db60:	ldr	r2, [r2, #8]
   2db64:	ldr	r2, [r2]
   2db68:	add	r2, r2, r2, lsl #1
   2db6c:	add	r6, r6, r2, lsl #2
   2db70:	add	r3, r9, r3
   2db74:	mov	r0, fp
   2db78:	ldr	r2, [fp, #88]	; 0x58
   2db7c:	sub	r5, r3, r5
   2db80:	sub	r1, r5, #1
   2db84:	bl	25138 <__assert_fail@plt+0x13594>
   2db88:	ldr	r2, [sp, #44]	; 0x2c
   2db8c:	mov	r3, r0
   2db90:	ldr	r7, [fp, #100]	; 0x64
   2db94:	ldr	r2, [r7, r2]
   2db98:	ldr	r1, [r7, r5, lsl #2]
   2db9c:	cmp	r2, #0
   2dba0:	ldrne	r2, [r2, #8]
   2dba4:	cmp	r1, #0
   2dba8:	str	r2, [sp, #28]
   2dbac:	beq	2dc8c <__assert_fail@plt+0x1c0e8>
   2dbb0:	mov	r2, r6
   2dbb4:	add	r0, sp, #68	; 0x44
   2dbb8:	ldr	r1, [r1, #40]	; 0x28
   2dbbc:	str	r3, [sp, #32]
   2dbc0:	bl	2c720 <__assert_fail@plt+0x1ab7c>
   2dbc4:	cmp	r0, #0
   2dbc8:	str	r0, [sp, #64]	; 0x40
   2dbcc:	ldr	r3, [sp, #32]
   2dbd0:	bne	2dea4 <__assert_fail@plt+0x1c300>
   2dbd4:	add	r2, sp, #68	; 0x44
   2dbd8:	mov	r1, r8
   2dbdc:	ldr	r7, [fp, #100]	; 0x64
   2dbe0:	add	r0, sp, #64	; 0x40
   2dbe4:	bl	29f88 <__assert_fail@plt+0x183e4>
   2dbe8:	str	r0, [r7, r5, lsl #2]
   2dbec:	ldr	r0, [sp, #76]	; 0x4c
   2dbf0:	bl	19610 <__assert_fail@plt+0x7a6c>
   2dbf4:	ldr	r3, [fp, #100]	; 0x64
   2dbf8:	ldr	r2, [r3, r5, lsl #2]
   2dbfc:	cmp	r2, #0
   2dc00:	beq	2dcb0 <__assert_fail@plt+0x1c10c>
   2dc04:	ldr	r2, [sp, #20]
   2dc08:	cmp	r2, #0
   2dc0c:	bne	2dc28 <__assert_fail@plt+0x1c084>
   2dc10:	ldr	r2, [sp, #44]	; 0x2c
   2dc14:	ldr	r3, [r3, r2]
   2dc18:	ldr	r2, [sp, #28]
   2dc1c:	ldr	r3, [r3, #8]
   2dc20:	cmp	r3, r2
   2dc24:	bgt	2de20 <__assert_fail@plt+0x1c27c>
   2dc28:	ldr	ip, [fp, #108]	; 0x6c
   2dc2c:	add	r4, r4, #1
   2dc30:	cmp	r4, ip
   2dc34:	bge	2de68 <__assert_fail@plt+0x1c2c4>
   2dc38:	ldr	r3, [fp, #116]	; 0x74
   2dc3c:	add	r2, r4, r4, lsl #1
   2dc40:	ldr	r1, [r3, r2, lsl #3]
   2dc44:	add	r3, r3, r2, lsl #3
   2dc48:	cmp	sl, r1
   2dc4c:	bne	2dc2c <__assert_fail@plt+0x1c088>
   2dc50:	ldr	r2, [r3, #4]
   2dc54:	cmp	r9, r2
   2dc58:	bne	2dc2c <__assert_fail@plt+0x1c088>
   2dc5c:	ldr	r5, [r3, #8]
   2dc60:	ldr	r3, [r3, #12]
   2dc64:	ldr	r6, [r8, #24]
   2dc68:	subs	r2, r3, r5
   2dc6c:	str	r2, [sp, #20]
   2dc70:	beq	2db54 <__assert_fail@plt+0x1bfb0>
   2dc74:	ldr	r2, [r8, #12]
   2dc78:	ldr	r1, [sp, #40]	; 0x28
   2dc7c:	ldr	r2, [r2, r1]
   2dc80:	add	r2, r2, r2, lsl #1
   2dc84:	add	r6, r6, r2, lsl #2
   2dc88:	b	2db70 <__assert_fail@plt+0x1bfcc>
   2dc8c:	mov	r2, r6
   2dc90:	mov	r1, r8
   2dc94:	add	r0, sp, #64	; 0x40
   2dc98:	bl	29f88 <__assert_fail@plt+0x183e4>
   2dc9c:	ldr	r3, [fp, #100]	; 0x64
   2dca0:	str	r0, [r7, r5, lsl #2]
   2dca4:	ldr	r2, [r3, r5, lsl #2]
   2dca8:	cmp	r2, #0
   2dcac:	bne	2dc04 <__assert_fail@plt+0x1c060>
   2dcb0:	ldr	r0, [sp, #64]	; 0x40
   2dcb4:	cmp	r0, #0
   2dcb8:	beq	2dc04 <__assert_fail@plt+0x1c060>
   2dcbc:	add	sp, sp, #84	; 0x54
   2dcc0:	ldrd	r4, [sp]
   2dcc4:	ldrd	r6, [sp, #8]
   2dcc8:	ldrd	r8, [sp, #16]
   2dccc:	ldrd	sl, [sp, #24]
   2dcd0:	add	sp, sp, #32
   2dcd4:	pop	{pc}		; (ldr pc, [sp], #4)
   2dcd8:	mov	r0, r2
   2dcdc:	mov	r2, r3
   2dce0:	mov	r3, r0
   2dce4:	add	r0, r3, #1
   2dce8:	cmp	r0, r2
   2dcec:	blt	2da7c <__assert_fail@plt+0x1bed8>
   2dcf0:	b	2dae8 <__assert_fail@plt+0x1bf44>
   2dcf4:	ldr	r3, [fp, #84]	; 0x54
   2dcf8:	ldr	r1, [fp, #124]	; 0x7c
   2dcfc:	str	r3, [sp, #52]	; 0x34
   2dd00:	ldr	r3, [r3]
   2dd04:	cmp	r1, #0
   2dd08:	ldr	r2, [r3, sl, lsl #3]
   2dd0c:	str	r2, [sp, #48]	; 0x30
   2dd10:	ble	2db28 <__assert_fail@plt+0x1bf84>
   2dd14:	mov	r2, #0
   2dd18:	str	sl, [sp, #40]	; 0x28
   2dd1c:	str	r2, [sp, #28]
   2dd20:	ldr	r2, [fp, #4]
   2dd24:	str	r9, [sp, #32]
   2dd28:	str	r4, [sp, #60]	; 0x3c
   2dd2c:	mov	sl, r2
   2dd30:	ldr	r0, [sp, #28]
   2dd34:	ldr	r2, [fp, #132]	; 0x84
   2dd38:	ldr	r4, [r2, r0, lsl #2]
   2dd3c:	ldr	r2, [r4, #4]
   2dd40:	ldr	r3, [r3, r2, lsl #3]
   2dd44:	ldr	r2, [sp, #48]	; 0x30
   2dd48:	cmp	r2, r3
   2dd4c:	beq	2dd70 <__assert_fail@plt+0x1c1cc>
   2dd50:	ldr	r3, [sp, #28]
   2dd54:	add	r3, r3, #1
   2dd58:	cmp	r3, r1
   2dd5c:	str	r3, [sp, #28]
   2dd60:	bge	2e0ac <__assert_fail@plt+0x1c508>
   2dd64:	ldr	r3, [sp, #52]	; 0x34
   2dd68:	ldr	r3, [r3]
   2dd6c:	b	2dd30 <__assert_fail@plt+0x1c18c>
   2dd70:	ldr	r6, [r4]
   2dd74:	ldr	ip, [r4, #16]
   2dd78:	ldr	r7, [sp, #32]
   2dd7c:	cmp	ip, #0
   2dd80:	ble	2decc <__assert_fail@plt+0x1c328>
   2dd84:	mov	r3, sl
   2dd88:	mov	r5, #0
   2dd8c:	mov	sl, r7
   2dd90:	mov	r7, r6
   2dd94:	b	2dda8 <__assert_fail@plt+0x1c204>
   2dd98:	ldr	ip, [r4, #16]
   2dd9c:	mov	sl, r6
   2dda0:	cmp	r5, ip
   2dda4:	bge	2debc <__assert_fail@plt+0x1c318>
   2dda8:	ldr	r2, [r4, #20]
   2ddac:	ldr	r9, [r2, r5, lsl #2]
   2ddb0:	ldr	r8, [r9, #4]
   2ddb4:	sub	r2, r8, r7
   2ddb8:	cmp	r2, #0
   2ddbc:	add	r6, r2, sl
   2ddc0:	ble	2ddec <__assert_fail@plt+0x1c248>
   2ddc4:	ldr	r1, [fp, #28]
   2ddc8:	cmp	r1, r6
   2ddcc:	blt	2de74 <__assert_fail@plt+0x1c2d0>
   2ddd0:	add	r1, r3, r7
   2ddd4:	add	r0, r3, sl
   2ddd8:	str	r3, [sp, #20]
   2dddc:	bl	117c0 <memcmp@plt>
   2dde0:	cmp	r0, #0
   2dde4:	ldr	r3, [sp, #20]
   2dde8:	bne	2e054 <__assert_fail@plt+0x1c4b0>
   2ddec:	ldr	r1, [sp, #32]
   2ddf0:	mov	r2, r9
   2ddf4:	mov	r0, fp
   2ddf8:	add	r5, r5, #1
   2ddfc:	mov	r7, r8
   2de00:	ldr	r3, [sp, #40]	; 0x28
   2de04:	str	r1, [sp]
   2de08:	mov	r1, r4
   2de0c:	bl	2bc28 <__assert_fail@plt+0x1a084>
   2de10:	cmp	r0, #1
   2de14:	ldr	r3, [fp, #4]
   2de18:	bls	2dd98 <__assert_fail@plt+0x1c1f4>
   2de1c:	b	2dcbc <__assert_fail@plt+0x1c118>
   2de20:	add	r5, r6, #4
   2de24:	add	r6, r6, #8
   2de28:	mov	r2, r6
   2de2c:	mov	r1, r5
   2de30:	mov	r3, r9
   2de34:	mov	r0, fp
   2de38:	bl	25fac <__assert_fail@plt+0x14408>
   2de3c:	cmp	r0, #0
   2de40:	str	r0, [sp, #64]	; 0x40
   2de44:	bne	2dcbc <__assert_fail@plt+0x1c118>
   2de48:	mov	r2, r6
   2de4c:	mov	r1, r5
   2de50:	mov	r0, fp
   2de54:	bl	2d958 <__assert_fail@plt+0x1bdb4>
   2de58:	cmp	r0, #0
   2de5c:	str	r0, [sp, #64]	; 0x40
   2de60:	beq	2dc28 <__assert_fail@plt+0x1c084>
   2de64:	b	2dcbc <__assert_fail@plt+0x1c118>
   2de68:	ldr	r3, [sp, #56]	; 0x38
   2de6c:	ldr	r6, [r3]
   2de70:	b	2d9dc <__assert_fail@plt+0x1be38>
   2de74:	ldr	lr, [fp, #48]	; 0x30
   2de78:	mov	r1, r6
   2de7c:	mov	r0, fp
   2de80:	str	r2, [sp, #20]
   2de84:	cmp	lr, r6
   2de88:	blt	2e0f0 <__assert_fail@plt+0x1c54c>
   2de8c:	bl	28a28 <__assert_fail@plt+0x16e84>
   2de90:	cmp	r0, #0
   2de94:	bne	2dcbc <__assert_fail@plt+0x1c118>
   2de98:	ldr	r3, [fp, #4]
   2de9c:	ldr	r2, [sp, #20]
   2dea0:	b	2ddd0 <__assert_fail@plt+0x1c22c>
   2dea4:	ldr	r0, [sp, #76]	; 0x4c
   2dea8:	bl	19610 <__assert_fail@plt+0x7a6c>
   2deac:	ldr	r0, [sp, #64]	; 0x40
   2deb0:	b	2dcbc <__assert_fail@plt+0x1c118>
   2deb4:	mov	r0, #0
   2deb8:	b	2dcbc <__assert_fail@plt+0x1c118>
   2debc:	mov	r9, r6
   2dec0:	mov	sl, r3
   2dec4:	add	r6, r8, #1
   2dec8:	mov	r7, r9
   2decc:	ldr	r3, [sp, #32]
   2ded0:	cmp	r3, r6
   2ded4:	blt	2e024 <__assert_fail@plt+0x1c480>
   2ded8:	ldr	r8, [sp, #48]	; 0x30
   2dedc:	mov	r9, r3
   2dee0:	ldr	r3, [r4]
   2dee4:	sub	r3, r6, r3
   2dee8:	cmp	r3, #0
   2deec:	ble	2df18 <__assert_fail@plt+0x1c374>
   2def0:	ldr	r3, [fp, #28]
   2def4:	cmp	r3, r7
   2def8:	ble	2e080 <__assert_fail@plt+0x1c4dc>
   2defc:	add	r5, r7, #1
   2df00:	add	r3, sl, r6
   2df04:	ldrb	r2, [sl, r7]
   2df08:	ldrb	r3, [r3, #-1]
   2df0c:	cmp	r2, r3
   2df10:	bne	2e024 <__assert_fail@plt+0x1c480>
   2df14:	mov	r7, r5
   2df18:	ldr	r3, [fp, #100]	; 0x64
   2df1c:	ldr	r3, [r3, r6, lsl #2]
   2df20:	cmp	r3, #0
   2df24:	beq	2e018 <__assert_fail@plt+0x1c474>
   2df28:	ldr	ip, [r3, #8]
   2df2c:	cmp	ip, #0
   2df30:	ble	2e018 <__assert_fail@plt+0x1c474>
   2df34:	ldr	r2, [r3, #12]
   2df38:	mov	r3, #0
   2df3c:	ldr	r1, [sp, #52]	; 0x34
   2df40:	sub	r2, r2, #4
   2df44:	ldr	r0, [r1]
   2df48:	b	2df54 <__assert_fail@plt+0x1c3b0>
   2df4c:	cmp	ip, r3
   2df50:	beq	2e018 <__assert_fail@plt+0x1c474>
   2df54:	ldr	r5, [r2, #4]!
   2df58:	add	r3, r3, #1
   2df5c:	add	r1, r0, r5, lsl #3
   2df60:	ldrb	r1, [r1, #4]
   2df64:	cmp	r1, #9
   2df68:	bne	2df4c <__assert_fail@plt+0x1c3a8>
   2df6c:	ldr	r1, [r0, r5, lsl #3]
   2df70:	cmp	r8, r1
   2df74:	bne	2df4c <__assert_fail@plt+0x1c3a8>
   2df78:	cmn	r5, #1
   2df7c:	beq	2e018 <__assert_fail@plt+0x1c474>
   2df80:	ldr	r3, [r4]
   2df84:	ldr	r1, [r4, #8]
   2df88:	cmp	r1, #0
   2df8c:	beq	2e02c <__assert_fail@plt+0x1c488>
   2df90:	mov	ip, #9
   2df94:	mov	r0, fp
   2df98:	ldr	r2, [r4, #4]
   2df9c:	stm	sp, {r5, r6, ip}
   2dfa0:	bl	2b46c <__assert_fail@plt+0x198c8>
   2dfa4:	cmp	r0, #1
   2dfa8:	beq	2e018 <__assert_fail@plt+0x1c474>
   2dfac:	cmp	r0, #0
   2dfb0:	bne	2dcbc <__assert_fail@plt+0x1c118>
   2dfb4:	ldrd	r2, [r4, #12]
   2dfb8:	cmp	r3, r2
   2dfbc:	beq	2e0c8 <__assert_fail@plt+0x1c524>
   2dfc0:	mov	r1, #20
   2dfc4:	mov	r0, #1
   2dfc8:	bl	38fb4 <__assert_fail@plt+0x27410>
   2dfcc:	subs	ip, r0, #0
   2dfd0:	beq	2e0c0 <__assert_fail@plt+0x1c51c>
   2dfd4:	ldr	lr, [r4, #16]
   2dfd8:	mov	r2, ip
   2dfdc:	mov	r1, r4
   2dfe0:	mov	r0, fp
   2dfe4:	ldr	r3, [sp, #40]	; 0x28
   2dfe8:	add	sl, lr, #1
   2dfec:	str	sl, [sp, #20]
   2dff0:	ldr	sl, [r4, #20]
   2dff4:	str	ip, [sl, lr, lsl #2]
   2dff8:	stm	ip, {r5, r6}
   2dffc:	ldr	ip, [sp, #20]
   2e000:	str	ip, [r4, #16]
   2e004:	str	r9, [sp]
   2e008:	bl	2bc28 <__assert_fail@plt+0x1a084>
   2e00c:	cmp	r0, #1
   2e010:	ldr	sl, [fp, #4]
   2e014:	bhi	2dcbc <__assert_fail@plt+0x1c118>
   2e018:	add	r6, r6, #1
   2e01c:	cmp	r9, r6
   2e020:	bge	2dee0 <__assert_fail@plt+0x1c33c>
   2e024:	ldr	r1, [fp, #124]	; 0x7c
   2e028:	b	2dd50 <__assert_fail@plt+0x1c1ac>
   2e02c:	sub	r3, r6, r3
   2e030:	mov	r0, #12
   2e034:	add	r1, r3, #1
   2e038:	bl	38fb4 <__assert_fail@plt+0x27410>
   2e03c:	cmp	r0, #0
   2e040:	mov	r1, r0
   2e044:	str	r0, [r4, #8]
   2e048:	beq	2e0c0 <__assert_fail@plt+0x1c51c>
   2e04c:	ldr	r3, [r4]
   2e050:	b	2df90 <__assert_fail@plt+0x1c3ec>
   2e054:	ldr	ip, [r4, #16]
   2e058:	mov	r6, r7
   2e05c:	mov	r7, sl
   2e060:	mov	sl, r3
   2e064:	cmp	r5, ip
   2e068:	blt	2e024 <__assert_fail@plt+0x1c480>
   2e06c:	cmp	r5, #0
   2e070:	ble	2decc <__assert_fail@plt+0x1c328>
   2e074:	mov	r9, r7
   2e078:	mov	r8, r6
   2e07c:	b	2dec4 <__assert_fail@plt+0x1c320>
   2e080:	ldr	r3, [fp, #48]	; 0x30
   2e084:	cmp	r3, r7
   2e088:	ble	2e024 <__assert_fail@plt+0x1c480>
   2e08c:	add	r5, r7, #1
   2e090:	mov	r0, fp
   2e094:	mov	r1, r5
   2e098:	bl	28838 <__assert_fail@plt+0x16c94>
   2e09c:	cmp	r0, #0
   2e0a0:	bne	2dcbc <__assert_fail@plt+0x1c118>
   2e0a4:	ldr	sl, [fp, #4]
   2e0a8:	b	2df00 <__assert_fail@plt+0x1c35c>
   2e0ac:	ldr	r9, [sp, #32]
   2e0b0:	ldr	sl, [sp, #40]	; 0x28
   2e0b4:	ldr	r4, [sp, #60]	; 0x3c
   2e0b8:	ldr	ip, [fp, #108]	; 0x6c
   2e0bc:	b	2db28 <__assert_fail@plt+0x1bf84>
   2e0c0:	mov	r0, #12
   2e0c4:	b	2dcbc <__assert_fail@plt+0x1c118>
   2e0c8:	lsl	r3, r3, #1
   2e0cc:	ldr	r0, [r4, #20]
   2e0d0:	add	sl, r3, #1
   2e0d4:	lsl	r1, sl, #2
   2e0d8:	bl	39064 <__assert_fail@plt+0x274c0>
   2e0dc:	cmp	r0, #0
   2e0e0:	beq	2e0c0 <__assert_fail@plt+0x1c51c>
   2e0e4:	str	sl, [r4, #12]
   2e0e8:	str	r0, [r4, #20]
   2e0ec:	b	2dfc0 <__assert_fail@plt+0x1c41c>
   2e0f0:	mov	r6, r7
   2e0f4:	mov	r7, sl
   2e0f8:	mov	sl, r3
   2e0fc:	b	2e064 <__assert_fail@plt+0x1c4c0>
   2e100:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2e104:	mov	r4, r1
   2e108:	ldr	r5, [r1, #40]	; 0x28
   2e10c:	ldr	r3, [r1, #104]	; 0x68
   2e110:	strd	r6, [sp, #8]
   2e114:	strd	r8, [sp, #16]
   2e118:	str	sl, [sp, #24]
   2e11c:	mov	sl, r0
   2e120:	str	lr, [sp, #28]
   2e124:	sub	sp, sp, #16
   2e128:	cmp	r3, r5
   2e12c:	ldr	r8, [r1, #84]	; 0x54
   2e130:	ldr	r9, [r1, #100]	; 0x64
   2e134:	bge	2e170 <__assert_fail@plt+0x1c5cc>
   2e138:	mov	r6, r2
   2e13c:	str	r2, [r9, r5, lsl #2]
   2e140:	str	r5, [r1, #104]	; 0x68
   2e144:	ldr	r3, [r8, #76]	; 0x4c
   2e148:	cmp	r3, #0
   2e14c:	bne	2e238 <__assert_fail@plt+0x1c694>
   2e150:	mov	r0, r6
   2e154:	add	sp, sp, #16
   2e158:	ldrd	r4, [sp]
   2e15c:	ldrd	r6, [sp, #8]
   2e160:	ldrd	r8, [sp, #16]
   2e164:	ldr	sl, [sp, #24]
   2e168:	add	sp, sp, #28
   2e16c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e170:	ldr	r3, [r9, r5, lsl #2]
   2e174:	cmp	r3, #0
   2e178:	moveq	r6, r2
   2e17c:	streq	r2, [r9, r5, lsl #2]
   2e180:	beq	2e144 <__assert_fail@plt+0x1c5a0>
   2e184:	cmp	r2, #0
   2e188:	ldr	r3, [r3, #40]	; 0x28
   2e18c:	beq	2e1f8 <__assert_fail@plt+0x1c654>
   2e190:	ldr	r7, [r2, #40]	; 0x28
   2e194:	add	r0, sp, #4
   2e198:	mov	r2, r3
   2e19c:	mov	r1, r7
   2e1a0:	bl	2c720 <__assert_fail@plt+0x1ab7c>
   2e1a4:	cmp	r0, #0
   2e1a8:	str	r0, [sl]
   2e1ac:	bne	2e29c <__assert_fail@plt+0x1c6f8>
   2e1b0:	ldr	r1, [r4, #40]	; 0x28
   2e1b4:	mov	r0, r4
   2e1b8:	ldr	r2, [r4, #88]	; 0x58
   2e1bc:	sub	r1, r1, #1
   2e1c0:	bl	25138 <__assert_fail@plt+0x13594>
   2e1c4:	ldr	r9, [r4, #100]	; 0x64
   2e1c8:	mov	r3, r0
   2e1cc:	add	r2, sp, #4
   2e1d0:	mov	r1, r8
   2e1d4:	mov	r0, sl
   2e1d8:	bl	29f88 <__assert_fail@plt+0x183e4>
   2e1dc:	cmp	r7, #0
   2e1e0:	mov	r6, r0
   2e1e4:	str	r0, [r9, r5, lsl #2]
   2e1e8:	beq	2e144 <__assert_fail@plt+0x1c5a0>
   2e1ec:	ldr	r0, [sp, #12]
   2e1f0:	bl	19610 <__assert_fail@plt+0x7a6c>
   2e1f4:	b	2e144 <__assert_fail@plt+0x1c5a0>
   2e1f8:	ldrd	r6, [r3]
   2e1fc:	sub	r1, r5, #1
   2e200:	mov	r0, r4
   2e204:	ldr	r2, [r4, #88]	; 0x58
   2e208:	strd	r6, [sp, #4]
   2e20c:	ldr	r3, [r3, #8]
   2e210:	str	r3, [sp, #12]
   2e214:	bl	25138 <__assert_fail@plt+0x13594>
   2e218:	mov	r3, r0
   2e21c:	add	r2, sp, #4
   2e220:	mov	r1, r8
   2e224:	mov	r0, sl
   2e228:	bl	29f88 <__assert_fail@plt+0x183e4>
   2e22c:	mov	r6, r0
   2e230:	str	r0, [r9, r5, lsl #2]
   2e234:	b	2e144 <__assert_fail@plt+0x1c5a0>
   2e238:	cmp	r6, #0
   2e23c:	beq	2e29c <__assert_fail@plt+0x1c6f8>
   2e240:	add	r7, r6, #8
   2e244:	add	r8, r6, #12
   2e248:	mov	r1, r7
   2e24c:	mov	r2, r8
   2e250:	mov	r3, r5
   2e254:	mov	r0, r4
   2e258:	bl	25fac <__assert_fail@plt+0x14408>
   2e25c:	cmp	r0, #0
   2e260:	str	r0, [sl]
   2e264:	bne	2e29c <__assert_fail@plt+0x1c6f8>
   2e268:	ldrb	r3, [r6, #52]	; 0x34
   2e26c:	tst	r3, #64	; 0x40
   2e270:	beq	2e150 <__assert_fail@plt+0x1c5ac>
   2e274:	mov	r2, r8
   2e278:	mov	r1, r7
   2e27c:	mov	r0, r4
   2e280:	bl	2d958 <__assert_fail@plt+0x1bdb4>
   2e284:	cmp	r0, #0
   2e288:	str	r0, [sl]
   2e28c:	bne	2e29c <__assert_fail@plt+0x1c6f8>
   2e290:	ldr	r3, [r4, #100]	; 0x64
   2e294:	ldr	r6, [r3, r5, lsl #2]
   2e298:	b	2e150 <__assert_fail@plt+0x1c5ac>
   2e29c:	mov	r6, #0
   2e2a0:	b	2e150 <__assert_fail@plt+0x1c5ac>
   2e2a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e2a8:	mov	r4, r0
   2e2ac:	mov	r5, r3
   2e2b0:	strd	r6, [sp, #8]
   2e2b4:	strd	r8, [sp, #16]
   2e2b8:	strd	sl, [sp, #24]
   2e2bc:	str	lr, [sp, #32]
   2e2c0:	sub	sp, sp, #428	; 0x1ac
   2e2c4:	ldr	sl, [r0]
   2e2c8:	str	r0, [sp, #32]
   2e2cc:	add	r0, sp, #144	; 0x90
   2e2d0:	str	r1, [sp, #56]	; 0x38
   2e2d4:	mov	r1, #0
   2e2d8:	str	r2, [sp, #72]	; 0x48
   2e2dc:	mov	r2, #136	; 0x88
   2e2e0:	ldr	r6, [sp, #464]	; 0x1d0
   2e2e4:	bl	119e8 <memset@plt>
   2e2e8:	ldr	r2, [r4, #16]
   2e2ec:	cmp	r2, #0
   2e2f0:	str	r2, [sp, #48]	; 0x30
   2e2f4:	str	sl, [sp, #228]	; 0xe4
   2e2f8:	beq	2e314 <__assert_fail@plt+0x1c770>
   2e2fc:	ldrb	r2, [r4, #28]
   2e300:	subs	r3, r5, r6
   2e304:	movne	r3, #1
   2e308:	ands	r3, r3, r2, lsr #3
   2e30c:	streq	r3, [sp, #48]	; 0x30
   2e310:	bne	2e6b8 <__assert_fail@plt+0x1cb14>
   2e314:	ldr	r3, [sp, #32]
   2e318:	ldr	r2, [sp, #472]	; 0x1d8
   2e31c:	ldr	r3, [r3, #24]
   2e320:	cmp	r3, r2
   2e324:	movcs	r3, #0
   2e328:	strcs	r3, [sp, #108]	; 0x6c
   2e32c:	bcs	2e34c <__assert_fail@plt+0x1c7a8>
   2e330:	sub	r2, r2, #1
   2e334:	sub	r1, r3, r2
   2e338:	sub	r3, r2, r3
   2e33c:	str	r3, [sp, #108]	; 0x6c
   2e340:	ldr	r3, [sp, #472]	; 0x1d8
   2e344:	add	r3, r3, r1
   2e348:	str	r3, [sp, #472]	; 0x1d8
   2e34c:	ldr	ip, [sp, #32]
   2e350:	ldr	r3, [ip, #8]
   2e354:	cmp	r3, #0
   2e358:	beq	2ef9c <__assert_fail@plt+0x1d3f8>
   2e35c:	ldr	r3, [sl, #36]	; 0x24
   2e360:	cmp	r3, #0
   2e364:	beq	2ef9c <__assert_fail@plt+0x1d3f8>
   2e368:	ldr	r2, [sl, #40]	; 0x28
   2e36c:	cmp	r2, #0
   2e370:	beq	2ef9c <__assert_fail@plt+0x1d3f8>
   2e374:	ldr	r0, [sl, #44]	; 0x2c
   2e378:	cmp	r0, #0
   2e37c:	beq	2ef9c <__assert_fail@plt+0x1d3f8>
   2e380:	ldr	r1, [sl, #48]	; 0x30
   2e384:	cmp	r1, #0
   2e388:	beq	2ef9c <__assert_fail@plt+0x1d3f8>
   2e38c:	ldr	r3, [r3, #8]
   2e390:	cmp	r3, #0
   2e394:	bne	2e3d8 <__assert_fail@plt+0x1c834>
   2e398:	ldr	r3, [r2, #8]
   2e39c:	cmp	r3, #0
   2e3a0:	bne	2e3d8 <__assert_fail@plt+0x1c834>
   2e3a4:	ldr	r3, [r0, #8]
   2e3a8:	cmp	r3, #0
   2e3ac:	beq	2e3bc <__assert_fail@plt+0x1c818>
   2e3b0:	ldrsb	r3, [ip, #28]
   2e3b4:	cmp	r3, #0
   2e3b8:	blt	2e3d8 <__assert_fail@plt+0x1c834>
   2e3bc:	adds	r6, r6, #0
   2e3c0:	movne	r6, #1
   2e3c4:	cmp	r5, #0
   2e3c8:	moveq	r6, #0
   2e3cc:	cmp	r6, #0
   2e3d0:	bne	2ef9c <__assert_fail@plt+0x1d3f8>
   2e3d4:	mov	r5, r6
   2e3d8:	ldr	r3, [sp, #472]	; 0x1d8
   2e3dc:	cmp	r3, #0
   2e3e0:	bne	2e6a8 <__assert_fail@plt+0x1cb04>
   2e3e4:	ldr	r3, [sl, #76]	; 0x4c
   2e3e8:	adds	r3, r3, #0
   2e3ec:	movne	r3, #1
   2e3f0:	str	r3, [sp, #20]
   2e3f4:	str	r3, [sp, #60]	; 0x3c
   2e3f8:	ldr	r8, [sp, #32]
   2e3fc:	add	r0, sp, #144	; 0x90
   2e400:	ldr	r2, [sp, #56]	; 0x38
   2e404:	ldr	r3, [sl, #8]
   2e408:	ldr	ip, [r8, #12]
   2e40c:	str	r2, [sp, #144]	; 0x90
   2e410:	ldr	lr, [sl, #92]	; 0x5c
   2e414:	add	r3, r3, #1
   2e418:	ldrb	r2, [sl, #88]	; 0x58
   2e41c:	and	r4, ip, #4194304	; 0x400000
   2e420:	ubfx	ip, ip, #22, #1
   2e424:	ldr	r8, [r8, #20]
   2e428:	cmp	r3, lr
   2e42c:	ldr	r7, [sp, #72]	; 0x48
   2e430:	movlt	r3, lr
   2e434:	str	r8, [sp, #80]	; 0x50
   2e438:	strb	ip, [sp, #216]	; 0xd8
   2e43c:	ubfx	ip, r2, #2, #1
   2e440:	add	r1, r7, #1
   2e444:	ubfx	r2, r2, #3, #1
   2e448:	str	lr, [sp, #224]	; 0xe0
   2e44c:	orrs	lr, r8, r4
   2e450:	str	r7, [sp, #188]	; 0xbc
   2e454:	movne	lr, #1
   2e458:	moveq	lr, #0
   2e45c:	str	r7, [sp, #192]	; 0xc0
   2e460:	cmp	r3, r1
   2e464:	str	r7, [sp, #196]	; 0xc4
   2e468:	movlt	r1, r3
   2e46c:	str	r7, [sp, #200]	; 0xc8
   2e470:	str	r8, [sp, #208]	; 0xd0
   2e474:	strb	ip, [sp, #217]	; 0xd9
   2e478:	strb	r2, [sp, #218]	; 0xda
   2e47c:	strb	lr, [sp, #219]	; 0xdb
   2e480:	bl	23e64 <__assert_fail@plt+0x122c0>
   2e484:	subs	r3, r0, #0
   2e488:	str	r3, [sp, #36]	; 0x24
   2e48c:	bne	2eb70 <__assert_fail@plt+0x1cfcc>
   2e490:	ldrb	r3, [sl, #88]	; 0x58
   2e494:	add	r1, sl, #96	; 0x60
   2e498:	ldrb	r2, [sp, #219]	; 0xdb
   2e49c:	str	r1, [sp, #212]	; 0xd4
   2e4a0:	ubfx	r3, r3, #4, #1
   2e4a4:	cmp	r2, #0
   2e4a8:	strb	r3, [sp, #222]	; 0xde
   2e4ac:	bne	2e4c4 <__assert_fail@plt+0x1c920>
   2e4b0:	ldr	r3, [sl, #92]	; 0x5c
   2e4b4:	ldr	r2, [sp, #56]	; 0x38
   2e4b8:	cmp	r3, #1
   2e4bc:	str	r2, [sp, #148]	; 0x94
   2e4c0:	ble	2f280 <__assert_fail@plt+0x1d6dc>
   2e4c4:	mov	r2, #0
   2e4c8:	ldr	r3, [sp, #32]
   2e4cc:	mvn	r1, #0
   2e4d0:	str	r2, [sp, #172]	; 0xac
   2e4d4:	str	r2, [sp, #176]	; 0xb0
   2e4d8:	ldr	r2, [sp, #468]	; 0x1d4
   2e4dc:	ldrb	r3, [r3, #28]
   2e4e0:	str	r2, [sp, #196]	; 0xc4
   2e4e4:	str	r2, [sp, #200]	; 0xc8
   2e4e8:	ubfx	r3, r3, #7, #1
   2e4ec:	strb	r3, [sp, #221]	; 0xdd
   2e4f0:	ldr	r7, [sl, #76]	; 0x4c
   2e4f4:	str	r1, [sp, #236]	; 0xec
   2e4f8:	ldr	r3, [sp, #480]	; 0x1e0
   2e4fc:	lsl	r4, r7, #1
   2e500:	cmp	r4, #0
   2e504:	str	r3, [sp, #232]	; 0xe8
   2e508:	ble	2e548 <__assert_fail@plt+0x1c9a4>
   2e50c:	movw	r3, #43690	; 0xaaaa
   2e510:	movt	r3, #2730	; 0xaaa
   2e514:	cmp	r4, r3
   2e518:	bgt	2f3bc <__assert_fail@plt+0x1d818>
   2e51c:	add	r0, r4, r7, lsl #2
   2e520:	lsl	r0, r0, #3
   2e524:	bl	39028 <__assert_fail@plt+0x27484>
   2e528:	str	r0, [sp, #260]	; 0x104
   2e52c:	lsl	r0, r7, #3
   2e530:	bl	39028 <__assert_fail@plt+0x27484>
   2e534:	ldr	r3, [sp, #260]	; 0x104
   2e538:	str	r0, [sp, #276]	; 0x114
   2e53c:	cmp	r0, #0
   2e540:	cmpne	r3, #0
   2e544:	beq	2f3bc <__assert_fail@plt+0x1d818>
   2e548:	ldr	r2, [sp, #472]	; 0x1d8
   2e54c:	mov	r3, #1
   2e550:	str	r4, [sp, #256]	; 0x100
   2e554:	str	r3, [sp, #264]	; 0x108
   2e558:	str	r4, [sp, #272]	; 0x110
   2e55c:	cmp	r2, r3
   2e560:	bls	2f350 <__assert_fail@plt+0x1d7ac>
   2e564:	ldr	r0, [sp, #180]	; 0xb4
   2e568:	cmn	r0, #-1073741822	; 0xc0000002
   2e56c:	bhi	2f3bc <__assert_fail@plt+0x1d818>
   2e570:	add	r0, r0, #1
   2e574:	lsl	r0, r0, #2
   2e578:	bl	39028 <__assert_fail@plt+0x27484>
   2e57c:	cmp	r0, #0
   2e580:	mov	r4, r0
   2e584:	str	r0, [sp, #244]	; 0xf4
   2e588:	beq	2efc8 <__assert_fail@plt+0x1d424>
   2e58c:	ldr	r3, [sp, #480]	; 0x1e0
   2e590:	str	r5, [sp, #112]	; 0x70
   2e594:	ldr	r2, [sl, #92]	; 0x5c
   2e598:	tst	r3, #1
   2e59c:	movne	r3, #4
   2e5a0:	moveq	r3, #6
   2e5a4:	cmp	r5, r6
   2e5a8:	str	r2, [sp, #88]	; 0x58
   2e5ac:	str	r3, [sp, #204]	; 0xcc
   2e5b0:	movge	r3, r5
   2e5b4:	movlt	r3, r6
   2e5b8:	mvngt	r2, #0
   2e5bc:	movle	r2, #1
   2e5c0:	str	r3, [sp, #64]	; 0x40
   2e5c4:	ldr	r3, [sp, #48]	; 0x30
   2e5c8:	str	r2, [sp, #96]	; 0x60
   2e5cc:	movlt	r2, r5
   2e5d0:	movge	r2, r6
   2e5d4:	str	r2, [sp, #76]	; 0x4c
   2e5d8:	cmp	r3, #0
   2e5dc:	beq	2f3cc <__assert_fail@plt+0x1d828>
   2e5e0:	ldr	r3, [sp, #88]	; 0x58
   2e5e4:	cmp	r3, #1
   2e5e8:	moveq	r3, #4
   2e5ec:	beq	2e60c <__assert_fail@plt+0x1ca68>
   2e5f0:	ldr	r3, [sp, #32]
   2e5f4:	ldr	r2, [sp, #80]	; 0x50
   2e5f8:	ldr	r3, [r3, #12]
   2e5fc:	and	r3, r3, #4194304	; 0x400000
   2e600:	orrs	r3, r2, r3
   2e604:	moveq	r3, #4
   2e608:	movne	r3, #0
   2e60c:	ldr	r2, [sp, #36]	; 0x24
   2e610:	cmp	r5, r6
   2e614:	movle	r2, #2
   2e618:	ldr	r1, [sp, #80]	; 0x50
   2e61c:	cmp	r1, #0
   2e620:	orrne	r3, r3, #1
   2e624:	orr	r3, r3, r2
   2e628:	ldr	r1, [sp, #64]	; 0x40
   2e62c:	ldr	r2, [sp, #76]	; 0x4c
   2e630:	cmp	r5, r2
   2e634:	movge	r2, #0
   2e638:	movlt	r2, #1
   2e63c:	cmp	r5, r1
   2e640:	orrgt	r2, r2, #1
   2e644:	cmp	r2, #0
   2e648:	bne	2eb68 <__assert_fail@plt+0x1cfc4>
   2e64c:	add	r2, sp, #424	; 0x1a8
   2e650:	cmp	r5, r6
   2e654:	str	sl, [sp, #68]	; 0x44
   2e658:	sub	r3, r3, #4
   2e65c:	suble	r2, r2, #312	; 0x138
   2e660:	movgt	r2, #0
   2e664:	str	r3, [sp, #92]	; 0x5c
   2e668:	adds	r3, r2, #0
   2e66c:	movne	r3, #1
   2e670:	str	r2, [sp, #100]	; 0x64
   2e674:	str	r3, [sp, #104]	; 0x68
   2e678:	mov	r3, #65280	; 0xff00
   2e67c:	movt	r3, #3
   2e680:	str	r3, [sp, #52]	; 0x34
   2e684:	ldr	r3, [sp, #92]	; 0x5c
   2e688:	cmp	r3, #4
   2e68c:	ldrls	pc, [pc, r3, lsl #2]
   2e690:	b	2f3ec <__assert_fail@plt+0x1d848>
   2e694:	andeq	lr, r2, r0, ror #23
   2e698:	andeq	lr, r2, r0, ror #23
   2e69c:	andeq	lr, r2, r8, ror fp
   2e6a0:			; <UNDEFINED> instruction: 0x0002eab4
   2e6a4:	ldrdeq	lr, [r2], -r0
   2e6a8:	mov	r3, #1
   2e6ac:	str	r3, [sp, #20]
   2e6b0:	str	r3, [sp, #60]	; 0x3c
   2e6b4:	b	2e3f8 <__assert_fail@plt+0x1c854>
   2e6b8:	ldr	r3, [sp, #48]	; 0x30
   2e6bc:	tst	r2, #1
   2e6c0:	movne	r3, #0
   2e6c4:	str	r3, [sp, #48]	; 0x30
   2e6c8:	b	2e314 <__assert_fail@plt+0x1c770>
   2e6cc:	str	r5, [sp, #112]	; 0x70
   2e6d0:	mov	r1, r5
   2e6d4:	add	r0, sp, #144	; 0x90
   2e6d8:	ldr	r2, [sp, #480]	; 0x1e0
   2e6dc:	bl	25388 <__assert_fail@plt+0x137e4>
   2e6e0:	subs	r3, r0, #0
   2e6e4:	str	r3, [sp, #36]	; 0x24
   2e6e8:	bne	2f420 <__assert_fail@plt+0x1d87c>
   2e6ec:	ldr	r3, [sp, #88]	; 0x58
   2e6f0:	cmp	r3, #1
   2e6f4:	beq	2e714 <__assert_fail@plt+0x1cb70>
   2e6f8:	ldr	r3, [sp, #172]	; 0xac
   2e6fc:	cmp	r3, #0
   2e700:	beq	2e714 <__assert_fail@plt+0x1cb70>
   2e704:	ldr	r3, [sp, #152]	; 0x98
   2e708:	ldr	r3, [r3]
   2e70c:	cmn	r3, #1
   2e710:	beq	2ef4c <__assert_fail@plt+0x1d3a8>
   2e714:	ldr	r4, [sp, #228]	; 0xe4
   2e718:	mov	r3, #0
   2e71c:	mov	r0, #0
   2e720:	mov	r1, #0
   2e724:	ldr	sl, [r4, #36]	; 0x24
   2e728:	str	r3, [sp, #120]	; 0x78
   2e72c:	strd	r0, [sp, #248]	; 0xf8
   2e730:	str	r3, [sp, #264]	; 0x108
   2e734:	ldr	r3, [sp, #184]	; 0xb8
   2e738:	mov	r2, r3
   2e73c:	ldrsb	r3, [sl, #52]	; 0x34
   2e740:	str	r2, [sp, #12]
   2e744:	cmp	r3, #0
   2e748:	bge	2e788 <__assert_fail@plt+0x1cbe4>
   2e74c:	sub	r1, r2, #1
   2e750:	add	r0, sp, #144	; 0x90
   2e754:	ldr	r2, [sp, #232]	; 0xe8
   2e758:	bl	25138 <__assert_fail@plt+0x13594>
   2e75c:	tst	r0, #1
   2e760:	bne	2f37c <__assert_fail@plt+0x1d7d8>
   2e764:	cmp	r0, #0
   2e768:	beq	2e788 <__assert_fail@plt+0x1cbe4>
   2e76c:	and	r3, r0, #6
   2e770:	cmp	r3, #6
   2e774:	beq	2f560 <__assert_fail@plt+0x1d9bc>
   2e778:	tst	r0, #2
   2e77c:	bne	2f460 <__assert_fail@plt+0x1d8bc>
   2e780:	tst	r0, #4
   2e784:	bne	2f488 <__assert_fail@plt+0x1d8e4>
   2e788:	ldr	r3, [sp, #244]	; 0xf4
   2e78c:	cmp	r3, #0
   2e790:	beq	2f234 <__assert_fail@plt+0x1d690>
   2e794:	ldr	r2, [r4, #76]	; 0x4c
   2e798:	ldr	r1, [sp, #12]
   2e79c:	cmp	r2, #0
   2e7a0:	str	sl, [r3, r1, lsl #2]
   2e7a4:	bne	2f51c <__assert_fail@plt+0x1d978>
   2e7a8:	ldrb	r3, [sl, #52]	; 0x34
   2e7ac:	ldr	r2, [sp, #104]	; 0x68
   2e7b0:	str	r2, [sp, #16]
   2e7b4:	ubfx	r3, r3, #4, #1
   2e7b8:	cmp	r3, #0
   2e7bc:	mvneq	fp, #0
   2e7c0:	streq	r3, [sp, #28]
   2e7c4:	bne	2f42c <__assert_fail@plt+0x1d888>
   2e7c8:	ldr	r3, [sp, #100]	; 0x64
   2e7cc:	str	fp, [sp, #24]
   2e7d0:	ldr	r4, [sp, #184]	; 0xb8
   2e7d4:	str	r3, [sp, #40]	; 0x28
   2e7d8:	b	2e838 <__assert_fail@plt+0x1cc94>
   2e7dc:	ldrb	r3, [r5, #52]	; 0x34
   2e7e0:	ldr	r2, [sp, #16]
   2e7e4:	ldr	r1, [sp, #12]
   2e7e8:	ldr	r4, [sp, #184]	; 0xb8
   2e7ec:	cmp	sl, r5
   2e7f0:	movne	r2, #0
   2e7f4:	andeq	r2, r2, #1
   2e7f8:	cmp	r2, #0
   2e7fc:	movne	r1, r8
   2e800:	tst	r3, #16
   2e804:	str	r1, [sp, #12]
   2e808:	str	r2, [sp, #16]
   2e80c:	beq	2e834 <__assert_fail@plt+0x1cc90>
   2e810:	tst	r3, #128	; 0x80
   2e814:	bne	2ec98 <__assert_fail@plt+0x1d0f4>
   2e818:	ldr	r3, [sp, #20]
   2e81c:	cmp	r3, #0
   2e820:	beq	2f458 <__assert_fail@plt+0x1d8b4>
   2e824:	str	r4, [sp, #24]
   2e828:	str	r3, [sp, #28]
   2e82c:	mov	r3, #0
   2e830:	str	r3, [sp, #40]	; 0x28
   2e834:	mov	sl, r5
   2e838:	ldr	r3, [sp, #200]	; 0xc8
   2e83c:	cmp	r3, r4
   2e840:	ble	2ec90 <__assert_fail@plt+0x1d0ec>
   2e844:	ldr	r3, [sp, #180]	; 0xb4
   2e848:	add	r8, r4, #1
   2e84c:	cmp	r8, r3
   2e850:	bge	2ecb4 <__assert_fail@plt+0x1d110>
   2e854:	ldr	r3, [sp, #172]	; 0xac
   2e858:	cmp	r8, r3
   2e85c:	bge	2ef20 <__assert_fail@plt+0x1d37c>
   2e860:	ldrb	r3, [sl, #52]	; 0x34
   2e864:	tst	r3, #32
   2e868:	bne	2ece8 <__assert_fail@plt+0x1d144>
   2e86c:	ldr	r3, [sp, #148]	; 0x94
   2e870:	add	r2, r4, #1
   2e874:	str	r2, [sp, #184]	; 0xb8
   2e878:	ldrb	r4, [r3, r4]
   2e87c:	ldr	r3, [sl, #44]	; 0x2c
   2e880:	cmp	r3, #0
   2e884:	beq	2eef0 <__assert_fail@plt+0x1d34c>
   2e888:	ldr	r5, [r3, r4, lsl #2]
   2e88c:	ldr	r3, [sp, #244]	; 0xf4
   2e890:	cmp	r3, #0
   2e894:	beq	2e8ac <__assert_fail@plt+0x1cd08>
   2e898:	mov	r2, r5
   2e89c:	add	r1, sp, #144	; 0x90
   2e8a0:	add	r0, sp, #120	; 0x78
   2e8a4:	bl	2e100 <__assert_fail@plt+0x1c55c>
   2e8a8:	mov	r5, r0
   2e8ac:	cmp	r5, #0
   2e8b0:	bne	2e7dc <__assert_fail@plt+0x1cc38>
   2e8b4:	ldr	r3, [sp, #120]	; 0x78
   2e8b8:	ldr	r4, [sp, #244]	; 0xf4
   2e8bc:	cmp	r3, #0
   2e8c0:	bne	2efc4 <__assert_fail@plt+0x1d420>
   2e8c4:	cmp	r4, #0
   2e8c8:	beq	2ec90 <__assert_fail@plt+0x1d0ec>
   2e8cc:	ldr	r2, [sp, #28]
   2e8d0:	ldr	r3, [sp, #60]	; 0x3c
   2e8d4:	eor	r3, r3, #1
   2e8d8:	tst	r2, r3
   2e8dc:	bne	2ec90 <__assert_fail@plt+0x1d0ec>
   2e8e0:	ldr	r3, [sp, #184]	; 0xb8
   2e8e4:	mov	r1, #0
   2e8e8:	ldr	r0, [sp, #248]	; 0xf8
   2e8ec:	add	r4, r4, r3, lsl #2
   2e8f0:	b	2e908 <__assert_fail@plt+0x1cd64>
   2e8f4:	ldr	ip, [r4, #4]!
   2e8f8:	mov	r3, r2
   2e8fc:	mov	r1, #1
   2e900:	cmp	ip, #0
   2e904:	bne	2ec54 <__assert_fail@plt+0x1d0b0>
   2e908:	add	r2, r3, #1
   2e90c:	cmp	r0, r2
   2e910:	bge	2e8f4 <__assert_fail@plt+0x1cd50>
   2e914:	ldr	fp, [sp, #24]
   2e918:	cmp	r1, #0
   2e91c:	strne	r3, [sp, #184]	; 0xb8
   2e920:	ldr	r2, [sp, #40]	; 0x28
   2e924:	cmp	r2, #0
   2e928:	beq	2e93c <__assert_fail@plt+0x1cd98>
   2e92c:	ldr	r3, [r2]
   2e930:	ldr	r1, [sp, #12]
   2e934:	add	r3, r3, r1
   2e938:	str	r3, [r2]
   2e93c:	cmn	fp, #1
   2e940:	beq	2ef40 <__assert_fail@plt+0x1d39c>
   2e944:	cmn	fp, #2
   2e948:	ldr	r4, [sp, #244]	; 0xf4
   2e94c:	beq	2efc4 <__assert_fail@plt+0x1d420>
   2e950:	ldr	r3, [sp, #32]
   2e954:	str	fp, [sp, #236]	; 0xec
   2e958:	ldrb	r3, [r3, #28]
   2e95c:	tst	r3, #16
   2e960:	bne	2f01c <__assert_fail@plt+0x1d478>
   2e964:	ldr	r2, [sp, #472]	; 0x1d8
   2e968:	cmp	r2, #1
   2e96c:	bls	2f25c <__assert_fail@plt+0x1d6b8>
   2e970:	mov	r2, fp
   2e974:	add	r0, sp, #144	; 0x90
   2e978:	ldr	r1, [r4, fp, lsl #2]
   2e97c:	bl	25cec <__assert_fail@plt+0x14148>
   2e980:	ldr	r3, [sp, #68]	; 0x44
   2e984:	ldrb	r3, [r3, #88]	; 0x58
   2e988:	str	r0, [sp, #240]	; 0xf0
   2e98c:	tst	r3, #1
   2e990:	bne	2e9a4 <__assert_fail@plt+0x1ce00>
   2e994:	ldr	r3, [sp, #68]	; 0x44
   2e998:	ldr	r3, [r3, #76]	; 0x4c
   2e99c:	cmp	r3, #0
   2e9a0:	beq	30370 <__assert_fail@plt+0x1e7cc>
   2e9a4:	ldr	r3, [sp, #228]	; 0xe4
   2e9a8:	cmn	fp, #-1073741822	; 0xc0000002
   2e9ac:	ldr	sl, [sp, #240]	; 0xf0
   2e9b0:	str	r3, [sp, #12]
   2e9b4:	bhi	2efc4 <__assert_fail@plt+0x1d420>
   2e9b8:	add	r5, fp, #1
   2e9bc:	lsl	r4, r5, #2
   2e9c0:	mov	r0, r4
   2e9c4:	bl	39028 <__assert_fail@plt+0x27484>
   2e9c8:	subs	r9, r0, #0
   2e9cc:	beq	2f468 <__assert_fail@plt+0x1d8c4>
   2e9d0:	ldr	r3, [sp, #12]
   2e9d4:	ldr	r6, [r3, #76]	; 0x4c
   2e9d8:	cmp	r6, #0
   2e9dc:	beq	2f2d0 <__assert_fail@plt+0x1d72c>
   2e9e0:	mov	r0, r4
   2e9e4:	bl	39028 <__assert_fail@plt+0x27484>
   2e9e8:	cmp	r0, #0
   2e9ec:	mov	r6, r0
   2e9f0:	str	r0, [sp, #24]
   2e9f4:	beq	2f594 <__assert_fail@plt+0x1d9f0>
   2e9f8:	add	r4, sp, #296	; 0x128
   2e9fc:	mov	r8, #0
   2ea00:	lsl	r7, r5, #2
   2ea04:	mov	r1, #0
   2ea08:	mov	r0, r6
   2ea0c:	mov	r2, r7
   2ea10:	bl	119e8 <memset@plt>
   2ea14:	add	r1, sp, #280	; 0x118
   2ea18:	add	r0, sp, #144	; 0x90
   2ea1c:	str	r9, [sp, #280]	; 0x118
   2ea20:	str	r6, [sp, #284]	; 0x11c
   2ea24:	str	sl, [sp, #288]	; 0x120
   2ea28:	str	fp, [sp, #292]	; 0x124
   2ea2c:	str	r8, [r4]
   2ea30:	str	r8, [r4, #4]
   2ea34:	str	r8, [r4, #8]
   2ea38:	bl	2d438 <__assert_fail@plt+0x1b894>
   2ea3c:	mov	r3, r0
   2ea40:	ldr	r0, [sp, #304]	; 0x130
   2ea44:	str	r3, [sp, #16]
   2ea48:	bl	19610 <__assert_fail@plt+0x7a6c>
   2ea4c:	ldr	r3, [sp, #16]
   2ea50:	cmp	r3, #0
   2ea54:	bne	2f568 <__assert_fail@plt+0x1d9c4>
   2ea58:	ldr	r3, [r9]
   2ea5c:	cmp	r3, #0
   2ea60:	bne	2f5bc <__assert_fail@plt+0x1da18>
   2ea64:	ldr	r3, [r6]
   2ea68:	cmp	r3, #0
   2ea6c:	bne	2f5bc <__assert_fail@plt+0x1da18>
   2ea70:	ldr	r3, [sp, #244]	; 0xf4
   2ea74:	sub	r7, r7, #4
   2ea78:	add	r3, r3, r7
   2ea7c:	subs	fp, fp, #1
   2ea80:	bcc	2f39c <__assert_fail@plt+0x1d7f8>
   2ea84:	ldr	r1, [r3, #-4]!
   2ea88:	cmp	r1, #0
   2ea8c:	beq	2ea7c <__assert_fail@plt+0x1ced8>
   2ea90:	ldrb	r2, [r1, #52]	; 0x34
   2ea94:	tst	r2, #16
   2ea98:	beq	2ea7c <__assert_fail@plt+0x1ced8>
   2ea9c:	mov	r2, fp
   2eaa0:	add	r0, sp, #144	; 0x90
   2eaa4:	bl	25cec <__assert_fail@plt+0x14148>
   2eaa8:	add	r5, fp, #1
   2eaac:	mov	sl, r0
   2eab0:	b	2ea00 <__assert_fail@plt+0x1ce5c>
   2eab4:	ldr	r3, [sp, #64]	; 0x40
   2eab8:	cmp	r3, r5
   2eabc:	ble	2eb28 <__assert_fail@plt+0x1cf84>
   2eac0:	ldr	r3, [sp, #56]	; 0x38
   2eac4:	ldr	r1, [sp, #80]	; 0x50
   2eac8:	ldrb	r2, [r3, r5]
   2eacc:	add	r3, r3, r5
   2ead0:	ldrb	r2, [r1, r2]
   2ead4:	ldr	r1, [sp, #48]	; 0x30
   2ead8:	ldrb	r2, [r1, r2]
   2eadc:	cmp	r2, #0
   2eae0:	bne	2e6d0 <__assert_fail@plt+0x1cb2c>
   2eae4:	ldr	r2, [sp, #56]	; 0x38
   2eae8:	mov	ip, r1
   2eaec:	ldr	r1, [sp, #64]	; 0x40
   2eaf0:	ldr	lr, [sp, #80]	; 0x50
   2eaf4:	sub	r0, r2, #1
   2eaf8:	rsb	r2, r2, #1
   2eafc:	add	r0, r0, r1
   2eb00:	b	2eb18 <__assert_fail@plt+0x1cf74>
   2eb04:	ldrb	r1, [r3, #1]!
   2eb08:	ldrb	r1, [lr, r1]
   2eb0c:	ldrb	r1, [ip, r1]
   2eb10:	cmp	r1, #0
   2eb14:	bne	2e6cc <__assert_fail@plt+0x1cb28>
   2eb18:	cmp	r0, r3
   2eb1c:	add	r5, r2, r3
   2eb20:	bne	2eb04 <__assert_fail@plt+0x1cf60>
   2eb24:	str	r5, [sp, #112]	; 0x70
   2eb28:	ldr	r3, [sp, #64]	; 0x40
   2eb2c:	cmp	r3, r5
   2eb30:	bne	2e6d0 <__assert_fail@plt+0x1cb2c>
   2eb34:	ldr	r2, [sp, #72]	; 0x48
   2eb38:	cmp	r2, r3
   2eb3c:	ldrgt	r2, [sp, #56]	; 0x38
   2eb40:	movle	r3, #0
   2eb44:	ldrbgt	r3, [r2, r3]
   2eb48:	ldr	r2, [sp, #80]	; 0x50
   2eb4c:	cmp	r2, #0
   2eb50:	ldrbne	r3, [r2, r3]
   2eb54:	ldr	r2, [sp, #48]	; 0x30
   2eb58:	ldrb	r3, [r2, r3]
   2eb5c:	cmp	r3, #0
   2eb60:	bne	2e6d0 <__assert_fail@plt+0x1cb2c>
   2eb64:	ldr	sl, [sp, #68]	; 0x44
   2eb68:	mov	r3, #1
   2eb6c:	str	r3, [sp, #36]	; 0x24
   2eb70:	ldr	r4, [sp, #244]	; 0xf4
   2eb74:	b	2efd0 <__assert_fail@plt+0x1d42c>
   2eb78:	ldr	r3, [sp, #64]	; 0x40
   2eb7c:	cmp	r3, r5
   2eb80:	ble	2eb28 <__assert_fail@plt+0x1cf84>
   2eb84:	ldr	r1, [sp, #48]	; 0x30
   2eb88:	ldr	r3, [sp, #56]	; 0x38
   2eb8c:	ldrb	r2, [r3, r5]
   2eb90:	add	r3, r3, r5
   2eb94:	ldrb	r2, [r1, r2]
   2eb98:	cmp	r2, #0
   2eb9c:	bne	2e6d0 <__assert_fail@plt+0x1cb2c>
   2eba0:	ldr	r2, [sp, #56]	; 0x38
   2eba4:	mov	ip, r1
   2eba8:	ldr	r1, [sp, #64]	; 0x40
   2ebac:	sub	r0, r2, #1
   2ebb0:	rsb	r2, r2, #1
   2ebb4:	add	r0, r0, r1
   2ebb8:	b	2ebcc <__assert_fail@plt+0x1d028>
   2ebbc:	ldrb	r1, [r3, #1]!
   2ebc0:	ldrb	r1, [ip, r1]
   2ebc4:	cmp	r1, #0
   2ebc8:	bne	2e6cc <__assert_fail@plt+0x1cb28>
   2ebcc:	cmp	r0, r3
   2ebd0:	add	r5, r2, r3
   2ebd4:	bne	2ebbc <__assert_fail@plt+0x1d018>
   2ebd8:	str	r5, [sp, #112]	; 0x70
   2ebdc:	b	2eb28 <__assert_fail@plt+0x1cf84>
   2ebe0:	ldr	r3, [sp, #76]	; 0x4c
   2ebe4:	cmp	r3, r5
   2ebe8:	bgt	2eb64 <__assert_fail@plt+0x1cfc0>
   2ebec:	ldr	r3, [sp, #80]	; 0x50
   2ebf0:	cmp	r3, #0
   2ebf4:	beq	2f288 <__assert_fail@plt+0x1d6e4>
   2ebf8:	mov	ip, r3
   2ebfc:	mov	r1, #0
   2ec00:	ldr	r0, [sp, #48]	; 0x30
   2ec04:	mov	r3, r5
   2ec08:	ldr	r6, [sp, #56]	; 0x38
   2ec0c:	ldr	lr, [sp, #72]	; 0x48
   2ec10:	ldr	r4, [sp, #76]	; 0x4c
   2ec14:	b	2ec28 <__assert_fail@plt+0x1d084>
   2ec18:	sub	r3, r3, #1
   2ec1c:	mov	r1, #1
   2ec20:	cmp	r3, r4
   2ec24:	blt	2f3d4 <__assert_fail@plt+0x1d830>
   2ec28:	cmp	lr, r3
   2ec2c:	mov	r2, #0
   2ec30:	ldrbgt	r2, [r6, r3]
   2ec34:	ldrb	r2, [ip, r2]
   2ec38:	ldrb	r2, [r0, r2]
   2ec3c:	cmp	r2, #0
   2ec40:	beq	2ec18 <__assert_fail@plt+0x1d074>
   2ec44:	cmp	r1, #0
   2ec48:	movne	r5, r3
   2ec4c:	strne	r3, [sp, #112]	; 0x70
   2ec50:	b	2e6d0 <__assert_fail@plt+0x1cb2c>
   2ec54:	mov	r2, #0
   2ec58:	add	r1, sp, #144	; 0x90
   2ec5c:	str	r3, [sp, #184]	; 0xb8
   2ec60:	add	r0, sp, #120	; 0x78
   2ec64:	bl	2e100 <__assert_fail@plt+0x1c55c>
   2ec68:	ldr	r3, [sp, #120]	; 0x78
   2ec6c:	cmp	r3, #0
   2ec70:	bne	2ec84 <__assert_fail@plt+0x1d0e0>
   2ec74:	cmp	r0, #0
   2ec78:	bne	2f450 <__assert_fail@plt+0x1d8ac>
   2ec7c:	ldr	r4, [sp, #244]	; 0xf4
   2ec80:	b	2e8e0 <__assert_fail@plt+0x1cd3c>
   2ec84:	cmp	r0, #0
   2ec88:	mov	r5, r0
   2ec8c:	bne	2e7dc <__assert_fail@plt+0x1cc38>
   2ec90:	ldr	fp, [sp, #24]
   2ec94:	b	2e920 <__assert_fail@plt+0x1cd7c>
   2ec98:	mov	r2, r4
   2ec9c:	mov	r1, r5
   2eca0:	add	r0, sp, #144	; 0x90
   2eca4:	bl	25cec <__assert_fail@plt+0x14148>
   2eca8:	cmp	r0, #0
   2ecac:	beq	2e834 <__assert_fail@plt+0x1cc90>
   2ecb0:	b	2e818 <__assert_fail@plt+0x1cc74>
   2ecb4:	ldr	r2, [sp, #192]	; 0xc0
   2ecb8:	cmp	r3, r2
   2ecbc:	bge	2e854 <__assert_fail@plt+0x1ccb0>
   2ecc0:	add	r1, r4, #2
   2ecc4:	add	r0, sp, #144	; 0x90
   2ecc8:	bl	28838 <__assert_fail@plt+0x16c94>
   2eccc:	cmp	r0, #0
   2ecd0:	str	r0, [sp, #120]	; 0x78
   2ecd4:	bne	2f388 <__assert_fail@plt+0x1d7e4>
   2ecd8:	ldrb	r3, [sl, #52]	; 0x34
   2ecdc:	ldr	r4, [sp, #184]	; 0xb8
   2ece0:	tst	r3, #32
   2ece4:	beq	2e86c <__assert_fail@plt+0x1ccc8>
   2ece8:	ldr	fp, [sl, #8]
   2ecec:	ldr	r6, [sp, #228]	; 0xe4
   2ecf0:	cmp	fp, #0
   2ecf4:	ble	2f010 <__assert_fail@plt+0x1d46c>
   2ecf8:	add	r3, r6, #128	; 0x80
   2ecfc:	mov	r7, #0
   2ed00:	str	r3, [sp, #44]	; 0x2c
   2ed04:	str	r8, [sp, #84]	; 0x54
   2ed08:	b	2ee28 <__assert_fail@plt+0x1d284>
   2ed0c:	tst	r0, #1
   2ed10:	beq	2ee1c <__assert_fail@plt+0x1d278>
   2ed14:	tst	r5, #8
   2ed18:	bne	2ee1c <__assert_fail@plt+0x1d278>
   2ed1c:	tst	r5, #32
   2ed20:	beq	2ed2c <__assert_fail@plt+0x1d188>
   2ed24:	tst	r0, #2
   2ed28:	beq	2ee1c <__assert_fail@plt+0x1d278>
   2ed2c:	tst	r5, #128	; 0x80
   2ed30:	beq	2ed3c <__assert_fail@plt+0x1d198>
   2ed34:	tst	r0, #8
   2ed38:	beq	2ee1c <__assert_fail@plt+0x1d278>
   2ed3c:	mov	r0, r8
   2ed40:	add	r3, sp, #144	; 0x90
   2ed44:	str	r4, [sp]
   2ed48:	mov	r2, r9
   2ed4c:	ldr	r1, [sp, #44]	; 0x2c
   2ed50:	bl	27d4c <__assert_fail@plt+0x161a8>
   2ed54:	subs	r4, r0, #0
   2ed58:	beq	2ee14 <__assert_fail@plt+0x1d270>
   2ed5c:	ldr	r2, [sp, #184]	; 0xb8
   2ed60:	add	r0, sp, #144	; 0x90
   2ed64:	ldr	r3, [sp, #264]	; 0x108
   2ed68:	cmp	r3, r4
   2ed6c:	movlt	r3, r4
   2ed70:	add	r4, r4, r2
   2ed74:	mov	r1, r4
   2ed78:	str	r3, [sp, #264]	; 0x108
   2ed7c:	bl	28a28 <__assert_fail@plt+0x16e84>
   2ed80:	cmp	r0, #0
   2ed84:	str	r0, [sp, #132]	; 0x84
   2ed88:	bne	2ef80 <__assert_fail@plt+0x1d3dc>
   2ed8c:	ldr	r3, [r6, #12]
   2ed90:	ldr	r5, [sp, #244]	; 0xf4
   2ed94:	ldr	r2, [r6, #24]
   2ed98:	ldr	r3, [r3, r9, lsl #2]
   2ed9c:	ldr	r1, [r5, r4, lsl #2]
   2eda0:	add	r3, r3, r3, lsl #1
   2eda4:	lsl	r3, r3, #2
   2eda8:	cmp	r1, #0
   2edac:	add	ip, r2, r3
   2edb0:	beq	2ee84 <__assert_fail@plt+0x1d2e0>
   2edb4:	mov	r2, ip
   2edb8:	add	r0, sp, #280	; 0x118
   2edbc:	ldr	r1, [r1, #40]	; 0x28
   2edc0:	bl	2c720 <__assert_fail@plt+0x1ab7c>
   2edc4:	cmp	r0, #0
   2edc8:	str	r0, [sp, #132]	; 0x84
   2edcc:	bne	2ef80 <__assert_fail@plt+0x1d3dc>
   2edd0:	sub	r1, r4, #1
   2edd4:	add	r0, sp, #144	; 0x90
   2edd8:	ldr	r2, [sp, #232]	; 0xe8
   2eddc:	bl	25138 <__assert_fail@plt+0x13594>
   2ede0:	ldr	r5, [sp, #244]	; 0xf4
   2ede4:	mov	r3, r0
   2ede8:	add	r2, sp, #280	; 0x118
   2edec:	mov	r1, r6
   2edf0:	add	r0, sp, #132	; 0x84
   2edf4:	bl	29f88 <__assert_fail@plt+0x183e4>
   2edf8:	str	r0, [r5, r4, lsl #2]
   2edfc:	ldr	r0, [sp, #288]	; 0x120
   2ee00:	bl	19610 <__assert_fail@plt+0x7a6c>
   2ee04:	ldr	r3, [sp, #244]	; 0xf4
   2ee08:	ldr	r2, [r3, r4, lsl #2]
   2ee0c:	cmp	r2, #0
   2ee10:	beq	2eedc <__assert_fail@plt+0x1d338>
   2ee14:	ldr	fp, [sl, #8]
   2ee18:	ldr	r4, [sp, #184]	; 0xb8
   2ee1c:	add	r7, r7, #1
   2ee20:	cmp	r7, fp
   2ee24:	bge	2f00c <__assert_fail@plt+0x1d468>
   2ee28:	ldr	r2, [sl, #12]
   2ee2c:	ldr	r8, [r6]
   2ee30:	ldr	r9, [r2, r7, lsl #2]
   2ee34:	add	r2, r8, r9, lsl #3
   2ee38:	ldrb	r1, [r2, #6]
   2ee3c:	tst	r1, #16
   2ee40:	beq	2ee1c <__assert_fail@plt+0x1d278>
   2ee44:	ldr	r5, [r2, #4]
   2ee48:	ldr	r3, [sp, #52]	; 0x34
   2ee4c:	tst	r3, r5
   2ee50:	beq	2ed3c <__assert_fail@plt+0x1d198>
   2ee54:	ubfx	r5, r5, #8, #10
   2ee58:	mov	r1, r4
   2ee5c:	add	r0, sp, #144	; 0x90
   2ee60:	ldr	r2, [sp, #232]	; 0xe8
   2ee64:	bl	25138 <__assert_fail@plt+0x13594>
   2ee68:	tst	r5, #4
   2ee6c:	bne	2ed0c <__assert_fail@plt+0x1d168>
   2ee70:	tst	r5, #8
   2ee74:	beq	2ed1c <__assert_fail@plt+0x1d178>
   2ee78:	tst	r0, #1
   2ee7c:	beq	2ed1c <__assert_fail@plt+0x1d178>
   2ee80:	b	2ee1c <__assert_fail@plt+0x1d278>
   2ee84:	add	r2, r2, r3
   2ee88:	sub	r1, r4, #1
   2ee8c:	ldrd	r2, [r2]
   2ee90:	add	r0, sp, #144	; 0x90
   2ee94:	mov	r8, r2
   2ee98:	mov	r9, r3
   2ee9c:	ldr	r2, [sp, #232]	; 0xe8
   2eea0:	add	r3, sp, #280	; 0x118
   2eea4:	strd	r8, [r3]
   2eea8:	ldr	r3, [ip, #8]
   2eeac:	str	r3, [sp, #288]	; 0x120
   2eeb0:	bl	25138 <__assert_fail@plt+0x13594>
   2eeb4:	mov	r3, r0
   2eeb8:	add	r2, sp, #280	; 0x118
   2eebc:	mov	r1, r6
   2eec0:	add	r0, sp, #132	; 0x84
   2eec4:	bl	29f88 <__assert_fail@plt+0x183e4>
   2eec8:	ldr	r3, [sp, #244]	; 0xf4
   2eecc:	str	r0, [r5, r4, lsl #2]
   2eed0:	ldr	r2, [r3, r4, lsl #2]
   2eed4:	cmp	r2, #0
   2eed8:	bne	2ee14 <__assert_fail@plt+0x1d270>
   2eedc:	ldr	r0, [sp, #132]	; 0x84
   2eee0:	cmp	r0, #0
   2eee4:	beq	2ee14 <__assert_fail@plt+0x1d270>
   2eee8:	ldr	r8, [sp, #84]	; 0x54
   2eeec:	b	2ef88 <__assert_fail@plt+0x1d3e4>
   2eef0:	ldr	r5, [sl, #48]	; 0x30
   2eef4:	cmp	r5, #0
   2eef8:	beq	2f200 <__assert_fail@plt+0x1d65c>
   2eefc:	ldr	r1, [sp, #184]	; 0xb8
   2ef00:	add	r0, sp, #144	; 0x90
   2ef04:	ldr	r2, [sp, #232]	; 0xe8
   2ef08:	sub	r1, r1, #1
   2ef0c:	bl	25138 <__assert_fail@plt+0x13594>
   2ef10:	tst	r0, #1
   2ef14:	addne	r4, r4, #256	; 0x100
   2ef18:	ldr	r5, [r5, r4, lsl #2]
   2ef1c:	b	2e88c <__assert_fail@plt+0x1cce8>
   2ef20:	ldr	r2, [sp, #192]	; 0xc0
   2ef24:	cmp	r3, r2
   2ef28:	bge	2e860 <__assert_fail@plt+0x1ccbc>
   2ef2c:	b	2ecc0 <__assert_fail@plt+0x1d11c>
   2ef30:	mov	r0, r9
   2ef34:	bl	19610 <__assert_fail@plt+0x7a6c>
   2ef38:	mov	r0, r4
   2ef3c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2ef40:	add	r0, sp, #144	; 0x90
   2ef44:	bl	24a9c <__assert_fail@plt+0x12ef8>
   2ef48:	ldr	r5, [sp, #112]	; 0x70
   2ef4c:	ldr	r2, [sp, #76]	; 0x4c
   2ef50:	ldr	r3, [sp, #96]	; 0x60
   2ef54:	add	r5, r5, r3
   2ef58:	ldr	r3, [sp, #64]	; 0x40
   2ef5c:	str	r5, [sp, #112]	; 0x70
   2ef60:	cmp	r5, r3
   2ef64:	movle	r3, #0
   2ef68:	movgt	r3, #1
   2ef6c:	cmp	r5, r2
   2ef70:	orrlt	r3, r3, #1
   2ef74:	cmp	r3, #0
   2ef78:	beq	2e684 <__assert_fail@plt+0x1cae0>
   2ef7c:	b	2eb64 <__assert_fail@plt+0x1cfc0>
   2ef80:	ldr	r8, [sp, #84]	; 0x54
   2ef84:	ldr	r3, [sp, #244]	; 0xf4
   2ef88:	cmp	r3, #0
   2ef8c:	str	r0, [sp, #120]	; 0x78
   2ef90:	beq	2f228 <__assert_fail@plt+0x1d684>
   2ef94:	mov	r5, #0
   2ef98:	b	2e898 <__assert_fail@plt+0x1ccf4>
   2ef9c:	mov	r3, #1
   2efa0:	str	r3, [sp, #36]	; 0x24
   2efa4:	ldr	r0, [sp, #36]	; 0x24
   2efa8:	add	sp, sp, #428	; 0x1ac
   2efac:	ldrd	r4, [sp]
   2efb0:	ldrd	r6, [sp, #8]
   2efb4:	ldrd	r8, [sp, #16]
   2efb8:	ldrd	sl, [sp, #24]
   2efbc:	add	sp, sp, #32
   2efc0:	pop	{pc}		; (ldr pc, [sp], #4)
   2efc4:	ldr	sl, [sp, #68]	; 0x44
   2efc8:	mov	r3, #12
   2efcc:	str	r3, [sp, #36]	; 0x24
   2efd0:	mov	r0, r4
   2efd4:	bl	19610 <__assert_fail@plt+0x7a6c>
   2efd8:	ldr	r3, [sl, #76]	; 0x4c
   2efdc:	cmp	r3, #0
   2efe0:	bne	2f360 <__assert_fail@plt+0x1d7bc>
   2efe4:	ldr	r0, [sp, #152]	; 0x98
   2efe8:	bl	19610 <__assert_fail@plt+0x7a6c>
   2efec:	ldr	r0, [sp, #156]	; 0x9c
   2eff0:	bl	19610 <__assert_fail@plt+0x7a6c>
   2eff4:	ldrb	r3, [sp, #219]	; 0xdb
   2eff8:	cmp	r3, #0
   2effc:	beq	2efa4 <__assert_fail@plt+0x1d400>
   2f000:	ldr	r0, [sp, #148]	; 0x94
   2f004:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f008:	b	2efa4 <__assert_fail@plt+0x1d400>
   2f00c:	ldr	r8, [sp, #84]	; 0x54
   2f010:	mov	r3, #0
   2f014:	str	r3, [sp, #120]	; 0x78
   2f018:	b	2e86c <__assert_fail@plt+0x1ccc8>
   2f01c:	ldr	r3, [sp, #68]	; 0x44
   2f020:	ldr	r3, [r3, #76]	; 0x4c
   2f024:	cmp	r3, #0
   2f028:	bne	2f244 <__assert_fail@plt+0x1d6a0>
   2f02c:	ldr	sl, [sp, #68]	; 0x44
   2f030:	ldr	r3, [sp, #472]	; 0x1d8
   2f034:	cmp	r3, #0
   2f038:	beq	2efd0 <__assert_fail@plt+0x1d42c>
   2f03c:	cmp	r3, #1
   2f040:	bls	2f090 <__assert_fail@plt+0x1d4ec>
   2f044:	sub	r2, r3, #2
   2f048:	ldr	r3, [sp, #476]	; 0x1dc
   2f04c:	cmp	r2, #4
   2f050:	movls	r2, #0
   2f054:	movhi	r2, #1
   2f058:	add	r3, r3, #8
   2f05c:	ubfx	r1, r3, #0, #3
   2f060:	cmp	r1, #0
   2f064:	movne	r2, #0
   2f068:	cmp	r2, #0
   2f06c:	beq	300f8 <__assert_fail@plt+0x1e554>
   2f070:	ldr	r1, [sp, #472]	; 0x1d8
   2f074:	mvn	r0, #0
   2f078:	ldr	r2, [sp, #476]	; 0x1dc
   2f07c:	add	r2, r2, r1, lsl #3
   2f080:	mvn	r1, #0
   2f084:	strd	r0, [r3], #8
   2f088:	cmp	r2, r3
   2f08c:	bne	2f084 <__assert_fail@plt+0x1d4e0>
   2f090:	ldr	r3, [sp, #32]
   2f094:	ldrb	r3, [r3, #28]
   2f098:	eor	r3, r3, #16
   2f09c:	mov	r5, #0
   2f0a0:	ldr	r1, [sp, #236]	; 0xec
   2f0a4:	ldr	r2, [sp, #472]	; 0x1d8
   2f0a8:	subs	r2, r2, #1
   2f0ac:	movne	r2, #1
   2f0b0:	ands	r3, r2, r3, lsr #4
   2f0b4:	ldr	r2, [sp, #476]	; 0x1dc
   2f0b8:	str	r5, [r2]
   2f0bc:	str	r1, [r2, #4]
   2f0c0:	bne	2f618 <__assert_fail@plt+0x1da74>
   2f0c4:	ldrb	r2, [sp, #220]	; 0xdc
   2f0c8:	ldr	ip, [sp, #112]	; 0x70
   2f0cc:	ldr	r0, [sp, #156]	; 0x9c
   2f0d0:	cmp	r2, #0
   2f0d4:	ldrne	r5, [sp, #476]	; 0x1dc
   2f0d8:	movne	r2, #0
   2f0dc:	ldrne	r7, [sp, #472]	; 0x1d8
   2f0e0:	ldr	r1, [sp, #172]	; 0xac
   2f0e4:	addne	r5, r5, #4
   2f0e8:	ldr	lr, [sp, #176]	; 0xb0
   2f0ec:	bne	2f4d0 <__assert_fail@plt+0x1d92c>
   2f0f0:	ldr	lr, [sp, #472]	; 0x1d8
   2f0f4:	ldr	r1, [sp, #476]	; 0x1dc
   2f0f8:	add	r0, r1, #4
   2f0fc:	b	2f108 <__assert_fail@plt+0x1d564>
   2f100:	ldr	r3, [sp, #476]	; 0x1dc
   2f104:	ldr	r3, [r3, r2, lsl #3]
   2f108:	cmn	r3, #1
   2f10c:	add	r1, ip, r3
   2f110:	beq	2f128 <__assert_fail@plt+0x1d584>
   2f114:	ldr	r3, [r0, r2, lsl #3]
   2f118:	ldr	r5, [sp, #476]	; 0x1dc
   2f11c:	add	r3, ip, r3
   2f120:	str	r1, [r5, r2, lsl #3]
   2f124:	str	r3, [r0, r2, lsl #3]
   2f128:	add	r2, r2, #1
   2f12c:	cmp	lr, r2
   2f130:	bne	2f100 <__assert_fail@plt+0x1d55c>
   2f134:	ldr	r3, [sp, #108]	; 0x6c
   2f138:	cmp	r3, #0
   2f13c:	ble	2f18c <__assert_fail@plt+0x1d5e8>
   2f140:	mov	r0, r3
   2f144:	ldr	r2, [sp, #472]	; 0x1d8
   2f148:	ldr	r3, [sp, #476]	; 0x1dc
   2f14c:	add	r3, r3, r2, lsl #3
   2f150:	sub	r2, r0, #1
   2f154:	cmp	r2, #4
   2f158:	ubfx	r1, r3, #0, #3
   2f15c:	movls	r2, #0
   2f160:	movhi	r2, #1
   2f164:	cmp	r1, #0
   2f168:	movne	r2, #0
   2f16c:	cmp	r2, #0
   2f170:	beq	30120 <__assert_fail@plt+0x1e57c>
   2f174:	add	r2, r3, r0, lsl #3
   2f178:	mvn	r1, #0
   2f17c:	mvn	r0, #0
   2f180:	strd	r0, [r3], #8
   2f184:	cmp	r3, r2
   2f188:	bne	2f180 <__assert_fail@plt+0x1d5dc>
   2f18c:	ldr	ip, [sl, #132]	; 0x84
   2f190:	cmp	ip, #0
   2f194:	beq	2efd0 <__assert_fail@plt+0x1d42c>
   2f198:	ldr	r3, [sp, #472]	; 0x1d8
   2f19c:	cmp	r3, #1
   2f1a0:	bls	2efd0 <__assert_fail@plt+0x1d42c>
   2f1a4:	ldr	r1, [sp, #476]	; 0x1dc
   2f1a8:	mov	r6, r3
   2f1ac:	mov	r2, #0
   2f1b0:	mov	r3, #1
   2f1b4:	add	r5, r1, #4
   2f1b8:	ldr	r1, [ip, r2, lsl #2]
   2f1bc:	mov	r0, r3
   2f1c0:	cmp	r1, r2
   2f1c4:	add	lr, r1, #1
   2f1c8:	beq	2f1ec <__assert_fail@plt+0x1d648>
   2f1cc:	ldr	r1, [sp, #476]	; 0x1dc
   2f1d0:	ldr	r1, [r1, lr, lsl #3]
   2f1d4:	ldr	lr, [sp, #476]	; 0x1dc
   2f1d8:	str	r1, [lr, r3, lsl #3]
   2f1dc:	ldr	r2, [ip, r2, lsl #2]
   2f1e0:	add	r2, lr, r2, lsl #3
   2f1e4:	ldr	r2, [r2, #12]
   2f1e8:	str	r2, [r5, r3, lsl #3]
   2f1ec:	add	r3, r3, #1
   2f1f0:	mov	r2, r0
   2f1f4:	cmp	r6, r3
   2f1f8:	bne	2f1b8 <__assert_fail@plt+0x1d614>
   2f1fc:	b	2efd0 <__assert_fail@plt+0x1d42c>
   2f200:	mov	r1, sl
   2f204:	ldr	r0, [sp, #228]	; 0xe4
   2f208:	bl	2a3a4 <__assert_fail@plt+0x18800>
   2f20c:	cmp	r0, #0
   2f210:	bne	2e87c <__assert_fail@plt+0x1ccd8>
   2f214:	ldr	r3, [sp, #244]	; 0xf4
   2f218:	mov	r2, #12
   2f21c:	str	r2, [sp, #120]	; 0x78
   2f220:	cmp	r3, #0
   2f224:	bne	2ef94 <__assert_fail@plt+0x1d3f0>
   2f228:	mov	r4, #0
   2f22c:	ldr	sl, [sp, #68]	; 0x44
   2f230:	b	2efc8 <__assert_fail@plt+0x1d424>
   2f234:	ldr	r3, [sp, #104]	; 0x68
   2f238:	str	r3, [sp, #16]
   2f23c:	ldrb	r3, [sl, #52]	; 0x34
   2f240:	b	2e7b4 <__assert_fail@plt+0x1cc10>
   2f244:	mov	r2, fp
   2f248:	add	r0, sp, #144	; 0x90
   2f24c:	ldr	r1, [r4, fp, lsl #2]
   2f250:	bl	25cec <__assert_fail@plt+0x14148>
   2f254:	str	r0, [sp, #240]	; 0xf0
   2f258:	b	2e9a4 <__assert_fail@plt+0x1ce00>
   2f25c:	ldr	sl, [sp, #68]	; 0x44
   2f260:	ldr	r2, [sl, #76]	; 0x4c
   2f264:	cmp	r2, #0
   2f268:	bne	2f244 <__assert_fail@plt+0x1d6a0>
   2f26c:	ldr	r2, [sp, #472]	; 0x1d8
   2f270:	cmp	r2, #0
   2f274:	bne	2f098 <__assert_fail@plt+0x1d4f4>
   2f278:	str	r2, [sp, #36]	; 0x24
   2f27c:	b	2efd0 <__assert_fail@plt+0x1d42c>
   2f280:	ldr	r2, [sp, #72]	; 0x48
   2f284:	b	2e4c8 <__assert_fail@plt+0x1c924>
   2f288:	mov	r1, r3
   2f28c:	mov	r3, r5
   2f290:	ldr	r0, [sp, #48]	; 0x30
   2f294:	ldr	r4, [sp, #56]	; 0x38
   2f298:	ldr	ip, [sp, #72]	; 0x48
   2f29c:	ldr	lr, [sp, #76]	; 0x4c
   2f2a0:	b	2f2b4 <__assert_fail@plt+0x1d710>
   2f2a4:	sub	r3, r3, #1
   2f2a8:	mov	r1, #1
   2f2ac:	cmp	lr, r3
   2f2b0:	bgt	2f3d4 <__assert_fail@plt+0x1d830>
   2f2b4:	cmp	ip, r3
   2f2b8:	mov	r2, #0
   2f2bc:	ldrbgt	r2, [r4, r3]
   2f2c0:	ldrb	r2, [r0, r2]
   2f2c4:	cmp	r2, #0
   2f2c8:	beq	2f2a4 <__assert_fail@plt+0x1d700>
   2f2cc:	b	2ec44 <__assert_fail@plt+0x1d0a0>
   2f2d0:	add	r1, sp, #280	; 0x118
   2f2d4:	add	r0, sp, #144	; 0x90
   2f2d8:	str	r9, [sp, #280]	; 0x118
   2f2dc:	str	r6, [sp, #284]	; 0x11c
   2f2e0:	str	sl, [sp, #288]	; 0x120
   2f2e4:	str	fp, [sp, #292]	; 0x124
   2f2e8:	str	r6, [sp, #296]	; 0x128
   2f2ec:	str	r6, [sp, #300]	; 0x12c
   2f2f0:	str	r6, [sp, #304]	; 0x130
   2f2f4:	bl	2d438 <__assert_fail@plt+0x1b894>
   2f2f8:	mov	r7, r0
   2f2fc:	ldr	r0, [sp, #304]	; 0x130
   2f300:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f304:	cmp	r7, #0
   2f308:	bne	2f5b4 <__assert_fail@plt+0x1da10>
   2f30c:	ldr	r4, [r9]
   2f310:	cmp	r4, #0
   2f314:	beq	2ef30 <__assert_fail@plt+0x1d38c>
   2f318:	mov	r8, fp
   2f31c:	mov	fp, sl
   2f320:	ldr	sl, [sp, #68]	; 0x44
   2f324:	ldr	r0, [sp, #244]	; 0xf4
   2f328:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f32c:	mov	r0, #0
   2f330:	str	r8, [sp, #236]	; 0xec
   2f334:	str	fp, [sp, #240]	; 0xf0
   2f338:	str	r9, [sp, #244]	; 0xf4
   2f33c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f340:	mov	r0, #0
   2f344:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f348:	ldr	r4, [sp, #244]	; 0xf4
   2f34c:	b	2f030 <__assert_fail@plt+0x1d48c>
   2f350:	ldrb	r3, [sl, #88]	; 0x58
   2f354:	tst	r3, #2
   2f358:	bne	2e564 <__assert_fail@plt+0x1c9c0>
   2f35c:	b	2e58c <__assert_fail@plt+0x1c9e8>
   2f360:	add	r0, sp, #144	; 0x90
   2f364:	bl	24a9c <__assert_fail@plt+0x12ef8>
   2f368:	ldr	r0, [sp, #276]	; 0x114
   2f36c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f370:	ldr	r0, [sp, #260]	; 0x104
   2f374:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f378:	b	2efe4 <__assert_fail@plt+0x1d440>
   2f37c:	ldr	sl, [r4, #40]	; 0x28
   2f380:	cmp	sl, #0
   2f384:	bne	2e788 <__assert_fail@plt+0x1cbe4>
   2f388:	mov	r3, #12
   2f38c:	ldr	sl, [sp, #68]	; 0x44
   2f390:	str	r3, [sp, #36]	; 0x24
   2f394:	ldr	r4, [sp, #244]	; 0xf4
   2f398:	b	2efd0 <__assert_fail@plt+0x1d42c>
   2f39c:	mov	r0, r9
   2f3a0:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f3a4:	mov	r0, r6
   2f3a8:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f3ac:	add	r0, sp, #144	; 0x90
   2f3b0:	bl	24a9c <__assert_fail@plt+0x12ef8>
   2f3b4:	ldr	r5, [sp, #112]	; 0x70
   2f3b8:	b	2ef4c <__assert_fail@plt+0x1d3a8>
   2f3bc:	mov	r3, #12
   2f3c0:	ldr	r4, [sp, #244]	; 0xf4
   2f3c4:	str	r3, [sp, #36]	; 0x24
   2f3c8:	b	2efd0 <__assert_fail@plt+0x1d42c>
   2f3cc:	mov	r3, #8
   2f3d0:	b	2e628 <__assert_fail@plt+0x1ca84>
   2f3d4:	mov	r2, #1
   2f3d8:	ldr	sl, [sp, #68]	; 0x44
   2f3dc:	str	r2, [sp, #36]	; 0x24
   2f3e0:	str	r3, [sp, #112]	; 0x70
   2f3e4:	ldr	r4, [sp, #244]	; 0xf4
   2f3e8:	b	2efd0 <__assert_fail@plt+0x1d42c>
   2f3ec:	ldr	r4, [sp, #48]	; 0x30
   2f3f0:	ldr	r1, [sp, #168]	; 0xa8
   2f3f4:	sub	r2, r5, r1
   2f3f8:	ldr	r3, [sp, #176]	; 0xb0
   2f3fc:	cmp	r3, r2
   2f400:	bhi	303a0 <__assert_fail@plt+0x1e7fc>
   2f404:	mov	r1, r5
   2f408:	add	r0, sp, #144	; 0x90
   2f40c:	ldr	r2, [sp, #480]	; 0x1e0
   2f410:	bl	25388 <__assert_fail@plt+0x137e4>
   2f414:	subs	r3, r0, #0
   2f418:	str	r3, [sp, #36]	; 0x24
   2f41c:	beq	30398 <__assert_fail@plt+0x1e7f4>
   2f420:	ldr	sl, [sp, #68]	; 0x44
   2f424:	ldr	r4, [sp, #244]	; 0xf4
   2f428:	b	2efd0 <__assert_fail@plt+0x1d42c>
   2f42c:	ldrsb	r3, [sl, #52]	; 0x34
   2f430:	cmp	r3, #0
   2f434:	blt	2f4a4 <__assert_fail@plt+0x1d900>
   2f438:	ldr	fp, [sp, #12]
   2f43c:	ldr	r3, [sp, #20]
   2f440:	cmp	r3, #0
   2f444:	strne	r3, [sp, #28]
   2f448:	bne	2e7c8 <__assert_fail@plt+0x1cc24>
   2f44c:	b	2e93c <__assert_fail@plt+0x1cd98>
   2f450:	mov	r5, r0
   2f454:	b	2e7dc <__assert_fail@plt+0x1cc38>
   2f458:	mov	fp, r4
   2f45c:	b	2e93c <__assert_fail@plt+0x1cd98>
   2f460:	ldr	sl, [r4, #44]	; 0x2c
   2f464:	b	2f380 <__assert_fail@plt+0x1d7dc>
   2f468:	ldr	sl, [sp, #68]	; 0x44
   2f46c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f470:	mov	r3, #12
   2f474:	mov	r0, r9
   2f478:	str	r3, [sp, #36]	; 0x24
   2f47c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f480:	ldr	r4, [sp, #244]	; 0xf4
   2f484:	b	2efd0 <__assert_fail@plt+0x1d42c>
   2f488:	mov	r3, r0
   2f48c:	mov	r1, r4
   2f490:	ldr	r2, [sl, #40]	; 0x28
   2f494:	add	r0, sp, #120	; 0x78
   2f498:	bl	29f88 <__assert_fail@plt+0x183e4>
   2f49c:	mov	sl, r0
   2f4a0:	b	2f380 <__assert_fail@plt+0x1d7dc>
   2f4a4:	mov	r1, sl
   2f4a8:	add	r0, sp, #144	; 0x90
   2f4ac:	ldr	r2, [sp, #12]
   2f4b0:	bl	25cec <__assert_fail@plt+0x14148>
   2f4b4:	subs	r3, r0, #0
   2f4b8:	str	r3, [sp, #28]
   2f4bc:	bne	2f438 <__assert_fail@plt+0x1d894>
   2f4c0:	mvn	fp, #0
   2f4c4:	b	2e7c8 <__assert_fail@plt+0x1cc24>
   2f4c8:	ldr	r3, [sp, #476]	; 0x1dc
   2f4cc:	ldr	r3, [r3, r2, lsl #3]
   2f4d0:	cmn	r3, #1
   2f4d4:	beq	2f50c <__assert_fail@plt+0x1d968>
   2f4d8:	cmp	r1, r3
   2f4dc:	ldr	r6, [r5, r2, lsl #3]
   2f4e0:	moveq	r3, lr
   2f4e4:	ldrne	r3, [r0, r3, lsl #2]
   2f4e8:	ldr	r8, [sp, #476]	; 0x1dc
   2f4ec:	cmp	r1, r6
   2f4f0:	moveq	r6, lr
   2f4f4:	str	r3, [r8, r2, lsl #3]
   2f4f8:	add	r3, ip, r3
   2f4fc:	ldrne	r6, [r0, r6, lsl #2]
   2f500:	str	r3, [r8, r2, lsl #3]
   2f504:	add	r6, ip, r6
   2f508:	str	r6, [r5, r2, lsl #3]
   2f50c:	add	r2, r2, #1
   2f510:	cmp	r2, r7
   2f514:	bne	2f4c8 <__assert_fail@plt+0x1d924>
   2f518:	b	2f134 <__assert_fail@plt+0x1d590>
   2f51c:	add	r4, sl, #8
   2f520:	add	r5, sl, #12
   2f524:	mov	r1, r4
   2f528:	mov	r2, r5
   2f52c:	mov	r3, #0
   2f530:	add	r0, sp, #144	; 0x90
   2f534:	bl	25fac <__assert_fail@plt+0x14408>
   2f538:	cmp	r0, #0
   2f53c:	mov	fp, r0
   2f540:	str	r0, [sp, #120]	; 0x78
   2f544:	bne	2e93c <__assert_fail@plt+0x1cd98>
   2f548:	ldrb	r3, [sl, #52]	; 0x34
   2f54c:	tst	r3, #64	; 0x40
   2f550:	bne	2f5f0 <__assert_fail@plt+0x1da4c>
   2f554:	mov	r2, #0
   2f558:	str	r2, [sp, #16]
   2f55c:	b	2e7b4 <__assert_fail@plt+0x1cc10>
   2f560:	ldr	sl, [r4, #48]	; 0x30
   2f564:	b	2f380 <__assert_fail@plt+0x1d7dc>
   2f568:	mov	r7, r3
   2f56c:	mov	r0, r9
   2f570:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f574:	ldr	r0, [sp, #24]
   2f578:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f57c:	cmp	r7, #1
   2f580:	beq	2ef40 <__assert_fail@plt+0x1d39c>
   2f584:	str	r7, [sp, #36]	; 0x24
   2f588:	ldr	sl, [sp, #68]	; 0x44
   2f58c:	ldr	r4, [sp, #244]	; 0xf4
   2f590:	b	2efd0 <__assert_fail@plt+0x1d42c>
   2f594:	mov	r3, #12
   2f598:	mov	r0, r9
   2f59c:	ldr	sl, [sp, #68]	; 0x44
   2f5a0:	str	r3, [sp, #36]	; 0x24
   2f5a4:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f5a8:	mov	r0, r6
   2f5ac:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f5b0:	b	2eb70 <__assert_fail@plt+0x1cfcc>
   2f5b4:	str	r6, [sp, #24]
   2f5b8:	b	2f56c <__assert_fail@plt+0x1d9c8>
   2f5bc:	mov	r3, r5
   2f5c0:	mov	r2, r6
   2f5c4:	ldr	r0, [sp, #12]
   2f5c8:	mov	r1, r9
   2f5cc:	bl	2c924 <__assert_fail@plt+0x1ad80>
   2f5d0:	mov	r7, r0
   2f5d4:	mov	r0, r6
   2f5d8:	bl	19610 <__assert_fail@plt+0x7a6c>
   2f5dc:	cmp	r7, #0
   2f5e0:	beq	2f318 <__assert_fail@plt+0x1d774>
   2f5e4:	mov	r3, #0
   2f5e8:	str	r3, [sp, #24]
   2f5ec:	b	2f56c <__assert_fail@plt+0x1d9c8>
   2f5f0:	mov	r2, r5
   2f5f4:	mov	r1, r4
   2f5f8:	add	r0, sp, #144	; 0x90
   2f5fc:	bl	2d958 <__assert_fail@plt+0x1bdb4>
   2f600:	cmp	r0, #0
   2f604:	mov	fp, r0
   2f608:	str	r0, [sp, #120]	; 0x78
   2f60c:	bne	2e93c <__assert_fail@plt+0x1cd98>
   2f610:	ldrb	r3, [sl, #52]	; 0x34
   2f614:	b	2f554 <__assert_fail@plt+0x1d9b0>
   2f618:	ldr	r2, [sp, #32]
   2f61c:	ldrb	r3, [sl, #88]	; 0x58
   2f620:	ldr	r2, [r2]
   2f624:	tst	r3, #1
   2f628:	str	r2, [sp, #12]
   2f62c:	beq	2ff30 <__assert_fail@plt+0x1e38c>
   2f630:	ldr	r3, [sl, #76]	; 0x4c
   2f634:	cmp	r3, r5
   2f638:	ble	2ff30 <__assert_fail@plt+0x1e38c>
   2f63c:	mov	r0, #0
   2f640:	mov	r1, #2
   2f644:	mov	r2, #0
   2f648:	mov	r3, #16
   2f64c:	add	ip, sp, #280	; 0x118
   2f650:	strd	r0, [sp, #120]	; 0x78
   2f654:	add	r1, sp, #292	; 0x124
   2f658:	mov	r0, #48	; 0x30
   2f65c:	strd	r2, [ip]
   2f660:	str	r1, [sp, #16]
   2f664:	str	r5, [sp, #128]	; 0x80
   2f668:	str	r1, [sp, #288]	; 0x120
   2f66c:	bl	39028 <__assert_fail@plt+0x27484>
   2f670:	cmp	r0, #0
   2f674:	str	r0, [sp, #128]	; 0x80
   2f678:	beq	2f3bc <__assert_fail@plt+0x1d818>
   2f67c:	ldr	r1, [sp, #12]
   2f680:	add	r2, sp, #132	; 0x84
   2f684:	ldr	r3, [sp, #280]	; 0x118
   2f688:	str	r2, [sp, #24]
   2f68c:	ldr	fp, [r1, #72]	; 0x48
   2f690:	str	r5, [sp, #132]	; 0x84
   2f694:	ldr	r1, [sp, #472]	; 0x1d8
   2f698:	str	r5, [sp, #136]	; 0x88
   2f69c:	str	r5, [sp, #140]	; 0x8c
   2f6a0:	cmp	r3, r1
   2f6a4:	movcs	r3, r1
   2f6a8:	addcs	r5, sp, #120	; 0x78
   2f6ac:	strcs	r3, [sp, #280]	; 0x118
   2f6b0:	bcc	3037c <__assert_fail@plt+0x1e7d8>
   2f6b4:	ldr	r0, [sp, #288]	; 0x120
   2f6b8:	ldr	r3, [sp, #472]	; 0x1d8
   2f6bc:	ldr	r1, [sp, #476]	; 0x1dc
   2f6c0:	str	r0, [sp, #28]
   2f6c4:	lsl	r2, r3, #3
   2f6c8:	lsl	r3, r3, #4
   2f6cc:	mov	r4, r1
   2f6d0:	str	r2, [sp, #32]
   2f6d4:	str	r3, [sp, #44]	; 0x2c
   2f6d8:	bl	11784 <memcpy@plt>
   2f6dc:	ldr	r6, [r4], #4
   2f6e0:	str	sl, [sp, #20]
   2f6e4:	str	r4, [sp, #40]	; 0x28
   2f6e8:	str	r6, [sp, #116]	; 0x74
   2f6ec:	ldr	r3, [sp, #476]	; 0x1dc
   2f6f0:	ldr	r0, [r3, #4]
   2f6f4:	cmp	r0, r6
   2f6f8:	blt	3022c <__assert_fail@plt+0x1e688>
   2f6fc:	ldr	r3, [sp, #12]
   2f700:	lsl	r4, fp, #3
   2f704:	mov	r7, fp
   2f708:	ldr	r2, [r3]
   2f70c:	add	r1, r2, r4
   2f710:	ldrb	r3, [r1, #4]
   2f714:	cmp	r3, #8
   2f718:	beq	2fc10 <__assert_fail@plt+0x1e06c>
   2f71c:	cmp	r3, #9
   2f720:	beq	2fc7c <__assert_fail@plt+0x1e0d8>
   2f724:	cmp	r6, r0
   2f728:	beq	2fb28 <__assert_fail@plt+0x1df84>
   2f72c:	cmp	r5, #0
   2f730:	beq	2f7b4 <__assert_fail@plt+0x1dc10>
   2f734:	ldr	r2, [sp, #136]	; 0x88
   2f738:	cmp	r2, #0
   2f73c:	ble	2f7b4 <__assert_fail@plt+0x1dc10>
   2f740:	subs	r2, r2, #1
   2f744:	ldr	r0, [sp, #140]	; 0x8c
   2f748:	moveq	r1, r2
   2f74c:	beq	2f7a8 <__assert_fail@plt+0x1dc04>
   2f750:	mov	r1, #0
   2f754:	add	r3, r2, r1
   2f758:	lsr	r3, r3, #1
   2f75c:	ldr	ip, [r0, r3, lsl #2]
   2f760:	cmp	ip, fp
   2f764:	blt	2fb18 <__assert_fail@plt+0x1df74>
   2f768:	cmp	r1, r3
   2f76c:	bcs	2f7a8 <__assert_fail@plt+0x1dc04>
   2f770:	add	r2, r1, r3
   2f774:	lsr	r2, r2, #1
   2f778:	ldr	ip, [r0, r2, lsl #2]
   2f77c:	cmp	fp, ip
   2f780:	ble	2f798 <__assert_fail@plt+0x1dbf4>
   2f784:	b	2fb0c <__assert_fail@plt+0x1df68>
   2f788:	ldr	ip, [r0, r3, lsl #2]
   2f78c:	cmp	ip, fp
   2f790:	blt	2fb18 <__assert_fail@plt+0x1df74>
   2f794:	mov	r2, r3
   2f798:	add	r3, r1, r2
   2f79c:	cmp	r1, r2
   2f7a0:	lsr	r3, r3, #1
   2f7a4:	bcc	2f788 <__assert_fail@plt+0x1dbe4>
   2f7a8:	ldr	r3, [r0, r1, lsl #2]
   2f7ac:	cmp	r3, fp
   2f7b0:	beq	2fb3c <__assert_fail@plt+0x1df98>
   2f7b4:	ldr	r6, [sp, #228]	; 0xe4
   2f7b8:	ldr	r0, [r6]
   2f7bc:	add	r1, r0, r4
   2f7c0:	ldrb	r3, [r1, #4]
   2f7c4:	tst	r3, #8
   2f7c8:	beq	2f964 <__assert_fail@plt+0x1ddc0>
   2f7cc:	ldr	ip, [r6, #20]
   2f7d0:	add	r4, fp, fp, lsl #1
   2f7d4:	ldr	r2, [sp, #136]	; 0x88
   2f7d8:	ldr	r0, [sp, #116]	; 0x74
   2f7dc:	add	r4, ip, r4, lsl #2
   2f7e0:	ldr	r1, [sp, #244]	; 0xf4
   2f7e4:	cmp	r2, #0
   2f7e8:	ldr	r6, [r1, r0, lsl #2]
   2f7ec:	ble	2f864 <__assert_fail@plt+0x1dcc0>
   2f7f0:	subs	r2, r2, #1
   2f7f4:	moveq	r1, r2
   2f7f8:	ldr	ip, [sp, #140]	; 0x8c
   2f7fc:	beq	2f858 <__assert_fail@plt+0x1dcb4>
   2f800:	mov	r1, #0
   2f804:	add	r3, r2, r1
   2f808:	lsr	r3, r3, #1
   2f80c:	ldr	r0, [ip, r3, lsl #2]
   2f810:	cmp	fp, r0
   2f814:	bgt	2fc50 <__assert_fail@plt+0x1e0ac>
   2f818:	cmp	r3, r1
   2f81c:	bls	2f858 <__assert_fail@plt+0x1dcb4>
   2f820:	add	r2, r3, r1
   2f824:	lsr	r2, r2, #1
   2f828:	ldr	r0, [ip, r2, lsl #2]
   2f82c:	cmp	fp, r0
   2f830:	ble	2f848 <__assert_fail@plt+0x1dca4>
   2f834:	b	2fc44 <__assert_fail@plt+0x1e0a0>
   2f838:	ldr	r0, [ip, r3, lsl #2]
   2f83c:	cmp	fp, r0
   2f840:	bgt	2fc50 <__assert_fail@plt+0x1e0ac>
   2f844:	mov	r2, r3
   2f848:	add	r3, r1, r2
   2f84c:	cmp	r1, r2
   2f850:	lsr	r3, r3, #1
   2f854:	bcc	2f838 <__assert_fail@plt+0x1dc94>
   2f858:	ldr	r3, [ip, r1, lsl #2]
   2f85c:	cmp	fp, r3
   2f860:	beq	2f878 <__assert_fail@plt+0x1dcd4>
   2f864:	mov	r1, fp
   2f868:	ldr	r0, [sp, #24]
   2f86c:	bl	24b78 <__assert_fail@plt+0x12fd4>
   2f870:	cmp	r0, #0
   2f874:	beq	301a0 <__assert_fail@plt+0x1e5fc>
   2f878:	ldr	r9, [r4, #4]
   2f87c:	cmp	r9, #0
   2f880:	ble	2fa44 <__assert_fail@plt+0x1dea0>
   2f884:	ldr	r8, [r6, #8]
   2f888:	mvn	fp, #0
   2f88c:	mov	lr, #0
   2f890:	ldr	sl, [r4, #8]
   2f894:	add	r7, r8, fp
   2f898:	cmp	r8, #0
   2f89c:	ble	2f91c <__assert_fail@plt+0x1dd78>
   2f8a0:	cmp	r7, #0
   2f8a4:	ldr	r4, [sl, lr, lsl #2]
   2f8a8:	moveq	r1, r7
   2f8ac:	ldr	r0, [r6, #12]
   2f8b0:	beq	2f910 <__assert_fail@plt+0x1dd6c>
   2f8b4:	mov	r2, r7
   2f8b8:	mov	r1, #0
   2f8bc:	add	r3, r2, r1
   2f8c0:	lsr	r3, r3, #1
   2f8c4:	ldr	ip, [r0, r3, lsl #2]
   2f8c8:	cmp	r4, ip
   2f8cc:	bgt	2f944 <__assert_fail@plt+0x1dda0>
   2f8d0:	cmp	r3, r1
   2f8d4:	bls	2f910 <__assert_fail@plt+0x1dd6c>
   2f8d8:	add	r2, r3, r1
   2f8dc:	lsr	r2, r2, #1
   2f8e0:	ldr	ip, [r0, r2, lsl #2]
   2f8e4:	cmp	r4, ip
   2f8e8:	ble	2f900 <__assert_fail@plt+0x1dd5c>
   2f8ec:	b	2f938 <__assert_fail@plt+0x1dd94>
   2f8f0:	ldr	ip, [r0, r3, lsl #2]
   2f8f4:	cmp	r4, ip
   2f8f8:	bgt	2f944 <__assert_fail@plt+0x1dda0>
   2f8fc:	mov	r2, r3
   2f900:	add	r3, r1, r2
   2f904:	cmp	r1, r2
   2f908:	lsr	r3, r3, #1
   2f90c:	bcc	2f8f0 <__assert_fail@plt+0x1dd4c>
   2f910:	ldr	r3, [r0, r1, lsl #2]
   2f914:	cmp	r4, r3
   2f918:	beq	2f954 <__assert_fail@plt+0x1ddb0>
   2f91c:	add	lr, lr, #1
   2f920:	cmp	lr, r9
   2f924:	bne	2f898 <__assert_fail@plt+0x1dcf4>
   2f928:	cmp	fp, #0
   2f92c:	blt	30198 <__assert_fail@plt+0x1e5f4>
   2f930:	ldr	r6, [sp, #116]	; 0x74
   2f934:	b	2f6ec <__assert_fail@plt+0x1db48>
   2f938:	mov	r1, r2
   2f93c:	mov	r2, r3
   2f940:	mov	r3, r1
   2f944:	add	r1, r3, #1
   2f948:	cmp	r2, r1
   2f94c:	bhi	2f8bc <__assert_fail@plt+0x1dd18>
   2f950:	b	2f910 <__assert_fail@plt+0x1dd6c>
   2f954:	cmn	fp, #1
   2f958:	bne	2fd10 <__assert_fail@plt+0x1e16c>
   2f95c:	mov	fp, r4
   2f960:	b	2f91c <__assert_fail@plt+0x1dd78>
   2f964:	ldrb	r2, [r1, #6]
   2f968:	tst	r2, #16
   2f96c:	bne	2fe58 <__assert_fail@plt+0x1e2b4>
   2f970:	cmp	r3, #4
   2f974:	beq	2fea4 <__assert_fail@plt+0x1e300>
   2f978:	ldr	r8, [sp, #116]	; 0x74
   2f97c:	mov	r2, r8
   2f980:	add	r0, sp, #144	; 0x90
   2f984:	bl	25250 <__assert_fail@plt+0x136ac>
   2f988:	cmp	r0, #0
   2f98c:	beq	2fa44 <__assert_fail@plt+0x1dea0>
   2f990:	ldr	r3, [r6, #12]
   2f994:	add	r8, r8, #1
   2f998:	ldr	fp, [r3, r7, lsl #2]
   2f99c:	cmp	r5, #0
   2f9a0:	str	r8, [sp, #116]	; 0x74
   2f9a4:	beq	2fb00 <__assert_fail@plt+0x1df5c>
   2f9a8:	ldr	r3, [sp, #236]	; 0xec
   2f9ac:	cmp	r8, r3
   2f9b0:	bgt	2fa44 <__assert_fail@plt+0x1dea0>
   2f9b4:	ldr	r3, [sp, #244]	; 0xf4
   2f9b8:	ldr	r3, [r3, r8, lsl #2]
   2f9bc:	cmp	r3, #0
   2f9c0:	beq	2fa44 <__assert_fail@plt+0x1dea0>
   2f9c4:	ldr	r2, [r3, #8]
   2f9c8:	cmp	r2, #0
   2f9cc:	ble	2fa44 <__assert_fail@plt+0x1dea0>
   2f9d0:	subs	r2, r2, #1
   2f9d4:	ldr	r0, [r3, #12]
   2f9d8:	moveq	r1, r2
   2f9dc:	beq	2fa38 <__assert_fail@plt+0x1de94>
   2f9e0:	mov	r1, #0
   2f9e4:	add	r3, r2, r1
   2f9e8:	lsr	r3, r3, #1
   2f9ec:	ldr	ip, [r0, r3, lsl #2]
   2f9f0:	cmp	ip, fp
   2f9f4:	blt	2fc6c <__assert_fail@plt+0x1e0c8>
   2f9f8:	cmp	r3, r1
   2f9fc:	bls	2fa38 <__assert_fail@plt+0x1de94>
   2fa00:	add	r2, r3, r1
   2fa04:	lsr	r2, r2, #1
   2fa08:	ldr	ip, [r0, r2, lsl #2]
   2fa0c:	cmp	fp, ip
   2fa10:	ble	2fa28 <__assert_fail@plt+0x1de84>
   2fa14:	b	2fc60 <__assert_fail@plt+0x1e0bc>
   2fa18:	ldr	ip, [r0, r3, lsl #2]
   2fa1c:	cmp	ip, fp
   2fa20:	blt	2fc6c <__assert_fail@plt+0x1e0c8>
   2fa24:	mov	r2, r3
   2fa28:	add	r3, r1, r2
   2fa2c:	cmp	r1, r2
   2fa30:	lsr	r3, r3, #1
   2fa34:	bcc	2fa18 <__assert_fail@plt+0x1de74>
   2fa38:	ldr	r3, [r0, r1, lsl #2]
   2fa3c:	cmp	r3, fp
   2fa40:	beq	2fb00 <__assert_fail@plt+0x1df5c>
   2fa44:	ldr	ip, [sp, #24]
   2fa48:	mov	r0, r5
   2fa4c:	ldr	r1, [sp, #28]
   2fa50:	ldr	r2, [sp, #472]	; 0x1d8
   2fa54:	ldr	r3, [sp, #476]	; 0x1dc
   2fa58:	stm	sp, {r1, ip}
   2fa5c:	add	r1, sp, #116	; 0x74
   2fa60:	bl	24cc0 <__assert_fail@plt+0x1311c>
   2fa64:	subs	fp, r0, #0
   2fa68:	bge	2f930 <__assert_fail@plt+0x1dd8c>
   2fa6c:	ldr	sl, [sp, #20]
   2fa70:	ldr	r0, [sp, #140]	; 0x8c
   2fa74:	bl	19610 <__assert_fail@plt+0x7a6c>
   2fa78:	ldr	r3, [sp, #16]
   2fa7c:	ldr	r0, [sp, #288]	; 0x120
   2fa80:	cmp	r0, r3
   2fa84:	beq	2fa8c <__assert_fail@plt+0x1dee8>
   2fa88:	bl	19610 <__assert_fail@plt+0x7a6c>
   2fa8c:	ldr	r1, [sp, #16]
   2fa90:	mov	r2, #0
   2fa94:	mov	r3, #16
   2fa98:	cmp	r5, #0
   2fa9c:	str	r1, [sp, #288]	; 0x120
   2faa0:	add	r1, sp, #280	; 0x118
   2faa4:	strd	r2, [r1]
   2faa8:	beq	2eb68 <__assert_fail@plt+0x1cfc4>
   2faac:	mov	r6, #24
   2fab0:	ldr	r4, [sp, #36]	; 0x24
   2fab4:	b	2fad4 <__assert_fail@plt+0x1df30>
   2fab8:	add	r0, r0, r7
   2fabc:	ldr	r0, [r0, #20]
   2fac0:	bl	19610 <__assert_fail@plt+0x7a6c>
   2fac4:	ldr	r3, [r5, #8]
   2fac8:	add	r3, r3, r7
   2facc:	ldr	r0, [r3, #8]
   2fad0:	bl	19610 <__assert_fail@plt+0x7a6c>
   2fad4:	ldr	r3, [r5]
   2fad8:	mul	r7, r6, r4
   2fadc:	ldr	r0, [r5, #8]
   2fae0:	cmp	r4, r3
   2fae4:	add	r4, r4, #1
   2fae8:	blt	2fab8 <__assert_fail@plt+0x1df14>
   2faec:	mov	r3, #1
   2faf0:	str	r3, [sp, #36]	; 0x24
   2faf4:	bl	19610 <__assert_fail@plt+0x7a6c>
   2faf8:	ldr	r4, [sp, #244]	; 0xf4
   2fafc:	b	2efd0 <__assert_fail@plt+0x1d42c>
   2fb00:	mov	r3, #0
   2fb04:	str	r3, [sp, #136]	; 0x88
   2fb08:	b	2f928 <__assert_fail@plt+0x1dd84>
   2fb0c:	mov	r1, r2
   2fb10:	mov	r2, r3
   2fb14:	mov	r3, r1
   2fb18:	add	r1, r3, #1
   2fb1c:	cmp	r2, r1
   2fb20:	bhi	2f754 <__assert_fail@plt+0x1dbb0>
   2fb24:	b	2f7a8 <__assert_fail@plt+0x1dc04>
   2fb28:	ldr	r3, [sp, #240]	; 0xf0
   2fb2c:	cmp	r3, fp
   2fb30:	bne	2f72c <__assert_fail@plt+0x1db88>
   2fb34:	cmp	r5, #0
   2fb38:	beq	30340 <__assert_fail@plt+0x1e79c>
   2fb3c:	ldr	r0, [sp, #40]	; 0x28
   2fb40:	mov	r3, #0
   2fb44:	ldr	r1, [sp, #472]	; 0x1d8
   2fb48:	ldr	r2, [sp, #476]	; 0x1dc
   2fb4c:	ldr	r2, [r2, r3, lsl #3]
   2fb50:	cmp	r2, #0
   2fb54:	blt	2fb64 <__assert_fail@plt+0x1dfc0>
   2fb58:	ldr	r2, [r0, r3, lsl #3]
   2fb5c:	cmn	r2, #1
   2fb60:	beq	2fcdc <__assert_fail@plt+0x1e138>
   2fb64:	add	r3, r3, #1
   2fb68:	cmp	r1, r3
   2fb6c:	bne	2fb48 <__assert_fail@plt+0x1dfa4>
   2fb70:	ldr	sl, [sp, #20]
   2fb74:	ldr	r0, [sp, #140]	; 0x8c
   2fb78:	bl	19610 <__assert_fail@plt+0x7a6c>
   2fb7c:	ldr	r3, [sp, #16]
   2fb80:	ldr	r0, [sp, #288]	; 0x120
   2fb84:	cmp	r0, r3
   2fb88:	beq	30384 <__assert_fail@plt+0x1e7e0>
   2fb8c:	bl	19610 <__assert_fail@plt+0x7a6c>
   2fb90:	ldr	r1, [sp, #16]
   2fb94:	mov	r2, #0
   2fb98:	mov	r3, #16
   2fb9c:	cmp	r5, #0
   2fba0:	str	r1, [sp, #288]	; 0x120
   2fba4:	add	r1, sp, #280	; 0x118
   2fba8:	strd	r2, [r1]
   2fbac:	beq	2fc00 <__assert_fail@plt+0x1e05c>
   2fbb0:	ldr	r3, [r5]
   2fbb4:	cmp	r3, #0
   2fbb8:	movgt	r6, #0
   2fbbc:	movgt	r4, r6
   2fbc0:	ble	2fbf8 <__assert_fail@plt+0x1e054>
   2fbc4:	ldr	r3, [r5, #8]
   2fbc8:	add	r6, r6, #1
   2fbcc:	add	r3, r3, r4
   2fbd0:	ldr	r0, [r3, #20]
   2fbd4:	bl	19610 <__assert_fail@plt+0x7a6c>
   2fbd8:	ldr	r3, [r5, #8]
   2fbdc:	add	r3, r3, r4
   2fbe0:	add	r4, r4, #24
   2fbe4:	ldr	r0, [r3, #8]
   2fbe8:	bl	19610 <__assert_fail@plt+0x7a6c>
   2fbec:	ldr	r3, [r5]
   2fbf0:	cmp	r6, r3
   2fbf4:	blt	2fbc4 <__assert_fail@plt+0x1e020>
   2fbf8:	ldr	r0, [r5, #8]
   2fbfc:	bl	19610 <__assert_fail@plt+0x7a6c>
   2fc00:	ldr	r4, [sp, #244]	; 0xf4
   2fc04:	ldr	r3, [sp, #476]	; 0x1dc
   2fc08:	ldr	r3, [r3]
   2fc0c:	b	2f0c4 <__assert_fail@plt+0x1d520>
   2fc10:	ldr	r3, [r2, fp, lsl #3]
   2fc14:	ldr	r2, [sp, #472]	; 0x1d8
   2fc18:	add	r3, r3, #1
   2fc1c:	cmp	r2, r3
   2fc20:	ble	2f724 <__assert_fail@plt+0x1db80>
   2fc24:	ldr	r2, [sp, #476]	; 0x1dc
   2fc28:	ldr	r1, [sp, #476]	; 0x1dc
   2fc2c:	add	r2, r2, r3, lsl #3
   2fc30:	str	r6, [r1, r3, lsl #3]
   2fc34:	mvn	r3, #0
   2fc38:	str	r3, [r2, #4]
   2fc3c:	ldr	r0, [r1, #4]
   2fc40:	b	2f724 <__assert_fail@plt+0x1db80>
   2fc44:	mov	r1, r2
   2fc48:	mov	r2, r3
   2fc4c:	mov	r3, r1
   2fc50:	add	r1, r3, #1
   2fc54:	cmp	r2, r1
   2fc58:	bhi	2f804 <__assert_fail@plt+0x1dc60>
   2fc5c:	b	2f858 <__assert_fail@plt+0x1dcb4>
   2fc60:	mov	r1, r2
   2fc64:	mov	r2, r3
   2fc68:	mov	r3, r1
   2fc6c:	add	r1, r3, #1
   2fc70:	cmp	r2, r1
   2fc74:	bhi	2f9e4 <__assert_fail@plt+0x1de40>
   2fc78:	b	2fa38 <__assert_fail@plt+0x1de94>
   2fc7c:	ldr	r3, [r1]
   2fc80:	ldr	r2, [sp, #472]	; 0x1d8
   2fc84:	add	r3, r3, #1
   2fc88:	cmp	r2, r3
   2fc8c:	ble	2f724 <__assert_fail@plt+0x1db80>
   2fc90:	ldr	r2, [sp, #476]	; 0x1dc
   2fc94:	ldr	r0, [sp, #476]	; 0x1dc
   2fc98:	ldr	r2, [r2, r3, lsl #3]
   2fc9c:	add	r0, r0, r3, lsl #3
   2fca0:	cmp	r2, r6
   2fca4:	blt	30174 <__assert_fail@plt+0x1e5d0>
   2fca8:	ldrb	r2, [r1, #6]
   2fcac:	tst	r2, #8
   2fcb0:	beq	3014c <__assert_fail@plt+0x1e5a8>
   2fcb4:	ldr	r1, [sp, #28]
   2fcb8:	ldr	r3, [r1, r3, lsl #3]
   2fcbc:	cmn	r3, #1
   2fcc0:	beq	3014c <__assert_fail@plt+0x1e5a8>
   2fcc4:	ldr	r2, [sp, #32]
   2fcc8:	ldr	r0, [sp, #476]	; 0x1dc
   2fccc:	bl	11784 <memcpy@plt>
   2fcd0:	ldr	r3, [sp, #476]	; 0x1dc
   2fcd4:	ldr	r0, [r3, #4]
   2fcd8:	b	2f724 <__assert_fail@plt+0x1db80>
   2fcdc:	ldr	ip, [sp, #24]
   2fce0:	mov	r0, r5
   2fce4:	ldr	r1, [sp, #28]
   2fce8:	ldr	r2, [sp, #472]	; 0x1d8
   2fcec:	ldr	r3, [sp, #476]	; 0x1dc
   2fcf0:	stm	sp, {r1, ip}
   2fcf4:	add	r1, sp, #116	; 0x74
   2fcf8:	bl	24cc0 <__assert_fail@plt+0x1311c>
   2fcfc:	subs	fp, r0, #0
   2fd00:	blt	2fb70 <__assert_fail@plt+0x1dfcc>
   2fd04:	mov	r7, fp
   2fd08:	lsl	r4, fp, #3
   2fd0c:	b	2f7b4 <__assert_fail@plt+0x1dc10>
   2fd10:	ldr	r2, [sp, #136]	; 0x88
   2fd14:	cmp	r2, #0
   2fd18:	ble	2fd90 <__assert_fail@plt+0x1e1ec>
   2fd1c:	subs	r2, r2, #1
   2fd20:	ldr	r0, [sp, #140]	; 0x8c
   2fd24:	moveq	r1, r2
   2fd28:	beq	2fd84 <__assert_fail@plt+0x1e1e0>
   2fd2c:	mov	r1, #0
   2fd30:	add	r3, r2, r1
   2fd34:	lsr	r3, r3, #1
   2fd38:	ldr	ip, [r0, r3, lsl #2]
   2fd3c:	cmp	fp, ip
   2fd40:	bgt	2fe94 <__assert_fail@plt+0x1e2f0>
   2fd44:	cmp	r3, r1
   2fd48:	bls	2fd84 <__assert_fail@plt+0x1e1e0>
   2fd4c:	add	r2, r3, r1
   2fd50:	lsr	r2, r2, #1
   2fd54:	ldr	ip, [r0, r2, lsl #2]
   2fd58:	cmp	fp, ip
   2fd5c:	ble	2fd74 <__assert_fail@plt+0x1e1d0>
   2fd60:	b	2fe88 <__assert_fail@plt+0x1e2e4>
   2fd64:	ldr	ip, [r0, r3, lsl #2]
   2fd68:	cmp	fp, ip
   2fd6c:	bgt	2fe94 <__assert_fail@plt+0x1e2f0>
   2fd70:	mov	r2, r3
   2fd74:	add	r3, r1, r2
   2fd78:	cmp	r1, r2
   2fd7c:	lsr	r3, r3, #1
   2fd80:	bcc	2fd64 <__assert_fail@plt+0x1e1c0>
   2fd84:	ldr	r3, [r0, r1, lsl #2]
   2fd88:	cmp	fp, r3
   2fd8c:	beq	3016c <__assert_fail@plt+0x1e5c8>
   2fd90:	cmp	r5, #0
   2fd94:	beq	2f928 <__assert_fail@plt+0x1dd84>
   2fd98:	ldr	r6, [r5]
   2fd9c:	ldmib	r5, {r1, r3}
   2fda0:	ldr	r7, [sp, #116]	; 0x74
   2fda4:	add	r2, r6, #1
   2fda8:	cmp	r2, r1
   2fdac:	str	r2, [r5]
   2fdb0:	beq	302cc <__assert_fail@plt+0x1e728>
   2fdb4:	add	r2, r6, r6, lsl #1
   2fdb8:	ldr	r0, [sp, #44]	; 0x2c
   2fdbc:	lsl	r6, r2, #3
   2fdc0:	str	r7, [r3, r2, lsl #3]
   2fdc4:	add	r7, r3, r6
   2fdc8:	str	r4, [r7, #4]
   2fdcc:	bl	39028 <__assert_fail@plt+0x27484>
   2fdd0:	ldr	r3, [r5, #8]
   2fdd4:	str	r0, [r7, #8]
   2fdd8:	add	r3, r3, r6
   2fddc:	ldr	r0, [r3, #8]
   2fde0:	cmp	r0, #0
   2fde4:	beq	30310 <__assert_fail@plt+0x1e76c>
   2fde8:	ldr	r4, [sp, #32]
   2fdec:	ldr	r1, [sp, #476]	; 0x1dc
   2fdf0:	mov	r2, r4
   2fdf4:	bl	11784 <memcpy@plt>
   2fdf8:	ldr	r3, [r5, #8]
   2fdfc:	mov	r2, r4
   2fe00:	ldr	r1, [sp, #28]
   2fe04:	add	r3, r3, r6
   2fe08:	ldr	r0, [r3, #8]
   2fe0c:	add	r0, r0, r4
   2fe10:	bl	11784 <memcpy@plt>
   2fe14:	ldr	r2, [r5, #8]
   2fe18:	ldr	r3, [sp, #136]	; 0x88
   2fe1c:	add	r6, r2, r6
   2fe20:	cmp	r3, #0
   2fe24:	str	r3, [r6, #16]
   2fe28:	ble	302b8 <__assert_fail@plt+0x1e714>
   2fe2c:	lsl	r0, r3, #2
   2fe30:	str	r3, [r6, #12]
   2fe34:	bl	39028 <__assert_fail@plt+0x27484>
   2fe38:	cmp	r0, #0
   2fe3c:	str	r0, [r6, #20]
   2fe40:	beq	30360 <__assert_fail@plt+0x1e7bc>
   2fe44:	ldr	r2, [sp, #136]	; 0x88
   2fe48:	ldr	r1, [sp, #140]	; 0x8c
   2fe4c:	lsl	r2, r2, #2
   2fe50:	bl	11784 <memcpy@plt>
   2fe54:	b	2f928 <__assert_fail@plt+0x1dd84>
   2fe58:	ldr	ip, [sp, #116]	; 0x74
   2fe5c:	add	r3, sp, #144	; 0x90
   2fe60:	mov	r2, fp
   2fe64:	add	r1, r6, #128	; 0x80
   2fe68:	str	ip, [sp]
   2fe6c:	bl	27d4c <__assert_fail@plt+0x161a8>
   2fe70:	subs	r8, r0, #0
   2fe74:	bne	30164 <__assert_fail@plt+0x1e5c0>
   2fe78:	ldr	r1, [r6]
   2fe7c:	ldr	r8, [sp, #116]	; 0x74
   2fe80:	add	r1, r1, r4
   2fe84:	b	2f97c <__assert_fail@plt+0x1ddd8>
   2fe88:	mov	r1, r2
   2fe8c:	mov	r2, r3
   2fe90:	mov	r3, r1
   2fe94:	add	r1, r3, #1
   2fe98:	cmp	r2, r1
   2fe9c:	bhi	2fd30 <__assert_fail@plt+0x1e18c>
   2fea0:	b	2fd84 <__assert_fail@plt+0x1e1e0>
   2fea4:	ldr	r3, [r1]
   2fea8:	ldr	r2, [sp, #472]	; 0x1d8
   2feac:	add	r3, r3, #1
   2feb0:	cmp	r2, r3
   2feb4:	ble	30030 <__assert_fail@plt+0x1e48c>
   2feb8:	ldr	r2, [sp, #476]	; 0x1dc
   2febc:	cmp	r5, #0
   2fec0:	ldr	r1, [sp, #476]	; 0x1dc
   2fec4:	add	r2, r2, r3, lsl #3
   2fec8:	ldr	r0, [r1, r3, lsl #3]
   2fecc:	ldr	r3, [r2, #4]
   2fed0:	sub	r8, r3, r0
   2fed4:	beq	3015c <__assert_fail@plt+0x1e5b8>
   2fed8:	cmn	r0, #1
   2fedc:	beq	2fa44 <__assert_fail@plt+0x1dea0>
   2fee0:	cmn	r3, #1
   2fee4:	beq	2fa44 <__assert_fail@plt+0x1dea0>
   2fee8:	cmp	r8, #0
   2feec:	beq	30038 <__assert_fail@plt+0x1e494>
   2fef0:	ldr	r4, [sp, #116]	; 0x74
   2fef4:	ldr	r1, [sp, #148]	; 0x94
   2fef8:	ldr	r3, [sp, #172]	; 0xac
   2fefc:	sub	r3, r3, r4
   2ff00:	cmp	r8, r3
   2ff04:	bgt	2fa44 <__assert_fail@plt+0x1dea0>
   2ff08:	add	r0, r1, r0
   2ff0c:	mov	r2, r8
   2ff10:	add	r1, r1, r4
   2ff14:	bl	117c0 <memcmp@plt>
   2ff18:	cmp	r0, #0
   2ff1c:	bne	2fa44 <__assert_fail@plt+0x1dea0>
   2ff20:	ldr	r3, [r6, #12]
   2ff24:	add	r8, r8, r4
   2ff28:	ldr	fp, [r3, fp, lsl #2]
   2ff2c:	b	2f99c <__assert_fail@plt+0x1ddf8>
   2ff30:	mov	r0, #0
   2ff34:	mov	r1, #2
   2ff38:	mov	r3, #16
   2ff3c:	mov	r2, #0
   2ff40:	strd	r0, [sp, #120]	; 0x78
   2ff44:	add	r0, sp, #280	; 0x118
   2ff48:	mov	ip, #0
   2ff4c:	add	r1, sp, #292	; 0x124
   2ff50:	add	lr, sp, #132	; 0x84
   2ff54:	strd	r2, [r0]
   2ff58:	mov	r5, ip
   2ff5c:	ldr	r3, [sp, #12]
   2ff60:	str	r1, [sp, #16]
   2ff64:	str	lr, [sp, #24]
   2ff68:	str	ip, [sp, #128]	; 0x80
   2ff6c:	str	r1, [sp, #288]	; 0x120
   2ff70:	ldr	fp, [r3, #72]	; 0x48
   2ff74:	str	ip, [sp, #132]	; 0x84
   2ff78:	str	ip, [sp, #136]	; 0x88
   2ff7c:	str	ip, [sp, #140]	; 0x8c
   2ff80:	mov	r3, #8
   2ff84:	add	r0, sp, #280	; 0x118
   2ff88:	ldr	r2, [sp, #16]
   2ff8c:	ldr	r1, [sp, #472]	; 0x1d8
   2ff90:	bl	39bf4 <__assert_fail@plt+0x28050>
   2ff94:	cmp	r0, #0
   2ff98:	bne	2f6b4 <__assert_fail@plt+0x1db10>
   2ff9c:	ldr	r3, [sp, #16]
   2ffa0:	ldr	r0, [sp, #288]	; 0x120
   2ffa4:	cmp	r0, r3
   2ffa8:	beq	2ffb0 <__assert_fail@plt+0x1e40c>
   2ffac:	bl	19610 <__assert_fail@plt+0x7a6c>
   2ffb0:	ldr	r1, [sp, #16]
   2ffb4:	mov	r2, #0
   2ffb8:	mov	r3, #16
   2ffbc:	cmp	r5, #0
   2ffc0:	str	r1, [sp, #288]	; 0x120
   2ffc4:	add	r1, sp, #280	; 0x118
   2ffc8:	strd	r2, [r1]
   2ffcc:	beq	2f3bc <__assert_fail@plt+0x1d818>
   2ffd0:	ldr	r3, [r5]
   2ffd4:	cmp	r3, #0
   2ffd8:	movgt	r4, #0
   2ffdc:	ldrgt	r6, [sp, #36]	; 0x24
   2ffe0:	ble	30018 <__assert_fail@plt+0x1e474>
   2ffe4:	add	r6, r6, #1
   2ffe8:	ldr	r3, [r5, #8]
   2ffec:	add	r3, r3, r4
   2fff0:	ldr	r0, [r3, #20]
   2fff4:	bl	19610 <__assert_fail@plt+0x7a6c>
   2fff8:	ldr	r3, [r5, #8]
   2fffc:	add	r3, r3, r4
   30000:	add	r4, r4, #24
   30004:	ldr	r0, [r3, #8]
   30008:	bl	19610 <__assert_fail@plt+0x7a6c>
   3000c:	ldr	r3, [r5]
   30010:	cmp	r6, r3
   30014:	blt	2ffe4 <__assert_fail@plt+0x1e440>
   30018:	mov	r3, #12
   3001c:	ldr	r0, [r5, #8]
   30020:	str	r3, [sp, #36]	; 0x24
   30024:	bl	19610 <__assert_fail@plt+0x7a6c>
   30028:	ldr	r4, [sp, #244]	; 0xf4
   3002c:	b	2efd0 <__assert_fail@plt+0x1d42c>
   30030:	cmp	r5, #0
   30034:	bne	2fa44 <__assert_fail@plt+0x1dea0>
   30038:	mov	r1, fp
   3003c:	ldr	r0, [sp, #24]
   30040:	bl	24b78 <__assert_fail@plt+0x12fd4>
   30044:	cmp	r0, #0
   30048:	beq	301a0 <__assert_fail@plt+0x1e5fc>
   3004c:	ldr	r8, [sp, #116]	; 0x74
   30050:	ldr	r3, [sp, #244]	; 0xf4
   30054:	ldr	r0, [r3, r8, lsl #2]
   30058:	ldr	r2, [r0, #8]
   3005c:	cmp	r2, #0
   30060:	ble	300ec <__assert_fail@plt+0x1e548>
   30064:	ldr	r1, [r6, #20]
   30068:	mov	r3, #12
   3006c:	subs	r2, r2, #1
   30070:	ldr	ip, [r0, #12]
   30074:	mla	fp, r3, fp, r1
   30078:	moveq	r1, r2
   3007c:	ldr	r3, [fp, #8]
   30080:	ldr	r0, [r3]
   30084:	beq	300e0 <__assert_fail@plt+0x1e53c>
   30088:	mov	r1, #0
   3008c:	add	r3, r2, r1
   30090:	lsr	r3, r3, #1
   30094:	ldr	lr, [ip, r3, lsl #2]
   30098:	cmp	r0, lr
   3009c:	bgt	30300 <__assert_fail@plt+0x1e75c>
   300a0:	cmp	r1, r3
   300a4:	bcs	300e0 <__assert_fail@plt+0x1e53c>
   300a8:	add	r2, r1, r3
   300ac:	lsr	r2, r2, #1
   300b0:	ldr	lr, [ip, r2, lsl #2]
   300b4:	cmp	r0, lr
   300b8:	ble	300d0 <__assert_fail@plt+0x1e52c>
   300bc:	b	302f4 <__assert_fail@plt+0x1e750>
   300c0:	ldr	lr, [ip, r3, lsl #2]
   300c4:	cmp	r0, lr
   300c8:	bgt	30300 <__assert_fail@plt+0x1e75c>
   300cc:	mov	r2, r3
   300d0:	add	r3, r1, r2
   300d4:	cmp	r1, r2
   300d8:	lsr	r3, r3, #1
   300dc:	bcc	300c0 <__assert_fail@plt+0x1e51c>
   300e0:	ldr	fp, [ip, r1, lsl #2]
   300e4:	cmp	r0, fp
   300e8:	beq	2f928 <__assert_fail@plt+0x1dd84>
   300ec:	ldr	r1, [r6]
   300f0:	add	r1, r1, r4
   300f4:	b	2f97c <__assert_fail@plt+0x1ddd8>
   300f8:	ldr	r2, [sp, #472]	; 0x1d8
   300fc:	ldr	r3, [sp, #476]	; 0x1dc
   30100:	sub	r1, r3, #8
   30104:	add	r1, r1, r2, lsl #3
   30108:	mvn	r2, #0
   3010c:	str	r2, [r3, #12]
   30110:	str	r2, [r3, #8]!
   30114:	cmp	r1, r3
   30118:	bne	3010c <__assert_fail@plt+0x1e568>
   3011c:	b	2f090 <__assert_fail@plt+0x1d4ec>
   30120:	ldr	r2, [sp, #472]	; 0x1d8
   30124:	add	r1, r2, r0
   30128:	ldr	r2, [sp, #476]	; 0x1dc
   3012c:	add	r1, r2, r1, lsl #3
   30130:	mvn	r2, #0
   30134:	add	r3, r3, #8
   30138:	str	r2, [r3, #-8]
   3013c:	str	r2, [r3, #-4]
   30140:	cmp	r1, r3
   30144:	bne	30134 <__assert_fail@plt+0x1e590>
   30148:	b	2f18c <__assert_fail@plt+0x1d5e8>
   3014c:	ldr	r3, [sp, #476]	; 0x1dc
   30150:	str	r6, [r0, #4]
   30154:	ldr	r0, [r3, #4]
   30158:	b	2f724 <__assert_fail@plt+0x1db80>
   3015c:	cmp	r8, #0
   30160:	beq	30038 <__assert_fail@plt+0x1e494>
   30164:	ldr	r4, [sp, #116]	; 0x74
   30168:	b	2ff20 <__assert_fail@plt+0x1e37c>
   3016c:	mov	fp, r4
   30170:	b	2f928 <__assert_fail@plt+0x1dd84>
   30174:	str	r6, [r0, #4]
   30178:	ldr	r0, [sp, #28]
   3017c:	ldr	r2, [sp, #32]
   30180:	ldr	r1, [sp, #476]	; 0x1dc
   30184:	bl	11784 <memcpy@plt>
   30188:	ldr	r6, [sp, #116]	; 0x74
   3018c:	ldr	r3, [sp, #476]	; 0x1dc
   30190:	ldr	r0, [r3, #4]
   30194:	b	2f724 <__assert_fail@plt+0x1db80>
   30198:	cmn	fp, #2
   3019c:	bne	2fa44 <__assert_fail@plt+0x1dea0>
   301a0:	ldr	sl, [sp, #20]
   301a4:	ldr	r0, [sp, #140]	; 0x8c
   301a8:	bl	19610 <__assert_fail@plt+0x7a6c>
   301ac:	ldr	r3, [sp, #16]
   301b0:	ldr	r0, [sp, #288]	; 0x120
   301b4:	cmp	r0, r3
   301b8:	beq	301c0 <__assert_fail@plt+0x1e61c>
   301bc:	bl	19610 <__assert_fail@plt+0x7a6c>
   301c0:	ldr	r1, [sp, #16]
   301c4:	mov	r2, #0
   301c8:	mov	r3, #16
   301cc:	cmp	r5, #0
   301d0:	str	r1, [sp, #288]	; 0x120
   301d4:	add	r1, sp, #280	; 0x118
   301d8:	strd	r2, [r1]
   301dc:	beq	2f3bc <__assert_fail@plt+0x1d818>
   301e0:	ldr	r3, [r5]
   301e4:	cmp	r3, #0
   301e8:	movgt	r4, #0
   301ec:	ldrgt	r6, [sp, #36]	; 0x24
   301f0:	ble	30018 <__assert_fail@plt+0x1e474>
   301f4:	add	r6, r6, #1
   301f8:	ldr	r3, [r5, #8]
   301fc:	add	r3, r3, r4
   30200:	ldr	r0, [r3, #20]
   30204:	bl	19610 <__assert_fail@plt+0x7a6c>
   30208:	ldr	r3, [r5, #8]
   3020c:	add	r3, r3, r4
   30210:	add	r4, r4, #24
   30214:	ldr	r0, [r3, #8]
   30218:	bl	19610 <__assert_fail@plt+0x7a6c>
   3021c:	ldr	r3, [r5]
   30220:	cmp	r6, r3
   30224:	blt	301f4 <__assert_fail@plt+0x1e650>
   30228:	b	30018 <__assert_fail@plt+0x1e474>
   3022c:	ldr	sl, [sp, #20]
   30230:	ldr	r0, [sp, #140]	; 0x8c
   30234:	bl	19610 <__assert_fail@plt+0x7a6c>
   30238:	ldr	r3, [sp, #16]
   3023c:	ldr	r0, [sp, #288]	; 0x120
   30240:	cmp	r0, r3
   30244:	beq	3024c <__assert_fail@plt+0x1e6a8>
   30248:	bl	19610 <__assert_fail@plt+0x7a6c>
   3024c:	ldr	r1, [sp, #16]
   30250:	mov	r2, #0
   30254:	mov	r3, #16
   30258:	cmp	r5, #0
   3025c:	str	r1, [sp, #288]	; 0x120
   30260:	add	r1, sp, #280	; 0x118
   30264:	strd	r2, [r1]
   30268:	beq	2fc00 <__assert_fail@plt+0x1e05c>
   3026c:	ldr	r3, [r5]
   30270:	cmp	r3, #0
   30274:	movgt	r6, #0
   30278:	movgt	r4, r6
   3027c:	ble	2fbf8 <__assert_fail@plt+0x1e054>
   30280:	ldr	r3, [r5, #8]
   30284:	add	r6, r6, #1
   30288:	add	r3, r3, r4
   3028c:	ldr	r0, [r3, #20]
   30290:	bl	19610 <__assert_fail@plt+0x7a6c>
   30294:	ldr	r3, [r5, #8]
   30298:	add	r3, r3, r4
   3029c:	add	r4, r4, #24
   302a0:	ldr	r0, [r3, #8]
   302a4:	bl	19610 <__assert_fail@plt+0x7a6c>
   302a8:	ldr	r3, [r5]
   302ac:	cmp	r6, r3
   302b0:	blt	30280 <__assert_fail@plt+0x1e6dc>
   302b4:	b	2fbf8 <__assert_fail@plt+0x1e054>
   302b8:	mov	r3, #0
   302bc:	str	r3, [r6, #12]
   302c0:	str	r3, [r6, #16]
   302c4:	str	r3, [r6, #20]
   302c8:	b	2f928 <__assert_fail@plt+0x1dd84>
   302cc:	mov	r1, #48	; 0x30
   302d0:	mov	r0, r3
   302d4:	mul	r1, r1, r2
   302d8:	bl	39064 <__assert_fail@plt+0x274c0>
   302dc:	subs	r3, r0, #0
   302e0:	beq	30310 <__assert_fail@plt+0x1e76c>
   302e4:	ldr	r2, [r5, #4]
   302e8:	lsl	r2, r2, #1
   302ec:	strd	r2, [r5, #4]
   302f0:	b	2fdb4 <__assert_fail@plt+0x1e210>
   302f4:	mov	r1, r2
   302f8:	mov	r2, r3
   302fc:	mov	r3, r1
   30300:	add	r1, r3, #1
   30304:	cmp	r2, r1
   30308:	bhi	3008c <__assert_fail@plt+0x1e4e8>
   3030c:	b	300e0 <__assert_fail@plt+0x1e53c>
   30310:	ldr	sl, [sp, #20]
   30314:	ldr	r0, [sp, #140]	; 0x8c
   30318:	bl	19610 <__assert_fail@plt+0x7a6c>
   3031c:	ldr	r3, [sp, #16]
   30320:	ldr	r0, [sp, #288]	; 0x120
   30324:	cmp	r0, r3
   30328:	bne	301bc <__assert_fail@plt+0x1e618>
   3032c:	mov	r2, #0
   30330:	mov	r3, #16
   30334:	add	r1, sp, #280	; 0x118
   30338:	strd	r2, [r1]
   3033c:	b	301e0 <__assert_fail@plt+0x1e63c>
   30340:	ldr	sl, [sp, #20]
   30344:	ldr	r0, [sp, #140]	; 0x8c
   30348:	bl	19610 <__assert_fail@plt+0x7a6c>
   3034c:	ldr	r3, [sp, #16]
   30350:	ldr	r0, [sp, #288]	; 0x120
   30354:	cmp	r0, r3
   30358:	bne	2fbfc <__assert_fail@plt+0x1e058>
   3035c:	b	2fc00 <__assert_fail@plt+0x1e05c>
   30360:	str	r0, [r6, #12]
   30364:	str	r0, [r6, #16]
   30368:	ldr	sl, [sp, #20]
   3036c:	b	30314 <__assert_fail@plt+0x1e770>
   30370:	ldr	sl, [sp, #68]	; 0x44
   30374:	ldr	r3, [sp, #472]	; 0x1d8
   30378:	b	2f03c <__assert_fail@plt+0x1d498>
   3037c:	add	r5, sp, #120	; 0x78
   30380:	b	2ff80 <__assert_fail@plt+0x1e3dc>
   30384:	mov	r2, #0
   30388:	mov	r3, #16
   3038c:	add	r1, sp, #280	; 0x118
   30390:	strd	r2, [r1]
   30394:	b	2fbb0 <__assert_fail@plt+0x1e00c>
   30398:	ldr	r1, [sp, #168]	; 0xa8
   3039c:	sub	r2, r5, r1
   303a0:	ldr	r0, [sp, #172]	; 0xac
   303a4:	mov	r3, r4
   303a8:	cmp	r0, r2
   303ac:	bls	303bc <__assert_fail@plt+0x1e818>
   303b0:	ldr	r3, [sp, #148]	; 0x94
   303b4:	ldrb	r3, [r3, r2]
   303b8:	add	r3, r4, r3
   303bc:	ldrb	r3, [r3]
   303c0:	cmp	r3, #0
   303c4:	bne	2e6d0 <__assert_fail@plt+0x1cb2c>
   303c8:	ldr	r2, [sp, #76]	; 0x4c
   303cc:	ldr	r3, [sp, #96]	; 0x60
   303d0:	add	r5, r5, r3
   303d4:	ldr	r3, [sp, #64]	; 0x40
   303d8:	str	r5, [sp, #112]	; 0x70
   303dc:	cmp	r5, r3
   303e0:	movle	r3, #0
   303e4:	movgt	r3, #1
   303e8:	cmp	r5, r2
   303ec:	orrlt	r3, r3, #1
   303f0:	cmp	r3, #0
   303f4:	beq	2f3f4 <__assert_fail@plt+0x1d850>
   303f8:	b	2eb64 <__assert_fail@plt+0x1cfc0>
   303fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   30400:	mov	r5, r1
   30404:	strd	r6, [sp, #8]
   30408:	strd	r8, [sp, #16]
   3040c:	mov	r9, r0
   30410:	strd	sl, [sp, #24]
   30414:	str	lr, [sp, #32]
   30418:	sub	sp, sp, #164	; 0xa4
   3041c:	ldr	sl, [r1]
   30420:	str	r2, [sp, #20]
   30424:	ldrb	r2, [r2, #4]
   30428:	str	r3, [sp, #32]
   3042c:	sub	r3, r2, #1
   30430:	cmp	r3, #35	; 0x23
   30434:	ldrls	pc, [pc, r3, lsl #2]
   30438:	b	31098 <__assert_fail@plt+0x1f4f4>
   3043c:	andeq	r0, r3, r8, lsr ip
   30440:	muleq	r3, r0, r9
   30444:	muleq	r3, r8, r0
   30448:	muleq	r3, r0, lr
   3044c:	andeq	r0, r3, r4, lsl #28
   30450:	muleq	r3, r8, r0
   30454:	muleq	r3, r8, r0
   30458:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3045c:	strheq	r1, [r3], -r0
   30460:	muleq	r3, r0, r9
   30464:	ldrdeq	r0, [r3], -r8
   30468:			; <UNDEFINED> instruction: 0x000309b8
   3046c:	muleq	r3, r8, r0
   30470:	muleq	r3, r8, r0
   30474:	muleq	r3, r8, r0
   30478:	muleq	r3, r8, r0
   3047c:	muleq	r3, r8, r0
   30480:	ldrdeq	r0, [r3], -r8
   30484:	ldrdeq	r0, [r3], -r8
   30488:	andeq	r0, r3, r4, asr #30
   3048c:	muleq	r3, r8, r0
   30490:	muleq	r3, r8, r0
   30494:	andeq	r0, r3, ip, asr #9
   30498:	strdeq	r0, [r3], -r4
   3049c:	muleq	r3, r8, r0
   304a0:	muleq	r3, r8, r0
   304a4:	muleq	r3, r8, r0
   304a8:	muleq	r3, r8, r0
   304ac:	muleq	r3, r8, r0
   304b0:	muleq	r3, r8, r0
   304b4:	muleq	r3, r8, r0
   304b8:	ldrdeq	r0, [r3], -ip
   304bc:	ldrdeq	r0, [r3], -ip
   304c0:	andeq	r1, r3, r8, ror r0
   304c4:	andeq	r1, r3, r8, ror r0
   304c8:	muleq	r3, r8, r0
   304cc:	ldr	r3, [sp, #32]
   304d0:	tst	r3, #16777216	; 0x1000000
   304d4:	bne	312a4 <__assert_fail@plt+0x1f700>
   304d8:	ldr	r3, [sp, #32]
   304dc:	tst	r3, #32
   304e0:	bne	312a4 <__assert_fail@plt+0x1f700>
   304e4:	tst	r3, #16
   304e8:	bne	31dbc <__assert_fail@plt+0x20218>
   304ec:	cmp	r2, #9
   304f0:	beq	310b0 <__assert_fail@plt+0x1f50c>
   304f4:	ldr	r3, [sp, #20]
   304f8:	mov	r4, #1
   304fc:	strb	r4, [r3, #4]
   30500:	ldr	r2, [sl, #64]	; 0x40
   30504:	cmp	r2, #31
   30508:	beq	31cfc <__assert_fail@plt+0x20158>
   3050c:	ldr	r0, [sl, #56]	; 0x38
   30510:	lsl	r3, r2, #5
   30514:	add	r4, r2, r4
   30518:	add	r2, r3, #4
   3051c:	add	r1, r0, r3
   30520:	add	r3, r3, #16
   30524:	str	r4, [sl, #64]	; 0x40
   30528:	adds	r2, r0, r2
   3052c:	add	r0, r0, r3
   30530:	ldr	r3, [sp, #20]
   30534:	mov	ip, #0
   30538:	mvn	lr, #0
   3053c:	str	r2, [sp, #28]
   30540:	str	ip, [r1, #4]
   30544:	str	ip, [r1, #8]
   30548:	str	ip, [r1, #12]
   3054c:	ldrd	r2, [r3]
   30550:	strd	r2, [r1, #24]
   30554:	ldrb	r3, [r0, #14]
   30558:	bic	r3, r3, #12
   3055c:	strb	r3, [r0, #14]
   30560:	str	ip, [r1, #16]
   30564:	str	ip, [r1, #20]
   30568:	str	lr, [r1, #32]
   3056c:	beq	30dec <__assert_fail@plt+0x1f248>
   30570:	ldr	r6, [sp, #20]
   30574:	mov	r1, r9
   30578:	mov	r5, #0
   3057c:	ldr	r4, [sp, #32]
   30580:	mov	r0, r6
   30584:	and	r3, r4, #2097152	; 0x200000
   30588:	mov	r2, r4
   3058c:	str	r3, [sp, #52]	; 0x34
   30590:	bl	26de8 <__assert_fail@plt+0x15244>
   30594:	ldr	r3, [r9, #40]	; 0x28
   30598:	and	r2, r4, #16777216	; 0x1000000
   3059c:	ldrb	r7, [r6, #4]
   305a0:	str	r2, [sp, #36]	; 0x24
   305a4:	add	r0, r3, r0
   305a8:	str	r0, [r9, #40]	; 0x28
   305ac:	cmp	r7, #23
   305b0:	cmpne	r7, #11
   305b4:	sub	r2, r7, #18
   305b8:	moveq	r3, #1
   305bc:	movne	r3, #0
   305c0:	cmp	r2, #1
   305c4:	orrls	r3, r3, #1
   305c8:	sub	r1, r7, #18
   305cc:	clz	r1, r1
   305d0:	cmp	r3, #0
   305d4:	lsr	r1, r1, #5
   305d8:	beq	30998 <__assert_fail@plt+0x1edf4>
   305dc:	ldr	r3, [sp, #20]
   305e0:	cmp	r7, #23
   305e4:	add	r6, sp, #96	; 0x60
   305e8:	ldr	r4, [r9, #40]	; 0x28
   305ec:	ldrd	r2, [r3]
   305f0:	strd	r2, [sp, #96]	; 0x60
   305f4:	beq	313f4 <__assert_fail@plt+0x1f850>
   305f8:	cmp	r7, #19
   305fc:	mov	r8, r1
   30600:	beq	31328 <__assert_fail@plt+0x1f784>
   30604:	mov	r1, r9
   30608:	ldr	r0, [sp, #20]
   3060c:	ldr	r2, [sp, #32]
   30610:	bl	26de8 <__assert_fail@plt+0x15244>
   30614:	ldr	r3, [r9, #40]	; 0x28
   30618:	ldr	r2, [sp, #28]
   3061c:	add	r0, r3, r0
   30620:	cmp	r2, #0
   30624:	str	r0, [r9, #40]	; 0x28
   30628:	beq	31560 <__assert_fail@plt+0x1f9bc>
   3062c:	cmp	r7, #18
   30630:	beq	31b94 <__assert_fail@plt+0x1fff0>
   30634:	ldrb	r3, [r2, #24]
   30638:	mov	r7, r2
   3063c:	cmp	r3, #17
   30640:	beq	314a8 <__assert_fail@plt+0x1f904>
   30644:	mov	r8, #0
   30648:	add	fp, sp, #128	; 0x80
   3064c:	str	r8, [sp, #40]	; 0x28
   30650:	mvn	r3, #0
   30654:	mov	r6, #11
   30658:	str	r3, [sp, #24]
   3065c:	mov	r2, #0
   30660:	mov	r3, #0
   30664:	strd	r2, [fp]
   30668:	ldr	r1, [sl, #64]	; 0x40
   3066c:	cmp	r1, #31
   30670:	beq	3157c <__assert_fail@plt+0x1f9d8>
   30674:	ldr	r4, [sl, #56]	; 0x38
   30678:	lsl	r3, r1, #5
   3067c:	add	r1, r1, #1
   30680:	add	r0, r3, #4
   30684:	add	r2, r4, r3
   30688:	add	r3, r3, #16
   3068c:	str	r1, [sl, #64]	; 0x40
   30690:	add	r3, r4, r3
   30694:	add	r4, r4, r0
   30698:	stmib	r2, {r5, r7}
   3069c:	mvn	ip, #0
   306a0:	cmp	r4, #0
   306a4:	str	r5, [r2, #12]
   306a8:	strb	r6, [sp, #132]	; 0x84
   306ac:	ldrd	r0, [fp]
   306b0:	strd	r0, [r2, #24]
   306b4:	ldrb	r0, [r3, #14]
   306b8:	bic	r0, r0, #12
   306bc:	strb	r0, [r3, #14]
   306c0:	str	r5, [r2, #16]
   306c4:	str	r5, [r2, #20]
   306c8:	str	ip, [r2, #32]
   306cc:	str	r4, [r7]
   306d0:	beq	31308 <__assert_fail@plt+0x1f764>
   306d4:	ldr	r3, [sp, #24]
   306d8:	add	r1, r8, #2
   306dc:	cmp	r1, r3
   306e0:	bgt	311d4 <__assert_fail@plt+0x1f630>
   306e4:	mov	r8, r4
   306e8:	mov	r2, fp
   306ec:	str	sl, [sp, #16]
   306f0:	str	r9, [sp, #44]	; 0x2c
   306f4:	mov	r9, r1
   306f8:	mov	fp, r2
   306fc:	mov	r6, r2
   30700:	b	30708 <__assert_fail@plt+0x1eb64>
   30704:	mov	r7, r3
   30708:	ldr	r2, [sl, #64]	; 0x40
   3070c:	cmp	r2, #31
   30710:	beq	312c8 <__assert_fail@plt+0x1f724>
   30714:	ldr	r0, [sl, #56]	; 0x38
   30718:	lsl	r3, r2, #5
   3071c:	add	r2, r2, #1
   30720:	add	lr, r3, #4
   30724:	add	ip, r0, r3
   30728:	add	r3, r3, #16
   3072c:	str	r2, [sl, #64]	; 0x40
   30730:	add	r1, r0, r3
   30734:	add	r0, r0, lr
   30738:	str	r5, [ip, #4]
   3073c:	mvn	lr, #0
   30740:	cmp	r0, #0
   30744:	str	r5, [ip, #8]
   30748:	str	r5, [ip, #12]
   3074c:	ldrd	r2, [r7, #20]
   30750:	strd	r2, [ip, #24]
   30754:	ldrb	r3, [r1, #14]
   30758:	bic	r3, r3, #12
   3075c:	strb	r3, [r1, #14]
   30760:	str	r5, [ip, #16]
   30764:	str	r5, [ip, #20]
   30768:	str	lr, [ip, #32]
   3076c:	str	r0, [fp]
   30770:	beq	312f4 <__assert_fail@plt+0x1f750>
   30774:	str	r8, [ip, #4]
   30778:	ldr	r8, [fp]
   3077c:	ldrb	r3, [r8, #26]
   30780:	orr	r3, r3, #4
   30784:	strb	r3, [r8, #26]
   30788:	ldr	r3, [r7, #4]
   3078c:	cmp	r3, #0
   30790:	addne	fp, r8, #4
   30794:	bne	30704 <__assert_fail@plt+0x1eb60>
   30798:	ldr	r2, [r7, #8]
   3079c:	cmp	r2, #0
   307a0:	cmpne	r2, r3
   307a4:	mov	r3, r7
   307a8:	bne	312bc <__assert_fail@plt+0x1f718>
   307ac:	ldr	r2, [r7]
   307b0:	ldr	r8, [r8]
   307b4:	subs	r7, r2, #0
   307b8:	bne	30798 <__assert_fail@plt+0x1ebf4>
   307bc:	mov	r2, r6
   307c0:	ldr	r6, [sp, #128]	; 0x80
   307c4:	str	sl, [sp, #16]
   307c8:	mov	r0, #0
   307cc:	mov	r1, #0
   307d0:	strd	r0, [r2]
   307d4:	ldr	r1, [sp, #16]
   307d8:	ldr	r0, [r1, #64]	; 0x40
   307dc:	cmp	r0, #31
   307e0:	beq	3137c <__assert_fail@plt+0x1f7d8>
   307e4:	lsl	r3, r0, #5
   307e8:	add	ip, r0, #1
   307ec:	ldr	r0, [r1, #56]	; 0x38
   307f0:	add	r8, r3, #4
   307f4:	add	r7, r0, r3
   307f8:	mov	lr, #16
   307fc:	str	ip, [r1, #64]	; 0x40
   30800:	add	r3, r3, lr
   30804:	add	r8, r0, r8
   30808:	str	r5, [r7, #4]
   3080c:	add	r3, r0, r3
   30810:	mvn	ip, #0
   30814:	str	r4, [r7, #8]
   30818:	cmp	r6, #0
   3081c:	str	r6, [r7, #12]
   30820:	strb	lr, [sp, #132]	; 0x84
   30824:	ldrd	sl, [r2]
   30828:	strd	sl, [r7, #24]
   3082c:	ldrb	lr, [r3, #14]
   30830:	bic	lr, lr, #12
   30834:	strb	lr, [r3, #14]
   30838:	str	r5, [r7, #16]
   3083c:	str	r5, [r7, #20]
   30840:	str	ip, [r7, #32]
   30844:	str	r8, [r4]
   30848:	beq	31308 <__assert_fail@plt+0x1f764>
   3084c:	cmp	r8, #0
   30850:	str	r8, [r6]
   30854:	beq	31308 <__assert_fail@plt+0x1f764>
   30858:	mov	sl, #0
   3085c:	mov	fp, #0
   30860:	strd	sl, [r2]
   30864:	ldr	r3, [r1, #64]	; 0x40
   30868:	cmp	r3, #31
   3086c:	lslne	ip, r3, #5
   30870:	addne	lr, r3, #1
   30874:	addne	r4, ip, #4
   30878:	beq	313b8 <__assert_fail@plt+0x1f814>
   3087c:	add	r3, r0, ip
   30880:	str	lr, [r1, #64]	; 0x40
   30884:	mov	lr, #10
   30888:	add	ip, ip, #16
   3088c:	add	r4, r0, r4
   30890:	stmib	r3, {r5, r8}
   30894:	add	r0, r0, ip
   30898:	mvn	ip, #0
   3089c:	str	r5, [r3, #12]
   308a0:	cmp	r4, #0
   308a4:	strb	lr, [sp, #132]	; 0x84
   308a8:	ldrd	sl, [r2]
   308ac:	strd	sl, [r3, #24]
   308b0:	ldrb	lr, [r0, #14]
   308b4:	bic	lr, lr, #12
   308b8:	strb	lr, [r0, #14]
   308bc:	str	r5, [r3, #16]
   308c0:	str	r5, [r3, #20]
   308c4:	str	ip, [r3, #32]
   308c8:	str	r4, [r7, #4]
   308cc:	beq	31308 <__assert_fail@plt+0x1f764>
   308d0:	ldr	r3, [sp, #24]
   308d4:	add	r9, r9, #1
   308d8:	cmp	r9, r3
   308dc:	bgt	311c8 <__assert_fail@plt+0x1f624>
   308e0:	mov	r7, r6
   308e4:	mov	sl, r1
   308e8:	ldr	r8, [r6]
   308ec:	b	306f8 <__assert_fail@plt+0x1eb54>
   308f0:	ldr	r4, [r5, #24]
   308f4:	mov	r1, r0
   308f8:	ldr	r6, [sp, #20]
   308fc:	ldr	r7, [sp, #32]
   30900:	add	r3, r4, #1
   30904:	mov	r0, r6
   30908:	str	r3, [r5, #24]
   3090c:	orr	r2, r7, #8388608	; 0x800000
   30910:	bl	26de8 <__assert_fail@plt+0x15244>
   30914:	ldr	r3, [r9, #40]	; 0x28
   30918:	ldrb	r2, [r6, #4]
   3091c:	add	r3, r3, r0
   30920:	cmp	r2, #9
   30924:	str	r3, [r9, #40]	; 0x28
   30928:	moveq	r5, #0
   3092c:	beq	310d0 <__assert_fail@plt+0x1f52c>
   30930:	ldr	r3, [sp, #200]	; 0xc8
   30934:	mov	r1, r5
   30938:	mov	r2, r6
   3093c:	add	r0, r3, #1
   30940:	ldr	r3, [sp, #204]	; 0xcc
   30944:	stm	sp, {r0, r3}
   30948:	mov	r3, r7
   3094c:	mov	r0, r9
   30950:	bl	32d00 <__assert_fail@plt+0x2115c>
   30954:	ldr	r3, [sp, #204]	; 0xcc
   30958:	mov	r5, r0
   3095c:	ldr	r3, [r3]
   30960:	cmp	r3, #0
   30964:	bne	30990 <__assert_fail@plt+0x1edec>
   30968:	ldr	r3, [sp, #20]
   3096c:	ldrb	r3, [r3, #4]
   30970:	cmp	r3, #9
   30974:	beq	310d0 <__assert_fail@plt+0x1f52c>
   30978:	cmp	r0, #0
   3097c:	beq	30984 <__assert_fail@plt+0x1ede0>
   30980:	bl	28054 <__assert_fail@plt+0x164b0>
   30984:	ldr	r2, [sp, #204]	; 0xcc
   30988:	mov	r3, #8
   3098c:	str	r3, [r2]
   30990:	mov	r3, #0
   30994:	str	r3, [sp, #28]
   30998:	ldr	r0, [sp, #28]
   3099c:	add	sp, sp, #164	; 0xa4
   309a0:	ldrd	r4, [sp]
   309a4:	ldrd	r6, [sp, #8]
   309a8:	ldrd	r8, [sp, #16]
   309ac:	ldrd	sl, [sp, #24]
   309b0:	add	sp, sp, #32
   309b4:	pop	{pc}		; (ldr pc, [sp], #4)
   309b8:	ldr	r3, [sp, #20]
   309bc:	ldr	r5, [r3]
   309c0:	movw	r3, #783	; 0x30f
   309c4:	tst	r5, r3
   309c8:	beq	30a28 <__assert_fail@plt+0x1ee84>
   309cc:	ldrb	r3, [sl, #88]	; 0x58
   309d0:	ands	r4, r3, #16
   309d4:	bne	30a28 <__assert_fail@plt+0x1ee84>
   309d8:	orr	r3, r3, #16
   309dc:	ands	r2, r3, #8
   309e0:	mov	r1, r3
   309e4:	strb	r3, [sl, #88]	; 0x58
   309e8:	bne	32764 <__assert_fail@plt+0x20bc0>
   309ec:	mov	r3, #0
   309f0:	movt	r3, #1023	; 0x3ff
   309f4:	tst	r1, #4
   309f8:	mvn	r1, #2013265921	; 0x78000001
   309fc:	strd	r2, [sl, #96]	; 0x60
   30a00:	mvn	r3, #-134217727	; 0xf8000001
   30a04:	str	r1, [sl, #104]	; 0x68
   30a08:	str	r3, [sl, #108]	; 0x6c
   30a0c:	beq	326e4 <__assert_fail@plt+0x20b40>
   30a10:	ldr	r3, [sp, #20]
   30a14:	str	r2, [sl, #112]	; 0x70
   30a18:	str	r2, [sl, #116]	; 0x74
   30a1c:	str	r2, [sl, #120]	; 0x78
   30a20:	str	r2, [sl, #124]	; 0x7c
   30a24:	ldr	r5, [r3]
   30a28:	sub	r3, r5, #256	; 0x100
   30a2c:	bics	r6, r3, #256	; 0x100
   30a30:	bne	31c88 <__assert_fail@plt+0x200e4>
   30a34:	cmp	r5, #256	; 0x100
   30a38:	beq	31e84 <__assert_fail@plt+0x202e0>
   30a3c:	ldr	r2, [sp, #20]
   30a40:	mov	r3, #5
   30a44:	str	r3, [r2]
   30a48:	ldr	r2, [sl, #64]	; 0x40
   30a4c:	cmp	r2, #31
   30a50:	beq	3267c <__assert_fail@plt+0x20ad8>
   30a54:	lsl	r3, r2, r3
   30a58:	add	r1, r2, #1
   30a5c:	ldr	r2, [sl, #56]	; 0x38
   30a60:	add	r4, r3, #4
   30a64:	add	ip, r2, r3
   30a68:	add	r3, r3, #16
   30a6c:	str	r1, [sl, #64]	; 0x40
   30a70:	add	r3, r2, r3
   30a74:	add	r4, r2, r4
   30a78:	ldr	r2, [sp, #20]
   30a7c:	mov	lr, #0
   30a80:	mvn	r5, #0
   30a84:	str	lr, [ip, #4]
   30a88:	str	lr, [ip, #8]
   30a8c:	str	lr, [ip, #12]
   30a90:	ldrd	r0, [r2]
   30a94:	strd	r0, [ip, #24]
   30a98:	ldrb	r2, [r3, #14]
   30a9c:	bic	r2, r2, #12
   30aa0:	strb	r2, [r3, #14]
   30aa4:	str	lr, [ip, #16]
   30aa8:	str	lr, [ip, #20]
   30aac:	str	r5, [ip, #32]
   30ab0:	ldr	r2, [sp, #20]
   30ab4:	mov	r3, #10
   30ab8:	str	r3, [r2]
   30abc:	ldr	r2, [sl, #64]	; 0x40
   30ac0:	cmp	r2, #31
   30ac4:	beq	32280 <__assert_fail@plt+0x206dc>
   30ac8:	ldr	r0, [sl, #56]	; 0x38
   30acc:	lsl	r3, r2, #5
   30ad0:	add	r2, r2, #1
   30ad4:	add	r5, r3, #4
   30ad8:	add	r1, r0, r3
   30adc:	add	r3, r3, #16
   30ae0:	str	r2, [sl, #64]	; 0x40
   30ae4:	add	r5, r0, r5
   30ae8:	add	r0, r0, r3
   30aec:	ldr	r3, [sp, #20]
   30af0:	mov	ip, #0
   30af4:	mvn	lr, #0
   30af8:	str	ip, [r1, #4]
   30afc:	str	ip, [r1, #8]
   30b00:	str	ip, [r1, #12]
   30b04:	ldrd	r2, [r3]
   30b08:	strd	r2, [r1, #24]
   30b0c:	ldrb	r3, [r0, #14]
   30b10:	bic	r3, r3, #12
   30b14:	strb	r3, [r0, #14]
   30b18:	str	ip, [r1, #16]
   30b1c:	str	ip, [r1, #20]
   30b20:	str	lr, [r1, #32]
   30b24:	mov	r2, #0
   30b28:	mov	r3, #0
   30b2c:	strd	r2, [sp, #128]	; 0x80
   30b30:	ldr	r2, [sl, #64]	; 0x40
   30b34:	cmp	r2, #31
   30b38:	beq	32254 <__assert_fail@plt+0x206b0>
   30b3c:	ldr	r0, [sl, #56]	; 0x38
   30b40:	lsl	r3, r2, #5
   30b44:	add	r2, r2, #1
   30b48:	add	r6, r3, #4
   30b4c:	add	ip, r0, r3
   30b50:	mov	lr, #0
   30b54:	str	r2, [sl, #64]	; 0x40
   30b58:	mov	r2, #10
   30b5c:	add	r3, r3, #16
   30b60:	str	lr, [ip, #4]
   30b64:	add	r1, r0, r3
   30b68:	add	r6, r0, r6
   30b6c:	strd	r4, [ip, #8]
   30b70:	mvn	r0, #0
   30b74:	cmp	r4, lr
   30b78:	str	r6, [sp, #28]
   30b7c:	strb	r2, [sp, #132]	; 0x84
   30b80:	ldrd	r2, [sp, #128]	; 0x80
   30b84:	strd	r2, [ip, #24]
   30b88:	ldrb	r3, [r1, #14]
   30b8c:	bic	r3, r3, #12
   30b90:	strb	r3, [r1, #14]
   30b94:	str	lr, [ip, #16]
   30b98:	str	lr, [ip, #20]
   30b9c:	str	r0, [ip, #32]
   30ba0:	beq	320f8 <__assert_fail@plt+0x20554>
   30ba4:	cmp	r5, lr
   30ba8:	str	r6, [r4]
   30bac:	beq	30dec <__assert_fail@plt+0x1f248>
   30bb0:	cmp	r6, lr
   30bb4:	str	r6, [r5]
   30bb8:	beq	30dec <__assert_fail@plt+0x1f248>
   30bbc:	mov	r1, r9
   30bc0:	ldr	r0, [sp, #20]
   30bc4:	ldr	r2, [sp, #32]
   30bc8:	bl	26de8 <__assert_fail@plt+0x15244>
   30bcc:	ldr	r3, [r9, #40]	; 0x28
   30bd0:	add	r3, r3, r0
   30bd4:	str	r3, [r9, #40]	; 0x28
   30bd8:	b	30998 <__assert_fail@plt+0x1edf4>
   30bdc:	sub	r1, r2, #33	; 0x21
   30be0:	movw	r3, #50748	; 0xc63c
   30be4:	movt	r3, #3
   30be8:	clz	r1, r1
   30bec:	lsr	r1, r1, #5
   30bf0:	movw	r2, #50676	; 0xc5f4
   30bf4:	movt	r2, #3
   30bf8:	str	r1, [sp]
   30bfc:	mov	r0, sl
   30c00:	ldr	r1, [sp, #204]	; 0xcc
   30c04:	str	r1, [sp, #4]
   30c08:	ldr	r1, [r9, #64]	; 0x40
   30c0c:	bl	2c17c <__assert_fail@plt+0x1a5d8>
   30c10:	ldr	r3, [sp, #204]	; 0xcc
   30c14:	str	r0, [sp, #28]
   30c18:	ldr	r2, [r3]
   30c1c:	clz	r3, r0
   30c20:	lsr	r3, r3, #5
   30c24:	cmp	r2, #0
   30c28:	moveq	r3, #0
   30c2c:	cmp	r3, #0
   30c30:	beq	30570 <__assert_fail@plt+0x1e9cc>
   30c34:	b	30990 <__assert_fail@plt+0x1edec>
   30c38:	ldr	r2, [sl, #64]	; 0x40
   30c3c:	cmp	r2, #31
   30c40:	beq	321d0 <__assert_fail@plt+0x2062c>
   30c44:	ldr	r0, [sl, #56]	; 0x38
   30c48:	lsl	r3, r2, #5
   30c4c:	add	r2, r2, #1
   30c50:	add	ip, r3, #4
   30c54:	add	r1, r0, r3
   30c58:	add	r3, r3, #16
   30c5c:	str	r2, [sl, #64]	; 0x40
   30c60:	adds	r2, r0, ip
   30c64:	add	r0, r0, r3
   30c68:	ldr	r3, [sp, #20]
   30c6c:	mov	r4, #0
   30c70:	mvn	r7, #0
   30c74:	str	r2, [sp, #28]
   30c78:	str	r4, [r1, #4]
   30c7c:	str	r4, [r1, #8]
   30c80:	str	r4, [r1, #12]
   30c84:	ldrd	r2, [r3]
   30c88:	strd	r2, [r1, #24]
   30c8c:	ldrb	r3, [r0, #14]
   30c90:	bic	r3, r3, #12
   30c94:	strb	r3, [r0, #14]
   30c98:	str	r4, [r1, #16]
   30c9c:	str	r4, [r1, #20]
   30ca0:	str	r7, [r1, #32]
   30ca4:	beq	30dec <__assert_fail@plt+0x1f248>
   30ca8:	ldr	r3, [sl, #92]	; 0x5c
   30cac:	cmp	r3, #1
   30cb0:	ble	30570 <__assert_fail@plt+0x1e9cc>
   30cb4:	ldr	r8, [sp, #20]
   30cb8:	ldr	r5, [sp, #28]
   30cbc:	ldr	r6, [sp, #32]
   30cc0:	b	30cd0 <__assert_fail@plt+0x1f12c>
   30cc4:	subs	r5, ip, #0
   30cc8:	str	ip, [fp]
   30ccc:	beq	30dec <__assert_fail@plt+0x1f248>
   30cd0:	ldr	r3, [r9, #40]	; 0x28
   30cd4:	ldr	r2, [r9, #56]	; 0x38
   30cd8:	cmp	r2, r3
   30cdc:	ble	31e7c <__assert_fail@plt+0x202d8>
   30ce0:	ldr	r2, [r9, #28]
   30ce4:	cmp	r3, r2
   30ce8:	beq	31e7c <__assert_fail@plt+0x202d8>
   30cec:	ldr	r2, [r9, #8]
   30cf0:	ldr	r3, [r2, r3, lsl #2]
   30cf4:	cmn	r3, #1
   30cf8:	bne	31e7c <__assert_fail@plt+0x202d8>
   30cfc:	mov	r2, r6
   30d00:	mov	r1, r9
   30d04:	mov	r0, r8
   30d08:	bl	26de8 <__assert_fail@plt+0x15244>
   30d0c:	ldr	r3, [r9, #40]	; 0x28
   30d10:	add	r3, r3, r0
   30d14:	str	r3, [r9, #40]	; 0x28
   30d18:	ldr	r2, [sl, #64]	; 0x40
   30d1c:	cmp	r2, #31
   30d20:	beq	31e40 <__assert_fail@plt+0x2029c>
   30d24:	ldr	fp, [sl, #56]	; 0x38
   30d28:	lsl	r3, r2, #5
   30d2c:	add	r2, r2, #1
   30d30:	add	r0, r3, #4
   30d34:	add	ip, fp, r3
   30d38:	add	r3, r3, #16
   30d3c:	str	r2, [sl, #64]	; 0x40
   30d40:	add	r1, fp, r3
   30d44:	add	fp, fp, r0
   30d48:	str	r4, [ip, #4]
   30d4c:	str	r4, [ip, #8]
   30d50:	str	r4, [ip, #12]
   30d54:	ldrd	r2, [r8]
   30d58:	strd	r2, [ip, #24]
   30d5c:	ldrb	r3, [r1, #14]
   30d60:	bic	r3, r3, #12
   30d64:	strb	r3, [r1, #14]
   30d68:	str	r4, [ip, #16]
   30d6c:	str	r4, [ip, #20]
   30d70:	str	r7, [ip, #32]
   30d74:	mov	r2, #0
   30d78:	mov	r3, #0
   30d7c:	strd	r2, [sp, #128]	; 0x80
   30d80:	add	r2, sp, #128	; 0x80
   30d84:	ldr	r1, [sl, #64]	; 0x40
   30d88:	cmp	r1, #31
   30d8c:	beq	31e0c <__assert_fail@plt+0x20268>
   30d90:	ldr	r0, [sl, #56]	; 0x38
   30d94:	lsl	r3, r1, #5
   30d98:	add	lr, r1, #1
   30d9c:	add	ip, r3, #4
   30da0:	add	r1, r0, r3
   30da4:	str	lr, [sl, #64]	; 0x40
   30da8:	mov	lr, #16
   30dac:	add	r3, r3, lr
   30db0:	add	ip, r0, ip
   30db4:	add	r0, r0, r3
   30db8:	stmib	r1, {r4, r5, fp}
   30dbc:	cmp	fp, #0
   30dc0:	strb	lr, [sp, #132]	; 0x84
   30dc4:	ldrd	r2, [r2]
   30dc8:	strd	r2, [r1, #24]
   30dcc:	ldrb	r3, [r0, #14]
   30dd0:	bic	r3, r3, #12
   30dd4:	strb	r3, [r0, #14]
   30dd8:	str	r4, [r1, #16]
   30ddc:	str	r4, [r1, #20]
   30de0:	str	r7, [r1, #32]
   30de4:	str	ip, [r5]
   30de8:	bne	30cc4 <__assert_fail@plt+0x1f120>
   30dec:	mov	r2, #0
   30df0:	mov	r3, #12
   30df4:	str	r2, [sp, #28]
   30df8:	ldr	r2, [sp, #204]	; 0xcc
   30dfc:	str	r3, [r2]
   30e00:	b	30998 <__assert_fail@plt+0x1edf4>
   30e04:	ldr	r2, [sl, #64]	; 0x40
   30e08:	cmp	r2, #31
   30e0c:	beq	32114 <__assert_fail@plt+0x20570>
   30e10:	ldr	r0, [sl, #56]	; 0x38
   30e14:	lsl	r3, r2, #5
   30e18:	add	r2, r2, #1
   30e1c:	add	lr, r3, #4
   30e20:	add	r1, r0, r3
   30e24:	add	r3, r3, #16
   30e28:	str	r2, [sl, #64]	; 0x40
   30e2c:	adds	r2, r0, lr
   30e30:	add	r0, r0, r3
   30e34:	ldr	r3, [sp, #20]
   30e38:	mov	ip, #0
   30e3c:	mvn	lr, #0
   30e40:	str	r2, [sp, #28]
   30e44:	str	ip, [r1, #4]
   30e48:	str	ip, [r1, #8]
   30e4c:	str	ip, [r1, #12]
   30e50:	ldrd	r2, [r3]
   30e54:	strd	r2, [r1, #24]
   30e58:	ldrb	r3, [r0, #14]
   30e5c:	bic	r3, r3, #12
   30e60:	strb	r3, [r0, #14]
   30e64:	str	ip, [r1, #16]
   30e68:	str	ip, [r1, #20]
   30e6c:	str	lr, [r1, #32]
   30e70:	beq	30dec <__assert_fail@plt+0x1f248>
   30e74:	ldr	r3, [sl, #92]	; 0x5c
   30e78:	cmp	r3, #1
   30e7c:	ble	30570 <__assert_fail@plt+0x1e9cc>
   30e80:	ldrb	r3, [sl, #88]	; 0x58
   30e84:	orr	r3, r3, #2
   30e88:	strb	r3, [sl, #88]	; 0x58
   30e8c:	b	30570 <__assert_fail@plt+0x1e9cc>
   30e90:	ldr	r3, [sp, #20]
   30e94:	mov	r4, #1
   30e98:	ldr	r2, [sl, #84]	; 0x54
   30e9c:	ldr	r3, [r3]
   30ea0:	lsl	r3, r4, r3
   30ea4:	ands	r2, r3, r2
   30ea8:	beq	32140 <__assert_fail@plt+0x2059c>
   30eac:	ldr	r1, [sl, #64]	; 0x40
   30eb0:	ldr	r2, [sl, #80]	; 0x50
   30eb4:	cmp	r1, #31
   30eb8:	orr	r3, r2, r3
   30ebc:	str	r3, [sl, #80]	; 0x50
   30ec0:	beq	3222c <__assert_fail@plt+0x20688>
   30ec4:	ldr	r0, [sl, #56]	; 0x38
   30ec8:	lsl	r3, r1, #5
   30ecc:	add	r4, r1, #1
   30ed0:	add	r2, r3, #4
   30ed4:	add	r1, r0, r3
   30ed8:	add	r3, r3, #16
   30edc:	str	r4, [sl, #64]	; 0x40
   30ee0:	adds	r2, r0, r2
   30ee4:	add	r0, r0, r3
   30ee8:	ldr	r3, [sp, #20]
   30eec:	mov	ip, #0
   30ef0:	mvn	lr, #0
   30ef4:	str	r2, [sp, #28]
   30ef8:	str	ip, [r1, #4]
   30efc:	str	ip, [r1, #8]
   30f00:	str	ip, [r1, #12]
   30f04:	ldrd	r2, [r3]
   30f08:	strd	r2, [r1, #24]
   30f0c:	ldrb	r3, [r0, #14]
   30f10:	bic	r3, r3, #12
   30f14:	strb	r3, [r0, #14]
   30f18:	str	ip, [r1, #16]
   30f1c:	str	ip, [r1, #20]
   30f20:	str	lr, [r1, #32]
   30f24:	beq	30dec <__assert_fail@plt+0x1f248>
   30f28:	ldrb	r3, [sl, #88]	; 0x58
   30f2c:	ldr	r2, [sl, #76]	; 0x4c
   30f30:	orr	r3, r3, #2
   30f34:	add	r2, r2, #1
   30f38:	str	r2, [sl, #76]	; 0x4c
   30f3c:	strb	r3, [sl, #88]	; 0x58
   30f40:	b	30570 <__assert_fail@plt+0x1e9cc>
   30f44:	mov	r6, #0
   30f48:	mov	r1, #1
   30f4c:	mov	r0, #32
   30f50:	str	r6, [sp, #68]	; 0x44
   30f54:	bl	38fb4 <__assert_fail@plt+0x27410>
   30f58:	mov	r4, r0
   30f5c:	mov	r1, #1
   30f60:	mov	r0, #40	; 0x28
   30f64:	bl	38fb4 <__assert_fail@plt+0x27410>
   30f68:	clz	r5, r0
   30f6c:	cmp	r4, r6
   30f70:	str	r0, [sp, #16]
   30f74:	lsr	r5, r5, #5
   30f78:	moveq	r5, #1
   30f7c:	cmp	r5, r6
   30f80:	bne	32154 <__assert_fail@plt+0x205b0>
   30f84:	ldr	r6, [sp, #20]
   30f88:	mov	r1, r9
   30f8c:	ldr	r2, [sp, #32]
   30f90:	mov	r0, r6
   30f94:	bl	23930 <__assert_fail@plt+0x11d8c>
   30f98:	ldrb	r3, [r6, #4]
   30f9c:	mov	fp, r0
   30fa0:	cmp	r3, #2
   30fa4:	beq	32104 <__assert_fail@plt+0x20560>
   30fa8:	cmp	r3, #25
   30fac:	strne	r5, [sp, #44]	; 0x2c
   30fb0:	beq	31d34 <__assert_fail@plt+0x20190>
   30fb4:	cmp	r3, #21
   30fb8:	beq	31d24 <__assert_fail@plt+0x20180>
   30fbc:	ldr	r5, [sp, #20]
   30fc0:	mov	r3, #0
   30fc4:	mov	r0, #1
   30fc8:	mov	r6, #3
   30fcc:	str	sl, [sp, #24]
   30fd0:	ldr	r2, [sp, #32]
   30fd4:	str	r3, [sp, #36]	; 0x24
   30fd8:	str	r3, [sp, #40]	; 0x28
   30fdc:	add	r3, sp, #96	; 0x60
   30fe0:	str	r3, [sp, #28]
   30fe4:	ubfx	r1, r2, #16, #1
   30fe8:	mov	sl, r2
   30fec:	str	r1, [sp, #48]	; 0x30
   30ff0:	ldr	ip, [sp, #28]
   30ff4:	mov	r3, fp
   30ff8:	mov	r2, r5
   30ffc:	mov	r1, r9
   31000:	str	sl, [sp]
   31004:	str	r0, [sp, #4]
   31008:	add	r0, sp, #72	; 0x48
   3100c:	str	r6, [sp, #72]	; 0x48
   31010:	str	ip, [sp, #76]	; 0x4c
   31014:	bl	27aa4 <__assert_fail@plt+0x15f00>
   31018:	cmp	r0, #0
   3101c:	bne	31e6c <__assert_fail@plt+0x202c8>
   31020:	mov	r2, sl
   31024:	mov	r1, r9
   31028:	mov	r0, r5
   3102c:	bl	23930 <__assert_fail@plt+0x11d8c>
   31030:	ldr	r3, [sp, #72]	; 0x48
   31034:	mov	fp, r0
   31038:	sub	r2, r3, #2
   3103c:	bics	r2, r2, #2
   31040:	beq	31058 <__assert_fail@plt+0x1f4b4>
   31044:	ldrb	r2, [r5, #4]
   31048:	cmp	r2, #2
   3104c:	beq	31da8 <__assert_fail@plt+0x20204>
   31050:	cmp	r2, #22
   31054:	beq	31f08 <__assert_fail@plt+0x20364>
   31058:	cmp	r3, #4
   3105c:	ldrls	pc, [pc, r3, lsl #2]
   31060:	b	31bfc <__assert_fail@plt+0x20058>
   31064:	strdeq	r1, [r3], -r0
   31068:	andeq	r1, r3, r0, asr #23
   3106c:	andeq	r1, r3, r4, ror r1
   31070:	andeq	r1, r3, r4, ror r1
   31074:	strdeq	r1, [r3], -ip
   31078:	sub	r1, r2, #35	; 0x23
   3107c:	movw	r3, #49420	; 0xc10c
   31080:	movt	r3, #3
   31084:	clz	r1, r1
   31088:	movw	r2, #50692	; 0xc604
   3108c:	movt	r2, #3
   31090:	lsr	r1, r1, #5
   31094:	b	30bf8 <__assert_fail@plt+0x1f054>
   31098:	mov	r2, #0
   3109c:	mov	r3, #5
   310a0:	str	r2, [sp, #28]
   310a4:	ldr	r2, [sp, #204]	; 0xcc
   310a8:	str	r3, [r2]
   310ac:	b	30998 <__assert_fail@plt+0x1edf4>
   310b0:	ldr	r3, [sp, #32]
   310b4:	ands	r3, r3, #131072	; 0x20000
   310b8:	bne	304f4 <__assert_fail@plt+0x1e950>
   310bc:	str	r3, [sp, #28]
   310c0:	mov	r2, #16
   310c4:	ldr	r3, [sp, #204]	; 0xcc
   310c8:	str	r2, [r3]
   310cc:	b	30998 <__assert_fail@plt+0x1edf4>
   310d0:	cmp	r4, #8
   310d4:	bls	31bac <__assert_fail@plt+0x20008>
   310d8:	mov	r3, #0
   310dc:	mov	r2, #0
   310e0:	strd	r2, [sp, #128]	; 0x80
   310e4:	ldr	r3, [sl, #64]	; 0x40
   310e8:	cmp	r3, #31
   310ec:	beq	321a4 <__assert_fail@plt+0x20600>
   310f0:	ldr	r0, [sl, #56]	; 0x38
   310f4:	lsl	r1, r3, #5
   310f8:	add	r2, r3, #1
   310fc:	add	r6, r1, #4
   31100:	add	r3, r0, r1
   31104:	mov	ip, #0
   31108:	str	r2, [sl, #64]	; 0x40
   3110c:	mov	lr, #17
   31110:	add	r8, r0, r6
   31114:	str	ip, [r3, #4]
   31118:	add	r2, r1, #16
   3111c:	mvn	fp, #0
   31120:	str	r5, [r3, #8]
   31124:	add	r2, r0, r2
   31128:	cmp	r5, ip
   3112c:	str	ip, [r3, #12]
   31130:	str	r8, [sp, #28]
   31134:	strb	lr, [sp, #132]	; 0x84
   31138:	ldrd	r6, [sp, #128]	; 0x80
   3113c:	strd	r6, [r3, #24]
   31140:	ldrb	lr, [r2, #14]
   31144:	bic	lr, lr, #12
   31148:	strb	lr, [r2, #14]
   3114c:	str	ip, [r3, #16]
   31150:	str	ip, [r3, #20]
   31154:	str	fp, [r3, #32]
   31158:	ldr	r3, [sp, #28]
   3115c:	strne	r8, [r5]
   31160:	cmp	r3, #0
   31164:	beq	30dec <__assert_fail@plt+0x1f248>
   31168:	add	r1, r0, r1
   3116c:	str	r4, [r1, #24]
   31170:	b	30570 <__assert_fail@plt+0x1e9cc>
   31174:	ldr	r7, [sp, #76]	; 0x4c
   31178:	mov	r0, r7
   3117c:	bl	11988 <strlen@plt>
   31180:	cmp	r0, #1
   31184:	bne	32190 <__assert_fail@plt+0x205ec>
   31188:	ldr	r1, [sp, #204]	; 0xcc
   3118c:	mov	r2, #0
   31190:	ldrb	r3, [r7]
   31194:	str	r2, [r1]
   31198:	asr	r1, r3, #5
   3119c:	and	r3, r3, #31
   311a0:	ldr	r2, [r4, r1, lsl #2]
   311a4:	orr	r3, r2, r0, lsl r3
   311a8:	str	r3, [r4, r1, lsl #2]
   311ac:	ldrb	r3, [r5, #4]
   311b0:	cmp	r3, #2
   311b4:	beq	31da8 <__assert_fail@plt+0x20204>
   311b8:	cmp	r3, #21
   311bc:	beq	322d8 <__assert_fail@plt+0x20734>
   311c0:	mov	r0, #0
   311c4:	b	30ff0 <__assert_fail@plt+0x1f44c>
   311c8:	ldr	r9, [sp, #44]	; 0x2c
   311cc:	mov	sl, r1
   311d0:	mov	fp, r2
   311d4:	ldr	r3, [sp, #40]	; 0x28
   311d8:	cmp	r3, #0
   311dc:	beq	315a8 <__assert_fail@plt+0x1fa04>
   311e0:	mov	r3, #0
   311e4:	mov	r2, #0
   311e8:	strd	r2, [fp]
   311ec:	ldr	r3, [sl, #64]	; 0x40
   311f0:	cmp	r3, #31
   311f4:	beq	31b40 <__assert_fail@plt+0x1ff9c>
   311f8:	ldr	r0, [sl, #56]	; 0x38
   311fc:	lsl	r2, r3, #5
   31200:	add	r3, r3, #1
   31204:	add	ip, r2, #4
   31208:	ldr	r6, [sp, #40]	; 0x28
   3120c:	add	r1, r0, r2
   31210:	add	ip, r0, ip
   31214:	str	r3, [sl, #64]	; 0x40
   31218:	mov	r3, #16
   3121c:	mvn	lr, #0
   31220:	add	r2, r2, r3
   31224:	add	r0, r0, r2
   31228:	stmib	r1, {r5, r6}
   3122c:	str	r4, [r1, #12]
   31230:	strb	r3, [sp, #132]	; 0x84
   31234:	ldrd	r2, [fp]
   31238:	strd	r2, [r1, #24]
   3123c:	ldrb	r3, [r0, #14]
   31240:	bic	r3, r3, #12
   31244:	strb	r3, [r0, #14]
   31248:	ldr	r3, [sp, #204]	; 0xcc
   3124c:	str	r5, [r1, #16]
   31250:	str	r5, [r1, #20]
   31254:	str	lr, [r1, #32]
   31258:	str	ip, [r6]
   3125c:	ldr	r3, [r3]
   31260:	str	ip, [r4]
   31264:	cmp	r3, #0
   31268:	bne	31b20 <__assert_fail@plt+0x1ff7c>
   3126c:	str	ip, [sp, #28]
   31270:	ldr	r3, [sp, #36]	; 0x24
   31274:	cmp	r3, #0
   31278:	ldr	r3, [sp, #20]
   3127c:	ldrb	r7, [r3, #4]
   31280:	beq	305ac <__assert_fail@plt+0x1ea08>
   31284:	cmp	r7, #23
   31288:	cmpne	r7, #11
   3128c:	bne	305ac <__assert_fail@plt+0x1ea08>
   31290:	ldr	r3, [sp, #28]
   31294:	cmp	r3, #0
   31298:	beq	312a4 <__assert_fail@plt+0x1f700>
   3129c:	mov	r0, r3
   312a0:	bl	28054 <__assert_fail@plt+0x164b0>
   312a4:	mov	r2, #0
   312a8:	mov	r3, #13
   312ac:	str	r2, [sp, #28]
   312b0:	ldr	r2, [sp, #204]	; 0xcc
   312b4:	str	r3, [r2]
   312b8:	b	30998 <__assert_fail@plt+0x1edf4>
   312bc:	mov	r3, r2
   312c0:	add	fp, r8, #8
   312c4:	b	30704 <__assert_fail@plt+0x1eb60>
   312c8:	mov	r0, #996	; 0x3e4
   312cc:	bl	39028 <__assert_fail@plt+0x27484>
   312d0:	cmp	r0, #0
   312d4:	beq	31494 <__assert_fail@plt+0x1f8f0>
   312d8:	ldr	r1, [sl, #56]	; 0x38
   312dc:	mov	r2, #1
   312e0:	mov	lr, #4
   312e4:	mov	r3, #0
   312e8:	str	r1, [r0]
   312ec:	str	r0, [sl, #56]	; 0x38
   312f0:	b	30724 <__assert_fail@plt+0x1eb80>
   312f4:	mov	r2, r6
   312f8:	mov	r6, r0
   312fc:	str	sl, [sp, #16]
   31300:	b	307c8 <__assert_fail@plt+0x1ec24>
   31304:	str	r0, [r1]
   31308:	ldr	r2, [sp, #204]	; 0xcc
   3130c:	mov	r3, #12
   31310:	str	r3, [r2]
   31314:	mov	r3, #0
   31318:	ldr	r0, [sp, #28]
   3131c:	str	r3, [sp, #28]
   31320:	bl	28054 <__assert_fail@plt+0x164b0>
   31324:	b	30998 <__assert_fail@plt+0x1edf4>
   31328:	mov	r1, r9
   3132c:	ldr	r0, [sp, #20]
   31330:	ldr	r2, [sp, #32]
   31334:	bl	26de8 <__assert_fail@plt+0x15244>
   31338:	ldr	r3, [r9, #40]	; 0x28
   3133c:	ldr	r2, [sp, #28]
   31340:	add	r0, r3, r0
   31344:	cmp	r2, #0
   31348:	str	r0, [r9, #40]	; 0x28
   3134c:	beq	31560 <__assert_fail@plt+0x1f9bc>
   31350:	ldrb	r3, [r2, #24]
   31354:	mov	r7, r2
   31358:	add	fp, sp, #128	; 0x80
   3135c:	cmp	r3, #17
   31360:	mov	r3, #0
   31364:	str	r3, [sp, #40]	; 0x28
   31368:	mov	r3, #1
   3136c:	str	r3, [sp, #24]
   31370:	beq	314c0 <__assert_fail@plt+0x1f91c>
   31374:	mov	r6, #10
   31378:	b	3065c <__assert_fail@plt+0x1eab8>
   3137c:	mov	r0, #996	; 0x3e4
   31380:	str	r2, [sp, #48]	; 0x30
   31384:	bl	39028 <__assert_fail@plt+0x27484>
   31388:	cmp	r0, #0
   3138c:	beq	31308 <__assert_fail@plt+0x1f764>
   31390:	ldr	r2, [sp, #16]
   31394:	mov	ip, #1
   31398:	mov	r8, #4
   3139c:	mov	r3, #0
   313a0:	ldr	r1, [sp, #16]
   313a4:	ldr	lr, [r2, #56]	; 0x38
   313a8:	str	lr, [r0]
   313ac:	str	r0, [r2, #56]	; 0x38
   313b0:	ldr	r2, [sp, #48]	; 0x30
   313b4:	b	307f4 <__assert_fail@plt+0x1ec50>
   313b8:	mov	r0, #996	; 0x3e4
   313bc:	str	r2, [sp, #48]	; 0x30
   313c0:	bl	39028 <__assert_fail@plt+0x27484>
   313c4:	cmp	r0, #0
   313c8:	beq	31308 <__assert_fail@plt+0x1f764>
   313cc:	ldr	r2, [sp, #16]
   313d0:	mov	lr, #1
   313d4:	mov	r4, #4
   313d8:	mov	ip, #0
   313dc:	ldr	r1, [sp, #16]
   313e0:	ldr	r3, [r2, #56]	; 0x38
   313e4:	str	r3, [r0]
   313e8:	str	r0, [r2, #56]	; 0x38
   313ec:	ldr	r2, [sp, #48]	; 0x30
   313f0:	b	3087c <__assert_fail@plt+0x1ecd8>
   313f4:	ldr	r8, [sp, #20]
   313f8:	mvn	fp, #0
   313fc:	movw	r7, #32816	; 0x8030
   31400:	mov	r1, r9
   31404:	mov	r0, r8
   31408:	ldr	r2, [sp, #32]
   3140c:	bl	26de8 <__assert_fail@plt+0x15244>
   31410:	ldr	r2, [r9, #40]	; 0x28
   31414:	ldrb	r3, [r8, #4]
   31418:	ldrb	r1, [r8]
   3141c:	add	r0, r2, r0
   31420:	cmp	r3, #2
   31424:	str	r0, [r9, #40]	; 0x28
   31428:	beq	31ae8 <__assert_fail@plt+0x1ff44>
   3142c:	cmp	r3, #24
   31430:	beq	315b0 <__assert_fail@plt+0x1fa0c>
   31434:	cmp	r1, #44	; 0x2c
   31438:	beq	31654 <__assert_fail@plt+0x1fab0>
   3143c:	cmp	r3, #1
   31440:	beq	3144c <__assert_fail@plt+0x1f8a8>
   31444:	mvn	fp, #1
   31448:	b	31400 <__assert_fail@plt+0x1f85c>
   3144c:	sub	r2, r1, #48	; 0x30
   31450:	uxtb	r0, r2
   31454:	cmp	r0, #9
   31458:	movhi	r3, #0
   3145c:	movls	r3, #1
   31460:	cmn	fp, #2
   31464:	moveq	r3, #0
   31468:	cmp	r3, #0
   3146c:	beq	31444 <__assert_fail@plt+0x1f8a0>
   31470:	cmn	fp, #1
   31474:	add	r3, fp, fp, lsl #2
   31478:	moveq	fp, r2
   3147c:	beq	31400 <__assert_fail@plt+0x1f85c>
   31480:	add	fp, r1, r3, lsl #1
   31484:	cmp	fp, r7
   31488:	movge	fp, r7
   3148c:	sub	fp, fp, #48	; 0x30
   31490:	b	31400 <__assert_fail@plt+0x1f85c>
   31494:	mov	r2, r6
   31498:	mov	r6, r0
   3149c:	str	r0, [fp]
   314a0:	str	sl, [sp, #16]
   314a4:	b	307c8 <__assert_fail@plt+0x1ec24>
   314a8:	mov	r3, #0
   314ac:	add	fp, sp, #128	; 0x80
   314b0:	mov	r8, r3
   314b4:	str	r3, [sp, #40]	; 0x28
   314b8:	mvn	r3, #0
   314bc:	str	r3, [sp, #24]
   314c0:	mov	r3, r7
   314c4:	ldr	ip, [r7, #20]
   314c8:	b	314d0 <__assert_fail@plt+0x1f92c>
   314cc:	mov	r3, r2
   314d0:	ldr	r2, [r3, #4]
   314d4:	cmp	r2, #0
   314d8:	bne	314cc <__assert_fail@plt+0x1f928>
   314dc:	ldr	r2, [r3, #8]
   314e0:	cmp	r2, #0
   314e4:	bne	314cc <__assert_fail@plt+0x1f928>
   314e8:	b	31520 <__assert_fail@plt+0x1f97c>
   314ec:	ldr	r1, [r3]
   314f0:	cmp	r1, #0
   314f4:	beq	31550 <__assert_fail@plt+0x1f9ac>
   314f8:	ldr	r2, [r1, #8]
   314fc:	sub	r0, r3, r2
   31500:	cmp	r2, #0
   31504:	clz	r0, r0
   31508:	mov	r3, r1
   3150c:	lsr	r0, r0, #5
   31510:	moveq	r1, #1
   31514:	movne	r1, r0
   31518:	cmp	r1, #0
   3151c:	beq	314cc <__assert_fail@plt+0x1f928>
   31520:	ldrb	r2, [r3, #24]
   31524:	cmp	r2, #17
   31528:	bne	314ec <__assert_fail@plt+0x1f948>
   3152c:	ldr	r2, [r3, #20]
   31530:	cmp	ip, r2
   31534:	bne	314ec <__assert_fail@plt+0x1f948>
   31538:	ldrb	r2, [r3, #26]
   3153c:	ldr	r1, [r3]
   31540:	orr	r2, r2, #8
   31544:	cmp	r1, #0
   31548:	strb	r2, [r3, #26]
   3154c:	bne	314f8 <__assert_fail@plt+0x1f954>
   31550:	ldr	r3, [sp, #24]
   31554:	cmn	r3, #1
   31558:	bne	31374 <__assert_fail@plt+0x1f7d0>
   3155c:	b	30650 <__assert_fail@plt+0x1eaac>
   31560:	ldr	r3, [sp, #204]	; 0xcc
   31564:	ldr	r3, [r3]
   31568:	cmp	r3, #0
   3156c:	bne	30990 <__assert_fail@plt+0x1edec>
   31570:	mov	r3, #0
   31574:	str	r3, [sp, #28]
   31578:	b	31270 <__assert_fail@plt+0x1f6cc>
   3157c:	mov	r0, #996	; 0x3e4
   31580:	bl	39028 <__assert_fail@plt+0x27484>
   31584:	subs	r4, r0, #0
   31588:	beq	31308 <__assert_fail@plt+0x1f764>
   3158c:	ldr	r2, [sl, #56]	; 0x38
   31590:	mov	r1, #1
   31594:	mov	r0, #4
   31598:	mov	r3, #0
   3159c:	str	r2, [r4]
   315a0:	str	r4, [sl, #56]	; 0x38
   315a4:	b	30684 <__assert_fail@plt+0x1eae0>
   315a8:	str	r4, [sp, #28]
   315ac:	b	31270 <__assert_fail@plt+0x1f6cc>
   315b0:	cmn	fp, #1
   315b4:	str	fp, [sp, #24]
   315b8:	beq	31638 <__assert_fail@plt+0x1fa94>
   315bc:	cmn	fp, #2
   315c0:	movne	r8, fp
   315c4:	beq	31d98 <__assert_fail@plt+0x201f4>
   315c8:	ldr	r3, [sp, #24]
   315cc:	cmp	r3, #32768	; 0x8000
   315d0:	movlt	r4, #0
   315d4:	movge	r4, #1
   315d8:	cmp	r4, #0
   315dc:	bne	3172c <__assert_fail@plt+0x1fb88>
   315e0:	mov	r1, r9
   315e4:	ldr	r0, [sp, #20]
   315e8:	ldr	r2, [sp, #32]
   315ec:	bl	26de8 <__assert_fail@plt+0x15244>
   315f0:	ldr	r3, [r9, #40]	; 0x28
   315f4:	ldr	r2, [sp, #28]
   315f8:	add	r0, r3, r0
   315fc:	cmp	r2, #0
   31600:	str	r0, [r9, #40]	; 0x28
   31604:	beq	31560 <__assert_fail@plt+0x1f9bc>
   31608:	ldr	r3, [sp, #24]
   3160c:	orrs	r3, r8, r3
   31610:	bne	3173c <__assert_fail@plt+0x1fb98>
   31614:	mov	r0, r2
   31618:	bl	28054 <__assert_fail@plt+0x164b0>
   3161c:	ldr	r3, [sp, #204]	; 0xcc
   31620:	ldr	r3, [r3]
   31624:	cmp	r3, #0
   31628:	beq	31570 <__assert_fail@plt+0x1f9cc>
   3162c:	b	31314 <__assert_fail@plt+0x1f770>
   31630:	cmp	r3, #2
   31634:	beq	31b84 <__assert_fail@plt+0x1ffe0>
   31638:	ldr	r2, [sp, #204]	; 0xcc
   3163c:	mov	r3, #10
   31640:	str	r3, [r2]
   31644:	ldr	r3, [sp, #28]
   31648:	cmp	r3, #0
   3164c:	beq	30990 <__assert_fail@plt+0x1edec>
   31650:	b	31314 <__assert_fail@plt+0x1f770>
   31654:	cmn	fp, #1
   31658:	str	fp, [sp, #24]
   3165c:	bne	31ad4 <__assert_fail@plt+0x1ff30>
   31660:	cmp	r3, #1
   31664:	bne	31638 <__assert_fail@plt+0x1fa94>
   31668:	mov	r8, #0
   3166c:	mvn	r3, #0
   31670:	ldr	fp, [sp, #20]
   31674:	movw	r7, #32816	; 0x8030
   31678:	str	r3, [sp, #24]
   3167c:	mov	r3, r6
   31680:	mov	r6, r4
   31684:	mov	r4, r8
   31688:	mov	r8, r9
   3168c:	mov	r9, r3
   31690:	mov	r1, r8
   31694:	mov	r0, fp
   31698:	ldr	r2, [sp, #32]
   3169c:	bl	26de8 <__assert_fail@plt+0x15244>
   316a0:	ldr	r2, [r8, #40]	; 0x28
   316a4:	ldrb	r1, [fp, #4]
   316a8:	ldrb	ip, [fp]
   316ac:	add	r0, r2, r0
   316b0:	cmp	r1, #2
   316b4:	str	r0, [r8, #40]	; 0x28
   316b8:	beq	31b6c <__assert_fail@plt+0x1ffc8>
   316bc:	cmp	r1, #24
   316c0:	cmpne	ip, #44	; 0x2c
   316c4:	beq	316dc <__assert_fail@plt+0x1fb38>
   316c8:	cmp	r1, #1
   316cc:	beq	31a84 <__assert_fail@plt+0x1fee0>
   316d0:	mvn	r3, #1
   316d4:	str	r3, [sp, #24]
   316d8:	b	31690 <__assert_fail@plt+0x1faec>
   316dc:	mov	r2, r9
   316e0:	mov	r9, r8
   316e4:	mov	r8, r4
   316e8:	mov	r4, r6
   316ec:	mov	r6, r2
   316f0:	ldr	r2, [sp, #24]
   316f4:	cmn	r2, #2
   316f8:	beq	31d98 <__assert_fail@plt+0x201f4>
   316fc:	cmn	r2, #1
   31700:	cmpne	r8, r2
   31704:	bgt	31638 <__assert_fail@plt+0x1fa94>
   31708:	cmp	r1, #24
   3170c:	bne	31638 <__assert_fail@plt+0x1fa94>
   31710:	cmn	r2, #1
   31714:	bne	315c8 <__assert_fail@plt+0x1fa24>
   31718:	cmp	r8, #32768	; 0x8000
   3171c:	movlt	r4, #0
   31720:	movge	r4, #1
   31724:	cmp	r4, #0
   31728:	beq	315e0 <__assert_fail@plt+0x1fa3c>
   3172c:	ldr	r2, [sp, #204]	; 0xcc
   31730:	mov	r3, #15
   31734:	str	r3, [r2]
   31738:	b	31644 <__assert_fail@plt+0x1faa0>
   3173c:	cmp	r8, #0
   31740:	ble	32a94 <__assert_fail@plt+0x20ef0>
   31744:	cmp	r8, #1
   31748:	beq	32aa0 <__assert_fail@plt+0x20efc>
   3174c:	ldr	r4, [r2]
   31750:	mov	r3, #2
   31754:	mov	r6, r2
   31758:	add	fp, sp, #128	; 0x80
   3175c:	str	r8, [sp, #16]
   31760:	mov	r8, r3
   31764:	str	r9, [sp, #40]	; 0x28
   31768:	mov	r9, r2
   3176c:	mov	r7, fp
   31770:	b	31778 <__assert_fail@plt+0x1fbd4>
   31774:	mov	r6, r3
   31778:	ldr	r2, [sl, #64]	; 0x40
   3177c:	cmp	r2, #31
   31780:	beq	319d8 <__assert_fail@plt+0x1fe34>
   31784:	ldr	r0, [sl, #56]	; 0x38
   31788:	lsl	r3, r2, #5
   3178c:	add	r2, r2, #1
   31790:	add	lr, r3, #4
   31794:	add	ip, r0, r3
   31798:	add	r3, r3, #16
   3179c:	str	r2, [sl, #64]	; 0x40
   317a0:	add	r1, r0, r3
   317a4:	add	r0, r0, lr
   317a8:	str	r5, [ip, #4]
   317ac:	mvn	lr, #0
   317b0:	cmp	r0, #0
   317b4:	str	r5, [ip, #8]
   317b8:	str	r5, [ip, #12]
   317bc:	ldrd	r2, [r6, #20]
   317c0:	strd	r2, [ip, #24]
   317c4:	ldrb	r3, [r1, #14]
   317c8:	bic	r3, r3, #12
   317cc:	strb	r3, [r1, #14]
   317d0:	str	r5, [ip, #16]
   317d4:	str	r5, [ip, #20]
   317d8:	str	lr, [ip, #32]
   317dc:	str	r0, [r7]
   317e0:	beq	31a10 <__assert_fail@plt+0x1fe6c>
   317e4:	str	r4, [ip, #4]
   317e8:	ldr	r4, [r7]
   317ec:	ldrb	r3, [r4, #26]
   317f0:	orr	r3, r3, #4
   317f4:	strb	r3, [r4, #26]
   317f8:	ldr	r3, [r6, #4]
   317fc:	cmp	r3, #0
   31800:	addne	r7, r4, #4
   31804:	bne	31774 <__assert_fail@plt+0x1fbd0>
   31808:	ldr	r2, [r6, #8]
   3180c:	cmp	r2, #0
   31810:	cmpne	r2, r3
   31814:	mov	r3, r6
   31818:	bne	31a04 <__assert_fail@plt+0x1fe60>
   3181c:	ldr	r2, [r6]
   31820:	ldr	r4, [r4]
   31824:	subs	r6, r2, #0
   31828:	bne	31808 <__assert_fail@plt+0x1fc64>
   3182c:	ldr	r6, [sp, #128]	; 0x80
   31830:	mov	r3, #0
   31834:	mov	r2, #0
   31838:	strd	r2, [fp]
   3183c:	ldr	r3, [sl, #64]	; 0x40
   31840:	cmp	r3, #31
   31844:	beq	31a18 <__assert_fail@plt+0x1fe74>
   31848:	ldr	r0, [sl, #56]	; 0x38
   3184c:	lsl	r1, r3, #5
   31850:	add	lr, r3, #1
   31854:	add	r4, r1, #4
   31858:	add	r3, r0, r1
   3185c:	mov	ip, #16
   31860:	str	lr, [sl, #64]	; 0x40
   31864:	add	r1, r1, ip
   31868:	add	r4, r0, r4
   3186c:	stmib	r3, {r5, r9}
   31870:	add	r2, r0, r1
   31874:	mvn	lr, #0
   31878:	str	r6, [r3, #12]
   3187c:	cmp	r6, #0
   31880:	strb	ip, [sp, #132]	; 0x84
   31884:	ldrd	r0, [fp]
   31888:	strd	r0, [r3, #24]
   3188c:	ldrb	ip, [r2, #14]
   31890:	bic	ip, ip, #12
   31894:	strb	ip, [r2, #14]
   31898:	str	r5, [r3, #16]
   3189c:	str	r5, [r3, #20]
   318a0:	str	lr, [r3, #32]
   318a4:	str	r4, [r9]
   318a8:	beq	31308 <__assert_fail@plt+0x1f764>
   318ac:	cmp	r4, #0
   318b0:	str	r4, [r6]
   318b4:	beq	31308 <__assert_fail@plt+0x1f764>
   318b8:	ldr	r3, [sp, #16]
   318bc:	add	r8, r8, #1
   318c0:	mov	r9, r4
   318c4:	cmp	r3, r8
   318c8:	bge	3176c <__assert_fail@plt+0x1fbc8>
   318cc:	ldr	r9, [sp, #40]	; 0x28
   318d0:	mov	r8, r3
   318d4:	ldr	r3, [sp, #24]
   318d8:	cmp	r8, r3
   318dc:	beq	315a8 <__assert_fail@plt+0x1fa04>
   318e0:	add	fp, sp, #128	; 0x80
   318e4:	str	r8, [sp, #16]
   318e8:	mov	r1, fp
   318ec:	str	r9, [sp, #40]	; 0x28
   318f0:	ldr	r7, [r6]
   318f4:	b	31900 <__assert_fail@plt+0x1fd5c>
   318f8:	mov	r6, r3
   318fc:	add	r1, r7, #4
   31900:	ldr	r3, [sl, #64]	; 0x40
   31904:	cmp	r3, #31
   31908:	beq	31a50 <__assert_fail@plt+0x1feac>
   3190c:	ldr	r0, [sl, #56]	; 0x38
   31910:	lsl	r2, r3, #5
   31914:	add	lr, r3, #1
   31918:	add	ip, r2, #4
   3191c:	add	r3, r0, r2
   31920:	str	lr, [sl, #64]	; 0x40
   31924:	add	r2, r2, #16
   31928:	add	r2, r0, r2
   3192c:	add	r0, r0, ip
   31930:	str	r5, [r3, #4]
   31934:	mvn	ip, #0
   31938:	cmp	r0, #0
   3193c:	str	r5, [r3, #8]
   31940:	str	r5, [r3, #12]
   31944:	ldrd	r8, [r6, #20]
   31948:	strd	r8, [r3, #24]
   3194c:	ldrb	lr, [r2, #14]
   31950:	bic	lr, lr, #12
   31954:	strb	lr, [r2, #14]
   31958:	str	r5, [r3, #16]
   3195c:	str	r5, [r3, #20]
   31960:	str	ip, [r3, #32]
   31964:	str	r0, [r1]
   31968:	beq	31308 <__assert_fail@plt+0x1f764>
   3196c:	str	r7, [r3, #4]
   31970:	ldr	r7, [r1]
   31974:	ldrb	r3, [r7, #26]
   31978:	orr	r3, r3, #4
   3197c:	strb	r3, [r7, #26]
   31980:	ldr	r3, [r6, #4]
   31984:	cmp	r3, #0
   31988:	bne	318f8 <__assert_fail@plt+0x1fd54>
   3198c:	ldr	r8, [sp, #16]
   31990:	ldr	r9, [sp, #40]	; 0x28
   31994:	ldr	r2, [r6, #8]
   31998:	cmp	r2, #0
   3199c:	cmpne	r2, r3
   319a0:	mov	r3, r6
   319a4:	bne	31b2c <__assert_fail@plt+0x1ff88>
   319a8:	ldr	r2, [r6]
   319ac:	ldr	r7, [r7]
   319b0:	subs	r6, r2, #0
   319b4:	bne	31994 <__assert_fail@plt+0x1fdf0>
   319b8:	ldr	r7, [sp, #128]	; 0x80
   319bc:	cmp	r7, #0
   319c0:	beq	31308 <__assert_fail@plt+0x1f764>
   319c4:	ldrb	r3, [r7, #24]
   319c8:	str	r4, [sp, #40]	; 0x28
   319cc:	cmp	r3, #17
   319d0:	bne	31550 <__assert_fail@plt+0x1f9ac>
   319d4:	b	314c0 <__assert_fail@plt+0x1f91c>
   319d8:	mov	r0, #996	; 0x3e4
   319dc:	bl	39028 <__assert_fail@plt+0x27484>
   319e0:	cmp	r0, #0
   319e4:	beq	31a44 <__assert_fail@plt+0x1fea0>
   319e8:	ldr	r1, [sl, #56]	; 0x38
   319ec:	mov	r2, #1
   319f0:	mov	lr, #4
   319f4:	mov	r3, #0
   319f8:	str	r1, [r0]
   319fc:	str	r0, [sl, #56]	; 0x38
   31a00:	b	31794 <__assert_fail@plt+0x1fbf0>
   31a04:	mov	r3, r2
   31a08:	add	r7, r4, #8
   31a0c:	b	31774 <__assert_fail@plt+0x1fbd0>
   31a10:	mov	r6, r0
   31a14:	b	31830 <__assert_fail@plt+0x1fc8c>
   31a18:	mov	r0, #996	; 0x3e4
   31a1c:	bl	39028 <__assert_fail@plt+0x27484>
   31a20:	cmp	r0, #0
   31a24:	beq	31308 <__assert_fail@plt+0x1f764>
   31a28:	ldr	r3, [sl, #56]	; 0x38
   31a2c:	mov	lr, #1
   31a30:	mov	r4, #4
   31a34:	mov	r1, #0
   31a38:	str	r3, [r0]
   31a3c:	str	r0, [sl, #56]	; 0x38
   31a40:	b	31858 <__assert_fail@plt+0x1fcb4>
   31a44:	mov	r6, r0
   31a48:	str	r0, [r7]
   31a4c:	b	31830 <__assert_fail@plt+0x1fc8c>
   31a50:	mov	r0, #996	; 0x3e4
   31a54:	str	r1, [sp, #44]	; 0x2c
   31a58:	bl	39028 <__assert_fail@plt+0x27484>
   31a5c:	cmp	r0, #0
   31a60:	ldr	r1, [sp, #44]	; 0x2c
   31a64:	beq	31304 <__assert_fail@plt+0x1f760>
   31a68:	ldr	r3, [sl, #56]	; 0x38
   31a6c:	mov	lr, #1
   31a70:	mov	ip, #4
   31a74:	mov	r2, #0
   31a78:	str	r3, [r0]
   31a7c:	str	r0, [sl, #56]	; 0x38
   31a80:	b	3191c <__assert_fail@plt+0x1fd78>
   31a84:	ldr	r3, [sp, #24]
   31a88:	sub	r1, ip, #48	; 0x30
   31a8c:	uxtb	r0, r1
   31a90:	cmp	r0, #9
   31a94:	movhi	r2, #0
   31a98:	movls	r2, #1
   31a9c:	cmn	r3, #2
   31aa0:	moveq	r2, #0
   31aa4:	cmp	r2, #0
   31aa8:	beq	316d0 <__assert_fail@plt+0x1fb2c>
   31aac:	cmn	r3, #1
   31ab0:	add	r2, r3, r3, lsl #2
   31ab4:	streq	r1, [sp, #24]
   31ab8:	beq	31690 <__assert_fail@plt+0x1faec>
   31abc:	add	ip, ip, r2, lsl #1
   31ac0:	cmp	ip, r7
   31ac4:	movge	ip, r7
   31ac8:	sub	r3, ip, #48	; 0x30
   31acc:	str	r3, [sp, #24]
   31ad0:	b	31690 <__assert_fail@plt+0x1faec>
   31ad4:	ldr	r2, [sp, #24]
   31ad8:	cmn	r2, #2
   31adc:	beq	31ae8 <__assert_fail@plt+0x1ff44>
   31ae0:	cmp	r3, #1
   31ae4:	beq	32adc <__assert_fail@plt+0x20f38>
   31ae8:	ldr	r2, [sp, #52]	; 0x34
   31aec:	cmp	r2, #0
   31af0:	beq	31630 <__assert_fail@plt+0x1fa8c>
   31af4:	ldrd	r2, [r6]
   31af8:	mov	r1, #1
   31afc:	str	r4, [r9, #40]	; 0x28
   31b00:	ldr	r0, [sp, #20]
   31b04:	ldr	ip, [sp, #28]
   31b08:	strd	r2, [r0]
   31b0c:	ldr	r3, [sp, #204]	; 0xcc
   31b10:	strb	r1, [r0, #4]
   31b14:	ldr	r3, [r3]
   31b18:	cmp	r3, #0
   31b1c:	beq	3126c <__assert_fail@plt+0x1f6c8>
   31b20:	cmp	ip, #0
   31b24:	bne	3126c <__assert_fail@plt+0x1f6c8>
   31b28:	b	31644 <__assert_fail@plt+0x1faa0>
   31b2c:	mov	r6, r2
   31b30:	add	r1, r7, #8
   31b34:	str	r8, [sp, #16]
   31b38:	str	r9, [sp, #40]	; 0x28
   31b3c:	b	31900 <__assert_fail@plt+0x1fd5c>
   31b40:	mov	r0, #996	; 0x3e4
   31b44:	bl	39028 <__assert_fail@plt+0x27484>
   31b48:	cmp	r0, #0
   31b4c:	beq	32218 <__assert_fail@plt+0x20674>
   31b50:	ldr	r1, [sl, #56]	; 0x38
   31b54:	mov	ip, #4
   31b58:	mov	r3, #1
   31b5c:	mov	r2, #0
   31b60:	str	r1, [r0]
   31b64:	str	r0, [sl, #56]	; 0x38
   31b68:	b	31208 <__assert_fail@plt+0x1f664>
   31b6c:	ldr	r3, [sp, #52]	; 0x34
   31b70:	mov	r4, r6
   31b74:	mov	r6, r9
   31b78:	mov	r9, r8
   31b7c:	cmp	r3, #0
   31b80:	bne	31af4 <__assert_fail@plt+0x1ff50>
   31b84:	ldr	r2, [sp, #204]	; 0xcc
   31b88:	mov	r3, #9
   31b8c:	str	r3, [r2]
   31b90:	b	31644 <__assert_fail@plt+0x1faa0>
   31b94:	mvn	r3, #0
   31b98:	mov	r4, r2
   31b9c:	mov	r6, r2
   31ba0:	mov	r8, #1
   31ba4:	str	r3, [sp, #24]
   31ba8:	b	318e0 <__assert_fail@plt+0x1fd3c>
   31bac:	ldr	r3, [sl, #84]	; 0x54
   31bb0:	mov	r2, #1
   31bb4:	orr	r3, r3, r2, lsl r4
   31bb8:	str	r3, [sl, #84]	; 0x54
   31bbc:	b	310d8 <__assert_fail@plt+0x1f534>
   31bc0:	ldr	r2, [sp, #16]
   31bc4:	ldr	r0, [r2]
   31bc8:	ldr	r3, [r2, #20]
   31bcc:	ldr	r2, [sp, #36]	; 0x24
   31bd0:	cmp	r3, r2
   31bd4:	beq	322ac <__assert_fail@plt+0x20708>
   31bd8:	ldr	ip, [sp, #16]
   31bdc:	add	r1, r3, #1
   31be0:	ldr	r2, [sp, #76]	; 0x4c
   31be4:	str	r1, [ip, #20]
   31be8:	str	r2, [r0, r3, lsl #2]
   31bec:	b	311ac <__assert_fail@plt+0x1f608>
   31bf0:	ldrb	r3, [sp, #76]	; 0x4c
   31bf4:	mov	r0, #1
   31bf8:	b	31198 <__assert_fail@plt+0x1f5f4>
   31bfc:	ldr	r2, [sp, #16]
   31c00:	add	r0, sp, #68	; 0x44
   31c04:	mov	r1, r4
   31c08:	ldr	ip, [sp, #76]	; 0x4c
   31c0c:	str	r0, [sp]
   31c10:	str	sl, [sp, #8]
   31c14:	add	r3, r2, #36	; 0x24
   31c18:	add	r2, r2, #12
   31c1c:	ldr	r0, [r9, #64]	; 0x40
   31c20:	str	ip, [sp, #4]
   31c24:	bl	260dc <__assert_fail@plt+0x14538>
   31c28:	ldr	r3, [sp, #204]	; 0xcc
   31c2c:	cmp	r0, #0
   31c30:	str	r0, [r3]
   31c34:	beq	311ac <__assert_fail@plt+0x1f608>
   31c38:	ldr	sl, [sp, #24]
   31c3c:	mov	r0, r4
   31c40:	bl	19610 <__assert_fail@plt+0x7a6c>
   31c44:	ldr	r4, [sp, #16]
   31c48:	ldr	r0, [r4]
   31c4c:	bl	19610 <__assert_fail@plt+0x7a6c>
   31c50:	ldr	r0, [r4, #4]
   31c54:	bl	19610 <__assert_fail@plt+0x7a6c>
   31c58:	ldr	r0, [r4, #8]
   31c5c:	bl	19610 <__assert_fail@plt+0x7a6c>
   31c60:	ldr	r0, [r4, #12]
   31c64:	bl	19610 <__assert_fail@plt+0x7a6c>
   31c68:	mov	r0, r4
   31c6c:	bl	19610 <__assert_fail@plt+0x7a6c>
   31c70:	ldr	r3, [sp, #204]	; 0xcc
   31c74:	ldr	r3, [r3]
   31c78:	cmp	r3, #0
   31c7c:	bne	30990 <__assert_fail@plt+0x1edec>
   31c80:	str	r3, [sp, #28]
   31c84:	b	30570 <__assert_fail@plt+0x1e9cc>
   31c88:	ldr	r2, [sl, #64]	; 0x40
   31c8c:	cmp	r2, #31
   31c90:	beq	32650 <__assert_fail@plt+0x20aac>
   31c94:	ldr	r0, [sl, #56]	; 0x38
   31c98:	lsl	r3, r2, #5
   31c9c:	add	r2, r2, #1
   31ca0:	add	lr, r3, #4
   31ca4:	add	r1, r0, r3
   31ca8:	add	r3, r3, #16
   31cac:	str	r2, [sl, #64]	; 0x40
   31cb0:	adds	r2, r0, lr
   31cb4:	add	r0, r0, r3
   31cb8:	ldr	r3, [sp, #20]
   31cbc:	mov	ip, #0
   31cc0:	mvn	lr, #0
   31cc4:	str	r2, [sp, #28]
   31cc8:	str	ip, [r1, #4]
   31ccc:	str	ip, [r1, #8]
   31cd0:	str	ip, [r1, #12]
   31cd4:	ldrd	r2, [r3]
   31cd8:	strd	r2, [r1, #24]
   31cdc:	ldrb	r3, [r0, #14]
   31ce0:	bic	r3, r3, #12
   31ce4:	strb	r3, [r0, #14]
   31ce8:	str	ip, [r1, #16]
   31cec:	str	ip, [r1, #20]
   31cf0:	str	lr, [r1, #32]
   31cf4:	bne	30bbc <__assert_fail@plt+0x1f018>
   31cf8:	b	30dec <__assert_fail@plt+0x1f248>
   31cfc:	mov	r0, #996	; 0x3e4
   31d00:	bl	39028 <__assert_fail@plt+0x27484>
   31d04:	cmp	r0, #0
   31d08:	beq	30dec <__assert_fail@plt+0x1f248>
   31d0c:	ldr	r1, [sl, #56]	; 0x38
   31d10:	mov	r2, #4
   31d14:	mov	r3, #0
   31d18:	str	r1, [r0]
   31d1c:	str	r0, [sl, #56]	; 0x38
   31d20:	b	3051c <__assert_fail@plt+0x1e978>
   31d24:	ldr	r2, [sp, #20]
   31d28:	mov	r3, #1
   31d2c:	strb	r3, [r2, #4]
   31d30:	b	30fbc <__assert_fail@plt+0x1f418>
   31d34:	ldr	r2, [sp, #16]
   31d38:	ldr	r1, [sp, #32]
   31d3c:	ldrb	r3, [r2, #16]
   31d40:	tst	r1, #256	; 0x100
   31d44:	orr	r3, r3, #1
   31d48:	strb	r3, [r2, #16]
   31d4c:	beq	31d5c <__assert_fail@plt+0x201b8>
   31d50:	ldr	r3, [r4]
   31d54:	orr	r3, r3, #1024	; 0x400
   31d58:	str	r3, [r4]
   31d5c:	ldr	r3, [r9, #40]	; 0x28
   31d60:	mov	r1, r9
   31d64:	ldr	r5, [sp, #20]
   31d68:	ldr	r2, [sp, #32]
   31d6c:	add	fp, r3, fp
   31d70:	mov	r0, r5
   31d74:	str	fp, [r9, #40]	; 0x28
   31d78:	bl	23930 <__assert_fail@plt+0x11d8c>
   31d7c:	ldrb	r3, [r5, #4]
   31d80:	mov	fp, r0
   31d84:	cmp	r3, #2
   31d88:	beq	32104 <__assert_fail@plt+0x20560>
   31d8c:	mov	r2, #1
   31d90:	str	r2, [sp, #44]	; 0x2c
   31d94:	b	30fb4 <__assert_fail@plt+0x1f410>
   31d98:	ldr	r3, [sp, #52]	; 0x34
   31d9c:	cmp	r3, #0
   31da0:	bne	31af4 <__assert_fail@plt+0x1ff50>
   31da4:	b	31638 <__assert_fail@plt+0x1fa94>
   31da8:	mov	r3, #7
   31dac:	ldr	sl, [sp, #24]
   31db0:	ldr	r2, [sp, #204]	; 0xcc
   31db4:	str	r3, [r2]
   31db8:	b	31c3c <__assert_fail@plt+0x20098>
   31dbc:	ldr	r4, [sp, #20]
   31dc0:	mov	r2, r3
   31dc4:	mov	r1, r9
   31dc8:	mov	r6, r3
   31dcc:	mov	r0, r4
   31dd0:	bl	26de8 <__assert_fail@plt+0x15244>
   31dd4:	ldr	lr, [sp, #200]	; 0xc8
   31dd8:	mov	r3, r6
   31ddc:	mov	r2, r4
   31de0:	mov	r1, r5
   31de4:	ldr	ip, [r9, #40]	; 0x28
   31de8:	str	lr, [sp]
   31dec:	ldr	lr, [sp, #204]	; 0xcc
   31df0:	add	ip, ip, r0
   31df4:	mov	r0, r9
   31df8:	str	lr, [sp, #4]
   31dfc:	str	ip, [r9, #40]	; 0x28
   31e00:	bl	303fc <__assert_fail@plt+0x1e858>
   31e04:	str	r0, [sp, #28]
   31e08:	b	30998 <__assert_fail@plt+0x1edf4>
   31e0c:	mov	r0, #996	; 0x3e4
   31e10:	str	r2, [sp, #16]
   31e14:	bl	39028 <__assert_fail@plt+0x27484>
   31e18:	cmp	r0, #0
   31e1c:	beq	30dec <__assert_fail@plt+0x1f248>
   31e20:	ldr	r1, [sl, #56]	; 0x38
   31e24:	mov	lr, #1
   31e28:	mov	ip, #4
   31e2c:	mov	r3, #0
   31e30:	ldr	r2, [sp, #16]
   31e34:	str	r1, [r0]
   31e38:	str	r0, [sl, #56]	; 0x38
   31e3c:	b	30da0 <__assert_fail@plt+0x1f1fc>
   31e40:	mov	r0, #996	; 0x3e4
   31e44:	bl	39028 <__assert_fail@plt+0x27484>
   31e48:	subs	fp, r0, #0
   31e4c:	beq	30d74 <__assert_fail@plt+0x1f1d0>
   31e50:	ldr	r1, [sl, #56]	; 0x38
   31e54:	mov	r0, #4
   31e58:	mov	r2, #1
   31e5c:	mov	r3, #0
   31e60:	str	r1, [fp]
   31e64:	str	fp, [sl, #56]	; 0x38
   31e68:	b	30d34 <__assert_fail@plt+0x1f190>
   31e6c:	ldr	sl, [sp, #24]
   31e70:	ldr	r3, [sp, #204]	; 0xcc
   31e74:	str	r0, [r3]
   31e78:	b	31c3c <__assert_fail@plt+0x20098>
   31e7c:	str	r5, [sp, #28]
   31e80:	b	30570 <__assert_fail@plt+0x1e9cc>
   31e84:	ldr	r2, [sp, #20]
   31e88:	mov	r3, #6
   31e8c:	str	r3, [r2]
   31e90:	ldr	r2, [sl, #64]	; 0x40
   31e94:	cmp	r2, #31
   31e98:	beq	326b0 <__assert_fail@plt+0x20b0c>
   31e9c:	lsl	r3, r2, #5
   31ea0:	add	r1, r2, #1
   31ea4:	ldr	r2, [sl, #56]	; 0x38
   31ea8:	add	r4, r3, #4
   31eac:	add	ip, r2, r3
   31eb0:	add	r3, r3, #16
   31eb4:	str	r1, [sl, #64]	; 0x40
   31eb8:	add	r4, r2, r4
   31ebc:	add	r2, r2, r3
   31ec0:	ldr	r3, [sp, #20]
   31ec4:	mov	lr, #0
   31ec8:	mvn	r5, #0
   31ecc:	str	lr, [ip, #4]
   31ed0:	str	lr, [ip, #8]
   31ed4:	str	lr, [ip, #12]
   31ed8:	ldrd	r0, [r3]
   31edc:	strd	r0, [ip, #24]
   31ee0:	ldrb	r3, [r2, #14]
   31ee4:	bic	r3, r3, #12
   31ee8:	strb	r3, [r2, #14]
   31eec:	str	lr, [ip, #16]
   31ef0:	str	lr, [ip, #20]
   31ef4:	str	r5, [ip, #32]
   31ef8:	ldr	r2, [sp, #20]
   31efc:	mov	r3, #9
   31f00:	str	r3, [r2]
   31f04:	b	30abc <__assert_fail@plt+0x1ef18>
   31f08:	ldr	r3, [r9, #40]	; 0x28
   31f0c:	mov	r2, sl
   31f10:	add	r0, sp, #88	; 0x58
   31f14:	mov	r1, r9
   31f18:	add	r3, r3, fp
   31f1c:	str	r3, [r9, #40]	; 0x28
   31f20:	bl	23930 <__assert_fail@plt+0x11d8c>
   31f24:	ldrb	r2, [sp, #92]	; 0x5c
   31f28:	mov	r3, r0
   31f2c:	cmp	r2, #2
   31f30:	beq	31da8 <__assert_fail@plt+0x20204>
   31f34:	cmp	r2, #21
   31f38:	beq	321fc <__assert_fail@plt+0x20658>
   31f3c:	mov	r1, #1
   31f40:	add	ip, sp, #128	; 0x80
   31f44:	str	sl, [sp]
   31f48:	add	r2, sp, #88	; 0x58
   31f4c:	add	r0, sp, #80	; 0x50
   31f50:	str	r1, [sp, #4]
   31f54:	mov	r1, r9
   31f58:	str	r6, [sp, #80]	; 0x50
   31f5c:	str	ip, [sp, #84]	; 0x54
   31f60:	bl	27aa4 <__assert_fail@plt+0x15f00>
   31f64:	cmp	r0, #0
   31f68:	bne	31e6c <__assert_fail@plt+0x202c8>
   31f6c:	mov	r2, sl
   31f70:	mov	r1, r9
   31f74:	mov	r0, r5
   31f78:	bl	23930 <__assert_fail@plt+0x11d8c>
   31f7c:	ldr	r2, [sp, #72]	; 0x48
   31f80:	mov	fp, r0
   31f84:	sub	r3, r2, #2
   31f88:	bics	r3, r3, #2
   31f8c:	beq	328a0 <__assert_fail@plt+0x20cfc>
   31f90:	ldr	r3, [sp, #80]	; 0x50
   31f94:	sub	r1, r3, #2
   31f98:	bics	r1, r1, #2
   31f9c:	beq	328a0 <__assert_fail@plt+0x20cfc>
   31fa0:	cmp	r2, #3
   31fa4:	moveq	r1, #1
   31fa8:	movne	r1, #0
   31fac:	str	r1, [sp, #52]	; 0x34
   31fb0:	beq	328bc <__assert_fail@plt+0x20d18>
   31fb4:	cmp	r3, #3
   31fb8:	beq	32958 <__assert_fail@plt+0x20db4>
   31fbc:	cmp	r2, #0
   31fc0:	bne	32888 <__assert_fail@plt+0x20ce4>
   31fc4:	ldrb	r7, [sp, #76]	; 0x4c
   31fc8:	cmp	r3, #0
   31fcc:	beq	32898 <__assert_fail@plt+0x20cf4>
   31fd0:	cmp	r3, #3
   31fd4:	bne	328b4 <__assert_fail@plt+0x20d10>
   31fd8:	ldr	r1, [sp, #84]	; 0x54
   31fdc:	ldrb	r8, [r1]
   31fe0:	cmp	r2, #0
   31fe4:	ldr	r1, [sp, #52]	; 0x34
   31fe8:	moveq	r1, #1
   31fec:	cmp	r1, #0
   31ff0:	beq	32880 <__assert_fail@plt+0x20cdc>
   31ff4:	ldr	r2, [sp, #24]
   31ff8:	ldr	r2, [r2, #92]	; 0x5c
   31ffc:	cmp	r2, #1
   32000:	ble	3276c <__assert_fail@plt+0x20bc8>
   32004:	mov	r0, r7
   32008:	bl	119f4 <btowc@plt>
   3200c:	ldr	r3, [sp, #80]	; 0x50
   32010:	mov	r7, r0
   32014:	cmp	r3, #3
   32018:	cmpne	r3, #0
   3201c:	bne	32778 <__assert_fail@plt+0x20bd4>
   32020:	ldr	r3, [sp, #24]
   32024:	ldr	r3, [r3, #92]	; 0x5c
   32028:	cmp	r3, #1
   3202c:	ble	3203c <__assert_fail@plt+0x20498>
   32030:	mov	r0, r8
   32034:	bl	119f4 <btowc@plt>
   32038:	mov	r8, r0
   3203c:	cmn	r7, #1
   32040:	cmnne	r8, #1
   32044:	beq	32190 <__assert_fail@plt+0x205ec>
   32048:	ldr	r3, [sp, #48]	; 0x30
   3204c:	cmp	r8, r7
   32050:	movcs	r3, #0
   32054:	andcc	r3, r3, #1
   32058:	cmp	r3, #0
   3205c:	bne	328a0 <__assert_fail@plt+0x20cfc>
   32060:	ldr	r3, [sp, #24]
   32064:	ldr	r3, [r3, #92]	; 0x5c
   32068:	cmp	r3, #1
   3206c:	ble	320a4 <__assert_fail@plt+0x20500>
   32070:	ldr	r2, [sp, #16]
   32074:	ldr	r1, [sp, #40]	; 0x28
   32078:	ldr	r3, [r2, #32]
   3207c:	ldr	r2, [r2, #4]
   32080:	cmp	r3, r1
   32084:	beq	32a34 <__assert_fail@plt+0x20e90>
   32088:	ldr	r0, [sp, #16]
   3208c:	str	r7, [r2, r3, lsl #2]
   32090:	ldr	r2, [r0, #8]
   32094:	ldr	r3, [r0, #32]
   32098:	add	r1, r3, #1
   3209c:	str	r1, [r0, #32]
   320a0:	str	r8, [r2, r3, lsl #2]
   320a4:	mov	r3, #0
   320a8:	mov	ip, #1
   320ac:	cmp	r7, r3
   320b0:	asr	r2, r3, #5
   320b4:	and	r0, r3, #31
   320b8:	movhi	r1, #0
   320bc:	movls	r1, #1
   320c0:	cmp	r8, r3
   320c4:	add	r3, r3, #1
   320c8:	movcc	r1, #0
   320cc:	cmp	r1, #0
   320d0:	beq	320e0 <__assert_fail@plt+0x2053c>
   320d4:	ldr	r1, [r4, r2, lsl #2]
   320d8:	orr	r1, r1, ip, lsl r0
   320dc:	str	r1, [r4, r2, lsl #2]
   320e0:	cmp	r3, #256	; 0x100
   320e4:	bne	320ac <__assert_fail@plt+0x20508>
   320e8:	ldr	r2, [sp, #204]	; 0xcc
   320ec:	mov	r3, #0
   320f0:	str	r3, [r2]
   320f4:	b	311ac <__assert_fail@plt+0x1f608>
   320f8:	cmp	r5, #0
   320fc:	strne	r6, [r5]
   32100:	b	30dec <__assert_fail@plt+0x1f248>
   32104:	ldr	r2, [sp, #204]	; 0xcc
   32108:	mov	r3, #2
   3210c:	str	r3, [r2]
   32110:	b	31c3c <__assert_fail@plt+0x20098>
   32114:	mov	r0, #996	; 0x3e4
   32118:	bl	39028 <__assert_fail@plt+0x27484>
   3211c:	cmp	r0, #0
   32120:	beq	30dec <__assert_fail@plt+0x1f248>
   32124:	ldr	r1, [sl, #56]	; 0x38
   32128:	mov	lr, #4
   3212c:	mov	r2, #1
   32130:	mov	r3, #0
   32134:	str	r1, [r0]
   32138:	str	r0, [sl, #56]	; 0x38
   3213c:	b	30e20 <__assert_fail@plt+0x1f27c>
   32140:	str	r2, [sp, #28]
   32144:	mov	r3, #6
   32148:	ldr	r2, [sp, #204]	; 0xcc
   3214c:	str	r3, [r2]
   32150:	b	30998 <__assert_fail@plt+0x1edf4>
   32154:	mov	r0, r4
   32158:	str	r6, [sp, #28]
   3215c:	bl	19610 <__assert_fail@plt+0x7a6c>
   32160:	ldr	r0, [sp, #16]
   32164:	bl	19610 <__assert_fail@plt+0x7a6c>
   32168:	ldr	r2, [sp, #204]	; 0xcc
   3216c:	mov	r3, #12
   32170:	str	r3, [r2]
   32174:	b	30998 <__assert_fail@plt+0x1edf4>
   32178:	ldr	r0, [sp, #84]	; 0x54
   3217c:	strd	r2, [sp, #56]	; 0x38
   32180:	bl	11988 <strlen@plt>
   32184:	cmp	r0, #1
   32188:	ldrd	r2, [sp, #56]	; 0x38
   3218c:	bls	328dc <__assert_fail@plt+0x20d38>
   32190:	mov	r3, #3
   32194:	ldr	sl, [sp, #24]
   32198:	ldr	r2, [sp, #204]	; 0xcc
   3219c:	str	r3, [r2]
   321a0:	b	31c3c <__assert_fail@plt+0x20098>
   321a4:	mov	r0, #996	; 0x3e4
   321a8:	bl	39028 <__assert_fail@plt+0x27484>
   321ac:	cmp	r0, #0
   321b0:	beq	30dec <__assert_fail@plt+0x1f248>
   321b4:	ldr	r3, [sl, #56]	; 0x38
   321b8:	mov	r2, #1
   321bc:	mov	r6, #4
   321c0:	mov	r1, #0
   321c4:	str	r3, [r0]
   321c8:	str	r0, [sl, #56]	; 0x38
   321cc:	b	31100 <__assert_fail@plt+0x1f55c>
   321d0:	mov	r0, #996	; 0x3e4
   321d4:	bl	39028 <__assert_fail@plt+0x27484>
   321d8:	cmp	r0, #0
   321dc:	beq	30dec <__assert_fail@plt+0x1f248>
   321e0:	ldr	r1, [sl, #56]	; 0x38
   321e4:	mov	r2, #1
   321e8:	mov	ip, #4
   321ec:	mov	r3, #0
   321f0:	str	r1, [r0]
   321f4:	str	r0, [sl, #56]	; 0x38
   321f8:	b	30c54 <__assert_fail@plt+0x1f0b0>
   321fc:	ldr	r2, [r9, #40]	; 0x28
   32200:	mov	r1, #1
   32204:	ldr	r3, [sp, #72]	; 0x48
   32208:	sub	r2, r2, fp
   3220c:	str	r2, [r9, #40]	; 0x28
   32210:	strb	r1, [r5, #4]
   32214:	b	31058 <__assert_fail@plt+0x1f4b4>
   32218:	ldr	r3, [sp, #204]	; 0xcc
   3221c:	ldr	r3, [r3]
   32220:	cmp	r3, #0
   32224:	beq	31570 <__assert_fail@plt+0x1f9cc>
   32228:	b	31314 <__assert_fail@plt+0x1f770>
   3222c:	mov	r0, #996	; 0x3e4
   32230:	bl	39028 <__assert_fail@plt+0x27484>
   32234:	cmp	r0, #0
   32238:	beq	30dec <__assert_fail@plt+0x1f248>
   3223c:	ldr	r1, [sl, #56]	; 0x38
   32240:	mov	r2, #4
   32244:	mov	r3, #0
   32248:	str	r1, [r0]
   3224c:	str	r0, [sl, #56]	; 0x38
   32250:	b	30ed4 <__assert_fail@plt+0x1f330>
   32254:	mov	r0, #996	; 0x3e4
   32258:	bl	39028 <__assert_fail@plt+0x27484>
   3225c:	cmp	r0, #0
   32260:	beq	30dec <__assert_fail@plt+0x1f248>
   32264:	ldr	r1, [sl, #56]	; 0x38
   32268:	mov	r6, #4
   3226c:	mov	r2, #1
   32270:	mov	r3, #0
   32274:	str	r1, [r0]
   32278:	str	r0, [sl, #56]	; 0x38
   3227c:	b	30b4c <__assert_fail@plt+0x1efa8>
   32280:	mov	r0, #996	; 0x3e4
   32284:	bl	39028 <__assert_fail@plt+0x27484>
   32288:	cmp	r0, #0
   3228c:	beq	32aac <__assert_fail@plt+0x20f08>
   32290:	ldr	r1, [sl, #56]	; 0x38
   32294:	mov	r2, #1
   32298:	mov	r5, #4
   3229c:	mov	r3, #0
   322a0:	str	r1, [r0]
   322a4:	str	r0, [sl, #56]	; 0x38
   322a8:	b	30ad8 <__assert_fail@plt+0x1ef34>
   322ac:	lsl	r3, r2, #1
   322b0:	add	r3, r3, #1
   322b4:	lsl	r1, r3, #2
   322b8:	str	r3, [sp, #36]	; 0x24
   322bc:	bl	39064 <__assert_fail@plt+0x274c0>
   322c0:	cmp	r0, #0
   322c4:	beq	32a2c <__assert_fail@plt+0x20e88>
   322c8:	ldr	r2, [sp, #16]
   322cc:	str	r0, [r2]
   322d0:	ldr	r3, [r2, #20]
   322d4:	b	31bd8 <__assert_fail@plt+0x20034>
   322d8:	ldr	r3, [r9, #40]	; 0x28
   322dc:	ldr	sl, [sp, #24]
   322e0:	ldr	r2, [sp, #44]	; 0x2c
   322e4:	add	fp, r3, fp
   322e8:	str	fp, [r9, #40]	; 0x28
   322ec:	cmp	r2, #0
   322f0:	beq	32384 <__assert_fail@plt+0x207e0>
   322f4:	ubfx	r2, r4, #2, #1
   322f8:	cmp	r2, #0
   322fc:	moveq	r1, r2
   32300:	beq	32314 <__assert_fail@plt+0x20770>
   32304:	ldr	r3, [r4]
   32308:	mov	r1, #1
   3230c:	mvn	r3, r3
   32310:	str	r3, [r4]
   32314:	ldr	ip, [r4, r2, lsl #2]
   32318:	rsb	lr, r2, #8
   3231c:	add	r3, r4, r2, lsl #2
   32320:	lsr	lr, lr, #1
   32324:	ldr	r0, [r3, #4]
   32328:	cmp	lr, #4
   3232c:	mvn	ip, ip
   32330:	str	ip, [r4, r2, lsl #2]
   32334:	mvn	r2, r0
   32338:	ldr	lr, [r3, #8]
   3233c:	ldr	ip, [r3, #12]
   32340:	ldr	r0, [r3, #16]
   32344:	mvn	lr, lr
   32348:	stmib	r3, {r2, lr}
   3234c:	mvn	ip, ip
   32350:	ldr	r2, [r3, #20]
   32354:	mvn	r0, r0
   32358:	str	ip, [r3, #12]
   3235c:	str	r0, [r3, #16]
   32360:	mvn	r2, r2
   32364:	str	r2, [r3, #20]
   32368:	bne	32548 <__assert_fail@plt+0x209a4>
   3236c:	ldr	r1, [r3, #24]
   32370:	ldr	r2, [r3, #28]
   32374:	mvn	r1, r1
   32378:	mvn	r2, r2
   3237c:	str	r1, [r3, #24]
   32380:	str	r2, [r3, #28]
   32384:	ldr	r1, [sl, #92]	; 0x5c
   32388:	cmp	r1, #1
   3238c:	ble	3243c <__assert_fail@plt+0x20898>
   32390:	ldr	r3, [sl, #60]	; 0x3c
   32394:	add	r0, r4, #8
   32398:	add	r2, r3, #8
   3239c:	orr	ip, r3, r4
   323a0:	cmp	r3, r0
   323a4:	cmpcc	r4, r2
   323a8:	movcs	r2, #1
   323ac:	movcc	r2, #0
   323b0:	tst	ip, #7
   323b4:	movne	r2, #0
   323b8:	cmp	r2, #0
   323bc:	ldr	r2, [r4]
   323c0:	beq	32980 <__assert_fail@plt+0x20ddc>
   323c4:	ldm	r3, {ip, lr}
   323c8:	ldr	r0, [r4, #4]
   323cc:	and	r2, r2, ip
   323d0:	ldr	ip, [r4, #8]
   323d4:	and	r0, r0, lr
   323d8:	str	r2, [r4]
   323dc:	ldr	r2, [r4, #12]
   323e0:	str	r0, [r4, #4]
   323e4:	ldr	r0, [r3, #8]
   323e8:	ldr	lr, [r3, #12]
   323ec:	and	ip, ip, r0
   323f0:	ldr	r0, [r4, #16]
   323f4:	and	r2, r2, lr
   323f8:	str	ip, [r4, #8]
   323fc:	ldr	lr, [r4, #20]
   32400:	str	r2, [r4, #12]
   32404:	ldr	r2, [r3, #16]
   32408:	ldr	ip, [r3, #20]
   3240c:	and	r2, r2, r0
   32410:	ldr	r0, [r4, #24]
   32414:	and	ip, ip, lr
   32418:	str	r2, [r4, #16]
   3241c:	ldr	r2, [r4, #28]
   32420:	str	ip, [r4, #20]
   32424:	ldr	ip, [r3, #24]
   32428:	ldr	r3, [r3, #28]
   3242c:	and	r0, r0, ip
   32430:	and	r3, r3, r2
   32434:	str	r0, [r4, #24]
   32438:	str	r3, [r4, #28]
   3243c:	ldr	r3, [sp, #16]
   32440:	ldr	r3, [r3, #20]
   32444:	cmp	r3, #0
   32448:	bne	3255c <__assert_fail@plt+0x209b8>
   3244c:	ldr	r2, [sp, #16]
   32450:	ldr	r3, [r2, #24]
   32454:	cmp	r3, #0
   32458:	bne	3255c <__assert_fail@plt+0x209b8>
   3245c:	ldr	r3, [r2, #28]
   32460:	cmp	r3, #0
   32464:	bne	3255c <__assert_fail@plt+0x209b8>
   32468:	ldr	r3, [r2, #32]
   3246c:	cmp	r3, #0
   32470:	bne	3255c <__assert_fail@plt+0x209b8>
   32474:	cmp	r1, #1
   32478:	ble	32494 <__assert_fail@plt+0x208f0>
   3247c:	ldr	r3, [r2, #36]	; 0x24
   32480:	cmp	r3, #0
   32484:	bne	3255c <__assert_fail@plt+0x209b8>
   32488:	ldrb	r3, [r2, #16]
   3248c:	tst	r3, #1
   32490:	bne	3255c <__assert_fail@plt+0x209b8>
   32494:	ldr	r5, [sp, #16]
   32498:	ldr	r0, [r5]
   3249c:	bl	19610 <__assert_fail@plt+0x7a6c>
   324a0:	ldr	r0, [r5, #4]
   324a4:	bl	19610 <__assert_fail@plt+0x7a6c>
   324a8:	ldr	r0, [r5, #8]
   324ac:	bl	19610 <__assert_fail@plt+0x7a6c>
   324b0:	ldr	r0, [r5, #12]
   324b4:	bl	19610 <__assert_fail@plt+0x7a6c>
   324b8:	mov	r0, r5
   324bc:	bl	19610 <__assert_fail@plt+0x7a6c>
   324c0:	ldr	r1, [sl, #64]	; 0x40
   324c4:	cmp	r1, #31
   324c8:	beq	32a00 <__assert_fail@plt+0x20e5c>
   324cc:	ldr	r2, [sl, #56]	; 0x38
   324d0:	lsl	r3, r1, #5
   324d4:	add	r5, r1, #1
   324d8:	mov	lr, #3
   324dc:	mov	r1, #0
   324e0:	add	ip, r3, #24
   324e4:	add	r0, r3, #16
   324e8:	str	r5, [sl, #64]	; 0x40
   324ec:	add	r5, r3, #4
   324f0:	mvn	r7, #0
   324f4:	add	r3, r2, r3
   324f8:	add	r6, r2, ip
   324fc:	add	r0, r2, r0
   32500:	adds	r5, r2, r5
   32504:	str	r1, [r3, #4]
   32508:	str	r1, [r3, #8]
   3250c:	str	r1, [r3, #12]
   32510:	str	r4, [r2, ip]
   32514:	strb	lr, [r6, #4]
   32518:	ldrb	r2, [r0, #14]
   3251c:	str	r5, [sp, #28]
   32520:	bic	r2, r2, #12
   32524:	strb	r2, [r0, #14]
   32528:	str	r1, [r3, #16]
   3252c:	str	r1, [r3, #20]
   32530:	str	r7, [r3, #32]
   32534:	bne	30570 <__assert_fail@plt+0x1e9cc>
   32538:	ldr	r2, [sp, #204]	; 0xcc
   3253c:	mov	r3, #12
   32540:	str	r3, [r2]
   32544:	b	31c3c <__assert_fail@plt+0x20098>
   32548:	add	r3, r1, #6
   3254c:	ldr	r2, [r4, r3, lsl #2]
   32550:	mvn	r2, r2
   32554:	str	r2, [r4, r3, lsl #2]
   32558:	b	32384 <__assert_fail@plt+0x207e0>
   3255c:	ldrb	r2, [sl, #88]	; 0x58
   32560:	ldr	r3, [sl, #64]	; 0x40
   32564:	orr	r2, r2, #2
   32568:	cmp	r3, #31
   3256c:	strb	r2, [sl, #88]	; 0x58
   32570:	beq	328e8 <__assert_fail@plt+0x20d44>
   32574:	ldr	r0, [sl, #56]	; 0x38
   32578:	lsl	r5, r3, #5
   3257c:	add	ip, r3, #1
   32580:	mov	lr, #6
   32584:	mov	r3, #0
   32588:	str	ip, [sl, #64]	; 0x40
   3258c:	add	ip, r5, #4
   32590:	add	r1, r5, #24
   32594:	add	r2, r5, #16
   32598:	mvn	r6, #0
   3259c:	adds	r8, r0, ip
   325a0:	ldr	ip, [sp, #16]
   325a4:	add	r7, r0, r5
   325a8:	add	r5, r0, r1
   325ac:	add	r2, r0, r2
   325b0:	str	r3, [r7, #4]
   325b4:	str	r3, [r7, #8]
   325b8:	str	r3, [r7, #12]
   325bc:	str	ip, [r0, r1]
   325c0:	strb	lr, [r5, #4]
   325c4:	ldrb	r1, [r2, #14]
   325c8:	bic	r1, r1, #12
   325cc:	strb	r1, [r2, #14]
   325d0:	str	r3, [r7, #16]
   325d4:	str	r3, [r7, #20]
   325d8:	str	r6, [r7, #32]
   325dc:	beq	32538 <__assert_fail@plt+0x20994>
   325e0:	ldr	r3, [r4]
   325e4:	cmp	r3, #0
   325e8:	bne	32780 <__assert_fail@plt+0x20bdc>
   325ec:	ldr	r3, [r4, #4]
   325f0:	cmp	r3, #0
   325f4:	bne	32780 <__assert_fail@plt+0x20bdc>
   325f8:	ldr	r3, [r4, #8]
   325fc:	cmp	r3, #0
   32600:	bne	32780 <__assert_fail@plt+0x20bdc>
   32604:	ldr	r3, [r4, #12]
   32608:	cmp	r3, #0
   3260c:	bne	32780 <__assert_fail@plt+0x20bdc>
   32610:	ldr	r3, [r4, #16]
   32614:	cmp	r3, #0
   32618:	bne	32780 <__assert_fail@plt+0x20bdc>
   3261c:	ldr	r3, [r4, #20]
   32620:	cmp	r3, #0
   32624:	bne	32780 <__assert_fail@plt+0x20bdc>
   32628:	ldr	r3, [r4, #24]
   3262c:	cmp	r3, #0
   32630:	bne	32780 <__assert_fail@plt+0x20bdc>
   32634:	ldr	r3, [r4, #28]
   32638:	cmp	r3, #0
   3263c:	bne	32780 <__assert_fail@plt+0x20bdc>
   32640:	mov	r0, r4
   32644:	str	r8, [sp, #28]
   32648:	bl	19610 <__assert_fail@plt+0x7a6c>
   3264c:	b	30570 <__assert_fail@plt+0x1e9cc>
   32650:	mov	r0, #996	; 0x3e4
   32654:	bl	39028 <__assert_fail@plt+0x27484>
   32658:	cmp	r0, #0
   3265c:	beq	30dec <__assert_fail@plt+0x1f248>
   32660:	ldr	r1, [sl, #56]	; 0x38
   32664:	mov	lr, #4
   32668:	mov	r2, #1
   3266c:	mov	r3, #0
   32670:	str	r1, [r0]
   32674:	str	r0, [sl, #56]	; 0x38
   32678:	b	31ca4 <__assert_fail@plt+0x20100>
   3267c:	mov	r0, #996	; 0x3e4
   32680:	bl	39028 <__assert_fail@plt+0x27484>
   32684:	cmp	r0, #0
   32688:	mov	r4, r0
   3268c:	beq	30ab0 <__assert_fail@plt+0x1ef0c>
   32690:	ldr	ip, [sl, #56]	; 0x38
   32694:	mov	r3, r6
   32698:	mov	r2, r0
   3269c:	mov	r1, #1
   326a0:	mov	r4, #4
   326a4:	str	ip, [r0]
   326a8:	str	r0, [sl, #56]	; 0x38
   326ac:	b	30a64 <__assert_fail@plt+0x1eec0>
   326b0:	mov	r0, #996	; 0x3e4
   326b4:	bl	39028 <__assert_fail@plt+0x27484>
   326b8:	cmp	r0, #0
   326bc:	mov	r4, r0
   326c0:	beq	31ef8 <__assert_fail@plt+0x20354>
   326c4:	ldr	ip, [sl, #56]	; 0x38
   326c8:	mov	r3, r6
   326cc:	mov	r2, r0
   326d0:	mov	r1, #1
   326d4:	mov	r4, #4
   326d8:	str	ip, [r0]
   326dc:	str	r0, [sl, #56]	; 0x38
   326e0:	b	31eac <__assert_fail@plt+0x20308>
   326e4:	mov	r4, #128	; 0x80
   326e8:	mov	r7, #4
   326ec:	bl	11964 <__ctype_b_loc@plt>
   326f0:	ldr	r2, [r0]
   326f4:	add	ip, r7, #24
   326f8:	sub	r3, r4, #-2147483647	; 0x80000001
   326fc:	mov	lr, #1
   32700:	add	ip, sl, ip, lsl #2
   32704:	add	r7, sl, #128	; 0x80
   32708:	add	r6, r2, r3, lsl lr
   3270c:	mov	r0, r6
   32710:	mov	r1, #0
   32714:	ldrh	r2, [r0, #2]!
   32718:	add	r3, r4, r1
   3271c:	ubfx	r2, r2, #3, #1
   32720:	cmp	r3, #95	; 0x5f
   32724:	movne	r3, r2
   32728:	orreq	r3, r2, #1
   3272c:	cmp	r3, #0
   32730:	beq	32740 <__assert_fail@plt+0x20b9c>
   32734:	ldr	r3, [ip]
   32738:	orr	r3, r3, lr, lsl r1
   3273c:	str	r3, [ip]
   32740:	add	r1, r1, #1
   32744:	cmp	r1, #32
   32748:	bne	32714 <__assert_fail@plt+0x20b70>
   3274c:	add	ip, ip, #4
   32750:	add	r4, r4, #32
   32754:	cmp	ip, r7
   32758:	add	r6, r6, #64	; 0x40
   3275c:	bne	3270c <__assert_fail@plt+0x20b68>
   32760:	b	30a28 <__assert_fail@plt+0x1ee84>
   32764:	mov	r7, r4
   32768:	b	326ec <__assert_fail@plt+0x20b48>
   3276c:	cmp	r3, #3
   32770:	cmpne	r3, #0
   32774:	beq	32048 <__assert_fail@plt+0x204a4>
   32778:	ldr	r8, [sp, #84]	; 0x54
   3277c:	b	3203c <__assert_fail@plt+0x20498>
   32780:	ldr	r2, [sl, #64]	; 0x40
   32784:	cmp	r2, #31
   32788:	beq	32934 <__assert_fail@plt+0x20d90>
   3278c:	lsl	r3, r2, #5
   32790:	add	r2, r2, #1
   32794:	mov	r6, #0
   32798:	mov	lr, #3
   3279c:	add	r1, r3, #24
   327a0:	add	r5, r0, r3
   327a4:	str	r2, [sl, #64]	; 0x40
   327a8:	add	ip, r0, r1
   327ac:	add	r2, r3, #16
   327b0:	add	r2, r0, r2
   327b4:	add	r3, r3, #4
   327b8:	str	r6, [r5, #4]
   327bc:	adds	fp, r0, r3
   327c0:	str	r6, [r5, #8]
   327c4:	str	r6, [r5, #12]
   327c8:	str	r4, [r0, r1]
   327cc:	strb	lr, [ip, #4]
   327d0:	ldrb	r3, [r2, #14]
   327d4:	bic	r3, r3, #12
   327d8:	strb	r3, [r2, #14]
   327dc:	mvn	r3, #0
   327e0:	str	r6, [r5, #16]
   327e4:	str	r6, [r5, #20]
   327e8:	str	r3, [r5, #32]
   327ec:	beq	32538 <__assert_fail@plt+0x20994>
   327f0:	mov	r2, #0
   327f4:	mov	r3, #0
   327f8:	strd	r2, [sp, #128]	; 0x80
   327fc:	ldr	r1, [sl, #64]	; 0x40
   32800:	cmp	r1, #31
   32804:	beq	3290c <__assert_fail@plt+0x20d68>
   32808:	ldr	ip, [sl, #56]	; 0x38
   3280c:	lsl	r3, r1, #5
   32810:	add	r1, r1, #1
   32814:	mov	lr, #10
   32818:	str	r1, [sl, #64]	; 0x40
   3281c:	add	r1, r3, #4
   32820:	add	r2, r3, #16
   32824:	add	r6, ip, r1
   32828:	add	r3, ip, r3
   3282c:	mov	r1, #0
   32830:	add	r2, ip, r2
   32834:	cmp	r6, r1
   32838:	mvn	ip, #0
   3283c:	str	r6, [sp, #28]
   32840:	stmib	r3, {r1, fp}
   32844:	str	r8, [r3, #12]
   32848:	strb	lr, [sp, #132]	; 0x84
   3284c:	ldrd	r0, [sp, #128]	; 0x80
   32850:	strd	r0, [r3, #24]
   32854:	ldrb	r1, [r2, #14]
   32858:	bic	r1, r1, #12
   3285c:	strb	r1, [r2, #14]
   32860:	mov	r2, #0
   32864:	str	r2, [r3, #16]
   32868:	str	r2, [r3, #20]
   3286c:	str	ip, [r3, #32]
   32870:	str	r6, [r5, #4]
   32874:	str	r6, [r7, #4]
   32878:	bne	30570 <__assert_fail@plt+0x1e9cc>
   3287c:	b	32538 <__assert_fail@plt+0x20994>
   32880:	ldr	r7, [sp, #76]	; 0x4c
   32884:	b	32014 <__assert_fail@plt+0x20470>
   32888:	cmp	r3, #0
   3288c:	movne	r7, #0
   32890:	bne	328b4 <__assert_fail@plt+0x20d10>
   32894:	mov	r7, r3
   32898:	ldrb	r8, [sp, #84]	; 0x54
   3289c:	b	31fe0 <__assert_fail@plt+0x2043c>
   328a0:	mov	r3, #11
   328a4:	ldr	sl, [sp, #24]
   328a8:	ldr	r2, [sp, #204]	; 0xcc
   328ac:	str	r3, [r2]
   328b0:	b	31c3c <__assert_fail@plt+0x20098>
   328b4:	mov	r8, #0
   328b8:	b	31fe0 <__assert_fail@plt+0x2043c>
   328bc:	ldr	r0, [sp, #76]	; 0x4c
   328c0:	strd	r2, [sp, #56]	; 0x38
   328c4:	bl	11988 <strlen@plt>
   328c8:	cmp	r0, #1
   328cc:	ldrd	r2, [sp, #56]	; 0x38
   328d0:	bhi	32190 <__assert_fail@plt+0x205ec>
   328d4:	cmp	r3, #3
   328d8:	beq	32178 <__assert_fail@plt+0x205d4>
   328dc:	ldr	r1, [sp, #76]	; 0x4c
   328e0:	ldrb	r7, [r1]
   328e4:	b	31fc8 <__assert_fail@plt+0x20424>
   328e8:	mov	r0, #996	; 0x3e4
   328ec:	bl	39028 <__assert_fail@plt+0x27484>
   328f0:	cmp	r0, #0
   328f4:	beq	32538 <__assert_fail@plt+0x20994>
   328f8:	ldr	r2, [sl, #56]	; 0x38
   328fc:	mov	r3, #0
   32900:	str	r2, [r0]
   32904:	str	r0, [sl, #56]	; 0x38
   32908:	b	32574 <__assert_fail@plt+0x209d0>
   3290c:	mov	r0, #996	; 0x3e4
   32910:	bl	39028 <__assert_fail@plt+0x27484>
   32914:	cmp	r0, #0
   32918:	beq	32538 <__assert_fail@plt+0x20994>
   3291c:	ldr	r3, [sl, #56]	; 0x38
   32920:	mov	r1, r6
   32924:	str	r3, [r0]
   32928:	str	r0, [sl, #56]	; 0x38
   3292c:	str	r6, [sl, #64]	; 0x40
   32930:	b	32808 <__assert_fail@plt+0x20c64>
   32934:	mov	r0, #996	; 0x3e4
   32938:	bl	39028 <__assert_fail@plt+0x27484>
   3293c:	cmp	r0, #0
   32940:	beq	32538 <__assert_fail@plt+0x20994>
   32944:	ldr	r3, [sl, #56]	; 0x38
   32948:	mov	r2, #0
   3294c:	str	r3, [r0]
   32950:	str	r0, [sl, #56]	; 0x38
   32954:	b	3278c <__assert_fail@plt+0x20be8>
   32958:	ldr	r0, [sp, #84]	; 0x54
   3295c:	strd	r2, [sp, #56]	; 0x38
   32960:	bl	11988 <strlen@plt>
   32964:	cmp	r0, #1
   32968:	bhi	32190 <__assert_fail@plt+0x205ec>
   3296c:	ldrd	r2, [sp, #56]	; 0x38
   32970:	cmp	r2, #0
   32974:	movne	r7, #0
   32978:	bne	31fd8 <__assert_fail@plt+0x20434>
   3297c:	b	31fc4 <__assert_fail@plt+0x20420>
   32980:	ldr	r0, [r3]
   32984:	ldr	ip, [r4, #4]
   32988:	and	r2, r2, r0
   3298c:	ldr	r0, [r4, #8]
   32990:	str	r2, [r4]
   32994:	ldr	lr, [r3, #4]
   32998:	ldr	r2, [r4, #12]
   3299c:	and	ip, ip, lr
   329a0:	ldr	lr, [r4, #16]
   329a4:	str	ip, [r4, #4]
   329a8:	ldr	r5, [r3, #8]
   329ac:	ldr	ip, [r4, #20]
   329b0:	and	r0, r0, r5
   329b4:	str	r0, [r4, #8]
   329b8:	ldr	r5, [r3, #12]
   329bc:	ldr	r0, [r4, #24]
   329c0:	and	r2, r2, r5
   329c4:	str	r2, [r4, #12]
   329c8:	ldr	r5, [r3, #16]
   329cc:	ldr	r2, [r4, #28]
   329d0:	and	lr, lr, r5
   329d4:	str	lr, [r4, #16]
   329d8:	ldr	lr, [r3, #20]
   329dc:	and	ip, ip, lr
   329e0:	str	ip, [r4, #20]
   329e4:	ldr	ip, [r3, #24]
   329e8:	and	r0, r0, ip
   329ec:	str	r0, [r4, #24]
   329f0:	ldr	r3, [r3, #28]
   329f4:	and	r3, r3, r2
   329f8:	str	r3, [r4, #28]
   329fc:	b	3243c <__assert_fail@plt+0x20898>
   32a00:	mov	r0, #996	; 0x3e4
   32a04:	bl	39028 <__assert_fail@plt+0x27484>
   32a08:	cmp	r0, #0
   32a0c:	beq	32538 <__assert_fail@plt+0x20994>
   32a10:	ldr	r2, [sl, #56]	; 0x38
   32a14:	mov	r3, #0
   32a18:	mov	r1, r3
   32a1c:	str	r2, [r0]
   32a20:	str	r0, [sl, #56]	; 0x38
   32a24:	str	r3, [sl, #64]	; 0x40
   32a28:	b	324cc <__assert_fail@plt+0x20928>
   32a2c:	ldr	sl, [sp, #24]
   32a30:	b	32538 <__assert_fail@plt+0x20994>
   32a34:	lsl	r3, r1, #1
   32a38:	mov	r0, r2
   32a3c:	add	r3, r3, #1
   32a40:	str	r3, [sp, #40]	; 0x28
   32a44:	lsl	r3, r3, #2
   32a48:	mov	r1, r3
   32a4c:	str	r3, [sp, #56]	; 0x38
   32a50:	bl	39064 <__assert_fail@plt+0x274c0>
   32a54:	ldr	r3, [sp, #56]	; 0x38
   32a58:	mov	r2, r0
   32a5c:	str	r2, [sp, #52]	; 0x34
   32a60:	mov	r1, r3
   32a64:	ldr	r3, [sp, #16]
   32a68:	ldr	r0, [r3, #8]
   32a6c:	bl	39064 <__assert_fail@plt+0x274c0>
   32a70:	ldr	r2, [sp, #52]	; 0x34
   32a74:	cmp	r0, #0
   32a78:	cmpne	r2, #0
   32a7c:	beq	32ab4 <__assert_fail@plt+0x20f10>
   32a80:	ldr	r1, [sp, #16]
   32a84:	str	r2, [r1, #4]
   32a88:	str	r0, [r1, #8]
   32a8c:	ldr	r3, [r1, #32]
   32a90:	b	32088 <__assert_fail@plt+0x204e4>
   32a94:	add	fp, sp, #128	; 0x80
   32a98:	ldr	r7, [sp, #28]
   32a9c:	b	319c4 <__assert_fail@plt+0x1fe20>
   32aa0:	ldr	r6, [sp, #28]
   32aa4:	mov	r4, r6
   32aa8:	b	318d4 <__assert_fail@plt+0x1fd30>
   32aac:	mov	r5, r0
   32ab0:	b	30b24 <__assert_fail@plt+0x1ef80>
   32ab4:	mov	r8, r0
   32ab8:	mov	r0, r2
   32abc:	ldr	sl, [sp, #24]
   32ac0:	bl	19610 <__assert_fail@plt+0x7a6c>
   32ac4:	mov	r0, r8
   32ac8:	bl	19610 <__assert_fail@plt+0x7a6c>
   32acc:	ldr	r2, [sp, #204]	; 0xcc
   32ad0:	mov	r3, #12
   32ad4:	str	r3, [r2]
   32ad8:	b	31c3c <__assert_fail@plt+0x20098>
   32adc:	ldr	r8, [sp, #24]
   32ae0:	b	3166c <__assert_fail@plt+0x1fac8>
   32ae4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   32ae8:	strd	r6, [sp, #8]
   32aec:	mov	r7, r2
   32af0:	strd	r8, [sp, #16]
   32af4:	mov	r8, r1
   32af8:	strd	sl, [sp, #24]
   32afc:	mov	fp, r0
   32b00:	str	lr, [sp, #32]
   32b04:	sub	sp, sp, #44	; 0x2c
   32b08:	ldr	r6, [sp, #80]	; 0x50
   32b0c:	str	r3, [sp, #12]
   32b10:	ldr	r5, [sp, #84]	; 0x54
   32b14:	ldr	r9, [r1]
   32b18:	str	r6, [sp]
   32b1c:	str	r5, [sp, #4]
   32b20:	bl	303fc <__assert_fail@plt+0x1e858>
   32b24:	ldr	r2, [r5]
   32b28:	clz	r3, r0
   32b2c:	lsr	r3, r3, #5
   32b30:	cmp	r2, #0
   32b34:	moveq	r3, #0
   32b38:	cmp	r3, #0
   32b3c:	bne	32cf8 <__assert_fail@plt+0x21154>
   32b40:	mov	r4, r0
   32b44:	strd	r8, [sp, #16]
   32b48:	str	r3, [sp, #24]
   32b4c:	ldrb	r2, [r7, #4]
   32b50:	and	r3, r2, #247	; 0xf7
   32b54:	cmp	r3, #2
   32b58:	beq	32bd4 <__assert_fail@plt+0x21030>
   32b5c:	clz	r3, r6
   32b60:	lsr	r3, r3, #5
   32b64:	cmp	r2, #9
   32b68:	orrne	r3, r3, #1
   32b6c:	cmp	r3, #0
   32b70:	beq	32bd4 <__assert_fail@plt+0x21030>
   32b74:	mov	r2, r7
   32b78:	mov	r0, fp
   32b7c:	str	r6, [sp]
   32b80:	str	r5, [sp, #4]
   32b84:	ldr	r3, [sp, #12]
   32b88:	ldr	r1, [sp, #16]
   32b8c:	bl	303fc <__assert_fail@plt+0x1e858>
   32b90:	ldr	r2, [r5]
   32b94:	clz	r3, r0
   32b98:	mov	sl, r0
   32b9c:	lsr	r3, r3, #5
   32ba0:	cmp	r2, #0
   32ba4:	moveq	r3, #0
   32ba8:	cmp	r3, #0
   32bac:	bne	32cc0 <__assert_fail@plt+0x2111c>
   32bb0:	cmp	r4, #0
   32bb4:	cmpne	r0, #0
   32bb8:	bne	32bf4 <__assert_fail@plt+0x21050>
   32bbc:	ldrb	r2, [r7, #4]
   32bc0:	cmp	r4, #0
   32bc4:	moveq	r4, r0
   32bc8:	and	r3, r2, #247	; 0xf7
   32bcc:	cmp	r3, #2
   32bd0:	bne	32b5c <__assert_fail@plt+0x20fb8>
   32bd4:	mov	r0, r4
   32bd8:	add	sp, sp, #44	; 0x2c
   32bdc:	ldrd	r4, [sp]
   32be0:	ldrd	r6, [sp, #8]
   32be4:	ldrd	r8, [sp, #16]
   32be8:	ldrd	sl, [sp, #24]
   32bec:	add	sp, sp, #32
   32bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   32bf4:	ldr	r2, [sp, #20]
   32bf8:	mov	r0, #0
   32bfc:	mov	r1, #0
   32c00:	strd	r0, [sp, #32]
   32c04:	ldr	ip, [r2, #64]	; 0x40
   32c08:	cmp	ip, #31
   32c0c:	beq	32c8c <__assert_fail@plt+0x210e8>
   32c10:	ldr	r0, [r2, #56]	; 0x38
   32c14:	lsl	r3, ip, #5
   32c18:	add	ip, ip, #1
   32c1c:	add	r1, r3, #4
   32c20:	mov	r2, #16
   32c24:	ldr	lr, [sp, #24]
   32c28:	strb	r2, [sp, #36]	; 0x24
   32c2c:	add	r2, r0, r3
   32c30:	add	r3, r3, #16
   32c34:	add	r3, r0, r3
   32c38:	add	r0, r0, r1
   32c3c:	ldr	r1, [sp, #20]
   32c40:	cmp	r0, #0
   32c44:	ldrd	r8, [sp, #32]
   32c48:	str	ip, [r1, #64]	; 0x40
   32c4c:	mvn	r1, #0
   32c50:	str	lr, [r2, #4]
   32c54:	str	r4, [r2, #8]
   32c58:	str	sl, [r2, #12]
   32c5c:	strd	r8, [r2, #24]
   32c60:	ldrb	ip, [r3, #14]
   32c64:	bic	ip, ip, #12
   32c68:	strb	ip, [r3, #14]
   32c6c:	str	lr, [r2, #16]
   32c70:	str	lr, [r2, #20]
   32c74:	str	r1, [r2, #32]
   32c78:	str	r0, [r4]
   32c7c:	str	r0, [sl]
   32c80:	beq	32cd8 <__assert_fail@plt+0x21134>
   32c84:	mov	r4, r0
   32c88:	b	32b4c <__assert_fail@plt+0x20fa8>
   32c8c:	mov	r0, #996	; 0x3e4
   32c90:	str	r3, [sp, #28]
   32c94:	bl	39028 <__assert_fail@plt+0x27484>
   32c98:	cmp	r0, #0
   32c9c:	beq	32cd8 <__assert_fail@plt+0x21134>
   32ca0:	ldr	lr, [sp, #20]
   32ca4:	mov	ip, #1
   32ca8:	mov	r1, #4
   32cac:	ldr	r3, [sp, #28]
   32cb0:	ldr	r2, [lr, #56]	; 0x38
   32cb4:	str	r2, [r0]
   32cb8:	str	r0, [lr, #56]	; 0x38
   32cbc:	b	32c20 <__assert_fail@plt+0x2107c>
   32cc0:	cmp	r4, #0
   32cc4:	beq	32cf8 <__assert_fail@plt+0x21154>
   32cc8:	mov	r0, r4
   32ccc:	mov	r4, #0
   32cd0:	bl	28054 <__assert_fail@plt+0x164b0>
   32cd4:	b	32bd4 <__assert_fail@plt+0x21030>
   32cd8:	mov	r0, sl
   32cdc:	bl	28054 <__assert_fail@plt+0x164b0>
   32ce0:	mov	r0, r4
   32ce4:	mov	r4, #0
   32ce8:	bl	28054 <__assert_fail@plt+0x164b0>
   32cec:	mov	r3, #12
   32cf0:	str	r3, [r5]
   32cf4:	b	32bd4 <__assert_fail@plt+0x21030>
   32cf8:	mov	r4, #0
   32cfc:	b	32bd4 <__assert_fail@plt+0x21030>
   32d00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   32d04:	mov	r5, r2
   32d08:	mov	r4, r0
   32d0c:	strd	r6, [sp, #8]
   32d10:	ldr	r6, [r1]
   32d14:	strd	r8, [sp, #16]
   32d18:	mov	r8, r3
   32d1c:	strd	sl, [sp, #24]
   32d20:	mov	sl, r1
   32d24:	str	lr, [sp, #32]
   32d28:	sub	sp, sp, #76	; 0x4c
   32d2c:	ldr	r9, [sp, #116]	; 0x74
   32d30:	ldr	ip, [r6, #84]	; 0x54
   32d34:	str	r9, [sp, #4]
   32d38:	str	ip, [sp, #16]
   32d3c:	ldr	ip, [sp, #112]	; 0x70
   32d40:	str	ip, [sp]
   32d44:	bl	32ae4 <__assert_fail@plt+0x20f40>
   32d48:	ldr	r2, [r9]
   32d4c:	clz	r3, r0
   32d50:	lsr	r3, r3, #5
   32d54:	cmp	r2, #0
   32d58:	moveq	r3, #0
   32d5c:	cmp	r3, #0
   32d60:	bne	338a8 <__assert_fail@plt+0x21d04>
   32d64:	movw	r3, #1026	; 0x402
   32d68:	mov	r2, #65280	; 0xff00
   32d6c:	movt	r2, #65503	; 0xffdf
   32d70:	and	r3, r8, r3
   32d74:	str	r8, [sp, #12]
   32d78:	mov	r7, r0
   32d7c:	str	sl, [sp, #20]
   32d80:	str	r3, [sp, #32]
   32d84:	and	r3, r8, #4608	; 0x1200
   32d88:	str	r3, [sp, #36]	; 0x24
   32d8c:	and	r3, r8, #33792	; 0x8400
   32d90:	str	r2, [sp, #40]	; 0x28
   32d94:	str	r3, [sp, #44]	; 0x2c
   32d98:	and	r3, r8, #8192	; 0x2000
   32d9c:	str	r9, [sp, #116]	; 0x74
   32da0:	str	r3, [sp, #28]
   32da4:	and	r3, r8, #8
   32da8:	str	r3, [sp, #52]	; 0x34
   32dac:	and	r3, r8, #2048	; 0x800
   32db0:	str	r3, [sp, #56]	; 0x38
   32db4:	and	r3, r8, #524288	; 0x80000
   32db8:	str	r3, [sp, #48]	; 0x30
   32dbc:	and	r3, r8, #16384	; 0x4000
   32dc0:	str	r3, [sp, #60]	; 0x3c
   32dc4:	ldrb	r3, [r5, #4]
   32dc8:	cmp	r3, #10
   32dcc:	bne	33180 <__assert_fail@plt+0x215dc>
   32dd0:	ldr	r0, [r4, #40]	; 0x28
   32dd4:	ldr	r3, [r4, #56]	; 0x38
   32dd8:	cmp	r3, r0
   32ddc:	ble	33154 <__assert_fail@plt+0x215b0>
   32de0:	ldr	r1, [r4, #4]
   32de4:	add	fp, r0, #1
   32de8:	ldrb	ip, [r5, #6]
   32dec:	ldr	r2, [r4, #80]	; 0x50
   32df0:	ldrb	sl, [r1, r0]
   32df4:	bic	ip, ip, #96	; 0x60
   32df8:	cmp	r2, #1
   32dfc:	strb	sl, [r5]
   32e00:	strb	ip, [r5, #6]
   32e04:	ble	331a0 <__assert_fail@plt+0x215fc>
   32e08:	ldr	ip, [r4, #28]
   32e0c:	cmp	r0, ip
   32e10:	beq	32e24 <__assert_fail@plt+0x21280>
   32e14:	ldr	ip, [r4, #8]
   32e18:	ldr	ip, [ip, r0, lsl #2]
   32e1c:	cmn	ip, #1
   32e20:	beq	33464 <__assert_fail@plt+0x218c0>
   32e24:	cmp	sl, #92	; 0x5c
   32e28:	beq	331dc <__assert_fail@plt+0x21638>
   32e2c:	ldr	r2, [r4, #8]
   32e30:	mov	r1, #1
   32e34:	strb	r1, [r5, #4]
   32e38:	ldr	r2, [r2, r0, lsl #2]
   32e3c:	mov	r0, r2
   32e40:	str	r2, [sp, #24]
   32e44:	bl	119c4 <iswalnum@plt>
   32e48:	ldr	r2, [sp, #24]
   32e4c:	adds	r0, r0, #0
   32e50:	movne	r0, #1
   32e54:	ldrb	r1, [r5, #6]
   32e58:	cmp	r2, #95	; 0x5f
   32e5c:	orreq	r0, r0, #1
   32e60:	bfi	r1, r0, #6, #1
   32e64:	strb	r1, [r5, #6]
   32e68:	sub	r3, sl, #10
   32e6c:	cmp	r3, #115	; 0x73
   32e70:	ldrls	pc, [pc, r3, lsl #2]
   32e74:	b	33054 <__assert_fail@plt+0x214b0>
   32e78:	andeq	r3, r3, ip, asr #9
   32e7c:	andeq	r3, r3, r4, asr r0
   32e80:	andeq	r3, r3, r4, asr r0
   32e84:	andeq	r3, r3, r4, asr r0
   32e88:	andeq	r3, r3, r4, asr r0
   32e8c:	andeq	r3, r3, r4, asr r0
   32e90:	andeq	r3, r3, r4, asr r0
   32e94:	andeq	r3, r3, r4, asr r0
   32e98:	andeq	r3, r3, r4, asr r0
   32e9c:	andeq	r3, r3, r4, asr r0
   32ea0:	andeq	r3, r3, r4, asr r0
   32ea4:	andeq	r3, r3, r4, asr r0
   32ea8:	andeq	r3, r3, r4, asr r0
   32eac:	andeq	r3, r3, r4, asr r0
   32eb0:	andeq	r3, r3, r4, asr r0
   32eb4:	andeq	r3, r3, r4, asr r0
   32eb8:	andeq	r3, r3, r4, asr r0
   32ebc:	andeq	r3, r3, r4, asr r0
   32ec0:	andeq	r3, r3, r4, asr r0
   32ec4:	andeq	r3, r3, r4, asr r0
   32ec8:	andeq	r3, r3, r4, asr r0
   32ecc:	andeq	r3, r3, r4, asr r0
   32ed0:	andeq	r3, r3, r4, asr r0
   32ed4:	andeq	r3, r3, r4, asr r0
   32ed8:	andeq	r3, r3, r4, asr r0
   32edc:	andeq	r3, r3, r4, asr r0
   32ee0:	andeq	r3, r3, ip, ror #9
   32ee4:	andeq	r3, r3, r4, asr r0
   32ee8:	andeq	r3, r3, r4, asr r0
   32eec:	andeq	r3, r3, r4, asr r0
   32ef0:	andeq	r3, r3, ip, lsl r5
   32ef4:	andeq	r3, r3, r8, lsr r5
   32ef8:	andeq	r3, r3, r8, asr r5
   32efc:	andeq	r3, r3, r8, ror #10
   32f00:	andeq	r3, r3, r4, asr r0
   32f04:	andeq	r3, r3, r4, asr r0
   32f08:	andeq	r3, r3, r4, lsl #11
   32f0c:	andeq	r3, r3, r4, asr r0
   32f10:	andeq	r3, r3, r4, asr r0
   32f14:	andeq	r3, r3, r4, asr r0
   32f18:	andeq	r3, r3, r4, asr r0
   32f1c:	andeq	r3, r3, r4, asr r0
   32f20:	andeq	r3, r3, r4, asr r0
   32f24:	andeq	r3, r3, r4, asr r0
   32f28:	andeq	r3, r3, r4, asr r0
   32f2c:	andeq	r3, r3, r4, asr r0
   32f30:	andeq	r3, r3, r4, asr r0
   32f34:	andeq	r3, r3, r4, asr r0
   32f38:	andeq	r3, r3, r4, asr r0
   32f3c:	andeq	r3, r3, r4, asr r0
   32f40:	andeq	r3, r3, r4, asr r0
   32f44:	andeq	r3, r3, r4, asr r0
   32f48:	andeq	r3, r3, r4, asr r0
   32f4c:	muleq	r3, r4, r5
   32f50:	andeq	r3, r3, r4, asr r0
   32f54:	andeq	r3, r3, r4, asr r0
   32f58:	andeq	r3, r3, r4, asr r0
   32f5c:	andeq	r3, r3, r4, asr r0
   32f60:	andeq	r3, r3, r4, asr r0
   32f64:	andeq	r3, r3, r4, asr r0
   32f68:	andeq	r3, r3, r4, asr r0
   32f6c:	andeq	r3, r3, r4, asr r0
   32f70:	andeq	r3, r3, r4, asr r0
   32f74:	andeq	r3, r3, r4, asr r0
   32f78:	andeq	r3, r3, r4, asr r0
   32f7c:	andeq	r3, r3, r4, asr r0
   32f80:	andeq	r3, r3, r4, asr r0
   32f84:	andeq	r3, r3, r4, asr r0
   32f88:	andeq	r3, r3, r4, asr r0
   32f8c:	andeq	r3, r3, r4, asr r0
   32f90:	andeq	r3, r3, r4, asr r0
   32f94:	andeq	r3, r3, r4, asr r0
   32f98:	andeq	r3, r3, r4, asr r0
   32f9c:	andeq	r3, r3, r4, asr r0
   32fa0:	andeq	r3, r3, r4, asr r0
   32fa4:	andeq	r3, r3, r4, asr r0
   32fa8:	andeq	r3, r3, r4, asr r0
   32fac:	andeq	r3, r3, r4, asr r0
   32fb0:	andeq	r3, r3, r4, asr r0
   32fb4:	andeq	r3, r3, r4, asr r0
   32fb8:	andeq	r3, r3, r4, asr r0
   32fbc:			; <UNDEFINED> instruction: 0x000335b0
   32fc0:	andeq	r3, r3, r4, asr r0
   32fc4:	andeq	r3, r3, r4, asr r0
   32fc8:	andeq	r3, r3, r0, asr #11
   32fcc:	andeq	r3, r3, r4, asr r0
   32fd0:	andeq	r3, r3, r4, asr r0
   32fd4:	andeq	r3, r3, r4, asr r0
   32fd8:	andeq	r3, r3, r4, asr r0
   32fdc:	andeq	r3, r3, r4, asr r0
   32fe0:	andeq	r3, r3, r4, asr r0
   32fe4:	andeq	r3, r3, r4, asr r0
   32fe8:	andeq	r3, r3, r4, asr r0
   32fec:	andeq	r3, r3, r4, asr r0
   32ff0:	andeq	r3, r3, r4, asr r0
   32ff4:	andeq	r3, r3, r4, asr r0
   32ff8:	andeq	r3, r3, r4, asr r0
   32ffc:	andeq	r3, r3, r4, asr r0
   33000:	andeq	r3, r3, r4, asr r0
   33004:	andeq	r3, r3, r4, asr r0
   33008:	andeq	r3, r3, r4, asr r0
   3300c:	andeq	r3, r3, r4, asr r0
   33010:	andeq	r3, r3, r4, asr r0
   33014:	andeq	r3, r3, r4, asr r0
   33018:	andeq	r3, r3, r4, asr r0
   3301c:	andeq	r3, r3, r4, asr r0
   33020:	andeq	r3, r3, r4, asr r0
   33024:	andeq	r3, r3, r4, asr r0
   33028:	andeq	r3, r3, r4, asr r0
   3302c:	andeq	r3, r3, r4, asr r0
   33030:	andeq	r3, r3, r4, asr r0
   33034:	andeq	r3, r3, r4, asr r0
   33038:	andeq	r3, r3, r4, asr r0
   3303c:	ldrdeq	r3, [r3], -r8
   33040:	andeq	r3, r3, r8, asr #32
   33044:			; <UNDEFINED> instruction: 0x000334b0
   33048:	ldr	r3, [sp, #44]	; 0x2c
   3304c:	cmp	r3, #32768	; 0x8000
   33050:	beq	334d8 <__assert_fail@plt+0x21934>
   33054:	str	fp, [r4, #40]	; 0x28
   33058:	ldr	fp, [r6, #84]	; 0x54
   3305c:	mov	r2, r5
   33060:	mov	r0, r4
   33064:	ldr	ip, [sp, #16]
   33068:	ldr	r3, [sp, #12]
   3306c:	ldr	r1, [sp, #20]
   33070:	str	ip, [r6, #84]	; 0x54
   33074:	ldr	ip, [sp, #112]	; 0x70
   33078:	str	ip, [sp]
   3307c:	ldr	ip, [sp, #116]	; 0x74
   33080:	str	ip, [sp, #4]
   33084:	bl	32ae4 <__assert_fail@plt+0x20f40>
   33088:	ldr	r3, [sp, #116]	; 0x74
   3308c:	mov	sl, r0
   33090:	ldr	r2, [r3]
   33094:	clz	r3, r0
   33098:	lsr	r3, r3, #5
   3309c:	cmp	r2, #0
   330a0:	moveq	r3, #0
   330a4:	cmp	r3, #0
   330a8:	bne	33890 <__assert_fail@plt+0x21cec>
   330ac:	ldr	r3, [r6, #84]	; 0x54
   330b0:	orr	fp, r3, fp
   330b4:	str	fp, [r6, #84]	; 0x54
   330b8:	mov	r2, #0
   330bc:	mov	r3, #0
   330c0:	strd	r2, [sp, #64]	; 0x40
   330c4:	ldr	fp, [r6, #64]	; 0x40
   330c8:	cmp	fp, #31
   330cc:	beq	331f8 <__assert_fail@plt+0x21654>
   330d0:	ldr	r0, [r6, #56]	; 0x38
   330d4:	lsl	r3, fp, #5
   330d8:	add	fp, fp, #1
   330dc:	add	ip, r3, #4
   330e0:	add	r2, r0, r3
   330e4:	mov	lr, #0
   330e8:	str	fp, [r6, #64]	; 0x40
   330ec:	mov	fp, #10
   330f0:	add	r3, r3, #16
   330f4:	str	lr, [r2, #4]
   330f8:	add	r3, r0, r3
   330fc:	cmp	r7, lr
   33100:	str	r7, [r2, #8]
   33104:	add	r0, r0, ip
   33108:	mvn	ip, #0
   3310c:	str	sl, [r2, #12]
   33110:	strb	fp, [sp, #68]	; 0x44
   33114:	ldrd	r8, [sp, #64]	; 0x40
   33118:	strd	r8, [r2, #24]
   3311c:	ldrb	fp, [r3, #14]
   33120:	bic	fp, fp, #12
   33124:	strb	fp, [r3, #14]
   33128:	str	lr, [r2, #16]
   3312c:	str	lr, [r2, #20]
   33130:	str	ip, [r2, #32]
   33134:	strne	r0, [r7]
   33138:	cmp	sl, #0
   3313c:	beq	33168 <__assert_fail@plt+0x215c4>
   33140:	cmp	r0, #0
   33144:	str	r0, [sl]
   33148:	beq	33170 <__assert_fail@plt+0x215cc>
   3314c:	mov	r7, r0
   33150:	b	32dc4 <__assert_fail@plt+0x21220>
   33154:	mov	r3, #2
   33158:	mov	sl, #0
   3315c:	strb	r3, [r5, #4]
   33160:	str	r0, [r4, #40]	; 0x28
   33164:	b	330b8 <__assert_fail@plt+0x21514>
   33168:	cmp	r0, #0
   3316c:	bne	3314c <__assert_fail@plt+0x215a8>
   33170:	ldr	r9, [sp, #116]	; 0x74
   33174:	mov	r3, #12
   33178:	mov	r7, #0
   3317c:	str	r3, [r9]
   33180:	mov	r0, r7
   33184:	add	sp, sp, #76	; 0x4c
   33188:	ldrd	r4, [sp]
   3318c:	ldrd	r6, [sp, #8]
   33190:	ldrd	r8, [sp, #16]
   33194:	ldrd	sl, [sp, #24]
   33198:	add	sp, sp, #32
   3319c:	pop	{pc}		; (ldr pc, [sp], #4)
   331a0:	cmp	sl, #92	; 0x5c
   331a4:	beq	331dc <__assert_fail@plt+0x21638>
   331a8:	mov	r2, #1
   331ac:	strb	r2, [r5, #4]
   331b0:	bl	11964 <__ctype_b_loc@plt>
   331b4:	ldr	r0, [r0]
   331b8:	lsl	r2, sl, #1
   331bc:	ldrb	r1, [r5, #6]
   331c0:	ldrh	r2, [r0, r2]
   331c4:	ubfx	r2, r2, #3, #1
   331c8:	cmp	sl, #95	; 0x5f
   331cc:	orreq	r2, r2, #1
   331d0:	bfi	r1, r2, #6, #1
   331d4:	strb	r1, [r5, #6]
   331d8:	b	32e68 <__assert_fail@plt+0x212c4>
   331dc:	ldr	r3, [r4, #48]	; 0x30
   331e0:	cmp	r3, fp
   331e4:	bgt	33224 <__assert_fail@plt+0x21680>
   331e8:	mov	r3, #36	; 0x24
   331ec:	strb	r3, [r5, #4]
   331f0:	str	fp, [r4, #40]	; 0x28
   331f4:	b	33058 <__assert_fail@plt+0x214b4>
   331f8:	mov	r0, #996	; 0x3e4
   331fc:	bl	39028 <__assert_fail@plt+0x27484>
   33200:	cmp	r0, #0
   33204:	beq	33170 <__assert_fail@plt+0x215cc>
   33208:	ldr	r2, [r6, #56]	; 0x38
   3320c:	mov	fp, #1
   33210:	mov	ip, #4
   33214:	mov	r3, #0
   33218:	str	r2, [r0]
   3321c:	str	r0, [r6, #56]	; 0x38
   33220:	b	330e0 <__assert_fail@plt+0x2153c>
   33224:	ldrb	r3, [r4, #75]	; 0x4b
   33228:	add	r0, r0, #2
   3322c:	mov	r8, r0
   33230:	cmp	r3, #0
   33234:	bne	3382c <__assert_fail@plt+0x21c88>
   33238:	ldrb	sl, [r1, fp]
   3323c:	mov	r1, #1
   33240:	strb	sl, [r5]
   33244:	cmp	r2, r1
   33248:	strb	r1, [r5, #4]
   3324c:	ble	33484 <__assert_fail@plt+0x218e0>
   33250:	ldr	r0, [r4, #8]
   33254:	add	r0, r0, fp, lsl #2
   33258:	ldr	fp, [r0]
   3325c:	mov	r0, fp
   33260:	sub	fp, fp, #95	; 0x5f
   33264:	bl	119c4 <iswalnum@plt>
   33268:	ldrb	r2, [r5, #6]
   3326c:	clz	fp, fp
   33270:	cmp	r0, #0
   33274:	lsr	fp, fp, #5
   33278:	movne	fp, #1
   3327c:	bfi	r2, fp, #6, #1
   33280:	strb	r2, [r5, #6]
   33284:	sub	r2, sl, #39	; 0x27
   33288:	cmp	r2, #86	; 0x56
   3328c:	ldrls	pc, [pc, r2, lsl #2]
   33290:	b	33428 <__assert_fail@plt+0x21884>
   33294:	andeq	r3, r3, ip, ror #15
   33298:	andeq	r3, r3, r0, lsl r8
   3329c:	strdeq	r3, [r3], -r4
   332a0:	andeq	r3, r3, r8, lsr #8
   332a4:	andeq	r3, r3, r4, lsl r6
   332a8:	andeq	r3, r3, r8, lsr #8
   332ac:	andeq	r3, r3, r8, lsr #8
   332b0:	andeq	r3, r3, r8, lsr #8
   332b4:	andeq	r3, r3, r8, lsr #8
   332b8:	andeq	r3, r3, r8, lsr #8
   332bc:	andeq	r3, r3, r0, lsr r6
   332c0:	andeq	r3, r3, r0, lsr r6
   332c4:	andeq	r3, r3, r0, lsr r6
   332c8:	andeq	r3, r3, r0, lsr r6
   332cc:	andeq	r3, r3, r0, lsr r6
   332d0:	andeq	r3, r3, r0, lsr r6
   332d4:	andeq	r3, r3, r0, lsr r6
   332d8:	andeq	r3, r3, r0, lsr r6
   332dc:	andeq	r3, r3, r0, lsr r6
   332e0:	andeq	r3, r3, r8, lsr #8
   332e4:	andeq	r3, r3, r8, lsr #8
   332e8:	andeq	r3, r3, r4, asr r6
   332ec:	andeq	r3, r3, r8, lsr #8
   332f0:	andeq	r3, r3, r8, ror r6
   332f4:	muleq	r3, ip, r6
   332f8:	andeq	r3, r3, r8, lsr #8
   332fc:	andeq	r3, r3, r8, lsr #8
   33300:			; <UNDEFINED> instruction: 0x000336b8
   33304:	andeq	r3, r3, r8, lsr #8
   33308:	andeq	r3, r3, r8, lsr #8
   3330c:	andeq	r3, r3, r8, lsr #8
   33310:	andeq	r3, r3, r8, lsr #8
   33314:	andeq	r3, r3, r8, lsr #8
   33318:	andeq	r3, r3, r8, lsr #8
   3331c:	andeq	r3, r3, r8, lsr #8
   33320:	andeq	r3, r3, r8, lsr #8
   33324:	andeq	r3, r3, r8, lsr #8
   33328:	andeq	r3, r3, r8, lsr #8
   3332c:	andeq	r3, r3, r8, lsr #8
   33330:	andeq	r3, r3, r8, lsr #8
   33334:	andeq	r3, r3, r8, lsr #8
   33338:	andeq	r3, r3, r8, lsr #8
   3333c:	andeq	r3, r3, r8, lsr #8
   33340:	andeq	r3, r3, r8, lsr #8
   33344:	ldrdeq	r3, [r3], -ip
   33348:	andeq	r3, r3, r8, lsr #8
   3334c:	andeq	r3, r3, r8, lsr #8
   33350:	andeq	r3, r3, r8, lsr #8
   33354:	strdeq	r3, [r3], -r8
   33358:	andeq	r3, r3, r8, lsr #8
   3335c:	andeq	r3, r3, r8, lsr #8
   33360:	andeq	r3, r3, r8, lsr #8
   33364:	andeq	r3, r3, r8, lsr #8
   33368:	andeq	r3, r3, r8, lsr #8
   3336c:	andeq	r3, r3, r8, lsr #8
   33370:	andeq	r3, r3, r8, lsr #8
   33374:	andeq	r3, r3, r8, lsr #8
   33378:	andeq	r3, r3, r4, lsl r7
   3337c:	andeq	r3, r3, r8, lsr #8
   33380:	andeq	r3, r3, r8, lsr r7
   33384:	andeq	r3, r3, r8, lsr #8
   33388:	andeq	r3, r3, r8, lsr #8
   3338c:	andeq	r3, r3, r8, lsr #8
   33390:	andeq	r3, r3, r8, lsr #8
   33394:	andeq	r3, r3, r8, lsr #8
   33398:	andeq	r3, r3, r8, lsr #8
   3339c:	andeq	r3, r3, r8, lsr #8
   333a0:	andeq	r3, r3, r8, lsr #8
   333a4:	andeq	r3, r3, r8, lsr #8
   333a8:	andeq	r3, r3, r8, lsr #8
   333ac:	andeq	r3, r3, r8, lsr #8
   333b0:	andeq	r3, r3, r8, lsr #8
   333b4:	andeq	r3, r3, r8, lsr #8
   333b8:	andeq	r3, r3, r8, lsr #8
   333bc:	andeq	r3, r3, r8, lsr #8
   333c0:	andeq	r3, r3, r8, lsr #8
   333c4:	andeq	r3, r3, ip, asr r7
   333c8:	andeq	r3, r3, r8, lsr #8
   333cc:	andeq	r3, r3, r8, lsr #8
   333d0:	andeq	r3, r3, r8, lsr #8
   333d4:	andeq	r3, r3, r8, ror r7
   333d8:	andeq	r3, r3, r8, lsr #8
   333dc:	andeq	r3, r3, r8, lsr #8
   333e0:	andeq	r3, r3, r8, lsr #8
   333e4:	muleq	r3, r4, r7
   333e8:			; <UNDEFINED> instruction: 0x000337b0
   333ec:	ldrdeq	r3, [r3], -r0
   333f0:	ldr	r3, [sp, #12]
   333f4:	mov	r1, r4
   333f8:	add	r0, sp, #64	; 0x40
   333fc:	str	fp, [r4, #40]	; 0x28
   33400:	orr	r2, r3, #8388608	; 0x800000
   33404:	bl	26de8 <__assert_fail@plt+0x15244>
   33408:	ldrb	r3, [sp, #68]	; 0x44
   3340c:	ldr	fp, [r4, #40]	; 0x28
   33410:	sub	r3, r3, #9
   33414:	cmp	r3, #1
   33418:	sub	r3, fp, #1
   3341c:	mov	r8, fp
   33420:	str	r3, [r4, #40]	; 0x28
   33424:	bls	33504 <__assert_fail@plt+0x21960>
   33428:	ldrb	r3, [r5, #4]
   3342c:	str	r8, [r4, #40]	; 0x28
   33430:	and	r2, r3, #247	; 0xf7
   33434:	cmp	r2, #2
   33438:	moveq	sl, #0
   3343c:	beq	330b8 <__assert_fail@plt+0x21514>
   33440:	ldr	r2, [sp, #112]	; 0x70
   33444:	clz	r1, r2
   33448:	lsr	r1, r1, #5
   3344c:	cmp	r3, #9
   33450:	orrne	r1, r1, #1
   33454:	cmp	r1, #0
   33458:	moveq	sl, r1
   3345c:	beq	330b8 <__assert_fail@plt+0x21514>
   33460:	b	33058 <__assert_fail@plt+0x214b4>
   33464:	ldr	r3, [r5, #4]
   33468:	ldr	r2, [sp, #40]	; 0x28
   3346c:	and	r3, r3, r2
   33470:	orr	r3, r3, #2097152	; 0x200000
   33474:	orr	r3, r3, #1
   33478:	str	r3, [r5, #4]
   3347c:	str	fp, [r4, #40]	; 0x28
   33480:	b	33058 <__assert_fail@plt+0x214b4>
   33484:	bl	11964 <__ctype_b_loc@plt>
   33488:	ldr	r0, [r0]
   3348c:	lsl	r2, sl, #1
   33490:	ldrb	r1, [r5, #6]
   33494:	ldrh	r2, [r0, r2]
   33498:	ubfx	r2, r2, #3, #1
   3349c:	cmp	sl, #95	; 0x5f
   334a0:	orreq	r2, r2, #1
   334a4:	bfi	r1, r2, #6, #1
   334a8:	strb	r1, [r5, #6]
   334ac:	b	33284 <__assert_fail@plt+0x216e0>
   334b0:	ldr	r3, [sp, #36]	; 0x24
   334b4:	cmp	r3, #4608	; 0x1200
   334b8:	moveq	r3, #24
   334bc:	strbeq	r3, [r5, #4]
   334c0:	streq	fp, [r4, #40]	; 0x28
   334c4:	bne	33054 <__assert_fail@plt+0x214b0>
   334c8:	b	33058 <__assert_fail@plt+0x214b4>
   334cc:	ldr	r3, [sp, #56]	; 0x38
   334d0:	cmp	r3, #0
   334d4:	beq	33054 <__assert_fail@plt+0x214b0>
   334d8:	mov	r3, #10
   334dc:	mov	sl, #0
   334e0:	strb	r3, [r5, #4]
   334e4:	str	fp, [r4, #40]	; 0x28
   334e8:	b	330b8 <__assert_fail@plt+0x21514>
   334ec:	ldr	r3, [sp, #52]	; 0x34
   334f0:	cmp	r3, #0
   334f4:	bne	33504 <__assert_fail@plt+0x21960>
   334f8:	ldr	r3, [r4, #48]	; 0x30
   334fc:	cmp	r3, fp
   33500:	bne	333f0 <__assert_fail@plt+0x2184c>
   33504:	mov	r3, #12
   33508:	mov	r2, #32
   3350c:	str	r2, [r5]
   33510:	strb	r3, [r5, #4]
   33514:	str	fp, [r4, #40]	; 0x28
   33518:	b	33058 <__assert_fail@plt+0x214b4>
   3351c:	ldr	r3, [sp, #28]
   33520:	cmp	r3, #0
   33524:	beq	33054 <__assert_fail@plt+0x214b0>
   33528:	mov	r3, #8
   3352c:	strb	r3, [r5, #4]
   33530:	str	fp, [r4, #40]	; 0x28
   33534:	b	33058 <__assert_fail@plt+0x214b4>
   33538:	ldr	r3, [sp, #28]
   3353c:	cmp	r3, #0
   33540:	beq	33054 <__assert_fail@plt+0x214b0>
   33544:	mov	r3, #9
   33548:	strb	r3, [r5, #4]
   3354c:	mov	r3, #9
   33550:	str	fp, [r4, #40]	; 0x28
   33554:	b	33440 <__assert_fail@plt+0x2189c>
   33558:	mov	r3, #11
   3355c:	strb	r3, [r5, #4]
   33560:	str	fp, [r4, #40]	; 0x28
   33564:	b	33058 <__assert_fail@plt+0x214b4>
   33568:	ldr	r3, [sp, #32]
   3356c:	cmp	r3, #0
   33570:	bne	33054 <__assert_fail@plt+0x214b0>
   33574:	mov	r3, #18
   33578:	strb	r3, [r5, #4]
   3357c:	str	fp, [r4, #40]	; 0x28
   33580:	b	33058 <__assert_fail@plt+0x214b4>
   33584:	mov	r3, #5
   33588:	strb	r3, [r5, #4]
   3358c:	str	fp, [r4, #40]	; 0x28
   33590:	b	33058 <__assert_fail@plt+0x214b4>
   33594:	ldr	r3, [sp, #32]
   33598:	cmp	r3, #0
   3359c:	bne	33054 <__assert_fail@plt+0x214b0>
   335a0:	mov	r3, #19
   335a4:	strb	r3, [r5, #4]
   335a8:	str	fp, [r4, #40]	; 0x28
   335ac:	b	33058 <__assert_fail@plt+0x214b4>
   335b0:	mov	r3, #20
   335b4:	strb	r3, [r5, #4]
   335b8:	str	fp, [r4, #40]	; 0x28
   335bc:	b	33058 <__assert_fail@plt+0x214b4>
   335c0:	mov	r3, #12
   335c4:	mov	r2, #16
   335c8:	str	r2, [r5]
   335cc:	strb	r3, [r5, #4]
   335d0:	str	fp, [r4, #40]	; 0x28
   335d4:	b	33058 <__assert_fail@plt+0x214b4>
   335d8:	ldr	r3, [sp, #36]	; 0x24
   335dc:	cmp	r3, #4608	; 0x1200
   335e0:	bne	33054 <__assert_fail@plt+0x214b0>
   335e4:	mov	r3, #23
   335e8:	strb	r3, [r5, #4]
   335ec:	str	fp, [r4, #40]	; 0x28
   335f0:	b	33058 <__assert_fail@plt+0x214b4>
   335f4:	ldr	r3, [sp, #28]
   335f8:	cmp	r3, #0
   335fc:	bne	33428 <__assert_fail@plt+0x21884>
   33600:	mov	r3, #9
   33604:	strb	r3, [r5, #4]
   33608:	mov	r3, #9
   3360c:	str	r8, [r4, #40]	; 0x28
   33610:	b	33440 <__assert_fail@plt+0x2189c>
   33614:	ldr	r3, [sp, #32]
   33618:	cmp	r3, #2
   3361c:	bne	33428 <__assert_fail@plt+0x21884>
   33620:	mov	r3, #18
   33624:	strb	r3, [r5, #4]
   33628:	str	r8, [r4, #40]	; 0x28
   3362c:	b	33058 <__assert_fail@plt+0x214b4>
   33630:	ldr	r3, [sp, #60]	; 0x3c
   33634:	cmp	r3, #0
   33638:	bne	33428 <__assert_fail@plt+0x21884>
   3363c:	sub	r3, sl, #49	; 0x31
   33640:	mov	r2, #4
   33644:	str	r3, [r5]
   33648:	strb	r2, [r5, #4]
   3364c:	str	r8, [r4, #40]	; 0x28
   33650:	b	33058 <__assert_fail@plt+0x214b4>
   33654:	ldr	r3, [sp, #48]	; 0x30
   33658:	cmp	r3, #0
   3365c:	bne	33428 <__assert_fail@plt+0x21884>
   33660:	mov	r3, #12
   33664:	mov	r2, #6
   33668:	str	r2, [r5]
   3366c:	strb	r3, [r5, #4]
   33670:	str	r8, [r4, #40]	; 0x28
   33674:	b	33058 <__assert_fail@plt+0x214b4>
   33678:	ldr	r3, [sp, #48]	; 0x30
   3367c:	cmp	r3, #0
   33680:	bne	33428 <__assert_fail@plt+0x21884>
   33684:	mov	r3, #12
   33688:	mov	r2, #9
   3368c:	str	r2, [r5]
   33690:	strb	r3, [r5, #4]
   33694:	str	r8, [r4, #40]	; 0x28
   33698:	b	33058 <__assert_fail@plt+0x214b4>
   3369c:	ldr	r3, [sp, #32]
   336a0:	cmp	r3, #2
   336a4:	bne	33428 <__assert_fail@plt+0x21884>
   336a8:	mov	r3, #19
   336ac:	strb	r3, [r5, #4]
   336b0:	str	r8, [r4, #40]	; 0x28
   336b4:	b	33058 <__assert_fail@plt+0x214b4>
   336b8:	ldr	r3, [sp, #48]	; 0x30
   336bc:	cmp	r3, #0
   336c0:	bne	33428 <__assert_fail@plt+0x21884>
   336c4:	mov	r3, #12
   336c8:	mov	r2, #512	; 0x200
   336cc:	str	r2, [r5]
   336d0:	strb	r3, [r5, #4]
   336d4:	str	r8, [r4, #40]	; 0x28
   336d8:	b	33058 <__assert_fail@plt+0x214b4>
   336dc:	ldr	r3, [sp, #48]	; 0x30
   336e0:	cmp	r3, #0
   336e4:	bne	33428 <__assert_fail@plt+0x21884>
   336e8:	mov	r3, #35	; 0x23
   336ec:	strb	r3, [r5, #4]
   336f0:	str	r8, [r4, #40]	; 0x28
   336f4:	b	33058 <__assert_fail@plt+0x214b4>
   336f8:	ldr	r3, [sp, #48]	; 0x30
   336fc:	cmp	r3, #0
   33700:	bne	33428 <__assert_fail@plt+0x21884>
   33704:	mov	r3, #33	; 0x21
   33708:	strb	r3, [r5, #4]
   3370c:	str	r8, [r4, #40]	; 0x28
   33710:	b	33058 <__assert_fail@plt+0x214b4>
   33714:	ldr	r3, [sp, #48]	; 0x30
   33718:	cmp	r3, #0
   3371c:	bne	33428 <__assert_fail@plt+0x21884>
   33720:	mov	r3, #12
   33724:	mov	r2, #64	; 0x40
   33728:	str	r2, [r5]
   3372c:	strb	r3, [r5, #4]
   33730:	str	r8, [r4, #40]	; 0x28
   33734:	b	33058 <__assert_fail@plt+0x214b4>
   33738:	ldr	r3, [sp, #48]	; 0x30
   3373c:	cmp	r3, #0
   33740:	bne	33428 <__assert_fail@plt+0x21884>
   33744:	mov	r3, #12
   33748:	mov	r2, #256	; 0x100
   3374c:	str	r2, [r5]
   33750:	strb	r3, [r5, #4]
   33754:	str	r8, [r4, #40]	; 0x28
   33758:	b	33058 <__assert_fail@plt+0x214b4>
   3375c:	ldr	r3, [sp, #48]	; 0x30
   33760:	cmp	r3, #0
   33764:	bne	33428 <__assert_fail@plt+0x21884>
   33768:	mov	r3, #34	; 0x22
   3376c:	strb	r3, [r5, #4]
   33770:	str	r8, [r4, #40]	; 0x28
   33774:	b	33058 <__assert_fail@plt+0x214b4>
   33778:	ldr	r3, [sp, #48]	; 0x30
   3377c:	cmp	r3, #0
   33780:	bne	33428 <__assert_fail@plt+0x21884>
   33784:	mov	r3, #32
   33788:	strb	r3, [r5, #4]
   3378c:	str	r8, [r4, #40]	; 0x28
   33790:	b	33058 <__assert_fail@plt+0x214b4>
   33794:	ldr	r3, [sp, #36]	; 0x24
   33798:	cmp	r3, #512	; 0x200
   3379c:	bne	33428 <__assert_fail@plt+0x21884>
   337a0:	mov	r3, #23
   337a4:	strb	r3, [r5, #4]
   337a8:	str	r8, [r4, #40]	; 0x28
   337ac:	b	33058 <__assert_fail@plt+0x214b4>
   337b0:	ldr	r3, [sp, #44]	; 0x2c
   337b4:	cmp	r3, #0
   337b8:	bne	33428 <__assert_fail@plt+0x21884>
   337bc:	mov	sl, r3
   337c0:	mov	r3, #10
   337c4:	strb	r3, [r5, #4]
   337c8:	str	r8, [r4, #40]	; 0x28
   337cc:	b	330b8 <__assert_fail@plt+0x21514>
   337d0:	ldr	r3, [sp, #36]	; 0x24
   337d4:	cmp	r3, #512	; 0x200
   337d8:	bne	33428 <__assert_fail@plt+0x21884>
   337dc:	mov	r3, #24
   337e0:	strb	r3, [r5, #4]
   337e4:	str	r8, [r4, #40]	; 0x28
   337e8:	b	33058 <__assert_fail@plt+0x214b4>
   337ec:	ldr	r3, [sp, #48]	; 0x30
   337f0:	cmp	r3, #0
   337f4:	bne	33428 <__assert_fail@plt+0x21884>
   337f8:	mov	r3, #12
   337fc:	mov	r2, #128	; 0x80
   33800:	str	r2, [r5]
   33804:	strb	r3, [r5, #4]
   33808:	str	r8, [r4, #40]	; 0x28
   3380c:	b	33058 <__assert_fail@plt+0x214b4>
   33810:	ldr	r3, [sp, #28]
   33814:	cmp	r3, #0
   33818:	bne	33428 <__assert_fail@plt+0x21884>
   3381c:	mov	r3, #8
   33820:	strb	r3, [r5, #4]
   33824:	str	r8, [r4, #40]	; 0x28
   33828:	b	33058 <__assert_fail@plt+0x214b4>
   3382c:	cmp	r2, #1
   33830:	ble	33860 <__assert_fail@plt+0x21cbc>
   33834:	ldr	r0, [r4, #8]
   33838:	ldr	r3, [r0, fp, lsl #2]
   3383c:	add	r0, r0, fp, lsl #2
   33840:	cmn	r3, #1
   33844:	beq	338bc <__assert_fail@plt+0x21d18>
   33848:	ldr	r3, [r4, #28]
   3384c:	cmp	r3, r8
   33850:	beq	33860 <__assert_fail@plt+0x21cbc>
   33854:	ldr	r3, [r0, #4]
   33858:	cmn	r3, #1
   3385c:	beq	338bc <__assert_fail@plt+0x21d18>
   33860:	ldrb	ip, [r4, #76]	; 0x4c
   33864:	ldr	r0, [r4]
   33868:	ldr	r3, [r4, #24]
   3386c:	cmp	ip, #0
   33870:	beq	338b0 <__assert_fail@plt+0x21d0c>
   33874:	ldr	ip, [r4, #12]
   33878:	add	r3, r0, r3
   3387c:	ldr	r0, [ip, fp, lsl #2]
   33880:	ldrb	sl, [r3, r0]
   33884:	tst	sl, #128	; 0x80
   33888:	beq	3323c <__assert_fail@plt+0x21698>
   3388c:	b	33238 <__assert_fail@plt+0x21694>
   33890:	cmp	r7, #0
   33894:	beq	338a8 <__assert_fail@plt+0x21d04>
   33898:	mov	r0, r7
   3389c:	mov	r7, #0
   338a0:	bl	28054 <__assert_fail@plt+0x164b0>
   338a4:	b	33180 <__assert_fail@plt+0x215dc>
   338a8:	mov	r7, #0
   338ac:	b	33180 <__assert_fail@plt+0x215dc>
   338b0:	add	r0, r0, fp
   338b4:	ldrb	sl, [r0, r3]
   338b8:	b	3323c <__assert_fail@plt+0x21698>
   338bc:	ldrb	sl, [r1, fp]
   338c0:	mov	r2, #1
   338c4:	strb	sl, [r5]
   338c8:	strb	r2, [r5, #4]
   338cc:	b	33258 <__assert_fail@plt+0x216b4>
   338d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   338d4:	mov	r5, r2
   338d8:	strd	r6, [sp, #8]
   338dc:	mov	r6, r0
   338e0:	mov	r7, r3
   338e4:	ldrb	r3, [r0, #28]
   338e8:	mov	r0, #0
   338ec:	strd	r8, [sp, #16]
   338f0:	mov	r8, r1
   338f4:	strd	sl, [sp, #24]
   338f8:	ldr	r2, [r6, #4]
   338fc:	str	lr, [sp, #32]
   33900:	sub	sp, sp, #148	; 0x94
   33904:	bic	r3, r3, #111	; 0x6f
   33908:	str	r0, [r6, #8]
   3390c:	str	r7, [r6, #12]
   33910:	str	r0, [r6, #24]
   33914:	cmp	r2, #159	; 0x9f
   33918:	strb	r3, [r6, #28]
   3391c:	str	r0, [sp, #36]	; 0x24
   33920:	ldr	r4, [r6]
   33924:	bls	34c24 <__assert_fail@plt+0x23080>
   33928:	mov	r3, #160	; 0xa0
   3392c:	mov	r1, #0
   33930:	mov	r2, r3
   33934:	mov	r0, r4
   33938:	str	r3, [r6, #8]
   3393c:	bl	119e8 <memset@plt>
   33940:	movw	r3, #43689	; 0xaaa9
   33944:	movt	r3, #2730	; 0xaaa
   33948:	mov	r2, #31
   3394c:	cmp	r5, r3
   33950:	str	r2, [r4, #64]	; 0x40
   33954:	bhi	3412c <__assert_fail@plt+0x22588>
   33958:	add	r9, r5, #1
   3395c:	lsl	r0, r9, #3
   33960:	str	r9, [r4, #4]
   33964:	bl	39028 <__assert_fail@plt+0x27484>
   33968:	cmp	r5, #0
   3396c:	str	r0, [r4]
   33970:	beq	34c48 <__assert_fail@plt+0x230a4>
   33974:	mov	r1, #1
   33978:	lsl	r1, r1, #1
   3397c:	cmp	r5, r1
   33980:	bcs	33978 <__assert_fail@plt+0x21dd4>
   33984:	sub	sl, r1, #1
   33988:	mov	r0, #12
   3398c:	bl	38fb4 <__assert_fail@plt+0x27410>
   33990:	str	r0, [r4, #32]
   33994:	str	sl, [r4, #68]	; 0x44
   33998:	bl	11880 <__ctype_get_mb_cur_max@plt>
   3399c:	str	r0, [r4, #92]	; 0x5c
   339a0:	mov	r0, #14
   339a4:	bl	11a84 <nl_langinfo@plt>
   339a8:	ldrb	r3, [r0]
   339ac:	and	r3, r3, #223	; 0xdf
   339b0:	cmp	r3, #85	; 0x55
   339b4:	bne	33a0c <__assert_fail@plt+0x21e68>
   339b8:	ldrb	r3, [r0, #1]
   339bc:	and	r3, r3, #223	; 0xdf
   339c0:	cmp	r3, #84	; 0x54
   339c4:	bne	33a0c <__assert_fail@plt+0x21e68>
   339c8:	ldrb	r3, [r0, #2]
   339cc:	and	r3, r3, #223	; 0xdf
   339d0:	cmp	r3, #70	; 0x46
   339d4:	bne	33a0c <__assert_fail@plt+0x21e68>
   339d8:	ldrb	r3, [r0, #3]
   339dc:	movw	r1, #50752	; 0xc640
   339e0:	movt	r1, #3
   339e4:	cmp	r3, #45	; 0x2d
   339e8:	moveq	r3, #4
   339ec:	movne	r3, #3
   339f0:	add	r0, r0, r3
   339f4:	bl	1170c <strcmp@plt>
   339f8:	cmp	r0, #0
   339fc:	bne	33a0c <__assert_fail@plt+0x21e68>
   33a00:	ldrb	r3, [r4, #88]	; 0x58
   33a04:	orr	r3, r3, #4
   33a08:	strb	r3, [r4, #88]	; 0x58
   33a0c:	ldrb	r3, [r4, #88]	; 0x58
   33a10:	ldr	r2, [r4, #92]	; 0x5c
   33a14:	bfc	r3, #3, #1
   33a18:	cmp	r2, #1
   33a1c:	strb	r3, [r4, #88]	; 0x58
   33a20:	ble	33a3c <__assert_fail@plt+0x21e98>
   33a24:	uxtb	sl, r3
   33a28:	ands	sl, sl, #4
   33a2c:	beq	34188 <__assert_fail@plt+0x225e4>
   33a30:	movw	r3, #50168	; 0xc3f8
   33a34:	movt	r3, #3
   33a38:	str	r3, [r4, #60]	; 0x3c
   33a3c:	ldr	r3, [r4]
   33a40:	cmp	r3, #0
   33a44:	beq	3412c <__assert_fail@plt+0x22588>
   33a48:	ldr	r3, [r4, #32]
   33a4c:	cmp	r3, #0
   33a50:	beq	3412c <__assert_fail@plt+0x22588>
   33a54:	mov	r1, #0
   33a58:	movw	r2, #0
   33a5c:	movt	r2, #0
   33a60:	mov	r3, #1
   33a64:	cmp	r2, r1
   33a68:	str	r1, [sp, #36]	; 0x24
   33a6c:	mov	r1, #1
   33a70:	moveq	r3, r2
   33a74:	movw	r2, #0
   33a78:	movt	r2, #0
   33a7c:	cmp	r2, #0
   33a80:	moveq	r1, r2
   33a84:	orr	r3, r3, r1
   33a88:	ands	r3, r3, #255	; 0xff
   33a8c:	str	r3, [sp, #16]
   33a90:	beq	33ab4 <__assert_fail@plt+0x21f10>
   33a94:	mov	r1, #0
   33a98:	add	r0, r4, #136	; 0x88
   33a9c:	bl	11790 <pthread_mutex_init@plt>
   33aa0:	cmp	r0, #0
   33aa4:	bne	3412c <__assert_fail@plt+0x22588>
   33aa8:	ldr	r3, [sp, #36]	; 0x24
   33aac:	cmp	r3, #0
   33ab0:	bne	34134 <__assert_fail@plt+0x22590>
   33ab4:	and	r3, r7, #4194304	; 0x400000
   33ab8:	mov	r2, #76	; 0x4c
   33abc:	ldr	sl, [r6, #20]
   33ac0:	mov	r1, #0
   33ac4:	add	r0, sp, #64	; 0x40
   33ac8:	mov	fp, r3
   33acc:	str	r3, [sp, #12]
   33ad0:	bl	119e8 <memset@plt>
   33ad4:	ldrb	r3, [r4, #88]	; 0x58
   33ad8:	adds	ip, fp, #0
   33adc:	orr	fp, sl, fp
   33ae0:	movne	ip, #1
   33ae4:	str	r8, [sp, #60]	; 0x3c
   33ae8:	ldr	r1, [r4, #92]	; 0x5c
   33aec:	adds	r2, fp, #0
   33af0:	movne	r2, #1
   33af4:	cmp	r5, #0
   33af8:	str	r5, [sp, #104]	; 0x68
   33afc:	str	r5, [sp, #108]	; 0x6c
   33b00:	ubfx	r0, r3, #2, #1
   33b04:	str	r5, [sp, #112]	; 0x70
   33b08:	ubfx	r3, r3, #3, #1
   33b0c:	str	r5, [sp, #116]	; 0x74
   33b10:	str	sl, [sp, #124]	; 0x7c
   33b14:	strb	ip, [sp, #132]	; 0x84
   33b18:	strb	r0, [sp, #133]	; 0x85
   33b1c:	strb	r3, [sp, #134]	; 0x86
   33b20:	strb	r2, [sp, #135]	; 0x87
   33b24:	str	r1, [sp, #140]	; 0x8c
   33b28:	bne	34168 <__assert_fail@plt+0x225c4>
   33b2c:	cmp	r2, #0
   33b30:	ldr	r3, [sp, #12]
   33b34:	ldrne	r8, [sp, #64]	; 0x40
   33b38:	cmp	r3, #0
   33b3c:	str	r8, [sp, #64]	; 0x40
   33b40:	beq	33c0c <__assert_fail@plt+0x22068>
   33b44:	cmp	r1, #1
   33b48:	ble	34b98 <__assert_fail@plt+0x22ff4>
   33b4c:	add	r0, sp, #60	; 0x3c
   33b50:	bl	24248 <__assert_fail@plt+0x126a4>
   33b54:	cmp	r0, #0
   33b58:	bne	33b94 <__assert_fail@plt+0x21ff0>
   33b5c:	ldr	r3, [sp, #92]	; 0x5c
   33b60:	cmp	r5, r3
   33b64:	ble	34cc4 <__assert_fail@plt+0x23120>
   33b68:	ldr	r3, [sp, #88]	; 0x58
   33b6c:	ldr	r2, [r4, #92]	; 0x5c
   33b70:	ldr	r1, [sp, #96]	; 0x60
   33b74:	add	r3, r3, r2
   33b78:	cmp	r1, r3
   33b7c:	bgt	34cc4 <__assert_fail@plt+0x23120>
   33b80:	lsl	r1, r1, #1
   33b84:	add	r0, sp, #60	; 0x3c
   33b88:	bl	23e64 <__assert_fail@plt+0x122c0>
   33b8c:	cmp	r0, #0
   33b90:	beq	33b4c <__assert_fail@plt+0x21fa8>
   33b94:	ldr	r5, [r6]
   33b98:	str	r0, [sp, #36]	; 0x24
   33b9c:	ldr	r0, [r5, #56]	; 0x38
   33ba0:	cmp	r0, #0
   33ba4:	beq	33bb8 <__assert_fail@plt+0x22014>
   33ba8:	ldr	r7, [r0]
   33bac:	bl	19610 <__assert_fail@plt+0x7a6c>
   33bb0:	subs	r0, r7, #0
   33bb4:	bne	33ba8 <__assert_fail@plt+0x22004>
   33bb8:	mov	r3, #31
   33bbc:	mov	r7, #0
   33bc0:	ldr	r0, [r5, #16]
   33bc4:	str	r7, [r5, #52]	; 0x34
   33bc8:	str	r7, [r5, #56]	; 0x38
   33bcc:	str	r3, [r5, #64]	; 0x40
   33bd0:	bl	19610 <__assert_fail@plt+0x7a6c>
   33bd4:	str	r7, [r5, #16]
   33bd8:	ldr	r0, [sp, #68]	; 0x44
   33bdc:	bl	19610 <__assert_fail@plt+0x7a6c>
   33be0:	ldr	r0, [sp, #72]	; 0x48
   33be4:	bl	19610 <__assert_fail@plt+0x7a6c>
   33be8:	ldrb	r3, [sp, #135]	; 0x87
   33bec:	cmp	r3, r7
   33bf0:	bne	34c60 <__assert_fail@plt+0x230bc>
   33bf4:	ldr	r3, [sp, #16]
   33bf8:	cmp	r3, #0
   33bfc:	beq	34134 <__assert_fail@plt+0x22590>
   33c00:	add	r0, r4, #136	; 0x88
   33c04:	bl	11718 <pthread_mutex_destroy@plt>
   33c08:	b	34134 <__assert_fail@plt+0x22590>
   33c0c:	cmp	r1, #1
   33c10:	bgt	34a9c <__assert_fail@plt+0x22ef8>
   33c14:	cmp	fp, #0
   33c18:	ldr	r1, [sp, #96]	; 0x60
   33c1c:	beq	34238 <__assert_fail@plt+0x22694>
   33c20:	ldr	r3, [sp, #88]	; 0x58
   33c24:	ldr	r2, [sp, #108]	; 0x6c
   33c28:	cmp	r1, r2
   33c2c:	movge	r1, r2
   33c30:	cmp	r1, r3
   33c34:	ble	34e08 <__assert_fail@plt+0x23264>
   33c38:	ldr	r0, [sp, #60]	; 0x3c
   33c3c:	add	r2, r3, #1
   33c40:	cmp	r1, r2
   33c44:	ldr	lr, [sp, #84]	; 0x54
   33c48:	ldr	ip, [sp, #124]	; 0x7c
   33c4c:	add	r0, r0, r3
   33c50:	ldrb	r0, [r0, lr]
   33c54:	ldrb	r0, [ip, r0]
   33c58:	strb	r0, [r8, r3]
   33c5c:	ble	33c8c <__assert_fail@plt+0x220e8>
   33c60:	ldr	r3, [sp, #60]	; 0x3c
   33c64:	ldr	r0, [sp, #84]	; 0x54
   33c68:	ldr	ip, [sp, #124]	; 0x7c
   33c6c:	add	r3, r3, r2
   33c70:	ldrb	r0, [r3, r0]
   33c74:	ldr	r3, [sp, #64]	; 0x40
   33c78:	ldrb	r0, [ip, r0]
   33c7c:	strb	r0, [r3, r2]
   33c80:	add	r2, r2, #1
   33c84:	cmp	r1, r2
   33c88:	bne	33c60 <__assert_fail@plt+0x220bc>
   33c8c:	mov	r3, #0
   33c90:	str	r3, [sp, #36]	; 0x24
   33c94:	str	r1, [sp, #88]	; 0x58
   33c98:	str	r1, [sp, #92]	; 0x5c
   33c9c:	ldr	r5, [r6]
   33ca0:	mov	r8, #0
   33ca4:	orr	r2, r7, #8388608	; 0x800000
   33ca8:	add	r1, sp, #60	; 0x3c
   33cac:	add	r0, sp, #40	; 0x28
   33cb0:	str	r8, [r6, #24]
   33cb4:	str	r7, [r5, #128]	; 0x80
   33cb8:	bl	26de8 <__assert_fail@plt+0x15244>
   33cbc:	ldr	ip, [sp, #100]	; 0x64
   33cc0:	add	r1, sp, #36	; 0x24
   33cc4:	mov	r3, r7
   33cc8:	add	r2, sp, #40	; 0x28
   33ccc:	str	r8, [sp]
   33cd0:	str	r1, [sp, #4]
   33cd4:	mov	r1, r6
   33cd8:	add	ip, ip, r0
   33cdc:	add	r0, sp, #60	; 0x3c
   33ce0:	str	ip, [sp, #100]	; 0x64
   33ce4:	bl	32d00 <__assert_fail@plt+0x2115c>
   33ce8:	ldr	sl, [sp, #36]	; 0x24
   33cec:	clz	r3, r0
   33cf0:	mov	r9, r0
   33cf4:	lsr	r3, r3, #5
   33cf8:	cmp	sl, r8
   33cfc:	movne	sl, r3
   33d00:	moveq	sl, r8
   33d04:	cmp	sl, r8
   33d08:	bne	34e20 <__assert_fail@plt+0x2327c>
   33d0c:	mov	r2, #0
   33d10:	mov	r3, #0
   33d14:	strd	r2, [sp, #48]	; 0x30
   33d18:	ldr	r2, [r5, #64]	; 0x40
   33d1c:	cmp	r2, #31
   33d20:	beq	34c90 <__assert_fail@plt+0x230ec>
   33d24:	ldr	r7, [r5, #56]	; 0x38
   33d28:	lsl	r3, r2, #5
   33d2c:	add	r2, r2, #1
   33d30:	add	r0, r3, #4
   33d34:	add	ip, r7, r3
   33d38:	mov	lr, #0
   33d3c:	str	r2, [r5, #64]	; 0x40
   33d40:	mov	r2, #2
   33d44:	add	r3, r3, #16
   33d48:	str	lr, [ip, #4]
   33d4c:	add	r1, r7, r3
   33d50:	adds	r7, r7, r0
   33d54:	str	lr, [ip, #8]
   33d58:	mvn	r0, #0
   33d5c:	moveq	r8, #1
   33d60:	str	lr, [ip, #12]
   33d64:	movne	r8, lr
   33d68:	cmp	r9, lr
   33d6c:	strb	r2, [sp, #52]	; 0x34
   33d70:	ldrd	r2, [sp, #48]	; 0x30
   33d74:	strd	r2, [ip, #24]
   33d78:	ldrb	r3, [r1, #14]
   33d7c:	bic	r3, r3, #12
   33d80:	strb	r3, [r1, #14]
   33d84:	str	lr, [ip, #16]
   33d88:	str	lr, [ip, #20]
   33d8c:	str	r0, [ip, #32]
   33d90:	beq	33e24 <__assert_fail@plt+0x22280>
   33d94:	mov	r3, #0
   33d98:	mov	r2, #0
   33d9c:	strd	r2, [sp, #48]	; 0x30
   33da0:	ldr	r3, [r5, #64]	; 0x40
   33da4:	cmp	r3, #31
   33da8:	beq	34dbc <__assert_fail@plt+0x23218>
   33dac:	ldr	r0, [r5, #56]	; 0x38
   33db0:	lsl	r1, r3, #5
   33db4:	add	r3, r3, #1
   33db8:	add	r2, r1, #4
   33dbc:	add	ip, r0, r1
   33dc0:	mov	lr, #0
   33dc4:	str	r3, [r5, #64]	; 0x40
   33dc8:	mov	r3, #16
   33dcc:	mvn	r5, #0
   33dd0:	add	r1, r1, r3
   33dd4:	str	lr, [ip, #4]
   33dd8:	str	r9, [ip, #8]
   33ddc:	add	r1, r0, r1
   33de0:	add	r0, r0, r2
   33de4:	str	r7, [ip, #12]
   33de8:	cmp	r0, lr
   33dec:	orreq	r8, r8, #1
   33df0:	cmp	r7, lr
   33df4:	strb	r3, [sp, #52]	; 0x34
   33df8:	ldrd	r2, [sp, #48]	; 0x30
   33dfc:	strd	r2, [ip, #24]
   33e00:	ldrb	r3, [r1, #14]
   33e04:	bic	r3, r3, #12
   33e08:	strb	r3, [r1, #14]
   33e0c:	str	lr, [ip, #16]
   33e10:	str	lr, [ip, #20]
   33e14:	str	r5, [ip, #32]
   33e18:	str	r0, [r9]
   33e1c:	strne	r0, [r7]
   33e20:	mov	r7, r0
   33e24:	cmp	r8, #0
   33e28:	ldr	r5, [r6]
   33e2c:	bne	34c7c <__assert_fail@plt+0x230d8>
   33e30:	ldr	r0, [r5, #4]
   33e34:	str	r7, [r4, #52]	; 0x34
   33e38:	lsl	r0, r0, #2
   33e3c:	bl	39028 <__assert_fail@plt+0x27484>
   33e40:	ldr	r3, [r5, #4]
   33e44:	str	r0, [r5, #12]
   33e48:	lsl	r0, r3, #2
   33e4c:	bl	39028 <__assert_fail@plt+0x27484>
   33e50:	ldr	r3, [r5, #4]
   33e54:	str	r0, [r5, #16]
   33e58:	add	r3, r3, r3, lsl #1
   33e5c:	lsl	r0, r3, #2
   33e60:	bl	39028 <__assert_fail@plt+0x27484>
   33e64:	ldr	r3, [r5, #4]
   33e68:	str	r0, [r5, #20]
   33e6c:	add	r3, r3, r3, lsl #1
   33e70:	lsl	r0, r3, #2
   33e74:	bl	39028 <__assert_fail@plt+0x27484>
   33e78:	ldr	r3, [r5, #12]
   33e7c:	str	r0, [r5, #24]
   33e80:	cmp	r3, #0
   33e84:	beq	34294 <__assert_fail@plt+0x226f0>
   33e88:	ldr	r3, [r5, #16]
   33e8c:	cmp	r3, #0
   33e90:	beq	34294 <__assert_fail@plt+0x226f0>
   33e94:	ldr	r3, [r5, #20]
   33e98:	cmp	r3, #0
   33e9c:	beq	34294 <__assert_fail@plt+0x226f0>
   33ea0:	cmp	r0, #0
   33ea4:	beq	34294 <__assert_fail@plt+0x226f0>
   33ea8:	ldr	r0, [r6, #24]
   33eac:	lsl	r0, r0, #2
   33eb0:	bl	39028 <__assert_fail@plt+0x27484>
   33eb4:	cmp	r0, #0
   33eb8:	str	r0, [r5, #132]	; 0x84
   33ebc:	beq	34b1c <__assert_fail@plt+0x22f78>
   33ec0:	ldr	ip, [r6, #24]
   33ec4:	cmp	ip, #0
   33ec8:	beq	33f78 <__assert_fail@plt+0x223d4>
   33ecc:	sub	r3, ip, #1
   33ed0:	ubfx	r2, r0, #2, #1
   33ed4:	cmp	r3, #4
   33ed8:	bls	34df0 <__assert_fail@plt+0x2324c>
   33edc:	cmp	r2, #0
   33ee0:	beq	34c54 <__assert_fail@plt+0x230b0>
   33ee4:	mov	r7, r2
   33ee8:	mov	r9, #1
   33eec:	str	r8, [r0]
   33ef0:	sub	r8, ip, r2
   33ef4:	add	r2, r0, r2, lsl #2
   33ef8:	mov	lr, r9
   33efc:	lsr	r3, r8, #1
   33f00:	add	r1, r9, #1
   33f04:	add	r3, r2, r3, lsl #3
   33f08:	add	r2, r2, #8
   33f0c:	str	lr, [r2, #-8]
   33f10:	add	lr, lr, #2
   33f14:	str	r1, [r2, #-4]
   33f18:	cmp	r3, r2
   33f1c:	add	r1, r1, #2
   33f20:	bne	33f08 <__assert_fail@plt+0x22364>
   33f24:	bic	r3, r8, #1
   33f28:	cmp	r3, r8
   33f2c:	add	r7, r3, r7
   33f30:	add	r3, r3, r9
   33f34:	beq	33f78 <__assert_fail@plt+0x223d4>
   33f38:	add	r2, r3, #1
   33f3c:	str	r3, [r0, r7, lsl #2]
   33f40:	cmp	ip, r2
   33f44:	bls	33f78 <__assert_fail@plt+0x223d4>
   33f48:	add	r1, r3, #2
   33f4c:	str	r2, [r0, r2, lsl #2]
   33f50:	cmp	ip, r1
   33f54:	bls	33f78 <__assert_fail@plt+0x223d4>
   33f58:	add	r2, r3, #3
   33f5c:	str	r1, [r0, r1, lsl #2]
   33f60:	cmp	ip, r2
   33f64:	bls	33f78 <__assert_fail@plt+0x223d4>
   33f68:	add	r3, r3, #4
   33f6c:	str	r2, [r0, r2, lsl #2]
   33f70:	cmp	ip, r3
   33f74:	strhi	r3, [r0, r3, lsl #2]
   33f78:	ldr	r2, [r5, #52]	; 0x34
   33f7c:	mov	r8, #1
   33f80:	ldrb	r1, [r2, #24]
   33f84:	mov	lr, r2
   33f88:	ldr	r3, [r2, #4]
   33f8c:	b	33fb0 <__assert_fail@plt+0x2240c>
   33f90:	cmp	r1, #17
   33f94:	beq	34248 <__assert_fail@plt+0x226a4>
   33f98:	cmp	r3, #0
   33f9c:	beq	33fd8 <__assert_fail@plt+0x22434>
   33fa0:	ldrb	r1, [r3, #24]
   33fa4:	ldr	r7, [r3, #4]
   33fa8:	mov	lr, r3
   33fac:	mov	r3, r7
   33fb0:	cmp	r1, #4
   33fb4:	bne	33f90 <__assert_fail@plt+0x223ec>
   33fb8:	ldr	r7, [lr, #20]
   33fbc:	cmp	r3, #0
   33fc0:	ldr	r1, [r5, #80]	; 0x50
   33fc4:	ldr	r7, [r0, r7, lsl #2]
   33fc8:	orr	r1, r1, r8, lsl r7
   33fcc:	str	r7, [lr, #20]
   33fd0:	str	r1, [r5, #80]	; 0x50
   33fd4:	bne	33fa0 <__assert_fail@plt+0x223fc>
   33fd8:	mov	r1, #0
   33fdc:	b	33fe4 <__assert_fail@plt+0x22440>
   33fe0:	mov	lr, r3
   33fe4:	ldr	r3, [lr, #8]
   33fe8:	cmp	r3, r1
   33fec:	cmpne	r3, #0
   33ff0:	bne	33fa0 <__assert_fail@plt+0x223fc>
   33ff4:	ldr	r3, [lr]
   33ff8:	mov	r1, lr
   33ffc:	cmp	r3, #0
   34000:	bne	33fe0 <__assert_fail@plt+0x2243c>
   34004:	cmp	ip, #0
   34008:	beq	34038 <__assert_fail@plt+0x22494>
   3400c:	ldr	r3, [r0]
   34010:	cmp	r3, #0
   34014:	bne	34048 <__assert_fail@plt+0x224a4>
   34018:	mov	r1, r0
   3401c:	b	3402c <__assert_fail@plt+0x22488>
   34020:	ldr	lr, [r1, #4]!
   34024:	cmp	lr, r3
   34028:	bne	34048 <__assert_fail@plt+0x224a4>
   3402c:	add	r3, r3, #1
   34030:	cmp	r3, ip
   34034:	bne	34020 <__assert_fail@plt+0x2247c>
   34038:	bl	19610 <__assert_fail@plt+0x7a6c>
   3403c:	ldr	r2, [r5, #52]	; 0x34
   34040:	mov	r3, #0
   34044:	str	r3, [r5, #132]	; 0x84
   34048:	mov	r7, #0
   3404c:	mov	r8, r2
   34050:	ldr	r3, [r8, #4]
   34054:	cmp	r3, #0
   34058:	beq	3406c <__assert_fail@plt+0x224c8>
   3405c:	mov	r8, r3
   34060:	ldr	r3, [r8, #4]
   34064:	cmp	r3, #0
   34068:	bne	3405c <__assert_fail@plt+0x224b8>
   3406c:	ldr	r2, [r8, #8]
   34070:	cmp	r2, #0
   34074:	bne	3404c <__assert_fail@plt+0x224a8>
   34078:	mov	r3, r2
   3407c:	b	340c4 <__assert_fail@plt+0x22520>
   34080:	cmp	r3, #0
   34084:	beq	340a0 <__assert_fail@plt+0x224fc>
   34088:	ldrb	r2, [r3, #24]
   3408c:	cmp	r2, #17
   34090:	beq	3410c <__assert_fail@plt+0x22568>
   34094:	ldr	r3, [sp, #48]	; 0x30
   34098:	cmp	r3, #0
   3409c:	bne	34a5c <__assert_fail@plt+0x22eb8>
   340a0:	ldr	r2, [r8]
   340a4:	cmp	r2, #0
   340a8:	beq	342a4 <__assert_fail@plt+0x22700>
   340ac:	ldr	r3, [r2, #8]
   340b0:	cmp	r3, #0
   340b4:	cmpne	r8, r3
   340b8:	bne	34cbc <__assert_fail@plt+0x23118>
   340bc:	mov	r8, r2
   340c0:	ldr	r2, [r2, #4]
   340c4:	cmp	r2, #0
   340c8:	str	r7, [sp, #48]	; 0x30
   340cc:	beq	34080 <__assert_fail@plt+0x224dc>
   340d0:	ldrb	r1, [r2, #24]
   340d4:	cmp	r1, #17
   340d8:	bne	34080 <__assert_fail@plt+0x224dc>
   340dc:	mov	r1, r6
   340e0:	add	r0, sp, #48	; 0x30
   340e4:	bl	2bdbc <__assert_fail@plt+0x1a218>
   340e8:	ldr	r3, [r8, #8]
   340ec:	cmp	r0, #0
   340f0:	str	r0, [r8, #4]
   340f4:	strne	r8, [r0]
   340f8:	cmp	r3, #0
   340fc:	beq	34094 <__assert_fail@plt+0x224f0>
   34100:	ldrb	r2, [r3, #24]
   34104:	cmp	r2, #17
   34108:	bne	34094 <__assert_fail@plt+0x224f0>
   3410c:	mov	r2, r3
   34110:	mov	r1, r6
   34114:	add	r0, sp, #48	; 0x30
   34118:	bl	2bdbc <__assert_fail@plt+0x1a218>
   3411c:	cmp	r0, #0
   34120:	str	r0, [r8, #8]
   34124:	strne	r8, [r0]
   34128:	b	34094 <__assert_fail@plt+0x224f0>
   3412c:	mov	r3, #12
   34130:	str	r3, [sp, #36]	; 0x24
   34134:	mov	r0, r4
   34138:	bl	28134 <__assert_fail@plt+0x16590>
   3413c:	ldr	r0, [sp, #36]	; 0x24
   34140:	mov	r3, #0
   34144:	str	r3, [r6]
   34148:	str	r3, [r6, #4]
   3414c:	add	sp, sp, #148	; 0x94
   34150:	ldrd	r4, [sp]
   34154:	ldrd	r6, [sp, #8]
   34158:	ldrd	r8, [sp, #16]
   3415c:	ldrd	sl, [sp, #24]
   34160:	add	sp, sp, #32
   34164:	pop	{pc}		; (ldr pc, [sp], #4)
   34168:	mov	r1, r9
   3416c:	add	r0, sp, #60	; 0x3c
   34170:	bl	23e64 <__assert_fail@plt+0x122c0>
   34174:	cmp	r0, #0
   34178:	bne	33b94 <__assert_fail@plt+0x21ff0>
   3417c:	ldrb	r2, [sp, #135]	; 0x87
   34180:	ldr	r1, [r4, #92]	; 0x5c
   34184:	b	33b2c <__assert_fail@plt+0x21f88>
   34188:	mov	r1, #1
   3418c:	mov	r0, #32
   34190:	bl	38fb4 <__assert_fail@plt+0x27410>
   34194:	cmp	r0, #0
   34198:	str	r0, [r4, #60]	; 0x3c
   3419c:	beq	3412c <__assert_fail@plt+0x22588>
   341a0:	str	r5, [sp, #12]
   341a4:	mov	r5, r4
   341a8:	lsl	fp, sl, #3
   341ac:	mov	r4, #0
   341b0:	b	341d8 <__assert_fail@plt+0x22634>
   341b4:	cmp	r3, #0
   341b8:	bne	341c8 <__assert_fail@plt+0x22624>
   341bc:	ldrb	r3, [r5, #88]	; 0x58
   341c0:	orr	r3, r3, #8
   341c4:	strb	r3, [r5, #88]	; 0x58
   341c8:	add	r4, r4, #1
   341cc:	add	fp, fp, #1
   341d0:	cmp	r4, #32
   341d4:	beq	34220 <__assert_fail@plt+0x2267c>
   341d8:	mov	r0, fp
   341dc:	bl	119f4 <btowc@plt>
   341e0:	cmn	r0, #1
   341e4:	bic	r3, fp, #127	; 0x7f
   341e8:	beq	341b4 <__assert_fail@plt+0x22610>
   341ec:	ldr	r1, [r5, #60]	; 0x3c
   341f0:	cmp	r3, #0
   341f4:	mov	r2, #1
   341f8:	ldr	r3, [r1, sl]
   341fc:	orr	r3, r3, r2, lsl r4
   34200:	str	r3, [r1, sl]
   34204:	bne	341c8 <__assert_fail@plt+0x22624>
   34208:	cmp	r0, fp
   3420c:	bne	341bc <__assert_fail@plt+0x22618>
   34210:	add	r4, r4, #1
   34214:	add	fp, fp, #1
   34218:	cmp	r4, #32
   3421c:	bne	341d8 <__assert_fail@plt+0x22634>
   34220:	add	sl, sl, #4
   34224:	cmp	sl, #32
   34228:	bne	341a8 <__assert_fail@plt+0x22604>
   3422c:	mov	r4, r5
   34230:	ldr	r5, [sp, #12]
   34234:	b	33a3c <__assert_fail@plt+0x21e98>
   34238:	str	r3, [sp, #36]	; 0x24
   3423c:	str	r1, [sp, #88]	; 0x58
   34240:	str	r1, [sp, #92]	; 0x5c
   34244:	b	33c9c <__assert_fail@plt+0x220f8>
   34248:	cmp	r3, #0
   3424c:	beq	33fd8 <__assert_fail@plt+0x22434>
   34250:	ldrb	r1, [r3, #24]
   34254:	ldr	r7, [r3, #4]
   34258:	cmp	r1, #17
   3425c:	bne	33fa8 <__assert_fail@plt+0x22404>
   34260:	ldr	r1, [r3, #20]
   34264:	cmp	r7, #0
   34268:	str	r7, [lr, #4]
   3426c:	ldr	r3, [lr, #20]
   34270:	strne	lr, [r7]
   34274:	cmp	r1, #31
   34278:	ldrle	r9, [r5, #80]	; 0x50
   3427c:	ldr	r3, [r0, r3, lsl #2]
   34280:	str	r3, [r0, r1, lsl #2]
   34284:	bicle	r1, r9, r8, lsl r1
   34288:	mov	r3, r7
   3428c:	strle	r1, [r5, #80]	; 0x50
   34290:	b	33f98 <__assert_fail@plt+0x223f4>
   34294:	mov	r3, #12
   34298:	ldr	r5, [r6]
   3429c:	str	r3, [sp, #36]	; 0x24
   342a0:	b	33b9c <__assert_fail@plt+0x21ff8>
   342a4:	ldr	r3, [r5, #52]	; 0x34
   342a8:	mov	r7, r3
   342ac:	ldr	r3, [r3, #4]
   342b0:	cmp	r3, #0
   342b4:	bne	342a8 <__assert_fail@plt+0x22704>
   342b8:	ldr	r3, [r7, #8]
   342bc:	cmp	r3, #0
   342c0:	bne	342a8 <__assert_fail@plt+0x22704>
   342c4:	b	3430c <__assert_fail@plt+0x22768>
   342c8:	ldr	r3, [r7, #4]
   342cc:	ldr	r2, [r3, #12]
   342d0:	ldr	r3, [r3, #28]
   342d4:	str	r2, [r7, #12]
   342d8:	str	r3, [r7, #28]
   342dc:	ldr	r1, [r7]
   342e0:	cmp	r1, #0
   342e4:	beq	34368 <__assert_fail@plt+0x227c4>
   342e8:	ldr	r3, [r1, #8]
   342ec:	sub	r2, r7, r3
   342f0:	cmp	r3, #0
   342f4:	clz	r2, r2
   342f8:	mov	r7, r1
   342fc:	lsr	r2, r2, #5
   34300:	moveq	r2, #1
   34304:	cmp	r2, #0
   34308:	beq	342a8 <__assert_fail@plt+0x22704>
   3430c:	ldrb	r3, [r7, #24]
   34310:	cmp	r3, #16
   34314:	beq	342c8 <__assert_fail@plt+0x22724>
   34318:	add	r3, r7, #20
   3431c:	mov	r0, r5
   34320:	ldm	r3, {r1, r2}
   34324:	str	r7, [r7, #12]
   34328:	bl	248c4 <__assert_fail@plt+0x12d20>
   3432c:	cmn	r0, #1
   34330:	str	r0, [r7, #28]
   34334:	beq	34a88 <__assert_fail@plt+0x22ee4>
   34338:	ldrb	r3, [r7, #24]
   3433c:	cmp	r3, #12
   34340:	bne	342dc <__assert_fail@plt+0x22738>
   34344:	ldr	r3, [r5]
   34348:	ldr	r2, [r7, #20]
   3434c:	add	r0, r3, r0, lsl #3
   34350:	ldr	r3, [r0, #4]
   34354:	bfi	r3, r2, #8, #10
   34358:	str	r3, [r0, #4]
   3435c:	ldr	r1, [r7]
   34360:	cmp	r1, #0
   34364:	bne	342e8 <__assert_fail@plt+0x22744>
   34368:	ldr	fp, [r5, #52]	; 0x34
   3436c:	mov	r3, fp
   34370:	b	3439c <__assert_fail@plt+0x227f8>
   34374:	cmp	r2, #0
   34378:	ldr	r1, [r3, #8]
   3437c:	beq	343d4 <__assert_fail@plt+0x22830>
   34380:	ldr	r0, [r3, #16]
   34384:	cmp	r1, #0
   34388:	str	r0, [r2, #16]
   3438c:	beq	34398 <__assert_fail@plt+0x227f4>
   34390:	ldr	r3, [r3, #16]
   34394:	str	r3, [r1, #16]
   34398:	mov	r3, r2
   3439c:	ldrb	r1, [r3, #24]
   343a0:	ldr	r2, [r3, #4]
   343a4:	cmp	r1, #11
   343a8:	beq	343cc <__assert_fail@plt+0x22828>
   343ac:	cmp	r1, #16
   343b0:	bne	34374 <__assert_fail@plt+0x227d0>
   343b4:	ldr	r1, [r3, #8]
   343b8:	ldr	r0, [r1, #12]
   343bc:	str	r0, [r2, #16]
   343c0:	ldr	r3, [r3, #16]
   343c4:	str	r3, [r1, #16]
   343c8:	b	34398 <__assert_fail@plt+0x227f4>
   343cc:	str	r3, [r2, #16]
   343d0:	b	34398 <__assert_fail@plt+0x227f4>
   343d4:	cmp	r1, #0
   343d8:	beq	343ec <__assert_fail@plt+0x22848>
   343dc:	ldr	r3, [r3, #16]
   343e0:	mov	r2, r1
   343e4:	str	r3, [r1, #16]
   343e8:	b	34398 <__assert_fail@plt+0x227f4>
   343ec:	ldr	r1, [r3]
   343f0:	cmp	r1, #0
   343f4:	bne	34400 <__assert_fail@plt+0x2285c>
   343f8:	b	34420 <__assert_fail@plt+0x2287c>
   343fc:	mov	r1, r2
   34400:	ldr	r2, [r1, #8]
   34404:	cmp	r2, #0
   34408:	cmpne	r2, r3
   3440c:	bne	34398 <__assert_fail@plt+0x227f4>
   34410:	ldr	r2, [r1]
   34414:	mov	r3, r1
   34418:	cmp	r2, #0
   3441c:	bne	343fc <__assert_fail@plt+0x22858>
   34420:	mov	r7, #1
   34424:	mov	r9, #2
   34428:	str	r4, [sp, #20]
   3442c:	ldrb	r2, [fp, #24]
   34430:	ldr	r3, [fp, #28]
   34434:	sub	r2, r2, #2
   34438:	cmp	r2, #14
   3443c:	ldrls	pc, [pc, r2, lsl #2]
   34440:	b	345f4 <__assert_fail@plt+0x22a50>
   34444:	strdeq	r4, [r3], -r8
   34448:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   3444c:	andeq	r4, r3, r8, asr #11
   34450:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   34454:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   34458:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   3445c:	muleq	r3, r0, r5
   34460:	muleq	r3, r0, r5
   34464:	andeq	r4, r3, r0, lsl #9
   34468:	andeq	r4, r3, r0, lsl #9
   3446c:	muleq	r3, r0, r5
   34470:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   34474:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   34478:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   3447c:	strdeq	r4, [r3], -r8
   34480:	ldrb	r2, [r5, #88]	; 0x58
   34484:	add	r3, r3, r3, lsl #1
   34488:	mov	r0, #8
   3448c:	orr	r2, r2, #1
   34490:	strb	r2, [r5, #88]	; 0x58
   34494:	ldr	r2, [fp, #4]
   34498:	cmp	r2, #0
   3449c:	ldrne	r2, [r2, #12]
   344a0:	ldreq	r2, [fp, #16]
   344a4:	ldr	sl, [r2, #28]
   344a8:	ldr	r2, [fp, #8]
   344ac:	cmp	r2, #0
   344b0:	ldrne	r2, [r2, #12]
   344b4:	ldreq	r2, [fp, #16]
   344b8:	ldr	r4, [r2, #28]
   344bc:	ldr	r2, [r5, #20]
   344c0:	add	r8, r2, r3, lsl #2
   344c4:	str	r9, [r2, r3, lsl #2]
   344c8:	bl	39028 <__assert_fail@plt+0x27484>
   344cc:	cmp	r0, #0
   344d0:	str	r0, [r8, #8]
   344d4:	beq	34a84 <__assert_fail@plt+0x22ee0>
   344d8:	cmp	sl, r4
   344dc:	streq	r7, [r8, #4]
   344e0:	streq	sl, [r0]
   344e4:	beq	344f8 <__assert_fail@plt+0x22954>
   344e8:	str	r9, [r8, #4]
   344ec:	strlt	sl, [r0]
   344f0:	strlt	r4, [r0, #4]
   344f4:	stmge	r0, {r4, sl}
   344f8:	ldr	r3, [fp, #4]
   344fc:	cmp	r3, #0
   34500:	beq	34510 <__assert_fail@plt+0x2296c>
   34504:	mov	fp, r3
   34508:	b	3442c <__assert_fail@plt+0x22888>
   3450c:	mov	fp, r8
   34510:	ldr	r2, [fp, #8]
   34514:	sub	r3, r2, r3
   34518:	cmp	r2, #0
   3451c:	clz	r3, r3
   34520:	moveq	sl, #1
   34524:	lsr	r3, r3, #5
   34528:	movne	sl, r3
   3452c:	cmp	sl, #0
   34530:	beq	34b90 <__assert_fail@plt+0x22fec>
   34534:	ldr	r8, [fp]
   34538:	mov	r3, fp
   3453c:	cmp	r8, #0
   34540:	bne	3450c <__assert_fail@plt+0x22968>
   34544:	ldr	r4, [sp, #20]
   34548:	mov	fp, r8
   3454c:	mov	r7, r8
   34550:	ldr	r2, [r5, #24]
   34554:	add	r9, r7, r7, lsl #1
   34558:	lsl	r9, r9, #2
   3455c:	add	r3, r2, r9
   34560:	ldr	r3, [r3, #4]
   34564:	cmp	r3, #0
   34568:	beq	34640 <__assert_fail@plt+0x22a9c>
   3456c:	ldr	r3, [r5, #8]
   34570:	add	r7, r7, #1
   34574:	cmp	r3, r7
   34578:	bne	34554 <__assert_fail@plt+0x229b0>
   3457c:	cmp	fp, #0
   34580:	beq	3467c <__assert_fail@plt+0x22ad8>
   34584:	mov	fp, #0
   34588:	mov	r7, fp
   3458c:	b	34554 <__assert_fail@plt+0x229b0>
   34590:	ldr	r1, [fp, #16]
   34594:	add	r3, r3, r3, lsl #1
   34598:	mov	r0, #4
   3459c:	ldr	r2, [r5, #20]
   345a0:	ldr	r8, [r1, #28]
   345a4:	add	sl, r2, r3, lsl #2
   345a8:	str	r7, [r2, r3, lsl #2]
   345ac:	str	r7, [sl, #4]
   345b0:	bl	39028 <__assert_fail@plt+0x27484>
   345b4:	cmp	r0, #0
   345b8:	str	r0, [sl, #8]
   345bc:	beq	34da8 <__assert_fail@plt+0x23204>
   345c0:	str	r8, [r0]
   345c4:	b	344f8 <__assert_fail@plt+0x22954>
   345c8:	ldr	r1, [fp, #16]
   345cc:	ldr	r2, [r5, #12]
   345d0:	ldr	r8, [r1, #28]
   345d4:	str	r8, [r2, r3, lsl #2]
   345d8:	ldrb	r0, [fp, #24]
   345dc:	cmp	r0, #4
   345e0:	bne	344f8 <__assert_fail@plt+0x22954>
   345e4:	ldr	r2, [r5, #20]
   345e8:	add	r3, r3, r3, lsl #1
   345ec:	add	sl, r2, r3, lsl #2
   345f0:	b	345a8 <__assert_fail@plt+0x22a04>
   345f4:	ldr	r1, [fp, #16]
   345f8:	ldr	r2, [r5, #12]
   345fc:	ldr	r1, [r1, #28]
   34600:	str	r1, [r2, r3, lsl #2]
   34604:	b	344f8 <__assert_fail@plt+0x22954>
   34608:	ldr	r0, [sp, #56]	; 0x38
   3460c:	bl	19610 <__assert_fail@plt+0x7a6c>
   34610:	ldr	r3, [r5, #8]
   34614:	cmp	r3, r7
   34618:	moveq	fp, r9
   3461c:	moveq	r7, fp
   34620:	movne	fp, sl
   34624:	ldr	r2, [r5, #24]
   34628:	add	r9, r7, r7, lsl #1
   3462c:	lsl	r9, r9, #2
   34630:	add	r1, r2, r9
   34634:	ldr	r1, [r1, #4]
   34638:	cmp	r1, #0
   3463c:	bne	34570 <__assert_fail@plt+0x229cc>
   34640:	mov	r3, #1
   34644:	mov	r2, r7
   34648:	mov	r1, r5
   3464c:	add	r0, sp, #48	; 0x30
   34650:	bl	293fc <__assert_fail@plt+0x17858>
   34654:	cmp	r0, #0
   34658:	bne	34a58 <__assert_fail@plt+0x22eb4>
   3465c:	ldr	r2, [r5, #24]
   34660:	add	r7, r7, #1
   34664:	add	r9, r2, r9
   34668:	ldr	r9, [r9, #4]
   3466c:	cmp	r9, #0
   34670:	beq	34608 <__assert_fail@plt+0x22a64>
   34674:	ldr	r3, [r5, #8]
   34678:	b	34574 <__assert_fail@plt+0x229d0>
   3467c:	ldrb	r3, [r6, #28]
   34680:	tst	r3, #16
   34684:	bne	346a0 <__assert_fail@plt+0x22afc>
   34688:	ldr	r3, [r6, #24]
   3468c:	cmp	r3, #0
   34690:	beq	346a0 <__assert_fail@plt+0x22afc>
   34694:	ldrb	r3, [r5, #88]	; 0x58
   34698:	tst	r3, #1
   3469c:	bne	346ac <__assert_fail@plt+0x22b08>
   346a0:	ldr	r3, [r5, #76]	; 0x4c
   346a4:	cmp	r3, #0
   346a8:	beq	347d0 <__assert_fail@plt+0x22c2c>
   346ac:	add	r7, r7, r7, lsl #1
   346b0:	lsl	r0, r7, #2
   346b4:	bl	39028 <__assert_fail@plt+0x27484>
   346b8:	cmp	r0, #0
   346bc:	str	r0, [r5, #28]
   346c0:	beq	34294 <__assert_fail@plt+0x226f0>
   346c4:	ldr	r3, [r5, #8]
   346c8:	cmp	r3, #0
   346cc:	movne	r3, #0
   346d0:	movne	r2, r3
   346d4:	bne	346e0 <__assert_fail@plt+0x22b3c>
   346d8:	b	347d0 <__assert_fail@plt+0x22c2c>
   346dc:	ldr	r0, [r5, #28]
   346e0:	add	ip, r3, r3, lsl #1
   346e4:	add	r3, r3, #1
   346e8:	add	r1, r0, ip, lsl #2
   346ec:	str	r2, [r0, ip, lsl #2]
   346f0:	str	r2, [r1, #4]
   346f4:	str	r2, [r1, #8]
   346f8:	ldr	r1, [r5, #8]
   346fc:	cmp	r1, r3
   34700:	bhi	346dc <__assert_fail@plt+0x22b38>
   34704:	cmp	r1, #0
   34708:	beq	347d0 <__assert_fail@plt+0x22c2c>
   3470c:	ldr	ip, [r5, #24]
   34710:	mov	r3, #0
   34714:	mov	sl, r3
   34718:	str	r4, [sp, #20]
   3471c:	mov	r4, r3
   34720:	str	r8, [sp, #24]
   34724:	str	fp, [sp, #28]
   34728:	add	fp, ip, r4
   3472c:	ldmib	fp, {r3, r9}
   34730:	cmp	r3, #0
   34734:	ble	347b8 <__assert_fail@plt+0x22c14>
   34738:	sub	r9, r9, #4
   3473c:	mov	r8, #0
   34740:	b	34760 <__assert_fail@plt+0x22bbc>
   34744:	add	r3, r1, #1
   34748:	add	r8, r8, #1
   3474c:	str	r3, [r7, #4]
   34750:	str	sl, [r0, r1, lsl #2]
   34754:	ldr	r3, [fp, #4]
   34758:	cmp	r8, r3
   3475c:	bge	347b4 <__assert_fail@plt+0x22c10>
   34760:	ldr	r3, [r9, #4]!
   34764:	ldr	r2, [r5, #28]
   34768:	add	r3, r3, r3, lsl #1
   3476c:	add	r7, r2, r3, lsl #2
   34770:	ldr	lr, [r2, r3, lsl #2]
   34774:	ldr	r1, [r7, #4]
   34778:	ldr	r0, [r7, #8]
   3477c:	cmp	lr, r1
   34780:	bne	34744 <__assert_fail@plt+0x22ba0>
   34784:	add	r1, r1, #1
   34788:	lsl	ip, r1, #1
   3478c:	lsl	r1, r1, #3
   34790:	str	ip, [r2, r3, lsl #2]
   34794:	bl	39064 <__assert_fail@plt+0x274c0>
   34798:	cmp	r0, #0
   3479c:	beq	34a84 <__assert_fail@plt+0x22ee0>
   347a0:	ldr	ip, [r5, #24]
   347a4:	str	r0, [r7, #8]
   347a8:	ldr	r1, [r7, #4]
   347ac:	add	fp, ip, r4
   347b0:	b	34744 <__assert_fail@plt+0x22ba0>
   347b4:	ldr	r1, [r5, #8]
   347b8:	add	sl, sl, #1
   347bc:	add	r4, r4, #12
   347c0:	cmp	sl, r1
   347c4:	bcc	34728 <__assert_fail@plt+0x22b84>
   347c8:	add	r4, sp, #20
   347cc:	ldm	r4, {r4, r8, fp}
   347d0:	mov	r1, #0
   347d4:	str	r1, [sp, #36]	; 0x24
   347d8:	ldr	r3, [sp, #12]
   347dc:	ldrb	r2, [r4, #88]	; 0x58
   347e0:	clz	r3, r3
   347e4:	lsr	r3, r3, #5
   347e8:	ands	r3, r3, r2, lsr #2
   347ec:	bne	34ab0 <__assert_fail@plt+0x22f0c>
   347f0:	ldr	r7, [r4, #24]
   347f4:	ldr	r3, [r4, #52]	; 0x34
   347f8:	ldr	r3, [r3, #12]
   347fc:	ldr	r3, [r3, #28]
   34800:	add	r2, r3, r3, lsl #1
   34804:	str	r3, [r4, #72]	; 0x48
   34808:	add	r7, r7, r2, lsl #2
   3480c:	ldr	r3, [r7, #4]
   34810:	cmp	r3, #0
   34814:	str	r3, [sp, #52]	; 0x34
   34818:	ble	34a68 <__assert_fail@plt+0x22ec4>
   3481c:	lsl	r0, r3, #2
   34820:	str	r3, [sp, #48]	; 0x30
   34824:	bl	39028 <__assert_fail@plt+0x27484>
   34828:	cmp	r0, #0
   3482c:	mov	r8, r0
   34830:	str	r0, [sp, #56]	; 0x38
   34834:	beq	34de8 <__assert_fail@plt+0x23244>
   34838:	ldr	r2, [r7, #4]
   3483c:	add	r5, sp, #48	; 0x30
   34840:	ldr	r1, [r7, #8]
   34844:	lsl	r2, r2, #2
   34848:	bl	11784 <memcpy@plt>
   3484c:	mov	r3, #0
   34850:	str	r3, [sp, #40]	; 0x28
   34854:	ldr	r3, [r4, #76]	; 0x4c
   34858:	cmp	r3, #0
   3485c:	ble	34988 <__assert_fail@plt+0x22de4>
   34860:	ldr	r7, [sp, #52]	; 0x34
   34864:	cmp	r7, #0
   34868:	ble	34988 <__assert_fail@plt+0x22de4>
   3486c:	mov	ip, #0
   34870:	b	34884 <__assert_fail@plt+0x22ce0>
   34874:	add	ip, ip, #1
   34878:	cmp	r7, ip
   3487c:	ble	34988 <__assert_fail@plt+0x22de4>
   34880:	ldr	r8, [sp, #56]	; 0x38
   34884:	ldr	r3, [r8, ip, lsl #2]
   34888:	ldr	r0, [r4]
   3488c:	add	r9, r0, r3, lsl #3
   34890:	ldrb	r2, [r9, #4]
   34894:	cmp	r2, #4
   34898:	bne	34874 <__assert_fail@plt+0x22cd0>
   3489c:	sub	lr, r8, #4
   348a0:	mov	r1, #0
   348a4:	b	348b4 <__assert_fail@plt+0x22d10>
   348a8:	add	r1, r1, #1
   348ac:	cmp	r7, r1
   348b0:	beq	34874 <__assert_fail@plt+0x22cd0>
   348b4:	ldr	r2, [lr, #4]!
   348b8:	add	sl, r0, r2, lsl #3
   348bc:	ldrb	sl, [sl, #4]
   348c0:	cmp	sl, #9
   348c4:	bne	348a8 <__assert_fail@plt+0x22d04>
   348c8:	ldr	sl, [r0, r2, lsl #3]
   348cc:	ldr	r2, [r9]
   348d0:	cmp	sl, r2
   348d4:	bne	348a8 <__assert_fail@plt+0x22d04>
   348d8:	ldr	r1, [r4, #20]
   348dc:	add	r3, r3, r3, lsl #1
   348e0:	subs	r2, r7, #1
   348e4:	add	r3, r1, r3, lsl #2
   348e8:	moveq	r1, r2
   348ec:	ldr	r3, [r3, #8]
   348f0:	ldr	lr, [r3]
   348f4:	beq	34950 <__assert_fail@plt+0x22dac>
   348f8:	mov	r1, #0
   348fc:	add	r3, r2, r1
   34900:	lsr	r3, r3, #1
   34904:	ldr	r0, [r8, r3, lsl #2]
   34908:	cmp	lr, r0
   3490c:	bgt	34a48 <__assert_fail@plt+0x22ea4>
   34910:	cmp	r3, r1
   34914:	bls	34950 <__assert_fail@plt+0x22dac>
   34918:	add	r2, r3, r1
   3491c:	lsr	r2, r2, #1
   34920:	ldr	r0, [r8, r2, lsl #2]
   34924:	cmp	lr, r0
   34928:	ble	34948 <__assert_fail@plt+0x22da4>
   3492c:	b	34a3c <__assert_fail@plt+0x22e98>
   34930:	add	r3, r1, r2
   34934:	lsr	r3, r3, #1
   34938:	ldr	r0, [r8, r3, lsl #2]
   3493c:	cmp	lr, r0
   34940:	bgt	34a48 <__assert_fail@plt+0x22ea4>
   34944:	mov	r2, r3
   34948:	cmp	r1, r2
   3494c:	bcc	34930 <__assert_fail@plt+0x22d8c>
   34950:	ldr	r3, [r8, r1, lsl #2]
   34954:	cmp	lr, r3
   34958:	beq	34874 <__assert_fail@plt+0x22cd0>
   3495c:	ldr	r1, [r4, #24]
   34960:	add	lr, lr, lr, lsl #1
   34964:	mov	r0, r5
   34968:	add	r1, r1, lr, lsl #2
   3496c:	bl	24f74 <__assert_fail@plt+0x133d0>
   34970:	cmp	r0, #0
   34974:	bne	349cc <__assert_fail@plt+0x22e28>
   34978:	ldr	r7, [sp, #52]	; 0x34
   3497c:	mov	ip, #1
   34980:	cmp	r7, ip
   34984:	bgt	34880 <__assert_fail@plt+0x22cdc>
   34988:	mov	r3, #0
   3498c:	mov	r2, r5
   34990:	mov	r1, r4
   34994:	add	r0, sp, #40	; 0x28
   34998:	bl	29f88 <__assert_fail@plt+0x183e4>
   3499c:	cmp	r0, #0
   349a0:	str	r0, [r4, #36]	; 0x24
   349a4:	beq	34b88 <__assert_fail@plt+0x22fe4>
   349a8:	ldrsb	r3, [r0, #52]	; 0x34
   349ac:	cmp	r3, #0
   349b0:	strge	r0, [r4, #40]	; 0x28
   349b4:	strge	r0, [r4, #44]	; 0x2c
   349b8:	strge	r0, [r4, #48]	; 0x30
   349bc:	blt	34b24 <__assert_fail@plt+0x22f80>
   349c0:	ldr	r0, [sp, #56]	; 0x38
   349c4:	bl	19610 <__assert_fail@plt+0x7a6c>
   349c8:	mov	r0, #0
   349cc:	ldr	r5, [r6]
   349d0:	str	r0, [sp, #36]	; 0x24
   349d4:	ldr	r0, [r5, #56]	; 0x38
   349d8:	cmp	r0, #0
   349dc:	beq	349f0 <__assert_fail@plt+0x22e4c>
   349e0:	ldr	r7, [r0]
   349e4:	bl	19610 <__assert_fail@plt+0x7a6c>
   349e8:	subs	r0, r7, #0
   349ec:	bne	349e0 <__assert_fail@plt+0x22e3c>
   349f0:	mov	r3, #31
   349f4:	mov	r7, #0
   349f8:	ldr	r0, [r5, #16]
   349fc:	str	r7, [r5, #52]	; 0x34
   34a00:	str	r7, [r5, #56]	; 0x38
   34a04:	str	r3, [r5, #64]	; 0x40
   34a08:	bl	19610 <__assert_fail@plt+0x7a6c>
   34a0c:	str	r7, [r5, #16]
   34a10:	ldr	r0, [sp, #68]	; 0x44
   34a14:	bl	19610 <__assert_fail@plt+0x7a6c>
   34a18:	ldr	r0, [sp, #72]	; 0x48
   34a1c:	bl	19610 <__assert_fail@plt+0x7a6c>
   34a20:	ldrb	r3, [sp, #135]	; 0x87
   34a24:	cmp	r3, r7
   34a28:	bne	34a90 <__assert_fail@plt+0x22eec>
   34a2c:	ldr	r0, [sp, #36]	; 0x24
   34a30:	cmp	r0, #0
   34a34:	beq	3414c <__assert_fail@plt+0x225a8>
   34a38:	b	33bf4 <__assert_fail@plt+0x22050>
   34a3c:	mov	r1, r2
   34a40:	mov	r2, r3
   34a44:	mov	r3, r1
   34a48:	add	r1, r3, #1
   34a4c:	cmp	r1, r2
   34a50:	bcc	348fc <__assert_fail@plt+0x22d58>
   34a54:	b	34950 <__assert_fail@plt+0x22dac>
   34a58:	mov	r3, r0
   34a5c:	str	r3, [sp, #36]	; 0x24
   34a60:	ldr	r5, [r6]
   34a64:	b	33b9c <__assert_fail@plt+0x21ff8>
   34a68:	mov	r3, #0
   34a6c:	add	r5, sp, #48	; 0x30
   34a70:	str	r3, [sp, #40]	; 0x28
   34a74:	str	r3, [sp, #48]	; 0x30
   34a78:	str	r3, [r5, #4]
   34a7c:	str	r3, [r5, #8]
   34a80:	b	34854 <__assert_fail@plt+0x22cb0>
   34a84:	ldr	r4, [sp, #20]
   34a88:	mov	r3, #12
   34a8c:	b	34a5c <__assert_fail@plt+0x22eb8>
   34a90:	ldr	r0, [sp, #64]	; 0x40
   34a94:	bl	19610 <__assert_fail@plt+0x7a6c>
   34a98:	b	34a2c <__assert_fail@plt+0x22e88>
   34a9c:	add	r0, sp, #60	; 0x3c
   34aa0:	bl	2406c <__assert_fail@plt+0x124c8>
   34aa4:	ldr	r3, [sp, #12]
   34aa8:	str	r3, [sp, #36]	; 0x24
   34aac:	b	33c9c <__assert_fail@plt+0x220f8>
   34ab0:	ldr	r2, [r6, #20]
   34ab4:	cmp	r2, #0
   34ab8:	bne	347f0 <__assert_fail@plt+0x22c4c>
   34abc:	ldr	r5, [r4, #8]
   34ac0:	cmp	r5, #0
   34ac4:	beq	34e2c <__assert_fail@plt+0x23288>
   34ac8:	ldr	lr, [r4]
   34acc:	mov	r0, r2
   34ad0:	mov	ip, r2
   34ad4:	mov	r1, lr
   34ad8:	ldrb	r2, [r1, #4]
   34adc:	sub	r2, r2, #1
   34ae0:	cmp	r2, #11
   34ae4:	ldrls	pc, [pc, r2, lsl #2]
   34ae8:	b	34e5c <__assert_fail@plt+0x232b8>
   34aec:	andeq	r4, r3, ip, lsr sp
   34af0:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   34af4:	andeq	r4, r3, ip, asr #26
   34af8:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   34afc:	ldrdeq	r4, [r3], -r0
   34b00:	strdeq	r4, [r3], -r0
   34b04:	andeq	r4, r3, ip, asr lr
   34b08:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   34b0c:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   34b10:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   34b14:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   34b18:	andeq	r4, r3, r4, lsl #27
   34b1c:	ldr	r2, [r5, #52]	; 0x34
   34b20:	b	34048 <__assert_fail@plt+0x224a4>
   34b24:	mov	r3, #1
   34b28:	mov	r2, r5
   34b2c:	mov	r1, r4
   34b30:	add	r0, sp, #40	; 0x28
   34b34:	bl	29f88 <__assert_fail@plt+0x183e4>
   34b38:	mov	r3, #2
   34b3c:	mov	r2, r5
   34b40:	str	r0, [r4, #40]	; 0x28
   34b44:	mov	r1, r4
   34b48:	add	r0, sp, #40	; 0x28
   34b4c:	bl	29f88 <__assert_fail@plt+0x183e4>
   34b50:	mov	r3, #6
   34b54:	mov	r2, r5
   34b58:	str	r0, [r4, #44]	; 0x2c
   34b5c:	mov	r1, r4
   34b60:	add	r0, sp, #40	; 0x28
   34b64:	bl	29f88 <__assert_fail@plt+0x183e4>
   34b68:	ldr	r3, [r4, #40]	; 0x28
   34b6c:	str	r0, [r4, #48]	; 0x30
   34b70:	cmp	r3, #0
   34b74:	beq	34b88 <__assert_fail@plt+0x22fe4>
   34b78:	ldr	r3, [r4, #44]	; 0x2c
   34b7c:	cmp	r0, #0
   34b80:	cmpne	r3, #0
   34b84:	bne	349c0 <__assert_fail@plt+0x22e1c>
   34b88:	ldr	r0, [sp, #40]	; 0x28
   34b8c:	b	349cc <__assert_fail@plt+0x22e28>
   34b90:	mov	r3, r2
   34b94:	b	34504 <__assert_fail@plt+0x22960>
   34b98:	ldr	r5, [sp, #88]	; 0x58
   34b9c:	ldr	r9, [sp, #96]	; 0x60
   34ba0:	ldr	r3, [sp, #108]	; 0x6c
   34ba4:	cmp	r9, r3
   34ba8:	movge	r9, r3
   34bac:	cmp	r9, r5
   34bb0:	ble	34e10 <__assert_fail@plt+0x2326c>
   34bb4:	bl	11934 <__ctype_toupper_loc@plt>
   34bb8:	b	34bd8 <__assert_fail@plt+0x23034>
   34bbc:	ldr	r2, [r0]
   34bc0:	ldr	r3, [r2, r3, lsl #2]
   34bc4:	strb	r3, [r8, r5]
   34bc8:	add	r5, r5, #1
   34bcc:	cmp	r9, r5
   34bd0:	beq	34c10 <__assert_fail@plt+0x2306c>
   34bd4:	ldr	r8, [sp, #64]	; 0x40
   34bd8:	ldr	r3, [sp, #60]	; 0x3c
   34bdc:	ldr	r1, [sp, #84]	; 0x54
   34be0:	ldr	r2, [sp, #124]	; 0x7c
   34be4:	add	r3, r3, r5
   34be8:	ldrb	r3, [r3, r1]
   34bec:	cmp	r2, #0
   34bf0:	beq	34bbc <__assert_fail@plt+0x23018>
   34bf4:	ldrb	r2, [r2, r3]
   34bf8:	ldr	r3, [r0]
   34bfc:	ldr	r3, [r3, r2, lsl #2]
   34c00:	strb	r3, [r8, r5]
   34c04:	add	r5, r5, #1
   34c08:	cmp	r9, r5
   34c0c:	bne	34bd4 <__assert_fail@plt+0x23030>
   34c10:	mov	r3, #0
   34c14:	str	r3, [sp, #36]	; 0x24
   34c18:	str	r9, [sp, #88]	; 0x58
   34c1c:	str	r9, [sp, #92]	; 0x5c
   34c20:	b	33c9c <__assert_fail@plt+0x220f8>
   34c24:	mov	r0, r4
   34c28:	mov	r1, #160	; 0xa0
   34c2c:	bl	39064 <__assert_fail@plt+0x274c0>
   34c30:	subs	r4, r0, #0
   34c34:	beq	34e18 <__assert_fail@plt+0x23274>
   34c38:	mov	r3, #160	; 0xa0
   34c3c:	str	r4, [r6]
   34c40:	str	r3, [r6, #4]
   34c44:	b	33928 <__assert_fail@plt+0x21d84>
   34c48:	mov	sl, r5
   34c4c:	mov	r1, #1
   34c50:	b	33988 <__assert_fail@plt+0x21de4>
   34c54:	mov	r7, r8
   34c58:	mov	r9, r8
   34c5c:	b	33ef0 <__assert_fail@plt+0x2234c>
   34c60:	ldr	r0, [sp, #64]	; 0x40
   34c64:	bl	19610 <__assert_fail@plt+0x7a6c>
   34c68:	b	33bf4 <__assert_fail@plt+0x22050>
   34c6c:	cmp	r9, #0
   34c70:	movne	r8, #1
   34c74:	bne	33d94 <__assert_fail@plt+0x221f0>
   34c78:	ldr	r5, [r6]
   34c7c:	mov	r2, #12
   34c80:	mov	r3, #0
   34c84:	str	r2, [sp, #36]	; 0x24
   34c88:	str	r3, [r4, #52]	; 0x34
   34c8c:	b	33b9c <__assert_fail@plt+0x21ff8>
   34c90:	mov	r0, #996	; 0x3e4
   34c94:	bl	39028 <__assert_fail@plt+0x27484>
   34c98:	subs	r7, r0, #0
   34c9c:	beq	34c6c <__assert_fail@plt+0x230c8>
   34ca0:	ldr	r1, [r5, #56]	; 0x38
   34ca4:	mov	r3, sl
   34ca8:	mov	r2, #1
   34cac:	mov	r0, #4
   34cb0:	str	r1, [r7]
   34cb4:	str	r7, [r5, #56]	; 0x38
   34cb8:	b	33d34 <__assert_fail@plt+0x22190>
   34cbc:	mov	r2, r3
   34cc0:	b	3404c <__assert_fail@plt+0x224a8>
   34cc4:	mov	r3, #0
   34cc8:	str	r3, [sp, #36]	; 0x24
   34ccc:	b	33c9c <__assert_fail@plt+0x220f8>
   34cd0:	mov	r0, r3
   34cd4:	add	ip, ip, #1
   34cd8:	add	r1, r1, #8
   34cdc:	cmp	ip, r5
   34ce0:	bne	34ad8 <__assert_fail@plt+0x22f34>
   34ce4:	orr	fp, fp, r0
   34ce8:	ands	fp, fp, #255	; 0xff
   34cec:	moveq	r0, fp
   34cf0:	beq	34e30 <__assert_fail@plt+0x2328c>
   34cf4:	add	ip, lr, ip, lsl #3
   34cf8:	mov	r2, #7
   34cfc:	b	34d14 <__assert_fail@plt+0x23170>
   34d00:	cmp	r3, #5
   34d04:	strbeq	r2, [lr, #4]
   34d08:	add	lr, lr, #8
   34d0c:	cmp	ip, lr
   34d10:	beq	34e30 <__assert_fail@plt+0x2328c>
   34d14:	ldrb	r3, [lr, #4]
   34d18:	cmp	r3, #1
   34d1c:	bne	34d00 <__assert_fail@plt+0x2315c>
   34d20:	ldrsb	r3, [lr]
   34d24:	cmp	r3, #0
   34d28:	bge	34d08 <__assert_fail@plt+0x23164>
   34d2c:	ldrb	r3, [lr, #6]
   34d30:	bfc	r3, #5, #1
   34d34:	strb	r3, [lr, #6]
   34d38:	b	34d08 <__assert_fail@plt+0x23164>
   34d3c:	ldrsb	r2, [r1]
   34d40:	cmp	r2, #0
   34d44:	movlt	fp, r3
   34d48:	b	34cd4 <__assert_fail@plt+0x23130>
   34d4c:	ldr	r2, [r1]
   34d50:	ldr	r7, [r2, #16]
   34d54:	cmp	r7, #0
   34d58:	bne	347f0 <__assert_fail@plt+0x22c4c>
   34d5c:	ldr	r7, [r2, #20]
   34d60:	cmp	r7, #0
   34d64:	bne	347f0 <__assert_fail@plt+0x22c4c>
   34d68:	ldr	r7, [r2, #24]
   34d6c:	cmp	r7, #0
   34d70:	bne	347f0 <__assert_fail@plt+0x22c4c>
   34d74:	ldr	r2, [r2, #28]
   34d78:	cmp	r2, #0
   34d7c:	beq	34cd4 <__assert_fail@plt+0x23130>
   34d80:	b	347f0 <__assert_fail@plt+0x22c4c>
   34d84:	ldr	r2, [r1]
   34d88:	cmp	r2, #32
   34d8c:	beq	34cd4 <__assert_fail@plt+0x23130>
   34d90:	bls	34dfc <__assert_fail@plt+0x23258>
   34d94:	cmp	r2, #64	; 0x40
   34d98:	beq	34cd4 <__assert_fail@plt+0x23130>
   34d9c:	cmp	r2, #128	; 0x80
   34da0:	beq	34cd4 <__assert_fail@plt+0x23130>
   34da4:	b	347f0 <__assert_fail@plt+0x22c4c>
   34da8:	mov	r3, #12
   34dac:	ldr	r4, [sp, #20]
   34db0:	str	r0, [sl]
   34db4:	str	r0, [sl, #4]
   34db8:	b	34a5c <__assert_fail@plt+0x22eb8>
   34dbc:	mov	r0, #996	; 0x3e4
   34dc0:	bl	39028 <__assert_fail@plt+0x27484>
   34dc4:	cmp	r0, #0
   34dc8:	beq	34c78 <__assert_fail@plt+0x230d4>
   34dcc:	ldr	ip, [r5, #56]	; 0x38
   34dd0:	mov	r2, #4
   34dd4:	mov	r3, #1
   34dd8:	mov	r1, #0
   34ddc:	str	ip, [r0]
   34de0:	str	r0, [r5, #56]	; 0x38
   34de4:	b	33dbc <__assert_fail@plt+0x22218>
   34de8:	mov	r0, #12
   34dec:	b	349cc <__assert_fail@plt+0x22e28>
   34df0:	mov	r3, r8
   34df4:	mov	r7, r8
   34df8:	b	33f38 <__assert_fail@plt+0x22394>
   34dfc:	cmp	r2, #16
   34e00:	beq	34cd4 <__assert_fail@plt+0x23130>
   34e04:	b	347f0 <__assert_fail@plt+0x22c4c>
   34e08:	mov	r1, r3
   34e0c:	b	33c8c <__assert_fail@plt+0x220e8>
   34e10:	mov	r9, r5
   34e14:	b	34c10 <__assert_fail@plt+0x2306c>
   34e18:	mov	r0, #12
   34e1c:	b	3414c <__assert_fail@plt+0x225a8>
   34e20:	ldr	r5, [r6]
   34e24:	str	r8, [r4, #52]	; 0x34
   34e28:	b	33b9c <__assert_fail@plt+0x21ff8>
   34e2c:	mov	r0, r5
   34e30:	ldrb	r3, [r4, #88]	; 0x58
   34e34:	mov	r1, #1
   34e38:	ldr	r2, [r4, #76]	; 0x4c
   34e3c:	str	r1, [r4, #92]	; 0x5c
   34e40:	and	r3, r3, #251	; 0xfb
   34e44:	cmp	r2, #0
   34e48:	movle	r2, r0
   34e4c:	orrgt	r2, r0, #1
   34e50:	bfi	r3, r2, #1, #1
   34e54:	strb	r3, [r4, #88]	; 0x58
   34e58:	b	347f0 <__assert_fail@plt+0x22c4c>
   34e5c:	bl	11b68 <abort@plt>
   34e60:	movw	r3, #54268	; 0xd3fc
   34e64:	movt	r3, #4
   34e68:	str	r4, [sp, #-8]!
   34e6c:	ldr	r3, [r3]
   34e70:	str	lr, [sp, #4]
   34e74:	mov	lr, r2
   34e78:	mov	r2, r1
   34e7c:	ldrb	ip, [lr, #28]
   34e80:	mov	r1, r0
   34e84:	mov	r0, lr
   34e88:	ubfx	r4, r3, #25, #1
   34e8c:	bfi	ip, r4, #4, #1
   34e90:	mvn	ip, ip, lsl #25
   34e94:	mvn	ip, ip, lsr #25
   34e98:	strb	ip, [lr, #28]
   34e9c:	bl	338d0 <__assert_fail@plt+0x21d2c>
   34ea0:	subs	r3, r0, #0
   34ea4:	beq	34ed8 <__assert_fail@plt+0x23334>
   34ea8:	movw	r1, #50168	; 0xc3f8
   34eac:	movt	r1, #3
   34eb0:	ldr	r4, [sp]
   34eb4:	add	r3, r1, r3, lsl #2
   34eb8:	add	r1, r1, #32
   34ebc:	mov	r2, #5
   34ec0:	mov	r0, #0
   34ec4:	ldr	lr, [sp, #4]
   34ec8:	add	sp, sp, #8
   34ecc:	ldr	r3, [r3, #416]	; 0x1a0
   34ed0:	add	r1, r1, r3
   34ed4:	b	117d8 <dcgettext@plt>
   34ed8:	ldr	r4, [sp]
   34edc:	add	sp, sp, #4
   34ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   34ee4:	movw	r3, #54268	; 0xd3fc
   34ee8:	movt	r3, #4
   34eec:	ldr	r2, [r3]
   34ef0:	str	r0, [r3]
   34ef4:	mov	r0, r2
   34ef8:	bx	lr
   34efc:	strd	r4, [sp, #-16]!
   34f00:	mov	r2, #256	; 0x100
   34f04:	mov	r4, r0
   34f08:	ldr	r5, [r0]
   34f0c:	mov	r1, #0
   34f10:	str	r6, [sp, #8]
   34f14:	ldr	r6, [r0, #16]
   34f18:	str	lr, [sp, #12]
   34f1c:	mov	r0, r6
   34f20:	bl	119e8 <memset@plt>
   34f24:	ldr	r1, [r5, #36]	; 0x24
   34f28:	mov	r3, r6
   34f2c:	mov	r0, r4
   34f30:	add	r2, r1, #12
   34f34:	add	r1, r1, #8
   34f38:	bl	26924 <__assert_fail@plt+0x14d80>
   34f3c:	ldr	r3, [r5, #36]	; 0x24
   34f40:	ldr	r0, [r5, #40]	; 0x28
   34f44:	cmp	r3, r0
   34f48:	beq	34f64 <__assert_fail@plt+0x233c0>
   34f4c:	add	r2, r0, #12
   34f50:	add	r1, r0, #8
   34f54:	mov	r3, r6
   34f58:	mov	r0, r4
   34f5c:	bl	26924 <__assert_fail@plt+0x14d80>
   34f60:	ldr	r0, [r5, #36]	; 0x24
   34f64:	ldr	r1, [r5, #44]	; 0x2c
   34f68:	cmp	r1, r0
   34f6c:	beq	34f88 <__assert_fail@plt+0x233e4>
   34f70:	add	r2, r1, #12
   34f74:	mov	r0, r4
   34f78:	mov	r3, r6
   34f7c:	add	r1, r1, #8
   34f80:	bl	26924 <__assert_fail@plt+0x14d80>
   34f84:	ldr	r0, [r5, #36]	; 0x24
   34f88:	ldr	r1, [r5, #48]	; 0x30
   34f8c:	cmp	r1, r0
   34f90:	beq	34fa8 <__assert_fail@plt+0x23404>
   34f94:	add	r2, r1, #12
   34f98:	mov	r3, r6
   34f9c:	add	r1, r1, #8
   34fa0:	mov	r0, r4
   34fa4:	bl	26924 <__assert_fail@plt+0x14d80>
   34fa8:	ldrb	r3, [r4, #28]
   34fac:	mov	r0, #0
   34fb0:	ldr	r6, [sp, #8]
   34fb4:	orr	r3, r3, #8
   34fb8:	strb	r3, [r4, #28]
   34fbc:	ldrd	r4, [sp]
   34fc0:	add	sp, sp, #12
   34fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   34fc8:	cmp	r3, r2
   34fcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   34fd0:	strd	r6, [sp, #8]
   34fd4:	strd	r8, [sp, #16]
   34fd8:	strd	sl, [sp, #24]
   34fdc:	str	lr, [sp, #32]
   34fe0:	sub	sp, sp, #52	; 0x34
   34fe4:	movle	lr, #0
   34fe8:	movgt	lr, #1
   34fec:	ldr	ip, [sp, #88]	; 0x58
   34ff0:	orrs	lr, lr, r3, lsr #31
   34ff4:	ldrb	lr, [sp, #100]	; 0x64
   34ff8:	ldr	r8, [sp, #96]	; 0x60
   34ffc:	add	r7, r3, ip
   35000:	str	lr, [sp, #36]	; 0x24
   35004:	ldr	lr, [r0]
   35008:	str	lr, [sp, #28]
   3500c:	bne	3530c <__assert_fail@plt+0x23768>
   35010:	cmp	r7, r2
   35014:	mov	fp, r3
   35018:	str	r2, [sp, #32]
   3501c:	mov	r4, r0
   35020:	mov	r3, r2
   35024:	str	r1, [sp, #40]	; 0x28
   35028:	bgt	352b8 <__assert_fail@plt+0x23714>
   3502c:	cmp	ip, #0
   35030:	cmpge	fp, r7
   35034:	bgt	352b8 <__assert_fail@plt+0x23714>
   35038:	cmp	r7, #0
   3503c:	blt	352c0 <__assert_fail@plt+0x2371c>
   35040:	cmp	fp, r7
   35044:	movgt	r2, #0
   35048:	movle	r2, #1
   3504c:	ands	r3, r2, ip, lsr #31
   35050:	bne	352c0 <__assert_fail@plt+0x2371c>
   35054:	movw	r2, #0
   35058:	movt	r2, #0
   3505c:	cmp	r2, #0
   35060:	mov	r5, #1
   35064:	moveq	r5, r2
   35068:	movw	r2, #0
   3506c:	movt	r2, #0
   35070:	mov	r0, #1
   35074:	cmp	r2, #0
   35078:	moveq	r0, r2
   3507c:	orr	r5, r5, r0
   35080:	ands	r5, r5, #255	; 0xff
   35084:	beq	35098 <__assert_fail@plt+0x234f4>
   35088:	ldr	r3, [sp, #28]
   3508c:	mov	r5, #1
   35090:	add	r0, r3, #136	; 0x88
   35094:	bl	11760 <pthread_mutex_lock@plt>
   35098:	ldrb	r0, [r4, #28]
   3509c:	cmp	fp, r7
   350a0:	ubfx	r3, r0, #5, #2
   350a4:	str	r3, [sp, #44]	; 0x2c
   350a8:	bge	350c0 <__assert_fail@plt+0x2351c>
   350ac:	ldr	r2, [r4, #16]
   350b0:	cmp	r2, #0
   350b4:	beq	350c0 <__assert_fail@plt+0x2351c>
   350b8:	tst	r0, #8
   350bc:	beq	35260 <__assert_fail@plt+0x236bc>
   350c0:	ubfx	r2, r0, #4, #1
   350c4:	cmp	r8, #0
   350c8:	orreq	r2, r2, #1
   350cc:	ands	r2, r2, #255	; 0xff
   350d0:	bne	3524c <__assert_fail@plt+0x236a8>
   350d4:	and	r0, r0, #6
   350d8:	ldr	ip, [r4, #24]
   350dc:	cmp	r0, #4
   350e0:	beq	3531c <__assert_fail@plt+0x23778>
   350e4:	add	sl, ip, #1
   350e8:	mov	r6, sl
   350ec:	lsl	r0, sl, #3
   350f0:	bl	39028 <__assert_fail@plt+0x27484>
   350f4:	subs	r9, r0, #0
   350f8:	beq	35314 <__assert_fail@plt+0x23770>
   350fc:	mov	r3, fp
   35100:	mov	r0, r4
   35104:	str	sl, [sp, #8]
   35108:	ldr	ip, [sp, #92]	; 0x5c
   3510c:	ldr	r2, [sp, #32]
   35110:	ldr	r1, [sp, #40]	; 0x28
   35114:	stm	sp, {r7, ip}
   35118:	ldr	ip, [sp, #44]	; 0x2c
   3511c:	str	r9, [sp, #12]
   35120:	str	ip, [sp, #16]
   35124:	bl	2e2a4 <__assert_fail@plt+0x1c700>
   35128:	cmp	r0, #0
   3512c:	beq	3517c <__assert_fail@plt+0x235d8>
   35130:	cmp	r0, #1
   35134:	mvneq	r4, #0
   35138:	beq	35140 <__assert_fail@plt+0x2359c>
   3513c:	mvn	r4, #1
   35140:	mov	r0, r9
   35144:	bl	19610 <__assert_fail@plt+0x7a6c>
   35148:	cmp	r5, #0
   3514c:	beq	3515c <__assert_fail@plt+0x235b8>
   35150:	ldr	r3, [sp, #28]
   35154:	add	r0, r3, #136	; 0x88
   35158:	bl	11694 <pthread_mutex_unlock@plt>
   3515c:	mov	r0, r4
   35160:	add	sp, sp, #52	; 0x34
   35164:	ldrd	r4, [sp]
   35168:	ldrd	r6, [sp, #8]
   3516c:	ldrd	r8, [sp, #16]
   35170:	ldrd	sl, [sp, #24]
   35174:	add	sp, sp, #32
   35178:	pop	{pc}		; (ldr pc, [sp], #4)
   3517c:	cmp	r8, #0
   35180:	beq	35230 <__assert_fail@plt+0x2368c>
   35184:	ldrb	r7, [r4, #28]
   35188:	add	sl, r6, #1
   3518c:	ubfx	r7, r7, #1, #2
   35190:	cmp	r7, #0
   35194:	beq	35270 <__assert_fail@plt+0x236cc>
   35198:	cmp	r7, #1
   3519c:	beq	35348 <__assert_fail@plt+0x237a4>
   351a0:	ldr	fp, [r8]
   351a4:	mov	r7, #2
   351a8:	cmp	r6, #0
   351ac:	ble	353b0 <__assert_fail@plt+0x2380c>
   351b0:	ldrd	r0, [r8, #4]
   351b4:	add	lr, r9, r6, lsl #3
   351b8:	mov	r3, r9
   351bc:	mov	r2, r6
   351c0:	sub	r0, r0, #4
   351c4:	sub	r1, r1, #4
   351c8:	ldr	ip, [r3]
   351cc:	add	r3, r3, #8
   351d0:	str	ip, [r0, #4]!
   351d4:	ldr	ip, [r3, #-4]
   351d8:	cmp	r3, lr
   351dc:	str	ip, [r1, #4]!
   351e0:	bne	351c8 <__assert_fail@plt+0x23624>
   351e4:	ldr	fp, [r8]
   351e8:	cmp	r2, fp
   351ec:	bcs	35218 <__assert_fail@plt+0x23674>
   351f0:	ldr	ip, [r8, #4]
   351f4:	mvn	r3, #0
   351f8:	ldr	r0, [r8, #8]
   351fc:	str	r3, [r0, r2, lsl #2]
   35200:	add	r6, r6, #1
   35204:	str	r3, [ip, r2, lsl #2]
   35208:	mov	r2, r6
   3520c:	ldr	r1, [r8]
   35210:	cmp	r1, r6
   35214:	bhi	351fc <__assert_fail@plt+0x23658>
   35218:	ldrb	r3, [r4, #28]
   3521c:	bfi	r3, r7, #1, #2
   35220:	and	r2, r3, #6
   35224:	cmp	r2, #0
   35228:	strb	r3, [r4, #28]
   3522c:	beq	3513c <__assert_fail@plt+0x23598>
   35230:	ldr	r3, [sp, #36]	; 0x24
   35234:	ldr	r4, [r9]
   35238:	cmp	r3, #0
   3523c:	beq	35140 <__assert_fail@plt+0x2359c>
   35240:	ldr	r3, [r9, #4]
   35244:	sub	r4, r3, r4
   35248:	b	35140 <__assert_fail@plt+0x2359c>
   3524c:	mov	sl, #1
   35250:	mov	r0, #8
   35254:	mov	r6, sl
   35258:	mov	r8, #0
   3525c:	b	350f0 <__assert_fail@plt+0x2354c>
   35260:	mov	r0, r4
   35264:	bl	34efc <__assert_fail@plt+0x23358>
   35268:	ldrb	r0, [r4, #28]
   3526c:	b	350c0 <__assert_fail@plt+0x2351c>
   35270:	lsl	r7, sl, #2
   35274:	mov	fp, sl
   35278:	mov	r0, r7
   3527c:	bl	39028 <__assert_fail@plt+0x27484>
   35280:	cmp	r0, #0
   35284:	str	r0, [r8, #4]
   35288:	beq	353bc <__assert_fail@plt+0x23818>
   3528c:	mov	r0, r7
   35290:	bl	39028 <__assert_fail@plt+0x27484>
   35294:	cmp	r0, #0
   35298:	mov	r7, r0
   3529c:	str	r0, [r8, #8]
   352a0:	movne	r7, #1
   352a4:	strne	sl, [r8]
   352a8:	bne	351a8 <__assert_fail@plt+0x23604>
   352ac:	ldr	r0, [r8, #4]
   352b0:	bl	19610 <__assert_fail@plt+0x7a6c>
   352b4:	b	35218 <__assert_fail@plt+0x23674>
   352b8:	mov	r7, r3
   352bc:	b	35054 <__assert_fail@plt+0x234b0>
   352c0:	movw	r2, #0
   352c4:	movt	r2, #0
   352c8:	cmp	r2, #0
   352cc:	mov	r5, #1
   352d0:	moveq	r5, r2
   352d4:	movw	r2, #0
   352d8:	movt	r2, #0
   352dc:	mov	r1, #1
   352e0:	cmp	r2, #0
   352e4:	moveq	r1, r2
   352e8:	orr	r5, r5, r1
   352ec:	ands	r5, r5, #255	; 0xff
   352f0:	movne	r7, #0
   352f4:	bne	35088 <__assert_fail@plt+0x234e4>
   352f8:	ldrb	r0, [r4, #28]
   352fc:	mov	r7, r5
   35300:	ubfx	r3, r0, #5, #2
   35304:	str	r3, [sp, #44]	; 0x2c
   35308:	b	350c0 <__assert_fail@plt+0x2351c>
   3530c:	mvn	r4, #0
   35310:	b	3515c <__assert_fail@plt+0x235b8>
   35314:	mvn	r4, #1
   35318:	b	35148 <__assert_fail@plt+0x235a4>
   3531c:	ldr	sl, [r8]
   35320:	cmp	sl, ip
   35324:	bhi	350e4 <__assert_fail@plt+0x23540>
   35328:	cmp	sl, #0
   3532c:	mov	r6, sl
   35330:	bgt	350ec <__assert_fail@plt+0x23548>
   35334:	mov	sl, #1
   35338:	mov	r8, r2
   3533c:	mov	r6, sl
   35340:	mov	r0, #8
   35344:	b	350f0 <__assert_fail@plt+0x2354c>
   35348:	ldr	fp, [r8]
   3534c:	cmp	fp, sl
   35350:	bcs	351a8 <__assert_fail@plt+0x23604>
   35354:	lsl	fp, sl, #2
   35358:	ldr	r0, [r8, #4]
   3535c:	mov	r1, fp
   35360:	bl	39064 <__assert_fail@plt+0x274c0>
   35364:	subs	r2, r0, #0
   35368:	str	r2, [sp, #32]
   3536c:	beq	353bc <__assert_fail@plt+0x23818>
   35370:	mov	r1, fp
   35374:	ldr	r0, [r8, #8]
   35378:	bl	39064 <__assert_fail@plt+0x274c0>
   3537c:	ldr	r2, [sp, #32]
   35380:	subs	r1, r0, #0
   35384:	movne	fp, sl
   35388:	strne	sl, [r8]
   3538c:	strne	r1, [r8, #8]
   35390:	strne	r2, [r8, #4]
   35394:	bne	351a8 <__assert_fail@plt+0x23604>
   35398:	mov	r0, r2
   3539c:	str	r1, [sp, #32]
   353a0:	bl	19610 <__assert_fail@plt+0x7a6c>
   353a4:	ldr	r1, [sp, #32]
   353a8:	mov	r7, r1
   353ac:	b	35218 <__assert_fail@plt+0x23674>
   353b0:	mov	r6, #0
   353b4:	mov	r2, r6
   353b8:	b	351e8 <__assert_fail@plt+0x23644>
   353bc:	mov	r7, #0
   353c0:	b	35218 <__assert_fail@plt+0x23674>
   353c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   353c8:	mov	r4, r0
   353cc:	mov	r0, #0
   353d0:	tst	r2, #1
   353d4:	movw	r5, #45820	; 0xb2fc
   353d8:	movt	r5, #3
   353dc:	movw	r3, #710	; 0x2c6
   353e0:	movt	r3, #257	; 0x101
   353e4:	strd	r6, [sp, #8]
   353e8:	mov	r6, r2
   353ec:	str	r8, [sp, #16]
   353f0:	mov	r7, r1
   353f4:	movne	r8, r5
   353f8:	str	lr, [sp, #20]
   353fc:	moveq	r8, r3
   35400:	str	r0, [r4]
   35404:	str	r0, [r4, #4]
   35408:	str	r0, [r4, #8]
   3540c:	mov	r0, #256	; 0x100
   35410:	bl	39028 <__assert_fail@plt+0x27484>
   35414:	cmp	r0, #0
   35418:	str	r0, [r4, #16]
   3541c:	beq	354c8 <__assert_fail@plt+0x23924>
   35420:	lsl	r5, r6, #21
   35424:	ands	r2, r6, #4
   35428:	and	r5, r5, #4194304	; 0x400000
   3542c:	orr	r5, r5, r8
   35430:	bne	354a0 <__assert_fail@plt+0x238fc>
   35434:	ldrb	r3, [r4, #28]
   35438:	ubfx	r6, r6, #3, #1
   3543c:	mov	r1, #0
   35440:	mov	r0, r7
   35444:	str	r1, [r4, #20]
   35448:	bfi	r3, r2, #7, #1
   3544c:	bfi	r3, r6, #4, #1
   35450:	strb	r3, [r4, #28]
   35454:	bl	11988 <strlen@plt>
   35458:	mov	r2, r0
   3545c:	mov	r3, r5
   35460:	mov	r1, r7
   35464:	mov	r0, r4
   35468:	bl	338d0 <__assert_fail@plt+0x21d2c>
   3546c:	cmp	r0, #16
   35470:	mov	r5, r0
   35474:	beq	354b0 <__assert_fail@plt+0x2390c>
   35478:	cmp	r0, #0
   3547c:	bne	354b4 <__assert_fail@plt+0x23910>
   35480:	mov	r0, r4
   35484:	bl	34efc <__assert_fail@plt+0x23358>
   35488:	mov	r0, r5
   3548c:	ldrd	r4, [sp]
   35490:	ldrd	r6, [sp, #8]
   35494:	ldr	r8, [sp, #16]
   35498:	add	sp, sp, #20
   3549c:	pop	{pc}		; (ldr pc, [sp], #4)
   354a0:	bic	r5, r5, #64	; 0x40
   354a4:	mov	r2, #1
   354a8:	orr	r5, r5, #256	; 0x100
   354ac:	b	35434 <__assert_fail@plt+0x23890>
   354b0:	mov	r5, #8
   354b4:	ldr	r0, [r4, #16]
   354b8:	bl	19610 <__assert_fail@plt+0x7a6c>
   354bc:	mov	r3, #0
   354c0:	str	r3, [r4, #16]
   354c4:	b	35488 <__assert_fail@plt+0x238e4>
   354c8:	mov	r5, #12
   354cc:	b	35488 <__assert_fail@plt+0x238e4>
   354d0:	cmp	r0, #16
   354d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   354d8:	strd	r6, [sp, #8]
   354dc:	str	r8, [sp, #16]
   354e0:	str	lr, [sp, #20]
   354e4:	bhi	35560 <__assert_fail@plt+0x239bc>
   354e8:	movw	r1, #50168	; 0xc3f8
   354ec:	movt	r1, #3
   354f0:	add	ip, r1, r0, lsl #2
   354f4:	mov	r4, r3
   354f8:	add	r1, r1, #32
   354fc:	mov	r6, r2
   35500:	mov	r0, #0
   35504:	ldr	r3, [ip, #416]	; 0x1a0
   35508:	mov	r2, #5
   3550c:	add	r1, r1, r3
   35510:	bl	117d8 <dcgettext@plt>
   35514:	mov	r7, r0
   35518:	bl	11988 <strlen@plt>
   3551c:	cmp	r4, #0
   35520:	add	r5, r0, #1
   35524:	beq	35548 <__assert_fail@plt+0x239a4>
   35528:	cmp	r5, r4
   3552c:	mov	r1, r7
   35530:	subhi	r2, r4, #1
   35534:	movhi	r3, #0
   35538:	movls	r2, r5
   3553c:	mov	r0, r6
   35540:	strbhi	r3, [r6, r2]
   35544:	bl	11784 <memcpy@plt>
   35548:	mov	r0, r5
   3554c:	ldrd	r4, [sp]
   35550:	ldrd	r6, [sp, #8]
   35554:	ldr	r8, [sp, #16]
   35558:	add	sp, sp, #20
   3555c:	pop	{pc}		; (ldr pc, [sp], #4)
   35560:	bl	11b68 <abort@plt>
   35564:	strd	r4, [sp, #-16]!
   35568:	mov	r4, r0
   3556c:	ldr	r5, [r0]
   35570:	str	r6, [sp, #8]
   35574:	str	lr, [sp, #12]
   35578:	cmp	r5, #0
   3557c:	beq	355c4 <__assert_fail@plt+0x23a20>
   35580:	movw	r2, #0
   35584:	movt	r2, #0
   35588:	cmp	r2, #0
   3558c:	mov	r3, #1
   35590:	moveq	r3, r2
   35594:	movw	r2, #0
   35598:	movt	r2, #0
   3559c:	mov	r1, #1
   355a0:	cmp	r2, #0
   355a4:	moveq	r1, r2
   355a8:	orr	r3, r3, r1
   355ac:	tst	r3, #1
   355b0:	beq	355bc <__assert_fail@plt+0x23a18>
   355b4:	add	r0, r5, #136	; 0x88
   355b8:	bl	11718 <pthread_mutex_destroy@plt>
   355bc:	mov	r0, r5
   355c0:	bl	28134 <__assert_fail@plt+0x16590>
   355c4:	mov	r5, #0
   355c8:	ldr	r0, [r4, #16]
   355cc:	str	r5, [r4]
   355d0:	str	r5, [r4, #4]
   355d4:	bl	19610 <__assert_fail@plt+0x7a6c>
   355d8:	str	r5, [r4, #16]
   355dc:	ldr	r0, [r4, #20]
   355e0:	bl	19610 <__assert_fail@plt+0x7a6c>
   355e4:	ldr	r6, [sp, #8]
   355e8:	str	r5, [r4, #20]
   355ec:	ldrd	r4, [sp]
   355f0:	add	sp, sp, #12
   355f4:	pop	{pc}		; (ldr pc, [sp], #4)
   355f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   355fc:	strd	r6, [sp, #8]
   35600:	strd	r8, [sp, #16]
   35604:	strd	sl, [sp, #24]
   35608:	str	lr, [sp, #32]
   3560c:	sub	sp, sp, #36	; 0x24
   35610:	ldr	r6, [sp, #72]	; 0x48
   35614:	bics	ip, r6, #7
   35618:	movne	r0, #2
   3561c:	bne	356d4 <__assert_fail@plt+0x23b30>
   35620:	ands	sl, r6, #4
   35624:	mov	r7, r3
   35628:	str	r2, [sp, #28]
   3562c:	mov	r8, r1
   35630:	mov	r5, r0
   35634:	bne	356f0 <__assert_fail@plt+0x23b4c>
   35638:	mov	r0, r1
   3563c:	bl	11988 <strlen@plt>
   35640:	mov	r9, r0
   35644:	movw	r2, #0
   35648:	movt	r2, #0
   3564c:	ldr	fp, [r5]
   35650:	cmp	r2, #0
   35654:	mov	r4, #1
   35658:	moveq	r4, r2
   3565c:	movw	r2, #0
   35660:	movt	r2, #0
   35664:	mov	r1, #1
   35668:	cmp	r2, #0
   3566c:	moveq	r1, r2
   35670:	orr	r4, r4, r1
   35674:	ands	r4, r4, #255	; 0xff
   35678:	beq	35684 <__assert_fail@plt+0x23ae0>
   3567c:	add	r0, fp, #136	; 0x88
   35680:	bl	11760 <pthread_mutex_lock@plt>
   35684:	ldrb	r2, [r5, #28]
   35688:	tst	r2, #16
   3568c:	beq	356fc <__assert_fail@plt+0x23b58>
   35690:	mov	ip, #0
   35694:	mov	r0, r5
   35698:	str	r9, [sp]
   3569c:	mov	r3, sl
   356a0:	mov	r1, r8
   356a4:	mov	r2, r9
   356a8:	stmib	sp, {r9, ip}
   356ac:	str	ip, [sp, #12]
   356b0:	str	r6, [sp, #16]
   356b4:	bl	2e2a4 <__assert_fail@plt+0x1c700>
   356b8:	mov	r5, r0
   356bc:	cmp	r4, #0
   356c0:	beq	356cc <__assert_fail@plt+0x23b28>
   356c4:	add	r0, fp, #136	; 0x88
   356c8:	bl	11694 <pthread_mutex_unlock@plt>
   356cc:	adds	r0, r5, #0
   356d0:	movne	r0, #1
   356d4:	add	sp, sp, #36	; 0x24
   356d8:	ldrd	r4, [sp]
   356dc:	ldrd	r6, [sp, #8]
   356e0:	ldrd	r8, [sp, #16]
   356e4:	ldrd	sl, [sp, #24]
   356e8:	add	sp, sp, #32
   356ec:	pop	{pc}		; (ldr pc, [sp], #4)
   356f0:	ldr	sl, [r3]
   356f4:	ldr	r9, [r3, #4]
   356f8:	b	35644 <__assert_fail@plt+0x23aa0>
   356fc:	ldr	ip, [sp, #28]
   35700:	mov	r0, r5
   35704:	mov	r3, sl
   35708:	mov	r1, r8
   3570c:	mov	r2, r9
   35710:	str	r9, [sp]
   35714:	stmib	sp, {r9, ip}
   35718:	str	r7, [sp, #12]
   3571c:	str	r6, [sp, #16]
   35720:	bl	2e2a4 <__assert_fail@plt+0x1c700>
   35724:	mov	r5, r0
   35728:	b	356bc <__assert_fail@plt+0x23b18>
   3572c:	cmp	r2, r3
   35730:	strd	r4, [sp, #-36]!	; 0xffffffdc
   35734:	movge	ip, #0
   35738:	movlt	ip, #1
   3573c:	strd	r6, [sp, #8]
   35740:	orrs	ip, ip, r3, lsr #31
   35744:	strd	r8, [sp, #16]
   35748:	strd	sl, [sp, #24]
   3574c:	str	lr, [sp, #32]
   35750:	sub	sp, sp, #44	; 0x2c
   35754:	ldr	fp, [r0]
   35758:	ldr	r8, [sp, #80]	; 0x50
   3575c:	bne	35998 <__assert_fail@plt+0x23df4>
   35760:	movw	lr, #0
   35764:	movt	lr, #0
   35768:	str	r1, [sp, #36]	; 0x24
   3576c:	cmp	lr, #0
   35770:	mov	ip, #1
   35774:	moveq	ip, lr
   35778:	movw	lr, #0
   3577c:	movt	lr, #0
   35780:	mov	r6, #1
   35784:	cmp	lr, #0
   35788:	mov	r4, r3
   3578c:	moveq	r6, lr
   35790:	mov	r5, r0
   35794:	orr	r3, ip, r6
   35798:	mov	r7, r2
   3579c:	ands	r3, r3, #255	; 0xff
   357a0:	str	r3, [sp, #28]
   357a4:	beq	357b0 <__assert_fail@plt+0x23c0c>
   357a8:	add	r0, fp, #136	; 0x88
   357ac:	bl	11760 <pthread_mutex_lock@plt>
   357b0:	ldrb	r2, [r5, #28]
   357b4:	ubfx	r3, r2, #4, #1
   357b8:	ubfx	r1, r2, #5, #2
   357bc:	cmp	r8, #0
   357c0:	orreq	r3, r3, #1
   357c4:	ands	r3, r3, #255	; 0xff
   357c8:	str	r1, [sp, #32]
   357cc:	bne	35930 <__assert_fail@plt+0x23d8c>
   357d0:	and	r2, r2, #6
   357d4:	ldr	r1, [r5, #24]
   357d8:	cmp	r2, #4
   357dc:	beq	359a8 <__assert_fail@plt+0x23e04>
   357e0:	add	sl, r1, #1
   357e4:	mov	r6, sl
   357e8:	lsl	r0, sl, #3
   357ec:	bl	39028 <__assert_fail@plt+0x27484>
   357f0:	subs	r9, r0, #0
   357f4:	beq	359a0 <__assert_fail@plt+0x23dfc>
   357f8:	ldr	ip, [sp, #32]
   357fc:	mov	r2, r7
   35800:	mov	r3, r4
   35804:	mov	r0, r5
   35808:	stm	sp, {r4, r7, sl}
   3580c:	str	r9, [sp, #12]
   35810:	str	ip, [sp, #16]
   35814:	ldr	r1, [sp, #36]	; 0x24
   35818:	bl	2e2a4 <__assert_fail@plt+0x1c700>
   3581c:	cmp	r0, #0
   35820:	beq	35870 <__assert_fail@plt+0x23ccc>
   35824:	cmp	r0, #1
   35828:	mvneq	r4, #0
   3582c:	beq	35834 <__assert_fail@plt+0x23c90>
   35830:	mvn	r4, #1
   35834:	mov	r0, r9
   35838:	bl	19610 <__assert_fail@plt+0x7a6c>
   3583c:	ldr	r3, [sp, #28]
   35840:	cmp	r3, #0
   35844:	beq	35850 <__assert_fail@plt+0x23cac>
   35848:	add	r0, fp, #136	; 0x88
   3584c:	bl	11694 <pthread_mutex_unlock@plt>
   35850:	mov	r0, r4
   35854:	add	sp, sp, #44	; 0x2c
   35858:	ldrd	r4, [sp]
   3585c:	ldrd	r6, [sp, #8]
   35860:	ldrd	r8, [sp, #16]
   35864:	ldrd	sl, [sp, #24]
   35868:	add	sp, sp, #32
   3586c:	pop	{pc}		; (ldr pc, [sp], #4)
   35870:	cmp	r8, #0
   35874:	beq	35924 <__assert_fail@plt+0x23d80>
   35878:	ldrb	r7, [r5, #28]
   3587c:	add	sl, r6, #1
   35880:	ubfx	r7, r7, #1, #2
   35884:	cmp	r7, #0
   35888:	beq	35944 <__assert_fail@plt+0x23da0>
   3588c:	cmp	r7, #1
   35890:	beq	359d4 <__assert_fail@plt+0x23e30>
   35894:	ldr	r3, [r8]
   35898:	mov	r7, #2
   3589c:	cmp	r6, #0
   358a0:	ble	35a44 <__assert_fail@plt+0x23ea0>
   358a4:	ldrd	r0, [r8, #4]
   358a8:	add	lr, r9, r6, lsl #3
   358ac:	mov	r3, r9
   358b0:	mov	r2, r6
   358b4:	sub	r0, r0, #4
   358b8:	sub	r1, r1, #4
   358bc:	ldr	ip, [r3]
   358c0:	add	r3, r3, #8
   358c4:	str	ip, [r0, #4]!
   358c8:	ldr	ip, [r3, #-4]
   358cc:	cmp	r3, lr
   358d0:	str	ip, [r1, #4]!
   358d4:	bne	358bc <__assert_fail@plt+0x23d18>
   358d8:	ldr	r3, [r8]
   358dc:	cmp	r2, r3
   358e0:	bcs	3590c <__assert_fail@plt+0x23d68>
   358e4:	ldr	ip, [r8, #4]
   358e8:	mvn	r3, #0
   358ec:	ldr	r0, [r8, #8]
   358f0:	str	r3, [r0, r2, lsl #2]
   358f4:	add	r6, r6, #1
   358f8:	str	r3, [ip, r2, lsl #2]
   358fc:	mov	r2, r6
   35900:	ldr	r1, [r8]
   35904:	cmp	r1, r6
   35908:	bhi	358f0 <__assert_fail@plt+0x23d4c>
   3590c:	ldrb	r3, [r5, #28]
   35910:	bfi	r3, r7, #1, #2
   35914:	and	r2, r3, #6
   35918:	cmp	r2, #0
   3591c:	strb	r3, [r5, #28]
   35920:	beq	35830 <__assert_fail@plt+0x23c8c>
   35924:	ldr	r3, [r9, #4]
   35928:	sub	r4, r3, r4
   3592c:	b	35834 <__assert_fail@plt+0x23c90>
   35930:	mov	sl, #1
   35934:	mov	r0, #8
   35938:	mov	r6, sl
   3593c:	mov	r8, #0
   35940:	b	357ec <__assert_fail@plt+0x23c48>
   35944:	lsl	r7, sl, #2
   35948:	str	sl, [sp, #32]
   3594c:	mov	r0, r7
   35950:	bl	39028 <__assert_fail@plt+0x27484>
   35954:	cmp	r0, #0
   35958:	str	r0, [r8, #4]
   3595c:	ldr	r3, [sp, #32]
   35960:	beq	35a50 <__assert_fail@plt+0x23eac>
   35964:	mov	r0, r7
   35968:	str	r3, [sp, #32]
   3596c:	bl	39028 <__assert_fail@plt+0x27484>
   35970:	ldr	r3, [sp, #32]
   35974:	cmp	r0, #0
   35978:	mov	r7, r0
   3597c:	movne	r7, #1
   35980:	str	r0, [r8, #8]
   35984:	strne	r3, [r8]
   35988:	bne	3589c <__assert_fail@plt+0x23cf8>
   3598c:	ldr	r0, [r8, #4]
   35990:	bl	19610 <__assert_fail@plt+0x7a6c>
   35994:	b	3590c <__assert_fail@plt+0x23d68>
   35998:	mvn	r4, #0
   3599c:	b	35850 <__assert_fail@plt+0x23cac>
   359a0:	mvn	r4, #1
   359a4:	b	3583c <__assert_fail@plt+0x23c98>
   359a8:	ldr	sl, [r8]
   359ac:	cmp	sl, r1
   359b0:	bhi	357e0 <__assert_fail@plt+0x23c3c>
   359b4:	cmp	sl, #0
   359b8:	mov	r6, sl
   359bc:	bgt	357e8 <__assert_fail@plt+0x23c44>
   359c0:	mov	sl, #1
   359c4:	mov	r8, r3
   359c8:	mov	r6, sl
   359cc:	mov	r0, #8
   359d0:	b	357ec <__assert_fail@plt+0x23c48>
   359d4:	ldr	r3, [r8]
   359d8:	cmp	r3, sl
   359dc:	bcs	3589c <__assert_fail@plt+0x23cf8>
   359e0:	lsl	r3, sl, #2
   359e4:	ldr	r0, [r8, #4]
   359e8:	mov	r1, r3
   359ec:	str	r3, [sp, #36]	; 0x24
   359f0:	bl	39064 <__assert_fail@plt+0x274c0>
   359f4:	subs	r2, r0, #0
   359f8:	str	r2, [sp, #32]
   359fc:	beq	35a50 <__assert_fail@plt+0x23eac>
   35a00:	ldr	r3, [sp, #36]	; 0x24
   35a04:	ldr	r0, [r8, #8]
   35a08:	mov	r1, r3
   35a0c:	bl	39064 <__assert_fail@plt+0x274c0>
   35a10:	ldr	r2, [sp, #32]
   35a14:	subs	r1, r0, #0
   35a18:	movne	r3, sl
   35a1c:	strne	sl, [r8]
   35a20:	strne	r1, [r8, #8]
   35a24:	strne	r2, [r8, #4]
   35a28:	bne	3589c <__assert_fail@plt+0x23cf8>
   35a2c:	mov	r0, r2
   35a30:	str	r1, [sp, #32]
   35a34:	bl	19610 <__assert_fail@plt+0x7a6c>
   35a38:	ldr	r1, [sp, #32]
   35a3c:	mov	r7, r1
   35a40:	b	3590c <__assert_fail@plt+0x23d68>
   35a44:	mov	r6, #0
   35a48:	mov	r2, r6
   35a4c:	b	358dc <__assert_fail@plt+0x23d38>
   35a50:	mov	r7, #0
   35a54:	b	3590c <__assert_fail@plt+0x23d68>
   35a58:	str	r4, [sp, #-8]!
   35a5c:	mov	r4, #0
   35a60:	str	lr, [sp, #4]
   35a64:	sub	sp, sp, #16
   35a68:	ldr	lr, [sp, #24]
   35a6c:	ldr	ip, [sp, #28]
   35a70:	str	lr, [sp]
   35a74:	str	r4, [sp, #12]
   35a78:	stmib	sp, {r2, ip}
   35a7c:	bl	34fc8 <__assert_fail@plt+0x23424>
   35a80:	add	sp, sp, #16
   35a84:	ldr	r4, [sp]
   35a88:	add	sp, sp, #4
   35a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   35a90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   35a94:	strd	r6, [sp, #8]
   35a98:	mov	r7, r3
   35a9c:	strd	r8, [sp, #16]
   35aa0:	str	sl, [sp, #24]
   35aa4:	str	lr, [sp, #28]
   35aa8:	sub	sp, sp, #24
   35aac:	ldr	r5, [sp, #56]	; 0x38
   35ab0:	ldr	r6, [sp, #68]	; 0x44
   35ab4:	orr	r3, r5, r2
   35ab8:	orrs	r3, r3, r6
   35abc:	bmi	35b78 <__assert_fail@plt+0x23fd4>
   35ac0:	adds	r9, r2, r5
   35ac4:	mov	r4, r2
   35ac8:	bvs	35b78 <__assert_fail@plt+0x23fd4>
   35acc:	cmp	r5, #0
   35ad0:	mov	sl, r0
   35ad4:	beq	35b80 <__assert_fail@plt+0x23fdc>
   35ad8:	cmp	r2, #0
   35adc:	str	r1, [sp, #20]
   35ae0:	moveq	r8, r2
   35ae4:	bne	35b44 <__assert_fail@plt+0x23fa0>
   35ae8:	ldr	r0, [sp, #64]	; 0x40
   35aec:	mov	r3, #1
   35af0:	mov	ip, #0
   35af4:	mov	r2, r9
   35af8:	mov	r1, r7
   35afc:	str	ip, [sp]
   35b00:	str	r6, [sp, #4]
   35b04:	str	r0, [sp, #8]
   35b08:	mov	r0, sl
   35b0c:	str	r3, [sp, #12]
   35b10:	ldr	r3, [sp, #60]	; 0x3c
   35b14:	bl	34fc8 <__assert_fail@plt+0x23424>
   35b18:	mov	r4, r0
   35b1c:	mov	r0, r8
   35b20:	bl	19610 <__assert_fail@plt+0x7a6c>
   35b24:	mov	r0, r4
   35b28:	add	sp, sp, #24
   35b2c:	ldrd	r4, [sp]
   35b30:	ldrd	r6, [sp, #8]
   35b34:	ldrd	r8, [sp, #16]
   35b38:	ldr	sl, [sp, #24]
   35b3c:	add	sp, sp, #28
   35b40:	pop	{pc}		; (ldr pc, [sp], #4)
   35b44:	mov	r0, r9
   35b48:	bl	39028 <__assert_fail@plt+0x27484>
   35b4c:	subs	r8, r0, #0
   35b50:	beq	35b78 <__assert_fail@plt+0x23fd4>
   35b54:	mov	r2, r4
   35b58:	ldr	r1, [sp, #20]
   35b5c:	bl	11784 <memcpy@plt>
   35b60:	mov	r1, r7
   35b64:	mov	r2, r5
   35b68:	add	r0, r8, r4
   35b6c:	mov	r7, r8
   35b70:	bl	11784 <memcpy@plt>
   35b74:	b	35ae8 <__assert_fail@plt+0x23f44>
   35b78:	mvn	r4, #1
   35b7c:	b	35b24 <__assert_fail@plt+0x23f80>
   35b80:	mov	r7, r1
   35b84:	mov	r8, r5
   35b88:	b	35ae8 <__assert_fail@plt+0x23f44>
   35b8c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   35b90:	strd	r6, [sp, #8]
   35b94:	mov	r7, r3
   35b98:	strd	r8, [sp, #16]
   35b9c:	str	sl, [sp, #24]
   35ba0:	str	lr, [sp, #28]
   35ba4:	sub	sp, sp, #24
   35ba8:	ldr	r5, [sp, #56]	; 0x38
   35bac:	ldr	r6, [sp, #72]	; 0x48
   35bb0:	orr	r3, r5, r2
   35bb4:	orrs	r3, r3, r6
   35bb8:	bmi	35c70 <__assert_fail@plt+0x240cc>
   35bbc:	adds	r9, r2, r5
   35bc0:	mov	r4, r2
   35bc4:	bvs	35c70 <__assert_fail@plt+0x240cc>
   35bc8:	cmp	r5, #0
   35bcc:	mov	sl, r0
   35bd0:	beq	35c78 <__assert_fail@plt+0x240d4>
   35bd4:	cmp	r2, #0
   35bd8:	str	r1, [sp, #20]
   35bdc:	moveq	r8, r2
   35be0:	bne	35c3c <__assert_fail@plt+0x24098>
   35be4:	ldr	r3, [sp, #64]	; 0x40
   35be8:	mov	ip, #0
   35bec:	mov	r2, r9
   35bf0:	mov	r1, r7
   35bf4:	mov	r0, sl
   35bf8:	stm	sp, {r3, r6}
   35bfc:	ldr	r3, [sp, #68]	; 0x44
   35c00:	str	ip, [sp, #12]
   35c04:	str	r3, [sp, #8]
   35c08:	ldr	r3, [sp, #60]	; 0x3c
   35c0c:	bl	34fc8 <__assert_fail@plt+0x23424>
   35c10:	mov	r4, r0
   35c14:	mov	r0, r8
   35c18:	bl	19610 <__assert_fail@plt+0x7a6c>
   35c1c:	mov	r0, r4
   35c20:	add	sp, sp, #24
   35c24:	ldrd	r4, [sp]
   35c28:	ldrd	r6, [sp, #8]
   35c2c:	ldrd	r8, [sp, #16]
   35c30:	ldr	sl, [sp, #24]
   35c34:	add	sp, sp, #28
   35c38:	pop	{pc}		; (ldr pc, [sp], #4)
   35c3c:	mov	r0, r9
   35c40:	bl	39028 <__assert_fail@plt+0x27484>
   35c44:	subs	r8, r0, #0
   35c48:	beq	35c70 <__assert_fail@plt+0x240cc>
   35c4c:	mov	r2, r4
   35c50:	ldr	r1, [sp, #20]
   35c54:	bl	11784 <memcpy@plt>
   35c58:	mov	r1, r7
   35c5c:	mov	r2, r5
   35c60:	add	r0, r8, r4
   35c64:	mov	r7, r8
   35c68:	bl	11784 <memcpy@plt>
   35c6c:	b	35be4 <__assert_fail@plt+0x24040>
   35c70:	mvn	r4, #1
   35c74:	b	35c1c <__assert_fail@plt+0x24078>
   35c78:	mov	r7, r1
   35c7c:	mov	r8, r5
   35c80:	b	35be4 <__assert_fail@plt+0x24040>
   35c84:	cmp	r2, #0
   35c88:	beq	35cb0 <__assert_fail@plt+0x2410c>
   35c8c:	ldrb	ip, [r0, #28]
   35c90:	push	{lr}		; (str lr, [sp, #-4]!)
   35c94:	mov	lr, #1
   35c98:	bfi	ip, lr, #1, #2
   35c9c:	strb	ip, [r0, #28]
   35ca0:	strd	r2, [r1]
   35ca4:	ldr	r3, [sp, #4]
   35ca8:	str	r3, [r1, #8]
   35cac:	pop	{pc}		; (ldr pc, [sp], #4)
   35cb0:	ldrb	r3, [r0, #28]
   35cb4:	bfi	r3, r2, #1, #2
   35cb8:	strb	r3, [r0, #28]
   35cbc:	str	r2, [r1]
   35cc0:	str	r2, [r1, #4]
   35cc4:	str	r2, [r1, #8]
   35cc8:	bx	lr
   35ccc:	strd	r4, [sp, #-16]!
   35cd0:	mov	r4, r1
   35cd4:	mov	r1, #0
   35cd8:	mov	r2, r4
   35cdc:	mov	r5, r0
   35ce0:	str	r6, [sp, #8]
   35ce4:	str	lr, [sp, #12]
   35ce8:	bl	11a24 <memchr@plt>
   35cec:	cmp	r0, #0
   35cf0:	ldr	r6, [sp, #8]
   35cf4:	subne	r0, r0, r5
   35cf8:	moveq	r0, r4
   35cfc:	ldrd	r4, [sp]
   35d00:	add	sp, sp, #12
   35d04:	addne	r0, r0, #1
   35d08:	pop	{pc}		; (ldr pc, [sp], #4)
   35d0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35d10:	strd	r6, [sp, #8]
   35d14:	mov	r6, r0
   35d18:	movw	r0, #47556	; 0xb9c4
   35d1c:	movt	r0, #3
   35d20:	str	r8, [sp, #16]
   35d24:	str	lr, [sp, #20]
   35d28:	bl	118ec <getenv@plt>
   35d2c:	subs	r5, r0, #0
   35d30:	ldrb	r3, [r6, #4]
   35d34:	beq	35dec <__assert_fail@plt+0x24248>
   35d38:	cmp	r3, #0
   35d3c:	beq	35d70 <__assert_fail@plt+0x241cc>
   35d40:	mov	r1, r5
   35d44:	add	r0, r6, #5
   35d48:	bl	1170c <strcmp@plt>
   35d4c:	cmp	r0, #0
   35d50:	bne	35d70 <__assert_fail@plt+0x241cc>
   35d54:	mov	r4, #1
   35d58:	mov	r0, r4
   35d5c:	ldrd	r4, [sp]
   35d60:	ldrd	r6, [sp, #8]
   35d64:	ldr	r8, [sp, #16]
   35d68:	add	sp, sp, #20
   35d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   35d70:	mov	r0, r5
   35d74:	bl	11988 <strlen@plt>
   35d78:	add	r7, r0, #1
   35d7c:	cmp	r7, #58	; 0x3a
   35d80:	movcs	r0, r7
   35d84:	movcc	r0, #58	; 0x3a
   35d88:	add	r0, r0, #9
   35d8c:	bic	r0, r0, #3
   35d90:	bl	39028 <__assert_fail@plt+0x27484>
   35d94:	subs	r4, r0, #0
   35d98:	beq	35e0c <__assert_fail@plt+0x24268>
   35d9c:	mov	r8, #0
   35da0:	mov	ip, #1
   35da4:	add	r3, r4, #5
   35da8:	mov	r1, r5
   35dac:	mov	r0, r3
   35db0:	mov	r2, r7
   35db4:	str	r8, [r4]
   35db8:	strh	ip, [r4, #4]
   35dbc:	bl	11784 <memcpy@plt>
   35dc0:	strb	r8, [r0, r7]
   35dc4:	ldrb	r3, [r6, #4]
   35dc8:	cmp	r3, #0
   35dcc:	bne	35e14 <__assert_fail@plt+0x24270>
   35dd0:	movw	r0, #47556	; 0xb9c4
   35dd4:	movt	r0, #3
   35dd8:	bl	11b44 <unsetenv@plt>
   35ddc:	cmp	r0, #0
   35de0:	bne	35e30 <__assert_fail@plt+0x2428c>
   35de4:	bl	11844 <tzset@plt>
   35de8:	b	35d58 <__assert_fail@plt+0x241b4>
   35dec:	cmp	r3, #0
   35df0:	beq	35d54 <__assert_fail@plt+0x241b0>
   35df4:	mov	r0, #64	; 0x40
   35df8:	bl	39028 <__assert_fail@plt+0x27484>
   35dfc:	subs	r4, r0, #0
   35e00:	strne	r5, [r4]
   35e04:	strhne	r5, [r4, #4]
   35e08:	bne	35dc4 <__assert_fail@plt+0x24220>
   35e0c:	mov	r4, #0
   35e10:	b	35d58 <__assert_fail@plt+0x241b4>
   35e14:	add	r1, r6, #5
   35e18:	movw	r0, #47556	; 0xb9c4
   35e1c:	movt	r0, #3
   35e20:	mov	r2, #1
   35e24:	bl	119a0 <setenv@plt>
   35e28:	cmp	r0, #0
   35e2c:	beq	35de4 <__assert_fail@plt+0x24240>
   35e30:	bl	119b8 <__errno_location@plt>
   35e34:	cmp	r4, #1
   35e38:	mov	r5, r0
   35e3c:	ldr	r6, [r0]
   35e40:	beq	35e58 <__assert_fail@plt+0x242b4>
   35e44:	mov	r0, r4
   35e48:	ldr	r4, [r4]
   35e4c:	bl	19610 <__assert_fail@plt+0x7a6c>
   35e50:	cmp	r4, #0
   35e54:	bne	35e44 <__assert_fail@plt+0x242a0>
   35e58:	mov	r4, #0
   35e5c:	str	r6, [r5]
   35e60:	b	35d58 <__assert_fail@plt+0x241b4>
   35e64:	strd	r4, [sp, #-32]!	; 0xffffffe0
   35e68:	strd	r6, [sp, #8]
   35e6c:	ldr	r6, [r1, #40]	; 0x28
   35e70:	strd	r8, [sp, #16]
   35e74:	str	sl, [sp, #24]
   35e78:	str	lr, [sp, #28]
   35e7c:	cmp	r6, #0
   35e80:	beq	35f90 <__assert_fail@plt+0x243ec>
   35e84:	cmp	r1, r6
   35e88:	mov	r7, r1
   35e8c:	mov	r5, r0
   35e90:	bhi	35ea0 <__assert_fail@plt+0x242fc>
   35e94:	add	r3, r1, #44	; 0x2c
   35e98:	cmp	r6, r3
   35e9c:	bcc	35f90 <__assert_fail@plt+0x243ec>
   35ea0:	ldrb	r3, [r6]
   35ea4:	cmp	r3, #0
   35ea8:	addne	r4, r5, #5
   35eac:	beq	35f84 <__assert_fail@plt+0x243e0>
   35eb0:	mov	r1, r6
   35eb4:	mov	r0, r4
   35eb8:	bl	1170c <strcmp@plt>
   35ebc:	cmp	r0, #0
   35ec0:	add	r2, r5, #5
   35ec4:	mov	r0, r4
   35ec8:	beq	35f64 <__assert_fail@plt+0x243c0>
   35ecc:	ldrb	r3, [r4]
   35ed0:	cmp	r3, #0
   35ed4:	bne	35eec <__assert_fail@plt+0x24348>
   35ed8:	cmp	r4, r2
   35edc:	bne	35f98 <__assert_fail@plt+0x243f4>
   35ee0:	ldrb	r3, [r5, #4]
   35ee4:	cmp	r3, #0
   35ee8:	beq	35f98 <__assert_fail@plt+0x243f4>
   35eec:	bl	11988 <strlen@plt>
   35ef0:	add	r0, r0, #1
   35ef4:	ldrb	r3, [r4, r0]!
   35ef8:	cmp	r3, #0
   35efc:	bne	35eb0 <__assert_fail@plt+0x2430c>
   35f00:	ldr	r3, [r5]
   35f04:	cmp	r3, #0
   35f08:	addne	r4, r3, #5
   35f0c:	movne	r5, r3
   35f10:	b	35eb0 <__assert_fail@plt+0x2430c>
   35f14:	cmp	r8, #58	; 0x3a
   35f18:	movcs	r0, r8
   35f1c:	movcc	r0, #58	; 0x3a
   35f20:	add	r0, r0, #9
   35f24:	bic	r0, r0, #3
   35f28:	bl	39028 <__assert_fail@plt+0x27484>
   35f2c:	subs	r9, r0, #0
   35f30:	beq	35fd0 <__assert_fail@plt+0x2442c>
   35f34:	mov	sl, #0
   35f38:	mov	r3, #1
   35f3c:	add	r4, r9, #5
   35f40:	mov	r1, r6
   35f44:	mov	r0, r4
   35f48:	mov	r2, r8
   35f4c:	str	sl, [r9]
   35f50:	strh	r3, [r9, #4]
   35f54:	bl	11784 <memcpy@plt>
   35f58:	strb	sl, [r4, r8]
   35f5c:	str	r9, [r5]
   35f60:	strb	sl, [r9, #4]
   35f64:	mov	r0, #1
   35f68:	str	r4, [r7, #40]	; 0x28
   35f6c:	ldrd	r4, [sp]
   35f70:	ldrd	r6, [sp, #8]
   35f74:	ldrd	r8, [sp, #16]
   35f78:	ldr	sl, [sp, #24]
   35f7c:	add	sp, sp, #28
   35f80:	pop	{pc}		; (ldr pc, [sp], #4)
   35f84:	movw	r4, #49420	; 0xc10c
   35f88:	movt	r4, #3
   35f8c:	b	35f64 <__assert_fail@plt+0x243c0>
   35f90:	mov	r0, #1
   35f94:	b	35f6c <__assert_fail@plt+0x243c8>
   35f98:	mov	r0, r6
   35f9c:	bl	11988 <strlen@plt>
   35fa0:	add	r3, r5, #64	; 0x40
   35fa4:	add	r8, r0, #1
   35fa8:	sub	r3, r3, r4
   35fac:	cmp	r3, r8
   35fb0:	ble	35f14 <__assert_fail@plt+0x24370>
   35fb4:	mov	r1, r6
   35fb8:	mov	r2, r8
   35fbc:	mov	r0, r4
   35fc0:	bl	11784 <memcpy@plt>
   35fc4:	mov	r3, #0
   35fc8:	strb	r3, [r4, r8]
   35fcc:	b	35f64 <__assert_fail@plt+0x243c0>
   35fd0:	mov	r0, r9
   35fd4:	str	r9, [r5]
   35fd8:	b	35f6c <__assert_fail@plt+0x243c8>
   35fdc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35fe0:	strd	r6, [sp, #8]
   35fe4:	subs	r6, r0, #0
   35fe8:	str	r8, [sp, #16]
   35fec:	str	lr, [sp, #20]
   35ff0:	beq	3605c <__assert_fail@plt+0x244b8>
   35ff4:	bl	11988 <strlen@plt>
   35ff8:	add	r5, r0, #1
   35ffc:	cmp	r5, #58	; 0x3a
   36000:	movcs	r0, r5
   36004:	movcc	r0, #58	; 0x3a
   36008:	add	r0, r0, #9
   3600c:	bic	r0, r0, #3
   36010:	bl	39028 <__assert_fail@plt+0x27484>
   36014:	subs	r4, r0, #0
   36018:	beq	36044 <__assert_fail@plt+0x244a0>
   3601c:	mov	r7, #0
   36020:	mov	ip, #1
   36024:	add	r3, r4, #5
   36028:	mov	r1, r6
   3602c:	mov	r0, r3
   36030:	mov	r2, r5
   36034:	str	r7, [r4]
   36038:	strh	ip, [r4, #4]
   3603c:	bl	11784 <memcpy@plt>
   36040:	strb	r7, [r0, r5]
   36044:	mov	r0, r4
   36048:	ldrd	r4, [sp]
   3604c:	ldrd	r6, [sp, #8]
   36050:	ldr	r8, [sp, #16]
   36054:	add	sp, sp, #20
   36058:	pop	{pc}		; (ldr pc, [sp], #4)
   3605c:	mov	r0, #64	; 0x40
   36060:	bl	39028 <__assert_fail@plt+0x27484>
   36064:	subs	r4, r0, #0
   36068:	strne	r6, [r4]
   3606c:	strhne	r6, [r4, #4]
   36070:	b	36044 <__assert_fail@plt+0x244a0>
   36074:	cmp	r0, #1
   36078:	bxeq	lr
   3607c:	cmp	r0, #0
   36080:	bxeq	lr
   36084:	str	r4, [sp, #-8]!
   36088:	str	lr, [sp, #4]
   3608c:	ldr	r4, [r0]
   36090:	bl	19610 <__assert_fail@plt+0x7a6c>
   36094:	subs	r0, r4, #0
   36098:	bne	3608c <__assert_fail@plt+0x244e8>
   3609c:	ldr	r4, [sp]
   360a0:	add	sp, sp, #4
   360a4:	pop	{pc}		; (ldr pc, [sp], #4)
   360a8:	subs	ip, r0, #0
   360ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   360b0:	strd	r6, [sp, #8]
   360b4:	mov	r6, r1
   360b8:	str	r8, [sp, #16]
   360bc:	str	lr, [sp, #20]
   360c0:	beq	361a4 <__assert_fail@plt+0x24600>
   360c4:	mov	r5, r2
   360c8:	mov	r7, ip
   360cc:	bl	35d0c <__assert_fail@plt+0x24168>
   360d0:	subs	r4, r0, #0
   360d4:	beq	36178 <__assert_fail@plt+0x245d4>
   360d8:	mov	r0, r6
   360dc:	mov	r1, r5
   360e0:	bl	117fc <localtime_r@plt>
   360e4:	cmp	r0, #0
   360e8:	beq	3616c <__assert_fail@plt+0x245c8>
   360ec:	mov	r0, r7
   360f0:	mov	r1, r5
   360f4:	bl	35e64 <__assert_fail@plt+0x242c0>
   360f8:	subs	r7, r0, #0
   360fc:	beq	3616c <__assert_fail@plt+0x245c8>
   36100:	cmp	r4, #1
   36104:	beq	36164 <__assert_fail@plt+0x245c0>
   36108:	bl	119b8 <__errno_location@plt>
   3610c:	ldrb	r3, [r4, #4]
   36110:	mov	r6, r0
   36114:	movw	r0, #47556	; 0xb9c4
   36118:	movt	r0, #3
   3611c:	ldr	r8, [r6]
   36120:	cmp	r3, #0
   36124:	beq	36190 <__assert_fail@plt+0x245ec>
   36128:	mov	r2, #1
   3612c:	add	r1, r4, #5
   36130:	bl	119a0 <setenv@plt>
   36134:	cmp	r0, #0
   36138:	beq	3619c <__assert_fail@plt+0x245f8>
   3613c:	ldr	r8, [r6]
   36140:	mov	r7, #0
   36144:	mov	r0, r4
   36148:	ldr	r4, [r4]
   3614c:	bl	19610 <__assert_fail@plt+0x7a6c>
   36150:	cmp	r4, #0
   36154:	bne	36144 <__assert_fail@plt+0x245a0>
   36158:	cmp	r7, #0
   3615c:	str	r8, [r6]
   36160:	beq	36178 <__assert_fail@plt+0x245d4>
   36164:	mov	r0, r5
   36168:	b	3617c <__assert_fail@plt+0x245d8>
   3616c:	cmp	r4, #1
   36170:	movne	r7, #0
   36174:	bne	36108 <__assert_fail@plt+0x24564>
   36178:	mov	r0, #0
   3617c:	ldrd	r4, [sp]
   36180:	ldrd	r6, [sp, #8]
   36184:	ldr	r8, [sp, #16]
   36188:	add	sp, sp, #20
   3618c:	pop	{pc}		; (ldr pc, [sp], #4)
   36190:	bl	11b44 <unsetenv@plt>
   36194:	cmp	r0, #0
   36198:	bne	3613c <__assert_fail@plt+0x24598>
   3619c:	bl	11844 <tzset@plt>
   361a0:	b	36144 <__assert_fail@plt+0x245a0>
   361a4:	mov	r0, r6
   361a8:	mov	r1, r2
   361ac:	ldrd	r4, [sp]
   361b0:	ldrd	r6, [sp, #8]
   361b4:	ldr	r8, [sp, #16]
   361b8:	ldr	lr, [sp, #20]
   361bc:	add	sp, sp, #24
   361c0:	b	116e8 <gmtime_r@plt>
   361c4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   361c8:	subs	r5, r0, #0
   361cc:	strd	r6, [sp, #8]
   361d0:	mov	r6, r1
   361d4:	strd	r8, [sp, #16]
   361d8:	str	lr, [sp, #24]
   361dc:	sub	sp, sp, #52	; 0x34
   361e0:	beq	36324 <__assert_fail@plt+0x24780>
   361e4:	bl	35d0c <__assert_fail@plt+0x24168>
   361e8:	subs	r4, r0, #0
   361ec:	beq	36334 <__assert_fail@plt+0x24790>
   361f0:	ldr	r3, [r6]
   361f4:	mvn	r2, #0
   361f8:	add	r0, sp, #4
   361fc:	ldr	r1, [r6, #4]
   36200:	str	r3, [sp, #4]
   36204:	str	r2, [sp, #32]
   36208:	ldrd	r2, [r6, #8]
   3620c:	str	r1, [sp, #8]
   36210:	ldr	r1, [r6, #16]
   36214:	strd	r2, [sp, #12]
   36218:	ldr	r2, [r6, #20]
   3621c:	str	r1, [sp, #20]
   36220:	ldr	r3, [r6, #32]
   36224:	str	r2, [sp, #24]
   36228:	str	r3, [sp, #36]	; 0x24
   3622c:	bl	11724 <mktime@plt>
   36230:	ldr	r3, [sp, #32]
   36234:	mov	r7, r0
   36238:	cmp	r3, #0
   3623c:	bge	362f0 <__assert_fail@plt+0x2474c>
   36240:	cmp	r4, #1
   36244:	beq	36334 <__assert_fail@plt+0x24790>
   36248:	mov	r5, #0
   3624c:	bl	119b8 <__errno_location@plt>
   36250:	ldrb	r3, [r4, #4]
   36254:	mov	r8, r0
   36258:	movw	r0, #47556	; 0xb9c4
   3625c:	movt	r0, #3
   36260:	ldr	r9, [r8]
   36264:	cmp	r3, #0
   36268:	beq	3631c <__assert_fail@plt+0x24778>
   3626c:	mov	r2, #1
   36270:	add	r1, r4, #5
   36274:	bl	119a0 <setenv@plt>
   36278:	cmp	r0, #0
   3627c:	bne	36310 <__assert_fail@plt+0x2476c>
   36280:	bl	11844 <tzset@plt>
   36284:	mov	r0, r4
   36288:	ldr	r4, [r4]
   3628c:	bl	19610 <__assert_fail@plt+0x7a6c>
   36290:	cmp	r4, #0
   36294:	bne	36284 <__assert_fail@plt+0x246e0>
   36298:	cmp	r5, #0
   3629c:	str	r9, [r8]
   362a0:	beq	36334 <__assert_fail@plt+0x24790>
   362a4:	ldrd	r0, [sp, #4]
   362a8:	ldrd	r2, [sp, #12]
   362ac:	ldrd	r4, [sp, #20]
   362b0:	strd	r0, [r6]
   362b4:	ldrd	r0, [sp, #28]
   362b8:	strd	r2, [r6, #8]
   362bc:	ldrd	r2, [sp, #36]	; 0x24
   362c0:	strd	r4, [r6, #16]
   362c4:	ldr	ip, [sp, #44]	; 0x2c
   362c8:	strd	r0, [r6, #24]
   362cc:	strd	r2, [r6, #32]
   362d0:	str	ip, [r6, #40]	; 0x28
   362d4:	mov	r0, r7
   362d8:	add	sp, sp, #52	; 0x34
   362dc:	ldrd	r4, [sp]
   362e0:	ldrd	r6, [sp, #8]
   362e4:	ldrd	r8, [sp, #16]
   362e8:	add	sp, sp, #24
   362ec:	pop	{pc}		; (ldr pc, [sp], #4)
   362f0:	mov	r0, r5
   362f4:	add	r1, sp, #4
   362f8:	bl	35e64 <__assert_fail@plt+0x242c0>
   362fc:	subs	r5, r0, #0
   36300:	beq	36240 <__assert_fail@plt+0x2469c>
   36304:	cmp	r4, #1
   36308:	beq	362a4 <__assert_fail@plt+0x24700>
   3630c:	b	3624c <__assert_fail@plt+0x246a8>
   36310:	mov	r5, #0
   36314:	ldr	r9, [r8]
   36318:	b	36284 <__assert_fail@plt+0x246e0>
   3631c:	bl	11b44 <unsetenv@plt>
   36320:	b	36278 <__assert_fail@plt+0x246d4>
   36324:	mov	r0, r1
   36328:	bl	11acc <timegm@plt>
   3632c:	mov	r7, r0
   36330:	b	362d4 <__assert_fail@plt+0x24730>
   36334:	mvn	r7, #0
   36338:	b	362d4 <__assert_fail@plt+0x24730>
   3633c:	cmp	r0, #2
   36340:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36344:	mov	r4, r0
   36348:	strd	r6, [sp, #8]
   3634c:	str	r8, [sp, #16]
   36350:	str	lr, [sp, #20]
   36354:	bls	36370 <__assert_fail@plt+0x247cc>
   36358:	mov	r0, r4
   3635c:	ldrd	r4, [sp]
   36360:	ldrd	r6, [sp, #8]
   36364:	ldr	r8, [sp, #16]
   36368:	add	sp, sp, #20
   3636c:	pop	{pc}		; (ldr pc, [sp], #4)
   36370:	bl	3a088 <__assert_fail@plt+0x284e4>
   36374:	mov	r7, r0
   36378:	bl	119b8 <__errno_location@plt>
   3637c:	mov	r5, r0
   36380:	mov	r0, r4
   36384:	ldr	r6, [r5]
   36388:	mov	r4, r7
   3638c:	bl	11b80 <close@plt>
   36390:	str	r6, [r5]
   36394:	b	36358 <__assert_fail@plt+0x247b4>
   36398:	cmp	r1, #0
   3639c:	strd	r4, [sp, #-16]!
   363a0:	mov	ip, r3
   363a4:	str	r6, [sp, #8]
   363a8:	mov	r4, r0
   363ac:	str	lr, [sp, #12]
   363b0:	sub	sp, sp, #32
   363b4:	ldr	r5, [sp, #48]	; 0x30
   363b8:	ldr	r6, [sp, #52]	; 0x34
   363bc:	beq	36500 <__assert_fail@plt+0x2495c>
   363c0:	mov	r3, r1
   363c4:	mov	r1, #1
   363c8:	stm	sp, {r2, ip}
   363cc:	movw	r2, #50756	; 0xc644
   363d0:	movt	r2, #3
   363d4:	bl	11a18 <__fprintf_chk@plt>
   363d8:	mov	r2, #5
   363dc:	movw	r1, #50776	; 0xc658
   363e0:	movt	r1, #3
   363e4:	mov	r0, #0
   363e8:	bl	117d8 <dcgettext@plt>
   363ec:	movw	ip, #2022	; 0x7e6
   363f0:	mov	r3, r0
   363f4:	mov	r1, #1
   363f8:	movw	r2, #51504	; 0xc930
   363fc:	movt	r2, #3
   36400:	mov	r0, r4
   36404:	str	ip, [sp]
   36408:	bl	11a18 <__fprintf_chk@plt>
   3640c:	mov	r1, r4
   36410:	mov	r0, #10
   36414:	bl	117cc <fputc_unlocked@plt>
   36418:	mov	r2, #5
   3641c:	movw	r1, #50780	; 0xc65c
   36420:	movt	r1, #3
   36424:	mov	r0, #0
   36428:	bl	117d8 <dcgettext@plt>
   3642c:	mov	r2, r0
   36430:	mov	r1, #1
   36434:	movw	r3, #50952	; 0xc708
   36438:	movt	r3, #3
   3643c:	mov	r0, r4
   36440:	bl	11a18 <__fprintf_chk@plt>
   36444:	mov	r1, r4
   36448:	mov	r0, #10
   3644c:	bl	117cc <fputc_unlocked@plt>
   36450:	cmp	r6, #9
   36454:	ldrls	pc, [pc, r6, lsl #2]
   36458:	b	3676c <__assert_fail@plt+0x24bc8>
   3645c:	andeq	r6, r3, ip, ror #9
   36460:	andeq	r6, r3, ip, lsl r5
   36464:	andeq	r6, r3, r8, asr r5
   36468:	muleq	r3, r8, r5
   3646c:	andeq	r6, r3, r0, ror #11
   36470:	andeq	r6, r3, r8, lsl r6
   36474:	andeq	r6, r3, r0, ror #12
   36478:			; <UNDEFINED> instruction: 0x000366b4
   3647c:	andeq	r6, r3, ip, lsl #14
   36480:	andeq	r6, r3, r4, lsl #9
   36484:	movw	r1, #51256	; 0xc838
   36488:	movt	r1, #3
   3648c:	mov	r2, #5
   36490:	mov	r0, #0
   36494:	bl	117d8 <dcgettext@plt>
   36498:	ldr	lr, [r5, #4]
   3649c:	mov	r2, r0
   364a0:	mov	r1, #1
   364a4:	mov	r0, r4
   364a8:	ldr	r3, [r5, #8]
   364ac:	ldr	ip, [r5, #32]
   364b0:	str	lr, [sp]
   364b4:	ldr	lr, [r5, #12]
   364b8:	str	ip, [sp, #28]
   364bc:	ldr	ip, [r5, #28]
   364c0:	str	r3, [sp, #4]
   364c4:	ldr	r3, [r5, #16]
   364c8:	str	lr, [sp, #8]
   364cc:	ldr	lr, [r5, #20]
   364d0:	str	ip, [sp, #24]
   364d4:	ldr	ip, [r5, #24]
   364d8:	str	r3, [sp, #12]
   364dc:	ldr	r3, [r5]
   364e0:	str	lr, [sp, #16]
   364e4:	str	ip, [sp, #20]
   364e8:	bl	11a18 <__fprintf_chk@plt>
   364ec:	add	sp, sp, #32
   364f0:	ldrd	r4, [sp]
   364f4:	ldr	r6, [sp, #8]
   364f8:	add	sp, sp, #12
   364fc:	pop	{pc}		; (ldr pc, [sp], #4)
   36500:	mov	r3, r2
   36504:	mov	r1, #1
   36508:	str	ip, [sp]
   3650c:	movw	r2, #50768	; 0xc650
   36510:	movt	r2, #3
   36514:	bl	11a18 <__fprintf_chk@plt>
   36518:	b	363d8 <__assert_fail@plt+0x24834>
   3651c:	mov	r2, #5
   36520:	movw	r1, #50988	; 0xc72c
   36524:	movt	r1, #3
   36528:	mov	r0, #0
   3652c:	bl	117d8 <dcgettext@plt>
   36530:	ldr	r3, [r5]
   36534:	mov	r2, r0
   36538:	mov	r1, #1
   3653c:	mov	r0, r4
   36540:	add	sp, sp, #32
   36544:	ldrd	r4, [sp]
   36548:	ldr	r6, [sp, #8]
   3654c:	ldr	lr, [sp, #12]
   36550:	add	sp, sp, #16
   36554:	b	11a18 <__fprintf_chk@plt>
   36558:	mov	r2, #5
   3655c:	movw	r1, #51004	; 0xc73c
   36560:	movt	r1, #3
   36564:	mov	r0, #0
   36568:	bl	117d8 <dcgettext@plt>
   3656c:	ldm	r5, {r3, ip}
   36570:	mov	r2, r0
   36574:	mov	r1, #1
   36578:	mov	r0, r4
   3657c:	str	ip, [sp, #48]	; 0x30
   36580:	add	sp, sp, #32
   36584:	ldrd	r4, [sp]
   36588:	ldr	r6, [sp, #8]
   3658c:	ldr	lr, [sp, #12]
   36590:	add	sp, sp, #16
   36594:	b	11a18 <__fprintf_chk@plt>
   36598:	mov	r2, #5
   3659c:	movw	r1, #51028	; 0xc754
   365a0:	movt	r1, #3
   365a4:	mov	r0, #0
   365a8:	bl	117d8 <dcgettext@plt>
   365ac:	ldm	r5, {r3, lr}
   365b0:	mov	r2, r0
   365b4:	mov	r1, #1
   365b8:	mov	r0, r4
   365bc:	ldr	ip, [r5, #8]
   365c0:	str	lr, [sp, #48]	; 0x30
   365c4:	str	ip, [sp, #52]	; 0x34
   365c8:	add	sp, sp, #32
   365cc:	ldrd	r4, [sp]
   365d0:	ldr	r6, [sp, #8]
   365d4:	ldr	lr, [sp, #12]
   365d8:	add	sp, sp, #16
   365dc:	b	11a18 <__fprintf_chk@plt>
   365e0:	mov	r2, #5
   365e4:	movw	r1, #51056	; 0xc770
   365e8:	movt	r1, #3
   365ec:	mov	r0, #0
   365f0:	bl	117d8 <dcgettext@plt>
   365f4:	ldmib	r5, {r3, ip, lr}
   365f8:	mov	r2, r0
   365fc:	mov	r1, #1
   36600:	mov	r0, r4
   36604:	str	r3, [sp]
   36608:	ldr	r3, [r5]
   3660c:	stmib	sp, {ip, lr}
   36610:	bl	11a18 <__fprintf_chk@plt>
   36614:	b	364ec <__assert_fail@plt+0x24948>
   36618:	mov	r2, #5
   3661c:	movw	r1, #51088	; 0xc790
   36620:	movt	r1, #3
   36624:	mov	r0, #0
   36628:	bl	117d8 <dcgettext@plt>
   3662c:	ldmib	r5, {ip, lr}
   36630:	mov	r2, r0
   36634:	mov	r1, #1
   36638:	mov	r0, r4
   3663c:	ldr	r3, [r5, #16]
   36640:	str	ip, [sp]
   36644:	ldr	ip, [r5, #12]
   36648:	str	r3, [sp, #12]
   3664c:	ldr	r3, [r5]
   36650:	str	lr, [sp, #4]
   36654:	str	ip, [sp, #8]
   36658:	bl	11a18 <__fprintf_chk@plt>
   3665c:	b	364ec <__assert_fail@plt+0x24948>
   36660:	mov	r2, #5
   36664:	movw	r1, #51124	; 0xc7b4
   36668:	movt	r1, #3
   3666c:	mov	r0, #0
   36670:	bl	117d8 <dcgettext@plt>
   36674:	ldr	lr, [r5, #4]
   36678:	mov	r2, r0
   3667c:	mov	r1, #1
   36680:	mov	r0, r4
   36684:	ldr	r3, [r5, #8]
   36688:	ldr	ip, [r5, #20]
   3668c:	str	lr, [sp]
   36690:	ldr	lr, [r5, #12]
   36694:	str	ip, [sp, #16]
   36698:	ldr	ip, [r5, #16]
   3669c:	str	r3, [sp, #4]
   366a0:	ldr	r3, [r5]
   366a4:	str	lr, [sp, #8]
   366a8:	str	ip, [sp, #12]
   366ac:	bl	11a18 <__fprintf_chk@plt>
   366b0:	b	364ec <__assert_fail@plt+0x24948>
   366b4:	mov	r2, #5
   366b8:	movw	r1, #51164	; 0xc7dc
   366bc:	movt	r1, #3
   366c0:	mov	r0, #0
   366c4:	bl	117d8 <dcgettext@plt>
   366c8:	ldmib	r5, {r3, ip}
   366cc:	mov	r2, r0
   366d0:	mov	r1, #1
   366d4:	mov	r0, r4
   366d8:	ldr	lr, [r5, #24]
   366dc:	str	r3, [sp]
   366e0:	ldr	r3, [r5, #12]
   366e4:	str	lr, [sp, #20]
   366e8:	ldr	lr, [r5, #20]
   366ec:	str	ip, [sp, #4]
   366f0:	ldr	ip, [r5, #16]
   366f4:	str	r3, [sp, #8]
   366f8:	ldr	r3, [r5]
   366fc:	str	ip, [sp, #12]
   36700:	str	lr, [sp, #16]
   36704:	bl	11a18 <__fprintf_chk@plt>
   36708:	b	364ec <__assert_fail@plt+0x24948>
   3670c:	mov	r2, #5
   36710:	movw	r1, #51208	; 0xc808
   36714:	movt	r1, #3
   36718:	mov	r0, #0
   3671c:	bl	117d8 <dcgettext@plt>
   36720:	ldmib	r5, {ip, lr}
   36724:	mov	r2, r0
   36728:	mov	r1, #1
   3672c:	mov	r0, r4
   36730:	ldr	r3, [r5, #28]
   36734:	str	ip, [sp]
   36738:	ldr	ip, [r5, #12]
   3673c:	str	r3, [sp, #24]
   36740:	ldr	r3, [r5, #24]
   36744:	str	lr, [sp, #4]
   36748:	ldr	lr, [r5, #16]
   3674c:	str	ip, [sp, #8]
   36750:	ldr	ip, [r5, #20]
   36754:	str	r3, [sp, #20]
   36758:	ldr	r3, [r5]
   3675c:	str	lr, [sp, #12]
   36760:	str	ip, [sp, #16]
   36764:	bl	11a18 <__fprintf_chk@plt>
   36768:	b	364ec <__assert_fail@plt+0x24948>
   3676c:	movw	r1, #51308	; 0xc86c
   36770:	movt	r1, #3
   36774:	b	3648c <__assert_fail@plt+0x248e8>
   36778:	strd	r4, [sp, #-12]!
   3677c:	str	lr, [sp, #8]
   36780:	sub	sp, sp, #12
   36784:	ldr	r5, [sp, #24]
   36788:	ldr	ip, [r5]
   3678c:	cmp	ip, #0
   36790:	beq	367ac <__assert_fail@plt+0x24c08>
   36794:	mov	lr, r5
   36798:	mov	ip, #0
   3679c:	ldr	r4, [lr, #4]!
   367a0:	add	ip, ip, #1
   367a4:	cmp	r4, #0
   367a8:	bne	3679c <__assert_fail@plt+0x24bf8>
   367ac:	stm	sp, {r5, ip}
   367b0:	bl	36398 <__assert_fail@plt+0x247f4>
   367b4:	add	sp, sp, #12
   367b8:	ldrd	r4, [sp]
   367bc:	add	sp, sp, #8
   367c0:	pop	{pc}		; (ldr pc, [sp], #4)
   367c4:	push	{lr}		; (str lr, [sp, #-4]!)
   367c8:	sub	sp, sp, #52	; 0x34
   367cc:	ldr	ip, [sp, #56]	; 0x38
   367d0:	ldr	lr, [ip]
   367d4:	cmp	lr, #0
   367d8:	str	lr, [sp, #8]
   367dc:	beq	36874 <__assert_fail@plt+0x24cd0>
   367e0:	ldr	lr, [ip, #4]
   367e4:	cmp	lr, #0
   367e8:	str	lr, [sp, #12]
   367ec:	beq	36888 <__assert_fail@plt+0x24ce4>
   367f0:	ldr	lr, [ip, #8]
   367f4:	cmp	lr, #0
   367f8:	str	lr, [sp, #16]
   367fc:	beq	36890 <__assert_fail@plt+0x24cec>
   36800:	ldr	lr, [ip, #12]
   36804:	cmp	lr, #0
   36808:	str	lr, [sp, #20]
   3680c:	beq	36898 <__assert_fail@plt+0x24cf4>
   36810:	ldr	lr, [ip, #16]
   36814:	cmp	lr, #0
   36818:	str	lr, [sp, #24]
   3681c:	beq	368a0 <__assert_fail@plt+0x24cfc>
   36820:	ldr	lr, [ip, #20]
   36824:	cmp	lr, #0
   36828:	str	lr, [sp, #28]
   3682c:	beq	368a8 <__assert_fail@plt+0x24d04>
   36830:	ldr	lr, [ip, #24]
   36834:	cmp	lr, #0
   36838:	str	lr, [sp, #32]
   3683c:	beq	368b0 <__assert_fail@plt+0x24d0c>
   36840:	ldr	lr, [ip, #28]
   36844:	cmp	lr, #0
   36848:	str	lr, [sp, #36]	; 0x24
   3684c:	beq	368b8 <__assert_fail@plt+0x24d14>
   36850:	ldr	lr, [ip, #32]
   36854:	cmp	lr, #0
   36858:	str	lr, [sp, #40]	; 0x28
   3685c:	beq	368c0 <__assert_fail@plt+0x24d1c>
   36860:	ldr	ip, [ip, #36]	; 0x24
   36864:	cmp	ip, #0
   36868:	str	ip, [sp, #44]	; 0x2c
   3686c:	movne	lr, #10
   36870:	moveq	lr, #9
   36874:	add	ip, sp, #8
   36878:	stm	sp, {ip, lr}
   3687c:	bl	36398 <__assert_fail@plt+0x247f4>
   36880:	add	sp, sp, #52	; 0x34
   36884:	pop	{pc}		; (ldr pc, [sp], #4)
   36888:	mov	lr, #1
   3688c:	b	36874 <__assert_fail@plt+0x24cd0>
   36890:	mov	lr, #2
   36894:	b	36874 <__assert_fail@plt+0x24cd0>
   36898:	mov	lr, #3
   3689c:	b	36874 <__assert_fail@plt+0x24cd0>
   368a0:	mov	lr, #4
   368a4:	b	36874 <__assert_fail@plt+0x24cd0>
   368a8:	mov	lr, #5
   368ac:	b	36874 <__assert_fail@plt+0x24cd0>
   368b0:	mov	lr, #6
   368b4:	b	36874 <__assert_fail@plt+0x24cd0>
   368b8:	mov	lr, #7
   368bc:	b	36874 <__assert_fail@plt+0x24cd0>
   368c0:	mov	lr, #8
   368c4:	b	36874 <__assert_fail@plt+0x24cd0>
   368c8:	push	{r3}		; (str r3, [sp, #-4]!)
   368cc:	push	{lr}		; (str lr, [sp, #-4]!)
   368d0:	sub	sp, sp, #56	; 0x38
   368d4:	ldr	ip, [sp, #64]	; 0x40
   368d8:	add	r3, sp, #64	; 0x40
   368dc:	str	r3, [sp, #12]
   368e0:	cmp	ip, #0
   368e4:	str	ip, [sp, #16]
   368e8:	beq	36980 <__assert_fail@plt+0x24ddc>
   368ec:	ldr	ip, [sp, #68]	; 0x44
   368f0:	cmp	ip, #0
   368f4:	str	ip, [sp, #20]
   368f8:	beq	369a4 <__assert_fail@plt+0x24e00>
   368fc:	ldr	ip, [sp, #72]	; 0x48
   36900:	cmp	ip, #0
   36904:	str	ip, [sp, #24]
   36908:	beq	369ac <__assert_fail@plt+0x24e08>
   3690c:	ldr	ip, [sp, #76]	; 0x4c
   36910:	cmp	ip, #0
   36914:	str	ip, [sp, #28]
   36918:	beq	369b4 <__assert_fail@plt+0x24e10>
   3691c:	ldr	ip, [sp, #80]	; 0x50
   36920:	cmp	ip, #0
   36924:	str	ip, [sp, #32]
   36928:	beq	369bc <__assert_fail@plt+0x24e18>
   3692c:	ldr	ip, [sp, #84]	; 0x54
   36930:	cmp	ip, #0
   36934:	str	ip, [sp, #36]	; 0x24
   36938:	beq	369c4 <__assert_fail@plt+0x24e20>
   3693c:	ldr	ip, [sp, #88]	; 0x58
   36940:	cmp	ip, #0
   36944:	str	ip, [sp, #40]	; 0x28
   36948:	beq	369cc <__assert_fail@plt+0x24e28>
   3694c:	ldr	ip, [sp, #92]	; 0x5c
   36950:	cmp	ip, #0
   36954:	str	ip, [sp, #44]	; 0x2c
   36958:	beq	369d4 <__assert_fail@plt+0x24e30>
   3695c:	ldr	ip, [sp, #96]	; 0x60
   36960:	cmp	ip, #0
   36964:	str	ip, [sp, #48]	; 0x30
   36968:	beq	369dc <__assert_fail@plt+0x24e38>
   3696c:	ldr	r3, [sp, #100]	; 0x64
   36970:	cmp	r3, #0
   36974:	str	r3, [sp, #52]	; 0x34
   36978:	movne	ip, #10
   3697c:	moveq	ip, #9
   36980:	ldr	r3, [sp, #60]	; 0x3c
   36984:	add	lr, sp, #16
   36988:	str	lr, [sp]
   3698c:	str	ip, [sp, #4]
   36990:	bl	36398 <__assert_fail@plt+0x247f4>
   36994:	add	sp, sp, #56	; 0x38
   36998:	pop	{lr}		; (ldr lr, [sp], #4)
   3699c:	add	sp, sp, #4
   369a0:	bx	lr
   369a4:	mov	ip, #1
   369a8:	b	36980 <__assert_fail@plt+0x24ddc>
   369ac:	mov	ip, #2
   369b0:	b	36980 <__assert_fail@plt+0x24ddc>
   369b4:	mov	ip, #3
   369b8:	b	36980 <__assert_fail@plt+0x24ddc>
   369bc:	mov	ip, #4
   369c0:	b	36980 <__assert_fail@plt+0x24ddc>
   369c4:	mov	ip, #5
   369c8:	b	36980 <__assert_fail@plt+0x24ddc>
   369cc:	mov	ip, #6
   369d0:	b	36980 <__assert_fail@plt+0x24ddc>
   369d4:	mov	ip, #7
   369d8:	b	36980 <__assert_fail@plt+0x24ddc>
   369dc:	mov	ip, #8
   369e0:	b	36980 <__assert_fail@plt+0x24ddc>
   369e4:	movw	r3, #53820	; 0xd23c
   369e8:	movt	r3, #4
   369ec:	str	r4, [sp, #-8]!
   369f0:	mov	r0, #10
   369f4:	ldr	r1, [r3]
   369f8:	str	lr, [sp, #4]
   369fc:	bl	117cc <fputc_unlocked@plt>
   36a00:	mov	r2, #5
   36a04:	movw	r1, #51368	; 0xc8a8
   36a08:	movt	r1, #3
   36a0c:	mov	r0, #0
   36a10:	bl	117d8 <dcgettext@plt>
   36a14:	mov	r1, r0
   36a18:	movw	r2, #51388	; 0xc8bc
   36a1c:	movt	r2, #3
   36a20:	mov	r0, #1
   36a24:	bl	11a00 <__printf_chk@plt>
   36a28:	mov	r2, #5
   36a2c:	movw	r1, #51412	; 0xc8d4
   36a30:	movt	r1, #3
   36a34:	mov	r0, #0
   36a38:	bl	117d8 <dcgettext@plt>
   36a3c:	mov	r1, r0
   36a40:	movw	r3, #47180	; 0xb84c
   36a44:	movt	r3, #3
   36a48:	movw	r2, #47220	; 0xb874
   36a4c:	movt	r2, #3
   36a50:	mov	r0, #1
   36a54:	bl	11a00 <__printf_chk@plt>
   36a58:	mov	r2, #5
   36a5c:	movw	r1, #51432	; 0xc8e8
   36a60:	movt	r1, #3
   36a64:	mov	r0, #0
   36a68:	bl	117d8 <dcgettext@plt>
   36a6c:	mov	r1, r0
   36a70:	movw	r2, #51472	; 0xc910
   36a74:	movt	r2, #3
   36a78:	mov	r0, #1
   36a7c:	ldr	r4, [sp]
   36a80:	ldr	lr, [sp, #4]
   36a84:	add	sp, sp, #8
   36a88:	b	11a00 <__printf_chk@plt>
   36a8c:	strd	r4, [sp, #-16]!
   36a90:	mov	r4, r0
   36a94:	mov	r5, r2
   36a98:	str	r6, [sp, #8]
   36a9c:	mov	r6, r1
   36aa0:	str	lr, [sp, #12]
   36aa4:	bl	39f8c <__assert_fail@plt+0x283e8>
   36aa8:	cmp	r0, #0
   36aac:	beq	36ac0 <__assert_fail@plt+0x24f1c>
   36ab0:	ldrd	r4, [sp]
   36ab4:	ldr	r6, [sp, #8]
   36ab8:	add	sp, sp, #12
   36abc:	pop	{pc}		; (ldr pc, [sp], #4)
   36ac0:	cmp	r4, #0
   36ac4:	beq	36ad4 <__assert_fail@plt+0x24f30>
   36ac8:	cmp	r6, #0
   36acc:	cmpne	r5, #0
   36ad0:	beq	36ab0 <__assert_fail@plt+0x24f0c>
   36ad4:	bl	37090 <__assert_fail@plt+0x254ec>
   36ad8:	str	r4, [sp, #-8]!
   36adc:	str	lr, [sp, #4]
   36ae0:	bl	39028 <__assert_fail@plt+0x27484>
   36ae4:	cmp	r0, #0
   36ae8:	beq	36af8 <__assert_fail@plt+0x24f54>
   36aec:	ldr	r4, [sp]
   36af0:	add	sp, sp, #4
   36af4:	pop	{pc}		; (ldr pc, [sp], #4)
   36af8:	bl	37090 <__assert_fail@plt+0x254ec>
   36afc:	str	r4, [sp, #-8]!
   36b00:	str	lr, [sp, #4]
   36b04:	bl	39028 <__assert_fail@plt+0x27484>
   36b08:	cmp	r0, #0
   36b0c:	beq	36b1c <__assert_fail@plt+0x24f78>
   36b10:	ldr	r4, [sp]
   36b14:	add	sp, sp, #4
   36b18:	pop	{pc}		; (ldr pc, [sp], #4)
   36b1c:	bl	37090 <__assert_fail@plt+0x254ec>
   36b20:	str	r4, [sp, #-8]!
   36b24:	str	lr, [sp, #4]
   36b28:	bl	39028 <__assert_fail@plt+0x27484>
   36b2c:	cmp	r0, #0
   36b30:	beq	36b40 <__assert_fail@plt+0x24f9c>
   36b34:	ldr	r4, [sp]
   36b38:	add	sp, sp, #4
   36b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   36b40:	bl	37090 <__assert_fail@plt+0x254ec>
   36b44:	strd	r4, [sp, #-16]!
   36b48:	mov	r5, r0
   36b4c:	mov	r4, r1
   36b50:	str	r6, [sp, #8]
   36b54:	str	lr, [sp, #12]
   36b58:	bl	39064 <__assert_fail@plt+0x274c0>
   36b5c:	cmp	r0, #0
   36b60:	beq	36b74 <__assert_fail@plt+0x24fd0>
   36b64:	ldrd	r4, [sp]
   36b68:	ldr	r6, [sp, #8]
   36b6c:	add	sp, sp, #12
   36b70:	pop	{pc}		; (ldr pc, [sp], #4)
   36b74:	adds	r4, r4, #0
   36b78:	movne	r4, #1
   36b7c:	cmp	r5, #0
   36b80:	moveq	r4, #1
   36b84:	cmp	r4, #0
   36b88:	beq	36b64 <__assert_fail@plt+0x24fc0>
   36b8c:	bl	37090 <__assert_fail@plt+0x254ec>
   36b90:	cmp	r1, #0
   36b94:	orreq	r1, r1, #1
   36b98:	str	r4, [sp, #-8]!
   36b9c:	str	lr, [sp, #4]
   36ba0:	bl	39064 <__assert_fail@plt+0x274c0>
   36ba4:	cmp	r0, #0
   36ba8:	beq	36bb8 <__assert_fail@plt+0x25014>
   36bac:	ldr	r4, [sp]
   36bb0:	add	sp, sp, #4
   36bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   36bb8:	bl	37090 <__assert_fail@plt+0x254ec>
   36bbc:	strd	r4, [sp, #-16]!
   36bc0:	mov	r4, r0
   36bc4:	mov	r5, r2
   36bc8:	str	r6, [sp, #8]
   36bcc:	mov	r6, r1
   36bd0:	str	lr, [sp, #12]
   36bd4:	bl	39f8c <__assert_fail@plt+0x283e8>
   36bd8:	cmp	r0, #0
   36bdc:	beq	36bf0 <__assert_fail@plt+0x2504c>
   36be0:	ldrd	r4, [sp]
   36be4:	ldr	r6, [sp, #8]
   36be8:	add	sp, sp, #12
   36bec:	pop	{pc}		; (ldr pc, [sp], #4)
   36bf0:	cmp	r4, #0
   36bf4:	beq	36c04 <__assert_fail@plt+0x25060>
   36bf8:	cmp	r6, #0
   36bfc:	cmpne	r5, #0
   36c00:	beq	36be0 <__assert_fail@plt+0x2503c>
   36c04:	bl	37090 <__assert_fail@plt+0x254ec>
   36c08:	cmp	r2, #0
   36c0c:	cmpne	r1, #0
   36c10:	str	r4, [sp, #-8]!
   36c14:	moveq	r2, #1
   36c18:	str	lr, [sp, #4]
   36c1c:	moveq	r1, r2
   36c20:	bl	39f8c <__assert_fail@plt+0x283e8>
   36c24:	cmp	r0, #0
   36c28:	beq	36c38 <__assert_fail@plt+0x25094>
   36c2c:	ldr	r4, [sp]
   36c30:	add	sp, sp, #4
   36c34:	pop	{pc}		; (ldr pc, [sp], #4)
   36c38:	bl	37090 <__assert_fail@plt+0x254ec>
   36c3c:	mov	r2, r1
   36c40:	mov	r1, r0
   36c44:	str	r4, [sp, #-8]!
   36c48:	mov	r0, #0
   36c4c:	str	lr, [sp, #4]
   36c50:	bl	39f8c <__assert_fail@plt+0x283e8>
   36c54:	cmp	r0, #0
   36c58:	beq	36c68 <__assert_fail@plt+0x250c4>
   36c5c:	ldr	r4, [sp]
   36c60:	add	sp, sp, #4
   36c64:	pop	{pc}		; (ldr pc, [sp], #4)
   36c68:	bl	37090 <__assert_fail@plt+0x254ec>
   36c6c:	cmp	r1, #0
   36c70:	cmpne	r0, #0
   36c74:	str	r4, [sp, #-8]!
   36c78:	moveq	r2, #1
   36c7c:	movne	r2, r1
   36c80:	str	lr, [sp, #4]
   36c84:	movne	r1, r0
   36c88:	moveq	r1, r2
   36c8c:	mov	r0, #0
   36c90:	bl	39f8c <__assert_fail@plt+0x283e8>
   36c94:	cmp	r0, #0
   36c98:	beq	36ca8 <__assert_fail@plt+0x25104>
   36c9c:	ldr	r4, [sp]
   36ca0:	add	sp, sp, #4
   36ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   36ca8:	bl	37090 <__assert_fail@plt+0x254ec>
   36cac:	cmp	r0, #0
   36cb0:	strd	r4, [sp, #-16]!
   36cb4:	mov	r5, r1
   36cb8:	ldr	r4, [r1]
   36cbc:	str	r6, [sp, #8]
   36cc0:	str	lr, [sp, #12]
   36cc4:	beq	36d0c <__assert_fail@plt+0x25168>
   36cc8:	lsr	r3, r4, #1
   36ccc:	add	r3, r3, #1
   36cd0:	adds	r4, r4, r3
   36cd4:	bcs	36d08 <__assert_fail@plt+0x25164>
   36cd8:	mov	r2, #1
   36cdc:	mov	r1, r4
   36ce0:	bl	39f8c <__assert_fail@plt+0x283e8>
   36ce4:	cmp	r0, #0
   36ce8:	beq	36d00 <__assert_fail@plt+0x2515c>
   36cec:	ldr	r6, [sp, #8]
   36cf0:	str	r4, [r5]
   36cf4:	ldrd	r4, [sp]
   36cf8:	add	sp, sp, #12
   36cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   36d00:	cmp	r4, #0
   36d04:	beq	36cec <__assert_fail@plt+0x25148>
   36d08:	bl	37090 <__assert_fail@plt+0x254ec>
   36d0c:	cmp	r4, #0
   36d10:	mov	r2, #1
   36d14:	moveq	r4, #64	; 0x40
   36d18:	mov	r1, r4
   36d1c:	bl	39f8c <__assert_fail@plt+0x283e8>
   36d20:	cmp	r0, #0
   36d24:	bne	36cec <__assert_fail@plt+0x25148>
   36d28:	b	36d08 <__assert_fail@plt+0x25164>
   36d2c:	cmp	r0, #0
   36d30:	strd	r4, [sp, #-16]!
   36d34:	mov	r5, r1
   36d38:	ldr	r4, [r1]
   36d3c:	str	r6, [sp, #8]
   36d40:	mov	r6, r2
   36d44:	str	lr, [sp, #12]
   36d48:	beq	36d90 <__assert_fail@plt+0x251ec>
   36d4c:	lsr	r3, r4, #1
   36d50:	add	r3, r3, #1
   36d54:	adds	r4, r4, r3
   36d58:	bcs	36d8c <__assert_fail@plt+0x251e8>
   36d5c:	mov	r1, r4
   36d60:	bl	39f8c <__assert_fail@plt+0x283e8>
   36d64:	cmp	r0, #0
   36d68:	beq	36d80 <__assert_fail@plt+0x251dc>
   36d6c:	ldr	r6, [sp, #8]
   36d70:	str	r4, [r5]
   36d74:	ldrd	r4, [sp]
   36d78:	add	sp, sp, #12
   36d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   36d80:	cmp	r4, #0
   36d84:	cmpne	r6, #0
   36d88:	beq	36d6c <__assert_fail@plt+0x251c8>
   36d8c:	bl	37090 <__assert_fail@plt+0x254ec>
   36d90:	cmp	r4, #0
   36d94:	bne	36da8 <__assert_fail@plt+0x25204>
   36d98:	mov	r4, #64	; 0x40
   36d9c:	udiv	r4, r4, r2
   36da0:	cmp	r2, #64	; 0x40
   36da4:	addhi	r4, r4, #1
   36da8:	mov	r2, r6
   36dac:	mov	r1, r4
   36db0:	mov	r0, #0
   36db4:	bl	39f8c <__assert_fail@plt+0x283e8>
   36db8:	cmp	r0, #0
   36dbc:	bne	36d6c <__assert_fail@plt+0x251c8>
   36dc0:	b	36d8c <__assert_fail@plt+0x251e8>
   36dc4:	ldr	ip, [r1]
   36dc8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36dcc:	strd	r6, [sp, #8]
   36dd0:	mov	r7, r1
   36dd4:	mov	r6, r0
   36dd8:	str	r8, [sp, #16]
   36ddc:	mvn	r8, r3
   36de0:	lsr	r8, r8, #31
   36de4:	str	lr, [sp, #20]
   36de8:	asr	r1, ip, #1
   36dec:	ldr	lr, [sp, #24]
   36df0:	adds	r4, ip, r1
   36df4:	mvnvs	r4, #-2147483648	; 0x80000000
   36df8:	cmp	r3, r4
   36dfc:	movge	r1, #0
   36e00:	andlt	r1, r8, #1
   36e04:	cmp	r1, #0
   36e08:	movne	r4, r3
   36e0c:	smull	r0, r1, r4, lr
   36e10:	cmp	r1, r0, asr #31
   36e14:	bne	36ec4 <__assert_fail@plt+0x25320>
   36e18:	cmp	r0, #63	; 0x3f
   36e1c:	mov	r5, r0
   36e20:	ble	36e90 <__assert_fail@plt+0x252ec>
   36e24:	cmp	r6, #0
   36e28:	sub	r1, r4, ip
   36e2c:	streq	r6, [r7]
   36e30:	cmp	r1, r2
   36e34:	bge	36e64 <__assert_fail@plt+0x252c0>
   36e38:	adds	r4, ip, r2
   36e3c:	bvs	36ec0 <__assert_fail@plt+0x2531c>
   36e40:	cmp	r4, r3
   36e44:	movle	r3, #0
   36e48:	andgt	r3, r8, #1
   36e4c:	cmp	r3, #0
   36e50:	bne	36ec0 <__assert_fail@plt+0x2531c>
   36e54:	smull	r0, r1, r4, lr
   36e58:	cmp	r1, r0, asr #31
   36e5c:	mov	r5, r0
   36e60:	bne	36ec0 <__assert_fail@plt+0x2531c>
   36e64:	mov	r1, r5
   36e68:	mov	r0, r6
   36e6c:	bl	39064 <__assert_fail@plt+0x274c0>
   36e70:	cmp	r0, #0
   36e74:	beq	36ea4 <__assert_fail@plt+0x25300>
   36e78:	ldr	r8, [sp, #16]
   36e7c:	str	r4, [r7]
   36e80:	ldrd	r4, [sp]
   36e84:	ldrd	r6, [sp, #8]
   36e88:	add	sp, sp, #20
   36e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   36e90:	mov	r0, #64	; 0x40
   36e94:	sdiv	r4, r0, lr
   36e98:	mls	r5, lr, r4, r0
   36e9c:	sub	r5, r0, r5
   36ea0:	b	36e24 <__assert_fail@plt+0x25280>
   36ea4:	adds	r5, r5, #0
   36ea8:	movne	r5, #1
   36eac:	cmp	r6, #0
   36eb0:	movne	r6, r5
   36eb4:	moveq	r6, #1
   36eb8:	cmp	r6, #0
   36ebc:	beq	36e78 <__assert_fail@plt+0x252d4>
   36ec0:	bl	37090 <__assert_fail@plt+0x254ec>
   36ec4:	mvn	r0, #-2147483648	; 0x80000000
   36ec8:	b	36e94 <__assert_fail@plt+0x252f0>
   36ecc:	mov	r1, #1
   36ed0:	str	r4, [sp, #-8]!
   36ed4:	str	lr, [sp, #4]
   36ed8:	bl	38fb4 <__assert_fail@plt+0x27410>
   36edc:	cmp	r0, #0
   36ee0:	beq	36ef0 <__assert_fail@plt+0x2534c>
   36ee4:	ldr	r4, [sp]
   36ee8:	add	sp, sp, #4
   36eec:	pop	{pc}		; (ldr pc, [sp], #4)
   36ef0:	bl	37090 <__assert_fail@plt+0x254ec>
   36ef4:	mov	r1, #1
   36ef8:	str	r4, [sp, #-8]!
   36efc:	str	lr, [sp, #4]
   36f00:	bl	38fb4 <__assert_fail@plt+0x27410>
   36f04:	cmp	r0, #0
   36f08:	beq	36f18 <__assert_fail@plt+0x25374>
   36f0c:	ldr	r4, [sp]
   36f10:	add	sp, sp, #4
   36f14:	pop	{pc}		; (ldr pc, [sp], #4)
   36f18:	bl	37090 <__assert_fail@plt+0x254ec>
   36f1c:	str	r4, [sp, #-8]!
   36f20:	str	lr, [sp, #4]
   36f24:	bl	38fb4 <__assert_fail@plt+0x27410>
   36f28:	cmp	r0, #0
   36f2c:	beq	36f3c <__assert_fail@plt+0x25398>
   36f30:	ldr	r4, [sp]
   36f34:	add	sp, sp, #4
   36f38:	pop	{pc}		; (ldr pc, [sp], #4)
   36f3c:	bl	37090 <__assert_fail@plt+0x254ec>
   36f40:	str	r4, [sp, #-8]!
   36f44:	str	lr, [sp, #4]
   36f48:	bl	38fb4 <__assert_fail@plt+0x27410>
   36f4c:	cmp	r0, #0
   36f50:	beq	36f60 <__assert_fail@plt+0x253bc>
   36f54:	ldr	r4, [sp]
   36f58:	add	sp, sp, #4
   36f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   36f60:	bl	37090 <__assert_fail@plt+0x254ec>
   36f64:	strd	r4, [sp, #-16]!
   36f68:	mov	r4, r1
   36f6c:	str	r6, [sp, #8]
   36f70:	mov	r6, r0
   36f74:	mov	r0, r1
   36f78:	str	lr, [sp, #12]
   36f7c:	bl	39028 <__assert_fail@plt+0x27484>
   36f80:	subs	r5, r0, #0
   36f84:	beq	36fa8 <__assert_fail@plt+0x25404>
   36f88:	mov	r2, r4
   36f8c:	mov	r1, r6
   36f90:	bl	11784 <memcpy@plt>
   36f94:	mov	r0, r5
   36f98:	ldrd	r4, [sp]
   36f9c:	ldr	r6, [sp, #8]
   36fa0:	add	sp, sp, #12
   36fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   36fa8:	bl	37090 <__assert_fail@plt+0x254ec>
   36fac:	strd	r4, [sp, #-16]!
   36fb0:	mov	r4, r1
   36fb4:	str	r6, [sp, #8]
   36fb8:	mov	r6, r0
   36fbc:	mov	r0, r1
   36fc0:	str	lr, [sp, #12]
   36fc4:	bl	39028 <__assert_fail@plt+0x27484>
   36fc8:	subs	r5, r0, #0
   36fcc:	beq	36ff0 <__assert_fail@plt+0x2544c>
   36fd0:	mov	r2, r4
   36fd4:	mov	r1, r6
   36fd8:	bl	11784 <memcpy@plt>
   36fdc:	mov	r0, r5
   36fe0:	ldrd	r4, [sp]
   36fe4:	ldr	r6, [sp, #8]
   36fe8:	add	sp, sp, #12
   36fec:	pop	{pc}		; (ldr pc, [sp], #4)
   36ff0:	bl	37090 <__assert_fail@plt+0x254ec>
   36ff4:	strd	r4, [sp, #-16]!
   36ff8:	mov	r4, r1
   36ffc:	str	r6, [sp, #8]
   37000:	mov	r6, r0
   37004:	add	r0, r1, #1
   37008:	str	lr, [sp, #12]
   3700c:	bl	39028 <__assert_fail@plt+0x27484>
   37010:	subs	r5, r0, #0
   37014:	beq	37040 <__assert_fail@plt+0x2549c>
   37018:	mov	r3, #0
   3701c:	mov	r1, r6
   37020:	mov	r2, r4
   37024:	strb	r3, [r5, r4]
   37028:	bl	11784 <memcpy@plt>
   3702c:	mov	r0, r5
   37030:	ldrd	r4, [sp]
   37034:	ldr	r6, [sp, #8]
   37038:	add	sp, sp, #12
   3703c:	pop	{pc}		; (ldr pc, [sp], #4)
   37040:	bl	37090 <__assert_fail@plt+0x254ec>
   37044:	strd	r4, [sp, #-16]!
   37048:	str	r6, [sp, #8]
   3704c:	mov	r6, r0
   37050:	str	lr, [sp, #12]
   37054:	bl	11988 <strlen@plt>
   37058:	add	r4, r0, #1
   3705c:	mov	r0, r4
   37060:	bl	39028 <__assert_fail@plt+0x27484>
   37064:	subs	r5, r0, #0
   37068:	beq	3708c <__assert_fail@plt+0x254e8>
   3706c:	mov	r2, r4
   37070:	mov	r1, r6
   37074:	bl	11784 <memcpy@plt>
   37078:	mov	r0, r5
   3707c:	ldrd	r4, [sp]
   37080:	ldr	r6, [sp, #8]
   37084:	add	sp, sp, #12
   37088:	pop	{pc}		; (ldr pc, [sp], #4)
   3708c:	bl	37090 <__assert_fail@plt+0x254ec>
   37090:	movw	r3, #53720	; 0xd1d8
   37094:	movt	r3, #4
   37098:	str	r4, [sp, #-8]!
   3709c:	ldr	r4, [r3]
   370a0:	mov	r2, #5
   370a4:	movw	r1, #51552	; 0xc960
   370a8:	movt	r1, #3
   370ac:	mov	r0, #0
   370b0:	str	lr, [sp, #4]
   370b4:	bl	117d8 <dcgettext@plt>
   370b8:	mov	r3, r0
   370bc:	movw	r2, #49108	; 0xbfd4
   370c0:	movt	r2, #3
   370c4:	mov	r1, #0
   370c8:	mov	r0, r4
   370cc:	bl	118bc <error@plt>
   370d0:	bl	11b68 <abort@plt>
   370d4:	orr	r1, r1, #512	; 0x200
   370d8:	str	r4, [sp, #-8]!
   370dc:	str	lr, [sp, #4]
   370e0:	bl	1ae30 <__assert_fail@plt+0x928c>
   370e4:	cmp	r0, #0
   370e8:	beq	370f8 <__assert_fail@plt+0x25554>
   370ec:	ldr	r4, [sp]
   370f0:	add	sp, sp, #4
   370f4:	pop	{pc}		; (ldr pc, [sp], #4)
   370f8:	bl	119b8 <__errno_location@plt>
   370fc:	ldr	r3, [r0]
   37100:	cmp	r3, #22
   37104:	beq	3710c <__assert_fail@plt+0x25568>
   37108:	bl	37090 <__assert_fail@plt+0x254ec>
   3710c:	movw	r3, #51572	; 0xc974
   37110:	movt	r3, #3
   37114:	movw	r1, #51584	; 0xc980
   37118:	movt	r1, #3
   3711c:	movw	r0, #51596	; 0xc98c
   37120:	movt	r0, #3
   37124:	mov	r2, #41	; 0x29
   37128:	bl	11ba4 <__assert_fail@plt>
   3712c:	ldr	r3, [r0, #48]	; 0x30
   37130:	and	r3, r3, #17
   37134:	cmp	r3, #16
   37138:	beq	3715c <__assert_fail@plt+0x255b8>
   3713c:	cmp	r3, #17
   37140:	beq	3714c <__assert_fail@plt+0x255a8>
   37144:	mov	r0, #0
   37148:	bx	lr
   3714c:	ldr	r0, [r1, #48]	; 0x30
   37150:	adds	r0, r0, #0
   37154:	movne	r0, #1
   37158:	bx	lr
   3715c:	mov	r0, #1
   37160:	bx	lr
   37164:	cmp	r2, #36	; 0x24
   37168:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3716c:	strd	r6, [sp, #8]
   37170:	strd	r8, [sp, #16]
   37174:	strd	sl, [sp, #24]
   37178:	str	lr, [sp, #32]
   3717c:	sub	sp, sp, #36	; 0x24
   37180:	bhi	37f5c <__assert_fail@plt+0x263b8>
   37184:	cmp	r1, #0
   37188:	mov	r5, r1
   3718c:	mov	r6, r2
   37190:	addeq	r5, sp, #28
   37194:	mov	sl, r0
   37198:	mov	r9, r3
   3719c:	bl	119b8 <__errno_location@plt>
   371a0:	mov	fp, r0
   371a4:	mov	r4, #0
   371a8:	mov	r2, r6
   371ac:	mov	r3, r4
   371b0:	mov	r1, r5
   371b4:	mov	r0, sl
   371b8:	str	r4, [fp]
   371bc:	bl	11af0 <__strtoll_internal@plt>
   371c0:	ldr	r8, [r5]
   371c4:	mov	r6, r0
   371c8:	mov	r7, r1
   371cc:	cmp	r8, sl
   371d0:	beq	37228 <__assert_fail@plt+0x25684>
   371d4:	ldr	r4, [fp]
   371d8:	cmp	r4, #0
   371dc:	beq	371ec <__assert_fail@plt+0x25648>
   371e0:	cmp	r4, #34	; 0x22
   371e4:	bne	3732c <__assert_fail@plt+0x25788>
   371e8:	mov	r4, #1
   371ec:	ldr	r3, [sp, #72]	; 0x48
   371f0:	cmp	r3, #0
   371f4:	beq	37204 <__assert_fail@plt+0x25660>
   371f8:	ldrb	sl, [r8]
   371fc:	cmp	sl, #0
   37200:	bne	37430 <__assert_fail@plt+0x2588c>
   37204:	strd	r6, [r9]
   37208:	mov	r0, r4
   3720c:	add	sp, sp, #36	; 0x24
   37210:	ldrd	r4, [sp]
   37214:	ldrd	r6, [sp, #8]
   37218:	ldrd	r8, [sp, #16]
   3721c:	ldrd	sl, [sp, #24]
   37220:	add	sp, sp, #32
   37224:	pop	{pc}		; (ldr pc, [sp], #4)
   37228:	ldr	r3, [sp, #72]	; 0x48
   3722c:	cmp	r3, r4
   37230:	beq	3732c <__assert_fail@plt+0x25788>
   37234:	ldrb	sl, [sl]
   37238:	cmp	sl, r4
   3723c:	beq	3732c <__assert_fail@plt+0x25788>
   37240:	mov	r1, sl
   37244:	mov	r0, r3
   37248:	bl	11994 <strchr@plt>
   3724c:	cmp	r0, r4
   37250:	movne	r6, #1
   37254:	movne	r7, #0
   37258:	beq	3732c <__assert_fail@plt+0x25788>
   3725c:	sub	fp, sl, #69	; 0x45
   37260:	cmp	fp, #47	; 0x2f
   37264:	ldrls	pc, [pc, fp, lsl #2]
   37268:	b	3744c <__assert_fail@plt+0x258a8>
   3726c:	andeq	r7, r3, r4, lsr r3
   37270:	andeq	r7, r3, ip, asr #8
   37274:	andeq	r7, r3, r4, lsr r3
   37278:	andeq	r7, r3, ip, asr #8
   3727c:	andeq	r7, r3, ip, asr #8
   37280:	andeq	r7, r3, ip, asr #8
   37284:	andeq	r7, r3, r4, lsr r3
   37288:	andeq	r7, r3, ip, asr #8
   3728c:	andeq	r7, r3, r4, lsr r3
   37290:	andeq	r7, r3, ip, asr #8
   37294:	andeq	r7, r3, ip, asr #8
   37298:	andeq	r7, r3, r4, lsr r3
   3729c:	andeq	r7, r3, ip, asr #8
   372a0:	andeq	r7, r3, ip, asr #8
   372a4:	andeq	r7, r3, ip, asr #8
   372a8:	andeq	r7, r3, r4, lsr r3
   372ac:	andeq	r7, r3, ip, asr #8
   372b0:	andeq	r7, r3, ip, asr #8
   372b4:	andeq	r7, r3, ip, asr #8
   372b8:	andeq	r7, r3, ip, asr #8
   372bc:	andeq	r7, r3, r4, lsr r3
   372c0:	andeq	r7, r3, r4, lsr r3
   372c4:	andeq	r7, r3, ip, asr #8
   372c8:	andeq	r7, r3, ip, asr #8
   372cc:	andeq	r7, r3, ip, asr #8
   372d0:	andeq	r7, r3, ip, asr #8
   372d4:	andeq	r7, r3, ip, asr #8
   372d8:	andeq	r7, r3, ip, asr #8
   372dc:	andeq	r7, r3, ip, asr #8
   372e0:	andeq	r7, r3, ip, asr #8
   372e4:	andeq	r7, r3, ip, asr #8
   372e8:	andeq	r7, r3, ip, asr #8
   372ec:	andeq	r7, r3, ip, asr #8
   372f0:	andeq	r7, r3, ip, asr #8
   372f4:	andeq	r7, r3, r4, lsr r3
   372f8:	andeq	r7, r3, ip, asr #8
   372fc:	andeq	r7, r3, ip, asr #8
   37300:	andeq	r7, r3, ip, asr #8
   37304:	andeq	r7, r3, r4, lsr r3
   37308:	andeq	r7, r3, ip, asr #8
   3730c:	andeq	r7, r3, r4, lsr r3
   37310:	andeq	r7, r3, ip, asr #8
   37314:	andeq	r7, r3, ip, asr #8
   37318:	andeq	r7, r3, ip, asr #8
   3731c:	andeq	r7, r3, ip, asr #8
   37320:	andeq	r7, r3, ip, asr #8
   37324:	andeq	r7, r3, ip, asr #8
   37328:	andeq	r7, r3, r4, lsr r3
   3732c:	mov	r4, #4
   37330:	b	37208 <__assert_fail@plt+0x25664>
   37334:	mov	r1, #48	; 0x30
   37338:	ldr	r0, [sp, #72]	; 0x48
   3733c:	bl	11994 <strchr@plt>
   37340:	cmp	r0, #0
   37344:	beq	3744c <__assert_fail@plt+0x258a8>
   37348:	ldrb	r3, [r8, #1]
   3734c:	cmp	r3, #68	; 0x44
   37350:	beq	37b34 <__assert_fail@plt+0x25f90>
   37354:	cmp	r3, #105	; 0x69
   37358:	beq	37b7c <__assert_fail@plt+0x25fd8>
   3735c:	cmp	r3, #66	; 0x42
   37360:	beq	37b34 <__assert_fail@plt+0x25f90>
   37364:	cmp	fp, #47	; 0x2f
   37368:	ldrls	pc, [pc, fp, lsl #2]
   3736c:	b	37444 <__assert_fail@plt+0x258a0>
   37370:	andeq	r7, r3, r4, asr sl
   37374:	andeq	r7, r3, r4, asr #8
   37378:	muleq	r3, r8, r8
   3737c:	andeq	r7, r3, r4, asr #8
   37380:	andeq	r7, r3, r4, asr #8
   37384:	andeq	r7, r3, r4, asr #8
   37388:	andeq	r7, r3, r8, ror #12
   3738c:	andeq	r7, r3, r4, asr #8
   37390:	strdeq	r7, [r3], -r4
   37394:	andeq	r7, r3, r4, asr #8
   37398:	andeq	r7, r3, r4, asr #8
   3739c:	strdeq	r7, [r3], -r8
   373a0:	andeq	r7, r3, r4, asr #8
   373a4:	andeq	r7, r3, r4, asr #8
   373a8:	andeq	r7, r3, r4, asr #8
   373ac:	andeq	r7, r3, r8, lsr r9
   373b0:	andeq	r7, r3, r4, asr #8
   373b4:	andeq	r7, r3, r4, asr #8
   373b8:	andeq	r7, r3, r4, asr #8
   373bc:	andeq	r7, r3, r4, asr #8
   373c0:	andeq	r7, r3, r4, lsr r7
   373c4:	andeq	r7, r3, ip, lsr r5
   373c8:	andeq	r7, r3, r4, asr #8
   373cc:	andeq	r7, r3, r4, asr #8
   373d0:	andeq	r7, r3, r4, asr #8
   373d4:	andeq	r7, r3, r4, asr #8
   373d8:	andeq	r7, r3, r4, asr #8
   373dc:	andeq	r7, r3, r4, asr #8
   373e0:	andeq	r7, r3, r4, asr #8
   373e4:	andeq	r7, r3, r4, lsl #14
   373e8:	strdeq	r7, [r3], -r4
   373ec:	andeq	r7, r3, r4, asr #8
   373f0:	andeq	r7, r3, r4, asr #8
   373f4:	andeq	r7, r3, r4, asr #8
   373f8:	muleq	r3, r8, r8
   373fc:	andeq	r7, r3, r4, asr #8
   37400:	andeq	r7, r3, r4, asr #8
   37404:	andeq	r7, r3, r4, asr #8
   37408:	andeq	r7, r3, r8, ror #12
   3740c:	andeq	r7, r3, r4, asr #8
   37410:	strdeq	r7, [r3], -r4
   37414:	andeq	r7, r3, r4, asr #8
   37418:	andeq	r7, r3, r4, asr #8
   3741c:	andeq	r7, r3, r4, asr #8
   37420:	andeq	r7, r3, r4, asr #8
   37424:	andeq	r7, r3, r4, asr #8
   37428:	andeq	r7, r3, r4, asr #8
   3742c:	andeq	r7, r3, r8, lsr r9
   37430:	mov	r0, r3
   37434:	mov	r1, sl
   37438:	bl	11994 <strchr@plt>
   3743c:	cmp	r0, #0
   37440:	bne	3725c <__assert_fail@plt+0x256b8>
   37444:	orr	r4, r4, #2
   37448:	b	37204 <__assert_fail@plt+0x25660>
   3744c:	mov	fp, #1
   37450:	mov	lr, #1024	; 0x400
   37454:	sub	sl, sl, #66	; 0x42
   37458:	cmp	sl, #53	; 0x35
   3745c:	ldrls	pc, [pc, sl, lsl #2]
   37460:	b	37444 <__assert_fail@plt+0x258a0>
   37464:	ldrdeq	r7, [r3], -r8
   37468:	andeq	r7, r3, r4, asr #8
   3746c:	andeq	r7, r3, r4, asr #8
   37470:	andeq	r7, r3, ip, asr sl
   37474:	andeq	r7, r3, r4, asr #8
   37478:	andeq	r7, r3, r0, lsr #17
   3747c:	andeq	r7, r3, r4, asr #8
   37480:	andeq	r7, r3, r4, asr #8
   37484:	andeq	r7, r3, r4, asr #8
   37488:	andeq	r7, r3, r0, ror r6
   3748c:	andeq	r7, r3, r4, asr #8
   37490:	strdeq	r7, [r3], -ip
   37494:	andeq	r7, r3, r4, asr #8
   37498:	andeq	r7, r3, r4, asr #8
   3749c:	andeq	r7, r3, r0, lsl #16
   374a0:	andeq	r7, r3, r4, asr #8
   374a4:	andeq	r7, r3, r4, asr #8
   374a8:	andeq	r7, r3, r4, asr #8
   374ac:	andeq	r7, r3, r0, asr #18
   374b0:	andeq	r7, r3, r4, asr #8
   374b4:	andeq	r7, r3, r4, asr #8
   374b8:	andeq	r7, r3, r4, asr #8
   374bc:	andeq	r7, r3, r4, asr #8
   374c0:	andeq	r7, r3, ip, lsr r7
   374c4:	andeq	r7, r3, r4, asr #10
   374c8:	andeq	r7, r3, r4, asr #8
   374cc:	andeq	r7, r3, r4, asr #8
   374d0:	andeq	r7, r3, r4, asr #8
   374d4:	andeq	r7, r3, r4, asr #8
   374d8:	andeq	r7, r3, r4, asr #8
   374dc:	andeq	r7, r3, r4, asr #8
   374e0:	andeq	r7, r3, r4, asr #8
   374e4:	andeq	r7, r3, r8, lsl #14
   374e8:	andeq	r7, r3, r0, asr r6
   374ec:	andeq	r7, r3, r4, asr #8
   374f0:	andeq	r7, r3, r4, asr #8
   374f4:	andeq	r7, r3, r4, asr #8
   374f8:	andeq	r7, r3, r0, lsr #17
   374fc:	andeq	r7, r3, r4, asr #8
   37500:	andeq	r7, r3, r4, asr #8
   37504:	andeq	r7, r3, r4, asr #8
   37508:	andeq	r7, r3, r0, ror r6
   3750c:	andeq	r7, r3, r4, asr #8
   37510:	strdeq	r7, [r3], -ip
   37514:	andeq	r7, r3, r4, asr #8
   37518:	andeq	r7, r3, r4, asr #8
   3751c:	andeq	r7, r3, r4, asr #8
   37520:	andeq	r7, r3, r4, asr #8
   37524:	andeq	r7, r3, r4, asr #8
   37528:	andeq	r7, r3, r4, asr #8
   3752c:	andeq	r7, r3, r0, asr #18
   37530:	andeq	r7, r3, r4, asr #8
   37534:	andeq	r7, r3, r4, asr #8
   37538:	ldrdeq	r7, [r3], -ip
   3753c:	mov	fp, #1
   37540:	mov	lr, #1024	; 0x400
   37544:	asr	r3, lr, #31
   37548:	mov	r2, lr
   3754c:	mov	r1, #0
   37550:	cmp	r7, r6, asr #31
   37554:	strd	r2, [sp]
   37558:	bne	37c68 <__assert_fail@plt+0x260c4>
   3755c:	smull	r2, r3, r6, lr
   37560:	mov	ip, r2
   37564:	cmp	r1, #0
   37568:	bne	37afc <__assert_fail@plt+0x25f58>
   3756c:	mov	r6, ip
   37570:	mov	r7, r3
   37574:	cmp	r3, r6, asr #31
   37578:	mov	ip, r1
   3757c:	bne	3779c <__assert_fail@plt+0x25bf8>
   37580:	smull	r2, r3, r6, lr
   37584:	mov	sl, r2
   37588:	subs	r1, ip, #0
   3758c:	bne	37afc <__assert_fail@plt+0x25f58>
   37590:	cmp	r3, sl, asr #31
   37594:	mov	r6, sl
   37598:	mov	ip, r1
   3759c:	mov	r7, r3
   375a0:	bne	37a98 <__assert_fail@plt+0x25ef4>
   375a4:	smull	r2, r3, r6, lr
   375a8:	mov	sl, r2
   375ac:	subs	r1, ip, #0
   375b0:	bne	37afc <__assert_fail@plt+0x25f58>
   375b4:	cmp	r3, sl, asr #31
   375b8:	mov	r6, sl
   375bc:	mov	ip, r1
   375c0:	mov	r7, r3
   375c4:	bne	3783c <__assert_fail@plt+0x25c98>
   375c8:	smull	r2, r3, r6, lr
   375cc:	mov	sl, r2
   375d0:	subs	r1, ip, #0
   375d4:	bne	37afc <__assert_fail@plt+0x25f58>
   375d8:	cmp	r3, sl, asr #31
   375dc:	mov	r6, sl
   375e0:	mov	ip, r1
   375e4:	mov	r7, r3
   375e8:	bne	3797c <__assert_fail@plt+0x25dd8>
   375ec:	smull	r2, r3, r6, lr
   375f0:	mov	sl, r2
   375f4:	subs	r1, ip, #0
   375f8:	bne	37afc <__assert_fail@plt+0x25f58>
   375fc:	cmp	r3, sl, asr #31
   37600:	mov	r6, sl
   37604:	mov	ip, r1
   37608:	mov	r7, r3
   3760c:	bne	378dc <__assert_fail@plt+0x25d38>
   37610:	smull	r2, r3, r6, lr
   37614:	mov	sl, r2
   37618:	cmp	ip, #0
   3761c:	bne	37afc <__assert_fail@plt+0x25f58>
   37620:	cmp	r3, sl, asr #31
   37624:	mov	r0, sl
   37628:	mov	r1, r3
   3762c:	bne	37b94 <__assert_fail@plt+0x25ff0>
   37630:	smull	r2, r3, sl, lr
   37634:	mov	lr, r2
   37638:	mov	r2, r3
   3763c:	cmp	ip, #0
   37640:	moveq	r6, lr
   37644:	moveq	r7, r2
   37648:	bne	37b18 <__assert_fail@plt+0x25f74>
   3764c:	orr	r4, r4, ip
   37650:	add	r3, r8, fp
   37654:	str	r3, [r5]
   37658:	ldrb	r3, [r8, fp]
   3765c:	cmp	r3, #0
   37660:	beq	37204 <__assert_fail@plt+0x25660>
   37664:	b	37444 <__assert_fail@plt+0x258a0>
   37668:	mov	fp, #1
   3766c:	mov	lr, #1024	; 0x400
   37670:	cmp	r7, r6, asr #31
   37674:	mov	r0, lr
   37678:	mov	ip, #0
   3767c:	asr	r1, lr, #31
   37680:	bne	37b40 <__assert_fail@plt+0x25f9c>
   37684:	smull	r2, r3, r6, lr
   37688:	mov	r1, r2
   3768c:	mov	lr, r3
   37690:	cmp	ip, #0
   37694:	bne	376a4 <__assert_fail@plt+0x25b00>
   37698:	mov	r6, r1
   3769c:	mov	r7, lr
   376a0:	b	37650 <__assert_fail@plt+0x25aac>
   376a4:	cmp	r6, #0
   376a8:	mov	r4, #1
   376ac:	sbcs	r3, r7, #0
   376b0:	blt	376d0 <__assert_fail@plt+0x25b2c>
   376b4:	mvn	r6, #0
   376b8:	mvn	r7, #-2147483648	; 0x80000000
   376bc:	b	37650 <__assert_fail@plt+0x25aac>
   376c0:	cmp	r0, #0
   376c4:	mov	r4, #1
   376c8:	sbcs	r3, r1, #0
   376cc:	bge	376b4 <__assert_fail@plt+0x25b10>
   376d0:	mov	r6, #0
   376d4:	mov	r7, #-2147483648	; 0x80000000
   376d8:	b	37650 <__assert_fail@plt+0x25aac>
   376dc:	cmp	r7, r6, asr #31
   376e0:	mov	r1, #0
   376e4:	bne	37e00 <__assert_fail@plt+0x2625c>
   376e8:	adds	ip, r6, r6
   376ec:	adc	r3, r7, r7
   376f0:	cmp	r1, #0
   376f4:	bne	376a4 <__assert_fail@plt+0x25b00>
   376f8:	mov	r6, ip
   376fc:	mov	r7, r3
   37700:	b	37650 <__assert_fail@plt+0x25aac>
   37704:	mov	fp, #1
   37708:	cmp	r7, r6, asr #31
   3770c:	mov	ip, #0
   37710:	bne	37e58 <__assert_fail@plt+0x262b4>
   37714:	lsl	r3, r7, #9
   37718:	lsl	r2, r6, #9
   3771c:	orr	r3, r3, r6, lsr #23
   37720:	cmp	ip, #0
   37724:	bne	376a4 <__assert_fail@plt+0x25b00>
   37728:	mov	r6, r2
   3772c:	mov	r7, r3
   37730:	b	37650 <__assert_fail@plt+0x25aac>
   37734:	mov	fp, #1
   37738:	mov	lr, #1024	; 0x400
   3773c:	asr	r3, lr, #31
   37740:	mov	r2, lr
   37744:	mov	r1, #0
   37748:	cmp	r7, r6, asr #31
   3774c:	strd	r2, [sp]
   37750:	bne	37ce8 <__assert_fail@plt+0x26144>
   37754:	smull	r2, r3, r6, lr
   37758:	mov	ip, r2
   3775c:	cmp	r1, #0
   37760:	bne	37afc <__assert_fail@plt+0x25f58>
   37764:	mov	r6, ip
   37768:	mov	r7, r3
   3776c:	cmp	r3, r6, asr #31
   37770:	mov	ip, r1
   37774:	bne	37eac <__assert_fail@plt+0x26308>
   37778:	smull	r2, r3, r6, lr
   3777c:	mov	sl, r2
   37780:	subs	r1, ip, #0
   37784:	bne	37afc <__assert_fail@plt+0x25f58>
   37788:	cmp	r3, sl, asr #31
   3778c:	mov	r6, sl
   37790:	mov	ip, r1
   37794:	mov	r7, r3
   37798:	beq	37580 <__assert_fail@plt+0x259dc>
   3779c:	umull	r0, r1, r6, lr
   377a0:	cmp	r3, #0
   377a4:	umull	r2, r3, lr, r3
   377a8:	strd	r0, [sp, #16]
   377ac:	mov	r0, r2
   377b0:	mov	r1, r3
   377b4:	strd	r0, [sp, #8]
   377b8:	bge	377d0 <__assert_fail@plt+0x25c2c>
   377bc:	subs	r3, r0, ip
   377c0:	str	r3, [sp, #8]
   377c4:	ldr	r3, [sp, #12]
   377c8:	sbc	r3, r3, lr
   377cc:	str	r3, [sp, #12]
   377d0:	ldr	r1, [sp, #8]
   377d4:	mov	r2, #0
   377d8:	ldr	r3, [sp, #20]
   377dc:	adds	r3, r1, r3
   377e0:	ldr	r1, [sp, #12]
   377e4:	adc	r2, r1, r2
   377e8:	cmp	r2, r3, asr #31
   377ec:	bne	38100 <__assert_fail@plt+0x2655c>
   377f0:	ldr	sl, [sp, #16]
   377f4:	b	37588 <__assert_fail@plt+0x259e4>
   377f8:	mov	fp, #1
   377fc:	mov	lr, #1024	; 0x400
   37800:	asr	r3, lr, #31
   37804:	mov	r2, lr
   37808:	mov	r1, #0
   3780c:	cmp	r7, r6, asr #31
   37810:	strd	r2, [sp]
   37814:	bne	37c28 <__assert_fail@plt+0x26084>
   37818:	smull	r2, r3, r6, lr
   3781c:	mov	ip, r2
   37820:	cmp	r1, #0
   37824:	bne	37afc <__assert_fail@plt+0x25f58>
   37828:	mov	r6, ip
   3782c:	mov	r7, r3
   37830:	cmp	r3, r6, asr #31
   37834:	mov	ip, r1
   37838:	beq	375c8 <__assert_fail@plt+0x25a24>
   3783c:	umull	r0, r1, r6, lr
   37840:	cmp	r3, #0
   37844:	umull	r2, r3, lr, r3
   37848:	strd	r0, [sp, #16]
   3784c:	mov	r0, r2
   37850:	mov	r1, r3
   37854:	strd	r0, [sp, #8]
   37858:	bge	37870 <__assert_fail@plt+0x25ccc>
   3785c:	subs	r3, r0, ip
   37860:	str	r3, [sp, #8]
   37864:	ldr	r3, [sp, #12]
   37868:	sbc	r3, r3, lr
   3786c:	str	r3, [sp, #12]
   37870:	ldr	r1, [sp, #8]
   37874:	mov	r2, #0
   37878:	ldr	r3, [sp, #20]
   3787c:	adds	r3, r1, r3
   37880:	ldr	r1, [sp, #12]
   37884:	adc	r2, r1, r2
   37888:	cmp	r2, r3, asr #31
   3788c:	bne	38030 <__assert_fail@plt+0x2648c>
   37890:	ldr	sl, [sp, #16]
   37894:	b	375d0 <__assert_fail@plt+0x25a2c>
   37898:	mov	fp, #1
   3789c:	mov	lr, #1024	; 0x400
   378a0:	asr	r3, lr, #31
   378a4:	mov	r2, lr
   378a8:	mov	r1, #0
   378ac:	cmp	r7, r6, asr #31
   378b0:	strd	r2, [sp]
   378b4:	bne	37be8 <__assert_fail@plt+0x26044>
   378b8:	smull	r2, r3, r6, lr
   378bc:	mov	ip, r2
   378c0:	cmp	r1, #0
   378c4:	bne	37afc <__assert_fail@plt+0x25f58>
   378c8:	mov	r6, ip
   378cc:	mov	r7, r3
   378d0:	cmp	r3, r6, asr #31
   378d4:	mov	ip, r1
   378d8:	beq	37610 <__assert_fail@plt+0x25a6c>
   378dc:	umull	r0, r1, r6, lr
   378e0:	cmp	r3, #0
   378e4:	umull	r2, r3, lr, r3
   378e8:	strd	r0, [sp, #16]
   378ec:	mov	r0, r2
   378f0:	mov	r1, r3
   378f4:	strd	r0, [sp, #8]
   378f8:	bge	37910 <__assert_fail@plt+0x25d6c>
   378fc:	subs	r3, r0, ip
   37900:	str	r3, [sp, #8]
   37904:	ldr	r3, [sp, #12]
   37908:	sbc	r3, r3, lr
   3790c:	str	r3, [sp, #12]
   37910:	ldr	r1, [sp, #8]
   37914:	mov	r2, #0
   37918:	ldr	r3, [sp, #20]
   3791c:	adds	r3, r1, r3
   37920:	ldr	r1, [sp, #12]
   37924:	adc	r2, r1, r2
   37928:	cmp	r2, r3, asr #31
   3792c:	bne	37fa0 <__assert_fail@plt+0x263fc>
   37930:	ldr	sl, [sp, #16]
   37934:	b	37618 <__assert_fail@plt+0x25a74>
   37938:	mov	fp, #1
   3793c:	mov	lr, #1024	; 0x400
   37940:	asr	r3, lr, #31
   37944:	mov	r2, lr
   37948:	mov	r1, #0
   3794c:	cmp	r7, r6, asr #31
   37950:	strd	r2, [sp]
   37954:	bne	37dc0 <__assert_fail@plt+0x2621c>
   37958:	smull	r2, r3, r6, lr
   3795c:	mov	ip, r2
   37960:	cmp	r1, #0
   37964:	bne	37afc <__assert_fail@plt+0x25f58>
   37968:	mov	r6, ip
   3796c:	mov	r7, r3
   37970:	cmp	r3, r6, asr #31
   37974:	mov	ip, r1
   37978:	beq	375ec <__assert_fail@plt+0x25a48>
   3797c:	umull	r0, r1, r6, lr
   37980:	cmp	r3, #0
   37984:	umull	r2, r3, lr, r3
   37988:	strd	r0, [sp, #16]
   3798c:	mov	r0, r2
   37990:	mov	r1, r3
   37994:	strd	r0, [sp, #8]
   37998:	bge	379b0 <__assert_fail@plt+0x25e0c>
   3799c:	subs	r3, r0, ip
   379a0:	str	r3, [sp, #8]
   379a4:	ldr	r3, [sp, #12]
   379a8:	sbc	r3, r3, lr
   379ac:	str	r3, [sp, #12]
   379b0:	ldr	r1, [sp, #8]
   379b4:	mov	r2, #0
   379b8:	ldr	r3, [sp, #20]
   379bc:	adds	r3, r1, r3
   379c0:	ldr	r1, [sp, #12]
   379c4:	adc	r2, r1, r2
   379c8:	cmp	r2, r3, asr #31
   379cc:	bne	37fe8 <__assert_fail@plt+0x26444>
   379d0:	ldr	sl, [sp, #16]
   379d4:	b	375f4 <__assert_fail@plt+0x25a50>
   379d8:	cmp	r7, r6, asr #31
   379dc:	mov	ip, #0
   379e0:	bne	37d68 <__assert_fail@plt+0x261c4>
   379e4:	lsl	r3, r7, #10
   379e8:	lsl	r2, r6, #10
   379ec:	orr	r3, r3, r6, lsr #22
   379f0:	b	37720 <__assert_fail@plt+0x25b7c>
   379f4:	mov	fp, #1
   379f8:	mov	lr, #1024	; 0x400
   379fc:	asr	r3, lr, #31
   37a00:	mov	r2, lr
   37a04:	mov	r1, #0
   37a08:	cmp	r7, r6, asr #31
   37a0c:	strd	r2, [sp]
   37a10:	bne	37d28 <__assert_fail@plt+0x26184>
   37a14:	smull	r2, r3, r6, lr
   37a18:	mov	sl, r2
   37a1c:	subs	ip, r1, #0
   37a20:	bne	376a4 <__assert_fail@plt+0x25b00>
   37a24:	cmp	r3, sl, asr #31
   37a28:	mov	r0, sl
   37a2c:	mov	r1, r3
   37a30:	bne	37f08 <__assert_fail@plt+0x26364>
   37a34:	smull	r2, r3, sl, lr
   37a38:	mov	lr, r2
   37a3c:	mov	r2, r3
   37a40:	cmp	ip, #0
   37a44:	bne	376c0 <__assert_fail@plt+0x25b1c>
   37a48:	mov	r6, lr
   37a4c:	mov	r7, r2
   37a50:	b	37650 <__assert_fail@plt+0x25aac>
   37a54:	mov	fp, #1
   37a58:	mov	lr, #1024	; 0x400
   37a5c:	asr	r3, lr, #31
   37a60:	mov	r2, lr
   37a64:	mov	r1, #0
   37a68:	cmp	r7, r6, asr #31
   37a6c:	strd	r2, [sp]
   37a70:	bne	37ca8 <__assert_fail@plt+0x26104>
   37a74:	smull	r2, r3, r6, lr
   37a78:	mov	ip, r2
   37a7c:	cmp	r1, #0
   37a80:	bne	37afc <__assert_fail@plt+0x25f58>
   37a84:	mov	r6, ip
   37a88:	mov	r7, r3
   37a8c:	cmp	r3, r6, asr #31
   37a90:	mov	ip, r1
   37a94:	beq	375a4 <__assert_fail@plt+0x25a00>
   37a98:	umull	r0, r1, r6, lr
   37a9c:	cmp	r3, #0
   37aa0:	umull	r2, r3, lr, r3
   37aa4:	strd	r0, [sp, #16]
   37aa8:	mov	r0, r2
   37aac:	mov	r1, r3
   37ab0:	strd	r0, [sp, #8]
   37ab4:	bge	37acc <__assert_fail@plt+0x25f28>
   37ab8:	subs	r3, r0, ip
   37abc:	str	r3, [sp, #8]
   37ac0:	ldr	r3, [sp, #12]
   37ac4:	sbc	r3, r3, lr
   37ac8:	str	r3, [sp, #12]
   37acc:	ldr	r1, [sp, #8]
   37ad0:	mov	r2, #0
   37ad4:	ldr	r3, [sp, #20]
   37ad8:	adds	r3, r1, r3
   37adc:	ldr	r1, [sp, #12]
   37ae0:	adc	r2, r1, r2
   37ae4:	cmp	r2, r3, asr #31
   37ae8:	bne	3800c <__assert_fail@plt+0x26468>
   37aec:	ldr	sl, [sp, #16]
   37af0:	b	375ac <__assert_fail@plt+0x25a08>
   37af4:	mov	fp, #1
   37af8:	b	37650 <__assert_fail@plt+0x25aac>
   37afc:	cmp	r6, #0
   37b00:	mov	ip, #1
   37b04:	sbcs	r3, r7, #0
   37b08:	blt	37b28 <__assert_fail@plt+0x25f84>
   37b0c:	mvn	r6, #0
   37b10:	mvn	r7, #-2147483648	; 0x80000000
   37b14:	b	3764c <__assert_fail@plt+0x25aa8>
   37b18:	cmp	r0, #0
   37b1c:	mov	ip, #1
   37b20:	sbcs	r3, r1, #0
   37b24:	bge	37b0c <__assert_fail@plt+0x25f68>
   37b28:	mov	r6, #0
   37b2c:	mov	r7, #-2147483648	; 0x80000000
   37b30:	b	3764c <__assert_fail@plt+0x25aa8>
   37b34:	mov	fp, #2
   37b38:	mov	lr, #1000	; 0x3e8
   37b3c:	b	37454 <__assert_fail@plt+0x258b0>
   37b40:	umull	r2, r3, r6, lr
   37b44:	cmp	r7, #0
   37b48:	strd	r2, [sp]
   37b4c:	umull	r2, r3, lr, r7
   37b50:	bge	37b5c <__assert_fail@plt+0x25fb8>
   37b54:	subs	r2, r2, ip
   37b58:	sbc	r3, r3, lr
   37b5c:	ldr	lr, [sp, #4]
   37b60:	mov	sl, #0
   37b64:	adds	lr, r2, lr
   37b68:	adc	sl, r3, sl
   37b6c:	cmp	sl, lr, asr #31
   37b70:	bne	380c0 <__assert_fail@plt+0x2651c>
   37b74:	ldr	r1, [sp]
   37b78:	b	37690 <__assert_fail@plt+0x25aec>
   37b7c:	ldrb	r3, [r8, #2]
   37b80:	mov	lr, #1024	; 0x400
   37b84:	cmp	r3, #66	; 0x42
   37b88:	movne	fp, #1
   37b8c:	moveq	fp, #3
   37b90:	b	37454 <__assert_fail@plt+0x258b0>
   37b94:	cmp	r3, #0
   37b98:	umull	r6, r7, sl, lr
   37b9c:	umull	r2, r3, lr, r3
   37ba0:	strd	r2, [sp, #8]
   37ba4:	strd	r6, [sp, #16]
   37ba8:	bge	37bc0 <__assert_fail@plt+0x2601c>
   37bac:	subs	r3, r2, ip
   37bb0:	str	r3, [sp, #8]
   37bb4:	ldr	r3, [sp, #12]
   37bb8:	sbc	r3, r3, lr
   37bbc:	str	r3, [sp, #12]
   37bc0:	ldr	r3, [sp, #8]
   37bc4:	mov	lr, #0
   37bc8:	ldr	r6, [sp, #20]
   37bcc:	adds	r2, r3, r6
   37bd0:	ldr	r3, [sp, #12]
   37bd4:	adc	lr, r3, lr
   37bd8:	cmp	lr, r2, asr #31
   37bdc:	bne	38054 <__assert_fail@plt+0x264b0>
   37be0:	ldr	lr, [sp, #16]
   37be4:	b	3763c <__assert_fail@plt+0x25a98>
   37be8:	umull	r2, r3, r6, lr
   37bec:	cmp	r7, #0
   37bf0:	strd	r2, [sp, #8]
   37bf4:	umull	r2, r3, lr, r7
   37bf8:	bge	37c04 <__assert_fail@plt+0x26060>
   37bfc:	subs	r2, r2, r1
   37c00:	sbc	r3, r3, lr
   37c04:	ldr	r0, [sp, #12]
   37c08:	mov	ip, #0
   37c0c:	adds	r0, r2, r0
   37c10:	adc	ip, r3, ip
   37c14:	cmp	ip, r0, asr #31
   37c18:	bne	37f7c <__assert_fail@plt+0x263d8>
   37c1c:	mov	r3, r0
   37c20:	ldr	ip, [sp, #8]
   37c24:	b	378c0 <__assert_fail@plt+0x25d1c>
   37c28:	umull	r2, r3, r6, lr
   37c2c:	cmp	r7, #0
   37c30:	strd	r2, [sp, #8]
   37c34:	umull	r2, r3, lr, r7
   37c38:	bge	37c44 <__assert_fail@plt+0x260a0>
   37c3c:	subs	r2, r2, r1
   37c40:	sbc	r3, r3, lr
   37c44:	ldr	r0, [sp, #12]
   37c48:	mov	ip, #0
   37c4c:	adds	r0, r2, r0
   37c50:	adc	ip, r3, ip
   37c54:	cmp	ip, r0, asr #31
   37c58:	bne	380dc <__assert_fail@plt+0x26538>
   37c5c:	mov	r3, r0
   37c60:	ldr	ip, [sp, #8]
   37c64:	b	37820 <__assert_fail@plt+0x25c7c>
   37c68:	umull	r2, r3, r6, lr
   37c6c:	cmp	r7, #0
   37c70:	strd	r2, [sp, #8]
   37c74:	umull	r2, r3, lr, r7
   37c78:	bge	37c84 <__assert_fail@plt+0x260e0>
   37c7c:	subs	r2, r2, r1
   37c80:	sbc	r3, r3, lr
   37c84:	ldr	r0, [sp, #12]
   37c88:	mov	ip, #0
   37c8c:	adds	r0, r2, r0
   37c90:	adc	ip, r3, ip
   37c94:	cmp	ip, r0, asr #31
   37c98:	bne	37fc4 <__assert_fail@plt+0x26420>
   37c9c:	mov	r3, r0
   37ca0:	ldr	ip, [sp, #8]
   37ca4:	b	37564 <__assert_fail@plt+0x259c0>
   37ca8:	umull	r2, r3, r6, lr
   37cac:	cmp	r7, #0
   37cb0:	strd	r2, [sp, #8]
   37cb4:	umull	r2, r3, lr, r7
   37cb8:	bge	37cc4 <__assert_fail@plt+0x26120>
   37cbc:	subs	r2, r2, r1
   37cc0:	sbc	r3, r3, lr
   37cc4:	ldr	r0, [sp, #12]
   37cc8:	mov	ip, #0
   37ccc:	adds	r0, r2, r0
   37cd0:	adc	ip, r3, ip
   37cd4:	cmp	ip, r0, asr #31
   37cd8:	bne	3817c <__assert_fail@plt+0x265d8>
   37cdc:	mov	r3, r0
   37ce0:	ldr	ip, [sp, #8]
   37ce4:	b	37a7c <__assert_fail@plt+0x25ed8>
   37ce8:	umull	r2, r3, r6, lr
   37cec:	cmp	r7, #0
   37cf0:	strd	r2, [sp, #8]
   37cf4:	umull	r2, r3, lr, r7
   37cf8:	bge	37d04 <__assert_fail@plt+0x26160>
   37cfc:	subs	r2, r2, r1
   37d00:	sbc	r3, r3, lr
   37d04:	ldr	r0, [sp, #12]
   37d08:	mov	ip, #0
   37d0c:	adds	r0, r2, r0
   37d10:	adc	ip, r3, ip
   37d14:	cmp	ip, r0, asr #31
   37d18:	bne	38078 <__assert_fail@plt+0x264d4>
   37d1c:	mov	r3, r0
   37d20:	ldr	ip, [sp, #8]
   37d24:	b	3775c <__assert_fail@plt+0x25bb8>
   37d28:	umull	r2, r3, r6, lr
   37d2c:	cmp	r7, #0
   37d30:	strd	r2, [sp, #8]
   37d34:	umull	r2, r3, lr, r7
   37d38:	bge	37d44 <__assert_fail@plt+0x261a0>
   37d3c:	subs	r2, r2, r1
   37d40:	sbc	r3, r3, lr
   37d44:	ldr	r0, [sp, #12]
   37d48:	mov	ip, #0
   37d4c:	adds	r0, r2, r0
   37d50:	adc	ip, r3, ip
   37d54:	cmp	ip, r0, asr #31
   37d58:	bne	38124 <__assert_fail@plt+0x26580>
   37d5c:	mov	r3, r0
   37d60:	ldr	sl, [sp, #8]
   37d64:	b	37a1c <__assert_fail@plt+0x25e78>
   37d68:	mov	r2, r6
   37d6c:	mov	r3, #0
   37d70:	mov	lr, #1024	; 0x400
   37d74:	cmp	r7, #0
   37d78:	strd	r2, [sp]
   37d7c:	lsr	r3, r6, #22
   37d80:	ldr	r2, [sp]
   37d84:	umull	r0, r1, lr, r7
   37d88:	lsl	r2, r2, #10
   37d8c:	bge	37d98 <__assert_fail@plt+0x261f4>
   37d90:	subs	r0, r0, ip
   37d94:	sbc	r1, r1, lr
   37d98:	adds	r3, r0, r3
   37d9c:	mov	lr, #0
   37da0:	adc	r1, r1, lr
   37da4:	cmp	r1, r3, asr #31
   37da8:	beq	37720 <__assert_fail@plt+0x25b7c>
   37dac:	lsl	r3, r7, #10
   37db0:	mov	ip, #1
   37db4:	lsl	r2, r6, #10
   37db8:	orr	r3, r3, r6, lsr #22
   37dbc:	b	37720 <__assert_fail@plt+0x25b7c>
   37dc0:	umull	r2, r3, r6, lr
   37dc4:	cmp	r7, #0
   37dc8:	strd	r2, [sp, #8]
   37dcc:	umull	r2, r3, lr, r7
   37dd0:	bge	37ddc <__assert_fail@plt+0x26238>
   37dd4:	subs	r2, r2, r1
   37dd8:	sbc	r3, r3, lr
   37ddc:	ldr	r0, [sp, #12]
   37de0:	mov	ip, #0
   37de4:	adds	r0, r2, r0
   37de8:	adc	ip, r3, ip
   37dec:	cmp	ip, r0, asr #31
   37df0:	bne	38148 <__assert_fail@plt+0x265a4>
   37df4:	mov	r3, r0
   37df8:	ldr	ip, [sp, #8]
   37dfc:	b	37960 <__assert_fail@plt+0x25dbc>
   37e00:	mov	lr, #2
   37e04:	mov	r3, #0
   37e08:	adds	ip, r6, r6
   37e0c:	adc	r0, r3, r3
   37e10:	umull	r2, r3, lr, r7
   37e14:	cmp	r7, #0
   37e18:	strd	r2, [sp]
   37e1c:	bge	37e34 <__assert_fail@plt+0x26290>
   37e20:	subs	r3, r2, r1
   37e24:	str	r3, [sp]
   37e28:	ldr	r3, [sp, #4]
   37e2c:	sbc	r3, r3, lr
   37e30:	str	r3, [sp, #4]
   37e34:	ldr	r3, [sp]
   37e38:	mov	lr, #0
   37e3c:	adds	r2, r3, r0
   37e40:	ldr	r3, [sp, #4]
   37e44:	adc	r3, r3, lr
   37e48:	cmp	r3, r2, asr #31
   37e4c:	bne	3816c <__assert_fail@plt+0x265c8>
   37e50:	mov	r3, r2
   37e54:	b	376f0 <__assert_fail@plt+0x25b4c>
   37e58:	mov	r2, r6
   37e5c:	mov	r3, #0
   37e60:	mov	lr, #512	; 0x200
   37e64:	cmp	r7, #0
   37e68:	strd	r2, [sp]
   37e6c:	lsr	r3, r6, #23
   37e70:	ldr	r2, [sp]
   37e74:	umull	r0, r1, lr, r7
   37e78:	lsl	r2, r2, #9
   37e7c:	bge	37e88 <__assert_fail@plt+0x262e4>
   37e80:	subs	r0, r0, ip
   37e84:	sbc	r1, r1, lr
   37e88:	adds	r3, r0, r3
   37e8c:	mov	lr, #0
   37e90:	adc	r1, r1, lr
   37e94:	cmp	r1, r3, asr #31
   37e98:	lslne	r3, r7, #9
   37e9c:	movne	ip, #1
   37ea0:	lslne	r2, r6, #9
   37ea4:	orrne	r3, r3, r6, lsr #23
   37ea8:	b	37720 <__assert_fail@plt+0x25b7c>
   37eac:	umull	r0, r1, r6, lr
   37eb0:	cmp	r3, #0
   37eb4:	umull	r2, r3, lr, r3
   37eb8:	strd	r0, [sp, #16]
   37ebc:	mov	r0, r2
   37ec0:	mov	r1, r3
   37ec4:	strd	r0, [sp, #8]
   37ec8:	bge	37ee0 <__assert_fail@plt+0x2633c>
   37ecc:	subs	r3, r0, ip
   37ed0:	str	r3, [sp, #8]
   37ed4:	ldr	r3, [sp, #12]
   37ed8:	sbc	r3, r3, lr
   37edc:	str	r3, [sp, #12]
   37ee0:	ldr	r1, [sp, #8]
   37ee4:	mov	r2, #0
   37ee8:	ldr	r3, [sp, #20]
   37eec:	adds	r3, r1, r3
   37ef0:	ldr	r1, [sp, #12]
   37ef4:	adc	r2, r1, r2
   37ef8:	cmp	r2, r3, asr #31
   37efc:	bne	3809c <__assert_fail@plt+0x264f8>
   37f00:	ldr	sl, [sp, #16]
   37f04:	b	37780 <__assert_fail@plt+0x25bdc>
   37f08:	cmp	r3, #0
   37f0c:	umull	r6, r7, sl, lr
   37f10:	umull	r2, r3, lr, r3
   37f14:	strd	r2, [sp, #8]
   37f18:	strd	r6, [sp, #16]
   37f1c:	bge	37f34 <__assert_fail@plt+0x26390>
   37f20:	subs	r3, r2, ip
   37f24:	str	r3, [sp, #8]
   37f28:	ldr	r3, [sp, #12]
   37f2c:	sbc	r3, r3, lr
   37f30:	str	r3, [sp, #12]
   37f34:	ldr	r3, [sp, #8]
   37f38:	mov	lr, #0
   37f3c:	ldr	r6, [sp, #20]
   37f40:	adds	r2, r3, r6
   37f44:	ldr	r3, [sp, #12]
   37f48:	adc	lr, r3, lr
   37f4c:	cmp	lr, r2, asr #31
   37f50:	bne	381a0 <__assert_fail@plt+0x265fc>
   37f54:	ldr	lr, [sp, #16]
   37f58:	b	37a40 <__assert_fail@plt+0x25e9c>
   37f5c:	movw	r3, #51612	; 0xc99c
   37f60:	movt	r3, #3
   37f64:	movw	r1, #51624	; 0xc9a8
   37f68:	movt	r1, #3
   37f6c:	movw	r0, #51640	; 0xc9b8
   37f70:	movt	r0, #3
   37f74:	mov	r2, #85	; 0x55
   37f78:	bl	11ba4 <__assert_fail@plt>
   37f7c:	ldrd	r2, [sp]
   37f80:	mov	r1, #1
   37f84:	ldr	ip, [sp]
   37f88:	mul	r0, r6, r3
   37f8c:	umull	r2, r3, r6, r2
   37f90:	mla	r0, ip, r7, r0
   37f94:	mov	ip, r2
   37f98:	add	r3, r0, r3
   37f9c:	b	378c0 <__assert_fail@plt+0x25d1c>
   37fa0:	ldrd	r2, [sp]
   37fa4:	mov	ip, #1
   37fa8:	ldr	r1, [sp]
   37fac:	mul	r0, r6, r3
   37fb0:	umull	r2, r3, r6, r2
   37fb4:	mla	r0, r1, r7, r0
   37fb8:	mov	sl, r2
   37fbc:	add	r3, r0, r3
   37fc0:	b	37618 <__assert_fail@plt+0x25a74>
   37fc4:	ldrd	r2, [sp]
   37fc8:	mov	r1, #1
   37fcc:	ldr	ip, [sp]
   37fd0:	mul	r0, r6, r3
   37fd4:	umull	r2, r3, r6, r2
   37fd8:	mla	r0, ip, r7, r0
   37fdc:	mov	ip, r2
   37fe0:	add	r3, r0, r3
   37fe4:	b	37564 <__assert_fail@plt+0x259c0>
   37fe8:	ldrd	r2, [sp]
   37fec:	mov	ip, #1
   37ff0:	ldr	r1, [sp]
   37ff4:	mul	r0, r6, r3
   37ff8:	umull	r2, r3, r6, r2
   37ffc:	mla	r0, r1, r7, r0
   38000:	mov	sl, r2
   38004:	add	r3, r0, r3
   38008:	b	375f4 <__assert_fail@plt+0x25a50>
   3800c:	ldrd	r2, [sp]
   38010:	mov	ip, #1
   38014:	ldr	r1, [sp]
   38018:	mul	r0, r6, r3
   3801c:	umull	r2, r3, r6, r2
   38020:	mla	r0, r1, r7, r0
   38024:	mov	sl, r2
   38028:	add	r3, r0, r3
   3802c:	b	375ac <__assert_fail@plt+0x25a08>
   38030:	ldrd	r2, [sp]
   38034:	mov	ip, #1
   38038:	ldr	r1, [sp]
   3803c:	mul	r0, r6, r3
   38040:	umull	r2, r3, r6, r2
   38044:	mla	r0, r1, r7, r0
   38048:	mov	sl, r2
   3804c:	add	r3, r0, r3
   38050:	b	375d0 <__assert_fail@plt+0x25a2c>
   38054:	ldrd	r2, [sp]
   38058:	mov	ip, #1
   3805c:	ldr	lr, [sp]
   38060:	mul	r6, r0, r3
   38064:	umull	r2, r3, r0, r2
   38068:	mla	r6, lr, r1, r6
   3806c:	mov	lr, r2
   38070:	add	r2, r6, r3
   38074:	b	3763c <__assert_fail@plt+0x25a98>
   38078:	ldrd	r2, [sp]
   3807c:	mov	r1, #1
   38080:	ldr	ip, [sp]
   38084:	mul	r0, r6, r3
   38088:	umull	r2, r3, r6, r2
   3808c:	mla	r0, ip, r7, r0
   38090:	mov	ip, r2
   38094:	add	r3, r0, r3
   38098:	b	3775c <__assert_fail@plt+0x25bb8>
   3809c:	ldrd	r2, [sp]
   380a0:	mov	ip, #1
   380a4:	ldr	r1, [sp]
   380a8:	mul	r0, r6, r3
   380ac:	umull	r2, r3, r6, r2
   380b0:	mla	r0, r1, r7, r0
   380b4:	mov	sl, r2
   380b8:	add	r3, r0, r3
   380bc:	b	37780 <__assert_fail@plt+0x25bdc>
   380c0:	mul	lr, r6, r1
   380c4:	mov	ip, #1
   380c8:	umull	r2, r3, r6, r0
   380cc:	mla	lr, r0, r7, lr
   380d0:	mov	r1, r2
   380d4:	add	lr, lr, r3
   380d8:	b	37690 <__assert_fail@plt+0x25aec>
   380dc:	ldrd	r2, [sp]
   380e0:	mov	r1, #1
   380e4:	ldr	ip, [sp]
   380e8:	mul	r0, r6, r3
   380ec:	umull	r2, r3, r6, r2
   380f0:	mla	r0, ip, r7, r0
   380f4:	mov	ip, r2
   380f8:	add	r3, r0, r3
   380fc:	b	37820 <__assert_fail@plt+0x25c7c>
   38100:	ldrd	r2, [sp]
   38104:	mov	ip, #1
   38108:	ldr	r1, [sp]
   3810c:	mul	r0, r6, r3
   38110:	umull	r2, r3, r6, r2
   38114:	mla	r0, r1, r7, r0
   38118:	mov	sl, r2
   3811c:	add	r3, r0, r3
   38120:	b	37588 <__assert_fail@plt+0x259e4>
   38124:	ldrd	r2, [sp]
   38128:	mov	r1, #1
   3812c:	ldr	ip, [sp]
   38130:	mul	r0, r6, r3
   38134:	umull	r2, r3, r6, r2
   38138:	mla	r0, ip, r7, r0
   3813c:	mov	sl, r2
   38140:	add	r3, r0, r3
   38144:	b	37a1c <__assert_fail@plt+0x25e78>
   38148:	ldrd	r2, [sp]
   3814c:	mov	r1, #1
   38150:	ldr	ip, [sp]
   38154:	mul	r0, r6, r3
   38158:	umull	r2, r3, r6, r2
   3815c:	mla	r0, ip, r7, r0
   38160:	mov	ip, r2
   38164:	add	r3, r0, r3
   38168:	b	37960 <__assert_fail@plt+0x25dbc>
   3816c:	adds	ip, r6, r6
   38170:	mov	r1, #1
   38174:	adc	r3, r7, r7
   38178:	b	376f0 <__assert_fail@plt+0x25b4c>
   3817c:	ldrd	r2, [sp]
   38180:	mov	r1, #1
   38184:	ldr	ip, [sp]
   38188:	mul	r0, r6, r3
   3818c:	umull	r2, r3, r6, r2
   38190:	mla	r0, ip, r7, r0
   38194:	mov	ip, r2
   38198:	add	r3, r0, r3
   3819c:	b	37a7c <__assert_fail@plt+0x25ed8>
   381a0:	ldrd	r2, [sp]
   381a4:	mov	ip, #1
   381a8:	ldr	lr, [sp]
   381ac:	mul	r6, r0, r3
   381b0:	umull	r2, r3, r0, r2
   381b4:	mla	r6, lr, r1, r6
   381b8:	mov	lr, r2
   381bc:	add	r3, r6, r3
   381c0:	mov	r2, r3
   381c4:	b	37a40 <__assert_fail@plt+0x25e9c>
   381c8:	sub	r0, r0, #1
   381cc:	movw	ip, #53720	; 0xd1d8
   381d0:	movt	ip, #4
   381d4:	cmp	r0, #3
   381d8:	push	{lr}		; (str lr, [sp, #-4]!)
   381dc:	sub	sp, sp, #20
   381e0:	ldr	r5, [ip]
   381e4:	bhi	38234 <__assert_fail@plt+0x26690>
   381e8:	movw	ip, #51680	; 0xc9e0
   381ec:	movt	ip, #3
   381f0:	cmp	r1, #0
   381f4:	ldr	r0, [ip, r0, lsl #2]
   381f8:	blt	38238 <__assert_fail@plt+0x26694>
   381fc:	ldr	r6, [r3, r1, lsl #4]
   38200:	movw	r4, #51696	; 0xc9f0
   38204:	movt	r4, #3
   38208:	mov	r1, r0
   3820c:	mov	r2, #5
   38210:	mov	r0, #0
   38214:	bl	117d8 <dcgettext@plt>
   38218:	ldr	ip, [sp, #24]
   3821c:	mov	r2, r0
   38220:	mov	r3, r4
   38224:	mov	r0, r5
   38228:	mov	r1, #0
   3822c:	stm	sp, {r6, ip}
   38230:	bl	118bc <error@plt>
   38234:	bl	11b68 <abort@plt>
   38238:	mov	r3, #0
   3823c:	movw	r4, #51696	; 0xc9f0
   38240:	movt	r4, #3
   38244:	add	r6, sp, #12
   38248:	strb	r2, [sp, #12]
   3824c:	sub	r4, r4, r1
   38250:	strb	r3, [sp, #13]
   38254:	b	38208 <__assert_fail@plt+0x26664>
   38258:	cmp	r2, #36	; 0x24
   3825c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   38260:	strd	r6, [sp, #8]
   38264:	strd	r8, [sp, #16]
   38268:	strd	sl, [sp, #24]
   3826c:	str	lr, [sp, #32]
   38270:	sub	sp, sp, #36	; 0x24
   38274:	bhi	38eec <__assert_fail@plt+0x27348>
   38278:	cmp	r1, #0
   3827c:	mov	r6, r2
   38280:	mov	r5, r1
   38284:	mov	sl, r0
   38288:	addeq	r5, sp, #28
   3828c:	mov	r9, r3
   38290:	bl	119b8 <__errno_location@plt>
   38294:	mov	r3, #0
   38298:	mov	fp, r0
   3829c:	str	r3, [r0]
   382a0:	ldrb	r4, [sl]
   382a4:	bl	11964 <__ctype_b_loc@plt>
   382a8:	ldr	r2, [r0]
   382ac:	lsl	r3, r4, #1
   382b0:	ldrh	r3, [r2, r3]
   382b4:	tst	r3, #8192	; 0x2000
   382b8:	beq	382d4 <__assert_fail@plt+0x26730>
   382bc:	mov	r3, sl
   382c0:	ldrb	r4, [r3, #1]!
   382c4:	lsl	r1, r4, #1
   382c8:	ldrh	r1, [r2, r1]
   382cc:	tst	r1, #8192	; 0x2000
   382d0:	bne	382c0 <__assert_fail@plt+0x2671c>
   382d4:	cmp	r4, #45	; 0x2d
   382d8:	beq	38374 <__assert_fail@plt+0x267d0>
   382dc:	mov	r2, r6
   382e0:	mov	r3, #0
   382e4:	mov	r1, r5
   382e8:	mov	r0, sl
   382ec:	bl	1179c <__strtoull_internal@plt>
   382f0:	ldr	r8, [r5]
   382f4:	mov	r6, r0
   382f8:	mov	r7, r1
   382fc:	cmp	r8, sl
   38300:	beq	3835c <__assert_fail@plt+0x267b8>
   38304:	ldr	r4, [fp]
   38308:	cmp	r4, #0
   3830c:	bne	3834c <__assert_fail@plt+0x267a8>
   38310:	ldr	r3, [sp, #72]	; 0x48
   38314:	cmp	r3, #0
   38318:	beq	38328 <__assert_fail@plt+0x26784>
   3831c:	ldrb	sl, [r8]
   38320:	cmp	sl, #0
   38324:	bne	386e0 <__assert_fail@plt+0x26b3c>
   38328:	strd	r6, [r9]
   3832c:	mov	r0, r4
   38330:	add	sp, sp, #36	; 0x24
   38334:	ldrd	r4, [sp]
   38338:	ldrd	r6, [sp, #8]
   3833c:	ldrd	r8, [sp, #16]
   38340:	ldrd	sl, [sp, #24]
   38344:	add	sp, sp, #32
   38348:	pop	{pc}		; (ldr pc, [sp], #4)
   3834c:	cmp	r4, #34	; 0x22
   38350:	bne	38374 <__assert_fail@plt+0x267d0>
   38354:	mov	r4, #1
   38358:	b	38310 <__assert_fail@plt+0x2676c>
   3835c:	ldr	r3, [sp, #72]	; 0x48
   38360:	cmp	r3, #0
   38364:	beq	38374 <__assert_fail@plt+0x267d0>
   38368:	ldrb	sl, [sl]
   3836c:	cmp	sl, #0
   38370:	bne	3837c <__assert_fail@plt+0x267d8>
   38374:	mov	r4, #4
   38378:	b	3832c <__assert_fail@plt+0x26788>
   3837c:	mov	r1, sl
   38380:	mov	r0, r3
   38384:	bl	11994 <strchr@plt>
   38388:	cmp	r0, #0
   3838c:	movne	r4, #0
   38390:	movne	r6, #1
   38394:	movne	r7, r4
   38398:	beq	38374 <__assert_fail@plt+0x267d0>
   3839c:	sub	r3, sl, #69	; 0x45
   383a0:	cmp	r3, #47	; 0x2f
   383a4:	ldrls	pc, [pc, r3, lsl #2]
   383a8:	b	384b0 <__assert_fail@plt+0x2690c>
   383ac:	andeq	r8, r3, ip, ror #8
   383b0:			; <UNDEFINED> instruction: 0x000384b0
   383b4:	andeq	r8, r3, ip, ror #8
   383b8:			; <UNDEFINED> instruction: 0x000384b0
   383bc:			; <UNDEFINED> instruction: 0x000384b0
   383c0:			; <UNDEFINED> instruction: 0x000384b0
   383c4:	andeq	r8, r3, ip, ror #8
   383c8:			; <UNDEFINED> instruction: 0x000384b0
   383cc:	andeq	r8, r3, ip, ror #8
   383d0:			; <UNDEFINED> instruction: 0x000384b0
   383d4:			; <UNDEFINED> instruction: 0x000384b0
   383d8:	andeq	r8, r3, ip, ror #8
   383dc:			; <UNDEFINED> instruction: 0x000384b0
   383e0:			; <UNDEFINED> instruction: 0x000384b0
   383e4:			; <UNDEFINED> instruction: 0x000384b0
   383e8:	andeq	r8, r3, ip, ror #8
   383ec:			; <UNDEFINED> instruction: 0x000384b0
   383f0:			; <UNDEFINED> instruction: 0x000384b0
   383f4:			; <UNDEFINED> instruction: 0x000384b0
   383f8:			; <UNDEFINED> instruction: 0x000384b0
   383fc:	andeq	r8, r3, ip, ror #8
   38400:	andeq	r8, r3, ip, ror #8
   38404:			; <UNDEFINED> instruction: 0x000384b0
   38408:			; <UNDEFINED> instruction: 0x000384b0
   3840c:			; <UNDEFINED> instruction: 0x000384b0
   38410:			; <UNDEFINED> instruction: 0x000384b0
   38414:			; <UNDEFINED> instruction: 0x000384b0
   38418:			; <UNDEFINED> instruction: 0x000384b0
   3841c:			; <UNDEFINED> instruction: 0x000384b0
   38420:			; <UNDEFINED> instruction: 0x000384b0
   38424:			; <UNDEFINED> instruction: 0x000384b0
   38428:			; <UNDEFINED> instruction: 0x000384b0
   3842c:			; <UNDEFINED> instruction: 0x000384b0
   38430:			; <UNDEFINED> instruction: 0x000384b0
   38434:	andeq	r8, r3, ip, ror #8
   38438:			; <UNDEFINED> instruction: 0x000384b0
   3843c:			; <UNDEFINED> instruction: 0x000384b0
   38440:			; <UNDEFINED> instruction: 0x000384b0
   38444:	andeq	r8, r3, ip, ror #8
   38448:			; <UNDEFINED> instruction: 0x000384b0
   3844c:	andeq	r8, r3, ip, ror #8
   38450:			; <UNDEFINED> instruction: 0x000384b0
   38454:			; <UNDEFINED> instruction: 0x000384b0
   38458:			; <UNDEFINED> instruction: 0x000384b0
   3845c:			; <UNDEFINED> instruction: 0x000384b0
   38460:			; <UNDEFINED> instruction: 0x000384b0
   38464:			; <UNDEFINED> instruction: 0x000384b0
   38468:	andeq	r8, r3, ip, ror #8
   3846c:	mov	r1, #48	; 0x30
   38470:	ldr	r0, [sp, #72]	; 0x48
   38474:	bl	11994 <strchr@plt>
   38478:	cmp	r0, #0
   3847c:	beq	384b0 <__assert_fail@plt+0x2690c>
   38480:	ldrb	r3, [r8, #1]
   38484:	cmp	r3, #68	; 0x44
   38488:	beq	38a40 <__assert_fail@plt+0x26e9c>
   3848c:	cmp	r3, #105	; 0x69
   38490:	beq	386f8 <__assert_fail@plt+0x26b54>
   38494:	cmp	r3, #66	; 0x42
   38498:	moveq	r3, #2
   3849c:	movne	r3, #1
   384a0:	moveq	ip, #1000	; 0x3e8
   384a4:	movne	ip, #1024	; 0x400
   384a8:	str	r3, [sp, #12]
   384ac:	b	384bc <__assert_fail@plt+0x26918>
   384b0:	mov	r3, #1
   384b4:	mov	ip, #1024	; 0x400
   384b8:	str	r3, [sp, #12]
   384bc:	sub	sl, sl, #66	; 0x42
   384c0:	cmp	sl, #53	; 0x35
   384c4:	ldrls	pc, [pc, sl, lsl #2]
   384c8:	b	386a4 <__assert_fail@plt+0x26b00>
   384cc:	andeq	r8, r3, ip, lsl #19
   384d0:	andeq	r8, r3, r4, lsr #13
   384d4:	andeq	r8, r3, r4, lsr #13
   384d8:	andeq	r8, r3, ip, lsr #18
   384dc:	andeq	r8, r3, r4, lsr #13
   384e0:	andeq	r8, r3, r8, lsr #19
   384e4:	andeq	r8, r3, r4, lsr #13
   384e8:	andeq	r8, r3, r4, lsr #13
   384ec:	andeq	r8, r3, r4, lsr #13
   384f0:	andeq	r8, r3, ip, lsr #13
   384f4:	andeq	r8, r3, r4, lsr #13
   384f8:	ldrdeq	r8, [r3], -r4
   384fc:	andeq	r8, r3, r4, lsr #13
   38500:	andeq	r8, r3, r4, lsr #13
   38504:	andeq	r8, r3, r8, ror r8
   38508:	andeq	r8, r3, r4, lsr #13
   3850c:	andeq	r8, r3, r4, lsr #13
   38510:	andeq	r8, r3, r4, lsr #13
   38514:	andeq	r8, r3, r8, lsl r8
   38518:	andeq	r8, r3, r4, lsr #13
   3851c:	andeq	r8, r3, r4, lsr #13
   38520:	andeq	r8, r3, r4, lsr #13
   38524:	andeq	r8, r3, r4, lsr #13
   38528:	andeq	r8, r3, ip, asr #14
   3852c:	andeq	r8, r3, r4, lsr #11
   38530:	andeq	r8, r3, r4, lsr #13
   38534:	andeq	r8, r3, r4, lsr #13
   38538:	andeq	r8, r3, r4, lsr #13
   3853c:	andeq	r8, r3, r4, lsr #13
   38540:	andeq	r8, r3, r4, lsr #13
   38544:	andeq	r8, r3, r4, lsr #13
   38548:	andeq	r8, r3, r4, lsr #13
   3854c:	andeq	r8, r3, ip, lsr #14
   38550:	andeq	r8, r3, ip, lsl #13
   38554:	andeq	r8, r3, r4, lsr #13
   38558:	andeq	r8, r3, r4, lsr #13
   3855c:	andeq	r8, r3, r4, lsr #13
   38560:	andeq	r8, r3, r8, lsr #19
   38564:	andeq	r8, r3, r4, lsr #13
   38568:	andeq	r8, r3, r4, lsr #13
   3856c:	andeq	r8, r3, r4, lsr #13
   38570:	andeq	r8, r3, ip, lsr #13
   38574:	andeq	r8, r3, r4, lsr #13
   38578:	ldrdeq	r8, [r3], -r4
   3857c:	andeq	r8, r3, r4, lsr #13
   38580:	andeq	r8, r3, r4, lsr #13
   38584:	andeq	r8, r3, r4, lsr #13
   38588:	andeq	r8, r3, r4, lsr #13
   3858c:	andeq	r8, r3, r4, lsr #13
   38590:	andeq	r8, r3, r4, lsr #13
   38594:	andeq	r8, r3, r8, lsl r8
   38598:	andeq	r8, r3, r4, lsr #13
   3859c:	andeq	r8, r3, r4, lsr #13
   385a0:	andeq	r8, r3, r4, lsl r7
   385a4:	asr	r3, ip, #31
   385a8:	mov	r2, ip
   385ac:	cmp	r7, #0
   385b0:	mov	r1, #0
   385b4:	strd	r2, [sp]
   385b8:	bne	38af8 <__assert_fail@plt+0x26f54>
   385bc:	umull	r6, r7, r6, ip
   385c0:	mov	r2, r6
   385c4:	mov	r3, r7
   385c8:	cmp	r1, #0
   385cc:	bne	38a0c <__assert_fail@plt+0x26e68>
   385d0:	cmp	r3, #0
   385d4:	mov	lr, r1
   385d8:	bne	38c24 <__assert_fail@plt+0x27080>
   385dc:	umull	r2, r3, r2, ip
   385e0:	mov	r0, r2
   385e4:	mov	r1, r3
   385e8:	cmp	lr, #0
   385ec:	bne	38a0c <__assert_fail@plt+0x26e68>
   385f0:	cmp	r1, #0
   385f4:	bne	38c00 <__assert_fail@plt+0x2705c>
   385f8:	umull	r0, r1, r0, ip
   385fc:	mov	r2, r0
   38600:	mov	r3, r1
   38604:	cmp	lr, #0
   38608:	bne	38a0c <__assert_fail@plt+0x26e68>
   3860c:	cmp	r3, #0
   38610:	bne	388b0 <__assert_fail@plt+0x26d0c>
   38614:	umull	r2, r3, r2, ip
   38618:	mov	r0, r2
   3861c:	mov	r1, r3
   38620:	cmp	lr, #0
   38624:	bne	38a0c <__assert_fail@plt+0x26e68>
   38628:	cmp	r1, #0
   3862c:	bne	38ab0 <__assert_fail@plt+0x26f0c>
   38630:	umull	r0, r1, r0, ip
   38634:	mov	r2, r0
   38638:	mov	r3, r1
   3863c:	cmp	lr, #0
   38640:	bne	38a0c <__assert_fail@plt+0x26e68>
   38644:	cmp	r3, #0
   38648:	mov	r7, lr
   3864c:	bne	38a8c <__assert_fail@plt+0x26ee8>
   38650:	umull	r2, r3, r2, ip
   38654:	mov	r6, r2
   38658:	mov	lr, r3
   3865c:	cmp	r7, #0
   38660:	bne	38a0c <__assert_fail@plt+0x26e68>
   38664:	cmp	lr, #0
   38668:	bne	38a50 <__assert_fail@plt+0x26eac>
   3866c:	umull	r2, r3, r6, ip
   38670:	mov	r0, r2
   38674:	mov	r2, r3
   38678:	subs	r3, r7, #0
   3867c:	bne	38a0c <__assert_fail@plt+0x26e68>
   38680:	mov	r6, r0
   38684:	mov	r7, r2
   38688:	orr	r4, r4, r3
   3868c:	ldr	r2, [sp, #12]
   38690:	add	r3, r8, r2
   38694:	str	r3, [r5]
   38698:	ldrb	r3, [r8, r2]
   3869c:	cmp	r3, #0
   386a0:	beq	38328 <__assert_fail@plt+0x26784>
   386a4:	orr	r4, r4, #2
   386a8:	b	38328 <__assert_fail@plt+0x26784>
   386ac:	cmp	r7, #0
   386b0:	asr	r1, ip, #31
   386b4:	mov	lr, #0
   386b8:	bne	38a1c <__assert_fail@plt+0x26e78>
   386bc:	umull	r2, r3, r6, ip
   386c0:	mov	r6, r2
   386c4:	mov	r7, r3
   386c8:	cmp	lr, #0
   386cc:	beq	3868c <__assert_fail@plt+0x26ae8>
   386d0:	mvn	r6, #0
   386d4:	mov	r4, #1
   386d8:	mov	r7, r6
   386dc:	b	3868c <__assert_fail@plt+0x26ae8>
   386e0:	mov	r0, r3
   386e4:	mov	r1, sl
   386e8:	bl	11994 <strchr@plt>
   386ec:	cmp	r0, #0
   386f0:	bne	3839c <__assert_fail@plt+0x267f8>
   386f4:	b	386a4 <__assert_fail@plt+0x26b00>
   386f8:	ldrb	r3, [r8, #2]
   386fc:	mov	ip, #1024	; 0x400
   38700:	cmp	r3, #66	; 0x42
   38704:	movne	r3, #1
   38708:	moveq	r3, #3
   3870c:	str	r3, [sp, #12]
   38710:	b	384bc <__assert_fail@plt+0x26918>
   38714:	lsr	r3, r7, #31
   38718:	adds	r6, r6, r6
   3871c:	adc	r7, r7, r7
   38720:	cmp	r3, #0
   38724:	beq	3868c <__assert_fail@plt+0x26ae8>
   38728:	b	386d0 <__assert_fail@plt+0x26b2c>
   3872c:	lsr	r3, r7, #23
   38730:	lsl	r7, r7, #9
   38734:	cmp	r3, #0
   38738:	lsl	r3, r6, #9
   3873c:	orr	r7, r7, r6, lsr #23
   38740:	bne	386d0 <__assert_fail@plt+0x26b2c>
   38744:	mov	r6, r3
   38748:	b	3868c <__assert_fail@plt+0x26ae8>
   3874c:	asr	r3, ip, #31
   38750:	mov	r2, ip
   38754:	cmp	r7, #0
   38758:	mov	r1, #0
   3875c:	strd	r2, [sp]
   38760:	bne	38b6c <__assert_fail@plt+0x26fc8>
   38764:	umull	r6, r7, r6, ip
   38768:	mov	r0, r6
   3876c:	mov	fp, r7
   38770:	cmp	r1, #0
   38774:	bne	38a0c <__assert_fail@plt+0x26e68>
   38778:	cmp	fp, #0
   3877c:	mov	lr, r1
   38780:	bne	38cfc <__assert_fail@plt+0x27158>
   38784:	umull	r0, r1, r0, ip
   38788:	mov	r2, r0
   3878c:	mov	r3, r1
   38790:	cmp	lr, #0
   38794:	bne	38a0c <__assert_fail@plt+0x26e68>
   38798:	cmp	r3, #0
   3879c:	bne	38d24 <__assert_fail@plt+0x27180>
   387a0:	umull	r2, r3, r2, ip
   387a4:	mov	r0, r2
   387a8:	mov	r1, r3
   387ac:	cmp	lr, #0
   387b0:	bne	38a0c <__assert_fail@plt+0x26e68>
   387b4:	cmp	r1, #0
   387b8:	bne	38ca4 <__assert_fail@plt+0x27100>
   387bc:	umull	r0, r1, r0, ip
   387c0:	mov	r2, r0
   387c4:	mov	r3, r1
   387c8:	cmp	lr, #0
   387cc:	bne	38a0c <__assert_fail@plt+0x26e68>
   387d0:	cmp	r3, #0
   387d4:	bne	38ad4 <__assert_fail@plt+0x26f30>
   387d8:	umull	r2, r3, r2, ip
   387dc:	mov	r0, r2
   387e0:	mov	r1, r3
   387e4:	cmp	lr, #0
   387e8:	bne	38a0c <__assert_fail@plt+0x26e68>
   387ec:	cmp	r1, #0
   387f0:	beq	38630 <__assert_fail@plt+0x26a8c>
   387f4:	umull	r6, r7, r0, ip
   387f8:	mov	fp, lr
   387fc:	mov	sl, r7
   38800:	umlal	sl, fp, r1, ip
   38804:	cmp	fp, #0
   38808:	bne	38f0c <__assert_fail@plt+0x27368>
   3880c:	mov	r2, r6
   38810:	mov	r3, sl
   38814:	b	3863c <__assert_fail@plt+0x26a98>
   38818:	asr	r3, ip, #31
   3881c:	mov	r2, ip
   38820:	cmp	r7, #0
   38824:	mov	r1, #0
   38828:	strd	r2, [sp]
   3882c:	bne	38b90 <__assert_fail@plt+0x26fec>
   38830:	umull	r6, r7, r6, ip
   38834:	mov	r0, r6
   38838:	mov	fp, r7
   3883c:	cmp	r1, #0
   38840:	bne	38a0c <__assert_fail@plt+0x26e68>
   38844:	cmp	fp, #0
   38848:	mov	lr, r1
   3884c:	beq	38630 <__assert_fail@plt+0x26a8c>
   38850:	umull	r6, r7, r0, ip
   38854:	mov	r3, r1
   38858:	mov	r2, r7
   3885c:	umlal	r2, r3, fp, ip
   38860:	cmp	r3, #0
   38864:	strd	r2, [sp, #16]
   38868:	bne	38df0 <__assert_fail@plt+0x2724c>
   3886c:	mov	r2, r6
   38870:	ldr	r3, [sp, #16]
   38874:	b	3863c <__assert_fail@plt+0x26a98>
   38878:	asr	r3, ip, #31
   3887c:	mov	r2, ip
   38880:	cmp	r7, #0
   38884:	mov	r1, #0
   38888:	strd	r2, [sp]
   3888c:	bne	38bd8 <__assert_fail@plt+0x27034>
   38890:	umull	r6, r7, r6, ip
   38894:	mov	r2, r6
   38898:	mov	r3, r7
   3889c:	cmp	r1, #0
   388a0:	bne	38a0c <__assert_fail@plt+0x26e68>
   388a4:	cmp	r3, #0
   388a8:	mov	lr, r1
   388ac:	beq	38614 <__assert_fail@plt+0x26a70>
   388b0:	umull	r6, r7, r2, ip
   388b4:	mov	fp, lr
   388b8:	mov	sl, r7
   388bc:	umlal	sl, fp, r3, ip
   388c0:	cmp	fp, #0
   388c4:	bne	38ed0 <__assert_fail@plt+0x2732c>
   388c8:	mov	r0, r6
   388cc:	mov	r1, sl
   388d0:	b	38620 <__assert_fail@plt+0x26a7c>
   388d4:	asr	r3, ip, #31
   388d8:	mov	r2, ip
   388dc:	cmp	r7, #0
   388e0:	mov	r1, #0
   388e4:	strd	r2, [sp]
   388e8:	bne	38bb4 <__assert_fail@plt+0x27010>
   388ec:	umull	r6, r7, r6, ip
   388f0:	mov	sl, r6
   388f4:	mov	lr, r7
   388f8:	cmp	r1, #0
   388fc:	bne	386d0 <__assert_fail@plt+0x26b2c>
   38900:	cmp	lr, #0
   38904:	mov	r7, r1
   38908:	bne	38cc8 <__assert_fail@plt+0x27124>
   3890c:	umull	sl, fp, sl, ip
   38910:	mov	r0, sl
   38914:	mov	r2, fp
   38918:	cmp	r7, #0
   3891c:	mov	r6, r0
   38920:	mov	r7, r2
   38924:	beq	3868c <__assert_fail@plt+0x26ae8>
   38928:	b	386d0 <__assert_fail@plt+0x26b2c>
   3892c:	asr	r3, ip, #31
   38930:	mov	r2, ip
   38934:	cmp	r7, #0
   38938:	mov	r1, #0
   3893c:	strd	r2, [sp]
   38940:	bne	38b48 <__assert_fail@plt+0x26fa4>
   38944:	umull	r6, r7, r6, ip
   38948:	mov	r0, r6
   3894c:	mov	fp, r7
   38950:	cmp	r1, #0
   38954:	bne	38a0c <__assert_fail@plt+0x26e68>
   38958:	cmp	fp, #0
   3895c:	mov	lr, r1
   38960:	beq	387bc <__assert_fail@plt+0x26c18>
   38964:	umull	r6, r7, r0, ip
   38968:	mov	r3, r1
   3896c:	mov	r2, r7
   38970:	umlal	r2, r3, fp, ip
   38974:	cmp	r3, #0
   38978:	strd	r2, [sp, #16]
   3897c:	bne	38e60 <__assert_fail@plt+0x272bc>
   38980:	mov	r2, r6
   38984:	ldr	r3, [sp, #16]
   38988:	b	387c8 <__assert_fail@plt+0x26c24>
   3898c:	lsr	r3, r7, #22
   38990:	lsl	r7, r7, #10
   38994:	cmp	r3, #0
   38998:	lsl	r3, r6, #10
   3899c:	orr	r7, r7, r6, lsr #22
   389a0:	beq	38744 <__assert_fail@plt+0x26ba0>
   389a4:	b	386d0 <__assert_fail@plt+0x26b2c>
   389a8:	asr	r3, ip, #31
   389ac:	mov	r2, ip
   389b0:	cmp	r7, #0
   389b4:	mov	r1, #0
   389b8:	strd	r2, [sp]
   389bc:	bne	38b20 <__assert_fail@plt+0x26f7c>
   389c0:	umull	r6, r7, r6, ip
   389c4:	mov	r2, r6
   389c8:	mov	r3, r7
   389cc:	cmp	r1, #0
   389d0:	bne	386d0 <__assert_fail@plt+0x26b2c>
   389d4:	cmp	r3, #0
   389d8:	mov	r7, r1
   389dc:	bne	38c84 <__assert_fail@plt+0x270e0>
   389e0:	umull	r2, r3, r2, ip
   389e4:	mov	r6, r2
   389e8:	mov	lr, r3
   389ec:	cmp	r7, #0
   389f0:	bne	386d0 <__assert_fail@plt+0x26b2c>
   389f4:	cmp	lr, #0
   389f8:	bne	38c48 <__assert_fail@plt+0x270a4>
   389fc:	umull	r2, r3, r6, ip
   38a00:	mov	r0, r2
   38a04:	mov	r2, r3
   38a08:	b	38918 <__assert_fail@plt+0x26d74>
   38a0c:	mvn	r6, #0
   38a10:	mov	r3, #1
   38a14:	mov	r7, r6
   38a18:	b	38688 <__assert_fail@plt+0x26ae4>
   38a1c:	umull	sl, fp, r6, ip
   38a20:	mov	r3, lr
   38a24:	mov	r2, fp
   38a28:	umlal	r2, r3, r7, ip
   38a2c:	cmp	r3, #0
   38a30:	bne	38e28 <__assert_fail@plt+0x27284>
   38a34:	mov	r6, sl
   38a38:	mov	r7, r2
   38a3c:	b	386c8 <__assert_fail@plt+0x26b24>
   38a40:	mov	r3, #2
   38a44:	mov	ip, #1000	; 0x3e8
   38a48:	str	r3, [sp, #12]
   38a4c:	b	384bc <__assert_fail@plt+0x26918>
   38a50:	umull	r0, r1, r6, ip
   38a54:	mov	r3, r7
   38a58:	mov	r2, r1
   38a5c:	strd	r0, [sp, #16]
   38a60:	umlal	r2, r3, lr, ip
   38a64:	cmp	r3, #0
   38a68:	beq	38678 <__assert_fail@plt+0x26ad4>
   38a6c:	ldrd	sl, [sp]
   38a70:	mov	r7, #1
   38a74:	ldr	r0, [sp, #16]
   38a78:	ldr	r3, [sp, #20]
   38a7c:	mul	r2, r6, fp
   38a80:	mla	r2, lr, sl, r2
   38a84:	add	r2, r2, r3
   38a88:	b	38678 <__assert_fail@plt+0x26ad4>
   38a8c:	umull	sl, fp, r2, ip
   38a90:	mov	r1, lr
   38a94:	mov	r0, fp
   38a98:	umlal	r0, r1, r3, ip
   38a9c:	cmp	r1, #0
   38aa0:	bne	38d80 <__assert_fail@plt+0x271dc>
   38aa4:	mov	r6, sl
   38aa8:	mov	lr, r0
   38aac:	b	3865c <__assert_fail@plt+0x26ab8>
   38ab0:	umull	sl, fp, r0, ip
   38ab4:	mov	r7, lr
   38ab8:	mov	r6, fp
   38abc:	umlal	r6, r7, r1, ip
   38ac0:	cmp	r7, #0
   38ac4:	bne	38f28 <__assert_fail@plt+0x27384>
   38ac8:	mov	r2, sl
   38acc:	mov	r3, r6
   38ad0:	b	3863c <__assert_fail@plt+0x26a98>
   38ad4:	umull	sl, fp, r2, ip
   38ad8:	mov	r7, lr
   38adc:	mov	r6, fp
   38ae0:	umlal	r6, r7, r3, ip
   38ae4:	cmp	r7, #0
   38ae8:	bne	38db8 <__assert_fail@plt+0x27214>
   38aec:	mov	r0, sl
   38af0:	mov	r1, r6
   38af4:	b	387e4 <__assert_fail@plt+0x26c40>
   38af8:	umull	sl, fp, r6, ip
   38afc:	mov	r3, r1
   38b00:	mov	r2, fp
   38b04:	umlal	r2, r3, r7, ip
   38b08:	cmp	r3, #0
   38b0c:	strd	r2, [sp, #16]
   38b10:	bne	38d9c <__assert_fail@plt+0x271f8>
   38b14:	mov	r2, sl
   38b18:	ldr	r3, [sp, #16]
   38b1c:	b	385c8 <__assert_fail@plt+0x26a24>
   38b20:	umull	sl, fp, r6, ip
   38b24:	mov	r3, r1
   38b28:	mov	r2, fp
   38b2c:	umlal	r2, r3, r7, ip
   38b30:	cmp	r3, #0
   38b34:	strd	r2, [sp, #16]
   38b38:	bne	38e7c <__assert_fail@plt+0x272d8>
   38b3c:	mov	r2, sl
   38b40:	ldr	r3, [sp, #16]
   38b44:	b	389cc <__assert_fail@plt+0x26e28>
   38b48:	umull	sl, fp, r6, ip
   38b4c:	mov	r3, r1
   38b50:	mov	r2, fp
   38b54:	umlal	r2, r3, r7, ip
   38b58:	cmp	r3, #0
   38b5c:	bne	38d48 <__assert_fail@plt+0x271a4>
   38b60:	mov	r0, sl
   38b64:	mov	fp, r2
   38b68:	b	38950 <__assert_fail@plt+0x26dac>
   38b6c:	umull	sl, fp, r6, ip
   38b70:	mov	r3, r1
   38b74:	mov	r2, fp
   38b78:	umlal	r2, r3, r7, ip
   38b7c:	cmp	r3, #0
   38b80:	bne	38e0c <__assert_fail@plt+0x27268>
   38b84:	mov	r0, sl
   38b88:	mov	fp, r2
   38b8c:	b	38770 <__assert_fail@plt+0x26bcc>
   38b90:	umull	sl, fp, r6, ip
   38b94:	mov	r3, r1
   38b98:	mov	r2, fp
   38b9c:	umlal	r2, r3, r7, ip
   38ba0:	cmp	r3, #0
   38ba4:	bne	38e98 <__assert_fail@plt+0x272f4>
   38ba8:	mov	r0, sl
   38bac:	mov	fp, r2
   38bb0:	b	3883c <__assert_fail@plt+0x26c98>
   38bb4:	umull	sl, fp, r6, ip
   38bb8:	mov	r3, r1
   38bbc:	mov	r2, fp
   38bc0:	strd	sl, [sp, #16]
   38bc4:	umlal	r2, r3, r7, ip
   38bc8:	cmp	r3, #0
   38bcc:	bne	38e40 <__assert_fail@plt+0x2729c>
   38bd0:	mov	lr, r2
   38bd4:	b	388f8 <__assert_fail@plt+0x26d54>
   38bd8:	umull	sl, fp, r6, ip
   38bdc:	mov	r3, r1
   38be0:	mov	r2, fp
   38be4:	umlal	r2, r3, r7, ip
   38be8:	cmp	r3, #0
   38bec:	strd	r2, [sp, #16]
   38bf0:	bne	38f44 <__assert_fail@plt+0x273a0>
   38bf4:	mov	r2, sl
   38bf8:	ldr	r3, [sp, #16]
   38bfc:	b	3889c <__assert_fail@plt+0x26cf8>
   38c00:	umull	sl, fp, r0, ip
   38c04:	mov	r7, lr
   38c08:	mov	r6, fp
   38c0c:	umlal	r6, r7, r1, ip
   38c10:	cmp	r7, #0
   38c14:	bne	38f60 <__assert_fail@plt+0x273bc>
   38c18:	mov	r2, sl
   38c1c:	mov	r3, r6
   38c20:	b	38604 <__assert_fail@plt+0x26a60>
   38c24:	umull	r6, r7, r2, ip
   38c28:	mov	fp, r1
   38c2c:	mov	sl, r7
   38c30:	umlal	sl, fp, r3, ip
   38c34:	cmp	fp, #0
   38c38:	bne	38dd4 <__assert_fail@plt+0x27230>
   38c3c:	mov	r0, r6
   38c40:	mov	r1, sl
   38c44:	b	385e8 <__assert_fail@plt+0x26a44>
   38c48:	umull	r0, r1, r6, ip
   38c4c:	mov	r3, r7
   38c50:	mov	r2, r1
   38c54:	strd	r0, [sp, #16]
   38c58:	umlal	r2, r3, lr, ip
   38c5c:	cmp	r3, #0
   38c60:	beq	38918 <__assert_fail@plt+0x26d74>
   38c64:	ldrd	sl, [sp]
   38c68:	mov	r7, #1
   38c6c:	ldr	r0, [sp, #16]
   38c70:	ldr	r3, [sp, #20]
   38c74:	mul	r2, r6, fp
   38c78:	mla	r2, lr, sl, r2
   38c7c:	add	r2, r2, r3
   38c80:	b	38918 <__assert_fail@plt+0x26d74>
   38c84:	umull	sl, fp, r2, ip
   38c88:	mov	r0, fp
   38c8c:	umlal	r0, r1, r3, ip
   38c90:	cmp	r1, #0
   38c94:	bne	38f7c <__assert_fail@plt+0x273d8>
   38c98:	mov	r6, sl
   38c9c:	mov	lr, r0
   38ca0:	b	389ec <__assert_fail@plt+0x26e48>
   38ca4:	umull	r6, r7, r0, ip
   38ca8:	mov	fp, lr
   38cac:	mov	sl, r7
   38cb0:	umlal	sl, fp, r1, ip
   38cb4:	cmp	fp, #0
   38cb8:	bne	38eb4 <__assert_fail@plt+0x27310>
   38cbc:	mov	r2, r6
   38cc0:	mov	r3, sl
   38cc4:	b	387c8 <__assert_fail@plt+0x26c24>
   38cc8:	umull	r0, r1, sl, ip
   38ccc:	mov	r3, r7
   38cd0:	mov	r2, r1
   38cd4:	umlal	r2, r3, lr, ip
   38cd8:	cmp	r3, #0
   38cdc:	beq	38918 <__assert_fail@plt+0x26d74>
   38ce0:	ldr	r3, [sp, #4]
   38ce4:	mov	r7, #1
   38ce8:	mul	r2, sl, r3
   38cec:	ldr	r3, [sp]
   38cf0:	mla	r2, lr, r3, r2
   38cf4:	add	r2, r2, r1
   38cf8:	b	38918 <__assert_fail@plt+0x26d74>
   38cfc:	umull	r6, r7, r0, ip
   38d00:	mov	r3, r1
   38d04:	mov	r2, r7
   38d08:	umlal	r2, r3, fp, ip
   38d0c:	cmp	r3, #0
   38d10:	strd	r2, [sp, #16]
   38d14:	bne	38f98 <__assert_fail@plt+0x273f4>
   38d18:	mov	r2, r6
   38d1c:	ldr	r3, [sp, #16]
   38d20:	b	38790 <__assert_fail@plt+0x26bec>
   38d24:	umull	sl, fp, r2, ip
   38d28:	mov	r7, lr
   38d2c:	mov	r6, fp
   38d30:	umlal	r6, r7, r3, ip
   38d34:	cmp	r7, #0
   38d38:	bne	38d64 <__assert_fail@plt+0x271c0>
   38d3c:	mov	r0, sl
   38d40:	mov	r1, r6
   38d44:	b	387ac <__assert_fail@plt+0x26c08>
   38d48:	ldrd	r2, [sp]
   38d4c:	mov	r0, sl
   38d50:	mov	r1, #1
   38d54:	mul	r6, r6, r3
   38d58:	mla	r7, r2, r7, r6
   38d5c:	add	fp, r7, fp
   38d60:	b	38950 <__assert_fail@plt+0x26dac>
   38d64:	ldrd	r6, [sp]
   38d68:	mov	r0, sl
   38d6c:	mov	lr, #1
   38d70:	mul	r2, r2, r7
   38d74:	mla	r1, r3, r6, r2
   38d78:	add	r1, r1, fp
   38d7c:	b	387ac <__assert_fail@plt+0x26c08>
   38d80:	ldrd	r0, [sp]
   38d84:	mov	r6, sl
   38d88:	mov	r7, #1
   38d8c:	mul	r2, r2, r1
   38d90:	mla	lr, r3, r0, r2
   38d94:	add	lr, lr, fp
   38d98:	b	3865c <__assert_fail@plt+0x26ab8>
   38d9c:	ldm	sp, {r0, r3}
   38da0:	mov	r2, sl
   38da4:	mov	r1, #1
   38da8:	mul	r3, r6, r3
   38dac:	mla	r3, r0, r7, r3
   38db0:	add	r3, r3, fp
   38db4:	b	385c8 <__assert_fail@plt+0x26a24>
   38db8:	ldrd	r6, [sp]
   38dbc:	mov	r0, sl
   38dc0:	mov	lr, #1
   38dc4:	mul	r2, r2, r7
   38dc8:	mla	r1, r3, r6, r2
   38dcc:	add	r1, r1, fp
   38dd0:	b	387e4 <__assert_fail@plt+0x26c40>
   38dd4:	ldrd	sl, [sp]
   38dd8:	mov	r0, r6
   38ddc:	mov	lr, #1
   38de0:	mul	r2, r2, fp
   38de4:	mla	r1, r3, sl, r2
   38de8:	add	r1, r1, r7
   38dec:	b	385e8 <__assert_fail@plt+0x26a44>
   38df0:	ldm	sp, {r1, r3}
   38df4:	mov	r2, r6
   38df8:	mov	lr, #1
   38dfc:	mul	r3, r0, r3
   38e00:	mla	r3, fp, r1, r3
   38e04:	add	r3, r3, r7
   38e08:	b	3863c <__assert_fail@plt+0x26a98>
   38e0c:	ldrd	r2, [sp]
   38e10:	mov	r0, sl
   38e14:	mov	r1, #1
   38e18:	mul	r6, r6, r3
   38e1c:	mla	r7, r2, r7, r6
   38e20:	add	fp, r7, fp
   38e24:	b	38770 <__assert_fail@plt+0x26bcc>
   38e28:	mul	r3, r6, r1
   38e2c:	mov	lr, #1
   38e30:	mov	r6, sl
   38e34:	mla	r7, ip, r7, r3
   38e38:	add	r7, r7, fp
   38e3c:	b	386c8 <__assert_fail@plt+0x26b24>
   38e40:	ldrd	r2, [sp]
   38e44:	mov	r1, #1
   38e48:	ldr	sl, [sp, #16]
   38e4c:	mul	lr, r6, r3
   38e50:	ldr	r3, [sp, #20]
   38e54:	mla	lr, r2, r7, lr
   38e58:	add	lr, lr, r3
   38e5c:	b	388f8 <__assert_fail@plt+0x26d54>
   38e60:	ldm	sp, {r1, r3}
   38e64:	mov	r2, r6
   38e68:	mov	lr, #1
   38e6c:	mul	r3, r0, r3
   38e70:	mla	r3, fp, r1, r3
   38e74:	add	r3, r3, r7
   38e78:	b	387c8 <__assert_fail@plt+0x26c24>
   38e7c:	ldm	sp, {r0, r3}
   38e80:	mov	r2, sl
   38e84:	mov	r1, #1
   38e88:	mul	r3, r6, r3
   38e8c:	mla	r3, r0, r7, r3
   38e90:	add	r3, r3, fp
   38e94:	b	389cc <__assert_fail@plt+0x26e28>
   38e98:	ldrd	r2, [sp]
   38e9c:	mov	r0, sl
   38ea0:	mov	r1, #1
   38ea4:	mul	r6, r6, r3
   38ea8:	mla	r7, r2, r7, r6
   38eac:	add	fp, r7, fp
   38eb0:	b	3883c <__assert_fail@plt+0x26c98>
   38eb4:	ldrd	sl, [sp]
   38eb8:	mov	r2, r6
   38ebc:	mov	lr, #1
   38ec0:	mul	r3, r0, fp
   38ec4:	mla	r3, r1, sl, r3
   38ec8:	add	r3, r3, r7
   38ecc:	b	387c8 <__assert_fail@plt+0x26c24>
   38ed0:	ldrd	sl, [sp]
   38ed4:	mov	r0, r6
   38ed8:	mov	lr, #1
   38edc:	mul	r2, r2, fp
   38ee0:	mla	r1, r3, sl, r2
   38ee4:	add	r1, r1, r7
   38ee8:	b	38620 <__assert_fail@plt+0x26a7c>
   38eec:	movw	r3, #51800	; 0xca58
   38ef0:	movt	r3, #3
   38ef4:	movw	r1, #51624	; 0xc9a8
   38ef8:	movt	r1, #3
   38efc:	movw	r0, #51640	; 0xc9b8
   38f00:	movt	r0, #3
   38f04:	mov	r2, #85	; 0x55
   38f08:	bl	11ba4 <__assert_fail@plt>
   38f0c:	ldrd	sl, [sp]
   38f10:	mov	r2, r6
   38f14:	mov	lr, #1
   38f18:	mul	r3, r0, fp
   38f1c:	mla	r3, r1, sl, r3
   38f20:	add	r3, r3, r7
   38f24:	b	3863c <__assert_fail@plt+0x26a98>
   38f28:	ldrd	r6, [sp]
   38f2c:	mov	r2, sl
   38f30:	mov	lr, #1
   38f34:	mul	r3, r0, r7
   38f38:	mla	r3, r1, r6, r3
   38f3c:	add	r3, r3, fp
   38f40:	b	3863c <__assert_fail@plt+0x26a98>
   38f44:	ldm	sp, {r0, r3}
   38f48:	mov	r2, sl
   38f4c:	mov	r1, #1
   38f50:	mul	r3, r6, r3
   38f54:	mla	r3, r0, r7, r3
   38f58:	add	r3, r3, fp
   38f5c:	b	3889c <__assert_fail@plt+0x26cf8>
   38f60:	ldrd	r6, [sp]
   38f64:	mov	r2, sl
   38f68:	mov	lr, #1
   38f6c:	mul	r3, r0, r7
   38f70:	mla	r3, r1, r6, r3
   38f74:	add	r3, r3, fp
   38f78:	b	38604 <__assert_fail@plt+0x26a60>
   38f7c:	ldrd	r0, [sp]
   38f80:	mov	r6, sl
   38f84:	mov	r7, #1
   38f88:	mul	r2, r2, r1
   38f8c:	mla	lr, r3, r0, r2
   38f90:	add	lr, lr, fp
   38f94:	b	389ec <__assert_fail@plt+0x26e48>
   38f98:	ldm	sp, {r1, r3}
   38f9c:	mov	r2, r6
   38fa0:	mov	lr, #1
   38fa4:	mul	r3, r0, r3
   38fa8:	mla	r3, fp, r1, r3
   38fac:	add	r3, r3, r7
   38fb0:	b	38790 <__assert_fail@plt+0x26bec>
   38fb4:	cmp	r1, #0
   38fb8:	cmpne	r0, #0
   38fbc:	beq	39008 <__assert_fail@plt+0x27464>
   38fc0:	strd	r4, [sp, #-16]!
   38fc4:	umull	r4, r5, r0, r1
   38fc8:	str	r6, [sp, #8]
   38fcc:	str	lr, [sp, #12]
   38fd0:	adds	r3, r5, #0
   38fd4:	movne	r3, #1
   38fd8:	cmp	r4, #0
   38fdc:	blt	38fe8 <__assert_fail@plt+0x27444>
   38fe0:	cmp	r3, #0
   38fe4:	beq	39014 <__assert_fail@plt+0x27470>
   38fe8:	bl	119b8 <__errno_location@plt>
   38fec:	mov	r3, #12
   38ff0:	ldrd	r4, [sp]
   38ff4:	ldr	r6, [sp, #8]
   38ff8:	add	sp, sp, #12
   38ffc:	str	r3, [r0]
   39000:	mov	r0, #0
   39004:	pop	{pc}		; (ldr pc, [sp], #4)
   39008:	mov	r1, #1
   3900c:	mov	r0, r1
   39010:	b	116ac <calloc@plt>
   39014:	ldrd	r4, [sp]
   39018:	ldr	r6, [sp, #8]
   3901c:	ldr	lr, [sp, #12]
   39020:	add	sp, sp, #16
   39024:	b	116ac <calloc@plt>
   39028:	cmp	r0, #0
   3902c:	beq	39038 <__assert_fail@plt+0x27494>
   39030:	blt	39040 <__assert_fail@plt+0x2749c>
   39034:	b	118f8 <malloc@plt>
   39038:	mov	r0, #1
   3903c:	b	118f8 <malloc@plt>
   39040:	str	r4, [sp, #-8]!
   39044:	str	lr, [sp, #4]
   39048:	bl	119b8 <__errno_location@plt>
   3904c:	mov	r3, #12
   39050:	ldr	r4, [sp]
   39054:	add	sp, sp, #4
   39058:	str	r3, [r0]
   3905c:	mov	r0, #0
   39060:	pop	{pc}		; (ldr pc, [sp], #4)
   39064:	cmp	r0, #0
   39068:	beq	39090 <__assert_fail@plt+0x274ec>
   3906c:	cmp	r1, #0
   39070:	str	r4, [sp, #-8]!
   39074:	str	lr, [sp, #4]
   39078:	beq	39098 <__assert_fail@plt+0x274f4>
   3907c:	blt	390ac <__assert_fail@plt+0x27508>
   39080:	ldr	r4, [sp]
   39084:	ldr	lr, [sp, #4]
   39088:	add	sp, sp, #8
   3908c:	b	117f0 <realloc@plt>
   39090:	mov	r0, r1
   39094:	b	39028 <__assert_fail@plt+0x27484>
   39098:	bl	19610 <__assert_fail@plt+0x7a6c>
   3909c:	ldr	r4, [sp]
   390a0:	add	sp, sp, #4
   390a4:	mov	r0, #0
   390a8:	pop	{pc}		; (ldr pc, [sp], #4)
   390ac:	bl	119b8 <__errno_location@plt>
   390b0:	mov	r3, #12
   390b4:	str	r3, [r0]
   390b8:	b	3909c <__assert_fail@plt+0x274f8>
   390bc:	cmp	r1, #1
   390c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   390c4:	strd	r6, [sp, #8]
   390c8:	str	r8, [sp, #16]
   390cc:	str	lr, [sp, #20]
   390d0:	bls	391f4 <__assert_fail@plt+0x27650>
   390d4:	mov	r8, #1
   390d8:	mov	r4, #0
   390dc:	mov	lr, r8
   390e0:	mov	r3, r8
   390e4:	mvn	r5, #0
   390e8:	b	39104 <__assert_fail@plt+0x27560>
   390ec:	sub	r8, r3, r5
   390f0:	mov	r4, r3
   390f4:	mov	lr, #1
   390f8:	add	r3, r4, lr
   390fc:	cmp	r1, r3
   39100:	bls	39138 <__assert_fail@plt+0x27594>
   39104:	add	ip, r0, r5
   39108:	ldrb	r6, [r0, r3]
   3910c:	ldrb	ip, [ip, lr]
   39110:	cmp	r6, ip
   39114:	bcc	390ec <__assert_fail@plt+0x27548>
   39118:	beq	391cc <__assert_fail@plt+0x27628>
   3911c:	mov	r8, #1
   39120:	mov	r5, r4
   39124:	mov	lr, r8
   39128:	add	r4, r4, r8
   3912c:	add	r3, r4, lr
   39130:	cmp	r1, r3
   39134:	bhi	39104 <__assert_fail@plt+0x27560>
   39138:	mov	r7, #1
   3913c:	mov	r4, #0
   39140:	str	r8, [r2]
   39144:	mov	lr, r7
   39148:	mov	r3, r7
   3914c:	mvn	r6, #0
   39150:	b	3916c <__assert_fail@plt+0x275c8>
   39154:	sub	r7, r3, r6
   39158:	mov	r4, r3
   3915c:	mov	lr, #1
   39160:	add	r3, r4, lr
   39164:	cmp	r1, r3
   39168:	bls	391a0 <__assert_fail@plt+0x275fc>
   3916c:	add	ip, r0, r6
   39170:	ldrb	r8, [r0, r3]
   39174:	ldrb	ip, [ip, lr]
   39178:	cmp	r8, ip
   3917c:	bhi	39154 <__assert_fail@plt+0x275b0>
   39180:	beq	391e0 <__assert_fail@plt+0x2763c>
   39184:	mov	r7, #1
   39188:	mov	r6, r4
   3918c:	mov	lr, r7
   39190:	add	r4, r4, r7
   39194:	add	r3, r4, lr
   39198:	cmp	r1, r3
   3919c:	bhi	3916c <__assert_fail@plt+0x275c8>
   391a0:	add	r6, r6, #1
   391a4:	add	r0, r5, #1
   391a8:	cmp	r6, r0
   391ac:	bcc	391b8 <__assert_fail@plt+0x27614>
   391b0:	mov	r0, r6
   391b4:	str	r7, [r2]
   391b8:	ldrd	r4, [sp]
   391bc:	ldrd	r6, [sp, #8]
   391c0:	ldr	r8, [sp, #16]
   391c4:	add	sp, sp, #20
   391c8:	pop	{pc}		; (ldr pc, [sp], #4)
   391cc:	cmp	lr, r8
   391d0:	addeq	r4, r4, lr
   391d4:	addne	lr, lr, #1
   391d8:	moveq	lr, #1
   391dc:	b	390f8 <__assert_fail@plt+0x27554>
   391e0:	cmp	lr, r7
   391e4:	addeq	r4, r4, lr
   391e8:	addne	lr, lr, #1
   391ec:	moveq	lr, #1
   391f0:	b	39160 <__assert_fail@plt+0x275bc>
   391f4:	mov	r7, #1
   391f8:	mov	r6, #0
   391fc:	b	391b0 <__assert_fail@plt+0x2760c>
   39200:	cmp	r3, #2
   39204:	strd	r4, [sp, #-36]!	; 0xffffffdc
   39208:	mov	r4, r3
   3920c:	strd	r6, [sp, #8]
   39210:	mov	r5, r0
   39214:	strd	r8, [sp, #16]
   39218:	strd	sl, [sp, #24]
   3921c:	mov	fp, r1
   39220:	mov	sl, r2
   39224:	str	lr, [sp, #32]
   39228:	sub	sp, sp, #1056	; 0x420
   3922c:	sub	sp, sp, #12
   39230:	bls	39620 <__assert_fail@plt+0x27a7c>
   39234:	add	r6, sp, #40	; 0x28
   39238:	mov	r1, r3
   3923c:	sub	r2, r6, #4
   39240:	mov	r0, sl
   39244:	bl	390bc <__assert_fail@plt+0x27518>
   39248:	ldr	r3, [sp, #36]	; 0x24
   3924c:	str	r3, [sp, #4]
   39250:	str	r0, [sp, #8]
   39254:	mov	r3, r6
   39258:	add	r2, sp, #1056	; 0x420
   3925c:	add	r3, r3, #8
   39260:	str	r4, [r3, #-8]
   39264:	add	r2, r2, #8
   39268:	str	r4, [r3, #-4]
   3926c:	cmp	r3, r2
   39270:	bne	39258 <__assert_fail@plt+0x276b4>
   39274:	ldr	r3, [sp, #4]
   39278:	cmp	r4, #0
   3927c:	add	r1, sl, r3
   39280:	beq	39434 <__assert_fail@plt+0x27890>
   39284:	sub	r3, r4, #1
   39288:	sub	r2, sl, #1
   3928c:	add	ip, sl, r3
   39290:	str	r3, [sp]
   39294:	ldrb	r0, [r2, #1]!
   39298:	add	lr, sp, #1056	; 0x420
   3929c:	add	lr, lr, #8
   392a0:	mvn	r3, r2
   392a4:	add	r0, lr, r0, lsl #2
   392a8:	cmp	ip, r2
   392ac:	add	r3, r3, r4
   392b0:	add	r3, sl, r3
   392b4:	str	r3, [r0, #-1024]	; 0xfffffc00
   392b8:	bne	39294 <__assert_fail@plt+0x276f0>
   392bc:	mov	r0, sl
   392c0:	ldr	r2, [sp, #8]
   392c4:	bl	117c0 <memcmp@plt>
   392c8:	cmp	r0, #0
   392cc:	beq	39480 <__assert_fail@plt+0x278dc>
   392d0:	ldr	r2, [sp, #8]
   392d4:	sub	r8, sl, #1
   392d8:	mov	r7, #0
   392dc:	rsb	r9, sl, #1
   392e0:	sub	r3, r4, r2
   392e4:	sub	r1, r2, #1
   392e8:	cmp	r3, r2
   392ec:	movcc	r3, r2
   392f0:	str	r1, [sp, #16]
   392f4:	add	r1, sl, r1
   392f8:	add	r3, r3, #1
   392fc:	str	r1, [sp, #12]
   39300:	str	r3, [sp, #20]
   39304:	ldr	r3, [sp]
   39308:	add	r8, r8, r3
   3930c:	mov	r3, r2
   39310:	add	r2, sl, r2
   39314:	str	r2, [sp, #4]
   39318:	rsb	r2, r3, #1
   3931c:	str	r2, [sp, #8]
   39320:	mov	r2, fp
   39324:	mov	fp, r3
   39328:	b	39330 <__assert_fail@plt+0x2778c>
   3932c:	mov	r2, r6
   39330:	add	r6, r7, r4
   39334:	add	r0, r5, r2
   39338:	mov	r1, #0
   3933c:	sub	r2, r6, r2
   39340:	bl	11a24 <memchr@plt>
   39344:	adds	r2, r6, #0
   39348:	movne	r2, #1
   3934c:	cmp	r0, #0
   39350:	moveq	r0, r2
   39354:	movne	r0, #0
   39358:	cmp	r0, #0
   3935c:	beq	39450 <__assert_fail@plt+0x278ac>
   39360:	add	r2, r5, r6
   39364:	add	r3, sp, #1056	; 0x420
   39368:	ldrb	r2, [r2, #-1]
   3936c:	add	r3, r3, #8
   39370:	add	r2, r3, r2, lsl #2
   39374:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   39378:	cmp	r2, #0
   3937c:	addne	r7, r7, r2
   39380:	bne	3932c <__assert_fail@plt+0x27788>
   39384:	ldr	r3, [sp]
   39388:	cmp	fp, r3
   3938c:	bcs	393d4 <__assert_fail@plt+0x27830>
   39390:	ldr	r3, [sp, #4]
   39394:	add	r2, r7, fp
   39398:	add	r1, r5, r2
   3939c:	ldrb	r2, [r5, r2]
   393a0:	ldrb	r0, [r3]
   393a4:	cmp	r2, r0
   393a8:	movne	lr, fp
   393ac:	bne	39424 <__assert_fail@plt+0x27880>
   393b0:	mov	r2, r3
   393b4:	b	393c8 <__assert_fail@plt+0x27824>
   393b8:	ldrb	r0, [r2, #1]!
   393bc:	ldrb	r3, [r1, #1]!
   393c0:	cmp	r0, r3
   393c4:	bne	39424 <__assert_fail@plt+0x27880>
   393c8:	cmp	r8, r2
   393cc:	add	lr, r9, r2
   393d0:	bne	393b8 <__assert_fail@plt+0x27814>
   393d4:	ldr	r3, [sp, #16]
   393d8:	cmn	r3, #1
   393dc:	beq	3941c <__assert_fail@plt+0x27878>
   393e0:	add	r2, r7, r3
   393e4:	ldr	r3, [sp, #12]
   393e8:	add	r1, r5, r2
   393ec:	ldrb	r2, [r5, r2]
   393f0:	ldrb	r0, [r3]
   393f4:	cmp	r2, r0
   393f8:	moveq	r2, r3
   393fc:	beq	39414 <__assert_fail@plt+0x27870>
   39400:	b	39474 <__assert_fail@plt+0x278d0>
   39404:	ldrb	r0, [r2, #-1]!
   39408:	ldrb	r3, [r1, #-1]!
   3940c:	cmp	r0, r3
   39410:	bne	39474 <__assert_fail@plt+0x278d0>
   39414:	cmp	sl, r2
   39418:	bne	39404 <__assert_fail@plt+0x27860>
   3941c:	add	r0, r5, r7
   39420:	b	39454 <__assert_fail@plt+0x278b0>
   39424:	ldr	r3, [sp, #8]
   39428:	add	r7, r3, r7
   3942c:	add	r7, lr, r7
   39430:	b	3932c <__assert_fail@plt+0x27788>
   39434:	mov	r0, sl
   39438:	ldr	r2, [sp, #8]
   3943c:	bl	117c0 <memcmp@plt>
   39440:	cmp	r0, #0
   39444:	mvnne	r3, #0
   39448:	strne	r3, [sp]
   3944c:	bne	392d0 <__assert_fail@plt+0x2772c>
   39450:	mov	r0, #0
   39454:	add	sp, sp, #1056	; 0x420
   39458:	add	sp, sp, #12
   3945c:	ldrd	r4, [sp]
   39460:	ldrd	r6, [sp, #8]
   39464:	ldrd	r8, [sp, #16]
   39468:	ldrd	sl, [sp, #24]
   3946c:	add	sp, sp, #32
   39470:	pop	{pc}		; (ldr pc, [sp], #4)
   39474:	ldr	r3, [sp, #20]
   39478:	add	r7, r7, r3
   3947c:	b	3932c <__assert_fail@plt+0x27788>
   39480:	ldr	r2, [sp, #8]
   39484:	sub	r8, r4, #2
   39488:	rsb	r9, sl, #1
   3948c:	add	r8, sl, r8
   39490:	mov	r7, r0
   39494:	str	sl, [sp, #12]
   39498:	sub	r3, r2, #1
   3949c:	str	r3, [sp, #28]
   394a0:	add	r3, sl, r3
   394a4:	mov	sl, r0
   394a8:	str	r3, [sp, #24]
   394ac:	ldr	r3, [sp, #4]
   394b0:	sub	r3, r4, r3
   394b4:	str	r3, [sp, #20]
   394b8:	rsb	r3, r2, #1
   394bc:	mov	r2, fp
   394c0:	str	r3, [sp, #16]
   394c4:	b	394e4 <__assert_fail@plt+0x27940>
   394c8:	ldr	r2, [sp, #4]
   394cc:	cmp	sl, #0
   394d0:	cmpne	r3, r2
   394d4:	mov	sl, #0
   394d8:	ldrcc	r3, [sp, #20]
   394dc:	add	r7, r7, r3
   394e0:	mov	r2, r6
   394e4:	add	r6, r7, r4
   394e8:	add	r0, r5, r2
   394ec:	mov	r1, #0
   394f0:	sub	r2, r6, r2
   394f4:	bl	11a24 <memchr@plt>
   394f8:	adds	r3, r6, #0
   394fc:	movne	r3, #1
   39500:	cmp	r0, #0
   39504:	moveq	r0, r3
   39508:	movne	r0, #0
   3950c:	cmp	r0, #0
   39510:	beq	39450 <__assert_fail@plt+0x278ac>
   39514:	add	r3, r5, r6
   39518:	add	r2, sp, #1056	; 0x420
   3951c:	ldrb	r3, [r3, #-1]
   39520:	add	r2, r2, #8
   39524:	add	r3, r2, r3, lsl #2
   39528:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   3952c:	cmp	r3, #0
   39530:	bne	394c8 <__assert_fail@plt+0x27924>
   39534:	ldr	r3, [sp, #8]
   39538:	cmp	sl, r3
   3953c:	movcc	r0, r3
   39540:	ldr	r3, [sp]
   39544:	movcs	r0, sl
   39548:	cmp	r0, r3
   3954c:	bcs	39590 <__assert_fail@plt+0x279ec>
   39550:	ldr	r3, [sp, #12]
   39554:	add	r1, r7, r0
   39558:	add	r2, r5, r1
   3955c:	ldrb	r1, [r5, r1]
   39560:	ldrb	ip, [r3, r0]
   39564:	add	r3, r3, r0
   39568:	cmp	ip, r1
   3956c:	beq	39584 <__assert_fail@plt+0x279e0>
   39570:	b	3960c <__assert_fail@plt+0x27a68>
   39574:	ldrb	ip, [r3, #1]!
   39578:	ldrb	r1, [r2, #1]!
   3957c:	cmp	ip, r1
   39580:	bne	3960c <__assert_fail@plt+0x27a68>
   39584:	cmp	r8, r3
   39588:	add	r0, r9, r3
   3958c:	bne	39574 <__assert_fail@plt+0x279d0>
   39590:	ldr	r3, [sp, #8]
   39594:	cmp	sl, r3
   39598:	bcs	3963c <__assert_fail@plt+0x27a98>
   3959c:	ldr	r3, [sp, #28]
   395a0:	add	r2, r7, r3
   395a4:	ldr	r3, [sp, #24]
   395a8:	ldrb	r1, [r3]
   395ac:	add	r3, r5, r2
   395b0:	ldrb	r2, [r5, r2]
   395b4:	cmp	r1, r2
   395b8:	ldrne	lr, [sp, #8]
   395bc:	bne	395f0 <__assert_fail@plt+0x27a4c>
   395c0:	add	ip, r7, sl
   395c4:	add	fp, r5, r7
   395c8:	add	ip, ip, r5
   395cc:	ldr	r2, [sp, #24]
   395d0:	b	395e4 <__assert_fail@plt+0x27a40>
   395d4:	ldrb	r0, [r2, #-1]!
   395d8:	ldrb	r1, [r3, #-1]!
   395dc:	cmp	r0, r1
   395e0:	bne	395f0 <__assert_fail@plt+0x27a4c>
   395e4:	cmp	ip, r3
   395e8:	sub	lr, r3, fp
   395ec:	bne	395d4 <__assert_fail@plt+0x27a30>
   395f0:	add	sl, sl, #1
   395f4:	cmp	sl, lr
   395f8:	bhi	3941c <__assert_fail@plt+0x27878>
   395fc:	ldr	r3, [sp, #4]
   39600:	ldr	sl, [sp, #20]
   39604:	add	r7, r7, r3
   39608:	b	394e0 <__assert_fail@plt+0x2793c>
   3960c:	ldr	r3, [sp, #16]
   39610:	mov	sl, #0
   39614:	add	r7, r3, r7
   39618:	add	r7, r0, r7
   3961c:	b	394e0 <__assert_fail@plt+0x2793c>
   39620:	mov	r3, #1
   39624:	sub	r2, r4, #1
   39628:	add	r6, sp, #40	; 0x28
   3962c:	str	r3, [sp, #4]
   39630:	str	r2, [sp, #8]
   39634:	str	r3, [sp, #36]	; 0x24
   39638:	b	39254 <__assert_fail@plt+0x276b0>
   3963c:	mov	lr, r3
   39640:	b	395f0 <__assert_fail@plt+0x27a4c>
   39644:	strd	r4, [sp, #-36]!	; 0xffffffdc
   39648:	strd	r6, [sp, #8]
   3964c:	strd	r8, [sp, #16]
   39650:	strd	sl, [sp, #24]
   39654:	str	lr, [sp, #32]
   39658:	sub	sp, sp, #44	; 0x2c
   3965c:	ldrb	r4, [r0]
   39660:	ldrb	r3, [r1]
   39664:	cmp	r4, #0
   39668:	beq	39a1c <__assert_fail@plt+0x27e78>
   3966c:	cmp	r3, #0
   39670:	beq	3973c <__assert_fail@plt+0x27b98>
   39674:	mov	r8, r0
   39678:	add	r2, r1, #1
   3967c:	mov	ip, r3
   39680:	mov	lr, #1
   39684:	b	39690 <__assert_fail@plt+0x27aec>
   39688:	cmp	ip, #0
   3968c:	beq	396b8 <__assert_fail@plt+0x27b14>
   39690:	cmp	ip, r4
   39694:	movne	lr, #0
   39698:	andeq	lr, lr, #1
   3969c:	ldrb	r4, [r8, #1]!
   396a0:	mov	r5, r2
   396a4:	ldrb	ip, [r2], #1
   396a8:	cmp	r4, #0
   396ac:	bne	39688 <__assert_fail@plt+0x27ae4>
   396b0:	cmp	ip, #0
   396b4:	bne	3971c <__assert_fail@plt+0x27b78>
   396b8:	cmp	lr, #0
   396bc:	bne	3973c <__assert_fail@plt+0x27b98>
   396c0:	mov	r7, r1
   396c4:	mov	r6, r0
   396c8:	mov	r1, r3
   396cc:	add	r0, r0, #1
   396d0:	bl	11994 <strchr@plt>
   396d4:	subs	r4, r0, #0
   396d8:	sub	r7, r5, r7
   396dc:	beq	3971c <__assert_fail@plt+0x27b78>
   396e0:	cmp	r7, #1
   396e4:	beq	3971c <__assert_fail@plt+0x27b78>
   396e8:	add	r6, r6, r7
   396ec:	sub	r5, r5, r7
   396f0:	cmp	r6, r4
   396f4:	subcs	r6, r6, r4
   396f8:	movcc	r6, #1
   396fc:	cmp	r7, #31
   39700:	bls	39744 <__assert_fail@plt+0x27ba0>
   39704:	mov	r0, r4
   39708:	mov	r3, r7
   3970c:	mov	r2, r5
   39710:	mov	r1, r6
   39714:	bl	39200 <__assert_fail@plt+0x2765c>
   39718:	mov	r4, r0
   3971c:	mov	r0, r4
   39720:	add	sp, sp, #44	; 0x2c
   39724:	ldrd	r4, [sp]
   39728:	ldrd	r6, [sp, #8]
   3972c:	ldrd	r8, [sp, #16]
   39730:	ldrd	sl, [sp, #24]
   39734:	add	sp, sp, #32
   39738:	pop	{pc}		; (ldr pc, [sp], #4)
   3973c:	mov	r4, r0
   39740:	b	3971c <__assert_fail@plt+0x27b78>
   39744:	cmp	r7, #2
   39748:	bls	39a2c <__assert_fail@plt+0x27e88>
   3974c:	add	r2, sp, #36	; 0x24
   39750:	mov	r1, r7
   39754:	mov	r0, r5
   39758:	bl	390bc <__assert_fail@plt+0x27518>
   3975c:	ldr	r3, [sp, #36]	; 0x24
   39760:	mov	r8, r0
   39764:	str	r3, [sp, #16]
   39768:	mov	r2, r8
   3976c:	add	r1, r5, r3
   39770:	mov	r0, r5
   39774:	bl	117c0 <memcmp@plt>
   39778:	cmp	r0, #0
   3977c:	bne	398e0 <__assert_fail@plt+0x27d3c>
   39780:	sub	r2, r8, #1
   39784:	mov	r3, r8
   39788:	str	r7, [sp, #4]
   3978c:	sub	r8, r7, #1
   39790:	rsb	r9, r5, #1
   39794:	str	r5, [sp, #8]
   39798:	str	r2, [sp, #20]
   3979c:	add	r2, r5, r2
   397a0:	add	r8, r8, r5
   397a4:	mov	sl, r0
   397a8:	mov	r5, r0
   397ac:	str	r2, [sp, #28]
   397b0:	ldr	r2, [sp, #16]
   397b4:	sub	r2, r7, r2
   397b8:	mov	r7, r3
   397bc:	str	r2, [sp, #24]
   397c0:	rsb	r2, r3, #1
   397c4:	str	r2, [sp, #12]
   397c8:	mov	r2, r6
   397cc:	ldr	r3, [sp, #4]
   397d0:	add	r0, r4, r2
   397d4:	mov	r1, #0
   397d8:	add	fp, r3, sl
   397dc:	sub	r2, fp, r2
   397e0:	bl	11a24 <memchr@plt>
   397e4:	clz	r0, r0
   397e8:	cmp	fp, #0
   397ec:	lsr	r0, r0, #5
   397f0:	moveq	r0, #0
   397f4:	cmp	r0, #0
   397f8:	beq	3973c <__assert_fail@plt+0x27b98>
   397fc:	ldr	r3, [sp, #4]
   39800:	cmp	r7, r5
   39804:	movcs	r0, r7
   39808:	movcc	r0, r5
   3980c:	cmp	r3, r0
   39810:	bls	39854 <__assert_fail@plt+0x27cb0>
   39814:	ldr	r3, [sp, #8]
   39818:	add	r1, r0, sl
   3981c:	add	r2, r4, r1
   39820:	ldrb	r1, [r4, r1]
   39824:	ldrb	ip, [r3, r0]
   39828:	add	r3, r3, r0
   3982c:	cmp	r1, ip
   39830:	beq	39848 <__assert_fail@plt+0x27ca4>
   39834:	b	398cc <__assert_fail@plt+0x27d28>
   39838:	ldrb	ip, [r3, #1]!
   3983c:	ldrb	r1, [r2, #1]!
   39840:	cmp	ip, r1
   39844:	bne	398cc <__assert_fail@plt+0x27d28>
   39848:	cmp	r8, r3
   3984c:	add	r0, r9, r3
   39850:	bne	39838 <__assert_fail@plt+0x27c94>
   39854:	cmp	r7, r5
   39858:	bls	39a44 <__assert_fail@plt+0x27ea0>
   3985c:	ldr	r3, [sp, #20]
   39860:	ldr	r0, [sp, #28]
   39864:	add	r2, sl, r3
   39868:	add	r3, r4, r2
   3986c:	ldrb	r2, [r4, r2]
   39870:	ldrb	r1, [r0]
   39874:	cmp	r1, r2
   39878:	bne	39a44 <__assert_fail@plt+0x27ea0>
   3987c:	add	ip, r5, sl
   39880:	mov	r2, r0
   39884:	add	ip, ip, r4
   39888:	add	r6, r4, sl
   3988c:	b	398a0 <__assert_fail@plt+0x27cfc>
   39890:	ldrb	r0, [r2, #-1]!
   39894:	ldrb	r1, [r3, #-1]!
   39898:	cmp	r0, r1
   3989c:	bne	398ac <__assert_fail@plt+0x27d08>
   398a0:	cmp	ip, r3
   398a4:	sub	lr, r3, r6
   398a8:	bne	39890 <__assert_fail@plt+0x27cec>
   398ac:	add	r5, r5, #1
   398b0:	cmp	r5, lr
   398b4:	bhi	399f4 <__assert_fail@plt+0x27e50>
   398b8:	ldr	r3, [sp, #16]
   398bc:	ldr	r5, [sp, #24]
   398c0:	add	sl, sl, r3
   398c4:	mov	r2, fp
   398c8:	b	397cc <__assert_fail@plt+0x27c28>
   398cc:	ldr	r3, [sp, #12]
   398d0:	mov	r5, #0
   398d4:	add	sl, r3, sl
   398d8:	add	sl, r0, sl
   398dc:	b	398c4 <__assert_fail@plt+0x27d20>
   398e0:	sub	r3, r7, r8
   398e4:	mov	r2, r8
   398e8:	cmp	r3, r8
   398ec:	sub	r1, r8, #1
   398f0:	movcc	r3, r2
   398f4:	sub	r8, r7, #1
   398f8:	add	r3, r3, #1
   398fc:	add	r8, r8, r5
   39900:	str	r1, [sp, #12]
   39904:	mov	sl, #0
   39908:	add	r1, r5, r1
   3990c:	str	r3, [sp, #16]
   39910:	mov	r3, r2
   39914:	add	r2, r5, r2
   39918:	rsb	r9, r5, #1
   3991c:	str	r2, [sp, #4]
   39920:	rsb	r2, r3, #1
   39924:	str	r2, [sp, #8]
   39928:	mov	r2, r6
   3992c:	mov	r6, r3
   39930:	str	r1, [sp, #20]
   39934:	add	fp, r7, sl
   39938:	add	r0, r4, r2
   3993c:	mov	r1, #0
   39940:	sub	r2, fp, r2
   39944:	bl	11a24 <memchr@plt>
   39948:	clz	r0, r0
   3994c:	cmp	fp, #0
   39950:	lsr	r0, r0, #5
   39954:	moveq	r0, #0
   39958:	cmp	r0, #0
   3995c:	beq	3973c <__assert_fail@plt+0x27b98>
   39960:	cmp	r7, r6
   39964:	bls	399ac <__assert_fail@plt+0x27e08>
   39968:	ldr	r3, [sp, #4]
   3996c:	add	r2, r6, sl
   39970:	add	r1, r4, r2
   39974:	ldrb	r2, [r4, r2]
   39978:	ldrb	r0, [r3]
   3997c:	cmp	r2, r0
   39980:	movne	lr, r6
   39984:	bne	399fc <__assert_fail@plt+0x27e58>
   39988:	mov	r2, r3
   3998c:	b	399a0 <__assert_fail@plt+0x27dfc>
   39990:	ldrb	r0, [r2, #1]!
   39994:	ldrb	r3, [r1, #1]!
   39998:	cmp	r0, r3
   3999c:	bne	399fc <__assert_fail@plt+0x27e58>
   399a0:	cmp	r8, r2
   399a4:	add	lr, r9, r2
   399a8:	bne	39990 <__assert_fail@plt+0x27dec>
   399ac:	ldr	r3, [sp, #12]
   399b0:	cmn	r3, #1
   399b4:	beq	399f4 <__assert_fail@plt+0x27e50>
   399b8:	add	r2, sl, r3
   399bc:	ldr	r3, [sp, #20]
   399c0:	add	r1, r4, r2
   399c4:	ldrb	r2, [r4, r2]
   399c8:	ldrb	r0, [r3]
   399cc:	cmp	r2, r0
   399d0:	bne	39a10 <__assert_fail@plt+0x27e6c>
   399d4:	mov	r2, r3
   399d8:	b	399ec <__assert_fail@plt+0x27e48>
   399dc:	ldrb	r0, [r2, #-1]!
   399e0:	ldrb	r3, [r1, #-1]!
   399e4:	cmp	r0, r3
   399e8:	bne	39a10 <__assert_fail@plt+0x27e6c>
   399ec:	cmp	r5, r2
   399f0:	bne	399dc <__assert_fail@plt+0x27e38>
   399f4:	add	r4, r4, sl
   399f8:	b	3971c <__assert_fail@plt+0x27b78>
   399fc:	ldr	r3, [sp, #8]
   39a00:	add	sl, r3, sl
   39a04:	add	sl, lr, sl
   39a08:	mov	r2, fp
   39a0c:	b	39934 <__assert_fail@plt+0x27d90>
   39a10:	ldr	r3, [sp, #16]
   39a14:	add	sl, sl, r3
   39a18:	b	39a08 <__assert_fail@plt+0x27e64>
   39a1c:	cmp	r3, #0
   39a20:	moveq	r4, r0
   39a24:	movne	r4, #0
   39a28:	b	3971c <__assert_fail@plt+0x27b78>
   39a2c:	mov	r3, #1
   39a30:	sub	r2, r7, #1
   39a34:	mov	r8, r2
   39a38:	str	r3, [sp, #16]
   39a3c:	str	r3, [sp, #36]	; 0x24
   39a40:	b	39768 <__assert_fail@plt+0x27bc4>
   39a44:	mov	lr, r7
   39a48:	b	398ac <__assert_fail@plt+0x27d08>
   39a4c:	strd	r4, [sp, #-16]!
   39a50:	mov	r4, r0
   39a54:	str	r6, [sp, #8]
   39a58:	str	lr, [sp, #12]
   39a5c:	bl	118a4 <__fpending@plt>
   39a60:	ldr	r5, [r4]
   39a64:	mov	r6, r0
   39a68:	mov	r0, r4
   39a6c:	bl	172cc <__assert_fail@plt+0x5728>
   39a70:	mov	r4, r0
   39a74:	and	r5, r5, #32
   39a78:	cmp	r5, #0
   39a7c:	bne	39ab4 <__assert_fail@plt+0x27f10>
   39a80:	cmp	r0, #0
   39a84:	beq	39aa0 <__assert_fail@plt+0x27efc>
   39a88:	cmp	r6, #0
   39a8c:	bne	39acc <__assert_fail@plt+0x27f28>
   39a90:	bl	119b8 <__errno_location@plt>
   39a94:	ldr	r4, [r0]
   39a98:	subs	r4, r4, #9
   39a9c:	mvnne	r4, #0
   39aa0:	mov	r0, r4
   39aa4:	ldrd	r4, [sp]
   39aa8:	ldr	r6, [sp, #8]
   39aac:	add	sp, sp, #12
   39ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   39ab4:	cmp	r0, #0
   39ab8:	bne	39acc <__assert_fail@plt+0x27f28>
   39abc:	bl	119b8 <__errno_location@plt>
   39ac0:	str	r4, [r0]
   39ac4:	mvn	r4, #0
   39ac8:	b	39aa0 <__assert_fail@plt+0x27efc>
   39acc:	mvn	r4, #0
   39ad0:	b	39aa0 <__assert_fail@plt+0x27efc>
   39ad4:	movw	r3, #62998	; 0xf616
   39ad8:	movt	r3, #149	; 0x95
   39adc:	strd	r4, [sp, #-8]!
   39ae0:	mov	r4, #0
   39ae4:	mov	r5, #0
   39ae8:	strd	r4, [r0, #16]
   39aec:	str	r3, [r0, #24]
   39af0:	ldrd	r4, [sp]
   39af4:	add	sp, sp, #8
   39af8:	bx	lr
   39afc:	ldr	r2, [r0, #24]
   39b00:	movw	r3, #62998	; 0xf616
   39b04:	movt	r3, #149	; 0x95
   39b08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   39b0c:	strd	r6, [sp, #8]
   39b10:	strd	r8, [sp, #16]
   39b14:	strd	sl, [sp, #24]
   39b18:	cmp	r2, r3
   39b1c:	str	lr, [sp, #32]
   39b20:	sub	sp, sp, #4
   39b24:	bne	39bd4 <__assert_fail@plt+0x28030>
   39b28:	ldrd	r6, [r0, #16]
   39b2c:	ldrd	sl, [r1, #96]	; 0x60
   39b30:	orrs	r3, r6, r7
   39b34:	beq	39b88 <__assert_fail@plt+0x27fe4>
   39b38:	ldrd	r2, [r0]
   39b3c:	cmp	r3, fp
   39b40:	cmpeq	r2, sl
   39b44:	beq	39ba8 <__assert_fail@plt+0x28004>
   39b48:	adds	r8, r6, #1
   39b4c:	adc	r9, r7, #0
   39b50:	and	r2, r6, r8
   39b54:	and	r3, r7, r9
   39b58:	orrs	r3, r2, r3
   39b5c:	strd	r8, [r0, #16]
   39b60:	movne	r1, #0
   39b64:	beq	39bc4 <__assert_fail@plt+0x28020>
   39b68:	mov	r0, r1
   39b6c:	add	sp, sp, #4
   39b70:	ldrd	r4, [sp]
   39b74:	ldrd	r6, [sp, #8]
   39b78:	ldrd	r8, [sp, #16]
   39b7c:	ldrd	sl, [sp, #24]
   39b80:	add	sp, sp, #32
   39b84:	pop	{pc}		; (ldr pc, [sp], #4)
   39b88:	mov	r2, #1
   39b8c:	mov	r3, #0
   39b90:	strd	r2, [r0, #16]
   39b94:	ldrd	r2, [r1]
   39b98:	mov	r1, #0
   39b9c:	strd	sl, [r0]
   39ba0:	strd	r2, [r0, #8]
   39ba4:	b	39b68 <__assert_fail@plt+0x27fc4>
   39ba8:	ldrd	r4, [r1]
   39bac:	ldrd	r2, [r0, #8]
   39bb0:	cmp	r5, r3
   39bb4:	cmpeq	r4, r2
   39bb8:	bne	39b48 <__assert_fail@plt+0x27fa4>
   39bbc:	mov	r1, #1
   39bc0:	b	39b68 <__assert_fail@plt+0x27fc4>
   39bc4:	orrs	r3, r8, r9
   39bc8:	bne	39b94 <__assert_fail@plt+0x27ff0>
   39bcc:	mov	r1, #1
   39bd0:	b	39b68 <__assert_fail@plt+0x27fc4>
   39bd4:	movw	r3, #51812	; 0xca64
   39bd8:	movt	r3, #3
   39bdc:	movw	r1, #51824	; 0xca70
   39be0:	movt	r1, #3
   39be4:	movw	r0, #51844	; 0xca84
   39be8:	movt	r0, #3
   39bec:	mov	r2, #60	; 0x3c
   39bf0:	bl	11ba4 <__assert_fail@plt>
   39bf4:	ldr	ip, [r0, #4]
   39bf8:	cmp	ip, r1
   39bfc:	bcs	39c68 <__assert_fail@plt+0x280c4>
   39c00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   39c04:	mov	r5, r1
   39c08:	mov	r4, r0
   39c0c:	strd	r6, [sp, #8]
   39c10:	umull	r6, r7, r1, r3
   39c14:	str	r8, [sp, #16]
   39c18:	mov	r8, r3
   39c1c:	str	lr, [sp, #20]
   39c20:	cmp	r7, #0
   39c24:	bne	39cac <__assert_fail@plt+0x28108>
   39c28:	ldr	r0, [r0, #8]
   39c2c:	cmp	r0, r2
   39c30:	beq	39c78 <__assert_fail@plt+0x280d4>
   39c34:	mov	r1, r6
   39c38:	bl	39064 <__assert_fail@plt+0x274c0>
   39c3c:	subs	r6, r0, #0
   39c40:	beq	39ca4 <__assert_fail@plt+0x28100>
   39c44:	mov	r3, #1
   39c48:	str	r5, [r4]
   39c4c:	stmib	r4, {r5, r6}
   39c50:	ldrd	r4, [sp]
   39c54:	mov	r0, r3
   39c58:	ldrd	r6, [sp, #8]
   39c5c:	ldr	r8, [sp, #16]
   39c60:	add	sp, sp, #20
   39c64:	pop	{pc}		; (ldr pc, [sp], #4)
   39c68:	mov	r3, #1
   39c6c:	str	r1, [r0]
   39c70:	mov	r0, r3
   39c74:	bx	lr
   39c78:	mov	r0, r6
   39c7c:	bl	39028 <__assert_fail@plt+0x27484>
   39c80:	subs	r6, r0, #0
   39c84:	beq	39ca4 <__assert_fail@plt+0x28100>
   39c88:	ldr	r1, [r4, #8]
   39c8c:	cmp	r1, #0
   39c90:	beq	39c44 <__assert_fail@plt+0x280a0>
   39c94:	ldr	r2, [r4]
   39c98:	mul	r2, r2, r8
   39c9c:	bl	11784 <memcpy@plt>
   39ca0:	b	39c44 <__assert_fail@plt+0x280a0>
   39ca4:	mov	r3, #0
   39ca8:	b	39c50 <__assert_fail@plt+0x280ac>
   39cac:	bl	119b8 <__errno_location@plt>
   39cb0:	mov	r2, #12
   39cb4:	mov	r3, #0
   39cb8:	str	r2, [r0]
   39cbc:	b	39c50 <__assert_fail@plt+0x280ac>
   39cc0:	push	{r1, r2, r3}
   39cc4:	strd	r4, [sp, #-20]!	; 0xffffffec
   39cc8:	strd	r6, [sp, #8]
   39ccc:	str	lr, [sp, #16]
   39cd0:	sub	sp, sp, #8
   39cd4:	ldr	r1, [sp, #28]
   39cd8:	add	r2, sp, #32
   39cdc:	str	r2, [sp, #4]
   39ce0:	cmp	r1, #0
   39ce4:	beq	39dc0 <__assert_fail@plt+0x2821c>
   39ce8:	movw	r3, #1030	; 0x406
   39cec:	mov	r6, r0
   39cf0:	cmp	r1, r3
   39cf4:	beq	39dd0 <__assert_fail@plt+0x2822c>
   39cf8:	cmp	r1, #11
   39cfc:	beq	39d78 <__assert_fail@plt+0x281d4>
   39d00:	ble	39d58 <__assert_fail@plt+0x281b4>
   39d04:	movw	r2, #1031	; 0x407
   39d08:	cmp	r1, r2
   39d0c:	bgt	39d94 <__assert_fail@plt+0x281f0>
   39d10:	cmp	r1, r3
   39d14:	bge	39d24 <__assert_fail@plt+0x28180>
   39d18:	movw	r3, #1025	; 0x401
   39d1c:	cmp	r1, r3
   39d20:	beq	39d78 <__assert_fail@plt+0x281d4>
   39d24:	ldr	r3, [sp, #4]
   39d28:	mov	r0, r6
   39d2c:	ldr	r2, [r3]
   39d30:	bl	11a54 <fcntl64@plt>
   39d34:	mov	r4, r0
   39d38:	mov	r0, r4
   39d3c:	add	sp, sp, #8
   39d40:	ldrd	r4, [sp]
   39d44:	ldrd	r6, [sp, #8]
   39d48:	ldr	lr, [sp, #16]
   39d4c:	add	sp, sp, #20
   39d50:	add	sp, sp, #12
   39d54:	bx	lr
   39d58:	cmp	r1, #4
   39d5c:	beq	39d24 <__assert_fail@plt+0x28180>
   39d60:	bgt	39d88 <__assert_fail@plt+0x281e4>
   39d64:	cmp	r1, #2
   39d68:	beq	39d24 <__assert_fail@plt+0x28180>
   39d6c:	bgt	39d78 <__assert_fail@plt+0x281d4>
   39d70:	cmp	r1, #1
   39d74:	bne	39d24 <__assert_fail@plt+0x28180>
   39d78:	mov	r0, r6
   39d7c:	bl	11a54 <fcntl64@plt>
   39d80:	mov	r4, r0
   39d84:	b	39d38 <__assert_fail@plt+0x28194>
   39d88:	cmp	r1, #9
   39d8c:	bne	39d24 <__assert_fail@plt+0x28180>
   39d90:	b	39d78 <__assert_fail@plt+0x281d4>
   39d94:	movw	r3, #1033	; 0x409
   39d98:	cmp	r1, r3
   39d9c:	beq	39d24 <__assert_fail@plt+0x28180>
   39da0:	blt	39d78 <__assert_fail@plt+0x281d4>
   39da4:	movw	r3, #1034	; 0x40a
   39da8:	cmp	r1, r3
   39dac:	bne	39d24 <__assert_fail@plt+0x28180>
   39db0:	mov	r0, r6
   39db4:	bl	11a54 <fcntl64@plt>
   39db8:	mov	r4, r0
   39dbc:	b	39d38 <__assert_fail@plt+0x28194>
   39dc0:	ldr	r2, [sp, #32]
   39dc4:	bl	11a54 <fcntl64@plt>
   39dc8:	mov	r4, r0
   39dcc:	b	39d38 <__assert_fail@plt+0x28194>
   39dd0:	movw	r5, #54272	; 0xd400
   39dd4:	movt	r5, #4
   39dd8:	ldr	r7, [r2]
   39ddc:	add	r2, sp, #36	; 0x24
   39de0:	ldr	r3, [r5]
   39de4:	str	r2, [sp, #4]
   39de8:	mov	r2, r7
   39dec:	cmp	r3, #0
   39df0:	blt	39e0c <__assert_fail@plt+0x28268>
   39df4:	bl	11a54 <fcntl64@plt>
   39df8:	subs	r4, r0, #0
   39dfc:	blt	39e74 <__assert_fail@plt+0x282d0>
   39e00:	mov	r3, #1
   39e04:	str	r3, [r5]
   39e08:	b	39d38 <__assert_fail@plt+0x28194>
   39e0c:	mov	r1, #0
   39e10:	bl	11a54 <fcntl64@plt>
   39e14:	subs	r4, r0, #0
   39e18:	blt	39d38 <__assert_fail@plt+0x28194>
   39e1c:	ldr	r3, [r5]
   39e20:	cmn	r3, #1
   39e24:	bne	39d38 <__assert_fail@plt+0x28194>
   39e28:	mov	r1, #1
   39e2c:	mov	r0, r4
   39e30:	bl	11a54 <fcntl64@plt>
   39e34:	subs	r2, r0, #0
   39e38:	blt	39e54 <__assert_fail@plt+0x282b0>
   39e3c:	orr	r2, r2, #1
   39e40:	mov	r1, #2
   39e44:	mov	r0, r4
   39e48:	bl	11a54 <fcntl64@plt>
   39e4c:	cmn	r0, #1
   39e50:	bne	39d38 <__assert_fail@plt+0x28194>
   39e54:	bl	119b8 <__errno_location@plt>
   39e58:	mov	r5, r0
   39e5c:	mov	r0, r4
   39e60:	ldr	r6, [r5]
   39e64:	mvn	r4, #0
   39e68:	bl	11b80 <close@plt>
   39e6c:	str	r6, [r5]
   39e70:	b	39d38 <__assert_fail@plt+0x28194>
   39e74:	bl	119b8 <__errno_location@plt>
   39e78:	ldr	r3, [r0]
   39e7c:	cmp	r3, #22
   39e80:	bne	39e00 <__assert_fail@plt+0x2825c>
   39e84:	mov	r2, r7
   39e88:	mov	r0, r6
   39e8c:	mov	r1, #0
   39e90:	bl	11a54 <fcntl64@plt>
   39e94:	subs	r4, r0, #0
   39e98:	mvnge	r3, #0
   39e9c:	strge	r3, [r5]
   39ea0:	bge	39e28 <__assert_fail@plt+0x28284>
   39ea4:	b	39d38 <__assert_fail@plt+0x28194>
   39ea8:	push	{r1, r2, r3}
   39eac:	push	{lr}		; (str lr, [sp, #-4]!)
   39eb0:	sub	sp, sp, #8
   39eb4:	ldr	r1, [sp, #12]
   39eb8:	ands	r2, r1, #64	; 0x40
   39ebc:	bne	39ed8 <__assert_fail@plt+0x28334>
   39ec0:	bl	118e0 <open64@plt>
   39ec4:	bl	3633c <__assert_fail@plt+0x24798>
   39ec8:	add	sp, sp, #8
   39ecc:	pop	{lr}		; (ldr lr, [sp], #4)
   39ed0:	add	sp, sp, #12
   39ed4:	bx	lr
   39ed8:	add	r3, sp, #16
   39edc:	ldr	r2, [sp, #16]
   39ee0:	str	r3, [sp, #4]
   39ee4:	b	39ec0 <__assert_fail@plt+0x2831c>
   39ee8:	push	{lr}		; (str lr, [sp, #-4]!)
   39eec:	sub	sp, sp, #268	; 0x10c
   39ef0:	movw	r2, #257	; 0x101
   39ef4:	add	r1, sp, #4
   39ef8:	bl	39fc4 <__assert_fail@plt+0x28420>
   39efc:	cmp	r0, #0
   39f00:	movne	r0, #0
   39f04:	bne	39f38 <__assert_fail@plt+0x28394>
   39f08:	movw	r1, #51868	; 0xca9c
   39f0c:	movt	r1, #3
   39f10:	add	r0, sp, #4
   39f14:	bl	1170c <strcmp@plt>
   39f18:	cmp	r0, #0
   39f1c:	beq	39f38 <__assert_fail@plt+0x28394>
   39f20:	add	r0, sp, #4
   39f24:	movw	r1, #51872	; 0xcaa0
   39f28:	movt	r1, #3
   39f2c:	bl	1170c <strcmp@plt>
   39f30:	adds	r0, r0, #0
   39f34:	movne	r0, #1
   39f38:	add	sp, sp, #268	; 0x10c
   39f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   39f40:	mov	r0, #14
   39f44:	str	r4, [sp, #-8]!
   39f48:	str	lr, [sp, #4]
   39f4c:	bl	11a84 <nl_langinfo@plt>
   39f50:	cmp	r0, #0
   39f54:	beq	39f78 <__assert_fail@plt+0x283d4>
   39f58:	ldrb	r2, [r0]
   39f5c:	movw	r3, #51880	; 0xcaa8
   39f60:	movt	r3, #3
   39f64:	ldr	r4, [sp]
   39f68:	add	sp, sp, #4
   39f6c:	cmp	r2, #0
   39f70:	moveq	r0, r3
   39f74:	pop	{pc}		; (ldr pc, [sp], #4)
   39f78:	ldr	r4, [sp]
   39f7c:	add	sp, sp, #4
   39f80:	movw	r0, #51880	; 0xcaa8
   39f84:	movt	r0, #3
   39f88:	pop	{pc}		; (ldr pc, [sp], #4)
   39f8c:	umull	r2, r3, r1, r2
   39f90:	cmp	r3, #0
   39f94:	bne	39fa0 <__assert_fail@plt+0x283fc>
   39f98:	mov	r1, r2
   39f9c:	b	39064 <__assert_fail@plt+0x274c0>
   39fa0:	str	r4, [sp, #-8]!
   39fa4:	str	lr, [sp, #4]
   39fa8:	bl	119b8 <__errno_location@plt>
   39fac:	mov	r3, #12
   39fb0:	ldr	r4, [sp]
   39fb4:	add	sp, sp, #4
   39fb8:	str	r3, [r0]
   39fbc:	mov	r0, #0
   39fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   39fc4:	strd	r4, [sp, #-16]!
   39fc8:	mov	r5, r1
   39fcc:	mov	r1, #0
   39fd0:	mov	r4, r2
   39fd4:	str	r6, [sp, #8]
   39fd8:	str	lr, [sp, #12]
   39fdc:	bl	11a6c <setlocale@plt>
   39fe0:	subs	r6, r0, #0
   39fe4:	beq	3a064 <__assert_fail@plt+0x284c0>
   39fe8:	bl	11988 <strlen@plt>
   39fec:	cmp	r4, r0
   39ff0:	bhi	3a010 <__assert_fail@plt+0x2846c>
   39ff4:	cmp	r4, #0
   39ff8:	moveq	r0, #34	; 0x22
   39ffc:	bne	3a034 <__assert_fail@plt+0x28490>
   3a000:	ldrd	r4, [sp]
   3a004:	ldr	r6, [sp, #8]
   3a008:	add	sp, sp, #12
   3a00c:	pop	{pc}		; (ldr pc, [sp], #4)
   3a010:	add	r2, r0, #1
   3a014:	mov	r1, r6
   3a018:	mov	r0, r5
   3a01c:	bl	11784 <memcpy@plt>
   3a020:	ldrd	r4, [sp]
   3a024:	mov	r0, #0
   3a028:	ldr	r6, [sp, #8]
   3a02c:	add	sp, sp, #12
   3a030:	pop	{pc}		; (ldr pc, [sp], #4)
   3a034:	sub	r4, r4, #1
   3a038:	mov	r1, r6
   3a03c:	mov	r2, r4
   3a040:	mov	r0, r5
   3a044:	bl	11784 <memcpy@plt>
   3a048:	mov	r3, #0
   3a04c:	mov	r0, #34	; 0x22
   3a050:	strb	r3, [r5, r4]
   3a054:	ldrd	r4, [sp]
   3a058:	ldr	r6, [sp, #8]
   3a05c:	add	sp, sp, #12
   3a060:	pop	{pc}		; (ldr pc, [sp], #4)
   3a064:	cmp	r4, #0
   3a068:	mov	r0, #22
   3a06c:	strbne	r6, [r5]
   3a070:	ldrd	r4, [sp]
   3a074:	ldr	r6, [sp, #8]
   3a078:	add	sp, sp, #12
   3a07c:	pop	{pc}		; (ldr pc, [sp], #4)
   3a080:	mov	r1, #0
   3a084:	b	11a6c <setlocale@plt>
   3a088:	mov	r2, #3
   3a08c:	mov	r1, #0
   3a090:	b	39cc0 <__assert_fail@plt+0x2811c>
   3a094:	eor	r1, r1, #-2147483648	; 0x80000000
   3a098:	b	3a0a0 <__assert_fail@plt+0x284fc>
   3a09c:	eor	r3, r3, #-2147483648	; 0x80000000
   3a0a0:	push	{r4, r5, lr}
   3a0a4:	lsl	r4, r1, #1
   3a0a8:	lsl	r5, r3, #1
   3a0ac:	teq	r4, r5
   3a0b0:	teqeq	r0, r2
   3a0b4:	orrsne	ip, r4, r0
   3a0b8:	orrsne	ip, r5, r2
   3a0bc:	mvnsne	ip, r4, asr #21
   3a0c0:	mvnsne	ip, r5, asr #21
   3a0c4:	beq	3a2b0 <__assert_fail@plt+0x2870c>
   3a0c8:	lsr	r4, r4, #21
   3a0cc:	rsbs	r5, r4, r5, lsr #21
   3a0d0:	rsblt	r5, r5, #0
   3a0d4:	ble	3a0f4 <__assert_fail@plt+0x28550>
   3a0d8:	add	r4, r4, r5
   3a0dc:	eor	r2, r0, r2
   3a0e0:	eor	r3, r1, r3
   3a0e4:	eor	r0, r2, r0
   3a0e8:	eor	r1, r3, r1
   3a0ec:	eor	r2, r0, r2
   3a0f0:	eor	r3, r1, r3
   3a0f4:	cmp	r5, #54	; 0x36
   3a0f8:	pophi	{r4, r5, pc}
   3a0fc:	tst	r1, #-2147483648	; 0x80000000
   3a100:	lsl	r1, r1, #12
   3a104:	mov	ip, #1048576	; 0x100000
   3a108:	orr	r1, ip, r1, lsr #12
   3a10c:	beq	3a118 <__assert_fail@plt+0x28574>
   3a110:	rsbs	r0, r0, #0
   3a114:	rsc	r1, r1, #0
   3a118:	tst	r3, #-2147483648	; 0x80000000
   3a11c:	lsl	r3, r3, #12
   3a120:	orr	r3, ip, r3, lsr #12
   3a124:	beq	3a130 <__assert_fail@plt+0x2858c>
   3a128:	rsbs	r2, r2, #0
   3a12c:	rsc	r3, r3, #0
   3a130:	teq	r4, r5
   3a134:	beq	3a298 <__assert_fail@plt+0x286f4>
   3a138:	sub	r4, r4, #1
   3a13c:	rsbs	lr, r5, #32
   3a140:	blt	3a15c <__assert_fail@plt+0x285b8>
   3a144:	lsl	ip, r2, lr
   3a148:	adds	r0, r0, r2, lsr r5
   3a14c:	adc	r1, r1, #0
   3a150:	adds	r0, r0, r3, lsl lr
   3a154:	adcs	r1, r1, r3, asr r5
   3a158:	b	3a178 <__assert_fail@plt+0x285d4>
   3a15c:	sub	r5, r5, #32
   3a160:	add	lr, lr, #32
   3a164:	cmp	r2, #1
   3a168:	lsl	ip, r3, lr
   3a16c:	orrcs	ip, ip, #2
   3a170:	adds	r0, r0, r3, asr r5
   3a174:	adcs	r1, r1, r3, asr #31
   3a178:	and	r5, r1, #-2147483648	; 0x80000000
   3a17c:	bpl	3a18c <__assert_fail@plt+0x285e8>
   3a180:	rsbs	ip, ip, #0
   3a184:	rscs	r0, r0, #0
   3a188:	rsc	r1, r1, #0
   3a18c:	cmp	r1, #1048576	; 0x100000
   3a190:	bcc	3a1d0 <__assert_fail@plt+0x2862c>
   3a194:	cmp	r1, #2097152	; 0x200000
   3a198:	bcc	3a1b8 <__assert_fail@plt+0x28614>
   3a19c:	lsrs	r1, r1, #1
   3a1a0:	rrxs	r0, r0
   3a1a4:	rrx	ip, ip
   3a1a8:	add	r4, r4, #1
   3a1ac:	lsl	r2, r4, #21
   3a1b0:	cmn	r2, #4194304	; 0x400000
   3a1b4:	bcs	3a310 <__assert_fail@plt+0x2876c>
   3a1b8:	cmp	ip, #-2147483648	; 0x80000000
   3a1bc:	lsrseq	ip, r0, #1
   3a1c0:	adcs	r0, r0, #0
   3a1c4:	adc	r1, r1, r4, lsl #20
   3a1c8:	orr	r1, r1, r5
   3a1cc:	pop	{r4, r5, pc}
   3a1d0:	lsls	ip, ip, #1
   3a1d4:	adcs	r0, r0, r0
   3a1d8:	adc	r1, r1, r1
   3a1dc:	tst	r1, #1048576	; 0x100000
   3a1e0:	sub	r4, r4, #1
   3a1e4:	bne	3a1b8 <__assert_fail@plt+0x28614>
   3a1e8:	teq	r1, #0
   3a1ec:	moveq	r1, r0
   3a1f0:	moveq	r0, #0
   3a1f4:	clz	r3, r1
   3a1f8:	addeq	r3, r3, #32
   3a1fc:	sub	r3, r3, #11
   3a200:	subs	r2, r3, #32
   3a204:	bge	3a228 <__assert_fail@plt+0x28684>
   3a208:	adds	r2, r2, #12
   3a20c:	ble	3a224 <__assert_fail@plt+0x28680>
   3a210:	add	ip, r2, #20
   3a214:	rsb	r2, r2, #12
   3a218:	lsl	r0, r1, ip
   3a21c:	lsr	r1, r1, r2
   3a220:	b	3a238 <__assert_fail@plt+0x28694>
   3a224:	add	r2, r2, #20
   3a228:	rsble	ip, r2, #32
   3a22c:	lsl	r1, r1, r2
   3a230:	orrle	r1, r1, r0, lsr ip
   3a234:	lslle	r0, r0, r2
   3a238:	subs	r4, r4, r3
   3a23c:	addge	r1, r1, r4, lsl #20
   3a240:	orrge	r1, r1, r5
   3a244:	popge	{r4, r5, pc}
   3a248:	mvn	r4, r4
   3a24c:	subs	r4, r4, #31
   3a250:	bge	3a28c <__assert_fail@plt+0x286e8>
   3a254:	adds	r4, r4, #12
   3a258:	bgt	3a274 <__assert_fail@plt+0x286d0>
   3a25c:	add	r4, r4, #20
   3a260:	rsb	r2, r4, #32
   3a264:	lsr	r0, r0, r4
   3a268:	orr	r0, r0, r1, lsl r2
   3a26c:	orr	r1, r5, r1, lsr r4
   3a270:	pop	{r4, r5, pc}
   3a274:	rsb	r4, r4, #12
   3a278:	rsb	r2, r4, #32
   3a27c:	lsr	r0, r0, r2
   3a280:	orr	r0, r0, r1, lsl r4
   3a284:	mov	r1, r5
   3a288:	pop	{r4, r5, pc}
   3a28c:	lsr	r0, r1, r4
   3a290:	mov	r1, r5
   3a294:	pop	{r4, r5, pc}
   3a298:	teq	r4, #0
   3a29c:	eor	r3, r3, #1048576	; 0x100000
   3a2a0:	eoreq	r1, r1, #1048576	; 0x100000
   3a2a4:	addeq	r4, r4, #1
   3a2a8:	subne	r5, r5, #1
   3a2ac:	b	3a138 <__assert_fail@plt+0x28594>
   3a2b0:	mvns	ip, r4, asr #21
   3a2b4:	mvnsne	ip, r5, asr #21
   3a2b8:	beq	3a320 <__assert_fail@plt+0x2877c>
   3a2bc:	teq	r4, r5
   3a2c0:	teqeq	r0, r2
   3a2c4:	beq	3a2d8 <__assert_fail@plt+0x28734>
   3a2c8:	orrs	ip, r4, r0
   3a2cc:	moveq	r1, r3
   3a2d0:	moveq	r0, r2
   3a2d4:	pop	{r4, r5, pc}
   3a2d8:	teq	r1, r3
   3a2dc:	movne	r1, #0
   3a2e0:	movne	r0, #0
   3a2e4:	popne	{r4, r5, pc}
   3a2e8:	lsrs	ip, r4, #21
   3a2ec:	bne	3a300 <__assert_fail@plt+0x2875c>
   3a2f0:	lsls	r0, r0, #1
   3a2f4:	adcs	r1, r1, r1
   3a2f8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3a2fc:	pop	{r4, r5, pc}
   3a300:	adds	r4, r4, #4194304	; 0x400000
   3a304:	addcc	r1, r1, #1048576	; 0x100000
   3a308:	popcc	{r4, r5, pc}
   3a30c:	and	r5, r1, #-2147483648	; 0x80000000
   3a310:	orr	r1, r5, #2130706432	; 0x7f000000
   3a314:	orr	r1, r1, #15728640	; 0xf00000
   3a318:	mov	r0, #0
   3a31c:	pop	{r4, r5, pc}
   3a320:	mvns	ip, r4, asr #21
   3a324:	movne	r1, r3
   3a328:	movne	r0, r2
   3a32c:	mvnseq	ip, r5, asr #21
   3a330:	movne	r3, r1
   3a334:	movne	r2, r0
   3a338:	orrs	r4, r0, r1, lsl #12
   3a33c:	orrseq	r5, r2, r3, lsl #12
   3a340:	teqeq	r1, r3
   3a344:	orrne	r1, r1, #524288	; 0x80000
   3a348:	pop	{r4, r5, pc}
   3a34c:	teq	r0, #0
   3a350:	moveq	r1, #0
   3a354:	bxeq	lr
   3a358:	push	{r4, r5, lr}
   3a35c:	mov	r4, #1024	; 0x400
   3a360:	add	r4, r4, #50	; 0x32
   3a364:	mov	r5, #0
   3a368:	mov	r1, #0
   3a36c:	b	3a1e8 <__assert_fail@plt+0x28644>
   3a370:	teq	r0, #0
   3a374:	moveq	r1, #0
   3a378:	bxeq	lr
   3a37c:	push	{r4, r5, lr}
   3a380:	mov	r4, #1024	; 0x400
   3a384:	add	r4, r4, #50	; 0x32
   3a388:	ands	r5, r0, #-2147483648	; 0x80000000
   3a38c:	rsbmi	r0, r0, #0
   3a390:	mov	r1, #0
   3a394:	b	3a1e8 <__assert_fail@plt+0x28644>
   3a398:	lsls	r2, r0, #1
   3a39c:	asr	r1, r2, #3
   3a3a0:	rrx	r1, r1
   3a3a4:	lsl	r0, r2, #28
   3a3a8:	andsne	r3, r2, #-16777216	; 0xff000000
   3a3ac:	teqne	r3, #-16777216	; 0xff000000
   3a3b0:	eorne	r1, r1, #939524096	; 0x38000000
   3a3b4:	bxne	lr
   3a3b8:	bics	r2, r2, #-16777216	; 0xff000000
   3a3bc:	bxeq	lr
   3a3c0:	teq	r3, #-16777216	; 0xff000000
   3a3c4:	orreq	r1, r1, #524288	; 0x80000
   3a3c8:	bxeq	lr
   3a3cc:	push	{r4, r5, lr}
   3a3d0:	mov	r4, #896	; 0x380
   3a3d4:	and	r5, r1, #-2147483648	; 0x80000000
   3a3d8:	bic	r1, r1, #-2147483648	; 0x80000000
   3a3dc:	b	3a1e8 <__assert_fail@plt+0x28644>
   3a3e0:	orrs	r2, r0, r1
   3a3e4:	bxeq	lr
   3a3e8:	push	{r4, r5, lr}
   3a3ec:	mov	r5, #0
   3a3f0:	b	3a410 <__assert_fail@plt+0x2886c>
   3a3f4:	orrs	r2, r0, r1
   3a3f8:	bxeq	lr
   3a3fc:	push	{r4, r5, lr}
   3a400:	ands	r5, r1, #-2147483648	; 0x80000000
   3a404:	bpl	3a410 <__assert_fail@plt+0x2886c>
   3a408:	rsbs	r0, r0, #0
   3a40c:	rsc	r1, r1, #0
   3a410:	mov	r4, #1024	; 0x400
   3a414:	add	r4, r4, #50	; 0x32
   3a418:	lsrs	ip, r1, #22
   3a41c:	beq	3a18c <__assert_fail@plt+0x285e8>
   3a420:	mov	r2, #3
   3a424:	lsrs	ip, ip, #3
   3a428:	addne	r2, r2, #3
   3a42c:	lsrs	ip, ip, #3
   3a430:	addne	r2, r2, #3
   3a434:	add	r2, r2, ip, lsr #3
   3a438:	rsb	r3, r2, #32
   3a43c:	lsl	ip, r0, r3
   3a440:	lsr	r0, r0, r2
   3a444:	orr	r0, r0, r1, lsl r3
   3a448:	lsr	r1, r1, r2
   3a44c:	add	r4, r4, r2
   3a450:	b	3a18c <__assert_fail@plt+0x285e8>
   3a454:	cmp	r3, #0
   3a458:	cmpeq	r2, #0
   3a45c:	bne	3a480 <__assert_fail@plt+0x288dc>
   3a460:	cmp	r1, #0
   3a464:	movlt	r1, #-2147483648	; 0x80000000
   3a468:	movlt	r0, #0
   3a46c:	blt	3a47c <__assert_fail@plt+0x288d8>
   3a470:	cmpeq	r0, #0
   3a474:	mvnne	r1, #-2147483648	; 0x80000000
   3a478:	mvnne	r0, #0
   3a47c:	b	3a564 <__assert_fail@plt+0x289c0>
   3a480:	sub	sp, sp, #8
   3a484:	push	{sp, lr}
   3a488:	cmp	r1, #0
   3a48c:	blt	3a4ac <__assert_fail@plt+0x28908>
   3a490:	cmp	r3, #0
   3a494:	blt	3a4e0 <__assert_fail@plt+0x2893c>
   3a498:	bl	3a5b8 <__assert_fail@plt+0x28a14>
   3a49c:	ldr	lr, [sp, #4]
   3a4a0:	add	sp, sp, #8
   3a4a4:	pop	{r2, r3}
   3a4a8:	bx	lr
   3a4ac:	rsbs	r0, r0, #0
   3a4b0:	sbc	r1, r1, r1, lsl #1
   3a4b4:	cmp	r3, #0
   3a4b8:	blt	3a504 <__assert_fail@plt+0x28960>
   3a4bc:	bl	3a5b8 <__assert_fail@plt+0x28a14>
   3a4c0:	ldr	lr, [sp, #4]
   3a4c4:	add	sp, sp, #8
   3a4c8:	pop	{r2, r3}
   3a4cc:	rsbs	r0, r0, #0
   3a4d0:	sbc	r1, r1, r1, lsl #1
   3a4d4:	rsbs	r2, r2, #0
   3a4d8:	sbc	r3, r3, r3, lsl #1
   3a4dc:	bx	lr
   3a4e0:	rsbs	r2, r2, #0
   3a4e4:	sbc	r3, r3, r3, lsl #1
   3a4e8:	bl	3a5b8 <__assert_fail@plt+0x28a14>
   3a4ec:	ldr	lr, [sp, #4]
   3a4f0:	add	sp, sp, #8
   3a4f4:	pop	{r2, r3}
   3a4f8:	rsbs	r0, r0, #0
   3a4fc:	sbc	r1, r1, r1, lsl #1
   3a500:	bx	lr
   3a504:	rsbs	r2, r2, #0
   3a508:	sbc	r3, r3, r3, lsl #1
   3a50c:	bl	3a5b8 <__assert_fail@plt+0x28a14>
   3a510:	ldr	lr, [sp, #4]
   3a514:	add	sp, sp, #8
   3a518:	pop	{r2, r3}
   3a51c:	rsbs	r2, r2, #0
   3a520:	sbc	r3, r3, r3, lsl #1
   3a524:	bx	lr
   3a528:	cmp	r3, #0
   3a52c:	cmpeq	r2, #0
   3a530:	bne	3a548 <__assert_fail@plt+0x289a4>
   3a534:	cmp	r1, #0
   3a538:	cmpeq	r0, #0
   3a53c:	mvnne	r1, #0
   3a540:	mvnne	r0, #0
   3a544:	b	3a564 <__assert_fail@plt+0x289c0>
   3a548:	sub	sp, sp, #8
   3a54c:	push	{sp, lr}
   3a550:	bl	3a5b8 <__assert_fail@plt+0x28a14>
   3a554:	ldr	lr, [sp, #4]
   3a558:	add	sp, sp, #8
   3a55c:	pop	{r2, r3}
   3a560:	bx	lr
   3a564:	push	{r1, lr}
   3a568:	mov	r0, #8
   3a56c:	bl	116d0 <raise@plt>
   3a570:	pop	{r1, pc}
   3a574:	andeq	r0, r0, r0
   3a578:	vmov	d6, r0, r1
   3a57c:	vldr	d7, [pc, #36]	; 3a5a8 <__assert_fail@plt+0x28a04>
   3a580:	vldr	d5, [pc, #40]	; 3a5b0 <__assert_fail@plt+0x28a0c>
   3a584:	vmul.f64	d7, d6, d7
   3a588:	vcvt.u32.f64	s14, d7
   3a58c:	vcvt.f64.u32	d4, s14
   3a590:	vmov	r1, s14
   3a594:	vmls.f64	d6, d4, d5
   3a598:	vcvt.u32.f64	s15, d6
   3a59c:	vmov	r0, s15
   3a5a0:	bx	lr
   3a5a4:	nop			; (mov r0, r0)
   3a5a8:	andeq	r0, r0, r0
   3a5ac:	ldclcc	0, cr0, [r0]
   3a5b0:	andeq	r0, r0, r0
   3a5b4:	mvnsmi	r0, r0
   3a5b8:	cmp	r1, r3
   3a5bc:	cmpeq	r0, r2
   3a5c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a5c4:	mov	r4, r0
   3a5c8:	movcc	r0, #0
   3a5cc:	mov	r5, r1
   3a5d0:	ldr	lr, [sp, #36]	; 0x24
   3a5d4:	movcc	r1, r0
   3a5d8:	bcc	3a6d4 <__assert_fail@plt+0x28b30>
   3a5dc:	cmp	r3, #0
   3a5e0:	clzeq	ip, r2
   3a5e4:	clzne	ip, r3
   3a5e8:	addeq	ip, ip, #32
   3a5ec:	cmp	r5, #0
   3a5f0:	clzeq	r1, r4
   3a5f4:	addeq	r1, r1, #32
   3a5f8:	clzne	r1, r5
   3a5fc:	sub	ip, ip, r1
   3a600:	sub	sl, ip, #32
   3a604:	lsl	r9, r3, ip
   3a608:	rsb	fp, ip, #32
   3a60c:	orr	r9, r9, r2, lsl sl
   3a610:	orr	r9, r9, r2, lsr fp
   3a614:	lsl	r8, r2, ip
   3a618:	cmp	r5, r9
   3a61c:	cmpeq	r4, r8
   3a620:	movcc	r0, #0
   3a624:	movcc	r1, r0
   3a628:	bcc	3a644 <__assert_fail@plt+0x28aa0>
   3a62c:	mov	r0, #1
   3a630:	subs	r4, r4, r8
   3a634:	lsl	r1, r0, sl
   3a638:	orr	r1, r1, r0, lsr fp
   3a63c:	lsl	r0, r0, ip
   3a640:	sbc	r5, r5, r9
   3a644:	cmp	ip, #0
   3a648:	beq	3a6d4 <__assert_fail@plt+0x28b30>
   3a64c:	lsr	r6, r8, #1
   3a650:	orr	r6, r6, r9, lsl #31
   3a654:	lsr	r7, r9, #1
   3a658:	mov	r2, ip
   3a65c:	b	3a680 <__assert_fail@plt+0x28adc>
   3a660:	subs	r3, r4, r6
   3a664:	sbc	r8, r5, r7
   3a668:	adds	r3, r3, r3
   3a66c:	adc	r8, r8, r8
   3a670:	adds	r4, r3, #1
   3a674:	adc	r5, r8, #0
   3a678:	subs	r2, r2, #1
   3a67c:	beq	3a69c <__assert_fail@plt+0x28af8>
   3a680:	cmp	r5, r7
   3a684:	cmpeq	r4, r6
   3a688:	bcs	3a660 <__assert_fail@plt+0x28abc>
   3a68c:	adds	r4, r4, r4
   3a690:	adc	r5, r5, r5
   3a694:	subs	r2, r2, #1
   3a698:	bne	3a680 <__assert_fail@plt+0x28adc>
   3a69c:	lsr	r3, r4, ip
   3a6a0:	orr	r3, r3, r5, lsl fp
   3a6a4:	lsr	r2, r5, ip
   3a6a8:	orr	r3, r3, r5, lsr sl
   3a6ac:	adds	r0, r0, r4
   3a6b0:	mov	r4, r3
   3a6b4:	lsl	r3, r2, ip
   3a6b8:	orr	r3, r3, r4, lsl sl
   3a6bc:	lsl	ip, r4, ip
   3a6c0:	orr	r3, r3, r4, lsr fp
   3a6c4:	adc	r1, r1, r5
   3a6c8:	subs	r0, r0, ip
   3a6cc:	mov	r5, r2
   3a6d0:	sbc	r1, r1, r3
   3a6d4:	cmp	lr, #0
   3a6d8:	strdne	r4, [lr]
   3a6dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a6e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a6e4:	mov	r7, r0
   3a6e8:	ldr	r6, [pc, #72]	; 3a738 <__assert_fail@plt+0x28b94>
   3a6ec:	ldr	r5, [pc, #72]	; 3a73c <__assert_fail@plt+0x28b98>
   3a6f0:	add	r6, pc, r6
   3a6f4:	add	r5, pc, r5
   3a6f8:	sub	r6, r6, r5
   3a6fc:	mov	r8, r1
   3a700:	mov	r9, r2
   3a704:	bl	11674 <pthread_mutex_unlock@plt-0x20>
   3a708:	asrs	r6, r6, #2
   3a70c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a710:	mov	r4, #0
   3a714:	add	r4, r4, #1
   3a718:	ldr	r3, [r5], #4
   3a71c:	mov	r2, r9
   3a720:	mov	r1, r8
   3a724:	mov	r0, r7
   3a728:	blx	r3
   3a72c:	cmp	r6, r4
   3a730:	bne	3a714 <__assert_fail@plt+0x28b70>
   3a734:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a738:	andeq	r2, r1, ip, lsl r8
   3a73c:	andeq	r2, r1, r4, lsl r8
   3a740:	bx	lr
   3a744:	ldr	r3, [pc, #12]	; 3a758 <__assert_fail@plt+0x28bb4>
   3a748:	mov	r1, #0
   3a74c:	add	r3, pc, r3
   3a750:	ldr	r2, [r3]
   3a754:	b	119dc <__cxa_atexit@plt>
   3a758:	andeq	r2, r1, r4, ror sl

Disassembly of section .fini:

0003a75c <.fini>:
   3a75c:	push	{r3, lr}
   3a760:	pop	{r3, pc}
