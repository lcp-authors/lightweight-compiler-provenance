
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

00010480 <.init>:
   10480:	push	{r3, lr}
   10484:	bl	10794 <strcmp@plt+0x27c>
   10488:	pop	{r3, pc}

Disassembly of section .plt:

0001048c <abort@plt-0x14>:
   1048c:	push	{lr}		; (str lr, [sp, #-4]!)
   10490:	ldr	lr, [pc, #4]	; 1049c <abort@plt-0x4>
   10494:	add	lr, pc, lr
   10498:	ldr	pc, [lr, #8]!
   1049c:	andeq	r0, r1, r4, ror #22

000104a0 <abort@plt>:
   104a0:	add	ip, pc, #0, 12
   104a4:	add	ip, ip, #16, 20	; 0x10000
   104a8:	ldr	pc, [ip, #2916]!	; 0xb64

000104ac <__libc_start_main@plt>:
   104ac:	add	ip, pc, #0, 12
   104b0:	add	ip, ip, #16, 20	; 0x10000
   104b4:	ldr	pc, [ip, #2908]!	; 0xb5c

000104b8 <__gmon_start__@plt>:
   104b8:	add	ip, pc, #0, 12
   104bc:	add	ip, ip, #16, 20	; 0x10000
   104c0:	ldr	pc, [ip, #2900]!	; 0xb54

000104c4 <putchar@plt>:
   104c4:	add	ip, pc, #0, 12
   104c8:	add	ip, ip, #16, 20	; 0x10000
   104cc:	ldr	pc, [ip, #2892]!	; 0xb4c

000104d0 <memset@plt>:
   104d0:	add	ip, pc, #0, 12
   104d4:	add	ip, ip, #16, 20	; 0x10000
   104d8:	ldr	pc, [ip, #2884]!	; 0xb44

000104dc <perror@plt>:
   104dc:	add	ip, pc, #0, 12
   104e0:	add	ip, ip, #16, 20	; 0x10000
   104e4:	ldr	pc, [ip, #2876]!	; 0xb3c

000104e8 <printf@plt>:
   104e8:	add	ip, pc, #0, 12
   104ec:	add	ip, ip, #16, 20	; 0x10000
   104f0:	ldr	pc, [ip, #2868]!	; 0xb34

000104f4 <fwrite@plt>:
   104f4:	add	ip, pc, #0, 12
   104f8:	add	ip, ip, #16, 20	; 0x10000
   104fc:	ldr	pc, [ip, #2860]!	; 0xb2c

00010500 <puts@plt>:
   10500:	add	ip, pc, #0, 12
   10504:	add	ip, ip, #16, 20	; 0x10000
   10508:	ldr	pc, [ip, #2852]!	; 0xb24

0001050c <rb_get_ssl_certfp_file@plt>:
   1050c:	add	ip, pc, #0, 12
   10510:	add	ip, ip, #16, 20	; 0x10000
   10514:	ldr	pc, [ip, #2844]!	; 0xb1c

00010518 <strcmp@plt>:
   10518:	add	ip, pc, #0, 12
   1051c:	add	ip, ip, #16, 20	; 0x10000
   10520:	ldr	pc, [ip, #2836]!	; 0xb14

Disassembly of section .text:

00010524 <.text>:
   10524:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10528:	mov	r2, #65	; 0x41
   1052c:	mov	r5, r1
   10530:	strd	r6, [sp, #8]
   10534:	mov	r1, #0
   10538:	mov	r6, r0
   1053c:	ldr	r7, [pc, #460]	; 10710 <strcmp@plt+0x1f8>
   10540:	str	r8, [sp, #16]
   10544:	str	lr, [sp, #20]
   10548:	sub	sp, sp, #72	; 0x48
   1054c:	add	r4, sp, #4
   10550:	mov	r0, r4
   10554:	bl	104d0 <memset@plt>
   10558:	cmp	r6, #3
   1055c:	add	r7, pc, r7
   10560:	bne	10670 <strcmp@plt+0x158>
   10564:	ldr	r1, [pc, #424]	; 10714 <strcmp@plt+0x1fc>
   10568:	ldr	r6, [r5, #4]
   1056c:	ldr	r5, [r5, #8]
   10570:	add	r1, pc, r1
   10574:	mov	r0, r6
   10578:	bl	10518 <strcmp@plt>
   1057c:	subs	r2, r0, #0
   10580:	beq	105f4 <strcmp@plt+0xdc>
   10584:	ldr	r1, [pc, #396]	; 10718 <strcmp@plt+0x200>
   10588:	mov	r0, r6
   1058c:	add	r1, pc, r1
   10590:	bl	10518 <strcmp@plt>
   10594:	cmp	r0, #0
   10598:	beq	10690 <strcmp@plt+0x178>
   1059c:	ldr	r1, [pc, #376]	; 1071c <strcmp@plt+0x204>
   105a0:	mov	r0, r6
   105a4:	add	r1, pc, r1
   105a8:	bl	10518 <strcmp@plt>
   105ac:	cmp	r0, #0
   105b0:	beq	106a0 <strcmp@plt+0x188>
   105b4:	ldr	r1, [pc, #356]	; 10720 <strcmp@plt+0x208>
   105b8:	mov	r0, r6
   105bc:	add	r1, pc, r1
   105c0:	bl	10518 <strcmp@plt>
   105c4:	cmp	r0, #0
   105c8:	beq	106e8 <strcmp@plt+0x1d0>
   105cc:	ldr	r1, [pc, #336]	; 10724 <strcmp@plt+0x20c>
   105d0:	mov	r0, r6
   105d4:	add	r1, pc, r1
   105d8:	bl	10518 <strcmp@plt>
   105dc:	cmp	r0, #0
   105e0:	bne	106f8 <strcmp@plt+0x1e0>
   105e4:	ldr	r8, [pc, #316]	; 10728 <strcmp@plt+0x210>
   105e8:	movw	r2, #4098	; 0x1002
   105ec:	add	r8, pc, r8
   105f0:	b	105fc <strcmp@plt+0xe4>
   105f4:	ldr	r8, [pc, #304]	; 1072c <strcmp@plt+0x214>
   105f8:	add	r8, pc, r8
   105fc:	mov	r1, r4
   10600:	mov	r0, r5
   10604:	bl	1050c <rb_get_ssl_certfp_file@plt>
   10608:	subs	r6, r0, #0
   1060c:	blt	106d8 <strcmp@plt+0x1c0>
   10610:	beq	106b0 <strcmp@plt+0x198>
   10614:	ldr	r0, [pc, #276]	; 10730 <strcmp@plt+0x218>
   10618:	mov	r1, r8
   1061c:	add	r5, sp, #3
   10620:	mov	r4, #0
   10624:	ldr	r7, [pc, #264]	; 10734 <strcmp@plt+0x21c>
   10628:	add	r0, pc, r0
   1062c:	add	r7, pc, r7
   10630:	bl	104e8 <printf@plt>
   10634:	add	r4, r4, #1
   10638:	ldrb	r1, [r5, #1]!
   1063c:	mov	r0, r7
   10640:	bl	104e8 <printf@plt>
   10644:	cmp	r6, r4
   10648:	bgt	10634 <strcmp@plt+0x11c>
   1064c:	mov	r0, #10
   10650:	bl	104c4 <putchar@plt>
   10654:	mov	r0, #0
   10658:	add	sp, sp, #72	; 0x48
   1065c:	ldrd	r4, [sp]
   10660:	ldrd	r6, [sp, #8]
   10664:	ldr	r8, [sp, #16]
   10668:	add	sp, sp, #20
   1066c:	pop	{pc}		; (ldr pc, [sp], #4)
   10670:	ldr	r0, [pc, #192]	; 10738 <strcmp@plt+0x220>
   10674:	add	r0, pc, r0
   10678:	bl	10500 <puts@plt>
   1067c:	ldr	r0, [pc, #184]	; 1073c <strcmp@plt+0x224>
   10680:	add	r0, pc, r0
   10684:	bl	10500 <puts@plt>
   10688:	mov	r0, #1
   1068c:	b	10658 <strcmp@plt+0x140>
   10690:	ldr	r8, [pc, #168]	; 10740 <strcmp@plt+0x228>
   10694:	mov	r2, #1
   10698:	add	r8, pc, r8
   1069c:	b	105fc <strcmp@plt+0xe4>
   106a0:	ldr	r8, [pc, #156]	; 10744 <strcmp@plt+0x22c>
   106a4:	mov	r2, #2
   106a8:	add	r8, pc, r8
   106ac:	b	105fc <strcmp@plt+0xe4>
   106b0:	ldr	r3, [pc, #144]	; 10748 <strcmp@plt+0x230>
   106b4:	mov	r2, #14
   106b8:	mov	r1, #1
   106bc:	ldr	r0, [pc, #136]	; 1074c <strcmp@plt+0x234>
   106c0:	ldr	r3, [r7, r3]
   106c4:	add	r0, pc, r0
   106c8:	ldr	r3, [r3]
   106cc:	bl	104f4 <fwrite@plt>
   106d0:	mov	r0, #1
   106d4:	b	10658 <strcmp@plt+0x140>
   106d8:	mov	r0, r5
   106dc:	bl	104dc <perror@plt>
   106e0:	mov	r0, #1
   106e4:	b	10658 <strcmp@plt+0x140>
   106e8:	ldr	r8, [pc, #96]	; 10750 <strcmp@plt+0x238>
   106ec:	movw	r2, #4097	; 0x1001
   106f0:	add	r8, pc, r8
   106f4:	b	105fc <strcmp@plt+0xe4>
   106f8:	ldr	r0, [pc, #84]	; 10754 <strcmp@plt+0x23c>
   106fc:	mov	r1, r6
   10700:	add	r0, pc, r0
   10704:	bl	104e8 <printf@plt>
   10708:	mov	r0, #1
   1070c:	b	10658 <strcmp@plt+0x140>
   10710:	muleq	r1, ip, sl
   10714:	andeq	r0, r0, r4, asr #7
   10718:			; <UNDEFINED> instruction: 0x000003b0
   1071c:	andeq	r0, r0, r0, lsr #7
   10720:	muleq	r0, r0, r3
   10724:	andeq	r0, r0, r4, asr r3
   10728:	ldrdeq	r0, [r0], -r4
   1072c:	andeq	r0, r0, r0, asr #6
   10730:	andeq	r0, r0, r4, asr r3
   10734:	andeq	r0, r0, r4, asr r3
   10738:	andeq	r0, r0, ip, asr r2
   1073c:	andeq	r0, r0, r4, ror r2
   10740:	andeq	r0, r0, r0, lsr #5
   10744:	muleq	r0, r0, r2
   10748:	andeq	r0, r0, ip, lsr r0
   1074c:	andeq	r0, r0, r8, lsr #5
   10750:	andeq	r0, r0, r0, asr #3
   10754:	andeq	r0, r0, r8, asr r2
   10758:	mov	fp, #0
   1075c:	mov	lr, #0
   10760:	pop	{r1}		; (ldr r1, [sp], #4)
   10764:	mov	r2, sp
   10768:	push	{r2}		; (str r2, [sp, #-4]!)
   1076c:	push	{r0}		; (str r0, [sp, #-4]!)
   10770:	ldr	ip, [pc, #16]	; 10788 <strcmp@plt+0x270>
   10774:	push	{ip}		; (str ip, [sp, #-4]!)
   10778:	ldr	r0, [pc, #12]	; 1078c <strcmp@plt+0x274>
   1077c:	ldr	r3, [pc, #12]	; 10790 <strcmp@plt+0x278>
   10780:	bl	104ac <__libc_start_main@plt>
   10784:	bl	104a0 <abort@plt>
   10788:	andeq	r0, r1, r8, lsr #17
   1078c:	andeq	r0, r1, r4, lsr #10
   10790:	andeq	r0, r1, r8, asr #16
   10794:	ldr	r3, [pc, #20]	; 107b0 <strcmp@plt+0x298>
   10798:	ldr	r2, [pc, #20]	; 107b4 <strcmp@plt+0x29c>
   1079c:	add	r3, pc, r3
   107a0:	ldr	r2, [r3, r2]
   107a4:	cmp	r2, #0
   107a8:	bxeq	lr
   107ac:	b	104b8 <__gmon_start__@plt>
   107b0:	andeq	r0, r1, ip, asr r8
   107b4:	andeq	r0, r0, r8, lsr r0
   107b8:	ldr	r0, [pc, #24]	; 107d8 <strcmp@plt+0x2c0>
   107bc:	ldr	r3, [pc, #24]	; 107dc <strcmp@plt+0x2c4>
   107c0:	cmp	r3, r0
   107c4:	bxeq	lr
   107c8:	ldr	r3, [pc, #16]	; 107e0 <strcmp@plt+0x2c8>
   107cc:	cmp	r3, #0
   107d0:	bxeq	lr
   107d4:	bx	r3
   107d8:	andeq	r1, r2, r8, asr #32
   107dc:	andeq	r1, r2, r8, asr #32
   107e0:	andeq	r0, r0, r0
   107e4:	ldr	r0, [pc, #36]	; 10810 <strcmp@plt+0x2f8>
   107e8:	ldr	r1, [pc, #36]	; 10814 <strcmp@plt+0x2fc>
   107ec:	sub	r1, r1, r0
   107f0:	asr	r1, r1, #2
   107f4:	add	r1, r1, r1, lsr #31
   107f8:	asrs	r1, r1, #1
   107fc:	bxeq	lr
   10800:	ldr	r3, [pc, #16]	; 10818 <strcmp@plt+0x300>
   10804:	cmp	r3, #0
   10808:	bxeq	lr
   1080c:	bx	r3
   10810:	andeq	r1, r2, r8, asr #32
   10814:	andeq	r1, r2, r8, asr #32
   10818:	andeq	r0, r0, r0
   1081c:	push	{r4, lr}
   10820:	ldr	r4, [pc, #24]	; 10840 <strcmp@plt+0x328>
   10824:	ldrb	r3, [r4]
   10828:	cmp	r3, #0
   1082c:	popne	{r4, pc}
   10830:	bl	107b8 <strcmp@plt+0x2a0>
   10834:	mov	r3, #1
   10838:	strb	r3, [r4]
   1083c:	pop	{r4, pc}
   10840:	andeq	r1, r2, r8, asr #32
   10844:	b	107e4 <strcmp@plt+0x2cc>
   10848:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1084c:	mov	r7, r0
   10850:	ldr	r6, [pc, #72]	; 108a0 <strcmp@plt+0x388>
   10854:	ldr	r5, [pc, #72]	; 108a4 <strcmp@plt+0x38c>
   10858:	add	r6, pc, r6
   1085c:	add	r5, pc, r5
   10860:	sub	r6, r6, r5
   10864:	mov	r8, r1
   10868:	mov	r9, r2
   1086c:	bl	10480 <abort@plt-0x20>
   10870:	asrs	r6, r6, #2
   10874:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10878:	mov	r4, #0
   1087c:	add	r4, r4, #1
   10880:	ldr	r3, [r5], #4
   10884:	mov	r2, r9
   10888:	mov	r1, r8
   1088c:	mov	r0, r7
   10890:	blx	r3
   10894:	cmp	r6, r4
   10898:	bne	1087c <strcmp@plt+0x364>
   1089c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108a0:	muleq	r1, ip, r6
   108a4:	muleq	r1, r4, r6
   108a8:	bx	lr

Disassembly of section .fini:

000108ac <.fini>:
   108ac:	push	{r3, lr}
   108b0:	pop	{r3, pc}
