
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011384 <.init>:
   11384:	push	{r3, lr}
   11388:	bl	11794 <__assert_fail@plt+0x48>
   1138c:	pop	{r3, pc}

Disassembly of section .plt:

00011390 <fdopen@plt-0x14>:
   11390:	push	{lr}		; (str lr, [sp, #-4]!)
   11394:	ldr	lr, [pc, #4]	; 113a0 <fdopen@plt-0x4>
   11398:	add	lr, pc, lr
   1139c:	ldr	pc, [lr, #8]!
   113a0:	andeq	r8, r1, r0, ror #24

000113a4 <fdopen@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #24, 20	; 0x18000
   113ac:	ldr	pc, [ip, #3168]!	; 0xc60

000113b0 <calloc@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #24, 20	; 0x18000
   113b8:	ldr	pc, [ip, #3160]!	; 0xc58

000113bc <fputs_unlocked@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #24, 20	; 0x18000
   113c4:	ldr	pc, [ip, #3152]!	; 0xc50

000113c8 <raise@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #24, 20	; 0x18000
   113d0:	ldr	pc, [ip, #3144]!	; 0xc48

000113d4 <strcmp@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #24, 20	; 0x18000
   113dc:	ldr	pc, [ip, #3136]!	; 0xc40

000113e0 <strtol@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #24, 20	; 0x18000
   113e8:	ldr	pc, [ip, #3128]!	; 0xc38

000113ec <read@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #24, 20	; 0x18000
   113f4:	ldr	pc, [ip, #3120]!	; 0xc30

000113f8 <fflush@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #24, 20	; 0x18000
   11400:	ldr	pc, [ip, #3112]!	; 0xc28

00011404 <sigprocmask@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #24, 20	; 0x18000
   1140c:	ldr	pc, [ip, #3104]!	; 0xc20

00011410 <memmove@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #24, 20	; 0x18000
   11418:	ldr	pc, [ip, #3096]!	; 0xc18

0001141c <free@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #24, 20	; 0x18000
   11424:	ldr	pc, [ip, #3088]!	; 0xc10

00011428 <_exit@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #24, 20	; 0x18000
   11430:	ldr	pc, [ip, #3080]!	; 0xc08

00011434 <memcpy@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #24, 20	; 0x18000
   1143c:	ldr	pc, [ip, #3072]!	; 0xc00

00011440 <mbsinit@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #24, 20	; 0x18000
   11448:	ldr	pc, [ip, #3064]!	; 0xbf8

0001144c <ftruncate64@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #24, 20	; 0x18000
   11454:	ldr	pc, [ip, #3056]!	; 0xbf0

00011458 <fwrite_unlocked@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #24, 20	; 0x18000
   11460:	ldr	pc, [ip, #3048]!	; 0xbe8

00011464 <dcgettext@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #24, 20	; 0x18000
   1146c:	ldr	pc, [ip, #3040]!	; 0xbe0

00011470 <dup2@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #24, 20	; 0x18000
   11478:	ldr	pc, [ip, #3032]!	; 0xbd8

0001147c <realloc@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #24, 20	; 0x18000
   11484:	ldr	pc, [ip, #3024]!	; 0xbd0

00011488 <textdomain@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #24, 20	; 0x18000
   11490:	ldr	pc, [ip, #3016]!	; 0xbc8

00011494 <rawmemchr@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #24, 20	; 0x18000
   1149c:	ldr	pc, [ip, #3008]!	; 0xbc0

000114a0 <iswprint@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #24, 20	; 0x18000
   114a8:	ldr	pc, [ip, #3000]!	; 0xbb8

000114ac <__fxstat64@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #24, 20	; 0x18000
   114b4:	ldr	pc, [ip, #2992]!	; 0xbb0

000114b8 <sigaction@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #24, 20	; 0x18000
   114c0:	ldr	pc, [ip, #2984]!	; 0xba8

000114c4 <lseek64@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #24, 20	; 0x18000
   114cc:	ldr	pc, [ip, #2976]!	; 0xba0

000114d0 <waitpid@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #24, 20	; 0x18000
   114d8:	ldr	pc, [ip, #2968]!	; 0xb98

000114dc <__ctype_get_mb_cur_max@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #24, 20	; 0x18000
   114e4:	ldr	pc, [ip, #2960]!	; 0xb90

000114e8 <strcpy@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #24, 20	; 0x18000
   114f0:	ldr	pc, [ip, #2952]!	; 0xb88

000114f4 <__fpending@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #24, 20	; 0x18000
   114fc:	ldr	pc, [ip, #2944]!	; 0xb80

00011500 <ferror_unlocked@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #24, 20	; 0x18000
   11508:	ldr	pc, [ip, #2936]!	; 0xb78

0001150c <mbrtowc@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #24, 20	; 0x18000
   11514:	ldr	pc, [ip, #2928]!	; 0xb70

00011518 <error@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #24, 20	; 0x18000
   11520:	ldr	pc, [ip, #2920]!	; 0xb68

00011524 <open64@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #24, 20	; 0x18000
   1152c:	ldr	pc, [ip, #2912]!	; 0xb60

00011530 <getenv@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #24, 20	; 0x18000
   11538:	ldr	pc, [ip, #2904]!	; 0xb58

0001153c <malloc@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #24, 20	; 0x18000
   11544:	ldr	pc, [ip, #2896]!	; 0xb50

00011548 <sigaddset@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #24, 20	; 0x18000
   11550:	ldr	pc, [ip, #2888]!	; 0xb48

00011554 <__libc_start_main@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #24, 20	; 0x18000
   1155c:	ldr	pc, [ip, #2880]!	; 0xb40

00011560 <__freading@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #24, 20	; 0x18000
   11568:	ldr	pc, [ip, #2872]!	; 0xb38

0001156c <__gmon_start__@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #24, 20	; 0x18000
   11574:	ldr	pc, [ip, #2864]!	; 0xb30

00011578 <getopt_long@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #24, 20	; 0x18000
   11580:	ldr	pc, [ip, #2856]!	; 0xb28

00011584 <__ctype_b_loc@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #24, 20	; 0x18000
   1158c:	ldr	pc, [ip, #2848]!	; 0xb20

00011590 <exit@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #24, 20	; 0x18000
   11598:	ldr	pc, [ip, #2840]!	; 0xb18

0001159c <bcmp@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #24, 20	; 0x18000
   115a4:	ldr	pc, [ip, #2832]!	; 0xb10

000115a8 <strlen@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #24, 20	; 0x18000
   115b0:	ldr	pc, [ip, #2824]!	; 0xb08

000115b4 <__libc_current_sigrtmax@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #24, 20	; 0x18000
   115bc:	ldr	pc, [ip, #2816]!	; 0xb00

000115c0 <strchr@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #24, 20	; 0x18000
   115c8:	ldr	pc, [ip, #2808]!	; 0xaf8

000115cc <setenv@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #24, 20	; 0x18000
   115d4:	ldr	pc, [ip, #2800]!	; 0xaf0

000115d8 <memrchr@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #24, 20	; 0x18000
   115e0:	ldr	pc, [ip, #2792]!	; 0xae8

000115e4 <getpagesize@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #24, 20	; 0x18000
   115ec:	ldr	pc, [ip, #2784]!	; 0xae0

000115f0 <__errno_location@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #24, 20	; 0x18000
   115f8:	ldr	pc, [ip, #2776]!	; 0xad8

000115fc <__sprintf_chk@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #24, 20	; 0x18000
   11604:	ldr	pc, [ip, #2768]!	; 0xad0

00011608 <__cxa_atexit@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #24, 20	; 0x18000
   11610:	ldr	pc, [ip, #2760]!	; 0xac8

00011614 <memset@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #24, 20	; 0x18000
   1161c:	ldr	pc, [ip, #2752]!	; 0xac0

00011620 <__printf_chk@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #24, 20	; 0x18000
   11628:	ldr	pc, [ip, #2744]!	; 0xab8

0001162c <write@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #24, 20	; 0x18000
   11634:	ldr	pc, [ip, #2736]!	; 0xab0

00011638 <fileno@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #24, 20	; 0x18000
   11640:	ldr	pc, [ip, #2728]!	; 0xaa8

00011644 <strtoumax@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #24, 20	; 0x18000
   1164c:	ldr	pc, [ip, #2720]!	; 0xaa0

00011650 <__fprintf_chk@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #24, 20	; 0x18000
   11658:	ldr	pc, [ip, #2712]!	; 0xa98

0001165c <memchr@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #24, 20	; 0x18000
   11664:	ldr	pc, [ip, #2704]!	; 0xa90

00011668 <fclose@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #24, 20	; 0x18000
   11670:	ldr	pc, [ip, #2696]!	; 0xa88

00011674 <pipe@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #24, 20	; 0x18000
   1167c:	ldr	pc, [ip, #2688]!	; 0xa80

00011680 <fseeko64@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #24, 20	; 0x18000
   11688:	ldr	pc, [ip, #2680]!	; 0xa78

0001168c <fcntl64@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #24, 20	; 0x18000
   11694:	ldr	pc, [ip, #2672]!	; 0xa70

00011698 <setlocale@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #24, 20	; 0x18000
   116a0:	ldr	pc, [ip, #2664]!	; 0xa68

000116a4 <sigemptyset@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #24, 20	; 0x18000
   116ac:	ldr	pc, [ip, #2656]!	; 0xa60

000116b0 <fork@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #24, 20	; 0x18000
   116b8:	ldr	pc, [ip, #2648]!	; 0xa58

000116bc <execl@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #24, 20	; 0x18000
   116c4:	ldr	pc, [ip, #2640]!	; 0xa50

000116c8 <strrchr@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #24, 20	; 0x18000
   116d0:	ldr	pc, [ip, #2632]!	; 0xa48

000116d4 <nl_langinfo@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #24, 20	; 0x18000
   116dc:	ldr	pc, [ip, #2624]!	; 0xa40

000116e0 <clearerr_unlocked@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #24, 20	; 0x18000
   116e8:	ldr	pc, [ip, #2616]!	; 0xa38

000116ec <bindtextdomain@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #24, 20	; 0x18000
   116f4:	ldr	pc, [ip, #2608]!	; 0xa30

000116f8 <aligned_alloc@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #24, 20	; 0x18000
   11700:	ldr	pc, [ip, #2600]!	; 0xa28

00011704 <__libc_current_sigrtmin@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #24, 20	; 0x18000
   1170c:	ldr	pc, [ip, #2592]!	; 0xa20

00011710 <fputs@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #24, 20	; 0x18000
   11718:	ldr	pc, [ip, #2584]!	; 0xa18

0001171c <strncmp@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #24, 20	; 0x18000
   11724:	ldr	pc, [ip, #2576]!	; 0xa10

00011728 <abort@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #24, 20	; 0x18000
   11730:	ldr	pc, [ip, #2568]!	; 0xa08

00011734 <close@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #24, 20	; 0x18000
   1173c:	ldr	pc, [ip, #2560]!	; 0xa00

00011740 <strspn@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #24, 20	; 0x18000
   11748:	ldr	pc, [ip, #2552]!	; 0x9f8

0001174c <__assert_fail@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #24, 20	; 0x18000
   11754:	ldr	pc, [ip, #2544]!	; 0x9f0

Disassembly of section .text:

00011758 <.text>:
   11758:	mov	fp, #0
   1175c:	mov	lr, #0
   11760:	pop	{r1}		; (ldr r1, [sp], #4)
   11764:	mov	r2, sp
   11768:	push	{r2}		; (str r2, [sp, #-4]!)
   1176c:	push	{r0}		; (str r0, [sp, #-4]!)
   11770:	ldr	ip, [pc, #16]	; 11788 <__assert_fail@plt+0x3c>
   11774:	push	{ip}		; (str ip, [sp, #-4]!)
   11778:	ldr	r0, [pc, #12]	; 1178c <__assert_fail@plt+0x40>
   1177c:	ldr	r3, [pc, #12]	; 11790 <__assert_fail@plt+0x44>
   11780:	bl	11554 <__libc_start_main@plt>
   11784:	bl	11728 <abort@plt>
   11788:	andeq	r8, r1, r8, asr r6
   1178c:	andeq	r1, r1, r4, lsr #22
   11790:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11794:	ldr	r3, [pc, #20]	; 117b0 <__assert_fail@plt+0x64>
   11798:	ldr	r2, [pc, #20]	; 117b4 <__assert_fail@plt+0x68>
   1179c:	add	r3, pc, r3
   117a0:	ldr	r2, [r3, r2]
   117a4:	cmp	r2, #0
   117a8:	bxeq	lr
   117ac:	b	1156c <__gmon_start__@plt>
   117b0:	andeq	r8, r1, ip, asr r8
   117b4:	andeq	r0, r0, r8, asr #2
   117b8:	ldr	r0, [pc, #24]	; 117d8 <__assert_fail@plt+0x8c>
   117bc:	ldr	r3, [pc, #24]	; 117dc <__assert_fail@plt+0x90>
   117c0:	cmp	r3, r0
   117c4:	bxeq	lr
   117c8:	ldr	r3, [pc, #16]	; 117e0 <__assert_fail@plt+0x94>
   117cc:	cmp	r3, #0
   117d0:	bxeq	lr
   117d4:	bx	r3
   117d8:	andeq	sl, r2, r4, asr r3
   117dc:	andeq	sl, r2, r4, asr r3
   117e0:	andeq	r0, r0, r0
   117e4:	ldr	r0, [pc, #36]	; 11810 <__assert_fail@plt+0xc4>
   117e8:	ldr	r1, [pc, #36]	; 11814 <__assert_fail@plt+0xc8>
   117ec:	sub	r1, r1, r0
   117f0:	asr	r1, r1, #2
   117f4:	add	r1, r1, r1, lsr #31
   117f8:	asrs	r1, r1, #1
   117fc:	bxeq	lr
   11800:	ldr	r3, [pc, #16]	; 11818 <__assert_fail@plt+0xcc>
   11804:	cmp	r3, #0
   11808:	bxeq	lr
   1180c:	bx	r3
   11810:	andeq	sl, r2, r4, asr r3
   11814:	andeq	sl, r2, r4, asr r3
   11818:	andeq	r0, r0, r0
   1181c:	push	{r4, lr}
   11820:	ldr	r4, [pc, #24]	; 11840 <__assert_fail@plt+0xf4>
   11824:	ldrb	r3, [r4]
   11828:	cmp	r3, #0
   1182c:	popne	{r4, pc}
   11830:	bl	117b8 <__assert_fail@plt+0x6c>
   11834:	mov	r3, #1
   11838:	strb	r3, [r4]
   1183c:	pop	{r4, pc}
   11840:	andeq	sl, r2, r4, ror r3
   11844:	b	117e4 <__assert_fail@plt+0x98>
   11848:	push	{fp, lr}
   1184c:	mov	fp, sp
   11850:	sub	sp, sp, #56	; 0x38
   11854:	mov	r8, r0
   11858:	cmp	r0, #0
   1185c:	bne	11ae4 <__assert_fail@plt+0x398>
   11860:	movw	r1, #34491	; 0x86bb
   11864:	mov	r0, #0
   11868:	mov	r2, #5
   1186c:	movt	r1, #1
   11870:	bl	11464 <dcgettext@plt>
   11874:	mov	r1, r0
   11878:	movw	r0, #42300	; 0xa53c
   1187c:	movt	r0, #2
   11880:	ldr	r2, [r0]
   11884:	mov	r0, #1
   11888:	bl	11620 <__printf_chk@plt>
   1188c:	movw	r1, #34530	; 0x86e2
   11890:	mov	r0, #0
   11894:	mov	r2, #5
   11898:	movt	r1, #1
   1189c:	bl	11464 <dcgettext@plt>
   118a0:	movw	r9, #41836	; 0xa36c
   118a4:	movt	r9, #2
   118a8:	ldr	r1, [r9]
   118ac:	bl	113bc <fputs_unlocked@plt>
   118b0:	movw	r1, #37047	; 0x90b7
   118b4:	mov	r0, #0
   118b8:	mov	r2, #5
   118bc:	movt	r1, #1
   118c0:	bl	11464 <dcgettext@plt>
   118c4:	ldr	r1, [r9]
   118c8:	bl	113bc <fputs_unlocked@plt>
   118cc:	movw	r1, #37103	; 0x90ef
   118d0:	mov	r0, #0
   118d4:	mov	r2, #5
   118d8:	movt	r1, #1
   118dc:	bl	11464 <dcgettext@plt>
   118e0:	ldr	r1, [r9]
   118e4:	bl	113bc <fputs_unlocked@plt>
   118e8:	movw	r1, #34636	; 0x874c
   118ec:	ldr	r5, [r9]
   118f0:	mov	r0, #0
   118f4:	mov	r2, #5
   118f8:	movt	r1, #1
   118fc:	bl	11464 <dcgettext@plt>
   11900:	mov	r2, r0
   11904:	mov	r0, r5
   11908:	mov	r1, #1
   1190c:	mov	r3, #2
   11910:	bl	11650 <__fprintf_chk@plt>
   11914:	movw	r1, #35726	; 0x8b8e
   11918:	mov	r0, #0
   1191c:	mov	r2, #5
   11920:	movt	r1, #1
   11924:	bl	11464 <dcgettext@plt>
   11928:	ldr	r1, [r9]
   1192c:	bl	113bc <fputs_unlocked@plt>
   11930:	movw	r1, #35839	; 0x8bff
   11934:	mov	r0, #0
   11938:	mov	r2, #5
   1193c:	movt	r1, #1
   11940:	bl	11464 <dcgettext@plt>
   11944:	ldr	r1, [r9]
   11948:	bl	113bc <fputs_unlocked@plt>
   1194c:	movw	r1, #35884	; 0x8c2c
   11950:	mov	r0, #0
   11954:	mov	r2, #5
   11958:	movt	r1, #1
   1195c:	bl	11464 <dcgettext@plt>
   11960:	ldr	r1, [r9]
   11964:	bl	113bc <fputs_unlocked@plt>
   11968:	movw	r1, #37178	; 0x913a
   1196c:	mov	r0, #0
   11970:	mov	r2, #5
   11974:	movt	r1, #1
   11978:	bl	11464 <dcgettext@plt>
   1197c:	ldr	r1, [r9]
   11980:	bl	113bc <fputs_unlocked@plt>
   11984:	movw	r1, #35938	; 0x8c62
   11988:	mov	r0, #0
   1198c:	mov	r2, #5
   11990:	movt	r1, #1
   11994:	bl	11464 <dcgettext@plt>
   11998:	ldr	r1, [r9]
   1199c:	bl	113bc <fputs_unlocked@plt>
   119a0:	movw	r0, #39008	; 0x9860
   119a4:	mov	r6, sp
   119a8:	movt	r0, #1
   119ac:	mov	r1, r6
   119b0:	ldm	r0!, {r2, r3, r4, r5}
   119b4:	stmia	r1!, {r2, r3, r4, r5}
   119b8:	ldm	r0!, {r2, r3, r4, r5, r7}
   119bc:	stmia	r1!, {r2, r3, r4, r5, r7}
   119c0:	ldm	r0, {r2, r3, r4, r5, r7}
   119c4:	stm	r1, {r2, r3, r4, r5, r7}
   119c8:	movw	r1, #37390	; 0x920e
   119cc:	movw	r5, #36278	; 0x8db6
   119d0:	movt	r1, #1
   119d4:	movt	r5, #1
   119d8:	mov	r0, r5
   119dc:	bl	113d4 <strcmp@plt>
   119e0:	cmp	r0, #0
   119e4:	ldrne	r1, [r6, #8]!
   119e8:	cmpne	r1, #0
   119ec:	bne	119d8 <__assert_fail@plt+0x28c>
   119f0:	movw	r1, #37485	; 0x926d
   119f4:	ldr	r6, [r6, #4]
   119f8:	mov	r0, #0
   119fc:	mov	r2, #5
   11a00:	movt	r1, #1
   11a04:	bl	11464 <dcgettext@plt>
   11a08:	movw	r2, #36795	; 0x8fbb
   11a0c:	movw	r3, #37508	; 0x9284
   11a10:	mov	r1, r0
   11a14:	mov	r0, #1
   11a18:	movt	r2, #1
   11a1c:	movt	r3, #1
   11a20:	bl	11620 <__printf_chk@plt>
   11a24:	cmp	r6, #0
   11a28:	mov	r0, #5
   11a2c:	mov	r1, #0
   11a30:	moveq	r6, r5
   11a34:	bl	11698 <setlocale@plt>
   11a38:	cmp	r0, #0
   11a3c:	beq	11a74 <__assert_fail@plt+0x328>
   11a40:	movw	r1, #37548	; 0x92ac
   11a44:	mov	r2, #3
   11a48:	movt	r1, #1
   11a4c:	bl	1171c <strncmp@plt>
   11a50:	cmp	r0, #0
   11a54:	beq	11a74 <__assert_fail@plt+0x328>
   11a58:	movw	r1, #37552	; 0x92b0
   11a5c:	mov	r0, #0
   11a60:	mov	r2, #5
   11a64:	movt	r1, #1
   11a68:	bl	11464 <dcgettext@plt>
   11a6c:	ldr	r1, [r9]
   11a70:	bl	113bc <fputs_unlocked@plt>
   11a74:	movw	r1, #37623	; 0x92f7
   11a78:	mov	r0, #0
   11a7c:	mov	r2, #5
   11a80:	movt	r1, #1
   11a84:	bl	11464 <dcgettext@plt>
   11a88:	movw	r2, #37508	; 0x9284
   11a8c:	mov	r1, r0
   11a90:	mov	r0, #1
   11a94:	mov	r3, r5
   11a98:	movt	r2, #1
   11a9c:	bl	11620 <__printf_chk@plt>
   11aa0:	movw	r1, #37650	; 0x9312
   11aa4:	mov	r0, #0
   11aa8:	mov	r2, #5
   11aac:	movt	r1, #1
   11ab0:	bl	11464 <dcgettext@plt>
   11ab4:	mov	r1, r0
   11ab8:	movw	r0, #37418	; 0x922a
   11abc:	movw	r3, #35725	; 0x8b8d
   11ac0:	cmp	r6, r5
   11ac4:	mov	r2, r6
   11ac8:	movt	r0, #1
   11acc:	movt	r3, #1
   11ad0:	moveq	r3, r0
   11ad4:	mov	r0, #1
   11ad8:	bl	11620 <__printf_chk@plt>
   11adc:	mov	r0, r8
   11ae0:	bl	11590 <exit@plt>
   11ae4:	movw	r0, #41832	; 0xa368
   11ae8:	movw	r1, #34452	; 0x8694
   11aec:	mov	r2, #5
   11af0:	movt	r0, #2
   11af4:	movt	r1, #1
   11af8:	ldr	r5, [r0]
   11afc:	mov	r0, #0
   11b00:	bl	11464 <dcgettext@plt>
   11b04:	mov	r2, r0
   11b08:	movw	r0, #42300	; 0xa53c
   11b0c:	mov	r1, #1
   11b10:	movt	r0, #2
   11b14:	ldr	r3, [r0]
   11b18:	mov	r0, r5
   11b1c:	bl	11650 <__fprintf_chk@plt>
   11b20:	b	11adc <__assert_fail@plt+0x390>
   11b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b28:	add	fp, sp, #28
   11b2c:	sub	sp, sp, #252	; 0xfc
   11b30:	mov	r4, r1
   11b34:	str	r0, [sp, #92]	; 0x5c
   11b38:	bl	115e4 <getpagesize@plt>
   11b3c:	str	r0, [sp, #64]	; 0x40
   11b40:	ldr	r0, [r4]
   11b44:	str	r4, [sp, #88]	; 0x58
   11b48:	bl	14fd8 <__assert_fail@plt+0x388c>
   11b4c:	movw	r1, #35725	; 0x8b8d
   11b50:	mov	r0, #6
   11b54:	movt	r1, #1
   11b58:	bl	11698 <setlocale@plt>
   11b5c:	movw	r4, #36799	; 0x8fbf
   11b60:	movw	r1, #36284	; 0x8dbc
   11b64:	movt	r4, #1
   11b68:	movt	r1, #1
   11b6c:	mov	r0, r4
   11b70:	bl	116ec <bindtextdomain@plt>
   11b74:	mov	r0, r4
   11b78:	bl	11488 <textdomain@plt>
   11b7c:	movw	r0, #19388	; 0x4bbc
   11b80:	movt	r0, #1
   11b84:	bl	1865c <__assert_fail@plt+0x6f10>
   11b88:	movw	r1, #41848	; 0xa378
   11b8c:	movw	r0, #39145	; 0x98e9
   11b90:	mov	r9, #0
   11b94:	mov	sl, #0
   11b98:	movt	r1, #2
   11b9c:	movt	r0, #1
   11ba0:	str	r0, [r1]
   11ba4:	movw	r1, #41852	; 0xa37c
   11ba8:	movw	r0, #36724	; 0x8f74
   11bac:	movt	r1, #2
   11bb0:	movt	r0, #1
   11bb4:	str	r0, [r1]
   11bb8:	mov	r0, #0
   11bbc:	str	r0, [sp, #96]	; 0x60
   11bc0:	mov	r0, #0
   11bc4:	str	r0, [sp, #100]	; 0x64
   11bc8:	mov	r0, #0
   11bcc:	str	r0, [sp, #76]	; 0x4c
   11bd0:	mov	r0, #0
   11bd4:	str	r0, [sp, #72]	; 0x48
   11bd8:	mov	r0, #0
   11bdc:	str	r0, [sp, #84]	; 0x54
   11be0:	movw	r5, #41824	; 0xa360
   11be4:	mov	r0, #0
   11be8:	ldr	r1, [sp, #88]	; 0x58
   11bec:	movw	r2, #36308	; 0x8dd4
   11bf0:	movw	r3, #38736	; 0x9750
   11bf4:	movt	r5, #2
   11bf8:	str	r0, [sp]
   11bfc:	ldr	r0, [sp, #92]	; 0x5c
   11c00:	movt	r2, #1
   11c04:	movt	r3, #1
   11c08:	ldr	r6, [r5]
   11c0c:	bl	11578 <getopt_long@plt>
   11c10:	cmp	r6, #0
   11c14:	mov	r4, r0
   11c18:	movweq	r6, #1
   11c1c:	cmp	r0, #96	; 0x60
   11c20:	ble	11c64 <__assert_fail@plt+0x518>
   11c24:	cmp	r4, #116	; 0x74
   11c28:	ble	11c98 <__assert_fail@plt+0x54c>
   11c2c:	sub	r0, r4, #256	; 0x100
   11c30:	cmp	r0, #3
   11c34:	bhi	11dc8 <__assert_fail@plt+0x67c>
   11c38:	add	r1, pc, #0
   11c3c:	ldr	pc, [r1, r0, lsl #2]
   11c40:	andeq	r1, r1, r0, asr ip
   11c44:	andeq	r1, r1, ip, lsl #30
   11c48:	andeq	r1, r1, r4, lsl #29
   11c4c:	andeq	r1, r1, r0, ror #29
   11c50:	movw	r1, #41880	; 0xa398
   11c54:	mov	r0, #1
   11c58:	movt	r1, #2
   11c5c:	strb	r0, [r1]
   11c60:	b	11be0 <__assert_fail@plt+0x494>
   11c64:	cmp	r4, #47	; 0x2f
   11c68:	ble	122d0 <__assert_fail@plt+0xb84>
   11c6c:	sub	r0, r4, #48	; 0x30
   11c70:	cmp	r0, #10
   11c74:	bcs	11f28 <__assert_fail@plt+0x7dc>
   11c78:	cmp	sl, #0
   11c7c:	beq	11d48 <__assert_fail@plt+0x5fc>
   11c80:	ldr	r5, [sp, #96]	; 0x60
   11c84:	ldr	r8, [sp, #100]	; 0x64
   11c88:	mvn	r1, #4
   11c8c:	tst	sl, r1
   11c90:	beq	11d54 <__assert_fail@plt+0x608>
   11c94:	b	138a4 <__assert_fail@plt+0x2158>
   11c98:	sub	r0, r4, #97	; 0x61
   11c9c:	cmp	r0, #13
   11ca0:	bhi	120a0 <__assert_fail@plt+0x954>
   11ca4:	add	r1, pc, #0
   11ca8:	ldr	pc, [r1, r0, lsl #2]
   11cac:	andeq	r1, r1, r4, ror #25
   11cb0:			; <UNDEFINED> instruction: 0x00011fb0
   11cb4:	andeq	r3, r1, r4, lsr #18
   11cb8:	andeq	r1, r1, r4, ror #27
   11cbc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11cc0:	andeq	r3, r1, r4, lsr #18
   11cc4:	andeq	r3, r1, r4, lsr #18
   11cc8:	andeq	r3, r1, r4, lsr #18
   11ccc:	andeq	r3, r1, r4, lsr #18
   11cd0:	andeq	r3, r1, r4, lsr #18
   11cd4:	andeq	r3, r1, r4, lsr #18
   11cd8:	andeq	r2, r1, r0, lsl r1
   11cdc:	andeq	r3, r1, r4, lsr #18
   11ce0:	andeq	r2, r1, r4
   11ce4:	movw	r0, #41840	; 0xa370
   11ce8:	movw	r1, #36335	; 0x8def
   11cec:	mov	r2, #5
   11cf0:	movt	r0, #2
   11cf4:	movt	r1, #1
   11cf8:	ldr	r4, [r0]
   11cfc:	mov	r0, #0
   11d00:	bl	11464 <dcgettext@plt>
   11d04:	mvn	r1, #-1073741824	; 0xc0000000
   11d08:	mov	r2, #0
   11d0c:	str	r0, [sp, #12]
   11d10:	mov	r0, r4
   11d14:	mov	r3, #0
   11d18:	str	r1, [sp]
   11d1c:	movw	r1, #35725	; 0x8b8d
   11d20:	str	r2, [sp, #4]
   11d24:	str	r2, [sp, #16]
   11d28:	mov	r2, #0
   11d2c:	movt	r1, #1
   11d30:	str	r1, [sp, #8]
   11d34:	bl	178b0 <__assert_fail@plt+0x6164>
   11d38:	movw	r1, #41856	; 0xa380
   11d3c:	movt	r1, #2
   11d40:	str	r0, [r1]
   11d44:	b	11be0 <__assert_fail@plt+0x494>
   11d48:	mov	r5, #0
   11d4c:	mov	sl, #4
   11d50:	mov	r8, #0
   11d54:	cmp	r9, #0
   11d58:	cmpne	r9, r6
   11d5c:	bne	11db4 <__assert_fail@plt+0x668>
   11d60:	movw	r0, #39321	; 0x9999
   11d64:	movt	r0, #39321	; 0x9999
   11d68:	subs	r0, r0, r5
   11d6c:	movw	r0, #39321	; 0x9999
   11d70:	movt	r0, #6553	; 0x1999
   11d74:	sbcs	r0, r0, r8
   11d78:	bcc	1382c <__assert_fail@plt+0x20e0>
   11d7c:	mov	r0, #10
   11d80:	add	r2, r8, r8, lsl #2
   11d84:	mov	r9, r6
   11d88:	umull	r0, r1, r5, r0
   11d8c:	add	r1, r1, r2, lsl #1
   11d90:	sub	r2, r4, #48	; 0x30
   11d94:	adds	r0, r0, r2
   11d98:	adc	r1, r1, r2, asr #31
   11d9c:	str	r0, [sp, #96]	; 0x60
   11da0:	subs	r0, r0, r5
   11da4:	sbcs	r0, r1, r8
   11da8:	str	r1, [sp, #100]	; 0x64
   11dac:	bcs	11be0 <__assert_fail@plt+0x494>
   11db0:	b	1382c <__assert_fail@plt+0x20e0>
   11db4:	asr	r1, r0, #31
   11db8:	str	r0, [sp, #96]	; 0x60
   11dbc:	mov	r9, r6
   11dc0:	str	r1, [sp, #100]	; 0x64
   11dc4:	b	11be0 <__assert_fail@plt+0x494>
   11dc8:	cmp	r4, #117	; 0x75
   11dcc:	bne	11ddc <__assert_fail@plt+0x690>
   11dd0:	movw	r0, #41864	; 0xa388
   11dd4:	movt	r0, #2
   11dd8:	b	11fa4 <__assert_fail@plt+0x858>
   11ddc:	cmp	r4, #120	; 0x78
   11de0:	bne	13924 <__assert_fail@plt+0x21d8>
   11de4:	movw	r0, #36653	; 0x8f2d
   11de8:	movw	r7, #36664	; 0x8f38
   11dec:	cmp	r4, #100	; 0x64
   11df0:	movt	r0, #1
   11df4:	movt	r7, #1
   11df8:	moveq	r7, r0
   11dfc:	movw	r0, #41308	; 0xa15c
   11e00:	movt	r0, #2
   11e04:	str	r7, [r0]
   11e08:	movw	r0, #41840	; 0xa370
   11e0c:	movt	r0, #2
   11e10:	ldr	r5, [r0]
   11e14:	cmp	r5, #0
   11e18:	beq	11be0 <__assert_fail@plt+0x494>
   11e1c:	mov	r0, r5
   11e20:	bl	115a8 <strlen@plt>
   11e24:	mov	r6, r0
   11e28:	mov	r0, r5
   11e2c:	mov	r1, r7
   11e30:	bl	11740 <strspn@plt>
   11e34:	cmp	r6, r0
   11e38:	bne	138cc <__assert_fail@plt+0x2180>
   11e3c:	ldrb	r0, [r5]
   11e40:	cmp	r0, #48	; 0x30
   11e44:	bne	11e74 <__assert_fail@plt+0x728>
   11e48:	movw	r2, #41840	; 0xa370
   11e4c:	add	r0, r5, #1
   11e50:	movt	r2, #2
   11e54:	ldrb	r1, [r0]
   11e58:	cmp	r1, #0
   11e5c:	beq	11e70 <__assert_fail@plt+0x724>
   11e60:	str	r0, [r2]
   11e64:	ldrb	r1, [r0], #1
   11e68:	cmp	r1, #48	; 0x30
   11e6c:	beq	11e54 <__assert_fail@plt+0x708>
   11e70:	sub	r5, r0, #1
   11e74:	movw	r0, #41868	; 0xa38c
   11e78:	movt	r0, #2
   11e7c:	str	r5, [r0]
   11e80:	b	11be0 <__assert_fail@plt+0x494>
   11e84:	movw	r0, #41840	; 0xa370
   11e88:	movw	r1, #36773	; 0x8fa5
   11e8c:	mov	r2, #5
   11e90:	movt	r0, #2
   11e94:	movt	r1, #1
   11e98:	ldr	r4, [r0]
   11e9c:	mov	r0, #0
   11ea0:	bl	11464 <dcgettext@plt>
   11ea4:	movw	r2, #38720	; 0x9740
   11ea8:	mvn	r1, #-2147483647	; 0x80000001
   11eac:	str	r0, [sp, #12]
   11eb0:	mov	r0, r4
   11eb4:	mov	r3, #0
   11eb8:	movt	r2, #1
   11ebc:	str	r1, [sp]
   11ec0:	mov	r1, #0
   11ec4:	str	r1, [sp, #4]
   11ec8:	str	r1, [sp, #16]
   11ecc:	str	r2, [sp, #8]
   11ed0:	mov	r2, #1
   11ed4:	bl	178b0 <__assert_fail@plt+0x6164>
   11ed8:	str	r0, [sp, #84]	; 0x54
   11edc:	b	11be0 <__assert_fail@plt+0x494>
   11ee0:	movw	r0, #41840	; 0xa370
   11ee4:	movt	r0, #2
   11ee8:	ldr	r4, [r0]
   11eec:	mov	r0, r4
   11ef0:	bl	14b1c <__assert_fail@plt+0x33d0>
   11ef4:	cmp	r0, r4
   11ef8:	bne	138e8 <__assert_fail@plt+0x219c>
   11efc:	movw	r0, #41860	; 0xa384
   11f00:	movt	r0, #2
   11f04:	str	r4, [r0]
   11f08:	b	11be0 <__assert_fail@plt+0x494>
   11f0c:	movw	r0, #41840	; 0xa370
   11f10:	movw	r1, #41876	; 0xa394
   11f14:	movt	r0, #2
   11f18:	movt	r1, #2
   11f1c:	ldr	r0, [r0]
   11f20:	str	r0, [r1]
   11f24:	b	11be0 <__assert_fail@plt+0x494>
   11f28:	cmp	r4, #67	; 0x43
   11f2c:	bne	13924 <__assert_fail@plt+0x21d8>
   11f30:	cmp	sl, #0
   11f34:	bne	138a4 <__assert_fail@plt+0x2158>
   11f38:	movw	r0, #41840	; 0xa370
   11f3c:	movw	r1, #36439	; 0x8e57
   11f40:	mov	r2, #5
   11f44:	movt	r0, #2
   11f48:	movt	r1, #1
   11f4c:	ldr	r4, [r0]
   11f50:	mov	r0, #0
   11f54:	bl	11464 <dcgettext@plt>
   11f58:	movw	r2, #38720	; 0x9740
   11f5c:	mvn	r1, #0
   11f60:	str	r0, [sp, #12]
   11f64:	mov	r0, r4
   11f68:	mov	r3, #0
   11f6c:	movt	r2, #1
   11f70:	str	r1, [sp]
   11f74:	mov	r1, #0
   11f78:	str	r1, [sp, #4]
   11f7c:	str	r1, [sp, #16]
   11f80:	str	r2, [sp, #8]
   11f84:	mov	r2, #1
   11f88:	bl	178b0 <__assert_fail@plt+0x6164>
   11f8c:	str	r0, [sp, #96]	; 0x60
   11f90:	str	r1, [sp, #100]	; 0x64
   11f94:	mov	sl, #2
   11f98:	b	11be0 <__assert_fail@plt+0x494>
   11f9c:	movw	r0, #41872	; 0xa390
   11fa0:	movt	r0, #2
   11fa4:	mov	r1, #1
   11fa8:	strb	r1, [r0]
   11fac:	b	11be0 <__assert_fail@plt+0x494>
   11fb0:	cmp	sl, #0
   11fb4:	bne	138a4 <__assert_fail@plt+0x2158>
   11fb8:	movw	r0, #41840	; 0xa370
   11fbc:	movw	r1, #36439	; 0x8e57
   11fc0:	mov	r2, #5
   11fc4:	movt	r0, #2
   11fc8:	movt	r1, #1
   11fcc:	ldr	r4, [r0]
   11fd0:	mov	r0, #0
   11fd4:	bl	11464 <dcgettext@plt>
   11fd8:	mvn	r1, #0
   11fdc:	str	r0, [sp, #12]
   11fe0:	mov	r0, #0
   11fe4:	mov	sl, #1
   11fe8:	str	r1, [sp]
   11fec:	mvn	r1, #-2147483648	; 0x80000000
   11ff0:	str	r0, [sp, #16]
   11ff4:	str	r1, [sp, #4]
   11ff8:	movw	r1, #38720	; 0x9740
   11ffc:	movt	r1, #1
   12000:	b	122b0 <__assert_fail@plt+0xb64>
   12004:	cmp	sl, #0
   12008:	bne	138a4 <__assert_fail@plt+0x2158>
   1200c:	bl	11584 <__ctype_b_loc@plt>
   12010:	movw	r2, #41840	; 0xa370
   12014:	ldr	r1, [r0]
   12018:	movt	r2, #2
   1201c:	ldr	r4, [r2]
   12020:	ldrb	r2, [r4]
   12024:	add	r1, r1, r2, lsl #1
   12028:	ldrb	r1, [r1, #1]
   1202c:	tst	r1, #32
   12030:	beq	12060 <__assert_fail@plt+0x914>
   12034:	movw	r7, #41840	; 0xa370
   12038:	add	r1, r4, #1
   1203c:	movt	r7, #2
   12040:	str	r1, [r7]
   12044:	ldrb	r2, [r1], #1
   12048:	ldr	r3, [r0]
   1204c:	add	r2, r3, r2, lsl #1
   12050:	ldrb	r2, [r2, #1]
   12054:	tst	r2, #32
   12058:	bne	12040 <__assert_fail@plt+0x8f4>
   1205c:	sub	r4, r1, #1
   12060:	movw	r1, #36487	; 0x8e87
   12064:	mov	r0, r4
   12068:	mov	r2, #2
   1206c:	movt	r1, #1
   12070:	bl	1171c <strncmp@plt>
   12074:	cmp	r0, #0
   12078:	beq	1217c <__assert_fail@plt+0xa30>
   1207c:	movw	r1, #36490	; 0x8e8a
   12080:	mov	r0, r4
   12084:	mov	r2, #2
   12088:	movt	r1, #1
   1208c:	bl	1171c <strncmp@plt>
   12090:	cmp	r0, #0
   12094:	beq	12184 <__assert_fail@plt+0xa38>
   12098:	mov	sl, #5
   1209c:	b	12198 <__assert_fail@plt+0xa4c>
   120a0:	cmp	r4, #116	; 0x74
   120a4:	bne	13924 <__assert_fail@plt+0x21d8>
   120a8:	movw	r4, #41840	; 0xa370
   120ac:	movt	r4, #2
   120b0:	ldr	r0, [r4]
   120b4:	ldrb	r1, [r0]
   120b8:	cmp	r1, #0
   120bc:	beq	1392c <__assert_fail@plt+0x21e0>
   120c0:	ldrb	r2, [r0, #1]
   120c4:	cmp	r2, #0
   120c8:	beq	120e4 <__assert_fail@plt+0x998>
   120cc:	movw	r1, #36541	; 0x8ebd
   120d0:	movt	r1, #1
   120d4:	bl	113d4 <strcmp@plt>
   120d8:	mov	r1, #0
   120dc:	cmp	r0, #0
   120e0:	bne	13938 <__assert_fail@plt+0x21ec>
   120e4:	movw	r0, #41304	; 0xa158
   120e8:	movt	r0, #2
   120ec:	ldr	r0, [r0]
   120f0:	cmp	r0, #0
   120f4:	bmi	12100 <__assert_fail@plt+0x9b4>
   120f8:	cmp	r0, r1
   120fc:	bne	13970 <__assert_fail@plt+0x2224>
   12100:	movw	r0, #41304	; 0xa158
   12104:	movt	r0, #2
   12108:	str	r1, [r0]
   1210c:	b	11be0 <__assert_fail@plt+0x494>
   12110:	cmp	sl, #0
   12114:	bne	138a4 <__assert_fail@plt+0x2158>
   12118:	movw	r0, #41840	; 0xa370
   1211c:	movw	r1, #36463	; 0x8e6f
   12120:	mov	r2, #5
   12124:	movt	r0, #2
   12128:	movt	r1, #1
   1212c:	ldr	r4, [r0]
   12130:	mov	r0, #0
   12134:	bl	11464 <dcgettext@plt>
   12138:	mvn	r1, #0
   1213c:	str	r0, [sp, #12]
   12140:	mov	r0, #0
   12144:	mov	r2, #1
   12148:	mov	r3, #0
   1214c:	str	r1, [sp]
   12150:	str	r1, [sp, #4]
   12154:	movw	r1, #35725	; 0x8b8d
   12158:	str	r0, [sp, #16]
   1215c:	mov	r0, r4
   12160:	movt	r1, #1
   12164:	str	r1, [sp, #8]
   12168:	bl	178b0 <__assert_fail@plt+0x6164>
   1216c:	str	r0, [sp, #96]	; 0x60
   12170:	str	r1, [sp, #100]	; 0x64
   12174:	mov	sl, #3
   12178:	b	11be0 <__assert_fail@plt+0x494>
   1217c:	mov	sl, #7
   12180:	b	12188 <__assert_fail@plt+0xa3c>
   12184:	mov	sl, #6
   12188:	movw	r0, #41840	; 0xa370
   1218c:	add	r4, r4, #2
   12190:	movt	r0, #2
   12194:	str	r4, [r0]
   12198:	mov	r0, r4
   1219c:	mov	r1, #47	; 0x2f
   121a0:	bl	115c0 <strchr@plt>
   121a4:	cmp	r0, #0
   121a8:	beq	1227c <__assert_fail@plt+0xb30>
   121ac:	movw	r1, #36493	; 0x8e8d
   121b0:	mov	r5, r0
   121b4:	mov	r0, #0
   121b8:	mov	r2, #5
   121bc:	movt	r1, #1
   121c0:	bl	11464 <dcgettext@plt>
   121c4:	mvn	r1, #0
   121c8:	str	r0, [sp, #12]
   121cc:	mov	r0, #0
   121d0:	mov	r2, #1
   121d4:	mov	r3, #0
   121d8:	str	r1, [sp]
   121dc:	str	r1, [sp, #4]
   121e0:	movw	r1, #35725	; 0x8b8d
   121e4:	str	r0, [sp, #16]
   121e8:	add	r0, r5, #1
   121ec:	movt	r1, #1
   121f0:	str	r1, [sp, #8]
   121f4:	bl	178b0 <__assert_fail@plt+0x6164>
   121f8:	str	r0, [sp, #96]	; 0x60
   121fc:	movw	r0, #41840	; 0xa370
   12200:	str	r1, [sp, #100]	; 0x64
   12204:	movt	r0, #2
   12208:	ldr	r0, [r0]
   1220c:	cmp	r0, r5
   12210:	beq	11be0 <__assert_fail@plt+0x494>
   12214:	movw	r0, #41840	; 0xa370
   12218:	mov	r6, #0
   1221c:	movw	r1, #37843	; 0x93d3
   12220:	mov	r2, #5
   12224:	movt	r0, #2
   12228:	strb	r6, [r5]
   1222c:	movt	r1, #1
   12230:	ldr	r4, [r0]
   12234:	mov	r0, #0
   12238:	bl	11464 <dcgettext@plt>
   1223c:	ldr	r1, [sp, #96]	; 0x60
   12240:	str	r0, [sp, #12]
   12244:	mov	r0, r4
   12248:	mov	r2, #1
   1224c:	mov	r3, #0
   12250:	str	r6, [sp, #16]
   12254:	str	r1, [sp]
   12258:	ldr	r1, [sp, #100]	; 0x64
   1225c:	str	r1, [sp, #4]
   12260:	movw	r1, #35725	; 0x8b8d
   12264:	movt	r1, #1
   12268:	str	r1, [sp, #8]
   1226c:	bl	178b0 <__assert_fail@plt+0x6164>
   12270:	str	r0, [sp, #76]	; 0x4c
   12274:	str	r1, [sp, #72]	; 0x48
   12278:	b	11be0 <__assert_fail@plt+0x494>
   1227c:	movw	r1, #36493	; 0x8e8d
   12280:	mov	r0, #0
   12284:	mov	r2, #5
   12288:	movt	r1, #1
   1228c:	bl	11464 <dcgettext@plt>
   12290:	mvn	r1, #0
   12294:	str	r0, [sp, #12]
   12298:	mov	r0, #0
   1229c:	str	r1, [sp]
   122a0:	str	r1, [sp, #4]
   122a4:	movw	r1, #35725	; 0x8b8d
   122a8:	str	r0, [sp, #16]
   122ac:	movt	r1, #1
   122b0:	str	r1, [sp, #8]
   122b4:	mov	r0, r4
   122b8:	mov	r2, #1
   122bc:	mov	r3, #0
   122c0:	bl	178b0 <__assert_fail@plt+0x6164>
   122c4:	str	r0, [sp, #96]	; 0x60
   122c8:	str	r1, [sp, #100]	; 0x64
   122cc:	b	11be0 <__assert_fail@plt+0x494>
   122d0:	ldr	r0, [sp, #76]	; 0x4c
   122d4:	cmn	r4, #1
   122d8:	bne	137c0 <__assert_fail@plt+0x2074>
   122dc:	ldr	r1, [sp, #72]	; 0x48
   122e0:	ldr	r8, [sp, #84]	; 0x54
   122e4:	orrs	r0, r0, r1
   122e8:	str	r0, [sp, #80]	; 0x50
   122ec:	beq	12304 <__assert_fail@plt+0xbb8>
   122f0:	movw	r0, #41876	; 0xa394
   122f4:	movt	r0, #2
   122f8:	ldr	r0, [r0]
   122fc:	cmp	r0, #0
   12300:	bne	139a8 <__assert_fail@plt+0x225c>
   12304:	cmp	sl, #0
   12308:	mov	r0, sl
   1230c:	beq	12360 <__assert_fail@plt+0xc14>
   12310:	ldr	r0, [sp, #96]	; 0x60
   12314:	ldr	r1, [sp, #100]	; 0x64
   12318:	orrs	r0, r0, r1
   1231c:	bne	12374 <__assert_fail@plt+0xc28>
   12320:	movw	r1, #36463	; 0x8e6f
   12324:	mov	r0, #0
   12328:	mov	r2, #5
   1232c:	movt	r1, #1
   12330:	bl	11464 <dcgettext@plt>
   12334:	mov	r4, r0
   12338:	movw	r0, #36542	; 0x8ebe
   1233c:	movt	r0, #1
   12340:	bl	169c4 <__assert_fail@plt+0x5278>
   12344:	movw	r2, #36901	; 0x9025
   12348:	str	r0, [sp]
   1234c:	mov	r0, #0
   12350:	mov	r1, #0
   12354:	mov	r3, r4
   12358:	movt	r2, #1
   1235c:	b	13920 <__assert_fail@plt+0x21d4>
   12360:	mov	r0, #0
   12364:	mov	sl, #3
   12368:	str	r0, [sp, #100]	; 0x64
   1236c:	mov	r0, #1000	; 0x3e8
   12370:	str	r0, [sp, #96]	; 0x60
   12374:	movw	r0, #41304	; 0xa158
   12378:	str	sl, [sp, #68]	; 0x44
   1237c:	movt	r0, #2
   12380:	ldr	r0, [r0]
   12384:	cmn	r0, #1
   12388:	bgt	123a0 <__assert_fail@plt+0xc54>
   1238c:	ldr	sl, [sp, #68]	; 0x44
   12390:	movw	r1, #41304	; 0xa158
   12394:	mov	r0, #10
   12398:	movt	r1, #2
   1239c:	str	r0, [r1]
   123a0:	movw	r0, #41868	; 0xa38c
   123a4:	movw	r2, #42256	; 0xa510
   123a8:	mov	r6, #0
   123ac:	mov	r7, #0
   123b0:	movt	r0, #2
   123b4:	movt	r2, #2
   123b8:	ldr	r0, [r0]
   123bc:	cmp	r0, #0
   123c0:	ldrne	sl, [sp, #68]	; 0x44
   123c4:	movne	r1, #1
   123c8:	strbne	r1, [r2]
   123cc:	sub	r9, sl, #5
   123d0:	movw	sl, #41848	; 0xa378
   123d4:	movt	sl, #2
   123d8:	cmp	r9, #2
   123dc:	bhi	124f8 <__assert_fail@plt+0xdac>
   123e0:	ldr	r1, [sp, #96]	; 0x60
   123e4:	subs	r6, r1, #1
   123e8:	ldr	r1, [sp, #100]	; 0x64
   123ec:	sbc	r7, r1, #0
   123f0:	cmp	r0, #0
   123f4:	beq	1242c <__assert_fail@plt+0xce0>
   123f8:	movw	r1, #35725	; 0x8b8d
   123fc:	add	r3, sp, #104	; 0x68
   12400:	mov	r2, #10
   12404:	mov	r4, #0
   12408:	movt	r1, #1
   1240c:	str	r1, [sp]
   12410:	mov	r1, #0
   12414:	bl	178b8 <__assert_fail@plt+0x616c>
   12418:	cmp	r0, #0
   1241c:	beq	1243c <__assert_fail@plt+0xcf0>
   12420:	mov	r4, r6
   12424:	mov	r5, r7
   12428:	b	12488 <__assert_fail@plt+0xd3c>
   1242c:	mov	r8, sl
   12430:	mov	r4, r6
   12434:	mov	r5, r7
   12438:	b	1248c <__assert_fail@plt+0xd40>
   1243c:	ldr	r0, [sp, #104]	; 0x68
   12440:	ldr	r5, [sp, #96]	; 0x60
   12444:	ldr	r1, [sp, #108]	; 0x6c
   12448:	ldr	r3, [sp, #100]	; 0x64
   1244c:	subs	r2, r0, r5
   12450:	mvn	r5, r5
   12454:	sbcs	r2, r1, r3
   12458:	mov	r2, #0
   1245c:	mvn	r3, r3
   12460:	movwcc	r2, #1
   12464:	subs	r5, r5, r0
   12468:	sbcs	r3, r3, r1
   1246c:	movwcs	r4, #1
   12470:	and	r2, r4, r2
   12474:	adds	r4, r6, r0
   12478:	adc	r5, r7, r1
   1247c:	cmp	r2, #0
   12480:	moveq	r5, r7
   12484:	moveq	r4, r6
   12488:	mov	r8, sl
   1248c:	movw	r0, #41308	; 0xa15c
   12490:	movt	r0, #2
   12494:	ldr	r0, [r0]
   12498:	bl	115a8 <strlen@plt>
   1249c:	mov	sl, r0
   124a0:	mov	r6, #0
   124a4:	mov	r7, #0
   124a8:	mov	r0, r4
   124ac:	mov	r1, r5
   124b0:	mov	r2, sl
   124b4:	mov	r3, #0
   124b8:	bl	18484 <__assert_fail@plt+0x6d38>
   124bc:	adds	r6, r6, #1
   124c0:	adc	r7, r7, #0
   124c4:	subs	r2, r4, sl
   124c8:	mov	r4, r0
   124cc:	sbcs	r2, r5, #0
   124d0:	mov	r5, r1
   124d4:	bcs	124a8 <__assert_fail@plt+0xd5c>
   124d8:	mov	sl, r8
   124dc:	ldr	r8, [sp, #84]	; 0x54
   124e0:	movw	r2, #42256	; 0xa510
   124e4:	movw	r5, #41824	; 0xa360
   124e8:	mov	r0, #1
   124ec:	movt	r2, #2
   124f0:	movt	r5, #2
   124f4:	strb	r0, [r2]
   124f8:	movw	r1, #41856	; 0xa380
   124fc:	movt	r1, #2
   12500:	ldr	r4, [r1]
   12504:	cmp	r4, #0
   12508:	beq	12524 <__assert_fail@plt+0xdd8>
   1250c:	subs	r0, r4, r6
   12510:	rscs	r0, r7, #0
   12514:	bcc	13a44 <__assert_fail@plt+0x22f8>
   12518:	mov	r0, #1
   1251c:	strb	r0, [r2]
   12520:	b	12538 <__assert_fail@plt+0xdec>
   12524:	rsbs	r0, r6, #2
   12528:	rscs	r0, r7, #0
   1252c:	movcs	r6, #2
   12530:	mov	r4, r6
   12534:	str	r6, [r1]
   12538:	ldr	r1, [r5]
   1253c:	ldr	r0, [sp, #92]	; 0x5c
   12540:	cmp	r1, r0
   12544:	bge	12560 <__assert_fail@plt+0xe14>
   12548:	ldr	r2, [sp, #88]	; 0x58
   1254c:	add	r0, r1, #1
   12550:	str	r0, [r5]
   12554:	ldr	r1, [r2, r1, lsl #2]
   12558:	str	r1, [sl]
   1255c:	b	12564 <__assert_fail@plt+0xe18>
   12560:	mov	r0, r1
   12564:	ldr	r1, [sp, #92]	; 0x5c
   12568:	cmp	r0, r1
   1256c:	bge	12590 <__assert_fail@plt+0xe44>
   12570:	ldr	r2, [sp, #88]	; 0x58
   12574:	add	r1, r0, #1
   12578:	str	r1, [r5]
   1257c:	ldr	r0, [r2, r0, lsl #2]
   12580:	movw	r2, #41852	; 0xa37c
   12584:	movt	r2, #2
   12588:	str	r0, [r2]
   1258c:	b	12594 <__assert_fail@plt+0xe48>
   12590:	mov	r1, r0
   12594:	ldr	r0, [sp, #92]	; 0x5c
   12598:	cmp	r1, r0
   1259c:	blt	139b4 <__assert_fail@plt+0x2268>
   125a0:	movw	r0, #41868	; 0xa38c
   125a4:	movt	r0, #2
   125a8:	ldr	r0, [r0]
   125ac:	cmp	r0, #0
   125b0:	beq	125c0 <__assert_fail@plt+0xe74>
   125b4:	bl	115a8 <strlen@plt>
   125b8:	cmp	r0, r4
   125bc:	bhi	13a64 <__assert_fail@plt+0x2318>
   125c0:	ldr	r4, [sl]
   125c4:	movw	r1, #39145	; 0x98e9
   125c8:	movt	r1, #1
   125cc:	mov	r0, r4
   125d0:	bl	113d4 <strcmp@plt>
   125d4:	cmp	r0, #0
   125d8:	beq	125f8 <__assert_fail@plt+0xeac>
   125dc:	mov	r0, #0
   125e0:	mov	r1, r4
   125e4:	mov	r2, #0
   125e8:	mov	r3, #0
   125ec:	bl	14d7c <__assert_fail@plt+0x3630>
   125f0:	cmn	r0, #1
   125f4:	ble	13a70 <__assert_fail@plt+0x2324>
   125f8:	movw	r7, #41888	; 0xa3a0
   125fc:	mov	r0, #0
   12600:	movt	r7, #2
   12604:	mov	r1, r7
   12608:	bl	18674 <__assert_fail@plt+0x6f28>
   1260c:	cmp	r0, #0
   12610:	bne	139dc <__assert_fail@plt+0x2290>
   12614:	cmp	r8, #0
   12618:	bne	12650 <__assert_fail@plt+0xf04>
   1261c:	ldr	r0, [r7, #56]	; 0x38
   12620:	mov	r2, #0
   12624:	mov	r1, #0
   12628:	cmp	r0, #536870913	; 0x20000001
   1262c:	mov	r8, r0
   12630:	movwcc	r2, #1
   12634:	cmp	r0, #0
   12638:	movwgt	r1, #1
   1263c:	ands	r1, r1, r2
   12640:	moveq	r8, #512	; 0x200
   12644:	moveq	r8, #131072	; 0x20000
   12648:	cmp	r0, #131072	; 0x20000
   1264c:	movlt	r8, #131072	; 0x20000
   12650:	ldr	r0, [sp, #64]	; 0x40
   12654:	add	r1, r8, #1
   12658:	bl	172f0 <__assert_fail@plt+0x5ba4>
   1265c:	cmp	r9, #1
   12660:	str	r0, [sp, #88]	; 0x58
   12664:	bhi	12810 <__assert_fail@plt+0x10c4>
   12668:	mov	r0, #1
   1266c:	mov	r2, #0
   12670:	mov	r3, #0
   12674:	mov	r6, #0
   12678:	str	r0, [sp]
   1267c:	mov	r0, #0
   12680:	bl	114c4 <lseek64@plt>
   12684:	cmp	r1, #0
   12688:	bmi	13aa0 <__assert_fail@plt+0x2354>
   1268c:	mov	r5, r1
   12690:	mov	r4, #0
   12694:	str	r0, [sp, #92]	; 0x5c
   12698:	ldr	r0, [sp, #88]	; 0x58
   1269c:	sub	r2, r8, r6
   126a0:	mov	r9, r6
   126a4:	add	r1, r0, r6
   126a8:	mov	r0, #0
   126ac:	bl	16b10 <__assert_fail@plt+0x53c4>
   126b0:	cmp	r0, #0
   126b4:	beq	127d0 <__assert_fail@plt+0x1084>
   126b8:	cmn	r0, #1
   126bc:	beq	13ab4 <__assert_fail@plt+0x2368>
   126c0:	mov	r6, r9
   126c4:	adds	r6, r9, r0
   126c8:	adc	r4, r4, #0
   126cc:	subs	r0, r6, r8
   126d0:	sbcs	r0, r4, #0
   126d4:	bcc	12698 <__assert_fail@plt+0xf4c>
   126d8:	ldrd	r0, [r7, #48]	; 0x30
   126dc:	orrs	r2, r0, r1
   126e0:	beq	13b80 <__assert_fail@plt+0x2434>
   126e4:	ldr	r3, [r7, #16]
   126e8:	ldr	r2, [sp, #92]	; 0x5c
   126ec:	str	r6, [sp, #32]
   126f0:	and	r3, r3, #53248	; 0xd000
   126f4:	adds	r2, r6, r2
   126f8:	orr	r3, r3, #8192	; 0x2000
   126fc:	adc	r5, r4, r5
   12700:	cmp	r3, #40960	; 0xa000
   12704:	bne	12714 <__assert_fail@plt+0xfc8>
   12708:	subs	r3, r0, r2
   1270c:	sbcs	r3, r1, r5
   12710:	bge	1279c <__assert_fail@plt+0x1050>
   12714:	mov	r0, #2
   12718:	str	r2, [sp, #92]	; 0x5c
   1271c:	mov	r2, #0
   12720:	mov	r3, #0
   12724:	str	r0, [sp]
   12728:	mov	r0, #0
   1272c:	bl	114c4 <lseek64@plt>
   12730:	cmp	r1, #0
   12734:	bmi	13ab4 <__assert_fail@plt+0x2368>
   12738:	ldr	r2, [sp, #92]	; 0x5c
   1273c:	mov	r6, r0
   12740:	mov	r7, r1
   12744:	eor	r1, r1, r5
   12748:	eor	r0, r0, r2
   1274c:	orrs	r0, r0, r1
   12750:	mov	r0, r2
   12754:	mov	r1, r5
   12758:	beq	1279c <__assert_fail@plt+0x1050>
   1275c:	mov	r9, #0
   12760:	mov	r0, #0
   12764:	mov	r3, r5
   12768:	str	r9, [sp]
   1276c:	bl	114c4 <lseek64@plt>
   12770:	cmp	r1, #0
   12774:	bmi	13ab4 <__assert_fail@plt+0x2368>
   12778:	ldr	r2, [sp, #92]	; 0x5c
   1277c:	subs	r0, r6, r2
   12780:	sbcs	r0, r7, r5
   12784:	movwlt	r9, #1
   12788:	cmp	r9, #0
   1278c:	movne	r7, r5
   12790:	movne	r6, r2
   12794:	mov	r0, r6
   12798:	mov	r1, r7
   1279c:	subs	r0, r0, r2
   127a0:	ldr	r2, [sp, #32]
   127a4:	sbc	r1, r1, r5
   127a8:	adds	r2, r0, r2
   127ac:	mvn	r0, #-2147483648	; 0x80000000
   127b0:	adc	r4, r1, r4
   127b4:	mvn	r1, r2
   127b8:	eor	r0, r4, r0
   127bc:	orrs	r0, r1, r0
   127c0:	beq	13b80 <__assert_fail@plt+0x2434>
   127c4:	mov	r9, r2
   127c8:	cmn	r4, #1
   127cc:	ble	13ab4 <__assert_fail@plt+0x2368>
   127d0:	ldr	r7, [sp, #100]	; 0x64
   127d4:	cmn	r7, #1
   127d8:	ble	13af8 <__assert_fail@plt+0x23ac>
   127dc:	ldr	r2, [sp, #96]	; 0x60
   127e0:	subs	r0, r9, r8
   127e4:	mov	r5, r8
   127e8:	sbcs	r0, r4, r8, asr #31
   127ec:	mov	r0, #0
   127f0:	movlt	r5, r9
   127f4:	subs	r1, r2, r9
   127f8:	sbcs	r1, r7, r4
   127fc:	movwcc	r0, #1
   12800:	cmp	r0, #0
   12804:	moveq	r4, r7
   12808:	moveq	r9, r2
   1280c:	b	12820 <__assert_fail@plt+0x10d4>
   12810:	ldr	r7, [sp, #100]	; 0x64
   12814:	mvn	r4, #-2147483648	; 0x80000000
   12818:	mvn	r9, #0
   1281c:	mvn	r5, #0
   12820:	movw	r0, #41876	; 0xa394
   12824:	movt	r0, #2
   12828:	ldr	r0, [r0]
   1282c:	cmp	r0, #0
   12830:	beq	12884 <__assert_fail@plt+0x1138>
   12834:	movw	r0, #41992	; 0xa408
   12838:	movt	r0, #2
   1283c:	bl	116a4 <sigemptyset@plt>
   12840:	add	r2, sp, #104	; 0x68
   12844:	mov	r0, #13
   12848:	mov	r1, #0
   1284c:	bl	114b8 <sigaction@plt>
   12850:	ldr	r0, [sp, #104]	; 0x68
   12854:	cmp	r0, #1
   12858:	beq	1286c <__assert_fail@plt+0x1120>
   1285c:	movw	r0, #41992	; 0xa408
   12860:	mov	r1, #13
   12864:	movt	r0, #2
   12868:	bl	11548 <sigaddset@plt>
   1286c:	movw	r1, #41992	; 0xa408
   12870:	movw	r2, #42120	; 0xa488
   12874:	mov	r0, #0
   12878:	movt	r1, #2
   1287c:	movt	r2, #2
   12880:	bl	11404 <sigprocmask@plt>
   12884:	ldr	r0, [sp, #68]	; 0x44
   12888:	sub	r0, r0, #1
   1288c:	cmp	r0, #6
   12890:	bhi	139ec <__assert_fail@plt+0x22a0>
   12894:	add	r1, pc, #4
   12898:	str	r8, [sp, #84]	; 0x54
   1289c:	ldr	pc, [r1, r0, lsl #2]
   128a0:	muleq	r1, r4, r9
   128a4:			; <UNDEFINED> instruction: 0x000129b4
   128a8:			; <UNDEFINED> instruction: 0x000128bc
   128ac:			; <UNDEFINED> instruction: 0x000128bc
   128b0:	strdeq	r2, [r1], -ip
   128b4:	andeq	r2, r1, r0, lsr #26
   128b8:	andeq	r2, r1, r8, ror #27
   128bc:	mov	r4, #0
   128c0:	mov	r9, #1
   128c4:	mov	r7, #0
   128c8:	ldr	sl, [sp, #88]	; 0x58
   128cc:	ldr	r2, [sp, #84]	; 0x54
   128d0:	mov	r0, #0
   128d4:	mov	r1, sl
   128d8:	bl	16b10 <__assert_fail@plt+0x53c4>
   128dc:	cmn	r0, #1
   128e0:	beq	1386c <__assert_fail@plt+0x2120>
   128e4:	mov	r1, r0
   128e8:	movw	r0, #41304	; 0xa158
   128ec:	mov	r8, sl
   128f0:	movt	r0, #2
   128f4:	str	r1, [sp, #92]	; 0x5c
   128f8:	ldr	r6, [r0]
   128fc:	mov	r0, sl
   12900:	strb	r6, [r8, r1]!
   12904:	mov	r1, r6
   12908:	bl	11494 <rawmemchr@plt>
   1290c:	cmp	r0, r8
   12910:	beq	12968 <__assert_fail@plt+0x121c>
   12914:	add	r5, r0, #1
   12918:	ldr	r0, [sp, #96]	; 0x60
   1291c:	adds	r4, r4, #1
   12920:	adc	r7, r7, #0
   12924:	subs	r0, r4, r0
   12928:	ldr	r0, [sp, #100]	; 0x64
   1292c:	sbcs	r0, r7, r0
   12930:	bcc	12960 <__assert_fail@plt+0x1214>
   12934:	sub	r2, r5, sl
   12938:	and	r0, r9, #1
   1293c:	mov	r1, sl
   12940:	bl	1408c <__assert_fail@plt+0x2940>
   12944:	movw	r0, #41304	; 0xa158
   12948:	mov	r4, #0
   1294c:	mov	r9, #1
   12950:	mov	sl, r5
   12954:	mov	r7, #0
   12958:	movt	r0, #2
   1295c:	ldr	r6, [r0]
   12960:	mov	r0, r5
   12964:	b	12904 <__assert_fail@plt+0x11b8>
   12968:	cmp	r8, sl
   1296c:	beq	12984 <__assert_fail@plt+0x1238>
   12970:	sub	r2, r8, sl
   12974:	and	r0, r9, #1
   12978:	mov	r1, sl
   1297c:	bl	1408c <__assert_fail@plt+0x2940>
   12980:	mov	r9, #0
   12984:	ldr	r0, [sp, #92]	; 0x5c
   12988:	cmp	r0, #0
   1298c:	bne	128c8 <__assert_fail@plt+0x117c>
   12990:	b	13778 <__assert_fail@plt+0x202c>
   12994:	mov	r0, #0
   12998:	mov	r1, r7
   1299c:	str	r0, [sp, #8]
   129a0:	str	r0, [sp, #12]
   129a4:	mvn	r0, #0
   129a8:	str	r0, [sp]
   129ac:	ldr	r0, [sp, #96]	; 0x60
   129b0:	b	1324c <__assert_fail@plt+0x1b00>
   129b4:	ldr	r2, [sp, #96]	; 0x60
   129b8:	mvn	r0, r8
   129bc:	mov	r9, #0
   129c0:	mov	r4, #0
   129c4:	mov	r5, #0
   129c8:	mov	r7, #0
   129cc:	str	r0, [sp, #48]	; 0x30
   129d0:	mov	r0, #0
   129d4:	str	r0, [sp, #56]	; 0x38
   129d8:	mov	r0, #0
   129dc:	str	r0, [sp, #92]	; 0x5c
   129e0:	ldr	r6, [sp, #88]	; 0x58
   129e4:	mov	sl, r2
   129e8:	mov	r0, #0
   129ec:	mov	r2, r8
   129f0:	mov	r1, r6
   129f4:	bl	16b10 <__assert_fail@plt+0x53c4>
   129f8:	cmp	r0, #0
   129fc:	beq	12cec <__assert_fail@plt+0x15a0>
   12a00:	mov	r8, r6
   12a04:	cmn	r0, #1
   12a08:	mov	r6, r0
   12a0c:	mov	r2, sl
   12a10:	str	r0, [sp, #44]	; 0x2c
   12a14:	str	r9, [sp, #64]	; 0x40
   12a18:	beq	1386c <__assert_fail@plt+0x2120>
   12a1c:	ldr	r0, [sp, #92]	; 0x5c
   12a20:	ldr	r1, [sp, #100]	; 0x64
   12a24:	str	r4, [sp, #60]	; 0x3c
   12a28:	str	r6, [sp, #76]	; 0x4c
   12a2c:	subs	r0, r2, r0
   12a30:	sbc	r1, r1, r7
   12a34:	subs	r2, r0, r5
   12a38:	sbc	r1, r1, #0
   12a3c:	subs	r0, r6, r2
   12a40:	mov	r9, r2
   12a44:	str	r2, [sp, #72]	; 0x48
   12a48:	rscs	r0, r1, #0
   12a4c:	mov	r0, #0
   12a50:	str	r1, [sp, #68]	; 0x44
   12a54:	add	r1, r8, r2
   12a58:	movwcc	r0, #1
   12a5c:	sub	r4, r1, #1
   12a60:	cmp	r0, #0
   12a64:	movw	r0, #41304	; 0xa158
   12a68:	movt	r0, #2
   12a6c:	movne	r2, r6
   12a70:	movwne	r4, #0
   12a74:	movwne	r9, #0
   12a78:	ldr	r1, [r0]
   12a7c:	mov	r0, r8
   12a80:	bl	115d8 <memrchr@plt>
   12a84:	mov	sl, r0
   12a88:	cmp	r5, #0
   12a8c:	str	r4, [sp, #80]	; 0x50
   12a90:	beq	12b00 <__assert_fail@plt+0x13b4>
   12a94:	ldr	r0, [sp, #92]	; 0x5c
   12a98:	orrs	r0, r0, r7
   12a9c:	beq	12aa8 <__assert_fail@plt+0x135c>
   12aa0:	cmp	sl, #0
   12aa4:	beq	12b80 <__assert_fail@plt+0x1434>
   12aa8:	mov	r4, r8
   12aac:	ldr	r8, [sp, #56]	; 0x38
   12ab0:	clz	r0, r0
   12ab4:	mov	r2, r5
   12ab8:	lsr	r0, r0, #5
   12abc:	mov	r1, r8
   12ac0:	bl	1408c <__assert_fail@plt+0x2940>
   12ac4:	ldr	r0, [sp, #92]	; 0x5c
   12ac8:	ldr	r6, [sp, #84]	; 0x54
   12acc:	adds	r0, r0, r5
   12ad0:	adc	r7, r7, #0
   12ad4:	cmp	r5, r6
   12ad8:	str	r0, [sp, #92]	; 0x5c
   12adc:	str	r7, [sp, #52]	; 0x34
   12ae0:	bls	12af4 <__assert_fail@plt+0x13a8>
   12ae4:	mov	r0, r8
   12ae8:	mov	r1, r6
   12aec:	bl	17390 <__assert_fail@plt+0x5c44>
   12af0:	str	r0, [sp, #56]	; 0x38
   12af4:	mov	r8, r4
   12af8:	ldr	r4, [sp, #80]	; 0x50
   12afc:	b	12b08 <__assert_fail@plt+0x13bc>
   12b00:	ldr	r6, [sp, #64]	; 0x40
   12b04:	str	r7, [sp, #52]	; 0x34
   12b08:	cmp	sl, #0
   12b0c:	str	r6, [sp, #64]	; 0x40
   12b10:	beq	12b78 <__assert_fail@plt+0x142c>
   12b14:	sub	r0, sl, r8
   12b18:	mov	r1, r8
   12b1c:	ldr	r7, [sp, #92]	; 0x5c
   12b20:	ldr	r8, [sp, #52]	; 0x34
   12b24:	add	r5, r0, #1
   12b28:	mov	r2, r5
   12b2c:	orr	r0, r7, r8
   12b30:	clz	r0, r0
   12b34:	lsr	r0, r0, #5
   12b38:	bl	1408c <__assert_fail@plt+0x2940>
   12b3c:	ldr	r1, [sp, #76]	; 0x4c
   12b40:	ldr	r2, [sp, #72]	; 0x48
   12b44:	ldr	r3, [sp, #68]	; 0x44
   12b48:	subs	r0, r1, r2
   12b4c:	sub	r6, r1, r5
   12b50:	rscs	r0, r3, #0
   12b54:	subcs	r9, r9, r5
   12b58:	adds	r7, r7, r5
   12b5c:	mov	r5, #0
   12b60:	str	r7, [sp, #92]	; 0x5c
   12b64:	mov	r7, r8
   12b68:	adc	r7, r8, #0
   12b6c:	add	r8, sl, #1
   12b70:	mov	sl, #1
   12b74:	b	12bfc <__assert_fail@plt+0x14b0>
   12b78:	ldr	r7, [sp, #52]	; 0x34
   12b7c:	mov	r5, #0
   12b80:	ldr	r0, [sp, #60]	; 0x3c
   12b84:	ldr	r1, [sp, #76]	; 0x4c
   12b88:	mov	sl, #1
   12b8c:	tst	r0, #1
   12b90:	beq	12b9c <__assert_fail@plt+0x1450>
   12b94:	mov	r6, r1
   12b98:	b	12bf4 <__assert_fail@plt+0x14a8>
   12b9c:	mov	sl, r8
   12ba0:	ldr	r8, [sp, #92]	; 0x5c
   12ba4:	cmp	r4, #0
   12ba8:	mov	r4, r1
   12bac:	movne	r4, r9
   12bb0:	mov	r1, sl
   12bb4:	mov	r2, r4
   12bb8:	orr	r0, r8, r7
   12bbc:	clz	r0, r0
   12bc0:	lsr	r0, r0, #5
   12bc4:	bl	1408c <__assert_fail@plt+0x2940>
   12bc8:	ldr	r1, [sp, #76]	; 0x4c
   12bcc:	adds	r8, r8, r4
   12bd0:	add	sl, sl, r4
   12bd4:	adc	r7, r7, #0
   12bd8:	str	r8, [sp, #92]	; 0x5c
   12bdc:	mov	r8, sl
   12be0:	mov	sl, #0
   12be4:	sub	r6, r1, r4
   12be8:	ldr	r4, [sp, #80]	; 0x50
   12bec:	cmp	r4, #0
   12bf0:	movwne	r9, #0
   12bf4:	ldr	r2, [sp, #72]	; 0x48
   12bf8:	ldr	r3, [sp, #68]	; 0x44
   12bfc:	subs	r0, r1, r2
   12c00:	mov	r1, r6
   12c04:	mov	r2, r9
   12c08:	rscs	r0, r3, #0
   12c0c:	mov	r0, #0
   12c10:	mov	r3, r4
   12c14:	movwcc	r0, #1
   12c18:	cmp	r6, #0
   12c1c:	movwne	r1, #1
   12c20:	cmp	r9, #0
   12c24:	movwne	r2, #1
   12c28:	cmp	r4, #0
   12c2c:	movwne	r3, #1
   12c30:	tst	r3, r2
   12c34:	andseq	r0, r0, r1
   12c38:	beq	12c7c <__assert_fail@plt+0x1530>
   12c3c:	ldr	r1, [sp, #64]	; 0x40
   12c40:	cmp	r4, #0
   12c44:	ldr	r4, [sp, #96]	; 0x60
   12c48:	moveq	r9, r6
   12c4c:	sub	r0, r1, r5
   12c50:	cmp	r0, r9
   12c54:	bcs	12c84 <__assert_fail@plt+0x1538>
   12c58:	ldr	r0, [sp, #48]	; 0x30
   12c5c:	cmp	r1, r0
   12c60:	bhi	13994 <__assert_fail@plt+0x2248>
   12c64:	ldr	r0, [sp, #84]	; 0x54
   12c68:	add	r1, r1, r0
   12c6c:	ldr	r0, [sp, #56]	; 0x38
   12c70:	str	r1, [sp, #64]	; 0x40
   12c74:	bl	17390 <__assert_fail@plt+0x5c44>
   12c78:	b	12c88 <__assert_fail@plt+0x153c>
   12c7c:	ldr	r2, [sp, #96]	; 0x60
   12c80:	b	12cac <__assert_fail@plt+0x1560>
   12c84:	ldr	r0, [sp, #56]	; 0x38
   12c88:	str	r0, [sp, #56]	; 0x38
   12c8c:	add	r0, r0, r5
   12c90:	mov	r1, r8
   12c94:	mov	r2, r9
   12c98:	bl	11434 <memcpy@plt>
   12c9c:	add	r8, r8, r9
   12ca0:	sub	r6, r6, r9
   12ca4:	add	r5, r9, r5
   12ca8:	mov	r2, r4
   12cac:	ldr	r1, [sp, #80]	; 0x50
   12cb0:	ldr	r0, [sp, #92]	; 0x5c
   12cb4:	cmp	r1, #0
   12cb8:	movwne	r0, #0
   12cbc:	movwne	r7, #0
   12cc0:	cmp	r6, #0
   12cc4:	str	r0, [sp, #92]	; 0x5c
   12cc8:	clz	r0, r1
   12ccc:	lsr	r0, r0, #5
   12cd0:	and	r4, sl, r0
   12cd4:	bne	12a1c <__assert_fail@plt+0x12d0>
   12cd8:	ldr	r0, [sp, #44]	; 0x2c
   12cdc:	ldr	r9, [sp, #64]	; 0x40
   12ce0:	ldr	r8, [sp, #84]	; 0x54
   12ce4:	cmp	r0, #0
   12ce8:	bne	129e0 <__assert_fail@plt+0x1294>
   12cec:	ldr	r4, [sp, #56]	; 0x38
   12cf0:	cmp	r5, #0
   12cf4:	beq	12d14 <__assert_fail@plt+0x15c8>
   12cf8:	ldr	r0, [sp, #92]	; 0x5c
   12cfc:	mov	r1, r4
   12d00:	mov	r2, r5
   12d04:	orr	r0, r0, r7
   12d08:	clz	r0, r0
   12d0c:	lsr	r0, r0, #5
   12d10:	bl	1408c <__assert_fail@plt+0x2940>
   12d14:	mov	r0, r4
   12d18:	bl	14e40 <__assert_fail@plt+0x36f4>
   12d1c:	b	13778 <__assert_fail@plt+0x202c>
   12d20:	ldr	r2, [sp, #96]	; 0x60
   12d24:	ldr	r3, [sp, #76]	; 0x4c
   12d28:	ldr	r8, [sp, #72]	; 0x48
   12d2c:	subs	r0, r2, #1
   12d30:	sbc	r1, r7, #0
   12d34:	subs	r2, r2, r3
   12d38:	sbcs	r2, r7, r8
   12d3c:	bcc	13b40 <__assert_fail@plt+0x23f4>
   12d40:	subs	r0, r0, r9
   12d44:	sbcs	r0, r1, r4
   12d48:	bcs	13b40 <__assert_fail@plt+0x23f4>
   12d4c:	ldr	r2, [sp, #96]	; 0x60
   12d50:	mov	r0, r9
   12d54:	mov	r1, r4
   12d58:	mov	r3, r7
   12d5c:	str	r9, [sp, #32]
   12d60:	str	r4, [sp, #24]
   12d64:	bl	18484 <__assert_fail@plt+0x6d38>
   12d68:	subs	r7, r0, #1
   12d6c:	mov	sl, r1
   12d70:	mov	r4, #0
   12d74:	sbc	lr, r1, #0
   12d78:	ldr	r1, [sp, #76]	; 0x4c
   12d7c:	subs	r2, r1, #2
   12d80:	sbcs	r2, r8, #0
   12d84:	bcc	12eb8 <__assert_fail@plt+0x176c>
   12d88:	subs	r2, r1, #1
   12d8c:	umull	r3, r1, r0, r2
   12d90:	sbc	r7, r8, #0
   12d94:	mov	r6, r2
   12d98:	mov	r8, r0
   12d9c:	str	r7, [sp, #68]	; 0x44
   12da0:	mla	r1, r0, r7, r1
   12da4:	mla	r1, sl, r2, r1
   12da8:	subs	r7, r3, #1
   12dac:	sbc	r9, r1, #0
   12db0:	subs	r1, r7, r5
   12db4:	sbcs	r1, r9, #0
   12db8:	bge	13328 <__assert_fail@plt+0x1bdc>
   12dbc:	ldr	r0, [sp, #88]	; 0x58
   12dc0:	sub	r5, r5, r7
   12dc4:	mov	r2, r5
   12dc8:	add	r1, r0, r7
   12dcc:	bl	11410 <memmove@plt>
   12dd0:	mov	r3, r6
   12dd4:	ldr	r6, [sp, #68]	; 0x44
   12dd8:	mov	ip, r7
   12ddc:	mov	lr, r9
   12de0:	mov	r4, #0
   12de4:	b	13360 <__assert_fail@plt+0x1c14>
   12de8:	ldr	r0, [sp, #80]	; 0x50
   12dec:	cmp	r0, #0
   12df0:	beq	12ed0 <__assert_fail@plt+0x1784>
   12df4:	ldr	sl, [sp, #96]	; 0x60
   12df8:	b	12f38 <__assert_fail@plt+0x17ec>
   12dfc:	ldr	r0, [sp, #80]	; 0x50
   12e00:	cmp	r0, #0
   12e04:	beq	13228 <__assert_fail@plt+0x1adc>
   12e08:	ldr	r0, [sp, #76]	; 0x4c
   12e0c:	ldr	r6, [sp, #96]	; 0x60
   12e10:	subs	sl, r0, #1
   12e14:	ldr	r0, [sp, #72]	; 0x48
   12e18:	sbc	r2, r0, #0
   12e1c:	subs	r0, sl, r6
   12e20:	mov	r0, r2
   12e24:	sbcs	r0, r2, r7
   12e28:	str	r2, [sp, #100]	; 0x64
   12e2c:	bcs	13b60 <__assert_fail@plt+0x2414>
   12e30:	mov	r1, r9
   12e34:	mov	r9, r4
   12e38:	subs	r0, r1, r6
   12e3c:	sbcs	r0, r4, r7
   12e40:	bcc	13b60 <__assert_fail@plt+0x2414>
   12e44:	mov	r0, r1
   12e48:	str	r1, [sp, #32]
   12e4c:	mov	r1, r9
   12e50:	mov	r2, r6
   12e54:	mov	r3, r7
   12e58:	bl	18484 <__assert_fail@plt+0x6d38>
   12e5c:	ldr	r4, [sp, #76]	; 0x4c
   12e60:	ldr	r3, [sp, #72]	; 0x48
   12e64:	umull	r8, r2, r0, r4
   12e68:	eor	r6, r4, r6
   12e6c:	eor	r7, r3, r7
   12e70:	mla	r2, r0, r3, r2
   12e74:	orrs	r3, r6, r7
   12e78:	ldr	r3, [sp, #100]	; 0x64
   12e7c:	mlane	r9, r1, r4, r2
   12e80:	umull	r6, r2, r0, sl
   12e84:	mla	r0, r0, r3, r2
   12e88:	mla	r7, r1, sl, r0
   12e8c:	ldr	r0, [sp, #32]
   12e90:	moveq	r8, r0
   12e94:	subs	r0, r6, r5
   12e98:	sbcs	r0, r7, #0
   12e9c:	bge	1325c <__assert_fail@plt+0x1b10>
   12ea0:	ldr	r0, [sp, #88]	; 0x58
   12ea4:	sub	r4, r5, r6
   12ea8:	mov	r2, r4
   12eac:	add	r1, r0, r6
   12eb0:	bl	11410 <memmove@plt>
   12eb4:	b	13280 <__assert_fail@plt+0x1b34>
   12eb8:	mov	r3, #1
   12ebc:	mov	ip, #0
   12ec0:	mov	r9, #0
   12ec4:	mov	r6, #0
   12ec8:	mov	r8, r0
   12ecc:	b	13360 <__assert_fail@plt+0x1c14>
   12ed0:	ldr	sl, [sp, #96]	; 0x60
   12ed4:	movw	r8, #42252	; 0xa50c
   12ed8:	cmp	r7, #0
   12edc:	movt	r8, #2
   12ee0:	bne	13994 <__assert_fail@plt+0x2248>
   12ee4:	mov	r0, sl
   12ee8:	mov	r1, #16
   12eec:	bl	17418 <__assert_fail@plt+0x5ccc>
   12ef0:	ldr	r7, [sp, #100]	; 0x64
   12ef4:	mov	r5, r0
   12ef8:	mov	r4, #0
   12efc:	mvn	r9, #0
   12f00:	mov	r6, #0
   12f04:	bl	141a4 <__assert_fail@plt+0x2a58>
   12f08:	ldr	r0, [r8]
   12f0c:	bl	1773c <__assert_fail@plt+0x5ff0>
   12f10:	mov	r1, r5
   12f14:	str	r0, [r1, r6, lsl #4]!
   12f18:	add	r6, r6, #1
   12f1c:	subs	r0, r6, sl
   12f20:	rscs	r0, r7, #0
   12f24:	str	r9, [r1, #4]
   12f28:	str	r4, [r1, #8]
   12f2c:	str	r4, [r1, #12]
   12f30:	bcc	12f04 <__assert_fail@plt+0x17b8>
   12f34:	str	r5, [sp, #48]	; 0x30
   12f38:	mov	r0, #0
   12f3c:	mov	r6, #1
   12f40:	str	r0, [sp, #92]	; 0x5c
   12f44:	mov	r0, #0
   12f48:	str	r0, [sp, #68]	; 0x44
   12f4c:	mov	r0, #0
   12f50:	str	r0, [sp, #60]	; 0x3c
   12f54:	mov	r0, #0
   12f58:	str	r0, [sp, #56]	; 0x38
   12f5c:	mov	r0, #0
   12f60:	str	r0, [sp, #40]	; 0x28
   12f64:	ldr	r1, [sp, #88]	; 0x58
   12f68:	ldr	r2, [sp, #84]	; 0x54
   12f6c:	mov	r0, #0
   12f70:	bl	16b10 <__assert_fail@plt+0x53c4>
   12f74:	cmp	r0, #0
   12f78:	beq	13208 <__assert_fail@plt+0x1abc>
   12f7c:	cmn	r0, #1
   12f80:	beq	1386c <__assert_fail@plt+0x2120>
   12f84:	ldr	r8, [sp, #88]	; 0x58
   12f88:	str	sl, [sp, #96]	; 0x60
   12f8c:	add	r5, r8, r0
   12f90:	str	r5, [sp, #64]	; 0x40
   12f94:	movw	r0, #41304	; 0xa158
   12f98:	sub	r2, r5, r8
   12f9c:	mov	r4, r8
   12fa0:	movt	r0, #2
   12fa4:	ldr	r1, [r0]
   12fa8:	mov	r0, r8
   12fac:	bl	1165c <memchr@plt>
   12fb0:	cmp	r0, #0
   12fb4:	mov	r8, r5
   12fb8:	mov	r7, r0
   12fbc:	addne	r8, r0, #1
   12fc0:	ldr	r0, [sp, #80]	; 0x50
   12fc4:	sub	r9, r8, r4
   12fc8:	cmp	r0, #0
   12fcc:	beq	1301c <__assert_fail@plt+0x18d0>
   12fd0:	ldr	r0, [sp, #76]	; 0x4c
   12fd4:	ldr	r1, [sp, #72]	; 0x48
   12fd8:	ldr	r2, [sp, #92]	; 0x5c
   12fdc:	eor	r0, r6, r0
   12fe0:	eor	r1, r2, r1
   12fe4:	orrs	r0, r0, r1
   12fe8:	bne	131b8 <__assert_fail@plt+0x1a6c>
   12fec:	movw	r0, #41864	; 0xa388
   12ff0:	movt	r0, #2
   12ff4:	ldrb	r0, [r0]
   12ff8:	cmp	r0, #1
   12ffc:	bne	13194 <__assert_fail@plt+0x1a48>
   13000:	mov	r0, #1
   13004:	mov	r1, r4
   13008:	mov	r2, r9
   1300c:	bl	14f0c <__assert_fail@plt+0x37c0>
   13010:	cmp	r0, r9
   13014:	beq	131b8 <__assert_fail@plt+0x1a6c>
   13018:	b	13a00 <__assert_fail@plt+0x22b4>
   1301c:	ldr	r5, [sp, #48]	; 0x30
   13020:	mov	r2, sl
   13024:	ldr	sl, [sp, #68]	; 0x44
   13028:	str	r6, [sp, #52]	; 0x34
   1302c:	mov	r0, r5
   13030:	mov	r1, sl
   13034:	bl	149a8 <__assert_fail@plt+0x325c>
   13038:	mov	r6, r0
   1303c:	movw	r0, #41864	; 0xa388
   13040:	movt	r0, #2
   13044:	ldrb	r0, [r0]
   13048:	cmp	r0, #1
   1304c:	bne	13070 <__assert_fail@plt+0x1924>
   13050:	add	r0, r5, sl, lsl #4
   13054:	mov	r1, r4
   13058:	mov	r2, r9
   1305c:	ldr	r0, [r0, #4]
   13060:	bl	14f0c <__assert_fail@plt+0x37c0>
   13064:	cmp	r0, r9
   13068:	bne	13090 <__assert_fail@plt+0x1944>
   1306c:	b	130b4 <__assert_fail@plt+0x1968>
   13070:	add	r0, r5, sl, lsl #4
   13074:	mov	r1, r9
   13078:	mov	r2, #1
   1307c:	ldr	r3, [r0, #8]
   13080:	mov	r0, r4
   13084:	bl	11458 <fwrite_unlocked@plt>
   13088:	cmp	r0, #1
   1308c:	beq	130b4 <__assert_fail@plt+0x1968>
   13090:	bl	115f0 <__errno_location@plt>
   13094:	ldr	r4, [r0]
   13098:	cmp	r4, #32
   1309c:	bne	13998 <__assert_fail@plt+0x224c>
   130a0:	movw	r0, #41876	; 0xa394
   130a4:	movt	r0, #2
   130a8:	ldr	r0, [r0]
   130ac:	cmp	r0, #0
   130b0:	beq	13998 <__assert_fail@plt+0x224c>
   130b4:	ldr	r4, [sp, #60]	; 0x3c
   130b8:	orr	r4, r4, r6
   130bc:	bl	115f0 <__errno_location@plt>
   130c0:	mov	r1, r0
   130c4:	ldr	r0, [r0]
   130c8:	ldr	sl, [sp, #96]	; 0x60
   130cc:	str	r4, [sp, #60]	; 0x3c
   130d0:	subs	r6, r0, #32
   130d4:	movw	r0, #41876	; 0xa394
   130d8:	movt	r0, #2
   130dc:	movwne	r6, #1
   130e0:	tst	r4, #1
   130e4:	ldr	r5, [r0]
   130e8:	beq	13128 <__assert_fail@plt+0x19dc>
   130ec:	str	r1, [sp, #44]	; 0x2c
   130f0:	ldr	r0, [sp, #48]	; 0x30
   130f4:	ldr	r1, [sp, #68]	; 0x44
   130f8:	mov	r9, sl
   130fc:	add	sl, r0, r1, lsl #4
   13100:	mov	r4, sl
   13104:	ldr	r0, [r4, #8]!
   13108:	bl	14ca4 <__assert_fail@plt+0x3558>
   1310c:	cmp	r0, #0
   13110:	bne	13a20 <__assert_fail@plt+0x22d4>
   13114:	mov	r0, #0
   13118:	str	r0, [r4]
   1311c:	mvn	r0, #1
   13120:	str	r0, [sl, #4]
   13124:	mov	sl, r9
   13128:	ldr	r2, [sp, #56]	; 0x38
   1312c:	clz	r0, r5
   13130:	ldr	r5, [sp, #64]	; 0x40
   13134:	cmp	r7, #0
   13138:	lsr	r0, r0, #5
   1313c:	orr	r0, r6, r0
   13140:	orr	r2, r2, r0
   13144:	beq	131f4 <__assert_fail@plt+0x1aa8>
   13148:	ldr	r0, [sp, #68]	; 0x44
   1314c:	ldr	r6, [sp, #52]	; 0x34
   13150:	mov	r1, r0
   13154:	add	r1, r0, #1
   13158:	mov	r0, r1
   1315c:	str	r1, [sp, #68]	; 0x44
   13160:	eor	r0, sl, r1
   13164:	ldr	r1, [sp, #100]	; 0x64
   13168:	orrs	r0, r0, r1
   1316c:	bne	131f8 <__assert_fail@plt+0x1aac>
   13170:	tst	r2, #1
   13174:	beq	13700 <__assert_fail@plt+0x1fb4>
   13178:	mov	r0, #1
   1317c:	str	r0, [sp, #40]	; 0x28
   13180:	mov	r0, #0
   13184:	str	r0, [sp, #68]	; 0x44
   13188:	mov	r0, #0
   1318c:	str	r0, [sp, #56]	; 0x38
   13190:	b	131fc <__assert_fail@plt+0x1ab0>
   13194:	movw	r0, #41836	; 0xa36c
   13198:	mov	r1, r9
   1319c:	mov	r2, #1
   131a0:	movt	r0, #2
   131a4:	ldr	r3, [r0]
   131a8:	mov	r0, r4
   131ac:	bl	11458 <fwrite_unlocked@plt>
   131b0:	cmp	r0, #1
   131b4:	bne	139f0 <__assert_fail@plt+0x22a4>
   131b8:	cmp	r7, #0
   131bc:	beq	131ec <__assert_fail@plt+0x1aa0>
   131c0:	ldr	r1, [sp, #100]	; 0x64
   131c4:	ldr	r2, [sp, #92]	; 0x5c
   131c8:	eor	r0, r6, sl
   131cc:	adds	r6, r6, #1
   131d0:	eor	r1, r2, r1
   131d4:	adc	r2, r2, #0
   131d8:	orr	r0, r0, r1
   131dc:	cmp	r0, #0
   131e0:	moveq	r2, r0
   131e4:	movweq	r6, #1
   131e8:	str	r2, [sp, #92]	; 0x5c
   131ec:	ldr	r5, [sp, #64]	; 0x40
   131f0:	b	131fc <__assert_fail@plt+0x1ab0>
   131f4:	ldr	r6, [sp, #52]	; 0x34
   131f8:	str	r2, [sp, #56]	; 0x38
   131fc:	cmp	r8, r5
   13200:	bne	12f94 <__assert_fail@plt+0x1848>
   13204:	b	12f64 <__assert_fail@plt+0x1818>
   13208:	ldr	r0, [sp, #80]	; 0x50
   1320c:	ldr	r5, [sp, #68]	; 0x44
   13210:	cmp	r0, #0
   13214:	bne	13778 <__assert_fail@plt+0x202c>
   13218:	ldr	r0, [sp, #40]	; 0x28
   1321c:	tst	r0, #1
   13220:	movne	r5, sl
   13224:	b	13704 <__assert_fail@plt+0x1fb8>
   13228:	mov	r1, r4
   1322c:	ldr	r4, [sp, #96]	; 0x60
   13230:	mov	r0, r9
   13234:	mov	r3, r7
   13238:	mov	r2, r4
   1323c:	bl	18484 <__assert_fail@plt+0x6d38>
   13240:	str	r4, [sp, #8]
   13244:	str	r7, [sp, #12]
   13248:	str	r5, [sp]
   1324c:	ldr	r2, [sp, #88]	; 0x58
   13250:	mov	r3, r8
   13254:	bl	13b90 <__assert_fail@plt+0x2444>
   13258:	b	13778 <__assert_fail@plt+0x202c>
   1325c:	mov	r0, #1
   13260:	subs	r2, r6, r5
   13264:	str	r0, [sp]
   13268:	sbc	r3, r7, #0
   1326c:	mov	r0, #0
   13270:	bl	114c4 <lseek64@plt>
   13274:	mvn	r4, #0
   13278:	cmn	r1, #1
   1327c:	ble	1386c <__assert_fail@plt+0x2120>
   13280:	subs	r0, r6, r8
   13284:	sbcs	r0, r7, r9
   13288:	bge	13778 <__assert_fail@plt+0x202c>
   1328c:	cmn	r4, #1
   13290:	bne	132b0 <__assert_fail@plt+0x1b64>
   13294:	ldr	r1, [sp, #88]	; 0x58
   13298:	ldr	r2, [sp, #84]	; 0x54
   1329c:	mov	r0, #0
   132a0:	bl	16b10 <__assert_fail@plt+0x53c4>
   132a4:	mov	r4, r0
   132a8:	cmn	r0, #1
   132ac:	beq	1386c <__assert_fail@plt+0x2120>
   132b0:	cmp	r4, #0
   132b4:	beq	13778 <__assert_fail@plt+0x202c>
   132b8:	subs	r5, r8, r6
   132bc:	mov	sl, r9
   132c0:	sbc	r0, r9, r7
   132c4:	subs	r1, r4, r5
   132c8:	ldr	r1, [sp, #88]	; 0x58
   132cc:	rscs	r0, r0, #0
   132d0:	mov	r0, #1
   132d4:	movlt	r5, r4
   132d8:	mov	r2, r5
   132dc:	bl	14f0c <__assert_fail@plt+0x37c0>
   132e0:	cmp	r0, r5
   132e4:	beq	1330c <__assert_fail@plt+0x1bc0>
   132e8:	bl	115f0 <__errno_location@plt>
   132ec:	ldr	r4, [r0]
   132f0:	cmp	r4, #32
   132f4:	bne	13a38 <__assert_fail@plt+0x22ec>
   132f8:	movw	r0, #41876	; 0xa394
   132fc:	movt	r0, #2
   13300:	ldr	r0, [r0]
   13304:	cmp	r0, #0
   13308:	beq	13a38 <__assert_fail@plt+0x22ec>
   1330c:	adds	r6, r6, r5
   13310:	mvn	r4, #0
   13314:	adc	r7, r7, #0
   13318:	subs	r0, r6, r8
   1331c:	sbcs	r0, r7, sl
   13320:	blt	1328c <__assert_fail@plt+0x1b40>
   13324:	b	13778 <__assert_fail@plt+0x202c>
   13328:	mov	r0, #1
   1332c:	subs	r2, r7, r5
   13330:	str	r0, [sp]
   13334:	sbc	r3, r9, #0
   13338:	mov	r0, #0
   1333c:	bl	114c4 <lseek64@plt>
   13340:	mov	r3, r6
   13344:	ldr	r6, [sp, #68]	; 0x44
   13348:	mov	ip, r7
   1334c:	mvn	r5, #0
   13350:	cmn	r1, #1
   13354:	mov	lr, r9
   13358:	mov	r4, #0
   1335c:	ble	1386c <__assert_fail@plt+0x2120>
   13360:	ldr	r2, [sp, #32]
   13364:	ldr	r1, [sp, #24]
   13368:	subs	r0, ip, r2
   1336c:	sbcs	r0, r9, r1
   13370:	bge	136b8 <__assert_fail@plt+0x1f6c>
   13374:	subs	r0, r2, #1
   13378:	mov	r4, #0
   1337c:	str	sl, [sp, #48]	; 0x30
   13380:	str	r0, [sp, #64]	; 0x40
   13384:	sbc	r0, r1, #0
   13388:	str	r0, [sp, #60]	; 0x3c
   1338c:	mov	r0, #1
   13390:	str	r0, [sp, #52]	; 0x34
   13394:	mov	r0, #0
   13398:	cmn	r5, #1
   1339c:	bne	133e4 <__assert_fail@plt+0x1c98>
   133a0:	ldr	r1, [sp, #88]	; 0x58
   133a4:	ldr	r2, [sp, #84]	; 0x54
   133a8:	str	r0, [sp, #68]	; 0x44
   133ac:	mov	r0, #0
   133b0:	str	r4, [sp, #56]	; 0x38
   133b4:	mov	r5, r3
   133b8:	mov	r4, ip
   133bc:	str	lr, [sp, #92]	; 0x5c
   133c0:	bl	16b10 <__assert_fail@plt+0x53c4>
   133c4:	mov	ip, r4
   133c8:	mov	r3, r5
   133cc:	mov	r5, r0
   133d0:	ldr	lr, [sp, #92]	; 0x5c
   133d4:	ldr	r4, [sp, #56]	; 0x38
   133d8:	ldr	r0, [sp, #68]	; 0x44
   133dc:	cmn	r5, #1
   133e0:	beq	1386c <__assert_fail@plt+0x2120>
   133e4:	cmp	r5, #0
   133e8:	beq	136bc <__assert_fail@plt+0x1f70>
   133ec:	ldr	r0, [sp, #32]
   133f0:	str	r3, [sp, #68]	; 0x44
   133f4:	subs	r3, r0, ip
   133f8:	ldr	r0, [sp, #24]
   133fc:	sbc	r0, r0, r9
   13400:	subs	r1, r5, r3
   13404:	rscs	r0, r0, #0
   13408:	movlt	r3, r5
   1340c:	cmp	r3, #0
   13410:	beq	1367c <__assert_fail@plt+0x1f30>
   13414:	ldr	r4, [sp, #88]	; 0x58
   13418:	ldr	r5, [sp, #52]	; 0x34
   1341c:	mov	r0, r6
   13420:	add	r1, r4, r3
   13424:	str	r1, [sp, #92]	; 0x5c
   13428:	mov	r1, #0
   1342c:	str	r1, [sp, #20]
   13430:	subs	r0, r7, ip
   13434:	str	r5, [sp, #28]
   13438:	str	ip, [sp, #40]	; 0x28
   1343c:	mov	r5, lr
   13440:	str	r3, [sp, #36]	; 0x24
   13444:	sbc	r1, lr, r9
   13448:	rsbs	r2, r0, #0
   1344c:	rscs	r2, r1, #0
   13450:	mov	r2, #0
   13454:	movwlt	r2, #1
   13458:	cmp	r2, #0
   1345c:	moveq	r1, r2
   13460:	movne	r2, r0
   13464:	subs	r0, r3, r2
   13468:	rscs	r0, r1, #0
   1346c:	movw	r1, #41304	; 0xa158
   13470:	movt	r1, #2
   13474:	movlt	r2, r3
   13478:	add	r0, r4, r2
   1347c:	sub	r2, r3, r2
   13480:	ldr	r1, [r1]
   13484:	bl	1165c <memchr@plt>
   13488:	cmp	r0, #0
   1348c:	ldr	r1, [sp, #92]	; 0x5c
   13490:	ldr	r3, [sp, #68]	; 0x44
   13494:	addne	r1, r0, #1
   13498:	movwne	r0, #1
   1349c:	sub	r2, r1, r4
   134a0:	str	r1, [sp, #56]	; 0x38
   134a4:	ldr	r1, [sp, #72]	; 0x48
   134a8:	str	r0, [sp, #52]	; 0x34
   134ac:	ldr	r0, [sp, #76]	; 0x4c
   134b0:	str	r2, [sp, #44]	; 0x2c
   134b4:	eor	r0, r3, r0
   134b8:	eor	r1, r6, r1
   134bc:	orrs	r0, r0, r1
   134c0:	bne	134e4 <__assert_fail@plt+0x1d98>
   134c4:	mov	r0, #1
   134c8:	mov	r1, r4
   134cc:	bl	14f0c <__assert_fail@plt+0x37c0>
   134d0:	ldr	r2, [sp, #44]	; 0x2c
   134d4:	ldr	r3, [sp, #68]	; 0x44
   134d8:	cmp	r0, r2
   134dc:	beq	13508 <__assert_fail@plt+0x1dbc>
   134e0:	b	13a00 <__assert_fail@plt+0x22b4>
   134e4:	ldr	r0, [sp, #80]	; 0x50
   134e8:	cmp	r0, #0
   134ec:	bne	13508 <__assert_fail@plt+0x1dbc>
   134f0:	ldr	r0, [sp, #28]
   134f4:	mov	r1, r4
   134f8:	and	r0, r0, #1
   134fc:	bl	1408c <__assert_fail@plt+0x2940>
   13500:	ldr	r2, [sp, #44]	; 0x2c
   13504:	ldr	r3, [sp, #68]	; 0x44
   13508:	ldr	ip, [sp, #40]	; 0x28
   1350c:	mov	lr, r5
   13510:	adds	ip, ip, r2
   13514:	adc	r9, r9, #0
   13518:	subs	r0, r7, ip
   1351c:	sbcs	r0, r5, r9
   13520:	ldr	r5, [sp, #52]	; 0x34
   13524:	mov	r0, #0
   13528:	movwge	r0, #1
   1352c:	eor	r1, r5, #1
   13530:	tst	r0, r1
   13534:	bne	13648 <__assert_fail@plt+0x1efc>
   13538:	ldr	r2, [sp, #96]	; 0x60
   1353c:	ldr	r4, [sp, #56]	; 0x38
   13540:	str	r2, [sp, #96]	; 0x60
   13544:	ldr	r0, [sp, #92]	; 0x5c
   13548:	cmp	r4, r0
   1354c:	tsteq	r5, #1
   13550:	beq	13650 <__assert_fail@plt+0x1f04>
   13554:	ldr	r0, [sp, #80]	; 0x50
   13558:	adds	r3, r3, #1
   1355c:	adc	r6, r6, #0
   13560:	cmp	r0, #0
   13564:	beq	1357c <__assert_fail@plt+0x1e30>
   13568:	ldr	r0, [sp, #76]	; 0x4c
   1356c:	subs	r0, r0, r3
   13570:	ldr	r0, [sp, #72]	; 0x48
   13574:	sbcs	r0, r0, r6
   13578:	bcc	13778 <__assert_fail@plt+0x202c>
   1357c:	ldr	r1, [sp, #100]	; 0x64
   13580:	eor	r0, r3, r2
   13584:	adds	r7, r7, r8
   13588:	adc	lr, lr, sl
   1358c:	eor	r1, r6, r1
   13590:	orr	r0, r0, r1
   13594:	ldr	r1, [sp, #80]	; 0x50
   13598:	cmp	r0, #0
   1359c:	ldr	r0, [sp, #60]	; 0x3c
   135a0:	moveq	lr, r0
   135a4:	ldr	r0, [sp, #64]	; 0x40
   135a8:	moveq	r7, r0
   135ac:	subs	r0, r7, ip
   135b0:	sbcs	r0, lr, r9
   135b4:	mov	r0, #0
   135b8:	movwlt	r0, #1
   135bc:	cmp	r1, #0
   135c0:	and	r0, r5, r0
   135c4:	bne	13624 <__assert_fail@plt+0x1ed8>
   135c8:	subs	r1, r7, ip
   135cc:	sbcs	r1, lr, r9
   135d0:	bge	13624 <__assert_fail@plt+0x1ed8>
   135d4:	mov	r0, #1
   135d8:	mov	r1, #0
   135dc:	mov	r2, #0
   135e0:	str	r6, [sp, #68]	; 0x44
   135e4:	mov	sl, r8
   135e8:	mov	r4, r7
   135ec:	mov	r8, r3
   135f0:	mov	r7, ip
   135f4:	mov	r6, lr
   135f8:	bl	1408c <__assert_fail@plt+0x2940>
   135fc:	mov	lr, r6
   13600:	mov	ip, r7
   13604:	mov	r7, r4
   13608:	mov	r3, r8
   1360c:	mov	r8, sl
   13610:	ldr	r2, [sp, #96]	; 0x60
   13614:	ldr	r4, [sp, #56]	; 0x38
   13618:	ldr	sl, [sp, #48]	; 0x30
   1361c:	ldr	r6, [sp, #68]	; 0x44
   13620:	mov	r0, r5
   13624:	subs	r1, r7, ip
   13628:	mov	r5, r0
   1362c:	sbcs	r1, lr, r9
   13630:	blt	13544 <__assert_fail@plt+0x1df8>
   13634:	tst	r0, #1
   13638:	mov	r5, r0
   1363c:	bne	13544 <__assert_fail@plt+0x1df8>
   13640:	str	r3, [sp, #68]	; 0x44
   13644:	b	1365c <__assert_fail@plt+0x1f10>
   13648:	ldr	r4, [sp, #56]	; 0x38
   1364c:	b	13660 <__assert_fail@plt+0x1f14>
   13650:	mov	r0, #1
   13654:	str	r3, [sp, #68]	; 0x44
   13658:	str	r0, [sp, #20]
   1365c:	ldr	r5, [sp, #52]	; 0x34
   13660:	ldr	r3, [sp, #36]	; 0x24
   13664:	ldr	r0, [sp, #44]	; 0x2c
   13668:	sub	r3, r3, r0
   1366c:	ldr	r0, [sp, #92]	; 0x5c
   13670:	cmp	r4, r0
   13674:	bne	13430 <__assert_fail@plt+0x1ce4>
   13678:	b	13688 <__assert_fail@plt+0x1f3c>
   1367c:	ldr	r5, [sp, #52]	; 0x34
   13680:	mov	r0, #0
   13684:	str	r0, [sp, #20]
   13688:	ldr	r0, [sp, #20]
   1368c:	ldr	r3, [sp, #68]	; 0x44
   13690:	str	r5, [sp, #52]	; 0x34
   13694:	mvn	r5, #0
   13698:	and	r4, r0, #1
   1369c:	ldr	r0, [sp, #32]
   136a0:	subs	r0, ip, r0
   136a4:	ldr	r0, [sp, #24]
   136a8:	sbcs	r0, r9, r0
   136ac:	mov	r0, #0
   136b0:	blt	13398 <__assert_fail@plt+0x1c4c>
   136b4:	b	136bc <__assert_fail@plt+0x1f70>
   136b8:	mov	r0, #0
   136bc:	adds	r4, r3, r4
   136c0:	adc	r5, r6, r0
   136c4:	ldr	r0, [sp, #80]	; 0x50
   136c8:	ldr	r6, [sp, #96]	; 0x60
   136cc:	cmp	r0, #0
   136d0:	bne	13778 <__assert_fail@plt+0x202c>
   136d4:	subs	r0, r6, r4
   136d8:	ldr	r0, [sp, #100]	; 0x64
   136dc:	sbcs	r0, r0, r5
   136e0:	bcc	13778 <__assert_fail@plt+0x202c>
   136e4:	mov	r0, #1
   136e8:	mov	r1, #0
   136ec:	mov	r2, #0
   136f0:	bl	1408c <__assert_fail@plt+0x2940>
   136f4:	adds	r4, r4, #1
   136f8:	adc	r5, r5, #0
   136fc:	b	136d4 <__assert_fail@plt+0x1f88>
   13700:	mov	r5, sl
   13704:	ldr	r7, [sp, #48]	; 0x30
   13708:	mov	r4, #0
   1370c:	mvn	r8, #1
   13710:	cmp	r4, r5
   13714:	bcc	1373c <__assert_fail@plt+0x1ff0>
   13718:	movw	r0, #41872	; 0xa390
   1371c:	movt	r0, #2
   13720:	ldrb	r0, [r0]
   13724:	cmp	r0, #0
   13728:	bne	1373c <__assert_fail@plt+0x1ff0>
   1372c:	mov	r0, r7
   13730:	mov	r1, r4
   13734:	mov	r2, sl
   13738:	bl	149a8 <__assert_fail@plt+0x325c>
   1373c:	add	r6, r7, r4, lsl #4
   13740:	ldr	r1, [r6, #4]
   13744:	cmp	r1, #0
   13748:	bmi	13760 <__assert_fail@plt+0x2014>
   1374c:	mov	r2, r7
   13750:	ldr	r3, [r2, r4, lsl #4]!
   13754:	ldr	r0, [r2, #8]
   13758:	ldr	r2, [r2, #12]
   1375c:	bl	13e08 <__assert_fail@plt+0x26bc>
   13760:	add	r4, r4, #1
   13764:	str	r8, [r6, #4]
   13768:	subs	r0, r4, sl
   1376c:	ldr	r0, [sp, #100]	; 0x64
   13770:	rscs	r0, r0, #0
   13774:	bcc	13710 <__assert_fail@plt+0x1fc4>
   13778:	mov	r0, #0
   1377c:	bl	11734 <close@plt>
   13780:	cmp	r0, #0
   13784:	bne	1386c <__assert_fail@plt+0x2120>
   13788:	movw	r0, #42252	; 0xa50c
   1378c:	movt	r0, #2
   13790:	ldr	r3, [r0]
   13794:	movw	r0, #42248	; 0xa508
   13798:	movt	r0, #2
   1379c:	ldr	r2, [r0]
   137a0:	movw	r0, #41312	; 0xa160
   137a4:	movt	r0, #2
   137a8:	ldr	r1, [r0]
   137ac:	mov	r0, #0
   137b0:	bl	13e08 <__assert_fail@plt+0x26bc>
   137b4:	mov	r0, #0
   137b8:	sub	sp, fp, #28
   137bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137c0:	cmn	r4, #3
   137c4:	bne	1381c <__assert_fail@plt+0x20d0>
   137c8:	movw	r0, #41316	; 0xa164
   137cc:	movw	r2, #36827	; 0x8fdb
   137d0:	mov	r1, #0
   137d4:	movw	r7, #36809	; 0x8fc9
   137d8:	movt	r0, #2
   137dc:	movt	r2, #1
   137e0:	str	r1, [sp, #8]
   137e4:	movw	r1, #36278	; 0x8db6
   137e8:	movt	r7, #1
   137ec:	movt	r1, #1
   137f0:	ldr	r3, [r0]
   137f4:	movw	r0, #41836	; 0xa36c
   137f8:	str	r2, [sp, #4]
   137fc:	movw	r2, #36795	; 0x8fbb
   13800:	str	r7, [sp]
   13804:	movt	r0, #2
   13808:	movt	r2, #1
   1380c:	ldr	r0, [r0]
   13810:	bl	17228 <__assert_fail@plt+0x5adc>
   13814:	mov	r0, #0
   13818:	bl	11590 <exit@plt>
   1381c:	cmn	r4, #2
   13820:	bne	13924 <__assert_fail@plt+0x21d8>
   13824:	mov	r0, #0
   13828:	bl	11848 <__assert_fail@plt+0xfc>
   1382c:	movw	r1, #36613	; 0x8f05
   13830:	mov	r0, #0
   13834:	mov	r2, #5
   13838:	movt	r1, #1
   1383c:	bl	11464 <dcgettext@plt>
   13840:	mov	r6, r0
   13844:	add	r2, sp, #104	; 0x68
   13848:	mov	r0, r5
   1384c:	mov	r1, r8
   13850:	bl	14f7c <__assert_fail@plt+0x3830>
   13854:	mov	r3, r0
   13858:	mov	r0, #1
   1385c:	mov	r1, #0
   13860:	mov	r2, r6
   13864:	str	r4, [sp]
   13868:	bl	11518 <error@plt>
   1386c:	bl	115f0 <__errno_location@plt>
   13870:	ldr	r4, [r0]
   13874:	movw	r0, #41848	; 0xa378
   13878:	movt	r0, #2
   1387c:	ldr	r2, [r0]
   13880:	mov	r0, #0
   13884:	mov	r1, #3
   13888:	bl	16830 <__assert_fail@plt+0x50e4>
   1388c:	movw	r2, #38682	; 0x971a
   13890:	mov	r3, r0
   13894:	mov	r0, #1
   13898:	mov	r1, r4
   1389c:	movt	r2, #1
   138a0:	bl	11518 <error@plt>
   138a4:	movw	r1, #36405	; 0x8e35
   138a8:	movt	r1, #1
   138ac:	mov	r0, #0
   138b0:	mov	r2, #5
   138b4:	bl	11464 <dcgettext@plt>
   138b8:	mov	r2, r0
   138bc:	mov	r0, #0
   138c0:	mov	r1, #0
   138c4:	bl	11518 <error@plt>
   138c8:	b	13924 <__assert_fail@plt+0x21d8>
   138cc:	movw	r0, #36681	; 0x8f49
   138d0:	movw	r1, #36726	; 0x8f76
   138d4:	cmp	r4, #100	; 0x64
   138d8:	movt	r0, #1
   138dc:	movt	r1, #1
   138e0:	moveq	r1, r0
   138e4:	b	138f0 <__assert_fail@plt+0x21a4>
   138e8:	movw	r1, #36357	; 0x8e05
   138ec:	movt	r1, #1
   138f0:	mov	r0, #0
   138f4:	mov	r2, #5
   138f8:	bl	11464 <dcgettext@plt>
   138fc:	mov	r4, r0
   13900:	movw	r0, #41840	; 0xa370
   13904:	movt	r0, #2
   13908:	ldr	r0, [r0]
   1390c:	bl	169c4 <__assert_fail@plt+0x5278>
   13910:	mov	r3, r0
   13914:	mov	r0, #0
   13918:	mov	r1, #0
   1391c:	mov	r2, r4
   13920:	bl	11518 <error@plt>
   13924:	mov	r0, #1
   13928:	bl	11848 <__assert_fail@plt+0xfc>
   1392c:	movw	r1, #36518	; 0x8ea6
   13930:	movt	r1, #1
   13934:	b	13978 <__assert_fail@plt+0x222c>
   13938:	movw	r1, #36544	; 0x8ec0
   1393c:	mov	r0, #0
   13940:	mov	r2, #5
   13944:	movt	r1, #1
   13948:	bl	11464 <dcgettext@plt>
   1394c:	mov	r1, r4
   13950:	mov	r4, r0
   13954:	ldr	r0, [r1]
   13958:	bl	169c4 <__assert_fail@plt+0x5278>
   1395c:	mov	r3, r0
   13960:	mov	r0, #1
   13964:	mov	r1, #0
   13968:	mov	r2, r4
   1396c:	bl	11518 <error@plt>
   13970:	movw	r1, #36573	; 0x8edd
   13974:	movt	r1, #1
   13978:	mov	r0, #0
   1397c:	mov	r2, #5
   13980:	bl	11464 <dcgettext@plt>
   13984:	mov	r2, r0
   13988:	mov	r0, #1
   1398c:	mov	r1, #0
   13990:	bl	11518 <error@plt>
   13994:	bl	17774 <__assert_fail@plt+0x6028>
   13998:	ldr	r0, [sp, #48]	; 0x30
   1399c:	ldr	r1, [sp, #68]	; 0x44
   139a0:	ldr	r2, [r0, r1, lsl #4]
   139a4:	b	13880 <__assert_fail@plt+0x2134>
   139a8:	movw	r1, #36847	; 0x8fef
   139ac:	movt	r1, #1
   139b0:	b	138ac <__assert_fail@plt+0x2160>
   139b4:	movw	r1, #36908	; 0x902c
   139b8:	mov	r0, #0
   139bc:	mov	r2, #5
   139c0:	movt	r1, #1
   139c4:	bl	11464 <dcgettext@plt>
   139c8:	mov	r4, r0
   139cc:	ldr	r0, [r5]
   139d0:	ldr	r1, [sp, #88]	; 0x58
   139d4:	ldr	r0, [r1, r0, lsl #2]
   139d8:	b	1390c <__assert_fail@plt+0x21c0>
   139dc:	bl	115f0 <__errno_location@plt>
   139e0:	ldr	r4, [r0]
   139e4:	ldr	r2, [sl]
   139e8:	b	13880 <__assert_fail@plt+0x2134>
   139ec:	bl	11728 <abort@plt>
   139f0:	movw	r0, #41836	; 0xa36c
   139f4:	movt	r0, #2
   139f8:	ldr	r0, [r0]
   139fc:	bl	116e0 <clearerr_unlocked@plt>
   13a00:	bl	115f0 <__errno_location@plt>
   13a04:	movw	r1, #38562	; 0x96a2
   13a08:	ldr	r4, [r0]
   13a0c:	mov	r0, #0
   13a10:	mov	r2, #5
   13a14:	movt	r1, #1
   13a18:	bl	11464 <dcgettext@plt>
   13a1c:	b	1388c <__assert_fail@plt+0x2140>
   13a20:	ldr	r0, [sp, #48]	; 0x30
   13a24:	ldr	r1, [sp, #68]	; 0x44
   13a28:	ldr	r2, [r0, r1, lsl #4]
   13a2c:	ldr	r0, [sp, #44]	; 0x2c
   13a30:	ldr	r4, [r0]
   13a34:	b	13880 <__assert_fail@plt+0x2134>
   13a38:	movw	r2, #39145	; 0x98e9
   13a3c:	movt	r2, #1
   13a40:	b	13880 <__assert_fail@plt+0x2134>
   13a44:	movw	r1, #37891	; 0x9403
   13a48:	mov	r0, #0
   13a4c:	mov	r2, #5
   13a50:	movt	r1, #1
   13a54:	bl	11464 <dcgettext@plt>
   13a58:	mov	r2, r0
   13a5c:	stm	sp, {r6, r7}
   13a60:	b	13988 <__assert_fail@plt+0x223c>
   13a64:	movw	r1, #36925	; 0x903d
   13a68:	movt	r1, #1
   13a6c:	b	138ac <__assert_fail@plt+0x2160>
   13a70:	bl	115f0 <__errno_location@plt>
   13a74:	movw	r1, #36989	; 0x907d
   13a78:	ldr	r4, [r0]
   13a7c:	mov	r0, #0
   13a80:	mov	r2, #5
   13a84:	movt	r1, #1
   13a88:	bl	11464 <dcgettext@plt>
   13a8c:	ldr	r1, [sl]
   13a90:	mov	r5, r0
   13a94:	mov	r0, #4
   13a98:	bl	1668c <__assert_fail@plt+0x4f40>
   13a9c:	b	13ae4 <__assert_fail@plt+0x2398>
   13aa0:	bl	115f0 <__errno_location@plt>
   13aa4:	ldr	r1, [r0]
   13aa8:	cmp	r1, #29
   13aac:	moveq	r1, #0
   13ab0:	streq	r1, [r0]
   13ab4:	bl	115f0 <__errno_location@plt>
   13ab8:	movw	r1, #37016	; 0x9098
   13abc:	ldr	r4, [r0]
   13ac0:	mov	r0, #0
   13ac4:	mov	r2, #5
   13ac8:	movt	r1, #1
   13acc:	bl	11464 <dcgettext@plt>
   13ad0:	ldr	r2, [sl]
   13ad4:	mov	r5, r0
   13ad8:	mov	r0, #0
   13adc:	mov	r1, #3
   13ae0:	bl	16830 <__assert_fail@plt+0x50e4>
   13ae4:	mov	r3, r0
   13ae8:	mov	r0, #1
   13aec:	mov	r1, r4
   13af0:	mov	r2, r5
   13af4:	bl	11518 <error@plt>
   13af8:	movw	r1, #36493	; 0x8e8d
   13afc:	mov	r0, #0
   13b00:	mov	r2, #5
   13b04:	movt	r1, #1
   13b08:	bl	11464 <dcgettext@plt>
   13b0c:	mov	r4, r0
   13b10:	ldr	r0, [sp, #96]	; 0x60
   13b14:	add	r2, sp, #104	; 0x68
   13b18:	mov	r1, r7
   13b1c:	bl	14f7c <__assert_fail@plt+0x3830>
   13b20:	bl	169c4 <__assert_fail@plt+0x5278>
   13b24:	movw	r2, #36901	; 0x9025
   13b28:	str	r0, [sp]
   13b2c:	mov	r0, #1
   13b30:	mov	r1, #75	; 0x4b
   13b34:	mov	r3, r4
   13b38:	movt	r2, #1
   13b3c:	bl	11518 <error@plt>
   13b40:	movw	r0, #38378	; 0x95ea
   13b44:	movw	r1, #37943	; 0x9437
   13b48:	movw	r3, #38486	; 0x9656
   13b4c:	movw	r2, #867	; 0x363
   13b50:	movt	r0, #1
   13b54:	movt	r1, #1
   13b58:	movt	r3, #1
   13b5c:	bl	1174c <__assert_fail@plt>
   13b60:	movw	r0, #38373	; 0x95e5
   13b64:	movw	r1, #37943	; 0x9437
   13b68:	movw	r3, #38408	; 0x9608
   13b6c:	mov	r2, #996	; 0x3e4
   13b70:	movt	r0, #1
   13b74:	movt	r1, #1
   13b78:	movt	r3, #1
   13b7c:	bl	1174c <__assert_fail@plt>
   13b80:	bl	115f0 <__errno_location@plt>
   13b84:	mov	r1, #75	; 0x4b
   13b88:	str	r1, [r0]
   13b8c:	b	13ab4 <__assert_fail@plt+0x2368>
   13b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b94:	add	fp, sp, #28
   13b98:	sub	sp, sp, #36	; 0x24
   13b9c:	str	r2, [sp, #12]
   13ba0:	ldr	r2, [fp, #16]
   13ba4:	mov	r7, r0
   13ba8:	ldr	r0, [fp, #20]
   13bac:	ldr	r6, [fp, #8]
   13bb0:	str	r3, [sp, #8]
   13bb4:	mov	r8, #0
   13bb8:	mov	r4, #1
   13bbc:	mov	r5, #1
   13bc0:	mov	r3, r1
   13bc4:	mov	sl, #0
   13bc8:	str	r1, [sp, #32]
   13bcc:	str	r7, [sp, #28]
   13bd0:	subs	r2, r2, #1
   13bd4:	sbc	r0, r0, #0
   13bd8:	str	r2, [sp, #24]
   13bdc:	str	r0, [sp, #20]
   13be0:	cmn	r6, #1
   13be4:	beq	13bfc <__assert_fail@plt+0x24b0>
   13be8:	ldr	r0, [sp, #8]
   13bec:	cmp	r6, r0
   13bf0:	mov	r0, #0
   13bf4:	movwcc	r0, #1
   13bf8:	b	13c78 <__assert_fail@plt+0x252c>
   13bfc:	tst	r5, #1
   13c00:	beq	13c0c <__assert_fail@plt+0x24c0>
   13c04:	mov	r9, r3
   13c08:	b	13c50 <__assert_fail@plt+0x2504>
   13c0c:	mov	r0, #1
   13c10:	mov	r2, r7
   13c14:	mov	r6, r3
   13c18:	str	r0, [sp]
   13c1c:	mov	r0, #0
   13c20:	bl	114c4 <lseek64@plt>
   13c24:	and	r0, r0, r1
   13c28:	mvn	r1, #0
   13c2c:	subs	r1, r0, r1
   13c30:	movwne	r1, #1
   13c34:	cmn	r0, #1
   13c38:	ldr	r0, [sp, #32]
   13c3c:	orr	r4, r4, r1
   13c40:	movne	r6, r0
   13c44:	ldr	r0, [sp, #28]
   13c48:	mov	r9, r6
   13c4c:	movne	r7, r0
   13c50:	ldr	r1, [sp, #12]
   13c54:	ldr	r2, [sp, #8]
   13c58:	mov	r0, #0
   13c5c:	bl	16b10 <__assert_fail@plt+0x53c4>
   13c60:	cmn	r0, #1
   13c64:	beq	13dd0 <__assert_fail@plt+0x2684>
   13c68:	mov	r6, r0
   13c6c:	clz	r0, r0
   13c70:	mov	r3, r9
   13c74:	lsr	r0, r0, #5
   13c78:	str	r0, [sp, #16]
   13c7c:	subs	r0, r6, r7
   13c80:	rscs	r0, r3, #0
   13c84:	bcs	13c90 <__assert_fail@plt+0x2544>
   13c88:	ldr	r9, [sp, #12]
   13c8c:	b	13d10 <__assert_fail@plt+0x25c4>
   13c90:	ldr	r9, [sp, #12]
   13c94:	tst	r4, #1
   13c98:	bne	13ca8 <__assert_fail@plt+0x255c>
   13c9c:	tst	r5, #1
   13ca0:	mov	r5, #0
   13ca4:	beq	13cbc <__assert_fail@plt+0x2570>
   13ca8:	and	r0, r4, #1
   13cac:	mov	r1, r9
   13cb0:	mov	r2, r7
   13cb4:	bl	1408c <__assert_fail@plt+0x2940>
   13cb8:	mov	r5, r0
   13cbc:	and	r0, r4, #1
   13cc0:	mov	r4, #0
   13cc4:	adds	r8, r8, r0
   13cc8:	ldr	r0, [sp, #24]
   13ccc:	adc	sl, sl, #0
   13cd0:	subs	r0, r0, r8
   13cd4:	ldr	r0, [sp, #20]
   13cd8:	sbcs	r0, r0, sl
   13cdc:	movwcs	r4, #1
   13ce0:	cmp	r4, #0
   13ce4:	cmpeq	r5, #0
   13ce8:	beq	13d94 <__assert_fail@plt+0x2648>
   13cec:	add	r9, r9, r7
   13cf0:	sub	r6, r6, r7
   13cf4:	ldr	r7, [sp, #28]
   13cf8:	subs	r0, r6, r7
   13cfc:	ldr	r0, [sp, #32]
   13d00:	rscs	r0, r0, #0
   13d04:	bcs	13c94 <__assert_fail@plt+0x2548>
   13d08:	ldr	r7, [sp, #28]
   13d0c:	ldr	r3, [sp, #32]
   13d10:	cmp	r6, #0
   13d14:	beq	13d7c <__assert_fail@plt+0x2630>
   13d18:	orr	r0, r4, r5
   13d1c:	mov	r5, #0
   13d20:	tst	r0, #1
   13d24:	beq	13d44 <__assert_fail@plt+0x25f8>
   13d28:	and	r0, r4, #1
   13d2c:	mov	r1, r9
   13d30:	mov	r2, r6
   13d34:	mov	r5, r3
   13d38:	bl	1408c <__assert_fail@plt+0x2940>
   13d3c:	mov	r3, r5
   13d40:	mov	r5, r0
   13d44:	ldr	r9, [fp, #16]
   13d48:	ldr	r1, [fp, #20]
   13d4c:	and	r0, r4, #1
   13d50:	adds	r8, r8, r0
   13d54:	adc	sl, sl, #0
   13d58:	eor	r0, r8, r9
   13d5c:	eor	r1, sl, r1
   13d60:	orrs	r0, r0, r1
   13d64:	cmpeq	r5, #0
   13d68:	beq	13dc8 <__assert_fail@plt+0x267c>
   13d6c:	subs	r7, r7, r6
   13d70:	mov	r4, #0
   13d74:	sbc	r3, r3, #0
   13d78:	b	13d80 <__assert_fail@plt+0x2634>
   13d7c:	ldr	r9, [fp, #16]
   13d80:	ldr	r0, [sp, #16]
   13d84:	mvn	r6, #0
   13d88:	cmp	r0, #0
   13d8c:	beq	13be0 <__assert_fail@plt+0x2494>
   13d90:	b	13d98 <__assert_fail@plt+0x264c>
   13d94:	ldr	r9, [fp, #16]
   13d98:	ldr	r4, [fp, #20]
   13d9c:	subs	r0, r8, r9
   13da0:	sbcs	r0, sl, r4
   13da4:	bcs	13dc8 <__assert_fail@plt+0x267c>
   13da8:	mov	r0, #1
   13dac:	mov	r1, #0
   13db0:	mov	r2, #0
   13db4:	bl	1408c <__assert_fail@plt+0x2940>
   13db8:	adds	r8, r8, #1
   13dbc:	adc	sl, sl, #0
   13dc0:	subs	r0, r8, r9
   13dc4:	b	13da0 <__assert_fail@plt+0x2654>
   13dc8:	sub	sp, fp, #28
   13dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dd0:	bl	115f0 <__errno_location@plt>
   13dd4:	ldr	r4, [r0]
   13dd8:	movw	r0, #41848	; 0xa378
   13ddc:	mov	r1, #3
   13de0:	movt	r0, #2
   13de4:	ldr	r2, [r0]
   13de8:	mov	r0, #0
   13dec:	bl	16830 <__assert_fail@plt+0x50e4>
   13df0:	movw	r2, #38682	; 0x971a
   13df4:	mov	r3, r0
   13df8:	mov	r0, #1
   13dfc:	mov	r1, r4
   13e00:	movt	r2, #1
   13e04:	bl	11518 <error@plt>
   13e08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e0c:	add	fp, sp, #24
   13e10:	sub	sp, sp, #32
   13e14:	mov	r8, r3
   13e18:	mov	r5, r2
   13e1c:	mov	r6, r1
   13e20:	mov	r7, r0
   13e24:	cmp	r0, #0
   13e28:	beq	13e60 <__assert_fail@plt+0x2714>
   13e2c:	mov	r0, r7
   13e30:	bl	14ca4 <__assert_fail@plt+0x3558>
   13e34:	cmp	r0, #0
   13e38:	beq	13e60 <__assert_fail@plt+0x2714>
   13e3c:	bl	115f0 <__errno_location@plt>
   13e40:	ldr	r4, [r0]
   13e44:	cmp	r4, #32
   13e48:	bne	14040 <__assert_fail@plt+0x28f4>
   13e4c:	movw	r0, #41876	; 0xa394
   13e50:	movt	r0, #2
   13e54:	ldr	r0, [r0]
   13e58:	cmp	r0, #0
   13e5c:	beq	14040 <__assert_fail@plt+0x28f4>
   13e60:	cmp	r6, #0
   13e64:	bmi	13ed0 <__assert_fail@plt+0x2784>
   13e68:	cmp	r7, #0
   13e6c:	bne	13e80 <__assert_fail@plt+0x2734>
   13e70:	mov	r0, r6
   13e74:	bl	11734 <close@plt>
   13e78:	cmn	r0, #1
   13e7c:	ble	14038 <__assert_fail@plt+0x28ec>
   13e80:	movw	r0, #42280	; 0xa528
   13e84:	movt	r0, #2
   13e88:	ldr	r1, [r0]
   13e8c:	cmp	r1, #0
   13e90:	beq	13ed0 <__assert_fail@plt+0x2784>
   13e94:	movw	r2, #42284	; 0xa52c
   13e98:	mov	r3, #0
   13e9c:	movt	r2, #2
   13ea0:	ldr	r2, [r2]
   13ea4:	ldr	r7, [r2, r3, lsl #2]
   13ea8:	cmp	r7, r6
   13eac:	beq	13ec0 <__assert_fail@plt+0x2774>
   13eb0:	add	r3, r3, #1
   13eb4:	cmp	r3, r1
   13eb8:	bcc	13ea4 <__assert_fail@plt+0x2758>
   13ebc:	b	13ed0 <__assert_fail@plt+0x2784>
   13ec0:	sub	r1, r1, #1
   13ec4:	str	r1, [r0]
   13ec8:	ldr	r0, [r2, r1, lsl #2]
   13ecc:	str	r0, [r2, r3, lsl #2]
   13ed0:	cmp	r5, #1
   13ed4:	blt	14008 <__assert_fail@plt+0x28bc>
   13ed8:	mov	r0, #0
   13edc:	add	r1, sp, #28
   13ee0:	mov	r2, #0
   13ee4:	str	r0, [sp, #28]
   13ee8:	mov	r0, r5
   13eec:	bl	114d0 <waitpid@plt>
   13ef0:	cmn	r0, #1
   13ef4:	bne	13f08 <__assert_fail@plt+0x27bc>
   13ef8:	bl	115f0 <__errno_location@plt>
   13efc:	ldr	r4, [r0]
   13f00:	cmp	r4, #10
   13f04:	bne	14068 <__assert_fail@plt+0x291c>
   13f08:	ldr	r0, [sp, #28]
   13f0c:	mov	r1, #16777216	; 0x1000000
   13f10:	and	r5, r0, #127	; 0x7f
   13f14:	add	r1, r1, r5, lsl #24
   13f18:	cmp	r1, #33554432	; 0x2000000
   13f1c:	blt	13fa4 <__assert_fail@plt+0x2858>
   13f20:	cmp	r5, #13
   13f24:	beq	14008 <__assert_fail@plt+0x28bc>
   13f28:	add	r6, sp, #9
   13f2c:	mov	r0, r5
   13f30:	mov	r1, r6
   13f34:	bl	16d40 <__assert_fail@plt+0x55f4>
   13f38:	cmp	r0, #0
   13f3c:	beq	13f5c <__assert_fail@plt+0x2810>
   13f40:	movw	r3, #38602	; 0x96ca
   13f44:	add	r0, sp, #9
   13f48:	mov	r1, #1
   13f4c:	mov	r2, #19
   13f50:	str	r5, [sp]
   13f54:	movt	r3, #1
   13f58:	bl	115fc <__sprintf_chk@plt>
   13f5c:	movw	r1, #38605	; 0x96cd
   13f60:	mov	r0, #0
   13f64:	mov	r2, #5
   13f68:	movt	r1, #1
   13f6c:	bl	11464 <dcgettext@plt>
   13f70:	mov	r4, r0
   13f74:	mov	r0, #0
   13f78:	mov	r1, #3
   13f7c:	mov	r2, r8
   13f80:	bl	16830 <__assert_fail@plt+0x50e4>
   13f84:	mov	r3, r0
   13f88:	movw	r0, #41876	; 0xa394
   13f8c:	str	r6, [sp]
   13f90:	movt	r0, #2
   13f94:	ldr	r0, [r0]
   13f98:	str	r0, [sp, #4]
   13f9c:	orr	r0, r5, #128	; 0x80
   13fa0:	b	13ffc <__assert_fail@plt+0x28b0>
   13fa4:	cmp	r5, #0
   13fa8:	bne	14010 <__assert_fail@plt+0x28c4>
   13fac:	ubfx	r5, r0, #8, #8
   13fb0:	cmp	r5, #0
   13fb4:	beq	14008 <__assert_fail@plt+0x28bc>
   13fb8:	movw	r1, #38646	; 0x96f6
   13fbc:	mov	r0, #0
   13fc0:	mov	r2, #5
   13fc4:	movt	r1, #1
   13fc8:	bl	11464 <dcgettext@plt>
   13fcc:	mov	r4, r0
   13fd0:	mov	r0, #0
   13fd4:	mov	r1, #3
   13fd8:	mov	r2, r8
   13fdc:	bl	16830 <__assert_fail@plt+0x50e4>
   13fe0:	mov	r3, r0
   13fe4:	movw	r0, #41876	; 0xa394
   13fe8:	str	r5, [sp]
   13fec:	movt	r0, #2
   13ff0:	ldr	r0, [r0]
   13ff4:	str	r0, [sp, #4]
   13ff8:	mov	r0, r5
   13ffc:	mov	r1, #0
   14000:	mov	r2, r4
   14004:	bl	11518 <error@plt>
   14008:	sub	sp, fp, #24
   1400c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14010:	movw	r1, #38685	; 0x971d
   14014:	mov	r0, #0
   14018:	mov	r2, #5
   1401c:	movt	r1, #1
   14020:	bl	11464 <dcgettext@plt>
   14024:	ldr	r3, [sp, #28]
   14028:	mov	r2, r0
   1402c:	mov	r0, #1
   14030:	mov	r1, #0
   14034:	bl	11518 <error@plt>
   14038:	bl	115f0 <__errno_location@plt>
   1403c:	ldr	r4, [r0]
   14040:	mov	r0, #0
   14044:	mov	r1, #3
   14048:	mov	r2, r8
   1404c:	bl	16830 <__assert_fail@plt+0x50e4>
   14050:	movw	r2, #38682	; 0x971a
   14054:	mov	r3, r0
   14058:	mov	r0, #1
   1405c:	mov	r1, r4
   14060:	movt	r2, #1
   14064:	bl	11518 <error@plt>
   14068:	movw	r1, #38576	; 0x96b0
   1406c:	mov	r0, #0
   14070:	mov	r2, #5
   14074:	movt	r1, #1
   14078:	bl	11464 <dcgettext@plt>
   1407c:	mov	r2, r0
   14080:	mov	r0, #1
   14084:	mov	r1, r4
   14088:	bl	11518 <error@plt>
   1408c:	push	{r4, r5, r6, r7, fp, lr}
   14090:	add	fp, sp, #16
   14094:	mov	r4, r2
   14098:	mov	r5, r1
   1409c:	cmp	r0, #0
   140a0:	beq	14104 <__assert_fail@plt+0x29b8>
   140a4:	cmp	r5, #0
   140a8:	cmpeq	r4, #0
   140ac:	beq	14188 <__assert_fail@plt+0x2a3c>
   140b0:	movw	r6, #42252	; 0xa50c
   140b4:	movw	r0, #42248	; 0xa508
   140b8:	movw	r7, #41312	; 0xa160
   140bc:	movt	r6, #2
   140c0:	movt	r0, #2
   140c4:	movt	r7, #2
   140c8:	ldr	r2, [r0]
   140cc:	ldr	r3, [r6]
   140d0:	ldr	r1, [r7]
   140d4:	mov	r0, #0
   140d8:	bl	13e08 <__assert_fail@plt+0x26bc>
   140dc:	bl	141a4 <__assert_fail@plt+0x2a58>
   140e0:	ldr	r0, [r6]
   140e4:	bl	144ec <__assert_fail@plt+0x2da0>
   140e8:	cmn	r0, #1
   140ec:	str	r0, [r7]
   140f0:	bgt	14110 <__assert_fail@plt+0x29c4>
   140f4:	bl	115f0 <__errno_location@plt>
   140f8:	ldr	r4, [r0]
   140fc:	ldr	r2, [r6]
   14100:	b	14164 <__assert_fail@plt+0x2a18>
   14104:	movw	r0, #41312	; 0xa160
   14108:	movt	r0, #2
   1410c:	ldr	r0, [r0]
   14110:	mov	r1, r5
   14114:	mov	r2, r4
   14118:	bl	14f0c <__assert_fail@plt+0x37c0>
   1411c:	mov	r1, r0
   14120:	mov	r0, #1
   14124:	cmp	r1, r4
   14128:	bne	14130 <__assert_fail@plt+0x29e4>
   1412c:	pop	{r4, r5, r6, r7, fp, pc}
   14130:	bl	115f0 <__errno_location@plt>
   14134:	ldr	r4, [r0]
   14138:	cmp	r4, #32
   1413c:	bne	14158 <__assert_fail@plt+0x2a0c>
   14140:	movw	r0, #41876	; 0xa394
   14144:	movt	r0, #2
   14148:	ldr	r1, [r0]
   1414c:	mov	r0, #0
   14150:	cmp	r1, #0
   14154:	popne	{r4, r5, r6, r7, fp, pc}
   14158:	movw	r0, #42252	; 0xa50c
   1415c:	movt	r0, #2
   14160:	ldr	r2, [r0]
   14164:	mov	r0, #0
   14168:	mov	r1, #3
   1416c:	bl	16830 <__assert_fail@plt+0x50e4>
   14170:	movw	r2, #38682	; 0x971a
   14174:	mov	r3, r0
   14178:	mov	r0, #1
   1417c:	mov	r1, r4
   14180:	movt	r2, #1
   14184:	bl	11518 <error@plt>
   14188:	movw	r0, #41872	; 0xa390
   1418c:	movt	r0, #2
   14190:	ldrb	r1, [r0]
   14194:	mov	r0, #1
   14198:	cmp	r1, #0
   1419c:	beq	140b0 <__assert_fail@plt+0x2964>
   141a0:	b	1412c <__assert_fail@plt+0x29e0>
   141a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141a8:	add	fp, sp, #28
   141ac:	sub	sp, sp, #4
   141b0:	movw	ip, #42252	; 0xa50c
   141b4:	movw	sl, #41856	; 0xa380
   141b8:	movt	ip, #2
   141bc:	movt	sl, #2
   141c0:	ldr	r8, [ip]
   141c4:	cmp	r8, #0
   141c8:	beq	142a0 <__assert_fail@plt+0x2b54>
   141cc:	ldr	r0, [sl]
   141d0:	cmp	r0, #0
   141d4:	beq	1427c <__assert_fail@plt+0x2b30>
   141d8:	rsb	r4, r0, #1
   141dc:	movw	r0, #42276	; 0xa524
   141e0:	movw	r7, #42256	; 0xa510
   141e4:	movw	r2, #41308	; 0xa15c
   141e8:	mov	r5, #0
   141ec:	movt	r0, #2
   141f0:	movt	r7, #2
   141f4:	movt	r2, #2
   141f8:	ldr	r1, [r0]
   141fc:	movw	r0, #42260	; 0xa514
   14200:	ldrb	r7, [r7]
   14204:	ldr	r2, [r2]
   14208:	movt	r0, #2
   1420c:	ldr	r3, [r0]
   14210:	eor	r7, r7, #1
   14214:	mvn	r7, r7
   14218:	ldr	r6, [r3, -r4, lsl #2]
   1421c:	cmp	r4, #0
   14220:	mov	r0, r4
   14224:	movwne	r0, #1
   14228:	orr	r0, r0, r7
   1422c:	tst	r0, #1
   14230:	add	r6, r6, #1
   14234:	str	r6, [r3, -r4, lsl #2]
   14238:	bne	14250 <__assert_fail@plt+0x2b04>
   1423c:	ldr	r0, [r3]
   14240:	add	r0, r0, r2
   14244:	ldrb	r0, [r0, #1]
   14248:	cmp	r0, #0
   1424c:	beq	142a0 <__assert_fail@plt+0x2b54>
   14250:	ldrb	r0, [r2, r6]
   14254:	cmp	r0, #0
   14258:	strb	r0, [r1, -r4]
   1425c:	bne	144c0 <__assert_fail@plt+0x2d74>
   14260:	rsb	r0, r4, #0
   14264:	str	r5, [r3, r0, lsl #2]
   14268:	ldrb	r0, [r2]
   1426c:	strb	r0, [r1, -r4]
   14270:	add	r4, r4, #1
   14274:	cmp	r4, #1
   14278:	bne	14218 <__assert_fail@plt+0x2acc>
   1427c:	movw	r1, #37981	; 0x945d
   14280:	mov	r0, #0
   14284:	mov	r2, #5
   14288:	movt	r1, #1
   1428c:	bl	11464 <dcgettext@plt>
   14290:	mov	r2, r0
   14294:	mov	r0, #1
   14298:	mov	r1, #0
   1429c:	bl	11518 <error@plt>
   142a0:	movw	r6, #42268	; 0xa51c
   142a4:	movw	r4, #41860	; 0xa384
   142a8:	mov	r7, ip
   142ac:	movt	r6, #2
   142b0:	movt	r4, #2
   142b4:	ldr	r9, [r6]
   142b8:	cmp	r9, #0
   142bc:	beq	142e4 <__assert_fail@plt+0x2b98>
   142c0:	ldr	r1, [sl]
   142c4:	add	r0, r9, #2
   142c8:	str	r0, [r6]
   142cc:	add	r1, r1, #1
   142d0:	str	r1, [sl]
   142d4:	movw	r1, #42264	; 0xa518
   142d8:	movt	r1, #2
   142dc:	ldr	r5, [r1]
   142e0:	b	14338 <__assert_fail@plt+0x2bec>
   142e4:	movw	r0, #41852	; 0xa37c
   142e8:	movt	r0, #2
   142ec:	ldr	r0, [r0]
   142f0:	bl	115a8 <strlen@plt>
   142f4:	mov	r5, r0
   142f8:	movw	r0, #42264	; 0xa518
   142fc:	movt	r0, #2
   14300:	str	r5, [r0]
   14304:	ldr	r0, [r4]
   14308:	cmp	r0, #0
   1430c:	beq	14318 <__assert_fail@plt+0x2bcc>
   14310:	bl	115a8 <strlen@plt>
   14314:	b	1431c <__assert_fail@plt+0x2bd0>
   14318:	mov	r0, #0
   1431c:	movw	r1, #42272	; 0xa520
   14320:	movt	r1, #2
   14324:	str	r0, [r1]
   14328:	ldr	r1, [sl]
   1432c:	add	r0, r0, r5
   14330:	add	r0, r0, r1
   14334:	str	r0, [r6]
   14338:	add	r1, r0, #1
   1433c:	cmp	r1, r5
   14340:	bcc	144c8 <__assert_fail@plt+0x2d7c>
   14344:	mov	r0, r8
   14348:	bl	17390 <__assert_fail@plt+0x5c44>
   1434c:	str	r0, [r7]
   14350:	mov	r4, r0
   14354:	mov	r7, r6
   14358:	cmp	r9, #0
   1435c:	beq	1439c <__assert_fail@plt+0x2c50>
   14360:	movw	r1, #42260	; 0xa514
   14364:	movw	r0, #41308	; 0xa15c
   14368:	movw	r2, #42264	; 0xa518
   1436c:	movt	r1, #2
   14370:	movt	r0, #2
   14374:	movt	r2, #2
   14378:	ldr	r1, [r1]
   1437c:	ldr	r0, [r0]
   14380:	ldr	r3, [r2]
   14384:	ldr	r1, [r1]
   14388:	add	r5, r3, #1
   1438c:	ldrb	r1, [r0, r1]
   14390:	strb	r1, [r4, r3]
   14394:	str	r5, [r2]
   14398:	b	143cc <__assert_fail@plt+0x2c80>
   1439c:	movw	r0, #42264	; 0xa518
   143a0:	movt	r0, #2
   143a4:	ldr	r5, [r0]
   143a8:	movw	r0, #41852	; 0xa37c
   143ac:	movt	r0, #2
   143b0:	ldr	r1, [r0]
   143b4:	mov	r0, r4
   143b8:	mov	r2, r5
   143bc:	bl	11434 <memcpy@plt>
   143c0:	movw	r0, #41308	; 0xa15c
   143c4:	movt	r0, #2
   143c8:	ldr	r0, [r0]
   143cc:	movw	r1, #42276	; 0xa524
   143d0:	add	r5, r4, r5
   143d4:	ldr	r6, [sl]
   143d8:	movt	r1, #2
   143dc:	str	r5, [r1]
   143e0:	ldrb	r1, [r0]
   143e4:	mov	r0, r5
   143e8:	mov	r2, r6
   143ec:	bl	11614 <memset@plt>
   143f0:	movw	r0, #41860	; 0xa384
   143f4:	movt	r0, #2
   143f8:	ldr	r1, [r0]
   143fc:	cmp	r1, #0
   14400:	beq	14418 <__assert_fail@plt+0x2ccc>
   14404:	movw	r2, #42272	; 0xa520
   14408:	add	r0, r5, r6
   1440c:	movt	r2, #2
   14410:	ldr	r2, [r2]
   14414:	bl	11434 <memcpy@plt>
   14418:	ldr	r0, [r7]
   1441c:	mov	r1, #0
   14420:	strb	r1, [r4, r0]
   14424:	movw	r0, #42260	; 0xa514
   14428:	movt	r0, #2
   1442c:	mov	r4, r0
   14430:	ldr	r0, [r0]
   14434:	bl	14e40 <__assert_fail@plt+0x36f4>
   14438:	ldr	r0, [sl]
   1443c:	mov	r1, #4
   14440:	bl	1764c <__assert_fail@plt+0x5f00>
   14444:	mov	r5, r0
   14448:	str	r0, [r4]
   1444c:	movw	r0, #41868	; 0xa38c
   14450:	movt	r0, #2
   14454:	ldr	r6, [r0]
   14458:	cmp	r6, #0
   1445c:	beq	144c0 <__assert_fail@plt+0x2d74>
   14460:	cmp	r9, #0
   14464:	bne	144cc <__assert_fail@plt+0x2d80>
   14468:	mov	r0, r6
   1446c:	bl	115a8 <strlen@plt>
   14470:	mov	r4, r0
   14474:	movw	r0, #42276	; 0xa524
   14478:	ldr	r7, [sl]
   1447c:	mov	r1, r6
   14480:	movt	r0, #2
   14484:	mov	r2, r4
   14488:	ldr	r0, [r0]
   1448c:	add	r0, r0, r7
   14490:	sub	r0, r0, r4
   14494:	bl	11434 <memcpy@plt>
   14498:	cmp	r4, #0
   1449c:	beq	144c0 <__assert_fail@plt+0x2d74>
   144a0:	add	r0, r5, r7, lsl #2
   144a4:	sub	r1, r6, #1
   144a8:	sub	r0, r0, #4
   144ac:	ldrb	r2, [r1, r4]
   144b0:	subs	r4, r4, #1
   144b4:	sub	r2, r2, #48	; 0x30
   144b8:	str	r2, [r0], #-4
   144bc:	bne	144ac <__assert_fail@plt+0x2d60>
   144c0:	sub	sp, fp, #28
   144c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144c8:	bl	17774 <__assert_fail@plt+0x6028>
   144cc:	movw	r0, #37935	; 0x942f
   144d0:	movw	r1, #37943	; 0x9437
   144d4:	movw	r3, #37955	; 0x9443
   144d8:	movw	r2, #409	; 0x199
   144dc:	movt	r0, #1
   144e0:	movt	r1, #1
   144e4:	movt	r3, #1
   144e8:	bl	1174c <__assert_fail@plt>
   144ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   144f0:	add	fp, sp, #24
   144f4:	sub	sp, sp, #112	; 0x70
   144f8:	movw	r8, #41876	; 0xa394
   144fc:	mov	r4, r0
   14500:	movt	r8, #2
   14504:	ldr	r0, [r8]
   14508:	cmp	r0, #0
   1450c:	beq	14634 <__assert_fail@plt+0x2ee8>
   14510:	movw	r0, #38104	; 0x94d8
   14514:	movt	r0, #1
   14518:	bl	11530 <getenv@plt>
   1451c:	mov	r6, r0
   14520:	movw	r0, #38118	; 0x94e6
   14524:	mov	r1, r4
   14528:	mov	r2, #1
   1452c:	movt	r0, #1
   14530:	bl	115cc <setenv@plt>
   14534:	movw	r5, #38110	; 0x94de
   14538:	cmp	r6, #0
   1453c:	movt	r5, #1
   14540:	movne	r5, r6
   14544:	cmp	r0, #0
   14548:	bne	148e0 <__assert_fail@plt+0x3194>
   1454c:	movw	r0, #41880	; 0xa398
   14550:	movt	r0, #2
   14554:	ldrb	r0, [r0]
   14558:	cmp	r0, #1
   1455c:	bne	145a8 <__assert_fail@plt+0x2e5c>
   14560:	movw	r0, #41836	; 0xa36c
   14564:	movw	r1, #38163	; 0x9513
   14568:	mov	r2, #5
   1456c:	movt	r0, #2
   14570:	movt	r1, #1
   14574:	ldr	r6, [r0]
   14578:	mov	r0, #0
   1457c:	bl	11464 <dcgettext@plt>
   14580:	mov	r7, r0
   14584:	mov	r0, #0
   14588:	mov	r1, #3
   1458c:	mov	r2, r4
   14590:	bl	16830 <__assert_fail@plt+0x50e4>
   14594:	mov	r3, r0
   14598:	mov	r0, r6
   1459c:	mov	r1, #1
   145a0:	mov	r2, r7
   145a4:	bl	11650 <__fprintf_chk@plt>
   145a8:	add	r0, sp, #8
   145ac:	bl	11674 <pipe@plt>
   145b0:	cmp	r0, #0
   145b4:	bne	148f4 <__assert_fail@plt+0x31a8>
   145b8:	bl	116b0 <fork@plt>
   145bc:	cmp	r0, #0
   145c0:	beq	14758 <__assert_fail@plt+0x300c>
   145c4:	mov	r4, r0
   145c8:	cmn	r0, #1
   145cc:	beq	14908 <__assert_fail@plt+0x31bc>
   145d0:	ldr	r0, [sp, #8]
   145d4:	bl	11734 <close@plt>
   145d8:	cmp	r0, #0
   145dc:	bne	1491c <__assert_fail@plt+0x31d0>
   145e0:	movw	r0, #42248	; 0xa508
   145e4:	movt	r0, #2
   145e8:	str	r4, [r0]
   145ec:	movw	r4, #42280	; 0xa528
   145f0:	movw	r0, #42288	; 0xa530
   145f4:	movt	r0, #2
   145f8:	movt	r4, #2
   145fc:	ldr	r1, [r4]
   14600:	ldr	r0, [r0]
   14604:	cmp	r1, r0
   14608:	bne	1482c <__assert_fail@plt+0x30e0>
   1460c:	movw	r5, #42284	; 0xa52c
   14610:	movw	r1, #42288	; 0xa530
   14614:	mov	r2, #4
   14618:	movt	r5, #2
   1461c:	movt	r1, #2
   14620:	ldr	r0, [r5]
   14624:	bl	17454 <__assert_fail@plt+0x5d08>
   14628:	ldr	r1, [r4]
   1462c:	str	r0, [r5]
   14630:	b	14838 <__assert_fail@plt+0x30ec>
   14634:	movw	r0, #41880	; 0xa398
   14638:	movt	r0, #2
   1463c:	ldrb	r0, [r0]
   14640:	cmp	r0, #1
   14644:	bne	1468c <__assert_fail@plt+0x2f40>
   14648:	movw	r0, #41836	; 0xa36c
   1464c:	movw	r1, #38012	; 0x947c
   14650:	mov	r2, #5
   14654:	movt	r0, #2
   14658:	movt	r1, #1
   1465c:	ldr	r5, [r0]
   14660:	mov	r0, #0
   14664:	bl	11464 <dcgettext@plt>
   14668:	mov	r6, r0
   1466c:	mov	r0, #4
   14670:	mov	r1, r4
   14674:	bl	1668c <__assert_fail@plt+0x4f40>
   14678:	mov	r3, r0
   1467c:	mov	r0, r5
   14680:	mov	r1, #1
   14684:	mov	r2, r6
   14688:	bl	11650 <__fprintf_chk@plt>
   1468c:	mov	r0, r4
   14690:	mov	r1, #65	; 0x41
   14694:	movw	r2, #438	; 0x1b6
   14698:	bl	14d40 <__assert_fail@plt+0x35f4>
   1469c:	mov	r5, r0
   146a0:	cmp	r0, #0
   146a4:	bmi	1484c <__assert_fail@plt+0x3100>
   146a8:	add	r1, sp, #8
   146ac:	mov	r0, r5
   146b0:	bl	18674 <__assert_fail@plt+0x6f28>
   146b4:	cmp	r0, #0
   146b8:	bne	14930 <__assert_fail@plt+0x31e4>
   146bc:	movw	r0, #41888	; 0xa3a0
   146c0:	ldr	r1, [sp, #104]	; 0x68
   146c4:	ldr	r7, [sp, #108]	; 0x6c
   146c8:	movt	r0, #2
   146cc:	ldrd	r2, [r0, #96]	; 0x60
   146d0:	eor	r3, r3, r7
   146d4:	eor	r1, r2, r1
   146d8:	orrs	r1, r1, r3
   146dc:	bne	146fc <__assert_fail@plt+0x2fb0>
   146e0:	ldrd	r0, [r0]
   146e4:	ldr	r2, [sp, #8]
   146e8:	ldr	r3, [sp, #12]
   146ec:	eor	r1, r1, r3
   146f0:	eor	r0, r0, r2
   146f4:	orrs	r0, r0, r1
   146f8:	beq	14970 <__assert_fail@plt+0x3224>
   146fc:	mov	r0, r5
   14700:	mov	r2, #0
   14704:	mov	r3, #0
   14708:	bl	1144c <ftruncate64@plt>
   1470c:	cmp	r0, #0
   14710:	beq	1484c <__assert_fail@plt+0x3100>
   14714:	ldr	r0, [sp, #24]
   14718:	and	r0, r0, #61440	; 0xf000
   1471c:	cmp	r0, #32768	; 0x8000
   14720:	bne	1484c <__assert_fail@plt+0x3100>
   14724:	bl	115f0 <__errno_location@plt>
   14728:	movw	r1, #38083	; 0x94c3
   1472c:	ldr	r5, [r0]
   14730:	mov	r0, #0
   14734:	mov	r2, #5
   14738:	movt	r1, #1
   1473c:	bl	11464 <dcgettext@plt>
   14740:	mov	r6, r0
   14744:	mov	r0, #0
   14748:	mov	r1, #3
   1474c:	mov	r2, r4
   14750:	bl	16830 <__assert_fail@plt+0x50e4>
   14754:	b	1495c <__assert_fail@plt+0x3210>
   14758:	movw	r4, #42280	; 0xa528
   1475c:	movt	r4, #2
   14760:	ldr	r0, [r4]
   14764:	cmp	r0, #0
   14768:	beq	1479c <__assert_fail@plt+0x3050>
   1476c:	movw	r7, #42284	; 0xa52c
   14770:	mov	r6, #0
   14774:	movt	r7, #2
   14778:	ldr	r0, [r7]
   1477c:	ldr	r0, [r0, r6, lsl #2]
   14780:	bl	11734 <close@plt>
   14784:	cmp	r0, #0
   14788:	bne	14858 <__assert_fail@plt+0x310c>
   1478c:	ldr	r0, [r4]
   14790:	add	r6, r6, #1
   14794:	cmp	r6, r0
   14798:	bcc	14778 <__assert_fail@plt+0x302c>
   1479c:	ldr	r0, [sp, #12]
   147a0:	bl	11734 <close@plt>
   147a4:	cmp	r0, #0
   147a8:	bne	1486c <__assert_fail@plt+0x3120>
   147ac:	ldr	r0, [sp, #8]
   147b0:	cmp	r0, #0
   147b4:	bne	14898 <__assert_fail@plt+0x314c>
   147b8:	movw	r1, #42120	; 0xa488
   147bc:	mov	r0, #2
   147c0:	mov	r2, #0
   147c4:	mov	r4, #0
   147c8:	movt	r1, #2
   147cc:	bl	11404 <sigprocmask@plt>
   147d0:	mov	r0, r5
   147d4:	bl	14b1c <__assert_fail@plt+0x33d0>
   147d8:	ldr	r3, [r8]
   147dc:	movw	r2, #38285	; 0x958d
   147e0:	mov	r1, r0
   147e4:	mov	r0, r5
   147e8:	str	r4, [sp]
   147ec:	movt	r2, #1
   147f0:	bl	116bc <execl@plt>
   147f4:	bl	115f0 <__errno_location@plt>
   147f8:	movw	r1, #38288	; 0x9590
   147fc:	ldr	r4, [r0]
   14800:	mov	r0, #0
   14804:	mov	r2, #5
   14808:	movt	r1, #1
   1480c:	bl	11464 <dcgettext@plt>
   14810:	mov	r2, r0
   14814:	ldr	r0, [r8]
   14818:	mov	r1, r4
   1481c:	mov	r3, r5
   14820:	str	r0, [sp]
   14824:	mov	r0, #1
   14828:	bl	11518 <error@plt>
   1482c:	movw	r0, #42284	; 0xa52c
   14830:	movt	r0, #2
   14834:	ldr	r0, [r0]
   14838:	add	r2, r1, #1
   1483c:	str	r2, [r4]
   14840:	ldr	r2, [sp, #12]
   14844:	str	r2, [r0, r1, lsl #2]
   14848:	ldr	r5, [sp, #12]
   1484c:	mov	r0, r5
   14850:	sub	sp, fp, #24
   14854:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14858:	bl	115f0 <__errno_location@plt>
   1485c:	ldr	r4, [r0]
   14860:	movw	r1, #38209	; 0x9541
   14864:	movt	r1, #1
   14868:	b	1487c <__assert_fail@plt+0x3130>
   1486c:	bl	115f0 <__errno_location@plt>
   14870:	ldr	r4, [r0]
   14874:	movw	r1, #38228	; 0x9554
   14878:	movt	r1, #1
   1487c:	mov	r0, #0
   14880:	mov	r2, #5
   14884:	bl	11464 <dcgettext@plt>
   14888:	mov	r2, r0
   1488c:	mov	r0, #1
   14890:	mov	r1, r4
   14894:	bl	11518 <error@plt>
   14898:	mov	r1, #0
   1489c:	bl	11470 <dup2@plt>
   148a0:	cmp	r0, #0
   148a4:	bne	148cc <__assert_fail@plt+0x3180>
   148a8:	ldr	r0, [sp, #8]
   148ac:	bl	11734 <close@plt>
   148b0:	cmp	r0, #0
   148b4:	beq	147b8 <__assert_fail@plt+0x306c>
   148b8:	bl	115f0 <__errno_location@plt>
   148bc:	ldr	r4, [r0]
   148c0:	movw	r1, #38266	; 0x957a
   148c4:	movt	r1, #1
   148c8:	b	1487c <__assert_fail@plt+0x3130>
   148cc:	bl	115f0 <__errno_location@plt>
   148d0:	ldr	r4, [r0]
   148d4:	movw	r1, #38248	; 0x9568
   148d8:	movt	r1, #1
   148dc:	b	1487c <__assert_fail@plt+0x3130>
   148e0:	bl	115f0 <__errno_location@plt>
   148e4:	ldr	r4, [r0]
   148e8:	movw	r1, #38123	; 0x94eb
   148ec:	movt	r1, #1
   148f0:	b	1487c <__assert_fail@plt+0x3130>
   148f4:	bl	115f0 <__errno_location@plt>
   148f8:	ldr	r4, [r0]
   148fc:	movw	r1, #38187	; 0x952b
   14900:	movt	r1, #1
   14904:	b	1487c <__assert_fail@plt+0x3130>
   14908:	bl	115f0 <__errno_location@plt>
   1490c:	ldr	r4, [r0]
   14910:	movw	r1, #38322	; 0x95b2
   14914:	movt	r1, #1
   14918:	b	1487c <__assert_fail@plt+0x3130>
   1491c:	bl	115f0 <__errno_location@plt>
   14920:	ldr	r4, [r0]
   14924:	movw	r1, #38346	; 0x95ca
   14928:	movt	r1, #1
   1492c:	b	1487c <__assert_fail@plt+0x3130>
   14930:	bl	115f0 <__errno_location@plt>
   14934:	movw	r1, #38030	; 0x948e
   14938:	ldr	r5, [r0]
   1493c:	mov	r0, #0
   14940:	mov	r2, #5
   14944:	movt	r1, #1
   14948:	bl	11464 <dcgettext@plt>
   1494c:	mov	r6, r0
   14950:	mov	r0, #4
   14954:	mov	r1, r4
   14958:	bl	1668c <__assert_fail@plt+0x4f40>
   1495c:	mov	r3, r0
   14960:	mov	r0, #1
   14964:	mov	r1, r5
   14968:	mov	r2, r6
   1496c:	bl	11518 <error@plt>
   14970:	movw	r1, #38048	; 0x94a0
   14974:	mov	r0, #0
   14978:	mov	r2, #5
   1497c:	movt	r1, #1
   14980:	bl	11464 <dcgettext@plt>
   14984:	mov	r5, r0
   14988:	mov	r0, #4
   1498c:	mov	r1, r4
   14990:	bl	1668c <__assert_fail@plt+0x4f40>
   14994:	mov	r3, r0
   14998:	mov	r0, #1
   1499c:	mov	r1, #0
   149a0:	mov	r2, r5
   149a4:	bl	11518 <error@plt>
   149a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149ac:	add	fp, sp, #28
   149b0:	sub	sp, sp, #12
   149b4:	mov	r4, r0
   149b8:	add	r0, r0, r1, lsl #4
   149bc:	mov	r5, r1
   149c0:	mov	r9, #0
   149c4:	mov	r7, r0
   149c8:	ldr	r1, [r7, #4]!
   149cc:	cmn	r1, #1
   149d0:	bgt	14ac4 <__assert_fail@plt+0x3378>
   149d4:	sub	r8, r2, #1
   149d8:	cmp	r5, #0
   149dc:	mov	r9, #0
   149e0:	str	r0, [sp, #4]
   149e4:	str	r7, [sp, #8]
   149e8:	mov	r6, r8
   149ec:	subne	r6, r5, #1
   149f0:	ldr	r0, [r4, r5, lsl #4]
   149f4:	cmn	r1, #1
   149f8:	beq	14a08 <__assert_fail@plt+0x32bc>
   149fc:	movw	r1, #3073	; 0xc01
   14a00:	bl	14d40 <__assert_fail@plt+0x35f4>
   14a04:	b	14a0c <__assert_fail@plt+0x32c0>
   14a08:	bl	144ec <__assert_fail@plt+0x2da0>
   14a0c:	cmn	r0, #1
   14a10:	bgt	14a8c <__assert_fail@plt+0x3340>
   14a14:	bl	115f0 <__errno_location@plt>
   14a18:	ldr	r1, [r0]
   14a1c:	mov	r7, r0
   14a20:	sub	r0, r1, #23
   14a24:	cmp	r0, #1
   14a28:	bhi	14ad0 <__assert_fail@plt+0x3384>
   14a2c:	add	sl, r4, r6, lsl #4
   14a30:	mov	r9, sl
   14a34:	ldr	r0, [r9, #4]!
   14a38:	cmn	r0, #1
   14a3c:	bgt	14a5c <__assert_fail@plt+0x3310>
   14a40:	cmp	r6, #0
   14a44:	mov	r0, r8
   14a48:	subne	r0, r6, #1
   14a4c:	cmp	r0, r5
   14a50:	mov	r6, r0
   14a54:	bne	14a2c <__assert_fail@plt+0x32e0>
   14a58:	b	14ad0 <__assert_fail@plt+0x3384>
   14a5c:	ldr	r0, [sl, #8]!
   14a60:	bl	14ca4 <__assert_fail@plt+0x3558>
   14a64:	cmp	r0, #0
   14a68:	bne	14afc <__assert_fail@plt+0x33b0>
   14a6c:	ldr	r7, [sp, #8]
   14a70:	mov	r0, #0
   14a74:	str	r0, [sl]
   14a78:	mvn	r0, #1
   14a7c:	str	r0, [r9]
   14a80:	mov	r9, #1
   14a84:	ldr	r1, [r7]
   14a88:	b	149f0 <__assert_fail@plt+0x32a4>
   14a8c:	movw	r1, #38574	; 0x96ae
   14a90:	str	r0, [r7]
   14a94:	movt	r1, #1
   14a98:	bl	113a4 <fdopen@plt>
   14a9c:	ldr	r2, [sp, #4]
   14aa0:	cmp	r0, #0
   14aa4:	str	r0, [r2, #8]
   14aa8:	beq	14b0c <__assert_fail@plt+0x33c0>
   14aac:	movw	r0, #42248	; 0xa508
   14ab0:	movt	r0, #2
   14ab4:	ldr	r1, [r0]
   14ab8:	str	r1, [r2, #12]
   14abc:	mov	r1, #0
   14ac0:	str	r1, [r0]
   14ac4:	and	r0, r9, #1
   14ac8:	sub	sp, fp, #28
   14acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ad0:	ldr	r2, [r4, r5, lsl #4]
   14ad4:	mov	r0, #0
   14ad8:	mov	r4, r1
   14adc:	mov	r1, #3
   14ae0:	bl	16830 <__assert_fail@plt+0x50e4>
   14ae4:	movw	r2, #38682	; 0x971a
   14ae8:	mov	r3, r0
   14aec:	mov	r0, #1
   14af0:	mov	r1, r4
   14af4:	movt	r2, #1
   14af8:	bl	11518 <error@plt>
   14afc:	ldr	r2, [r4, r6, lsl #4]
   14b00:	ldr	r4, [r7]
   14b04:	mov	r0, #0
   14b08:	b	14adc <__assert_fail@plt+0x3390>
   14b0c:	bl	115f0 <__errno_location@plt>
   14b10:	ldr	r2, [r4, r5, lsl #4]
   14b14:	ldr	r4, [r0]
   14b18:	b	14b04 <__assert_fail@plt+0x33b8>
   14b1c:	sub	r0, r0, #1
   14b20:	ldrb	r3, [r0, #1]!
   14b24:	cmp	r3, #47	; 0x2f
   14b28:	beq	14b20 <__assert_fail@plt+0x33d4>
   14b2c:	mov	r2, #0
   14b30:	mov	r1, r0
   14b34:	uxtb	r3, r3
   14b38:	cmp	r3, #47	; 0x2f
   14b3c:	beq	14b58 <__assert_fail@plt+0x340c>
   14b40:	cmp	r3, #0
   14b44:	bxeq	lr
   14b48:	tst	r2, #1
   14b4c:	mov	r2, #0
   14b50:	movne	r0, r1
   14b54:	b	14b5c <__assert_fail@plt+0x3410>
   14b58:	mov	r2, #1
   14b5c:	ldrb	r3, [r1, #1]!
   14b60:	b	14b34 <__assert_fail@plt+0x33e8>
   14b64:	push	{r4, sl, fp, lr}
   14b68:	add	fp, sp, #8
   14b6c:	mov	r4, r0
   14b70:	bl	115a8 <strlen@plt>
   14b74:	mov	r1, r0
   14b78:	sub	r2, r4, #1
   14b7c:	mov	r0, r1
   14b80:	cmp	r1, #2
   14b84:	bcc	14b98 <__assert_fail@plt+0x344c>
   14b88:	ldrb	r3, [r2, r0]
   14b8c:	sub	r1, r0, #1
   14b90:	cmp	r3, #47	; 0x2f
   14b94:	beq	14b7c <__assert_fail@plt+0x3430>
   14b98:	pop	{r4, sl, fp, pc}
   14b9c:	movw	r1, #42292	; 0xa534
   14ba0:	movt	r1, #2
   14ba4:	str	r0, [r1]
   14ba8:	bx	lr
   14bac:	movw	r1, #42296	; 0xa538
   14bb0:	movt	r1, #2
   14bb4:	strb	r0, [r1]
   14bb8:	bx	lr
   14bbc:	push	{r4, r5, r6, sl, fp, lr}
   14bc0:	add	fp, sp, #16
   14bc4:	sub	sp, sp, #8
   14bc8:	movw	r0, #41836	; 0xa36c
   14bcc:	movt	r0, #2
   14bd0:	ldr	r0, [r0]
   14bd4:	bl	18048 <__assert_fail@plt+0x68fc>
   14bd8:	cmp	r0, #0
   14bdc:	beq	14c04 <__assert_fail@plt+0x34b8>
   14be0:	movw	r0, #42296	; 0xa538
   14be4:	movt	r0, #2
   14be8:	ldrb	r0, [r0]
   14bec:	cmp	r0, #0
   14bf0:	beq	14c24 <__assert_fail@plt+0x34d8>
   14bf4:	bl	115f0 <__errno_location@plt>
   14bf8:	ldr	r0, [r0]
   14bfc:	cmp	r0, #32
   14c00:	bne	14c24 <__assert_fail@plt+0x34d8>
   14c04:	movw	r0, #41832	; 0xa368
   14c08:	movt	r0, #2
   14c0c:	ldr	r0, [r0]
   14c10:	bl	18048 <__assert_fail@plt+0x68fc>
   14c14:	cmp	r0, #0
   14c18:	subeq	sp, fp, #16
   14c1c:	popeq	{r4, r5, r6, sl, fp, pc}
   14c20:	b	14c94 <__assert_fail@plt+0x3548>
   14c24:	movw	r1, #38562	; 0x96a2
   14c28:	mov	r0, #0
   14c2c:	mov	r2, #5
   14c30:	movt	r1, #1
   14c34:	bl	11464 <dcgettext@plt>
   14c38:	mov	r4, r0
   14c3c:	movw	r0, #42292	; 0xa534
   14c40:	movt	r0, #2
   14c44:	ldr	r6, [r0]
   14c48:	bl	115f0 <__errno_location@plt>
   14c4c:	ldr	r5, [r0]
   14c50:	cmp	r6, #0
   14c54:	bne	14c70 <__assert_fail@plt+0x3524>
   14c58:	movw	r2, #38682	; 0x971a
   14c5c:	mov	r0, #0
   14c60:	mov	r1, r5
   14c64:	mov	r3, r4
   14c68:	movt	r2, #1
   14c6c:	b	14c90 <__assert_fail@plt+0x3544>
   14c70:	mov	r0, r6
   14c74:	bl	16784 <__assert_fail@plt+0x5038>
   14c78:	movw	r2, #36901	; 0x9025
   14c7c:	mov	r3, r0
   14c80:	str	r4, [sp]
   14c84:	mov	r0, #0
   14c88:	mov	r1, r5
   14c8c:	movt	r2, #1
   14c90:	bl	11518 <error@plt>
   14c94:	movw	r0, #41320	; 0xa168
   14c98:	movt	r0, #2
   14c9c:	ldr	r0, [r0]
   14ca0:	bl	11428 <_exit@plt>
   14ca4:	push	{r4, r5, r6, sl, fp, lr}
   14ca8:	add	fp, sp, #16
   14cac:	sub	sp, sp, #8
   14cb0:	mov	r4, r0
   14cb4:	bl	11638 <fileno@plt>
   14cb8:	cmn	r0, #1
   14cbc:	ble	14d30 <__assert_fail@plt+0x35e4>
   14cc0:	mov	r0, r4
   14cc4:	bl	11560 <__freading@plt>
   14cc8:	cmp	r0, #0
   14ccc:	beq	14cf8 <__assert_fail@plt+0x35ac>
   14cd0:	mov	r0, r4
   14cd4:	bl	11638 <fileno@plt>
   14cd8:	mov	r1, #1
   14cdc:	mov	r2, #0
   14ce0:	mov	r3, #0
   14ce4:	str	r1, [sp]
   14ce8:	bl	114c4 <lseek64@plt>
   14cec:	and	r0, r0, r1
   14cf0:	cmn	r0, #1
   14cf4:	beq	14d30 <__assert_fail@plt+0x35e4>
   14cf8:	mov	r0, r4
   14cfc:	bl	14de4 <__assert_fail@plt+0x3698>
   14d00:	cmp	r0, #0
   14d04:	beq	14d30 <__assert_fail@plt+0x35e4>
   14d08:	bl	115f0 <__errno_location@plt>
   14d0c:	ldr	r6, [r0]
   14d10:	mov	r5, r0
   14d14:	mov	r0, r4
   14d18:	bl	11668 <fclose@plt>
   14d1c:	cmp	r6, #0
   14d20:	strne	r6, [r5]
   14d24:	mvnne	r0, #0
   14d28:	sub	sp, fp, #16
   14d2c:	pop	{r4, r5, r6, sl, fp, pc}
   14d30:	mov	r0, r4
   14d34:	sub	sp, fp, #16
   14d38:	pop	{r4, r5, r6, sl, fp, lr}
   14d3c:	b	11668 <fclose@plt>
   14d40:	sub	sp, sp, #8
   14d44:	push	{fp, lr}
   14d48:	mov	fp, sp
   14d4c:	sub	sp, sp, #8
   14d50:	str	r2, [fp, #8]
   14d54:	str	r3, [fp, #12]
   14d58:	tst	r1, #64	; 0x40
   14d5c:	mov	r2, #0
   14d60:	ldrne	r2, [fp, #8]
   14d64:	bl	11524 <open64@plt>
   14d68:	bl	16e28 <__assert_fail@plt+0x56dc>
   14d6c:	mov	sp, fp
   14d70:	pop	{fp, lr}
   14d74:	add	sp, sp, #8
   14d78:	bx	lr
   14d7c:	push	{r4, r5, r6, r7, fp, lr}
   14d80:	add	fp, sp, #16
   14d84:	mov	r5, r0
   14d88:	mov	r0, r1
   14d8c:	mov	r1, r2
   14d90:	mov	r2, r3
   14d94:	bl	11524 <open64@plt>
   14d98:	mov	r4, r0
   14d9c:	cmp	r0, r5
   14da0:	beq	14ddc <__assert_fail@plt+0x3690>
   14da4:	cmp	r4, #0
   14da8:	bmi	14ddc <__assert_fail@plt+0x3690>
   14dac:	mov	r0, r4
   14db0:	mov	r1, r5
   14db4:	bl	11470 <dup2@plt>
   14db8:	mov	r5, r0
   14dbc:	bl	115f0 <__errno_location@plt>
   14dc0:	ldr	r7, [r0]
   14dc4:	mov	r6, r0
   14dc8:	mov	r0, r4
   14dcc:	bl	11734 <close@plt>
   14dd0:	mov	r0, r5
   14dd4:	str	r7, [r6]
   14dd8:	pop	{r4, r5, r6, r7, fp, pc}
   14ddc:	mov	r0, r4
   14de0:	pop	{r4, r5, r6, r7, fp, pc}
   14de4:	push	{r4, sl, fp, lr}
   14de8:	add	fp, sp, #8
   14dec:	sub	sp, sp, #8
   14df0:	mov	r4, r0
   14df4:	cmp	r0, #0
   14df8:	beq	14e30 <__assert_fail@plt+0x36e4>
   14dfc:	mov	r0, r4
   14e00:	bl	11560 <__freading@plt>
   14e04:	cmp	r0, #0
   14e08:	beq	14e30 <__assert_fail@plt+0x36e4>
   14e0c:	ldrb	r0, [r4, #1]
   14e10:	tst	r0, #1
   14e14:	beq	14e30 <__assert_fail@plt+0x36e4>
   14e18:	mov	r0, #1
   14e1c:	mov	r2, #0
   14e20:	mov	r3, #0
   14e24:	str	r0, [sp]
   14e28:	mov	r0, r4
   14e2c:	bl	14e68 <__assert_fail@plt+0x371c>
   14e30:	mov	r0, r4
   14e34:	sub	sp, fp, #8
   14e38:	pop	{r4, sl, fp, lr}
   14e3c:	b	113f8 <fflush@plt>
   14e40:	push	{r4, r5, r6, sl, fp, lr}
   14e44:	add	fp, sp, #16
   14e48:	mov	r4, r0
   14e4c:	bl	115f0 <__errno_location@plt>
   14e50:	ldr	r6, [r0]
   14e54:	mov	r5, r0
   14e58:	mov	r0, r4
   14e5c:	bl	1141c <free@plt>
   14e60:	str	r6, [r5]
   14e64:	pop	{r4, r5, r6, sl, fp, pc}
   14e68:	push	{r4, r5, r6, r7, fp, lr}
   14e6c:	add	fp, sp, #16
   14e70:	sub	sp, sp, #8
   14e74:	mov	r4, r0
   14e78:	ldr	r0, [r0, #4]
   14e7c:	mov	r5, r3
   14e80:	mov	r6, r2
   14e84:	ldr	r1, [r4, #8]
   14e88:	cmp	r1, r0
   14e8c:	bne	14ea8 <__assert_fail@plt+0x375c>
   14e90:	ldrd	r0, [r4, #16]
   14e94:	cmp	r1, r0
   14e98:	bne	14ea8 <__assert_fail@plt+0x375c>
   14e9c:	ldr	r0, [r4, #36]	; 0x24
   14ea0:	cmp	r0, #0
   14ea4:	beq	14ec0 <__assert_fail@plt+0x3774>
   14ea8:	mov	r0, r4
   14eac:	mov	r2, r6
   14eb0:	mov	r3, r5
   14eb4:	sub	sp, fp, #16
   14eb8:	pop	{r4, r5, r6, r7, fp, lr}
   14ebc:	b	11680 <fseeko64@plt>
   14ec0:	ldr	r7, [fp, #8]
   14ec4:	mov	r0, r4
   14ec8:	bl	11638 <fileno@plt>
   14ecc:	mov	r2, r6
   14ed0:	mov	r3, r5
   14ed4:	str	r7, [sp]
   14ed8:	bl	114c4 <lseek64@plt>
   14edc:	and	r2, r0, r1
   14ee0:	cmn	r2, #1
   14ee4:	beq	14f00 <__assert_fail@plt+0x37b4>
   14ee8:	strd	r0, [r4, #80]	; 0x50
   14eec:	ldr	r0, [r4]
   14ef0:	bic	r0, r0, #16
   14ef4:	str	r0, [r4]
   14ef8:	mov	r0, #0
   14efc:	b	14f04 <__assert_fail@plt+0x37b8>
   14f00:	mvn	r0, #0
   14f04:	sub	sp, fp, #16
   14f08:	pop	{r4, r5, r6, r7, fp, pc}
   14f0c:	push	{r4, r5, r6, r7, fp, lr}
   14f10:	add	fp, sp, #16
   14f14:	cmp	r2, #0
   14f18:	beq	14f60 <__assert_fail@plt+0x3814>
   14f1c:	mov	r5, r2
   14f20:	mov	r6, r1
   14f24:	mov	r7, r0
   14f28:	mov	r4, #0
   14f2c:	mov	r0, r7
   14f30:	mov	r1, r6
   14f34:	mov	r2, r5
   14f38:	bl	16b74 <__assert_fail@plt+0x5428>
   14f3c:	cmn	r0, #1
   14f40:	beq	14f74 <__assert_fail@plt+0x3828>
   14f44:	cmp	r0, #0
   14f48:	beq	14f68 <__assert_fail@plt+0x381c>
   14f4c:	subs	r5, r5, r0
   14f50:	add	r6, r6, r0
   14f54:	add	r4, r0, r4
   14f58:	bne	14f2c <__assert_fail@plt+0x37e0>
   14f5c:	b	14f74 <__assert_fail@plt+0x3828>
   14f60:	mov	r4, #0
   14f64:	b	14f74 <__assert_fail@plt+0x3828>
   14f68:	bl	115f0 <__errno_location@plt>
   14f6c:	mov	r1, #28
   14f70:	str	r1, [r0]
   14f74:	mov	r0, r4
   14f78:	pop	{r4, r5, r6, r7, fp, pc}
   14f7c:	push	{r4, r5, r6, sl, fp, lr}
   14f80:	add	fp, sp, #16
   14f84:	mov	r5, r0
   14f88:	mov	r0, #0
   14f8c:	mov	r4, r1
   14f90:	add	r6, r2, #19
   14f94:	strb	r0, [r2, #20]
   14f98:	mov	r0, r5
   14f9c:	mov	r1, r4
   14fa0:	mov	r2, #10
   14fa4:	mov	r3, #0
   14fa8:	bl	18484 <__assert_fail@plt+0x6d38>
   14fac:	add	r2, r0, r0, lsl #2
   14fb0:	sub	r2, r5, r2, lsl #1
   14fb4:	orr	r2, r2, #48	; 0x30
   14fb8:	strb	r2, [r6], #-1
   14fbc:	rsbs	r2, r5, #9
   14fc0:	mov	r5, r0
   14fc4:	rscs	r2, r4, #0
   14fc8:	mov	r4, r1
   14fcc:	bcc	14f98 <__assert_fail@plt+0x384c>
   14fd0:	add	r0, r6, #1
   14fd4:	pop	{r4, r5, r6, sl, fp, pc}
   14fd8:	push	{r4, r5, fp, lr}
   14fdc:	add	fp, sp, #8
   14fe0:	cmp	r0, #0
   14fe4:	beq	15078 <__assert_fail@plt+0x392c>
   14fe8:	mov	r1, #47	; 0x2f
   14fec:	mov	r4, r0
   14ff0:	bl	116c8 <strrchr@plt>
   14ff4:	cmp	r0, #0
   14ff8:	mov	r5, r4
   14ffc:	addne	r5, r0, #1
   15000:	sub	r0, r5, r4
   15004:	cmp	r0, #7
   15008:	blt	1505c <__assert_fail@plt+0x3910>
   1500c:	movw	r1, #39135	; 0x98df
   15010:	sub	r0, r5, #7
   15014:	mov	r2, #7
   15018:	movt	r1, #1
   1501c:	bl	1171c <strncmp@plt>
   15020:	cmp	r0, #0
   15024:	bne	1505c <__assert_fail@plt+0x3910>
   15028:	movw	r1, #39143	; 0x98e7
   1502c:	mov	r0, r5
   15030:	mov	r2, #3
   15034:	movt	r1, #1
   15038:	bl	1171c <strncmp@plt>
   1503c:	cmp	r0, #0
   15040:	beq	1504c <__assert_fail@plt+0x3900>
   15044:	mov	r4, r5
   15048:	b	1505c <__assert_fail@plt+0x3910>
   1504c:	movw	r0, #41816	; 0xa358
   15050:	add	r4, r5, #3
   15054:	movt	r0, #2
   15058:	str	r4, [r0]
   1505c:	movw	r0, #41820	; 0xa35c
   15060:	movt	r0, #2
   15064:	str	r4, [r0]
   15068:	movw	r0, #42300	; 0xa53c
   1506c:	movt	r0, #2
   15070:	str	r4, [r0]
   15074:	pop	{r4, r5, fp, pc}
   15078:	movw	r0, #41832	; 0xa368
   1507c:	movt	r0, #2
   15080:	ldr	r1, [r0]
   15084:	movw	r0, #39079	; 0x98a7
   15088:	movt	r0, #1
   1508c:	bl	11710 <fputs@plt>
   15090:	bl	11728 <abort@plt>
   15094:	push	{r4, r5, r6, sl, fp, lr}
   15098:	add	fp, sp, #16
   1509c:	mov	r4, r0
   150a0:	movw	r0, #42304	; 0xa540
   150a4:	movt	r0, #2
   150a8:	cmp	r4, #0
   150ac:	moveq	r4, r0
   150b0:	bl	115f0 <__errno_location@plt>
   150b4:	ldr	r6, [r0]
   150b8:	mov	r5, r0
   150bc:	mov	r0, r4
   150c0:	mov	r1, #48	; 0x30
   150c4:	bl	17698 <__assert_fail@plt+0x5f4c>
   150c8:	str	r6, [r5]
   150cc:	pop	{r4, r5, r6, sl, fp, pc}
   150d0:	movw	r1, #42304	; 0xa540
   150d4:	cmp	r0, #0
   150d8:	movt	r1, #2
   150dc:	movne	r1, r0
   150e0:	ldr	r0, [r1]
   150e4:	bx	lr
   150e8:	movw	r2, #42304	; 0xa540
   150ec:	cmp	r0, #0
   150f0:	movt	r2, #2
   150f4:	movne	r2, r0
   150f8:	str	r1, [r2]
   150fc:	bx	lr
   15100:	movw	r3, #42304	; 0xa540
   15104:	cmp	r0, #0
   15108:	and	r2, r2, #1
   1510c:	movt	r3, #2
   15110:	movne	r3, r0
   15114:	ubfx	r0, r1, #5, #3
   15118:	and	r1, r1, #31
   1511c:	add	ip, r3, r0, lsl #2
   15120:	mov	r0, #1
   15124:	ldr	r3, [ip, #8]
   15128:	and	r0, r0, r3, lsr r1
   1512c:	eor	r2, r0, r2
   15130:	eor	r1, r3, r2, lsl r1
   15134:	str	r1, [ip, #8]
   15138:	bx	lr
   1513c:	movw	r2, #42304	; 0xa540
   15140:	cmp	r0, #0
   15144:	movt	r2, #2
   15148:	movne	r2, r0
   1514c:	ldr	r0, [r2, #4]
   15150:	str	r1, [r2, #4]
   15154:	bx	lr
   15158:	push	{fp, lr}
   1515c:	mov	fp, sp
   15160:	movw	r3, #42304	; 0xa540
   15164:	cmp	r0, #0
   15168:	movt	r3, #2
   1516c:	movne	r3, r0
   15170:	cmp	r1, #0
   15174:	mov	r0, #10
   15178:	cmpne	r2, #0
   1517c:	str	r0, [r3]
   15180:	bne	15188 <__assert_fail@plt+0x3a3c>
   15184:	bl	11728 <abort@plt>
   15188:	str	r1, [r3, #40]	; 0x28
   1518c:	str	r2, [r3, #44]	; 0x2c
   15190:	pop	{fp, pc}
   15194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15198:	add	fp, sp, #28
   1519c:	sub	sp, sp, #20
   151a0:	mov	r7, r0
   151a4:	ldr	r0, [fp, #8]
   151a8:	movw	r5, #42304	; 0xa540
   151ac:	mov	r8, r3
   151b0:	mov	r9, r2
   151b4:	mov	sl, r1
   151b8:	movt	r5, #2
   151bc:	cmp	r0, #0
   151c0:	movne	r5, r0
   151c4:	bl	115f0 <__errno_location@plt>
   151c8:	ldr	r2, [r5, #40]	; 0x28
   151cc:	ldr	r3, [r5, #44]	; 0x2c
   151d0:	mov	r4, r0
   151d4:	ldm	r5, {r0, r1}
   151d8:	add	r5, r5, #8
   151dc:	ldr	r6, [r4]
   151e0:	stm	sp, {r0, r1, r5}
   151e4:	mov	r0, r7
   151e8:	mov	r1, sl
   151ec:	str	r2, [sp, #12]
   151f0:	str	r3, [sp, #16]
   151f4:	mov	r2, r9
   151f8:	mov	r3, r8
   151fc:	bl	1520c <__assert_fail@plt+0x3ac0>
   15200:	str	r6, [r4]
   15204:	sub	sp, fp, #28
   15208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1520c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15210:	add	fp, sp, #28
   15214:	sub	sp, sp, #156	; 0x9c
   15218:	mov	r5, r0
   1521c:	add	r0, r2, #1
   15220:	mov	r6, r1
   15224:	mov	sl, r3
   15228:	str	r2, [fp, #-80]	; 0xffffffb0
   1522c:	str	r0, [sp, #72]	; 0x48
   15230:	ldr	r0, [fp, #12]
   15234:	and	r1, r0, #1
   15238:	str	r1, [sp, #32]
   1523c:	and	r1, r0, #4
   15240:	str	r1, [sp, #28]
   15244:	ubfx	r9, r0, #1, #1
   15248:	bl	114dc <__ctype_get_mb_cur_max@plt>
   1524c:	str	r0, [sp, #40]	; 0x28
   15250:	ldr	r0, [fp, #24]
   15254:	ldr	r7, [fp, #8]
   15258:	mov	r1, #0
   1525c:	mov	lr, #0
   15260:	str	r5, [fp, #-84]	; 0xffffffac
   15264:	str	r1, [sp, #60]	; 0x3c
   15268:	mov	r1, #1
   1526c:	str	r1, [fp, #-48]	; 0xffffffd0
   15270:	str	r0, [sp, #80]	; 0x50
   15274:	ldr	r0, [fp, #20]
   15278:	str	r0, [sp, #76]	; 0x4c
   1527c:	mov	r0, #0
   15280:	str	r0, [sp, #56]	; 0x38
   15284:	mov	r0, #0
   15288:	str	r0, [fp, #-88]	; 0xffffffa8
   1528c:	mov	r0, #0
   15290:	str	r0, [fp, #-72]	; 0xffffffb8
   15294:	mov	r0, #0
   15298:	cmp	r7, #10
   1529c:	bhi	16278 <__assert_fail@plt+0x4b2c>
   152a0:	add	r1, pc, #24
   152a4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   152a8:	mov	ip, r6
   152ac:	mov	r8, #0
   152b0:	mov	r2, #1
   152b4:	mov	r6, #0
   152b8:	mov	r3, sl
   152bc:	ldr	pc, [r1, r7, lsl #2]
   152c0:	andeq	r5, r1, ip, lsr #7
   152c4:	andeq	r5, r1, r0, lsl #8
   152c8:	andeq	r5, r1, r0, asr #7
   152cc:	andeq	r5, r1, r4, lsr #7
   152d0:	strdeq	r5, [r1], -r4
   152d4:	andeq	r5, r1, r8, lsr #8
   152d8:	ldrdeq	r5, [r1], -r0
   152dc:	andeq	r5, r1, ip, lsr #9
   152e0:	andeq	r5, r1, ip, ror #5
   152e4:	andeq	r5, r1, ip, ror #5
   152e8:	andeq	r5, r1, ip, lsr #6
   152ec:	movw	r0, #39223	; 0x9937
   152f0:	mov	r1, r7
   152f4:	mov	r6, r5
   152f8:	mov	r4, ip
   152fc:	mov	r5, lr
   15300:	movt	r0, #1
   15304:	bl	169dc <__assert_fail@plt+0x5290>
   15308:	str	r0, [sp, #76]	; 0x4c
   1530c:	movw	r0, #39225	; 0x9939
   15310:	mov	r1, r7
   15314:	movt	r0, #1
   15318:	bl	169dc <__assert_fail@plt+0x5290>
   1531c:	mov	lr, r5
   15320:	mov	r5, r6
   15324:	mov	ip, r4
   15328:	str	r0, [sp, #80]	; 0x50
   1532c:	mov	r8, #0
   15330:	tst	r9, #1
   15334:	str	lr, [sp, #44]	; 0x2c
   15338:	bne	15370 <__assert_fail@plt+0x3c24>
   1533c:	ldr	r0, [sp, #76]	; 0x4c
   15340:	ldrb	r0, [r0]
   15344:	cmp	r0, #0
   15348:	beq	15370 <__assert_fail@plt+0x3c24>
   1534c:	ldr	r1, [sp, #76]	; 0x4c
   15350:	mov	r8, #0
   15354:	add	r1, r1, #1
   15358:	cmp	r8, ip
   1535c:	strbcc	r0, [r5, r8]
   15360:	ldrb	r0, [r1, r8]
   15364:	add	r8, r8, #1
   15368:	cmp	r0, #0
   1536c:	bne	15358 <__assert_fail@plt+0x3c0c>
   15370:	ldr	r6, [sp, #80]	; 0x50
   15374:	mov	r4, ip
   15378:	mov	r0, r6
   1537c:	bl	115a8 <strlen@plt>
   15380:	mov	ip, r4
   15384:	ldr	r4, [fp, #-80]	; 0xffffffb0
   15388:	ldr	lr, [sp, #44]	; 0x2c
   1538c:	str	r6, [fp, #-88]	; 0xffffffa8
   15390:	str	r0, [fp, #-72]	; 0xffffffb8
   15394:	mov	r2, #1
   15398:	mov	r6, r9
   1539c:	mov	r3, sl
   153a0:	b	154ac <__assert_fail@plt+0x3d60>
   153a4:	mov	r0, #1
   153a8:	b	15400 <__assert_fail@plt+0x3cb4>
   153ac:	mov	r7, #0
   153b0:	mov	r8, #0
   153b4:	mov	r2, r0
   153b8:	mov	r6, #0
   153bc:	b	154ac <__assert_fail@plt+0x3d60>
   153c0:	tst	r9, #1
   153c4:	bne	15400 <__assert_fail@plt+0x3cb4>
   153c8:	mov	r2, r0
   153cc:	b	15458 <__assert_fail@plt+0x3d0c>
   153d0:	mov	r0, #1
   153d4:	mov	r8, #0
   153d8:	mov	r7, #5
   153dc:	mov	r2, #1
   153e0:	str	r0, [fp, #-72]	; 0xffffffb8
   153e4:	movw	r0, #38320	; 0x95b0
   153e8:	movt	r0, #1
   153ec:	str	r0, [fp, #-88]	; 0xffffffa8
   153f0:	b	15420 <__assert_fail@plt+0x3cd4>
   153f4:	mov	r2, #1
   153f8:	tst	r9, #1
   153fc:	beq	15458 <__assert_fail@plt+0x3d0c>
   15400:	mov	r1, #1
   15404:	mov	r8, #0
   15408:	mov	r7, #2
   1540c:	mov	r2, r0
   15410:	str	r1, [fp, #-72]	; 0xffffffb8
   15414:	movw	r1, #39225	; 0x9939
   15418:	movt	r1, #1
   1541c:	str	r1, [fp, #-88]	; 0xffffffa8
   15420:	mov	r6, #1
   15424:	b	154ac <__assert_fail@plt+0x3d60>
   15428:	tst	r9, #1
   1542c:	beq	1547c <__assert_fail@plt+0x3d30>
   15430:	mov	r0, #1
   15434:	mov	r8, #0
   15438:	mov	r2, #1
   1543c:	mov	r6, #1
   15440:	mov	r7, #5
   15444:	str	r0, [fp, #-72]	; 0xffffffb8
   15448:	movw	r0, #38320	; 0x95b0
   1544c:	movt	r0, #1
   15450:	str	r0, [fp, #-88]	; 0xffffffa8
   15454:	b	154ac <__assert_fail@plt+0x3d60>
   15458:	cmp	ip, #0
   1545c:	mov	r8, #1
   15460:	mov	r6, #0
   15464:	mov	r7, #2
   15468:	movne	r0, #39	; 0x27
   1546c:	strbne	r0, [r5]
   15470:	movw	r0, #39225	; 0x9939
   15474:	movt	r0, #1
   15478:	b	154a0 <__assert_fail@plt+0x3d54>
   1547c:	cmp	ip, #0
   15480:	mov	r8, #1
   15484:	mov	r2, #1
   15488:	mov	r7, #5
   1548c:	mov	r6, #0
   15490:	movne	r0, #34	; 0x22
   15494:	strbne	r0, [r5]
   15498:	movw	r0, #38320	; 0x95b0
   1549c:	movt	r0, #1
   154a0:	str	r0, [fp, #-88]	; 0xffffffa8
   154a4:	mov	r0, #1
   154a8:	str	r0, [fp, #-72]	; 0xffffffb8
   154ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   154b0:	str	r7, [fp, #-68]	; 0xffffffbc
   154b4:	str	r6, [fp, #-76]	; 0xffffffb4
   154b8:	str	r2, [sp, #84]	; 0x54
   154bc:	cmp	r0, #0
   154c0:	movwne	r0, #1
   154c4:	and	r1, r0, r6
   154c8:	and	r1, r2, r1
   154cc:	str	r1, [sp, #48]	; 0x30
   154d0:	sub	r1, r7, #2
   154d4:	clz	r1, r1
   154d8:	lsr	r1, r1, #5
   154dc:	and	r1, r1, r6
   154e0:	str	r1, [sp, #64]	; 0x40
   154e4:	subs	r1, r7, #2
   154e8:	eor	r7, r6, #1
   154ec:	movwne	r1, #1
   154f0:	str	r7, [sp, #92]	; 0x5c
   154f4:	orr	r7, r1, r7
   154f8:	and	r1, r1, r2
   154fc:	and	r0, r0, r1
   15500:	str	r7, [sp, #68]	; 0x44
   15504:	mov	r7, #0
   15508:	str	r0, [fp, #-60]	; 0xffffffc4
   1550c:	orr	r0, r1, r6
   15510:	ldr	r1, [fp, #16]
   15514:	eor	r0, r0, #1
   15518:	clz	r1, r1
   1551c:	lsr	r1, r1, #5
   15520:	orr	r0, r1, r0
   15524:	str	r0, [fp, #-64]	; 0xffffffc0
   15528:	eor	r0, r2, #1
   1552c:	str	r0, [sp, #52]	; 0x34
   15530:	cmn	r3, #1
   15534:	beq	15544 <__assert_fail@plt+0x3df8>
   15538:	cmp	r7, r3
   1553c:	bne	15550 <__assert_fail@plt+0x3e04>
   15540:	b	160ac <__assert_fail@plt+0x4960>
   15544:	ldrb	r0, [r4, r7]
   15548:	cmp	r0, #0
   1554c:	beq	160b4 <__assert_fail@plt+0x4968>
   15550:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15554:	cmp	r0, #0
   15558:	beq	155a0 <__assert_fail@plt+0x3e54>
   1555c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15560:	add	r5, r7, r0
   15564:	cmp	r0, #2
   15568:	bcc	155b4 <__assert_fail@plt+0x3e68>
   1556c:	mov	r0, #0
   15570:	cmn	r3, #1
   15574:	str	r0, [fp, #-56]	; 0xffffffc8
   15578:	bne	155bc <__assert_fail@plt+0x3e70>
   1557c:	mov	r0, r4
   15580:	mov	r4, ip
   15584:	mov	r6, lr
   15588:	bl	115a8 <strlen@plt>
   1558c:	mov	ip, r4
   15590:	ldr	r4, [fp, #-80]	; 0xffffffb0
   15594:	mov	lr, r6
   15598:	mov	r3, r0
   1559c:	b	155bc <__assert_fail@plt+0x3e70>
   155a0:	mov	r0, #0
   155a4:	mov	sl, r3
   155a8:	str	r0, [fp, #-56]	; 0xffffffc8
   155ac:	mov	r0, #0
   155b0:	b	15628 <__assert_fail@plt+0x3edc>
   155b4:	mov	r0, #0
   155b8:	str	r0, [fp, #-56]	; 0xffffffc8
   155bc:	cmp	r5, r3
   155c0:	bls	155d4 <__assert_fail@plt+0x3e88>
   155c4:	ldr	r5, [fp, #-84]	; 0xffffffac
   155c8:	mov	r0, #0
   155cc:	mov	sl, r3
   155d0:	b	15628 <__assert_fail@plt+0x3edc>
   155d4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   155d8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   155dc:	add	r0, r4, r7
   155e0:	mov	r5, lr
   155e4:	mov	r6, ip
   155e8:	mov	sl, r3
   155ec:	bl	1159c <bcmp@plt>
   155f0:	ldr	r2, [sp, #92]	; 0x5c
   155f4:	cmp	r0, #0
   155f8:	ldr	r3, [fp, #-84]	; 0xffffffac
   155fc:	mov	r1, r0
   15600:	movwne	r1, #1
   15604:	orr	r1, r1, r2
   15608:	tst	r1, #1
   1560c:	beq	16138 <__assert_fail@plt+0x49ec>
   15610:	ldr	r4, [fp, #-80]	; 0xffffffb0
   15614:	clz	r0, r0
   15618:	mov	lr, r5
   1561c:	mov	ip, r6
   15620:	mov	r5, r3
   15624:	lsr	r0, r0, #5
   15628:	str	r0, [fp, #-52]	; 0xffffffcc
   1562c:	ldrb	r6, [r4, r7]
   15630:	cmp	r6, #126	; 0x7e
   15634:	bhi	15b5c <__assert_fail@plt+0x4410>
   15638:	add	r3, pc, #16
   1563c:	mov	r9, #1
   15640:	mov	r2, #110	; 0x6e
   15644:	mov	r0, #97	; 0x61
   15648:	mov	r1, #0
   1564c:	ldr	pc, [r3, r6, lsl #2]
   15650:	andeq	r5, r1, r0, asr #19
   15654:	andeq	r5, r1, ip, asr fp
   15658:	andeq	r5, r1, ip, asr fp
   1565c:	andeq	r5, r1, ip, asr fp
   15660:	andeq	r5, r1, ip, asr fp
   15664:	andeq	r5, r1, ip, asr fp
   15668:	andeq	r5, r1, ip, asr fp
   1566c:	ldrdeq	r5, [r1], -ip
   15670:	andeq	r5, r1, r0, lsr #19
   15674:	muleq	r1, r8, r9
   15678:	andeq	r5, r1, ip, lsr #19
   1567c:	andeq	r5, r1, r4, asr #21
   15680:	muleq	r1, r0, r9
   15684:	andeq	r5, r1, r8, lsr #19
   15688:	andeq	r5, r1, ip, asr fp
   1568c:	andeq	r5, r1, ip, asr fp
   15690:	andeq	r5, r1, ip, asr fp
   15694:	andeq	r5, r1, ip, asr fp
   15698:	andeq	r5, r1, ip, asr fp
   1569c:	andeq	r5, r1, ip, asr fp
   156a0:	andeq	r5, r1, ip, asr fp
   156a4:	andeq	r5, r1, ip, asr fp
   156a8:	andeq	r5, r1, ip, asr fp
   156ac:	andeq	r5, r1, ip, asr fp
   156b0:	andeq	r5, r1, ip, asr fp
   156b4:	andeq	r5, r1, ip, asr fp
   156b8:	andeq	r5, r1, ip, asr fp
   156bc:	andeq	r5, r1, ip, asr fp
   156c0:	andeq	r5, r1, ip, asr fp
   156c4:	andeq	r5, r1, ip, asr fp
   156c8:	andeq	r5, r1, ip, asr fp
   156cc:	andeq	r5, r1, ip, asr fp
   156d0:	andeq	r5, r1, r0, asr #18
   156d4:	andeq	r5, r1, r4, asr #18
   156d8:	andeq	r5, r1, r4, asr #18
   156dc:	andeq	r5, r1, r8, lsr #18
   156e0:	andeq	r5, r1, r4, asr #18
   156e4:	andeq	r5, r1, ip, asr #16
   156e8:	andeq	r5, r1, r4, asr #18
   156ec:	andeq	r5, r1, ip, asr #21
   156f0:	andeq	r5, r1, r4, asr #18
   156f4:	andeq	r5, r1, r4, asr #18
   156f8:	andeq	r5, r1, r4, asr #18
   156fc:	andeq	r5, r1, ip, asr #16
   15700:	andeq	r5, r1, ip, asr #16
   15704:	andeq	r5, r1, ip, asr #16
   15708:	andeq	r5, r1, ip, asr #16
   1570c:	andeq	r5, r1, ip, asr #16
   15710:	andeq	r5, r1, ip, asr #16
   15714:	andeq	r5, r1, ip, asr #16
   15718:	andeq	r5, r1, ip, asr #16
   1571c:	andeq	r5, r1, ip, asr #16
   15720:	andeq	r5, r1, ip, asr #16
   15724:	andeq	r5, r1, ip, asr #16
   15728:	andeq	r5, r1, ip, asr #16
   1572c:	andeq	r5, r1, ip, asr #16
   15730:	andeq	r5, r1, ip, asr #16
   15734:	andeq	r5, r1, ip, asr #16
   15738:	andeq	r5, r1, ip, asr #16
   1573c:	andeq	r5, r1, r4, asr #18
   15740:	andeq	r5, r1, r4, asr #18
   15744:	andeq	r5, r1, r4, asr #18
   15748:	andeq	r5, r1, r4, asr #18
   1574c:	muleq	r1, r8, sl
   15750:	andeq	r5, r1, ip, asr fp
   15754:	andeq	r5, r1, ip, asr #16
   15758:	andeq	r5, r1, ip, asr #16
   1575c:	andeq	r5, r1, ip, asr #16
   15760:	andeq	r5, r1, ip, asr #16
   15764:	andeq	r5, r1, ip, asr #16
   15768:	andeq	r5, r1, ip, asr #16
   1576c:	andeq	r5, r1, ip, asr #16
   15770:	andeq	r5, r1, ip, asr #16
   15774:	andeq	r5, r1, ip, asr #16
   15778:	andeq	r5, r1, ip, asr #16
   1577c:	andeq	r5, r1, ip, asr #16
   15780:	andeq	r5, r1, ip, asr #16
   15784:	andeq	r5, r1, ip, asr #16
   15788:	andeq	r5, r1, ip, asr #16
   1578c:	andeq	r5, r1, ip, asr #16
   15790:	andeq	r5, r1, ip, asr #16
   15794:	andeq	r5, r1, ip, asr #16
   15798:	andeq	r5, r1, ip, asr #16
   1579c:	andeq	r5, r1, ip, asr #16
   157a0:	andeq	r5, r1, ip, asr #16
   157a4:	andeq	r5, r1, ip, asr #16
   157a8:	andeq	r5, r1, ip, asr #16
   157ac:	andeq	r5, r1, ip, asr #16
   157b0:	andeq	r5, r1, ip, asr #16
   157b4:	andeq	r5, r1, ip, asr #16
   157b8:	andeq	r5, r1, ip, asr #16
   157bc:	andeq	r5, r1, r4, asr #18
   157c0:	andeq	r5, r1, ip, ror #18
   157c4:	andeq	r5, r1, ip, asr #16
   157c8:	andeq	r5, r1, r4, asr #18
   157cc:	andeq	r5, r1, ip, asr #16
   157d0:	andeq	r5, r1, r4, asr #18
   157d4:	andeq	r5, r1, ip, asr #16
   157d8:	andeq	r5, r1, ip, asr #16
   157dc:	andeq	r5, r1, ip, asr #16
   157e0:	andeq	r5, r1, ip, asr #16
   157e4:	andeq	r5, r1, ip, asr #16
   157e8:	andeq	r5, r1, ip, asr #16
   157ec:	andeq	r5, r1, ip, asr #16
   157f0:	andeq	r5, r1, ip, asr #16
   157f4:	andeq	r5, r1, ip, asr #16
   157f8:	andeq	r5, r1, ip, asr #16
   157fc:	andeq	r5, r1, ip, asr #16
   15800:	andeq	r5, r1, ip, asr #16
   15804:	andeq	r5, r1, ip, asr #16
   15808:	andeq	r5, r1, ip, asr #16
   1580c:	andeq	r5, r1, ip, asr #16
   15810:	andeq	r5, r1, ip, asr #16
   15814:	andeq	r5, r1, ip, asr #16
   15818:	andeq	r5, r1, ip, asr #16
   1581c:	andeq	r5, r1, ip, asr #16
   15820:	andeq	r5, r1, ip, asr #16
   15824:	andeq	r5, r1, ip, asr #16
   15828:	andeq	r5, r1, ip, asr #16
   1582c:	andeq	r5, r1, ip, asr #16
   15830:	andeq	r5, r1, ip, asr #16
   15834:	andeq	r5, r1, ip, asr #16
   15838:	andeq	r5, r1, ip, asr #16
   1583c:	andeq	r5, r1, r0, lsl #18
   15840:	andeq	r5, r1, r4, asr #18
   15844:	andeq	r5, r1, r0, lsl #18
   15848:	andeq	r5, r1, r8, lsr #18
   1584c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15850:	tst	r0, #1
   15854:	bne	15880 <__assert_fail@plt+0x4134>
   15858:	ldr	r1, [fp, #16]
   1585c:	ubfx	r0, r6, #5, #3
   15860:	mov	r2, #1
   15864:	ldr	r0, [r1, r0, lsl #2]
   15868:	and	r1, r6, #31
   1586c:	tst	r0, r2, lsl r1
   15870:	beq	15880 <__assert_fail@plt+0x4134>
   15874:	mov	r0, r6
   15878:	mov	r1, r9
   1587c:	b	15894 <__assert_fail@plt+0x4148>
   15880:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15884:	mov	r1, r9
   15888:	cmp	r0, #0
   1588c:	mov	r0, r6
   15890:	beq	15fe0 <__assert_fail@plt+0x4894>
   15894:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15898:	tst	r2, #1
   1589c:	bne	1617c <__assert_fail@plt+0x4a30>
   158a0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   158a4:	subs	r2, r2, #2
   158a8:	movwne	r2, #1
   158ac:	orr	r2, r2, lr
   158b0:	tst	r2, #1
   158b4:	bne	158ec <__assert_fail@plt+0x41a0>
   158b8:	cmp	r8, ip
   158bc:	mov	lr, #1
   158c0:	movcc	r2, #39	; 0x27
   158c4:	strbcc	r2, [r5, r8]
   158c8:	add	r2, r8, #1
   158cc:	cmp	r2, ip
   158d0:	movcc	r3, #36	; 0x24
   158d4:	strbcc	r3, [r5, r2]
   158d8:	add	r2, r8, #2
   158dc:	add	r8, r8, #3
   158e0:	cmp	r2, ip
   158e4:	movcc	r3, #39	; 0x27
   158e8:	strbcc	r3, [r5, r2]
   158ec:	cmp	r8, ip
   158f0:	movcc	r2, #92	; 0x5c
   158f4:	strbcc	r2, [r5, r8]
   158f8:	add	r8, r8, #1
   158fc:	b	16020 <__assert_fail@plt+0x48d4>
   15900:	cmp	sl, #1
   15904:	beq	15928 <__assert_fail@plt+0x41dc>
   15908:	mov	r9, #0
   1590c:	cmn	sl, #1
   15910:	bne	15934 <__assert_fail@plt+0x41e8>
   15914:	ldrb	r0, [r4, #1]
   15918:	cmp	r0, #0
   1591c:	beq	15928 <__assert_fail@plt+0x41dc>
   15920:	mvn	sl, #0
   15924:	b	15934 <__assert_fail@plt+0x41e8>
   15928:	mov	r9, #0
   1592c:	cmp	r7, #0
   15930:	beq	15940 <__assert_fail@plt+0x41f4>
   15934:	mov	r0, #0
   15938:	str	r0, [fp, #-56]	; 0xffffffc8
   1593c:	b	1584c <__assert_fail@plt+0x4100>
   15940:	mov	r1, #1
   15944:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15948:	cmp	r0, #2
   1594c:	bne	15964 <__assert_fail@plt+0x4218>
   15950:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15954:	mov	r9, r1
   15958:	tst	r0, #1
   1595c:	beq	1584c <__assert_fail@plt+0x4100>
   15960:	b	1617c <__assert_fail@plt+0x4a30>
   15964:	mov	r9, r1
   15968:	b	1584c <__assert_fail@plt+0x4100>
   1596c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15970:	cmp	r0, #2
   15974:	bne	15bb8 <__assert_fail@plt+0x446c>
   15978:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1597c:	tst	r0, #1
   15980:	bne	1617c <__assert_fail@plt+0x4a30>
   15984:	mov	r0, #0
   15988:	str	r0, [fp, #-56]	; 0xffffffc8
   1598c:	b	15bd0 <__assert_fail@plt+0x4484>
   15990:	mov	r0, #102	; 0x66
   15994:	b	15bdc <__assert_fail@plt+0x4490>
   15998:	mov	r2, #116	; 0x74
   1599c:	b	159ac <__assert_fail@plt+0x4260>
   159a0:	mov	r0, #98	; 0x62
   159a4:	b	15bdc <__assert_fail@plt+0x4490>
   159a8:	mov	r2, #114	; 0x72
   159ac:	ldr	r0, [sp, #68]	; 0x44
   159b0:	tst	r0, #1
   159b4:	mov	r0, r2
   159b8:	bne	15bdc <__assert_fail@plt+0x4490>
   159bc:	b	1617c <__assert_fail@plt+0x4a30>
   159c0:	ldr	r0, [sp, #84]	; 0x54
   159c4:	tst	r0, #1
   159c8:	beq	15bfc <__assert_fail@plt+0x44b0>
   159cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   159d0:	tst	r0, #1
   159d4:	bne	16268 <__assert_fail@plt+0x4b1c>
   159d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   159dc:	mov	r2, sl
   159e0:	subs	r0, r0, #2
   159e4:	movwne	r0, #1
   159e8:	orr	r0, r0, lr
   159ec:	tst	r0, #1
   159f0:	bne	15a28 <__assert_fail@plt+0x42dc>
   159f4:	cmp	r8, ip
   159f8:	mov	lr, #1
   159fc:	movcc	r0, #39	; 0x27
   15a00:	strbcc	r0, [r5, r8]
   15a04:	add	r0, r8, #1
   15a08:	cmp	r0, ip
   15a0c:	movcc	r1, #36	; 0x24
   15a10:	strbcc	r1, [r5, r0]
   15a14:	add	r0, r8, #2
   15a18:	add	r8, r8, #3
   15a1c:	cmp	r0, ip
   15a20:	movcc	r1, #39	; 0x27
   15a24:	strbcc	r1, [r5, r0]
   15a28:	mov	r1, #1
   15a2c:	cmp	r8, ip
   15a30:	mov	r9, #0
   15a34:	mov	r6, #48	; 0x30
   15a38:	str	r1, [fp, #-56]	; 0xffffffc8
   15a3c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15a40:	movcc	r0, #92	; 0x5c
   15a44:	strbcc	r0, [r5, r8]
   15a48:	add	r0, r8, #1
   15a4c:	cmp	r1, #2
   15a50:	beq	15d58 <__assert_fail@plt+0x460c>
   15a54:	add	r1, r7, #1
   15a58:	cmp	r1, r2
   15a5c:	bcs	15d58 <__assert_fail@plt+0x460c>
   15a60:	ldrb	r1, [r4, r1]
   15a64:	sub	r1, r1, #48	; 0x30
   15a68:	uxtb	r1, r1
   15a6c:	cmp	r1, #9
   15a70:	bhi	15d58 <__assert_fail@plt+0x460c>
   15a74:	cmp	r0, ip
   15a78:	movcc	r1, #48	; 0x30
   15a7c:	strbcc	r1, [r5, r0]
   15a80:	add	r0, r8, #2
   15a84:	add	r8, r8, #3
   15a88:	cmp	r0, ip
   15a8c:	movcc	r1, #48	; 0x30
   15a90:	strbcc	r1, [r5, r0]
   15a94:	b	1584c <__assert_fail@plt+0x4100>
   15a98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15a9c:	mov	r6, #63	; 0x3f
   15aa0:	cmp	r0, #5
   15aa4:	beq	15d60 <__assert_fail@plt+0x4614>
   15aa8:	mov	r1, #0
   15aac:	cmp	r0, #2
   15ab0:	str	r1, [fp, #-56]	; 0xffffffc8
   15ab4:	bne	15e14 <__assert_fail@plt+0x46c8>
   15ab8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15abc:	mov	r9, #0
   15ac0:	b	15958 <__assert_fail@plt+0x420c>
   15ac4:	mov	r0, #118	; 0x76
   15ac8:	b	15bdc <__assert_fail@plt+0x4490>
   15acc:	mov	r0, #1
   15ad0:	mov	r6, #39	; 0x27
   15ad4:	str	r0, [sp, #60]	; 0x3c
   15ad8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15adc:	cmp	r0, #2
   15ae0:	bne	15b54 <__assert_fail@plt+0x4408>
   15ae4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15ae8:	tst	r0, #1
   15aec:	bne	1617c <__assert_fail@plt+0x4a30>
   15af0:	ldr	r2, [sp, #56]	; 0x38
   15af4:	clz	r1, ip
   15af8:	mov	lr, #0
   15afc:	lsr	r1, r1, #5
   15b00:	cmp	r2, #0
   15b04:	mov	r0, r2
   15b08:	movwne	r0, #1
   15b0c:	orrs	r0, r0, r1
   15b10:	moveq	r2, ip
   15b14:	moveq	ip, r0
   15b18:	cmp	r8, ip
   15b1c:	str	r2, [sp, #56]	; 0x38
   15b20:	movcc	r0, #39	; 0x27
   15b24:	strbcc	r0, [r5, r8]
   15b28:	add	r0, r8, #1
   15b2c:	cmp	r0, ip
   15b30:	movcc	r1, #92	; 0x5c
   15b34:	strbcc	r1, [r5, r0]
   15b38:	add	r0, r8, #2
   15b3c:	add	r8, r8, #3
   15b40:	cmp	r0, ip
   15b44:	movcc	r1, #39	; 0x27
   15b48:	strbcc	r1, [r5, r0]
   15b4c:	mov	r0, #0
   15b50:	str	r0, [fp, #-56]	; 0xffffffc8
   15b54:	mov	r9, #1
   15b58:	b	1584c <__assert_fail@plt+0x4100>
   15b5c:	ldr	r0, [sp, #40]	; 0x28
   15b60:	str	lr, [sp, #44]	; 0x2c
   15b64:	str	ip, [sp, #88]	; 0x58
   15b68:	cmp	r0, #1
   15b6c:	bne	15c1c <__assert_fail@plt+0x44d0>
   15b70:	str	sl, [sp, #36]	; 0x24
   15b74:	bl	11584 <__ctype_b_loc@plt>
   15b78:	ldr	r0, [r0]
   15b7c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   15b80:	mov	r1, #1
   15b84:	add	r0, r0, r6, lsl #1
   15b88:	ldrb	r0, [r0, #1]
   15b8c:	ubfx	r9, r0, #6, #1
   15b90:	ldr	r0, [sp, #52]	; 0x34
   15b94:	ldr	lr, [sp, #44]	; 0x2c
   15b98:	cmp	r1, #1
   15b9c:	orr	r3, r9, r0
   15ba0:	bhi	15e1c <__assert_fail@plt+0x46d0>
   15ba4:	tst	r3, #1
   15ba8:	beq	15e1c <__assert_fail@plt+0x46d0>
   15bac:	ldr	sl, [sp, #36]	; 0x24
   15bb0:	ldr	ip, [sp, #88]	; 0x58
   15bb4:	b	1584c <__assert_fail@plt+0x4100>
   15bb8:	ldr	r1, [sp, #48]	; 0x30
   15bbc:	mov	r0, #0
   15bc0:	str	r0, [fp, #-56]	; 0xffffffc8
   15bc4:	mov	r0, #92	; 0x5c
   15bc8:	cmp	r1, #0
   15bcc:	beq	15bdc <__assert_fail@plt+0x4490>
   15bd0:	mov	r6, #92	; 0x5c
   15bd4:	mov	r9, #0
   15bd8:	b	15fe0 <__assert_fail@plt+0x4894>
   15bdc:	mov	r1, #0
   15be0:	mov	r9, #0
   15be4:	str	r1, [fp, #-56]	; 0xffffffc8
   15be8:	ldr	r1, [sp, #84]	; 0x54
   15bec:	tst	r1, #1
   15bf0:	mov	r1, #0
   15bf4:	beq	1584c <__assert_fail@plt+0x4100>
   15bf8:	b	15894 <__assert_fail@plt+0x4148>
   15bfc:	ldr	r0, [sp, #32]
   15c00:	mov	r6, #0
   15c04:	mov	r9, #0
   15c08:	cmp	r0, #0
   15c0c:	mov	r0, #0
   15c10:	str	r0, [fp, #-56]	; 0xffffffc8
   15c14:	beq	1584c <__assert_fail@plt+0x4100>
   15c18:	b	16038 <__assert_fail@plt+0x48ec>
   15c1c:	mov	r0, #0
   15c20:	cmn	sl, #1
   15c24:	sub	r3, fp, #40	; 0x28
   15c28:	str	r0, [fp, #-36]	; 0xffffffdc
   15c2c:	str	r0, [fp, #-40]	; 0xffffffd8
   15c30:	bne	15c48 <__assert_fail@plt+0x44fc>
   15c34:	mov	r0, r4
   15c38:	bl	115a8 <strlen@plt>
   15c3c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   15c40:	sub	r3, fp, #40	; 0x28
   15c44:	mov	sl, r0
   15c48:	ldr	r0, [sp, #72]	; 0x48
   15c4c:	mov	r9, #1
   15c50:	mov	r1, #0
   15c54:	str	sl, [sp, #36]	; 0x24
   15c58:	add	r0, r0, r7
   15c5c:	str	r0, [sp, #20]
   15c60:	add	r0, r1, r7
   15c64:	str	r1, [sp, #24]
   15c68:	add	r1, r4, r0
   15c6c:	mov	r4, r0
   15c70:	sub	r2, sl, r0
   15c74:	sub	r0, fp, #44	; 0x2c
   15c78:	bl	18100 <__assert_fail@plt+0x69b4>
   15c7c:	cmp	r0, #0
   15c80:	beq	1608c <__assert_fail@plt+0x4940>
   15c84:	cmn	r0, #1
   15c88:	beq	16044 <__assert_fail@plt+0x48f8>
   15c8c:	ldr	r2, [sp, #36]	; 0x24
   15c90:	cmn	r0, #2
   15c94:	beq	1604c <__assert_fail@plt+0x4900>
   15c98:	ldr	r2, [sp, #64]	; 0x40
   15c9c:	ldr	ip, [sp, #88]	; 0x58
   15ca0:	ldr	r4, [sp, #84]	; 0x54
   15ca4:	ldr	lr, [fp, #-48]	; 0xffffffd0
   15ca8:	cmp	r0, #2
   15cac:	mov	r1, #0
   15cb0:	movwcc	r1, #1
   15cb4:	eor	r2, r2, #1
   15cb8:	orrs	r1, r2, r1
   15cbc:	bne	15d0c <__assert_fail@plt+0x45c0>
   15cc0:	ldr	r1, [sp, #24]
   15cc4:	ldr	r2, [sp, #20]
   15cc8:	add	r1, r2, r1
   15ccc:	sub	r2, r0, #1
   15cd0:	ldrb	r3, [r1]
   15cd4:	sub	r5, r3, #94	; 0x5e
   15cd8:	cmp	r5, #30
   15cdc:	bhi	15cf4 <__assert_fail@plt+0x45a8>
   15ce0:	mov	r4, #1
   15ce4:	mov	sl, #1073741829	; 0x40000005
   15ce8:	tst	sl, r4, lsl r5
   15cec:	ldr	r4, [sp, #84]	; 0x54
   15cf0:	bne	16154 <__assert_fail@plt+0x4a08>
   15cf4:	sub	r3, r3, #91	; 0x5b
   15cf8:	cmp	r3, #2
   15cfc:	bcc	16154 <__assert_fail@plt+0x4a08>
   15d00:	add	r1, r1, #1
   15d04:	subs	r2, r2, #1
   15d08:	bne	15cd0 <__assert_fail@plt+0x4584>
   15d0c:	ldr	r5, [sp, #24]
   15d10:	str	lr, [fp, #-48]	; 0xffffffd0
   15d14:	add	r5, r0, r5
   15d18:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15d1c:	bl	114a0 <iswprint@plt>
   15d20:	cmp	r0, #0
   15d24:	sub	r4, fp, #40	; 0x28
   15d28:	movwne	r0, #1
   15d2c:	and	r9, r9, r0
   15d30:	mov	r0, r4
   15d34:	bl	11440 <mbsinit@plt>
   15d38:	mov	r1, r5
   15d3c:	mov	r3, r4
   15d40:	ldr	sl, [sp, #36]	; 0x24
   15d44:	ldr	r5, [fp, #-84]	; 0xffffffac
   15d48:	ldr	r4, [fp, #-80]	; 0xffffffb0
   15d4c:	cmp	r0, #0
   15d50:	beq	15c60 <__assert_fail@plt+0x4514>
   15d54:	b	15b90 <__assert_fail@plt+0x4444>
   15d58:	mov	r8, r0
   15d5c:	b	1584c <__assert_fail@plt+0x4100>
   15d60:	mov	r0, #0
   15d64:	str	r0, [fp, #-56]	; 0xffffffc8
   15d68:	ldr	r0, [sp, #28]
   15d6c:	cmp	r0, #0
   15d70:	beq	15e14 <__assert_fail@plt+0x46c8>
   15d74:	add	r0, r7, #2
   15d78:	mov	r1, sl
   15d7c:	cmp	r0, sl
   15d80:	bcs	15e14 <__assert_fail@plt+0x46c8>
   15d84:	add	r1, r7, r4
   15d88:	ldrb	r1, [r1, #1]
   15d8c:	cmp	r1, #63	; 0x3f
   15d90:	bne	15e14 <__assert_fail@plt+0x46c8>
   15d94:	ldrb	r9, [r4, r0]
   15d98:	sub	r2, r9, #33	; 0x21
   15d9c:	cmp	r2, #29
   15da0:	bhi	15e14 <__assert_fail@plt+0x46c8>
   15da4:	mov	r1, r4
   15da8:	movw	r4, #20929	; 0x51c1
   15dac:	mov	r3, #1
   15db0:	movt	r4, #14336	; 0x3800
   15db4:	tst	r4, r3, lsl r2
   15db8:	beq	160a0 <__assert_fail@plt+0x4954>
   15dbc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15dc0:	tst	r2, #1
   15dc4:	bne	16270 <__assert_fail@plt+0x4b24>
   15dc8:	cmp	r8, ip
   15dcc:	mov	r4, r1
   15dd0:	mov	r7, r0
   15dd4:	mov	r6, r9
   15dd8:	movcc	r2, #63	; 0x3f
   15ddc:	strbcc	r2, [r5, r8]
   15de0:	add	r2, r8, #1
   15de4:	cmp	r2, ip
   15de8:	movcc	r3, #34	; 0x22
   15dec:	strbcc	r3, [r5, r2]
   15df0:	add	r2, r8, #2
   15df4:	cmp	r2, ip
   15df8:	movcc	r3, #34	; 0x22
   15dfc:	strbcc	r3, [r5, r2]
   15e00:	add	r2, r8, #3
   15e04:	add	r8, r8, #4
   15e08:	cmp	r2, ip
   15e0c:	movcc	r3, #63	; 0x3f
   15e10:	strbcc	r3, [r5, r2]
   15e14:	mov	r9, #0
   15e18:	b	1584c <__assert_fail@plt+0x4100>
   15e1c:	ldr	sl, [sp, #36]	; 0x24
   15e20:	add	r0, r1, r7
   15e24:	mov	r2, #0
   15e28:	str	r3, [sp, #24]
   15e2c:	str	r0, [fp, #-56]	; 0xffffffc8
   15e30:	tst	r3, #1
   15e34:	beq	15e60 <__assert_fail@plt+0x4714>
   15e38:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15e3c:	tst	r0, #1
   15e40:	beq	15f28 <__assert_fail@plt+0x47dc>
   15e44:	ldr	r1, [sp, #88]	; 0x58
   15e48:	mov	r0, r3
   15e4c:	cmp	r8, r1
   15e50:	movcc	r1, #92	; 0x5c
   15e54:	strbcc	r1, [r5, r8]
   15e58:	add	r8, r8, #1
   15e5c:	b	15f2c <__assert_fail@plt+0x47e0>
   15e60:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15e64:	tst	r1, #1
   15e68:	bne	16178 <__assert_fail@plt+0x4a2c>
   15e6c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15e70:	subs	r2, r1, #2
   15e74:	movwne	r2, #1
   15e78:	orr	r2, r2, lr
   15e7c:	tst	r2, #1
   15e80:	bne	15ec4 <__assert_fail@plt+0x4778>
   15e84:	ldr	r1, [sp, #88]	; 0x58
   15e88:	add	r2, r8, #1
   15e8c:	mov	lr, #1
   15e90:	cmp	r8, r1
   15e94:	movcc	r1, #39	; 0x27
   15e98:	strbcc	r1, [r5, r8]
   15e9c:	ldr	r1, [sp, #88]	; 0x58
   15ea0:	cmp	r2, r1
   15ea4:	movcc	r1, #36	; 0x24
   15ea8:	strbcc	r1, [r5, r2]
   15eac:	ldr	r1, [sp, #88]	; 0x58
   15eb0:	add	r2, r8, #2
   15eb4:	add	r8, r8, #3
   15eb8:	cmp	r2, r1
   15ebc:	movcc	r1, #39	; 0x27
   15ec0:	strbcc	r1, [r5, r2]
   15ec4:	ldr	r1, [sp, #88]	; 0x58
   15ec8:	add	r2, r8, #1
   15ecc:	mov	r0, r3
   15ed0:	cmp	r8, r1
   15ed4:	movcc	r1, #92	; 0x5c
   15ed8:	strbcc	r1, [r5, r8]
   15edc:	ldr	r1, [sp, #88]	; 0x58
   15ee0:	cmp	r2, r1
   15ee4:	bcs	15ef8 <__assert_fail@plt+0x47ac>
   15ee8:	uxtb	r3, r6
   15eec:	mov	r1, #48	; 0x30
   15ef0:	orr	r3, r1, r3, lsr #6
   15ef4:	strb	r3, [r5, r2]
   15ef8:	ldr	r1, [sp, #88]	; 0x58
   15efc:	add	r2, r8, #2
   15f00:	add	r8, r8, #3
   15f04:	cmp	r2, r1
   15f08:	lsrcc	r3, r6, #3
   15f0c:	movcc	r1, #6
   15f10:	bficc	r3, r1, #3, #29
   15f14:	mov	r1, #6
   15f18:	bfi	r6, r1, #3, #29
   15f1c:	strbcc	r3, [r5, r2]
   15f20:	mov	r2, #1
   15f24:	b	15f34 <__assert_fail@plt+0x47e8>
   15f28:	mov	r0, r3
   15f2c:	mov	r1, #0
   15f30:	str	r1, [fp, #-52]	; 0xffffffcc
   15f34:	mov	ip, r2
   15f38:	and	r1, r2, #1
   15f3c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15f40:	add	r3, r7, #1
   15f44:	cmp	r2, r3
   15f48:	bls	15fd0 <__assert_fail@plt+0x4884>
   15f4c:	cmp	r1, #0
   15f50:	mvn	r5, lr
   15f54:	movwne	r1, #1
   15f58:	orr	r5, r5, r1
   15f5c:	tst	r5, #1
   15f60:	bne	15fa4 <__assert_fail@plt+0x4858>
   15f64:	ldr	r1, [sp, #88]	; 0x58
   15f68:	ldr	r5, [fp, #-84]	; 0xffffffac
   15f6c:	mov	r2, r4
   15f70:	ldr	r4, [sp, #88]	; 0x58
   15f74:	ldr	r0, [sp, #24]
   15f78:	mov	lr, #0
   15f7c:	cmp	r8, r1
   15f80:	movcc	r1, #39	; 0x27
   15f84:	strbcc	r1, [r5, r8]
   15f88:	add	r1, r8, #1
   15f8c:	add	r8, r8, #2
   15f90:	cmp	r1, r4
   15f94:	movcc	r4, #39	; 0x27
   15f98:	strbcc	r4, [r5, r1]
   15f9c:	mov	r4, r2
   15fa0:	b	15fa8 <__assert_fail@plt+0x485c>
   15fa4:	ldr	r5, [fp, #-84]	; 0xffffffac
   15fa8:	ldr	r1, [sp, #88]	; 0x58
   15fac:	mov	r2, ip
   15fb0:	cmp	r8, r1
   15fb4:	ldr	r1, [sp, #72]	; 0x48
   15fb8:	strbcc	r6, [r5, r8]
   15fbc:	add	r8, r8, #1
   15fc0:	ldrb	r6, [r1, r7]
   15fc4:	mov	r7, r3
   15fc8:	mov	r3, r0
   15fcc:	b	15e30 <__assert_fail@plt+0x46e4>
   15fd0:	ldr	ip, [sp, #88]	; 0x58
   15fd4:	cmp	r1, #0
   15fd8:	movwne	r1, #1
   15fdc:	str	r1, [fp, #-56]	; 0xffffffc8
   15fe0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15fe4:	cmp	r0, #0
   15fe8:	bne	16018 <__assert_fail@plt+0x48cc>
   15fec:	tst	lr, #1
   15ff0:	beq	16018 <__assert_fail@plt+0x48cc>
   15ff4:	cmp	r8, ip
   15ff8:	mov	lr, #0
   15ffc:	movcc	r0, #39	; 0x27
   16000:	strbcc	r0, [r5, r8]
   16004:	add	r0, r8, #1
   16008:	add	r8, r8, #2
   1600c:	cmp	r0, ip
   16010:	movcc	r1, #39	; 0x27
   16014:	strbcc	r1, [r5, r0]
   16018:	mov	r1, r9
   1601c:	mov	r0, r6
   16020:	cmp	r8, ip
   16024:	strbcc	r0, [r5, r8]
   16028:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1602c:	add	r8, r8, #1
   16030:	and	r0, r0, r1
   16034:	str	r0, [fp, #-48]	; 0xffffffd0
   16038:	mov	r3, sl
   1603c:	add	r7, r7, #1
   16040:	b	15530 <__assert_fail@plt+0x3de4>
   16044:	mov	r9, #0
   16048:	b	1608c <__assert_fail@plt+0x4940>
   1604c:	mov	r9, #0
   16050:	cmp	r2, r4
   16054:	bls	1608c <__assert_fail@plt+0x4940>
   16058:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1605c:	ldr	r1, [sp, #24]
   16060:	add	r0, r4, r7
   16064:	mov	r3, r1
   16068:	ldrb	r1, [r0, r1]
   1606c:	cmp	r1, #0
   16070:	beq	16098 <__assert_fail@plt+0x494c>
   16074:	add	r3, r3, #1
   16078:	add	r1, r7, r3
   1607c:	cmp	r1, r2
   16080:	mov	r1, r3
   16084:	bcc	16064 <__assert_fail@plt+0x4918>
   16088:	b	15b90 <__assert_fail@plt+0x4444>
   1608c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16090:	ldr	r1, [sp, #24]
   16094:	b	15b90 <__assert_fail@plt+0x4444>
   16098:	mov	r1, r3
   1609c:	b	15b90 <__assert_fail@plt+0x4444>
   160a0:	mov	r9, #0
   160a4:	mov	r4, r1
   160a8:	b	1584c <__assert_fail@plt+0x4100>
   160ac:	mov	sl, r7
   160b0:	b	160b8 <__assert_fail@plt+0x496c>
   160b4:	mvn	sl, #0
   160b8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   160bc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   160c0:	eor	r0, r1, #2
   160c4:	orr	r0, r0, r8
   160c8:	clz	r0, r0
   160cc:	lsr	r0, r0, #5
   160d0:	tst	r2, r0
   160d4:	bne	1617c <__assert_fail@plt+0x4a30>
   160d8:	subs	r0, r1, #2
   160dc:	movwne	r0, #1
   160e0:	orr	r0, r2, r0
   160e4:	tst	r0, #1
   160e8:	ldreq	r0, [sp, #60]	; 0x3c
   160ec:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   160f0:	eoreq	r0, r0, #1
   160f4:	tsteq	r0, #1
   160f8:	bne	16210 <__assert_fail@plt+0x4ac4>
   160fc:	tst	r1, #1
   16100:	bne	161dc <__assert_fail@plt+0x4a90>
   16104:	ldr	r6, [sp, #56]	; 0x38
   16108:	mov	r9, #0
   1610c:	cmp	r6, #0
   16110:	beq	16208 <__assert_fail@plt+0x4abc>
   16114:	ldr	r0, [sp, #84]	; 0x54
   16118:	mov	r1, #0
   1611c:	mov	r7, #2
   16120:	cmp	ip, #0
   16124:	str	r1, [fp, #-48]	; 0xffffffd0
   16128:	mov	r1, #0
   1612c:	str	r1, [fp, #-76]	; 0xffffffb4
   16130:	beq	15298 <__assert_fail@plt+0x3b4c>
   16134:	b	16210 <__assert_fail@plt+0x4ac4>
   16138:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1613c:	ldr	r1, [fp, #12]
   16140:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16144:	mov	r5, r3
   16148:	mov	ip, r6
   1614c:	mov	r3, sl
   16150:	b	161a0 <__assert_fail@plt+0x4a54>
   16154:	tst	r4, #1
   16158:	ldr	r5, [fp, #-84]	; 0xffffffac
   1615c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16160:	ldr	r1, [fp, #12]
   16164:	ldr	r3, [sp, #36]	; 0x24
   16168:	mov	r0, #2
   1616c:	movwne	r0, #4
   16170:	mov	r2, r0
   16174:	b	161a0 <__assert_fail@plt+0x4a54>
   16178:	ldr	ip, [sp, #88]	; 0x58
   1617c:	ldr	r1, [sp, #84]	; 0x54
   16180:	mov	r0, #2
   16184:	tst	r1, #1
   16188:	movwne	r0, #4
   1618c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16190:	ldr	r1, [fp, #12]
   16194:	mov	r3, sl
   16198:	cmp	r2, #2
   1619c:	moveq	r2, r0
   161a0:	mov	r0, #0
   161a4:	bic	r1, r1, #2
   161a8:	str	r2, [sp]
   161ac:	mov	r2, r4
   161b0:	str	r0, [sp, #8]
   161b4:	ldr	r0, [sp, #76]	; 0x4c
   161b8:	str	r1, [sp, #4]
   161bc:	mov	r1, ip
   161c0:	str	r0, [sp, #12]
   161c4:	ldr	r0, [sp, #80]	; 0x50
   161c8:	str	r0, [sp, #16]
   161cc:	mov	r0, r5
   161d0:	bl	1520c <__assert_fail@plt+0x3ac0>
   161d4:	mov	r8, r0
   161d8:	b	1625c <__assert_fail@plt+0x4b10>
   161dc:	mov	r0, #5
   161e0:	ldr	r1, [sp, #56]	; 0x38
   161e4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   161e8:	mov	r3, sl
   161ec:	str	r0, [sp]
   161f0:	ldr	r0, [fp, #12]
   161f4:	str	r0, [sp, #4]
   161f8:	ldr	r0, [fp, #16]
   161fc:	str	r0, [sp, #8]
   16200:	ldr	r0, [sp, #76]	; 0x4c
   16204:	b	161c0 <__assert_fail@plt+0x4a74>
   16208:	mov	r0, #0
   1620c:	str	r0, [fp, #-76]	; 0xffffffb4
   16210:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16214:	cmp	r1, #0
   16218:	beq	16250 <__assert_fail@plt+0x4b04>
   1621c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16220:	tst	r0, #1
   16224:	bne	16250 <__assert_fail@plt+0x4b04>
   16228:	ldrb	r0, [r1]
   1622c:	cmp	r0, #0
   16230:	beq	16250 <__assert_fail@plt+0x4b04>
   16234:	add	r1, r1, #1
   16238:	cmp	r8, ip
   1623c:	strbcc	r0, [r5, r8]
   16240:	add	r8, r8, #1
   16244:	ldrb	r0, [r1], #1
   16248:	cmp	r0, #0
   1624c:	bne	16238 <__assert_fail@plt+0x4aec>
   16250:	cmp	r8, ip
   16254:	movcc	r0, #0
   16258:	strbcc	r0, [r5, r8]
   1625c:	mov	r0, r8
   16260:	sub	sp, fp, #28
   16264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16268:	mov	r0, #4
   1626c:	b	1618c <__assert_fail@plt+0x4a40>
   16270:	mov	r4, r1
   16274:	b	1617c <__assert_fail@plt+0x4a30>
   16278:	bl	11728 <abort@plt>
   1627c:	mov	r3, r2
   16280:	mov	r2, #0
   16284:	b	16288 <__assert_fail@plt+0x4b3c>
   16288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1628c:	add	fp, sp, #28
   16290:	sub	sp, sp, #36	; 0x24
   16294:	movw	r8, #42304	; 0xa540
   16298:	cmp	r3, #0
   1629c:	mov	r4, r2
   162a0:	str	r2, [sp, #24]
   162a4:	mov	r5, r1
   162a8:	mov	r6, r0
   162ac:	str	r0, [sp, #20]
   162b0:	movt	r8, #2
   162b4:	movne	r8, r3
   162b8:	bl	115f0 <__errno_location@plt>
   162bc:	str	r0, [sp, #28]
   162c0:	ldr	r1, [r8, #40]	; 0x28
   162c4:	ldr	r2, [r8, #44]	; 0x2c
   162c8:	ldr	r7, [r0]
   162cc:	cmp	r4, #0
   162d0:	add	sl, r8, #8
   162d4:	mov	r0, #0
   162d8:	ldm	r8, {r3, r9}
   162dc:	orreq	r9, r9, #1
   162e0:	stm	sp, {r3, r9, sl}
   162e4:	str	r1, [sp, #12]
   162e8:	str	r2, [sp, #16]
   162ec:	mov	r1, #0
   162f0:	mov	r2, r6
   162f4:	mov	r3, r5
   162f8:	str	r7, [sp, #32]
   162fc:	mov	r7, r5
   16300:	bl	1520c <__assert_fail@plt+0x3ac0>
   16304:	add	r4, r0, #1
   16308:	mov	r5, r0
   1630c:	mov	r0, r4
   16310:	bl	17378 <__assert_fail@plt+0x5c2c>
   16314:	mov	r6, r0
   16318:	ldr	r0, [r8]
   1631c:	ldr	r2, [r8, #44]	; 0x2c
   16320:	ldr	r1, [r8, #40]	; 0x28
   16324:	mov	r3, r7
   16328:	stm	sp, {r0, r9, sl}
   1632c:	str	r2, [sp, #16]
   16330:	ldr	r2, [sp, #20]
   16334:	str	r1, [sp, #12]
   16338:	mov	r0, r6
   1633c:	mov	r1, r4
   16340:	bl	1520c <__assert_fail@plt+0x3ac0>
   16344:	ldr	r0, [sp, #24]
   16348:	ldr	r1, [sp, #32]
   1634c:	ldr	r2, [sp, #28]
   16350:	cmp	r0, #0
   16354:	str	r1, [r2]
   16358:	strne	r5, [r0]
   1635c:	mov	r0, r6
   16360:	sub	sp, fp, #28
   16364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16368:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1636c:	add	fp, sp, #24
   16370:	movw	r5, #41332	; 0xa174
   16374:	movw	r8, #41328	; 0xa170
   16378:	movt	r5, #2
   1637c:	movt	r8, #2
   16380:	ldr	r0, [r5]
   16384:	ldr	r4, [r8]
   16388:	cmp	r0, #2
   1638c:	blt	163b8 <__assert_fail@plt+0x4c6c>
   16390:	add	r7, r4, #12
   16394:	mov	r6, #0
   16398:	ldr	r0, [r7, r6, lsl #3]
   1639c:	bl	14e40 <__assert_fail@plt+0x36f4>
   163a0:	ldr	r1, [r5]
   163a4:	add	r2, r6, #2
   163a8:	add	r0, r6, #1
   163ac:	mov	r6, r0
   163b0:	cmp	r2, r1
   163b4:	blt	16398 <__assert_fail@plt+0x4c4c>
   163b8:	ldr	r0, [r4, #4]
   163bc:	movw	r9, #42352	; 0xa570
   163c0:	movw	r7, #41336	; 0xa178
   163c4:	movt	r9, #2
   163c8:	movt	r7, #2
   163cc:	cmp	r0, r9
   163d0:	beq	163e0 <__assert_fail@plt+0x4c94>
   163d4:	bl	14e40 <__assert_fail@plt+0x36f4>
   163d8:	mov	r0, #256	; 0x100
   163dc:	stm	r7, {r0, r9}
   163e0:	cmp	r4, r7
   163e4:	beq	163f4 <__assert_fail@plt+0x4ca8>
   163e8:	mov	r0, r4
   163ec:	bl	14e40 <__assert_fail@plt+0x36f4>
   163f0:	str	r7, [r8]
   163f4:	mov	r0, #1
   163f8:	str	r0, [r5]
   163fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16400:	movw	r3, #42304	; 0xa540
   16404:	mvn	r2, #0
   16408:	movt	r3, #2
   1640c:	b	16410 <__assert_fail@plt+0x4cc4>
   16410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16414:	add	fp, sp, #28
   16418:	sub	sp, sp, #44	; 0x2c
   1641c:	mov	r7, r3
   16420:	str	r2, [sp, #36]	; 0x24
   16424:	str	r1, [sp, #32]
   16428:	mov	r5, r0
   1642c:	bl	115f0 <__errno_location@plt>
   16430:	cmp	r5, #0
   16434:	bmi	165a4 <__assert_fail@plt+0x4e58>
   16438:	cmn	r5, #-2147483647	; 0x80000001
   1643c:	beq	165a4 <__assert_fail@plt+0x4e58>
   16440:	movw	r8, #41332	; 0xa174
   16444:	movw	r4, #41328	; 0xa170
   16448:	str	r0, [sp, #28]
   1644c:	ldr	r0, [r0]
   16450:	movt	r8, #2
   16454:	movt	r4, #2
   16458:	ldr	r1, [r8]
   1645c:	ldr	r6, [r4]
   16460:	str	r0, [sp, #24]
   16464:	cmp	r1, r5
   16468:	ble	16474 <__assert_fail@plt+0x4d28>
   1646c:	mov	sl, r6
   16470:	b	164e0 <__assert_fail@plt+0x4d94>
   16474:	movw	r9, #41336	; 0xa178
   16478:	mov	r0, #8
   1647c:	str	r1, [fp, #-32]	; 0xffffffe0
   16480:	sub	r1, r5, r1
   16484:	mvn	r3, #-2147483648	; 0x80000000
   16488:	movt	r9, #2
   1648c:	str	r0, [sp]
   16490:	add	r2, r1, #1
   16494:	sub	r1, fp, #32
   16498:	subs	r0, r6, r9
   1649c:	movne	r0, r6
   164a0:	bl	174a8 <__assert_fail@plt+0x5d5c>
   164a4:	mov	sl, r0
   164a8:	cmp	r6, r9
   164ac:	str	r0, [r4]
   164b0:	bne	164bc <__assert_fail@plt+0x4d70>
   164b4:	ldrd	r0, [r9]
   164b8:	stm	sl, {r0, r1}
   164bc:	ldr	r1, [r8]
   164c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   164c4:	add	r0, sl, r1, lsl #3
   164c8:	sub	r1, r2, r1
   164cc:	lsl	r2, r1, #3
   164d0:	mov	r1, #0
   164d4:	bl	11614 <memset@plt>
   164d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   164dc:	str	r0, [r8]
   164e0:	mov	r9, sl
   164e4:	ldm	r7, {r0, r1}
   164e8:	orr	r8, r1, #1
   164ec:	add	r1, r7, #8
   164f0:	ldr	r2, [r7, #40]	; 0x28
   164f4:	ldr	r3, [r7, #44]	; 0x2c
   164f8:	ldr	r6, [r9, r5, lsl #3]!
   164fc:	str	r1, [sp, #20]
   16500:	ldr	r4, [r9, #4]!
   16504:	stm	sp, {r0, r8}
   16508:	add	r0, sp, #8
   1650c:	stm	r0, {r1, r2, r3}
   16510:	ldr	r2, [sp, #32]
   16514:	ldr	r3, [sp, #36]	; 0x24
   16518:	mov	r1, r6
   1651c:	mov	r0, r4
   16520:	bl	1520c <__assert_fail@plt+0x3ac0>
   16524:	cmp	r6, r0
   16528:	bhi	1658c <__assert_fail@plt+0x4e40>
   1652c:	add	r6, r0, #1
   16530:	movw	r0, #42352	; 0xa570
   16534:	movt	r0, #2
   16538:	str	r6, [sl, r5, lsl #3]
   1653c:	cmp	r4, r0
   16540:	beq	1654c <__assert_fail@plt+0x4e00>
   16544:	mov	r0, r4
   16548:	bl	14e40 <__assert_fail@plt+0x36f4>
   1654c:	mov	r0, r6
   16550:	bl	17378 <__assert_fail@plt+0x5c2c>
   16554:	str	r0, [r9]
   16558:	mov	r4, r0
   1655c:	add	r3, sp, #8
   16560:	ldr	r0, [r7]
   16564:	ldr	r1, [r7, #40]	; 0x28
   16568:	ldr	r2, [r7, #44]	; 0x2c
   1656c:	stm	sp, {r0, r8}
   16570:	ldr	r0, [sp, #20]
   16574:	stm	r3, {r0, r1, r2}
   16578:	ldr	r2, [sp, #32]
   1657c:	ldr	r3, [sp, #36]	; 0x24
   16580:	mov	r0, r4
   16584:	mov	r1, r6
   16588:	bl	1520c <__assert_fail@plt+0x3ac0>
   1658c:	ldr	r0, [sp, #28]
   16590:	ldr	r1, [sp, #24]
   16594:	str	r1, [r0]
   16598:	mov	r0, r4
   1659c:	sub	sp, fp, #28
   165a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165a4:	bl	11728 <abort@plt>
   165a8:	movw	r3, #42304	; 0xa540
   165ac:	movt	r3, #2
   165b0:	b	16410 <__assert_fail@plt+0x4cc4>
   165b4:	movw	r3, #42304	; 0xa540
   165b8:	mov	r1, r0
   165bc:	mov	r0, #0
   165c0:	mvn	r2, #0
   165c4:	movt	r3, #2
   165c8:	b	16410 <__assert_fail@plt+0x4cc4>
   165cc:	movw	r3, #42304	; 0xa540
   165d0:	mov	r2, r1
   165d4:	mov	r1, r0
   165d8:	mov	r0, #0
   165dc:	movt	r3, #2
   165e0:	b	16410 <__assert_fail@plt+0x4cc4>
   165e4:	push	{fp, lr}
   165e8:	mov	fp, sp
   165ec:	sub	sp, sp, #48	; 0x30
   165f0:	vmov.i32	q8, #0	; 0x00000000
   165f4:	mov	ip, #32
   165f8:	mov	r3, sp
   165fc:	mov	lr, r2
   16600:	cmp	r1, #10
   16604:	add	r2, r3, #16
   16608:	vst1.64	{d16-d17}, [r3], ip
   1660c:	vst1.64	{d16-d17}, [r2]
   16610:	vst1.64	{d16-d17}, [r3]
   16614:	beq	16634 <__assert_fail@plt+0x4ee8>
   16618:	str	r1, [sp]
   1661c:	mov	r3, sp
   16620:	mov	r1, lr
   16624:	mvn	r2, #0
   16628:	bl	16410 <__assert_fail@plt+0x4cc4>
   1662c:	mov	sp, fp
   16630:	pop	{fp, pc}
   16634:	bl	11728 <abort@plt>
   16638:	push	{r4, sl, fp, lr}
   1663c:	add	fp, sp, #8
   16640:	sub	sp, sp, #48	; 0x30
   16644:	vmov.i32	q8, #0	; 0x00000000
   16648:	mov	ip, r3
   1664c:	mov	r3, sp
   16650:	mov	lr, #32
   16654:	cmp	r1, #10
   16658:	add	r4, r3, #16
   1665c:	vst1.64	{d16-d17}, [r3], lr
   16660:	vst1.64	{d16-d17}, [r4]
   16664:	vst1.64	{d16-d17}, [r3]
   16668:	beq	16688 <__assert_fail@plt+0x4f3c>
   1666c:	str	r1, [sp]
   16670:	mov	r1, r2
   16674:	mov	r3, sp
   16678:	mov	r2, ip
   1667c:	bl	16410 <__assert_fail@plt+0x4cc4>
   16680:	sub	sp, fp, #8
   16684:	pop	{r4, sl, fp, pc}
   16688:	bl	11728 <abort@plt>
   1668c:	mov	r2, r1
   16690:	mov	r1, r0
   16694:	mov	r0, #0
   16698:	b	165e4 <__assert_fail@plt+0x4e98>
   1669c:	mov	r3, r2
   166a0:	mov	r2, r1
   166a4:	mov	r1, r0
   166a8:	mov	r0, #0
   166ac:	b	16638 <__assert_fail@plt+0x4eec>
   166b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   166b4:	add	fp, sp, #24
   166b8:	sub	sp, sp, #48	; 0x30
   166bc:	movw	r8, #42304	; 0xa540
   166c0:	mov	lr, r0
   166c4:	mov	r3, sp
   166c8:	mov	ip, r1
   166cc:	movt	r8, #2
   166d0:	mov	r1, r3
   166d4:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   166d8:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   166dc:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   166e0:	stm	r1, {r0, r4, r5, r6, r7, r9}
   166e4:	ubfx	r0, r2, #5, #3
   166e8:	and	r2, r2, #31
   166ec:	mov	r4, #1
   166f0:	add	r0, r3, r0, lsl #2
   166f4:	ldr	r1, [r0, #8]
   166f8:	bic	r4, r4, r1, lsr r2
   166fc:	eor	r1, r1, r4, lsl r2
   16700:	mov	r2, ip
   16704:	str	r1, [r0, #8]
   16708:	mov	r0, #0
   1670c:	mov	r1, lr
   16710:	bl	16410 <__assert_fail@plt+0x4cc4>
   16714:	sub	sp, fp, #24
   16718:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1671c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16720:	add	fp, sp, #24
   16724:	sub	sp, sp, #48	; 0x30
   16728:	movw	lr, #42304	; 0xa540
   1672c:	mov	ip, r0
   16730:	mov	r3, sp
   16734:	movt	lr, #2
   16738:	mov	r2, r3
   1673c:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   16740:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   16744:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   16748:	stm	r2, {r0, r4, r5, r6, r7, r8}
   1674c:	ubfx	r0, r1, #5, #3
   16750:	and	r1, r1, #31
   16754:	mov	r7, #1
   16758:	add	r0, r3, r0, lsl #2
   1675c:	ldr	r2, [r0, #8]
   16760:	bic	r7, r7, r2, lsr r1
   16764:	eor	r1, r2, r7, lsl r1
   16768:	mvn	r2, #0
   1676c:	str	r1, [r0, #8]
   16770:	mov	r0, #0
   16774:	mov	r1, ip
   16778:	bl	16410 <__assert_fail@plt+0x4cc4>
   1677c:	sub	sp, fp, #24
   16780:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16784:	push	{r4, r5, r6, r7, fp, lr}
   16788:	add	fp, sp, #16
   1678c:	sub	sp, sp, #48	; 0x30
   16790:	movw	lr, #42304	; 0xa540
   16794:	mov	ip, r0
   16798:	mov	r3, sp
   1679c:	movt	lr, #2
   167a0:	mov	r2, r3
   167a4:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   167a8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   167ac:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   167b0:	stm	r2, {r0, r1, r4, r5, r6, r7}
   167b4:	mov	r1, ip
   167b8:	mvn	r2, #0
   167bc:	ldr	r0, [sp, #12]
   167c0:	orr	r0, r0, #67108864	; 0x4000000
   167c4:	str	r0, [sp, #12]
   167c8:	mov	r0, #0
   167cc:	bl	16410 <__assert_fail@plt+0x4cc4>
   167d0:	sub	sp, fp, #16
   167d4:	pop	{r4, r5, r6, r7, fp, pc}
   167d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   167dc:	add	fp, sp, #24
   167e0:	sub	sp, sp, #48	; 0x30
   167e4:	movw	r8, #42304	; 0xa540
   167e8:	mov	ip, r1
   167ec:	mov	lr, r0
   167f0:	mov	r3, sp
   167f4:	movt	r8, #2
   167f8:	mov	r2, r3
   167fc:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   16800:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   16804:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   16808:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1680c:	mov	r1, lr
   16810:	mov	r2, ip
   16814:	ldr	r0, [sp, #12]
   16818:	orr	r0, r0, #67108864	; 0x4000000
   1681c:	str	r0, [sp, #12]
   16820:	mov	r0, #0
   16824:	bl	16410 <__assert_fail@plt+0x4cc4>
   16828:	sub	sp, fp, #24
   1682c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16830:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16834:	add	fp, sp, #24
   16838:	sub	sp, sp, #96	; 0x60
   1683c:	vmov.i32	q8, #0	; 0x00000000
   16840:	mov	lr, sp
   16844:	mov	ip, r2
   16848:	cmp	r1, #10
   1684c:	add	r3, lr, #16
   16850:	mov	r2, lr
   16854:	vst1.64	{d16-d17}, [r3]
   16858:	mov	r3, #28
   1685c:	vst1.64	{d16-d17}, [r2], r3
   16860:	vst1.32	{d16-d17}, [r2]
   16864:	beq	168a4 <__assert_fail@plt+0x5158>
   16868:	str	r1, [sp, #48]	; 0x30
   1686c:	add	r3, sp, #48	; 0x30
   16870:	ldm	lr!, {r2, r4, r5, r6, r7}
   16874:	add	r1, r3, #4
   16878:	stmia	r1!, {r2, r4, r5, r6, r7}
   1687c:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   16880:	stm	r1, {r2, r4, r5, r6, r7, r8}
   16884:	mvn	r2, #0
   16888:	ldr	r1, [sp, #60]	; 0x3c
   1688c:	orr	r1, r1, #67108864	; 0x4000000
   16890:	str	r1, [sp, #60]	; 0x3c
   16894:	mov	r1, ip
   16898:	bl	16410 <__assert_fail@plt+0x4cc4>
   1689c:	sub	sp, fp, #24
   168a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   168a4:	bl	11728 <abort@plt>
   168a8:	push	{fp, lr}
   168ac:	mov	fp, sp
   168b0:	sub	sp, sp, #8
   168b4:	mvn	ip, #0
   168b8:	str	ip, [sp]
   168bc:	bl	168c8 <__assert_fail@plt+0x517c>
   168c0:	mov	sp, fp
   168c4:	pop	{fp, pc}
   168c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   168cc:	add	fp, sp, #24
   168d0:	sub	sp, sp, #48	; 0x30
   168d4:	movw	ip, #42304	; 0xa540
   168d8:	mov	lr, r3
   168dc:	mov	r3, sp
   168e0:	cmp	r1, #0
   168e4:	movt	ip, #2
   168e8:	cmpne	r2, #0
   168ec:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   168f0:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   168f4:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   168f8:	stm	r3, {r4, r5, r6, r7, r8, r9}
   168fc:	mov	r3, #10
   16900:	str	r3, [sp]
   16904:	bne	1690c <__assert_fail@plt+0x51c0>
   16908:	bl	11728 <abort@plt>
   1690c:	ldr	ip, [fp, #8]
   16910:	str	r2, [sp, #44]	; 0x2c
   16914:	str	r1, [sp, #40]	; 0x28
   16918:	mov	r3, sp
   1691c:	mov	r1, lr
   16920:	mov	r2, ip
   16924:	bl	16410 <__assert_fail@plt+0x4cc4>
   16928:	sub	sp, fp, #24
   1692c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16930:	push	{fp, lr}
   16934:	mov	fp, sp
   16938:	sub	sp, sp, #8
   1693c:	mov	r3, r2
   16940:	mov	r2, r1
   16944:	mov	r1, r0
   16948:	mvn	r0, #0
   1694c:	str	r0, [sp]
   16950:	mov	r0, #0
   16954:	bl	168c8 <__assert_fail@plt+0x517c>
   16958:	mov	sp, fp
   1695c:	pop	{fp, pc}
   16960:	push	{fp, lr}
   16964:	mov	fp, sp
   16968:	sub	sp, sp, #8
   1696c:	mov	ip, r2
   16970:	mov	r2, r1
   16974:	mov	r1, r0
   16978:	str	r3, [sp]
   1697c:	mov	r0, #0
   16980:	mov	r3, ip
   16984:	bl	168c8 <__assert_fail@plt+0x517c>
   16988:	mov	sp, fp
   1698c:	pop	{fp, pc}
   16990:	movw	r3, #41344	; 0xa180
   16994:	movt	r3, #2
   16998:	b	16410 <__assert_fail@plt+0x4cc4>
   1699c:	movw	r3, #41344	; 0xa180
   169a0:	mov	r2, r1
   169a4:	mov	r1, r0
   169a8:	mov	r0, #0
   169ac:	movt	r3, #2
   169b0:	b	16410 <__assert_fail@plt+0x4cc4>
   169b4:	movw	r3, #41344	; 0xa180
   169b8:	mvn	r2, #0
   169bc:	movt	r3, #2
   169c0:	b	16410 <__assert_fail@plt+0x4cc4>
   169c4:	movw	r3, #41344	; 0xa180
   169c8:	mov	r1, r0
   169cc:	mov	r0, #0
   169d0:	mvn	r2, #0
   169d4:	movt	r3, #2
   169d8:	b	16410 <__assert_fail@plt+0x4cc4>
   169dc:	push	{r4, r5, fp, lr}
   169e0:	add	fp, sp, #8
   169e4:	mov	r5, r0
   169e8:	mov	r4, r1
   169ec:	mov	r0, #0
   169f0:	mov	r2, #5
   169f4:	mov	r1, r5
   169f8:	bl	11464 <dcgettext@plt>
   169fc:	cmp	r0, r5
   16a00:	popne	{r4, r5, fp, pc}
   16a04:	bl	180c8 <__assert_fail@plt+0x697c>
   16a08:	ldrb	r1, [r0]
   16a0c:	and	r1, r1, #223	; 0xdf
   16a10:	cmp	r1, #71	; 0x47
   16a14:	beq	16a7c <__assert_fail@plt+0x5330>
   16a18:	cmp	r1, #85	; 0x55
   16a1c:	bne	16ad4 <__assert_fail@plt+0x5388>
   16a20:	ldrb	r1, [r0, #1]
   16a24:	and	r1, r1, #223	; 0xdf
   16a28:	cmp	r1, #84	; 0x54
   16a2c:	bne	16ad4 <__assert_fail@plt+0x5388>
   16a30:	ldrb	r1, [r0, #2]
   16a34:	and	r1, r1, #223	; 0xdf
   16a38:	cmp	r1, #70	; 0x46
   16a3c:	bne	16ad4 <__assert_fail@plt+0x5388>
   16a40:	ldrb	r1, [r0, #3]
   16a44:	cmp	r1, #45	; 0x2d
   16a48:	bne	16ad4 <__assert_fail@plt+0x5388>
   16a4c:	ldrb	r1, [r0, #4]
   16a50:	cmp	r1, #56	; 0x38
   16a54:	bne	16ad4 <__assert_fail@plt+0x5388>
   16a58:	ldrb	r0, [r0, #5]
   16a5c:	cmp	r0, #0
   16a60:	bne	16ad4 <__assert_fail@plt+0x5388>
   16a64:	ldrb	r1, [r5]
   16a68:	movw	r2, #39227	; 0x993b
   16a6c:	movw	r0, #39231	; 0x993f
   16a70:	movt	r2, #1
   16a74:	movt	r0, #1
   16a78:	b	16b04 <__assert_fail@plt+0x53b8>
   16a7c:	ldrb	r1, [r0, #1]
   16a80:	and	r1, r1, #223	; 0xdf
   16a84:	cmp	r1, #66	; 0x42
   16a88:	bne	16ad4 <__assert_fail@plt+0x5388>
   16a8c:	ldrb	r1, [r0, #2]
   16a90:	cmp	r1, #49	; 0x31
   16a94:	bne	16ad4 <__assert_fail@plt+0x5388>
   16a98:	ldrb	r1, [r0, #3]
   16a9c:	cmp	r1, #56	; 0x38
   16aa0:	bne	16ad4 <__assert_fail@plt+0x5388>
   16aa4:	ldrb	r1, [r0, #4]
   16aa8:	cmp	r1, #48	; 0x30
   16aac:	bne	16ad4 <__assert_fail@plt+0x5388>
   16ab0:	ldrb	r1, [r0, #5]
   16ab4:	cmp	r1, #51	; 0x33
   16ab8:	bne	16ad4 <__assert_fail@plt+0x5388>
   16abc:	ldrb	r1, [r0, #6]
   16ac0:	cmp	r1, #48	; 0x30
   16ac4:	bne	16ad4 <__assert_fail@plt+0x5388>
   16ac8:	ldrb	r0, [r0, #7]
   16acc:	cmp	r0, #0
   16ad0:	beq	16af0 <__assert_fail@plt+0x53a4>
   16ad4:	movw	r1, #38320	; 0x95b0
   16ad8:	movw	r0, #39225	; 0x9939
   16adc:	cmp	r4, #9
   16ae0:	movt	r1, #1
   16ae4:	movt	r0, #1
   16ae8:	moveq	r0, r1
   16aec:	pop	{r4, r5, fp, pc}
   16af0:	ldrb	r1, [r5]
   16af4:	movw	r2, #39235	; 0x9943
   16af8:	movw	r0, #39239	; 0x9947
   16afc:	movt	r2, #1
   16b00:	movt	r0, #1
   16b04:	cmp	r1, #96	; 0x60
   16b08:	moveq	r0, r2
   16b0c:	pop	{r4, r5, fp, pc}
   16b10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16b14:	add	fp, sp, #24
   16b18:	movw	r8, #0
   16b1c:	mov	r6, r2
   16b20:	mov	r4, r1
   16b24:	mov	r5, r0
   16b28:	movt	r8, #32752	; 0x7ff0
   16b2c:	mov	r0, r5
   16b30:	mov	r1, r4
   16b34:	mov	r2, r6
   16b38:	bl	113ec <read@plt>
   16b3c:	mov	r7, r0
   16b40:	cmn	r0, #1
   16b44:	bgt	16b6c <__assert_fail@plt+0x5420>
   16b48:	bl	115f0 <__errno_location@plt>
   16b4c:	ldr	r0, [r0]
   16b50:	cmp	r0, #4
   16b54:	beq	16b2c <__assert_fail@plt+0x53e0>
   16b58:	cmp	r6, r8
   16b5c:	bls	16b6c <__assert_fail@plt+0x5420>
   16b60:	cmp	r0, #22
   16b64:	mov	r6, r8
   16b68:	beq	16b2c <__assert_fail@plt+0x53e0>
   16b6c:	mov	r0, r7
   16b70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16b74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16b78:	add	fp, sp, #24
   16b7c:	movw	r8, #0
   16b80:	mov	r6, r2
   16b84:	mov	r4, r1
   16b88:	mov	r5, r0
   16b8c:	movt	r8, #32752	; 0x7ff0
   16b90:	mov	r0, r5
   16b94:	mov	r1, r4
   16b98:	mov	r2, r6
   16b9c:	bl	1162c <write@plt>
   16ba0:	mov	r7, r0
   16ba4:	cmn	r0, #1
   16ba8:	bgt	16bd0 <__assert_fail@plt+0x5484>
   16bac:	bl	115f0 <__errno_location@plt>
   16bb0:	ldr	r0, [r0]
   16bb4:	cmp	r0, #4
   16bb8:	beq	16b90 <__assert_fail@plt+0x5444>
   16bbc:	cmp	r6, r8
   16bc0:	bls	16bd0 <__assert_fail@plt+0x5484>
   16bc4:	cmp	r0, #22
   16bc8:	mov	r6, r8
   16bcc:	beq	16b90 <__assert_fail@plt+0x5444>
   16bd0:	mov	r0, r7
   16bd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16bd8:	push	{r4, r5, r6, r7, fp, lr}
   16bdc:	add	fp, sp, #16
   16be0:	sub	sp, sp, #8
   16be4:	mov	r6, r0
   16be8:	ldrb	r0, [r0]
   16bec:	mov	r4, r1
   16bf0:	sub	r0, r0, #48	; 0x30
   16bf4:	cmp	r0, #10
   16bf8:	bcs	16c28 <__assert_fail@plt+0x54dc>
   16bfc:	add	r1, sp, #4
   16c00:	mov	r0, r6
   16c04:	mov	r2, #10
   16c08:	bl	113e0 <strtol@plt>
   16c0c:	cmp	r0, #64	; 0x40
   16c10:	bgt	16d2c <__assert_fail@plt+0x55e0>
   16c14:	ldr	r1, [sp, #4]
   16c18:	ldrb	r1, [r1]
   16c1c:	cmp	r1, #0
   16c20:	mvnne	r0, #0
   16c24:	b	16d30 <__assert_fail@plt+0x55e4>
   16c28:	movw	r7, #41392	; 0xa1b0
   16c2c:	mov	r5, #0
   16c30:	movt	r7, #2
   16c34:	add	r0, r7, r5
   16c38:	mov	r1, r6
   16c3c:	add	r0, r0, #4
   16c40:	bl	113d4 <strcmp@plt>
   16c44:	cmp	r0, #0
   16c48:	beq	16ce8 <__assert_fail@plt+0x559c>
   16c4c:	add	r5, r5, #12
   16c50:	cmp	r5, #420	; 0x1a4
   16c54:	bne	16c34 <__assert_fail@plt+0x54e8>
   16c58:	bl	11704 <__libc_current_sigrtmin@plt>
   16c5c:	mov	r5, r0
   16c60:	bl	115b4 <__libc_current_sigrtmax@plt>
   16c64:	mov	r7, r0
   16c68:	cmp	r5, #1
   16c6c:	blt	16c8c <__assert_fail@plt+0x5540>
   16c70:	movw	r1, #39328	; 0x99a0
   16c74:	mov	r0, r6
   16c78:	mov	r2, #5
   16c7c:	movt	r1, #1
   16c80:	bl	1171c <strncmp@plt>
   16c84:	cmp	r0, #0
   16c88:	beq	16cf0 <__assert_fail@plt+0x55a4>
   16c8c:	cmp	r7, #1
   16c90:	blt	16d2c <__assert_fail@plt+0x55e0>
   16c94:	movw	r1, #39334	; 0x99a6
   16c98:	mov	r0, r6
   16c9c:	mov	r2, #5
   16ca0:	movt	r1, #1
   16ca4:	bl	1171c <strncmp@plt>
   16ca8:	cmp	r0, #0
   16cac:	bne	16d2c <__assert_fail@plt+0x55e0>
   16cb0:	add	r0, r6, #5
   16cb4:	mov	r1, sp
   16cb8:	mov	r2, #10
   16cbc:	bl	113e0 <strtol@plt>
   16cc0:	ldr	r1, [sp]
   16cc4:	ldrb	r1, [r1]
   16cc8:	cmp	r1, #0
   16ccc:	bne	16d2c <__assert_fail@plt+0x55e0>
   16cd0:	sub	r1, r5, r7
   16cd4:	cmp	r1, r0
   16cd8:	cmple	r0, #0
   16cdc:	bgt	16d2c <__assert_fail@plt+0x55e0>
   16ce0:	add	r0, r0, r7
   16ce4:	b	16d30 <__assert_fail@plt+0x55e4>
   16ce8:	ldr	r0, [r7, r5]
   16cec:	b	16d30 <__assert_fail@plt+0x55e4>
   16cf0:	add	r0, r6, #5
   16cf4:	mov	r1, sp
   16cf8:	mov	r2, #10
   16cfc:	bl	113e0 <strtol@plt>
   16d00:	sub	r1, r7, r5
   16d04:	cmp	r0, r1
   16d08:	bgt	16d2c <__assert_fail@plt+0x55e0>
   16d0c:	cmp	r0, #0
   16d10:	bmi	16d2c <__assert_fail@plt+0x55e0>
   16d14:	ldr	r1, [sp]
   16d18:	ldrb	r1, [r1]
   16d1c:	cmp	r1, #0
   16d20:	bne	16d2c <__assert_fail@plt+0x55e0>
   16d24:	add	r0, r0, r5
   16d28:	b	16d30 <__assert_fail@plt+0x55e4>
   16d2c:	mvn	r0, #0
   16d30:	str	r0, [r4]
   16d34:	asr	r0, r0, #31
   16d38:	sub	sp, fp, #16
   16d3c:	pop	{r4, r5, r6, r7, fp, pc}
   16d40:	push	{r4, r5, r6, r7, fp, lr}
   16d44:	add	fp, sp, #16
   16d48:	sub	sp, sp, #8
   16d4c:	mov	r4, r1
   16d50:	movw	r1, #41392	; 0xa1b0
   16d54:	mov	r5, r0
   16d58:	mov	r0, #0
   16d5c:	movt	r1, #2
   16d60:	ldr	r2, [r1, -r0]
   16d64:	cmp	r2, r5
   16d68:	beq	16dc8 <__assert_fail@plt+0x567c>
   16d6c:	sub	r0, r0, #12
   16d70:	cmn	r0, #420	; 0x1a4
   16d74:	bne	16d60 <__assert_fail@plt+0x5614>
   16d78:	bl	11704 <__libc_current_sigrtmin@plt>
   16d7c:	mov	r7, r0
   16d80:	mvn	r6, #0
   16d84:	bl	115b4 <__libc_current_sigrtmax@plt>
   16d88:	cmp	r7, r5
   16d8c:	bgt	16e1c <__assert_fail@plt+0x56d0>
   16d90:	cmp	r0, r5
   16d94:	blt	16e1c <__assert_fail@plt+0x56d0>
   16d98:	sub	r1, r0, r7
   16d9c:	add	r1, r1, r1, lsr #31
   16da0:	add	r1, r7, r1, asr #1
   16da4:	cmp	r1, r5
   16da8:	bge	16de0 <__assert_fail@plt+0x5694>
   16dac:	mov	r1, #88	; 0x58
   16db0:	mov	r7, r0
   16db4:	strh	r1, [r4, #4]
   16db8:	movw	r1, #21586	; 0x5452
   16dbc:	movt	r1, #16717	; 0x414d
   16dc0:	str	r1, [r4]
   16dc4:	b	16df4 <__assert_fail@plt+0x56a8>
   16dc8:	sub	r0, r1, r0
   16dcc:	add	r1, r0, #4
   16dd0:	mov	r0, r4
   16dd4:	bl	114e8 <strcpy@plt>
   16dd8:	mov	r6, #0
   16ddc:	b	16e1c <__assert_fail@plt+0x56d0>
   16de0:	mov	r0, #78	; 0x4e
   16de4:	strh	r0, [r4, #4]
   16de8:	movw	r0, #21586	; 0x5452
   16dec:	movt	r0, #18765	; 0x494d
   16df0:	str	r0, [r4]
   16df4:	subs	r0, r5, r7
   16df8:	mov	r6, #0
   16dfc:	beq	16e1c <__assert_fail@plt+0x56d0>
   16e00:	movw	r3, #39340	; 0x99ac
   16e04:	str	r0, [sp]
   16e08:	add	r0, r4, #5
   16e0c:	mov	r1, #1
   16e10:	mvn	r2, #0
   16e14:	movt	r3, #1
   16e18:	bl	115fc <__sprintf_chk@plt>
   16e1c:	mov	r0, r6
   16e20:	sub	sp, fp, #16
   16e24:	pop	{r4, r5, r6, r7, fp, pc}
   16e28:	push	{r4, r5, r6, r7, fp, lr}
   16e2c:	add	fp, sp, #16
   16e30:	mov	r4, r0
   16e34:	cmp	r0, #2
   16e38:	bhi	16e68 <__assert_fail@plt+0x571c>
   16e3c:	mov	r0, r4
   16e40:	bl	181a0 <__assert_fail@plt+0x6a54>
   16e44:	mov	r5, r0
   16e48:	bl	115f0 <__errno_location@plt>
   16e4c:	ldr	r7, [r0]
   16e50:	mov	r6, r0
   16e54:	mov	r0, r4
   16e58:	bl	11734 <close@plt>
   16e5c:	mov	r0, r5
   16e60:	str	r7, [r6]
   16e64:	pop	{r4, r5, r6, r7, fp, pc}
   16e68:	mov	r0, r4
   16e6c:	pop	{r4, r5, r6, r7, fp, pc}
   16e70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16e74:	add	fp, sp, #24
   16e78:	sub	sp, sp, #32
   16e7c:	ldr	r6, [fp, #12]
   16e80:	ldr	r7, [fp, #8]
   16e84:	mov	r4, r2
   16e88:	mov	r8, r0
   16e8c:	cmp	r1, #0
   16e90:	beq	16eb8 <__assert_fail@plt+0x576c>
   16e94:	movw	r2, #39344	; 0x99b0
   16e98:	mov	r5, r1
   16e9c:	str	r3, [sp, #4]
   16ea0:	str	r4, [sp]
   16ea4:	mov	r0, r8
   16ea8:	mov	r1, #1
   16eac:	movt	r2, #1
   16eb0:	mov	r3, r5
   16eb4:	b	16ed0 <__assert_fail@plt+0x5784>
   16eb8:	movw	r2, #39356	; 0x99bc
   16ebc:	str	r3, [sp]
   16ec0:	mov	r0, r8
   16ec4:	mov	r1, #1
   16ec8:	mov	r3, r4
   16ecc:	movt	r2, #1
   16ed0:	bl	11650 <__fprintf_chk@plt>
   16ed4:	movw	r1, #39363	; 0x99c3
   16ed8:	mov	r0, #0
   16edc:	mov	r2, #5
   16ee0:	movt	r1, #1
   16ee4:	bl	11464 <dcgettext@plt>
   16ee8:	movw	r2, #40081	; 0x9c91
   16eec:	mov	r3, r0
   16ef0:	movw	r0, #2022	; 0x7e6
   16ef4:	mov	r1, #1
   16ef8:	movt	r2, #1
   16efc:	str	r0, [sp]
   16f00:	mov	r0, r8
   16f04:	bl	11650 <__fprintf_chk@plt>
   16f08:	movw	r4, #35724	; 0x8b8c
   16f0c:	mov	r1, r8
   16f10:	movt	r4, #1
   16f14:	mov	r0, r4
   16f18:	bl	113bc <fputs_unlocked@plt>
   16f1c:	movw	r1, #39367	; 0x99c7
   16f20:	mov	r0, #0
   16f24:	mov	r2, #5
   16f28:	movt	r1, #1
   16f2c:	bl	11464 <dcgettext@plt>
   16f30:	movw	r3, #39538	; 0x9a72
   16f34:	mov	r2, r0
   16f38:	mov	r0, r8
   16f3c:	mov	r1, #1
   16f40:	movt	r3, #1
   16f44:	bl	11650 <__fprintf_chk@plt>
   16f48:	mov	r0, r4
   16f4c:	mov	r1, r8
   16f50:	bl	113bc <fputs_unlocked@plt>
   16f54:	cmp	r6, #9
   16f58:	bhi	16fbc <__assert_fail@plt+0x5870>
   16f5c:	add	r0, pc, #0
   16f60:	ldr	pc, [r0, r6, lsl #2]
   16f64:	muleq	r1, r4, r1
   16f68:	andeq	r6, r1, ip, lsl #31
   16f6c:	andeq	r6, r1, r8, asr #31
   16f70:	strdeq	r6, [r1], -r0
   16f74:	andeq	r7, r1, r8, lsl r0
   16f78:	andeq	r7, r1, r0, asr #32
   16f7c:	andeq	r7, r1, r8, rrx
   16f80:	andeq	r7, r1, r0, lsr #1
   16f84:	andeq	r7, r1, r0, asr #2
   16f88:	andeq	r7, r1, r8, ror #1
   16f8c:	movw	r1, #39572	; 0x9a94
   16f90:	mov	r0, #0
   16f94:	mov	r2, #5
   16f98:	movt	r1, #1
   16f9c:	bl	11464 <dcgettext@plt>
   16fa0:	ldr	r3, [r7]
   16fa4:	mov	r2, r0
   16fa8:	mov	r0, r8
   16fac:	mov	r1, #1
   16fb0:	sub	sp, fp, #24
   16fb4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16fb8:	b	11650 <__fprintf_chk@plt>
   16fbc:	movw	r1, #39891	; 0x9bd3
   16fc0:	movt	r1, #1
   16fc4:	b	170f0 <__assert_fail@plt+0x59a4>
   16fc8:	movw	r1, #39588	; 0x9aa4
   16fcc:	mov	r0, #0
   16fd0:	mov	r2, #5
   16fd4:	movt	r1, #1
   16fd8:	bl	11464 <dcgettext@plt>
   16fdc:	mov	r2, r0
   16fe0:	ldr	r3, [r7]
   16fe4:	ldr	r0, [r7, #4]
   16fe8:	str	r0, [sp]
   16fec:	b	170dc <__assert_fail@plt+0x5990>
   16ff0:	movw	r1, #39611	; 0x9abb
   16ff4:	mov	r0, #0
   16ff8:	mov	r2, #5
   16ffc:	movt	r1, #1
   17000:	bl	11464 <dcgettext@plt>
   17004:	mov	r2, r0
   17008:	ldr	r3, [r7]
   1700c:	ldmib	r7, {r0, r1}
   17010:	stm	sp, {r0, r1}
   17014:	b	170dc <__assert_fail@plt+0x5990>
   17018:	movw	r1, #39639	; 0x9ad7
   1701c:	mov	r0, #0
   17020:	mov	r2, #5
   17024:	movt	r1, #1
   17028:	bl	11464 <dcgettext@plt>
   1702c:	ldr	r3, [r7]
   17030:	mov	r2, r0
   17034:	ldmib	r7, {r0, r1, r7}
   17038:	stm	sp, {r0, r1, r7}
   1703c:	b	170dc <__assert_fail@plt+0x5990>
   17040:	movw	r1, #39671	; 0x9af7
   17044:	mov	r0, #0
   17048:	mov	r2, #5
   1704c:	movt	r1, #1
   17050:	bl	11464 <dcgettext@plt>
   17054:	ldr	r3, [r7]
   17058:	mov	r2, r0
   1705c:	ldmib	r7, {r0, r1, r6, r7}
   17060:	stm	sp, {r0, r1, r6, r7}
   17064:	b	170dc <__assert_fail@plt+0x5990>
   17068:	movw	r1, #39707	; 0x9b1b
   1706c:	mov	r0, #0
   17070:	mov	r2, #5
   17074:	movt	r1, #1
   17078:	bl	11464 <dcgettext@plt>
   1707c:	mov	r2, r0
   17080:	ldr	r3, [r7]
   17084:	ldmib	r7, {r0, r1, r6}
   17088:	ldr	r5, [r7, #16]
   1708c:	ldr	r7, [r7, #20]
   17090:	stm	sp, {r0, r1, r6}
   17094:	str	r5, [sp, #12]
   17098:	str	r7, [sp, #16]
   1709c:	b	170dc <__assert_fail@plt+0x5990>
   170a0:	movw	r1, #39747	; 0x9b43
   170a4:	mov	r0, #0
   170a8:	mov	r2, #5
   170ac:	movt	r1, #1
   170b0:	bl	11464 <dcgettext@plt>
   170b4:	mov	r2, r0
   170b8:	ldr	r3, [r7]
   170bc:	ldmib	r7, {r0, r1, r6}
   170c0:	ldr	r5, [r7, #16]
   170c4:	ldr	r4, [r7, #20]
   170c8:	ldr	r7, [r7, #24]
   170cc:	stm	sp, {r0, r1, r6}
   170d0:	str	r5, [sp, #12]
   170d4:	str	r4, [sp, #16]
   170d8:	str	r7, [sp, #20]
   170dc:	mov	r0, r8
   170e0:	mov	r1, #1
   170e4:	b	17190 <__assert_fail@plt+0x5a44>
   170e8:	movw	r1, #39839	; 0x9b9f
   170ec:	movt	r1, #1
   170f0:	mov	r0, #0
   170f4:	mov	r2, #5
   170f8:	bl	11464 <dcgettext@plt>
   170fc:	mov	ip, r0
   17100:	ldr	r3, [r7]
   17104:	ldr	r0, [r7, #4]
   17108:	ldr	r1, [r7, #8]
   1710c:	ldr	r6, [r7, #12]
   17110:	ldr	r5, [r7, #16]
   17114:	ldr	r4, [r7, #20]
   17118:	ldr	r2, [r7, #24]
   1711c:	ldr	lr, [r7, #28]
   17120:	ldr	r7, [r7, #32]
   17124:	stm	sp, {r0, r1, r6}
   17128:	str	r5, [sp, #12]
   1712c:	str	r4, [sp, #16]
   17130:	str	r2, [sp, #20]
   17134:	str	lr, [sp, #24]
   17138:	str	r7, [sp, #28]
   1713c:	b	17184 <__assert_fail@plt+0x5a38>
   17140:	movw	r1, #39791	; 0x9b6f
   17144:	mov	r0, #0
   17148:	mov	r2, #5
   1714c:	movt	r1, #1
   17150:	bl	11464 <dcgettext@plt>
   17154:	mov	ip, r0
   17158:	ldr	r3, [r7]
   1715c:	ldmib	r7, {r0, r1, r6}
   17160:	ldr	r5, [r7, #16]
   17164:	ldr	r4, [r7, #20]
   17168:	ldr	r2, [r7, #24]
   1716c:	ldr	r7, [r7, #28]
   17170:	stm	sp, {r0, r1, r6}
   17174:	str	r5, [sp, #12]
   17178:	str	r4, [sp, #16]
   1717c:	str	r2, [sp, #20]
   17180:	str	r7, [sp, #24]
   17184:	mov	r0, r8
   17188:	mov	r1, #1
   1718c:	mov	r2, ip
   17190:	bl	11650 <__fprintf_chk@plt>
   17194:	sub	sp, fp, #24
   17198:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1719c:	push	{r4, sl, fp, lr}
   171a0:	add	fp, sp, #8
   171a4:	sub	sp, sp, #8
   171a8:	ldr	ip, [fp, #8]
   171ac:	mov	lr, #0
   171b0:	ldr	r4, [ip, lr, lsl #2]
   171b4:	add	lr, lr, #1
   171b8:	cmp	r4, #0
   171bc:	bne	171b0 <__assert_fail@plt+0x5a64>
   171c0:	sub	r4, lr, #1
   171c4:	str	ip, [sp]
   171c8:	str	r4, [sp, #4]
   171cc:	bl	16e70 <__assert_fail@plt+0x5724>
   171d0:	sub	sp, fp, #8
   171d4:	pop	{r4, sl, fp, pc}
   171d8:	push	{r4, r5, fp, lr}
   171dc:	add	fp, sp, #8
   171e0:	sub	sp, sp, #48	; 0x30
   171e4:	ldr	r4, [fp, #8]
   171e8:	mov	ip, #0
   171ec:	add	lr, sp, #8
   171f0:	ldr	r5, [r4]
   171f4:	cmp	r5, #0
   171f8:	str	r5, [lr, ip, lsl #2]
   171fc:	beq	17214 <__assert_fail@plt+0x5ac8>
   17200:	add	ip, ip, #1
   17204:	add	r4, r4, #4
   17208:	cmp	ip, #10
   1720c:	bne	171f0 <__assert_fail@plt+0x5aa4>
   17210:	mov	ip, #10
   17214:	str	lr, [sp]
   17218:	str	ip, [sp, #4]
   1721c:	bl	16e70 <__assert_fail@plt+0x5724>
   17220:	sub	sp, fp, #8
   17224:	pop	{r4, r5, fp, pc}
   17228:	push	{fp, lr}
   1722c:	mov	fp, sp
   17230:	sub	sp, sp, #8
   17234:	add	ip, fp, #8
   17238:	str	ip, [sp, #4]
   1723c:	str	ip, [sp]
   17240:	bl	171d8 <__assert_fail@plt+0x5a8c>
   17244:	mov	sp, fp
   17248:	pop	{fp, pc}
   1724c:	push	{fp, lr}
   17250:	mov	fp, sp
   17254:	movw	r0, #41836	; 0xa36c
   17258:	movt	r0, #2
   1725c:	ldr	r1, [r0]
   17260:	movw	r0, #35724	; 0x8b8c
   17264:	movt	r0, #1
   17268:	bl	113bc <fputs_unlocked@plt>
   1726c:	movw	r1, #39951	; 0x9c0f
   17270:	mov	r0, #0
   17274:	mov	r2, #5
   17278:	movt	r1, #1
   1727c:	bl	11464 <dcgettext@plt>
   17280:	movw	r2, #39971	; 0x9c23
   17284:	mov	r1, r0
   17288:	mov	r0, #1
   1728c:	movt	r2, #1
   17290:	bl	11620 <__printf_chk@plt>
   17294:	movw	r1, #39993	; 0x9c39
   17298:	mov	r0, #0
   1729c:	mov	r2, #5
   172a0:	movt	r1, #1
   172a4:	bl	11464 <dcgettext@plt>
   172a8:	movw	r2, #36795	; 0x8fbb
   172ac:	movw	r3, #37508	; 0x9284
   172b0:	mov	r1, r0
   172b4:	mov	r0, #1
   172b8:	movt	r2, #1
   172bc:	movt	r3, #1
   172c0:	bl	11620 <__printf_chk@plt>
   172c4:	movw	r1, #40013	; 0x9c4d
   172c8:	mov	r0, #0
   172cc:	mov	r2, #5
   172d0:	movt	r1, #1
   172d4:	bl	11464 <dcgettext@plt>
   172d8:	movw	r2, #40052	; 0x9c74
   172dc:	mov	r1, r0
   172e0:	mov	r0, #1
   172e4:	movt	r2, #1
   172e8:	pop	{fp, lr}
   172ec:	b	11620 <__printf_chk@plt>
   172f0:	push	{fp, lr}
   172f4:	mov	fp, sp
   172f8:	bl	116f8 <aligned_alloc@plt>
   172fc:	cmp	r0, #0
   17300:	popne	{fp, pc}
   17304:	bl	17774 <__assert_fail@plt+0x6028>
   17308:	b	1730c <__assert_fail@plt+0x5bc0>
   1730c:	push	{r4, r5, r6, sl, fp, lr}
   17310:	add	fp, sp, #16
   17314:	mov	r4, r2
   17318:	mov	r5, r1
   1731c:	mov	r6, r0
   17320:	bl	18164 <__assert_fail@plt+0x6a18>
   17324:	cmp	r0, #0
   17328:	popne	{r4, r5, r6, sl, fp, pc}
   1732c:	cmp	r6, #0
   17330:	beq	17344 <__assert_fail@plt+0x5bf8>
   17334:	cmp	r5, #0
   17338:	cmpne	r4, #0
   1733c:	bne	17344 <__assert_fail@plt+0x5bf8>
   17340:	pop	{r4, r5, r6, sl, fp, pc}
   17344:	bl	17774 <__assert_fail@plt+0x6028>
   17348:	push	{fp, lr}
   1734c:	mov	fp, sp
   17350:	bl	17fc8 <__assert_fail@plt+0x687c>
   17354:	cmp	r0, #0
   17358:	popne	{fp, pc}
   1735c:	bl	17774 <__assert_fail@plt+0x6028>
   17360:	push	{fp, lr}
   17364:	mov	fp, sp
   17368:	bl	17fc8 <__assert_fail@plt+0x687c>
   1736c:	cmp	r0, #0
   17370:	popne	{fp, pc}
   17374:	bl	17774 <__assert_fail@plt+0x6028>
   17378:	push	{fp, lr}
   1737c:	mov	fp, sp
   17380:	bl	17fc8 <__assert_fail@plt+0x687c>
   17384:	cmp	r0, #0
   17388:	popne	{fp, pc}
   1738c:	bl	17774 <__assert_fail@plt+0x6028>
   17390:	push	{r4, r5, fp, lr}
   17394:	add	fp, sp, #8
   17398:	mov	r4, r1
   1739c:	mov	r5, r0
   173a0:	bl	17ff8 <__assert_fail@plt+0x68ac>
   173a4:	cmp	r0, #0
   173a8:	popne	{r4, r5, fp, pc}
   173ac:	cmp	r5, #0
   173b0:	beq	173c0 <__assert_fail@plt+0x5c74>
   173b4:	cmp	r4, #0
   173b8:	bne	173c0 <__assert_fail@plt+0x5c74>
   173bc:	pop	{r4, r5, fp, pc}
   173c0:	bl	17774 <__assert_fail@plt+0x6028>
   173c4:	push	{fp, lr}
   173c8:	mov	fp, sp
   173cc:	cmp	r1, #0
   173d0:	orreq	r1, r1, #1
   173d4:	bl	17ff8 <__assert_fail@plt+0x68ac>
   173d8:	cmp	r0, #0
   173dc:	popne	{fp, pc}
   173e0:	bl	17774 <__assert_fail@plt+0x6028>
   173e4:	push	{fp, lr}
   173e8:	mov	fp, sp
   173ec:	clz	r3, r2
   173f0:	lsr	ip, r3, #5
   173f4:	clz	r3, r1
   173f8:	lsr	r3, r3, #5
   173fc:	orrs	r3, r3, ip
   17400:	movwne	r1, #1
   17404:	movwne	r2, #1
   17408:	bl	18164 <__assert_fail@plt+0x6a18>
   1740c:	cmp	r0, #0
   17410:	popne	{fp, pc}
   17414:	bl	17774 <__assert_fail@plt+0x6028>
   17418:	push	{fp, lr}
   1741c:	mov	fp, sp
   17420:	mov	r2, r1
   17424:	mov	r1, r0
   17428:	mov	r0, #0
   1742c:	bl	18164 <__assert_fail@plt+0x6a18>
   17430:	cmp	r0, #0
   17434:	popne	{fp, pc}
   17438:	bl	17774 <__assert_fail@plt+0x6028>
   1743c:	mov	r2, r1
   17440:	mov	r1, r0
   17444:	mov	r0, #0
   17448:	b	173e4 <__assert_fail@plt+0x5c98>
   1744c:	mov	r2, #1
   17450:	b	17454 <__assert_fail@plt+0x5d08>
   17454:	push	{r4, r5, fp, lr}
   17458:	add	fp, sp, #8
   1745c:	ldr	r5, [r1]
   17460:	mov	r4, r1
   17464:	cmp	r0, #0
   17468:	beq	17480 <__assert_fail@plt+0x5d34>
   1746c:	mov	r1, #1
   17470:	add	r1, r1, r5, lsr #1
   17474:	adds	r5, r5, r1
   17478:	bcc	17498 <__assert_fail@plt+0x5d4c>
   1747c:	bl	17774 <__assert_fail@plt+0x6028>
   17480:	cmp	r5, #0
   17484:	bne	17498 <__assert_fail@plt+0x5d4c>
   17488:	mov	r1, #64	; 0x40
   1748c:	cmp	r2, #64	; 0x40
   17490:	udiv	r5, r1, r2
   17494:	addhi	r5, r5, #1
   17498:	mov	r1, r5
   1749c:	bl	1730c <__assert_fail@plt+0x5bc0>
   174a0:	str	r5, [r4]
   174a4:	pop	{r4, r5, fp, pc}
   174a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   174ac:	add	fp, sp, #24
   174b0:	ldr	r6, [r1]
   174b4:	mov	r8, r1
   174b8:	ldr	r4, [fp, #8]
   174bc:	add	r1, r6, r6, asr #1
   174c0:	cmp	r1, r6
   174c4:	mvnvs	r1, #-2147483648	; 0x80000000
   174c8:	cmp	r1, r3
   174cc:	mov	r5, r1
   174d0:	movgt	r5, r3
   174d4:	cmn	r3, #1
   174d8:	movle	r5, r1
   174dc:	cmn	r4, #1
   174e0:	ble	17500 <__assert_fail@plt+0x5db4>
   174e4:	cmp	r4, #0
   174e8:	beq	17554 <__assert_fail@plt+0x5e08>
   174ec:	cmn	r5, #1
   174f0:	ble	17528 <__assert_fail@plt+0x5ddc>
   174f4:	mvn	r7, #-2147483648	; 0x80000000
   174f8:	udiv	r1, r7, r4
   174fc:	b	1751c <__assert_fail@plt+0x5dd0>
   17500:	cmn	r5, #1
   17504:	ble	17544 <__assert_fail@plt+0x5df8>
   17508:	cmn	r4, #1
   1750c:	beq	17554 <__assert_fail@plt+0x5e08>
   17510:	mov	r1, #-2147483648	; 0x80000000
   17514:	mvn	r7, #-2147483648	; 0x80000000
   17518:	sdiv	r1, r1, r4
   1751c:	cmp	r1, r5
   17520:	bge	17554 <__assert_fail@plt+0x5e08>
   17524:	b	17564 <__assert_fail@plt+0x5e18>
   17528:	beq	17554 <__assert_fail@plt+0x5e08>
   1752c:	mov	r1, #-2147483648	; 0x80000000
   17530:	mvn	r7, #-2147483648	; 0x80000000
   17534:	sdiv	r1, r1, r5
   17538:	cmp	r1, r4
   1753c:	bge	17554 <__assert_fail@plt+0x5e08>
   17540:	b	17564 <__assert_fail@plt+0x5e18>
   17544:	mvn	r7, #-2147483648	; 0x80000000
   17548:	sdiv	r1, r7, r4
   1754c:	cmp	r5, r1
   17550:	blt	17564 <__assert_fail@plt+0x5e18>
   17554:	mul	r1, r5, r4
   17558:	mov	r7, #64	; 0x40
   1755c:	cmp	r1, #63	; 0x3f
   17560:	bgt	1756c <__assert_fail@plt+0x5e20>
   17564:	sdiv	r5, r7, r4
   17568:	mul	r1, r5, r4
   1756c:	cmp	r0, #0
   17570:	moveq	r7, #0
   17574:	streq	r7, [r8]
   17578:	sub	r7, r5, r6
   1757c:	cmp	r7, r2
   17580:	bge	17624 <__assert_fail@plt+0x5ed8>
   17584:	add	r5, r6, r2
   17588:	mov	r2, #0
   1758c:	mov	r1, #0
   17590:	cmp	r5, r3
   17594:	movwgt	r2, #1
   17598:	cmn	r3, #1
   1759c:	movwgt	r1, #1
   175a0:	cmp	r5, r6
   175a4:	bvs	1760c <__assert_fail@plt+0x5ec0>
   175a8:	ands	r1, r1, r2
   175ac:	bne	1760c <__assert_fail@plt+0x5ec0>
   175b0:	cmn	r4, #1
   175b4:	ble	175d4 <__assert_fail@plt+0x5e88>
   175b8:	cmp	r4, #0
   175bc:	beq	17620 <__assert_fail@plt+0x5ed4>
   175c0:	cmn	r5, #1
   175c4:	ble	175f8 <__assert_fail@plt+0x5eac>
   175c8:	mvn	r1, #-2147483648	; 0x80000000
   175cc:	udiv	r1, r1, r4
   175d0:	b	175ec <__assert_fail@plt+0x5ea0>
   175d4:	cmn	r5, #1
   175d8:	ble	17610 <__assert_fail@plt+0x5ec4>
   175dc:	cmn	r4, #1
   175e0:	beq	17620 <__assert_fail@plt+0x5ed4>
   175e4:	mov	r1, #-2147483648	; 0x80000000
   175e8:	sdiv	r1, r1, r4
   175ec:	cmp	r1, r5
   175f0:	bge	17620 <__assert_fail@plt+0x5ed4>
   175f4:	b	1760c <__assert_fail@plt+0x5ec0>
   175f8:	beq	17620 <__assert_fail@plt+0x5ed4>
   175fc:	mov	r1, #-2147483648	; 0x80000000
   17600:	sdiv	r1, r1, r5
   17604:	cmp	r1, r4
   17608:	bge	17620 <__assert_fail@plt+0x5ed4>
   1760c:	bl	17774 <__assert_fail@plt+0x6028>
   17610:	mvn	r1, #-2147483648	; 0x80000000
   17614:	sdiv	r1, r1, r4
   17618:	cmp	r5, r1
   1761c:	blt	1760c <__assert_fail@plt+0x5ec0>
   17620:	mul	r1, r5, r4
   17624:	bl	17390 <__assert_fail@plt+0x5c44>
   17628:	str	r5, [r8]
   1762c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17630:	push	{fp, lr}
   17634:	mov	fp, sp
   17638:	mov	r1, #1
   1763c:	bl	17f74 <__assert_fail@plt+0x6828>
   17640:	cmp	r0, #0
   17644:	popne	{fp, pc}
   17648:	bl	17774 <__assert_fail@plt+0x6028>
   1764c:	push	{fp, lr}
   17650:	mov	fp, sp
   17654:	bl	17f74 <__assert_fail@plt+0x6828>
   17658:	cmp	r0, #0
   1765c:	popne	{fp, pc}
   17660:	bl	17774 <__assert_fail@plt+0x6028>
   17664:	push	{fp, lr}
   17668:	mov	fp, sp
   1766c:	mov	r1, #1
   17670:	bl	17f74 <__assert_fail@plt+0x6828>
   17674:	cmp	r0, #0
   17678:	popne	{fp, pc}
   1767c:	bl	17774 <__assert_fail@plt+0x6028>
   17680:	push	{fp, lr}
   17684:	mov	fp, sp
   17688:	bl	17f74 <__assert_fail@plt+0x6828>
   1768c:	cmp	r0, #0
   17690:	popne	{fp, pc}
   17694:	bl	17774 <__assert_fail@plt+0x6028>
   17698:	push	{r4, r5, fp, lr}
   1769c:	add	fp, sp, #8
   176a0:	mov	r5, r0
   176a4:	mov	r0, r1
   176a8:	mov	r4, r1
   176ac:	bl	17fc8 <__assert_fail@plt+0x687c>
   176b0:	cmp	r0, #0
   176b4:	beq	176c8 <__assert_fail@plt+0x5f7c>
   176b8:	mov	r1, r5
   176bc:	mov	r2, r4
   176c0:	pop	{r4, r5, fp, lr}
   176c4:	b	11434 <memcpy@plt>
   176c8:	bl	17774 <__assert_fail@plt+0x6028>
   176cc:	push	{r4, r5, fp, lr}
   176d0:	add	fp, sp, #8
   176d4:	mov	r5, r0
   176d8:	mov	r0, r1
   176dc:	mov	r4, r1
   176e0:	bl	17fc8 <__assert_fail@plt+0x687c>
   176e4:	cmp	r0, #0
   176e8:	beq	176fc <__assert_fail@plt+0x5fb0>
   176ec:	mov	r1, r5
   176f0:	mov	r2, r4
   176f4:	pop	{r4, r5, fp, lr}
   176f8:	b	11434 <memcpy@plt>
   176fc:	bl	17774 <__assert_fail@plt+0x6028>
   17700:	push	{r4, r5, fp, lr}
   17704:	add	fp, sp, #8
   17708:	mov	r5, r0
   1770c:	add	r0, r1, #1
   17710:	mov	r4, r1
   17714:	bl	17fc8 <__assert_fail@plt+0x687c>
   17718:	cmp	r0, #0
   1771c:	beq	17738 <__assert_fail@plt+0x5fec>
   17720:	mov	r1, #0
   17724:	mov	r2, r4
   17728:	strb	r1, [r0, r4]
   1772c:	mov	r1, r5
   17730:	pop	{r4, r5, fp, lr}
   17734:	b	11434 <memcpy@plt>
   17738:	bl	17774 <__assert_fail@plt+0x6028>
   1773c:	push	{r4, r5, fp, lr}
   17740:	add	fp, sp, #8
   17744:	mov	r4, r0
   17748:	bl	115a8 <strlen@plt>
   1774c:	add	r5, r0, #1
   17750:	mov	r0, r5
   17754:	bl	17fc8 <__assert_fail@plt+0x687c>
   17758:	cmp	r0, #0
   1775c:	beq	17770 <__assert_fail@plt+0x6024>
   17760:	mov	r1, r4
   17764:	mov	r2, r5
   17768:	pop	{r4, r5, fp, lr}
   1776c:	b	11434 <memcpy@plt>
   17770:	bl	17774 <__assert_fail@plt+0x6028>
   17774:	push	{fp, lr}
   17778:	mov	fp, sp
   1777c:	movw	r0, #41320	; 0xa168
   17780:	movw	r1, #40128	; 0x9cc0
   17784:	mov	r2, #5
   17788:	movt	r0, #2
   1778c:	movt	r1, #1
   17790:	ldr	r4, [r0]
   17794:	mov	r0, #0
   17798:	bl	11464 <dcgettext@plt>
   1779c:	movw	r2, #38682	; 0x971a
   177a0:	mov	r3, r0
   177a4:	mov	r0, r4
   177a8:	mov	r1, #0
   177ac:	movt	r2, #1
   177b0:	bl	11518 <error@plt>
   177b4:	bl	11728 <abort@plt>
   177b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   177bc:	add	fp, sp, #24
   177c0:	sub	sp, sp, #16
   177c4:	mov	r8, r0
   177c8:	ldr	r0, [fp, #16]
   177cc:	mov	r5, r3
   177d0:	mov	r6, r2
   177d4:	mov	r2, r1
   177d8:	add	r3, sp, #8
   177dc:	mov	r1, #0
   177e0:	str	r0, [sp]
   177e4:	mov	r0, r8
   177e8:	bl	178b8 <__assert_fail@plt+0x616c>
   177ec:	cmp	r0, #0
   177f0:	bne	17884 <__assert_fail@plt+0x6138>
   177f4:	ldr	r4, [sp, #8]
   177f8:	ldr	r7, [sp, #12]
   177fc:	subs	r0, r4, r6
   17800:	sbcs	r0, r7, r5
   17804:	bcc	17828 <__assert_fail@plt+0x60dc>
   17808:	ldr	r1, [fp, #8]
   1780c:	ldr	r0, [fp, #12]
   17810:	subs	r1, r1, r4
   17814:	sbcs	r0, r0, r7
   17818:	movcs	r0, r4
   1781c:	movcs	r1, r7
   17820:	subcs	sp, fp, #24
   17824:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   17828:	bl	115f0 <__errno_location@plt>
   1782c:	subs	r1, r4, #1073741824	; 0x40000000
   17830:	sbcs	r1, r7, #0
   17834:	bcc	17840 <__assert_fail@plt+0x60f4>
   17838:	mov	r1, #75	; 0x4b
   1783c:	b	17844 <__assert_fail@plt+0x60f8>
   17840:	mov	r1, #34	; 0x22
   17844:	str	r1, [r0]
   17848:	ldr	r6, [r0]
   1784c:	ldr	r4, [fp, #24]
   17850:	ldr	r5, [fp, #20]
   17854:	mov	r0, r8
   17858:	bl	169c4 <__assert_fail@plt+0x5278>
   1785c:	subs	r1, r6, #22
   17860:	movw	r2, #36901	; 0x9025
   17864:	str	r0, [sp]
   17868:	mov	r3, r5
   1786c:	movne	r1, r6
   17870:	cmp	r4, #0
   17874:	movt	r2, #1
   17878:	movweq	r4, #1
   1787c:	mov	r0, r4
   17880:	bl	11518 <error@plt>
   17884:	cmp	r0, #1
   17888:	beq	178a0 <__assert_fail@plt+0x6154>
   1788c:	cmp	r0, #3
   17890:	bne	178a8 <__assert_fail@plt+0x615c>
   17894:	bl	115f0 <__errno_location@plt>
   17898:	mov	r1, #0
   1789c:	b	17844 <__assert_fail@plt+0x60f8>
   178a0:	bl	115f0 <__errno_location@plt>
   178a4:	b	17838 <__assert_fail@plt+0x60ec>
   178a8:	bl	115f0 <__errno_location@plt>
   178ac:	b	17848 <__assert_fail@plt+0x60fc>
   178b0:	mov	r1, #10
   178b4:	b	177b8 <__assert_fail@plt+0x606c>
   178b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178bc:	add	fp, sp, #28
   178c0:	sub	sp, sp, #20
   178c4:	cmp	r2, #37	; 0x25
   178c8:	bcs	17f54 <__assert_fail@plt+0x6808>
   178cc:	mov	r8, r3
   178d0:	mov	r5, r2
   178d4:	mov	r6, r1
   178d8:	mov	r4, r0
   178dc:	bl	115f0 <__errno_location@plt>
   178e0:	mov	r7, r0
   178e4:	mov	r0, #0
   178e8:	str	r0, [r7]
   178ec:	bl	11584 <__ctype_b_loc@plt>
   178f0:	ldr	r1, [r0]
   178f4:	mov	r2, r4
   178f8:	ldrb	r0, [r2], #1
   178fc:	add	r3, r1, r0, lsl #1
   17900:	ldrb	r3, [r3, #1]
   17904:	tst	r3, #32
   17908:	bne	178f8 <__assert_fail@plt+0x61ac>
   1790c:	cmp	r6, #0
   17910:	add	sl, sp, #16
   17914:	movne	sl, r6
   17918:	mov	r6, #4
   1791c:	cmp	r0, #45	; 0x2d
   17920:	beq	17f48 <__assert_fail@plt+0x67fc>
   17924:	mov	r0, r4
   17928:	mov	r1, sl
   1792c:	mov	r2, r5
   17930:	str	r8, [sp, #12]
   17934:	bl	11644 <strtoumax@plt>
   17938:	ldr	r5, [sl]
   1793c:	cmp	r5, r4
   17940:	beq	17968 <__assert_fail@plt+0x621c>
   17944:	mov	r8, r0
   17948:	ldr	r0, [r7]
   1794c:	mov	r9, r1
   17950:	cmp	r0, #0
   17954:	beq	1799c <__assert_fail@plt+0x6250>
   17958:	cmp	r0, #34	; 0x22
   1795c:	bne	17f48 <__assert_fail@plt+0x67fc>
   17960:	mov	r6, #1
   17964:	b	179a0 <__assert_fail@plt+0x6254>
   17968:	ldr	r0, [fp, #8]
   1796c:	cmp	r0, #0
   17970:	beq	17f48 <__assert_fail@plt+0x67fc>
   17974:	ldrb	r1, [r4]
   17978:	cmp	r1, #0
   1797c:	beq	17f48 <__assert_fail@plt+0x67fc>
   17980:	bl	115c0 <strchr@plt>
   17984:	cmp	r0, #0
   17988:	beq	17f48 <__assert_fail@plt+0x67fc>
   1798c:	mov	r6, #0
   17990:	mov	r8, #1
   17994:	mov	r9, #0
   17998:	b	179ac <__assert_fail@plt+0x6260>
   1799c:	mov	r6, r0
   179a0:	ldr	r0, [fp, #8]
   179a4:	cmp	r0, #0
   179a8:	beq	17f40 <__assert_fail@plt+0x67f4>
   179ac:	ldrb	r7, [r5]
   179b0:	cmp	r7, #0
   179b4:	beq	17f40 <__assert_fail@plt+0x67f4>
   179b8:	ldr	r0, [fp, #8]
   179bc:	mov	r1, r7
   179c0:	bl	115c0 <strchr@plt>
   179c4:	cmp	r0, #0
   179c8:	beq	17ad0 <__assert_fail@plt+0x6384>
   179cc:	sub	r0, r7, #69	; 0x45
   179d0:	mov	r1, #1
   179d4:	mov	r3, #0
   179d8:	mov	r4, #1024	; 0x400
   179dc:	cmp	r0, #21
   179e0:	str	r1, [sp, #8]
   179e4:	bhi	179fc <__assert_fail@plt+0x62b0>
   179e8:	movw	r2, #35141	; 0x8945
   179ec:	mov	r1, #1
   179f0:	movt	r2, #48	; 0x30
   179f4:	tst	r2, r1, lsl r0
   179f8:	bne	17a18 <__assert_fail@plt+0x62cc>
   179fc:	sub	r0, r7, #103	; 0x67
   17a00:	cmp	r0, #13
   17a04:	bhi	17a4c <__assert_fail@plt+0x6300>
   17a08:	mov	r1, #1
   17a0c:	movw	r2, #8273	; 0x2051
   17a10:	tst	r2, r1, lsl r0
   17a14:	beq	17a4c <__assert_fail@plt+0x6300>
   17a18:	ldr	r0, [fp, #8]
   17a1c:	mov	r1, #48	; 0x30
   17a20:	bl	115c0 <strchr@plt>
   17a24:	cmp	r0, #0
   17a28:	beq	17a48 <__assert_fail@plt+0x62fc>
   17a2c:	ldrb	r0, [r5, #1]
   17a30:	cmp	r0, #66	; 0x42
   17a34:	cmpne	r0, #68	; 0x44
   17a38:	bne	17b60 <__assert_fail@plt+0x6414>
   17a3c:	mov	r4, #1000	; 0x3e8
   17a40:	mov	r0, #2
   17a44:	str	r0, [sp, #8]
   17a48:	mov	r3, #0
   17a4c:	cmp	r7, #89	; 0x59
   17a50:	stm	sp, {r5, r6}
   17a54:	bgt	17adc <__assert_fail@plt+0x6390>
   17a58:	sub	r0, r7, #66	; 0x42
   17a5c:	cmp	r0, #14
   17a60:	bhi	17b84 <__assert_fail@plt+0x6438>
   17a64:	add	r1, pc, #0
   17a68:	ldr	pc, [r1, r0, lsl #2]
   17a6c:	andeq	r7, r1, r8, lsr #21
   17a70:	andeq	r7, r1, r4, lsr lr
   17a74:	andeq	r7, r1, r4, lsr lr
   17a78:	andeq	r7, r1, r8, asr #28
   17a7c:	andeq	r7, r1, r4, lsr lr
   17a80:	andeq	r7, r1, r8, lsr ip
   17a84:	andeq	r7, r1, r4, lsr lr
   17a88:	andeq	r7, r1, r4, lsr lr
   17a8c:	andeq	r7, r1, r4, lsr lr
   17a90:	andeq	r7, r1, r4, lsr #25
   17a94:	andeq	r7, r1, r4, lsr lr
   17a98:	andeq	r7, r1, r8, ror #25
   17a9c:	andeq	r7, r1, r4, lsr lr
   17aa0:	andeq	r7, r1, r4, lsr lr
   17aa4:			; <UNDEFINED> instruction: 0x00017eb4
   17aa8:	mov	r1, #0
   17aac:	lsl	r3, r9, #10
   17ab0:	lsl	r0, r8, #10
   17ab4:	lsr	r2, r9, #22
   17ab8:	cmp	r1, r9, lsr #22
   17abc:	orr	r3, r3, r8, lsr #22
   17ac0:	mvnne	r0, #0
   17ac4:	movwne	r2, #1
   17ac8:	cmp	r1, r9, lsr #22
   17acc:	b	17b50 <__assert_fail@plt+0x6404>
   17ad0:	ldr	r0, [sp, #12]
   17ad4:	orr	r6, r6, #2
   17ad8:	b	17f44 <__assert_fail@plt+0x67f8>
   17adc:	cmp	r7, #115	; 0x73
   17ae0:	bgt	17c00 <__assert_fail@plt+0x64b4>
   17ae4:	sub	r0, r7, #98	; 0x62
   17ae8:	cmp	r0, #11
   17aec:	bhi	17dc0 <__assert_fail@plt+0x6674>
   17af0:	add	r1, pc, #4
   17af4:	mov	r2, #0
   17af8:	ldr	pc, [r1, r0, lsl #2]
   17afc:	andeq	r7, r1, ip, lsr #22
   17b00:	andeq	r7, r1, ip, lsl pc
   17b04:	andeq	r7, r1, r4, lsr lr
   17b08:	andeq	r7, r1, r4, lsr lr
   17b0c:	andeq	r7, r1, r4, lsr lr
   17b10:	andeq	r7, r1, r8, lsr ip
   17b14:	andeq	r7, r1, r4, lsr lr
   17b18:	andeq	r7, r1, r4, lsr lr
   17b1c:	andeq	r7, r1, r4, lsr lr
   17b20:	andeq	r7, r1, r4, lsr #25
   17b24:	andeq	r7, r1, r4, lsr lr
   17b28:	andeq	r7, r1, r8, ror #25
   17b2c:	mov	r1, #0
   17b30:	lsl	r3, r9, #9
   17b34:	lsl	r0, r8, #9
   17b38:	lsr	r2, r9, #23
   17b3c:	cmp	r1, r9, lsr #23
   17b40:	orr	r3, r3, r8, lsr #23
   17b44:	mvnne	r0, #0
   17b48:	movwne	r2, #1
   17b4c:	cmp	r1, r9, lsr #23
   17b50:	mvnne	r3, #0
   17b54:	mov	r8, r0
   17b58:	mov	r9, r3
   17b5c:	b	17f1c <__assert_fail@plt+0x67d0>
   17b60:	cmp	r0, #105	; 0x69
   17b64:	mov	r3, #0
   17b68:	bne	17a4c <__assert_fail@plt+0x6300>
   17b6c:	ldrb	r0, [r5, #2]
   17b70:	mov	r1, #1
   17b74:	cmp	r0, #66	; 0x42
   17b78:	movweq	r1, #3
   17b7c:	str	r1, [sp, #8]
   17b80:	b	17a4c <__assert_fail@plt+0x6300>
   17b84:	cmp	r7, #84	; 0x54
   17b88:	beq	17d54 <__assert_fail@plt+0x6608>
   17b8c:	cmp	r7, #89	; 0x59
   17b90:	bne	17e34 <__assert_fail@plt+0x66e8>
   17b94:	mvn	r0, #0
   17b98:	mvn	r1, #0
   17b9c:	mov	r2, r4
   17ba0:	mov	r5, r3
   17ba4:	bl	18484 <__assert_fail@plt+0x6d38>
   17ba8:	mov	ip, r5
   17bac:	mvn	lr, #0
   17bb0:	mov	r2, #0
   17bb4:	mvn	r3, #7
   17bb8:	mov	r5, r8
   17bbc:	mov	r7, r9
   17bc0:	umull	r8, r6, r5, r4
   17bc4:	mvn	r9, #0
   17bc8:	mla	r6, r5, ip, r6
   17bcc:	subs	r5, r0, r5
   17bd0:	sbcs	r5, r1, r7
   17bd4:	mov	r5, #0
   17bd8:	movwcc	r5, #1
   17bdc:	cmp	r5, #0
   17be0:	mlaeq	r9, r7, r4, r6
   17be4:	movne	r8, lr
   17be8:	orrne	r2, r2, #1
   17bec:	adds	r3, r3, #1
   17bf0:	mov	r5, r8
   17bf4:	mov	r7, r9
   17bf8:	bcc	17bc0 <__assert_fail@plt+0x6474>
   17bfc:	b	17f1c <__assert_fail@plt+0x67d0>
   17c00:	cmp	r7, #116	; 0x74
   17c04:	beq	17d54 <__assert_fail@plt+0x6608>
   17c08:	cmp	r7, #119	; 0x77
   17c0c:	bne	17e34 <__assert_fail@plt+0x66e8>
   17c10:	lsl	r1, r9, #1
   17c14:	cmp	r9, #0
   17c18:	lsl	r0, r8, #1
   17c1c:	lsr	r2, r9, #31
   17c20:	orr	r1, r1, r8, lsr #31
   17c24:	mvnmi	r0, #0
   17c28:	mvnmi	r1, #0
   17c2c:	mov	r8, r0
   17c30:	mov	r9, r1
   17c34:	b	17f1c <__assert_fail@plt+0x67d0>
   17c38:	mvn	r0, #0
   17c3c:	mvn	r1, #0
   17c40:	mov	r2, r4
   17c44:	mov	r5, r3
   17c48:	bl	18484 <__assert_fail@plt+0x6d38>
   17c4c:	mov	ip, r5
   17c50:	mvn	lr, #0
   17c54:	mov	r2, #0
   17c58:	mvn	r3, #2
   17c5c:	mov	r6, r8
   17c60:	mov	r5, r9
   17c64:	umull	r8, r7, r6, r4
   17c68:	mvn	r9, #0
   17c6c:	mla	r7, r6, ip, r7
   17c70:	subs	r6, r0, r6
   17c74:	sbcs	r6, r1, r5
   17c78:	mov	r6, #0
   17c7c:	movwcc	r6, #1
   17c80:	cmp	r6, #0
   17c84:	mlaeq	r9, r5, r4, r7
   17c88:	movne	r8, lr
   17c8c:	orrne	r2, r2, #1
   17c90:	adds	r3, r3, #1
   17c94:	mov	r6, r8
   17c98:	mov	r5, r9
   17c9c:	bcc	17c64 <__assert_fail@plt+0x6518>
   17ca0:	b	17f1c <__assert_fail@plt+0x67d0>
   17ca4:	mvn	r0, #0
   17ca8:	mvn	r1, #0
   17cac:	mov	r2, r4
   17cb0:	mov	r5, r3
   17cb4:	bl	18484 <__assert_fail@plt+0x6d38>
   17cb8:	subs	r0, r0, r8
   17cbc:	mov	r2, #0
   17cc0:	sbcs	r0, r1, r9
   17cc4:	umull	r0, r1, r8, r4
   17cc8:	movwcc	r2, #1
   17ccc:	cmp	r2, #0
   17cd0:	mla	r1, r8, r5, r1
   17cd4:	mvnne	r0, #0
   17cd8:	mla	r9, r9, r4, r1
   17cdc:	mvnne	r9, #0
   17ce0:	mov	r8, r0
   17ce4:	b	17f1c <__assert_fail@plt+0x67d0>
   17ce8:	mvn	r0, #0
   17cec:	mvn	r1, #0
   17cf0:	mov	r2, r4
   17cf4:	mov	r5, r3
   17cf8:	bl	18484 <__assert_fail@plt+0x6d38>
   17cfc:	mov	ip, r5
   17d00:	mvn	lr, #0
   17d04:	mov	r2, #0
   17d08:	mvn	r3, #1
   17d0c:	mov	r6, r8
   17d10:	mov	r5, r9
   17d14:	umull	r8, r7, r6, r4
   17d18:	mvn	r9, #0
   17d1c:	mla	r7, r6, ip, r7
   17d20:	subs	r6, r0, r6
   17d24:	sbcs	r6, r1, r5
   17d28:	mov	r6, #0
   17d2c:	movwcc	r6, #1
   17d30:	cmp	r6, #0
   17d34:	mlaeq	r9, r5, r4, r7
   17d38:	movne	r8, lr
   17d3c:	orrne	r2, r2, #1
   17d40:	adds	r3, r3, #1
   17d44:	mov	r6, r8
   17d48:	mov	r5, r9
   17d4c:	bcc	17d14 <__assert_fail@plt+0x65c8>
   17d50:	b	17f1c <__assert_fail@plt+0x67d0>
   17d54:	mvn	r0, #0
   17d58:	mvn	r1, #0
   17d5c:	mov	r2, r4
   17d60:	mov	r5, r3
   17d64:	bl	18484 <__assert_fail@plt+0x6d38>
   17d68:	mov	ip, r5
   17d6c:	mvn	lr, #0
   17d70:	mov	r2, #0
   17d74:	mvn	r3, #3
   17d78:	mov	r6, r8
   17d7c:	mov	r5, r9
   17d80:	umull	r8, r7, r6, r4
   17d84:	mvn	r9, #0
   17d88:	mla	r7, r6, ip, r7
   17d8c:	subs	r6, r0, r6
   17d90:	sbcs	r6, r1, r5
   17d94:	mov	r6, #0
   17d98:	movwcc	r6, #1
   17d9c:	cmp	r6, #0
   17da0:	mlaeq	r9, r5, r4, r7
   17da4:	movne	r8, lr
   17da8:	orrne	r2, r2, #1
   17dac:	adds	r3, r3, #1
   17db0:	mov	r6, r8
   17db4:	mov	r5, r9
   17db8:	bcc	17d80 <__assert_fail@plt+0x6634>
   17dbc:	b	17f1c <__assert_fail@plt+0x67d0>
   17dc0:	cmp	r7, #90	; 0x5a
   17dc4:	bne	17e34 <__assert_fail@plt+0x66e8>
   17dc8:	mvn	r0, #0
   17dcc:	mvn	r1, #0
   17dd0:	mov	r2, r4
   17dd4:	mov	r5, r3
   17dd8:	bl	18484 <__assert_fail@plt+0x6d38>
   17ddc:	mov	ip, r5
   17de0:	mvn	lr, #0
   17de4:	mov	r2, #0
   17de8:	mvn	r3, #6
   17dec:	mov	r5, r8
   17df0:	mov	r7, r9
   17df4:	umull	r8, r6, r5, r4
   17df8:	mvn	r9, #0
   17dfc:	mla	r6, r5, ip, r6
   17e00:	subs	r5, r0, r5
   17e04:	sbcs	r5, r1, r7
   17e08:	mov	r5, #0
   17e0c:	movwcc	r5, #1
   17e10:	cmp	r5, #0
   17e14:	mlaeq	r9, r7, r4, r6
   17e18:	movne	r8, lr
   17e1c:	orrne	r2, r2, #1
   17e20:	adds	r3, r3, #1
   17e24:	mov	r5, r8
   17e28:	mov	r7, r9
   17e2c:	bcc	17df4 <__assert_fail@plt+0x66a8>
   17e30:	b	17f1c <__assert_fail@plt+0x67d0>
   17e34:	ldr	r0, [sp, #12]
   17e38:	strd	r8, [r0]
   17e3c:	ldr	r6, [sp, #4]
   17e40:	orr	r6, r6, #2
   17e44:	b	17f48 <__assert_fail@plt+0x67fc>
   17e48:	mvn	r0, #0
   17e4c:	mvn	r1, #0
   17e50:	mov	r2, r4
   17e54:	mov	r5, r3
   17e58:	bl	18484 <__assert_fail@plt+0x6d38>
   17e5c:	mov	ip, r5
   17e60:	mvn	lr, #0
   17e64:	mov	r2, #0
   17e68:	mvn	r3, #5
   17e6c:	mov	r5, r8
   17e70:	mov	r7, r9
   17e74:	umull	r8, r6, r5, r4
   17e78:	mvn	r9, #0
   17e7c:	mla	r6, r5, ip, r6
   17e80:	subs	r5, r0, r5
   17e84:	sbcs	r5, r1, r7
   17e88:	mov	r5, #0
   17e8c:	movwcc	r5, #1
   17e90:	cmp	r5, #0
   17e94:	mlaeq	r9, r7, r4, r6
   17e98:	movne	r8, lr
   17e9c:	orrne	r2, r2, #1
   17ea0:	adds	r3, r3, #1
   17ea4:	mov	r5, r8
   17ea8:	mov	r7, r9
   17eac:	bcc	17e74 <__assert_fail@plt+0x6728>
   17eb0:	b	17f1c <__assert_fail@plt+0x67d0>
   17eb4:	mvn	r0, #0
   17eb8:	mvn	r1, #0
   17ebc:	mov	r2, r4
   17ec0:	mov	r5, r3
   17ec4:	bl	18484 <__assert_fail@plt+0x6d38>
   17ec8:	mov	ip, r5
   17ecc:	mvn	lr, #0
   17ed0:	mov	r2, #0
   17ed4:	mvn	r3, #4
   17ed8:	mov	r5, r8
   17edc:	mov	r7, r9
   17ee0:	umull	r8, r6, r5, r4
   17ee4:	mvn	r9, #0
   17ee8:	mla	r6, r5, ip, r6
   17eec:	subs	r5, r0, r5
   17ef0:	sbcs	r5, r1, r7
   17ef4:	mov	r5, #0
   17ef8:	movwcc	r5, #1
   17efc:	cmp	r5, #0
   17f00:	mlaeq	r9, r7, r4, r6
   17f04:	movne	r8, lr
   17f08:	orrne	r2, r2, #1
   17f0c:	adds	r3, r3, #1
   17f10:	mov	r5, r8
   17f14:	mov	r7, r9
   17f18:	bcc	17ee0 <__assert_fail@plt+0x6794>
   17f1c:	ldr	r1, [sp]
   17f20:	ldr	r3, [sp, #8]
   17f24:	ldr	r6, [sp, #4]
   17f28:	add	r0, r1, r3
   17f2c:	orr	r6, r2, r6
   17f30:	str	r0, [sl]
   17f34:	ldrb	r0, [r1, r3]
   17f38:	cmp	r0, #0
   17f3c:	orrne	r6, r6, #2
   17f40:	ldr	r0, [sp, #12]
   17f44:	strd	r8, [r0]
   17f48:	mov	r0, r6
   17f4c:	sub	sp, fp, #28
   17f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f54:	movw	r0, #40145	; 0x9cd1
   17f58:	movw	r1, #40183	; 0x9cf7
   17f5c:	movw	r3, #40199	; 0x9d07
   17f60:	mov	r2, #85	; 0x55
   17f64:	movt	r0, #1
   17f68:	movt	r1, #1
   17f6c:	movt	r3, #1
   17f70:	bl	1174c <__assert_fail@plt>
   17f74:	clz	r2, r1
   17f78:	clz	r3, r0
   17f7c:	lsr	r2, r2, #5
   17f80:	lsr	r3, r3, #5
   17f84:	orrs	r2, r3, r2
   17f88:	movwne	r1, #1
   17f8c:	movwne	r0, #1
   17f90:	cmp	r1, #0
   17f94:	beq	17fc4 <__assert_fail@plt+0x6878>
   17f98:	mvn	r2, #-2147483648	; 0x80000000
   17f9c:	udiv	r2, r2, r1
   17fa0:	cmp	r2, r0
   17fa4:	bcs	17fc4 <__assert_fail@plt+0x6878>
   17fa8:	push	{fp, lr}
   17fac:	mov	fp, sp
   17fb0:	bl	115f0 <__errno_location@plt>
   17fb4:	mov	r1, #12
   17fb8:	str	r1, [r0]
   17fbc:	mov	r0, #0
   17fc0:	pop	{fp, pc}
   17fc4:	b	113b0 <calloc@plt>
   17fc8:	cmp	r0, #0
   17fcc:	movweq	r0, #1
   17fd0:	cmn	r0, #1
   17fd4:	ble	17fdc <__assert_fail@plt+0x6890>
   17fd8:	b	1153c <malloc@plt>
   17fdc:	push	{fp, lr}
   17fe0:	mov	fp, sp
   17fe4:	bl	115f0 <__errno_location@plt>
   17fe8:	mov	r1, #12
   17fec:	str	r1, [r0]
   17ff0:	mov	r0, #0
   17ff4:	pop	{fp, pc}
   17ff8:	push	{fp, lr}
   17ffc:	mov	fp, sp
   18000:	cmp	r0, #0
   18004:	beq	18020 <__assert_fail@plt+0x68d4>
   18008:	cmp	r1, #0
   1800c:	beq	1802c <__assert_fail@plt+0x68e0>
   18010:	cmn	r1, #1
   18014:	ble	18034 <__assert_fail@plt+0x68e8>
   18018:	pop	{fp, lr}
   1801c:	b	1147c <realloc@plt>
   18020:	mov	r0, r1
   18024:	pop	{fp, lr}
   18028:	b	17fc8 <__assert_fail@plt+0x687c>
   1802c:	bl	14e40 <__assert_fail@plt+0x36f4>
   18030:	b	18040 <__assert_fail@plt+0x68f4>
   18034:	bl	115f0 <__errno_location@plt>
   18038:	mov	r1, #12
   1803c:	str	r1, [r0]
   18040:	mov	r0, #0
   18044:	pop	{fp, pc}
   18048:	push	{r4, r5, r6, sl, fp, lr}
   1804c:	add	fp, sp, #16
   18050:	mov	r4, r0
   18054:	bl	114f4 <__fpending@plt>
   18058:	mov	r5, r0
   1805c:	mov	r0, r4
   18060:	bl	11500 <ferror_unlocked@plt>
   18064:	mov	r6, r0
   18068:	mov	r0, r4
   1806c:	bl	14ca4 <__assert_fail@plt+0x3558>
   18070:	cmp	r6, #0
   18074:	beq	18094 <__assert_fail@plt+0x6948>
   18078:	mvn	r4, #0
   1807c:	cmp	r0, #0
   18080:	bne	180c0 <__assert_fail@plt+0x6974>
   18084:	bl	115f0 <__errno_location@plt>
   18088:	mov	r1, #0
   1808c:	str	r1, [r0]
   18090:	b	180c0 <__assert_fail@plt+0x6974>
   18094:	cmp	r0, #0
   18098:	mov	r4, r0
   1809c:	mvnne	r4, #0
   180a0:	cmp	r5, #0
   180a4:	bne	180c0 <__assert_fail@plt+0x6974>
   180a8:	cmp	r0, #0
   180ac:	beq	180c0 <__assert_fail@plt+0x6974>
   180b0:	bl	115f0 <__errno_location@plt>
   180b4:	ldr	r0, [r0]
   180b8:	subs	r4, r0, #9
   180bc:	mvnne	r4, #0
   180c0:	mov	r0, r4
   180c4:	pop	{r4, r5, r6, sl, fp, pc}
   180c8:	push	{fp, lr}
   180cc:	mov	fp, sp
   180d0:	mov	r0, #14
   180d4:	bl	116d4 <nl_langinfo@plt>
   180d8:	movw	r1, #35725	; 0x8b8d
   180dc:	cmp	r0, #0
   180e0:	movt	r1, #1
   180e4:	movne	r1, r0
   180e8:	movw	r0, #40278	; 0x9d56
   180ec:	ldrb	r2, [r1]
   180f0:	movt	r0, #1
   180f4:	cmp	r2, #0
   180f8:	movne	r0, r1
   180fc:	pop	{fp, pc}
   18100:	push	{r4, r5, r6, r7, fp, lr}
   18104:	add	fp, sp, #16
   18108:	sub	sp, sp, #8
   1810c:	cmp	r0, #0
   18110:	add	r5, sp, #4
   18114:	mov	r7, r2
   18118:	mov	r4, r1
   1811c:	movne	r5, r0
   18120:	mov	r0, r5
   18124:	bl	1150c <mbrtowc@plt>
   18128:	mov	r6, r0
   1812c:	cmp	r7, #0
   18130:	beq	18158 <__assert_fail@plt+0x6a0c>
   18134:	cmn	r6, #2
   18138:	bcc	18158 <__assert_fail@plt+0x6a0c>
   1813c:	mov	r0, #0
   18140:	bl	18384 <__assert_fail@plt+0x6c38>
   18144:	cmp	r0, #0
   18148:	bne	18158 <__assert_fail@plt+0x6a0c>
   1814c:	ldrb	r0, [r4]
   18150:	mov	r6, #1
   18154:	str	r0, [r5]
   18158:	mov	r0, r6
   1815c:	sub	sp, fp, #16
   18160:	pop	{r4, r5, r6, r7, fp, pc}
   18164:	cmp	r2, #0
   18168:	beq	18198 <__assert_fail@plt+0x6a4c>
   1816c:	mvn	r3, #0
   18170:	udiv	r3, r3, r2
   18174:	cmp	r3, r1
   18178:	bcs	18198 <__assert_fail@plt+0x6a4c>
   1817c:	push	{fp, lr}
   18180:	mov	fp, sp
   18184:	bl	115f0 <__errno_location@plt>
   18188:	mov	r1, #12
   1818c:	str	r1, [r0]
   18190:	mov	r0, #0
   18194:	pop	{fp, pc}
   18198:	mul	r1, r2, r1
   1819c:	b	17ff8 <__assert_fail@plt+0x68ac>
   181a0:	mov	r1, #0
   181a4:	mov	r2, #3
   181a8:	b	181ac <__assert_fail@plt+0x6a60>
   181ac:	sub	sp, sp, #8
   181b0:	push	{r4, r5, r6, r7, fp, lr}
   181b4:	add	fp, sp, #16
   181b8:	sub	sp, sp, #8
   181bc:	mov	r5, r0
   181c0:	add	r0, fp, #8
   181c4:	cmp	r1, #11
   181c8:	str	r2, [fp, #8]
   181cc:	str	r3, [fp, #12]
   181d0:	str	r0, [sp, #4]
   181d4:	bhi	18210 <__assert_fail@plt+0x6ac4>
   181d8:	mov	r0, #1
   181dc:	movw	r2, #1300	; 0x514
   181e0:	tst	r2, r0, lsl r1
   181e4:	bne	182c8 <__assert_fail@plt+0x6b7c>
   181e8:	movw	r2, #2570	; 0xa0a
   181ec:	tst	r2, r0, lsl r1
   181f0:	bne	18238 <__assert_fail@plt+0x6aec>
   181f4:	cmp	r1, #0
   181f8:	bne	18210 <__assert_fail@plt+0x6ac4>
   181fc:	ldr	r0, [sp, #4]
   18200:	add	r1, r0, #4
   18204:	str	r1, [sp, #4]
   18208:	mov	r1, #0
   1820c:	b	182d4 <__assert_fail@plt+0x6b88>
   18210:	sub	r0, r1, #1024	; 0x400
   18214:	cmp	r0, #10
   18218:	bhi	182c8 <__assert_fail@plt+0x6b7c>
   1821c:	mov	r2, #1
   18220:	movw	r3, #645	; 0x285
   18224:	tst	r3, r2, lsl r0
   18228:	bne	182c8 <__assert_fail@plt+0x6b7c>
   1822c:	movw	r3, #1282	; 0x502
   18230:	tst	r3, r2, lsl r0
   18234:	beq	18244 <__assert_fail@plt+0x6af8>
   18238:	mov	r0, r5
   1823c:	bl	1168c <fcntl64@plt>
   18240:	b	182e0 <__assert_fail@plt+0x6b94>
   18244:	cmp	r0, #6
   18248:	bne	182c8 <__assert_fail@plt+0x6b7c>
   1824c:	ldr	r0, [sp, #4]
   18250:	movw	r7, #42608	; 0xa670
   18254:	movt	r7, #2
   18258:	add	r1, r0, #4
   1825c:	str	r1, [sp, #4]
   18260:	ldr	r6, [r0]
   18264:	ldr	r0, [r7]
   18268:	cmp	r0, #0
   1826c:	bmi	18304 <__assert_fail@plt+0x6bb8>
   18270:	mov	r0, r5
   18274:	movw	r1, #1030	; 0x406
   18278:	mov	r2, r6
   1827c:	bl	1168c <fcntl64@plt>
   18280:	mov	r4, r0
   18284:	cmn	r0, #1
   18288:	bgt	182f8 <__assert_fail@plt+0x6bac>
   1828c:	bl	115f0 <__errno_location@plt>
   18290:	ldr	r0, [r0]
   18294:	cmp	r0, #22
   18298:	bne	182f8 <__assert_fail@plt+0x6bac>
   1829c:	mov	r0, r5
   182a0:	mov	r1, #0
   182a4:	mov	r2, r6
   182a8:	bl	1168c <fcntl64@plt>
   182ac:	mov	r4, r0
   182b0:	cmp	r0, #0
   182b4:	bmi	182e4 <__assert_fail@plt+0x6b98>
   182b8:	mvn	r0, #0
   182bc:	str	r0, [r7]
   182c0:	mov	r0, #1
   182c4:	b	18328 <__assert_fail@plt+0x6bdc>
   182c8:	ldr	r0, [sp, #4]
   182cc:	add	r2, r0, #4
   182d0:	str	r2, [sp, #4]
   182d4:	ldr	r2, [r0]
   182d8:	mov	r0, r5
   182dc:	bl	1168c <fcntl64@plt>
   182e0:	mov	r4, r0
   182e4:	mov	r0, r4
   182e8:	sub	sp, fp, #16
   182ec:	pop	{r4, r5, r6, r7, fp, lr}
   182f0:	add	sp, sp, #8
   182f4:	bx	lr
   182f8:	mov	r0, #1
   182fc:	str	r0, [r7]
   18300:	b	182e4 <__assert_fail@plt+0x6b98>
   18304:	mov	r0, r5
   18308:	mov	r1, #0
   1830c:	mov	r2, r6
   18310:	bl	1168c <fcntl64@plt>
   18314:	mov	r4, r0
   18318:	ldr	r0, [r7]
   1831c:	add	r0, r0, #1
   18320:	clz	r0, r0
   18324:	lsr	r0, r0, #5
   18328:	cmp	r0, #0
   1832c:	beq	182e4 <__assert_fail@plt+0x6b98>
   18330:	cmp	r4, #0
   18334:	bmi	182e4 <__assert_fail@plt+0x6b98>
   18338:	mov	r0, r4
   1833c:	mov	r1, #1
   18340:	bl	1168c <fcntl64@plt>
   18344:	cmp	r0, #0
   18348:	bmi	18364 <__assert_fail@plt+0x6c18>
   1834c:	orr	r2, r0, #1
   18350:	mov	r0, r4
   18354:	mov	r1, #2
   18358:	bl	1168c <fcntl64@plt>
   1835c:	cmn	r0, #1
   18360:	bne	182e4 <__assert_fail@plt+0x6b98>
   18364:	bl	115f0 <__errno_location@plt>
   18368:	ldr	r6, [r0]
   1836c:	mov	r5, r0
   18370:	mov	r0, r4
   18374:	bl	11734 <close@plt>
   18378:	str	r6, [r5]
   1837c:	mvn	r4, #0
   18380:	b	182e4 <__assert_fail@plt+0x6b98>
   18384:	push	{r4, sl, fp, lr}
   18388:	add	fp, sp, #8
   1838c:	sub	sp, sp, #264	; 0x108
   18390:	add	r1, sp, #7
   18394:	movw	r2, #257	; 0x101
   18398:	bl	183f0 <__assert_fail@plt+0x6ca4>
   1839c:	mov	r4, #0
   183a0:	cmp	r0, #0
   183a4:	bne	183e4 <__assert_fail@plt+0x6c98>
   183a8:	movw	r1, #40284	; 0x9d5c
   183ac:	add	r0, sp, #7
   183b0:	mov	r2, #2
   183b4:	movt	r1, #1
   183b8:	bl	1159c <bcmp@plt>
   183bc:	cmp	r0, #0
   183c0:	beq	183e4 <__assert_fail@plt+0x6c98>
   183c4:	movw	r1, #40286	; 0x9d5e
   183c8:	add	r0, sp, #7
   183cc:	mov	r2, #6
   183d0:	movt	r1, #1
   183d4:	bl	1159c <bcmp@plt>
   183d8:	cmp	r0, #0
   183dc:	mov	r4, r0
   183e0:	movwne	r4, #1
   183e4:	mov	r0, r4
   183e8:	sub	sp, fp, #8
   183ec:	pop	{r4, sl, fp, pc}
   183f0:	push	{r4, r5, r6, r7, fp, lr}
   183f4:	add	fp, sp, #16
   183f8:	mov	r4, r1
   183fc:	mov	r1, #0
   18400:	mov	r6, r2
   18404:	bl	11698 <setlocale@plt>
   18408:	cmp	r0, #0
   1840c:	beq	18438 <__assert_fail@plt+0x6cec>
   18410:	mov	r7, r0
   18414:	bl	115a8 <strlen@plt>
   18418:	cmp	r0, r6
   1841c:	bcs	1844c <__assert_fail@plt+0x6d00>
   18420:	add	r2, r0, #1
   18424:	mov	r0, r4
   18428:	mov	r1, r7
   1842c:	bl	11434 <memcpy@plt>
   18430:	mov	r5, #0
   18434:	b	18474 <__assert_fail@plt+0x6d28>
   18438:	cmp	r6, #0
   1843c:	mov	r5, #22
   18440:	movne	r0, #0
   18444:	strbne	r0, [r4]
   18448:	b	18474 <__assert_fail@plt+0x6d28>
   1844c:	mov	r5, #34	; 0x22
   18450:	cmp	r6, #0
   18454:	beq	18474 <__assert_fail@plt+0x6d28>
   18458:	sub	r6, r6, #1
   1845c:	mov	r0, r4
   18460:	mov	r1, r7
   18464:	mov	r2, r6
   18468:	bl	11434 <memcpy@plt>
   1846c:	mov	r0, #0
   18470:	strb	r0, [r4, r6]
   18474:	mov	r0, r5
   18478:	pop	{r4, r5, r6, r7, fp, pc}
   1847c:	mov	r1, #0
   18480:	b	11698 <setlocale@plt>
   18484:	cmp	r3, #0
   18488:	cmpeq	r2, #0
   1848c:	bne	184a4 <__assert_fail@plt+0x6d58>
   18490:	cmp	r1, #0
   18494:	cmpeq	r0, #0
   18498:	mvnne	r1, #0
   1849c:	mvnne	r0, #0
   184a0:	b	184c0 <__assert_fail@plt+0x6d74>
   184a4:	sub	sp, sp, #8
   184a8:	push	{sp, lr}
   184ac:	bl	184d0 <__assert_fail@plt+0x6d84>
   184b0:	ldr	lr, [sp, #4]
   184b4:	add	sp, sp, #8
   184b8:	pop	{r2, r3}
   184bc:	bx	lr
   184c0:	push	{r1, lr}
   184c4:	mov	r0, #8
   184c8:	bl	113c8 <raise@plt>
   184cc:	pop	{r1, pc}
   184d0:	cmp	r1, r3
   184d4:	cmpeq	r0, r2
   184d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184dc:	mov	r4, r0
   184e0:	movcc	r0, #0
   184e4:	mov	r5, r1
   184e8:	ldr	lr, [sp, #36]	; 0x24
   184ec:	movcc	r1, r0
   184f0:	bcc	185ec <__assert_fail@plt+0x6ea0>
   184f4:	cmp	r3, #0
   184f8:	clzeq	ip, r2
   184fc:	clzne	ip, r3
   18500:	addeq	ip, ip, #32
   18504:	cmp	r5, #0
   18508:	clzeq	r1, r4
   1850c:	addeq	r1, r1, #32
   18510:	clzne	r1, r5
   18514:	sub	ip, ip, r1
   18518:	sub	sl, ip, #32
   1851c:	lsl	r9, r3, ip
   18520:	rsb	fp, ip, #32
   18524:	orr	r9, r9, r2, lsl sl
   18528:	orr	r9, r9, r2, lsr fp
   1852c:	lsl	r8, r2, ip
   18530:	cmp	r5, r9
   18534:	cmpeq	r4, r8
   18538:	movcc	r0, #0
   1853c:	movcc	r1, r0
   18540:	bcc	1855c <__assert_fail@plt+0x6e10>
   18544:	mov	r0, #1
   18548:	subs	r4, r4, r8
   1854c:	lsl	r1, r0, sl
   18550:	orr	r1, r1, r0, lsr fp
   18554:	lsl	r0, r0, ip
   18558:	sbc	r5, r5, r9
   1855c:	cmp	ip, #0
   18560:	beq	185ec <__assert_fail@plt+0x6ea0>
   18564:	lsr	r6, r8, #1
   18568:	orr	r6, r6, r9, lsl #31
   1856c:	lsr	r7, r9, #1
   18570:	mov	r2, ip
   18574:	b	18598 <__assert_fail@plt+0x6e4c>
   18578:	subs	r3, r4, r6
   1857c:	sbc	r8, r5, r7
   18580:	adds	r3, r3, r3
   18584:	adc	r8, r8, r8
   18588:	adds	r4, r3, #1
   1858c:	adc	r5, r8, #0
   18590:	subs	r2, r2, #1
   18594:	beq	185b4 <__assert_fail@plt+0x6e68>
   18598:	cmp	r5, r7
   1859c:	cmpeq	r4, r6
   185a0:	bcs	18578 <__assert_fail@plt+0x6e2c>
   185a4:	adds	r4, r4, r4
   185a8:	adc	r5, r5, r5
   185ac:	subs	r2, r2, #1
   185b0:	bne	18598 <__assert_fail@plt+0x6e4c>
   185b4:	lsr	r3, r4, ip
   185b8:	orr	r3, r3, r5, lsl fp
   185bc:	lsr	r2, r5, ip
   185c0:	orr	r3, r3, r5, lsr sl
   185c4:	adds	r0, r0, r4
   185c8:	mov	r4, r3
   185cc:	lsl	r3, r2, ip
   185d0:	orr	r3, r3, r4, lsl sl
   185d4:	lsl	ip, r4, ip
   185d8:	orr	r3, r3, r4, lsr fp
   185dc:	adc	r1, r1, r5
   185e0:	subs	r0, r0, ip
   185e4:	mov	r5, r2
   185e8:	sbc	r1, r1, r3
   185ec:	cmp	lr, #0
   185f0:	strdne	r4, [lr]
   185f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   185fc:	mov	r7, r0
   18600:	ldr	r6, [pc, #72]	; 18650 <__assert_fail@plt+0x6f04>
   18604:	ldr	r5, [pc, #72]	; 18654 <__assert_fail@plt+0x6f08>
   18608:	add	r6, pc, r6
   1860c:	add	r5, pc, r5
   18610:	sub	r6, r6, r5
   18614:	mov	r8, r1
   18618:	mov	r9, r2
   1861c:	bl	11384 <fdopen@plt-0x20>
   18620:	asrs	r6, r6, #2
   18624:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18628:	mov	r4, #0
   1862c:	add	r4, r4, #1
   18630:	ldr	r3, [r5], #4
   18634:	mov	r2, r9
   18638:	mov	r1, r8
   1863c:	mov	r0, r7
   18640:	blx	r3
   18644:	cmp	r6, r4
   18648:	bne	1862c <__assert_fail@plt+0x6ee0>
   1864c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18650:	strdeq	r1, [r1], -ip
   18654:	strdeq	r1, [r1], -r4
   18658:	bx	lr
   1865c:	ldr	r3, [pc, #12]	; 18670 <__assert_fail@plt+0x6f24>
   18660:	mov	r1, #0
   18664:	add	r3, pc, r3
   18668:	ldr	r2, [r3]
   1866c:	b	11608 <__cxa_atexit@plt>
   18670:	andeq	r1, r1, r8, ror #21
   18674:	mov	r2, r1
   18678:	mov	r1, r0
   1867c:	mov	r0, #3
   18680:	b	114ac <__fxstat64@plt>

Disassembly of section .fini:

00018684 <.fini>:
   18684:	push	{r3, lr}
   18688:	pop	{r3, pc}
