
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_json_parser:     file format elf32-littlearm


Disassembly of section .init:

00012574 <.init>:
   12574:	push	{r3, lr}
   12578:	bl	126f4 <_start@@Base+0x3c>
   1257c:	pop	{r3, pc}

Disassembly of section .plt:

00012580 <fopen@plt-0x14>:
   12580:	push	{lr}		; (str lr, [sp, #-4]!)
   12584:	ldr	lr, [pc, #4]	; 12590 <fopen@plt-0x4>
   12588:	add	lr, pc, lr
   1258c:	ldr	pc, [lr, #8]!
   12590:	andeq	fp, r2, r0, ror sl

00012594 <fopen@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #176128	; 0x2b000
   1259c:	ldr	pc, [ip, #2672]!	; 0xa70

000125a0 <free@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #176128	; 0x2b000
   125a8:	ldr	pc, [ip, #2664]!	; 0xa68

000125ac <memcpy@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #176128	; 0x2b000
   125b4:	ldr	pc, [ip, #2656]!	; 0xa60

000125b8 <ftell@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #176128	; 0x2b000
   125c0:	ldr	pc, [ip, #2648]!	; 0xa58

000125c4 <memcmp@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #176128	; 0x2b000
   125cc:	ldr	pc, [ip, #2640]!	; 0xa50

000125d0 <rewind@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #176128	; 0x2b000
   125d8:	ldr	pc, [ip, #2632]!	; 0xa48

000125dc <realloc@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #176128	; 0x2b000
   125e4:	ldr	pc, [ip, #2624]!	; 0xa40

000125e8 <fwrite@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #176128	; 0x2b000
   125f0:	ldr	pc, [ip, #2616]!	; 0xa38

000125f4 <fread@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #176128	; 0x2b000
   125fc:	ldr	pc, [ip, #2608]!	; 0xa30

00012600 <malloc@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #176128	; 0x2b000
   12608:	ldr	pc, [ip, #2600]!	; 0xa28

0001260c <__libc_start_main@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #176128	; 0x2b000
   12614:	ldr	pc, [ip, #2592]!	; 0xa20

00012618 <__gmon_start__@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #176128	; 0x2b000
   12620:	ldr	pc, [ip, #2584]!	; 0xa18

00012624 <exit@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #176128	; 0x2b000
   1262c:	ldr	pc, [ip, #2576]!	; 0xa10

00012630 <strlen@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #176128	; 0x2b000
   12638:	ldr	pc, [ip, #2568]!	; 0xa08

0001263c <fprintf@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #176128	; 0x2b000
   12644:	ldr	pc, [ip, #2560]!	; 0xa00

00012648 <posix_memalign@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #176128	; 0x2b000
   12650:	ldr	pc, [ip, #2552]!	; 0x9f8

00012654 <memset@plt>:
   12654:	add	ip, pc, #0, 12
   12658:	add	ip, ip, #176128	; 0x2b000
   1265c:	ldr	pc, [ip, #2544]!	; 0x9f0

00012660 <strtod@plt>:
   12660:	add	ip, pc, #0, 12
   12664:	add	ip, ip, #176128	; 0x2b000
   12668:	ldr	pc, [ip, #2536]!	; 0x9e8

0001266c <memchr@plt>:
   1266c:	add	ip, pc, #0, 12
   12670:	add	ip, ip, #176128	; 0x2b000
   12674:	ldr	pc, [ip, #2528]!	; 0x9e0

00012678 <fclose@plt>:
   12678:	add	ip, pc, #0, 12
   1267c:	add	ip, ip, #176128	; 0x2b000
   12680:	ldr	pc, [ip, #2520]!	; 0x9d8

00012684 <fputc@plt>:
   12684:	add	ip, pc, #0, 12
   12688:	add	ip, ip, #176128	; 0x2b000
   1268c:	ldr	pc, [ip, #2512]!	; 0x9d0

00012690 <fseek@plt>:
   12690:	add	ip, pc, #0, 12
   12694:	add	ip, ip, #176128	; 0x2b000
   12698:	ldr	pc, [ip, #2504]!	; 0x9c8

0001269c <abort@plt>:
   1269c:	add	ip, pc, #0, 12
   126a0:	add	ip, ip, #176128	; 0x2b000
   126a4:	ldr	pc, [ip, #2496]!	; 0x9c0

000126a8 <__assert_fail@plt>:
   126a8:	add	ip, pc, #0, 12
   126ac:	add	ip, ip, #176128	; 0x2b000
   126b0:	ldr	pc, [ip, #2488]!	; 0x9b8

Disassembly of section .text:

000126b8 <_start@@Base>:
   126b8:	mov	fp, #0
   126bc:	mov	lr, #0
   126c0:	pop	{r1}		; (ldr r1, [sp], #4)
   126c4:	mov	r2, sp
   126c8:	push	{r2}		; (str r2, [sp, #-4]!)
   126cc:	push	{r0}		; (str r0, [sp, #-4]!)
   126d0:	ldr	ip, [pc, #16]	; 126e8 <_start@@Base+0x30>
   126d4:	push	{ip}		; (str ip, [sp, #-4]!)
   126d8:	ldr	r0, [pc, #12]	; 126ec <_start@@Base+0x34>
   126dc:	ldr	r3, [pc, #12]	; 126f0 <_start@@Base+0x38>
   126e0:	bl	1260c <__libc_start_main@plt>
   126e4:	bl	1269c <abort@plt>
   126e8:	andeq	fp, r2, r4, asr r6
   126ec:	andeq	r2, r2, ip, ror #5
   126f0:	strdeq	fp, [r2], -r4
   126f4:	ldr	r3, [pc, #20]	; 12710 <_start@@Base+0x58>
   126f8:	ldr	r2, [pc, #20]	; 12714 <_start@@Base+0x5c>
   126fc:	add	r3, pc, r3
   12700:	ldr	r2, [r3, r2]
   12704:	cmp	r2, #0
   12708:	bxeq	lr
   1270c:	b	12618 <__gmon_start__@plt>
   12710:	strdeq	fp, [r2], -ip
   12714:	andeq	r0, r0, ip, rrx
   12718:	ldr	r3, [pc, #28]	; 1273c <_start@@Base+0x84>
   1271c:	ldr	r0, [pc, #28]	; 12740 <_start@@Base+0x88>
   12720:	sub	r3, r3, r0
   12724:	cmp	r3, #6
   12728:	bxls	lr
   1272c:	ldr	r3, [pc, #16]	; 12744 <_start@@Base+0x8c>
   12730:	cmp	r3, #0
   12734:	bxeq	lr
   12738:	bx	r3
   1273c:	andeq	lr, r3, fp, asr #6
   12740:	andeq	lr, r3, r8, asr #6
   12744:	andeq	r0, r0, r0
   12748:	ldr	r1, [pc, #36]	; 12774 <_start@@Base+0xbc>
   1274c:	ldr	r0, [pc, #36]	; 12778 <_start@@Base+0xc0>
   12750:	sub	r1, r1, r0
   12754:	asr	r1, r1, #2
   12758:	add	r1, r1, r1, lsr #31
   1275c:	asrs	r1, r1, #1
   12760:	bxeq	lr
   12764:	ldr	r3, [pc, #16]	; 1277c <_start@@Base+0xc4>
   12768:	cmp	r3, #0
   1276c:	bxeq	lr
   12770:	bx	r3
   12774:	andeq	lr, r3, r8, asr #6
   12778:	andeq	lr, r3, r8, asr #6
   1277c:	andeq	r0, r0, r0
   12780:	push	{r4, lr}
   12784:	ldr	r4, [pc, #24]	; 127a4 <_start@@Base+0xec>
   12788:	ldrb	r3, [r4]
   1278c:	cmp	r3, #0
   12790:	popne	{r4, pc}
   12794:	bl	12718 <_start@@Base+0x60>
   12798:	mov	r3, #1
   1279c:	strb	r3, [r4]
   127a0:	pop	{r4, pc}
   127a4:	andeq	lr, r3, r0, asr r3
   127a8:	ldr	r0, [pc, #40]	; 127d8 <_start@@Base+0x120>
   127ac:	ldr	r3, [r0]
   127b0:	cmp	r3, #0
   127b4:	bne	127bc <_start@@Base+0x104>
   127b8:	b	12748 <_start@@Base+0x90>
   127bc:	ldr	r3, [pc, #24]	; 127dc <_start@@Base+0x124>
   127c0:	cmp	r3, #0
   127c4:	beq	127b8 <_start@@Base+0x100>
   127c8:	push	{r4, lr}
   127cc:	blx	r3
   127d0:	pop	{r4, lr}
   127d4:	b	12748 <_start@@Base+0x90>
   127d8:	andeq	sp, r3, r4, lsl pc
   127dc:	andeq	r0, r0, r0
   127e0:	push	{r4, r5, r6, r7}
   127e4:	sub	r1, r1, r0
   127e8:	cmp	r1, #8
   127ec:	movcs	r1, #8
   127f0:	sub	r1, r1, #1
   127f4:	cmp	r1, #7
   127f8:	ldrls	pc, [pc, r1, lsl #2]
   127fc:	b	1290c <_start@@Base+0x254>
   12800:	andeq	r2, r1, r0, lsl #18
   12804:	strdeq	r2, [r1], -r4
   12808:	andeq	r2, r1, r8, ror #17
   1280c:	ldrdeq	r2, [r1], -ip
   12810:	ldrdeq	r2, [r1], -r0
   12814:	andeq	r2, r1, r4, asr #17
   12818:	andeq	r2, r1, ip, lsr #16
   1281c:	andeq	r2, r1, r0, lsr #16
   12820:	ldrb	r2, [r0, #7]
   12824:	mov	r3, #0
   12828:	b	12834 <_start@@Base+0x17c>
   1282c:	mov	r2, #0
   12830:	mov	r3, #0
   12834:	ldrb	r6, [r0, #6]
   12838:	mov	r5, #0
   1283c:	lsl	r4, r6, #8
   12840:	orr	r4, r4, r2
   12844:	orr	r5, r5, r3
   12848:	ldrb	r6, [r0, #5]
   1284c:	mov	r3, #0
   12850:	lsl	r2, r6, #16
   12854:	orr	r4, r4, r2
   12858:	orr	r5, r5, r3
   1285c:	ldrb	r6, [r0, #4]
   12860:	mov	r3, #0
   12864:	lsl	r2, r6, #24
   12868:	orr	r4, r4, r2
   1286c:	orr	r5, r5, r3
   12870:	mov	r2, #0
   12874:	ldrb	r3, [r0, #3]
   12878:	orr	r4, r4, r2
   1287c:	orr	r5, r5, r3
   12880:	ldrb	r6, [r0, #2]
   12884:	mov	r2, #0
   12888:	lsl	r3, r6, #8
   1288c:	orr	r4, r4, r2
   12890:	orr	r5, r5, r3
   12894:	ldrb	r6, [r0, #1]
   12898:	mov	r2, #0
   1289c:	lsl	r3, r6, #16
   128a0:	orr	r2, r2, r4
   128a4:	orr	r3, r3, r5
   128a8:	ldrb	r4, [r0]
   128ac:	mov	r0, #0
   128b0:	lsl	r1, r4, #24
   128b4:	orr	r0, r0, r2
   128b8:	orr	r1, r1, r3
   128bc:	pop	{r4, r5, r6, r7}
   128c0:	bx	lr
   128c4:	mov	r4, #0
   128c8:	mov	r5, #0
   128cc:	b	12848 <_start@@Base+0x190>
   128d0:	mov	r4, #0
   128d4:	mov	r5, #0
   128d8:	b	1285c <_start@@Base+0x1a4>
   128dc:	mov	r4, #0
   128e0:	mov	r5, #0
   128e4:	b	12870 <_start@@Base+0x1b8>
   128e8:	mov	r4, #0
   128ec:	mov	r5, #0
   128f0:	b	12880 <_start@@Base+0x1c8>
   128f4:	mov	r4, #0
   128f8:	mov	r5, #0
   128fc:	b	12894 <_start@@Base+0x1dc>
   12900:	mov	r2, #0
   12904:	mov	r3, #0
   12908:	b	128a8 <_start@@Base+0x1f0>
   1290c:	mov	r0, #0
   12910:	mov	r1, #0
   12914:	b	128bc <_start@@Base+0x204>
   12918:	cmp	r0, #4
   1291c:	movhi	r0, #0
   12920:	movls	r0, #1
   12924:	bx	lr
   12928:	cmp	r0, #11
   1292c:	bhi	12950 <_start@@Base+0x298>
   12930:	cmp	r0, #8
   12934:	bcs	12958 <_start@@Base+0x2a0>
   12938:	cmp	r0, #0
   1293c:	beq	12958 <_start@@Base+0x2a0>
   12940:	cmp	r0, #2
   12944:	beq	12958 <_start@@Base+0x2a0>
   12948:	mov	r0, #0
   1294c:	bx	lr
   12950:	cmp	r0, #255	; 0xff
   12954:	bne	12948 <_start@@Base+0x290>
   12958:	mov	r0, #1
   1295c:	bx	lr
   12960:	push	{r4, r5, r6, r7, r8, r9, lr}
   12964:	sub	sp, sp, #12
   12968:	mov	r8, r0
   1296c:	mov	r4, r1
   12970:	mov	r9, r2
   12974:	mov	r5, r3
   12978:	mov	r1, r2
   1297c:	mov	r0, r4
   12980:	bl	127e0 <_start@@Base+0x128>
   12984:	add	r3, pc, #772	; 0x304
   12988:	ldrd	r2, [r3]
   1298c:	cmp	r1, r3
   12990:	cmpeq	r0, r2
   12994:	bhi	12ad8 <_start@@Base+0x420>
   12998:	add	r3, pc, #760	; 0x2f8
   1299c:	ldrd	r2, [r3]
   129a0:	cmp	r1, r3
   129a4:	cmpeq	r0, r2
   129a8:	bhi	12a18 <_start@@Base+0x360>
   129ac:	and	r0, r0, #-16777216	; 0xff000000
   129b0:	add	r3, pc, #744	; 0x2e8
   129b4:	ldrd	r2, [r3]
   129b8:	cmp	r1, r3
   129bc:	cmpeq	r0, r2
   129c0:	beq	129d0 <_start@@Base+0x318>
   129c4:	mov	r0, r4
   129c8:	add	sp, sp, #12
   129cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   129d0:	ldr	r3, [sp, #44]	; 0x2c
   129d4:	str	r3, [sp]
   129d8:	mov	r3, #5
   129dc:	mov	r2, r9
   129e0:	mov	r1, r4
   129e4:	mov	r0, r8
   129e8:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   129ec:	cmp	r4, r0
   129f0:	moveq	r4, r0
   129f4:	beq	129c4 <_start@@Base+0x30c>
   129f8:	mov	r2, #9
   129fc:	mov	r3, #0
   12a00:	ldr	r1, [sp, #40]	; 0x28
   12a04:	strd	r2, [r1]
   12a08:	mov	r3, #0
   12a0c:	str	r3, [r5]
   12a10:	mov	r4, r0
   12a14:	b	129c4 <_start@@Base+0x30c>
   12a18:	and	r6, r0, #-16777216	; 0xff000000
   12a1c:	add	r3, pc, #644	; 0x284
   12a20:	ldrd	r2, [r3]
   12a24:	cmp	r1, r3
   12a28:	cmpeq	r6, r2
   12a2c:	beq	12a90 <_start@@Base+0x3d8>
   12a30:	bic	r0, r0, #255	; 0xff
   12a34:	add	r3, pc, #628	; 0x274
   12a38:	ldrd	r2, [r3]
   12a3c:	cmp	r1, r3
   12a40:	cmpeq	r0, r2
   12a44:	bne	129c4 <_start@@Base+0x30c>
   12a48:	ldr	r3, [sp, #44]	; 0x2c
   12a4c:	str	r3, [sp]
   12a50:	mov	r3, #7
   12a54:	mov	r2, r9
   12a58:	mov	r1, r4
   12a5c:	mov	r0, r8
   12a60:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   12a64:	cmp	r4, r0
   12a68:	moveq	r4, r0
   12a6c:	beq	129c4 <_start@@Base+0x30c>
   12a70:	mov	r2, #10
   12a74:	mov	r3, #0
   12a78:	ldr	r1, [sp, #40]	; 0x28
   12a7c:	strd	r2, [r1]
   12a80:	mov	r3, #0
   12a84:	str	r3, [r5]
   12a88:	mov	r4, r0
   12a8c:	b	129c4 <_start@@Base+0x30c>
   12a90:	ldr	r3, [sp, #44]	; 0x2c
   12a94:	str	r3, [sp]
   12a98:	mov	r3, #5
   12a9c:	mov	r2, r9
   12aa0:	mov	r1, r4
   12aa4:	mov	r0, r8
   12aa8:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   12aac:	cmp	r4, r0
   12ab0:	moveq	r4, r0
   12ab4:	beq	129c4 <_start@@Base+0x30c>
   12ab8:	mov	r2, #2
   12abc:	mov	r3, #0
   12ac0:	ldr	r1, [sp, #40]	; 0x28
   12ac4:	strd	r2, [r1]
   12ac8:	mov	r3, #0
   12acc:	str	r3, [r5]
   12ad0:	mov	r4, r0
   12ad4:	b	129c4 <_start@@Base+0x30c>
   12ad8:	add	r3, pc, #472	; 0x1d8
   12adc:	ldrd	r2, [r3]
   12ae0:	cmp	r1, r3
   12ae4:	cmpeq	r0, r2
   12ae8:	bhi	12b4c <_start@@Base+0x494>
   12aec:	mov	r0, #0
   12af0:	add	r3, pc, #456	; 0x1c8
   12af4:	ldrd	r2, [r3]
   12af8:	cmp	r1, r3
   12afc:	cmpeq	r0, r2
   12b00:	bne	129c4 <_start@@Base+0x30c>
   12b04:	ldr	r3, [sp, #44]	; 0x2c
   12b08:	str	r3, [sp]
   12b0c:	mov	r3, #4
   12b10:	mov	r2, r9
   12b14:	mov	r1, r4
   12b18:	mov	r0, r8
   12b1c:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   12b20:	cmp	r4, r0
   12b24:	moveq	r4, r0
   12b28:	beq	129c4 <_start@@Base+0x30c>
   12b2c:	mov	r2, #0
   12b30:	mov	r3, #0
   12b34:	ldr	r1, [sp, #40]	; 0x28
   12b38:	strd	r2, [r1]
   12b3c:	mov	r3, #0
   12b40:	str	r3, [r5]
   12b44:	mov	r4, r0
   12b48:	b	129c4 <_start@@Base+0x30c>
   12b4c:	add	r3, pc, #372	; 0x174
   12b50:	ldrd	r2, [r3]
   12b54:	cmp	r1, r3
   12b58:	cmpeq	r0, r2
   12b5c:	bhi	12bc0 <_start@@Base+0x508>
   12b60:	and	r0, r0, #-16777216	; 0xff000000
   12b64:	add	r3, pc, #356	; 0x164
   12b68:	ldrd	r2, [r3]
   12b6c:	cmp	r1, r3
   12b70:	cmpeq	r0, r2
   12b74:	bne	129c4 <_start@@Base+0x30c>
   12b78:	ldr	r3, [sp, #44]	; 0x2c
   12b7c:	str	r3, [sp]
   12b80:	mov	r3, #5
   12b84:	mov	r2, r9
   12b88:	mov	r1, r4
   12b8c:	mov	r0, r8
   12b90:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   12b94:	cmp	r4, r0
   12b98:	moveq	r4, r0
   12b9c:	beq	129c4 <_start@@Base+0x30c>
   12ba0:	mov	r2, #11
   12ba4:	mov	r3, #0
   12ba8:	ldr	r1, [sp, #40]	; 0x28
   12bac:	strd	r2, [r1]
   12bb0:	mov	r3, #0
   12bb4:	str	r3, [r5]
   12bb8:	mov	r4, r0
   12bbc:	b	129c4 <_start@@Base+0x30c>
   12bc0:	ldr	r2, [pc, #288]	; 12ce8 <_start@@Base+0x630>
   12bc4:	mvn	r3, #0
   12bc8:	and	r2, r2, r0
   12bcc:	and	r3, r3, r1
   12bd0:	add	r7, pc, #256	; 0x100
   12bd4:	ldrd	r6, [r7]
   12bd8:	cmp	r3, r7
   12bdc:	cmpeq	r2, r6
   12be0:	beq	12c3c <_start@@Base+0x584>
   12be4:	add	r3, pc, #244	; 0xf4
   12be8:	ldrd	r2, [r3]
   12bec:	cmp	r1, r3
   12bf0:	cmpeq	r0, r2
   12bf4:	bne	129c4 <_start@@Base+0x30c>
   12bf8:	ldr	r3, [sp, #44]	; 0x2c
   12bfc:	str	r3, [sp]
   12c00:	mov	r3, #8
   12c04:	mov	r2, r9
   12c08:	mov	r1, r4
   12c0c:	mov	r0, r8
   12c10:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   12c14:	cmp	r4, r0
   12c18:	beq	12c84 <_start@@Base+0x5cc>
   12c1c:	mov	r2, #8
   12c20:	mov	r3, #0
   12c24:	ldr	r1, [sp, #40]	; 0x28
   12c28:	strd	r2, [r1]
   12c2c:	mov	r3, #0
   12c30:	str	r3, [r5]
   12c34:	mov	r4, r0
   12c38:	b	129c4 <_start@@Base+0x30c>
   12c3c:	ldr	r3, [sp, #44]	; 0x2c
   12c40:	str	r3, [sp]
   12c44:	mov	r3, #6
   12c48:	mov	r2, r9
   12c4c:	mov	r1, r4
   12c50:	mov	r0, r8
   12c54:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   12c58:	cmp	r4, r0
   12c5c:	moveq	r4, r0
   12c60:	beq	129c4 <_start@@Base+0x30c>
   12c64:	mov	r2, #255	; 0xff
   12c68:	mov	r3, #0
   12c6c:	ldr	r1, [sp, #40]	; 0x28
   12c70:	strd	r2, [r1]
   12c74:	mov	r3, #0
   12c78:	str	r3, [r5]
   12c7c:	mov	r4, r0
   12c80:	b	129c4 <_start@@Base+0x30c>
   12c84:	mov	r4, r0
   12c88:	b	129c4 <_start@@Base+0x30c>
   12c8c:	nop			; (mov r0, r0)
   12c90:			; <UNDEFINED> instruction: 0xffffffff
   12c94:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   12c98:			; <UNDEFINED> instruction: 0x46616dff
   12c9c:	rsbmi	r6, pc, #428	; 0x1ac
   12ca0:	strvs	r0, [r0, #-0]
   12ca4:	rsbmi	r6, r5, #108, 24	; 0x6c00
   12ca8:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   12cac:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   12cb0:	strbtmi	r6, [r1], -r0, lsl #28
   12cb4:	rsbmi	r6, pc, #428	; 0x1ac
   12cb8:	ldrshvc	pc, [pc, #255]	; 12dbf <_start@@Base+0x707>	; <UNPREDICTABLE>
   12cbc:	svcmi	0x00746865
   12cc0:	andeq	r0, r0, r0
   12cc4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   12cc8:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   12ccc:	rsbpl	r7, r1, #117	; 0x75
   12cd0:	andvc	r0, r0, #0
   12cd4:	svcmi	0x00746865
   12cd8:	strbvs	r0, [r4, #-0]!
   12cdc:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   12ce0:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   12ce4:	rsbpl	r7, r1, #117	; 0x75
   12ce8:			; <UNDEFINED> instruction: 0xffff0000
   12cec:	push	{r4, r5, r6, r7, r8, lr}
   12cf0:	sub	sp, sp, #8
   12cf4:	mov	r6, r0
   12cf8:	mov	r4, r1
   12cfc:	mov	r5, r2
   12d00:	mov	r7, r3
   12d04:	mov	r1, r2
   12d08:	mov	r0, r4
   12d0c:	bl	127e0 <_start@@Base+0x128>
   12d10:	add	r3, pc, #136	; 0x88
   12d14:	ldrd	r2, [r3]
   12d18:	cmp	r1, r3
   12d1c:	cmpeq	r0, r2
   12d20:	beq	12d30 <_start@@Base+0x678>
   12d24:	mov	r0, r4
   12d28:	add	sp, sp, #8
   12d2c:	pop	{r4, r5, r6, r7, r8, pc}
   12d30:	add	r8, r4, #8
   12d34:	mov	r1, r5
   12d38:	mov	r0, r8
   12d3c:	bl	127e0 <_start@@Base+0x128>
   12d40:	mov	r0, #0
   12d44:	and	r1, r1, #-16777216	; 0xff000000
   12d48:	cmp	r1, #1912602624	; 0x72000000
   12d4c:	cmpeq	r0, #0
   12d50:	bne	12d24 <_start@@Base+0x66c>
   12d54:	sub	r3, r5, r8
   12d58:	cmp	r3, #1
   12d5c:	ble	12d24 <_start@@Base+0x66c>
   12d60:	ldrb	r3, [r4, #9]
   12d64:	cmp	r3, #46	; 0x2e
   12d68:	bne	12d24 <_start@@Base+0x66c>
   12d6c:	add	r1, r4, #10
   12d70:	cmp	r8, r1
   12d74:	beq	12d24 <_start@@Base+0x66c>
   12d78:	ldr	r3, [sp, #36]	; 0x24
   12d7c:	str	r3, [sp, #4]
   12d80:	ldr	r3, [sp, #32]
   12d84:	str	r3, [sp]
   12d88:	mov	r3, r7
   12d8c:	mov	r2, r5
   12d90:	mov	r0, r6
   12d94:	bl	12960 <_start@@Base+0x2a8>
   12d98:	mov	r4, r0
   12d9c:	b	12d24 <_start@@Base+0x66c>
   12da0:	cmnvs	r3, r5, ror #8
   12da4:	cmnmi	r8, #-2147483620	; 0x8000001c
   12da8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12dac:	sub	sp, sp, #8
   12db0:	mov	r8, r0
   12db4:	mov	r6, r1
   12db8:	mov	r7, r2
   12dbc:	mov	r9, r3
   12dc0:	mov	r1, r2
   12dc4:	mov	r0, r6
   12dc8:	bl	127e0 <_start@@Base+0x128>
   12dcc:	mov	r5, r1
   12dd0:	add	r3, pc, #584	; 0x248
   12dd4:	ldrd	r2, [r3]
   12dd8:	cmp	r1, r3
   12ddc:	cmpeq	r0, r2
   12de0:	bhi	12e54 <_start@@Base+0x79c>
   12de4:	mov	r4, #0
   12de8:	bic	r5, r1, #255	; 0xff
   12dec:	add	r3, pc, #564	; 0x234
   12df0:	ldrd	r2, [r3]
   12df4:	cmp	r5, r3
   12df8:	cmpeq	r4, r2
   12dfc:	beq	12e0c <_start@@Base+0x754>
   12e00:	mov	r0, r6
   12e04:	add	sp, sp, #8
   12e08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e0c:	ldr	r3, [sp, #44]	; 0x2c
   12e10:	str	r3, [sp]
   12e14:	mov	r3, #3
   12e18:	mov	r2, r7
   12e1c:	mov	r1, r6
   12e20:	mov	r0, r8
   12e24:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   12e28:	cmp	r6, r0
   12e2c:	moveq	r6, r0
   12e30:	beq	12e00 <_start@@Base+0x748>
   12e34:	mov	r2, #4
   12e38:	mov	r3, #0
   12e3c:	ldr	r1, [sp, #40]	; 0x28
   12e40:	strd	r2, [r1]
   12e44:	mov	r3, #0
   12e48:	str	r3, [r9]
   12e4c:	mov	r6, r0
   12e50:	b	12e00 <_start@@Base+0x748>
   12e54:	mov	r4, r0
   12e58:	add	r3, pc, #464	; 0x1d0
   12e5c:	ldrd	r2, [r3]
   12e60:	cmp	r1, r3
   12e64:	cmpeq	r0, r2
   12e68:	beq	12f40 <_start@@Base+0x888>
   12e6c:	bic	r0, r0, #255	; 0xff
   12e70:	add	r3, pc, #448	; 0x1c0
   12e74:	ldrd	r2, [r3]
   12e78:	cmp	r1, r3
   12e7c:	cmpeq	r0, r2
   12e80:	movne	sl, r6
   12e84:	beq	12f88 <_start@@Base+0x8d0>
   12e88:	mov	r0, #0
   12e8c:	add	r3, pc, #428	; 0x1ac
   12e90:	ldrd	r2, [r3]
   12e94:	cmp	r5, r3
   12e98:	cmpeq	r0, r2
   12e9c:	beq	12fd0 <_start@@Base+0x918>
   12ea0:	add	r3, pc, #416	; 0x1a0
   12ea4:	ldrd	r2, [r3]
   12ea8:	cmp	r5, r3
   12eac:	cmpeq	r4, r2
   12eb0:	bne	12e00 <_start@@Base+0x748>
   12eb4:	mov	r1, r7
   12eb8:	add	r0, sl, #8
   12ebc:	bl	127e0 <_start@@Base+0x128>
   12ec0:	add	r3, pc, #392	; 0x188
   12ec4:	ldrd	r2, [r3]
   12ec8:	cmp	r1, r3
   12ecc:	cmpeq	r0, r2
   12ed0:	bne	12e00 <_start@@Base+0x748>
   12ed4:	add	sl, sl, #16
   12ed8:	mov	r1, r7
   12edc:	mov	r0, sl
   12ee0:	bl	127e0 <_start@@Base+0x128>
   12ee4:	bic	r0, r0, #255	; 0xff
   12ee8:	add	r3, pc, #360	; 0x168
   12eec:	ldrd	r2, [r3]
   12ef0:	cmp	r1, r3
   12ef4:	cmpeq	r0, r2
   12ef8:	bne	12e00 <_start@@Base+0x748>
   12efc:	ldr	r3, [sp, #44]	; 0x2c
   12f00:	str	r3, [sp]
   12f04:	mov	r3, #7
   12f08:	mov	r2, r7
   12f0c:	mov	r1, sl
   12f10:	mov	r0, r8
   12f14:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   12f18:	cmp	sl, r0
   12f1c:	beq	12e00 <_start@@Base+0x748>
   12f20:	mov	r2, #2
   12f24:	mov	r3, #0
   12f28:	ldr	r1, [sp, #40]	; 0x28
   12f2c:	strd	r2, [r1]
   12f30:	mov	r3, #0
   12f34:	str	r3, [r9]
   12f38:	mov	r6, r0
   12f3c:	b	12e00 <_start@@Base+0x748>
   12f40:	ldr	r3, [sp, #44]	; 0x2c
   12f44:	str	r3, [sp]
   12f48:	mov	r3, #8
   12f4c:	mov	r2, r7
   12f50:	mov	r1, r6
   12f54:	mov	r0, r8
   12f58:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   12f5c:	cmp	r6, r0
   12f60:	moveq	r6, r0
   12f64:	beq	12e00 <_start@@Base+0x748>
   12f68:	mov	r2, #3
   12f6c:	mov	r3, #0
   12f70:	ldr	r1, [sp, #40]	; 0x28
   12f74:	strd	r2, [r1]
   12f78:	mov	r3, #0
   12f7c:	str	r3, [r9]
   12f80:	mov	r6, r0
   12f84:	b	12e00 <_start@@Base+0x748>
   12f88:	ldr	r3, [sp, #44]	; 0x2c
   12f8c:	str	r3, [sp]
   12f90:	mov	r3, #7
   12f94:	mov	r2, r7
   12f98:	mov	r1, r6
   12f9c:	mov	r0, r8
   12fa0:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   12fa4:	mov	sl, r0
   12fa8:	cmp	r6, r0
   12fac:	beq	12e88 <_start@@Base+0x7d0>
   12fb0:	mov	r2, #1
   12fb4:	mov	r3, #0
   12fb8:	ldr	r1, [sp, #40]	; 0x28
   12fbc:	strd	r2, [r1]
   12fc0:	mov	r3, #0
   12fc4:	str	r3, [r9]
   12fc8:	mov	r6, r0
   12fcc:	b	12e00 <_start@@Base+0x748>
   12fd0:	ldr	r3, [sp, #44]	; 0x2c
   12fd4:	str	r3, [sp]
   12fd8:	mov	r3, #4
   12fdc:	mov	r2, r7
   12fe0:	mov	r1, sl
   12fe4:	mov	r0, r8
   12fe8:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   12fec:	cmp	sl, r0
   12ff0:	beq	13014 <_start@@Base+0x95c>
   12ff4:	mov	r2, #0
   12ff8:	mov	r3, #0
   12ffc:	ldr	r1, [sp, #40]	; 0x28
   13000:	strd	r2, [r1]
   13004:	mov	r3, #0
   13008:	str	r3, [r9]
   1300c:	mov	r6, r0
   13010:	b	12e00 <_start@@Base+0x748>
   13014:	mov	sl, r0
   13018:	b	12ea0 <_start@@Base+0x7e8>
   1301c:	nop			; (mov r0, r0)
   13020:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   13024:	stclmi	14, cr6, [pc, #-460]!	; 12e60 <_start@@Base+0x7a8>
   13028:	andeq	r0, r0, r0
   1302c:	cmnmi	ip, r0, lsl #8
   13030:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   13034:	stclmi	14, cr6, [pc, #-460]!	; 12e70 <_start@@Base+0x7b8>
   13038:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   1303c:	stclmi	14, cr6, [pc, #-460]!	; 12e78 <_start@@Base+0x7c0>
   13040:	andeq	r0, r0, r0
   13044:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   13048:	cmnpl	r9, #112, 26	; 0x1c00
   1304c:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   13050:	rsbvs	r6, ip, #364904448	; 0x15c00000
   13054:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   13058:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1305c:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   13060:	push	{r4, r5, r6, r7, r8, lr}
   13064:	sub	sp, sp, #8
   13068:	mov	r6, r0
   1306c:	mov	r4, r1
   13070:	mov	r5, r2
   13074:	mov	r7, r3
   13078:	mov	r1, r2
   1307c:	mov	r0, r4
   13080:	bl	127e0 <_start@@Base+0x128>
   13084:	add	r3, pc, #260	; 0x104
   13088:	ldrd	r2, [r3]
   1308c:	cmp	r1, r3
   13090:	cmpeq	r0, r2
   13094:	beq	130bc <_start@@Base+0xa04>
   13098:	mov	r0, #0
   1309c:	add	r3, pc, #244	; 0xf4
   130a0:	ldrd	r2, [r3]
   130a4:	cmp	r1, r3
   130a8:	cmpeq	r0, r2
   130ac:	beq	13144 <_start@@Base+0xa8c>
   130b0:	mov	r0, r4
   130b4:	add	sp, sp, #8
   130b8:	pop	{r4, r5, r6, r7, r8, pc}
   130bc:	mov	r1, r5
   130c0:	add	r0, r4, #8
   130c4:	bl	127e0 <_start@@Base+0x128>
   130c8:	add	r3, pc, #208	; 0xd0
   130cc:	ldrd	r2, [r3]
   130d0:	cmp	r1, r3
   130d4:	cmpeq	r0, r2
   130d8:	bne	130b0 <_start@@Base+0x9f8>
   130dc:	add	r8, r4, #16
   130e0:	mov	r1, r5
   130e4:	mov	r0, r8
   130e8:	bl	127e0 <_start@@Base+0x128>
   130ec:	mov	r0, #0
   130f0:	and	r1, r1, #-16777216	; 0xff000000
   130f4:	cmp	r1, #1694498816	; 0x65000000
   130f8:	cmpeq	r0, #0
   130fc:	bne	130b0 <_start@@Base+0x9f8>
   13100:	ldr	r3, [sp, #36]	; 0x24
   13104:	str	r3, [sp]
   13108:	mov	r3, #1
   1310c:	mov	r2, r5
   13110:	mov	r1, r8
   13114:	mov	r0, r6
   13118:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   1311c:	cmp	r8, r0
   13120:	beq	130b0 <_start@@Base+0x9f8>
   13124:	mov	r2, #1
   13128:	mov	r3, #0
   1312c:	ldr	r1, [sp, #32]
   13130:	strd	r2, [r1]
   13134:	mov	r3, #0
   13138:	str	r3, [r7]
   1313c:	mov	r4, r0
   13140:	b	130b0 <_start@@Base+0x9f8>
   13144:	ldr	r3, [sp, #36]	; 0x24
   13148:	str	r3, [sp]
   1314c:	mov	r3, #4
   13150:	mov	r2, r5
   13154:	mov	r1, r4
   13158:	mov	r0, r6
   1315c:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   13160:	cmp	r4, r0
   13164:	beq	13188 <_start@@Base+0xad0>
   13168:	mov	r2, #0
   1316c:	mov	r3, #0
   13170:	ldr	r1, [sp, #32]
   13174:	strd	r2, [r1]
   13178:	mov	r3, #0
   1317c:	str	r3, [r7]
   13180:	mov	r4, r0
   13184:	b	130b0 <_start@@Base+0x9f8>
   13188:	mov	r4, r0
   1318c:	b	130b0 <_start@@Base+0x9f8>
   13190:	rsbvc	r6, r5, #116, 28	; 0x740
   13194:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   13198:	andeq	r0, r0, r0
   1319c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   131a0:	cmnvc	r0, #-1073741800	; 0xc0000018
   131a4:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   131a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   131ac:	sub	sp, sp, #12
   131b0:	mov	r8, r0
   131b4:	mov	r4, r1
   131b8:	mov	r9, r2
   131bc:	mov	r5, r3
   131c0:	mov	r1, r2
   131c4:	mov	r0, r4
   131c8:	bl	127e0 <_start@@Base+0x128>
   131cc:	add	r3, pc, #332	; 0x14c
   131d0:	ldrd	r2, [r3]
   131d4:	cmp	r1, r3
   131d8:	cmpeq	r0, r2
   131dc:	bhi	1324c <_start@@Base+0xb94>
   131e0:	mov	r0, #0
   131e4:	add	r3, pc, #316	; 0x13c
   131e8:	ldrd	r2, [r3]
   131ec:	cmp	r1, r3
   131f0:	cmpeq	r0, r2
   131f4:	beq	13204 <_start@@Base+0xb4c>
   131f8:	mov	r0, r4
   131fc:	add	sp, sp, #12
   13200:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13204:	ldr	r3, [sp, #44]	; 0x2c
   13208:	str	r3, [sp]
   1320c:	mov	r3, #4
   13210:	mov	r2, r9
   13214:	mov	r1, r4
   13218:	mov	r0, r8
   1321c:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   13220:	cmp	r4, r0
   13224:	moveq	r4, r0
   13228:	beq	131f8 <_start@@Base+0xb40>
   1322c:	mov	r2, #3
   13230:	mov	r3, #0
   13234:	ldr	r1, [sp, #40]	; 0x28
   13238:	strd	r2, [r1]
   1323c:	mov	r3, #0
   13240:	str	r3, [r5]
   13244:	mov	r4, r0
   13248:	b	131f8 <_start@@Base+0xb40>
   1324c:	ldr	r2, [pc, #244]	; 13348 <_start@@Base+0xc90>
   13250:	mvn	r3, #0
   13254:	and	r2, r2, r0
   13258:	and	r3, r3, r1
   1325c:	add	r7, pc, #204	; 0xcc
   13260:	ldrd	r6, [r7]
   13264:	cmp	r3, r7
   13268:	cmpeq	r2, r6
   1326c:	beq	132cc <_start@@Base+0xc14>
   13270:	mov	r0, #0
   13274:	add	r3, pc, #188	; 0xbc
   13278:	ldrd	r2, [r3]
   1327c:	cmp	r1, r3
   13280:	cmpeq	r0, r2
   13284:	bne	131f8 <_start@@Base+0xb40>
   13288:	ldr	r3, [sp, #44]	; 0x2c
   1328c:	str	r3, [sp]
   13290:	mov	r3, #4
   13294:	mov	r2, r9
   13298:	mov	r1, r4
   1329c:	mov	r0, r8
   132a0:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   132a4:	cmp	r4, r0
   132a8:	beq	13314 <_start@@Base+0xc5c>
   132ac:	add	r3, pc, #140	; 0x8c
   132b0:	ldrd	r2, [r3]
   132b4:	ldr	r1, [sp, #40]	; 0x28
   132b8:	strd	r2, [r1]
   132bc:	mov	r3, #0
   132c0:	str	r3, [r5]
   132c4:	mov	r4, r0
   132c8:	b	131f8 <_start@@Base+0xb40>
   132cc:	ldr	r3, [sp, #44]	; 0x2c
   132d0:	str	r3, [sp]
   132d4:	mov	r3, #6
   132d8:	mov	r2, r9
   132dc:	mov	r1, r4
   132e0:	mov	r0, r8
   132e4:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   132e8:	cmp	r4, r0
   132ec:	moveq	r4, r0
   132f0:	beq	131f8 <_start@@Base+0xb40>
   132f4:	mvn	r2, #1
   132f8:	mvn	r3, #0
   132fc:	ldr	r1, [sp, #40]	; 0x28
   13300:	strd	r2, [r1]
   13304:	mov	r3, #1
   13308:	str	r3, [r5]
   1330c:	mov	r4, r0
   13310:	b	131f8 <_start@@Base+0xb40>
   13314:	mov	r4, r0
   13318:	b	131f8 <_start@@Base+0xb40>
   1331c:	nop			; (mov r0, r0)
   13320:			; <UNDEFINED> instruction: 0xffffffff
   13324:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   13328:	andeq	r0, r0, r0
   1332c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   13330:	strbvs	r0, [r7, #-0]!
   13334:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   13338:	andeq	r0, r0, r0
   1333c:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   13340:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   13344:	andeq	r0, r0, r0
   13348:			; <UNDEFINED> instruction: 0xffff0000
   1334c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13350:	sub	sp, sp, #12
   13354:	mov	r8, r0
   13358:	mov	r4, r1
   1335c:	mov	r9, r2
   13360:	mov	r5, r3
   13364:	mov	r1, r2
   13368:	mov	r0, r4
   1336c:	bl	127e0 <_start@@Base+0x128>
   13370:	add	r3, pc, #448	; 0x1c0
   13374:	ldrd	r2, [r3]
   13378:	cmp	r1, r3
   1337c:	cmpeq	r0, r2
   13380:	bhi	133f0 <_start@@Base+0xd38>
   13384:	mov	r0, #0
   13388:	add	r3, pc, #432	; 0x1b0
   1338c:	ldrd	r2, [r3]
   13390:	cmp	r1, r3
   13394:	cmpeq	r0, r2
   13398:	beq	133a8 <_start@@Base+0xcf0>
   1339c:	mov	r0, r4
   133a0:	add	sp, sp, #12
   133a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   133a8:	ldr	r3, [sp, #44]	; 0x2c
   133ac:	str	r3, [sp]
   133b0:	mov	r3, #4
   133b4:	mov	r2, r9
   133b8:	mov	r1, r4
   133bc:	mov	r0, r8
   133c0:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   133c4:	cmp	r4, r0
   133c8:	moveq	r4, r0
   133cc:	beq	1339c <_start@@Base+0xce4>
   133d0:	mov	r2, #2
   133d4:	mov	r3, #0
   133d8:	ldr	r1, [sp, #40]	; 0x28
   133dc:	strd	r2, [r1]
   133e0:	mov	r3, #0
   133e4:	str	r3, [r5]
   133e8:	mov	r4, r0
   133ec:	b	1339c <_start@@Base+0xce4>
   133f0:	add	r3, pc, #336	; 0x150
   133f4:	ldrd	r2, [r3]
   133f8:	cmp	r1, r3
   133fc:	cmpeq	r0, r2
   13400:	bhi	13464 <_start@@Base+0xdac>
   13404:	mov	r0, #0
   13408:	add	r3, pc, #320	; 0x140
   1340c:	ldrd	r2, [r3]
   13410:	cmp	r1, r3
   13414:	cmpeq	r0, r2
   13418:	bne	1339c <_start@@Base+0xce4>
   1341c:	ldr	r3, [sp, #44]	; 0x2c
   13420:	str	r3, [sp]
   13424:	mov	r3, #4
   13428:	mov	r2, r9
   1342c:	mov	r1, r4
   13430:	mov	r0, r8
   13434:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   13438:	cmp	r4, r0
   1343c:	moveq	r4, r0
   13440:	beq	1339c <_start@@Base+0xce4>
   13444:	mov	r2, #42	; 0x2a
   13448:	mov	r3, #0
   1344c:	ldr	r1, [sp, #40]	; 0x28
   13450:	strd	r2, [r1]
   13454:	mov	r3, #0
   13458:	str	r3, [r5]
   1345c:	mov	r4, r0
   13460:	b	1339c <_start@@Base+0xce4>
   13464:	bic	r6, r0, #255	; 0xff
   13468:	add	r3, pc, #232	; 0xe8
   1346c:	ldrd	r2, [r3]
   13470:	cmp	r1, r3
   13474:	cmpeq	r6, r2
   13478:	beq	134e4 <_start@@Base+0xe2c>
   1347c:	ldr	r2, [pc, #228]	; 13568 <_start@@Base+0xeb0>
   13480:	mvn	r3, #0
   13484:	and	r0, r0, r2
   13488:	and	r1, r1, r3
   1348c:	add	r3, pc, #204	; 0xcc
   13490:	ldrd	r2, [r3]
   13494:	cmp	r1, r3
   13498:	cmpeq	r0, r2
   1349c:	bne	1339c <_start@@Base+0xce4>
   134a0:	ldr	r3, [sp, #44]	; 0x2c
   134a4:	str	r3, [sp]
   134a8:	mov	r3, #6
   134ac:	mov	r2, r9
   134b0:	mov	r1, r4
   134b4:	mov	r0, r8
   134b8:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   134bc:	cmp	r4, r0
   134c0:	beq	1352c <_start@@Base+0xe74>
   134c4:	mvn	r2, #1
   134c8:	mvn	r3, #0
   134cc:	ldr	r1, [sp, #40]	; 0x28
   134d0:	strd	r2, [r1]
   134d4:	mov	r3, #1
   134d8:	str	r3, [r5]
   134dc:	mov	r4, r0
   134e0:	b	1339c <_start@@Base+0xce4>
   134e4:	ldr	r3, [sp, #44]	; 0x2c
   134e8:	str	r3, [sp]
   134ec:	mov	r3, #7
   134f0:	mov	r2, r9
   134f4:	mov	r1, r4
   134f8:	mov	r0, r8
   134fc:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   13500:	cmp	r4, r0
   13504:	moveq	r4, r0
   13508:	beq	1339c <_start@@Base+0xce4>
   1350c:	mvn	r2, #0
   13510:	mvn	r3, #0
   13514:	ldr	r1, [sp, #40]	; 0x28
   13518:	strd	r2, [r1]
   1351c:	mov	r3, #1
   13520:	str	r3, [r5]
   13524:	mov	r4, r0
   13528:	b	1339c <_start@@Base+0xce4>
   1352c:	mov	r4, r0
   13530:	b	1339c <_start@@Base+0xce4>
   13534:	nop			; (mov r0, r0)
   13538:			; <UNDEFINED> instruction: 0xffffffff
   1353c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   13540:	andeq	r0, r0, r0
   13544:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   13548:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1354c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   13550:	andeq	r0, r0, r0
   13554:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   13558:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   1355c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   13560:	strbvs	r0, [r7, #-0]!
   13564:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   13568:			; <UNDEFINED> instruction: 0xffff0000
   1356c:	push	{r4, r5, r6, r7, lr}
   13570:	sub	sp, sp, #12
   13574:	mov	r6, r0
   13578:	mov	r4, r1
   1357c:	mov	r5, r2
   13580:	mov	r7, r3
   13584:	mov	r1, r2
   13588:	mov	r0, r4
   1358c:	bl	127e0 <_start@@Base+0x128>
   13590:	add	r3, pc, #312	; 0x138
   13594:	ldrd	r2, [r3]
   13598:	cmp	r1, r3
   1359c:	cmpeq	r0, r2
   135a0:	bhi	13610 <_start@@Base+0xf58>
   135a4:	mov	r0, #0
   135a8:	add	r3, pc, #296	; 0x128
   135ac:	ldrd	r2, [r3]
   135b0:	cmp	r1, r3
   135b4:	cmpeq	r0, r2
   135b8:	beq	135c8 <_start@@Base+0xf10>
   135bc:	mov	r0, r4
   135c0:	add	sp, sp, #12
   135c4:	pop	{r4, r5, r6, r7, pc}
   135c8:	ldr	r3, [sp, #36]	; 0x24
   135cc:	str	r3, [sp]
   135d0:	mov	r3, #4
   135d4:	mov	r2, r5
   135d8:	mov	r1, r4
   135dc:	mov	r0, r6
   135e0:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   135e4:	cmp	r4, r0
   135e8:	moveq	r4, r0
   135ec:	beq	135bc <_start@@Base+0xf04>
   135f0:	mvn	r2, #11
   135f4:	mvn	r3, #0
   135f8:	ldr	r1, [sp, #32]
   135fc:	strd	r2, [r1]
   13600:	mov	r3, #1
   13604:	str	r3, [r7]
   13608:	mov	r4, r0
   1360c:	b	135bc <_start@@Base+0xf04>
   13610:	mov	r0, #0
   13614:	add	r3, pc, #196	; 0xc4
   13618:	ldrd	r2, [r3]
   1361c:	cmp	r1, r3
   13620:	cmpeq	r0, r2
   13624:	beq	13680 <_start@@Base+0xfc8>
   13628:	add	r3, pc, #184	; 0xb8
   1362c:	ldrd	r2, [r3]
   13630:	cmp	r1, r3
   13634:	cmpeq	r0, r2
   13638:	bne	135bc <_start@@Base+0xf04>
   1363c:	ldr	r3, [sp, #36]	; 0x24
   13640:	str	r3, [sp]
   13644:	mov	r3, #4
   13648:	mov	r2, r5
   1364c:	mov	r1, r4
   13650:	mov	r0, r6
   13654:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   13658:	cmp	r4, r0
   1365c:	beq	136c8 <_start@@Base+0x1010>
   13660:	mvn	r2, #10
   13664:	mvn	r3, #0
   13668:	ldr	r1, [sp, #32]
   1366c:	strd	r2, [r1]
   13670:	mov	r3, #1
   13674:	str	r3, [r7]
   13678:	mov	r4, r0
   1367c:	b	135bc <_start@@Base+0xf04>
   13680:	ldr	r3, [sp, #36]	; 0x24
   13684:	str	r3, [sp]
   13688:	mov	r3, #4
   1368c:	mov	r2, r5
   13690:	mov	r1, r4
   13694:	mov	r0, r6
   13698:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   1369c:	cmp	r4, r0
   136a0:	moveq	r4, r0
   136a4:	beq	135bc <_start@@Base+0xf04>
   136a8:	mvn	r2, #9
   136ac:	mvn	r3, #0
   136b0:	ldr	r1, [sp, #32]
   136b4:	strd	r2, [r1]
   136b8:	mov	r3, #1
   136bc:	str	r3, [r7]
   136c0:	mov	r4, r0
   136c4:	b	135bc <_start@@Base+0xf04>
   136c8:	mov	r4, r0
   136cc:	b	135bc <_start@@Base+0xf04>
   136d0:			; <UNDEFINED> instruction: 0xffffffff
   136d4:	mcrvs	7, 3, r6, cr5, cr1, {1}
   136d8:	andeq	r0, r0, r0
   136dc:	mcrvs	7, 3, r6, cr5, cr1, {1}
   136e0:	andeq	r0, r0, r0
   136e4:	mcrvs	7, 3, r6, cr5, cr3, {1}
   136e8:	andeq	r0, r0, r0
   136ec:	mcrvs	7, 3, r6, cr5, cr2, {1}
   136f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   136f4:	sub	sp, sp, #12
   136f8:	mov	r8, r0
   136fc:	mov	r4, r1
   13700:	mov	r9, r2
   13704:	mov	r5, r3
   13708:	mov	r1, r2
   1370c:	mov	r0, r4
   13710:	bl	127e0 <_start@@Base+0x128>
   13714:	add	r3, pc, #324	; 0x144
   13718:	ldrd	r2, [r3]
   1371c:	cmp	r1, r3
   13720:	cmpeq	r0, r2
   13724:	bhi	13794 <_start@@Base+0x10dc>
   13728:	mov	r0, #0
   1372c:	add	r3, pc, #308	; 0x134
   13730:	ldrd	r2, [r3]
   13734:	cmp	r1, r3
   13738:	cmpeq	r0, r2
   1373c:	beq	1374c <_start@@Base+0x1094>
   13740:	mov	r0, r4
   13744:	add	sp, sp, #12
   13748:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1374c:	ldr	r3, [sp, #44]	; 0x2c
   13750:	str	r3, [sp]
   13754:	mov	r3, #4
   13758:	mov	r2, r9
   1375c:	mov	r1, r4
   13760:	mov	r0, r8
   13764:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   13768:	cmp	r4, r0
   1376c:	moveq	r4, r0
   13770:	beq	13740 <_start@@Base+0x1088>
   13774:	mov	r2, #8
   13778:	mov	r3, #0
   1377c:	ldr	r1, [sp, #40]	; 0x28
   13780:	strd	r2, [r1]
   13784:	mov	r3, #0
   13788:	str	r3, [r5]
   1378c:	mov	r4, r0
   13790:	b	13740 <_start@@Base+0x1088>
   13794:	mov	r6, #0
   13798:	bic	r7, r1, #255	; 0xff
   1379c:	add	r3, pc, #204	; 0xcc
   137a0:	ldrd	r2, [r3]
   137a4:	cmp	r7, r3
   137a8:	cmpeq	r6, r2
   137ac:	beq	1380c <_start@@Base+0x1154>
   137b0:	and	r0, r0, #-16777216	; 0xff000000
   137b4:	add	r3, pc, #188	; 0xbc
   137b8:	ldrd	r2, [r3]
   137bc:	cmp	r1, r3
   137c0:	cmpeq	r0, r2
   137c4:	bne	13740 <_start@@Base+0x1088>
   137c8:	ldr	r3, [sp, #44]	; 0x2c
   137cc:	str	r3, [sp]
   137d0:	mov	r3, #5
   137d4:	mov	r2, r9
   137d8:	mov	r1, r4
   137dc:	mov	r0, r8
   137e0:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   137e4:	cmp	r4, r0
   137e8:	beq	13854 <_start@@Base+0x119c>
   137ec:	mov	r2, #2
   137f0:	mov	r3, #0
   137f4:	ldr	r1, [sp, #40]	; 0x28
   137f8:	strd	r2, [r1]
   137fc:	mov	r3, #0
   13800:	str	r3, [r5]
   13804:	mov	r4, r0
   13808:	b	13740 <_start@@Base+0x1088>
   1380c:	ldr	r3, [sp, #44]	; 0x2c
   13810:	str	r3, [sp]
   13814:	mov	r3, #3
   13818:	mov	r2, r9
   1381c:	mov	r1, r4
   13820:	mov	r0, r8
   13824:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   13828:	cmp	r4, r0
   1382c:	moveq	r4, r0
   13830:	beq	13740 <_start@@Base+0x1088>
   13834:	mov	r2, #1
   13838:	mov	r3, #0
   1383c:	ldr	r1, [sp, #40]	; 0x28
   13840:	strd	r2, [r1]
   13844:	mov	r3, #0
   13848:	str	r3, [r5]
   1384c:	mov	r4, r0
   13850:	b	13740 <_start@@Base+0x1088>
   13854:	mov	r4, r0
   13858:	b	13740 <_start@@Base+0x1088>
   1385c:	nop			; (mov r0, r0)
   13860:	ldclvs	15, cr15, [pc, #1020]!	; 13c64 <_start@@Base+0x15ac>
   13864:	ldrbmi	r6, [r2, -r5, ror #10]!
   13868:	andeq	r0, r0, r0
   1386c:	rsbmi	r7, ip, #423624704	; 0x19400000
   13870:	andeq	r0, r0, r0
   13874:	rsbpl	r6, r5, #0, 8
   13878:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   1387c:	ldrbmi	r6, [r2, -r5, ror #10]!
   13880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13884:	sub	sp, sp, #12
   13888:	mov	r7, r0
   1388c:	mov	r4, r1
   13890:	mov	r5, r2
   13894:	mov	r6, r3
   13898:	mov	r1, r2
   1389c:	mov	r0, r4
   138a0:	bl	127e0 <_start@@Base+0x128>
   138a4:	add	r3, pc, #924	; 0x39c
   138a8:	ldrd	r2, [r3]
   138ac:	cmp	r1, r3
   138b0:	cmpeq	r0, r2
   138b4:	bhi	13960 <_start@@Base+0x12a8>
   138b8:	add	r3, pc, #912	; 0x390
   138bc:	ldrd	r2, [r3]
   138c0:	cmp	r1, r3
   138c4:	cmpeq	r0, r2
   138c8:	beq	138d8 <_start@@Base+0x1220>
   138cc:	mov	r0, r4
   138d0:	add	sp, sp, #12
   138d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138d8:	mov	r1, r5
   138dc:	add	r0, r4, #8
   138e0:	bl	127e0 <_start@@Base+0x128>
   138e4:	add	r3, pc, #876	; 0x36c
   138e8:	ldrd	r2, [r3]
   138ec:	cmp	r1, r3
   138f0:	cmpeq	r0, r2
   138f4:	bne	138cc <_start@@Base+0x1214>
   138f8:	add	r8, r4, #16
   138fc:	mov	r1, r5
   13900:	mov	r0, r8
   13904:	bl	127e0 <_start@@Base+0x128>
   13908:	mov	r0, #0
   1390c:	and	r1, r1, #-16777216	; 0xff000000
   13910:	cmp	r1, #1912602624	; 0x72000000
   13914:	cmpeq	r0, #0
   13918:	bne	138cc <_start@@Base+0x1214>
   1391c:	sub	r8, r5, r8
   13920:	cmp	r8, #1
   13924:	ble	138cc <_start@@Base+0x1214>
   13928:	ldrb	r3, [r4, #17]
   1392c:	cmp	r3, #46	; 0x2e
   13930:	bne	138cc <_start@@Base+0x1214>
   13934:	ldr	r3, [sp, #52]	; 0x34
   13938:	str	r3, [sp, #4]
   1393c:	ldr	r3, [sp, #48]	; 0x30
   13940:	str	r3, [sp]
   13944:	mov	r3, r6
   13948:	mov	r2, r5
   1394c:	add	r1, r4, #18
   13950:	mov	r0, r7
   13954:	bl	12960 <_start@@Base+0x2a8>
   13958:	mov	r4, r0
   1395c:	b	138cc <_start@@Base+0x1214>
   13960:	add	r3, pc, #760	; 0x2f8
   13964:	ldrd	r2, [r3]
   13968:	cmp	r1, r3
   1396c:	cmpeq	r0, r2
   13970:	beq	13ae8 <_start@@Base+0x1430>
   13974:	add	r3, pc, #748	; 0x2ec
   13978:	ldrd	r2, [r3]
   1397c:	cmp	r1, r3
   13980:	cmpeq	r0, r2
   13984:	bne	138cc <_start@@Base+0x1214>
   13988:	mov	r1, r5
   1398c:	add	r0, r4, #8
   13990:	bl	127e0 <_start@@Base+0x128>
   13994:	add	r3, pc, #724	; 0x2d4
   13998:	ldrd	r2, [r3]
   1399c:	cmp	r1, r3
   139a0:	cmpeq	r0, r2
   139a4:	bne	138cc <_start@@Base+0x1214>
   139a8:	mov	r1, r5
   139ac:	add	r0, r4, #16
   139b0:	bl	127e0 <_start@@Base+0x128>
   139b4:	add	r3, pc, #700	; 0x2bc
   139b8:	ldrd	r2, [r3]
   139bc:	cmp	r1, r3
   139c0:	cmpeq	r0, r2
   139c4:	bne	138cc <_start@@Base+0x1214>
   139c8:	mov	r1, r5
   139cc:	add	r0, r4, #24
   139d0:	bl	127e0 <_start@@Base+0x128>
   139d4:	add	r3, pc, #676	; 0x2a4
   139d8:	ldrd	r2, [r3]
   139dc:	cmp	r1, r3
   139e0:	cmpeq	r0, r2
   139e4:	bne	138cc <_start@@Base+0x1214>
   139e8:	add	r8, r4, #32
   139ec:	mov	r1, r5
   139f0:	mov	r0, r8
   139f4:	bl	127e0 <_start@@Base+0x128>
   139f8:	mov	r0, #0
   139fc:	and	r1, r1, #-16777216	; 0xff000000
   13a00:	cmp	r1, #1694498816	; 0x65000000
   13a04:	cmpeq	r0, #0
   13a08:	bne	138cc <_start@@Base+0x1214>
   13a0c:	sub	r8, r5, r8
   13a10:	cmp	r8, #1
   13a14:	ble	138cc <_start@@Base+0x1214>
   13a18:	ldrb	r3, [r4, #33]	; 0x21
   13a1c:	cmp	r3, #46	; 0x2e
   13a20:	bne	138cc <_start@@Base+0x1214>
   13a24:	add	r4, r4, #34	; 0x22
   13a28:	mov	r1, r5
   13a2c:	mov	r0, r4
   13a30:	bl	127e0 <_start@@Base+0x128>
   13a34:	mov	r8, r0
   13a38:	mov	r9, r1
   13a3c:	mov	r0, #0
   13a40:	bic	r1, r1, #255	; 0xff
   13a44:	add	r3, pc, #572	; 0x23c
   13a48:	ldrd	r2, [r3]
   13a4c:	cmp	r1, r3
   13a50:	cmpeq	r0, r2
   13a54:	movne	r0, r4
   13a58:	beq	13fa0 <_start@@Base+0x18e8>
   13a5c:	add	r3, pc, #556	; 0x22c
   13a60:	ldrd	r2, [r3]
   13a64:	cmp	r9, r3
   13a68:	cmpeq	r8, r2
   13a6c:	bne	138cc <_start@@Base+0x1214>
   13a70:	add	r8, r0, #8
   13a74:	mov	r1, r5
   13a78:	mov	r0, r8
   13a7c:	bl	127e0 <_start@@Base+0x128>
   13a80:	mov	r2, #0
   13a84:	ldr	r3, [pc, #564]	; 13cc0 <_start@@Base+0x1608>
   13a88:	and	r2, r2, r0
   13a8c:	and	r3, r3, r1
   13a90:	mov	r0, #0
   13a94:	ldr	r1, [pc, #552]	; 13cc4 <_start@@Base+0x160c>
   13a98:	cmp	r3, r1
   13a9c:	cmpeq	r2, r0
   13aa0:	bne	138cc <_start@@Base+0x1214>
   13aa4:	ldr	r3, [sp, #52]	; 0x34
   13aa8:	str	r3, [sp]
   13aac:	mov	r3, #2
   13ab0:	mov	r2, r5
   13ab4:	mov	r1, r8
   13ab8:	mov	r0, r7
   13abc:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   13ac0:	cmp	r8, r0
   13ac4:	beq	138cc <_start@@Base+0x1214>
   13ac8:	mov	r2, #0
   13acc:	mov	r3, #0
   13ad0:	ldr	r1, [sp, #48]	; 0x30
   13ad4:	strd	r2, [r1]
   13ad8:	mov	r3, #0
   13adc:	str	r3, [r6]
   13ae0:	mov	r4, r0
   13ae4:	b	138cc <_start@@Base+0x1214>
   13ae8:	mov	r1, r5
   13aec:	add	r0, r4, #8
   13af0:	bl	127e0 <_start@@Base+0x128>
   13af4:	add	r3, pc, #412	; 0x19c
   13af8:	ldrd	r2, [r3]
   13afc:	cmp	r1, r3
   13b00:	cmpeq	r0, r2
   13b04:	bhi	13d3c <_start@@Base+0x1684>
   13b08:	add	r3, pc, #400	; 0x190
   13b0c:	ldrd	r2, [r3]
   13b10:	cmp	r1, r3
   13b14:	cmpeq	r0, r2
   13b18:	bhi	13ba8 <_start@@Base+0x14f0>
   13b1c:	add	r3, pc, #388	; 0x184
   13b20:	ldrd	r2, [r3]
   13b24:	cmp	r1, r3
   13b28:	cmpeq	r0, r2
   13b2c:	bne	138cc <_start@@Base+0x1214>
   13b30:	add	r8, r4, #16
   13b34:	mov	r1, r5
   13b38:	mov	r0, r8
   13b3c:	bl	127e0 <_start@@Base+0x128>
   13b40:	mov	r2, #0
   13b44:	ldr	r3, [pc, #372]	; 13cc0 <_start@@Base+0x1608>
   13b48:	and	r2, r2, r0
   13b4c:	and	r3, r3, r1
   13b50:	mov	r0, #0
   13b54:	ldr	r1, [pc, #364]	; 13cc8 <_start@@Base+0x1610>
   13b58:	cmp	r3, r1
   13b5c:	cmpeq	r2, r0
   13b60:	bne	138cc <_start@@Base+0x1214>
   13b64:	sub	r8, r5, r8
   13b68:	cmp	r8, #2
   13b6c:	ble	138cc <_start@@Base+0x1214>
   13b70:	ldrb	r3, [r4, #18]
   13b74:	cmp	r3, #46	; 0x2e
   13b78:	bne	138cc <_start@@Base+0x1214>
   13b7c:	ldr	r3, [sp, #52]	; 0x34
   13b80:	str	r3, [sp, #4]
   13b84:	ldr	r3, [sp, #48]	; 0x30
   13b88:	str	r3, [sp]
   13b8c:	mov	r3, r6
   13b90:	mov	r2, r5
   13b94:	add	r1, r4, #19
   13b98:	mov	r0, r7
   13b9c:	bl	12da8 <_start@@Base+0x6f0>
   13ba0:	mov	r4, r0
   13ba4:	b	138cc <_start@@Base+0x1214>
   13ba8:	add	r3, pc, #256	; 0x100
   13bac:	ldrd	r2, [r3]
   13bb0:	cmp	r1, r3
   13bb4:	cmpeq	r0, r2
   13bb8:	beq	13cd0 <_start@@Base+0x1618>
   13bbc:	add	r3, pc, #244	; 0xf4
   13bc0:	ldrd	r2, [r3]
   13bc4:	cmp	r1, r3
   13bc8:	cmpeq	r0, r2
   13bcc:	bne	138cc <_start@@Base+0x1214>
   13bd0:	add	r8, r4, #16
   13bd4:	mov	r1, r5
   13bd8:	mov	r0, r8
   13bdc:	bl	127e0 <_start@@Base+0x128>
   13be0:	mov	r2, #0
   13be4:	ldr	r3, [pc, #212]	; 13cc0 <_start@@Base+0x1608>
   13be8:	and	r2, r2, r0
   13bec:	and	r3, r3, r1
   13bf0:	mov	r0, #0
   13bf4:	ldr	r1, [pc, #208]	; 13ccc <_start@@Base+0x1614>
   13bf8:	cmp	r3, r1
   13bfc:	cmpeq	r2, r0
   13c00:	bne	138cc <_start@@Base+0x1214>
   13c04:	sub	r8, r5, r8
   13c08:	cmp	r8, #2
   13c0c:	ble	138cc <_start@@Base+0x1214>
   13c10:	ldrb	r3, [r4, #18]
   13c14:	cmp	r3, #46	; 0x2e
   13c18:	bne	138cc <_start@@Base+0x1214>
   13c1c:	ldr	r3, [sp, #52]	; 0x34
   13c20:	str	r3, [sp, #4]
   13c24:	ldr	r3, [sp, #48]	; 0x30
   13c28:	str	r3, [sp]
   13c2c:	mov	r3, r6
   13c30:	mov	r2, r5
   13c34:	add	r1, r4, #19
   13c38:	mov	r0, r7
   13c3c:	bl	13060 <_start@@Base+0x9a8>
   13c40:	mov	r4, r0
   13c44:	b	138cc <_start@@Base+0x1214>
   13c48:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   13c4c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   13c50:	cmnvs	r3, lr, lsr #18
   13c54:			; <UNDEFINED> instruction: 0x46616e74
   13c58:	cmnvs	r3, r5, ror #8
   13c5c:	cmnmi	r8, #-2147483620	; 0x8000001c
   13c60:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   13c64:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   13c68:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   13c6c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   13c70:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   13c74:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   13c78:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   13c7c:	cmnpl	r0, #-1073741800	; 0xc0000018
   13c80:	cmnvs	ip, #100, 10	; 0x19000000
   13c84:	svcvs	0x006d496e
   13c88:	andeq	r0, r0, r0
   13c8c:	strbtmi	r6, [pc], -r0, lsl #30
   13c90:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   13c94:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   13c98:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   13c9c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13ca0:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   13ca4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13ca8:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   13cac:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13cb0:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   13cb4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13cb8:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   13cbc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13cc0:			; <UNDEFINED> instruction: 0xffff0000
   13cc4:	cmnvs	ip, r0
   13cc8:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   13ccc:	svcvs	0x006f0000
   13cd0:	add	r8, r4, #16
   13cd4:	mov	r1, r5
   13cd8:	mov	r0, r8
   13cdc:	bl	127e0 <_start@@Base+0x128>
   13ce0:	mov	r0, #0
   13ce4:	add	r3, pc, #764	; 0x2fc
   13ce8:	ldrd	r2, [r3]
   13cec:	cmp	r1, r3
   13cf0:	cmpeq	r0, r2
   13cf4:	bne	138cc <_start@@Base+0x1214>
   13cf8:	sub	r8, r5, r8
   13cfc:	cmp	r8, #4
   13d00:	ble	138cc <_start@@Base+0x1214>
   13d04:	ldrb	r3, [r4, #20]
   13d08:	cmp	r3, #46	; 0x2e
   13d0c:	bne	138cc <_start@@Base+0x1214>
   13d10:	ldr	r3, [sp, #52]	; 0x34
   13d14:	str	r3, [sp, #4]
   13d18:	ldr	r3, [sp, #48]	; 0x30
   13d1c:	str	r3, [sp]
   13d20:	mov	r3, r6
   13d24:	mov	r2, r5
   13d28:	add	r1, r4, #21
   13d2c:	mov	r0, r7
   13d30:	bl	136f0 <_start@@Base+0x1038>
   13d34:	mov	r4, r0
   13d38:	b	138cc <_start@@Base+0x1214>
   13d3c:	add	r3, pc, #684	; 0x2ac
   13d40:	ldrd	r2, [r3]
   13d44:	cmp	r1, r3
   13d48:	cmpeq	r0, r2
   13d4c:	bhi	13dc0 <_start@@Base+0x1708>
   13d50:	bne	138cc <_start@@Base+0x1214>
   13d54:	add	r8, r4, #16
   13d58:	mov	r1, r5
   13d5c:	mov	r0, r8
   13d60:	bl	127e0 <_start@@Base+0x128>
   13d64:	bic	r0, r0, #255	; 0xff
   13d68:	add	r3, pc, #648	; 0x288
   13d6c:	ldrd	r2, [r3]
   13d70:	cmp	r1, r3
   13d74:	cmpeq	r0, r2
   13d78:	bne	138cc <_start@@Base+0x1214>
   13d7c:	sub	r8, r5, r8
   13d80:	cmp	r8, #7
   13d84:	ble	138cc <_start@@Base+0x1214>
   13d88:	ldrb	r3, [r4, #23]
   13d8c:	cmp	r3, #46	; 0x2e
   13d90:	bne	138cc <_start@@Base+0x1214>
   13d94:	ldr	r3, [sp, #52]	; 0x34
   13d98:	str	r3, [sp, #4]
   13d9c:	ldr	r3, [sp, #48]	; 0x30
   13da0:	str	r3, [sp]
   13da4:	mov	r3, r6
   13da8:	mov	r2, r5
   13dac:	add	r1, r4, #24
   13db0:	mov	r0, r7
   13db4:	bl	131a8 <_start@@Base+0xaf0>
   13db8:	mov	r4, r0
   13dbc:	b	138cc <_start@@Base+0x1214>
   13dc0:	add	r3, pc, #568	; 0x238
   13dc4:	ldrd	r2, [r3]
   13dc8:	cmp	r1, r3
   13dcc:	cmpeq	r0, r2
   13dd0:	bhi	13e54 <_start@@Base+0x179c>
   13dd4:	add	r3, pc, #556	; 0x22c
   13dd8:	ldrd	r2, [r3]
   13ddc:	cmp	r1, r3
   13de0:	cmpeq	r0, r2
   13de4:	bne	138cc <_start@@Base+0x1214>
   13de8:	add	r8, r4, #16
   13dec:	mov	r1, r5
   13df0:	mov	r0, r8
   13df4:	bl	127e0 <_start@@Base+0x128>
   13df8:	bic	r0, r0, #255	; 0xff
   13dfc:	add	r3, pc, #524	; 0x20c
   13e00:	ldrd	r2, [r3]
   13e04:	cmp	r1, r3
   13e08:	cmpeq	r0, r2
   13e0c:	bne	138cc <_start@@Base+0x1214>
   13e10:	sub	r8, r5, r8
   13e14:	cmp	r8, #7
   13e18:	ble	138cc <_start@@Base+0x1214>
   13e1c:	ldrb	r3, [r4, #23]
   13e20:	cmp	r3, #46	; 0x2e
   13e24:	bne	138cc <_start@@Base+0x1214>
   13e28:	ldr	r3, [sp, #52]	; 0x34
   13e2c:	str	r3, [sp, #4]
   13e30:	ldr	r3, [sp, #48]	; 0x30
   13e34:	str	r3, [sp]
   13e38:	mov	r3, r6
   13e3c:	mov	r2, r5
   13e40:	add	r1, r4, #24
   13e44:	mov	r0, r7
   13e48:	bl	1334c <_start@@Base+0xc94>
   13e4c:	mov	r4, r0
   13e50:	b	138cc <_start@@Base+0x1214>
   13e54:	add	r3, pc, #444	; 0x1bc
   13e58:	ldrd	r2, [r3]
   13e5c:	cmp	r1, r3
   13e60:	cmpeq	r0, r2
   13e64:	bne	138cc <_start@@Base+0x1214>
   13e68:	add	r8, r4, #16
   13e6c:	mov	r1, r5
   13e70:	mov	r0, r8
   13e74:	bl	127e0 <_start@@Base+0x128>
   13e78:	mov	sl, r0
   13e7c:	mov	fp, r1
   13e80:	bic	r0, r0, #255	; 0xff
   13e84:	add	r3, pc, #404	; 0x194
   13e88:	ldrd	r2, [r3]
   13e8c:	cmp	r1, r3
   13e90:	cmpeq	r0, r2
   13e94:	beq	13f5c <_start@@Base+0x18a4>
   13e98:	add	r3, pc, #392	; 0x188
   13e9c:	ldrd	r2, [r3]
   13ea0:	cmp	fp, r3
   13ea4:	cmpeq	sl, r2
   13ea8:	bne	138cc <_start@@Base+0x1214>
   13eac:	add	r8, r4, #24
   13eb0:	mov	r1, r5
   13eb4:	mov	r0, r8
   13eb8:	bl	127e0 <_start@@Base+0x128>
   13ebc:	mov	r0, #0
   13ec0:	bic	r1, r1, #255	; 0xff
   13ec4:	add	r3, pc, #356	; 0x164
   13ec8:	ldrd	r2, [r3]
   13ecc:	cmp	r1, r3
   13ed0:	cmpeq	r0, r2
   13ed4:	bne	138cc <_start@@Base+0x1214>
   13ed8:	sub	r8, r5, r8
   13edc:	cmp	r8, #3
   13ee0:	ble	138cc <_start@@Base+0x1214>
   13ee4:	ldrb	r3, [r4, #27]
   13ee8:	cmp	r3, #46	; 0x2e
   13eec:	bne	138cc <_start@@Base+0x1214>
   13ef0:	add	r8, r4, #28
   13ef4:	mov	r1, r5
   13ef8:	mov	r0, r8
   13efc:	bl	127e0 <_start@@Base+0x128>
   13f00:	mov	r0, #0
   13f04:	and	r1, r1, #-16777216	; 0xff000000
   13f08:	cmp	r1, #2013265920	; 0x78000000
   13f0c:	cmpeq	r0, #0
   13f10:	movne	r4, r8
   13f14:	bne	138cc <_start@@Base+0x1214>
   13f18:	ldr	r3, [sp, #52]	; 0x34
   13f1c:	str	r3, [sp]
   13f20:	mov	r3, #1
   13f24:	mov	r2, r5
   13f28:	mov	r1, r8
   13f2c:	mov	r0, r7
   13f30:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   13f34:	mov	r4, r0
   13f38:	cmp	r8, r0
   13f3c:	beq	138cc <_start@@Base+0x1214>
   13f40:	mov	r2, #0
   13f44:	mov	r3, #0
   13f48:	ldr	r1, [sp, #48]	; 0x30
   13f4c:	strd	r2, [r1]
   13f50:	mov	r3, #0
   13f54:	str	r3, [r6]
   13f58:	b	138cc <_start@@Base+0x1214>
   13f5c:	sub	r8, r5, r8
   13f60:	cmp	r8, #7
   13f64:	ble	13e98 <_start@@Base+0x17e0>
   13f68:	ldrb	r3, [r4, #23]
   13f6c:	cmp	r3, #46	; 0x2e
   13f70:	bne	13e98 <_start@@Base+0x17e0>
   13f74:	ldr	r3, [sp, #52]	; 0x34
   13f78:	str	r3, [sp, #4]
   13f7c:	ldr	r3, [sp, #48]	; 0x30
   13f80:	str	r3, [sp]
   13f84:	mov	r3, r6
   13f88:	mov	r2, r5
   13f8c:	add	r1, r4, #24
   13f90:	mov	r0, r7
   13f94:	bl	1356c <_start@@Base+0xeb4>
   13f98:	mov	r4, r0
   13f9c:	b	138cc <_start@@Base+0x1214>
   13fa0:	ldr	r3, [sp, #52]	; 0x34
   13fa4:	str	r3, [sp]
   13fa8:	mov	r3, #3
   13fac:	mov	r2, r5
   13fb0:	mov	r1, r4
   13fb4:	mov	r0, r7
   13fb8:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   13fbc:	cmp	r4, r0
   13fc0:	beq	13a5c <_start@@Base+0x13a4>
   13fc4:	mov	r2, #17
   13fc8:	mov	r3, #0
   13fcc:	ldr	r1, [sp, #48]	; 0x30
   13fd0:	strd	r2, [r1]
   13fd4:	mov	r3, #0
   13fd8:	str	r3, [r6]
   13fdc:	mov	r4, r0
   13fe0:	b	138cc <_start@@Base+0x1214>
   13fe4:	nop			; (mov r0, r0)
   13fe8:	andeq	r0, r0, r0
   13fec:	svcvs	0x006c6f72
   13ff0:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   13ff4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   13ff8:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   13ffc:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   14000:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   14004:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   14008:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   1400c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   14010:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   14014:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   14018:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   1401c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   14020:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   14024:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   14028:	rsbsvc	r7, r4, r5, ror #18
   1402c:	svcvs	0x0074656d
   14030:	andeq	r0, r0, r0
   14034:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   14038:	push	{r4, r5, r6, r7, r8, r9, lr}
   1403c:	sub	sp, sp, #28
   14040:	mov	r4, #0
   14044:	mov	r5, #0
   14048:	strd	r4, [sp, #16]
   1404c:	mov	ip, #0
   14050:	str	ip, [sp, #12]
   14054:	strh	ip, [r3]
   14058:	cmp	r1, r2
   1405c:	moveq	r0, r2
   14060:	beq	140e0 <_start@@Base+0x1a28>
   14064:	mov	r6, r3
   14068:	mov	r5, r2
   1406c:	mov	r4, r1
   14070:	mov	r7, r0
   14074:	add	r3, sp, #16
   14078:	str	r3, [sp]
   1407c:	add	r3, sp, #12
   14080:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   14084:	cmp	r4, r0
   14088:	beq	140e0 <_start@@Base+0x1a28>
   1408c:	ldrd	r2, [sp, #16]
   14090:	ldr	r1, [sp, #12]
   14094:	cmp	r1, #0
   14098:	beq	140c8 <_start@@Base+0x1a10>
   1409c:	cmp	r3, #0
   140a0:	cmpeq	r2, #32768	; 0x8000
   140a4:	rsbls	r2, r2, #0
   140a8:	strhls	r2, [r6]
   140ac:	bls	140e0 <_start@@Base+0x1a28>
   140b0:	mov	r3, #8
   140b4:	mov	r2, r5
   140b8:	mov	r1, r0
   140bc:	mov	r0, r7
   140c0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   140c4:	b	140e0 <_start@@Base+0x1a28>
   140c8:	ldr	r8, [pc, #48]	; 14100 <_start@@Base+0x1a48>
   140cc:	mov	r9, #0
   140d0:	cmp	r3, r9
   140d4:	cmpeq	r2, r8
   140d8:	strhls	r2, [r6]
   140dc:	bhi	140e8 <_start@@Base+0x1a30>
   140e0:	add	sp, sp, #28
   140e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   140e8:	mov	r3, #7
   140ec:	mov	r2, r5
   140f0:	mov	r1, r0
   140f4:	mov	r0, r7
   140f8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   140fc:	b	140e0 <_start@@Base+0x1a28>
   14100:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   14104:	push	{r4, r5, r6, r7, r8, r9, lr}
   14108:	sub	sp, sp, #28
   1410c:	mov	r4, #0
   14110:	mov	r5, #0
   14114:	strd	r4, [sp, #16]
   14118:	mov	ip, #0
   1411c:	str	ip, [sp, #12]
   14120:	str	ip, [r3]
   14124:	cmp	r1, r2
   14128:	moveq	r0, r2
   1412c:	beq	141ac <_start@@Base+0x1af4>
   14130:	mov	r6, r3
   14134:	mov	r5, r2
   14138:	mov	r4, r1
   1413c:	mov	r7, r0
   14140:	add	r3, sp, #16
   14144:	str	r3, [sp]
   14148:	add	r3, sp, #12
   1414c:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   14150:	cmp	r4, r0
   14154:	beq	141ac <_start@@Base+0x1af4>
   14158:	ldrd	r2, [sp, #16]
   1415c:	ldr	r1, [sp, #12]
   14160:	cmp	r1, #0
   14164:	beq	14194 <_start@@Base+0x1adc>
   14168:	cmp	r3, #0
   1416c:	cmpeq	r2, #-2147483648	; 0x80000000
   14170:	rsbls	r2, r2, #0
   14174:	strls	r2, [r6]
   14178:	bls	141ac <_start@@Base+0x1af4>
   1417c:	mov	r3, #8
   14180:	mov	r2, r5
   14184:	mov	r1, r0
   14188:	mov	r0, r7
   1418c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14190:	b	141ac <_start@@Base+0x1af4>
   14194:	mvn	r8, #-2147483648	; 0x80000000
   14198:	mov	r9, #0
   1419c:	cmp	r3, r9
   141a0:	cmpeq	r2, r8
   141a4:	strls	r2, [r6]
   141a8:	bhi	141b4 <_start@@Base+0x1afc>
   141ac:	add	sp, sp, #28
   141b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   141b4:	mov	r3, #7
   141b8:	mov	r2, r5
   141bc:	mov	r1, r0
   141c0:	mov	r0, r7
   141c4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   141c8:	b	141ac <_start@@Base+0x1af4>
   141cc:	push	{r4, r5, r6, r7, r8, r9, lr}
   141d0:	sub	sp, sp, #28
   141d4:	mov	r4, #0
   141d8:	mov	r5, #0
   141dc:	strd	r4, [sp, #16]
   141e0:	mov	ip, #0
   141e4:	str	ip, [sp, #12]
   141e8:	str	ip, [r3]
   141ec:	cmp	r1, r2
   141f0:	moveq	r0, r2
   141f4:	beq	14248 <_start@@Base+0x1b90>
   141f8:	mov	r7, r3
   141fc:	mov	r5, r2
   14200:	mov	r4, r1
   14204:	mov	r6, r0
   14208:	add	r3, sp, #16
   1420c:	str	r3, [sp]
   14210:	add	r3, sp, #12
   14214:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   14218:	cmp	r4, r0
   1421c:	beq	14248 <_start@@Base+0x1b90>
   14220:	ldr	r3, [sp, #12]
   14224:	cmp	r3, #0
   14228:	bne	14250 <_start@@Base+0x1b98>
   1422c:	ldrd	r2, [sp, #16]
   14230:	mvn	r8, #0
   14234:	mov	r9, #0
   14238:	cmp	r3, r9
   1423c:	cmpeq	r2, r8
   14240:	strls	r2, [r7]
   14244:	bhi	14268 <_start@@Base+0x1bb0>
   14248:	add	sp, sp, #28
   1424c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14250:	mov	r3, #8
   14254:	mov	r2, r5
   14258:	mov	r1, r0
   1425c:	mov	r0, r6
   14260:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14264:	b	14248 <_start@@Base+0x1b90>
   14268:	mov	r3, #7
   1426c:	mov	r2, r5
   14270:	mov	r1, r0
   14274:	mov	r0, r6
   14278:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1427c:	b	14248 <_start@@Base+0x1b90>
   14280:	push	{r4, r5, r6, r7, lr}
   14284:	sub	sp, sp, #28
   14288:	mov	r4, #0
   1428c:	mov	r5, #0
   14290:	strd	r4, [sp, #16]
   14294:	mov	ip, #0
   14298:	str	ip, [sp, #12]
   1429c:	strd	r4, [r3]
   142a0:	cmp	r1, r2
   142a4:	moveq	r0, r2
   142a8:	beq	142e8 <_start@@Base+0x1c30>
   142ac:	mov	r7, r3
   142b0:	mov	r5, r2
   142b4:	mov	r4, r1
   142b8:	mov	r6, r0
   142bc:	add	r3, sp, #16
   142c0:	str	r3, [sp]
   142c4:	add	r3, sp, #12
   142c8:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   142cc:	cmp	r4, r0
   142d0:	beq	142e8 <_start@@Base+0x1c30>
   142d4:	ldr	r3, [sp, #12]
   142d8:	cmp	r3, #0
   142dc:	bne	142f0 <_start@@Base+0x1c38>
   142e0:	ldrd	r2, [sp, #16]
   142e4:	strd	r2, [r7]
   142e8:	add	sp, sp, #28
   142ec:	pop	{r4, r5, r6, r7, pc}
   142f0:	mov	r3, #8
   142f4:	mov	r2, r5
   142f8:	mov	r1, r0
   142fc:	mov	r0, r6
   14300:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14304:	b	142e8 <_start@@Base+0x1c30>
   14308:	push	{r4, r5, r6, r7, lr}
   1430c:	sub	sp, sp, #28
   14310:	mov	r4, #0
   14314:	mov	r5, #0
   14318:	strd	r4, [sp, #16]
   1431c:	mov	ip, #0
   14320:	str	ip, [sp, #12]
   14324:	strb	ip, [r3]
   14328:	cmp	r1, r2
   1432c:	moveq	r0, r2
   14330:	beq	1437c <_start@@Base+0x1cc4>
   14334:	mov	r7, r3
   14338:	mov	r5, r2
   1433c:	mov	r4, r1
   14340:	mov	r6, r0
   14344:	add	r3, sp, #16
   14348:	str	r3, [sp]
   1434c:	add	r3, sp, #12
   14350:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   14354:	cmp	r4, r0
   14358:	beq	1437c <_start@@Base+0x1cc4>
   1435c:	ldr	r3, [sp, #12]
   14360:	cmp	r3, #0
   14364:	bne	14384 <_start@@Base+0x1ccc>
   14368:	ldrd	r2, [sp, #16]
   1436c:	cmp	r3, #0
   14370:	cmpeq	r2, #255	; 0xff
   14374:	strbls	r2, [r7]
   14378:	bhi	1439c <_start@@Base+0x1ce4>
   1437c:	add	sp, sp, #28
   14380:	pop	{r4, r5, r6, r7, pc}
   14384:	mov	r3, #8
   14388:	mov	r2, r5
   1438c:	mov	r1, r0
   14390:	mov	r0, r6
   14394:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14398:	b	1437c <_start@@Base+0x1cc4>
   1439c:	mov	r3, #7
   143a0:	mov	r2, r5
   143a4:	mov	r1, r0
   143a8:	mov	r0, r6
   143ac:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   143b0:	b	1437c <_start@@Base+0x1cc4>
   143b4:	push	{r4, r5, r6, r7, lr}
   143b8:	sub	sp, sp, #28
   143bc:	mov	r4, #0
   143c0:	mov	r5, #0
   143c4:	strd	r4, [sp, #16]
   143c8:	mov	ip, #0
   143cc:	str	ip, [sp, #12]
   143d0:	strd	r4, [r3]
   143d4:	cmp	r1, r2
   143d8:	moveq	r0, r2
   143dc:	beq	1445c <_start@@Base+0x1da4>
   143e0:	mov	r6, r3
   143e4:	mov	r5, r2
   143e8:	mov	r4, r1
   143ec:	mov	r7, r0
   143f0:	add	r3, sp, #16
   143f4:	str	r3, [sp]
   143f8:	add	r3, sp, #12
   143fc:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   14400:	cmp	r4, r0
   14404:	beq	1445c <_start@@Base+0x1da4>
   14408:	ldrd	r2, [sp, #16]
   1440c:	ldr	r1, [sp, #12]
   14410:	cmp	r1, #0
   14414:	beq	1444c <_start@@Base+0x1d94>
   14418:	cmp	r3, #-2147483648	; 0x80000000
   1441c:	cmpeq	r2, #0
   14420:	bhi	14434 <_start@@Base+0x1d7c>
   14424:	rsbs	r2, r2, #0
   14428:	rsc	r3, r3, #0
   1442c:	strd	r2, [r6]
   14430:	b	1445c <_start@@Base+0x1da4>
   14434:	mov	r3, #8
   14438:	mov	r2, r5
   1443c:	mov	r1, r0
   14440:	mov	r0, r7
   14444:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14448:	b	1445c <_start@@Base+0x1da4>
   1444c:	cmp	r2, #0
   14450:	sbcs	r1, r3, #0
   14454:	blt	14464 <_start@@Base+0x1dac>
   14458:	strd	r2, [r6]
   1445c:	add	sp, sp, #28
   14460:	pop	{r4, r5, r6, r7, pc}
   14464:	mov	r3, #7
   14468:	mov	r2, r5
   1446c:	mov	r1, r0
   14470:	mov	r0, r7
   14474:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14478:	b	1445c <_start@@Base+0x1da4>
   1447c:	sub	r3, r2, r1
   14480:	cmp	r3, #1
   14484:	ble	14498 <_start@@Base+0x1de0>
   14488:	ldrb	r3, [r1]
   1448c:	cmp	r3, #32
   14490:	bhi	144b8 <_start@@Base+0x1e00>
   14494:	beq	144a4 <_start@@Base+0x1dec>
   14498:	push	{r4, lr}
   1449c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   144a0:	pop	{r4, pc}
   144a4:	ldrb	r3, [r1, #1]
   144a8:	cmp	r3, #32
   144ac:	bls	14498 <_start@@Base+0x1de0>
   144b0:	add	r0, r1, #1
   144b4:	bx	lr
   144b8:	mov	r0, r1
   144bc:	bx	lr
   144c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144c4:	sub	sp, sp, #44	; 0x2c
   144c8:	mov	r6, r0
   144cc:	mov	r4, r2
   144d0:	str	r3, [sp, #20]
   144d4:	ldr	r9, [sp, #80]	; 0x50
   144d8:	mov	r2, #0
   144dc:	mov	r3, #0
   144e0:	strd	r2, [r9]
   144e4:	cmp	r1, r4
   144e8:	moveq	r5, r4
   144ec:	beq	14530 <_start@@Base+0x1e78>
   144f0:	mov	r5, r1
   144f4:	ldrb	r3, [r1]
   144f8:	cmp	r3, #34	; 0x22
   144fc:	addeq	r5, r1, #1
   14500:	moveq	r3, #0
   14504:	streq	r3, [r0, #12]
   14508:	beq	14530 <_start@@Base+0x1e78>
   1450c:	cmp	r3, #46	; 0x2e
   14510:	movne	r3, #1
   14514:	strne	r3, [r0, #12]
   14518:	bne	14530 <_start@@Base+0x1e78>
   1451c:	mov	r3, #5
   14520:	mov	r2, r4
   14524:	mov	r1, r5
   14528:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1452c:	mov	r5, r0
   14530:	ldr	r3, [r6, #12]
   14534:	cmp	r3, #0
   14538:	bne	14550 <_start@@Base+0x1e98>
   1453c:	mov	r2, r4
   14540:	mov	r1, r5
   14544:	mov	r0, r6
   14548:	bl	1447c <_start@@Base+0x1dc4>
   1454c:	mov	r5, r0
   14550:	cmp	r4, r5
   14554:	moveq	r4, r5
   14558:	beq	145cc <_start@@Base+0x1f14>
   1455c:	mov	r8, #0
   14560:	mov	r2, #0
   14564:	mov	r3, #0
   14568:	strd	r2, [sp, #8]
   1456c:	add	fp, sp, #24
   14570:	ldr	sl, [sp, #20]
   14574:	str	fp, [sp, #4]
   14578:	add	r3, sp, #32
   1457c:	str	r3, [sp]
   14580:	ldr	r7, [sl]
   14584:	add	r3, sp, #28
   14588:	mov	r2, r4
   1458c:	mov	r1, r5
   14590:	mov	r0, r6
   14594:	blx	r7
   14598:	cmp	r4, r0
   1459c:	beq	145cc <_start@@Base+0x1f14>
   145a0:	cmp	r5, r0
   145a4:	bne	145e0 <_start@@Base+0x1f28>
   145a8:	ldr	r3, [sl, #4]!
   145ac:	cmp	r3, #0
   145b0:	bne	14574 <_start@@Base+0x1ebc>
   145b4:	mov	r3, #23
   145b8:	mov	r2, r4
   145bc:	mov	r1, r5
   145c0:	mov	r0, r6
   145c4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   145c8:	mov	r4, r0
   145cc:	mov	r0, r4
   145d0:	add	sp, sp, #44	; 0x2c
   145d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145d8:	mov	r5, r7
   145dc:	b	14570 <_start@@Base+0x1eb8>
   145e0:	mov	r7, r0
   145e4:	cmp	r8, #0
   145e8:	beq	14614 <_start@@Base+0x1f5c>
   145ec:	ldr	r3, [r6, #12]
   145f0:	cmp	r3, #0
   145f4:	beq	14614 <_start@@Base+0x1f5c>
   145f8:	mov	r3, #14
   145fc:	mov	r2, r4
   14600:	mov	r1, r0
   14604:	mov	r0, r6
   14608:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1460c:	mov	r4, r0
   14610:	b	145cc <_start@@Base+0x1f14>
   14614:	ldr	r3, [sp, #28]
   14618:	cmp	r3, #0
   1461c:	bne	1465c <_start@@Base+0x1fa4>
   14620:	ldrd	r2, [sp, #32]
   14624:	strd	r2, [sp, #8]
   14628:	ldrd	r2, [r9]
   1462c:	ldrd	r0, [sp, #8]
   14630:	adds	r0, r0, r2
   14634:	adc	r1, r1, r3
   14638:	mov	r2, r0
   1463c:	mov	r3, r1
   14640:	strd	r2, [r9]
   14644:	add	r8, r8, #1
   14648:	ldr	r3, [sp, #24]
   1464c:	cmp	r3, #0
   14650:	bne	145d8 <_start@@Base+0x1f20>
   14654:	mov	r4, r7
   14658:	b	145cc <_start@@Base+0x1f14>
   1465c:	mov	r3, #8
   14660:	mov	r2, r4
   14664:	mov	r1, r7
   14668:	mov	r0, r6
   1466c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14670:	cmp	r4, r0
   14674:	bne	14628 <_start@@Base+0x1f70>
   14678:	b	145cc <_start@@Base+0x1f14>
   1467c:	push	{r4, r5, r6, lr}
   14680:	mov	r5, r0
   14684:	mov	r0, r1
   14688:	mov	r4, r2
   1468c:	sub	r2, r2, r1
   14690:	cmp	r2, r3
   14694:	pople	{r4, r5, r6, pc}
   14698:	ldr	r2, [r5, #12]
   1469c:	cmp	r2, #0
   146a0:	beq	14718 <_start@@Base+0x2060>
   146a4:	add	r1, r1, r3
   146a8:	ldrb	r3, [r0, r3]
   146ac:	cmp	r3, #58	; 0x3a
   146b0:	cmpne	r3, #32
   146b4:	movls	r3, #0
   146b8:	strls	r3, [r5, #12]
   146bc:	bhi	14714 <_start@@Base+0x205c>
   146c0:	sub	r3, r4, r1
   146c4:	cmp	r3, #1
   146c8:	ble	146dc <_start@@Base+0x2024>
   146cc:	ldrb	r3, [r1]
   146d0:	cmp	r3, #32
   146d4:	bhi	146ec <_start@@Base+0x2034>
   146d8:	beq	14730 <_start@@Base+0x2078>
   146dc:	mov	r2, r4
   146e0:	mov	r0, r5
   146e4:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   146e8:	mov	r1, r0
   146ec:	cmp	r4, r1
   146f0:	beq	14700 <_start@@Base+0x2048>
   146f4:	ldrb	r3, [r1]
   146f8:	cmp	r3, #58	; 0x3a
   146fc:	beq	14744 <_start@@Base+0x208c>
   14700:	mov	r3, #4
   14704:	mov	r2, r4
   14708:	mov	r0, r5
   1470c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14710:	pop	{r4, r5, r6, pc}
   14714:	pop	{r4, r5, r6, pc}
   14718:	ldrb	r2, [r1, r3]
   1471c:	cmp	r2, #34	; 0x22
   14720:	popne	{r4, r5, r6, pc}
   14724:	add	r3, r3, #1
   14728:	add	r1, r1, r3
   1472c:	b	146c0 <_start@@Base+0x2008>
   14730:	ldrb	r3, [r1, #1]
   14734:	cmp	r3, #32
   14738:	addhi	r1, r1, #1
   1473c:	bls	146dc <_start@@Base+0x2024>
   14740:	b	146ec <_start@@Base+0x2034>
   14744:	mov	r2, r4
   14748:	add	r1, r1, #1
   1474c:	mov	r0, r5
   14750:	bl	1447c <_start@@Base+0x1dc4>
   14754:	pop	{r4, r5, r6, pc}
   14758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1475c:	sub	sp, sp, #36	; 0x24
   14760:	mov	r8, r0
   14764:	mov	r6, r1
   14768:	mov	r7, r2
   1476c:	str	r3, [sp, #12]
   14770:	mov	r3, #0
   14774:	ldr	r2, [sp, #72]	; 0x48
   14778:	str	r3, [r2]
   1477c:	cmp	r1, r7
   14780:	beq	148d8 <_start@@Base+0x2220>
   14784:	ldrb	r3, [r1]
   14788:	cmp	r3, #34	; 0x22
   1478c:	addeq	r6, r1, #1
   14790:	moveq	r3, #0
   14794:	streq	r3, [r0, #12]
   14798:	beq	148e4 <_start@@Base+0x222c>
   1479c:	cmp	r3, #46	; 0x2e
   147a0:	movne	r3, #1
   147a4:	strne	r3, [r0, #12]
   147a8:	beq	147bc <_start@@Base+0x2104>
   147ac:	mov	fp, #0
   147b0:	add	sl, sp, #16
   147b4:	add	r9, sp, #24
   147b8:	b	1484c <_start@@Base+0x2194>
   147bc:	mov	r3, #5
   147c0:	mov	r2, r7
   147c4:	mov	r1, r6
   147c8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   147cc:	mov	r6, r0
   147d0:	ldr	r3, [r8, #12]
   147d4:	cmp	r3, #0
   147d8:	beq	148e4 <_start@@Base+0x222c>
   147dc:	b	14914 <_start@@Base+0x225c>
   147e0:	ldrb	r3, [r6, #1]
   147e4:	cmp	r3, #32
   147e8:	addhi	r6, r6, #1
   147ec:	bls	14900 <_start@@Base+0x2248>
   147f0:	b	14914 <_start@@Base+0x225c>
   147f4:	mov	r4, r0
   147f8:	cmp	fp, #0
   147fc:	beq	1480c <_start@@Base+0x2154>
   14800:	ldr	r3, [r8, #12]
   14804:	cmp	r3, #0
   14808:	bne	148a8 <_start@@Base+0x21f0>
   1480c:	ldrd	r0, [sp, #24]
   14810:	ldr	r3, [sp, #20]
   14814:	cmp	r3, #0
   14818:	beq	148c4 <_start@@Base+0x220c>
   1481c:	bl	2b568 <flatcc_json_parser_struct_as_root@@Base+0x650>
   14820:	vmov	s15, r0
   14824:	vneg.f32	s14, s15
   14828:	ldr	r3, [sp, #72]	; 0x48
   1482c:	vldr	s15, [r3]
   14830:	vadd.f32	s15, s15, s14
   14834:	vstr	s15, [r3]
   14838:	add	fp, fp, #1
   1483c:	ldr	r3, [sp, #16]
   14840:	cmp	r3, #0
   14844:	beq	148d0 <_start@@Base+0x2218>
   14848:	mov	r6, r4
   1484c:	ldr	r5, [sp, #12]
   14850:	str	sl, [sp, #4]
   14854:	str	r9, [sp]
   14858:	ldr	r4, [r5]
   1485c:	add	r3, sp, #20
   14860:	mov	r2, r7
   14864:	mov	r1, r6
   14868:	mov	r0, r8
   1486c:	blx	r4
   14870:	cmp	r7, r0
   14874:	beq	14920 <_start@@Base+0x2268>
   14878:	cmp	r6, r0
   1487c:	bne	147f4 <_start@@Base+0x213c>
   14880:	ldr	r3, [r5, #4]!
   14884:	cmp	r3, #0
   14888:	bne	14850 <_start@@Base+0x2198>
   1488c:	mov	r3, #23
   14890:	mov	r2, r7
   14894:	mov	r1, r6
   14898:	mov	r0, r8
   1489c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   148a0:	mov	r7, r0
   148a4:	b	14920 <_start@@Base+0x2268>
   148a8:	mov	r3, #14
   148ac:	mov	r2, r7
   148b0:	mov	r1, r0
   148b4:	mov	r0, r8
   148b8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   148bc:	mov	r7, r0
   148c0:	b	14920 <_start@@Base+0x2268>
   148c4:	bl	2b568 <flatcc_json_parser_struct_as_root@@Base+0x650>
   148c8:	vmov	s14, r0
   148cc:	b	14828 <_start@@Base+0x2170>
   148d0:	mov	r7, r4
   148d4:	b	14920 <_start@@Base+0x2268>
   148d8:	ldr	r3, [r0, #12]
   148dc:	cmp	r3, #0
   148e0:	bne	1492c <_start@@Base+0x2274>
   148e4:	sub	r3, r7, r6
   148e8:	cmp	r3, #1
   148ec:	ble	14900 <_start@@Base+0x2248>
   148f0:	ldrb	r3, [r6]
   148f4:	cmp	r3, #32
   148f8:	bhi	14914 <_start@@Base+0x225c>
   148fc:	beq	147e0 <_start@@Base+0x2128>
   14900:	mov	r2, r7
   14904:	mov	r1, r6
   14908:	mov	r0, r8
   1490c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   14910:	mov	r6, r0
   14914:	cmp	r7, r6
   14918:	moveq	r7, r6
   1491c:	bne	147ac <_start@@Base+0x20f4>
   14920:	mov	r0, r7
   14924:	add	sp, sp, #36	; 0x24
   14928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1492c:	mov	r7, r1
   14930:	b	14920 <_start@@Base+0x2268>
   14934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14938:	sub	sp, sp, #36	; 0x24
   1493c:	mov	r8, r0
   14940:	mov	r6, r1
   14944:	mov	r7, r2
   14948:	str	r3, [sp, #12]
   1494c:	mov	r2, #0
   14950:	mov	r3, #0
   14954:	ldr	r1, [sp, #72]	; 0x48
   14958:	strd	r2, [r1]
   1495c:	cmp	r6, r7
   14960:	beq	14ab8 <_start@@Base+0x2400>
   14964:	ldrb	r3, [r6]
   14968:	cmp	r3, #34	; 0x22
   1496c:	addeq	r6, r6, #1
   14970:	moveq	r3, #0
   14974:	streq	r3, [r0, #12]
   14978:	beq	14ac4 <_start@@Base+0x240c>
   1497c:	cmp	r3, #46	; 0x2e
   14980:	movne	r3, #1
   14984:	strne	r3, [r0, #12]
   14988:	beq	1499c <_start@@Base+0x22e4>
   1498c:	mov	fp, #0
   14990:	add	sl, sp, #16
   14994:	add	r9, sp, #24
   14998:	b	14a2c <_start@@Base+0x2374>
   1499c:	mov	r3, #5
   149a0:	mov	r2, r7
   149a4:	mov	r1, r6
   149a8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   149ac:	mov	r6, r0
   149b0:	ldr	r3, [r8, #12]
   149b4:	cmp	r3, #0
   149b8:	beq	14ac4 <_start@@Base+0x240c>
   149bc:	b	14af4 <_start@@Base+0x243c>
   149c0:	ldrb	r3, [r6, #1]
   149c4:	cmp	r3, #32
   149c8:	addhi	r6, r6, #1
   149cc:	bls	14ae0 <_start@@Base+0x2428>
   149d0:	b	14af4 <_start@@Base+0x243c>
   149d4:	mov	r4, r0
   149d8:	cmp	fp, #0
   149dc:	beq	149ec <_start@@Base+0x2334>
   149e0:	ldr	r3, [r8, #12]
   149e4:	cmp	r3, #0
   149e8:	bne	14a88 <_start@@Base+0x23d0>
   149ec:	ldrd	r0, [sp, #24]
   149f0:	ldr	r3, [sp, #20]
   149f4:	cmp	r3, #0
   149f8:	beq	14aa4 <_start@@Base+0x23ec>
   149fc:	bl	2b330 <flatcc_json_parser_struct_as_root@@Base+0x418>
   14a00:	vmov	d7, r0, r1
   14a04:	vneg.f64	d6, d7
   14a08:	ldr	r3, [sp, #72]	; 0x48
   14a0c:	vldr	d7, [r3]
   14a10:	vadd.f64	d7, d7, d6
   14a14:	vstr	d7, [r3]
   14a18:	add	fp, fp, #1
   14a1c:	ldr	r3, [sp, #16]
   14a20:	cmp	r3, #0
   14a24:	beq	14ab0 <_start@@Base+0x23f8>
   14a28:	mov	r6, r4
   14a2c:	ldr	r5, [sp, #12]
   14a30:	str	sl, [sp, #4]
   14a34:	str	r9, [sp]
   14a38:	ldr	r4, [r5]
   14a3c:	add	r3, sp, #20
   14a40:	mov	r2, r7
   14a44:	mov	r1, r6
   14a48:	mov	r0, r8
   14a4c:	blx	r4
   14a50:	cmp	r7, r0
   14a54:	beq	14b00 <_start@@Base+0x2448>
   14a58:	cmp	r6, r0
   14a5c:	bne	149d4 <_start@@Base+0x231c>
   14a60:	ldr	r3, [r5, #4]!
   14a64:	cmp	r3, #0
   14a68:	bne	14a30 <_start@@Base+0x2378>
   14a6c:	mov	r3, #23
   14a70:	mov	r2, r7
   14a74:	mov	r1, r6
   14a78:	mov	r0, r8
   14a7c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14a80:	mov	r7, r0
   14a84:	b	14b00 <_start@@Base+0x2448>
   14a88:	mov	r3, #14
   14a8c:	mov	r2, r7
   14a90:	mov	r1, r0
   14a94:	mov	r0, r8
   14a98:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14a9c:	mov	r7, r0
   14aa0:	b	14b00 <_start@@Base+0x2448>
   14aa4:	bl	2b330 <flatcc_json_parser_struct_as_root@@Base+0x418>
   14aa8:	vmov	d6, r0, r1
   14aac:	b	14a08 <_start@@Base+0x2350>
   14ab0:	mov	r7, r4
   14ab4:	b	14b00 <_start@@Base+0x2448>
   14ab8:	ldr	r3, [r0, #12]
   14abc:	cmp	r3, #0
   14ac0:	bne	14b0c <_start@@Base+0x2454>
   14ac4:	sub	r3, r7, r6
   14ac8:	cmp	r3, #1
   14acc:	ble	14ae0 <_start@@Base+0x2428>
   14ad0:	ldrb	r3, [r6]
   14ad4:	cmp	r3, #32
   14ad8:	bhi	14af4 <_start@@Base+0x243c>
   14adc:	beq	149c0 <_start@@Base+0x2308>
   14ae0:	mov	r2, r7
   14ae4:	mov	r1, r6
   14ae8:	mov	r0, r8
   14aec:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   14af0:	mov	r6, r0
   14af4:	cmp	r7, r6
   14af8:	moveq	r7, r6
   14afc:	bne	1498c <_start@@Base+0x22d4>
   14b00:	mov	r0, r7
   14b04:	add	sp, sp, #36	; 0x24
   14b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b0c:	mov	r7, r6
   14b10:	b	14b00 <_start@@Base+0x2448>
   14b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b18:	sub	sp, sp, #36	; 0x24
   14b1c:	mov	r8, r0
   14b20:	mov	r6, r1
   14b24:	mov	r7, r2
   14b28:	str	r3, [sp, #12]
   14b2c:	mov	r3, #0
   14b30:	ldr	r2, [sp, #72]	; 0x48
   14b34:	strb	r3, [r2]
   14b38:	cmp	r1, r7
   14b3c:	beq	14cbc <_start@@Base+0x2604>
   14b40:	ldrb	r3, [r1]
   14b44:	cmp	r3, #34	; 0x22
   14b48:	addeq	r6, r1, #1
   14b4c:	moveq	r3, #0
   14b50:	streq	r3, [r0, #12]
   14b54:	beq	14cc8 <_start@@Base+0x2610>
   14b58:	cmp	r3, #46	; 0x2e
   14b5c:	movne	r3, #1
   14b60:	strne	r3, [r0, #12]
   14b64:	beq	14b7c <_start@@Base+0x24c4>
   14b68:	mov	fp, #0
   14b6c:	str	fp, [sp, #8]
   14b70:	add	sl, sp, #16
   14b74:	add	r9, sp, #24
   14b78:	b	14c1c <_start@@Base+0x2564>
   14b7c:	mov	r3, #5
   14b80:	mov	r2, r7
   14b84:	mov	r1, r6
   14b88:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14b8c:	mov	r6, r0
   14b90:	ldr	r3, [r8, #12]
   14b94:	cmp	r3, #0
   14b98:	beq	14cc8 <_start@@Base+0x2610>
   14b9c:	b	14cf8 <_start@@Base+0x2640>
   14ba0:	ldrb	r3, [r6, #1]
   14ba4:	cmp	r3, #32
   14ba8:	addhi	r6, r6, #1
   14bac:	bls	14ce4 <_start@@Base+0x262c>
   14bb0:	b	14cf8 <_start@@Base+0x2640>
   14bb4:	mov	r4, r0
   14bb8:	cmp	fp, #0
   14bbc:	beq	14bcc <_start@@Base+0x2514>
   14bc0:	ldr	r3, [r8, #12]
   14bc4:	cmp	r3, #0
   14bc8:	bne	14c78 <_start@@Base+0x25c0>
   14bcc:	ldr	r3, [sp, #20]
   14bd0:	cmp	r3, #0
   14bd4:	bne	14c94 <_start@@Base+0x25dc>
   14bd8:	ldr	r3, [sp, #28]
   14bdc:	ldr	r2, [sp, #24]
   14be0:	orrs	r3, r2, r3
   14be4:	movne	r3, #1
   14be8:	moveq	r3, #0
   14bec:	str	r3, [sp, #8]
   14bf0:	ldr	r3, [sp, #72]	; 0x48
   14bf4:	ldrb	r3, [r3]
   14bf8:	ldr	r2, [sp, #8]
   14bfc:	add	r3, r2, r3
   14c00:	ldr	r2, [sp, #72]	; 0x48
   14c04:	strb	r3, [r2]
   14c08:	add	fp, fp, #1
   14c0c:	ldr	r3, [sp, #16]
   14c10:	cmp	r3, #0
   14c14:	beq	14cb4 <_start@@Base+0x25fc>
   14c18:	mov	r6, r4
   14c1c:	ldr	r5, [sp, #12]
   14c20:	str	sl, [sp, #4]
   14c24:	str	r9, [sp]
   14c28:	ldr	r4, [r5]
   14c2c:	add	r3, sp, #20
   14c30:	mov	r2, r7
   14c34:	mov	r1, r6
   14c38:	mov	r0, r8
   14c3c:	blx	r4
   14c40:	cmp	r7, r0
   14c44:	beq	14d04 <_start@@Base+0x264c>
   14c48:	cmp	r6, r0
   14c4c:	bne	14bb4 <_start@@Base+0x24fc>
   14c50:	ldr	r3, [r5, #4]!
   14c54:	cmp	r3, #0
   14c58:	bne	14c20 <_start@@Base+0x2568>
   14c5c:	mov	r3, #23
   14c60:	mov	r2, r7
   14c64:	mov	r1, r6
   14c68:	mov	r0, r8
   14c6c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14c70:	mov	r7, r0
   14c74:	b	14d04 <_start@@Base+0x264c>
   14c78:	mov	r3, #14
   14c7c:	mov	r2, r7
   14c80:	mov	r1, r0
   14c84:	mov	r0, r8
   14c88:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14c8c:	mov	r7, r0
   14c90:	b	14d04 <_start@@Base+0x264c>
   14c94:	mov	r3, #8
   14c98:	mov	r2, r7
   14c9c:	mov	r1, r4
   14ca0:	mov	r0, r8
   14ca4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14ca8:	cmp	r7, r0
   14cac:	bne	14bf0 <_start@@Base+0x2538>
   14cb0:	b	14d04 <_start@@Base+0x264c>
   14cb4:	mov	r7, r4
   14cb8:	b	14d04 <_start@@Base+0x264c>
   14cbc:	ldr	r3, [r0, #12]
   14cc0:	cmp	r3, #0
   14cc4:	bne	14d10 <_start@@Base+0x2658>
   14cc8:	sub	r3, r7, r6
   14ccc:	cmp	r3, #1
   14cd0:	ble	14ce4 <_start@@Base+0x262c>
   14cd4:	ldrb	r3, [r6]
   14cd8:	cmp	r3, #32
   14cdc:	bhi	14cf8 <_start@@Base+0x2640>
   14ce0:	beq	14ba0 <_start@@Base+0x24e8>
   14ce4:	mov	r2, r7
   14ce8:	mov	r1, r6
   14cec:	mov	r0, r8
   14cf0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   14cf4:	mov	r6, r0
   14cf8:	cmp	r7, r6
   14cfc:	moveq	r7, r6
   14d00:	bne	14b68 <_start@@Base+0x24b0>
   14d04:	mov	r0, r7
   14d08:	add	sp, sp, #36	; 0x24
   14d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d10:	mov	r7, r1
   14d14:	b	14d04 <_start@@Base+0x264c>
   14d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d1c:	sub	sp, sp, #36	; 0x24
   14d20:	mov	r8, r0
   14d24:	mov	r6, r1
   14d28:	mov	r7, r2
   14d2c:	str	r3, [sp, #8]
   14d30:	mov	r3, #0
   14d34:	ldr	r2, [sp, #72]	; 0x48
   14d38:	strb	r3, [r2]
   14d3c:	cmp	r1, r7
   14d40:	beq	14ed8 <_start@@Base+0x2820>
   14d44:	ldrb	r3, [r1]
   14d48:	cmp	r3, #34	; 0x22
   14d4c:	addeq	r6, r1, #1
   14d50:	moveq	r3, #0
   14d54:	streq	r3, [r0, #12]
   14d58:	beq	14ee4 <_start@@Base+0x282c>
   14d5c:	cmp	r3, #46	; 0x2e
   14d60:	movne	r3, #1
   14d64:	strne	r3, [r0, #12]
   14d68:	beq	14d80 <_start@@Base+0x26c8>
   14d6c:	mov	fp, #0
   14d70:	str	fp, [sp, #12]
   14d74:	add	sl, sp, #16
   14d78:	add	r9, sp, #24
   14d7c:	b	14e20 <_start@@Base+0x2768>
   14d80:	mov	r3, #5
   14d84:	mov	r2, r7
   14d88:	mov	r1, r6
   14d8c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14d90:	mov	r6, r0
   14d94:	ldr	r3, [r8, #12]
   14d98:	cmp	r3, #0
   14d9c:	beq	14ee4 <_start@@Base+0x282c>
   14da0:	b	14f14 <_start@@Base+0x285c>
   14da4:	ldrb	r3, [r6, #1]
   14da8:	cmp	r3, #32
   14dac:	addhi	r6, r6, #1
   14db0:	bls	14f00 <_start@@Base+0x2848>
   14db4:	b	14f14 <_start@@Base+0x285c>
   14db8:	mov	r4, r0
   14dbc:	cmp	fp, #0
   14dc0:	beq	14dd0 <_start@@Base+0x2718>
   14dc4:	ldr	r3, [r8, #12]
   14dc8:	cmp	r3, #0
   14dcc:	bne	14e7c <_start@@Base+0x27c4>
   14dd0:	ldr	r3, [sp, #20]
   14dd4:	cmp	r3, #0
   14dd8:	bne	14e98 <_start@@Base+0x27e0>
   14ddc:	ldrd	r2, [sp, #24]
   14de0:	cmp	r3, #0
   14de4:	cmpeq	r2, #255	; 0xff
   14de8:	uxtbls	r3, r2
   14dec:	strls	r3, [sp, #12]
   14df0:	bhi	14eb8 <_start@@Base+0x2800>
   14df4:	ldr	r3, [sp, #72]	; 0x48
   14df8:	ldrb	r3, [r3]
   14dfc:	ldr	r2, [sp, #12]
   14e00:	add	r3, r2, r3
   14e04:	ldr	r2, [sp, #72]	; 0x48
   14e08:	strb	r3, [r2]
   14e0c:	add	fp, fp, #1
   14e10:	ldr	r3, [sp, #16]
   14e14:	cmp	r3, #0
   14e18:	beq	14ed0 <_start@@Base+0x2818>
   14e1c:	mov	r6, r4
   14e20:	ldr	r5, [sp, #8]
   14e24:	str	sl, [sp, #4]
   14e28:	str	r9, [sp]
   14e2c:	ldr	r4, [r5]
   14e30:	add	r3, sp, #20
   14e34:	mov	r2, r7
   14e38:	mov	r1, r6
   14e3c:	mov	r0, r8
   14e40:	blx	r4
   14e44:	cmp	r7, r0
   14e48:	beq	14f20 <_start@@Base+0x2868>
   14e4c:	cmp	r6, r0
   14e50:	bne	14db8 <_start@@Base+0x2700>
   14e54:	ldr	r3, [r5, #4]!
   14e58:	cmp	r3, #0
   14e5c:	bne	14e24 <_start@@Base+0x276c>
   14e60:	mov	r3, #23
   14e64:	mov	r2, r7
   14e68:	mov	r1, r6
   14e6c:	mov	r0, r8
   14e70:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14e74:	mov	r7, r0
   14e78:	b	14f20 <_start@@Base+0x2868>
   14e7c:	mov	r3, #14
   14e80:	mov	r2, r7
   14e84:	mov	r1, r0
   14e88:	mov	r0, r8
   14e8c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14e90:	mov	r7, r0
   14e94:	b	14f20 <_start@@Base+0x2868>
   14e98:	mov	r3, #8
   14e9c:	mov	r2, r7
   14ea0:	mov	r1, r4
   14ea4:	mov	r0, r8
   14ea8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14eac:	cmp	r7, r0
   14eb0:	bne	14df4 <_start@@Base+0x273c>
   14eb4:	b	14f20 <_start@@Base+0x2868>
   14eb8:	mov	r3, #7
   14ebc:	mov	r2, r7
   14ec0:	mov	r1, r4
   14ec4:	mov	r0, r8
   14ec8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14ecc:	b	14eac <_start@@Base+0x27f4>
   14ed0:	mov	r7, r4
   14ed4:	b	14f20 <_start@@Base+0x2868>
   14ed8:	ldr	r3, [r0, #12]
   14edc:	cmp	r3, #0
   14ee0:	bne	14f2c <_start@@Base+0x2874>
   14ee4:	sub	r3, r7, r6
   14ee8:	cmp	r3, #1
   14eec:	ble	14f00 <_start@@Base+0x2848>
   14ef0:	ldrb	r3, [r6]
   14ef4:	cmp	r3, #32
   14ef8:	bhi	14f14 <_start@@Base+0x285c>
   14efc:	beq	14da4 <_start@@Base+0x26ec>
   14f00:	mov	r2, r7
   14f04:	mov	r1, r6
   14f08:	mov	r0, r8
   14f0c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   14f10:	mov	r6, r0
   14f14:	cmp	r7, r6
   14f18:	moveq	r7, r6
   14f1c:	bne	14d6c <_start@@Base+0x26b4>
   14f20:	mov	r0, r7
   14f24:	add	sp, sp, #36	; 0x24
   14f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f2c:	mov	r7, r1
   14f30:	b	14f20 <_start@@Base+0x2868>
   14f34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f38:	sub	sp, sp, #36	; 0x24
   14f3c:	mov	r8, r0
   14f40:	mov	r6, r1
   14f44:	mov	r7, r2
   14f48:	str	r3, [sp, #12]
   14f4c:	mov	r3, #0
   14f50:	ldr	r2, [sp, #72]	; 0x48
   14f54:	strb	r3, [r2]
   14f58:	cmp	r1, r7
   14f5c:	beq	1510c <_start@@Base+0x2a54>
   14f60:	ldrb	r3, [r1]
   14f64:	cmp	r3, #34	; 0x22
   14f68:	addeq	r6, r1, #1
   14f6c:	moveq	r3, #0
   14f70:	streq	r3, [r0, #12]
   14f74:	beq	15118 <_start@@Base+0x2a60>
   14f78:	cmp	r3, #46	; 0x2e
   14f7c:	movne	r3, #1
   14f80:	strne	r3, [r0, #12]
   14f84:	beq	14f9c <_start@@Base+0x28e4>
   14f88:	mov	fp, #0
   14f8c:	str	fp, [sp, #8]
   14f90:	add	sl, sp, #16
   14f94:	add	r9, sp, #24
   14f98:	b	15090 <_start@@Base+0x29d8>
   14f9c:	mov	r3, #5
   14fa0:	mov	r2, r7
   14fa4:	mov	r1, r6
   14fa8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   14fac:	mov	r6, r0
   14fb0:	ldr	r3, [r8, #12]
   14fb4:	cmp	r3, #0
   14fb8:	beq	15118 <_start@@Base+0x2a60>
   14fbc:	b	15148 <_start@@Base+0x2a90>
   14fc0:	ldrb	r3, [r6, #1]
   14fc4:	cmp	r3, #32
   14fc8:	addhi	r6, r6, #1
   14fcc:	bls	15134 <_start@@Base+0x2a7c>
   14fd0:	b	15148 <_start@@Base+0x2a90>
   14fd4:	mov	r4, r0
   14fd8:	cmp	fp, #0
   14fdc:	beq	14fec <_start@@Base+0x2934>
   14fe0:	ldr	r3, [r8, #12]
   14fe4:	cmp	r3, #0
   14fe8:	bne	15034 <_start@@Base+0x297c>
   14fec:	ldrd	r2, [sp, #24]
   14ff0:	ldr	r1, [sp, #20]
   14ff4:	cmp	r1, #0
   14ff8:	beq	15050 <_start@@Base+0x2998>
   14ffc:	cmp	r3, #0
   15000:	cmpeq	r2, #128	; 0x80
   15004:	rsbls	r2, r2, #0
   15008:	sxtbls	r3, r2
   1500c:	strls	r3, [sp, #8]
   15010:	bls	15064 <_start@@Base+0x29ac>
   15014:	mov	r3, #8
   15018:	mov	r2, r7
   1501c:	mov	r1, r4
   15020:	mov	r0, r8
   15024:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15028:	cmp	r7, r0
   1502c:	bne	15064 <_start@@Base+0x29ac>
   15030:	b	15154 <_start@@Base+0x2a9c>
   15034:	mov	r3, #14
   15038:	mov	r2, r7
   1503c:	mov	r1, r0
   15040:	mov	r0, r8
   15044:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15048:	mov	r7, r0
   1504c:	b	15154 <_start@@Base+0x2a9c>
   15050:	cmp	r3, #0
   15054:	cmpeq	r2, #127	; 0x7f
   15058:	sxtbls	r3, r2
   1505c:	strls	r3, [sp, #8]
   15060:	bhi	150ec <_start@@Base+0x2a34>
   15064:	ldr	r3, [sp, #72]	; 0x48
   15068:	ldrb	r3, [r3]
   1506c:	ldr	r2, [sp, #8]
   15070:	add	r3, r3, r2
   15074:	ldr	r2, [sp, #72]	; 0x48
   15078:	strb	r3, [r2]
   1507c:	add	fp, fp, #1
   15080:	ldr	r3, [sp, #16]
   15084:	cmp	r3, #0
   15088:	beq	15104 <_start@@Base+0x2a4c>
   1508c:	mov	r6, r4
   15090:	ldr	r5, [sp, #12]
   15094:	str	sl, [sp, #4]
   15098:	str	r9, [sp]
   1509c:	ldr	r4, [r5]
   150a0:	add	r3, sp, #20
   150a4:	mov	r2, r7
   150a8:	mov	r1, r6
   150ac:	mov	r0, r8
   150b0:	blx	r4
   150b4:	cmp	r7, r0
   150b8:	beq	15154 <_start@@Base+0x2a9c>
   150bc:	cmp	r6, r0
   150c0:	bne	14fd4 <_start@@Base+0x291c>
   150c4:	ldr	r3, [r5, #4]!
   150c8:	cmp	r3, #0
   150cc:	bne	15094 <_start@@Base+0x29dc>
   150d0:	mov	r3, #23
   150d4:	mov	r2, r7
   150d8:	mov	r1, r6
   150dc:	mov	r0, r8
   150e0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   150e4:	mov	r7, r0
   150e8:	b	15154 <_start@@Base+0x2a9c>
   150ec:	mov	r3, #7
   150f0:	mov	r2, r7
   150f4:	mov	r1, r4
   150f8:	mov	r0, r8
   150fc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15100:	b	15028 <_start@@Base+0x2970>
   15104:	mov	r7, r4
   15108:	b	15154 <_start@@Base+0x2a9c>
   1510c:	ldr	r3, [r0, #12]
   15110:	cmp	r3, #0
   15114:	bne	15160 <_start@@Base+0x2aa8>
   15118:	sub	r3, r7, r6
   1511c:	cmp	r3, #1
   15120:	ble	15134 <_start@@Base+0x2a7c>
   15124:	ldrb	r3, [r6]
   15128:	cmp	r3, #32
   1512c:	bhi	15148 <_start@@Base+0x2a90>
   15130:	beq	14fc0 <_start@@Base+0x2908>
   15134:	mov	r2, r7
   15138:	mov	r1, r6
   1513c:	mov	r0, r8
   15140:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   15144:	mov	r6, r0
   15148:	cmp	r7, r6
   1514c:	moveq	r7, r6
   15150:	bne	14f88 <_start@@Base+0x28d0>
   15154:	mov	r0, r7
   15158:	add	sp, sp, #36	; 0x24
   1515c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15160:	mov	r7, r1
   15164:	b	15154 <_start@@Base+0x2a9c>
   15168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1516c:	sub	sp, sp, #36	; 0x24
   15170:	mov	r8, r0
   15174:	mov	r6, r1
   15178:	mov	r7, r2
   1517c:	str	r3, [sp, #12]
   15180:	mov	r3, #0
   15184:	ldr	r2, [sp, #72]	; 0x48
   15188:	str	r3, [r2]
   1518c:	cmp	r1, r7
   15190:	beq	15340 <_start@@Base+0x2c88>
   15194:	ldrb	r3, [r1]
   15198:	cmp	r3, #34	; 0x22
   1519c:	addeq	r6, r1, #1
   151a0:	moveq	r3, #0
   151a4:	streq	r3, [r0, #12]
   151a8:	beq	1534c <_start@@Base+0x2c94>
   151ac:	cmp	r3, #46	; 0x2e
   151b0:	movne	r3, #1
   151b4:	strne	r3, [r0, #12]
   151b8:	beq	151d0 <_start@@Base+0x2b18>
   151bc:	mov	fp, #0
   151c0:	str	fp, [sp, #8]
   151c4:	add	sl, sp, #16
   151c8:	add	r9, sp, #24
   151cc:	b	152c4 <_start@@Base+0x2c0c>
   151d0:	mov	r3, #5
   151d4:	mov	r2, r7
   151d8:	mov	r1, r6
   151dc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   151e0:	mov	r6, r0
   151e4:	ldr	r3, [r8, #12]
   151e8:	cmp	r3, #0
   151ec:	beq	1534c <_start@@Base+0x2c94>
   151f0:	b	1537c <_start@@Base+0x2cc4>
   151f4:	ldrb	r3, [r6, #1]
   151f8:	cmp	r3, #32
   151fc:	addhi	r6, r6, #1
   15200:	bls	15368 <_start@@Base+0x2cb0>
   15204:	b	1537c <_start@@Base+0x2cc4>
   15208:	mov	r4, r0
   1520c:	cmp	fp, #0
   15210:	beq	15220 <_start@@Base+0x2b68>
   15214:	ldr	r3, [r8, #12]
   15218:	cmp	r3, #0
   1521c:	bne	15264 <_start@@Base+0x2bac>
   15220:	ldrd	r2, [sp, #24]
   15224:	ldr	r1, [sp, #20]
   15228:	cmp	r1, #0
   1522c:	beq	15280 <_start@@Base+0x2bc8>
   15230:	cmp	r3, #0
   15234:	cmpeq	r2, #-2147483648	; 0x80000000
   15238:	rsbls	r3, r2, #0
   1523c:	strls	r3, [sp, #8]
   15240:	bls	15298 <_start@@Base+0x2be0>
   15244:	mov	r3, #8
   15248:	mov	r2, r7
   1524c:	mov	r1, r4
   15250:	mov	r0, r8
   15254:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15258:	cmp	r7, r0
   1525c:	bne	15298 <_start@@Base+0x2be0>
   15260:	b	15388 <_start@@Base+0x2cd0>
   15264:	mov	r3, #14
   15268:	mov	r2, r7
   1526c:	mov	r1, r0
   15270:	mov	r0, r8
   15274:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15278:	mov	r7, r0
   1527c:	b	15388 <_start@@Base+0x2cd0>
   15280:	mvn	r0, #-2147483648	; 0x80000000
   15284:	mov	r1, #0
   15288:	cmp	r3, r1
   1528c:	cmpeq	r2, r0
   15290:	strls	r2, [sp, #8]
   15294:	bhi	15320 <_start@@Base+0x2c68>
   15298:	ldr	r3, [sp, #72]	; 0x48
   1529c:	ldr	r3, [r3]
   152a0:	ldr	r2, [sp, #8]
   152a4:	add	r3, r3, r2
   152a8:	ldr	r2, [sp, #72]	; 0x48
   152ac:	str	r3, [r2]
   152b0:	add	fp, fp, #1
   152b4:	ldr	r3, [sp, #16]
   152b8:	cmp	r3, #0
   152bc:	beq	15338 <_start@@Base+0x2c80>
   152c0:	mov	r6, r4
   152c4:	ldr	r5, [sp, #12]
   152c8:	str	sl, [sp, #4]
   152cc:	str	r9, [sp]
   152d0:	ldr	r4, [r5]
   152d4:	add	r3, sp, #20
   152d8:	mov	r2, r7
   152dc:	mov	r1, r6
   152e0:	mov	r0, r8
   152e4:	blx	r4
   152e8:	cmp	r7, r0
   152ec:	beq	15388 <_start@@Base+0x2cd0>
   152f0:	cmp	r6, r0
   152f4:	bne	15208 <_start@@Base+0x2b50>
   152f8:	ldr	r3, [r5, #4]!
   152fc:	cmp	r3, #0
   15300:	bne	152c8 <_start@@Base+0x2c10>
   15304:	mov	r3, #23
   15308:	mov	r2, r7
   1530c:	mov	r1, r6
   15310:	mov	r0, r8
   15314:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15318:	mov	r7, r0
   1531c:	b	15388 <_start@@Base+0x2cd0>
   15320:	mov	r3, #7
   15324:	mov	r2, r7
   15328:	mov	r1, r4
   1532c:	mov	r0, r8
   15330:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15334:	b	15258 <_start@@Base+0x2ba0>
   15338:	mov	r7, r4
   1533c:	b	15388 <_start@@Base+0x2cd0>
   15340:	ldr	r3, [r0, #12]
   15344:	cmp	r3, #0
   15348:	bne	15394 <_start@@Base+0x2cdc>
   1534c:	sub	r3, r7, r6
   15350:	cmp	r3, #1
   15354:	ble	15368 <_start@@Base+0x2cb0>
   15358:	ldrb	r3, [r6]
   1535c:	cmp	r3, #32
   15360:	bhi	1537c <_start@@Base+0x2cc4>
   15364:	beq	151f4 <_start@@Base+0x2b3c>
   15368:	mov	r2, r7
   1536c:	mov	r1, r6
   15370:	mov	r0, r8
   15374:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   15378:	mov	r6, r0
   1537c:	cmp	r7, r6
   15380:	moveq	r7, r6
   15384:	bne	151bc <_start@@Base+0x2b04>
   15388:	mov	r0, r7
   1538c:	add	sp, sp, #36	; 0x24
   15390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15394:	mov	r7, r1
   15398:	b	15388 <_start@@Base+0x2cd0>
   1539c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153a0:	sub	sp, sp, #36	; 0x24
   153a4:	mov	r8, r0
   153a8:	mov	r6, r1
   153ac:	mov	r7, r2
   153b0:	str	r3, [sp, #12]
   153b4:	mov	r3, #0
   153b8:	ldr	r2, [sp, #72]	; 0x48
   153bc:	strh	r3, [r2]
   153c0:	cmp	r1, r7
   153c4:	beq	1557c <_start@@Base+0x2ec4>
   153c8:	ldrb	r3, [r1]
   153cc:	cmp	r3, #34	; 0x22
   153d0:	addeq	r6, r1, #1
   153d4:	moveq	r3, #0
   153d8:	streq	r3, [r0, #12]
   153dc:	beq	15588 <_start@@Base+0x2ed0>
   153e0:	cmp	r3, #46	; 0x2e
   153e4:	movne	r3, #1
   153e8:	strne	r3, [r0, #12]
   153ec:	beq	15404 <_start@@Base+0x2d4c>
   153f0:	mov	fp, #0
   153f4:	str	fp, [sp, #8]
   153f8:	add	sl, sp, #16
   153fc:	add	r9, sp, #24
   15400:	b	15500 <_start@@Base+0x2e48>
   15404:	mov	r3, #5
   15408:	mov	r2, r7
   1540c:	mov	r1, r6
   15410:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15414:	mov	r6, r0
   15418:	ldr	r3, [r8, #12]
   1541c:	cmp	r3, #0
   15420:	beq	15588 <_start@@Base+0x2ed0>
   15424:	b	155b8 <_start@@Base+0x2f00>
   15428:	ldrb	r3, [r6, #1]
   1542c:	cmp	r3, #32
   15430:	addhi	r6, r6, #1
   15434:	bls	155a4 <_start@@Base+0x2eec>
   15438:	b	155b8 <_start@@Base+0x2f00>
   1543c:	mov	r4, r0
   15440:	cmp	fp, #0
   15444:	beq	15454 <_start@@Base+0x2d9c>
   15448:	ldr	r3, [r8, #12]
   1544c:	cmp	r3, #0
   15450:	bne	1549c <_start@@Base+0x2de4>
   15454:	ldrd	r2, [sp, #24]
   15458:	ldr	r1, [sp, #20]
   1545c:	cmp	r1, #0
   15460:	beq	154b8 <_start@@Base+0x2e00>
   15464:	cmp	r3, #0
   15468:	cmpeq	r2, #32768	; 0x8000
   1546c:	rsbls	r2, r2, #0
   15470:	sxthls	r3, r2
   15474:	strls	r3, [sp, #8]
   15478:	bls	154d4 <_start@@Base+0x2e1c>
   1547c:	mov	r3, #8
   15480:	mov	r2, r7
   15484:	mov	r1, r4
   15488:	mov	r0, r8
   1548c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15490:	cmp	r7, r0
   15494:	bne	154d4 <_start@@Base+0x2e1c>
   15498:	b	155c4 <_start@@Base+0x2f0c>
   1549c:	mov	r3, #14
   154a0:	mov	r2, r7
   154a4:	mov	r1, r0
   154a8:	mov	r0, r8
   154ac:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   154b0:	mov	r7, r0
   154b4:	b	155c4 <_start@@Base+0x2f0c>
   154b8:	ldr	r0, [pc, #280]	; 155d8 <_start@@Base+0x2f20>
   154bc:	mov	r1, #0
   154c0:	cmp	r3, r1
   154c4:	cmpeq	r2, r0
   154c8:	sxthls	r3, r2
   154cc:	strls	r3, [sp, #8]
   154d0:	bhi	1555c <_start@@Base+0x2ea4>
   154d4:	ldr	r3, [sp, #72]	; 0x48
   154d8:	ldrh	r3, [r3]
   154dc:	ldr	r2, [sp, #8]
   154e0:	add	r3, r3, r2
   154e4:	ldr	r2, [sp, #72]	; 0x48
   154e8:	strh	r3, [r2]
   154ec:	add	fp, fp, #1
   154f0:	ldr	r3, [sp, #16]
   154f4:	cmp	r3, #0
   154f8:	beq	15574 <_start@@Base+0x2ebc>
   154fc:	mov	r6, r4
   15500:	ldr	r5, [sp, #12]
   15504:	str	sl, [sp, #4]
   15508:	str	r9, [sp]
   1550c:	ldr	r4, [r5]
   15510:	add	r3, sp, #20
   15514:	mov	r2, r7
   15518:	mov	r1, r6
   1551c:	mov	r0, r8
   15520:	blx	r4
   15524:	cmp	r7, r0
   15528:	beq	155c4 <_start@@Base+0x2f0c>
   1552c:	cmp	r6, r0
   15530:	bne	1543c <_start@@Base+0x2d84>
   15534:	ldr	r3, [r5, #4]!
   15538:	cmp	r3, #0
   1553c:	bne	15504 <_start@@Base+0x2e4c>
   15540:	mov	r3, #23
   15544:	mov	r2, r7
   15548:	mov	r1, r6
   1554c:	mov	r0, r8
   15550:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15554:	mov	r7, r0
   15558:	b	155c4 <_start@@Base+0x2f0c>
   1555c:	mov	r3, #7
   15560:	mov	r2, r7
   15564:	mov	r1, r4
   15568:	mov	r0, r8
   1556c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15570:	b	15490 <_start@@Base+0x2dd8>
   15574:	mov	r7, r4
   15578:	b	155c4 <_start@@Base+0x2f0c>
   1557c:	ldr	r3, [r0, #12]
   15580:	cmp	r3, #0
   15584:	bne	155d0 <_start@@Base+0x2f18>
   15588:	sub	r3, r7, r6
   1558c:	cmp	r3, #1
   15590:	ble	155a4 <_start@@Base+0x2eec>
   15594:	ldrb	r3, [r6]
   15598:	cmp	r3, #32
   1559c:	bhi	155b8 <_start@@Base+0x2f00>
   155a0:	beq	15428 <_start@@Base+0x2d70>
   155a4:	mov	r2, r7
   155a8:	mov	r1, r6
   155ac:	mov	r0, r8
   155b0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   155b4:	mov	r6, r0
   155b8:	cmp	r7, r6
   155bc:	moveq	r7, r6
   155c0:	bne	153f0 <_start@@Base+0x2d38>
   155c4:	mov	r0, r7
   155c8:	add	sp, sp, #36	; 0x24
   155cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155d0:	mov	r7, r1
   155d4:	b	155c4 <_start@@Base+0x2f0c>
   155d8:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   155dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155e0:	sub	sp, sp, #36	; 0x24
   155e4:	mov	r8, r0
   155e8:	mov	r6, r1
   155ec:	mov	r7, r2
   155f0:	str	r3, [sp, #8]
   155f4:	mov	r3, #0
   155f8:	ldr	r2, [sp, #72]	; 0x48
   155fc:	strh	r3, [r2]
   15600:	cmp	r1, r7
   15604:	beq	157a4 <_start@@Base+0x30ec>
   15608:	ldrb	r3, [r1]
   1560c:	cmp	r3, #34	; 0x22
   15610:	addeq	r6, r1, #1
   15614:	moveq	r3, #0
   15618:	streq	r3, [r0, #12]
   1561c:	beq	157b0 <_start@@Base+0x30f8>
   15620:	cmp	r3, #46	; 0x2e
   15624:	movne	r3, #1
   15628:	strne	r3, [r0, #12]
   1562c:	beq	15644 <_start@@Base+0x2f8c>
   15630:	mov	fp, #0
   15634:	str	fp, [sp, #12]
   15638:	add	sl, sp, #16
   1563c:	add	r9, sp, #24
   15640:	b	156ec <_start@@Base+0x3034>
   15644:	mov	r3, #5
   15648:	mov	r2, r7
   1564c:	mov	r1, r6
   15650:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15654:	mov	r6, r0
   15658:	ldr	r3, [r8, #12]
   1565c:	cmp	r3, #0
   15660:	beq	157b0 <_start@@Base+0x30f8>
   15664:	b	157e0 <_start@@Base+0x3128>
   15668:	ldrb	r3, [r6, #1]
   1566c:	cmp	r3, #32
   15670:	addhi	r6, r6, #1
   15674:	bls	157cc <_start@@Base+0x3114>
   15678:	b	157e0 <_start@@Base+0x3128>
   1567c:	mov	r4, r0
   15680:	cmp	fp, #0
   15684:	beq	15694 <_start@@Base+0x2fdc>
   15688:	ldr	r3, [r8, #12]
   1568c:	cmp	r3, #0
   15690:	bne	15748 <_start@@Base+0x3090>
   15694:	ldr	r3, [sp, #20]
   15698:	cmp	r3, #0
   1569c:	bne	15764 <_start@@Base+0x30ac>
   156a0:	ldrd	r2, [sp, #24]
   156a4:	ldr	r0, [pc, #340]	; 15800 <_start@@Base+0x3148>
   156a8:	mov	r1, #0
   156ac:	cmp	r3, r1
   156b0:	cmpeq	r2, r0
   156b4:	uxthls	r3, r2
   156b8:	strls	r3, [sp, #12]
   156bc:	bhi	15784 <_start@@Base+0x30cc>
   156c0:	ldr	r3, [sp, #72]	; 0x48
   156c4:	ldrh	r3, [r3]
   156c8:	ldr	r2, [sp, #12]
   156cc:	add	r3, r2, r3
   156d0:	ldr	r2, [sp, #72]	; 0x48
   156d4:	strh	r3, [r2]
   156d8:	add	fp, fp, #1
   156dc:	ldr	r3, [sp, #16]
   156e0:	cmp	r3, #0
   156e4:	beq	1579c <_start@@Base+0x30e4>
   156e8:	mov	r6, r4
   156ec:	ldr	r5, [sp, #8]
   156f0:	str	sl, [sp, #4]
   156f4:	str	r9, [sp]
   156f8:	ldr	r4, [r5]
   156fc:	add	r3, sp, #20
   15700:	mov	r2, r7
   15704:	mov	r1, r6
   15708:	mov	r0, r8
   1570c:	blx	r4
   15710:	cmp	r7, r0
   15714:	beq	157ec <_start@@Base+0x3134>
   15718:	cmp	r6, r0
   1571c:	bne	1567c <_start@@Base+0x2fc4>
   15720:	ldr	r3, [r5, #4]!
   15724:	cmp	r3, #0
   15728:	bne	156f0 <_start@@Base+0x3038>
   1572c:	mov	r3, #23
   15730:	mov	r2, r7
   15734:	mov	r1, r6
   15738:	mov	r0, r8
   1573c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15740:	mov	r7, r0
   15744:	b	157ec <_start@@Base+0x3134>
   15748:	mov	r3, #14
   1574c:	mov	r2, r7
   15750:	mov	r1, r0
   15754:	mov	r0, r8
   15758:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1575c:	mov	r7, r0
   15760:	b	157ec <_start@@Base+0x3134>
   15764:	mov	r3, #8
   15768:	mov	r2, r7
   1576c:	mov	r1, r4
   15770:	mov	r0, r8
   15774:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15778:	cmp	r7, r0
   1577c:	bne	156c0 <_start@@Base+0x3008>
   15780:	b	157ec <_start@@Base+0x3134>
   15784:	mov	r3, #7
   15788:	mov	r2, r7
   1578c:	mov	r1, r4
   15790:	mov	r0, r8
   15794:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15798:	b	15778 <_start@@Base+0x30c0>
   1579c:	mov	r7, r4
   157a0:	b	157ec <_start@@Base+0x3134>
   157a4:	ldr	r3, [r0, #12]
   157a8:	cmp	r3, #0
   157ac:	bne	157f8 <_start@@Base+0x3140>
   157b0:	sub	r3, r7, r6
   157b4:	cmp	r3, #1
   157b8:	ble	157cc <_start@@Base+0x3114>
   157bc:	ldrb	r3, [r6]
   157c0:	cmp	r3, #32
   157c4:	bhi	157e0 <_start@@Base+0x3128>
   157c8:	beq	15668 <_start@@Base+0x2fb0>
   157cc:	mov	r2, r7
   157d0:	mov	r1, r6
   157d4:	mov	r0, r8
   157d8:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   157dc:	mov	r6, r0
   157e0:	cmp	r7, r6
   157e4:	moveq	r7, r6
   157e8:	bne	15630 <_start@@Base+0x2f78>
   157ec:	mov	r0, r7
   157f0:	add	sp, sp, #36	; 0x24
   157f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157f8:	mov	r7, r1
   157fc:	b	157ec <_start@@Base+0x3134>
   15800:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   15804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15808:	sub	sp, sp, #36	; 0x24
   1580c:	mov	r8, r0
   15810:	mov	r6, r1
   15814:	mov	r7, r2
   15818:	str	r3, [sp, #8]
   1581c:	mov	r3, #0
   15820:	ldr	r2, [sp, #72]	; 0x48
   15824:	str	r3, [r2]
   15828:	cmp	r1, r7
   1582c:	beq	159c8 <_start@@Base+0x3310>
   15830:	ldrb	r3, [r1]
   15834:	cmp	r3, #34	; 0x22
   15838:	addeq	r6, r1, #1
   1583c:	moveq	r3, #0
   15840:	streq	r3, [r0, #12]
   15844:	beq	159d4 <_start@@Base+0x331c>
   15848:	cmp	r3, #46	; 0x2e
   1584c:	movne	r3, #1
   15850:	strne	r3, [r0, #12]
   15854:	beq	1586c <_start@@Base+0x31b4>
   15858:	mov	fp, #0
   1585c:	str	fp, [sp, #12]
   15860:	add	sl, sp, #16
   15864:	add	r9, sp, #24
   15868:	b	15910 <_start@@Base+0x3258>
   1586c:	mov	r3, #5
   15870:	mov	r2, r7
   15874:	mov	r1, r6
   15878:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1587c:	mov	r6, r0
   15880:	ldr	r3, [r8, #12]
   15884:	cmp	r3, #0
   15888:	beq	159d4 <_start@@Base+0x331c>
   1588c:	b	15a04 <_start@@Base+0x334c>
   15890:	ldrb	r3, [r6, #1]
   15894:	cmp	r3, #32
   15898:	addhi	r6, r6, #1
   1589c:	bls	159f0 <_start@@Base+0x3338>
   158a0:	b	15a04 <_start@@Base+0x334c>
   158a4:	mov	r4, r0
   158a8:	cmp	fp, #0
   158ac:	beq	158bc <_start@@Base+0x3204>
   158b0:	ldr	r3, [r8, #12]
   158b4:	cmp	r3, #0
   158b8:	bne	1596c <_start@@Base+0x32b4>
   158bc:	ldr	r3, [sp, #20]
   158c0:	cmp	r3, #0
   158c4:	bne	15988 <_start@@Base+0x32d0>
   158c8:	ldrd	r2, [sp, #24]
   158cc:	mvn	r0, #0
   158d0:	mov	r1, #0
   158d4:	cmp	r3, r1
   158d8:	cmpeq	r2, r0
   158dc:	strls	r2, [sp, #12]
   158e0:	bhi	159a8 <_start@@Base+0x32f0>
   158e4:	ldr	r3, [sp, #72]	; 0x48
   158e8:	ldr	r3, [r3]
   158ec:	ldr	r2, [sp, #12]
   158f0:	add	r3, r3, r2
   158f4:	ldr	r2, [sp, #72]	; 0x48
   158f8:	str	r3, [r2]
   158fc:	add	fp, fp, #1
   15900:	ldr	r3, [sp, #16]
   15904:	cmp	r3, #0
   15908:	beq	159c0 <_start@@Base+0x3308>
   1590c:	mov	r6, r4
   15910:	ldr	r5, [sp, #8]
   15914:	str	sl, [sp, #4]
   15918:	str	r9, [sp]
   1591c:	ldr	r4, [r5]
   15920:	add	r3, sp, #20
   15924:	mov	r2, r7
   15928:	mov	r1, r6
   1592c:	mov	r0, r8
   15930:	blx	r4
   15934:	cmp	r7, r0
   15938:	beq	15a10 <_start@@Base+0x3358>
   1593c:	cmp	r6, r0
   15940:	bne	158a4 <_start@@Base+0x31ec>
   15944:	ldr	r3, [r5, #4]!
   15948:	cmp	r3, #0
   1594c:	bne	15914 <_start@@Base+0x325c>
   15950:	mov	r3, #23
   15954:	mov	r2, r7
   15958:	mov	r1, r6
   1595c:	mov	r0, r8
   15960:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15964:	mov	r7, r0
   15968:	b	15a10 <_start@@Base+0x3358>
   1596c:	mov	r3, #14
   15970:	mov	r2, r7
   15974:	mov	r1, r0
   15978:	mov	r0, r8
   1597c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15980:	mov	r7, r0
   15984:	b	15a10 <_start@@Base+0x3358>
   15988:	mov	r3, #8
   1598c:	mov	r2, r7
   15990:	mov	r1, r4
   15994:	mov	r0, r8
   15998:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1599c:	cmp	r7, r0
   159a0:	bne	158e4 <_start@@Base+0x322c>
   159a4:	b	15a10 <_start@@Base+0x3358>
   159a8:	mov	r3, #7
   159ac:	mov	r2, r7
   159b0:	mov	r1, r4
   159b4:	mov	r0, r8
   159b8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   159bc:	b	1599c <_start@@Base+0x32e4>
   159c0:	mov	r7, r4
   159c4:	b	15a10 <_start@@Base+0x3358>
   159c8:	ldr	r3, [r0, #12]
   159cc:	cmp	r3, #0
   159d0:	bne	15a1c <_start@@Base+0x3364>
   159d4:	sub	r3, r7, r6
   159d8:	cmp	r3, #1
   159dc:	ble	159f0 <_start@@Base+0x3338>
   159e0:	ldrb	r3, [r6]
   159e4:	cmp	r3, #32
   159e8:	bhi	15a04 <_start@@Base+0x334c>
   159ec:	beq	15890 <_start@@Base+0x31d8>
   159f0:	mov	r2, r7
   159f4:	mov	r1, r6
   159f8:	mov	r0, r8
   159fc:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   15a00:	mov	r6, r0
   15a04:	cmp	r7, r6
   15a08:	moveq	r7, r6
   15a0c:	bne	15858 <_start@@Base+0x31a0>
   15a10:	mov	r0, r7
   15a14:	add	sp, sp, #36	; 0x24
   15a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a1c:	mov	r7, r1
   15a20:	b	15a10 <_start@@Base+0x3358>
   15a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a28:	sub	sp, sp, #44	; 0x2c
   15a2c:	mov	r8, r0
   15a30:	mov	r6, r1
   15a34:	mov	r7, r2
   15a38:	str	r3, [sp, #20]
   15a3c:	mov	r2, #0
   15a40:	mov	r3, #0
   15a44:	ldr	r1, [sp, #80]	; 0x50
   15a48:	strd	r2, [r1]
   15a4c:	cmp	r6, r7
   15a50:	beq	15c14 <_start@@Base+0x355c>
   15a54:	ldrb	r3, [r6]
   15a58:	cmp	r3, #34	; 0x22
   15a5c:	addeq	r6, r6, #1
   15a60:	moveq	r3, #0
   15a64:	streq	r3, [r0, #12]
   15a68:	beq	15c24 <_start@@Base+0x356c>
   15a6c:	cmp	r3, #46	; 0x2e
   15a70:	movne	r3, #1
   15a74:	strne	r3, [r0, #12]
   15a78:	beq	15a98 <_start@@Base+0x33e0>
   15a7c:	mov	fp, #0
   15a80:	mov	r2, #0
   15a84:	mov	r3, #0
   15a88:	strd	r2, [sp, #8]
   15a8c:	add	sl, sp, #24
   15a90:	add	r9, sp, #32
   15a94:	b	15b98 <_start@@Base+0x34e0>
   15a98:	mov	r3, #5
   15a9c:	mov	r2, r7
   15aa0:	mov	r1, r6
   15aa4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15aa8:	mov	r6, r0
   15aac:	ldr	r3, [r8, #12]
   15ab0:	cmp	r3, #0
   15ab4:	beq	15c24 <_start@@Base+0x356c>
   15ab8:	b	15c54 <_start@@Base+0x359c>
   15abc:	ldrb	r3, [r6, #1]
   15ac0:	cmp	r3, #32
   15ac4:	addhi	r6, r6, #1
   15ac8:	bls	15c40 <_start@@Base+0x3588>
   15acc:	b	15c54 <_start@@Base+0x359c>
   15ad0:	mov	r4, r0
   15ad4:	cmp	fp, #0
   15ad8:	beq	15ae8 <_start@@Base+0x3430>
   15adc:	ldr	r3, [r8, #12]
   15ae0:	cmp	r3, #0
   15ae4:	bne	15b14 <_start@@Base+0x345c>
   15ae8:	ldrd	r2, [sp, #32]
   15aec:	ldr	r1, [sp, #28]
   15af0:	cmp	r1, #0
   15af4:	beq	15b50 <_start@@Base+0x3498>
   15af8:	cmp	r3, #-2147483648	; 0x80000000
   15afc:	cmpeq	r2, #0
   15b00:	bhi	15b30 <_start@@Base+0x3478>
   15b04:	rsbs	r2, r2, #0
   15b08:	rsc	r3, r3, #0
   15b0c:	strd	r2, [sp, #8]
   15b10:	b	15b60 <_start@@Base+0x34a8>
   15b14:	mov	r3, #14
   15b18:	mov	r2, r7
   15b1c:	mov	r1, r0
   15b20:	mov	r0, r8
   15b24:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15b28:	mov	r7, r0
   15b2c:	b	15c60 <_start@@Base+0x35a8>
   15b30:	mov	r3, #8
   15b34:	mov	r2, r7
   15b38:	mov	r1, r4
   15b3c:	mov	r0, r8
   15b40:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15b44:	cmp	r7, r0
   15b48:	bne	15b60 <_start@@Base+0x34a8>
   15b4c:	b	15c60 <_start@@Base+0x35a8>
   15b50:	cmp	r2, #0
   15b54:	sbcs	r1, r3, #0
   15b58:	blt	15bf4 <_start@@Base+0x353c>
   15b5c:	strd	r2, [sp, #8]
   15b60:	ldr	r3, [sp, #80]	; 0x50
   15b64:	ldrd	r2, [r3]
   15b68:	ldrd	r0, [sp, #8]
   15b6c:	adds	r0, r0, r2
   15b70:	adc	r1, r1, r3
   15b74:	mov	r2, r0
   15b78:	mov	r3, r1
   15b7c:	ldr	r1, [sp, #80]	; 0x50
   15b80:	strd	r2, [r1]
   15b84:	add	fp, fp, #1
   15b88:	ldr	r3, [sp, #24]
   15b8c:	cmp	r3, #0
   15b90:	beq	15c0c <_start@@Base+0x3554>
   15b94:	mov	r6, r4
   15b98:	ldr	r5, [sp, #20]
   15b9c:	str	sl, [sp, #4]
   15ba0:	str	r9, [sp]
   15ba4:	ldr	r4, [r5]
   15ba8:	add	r3, sp, #28
   15bac:	mov	r2, r7
   15bb0:	mov	r1, r6
   15bb4:	mov	r0, r8
   15bb8:	blx	r4
   15bbc:	cmp	r7, r0
   15bc0:	beq	15c60 <_start@@Base+0x35a8>
   15bc4:	cmp	r6, r0
   15bc8:	bne	15ad0 <_start@@Base+0x3418>
   15bcc:	ldr	r3, [r5, #4]!
   15bd0:	cmp	r3, #0
   15bd4:	bne	15b9c <_start@@Base+0x34e4>
   15bd8:	mov	r3, #23
   15bdc:	mov	r2, r7
   15be0:	mov	r1, r6
   15be4:	mov	r0, r8
   15be8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15bec:	mov	r7, r0
   15bf0:	b	15c60 <_start@@Base+0x35a8>
   15bf4:	mov	r3, #7
   15bf8:	mov	r2, r7
   15bfc:	mov	r1, r4
   15c00:	mov	r0, r8
   15c04:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15c08:	b	15b44 <_start@@Base+0x348c>
   15c0c:	mov	r7, r4
   15c10:	b	15c60 <_start@@Base+0x35a8>
   15c14:	ldr	r3, [r0, #12]
   15c18:	cmp	r3, #0
   15c1c:	movne	r7, r6
   15c20:	bne	15c60 <_start@@Base+0x35a8>
   15c24:	sub	r3, r7, r6
   15c28:	cmp	r3, #1
   15c2c:	ble	15c40 <_start@@Base+0x3588>
   15c30:	ldrb	r3, [r6]
   15c34:	cmp	r3, #32
   15c38:	bhi	15c54 <_start@@Base+0x359c>
   15c3c:	beq	15abc <_start@@Base+0x3404>
   15c40:	mov	r2, r7
   15c44:	mov	r1, r6
   15c48:	mov	r0, r8
   15c4c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   15c50:	mov	r6, r0
   15c54:	cmp	r7, r6
   15c58:	moveq	r7, r6
   15c5c:	bne	15a7c <_start@@Base+0x33c4>
   15c60:	mov	r0, r7
   15c64:	add	sp, sp, #44	; 0x2c
   15c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c6c:	push	{r4, r5, r6, lr}
   15c70:	mov	r6, r0
   15c74:	mov	r4, r2
   15c78:	mov	r5, r3
   15c7c:	cmp	r1, r2
   15c80:	beq	15c90 <_start@@Base+0x35d8>
   15c84:	ldrb	r3, [r1]
   15c88:	cmp	r3, #91	; 0x5b
   15c8c:	beq	15cac <_start@@Base+0x35f4>
   15c90:	mov	r3, #0
   15c94:	str	r3, [r5]
   15c98:	mov	r3, #22
   15c9c:	mov	r2, r4
   15ca0:	mov	r0, r6
   15ca4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15ca8:	pop	{r4, r5, r6, pc}
   15cac:	add	r0, r1, #1
   15cb0:	sub	r3, r2, r0
   15cb4:	cmp	r3, #1
   15cb8:	ble	15ccc <_start@@Base+0x3614>
   15cbc:	ldrb	r3, [r1, #1]
   15cc0:	cmp	r3, #32
   15cc4:	bhi	15cdc <_start@@Base+0x3624>
   15cc8:	beq	15cfc <_start@@Base+0x3644>
   15ccc:	mov	r2, r4
   15cd0:	mov	r1, r0
   15cd4:	mov	r0, r6
   15cd8:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   15cdc:	cmp	r4, r0
   15ce0:	beq	15cf0 <_start@@Base+0x3638>
   15ce4:	ldrb	r3, [r0]
   15ce8:	cmp	r3, #93	; 0x5d
   15cec:	beq	15d10 <_start@@Base+0x3658>
   15cf0:	mov	r3, #1
   15cf4:	str	r3, [r5]
   15cf8:	pop	{r4, r5, r6, pc}
   15cfc:	ldrb	r3, [r1, #2]
   15d00:	cmp	r3, #32
   15d04:	addhi	r0, r1, #2
   15d08:	bls	15ccc <_start@@Base+0x3614>
   15d0c:	b	15cdc <_start@@Base+0x3624>
   15d10:	mov	r3, #0
   15d14:	str	r3, [r5]
   15d18:	mov	r2, r4
   15d1c:	add	r1, r0, #1
   15d20:	mov	r0, r6
   15d24:	bl	1447c <_start@@Base+0x1dc4>
   15d28:	pop	{r4, r5, r6, pc}
   15d2c:	push	{r4, r5, r6, lr}
   15d30:	mov	r6, r0
   15d34:	mov	r4, r2
   15d38:	mov	r5, r3
   15d3c:	cmp	r1, r2
   15d40:	beq	15d50 <_start@@Base+0x3698>
   15d44:	ldrb	r3, [r1]
   15d48:	cmp	r3, #123	; 0x7b
   15d4c:	beq	15d6c <_start@@Base+0x36b4>
   15d50:	mov	r3, #0
   15d54:	str	r3, [r5]
   15d58:	mov	r3, #21
   15d5c:	mov	r2, r4
   15d60:	mov	r0, r6
   15d64:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15d68:	pop	{r4, r5, r6, pc}
   15d6c:	add	r0, r1, #1
   15d70:	sub	r3, r2, r0
   15d74:	cmp	r3, #1
   15d78:	ble	15d8c <_start@@Base+0x36d4>
   15d7c:	ldrb	r3, [r1, #1]
   15d80:	cmp	r3, #32
   15d84:	bhi	15d9c <_start@@Base+0x36e4>
   15d88:	beq	15dbc <_start@@Base+0x3704>
   15d8c:	mov	r2, r4
   15d90:	mov	r1, r0
   15d94:	mov	r0, r6
   15d98:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   15d9c:	cmp	r4, r0
   15da0:	beq	15db0 <_start@@Base+0x36f8>
   15da4:	ldrb	r3, [r0]
   15da8:	cmp	r3, #125	; 0x7d
   15dac:	beq	15dd0 <_start@@Base+0x3718>
   15db0:	mov	r3, #1
   15db4:	str	r3, [r5]
   15db8:	pop	{r4, r5, r6, pc}
   15dbc:	ldrb	r3, [r1, #2]
   15dc0:	cmp	r3, #32
   15dc4:	addhi	r0, r1, #2
   15dc8:	bls	15d8c <_start@@Base+0x36d4>
   15dcc:	b	15d9c <_start@@Base+0x36e4>
   15dd0:	mov	r3, #0
   15dd4:	str	r3, [r5]
   15dd8:	mov	r2, r4
   15ddc:	add	r1, r0, #1
   15de0:	mov	r0, r6
   15de4:	bl	1447c <_start@@Base+0x1dc4>
   15de8:	pop	{r4, r5, r6, pc}
   15dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15df0:	sub	sp, sp, #100	; 0x64
   15df4:	mov	r8, r0
   15df8:	mov	r6, r1
   15dfc:	mov	r7, r2
   15e00:	mov	r2, r3
   15e04:	str	r3, [sp, #64]	; 0x40
   15e08:	mov	r3, #0
   15e0c:	str	r3, [r2]
   15e10:	mov	r1, #4
   15e14:	ldr	r0, [r0]
   15e18:	bl	24144 <flatcc_builder_start_table@@Base>
   15e1c:	cmp	r0, #0
   15e20:	bne	167ec <_start@@Base+0x4134>
   15e24:	add	r3, sp, #92	; 0x5c
   15e28:	mov	r2, r7
   15e2c:	mov	r1, r6
   15e30:	mov	r0, r8
   15e34:	bl	15d2c <_start@@Base+0x3674>
   15e38:	mov	r6, r0
   15e3c:	mov	r9, #1
   15e40:	ldr	r3, [pc, #1144]	; 162c0 <_start@@Base+0x3c08>
   15e44:	add	r3, r3, #44	; 0x2c
   15e48:	str	r3, [sp, #68]	; 0x44
   15e4c:	b	1608c <_start@@Base+0x39d4>
   15e50:	mov	r3, #5
   15e54:	mov	r2, r7
   15e58:	mov	r1, r6
   15e5c:	mov	r0, r8
   15e60:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   15e64:	mov	r6, r0
   15e68:	b	160c4 <_start@@Base+0x3a0c>
   15e6c:	ldrb	r4, [r6, #7]
   15e70:	mov	r5, #0
   15e74:	b	15e80 <_start@@Base+0x37c8>
   15e78:	mov	r4, #0
   15e7c:	mov	r5, #0
   15e80:	ldrb	r2, [r6, #6]
   15e84:	mov	r1, #0
   15e88:	str	r1, [sp, #52]	; 0x34
   15e8c:	lsl	r3, r2, #8
   15e90:	str	r3, [sp, #48]	; 0x30
   15e94:	ldrd	r2, [sp, #48]	; 0x30
   15e98:	orr	r2, r2, r4
   15e9c:	orr	r3, r3, r5
   15ea0:	mov	r4, r2
   15ea4:	mov	r5, r3
   15ea8:	ldrb	r2, [r6, #5]
   15eac:	mov	r1, #0
   15eb0:	str	r1, [sp, #44]	; 0x2c
   15eb4:	lsl	r3, r2, #16
   15eb8:	str	r3, [sp, #40]	; 0x28
   15ebc:	ldrd	r2, [sp, #40]	; 0x28
   15ec0:	orr	r2, r2, r4
   15ec4:	orr	r3, r3, r5
   15ec8:	mov	r4, r2
   15ecc:	mov	r5, r3
   15ed0:	ldrb	r2, [r6, #4]
   15ed4:	mov	r1, #0
   15ed8:	str	r1, [sp, #36]	; 0x24
   15edc:	lsl	r3, r2, #24
   15ee0:	str	r3, [sp, #32]
   15ee4:	ldrd	r2, [sp, #32]
   15ee8:	orr	r2, r2, r4
   15eec:	orr	r3, r3, r5
   15ef0:	mov	r4, r2
   15ef4:	mov	r5, r3
   15ef8:	ldrb	r3, [r6, #3]
   15efc:	str	r3, [sp, #28]
   15f00:	mov	r3, #0
   15f04:	str	r3, [sp, #24]
   15f08:	ldrd	r2, [sp, #24]
   15f0c:	orr	r2, r2, r4
   15f10:	orr	r3, r3, r5
   15f14:	mov	r4, r2
   15f18:	mov	r5, r3
   15f1c:	ldrb	r2, [r6, #2]
   15f20:	lsl	r3, r2, #8
   15f24:	str	r3, [sp, #20]
   15f28:	mov	r3, #0
   15f2c:	str	r3, [sp, #16]
   15f30:	ldrd	r2, [sp, #16]
   15f34:	orr	r2, r2, r4
   15f38:	orr	r3, r3, r5
   15f3c:	mov	r4, r2
   15f40:	mov	r5, r3
   15f44:	ldrb	r2, [r6, #1]
   15f48:	lsl	r3, r2, #16
   15f4c:	str	r3, [sp, #12]
   15f50:	mov	r3, #0
   15f54:	str	r3, [sp, #8]
   15f58:	ldrd	r2, [sp, #8]
   15f5c:	orr	r2, r2, r4
   15f60:	orr	r3, r3, r5
   15f64:	mov	r4, r2
   15f68:	mov	r5, r3
   15f6c:	ldrb	r2, [r6]
   15f70:	lsl	fp, r2, #24
   15f74:	mov	sl, #0
   15f78:	orr	r4, r4, sl
   15f7c:	orr	r5, r5, fp
   15f80:	ldr	r2, [pc, #816]	; 162b8 <_start@@Base+0x3c00>
   15f84:	mvn	r3, #0
   15f88:	and	r2, r2, r4
   15f8c:	and	r3, r3, r5
   15f90:	add	r1, pc, #776	; 0x308
   15f94:	ldrd	r0, [r1]
   15f98:	cmp	r3, r1
   15f9c:	cmpeq	r2, r0
   15fa0:	beq	16148 <_start@@Base+0x3a90>
   15fa4:	and	r0, r4, #-16777216	; 0xff000000
   15fa8:	add	r3, pc, #760	; 0x2f8
   15fac:	ldrd	r2, [r3]
   15fb0:	cmp	r5, r3
   15fb4:	cmpeq	r0, r2
   15fb8:	beq	162c4 <_start@@Base+0x3c0c>
   15fbc:	mov	r0, #0
   15fc0:	bic	r1, r5, #255	; 0xff
   15fc4:	add	r3, pc, #740	; 0x2e4
   15fc8:	ldrd	r2, [r3]
   15fcc:	cmp	r1, r3
   15fd0:	cmpeq	r0, r2
   15fd4:	beq	16430 <_start@@Base+0x3d78>
   15fd8:	mov	r2, #0
   15fdc:	ldr	r3, [pc, #724]	; 162b8 <_start@@Base+0x3c00>
   15fe0:	and	r4, r4, r2
   15fe4:	and	r5, r5, r3
   15fe8:	mov	r2, #0
   15fec:	ldr	r3, [pc, #712]	; 162bc <_start@@Base+0x3c04>
   15ff0:	cmp	r5, r3
   15ff4:	cmpeq	r4, r2
   15ff8:	beq	16588 <_start@@Base+0x3ed0>
   15ffc:	mov	r2, r7
   16000:	mov	r1, r6
   16004:	mov	r0, r8
   16008:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1600c:	mov	r4, r0
   16010:	sub	r3, r7, r4
   16014:	cmp	r3, #1
   16018:	ble	1602c <_start@@Base+0x3974>
   1601c:	ldrb	r3, [r4]
   16020:	cmp	r3, #32
   16024:	bhi	16040 <_start@@Base+0x3988>
   16028:	beq	166dc <_start@@Base+0x4024>
   1602c:	mov	r2, r7
   16030:	mov	r1, r4
   16034:	mov	r0, r8
   16038:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1603c:	mov	r4, r0
   16040:	cmp	r7, r4
   16044:	moveq	r3, #0
   16048:	streq	r3, [sp, #92]	; 0x5c
   1604c:	moveq	r6, r4
   16050:	beq	1608c <_start@@Base+0x39d4>
   16054:	ldrb	r3, [r4]
   16058:	cmp	r3, #44	; 0x2c
   1605c:	beq	1673c <_start@@Base+0x4084>
   16060:	mov	r3, #0
   16064:	str	r3, [sp, #92]	; 0x5c
   16068:	ldrb	r3, [r4]
   1606c:	cmp	r3, #125	; 0x7d
   16070:	beq	166f0 <_start@@Base+0x4038>
   16074:	mov	r3, #10
   16078:	mov	r2, r7
   1607c:	mov	r1, r4
   16080:	mov	r0, r8
   16084:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16088:	mov	r6, r0
   1608c:	ldr	r3, [sp, #92]	; 0x5c
   16090:	cmp	r3, #0
   16094:	beq	167e0 <_start@@Base+0x4128>
   16098:	cmp	r6, r7
   1609c:	beq	16828 <_start@@Base+0x4170>
   160a0:	ldrb	r3, [r6]
   160a4:	cmp	r3, #34	; 0x22
   160a8:	addeq	r6, r6, #1
   160ac:	moveq	r3, #0
   160b0:	streq	r3, [r8, #12]
   160b4:	beq	160c4 <_start@@Base+0x3a0c>
   160b8:	cmp	r3, #46	; 0x2e
   160bc:	strne	r9, [r8, #12]
   160c0:	beq	15e50 <_start@@Base+0x3798>
   160c4:	sub	r3, r7, r6
   160c8:	cmp	r3, #8
   160cc:	movcs	r3, #8
   160d0:	sub	r3, r3, #1
   160d4:	cmp	r3, #7
   160d8:	ldrls	pc, [pc, r3, lsl #2]
   160dc:	b	16424 <_start@@Base+0x3d6c>
   160e0:	andeq	r6, r1, ip, lsr r1
   160e4:	andeq	r6, r1, r0, lsr r1
   160e8:	andeq	r6, r1, r4, lsr #2
   160ec:	andeq	r6, r1, r8, lsl r1
   160f0:	andeq	r6, r1, ip, lsl #2
   160f4:	andeq	r6, r1, r0, lsl #2
   160f8:	andeq	r5, r1, r8, ror lr
   160fc:	andeq	r5, r1, ip, ror #28
   16100:	mov	r4, #0
   16104:	mov	r5, #0
   16108:	b	15ea8 <_start@@Base+0x37f0>
   1610c:	mov	r4, #0
   16110:	mov	r5, #0
   16114:	b	15ed0 <_start@@Base+0x3818>
   16118:	mov	r4, #0
   1611c:	mov	r5, #0
   16120:	b	15ef8 <_start@@Base+0x3840>
   16124:	mov	r4, #0
   16128:	mov	r5, #0
   1612c:	b	15f1c <_start@@Base+0x3864>
   16130:	mov	r4, #0
   16134:	mov	r5, #0
   16138:	b	15f44 <_start@@Base+0x388c>
   1613c:	mov	r4, #0
   16140:	mov	r5, #0
   16144:	b	15f6c <_start@@Base+0x38b4>
   16148:	mov	r3, #6
   1614c:	mov	r2, r7
   16150:	mov	r1, r6
   16154:	mov	r0, r8
   16158:	bl	1467c <_start@@Base+0x1fc4>
   1615c:	str	r0, [sp, #60]	; 0x3c
   16160:	cmp	r0, r6
   16164:	beq	15fbc <_start@@Base+0x3904>
   16168:	strb	sl, [sp, #75]	; 0x4b
   1616c:	mov	r2, #0
   16170:	mov	r3, #0
   16174:	strd	r2, [sp, #80]	; 0x50
   16178:	str	sl, [sp, #76]	; 0x4c
   1617c:	mov	r5, r0
   16180:	cmp	r7, r0
   16184:	beq	161f8 <_start@@Base+0x3b40>
   16188:	add	r3, sp, #80	; 0x50
   1618c:	str	r3, [sp]
   16190:	add	r3, sp, #76	; 0x4c
   16194:	mov	r2, r7
   16198:	mov	r1, r0
   1619c:	mov	r0, r8
   161a0:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   161a4:	mov	r4, r0
   161a8:	cmp	r5, r0
   161ac:	beq	161f8 <_start@@Base+0x3b40>
   161b0:	ldrd	r2, [sp, #80]	; 0x50
   161b4:	ldr	r1, [sp, #76]	; 0x4c
   161b8:	cmp	r1, sl
   161bc:	beq	16230 <_start@@Base+0x3b78>
   161c0:	cmp	r3, #0
   161c4:	cmpeq	r2, #128	; 0x80
   161c8:	rsbls	r2, r2, #0
   161cc:	strbls	r2, [sp, #75]	; 0x4b
   161d0:	bls	16240 <_start@@Base+0x3b88>
   161d4:	mov	r3, #8
   161d8:	mov	r2, r7
   161dc:	mov	r1, r0
   161e0:	mov	r0, r8
   161e4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   161e8:	mov	r4, r0
   161ec:	ldr	r3, [sp, #60]	; 0x3c
   161f0:	cmp	r3, r4
   161f4:	bne	16240 <_start@@Base+0x3b88>
   161f8:	add	r3, sp, #75	; 0x4b
   161fc:	str	r3, [sp]
   16200:	ldr	r3, [pc, #184]	; 162c0 <_start@@Base+0x3c08>
   16204:	mov	r2, r7
   16208:	ldr	r5, [sp, #60]	; 0x3c
   1620c:	mov	r1, r5
   16210:	mov	r0, r8
   16214:	bl	14f34 <_start@@Base+0x287c>
   16218:	mov	r4, r0
   1621c:	cmp	r7, r0
   16220:	cmpne	r5, r0
   16224:	bne	16240 <_start@@Base+0x3b88>
   16228:	mov	r6, r4
   1622c:	b	167ec <_start@@Base+0x4134>
   16230:	cmp	r3, #0
   16234:	cmpeq	r2, #127	; 0x7f
   16238:	strbls	r2, [sp, #75]	; 0x4b
   1623c:	bhi	16274 <_start@@Base+0x3bbc>
   16240:	ldrsb	r3, [sp, #75]	; 0x4b
   16244:	cmp	r3, #2
   16248:	beq	16290 <_start@@Base+0x3bd8>
   1624c:	mov	r3, r9
   16250:	mov	r2, r9
   16254:	mov	r1, r9
   16258:	ldr	r0, [r8]
   1625c:	bl	25b40 <flatcc_builder_table_add@@Base>
   16260:	cmp	r0, #0
   16264:	beq	16228 <_start@@Base+0x3b70>
   16268:	ldrsb	r3, [sp, #75]	; 0x4b
   1626c:	strb	r3, [r0]
   16270:	b	16010 <_start@@Base+0x3958>
   16274:	mov	r3, #7
   16278:	mov	r2, r7
   1627c:	mov	r1, r0
   16280:	mov	r0, r8
   16284:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16288:	mov	r4, r0
   1628c:	b	161ec <_start@@Base+0x3b34>
   16290:	ldr	r3, [r8, #8]
   16294:	tst	r3, #2
   16298:	beq	16010 <_start@@Base+0x3958>
   1629c:	b	1624c <_start@@Base+0x3b94>
   162a0:	eorsvc	r0, r2, #0
   162a4:	cmnvs	pc, #28416	; 0x6f00
   162a8:	andvc	r0, r0, #0
   162ac:	cmnvs	pc, #28416	; 0x6f00
   162b0:	andeq	r0, r0, r0
   162b4:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   162b8:			; <UNDEFINED> instruction: 0xffff0000
   162bc:	strbvc	r0, [r3, #-0]!
   162c0:	andeq	lr, r3, r8, ror r0
   162c4:	mov	r3, #5
   162c8:	mov	r2, r7
   162cc:	mov	r1, r6
   162d0:	mov	r0, r8
   162d4:	bl	1467c <_start@@Base+0x1fc4>
   162d8:	str	r0, [sp, #60]	; 0x3c
   162dc:	cmp	r0, r6
   162e0:	beq	15fbc <_start@@Base+0x3904>
   162e4:	mov	r1, #0
   162e8:	strb	r1, [sp, #75]	; 0x4b
   162ec:	mov	r2, #0
   162f0:	mov	r3, #0
   162f4:	strd	r2, [sp, #80]	; 0x50
   162f8:	str	r1, [sp, #76]	; 0x4c
   162fc:	mov	r5, r0
   16300:	cmp	r7, r0
   16304:	beq	16378 <_start@@Base+0x3cc0>
   16308:	add	r3, sp, #80	; 0x50
   1630c:	str	r3, [sp]
   16310:	add	r3, sp, #76	; 0x4c
   16314:	mov	r2, r7
   16318:	mov	r1, r0
   1631c:	mov	r0, r8
   16320:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   16324:	mov	r4, r0
   16328:	cmp	r5, r0
   1632c:	beq	16378 <_start@@Base+0x3cc0>
   16330:	ldrd	r2, [sp, #80]	; 0x50
   16334:	ldr	r1, [sp, #76]	; 0x4c
   16338:	cmp	r1, #0
   1633c:	beq	163b4 <_start@@Base+0x3cfc>
   16340:	cmp	r3, #0
   16344:	cmpeq	r2, #128	; 0x80
   16348:	rsbls	r2, r2, #0
   1634c:	strbls	r2, [sp, #75]	; 0x4b
   16350:	bls	163c4 <_start@@Base+0x3d0c>
   16354:	mov	r3, #8
   16358:	mov	r2, r7
   1635c:	mov	r1, r0
   16360:	mov	r0, r8
   16364:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16368:	mov	r4, r0
   1636c:	ldr	r3, [sp, #60]	; 0x3c
   16370:	cmp	r3, r4
   16374:	bne	163c4 <_start@@Base+0x3d0c>
   16378:	add	r3, sp, #75	; 0x4b
   1637c:	str	r3, [sp]
   16380:	ldr	r3, [pc, #-200]	; 162c0 <_start@@Base+0x3c08>
   16384:	add	r3, r3, #16
   16388:	mov	r2, r7
   1638c:	ldr	r5, [sp, #60]	; 0x3c
   16390:	mov	r1, r5
   16394:	mov	r0, r8
   16398:	bl	14f34 <_start@@Base+0x287c>
   1639c:	mov	r4, r0
   163a0:	cmp	r7, r0
   163a4:	cmpne	r5, r0
   163a8:	bne	163c4 <_start@@Base+0x3d0c>
   163ac:	mov	r6, r4
   163b0:	b	167ec <_start@@Base+0x4134>
   163b4:	cmp	r3, #0
   163b8:	cmpeq	r2, #127	; 0x7f
   163bc:	strbls	r2, [sp, #75]	; 0x4b
   163c0:	bhi	163f8 <_start@@Base+0x3d40>
   163c4:	ldrsb	r3, [sp, #75]	; 0x4b
   163c8:	cmp	r3, #2
   163cc:	beq	16414 <_start@@Base+0x3d5c>
   163d0:	mov	r3, r9
   163d4:	mov	r2, r9
   163d8:	mov	r1, #0
   163dc:	ldr	r0, [r8]
   163e0:	bl	25b40 <flatcc_builder_table_add@@Base>
   163e4:	cmp	r0, #0
   163e8:	beq	163ac <_start@@Base+0x3cf4>
   163ec:	ldrsb	r3, [sp, #75]	; 0x4b
   163f0:	strb	r3, [r0]
   163f4:	b	16010 <_start@@Base+0x3958>
   163f8:	mov	r3, #7
   163fc:	mov	r2, r7
   16400:	mov	r1, r0
   16404:	mov	r0, r8
   16408:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1640c:	mov	r4, r0
   16410:	b	1636c <_start@@Base+0x3cb4>
   16414:	ldr	r3, [r8, #8]
   16418:	tst	r3, #2
   1641c:	beq	16010 <_start@@Base+0x3958>
   16420:	b	163d0 <_start@@Base+0x3d18>
   16424:	mov	r4, #0
   16428:	mov	r5, #0
   1642c:	b	15fbc <_start@@Base+0x3904>
   16430:	mov	r3, #3
   16434:	mov	r2, r7
   16438:	mov	r1, r6
   1643c:	mov	r0, r8
   16440:	bl	1467c <_start@@Base+0x1fc4>
   16444:	mov	r5, r0
   16448:	cmp	r0, r6
   1644c:	beq	16570 <_start@@Base+0x3eb8>
   16450:	mov	r1, #0
   16454:	strb	r1, [sp, #75]	; 0x4b
   16458:	mov	r2, #0
   1645c:	mov	r3, #0
   16460:	strd	r2, [sp, #80]	; 0x50
   16464:	str	r1, [sp, #76]	; 0x4c
   16468:	cmp	r7, r0
   1646c:	beq	1650c <_start@@Base+0x3e54>
   16470:	add	r3, sp, #80	; 0x50
   16474:	str	r3, [sp]
   16478:	add	r3, sp, #76	; 0x4c
   1647c:	mov	r2, r7
   16480:	mov	r1, r0
   16484:	mov	r0, r8
   16488:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   1648c:	mov	r4, r0
   16490:	cmp	r5, r0
   16494:	beq	1650c <_start@@Base+0x3e54>
   16498:	ldr	r3, [sp, #76]	; 0x4c
   1649c:	cmp	r3, #0
   164a0:	bne	164ec <_start@@Base+0x3e34>
   164a4:	ldrd	r2, [sp, #80]	; 0x50
   164a8:	cmp	r3, #0
   164ac:	cmpeq	r2, #255	; 0xff
   164b0:	strbls	r2, [sp, #75]	; 0x4b
   164b4:	bhi	16544 <_start@@Base+0x3e8c>
   164b8:	ldrb	r3, [sp, #75]	; 0x4b
   164bc:	cmp	r3, #2
   164c0:	beq	16560 <_start@@Base+0x3ea8>
   164c4:	mov	r3, r9
   164c8:	mov	r2, r9
   164cc:	mov	r1, #3
   164d0:	ldr	r0, [r8]
   164d4:	bl	25b40 <flatcc_builder_table_add@@Base>
   164d8:	cmp	r0, #0
   164dc:	beq	1653c <_start@@Base+0x3e84>
   164e0:	ldrb	r3, [sp, #75]	; 0x4b
   164e4:	strb	r3, [r0]
   164e8:	b	16010 <_start@@Base+0x3958>
   164ec:	mov	r3, #8
   164f0:	mov	r2, r7
   164f4:	mov	r1, r0
   164f8:	mov	r0, r8
   164fc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16500:	mov	r4, r0
   16504:	cmp	r5, r4
   16508:	bne	164b8 <_start@@Base+0x3e00>
   1650c:	add	r3, sp, #75	; 0x4b
   16510:	str	r3, [sp]
   16514:	ldr	r3, [pc, #-604]	; 162c0 <_start@@Base+0x3c08>
   16518:	add	r3, r3, #32
   1651c:	mov	r2, r7
   16520:	mov	r1, r5
   16524:	mov	r0, r8
   16528:	bl	14d18 <_start@@Base+0x2660>
   1652c:	mov	r4, r0
   16530:	cmp	r7, r0
   16534:	cmpne	r5, r0
   16538:	bne	164b8 <_start@@Base+0x3e00>
   1653c:	mov	r6, r4
   16540:	b	167ec <_start@@Base+0x4134>
   16544:	mov	r3, #7
   16548:	mov	r2, r7
   1654c:	mov	r1, r0
   16550:	mov	r0, r8
   16554:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16558:	mov	r4, r0
   1655c:	b	16504 <_start@@Base+0x3e4c>
   16560:	ldr	r3, [r8, #8]
   16564:	tst	r3, #2
   16568:	beq	16010 <_start@@Base+0x3958>
   1656c:	b	164c4 <_start@@Base+0x3e0c>
   16570:	mov	r2, r7
   16574:	mov	r1, r0
   16578:	mov	r0, r8
   1657c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   16580:	mov	r4, r0
   16584:	b	16010 <_start@@Base+0x3958>
   16588:	mov	r3, #2
   1658c:	mov	r2, r7
   16590:	mov	r1, r6
   16594:	mov	r0, r8
   16598:	bl	1467c <_start@@Base+0x1fc4>
   1659c:	mov	r5, r0
   165a0:	cmp	r0, r6
   165a4:	beq	166c4 <_start@@Base+0x400c>
   165a8:	mov	r1, #0
   165ac:	strb	r1, [sp, #75]	; 0x4b
   165b0:	mov	r2, #0
   165b4:	mov	r3, #0
   165b8:	strd	r2, [sp, #80]	; 0x50
   165bc:	str	r1, [sp, #76]	; 0x4c
   165c0:	cmp	r7, r0
   165c4:	beq	16664 <_start@@Base+0x3fac>
   165c8:	add	r3, sp, #80	; 0x50
   165cc:	str	r3, [sp]
   165d0:	add	r3, sp, #76	; 0x4c
   165d4:	mov	r2, r7
   165d8:	mov	r1, r0
   165dc:	mov	r0, r8
   165e0:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   165e4:	mov	r4, r0
   165e8:	cmp	r5, r0
   165ec:	beq	16664 <_start@@Base+0x3fac>
   165f0:	ldr	r3, [sp, #76]	; 0x4c
   165f4:	cmp	r3, #0
   165f8:	bne	16644 <_start@@Base+0x3f8c>
   165fc:	ldrd	r2, [sp, #80]	; 0x50
   16600:	cmp	r3, #0
   16604:	cmpeq	r2, #255	; 0xff
   16608:	strbls	r2, [sp, #75]	; 0x4b
   1660c:	bhi	16698 <_start@@Base+0x3fe0>
   16610:	ldrb	r3, [sp, #75]	; 0x4b
   16614:	cmp	r3, #2
   16618:	beq	166b4 <_start@@Base+0x3ffc>
   1661c:	mov	r3, r9
   16620:	mov	r2, r9
   16624:	mov	r1, #2
   16628:	ldr	r0, [r8]
   1662c:	bl	25b40 <flatcc_builder_table_add@@Base>
   16630:	cmp	r0, #0
   16634:	beq	16690 <_start@@Base+0x3fd8>
   16638:	ldrb	r3, [sp, #75]	; 0x4b
   1663c:	strb	r3, [r0]
   16640:	b	16010 <_start@@Base+0x3958>
   16644:	mov	r3, #8
   16648:	mov	r2, r7
   1664c:	mov	r1, r0
   16650:	mov	r0, r8
   16654:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16658:	mov	r4, r0
   1665c:	cmp	r5, r4
   16660:	bne	16610 <_start@@Base+0x3f58>
   16664:	add	r3, sp, #75	; 0x4b
   16668:	str	r3, [sp]
   1666c:	ldr	r3, [sp, #68]	; 0x44
   16670:	mov	r2, r7
   16674:	mov	r1, r5
   16678:	mov	r0, r8
   1667c:	bl	14d18 <_start@@Base+0x2660>
   16680:	mov	r4, r0
   16684:	cmp	r7, r0
   16688:	cmpne	r5, r0
   1668c:	bne	16610 <_start@@Base+0x3f58>
   16690:	mov	r6, r4
   16694:	b	167ec <_start@@Base+0x4134>
   16698:	mov	r3, #7
   1669c:	mov	r2, r7
   166a0:	mov	r1, r0
   166a4:	mov	r0, r8
   166a8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   166ac:	mov	r4, r0
   166b0:	b	1665c <_start@@Base+0x3fa4>
   166b4:	ldr	r3, [r8, #8]
   166b8:	tst	r3, #2
   166bc:	beq	16010 <_start@@Base+0x3958>
   166c0:	b	1661c <_start@@Base+0x3f64>
   166c4:	mov	r2, r7
   166c8:	mov	r1, r0
   166cc:	mov	r0, r8
   166d0:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   166d4:	mov	r4, r0
   166d8:	b	16010 <_start@@Base+0x3958>
   166dc:	ldrb	r3, [r4, #1]
   166e0:	cmp	r3, #32
   166e4:	addhi	r4, r4, #1
   166e8:	bls	1602c <_start@@Base+0x3974>
   166ec:	b	16040 <_start@@Base+0x3988>
   166f0:	add	r6, r4, #1
   166f4:	sub	r3, r7, r6
   166f8:	cmp	r3, #1
   166fc:	ble	16710 <_start@@Base+0x4058>
   16700:	ldrb	r3, [r4, #1]
   16704:	cmp	r3, #32
   16708:	bhi	1608c <_start@@Base+0x39d4>
   1670c:	beq	16728 <_start@@Base+0x4070>
   16710:	mov	r2, r7
   16714:	mov	r1, r6
   16718:	mov	r0, r8
   1671c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   16720:	mov	r6, r0
   16724:	b	1608c <_start@@Base+0x39d4>
   16728:	ldrb	r3, [r4, #2]
   1672c:	cmp	r3, #32
   16730:	addhi	r6, r4, #2
   16734:	bls	16710 <_start@@Base+0x4058>
   16738:	b	1608c <_start@@Base+0x39d4>
   1673c:	add	r6, r4, #1
   16740:	sub	r3, r7, r6
   16744:	cmp	r3, #1
   16748:	ble	1675c <_start@@Base+0x40a4>
   1674c:	ldrb	r3, [r4, #1]
   16750:	cmp	r3, #32
   16754:	bhi	16770 <_start@@Base+0x40b8>
   16758:	beq	167a8 <_start@@Base+0x40f0>
   1675c:	mov	r2, r7
   16760:	mov	r1, r6
   16764:	mov	r0, r8
   16768:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1676c:	mov	r6, r0
   16770:	cmp	r7, r6
   16774:	beq	167bc <_start@@Base+0x4104>
   16778:	ldrb	r3, [r6]
   1677c:	cmp	r3, #125	; 0x7d
   16780:	strne	r9, [sp, #92]	; 0x5c
   16784:	bne	1608c <_start@@Base+0x39d4>
   16788:	mov	r3, #0
   1678c:	str	r3, [sp, #92]	; 0x5c
   16790:	mov	r2, r7
   16794:	add	r1, r6, #1
   16798:	mov	r0, r8
   1679c:	bl	1447c <_start@@Base+0x1dc4>
   167a0:	mov	r6, r0
   167a4:	b	1608c <_start@@Base+0x39d4>
   167a8:	ldrb	r3, [r4, #2]
   167ac:	cmp	r3, #32
   167b0:	addhi	r6, r4, #2
   167b4:	bls	1675c <_start@@Base+0x40a4>
   167b8:	b	16770 <_start@@Base+0x40b8>
   167bc:	mov	r3, #0
   167c0:	str	r3, [sp, #92]	; 0x5c
   167c4:	mov	r3, #10
   167c8:	mov	r2, r7
   167cc:	mov	r1, r6
   167d0:	mov	r0, r8
   167d4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   167d8:	mov	r6, r0
   167dc:	b	1608c <_start@@Base+0x39d4>
   167e0:	ldr	r3, [r8, #24]
   167e4:	cmp	r3, #0
   167e8:	beq	16808 <_start@@Base+0x4150>
   167ec:	mov	r3, #33	; 0x21
   167f0:	mov	r2, r7
   167f4:	mov	r1, r6
   167f8:	mov	r0, r8
   167fc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16800:	add	sp, sp, #100	; 0x64
   16804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16808:	ldr	r0, [r8]
   1680c:	bl	24b94 <flatcc_builder_end_table@@Base>
   16810:	ldr	r3, [sp, #64]	; 0x40
   16814:	str	r0, [r3]
   16818:	cmp	r0, #0
   1681c:	movne	r0, r6
   16820:	beq	167ec <_start@@Base+0x4134>
   16824:	b	16800 <_start@@Base+0x4148>
   16828:	mov	r6, r7
   1682c:	b	160c4 <_start@@Base+0x3a0c>
   16830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16834:	sub	sp, sp, #100	; 0x64
   16838:	mov	r6, r0
   1683c:	mov	r5, r2
   16840:	str	r3, [sp, #60]	; 0x3c
   16844:	add	r3, sp, #92	; 0x5c
   16848:	bl	15d2c <_start@@Base+0x3674>
   1684c:	mov	r4, r0
   16850:	mov	r7, #0
   16854:	ldr	r3, [pc, #1696]	; 16efc <_start@@Base+0x4844>
   16858:	add	r3, r3, #68	; 0x44
   1685c:	str	r3, [sp, #68]	; 0x44
   16860:	strd	sl, [sp, #8]
   16864:	b	16a00 <_start@@Base+0x4348>
   16868:	mov	r3, #5
   1686c:	mov	r2, r5
   16870:	mov	r1, r4
   16874:	mov	r0, r6
   16878:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1687c:	mov	r4, r0
   16880:	b	16a38 <_start@@Base+0x4380>
   16884:	mov	r3, #0
   16888:	b	16890 <_start@@Base+0x41d8>
   1688c:	mov	r3, #0
   16890:	ldrb	r0, [r4, #6]
   16894:	mov	lr, #0
   16898:	str	lr, [sp, #52]	; 0x34
   1689c:	lsl	r1, r0, #8
   168a0:	str	r1, [sp, #48]	; 0x30
   168a4:	ldrd	r0, [sp, #48]	; 0x30
   168a8:	orr	r1, r1, r3
   168ac:	mov	r3, r1
   168b0:	ldrb	r0, [r4, #5]
   168b4:	mov	lr, #0
   168b8:	str	lr, [sp, #44]	; 0x2c
   168bc:	lsl	r1, r0, #16
   168c0:	str	r1, [sp, #40]	; 0x28
   168c4:	ldrd	r0, [sp, #40]	; 0x28
   168c8:	orr	r1, r1, r3
   168cc:	mov	r3, r1
   168d0:	ldrb	r0, [r4, #4]
   168d4:	mov	lr, #0
   168d8:	str	lr, [sp, #36]	; 0x24
   168dc:	lsl	r1, r0, #24
   168e0:	str	r1, [sp, #32]
   168e4:	ldrd	r0, [sp, #32]
   168e8:	orr	r1, r1, r3
   168ec:	mov	r3, r1
   168f0:	ldrb	r1, [r4, #3]
   168f4:	str	r1, [sp, #28]
   168f8:	mov	r1, #0
   168fc:	str	r1, [sp, #24]
   16900:	ldrd	r0, [sp, #24]
   16904:	orr	r1, r1, r3
   16908:	mov	r3, r1
   1690c:	ldrb	r0, [r4, #2]
   16910:	lsl	r1, r0, #8
   16914:	str	r1, [sp, #20]
   16918:	mov	r1, #0
   1691c:	str	r1, [sp, #16]
   16920:	ldrd	r0, [sp, #16]
   16924:	orr	r1, r1, r3
   16928:	mov	r3, r1
   1692c:	ldrb	r0, [r4, #1]
   16930:	lsl	r1, r0, #16
   16934:	str	r1, [sp, #12]
   16938:	mov	r1, #0
   1693c:	str	r1, [sp, #8]
   16940:	ldrd	r0, [sp, #8]
   16944:	orr	r1, r1, r3
   16948:	mov	r3, r1
   1694c:	ldrb	r0, [r4]
   16950:	mov	r1, #0
   16954:	lsl	r9, r0, #24
   16958:	mov	r8, #0
   1695c:	orr	r3, r3, r9
   16960:	mov	r2, #0
   16964:	and	r3, r3, #-16777216	; 0xff000000
   16968:	cmp	r3, #1644167168	; 0x62000000
   1696c:	cmpeq	r2, #0
   16970:	beq	16aa8 <_start@@Base+0x43f0>
   16974:	cmp	r3, #1627389952	; 0x61000000
   16978:	cmpeq	r2, #0
   1697c:	beq	16bcc <_start@@Base+0x4514>
   16980:	mov	r2, r5
   16984:	mov	r1, r4
   16988:	mov	r0, r6
   1698c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   16990:	sub	r3, r5, r0
   16994:	cmp	r3, #1
   16998:	ble	169ac <_start@@Base+0x42f4>
   1699c:	ldrb	r3, [r0]
   169a0:	cmp	r3, #32
   169a4:	bhi	169bc <_start@@Base+0x4304>
   169a8:	beq	16dc0 <_start@@Base+0x4708>
   169ac:	mov	r2, r5
   169b0:	mov	r1, r0
   169b4:	mov	r0, r6
   169b8:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   169bc:	cmp	r5, r0
   169c0:	streq	r7, [sp, #92]	; 0x5c
   169c4:	moveq	r4, r0
   169c8:	beq	16a00 <_start@@Base+0x4348>
   169cc:	ldrb	r3, [r0]
   169d0:	cmp	r3, #44	; 0x2c
   169d4:	beq	16e20 <_start@@Base+0x4768>
   169d8:	str	r7, [sp, #92]	; 0x5c
   169dc:	ldrb	r3, [r0]
   169e0:	cmp	r3, #125	; 0x7d
   169e4:	beq	16dd4 <_start@@Base+0x471c>
   169e8:	mov	r3, #10
   169ec:	mov	r2, r5
   169f0:	mov	r1, r0
   169f4:	mov	r0, r6
   169f8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   169fc:	mov	r4, r0
   16a00:	ldr	r3, [sp, #92]	; 0x5c
   16a04:	cmp	r3, #0
   16a08:	beq	16d20 <_start@@Base+0x4668>
   16a0c:	cmp	r4, r5
   16a10:	beq	16ef4 <_start@@Base+0x483c>
   16a14:	ldrb	r3, [r4]
   16a18:	cmp	r3, #34	; 0x22
   16a1c:	addeq	r4, r4, #1
   16a20:	streq	r7, [r6, #12]
   16a24:	beq	16a38 <_start@@Base+0x4380>
   16a28:	cmp	r3, #46	; 0x2e
   16a2c:	movne	r3, #1
   16a30:	strne	r3, [r6, #12]
   16a34:	beq	16868 <_start@@Base+0x41b0>
   16a38:	sub	ip, r5, r4
   16a3c:	cmp	ip, #8
   16a40:	movcc	r3, ip
   16a44:	movcs	r3, #8
   16a48:	sub	r3, r3, #1
   16a4c:	cmp	r3, #7
   16a50:	ldrls	pc, [pc, r3, lsl #2]
   16a54:	b	16980 <_start@@Base+0x42c8>
   16a58:	andeq	r6, r1, r0, lsr #21
   16a5c:	muleq	r1, r8, sl
   16a60:	muleq	r1, r0, sl
   16a64:	andeq	r6, r1, r8, lsl #21
   16a68:	andeq	r6, r1, r0, lsl #21
   16a6c:	andeq	r6, r1, r8, ror sl
   16a70:	andeq	r6, r1, ip, lsl #17
   16a74:	andeq	r6, r1, r4, lsl #17
   16a78:	mov	r3, #0
   16a7c:	b	168b0 <_start@@Base+0x41f8>
   16a80:	mov	r3, #0
   16a84:	b	168d0 <_start@@Base+0x4218>
   16a88:	mov	r3, #0
   16a8c:	b	168f0 <_start@@Base+0x4238>
   16a90:	mov	r3, #0
   16a94:	b	1690c <_start@@Base+0x4254>
   16a98:	mov	r3, #0
   16a9c:	b	1692c <_start@@Base+0x4274>
   16aa0:	mov	r3, #0
   16aa4:	b	1694c <_start@@Base+0x4294>
   16aa8:	mov	r3, #1
   16aac:	mov	r2, r5
   16ab0:	mov	r1, r4
   16ab4:	mov	r0, r6
   16ab8:	bl	1467c <_start@@Base+0x1fc4>
   16abc:	mov	r1, r0
   16ac0:	mov	sl, r0
   16ac4:	cmp	r0, r4
   16ac8:	beq	16bb8 <_start@@Base+0x4500>
   16acc:	strb	r7, [sp, #74]	; 0x4a
   16ad0:	mov	r2, #0
   16ad4:	mov	r3, #0
   16ad8:	strd	r2, [sp, #80]	; 0x50
   16adc:	str	r7, [sp, #76]	; 0x4c
   16ae0:	mov	r4, r0
   16ae4:	cmp	r5, r0
   16ae8:	beq	16b4c <_start@@Base+0x4494>
   16aec:	add	r3, sp, #80	; 0x50
   16af0:	str	r3, [sp]
   16af4:	add	r3, sp, #76	; 0x4c
   16af8:	mov	r2, r5
   16afc:	mov	r0, r6
   16b00:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   16b04:	cmp	sl, r0
   16b08:	beq	16b4c <_start@@Base+0x4494>
   16b0c:	ldrd	r2, [sp, #80]	; 0x50
   16b10:	ldr	r1, [sp, #76]	; 0x4c
   16b14:	cmp	r1, r8
   16b18:	beq	16b80 <_start@@Base+0x44c8>
   16b1c:	cmp	r3, #0
   16b20:	cmpeq	r2, #128	; 0x80
   16b24:	rsbls	r2, r2, #0
   16b28:	strbls	r2, [sp, #74]	; 0x4a
   16b2c:	bls	16b90 <_start@@Base+0x44d8>
   16b30:	mov	r3, #8
   16b34:	mov	r2, r5
   16b38:	mov	r1, r0
   16b3c:	mov	r0, r6
   16b40:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16b44:	cmp	sl, r0
   16b48:	bne	16b90 <_start@@Base+0x44d8>
   16b4c:	add	r3, sp, #74	; 0x4a
   16b50:	str	r3, [sp]
   16b54:	ldr	r3, [pc, #928]	; 16efc <_start@@Base+0x4844>
   16b58:	add	r3, r3, #56	; 0x38
   16b5c:	mov	r2, r5
   16b60:	mov	r4, sl
   16b64:	mov	r1, sl
   16b68:	mov	r0, r6
   16b6c:	bl	14f34 <_start@@Base+0x287c>
   16b70:	cmp	r5, r0
   16b74:	cmpne	sl, r0
   16b78:	bne	16b90 <_start@@Base+0x44d8>
   16b7c:	b	16d08 <_start@@Base+0x4650>
   16b80:	cmp	r3, #0
   16b84:	cmpeq	r2, #127	; 0x7f
   16b88:	strbls	r2, [sp, #74]	; 0x4a
   16b8c:	bhi	16ba0 <_start@@Base+0x44e8>
   16b90:	ldrb	r3, [sp, #74]	; 0x4a
   16b94:	ldr	r2, [sp, #60]	; 0x3c
   16b98:	strb	r3, [r2, #2]
   16b9c:	b	16990 <_start@@Base+0x42d8>
   16ba0:	mov	r3, #7
   16ba4:	mov	r2, r5
   16ba8:	mov	r1, r0
   16bac:	mov	r0, r6
   16bb0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16bb4:	b	16b44 <_start@@Base+0x448c>
   16bb8:	mov	r2, r5
   16bbc:	mov	r1, r0
   16bc0:	mov	r0, r6
   16bc4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   16bc8:	b	16990 <_start@@Base+0x42d8>
   16bcc:	cmp	ip, #1
   16bd0:	ble	16d38 <_start@@Base+0x4680>
   16bd4:	ldr	r3, [r6, #12]
   16bd8:	cmp	r3, #0
   16bdc:	beq	16d2c <_start@@Base+0x4674>
   16be0:	ldrb	r3, [r4, #1]
   16be4:	cmp	r3, #58	; 0x3a
   16be8:	cmpne	r3, #32
   16bec:	addls	r1, r4, #1
   16bf0:	strls	r7, [r6, #12]
   16bf4:	bhi	16d38 <_start@@Base+0x4680>
   16bf8:	sub	r3, r5, r1
   16bfc:	cmp	r3, #1
   16c00:	ble	16c14 <_start@@Base+0x455c>
   16c04:	ldrb	r3, [r1]
   16c08:	cmp	r3, #32
   16c0c:	bhi	16c24 <_start@@Base+0x456c>
   16c10:	beq	16d54 <_start@@Base+0x469c>
   16c14:	mov	r2, r5
   16c18:	mov	r0, r6
   16c1c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   16c20:	mov	r1, r0
   16c24:	cmp	r5, r1
   16c28:	beq	16c38 <_start@@Base+0x4580>
   16c2c:	ldrb	r3, [r1]
   16c30:	cmp	r3, #58	; 0x3a
   16c34:	beq	16d68 <_start@@Base+0x46b0>
   16c38:	mov	r3, #4
   16c3c:	mov	r2, r5
   16c40:	mov	r0, r6
   16c44:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16c48:	str	r0, [sp, #64]	; 0x40
   16c4c:	ldr	r1, [sp, #64]	; 0x40
   16c50:	cmp	r1, r4
   16c54:	beq	16d38 <_start@@Base+0x4680>
   16c58:	strh	r7, [sp, #74]	; 0x4a
   16c5c:	mov	r2, #0
   16c60:	mov	r3, #0
   16c64:	strd	r2, [sp, #80]	; 0x50
   16c68:	str	r7, [sp, #76]	; 0x4c
   16c6c:	mov	r4, r1
   16c70:	cmp	r5, r1
   16c74:	beq	16cdc <_start@@Base+0x4624>
   16c78:	add	r3, sp, #80	; 0x50
   16c7c:	str	r3, [sp]
   16c80:	add	r3, sp, #76	; 0x4c
   16c84:	mov	r2, r5
   16c88:	mov	r0, r6
   16c8c:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   16c90:	cmp	r4, r0
   16c94:	beq	16cdc <_start@@Base+0x4624>
   16c98:	ldrd	r2, [sp, #80]	; 0x50
   16c9c:	ldr	r1, [sp, #76]	; 0x4c
   16ca0:	cmp	r1, #0
   16ca4:	beq	16d80 <_start@@Base+0x46c8>
   16ca8:	cmp	r3, #0
   16cac:	cmpeq	r2, #32768	; 0x8000
   16cb0:	rsbls	r2, r2, #0
   16cb4:	strhls	r2, [sp, #74]	; 0x4a
   16cb8:	bls	16d98 <_start@@Base+0x46e0>
   16cbc:	mov	r3, #8
   16cc0:	mov	r2, r5
   16cc4:	mov	r1, r0
   16cc8:	mov	r0, r6
   16ccc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16cd0:	ldr	r3, [sp, #64]	; 0x40
   16cd4:	cmp	r3, r0
   16cd8:	bne	16d98 <_start@@Base+0x46e0>
   16cdc:	add	r3, sp, #74	; 0x4a
   16ce0:	str	r3, [sp]
   16ce4:	ldr	r3, [sp, #68]	; 0x44
   16ce8:	mov	r2, r5
   16cec:	ldr	r4, [sp, #64]	; 0x40
   16cf0:	mov	r1, r4
   16cf4:	mov	r0, r6
   16cf8:	bl	1539c <_start@@Base+0x2ce4>
   16cfc:	cmp	r5, r0
   16d00:	cmpne	r0, r4
   16d04:	bne	16d98 <_start@@Base+0x46e0>
   16d08:	mov	r3, #33	; 0x21
   16d0c:	mov	r2, r5
   16d10:	mov	r1, r0
   16d14:	mov	r0, r6
   16d18:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16d1c:	mov	r4, r0
   16d20:	mov	r0, r4
   16d24:	add	sp, sp, #100	; 0x64
   16d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d2c:	ldrb	r3, [r4, #1]
   16d30:	cmp	r3, #34	; 0x22
   16d34:	beq	16d4c <_start@@Base+0x4694>
   16d38:	mov	r2, r5
   16d3c:	mov	r1, r4
   16d40:	mov	r0, r6
   16d44:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   16d48:	b	16990 <_start@@Base+0x42d8>
   16d4c:	add	r1, r4, #2
   16d50:	b	16bf8 <_start@@Base+0x4540>
   16d54:	ldrb	r3, [r1, #1]
   16d58:	cmp	r3, #32
   16d5c:	addhi	r1, r1, #1
   16d60:	bls	16c14 <_start@@Base+0x455c>
   16d64:	b	16c24 <_start@@Base+0x456c>
   16d68:	mov	r2, r5
   16d6c:	add	r1, r1, #1
   16d70:	mov	r0, r6
   16d74:	bl	1447c <_start@@Base+0x1dc4>
   16d78:	str	r0, [sp, #64]	; 0x40
   16d7c:	b	16c4c <_start@@Base+0x4594>
   16d80:	ldr	sl, [pc, #376]	; 16f00 <_start@@Base+0x4848>
   16d84:	mov	fp, #0
   16d88:	cmp	r3, fp
   16d8c:	cmpeq	r2, sl
   16d90:	strhls	r2, [sp, #74]	; 0x4a
   16d94:	bhi	16da8 <_start@@Base+0x46f0>
   16d98:	ldrh	r3, [sp, #74]	; 0x4a
   16d9c:	ldr	r2, [sp, #60]	; 0x3c
   16da0:	strh	r3, [r2]
   16da4:	b	16990 <_start@@Base+0x42d8>
   16da8:	mov	r3, #7
   16dac:	mov	r2, r5
   16db0:	mov	r1, r0
   16db4:	mov	r0, r6
   16db8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16dbc:	b	16cd0 <_start@@Base+0x4618>
   16dc0:	ldrb	r3, [r0, #1]
   16dc4:	cmp	r3, #32
   16dc8:	addhi	r0, r0, #1
   16dcc:	bls	169ac <_start@@Base+0x42f4>
   16dd0:	b	169bc <_start@@Base+0x4304>
   16dd4:	add	r4, r0, #1
   16dd8:	sub	r3, r5, r4
   16ddc:	cmp	r3, #1
   16de0:	ble	16df4 <_start@@Base+0x473c>
   16de4:	ldrb	r3, [r0, #1]
   16de8:	cmp	r3, #32
   16dec:	bhi	16a00 <_start@@Base+0x4348>
   16df0:	beq	16e0c <_start@@Base+0x4754>
   16df4:	mov	r2, r5
   16df8:	mov	r1, r4
   16dfc:	mov	r0, r6
   16e00:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   16e04:	mov	r4, r0
   16e08:	b	16a00 <_start@@Base+0x4348>
   16e0c:	ldrb	r3, [r0, #2]
   16e10:	cmp	r3, #32
   16e14:	addhi	r4, r0, #2
   16e18:	bls	16df4 <_start@@Base+0x473c>
   16e1c:	b	16a00 <_start@@Base+0x4348>
   16e20:	add	r4, r0, #1
   16e24:	sub	r3, r5, r4
   16e28:	cmp	r3, #1
   16e2c:	ble	16e40 <_start@@Base+0x4788>
   16e30:	ldrb	r3, [r0, #1]
   16e34:	cmp	r3, #32
   16e38:	bhi	16e54 <_start@@Base+0x479c>
   16e3c:	beq	16eac <_start@@Base+0x47f4>
   16e40:	mov	r2, r5
   16e44:	mov	r1, r4
   16e48:	mov	r0, r6
   16e4c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   16e50:	mov	r4, r0
   16e54:	cmp	r5, r4
   16e58:	beq	16ec0 <_start@@Base+0x4808>
   16e5c:	ldrb	r3, [r4]
   16e60:	cmp	r3, #125	; 0x7d
   16e64:	movne	r3, #1
   16e68:	strne	r3, [sp, #92]	; 0x5c
   16e6c:	bne	16a00 <_start@@Base+0x4348>
   16e70:	str	r7, [sp, #92]	; 0x5c
   16e74:	add	r1, r4, #1
   16e78:	sub	r3, r5, r1
   16e7c:	cmp	r3, #1
   16e80:	ble	16e98 <_start@@Base+0x47e0>
   16e84:	ldrb	r3, [r4, #1]
   16e88:	cmp	r3, #32
   16e8c:	movhi	r4, r1
   16e90:	bhi	16a00 <_start@@Base+0x4348>
   16e94:	beq	16ee0 <_start@@Base+0x4828>
   16e98:	mov	r2, r5
   16e9c:	mov	r0, r6
   16ea0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   16ea4:	mov	r4, r0
   16ea8:	b	16a00 <_start@@Base+0x4348>
   16eac:	ldrb	r3, [r0, #2]
   16eb0:	cmp	r3, #32
   16eb4:	addhi	r4, r0, #2
   16eb8:	bls	16e40 <_start@@Base+0x4788>
   16ebc:	b	16e54 <_start@@Base+0x479c>
   16ec0:	str	r7, [sp, #92]	; 0x5c
   16ec4:	mov	r3, #10
   16ec8:	mov	r2, r5
   16ecc:	mov	r1, r4
   16ed0:	mov	r0, r6
   16ed4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16ed8:	mov	r4, r0
   16edc:	b	16a00 <_start@@Base+0x4348>
   16ee0:	ldrb	r3, [r4, #2]
   16ee4:	cmp	r3, #32
   16ee8:	addhi	r4, r4, #2
   16eec:	bls	16e98 <_start@@Base+0x47e0>
   16ef0:	b	16a00 <_start@@Base+0x4348>
   16ef4:	mov	r4, r5
   16ef8:	b	16a38 <_start@@Base+0x4380>
   16efc:	andeq	lr, r3, r8, ror r0
   16f00:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   16f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f08:	sub	sp, sp, #148	; 0x94
   16f0c:	mov	r6, r0
   16f10:	mov	r4, r1
   16f14:	mov	r5, r2
   16f18:	mov	r2, r3
   16f1c:	str	r3, [sp, #116]	; 0x74
   16f20:	mov	r3, #0
   16f24:	str	r3, [r2]
   16f28:	mov	r2, #4
   16f2c:	mov	r1, r2
   16f30:	ldr	r0, [r0]
   16f34:	bl	2350c <flatcc_builder_start_struct@@Base>
   16f38:	subs	r3, r0, #0
   16f3c:	str	r3, [sp, #112]	; 0x70
   16f40:	beq	1768c <_start@@Base+0x4fd4>
   16f44:	add	r3, sp, #124	; 0x7c
   16f48:	mov	r2, r5
   16f4c:	mov	r1, r4
   16f50:	mov	r0, r6
   16f54:	bl	15d2c <_start@@Base+0x3674>
   16f58:	mov	r4, r0
   16f5c:	mov	r7, r6
   16f60:	b	174b4 <_start@@Base+0x4dfc>
   16f64:	mov	r3, #5
   16f68:	mov	r2, r5
   16f6c:	mov	r1, r4
   16f70:	mov	r0, r7
   16f74:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   16f78:	mov	r4, r0
   16f7c:	b	174f0 <_start@@Base+0x4e38>
   16f80:	ldrb	r2, [r4, #7]
   16f84:	mov	r3, #0
   16f88:	b	16f94 <_start@@Base+0x48dc>
   16f8c:	mov	r2, #0
   16f90:	mov	r3, #0
   16f94:	ldrb	r0, [r4, #6]
   16f98:	mov	ip, #0
   16f9c:	str	ip, [sp, #84]	; 0x54
   16fa0:	lsl	r1, r0, #8
   16fa4:	str	r1, [sp, #80]	; 0x50
   16fa8:	ldrd	r0, [sp, #80]	; 0x50
   16fac:	orr	r0, r0, r2
   16fb0:	orr	r1, r1, r3
   16fb4:	mov	r2, r0
   16fb8:	mov	r3, r1
   16fbc:	ldrb	r0, [r4, #5]
   16fc0:	mov	ip, #0
   16fc4:	str	ip, [sp, #60]	; 0x3c
   16fc8:	lsl	r1, r0, #16
   16fcc:	str	r1, [sp, #56]	; 0x38
   16fd0:	ldrd	r0, [sp, #56]	; 0x38
   16fd4:	orr	r0, r0, r2
   16fd8:	orr	r1, r1, r3
   16fdc:	mov	r2, r0
   16fe0:	mov	r3, r1
   16fe4:	ldrb	r0, [r4, #4]
   16fe8:	mov	ip, #0
   16fec:	str	ip, [sp, #36]	; 0x24
   16ff0:	lsl	r1, r0, #24
   16ff4:	str	r1, [sp, #32]
   16ff8:	ldrd	r0, [sp, #32]
   16ffc:	orr	r0, r0, r2
   17000:	orr	r1, r1, r3
   17004:	mov	r2, r0
   17008:	mov	r3, r1
   1700c:	ldrb	r1, [r4, #3]
   17010:	str	r1, [sp, #28]
   17014:	mov	r1, #0
   17018:	str	r1, [sp, #24]
   1701c:	ldrd	r0, [sp, #24]
   17020:	orr	r0, r0, r2
   17024:	orr	r1, r1, r3
   17028:	mov	r2, r0
   1702c:	mov	r3, r1
   17030:	ldrb	r0, [r4, #2]
   17034:	lsl	r1, r0, #8
   17038:	str	r1, [sp, #20]
   1703c:	mov	r1, #0
   17040:	str	r1, [sp, #16]
   17044:	ldrd	r0, [sp, #16]
   17048:	orr	r0, r0, r2
   1704c:	orr	r1, r1, r3
   17050:	mov	r2, r0
   17054:	mov	r3, r1
   17058:	ldrb	r0, [r4, #1]
   1705c:	lsl	r1, r0, #16
   17060:	str	r1, [sp, #12]
   17064:	mov	r1, #0
   17068:	str	r1, [sp, #8]
   1706c:	ldrd	r0, [sp, #8]
   17070:	orr	r0, r0, r2
   17074:	orr	r1, r1, r3
   17078:	mov	r2, r0
   1707c:	mov	r3, r1
   17080:	ldrb	r0, [r4]
   17084:	lsl	r9, r0, #24
   17088:	mov	r8, #0
   1708c:	orr	r2, r2, r8
   17090:	orr	r3, r3, r9
   17094:	add	r1, pc, #892	; 0x37c
   17098:	ldrd	r0, [r1]
   1709c:	cmp	r3, r1
   170a0:	cmpeq	r2, r0
   170a4:	bne	1742c <_start@@Base+0x4d74>
   170a8:	add	r6, r4, #8
   170ac:	sub	r3, r5, r6
   170b0:	cmp	r3, #8
   170b4:	movcs	r3, #8
   170b8:	sub	r3, r3, #1
   170bc:	cmp	r3, #7
   170c0:	ldrls	pc, [pc, r3, lsl #2]
   170c4:	b	172c8 <_start@@Base+0x4c10>
   170c8:			; <UNDEFINED> instruction: 0x000172bc
   170cc:			; <UNDEFINED> instruction: 0x000172b0
   170d0:	andeq	r7, r1, r4, lsr #5
   170d4:	muleq	r1, r8, r2
   170d8:	andeq	r7, r1, ip, lsl #5
   170dc:	andeq	r7, r1, r0, lsl #5
   170e0:	andeq	r7, r1, ip, lsr r1
   170e4:	andeq	r7, r1, r0, lsr r1
   170e8:	mov	r2, #0
   170ec:	mov	r3, #0
   170f0:	b	16fbc <_start@@Base+0x4904>
   170f4:	mov	r2, #0
   170f8:	mov	r3, #0
   170fc:	b	16fe4 <_start@@Base+0x492c>
   17100:	mov	r2, #0
   17104:	mov	r3, #0
   17108:	b	1700c <_start@@Base+0x4954>
   1710c:	mov	r2, #0
   17110:	mov	r3, #0
   17114:	b	17030 <_start@@Base+0x4978>
   17118:	mov	r2, #0
   1711c:	mov	r3, #0
   17120:	b	17058 <_start@@Base+0x49a0>
   17124:	mov	r2, #0
   17128:	mov	r3, #0
   1712c:	b	17080 <_start@@Base+0x49c8>
   17130:	ldrb	r0, [r4, #15]
   17134:	mov	r1, #0
   17138:	b	17144 <_start@@Base+0x4a8c>
   1713c:	mov	r0, #0
   17140:	mov	r1, #0
   17144:	ldrb	r2, [r4, #14]
   17148:	mov	ip, #0
   1714c:	str	ip, [sp, #108]	; 0x6c
   17150:	lsl	r3, r2, #8
   17154:	str	r3, [sp, #104]	; 0x68
   17158:	ldrd	r2, [sp, #104]	; 0x68
   1715c:	orr	r2, r2, r0
   17160:	orr	r3, r3, r1
   17164:	mov	r0, r2
   17168:	mov	r1, r3
   1716c:	ldrb	r2, [r4, #13]
   17170:	mov	ip, #0
   17174:	str	ip, [sp, #100]	; 0x64
   17178:	lsl	r3, r2, #16
   1717c:	str	r3, [sp, #96]	; 0x60
   17180:	ldrd	r2, [sp, #96]	; 0x60
   17184:	orr	r2, r2, r0
   17188:	orr	r3, r3, r1
   1718c:	mov	r0, r2
   17190:	mov	r1, r3
   17194:	ldrb	r2, [r4, #12]
   17198:	mov	ip, #0
   1719c:	str	ip, [sp, #92]	; 0x5c
   171a0:	lsl	r3, r2, #24
   171a4:	str	r3, [sp, #88]	; 0x58
   171a8:	ldrd	r2, [sp, #88]	; 0x58
   171ac:	orr	r2, r2, r0
   171b0:	orr	r3, r3, r1
   171b4:	ldrb	r1, [r4, #11]
   171b8:	str	r1, [sp, #76]	; 0x4c
   171bc:	mov	r1, #0
   171c0:	str	r1, [sp, #72]	; 0x48
   171c4:	ldrd	r0, [sp, #72]	; 0x48
   171c8:	orr	r0, r0, r2
   171cc:	orr	r1, r1, r3
   171d0:	mov	r2, r0
   171d4:	mov	r3, r1
   171d8:	ldrb	r0, [r4, #10]
   171dc:	lsl	r1, r0, #8
   171e0:	str	r1, [sp, #68]	; 0x44
   171e4:	mov	r1, #0
   171e8:	str	r1, [sp, #64]	; 0x40
   171ec:	ldrd	r0, [sp, #64]	; 0x40
   171f0:	orr	r0, r0, r2
   171f4:	orr	r1, r1, r3
   171f8:	mov	r2, r0
   171fc:	mov	r3, r1
   17200:	ldrb	r0, [r4, #9]
   17204:	lsl	r1, r0, #16
   17208:	str	r1, [sp, #52]	; 0x34
   1720c:	mov	r1, #0
   17210:	str	r1, [sp, #48]	; 0x30
   17214:	ldrd	r0, [sp, #48]	; 0x30
   17218:	orr	r0, r0, r2
   1721c:	orr	r1, r1, r3
   17220:	mov	r2, r0
   17224:	mov	r3, r1
   17228:	ldrb	r0, [r4, #8]
   1722c:	lsl	r1, r0, #24
   17230:	str	r1, [sp, #44]	; 0x2c
   17234:	mov	r1, #0
   17238:	str	r1, [sp, #40]	; 0x28
   1723c:	ldrd	r0, [sp, #40]	; 0x28
   17240:	orr	r0, r0, r2
   17244:	orr	r1, r1, r3
   17248:	mov	r2, #0
   1724c:	ldr	r3, [pc, #460]	; 17420 <_start@@Base+0x4d68>
   17250:	and	r2, r2, r0
   17254:	and	r3, r3, r1
   17258:	mov	r0, #0
   1725c:	ldr	r1, [pc, #448]	; 17424 <_start@@Base+0x4d6c>
   17260:	cmp	r3, r1
   17264:	cmpeq	r2, r0
   17268:	beq	172d4 <_start@@Base+0x4c1c>
   1726c:	mov	r2, r5
   17270:	mov	r1, r6
   17274:	mov	r0, r7
   17278:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1727c:	b	1743c <_start@@Base+0x4d84>
   17280:	mov	r0, #0
   17284:	mov	r1, #0
   17288:	b	1716c <_start@@Base+0x4ab4>
   1728c:	mov	r0, #0
   17290:	mov	r1, #0
   17294:	b	17194 <_start@@Base+0x4adc>
   17298:	mov	r2, #0
   1729c:	mov	r3, #0
   172a0:	b	171b4 <_start@@Base+0x4afc>
   172a4:	mov	r2, #0
   172a8:	mov	r3, #0
   172ac:	b	171d8 <_start@@Base+0x4b20>
   172b0:	mov	r2, #0
   172b4:	mov	r3, #0
   172b8:	b	17200 <_start@@Base+0x4b48>
   172bc:	mov	r2, #0
   172c0:	mov	r3, #0
   172c4:	b	17228 <_start@@Base+0x4b70>
   172c8:	mov	r0, #0
   172cc:	mov	r1, #0
   172d0:	b	17248 <_start@@Base+0x4b90>
   172d4:	mov	r3, #2
   172d8:	mov	r2, r5
   172dc:	mov	r1, r6
   172e0:	mov	r0, r7
   172e4:	bl	1467c <_start@@Base+0x1fc4>
   172e8:	mov	r4, r0
   172ec:	cmp	r6, r0
   172f0:	beq	17404 <_start@@Base+0x4d4c>
   172f4:	mov	r3, #0
   172f8:	str	r3, [sp, #128]	; 0x80
   172fc:	mov	r2, #0
   17300:	mov	r3, #0
   17304:	strd	r2, [sp, #136]	; 0x88
   17308:	mov	r3, #0
   1730c:	str	r3, [sp, #132]	; 0x84
   17310:	cmp	r5, r0
   17314:	beq	1737c <_start@@Base+0x4cc4>
   17318:	add	r3, sp, #136	; 0x88
   1731c:	str	r3, [sp]
   17320:	add	r3, sp, #132	; 0x84
   17324:	mov	r2, r5
   17328:	mov	r1, r0
   1732c:	mov	r0, r7
   17330:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   17334:	cmp	r4, r0
   17338:	beq	1737c <_start@@Base+0x4cc4>
   1733c:	ldrd	r2, [sp, #136]	; 0x88
   17340:	ldr	r1, [sp, #132]	; 0x84
   17344:	cmp	r1, #0
   17348:	beq	173c4 <_start@@Base+0x4d0c>
   1734c:	cmp	r3, #0
   17350:	cmpeq	r2, #-2147483648	; 0x80000000
   17354:	rsbls	r3, r2, #0
   17358:	strls	r3, [sp, #128]	; 0x80
   1735c:	bls	173dc <_start@@Base+0x4d24>
   17360:	mov	r3, #8
   17364:	mov	r2, r5
   17368:	mov	r1, r0
   1736c:	mov	r0, r7
   17370:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   17374:	cmp	r4, r0
   17378:	bne	173dc <_start@@Base+0x4d24>
   1737c:	add	r3, sp, #128	; 0x80
   17380:	str	r3, [sp]
   17384:	ldr	r3, [pc, #156]	; 17428 <_start@@Base+0x4d70>
   17388:	mov	r2, r5
   1738c:	mov	r1, r4
   17390:	mov	r0, r7
   17394:	bl	15168 <_start@@Base+0x2ab0>
   17398:	cmp	r5, r0
   1739c:	cmpne	r4, r0
   173a0:	bne	173dc <_start@@Base+0x4d24>
   173a4:	mov	r6, r7
   173a8:	mov	r3, #33	; 0x21
   173ac:	mov	r2, r5
   173b0:	mov	r1, r0
   173b4:	mov	r0, r7
   173b8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   173bc:	mov	r4, r0
   173c0:	b	1766c <_start@@Base+0x4fb4>
   173c4:	mvn	sl, #-2147483648	; 0x80000000
   173c8:	mov	fp, #0
   173cc:	cmp	r3, fp
   173d0:	cmpeq	r2, sl
   173d4:	strls	r2, [sp, #128]	; 0x80
   173d8:	bhi	173ec <_start@@Base+0x4d34>
   173dc:	ldr	r3, [sp, #128]	; 0x80
   173e0:	ldr	r2, [sp, #112]	; 0x70
   173e4:	str	r3, [r2]
   173e8:	b	1743c <_start@@Base+0x4d84>
   173ec:	mov	r3, #7
   173f0:	mov	r2, r5
   173f4:	mov	r1, r0
   173f8:	mov	r0, r7
   173fc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   17400:	b	17374 <_start@@Base+0x4cbc>
   17404:	mov	r2, r5
   17408:	mov	r1, r0
   1740c:	mov	r0, r7
   17410:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   17414:	b	1743c <_start@@Base+0x4d84>
   17418:	cmpvc	pc, #1342177286	; 0x50000006
   1741c:	rsbvs	r6, pc, #428	; 0x1ac
   17420:			; <UNDEFINED> instruction: 0xffff0000
   17424:	cmnvs	r4, r0
   17428:	andeq	lr, r3, r8, asr #1
   1742c:	mov	r2, r5
   17430:	mov	r1, r4
   17434:	mov	r0, r7
   17438:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1743c:	sub	r3, r5, r0
   17440:	cmp	r3, #1
   17444:	ble	17458 <_start@@Base+0x4da0>
   17448:	ldrb	r3, [r0]
   1744c:	cmp	r3, #32
   17450:	bhi	17468 <_start@@Base+0x4db0>
   17454:	beq	1752c <_start@@Base+0x4e74>
   17458:	mov	r2, r5
   1745c:	mov	r1, r0
   17460:	mov	r0, r7
   17464:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   17468:	cmp	r5, r0
   1746c:	moveq	r3, #0
   17470:	streq	r3, [sp, #124]	; 0x7c
   17474:	moveq	r4, r0
   17478:	beq	174b4 <_start@@Base+0x4dfc>
   1747c:	ldrb	r3, [r0]
   17480:	cmp	r3, #44	; 0x2c
   17484:	beq	1758c <_start@@Base+0x4ed4>
   17488:	mov	r3, #0
   1748c:	str	r3, [sp, #124]	; 0x7c
   17490:	ldrb	r3, [r0]
   17494:	cmp	r3, #125	; 0x7d
   17498:	beq	17540 <_start@@Base+0x4e88>
   1749c:	mov	r3, #10
   174a0:	mov	r2, r5
   174a4:	mov	r1, r0
   174a8:	mov	r0, r7
   174ac:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   174b0:	mov	r4, r0
   174b4:	ldr	r3, [sp, #124]	; 0x7c
   174b8:	cmp	r3, #0
   174bc:	beq	17668 <_start@@Base+0x4fb0>
   174c0:	cmp	r5, r4
   174c4:	beq	174f0 <_start@@Base+0x4e38>
   174c8:	ldrb	r3, [r4]
   174cc:	cmp	r3, #34	; 0x22
   174d0:	addeq	r4, r4, #1
   174d4:	moveq	r3, #0
   174d8:	streq	r3, [r7, #12]
   174dc:	beq	174f0 <_start@@Base+0x4e38>
   174e0:	cmp	r3, #46	; 0x2e
   174e4:	movne	r3, #1
   174e8:	strne	r3, [r7, #12]
   174ec:	beq	16f64 <_start@@Base+0x48ac>
   174f0:	sub	r3, r5, r4
   174f4:	cmp	r3, #8
   174f8:	movcs	r3, #8
   174fc:	sub	r3, r3, #1
   17500:	cmp	r3, #7
   17504:	ldrls	pc, [pc, r3, lsl #2]
   17508:	b	1742c <_start@@Base+0x4d74>
   1750c:	andeq	r7, r1, r4, lsr #2
   17510:	andeq	r7, r1, r8, lsl r1
   17514:	andeq	r7, r1, ip, lsl #2
   17518:	andeq	r7, r1, r0, lsl #2
   1751c:	strdeq	r7, [r1], -r4
   17520:	andeq	r7, r1, r8, ror #1
   17524:	andeq	r6, r1, ip, lsl #31
   17528:	andeq	r6, r1, r0, lsl #31
   1752c:	ldrb	r3, [r0, #1]
   17530:	cmp	r3, #32
   17534:	addhi	r0, r0, #1
   17538:	bls	17458 <_start@@Base+0x4da0>
   1753c:	b	17468 <_start@@Base+0x4db0>
   17540:	add	r4, r0, #1
   17544:	sub	r3, r5, r4
   17548:	cmp	r3, #1
   1754c:	ble	17560 <_start@@Base+0x4ea8>
   17550:	ldrb	r3, [r0, #1]
   17554:	cmp	r3, #32
   17558:	bhi	174b4 <_start@@Base+0x4dfc>
   1755c:	beq	17578 <_start@@Base+0x4ec0>
   17560:	mov	r2, r5
   17564:	mov	r1, r4
   17568:	mov	r0, r7
   1756c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   17570:	mov	r4, r0
   17574:	b	174b4 <_start@@Base+0x4dfc>
   17578:	ldrb	r3, [r0, #2]
   1757c:	cmp	r3, #32
   17580:	addhi	r4, r0, #2
   17584:	bls	17560 <_start@@Base+0x4ea8>
   17588:	b	174b4 <_start@@Base+0x4dfc>
   1758c:	add	r4, r0, #1
   17590:	sub	r3, r5, r4
   17594:	cmp	r3, #1
   17598:	ble	175ac <_start@@Base+0x4ef4>
   1759c:	ldrb	r3, [r0, #1]
   175a0:	cmp	r3, #32
   175a4:	bhi	175c0 <_start@@Base+0x4f08>
   175a8:	beq	1761c <_start@@Base+0x4f64>
   175ac:	mov	r2, r5
   175b0:	mov	r1, r4
   175b4:	mov	r0, r7
   175b8:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   175bc:	mov	r4, r0
   175c0:	cmp	r5, r4
   175c4:	beq	17630 <_start@@Base+0x4f78>
   175c8:	ldrb	r3, [r4]
   175cc:	cmp	r3, #125	; 0x7d
   175d0:	movne	r3, #1
   175d4:	strne	r3, [sp, #124]	; 0x7c
   175d8:	bne	174b4 <_start@@Base+0x4dfc>
   175dc:	mov	r3, #0
   175e0:	str	r3, [sp, #124]	; 0x7c
   175e4:	add	r1, r4, #1
   175e8:	sub	r3, r5, r1
   175ec:	cmp	r3, #1
   175f0:	ble	17608 <_start@@Base+0x4f50>
   175f4:	ldrb	r3, [r4, #1]
   175f8:	cmp	r3, #32
   175fc:	movhi	r4, r1
   17600:	bhi	174b4 <_start@@Base+0x4dfc>
   17604:	beq	17654 <_start@@Base+0x4f9c>
   17608:	mov	r2, r5
   1760c:	mov	r0, r7
   17610:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   17614:	mov	r4, r0
   17618:	b	174b4 <_start@@Base+0x4dfc>
   1761c:	ldrb	r3, [r0, #2]
   17620:	cmp	r3, #32
   17624:	addhi	r4, r0, #2
   17628:	bls	175ac <_start@@Base+0x4ef4>
   1762c:	b	175c0 <_start@@Base+0x4f08>
   17630:	mov	r3, #0
   17634:	str	r3, [sp, #124]	; 0x7c
   17638:	mov	r3, #10
   1763c:	mov	r2, r5
   17640:	mov	r1, r4
   17644:	mov	r0, r7
   17648:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1764c:	mov	r4, r0
   17650:	b	174b4 <_start@@Base+0x4dfc>
   17654:	ldrb	r3, [r4, #2]
   17658:	cmp	r3, #32
   1765c:	addhi	r4, r4, #2
   17660:	bls	17608 <_start@@Base+0x4f50>
   17664:	b	174b4 <_start@@Base+0x4dfc>
   17668:	mov	r6, r7
   1766c:	cmp	r5, r4
   17670:	beq	1768c <_start@@Base+0x4fd4>
   17674:	ldr	r0, [r6]
   17678:	bl	235b4 <flatcc_builder_end_struct@@Base>
   1767c:	ldr	r3, [sp, #116]	; 0x74
   17680:	str	r0, [r3]
   17684:	cmp	r0, #0
   17688:	bne	176a4 <_start@@Base+0x4fec>
   1768c:	mov	r3, #33	; 0x21
   17690:	mov	r2, r5
   17694:	mov	r1, r4
   17698:	mov	r0, r6
   1769c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   176a0:	mov	r4, r0
   176a4:	mov	r0, r4
   176a8:	add	sp, sp, #148	; 0x94
   176ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176b4:	sub	sp, sp, #300	; 0x12c
   176b8:	mov	r6, r0
   176bc:	mov	r4, r1
   176c0:	mov	r5, r2
   176c4:	mov	r2, #0
   176c8:	ldr	r1, [sp, #336]	; 0x150
   176cc:	str	r2, [r1]
   176d0:	cmp	r3, #9
   176d4:	beq	187e4 <_start@@Base+0x612c>
   176d8:	bhi	1771c <_start@@Base+0x5064>
   176dc:	cmp	r3, #2
   176e0:	beq	1778c <_start@@Base+0x50d4>
   176e4:	cmp	r3, #8
   176e8:	beq	180c0 <_start@@Base+0x5a08>
   176ec:	cmp	r3, r2
   176f0:	beq	17748 <_start@@Base+0x5090>
   176f4:	ldr	r3, [r6, #8]
   176f8:	tst	r3, #1
   176fc:	bne	18850 <_start@@Base+0x6198>
   17700:	mov	r3, #15
   17704:	mov	r2, r5
   17708:	mov	r1, r4
   1770c:	mov	r0, r6
   17710:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   17714:	mov	r4, r0
   17718:	b	18814 <_start@@Base+0x615c>
   1771c:	cmp	r3, #11
   17720:	beq	18838 <_start@@Base+0x6180>
   17724:	bcc	18820 <_start@@Base+0x6168>
   17728:	cmp	r3, #255	; 0xff
   1772c:	bne	176f4 <_start@@Base+0x503c>
   17730:	ldr	r3, [sp, #336]	; 0x150
   17734:	mov	r2, r5
   17738:	mov	r1, r4
   1773c:	bl	2a214 <flatcc_json_parser_build_string@@Base>
   17740:	mov	r4, r0
   17744:	b	187f8 <_start@@Base+0x6140>
   17748:	sub	r3, r5, r4
   1774c:	cmp	r3, #3
   17750:	ble	17770 <_start@@Base+0x50b8>
   17754:	mov	r2, #4
   17758:	ldr	r1, [pc, #1064]	; 17b88 <_start@@Base+0x54d0>
   1775c:	mov	r0, r4
   17760:	bl	125c4 <memcmp@plt>
   17764:	cmp	r0, #0
   17768:	addeq	r4, r4, #4
   1776c:	beq	18814 <_start@@Base+0x615c>
   17770:	mov	r3, #26
   17774:	mov	r2, r5
   17778:	mov	r1, r4
   1777c:	mov	r0, r6
   17780:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   17784:	mov	r4, r0
   17788:	b	18814 <_start@@Base+0x615c>
   1778c:	mov	r1, #1
   17790:	ldr	r0, [r0]
   17794:	bl	24144 <flatcc_builder_start_table@@Base>
   17798:	cmp	r0, #0
   1779c:	bne	18088 <_start@@Base+0x59d0>
   177a0:	add	r3, sp, #276	; 0x114
   177a4:	mov	r2, r5
   177a8:	mov	r1, r4
   177ac:	mov	r0, r6
   177b0:	bl	15d2c <_start@@Base+0x3674>
   177b4:	mov	r4, r0
   177b8:	add	r9, pc, #952	; 0x3b8
   177bc:	ldrd	r8, [r9]
   177c0:	mov	r7, r6
   177c4:	b	17ee8 <_start@@Base+0x5830>
   177c8:	mov	r3, #5
   177cc:	mov	r2, r5
   177d0:	mov	r1, r4
   177d4:	mov	r0, r7
   177d8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   177dc:	mov	r4, r0
   177e0:	b	17f24 <_start@@Base+0x586c>
   177e4:	ldrb	r2, [r4, #7]
   177e8:	mov	r3, #0
   177ec:	b	177f8 <_start@@Base+0x5140>
   177f0:	mov	r2, #0
   177f4:	mov	r3, #0
   177f8:	ldrb	r0, [r4, #6]
   177fc:	mov	ip, #0
   17800:	str	ip, [sp, #172]	; 0xac
   17804:	lsl	r1, r0, #8
   17808:	str	r1, [sp, #168]	; 0xa8
   1780c:	ldrd	r0, [sp, #168]	; 0xa8
   17810:	orr	r0, r0, r2
   17814:	orr	r1, r1, r3
   17818:	mov	r2, r0
   1781c:	mov	r3, r1
   17820:	ldrb	r0, [r4, #5]
   17824:	mov	ip, #0
   17828:	str	ip, [sp, #124]	; 0x7c
   1782c:	lsl	r1, r0, #16
   17830:	str	r1, [sp, #120]	; 0x78
   17834:	ldrd	r0, [sp, #120]	; 0x78
   17838:	orr	r0, r0, r2
   1783c:	orr	r1, r1, r3
   17840:	mov	r2, r0
   17844:	mov	r3, r1
   17848:	ldrb	r0, [r4, #4]
   1784c:	mov	ip, #0
   17850:	str	ip, [sp, #76]	; 0x4c
   17854:	lsl	r1, r0, #24
   17858:	str	r1, [sp, #72]	; 0x48
   1785c:	ldrd	r0, [sp, #72]	; 0x48
   17860:	orr	r0, r0, r2
   17864:	orr	r1, r1, r3
   17868:	mov	r2, r0
   1786c:	mov	r3, r1
   17870:	ldrb	r1, [r4, #3]
   17874:	str	r1, [sp, #52]	; 0x34
   17878:	mov	r1, #0
   1787c:	str	r1, [sp, #48]	; 0x30
   17880:	ldrd	r0, [sp, #48]	; 0x30
   17884:	orr	r0, r0, r2
   17888:	orr	r1, r1, r3
   1788c:	mov	r2, r0
   17890:	mov	r3, r1
   17894:	ldrb	r0, [r4, #2]
   17898:	lsl	r1, r0, #8
   1789c:	str	r1, [sp, #36]	; 0x24
   178a0:	mov	r1, #0
   178a4:	str	r1, [sp, #32]
   178a8:	ldrd	r0, [sp, #32]
   178ac:	orr	r0, r0, r2
   178b0:	orr	r1, r1, r3
   178b4:	mov	r2, r0
   178b8:	mov	r3, r1
   178bc:	ldrb	r0, [r4, #1]
   178c0:	lsl	r1, r0, #16
   178c4:	str	r1, [sp, #20]
   178c8:	mov	r1, #0
   178cc:	str	r1, [sp, #16]
   178d0:	ldrd	r0, [sp, #16]
   178d4:	orr	r0, r0, r2
   178d8:	orr	r1, r1, r3
   178dc:	mov	r2, r0
   178e0:	mov	r3, r1
   178e4:	ldrb	r0, [r4]
   178e8:	lsl	fp, r0, #24
   178ec:	mov	sl, #0
   178f0:	orr	r2, r2, sl
   178f4:	orr	r3, r3, fp
   178f8:	cmp	r3, r9
   178fc:	cmpeq	r2, r8
   17900:	bne	17e58 <_start@@Base+0x57a0>
   17904:	add	ip, r4, #8
   17908:	sub	r3, r5, ip
   1790c:	cmp	r3, #8
   17910:	movcs	r3, #8
   17914:	sub	r3, r3, #1
   17918:	cmp	r3, #7
   1791c:	ldrls	pc, [pc, r3, lsl #2]
   17920:	b	17b20 <_start@@Base+0x5468>
   17924:	andeq	r7, r1, r4, lsl fp
   17928:	andeq	r7, r1, r8, lsl #22
   1792c:	strdeq	r7, [r1], -ip
   17930:	strdeq	r7, [r1], -r0
   17934:	andeq	r7, r1, r4, ror #21
   17938:	ldrdeq	r7, [r1], -r8
   1793c:	muleq	r1, r8, r9
   17940:	andeq	r7, r1, ip, lsl #19
   17944:	mov	r2, #0
   17948:	mov	r3, #0
   1794c:	b	17820 <_start@@Base+0x5168>
   17950:	mov	r2, #0
   17954:	mov	r3, #0
   17958:	b	17848 <_start@@Base+0x5190>
   1795c:	mov	r2, #0
   17960:	mov	r3, #0
   17964:	b	17870 <_start@@Base+0x51b8>
   17968:	mov	r2, #0
   1796c:	mov	r3, #0
   17970:	b	17894 <_start@@Base+0x51dc>
   17974:	mov	r2, #0
   17978:	mov	r3, #0
   1797c:	b	178bc <_start@@Base+0x5204>
   17980:	mov	r2, #0
   17984:	mov	r3, #0
   17988:	b	178e4 <_start@@Base+0x522c>
   1798c:	ldrb	r0, [r4, #15]
   17990:	mov	r1, #0
   17994:	b	179a0 <_start@@Base+0x52e8>
   17998:	mov	r0, #0
   1799c:	mov	r1, #0
   179a0:	ldrb	r2, [r4, #14]
   179a4:	mov	lr, #0
   179a8:	str	lr, [sp, #244]	; 0xf4
   179ac:	lsl	r3, r2, #8
   179b0:	str	r3, [sp, #240]	; 0xf0
   179b4:	ldrd	r2, [sp, #240]	; 0xf0
   179b8:	orr	r2, r2, r0
   179bc:	orr	r3, r3, r1
   179c0:	ldrb	r0, [r4, #13]
   179c4:	mov	lr, #0
   179c8:	str	lr, [sp, #212]	; 0xd4
   179cc:	lsl	r1, r0, #16
   179d0:	str	r1, [sp, #208]	; 0xd0
   179d4:	ldrd	r0, [sp, #208]	; 0xd0
   179d8:	orr	r0, r0, r2
   179dc:	orr	r1, r1, r3
   179e0:	mov	r2, r0
   179e4:	mov	r3, r1
   179e8:	ldrb	r0, [r4, #12]
   179ec:	mov	lr, #0
   179f0:	str	lr, [sp, #180]	; 0xb4
   179f4:	lsl	r1, r0, #24
   179f8:	str	r1, [sp, #176]	; 0xb0
   179fc:	ldrd	r0, [sp, #176]	; 0xb0
   17a00:	orr	r0, r0, r2
   17a04:	orr	r1, r1, r3
   17a08:	mov	r2, r0
   17a0c:	mov	r3, r1
   17a10:	ldrb	r1, [r4, #11]
   17a14:	str	r1, [sp, #148]	; 0x94
   17a18:	mov	r1, #0
   17a1c:	str	r1, [sp, #144]	; 0x90
   17a20:	ldrd	r0, [sp, #144]	; 0x90
   17a24:	orr	r0, r0, r2
   17a28:	orr	r1, r1, r3
   17a2c:	mov	r2, r0
   17a30:	mov	r3, r1
   17a34:	ldrb	r0, [r4, #10]
   17a38:	lsl	r1, r0, #8
   17a3c:	str	r1, [sp, #132]	; 0x84
   17a40:	mov	r1, #0
   17a44:	str	r1, [sp, #128]	; 0x80
   17a48:	ldrd	r0, [sp, #128]	; 0x80
   17a4c:	orr	r0, r0, r2
   17a50:	orr	r1, r1, r3
   17a54:	mov	r2, r0
   17a58:	mov	r3, r1
   17a5c:	ldrb	r0, [r4, #9]
   17a60:	lsl	r1, r0, #16
   17a64:	str	r1, [sp, #108]	; 0x6c
   17a68:	mov	r1, #0
   17a6c:	str	r1, [sp, #104]	; 0x68
   17a70:	ldrd	r0, [sp, #104]	; 0x68
   17a74:	orr	r0, r0, r2
   17a78:	orr	r1, r1, r3
   17a7c:	mov	r2, r0
   17a80:	mov	r3, r1
   17a84:	ldrb	r0, [r4, #8]
   17a88:	lsl	r1, r0, #24
   17a8c:	str	r1, [sp, #92]	; 0x5c
   17a90:	mov	r1, #0
   17a94:	str	r1, [sp, #88]	; 0x58
   17a98:	ldrd	r0, [sp, #88]	; 0x58
   17a9c:	orr	r0, r0, r2
   17aa0:	orr	r1, r1, r3
   17aa4:	mov	r2, r0
   17aa8:	mov	r3, r1
   17aac:	add	r1, pc, #204	; 0xcc
   17ab0:	ldrd	r0, [r1]
   17ab4:	cmp	r3, r1
   17ab8:	cmpeq	r2, r0
   17abc:	beq	17b2c <_start@@Base+0x5474>
   17ac0:	mov	r2, r5
   17ac4:	mov	r1, ip
   17ac8:	mov	r0, r7
   17acc:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   17ad0:	mov	r6, r0
   17ad4:	b	17e6c <_start@@Base+0x57b4>
   17ad8:	mov	r2, #0
   17adc:	mov	r3, #0
   17ae0:	b	179c0 <_start@@Base+0x5308>
   17ae4:	mov	r2, #0
   17ae8:	mov	r3, #0
   17aec:	b	179e8 <_start@@Base+0x5330>
   17af0:	mov	r2, #0
   17af4:	mov	r3, #0
   17af8:	b	17a10 <_start@@Base+0x5358>
   17afc:	mov	r2, #0
   17b00:	mov	r3, #0
   17b04:	b	17a34 <_start@@Base+0x537c>
   17b08:	mov	r2, #0
   17b0c:	mov	r3, #0
   17b10:	b	17a5c <_start@@Base+0x53a4>
   17b14:	mov	r2, #0
   17b18:	mov	r3, #0
   17b1c:	b	17a84 <_start@@Base+0x53cc>
   17b20:	mov	r2, #0
   17b24:	mov	r3, #0
   17b28:	b	17aac <_start@@Base+0x53f4>
   17b2c:	add	r6, r4, #16
   17b30:	sub	r3, r5, r6
   17b34:	cmp	r3, #8
   17b38:	movcs	r3, #8
   17b3c:	sub	r3, r3, #1
   17b40:	cmp	r3, #7
   17b44:	ldrls	pc, [pc, r3, lsl #2]
   17b48:	b	17cd4 <_start@@Base+0x561c>
   17b4c:	andeq	r7, r1, ip, asr #25
   17b50:	andeq	r7, r1, r4, asr #25
   17b54:			; <UNDEFINED> instruction: 0x00017cbc
   17b58:			; <UNDEFINED> instruction: 0x00017cb4
   17b5c:	andeq	r7, r1, ip, lsr #25
   17b60:	andeq	r7, r1, r4, lsr #25
   17b64:	andeq	r7, r1, ip, lsl #23
   17b68:	andeq	r7, r1, ip, ror #22
   17b6c:	mov	r1, #0
   17b70:	b	17b90 <_start@@Base+0x54d8>
   17b74:	nop			; (mov r0, r0)
   17b78:	ldrbvs	r6, [pc], #-372	; 17b80 <_start@@Base+0x54c8>
   17b7c:	cmnvc	r7, #456	; 0x1c8
   17b80:	svcpl	0x0064616d
   17b84:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   17b88:	muleq	r2, r0, r6
   17b8c:	mov	r1, #0
   17b90:	ldrb	r2, [r4, #22]
   17b94:	mov	ip, #0
   17b98:	str	ip, [sp, #268]	; 0x10c
   17b9c:	lsl	r3, r2, #8
   17ba0:	str	r3, [sp, #264]	; 0x108
   17ba4:	add	r3, sp, #264	; 0x108
   17ba8:	ldrd	r2, [r3]
   17bac:	orr	r3, r3, r1
   17bb0:	mov	r1, r3
   17bb4:	ldrb	r2, [r4, #21]
   17bb8:	mov	ip, #0
   17bbc:	str	ip, [sp, #260]	; 0x104
   17bc0:	lsl	r3, r2, #16
   17bc4:	str	r3, [sp, #256]	; 0x100
   17bc8:	add	r3, sp, #256	; 0x100
   17bcc:	ldrd	r2, [r3]
   17bd0:	orr	r3, r3, r1
   17bd4:	mov	r1, r3
   17bd8:	ldrb	r2, [r4, #20]
   17bdc:	mov	ip, #0
   17be0:	str	ip, [sp, #252]	; 0xfc
   17be4:	lsl	r3, r2, #24
   17be8:	str	r3, [sp, #248]	; 0xf8
   17bec:	ldrd	r2, [sp, #248]	; 0xf8
   17bf0:	orr	r3, r3, r1
   17bf4:	ldrb	r1, [r4, #19]
   17bf8:	str	r1, [sp, #228]	; 0xe4
   17bfc:	mov	r1, #0
   17c00:	str	r1, [sp, #224]	; 0xe0
   17c04:	ldrd	r0, [sp, #224]	; 0xe0
   17c08:	orr	r1, r1, r3
   17c0c:	mov	r3, r1
   17c10:	ldrb	r0, [r4, #18]
   17c14:	lsl	r1, r0, #8
   17c18:	str	r1, [sp, #220]	; 0xdc
   17c1c:	mov	r1, #0
   17c20:	str	r1, [sp, #216]	; 0xd8
   17c24:	ldrd	r0, [sp, #216]	; 0xd8
   17c28:	orr	r1, r1, r3
   17c2c:	mov	r3, r1
   17c30:	ldrb	r0, [r4, #17]
   17c34:	lsl	r1, r0, #16
   17c38:	str	r1, [sp, #204]	; 0xcc
   17c3c:	mov	r1, #0
   17c40:	str	r1, [sp, #200]	; 0xc8
   17c44:	ldrd	r0, [sp, #200]	; 0xc8
   17c48:	orr	r1, r1, r3
   17c4c:	mov	r3, r1
   17c50:	ldrb	r0, [r4, #16]
   17c54:	lsl	r1, r0, #24
   17c58:	str	r1, [sp, #188]	; 0xbc
   17c5c:	mov	r1, #0
   17c60:	str	r1, [sp, #184]	; 0xb8
   17c64:	ldrd	r0, [sp, #184]	; 0xb8
   17c68:	orr	r1, r1, r3
   17c6c:	mov	r3, r1
   17c70:	mov	r2, #0
   17c74:	bic	r3, r3, #255	; 0xff
   17c78:	add	r1, pc, #968	; 0x3c8
   17c7c:	ldrd	r0, [r1]
   17c80:	cmp	r3, r1
   17c84:	cmpeq	r2, r0
   17c88:	beq	17cdc <_start@@Base+0x5624>
   17c8c:	mov	r2, r5
   17c90:	mov	r1, r6
   17c94:	mov	r0, r7
   17c98:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   17c9c:	mov	r6, r0
   17ca0:	b	17e6c <_start@@Base+0x57b4>
   17ca4:	mov	r1, #0
   17ca8:	b	17bb4 <_start@@Base+0x54fc>
   17cac:	mov	r1, #0
   17cb0:	b	17bd8 <_start@@Base+0x5520>
   17cb4:	mov	r3, #0
   17cb8:	b	17bf4 <_start@@Base+0x553c>
   17cbc:	mov	r3, #0
   17cc0:	b	17c10 <_start@@Base+0x5558>
   17cc4:	mov	r3, #0
   17cc8:	b	17c30 <_start@@Base+0x5578>
   17ccc:	mov	r3, #0
   17cd0:	b	17c50 <_start@@Base+0x5598>
   17cd4:	mov	r3, #0
   17cd8:	b	17c70 <_start@@Base+0x55b8>
   17cdc:	mov	r3, #3
   17ce0:	mov	r2, r5
   17ce4:	mov	r1, r6
   17ce8:	mov	r0, r7
   17cec:	bl	1467c <_start@@Base+0x1fc4>
   17cf0:	mov	r4, r0
   17cf4:	cmp	r6, r0
   17cf8:	beq	17e40 <_start@@Base+0x5788>
   17cfc:	mov	r1, #0
   17d00:	str	r1, [sp, #280]	; 0x118
   17d04:	mov	r2, #0
   17d08:	mov	r3, #0
   17d0c:	add	r0, sp, #288	; 0x120
   17d10:	strd	r2, [r0]
   17d14:	str	r1, [sp, #284]	; 0x11c
   17d18:	cmp	r5, r4
   17d1c:	beq	17d8c <_start@@Base+0x56d4>
   17d20:	str	r0, [sp]
   17d24:	add	r3, sp, #284	; 0x11c
   17d28:	mov	r2, r5
   17d2c:	mov	r1, r4
   17d30:	mov	r0, r7
   17d34:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   17d38:	mov	r6, r0
   17d3c:	cmp	r4, r0
   17d40:	beq	17d8c <_start@@Base+0x56d4>
   17d44:	add	r3, sp, #288	; 0x120
   17d48:	ldrd	r0, [r3]
   17d4c:	ldr	r3, [sp, #284]	; 0x11c
   17d50:	cmp	r3, #0
   17d54:	beq	17dcc <_start@@Base+0x5714>
   17d58:	cmp	r1, #0
   17d5c:	cmpeq	r0, #-2147483648	; 0x80000000
   17d60:	rsbls	r0, r0, #0
   17d64:	strls	r0, [sp, #280]	; 0x118
   17d68:	bls	17de4 <_start@@Base+0x572c>
   17d6c:	mov	r3, #8
   17d70:	mov	r2, r5
   17d74:	mov	r1, r6
   17d78:	mov	r0, r7
   17d7c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   17d80:	mov	r6, r0
   17d84:	cmp	r4, r6
   17d88:	bne	17de4 <_start@@Base+0x572c>
   17d8c:	add	r3, sp, #280	; 0x118
   17d90:	str	r3, [sp]
   17d94:	ldr	r3, [pc, #692]	; 18050 <_start@@Base+0x5998>
   17d98:	mov	r2, r5
   17d9c:	mov	r1, r4
   17da0:	mov	r0, r7
   17da4:	bl	15168 <_start@@Base+0x2ab0>
   17da8:	mov	r6, r0
   17dac:	cmp	r5, r0
   17db0:	cmpne	r4, r0
   17db4:	bne	17de4 <_start@@Base+0x572c>
   17db8:	mov	r3, r7
   17dbc:	mov	r7, r6
   17dc0:	mov	r6, r3
   17dc4:	mov	r4, r7
   17dc8:	b	18088 <_start@@Base+0x59d0>
   17dcc:	mvn	r2, #-2147483648	; 0x80000000
   17dd0:	mov	r3, #0
   17dd4:	cmp	r1, r3
   17dd8:	cmpeq	r0, r2
   17ddc:	strls	r0, [sp, #280]	; 0x118
   17de0:	bhi	17e24 <_start@@Base+0x576c>
   17de4:	ldr	r3, [sp, #280]	; 0x118
   17de8:	cmp	r3, #0
   17dec:	bne	17dfc <_start@@Base+0x5744>
   17df0:	ldr	r3, [r7, #8]
   17df4:	tst	r3, #2
   17df8:	beq	17e6c <_start@@Base+0x57b4>
   17dfc:	mov	r3, #4
   17e00:	mov	r2, r3
   17e04:	mov	r1, #0
   17e08:	ldr	r0, [r7]
   17e0c:	bl	25b40 <flatcc_builder_table_add@@Base>
   17e10:	cmp	r0, #0
   17e14:	beq	17db8 <_start@@Base+0x5700>
   17e18:	ldr	r3, [sp, #280]	; 0x118
   17e1c:	str	r3, [r0]
   17e20:	b	17e6c <_start@@Base+0x57b4>
   17e24:	mov	r3, #7
   17e28:	mov	r2, r5
   17e2c:	mov	r1, r6
   17e30:	mov	r0, r7
   17e34:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   17e38:	mov	r6, r0
   17e3c:	b	17d84 <_start@@Base+0x56cc>
   17e40:	mov	r2, r5
   17e44:	mov	r1, r0
   17e48:	mov	r0, r7
   17e4c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   17e50:	mov	r6, r0
   17e54:	b	17e6c <_start@@Base+0x57b4>
   17e58:	mov	r2, r5
   17e5c:	mov	r1, r4
   17e60:	mov	r0, r7
   17e64:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   17e68:	mov	r6, r0
   17e6c:	sub	r3, r5, r6
   17e70:	cmp	r3, #1
   17e74:	ble	17e88 <_start@@Base+0x57d0>
   17e78:	ldrb	r3, [r6]
   17e7c:	cmp	r3, #32
   17e80:	bhi	17e9c <_start@@Base+0x57e4>
   17e84:	beq	17f60 <_start@@Base+0x58a8>
   17e88:	mov	r2, r5
   17e8c:	mov	r1, r6
   17e90:	mov	r0, r7
   17e94:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   17e98:	mov	r6, r0
   17e9c:	cmp	r5, r6
   17ea0:	moveq	r3, #0
   17ea4:	streq	r3, [sp, #276]	; 0x114
   17ea8:	moveq	r4, r6
   17eac:	beq	17ee8 <_start@@Base+0x5830>
   17eb0:	ldrb	r3, [r6]
   17eb4:	cmp	r3, #44	; 0x2c
   17eb8:	beq	17fc0 <_start@@Base+0x5908>
   17ebc:	mov	r3, #0
   17ec0:	str	r3, [sp, #276]	; 0x114
   17ec4:	ldrb	r3, [r6]
   17ec8:	cmp	r3, #125	; 0x7d
   17ecc:	beq	17f74 <_start@@Base+0x58bc>
   17ed0:	mov	r3, #10
   17ed4:	mov	r2, r5
   17ed8:	mov	r1, r6
   17edc:	mov	r0, r7
   17ee0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   17ee4:	mov	r4, r0
   17ee8:	ldr	r3, [sp, #276]	; 0x114
   17eec:	cmp	r3, #0
   17ef0:	beq	18078 <_start@@Base+0x59c0>
   17ef4:	cmp	r5, r4
   17ef8:	beq	17f24 <_start@@Base+0x586c>
   17efc:	ldrb	r3, [r4]
   17f00:	cmp	r3, #34	; 0x22
   17f04:	addeq	r4, r4, #1
   17f08:	moveq	r3, #0
   17f0c:	streq	r3, [r7, #12]
   17f10:	beq	17f24 <_start@@Base+0x586c>
   17f14:	cmp	r3, #46	; 0x2e
   17f18:	movne	r3, #1
   17f1c:	strne	r3, [r7, #12]
   17f20:	beq	177c8 <_start@@Base+0x5110>
   17f24:	sub	r3, r5, r4
   17f28:	cmp	r3, #8
   17f2c:	movcs	r3, #8
   17f30:	sub	r3, r3, #1
   17f34:	cmp	r3, #7
   17f38:	ldrls	pc, [pc, r3, lsl #2]
   17f3c:	b	17e58 <_start@@Base+0x57a0>
   17f40:	andeq	r7, r1, r0, lsl #19
   17f44:	andeq	r7, r1, r4, ror r9
   17f48:	andeq	r7, r1, r8, ror #18
   17f4c:	andeq	r7, r1, ip, asr r9
   17f50:	andeq	r7, r1, r0, asr r9
   17f54:	andeq	r7, r1, r4, asr #18
   17f58:	strdeq	r7, [r1], -r0
   17f5c:	andeq	r7, r1, r4, ror #15
   17f60:	ldrb	r3, [r6, #1]
   17f64:	cmp	r3, #32
   17f68:	addhi	r6, r6, #1
   17f6c:	bls	17e88 <_start@@Base+0x57d0>
   17f70:	b	17e9c <_start@@Base+0x57e4>
   17f74:	add	r4, r6, #1
   17f78:	sub	r3, r5, r4
   17f7c:	cmp	r3, #1
   17f80:	ble	17f94 <_start@@Base+0x58dc>
   17f84:	ldrb	r3, [r6, #1]
   17f88:	cmp	r3, #32
   17f8c:	bhi	17ee8 <_start@@Base+0x5830>
   17f90:	beq	17fac <_start@@Base+0x58f4>
   17f94:	mov	r2, r5
   17f98:	mov	r1, r4
   17f9c:	mov	r0, r7
   17fa0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   17fa4:	mov	r4, r0
   17fa8:	b	17ee8 <_start@@Base+0x5830>
   17fac:	ldrb	r3, [r6, #2]
   17fb0:	cmp	r3, #32
   17fb4:	addhi	r4, r6, #2
   17fb8:	bls	17f94 <_start@@Base+0x58dc>
   17fbc:	b	17ee8 <_start@@Base+0x5830>
   17fc0:	add	r4, r6, #1
   17fc4:	sub	r3, r5, r4
   17fc8:	cmp	r3, #1
   17fcc:	ble	17fe0 <_start@@Base+0x5928>
   17fd0:	ldrb	r3, [r6, #1]
   17fd4:	cmp	r3, #32
   17fd8:	bhi	17ff4 <_start@@Base+0x593c>
   17fdc:	beq	18030 <_start@@Base+0x5978>
   17fe0:	mov	r2, r5
   17fe4:	mov	r1, r4
   17fe8:	mov	r0, r7
   17fec:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   17ff0:	mov	r4, r0
   17ff4:	cmp	r5, r4
   17ff8:	beq	18054 <_start@@Base+0x599c>
   17ffc:	ldrb	r3, [r4]
   18000:	cmp	r3, #125	; 0x7d
   18004:	movne	r3, #1
   18008:	strne	r3, [sp, #276]	; 0x114
   1800c:	bne	17ee8 <_start@@Base+0x5830>
   18010:	mov	r3, #0
   18014:	str	r3, [sp, #276]	; 0x114
   18018:	mov	r2, r5
   1801c:	add	r1, r4, #1
   18020:	mov	r0, r7
   18024:	bl	1447c <_start@@Base+0x1dc4>
   18028:	mov	r4, r0
   1802c:	b	17ee8 <_start@@Base+0x5830>
   18030:	ldrb	r3, [r6, #2]
   18034:	cmp	r3, #32
   18038:	addhi	r4, r6, #2
   1803c:	bls	17fe0 <_start@@Base+0x5928>
   18040:	b	17ff4 <_start@@Base+0x593c>
   18044:	nop			; (mov r0, r0)
   18048:	andeq	r0, r0, r0
   1804c:	cmnvs	r7, r0, lsl #10
   18050:	ldrdeq	lr, [r3], -r4
   18054:	mov	r3, #0
   18058:	str	r3, [sp, #276]	; 0x114
   1805c:	mov	r3, #10
   18060:	mov	r2, r5
   18064:	mov	r1, r4
   18068:	mov	r0, r7
   1806c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   18070:	mov	r4, r0
   18074:	b	17ee8 <_start@@Base+0x5830>
   18078:	mov	r6, r7
   1807c:	ldr	r3, [r7, #24]
   18080:	cmp	r3, #0
   18084:	beq	180a4 <_start@@Base+0x59ec>
   18088:	mov	r3, #33	; 0x21
   1808c:	mov	r2, r5
   18090:	mov	r1, r4
   18094:	mov	r0, r6
   18098:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1809c:	mov	r4, r0
   180a0:	b	187f8 <_start@@Base+0x6140>
   180a4:	ldr	r0, [r7]
   180a8:	bl	24b94 <flatcc_builder_end_table@@Base>
   180ac:	ldr	r3, [sp, #336]	; 0x150
   180b0:	str	r0, [r3]
   180b4:	cmp	r0, #0
   180b8:	beq	18088 <_start@@Base+0x59d0>
   180bc:	b	187f8 <_start@@Base+0x6140>
   180c0:	mov	r2, #2
   180c4:	mov	r1, r2
   180c8:	ldr	r0, [r0]
   180cc:	bl	2350c <flatcc_builder_start_struct@@Base>
   180d0:	subs	fp, r0, #0
   180d4:	beq	187c8 <_start@@Base+0x6110>
   180d8:	add	r3, sp, #280	; 0x118
   180dc:	mov	r2, r5
   180e0:	mov	r1, r4
   180e4:	mov	r0, r6
   180e8:	bl	15d2c <_start@@Base+0x3674>
   180ec:	mov	r4, r0
   180f0:	str	fp, [sp, #16]
   180f4:	mov	r7, r6
   180f8:	b	185f0 <_start@@Base+0x5f38>
   180fc:	mov	r3, #5
   18100:	mov	r2, r5
   18104:	mov	r1, r4
   18108:	mov	r0, r7
   1810c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   18110:	mov	r4, r0
   18114:	b	1862c <_start@@Base+0x5f74>
   18118:	ldrb	r2, [r4, #7]
   1811c:	mov	r3, #0
   18120:	b	1812c <_start@@Base+0x5a74>
   18124:	mov	r2, #0
   18128:	mov	r3, #0
   1812c:	ldrb	r0, [r4, #6]
   18130:	mov	ip, #0
   18134:	str	ip, [sp, #156]	; 0x9c
   18138:	lsl	r1, r0, #8
   1813c:	str	r1, [sp, #152]	; 0x98
   18140:	ldrd	r0, [sp, #152]	; 0x98
   18144:	orr	r0, r0, r2
   18148:	orr	r1, r1, r3
   1814c:	mov	r2, r0
   18150:	mov	r3, r1
   18154:	ldrb	r0, [r4, #5]
   18158:	mov	ip, #0
   1815c:	str	ip, [sp, #100]	; 0x64
   18160:	lsl	r1, r0, #16
   18164:	str	r1, [sp, #96]	; 0x60
   18168:	ldrd	r0, [sp, #96]	; 0x60
   1816c:	orr	r0, r0, r2
   18170:	orr	r1, r1, r3
   18174:	mov	r2, r0
   18178:	mov	r3, r1
   1817c:	ldrb	r0, [r4, #4]
   18180:	mov	ip, #0
   18184:	str	ip, [sp, #60]	; 0x3c
   18188:	lsl	r1, r0, #24
   1818c:	str	r1, [sp, #56]	; 0x38
   18190:	ldrd	r0, [sp, #56]	; 0x38
   18194:	orr	r0, r0, r2
   18198:	orr	r1, r1, r3
   1819c:	mov	r2, r0
   181a0:	mov	r3, r1
   181a4:	ldrb	r1, [r4, #3]
   181a8:	str	r1, [sp, #44]	; 0x2c
   181ac:	mov	r1, #0
   181b0:	str	r1, [sp, #40]	; 0x28
   181b4:	ldrd	r0, [sp, #40]	; 0x28
   181b8:	orr	r0, r0, r2
   181bc:	orr	r1, r1, r3
   181c0:	mov	r2, r0
   181c4:	mov	r3, r1
   181c8:	ldrb	r0, [r4, #2]
   181cc:	lsl	r1, r0, #8
   181d0:	str	r1, [sp, #28]
   181d4:	mov	r1, #0
   181d8:	str	r1, [sp, #24]
   181dc:	ldrd	r0, [sp, #24]
   181e0:	orr	r0, r0, r2
   181e4:	orr	r1, r1, r3
   181e8:	mov	r2, r0
   181ec:	mov	r3, r1
   181f0:	ldrb	r0, [r4, #1]
   181f4:	lsl	r1, r0, #16
   181f8:	str	r1, [sp, #12]
   181fc:	mov	r1, #0
   18200:	str	r1, [sp, #8]
   18204:	ldrd	r0, [sp, #8]
   18208:	orr	r0, r0, r2
   1820c:	orr	r1, r1, r3
   18210:	mov	r2, r0
   18214:	mov	r3, r1
   18218:	ldrb	r0, [r4]
   1821c:	lsl	r9, r0, #24
   18220:	mov	r8, #0
   18224:	orr	r2, r2, r8
   18228:	orr	r3, r3, r9
   1822c:	add	r1, pc, #796	; 0x31c
   18230:	ldrd	r0, [r1]
   18234:	cmp	r3, r1
   18238:	cmpeq	r2, r0
   1823c:	bne	18568 <_start@@Base+0x5eb0>
   18240:	add	r6, r4, #8
   18244:	sub	r3, r5, r6
   18248:	cmp	r3, #8
   1824c:	movcs	r3, #8
   18250:	sub	r3, r3, #1
   18254:	cmp	r3, #7
   18258:	ldrls	pc, [pc, r3, lsl #2]
   1825c:	b	1840c <_start@@Base+0x5d54>
   18260:	andeq	r8, r1, r4, lsl #8
   18264:	strdeq	r8, [r1], -ip
   18268:	strdeq	r8, [r1], -r4
   1826c:	andeq	r8, r1, ip, ror #7
   18270:	andeq	r8, r1, r4, ror #7
   18274:	ldrdeq	r8, [r1], -ip
   18278:	ldrdeq	r8, [r1], -r0
   1827c:	andeq	r8, r1, r8, asr #5
   18280:	mov	r2, #0
   18284:	mov	r3, #0
   18288:	b	18154 <_start@@Base+0x5a9c>
   1828c:	mov	r2, #0
   18290:	mov	r3, #0
   18294:	b	1817c <_start@@Base+0x5ac4>
   18298:	mov	r2, #0
   1829c:	mov	r3, #0
   182a0:	b	181a4 <_start@@Base+0x5aec>
   182a4:	mov	r2, #0
   182a8:	mov	r3, #0
   182ac:	b	181c8 <_start@@Base+0x5b10>
   182b0:	mov	r2, #0
   182b4:	mov	r3, #0
   182b8:	b	181f0 <_start@@Base+0x5b38>
   182bc:	mov	r2, #0
   182c0:	mov	r3, #0
   182c4:	b	18218 <_start@@Base+0x5b60>
   182c8:	mov	r1, #0
   182cc:	b	182d4 <_start@@Base+0x5c1c>
   182d0:	mov	r1, #0
   182d4:	ldrb	r2, [r4, #14]
   182d8:	mov	ip, #0
   182dc:	str	ip, [sp, #236]	; 0xec
   182e0:	lsl	r3, r2, #8
   182e4:	str	r3, [sp, #232]	; 0xe8
   182e8:	ldrd	r2, [sp, #232]	; 0xe8
   182ec:	orr	r3, r3, r1
   182f0:	mov	r1, r3
   182f4:	ldrb	r2, [r4, #13]
   182f8:	mov	ip, #0
   182fc:	str	ip, [sp, #196]	; 0xc4
   18300:	lsl	r3, r2, #16
   18304:	str	r3, [sp, #192]	; 0xc0
   18308:	ldrd	r2, [sp, #192]	; 0xc0
   1830c:	orr	r3, r3, r1
   18310:	mov	r1, r3
   18314:	ldrb	r2, [r4, #12]
   18318:	mov	ip, #0
   1831c:	str	ip, [sp, #164]	; 0xa4
   18320:	lsl	r3, r2, #24
   18324:	str	r3, [sp, #160]	; 0xa0
   18328:	ldrd	r2, [sp, #160]	; 0xa0
   1832c:	orr	r3, r3, r1
   18330:	ldrb	r1, [r4, #11]
   18334:	str	r1, [sp, #140]	; 0x8c
   18338:	mov	r1, #0
   1833c:	str	r1, [sp, #136]	; 0x88
   18340:	ldrd	r0, [sp, #136]	; 0x88
   18344:	orr	r1, r1, r3
   18348:	mov	r3, r1
   1834c:	ldrb	r0, [r4, #10]
   18350:	lsl	r1, r0, #8
   18354:	str	r1, [sp, #116]	; 0x74
   18358:	mov	r1, #0
   1835c:	str	r1, [sp, #112]	; 0x70
   18360:	ldrd	r0, [sp, #112]	; 0x70
   18364:	orr	r1, r1, r3
   18368:	mov	r3, r1
   1836c:	ldrb	r0, [r4, #9]
   18370:	lsl	r1, r0, #16
   18374:	str	r1, [sp, #84]	; 0x54
   18378:	mov	r1, #0
   1837c:	str	r1, [sp, #80]	; 0x50
   18380:	ldrd	r0, [sp, #80]	; 0x50
   18384:	orr	r1, r1, r3
   18388:	mov	r3, r1
   1838c:	ldrb	r0, [r4, #8]
   18390:	lsl	r1, r0, #24
   18394:	str	r1, [sp, #68]	; 0x44
   18398:	mov	r1, #0
   1839c:	str	r1, [sp, #64]	; 0x40
   183a0:	ldrd	r0, [sp, #64]	; 0x40
   183a4:	orr	r1, r1, r3
   183a8:	mov	r3, r1
   183ac:	mov	r2, #0
   183b0:	bic	r3, r3, #255	; 0xff
   183b4:	add	r1, pc, #412	; 0x19c
   183b8:	ldrd	r0, [r1]
   183bc:	cmp	r3, r1
   183c0:	cmpeq	r2, r0
   183c4:	beq	18414 <_start@@Base+0x5d5c>
   183c8:	mov	r2, r5
   183cc:	mov	r1, r6
   183d0:	mov	r0, r7
   183d4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   183d8:	b	18578 <_start@@Base+0x5ec0>
   183dc:	mov	r1, #0
   183e0:	b	182f4 <_start@@Base+0x5c3c>
   183e4:	mov	r1, #0
   183e8:	b	18314 <_start@@Base+0x5c5c>
   183ec:	mov	r3, #0
   183f0:	b	18330 <_start@@Base+0x5c78>
   183f4:	mov	r3, #0
   183f8:	b	1834c <_start@@Base+0x5c94>
   183fc:	mov	r3, #0
   18400:	b	1836c <_start@@Base+0x5cb4>
   18404:	mov	r3, #0
   18408:	b	1838c <_start@@Base+0x5cd4>
   1840c:	mov	r3, #0
   18410:	b	183ac <_start@@Base+0x5cf4>
   18414:	mov	r3, #3
   18418:	mov	r2, r5
   1841c:	mov	r1, r6
   18420:	mov	r0, r7
   18424:	bl	1467c <_start@@Base+0x1fc4>
   18428:	mov	r4, r0
   1842c:	cmp	r6, r0
   18430:	beq	1853c <_start@@Base+0x5e84>
   18434:	mov	r1, #0
   18438:	add	r3, sp, #276	; 0x114
   1843c:	strh	r1, [r3]
   18440:	mov	r2, #0
   18444:	mov	r3, #0
   18448:	add	r0, sp, #288	; 0x120
   1844c:	strd	r2, [r0]
   18450:	str	r1, [sp, #284]	; 0x11c
   18454:	cmp	r5, r4
   18458:	beq	184dc <_start@@Base+0x5e24>
   1845c:	str	r0, [sp]
   18460:	add	r3, sp, #284	; 0x11c
   18464:	mov	r2, r5
   18468:	mov	r1, r4
   1846c:	mov	r0, r7
   18470:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   18474:	cmp	r4, r0
   18478:	beq	184dc <_start@@Base+0x5e24>
   1847c:	ldr	r3, [sp, #284]	; 0x11c
   18480:	cmp	r3, #0
   18484:	bne	184c0 <_start@@Base+0x5e08>
   18488:	add	r3, sp, #288	; 0x120
   1848c:	ldrd	r2, [r3]
   18490:	ldr	sl, [pc, #200]	; 18560 <_start@@Base+0x5ea8>
   18494:	mov	fp, #0
   18498:	cmp	r3, fp
   1849c:	cmpeq	r2, sl
   184a0:	addls	r1, sp, #276	; 0x114
   184a4:	strhls	r2, [r1]
   184a8:	bhi	18524 <_start@@Base+0x5e6c>
   184ac:	add	r3, sp, #276	; 0x114
   184b0:	ldrh	r3, [r3]
   184b4:	ldr	r2, [sp, #16]
   184b8:	strh	r3, [r2]
   184bc:	b	18578 <_start@@Base+0x5ec0>
   184c0:	mov	r3, #8
   184c4:	mov	r2, r5
   184c8:	mov	r1, r0
   184cc:	mov	r0, r7
   184d0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   184d4:	cmp	r4, r0
   184d8:	bne	184ac <_start@@Base+0x5df4>
   184dc:	add	r3, sp, #276	; 0x114
   184e0:	str	r3, [sp]
   184e4:	ldr	r3, [pc, #120]	; 18564 <_start@@Base+0x5eac>
   184e8:	mov	r2, r5
   184ec:	mov	r1, r4
   184f0:	mov	r0, r7
   184f4:	bl	155dc <_start@@Base+0x2f24>
   184f8:	cmp	r5, r0
   184fc:	cmpne	r4, r0
   18500:	bne	184ac <_start@@Base+0x5df4>
   18504:	mov	r6, r7
   18508:	mov	r3, #33	; 0x21
   1850c:	mov	r2, r5
   18510:	mov	r1, r0
   18514:	mov	r0, r7
   18518:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1851c:	mov	r4, r0
   18520:	b	187a8 <_start@@Base+0x60f0>
   18524:	mov	r3, #7
   18528:	mov	r2, r5
   1852c:	mov	r1, r0
   18530:	mov	r0, r7
   18534:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   18538:	b	184d4 <_start@@Base+0x5e1c>
   1853c:	mov	r2, r5
   18540:	mov	r1, r0
   18544:	mov	r0, r7
   18548:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1854c:	b	18578 <_start@@Base+0x5ec0>
   18550:	svcpl	0x006c656e
   18554:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   18558:	andeq	r0, r0, r0
   1855c:	ldrbvs	r6, [r4, -r0, lsl #16]!
   18560:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   18564:	andeq	lr, r3, r0, ror #1
   18568:	mov	r2, r5
   1856c:	mov	r1, r4
   18570:	mov	r0, r7
   18574:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   18578:	sub	r3, r5, r0
   1857c:	cmp	r3, #1
   18580:	ble	18594 <_start@@Base+0x5edc>
   18584:	ldrb	r3, [r0]
   18588:	cmp	r3, #32
   1858c:	bhi	185a4 <_start@@Base+0x5eec>
   18590:	beq	18668 <_start@@Base+0x5fb0>
   18594:	mov	r2, r5
   18598:	mov	r1, r0
   1859c:	mov	r0, r7
   185a0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   185a4:	cmp	r5, r0
   185a8:	moveq	r3, #0
   185ac:	streq	r3, [sp, #280]	; 0x118
   185b0:	moveq	r4, r0
   185b4:	beq	185f0 <_start@@Base+0x5f38>
   185b8:	ldrb	r3, [r0]
   185bc:	cmp	r3, #44	; 0x2c
   185c0:	beq	186c8 <_start@@Base+0x6010>
   185c4:	mov	r3, #0
   185c8:	str	r3, [sp, #280]	; 0x118
   185cc:	ldrb	r3, [r0]
   185d0:	cmp	r3, #125	; 0x7d
   185d4:	beq	1867c <_start@@Base+0x5fc4>
   185d8:	mov	r3, #10
   185dc:	mov	r2, r5
   185e0:	mov	r1, r0
   185e4:	mov	r0, r7
   185e8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   185ec:	mov	r4, r0
   185f0:	ldr	r3, [sp, #280]	; 0x118
   185f4:	cmp	r3, #0
   185f8:	beq	187a4 <_start@@Base+0x60ec>
   185fc:	cmp	r5, r4
   18600:	beq	1862c <_start@@Base+0x5f74>
   18604:	ldrb	r3, [r4]
   18608:	cmp	r3, #34	; 0x22
   1860c:	addeq	r4, r4, #1
   18610:	moveq	r3, #0
   18614:	streq	r3, [r7, #12]
   18618:	beq	1862c <_start@@Base+0x5f74>
   1861c:	cmp	r3, #46	; 0x2e
   18620:	movne	r3, #1
   18624:	strne	r3, [r7, #12]
   18628:	beq	180fc <_start@@Base+0x5a44>
   1862c:	sub	r3, r5, r4
   18630:	cmp	r3, #8
   18634:	movcs	r3, #8
   18638:	sub	r3, r3, #1
   1863c:	cmp	r3, #7
   18640:	ldrls	pc, [pc, r3, lsl #2]
   18644:	b	18568 <_start@@Base+0x5eb0>
   18648:			; <UNDEFINED> instruction: 0x000182bc
   1864c:			; <UNDEFINED> instruction: 0x000182b0
   18650:	andeq	r8, r1, r4, lsr #5
   18654:	muleq	r1, r8, r2
   18658:	andeq	r8, r1, ip, lsl #5
   1865c:	andeq	r8, r1, r0, lsl #5
   18660:	andeq	r8, r1, r4, lsr #2
   18664:	andeq	r8, r1, r8, lsl r1
   18668:	ldrb	r3, [r0, #1]
   1866c:	cmp	r3, #32
   18670:	addhi	r0, r0, #1
   18674:	bls	18594 <_start@@Base+0x5edc>
   18678:	b	185a4 <_start@@Base+0x5eec>
   1867c:	add	r4, r0, #1
   18680:	sub	r3, r5, r4
   18684:	cmp	r3, #1
   18688:	ble	1869c <_start@@Base+0x5fe4>
   1868c:	ldrb	r3, [r0, #1]
   18690:	cmp	r3, #32
   18694:	bhi	185f0 <_start@@Base+0x5f38>
   18698:	beq	186b4 <_start@@Base+0x5ffc>
   1869c:	mov	r2, r5
   186a0:	mov	r1, r4
   186a4:	mov	r0, r7
   186a8:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   186ac:	mov	r4, r0
   186b0:	b	185f0 <_start@@Base+0x5f38>
   186b4:	ldrb	r3, [r0, #2]
   186b8:	cmp	r3, #32
   186bc:	addhi	r4, r0, #2
   186c0:	bls	1869c <_start@@Base+0x5fe4>
   186c4:	b	185f0 <_start@@Base+0x5f38>
   186c8:	add	r4, r0, #1
   186cc:	sub	r3, r5, r4
   186d0:	cmp	r3, #1
   186d4:	ble	186e8 <_start@@Base+0x6030>
   186d8:	ldrb	r3, [r0, #1]
   186dc:	cmp	r3, #32
   186e0:	bhi	186fc <_start@@Base+0x6044>
   186e4:	beq	18758 <_start@@Base+0x60a0>
   186e8:	mov	r2, r5
   186ec:	mov	r1, r4
   186f0:	mov	r0, r7
   186f4:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   186f8:	mov	r4, r0
   186fc:	cmp	r5, r4
   18700:	beq	1876c <_start@@Base+0x60b4>
   18704:	ldrb	r3, [r4]
   18708:	cmp	r3, #125	; 0x7d
   1870c:	movne	r3, #1
   18710:	strne	r3, [sp, #280]	; 0x118
   18714:	bne	185f0 <_start@@Base+0x5f38>
   18718:	mov	r3, #0
   1871c:	str	r3, [sp, #280]	; 0x118
   18720:	add	r1, r4, #1
   18724:	sub	r3, r5, r1
   18728:	cmp	r3, #1
   1872c:	ble	18744 <_start@@Base+0x608c>
   18730:	ldrb	r3, [r4, #1]
   18734:	cmp	r3, #32
   18738:	movhi	r4, r1
   1873c:	bhi	185f0 <_start@@Base+0x5f38>
   18740:	beq	18790 <_start@@Base+0x60d8>
   18744:	mov	r2, r5
   18748:	mov	r0, r7
   1874c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   18750:	mov	r4, r0
   18754:	b	185f0 <_start@@Base+0x5f38>
   18758:	ldrb	r3, [r0, #2]
   1875c:	cmp	r3, #32
   18760:	addhi	r4, r0, #2
   18764:	bls	186e8 <_start@@Base+0x6030>
   18768:	b	186fc <_start@@Base+0x6044>
   1876c:	mov	r3, #0
   18770:	str	r3, [sp, #280]	; 0x118
   18774:	mov	r3, #10
   18778:	mov	r2, r5
   1877c:	mov	r1, r4
   18780:	mov	r0, r7
   18784:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   18788:	mov	r4, r0
   1878c:	b	185f0 <_start@@Base+0x5f38>
   18790:	ldrb	r3, [r4, #2]
   18794:	cmp	r3, #32
   18798:	addhi	r4, r4, #2
   1879c:	bls	18744 <_start@@Base+0x608c>
   187a0:	b	185f0 <_start@@Base+0x5f38>
   187a4:	mov	r6, r7
   187a8:	cmp	r5, r4
   187ac:	beq	187c8 <_start@@Base+0x6110>
   187b0:	ldr	r0, [r6]
   187b4:	bl	235b4 <flatcc_builder_end_struct@@Base>
   187b8:	ldr	r3, [sp, #336]	; 0x150
   187bc:	str	r0, [r3]
   187c0:	cmp	r0, #0
   187c4:	bne	18814 <_start@@Base+0x615c>
   187c8:	mov	r3, #33	; 0x21
   187cc:	mov	r2, r5
   187d0:	mov	r1, r4
   187d4:	mov	r0, r6
   187d8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   187dc:	mov	r4, r0
   187e0:	b	187f8 <_start@@Base+0x6140>
   187e4:	ldr	r3, [sp, #336]	; 0x150
   187e8:	mov	r2, r5
   187ec:	mov	r1, r4
   187f0:	bl	16f04 <_start@@Base+0x484c>
   187f4:	mov	r4, r0
   187f8:	ldr	r3, [r6, #24]
   187fc:	cmp	r3, #0
   18800:	bne	18814 <_start@@Base+0x615c>
   18804:	ldr	r3, [sp, #336]	; 0x150
   18808:	ldr	r3, [r3]
   1880c:	cmp	r3, #0
   18810:	beq	18868 <_start@@Base+0x61b0>
   18814:	mov	r0, r4
   18818:	add	sp, sp, #300	; 0x12c
   1881c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18820:	ldr	r3, [sp, #336]	; 0x150
   18824:	mov	r2, r5
   18828:	mov	r1, r4
   1882c:	bl	16f04 <_start@@Base+0x484c>
   18830:	mov	r4, r0
   18834:	b	187f8 <_start@@Base+0x6140>
   18838:	ldr	r3, [sp, #336]	; 0x150
   1883c:	mov	r2, r5
   18840:	mov	r1, r4
   18844:	bl	2a214 <flatcc_json_parser_build_string@@Base>
   18848:	mov	r4, r0
   1884c:	b	187f8 <_start@@Base+0x6140>
   18850:	mov	r2, r5
   18854:	mov	r1, r4
   18858:	mov	r0, r6
   1885c:	bl	28f68 <flatcc_json_parser_generic_json@@Base>
   18860:	mov	r4, r0
   18864:	b	18814 <_start@@Base+0x615c>
   18868:	mov	r3, #33	; 0x21
   1886c:	mov	r2, r5
   18870:	mov	r1, r4
   18874:	mov	r0, r6
   18878:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1887c:	mov	r4, r0
   18880:	b	18814 <_start@@Base+0x615c>
   18884:	push	{r4, r5, r6, lr}
   18888:	mov	r5, r0
   1888c:	mov	r4, r2
   18890:	mov	r6, r3
   18894:	sub	r3, r2, r1
   18898:	cmp	r3, #1
   1889c:	ble	188b0 <_start@@Base+0x61f8>
   188a0:	ldrb	r3, [r1]
   188a4:	cmp	r3, #32
   188a8:	bhi	188c0 <_start@@Base+0x6208>
   188ac:	beq	188fc <_start@@Base+0x6244>
   188b0:	mov	r2, r4
   188b4:	mov	r0, r5
   188b8:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   188bc:	mov	r1, r0
   188c0:	cmp	r4, r1
   188c4:	beq	18910 <_start@@Base+0x6258>
   188c8:	ldrb	r3, [r1]
   188cc:	cmp	r3, #44	; 0x2c
   188d0:	beq	18968 <_start@@Base+0x62b0>
   188d4:	mov	r3, #0
   188d8:	str	r3, [r6]
   188dc:	ldrb	r3, [r1]
   188e0:	cmp	r3, #93	; 0x5d
   188e4:	beq	18920 <_start@@Base+0x6268>
   188e8:	mov	r3, #9
   188ec:	mov	r2, r4
   188f0:	mov	r0, r5
   188f4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   188f8:	pop	{r4, r5, r6, pc}
   188fc:	ldrb	r3, [r1, #1]
   18900:	cmp	r3, #32
   18904:	addhi	r1, r1, #1
   18908:	bls	188b0 <_start@@Base+0x61f8>
   1890c:	b	188c0 <_start@@Base+0x6208>
   18910:	mov	r3, #0
   18914:	str	r3, [r6]
   18918:	mov	r0, r1
   1891c:	pop	{r4, r5, r6, pc}
   18920:	add	r0, r1, #1
   18924:	sub	r3, r4, r0
   18928:	cmp	r3, #1
   1892c:	ble	18940 <_start@@Base+0x6288>
   18930:	ldrb	r3, [r1, #1]
   18934:	cmp	r3, #32
   18938:	pophi	{r4, r5, r6, pc}
   1893c:	beq	18954 <_start@@Base+0x629c>
   18940:	mov	r2, r4
   18944:	mov	r1, r0
   18948:	mov	r0, r5
   1894c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   18950:	pop	{r4, r5, r6, pc}
   18954:	ldrb	r3, [r1, #2]
   18958:	cmp	r3, #32
   1895c:	bls	18940 <_start@@Base+0x6288>
   18960:	add	r0, r1, #2
   18964:	pop	{r4, r5, r6, pc}
   18968:	add	r0, r1, #1
   1896c:	sub	r3, r4, r0
   18970:	cmp	r3, #1
   18974:	ble	18988 <_start@@Base+0x62d0>
   18978:	ldrb	r3, [r1, #1]
   1897c:	cmp	r3, #32
   18980:	bhi	18998 <_start@@Base+0x62e0>
   18984:	beq	189b8 <_start@@Base+0x6300>
   18988:	mov	r2, r4
   1898c:	mov	r1, r0
   18990:	mov	r0, r5
   18994:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   18998:	cmp	r4, r0
   1899c:	beq	189cc <_start@@Base+0x6314>
   189a0:	ldrb	r3, [r0]
   189a4:	cmp	r3, #93	; 0x5d
   189a8:	beq	189ec <_start@@Base+0x6334>
   189ac:	mov	r3, #1
   189b0:	str	r3, [r6]
   189b4:	pop	{r4, r5, r6, pc}
   189b8:	ldrb	r3, [r1, #2]
   189bc:	cmp	r3, #32
   189c0:	addhi	r0, r1, #2
   189c4:	bls	18988 <_start@@Base+0x62d0>
   189c8:	b	18998 <_start@@Base+0x62e0>
   189cc:	mov	r3, #0
   189d0:	str	r3, [r6]
   189d4:	mov	r3, #9
   189d8:	mov	r2, r4
   189dc:	mov	r1, r0
   189e0:	mov	r0, r5
   189e4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   189e8:	pop	{r4, r5, r6, pc}
   189ec:	mov	r3, #0
   189f0:	str	r3, [r6]
   189f4:	mov	r2, r4
   189f8:	add	r1, r0, #1
   189fc:	mov	r0, r5
   18a00:	bl	1447c <_start@@Base+0x1dc4>
   18a04:	pop	{r4, r5, r6, pc}
   18a08:	push	{r4, r5, r6, lr}
   18a0c:	mov	r5, r0
   18a10:	mov	r4, r2
   18a14:	mov	r6, r3
   18a18:	sub	r3, r2, r1
   18a1c:	cmp	r3, #1
   18a20:	ble	18a34 <_start@@Base+0x637c>
   18a24:	ldrb	r3, [r1]
   18a28:	cmp	r3, #32
   18a2c:	bhi	18a44 <_start@@Base+0x638c>
   18a30:	beq	18a80 <_start@@Base+0x63c8>
   18a34:	mov	r2, r4
   18a38:	mov	r0, r5
   18a3c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   18a40:	mov	r1, r0
   18a44:	cmp	r4, r1
   18a48:	beq	18a94 <_start@@Base+0x63dc>
   18a4c:	ldrb	r3, [r1]
   18a50:	cmp	r3, #44	; 0x2c
   18a54:	beq	18aec <_start@@Base+0x6434>
   18a58:	mov	r3, #0
   18a5c:	str	r3, [r6]
   18a60:	ldrb	r3, [r1]
   18a64:	cmp	r3, #125	; 0x7d
   18a68:	beq	18aa4 <_start@@Base+0x63ec>
   18a6c:	mov	r3, #10
   18a70:	mov	r2, r4
   18a74:	mov	r0, r5
   18a78:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   18a7c:	pop	{r4, r5, r6, pc}
   18a80:	ldrb	r3, [r1, #1]
   18a84:	cmp	r3, #32
   18a88:	addhi	r1, r1, #1
   18a8c:	bls	18a34 <_start@@Base+0x637c>
   18a90:	b	18a44 <_start@@Base+0x638c>
   18a94:	mov	r3, #0
   18a98:	str	r3, [r6]
   18a9c:	mov	r0, r1
   18aa0:	pop	{r4, r5, r6, pc}
   18aa4:	add	r0, r1, #1
   18aa8:	sub	r3, r4, r0
   18aac:	cmp	r3, #1
   18ab0:	ble	18ac4 <_start@@Base+0x640c>
   18ab4:	ldrb	r3, [r1, #1]
   18ab8:	cmp	r3, #32
   18abc:	pophi	{r4, r5, r6, pc}
   18ac0:	beq	18ad8 <_start@@Base+0x6420>
   18ac4:	mov	r2, r4
   18ac8:	mov	r1, r0
   18acc:	mov	r0, r5
   18ad0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   18ad4:	pop	{r4, r5, r6, pc}
   18ad8:	ldrb	r3, [r1, #2]
   18adc:	cmp	r3, #32
   18ae0:	bls	18ac4 <_start@@Base+0x640c>
   18ae4:	add	r0, r1, #2
   18ae8:	pop	{r4, r5, r6, pc}
   18aec:	add	r0, r1, #1
   18af0:	sub	r3, r4, r0
   18af4:	cmp	r3, #1
   18af8:	ble	18b0c <_start@@Base+0x6454>
   18afc:	ldrb	r3, [r1, #1]
   18b00:	cmp	r3, #32
   18b04:	bhi	18b1c <_start@@Base+0x6464>
   18b08:	beq	18b3c <_start@@Base+0x6484>
   18b0c:	mov	r2, r4
   18b10:	mov	r1, r0
   18b14:	mov	r0, r5
   18b18:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   18b1c:	cmp	r4, r0
   18b20:	beq	18b50 <_start@@Base+0x6498>
   18b24:	ldrb	r3, [r0]
   18b28:	cmp	r3, #125	; 0x7d
   18b2c:	beq	18b70 <_start@@Base+0x64b8>
   18b30:	mov	r3, #1
   18b34:	str	r3, [r6]
   18b38:	pop	{r4, r5, r6, pc}
   18b3c:	ldrb	r3, [r1, #2]
   18b40:	cmp	r3, #32
   18b44:	addhi	r0, r1, #2
   18b48:	bls	18b0c <_start@@Base+0x6454>
   18b4c:	b	18b1c <_start@@Base+0x6464>
   18b50:	mov	r3, #0
   18b54:	str	r3, [r6]
   18b58:	mov	r3, #10
   18b5c:	mov	r2, r4
   18b60:	mov	r1, r0
   18b64:	mov	r0, r5
   18b68:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   18b6c:	pop	{r4, r5, r6, pc}
   18b70:	mov	r3, #0
   18b74:	str	r3, [r6]
   18b78:	mov	r2, r4
   18b7c:	add	r1, r0, #1
   18b80:	mov	r0, r5
   18b84:	bl	1447c <_start@@Base+0x1dc4>
   18b88:	pop	{r4, r5, r6, pc}
   18b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b90:	vpush	{d8-d9}
   18b94:	sub	sp, sp, #308	; 0x134
   18b98:	mov	fp, r0
   18b9c:	mov	r9, r1
   18ba0:	mov	sl, r2
   18ba4:	mov	r2, r3
   18ba8:	str	r3, [sp, #188]	; 0xbc
   18bac:	mov	r3, #0
   18bb0:	str	r3, [r2]
   18bb4:	mov	r1, #36	; 0x24
   18bb8:	ldr	r0, [r0]
   18bbc:	bl	24144 <flatcc_builder_start_table@@Base>
   18bc0:	cmp	r0, #0
   18bc4:	bne	1dad4 <_start@@Base+0xb41c>
   18bc8:	add	r3, sp, #292	; 0x124
   18bcc:	str	r3, [sp]
   18bd0:	mov	r3, #1
   18bd4:	mov	r2, sl
   18bd8:	mov	r1, r9
   18bdc:	mov	r0, fp
   18be0:	bl	2a3ac <flatcc_json_parser_prepare_unions@@Base>
   18be4:	cmp	sl, r0
   18be8:	beq	1dad4 <_start@@Base+0xb41c>
   18bec:	add	r3, sp, #300	; 0x12c
   18bf0:	mov	r2, sl
   18bf4:	mov	r1, r9
   18bf8:	mov	r0, fp
   18bfc:	bl	15d2c <_start@@Base+0x3674>
   18c00:	mov	r9, r0
   18c04:	ldr	r3, [sp, #300]	; 0x12c
   18c08:	cmp	r3, #0
   18c0c:	beq	1dac8 <_start@@Base+0xb410>
   18c10:	ldr	r3, [pc, #1564]	; 19234 <_start@@Base+0x6b7c>
   18c14:	add	r3, r3, #452	; 0x1c4
   18c18:	str	r3, [sp, #256]	; 0x100
   18c1c:	mov	r8, fp
   18c20:	b	1c950 <_start@@Base+0xa298>
   18c24:	mov	r3, #5
   18c28:	mov	r2, sl
   18c2c:	mov	r1, r9
   18c30:	mov	r0, r8
   18c34:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   18c38:	mov	r9, r0
   18c3c:	b	1c980 <_start@@Base+0xa2c8>
   18c40:	mov	r3, #5
   18c44:	mov	r2, sl
   18c48:	mov	r1, r9
   18c4c:	mov	r0, r8
   18c50:	bl	1467c <_start@@Base+0x1fc4>
   18c54:	mov	r1, r0
   18c58:	cmp	r0, r9
   18c5c:	beq	18ca0 <_start@@Base+0x65e8>
   18c60:	add	r3, sp, #296	; 0x128
   18c64:	mov	r2, sl
   18c68:	mov	r0, r8
   18c6c:	bl	18b8c <_start@@Base+0x64d4>
   18c70:	mov	r9, r0
   18c74:	ldr	r3, [sp, #296]	; 0x128
   18c78:	cmp	r3, #0
   18c7c:	beq	1db8c <_start@@Base+0xb4d4>
   18c80:	mov	r1, #12
   18c84:	ldr	r0, [r8]
   18c88:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   18c8c:	cmp	r0, #0
   18c90:	beq	1db94 <_start@@Base+0xb4dc>
   18c94:	ldr	r3, [sp, #296]	; 0x128
   18c98:	str	r3, [r0]
   18c9c:	b	1c92c <_start@@Base+0xa274>
   18ca0:	mov	r2, sl
   18ca4:	mov	r0, r8
   18ca8:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   18cac:	mov	r9, r0
   18cb0:	b	1c92c <_start@@Base+0xa274>
   18cb4:	mov	r3, #5
   18cb8:	mov	r2, sl
   18cbc:	mov	r1, r9
   18cc0:	mov	r0, r8
   18cc4:	bl	1467c <_start@@Base+0x1fc4>
   18cc8:	mov	r4, r0
   18ccc:	cmp	r0, r9
   18cd0:	beq	18e14 <_start@@Base+0x675c>
   18cd4:	mov	r3, #0
   18cd8:	strb	r3, [sp, #272]	; 0x110
   18cdc:	mov	r0, #0
   18ce0:	mov	r1, #0
   18ce4:	add	r2, sp, #280	; 0x118
   18ce8:	strd	r0, [r2]
   18cec:	str	r3, [sp, #276]	; 0x114
   18cf0:	cmp	sl, r4
   18cf4:	beq	18d64 <_start@@Base+0x66ac>
   18cf8:	str	r2, [sp]
   18cfc:	add	r3, sp, #276	; 0x114
   18d00:	mov	r2, sl
   18d04:	mov	r1, r4
   18d08:	mov	r0, r8
   18d0c:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   18d10:	mov	r9, r0
   18d14:	cmp	r4, r0
   18d18:	beq	18d64 <_start@@Base+0x66ac>
   18d1c:	add	r3, sp, #280	; 0x118
   18d20:	ldrd	r2, [r3]
   18d24:	ldr	r1, [sp, #276]	; 0x114
   18d28:	cmp	r1, #0
   18d2c:	beq	18d9c <_start@@Base+0x66e4>
   18d30:	cmp	r3, #0
   18d34:	cmpeq	r2, #128	; 0x80
   18d38:	rsbls	r2, r2, #0
   18d3c:	strbls	r2, [sp, #272]	; 0x110
   18d40:	bls	18dac <_start@@Base+0x66f4>
   18d44:	mov	r3, #8
   18d48:	mov	r2, sl
   18d4c:	mov	r1, r0
   18d50:	mov	r0, r8
   18d54:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   18d58:	mov	r9, r0
   18d5c:	cmp	r4, r9
   18d60:	bne	18dac <_start@@Base+0x66f4>
   18d64:	add	r3, sp, #272	; 0x110
   18d68:	str	r3, [sp]
   18d6c:	ldr	r3, [pc, #1216]	; 19234 <_start@@Base+0x6b7c>
   18d70:	add	r3, r3, #116	; 0x74
   18d74:	mov	r2, sl
   18d78:	mov	r1, r4
   18d7c:	mov	r0, r8
   18d80:	bl	14f34 <_start@@Base+0x287c>
   18d84:	mov	r9, r0
   18d88:	cmp	sl, r0
   18d8c:	cmpne	r4, r0
   18d90:	bne	18dac <_start@@Base+0x66f4>
   18d94:	mov	fp, r8
   18d98:	b	1dad4 <_start@@Base+0xb41c>
   18d9c:	cmp	r3, #0
   18da0:	cmpeq	r2, #127	; 0x7f
   18da4:	strbls	r2, [sp, #272]	; 0x110
   18da8:	bhi	18de8 <_start@@Base+0x6730>
   18dac:	add	r3, sp, #272	; 0x110
   18db0:	ldrsb	r3, [r3]
   18db4:	cmp	r3, #8
   18db8:	beq	18e04 <_start@@Base+0x674c>
   18dbc:	mov	r3, #1
   18dc0:	mov	r2, r3
   18dc4:	mov	r1, #6
   18dc8:	ldr	r0, [r8]
   18dcc:	bl	25b40 <flatcc_builder_table_add@@Base>
   18dd0:	cmp	r0, #0
   18dd4:	beq	1db9c <_start@@Base+0xb4e4>
   18dd8:	add	r3, sp, #272	; 0x110
   18ddc:	ldrsb	r3, [r3]
   18de0:	strb	r3, [r0]
   18de4:	b	1c92c <_start@@Base+0xa274>
   18de8:	mov	r3, #7
   18dec:	mov	r2, sl
   18df0:	mov	r1, r0
   18df4:	mov	r0, r8
   18df8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   18dfc:	mov	r9, r0
   18e00:	b	18d5c <_start@@Base+0x66a4>
   18e04:	ldr	r3, [r8, #8]
   18e08:	tst	r3, #2
   18e0c:	beq	1c92c <_start@@Base+0xa274>
   18e10:	b	18dbc <_start@@Base+0x6704>
   18e14:	mov	r2, sl
   18e18:	mov	r1, r0
   18e1c:	mov	r0, r8
   18e20:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   18e24:	mov	r9, r0
   18e28:	b	1c92c <_start@@Base+0xa274>
   18e2c:	mvn	r2, #0
   18e30:	ldr	r3, [pc, #1008]	; 19228 <_start@@Base+0x6b70>
   18e34:	cmp	r1, r3
   18e38:	cmpeq	r0, r2
   18e3c:	bhi	18fc4 <_start@@Base+0x690c>
   18e40:	mov	r4, #0
   18e44:	add	r3, pc, #956	; 0x3bc
   18e48:	ldrd	r2, [r3]
   18e4c:	cmp	r1, r3
   18e50:	cmpeq	r4, r2
   18e54:	beq	18e70 <_start@@Base+0x67b8>
   18e58:	mov	r2, sl
   18e5c:	mov	r1, r9
   18e60:	mov	r0, r8
   18e64:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   18e68:	mov	r9, r0
   18e6c:	b	1c92c <_start@@Base+0xa274>
   18e70:	mov	r3, #4
   18e74:	mov	r2, sl
   18e78:	mov	r1, r9
   18e7c:	mov	r0, r8
   18e80:	bl	1467c <_start@@Base+0x1fc4>
   18e84:	mov	r4, r0
   18e88:	cmp	r0, r9
   18e8c:	beq	18fac <_start@@Base+0x68f4>
   18e90:	mvn	r3, #0
   18e94:	mov	r2, #1
   18e98:	mov	r1, r2
   18e9c:	ldr	r0, [r8]
   18ea0:	bl	23e94 <flatcc_builder_start_vector@@Base>
   18ea4:	cmp	r0, #0
   18ea8:	bne	1db5c <_start@@Base+0xb4a4>
   18eac:	add	r3, sp, #300	; 0x12c
   18eb0:	mov	r2, sl
   18eb4:	mov	r1, r4
   18eb8:	mov	r0, r8
   18ebc:	bl	15c6c <_start@@Base+0x35b4>
   18ec0:	mov	r9, r0
   18ec4:	ldr	r3, [sp, #300]	; 0x12c
   18ec8:	cmp	r3, #0
   18ecc:	beq	18f78 <_start@@Base+0x68c0>
   18ed0:	mov	r7, #0
   18ed4:	mov	r6, #1
   18ed8:	add	r5, sp, #280	; 0x118
   18edc:	ldr	r3, [pc, #848]	; 19234 <_start@@Base+0x6b7c>
   18ee0:	add	fp, r3, #132	; 0x84
   18ee4:	b	18f14 <_start@@Base+0x685c>
   18ee8:	ldrb	r3, [sp, #280]	; 0x118
   18eec:	strb	r3, [r4]
   18ef0:	add	r3, sp, #300	; 0x12c
   18ef4:	mov	r2, sl
   18ef8:	mov	r1, r0
   18efc:	mov	r0, r8
   18f00:	bl	18884 <_start@@Base+0x61cc>
   18f04:	mov	r9, r0
   18f08:	ldr	r3, [sp, #300]	; 0x12c
   18f0c:	cmp	r3, #0
   18f10:	beq	18f78 <_start@@Base+0x68c0>
   18f14:	strb	r7, [sp, #280]	; 0x118
   18f18:	mov	r1, r6
   18f1c:	ldr	r0, [r8]
   18f20:	bl	2368c <flatcc_builder_extend_vector@@Base>
   18f24:	subs	r4, r0, #0
   18f28:	beq	1dba4 <_start@@Base+0xb4ec>
   18f2c:	mov	r3, r5
   18f30:	mov	r2, sl
   18f34:	mov	r1, r9
   18f38:	mov	r0, r8
   18f3c:	bl	14308 <_start@@Base+0x1c50>
   18f40:	cmp	r0, r9
   18f44:	bne	18ee8 <_start@@Base+0x6830>
   18f48:	str	r5, [sp]
   18f4c:	mov	r3, fp
   18f50:	mov	r2, sl
   18f54:	mov	r1, r9
   18f58:	mov	r0, r8
   18f5c:	bl	14d18 <_start@@Base+0x2660>
   18f60:	cmp	sl, r0
   18f64:	cmpne	r0, r9
   18f68:	bne	18ee8 <_start@@Base+0x6830>
   18f6c:	mov	fp, r8
   18f70:	mov	r9, r0
   18f74:	b	1dad4 <_start@@Base+0xb41c>
   18f78:	ldr	r0, [r8]
   18f7c:	bl	24ea4 <flatcc_builder_end_vector@@Base>
   18f80:	str	r0, [sp, #296]	; 0x128
   18f84:	cmp	r0, #0
   18f88:	beq	1dbac <_start@@Base+0xb4f4>
   18f8c:	mov	r1, #30
   18f90:	ldr	r0, [r8]
   18f94:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   18f98:	cmp	r0, #0
   18f9c:	beq	1dbb4 <_start@@Base+0xb4fc>
   18fa0:	ldr	r3, [sp, #296]	; 0x128
   18fa4:	str	r3, [r0]
   18fa8:	b	1c92c <_start@@Base+0xa274>
   18fac:	mov	r2, sl
   18fb0:	mov	r1, r0
   18fb4:	mov	r0, r8
   18fb8:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   18fbc:	mov	r9, r0
   18fc0:	b	1c92c <_start@@Base+0xa274>
   18fc4:	add	r3, pc, #580	; 0x244
   18fc8:	ldrd	r2, [r3]
   18fcc:	cmp	r1, r3
   18fd0:	cmpeq	r0, r2
   18fd4:	bhi	1910c <_start@@Base+0x6a54>
   18fd8:	mov	r2, #0
   18fdc:	ldr	r3, [pc, #584]	; 1922c <_start@@Base+0x6b74>
   18fe0:	and	r4, r4, r2
   18fe4:	and	r5, r5, r3
   18fe8:	mov	r2, #0
   18fec:	ldr	r3, [pc, #572]	; 19230 <_start@@Base+0x6b78>
   18ff0:	cmp	r5, r3
   18ff4:	cmpeq	r4, r2
   18ff8:	beq	19014 <_start@@Base+0x695c>
   18ffc:	mov	r2, sl
   19000:	mov	r1, r9
   19004:	mov	r0, r8
   19008:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1900c:	mov	r9, r0
   19010:	b	1c92c <_start@@Base+0xa274>
   19014:	mov	r3, #2
   19018:	mov	r2, sl
   1901c:	mov	r1, r9
   19020:	mov	r0, r8
   19024:	bl	1467c <_start@@Base+0x1fc4>
   19028:	mov	r4, r0
   1902c:	cmp	r0, r9
   19030:	beq	190f4 <_start@@Base+0x6a3c>
   19034:	add	r3, sp, #304	; 0x130
   19038:	mov	r2, #0
   1903c:	strh	r2, [r3, #-24]!	; 0xffffffe8
   19040:	mov	r2, sl
   19044:	mov	r1, r0
   19048:	mov	r0, r8
   1904c:	bl	14038 <_start@@Base+0x1980>
   19050:	mov	r9, r0
   19054:	cmp	r4, r0
   19058:	beq	19098 <_start@@Base+0x69e0>
   1905c:	add	r3, sp, #280	; 0x118
   19060:	ldrsh	r3, [r3]
   19064:	cmp	r3, #100	; 0x64
   19068:	beq	190cc <_start@@Base+0x6a14>
   1906c:	mov	r3, #2
   19070:	mov	r2, r3
   19074:	mov	r1, r3
   19078:	ldr	r0, [r8]
   1907c:	bl	25b40 <flatcc_builder_table_add@@Base>
   19080:	cmp	r0, #0
   19084:	beq	190dc <_start@@Base+0x6a24>
   19088:	add	r3, sp, #280	; 0x118
   1908c:	ldrsh	r3, [r3]
   19090:	strh	r3, [r0]
   19094:	b	1c92c <_start@@Base+0xa274>
   19098:	add	r3, sp, #280	; 0x118
   1909c:	str	r3, [sp]
   190a0:	ldr	r3, [pc, #396]	; 19234 <_start@@Base+0x6b7c>
   190a4:	add	r3, r3, #144	; 0x90
   190a8:	mov	r2, sl
   190ac:	mov	r1, r0
   190b0:	mov	r0, r8
   190b4:	bl	1539c <_start@@Base+0x2ce4>
   190b8:	cmp	sl, r0
   190bc:	cmpne	r9, r0
   190c0:	beq	190ec <_start@@Base+0x6a34>
   190c4:	mov	r9, r0
   190c8:	b	1905c <_start@@Base+0x69a4>
   190cc:	ldr	r3, [r8, #8]
   190d0:	tst	r3, #2
   190d4:	beq	1c92c <_start@@Base+0xa274>
   190d8:	b	1906c <_start@@Base+0x69b4>
   190dc:	mov	fp, r8
   190e0:	mov	r0, r9
   190e4:	mov	r9, r0
   190e8:	b	1dad4 <_start@@Base+0xb41c>
   190ec:	mov	fp, r8
   190f0:	b	190e4 <_start@@Base+0x6a2c>
   190f4:	mov	r2, sl
   190f8:	mov	r1, r0
   190fc:	mov	r0, r8
   19100:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19104:	mov	r9, r0
   19108:	b	1c92c <_start@@Base+0xa274>
   1910c:	add	r3, pc, #260	; 0x104
   19110:	ldrd	r2, [r3]
   19114:	cmp	r1, r3
   19118:	cmpeq	r0, r2
   1911c:	beq	19150 <_start@@Base+0x6a98>
   19120:	mov	r4, #0
   19124:	add	r3, pc, #244	; 0xf4
   19128:	ldrd	r2, [r3]
   1912c:	cmp	r1, r3
   19130:	cmpeq	r4, r2
   19134:	beq	19314 <_start@@Base+0x6c5c>
   19138:	mov	r2, sl
   1913c:	mov	r1, r9
   19140:	mov	r0, r8
   19144:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19148:	mov	r9, r0
   1914c:	b	1c92c <_start@@Base+0xa274>
   19150:	add	r4, r9, #8
   19154:	mov	r1, sl
   19158:	mov	r0, r4
   1915c:	bl	127e0 <_start@@Base+0x128>
   19160:	mov	r0, #0
   19164:	and	r1, r1, #-16777216	; 0xff000000
   19168:	cmp	r1, #2030043136	; 0x79000000
   1916c:	cmpeq	r0, #0
   19170:	beq	1918c <_start@@Base+0x6ad4>
   19174:	mov	r2, sl
   19178:	mov	r1, r4
   1917c:	mov	r0, r8
   19180:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19184:	mov	r9, r0
   19188:	b	1c92c <_start@@Base+0xa274>
   1918c:	mov	r3, #1
   19190:	mov	r2, sl
   19194:	mov	r1, r4
   19198:	mov	r0, r8
   1919c:	bl	1467c <_start@@Base+0x1fc4>
   191a0:	mov	r9, r0
   191a4:	cmp	r4, r0
   191a8:	beq	192fc <_start@@Base+0x6c44>
   191ac:	mvn	r3, #0
   191b0:	mov	r2, #1
   191b4:	mov	r1, r2
   191b8:	ldr	r0, [r8]
   191bc:	bl	23e94 <flatcc_builder_start_vector@@Base>
   191c0:	cmp	r0, #0
   191c4:	bne	1dbbc <_start@@Base+0xb504>
   191c8:	add	r3, sp, #300	; 0x12c
   191cc:	mov	r2, sl
   191d0:	mov	r1, r9
   191d4:	mov	r0, r8
   191d8:	bl	15c6c <_start@@Base+0x35b4>
   191dc:	mov	r9, r0
   191e0:	ldr	r3, [sp, #300]	; 0x12c
   191e4:	cmp	r3, #0
   191e8:	beq	192c8 <_start@@Base+0x6c10>
   191ec:	mov	r5, #0
   191f0:	mov	r7, #1
   191f4:	add	r6, sp, #280	; 0x118
   191f8:	ldr	r3, [pc, #52]	; 19234 <_start@@Base+0x6b7c>
   191fc:	add	fp, r3, #156	; 0x9c
   19200:	b	19264 <_start@@Base+0x6bac>
   19204:	nop			; (mov r0, r0)
   19208:	andeq	r0, r0, r0
   1920c:			; <UNDEFINED> instruction: 0x666c6578
   19210:	mrcvs	15, 3, r6, cr4, cr1, {3}
   19214:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   19218:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1921c:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   19220:	andeq	r0, r0, r0
   19224:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   19228:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   1922c:			; <UNDEFINED> instruction: 0xffff0000
   19230:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   19234:	andeq	lr, r3, r8, ror r0
   19238:	ldrb	r3, [sp, #280]	; 0x118
   1923c:	strb	r3, [r4]
   19240:	add	r3, sp, #300	; 0x12c
   19244:	mov	r2, sl
   19248:	mov	r1, r0
   1924c:	mov	r0, r8
   19250:	bl	18884 <_start@@Base+0x61cc>
   19254:	mov	r9, r0
   19258:	ldr	r3, [sp, #300]	; 0x12c
   1925c:	cmp	r3, #0
   19260:	beq	192c8 <_start@@Base+0x6c10>
   19264:	strb	r5, [sp, #280]	; 0x118
   19268:	mov	r1, r7
   1926c:	ldr	r0, [r8]
   19270:	bl	2368c <flatcc_builder_extend_vector@@Base>
   19274:	subs	r4, r0, #0
   19278:	beq	1dbc4 <_start@@Base+0xb50c>
   1927c:	mov	r3, r6
   19280:	mov	r2, sl
   19284:	mov	r1, r9
   19288:	mov	r0, r8
   1928c:	bl	14308 <_start@@Base+0x1c50>
   19290:	cmp	r0, r9
   19294:	bne	19238 <_start@@Base+0x6b80>
   19298:	str	r6, [sp]
   1929c:	mov	r3, fp
   192a0:	mov	r2, sl
   192a4:	mov	r1, r9
   192a8:	mov	r0, r8
   192ac:	bl	14d18 <_start@@Base+0x2660>
   192b0:	cmp	sl, r0
   192b4:	cmpne	r0, r9
   192b8:	bne	19238 <_start@@Base+0x6b80>
   192bc:	mov	fp, r8
   192c0:	mov	r9, r0
   192c4:	b	1dad4 <_start@@Base+0xb41c>
   192c8:	ldr	r0, [r8]
   192cc:	bl	24ea4 <flatcc_builder_end_vector@@Base>
   192d0:	str	r0, [sp, #296]	; 0x128
   192d4:	cmp	r0, #0
   192d8:	beq	1dbcc <_start@@Base+0xb514>
   192dc:	mov	r1, #5
   192e0:	ldr	r0, [r8]
   192e4:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   192e8:	cmp	r0, #0
   192ec:	beq	1dbd4 <_start@@Base+0xb51c>
   192f0:	ldr	r3, [sp, #296]	; 0x128
   192f4:	str	r3, [r0]
   192f8:	b	1c92c <_start@@Base+0xa274>
   192fc:	mov	r2, sl
   19300:	mov	r1, r0
   19304:	mov	r0, r8
   19308:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1930c:	mov	r9, r0
   19310:	b	1c92c <_start@@Base+0xa274>
   19314:	mov	r3, #4
   19318:	mov	r2, sl
   1931c:	mov	r1, r9
   19320:	mov	r0, r8
   19324:	bl	1467c <_start@@Base+0x1fc4>
   19328:	mov	r4, r0
   1932c:	cmp	r0, r9
   19330:	beq	193f4 <_start@@Base+0x6d3c>
   19334:	add	r3, sp, #304	; 0x130
   19338:	mov	r2, #0
   1933c:	strh	r2, [r3, #-24]!	; 0xffffffe8
   19340:	mov	r2, sl
   19344:	mov	r1, r0
   19348:	mov	r0, r8
   1934c:	bl	14038 <_start@@Base+0x1980>
   19350:	mov	r9, r0
   19354:	cmp	r4, r0
   19358:	beq	19398 <_start@@Base+0x6ce0>
   1935c:	add	r3, sp, #280	; 0x118
   19360:	ldrsh	r3, [r3]
   19364:	cmp	r3, #150	; 0x96
   19368:	beq	193cc <_start@@Base+0x6d14>
   1936c:	mov	r3, #2
   19370:	mov	r2, r3
   19374:	mov	r1, #1
   19378:	ldr	r0, [r8]
   1937c:	bl	25b40 <flatcc_builder_table_add@@Base>
   19380:	cmp	r0, #0
   19384:	beq	193dc <_start@@Base+0x6d24>
   19388:	add	r3, sp, #280	; 0x118
   1938c:	ldrsh	r3, [r3]
   19390:	strh	r3, [r0]
   19394:	b	1c92c <_start@@Base+0xa274>
   19398:	add	r3, sp, #280	; 0x118
   1939c:	str	r3, [sp]
   193a0:	ldr	r3, [pc, #-372]	; 19234 <_start@@Base+0x6b7c>
   193a4:	add	r3, r3, #168	; 0xa8
   193a8:	mov	r2, sl
   193ac:	mov	r1, r0
   193b0:	mov	r0, r8
   193b4:	bl	1539c <_start@@Base+0x2ce4>
   193b8:	cmp	sl, r0
   193bc:	cmpne	r9, r0
   193c0:	beq	193ec <_start@@Base+0x6d34>
   193c4:	mov	r9, r0
   193c8:	b	1935c <_start@@Base+0x6ca4>
   193cc:	ldr	r3, [r8, #8]
   193d0:	tst	r3, #2
   193d4:	beq	1c92c <_start@@Base+0xa274>
   193d8:	b	1936c <_start@@Base+0x6cb4>
   193dc:	mov	fp, r8
   193e0:	mov	r0, r9
   193e4:	mov	r9, r0
   193e8:	b	1dad4 <_start@@Base+0xb41c>
   193ec:	mov	fp, r8
   193f0:	b	193e4 <_start@@Base+0x6d2c>
   193f4:	mov	r2, sl
   193f8:	mov	r1, r0
   193fc:	mov	r0, r8
   19400:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19404:	mov	r9, r0
   19408:	b	1c92c <_start@@Base+0xa274>
   1940c:	add	r3, pc, #932	; 0x3a4
   19410:	ldrd	r2, [r3]
   19414:	cmp	r1, r3
   19418:	cmpeq	r0, r2
   1941c:	bhi	1a1f8 <_start@@Base+0x7b40>
   19420:	add	r3, pc, #920	; 0x398
   19424:	ldrd	r2, [r3]
   19428:	cmp	r1, r3
   1942c:	cmpeq	r0, r2
   19430:	bhi	194d8 <_start@@Base+0x6e20>
   19434:	mov	r4, #0
   19438:	add	r3, pc, #904	; 0x388
   1943c:	ldrd	r2, [r3]
   19440:	cmp	r1, r3
   19444:	cmpeq	r4, r2
   19448:	beq	19464 <_start@@Base+0x6dac>
   1944c:	mov	r2, sl
   19450:	mov	r1, r9
   19454:	mov	r0, r8
   19458:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1945c:	mov	r9, r0
   19460:	b	1c92c <_start@@Base+0xa274>
   19464:	mov	r3, #4
   19468:	mov	r2, sl
   1946c:	mov	r1, r9
   19470:	mov	r0, r8
   19474:	bl	1467c <_start@@Base+0x1fc4>
   19478:	mov	r1, r0
   1947c:	cmp	r0, r9
   19480:	beq	194c4 <_start@@Base+0x6e0c>
   19484:	add	r3, sp, #296	; 0x128
   19488:	mov	r2, sl
   1948c:	mov	r0, r8
   19490:	bl	2a214 <flatcc_json_parser_build_string@@Base>
   19494:	mov	r9, r0
   19498:	ldr	r3, [sp, #296]	; 0x128
   1949c:	cmp	r3, #0
   194a0:	beq	1dbdc <_start@@Base+0xb524>
   194a4:	mov	r1, #3
   194a8:	ldr	r0, [r8]
   194ac:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   194b0:	cmp	r0, #0
   194b4:	beq	1dbe4 <_start@@Base+0xb52c>
   194b8:	ldr	r3, [sp, #296]	; 0x128
   194bc:	str	r3, [r0]
   194c0:	b	1c92c <_start@@Base+0xa274>
   194c4:	mov	r2, sl
   194c8:	mov	r0, r8
   194cc:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   194d0:	mov	r9, r0
   194d4:	b	1c92c <_start@@Base+0xa274>
   194d8:	add	r3, pc, #752	; 0x2f0
   194dc:	ldrd	r2, [r3]
   194e0:	cmp	r1, r3
   194e4:	cmpeq	r0, r2
   194e8:	beq	19520 <_start@@Base+0x6e68>
   194ec:	mov	r4, #0
   194f0:	bic	r5, r1, #255	; 0xff
   194f4:	add	r3, pc, #732	; 0x2dc
   194f8:	ldrd	r2, [r3]
   194fc:	cmp	r5, r3
   19500:	cmpeq	r4, r2
   19504:	beq	1987c <_start@@Base+0x71c4>
   19508:	mov	r2, sl
   1950c:	mov	r1, r9
   19510:	mov	r0, r8
   19514:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19518:	mov	r9, r0
   1951c:	b	1c92c <_start@@Base+0xa274>
   19520:	add	r4, r9, #8
   19524:	mov	r1, sl
   19528:	mov	r0, r4
   1952c:	bl	127e0 <_start@@Base+0x128>
   19530:	add	r3, pc, #680	; 0x2a8
   19534:	ldrd	r2, [r3]
   19538:	cmp	r1, r3
   1953c:	cmpeq	r0, r2
   19540:	beq	1955c <_start@@Base+0x6ea4>
   19544:	mov	r2, sl
   19548:	mov	r1, r4
   1954c:	mov	r0, r8
   19550:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19554:	mov	r9, r0
   19558:	b	1c92c <_start@@Base+0xa274>
   1955c:	add	r4, r9, #16
   19560:	mov	r1, sl
   19564:	mov	r0, r4
   19568:	bl	127e0 <_start@@Base+0x128>
   1956c:	and	r0, r0, #-16777216	; 0xff000000
   19570:	add	r3, pc, #624	; 0x270
   19574:	ldrd	r2, [r3]
   19578:	cmp	r1, r3
   1957c:	cmpeq	r0, r2
   19580:	beq	1959c <_start@@Base+0x6ee4>
   19584:	mov	r2, sl
   19588:	mov	r1, r4
   1958c:	mov	r0, r8
   19590:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19594:	mov	r9, r0
   19598:	b	1c92c <_start@@Base+0xa274>
   1959c:	mov	r3, #5
   195a0:	mov	r2, sl
   195a4:	mov	r1, r4
   195a8:	mov	r0, r8
   195ac:	bl	1467c <_start@@Base+0x1fc4>
   195b0:	mov	r9, r0
   195b4:	cmp	r4, r0
   195b8:	beq	19864 <_start@@Base+0x71ac>
   195bc:	mov	r1, #0
   195c0:	str	r1, [sp, #296]	; 0x128
   195c4:	ldr	r0, [r8]
   195c8:	bl	24144 <flatcc_builder_start_table@@Base>
   195cc:	cmp	r0, #0
   195d0:	bne	19808 <_start@@Base+0x7150>
   195d4:	add	r3, sp, #280	; 0x118
   195d8:	mov	r2, sl
   195dc:	mov	r1, r9
   195e0:	mov	r0, r8
   195e4:	bl	15d2c <_start@@Base+0x3674>
   195e8:	mov	r5, #1
   195ec:	mov	r7, #5
   195f0:	mov	r4, #0
   195f4:	mov	r6, #10
   195f8:	mov	r1, r0
   195fc:	b	1966c <_start@@Base+0x6fb4>
   19600:	mov	r3, r7
   19604:	mov	r2, sl
   19608:	mov	r0, r8
   1960c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   19610:	mov	r1, r0
   19614:	b	196a0 <_start@@Base+0x6fe8>
   19618:	mov	r2, sl
   1961c:	mov	r1, r0
   19620:	mov	r0, r8
   19624:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   19628:	cmp	sl, r0
   1962c:	streq	r4, [sp, #280]	; 0x118
   19630:	moveq	r1, r0
   19634:	beq	1966c <_start@@Base+0x6fb4>
   19638:	ldrb	r3, [r0]
   1963c:	cmp	r3, #44	; 0x2c
   19640:	beq	19724 <_start@@Base+0x706c>
   19644:	str	r4, [sp, #280]	; 0x118
   19648:	ldrb	r3, [r0]
   1964c:	cmp	r3, #125	; 0x7d
   19650:	beq	196dc <_start@@Base+0x7024>
   19654:	mov	r3, r6
   19658:	mov	r2, sl
   1965c:	mov	r1, r0
   19660:	mov	r0, r8
   19664:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   19668:	mov	r1, r0
   1966c:	ldr	r3, [sp, #280]	; 0x118
   19670:	cmp	r3, #0
   19674:	beq	197f8 <_start@@Base+0x7140>
   19678:	cmp	sl, r1
   1967c:	beq	196a0 <_start@@Base+0x6fe8>
   19680:	ldrb	r3, [r1]
   19684:	cmp	r3, #34	; 0x22
   19688:	addeq	r1, r1, #1
   1968c:	streq	r4, [r8, #12]
   19690:	beq	196a0 <_start@@Base+0x6fe8>
   19694:	cmp	r3, #46	; 0x2e
   19698:	strne	r5, [r8, #12]
   1969c:	beq	19600 <_start@@Base+0x6f48>
   196a0:	mov	r2, sl
   196a4:	mov	r0, r8
   196a8:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   196ac:	sub	r3, sl, r0
   196b0:	cmp	r3, #1
   196b4:	ble	19618 <_start@@Base+0x6f60>
   196b8:	ldrb	r3, [r0]
   196bc:	cmp	r3, #32
   196c0:	bhi	19628 <_start@@Base+0x6f70>
   196c4:	bne	19618 <_start@@Base+0x6f60>
   196c8:	ldrb	r3, [r0, #1]
   196cc:	cmp	r3, #32
   196d0:	addhi	r0, r0, #1
   196d4:	bls	19618 <_start@@Base+0x6f60>
   196d8:	b	19628 <_start@@Base+0x6f70>
   196dc:	add	r1, r0, #1
   196e0:	sub	r3, sl, r1
   196e4:	cmp	r3, #1
   196e8:	ble	196fc <_start@@Base+0x7044>
   196ec:	ldrb	r3, [r0, #1]
   196f0:	cmp	r3, #32
   196f4:	bhi	1966c <_start@@Base+0x6fb4>
   196f8:	beq	19710 <_start@@Base+0x7058>
   196fc:	mov	r2, sl
   19700:	mov	r0, r8
   19704:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   19708:	mov	r1, r0
   1970c:	b	1966c <_start@@Base+0x6fb4>
   19710:	ldrb	r3, [r0, #2]
   19714:	cmp	r3, #32
   19718:	addhi	r1, r0, #2
   1971c:	bls	196fc <_start@@Base+0x7044>
   19720:	b	1966c <_start@@Base+0x6fb4>
   19724:	add	r1, r0, #1
   19728:	sub	r3, sl, r1
   1972c:	cmp	r3, #1
   19730:	ble	19744 <_start@@Base+0x708c>
   19734:	ldrb	r3, [r0, #1]
   19738:	cmp	r3, #32
   1973c:	bhi	19754 <_start@@Base+0x709c>
   19740:	beq	19788 <_start@@Base+0x70d0>
   19744:	mov	r2, sl
   19748:	mov	r0, r8
   1974c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   19750:	mov	r1, r0
   19754:	cmp	sl, r1
   19758:	beq	1979c <_start@@Base+0x70e4>
   1975c:	ldrb	r3, [r1]
   19760:	cmp	r3, #125	; 0x7d
   19764:	strne	r5, [sp, #280]	; 0x118
   19768:	bne	1966c <_start@@Base+0x6fb4>
   1976c:	str	r4, [sp, #280]	; 0x118
   19770:	mov	r2, sl
   19774:	add	r1, r1, #1
   19778:	mov	r0, r8
   1977c:	bl	1447c <_start@@Base+0x1dc4>
   19780:	mov	r1, r0
   19784:	b	1966c <_start@@Base+0x6fb4>
   19788:	ldrb	r3, [r0, #2]
   1978c:	cmp	r3, #32
   19790:	addhi	r1, r0, #2
   19794:	bls	19744 <_start@@Base+0x708c>
   19798:	b	19754 <_start@@Base+0x709c>
   1979c:	str	r4, [sp, #280]	; 0x118
   197a0:	mov	r3, r6
   197a4:	mov	r2, sl
   197a8:	mov	r0, r8
   197ac:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   197b0:	mov	r1, r0
   197b4:	b	1966c <_start@@Base+0x6fb4>
   197b8:			; <UNDEFINED> instruction: 0xffffffff
   197bc:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   197c0:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   197c4:	rsbvc	r7, r1, r5, ror #4
   197c8:	andeq	r0, r0, r0
   197cc:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   197d0:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   197d4:	rsbvc	r7, r1, r5, ror #4
   197d8:	andeq	r0, r0, r0
   197dc:	rsbvc	r7, pc, r0, lsl #6
   197e0:	rsbvc	r6, r1, r5, ror #6
   197e4:	smcvs	54867	; 0xd653
   197e8:	strvc	r0, [r0], #-0
   197ec:	svcpl	0x00746573
   197f0:	andeq	lr, r3, r8, ror r0
   197f4:	andeq	r0, r0, r0
   197f8:	mov	r9, r1
   197fc:	ldr	r3, [r8, #24]
   19800:	cmp	r3, #0
   19804:	beq	1984c <_start@@Base+0x7194>
   19808:	mov	r3, #33	; 0x21
   1980c:	mov	r2, sl
   19810:	mov	r1, r9
   19814:	mov	r0, r8
   19818:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1981c:	mov	r9, r0
   19820:	ldr	r3, [sp, #296]	; 0x128
   19824:	cmp	r3, #0
   19828:	beq	1dbec <_start@@Base+0xb534>
   1982c:	mov	r1, #34	; 0x22
   19830:	ldr	r0, [r8]
   19834:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   19838:	cmp	r0, #0
   1983c:	beq	1dbf4 <_start@@Base+0xb53c>
   19840:	ldr	r3, [sp, #296]	; 0x128
   19844:	str	r3, [r0]
   19848:	b	1c92c <_start@@Base+0xa274>
   1984c:	ldr	r0, [r8]
   19850:	bl	24b94 <flatcc_builder_end_table@@Base>
   19854:	str	r0, [sp, #296]	; 0x128
   19858:	cmp	r0, #0
   1985c:	beq	19808 <_start@@Base+0x7150>
   19860:	b	19820 <_start@@Base+0x7168>
   19864:	mov	r2, sl
   19868:	mov	r1, r0
   1986c:	mov	r0, r8
   19870:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19874:	mov	r9, r0
   19878:	b	1c92c <_start@@Base+0xa274>
   1987c:	mov	r3, #3
   19880:	mov	r2, sl
   19884:	mov	r1, r9
   19888:	mov	r0, r8
   1988c:	bl	1467c <_start@@Base+0x1fc4>
   19890:	mov	r4, r0
   19894:	cmp	r0, r9
   19898:	beq	1a1e0 <_start@@Base+0x7b28>
   1989c:	mov	r3, #16
   198a0:	mov	r2, #32
   198a4:	mov	r1, #0
   198a8:	ldr	r0, [r8]
   198ac:	bl	25b40 <flatcc_builder_table_add@@Base>
   198b0:	subs	r7, r0, #0
   198b4:	beq	1db68 <_start@@Base+0xb4b0>
   198b8:	add	r3, sp, #272	; 0x110
   198bc:	mov	r2, sl
   198c0:	mov	r1, r4
   198c4:	mov	r0, r8
   198c8:	bl	15d2c <_start@@Base+0x3674>
   198cc:	mov	r9, r0
   198d0:	mov	r5, #1
   198d4:	mov	fp, #5
   198d8:	vldr	s18, [pc, #-236]	; 197f4 <_start@@Base+0x713c>
   198dc:	ldr	r3, [pc, #-244]	; 197f0 <_start@@Base+0x7138>
   198e0:	add	r3, r3, #232	; 0xe8
   198e4:	str	r3, [sp, #20]
   198e8:	vldr	d8, [pc, #792]	; 19c08 <_start@@Base+0x7550>
   198ec:	b	19b90 <_start@@Base+0x74d8>
   198f0:	mov	r3, fp
   198f4:	mov	r2, sl
   198f8:	mov	r1, r9
   198fc:	mov	r0, r8
   19900:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   19904:	mov	r9, r0
   19908:	b	19bc8 <_start@@Base+0x7510>
   1990c:	ldrb	r2, [r9, #7]
   19910:	mov	r3, #0
   19914:	b	19920 <_start@@Base+0x7268>
   19918:	mov	r2, #0
   1991c:	mov	r3, #0
   19920:	ldrb	r0, [r9, #6]
   19924:	mov	ip, #0
   19928:	str	ip, [sp, #132]	; 0x84
   1992c:	lsl	r1, r0, #8
   19930:	str	r1, [sp, #128]	; 0x80
   19934:	ldrd	r0, [sp, #128]	; 0x80
   19938:	orr	r0, r0, r2
   1993c:	orr	r1, r1, r3
   19940:	mov	r2, r0
   19944:	mov	r3, r1
   19948:	ldrb	r0, [r9, #5]
   1994c:	mov	ip, #0
   19950:	str	ip, [sp, #116]	; 0x74
   19954:	lsl	r1, r0, #16
   19958:	str	r1, [sp, #112]	; 0x70
   1995c:	ldrd	r0, [sp, #112]	; 0x70
   19960:	orr	r0, r0, r2
   19964:	orr	r1, r1, r3
   19968:	mov	r2, r0
   1996c:	mov	r3, r1
   19970:	ldrb	r0, [r9, #4]
   19974:	mov	ip, #0
   19978:	str	ip, [sp, #108]	; 0x6c
   1997c:	lsl	r1, r0, #24
   19980:	str	r1, [sp, #104]	; 0x68
   19984:	ldrd	r0, [sp, #104]	; 0x68
   19988:	orr	r0, r0, r2
   1998c:	orr	r1, r1, r3
   19990:	mov	r2, r0
   19994:	mov	r3, r1
   19998:	ldrb	r1, [r9, #3]
   1999c:	str	r1, [sp, #92]	; 0x5c
   199a0:	mov	r1, #0
   199a4:	str	r1, [sp, #88]	; 0x58
   199a8:	ldrd	r0, [sp, #88]	; 0x58
   199ac:	orr	r0, r0, r2
   199b0:	orr	r1, r1, r3
   199b4:	mov	r2, r0
   199b8:	mov	r3, r1
   199bc:	ldrb	r0, [r9, #2]
   199c0:	lsl	r1, r0, #8
   199c4:	str	r1, [sp, #84]	; 0x54
   199c8:	mov	r1, #0
   199cc:	str	r1, [sp, #80]	; 0x50
   199d0:	ldrd	r0, [sp, #80]	; 0x50
   199d4:	orr	r0, r0, r2
   199d8:	orr	r1, r1, r3
   199dc:	mov	r2, r0
   199e0:	mov	r3, r1
   199e4:	ldrb	r0, [r9, #1]
   199e8:	lsl	r1, r0, #16
   199ec:	str	r1, [sp, #68]	; 0x44
   199f0:	mov	r1, #0
   199f4:	str	r1, [sp, #64]	; 0x40
   199f8:	ldrd	r0, [sp, #64]	; 0x40
   199fc:	orr	r0, r0, r2
   19a00:	orr	r1, r1, r3
   19a04:	mov	r2, r0
   19a08:	mov	r3, r1
   19a0c:	ldrb	r0, [r9]
   19a10:	lsl	r1, r0, #24
   19a14:	str	r1, [sp, #60]	; 0x3c
   19a18:	mov	r1, #0
   19a1c:	str	r1, [sp, #56]	; 0x38
   19a20:	ldrd	r0, [sp, #56]	; 0x38
   19a24:	orr	r0, r0, r2
   19a28:	orr	r1, r1, r3
   19a2c:	mov	r2, r0
   19a30:	mov	r3, r1
   19a34:	add	r1, pc, #468	; 0x1d4
   19a38:	ldrd	r0, [r1]
   19a3c:	cmp	r3, r1
   19a40:	cmpeq	r2, r0
   19a44:	bls	19ad4 <_start@@Base+0x741c>
   19a48:	mvn	r0, #0
   19a4c:	mvn	r1, #-2013265920	; 0x88000000
   19a50:	cmp	r3, r1
   19a54:	cmpeq	r2, r0
   19a58:	bhi	19e7c <_start@@Base+0x77c4>
   19a5c:	and	r2, r2, #-16777216	; 0xff000000
   19a60:	add	r1, pc, #432	; 0x1b0
   19a64:	ldrd	r0, [r1]
   19a68:	cmp	r3, r1
   19a6c:	cmpeq	r2, r0
   19a70:	beq	19e2c <_start@@Base+0x7774>
   19a74:	mov	r2, sl
   19a78:	mov	r1, r9
   19a7c:	mov	r0, r8
   19a80:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19a84:	mov	r4, r0
   19a88:	b	19b14 <_start@@Base+0x745c>
   19a8c:	mov	r2, #0
   19a90:	mov	r3, #0
   19a94:	b	19948 <_start@@Base+0x7290>
   19a98:	mov	r2, #0
   19a9c:	mov	r3, #0
   19aa0:	b	19970 <_start@@Base+0x72b8>
   19aa4:	mov	r2, #0
   19aa8:	mov	r3, #0
   19aac:	b	19998 <_start@@Base+0x72e0>
   19ab0:	mov	r2, #0
   19ab4:	mov	r3, #0
   19ab8:	b	199bc <_start@@Base+0x7304>
   19abc:	mov	r2, #0
   19ac0:	mov	r3, #0
   19ac4:	b	199e4 <_start@@Base+0x732c>
   19ac8:	mov	r2, #0
   19acc:	mov	r3, #0
   19ad0:	b	19a0c <_start@@Base+0x7354>
   19ad4:	and	r2, r2, #-16777216	; 0xff000000
   19ad8:	add	r1, pc, #320	; 0x140
   19adc:	ldrd	r0, [r1]
   19ae0:	cmp	r3, r1
   19ae4:	cmpeq	r2, r0
   19ae8:	beq	19c34 <_start@@Base+0x757c>
   19aec:	add	r1, pc, #308	; 0x134
   19af0:	ldrd	r0, [r1]
   19af4:	cmp	r3, r1
   19af8:	cmpeq	r2, r0
   19afc:	beq	19d6c <_start@@Base+0x76b4>
   19b00:	mov	r2, sl
   19b04:	mov	r1, r9
   19b08:	mov	r0, r8
   19b0c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19b10:	mov	r4, r0
   19b14:	sub	r3, sl, r4
   19b18:	cmp	r3, #1
   19b1c:	ble	19b30 <_start@@Base+0x7478>
   19b20:	ldrb	r3, [r4]
   19b24:	cmp	r3, #32
   19b28:	bhi	19b44 <_start@@Base+0x748c>
   19b2c:	beq	1a0dc <_start@@Base+0x7a24>
   19b30:	mov	r2, sl
   19b34:	mov	r1, r4
   19b38:	mov	r0, r8
   19b3c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   19b40:	mov	r4, r0
   19b44:	cmp	sl, r4
   19b48:	moveq	r3, #0
   19b4c:	streq	r3, [sp, #272]	; 0x110
   19b50:	moveq	r9, r4
   19b54:	beq	19b90 <_start@@Base+0x74d8>
   19b58:	ldrb	r3, [r4]
   19b5c:	cmp	r3, #44	; 0x2c
   19b60:	beq	1a13c <_start@@Base+0x7a84>
   19b64:	mov	r3, #0
   19b68:	str	r3, [sp, #272]	; 0x110
   19b6c:	ldrb	r3, [r4]
   19b70:	cmp	r3, #125	; 0x7d
   19b74:	beq	1a0f0 <_start@@Base+0x7a38>
   19b78:	mov	r3, #10
   19b7c:	mov	r2, sl
   19b80:	mov	r1, r4
   19b84:	mov	r0, r8
   19b88:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   19b8c:	mov	r9, r0
   19b90:	ldr	r3, [sp, #272]	; 0x110
   19b94:	cmp	r3, #0
   19b98:	beq	1c92c <_start@@Base+0xa274>
   19b9c:	cmp	sl, r9
   19ba0:	beq	19bc8 <_start@@Base+0x7510>
   19ba4:	ldrb	r3, [r9]
   19ba8:	cmp	r3, #34	; 0x22
   19bac:	addeq	r9, r9, #1
   19bb0:	moveq	r3, #0
   19bb4:	streq	r3, [r8, #12]
   19bb8:	beq	19bc8 <_start@@Base+0x7510>
   19bbc:	cmp	r3, #46	; 0x2e
   19bc0:	strne	r5, [r8, #12]
   19bc4:	beq	198f0 <_start@@Base+0x7238>
   19bc8:	sub	r3, sl, r9
   19bcc:	cmp	r3, #8
   19bd0:	movcs	r3, #8
   19bd4:	sub	r3, r3, #1
   19bd8:	cmp	r3, #7
   19bdc:	ldrls	pc, [pc, r3, lsl #2]
   19be0:	b	19b00 <_start@@Base+0x7448>
   19be4:	andeq	r9, r1, r8, asr #21
   19be8:			; <UNDEFINED> instruction: 0x00019abc
   19bec:			; <UNDEFINED> instruction: 0x00019ab0
   19bf0:	andeq	r9, r1, r4, lsr #21
   19bf4:	muleq	r1, r8, sl
   19bf8:	andeq	r9, r1, ip, lsl #21
   19bfc:	andeq	r9, r1, r8, lsl r9
   19c00:	andeq	r9, r1, ip, lsl #18
   19c04:	nop			; (mov r0, r0)
	...
   19c10:	rscscc	pc, pc, #1020	; 0x3fc
   19c14:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19c18:	movwcc	r0, #0
   19c1c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19c20:	andcc	r0, r0, #0
   19c24:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19c28:	mrscc	r0, (UNDEF: 0)
   19c2c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19c30:	andeq	lr, r3, r8, ror r0
   19c34:	mov	r3, fp
   19c38:	mov	r2, sl
   19c3c:	mov	r1, r9
   19c40:	mov	r0, r8
   19c44:	bl	1467c <_start@@Base+0x1fc4>
   19c48:	mov	r6, r0
   19c4c:	cmp	r0, r9
   19c50:	beq	19d54 <_start@@Base+0x769c>
   19c54:	mov	r3, #0
   19c58:	strb	r3, [sp, #268]	; 0x10c
   19c5c:	mov	r0, #0
   19c60:	mov	r1, #0
   19c64:	add	r2, sp, #280	; 0x118
   19c68:	strd	r0, [r2]
   19c6c:	str	r3, [sp, #276]	; 0x114
   19c70:	cmp	sl, r6
   19c74:	beq	19ce4 <_start@@Base+0x762c>
   19c78:	str	r2, [sp]
   19c7c:	add	r3, sp, #276	; 0x114
   19c80:	mov	r2, sl
   19c84:	mov	r1, r6
   19c88:	mov	r0, r8
   19c8c:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   19c90:	mov	r4, r0
   19c94:	cmp	r6, r0
   19c98:	beq	19ce4 <_start@@Base+0x762c>
   19c9c:	add	r3, sp, #280	; 0x118
   19ca0:	ldrd	r2, [r3]
   19ca4:	ldr	r1, [sp, #276]	; 0x114
   19ca8:	cmp	r1, #0
   19cac:	beq	19d18 <_start@@Base+0x7660>
   19cb0:	cmp	r3, #0
   19cb4:	cmpeq	r2, #128	; 0x80
   19cb8:	rsbls	r2, r2, #0
   19cbc:	strbls	r2, [sp, #268]	; 0x10c
   19cc0:	bls	19d28 <_start@@Base+0x7670>
   19cc4:	mov	r3, #8
   19cc8:	mov	r2, sl
   19ccc:	mov	r1, r0
   19cd0:	mov	r0, r8
   19cd4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   19cd8:	mov	r4, r0
   19cdc:	cmp	r6, r4
   19ce0:	bne	19d28 <_start@@Base+0x7670>
   19ce4:	add	r3, sp, #268	; 0x10c
   19ce8:	str	r3, [sp]
   19cec:	ldr	r3, [pc, #-196]	; 19c30 <_start@@Base+0x7578>
   19cf0:	add	r3, r3, #180	; 0xb4
   19cf4:	mov	r2, sl
   19cf8:	mov	r1, r6
   19cfc:	mov	r0, r8
   19d00:	bl	14f34 <_start@@Base+0x287c>
   19d04:	mov	r4, r0
   19d08:	cmp	sl, r0
   19d0c:	cmpne	r6, r0
   19d10:	bne	19d28 <_start@@Base+0x7670>
   19d14:	b	19df8 <_start@@Base+0x7740>
   19d18:	cmp	r3, #0
   19d1c:	cmpeq	r2, #127	; 0x7f
   19d20:	strbls	r2, [sp, #268]	; 0x10c
   19d24:	bhi	19d38 <_start@@Base+0x7680>
   19d28:	add	r3, sp, #268	; 0x10c
   19d2c:	ldrsb	r3, [r3]
   19d30:	strb	r3, [r7, #24]
   19d34:	b	19b14 <_start@@Base+0x745c>
   19d38:	mov	r3, #7
   19d3c:	mov	r2, sl
   19d40:	mov	r1, r0
   19d44:	mov	r0, r8
   19d48:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   19d4c:	mov	r4, r0
   19d50:	b	19cdc <_start@@Base+0x7624>
   19d54:	mov	r2, sl
   19d58:	mov	r1, r0
   19d5c:	mov	r0, r8
   19d60:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19d64:	mov	r4, r0
   19d68:	b	19b14 <_start@@Base+0x745c>
   19d6c:	mov	r3, fp
   19d70:	mov	r2, sl
   19d74:	mov	r1, r9
   19d78:	mov	r0, r8
   19d7c:	bl	1467c <_start@@Base+0x1fc4>
   19d80:	mov	r6, r0
   19d84:	cmp	r0, r9
   19d88:	beq	19e14 <_start@@Base+0x775c>
   19d8c:	add	r3, sp, #304	; 0x130
   19d90:	vmov	r0, r1, d8
   19d94:	strd	r0, [r3, #-24]!	; 0xffffffe8
   19d98:	mov	r2, sl
   19d9c:	mov	r1, r6
   19da0:	mov	r0, r8
   19da4:	bl	28d54 <flatcc_json_parser_double@@Base>
   19da8:	mov	r4, r0
   19dac:	cmp	r6, r0
   19db0:	beq	19dc4 <_start@@Base+0x770c>
   19db4:	add	r3, sp, #280	; 0x118
   19db8:	ldrd	r2, [r3]
   19dbc:	strd	r2, [r7, #16]
   19dc0:	b	19b14 <_start@@Base+0x745c>
   19dc4:	add	r3, sp, #280	; 0x118
   19dc8:	str	r3, [sp]
   19dcc:	ldr	r3, [pc, #-420]	; 19c30 <_start@@Base+0x7578>
   19dd0:	add	r3, r3, #196	; 0xc4
   19dd4:	mov	r2, sl
   19dd8:	mov	r1, r0
   19ddc:	mov	r0, r8
   19de0:	bl	14934 <_start@@Base+0x227c>
   19de4:	cmp	sl, r0
   19de8:	cmpne	r4, r0
   19dec:	movne	r4, r0
   19df0:	bne	19db4 <_start@@Base+0x76fc>
   19df4:	mov	r4, r0
   19df8:	mov	r3, #33	; 0x21
   19dfc:	mov	r2, sl
   19e00:	mov	r1, r4
   19e04:	mov	r0, r8
   19e08:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   19e0c:	mov	r9, r0
   19e10:	b	1c92c <_start@@Base+0xa274>
   19e14:	mov	r2, sl
   19e18:	mov	r1, r0
   19e1c:	mov	r0, r8
   19e20:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19e24:	mov	r4, r0
   19e28:	b	19b14 <_start@@Base+0x745c>
   19e2c:	mov	r3, fp
   19e30:	mov	r2, sl
   19e34:	mov	r1, r9
   19e38:	mov	r0, r8
   19e3c:	bl	1467c <_start@@Base+0x1fc4>
   19e40:	cmp	r0, r9
   19e44:	beq	19e64 <_start@@Base+0x77ac>
   19e48:	add	r3, r7, #26
   19e4c:	mov	r2, sl
   19e50:	mov	r1, r0
   19e54:	mov	r0, r8
   19e58:	bl	16830 <_start@@Base+0x4178>
   19e5c:	mov	r4, r0
   19e60:	b	19b14 <_start@@Base+0x745c>
   19e64:	mov	r2, sl
   19e68:	mov	r1, r0
   19e6c:	mov	r0, r8
   19e70:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19e74:	mov	r4, r0
   19e78:	b	19b14 <_start@@Base+0x745c>
   19e7c:	mvn	r0, #0
   19e80:	mvn	r1, #-2030043136	; 0x87000000
   19e84:	cmp	r3, r1
   19e88:	cmpeq	r2, r0
   19e8c:	bhi	19f60 <_start@@Base+0x78a8>
   19e90:	mov	r2, #0
   19e94:	and	r3, r3, #-16777216	; 0xff000000
   19e98:	cmp	r3, #2013265920	; 0x78000000
   19e9c:	cmpeq	r2, #0
   19ea0:	beq	19ebc <_start@@Base+0x7804>
   19ea4:	mov	r2, sl
   19ea8:	mov	r1, r9
   19eac:	mov	r0, r8
   19eb0:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19eb4:	mov	r4, r0
   19eb8:	b	19b14 <_start@@Base+0x745c>
   19ebc:	mov	r3, r5
   19ec0:	mov	r2, sl
   19ec4:	mov	r1, r9
   19ec8:	mov	r0, r8
   19ecc:	bl	1467c <_start@@Base+0x1fc4>
   19ed0:	mov	r6, r0
   19ed4:	cmp	r0, r9
   19ed8:	beq	19f48 <_start@@Base+0x7890>
   19edc:	add	r3, sp, #304	; 0x130
   19ee0:	vmov	r2, s18
   19ee4:	str	r2, [r3, #-24]!	; 0xffffffe8
   19ee8:	mov	r2, sl
   19eec:	mov	r1, r0
   19ef0:	mov	r0, r8
   19ef4:	bl	28e38 <flatcc_json_parser_float@@Base>
   19ef8:	mov	r4, r0
   19efc:	cmp	r6, r0
   19f00:	beq	19f10 <_start@@Base+0x7858>
   19f04:	ldr	r3, [sp, #280]	; 0x118
   19f08:	str	r3, [r7]
   19f0c:	b	19b14 <_start@@Base+0x745c>
   19f10:	add	r3, sp, #280	; 0x118
   19f14:	str	r3, [sp]
   19f18:	ldr	r3, [pc, #-752]	; 19c30 <_start@@Base+0x7578>
   19f1c:	add	r3, r3, #208	; 0xd0
   19f20:	mov	r2, sl
   19f24:	mov	r1, r0
   19f28:	mov	r0, r8
   19f2c:	bl	14758 <_start@@Base+0x20a0>
   19f30:	cmp	sl, r0
   19f34:	cmpne	r4, r0
   19f38:	movne	r4, r0
   19f3c:	bne	19f04 <_start@@Base+0x784c>
   19f40:	mov	r4, r0
   19f44:	b	19df8 <_start@@Base+0x7740>
   19f48:	mov	r2, sl
   19f4c:	mov	r1, r0
   19f50:	mov	r0, r8
   19f54:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19f58:	mov	r4, r0
   19f5c:	b	19b14 <_start@@Base+0x745c>
   19f60:	mov	r2, #0
   19f64:	and	r3, r3, #-16777216	; 0xff000000
   19f68:	cmp	r3, #2046820352	; 0x7a000000
   19f6c:	cmpeq	r2, #0
   19f70:	beq	19f98 <_start@@Base+0x78e0>
   19f74:	cmp	r3, #2030043136	; 0x79000000
   19f78:	cmpeq	r2, #0
   19f7c:	beq	1a03c <_start@@Base+0x7984>
   19f80:	mov	r2, sl
   19f84:	mov	r1, r9
   19f88:	mov	r0, r8
   19f8c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   19f90:	mov	r4, r0
   19f94:	b	19b14 <_start@@Base+0x745c>
   19f98:	mov	r3, r5
   19f9c:	mov	r2, sl
   19fa0:	mov	r1, r9
   19fa4:	mov	r0, r8
   19fa8:	bl	1467c <_start@@Base+0x1fc4>
   19fac:	mov	r6, r0
   19fb0:	cmp	r0, r9
   19fb4:	beq	1a024 <_start@@Base+0x796c>
   19fb8:	add	r3, sp, #304	; 0x130
   19fbc:	vmov	r2, s18
   19fc0:	str	r2, [r3, #-24]!	; 0xffffffe8
   19fc4:	mov	r2, sl
   19fc8:	mov	r1, r0
   19fcc:	mov	r0, r8
   19fd0:	bl	28e38 <flatcc_json_parser_float@@Base>
   19fd4:	mov	r4, r0
   19fd8:	cmp	r6, r0
   19fdc:	beq	19fec <_start@@Base+0x7934>
   19fe0:	ldr	r3, [sp, #280]	; 0x118
   19fe4:	str	r3, [r7, #8]
   19fe8:	b	19b14 <_start@@Base+0x745c>
   19fec:	add	r3, sp, #280	; 0x118
   19ff0:	str	r3, [sp]
   19ff4:	ldr	r3, [pc, #-972]	; 19c30 <_start@@Base+0x7578>
   19ff8:	add	r3, r3, #220	; 0xdc
   19ffc:	mov	r2, sl
   1a000:	mov	r1, r0
   1a004:	mov	r0, r8
   1a008:	bl	14758 <_start@@Base+0x20a0>
   1a00c:	cmp	sl, r0
   1a010:	cmpne	r4, r0
   1a014:	movne	r4, r0
   1a018:	bne	19fe0 <_start@@Base+0x7928>
   1a01c:	mov	r4, r0
   1a020:	b	19df8 <_start@@Base+0x7740>
   1a024:	mov	r2, sl
   1a028:	mov	r1, r0
   1a02c:	mov	r0, r8
   1a030:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1a034:	mov	r4, r0
   1a038:	b	19b14 <_start@@Base+0x745c>
   1a03c:	mov	r3, r5
   1a040:	mov	r2, sl
   1a044:	mov	r1, r9
   1a048:	mov	r0, r8
   1a04c:	bl	1467c <_start@@Base+0x1fc4>
   1a050:	mov	r6, r0
   1a054:	cmp	r0, r9
   1a058:	beq	1a0c4 <_start@@Base+0x7a0c>
   1a05c:	add	r3, sp, #304	; 0x130
   1a060:	vmov	r2, s18
   1a064:	str	r2, [r3, #-24]!	; 0xffffffe8
   1a068:	mov	r2, sl
   1a06c:	mov	r1, r0
   1a070:	mov	r0, r8
   1a074:	bl	28e38 <flatcc_json_parser_float@@Base>
   1a078:	mov	r4, r0
   1a07c:	cmp	r6, r0
   1a080:	beq	1a090 <_start@@Base+0x79d8>
   1a084:	ldr	r3, [sp, #280]	; 0x118
   1a088:	str	r3, [r7, #4]
   1a08c:	b	19b14 <_start@@Base+0x745c>
   1a090:	add	r3, sp, #280	; 0x118
   1a094:	str	r3, [sp]
   1a098:	ldr	r3, [sp, #20]
   1a09c:	mov	r2, sl
   1a0a0:	mov	r1, r0
   1a0a4:	mov	r0, r8
   1a0a8:	bl	14758 <_start@@Base+0x20a0>
   1a0ac:	cmp	sl, r0
   1a0b0:	cmpne	r4, r0
   1a0b4:	movne	r4, r0
   1a0b8:	bne	1a084 <_start@@Base+0x79cc>
   1a0bc:	mov	r4, r0
   1a0c0:	b	19df8 <_start@@Base+0x7740>
   1a0c4:	mov	r2, sl
   1a0c8:	mov	r1, r0
   1a0cc:	mov	r0, r8
   1a0d0:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1a0d4:	mov	r4, r0
   1a0d8:	b	19b14 <_start@@Base+0x745c>
   1a0dc:	ldrb	r3, [r4, #1]
   1a0e0:	cmp	r3, #32
   1a0e4:	addhi	r4, r4, #1
   1a0e8:	bls	19b30 <_start@@Base+0x7478>
   1a0ec:	b	19b44 <_start@@Base+0x748c>
   1a0f0:	add	r9, r4, #1
   1a0f4:	sub	r3, sl, r9
   1a0f8:	cmp	r3, #1
   1a0fc:	ble	1a110 <_start@@Base+0x7a58>
   1a100:	ldrb	r3, [r4, #1]
   1a104:	cmp	r3, #32
   1a108:	bhi	19b90 <_start@@Base+0x74d8>
   1a10c:	beq	1a128 <_start@@Base+0x7a70>
   1a110:	mov	r2, sl
   1a114:	mov	r1, r9
   1a118:	mov	r0, r8
   1a11c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1a120:	mov	r9, r0
   1a124:	b	19b90 <_start@@Base+0x74d8>
   1a128:	ldrb	r3, [r4, #2]
   1a12c:	cmp	r3, #32
   1a130:	addhi	r9, r4, #2
   1a134:	bls	1a110 <_start@@Base+0x7a58>
   1a138:	b	19b90 <_start@@Base+0x74d8>
   1a13c:	add	r9, r4, #1
   1a140:	sub	r3, sl, r9
   1a144:	cmp	r3, #1
   1a148:	ble	1a15c <_start@@Base+0x7aa4>
   1a14c:	ldrb	r3, [r4, #1]
   1a150:	cmp	r3, #32
   1a154:	bhi	1a170 <_start@@Base+0x7ab8>
   1a158:	beq	1a1a8 <_start@@Base+0x7af0>
   1a15c:	mov	r2, sl
   1a160:	mov	r1, r9
   1a164:	mov	r0, r8
   1a168:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1a16c:	mov	r9, r0
   1a170:	cmp	sl, r9
   1a174:	beq	1a1bc <_start@@Base+0x7b04>
   1a178:	ldrb	r3, [r9]
   1a17c:	cmp	r3, #125	; 0x7d
   1a180:	strne	r5, [sp, #272]	; 0x110
   1a184:	bne	19b90 <_start@@Base+0x74d8>
   1a188:	mov	r3, #0
   1a18c:	str	r3, [sp, #272]	; 0x110
   1a190:	mov	r2, sl
   1a194:	add	r1, r9, #1
   1a198:	mov	r0, r8
   1a19c:	bl	1447c <_start@@Base+0x1dc4>
   1a1a0:	mov	r9, r0
   1a1a4:	b	19b90 <_start@@Base+0x74d8>
   1a1a8:	ldrb	r3, [r4, #2]
   1a1ac:	cmp	r3, #32
   1a1b0:	addhi	r9, r4, #2
   1a1b4:	bls	1a15c <_start@@Base+0x7aa4>
   1a1b8:	b	1a170 <_start@@Base+0x7ab8>
   1a1bc:	mov	r3, #0
   1a1c0:	str	r3, [sp, #272]	; 0x110
   1a1c4:	mov	r3, #10
   1a1c8:	mov	r2, sl
   1a1cc:	mov	r1, r9
   1a1d0:	mov	r0, r8
   1a1d4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1a1d8:	mov	r9, r0
   1a1dc:	b	19b90 <_start@@Base+0x74d8>
   1a1e0:	mov	r2, sl
   1a1e4:	mov	r1, r0
   1a1e8:	mov	r0, r8
   1a1ec:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1a1f0:	mov	r9, r0
   1a1f4:	b	1c92c <_start@@Base+0xa274>
   1a1f8:	and	r6, r0, #-16777216	; 0xff000000
   1a1fc:	mov	r7, r1
   1a200:	add	r3, pc, #928	; 0x3a0
   1a204:	ldrd	r2, [r3]
   1a208:	cmp	r1, r3
   1a20c:	cmpeq	r6, r2
   1a210:	beq	1a26c <_start@@Base+0x7bb4>
   1a214:	mov	r0, #0
   1a218:	add	r3, pc, #912	; 0x390
   1a21c:	ldrd	r2, [r3]
   1a220:	cmp	r1, r3
   1a224:	cmpeq	r0, r2
   1a228:	beq	1a34c <_start@@Base+0x7c94>
   1a22c:	add	r3, pc, #900	; 0x384
   1a230:	ldrd	r2, [r3]
   1a234:	cmp	r7, r3
   1a238:	cmpeq	r6, r2
   1a23c:	beq	1a39c <_start@@Base+0x7ce4>
   1a240:	add	r3, pc, #888	; 0x378
   1a244:	ldrd	r2, [r3]
   1a248:	cmp	r5, r3
   1a24c:	cmpeq	r4, r2
   1a250:	beq	1a47c <_start@@Base+0x7dc4>
   1a254:	mov	r2, sl
   1a258:	mov	r1, r9
   1a25c:	mov	r0, r8
   1a260:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1a264:	mov	r9, r0
   1a268:	b	1c92c <_start@@Base+0xa274>
   1a26c:	mov	r3, #5
   1a270:	mov	r2, sl
   1a274:	mov	r1, r9
   1a278:	mov	r0, r8
   1a27c:	bl	1467c <_start@@Base+0x1fc4>
   1a280:	mov	r6, r0
   1a284:	cmp	r0, r9
   1a288:	beq	1a240 <_start@@Base+0x7b88>
   1a28c:	mvn	r3, #-1073741824	; 0xc0000000
   1a290:	mov	r2, #2
   1a294:	mov	r1, #4
   1a298:	ldr	r0, [r8]
   1a29c:	bl	23e94 <flatcc_builder_start_vector@@Base>
   1a2a0:	cmp	r0, #0
   1a2a4:	bne	1db74 <_start@@Base+0xb4bc>
   1a2a8:	add	r3, sp, #300	; 0x12c
   1a2ac:	mov	r2, sl
   1a2b0:	mov	r1, r6
   1a2b4:	mov	r0, r8
   1a2b8:	bl	15c6c <_start@@Base+0x35b4>
   1a2bc:	mov	r9, r0
   1a2c0:	ldr	r3, [sp, #300]	; 0x12c
   1a2c4:	cmp	r3, #0
   1a2c8:	beq	1a318 <_start@@Base+0x7c60>
   1a2cc:	mov	r4, #1
   1a2d0:	mov	r1, r4
   1a2d4:	ldr	r0, [r8]
   1a2d8:	bl	2368c <flatcc_builder_extend_vector@@Base>
   1a2dc:	subs	r3, r0, #0
   1a2e0:	beq	1dbfc <_start@@Base+0xb544>
   1a2e4:	mov	r2, sl
   1a2e8:	mov	r1, r9
   1a2ec:	mov	r0, r8
   1a2f0:	bl	16830 <_start@@Base+0x4178>
   1a2f4:	add	r3, sp, #300	; 0x12c
   1a2f8:	mov	r2, sl
   1a2fc:	mov	r1, r0
   1a300:	mov	r0, r8
   1a304:	bl	18884 <_start@@Base+0x61cc>
   1a308:	mov	r9, r0
   1a30c:	ldr	r3, [sp, #300]	; 0x12c
   1a310:	cmp	r3, #0
   1a314:	bne	1a2d0 <_start@@Base+0x7c18>
   1a318:	ldr	r0, [r8]
   1a31c:	bl	24ea4 <flatcc_builder_end_vector@@Base>
   1a320:	str	r0, [sp, #296]	; 0x128
   1a324:	cmp	r0, #0
   1a328:	beq	1dc04 <_start@@Base+0xb54c>
   1a32c:	mov	r1, #9
   1a330:	ldr	r0, [r8]
   1a334:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1a338:	cmp	r0, #0
   1a33c:	beq	1dc0c <_start@@Base+0xb554>
   1a340:	ldr	r3, [sp, #296]	; 0x128
   1a344:	str	r3, [r0]
   1a348:	b	1c92c <_start@@Base+0xa274>
   1a34c:	mov	r3, #4
   1a350:	mov	r2, sl
   1a354:	mov	r1, r9
   1a358:	mov	r0, r8
   1a35c:	bl	1467c <_start@@Base+0x1fc4>
   1a360:	cmp	r0, r9
   1a364:	beq	1a22c <_start@@Base+0x7b74>
   1a368:	ldr	r3, [pc, #640]	; 1a5f0 <_start@@Base+0x7f38>
   1a36c:	str	r3, [sp, #8]
   1a370:	ldr	r3, [sp, #292]	; 0x124
   1a374:	str	r3, [sp, #4]
   1a378:	mov	r3, #8
   1a37c:	str	r3, [sp]
   1a380:	mov	r3, #0
   1a384:	mov	r2, sl
   1a388:	mov	r1, r0
   1a38c:	mov	r0, r8
   1a390:	bl	2a470 <flatcc_json_parser_union@@Base>
   1a394:	mov	r9, r0
   1a398:	b	1c92c <_start@@Base+0xa274>
   1a39c:	mov	r3, #5
   1a3a0:	mov	r2, sl
   1a3a4:	mov	r1, r9
   1a3a8:	mov	r0, r8
   1a3ac:	bl	1467c <_start@@Base+0x1fc4>
   1a3b0:	mov	r6, r0
   1a3b4:	cmp	r0, r9
   1a3b8:	beq	1a240 <_start@@Base+0x7b88>
   1a3bc:	mvn	r3, #-1073741824	; 0xc0000000
   1a3c0:	mov	r2, #2
   1a3c4:	mov	r1, #4
   1a3c8:	ldr	r0, [r8]
   1a3cc:	bl	23e94 <flatcc_builder_start_vector@@Base>
   1a3d0:	cmp	r0, #0
   1a3d4:	bne	1db80 <_start@@Base+0xb4c8>
   1a3d8:	add	r3, sp, #300	; 0x12c
   1a3dc:	mov	r2, sl
   1a3e0:	mov	r1, r6
   1a3e4:	mov	r0, r8
   1a3e8:	bl	15c6c <_start@@Base+0x35b4>
   1a3ec:	mov	r9, r0
   1a3f0:	ldr	r3, [sp, #300]	; 0x12c
   1a3f4:	cmp	r3, #0
   1a3f8:	beq	1a448 <_start@@Base+0x7d90>
   1a3fc:	mov	r4, #1
   1a400:	mov	r1, r4
   1a404:	ldr	r0, [r8]
   1a408:	bl	2368c <flatcc_builder_extend_vector@@Base>
   1a40c:	subs	r3, r0, #0
   1a410:	beq	1dc14 <_start@@Base+0xb55c>
   1a414:	mov	r2, sl
   1a418:	mov	r1, r9
   1a41c:	mov	r0, r8
   1a420:	bl	16830 <_start@@Base+0x4178>
   1a424:	add	r3, sp, #300	; 0x12c
   1a428:	mov	r2, sl
   1a42c:	mov	r1, r0
   1a430:	mov	r0, r8
   1a434:	bl	18884 <_start@@Base+0x61cc>
   1a438:	mov	r9, r0
   1a43c:	ldr	r3, [sp, #300]	; 0x12c
   1a440:	cmp	r3, #0
   1a444:	bne	1a400 <_start@@Base+0x7d48>
   1a448:	ldr	r0, [r8]
   1a44c:	bl	24ea4 <flatcc_builder_end_vector@@Base>
   1a450:	str	r0, [sp, #296]	; 0x128
   1a454:	cmp	r0, #0
   1a458:	beq	1dc1c <_start@@Base+0xb564>
   1a45c:	mov	r1, #31
   1a460:	ldr	r0, [r8]
   1a464:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1a468:	cmp	r0, #0
   1a46c:	beq	1dc24 <_start@@Base+0xb56c>
   1a470:	ldr	r3, [sp, #296]	; 0x128
   1a474:	str	r3, [r0]
   1a478:	b	1c92c <_start@@Base+0xa274>
   1a47c:	add	r9, r9, #8
   1a480:	mov	r1, sl
   1a484:	mov	r0, r9
   1a488:	bl	127e0 <_start@@Base+0x128>
   1a48c:	mov	r0, #0
   1a490:	and	r1, r1, #-16777216	; 0xff000000
   1a494:	cmp	r1, #1694498816	; 0x65000000
   1a498:	cmpeq	r0, #0
   1a49c:	beq	1a4b8 <_start@@Base+0x7e00>
   1a4a0:	mov	r2, sl
   1a4a4:	mov	r1, r9
   1a4a8:	mov	r0, r8
   1a4ac:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1a4b0:	mov	r9, r0
   1a4b4:	b	1c92c <_start@@Base+0xa274>
   1a4b8:	mov	r3, #1
   1a4bc:	mov	r2, sl
   1a4c0:	mov	r1, r9
   1a4c4:	mov	r0, r8
   1a4c8:	bl	1467c <_start@@Base+0x1fc4>
   1a4cc:	mov	r1, r0
   1a4d0:	cmp	r9, r0
   1a4d4:	beq	1a514 <_start@@Base+0x7e5c>
   1a4d8:	ldr	r3, [pc, #272]	; 1a5f0 <_start@@Base+0x7f38>
   1a4dc:	str	r3, [sp, #12]
   1a4e0:	ldr	r3, [pc, #268]	; 1a5f4 <_start@@Base+0x7f3c>
   1a4e4:	add	r3, r3, #244	; 0xf4
   1a4e8:	str	r3, [sp, #8]
   1a4ec:	ldr	r3, [sp, #292]	; 0x124
   1a4f0:	str	r3, [sp, #4]
   1a4f4:	mov	r3, #8
   1a4f8:	str	r3, [sp]
   1a4fc:	mov	r3, #0
   1a500:	mov	r2, sl
   1a504:	mov	r0, r8
   1a508:	bl	2a5c4 <flatcc_json_parser_union_type@@Base>
   1a50c:	mov	r9, r0
   1a510:	b	1c92c <_start@@Base+0xa274>
   1a514:	mov	r2, sl
   1a518:	mov	r0, r8
   1a51c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1a520:	mov	r9, r0
   1a524:	b	1c92c <_start@@Base+0xa274>
   1a528:	add	r3, pc, #152	; 0x98
   1a52c:	ldrd	r2, [r3]
   1a530:	cmp	r1, r3
   1a534:	cmpeq	r0, r2
   1a538:	bhi	1c8e0 <_start@@Base+0xa228>
   1a53c:	add	r3, pc, #140	; 0x8c
   1a540:	ldrd	r2, [r3]
   1a544:	cmp	r1, r3
   1a548:	cmpeq	r0, r2
   1a54c:	beq	1a5f8 <_start@@Base+0x7f40>
   1a550:	add	r3, pc, #128	; 0x80
   1a554:	ldrd	r2, [r3]
   1a558:	cmp	r1, r3
   1a55c:	cmpeq	r0, r2
   1a560:	bhi	1be08 <_start@@Base+0x9750>
   1a564:	add	r3, pc, #116	; 0x74
   1a568:	ldrd	r2, [r3]
   1a56c:	cmp	r1, r3
   1a570:	cmpeq	r0, r2
   1a574:	beq	1b54c <_start@@Base+0x8e94>
   1a578:	add	r3, pc, #104	; 0x68
   1a57c:	ldrd	r2, [r3]
   1a580:	cmp	r1, r3
   1a584:	cmpeq	r0, r2
   1a588:	beq	1bc74 <_start@@Base+0x95bc>
   1a58c:	mov	r2, sl
   1a590:	mov	r1, r9
   1a594:	mov	r0, r8
   1a598:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1a59c:	mov	r9, r0
   1a5a0:	b	1c92c <_start@@Base+0xa274>
   1a5a4:	nop			; (mov r0, r0)
   1a5a8:	strcc	r0, [r0], #-0
   1a5ac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a5b0:	andeq	r0, r0, r0
   1a5b4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a5b8:	strcc	r0, [r0, #-0]
   1a5bc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a5c0:	svcpl	0x00747970
   1a5c4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a5c8:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1a5cc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a5d0:	cmnvs	r2, r1, ror #4
   1a5d4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a5d8:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1a5dc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a5e0:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1a5e4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a5e8:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1a5ec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a5f0:	andeq	sp, r1, ip, asr #27
   1a5f4:	andeq	lr, r3, r8, ror r0
   1a5f8:	add	r4, r9, #8
   1a5fc:	mov	r1, sl
   1a600:	mov	r0, r4
   1a604:	bl	127e0 <_start@@Base+0x128>
   1a608:	add	r3, pc, #880	; 0x370
   1a60c:	ldrd	r2, [r3]
   1a610:	cmp	r1, r3
   1a614:	cmpeq	r0, r2
   1a618:	bhi	1b134 <_start@@Base+0x8a7c>
   1a61c:	add	r3, pc, #868	; 0x364
   1a620:	ldrd	r2, [r3]
   1a624:	cmp	r1, r3
   1a628:	cmpeq	r0, r2
   1a62c:	beq	1a684 <_start@@Base+0x7fcc>
   1a630:	add	r3, pc, #856	; 0x358
   1a634:	ldrd	r2, [r3]
   1a638:	cmp	r1, r3
   1a63c:	cmpeq	r0, r2
   1a640:	bne	1b11c <_start@@Base+0x8a64>
   1a644:	add	r4, r9, #16
   1a648:	mov	r1, sl
   1a64c:	mov	r0, r4
   1a650:	bl	127e0 <_start@@Base+0x128>
   1a654:	bic	r0, r0, #255	; 0xff
   1a658:	add	r3, pc, #824	; 0x338
   1a65c:	ldrd	r2, [r3]
   1a660:	cmp	r1, r3
   1a664:	cmpeq	r0, r2
   1a668:	beq	1a8c4 <_start@@Base+0x820c>
   1a66c:	mov	r2, sl
   1a670:	mov	r1, r4
   1a674:	mov	r0, r8
   1a678:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1a67c:	mov	r9, r0
   1a680:	b	1c92c <_start@@Base+0xa274>
   1a684:	mov	r3, #8
   1a688:	mov	r2, sl
   1a68c:	mov	r1, r4
   1a690:	mov	r0, r8
   1a694:	bl	1467c <_start@@Base+0x1fc4>
   1a698:	mov	r9, r0
   1a69c:	cmp	r4, r0
   1a6a0:	beq	1b118 <_start@@Base+0x8a60>
   1a6a4:	mvn	r3, #0
   1a6a8:	mov	r2, #1
   1a6ac:	mov	r1, r2
   1a6b0:	ldr	r0, [r8]
   1a6b4:	bl	23e94 <flatcc_builder_start_vector@@Base>
   1a6b8:	cmp	r0, #0
   1a6bc:	bne	1dc2c <_start@@Base+0xb574>
   1a6c0:	add	r3, sp, #300	; 0x12c
   1a6c4:	mov	r2, sl
   1a6c8:	mov	r1, r9
   1a6cc:	mov	r0, r8
   1a6d0:	bl	15c6c <_start@@Base+0x35b4>
   1a6d4:	mov	r9, r0
   1a6d8:	ldr	r3, [sp, #300]	; 0x12c
   1a6dc:	cmp	r3, #0
   1a6e0:	beq	1a890 <_start@@Base+0x81d8>
   1a6e4:	mov	r5, #0
   1a6e8:	mov	r7, #1
   1a6ec:	ldr	fp, [pc, #684]	; 1a9a0 <_start@@Base+0x82e8>
   1a6f0:	ldr	r3, [pc, #684]	; 1a9a4 <_start@@Base+0x82ec>
   1a6f4:	add	r3, r3, #260	; 0x104
   1a6f8:	str	r3, [sp, #20]
   1a6fc:	b	1a760 <_start@@Base+0x80a8>
   1a700:	mov	r3, #8
   1a704:	mov	r2, sl
   1a708:	mov	r0, r8
   1a70c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1a710:	mov	r1, r0
   1a714:	mov	r2, r5
   1a718:	b	1a724 <_start@@Base+0x806c>
   1a71c:	mov	r1, r9
   1a720:	mov	r2, r5
   1a724:	adds	r2, r2, #0
   1a728:	movne	r2, #1
   1a72c:	strb	r2, [sp, #272]	; 0x110
   1a730:	cmp	r1, r9
   1a734:	beq	1a858 <_start@@Base+0x81a0>
   1a738:	ldrb	r3, [sp, #272]	; 0x110
   1a73c:	strb	r3, [r4]
   1a740:	add	r3, sp, #300	; 0x12c
   1a744:	mov	r2, sl
   1a748:	mov	r0, r8
   1a74c:	bl	18884 <_start@@Base+0x61cc>
   1a750:	mov	r9, r0
   1a754:	ldr	r3, [sp, #300]	; 0x12c
   1a758:	cmp	r3, #0
   1a75c:	beq	1a890 <_start@@Base+0x81d8>
   1a760:	strb	r5, [sp, #272]	; 0x110
   1a764:	mov	r1, r7
   1a768:	ldr	r0, [r8]
   1a76c:	bl	2368c <flatcc_builder_extend_vector@@Base>
   1a770:	subs	r4, r0, #0
   1a774:	beq	1dc34 <_start@@Base+0xb57c>
   1a778:	sub	r6, sl, r9
   1a77c:	cmp	r6, #3
   1a780:	ble	1a7a4 <_start@@Base+0x80ec>
   1a784:	mov	r2, #4
   1a788:	ldr	r1, [pc, #536]	; 1a9a8 <_start@@Base+0x82f0>
   1a78c:	mov	r0, r9
   1a790:	bl	125c4 <memcmp@plt>
   1a794:	cmp	r0, #0
   1a798:	strbeq	r7, [sp, #272]	; 0x110
   1a79c:	addeq	r1, r9, #4
   1a7a0:	beq	1a730 <_start@@Base+0x8078>
   1a7a4:	cmp	r6, #4
   1a7a8:	ble	1a7cc <_start@@Base+0x8114>
   1a7ac:	mov	r2, #5
   1a7b0:	mov	r1, fp
   1a7b4:	mov	r0, r9
   1a7b8:	bl	125c4 <memcmp@plt>
   1a7bc:	cmp	r0, #0
   1a7c0:	strbeq	r5, [sp, #272]	; 0x110
   1a7c4:	addeq	r1, r9, #5
   1a7c8:	beq	1a730 <_start@@Base+0x8078>
   1a7cc:	mov	r2, #0
   1a7d0:	mov	r3, #0
   1a7d4:	add	r1, sp, #280	; 0x118
   1a7d8:	strd	r2, [r1]
   1a7dc:	str	r5, [sp, #276]	; 0x114
   1a7e0:	cmp	sl, r9
   1a7e4:	beq	1a71c <_start@@Base+0x8064>
   1a7e8:	str	r1, [sp]
   1a7ec:	add	r3, sp, #276	; 0x114
   1a7f0:	mov	r2, sl
   1a7f4:	mov	r1, r9
   1a7f8:	mov	r0, r8
   1a7fc:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   1a800:	mov	r1, r0
   1a804:	cmp	r0, r9
   1a808:	beq	1a84c <_start@@Base+0x8194>
   1a80c:	ldr	r3, [sp, #276]	; 0x114
   1a810:	cmp	r3, #0
   1a814:	bne	1a700 <_start@@Base+0x8048>
   1a818:	add	r3, sp, #280	; 0x118
   1a81c:	ldrd	r2, [r3]
   1a820:	cmp	r3, #0
   1a824:	cmpeq	r2, #255	; 0xff
   1a828:	uxtbls	r2, r2
   1a82c:	bls	1a724 <_start@@Base+0x806c>
   1a830:	mov	r3, #7
   1a834:	mov	r2, sl
   1a838:	mov	r0, r8
   1a83c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1a840:	mov	r1, r0
   1a844:	mov	r2, r5
   1a848:	b	1a724 <_start@@Base+0x806c>
   1a84c:	mov	r1, r9
   1a850:	mov	r2, r5
   1a854:	b	1a724 <_start@@Base+0x806c>
   1a858:	add	r3, sp, #272	; 0x110
   1a85c:	str	r3, [sp]
   1a860:	ldr	r3, [sp, #20]
   1a864:	mov	r2, sl
   1a868:	mov	r1, r9
   1a86c:	mov	r0, r8
   1a870:	bl	14b14 <_start@@Base+0x245c>
   1a874:	mov	r1, r0
   1a878:	cmp	sl, r0
   1a87c:	cmpne	r0, r9
   1a880:	bne	1a738 <_start@@Base+0x8080>
   1a884:	mov	fp, r8
   1a888:	mov	r9, r0
   1a88c:	b	1dad4 <_start@@Base+0xb41c>
   1a890:	ldr	r0, [r8]
   1a894:	bl	24ea4 <flatcc_builder_end_vector@@Base>
   1a898:	str	r0, [sp, #296]	; 0x128
   1a89c:	cmp	r0, #0
   1a8a0:	beq	1dc3c <_start@@Base+0xb584>
   1a8a4:	mov	r1, #24
   1a8a8:	ldr	r0, [r8]
   1a8ac:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1a8b0:	cmp	r0, #0
   1a8b4:	beq	1dc44 <_start@@Base+0xb58c>
   1a8b8:	ldr	r3, [sp, #296]	; 0x128
   1a8bc:	str	r3, [r0]
   1a8c0:	b	1c92c <_start@@Base+0xa274>
   1a8c4:	mov	r3, #7
   1a8c8:	mov	r2, sl
   1a8cc:	mov	r1, r4
   1a8d0:	mov	r0, r8
   1a8d4:	bl	1467c <_start@@Base+0x1fc4>
   1a8d8:	mov	r9, r0
   1a8dc:	cmp	r4, r0
   1a8e0:	beq	1b100 <_start@@Base+0x8a48>
   1a8e4:	mvn	r3, #-536870912	; 0xe0000000
   1a8e8:	mov	r2, #4
   1a8ec:	mov	r1, #8
   1a8f0:	ldr	r0, [r8]
   1a8f4:	bl	23e94 <flatcc_builder_start_vector@@Base>
   1a8f8:	cmp	r0, #0
   1a8fc:	bne	1dc4c <_start@@Base+0xb594>
   1a900:	add	r3, sp, #300	; 0x12c
   1a904:	mov	r2, sl
   1a908:	mov	r1, r9
   1a90c:	mov	r0, r8
   1a910:	bl	15c6c <_start@@Base+0x35b4>
   1a914:	mov	r9, r0
   1a918:	ldr	r3, [sp, #300]	; 0x12c
   1a91c:	cmp	r3, #0
   1a920:	beq	1b0cc <_start@@Base+0x8a14>
   1a924:	mov	fp, #1
   1a928:	ldr	r3, [pc, #116]	; 1a9a4 <_start@@Base+0x82ec>
   1a92c:	add	r3, r3, #284	; 0x11c
   1a930:	str	r3, [sp, #260]	; 0x104
   1a934:	str	r8, [sp, #20]
   1a938:	mov	r4, r0
   1a93c:	ldrd	r8, [sp, #120]	; 0x78
   1a940:	b	1af3c <_start@@Base+0x8884>
   1a944:	add	r4, r4, #1
   1a948:	ldr	r3, [sp, #20]
   1a94c:	str	r5, [r3, #12]
   1a950:	b	1ab9c <_start@@Base+0x84e4>
   1a954:	mov	r3, #5
   1a958:	mov	r2, sl
   1a95c:	mov	r1, r4
   1a960:	ldr	r0, [sp, #20]
   1a964:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1a968:	mov	r4, r0
   1a96c:	b	1ab9c <_start@@Base+0x84e4>
   1a970:	ldrb	r0, [r4, #7]
   1a974:	mov	r1, #0
   1a978:	b	1a9bc <_start@@Base+0x8304>
   1a97c:	nop			; (mov r0, r0)
   1a980:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1a984:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a988:	svcvs	0x006f6c73
   1a98c:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a990:	svcvs	0x00727465
   1a994:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1a998:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1a99c:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1a9a0:	andeq	fp, r2, r0, lsr #13
   1a9a4:	andeq	lr, r3, r8, ror r0
   1a9a8:	muleq	r2, r8, r6
   1a9ac:			; <UNDEFINED> instruction: 0xffff0000
   1a9b0:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1a9b4:	mov	r0, #0
   1a9b8:	mov	r1, #0
   1a9bc:	ldrb	r2, [r4, #6]
   1a9c0:	mov	lr, #0
   1a9c4:	str	lr, [sp, #100]	; 0x64
   1a9c8:	lsl	r3, r2, #8
   1a9cc:	str	r3, [sp, #96]	; 0x60
   1a9d0:	ldrd	r2, [sp, #96]	; 0x60
   1a9d4:	orr	r2, r2, r0
   1a9d8:	orr	r3, r3, r1
   1a9dc:	ldrb	r0, [r4, #5]
   1a9e0:	mov	lr, #0
   1a9e4:	str	lr, [sp, #76]	; 0x4c
   1a9e8:	lsl	r1, r0, #16
   1a9ec:	str	r1, [sp, #72]	; 0x48
   1a9f0:	ldrd	r0, [sp, #72]	; 0x48
   1a9f4:	orr	r0, r0, r2
   1a9f8:	orr	r1, r1, r3
   1a9fc:	mov	r2, r0
   1aa00:	mov	r3, r1
   1aa04:	ldrb	r0, [r4, #4]
   1aa08:	mov	lr, #0
   1aa0c:	str	lr, [sp, #52]	; 0x34
   1aa10:	lsl	r1, r0, #24
   1aa14:	str	r1, [sp, #48]	; 0x30
   1aa18:	ldrd	r0, [sp, #48]	; 0x30
   1aa1c:	orr	r0, r0, r2
   1aa20:	orr	r1, r1, r3
   1aa24:	mov	r2, r0
   1aa28:	mov	r3, r1
   1aa2c:	ldrb	r1, [r4, #3]
   1aa30:	str	r1, [sp, #44]	; 0x2c
   1aa34:	mov	r1, #0
   1aa38:	str	r1, [sp, #40]	; 0x28
   1aa3c:	ldrd	r0, [sp, #40]	; 0x28
   1aa40:	orr	r0, r0, r2
   1aa44:	orr	r1, r1, r3
   1aa48:	mov	r2, r0
   1aa4c:	mov	r3, r1
   1aa50:	ldrb	r0, [r4, #2]
   1aa54:	lsl	r1, r0, #8
   1aa58:	str	r1, [sp, #36]	; 0x24
   1aa5c:	mov	r1, #0
   1aa60:	str	r1, [sp, #32]
   1aa64:	ldrd	r0, [sp, #32]
   1aa68:	orr	r0, r0, r2
   1aa6c:	orr	r1, r1, r3
   1aa70:	mov	r2, r0
   1aa74:	mov	r3, r1
   1aa78:	ldrb	r0, [r4, #1]
   1aa7c:	lsl	r1, r0, #16
   1aa80:	str	r1, [sp, #28]
   1aa84:	mov	r1, #0
   1aa88:	str	r1, [sp, #24]
   1aa8c:	ldrd	r0, [sp, #24]
   1aa90:	orr	r0, r0, r2
   1aa94:	orr	r1, r1, r3
   1aa98:	mov	r2, r0
   1aa9c:	mov	r3, r1
   1aaa0:	ldrb	r0, [r4]
   1aaa4:	lsl	r9, r0, #24
   1aaa8:	mov	r8, #0
   1aaac:	orr	r2, r2, r8
   1aab0:	orr	r3, r3, r9
   1aab4:	mov	r0, #0
   1aab8:	ldr	r1, [pc, #-276]	; 1a9ac <_start@@Base+0x82f4>
   1aabc:	and	r0, r0, r2
   1aac0:	and	r1, r1, r3
   1aac4:	mov	r6, #0
   1aac8:	ldr	r7, [pc, #-288]	; 1a9b0 <_start@@Base+0x82f8>
   1aacc:	cmp	r1, r7
   1aad0:	cmpeq	r0, r6
   1aad4:	beq	1ac24 <_start@@Base+0x856c>
   1aad8:	add	r1, pc, #968	; 0x3c8
   1aadc:	ldrd	r0, [r1]
   1aae0:	cmp	r3, r1
   1aae4:	cmpeq	r2, r0
   1aae8:	beq	1ad48 <_start@@Base+0x8690>
   1aaec:	mov	r2, sl
   1aaf0:	mov	r1, r4
   1aaf4:	ldr	r0, [sp, #20]
   1aaf8:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1aafc:	sub	r3, sl, r0
   1ab00:	cmp	r3, #1
   1ab04:	ble	1ab18 <_start@@Base+0x8460>
   1ab08:	ldrb	r3, [r0]
   1ab0c:	cmp	r3, #32
   1ab10:	bhi	1ab28 <_start@@Base+0x8470>
   1ab14:	beq	1af90 <_start@@Base+0x88d8>
   1ab18:	mov	r2, sl
   1ab1c:	mov	r1, r0
   1ab20:	ldr	r0, [sp, #20]
   1ab24:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1ab28:	cmp	sl, r0
   1ab2c:	streq	r5, [sp, #268]	; 0x10c
   1ab30:	moveq	r4, r0
   1ab34:	beq	1ab6c <_start@@Base+0x84b4>
   1ab38:	ldrb	r3, [r0]
   1ab3c:	cmp	r3, #44	; 0x2c
   1ab40:	beq	1aff0 <_start@@Base+0x8938>
   1ab44:	str	r5, [sp, #268]	; 0x10c
   1ab48:	ldrb	r3, [r0]
   1ab4c:	cmp	r3, #125	; 0x7d
   1ab50:	beq	1afa4 <_start@@Base+0x88ec>
   1ab54:	mov	r3, #10
   1ab58:	mov	r2, sl
   1ab5c:	mov	r1, r0
   1ab60:	ldr	r0, [sp, #20]
   1ab64:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1ab68:	mov	r4, r0
   1ab6c:	ldr	r3, [sp, #268]	; 0x10c
   1ab70:	cmp	r3, #0
   1ab74:	beq	1af18 <_start@@Base+0x8860>
   1ab78:	cmp	sl, r4
   1ab7c:	beq	1ab9c <_start@@Base+0x84e4>
   1ab80:	ldrb	r3, [r4]
   1ab84:	cmp	r3, #34	; 0x22
   1ab88:	beq	1a944 <_start@@Base+0x828c>
   1ab8c:	cmp	r3, #46	; 0x2e
   1ab90:	ldrne	r3, [sp, #20]
   1ab94:	strne	fp, [r3, #12]
   1ab98:	beq	1a954 <_start@@Base+0x829c>
   1ab9c:	sub	ip, sl, r4
   1aba0:	cmp	ip, #8
   1aba4:	movcc	r3, ip
   1aba8:	movcs	r3, #8
   1abac:	sub	r3, r3, #1
   1abb0:	cmp	r3, #7
   1abb4:	ldrls	pc, [pc, r3, lsl #2]
   1abb8:	b	1aaec <_start@@Base+0x8434>
   1abbc:	andeq	sl, r1, r8, lsl ip
   1abc0:	andeq	sl, r1, ip, lsl #24
   1abc4:	andeq	sl, r1, r0, lsl #24
   1abc8:	strdeq	sl, [r1], -r4
   1abcc:	andeq	sl, r1, r8, ror #23
   1abd0:	ldrdeq	sl, [r1], -ip
   1abd4:			; <UNDEFINED> instruction: 0x0001a9b4
   1abd8:	andeq	sl, r1, r0, ror r9
   1abdc:	mov	r2, #0
   1abe0:	mov	r3, #0
   1abe4:	b	1a9dc <_start@@Base+0x8324>
   1abe8:	mov	r2, #0
   1abec:	mov	r3, #0
   1abf0:	b	1aa04 <_start@@Base+0x834c>
   1abf4:	mov	r2, #0
   1abf8:	mov	r3, #0
   1abfc:	b	1aa2c <_start@@Base+0x8374>
   1ac00:	mov	r2, #0
   1ac04:	mov	r3, #0
   1ac08:	b	1aa50 <_start@@Base+0x8398>
   1ac0c:	mov	r2, #0
   1ac10:	mov	r3, #0
   1ac14:	b	1aa78 <_start@@Base+0x83c0>
   1ac18:	mov	r2, #0
   1ac1c:	mov	r3, #0
   1ac20:	b	1aaa0 <_start@@Base+0x83e8>
   1ac24:	mov	r3, #2
   1ac28:	mov	r2, sl
   1ac2c:	mov	r1, r4
   1ac30:	ldr	r7, [sp, #20]
   1ac34:	mov	r0, r7
   1ac38:	bl	1467c <_start@@Base+0x1fc4>
   1ac3c:	mov	r1, r0
   1ac40:	str	r0, [sp, #184]	; 0xb8
   1ac44:	cmp	r0, r4
   1ac48:	beq	1ad34 <_start@@Base+0x867c>
   1ac4c:	str	r5, [sp, #272]	; 0x110
   1ac50:	mov	r2, #0
   1ac54:	mov	r3, #0
   1ac58:	add	r0, sp, #280	; 0x118
   1ac5c:	strd	r2, [r0]
   1ac60:	str	r5, [sp, #276]	; 0x114
   1ac64:	mov	r4, r1
   1ac68:	cmp	sl, r1
   1ac6c:	beq	1ace8 <_start@@Base+0x8630>
   1ac70:	str	r0, [sp]
   1ac74:	add	r3, sp, #276	; 0x114
   1ac78:	mov	r2, sl
   1ac7c:	mov	r0, r7
   1ac80:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   1ac84:	cmp	r4, r0
   1ac88:	beq	1ace8 <_start@@Base+0x8630>
   1ac8c:	ldr	r3, [sp, #276]	; 0x114
   1ac90:	cmp	r3, r8
   1ac94:	bne	1acc8 <_start@@Base+0x8610>
   1ac98:	add	r3, sp, #280	; 0x118
   1ac9c:	ldrd	r2, [r3]
   1aca0:	mvn	r6, #0
   1aca4:	mov	r7, #0
   1aca8:	cmp	r3, r7
   1acac:	cmpeq	r2, r6
   1acb0:	strls	r2, [sp, #272]	; 0x110
   1acb4:	bhi	1ad1c <_start@@Base+0x8664>
   1acb8:	ldr	r3, [sp, #272]	; 0x110
   1acbc:	ldr	r2, [sp, #120]	; 0x78
   1acc0:	str	r3, [r2]
   1acc4:	b	1aafc <_start@@Base+0x8444>
   1acc8:	mov	r3, #8
   1accc:	mov	r2, sl
   1acd0:	mov	r1, r0
   1acd4:	ldr	r0, [sp, #20]
   1acd8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1acdc:	ldr	r3, [sp, #184]	; 0xb8
   1ace0:	cmp	r3, r0
   1ace4:	bne	1acb8 <_start@@Base+0x8600>
   1ace8:	add	r3, sp, #272	; 0x110
   1acec:	str	r3, [sp]
   1acf0:	ldr	r3, [pc, #440]	; 1aeb0 <_start@@Base+0x87f8>
   1acf4:	add	r3, r3, #272	; 0x110
   1acf8:	mov	r2, sl
   1acfc:	ldr	r4, [sp, #184]	; 0xb8
   1ad00:	mov	r1, r4
   1ad04:	ldr	r0, [sp, #20]
   1ad08:	bl	15804 <_start@@Base+0x314c>
   1ad0c:	cmp	sl, r0
   1ad10:	cmpne	r4, r0
   1ad14:	bne	1acb8 <_start@@Base+0x8600>
   1ad18:	b	1af00 <_start@@Base+0x8848>
   1ad1c:	mov	r3, #7
   1ad20:	mov	r2, sl
   1ad24:	mov	r1, r0
   1ad28:	ldr	r0, [sp, #20]
   1ad2c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1ad30:	b	1acdc <_start@@Base+0x8624>
   1ad34:	mov	r2, sl
   1ad38:	ldr	r1, [sp, #184]	; 0xb8
   1ad3c:	ldr	r0, [sp, #20]
   1ad40:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1ad44:	b	1aafc <_start@@Base+0x8444>
   1ad48:	cmp	ip, #8
   1ad4c:	ble	1ae60 <_start@@Base+0x87a8>
   1ad50:	ldr	r2, [sp, #20]
   1ad54:	ldr	r3, [r2, #12]
   1ad58:	cmp	r3, #0
   1ad5c:	beq	1ae54 <_start@@Base+0x879c>
   1ad60:	ldrb	r3, [r4, #8]
   1ad64:	cmp	r3, #58	; 0x3a
   1ad68:	cmpne	r3, #32
   1ad6c:	addls	r1, r4, #8
   1ad70:	strls	r5, [r2, #12]
   1ad74:	bhi	1ae60 <_start@@Base+0x87a8>
   1ad78:	sub	r3, sl, r1
   1ad7c:	cmp	r3, #1
   1ad80:	ble	1ad94 <_start@@Base+0x86dc>
   1ad84:	ldrb	r3, [r1]
   1ad88:	cmp	r3, #32
   1ad8c:	bhi	1ada4 <_start@@Base+0x86ec>
   1ad90:	beq	1ae7c <_start@@Base+0x87c4>
   1ad94:	mov	r2, sl
   1ad98:	ldr	r0, [sp, #20]
   1ad9c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1ada0:	mov	r1, r0
   1ada4:	cmp	sl, r1
   1ada8:	beq	1adb8 <_start@@Base+0x8700>
   1adac:	ldrb	r3, [r1]
   1adb0:	cmp	r3, #58	; 0x3a
   1adb4:	beq	1ae90 <_start@@Base+0x87d8>
   1adb8:	mov	r3, #4
   1adbc:	mov	r2, sl
   1adc0:	ldr	r0, [sp, #20]
   1adc4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1adc8:	str	r0, [sp, #184]	; 0xb8
   1adcc:	ldr	r1, [sp, #184]	; 0xb8
   1add0:	cmp	r1, r4
   1add4:	beq	1ae60 <_start@@Base+0x87a8>
   1add8:	str	r5, [sp, #272]	; 0x110
   1addc:	mov	r2, #0
   1ade0:	mov	r3, #0
   1ade4:	add	r0, sp, #280	; 0x118
   1ade8:	strd	r2, [r0]
   1adec:	str	r5, [sp, #276]	; 0x114
   1adf0:	cmp	sl, r1
   1adf4:	beq	1aed4 <_start@@Base+0x881c>
   1adf8:	str	r0, [sp]
   1adfc:	add	r3, sp, #276	; 0x114
   1ae00:	mov	r2, sl
   1ae04:	mov	r4, r1
   1ae08:	ldr	r0, [sp, #20]
   1ae0c:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   1ae10:	cmp	r4, r0
   1ae14:	beq	1aed4 <_start@@Base+0x881c>
   1ae18:	ldr	r3, [sp, #276]	; 0x114
   1ae1c:	cmp	r3, #0
   1ae20:	bne	1aeb4 <_start@@Base+0x87fc>
   1ae24:	add	r3, sp, #280	; 0x118
   1ae28:	ldrd	r2, [r3]
   1ae2c:	mvn	r6, #0
   1ae30:	mov	r7, #0
   1ae34:	cmp	r3, r7
   1ae38:	cmpeq	r2, r6
   1ae3c:	strls	r2, [sp, #272]	; 0x110
   1ae40:	bhi	1af78 <_start@@Base+0x88c0>
   1ae44:	ldr	r3, [sp, #272]	; 0x110
   1ae48:	ldr	r2, [sp, #120]	; 0x78
   1ae4c:	str	r3, [r2, #4]
   1ae50:	b	1aafc <_start@@Base+0x8444>
   1ae54:	ldrb	r3, [r4, #8]
   1ae58:	cmp	r3, #34	; 0x22
   1ae5c:	beq	1ae74 <_start@@Base+0x87bc>
   1ae60:	mov	r2, sl
   1ae64:	mov	r1, r4
   1ae68:	ldr	r0, [sp, #20]
   1ae6c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1ae70:	b	1aafc <_start@@Base+0x8444>
   1ae74:	add	r1, r4, #9
   1ae78:	b	1ad78 <_start@@Base+0x86c0>
   1ae7c:	ldrb	r3, [r1, #1]
   1ae80:	cmp	r3, #32
   1ae84:	addhi	r1, r1, #1
   1ae88:	bls	1ad94 <_start@@Base+0x86dc>
   1ae8c:	b	1ada4 <_start@@Base+0x86ec>
   1ae90:	mov	r2, sl
   1ae94:	add	r1, r1, #1
   1ae98:	ldr	r0, [sp, #20]
   1ae9c:	bl	1447c <_start@@Base+0x1dc4>
   1aea0:	str	r0, [sp, #184]	; 0xb8
   1aea4:	b	1adcc <_start@@Base+0x8714>
   1aea8:	cmnvs	lr, r5, ror #6
   1aeac:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1aeb0:	andeq	lr, r3, r8, ror r0
   1aeb4:	mov	r3, #8
   1aeb8:	mov	r2, sl
   1aebc:	mov	r1, r0
   1aec0:	ldr	r0, [sp, #20]
   1aec4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1aec8:	ldr	r3, [sp, #184]	; 0xb8
   1aecc:	cmp	r3, r0
   1aed0:	bne	1ae44 <_start@@Base+0x878c>
   1aed4:	add	r3, sp, #272	; 0x110
   1aed8:	str	r3, [sp]
   1aedc:	ldr	r3, [sp, #260]	; 0x104
   1aee0:	mov	r2, sl
   1aee4:	ldr	r4, [sp, #184]	; 0xb8
   1aee8:	mov	r1, r4
   1aeec:	ldr	r0, [sp, #20]
   1aef0:	bl	15804 <_start@@Base+0x314c>
   1aef4:	cmp	sl, r0
   1aef8:	cmpne	r0, r4
   1aefc:	bne	1ae44 <_start@@Base+0x878c>
   1af00:	mov	r3, #33	; 0x21
   1af04:	mov	r2, sl
   1af08:	mov	r1, r0
   1af0c:	ldr	r0, [sp, #20]
   1af10:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1af14:	mov	r4, r0
   1af18:	add	r3, sp, #300	; 0x12c
   1af1c:	mov	r2, sl
   1af20:	mov	r1, r4
   1af24:	ldr	r0, [sp, #20]
   1af28:	bl	18884 <_start@@Base+0x61cc>
   1af2c:	mov	r4, r0
   1af30:	ldr	r3, [sp, #300]	; 0x12c
   1af34:	cmp	r3, #0
   1af38:	beq	1b0c0 <_start@@Base+0x8a08>
   1af3c:	mov	r1, fp
   1af40:	ldr	r5, [sp, #20]
   1af44:	ldr	r0, [r5]
   1af48:	bl	2368c <flatcc_builder_extend_vector@@Base>
   1af4c:	subs	r3, r0, #0
   1af50:	str	r3, [sp, #120]	; 0x78
   1af54:	beq	1dc54 <_start@@Base+0xb59c>
   1af58:	add	r3, sp, #268	; 0x10c
   1af5c:	mov	r2, sl
   1af60:	mov	r1, r4
   1af64:	mov	r0, r5
   1af68:	bl	15d2c <_start@@Base+0x3674>
   1af6c:	mov	r4, r0
   1af70:	mov	r5, #0
   1af74:	b	1ab6c <_start@@Base+0x84b4>
   1af78:	mov	r3, #7
   1af7c:	mov	r2, sl
   1af80:	mov	r1, r0
   1af84:	ldr	r0, [sp, #20]
   1af88:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1af8c:	b	1aec8 <_start@@Base+0x8810>
   1af90:	ldrb	r3, [r0, #1]
   1af94:	cmp	r3, #32
   1af98:	addhi	r0, r0, #1
   1af9c:	bls	1ab18 <_start@@Base+0x8460>
   1afa0:	b	1ab28 <_start@@Base+0x8470>
   1afa4:	add	r4, r0, #1
   1afa8:	sub	r3, sl, r4
   1afac:	cmp	r3, #1
   1afb0:	ble	1afc4 <_start@@Base+0x890c>
   1afb4:	ldrb	r3, [r0, #1]
   1afb8:	cmp	r3, #32
   1afbc:	bhi	1ab6c <_start@@Base+0x84b4>
   1afc0:	beq	1afdc <_start@@Base+0x8924>
   1afc4:	mov	r2, sl
   1afc8:	mov	r1, r4
   1afcc:	ldr	r0, [sp, #20]
   1afd0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1afd4:	mov	r4, r0
   1afd8:	b	1ab6c <_start@@Base+0x84b4>
   1afdc:	ldrb	r3, [r0, #2]
   1afe0:	cmp	r3, #32
   1afe4:	addhi	r4, r0, #2
   1afe8:	bls	1afc4 <_start@@Base+0x890c>
   1afec:	b	1ab6c <_start@@Base+0x84b4>
   1aff0:	add	r4, r0, #1
   1aff4:	sub	r3, sl, r4
   1aff8:	cmp	r3, #1
   1affc:	ble	1b010 <_start@@Base+0x8958>
   1b000:	ldrb	r3, [r0, #1]
   1b004:	cmp	r3, #32
   1b008:	bhi	1b024 <_start@@Base+0x896c>
   1b00c:	beq	1b078 <_start@@Base+0x89c0>
   1b010:	mov	r2, sl
   1b014:	mov	r1, r4
   1b018:	ldr	r0, [sp, #20]
   1b01c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1b020:	mov	r4, r0
   1b024:	cmp	sl, r4
   1b028:	beq	1b08c <_start@@Base+0x89d4>
   1b02c:	ldrb	r3, [r4]
   1b030:	cmp	r3, #125	; 0x7d
   1b034:	strne	fp, [sp, #268]	; 0x10c
   1b038:	bne	1ab6c <_start@@Base+0x84b4>
   1b03c:	str	r5, [sp, #268]	; 0x10c
   1b040:	add	r1, r4, #1
   1b044:	sub	r3, sl, r1
   1b048:	cmp	r3, #1
   1b04c:	ble	1b064 <_start@@Base+0x89ac>
   1b050:	ldrb	r3, [r4, #1]
   1b054:	cmp	r3, #32
   1b058:	movhi	r4, r1
   1b05c:	bhi	1ab6c <_start@@Base+0x84b4>
   1b060:	beq	1b0ac <_start@@Base+0x89f4>
   1b064:	mov	r2, sl
   1b068:	ldr	r0, [sp, #20]
   1b06c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1b070:	mov	r4, r0
   1b074:	b	1ab6c <_start@@Base+0x84b4>
   1b078:	ldrb	r3, [r0, #2]
   1b07c:	cmp	r3, #32
   1b080:	addhi	r4, r0, #2
   1b084:	bls	1b010 <_start@@Base+0x8958>
   1b088:	b	1b024 <_start@@Base+0x896c>
   1b08c:	str	r5, [sp, #268]	; 0x10c
   1b090:	mov	r3, #10
   1b094:	mov	r2, sl
   1b098:	mov	r1, r4
   1b09c:	ldr	r0, [sp, #20]
   1b0a0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1b0a4:	mov	r4, r0
   1b0a8:	b	1ab6c <_start@@Base+0x84b4>
   1b0ac:	ldrb	r3, [r4, #2]
   1b0b0:	cmp	r3, #32
   1b0b4:	addhi	r4, r4, #2
   1b0b8:	bls	1b064 <_start@@Base+0x89ac>
   1b0bc:	b	1ab6c <_start@@Base+0x84b4>
   1b0c0:	strd	r8, [sp, #120]	; 0x78
   1b0c4:	ldr	r8, [sp, #20]
   1b0c8:	mov	r9, r0
   1b0cc:	ldr	r0, [r8]
   1b0d0:	bl	24ea4 <flatcc_builder_end_vector@@Base>
   1b0d4:	str	r0, [sp, #296]	; 0x128
   1b0d8:	cmp	r0, #0
   1b0dc:	beq	1dc60 <_start@@Base+0xb5a8>
   1b0e0:	mov	r1, #29
   1b0e4:	ldr	r0, [r8]
   1b0e8:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1b0ec:	cmp	r0, #0
   1b0f0:	beq	1dc68 <_start@@Base+0xb5b0>
   1b0f4:	ldr	r3, [sp, #296]	; 0x128
   1b0f8:	str	r3, [r0]
   1b0fc:	b	1c92c <_start@@Base+0xa274>
   1b100:	mov	r2, sl
   1b104:	mov	r1, r0
   1b108:	mov	r0, r8
   1b10c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b110:	mov	r9, r0
   1b114:	b	1c92c <_start@@Base+0xa274>
   1b118:	mov	r4, r0
   1b11c:	mov	r2, sl
   1b120:	mov	r1, r4
   1b124:	mov	r0, r8
   1b128:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b12c:	mov	r9, r0
   1b130:	b	1c92c <_start@@Base+0xa274>
   1b134:	add	r3, pc, #988	; 0x3dc
   1b138:	ldrd	r2, [r3]
   1b13c:	cmp	r1, r3
   1b140:	cmpeq	r0, r2
   1b144:	beq	1b174 <_start@@Base+0x8abc>
   1b148:	add	r3, pc, #976	; 0x3d0
   1b14c:	ldrd	r2, [r3]
   1b150:	cmp	r1, r3
   1b154:	cmpeq	r0, r2
   1b158:	beq	1b3e8 <_start@@Base+0x8d30>
   1b15c:	mov	r2, sl
   1b160:	mov	r1, r4
   1b164:	mov	r0, r8
   1b168:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b16c:	mov	r9, r0
   1b170:	b	1c92c <_start@@Base+0xa274>
   1b174:	add	r4, r9, #16
   1b178:	mov	r1, sl
   1b17c:	mov	r0, r4
   1b180:	bl	127e0 <_start@@Base+0x128>
   1b184:	mov	r7, r1
   1b188:	mov	r2, #0
   1b18c:	ldr	r3, [pc, #920]	; 1b52c <_start@@Base+0x8e74>
   1b190:	and	r2, r2, r0
   1b194:	and	r3, r3, r1
   1b198:	mov	r0, #0
   1b19c:	ldr	r1, [pc, #900]	; 1b528 <_start@@Base+0x8e70>
   1b1a0:	cmp	r3, r1
   1b1a4:	cmpeq	r2, r0
   1b1a8:	beq	1b1d8 <_start@@Base+0x8b20>
   1b1ac:	mov	r6, #0
   1b1b0:	and	r7, r7, #-16777216	; 0xff000000
   1b1b4:	cmp	r7, #1728053248	; 0x67000000
   1b1b8:	cmpeq	r6, #0
   1b1bc:	beq	1b2e0 <_start@@Base+0x8c28>
   1b1c0:	mov	r2, sl
   1b1c4:	mov	r1, r4
   1b1c8:	mov	r0, r8
   1b1cc:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b1d0:	mov	r9, r0
   1b1d4:	b	1c92c <_start@@Base+0xa274>
   1b1d8:	mov	r3, #2
   1b1dc:	mov	r2, sl
   1b1e0:	mov	r1, r4
   1b1e4:	mov	r0, r8
   1b1e8:	bl	1467c <_start@@Base+0x1fc4>
   1b1ec:	mov	r9, r0
   1b1f0:	cmp	r4, r0
   1b1f4:	beq	1b2c8 <_start@@Base+0x8c10>
   1b1f8:	ldr	r0, [r8]
   1b1fc:	bl	23f20 <flatcc_builder_start_offset_vector@@Base>
   1b200:	cmp	r0, #0
   1b204:	bne	1dc70 <_start@@Base+0xb5b8>
   1b208:	add	r3, sp, #300	; 0x12c
   1b20c:	mov	r2, sl
   1b210:	mov	r1, r9
   1b214:	mov	r0, r8
   1b218:	bl	15c6c <_start@@Base+0x35b4>
   1b21c:	mov	r9, r0
   1b220:	ldr	r3, [sp, #300]	; 0x12c
   1b224:	cmp	r3, #0
   1b228:	beq	1b294 <_start@@Base+0x8bdc>
   1b22c:	mov	r4, #1
   1b230:	add	r3, sp, #296	; 0x128
   1b234:	mov	r2, sl
   1b238:	mov	r1, r9
   1b23c:	mov	r0, r8
   1b240:	bl	2a214 <flatcc_json_parser_build_string@@Base>
   1b244:	mov	r9, r0
   1b248:	ldr	r3, [sp, #296]	; 0x128
   1b24c:	cmp	r3, #0
   1b250:	beq	1dc78 <_start@@Base+0xb5c0>
   1b254:	mov	r1, r4
   1b258:	ldr	r0, [r8]
   1b25c:	bl	238f0 <flatcc_builder_extend_offset_vector@@Base>
   1b260:	cmp	r0, #0
   1b264:	beq	1dc80 <_start@@Base+0xb5c8>
   1b268:	ldr	r3, [sp, #296]	; 0x128
   1b26c:	str	r3, [r0]
   1b270:	add	r3, sp, #300	; 0x12c
   1b274:	mov	r2, sl
   1b278:	mov	r1, r9
   1b27c:	mov	r0, r8
   1b280:	bl	18884 <_start@@Base+0x61cc>
   1b284:	mov	r9, r0
   1b288:	ldr	r3, [sp, #300]	; 0x12c
   1b28c:	cmp	r3, #0
   1b290:	bne	1b230 <_start@@Base+0x8b78>
   1b294:	ldr	r0, [r8]
   1b298:	bl	24fbc <flatcc_builder_end_offset_vector@@Base>
   1b29c:	str	r0, [sp, #296]	; 0x128
   1b2a0:	cmp	r0, #0
   1b2a4:	beq	1dc88 <_start@@Base+0xb5d0>
   1b2a8:	mov	r1, #28
   1b2ac:	ldr	r0, [r8]
   1b2b0:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1b2b4:	cmp	r0, #0
   1b2b8:	beq	1dc90 <_start@@Base+0xb5d8>
   1b2bc:	ldr	r3, [sp, #296]	; 0x128
   1b2c0:	str	r3, [r0]
   1b2c4:	b	1c92c <_start@@Base+0xa274>
   1b2c8:	mov	r2, sl
   1b2cc:	mov	r1, r0
   1b2d0:	mov	r0, r8
   1b2d4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b2d8:	mov	r9, r0
   1b2dc:	b	1c92c <_start@@Base+0xa274>
   1b2e0:	mov	r3, #1
   1b2e4:	mov	r2, sl
   1b2e8:	mov	r1, r4
   1b2ec:	mov	r0, r8
   1b2f0:	bl	1467c <_start@@Base+0x1fc4>
   1b2f4:	mov	r9, r0
   1b2f8:	cmp	r4, r0
   1b2fc:	beq	1b3d0 <_start@@Base+0x8d18>
   1b300:	ldr	r0, [r8]
   1b304:	bl	23f20 <flatcc_builder_start_offset_vector@@Base>
   1b308:	cmp	r0, #0
   1b30c:	bne	1dc98 <_start@@Base+0xb5e0>
   1b310:	add	r3, sp, #300	; 0x12c
   1b314:	mov	r2, sl
   1b318:	mov	r1, r9
   1b31c:	mov	r0, r8
   1b320:	bl	15c6c <_start@@Base+0x35b4>
   1b324:	mov	r9, r0
   1b328:	ldr	r3, [sp, #300]	; 0x12c
   1b32c:	cmp	r3, #0
   1b330:	beq	1b39c <_start@@Base+0x8ce4>
   1b334:	mov	r4, #1
   1b338:	add	r3, sp, #296	; 0x128
   1b33c:	mov	r2, sl
   1b340:	mov	r1, r9
   1b344:	mov	r0, r8
   1b348:	bl	2a214 <flatcc_json_parser_build_string@@Base>
   1b34c:	mov	r9, r0
   1b350:	ldr	r3, [sp, #296]	; 0x128
   1b354:	cmp	r3, #0
   1b358:	beq	1dca0 <_start@@Base+0xb5e8>
   1b35c:	mov	r1, r4
   1b360:	ldr	r0, [r8]
   1b364:	bl	238f0 <flatcc_builder_extend_offset_vector@@Base>
   1b368:	cmp	r0, #0
   1b36c:	beq	1dca8 <_start@@Base+0xb5f0>
   1b370:	ldr	r3, [sp, #296]	; 0x128
   1b374:	str	r3, [r0]
   1b378:	add	r3, sp, #300	; 0x12c
   1b37c:	mov	r2, sl
   1b380:	mov	r1, r9
   1b384:	mov	r0, r8
   1b388:	bl	18884 <_start@@Base+0x61cc>
   1b38c:	mov	r9, r0
   1b390:	ldr	r3, [sp, #300]	; 0x12c
   1b394:	cmp	r3, #0
   1b398:	bne	1b338 <_start@@Base+0x8c80>
   1b39c:	ldr	r0, [r8]
   1b3a0:	bl	24fbc <flatcc_builder_end_offset_vector@@Base>
   1b3a4:	str	r0, [sp, #296]	; 0x128
   1b3a8:	cmp	r0, #0
   1b3ac:	beq	1dcb0 <_start@@Base+0xb5f8>
   1b3b0:	mov	r1, #10
   1b3b4:	ldr	r0, [r8]
   1b3b8:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1b3bc:	cmp	r0, #0
   1b3c0:	beq	1dcb8 <_start@@Base+0xb600>
   1b3c4:	ldr	r3, [sp, #296]	; 0x128
   1b3c8:	str	r3, [r0]
   1b3cc:	b	1c92c <_start@@Base+0xa274>
   1b3d0:	mov	r2, sl
   1b3d4:	mov	r1, r0
   1b3d8:	mov	r0, r8
   1b3dc:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b3e0:	mov	r9, r0
   1b3e4:	b	1c92c <_start@@Base+0xa274>
   1b3e8:	add	r4, r9, #16
   1b3ec:	mov	r1, sl
   1b3f0:	mov	r0, r4
   1b3f4:	bl	127e0 <_start@@Base+0x128>
   1b3f8:	mov	r0, #0
   1b3fc:	and	r1, r1, #-16777216	; 0xff000000
   1b400:	cmp	r1, #1929379840	; 0x73000000
   1b404:	cmpeq	r0, #0
   1b408:	beq	1b424 <_start@@Base+0x8d6c>
   1b40c:	mov	r2, sl
   1b410:	mov	r1, r4
   1b414:	mov	r0, r8
   1b418:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b41c:	mov	r9, r0
   1b420:	b	1c92c <_start@@Base+0xa274>
   1b424:	mov	r3, #1
   1b428:	mov	r2, sl
   1b42c:	mov	r1, r4
   1b430:	mov	r0, r8
   1b434:	bl	1467c <_start@@Base+0x1fc4>
   1b438:	mov	r9, r0
   1b43c:	cmp	r4, r0
   1b440:	beq	1b534 <_start@@Base+0x8e7c>
   1b444:	ldr	r0, [r8]
   1b448:	bl	23f20 <flatcc_builder_start_offset_vector@@Base>
   1b44c:	cmp	r0, #0
   1b450:	bne	1dcc0 <_start@@Base+0xb608>
   1b454:	add	r3, sp, #300	; 0x12c
   1b458:	mov	r2, sl
   1b45c:	mov	r1, r9
   1b460:	mov	r0, r8
   1b464:	bl	15c6c <_start@@Base+0x35b4>
   1b468:	mov	r9, r0
   1b46c:	ldr	r3, [sp, #300]	; 0x12c
   1b470:	cmp	r3, #0
   1b474:	beq	1b4e0 <_start@@Base+0x8e28>
   1b478:	mov	r4, #1
   1b47c:	add	r3, sp, #296	; 0x128
   1b480:	mov	r2, sl
   1b484:	mov	r1, r9
   1b488:	mov	r0, r8
   1b48c:	bl	18b8c <_start@@Base+0x64d4>
   1b490:	mov	r9, r0
   1b494:	ldr	r3, [sp, #296]	; 0x128
   1b498:	cmp	r3, #0
   1b49c:	beq	1dcc8 <_start@@Base+0xb610>
   1b4a0:	mov	r1, r4
   1b4a4:	ldr	r0, [r8]
   1b4a8:	bl	238f0 <flatcc_builder_extend_offset_vector@@Base>
   1b4ac:	cmp	r0, #0
   1b4b0:	beq	1dcd0 <_start@@Base+0xb618>
   1b4b4:	ldr	r3, [sp, #296]	; 0x128
   1b4b8:	str	r3, [r0]
   1b4bc:	add	r3, sp, #300	; 0x12c
   1b4c0:	mov	r2, sl
   1b4c4:	mov	r1, r9
   1b4c8:	mov	r0, r8
   1b4cc:	bl	18884 <_start@@Base+0x61cc>
   1b4d0:	mov	r9, r0
   1b4d4:	ldr	r3, [sp, #300]	; 0x12c
   1b4d8:	cmp	r3, #0
   1b4dc:	bne	1b47c <_start@@Base+0x8dc4>
   1b4e0:	ldr	r0, [r8]
   1b4e4:	bl	24fbc <flatcc_builder_end_offset_vector@@Base>
   1b4e8:	str	r0, [sp, #296]	; 0x128
   1b4ec:	cmp	r0, #0
   1b4f0:	beq	1dcd8 <_start@@Base+0xb620>
   1b4f4:	mov	r1, #11
   1b4f8:	ldr	r0, [r8]
   1b4fc:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1b500:	cmp	r0, #0
   1b504:	beq	1dce0 <_start@@Base+0xb628>
   1b508:	ldr	r3, [sp, #296]	; 0x128
   1b50c:	str	r3, [r0]
   1b510:	b	1c92c <_start@@Base+0xa274>
   1b514:	nop			; (mov r0, r0)
   1b518:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1b51c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1b520:	cmnvs	r2, r5, ror #24
   1b524:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1b528:	ldrvs	r0, [r2, -r0]!
   1b52c:			; <UNDEFINED> instruction: 0xffff0000
   1b530:	ldrtcc	r0, [r4], -r0
   1b534:	mov	r2, sl
   1b538:	mov	r1, r0
   1b53c:	mov	r0, r8
   1b540:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b544:	mov	r9, r0
   1b548:	b	1c92c <_start@@Base+0xa274>
   1b54c:	add	r4, r9, #8
   1b550:	mov	r1, sl
   1b554:	mov	r0, r4
   1b558:	bl	127e0 <_start@@Base+0x128>
   1b55c:	mov	r2, #0
   1b560:	ldr	r3, [pc, #-60]	; 1b52c <_start@@Base+0x8e74>
   1b564:	and	r0, r0, r2
   1b568:	and	r1, r1, r3
   1b56c:	mov	r2, #0
   1b570:	ldr	r3, [pc, #-72]	; 1b530 <_start@@Base+0x8e78>
   1b574:	cmp	r1, r3
   1b578:	cmpeq	r0, r2
   1b57c:	beq	1b598 <_start@@Base+0x8ee0>
   1b580:	mov	r2, sl
   1b584:	mov	r1, r4
   1b588:	mov	r0, r8
   1b58c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b590:	mov	r9, r0
   1b594:	b	1c92c <_start@@Base+0xa274>
   1b598:	mov	r3, #2
   1b59c:	mov	r2, sl
   1b5a0:	mov	r1, r4
   1b5a4:	mov	r0, r8
   1b5a8:	bl	1467c <_start@@Base+0x1fc4>
   1b5ac:	mov	r9, r0
   1b5b0:	cmp	r4, r0
   1b5b4:	beq	1bc5c <_start@@Base+0x95a4>
   1b5b8:	mov	r3, #0
   1b5bc:	str	r3, [sp, #296]	; 0x128
   1b5c0:	mov	r1, #3
   1b5c4:	ldr	r0, [r8]
   1b5c8:	bl	24144 <flatcc_builder_start_table@@Base>
   1b5cc:	cmp	r0, #0
   1b5d0:	bne	1bbd0 <_start@@Base+0x9518>
   1b5d4:	add	r3, sp, #276	; 0x114
   1b5d8:	mov	r2, sl
   1b5dc:	mov	r1, r9
   1b5e0:	mov	r0, r8
   1b5e4:	bl	15d2c <_start@@Base+0x3674>
   1b5e8:	mov	r9, r0
   1b5ec:	mov	fp, #5
   1b5f0:	add	r7, pc, #928	; 0x3a0
   1b5f4:	ldrd	r6, [r7]
   1b5f8:	b	1b89c <_start@@Base+0x91e4>
   1b5fc:	mov	r3, fp
   1b600:	mov	r2, sl
   1b604:	mov	r1, r9
   1b608:	mov	r0, r8
   1b60c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1b610:	mov	r9, r0
   1b614:	b	1b8d8 <_start@@Base+0x9220>
   1b618:	ldrb	r2, [r9, #7]
   1b61c:	mov	r3, #0
   1b620:	b	1b62c <_start@@Base+0x8f74>
   1b624:	mov	r2, #0
   1b628:	mov	r3, #0
   1b62c:	ldrb	r0, [r9, #6]
   1b630:	mov	ip, #0
   1b634:	str	ip, [sp, #252]	; 0xfc
   1b638:	lsl	r1, r0, #8
   1b63c:	str	r1, [sp, #248]	; 0xf8
   1b640:	ldrd	r0, [sp, #248]	; 0xf8
   1b644:	orr	r0, r0, r2
   1b648:	orr	r1, r1, r3
   1b64c:	mov	r2, r0
   1b650:	mov	r3, r1
   1b654:	ldrb	r0, [r9, #5]
   1b658:	mov	ip, #0
   1b65c:	str	ip, [sp, #236]	; 0xec
   1b660:	lsl	r1, r0, #16
   1b664:	str	r1, [sp, #232]	; 0xe8
   1b668:	ldrd	r0, [sp, #232]	; 0xe8
   1b66c:	orr	r0, r0, r2
   1b670:	orr	r1, r1, r3
   1b674:	mov	r2, r0
   1b678:	mov	r3, r1
   1b67c:	ldrb	r0, [r9, #4]
   1b680:	mov	ip, #0
   1b684:	str	ip, [sp, #220]	; 0xdc
   1b688:	lsl	r1, r0, #24
   1b68c:	str	r1, [sp, #216]	; 0xd8
   1b690:	ldrd	r0, [sp, #216]	; 0xd8
   1b694:	orr	r0, r0, r2
   1b698:	orr	r1, r1, r3
   1b69c:	mov	r2, r0
   1b6a0:	mov	r3, r1
   1b6a4:	ldrb	r1, [r9, #3]
   1b6a8:	str	r1, [sp, #204]	; 0xcc
   1b6ac:	mov	r1, #0
   1b6b0:	str	r1, [sp, #200]	; 0xc8
   1b6b4:	ldrd	r0, [sp, #200]	; 0xc8
   1b6b8:	orr	r0, r0, r2
   1b6bc:	orr	r1, r1, r3
   1b6c0:	mov	r2, r0
   1b6c4:	mov	r3, r1
   1b6c8:	ldrb	r0, [r9, #2]
   1b6cc:	lsl	r1, r0, #8
   1b6d0:	str	r1, [sp, #180]	; 0xb4
   1b6d4:	mov	r1, #0
   1b6d8:	str	r1, [sp, #176]	; 0xb0
   1b6dc:	ldrd	r0, [sp, #176]	; 0xb0
   1b6e0:	orr	r0, r0, r2
   1b6e4:	orr	r1, r1, r3
   1b6e8:	mov	r2, r0
   1b6ec:	mov	r3, r1
   1b6f0:	ldrb	r0, [r9, #1]
   1b6f4:	lsl	r1, r0, #16
   1b6f8:	str	r1, [sp, #164]	; 0xa4
   1b6fc:	mov	r1, #0
   1b700:	str	r1, [sp, #160]	; 0xa0
   1b704:	ldrd	r0, [sp, #160]	; 0xa0
   1b708:	orr	r0, r0, r2
   1b70c:	orr	r1, r1, r3
   1b710:	mov	r2, r0
   1b714:	mov	r3, r1
   1b718:	ldrb	r0, [r9]
   1b71c:	lsl	r1, r0, #24
   1b720:	str	r1, [sp, #148]	; 0x94
   1b724:	mov	r1, #0
   1b728:	str	r1, [sp, #144]	; 0x90
   1b72c:	ldrd	r0, [sp, #144]	; 0x90
   1b730:	orr	r0, r0, r2
   1b734:	orr	r1, r1, r3
   1b738:	mov	r2, r0
   1b73c:	mov	r3, r1
   1b740:	cmp	r1, r7
   1b744:	cmpeq	r0, r6
   1b748:	bls	1b7f0 <_start@@Base+0x9138>
   1b74c:	bic	r0, r0, #255	; 0xff
   1b750:	add	r5, pc, #584	; 0x248
   1b754:	ldrd	r4, [r5]
   1b758:	cmp	r1, r5
   1b75c:	cmpeq	r0, r4
   1b760:	beq	1b9c4 <_start@@Base+0x930c>
   1b764:	ldr	r0, [pc, #588]	; 1b9b8 <_start@@Base+0x9300>
   1b768:	mvn	r1, #0
   1b76c:	and	r0, r0, r2
   1b770:	and	r1, r1, r3
   1b774:	mov	r2, r0
   1b778:	mov	r3, r1
   1b77c:	add	r1, pc, #548	; 0x224
   1b780:	ldrd	r0, [r1]
   1b784:	cmp	r3, r1
   1b788:	cmpeq	r2, r0
   1b78c:	beq	1ba40 <_start@@Base+0x9388>
   1b790:	mov	r2, sl
   1b794:	mov	r1, r9
   1b798:	mov	r0, r8
   1b79c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b7a0:	mov	r4, r0
   1b7a4:	b	1b820 <_start@@Base+0x9168>
   1b7a8:	mov	r2, #0
   1b7ac:	mov	r3, #0
   1b7b0:	b	1b654 <_start@@Base+0x8f9c>
   1b7b4:	mov	r2, #0
   1b7b8:	mov	r3, #0
   1b7bc:	b	1b67c <_start@@Base+0x8fc4>
   1b7c0:	mov	r2, #0
   1b7c4:	mov	r3, #0
   1b7c8:	b	1b6a4 <_start@@Base+0x8fec>
   1b7cc:	mov	r2, #0
   1b7d0:	mov	r3, #0
   1b7d4:	b	1b6c8 <_start@@Base+0x9010>
   1b7d8:	mov	r2, #0
   1b7dc:	mov	r3, #0
   1b7e0:	b	1b6f0 <_start@@Base+0x9038>
   1b7e4:	mov	r2, #0
   1b7e8:	mov	r3, #0
   1b7ec:	b	1b718 <_start@@Base+0x9060>
   1b7f0:	mov	r2, #0
   1b7f4:	mov	r3, r1
   1b7f8:	add	r1, pc, #432	; 0x1b0
   1b7fc:	ldrd	r0, [r1]
   1b800:	cmp	r3, r1
   1b804:	cmpeq	r2, r0
   1b808:	beq	1b914 <_start@@Base+0x925c>
   1b80c:	mov	r2, sl
   1b810:	mov	r1, r9
   1b814:	mov	r0, r8
   1b818:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b81c:	mov	r4, r0
   1b820:	sub	r3, sl, r4
   1b824:	cmp	r3, #1
   1b828:	ble	1b83c <_start@@Base+0x9184>
   1b82c:	ldrb	r3, [r4]
   1b830:	cmp	r3, #32
   1b834:	bhi	1b850 <_start@@Base+0x9198>
   1b838:	beq	1babc <_start@@Base+0x9404>
   1b83c:	mov	r2, sl
   1b840:	mov	r1, r4
   1b844:	mov	r0, r8
   1b848:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1b84c:	mov	r4, r0
   1b850:	cmp	sl, r4
   1b854:	moveq	r3, #0
   1b858:	streq	r3, [sp, #276]	; 0x114
   1b85c:	moveq	r9, r4
   1b860:	beq	1b89c <_start@@Base+0x91e4>
   1b864:	ldrb	r3, [r4]
   1b868:	cmp	r3, #44	; 0x2c
   1b86c:	beq	1bb1c <_start@@Base+0x9464>
   1b870:	mov	r3, #0
   1b874:	str	r3, [sp, #276]	; 0x114
   1b878:	ldrb	r3, [r4]
   1b87c:	cmp	r3, #125	; 0x7d
   1b880:	beq	1bad0 <_start@@Base+0x9418>
   1b884:	mov	r3, #10
   1b888:	mov	r2, sl
   1b88c:	mov	r1, r4
   1b890:	mov	r0, r8
   1b894:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1b898:	mov	r9, r0
   1b89c:	ldr	r3, [sp, #276]	; 0x114
   1b8a0:	cmp	r3, #0
   1b8a4:	beq	1bbc4 <_start@@Base+0x950c>
   1b8a8:	cmp	sl, r9
   1b8ac:	beq	1b8d8 <_start@@Base+0x9220>
   1b8b0:	ldrb	r3, [r9]
   1b8b4:	cmp	r3, #34	; 0x22
   1b8b8:	addeq	r9, r9, #1
   1b8bc:	moveq	r3, #0
   1b8c0:	streq	r3, [r8, #12]
   1b8c4:	beq	1b8d8 <_start@@Base+0x9220>
   1b8c8:	cmp	r3, #46	; 0x2e
   1b8cc:	movne	r3, #1
   1b8d0:	strne	r3, [r8, #12]
   1b8d4:	beq	1b5fc <_start@@Base+0x8f44>
   1b8d8:	sub	r3, sl, r9
   1b8dc:	cmp	r3, #8
   1b8e0:	movcs	r3, #8
   1b8e4:	sub	r3, r3, #1
   1b8e8:	cmp	r3, #7
   1b8ec:	ldrls	pc, [pc, r3, lsl #2]
   1b8f0:	b	1b80c <_start@@Base+0x9154>
   1b8f4:	andeq	fp, r1, r4, ror #15
   1b8f8:	ldrdeq	fp, [r1], -r8
   1b8fc:	andeq	fp, r1, ip, asr #15
   1b900:	andeq	fp, r1, r0, asr #15
   1b904:			; <UNDEFINED> instruction: 0x0001b7b4
   1b908:	andeq	fp, r1, r8, lsr #15
   1b90c:	andeq	fp, r1, r4, lsr #12
   1b910:	andeq	fp, r1, r8, lsl r6
   1b914:	mov	r3, #4
   1b918:	mov	r2, sl
   1b91c:	mov	r1, r9
   1b920:	mov	r0, r8
   1b924:	bl	1467c <_start@@Base+0x1fc4>
   1b928:	cmp	r0, r9
   1b92c:	beq	1b97c <_start@@Base+0x92c4>
   1b930:	mov	r3, #0
   1b934:	str	r3, [sp]
   1b938:	add	r3, sp, #280	; 0x118
   1b93c:	mov	r2, sl
   1b940:	mov	r1, r0
   1b944:	mov	r0, r8
   1b948:	bl	29e40 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b94c:	mov	r4, r0
   1b950:	ldr	r3, [sp, #280]	; 0x118
   1b954:	cmp	r3, #0
   1b958:	beq	1bc2c <_start@@Base+0x9574>
   1b95c:	mov	r1, #0
   1b960:	ldr	r0, [r8]
   1b964:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1b968:	cmp	r0, #0
   1b96c:	beq	1bc34 <_start@@Base+0x957c>
   1b970:	ldr	r3, [sp, #280]	; 0x118
   1b974:	str	r3, [r0]
   1b978:	b	1b820 <_start@@Base+0x9168>
   1b97c:	mov	r2, sl
   1b980:	mov	r1, r0
   1b984:	mov	r0, r8
   1b988:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b98c:	mov	r4, r0
   1b990:	b	1b820 <_start@@Base+0x9168>
   1b994:	nop			; (mov r0, r0)
   1b998:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1b99c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1b9a0:	cmnvs	r4, r0, lsl #2
   1b9a4:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1b9a8:	strbvs	r0, [r4, #-0]!
   1b9ac:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1b9b0:	andeq	r0, r0, r0
   1b9b4:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1b9b8:			; <UNDEFINED> instruction: 0xffff0000
   1b9bc:	muleq	r2, r8, r6
   1b9c0:	andeq	fp, r2, r0, lsr #13
   1b9c4:	mov	r3, #7
   1b9c8:	mov	r2, sl
   1b9cc:	mov	r1, r9
   1b9d0:	mov	r0, r8
   1b9d4:	bl	1467c <_start@@Base+0x1fc4>
   1b9d8:	mov	r1, r0
   1b9dc:	cmp	r0, r9
   1b9e0:	beq	1ba2c <_start@@Base+0x9374>
   1b9e4:	mov	r3, #1
   1b9e8:	str	r3, [sp]
   1b9ec:	add	r3, sp, #280	; 0x118
   1b9f0:	mov	r2, sl
   1b9f4:	mov	r0, r8
   1b9f8:	bl	29e40 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1b9fc:	mov	r4, r0
   1ba00:	ldr	r3, [sp, #280]	; 0x118
   1ba04:	cmp	r3, #0
   1ba08:	beq	1bc3c <_start@@Base+0x9584>
   1ba0c:	mov	r1, #1
   1ba10:	ldr	r0, [r8]
   1ba14:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1ba18:	cmp	r0, #0
   1ba1c:	beq	1bc44 <_start@@Base+0x958c>
   1ba20:	ldr	r3, [sp, #280]	; 0x118
   1ba24:	str	r3, [r0]
   1ba28:	b	1b820 <_start@@Base+0x9168>
   1ba2c:	mov	r2, sl
   1ba30:	mov	r0, r8
   1ba34:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1ba38:	mov	r4, r0
   1ba3c:	b	1b820 <_start@@Base+0x9168>
   1ba40:	mov	r3, #6
   1ba44:	mov	r2, sl
   1ba48:	mov	r1, r9
   1ba4c:	mov	r0, r8
   1ba50:	bl	1467c <_start@@Base+0x1fc4>
   1ba54:	mov	r1, r0
   1ba58:	cmp	r0, r9
   1ba5c:	beq	1baa8 <_start@@Base+0x93f0>
   1ba60:	mov	r3, #0
   1ba64:	str	r3, [sp]
   1ba68:	add	r3, sp, #280	; 0x118
   1ba6c:	mov	r2, sl
   1ba70:	mov	r0, r8
   1ba74:	bl	29e40 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1ba78:	mov	r4, r0
   1ba7c:	ldr	r3, [sp, #280]	; 0x118
   1ba80:	cmp	r3, #0
   1ba84:	beq	1bc4c <_start@@Base+0x9594>
   1ba88:	mov	r1, #2
   1ba8c:	ldr	r0, [r8]
   1ba90:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1ba94:	cmp	r0, #0
   1ba98:	beq	1bc54 <_start@@Base+0x959c>
   1ba9c:	ldr	r3, [sp, #280]	; 0x118
   1baa0:	str	r3, [r0]
   1baa4:	b	1b820 <_start@@Base+0x9168>
   1baa8:	mov	r2, sl
   1baac:	mov	r0, r8
   1bab0:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1bab4:	mov	r4, r0
   1bab8:	b	1b820 <_start@@Base+0x9168>
   1babc:	ldrb	r3, [r4, #1]
   1bac0:	cmp	r3, #32
   1bac4:	addhi	r4, r4, #1
   1bac8:	bls	1b83c <_start@@Base+0x9184>
   1bacc:	b	1b850 <_start@@Base+0x9198>
   1bad0:	add	r9, r4, #1
   1bad4:	sub	r3, sl, r9
   1bad8:	cmp	r3, #1
   1badc:	ble	1baf0 <_start@@Base+0x9438>
   1bae0:	ldrb	r3, [r4, #1]
   1bae4:	cmp	r3, #32
   1bae8:	bhi	1b89c <_start@@Base+0x91e4>
   1baec:	beq	1bb08 <_start@@Base+0x9450>
   1baf0:	mov	r2, sl
   1baf4:	mov	r1, r9
   1baf8:	mov	r0, r8
   1bafc:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1bb00:	mov	r9, r0
   1bb04:	b	1b89c <_start@@Base+0x91e4>
   1bb08:	ldrb	r3, [r4, #2]
   1bb0c:	cmp	r3, #32
   1bb10:	addhi	r9, r4, #2
   1bb14:	bls	1baf0 <_start@@Base+0x9438>
   1bb18:	b	1b89c <_start@@Base+0x91e4>
   1bb1c:	add	r9, r4, #1
   1bb20:	sub	r3, sl, r9
   1bb24:	cmp	r3, #1
   1bb28:	ble	1bb3c <_start@@Base+0x9484>
   1bb2c:	ldrb	r3, [r4, #1]
   1bb30:	cmp	r3, #32
   1bb34:	bhi	1bb50 <_start@@Base+0x9498>
   1bb38:	beq	1bb8c <_start@@Base+0x94d4>
   1bb3c:	mov	r2, sl
   1bb40:	mov	r1, r9
   1bb44:	mov	r0, r8
   1bb48:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1bb4c:	mov	r9, r0
   1bb50:	cmp	sl, r9
   1bb54:	beq	1bba0 <_start@@Base+0x94e8>
   1bb58:	ldrb	r3, [r9]
   1bb5c:	cmp	r3, #125	; 0x7d
   1bb60:	movne	r3, #1
   1bb64:	strne	r3, [sp, #276]	; 0x114
   1bb68:	bne	1b89c <_start@@Base+0x91e4>
   1bb6c:	mov	r3, #0
   1bb70:	str	r3, [sp, #276]	; 0x114
   1bb74:	mov	r2, sl
   1bb78:	add	r1, r9, #1
   1bb7c:	mov	r0, r8
   1bb80:	bl	1447c <_start@@Base+0x1dc4>
   1bb84:	mov	r9, r0
   1bb88:	b	1b89c <_start@@Base+0x91e4>
   1bb8c:	ldrb	r3, [r4, #2]
   1bb90:	cmp	r3, #32
   1bb94:	addhi	r9, r4, #2
   1bb98:	bls	1bb3c <_start@@Base+0x9484>
   1bb9c:	b	1bb50 <_start@@Base+0x9498>
   1bba0:	mov	r3, #0
   1bba4:	str	r3, [sp, #276]	; 0x114
   1bba8:	mov	r3, #10
   1bbac:	mov	r2, sl
   1bbb0:	mov	r1, r9
   1bbb4:	mov	r0, r8
   1bbb8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1bbbc:	mov	r9, r0
   1bbc0:	b	1b89c <_start@@Base+0x91e4>
   1bbc4:	ldr	r3, [r8, #24]
   1bbc8:	cmp	r3, #0
   1bbcc:	beq	1bc14 <_start@@Base+0x955c>
   1bbd0:	mov	r3, #33	; 0x21
   1bbd4:	mov	r2, sl
   1bbd8:	mov	r1, r9
   1bbdc:	mov	r0, r8
   1bbe0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1bbe4:	mov	r9, r0
   1bbe8:	ldr	r3, [sp, #296]	; 0x128
   1bbec:	cmp	r3, #0
   1bbf0:	beq	1dce8 <_start@@Base+0xb630>
   1bbf4:	mov	r1, #35	; 0x23
   1bbf8:	ldr	r0, [r8]
   1bbfc:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1bc00:	cmp	r0, #0
   1bc04:	beq	1dcf0 <_start@@Base+0xb638>
   1bc08:	ldr	r3, [sp, #296]	; 0x128
   1bc0c:	str	r3, [r0]
   1bc10:	b	1c92c <_start@@Base+0xa274>
   1bc14:	ldr	r0, [r8]
   1bc18:	bl	24b94 <flatcc_builder_end_table@@Base>
   1bc1c:	str	r0, [sp, #296]	; 0x128
   1bc20:	cmp	r0, #0
   1bc24:	beq	1bbd0 <_start@@Base+0x9518>
   1bc28:	b	1bbe8 <_start@@Base+0x9530>
   1bc2c:	mov	r9, r0
   1bc30:	b	1bbd0 <_start@@Base+0x9518>
   1bc34:	mov	r9, r4
   1bc38:	b	1bbd0 <_start@@Base+0x9518>
   1bc3c:	mov	r9, r0
   1bc40:	b	1bbd0 <_start@@Base+0x9518>
   1bc44:	mov	r9, r4
   1bc48:	b	1bbd0 <_start@@Base+0x9518>
   1bc4c:	mov	r9, r0
   1bc50:	b	1bbd0 <_start@@Base+0x9518>
   1bc54:	mov	r9, r4
   1bc58:	b	1bbd0 <_start@@Base+0x9518>
   1bc5c:	mov	r2, sl
   1bc60:	mov	r1, r0
   1bc64:	mov	r0, r8
   1bc68:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1bc6c:	mov	r9, r0
   1bc70:	b	1c92c <_start@@Base+0xa274>
   1bc74:	mov	r3, #8
   1bc78:	mov	r2, sl
   1bc7c:	mov	r1, r9
   1bc80:	mov	r0, r8
   1bc84:	bl	1467c <_start@@Base+0x1fc4>
   1bc88:	mov	r4, r0
   1bc8c:	cmp	r0, r9
   1bc90:	beq	1bdf0 <_start@@Base+0x9738>
   1bc94:	mov	r3, #0
   1bc98:	strb	r3, [sp, #272]	; 0x110
   1bc9c:	sub	r5, sl, r0
   1bca0:	cmp	r5, #3
   1bca4:	ble	1bcbc <_start@@Base+0x9604>
   1bca8:	mov	r2, #4
   1bcac:	ldr	r1, [pc, #-760]	; 1b9bc <_start@@Base+0x9304>
   1bcb0:	bl	125c4 <memcmp@plt>
   1bcb4:	cmp	r0, #0
   1bcb8:	beq	1bd94 <_start@@Base+0x96dc>
   1bcbc:	cmp	r5, #4
   1bcc0:	ble	1bce0 <_start@@Base+0x9628>
   1bcc4:	mov	r2, #5
   1bcc8:	ldr	r1, [pc, #-784]	; 1b9c0 <_start@@Base+0x9308>
   1bccc:	mov	r0, r4
   1bcd0:	bl	125c4 <memcmp@plt>
   1bcd4:	cmp	r0, #0
   1bcd8:	addeq	r9, r4, #5
   1bcdc:	beq	1bd6c <_start@@Base+0x96b4>
   1bce0:	mov	r2, #0
   1bce4:	mov	r3, #0
   1bce8:	add	r1, sp, #280	; 0x118
   1bcec:	strd	r2, [r1]
   1bcf0:	mov	r3, #0
   1bcf4:	str	r3, [sp, #276]	; 0x114
   1bcf8:	cmp	sl, r4
   1bcfc:	beq	1dd8c <_start@@Base+0xb6d4>
   1bd00:	str	r1, [sp]
   1bd04:	add	r3, sp, #276	; 0x114
   1bd08:	mov	r2, sl
   1bd0c:	mov	r1, r4
   1bd10:	mov	r0, r8
   1bd14:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   1bd18:	mov	r9, r0
   1bd1c:	cmp	r4, r0
   1bd20:	beq	1dd88 <_start@@Base+0xb6d0>
   1bd24:	ldr	r3, [sp, #276]	; 0x114
   1bd28:	cmp	r3, #0
   1bd2c:	bne	1bda4 <_start@@Base+0x96ec>
   1bd30:	add	r3, sp, #280	; 0x118
   1bd34:	ldrd	r2, [r3]
   1bd38:	cmp	r3, #0
   1bd3c:	cmpeq	r2, #255	; 0xff
   1bd40:	bhi	1bdd4 <_start@@Base+0x971c>
   1bd44:	uxtb	r3, r2
   1bd48:	adds	r3, r3, #0
   1bd4c:	movne	r3, #1
   1bd50:	strb	r3, [sp, #272]	; 0x110
   1bd54:	ldrb	r3, [sp, #272]	; 0x110
   1bd58:	cmp	r3, #1
   1bd5c:	bne	1bd6c <_start@@Base+0x96b4>
   1bd60:	ldr	r3, [r8, #8]
   1bd64:	tst	r3, #2
   1bd68:	beq	1c92c <_start@@Base+0xa274>
   1bd6c:	mov	r3, #1
   1bd70:	mov	r2, r3
   1bd74:	mov	r1, #15
   1bd78:	ldr	r0, [r8]
   1bd7c:	bl	25b40 <flatcc_builder_table_add@@Base>
   1bd80:	cmp	r0, #0
   1bd84:	beq	1dcf8 <_start@@Base+0xb640>
   1bd88:	ldrb	r3, [sp, #272]	; 0x110
   1bd8c:	strb	r3, [r0]
   1bd90:	b	1c92c <_start@@Base+0xa274>
   1bd94:	mov	r3, #1
   1bd98:	strb	r3, [sp, #272]	; 0x110
   1bd9c:	add	r9, r4, #4
   1bda0:	b	1bd60 <_start@@Base+0x96a8>
   1bda4:	mov	r3, #8
   1bda8:	mov	r2, sl
   1bdac:	mov	r1, r0
   1bdb0:	mov	r0, r8
   1bdb4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1bdb8:	mov	r9, r0
   1bdbc:	mov	r3, #0
   1bdc0:	strb	r3, [sp, #272]	; 0x110
   1bdc4:	cmp	r4, r9
   1bdc8:	bne	1bd54 <_start@@Base+0x969c>
   1bdcc:	mov	r4, r9
   1bdd0:	b	1dd94 <_start@@Base+0xb6dc>
   1bdd4:	mov	r3, #7
   1bdd8:	mov	r2, sl
   1bddc:	mov	r1, r0
   1bde0:	mov	r0, r8
   1bde4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1bde8:	mov	r9, r0
   1bdec:	b	1bdbc <_start@@Base+0x9704>
   1bdf0:	mov	r2, sl
   1bdf4:	mov	r1, r0
   1bdf8:	mov	r0, r8
   1bdfc:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1be00:	mov	r9, r0
   1be04:	b	1c92c <_start@@Base+0xa274>
   1be08:	add	r3, pc, #736	; 0x2e0
   1be0c:	ldrd	r2, [r3]
   1be10:	cmp	r1, r3
   1be14:	cmpeq	r0, r2
   1be18:	bhi	1c6a4 <_start@@Base+0x9fec>
   1be1c:	add	r3, pc, #724	; 0x2d4
   1be20:	ldrd	r2, [r3]
   1be24:	cmp	r1, r3
   1be28:	cmpeq	r0, r2
   1be2c:	beq	1be48 <_start@@Base+0x9790>
   1be30:	mov	r2, sl
   1be34:	mov	r1, r9
   1be38:	mov	r0, r8
   1be3c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1be40:	mov	r9, r0
   1be44:	b	1c92c <_start@@Base+0xa274>
   1be48:	add	r4, r9, #8
   1be4c:	mov	r1, sl
   1be50:	mov	r0, r4
   1be54:	bl	127e0 <_start@@Base+0x128>
   1be58:	mov	r0, #0
   1be5c:	and	r1, r1, #-16777216	; 0xff000000
   1be60:	cmp	r1, #2030043136	; 0x79000000
   1be64:	cmpeq	r0, #0
   1be68:	beq	1be84 <_start@@Base+0x97cc>
   1be6c:	mov	r2, sl
   1be70:	mov	r1, r4
   1be74:	mov	r0, r8
   1be78:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1be7c:	mov	r9, r0
   1be80:	b	1c92c <_start@@Base+0xa274>
   1be84:	mov	r3, #1
   1be88:	mov	r2, sl
   1be8c:	mov	r1, r4
   1be90:	mov	r0, r8
   1be94:	bl	1467c <_start@@Base+0x1fc4>
   1be98:	mov	r9, r0
   1be9c:	cmp	r4, r0
   1bea0:	beq	1c68c <_start@@Base+0x9fd4>
   1bea4:	mov	r3, #0
   1bea8:	str	r3, [sp, #296]	; 0x128
   1beac:	mov	r1, #3
   1beb0:	ldr	r0, [r8]
   1beb4:	bl	24144 <flatcc_builder_start_table@@Base>
   1beb8:	cmp	r0, #0
   1bebc:	bne	1c620 <_start@@Base+0x9f68>
   1bec0:	add	r3, sp, #268	; 0x10c
   1bec4:	mov	r2, sl
   1bec8:	mov	r1, r9
   1becc:	mov	r0, r8
   1bed0:	bl	15d2c <_start@@Base+0x3674>
   1bed4:	mov	r9, r0
   1bed8:	mov	r7, #1
   1bedc:	mov	fp, #5
   1bee0:	mov	r6, #0
   1bee4:	ldr	r3, [pc, #540]	; 1c108 <_start@@Base+0x9a50>
   1bee8:	add	r3, r3, #320	; 0x140
   1beec:	str	r3, [sp, #20]
   1bef0:	b	1c1b8 <_start@@Base+0x9b00>
   1bef4:	mov	r3, fp
   1bef8:	mov	r2, sl
   1befc:	mov	r1, r9
   1bf00:	mov	r0, r8
   1bf04:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1bf08:	mov	r9, r0
   1bf0c:	b	1c1ec <_start@@Base+0x9b34>
   1bf10:	ldrb	r2, [r9, #7]
   1bf14:	mov	r3, #0
   1bf18:	b	1bf24 <_start@@Base+0x986c>
   1bf1c:	mov	r2, #0
   1bf20:	mov	r3, #0
   1bf24:	ldrb	r0, [r9, #6]
   1bf28:	mov	ip, #0
   1bf2c:	str	ip, [sp, #244]	; 0xf4
   1bf30:	lsl	r1, r0, #8
   1bf34:	str	r1, [sp, #240]	; 0xf0
   1bf38:	ldrd	r0, [sp, #240]	; 0xf0
   1bf3c:	orr	r0, r0, r2
   1bf40:	orr	r1, r1, r3
   1bf44:	mov	r2, r0
   1bf48:	mov	r3, r1
   1bf4c:	ldrb	r0, [r9, #5]
   1bf50:	mov	ip, #0
   1bf54:	str	ip, [sp, #228]	; 0xe4
   1bf58:	lsl	r1, r0, #16
   1bf5c:	str	r1, [sp, #224]	; 0xe0
   1bf60:	ldrd	r0, [sp, #224]	; 0xe0
   1bf64:	orr	r0, r0, r2
   1bf68:	orr	r1, r1, r3
   1bf6c:	mov	r2, r0
   1bf70:	mov	r3, r1
   1bf74:	ldrb	r0, [r9, #4]
   1bf78:	mov	ip, #0
   1bf7c:	str	ip, [sp, #212]	; 0xd4
   1bf80:	lsl	r1, r0, #24
   1bf84:	str	r1, [sp, #208]	; 0xd0
   1bf88:	ldrd	r0, [sp, #208]	; 0xd0
   1bf8c:	orr	r0, r0, r2
   1bf90:	orr	r1, r1, r3
   1bf94:	mov	r2, r0
   1bf98:	mov	r3, r1
   1bf9c:	ldrb	r1, [r9, #3]
   1bfa0:	str	r1, [sp, #196]	; 0xc4
   1bfa4:	mov	r1, #0
   1bfa8:	str	r1, [sp, #192]	; 0xc0
   1bfac:	ldrd	r0, [sp, #192]	; 0xc0
   1bfb0:	orr	r0, r0, r2
   1bfb4:	orr	r1, r1, r3
   1bfb8:	mov	r2, r0
   1bfbc:	mov	r3, r1
   1bfc0:	ldrb	r0, [r9, #2]
   1bfc4:	lsl	r1, r0, #8
   1bfc8:	str	r1, [sp, #172]	; 0xac
   1bfcc:	mov	r1, #0
   1bfd0:	str	r1, [sp, #168]	; 0xa8
   1bfd4:	ldrd	r0, [sp, #168]	; 0xa8
   1bfd8:	orr	r0, r0, r2
   1bfdc:	orr	r1, r1, r3
   1bfe0:	mov	r2, r0
   1bfe4:	mov	r3, r1
   1bfe8:	ldrb	r0, [r9, #1]
   1bfec:	lsl	r1, r0, #16
   1bff0:	str	r1, [sp, #156]	; 0x9c
   1bff4:	mov	r1, #0
   1bff8:	str	r1, [sp, #152]	; 0x98
   1bffc:	ldrd	r0, [sp, #152]	; 0x98
   1c000:	orr	r0, r0, r2
   1c004:	orr	r1, r1, r3
   1c008:	mov	r2, r0
   1c00c:	mov	r3, r1
   1c010:	ldrb	r0, [r9]
   1c014:	lsl	r1, r0, #24
   1c018:	str	r1, [sp, #140]	; 0x8c
   1c01c:	mov	r1, #0
   1c020:	str	r1, [sp, #136]	; 0x88
   1c024:	ldrd	r0, [sp, #136]	; 0x88
   1c028:	orr	r0, r0, r2
   1c02c:	orr	r1, r1, r3
   1c030:	mov	r2, r0
   1c034:	mov	r3, r1
   1c038:	mvn	r0, #0
   1c03c:	ldr	r1, [pc, #200]	; 1c10c <_start@@Base+0x9a54>
   1c040:	cmp	r3, r1
   1c044:	cmpeq	r2, r0
   1c048:	bls	1c118 <_start@@Base+0x9a60>
   1c04c:	mov	r4, #0
   1c050:	bic	r5, r3, #255	; 0xff
   1c054:	add	r1, pc, #164	; 0xa4
   1c058:	ldrd	r0, [r1]
   1c05c:	cmp	r5, r1
   1c060:	cmpeq	r4, r0
   1c064:	beq	1c3a8 <_start@@Base+0x9cf0>
   1c068:	mov	r0, #0
   1c06c:	ldr	r1, [pc, #156]	; 1c110 <_start@@Base+0x9a58>
   1c070:	and	r2, r2, r0
   1c074:	and	r3, r3, r1
   1c078:	mov	r0, #0
   1c07c:	ldr	r1, [pc, #144]	; 1c114 <_start@@Base+0x9a5c>
   1c080:	cmp	r3, r1
   1c084:	cmpeq	r2, r0
   1c088:	beq	1c490 <_start@@Base+0x9dd8>
   1c08c:	mov	r2, sl
   1c090:	mov	r1, r9
   1c094:	mov	r0, r8
   1c098:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1c09c:	mov	r4, r0
   1c0a0:	b	1c144 <_start@@Base+0x9a8c>
   1c0a4:	mov	r2, #0
   1c0a8:	mov	r3, #0
   1c0ac:	b	1bf4c <_start@@Base+0x9894>
   1c0b0:	mov	r2, #0
   1c0b4:	mov	r3, #0
   1c0b8:	b	1bf74 <_start@@Base+0x98bc>
   1c0bc:	mov	r2, #0
   1c0c0:	mov	r3, #0
   1c0c4:	b	1bf9c <_start@@Base+0x98e4>
   1c0c8:	mov	r2, #0
   1c0cc:	mov	r3, #0
   1c0d0:	b	1bfc0 <_start@@Base+0x9908>
   1c0d4:	mov	r2, #0
   1c0d8:	mov	r3, #0
   1c0dc:	b	1bfe8 <_start@@Base+0x9930>
   1c0e0:	mov	r2, #0
   1c0e4:	mov	r3, #0
   1c0e8:	b	1c010 <_start@@Base+0x9958>
   1c0ec:	nop			; (mov r0, r0)
   1c0f0:	ldrbvs	pc, [pc, #4095]!	; 1d0f7 <_start@@Base+0xaa3f>	; <UNPREDICTABLE>
   1c0f4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c0f8:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1c0fc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c100:	andeq	r0, r0, r0
   1c104:	strbtvc	r6, [r1], -r0, lsl #24
   1c108:	andeq	lr, r3, r8, ror r0
   1c10c:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   1c110:			; <UNDEFINED> instruction: 0xffff0000
   1c114:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1c118:	and	r2, r2, #-16777216	; 0xff000000
   1c11c:	add	r1, pc, #972	; 0x3cc
   1c120:	ldrd	r0, [r1]
   1c124:	cmp	r3, r1
   1c128:	cmpeq	r2, r0
   1c12c:	beq	1c228 <_start@@Base+0x9b70>
   1c130:	mov	r2, sl
   1c134:	mov	r1, r9
   1c138:	mov	r0, r8
   1c13c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1c140:	mov	r4, r0
   1c144:	sub	r3, sl, r4
   1c148:	cmp	r3, #1
   1c14c:	ble	1c160 <_start@@Base+0x9aa8>
   1c150:	ldrb	r3, [r4]
   1c154:	cmp	r3, #32
   1c158:	bhi	1c174 <_start@@Base+0x9abc>
   1c15c:	beq	1c518 <_start@@Base+0x9e60>
   1c160:	mov	r2, sl
   1c164:	mov	r1, r4
   1c168:	mov	r0, r8
   1c16c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1c170:	mov	r4, r0
   1c174:	cmp	sl, r4
   1c178:	streq	r6, [sp, #268]	; 0x10c
   1c17c:	moveq	r9, r4
   1c180:	beq	1c1b8 <_start@@Base+0x9b00>
   1c184:	ldrb	r3, [r4]
   1c188:	cmp	r3, #44	; 0x2c
   1c18c:	beq	1c578 <_start@@Base+0x9ec0>
   1c190:	str	r6, [sp, #268]	; 0x10c
   1c194:	ldrb	r3, [r4]
   1c198:	cmp	r3, #125	; 0x7d
   1c19c:	beq	1c52c <_start@@Base+0x9e74>
   1c1a0:	mov	r3, #10
   1c1a4:	mov	r2, sl
   1c1a8:	mov	r1, r4
   1c1ac:	mov	r0, r8
   1c1b0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1c1b4:	mov	r9, r0
   1c1b8:	ldr	r3, [sp, #268]	; 0x10c
   1c1bc:	cmp	r3, #0
   1c1c0:	beq	1c614 <_start@@Base+0x9f5c>
   1c1c4:	cmp	sl, r9
   1c1c8:	beq	1c1ec <_start@@Base+0x9b34>
   1c1cc:	ldrb	r3, [r9]
   1c1d0:	cmp	r3, #34	; 0x22
   1c1d4:	addeq	r9, r9, #1
   1c1d8:	streq	r6, [r8, #12]
   1c1dc:	beq	1c1ec <_start@@Base+0x9b34>
   1c1e0:	cmp	r3, #46	; 0x2e
   1c1e4:	strne	r7, [r8, #12]
   1c1e8:	beq	1bef4 <_start@@Base+0x983c>
   1c1ec:	sub	r3, sl, r9
   1c1f0:	cmp	r3, #8
   1c1f4:	movcs	r3, #8
   1c1f8:	sub	r3, r3, #1
   1c1fc:	cmp	r3, #7
   1c200:	ldrls	pc, [pc, r3, lsl #2]
   1c204:	b	1c130 <_start@@Base+0x9a78>
   1c208:	andeq	ip, r1, r0, ror #1
   1c20c:	ldrdeq	ip, [r1], -r4
   1c210:	andeq	ip, r1, r8, asr #1
   1c214:	strheq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c218:	strheq	ip, [r1], -r0
   1c21c:	andeq	ip, r1, r4, lsr #1
   1c220:	andeq	fp, r1, ip, lsl pc
   1c224:	andeq	fp, r1, r0, lsl pc
   1c228:	mov	r3, fp
   1c22c:	mov	r2, sl
   1c230:	mov	r1, r9
   1c234:	mov	r0, r8
   1c238:	bl	1467c <_start@@Base+0x1fc4>
   1c23c:	mov	r5, r0
   1c240:	cmp	r0, r9
   1c244:	beq	1c390 <_start@@Base+0x9cd8>
   1c248:	add	r3, sp, #264	; 0x108
   1c24c:	add	r3, r3, #2
   1c250:	strh	r6, [r3]
   1c254:	mov	r2, #0
   1c258:	mov	r3, #0
   1c25c:	add	r1, sp, #280	; 0x118
   1c260:	strd	r2, [r1]
   1c264:	str	r6, [sp, #276]	; 0x114
   1c268:	cmp	sl, r0
   1c26c:	beq	1c338 <_start@@Base+0x9c80>
   1c270:	str	r1, [sp]
   1c274:	add	r3, sp, #276	; 0x114
   1c278:	mov	r2, sl
   1c27c:	mov	r1, r0
   1c280:	mov	r0, r8
   1c284:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   1c288:	mov	r4, r0
   1c28c:	cmp	r5, r0
   1c290:	beq	1c338 <_start@@Base+0x9c80>
   1c294:	ldr	r3, [sp, #276]	; 0x114
   1c298:	cmp	r3, #0
   1c29c:	bne	1c318 <_start@@Base+0x9c60>
   1c2a0:	add	r3, sp, #280	; 0x118
   1c2a4:	ldrd	r2, [r3]
   1c2a8:	ldr	r0, [pc, #584]	; 1c4f8 <_start@@Base+0x9e40>
   1c2ac:	mov	r1, #0
   1c2b0:	cmp	r3, r1
   1c2b4:	cmpeq	r2, r0
   1c2b8:	addls	r1, sp, #264	; 0x108
   1c2bc:	addls	r1, r1, #2
   1c2c0:	strhls	r2, [r1]
   1c2c4:	bhi	1c374 <_start@@Base+0x9cbc>
   1c2c8:	add	r3, sp, #264	; 0x108
   1c2cc:	add	r3, r3, #2
   1c2d0:	ldrh	r3, [r3]
   1c2d4:	cmp	r3, #0
   1c2d8:	bne	1c2e8 <_start@@Base+0x9c30>
   1c2dc:	ldr	r3, [r8, #8]
   1c2e0:	tst	r3, #2
   1c2e4:	beq	1c144 <_start@@Base+0x9a8c>
   1c2e8:	mov	r3, #2
   1c2ec:	mov	r2, r3
   1c2f0:	mov	r1, r3
   1c2f4:	ldr	r0, [r8]
   1c2f8:	bl	25b40 <flatcc_builder_table_add@@Base>
   1c2fc:	cmp	r0, #0
   1c300:	beq	1c36c <_start@@Base+0x9cb4>
   1c304:	add	r3, sp, #264	; 0x108
   1c308:	add	r3, r3, #2
   1c30c:	ldrh	r3, [r3]
   1c310:	strh	r3, [r0]
   1c314:	b	1c144 <_start@@Base+0x9a8c>
   1c318:	mov	r3, #8
   1c31c:	mov	r2, sl
   1c320:	mov	r1, r0
   1c324:	mov	r0, r8
   1c328:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1c32c:	mov	r4, r0
   1c330:	cmp	r5, r4
   1c334:	bne	1c2c8 <_start@@Base+0x9c10>
   1c338:	add	r3, sp, #264	; 0x108
   1c33c:	add	r3, r3, #2
   1c340:	str	r3, [sp]
   1c344:	ldr	r3, [pc, #432]	; 1c4fc <_start@@Base+0x9e44>
   1c348:	add	r3, r3, #308	; 0x134
   1c34c:	mov	r2, sl
   1c350:	mov	r1, r5
   1c354:	mov	r0, r8
   1c358:	bl	155dc <_start@@Base+0x2f24>
   1c35c:	mov	r4, r0
   1c360:	cmp	sl, r0
   1c364:	cmpne	r5, r0
   1c368:	bne	1c2c8 <_start@@Base+0x9c10>
   1c36c:	mov	r9, r4
   1c370:	b	1c620 <_start@@Base+0x9f68>
   1c374:	mov	r3, #7
   1c378:	mov	r2, sl
   1c37c:	mov	r1, r4
   1c380:	mov	r0, r8
   1c384:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1c388:	mov	r4, r0
   1c38c:	b	1c330 <_start@@Base+0x9c78>
   1c390:	mov	r2, sl
   1c394:	mov	r1, r0
   1c398:	mov	r0, r8
   1c39c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1c3a0:	mov	r4, r0
   1c3a4:	b	1c144 <_start@@Base+0x9a8c>
   1c3a8:	mov	r3, #3
   1c3ac:	mov	r2, sl
   1c3b0:	mov	r1, r9
   1c3b4:	mov	r0, r8
   1c3b8:	bl	1467c <_start@@Base+0x1fc4>
   1c3bc:	mov	r5, r0
   1c3c0:	cmp	r0, r9
   1c3c4:	beq	1c478 <_start@@Base+0x9dc0>
   1c3c8:	add	r3, sp, #304	; 0x130
   1c3cc:	mov	r0, #0
   1c3d0:	mov	r1, #0
   1c3d4:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1c3d8:	mov	r2, sl
   1c3dc:	mov	r1, r5
   1c3e0:	mov	r0, r8
   1c3e4:	bl	143b4 <_start@@Base+0x1cfc>
   1c3e8:	mov	r4, r0
   1c3ec:	cmp	r5, r0
   1c3f0:	beq	1c43c <_start@@Base+0x9d84>
   1c3f4:	add	r3, sp, #280	; 0x118
   1c3f8:	ldrd	r2, [r3]
   1c3fc:	orrs	r3, r2, r3
   1c400:	bne	1c410 <_start@@Base+0x9d58>
   1c404:	ldr	r3, [r8, #8]
   1c408:	tst	r3, #2
   1c40c:	beq	1c144 <_start@@Base+0x9a8c>
   1c410:	mov	r3, #8
   1c414:	mov	r2, r3
   1c418:	mov	r1, r7
   1c41c:	ldr	r0, [r8]
   1c420:	bl	25b40 <flatcc_builder_table_add@@Base>
   1c424:	cmp	r0, #0
   1c428:	beq	1c470 <_start@@Base+0x9db8>
   1c42c:	add	r3, sp, #280	; 0x118
   1c430:	ldrd	r2, [r3]
   1c434:	strd	r2, [r0]
   1c438:	b	1c144 <_start@@Base+0x9a8c>
   1c43c:	add	r3, sp, #280	; 0x118
   1c440:	str	r3, [sp]
   1c444:	ldr	r3, [sp, #20]
   1c448:	mov	r2, sl
   1c44c:	mov	r1, r0
   1c450:	mov	r0, r8
   1c454:	bl	15a24 <_start@@Base+0x336c>
   1c458:	mov	r9, r0
   1c45c:	cmp	sl, r0
   1c460:	cmpne	r4, r0
   1c464:	beq	1c620 <_start@@Base+0x9f68>
   1c468:	mov	r4, r0
   1c46c:	b	1c3f4 <_start@@Base+0x9d3c>
   1c470:	mov	r9, r4
   1c474:	b	1c620 <_start@@Base+0x9f68>
   1c478:	mov	r2, sl
   1c47c:	mov	r1, r0
   1c480:	mov	r0, r8
   1c484:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1c488:	mov	r4, r0
   1c48c:	b	1c144 <_start@@Base+0x9a8c>
   1c490:	mov	r3, #2
   1c494:	mov	r2, sl
   1c498:	mov	r1, r9
   1c49c:	mov	r0, r8
   1c4a0:	bl	1467c <_start@@Base+0x1fc4>
   1c4a4:	mov	r1, r0
   1c4a8:	cmp	r0, r9
   1c4ac:	beq	1c504 <_start@@Base+0x9e4c>
   1c4b0:	add	r3, sp, #272	; 0x110
   1c4b4:	mov	r2, sl
   1c4b8:	mov	r0, r8
   1c4bc:	bl	2a214 <flatcc_json_parser_build_string@@Base>
   1c4c0:	mov	r4, r0
   1c4c4:	ldr	r3, [sp, #272]	; 0x110
   1c4c8:	cmp	r3, #0
   1c4cc:	beq	1c67c <_start@@Base+0x9fc4>
   1c4d0:	mov	r1, r6
   1c4d4:	ldr	r0, [r8]
   1c4d8:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1c4dc:	cmp	r0, #0
   1c4e0:	beq	1c684 <_start@@Base+0x9fcc>
   1c4e4:	ldr	r3, [sp, #272]	; 0x110
   1c4e8:	str	r3, [r0]
   1c4ec:	b	1c144 <_start@@Base+0x9a8c>
   1c4f0:	strvc	r0, [r0], #-0
   1c4f4:	cmnvs	pc, #461373440	; 0x1b800000
   1c4f8:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1c4fc:	andeq	lr, r3, r8, ror r0
   1c500:			; <UNDEFINED> instruction: 0xffff0000
   1c504:	mov	r2, sl
   1c508:	mov	r0, r8
   1c50c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1c510:	mov	r4, r0
   1c514:	b	1c144 <_start@@Base+0x9a8c>
   1c518:	ldrb	r3, [r4, #1]
   1c51c:	cmp	r3, #32
   1c520:	addhi	r4, r4, #1
   1c524:	bls	1c160 <_start@@Base+0x9aa8>
   1c528:	b	1c174 <_start@@Base+0x9abc>
   1c52c:	add	r9, r4, #1
   1c530:	sub	r3, sl, r9
   1c534:	cmp	r3, #1
   1c538:	ble	1c54c <_start@@Base+0x9e94>
   1c53c:	ldrb	r3, [r4, #1]
   1c540:	cmp	r3, #32
   1c544:	bhi	1c1b8 <_start@@Base+0x9b00>
   1c548:	beq	1c564 <_start@@Base+0x9eac>
   1c54c:	mov	r2, sl
   1c550:	mov	r1, r9
   1c554:	mov	r0, r8
   1c558:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1c55c:	mov	r9, r0
   1c560:	b	1c1b8 <_start@@Base+0x9b00>
   1c564:	ldrb	r3, [r4, #2]
   1c568:	cmp	r3, #32
   1c56c:	addhi	r9, r4, #2
   1c570:	bls	1c54c <_start@@Base+0x9e94>
   1c574:	b	1c1b8 <_start@@Base+0x9b00>
   1c578:	add	r9, r4, #1
   1c57c:	sub	r3, sl, r9
   1c580:	cmp	r3, #1
   1c584:	ble	1c598 <_start@@Base+0x9ee0>
   1c588:	ldrb	r3, [r4, #1]
   1c58c:	cmp	r3, #32
   1c590:	bhi	1c5ac <_start@@Base+0x9ef4>
   1c594:	beq	1c5e0 <_start@@Base+0x9f28>
   1c598:	mov	r2, sl
   1c59c:	mov	r1, r9
   1c5a0:	mov	r0, r8
   1c5a4:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1c5a8:	mov	r9, r0
   1c5ac:	cmp	sl, r9
   1c5b0:	beq	1c5f4 <_start@@Base+0x9f3c>
   1c5b4:	ldrb	r3, [r9]
   1c5b8:	cmp	r3, #125	; 0x7d
   1c5bc:	strne	r7, [sp, #268]	; 0x10c
   1c5c0:	bne	1c1b8 <_start@@Base+0x9b00>
   1c5c4:	str	r6, [sp, #268]	; 0x10c
   1c5c8:	mov	r2, sl
   1c5cc:	add	r1, r9, #1
   1c5d0:	mov	r0, r8
   1c5d4:	bl	1447c <_start@@Base+0x1dc4>
   1c5d8:	mov	r9, r0
   1c5dc:	b	1c1b8 <_start@@Base+0x9b00>
   1c5e0:	ldrb	r3, [r4, #2]
   1c5e4:	cmp	r3, #32
   1c5e8:	addhi	r9, r4, #2
   1c5ec:	bls	1c598 <_start@@Base+0x9ee0>
   1c5f0:	b	1c5ac <_start@@Base+0x9ef4>
   1c5f4:	str	r6, [sp, #268]	; 0x10c
   1c5f8:	mov	r3, #10
   1c5fc:	mov	r2, sl
   1c600:	mov	r1, r9
   1c604:	mov	r0, r8
   1c608:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1c60c:	mov	r9, r0
   1c610:	b	1c1b8 <_start@@Base+0x9b00>
   1c614:	ldr	r3, [r8, #24]
   1c618:	cmp	r3, #0
   1c61c:	beq	1c664 <_start@@Base+0x9fac>
   1c620:	mov	r3, #33	; 0x21
   1c624:	mov	r2, sl
   1c628:	mov	r1, r9
   1c62c:	mov	r0, r8
   1c630:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1c634:	mov	r9, r0
   1c638:	ldr	r3, [sp, #296]	; 0x128
   1c63c:	cmp	r3, #0
   1c640:	beq	1dd00 <_start@@Base+0xb648>
   1c644:	mov	r1, #14
   1c648:	ldr	r0, [r8]
   1c64c:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1c650:	cmp	r0, #0
   1c654:	beq	1dd08 <_start@@Base+0xb650>
   1c658:	ldr	r3, [sp, #296]	; 0x128
   1c65c:	str	r3, [r0]
   1c660:	b	1c92c <_start@@Base+0xa274>
   1c664:	ldr	r0, [r8]
   1c668:	bl	24b94 <flatcc_builder_end_table@@Base>
   1c66c:	str	r0, [sp, #296]	; 0x128
   1c670:	cmp	r0, #0
   1c674:	beq	1c620 <_start@@Base+0x9f68>
   1c678:	b	1c638 <_start@@Base+0x9f80>
   1c67c:	mov	r9, r0
   1c680:	b	1c620 <_start@@Base+0x9f68>
   1c684:	mov	r9, r4
   1c688:	b	1c620 <_start@@Base+0x9f68>
   1c68c:	mov	r2, sl
   1c690:	mov	r1, r0
   1c694:	mov	r0, r8
   1c698:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1c69c:	mov	r9, r0
   1c6a0:	b	1c92c <_start@@Base+0xa274>
   1c6a4:	ldr	r2, [pc, #-428]	; 1c500 <_start@@Base+0x9e48>
   1c6a8:	mvn	r3, #0
   1c6ac:	and	r2, r2, r0
   1c6b0:	and	r3, r3, r1
   1c6b4:	add	r1, pc, #996	; 0x3e4
   1c6b8:	ldrd	r0, [r1]
   1c6bc:	cmp	r3, r1
   1c6c0:	cmpeq	r2, r0
   1c6c4:	beq	1c6f8 <_start@@Base+0xa040>
   1c6c8:	and	r4, r4, #-16777216	; 0xff000000
   1c6cc:	add	r3, pc, #980	; 0x3d4
   1c6d0:	ldrd	r2, [r3]
   1c6d4:	cmp	r5, r3
   1c6d8:	cmpeq	r4, r2
   1c6dc:	beq	1c7ec <_start@@Base+0xa134>
   1c6e0:	mov	r2, sl
   1c6e4:	mov	r1, r9
   1c6e8:	mov	r0, r8
   1c6ec:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1c6f0:	mov	r9, r0
   1c6f4:	b	1c92c <_start@@Base+0xa274>
   1c6f8:	mov	r3, #6
   1c6fc:	mov	r2, sl
   1c700:	mov	r1, r9
   1c704:	mov	r0, r8
   1c708:	bl	1467c <_start@@Base+0x1fc4>
   1c70c:	mov	r4, r0
   1c710:	cmp	r0, r9
   1c714:	beq	1c7d4 <_start@@Base+0xa11c>
   1c718:	add	r3, sp, #304	; 0x130
   1c71c:	mov	r2, #0
   1c720:	str	r2, [r3, #-24]!	; 0xffffffe8
   1c724:	mov	r2, sl
   1c728:	mov	r1, r0
   1c72c:	mov	r0, r8
   1c730:	bl	28e38 <flatcc_json_parser_float@@Base>
   1c734:	mov	r9, r0
   1c738:	cmp	r4, r0
   1c73c:	beq	1c788 <_start@@Base+0xa0d0>
   1c740:	vldr	s14, [sp, #280]	; 0x118
   1c744:	vldr	s15, [pc, #924]	; 1cae8 <_start@@Base+0xa430>
   1c748:	vcmp.f32	s14, s15
   1c74c:	vmrs	APSR_nzcv, fpscr
   1c750:	bne	1c760 <_start@@Base+0xa0a8>
   1c754:	ldr	r3, [r8, #8]
   1c758:	tst	r3, #2
   1c75c:	beq	1c92c <_start@@Base+0xa274>
   1c760:	mov	r3, #4
   1c764:	mov	r2, r3
   1c768:	mov	r1, #26
   1c76c:	ldr	r0, [r8]
   1c770:	bl	25b40 <flatcc_builder_table_add@@Base>
   1c774:	cmp	r0, #0
   1c778:	beq	1c7bc <_start@@Base+0xa104>
   1c77c:	ldr	r3, [sp, #280]	; 0x118
   1c780:	str	r3, [r0]
   1c784:	b	1c92c <_start@@Base+0xa274>
   1c788:	add	r3, sp, #280	; 0x118
   1c78c:	str	r3, [sp]
   1c790:	ldr	r3, [pc, #860]	; 1caf4 <_start@@Base+0xa43c>
   1c794:	add	r3, r3, #332	; 0x14c
   1c798:	mov	r2, sl
   1c79c:	mov	r1, r0
   1c7a0:	mov	r0, r8
   1c7a4:	bl	14758 <_start@@Base+0x20a0>
   1c7a8:	cmp	sl, r0
   1c7ac:	cmpne	r9, r0
   1c7b0:	beq	1c7cc <_start@@Base+0xa114>
   1c7b4:	mov	r9, r0
   1c7b8:	b	1c740 <_start@@Base+0xa088>
   1c7bc:	mov	fp, r8
   1c7c0:	mov	r0, r9
   1c7c4:	mov	r9, r0
   1c7c8:	b	1dad4 <_start@@Base+0xb41c>
   1c7cc:	mov	fp, r8
   1c7d0:	b	1c7c4 <_start@@Base+0xa10c>
   1c7d4:	mov	r2, sl
   1c7d8:	mov	r1, r0
   1c7dc:	mov	r0, r8
   1c7e0:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1c7e4:	mov	r9, r0
   1c7e8:	b	1c92c <_start@@Base+0xa274>
   1c7ec:	mov	r3, #5
   1c7f0:	mov	r2, sl
   1c7f4:	mov	r1, r9
   1c7f8:	mov	r0, r8
   1c7fc:	bl	1467c <_start@@Base+0x1fc4>
   1c800:	mov	r4, r0
   1c804:	cmp	r0, r9
   1c808:	beq	1c8c8 <_start@@Base+0xa210>
   1c80c:	add	r3, sp, #304	; 0x130
   1c810:	mov	r2, #0
   1c814:	str	r2, [r3, #-24]!	; 0xffffffe8
   1c818:	mov	r2, sl
   1c81c:	mov	r1, r0
   1c820:	mov	r0, r8
   1c824:	bl	28e38 <flatcc_json_parser_float@@Base>
   1c828:	mov	r9, r0
   1c82c:	cmp	r4, r0
   1c830:	beq	1c87c <_start@@Base+0xa1c4>
   1c834:	vldr	s14, [sp, #280]	; 0x118
   1c838:	vldr	s15, [pc, #684]	; 1caec <_start@@Base+0xa434>
   1c83c:	vcmp.f32	s14, s15
   1c840:	vmrs	APSR_nzcv, fpscr
   1c844:	bne	1c854 <_start@@Base+0xa19c>
   1c848:	ldr	r3, [r8, #8]
   1c84c:	tst	r3, #2
   1c850:	beq	1c92c <_start@@Base+0xa274>
   1c854:	mov	r3, #4
   1c858:	mov	r2, r3
   1c85c:	mov	r1, #25
   1c860:	ldr	r0, [r8]
   1c864:	bl	25b40 <flatcc_builder_table_add@@Base>
   1c868:	cmp	r0, #0
   1c86c:	beq	1c8b0 <_start@@Base+0xa1f8>
   1c870:	ldr	r3, [sp, #280]	; 0x118
   1c874:	str	r3, [r0]
   1c878:	b	1c92c <_start@@Base+0xa274>
   1c87c:	add	r3, sp, #280	; 0x118
   1c880:	str	r3, [sp]
   1c884:	ldr	r3, [pc, #616]	; 1caf4 <_start@@Base+0xa43c>
   1c888:	add	r3, r3, #344	; 0x158
   1c88c:	mov	r2, sl
   1c890:	mov	r1, r0
   1c894:	mov	r0, r8
   1c898:	bl	14758 <_start@@Base+0x20a0>
   1c89c:	cmp	sl, r0
   1c8a0:	cmpne	r9, r0
   1c8a4:	beq	1c8c0 <_start@@Base+0xa208>
   1c8a8:	mov	r9, r0
   1c8ac:	b	1c834 <_start@@Base+0xa17c>
   1c8b0:	mov	fp, r8
   1c8b4:	mov	r0, r9
   1c8b8:	mov	r9, r0
   1c8bc:	b	1dad4 <_start@@Base+0xb41c>
   1c8c0:	mov	fp, r8
   1c8c4:	b	1c8b8 <_start@@Base+0xa200>
   1c8c8:	mov	r2, sl
   1c8cc:	mov	r1, r0
   1c8d0:	mov	r0, r8
   1c8d4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1c8d8:	mov	r9, r0
   1c8dc:	b	1c92c <_start@@Base+0xa274>
   1c8e0:	add	r3, pc, #456	; 0x1c8
   1c8e4:	ldrd	r2, [r3]
   1c8e8:	cmp	r1, r3
   1c8ec:	cmpeq	r0, r2
   1c8f0:	bhi	1cb4c <_start@@Base+0xa494>
   1c8f4:	ldr	r2, [pc, #500]	; 1caf0 <_start@@Base+0xa438>
   1c8f8:	mvn	r3, #0
   1c8fc:	and	r4, r4, r2
   1c900:	and	r5, r5, r3
   1c904:	add	r3, pc, #428	; 0x1ac
   1c908:	ldrd	r2, [r3]
   1c90c:	cmp	r5, r3
   1c910:	cmpeq	r4, r2
   1c914:	beq	1ca14 <_start@@Base+0xa35c>
   1c918:	mov	r2, sl
   1c91c:	mov	r1, r9
   1c920:	mov	r0, r8
   1c924:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1c928:	mov	r9, r0
   1c92c:	add	r3, sp, #300	; 0x12c
   1c930:	mov	r2, sl
   1c934:	mov	r1, r9
   1c938:	mov	r0, r8
   1c93c:	bl	18a08 <_start@@Base+0x6350>
   1c940:	mov	r9, r0
   1c944:	ldr	r3, [sp, #300]	; 0x12c
   1c948:	cmp	r3, #0
   1c94c:	beq	1dac4 <_start@@Base+0xb40c>
   1c950:	cmp	sl, r9
   1c954:	beq	1c980 <_start@@Base+0xa2c8>
   1c958:	ldrb	r3, [r9]
   1c95c:	cmp	r3, #34	; 0x22
   1c960:	addeq	r9, r9, #1
   1c964:	moveq	r3, #0
   1c968:	streq	r3, [r8, #12]
   1c96c:	beq	1c980 <_start@@Base+0xa2c8>
   1c970:	cmp	r3, #46	; 0x2e
   1c974:	movne	r3, #1
   1c978:	strne	r3, [r8, #12]
   1c97c:	beq	18c24 <_start@@Base+0x656c>
   1c980:	mov	r1, sl
   1c984:	mov	r0, r9
   1c988:	bl	127e0 <_start@@Base+0x128>
   1c98c:	mov	r4, r0
   1c990:	mov	r5, r1
   1c994:	add	r3, pc, #292	; 0x124
   1c998:	ldrd	r2, [r3]
   1c99c:	cmp	r1, r3
   1c9a0:	cmpeq	r0, r2
   1c9a4:	bhi	1a528 <_start@@Base+0x7e70>
   1c9a8:	add	r3, pc, #280	; 0x118
   1c9ac:	ldrd	r2, [r3]
   1c9b0:	cmp	r1, r3
   1c9b4:	cmpeq	r0, r2
   1c9b8:	bhi	1940c <_start@@Base+0x6d54>
   1c9bc:	add	r3, pc, #268	; 0x10c
   1c9c0:	ldrd	r2, [r3]
   1c9c4:	cmp	r1, r3
   1c9c8:	cmpeq	r0, r2
   1c9cc:	bhi	18e2c <_start@@Base+0x6774>
   1c9d0:	and	r4, r0, #-16777216	; 0xff000000
   1c9d4:	add	r3, pc, #252	; 0xfc
   1c9d8:	ldrd	r2, [r3]
   1c9dc:	cmp	r1, r3
   1c9e0:	cmpeq	r4, r2
   1c9e4:	beq	18c40 <_start@@Base+0x6588>
   1c9e8:	add	r3, pc, #240	; 0xf0
   1c9ec:	ldrd	r2, [r3]
   1c9f0:	cmp	r1, r3
   1c9f4:	cmpeq	r4, r2
   1c9f8:	beq	18cb4 <_start@@Base+0x65fc>
   1c9fc:	mov	r2, sl
   1ca00:	mov	r1, r9
   1ca04:	mov	r0, r8
   1ca08:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1ca0c:	mov	r9, r0
   1ca10:	b	1c92c <_start@@Base+0xa274>
   1ca14:	mov	r3, #6
   1ca18:	mov	r2, sl
   1ca1c:	mov	r1, r9
   1ca20:	mov	r0, r8
   1ca24:	bl	1467c <_start@@Base+0x1fc4>
   1ca28:	mov	r4, r0
   1ca2c:	cmp	r0, r9
   1ca30:	beq	1cb34 <_start@@Base+0xa47c>
   1ca34:	add	r3, sp, #304	; 0x130
   1ca38:	mov	r2, #0
   1ca3c:	str	r2, [r3, #-24]!	; 0xffffffe8
   1ca40:	mov	r2, sl
   1ca44:	mov	r1, r0
   1ca48:	mov	r0, r8
   1ca4c:	bl	28e38 <flatcc_json_parser_float@@Base>
   1ca50:	mov	r9, r0
   1ca54:	cmp	r4, r0
   1ca58:	beq	1caf8 <_start@@Base+0xa440>
   1ca5c:	vldr	s15, [sp, #280]	; 0x118
   1ca60:	vcmp.f32	s15, #0.0
   1ca64:	vmrs	APSR_nzcv, fpscr
   1ca68:	bne	1ca78 <_start@@Base+0xa3c0>
   1ca6c:	ldr	r3, [r8, #8]
   1ca70:	tst	r3, #2
   1ca74:	beq	1c92c <_start@@Base+0xa274>
   1ca78:	mov	r3, #4
   1ca7c:	mov	r2, r3
   1ca80:	mov	r1, #27
   1ca84:	ldr	r0, [r8]
   1ca88:	bl	25b40 <flatcc_builder_table_add@@Base>
   1ca8c:	cmp	r0, #0
   1ca90:	beq	1dd10 <_start@@Base+0xb658>
   1ca94:	ldr	r3, [sp, #280]	; 0x118
   1ca98:	str	r3, [r0]
   1ca9c:	b	1c92c <_start@@Base+0xa274>
   1caa0:	ldrtvs	r0, [r2], -r0
   1caa4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1caa8:	strvs	r0, [r0], -r0
   1caac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cab0:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1cab4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cab8:	ldrtvs	r0, [r3], -r0
   1cabc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cac0:	cmnvs	r2, r0, ror #4
   1cac4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cac8:			; <UNDEFINED> instruction: 0xffffffff
   1cacc:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1cad0:			; <UNDEFINED> instruction: 0xffffffff
   1cad4:			; <UNDEFINED> instruction: 0x666c6577
   1cad8:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1cadc:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1cae0:	andvc	r0, r0, #0
   1cae4:	cmnvs	pc, #28416	; 0x6f00
   1cae8:	submi	r0, r0, r0
   1caec:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1caf0:			; <UNDEFINED> instruction: 0xffff0000
   1caf4:	andeq	lr, r3, r8, ror r0
   1caf8:	add	r3, sp, #280	; 0x118
   1cafc:	str	r3, [sp]
   1cb00:	ldr	r3, [pc, #-20]	; 1caf4 <_start@@Base+0xa43c>
   1cb04:	add	r3, r3, #356	; 0x164
   1cb08:	mov	r2, sl
   1cb0c:	mov	r1, r0
   1cb10:	mov	r0, r8
   1cb14:	bl	14758 <_start@@Base+0x20a0>
   1cb18:	cmp	sl, r0
   1cb1c:	cmpne	r9, r0
   1cb20:	movne	r9, r0
   1cb24:	bne	1ca5c <_start@@Base+0xa3a4>
   1cb28:	mov	fp, r8
   1cb2c:	mov	r9, r0
   1cb30:	b	1dad4 <_start@@Base+0xb41c>
   1cb34:	mov	r2, sl
   1cb38:	mov	r1, r0
   1cb3c:	mov	r0, r8
   1cb40:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1cb44:	mov	r9, r0
   1cb48:	b	1c92c <_start@@Base+0xa274>
   1cb4c:	add	r3, pc, #956	; 0x3bc
   1cb50:	ldrd	r2, [r3]
   1cb54:	cmp	r1, r3
   1cb58:	cmpeq	r0, r2
   1cb5c:	beq	1cba0 <_start@@Base+0xa4e8>
   1cb60:	add	r3, pc, #944	; 0x3b0
   1cb64:	ldrd	r2, [r3]
   1cb68:	cmp	r1, r3
   1cb6c:	cmpeq	r0, r2
   1cb70:	bhi	1d718 <_start@@Base+0xb060>
   1cb74:	add	r3, pc, #932	; 0x3a4
   1cb78:	ldrd	r2, [r3]
   1cb7c:	cmp	r1, r3
   1cb80:	cmpeq	r0, r2
   1cb84:	beq	1d4e0 <_start@@Base+0xae28>
   1cb88:	mov	r2, sl
   1cb8c:	mov	r1, r9
   1cb90:	mov	r0, r8
   1cb94:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1cb98:	mov	r9, r0
   1cb9c:	b	1c92c <_start@@Base+0xa274>
   1cba0:	add	r4, r9, #8
   1cba4:	mov	r1, sl
   1cba8:	mov	r0, r4
   1cbac:	bl	127e0 <_start@@Base+0x128>
   1cbb0:	add	r3, pc, #880	; 0x370
   1cbb4:	ldrd	r2, [r3]
   1cbb8:	cmp	r1, r3
   1cbbc:	cmpeq	r0, r2
   1cbc0:	bhi	1cdec <_start@@Base+0xa734>
   1cbc4:	add	r3, pc, #868	; 0x364
   1cbc8:	ldrd	r2, [r3]
   1cbcc:	cmp	r1, r3
   1cbd0:	cmpeq	r0, r2
   1cbd4:	beq	1cbf0 <_start@@Base+0xa538>
   1cbd8:	mov	r2, sl
   1cbdc:	mov	r1, r4
   1cbe0:	mov	r0, r8
   1cbe4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1cbe8:	mov	r9, r0
   1cbec:	b	1c92c <_start@@Base+0xa274>
   1cbf0:	mov	r3, #8
   1cbf4:	mov	r2, sl
   1cbf8:	mov	r1, r4
   1cbfc:	mov	r0, r8
   1cc00:	bl	1467c <_start@@Base+0x1fc4>
   1cc04:	mov	r5, r0
   1cc08:	cmp	r4, r0
   1cc0c:	beq	1ccc4 <_start@@Base+0xa60c>
   1cc10:	add	r3, sp, #304	; 0x130
   1cc14:	mov	r2, #0
   1cc18:	str	r2, [r3, #-24]!	; 0xffffffe8
   1cc1c:	mov	r2, sl
   1cc20:	mov	r1, r0
   1cc24:	mov	r0, r8
   1cc28:	bl	14104 <_start@@Base+0x1a4c>
   1cc2c:	mov	r9, r0
   1cc30:	cmp	r5, r0
   1cc34:	beq	1cc78 <_start@@Base+0xa5c0>
   1cc38:	ldr	r3, [sp, #280]	; 0x118
   1cc3c:	cmp	r3, #0
   1cc40:	bne	1cc50 <_start@@Base+0xa598>
   1cc44:	ldr	r3, [r8, #8]
   1cc48:	tst	r3, #2
   1cc4c:	beq	1c92c <_start@@Base+0xa274>
   1cc50:	mov	r3, #4
   1cc54:	mov	r2, r3
   1cc58:	mov	r1, #16
   1cc5c:	ldr	r0, [r8]
   1cc60:	bl	25b40 <flatcc_builder_table_add@@Base>
   1cc64:	cmp	r0, #0
   1cc68:	beq	1ccac <_start@@Base+0xa5f4>
   1cc6c:	ldr	r3, [sp, #280]	; 0x118
   1cc70:	str	r3, [r0]
   1cc74:	b	1c92c <_start@@Base+0xa274>
   1cc78:	add	r3, sp, #280	; 0x118
   1cc7c:	str	r3, [sp]
   1cc80:	ldr	r3, [pc, #704]	; 1cf48 <_start@@Base+0xa890>
   1cc84:	add	r3, r3, #368	; 0x170
   1cc88:	mov	r2, sl
   1cc8c:	mov	r1, r0
   1cc90:	mov	r0, r8
   1cc94:	bl	15168 <_start@@Base+0x2ab0>
   1cc98:	cmp	sl, r0
   1cc9c:	cmpne	r9, r0
   1cca0:	beq	1ccbc <_start@@Base+0xa604>
   1cca4:	mov	r9, r0
   1cca8:	b	1cc38 <_start@@Base+0xa580>
   1ccac:	mov	fp, r8
   1ccb0:	mov	r0, r9
   1ccb4:	mov	r9, r0
   1ccb8:	b	1dad4 <_start@@Base+0xb41c>
   1ccbc:	mov	fp, r8
   1ccc0:	b	1ccb4 <_start@@Base+0xa5fc>
   1ccc4:	add	r9, r9, #16
   1ccc8:	mov	r1, sl
   1cccc:	mov	r0, r9
   1ccd0:	bl	127e0 <_start@@Base+0x128>
   1ccd4:	mov	r0, #0
   1ccd8:	and	r1, r1, #-16777216	; 0xff000000
   1ccdc:	cmp	r1, #1627389952	; 0x61000000
   1cce0:	cmpeq	r0, #0
   1cce4:	beq	1cd00 <_start@@Base+0xa648>
   1cce8:	mov	r2, sl
   1ccec:	mov	r1, r9
   1ccf0:	mov	r0, r8
   1ccf4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1ccf8:	mov	r9, r0
   1ccfc:	b	1c92c <_start@@Base+0xa274>
   1cd00:	mov	r3, #1
   1cd04:	mov	r2, sl
   1cd08:	mov	r1, r9
   1cd0c:	mov	r0, r8
   1cd10:	bl	1467c <_start@@Base+0x1fc4>
   1cd14:	mov	r4, r0
   1cd18:	cmp	r9, r0
   1cd1c:	beq	1cdd4 <_start@@Base+0xa71c>
   1cd20:	add	r3, sp, #304	; 0x130
   1cd24:	mov	r2, #0
   1cd28:	str	r2, [r3, #-24]!	; 0xffffffe8
   1cd2c:	mov	r2, sl
   1cd30:	mov	r1, r0
   1cd34:	mov	r0, r8
   1cd38:	bl	14104 <_start@@Base+0x1a4c>
   1cd3c:	mov	r9, r0
   1cd40:	cmp	r4, r0
   1cd44:	beq	1cd88 <_start@@Base+0xa6d0>
   1cd48:	ldr	r3, [sp, #280]	; 0x118
   1cd4c:	cmp	r3, #0
   1cd50:	bne	1cd60 <_start@@Base+0xa6a8>
   1cd54:	ldr	r3, [r8, #8]
   1cd58:	tst	r3, #2
   1cd5c:	beq	1c92c <_start@@Base+0xa274>
   1cd60:	mov	r3, #4
   1cd64:	mov	r2, r3
   1cd68:	mov	r1, #20
   1cd6c:	ldr	r0, [r8]
   1cd70:	bl	25b40 <flatcc_builder_table_add@@Base>
   1cd74:	cmp	r0, #0
   1cd78:	beq	1cdbc <_start@@Base+0xa704>
   1cd7c:	ldr	r3, [sp, #280]	; 0x118
   1cd80:	str	r3, [r0]
   1cd84:	b	1c92c <_start@@Base+0xa274>
   1cd88:	add	r3, sp, #280	; 0x118
   1cd8c:	str	r3, [sp]
   1cd90:	ldr	r3, [pc, #432]	; 1cf48 <_start@@Base+0xa890>
   1cd94:	add	r3, r3, #380	; 0x17c
   1cd98:	mov	r2, sl
   1cd9c:	mov	r1, r0
   1cda0:	mov	r0, r8
   1cda4:	bl	15168 <_start@@Base+0x2ab0>
   1cda8:	cmp	sl, r0
   1cdac:	cmpne	r9, r0
   1cdb0:	beq	1cdcc <_start@@Base+0xa714>
   1cdb4:	mov	r9, r0
   1cdb8:	b	1cd48 <_start@@Base+0xa690>
   1cdbc:	mov	fp, r8
   1cdc0:	mov	r0, r9
   1cdc4:	mov	r9, r0
   1cdc8:	b	1dad4 <_start@@Base+0xb41c>
   1cdcc:	mov	fp, r8
   1cdd0:	b	1cdc4 <_start@@Base+0xa70c>
   1cdd4:	mov	r2, sl
   1cdd8:	mov	r1, r0
   1cddc:	mov	r0, r8
   1cde0:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1cde4:	mov	r9, r0
   1cde8:	b	1c92c <_start@@Base+0xa274>
   1cdec:	add	r3, pc, #324	; 0x144
   1cdf0:	ldrd	r2, [r3]
   1cdf4:	cmp	r1, r3
   1cdf8:	cmpeq	r0, r2
   1cdfc:	bhi	1d080 <_start@@Base+0xa9c8>
   1ce00:	add	r3, pc, #312	; 0x138
   1ce04:	ldrd	r2, [r3]
   1ce08:	cmp	r1, r3
   1ce0c:	cmpeq	r0, r2
   1ce10:	beq	1ce2c <_start@@Base+0xa774>
   1ce14:	mov	r2, sl
   1ce18:	mov	r1, r4
   1ce1c:	mov	r0, r8
   1ce20:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1ce24:	mov	r9, r0
   1ce28:	b	1c92c <_start@@Base+0xa274>
   1ce2c:	mov	r3, #8
   1ce30:	mov	r2, sl
   1ce34:	mov	r1, r4
   1ce38:	mov	r0, r8
   1ce3c:	bl	1467c <_start@@Base+0x1fc4>
   1ce40:	mov	r5, r0
   1ce44:	cmp	r4, r0
   1ce48:	beq	1cf4c <_start@@Base+0xa894>
   1ce4c:	add	r3, sp, #304	; 0x130
   1ce50:	mov	r0, #0
   1ce54:	mov	r1, #0
   1ce58:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1ce5c:	mov	r2, sl
   1ce60:	mov	r1, r5
   1ce64:	mov	r0, r8
   1ce68:	bl	143b4 <_start@@Base+0x1cfc>
   1ce6c:	mov	r9, r0
   1ce70:	cmp	r5, r0
   1ce74:	beq	1cec0 <_start@@Base+0xa808>
   1ce78:	add	r3, sp, #280	; 0x118
   1ce7c:	ldrd	r2, [r3]
   1ce80:	orrs	r3, r2, r3
   1ce84:	bne	1ce94 <_start@@Base+0xa7dc>
   1ce88:	ldr	r3, [r8, #8]
   1ce8c:	tst	r3, #2
   1ce90:	beq	1c92c <_start@@Base+0xa274>
   1ce94:	mov	r3, #8
   1ce98:	mov	r2, r3
   1ce9c:	mov	r1, #18
   1cea0:	ldr	r0, [r8]
   1cea4:	bl	25b40 <flatcc_builder_table_add@@Base>
   1cea8:	cmp	r0, #0
   1ceac:	beq	1cef4 <_start@@Base+0xa83c>
   1ceb0:	add	r3, sp, #280	; 0x118
   1ceb4:	ldrd	r2, [r3]
   1ceb8:	strd	r2, [r0]
   1cebc:	b	1c92c <_start@@Base+0xa274>
   1cec0:	add	r3, sp, #280	; 0x118
   1cec4:	str	r3, [sp]
   1cec8:	ldr	r3, [pc, #120]	; 1cf48 <_start@@Base+0xa890>
   1cecc:	add	r3, r3, #392	; 0x188
   1ced0:	mov	r2, sl
   1ced4:	mov	r1, r0
   1ced8:	mov	r0, r8
   1cedc:	bl	15a24 <_start@@Base+0x336c>
   1cee0:	cmp	sl, r0
   1cee4:	cmpne	r9, r0
   1cee8:	beq	1cf04 <_start@@Base+0xa84c>
   1ceec:	mov	r9, r0
   1cef0:	b	1ce78 <_start@@Base+0xa7c0>
   1cef4:	mov	fp, r8
   1cef8:	mov	r0, r9
   1cefc:	mov	r9, r0
   1cf00:	b	1dad4 <_start@@Base+0xb41c>
   1cf04:	mov	fp, r8
   1cf08:	b	1cefc <_start@@Base+0xa844>
   1cf0c:	nop			; (mov r0, r0)
   1cf10:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1cf14:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cf18:	svcvs	0x00725f6e
   1cf1c:			; <UNDEFINED> instruction: 0x76656374
   1cf20:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1cf24:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1cf28:			; <UNDEFINED> instruction: 0x666e7630
   1cf2c:	teqvc	r6, #1593835520	; 0x5f000000
   1cf30:			; <UNDEFINED> instruction: 0x666e7631
   1cf34:	teqvc	r3, #-268435451	; 0xf0000005
   1cf38:			; <UNDEFINED> instruction: 0x666e7630
   1cf3c:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1cf40:			; <UNDEFINED> instruction: 0x666e7631
   1cf44:	teqvc	r6, #1593835520	; 0x5f000000
   1cf48:	andeq	lr, r3, r8, ror r0
   1cf4c:	add	r9, r9, #16
   1cf50:	mov	r1, sl
   1cf54:	mov	r0, r9
   1cf58:	bl	127e0 <_start@@Base+0x128>
   1cf5c:	mov	r0, #0
   1cf60:	and	r1, r1, #-16777216	; 0xff000000
   1cf64:	cmp	r1, #1627389952	; 0x61000000
   1cf68:	cmpeq	r0, #0
   1cf6c:	beq	1cf88 <_start@@Base+0xa8d0>
   1cf70:	mov	r2, sl
   1cf74:	mov	r1, r9
   1cf78:	mov	r0, r8
   1cf7c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1cf80:	mov	r9, r0
   1cf84:	b	1c92c <_start@@Base+0xa274>
   1cf88:	mov	r3, #1
   1cf8c:	mov	r2, sl
   1cf90:	mov	r1, r9
   1cf94:	mov	r0, r8
   1cf98:	bl	1467c <_start@@Base+0x1fc4>
   1cf9c:	mov	r4, r0
   1cfa0:	cmp	r9, r0
   1cfa4:	beq	1d068 <_start@@Base+0xa9b0>
   1cfa8:	add	r3, sp, #304	; 0x130
   1cfac:	mov	r0, #0
   1cfb0:	mov	r1, #0
   1cfb4:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1cfb8:	mov	r2, sl
   1cfbc:	mov	r1, r4
   1cfc0:	mov	r0, r8
   1cfc4:	bl	143b4 <_start@@Base+0x1cfc>
   1cfc8:	mov	r9, r0
   1cfcc:	cmp	r4, r0
   1cfd0:	beq	1d01c <_start@@Base+0xa964>
   1cfd4:	add	r3, sp, #280	; 0x118
   1cfd8:	ldrd	r2, [r3]
   1cfdc:	orrs	r3, r2, r3
   1cfe0:	bne	1cff0 <_start@@Base+0xa938>
   1cfe4:	ldr	r3, [r8, #8]
   1cfe8:	tst	r3, #2
   1cfec:	beq	1c92c <_start@@Base+0xa274>
   1cff0:	mov	r3, #8
   1cff4:	mov	r2, r3
   1cff8:	mov	r1, #22
   1cffc:	ldr	r0, [r8]
   1d000:	bl	25b40 <flatcc_builder_table_add@@Base>
   1d004:	cmp	r0, #0
   1d008:	beq	1d050 <_start@@Base+0xa998>
   1d00c:	add	r3, sp, #280	; 0x118
   1d010:	ldrd	r2, [r3]
   1d014:	strd	r2, [r0]
   1d018:	b	1c92c <_start@@Base+0xa274>
   1d01c:	add	r3, sp, #280	; 0x118
   1d020:	str	r3, [sp]
   1d024:	ldr	r3, [pc, #-228]	; 1cf48 <_start@@Base+0xa890>
   1d028:	add	r3, r3, #404	; 0x194
   1d02c:	mov	r2, sl
   1d030:	mov	r1, r0
   1d034:	mov	r0, r8
   1d038:	bl	15a24 <_start@@Base+0x336c>
   1d03c:	cmp	sl, r0
   1d040:	cmpne	r9, r0
   1d044:	beq	1d060 <_start@@Base+0xa9a8>
   1d048:	mov	r9, r0
   1d04c:	b	1cfd4 <_start@@Base+0xa91c>
   1d050:	mov	fp, r8
   1d054:	mov	r0, r9
   1d058:	mov	r9, r0
   1d05c:	b	1dad4 <_start@@Base+0xb41c>
   1d060:	mov	fp, r8
   1d064:	b	1d058 <_start@@Base+0xa9a0>
   1d068:	mov	r2, sl
   1d06c:	mov	r1, r0
   1d070:	mov	r0, r8
   1d074:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d078:	mov	r9, r0
   1d07c:	b	1c92c <_start@@Base+0xa274>
   1d080:	add	r3, pc, #848	; 0x350
   1d084:	ldrd	r2, [r3]
   1d088:	cmp	r1, r3
   1d08c:	cmpeq	r0, r2
   1d090:	beq	1d0c0 <_start@@Base+0xaa08>
   1d094:	add	r3, pc, #836	; 0x344
   1d098:	ldrd	r2, [r3]
   1d09c:	cmp	r1, r3
   1d0a0:	cmpeq	r0, r2
   1d0a4:	beq	1d2bc <_start@@Base+0xac04>
   1d0a8:	mov	r2, sl
   1d0ac:	mov	r1, r4
   1d0b0:	mov	r0, r8
   1d0b4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d0b8:	mov	r9, r0
   1d0bc:	b	1c92c <_start@@Base+0xa274>
   1d0c0:	mov	r3, #8
   1d0c4:	mov	r2, sl
   1d0c8:	mov	r1, r4
   1d0cc:	mov	r0, r8
   1d0d0:	bl	1467c <_start@@Base+0x1fc4>
   1d0d4:	mov	r5, r0
   1d0d8:	cmp	r4, r0
   1d0dc:	beq	1d194 <_start@@Base+0xaadc>
   1d0e0:	add	r3, sp, #304	; 0x130
   1d0e4:	mov	r2, #0
   1d0e8:	str	r2, [r3, #-24]!	; 0xffffffe8
   1d0ec:	mov	r2, sl
   1d0f0:	mov	r1, r0
   1d0f4:	mov	r0, r8
   1d0f8:	bl	141cc <_start@@Base+0x1b14>
   1d0fc:	mov	r9, r0
   1d100:	cmp	r5, r0
   1d104:	beq	1d148 <_start@@Base+0xaa90>
   1d108:	ldr	r3, [sp, #280]	; 0x118
   1d10c:	cmp	r3, #0
   1d110:	bne	1d120 <_start@@Base+0xaa68>
   1d114:	ldr	r3, [r8, #8]
   1d118:	tst	r3, #2
   1d11c:	beq	1c92c <_start@@Base+0xa274>
   1d120:	mov	r3, #4
   1d124:	mov	r2, r3
   1d128:	mov	r1, #17
   1d12c:	ldr	r0, [r8]
   1d130:	bl	25b40 <flatcc_builder_table_add@@Base>
   1d134:	cmp	r0, #0
   1d138:	beq	1d17c <_start@@Base+0xaac4>
   1d13c:	ldr	r3, [sp, #280]	; 0x118
   1d140:	str	r3, [r0]
   1d144:	b	1c92c <_start@@Base+0xa274>
   1d148:	add	r3, sp, #280	; 0x118
   1d14c:	str	r3, [sp]
   1d150:	ldr	r3, [pc, #656]	; 1d3e8 <_start@@Base+0xad30>
   1d154:	add	r3, r3, #416	; 0x1a0
   1d158:	mov	r2, sl
   1d15c:	mov	r1, r0
   1d160:	mov	r0, r8
   1d164:	bl	15804 <_start@@Base+0x314c>
   1d168:	cmp	sl, r0
   1d16c:	cmpne	r9, r0
   1d170:	beq	1d18c <_start@@Base+0xaad4>
   1d174:	mov	r9, r0
   1d178:	b	1d108 <_start@@Base+0xaa50>
   1d17c:	mov	fp, r8
   1d180:	mov	r0, r9
   1d184:	mov	r9, r0
   1d188:	b	1dad4 <_start@@Base+0xb41c>
   1d18c:	mov	fp, r8
   1d190:	b	1d184 <_start@@Base+0xaacc>
   1d194:	add	r9, r9, #16
   1d198:	mov	r1, sl
   1d19c:	mov	r0, r9
   1d1a0:	bl	127e0 <_start@@Base+0x128>
   1d1a4:	mov	r0, #0
   1d1a8:	and	r1, r1, #-16777216	; 0xff000000
   1d1ac:	cmp	r1, #1627389952	; 0x61000000
   1d1b0:	cmpeq	r0, #0
   1d1b4:	beq	1d1d0 <_start@@Base+0xab18>
   1d1b8:	mov	r2, sl
   1d1bc:	mov	r1, r9
   1d1c0:	mov	r0, r8
   1d1c4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d1c8:	mov	r9, r0
   1d1cc:	b	1c92c <_start@@Base+0xa274>
   1d1d0:	mov	r3, #1
   1d1d4:	mov	r2, sl
   1d1d8:	mov	r1, r9
   1d1dc:	mov	r0, r8
   1d1e0:	bl	1467c <_start@@Base+0x1fc4>
   1d1e4:	mov	r4, r0
   1d1e8:	cmp	r9, r0
   1d1ec:	beq	1d2a4 <_start@@Base+0xabec>
   1d1f0:	add	r3, sp, #304	; 0x130
   1d1f4:	mov	r2, #0
   1d1f8:	str	r2, [r3, #-24]!	; 0xffffffe8
   1d1fc:	mov	r2, sl
   1d200:	mov	r1, r0
   1d204:	mov	r0, r8
   1d208:	bl	141cc <_start@@Base+0x1b14>
   1d20c:	mov	r9, r0
   1d210:	cmp	r4, r0
   1d214:	beq	1d258 <_start@@Base+0xaba0>
   1d218:	ldr	r3, [sp, #280]	; 0x118
   1d21c:	cmp	r3, #0
   1d220:	bne	1d230 <_start@@Base+0xab78>
   1d224:	ldr	r3, [r8, #8]
   1d228:	tst	r3, #2
   1d22c:	beq	1c92c <_start@@Base+0xa274>
   1d230:	mov	r3, #4
   1d234:	mov	r2, r3
   1d238:	mov	r1, #21
   1d23c:	ldr	r0, [r8]
   1d240:	bl	25b40 <flatcc_builder_table_add@@Base>
   1d244:	cmp	r0, #0
   1d248:	beq	1d28c <_start@@Base+0xabd4>
   1d24c:	ldr	r3, [sp, #280]	; 0x118
   1d250:	str	r3, [r0]
   1d254:	b	1c92c <_start@@Base+0xa274>
   1d258:	add	r3, sp, #280	; 0x118
   1d25c:	str	r3, [sp]
   1d260:	ldr	r3, [pc, #384]	; 1d3e8 <_start@@Base+0xad30>
   1d264:	add	r3, r3, #428	; 0x1ac
   1d268:	mov	r2, sl
   1d26c:	mov	r1, r0
   1d270:	mov	r0, r8
   1d274:	bl	15804 <_start@@Base+0x314c>
   1d278:	cmp	sl, r0
   1d27c:	cmpne	r9, r0
   1d280:	beq	1d29c <_start@@Base+0xabe4>
   1d284:	mov	r9, r0
   1d288:	b	1d218 <_start@@Base+0xab60>
   1d28c:	mov	fp, r8
   1d290:	mov	r0, r9
   1d294:	mov	r9, r0
   1d298:	b	1dad4 <_start@@Base+0xb41c>
   1d29c:	mov	fp, r8
   1d2a0:	b	1d294 <_start@@Base+0xabdc>
   1d2a4:	mov	r2, sl
   1d2a8:	mov	r1, r0
   1d2ac:	mov	r0, r8
   1d2b0:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d2b4:	mov	r9, r0
   1d2b8:	b	1c92c <_start@@Base+0xa274>
   1d2bc:	mov	r3, #8
   1d2c0:	mov	r2, sl
   1d2c4:	mov	r1, r4
   1d2c8:	mov	r0, r8
   1d2cc:	bl	1467c <_start@@Base+0x1fc4>
   1d2d0:	mov	r5, r0
   1d2d4:	cmp	r4, r0
   1d2d8:	beq	1d39c <_start@@Base+0xace4>
   1d2dc:	add	r3, sp, #304	; 0x130
   1d2e0:	mov	r0, #0
   1d2e4:	mov	r1, #0
   1d2e8:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1d2ec:	mov	r2, sl
   1d2f0:	mov	r1, r5
   1d2f4:	mov	r0, r8
   1d2f8:	bl	14280 <_start@@Base+0x1bc8>
   1d2fc:	mov	r9, r0
   1d300:	cmp	r5, r0
   1d304:	beq	1d350 <_start@@Base+0xac98>
   1d308:	add	r3, sp, #280	; 0x118
   1d30c:	ldrd	r2, [r3]
   1d310:	orrs	r3, r2, r3
   1d314:	bne	1d324 <_start@@Base+0xac6c>
   1d318:	ldr	r3, [r8, #8]
   1d31c:	tst	r3, #2
   1d320:	beq	1c92c <_start@@Base+0xa274>
   1d324:	mov	r3, #8
   1d328:	mov	r2, r3
   1d32c:	mov	r1, #19
   1d330:	ldr	r0, [r8]
   1d334:	bl	25b40 <flatcc_builder_table_add@@Base>
   1d338:	cmp	r0, #0
   1d33c:	beq	1d384 <_start@@Base+0xaccc>
   1d340:	add	r3, sp, #280	; 0x118
   1d344:	ldrd	r2, [r3]
   1d348:	strd	r2, [r0]
   1d34c:	b	1c92c <_start@@Base+0xa274>
   1d350:	add	r3, sp, #280	; 0x118
   1d354:	str	r3, [sp]
   1d358:	ldr	r3, [pc, #136]	; 1d3e8 <_start@@Base+0xad30>
   1d35c:	add	r3, r3, #440	; 0x1b8
   1d360:	mov	r2, sl
   1d364:	mov	r1, r0
   1d368:	mov	r0, r8
   1d36c:	bl	144c0 <_start@@Base+0x1e08>
   1d370:	cmp	sl, r0
   1d374:	cmpne	r9, r0
   1d378:	beq	1d394 <_start@@Base+0xacdc>
   1d37c:	mov	r9, r0
   1d380:	b	1d308 <_start@@Base+0xac50>
   1d384:	mov	fp, r8
   1d388:	mov	r0, r9
   1d38c:	mov	r9, r0
   1d390:	b	1dad4 <_start@@Base+0xb41c>
   1d394:	mov	fp, r8
   1d398:	b	1d38c <_start@@Base+0xacd4>
   1d39c:	add	r9, r9, #16
   1d3a0:	mov	r1, sl
   1d3a4:	mov	r0, r9
   1d3a8:	bl	127e0 <_start@@Base+0x128>
   1d3ac:	mov	r0, #0
   1d3b0:	and	r1, r1, #-16777216	; 0xff000000
   1d3b4:	cmp	r1, #1627389952	; 0x61000000
   1d3b8:	cmpeq	r0, #0
   1d3bc:	beq	1d3ec <_start@@Base+0xad34>
   1d3c0:	mov	r2, sl
   1d3c4:	mov	r1, r9
   1d3c8:	mov	r0, r8
   1d3cc:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d3d0:	mov	r9, r0
   1d3d4:	b	1c92c <_start@@Base+0xa274>
   1d3d8:			; <UNDEFINED> instruction: 0x666e7631
   1d3dc:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1d3e0:			; <UNDEFINED> instruction: 0x666e7631
   1d3e4:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1d3e8:	andeq	lr, r3, r8, ror r0
   1d3ec:	mov	r3, #1
   1d3f0:	mov	r2, sl
   1d3f4:	mov	r1, r9
   1d3f8:	mov	r0, r8
   1d3fc:	bl	1467c <_start@@Base+0x1fc4>
   1d400:	mov	r4, r0
   1d404:	cmp	r9, r0
   1d408:	beq	1d4c8 <_start@@Base+0xae10>
   1d40c:	add	r3, sp, #304	; 0x130
   1d410:	mov	r0, #0
   1d414:	mov	r1, #0
   1d418:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1d41c:	mov	r2, sl
   1d420:	mov	r1, r4
   1d424:	mov	r0, r8
   1d428:	bl	14280 <_start@@Base+0x1bc8>
   1d42c:	mov	r9, r0
   1d430:	cmp	r4, r0
   1d434:	beq	1d480 <_start@@Base+0xadc8>
   1d438:	add	r3, sp, #280	; 0x118
   1d43c:	ldrd	r2, [r3]
   1d440:	orrs	r3, r2, r3
   1d444:	bne	1d454 <_start@@Base+0xad9c>
   1d448:	ldr	r3, [r8, #8]
   1d44c:	tst	r3, #2
   1d450:	beq	1c92c <_start@@Base+0xa274>
   1d454:	mov	r3, #8
   1d458:	mov	r2, r3
   1d45c:	mov	r1, #23
   1d460:	ldr	r0, [r8]
   1d464:	bl	25b40 <flatcc_builder_table_add@@Base>
   1d468:	cmp	r0, #0
   1d46c:	beq	1d4b0 <_start@@Base+0xadf8>
   1d470:	add	r3, sp, #280	; 0x118
   1d474:	ldrd	r2, [r3]
   1d478:	strd	r2, [r0]
   1d47c:	b	1c92c <_start@@Base+0xa274>
   1d480:	add	r3, sp, #280	; 0x118
   1d484:	str	r3, [sp]
   1d488:	ldr	r3, [sp, #256]	; 0x100
   1d48c:	mov	r2, sl
   1d490:	mov	r1, r0
   1d494:	mov	r0, r8
   1d498:	bl	144c0 <_start@@Base+0x1e08>
   1d49c:	cmp	sl, r0
   1d4a0:	cmpne	r9, r0
   1d4a4:	beq	1d4c0 <_start@@Base+0xae08>
   1d4a8:	mov	r9, r0
   1d4ac:	b	1d438 <_start@@Base+0xad80>
   1d4b0:	mov	fp, r8
   1d4b4:	mov	r0, r9
   1d4b8:	mov	r9, r0
   1d4bc:	b	1dad4 <_start@@Base+0xb41c>
   1d4c0:	mov	fp, r8
   1d4c4:	b	1d4b8 <_start@@Base+0xae00>
   1d4c8:	mov	r2, sl
   1d4cc:	mov	r1, r0
   1d4d0:	mov	r0, r8
   1d4d4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d4d8:	mov	r9, r0
   1d4dc:	b	1c92c <_start@@Base+0xa274>
   1d4e0:	add	r4, r9, #8
   1d4e4:	mov	r1, sl
   1d4e8:	mov	r0, r4
   1d4ec:	bl	127e0 <_start@@Base+0x128>
   1d4f0:	add	r3, pc, #1000	; 0x3e8
   1d4f4:	ldrd	r2, [r3]
   1d4f8:	cmp	r1, r3
   1d4fc:	cmpeq	r0, r2
   1d500:	beq	1d51c <_start@@Base+0xae64>
   1d504:	mov	r2, sl
   1d508:	mov	r1, r4
   1d50c:	mov	r0, r8
   1d510:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d514:	mov	r9, r0
   1d518:	b	1c92c <_start@@Base+0xa274>
   1d51c:	add	r4, r9, #16
   1d520:	mov	r1, sl
   1d524:	mov	r0, r4
   1d528:	bl	127e0 <_start@@Base+0x128>
   1d52c:	mov	r0, #0
   1d530:	add	r3, pc, #944	; 0x3b0
   1d534:	ldrd	r2, [r3]
   1d538:	cmp	r1, r3
   1d53c:	cmpeq	r0, r2
   1d540:	beq	1d55c <_start@@Base+0xaea4>
   1d544:	mov	r2, sl
   1d548:	mov	r1, r4
   1d54c:	mov	r0, r8
   1d550:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d554:	mov	r9, r0
   1d558:	b	1c92c <_start@@Base+0xa274>
   1d55c:	mov	r3, #4
   1d560:	mov	r2, sl
   1d564:	mov	r1, r4
   1d568:	mov	r0, r8
   1d56c:	bl	1467c <_start@@Base+0x1fc4>
   1d570:	mov	r9, r0
   1d574:	cmp	r4, r0
   1d578:	beq	1d700 <_start@@Base+0xb048>
   1d57c:	cmp	sl, r0
   1d580:	beq	1d590 <_start@@Base+0xaed8>
   1d584:	ldrb	r3, [r0]
   1d588:	cmp	r3, #91	; 0x5b
   1d58c:	beq	1d608 <_start@@Base+0xaf50>
   1d590:	mov	r3, #0
   1d594:	mov	r2, r3
   1d598:	mov	r1, r3
   1d59c:	ldr	r0, [r8]
   1d5a0:	bl	23318 <flatcc_builder_start_buffer@@Base>
   1d5a4:	cmp	r0, #0
   1d5a8:	bne	1dd28 <_start@@Base+0xb670>
   1d5ac:	add	r3, sp, #296	; 0x128
   1d5b0:	mov	r2, sl
   1d5b4:	mov	r1, r9
   1d5b8:	mov	r0, r8
   1d5bc:	bl	18b8c <_start@@Base+0x64d4>
   1d5c0:	mov	r9, r0
   1d5c4:	ldr	r1, [sp, #296]	; 0x128
   1d5c8:	cmp	r1, #0
   1d5cc:	beq	1dd30 <_start@@Base+0xb678>
   1d5d0:	ldr	r0, [r8]
   1d5d4:	bl	233d0 <flatcc_builder_end_buffer@@Base>
   1d5d8:	str	r0, [sp, #296]	; 0x128
   1d5dc:	ldr	r3, [sp, #296]	; 0x128
   1d5e0:	cmp	r3, #0
   1d5e4:	beq	1dd38 <_start@@Base+0xb680>
   1d5e8:	mov	r1, #13
   1d5ec:	ldr	r0, [r8]
   1d5f0:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1d5f4:	cmp	r0, #0
   1d5f8:	beq	1dd40 <_start@@Base+0xb688>
   1d5fc:	ldr	r3, [sp, #296]	; 0x128
   1d600:	str	r3, [r0]
   1d604:	b	1c92c <_start@@Base+0xa274>
   1d608:	mvn	r3, #0
   1d60c:	mov	r2, #1
   1d610:	mov	r1, r2
   1d614:	ldr	r0, [r8]
   1d618:	bl	23e94 <flatcc_builder_start_vector@@Base>
   1d61c:	cmp	r0, #0
   1d620:	bne	1dd18 <_start@@Base+0xb660>
   1d624:	add	r3, sp, #300	; 0x12c
   1d628:	mov	r2, sl
   1d62c:	mov	r1, r9
   1d630:	mov	r0, r8
   1d634:	bl	15c6c <_start@@Base+0x35b4>
   1d638:	mov	r9, r0
   1d63c:	ldr	r3, [sp, #300]	; 0x12c
   1d640:	cmp	r3, #0
   1d644:	beq	1d6f0 <_start@@Base+0xb038>
   1d648:	mov	r5, #0
   1d64c:	mov	fp, #1
   1d650:	add	r6, sp, #280	; 0x118
   1d654:	ldr	r3, [pc, #692]	; 1d910 <_start@@Base+0xb258>
   1d658:	add	r7, r3, #464	; 0x1d0
   1d65c:	b	1d68c <_start@@Base+0xafd4>
   1d660:	ldrb	r3, [sp, #280]	; 0x118
   1d664:	strb	r3, [r4]
   1d668:	add	r3, sp, #300	; 0x12c
   1d66c:	mov	r2, sl
   1d670:	mov	r1, r0
   1d674:	mov	r0, r8
   1d678:	bl	18884 <_start@@Base+0x61cc>
   1d67c:	mov	r9, r0
   1d680:	ldr	r3, [sp, #300]	; 0x12c
   1d684:	cmp	r3, #0
   1d688:	beq	1d6f0 <_start@@Base+0xb038>
   1d68c:	strb	r5, [sp, #280]	; 0x118
   1d690:	mov	r1, fp
   1d694:	ldr	r0, [r8]
   1d698:	bl	2368c <flatcc_builder_extend_vector@@Base>
   1d69c:	subs	r4, r0, #0
   1d6a0:	beq	1dd20 <_start@@Base+0xb668>
   1d6a4:	mov	r3, r6
   1d6a8:	mov	r2, sl
   1d6ac:	mov	r1, r9
   1d6b0:	mov	r0, r8
   1d6b4:	bl	14308 <_start@@Base+0x1c50>
   1d6b8:	cmp	r0, r9
   1d6bc:	bne	1d660 <_start@@Base+0xafa8>
   1d6c0:	str	r6, [sp]
   1d6c4:	mov	r3, r7
   1d6c8:	mov	r2, sl
   1d6cc:	mov	r1, r9
   1d6d0:	mov	r0, r8
   1d6d4:	bl	14d18 <_start@@Base+0x2660>
   1d6d8:	cmp	sl, r0
   1d6dc:	cmpne	r0, r9
   1d6e0:	bne	1d660 <_start@@Base+0xafa8>
   1d6e4:	mov	fp, r8
   1d6e8:	mov	r9, r0
   1d6ec:	b	1dad4 <_start@@Base+0xb41c>
   1d6f0:	ldr	r0, [r8]
   1d6f4:	bl	24ea4 <flatcc_builder_end_vector@@Base>
   1d6f8:	str	r0, [sp, #296]	; 0x128
   1d6fc:	b	1d5dc <_start@@Base+0xaf24>
   1d700:	mov	r2, sl
   1d704:	mov	r1, r0
   1d708:	mov	r0, r8
   1d70c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d710:	mov	r9, r0
   1d714:	b	1c92c <_start@@Base+0xa274>
   1d718:	add	r3, pc, #464	; 0x1d0
   1d71c:	ldrd	r2, [r3]
   1d720:	cmp	r1, r3
   1d724:	cmpeq	r0, r2
   1d728:	beq	1d744 <_start@@Base+0xb08c>
   1d72c:	mov	r2, sl
   1d730:	mov	r1, r9
   1d734:	mov	r0, r8
   1d738:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d73c:	mov	r9, r0
   1d740:	b	1c92c <_start@@Base+0xa274>
   1d744:	add	r4, r9, #8
   1d748:	mov	r1, sl
   1d74c:	mov	r0, r4
   1d750:	bl	127e0 <_start@@Base+0x128>
   1d754:	add	r3, pc, #412	; 0x19c
   1d758:	ldrd	r2, [r3]
   1d75c:	cmp	r1, r3
   1d760:	cmpeq	r0, r2
   1d764:	beq	1d798 <_start@@Base+0xb0e0>
   1d768:	bic	r0, r0, #255	; 0xff
   1d76c:	add	r3, pc, #396	; 0x18c
   1d770:	ldrd	r2, [r3]
   1d774:	cmp	r1, r3
   1d778:	cmpeq	r0, r2
   1d77c:	beq	1d960 <_start@@Base+0xb2a8>
   1d780:	mov	r2, sl
   1d784:	mov	r1, r4
   1d788:	mov	r0, r8
   1d78c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d790:	mov	r9, r0
   1d794:	b	1c92c <_start@@Base+0xa274>
   1d798:	add	r4, r9, #16
   1d79c:	mov	r1, sl
   1d7a0:	mov	r0, r4
   1d7a4:	bl	127e0 <_start@@Base+0x128>
   1d7a8:	mov	r0, #0
   1d7ac:	and	r1, r1, #-16777216	; 0xff000000
   1d7b0:	cmp	r1, #1929379840	; 0x73000000
   1d7b4:	cmpeq	r0, #0
   1d7b8:	beq	1d7d4 <_start@@Base+0xb11c>
   1d7bc:	mov	r2, sl
   1d7c0:	mov	r1, r4
   1d7c4:	mov	r0, r8
   1d7c8:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d7cc:	mov	r9, r0
   1d7d0:	b	1c92c <_start@@Base+0xa274>
   1d7d4:	mov	r3, #1
   1d7d8:	mov	r2, sl
   1d7dc:	mov	r1, r4
   1d7e0:	mov	r0, r8
   1d7e4:	bl	1467c <_start@@Base+0x1fc4>
   1d7e8:	mov	r9, r0
   1d7ec:	cmp	r4, r0
   1d7f0:	beq	1d948 <_start@@Base+0xb290>
   1d7f4:	mvn	r3, #-536870912	; 0xe0000000
   1d7f8:	mov	r2, #8
   1d7fc:	mov	r1, r2
   1d800:	ldr	r0, [r8]
   1d804:	bl	23e94 <flatcc_builder_start_vector@@Base>
   1d808:	cmp	r0, #0
   1d80c:	bne	1dd48 <_start@@Base+0xb690>
   1d810:	add	r3, sp, #300	; 0x12c
   1d814:	mov	r2, sl
   1d818:	mov	r1, r9
   1d81c:	mov	r0, r8
   1d820:	bl	15c6c <_start@@Base+0x35b4>
   1d824:	mov	r9, r0
   1d828:	ldr	r3, [sp, #300]	; 0x12c
   1d82c:	cmp	r3, #0
   1d830:	beq	1d914 <_start@@Base+0xb25c>
   1d834:	vldr	d8, [pc, #204]	; 1d908 <_start@@Base+0xb250>
   1d838:	mov	r6, #1
   1d83c:	add	r5, sp, #280	; 0x118
   1d840:	ldr	r3, [pc, #200]	; 1d910 <_start@@Base+0xb258>
   1d844:	add	r7, r3, #476	; 0x1dc
   1d848:	b	1d87c <_start@@Base+0xb1c4>
   1d84c:	add	r3, sp, #280	; 0x118
   1d850:	ldrd	r2, [r3]
   1d854:	strd	r2, [r4]
   1d858:	add	r3, sp, #300	; 0x12c
   1d85c:	mov	r2, sl
   1d860:	mov	r1, r0
   1d864:	mov	r0, r8
   1d868:	bl	18884 <_start@@Base+0x61cc>
   1d86c:	mov	r9, r0
   1d870:	ldr	r3, [sp, #300]	; 0x12c
   1d874:	cmp	r3, #0
   1d878:	beq	1d914 <_start@@Base+0xb25c>
   1d87c:	vstr	d8, [sp, #280]	; 0x118
   1d880:	mov	r1, r6
   1d884:	ldr	r0, [r8]
   1d888:	bl	2368c <flatcc_builder_extend_vector@@Base>
   1d88c:	subs	r4, r0, #0
   1d890:	beq	1dd50 <_start@@Base+0xb698>
   1d894:	mov	r3, r5
   1d898:	mov	r2, sl
   1d89c:	mov	r1, r9
   1d8a0:	mov	r0, r8
   1d8a4:	bl	28d54 <flatcc_json_parser_double@@Base>
   1d8a8:	cmp	r0, r9
   1d8ac:	bne	1d84c <_start@@Base+0xb194>
   1d8b0:	str	r5, [sp]
   1d8b4:	mov	r3, r7
   1d8b8:	mov	r2, sl
   1d8bc:	mov	r1, r9
   1d8c0:	mov	r0, r8
   1d8c4:	bl	14934 <_start@@Base+0x227c>
   1d8c8:	cmp	sl, r0
   1d8cc:	cmpne	r0, r9
   1d8d0:	bne	1d84c <_start@@Base+0xb194>
   1d8d4:	mov	fp, r8
   1d8d8:	mov	r9, r0
   1d8dc:	b	1dad4 <_start@@Base+0xb41c>
   1d8e0:	cmnvs	r4, r5, ror r2
   1d8e4:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1d8e8:	andeq	r0, r0, r0
   1d8ec:			; <UNDEFINED> instruction: 0x66666572
   1d8f0:	svcvs	0x00725f6f
   1d8f4:			; <UNDEFINED> instruction: 0x76656374
   1d8f8:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1d8fc:	ldrbvs	r6, [pc], -pc, ror #8
   1d900:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1d904:	ldrbvs	r6, [pc], -pc, ror #24
	...
   1d910:	andeq	lr, r3, r8, ror r0
   1d914:	ldr	r0, [r8]
   1d918:	bl	24ea4 <flatcc_builder_end_vector@@Base>
   1d91c:	str	r0, [sp, #296]	; 0x128
   1d920:	cmp	r0, #0
   1d924:	beq	1dd58 <_start@@Base+0xb6a0>
   1d928:	mov	r1, #33	; 0x21
   1d92c:	ldr	r0, [r8]
   1d930:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1d934:	cmp	r0, #0
   1d938:	beq	1dd60 <_start@@Base+0xb6a8>
   1d93c:	ldr	r3, [sp, #296]	; 0x128
   1d940:	str	r3, [r0]
   1d944:	b	1c92c <_start@@Base+0xa274>
   1d948:	mov	r2, sl
   1d94c:	mov	r1, r0
   1d950:	mov	r0, r8
   1d954:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1d958:	mov	r9, r0
   1d95c:	b	1c92c <_start@@Base+0xa274>
   1d960:	mov	r3, #7
   1d964:	mov	r2, sl
   1d968:	mov	r1, r4
   1d96c:	mov	r0, r8
   1d970:	bl	1467c <_start@@Base+0x1fc4>
   1d974:	mov	r9, r0
   1d978:	cmp	r4, r0
   1d97c:	beq	1daac <_start@@Base+0xb3f4>
   1d980:	mvn	r3, #-536870912	; 0xe0000000
   1d984:	mov	r2, #8
   1d988:	mov	r1, r2
   1d98c:	ldr	r0, [r8]
   1d990:	bl	23e94 <flatcc_builder_start_vector@@Base>
   1d994:	cmp	r0, #0
   1d998:	bne	1dd68 <_start@@Base+0xb6b0>
   1d99c:	add	r3, sp, #300	; 0x12c
   1d9a0:	mov	r2, sl
   1d9a4:	mov	r1, r9
   1d9a8:	mov	r0, r8
   1d9ac:	bl	15c6c <_start@@Base+0x35b4>
   1d9b0:	mov	r9, r0
   1d9b4:	ldr	r3, [sp, #300]	; 0x12c
   1d9b8:	cmp	r3, #0
   1d9bc:	beq	1da78 <_start@@Base+0xb3c0>
   1d9c0:	mov	r4, #0
   1d9c4:	mov	r5, #0
   1d9c8:	mov	fp, #1
   1d9cc:	add	r7, sp, #280	; 0x118
   1d9d0:	ldr	r3, [pc, #-200]	; 1d910 <_start@@Base+0xb258>
   1d9d4:	add	r3, r3, #488	; 0x1e8
   1d9d8:	str	r3, [sp, #20]
   1d9dc:	b	1da10 <_start@@Base+0xb358>
   1d9e0:	add	r3, sp, #280	; 0x118
   1d9e4:	ldrd	r2, [r3]
   1d9e8:	strd	r2, [r6]
   1d9ec:	add	r3, sp, #300	; 0x12c
   1d9f0:	mov	r2, sl
   1d9f4:	mov	r1, r0
   1d9f8:	mov	r0, r8
   1d9fc:	bl	18884 <_start@@Base+0x61cc>
   1da00:	mov	r9, r0
   1da04:	ldr	r3, [sp, #300]	; 0x12c
   1da08:	cmp	r3, #0
   1da0c:	beq	1da78 <_start@@Base+0xb3c0>
   1da10:	add	r3, sp, #280	; 0x118
   1da14:	strd	r4, [r3]
   1da18:	mov	r1, fp
   1da1c:	ldr	r0, [r8]
   1da20:	bl	2368c <flatcc_builder_extend_vector@@Base>
   1da24:	subs	r6, r0, #0
   1da28:	beq	1dd70 <_start@@Base+0xb6b8>
   1da2c:	mov	r3, r7
   1da30:	mov	r2, sl
   1da34:	mov	r1, r9
   1da38:	mov	r0, r8
   1da3c:	bl	143b4 <_start@@Base+0x1cfc>
   1da40:	cmp	r0, r9
   1da44:	bne	1d9e0 <_start@@Base+0xb328>
   1da48:	str	r7, [sp]
   1da4c:	ldr	r3, [sp, #20]
   1da50:	mov	r2, sl
   1da54:	mov	r1, r9
   1da58:	mov	r0, r8
   1da5c:	bl	15a24 <_start@@Base+0x336c>
   1da60:	cmp	sl, r0
   1da64:	cmpne	r0, r9
   1da68:	bne	1d9e0 <_start@@Base+0xb328>
   1da6c:	mov	fp, r8
   1da70:	mov	r9, r0
   1da74:	b	1dad4 <_start@@Base+0xb41c>
   1da78:	ldr	r0, [r8]
   1da7c:	bl	24ea4 <flatcc_builder_end_vector@@Base>
   1da80:	str	r0, [sp, #296]	; 0x128
   1da84:	cmp	r0, #0
   1da88:	beq	1dd78 <_start@@Base+0xb6c0>
   1da8c:	mov	r1, #32
   1da90:	ldr	r0, [r8]
   1da94:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1da98:	cmp	r0, #0
   1da9c:	beq	1dd80 <_start@@Base+0xb6c8>
   1daa0:	ldr	r3, [sp, #296]	; 0x128
   1daa4:	str	r3, [r0]
   1daa8:	b	1c92c <_start@@Base+0xa274>
   1daac:	mov	r2, sl
   1dab0:	mov	r1, r0
   1dab4:	mov	r0, r8
   1dab8:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1dabc:	mov	r9, r0
   1dac0:	b	1c92c <_start@@Base+0xa274>
   1dac4:	mov	fp, r8
   1dac8:	ldr	r3, [fp, #24]
   1dacc:	cmp	r3, #0
   1dad0:	beq	1daf4 <_start@@Base+0xb43c>
   1dad4:	mov	r3, #33	; 0x21
   1dad8:	mov	r2, sl
   1dadc:	mov	r1, r9
   1dae0:	mov	r0, fp
   1dae4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1dae8:	add	sp, sp, #308	; 0x134
   1daec:	vpop	{d8-d9}
   1daf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daf4:	mov	r1, #3
   1daf8:	ldr	r0, [fp]
   1dafc:	bl	249d0 <flatcc_builder_check_required_field@@Base>
   1db00:	cmp	r0, #0
   1db04:	bne	1db24 <_start@@Base+0xb46c>
   1db08:	mov	r3, #29
   1db0c:	mov	r2, sl
   1db10:	mov	r1, r9
   1db14:	mov	r0, fp
   1db18:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1db1c:	mov	r9, r0
   1db20:	b	1dad4 <_start@@Base+0xb41c>
   1db24:	ldr	r3, [sp, #292]	; 0x124
   1db28:	mov	r2, sl
   1db2c:	mov	r1, r9
   1db30:	mov	r0, fp
   1db34:	bl	2a414 <flatcc_json_parser_finalize_unions@@Base>
   1db38:	mov	r9, r0
   1db3c:	ldr	r0, [fp]
   1db40:	bl	24b94 <flatcc_builder_end_table@@Base>
   1db44:	ldr	r3, [sp, #188]	; 0xbc
   1db48:	str	r0, [r3]
   1db4c:	cmp	r0, #0
   1db50:	beq	1dad4 <_start@@Base+0xb41c>
   1db54:	mov	r0, r9
   1db58:	b	1dae8 <_start@@Base+0xb430>
   1db5c:	mov	fp, r8
   1db60:	mov	r9, r4
   1db64:	b	1dad4 <_start@@Base+0xb41c>
   1db68:	mov	fp, r8
   1db6c:	mov	r9, r4
   1db70:	b	1dad4 <_start@@Base+0xb41c>
   1db74:	mov	fp, r8
   1db78:	mov	r9, r6
   1db7c:	b	1dad4 <_start@@Base+0xb41c>
   1db80:	mov	fp, r8
   1db84:	mov	r9, r6
   1db88:	b	1dad4 <_start@@Base+0xb41c>
   1db8c:	mov	fp, r8
   1db90:	b	1dad4 <_start@@Base+0xb41c>
   1db94:	mov	fp, r8
   1db98:	b	1dad4 <_start@@Base+0xb41c>
   1db9c:	mov	fp, r8
   1dba0:	b	1dad4 <_start@@Base+0xb41c>
   1dba4:	mov	fp, r8
   1dba8:	b	1dad4 <_start@@Base+0xb41c>
   1dbac:	mov	fp, r8
   1dbb0:	b	1dad4 <_start@@Base+0xb41c>
   1dbb4:	mov	fp, r8
   1dbb8:	b	1dad4 <_start@@Base+0xb41c>
   1dbbc:	mov	fp, r8
   1dbc0:	b	1dad4 <_start@@Base+0xb41c>
   1dbc4:	mov	fp, r8
   1dbc8:	b	1dad4 <_start@@Base+0xb41c>
   1dbcc:	mov	fp, r8
   1dbd0:	b	1dad4 <_start@@Base+0xb41c>
   1dbd4:	mov	fp, r8
   1dbd8:	b	1dad4 <_start@@Base+0xb41c>
   1dbdc:	mov	fp, r8
   1dbe0:	b	1dad4 <_start@@Base+0xb41c>
   1dbe4:	mov	fp, r8
   1dbe8:	b	1dad4 <_start@@Base+0xb41c>
   1dbec:	mov	fp, r8
   1dbf0:	b	1dad4 <_start@@Base+0xb41c>
   1dbf4:	mov	fp, r8
   1dbf8:	b	1dad4 <_start@@Base+0xb41c>
   1dbfc:	mov	fp, r8
   1dc00:	b	1dad4 <_start@@Base+0xb41c>
   1dc04:	mov	fp, r8
   1dc08:	b	1dad4 <_start@@Base+0xb41c>
   1dc0c:	mov	fp, r8
   1dc10:	b	1dad4 <_start@@Base+0xb41c>
   1dc14:	mov	fp, r8
   1dc18:	b	1dad4 <_start@@Base+0xb41c>
   1dc1c:	mov	fp, r8
   1dc20:	b	1dad4 <_start@@Base+0xb41c>
   1dc24:	mov	fp, r8
   1dc28:	b	1dad4 <_start@@Base+0xb41c>
   1dc2c:	mov	fp, r8
   1dc30:	b	1dad4 <_start@@Base+0xb41c>
   1dc34:	mov	fp, r8
   1dc38:	b	1dad4 <_start@@Base+0xb41c>
   1dc3c:	mov	fp, r8
   1dc40:	b	1dad4 <_start@@Base+0xb41c>
   1dc44:	mov	fp, r8
   1dc48:	b	1dad4 <_start@@Base+0xb41c>
   1dc4c:	mov	fp, r8
   1dc50:	b	1dad4 <_start@@Base+0xb41c>
   1dc54:	ldr	fp, [sp, #20]
   1dc58:	mov	r9, r4
   1dc5c:	b	1dad4 <_start@@Base+0xb41c>
   1dc60:	mov	fp, r8
   1dc64:	b	1dad4 <_start@@Base+0xb41c>
   1dc68:	mov	fp, r8
   1dc6c:	b	1dad4 <_start@@Base+0xb41c>
   1dc70:	mov	fp, r8
   1dc74:	b	1dad4 <_start@@Base+0xb41c>
   1dc78:	mov	fp, r8
   1dc7c:	b	1dad4 <_start@@Base+0xb41c>
   1dc80:	mov	fp, r8
   1dc84:	b	1dad4 <_start@@Base+0xb41c>
   1dc88:	mov	fp, r8
   1dc8c:	b	1dad4 <_start@@Base+0xb41c>
   1dc90:	mov	fp, r8
   1dc94:	b	1dad4 <_start@@Base+0xb41c>
   1dc98:	mov	fp, r8
   1dc9c:	b	1dad4 <_start@@Base+0xb41c>
   1dca0:	mov	fp, r8
   1dca4:	b	1dad4 <_start@@Base+0xb41c>
   1dca8:	mov	fp, r8
   1dcac:	b	1dad4 <_start@@Base+0xb41c>
   1dcb0:	mov	fp, r8
   1dcb4:	b	1dad4 <_start@@Base+0xb41c>
   1dcb8:	mov	fp, r8
   1dcbc:	b	1dad4 <_start@@Base+0xb41c>
   1dcc0:	mov	fp, r8
   1dcc4:	b	1dad4 <_start@@Base+0xb41c>
   1dcc8:	mov	fp, r8
   1dccc:	b	1dad4 <_start@@Base+0xb41c>
   1dcd0:	mov	fp, r8
   1dcd4:	b	1dad4 <_start@@Base+0xb41c>
   1dcd8:	mov	fp, r8
   1dcdc:	b	1dad4 <_start@@Base+0xb41c>
   1dce0:	mov	fp, r8
   1dce4:	b	1dad4 <_start@@Base+0xb41c>
   1dce8:	mov	fp, r8
   1dcec:	b	1dad4 <_start@@Base+0xb41c>
   1dcf0:	mov	fp, r8
   1dcf4:	b	1dad4 <_start@@Base+0xb41c>
   1dcf8:	mov	fp, r8
   1dcfc:	b	1dad4 <_start@@Base+0xb41c>
   1dd00:	mov	fp, r8
   1dd04:	b	1dad4 <_start@@Base+0xb41c>
   1dd08:	mov	fp, r8
   1dd0c:	b	1dad4 <_start@@Base+0xb41c>
   1dd10:	mov	fp, r8
   1dd14:	b	1dad4 <_start@@Base+0xb41c>
   1dd18:	mov	fp, r8
   1dd1c:	b	1dad4 <_start@@Base+0xb41c>
   1dd20:	mov	fp, r8
   1dd24:	b	1dad4 <_start@@Base+0xb41c>
   1dd28:	mov	fp, r8
   1dd2c:	b	1dad4 <_start@@Base+0xb41c>
   1dd30:	mov	fp, r8
   1dd34:	b	1dad4 <_start@@Base+0xb41c>
   1dd38:	mov	fp, r8
   1dd3c:	b	1dad4 <_start@@Base+0xb41c>
   1dd40:	mov	fp, r8
   1dd44:	b	1dad4 <_start@@Base+0xb41c>
   1dd48:	mov	fp, r8
   1dd4c:	b	1dad4 <_start@@Base+0xb41c>
   1dd50:	mov	fp, r8
   1dd54:	b	1dad4 <_start@@Base+0xb41c>
   1dd58:	mov	fp, r8
   1dd5c:	b	1dad4 <_start@@Base+0xb41c>
   1dd60:	mov	fp, r8
   1dd64:	b	1dad4 <_start@@Base+0xb41c>
   1dd68:	mov	fp, r8
   1dd6c:	b	1dad4 <_start@@Base+0xb41c>
   1dd70:	mov	fp, r8
   1dd74:	b	1dad4 <_start@@Base+0xb41c>
   1dd78:	mov	fp, r8
   1dd7c:	b	1dad4 <_start@@Base+0xb41c>
   1dd80:	mov	fp, r8
   1dd84:	b	1dad4 <_start@@Base+0xb41c>
   1dd88:	mov	r4, r0
   1dd8c:	mov	r3, #0
   1dd90:	strb	r3, [sp, #272]	; 0x110
   1dd94:	add	r3, sp, #272	; 0x110
   1dd98:	str	r3, [sp]
   1dd9c:	ldr	r3, [pc, #-1172]	; 1d910 <_start@@Base+0xb258>
   1dda0:	add	r3, r3, #296	; 0x128
   1dda4:	mov	r2, sl
   1dda8:	mov	r1, r4
   1ddac:	mov	r0, r8
   1ddb0:	bl	14b14 <_start@@Base+0x245c>
   1ddb4:	mov	r9, r0
   1ddb8:	cmp	sl, r0
   1ddbc:	cmpne	r0, r4
   1ddc0:	bne	1bd54 <_start@@Base+0x969c>
   1ddc4:	mov	fp, r8
   1ddc8:	b	1dad4 <_start@@Base+0xb41c>
   1ddcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ddd0:	sub	sp, sp, #596	; 0x254
   1ddd4:	mov	r7, r0
   1ddd8:	mov	r6, r1
   1dddc:	mov	r9, r2
   1dde0:	mov	r2, #0
   1dde4:	ldr	r1, [sp, #632]	; 0x278
   1dde8:	str	r2, [r1]
   1ddec:	cmp	r3, #4
   1ddf0:	ldrls	pc, [pc, r3, lsl #2]
   1ddf4:	b	21750 <_start@@Base+0xf098>
   1ddf8:	andeq	sp, r1, ip, lsl #28
   1ddfc:	andeq	sp, r1, ip, asr #28
   1de00:	andeq	sp, r1, r0, lsl #29
   1de04:	muleq	r1, r4, lr
   1de08:	ldrdeq	lr, [r1], -r4
   1de0c:	sub	r3, r9, r6
   1de10:	cmp	r3, #3
   1de14:	ble	1de34 <_start@@Base+0xb77c>
   1de18:	mov	r2, #4
   1de1c:	ldr	r1, [pc, #1996]	; 1e5f0 <_start@@Base+0xbf38>
   1de20:	mov	r0, r6
   1de24:	bl	125c4 <memcmp@plt>
   1de28:	cmp	r0, #0
   1de2c:	addeq	r0, r6, #4
   1de30:	beq	1de78 <_start@@Base+0xb7c0>
   1de34:	mov	r3, #26
   1de38:	mov	r2, r9
   1de3c:	mov	r1, r6
   1de40:	mov	r0, r7
   1de44:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1de48:	b	1de78 <_start@@Base+0xb7c0>
   1de4c:	ldr	r3, [sp, #632]	; 0x278
   1de50:	mov	r2, r9
   1de54:	mov	r1, r6
   1de58:	bl	18b8c <_start@@Base+0x64d4>
   1de5c:	ldr	r3, [r7, #24]
   1de60:	cmp	r3, #0
   1de64:	bne	1de78 <_start@@Base+0xb7c0>
   1de68:	ldr	r3, [sp, #632]	; 0x278
   1de6c:	ldr	r3, [r3]
   1de70:	cmp	r3, #0
   1de74:	beq	21780 <_start@@Base+0xf0c8>
   1de78:	add	sp, sp, #596	; 0x254
   1de7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de80:	ldr	r3, [sp, #632]	; 0x278
   1de84:	mov	r2, r9
   1de88:	mov	r1, r6
   1de8c:	bl	15dec <_start@@Base+0x3734>
   1de90:	b	1de5c <_start@@Base+0xb7a4>
   1de94:	mov	r1, #0
   1de98:	ldr	r0, [r0]
   1de9c:	bl	24144 <flatcc_builder_start_table@@Base>
   1dea0:	cmp	r0, #0
   1dea4:	bne	1e09c <_start@@Base+0xb9e4>
   1dea8:	add	r3, sp, #584	; 0x248
   1deac:	mov	r2, r9
   1deb0:	mov	r1, r6
   1deb4:	mov	r0, r7
   1deb8:	bl	15d2c <_start@@Base+0x3674>
   1debc:	mov	r5, #1
   1dec0:	mov	r8, #5
   1dec4:	mov	r4, #0
   1dec8:	mov	sl, #10
   1decc:	mov	r1, r0
   1ded0:	b	1df40 <_start@@Base+0xb888>
   1ded4:	mov	r3, r8
   1ded8:	mov	r2, r9
   1dedc:	mov	r0, r7
   1dee0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1dee4:	mov	r1, r0
   1dee8:	b	1df74 <_start@@Base+0xb8bc>
   1deec:	mov	r2, r9
   1def0:	mov	r1, r0
   1def4:	mov	r0, r7
   1def8:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1defc:	cmp	r9, r0
   1df00:	streq	r4, [sp, #584]	; 0x248
   1df04:	moveq	r1, r0
   1df08:	beq	1df40 <_start@@Base+0xb888>
   1df0c:	ldrb	r3, [r0]
   1df10:	cmp	r3, #44	; 0x2c
   1df14:	beq	1dff8 <_start@@Base+0xb940>
   1df18:	str	r4, [sp, #584]	; 0x248
   1df1c:	ldrb	r3, [r0]
   1df20:	cmp	r3, #125	; 0x7d
   1df24:	beq	1dfb0 <_start@@Base+0xb8f8>
   1df28:	mov	r3, sl
   1df2c:	mov	r2, r9
   1df30:	mov	r1, r0
   1df34:	mov	r0, r7
   1df38:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1df3c:	mov	r1, r0
   1df40:	ldr	r3, [sp, #584]	; 0x248
   1df44:	cmp	r3, #0
   1df48:	beq	1e08c <_start@@Base+0xb9d4>
   1df4c:	cmp	r9, r1
   1df50:	beq	1df74 <_start@@Base+0xb8bc>
   1df54:	ldrb	r3, [r1]
   1df58:	cmp	r3, #34	; 0x22
   1df5c:	addeq	r1, r1, #1
   1df60:	streq	r4, [r7, #12]
   1df64:	beq	1df74 <_start@@Base+0xb8bc>
   1df68:	cmp	r3, #46	; 0x2e
   1df6c:	strne	r5, [r7, #12]
   1df70:	beq	1ded4 <_start@@Base+0xb81c>
   1df74:	mov	r2, r9
   1df78:	mov	r0, r7
   1df7c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1df80:	sub	r3, r9, r0
   1df84:	cmp	r3, #1
   1df88:	ble	1deec <_start@@Base+0xb834>
   1df8c:	ldrb	r3, [r0]
   1df90:	cmp	r3, #32
   1df94:	bhi	1defc <_start@@Base+0xb844>
   1df98:	bne	1deec <_start@@Base+0xb834>
   1df9c:	ldrb	r3, [r0, #1]
   1dfa0:	cmp	r3, #32
   1dfa4:	addhi	r0, r0, #1
   1dfa8:	bls	1deec <_start@@Base+0xb834>
   1dfac:	b	1defc <_start@@Base+0xb844>
   1dfb0:	add	r1, r0, #1
   1dfb4:	sub	r3, r9, r1
   1dfb8:	cmp	r3, #1
   1dfbc:	ble	1dfd0 <_start@@Base+0xb918>
   1dfc0:	ldrb	r3, [r0, #1]
   1dfc4:	cmp	r3, #32
   1dfc8:	bhi	1df40 <_start@@Base+0xb888>
   1dfcc:	beq	1dfe4 <_start@@Base+0xb92c>
   1dfd0:	mov	r2, r9
   1dfd4:	mov	r0, r7
   1dfd8:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1dfdc:	mov	r1, r0
   1dfe0:	b	1df40 <_start@@Base+0xb888>
   1dfe4:	ldrb	r3, [r0, #2]
   1dfe8:	cmp	r3, #32
   1dfec:	addhi	r1, r0, #2
   1dff0:	bls	1dfd0 <_start@@Base+0xb918>
   1dff4:	b	1df40 <_start@@Base+0xb888>
   1dff8:	add	r1, r0, #1
   1dffc:	sub	r3, r9, r1
   1e000:	cmp	r3, #1
   1e004:	ble	1e018 <_start@@Base+0xb960>
   1e008:	ldrb	r3, [r0, #1]
   1e00c:	cmp	r3, #32
   1e010:	bhi	1e028 <_start@@Base+0xb970>
   1e014:	beq	1e05c <_start@@Base+0xb9a4>
   1e018:	mov	r2, r9
   1e01c:	mov	r0, r7
   1e020:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1e024:	mov	r1, r0
   1e028:	cmp	r9, r1
   1e02c:	beq	1e070 <_start@@Base+0xb9b8>
   1e030:	ldrb	r3, [r1]
   1e034:	cmp	r3, #125	; 0x7d
   1e038:	strne	r5, [sp, #584]	; 0x248
   1e03c:	bne	1df40 <_start@@Base+0xb888>
   1e040:	str	r4, [sp, #584]	; 0x248
   1e044:	mov	r2, r9
   1e048:	add	r1, r1, #1
   1e04c:	mov	r0, r7
   1e050:	bl	1447c <_start@@Base+0x1dc4>
   1e054:	mov	r1, r0
   1e058:	b	1df40 <_start@@Base+0xb888>
   1e05c:	ldrb	r3, [r0, #2]
   1e060:	cmp	r3, #32
   1e064:	addhi	r1, r0, #2
   1e068:	bls	1e018 <_start@@Base+0xb960>
   1e06c:	b	1e028 <_start@@Base+0xb970>
   1e070:	str	r4, [sp, #584]	; 0x248
   1e074:	mov	r3, sl
   1e078:	mov	r2, r9
   1e07c:	mov	r0, r7
   1e080:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1e084:	mov	r1, r0
   1e088:	b	1df40 <_start@@Base+0xb888>
   1e08c:	mov	r6, r1
   1e090:	ldr	r3, [r7, #24]
   1e094:	cmp	r3, #0
   1e098:	beq	1e0b4 <_start@@Base+0xb9fc>
   1e09c:	mov	r3, #33	; 0x21
   1e0a0:	mov	r2, r9
   1e0a4:	mov	r1, r6
   1e0a8:	mov	r0, r7
   1e0ac:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1e0b0:	b	1de5c <_start@@Base+0xb7a4>
   1e0b4:	ldr	r0, [r7]
   1e0b8:	bl	24b94 <flatcc_builder_end_table@@Base>
   1e0bc:	ldr	r3, [sp, #632]	; 0x278
   1e0c0:	str	r0, [r3]
   1e0c4:	cmp	r0, #0
   1e0c8:	movne	r0, r6
   1e0cc:	beq	1e09c <_start@@Base+0xb9e4>
   1e0d0:	b	1de5c <_start@@Base+0xb7a4>
   1e0d4:	mov	r1, #4
   1e0d8:	ldr	r0, [r0]
   1e0dc:	bl	24144 <flatcc_builder_start_table@@Base>
   1e0e0:	cmp	r0, #0
   1e0e4:	bne	2153c <_start@@Base+0xee84>
   1e0e8:	add	r3, sp, #560	; 0x230
   1e0ec:	str	r3, [sp]
   1e0f0:	mov	r3, #1
   1e0f4:	mov	r2, r9
   1e0f8:	mov	r1, r6
   1e0fc:	mov	r0, r7
   1e100:	bl	2a3ac <flatcc_json_parser_prepare_unions@@Base>
   1e104:	cmp	r9, r0
   1e108:	beq	2153c <_start@@Base+0xee84>
   1e10c:	add	r3, sp, #556	; 0x22c
   1e110:	mov	r2, r9
   1e114:	mov	r1, r6
   1e118:	mov	r0, r7
   1e11c:	bl	15d2c <_start@@Base+0x3674>
   1e120:	mov	r6, r0
   1e124:	ldr	r3, [pc, #1224]	; 1e5f4 <_start@@Base+0xbf3c>
   1e128:	add	r3, r3, #600	; 0x258
   1e12c:	str	r3, [sp, #540]	; 0x21c
   1e130:	mov	sl, r7
   1e134:	mov	r7, r9
   1e138:	b	1e380 <_start@@Base+0xbcc8>
   1e13c:	mov	r3, #5
   1e140:	mov	r2, r7
   1e144:	mov	r1, r6
   1e148:	mov	r0, sl
   1e14c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1e150:	mov	r6, r0
   1e154:	b	1e3bc <_start@@Base+0xbd04>
   1e158:	ldrb	r4, [r6, #7]
   1e15c:	mov	r5, #0
   1e160:	b	1e16c <_start@@Base+0xbab4>
   1e164:	mov	r4, #0
   1e168:	mov	r5, #0
   1e16c:	ldrb	r2, [r6, #6]
   1e170:	mov	r1, #0
   1e174:	str	r1, [sp, #420]	; 0x1a4
   1e178:	lsl	r3, r2, #8
   1e17c:	str	r3, [sp, #416]	; 0x1a0
   1e180:	add	r3, sp, #416	; 0x1a0
   1e184:	ldrd	r2, [r3]
   1e188:	orr	r2, r2, r4
   1e18c:	orr	r3, r3, r5
   1e190:	mov	r4, r2
   1e194:	mov	r5, r3
   1e198:	ldrb	r2, [r6, #5]
   1e19c:	mov	r1, #0
   1e1a0:	str	r1, [sp, #332]	; 0x14c
   1e1a4:	lsl	r3, r2, #16
   1e1a8:	str	r3, [sp, #328]	; 0x148
   1e1ac:	add	r3, sp, #328	; 0x148
   1e1b0:	ldrd	r2, [r3]
   1e1b4:	orr	r2, r2, r4
   1e1b8:	orr	r3, r3, r5
   1e1bc:	mov	r4, r2
   1e1c0:	mov	r5, r3
   1e1c4:	ldrb	r2, [r6, #4]
   1e1c8:	mov	r1, #0
   1e1cc:	str	r1, [sp, #236]	; 0xec
   1e1d0:	lsl	r3, r2, #24
   1e1d4:	str	r3, [sp, #232]	; 0xe8
   1e1d8:	ldrd	r2, [sp, #232]	; 0xe8
   1e1dc:	orr	r2, r2, r4
   1e1e0:	orr	r3, r3, r5
   1e1e4:	mov	r4, r2
   1e1e8:	mov	r5, r3
   1e1ec:	ldrb	r3, [r6, #3]
   1e1f0:	str	r3, [sp, #188]	; 0xbc
   1e1f4:	mov	r3, #0
   1e1f8:	str	r3, [sp, #184]	; 0xb8
   1e1fc:	ldrd	r2, [sp, #184]	; 0xb8
   1e200:	orr	r2, r2, r4
   1e204:	orr	r3, r3, r5
   1e208:	mov	r4, r2
   1e20c:	mov	r5, r3
   1e210:	ldrb	r2, [r6, #2]
   1e214:	lsl	r3, r2, #8
   1e218:	str	r3, [sp, #148]	; 0x94
   1e21c:	mov	r3, #0
   1e220:	str	r3, [sp, #144]	; 0x90
   1e224:	ldrd	r2, [sp, #144]	; 0x90
   1e228:	orr	r2, r2, r4
   1e22c:	orr	r3, r3, r5
   1e230:	mov	r4, r2
   1e234:	mov	r5, r3
   1e238:	ldrb	r2, [r6, #1]
   1e23c:	lsl	r3, r2, #16
   1e240:	str	r3, [sp, #100]	; 0x64
   1e244:	mov	r3, #0
   1e248:	str	r3, [sp, #96]	; 0x60
   1e24c:	ldrd	r2, [sp, #96]	; 0x60
   1e250:	orr	r2, r2, r4
   1e254:	orr	r3, r3, r5
   1e258:	mov	r4, r2
   1e25c:	mov	r5, r3
   1e260:	ldrb	r2, [r6]
   1e264:	lsl	r3, r2, #24
   1e268:	str	r3, [sp, #84]	; 0x54
   1e26c:	mov	r3, #0
   1e270:	str	r3, [sp, #80]	; 0x50
   1e274:	ldrd	r2, [sp, #80]	; 0x50
   1e278:	orr	r2, r2, r4
   1e27c:	orr	r3, r3, r5
   1e280:	mov	r4, r2
   1e284:	mov	r5, r3
   1e288:	add	r3, pc, #824	; 0x338
   1e28c:	ldrd	r2, [r3]
   1e290:	cmp	r5, r3
   1e294:	cmpeq	r4, r2
   1e298:	beq	1e444 <_start@@Base+0xbd8c>
   1e29c:	bic	r0, r4, #255	; 0xff
   1e2a0:	add	r3, pc, #808	; 0x328
   1e2a4:	ldrd	r2, [r3]
   1e2a8:	cmp	r5, r3
   1e2ac:	cmpeq	r0, r2
   1e2b0:	beq	1e4fc <_start@@Base+0xbe44>
   1e2b4:	ldr	r2, [pc, #828]	; 1e5f8 <_start@@Base+0xbf40>
   1e2b8:	mvn	r3, #0
   1e2bc:	and	r2, r2, r4
   1e2c0:	and	r3, r3, r5
   1e2c4:	add	r1, pc, #780	; 0x30c
   1e2c8:	ldrd	r0, [r1]
   1e2cc:	cmp	r3, r1
   1e2d0:	cmpeq	r2, r0
   1e2d4:	beq	1e558 <_start@@Base+0xbea0>
   1e2d8:	and	r4, r4, #-16777216	; 0xff000000
   1e2dc:	add	r3, pc, #764	; 0x2fc
   1e2e0:	ldrd	r2, [r3]
   1e2e4:	cmp	r5, r3
   1e2e8:	cmpeq	r4, r2
   1e2ec:	beq	20c88 <_start@@Base+0xe5d0>
   1e2f0:	mov	r2, r7
   1e2f4:	mov	r1, r6
   1e2f8:	mov	r0, sl
   1e2fc:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1e300:	mov	r8, r0
   1e304:	sub	r3, r7, r8
   1e308:	cmp	r3, #1
   1e30c:	ble	1e320 <_start@@Base+0xbc68>
   1e310:	ldrb	r3, [r8]
   1e314:	cmp	r3, #32
   1e318:	bhi	1e334 <_start@@Base+0xbc7c>
   1e31c:	beq	215b0 <_start@@Base+0xeef8>
   1e320:	mov	r2, r7
   1e324:	mov	r1, r8
   1e328:	mov	r0, sl
   1e32c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1e330:	mov	r8, r0
   1e334:	cmp	r7, r8
   1e338:	moveq	r3, #0
   1e33c:	streq	r3, [sp, #556]	; 0x22c
   1e340:	moveq	r6, r8
   1e344:	beq	1e380 <_start@@Base+0xbcc8>
   1e348:	ldrb	r3, [r8]
   1e34c:	cmp	r3, #44	; 0x2c
   1e350:	beq	2164c <_start@@Base+0xef94>
   1e354:	mov	r3, #0
   1e358:	str	r3, [sp, #556]	; 0x22c
   1e35c:	ldrb	r3, [r8]
   1e360:	cmp	r3, #125	; 0x7d
   1e364:	beq	215c4 <_start@@Base+0xef0c>
   1e368:	mov	r3, #10
   1e36c:	mov	r2, r7
   1e370:	mov	r1, r8
   1e374:	mov	r0, sl
   1e378:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1e37c:	mov	r6, r0
   1e380:	ldr	r3, [sp, #556]	; 0x22c
   1e384:	cmp	r3, #0
   1e388:	beq	216f4 <_start@@Base+0xf03c>
   1e38c:	cmp	r7, r6
   1e390:	beq	1e3bc <_start@@Base+0xbd04>
   1e394:	ldrb	r3, [r6]
   1e398:	cmp	r3, #34	; 0x22
   1e39c:	addeq	r6, r6, #1
   1e3a0:	moveq	r3, #0
   1e3a4:	streq	r3, [sl, #12]
   1e3a8:	beq	1e3bc <_start@@Base+0xbd04>
   1e3ac:	cmp	r3, #46	; 0x2e
   1e3b0:	movne	r3, #1
   1e3b4:	strne	r3, [sl, #12]
   1e3b8:	beq	1e13c <_start@@Base+0xba84>
   1e3bc:	mov	r9, r7
   1e3c0:	sub	r3, r7, r6
   1e3c4:	cmp	r3, #8
   1e3c8:	movcs	r3, #8
   1e3cc:	sub	r3, r3, #1
   1e3d0:	cmp	r3, #7
   1e3d4:	ldrls	pc, [pc, r3, lsl #2]
   1e3d8:	b	1e54c <_start@@Base+0xbe94>
   1e3dc:	andeq	lr, r1, r8, lsr r4
   1e3e0:	andeq	lr, r1, ip, lsr #8
   1e3e4:	andeq	lr, r1, r0, lsr #8
   1e3e8:	andeq	lr, r1, r4, lsl r4
   1e3ec:	andeq	lr, r1, r8, lsl #8
   1e3f0:	strdeq	lr, [r1], -ip
   1e3f4:	andeq	lr, r1, r4, ror #2
   1e3f8:	andeq	lr, r1, r8, asr r1
   1e3fc:	mov	r4, #0
   1e400:	mov	r5, #0
   1e404:	b	1e198 <_start@@Base+0xbae0>
   1e408:	mov	r4, #0
   1e40c:	mov	r5, #0
   1e410:	b	1e1c4 <_start@@Base+0xbb0c>
   1e414:	mov	r4, #0
   1e418:	mov	r5, #0
   1e41c:	b	1e1ec <_start@@Base+0xbb34>
   1e420:	mov	r4, #0
   1e424:	mov	r5, #0
   1e428:	b	1e210 <_start@@Base+0xbb58>
   1e42c:	mov	r4, #0
   1e430:	mov	r5, #0
   1e434:	b	1e238 <_start@@Base+0xbb80>
   1e438:	mov	r4, #0
   1e43c:	mov	r5, #0
   1e440:	b	1e260 <_start@@Base+0xbba8>
   1e444:	add	r6, r6, #8
   1e448:	mov	r1, r7
   1e44c:	mov	r0, r6
   1e450:	bl	127e0 <_start@@Base+0x128>
   1e454:	mov	r0, #0
   1e458:	add	r3, pc, #392	; 0x188
   1e45c:	ldrd	r2, [r3]
   1e460:	cmp	r1, r3
   1e464:	cmpeq	r0, r2
   1e468:	beq	1e484 <_start@@Base+0xbdcc>
   1e46c:	mov	r2, r7
   1e470:	mov	r1, r6
   1e474:	mov	r0, sl
   1e478:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1e47c:	mov	r8, r0
   1e480:	b	1e304 <_start@@Base+0xbc4c>
   1e484:	mov	r3, #4
   1e488:	mov	r2, r7
   1e48c:	mov	r1, r6
   1e490:	mov	r0, sl
   1e494:	bl	1467c <_start@@Base+0x1fc4>
   1e498:	mov	r1, r0
   1e49c:	cmp	r6, r0
   1e4a0:	beq	1e4e8 <_start@@Base+0xbe30>
   1e4a4:	ldr	r3, [pc, #336]	; 1e5fc <_start@@Base+0xbf44>
   1e4a8:	str	r3, [sp, #16]
   1e4ac:	ldr	r3, [pc, #332]	; 1e600 <_start@@Base+0xbf48>
   1e4b0:	str	r3, [sp, #12]
   1e4b4:	ldr	r3, [pc, #312]	; 1e5f4 <_start@@Base+0xbf3c>
   1e4b8:	add	r3, r3, #500	; 0x1f4
   1e4bc:	str	r3, [sp, #8]
   1e4c0:	ldr	r3, [sp, #560]	; 0x230
   1e4c4:	str	r3, [sp, #4]
   1e4c8:	mov	r3, #3
   1e4cc:	str	r3, [sp]
   1e4d0:	mov	r3, #0
   1e4d4:	mov	r2, r7
   1e4d8:	mov	r0, sl
   1e4dc:	bl	2a8b8 <flatcc_json_parser_union_type_vector@@Base>
   1e4e0:	mov	r8, r0
   1e4e4:	b	1e304 <_start@@Base+0xbc4c>
   1e4e8:	mov	r2, r7
   1e4ec:	mov	r0, sl
   1e4f0:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1e4f4:	mov	r8, r0
   1e4f8:	b	1e304 <_start@@Base+0xbc4c>
   1e4fc:	mov	r3, #7
   1e500:	mov	r2, r7
   1e504:	mov	r1, r6
   1e508:	mov	r0, sl
   1e50c:	bl	1467c <_start@@Base+0x1fc4>
   1e510:	cmp	r0, r6
   1e514:	beq	1e2b4 <_start@@Base+0xbbfc>
   1e518:	ldr	r3, [pc, #224]	; 1e600 <_start@@Base+0xbf48>
   1e51c:	str	r3, [sp, #8]
   1e520:	ldr	r3, [sp, #560]	; 0x230
   1e524:	str	r3, [sp, #4]
   1e528:	mov	r3, #3
   1e52c:	str	r3, [sp]
   1e530:	mov	r3, #0
   1e534:	mov	r2, r7
   1e538:	mov	r1, r0
   1e53c:	mov	r0, sl
   1e540:	bl	2a7e0 <flatcc_json_parser_union_vector@@Base>
   1e544:	mov	r8, r0
   1e548:	b	1e304 <_start@@Base+0xbc4c>
   1e54c:	mov	r4, #0
   1e550:	mov	r5, #0
   1e554:	b	1e2b4 <_start@@Base+0xbbfc>
   1e558:	mov	r3, #6
   1e55c:	mov	r2, r7
   1e560:	mov	r1, r6
   1e564:	mov	r0, sl
   1e568:	bl	1467c <_start@@Base+0x1fc4>
   1e56c:	mov	r8, r0
   1e570:	cmp	r0, r6
   1e574:	beq	20c70 <_start@@Base+0xe5b8>
   1e578:	mov	r1, #3
   1e57c:	ldr	r0, [sl]
   1e580:	bl	24144 <flatcc_builder_start_table@@Base>
   1e584:	cmp	r0, #0
   1e588:	bne	20c64 <_start@@Base+0xe5ac>
   1e58c:	add	r3, sp, #564	; 0x234
   1e590:	mov	r2, r7
   1e594:	mov	r1, r8
   1e598:	mov	r0, sl
   1e59c:	bl	15d2c <_start@@Base+0x3674>
   1e5a0:	b	20ac0 <_start@@Base+0xe408>
   1e5a4:	mov	r3, #5
   1e5a8:	mov	r2, r7
   1e5ac:	mov	r1, r0
   1e5b0:	mov	r0, sl
   1e5b4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1e5b8:	b	20afc <_start@@Base+0xe444>
   1e5bc:	ldrb	r2, [r0, #7]
   1e5c0:	mov	r3, #0
   1e5c4:	b	1e60c <_start@@Base+0xbf54>
   1e5c8:	cmnvs	lr, pc, asr r9
   1e5cc:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1e5d0:	cmnvs	lr, r0, lsl #18
   1e5d4:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1e5d8:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1e5dc:	rsbsvc	r6, r2, r6, ror #10
   1e5e0:	strvs	r0, [r0, #-0]
   1e5e4:	stclvs	6, cr7, [pc, #-420]!	; 1e448 <_start@@Base+0xbd90>
   1e5e8:	andeq	r0, r0, r0
   1e5ec:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   1e5f0:	muleq	r2, r0, r6
   1e5f4:	andeq	lr, r3, r8, ror r0
   1e5f8:			; <UNDEFINED> instruction: 0xffff0000
   1e5fc:	andeq	r2, r1, r8, lsl r9
   1e600:	andeq	sp, r1, ip, asr #27
   1e604:	mov	r2, #0
   1e608:	mov	r3, #0
   1e60c:	ldrb	r4, [r0, #6]
   1e610:	mov	r1, #0
   1e614:	str	r1, [sp, #300]	; 0x12c
   1e618:	lsl	r1, r4, #8
   1e61c:	str	r1, [sp, #296]	; 0x128
   1e620:	add	r1, sp, #296	; 0x128
   1e624:	ldrd	r4, [r1]
   1e628:	orr	r4, r4, r2
   1e62c:	orr	r5, r5, r3
   1e630:	mov	r2, r4
   1e634:	mov	r3, r5
   1e638:	ldrb	r4, [r0, #5]
   1e63c:	mov	r1, #0
   1e640:	str	r1, [sp, #212]	; 0xd4
   1e644:	lsl	r1, r4, #16
   1e648:	str	r1, [sp, #208]	; 0xd0
   1e64c:	ldrd	r4, [sp, #208]	; 0xd0
   1e650:	orr	r4, r4, r2
   1e654:	orr	r5, r5, r3
   1e658:	mov	r2, r4
   1e65c:	mov	r3, r5
   1e660:	ldrb	r4, [r0, #4]
   1e664:	mov	r1, #0
   1e668:	str	r1, [sp, #124]	; 0x7c
   1e66c:	lsl	r1, r4, #24
   1e670:	str	r1, [sp, #120]	; 0x78
   1e674:	ldrd	r4, [sp, #120]	; 0x78
   1e678:	orr	r4, r4, r2
   1e67c:	orr	r5, r5, r3
   1e680:	mov	r2, r4
   1e684:	mov	r3, r5
   1e688:	ldrb	r1, [r0, #3]
   1e68c:	str	r1, [sp, #92]	; 0x5c
   1e690:	mov	r1, #0
   1e694:	str	r1, [sp, #88]	; 0x58
   1e698:	ldrd	r4, [sp, #88]	; 0x58
   1e69c:	orr	r4, r4, r2
   1e6a0:	orr	r5, r5, r3
   1e6a4:	mov	r2, r4
   1e6a8:	mov	r3, r5
   1e6ac:	ldrb	r4, [r0, #2]
   1e6b0:	lsl	r1, r4, #8
   1e6b4:	str	r1, [sp, #68]	; 0x44
   1e6b8:	mov	r1, #0
   1e6bc:	str	r1, [sp, #64]	; 0x40
   1e6c0:	ldrd	r4, [sp, #64]	; 0x40
   1e6c4:	orr	r4, r4, r2
   1e6c8:	orr	r5, r5, r3
   1e6cc:	mov	r2, r4
   1e6d0:	mov	r3, r5
   1e6d4:	ldrb	r4, [r0, #1]
   1e6d8:	lsl	r1, r4, #16
   1e6dc:	str	r1, [sp, #52]	; 0x34
   1e6e0:	mov	r1, #0
   1e6e4:	str	r1, [sp, #48]	; 0x30
   1e6e8:	ldrd	r4, [sp, #48]	; 0x30
   1e6ec:	orr	r4, r4, r2
   1e6f0:	orr	r5, r5, r3
   1e6f4:	mov	r2, r4
   1e6f8:	mov	r3, r5
   1e6fc:	ldrb	r4, [r0]
   1e700:	lsl	r1, r4, #24
   1e704:	str	r1, [sp, #36]	; 0x24
   1e708:	mov	r1, #0
   1e70c:	str	r1, [sp, #32]
   1e710:	ldrd	r4, [sp, #32]
   1e714:	orr	r4, r4, r2
   1e718:	orr	r5, r5, r3
   1e71c:	mov	r2, r4
   1e720:	mov	r3, r5
   1e724:	add	r5, pc, #660	; 0x294
   1e728:	ldrd	r4, [r5]
   1e72c:	cmp	r3, r5
   1e730:	cmpeq	r2, r4
   1e734:	bne	20a34 <_start@@Base+0xe37c>
   1e738:	add	r1, r0, #8
   1e73c:	sub	r3, r9, r1
   1e740:	cmp	r3, #8
   1e744:	movcs	r3, #8
   1e748:	sub	r3, r3, #1
   1e74c:	cmp	r3, #7
   1e750:	ldrls	pc, [pc, r3, lsl #2]
   1e754:	b	1e968 <_start@@Base+0xc2b0>
   1e758:	andeq	lr, r1, ip, asr r9
   1e75c:	andeq	lr, r1, r0, asr r9
   1e760:	andeq	lr, r1, r4, asr #18
   1e764:	andeq	lr, r1, r8, lsr r9
   1e768:	andeq	lr, r1, ip, lsr #18
   1e76c:	andeq	lr, r1, r0, lsr #18
   1e770:	andeq	lr, r1, ip, asr #15
   1e774:	andeq	lr, r1, r0, asr #15
   1e778:	mov	r2, #0
   1e77c:	mov	r3, #0
   1e780:	b	1e638 <_start@@Base+0xbf80>
   1e784:	mov	r2, #0
   1e788:	mov	r3, #0
   1e78c:	b	1e660 <_start@@Base+0xbfa8>
   1e790:	mov	r2, #0
   1e794:	mov	r3, #0
   1e798:	b	1e688 <_start@@Base+0xbfd0>
   1e79c:	mov	r2, #0
   1e7a0:	mov	r3, #0
   1e7a4:	b	1e6ac <_start@@Base+0xbff4>
   1e7a8:	mov	r2, #0
   1e7ac:	mov	r3, #0
   1e7b0:	b	1e6d4 <_start@@Base+0xc01c>
   1e7b4:	mov	r2, #0
   1e7b8:	mov	r3, #0
   1e7bc:	b	1e6fc <_start@@Base+0xc044>
   1e7c0:	ldrb	r2, [r0, #15]
   1e7c4:	mov	r3, #0
   1e7c8:	b	1e7d4 <_start@@Base+0xc11c>
   1e7cc:	mov	r2, #0
   1e7d0:	mov	r3, #0
   1e7d4:	ldrb	r4, [r0, #14]
   1e7d8:	mov	ip, #0
   1e7dc:	str	ip, [sp, #468]	; 0x1d4
   1e7e0:	lsl	ip, r4, #8
   1e7e4:	str	ip, [sp, #464]	; 0x1d0
   1e7e8:	add	ip, sp, #464	; 0x1d0
   1e7ec:	ldrd	r4, [ip]
   1e7f0:	orr	r4, r4, r2
   1e7f4:	orr	r5, r5, r3
   1e7f8:	mov	r2, r4
   1e7fc:	mov	r3, r5
   1e800:	ldrb	r4, [r0, #13]
   1e804:	mov	ip, #0
   1e808:	str	ip, [sp, #388]	; 0x184
   1e80c:	lsl	ip, r4, #16
   1e810:	str	ip, [sp, #384]	; 0x180
   1e814:	add	ip, sp, #384	; 0x180
   1e818:	ldrd	r4, [ip]
   1e81c:	orr	r4, r4, r2
   1e820:	orr	r5, r5, r3
   1e824:	mov	r2, r4
   1e828:	mov	r3, r5
   1e82c:	ldrb	r4, [r0, #12]
   1e830:	mov	ip, #0
   1e834:	str	ip, [sp, #316]	; 0x13c
   1e838:	lsl	ip, r4, #24
   1e83c:	str	ip, [sp, #312]	; 0x138
   1e840:	add	ip, sp, #312	; 0x138
   1e844:	ldrd	r4, [ip]
   1e848:	orr	r4, r4, r2
   1e84c:	orr	r5, r5, r3
   1e850:	mov	r2, r4
   1e854:	mov	r3, r5
   1e858:	ldrb	ip, [r0, #11]
   1e85c:	str	ip, [sp, #260]	; 0x104
   1e860:	mov	ip, #0
   1e864:	str	ip, [sp, #256]	; 0x100
   1e868:	add	ip, sp, #256	; 0x100
   1e86c:	ldrd	r4, [ip]
   1e870:	orr	r4, r4, r2
   1e874:	orr	r5, r5, r3
   1e878:	mov	r2, r4
   1e87c:	mov	r3, r5
   1e880:	ldrb	r4, [r0, #10]
   1e884:	lsl	ip, r4, #8
   1e888:	str	ip, [sp, #228]	; 0xe4
   1e88c:	mov	ip, #0
   1e890:	str	ip, [sp, #224]	; 0xe0
   1e894:	ldrd	r4, [sp, #224]	; 0xe0
   1e898:	orr	r4, r4, r2
   1e89c:	orr	r5, r5, r3
   1e8a0:	mov	r2, r4
   1e8a4:	mov	r3, r5
   1e8a8:	ldrb	r4, [r0, #9]
   1e8ac:	lsl	ip, r4, #16
   1e8b0:	str	ip, [sp, #180]	; 0xb4
   1e8b4:	mov	ip, #0
   1e8b8:	str	ip, [sp, #176]	; 0xb0
   1e8bc:	ldrd	r4, [sp, #176]	; 0xb0
   1e8c0:	orr	r4, r4, r2
   1e8c4:	orr	r5, r5, r3
   1e8c8:	mov	r2, r4
   1e8cc:	mov	r3, r5
   1e8d0:	ldrb	r4, [r0, #8]
   1e8d4:	lsl	ip, r4, #24
   1e8d8:	str	ip, [sp, #140]	; 0x8c
   1e8dc:	mov	ip, #0
   1e8e0:	str	ip, [sp, #136]	; 0x88
   1e8e4:	ldrd	r4, [sp, #136]	; 0x88
   1e8e8:	orr	r4, r4, r2
   1e8ec:	orr	r5, r5, r3
   1e8f0:	mov	r2, r4
   1e8f4:	mov	r3, r5
   1e8f8:	add	r5, pc, #200	; 0xc8
   1e8fc:	ldrd	r4, [r5]
   1e900:	cmp	r3, r5
   1e904:	cmpeq	r2, r4
   1e908:	beq	1e974 <_start@@Base+0xc2bc>
   1e90c:	mov	r2, r7
   1e910:	mov	r0, sl
   1e914:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1e918:	mov	r6, r0
   1e91c:	b	20a48 <_start@@Base+0xe390>
   1e920:	mov	r2, #0
   1e924:	mov	r3, #0
   1e928:	b	1e800 <_start@@Base+0xc148>
   1e92c:	mov	r2, #0
   1e930:	mov	r3, #0
   1e934:	b	1e82c <_start@@Base+0xc174>
   1e938:	mov	r2, #0
   1e93c:	mov	r3, #0
   1e940:	b	1e858 <_start@@Base+0xc1a0>
   1e944:	mov	r2, #0
   1e948:	mov	r3, #0
   1e94c:	b	1e880 <_start@@Base+0xc1c8>
   1e950:	mov	r2, #0
   1e954:	mov	r3, #0
   1e958:	b	1e8a8 <_start@@Base+0xc1f0>
   1e95c:	mov	r2, #0
   1e960:	mov	r3, #0
   1e964:	b	1e8d0 <_start@@Base+0xc218>
   1e968:	mov	r2, #0
   1e96c:	mov	r3, #0
   1e970:	b	1e8f8 <_start@@Base+0xc240>
   1e974:	add	r8, r0, #16
   1e978:	sub	r3, r9, r8
   1e97c:	cmp	r3, #8
   1e980:	movcs	r3, #8
   1e984:	sub	r3, r3, #1
   1e988:	cmp	r3, #7
   1e98c:	ldrls	pc, [pc, r3, lsl #2]
   1e990:	b	1ebbc <_start@@Base+0xc504>
   1e994:			; <UNDEFINED> instruction: 0x0001ebb0
   1e998:	andeq	lr, r1, r4, lsr #23
   1e99c:	muleq	r1, r8, fp
   1e9a0:	andeq	lr, r1, ip, lsl #23
   1e9a4:	andeq	lr, r1, r0, lsl #23
   1e9a8:	andeq	lr, r1, r4, ror fp
   1e9ac:	ldrdeq	lr, [r1], -r4
   1e9b0:			; <UNDEFINED> instruction: 0x0001e9b4
   1e9b4:	ldrb	r2, [r0, #23]
   1e9b8:	mov	r3, #0
   1e9bc:	b	1e9dc <_start@@Base+0xc324>
   1e9c0:	bvs	1cfa780 <__bss_end__@@Base+0x1cbc42c>
   1e9c4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e9c8:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1e9cc:	rsbsvc	r6, r2, r6, ror #10
   1e9d0:			; <UNDEFINED> instruction: 0xffff0000
   1e9d4:	mov	r2, #0
   1e9d8:	mov	r3, #0
   1e9dc:	ldrb	r4, [r0, #22]
   1e9e0:	mov	r1, #0
   1e9e4:	str	r1, [sp, #524]	; 0x20c
   1e9e8:	lsl	r1, r4, #8
   1e9ec:	str	r1, [sp, #520]	; 0x208
   1e9f0:	add	r1, sp, #520	; 0x208
   1e9f4:	ldrd	r4, [r1]
   1e9f8:	orr	r4, r4, r2
   1e9fc:	orr	r5, r5, r3
   1ea00:	mov	r2, r4
   1ea04:	mov	r3, r5
   1ea08:	ldrb	r4, [r0, #21]
   1ea0c:	mov	r1, #0
   1ea10:	str	r1, [sp, #500]	; 0x1f4
   1ea14:	lsl	r1, r4, #16
   1ea18:	str	r1, [sp, #496]	; 0x1f0
   1ea1c:	add	r1, sp, #496	; 0x1f0
   1ea20:	ldrd	r4, [r1]
   1ea24:	orr	r4, r4, r2
   1ea28:	orr	r5, r5, r3
   1ea2c:	mov	r2, r4
   1ea30:	mov	r3, r5
   1ea34:	ldrb	r4, [r0, #20]
   1ea38:	mov	r1, #0
   1ea3c:	str	r1, [sp, #484]	; 0x1e4
   1ea40:	lsl	r1, r4, #24
   1ea44:	str	r1, [sp, #480]	; 0x1e0
   1ea48:	add	r1, sp, #480	; 0x1e0
   1ea4c:	ldrd	r4, [r1]
   1ea50:	orr	r4, r4, r2
   1ea54:	orr	r5, r5, r3
   1ea58:	mov	r2, r4
   1ea5c:	mov	r3, r5
   1ea60:	ldrb	r1, [r0, #19]
   1ea64:	str	r1, [sp, #436]	; 0x1b4
   1ea68:	mov	r1, #0
   1ea6c:	str	r1, [sp, #432]	; 0x1b0
   1ea70:	add	r1, sp, #432	; 0x1b0
   1ea74:	ldrd	r4, [r1]
   1ea78:	orr	r4, r4, r2
   1ea7c:	orr	r5, r5, r3
   1ea80:	mov	r2, r4
   1ea84:	mov	r3, r5
   1ea88:	ldrb	r4, [r0, #18]
   1ea8c:	lsl	r1, r4, #8
   1ea90:	str	r1, [sp, #404]	; 0x194
   1ea94:	mov	r1, #0
   1ea98:	str	r1, [sp, #400]	; 0x190
   1ea9c:	add	r1, sp, #400	; 0x190
   1eaa0:	ldrd	r4, [r1]
   1eaa4:	orr	r4, r4, r2
   1eaa8:	orr	r5, r5, r3
   1eaac:	mov	r2, r4
   1eab0:	mov	r3, r5
   1eab4:	ldrb	r4, [r0, #17]
   1eab8:	lsl	r1, r4, #16
   1eabc:	str	r1, [sp, #364]	; 0x16c
   1eac0:	mov	r1, #0
   1eac4:	str	r1, [sp, #360]	; 0x168
   1eac8:	add	r1, sp, #360	; 0x168
   1eacc:	ldrd	r4, [r1]
   1ead0:	orr	r4, r4, r2
   1ead4:	orr	r5, r5, r3
   1ead8:	mov	r2, r4
   1eadc:	mov	r3, r5
   1eae0:	ldrb	r0, [r0, #16]
   1eae4:	lsl	r1, r0, #24
   1eae8:	str	r1, [sp, #340]	; 0x154
   1eaec:	mov	r1, #0
   1eaf0:	str	r1, [sp, #336]	; 0x150
   1eaf4:	add	r1, sp, #336	; 0x150
   1eaf8:	ldrd	r0, [r1]
   1eafc:	orr	r0, r0, r2
   1eb00:	orr	r1, r1, r3
   1eb04:	mov	r2, r0
   1eb08:	mov	r3, r1
   1eb0c:	ldr	r4, [pc, #-324]	; 1e9d0 <_start@@Base+0xc318>
   1eb10:	mvn	r5, #0
   1eb14:	and	r4, r4, r2
   1eb18:	and	r5, r5, r3
   1eb1c:	add	r1, pc, #780	; 0x30c
   1eb20:	ldrd	r0, [r1]
   1eb24:	cmp	r5, r1
   1eb28:	cmpeq	r4, r0
   1eb2c:	beq	1ebc8 <_start@@Base+0xc510>
   1eb30:	and	r2, r2, #-16777216	; 0xff000000
   1eb34:	add	r1, pc, #764	; 0x2fc
   1eb38:	ldrd	r0, [r1]
   1eb3c:	cmp	r3, r1
   1eb40:	cmpeq	r2, r0
   1eb44:	beq	1f4f4 <_start@@Base+0xce3c>
   1eb48:	add	r3, pc, #752	; 0x2f0
   1eb4c:	ldrd	r2, [r3]
   1eb50:	cmp	r5, r3
   1eb54:	cmpeq	r4, r2
   1eb58:	beq	200bc <_start@@Base+0xda04>
   1eb5c:	mov	r2, r7
   1eb60:	mov	r1, r8
   1eb64:	mov	r0, sl
   1eb68:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1eb6c:	mov	r6, r0
   1eb70:	b	20a48 <_start@@Base+0xe390>
   1eb74:	mov	r2, #0
   1eb78:	mov	r3, #0
   1eb7c:	b	1ea08 <_start@@Base+0xc350>
   1eb80:	mov	r2, #0
   1eb84:	mov	r3, #0
   1eb88:	b	1ea34 <_start@@Base+0xc37c>
   1eb8c:	mov	r2, #0
   1eb90:	mov	r3, #0
   1eb94:	b	1ea60 <_start@@Base+0xc3a8>
   1eb98:	mov	r2, #0
   1eb9c:	mov	r3, #0
   1eba0:	b	1ea88 <_start@@Base+0xc3d0>
   1eba4:	mov	r2, #0
   1eba8:	mov	r3, #0
   1ebac:	b	1eab4 <_start@@Base+0xc3fc>
   1ebb0:	mov	r2, #0
   1ebb4:	mov	r3, #0
   1ebb8:	b	1eae0 <_start@@Base+0xc428>
   1ebbc:	mov	r2, #0
   1ebc0:	mov	r3, #0
   1ebc4:	b	1eb0c <_start@@Base+0xc454>
   1ebc8:	mov	r3, #6
   1ebcc:	mov	r2, r7
   1ebd0:	mov	r1, r8
   1ebd4:	mov	r0, sl
   1ebd8:	bl	1467c <_start@@Base+0x1fc4>
   1ebdc:	mov	r6, r0
   1ebe0:	cmp	r8, r0
   1ebe4:	beq	20a2c <_start@@Base+0xe374>
   1ebe8:	mov	r1, #2
   1ebec:	ldr	r0, [sl]
   1ebf0:	bl	24144 <flatcc_builder_start_table@@Base>
   1ebf4:	cmp	r0, #0
   1ebf8:	bne	1f4d0 <_start@@Base+0xce18>
   1ebfc:	add	r3, sp, #568	; 0x238
   1ec00:	mov	r2, r7
   1ec04:	mov	r1, r6
   1ec08:	mov	r0, sl
   1ec0c:	bl	15d2c <_start@@Base+0x3674>
   1ec10:	add	r5, pc, #560	; 0x230
   1ec14:	ldrd	r4, [r5]
   1ec18:	mov	fp, #8
   1ec1c:	ldr	r3, [pc, #564]	; 1ee58 <_start@@Base+0xc7a0>
   1ec20:	add	r3, r3, #528	; 0x210
   1ec24:	str	r3, [sp, #536]	; 0x218
   1ec28:	strd	r4, [sp, #168]	; 0xa8
   1ec2c:	mov	r5, sl
   1ec30:	mov	sl, r7
   1ec34:	mov	r7, r9
   1ec38:	b	1f320 <_start@@Base+0xcc68>
   1ec3c:	mov	r3, #5
   1ec40:	mov	r2, sl
   1ec44:	mov	r1, r0
   1ec48:	mov	r0, r5
   1ec4c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1ec50:	b	1f35c <_start@@Base+0xcca4>
   1ec54:	ldrb	r2, [r0, #7]
   1ec58:	mov	r3, #0
   1ec5c:	b	1ec68 <_start@@Base+0xc5b0>
   1ec60:	mov	r2, #0
   1ec64:	mov	r3, #0
   1ec68:	ldrb	r8, [r0, #6]
   1ec6c:	mov	r1, #0
   1ec70:	str	r1, [sp, #460]	; 0x1cc
   1ec74:	lsl	r1, r8, #8
   1ec78:	str	r1, [sp, #456]	; 0x1c8
   1ec7c:	add	r1, sp, #456	; 0x1c8
   1ec80:	ldrd	r8, [r1]
   1ec84:	orr	r8, r8, r2
   1ec88:	orr	r9, r9, r3
   1ec8c:	mov	r2, r8
   1ec90:	mov	r3, r9
   1ec94:	ldrb	r8, [r0, #5]
   1ec98:	mov	r1, #0
   1ec9c:	str	r1, [sp, #380]	; 0x17c
   1eca0:	lsl	r1, r8, #16
   1eca4:	str	r1, [sp, #376]	; 0x178
   1eca8:	add	r1, sp, #376	; 0x178
   1ecac:	ldrd	r8, [r1]
   1ecb0:	orr	r8, r8, r2
   1ecb4:	orr	r9, r9, r3
   1ecb8:	mov	r2, r8
   1ecbc:	mov	r3, r9
   1ecc0:	ldrb	r8, [r0, #4]
   1ecc4:	mov	r1, #0
   1ecc8:	str	r1, [sp, #308]	; 0x134
   1eccc:	lsl	r1, r8, #24
   1ecd0:	str	r1, [sp, #304]	; 0x130
   1ecd4:	add	r1, sp, #304	; 0x130
   1ecd8:	ldrd	r8, [r1]
   1ecdc:	orr	r8, r8, r2
   1ece0:	orr	r9, r9, r3
   1ece4:	mov	r2, r8
   1ece8:	mov	r3, r9
   1ecec:	ldrb	r1, [r0, #3]
   1ecf0:	str	r1, [sp, #252]	; 0xfc
   1ecf4:	mov	r1, #0
   1ecf8:	str	r1, [sp, #248]	; 0xf8
   1ecfc:	ldrd	r8, [sp, #248]	; 0xf8
   1ed00:	orr	r8, r8, r2
   1ed04:	orr	r9, r9, r3
   1ed08:	mov	r2, r8
   1ed0c:	mov	r3, r9
   1ed10:	ldrb	r8, [r0, #2]
   1ed14:	lsl	r1, r8, #8
   1ed18:	str	r1, [sp, #220]	; 0xdc
   1ed1c:	mov	r1, #0
   1ed20:	str	r1, [sp, #216]	; 0xd8
   1ed24:	ldrd	r8, [sp, #216]	; 0xd8
   1ed28:	orr	r8, r8, r2
   1ed2c:	orr	r9, r9, r3
   1ed30:	mov	r2, r8
   1ed34:	mov	r3, r9
   1ed38:	ldrb	r8, [r0, #1]
   1ed3c:	lsl	r1, r8, #16
   1ed40:	str	r1, [sp, #164]	; 0xa4
   1ed44:	mov	r1, #0
   1ed48:	str	r1, [sp, #160]	; 0xa0
   1ed4c:	ldrd	r8, [sp, #160]	; 0xa0
   1ed50:	orr	r8, r8, r2
   1ed54:	orr	r9, r9, r3
   1ed58:	mov	r2, r8
   1ed5c:	mov	r3, r9
   1ed60:	ldrb	r8, [r0]
   1ed64:	lsl	r1, r8, #24
   1ed68:	str	r1, [sp, #132]	; 0x84
   1ed6c:	mov	r1, #0
   1ed70:	str	r1, [sp, #128]	; 0x80
   1ed74:	ldrd	r8, [sp, #128]	; 0x80
   1ed78:	orr	r8, r8, r2
   1ed7c:	orr	r9, r9, r3
   1ed80:	mov	r2, r8
   1ed84:	mov	r3, r9
   1ed88:	add	r9, pc, #192	; 0xc0
   1ed8c:	ldrd	r8, [r9]
   1ed90:	cmp	r3, r9
   1ed94:	cmpeq	r2, r8
   1ed98:	bne	1f294 <_start@@Base+0xcbdc>
   1ed9c:	add	r6, r0, #8
   1eda0:	sub	r3, r7, r6
   1eda4:	cmp	r3, #8
   1eda8:	movcs	r3, #8
   1edac:	sub	r3, r3, #1
   1edb0:	cmp	r3, #7
   1edb4:	ldrls	pc, [pc, r3, lsl #2]
   1edb8:	b	1f014 <_start@@Base+0xc95c>
   1edbc:	andeq	pc, r1, r8
   1edc0:	strdeq	lr, [r1], -ip
   1edc4:	strdeq	lr, [r1], -r0
   1edc8:	andeq	lr, r1, r4, ror #31
   1edcc:	ldrdeq	lr, [r1], -r8
   1edd0:	andeq	lr, r1, ip, asr #31
   1edd4:	andeq	lr, r1, ip, asr lr
   1edd8:	andeq	lr, r1, r4, lsr #28
   1eddc:	mov	r2, #0
   1ede0:	mov	r3, #0
   1ede4:	b	1ec94 <_start@@Base+0xc5dc>
   1ede8:	mov	r2, #0
   1edec:	mov	r3, #0
   1edf0:	b	1ecc0 <_start@@Base+0xc608>
   1edf4:	mov	r2, #0
   1edf8:	mov	r3, #0
   1edfc:	b	1ecec <_start@@Base+0xc634>
   1ee00:	mov	r2, #0
   1ee04:	mov	r3, #0
   1ee08:	b	1ed10 <_start@@Base+0xc658>
   1ee0c:	mov	r2, #0
   1ee10:	mov	r3, #0
   1ee14:	b	1ed38 <_start@@Base+0xc680>
   1ee18:	mov	r2, #0
   1ee1c:	mov	r3, #0
   1ee20:	b	1ed60 <_start@@Base+0xc6a8>
   1ee24:	ldrb	r8, [r0, #15]
   1ee28:	mov	r9, #0
   1ee2c:	b	1ee64 <_start@@Base+0xc7ac>
   1ee30:	ldrvs	r0, [r2, -r0]!
   1ee34:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1ee38:	strvs	r0, [r0, -r0]
   1ee3c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1ee40:	ldrvs	r0, [r3, -r0]!
   1ee44:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1ee48:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1ee4c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1ee50:	svcpl	0x00626262
   1ee54:	cmnvs	r1, r1, ror #2
   1ee58:	andeq	lr, r3, r8, ror r0
   1ee5c:	mov	r8, #0
   1ee60:	mov	r9, #0
   1ee64:	ldrb	r2, [r0, #14]
   1ee68:	mov	r1, #0
   1ee6c:	str	r1, [sp, #516]	; 0x204
   1ee70:	lsl	r3, r2, #8
   1ee74:	str	r3, [sp, #512]	; 0x200
   1ee78:	add	r3, sp, #512	; 0x200
   1ee7c:	ldrd	r2, [r3]
   1ee80:	orr	r2, r2, r8
   1ee84:	orr	r3, r3, r9
   1ee88:	mov	r8, r2
   1ee8c:	mov	r9, r3
   1ee90:	ldrb	r2, [r0, #13]
   1ee94:	mov	r1, #0
   1ee98:	str	r1, [sp, #492]	; 0x1ec
   1ee9c:	lsl	r3, r2, #16
   1eea0:	str	r3, [sp, #488]	; 0x1e8
   1eea4:	add	r3, sp, #488	; 0x1e8
   1eea8:	ldrd	r2, [r3]
   1eeac:	orr	r2, r2, r8
   1eeb0:	orr	r3, r3, r9
   1eeb4:	ldrb	r8, [r0, #12]
   1eeb8:	mov	r1, #0
   1eebc:	str	r1, [sp, #476]	; 0x1dc
   1eec0:	lsl	r1, r8, #24
   1eec4:	str	r1, [sp, #472]	; 0x1d8
   1eec8:	add	r1, sp, #472	; 0x1d8
   1eecc:	ldrd	r8, [r1]
   1eed0:	orr	r8, r8, r2
   1eed4:	orr	r9, r9, r3
   1eed8:	mov	r2, r8
   1eedc:	mov	r3, r9
   1eee0:	ldrb	r1, [r0, #11]
   1eee4:	str	r1, [sp, #428]	; 0x1ac
   1eee8:	mov	r1, #0
   1eeec:	str	r1, [sp, #424]	; 0x1a8
   1eef0:	add	r1, sp, #424	; 0x1a8
   1eef4:	ldrd	r8, [r1]
   1eef8:	orr	r8, r8, r2
   1eefc:	orr	r9, r9, r3
   1ef00:	mov	r2, r8
   1ef04:	mov	r3, r9
   1ef08:	ldrb	r8, [r0, #10]
   1ef0c:	lsl	r1, r8, #8
   1ef10:	str	r1, [sp, #396]	; 0x18c
   1ef14:	mov	r1, #0
   1ef18:	str	r1, [sp, #392]	; 0x188
   1ef1c:	add	r1, sp, #392	; 0x188
   1ef20:	ldrd	r8, [r1]
   1ef24:	orr	r8, r8, r2
   1ef28:	orr	r9, r9, r3
   1ef2c:	mov	r2, r8
   1ef30:	mov	r3, r9
   1ef34:	ldrb	r8, [r0, #9]
   1ef38:	lsl	r1, r8, #16
   1ef3c:	str	r1, [sp, #348]	; 0x15c
   1ef40:	mov	r1, #0
   1ef44:	str	r1, [sp, #344]	; 0x158
   1ef48:	add	r1, sp, #344	; 0x158
   1ef4c:	ldrd	r8, [r1]
   1ef50:	orr	r8, r8, r2
   1ef54:	orr	r9, r9, r3
   1ef58:	mov	r2, r8
   1ef5c:	mov	r3, r9
   1ef60:	ldrb	r0, [r0, #8]
   1ef64:	lsl	r1, r0, #24
   1ef68:	str	r1, [sp, #324]	; 0x144
   1ef6c:	mov	r1, #0
   1ef70:	str	r1, [sp, #320]	; 0x140
   1ef74:	add	r1, sp, #320	; 0x140
   1ef78:	ldrd	r0, [r1]
   1ef7c:	orr	r0, r0, r2
   1ef80:	orr	r1, r1, r3
   1ef84:	mov	r2, r0
   1ef88:	mov	r3, r1
   1ef8c:	bic	r0, r2, #255	; 0xff
   1ef90:	ldrd	r8, [sp, #168]	; 0xa8
   1ef94:	cmp	r3, r9
   1ef98:	cmpeq	r0, r8
   1ef9c:	beq	1f020 <_start@@Base+0xc968>
   1efa0:	add	r1, pc, #736	; 0x2e0
   1efa4:	ldrd	r0, [r1]
   1efa8:	cmp	r3, r1
   1efac:	cmpeq	r2, r0
   1efb0:	beq	1f120 <_start@@Base+0xca68>
   1efb4:	mov	r2, sl
   1efb8:	mov	r1, r6
   1efbc:	mov	r0, r5
   1efc0:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1efc4:	mov	r8, r0
   1efc8:	b	1f2a8 <_start@@Base+0xcbf0>
   1efcc:	mov	r8, #0
   1efd0:	mov	r9, #0
   1efd4:	b	1ee90 <_start@@Base+0xc7d8>
   1efd8:	mov	r2, #0
   1efdc:	mov	r3, #0
   1efe0:	b	1eeb4 <_start@@Base+0xc7fc>
   1efe4:	mov	r2, #0
   1efe8:	mov	r3, #0
   1efec:	b	1eee0 <_start@@Base+0xc828>
   1eff0:	mov	r2, #0
   1eff4:	mov	r3, #0
   1eff8:	b	1ef08 <_start@@Base+0xc850>
   1effc:	mov	r2, #0
   1f000:	mov	r3, #0
   1f004:	b	1ef34 <_start@@Base+0xc87c>
   1f008:	mov	r2, #0
   1f00c:	mov	r3, #0
   1f010:	b	1ef60 <_start@@Base+0xc8a8>
   1f014:	mov	r2, #0
   1f018:	mov	r3, #0
   1f01c:	b	1ef8c <_start@@Base+0xc8d4>
   1f020:	mov	r3, #7
   1f024:	mov	r2, sl
   1f028:	mov	r1, r6
   1f02c:	mov	r0, r5
   1f030:	bl	1467c <_start@@Base+0x1fc4>
   1f034:	mov	r9, r0
   1f038:	cmp	r6, r0
   1f03c:	beq	1f108 <_start@@Base+0xca50>
   1f040:	add	r1, sp, #592	; 0x250
   1f044:	mov	r2, #0
   1f048:	mov	r3, #0
   1f04c:	strd	r2, [r1, #-8]!
   1f050:	mov	r3, r1
   1f054:	mov	r2, sl
   1f058:	mov	r1, r0
   1f05c:	mov	r0, r5
   1f060:	bl	143b4 <_start@@Base+0x1cfc>
   1f064:	mov	r8, r0
   1f068:	cmp	r9, r0
   1f06c:	beq	1f0b8 <_start@@Base+0xca00>
   1f070:	add	r3, sp, #584	; 0x248
   1f074:	ldrd	r2, [r3]
   1f078:	orrs	r3, r2, r3
   1f07c:	bne	1f08c <_start@@Base+0xc9d4>
   1f080:	ldr	r3, [r5, #8]
   1f084:	tst	r3, #2
   1f088:	beq	1f2a8 <_start@@Base+0xcbf0>
   1f08c:	mov	r3, fp
   1f090:	mov	r2, fp
   1f094:	mov	r1, #0
   1f098:	ldr	r0, [r5]
   1f09c:	bl	25b40 <flatcc_builder_table_add@@Base>
   1f0a0:	cmp	r0, #0
   1f0a4:	beq	1f0f8 <_start@@Base+0xca40>
   1f0a8:	add	r3, sp, #584	; 0x248
   1f0ac:	ldrd	r2, [r3]
   1f0b0:	strd	r2, [r0]
   1f0b4:	b	1f2a8 <_start@@Base+0xcbf0>
   1f0b8:	add	r3, sp, #584	; 0x248
   1f0bc:	str	r3, [sp]
   1f0c0:	ldr	r3, [pc, #456]	; 1f290 <_start@@Base+0xcbd8>
   1f0c4:	add	r3, r3, #516	; 0x204
   1f0c8:	mov	r2, sl
   1f0cc:	mov	r1, r0
   1f0d0:	mov	r0, r5
   1f0d4:	bl	15a24 <_start@@Base+0x336c>
   1f0d8:	cmp	sl, r0
   1f0dc:	cmpne	r8, r0
   1f0e0:	movne	r8, r0
   1f0e4:	bne	1f070 <_start@@Base+0xc9b8>
   1f0e8:	mov	r7, r5
   1f0ec:	mov	r9, sl
   1f0f0:	mov	r8, r0
   1f0f4:	b	1f100 <_start@@Base+0xca48>
   1f0f8:	mov	r7, r5
   1f0fc:	mov	r9, sl
   1f100:	mov	r6, r8
   1f104:	b	1f4d8 <_start@@Base+0xce20>
   1f108:	mov	r2, sl
   1f10c:	mov	r1, r0
   1f110:	mov	r0, r5
   1f114:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1f118:	mov	r8, r0
   1f11c:	b	1f2a8 <_start@@Base+0xcbf0>
   1f120:	mov	r3, fp
   1f124:	mov	r2, sl
   1f128:	mov	r1, r6
   1f12c:	mov	r0, r5
   1f130:	bl	1467c <_start@@Base+0x1fc4>
   1f134:	mov	r9, r0
   1f138:	cmp	r6, r0
   1f13c:	beq	1f26c <_start@@Base+0xcbb4>
   1f140:	mov	r1, #0
   1f144:	str	r1, [sp, #572]	; 0x23c
   1f148:	mov	r2, #0
   1f14c:	mov	r3, #0
   1f150:	add	r0, sp, #584	; 0x248
   1f154:	strd	r2, [r0]
   1f158:	str	r1, [sp, #576]	; 0x240
   1f15c:	cmp	sl, r9
   1f160:	beq	1f214 <_start@@Base+0xcb5c>
   1f164:	str	r0, [sp]
   1f168:	add	r3, sp, #576	; 0x240
   1f16c:	mov	r2, sl
   1f170:	mov	r1, r9
   1f174:	mov	r0, r5
   1f178:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   1f17c:	mov	r8, r0
   1f180:	cmp	r9, r0
   1f184:	beq	1f214 <_start@@Base+0xcb5c>
   1f188:	ldr	r3, [sp, #576]	; 0x240
   1f18c:	cmp	r3, #0
   1f190:	bne	1f1f4 <_start@@Base+0xcb3c>
   1f194:	add	r3, sp, #584	; 0x248
   1f198:	ldrd	r2, [r3]
   1f19c:	mvn	r0, #0
   1f1a0:	mov	r1, #0
   1f1a4:	cmp	r3, r1
   1f1a8:	cmpeq	r2, r0
   1f1ac:	strls	r2, [sp, #572]	; 0x23c
   1f1b0:	bhi	1f250 <_start@@Base+0xcb98>
   1f1b4:	ldr	r3, [sp, #572]	; 0x23c
   1f1b8:	cmp	r3, #0
   1f1bc:	bne	1f1cc <_start@@Base+0xcb14>
   1f1c0:	ldr	r3, [r5, #8]
   1f1c4:	tst	r3, #2
   1f1c8:	beq	1f2a8 <_start@@Base+0xcbf0>
   1f1cc:	mov	r3, #4
   1f1d0:	mov	r2, r3
   1f1d4:	mov	r1, #1
   1f1d8:	ldr	r0, [r5]
   1f1dc:	bl	25b40 <flatcc_builder_table_add@@Base>
   1f1e0:	cmp	r0, #0
   1f1e4:	beq	1f240 <_start@@Base+0xcb88>
   1f1e8:	ldr	r3, [sp, #572]	; 0x23c
   1f1ec:	str	r3, [r0]
   1f1f0:	b	1f2a8 <_start@@Base+0xcbf0>
   1f1f4:	mov	r3, fp
   1f1f8:	mov	r2, sl
   1f1fc:	mov	r1, r0
   1f200:	mov	r0, r5
   1f204:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1f208:	mov	r8, r0
   1f20c:	cmp	r9, r8
   1f210:	bne	1f1b4 <_start@@Base+0xcafc>
   1f214:	add	r3, sp, #572	; 0x23c
   1f218:	str	r3, [sp]
   1f21c:	ldr	r3, [sp, #536]	; 0x218
   1f220:	mov	r2, sl
   1f224:	mov	r1, r9
   1f228:	mov	r0, r5
   1f22c:	bl	15804 <_start@@Base+0x314c>
   1f230:	mov	r8, r0
   1f234:	cmp	sl, r0
   1f238:	cmpne	r9, r0
   1f23c:	bne	1f1b4 <_start@@Base+0xcafc>
   1f240:	mov	r7, r5
   1f244:	mov	r9, sl
   1f248:	mov	r6, r8
   1f24c:	b	1f4d8 <_start@@Base+0xce20>
   1f250:	mov	r3, #7
   1f254:	mov	r2, sl
   1f258:	mov	r1, r8
   1f25c:	mov	r0, r5
   1f260:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1f264:	mov	r8, r0
   1f268:	b	1f20c <_start@@Base+0xcb54>
   1f26c:	mov	r2, sl
   1f270:	mov	r1, r0
   1f274:	mov	r0, r5
   1f278:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1f27c:	mov	r8, r0
   1f280:	b	1f2a8 <_start@@Base+0xcbf0>
   1f284:	nop			; (mov r0, r0)
   1f288:	cmnvs	r2, pc, asr r4
   1f28c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1f290:	andeq	lr, r3, r8, ror r0
   1f294:	mov	r2, sl
   1f298:	mov	r1, r0
   1f29c:	mov	r0, r5
   1f2a0:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1f2a4:	mov	r8, r0
   1f2a8:	sub	r3, r7, r8
   1f2ac:	cmp	r3, #1
   1f2b0:	ble	1f2c4 <_start@@Base+0xcc0c>
   1f2b4:	ldrb	r3, [r8]
   1f2b8:	cmp	r3, #32
   1f2bc:	bhi	1f2d8 <_start@@Base+0xcc20>
   1f2c0:	beq	1f398 <_start@@Base+0xcce0>
   1f2c4:	mov	r2, sl
   1f2c8:	mov	r1, r8
   1f2cc:	mov	r0, r5
   1f2d0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1f2d4:	mov	r8, r0
   1f2d8:	cmp	sl, r8
   1f2dc:	moveq	r3, #0
   1f2e0:	streq	r3, [sp, #568]	; 0x238
   1f2e4:	moveq	r0, r8
   1f2e8:	beq	1f320 <_start@@Base+0xcc68>
   1f2ec:	ldrb	r3, [r8]
   1f2f0:	cmp	r3, #44	; 0x2c
   1f2f4:	beq	1f3f4 <_start@@Base+0xcd3c>
   1f2f8:	mov	r3, #0
   1f2fc:	str	r3, [sp, #568]	; 0x238
   1f300:	ldrb	r3, [r8]
   1f304:	cmp	r3, #125	; 0x7d
   1f308:	beq	1f3ac <_start@@Base+0xccf4>
   1f30c:	mov	r3, #10
   1f310:	mov	r2, sl
   1f314:	mov	r1, r8
   1f318:	mov	r0, r5
   1f31c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1f320:	ldr	r3, [sp, #568]	; 0x238
   1f324:	cmp	r3, #0
   1f328:	beq	1f490 <_start@@Base+0xcdd8>
   1f32c:	cmp	sl, r0
   1f330:	beq	1f294 <_start@@Base+0xcbdc>
   1f334:	ldrb	r3, [r0]
   1f338:	cmp	r3, #34	; 0x22
   1f33c:	addeq	r0, r0, #1
   1f340:	moveq	r3, #0
   1f344:	streq	r3, [r5, #12]
   1f348:	beq	1f35c <_start@@Base+0xcca4>
   1f34c:	cmp	r3, #46	; 0x2e
   1f350:	movne	r3, #1
   1f354:	strne	r3, [r5, #12]
   1f358:	beq	1ec3c <_start@@Base+0xc584>
   1f35c:	sub	r3, r7, r0
   1f360:	cmp	r3, #8
   1f364:	movcs	r3, #8
   1f368:	sub	r3, r3, #1
   1f36c:	cmp	r3, #7
   1f370:	ldrls	pc, [pc, r3, lsl #2]
   1f374:	b	1f294 <_start@@Base+0xcbdc>
   1f378:	andeq	lr, r1, r8, lsl lr
   1f37c:	andeq	lr, r1, ip, lsl #28
   1f380:	andeq	lr, r1, r0, lsl #28
   1f384:	strdeq	lr, [r1], -r4
   1f388:	andeq	lr, r1, r8, ror #27
   1f38c:	ldrdeq	lr, [r1], -ip
   1f390:	andeq	lr, r1, r0, ror #24
   1f394:	andeq	lr, r1, r4, asr ip
   1f398:	ldrb	r3, [r8, #1]
   1f39c:	cmp	r3, #32
   1f3a0:	addhi	r8, r8, #1
   1f3a4:	bls	1f2c4 <_start@@Base+0xcc0c>
   1f3a8:	b	1f2d8 <_start@@Base+0xcc20>
   1f3ac:	add	r0, r8, #1
   1f3b0:	sub	r3, r7, r0
   1f3b4:	cmp	r3, #1
   1f3b8:	ble	1f3cc <_start@@Base+0xcd14>
   1f3bc:	ldrb	r3, [r8, #1]
   1f3c0:	cmp	r3, #32
   1f3c4:	bhi	1f320 <_start@@Base+0xcc68>
   1f3c8:	beq	1f3e0 <_start@@Base+0xcd28>
   1f3cc:	mov	r2, sl
   1f3d0:	mov	r1, r0
   1f3d4:	mov	r0, r5
   1f3d8:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1f3dc:	b	1f320 <_start@@Base+0xcc68>
   1f3e0:	ldrb	r3, [r8, #2]
   1f3e4:	cmp	r3, #32
   1f3e8:	addhi	r0, r8, #2
   1f3ec:	bls	1f3cc <_start@@Base+0xcd14>
   1f3f0:	b	1f320 <_start@@Base+0xcc68>
   1f3f4:	add	r0, r8, #1
   1f3f8:	sub	r3, r7, r0
   1f3fc:	cmp	r3, #1
   1f400:	ble	1f414 <_start@@Base+0xcd5c>
   1f404:	ldrb	r3, [r8, #1]
   1f408:	cmp	r3, #32
   1f40c:	bhi	1f424 <_start@@Base+0xcd6c>
   1f410:	beq	1f45c <_start@@Base+0xcda4>
   1f414:	mov	r2, sl
   1f418:	mov	r1, r0
   1f41c:	mov	r0, r5
   1f420:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   1f424:	cmp	sl, r0
   1f428:	beq	1f470 <_start@@Base+0xcdb8>
   1f42c:	ldrb	r3, [r0]
   1f430:	cmp	r3, #125	; 0x7d
   1f434:	movne	r3, #1
   1f438:	strne	r3, [sp, #568]	; 0x238
   1f43c:	bne	1f320 <_start@@Base+0xcc68>
   1f440:	mov	r3, #0
   1f444:	str	r3, [sp, #568]	; 0x238
   1f448:	mov	r2, sl
   1f44c:	add	r1, r0, #1
   1f450:	mov	r0, r5
   1f454:	bl	1447c <_start@@Base+0x1dc4>
   1f458:	b	1f320 <_start@@Base+0xcc68>
   1f45c:	ldrb	r3, [r8, #2]
   1f460:	cmp	r3, #32
   1f464:	addhi	r0, r8, #2
   1f468:	bls	1f414 <_start@@Base+0xcd5c>
   1f46c:	b	1f424 <_start@@Base+0xcd6c>
   1f470:	mov	r3, #0
   1f474:	str	r3, [sp, #568]	; 0x238
   1f478:	mov	r3, #10
   1f47c:	mov	r2, sl
   1f480:	mov	r1, r0
   1f484:	mov	r0, r5
   1f488:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1f48c:	b	1f320 <_start@@Base+0xcc68>
   1f490:	mov	r6, r0
   1f494:	mov	r9, r7
   1f498:	mov	r7, sl
   1f49c:	mov	sl, r5
   1f4a0:	ldr	r3, [r5, #24]
   1f4a4:	cmp	r3, #0
   1f4a8:	movne	r9, r7
   1f4ac:	movne	r7, r5
   1f4b0:	bne	1f4d8 <_start@@Base+0xce20>
   1f4b4:	ldr	r0, [r5]
   1f4b8:	bl	24b94 <flatcc_builder_end_table@@Base>
   1f4bc:	subs	r4, r0, #0
   1f4c0:	bne	21798 <_start@@Base+0xf0e0>
   1f4c4:	mov	r9, r7
   1f4c8:	mov	r7, r5
   1f4cc:	b	1f4d8 <_start@@Base+0xce20>
   1f4d0:	mov	r9, r7
   1f4d4:	mov	r7, sl
   1f4d8:	mov	r3, #33	; 0x21
   1f4dc:	mov	r2, r9
   1f4e0:	mov	r1, r6
   1f4e4:	mov	r0, r7
   1f4e8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1f4ec:	mov	r8, r0
   1f4f0:	b	209f8 <_start@@Base+0xe340>
   1f4f4:	mov	r3, #5
   1f4f8:	mov	r2, r7
   1f4fc:	mov	r1, r8
   1f500:	mov	r0, sl
   1f504:	bl	1467c <_start@@Base+0x1fc4>
   1f508:	mov	r6, r0
   1f50c:	cmp	r8, r0
   1f510:	beq	200b4 <_start@@Base+0xd9fc>
   1f514:	mov	r1, #9
   1f518:	ldr	r0, [sl]
   1f51c:	bl	24144 <flatcc_builder_start_table@@Base>
   1f520:	cmp	r0, #0
   1f524:	bne	2003c <_start@@Base+0xd984>
   1f528:	add	r3, sp, #572	; 0x23c
   1f52c:	mov	r2, r7
   1f530:	mov	r1, r6
   1f534:	mov	r0, sl
   1f538:	bl	15d2c <_start@@Base+0x3674>
   1f53c:	mov	r6, r0
   1f540:	ldr	r3, [sp, #572]	; 0x23c
   1f544:	cmp	r3, #0
   1f548:	beq	2000c <_start@@Base+0xd954>
   1f54c:	mov	r8, #0
   1f550:	str	r8, [sp, #528]	; 0x210
   1f554:	str	r8, [sp, #532]	; 0x214
   1f558:	str	sl, [sp, #168]	; 0xa8
   1f55c:	str	r8, [sp, #536]	; 0x218
   1f560:	add	r3, sp, #544	; 0x220
   1f564:	ldrd	sl, [r3]
   1f568:	b	1f754 <_start@@Base+0xd09c>
   1f56c:	add	r6, r6, #1
   1f570:	mov	r3, #0
   1f574:	ldr	r2, [sp, #168]	; 0xa8
   1f578:	str	r3, [r2, #12]
   1f57c:	b	1f77c <_start@@Base+0xd0c4>
   1f580:	mov	r3, #5
   1f584:	mov	r2, r7
   1f588:	mov	r1, r6
   1f58c:	ldr	r0, [sp, #168]	; 0xa8
   1f590:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   1f594:	mov	r6, r0
   1f598:	b	1f77c <_start@@Base+0xd0c4>
   1f59c:	ldrb	r4, [r6, #7]
   1f5a0:	mov	r5, #0
   1f5a4:	b	1f5b0 <_start@@Base+0xcef8>
   1f5a8:	mov	r4, r8
   1f5ac:	ldr	r5, [sp, #536]	; 0x218
   1f5b0:	ldrb	r2, [r6, #6]
   1f5b4:	mov	r1, #0
   1f5b8:	str	r1, [sp, #508]	; 0x1fc
   1f5bc:	lsl	r3, r2, #8
   1f5c0:	str	r3, [sp, #504]	; 0x1f8
   1f5c4:	add	r3, sp, #504	; 0x1f8
   1f5c8:	ldrd	r2, [r3]
   1f5cc:	orr	r2, r2, r4
   1f5d0:	orr	r3, r3, r5
   1f5d4:	mov	r4, r2
   1f5d8:	mov	r5, r3
   1f5dc:	ldrb	r2, [r6, #5]
   1f5e0:	mov	r1, #0
   1f5e4:	str	r1, [sp, #452]	; 0x1c4
   1f5e8:	lsl	r3, r2, #16
   1f5ec:	str	r3, [sp, #448]	; 0x1c0
   1f5f0:	add	r3, sp, #448	; 0x1c0
   1f5f4:	ldrd	r2, [r3]
   1f5f8:	orr	r2, r2, r4
   1f5fc:	orr	r3, r3, r5
   1f600:	mov	r4, r2
   1f604:	mov	r5, r3
   1f608:	ldrb	r2, [r6, #4]
   1f60c:	mov	r1, #0
   1f610:	str	r1, [sp, #412]	; 0x19c
   1f614:	lsl	r3, r2, #24
   1f618:	str	r3, [sp, #408]	; 0x198
   1f61c:	add	r3, sp, #408	; 0x198
   1f620:	ldrd	r2, [r3]
   1f624:	orr	r2, r2, r4
   1f628:	orr	r3, r3, r5
   1f62c:	mov	r4, r2
   1f630:	mov	r5, r3
   1f634:	ldrb	r3, [r6, #3]
   1f638:	str	r3, [sp, #356]	; 0x164
   1f63c:	mov	r3, #0
   1f640:	str	r3, [sp, #352]	; 0x160
   1f644:	add	r3, sp, #352	; 0x160
   1f648:	ldrd	r2, [r3]
   1f64c:	orr	r2, r2, r4
   1f650:	orr	r3, r3, r5
   1f654:	mov	r4, r2
   1f658:	mov	r5, r3
   1f65c:	ldrb	r2, [r6, #2]
   1f660:	lsl	r3, r2, #8
   1f664:	str	r3, [sp, #292]	; 0x124
   1f668:	mov	r3, #0
   1f66c:	str	r3, [sp, #288]	; 0x120
   1f670:	add	r3, sp, #288	; 0x120
   1f674:	ldrd	r2, [r3]
   1f678:	orr	r2, r2, r4
   1f67c:	orr	r3, r3, r5
   1f680:	mov	r4, r2
   1f684:	mov	r5, r3
   1f688:	ldrb	r2, [r6, #1]
   1f68c:	lsl	r3, r2, #16
   1f690:	str	r3, [sp, #268]	; 0x10c
   1f694:	mov	r3, #0
   1f698:	str	r3, [sp, #264]	; 0x108
   1f69c:	add	r3, sp, #264	; 0x108
   1f6a0:	ldrd	r2, [r3]
   1f6a4:	orr	r2, r2, r4
   1f6a8:	orr	r3, r3, r5
   1f6ac:	mov	r4, r2
   1f6b0:	mov	r5, r3
   1f6b4:	ldrb	r2, [r6]
   1f6b8:	lsl	fp, r2, #24
   1f6bc:	mov	sl, #0
   1f6c0:	orr	r4, r4, sl
   1f6c4:	orr	r5, r5, fp
   1f6c8:	add	r3, pc, #968	; 0x3c8
   1f6cc:	ldrd	r2, [r3]
   1f6d0:	cmp	r5, r3
   1f6d4:	cmpeq	r4, r2
   1f6d8:	bls	1f800 <_start@@Base+0xd148>
   1f6dc:	add	r3, pc, #956	; 0x3bc
   1f6e0:	ldrd	r2, [r3]
   1f6e4:	cmp	r5, r3
   1f6e8:	cmpeq	r4, r2
   1f6ec:	beq	1fb54 <_start@@Base+0xd49c>
   1f6f0:	mov	r0, #0
   1f6f4:	add	r3, pc, #940	; 0x3ac
   1f6f8:	ldrd	r2, [r3]
   1f6fc:	cmp	r5, r3
   1f700:	cmpeq	r0, r2
   1f704:	beq	1fd84 <_start@@Base+0xd6cc>
   1f708:	add	r3, pc, #928	; 0x3a0
   1f70c:	ldrd	r2, [r3]
   1f710:	cmp	r5, r3
   1f714:	cmpeq	r4, r2
   1f718:	beq	1fde8 <_start@@Base+0xd730>
   1f71c:	mov	r2, r7
   1f720:	mov	r1, r6
   1f724:	ldr	r0, [sp, #168]	; 0xa8
   1f728:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1f72c:	mov	r6, r0
   1f730:	add	r3, sp, #572	; 0x23c
   1f734:	mov	r2, r7
   1f738:	mov	r1, r6
   1f73c:	ldr	r0, [sp, #168]	; 0xa8
   1f740:	bl	18a08 <_start@@Base+0x6350>
   1f744:	mov	r6, r0
   1f748:	ldr	r3, [sp, #572]	; 0x23c
   1f74c:	cmp	r3, #0
   1f750:	beq	20000 <_start@@Base+0xd948>
   1f754:	cmp	r7, r6
   1f758:	beq	1f9a8 <_start@@Base+0xd2f0>
   1f75c:	ldrb	r3, [r6]
   1f760:	cmp	r3, #34	; 0x22
   1f764:	beq	1f56c <_start@@Base+0xceb4>
   1f768:	cmp	r3, #46	; 0x2e
   1f76c:	beq	1f580 <_start@@Base+0xcec8>
   1f770:	mov	r3, #1
   1f774:	ldr	r2, [sp, #168]	; 0xa8
   1f778:	str	r3, [r2, #12]
   1f77c:	sub	r3, r9, r6
   1f780:	cmp	r3, #8
   1f784:	movcs	r3, #8
   1f788:	sub	r3, r3, #1
   1f78c:	cmp	r3, #7
   1f790:	ldrls	pc, [pc, r3, lsl #2]
   1f794:	b	1fa18 <_start@@Base+0xd360>
   1f798:	strdeq	pc, [r1], -r4
   1f79c:	andeq	pc, r1, r8, ror #15
   1f7a0:	ldrdeq	pc, [r1], -ip
   1f7a4:	ldrdeq	pc, [r1], -r0
   1f7a8:	andeq	pc, r1, r4, asr #15
   1f7ac:			; <UNDEFINED> instruction: 0x0001f7b8
   1f7b0:	andeq	pc, r1, r8, lsr #11
   1f7b4:	muleq	r1, ip, r5
   1f7b8:	mov	r4, r8
   1f7bc:	ldr	r5, [sp, #536]	; 0x218
   1f7c0:	b	1f5dc <_start@@Base+0xcf24>
   1f7c4:	mov	r4, r8
   1f7c8:	ldr	r5, [sp, #536]	; 0x218
   1f7cc:	b	1f608 <_start@@Base+0xcf50>
   1f7d0:	mov	r4, r8
   1f7d4:	ldr	r5, [sp, #536]	; 0x218
   1f7d8:	b	1f634 <_start@@Base+0xcf7c>
   1f7dc:	mov	r4, r8
   1f7e0:	ldr	r5, [sp, #536]	; 0x218
   1f7e4:	b	1f65c <_start@@Base+0xcfa4>
   1f7e8:	mov	r4, r8
   1f7ec:	ldr	r5, [sp, #536]	; 0x218
   1f7f0:	b	1f688 <_start@@Base+0xcfd0>
   1f7f4:	mov	r4, r8
   1f7f8:	ldr	r5, [sp, #536]	; 0x218
   1f7fc:	b	1f6b4 <_start@@Base+0xcffc>
   1f800:	add	r3, pc, #688	; 0x2b0
   1f804:	ldrd	r2, [r3]
   1f808:	cmp	r5, r3
   1f80c:	cmpeq	r4, r2
   1f810:	beq	1f870 <_start@@Base+0xd1b8>
   1f814:	mov	r2, #0
   1f818:	mov	r3, r5
   1f81c:	add	r1, pc, #668	; 0x29c
   1f820:	ldrd	r0, [r1]
   1f824:	cmp	r5, r1
   1f828:	cmpeq	r2, r0
   1f82c:	beq	1f9b4 <_start@@Base+0xd2fc>
   1f830:	add	r1, pc, #656	; 0x290
   1f834:	ldrd	r0, [r1]
   1f838:	cmp	r5, r1
   1f83c:	cmpeq	r4, r0
   1f840:	beq	217d4 <_start@@Base+0xf11c>
   1f844:	add	r1, pc, #644	; 0x284
   1f848:	ldrd	r0, [r1]
   1f84c:	cmp	r3, r1
   1f850:	cmpeq	r2, r0
   1f854:	beq	1fadc <_start@@Base+0xd424>
   1f858:	mov	r2, r7
   1f85c:	mov	r1, r6
   1f860:	ldr	r0, [sp, #168]	; 0xa8
   1f864:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1f868:	mov	r6, r0
   1f86c:	b	1f730 <_start@@Base+0xd078>
   1f870:	add	r6, r6, #8
   1f874:	mov	r1, r7
   1f878:	mov	r0, r6
   1f87c:	bl	127e0 <_start@@Base+0x128>
   1f880:	mov	r0, #0
   1f884:	and	r1, r1, #-16777216	; 0xff000000
   1f888:	cmp	r1, #889192448	; 0x35000000
   1f88c:	cmpeq	r0, #0
   1f890:	beq	1f8ac <_start@@Base+0xd1f4>
   1f894:	mov	r2, r7
   1f898:	mov	r1, r6
   1f89c:	ldr	r0, [sp, #168]	; 0xa8
   1f8a0:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1f8a4:	mov	r6, r0
   1f8a8:	b	1f730 <_start@@Base+0xd078>
   1f8ac:	mov	r3, #1
   1f8b0:	mov	r2, r7
   1f8b4:	mov	r1, r6
   1f8b8:	ldr	r5, [sp, #168]	; 0xa8
   1f8bc:	mov	r0, r5
   1f8c0:	bl	1467c <_start@@Base+0x1fc4>
   1f8c4:	mov	r4, r0
   1f8c8:	cmp	r6, r0
   1f8cc:	beq	1f990 <_start@@Base+0xd2d8>
   1f8d0:	add	r3, sp, #592	; 0x250
   1f8d4:	str	sl, [r3, #-8]!
   1f8d8:	mov	r2, r7
   1f8dc:	mov	r1, r0
   1f8e0:	mov	r0, r5
   1f8e4:	bl	141cc <_start@@Base+0x1b14>
   1f8e8:	mov	r6, r0
   1f8ec:	cmp	r4, r0
   1f8f0:	beq	1f93c <_start@@Base+0xd284>
   1f8f4:	ldr	r3, [sp, #584]	; 0x248
   1f8f8:	cmp	r3, #0
   1f8fc:	bne	1f910 <_start@@Base+0xd258>
   1f900:	ldr	r3, [sp, #168]	; 0xa8
   1f904:	ldr	r3, [r3, #8]
   1f908:	tst	r3, #2
   1f90c:	beq	1f730 <_start@@Base+0xd078>
   1f910:	mov	r3, #4
   1f914:	mov	r2, r3
   1f918:	mov	r1, #1
   1f91c:	ldr	r0, [sp, #168]	; 0xa8
   1f920:	ldr	r0, [r0]
   1f924:	bl	25b40 <flatcc_builder_table_add@@Base>
   1f928:	cmp	r0, #0
   1f92c:	beq	1f970 <_start@@Base+0xd2b8>
   1f930:	ldr	r3, [sp, #584]	; 0x248
   1f934:	str	r3, [r0]
   1f938:	b	1f730 <_start@@Base+0xd078>
   1f93c:	add	r3, sp, #584	; 0x248
   1f940:	str	r3, [sp]
   1f944:	ldr	r3, [pc, #396]	; 1fad8 <_start@@Base+0xd420>
   1f948:	add	r3, r3, #540	; 0x21c
   1f94c:	mov	r2, r7
   1f950:	mov	r1, r0
   1f954:	ldr	r0, [sp, #168]	; 0xa8
   1f958:	bl	15804 <_start@@Base+0x314c>
   1f95c:	cmp	r7, r0
   1f960:	cmpne	r6, r0
   1f964:	beq	1f984 <_start@@Base+0xd2cc>
   1f968:	mov	r6, r0
   1f96c:	b	1f8f4 <_start@@Base+0xd23c>
   1f970:	mov	r9, r7
   1f974:	ldr	r7, [sp, #168]	; 0xa8
   1f978:	mov	r0, r6
   1f97c:	mov	r6, r0
   1f980:	b	20044 <_start@@Base+0xd98c>
   1f984:	mov	r9, r7
   1f988:	ldr	r7, [sp, #168]	; 0xa8
   1f98c:	b	1f97c <_start@@Base+0xd2c4>
   1f990:	mov	r2, r7
   1f994:	mov	r1, r0
   1f998:	ldr	r0, [sp, #168]	; 0xa8
   1f99c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1f9a0:	mov	r6, r0
   1f9a4:	b	1f730 <_start@@Base+0xd078>
   1f9a8:	mov	r4, r8
   1f9ac:	ldr	r5, [sp, #536]	; 0x218
   1f9b0:	b	1f814 <_start@@Base+0xd15c>
   1f9b4:	mov	r3, #4
   1f9b8:	mov	r2, r7
   1f9bc:	mov	r1, r6
   1f9c0:	ldr	r0, [sp, #168]	; 0xa8
   1f9c4:	bl	1467c <_start@@Base+0x1fc4>
   1f9c8:	cmp	r0, r6
   1f9cc:	beq	217c0 <_start@@Base+0xf108>
   1f9d0:	add	r3, sp, #576	; 0x240
   1f9d4:	mov	r2, r7
   1f9d8:	mov	r1, r0
   1f9dc:	ldr	r4, [sp, #168]	; 0xa8
   1f9e0:	mov	r0, r4
   1f9e4:	bl	2a214 <flatcc_json_parser_build_string@@Base>
   1f9e8:	mov	r6, r0
   1f9ec:	ldr	r3, [sp, #576]	; 0x240
   1f9f0:	cmp	r3, #0
   1f9f4:	beq	20060 <_start@@Base+0xd9a8>
   1f9f8:	mov	r1, #0
   1f9fc:	ldr	r0, [r4]
   1fa00:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1fa04:	cmp	r0, #0
   1fa08:	beq	2006c <_start@@Base+0xd9b4>
   1fa0c:	ldr	r3, [sp, #576]	; 0x240
   1fa10:	str	r3, [r0]
   1fa14:	b	1f730 <_start@@Base+0xd078>
   1fa18:	mov	r4, r8
   1fa1c:	ldr	r5, [sp, #536]	; 0x218
   1fa20:	add	r3, sp, #528	; 0x210
   1fa24:	ldrd	r2, [r3]
   1fa28:	b	1f830 <_start@@Base+0xd178>
   1fa2c:	add	r3, sp, #584	; 0x248
   1fa30:	str	r3, [sp]
   1fa34:	ldr	r3, [pc, #156]	; 1fad8 <_start@@Base+0xd420>
   1fa38:	add	r3, r3, #552	; 0x228
   1fa3c:	mov	r2, r7
   1fa40:	mov	r1, r0
   1fa44:	ldr	r0, [sp, #168]	; 0xa8
   1fa48:	bl	15a24 <_start@@Base+0x336c>
   1fa4c:	cmp	r7, r0
   1fa50:	cmpne	r6, r0
   1fa54:	beq	1fa74 <_start@@Base+0xd3bc>
   1fa58:	mov	r6, r0
   1fa5c:	b	21824 <_start@@Base+0xf16c>
   1fa60:	mov	r9, r7
   1fa64:	ldr	r7, [sp, #168]	; 0xa8
   1fa68:	mov	r0, r6
   1fa6c:	mov	r6, r0
   1fa70:	b	20044 <_start@@Base+0xd98c>
   1fa74:	mov	r9, r7
   1fa78:	ldr	r7, [sp, #168]	; 0xa8
   1fa7c:	b	1fa6c <_start@@Base+0xd3b4>
   1fa80:	mov	r2, r7
   1fa84:	mov	r1, r0
   1fa88:	ldr	r0, [sp, #168]	; 0xa8
   1fa8c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1fa90:	mov	r6, r0
   1fa94:	b	1f730 <_start@@Base+0xd078>
   1fa98:			; <UNDEFINED> instruction: 0xffffffff
   1fa9c:	cmnvs	r3, #-2013265919	; 0x88000001
   1faa0:	teqcc	r2, r4, lsr r3
   1faa4:	cmnvs	r3, #-1946157055	; 0x8c000001
   1faa8:	andeq	r0, r0, r0
   1faac:	cmnvs	r3, #-1946157055	; 0x8c000001
   1fab0:	teqcc	r2, r4, lsr r3
   1fab4:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1fab8:	teqcc	r2, r4, lsr r3
   1fabc:	cmnvs	r1, r1, ror #2
   1fac0:	andeq	r0, r0, r0
   1fac4:	cmnvs	r1, r1, ror #2
   1fac8:	teqcc	r2, r4, lsr r3
   1facc:	rsbvs	r6, r2, #536870918	; 0x20000006
   1fad0:	andeq	r0, r0, r0
   1fad4:	rsbvs	r6, r2, #536870918	; 0x20000006
   1fad8:	andeq	lr, r3, r8, ror r0
   1fadc:	mov	r3, #4
   1fae0:	mov	r2, r7
   1fae4:	mov	r1, r6
   1fae8:	ldr	r4, [sp, #168]	; 0xa8
   1faec:	mov	r0, r4
   1faf0:	bl	1467c <_start@@Base+0x1fc4>
   1faf4:	mov	r1, r0
   1faf8:	cmp	r0, r6
   1fafc:	beq	1fb40 <_start@@Base+0xd488>
   1fb00:	add	r3, sp, #576	; 0x240
   1fb04:	mov	r2, r7
   1fb08:	mov	r0, r4
   1fb0c:	bl	2a214 <flatcc_json_parser_build_string@@Base>
   1fb10:	mov	r6, r0
   1fb14:	ldr	r3, [sp, #576]	; 0x240
   1fb18:	cmp	r3, #0
   1fb1c:	beq	20078 <_start@@Base+0xd9c0>
   1fb20:	mov	r1, #2
   1fb24:	ldr	r0, [r4]
   1fb28:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1fb2c:	cmp	r0, #0
   1fb30:	beq	20084 <_start@@Base+0xd9cc>
   1fb34:	ldr	r3, [sp, #576]	; 0x240
   1fb38:	str	r3, [r0]
   1fb3c:	b	1f730 <_start@@Base+0xd078>
   1fb40:	mov	r2, r7
   1fb44:	ldr	r0, [sp, #168]	; 0xa8
   1fb48:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1fb4c:	mov	r6, r0
   1fb50:	b	1f730 <_start@@Base+0xd078>
   1fb54:	mov	r3, #8
   1fb58:	mov	r2, r7
   1fb5c:	mov	r1, r6
   1fb60:	ldr	r5, [sp, #168]	; 0xa8
   1fb64:	mov	r0, r5
   1fb68:	bl	1467c <_start@@Base+0x1fc4>
   1fb6c:	mov	r4, r0
   1fb70:	cmp	r0, r6
   1fb74:	beq	1fc48 <_start@@Base+0xd590>
   1fb78:	add	r3, sp, #592	; 0x250
   1fb7c:	add	r2, sp, #528	; 0x210
   1fb80:	ldrd	r0, [r2]
   1fb84:	strd	r0, [r3, #-8]!
   1fb88:	mov	r2, r7
   1fb8c:	mov	r1, r4
   1fb90:	mov	r0, r5
   1fb94:	bl	143b4 <_start@@Base+0x1cfc>
   1fb98:	mov	r6, r0
   1fb9c:	cmp	r4, r0
   1fba0:	beq	1fbf4 <_start@@Base+0xd53c>
   1fba4:	add	r3, sp, #584	; 0x248
   1fba8:	ldrd	r2, [r3]
   1fbac:	orrs	r3, r2, r3
   1fbb0:	bne	1fbc4 <_start@@Base+0xd50c>
   1fbb4:	ldr	r3, [sp, #168]	; 0xa8
   1fbb8:	ldr	r3, [r3, #8]
   1fbbc:	tst	r3, #2
   1fbc0:	beq	1f730 <_start@@Base+0xd078>
   1fbc4:	mov	r3, #8
   1fbc8:	mov	r2, r3
   1fbcc:	mov	r1, #5
   1fbd0:	ldr	r0, [sp, #168]	; 0xa8
   1fbd4:	ldr	r0, [r0]
   1fbd8:	bl	25b40 <flatcc_builder_table_add@@Base>
   1fbdc:	cmp	r0, #0
   1fbe0:	beq	1fc28 <_start@@Base+0xd570>
   1fbe4:	add	r3, sp, #584	; 0x248
   1fbe8:	ldrd	r2, [r3]
   1fbec:	strd	r2, [r0]
   1fbf0:	b	1f730 <_start@@Base+0xd078>
   1fbf4:	add	r3, sp, #584	; 0x248
   1fbf8:	str	r3, [sp]
   1fbfc:	ldr	r3, [pc, #-300]	; 1fad8 <_start@@Base+0xd420>
   1fc00:	add	r3, r3, #564	; 0x234
   1fc04:	mov	r2, r7
   1fc08:	mov	r1, r0
   1fc0c:	ldr	r0, [sp, #168]	; 0xa8
   1fc10:	bl	15a24 <_start@@Base+0x336c>
   1fc14:	cmp	r7, r0
   1fc18:	cmpne	r6, r0
   1fc1c:	beq	1fc3c <_start@@Base+0xd584>
   1fc20:	mov	r6, r0
   1fc24:	b	1fba4 <_start@@Base+0xd4ec>
   1fc28:	mov	r9, r7
   1fc2c:	ldr	r7, [sp, #168]	; 0xa8
   1fc30:	mov	r0, r6
   1fc34:	mov	r6, r0
   1fc38:	b	20044 <_start@@Base+0xd98c>
   1fc3c:	mov	r9, r7
   1fc40:	ldr	r7, [sp, #168]	; 0xa8
   1fc44:	b	1fc34 <_start@@Base+0xd57c>
   1fc48:	add	r4, r0, #8
   1fc4c:	mov	r1, r7
   1fc50:	mov	r0, r4
   1fc54:	bl	127e0 <_start@@Base+0x128>
   1fc58:	mov	r0, #0
   1fc5c:	and	r1, r1, #-16777216	; 0xff000000
   1fc60:	cmp	r1, #889192448	; 0x35000000
   1fc64:	cmpeq	r0, #0
   1fc68:	beq	1fc84 <_start@@Base+0xd5cc>
   1fc6c:	mov	r2, r7
   1fc70:	mov	r1, r4
   1fc74:	ldr	r0, [sp, #168]	; 0xa8
   1fc78:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1fc7c:	mov	r6, r0
   1fc80:	b	1f730 <_start@@Base+0xd078>
   1fc84:	mov	r3, #1
   1fc88:	mov	r2, r7
   1fc8c:	mov	r1, r4
   1fc90:	ldr	r6, [sp, #168]	; 0xa8
   1fc94:	mov	r0, r6
   1fc98:	bl	1467c <_start@@Base+0x1fc4>
   1fc9c:	mov	r5, r0
   1fca0:	cmp	r4, r0
   1fca4:	beq	1fd6c <_start@@Base+0xd6b4>
   1fca8:	add	r3, sp, #592	; 0x250
   1fcac:	mov	r2, #0
   1fcb0:	str	r2, [r3, #-8]!
   1fcb4:	mov	r2, r7
   1fcb8:	mov	r1, r0
   1fcbc:	mov	r0, r6
   1fcc0:	bl	141cc <_start@@Base+0x1b14>
   1fcc4:	mov	r6, r0
   1fcc8:	cmp	r5, r0
   1fccc:	beq	1fd18 <_start@@Base+0xd660>
   1fcd0:	ldr	r3, [sp, #584]	; 0x248
   1fcd4:	cmp	r3, #0
   1fcd8:	bne	1fcec <_start@@Base+0xd634>
   1fcdc:	ldr	r3, [sp, #168]	; 0xa8
   1fce0:	ldr	r3, [r3, #8]
   1fce4:	tst	r3, #2
   1fce8:	beq	1f730 <_start@@Base+0xd078>
   1fcec:	mov	r3, #4
   1fcf0:	mov	r2, r3
   1fcf4:	mov	r1, #6
   1fcf8:	ldr	r0, [sp, #168]	; 0xa8
   1fcfc:	ldr	r0, [r0]
   1fd00:	bl	25b40 <flatcc_builder_table_add@@Base>
   1fd04:	cmp	r0, #0
   1fd08:	beq	1fd4c <_start@@Base+0xd694>
   1fd0c:	ldr	r3, [sp, #584]	; 0x248
   1fd10:	str	r3, [r0]
   1fd14:	b	1f730 <_start@@Base+0xd078>
   1fd18:	add	r3, sp, #584	; 0x248
   1fd1c:	str	r3, [sp]
   1fd20:	ldr	r3, [pc, #-592]	; 1fad8 <_start@@Base+0xd420>
   1fd24:	add	r3, r3, #576	; 0x240
   1fd28:	mov	r2, r7
   1fd2c:	mov	r1, r0
   1fd30:	ldr	r0, [sp, #168]	; 0xa8
   1fd34:	bl	15804 <_start@@Base+0x314c>
   1fd38:	cmp	r7, r0
   1fd3c:	cmpne	r6, r0
   1fd40:	beq	1fd60 <_start@@Base+0xd6a8>
   1fd44:	mov	r6, r0
   1fd48:	b	1fcd0 <_start@@Base+0xd618>
   1fd4c:	mov	r9, r7
   1fd50:	ldr	r7, [sp, #168]	; 0xa8
   1fd54:	mov	r0, r6
   1fd58:	mov	r6, r0
   1fd5c:	b	20044 <_start@@Base+0xd98c>
   1fd60:	mov	r9, r7
   1fd64:	ldr	r7, [sp, #168]	; 0xa8
   1fd68:	b	1fd58 <_start@@Base+0xd6a0>
   1fd6c:	mov	r2, r7
   1fd70:	mov	r1, r0
   1fd74:	ldr	r0, [sp, #168]	; 0xa8
   1fd78:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1fd7c:	mov	r6, r0
   1fd80:	b	1f730 <_start@@Base+0xd078>
   1fd84:	mov	r3, #4
   1fd88:	mov	r2, r7
   1fd8c:	mov	r1, r6
   1fd90:	ldr	r0, [sp, #168]	; 0xa8
   1fd94:	bl	1467c <_start@@Base+0x1fc4>
   1fd98:	cmp	r0, r6
   1fd9c:	beq	1f708 <_start@@Base+0xd050>
   1fda0:	add	r3, sp, #576	; 0x240
   1fda4:	mov	r2, r7
   1fda8:	mov	r1, r0
   1fdac:	ldr	r4, [sp, #168]	; 0xa8
   1fdb0:	mov	r0, r4
   1fdb4:	bl	2a214 <flatcc_json_parser_build_string@@Base>
   1fdb8:	mov	r6, r0
   1fdbc:	ldr	r3, [sp, #576]	; 0x240
   1fdc0:	cmp	r3, #0
   1fdc4:	beq	20090 <_start@@Base+0xd9d8>
   1fdc8:	mov	r1, #4
   1fdcc:	ldr	r0, [r4]
   1fdd0:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   1fdd4:	cmp	r0, #0
   1fdd8:	beq	2009c <_start@@Base+0xd9e4>
   1fddc:	ldr	r3, [sp, #576]	; 0x240
   1fde0:	str	r3, [r0]
   1fde4:	b	1f730 <_start@@Base+0xd078>
   1fde8:	mov	r3, #8
   1fdec:	mov	r2, r7
   1fdf0:	mov	r1, r6
   1fdf4:	ldr	r5, [sp, #168]	; 0xa8
   1fdf8:	mov	r0, r5
   1fdfc:	bl	1467c <_start@@Base+0x1fc4>
   1fe00:	mov	r4, r0
   1fe04:	cmp	r0, r6
   1fe08:	beq	1fec8 <_start@@Base+0xd810>
   1fe0c:	add	r3, sp, #592	; 0x250
   1fe10:	add	r2, sp, #528	; 0x210
   1fe14:	ldrd	r0, [r2]
   1fe18:	strd	r0, [r3, #-8]!
   1fe1c:	mov	r2, r7
   1fe20:	mov	r1, r4
   1fe24:	mov	r0, r5
   1fe28:	bl	143b4 <_start@@Base+0x1cfc>
   1fe2c:	mov	r6, r0
   1fe30:	cmp	r4, r0
   1fe34:	beq	1fe88 <_start@@Base+0xd7d0>
   1fe38:	add	r3, sp, #584	; 0x248
   1fe3c:	ldrd	r2, [r3]
   1fe40:	orrs	r3, r2, r3
   1fe44:	bne	1fe58 <_start@@Base+0xd7a0>
   1fe48:	ldr	r3, [sp, #168]	; 0xa8
   1fe4c:	ldr	r3, [r3, #8]
   1fe50:	tst	r3, #2
   1fe54:	beq	1f730 <_start@@Base+0xd078>
   1fe58:	mov	r3, #8
   1fe5c:	mov	r2, r3
   1fe60:	mov	r1, #7
   1fe64:	ldr	r0, [sp, #168]	; 0xa8
   1fe68:	ldr	r0, [r0]
   1fe6c:	bl	25b40 <flatcc_builder_table_add@@Base>
   1fe70:	cmp	r0, #0
   1fe74:	beq	200a8 <_start@@Base+0xd9f0>
   1fe78:	add	r3, sp, #584	; 0x248
   1fe7c:	ldrd	r2, [r3]
   1fe80:	strd	r2, [r0]
   1fe84:	b	1f730 <_start@@Base+0xd078>
   1fe88:	add	r3, sp, #584	; 0x248
   1fe8c:	str	r3, [sp]
   1fe90:	ldr	r3, [pc, #-960]	; 1fad8 <_start@@Base+0xd420>
   1fe94:	add	r3, r3, #588	; 0x24c
   1fe98:	mov	r2, r7
   1fe9c:	mov	r1, r0
   1fea0:	ldr	r0, [sp, #168]	; 0xa8
   1fea4:	bl	15a24 <_start@@Base+0x336c>
   1fea8:	cmp	r7, r0
   1feac:	cmpne	r6, r0
   1feb0:	movne	r6, r0
   1feb4:	bne	1fe38 <_start@@Base+0xd780>
   1feb8:	mov	r9, r7
   1febc:	ldr	r7, [sp, #168]	; 0xa8
   1fec0:	mov	r6, r0
   1fec4:	b	20044 <_start@@Base+0xd98c>
   1fec8:	add	r4, r0, #8
   1fecc:	mov	r1, r7
   1fed0:	mov	r0, r4
   1fed4:	bl	127e0 <_start@@Base+0x128>
   1fed8:	mov	r0, #0
   1fedc:	and	r1, r1, #-16777216	; 0xff000000
   1fee0:	cmp	r1, #889192448	; 0x35000000
   1fee4:	cmpeq	r0, #0
   1fee8:	beq	1ff04 <_start@@Base+0xd84c>
   1feec:	mov	r2, r7
   1fef0:	mov	r1, r4
   1fef4:	ldr	r0, [sp, #168]	; 0xa8
   1fef8:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1fefc:	mov	r6, r0
   1ff00:	b	1f730 <_start@@Base+0xd078>
   1ff04:	mov	r3, #1
   1ff08:	mov	r2, r7
   1ff0c:	mov	r1, r4
   1ff10:	ldr	r6, [sp, #168]	; 0xa8
   1ff14:	mov	r0, r6
   1ff18:	bl	1467c <_start@@Base+0x1fc4>
   1ff1c:	mov	r5, r0
   1ff20:	cmp	r4, r0
   1ff24:	beq	1ffe8 <_start@@Base+0xd930>
   1ff28:	add	r3, sp, #592	; 0x250
   1ff2c:	mov	r2, #0
   1ff30:	str	r2, [r3, #-8]!
   1ff34:	mov	r2, r7
   1ff38:	mov	r1, r0
   1ff3c:	mov	r0, r6
   1ff40:	bl	141cc <_start@@Base+0x1b14>
   1ff44:	mov	r6, r0
   1ff48:	cmp	r5, r0
   1ff4c:	beq	1ff98 <_start@@Base+0xd8e0>
   1ff50:	ldr	r3, [sp, #584]	; 0x248
   1ff54:	cmp	r3, #0
   1ff58:	bne	1ff6c <_start@@Base+0xd8b4>
   1ff5c:	ldr	r3, [sp, #168]	; 0xa8
   1ff60:	ldr	r3, [r3, #8]
   1ff64:	tst	r3, #2
   1ff68:	beq	1f730 <_start@@Base+0xd078>
   1ff6c:	mov	r3, #4
   1ff70:	mov	r2, r3
   1ff74:	mov	r1, #8
   1ff78:	ldr	r0, [sp, #168]	; 0xa8
   1ff7c:	ldr	r0, [r0]
   1ff80:	bl	25b40 <flatcc_builder_table_add@@Base>
   1ff84:	cmp	r0, #0
   1ff88:	beq	1ffc8 <_start@@Base+0xd910>
   1ff8c:	ldr	r3, [sp, #584]	; 0x248
   1ff90:	str	r3, [r0]
   1ff94:	b	1f730 <_start@@Base+0xd078>
   1ff98:	add	r3, sp, #584	; 0x248
   1ff9c:	str	r3, [sp]
   1ffa0:	ldr	r3, [sp, #540]	; 0x21c
   1ffa4:	mov	r2, r7
   1ffa8:	mov	r1, r0
   1ffac:	ldr	r0, [sp, #168]	; 0xa8
   1ffb0:	bl	15804 <_start@@Base+0x314c>
   1ffb4:	cmp	r7, r0
   1ffb8:	cmpne	r6, r0
   1ffbc:	beq	1ffdc <_start@@Base+0xd924>
   1ffc0:	mov	r6, r0
   1ffc4:	b	1ff50 <_start@@Base+0xd898>
   1ffc8:	mov	r9, r7
   1ffcc:	ldr	r7, [sp, #168]	; 0xa8
   1ffd0:	mov	r0, r6
   1ffd4:	mov	r6, r0
   1ffd8:	b	20044 <_start@@Base+0xd98c>
   1ffdc:	mov	r9, r7
   1ffe0:	ldr	r7, [sp, #168]	; 0xa8
   1ffe4:	b	1ffd4 <_start@@Base+0xd91c>
   1ffe8:	mov	r2, r7
   1ffec:	mov	r1, r0
   1fff0:	ldr	r0, [sp, #168]	; 0xa8
   1fff4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   1fff8:	mov	r6, r0
   1fffc:	b	1f730 <_start@@Base+0xd078>
   20000:	add	r3, sp, #544	; 0x220
   20004:	strd	sl, [r3]
   20008:	ldr	sl, [sp, #168]	; 0xa8
   2000c:	ldr	r3, [sl, #24]
   20010:	cmp	r3, #0
   20014:	movne	r9, r7
   20018:	movne	r7, sl
   2001c:	bne	20044 <_start@@Base+0xd98c>
   20020:	ldr	r0, [sl]
   20024:	bl	24b94 <flatcc_builder_end_table@@Base>
   20028:	subs	r4, r0, #0
   2002c:	bne	21874 <_start@@Base+0xf1bc>
   20030:	mov	r9, r7
   20034:	mov	r7, sl
   20038:	b	20044 <_start@@Base+0xd98c>
   2003c:	mov	r9, r7
   20040:	mov	r7, sl
   20044:	mov	r3, #33	; 0x21
   20048:	mov	r2, r9
   2004c:	mov	r1, r6
   20050:	mov	r0, r7
   20054:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   20058:	mov	r8, r0
   2005c:	b	209f8 <_start@@Base+0xe340>
   20060:	mov	r9, r7
   20064:	ldr	r7, [sp, #168]	; 0xa8
   20068:	b	20044 <_start@@Base+0xd98c>
   2006c:	mov	r9, r7
   20070:	ldr	r7, [sp, #168]	; 0xa8
   20074:	b	20044 <_start@@Base+0xd98c>
   20078:	mov	r9, r7
   2007c:	ldr	r7, [sp, #168]	; 0xa8
   20080:	b	20044 <_start@@Base+0xd98c>
   20084:	mov	r9, r7
   20088:	ldr	r7, [sp, #168]	; 0xa8
   2008c:	b	20044 <_start@@Base+0xd98c>
   20090:	mov	r9, r7
   20094:	ldr	r7, [sp, #168]	; 0xa8
   20098:	b	20044 <_start@@Base+0xd98c>
   2009c:	mov	r9, r7
   200a0:	ldr	r7, [sp, #168]	; 0xa8
   200a4:	b	20044 <_start@@Base+0xd98c>
   200a8:	mov	r9, r7
   200ac:	ldr	r7, [sp, #168]	; 0xa8
   200b0:	b	20044 <_start@@Base+0xd98c>
   200b4:	mov	r8, r0
   200b8:	b	1eb48 <_start@@Base+0xc490>
   200bc:	mov	r3, #6
   200c0:	mov	r2, r7
   200c4:	mov	r1, r8
   200c8:	mov	r0, sl
   200cc:	bl	1467c <_start@@Base+0x1fc4>
   200d0:	mov	r6, r0
   200d4:	cmp	r8, r0
   200d8:	beq	20a14 <_start@@Base+0xe35c>
   200dc:	mov	r1, #2
   200e0:	ldr	r0, [sl]
   200e4:	bl	24144 <flatcc_builder_start_table@@Base>
   200e8:	cmp	r0, #0
   200ec:	bne	209d8 <_start@@Base+0xe320>
   200f0:	add	r3, sp, #568	; 0x238
   200f4:	mov	r2, r7
   200f8:	mov	r1, r6
   200fc:	mov	r0, sl
   20100:	bl	15d2c <_start@@Base+0x3674>
   20104:	add	r5, pc, #948	; 0x3b4
   20108:	ldrd	r4, [r5]
   2010c:	ldr	r3, [pc, #964]	; 204d8 <_start@@Base+0xde20>
   20110:	add	r3, r3, #624	; 0x270
   20114:	str	r3, [sp, #168]	; 0xa8
   20118:	mov	r8, sl
   2011c:	b	20824 <_start@@Base+0xe16c>
   20120:	mov	r3, #5
   20124:	mov	r2, r7
   20128:	mov	r1, r0
   2012c:	mov	r0, r8
   20130:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   20134:	b	20860 <_start@@Base+0xe1a8>
   20138:	ldrb	r2, [r0, #7]
   2013c:	mov	r3, #0
   20140:	b	2014c <_start@@Base+0xda94>
   20144:	mov	r2, #0
   20148:	mov	r3, #0
   2014c:	ldrb	sl, [r0, #6]
   20150:	mov	r1, #0
   20154:	str	r1, [sp, #276]	; 0x114
   20158:	lsl	r1, sl, #8
   2015c:	str	r1, [sp, #272]	; 0x110
   20160:	add	r1, sp, #272	; 0x110
   20164:	ldrd	sl, [r1]
   20168:	orr	sl, sl, r2
   2016c:	orr	fp, fp, r3
   20170:	mov	r2, sl
   20174:	mov	r3, fp
   20178:	ldrb	sl, [r0, #5]
   2017c:	mov	r1, #0
   20180:	str	r1, [sp, #196]	; 0xc4
   20184:	lsl	r1, sl, #16
   20188:	str	r1, [sp, #192]	; 0xc0
   2018c:	ldrd	sl, [sp, #192]	; 0xc0
   20190:	orr	sl, sl, r2
   20194:	orr	fp, fp, r3
   20198:	mov	r2, sl
   2019c:	mov	r3, fp
   201a0:	ldrb	sl, [r0, #4]
   201a4:	mov	r1, #0
   201a8:	str	r1, [sp, #108]	; 0x6c
   201ac:	lsl	r1, sl, #24
   201b0:	str	r1, [sp, #104]	; 0x68
   201b4:	ldrd	sl, [sp, #104]	; 0x68
   201b8:	orr	sl, sl, r2
   201bc:	orr	fp, fp, r3
   201c0:	mov	r2, sl
   201c4:	mov	r3, fp
   201c8:	ldrb	r1, [r0, #3]
   201cc:	str	r1, [sp, #76]	; 0x4c
   201d0:	mov	r1, #0
   201d4:	str	r1, [sp, #72]	; 0x48
   201d8:	ldrd	sl, [sp, #72]	; 0x48
   201dc:	orr	sl, sl, r2
   201e0:	orr	fp, fp, r3
   201e4:	mov	r2, sl
   201e8:	mov	r3, fp
   201ec:	ldrb	sl, [r0, #2]
   201f0:	lsl	r1, sl, #8
   201f4:	str	r1, [sp, #60]	; 0x3c
   201f8:	mov	r1, #0
   201fc:	str	r1, [sp, #56]	; 0x38
   20200:	ldrd	sl, [sp, #56]	; 0x38
   20204:	orr	sl, sl, r2
   20208:	orr	fp, fp, r3
   2020c:	mov	r2, sl
   20210:	mov	r3, fp
   20214:	ldrb	sl, [r0, #1]
   20218:	lsl	r1, sl, #16
   2021c:	str	r1, [sp, #44]	; 0x2c
   20220:	mov	r1, #0
   20224:	str	r1, [sp, #40]	; 0x28
   20228:	ldrd	sl, [sp, #40]	; 0x28
   2022c:	orr	sl, sl, r2
   20230:	orr	fp, fp, r3
   20234:	mov	r2, sl
   20238:	mov	r3, fp
   2023c:	ldrb	sl, [r0]
   20240:	lsl	r1, sl, #24
   20244:	str	r1, [sp, #28]
   20248:	mov	r1, #0
   2024c:	str	r1, [sp, #24]
   20250:	ldrd	sl, [sp, #24]
   20254:	orr	sl, sl, r2
   20258:	orr	fp, fp, r3
   2025c:	mov	r2, sl
   20260:	mov	r3, fp
   20264:	add	fp, pc, #604	; 0x25c
   20268:	ldrd	sl, [fp]
   2026c:	cmp	r3, fp
   20270:	cmpeq	r2, sl
   20274:	bne	20798 <_start@@Base+0xe0e0>
   20278:	add	r6, r0, #8
   2027c:	sub	r3, r9, r6
   20280:	cmp	r3, #8
   20284:	movcs	r3, #8
   20288:	sub	r3, r3, #1
   2028c:	cmp	r3, #7
   20290:	ldrls	pc, [pc, r3, lsl #2]
   20294:	b	204b0 <_start@@Base+0xddf8>
   20298:	andeq	r0, r2, r4, lsr #9
   2029c:	muleq	r2, r8, r4
   202a0:	andeq	r0, r2, ip, lsl #9
   202a4:	andeq	r0, r2, r0, lsl #9
   202a8:	andeq	r0, r2, r4, ror r4
   202ac:	andeq	r0, r2, r8, ror #8
   202b0:	andeq	r0, r2, ip, lsl #6
   202b4:	andeq	r0, r2, r0, lsl #6
   202b8:	mov	r2, #0
   202bc:	mov	r3, #0
   202c0:	b	20178 <_start@@Base+0xdac0>
   202c4:	mov	r2, #0
   202c8:	mov	r3, #0
   202cc:	b	201a0 <_start@@Base+0xdae8>
   202d0:	mov	r2, #0
   202d4:	mov	r3, #0
   202d8:	b	201c8 <_start@@Base+0xdb10>
   202dc:	mov	r2, #0
   202e0:	mov	r3, #0
   202e4:	b	201ec <_start@@Base+0xdb34>
   202e8:	mov	r2, #0
   202ec:	mov	r3, #0
   202f0:	b	20214 <_start@@Base+0xdb5c>
   202f4:	mov	r2, #0
   202f8:	mov	r3, #0
   202fc:	b	2023c <_start@@Base+0xdb84>
   20300:	ldrb	sl, [r0, #15]
   20304:	mov	fp, #0
   20308:	b	20314 <_start@@Base+0xdc5c>
   2030c:	mov	sl, #0
   20310:	mov	fp, #0
   20314:	ldrb	r2, [r0, #14]
   20318:	mov	r1, #0
   2031c:	str	r1, [sp, #444]	; 0x1bc
   20320:	lsl	r3, r2, #8
   20324:	str	r3, [sp, #440]	; 0x1b8
   20328:	add	r3, sp, #440	; 0x1b8
   2032c:	ldrd	r2, [r3]
   20330:	orr	r2, r2, sl
   20334:	orr	r3, r3, fp
   20338:	ldrb	sl, [r0, #13]
   2033c:	mov	r1, #0
   20340:	str	r1, [sp, #372]	; 0x174
   20344:	lsl	r1, sl, #16
   20348:	str	r1, [sp, #368]	; 0x170
   2034c:	add	r1, sp, #368	; 0x170
   20350:	ldrd	sl, [r1]
   20354:	orr	sl, sl, r2
   20358:	orr	fp, fp, r3
   2035c:	mov	r2, sl
   20360:	mov	r3, fp
   20364:	ldrb	sl, [r0, #12]
   20368:	mov	r1, #0
   2036c:	str	r1, [sp, #284]	; 0x11c
   20370:	lsl	r1, sl, #24
   20374:	str	r1, [sp, #280]	; 0x118
   20378:	add	r1, sp, #280	; 0x118
   2037c:	ldrd	sl, [r1]
   20380:	orr	sl, sl, r2
   20384:	orr	fp, fp, r3
   20388:	mov	r2, sl
   2038c:	mov	r3, fp
   20390:	ldrb	r1, [r0, #11]
   20394:	str	r1, [sp, #244]	; 0xf4
   20398:	mov	r1, #0
   2039c:	str	r1, [sp, #240]	; 0xf0
   203a0:	ldrd	sl, [sp, #240]	; 0xf0
   203a4:	orr	sl, sl, r2
   203a8:	orr	fp, fp, r3
   203ac:	mov	r2, sl
   203b0:	mov	r3, fp
   203b4:	ldrb	sl, [r0, #10]
   203b8:	lsl	r1, sl, #8
   203bc:	str	r1, [sp, #204]	; 0xcc
   203c0:	mov	r1, #0
   203c4:	str	r1, [sp, #200]	; 0xc8
   203c8:	ldrd	sl, [sp, #200]	; 0xc8
   203cc:	orr	sl, sl, r2
   203d0:	orr	fp, fp, r3
   203d4:	mov	r2, sl
   203d8:	mov	r3, fp
   203dc:	ldrb	sl, [r0, #9]
   203e0:	lsl	r1, sl, #16
   203e4:	str	r1, [sp, #156]	; 0x9c
   203e8:	mov	r1, #0
   203ec:	str	r1, [sp, #152]	; 0x98
   203f0:	ldrd	sl, [sp, #152]	; 0x98
   203f4:	orr	sl, sl, r2
   203f8:	orr	fp, fp, r3
   203fc:	mov	r2, sl
   20400:	mov	r3, fp
   20404:	ldrb	sl, [r0, #8]
   20408:	lsl	r1, sl, #24
   2040c:	str	r1, [sp, #116]	; 0x74
   20410:	mov	r1, #0
   20414:	str	r1, [sp, #112]	; 0x70
   20418:	ldrd	sl, [sp, #112]	; 0x70
   2041c:	orr	sl, sl, r2
   20420:	orr	fp, fp, r3
   20424:	mov	r2, sl
   20428:	mov	r3, fp
   2042c:	cmp	r3, r5
   20430:	cmpeq	r2, r4
   20434:	beq	204dc <_start@@Base+0xde24>
   20438:	bic	r2, r2, #255	; 0xff
   2043c:	add	r1, pc, #140	; 0x8c
   20440:	ldrd	r0, [r1]
   20444:	cmp	r3, r1
   20448:	cmpeq	r2, r0
   2044c:	beq	2060c <_start@@Base+0xdf54>
   20450:	mov	r2, r7
   20454:	mov	r1, r6
   20458:	mov	r0, r8
   2045c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20460:	mov	fp, r0
   20464:	b	207ac <_start@@Base+0xe0f4>
   20468:	mov	r2, #0
   2046c:	mov	r3, #0
   20470:	b	20338 <_start@@Base+0xdc80>
   20474:	mov	r2, #0
   20478:	mov	r3, #0
   2047c:	b	20364 <_start@@Base+0xdcac>
   20480:	mov	r2, #0
   20484:	mov	r3, #0
   20488:	b	20390 <_start@@Base+0xdcd8>
   2048c:	mov	r2, #0
   20490:	mov	r3, #0
   20494:	b	203b4 <_start@@Base+0xdcfc>
   20498:	mov	r2, #0
   2049c:	mov	r3, #0
   204a0:	b	203dc <_start@@Base+0xdd24>
   204a4:	mov	r2, #0
   204a8:	mov	r3, #0
   204ac:	b	20404 <_start@@Base+0xdd4c>
   204b0:	mov	r2, #0
   204b4:	mov	r3, #0
   204b8:	b	2042c <_start@@Base+0xdd74>
   204bc:	nop			; (mov r0, r0)
   204c0:	cmnvs	r2, pc, asr r4
   204c4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   204c8:	svcpl	0x00626262
   204cc:	cmnvs	r1, r1, ror #2
   204d0:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   204d4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   204d8:	andeq	lr, r3, r8, ror r0
   204dc:	add	r6, r0, #16
   204e0:	mov	r1, r7
   204e4:	mov	r0, r6
   204e8:	bl	127e0 <_start@@Base+0x128>
   204ec:	and	r0, r0, #-16777216	; 0xff000000
   204f0:	add	r3, pc, #952	; 0x3b8
   204f4:	ldrd	r2, [r3]
   204f8:	cmp	r1, r3
   204fc:	cmpeq	r0, r2
   20500:	beq	2051c <_start@@Base+0xde64>
   20504:	mov	r2, r7
   20508:	mov	r1, r6
   2050c:	mov	r0, r8
   20510:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20514:	mov	fp, r0
   20518:	b	207ac <_start@@Base+0xe0f4>
   2051c:	mov	r3, #5
   20520:	mov	r2, r7
   20524:	mov	r1, r6
   20528:	mov	r0, r8
   2052c:	bl	1467c <_start@@Base+0x1fc4>
   20530:	mov	sl, r0
   20534:	cmp	r6, r0
   20538:	beq	205f4 <_start@@Base+0xdf3c>
   2053c:	add	r3, sp, #592	; 0x250
   20540:	mov	r2, #0
   20544:	str	r2, [r3, #-8]!
   20548:	mov	r2, r7
   2054c:	mov	r1, r0
   20550:	mov	r0, r8
   20554:	bl	141cc <_start@@Base+0x1b14>
   20558:	mov	fp, r0
   2055c:	cmp	sl, r0
   20560:	beq	205a4 <_start@@Base+0xdeec>
   20564:	ldr	r3, [sp, #584]	; 0x248
   20568:	cmp	r3, #0
   2056c:	bne	2057c <_start@@Base+0xdec4>
   20570:	ldr	r3, [r8, #8]
   20574:	tst	r3, #2
   20578:	beq	207ac <_start@@Base+0xe0f4>
   2057c:	mov	r3, #4
   20580:	mov	r2, r3
   20584:	mov	r1, #1
   20588:	ldr	r0, [r8]
   2058c:	bl	25b40 <flatcc_builder_table_add@@Base>
   20590:	cmp	r0, #0
   20594:	beq	205e4 <_start@@Base+0xdf2c>
   20598:	ldr	r3, [sp, #584]	; 0x248
   2059c:	str	r3, [r0]
   205a0:	b	207ac <_start@@Base+0xe0f4>
   205a4:	add	r3, sp, #584	; 0x248
   205a8:	str	r3, [sp]
   205ac:	ldr	r3, [pc, #772]	; 208b8 <_start@@Base+0xe200>
   205b0:	add	r3, r3, #612	; 0x264
   205b4:	mov	r2, r7
   205b8:	mov	r1, r0
   205bc:	mov	r0, r8
   205c0:	bl	15804 <_start@@Base+0x314c>
   205c4:	cmp	r7, r0
   205c8:	cmpne	fp, r0
   205cc:	movne	fp, r0
   205d0:	bne	20564 <_start@@Base+0xdeac>
   205d4:	mov	r9, r7
   205d8:	mov	r7, r8
   205dc:	mov	fp, r0
   205e0:	b	205ec <_start@@Base+0xdf34>
   205e4:	mov	r9, r7
   205e8:	mov	r7, r8
   205ec:	mov	r6, fp
   205f0:	b	209e0 <_start@@Base+0xe328>
   205f4:	mov	r2, r7
   205f8:	mov	r1, r0
   205fc:	mov	r0, r8
   20600:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20604:	mov	fp, r0
   20608:	b	207ac <_start@@Base+0xe0f4>
   2060c:	mov	r3, #7
   20610:	mov	r2, r7
   20614:	mov	r1, r6
   20618:	mov	r0, r8
   2061c:	bl	1467c <_start@@Base+0x1fc4>
   20620:	mov	sl, r0
   20624:	cmp	r6, r0
   20628:	beq	20780 <_start@@Base+0xe0c8>
   2062c:	mov	r2, #0
   20630:	mov	r3, #0
   20634:	add	r1, sp, #576	; 0x240
   20638:	strd	r2, [r1]
   2063c:	add	r1, sp, #584	; 0x248
   20640:	strd	r2, [r1]
   20644:	mov	r3, #0
   20648:	str	r3, [sp, #572]	; 0x23c
   2064c:	cmp	r7, r0
   20650:	beq	206cc <_start@@Base+0xe014>
   20654:	str	r1, [sp]
   20658:	add	r3, sp, #572	; 0x23c
   2065c:	mov	r2, r7
   20660:	mov	r1, r0
   20664:	mov	r0, r8
   20668:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   2066c:	mov	fp, r0
   20670:	cmp	sl, r0
   20674:	beq	206cc <_start@@Base+0xe014>
   20678:	add	r3, sp, #584	; 0x248
   2067c:	ldrd	r2, [r3]
   20680:	ldr	r1, [sp, #572]	; 0x23c
   20684:	cmp	r1, #0
   20688:	beq	20708 <_start@@Base+0xe050>
   2068c:	cmp	r3, #-2147483648	; 0x80000000
   20690:	cmpeq	r2, #0
   20694:	bhi	206ac <_start@@Base+0xdff4>
   20698:	rsbs	r2, r2, #0
   2069c:	rsc	r3, r3, #0
   206a0:	add	r1, sp, #576	; 0x240
   206a4:	strd	r2, [r1]
   206a8:	b	2071c <_start@@Base+0xe064>
   206ac:	mov	r3, #8
   206b0:	mov	r2, r7
   206b4:	mov	r1, r0
   206b8:	mov	r0, r8
   206bc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   206c0:	mov	fp, r0
   206c4:	cmp	sl, fp
   206c8:	bne	2071c <_start@@Base+0xe064>
   206cc:	add	r3, sp, #576	; 0x240
   206d0:	str	r3, [sp]
   206d4:	ldr	r3, [sp, #168]	; 0xa8
   206d8:	mov	r2, r7
   206dc:	mov	r1, sl
   206e0:	mov	r0, r8
   206e4:	bl	15a24 <_start@@Base+0x336c>
   206e8:	mov	fp, r0
   206ec:	cmp	r7, r0
   206f0:	cmpne	sl, r0
   206f4:	bne	2071c <_start@@Base+0xe064>
   206f8:	mov	r9, r7
   206fc:	mov	r7, r8
   20700:	mov	r6, fp
   20704:	b	209e0 <_start@@Base+0xe328>
   20708:	cmp	r2, #0
   2070c:	sbcs	r1, r3, #0
   20710:	blt	20764 <_start@@Base+0xe0ac>
   20714:	add	r1, sp, #576	; 0x240
   20718:	strd	r2, [r1]
   2071c:	add	r3, sp, #576	; 0x240
   20720:	ldrd	r2, [r3]
   20724:	orrs	r3, r2, r3
   20728:	bne	20738 <_start@@Base+0xe080>
   2072c:	ldr	r3, [r8, #8]
   20730:	tst	r3, #2
   20734:	beq	207ac <_start@@Base+0xe0f4>
   20738:	mov	r3, #8
   2073c:	mov	r2, r3
   20740:	mov	r1, #0
   20744:	ldr	r0, [r8]
   20748:	bl	25b40 <flatcc_builder_table_add@@Base>
   2074c:	cmp	r0, #0
   20750:	beq	206f8 <_start@@Base+0xe040>
   20754:	add	r3, sp, #576	; 0x240
   20758:	ldrd	r2, [r3]
   2075c:	strd	r2, [r0]
   20760:	b	207ac <_start@@Base+0xe0f4>
   20764:	mov	r3, #7
   20768:	mov	r2, r7
   2076c:	mov	r1, r0
   20770:	mov	r0, r8
   20774:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   20778:	mov	fp, r0
   2077c:	b	206c4 <_start@@Base+0xe00c>
   20780:	mov	r2, r7
   20784:	mov	r1, r0
   20788:	mov	r0, r8
   2078c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20790:	mov	fp, r0
   20794:	b	207ac <_start@@Base+0xe0f4>
   20798:	mov	r2, r7
   2079c:	mov	r1, r0
   207a0:	mov	r0, r8
   207a4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   207a8:	mov	fp, r0
   207ac:	sub	r3, r9, fp
   207b0:	cmp	r3, #1
   207b4:	ble	207c8 <_start@@Base+0xe110>
   207b8:	ldrb	r3, [fp]
   207bc:	cmp	r3, #32
   207c0:	bhi	207dc <_start@@Base+0xe124>
   207c4:	beq	2089c <_start@@Base+0xe1e4>
   207c8:	mov	r2, r7
   207cc:	mov	r1, fp
   207d0:	mov	r0, r8
   207d4:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   207d8:	mov	fp, r0
   207dc:	cmp	r7, fp
   207e0:	moveq	r3, #0
   207e4:	streq	r3, [sp, #568]	; 0x238
   207e8:	moveq	r0, fp
   207ec:	beq	20824 <_start@@Base+0xe16c>
   207f0:	ldrb	r3, [fp]
   207f4:	cmp	r3, #44	; 0x2c
   207f8:	beq	20904 <_start@@Base+0xe24c>
   207fc:	mov	r3, #0
   20800:	str	r3, [sp, #568]	; 0x238
   20804:	ldrb	r3, [fp]
   20808:	cmp	r3, #125	; 0x7d
   2080c:	beq	208bc <_start@@Base+0xe204>
   20810:	mov	r3, #10
   20814:	mov	r2, r7
   20818:	mov	r1, fp
   2081c:	mov	r0, r8
   20820:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   20824:	ldr	r3, [sp, #568]	; 0x238
   20828:	cmp	r3, #0
   2082c:	beq	209a0 <_start@@Base+0xe2e8>
   20830:	cmp	r7, r0
   20834:	beq	20798 <_start@@Base+0xe0e0>
   20838:	ldrb	r3, [r0]
   2083c:	cmp	r3, #34	; 0x22
   20840:	addeq	r0, r0, #1
   20844:	moveq	r3, #0
   20848:	streq	r3, [r8, #12]
   2084c:	beq	20860 <_start@@Base+0xe1a8>
   20850:	cmp	r3, #46	; 0x2e
   20854:	movne	r3, #1
   20858:	strne	r3, [r8, #12]
   2085c:	beq	20120 <_start@@Base+0xda68>
   20860:	sub	r3, r9, r0
   20864:	cmp	r3, #8
   20868:	movcs	r3, #8
   2086c:	sub	r3, r3, #1
   20870:	cmp	r3, #7
   20874:	ldrls	pc, [pc, r3, lsl #2]
   20878:	b	20798 <_start@@Base+0xe0e0>
   2087c:	strdeq	r0, [r2], -r4
   20880:	andeq	r0, r2, r8, ror #5
   20884:	ldrdeq	r0, [r2], -ip
   20888:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2088c:	andeq	r0, r2, r4, asr #5
   20890:			; <UNDEFINED> instruction: 0x000202b8
   20894:	andeq	r0, r2, r4, asr #2
   20898:	andeq	r0, r2, r8, lsr r1
   2089c:	ldrb	r3, [fp, #1]
   208a0:	cmp	r3, #32
   208a4:	addhi	fp, fp, #1
   208a8:	bls	207c8 <_start@@Base+0xe110>
   208ac:	b	207dc <_start@@Base+0xe124>
   208b0:	movwvc	r0, #0
   208b4:	cmnvc	r4, #112, 10	; 0x1c000000
   208b8:	andeq	lr, r3, r8, ror r0
   208bc:	add	r0, fp, #1
   208c0:	sub	r3, r9, r0
   208c4:	cmp	r3, #1
   208c8:	ble	208dc <_start@@Base+0xe224>
   208cc:	ldrb	r3, [fp, #1]
   208d0:	cmp	r3, #32
   208d4:	bhi	20824 <_start@@Base+0xe16c>
   208d8:	beq	208f0 <_start@@Base+0xe238>
   208dc:	mov	r2, r7
   208e0:	mov	r1, r0
   208e4:	mov	r0, r8
   208e8:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   208ec:	b	20824 <_start@@Base+0xe16c>
   208f0:	ldrb	r3, [fp, #2]
   208f4:	cmp	r3, #32
   208f8:	addhi	r0, fp, #2
   208fc:	bls	208dc <_start@@Base+0xe224>
   20900:	b	20824 <_start@@Base+0xe16c>
   20904:	add	r0, fp, #1
   20908:	sub	r3, r9, r0
   2090c:	cmp	r3, #1
   20910:	ble	20924 <_start@@Base+0xe26c>
   20914:	ldrb	r3, [fp, #1]
   20918:	cmp	r3, #32
   2091c:	bhi	20934 <_start@@Base+0xe27c>
   20920:	beq	2096c <_start@@Base+0xe2b4>
   20924:	mov	r2, r7
   20928:	mov	r1, r0
   2092c:	mov	r0, r8
   20930:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   20934:	cmp	r7, r0
   20938:	beq	20980 <_start@@Base+0xe2c8>
   2093c:	ldrb	r3, [r0]
   20940:	cmp	r3, #125	; 0x7d
   20944:	movne	r3, #1
   20948:	strne	r3, [sp, #568]	; 0x238
   2094c:	bne	20824 <_start@@Base+0xe16c>
   20950:	mov	r3, #0
   20954:	str	r3, [sp, #568]	; 0x238
   20958:	mov	r2, r7
   2095c:	add	r1, r0, #1
   20960:	mov	r0, r8
   20964:	bl	1447c <_start@@Base+0x1dc4>
   20968:	b	20824 <_start@@Base+0xe16c>
   2096c:	ldrb	r3, [fp, #2]
   20970:	cmp	r3, #32
   20974:	addhi	r0, fp, #2
   20978:	bls	20924 <_start@@Base+0xe26c>
   2097c:	b	20934 <_start@@Base+0xe27c>
   20980:	mov	r3, #0
   20984:	str	r3, [sp, #568]	; 0x238
   20988:	mov	r3, #10
   2098c:	mov	r2, r7
   20990:	mov	r1, r0
   20994:	mov	r0, r8
   20998:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2099c:	b	20824 <_start@@Base+0xe16c>
   209a0:	mov	r6, r0
   209a4:	mov	sl, r8
   209a8:	ldr	r3, [r8, #24]
   209ac:	cmp	r3, #0
   209b0:	movne	r9, r7
   209b4:	movne	r7, r8
   209b8:	bne	209e0 <_start@@Base+0xe328>
   209bc:	ldr	r0, [r8]
   209c0:	bl	24b94 <flatcc_builder_end_table@@Base>
   209c4:	subs	r4, r0, #0
   209c8:	bne	2189c <_start@@Base+0xf1e4>
   209cc:	mov	r9, r7
   209d0:	mov	r7, r8
   209d4:	b	209e0 <_start@@Base+0xe328>
   209d8:	mov	r9, r7
   209dc:	mov	r7, sl
   209e0:	mov	r3, #33	; 0x21
   209e4:	mov	r2, r9
   209e8:	mov	r1, r6
   209ec:	mov	r0, r7
   209f0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   209f4:	mov	r8, r0
   209f8:	mov	r3, #33	; 0x21
   209fc:	mov	r2, r9
   20a00:	mov	r1, r8
   20a04:	mov	r0, r7
   20a08:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   20a0c:	mov	r6, r0
   20a10:	b	2153c <_start@@Base+0xee84>
   20a14:	mov	r2, r7
   20a18:	mov	r1, r0
   20a1c:	mov	r0, sl
   20a20:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20a24:	mov	r6, r0
   20a28:	b	20a48 <_start@@Base+0xe390>
   20a2c:	mov	r8, r0
   20a30:	b	1eb5c <_start@@Base+0xc4a4>
   20a34:	mov	r2, r7
   20a38:	mov	r1, r0
   20a3c:	mov	r0, sl
   20a40:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20a44:	mov	r6, r0
   20a48:	sub	r3, r9, r6
   20a4c:	cmp	r3, #1
   20a50:	ble	20a64 <_start@@Base+0xe3ac>
   20a54:	ldrb	r3, [r6]
   20a58:	cmp	r3, #32
   20a5c:	bhi	20a78 <_start@@Base+0xe3c0>
   20a60:	beq	20b38 <_start@@Base+0xe480>
   20a64:	mov	r2, r7
   20a68:	mov	r1, r6
   20a6c:	mov	r0, sl
   20a70:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   20a74:	mov	r6, r0
   20a78:	cmp	r7, r6
   20a7c:	moveq	r3, #0
   20a80:	streq	r3, [sp, #564]	; 0x234
   20a84:	moveq	r0, r6
   20a88:	beq	20ac0 <_start@@Base+0xe408>
   20a8c:	ldrb	r3, [r6]
   20a90:	cmp	r3, #44	; 0x2c
   20a94:	beq	20b94 <_start@@Base+0xe4dc>
   20a98:	mov	r3, #0
   20a9c:	str	r3, [sp, #564]	; 0x234
   20aa0:	ldrb	r3, [r6]
   20aa4:	cmp	r3, #125	; 0x7d
   20aa8:	beq	20b4c <_start@@Base+0xe494>
   20aac:	mov	r3, #10
   20ab0:	mov	r2, r7
   20ab4:	mov	r1, r6
   20ab8:	mov	r0, sl
   20abc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   20ac0:	ldr	r3, [sp, #564]	; 0x234
   20ac4:	cmp	r3, #0
   20ac8:	beq	20c30 <_start@@Base+0xe578>
   20acc:	cmp	r7, r0
   20ad0:	beq	20a34 <_start@@Base+0xe37c>
   20ad4:	ldrb	r3, [r0]
   20ad8:	cmp	r3, #34	; 0x22
   20adc:	addeq	r0, r0, #1
   20ae0:	moveq	r3, #0
   20ae4:	streq	r3, [sl, #12]
   20ae8:	beq	20afc <_start@@Base+0xe444>
   20aec:	cmp	r3, #46	; 0x2e
   20af0:	movne	r3, #1
   20af4:	strne	r3, [sl, #12]
   20af8:	beq	1e5a4 <_start@@Base+0xbeec>
   20afc:	sub	r3, r9, r0
   20b00:	cmp	r3, #8
   20b04:	movcs	r3, #8
   20b08:	sub	r3, r3, #1
   20b0c:	cmp	r3, #7
   20b10:	ldrls	pc, [pc, r3, lsl #2]
   20b14:	b	20a34 <_start@@Base+0xe37c>
   20b18:			; <UNDEFINED> instruction: 0x0001e7b4
   20b1c:	andeq	lr, r1, r8, lsr #15
   20b20:	muleq	r1, ip, r7
   20b24:	muleq	r1, r0, r7
   20b28:	andeq	lr, r1, r4, lsl #15
   20b2c:	andeq	lr, r1, r8, ror r7
   20b30:	andeq	lr, r1, r4, lsl #12
   20b34:			; <UNDEFINED> instruction: 0x0001e5bc
   20b38:	ldrb	r3, [r6, #1]
   20b3c:	cmp	r3, #32
   20b40:	addhi	r6, r6, #1
   20b44:	bls	20a64 <_start@@Base+0xe3ac>
   20b48:	b	20a78 <_start@@Base+0xe3c0>
   20b4c:	add	r0, r6, #1
   20b50:	sub	r3, r9, r0
   20b54:	cmp	r3, #1
   20b58:	ble	20b6c <_start@@Base+0xe4b4>
   20b5c:	ldrb	r3, [r6, #1]
   20b60:	cmp	r3, #32
   20b64:	bhi	20ac0 <_start@@Base+0xe408>
   20b68:	beq	20b80 <_start@@Base+0xe4c8>
   20b6c:	mov	r2, r7
   20b70:	mov	r1, r0
   20b74:	mov	r0, sl
   20b78:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   20b7c:	b	20ac0 <_start@@Base+0xe408>
   20b80:	ldrb	r3, [r6, #2]
   20b84:	cmp	r3, #32
   20b88:	addhi	r0, r6, #2
   20b8c:	bls	20b6c <_start@@Base+0xe4b4>
   20b90:	b	20ac0 <_start@@Base+0xe408>
   20b94:	add	r0, r6, #1
   20b98:	sub	r3, r9, r0
   20b9c:	cmp	r3, #1
   20ba0:	ble	20bb4 <_start@@Base+0xe4fc>
   20ba4:	ldrb	r3, [r6, #1]
   20ba8:	cmp	r3, #32
   20bac:	bhi	20bc4 <_start@@Base+0xe50c>
   20bb0:	beq	20bfc <_start@@Base+0xe544>
   20bb4:	mov	r2, r7
   20bb8:	mov	r1, r0
   20bbc:	mov	r0, sl
   20bc0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   20bc4:	cmp	r7, r0
   20bc8:	beq	20c10 <_start@@Base+0xe558>
   20bcc:	ldrb	r3, [r0]
   20bd0:	cmp	r3, #125	; 0x7d
   20bd4:	movne	r3, #1
   20bd8:	strne	r3, [sp, #564]	; 0x234
   20bdc:	bne	20ac0 <_start@@Base+0xe408>
   20be0:	mov	r3, #0
   20be4:	str	r3, [sp, #564]	; 0x234
   20be8:	mov	r2, r7
   20bec:	add	r1, r0, #1
   20bf0:	mov	r0, sl
   20bf4:	bl	1447c <_start@@Base+0x1dc4>
   20bf8:	b	20ac0 <_start@@Base+0xe408>
   20bfc:	ldrb	r3, [r6, #2]
   20c00:	cmp	r3, #32
   20c04:	addhi	r0, r6, #2
   20c08:	bls	20bb4 <_start@@Base+0xe4fc>
   20c0c:	b	20bc4 <_start@@Base+0xe50c>
   20c10:	mov	r3, #0
   20c14:	str	r3, [sp, #564]	; 0x234
   20c18:	mov	r3, #10
   20c1c:	mov	r2, r7
   20c20:	mov	r1, r0
   20c24:	mov	r0, sl
   20c28:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   20c2c:	b	20ac0 <_start@@Base+0xe408>
   20c30:	mov	r8, r0
   20c34:	ldr	r3, [sl, #24]
   20c38:	cmp	r3, #0
   20c3c:	movne	r9, r7
   20c40:	movne	r7, sl
   20c44:	bne	209f8 <_start@@Base+0xe340>
   20c48:	ldr	r0, [sl]
   20c4c:	bl	24b94 <flatcc_builder_end_table@@Base>
   20c50:	subs	r4, r0, #0
   20c54:	bne	218c4 <_start@@Base+0xf20c>
   20c58:	mov	r9, r7
   20c5c:	mov	r7, sl
   20c60:	b	209f8 <_start@@Base+0xe340>
   20c64:	mov	r9, r7
   20c68:	mov	r7, sl
   20c6c:	b	209f8 <_start@@Base+0xe340>
   20c70:	mov	r2, r7
   20c74:	mov	r1, r0
   20c78:	mov	r0, sl
   20c7c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20c80:	mov	r8, r0
   20c84:	b	1e304 <_start@@Base+0xbc4c>
   20c88:	mov	r3, #5
   20c8c:	mov	r2, r7
   20c90:	mov	r1, r6
   20c94:	mov	r0, sl
   20c98:	bl	1467c <_start@@Base+0x1fc4>
   20c9c:	mov	r8, r0
   20ca0:	cmp	r0, r6
   20ca4:	beq	21598 <_start@@Base+0xeee0>
   20ca8:	mov	r1, #10
   20cac:	ldr	r0, [sl]
   20cb0:	bl	24144 <flatcc_builder_start_table@@Base>
   20cb4:	cmp	r0, #0
   20cb8:	bne	2151c <_start@@Base+0xee64>
   20cbc:	add	r3, sp, #584	; 0x248
   20cc0:	str	r3, [sp]
   20cc4:	mov	r3, #5
   20cc8:	mov	r2, r7
   20ccc:	mov	r1, r8
   20cd0:	mov	r0, sl
   20cd4:	bl	2a3ac <flatcc_json_parser_prepare_unions@@Base>
   20cd8:	cmp	r7, r0
   20cdc:	beq	2151c <_start@@Base+0xee64>
   20ce0:	add	r3, sp, #576	; 0x240
   20ce4:	mov	r2, r7
   20ce8:	mov	r1, r8
   20cec:	mov	r0, sl
   20cf0:	bl	15d2c <_start@@Base+0x3674>
   20cf4:	mov	r8, r0
   20cf8:	ldr	r3, [sp, #576]	; 0x240
   20cfc:	cmp	r3, #0
   20d00:	beq	21510 <_start@@Base+0xee58>
   20d04:	ldr	r3, [pc, #-1108]	; 208b8 <_start@@Base+0xe200>
   20d08:	add	r6, r3, #700	; 0x2bc
   20d0c:	b	20fe4 <_start@@Base+0xe92c>
   20d10:	mov	r3, #5
   20d14:	mov	r2, r7
   20d18:	mov	r1, r8
   20d1c:	mov	r0, sl
   20d20:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   20d24:	mov	r8, r0
   20d28:	b	21014 <_start@@Base+0xe95c>
   20d2c:	add	r4, r8, #8
   20d30:	mov	r1, r7
   20d34:	mov	r0, r4
   20d38:	bl	127e0 <_start@@Base+0x128>
   20d3c:	bic	r8, r0, #255	; 0xff
   20d40:	add	r3, pc, #936	; 0x3a8
   20d44:	ldrd	r2, [r3]
   20d48:	cmp	r1, r3
   20d4c:	cmpeq	r8, r2
   20d50:	beq	20d90 <_start@@Base+0xe6d8>
   20d54:	mov	r2, #0
   20d58:	ldr	r3, [pc, #976]	; 21130 <_start@@Base+0xea78>
   20d5c:	and	r0, r0, r2
   20d60:	and	r1, r1, r3
   20d64:	mov	r2, #0
   20d68:	ldr	r3, [pc, #964]	; 21134 <_start@@Base+0xea7c>
   20d6c:	cmp	r1, r3
   20d70:	cmpeq	r0, r2
   20d74:	beq	20e00 <_start@@Base+0xe748>
   20d78:	mov	r2, r7
   20d7c:	mov	r1, r4
   20d80:	mov	r0, sl
   20d84:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20d88:	mov	r1, r0
   20d8c:	b	20fc4 <_start@@Base+0xe90c>
   20d90:	mov	r3, #7
   20d94:	mov	r2, r7
   20d98:	mov	r1, r4
   20d9c:	mov	r0, sl
   20da0:	bl	1467c <_start@@Base+0x1fc4>
   20da4:	mov	r1, r0
   20da8:	cmp	r4, r0
   20dac:	beq	20dec <_start@@Base+0xe734>
   20db0:	ldr	r3, [pc, #912]	; 21148 <_start@@Base+0xea90>
   20db4:	str	r3, [sp, #12]
   20db8:	ldr	r3, [pc, #900]	; 21144 <_start@@Base+0xea8c>
   20dbc:	add	r3, r3, #636	; 0x27c
   20dc0:	str	r3, [sp, #8]
   20dc4:	ldr	r3, [sp, #584]	; 0x248
   20dc8:	str	r3, [sp, #4]
   20dcc:	mov	r3, #3
   20dd0:	str	r3, [sp]
   20dd4:	mov	r3, #1
   20dd8:	mov	r2, r7
   20ddc:	mov	r0, sl
   20de0:	bl	2a5c4 <flatcc_json_parser_union_type@@Base>
   20de4:	mov	r1, r0
   20de8:	b	20fc4 <_start@@Base+0xe90c>
   20dec:	mov	r2, r7
   20df0:	mov	r0, sl
   20df4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20df8:	mov	r1, r0
   20dfc:	b	20fc4 <_start@@Base+0xe90c>
   20e00:	mov	r3, #2
   20e04:	mov	r2, r7
   20e08:	mov	r1, r4
   20e0c:	mov	r0, sl
   20e10:	bl	1467c <_start@@Base+0x1fc4>
   20e14:	mov	r1, r0
   20e18:	cmp	r4, r0
   20e1c:	beq	20e50 <_start@@Base+0xe798>
   20e20:	ldr	r3, [pc, #800]	; 21148 <_start@@Base+0xea90>
   20e24:	str	r3, [sp, #8]
   20e28:	ldr	r3, [sp, #584]	; 0x248
   20e2c:	str	r3, [sp, #4]
   20e30:	mov	r3, #3
   20e34:	str	r3, [sp]
   20e38:	mov	r3, #1
   20e3c:	mov	r2, r7
   20e40:	mov	r0, sl
   20e44:	bl	2a470 <flatcc_json_parser_union@@Base>
   20e48:	mov	r1, r0
   20e4c:	b	20fc4 <_start@@Base+0xe90c>
   20e50:	mov	r2, r7
   20e54:	mov	r0, sl
   20e58:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20e5c:	mov	r1, r0
   20e60:	b	20fc4 <_start@@Base+0xe90c>
   20e64:	add	r8, r8, #8
   20e68:	mov	r1, r7
   20e6c:	mov	r0, r8
   20e70:	bl	127e0 <_start@@Base+0x128>
   20e74:	mov	r2, #0
   20e78:	ldr	r3, [pc, #688]	; 21130 <_start@@Base+0xea78>
   20e7c:	and	r0, r0, r2
   20e80:	and	r1, r1, r3
   20e84:	mov	r2, #0
   20e88:	ldr	r3, [pc, #680]	; 21138 <_start@@Base+0xea80>
   20e8c:	cmp	r1, r3
   20e90:	cmpeq	r0, r2
   20e94:	beq	20eb0 <_start@@Base+0xe7f8>
   20e98:	mov	r2, r7
   20e9c:	mov	r1, r8
   20ea0:	mov	r0, sl
   20ea4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20ea8:	mov	r1, r0
   20eac:	b	20fc4 <_start@@Base+0xe90c>
   20eb0:	mov	r3, #2
   20eb4:	mov	r2, r7
   20eb8:	mov	r1, r8
   20ebc:	mov	r0, sl
   20ec0:	bl	1467c <_start@@Base+0x1fc4>
   20ec4:	cmp	r8, r0
   20ec8:	beq	20f0c <_start@@Base+0xe854>
   20ecc:	ldr	r3, [pc, #628]	; 21148 <_start@@Base+0xea90>
   20ed0:	str	r3, [sp, #12]
   20ed4:	ldr	r3, [pc, #616]	; 21144 <_start@@Base+0xea8c>
   20ed8:	add	r3, r3, #652	; 0x28c
   20edc:	str	r3, [sp, #8]
   20ee0:	ldr	r3, [sp, #584]	; 0x248
   20ee4:	str	r3, [sp, #4]
   20ee8:	mov	r3, #7
   20eec:	str	r3, [sp]
   20ef0:	mov	r3, #3
   20ef4:	mov	r2, r7
   20ef8:	mov	r1, r0
   20efc:	mov	r0, sl
   20f00:	bl	2a5c4 <flatcc_json_parser_union_type@@Base>
   20f04:	mov	r1, r0
   20f08:	b	20fc4 <_start@@Base+0xe90c>
   20f0c:	mov	r2, r7
   20f10:	mov	r1, r0
   20f14:	mov	r0, sl
   20f18:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20f1c:	mov	r1, r0
   20f20:	b	20fc4 <_start@@Base+0xe90c>
   20f24:	mov	r3, #5
   20f28:	mov	r2, r7
   20f2c:	mov	r1, r8
   20f30:	mov	r0, sl
   20f34:	bl	1467c <_start@@Base+0x1fc4>
   20f38:	mov	r1, r0
   20f3c:	cmp	r0, r8
   20f40:	beq	20f74 <_start@@Base+0xe8bc>
   20f44:	ldr	r3, [pc, #508]	; 21148 <_start@@Base+0xea90>
   20f48:	str	r3, [sp, #8]
   20f4c:	ldr	r3, [sp, #584]	; 0x248
   20f50:	str	r3, [sp, #4]
   20f54:	mov	r3, #7
   20f58:	str	r3, [sp]
   20f5c:	mov	r3, #3
   20f60:	mov	r2, r7
   20f64:	mov	r0, sl
   20f68:	bl	2a470 <flatcc_json_parser_union@@Base>
   20f6c:	mov	r1, r0
   20f70:	b	20fc4 <_start@@Base+0xe90c>
   20f74:	mov	r2, r7
   20f78:	mov	r0, sl
   20f7c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20f80:	mov	r1, r0
   20f84:	b	20fc4 <_start@@Base+0xe90c>
   20f88:	add	r3, pc, #360	; 0x168
   20f8c:	ldrd	r2, [r3]
   20f90:	cmp	r1, r3
   20f94:	cmpeq	r0, r2
   20f98:	bhi	21228 <_start@@Base+0xeb70>
   20f9c:	add	r3, pc, #348	; 0x15c
   20fa0:	ldrd	r2, [r3]
   20fa4:	cmp	r1, r3
   20fa8:	cmpeq	r0, r2
   20fac:	beq	2108c <_start@@Base+0xe9d4>
   20fb0:	mov	r2, r7
   20fb4:	mov	r1, r8
   20fb8:	mov	r0, sl
   20fbc:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   20fc0:	mov	r1, r0
   20fc4:	add	r3, sp, #576	; 0x240
   20fc8:	mov	r2, r7
   20fcc:	mov	r0, sl
   20fd0:	bl	18a08 <_start@@Base+0x6350>
   20fd4:	mov	r8, r0
   20fd8:	ldr	r3, [sp, #576]	; 0x240
   20fdc:	cmp	r3, #0
   20fe0:	beq	21510 <_start@@Base+0xee58>
   20fe4:	cmp	r7, r8
   20fe8:	beq	21014 <_start@@Base+0xe95c>
   20fec:	ldrb	r3, [r8]
   20ff0:	cmp	r3, #34	; 0x22
   20ff4:	addeq	r8, r8, #1
   20ff8:	moveq	r3, #0
   20ffc:	streq	r3, [sl, #12]
   21000:	beq	21014 <_start@@Base+0xe95c>
   21004:	cmp	r3, #46	; 0x2e
   21008:	movne	r3, #1
   2100c:	strne	r3, [sl, #12]
   21010:	beq	20d10 <_start@@Base+0xe658>
   21014:	mov	r1, r7
   21018:	mov	r0, r8
   2101c:	bl	127e0 <_start@@Base+0x128>
   21020:	add	r3, pc, #224	; 0xe0
   21024:	ldrd	r2, [r3]
   21028:	cmp	r1, r3
   2102c:	cmpeq	r0, r2
   21030:	bhi	20f88 <_start@@Base+0xe8d0>
   21034:	add	r3, pc, #212	; 0xd4
   21038:	ldrd	r2, [r3]
   2103c:	cmp	r1, r3
   21040:	cmpeq	r0, r2
   21044:	beq	20d2c <_start@@Base+0xe674>
   21048:	add	r3, pc, #200	; 0xc8
   2104c:	ldrd	r2, [r3]
   21050:	cmp	r1, r3
   21054:	cmpeq	r0, r2
   21058:	beq	20e64 <_start@@Base+0xe7ac>
   2105c:	and	r0, r0, #-16777216	; 0xff000000
   21060:	add	r3, pc, #184	; 0xb8
   21064:	ldrd	r2, [r3]
   21068:	cmp	r1, r3
   2106c:	cmpeq	r0, r2
   21070:	beq	20f24 <_start@@Base+0xe86c>
   21074:	mov	r2, r7
   21078:	mov	r1, r8
   2107c:	mov	r0, sl
   21080:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   21084:	mov	r1, r0
   21088:	b	20fc4 <_start@@Base+0xe90c>
   2108c:	add	r4, r8, #8
   21090:	mov	r1, r7
   21094:	mov	r0, r4
   21098:	bl	127e0 <_start@@Base+0x128>
   2109c:	bic	r8, r0, #255	; 0xff
   210a0:	add	r3, pc, #128	; 0x80
   210a4:	ldrd	r2, [r3]
   210a8:	cmp	r1, r3
   210ac:	cmpeq	r8, r2
   210b0:	beq	2114c <_start@@Base+0xea94>
   210b4:	mov	r2, #0
   210b8:	ldr	r3, [pc, #112]	; 21130 <_start@@Base+0xea78>
   210bc:	and	r0, r0, r2
   210c0:	and	r1, r1, r3
   210c4:	mov	r2, #0
   210c8:	ldr	r3, [pc, #108]	; 2113c <_start@@Base+0xea84>
   210cc:	cmp	r1, r3
   210d0:	cmpeq	r0, r2
   210d4:	beq	211c4 <_start@@Base+0xeb0c>
   210d8:	mov	r2, r7
   210dc:	mov	r1, r4
   210e0:	mov	r0, sl
   210e4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   210e8:	mov	r1, r0
   210ec:	b	20fc4 <_start@@Base+0xe90c>
   210f0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   210f4:	cmnvc	r4, #116, 30	; 0x1d0
   210f8:	svcpl	0x00636860
   210fc:			; <UNDEFINED> instruction: 0x6d61696e
   21100:	cmnvs	r3, r5, ror #8
   21104:	cmnvs	r8, #-2147483620	; 0x8000001c
   21108:	cmnvs	r3, r4, ror #8
   2110c:	cmnvs	r8, #-2147483620	; 0x8000001c
   21110:	strbvs	r6, [pc, -r9, ror #28]!
   21114:	cmnvs	lr, r1, ror #8
   21118:	svcvs	0x005f7479
   2111c:	cmnvs	r1, #6464	; 0x1940
   21120:	svcvs	0x00000000
   21124:	cmnvs	r1, #6464	; 0x1940
   21128:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   2112c:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   21130:			; <UNDEFINED> instruction: 0xffff0000
   21134:	cmnvc	r4, #0
   21138:	rsbvc	r0, r5, r0
   2113c:	rsbsvc	r0, r3, #0
   21140:	andeq	r2, r1, r8, lsr #18
   21144:	andeq	lr, r3, r8, ror r0
   21148:			; <UNDEFINED> instruction: 0x000176b0
   2114c:	mov	r3, #7
   21150:	mov	r2, r7
   21154:	mov	r1, r4
   21158:	mov	r0, sl
   2115c:	bl	1467c <_start@@Base+0x1fc4>
   21160:	mov	r1, r0
   21164:	cmp	r4, r0
   21168:	beq	211b0 <_start@@Base+0xeaf8>
   2116c:	ldr	r3, [pc, #-52]	; 21140 <_start@@Base+0xea88>
   21170:	str	r3, [sp, #16]
   21174:	ldr	r3, [pc, #-52]	; 21148 <_start@@Base+0xea90>
   21178:	str	r3, [sp, #12]
   2117c:	ldr	r3, [pc, #-64]	; 21144 <_start@@Base+0xea8c>
   21180:	add	r3, r3, #668	; 0x29c
   21184:	str	r3, [sp, #8]
   21188:	ldr	r3, [sp, #584]	; 0x248
   2118c:	str	r3, [sp, #4]
   21190:	mov	r3, #9
   21194:	str	r3, [sp]
   21198:	mov	r3, #4
   2119c:	mov	r2, r7
   211a0:	mov	r0, sl
   211a4:	bl	2a8b8 <flatcc_json_parser_union_type_vector@@Base>
   211a8:	mov	r1, r0
   211ac:	b	20fc4 <_start@@Base+0xe90c>
   211b0:	mov	r2, r7
   211b4:	mov	r0, sl
   211b8:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   211bc:	mov	r1, r0
   211c0:	b	20fc4 <_start@@Base+0xe90c>
   211c4:	mov	r3, #2
   211c8:	mov	r2, r7
   211cc:	mov	r1, r4
   211d0:	mov	r0, sl
   211d4:	bl	1467c <_start@@Base+0x1fc4>
   211d8:	mov	r1, r0
   211dc:	cmp	r4, r0
   211e0:	beq	21214 <_start@@Base+0xeb5c>
   211e4:	ldr	r3, [pc, #-164]	; 21148 <_start@@Base+0xea90>
   211e8:	str	r3, [sp, #8]
   211ec:	ldr	r3, [sp, #584]	; 0x248
   211f0:	str	r3, [sp, #4]
   211f4:	mov	r3, #9
   211f8:	str	r3, [sp]
   211fc:	mov	r3, #4
   21200:	mov	r2, r7
   21204:	mov	r0, sl
   21208:	bl	2a7e0 <flatcc_json_parser_union_vector@@Base>
   2120c:	mov	r1, r0
   21210:	b	20fc4 <_start@@Base+0xe90c>
   21214:	mov	r2, r7
   21218:	mov	r0, sl
   2121c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   21220:	mov	r1, r0
   21224:	b	20fc4 <_start@@Base+0xe90c>
   21228:	add	r3, pc, #992	; 0x3e0
   2122c:	ldrd	r2, [r3]
   21230:	cmp	r1, r3
   21234:	cmpeq	r0, r2
   21238:	beq	21268 <_start@@Base+0xebb0>
   2123c:	add	r3, pc, #980	; 0x3d4
   21240:	ldrd	r2, [r3]
   21244:	cmp	r1, r3
   21248:	cmpeq	r0, r2
   2124c:	beq	213e0 <_start@@Base+0xed28>
   21250:	mov	r2, r7
   21254:	mov	r1, r8
   21258:	mov	r0, sl
   2125c:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   21260:	mov	r1, r0
   21264:	b	20fc4 <_start@@Base+0xe90c>
   21268:	add	r4, r8, #8
   2126c:	mov	r1, r7
   21270:	mov	r0, r4
   21274:	bl	127e0 <_start@@Base+0x128>
   21278:	add	r3, pc, #928	; 0x3a0
   2127c:	ldrd	r2, [r3]
   21280:	cmp	r1, r3
   21284:	cmpeq	r0, r2
   21288:	beq	212c8 <_start@@Base+0xec10>
   2128c:	ldr	r2, [pc, #940]	; 21640 <_start@@Base+0xef88>
   21290:	mvn	r3, #0
   21294:	and	r0, r0, r2
   21298:	and	r1, r1, r3
   2129c:	add	r3, pc, #900	; 0x384
   212a0:	ldrd	r2, [r3]
   212a4:	cmp	r1, r3
   212a8:	cmpeq	r0, r2
   212ac:	beq	2137c <_start@@Base+0xecc4>
   212b0:	mov	r2, r7
   212b4:	mov	r1, r4
   212b8:	mov	r0, sl
   212bc:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   212c0:	mov	r1, r0
   212c4:	b	20fc4 <_start@@Base+0xe90c>
   212c8:	add	r8, r8, #16
   212cc:	mov	r1, r7
   212d0:	mov	r0, r8
   212d4:	bl	127e0 <_start@@Base+0x128>
   212d8:	mov	r0, #0
   212dc:	bic	r1, r1, #255	; 0xff
   212e0:	add	r3, pc, #840	; 0x348
   212e4:	ldrd	r2, [r3]
   212e8:	cmp	r1, r3
   212ec:	cmpeq	r0, r2
   212f0:	beq	2130c <_start@@Base+0xec54>
   212f4:	mov	r2, r7
   212f8:	mov	r1, r8
   212fc:	mov	r0, sl
   21300:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   21304:	mov	r1, r0
   21308:	b	20fc4 <_start@@Base+0xe90c>
   2130c:	mov	r3, #3
   21310:	mov	r2, r7
   21314:	mov	r1, r8
   21318:	mov	r0, sl
   2131c:	bl	1467c <_start@@Base+0x1fc4>
   21320:	mov	r1, r0
   21324:	cmp	r8, r0
   21328:	beq	21368 <_start@@Base+0xecb0>
   2132c:	ldr	r3, [pc, #784]	; 21644 <_start@@Base+0xef8c>
   21330:	str	r3, [sp, #12]
   21334:	ldr	r3, [pc, #780]	; 21648 <_start@@Base+0xef90>
   21338:	add	r3, r3, #684	; 0x2ac
   2133c:	str	r3, [sp, #8]
   21340:	ldr	r3, [sp, #584]	; 0x248
   21344:	str	r3, [sp, #4]
   21348:	mov	r3, #1
   2134c:	str	r3, [sp]
   21350:	mov	r3, #0
   21354:	mov	r2, r7
   21358:	mov	r0, sl
   2135c:	bl	2a5c4 <flatcc_json_parser_union_type@@Base>
   21360:	mov	r1, r0
   21364:	b	20fc4 <_start@@Base+0xe90c>
   21368:	mov	r2, r7
   2136c:	mov	r0, sl
   21370:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   21374:	mov	r1, r0
   21378:	b	20fc4 <_start@@Base+0xe90c>
   2137c:	mov	r3, #6
   21380:	mov	r2, r7
   21384:	mov	r1, r4
   21388:	mov	r0, sl
   2138c:	bl	1467c <_start@@Base+0x1fc4>
   21390:	mov	r1, r0
   21394:	cmp	r4, r0
   21398:	beq	213cc <_start@@Base+0xed14>
   2139c:	ldr	r3, [pc, #672]	; 21644 <_start@@Base+0xef8c>
   213a0:	str	r3, [sp, #8]
   213a4:	ldr	r3, [sp, #584]	; 0x248
   213a8:	str	r3, [sp, #4]
   213ac:	mov	r3, #1
   213b0:	str	r3, [sp]
   213b4:	mov	r3, #0
   213b8:	mov	r2, r7
   213bc:	mov	r0, sl
   213c0:	bl	2a470 <flatcc_json_parser_union@@Base>
   213c4:	mov	r1, r0
   213c8:	b	20fc4 <_start@@Base+0xe90c>
   213cc:	mov	r2, r7
   213d0:	mov	r0, sl
   213d4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   213d8:	mov	r1, r0
   213dc:	b	20fc4 <_start@@Base+0xe90c>
   213e0:	add	r4, r8, #8
   213e4:	mov	r1, r7
   213e8:	mov	r0, r4
   213ec:	bl	127e0 <_start@@Base+0x128>
   213f0:	mov	r9, r1
   213f4:	ldr	r2, [pc, #580]	; 21640 <_start@@Base+0xef88>
   213f8:	mvn	r3, #0
   213fc:	and	r2, r2, r0
   21400:	and	r3, r3, r1
   21404:	add	r1, pc, #556	; 0x22c
   21408:	ldrd	r0, [r1]
   2140c:	cmp	r3, r1
   21410:	cmpeq	r2, r0
   21414:	beq	21444 <_start@@Base+0xed8c>
   21418:	mov	r8, #0
   2141c:	and	r9, r9, #-16777216	; 0xff000000
   21420:	cmp	r9, #1795162112	; 0x6b000000
   21424:	cmpeq	r8, #0
   21428:	beq	214ac <_start@@Base+0xedf4>
   2142c:	mov	r2, r7
   21430:	mov	r1, r4
   21434:	mov	r0, sl
   21438:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   2143c:	mov	r1, r0
   21440:	b	20fc4 <_start@@Base+0xe90c>
   21444:	mov	r3, #6
   21448:	mov	r2, r7
   2144c:	mov	r1, r4
   21450:	mov	r0, sl
   21454:	bl	1467c <_start@@Base+0x1fc4>
   21458:	mov	r1, r0
   2145c:	cmp	r4, r0
   21460:	beq	21498 <_start@@Base+0xede0>
   21464:	ldr	r3, [pc, #472]	; 21644 <_start@@Base+0xef8c>
   21468:	str	r3, [sp, #12]
   2146c:	str	r6, [sp, #8]
   21470:	ldr	r3, [sp, #584]	; 0x248
   21474:	str	r3, [sp, #4]
   21478:	mov	r3, #5
   2147c:	str	r3, [sp]
   21480:	mov	r3, #2
   21484:	mov	r2, r7
   21488:	mov	r0, sl
   2148c:	bl	2a5c4 <flatcc_json_parser_union_type@@Base>
   21490:	mov	r1, r0
   21494:	b	20fc4 <_start@@Base+0xe90c>
   21498:	mov	r2, r7
   2149c:	mov	r0, sl
   214a0:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   214a4:	mov	r1, r0
   214a8:	b	20fc4 <_start@@Base+0xe90c>
   214ac:	mov	r3, #1
   214b0:	mov	r2, r7
   214b4:	mov	r1, r4
   214b8:	mov	r0, sl
   214bc:	bl	1467c <_start@@Base+0x1fc4>
   214c0:	mov	r1, r0
   214c4:	cmp	r4, r0
   214c8:	beq	214fc <_start@@Base+0xee44>
   214cc:	ldr	r3, [pc, #368]	; 21644 <_start@@Base+0xef8c>
   214d0:	str	r3, [sp, #8]
   214d4:	ldr	r3, [sp, #584]	; 0x248
   214d8:	str	r3, [sp, #4]
   214dc:	mov	r3, #5
   214e0:	str	r3, [sp]
   214e4:	mov	r3, #2
   214e8:	mov	r2, r7
   214ec:	mov	r0, sl
   214f0:	bl	2a470 <flatcc_json_parser_union@@Base>
   214f4:	mov	r1, r0
   214f8:	b	20fc4 <_start@@Base+0xe90c>
   214fc:	mov	r2, r7
   21500:	mov	r0, sl
   21504:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   21508:	mov	r1, r0
   2150c:	b	20fc4 <_start@@Base+0xe90c>
   21510:	ldr	r3, [sl, #24]
   21514:	cmp	r3, #0
   21518:	beq	21554 <_start@@Base+0xee9c>
   2151c:	mov	r9, r7
   21520:	mov	r7, sl
   21524:	mov	r3, #33	; 0x21
   21528:	mov	r2, r9
   2152c:	mov	r1, r8
   21530:	mov	r0, sl
   21534:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   21538:	mov	r6, r0
   2153c:	mov	r3, #33	; 0x21
   21540:	mov	r2, r9
   21544:	mov	r1, r6
   21548:	mov	r0, r7
   2154c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   21550:	b	1de5c <_start@@Base+0xb7a4>
   21554:	ldr	r3, [sp, #584]	; 0x248
   21558:	mov	r2, r7
   2155c:	mov	r1, r8
   21560:	mov	r0, sl
   21564:	bl	2a414 <flatcc_json_parser_finalize_unions@@Base>
   21568:	mov	r8, r0
   2156c:	ldr	r0, [sl]
   21570:	bl	24b94 <flatcc_builder_end_table@@Base>
   21574:	subs	r4, r0, #0
   21578:	beq	2151c <_start@@Base+0xee64>
   2157c:	mov	r1, #1
   21580:	ldr	r0, [sl]
   21584:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   21588:	cmp	r0, #0
   2158c:	beq	21740 <_start@@Base+0xf088>
   21590:	str	r4, [r0]
   21594:	b	1e304 <_start@@Base+0xbc4c>
   21598:	mov	r2, r7
   2159c:	mov	r1, r0
   215a0:	mov	r0, sl
   215a4:	bl	29a9c <flatcc_json_parser_unmatched_symbol@@Base>
   215a8:	mov	r8, r0
   215ac:	b	1e304 <_start@@Base+0xbc4c>
   215b0:	ldrb	r3, [r8, #1]
   215b4:	cmp	r3, #32
   215b8:	addhi	r8, r8, #1
   215bc:	bls	1e320 <_start@@Base+0xbc68>
   215c0:	b	1e334 <_start@@Base+0xbc7c>
   215c4:	add	r6, r8, #1
   215c8:	sub	r3, r7, r6
   215cc:	cmp	r3, #1
   215d0:	ble	215e4 <_start@@Base+0xef2c>
   215d4:	ldrb	r3, [r8, #1]
   215d8:	cmp	r3, #32
   215dc:	bhi	1e380 <_start@@Base+0xbcc8>
   215e0:	beq	215fc <_start@@Base+0xef44>
   215e4:	mov	r2, r7
   215e8:	mov	r1, r6
   215ec:	mov	r0, sl
   215f0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   215f4:	mov	r6, r0
   215f8:	b	1e380 <_start@@Base+0xbcc8>
   215fc:	ldrb	r3, [r8, #2]
   21600:	cmp	r3, #32
   21604:	addhi	r6, r8, #2
   21608:	bls	215e4 <_start@@Base+0xef2c>
   2160c:	b	1e380 <_start@@Base+0xbcc8>
   21610:	svcpl	0x00636861
   21614:			; <UNDEFINED> instruction: 0x6d61696e
   21618:	svcpl	0x006b6963
   2161c:	cmnvc	r9, #1694498816	; 0x65000000
   21620:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   21624:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   21628:	ldrbvs	r0, [r2, #-0]!
   2162c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   21630:	andeq	r0, r0, r0
   21634:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   21638:	rsbvc	r0, r5, r0
   2163c:	blvs	17fe828 <__bss_end__@@Base+0x17c04d4>
   21640:			; <UNDEFINED> instruction: 0xffff0000
   21644:			; <UNDEFINED> instruction: 0x000176b0
   21648:	andeq	lr, r3, r8, ror r0
   2164c:	add	r6, r8, #1
   21650:	sub	r3, r7, r6
   21654:	cmp	r3, #1
   21658:	ble	2166c <_start@@Base+0xefb4>
   2165c:	ldrb	r3, [r8, #1]
   21660:	cmp	r3, #32
   21664:	bhi	21680 <_start@@Base+0xefc8>
   21668:	beq	216bc <_start@@Base+0xf004>
   2166c:	mov	r2, r7
   21670:	mov	r1, r6
   21674:	mov	r0, sl
   21678:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   2167c:	mov	r6, r0
   21680:	cmp	r7, r6
   21684:	beq	216d0 <_start@@Base+0xf018>
   21688:	ldrb	r3, [r6]
   2168c:	cmp	r3, #125	; 0x7d
   21690:	movne	r3, #1
   21694:	strne	r3, [sp, #556]	; 0x22c
   21698:	bne	1e380 <_start@@Base+0xbcc8>
   2169c:	mov	r3, #0
   216a0:	str	r3, [sp, #556]	; 0x22c
   216a4:	mov	r2, r7
   216a8:	add	r1, r6, #1
   216ac:	mov	r0, sl
   216b0:	bl	1447c <_start@@Base+0x1dc4>
   216b4:	mov	r6, r0
   216b8:	b	1e380 <_start@@Base+0xbcc8>
   216bc:	ldrb	r3, [r8, #2]
   216c0:	cmp	r3, #32
   216c4:	addhi	r6, r8, #2
   216c8:	bls	2166c <_start@@Base+0xefb4>
   216cc:	b	21680 <_start@@Base+0xefc8>
   216d0:	mov	r3, #0
   216d4:	str	r3, [sp, #556]	; 0x22c
   216d8:	mov	r3, #10
   216dc:	mov	r2, r7
   216e0:	mov	r1, r6
   216e4:	mov	r0, sl
   216e8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   216ec:	mov	r6, r0
   216f0:	b	1e380 <_start@@Base+0xbcc8>
   216f4:	mov	r9, r7
   216f8:	mov	r7, sl
   216fc:	ldr	r3, [sl, #24]
   21700:	cmp	r3, #0
   21704:	bne	2153c <_start@@Base+0xee84>
   21708:	ldr	r3, [sp, #560]	; 0x230
   2170c:	mov	r2, r9
   21710:	mov	r1, r6
   21714:	mov	r0, sl
   21718:	bl	2a414 <flatcc_json_parser_finalize_unions@@Base>
   2171c:	mov	r6, r0
   21720:	ldr	r0, [sl]
   21724:	bl	24b94 <flatcc_builder_end_table@@Base>
   21728:	ldr	r3, [sp, #632]	; 0x278
   2172c:	str	r0, [r3]
   21730:	cmp	r0, #0
   21734:	beq	2153c <_start@@Base+0xee84>
   21738:	mov	r0, r6
   2173c:	b	1de5c <_start@@Base+0xb7a4>
   21740:	mov	r9, r7
   21744:	mov	r7, sl
   21748:	mov	r6, r8
   2174c:	b	2153c <_start@@Base+0xee84>
   21750:	ldr	r3, [r0, #8]
   21754:	tst	r3, #1
   21758:	bne	21770 <_start@@Base+0xf0b8>
   2175c:	mov	r3, #15
   21760:	mov	r2, r9
   21764:	mov	r1, r6
   21768:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2176c:	b	1de78 <_start@@Base+0xb7c0>
   21770:	mov	r2, r9
   21774:	mov	r1, r6
   21778:	bl	28f68 <flatcc_json_parser_generic_json@@Base>
   2177c:	b	1de78 <_start@@Base+0xb7c0>
   21780:	mov	r3, #33	; 0x21
   21784:	mov	r2, r9
   21788:	mov	r1, r0
   2178c:	mov	r0, r7
   21790:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   21794:	b	1de78 <_start@@Base+0xb7c0>
   21798:	mov	r1, #1
   2179c:	ldr	r0, [r5]
   217a0:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   217a4:	cmp	r0, #0
   217a8:	strne	r4, [r0]
   217ac:	bne	20a48 <_start@@Base+0xe390>
   217b0:	mov	r9, r7
   217b4:	mov	r7, r5
   217b8:	mov	r8, r6
   217bc:	b	209f8 <_start@@Base+0xe340>
   217c0:	add	r3, pc, #296	; 0x128
   217c4:	ldrd	r2, [r3]
   217c8:	cmp	r5, r3
   217cc:	cmpeq	r4, r2
   217d0:	bne	1f858 <_start@@Base+0xd1a0>
   217d4:	mov	r3, #8
   217d8:	mov	r2, r7
   217dc:	mov	r1, r6
   217e0:	ldr	r5, [sp, #168]	; 0xa8
   217e4:	mov	r0, r5
   217e8:	bl	1467c <_start@@Base+0x1fc4>
   217ec:	mov	r4, r0
   217f0:	cmp	r0, r6
   217f4:	beq	1fa80 <_start@@Base+0xd3c8>
   217f8:	add	r3, sp, #592	; 0x250
   217fc:	add	r2, sp, #528	; 0x210
   21800:	ldrd	r0, [r2]
   21804:	strd	r0, [r3, #-8]!
   21808:	mov	r2, r7
   2180c:	mov	r1, r4
   21810:	mov	r0, r5
   21814:	bl	143b4 <_start@@Base+0x1cfc>
   21818:	mov	r6, r0
   2181c:	cmp	r4, r0
   21820:	beq	1fa2c <_start@@Base+0xd374>
   21824:	add	r3, sp, #584	; 0x248
   21828:	ldrd	r2, [r3]
   2182c:	orrs	r3, r2, r3
   21830:	bne	21844 <_start@@Base+0xf18c>
   21834:	ldr	r3, [sp, #168]	; 0xa8
   21838:	ldr	r3, [r3, #8]
   2183c:	tst	r3, #2
   21840:	beq	1f730 <_start@@Base+0xd078>
   21844:	mov	r3, #8
   21848:	mov	r2, r3
   2184c:	mov	r1, #3
   21850:	ldr	r0, [sp, #168]	; 0xa8
   21854:	ldr	r0, [r0]
   21858:	bl	25b40 <flatcc_builder_table_add@@Base>
   2185c:	cmp	r0, #0
   21860:	beq	1fa60 <_start@@Base+0xd3a8>
   21864:	add	r3, sp, #584	; 0x248
   21868:	ldrd	r2, [r3]
   2186c:	strd	r2, [r0]
   21870:	b	1f730 <_start@@Base+0xd078>
   21874:	mov	r1, #0
   21878:	ldr	r0, [sl]
   2187c:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   21880:	cmp	r0, #0
   21884:	strne	r4, [r0]
   21888:	bne	20a48 <_start@@Base+0xe390>
   2188c:	mov	r9, r7
   21890:	mov	r7, sl
   21894:	mov	r8, r6
   21898:	b	209f8 <_start@@Base+0xe340>
   2189c:	mov	r1, #2
   218a0:	ldr	r0, [r8]
   218a4:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   218a8:	cmp	r0, #0
   218ac:	strne	r4, [r0]
   218b0:	bne	20a48 <_start@@Base+0xe390>
   218b4:	mov	r9, r7
   218b8:	mov	r7, r8
   218bc:	mov	r8, r6
   218c0:	b	209f8 <_start@@Base+0xe340>
   218c4:	mov	r1, #0
   218c8:	ldr	r0, [sl]
   218cc:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   218d0:	cmp	r0, #0
   218d4:	strne	r4, [r0]
   218d8:	bne	1e304 <_start@@Base+0xbc4c>
   218dc:	mov	r9, r7
   218e0:	mov	r7, sl
   218e4:	mov	r6, r8
   218e8:	b	2153c <_start@@Base+0xee84>
   218ec:	nop			; (mov r0, r0)
   218f0:	teqcc	r2, r4, lsr r3
   218f4:	rsbvs	r6, r2, #536870918	; 0x20000006
   218f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   218fc:	sub	sp, sp, #12
   21900:	mov	r9, r0
   21904:	mov	r4, r1
   21908:	mov	r5, r2
   2190c:	mov	r8, r3
   21910:	mov	r1, r2
   21914:	mov	r0, r4
   21918:	bl	127e0 <_start@@Base+0x128>
   2191c:	add	r3, pc, #836	; 0x344
   21920:	ldrd	r2, [r3]
   21924:	cmp	r1, r3
   21928:	cmpeq	r0, r2
   2192c:	bhi	21a6c <_start@@Base+0xf3b4>
   21930:	add	r3, pc, #824	; 0x338
   21934:	ldrd	r2, [r3]
   21938:	cmp	r1, r3
   2193c:	cmpeq	r0, r2
   21940:	bhi	219b0 <_start@@Base+0xf2f8>
   21944:	mov	r0, #0
   21948:	bic	r1, r1, #255	; 0xff
   2194c:	add	r3, pc, #804	; 0x324
   21950:	ldrd	r2, [r3]
   21954:	cmp	r1, r3
   21958:	cmpeq	r0, r2
   2195c:	beq	2196c <_start@@Base+0xf2b4>
   21960:	mov	r0, r4
   21964:	add	sp, sp, #12
   21968:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2196c:	sub	r3, r5, r4
   21970:	cmp	r3, #3
   21974:	ble	21960 <_start@@Base+0xf2a8>
   21978:	ldrb	r3, [r4, #3]
   2197c:	cmp	r3, #46	; 0x2e
   21980:	bne	21960 <_start@@Base+0xf2a8>
   21984:	ldr	r3, [sp, #44]	; 0x2c
   21988:	str	r3, [sp, #4]
   2198c:	ldr	r3, [sp, #40]	; 0x28
   21990:	str	r3, [sp]
   21994:	mov	r3, r8
   21998:	mov	r2, r5
   2199c:	add	r1, r4, #4
   219a0:	mov	r0, r9
   219a4:	bl	12da8 <_start@@Base+0x6f0>
   219a8:	mov	r4, r0
   219ac:	b	21960 <_start@@Base+0xf2a8>
   219b0:	mov	r6, #0
   219b4:	bic	r7, r1, #255	; 0xff
   219b8:	add	r3, pc, #704	; 0x2c0
   219bc:	ldrd	r2, [r3]
   219c0:	cmp	r7, r3
   219c4:	cmpeq	r6, r2
   219c8:	beq	21a28 <_start@@Base+0xf370>
   219cc:	and	r0, r0, #-16777216	; 0xff000000
   219d0:	add	r3, pc, #688	; 0x2b0
   219d4:	ldrd	r2, [r3]
   219d8:	cmp	r1, r3
   219dc:	cmpeq	r0, r2
   219e0:	bne	21960 <_start@@Base+0xf2a8>
   219e4:	sub	r3, r5, r4
   219e8:	cmp	r3, #5
   219ec:	ble	21960 <_start@@Base+0xf2a8>
   219f0:	ldrb	r3, [r4, #5]
   219f4:	cmp	r3, #46	; 0x2e
   219f8:	bne	21960 <_start@@Base+0xf2a8>
   219fc:	ldr	r3, [sp, #44]	; 0x2c
   21a00:	str	r3, [sp, #4]
   21a04:	ldr	r3, [sp, #40]	; 0x28
   21a08:	str	r3, [sp]
   21a0c:	mov	r3, r8
   21a10:	mov	r2, r5
   21a14:	add	r1, r4, #6
   21a18:	mov	r0, r9
   21a1c:	bl	136f0 <_start@@Base+0x1038>
   21a20:	mov	r4, r0
   21a24:	b	21960 <_start@@Base+0xf2a8>
   21a28:	sub	r3, r5, r4
   21a2c:	cmp	r3, #3
   21a30:	ble	21960 <_start@@Base+0xf2a8>
   21a34:	ldrb	r3, [r4, #3]
   21a38:	cmp	r3, #46	; 0x2e
   21a3c:	bne	21960 <_start@@Base+0xf2a8>
   21a40:	ldr	r3, [sp, #44]	; 0x2c
   21a44:	str	r3, [sp, #4]
   21a48:	ldr	r3, [sp, #40]	; 0x28
   21a4c:	str	r3, [sp]
   21a50:	mov	r3, r8
   21a54:	mov	r2, r5
   21a58:	add	r1, r4, #4
   21a5c:	mov	r0, r9
   21a60:	bl	13060 <_start@@Base+0x9a8>
   21a64:	mov	r4, r0
   21a68:	b	21960 <_start@@Base+0xf2a8>
   21a6c:	add	r3, pc, #540	; 0x21c
   21a70:	ldrd	r2, [r3]
   21a74:	cmp	r1, r3
   21a78:	cmpeq	r0, r2
   21a7c:	bhi	21ad8 <_start@@Base+0xf420>
   21a80:	add	r3, pc, #528	; 0x210
   21a84:	ldrd	r2, [r3]
   21a88:	cmp	r1, r3
   21a8c:	cmpeq	r0, r2
   21a90:	bne	21960 <_start@@Base+0xf2a8>
   21a94:	sub	r3, r5, r4
   21a98:	cmp	r3, #8
   21a9c:	ble	21960 <_start@@Base+0xf2a8>
   21aa0:	ldrb	r3, [r4, #8]
   21aa4:	cmp	r3, #46	; 0x2e
   21aa8:	bne	21960 <_start@@Base+0xf2a8>
   21aac:	ldr	r3, [sp, #44]	; 0x2c
   21ab0:	str	r3, [sp, #4]
   21ab4:	ldr	r3, [sp, #40]	; 0x28
   21ab8:	str	r3, [sp]
   21abc:	mov	r3, r8
   21ac0:	mov	r2, r5
   21ac4:	add	r1, r4, #9
   21ac8:	mov	r0, r9
   21acc:	bl	131a8 <_start@@Base+0xaf0>
   21ad0:	mov	r4, r0
   21ad4:	b	21960 <_start@@Base+0xf2a8>
   21ad8:	add	r3, pc, #448	; 0x1c0
   21adc:	ldrd	r2, [r3]
   21ae0:	cmp	r1, r3
   21ae4:	cmpeq	r0, r2
   21ae8:	bhi	21b44 <_start@@Base+0xf48c>
   21aec:	add	r3, pc, #436	; 0x1b4
   21af0:	ldrd	r2, [r3]
   21af4:	cmp	r1, r3
   21af8:	cmpeq	r0, r2
   21afc:	bne	21960 <_start@@Base+0xf2a8>
   21b00:	sub	r3, r5, r4
   21b04:	cmp	r3, #8
   21b08:	ble	21960 <_start@@Base+0xf2a8>
   21b0c:	ldrb	r3, [r4, #8]
   21b10:	cmp	r3, #46	; 0x2e
   21b14:	bne	21960 <_start@@Base+0xf2a8>
   21b18:	ldr	r3, [sp, #44]	; 0x2c
   21b1c:	str	r3, [sp, #4]
   21b20:	ldr	r3, [sp, #40]	; 0x28
   21b24:	str	r3, [sp]
   21b28:	mov	r3, r8
   21b2c:	mov	r2, r5
   21b30:	add	r1, r4, #9
   21b34:	mov	r0, r9
   21b38:	bl	1334c <_start@@Base+0xc94>
   21b3c:	mov	r4, r0
   21b40:	b	21960 <_start@@Base+0xf2a8>
   21b44:	add	r3, pc, #356	; 0x164
   21b48:	ldrd	r2, [r3]
   21b4c:	cmp	r1, r3
   21b50:	cmpeq	r0, r2
   21b54:	beq	21c20 <_start@@Base+0xf568>
   21b58:	add	r3, pc, #344	; 0x158
   21b5c:	ldrd	r2, [r3]
   21b60:	cmp	r1, r3
   21b64:	cmpeq	r0, r2
   21b68:	bne	21960 <_start@@Base+0xf2a8>
   21b6c:	add	r6, r4, #8
   21b70:	mov	r1, r5
   21b74:	mov	r0, r6
   21b78:	bl	127e0 <_start@@Base+0x128>
   21b7c:	mov	r0, #0
   21b80:	add	r3, pc, #312	; 0x138
   21b84:	ldrd	r2, [r3]
   21b88:	cmp	r1, r3
   21b8c:	cmpeq	r0, r2
   21b90:	bne	21960 <_start@@Base+0xf2a8>
   21b94:	sub	r3, r5, r6
   21b98:	cmp	r3, #4
   21b9c:	ble	21960 <_start@@Base+0xf2a8>
   21ba0:	ldrb	r3, [r4, #12]
   21ba4:	cmp	r3, #46	; 0x2e
   21ba8:	bne	21960 <_start@@Base+0xf2a8>
   21bac:	add	r7, r4, #13
   21bb0:	cmp	r6, r7
   21bb4:	beq	21960 <_start@@Base+0xf2a8>
   21bb8:	mov	r1, r5
   21bbc:	mov	r0, r7
   21bc0:	bl	127e0 <_start@@Base+0x128>
   21bc4:	mov	r0, #0
   21bc8:	and	r1, r1, #-16777216	; 0xff000000
   21bcc:	cmp	r1, #2013265920	; 0x78000000
   21bd0:	cmpeq	r0, #0
   21bd4:	movne	r4, r7
   21bd8:	bne	21960 <_start@@Base+0xf2a8>
   21bdc:	ldr	r3, [sp, #44]	; 0x2c
   21be0:	str	r3, [sp]
   21be4:	mov	r3, #1
   21be8:	mov	r2, r5
   21bec:	mov	r1, r7
   21bf0:	mov	r0, r9
   21bf4:	bl	28b2c <flatcc_json_parser_match_constant@@Base>
   21bf8:	mov	r4, r0
   21bfc:	cmp	r7, r0
   21c00:	beq	21960 <_start@@Base+0xf2a8>
   21c04:	mov	r2, #0
   21c08:	mov	r3, #0
   21c0c:	ldr	r1, [sp, #40]	; 0x28
   21c10:	strd	r2, [r1]
   21c14:	mov	r3, #0
   21c18:	str	r3, [r8]
   21c1c:	b	21960 <_start@@Base+0xf2a8>
   21c20:	sub	r3, r5, r4
   21c24:	cmp	r3, #8
   21c28:	ble	21960 <_start@@Base+0xf2a8>
   21c2c:	ldrb	r3, [r4, #8]
   21c30:	cmp	r3, #46	; 0x2e
   21c34:	bne	21960 <_start@@Base+0xf2a8>
   21c38:	ldr	r3, [sp, #44]	; 0x2c
   21c3c:	str	r3, [sp, #4]
   21c40:	ldr	r3, [sp, #40]	; 0x28
   21c44:	str	r3, [sp]
   21c48:	mov	r3, r8
   21c4c:	mov	r2, r5
   21c50:	add	r1, r4, #9
   21c54:	mov	r0, r9
   21c58:	bl	1356c <_start@@Base+0xeb4>
   21c5c:	mov	r4, r0
   21c60:	b	21960 <_start@@Base+0xf2a8>
   21c64:	nop			; (mov r0, r0)
   21c68:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   21c6c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   21c70:	ldrshvc	pc, [pc, #255]	; 21d77 <verify_parse@@Base+0xaf>	; <UNPREDICTABLE>
   21c74:	cmnmi	pc, #28416	; 0x6f00
   21c78:	andeq	r0, r0, r0
   21c7c:	cmnmi	lr, r0, lsl #18
   21c80:	andeq	r0, r0, r0
   21c84:	strbtmi	r6, [pc], -r0, lsl #30
   21c88:	andvc	r0, r0, #0
   21c8c:	cmnmi	pc, #28416	; 0x6f00
   21c90:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   21c94:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   21c98:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   21c9c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   21ca0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   21ca4:	mcrvs	7, 3, r6, cr5, cr15, {2}
   21ca8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   21cac:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   21cb0:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   21cb4:	mcrvs	7, 3, r6, cr5, cr15, {2}
   21cb8:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   21cbc:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   21cc0:	andeq	r0, r0, r0
   21cc4:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93

00021cc8 <verify_parse@@Base>:
   21cc8:	push	{r4, lr}
   21ccc:	cmp	r0, #0
   21cd0:	beq	21d9c <verify_parse@@Base+0xd4>
   21cd4:	ldr	r2, [r0, #4]
   21cd8:	ldr	r3, [pc, #412]	; 21e7c <verify_parse@@Base+0x1b4>
   21cdc:	cmp	r2, r3
   21ce0:	bne	21d9c <verify_parse@@Base+0xd4>
   21ce4:	ldr	r2, [r0]
   21ce8:	adds	r3, r0, r2
   21cec:	beq	21d9c <verify_parse@@Base+0xd4>
   21cf0:	ldr	r2, [r0, r2]
   21cf4:	sub	r2, r3, r2
   21cf8:	ldrh	r1, [r2]
   21cfc:	cmp	r1, #5
   21d00:	bls	21db0 <verify_parse@@Base+0xe8>
   21d04:	ldrh	r2, [r2, #4]
   21d08:	cmp	r2, #0
   21d0c:	beq	21db0 <verify_parse@@Base+0xe8>
   21d10:	adds	r3, r3, r2
   21d14:	beq	21db0 <verify_parse@@Base+0xe8>
   21d18:	vldr	s14, [r3]
   21d1c:	vldr	s15, [pc, #332]	; 21e70 <verify_parse@@Base+0x1a8>
   21d20:	vcmp.f32	s14, s15
   21d24:	vmrs	APSR_nzcv, fpscr
   21d28:	bne	21dc4 <verify_parse@@Base+0xfc>
   21d2c:	vldr	s14, [r3, #4]
   21d30:	vldr	s15, [pc, #316]	; 21e74 <verify_parse@@Base+0x1ac>
   21d34:	vcmp.f32	s14, s15
   21d38:	vmrs	APSR_nzcv, fpscr
   21d3c:	bne	21dd8 <verify_parse@@Base+0x110>
   21d40:	vldr	s14, [r3, #8]
   21d44:	vldr	s15, [pc, #300]	; 21e78 <verify_parse@@Base+0x1b0>
   21d48:	vcmp.f32	s14, s15
   21d4c:	vmrs	APSR_nzcv, fpscr
   21d50:	bne	21dec <verify_parse@@Base+0x124>
   21d54:	vldr	d6, [r3, #16]
   21d58:	vldr	d7, [pc, #264]	; 21e68 <verify_parse@@Base+0x1a0>
   21d5c:	vcmp.f64	d6, d7
   21d60:	vmrs	APSR_nzcv, fpscr
   21d64:	bne	21e00 <verify_parse@@Base+0x138>
   21d68:	ldrsb	r2, [r3, #24]
   21d6c:	cmp	r2, #2
   21d70:	bne	21e14 <verify_parse@@Base+0x14c>
   21d74:	cmn	r3, #26
   21d78:	beq	21e28 <verify_parse@@Base+0x160>
   21d7c:	ldrsh	r2, [r3, #26]
   21d80:	cmp	r2, #5
   21d84:	bne	21e3c <verify_parse@@Base+0x174>
   21d88:	ldrsb	r3, [r3, #28]
   21d8c:	cmp	r3, #6
   21d90:	bne	21e50 <verify_parse@@Base+0x188>
   21d94:	mov	r0, #0
   21d98:	pop	{r4, pc}
   21d9c:	ldr	r3, [pc, #220]	; 21e80 <verify_parse@@Base+0x1b8>
   21da0:	mov	r2, #696	; 0x2b8
   21da4:	ldr	r1, [pc, #216]	; 21e84 <verify_parse@@Base+0x1bc>
   21da8:	ldr	r0, [pc, #216]	; 21e88 <verify_parse@@Base+0x1c0>
   21dac:	bl	126a8 <__assert_fail@plt>
   21db0:	ldr	r3, [pc, #212]	; 21e8c <verify_parse@@Base+0x1c4>
   21db4:	mov	r2, #45	; 0x2d
   21db8:	ldr	r1, [pc, #208]	; 21e90 <verify_parse@@Base+0x1c8>
   21dbc:	ldr	r0, [pc, #208]	; 21e94 <verify_parse@@Base+0x1cc>
   21dc0:	bl	126a8 <__assert_fail@plt>
   21dc4:	ldr	r3, [pc, #192]	; 21e8c <verify_parse@@Base+0x1c4>
   21dc8:	mov	r2, #46	; 0x2e
   21dcc:	ldr	r1, [pc, #188]	; 21e90 <verify_parse@@Base+0x1c8>
   21dd0:	ldr	r0, [pc, #188]	; 21e94 <verify_parse@@Base+0x1cc>
   21dd4:	bl	126a8 <__assert_fail@plt>
   21dd8:	ldr	r3, [pc, #172]	; 21e8c <verify_parse@@Base+0x1c4>
   21ddc:	mov	r2, #47	; 0x2f
   21de0:	ldr	r1, [pc, #168]	; 21e90 <verify_parse@@Base+0x1c8>
   21de4:	ldr	r0, [pc, #168]	; 21e94 <verify_parse@@Base+0x1cc>
   21de8:	bl	126a8 <__assert_fail@plt>
   21dec:	ldr	r3, [pc, #152]	; 21e8c <verify_parse@@Base+0x1c4>
   21df0:	mov	r2, #48	; 0x30
   21df4:	ldr	r1, [pc, #148]	; 21e90 <verify_parse@@Base+0x1c8>
   21df8:	ldr	r0, [pc, #148]	; 21e94 <verify_parse@@Base+0x1cc>
   21dfc:	bl	126a8 <__assert_fail@plt>
   21e00:	ldr	r3, [pc, #132]	; 21e8c <verify_parse@@Base+0x1c4>
   21e04:	mov	r2, #49	; 0x31
   21e08:	ldr	r1, [pc, #128]	; 21e90 <verify_parse@@Base+0x1c8>
   21e0c:	ldr	r0, [pc, #128]	; 21e94 <verify_parse@@Base+0x1cc>
   21e10:	bl	126a8 <__assert_fail@plt>
   21e14:	ldr	r3, [pc, #112]	; 21e8c <verify_parse@@Base+0x1c4>
   21e18:	mov	r2, #50	; 0x32
   21e1c:	ldr	r1, [pc, #108]	; 21e90 <verify_parse@@Base+0x1c8>
   21e20:	ldr	r0, [pc, #108]	; 21e94 <verify_parse@@Base+0x1cc>
   21e24:	bl	126a8 <__assert_fail@plt>
   21e28:	ldr	r3, [pc, #92]	; 21e8c <verify_parse@@Base+0x1c4>
   21e2c:	mov	r2, #52	; 0x34
   21e30:	ldr	r1, [pc, #88]	; 21e90 <verify_parse@@Base+0x1c8>
   21e34:	ldr	r0, [pc, #88]	; 21e94 <verify_parse@@Base+0x1cc>
   21e38:	bl	126a8 <__assert_fail@plt>
   21e3c:	ldr	r3, [pc, #72]	; 21e8c <verify_parse@@Base+0x1c4>
   21e40:	mov	r2, #53	; 0x35
   21e44:	ldr	r1, [pc, #68]	; 21e90 <verify_parse@@Base+0x1c8>
   21e48:	ldr	r0, [pc, #68]	; 21e94 <verify_parse@@Base+0x1cc>
   21e4c:	bl	126a8 <__assert_fail@plt>
   21e50:	ldr	r3, [pc, #52]	; 21e8c <verify_parse@@Base+0x1c4>
   21e54:	mov	r2, #54	; 0x36
   21e58:	ldr	r1, [pc, #48]	; 21e90 <verify_parse@@Base+0x1c8>
   21e5c:	ldr	r0, [pc, #48]	; 21e94 <verify_parse@@Base+0x1cc>
   21e60:	bl	126a8 <__assert_fail@plt>
   21e64:	nop			; (mov r0, r0)
   21e68:	andeq	r0, r0, r0
   21e6c:	andmi	r0, r8, r0
   21e70:	svccc	0x00800000
   21e74:	andmi	r0, r0, r0
   21e78:	submi	r0, r0, r0
   21e7c:	movtpl	r4, #61261	; 0xef4d
   21e80:	andeq	fp, r2, r4, ror #12
   21e84:	andeq	fp, r2, r8, lsr #13
   21e88:	andeq	fp, r2, r8, lsl #14
   21e8c:	andeq	fp, r2, r0, lsl #13
   21e90:	andeq	fp, r2, r0, lsr r7
   21e94:	muleq	r2, ip, r0

00021e98 <test_parse@@Base>:
   21e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e9c:	sub	sp, sp, #324	; 0x144
   21ea0:	add	r0, sp, #40	; 0x28
   21ea4:	bl	229e4 <flatcc_builder_init@@Base>
   21ea8:	ldr	r1, [pc, #1004]	; 2229c <test_parse@@Base+0x404>
   21eac:	ldr	r3, [pc, #1004]	; 222a0 <test_parse@@Base+0x408>
   21eb0:	ldr	r0, [r3, #716]	; 0x2cc
   21eb4:	bl	12594 <fopen@plt>
   21eb8:	subs	r6, r0, #0
   21ebc:	beq	22278 <test_parse@@Base+0x3e0>
   21ec0:	mov	r2, #2
   21ec4:	mov	r1, #0
   21ec8:	mov	r0, r6
   21ecc:	bl	12690 <fseek@plt>
   21ed0:	mov	r0, r6
   21ed4:	bl	125b8 <ftell@plt>
   21ed8:	mov	r7, r0
   21edc:	cmp	r0, #10240	; 0x2800
   21ee0:	bhi	2225c <test_parse@@Base+0x3c4>
   21ee4:	mov	r0, r6
   21ee8:	bl	125d0 <rewind@plt>
   21eec:	cmp	r7, #0
   21ef0:	movne	r0, r7
   21ef4:	moveq	r0, #1
   21ef8:	bl	12600 <malloc@plt>
   21efc:	subs	r9, r0, #0
   21f00:	beq	22260 <test_parse@@Base+0x3c8>
   21f04:	mov	r5, #0
   21f08:	mov	r8, #1
   21f0c:	b	21f14 <test_parse@@Base+0x7c>
   21f10:	add	r5, r5, r0
   21f14:	add	r4, r9, r5
   21f18:	mov	r3, r6
   21f1c:	sub	r2, r7, r5
   21f20:	mov	r1, r8
   21f24:	mov	r0, r4
   21f28:	bl	125f4 <fread@plt>
   21f2c:	cmp	r0, #0
   21f30:	bne	21f10 <test_parse@@Base+0x78>
   21f34:	cmp	r7, r5
   21f38:	bne	22260 <test_parse@@Base+0x3c8>
   21f3c:	mov	r0, r6
   21f40:	bl	12678 <fclose@plt>
   21f44:	mov	r2, #44	; 0x2c
   21f48:	mov	r1, #0
   21f4c:	add	r0, sp, #272	; 0x110
   21f50:	bl	12654 <memset@plt>
   21f54:	add	r0, sp, #40	; 0x28
   21f58:	str	r0, [sp, #272]	; 0x110
   21f5c:	str	r9, [sp, #276]	; 0x114
   21f60:	mov	r3, #1
   21f64:	str	r3, [sp, #288]	; 0x120
   21f68:	str	r9, [sp, #300]	; 0x12c
   21f6c:	str	r4, [sp, #304]	; 0x130
   21f70:	str	r9, [sp, #308]	; 0x134
   21f74:	mov	r3, #0
   21f78:	mov	r2, r3
   21f7c:	ldr	r1, [pc, #800]	; 222a4 <test_parse@@Base+0x40c>
   21f80:	bl	23318 <flatcc_builder_start_buffer@@Base>
   21f84:	cmp	r0, #0
   21f88:	bne	21fb0 <test_parse@@Base+0x118>
   21f8c:	add	r3, sp, #20
   21f90:	mov	r2, r4
   21f94:	mov	r1, r9
   21f98:	add	r0, sp, #272	; 0x110
   21f9c:	bl	18b8c <_start@@Base+0x64d4>
   21fa0:	ldr	r3, [sp, #296]	; 0x128
   21fa4:	str	r3, [sp, #8]
   21fa8:	cmp	r3, #0
   21fac:	beq	22004 <test_parse@@Base+0x16c>
   21fb0:	ldr	r3, [pc, #752]	; 222a8 <test_parse@@Base+0x410>
   21fb4:	ldr	r5, [r3]
   21fb8:	ldr	r3, [pc, #736]	; 222a0 <test_parse@@Base+0x408>
   21fbc:	ldr	r6, [r3, #716]	; 0x2cc
   21fc0:	ldr	r7, [sp, #288]	; 0x120
   21fc4:	ldr	r3, [sp, #276]	; 0x114
   21fc8:	ldr	r4, [sp, #308]	; 0x134
   21fcc:	sub	r4, r4, r3
   21fd0:	add	r4, r4, #1
   21fd4:	ldr	r0, [sp, #296]	; 0x128
   21fd8:	bl	27aa8 <flatcc_json_parser_error_string@@Base>
   21fdc:	str	r0, [sp, #4]
   21fe0:	str	r4, [sp]
   21fe4:	mov	r3, r7
   21fe8:	mov	r2, r6
   21fec:	ldr	r1, [pc, #696]	; 222ac <test_parse@@Base+0x414>
   21ff0:	mov	r0, r5
   21ff4:	bl	1263c <fprintf@plt>
   21ff8:	mvn	r3, #0
   21ffc:	str	r3, [sp, #8]
   22000:	b	22240 <test_parse@@Base+0x3a8>
   22004:	ldr	r1, [sp, #20]
   22008:	add	r0, sp, #40	; 0x28
   2200c:	bl	233d0 <flatcc_builder_end_buffer@@Base>
   22010:	cmp	r0, #0
   22014:	beq	21fb0 <test_parse@@Base+0x118>
   22018:	str	r9, [sp, #312]	; 0x138
   2201c:	ldr	r3, [sp, #288]	; 0x120
   22020:	ldr	r2, [pc, #632]	; 222a0 <test_parse@@Base+0x408>
   22024:	ldr	r2, [r2, #716]	; 0x2cc
   22028:	ldr	r1, [pc, #640]	; 222b0 <test_parse@@Base+0x418>
   2202c:	ldr	r0, [pc, #628]	; 222a8 <test_parse@@Base+0x410>
   22030:	ldr	r0, [r0]
   22034:	bl	1263c <fprintf@plt>
   22038:	add	r1, sp, #316	; 0x13c
   2203c:	add	r0, sp, #40	; 0x28
   22040:	bl	26298 <flatcc_builder_finalize_aligned_buffer@@Base>
   22044:	mov	r4, r0
   22048:	str	r0, [sp, #12]
   2204c:	ldr	sl, [sp, #316]	; 0x13c
   22050:	ldr	r3, [pc, #604]	; 222b4 <test_parse@@Base+0x41c>
   22054:	ldr	r7, [r3]
   22058:	ldr	r2, [pc, #600]	; 222b8 <test_parse@@Base+0x420>
   2205c:	ldr	r1, [pc, #600]	; 222bc <test_parse@@Base+0x424>
   22060:	mov	r0, r7
   22064:	bl	1263c <fprintf@plt>
   22068:	cmp	sl, #0
   2206c:	beq	2214c <test_parse@@Base+0x2b4>
   22070:	sub	r8, r4, #1
   22074:	mov	r4, #0
   22078:	mov	fp, #46	; 0x2e
   2207c:	b	220dc <test_parse@@Base+0x244>
   22080:	mov	r2, r4
   22084:	ldr	r1, [pc, #564]	; 222c0 <test_parse@@Base+0x428>
   22088:	mov	r0, r7
   2208c:	bl	1263c <fprintf@plt>
   22090:	ldrb	r2, [r8, #1]
   22094:	ldr	r1, [pc, #552]	; 222c4 <test_parse@@Base+0x42c>
   22098:	mov	r0, r7
   2209c:	bl	1263c <fprintf@plt>
   220a0:	ldrb	r2, [r8, #1]!
   220a4:	sub	r3, r2, #32
   220a8:	uxtb	r3, r3
   220ac:	cmp	r3, #94	; 0x5e
   220b0:	add	r3, sp, #320	; 0x140
   220b4:	add	r3, r3, r6
   220b8:	strbhi	fp, [r3, #-300]	; 0xfffffed4
   220bc:	strbls	r2, [r3, #-300]	; 0xfffffed4
   220c0:	add	r3, sp, #320	; 0x140
   220c4:	add	r6, r3, r6
   220c8:	mov	r3, #0
   220cc:	strb	r3, [r6, #-299]	; 0xfffffed5
   220d0:	add	r4, r4, #1
   220d4:	cmp	sl, r4
   220d8:	beq	22118 <test_parse@@Base+0x280>
   220dc:	ands	r6, r4, #15
   220e0:	bne	22100 <test_parse@@Base+0x268>
   220e4:	cmp	r4, #0
   220e8:	beq	22080 <test_parse@@Base+0x1e8>
   220ec:	add	r2, sp, #20
   220f0:	ldr	r1, [pc, #464]	; 222c8 <test_parse@@Base+0x430>
   220f4:	mov	r0, r7
   220f8:	bl	1263c <fprintf@plt>
   220fc:	b	22080 <test_parse@@Base+0x1e8>
   22100:	tst	r4, #7
   22104:	bne	22090 <test_parse@@Base+0x1f8>
   22108:	mov	r1, r7
   2210c:	mov	r0, #32
   22110:	bl	12684 <fputc@plt>
   22114:	b	22090 <test_parse@@Base+0x1f8>
   22118:	tst	r4, #15
   2211c:	beq	2214c <test_parse@@Base+0x2b4>
   22120:	ldr	sl, [pc, #420]	; 222cc <test_parse@@Base+0x434>
   22124:	mov	r8, #3
   22128:	mov	r6, #1
   2212c:	mov	r3, r7
   22130:	mov	r2, r8
   22134:	mov	r1, r6
   22138:	mov	r0, sl
   2213c:	bl	125e8 <fwrite@plt>
   22140:	add	r4, r4, #1
   22144:	tst	r4, #15
   22148:	bne	2212c <test_parse@@Base+0x294>
   2214c:	add	r2, sp, #20
   22150:	ldr	r1, [pc, #368]	; 222c8 <test_parse@@Base+0x430>
   22154:	mov	r0, r7
   22158:	bl	1263c <fprintf@plt>
   2215c:	ldr	r3, [sp, #316]	; 0x13c
   22160:	mov	r2, r5
   22164:	ldr	r1, [pc, #356]	; 222d0 <test_parse@@Base+0x438>
   22168:	ldr	r0, [pc, #312]	; 222a8 <test_parse@@Base+0x410>
   2216c:	ldr	r0, [r0]
   22170:	bl	1263c <fprintf@plt>
   22174:	ldr	r4, [sp, #12]
   22178:	mov	r0, r4
   2217c:	bl	21cc8 <verify_parse@@Base>
   22180:	ldr	r7, [sp, #316]	; 0x13c
   22184:	ldr	r3, [pc, #296]	; 222b4 <test_parse@@Base+0x41c>
   22188:	ldr	r6, [r3]
   2218c:	ldr	r2, [pc, #320]	; 222d4 <test_parse@@Base+0x43c>
   22190:	ldr	r1, [pc, #320]	; 222d8 <test_parse@@Base+0x440>
   22194:	mov	r0, r6
   22198:	bl	1263c <fprintf@plt>
   2219c:	cmp	r7, #0
   221a0:	beq	22214 <test_parse@@Base+0x37c>
   221a4:	sub	r5, r4, #1
   221a8:	mov	r4, #0
   221ac:	mov	sl, #1
   221b0:	ldr	fp, [pc, #292]	; 222dc <test_parse@@Base+0x444>
   221b4:	ldr	r8, [pc, #292]	; 222e0 <test_parse@@Base+0x448>
   221b8:	b	221ec <test_parse@@Base+0x354>
   221bc:	mov	r3, r6
   221c0:	mov	r2, #4
   221c4:	mov	r1, sl
   221c8:	mov	r0, fp
   221cc:	bl	125e8 <fwrite@plt>
   221d0:	ldrb	r2, [r5, #1]!
   221d4:	mov	r1, r8
   221d8:	mov	r0, r6
   221dc:	bl	1263c <fprintf@plt>
   221e0:	add	r4, r4, #1
   221e4:	cmp	r7, r4
   221e8:	beq	22214 <test_parse@@Base+0x37c>
   221ec:	tst	r4, #15
   221f0:	beq	221bc <test_parse@@Base+0x324>
   221f4:	tst	r4, #7
   221f8:	bne	221d0 <test_parse@@Base+0x338>
   221fc:	mov	r3, r6
   22200:	mov	r2, #3
   22204:	mov	r1, sl
   22208:	ldr	r0, [pc, #188]	; 222cc <test_parse@@Base+0x434>
   2220c:	bl	125e8 <fwrite@plt>
   22210:	b	221d0 <test_parse@@Base+0x338>
   22214:	mov	r3, r6
   22218:	mov	r2, #4
   2221c:	mov	r1, #1
   22220:	ldr	r0, [pc, #188]	; 222e4 <test_parse@@Base+0x44c>
   22224:	bl	125e8 <fwrite@plt>
   22228:	add	r0, sp, #40	; 0x28
   2222c:	bl	22b78 <flatcc_builder_reset@@Base>
   22230:	ldr	r0, [sp, #12]
   22234:	cmp	r0, #0
   22238:	beq	22240 <test_parse@@Base+0x3a8>
   2223c:	bl	263a4 <flatcc_builder_aligned_free@@Base>
   22240:	mov	r0, r9
   22244:	bl	125a0 <free@plt>
   22248:	add	r0, sp, #40	; 0x28
   2224c:	bl	22b8c <flatcc_builder_clear@@Base>
   22250:	ldr	r0, [sp, #8]
   22254:	add	sp, sp, #324	; 0x144
   22258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2225c:	mov	r9, #0
   22260:	mov	r0, r6
   22264:	bl	12678 <fclose@plt>
   22268:	cmp	r9, #0
   2226c:	beq	22278 <test_parse@@Base+0x3e0>
   22270:	mov	r0, r9
   22274:	bl	125a0 <free@plt>
   22278:	ldr	r3, [pc, #32]	; 222a0 <test_parse@@Base+0x408>
   2227c:	ldr	r2, [r3, #716]	; 0x2cc
   22280:	ldr	r1, [pc, #96]	; 222e8 <test_parse@@Base+0x450>
   22284:	ldr	r3, [pc, #28]	; 222a8 <test_parse@@Base+0x410>
   22288:	ldr	r0, [r3]
   2228c:	bl	1263c <fprintf@plt>
   22290:	mvn	r3, #0
   22294:	str	r3, [sp, #8]
   22298:	b	22250 <test_parse@@Base+0x3b8>
   2229c:	andeq	fp, r2, r4, lsl #15
   222a0:	andeq	lr, r3, r8, ror r0
   222a4:	andeq	fp, r2, r8, lsl #15
   222a8:	andeq	lr, r3, r8, asr #6
   222ac:	andeq	fp, r2, ip, ror r8
   222b0:	muleq	r2, r0, r7
   222b4:	andeq	lr, r3, ip, asr #6
   222b8:			; <UNDEFINED> instruction: 0x0002b7b4
   222bc:	ldrdeq	fp, [r2], -r4
   222c0:	andeq	fp, r2, r4, ror #15
   222c4:	andeq	fp, r2, ip, ror #15
   222c8:	ldrdeq	fp, [r2], -ip
   222cc:	strdeq	fp, [r2], -r4
   222d0:	strdeq	fp, [r2], -r8
   222d4:	andeq	fp, r2, ip, asr #15
   222d8:	andeq	fp, r2, ip, lsl r8
   222dc:	andeq	fp, r2, ip, lsr r8
   222e0:	andeq	fp, r2, r4, asr #16
   222e4:	andeq	fp, r2, r0, asr r8
   222e8:	andeq	fp, r2, r8, asr r8

000222ec <main@@Base>:
   222ec:	push	{r4, r5, r6, lr}
   222f0:	mov	r4, r0
   222f4:	mov	r5, r1
   222f8:	ldr	r3, [pc, #84]	; 22354 <main@@Base+0x68>
   222fc:	ldr	r3, [r3]
   22300:	mov	r2, #16
   22304:	mov	r1, #1
   22308:	ldr	r0, [pc, #72]	; 22358 <main@@Base+0x6c>
   2230c:	bl	125e8 <fwrite@plt>
   22310:	sub	r3, r4, #1
   22314:	cmp	r3, #1
   22318:	bhi	22334 <main@@Base+0x48>
   2231c:	cmp	r4, #2
   22320:	ldreq	r2, [r5, #4]
   22324:	ldreq	r3, [pc, #48]	; 2235c <main@@Base+0x70>
   22328:	streq	r2, [r3, #716]	; 0x2cc
   2232c:	bl	21e98 <test_parse@@Base>
   22330:	pop	{r4, r5, r6, pc}
   22334:	ldr	r3, [pc, #24]	; 22354 <main@@Base+0x68>
   22338:	ldr	r3, [r3]
   2233c:	mov	r2, #63	; 0x3f
   22340:	mov	r1, #1
   22344:	ldr	r0, [pc, #20]	; 22360 <main@@Base+0x74>
   22348:	bl	125e8 <fwrite@plt>
   2234c:	mov	r0, #1
   22350:	bl	12624 <exit@plt>
   22354:	andeq	lr, r3, r8, asr #6
   22358:	andeq	fp, r2, ip, lsl #17
   2235c:	andeq	lr, r3, r8, ror r0
   22360:	andeq	fp, r2, r0, lsr #17
   22364:	push	{r4, r5, r6, lr}
   22368:	sub	sp, sp, #8
   2236c:	mov	r4, r0
   22370:	mov	r5, r2
   22374:	ldr	r2, [r0, #28]
   22378:	mov	r3, #1
   2237c:	str	r3, [sp]
   22380:	ldr	r6, [r0, #48]	; 0x30
   22384:	add	r2, r1, r2
   22388:	add	r1, r0, #60	; 0x3c
   2238c:	ldr	r0, [r0, #40]	; 0x28
   22390:	blx	r6
   22394:	cmp	r0, #0
   22398:	bne	223d0 <main@@Base+0xe4>
   2239c:	ldr	r1, [r4, #28]
   223a0:	ldr	r2, [r4, #60]	; 0x3c
   223a4:	add	r2, r2, r1
   223a8:	str	r2, [r4, #16]
   223ac:	ldr	r3, [r4, #64]	; 0x40
   223b0:	sub	r3, r3, r1
   223b4:	cmp	r3, r5
   223b8:	movcs	r3, r5
   223bc:	str	r3, [r4, #24]
   223c0:	ldr	r3, [r4, #32]
   223c4:	str	r5, [r3, #4]
   223c8:	add	sp, sp, #8
   223cc:	pop	{r4, r5, r6, pc}
   223d0:	mvn	r0, #0
   223d4:	b	223c8 <main@@Base+0xdc>

000223d8 <flatcc_builder_default_alloc@@Base>:
   223d8:	push	{r4, r5, r6, r7, r8, lr}
   223dc:	mov	r5, r1
   223e0:	cmp	r2, #0
   223e4:	bne	22408 <flatcc_builder_default_alloc@@Base+0x30>
   223e8:	ldr	r0, [r1]
   223ec:	cmp	r0, #0
   223f0:	beq	224d4 <flatcc_builder_default_alloc@@Base+0xfc>
   223f4:	bl	125a0 <free@plt>
   223f8:	mov	r0, #0
   223fc:	str	r0, [r5]
   22400:	str	r0, [r5, #4]
   22404:	pop	{r4, r5, r6, r7, r8, pc}
   22408:	mov	r6, r3
   2240c:	ldr	r3, [sp, #24]
   22410:	sub	r3, r3, #1
   22414:	cmp	r3, #6
   22418:	ldrls	pc, [pc, r3, lsl #2]
   2241c:	b	224b0 <flatcc_builder_default_alloc@@Base+0xd8>
   22420:	andeq	r2, r2, r4, asr #8
   22424:			; <UNDEFINED> instruction: 0x000224b0
   22428:			; <UNDEFINED> instruction: 0x000224b0
   2242c:	andeq	r2, r2, ip, lsr r4
   22430:			; <UNDEFINED> instruction: 0x000224b8
   22434:			; <UNDEFINED> instruction: 0x000224b0
   22438:	andeq	r2, r2, r8, lsr #9
   2243c:	mov	r4, #288	; 0x120
   22440:	b	22448 <flatcc_builder_default_alloc@@Base+0x70>
   22444:	mov	r4, #256	; 0x100
   22448:	cmp	r4, r2
   2244c:	bcs	2245c <flatcc_builder_default_alloc@@Base+0x84>
   22450:	lsl	r4, r4, #1
   22454:	cmp	r2, r4
   22458:	bhi	22450 <flatcc_builder_default_alloc@@Base+0x78>
   2245c:	ldr	r3, [r5, #4]
   22460:	cmp	r2, r3
   22464:	bhi	22470 <flatcc_builder_default_alloc@@Base+0x98>
   22468:	cmp	r4, r3, lsr #1
   2246c:	bls	224dc <flatcc_builder_default_alloc@@Base+0x104>
   22470:	mov	r1, r4
   22474:	ldr	r0, [r5]
   22478:	bl	125dc <realloc@plt>
   2247c:	subs	r7, r0, #0
   22480:	beq	224e4 <flatcc_builder_default_alloc@@Base+0x10c>
   22484:	cmp	r6, #0
   22488:	beq	22498 <flatcc_builder_default_alloc@@Base+0xc0>
   2248c:	ldr	r0, [r5, #4]
   22490:	cmp	r0, r4
   22494:	bcc	224c0 <flatcc_builder_default_alloc@@Base+0xe8>
   22498:	str	r7, [r5]
   2249c:	str	r4, [r5, #4]
   224a0:	mov	r0, #0
   224a4:	pop	{r4, r5, r6, r7, r8, pc}
   224a8:	mov	r4, #64	; 0x40
   224ac:	b	22448 <flatcc_builder_default_alloc@@Base+0x70>
   224b0:	mov	r4, #32
   224b4:	b	22448 <flatcc_builder_default_alloc@@Base+0x70>
   224b8:	mov	r4, r2
   224bc:	b	2245c <flatcc_builder_default_alloc@@Base+0x84>
   224c0:	sub	r2, r4, r0
   224c4:	mov	r1, #0
   224c8:	add	r0, r7, r0
   224cc:	bl	12654 <memset@plt>
   224d0:	b	22498 <flatcc_builder_default_alloc@@Base+0xc0>
   224d4:	mov	r0, #0
   224d8:	pop	{r4, r5, r6, r7, r8, pc}
   224dc:	mov	r0, #0
   224e0:	pop	{r4, r5, r6, r7, r8, pc}
   224e4:	mvn	r0, #0
   224e8:	pop	{r4, r5, r6, r7, r8, pc}
   224ec:	cmp	r2, #0
   224f0:	bne	22500 <flatcc_builder_default_alloc@@Base+0x128>
   224f4:	ldrh	r2, [r0, #132]	; 0x84
   224f8:	cmp	r2, #0
   224fc:	moveq	r2, #1
   22500:	ldrh	ip, [r1]
   22504:	cmp	ip, #3
   22508:	movls	ip, #4
   2250c:	strhls	ip, [r1]
   22510:	ldrh	ip, [r1]
   22514:	cmp	ip, r2
   22518:	strhcc	r2, [r1]
   2251c:	cmp	r3, #0
   22520:	bne	225dc <flatcc_builder_default_alloc@@Base+0x204>
   22524:	push	{r4, r5, lr}
   22528:	sub	sp, sp, #84	; 0x54
   2252c:	ldr	r4, [r0, #140]	; 0x8c
   22530:	sub	r2, r2, #1
   22534:	ands	r2, r2, r4
   22538:	bne	22548 <flatcc_builder_default_alloc@@Base+0x170>
   2253c:	mov	r0, #0
   22540:	add	sp, sp, #84	; 0x54
   22544:	pop	{r4, r5, pc}
   22548:	str	r2, [sp, #8]
   2254c:	ldr	r3, [pc, #144]	; 225e4 <flatcc_builder_default_alloc@@Base+0x20c>
   22550:	str	r3, [sp, #16]
   22554:	str	r2, [sp, #20]
   22558:	mov	r3, #1
   2255c:	str	r3, [sp, #12]
   22560:	add	r3, r4, r2
   22564:	str	r3, [r0, #140]	; 0x8c
   22568:	cmp	r4, r3
   2256c:	bgt	225b4 <flatcc_builder_default_alloc@@Base+0x1dc>
   22570:	ldr	ip, [r0, #36]	; 0x24
   22574:	str	r2, [sp]
   22578:	ldr	r5, [r0, #44]	; 0x2c
   2257c:	mov	r3, r4
   22580:	mov	r2, #1
   22584:	add	r1, sp, #16
   22588:	mov	r0, ip
   2258c:	blx	r5
   22590:	cmp	r0, #0
   22594:	bne	225c8 <flatcc_builder_default_alloc@@Base+0x1f0>
   22598:	cmn	r4, #1
   2259c:	bne	2253c <flatcc_builder_default_alloc@@Base+0x164>
   225a0:	ldr	r3, [pc, #64]	; 225e8 <flatcc_builder_default_alloc@@Base+0x210>
   225a4:	ldr	r2, [pc, #64]	; 225ec <flatcc_builder_default_alloc@@Base+0x214>
   225a8:	ldr	r1, [pc, #64]	; 225f0 <flatcc_builder_default_alloc@@Base+0x218>
   225ac:	ldr	r0, [pc, #64]	; 225f4 <flatcc_builder_default_alloc@@Base+0x21c>
   225b0:	bl	126a8 <__assert_fail@plt>
   225b4:	ldr	r3, [pc, #60]	; 225f8 <flatcc_builder_default_alloc@@Base+0x220>
   225b8:	ldr	r2, [pc, #60]	; 225fc <flatcc_builder_default_alloc@@Base+0x224>
   225bc:	ldr	r1, [pc, #44]	; 225f0 <flatcc_builder_default_alloc@@Base+0x218>
   225c0:	ldr	r0, [pc, #44]	; 225f4 <flatcc_builder_default_alloc@@Base+0x21c>
   225c4:	bl	126a8 <__assert_fail@plt>
   225c8:	ldr	r3, [pc, #40]	; 225f8 <flatcc_builder_default_alloc@@Base+0x220>
   225cc:	ldr	r2, [pc, #44]	; 22600 <flatcc_builder_default_alloc@@Base+0x228>
   225d0:	ldr	r1, [pc, #24]	; 225f0 <flatcc_builder_default_alloc@@Base+0x218>
   225d4:	ldr	r0, [pc, #24]	; 225f4 <flatcc_builder_default_alloc@@Base+0x21c>
   225d8:	bl	126a8 <__assert_fail@plt>
   225dc:	mov	r0, #0
   225e0:	bx	lr
   225e4:	strdeq	fp, [r2], -r8
   225e8:	andeq	fp, r2, r4, lsl #22
   225ec:			; <UNDEFINED> instruction: 0x000002be
   225f0:	andeq	ip, r2, r8, asr #32
   225f4:	muleq	r2, ip, r0
   225f8:	strdeq	fp, [r2], -r8
   225fc:	andeq	r0, r0, r1, lsr #5
   22600:	andeq	r0, r0, r5, lsr #5
   22604:	push	{r4, r5, r6, r7, lr}
   22608:	sub	sp, sp, #12
   2260c:	mov	r4, r0
   22610:	mov	r6, r1
   22614:	ldr	r3, [r0, #156]	; 0x9c
   22618:	add	r2, r3, #1
   2261c:	str	r2, [r0, #156]	; 0x9c
   22620:	ldr	r1, [r0, #160]	; 0xa0
   22624:	cmp	r2, r1
   22628:	ble	226c8 <flatcc_builder_default_alloc@@Base+0x2f0>
   2262c:	ldr	r1, [r0, #176]	; 0xb0
   22630:	cmp	r2, r1
   22634:	cmpgt	r1, #0
   22638:	bgt	22730 <flatcc_builder_default_alloc@@Base+0x358>
   2263c:	add	r3, r3, r3, lsl #3
   22640:	lsl	r5, r3, #2
   22644:	add	r2, r5, #36	; 0x24
   22648:	ldr	r3, [r0, #88]	; 0x58
   2264c:	cmp	r2, r3
   22650:	bhi	22690 <flatcc_builder_default_alloc@@Base+0x2b8>
   22654:	ldr	r3, [r4, #84]	; 0x54
   22658:	add	r5, r3, r5
   2265c:	str	r5, [r4, #32]
   22660:	cmp	r5, #0
   22664:	beq	22738 <flatcc_builder_default_alloc@@Base+0x360>
   22668:	ldr	r3, [r4, #88]	; 0x58
   2266c:	ldr	r2, [pc, #204]	; 22740 <flatcc_builder_default_alloc@@Base+0x368>
   22670:	umull	r2, r3, r2, r3
   22674:	lsr	r3, r3, #3
   22678:	str	r3, [r4, #160]	; 0xa0
   2267c:	ldr	r2, [r4, #176]	; 0xb0
   22680:	cmp	r2, #0
   22684:	cmpgt	r3, r2
   22688:	strgt	r2, [r4, #160]	; 0xa0
   2268c:	b	226d4 <flatcc_builder_default_alloc@@Base+0x2fc>
   22690:	mov	r3, #4
   22694:	str	r3, [sp]
   22698:	ldr	r7, [r0, #48]	; 0x30
   2269c:	mov	r3, #0
   226a0:	add	r1, r0, #84	; 0x54
   226a4:	ldr	r0, [r0, #40]	; 0x28
   226a8:	blx	r7
   226ac:	cmp	r0, #0
   226b0:	beq	22654 <flatcc_builder_default_alloc@@Base+0x27c>
   226b4:	ldr	r3, [pc, #136]	; 22744 <flatcc_builder_default_alloc@@Base+0x36c>
   226b8:	mov	r2, #308	; 0x134
   226bc:	ldr	r1, [pc, #132]	; 22748 <flatcc_builder_default_alloc@@Base+0x370>
   226c0:	ldr	r0, [pc, #132]	; 2274c <flatcc_builder_default_alloc@@Base+0x374>
   226c4:	bl	126a8 <__assert_fail@plt>
   226c8:	ldr	r3, [r0, #32]
   226cc:	add	r3, r3, #36	; 0x24
   226d0:	str	r3, [r0, #32]
   226d4:	ldr	r3, [r4, #32]
   226d8:	ldr	r2, [r4, #20]
   226dc:	str	r2, [r3, #8]
   226e0:	ldr	r3, [r4, #32]
   226e4:	ldrh	r2, [r4, #130]	; 0x82
   226e8:	strh	r2, [r3, #12]
   226ec:	strh	r6, [r4, #130]	; 0x82
   226f0:	ldr	r3, [r4, #32]
   226f4:	ldr	r2, [r4, #28]
   226f8:	str	r2, [r3]
   226fc:	ldr	r3, [r4, #32]
   22700:	mvn	r2, #3
   22704:	str	r2, [r3, #4]
   22708:	ldr	r3, [r4, #28]
   2270c:	ldr	r2, [r4, #20]
   22710:	add	r3, r3, r2
   22714:	add	r3, r3, #7
   22718:	bic	r3, r3, #7
   2271c:	str	r3, [r4, #28]
   22720:	mov	r0, #0
   22724:	str	r0, [r4, #20]
   22728:	add	sp, sp, #12
   2272c:	pop	{r4, r5, r6, r7, pc}
   22730:	mvn	r0, #0
   22734:	b	22728 <flatcc_builder_default_alloc@@Base+0x350>
   22738:	mvn	r0, #0
   2273c:	b	22728 <flatcc_builder_default_alloc@@Base+0x350>
   22740:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   22744:	andeq	fp, r2, r4, lsl fp
   22748:	andeq	ip, r2, r8, asr #32
   2274c:	muleq	r2, ip, r0
   22750:	push	{r4, r5, r6, r7, r8, lr}
   22754:	sub	sp, sp, #88	; 0x58
   22758:	cmn	r2, #-1073741823	; 0xc0000001
   2275c:	bhi	22910 <flatcc_builder_default_alloc@@Base+0x538>
   22760:	ldrh	ip, [r0, #128]	; 0x80
   22764:	cmp	ip, #3
   22768:	movls	ip, #4
   2276c:	strhls	ip, [r0, #128]	; 0x80
   22770:	str	r2, [sp, #84]	; 0x54
   22774:	ldr	r7, [r0, #136]	; 0x88
   22778:	and	lr, r7, #3
   2277c:	mov	ip, #4
   22780:	str	ip, [sp, #12]
   22784:	add	r4, sp, #84	; 0x54
   22788:	str	r4, [sp, #20]
   2278c:	str	ip, [sp, #24]
   22790:	mov	ip, #1
   22794:	str	ip, [sp, #16]
   22798:	lsls	r5, r2, #2
   2279c:	beq	227b8 <flatcc_builder_default_alloc@@Base+0x3e0>
   227a0:	add	ip, r5, #4
   227a4:	str	ip, [sp, #12]
   227a8:	str	r1, [sp, #28]
   227ac:	str	r5, [sp, #32]
   227b0:	mov	ip, #2
   227b4:	str	ip, [sp, #16]
   227b8:	cmp	lr, #0
   227bc:	beq	227ec <flatcc_builder_default_alloc@@Base+0x414>
   227c0:	ldr	ip, [sp, #12]
   227c4:	add	ip, ip, lr
   227c8:	str	ip, [sp, #12]
   227cc:	ldr	ip, [sp, #16]
   227d0:	add	ip, ip, #1
   227d4:	add	r4, sp, #88	; 0x58
   227d8:	add	r4, r4, ip, lsl #3
   227dc:	ldr	r6, [pc, #308]	; 22918 <flatcc_builder_default_alloc@@Base+0x540>
   227e0:	str	r6, [r4, #-76]	; 0xffffffb4
   227e4:	str	lr, [r4, #-72]	; 0xffffffb8
   227e8:	str	ip, [sp, #16]
   227ec:	mov	r6, r0
   227f0:	ldr	r8, [sp, #12]
   227f4:	sub	r7, r7, r8
   227f8:	cmp	r2, #0
   227fc:	beq	228a4 <flatcc_builder_default_alloc@@Base+0x4cc>
   22800:	mov	r2, r1
   22804:	mov	ip, r3
   22808:	add	r5, r1, r5
   2280c:	mvn	r1, #3
   22810:	b	2283c <flatcc_builder_default_alloc@@Base+0x464>
   22814:	cmp	r3, #0
   22818:	beq	22890 <flatcc_builder_default_alloc@@Base+0x4b8>
   2281c:	ldrb	r0, [ip]
   22820:	cmp	r0, #0
   22824:	bne	2287c <flatcc_builder_default_alloc@@Base+0x4a4>
   22828:	add	r2, r2, #4
   2282c:	add	ip, ip, #1
   22830:	sub	r1, r1, #4
   22834:	cmp	r2, r5
   22838:	beq	228a4 <flatcc_builder_default_alloc@@Base+0x4cc>
   2283c:	ldr	lr, [r2]
   22840:	cmp	lr, #0
   22844:	beq	22814 <flatcc_builder_default_alloc@@Base+0x43c>
   22848:	sub	r4, r1, r7
   2284c:	add	lr, r4, lr
   22850:	str	lr, [r2]
   22854:	cmp	r3, #0
   22858:	beq	22828 <flatcc_builder_default_alloc@@Base+0x450>
   2285c:	ldrb	r0, [ip]
   22860:	cmp	r0, #0
   22864:	bne	22828 <flatcc_builder_default_alloc@@Base+0x450>
   22868:	ldr	r3, [pc, #172]	; 2291c <flatcc_builder_default_alloc@@Base+0x544>
   2286c:	ldr	r2, [pc, #172]	; 22920 <flatcc_builder_default_alloc@@Base+0x548>
   22870:	ldr	r1, [pc, #172]	; 22924 <flatcc_builder_default_alloc@@Base+0x54c>
   22874:	ldr	r0, [pc, #172]	; 22928 <flatcc_builder_default_alloc@@Base+0x550>
   22878:	bl	126a8 <__assert_fail@plt>
   2287c:	ldr	r3, [pc, #152]	; 2291c <flatcc_builder_default_alloc@@Base+0x544>
   22880:	ldr	r2, [pc, #164]	; 2292c <flatcc_builder_default_alloc@@Base+0x554>
   22884:	ldr	r1, [pc, #152]	; 22924 <flatcc_builder_default_alloc@@Base+0x54c>
   22888:	ldr	r0, [pc, #160]	; 22930 <flatcc_builder_default_alloc@@Base+0x558>
   2288c:	bl	126a8 <__assert_fail@plt>
   22890:	ldr	r3, [pc, #132]	; 2291c <flatcc_builder_default_alloc@@Base+0x544>
   22894:	ldr	r2, [pc, #152]	; 22934 <flatcc_builder_default_alloc@@Base+0x55c>
   22898:	ldr	r1, [pc, #132]	; 22924 <flatcc_builder_default_alloc@@Base+0x54c>
   2289c:	ldr	r0, [pc, #148]	; 22938 <flatcc_builder_default_alloc@@Base+0x560>
   228a0:	bl	126a8 <__assert_fail@plt>
   228a4:	ldr	r3, [r6, #136]	; 0x88
   228a8:	sub	r4, r3, r8
   228ac:	cmp	r3, r4
   228b0:	ble	228e8 <flatcc_builder_default_alloc@@Base+0x510>
   228b4:	str	r8, [sp]
   228b8:	ldr	r5, [r6, #44]	; 0x2c
   228bc:	mov	r3, r4
   228c0:	ldr	r2, [sp, #16]
   228c4:	add	r1, sp, #20
   228c8:	ldr	r0, [r6, #36]	; 0x24
   228cc:	blx	r5
   228d0:	cmp	r0, #0
   228d4:	streq	r4, [r6, #136]	; 0x88
   228d8:	bne	228fc <flatcc_builder_default_alloc@@Base+0x524>
   228dc:	mov	r0, r4
   228e0:	add	sp, sp, #88	; 0x58
   228e4:	pop	{r4, r5, r6, r7, r8, pc}
   228e8:	ldr	r3, [pc, #76]	; 2293c <flatcc_builder_default_alloc@@Base+0x564>
   228ec:	ldr	r2, [pc, #76]	; 22940 <flatcc_builder_default_alloc@@Base+0x568>
   228f0:	ldr	r1, [pc, #44]	; 22924 <flatcc_builder_default_alloc@@Base+0x54c>
   228f4:	ldr	r0, [pc, #60]	; 22938 <flatcc_builder_default_alloc@@Base+0x560>
   228f8:	bl	126a8 <__assert_fail@plt>
   228fc:	ldr	r3, [pc, #56]	; 2293c <flatcc_builder_default_alloc@@Base+0x564>
   22900:	ldr	r2, [pc, #60]	; 22944 <flatcc_builder_default_alloc@@Base+0x56c>
   22904:	ldr	r1, [pc, #24]	; 22924 <flatcc_builder_default_alloc@@Base+0x54c>
   22908:	ldr	r0, [pc, #40]	; 22938 <flatcc_builder_default_alloc@@Base+0x560>
   2290c:	bl	126a8 <__assert_fail@plt>
   22910:	mov	r4, #0
   22914:	b	228dc <flatcc_builder_default_alloc@@Base+0x504>
   22918:	strdeq	fp, [r2], -r8
   2291c:	andeq	fp, r2, r4, lsr #22
   22920:			; <UNDEFINED> instruction: 0x000005b1
   22924:	andeq	ip, r2, r8, asr #32
   22928:	muleq	r2, r0, r0
   2292c:			; <UNDEFINED> instruction: 0x000005b5
   22930:	andeq	ip, r2, r0, lsr #1
   22934:			; <UNDEFINED> instruction: 0x000005b7
   22938:	muleq	r2, ip, r0
   2293c:	andeq	fp, r2, r4, asr #22
   22940:	andeq	r0, r0, r7, lsl #5
   22944:	andeq	r0, r0, fp, lsl #5

00022948 <flatcc_builder_flush_vtable_cache@@Base>:
   22948:	ldr	r3, [r0, #116]	; 0x74
   2294c:	cmp	r3, #0
   22950:	bxeq	lr
   22954:	push	{r4, lr}
   22958:	mov	r4, r0
   2295c:	ldr	r2, [r0, #96]	; 0x60
   22960:	mov	r1, #0
   22964:	ldr	r0, [r0, #92]	; 0x5c
   22968:	bl	12654 <memset@plt>
   2296c:	mov	r3, #16
   22970:	str	r3, [r4, #124]	; 0x7c
   22974:	mov	r3, #0
   22978:	str	r3, [r4, #120]	; 0x78
   2297c:	pop	{r4, pc}

00022980 <flatcc_builder_custom_init@@Base>:
   22980:	push	{r4, r5, r6, r7, r8, lr}
   22984:	mov	r4, r0
   22988:	mov	r6, r1
   2298c:	mov	r7, r2
   22990:	mov	r5, r3
   22994:	mov	r2, #232	; 0xe8
   22998:	mov	r1, #0
   2299c:	bl	12654 <memset@plt>
   229a0:	cmp	r6, #0
   229a4:	moveq	r3, #1
   229a8:	streq	r3, [r4, #184]	; 0xb8
   229ac:	addeq	r7, r4, #188	; 0xbc
   229b0:	ldreq	r6, [pc, #36]	; 229dc <flatcc_builder_custom_init@@Base+0x5c>
   229b4:	ldr	r3, [pc, #36]	; 229e0 <flatcc_builder_custom_init@@Base+0x60>
   229b8:	cmp	r5, #0
   229bc:	moveq	r5, r3
   229c0:	ldr	r3, [sp, #24]
   229c4:	str	r3, [r4, #40]	; 0x28
   229c8:	str	r5, [r4, #48]	; 0x30
   229cc:	str	r7, [r4, #36]	; 0x24
   229d0:	str	r6, [r4, #44]	; 0x2c
   229d4:	mov	r0, #0
   229d8:	pop	{r4, r5, r6, r7, r8, pc}
   229dc:	andeq	r6, r2, r8, asr r5
   229e0:	ldrdeq	r2, [r2], -r8

000229e4 <flatcc_builder_init@@Base>:
   229e4:	push	{r4, lr}
   229e8:	mov	r4, r0
   229ec:	mov	r2, #232	; 0xe8
   229f0:	mov	r1, #0
   229f4:	bl	12654 <memset@plt>
   229f8:	mov	r3, #1
   229fc:	str	r3, [r4, #184]	; 0xb8
   22a00:	ldr	r3, [pc, #24]	; 22a20 <flatcc_builder_init@@Base+0x3c>
   22a04:	str	r3, [r4, #48]	; 0x30
   22a08:	add	r3, r4, #188	; 0xbc
   22a0c:	str	r3, [r4, #36]	; 0x24
   22a10:	ldr	r3, [pc, #12]	; 22a24 <flatcc_builder_init@@Base+0x40>
   22a14:	str	r3, [r4, #44]	; 0x2c
   22a18:	mov	r0, #0
   22a1c:	pop	{r4, pc}
   22a20:	ldrdeq	r2, [r2], -r8
   22a24:	andeq	r6, r2, r8, asr r5

00022a28 <flatcc_builder_custom_reset@@Base>:
   22a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a2c:	sub	sp, sp, #12
   22a30:	mov	r6, r0
   22a34:	mov	fp, r1
   22a38:	mov	r8, r2
   22a3c:	mov	r4, r0
   22a40:	mov	r5, #0
   22a44:	mov	r9, r5
   22a48:	mov	sl, #1
   22a4c:	b	22a70 <flatcc_builder_custom_reset@@Base+0x48>
   22a50:	ldr	r2, [r7, #56]	; 0x38
   22a54:	mov	r1, r9
   22a58:	ldr	r0, [r7, #52]	; 0x34
   22a5c:	bl	12654 <memset@plt>
   22a60:	add	r5, r5, #1
   22a64:	add	r4, r4, #8
   22a68:	cmp	r5, #8
   22a6c:	beq	22ad8 <flatcc_builder_custom_reset@@Base+0xb0>
   22a70:	add	r1, r4, #52	; 0x34
   22a74:	mov	r7, r4
   22a78:	ldr	r3, [r4, #52]	; 0x34
   22a7c:	cmp	r3, #0
   22a80:	beq	22ab8 <flatcc_builder_custom_reset@@Base+0x90>
   22a84:	cmp	r5, #5
   22a88:	cmpne	r8, #0
   22a8c:	beq	22a50 <flatcc_builder_custom_reset@@Base+0x28>
   22a90:	str	r5, [sp]
   22a94:	mov	r3, sl
   22a98:	mov	r2, sl
   22a9c:	ldr	r0, [r6, #40]	; 0x28
   22aa0:	ldr	ip, [r6, #48]	; 0x30
   22aa4:	blx	ip
   22aa8:	cmp	r0, #0
   22aac:	beq	22a50 <flatcc_builder_custom_reset@@Base+0x28>
   22ab0:	mvn	r0, #0
   22ab4:	b	22b50 <flatcc_builder_custom_reset@@Base+0x128>
   22ab8:	ldr	r3, [r4, #56]	; 0x38
   22abc:	cmp	r3, #0
   22ac0:	beq	22a60 <flatcc_builder_custom_reset@@Base+0x38>
   22ac4:	ldr	r3, [pc, #156]	; 22b68 <flatcc_builder_custom_reset@@Base+0x140>
   22ac8:	ldr	r2, [pc, #156]	; 22b6c <flatcc_builder_custom_reset@@Base+0x144>
   22acc:	ldr	r1, [pc, #156]	; 22b70 <flatcc_builder_custom_reset@@Base+0x148>
   22ad0:	ldr	r0, [pc, #156]	; 22b74 <flatcc_builder_custom_reset@@Base+0x14c>
   22ad4:	bl	126a8 <__assert_fail@plt>
   22ad8:	mov	r3, #0
   22adc:	str	r3, [r6, #120]	; 0x78
   22ae0:	ldr	r3, [r6, #124]	; 0x7c
   22ae4:	cmp	r3, #0
   22ae8:	movne	r3, #16
   22aec:	strne	r3, [r6, #124]	; 0x7c
   22af0:	mov	r3, #0
   22af4:	strh	r3, [r6, #128]	; 0x80
   22af8:	str	r3, [r6, #136]	; 0x88
   22afc:	str	r3, [r6, #140]	; 0x8c
   22b00:	str	r3, [r6, #156]	; 0x9c
   22b04:	str	r3, [r6, #160]	; 0xa0
   22b08:	str	r3, [r6, #20]
   22b0c:	str	r3, [r6, #24]
   22b10:	str	r3, [r6, #148]	; 0x94
   22b14:	str	r3, [r6, #152]	; 0x98
   22b18:	ldr	r2, [r6, #60]	; 0x3c
   22b1c:	str	r2, [r6, #16]
   22b20:	ldr	r2, [r6, #76]	; 0x4c
   22b24:	str	r2, [r6]
   22b28:	ldr	r2, [r6, #52]	; 0x34
   22b2c:	str	r2, [r6, #4]
   22b30:	str	r3, [r6, #32]
   22b34:	cmp	fp, r3
   22b38:	strne	r3, [r6, #172]	; 0xac
   22b3c:	strne	r3, [r6, #176]	; 0xb0
   22b40:	strne	r3, [r6, #180]	; 0xb4
   22b44:	ldr	r0, [r6, #184]	; 0xb8
   22b48:	cmp	r0, #0
   22b4c:	bne	22b58 <flatcc_builder_custom_reset@@Base+0x130>
   22b50:	add	sp, sp, #12
   22b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b58:	add	r0, r6, #188	; 0xbc
   22b5c:	bl	26420 <flatcc_emitter_reset@@Base>
   22b60:	mov	r0, #0
   22b64:	b	22b50 <flatcc_builder_custom_reset@@Base+0x128>
   22b68:	andeq	fp, r2, r0, asr fp
   22b6c:			; <UNDEFINED> instruction: 0x000001b2
   22b70:	andeq	ip, r2, r8, asr #32
   22b74:	strheq	ip, [r2], -r0

00022b78 <flatcc_builder_reset@@Base>:
   22b78:	push	{r4, lr}
   22b7c:	mov	r2, #0
   22b80:	mov	r1, r2
   22b84:	bl	22a28 <flatcc_builder_custom_reset@@Base>
   22b88:	pop	{r4, pc}

00022b8c <flatcc_builder_clear@@Base>:
   22b8c:	push	{r4, r5, r6, r7, r8, lr}
   22b90:	sub	sp, sp, #8
   22b94:	mov	r6, r0
   22b98:	add	r5, r0, #52	; 0x34
   22b9c:	mov	r4, #0
   22ba0:	mov	r8, r4
   22ba4:	str	r4, [sp]
   22ba8:	ldr	r7, [r6, #48]	; 0x30
   22bac:	mov	r3, r8
   22bb0:	mov	r2, r8
   22bb4:	mov	r1, r5
   22bb8:	ldr	r0, [r6, #40]	; 0x28
   22bbc:	blx	r7
   22bc0:	add	r4, r4, #1
   22bc4:	add	r5, r5, #8
   22bc8:	cmp	r4, #8
   22bcc:	bne	22ba4 <flatcc_builder_clear@@Base+0x18>
   22bd0:	ldr	r3, [r6, #184]	; 0xb8
   22bd4:	cmp	r3, #0
   22bd8:	bne	22bf4 <flatcc_builder_clear@@Base+0x68>
   22bdc:	mov	r2, #232	; 0xe8
   22be0:	mov	r1, #0
   22be4:	mov	r0, r6
   22be8:	bl	12654 <memset@plt>
   22bec:	add	sp, sp, #8
   22bf0:	pop	{r4, r5, r6, r7, r8, pc}
   22bf4:	add	r0, r6, #188	; 0xbc
   22bf8:	bl	264f0 <flatcc_emitter_clear@@Base>
   22bfc:	b	22bdc <flatcc_builder_clear@@Base+0x50>

00022c00 <flatcc_builder_enter_user_frame_ptr@@Base>:
   22c00:	push	{r4, r5, r6, r7, r8, lr}
   22c04:	sub	sp, sp, #8
   22c08:	mov	r7, r0
   22c0c:	add	r4, r1, #3
   22c10:	bic	r4, r4, #3
   22c14:	add	r4, r4, #4
   22c18:	ldr	r5, [r0, #228]	; 0xe4
   22c1c:	add	r2, r4, r5
   22c20:	ldr	r3, [r0, #112]	; 0x70
   22c24:	cmp	r2, r3
   22c28:	bhi	22c70 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   22c2c:	ldr	r8, [r7, #108]	; 0x6c
   22c30:	adds	r6, r8, r5
   22c34:	beq	22ca8 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   22c38:	mov	r2, r4
   22c3c:	mov	r1, #0
   22c40:	mov	r0, r6
   22c44:	bl	12654 <memset@plt>
   22c48:	ldr	r3, [r7, #224]	; 0xe0
   22c4c:	str	r3, [r8, r5]
   22c50:	ldr	r1, [r7, #228]	; 0xe4
   22c54:	add	r3, r1, #4
   22c58:	str	r3, [r7, #224]	; 0xe0
   22c5c:	add	r4, r4, r1
   22c60:	str	r4, [r7, #228]	; 0xe4
   22c64:	add	r0, r6, #4
   22c68:	add	sp, sp, #8
   22c6c:	pop	{r4, r5, r6, r7, r8, pc}
   22c70:	mov	r3, #7
   22c74:	str	r3, [sp]
   22c78:	ldr	r6, [r0, #48]	; 0x30
   22c7c:	mov	r3, #0
   22c80:	add	r1, r0, #108	; 0x6c
   22c84:	ldr	r0, [r0, #40]	; 0x28
   22c88:	blx	r6
   22c8c:	cmp	r0, #0
   22c90:	beq	22c2c <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   22c94:	ldr	r3, [pc, #20]	; 22cb0 <flatcc_builder_enter_user_frame_ptr@@Base+0xb0>
   22c98:	mov	r2, #308	; 0x134
   22c9c:	ldr	r1, [pc, #16]	; 22cb4 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   22ca0:	ldr	r0, [pc, #16]	; 22cb8 <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   22ca4:	bl	126a8 <__assert_fail@plt>
   22ca8:	mov	r0, #0
   22cac:	b	22c68 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>
   22cb0:	andeq	fp, r2, r4, lsl fp
   22cb4:	andeq	ip, r2, r8, asr #32
   22cb8:	muleq	r2, ip, r0

00022cbc <flatcc_builder_enter_user_frame@@Base>:
   22cbc:	push	{r4, r5, r6, r7, lr}
   22cc0:	sub	sp, sp, #12
   22cc4:	mov	r6, r0
   22cc8:	add	r4, r1, #3
   22ccc:	bic	r4, r4, #3
   22cd0:	add	r4, r4, #4
   22cd4:	ldr	r5, [r0, #228]	; 0xe4
   22cd8:	add	r2, r4, r5
   22cdc:	ldr	r3, [r0, #112]	; 0x70
   22ce0:	cmp	r2, r3
   22ce4:	bhi	22d28 <flatcc_builder_enter_user_frame@@Base+0x6c>
   22ce8:	ldr	r7, [r6, #108]	; 0x6c
   22cec:	adds	r0, r7, r5
   22cf0:	moveq	r0, #0
   22cf4:	beq	22d20 <flatcc_builder_enter_user_frame@@Base+0x64>
   22cf8:	mov	r2, r4
   22cfc:	mov	r1, #0
   22d00:	bl	12654 <memset@plt>
   22d04:	ldr	r3, [r6, #224]	; 0xe0
   22d08:	str	r3, [r7, r5]
   22d0c:	ldr	r1, [r6, #228]	; 0xe4
   22d10:	add	r0, r1, #4
   22d14:	str	r0, [r6, #224]	; 0xe0
   22d18:	add	r4, r4, r1
   22d1c:	str	r4, [r6, #228]	; 0xe4
   22d20:	add	sp, sp, #12
   22d24:	pop	{r4, r5, r6, r7, pc}
   22d28:	mov	r3, #7
   22d2c:	str	r3, [sp]
   22d30:	ldr	r7, [r0, #48]	; 0x30
   22d34:	mov	r3, #0
   22d38:	add	r1, r0, #108	; 0x6c
   22d3c:	ldr	r0, [r0, #40]	; 0x28
   22d40:	blx	r7
   22d44:	cmp	r0, #0
   22d48:	beq	22ce8 <flatcc_builder_enter_user_frame@@Base+0x2c>
   22d4c:	ldr	r3, [pc, #12]	; 22d60 <flatcc_builder_enter_user_frame@@Base+0xa4>
   22d50:	mov	r2, #308	; 0x134
   22d54:	ldr	r1, [pc, #8]	; 22d64 <flatcc_builder_enter_user_frame@@Base+0xa8>
   22d58:	ldr	r0, [pc, #8]	; 22d68 <flatcc_builder_enter_user_frame@@Base+0xac>
   22d5c:	bl	126a8 <__assert_fail@plt>
   22d60:	andeq	fp, r2, r4, lsl fp
   22d64:	andeq	ip, r2, r8, asr #32
   22d68:	muleq	r2, ip, r0

00022d6c <flatcc_builder_exit_user_frame@@Base>:
   22d6c:	ldr	r3, [r0, #224]	; 0xe0
   22d70:	cmp	r3, #0
   22d74:	beq	22d98 <flatcc_builder_exit_user_frame@@Base+0x2c>
   22d78:	ldr	r2, [r0, #108]	; 0x6c
   22d7c:	add	r2, r2, r3
   22d80:	sub	r3, r3, #4
   22d84:	str	r3, [r0, #228]	; 0xe4
   22d88:	ldr	r3, [r2, #-4]
   22d8c:	str	r3, [r0, #224]	; 0xe0
   22d90:	mov	r0, r3
   22d94:	bx	lr
   22d98:	push	{r4, lr}
   22d9c:	ldr	r3, [pc, #12]	; 22db0 <flatcc_builder_exit_user_frame@@Base+0x44>
   22da0:	ldr	r2, [pc, #12]	; 22db4 <flatcc_builder_exit_user_frame@@Base+0x48>
   22da4:	ldr	r1, [pc, #12]	; 22db8 <flatcc_builder_exit_user_frame@@Base+0x4c>
   22da8:	ldr	r0, [pc, #12]	; 22dbc <flatcc_builder_exit_user_frame@@Base+0x50>
   22dac:	bl	126a8 <__assert_fail@plt>
   22db0:	andeq	fp, r2, ip, ror #22
   22db4:	andeq	r0, r0, lr, lsl r2
   22db8:	andeq	ip, r2, r8, asr #32
   22dbc:	andeq	ip, r2, r4, asr #1

00022dc0 <flatcc_builder_exit_user_frame_at@@Base>:
   22dc0:	push	{r4, lr}
   22dc4:	ldr	r3, [r0, #224]	; 0xe0
   22dc8:	cmp	r3, r1
   22dcc:	bcc	22ddc <flatcc_builder_exit_user_frame_at@@Base+0x1c>
   22dd0:	str	r1, [r0, #224]	; 0xe0
   22dd4:	bl	22d6c <flatcc_builder_exit_user_frame@@Base>
   22dd8:	pop	{r4, pc}
   22ddc:	ldr	r3, [pc, #12]	; 22df0 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   22de0:	ldr	r2, [pc, #12]	; 22df4 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   22de4:	ldr	r1, [pc, #12]	; 22df8 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   22de8:	ldr	r0, [pc, #12]	; 22dfc <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   22dec:	bl	126a8 <__assert_fail@plt>
   22df0:	andeq	fp, r2, ip, lsl #23
   22df4:	andeq	r0, r0, r7, lsr #4
   22df8:	andeq	ip, r2, r8, asr #32
   22dfc:	andeq	ip, r2, r0, ror #1

00022e00 <flatcc_builder_get_current_user_frame@@Base>:
   22e00:	ldr	r0, [r0, #224]	; 0xe0
   22e04:	bx	lr

00022e08 <flatcc_builder_get_user_frame_ptr@@Base>:
   22e08:	ldr	r0, [r0, #108]	; 0x6c
   22e0c:	add	r0, r0, r1
   22e10:	bx	lr

00022e14 <flatcc_builder_embed_buffer@@Base>:
   22e14:	push	{r4, r5, r6, lr}
   22e18:	sub	sp, sp, #88	; 0x58
   22e1c:	mov	r4, r0
   22e20:	mov	r6, r2
   22e24:	mov	r5, r3
   22e28:	ldr	r3, [r0, #152]	; 0x98
   22e2c:	adds	r3, r3, #0
   22e30:	movne	r3, #1
   22e34:	mov	r2, r1
   22e38:	add	r1, sp, #104	; 0x68
   22e3c:	bl	224ec <flatcc_builder_default_alloc@@Base+0x114>
   22e40:	cmp	r0, #0
   22e44:	bne	22f80 <flatcc_builder_embed_buffer@@Base+0x16c>
   22e48:	ldr	r3, [sp, #108]	; 0x6c
   22e4c:	and	r3, r3, #2
   22e50:	cmp	r3, #0
   22e54:	movne	r3, #4
   22e58:	moveq	r3, #0
   22e5c:	ldr	r1, [r4, #136]	; 0x88
   22e60:	sub	r2, r1, r5
   22e64:	sub	r3, r2, r3
   22e68:	ldrh	r2, [sp, #104]	; 0x68
   22e6c:	sub	r2, r2, #1
   22e70:	and	r3, r3, r2
   22e74:	add	r2, r5, r3
   22e78:	str	r2, [sp, #84]	; 0x54
   22e7c:	mov	r2, #0
   22e80:	str	r2, [sp, #12]
   22e84:	str	r2, [sp, #16]
   22e88:	ldr	r2, [r4, #152]	; 0x98
   22e8c:	cmp	r2, #0
   22e90:	beq	22eb0 <flatcc_builder_embed_buffer@@Base+0x9c>
   22e94:	mov	r2, #4
   22e98:	str	r2, [sp, #12]
   22e9c:	add	r0, sp, #84	; 0x54
   22ea0:	str	r0, [sp, #20]
   22ea4:	str	r2, [sp, #24]
   22ea8:	mov	r2, #1
   22eac:	str	r2, [sp, #16]
   22eb0:	cmp	r5, #0
   22eb4:	beq	22ee0 <flatcc_builder_embed_buffer@@Base+0xcc>
   22eb8:	ldr	r2, [sp, #12]
   22ebc:	add	r2, r2, r5
   22ec0:	str	r2, [sp, #12]
   22ec4:	ldr	r2, [sp, #16]
   22ec8:	add	r2, r2, #1
   22ecc:	add	r0, sp, #88	; 0x58
   22ed0:	add	r0, r0, r2, lsl #3
   22ed4:	str	r6, [r0, #-76]	; 0xffffffb4
   22ed8:	str	r5, [r0, #-72]	; 0xffffffb8
   22edc:	str	r2, [sp, #16]
   22ee0:	cmp	r3, #0
   22ee4:	beq	22f14 <flatcc_builder_embed_buffer@@Base+0x100>
   22ee8:	ldr	r2, [sp, #12]
   22eec:	add	r2, r2, r3
   22ef0:	str	r2, [sp, #12]
   22ef4:	ldr	r2, [sp, #16]
   22ef8:	add	r2, r2, #1
   22efc:	add	r0, sp, #88	; 0x58
   22f00:	add	r0, r0, r2, lsl #3
   22f04:	ldr	ip, [pc, #124]	; 22f88 <flatcc_builder_embed_buffer@@Base+0x174>
   22f08:	str	ip, [r0, #-76]	; 0xffffffb4
   22f0c:	str	r3, [r0, #-72]	; 0xffffffb8
   22f10:	str	r2, [sp, #16]
   22f14:	ldr	r3, [sp, #12]
   22f18:	sub	r5, r1, r3
   22f1c:	cmp	r1, r5
   22f20:	ble	22f58 <flatcc_builder_embed_buffer@@Base+0x144>
   22f24:	str	r3, [sp]
   22f28:	ldr	r6, [r4, #44]	; 0x2c
   22f2c:	mov	r3, r5
   22f30:	ldr	r2, [sp, #16]
   22f34:	add	r1, sp, #20
   22f38:	ldr	r0, [r4, #36]	; 0x24
   22f3c:	blx	r6
   22f40:	cmp	r0, #0
   22f44:	streq	r5, [r4, #136]	; 0x88
   22f48:	bne	22f6c <flatcc_builder_embed_buffer@@Base+0x158>
   22f4c:	mov	r0, r5
   22f50:	add	sp, sp, #88	; 0x58
   22f54:	pop	{r4, r5, r6, pc}
   22f58:	ldr	r3, [pc, #44]	; 22f8c <flatcc_builder_embed_buffer@@Base+0x178>
   22f5c:	ldr	r2, [pc, #44]	; 22f90 <flatcc_builder_embed_buffer@@Base+0x17c>
   22f60:	ldr	r1, [pc, #44]	; 22f94 <flatcc_builder_embed_buffer@@Base+0x180>
   22f64:	ldr	r0, [pc, #44]	; 22f98 <flatcc_builder_embed_buffer@@Base+0x184>
   22f68:	bl	126a8 <__assert_fail@plt>
   22f6c:	ldr	r3, [pc, #24]	; 22f8c <flatcc_builder_embed_buffer@@Base+0x178>
   22f70:	ldr	r2, [pc, #36]	; 22f9c <flatcc_builder_embed_buffer@@Base+0x188>
   22f74:	ldr	r1, [pc, #24]	; 22f94 <flatcc_builder_embed_buffer@@Base+0x180>
   22f78:	ldr	r0, [pc, #24]	; 22f98 <flatcc_builder_embed_buffer@@Base+0x184>
   22f7c:	bl	126a8 <__assert_fail@plt>
   22f80:	mov	r5, #0
   22f84:	b	22f4c <flatcc_builder_embed_buffer@@Base+0x138>
   22f88:	strdeq	fp, [r2], -r8
   22f8c:	andeq	fp, r2, r4, asr #22
   22f90:	andeq	r0, r0, r7, lsl #5
   22f94:	andeq	ip, r2, r8, asr #32
   22f98:	muleq	r2, ip, r0
   22f9c:	andeq	r0, r0, fp, lsl #5

00022fa0 <flatcc_builder_create_buffer@@Base>:
   22fa0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22fa4:	sub	sp, sp, #96	; 0x60
   22fa8:	mov	r5, r0
   22fac:	mov	r9, r1
   22fb0:	mov	r6, r3
   22fb4:	ldr	r8, [sp, #132]	; 0x84
   22fb8:	mov	r3, #0
   22fbc:	str	r3, [sp, #12]
   22fc0:	and	r4, r8, #1
   22fc4:	uxtb	r7, r4
   22fc8:	mov	r3, r7
   22fcc:	add	r1, sp, #128	; 0x80
   22fd0:	bl	224ec <flatcc_builder_default_alloc@@Base+0x114>
   22fd4:	cmp	r0, #0
   22fd8:	bne	2317c <flatcc_builder_create_buffer@@Base+0x1dc>
   22fdc:	ldrh	r0, [sp, #128]	; 0x80
   22fe0:	ldrh	r3, [r5, #128]	; 0x80
   22fe4:	cmp	r3, r0
   22fe8:	strhcc	r0, [r5, #128]	; 0x80
   22fec:	cmp	r9, #0
   22ff0:	ldrne	r3, [r9]
   22ff4:	strne	r3, [sp, #12]
   22ff8:	ldr	r1, [sp, #12]
   22ffc:	cmp	r1, #0
   23000:	movne	r1, #4
   23004:	moveq	r1, #0
   23008:	tst	r8, #2
   2300c:	bne	23184 <flatcc_builder_create_buffer@@Base+0x1e4>
   23010:	ldr	ip, [r5, #136]	; 0x88
   23014:	mov	r2, ip
   23018:	sub	r3, ip, #4
   2301c:	sub	r3, r3, r1
   23020:	sub	r0, r0, #1
   23024:	and	r3, r3, r0
   23028:	mov	r0, #0
   2302c:	str	r0, [sp, #16]
   23030:	str	r0, [sp, #20]
   23034:	cmp	r4, r0
   23038:	bne	231a0 <flatcc_builder_create_buffer@@Base+0x200>
   2303c:	ldr	lr, [sp, #16]
   23040:	add	lr, lr, #4
   23044:	str	lr, [sp, #16]
   23048:	ldr	r8, [sp, #20]
   2304c:	add	r0, r8, #1
   23050:	add	r9, sp, #96	; 0x60
   23054:	add	r9, r9, r0, lsl #3
   23058:	add	sl, sp, #92	; 0x5c
   2305c:	str	sl, [r9, #-80]	; 0xffffffb0
   23060:	mov	sl, #4
   23064:	str	sl, [r9, #-76]	; 0xffffffb4
   23068:	str	r0, [sp, #20]
   2306c:	cmp	r1, #0
   23070:	beq	2309c <flatcc_builder_create_buffer@@Base+0xfc>
   23074:	add	lr, r1, lr
   23078:	str	lr, [sp, #16]
   2307c:	add	r0, r8, #2
   23080:	add	lr, sp, #96	; 0x60
   23084:	add	r0, lr, r0, lsl #3
   23088:	add	lr, sp, #12
   2308c:	str	lr, [r0, #-80]	; 0xffffffb0
   23090:	str	r1, [r0, #-76]	; 0xffffffb4
   23094:	add	r8, r8, #2
   23098:	str	r8, [sp, #20]
   2309c:	cmp	r3, #0
   230a0:	beq	230d0 <flatcc_builder_create_buffer@@Base+0x130>
   230a4:	ldr	r1, [sp, #16]
   230a8:	add	r1, r1, r3
   230ac:	str	r1, [sp, #16]
   230b0:	ldr	r1, [sp, #20]
   230b4:	add	r1, r1, #1
   230b8:	add	r0, sp, #96	; 0x60
   230bc:	add	r0, r0, r1, lsl #3
   230c0:	ldr	lr, [pc, #248]	; 231c0 <flatcc_builder_create_buffer@@Base+0x220>
   230c4:	str	lr, [r0, #-80]	; 0xffffffb0
   230c8:	str	r3, [r0, #-76]	; 0xffffffb4
   230cc:	str	r1, [sp, #20]
   230d0:	ldr	r1, [sp, #16]
   230d4:	sub	r3, r2, r1
   230d8:	add	r3, r3, r7, lsl #2
   230dc:	cmp	r4, #0
   230e0:	ldrne	r2, [r5, #144]	; 0x90
   230e4:	ldreq	r2, [r5, #140]	; 0x8c
   230e8:	sub	r2, r2, r3
   230ec:	str	r2, [sp, #88]	; 0x58
   230f0:	sub	r3, r6, r3
   230f4:	str	r3, [sp, #92]	; 0x5c
   230f8:	sub	r4, ip, r1
   230fc:	cmp	r4, ip
   23100:	bge	23140 <flatcc_builder_create_buffer@@Base+0x1a0>
   23104:	str	r1, [sp]
   23108:	ldr	r6, [r5, #44]	; 0x2c
   2310c:	mov	r3, r4
   23110:	ldr	r2, [sp, #20]
   23114:	add	r1, sp, #24
   23118:	ldr	r0, [r5, #36]	; 0x24
   2311c:	blx	r6
   23120:	cmp	r0, #0
   23124:	bne	23154 <flatcc_builder_create_buffer@@Base+0x1b4>
   23128:	str	r4, [r5, #136]	; 0x88
   2312c:	cmp	r4, #0
   23130:	beq	23168 <flatcc_builder_create_buffer@@Base+0x1c8>
   23134:	mov	r0, r4
   23138:	add	sp, sp, #96	; 0x60
   2313c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23140:	ldr	r3, [pc, #124]	; 231c4 <flatcc_builder_create_buffer@@Base+0x224>
   23144:	ldr	r2, [pc, #124]	; 231c8 <flatcc_builder_create_buffer@@Base+0x228>
   23148:	ldr	r1, [pc, #124]	; 231cc <flatcc_builder_create_buffer@@Base+0x22c>
   2314c:	ldr	r0, [pc, #124]	; 231d0 <flatcc_builder_create_buffer@@Base+0x230>
   23150:	bl	126a8 <__assert_fail@plt>
   23154:	ldr	r3, [pc, #104]	; 231c4 <flatcc_builder_create_buffer@@Base+0x224>
   23158:	ldr	r2, [pc, #116]	; 231d4 <flatcc_builder_create_buffer@@Base+0x234>
   2315c:	ldr	r1, [pc, #104]	; 231cc <flatcc_builder_create_buffer@@Base+0x22c>
   23160:	ldr	r0, [pc, #104]	; 231d0 <flatcc_builder_create_buffer@@Base+0x230>
   23164:	bl	126a8 <__assert_fail@plt>
   23168:	ldr	r3, [pc, #104]	; 231d8 <flatcc_builder_create_buffer@@Base+0x238>
   2316c:	mov	r2, #772	; 0x304
   23170:	ldr	r1, [pc, #84]	; 231cc <flatcc_builder_create_buffer@@Base+0x22c>
   23174:	ldr	r0, [pc, #84]	; 231d0 <flatcc_builder_create_buffer@@Base+0x230>
   23178:	bl	126a8 <__assert_fail@plt>
   2317c:	mov	r4, #0
   23180:	b	23134 <flatcc_builder_create_buffer@@Base+0x194>
   23184:	ldr	ip, [r5, #136]	; 0x88
   23188:	mov	r2, ip
   2318c:	sub	r3, ip, #8
   23190:	sub	r3, r3, r1
   23194:	sub	r0, r0, #1
   23198:	and	r3, r3, r0
   2319c:	mov	r7, #1
   231a0:	mov	r0, #4
   231a4:	str	r0, [sp, #16]
   231a8:	add	lr, sp, #88	; 0x58
   231ac:	str	lr, [sp, #24]
   231b0:	str	r0, [sp, #28]
   231b4:	mov	r0, #1
   231b8:	str	r0, [sp, #20]
   231bc:	b	2303c <flatcc_builder_create_buffer@@Base+0x9c>
   231c0:	strdeq	fp, [r2], -r8
   231c4:	andeq	fp, r2, r4, asr #22
   231c8:	andeq	r0, r0, r7, lsl #5
   231cc:	andeq	ip, r2, r8, asr #32
   231d0:	muleq	r2, ip, r0
   231d4:	andeq	r0, r0, fp, lsl #5
   231d8:			; <UNDEFINED> instruction: 0x0002bbb0

000231dc <flatcc_builder_create_struct@@Base>:
   231dc:	push	{r4, r5, r6, lr}
   231e0:	sub	sp, sp, #80	; 0x50
   231e4:	cmp	r3, #0
   231e8:	beq	23240 <flatcc_builder_create_struct@@Base+0x64>
   231ec:	mov	r4, r0
   231f0:	ldrh	r0, [r0, #128]	; 0x80
   231f4:	cmp	r0, r3
   231f8:	strhcc	r3, [r4, #128]	; 0x80
   231fc:	ldr	ip, [r4, #136]	; 0x88
   23200:	sub	r0, ip, r2
   23204:	sub	r3, r3, #1
   23208:	and	r3, r3, r0
   2320c:	mov	r0, #0
   23210:	str	r0, [sp, #8]
   23214:	str	r0, [sp, #12]
   23218:	cmp	r2, r0
   2321c:	beq	2327c <flatcc_builder_create_struct@@Base+0xa0>
   23220:	str	r2, [sp, #8]
   23224:	str	r1, [sp, #16]
   23228:	str	r2, [sp, #20]
   2322c:	mov	r2, #1
   23230:	str	r2, [sp, #12]
   23234:	cmp	r3, r0
   23238:	beq	232b0 <flatcc_builder_create_struct@@Base+0xd4>
   2323c:	b	23284 <flatcc_builder_create_struct@@Base+0xa8>
   23240:	ldr	r3, [pc, #172]	; 232f4 <flatcc_builder_create_struct@@Base+0x118>
   23244:	ldr	r2, [pc, #172]	; 232f8 <flatcc_builder_create_struct@@Base+0x11c>
   23248:	ldr	r1, [pc, #172]	; 232fc <flatcc_builder_create_struct@@Base+0x120>
   2324c:	ldr	r0, [pc, #172]	; 23300 <flatcc_builder_create_struct@@Base+0x124>
   23250:	bl	126a8 <__assert_fail@plt>
   23254:	ldr	r3, [pc, #168]	; 23304 <flatcc_builder_create_struct@@Base+0x128>
   23258:	ldr	r2, [pc, #168]	; 23308 <flatcc_builder_create_struct@@Base+0x12c>
   2325c:	ldr	r1, [pc, #152]	; 232fc <flatcc_builder_create_struct@@Base+0x120>
   23260:	ldr	r0, [pc, #164]	; 2330c <flatcc_builder_create_struct@@Base+0x130>
   23264:	bl	126a8 <__assert_fail@plt>
   23268:	ldr	r3, [pc, #148]	; 23304 <flatcc_builder_create_struct@@Base+0x128>
   2326c:	ldr	r2, [pc, #156]	; 23310 <flatcc_builder_create_struct@@Base+0x134>
   23270:	ldr	r1, [pc, #132]	; 232fc <flatcc_builder_create_struct@@Base+0x120>
   23274:	ldr	r0, [pc, #144]	; 2330c <flatcc_builder_create_struct@@Base+0x130>
   23278:	bl	126a8 <__assert_fail@plt>
   2327c:	cmp	r3, #0
   23280:	beq	23254 <flatcc_builder_create_struct@@Base+0x78>
   23284:	ldr	r2, [sp, #8]
   23288:	add	r2, r2, r3
   2328c:	str	r2, [sp, #8]
   23290:	ldr	r2, [sp, #12]
   23294:	add	r2, r2, #1
   23298:	add	r1, sp, #80	; 0x50
   2329c:	add	r1, r1, r2, lsl #3
   232a0:	ldr	r0, [pc, #108]	; 23314 <flatcc_builder_create_struct@@Base+0x138>
   232a4:	str	r0, [r1, #-72]	; 0xffffffb8
   232a8:	str	r3, [r1, #-68]	; 0xffffffbc
   232ac:	str	r2, [sp, #12]
   232b0:	ldr	r3, [sp, #8]
   232b4:	sub	r5, ip, r3
   232b8:	cmp	ip, r5
   232bc:	ble	23254 <flatcc_builder_create_struct@@Base+0x78>
   232c0:	str	r3, [sp]
   232c4:	ldr	r6, [r4, #44]	; 0x2c
   232c8:	mov	r3, r5
   232cc:	ldr	r2, [sp, #12]
   232d0:	add	r1, sp, #16
   232d4:	ldr	r0, [r4, #36]	; 0x24
   232d8:	blx	r6
   232dc:	cmp	r0, #0
   232e0:	bne	23268 <flatcc_builder_create_struct@@Base+0x8c>
   232e4:	str	r5, [r4, #136]	; 0x88
   232e8:	mov	r0, r5
   232ec:	add	sp, sp, #80	; 0x50
   232f0:	pop	{r4, r5, r6, pc}
   232f4:	ldrdeq	fp, [r2], -r0
   232f8:	andeq	r0, r0, pc, lsl #6
   232fc:	andeq	ip, r2, r8, asr #32
   23300:	andeq	ip, r2, r0, lsl #2
   23304:	andeq	fp, r2, r4, asr #22
   23308:	andeq	r0, r0, r7, lsl #5
   2330c:	muleq	r2, ip, r0
   23310:	andeq	r0, r0, fp, lsl #5
   23314:	strdeq	fp, [r2], -r8

00023318 <flatcc_builder_start_buffer@@Base>:
   23318:	push	{r4, r5, r6, r7, r8, lr}
   2331c:	mov	r4, r0
   23320:	mov	r5, r1
   23324:	mov	r7, r2
   23328:	mov	r6, r3
   2332c:	ldrh	r1, [r0, #128]	; 0x80
   23330:	bl	22604 <flatcc_builder_default_alloc@@Base+0x22c>
   23334:	cmp	r0, #0
   23338:	bne	233c4 <flatcc_builder_start_buffer@@Base+0xac>
   2333c:	mov	r3, #1
   23340:	strh	r3, [r4, #128]	; 0x80
   23344:	ldr	r3, [r4, #32]
   23348:	ldrh	r2, [r4, #132]	; 0x84
   2334c:	strh	r2, [r3, #34]	; 0x22
   23350:	strh	r7, [r4, #132]	; 0x84
   23354:	ldr	r3, [r4, #32]
   23358:	ldrh	r2, [r4, #164]	; 0xa4
   2335c:	strh	r2, [r3, #32]
   23360:	strh	r6, [r4, #164]	; 0xa4
   23364:	ldr	r3, [r4, #32]
   23368:	ldr	r2, [r4, #144]	; 0x90
   2336c:	str	r2, [r3, #20]
   23370:	ldr	r3, [r4, #32]
   23374:	ldr	r2, [r4, #152]	; 0x98
   23378:	str	r2, [r3, #28]
   2337c:	ldr	r3, [r4, #136]	; 0x88
   23380:	str	r3, [r4, #144]	; 0x90
   23384:	ldr	r3, [r4, #148]	; 0x94
   23388:	add	r2, r3, #1
   2338c:	str	r2, [r4, #148]	; 0x94
   23390:	str	r3, [r4, #152]	; 0x98
   23394:	ldr	r3, [r4, #32]
   23398:	ldr	r2, [r4, #168]	; 0xa8
   2339c:	str	r2, [r3, #16]
   233a0:	ldr	r3, [pc, #36]	; 233cc <flatcc_builder_start_buffer@@Base+0xb4>
   233a4:	cmp	r5, #0
   233a8:	moveq	r5, r3
   233ac:	ldr	r3, [r5]
   233b0:	str	r3, [r4, #168]	; 0xa8
   233b4:	ldr	r3, [r4, #32]
   233b8:	mov	r2, #1
   233bc:	strh	r2, [r3, #14]
   233c0:	pop	{r4, r5, r6, r7, r8, pc}
   233c4:	mvn	r0, #0
   233c8:	pop	{r4, r5, r6, r7, r8, pc}
   233cc:	strdeq	fp, [r2], -r8

000233d0 <flatcc_builder_end_buffer@@Base>:
   233d0:	push	{r4, r5, lr}
   233d4:	sub	sp, sp, #12
   233d8:	mov	r4, r0
   233dc:	ldrh	r2, [r0, #164]	; 0xa4
   233e0:	and	r2, r2, #2
   233e4:	ldr	r0, [r0, #152]	; 0x98
   233e8:	cmp	r0, #0
   233ec:	moveq	r0, r2
   233f0:	orrne	r0, r2, #1
   233f4:	ldr	r2, [r4, #32]
   233f8:	ldrh	r2, [r2, #14]
   233fc:	cmp	r2, #1
   23400:	bne	23444 <flatcc_builder_end_buffer@@Base+0x74>
   23404:	ldrh	r2, [r4, #132]	; 0x84
   23408:	ldrh	r3, [r4, #128]	; 0x80
   2340c:	cmp	r3, r2
   23410:	strhcc	r2, [r4, #128]	; 0x80
   23414:	str	r0, [sp, #4]
   23418:	ldrh	r3, [r4, #128]	; 0x80
   2341c:	str	r3, [sp]
   23420:	mov	r3, r1
   23424:	add	r1, r4, #168	; 0xa8
   23428:	mov	r0, r4
   2342c:	bl	22fa0 <flatcc_builder_create_buffer@@Base>
   23430:	subs	r5, r0, #0
   23434:	bne	23458 <flatcc_builder_end_buffer@@Base+0x88>
   23438:	mov	r0, r5
   2343c:	add	sp, sp, #12
   23440:	pop	{r4, r5, pc}
   23444:	ldr	r3, [pc, #176]	; 234fc <flatcc_builder_end_buffer@@Base+0x12c>
   23448:	ldr	r2, [pc, #176]	; 23500 <flatcc_builder_end_buffer@@Base+0x130>
   2344c:	ldr	r1, [pc, #176]	; 23504 <flatcc_builder_end_buffer@@Base+0x134>
   23450:	ldr	r0, [pc, #176]	; 23508 <flatcc_builder_end_buffer@@Base+0x138>
   23454:	bl	126a8 <__assert_fail@plt>
   23458:	ldr	r3, [r4, #32]
   2345c:	ldr	r2, [r3, #20]
   23460:	str	r2, [r4, #144]	; 0x90
   23464:	ldr	r2, [r3, #28]
   23468:	str	r2, [r4, #152]	; 0x98
   2346c:	ldr	r2, [r3, #16]
   23470:	str	r2, [r4, #168]	; 0xa8
   23474:	ldrh	r3, [r3, #32]
   23478:	strh	r3, [r4, #164]	; 0xa4
   2347c:	ldr	r2, [r4, #20]
   23480:	mov	r1, #0
   23484:	ldr	r0, [r4, #16]
   23488:	bl	12654 <memset@plt>
   2348c:	ldr	r2, [r4, #32]
   23490:	ldr	r3, [r2, #8]
   23494:	str	r3, [r4, #20]
   23498:	ldr	r0, [r2]
   2349c:	str	r0, [r4, #28]
   234a0:	ldr	r1, [r2, #4]
   234a4:	ldr	r3, [r4, #60]	; 0x3c
   234a8:	add	r3, r3, r0
   234ac:	str	r3, [r4, #16]
   234b0:	ldr	r3, [r4, #64]	; 0x40
   234b4:	sub	r3, r3, r0
   234b8:	cmp	r3, r1
   234bc:	movcs	r3, r1
   234c0:	str	r3, [r4, #24]
   234c4:	str	r1, [r2, #4]
   234c8:	ldrh	r3, [r4, #130]	; 0x82
   234cc:	ldrh	r2, [r4, #128]	; 0x80
   234d0:	cmp	r2, r3
   234d4:	strhcc	r3, [r4, #128]	; 0x80
   234d8:	ldr	r3, [r4, #32]
   234dc:	ldrh	r2, [r3, #12]
   234e0:	strh	r2, [r4, #130]	; 0x82
   234e4:	sub	r3, r3, #36	; 0x24
   234e8:	str	r3, [r4, #32]
   234ec:	ldr	r3, [r4, #156]	; 0x9c
   234f0:	sub	r3, r3, #1
   234f4:	str	r3, [r4, #156]	; 0x9c
   234f8:	b	23438 <flatcc_builder_end_buffer@@Base+0x68>
   234fc:	strdeq	fp, [r2], -r0
   23500:	andeq	r0, r0, r6, asr #6
   23504:	andeq	ip, r2, r8, asr #32
   23508:	andeq	ip, r2, ip, lsl #2

0002350c <flatcc_builder_start_struct@@Base>:
   2350c:	push	{r4, r5, r6, lr}
   23510:	mov	r4, r0
   23514:	mov	r5, r1
   23518:	mov	r1, r2
   2351c:	bl	22604 <flatcc_builder_default_alloc@@Base+0x22c>
   23520:	cmp	r0, #0
   23524:	bne	235a4 <flatcc_builder_start_struct@@Base+0x98>
   23528:	ldr	r3, [r4, #32]
   2352c:	mov	r2, #2
   23530:	strh	r2, [r3, #14]
   23534:	ldr	r1, [r4, #28]
   23538:	ldr	r2, [r4, #60]	; 0x3c
   2353c:	add	r2, r2, r1
   23540:	str	r2, [r4, #16]
   23544:	ldr	r3, [r4, #64]	; 0x40
   23548:	sub	r3, r3, r1
   2354c:	cmn	r3, #4
   23550:	mvnhi	r3, #3
   23554:	str	r3, [r4, #24]
   23558:	ldr	r3, [r4, #32]
   2355c:	mvn	r2, #3
   23560:	str	r2, [r3, #4]
   23564:	ldr	r6, [r4, #20]
   23568:	add	r5, r5, r6
   2356c:	str	r5, [r4, #20]
   23570:	ldr	r3, [r4, #24]
   23574:	cmp	r5, r3
   23578:	bcs	23588 <flatcc_builder_start_struct@@Base+0x7c>
   2357c:	ldr	r0, [r4, #16]
   23580:	add	r0, r0, r6
   23584:	pop	{r4, r5, r6, pc}
   23588:	add	r1, r5, #1
   2358c:	mov	r0, r4
   23590:	bl	22364 <main@@Base+0x78>
   23594:	cmp	r0, #0
   23598:	beq	2357c <flatcc_builder_start_struct@@Base+0x70>
   2359c:	mov	r0, #0
   235a0:	pop	{r4, r5, r6, pc}
   235a4:	mov	r0, #0
   235a8:	pop	{r4, r5, r6, pc}

000235ac <flatcc_builder_struct_edit@@Base>:
   235ac:	ldr	r0, [r0, #16]
   235b0:	bx	lr

000235b4 <flatcc_builder_end_struct@@Base>:
   235b4:	push	{r4, r5, r6, lr}
   235b8:	ldr	r3, [r0, #32]
   235bc:	ldrh	r3, [r3, #14]
   235c0:	cmp	r3, #2
   235c4:	bne	235ec <flatcc_builder_end_struct@@Base+0x38>
   235c8:	mov	r4, r0
   235cc:	ldrh	r3, [r0, #130]	; 0x82
   235d0:	ldr	r2, [r0, #20]
   235d4:	ldr	r1, [r0, #16]
   235d8:	bl	231dc <flatcc_builder_create_struct@@Base>
   235dc:	subs	r5, r0, #0
   235e0:	bne	23600 <flatcc_builder_end_struct@@Base+0x4c>
   235e4:	mov	r0, r5
   235e8:	pop	{r4, r5, r6, pc}
   235ec:	ldr	r3, [pc, #140]	; 23680 <flatcc_builder_end_struct@@Base+0xcc>
   235f0:	mov	r2, #872	; 0x368
   235f4:	ldr	r1, [pc, #136]	; 23684 <flatcc_builder_end_struct@@Base+0xd0>
   235f8:	ldr	r0, [pc, #136]	; 23688 <flatcc_builder_end_struct@@Base+0xd4>
   235fc:	bl	126a8 <__assert_fail@plt>
   23600:	ldr	r2, [r4, #20]
   23604:	mov	r1, #0
   23608:	ldr	r0, [r4, #16]
   2360c:	bl	12654 <memset@plt>
   23610:	ldr	r2, [r4, #32]
   23614:	ldr	r3, [r2, #8]
   23618:	str	r3, [r4, #20]
   2361c:	ldr	r0, [r2]
   23620:	str	r0, [r4, #28]
   23624:	ldr	r1, [r2, #4]
   23628:	ldr	r3, [r4, #60]	; 0x3c
   2362c:	add	r3, r3, r0
   23630:	str	r3, [r4, #16]
   23634:	ldr	r3, [r4, #64]	; 0x40
   23638:	sub	r3, r3, r0
   2363c:	cmp	r3, r1
   23640:	movcs	r3, r1
   23644:	str	r3, [r4, #24]
   23648:	str	r1, [r2, #4]
   2364c:	ldrh	r3, [r4, #130]	; 0x82
   23650:	ldrh	r2, [r4, #128]	; 0x80
   23654:	cmp	r2, r3
   23658:	strhcc	r3, [r4, #128]	; 0x80
   2365c:	ldr	r3, [r4, #32]
   23660:	ldrh	r2, [r3, #12]
   23664:	strh	r2, [r4, #130]	; 0x82
   23668:	sub	r3, r3, #36	; 0x24
   2366c:	str	r3, [r4, #32]
   23670:	ldr	r3, [r4, #156]	; 0x9c
   23674:	sub	r3, r3, #1
   23678:	str	r3, [r4, #156]	; 0x9c
   2367c:	b	235e4 <flatcc_builder_end_struct@@Base+0x30>
   23680:	andeq	fp, r2, ip, lsl #24
   23684:	andeq	ip, r2, r8, asr #32
   23688:	andeq	ip, r2, r8, lsr r1

0002368c <flatcc_builder_extend_vector@@Base>:
   2368c:	push	{r4, r5, r6, lr}
   23690:	mov	r4, r0
   23694:	ldr	r2, [r0, #32]
   23698:	ldr	r3, [r2, #20]
   2369c:	add	r0, r1, r3
   236a0:	ldr	ip, [r2, #24]
   236a4:	cmp	r3, r0
   236a8:	movls	r3, #0
   236ac:	movhi	r3, #1
   236b0:	cmp	ip, r0
   236b4:	orrcc	r3, r3, #1
   236b8:	cmp	r3, #0
   236bc:	bne	236f0 <flatcc_builder_extend_vector@@Base+0x64>
   236c0:	str	r0, [r2, #20]
   236c4:	ldr	r5, [r4, #20]
   236c8:	ldr	r3, [r4, #32]
   236cc:	ldr	r3, [r3, #16]
   236d0:	mla	r1, r3, r1, r5
   236d4:	str	r1, [r4, #20]
   236d8:	ldr	r3, [r4, #24]
   236dc:	cmp	r1, r3
   236e0:	bcs	23704 <flatcc_builder_extend_vector@@Base+0x78>
   236e4:	ldr	r0, [r4, #16]
   236e8:	add	r0, r0, r5
   236ec:	pop	{r4, r5, r6, pc}
   236f0:	ldr	r3, [pc, #44]	; 23724 <flatcc_builder_extend_vector@@Base+0x98>
   236f4:	mov	r2, #892	; 0x37c
   236f8:	ldr	r1, [pc, #40]	; 23728 <flatcc_builder_extend_vector@@Base+0x9c>
   236fc:	ldr	r0, [pc, #40]	; 2372c <flatcc_builder_extend_vector@@Base+0xa0>
   23700:	bl	126a8 <__assert_fail@plt>
   23704:	mvn	r2, #3
   23708:	add	r1, r1, #1
   2370c:	mov	r0, r4
   23710:	bl	22364 <main@@Base+0x78>
   23714:	cmp	r0, #0
   23718:	beq	236e4 <flatcc_builder_extend_vector@@Base+0x58>
   2371c:	mov	r0, #0
   23720:	pop	{r4, r5, r6, pc}
   23724:	andeq	fp, r2, r8, lsr #24
   23728:	andeq	ip, r2, r8, asr #32
   2372c:	andeq	ip, r2, r4, ror #2

00023730 <flatcc_builder_vector_push@@Base>:
   23730:	push	{r4, r5, r6, r7, r8, lr}
   23734:	ldr	r3, [r0, #32]
   23738:	ldrh	r2, [r3, #14]
   2373c:	cmp	r2, #4
   23740:	bne	237a8 <flatcc_builder_vector_push@@Base+0x78>
   23744:	mov	r4, r0
   23748:	mov	r6, r1
   2374c:	ldr	r2, [r3, #20]
   23750:	ldr	r1, [r3, #24]
   23754:	cmp	r2, r1
   23758:	bhi	237bc <flatcc_builder_vector_push@@Base+0x8c>
   2375c:	add	r2, r2, #1
   23760:	str	r2, [r3, #20]
   23764:	ldr	r3, [r0, #32]
   23768:	ldr	r7, [r3, #16]
   2376c:	ldr	r5, [r0, #20]
   23770:	add	r1, r7, r5
   23774:	str	r1, [r0, #20]
   23778:	ldr	r3, [r0, #24]
   2377c:	cmp	r1, r3
   23780:	bcs	237d0 <flatcc_builder_vector_push@@Base+0xa0>
   23784:	ldr	r4, [r4, #16]
   23788:	adds	r4, r4, r5
   2378c:	beq	237a0 <flatcc_builder_vector_push@@Base+0x70>
   23790:	mov	r2, r7
   23794:	mov	r1, r6
   23798:	mov	r0, r4
   2379c:	bl	125ac <memcpy@plt>
   237a0:	mov	r0, r4
   237a4:	pop	{r4, r5, r6, r7, r8, pc}
   237a8:	ldr	r3, [pc, #60]	; 237ec <flatcc_builder_vector_push@@Base+0xbc>
   237ac:	ldr	r2, [pc, #60]	; 237f0 <flatcc_builder_vector_push@@Base+0xc0>
   237b0:	ldr	r1, [pc, #60]	; 237f4 <flatcc_builder_vector_push@@Base+0xc4>
   237b4:	ldr	r0, [pc, #60]	; 237f8 <flatcc_builder_vector_push@@Base+0xc8>
   237b8:	bl	126a8 <__assert_fail@plt>
   237bc:	ldr	r3, [pc, #40]	; 237ec <flatcc_builder_vector_push@@Base+0xbc>
   237c0:	mov	r2, #908	; 0x38c
   237c4:	ldr	r1, [pc, #40]	; 237f4 <flatcc_builder_vector_push@@Base+0xc4>
   237c8:	ldr	r0, [pc, #44]	; 237fc <flatcc_builder_vector_push@@Base+0xcc>
   237cc:	bl	126a8 <__assert_fail@plt>
   237d0:	mvn	r2, #3
   237d4:	add	r1, r1, #1
   237d8:	bl	22364 <main@@Base+0x78>
   237dc:	cmp	r0, #0
   237e0:	beq	23784 <flatcc_builder_vector_push@@Base+0x54>
   237e4:	mov	r4, #0
   237e8:	b	237a0 <flatcc_builder_vector_push@@Base+0x70>
   237ec:	andeq	fp, r2, ip, lsr ip
   237f0:	andeq	r0, r0, fp, lsl #7
   237f4:	andeq	ip, r2, r8, asr #32
   237f8:	andeq	ip, r2, r0, lsl #3
   237fc:	andeq	ip, r2, ip, lsr #3

00023800 <flatcc_builder_append_vector@@Base>:
   23800:	push	{r4, r5, r6, r7, r8, lr}
   23804:	mov	r5, r1
   23808:	ldr	r1, [r0, #32]
   2380c:	ldrh	r3, [r1, #14]
   23810:	cmp	r3, #4
   23814:	bne	23890 <flatcc_builder_append_vector@@Base+0x90>
   23818:	mov	r4, r0
   2381c:	ldr	r3, [r1, #20]
   23820:	add	r0, r2, r3
   23824:	ldr	ip, [r1, #24]
   23828:	cmp	r3, r0
   2382c:	movls	r3, #0
   23830:	movhi	r3, #1
   23834:	cmp	ip, r0
   23838:	orrcc	r3, r3, #1
   2383c:	cmp	r3, #0
   23840:	bne	238a4 <flatcc_builder_append_vector@@Base+0xa4>
   23844:	str	r0, [r1, #20]
   23848:	ldr	r3, [r4, #32]
   2384c:	ldr	r6, [r3, #16]
   23850:	mul	r6, r6, r2
   23854:	ldr	r7, [r4, #20]
   23858:	add	r1, r6, r7
   2385c:	str	r1, [r4, #20]
   23860:	ldr	r3, [r4, #24]
   23864:	cmp	r1, r3
   23868:	bcs	238b8 <flatcc_builder_append_vector@@Base+0xb8>
   2386c:	ldr	r4, [r4, #16]
   23870:	adds	r4, r4, r7
   23874:	beq	23888 <flatcc_builder_append_vector@@Base+0x88>
   23878:	mov	r2, r6
   2387c:	mov	r1, r5
   23880:	mov	r0, r4
   23884:	bl	125ac <memcpy@plt>
   23888:	mov	r0, r4
   2388c:	pop	{r4, r5, r6, r7, r8, pc}
   23890:	ldr	r3, [pc, #64]	; 238d8 <flatcc_builder_append_vector@@Base+0xd8>
   23894:	ldr	r2, [pc, #64]	; 238dc <flatcc_builder_append_vector@@Base+0xdc>
   23898:	ldr	r1, [pc, #64]	; 238e0 <flatcc_builder_append_vector@@Base+0xe0>
   2389c:	ldr	r0, [pc, #64]	; 238e4 <flatcc_builder_append_vector@@Base+0xe4>
   238a0:	bl	126a8 <__assert_fail@plt>
   238a4:	ldr	r3, [pc, #60]	; 238e8 <flatcc_builder_append_vector@@Base+0xe8>
   238a8:	mov	r2, #892	; 0x37c
   238ac:	ldr	r1, [pc, #44]	; 238e0 <flatcc_builder_append_vector@@Base+0xe0>
   238b0:	ldr	r0, [pc, #52]	; 238ec <flatcc_builder_append_vector@@Base+0xec>
   238b4:	bl	126a8 <__assert_fail@plt>
   238b8:	mvn	r2, #3
   238bc:	add	r1, r1, #1
   238c0:	mov	r0, r4
   238c4:	bl	22364 <main@@Base+0x78>
   238c8:	cmp	r0, #0
   238cc:	beq	2386c <flatcc_builder_append_vector@@Base+0x6c>
   238d0:	mov	r4, #0
   238d4:	b	23888 <flatcc_builder_append_vector@@Base+0x88>
   238d8:	andeq	fp, r2, r8, asr ip
   238dc:	muleq	r0, r3, r3
   238e0:	andeq	ip, r2, r8, asr #32
   238e4:	andeq	ip, r2, r0, lsl #3
   238e8:	andeq	fp, r2, r8, lsr #24
   238ec:	andeq	ip, r2, r4, ror #2

000238f0 <flatcc_builder_extend_offset_vector@@Base>:
   238f0:	push	{r4, r5, r6, lr}
   238f4:	mov	r4, r0
   238f8:	ldr	r2, [r0, #32]
   238fc:	ldr	r3, [r2, #20]
   23900:	adds	r3, r1, r3
   23904:	movcs	ip, #1
   23908:	movcc	ip, #0
   2390c:	cmn	r3, #-1073741823	; 0xc0000001
   23910:	movls	r0, #0
   23914:	movhi	r0, #1
   23918:	orrs	r0, ip, r0
   2391c:	bne	23948 <flatcc_builder_extend_offset_vector@@Base+0x58>
   23920:	str	r3, [r2, #20]
   23924:	ldr	r5, [r4, #20]
   23928:	add	r1, r5, r1, lsl #2
   2392c:	str	r1, [r4, #20]
   23930:	ldr	r3, [r4, #24]
   23934:	cmp	r1, r3
   23938:	bcs	2395c <flatcc_builder_extend_offset_vector@@Base+0x6c>
   2393c:	ldr	r0, [r4, #16]
   23940:	add	r0, r0, r5
   23944:	pop	{r4, r5, r6, pc}
   23948:	ldr	r3, [pc, #44]	; 2397c <flatcc_builder_extend_offset_vector@@Base+0x8c>
   2394c:	mov	r2, #892	; 0x37c
   23950:	ldr	r1, [pc, #40]	; 23980 <flatcc_builder_extend_offset_vector@@Base+0x90>
   23954:	ldr	r0, [pc, #40]	; 23984 <flatcc_builder_extend_offset_vector@@Base+0x94>
   23958:	bl	126a8 <__assert_fail@plt>
   2395c:	mvn	r2, #3
   23960:	add	r1, r1, #1
   23964:	mov	r0, r4
   23968:	bl	22364 <main@@Base+0x78>
   2396c:	cmp	r0, #0
   23970:	beq	2393c <flatcc_builder_extend_offset_vector@@Base+0x4c>
   23974:	mov	r0, #0
   23978:	pop	{r4, r5, r6, pc}
   2397c:	andeq	fp, r2, r8, lsr #24
   23980:	andeq	ip, r2, r8, asr #32
   23984:	andeq	ip, r2, r4, ror #2

00023988 <flatcc_builder_offset_vector_push@@Base>:
   23988:	push	{r4, r5, r6, lr}
   2398c:	ldr	r2, [r0, #32]
   23990:	ldrh	r3, [r2, #14]
   23994:	cmp	r3, #5
   23998:	bne	239e0 <flatcc_builder_offset_vector_push@@Base+0x58>
   2399c:	mov	r4, r0
   239a0:	mov	r6, r1
   239a4:	ldr	r3, [r2, #20]
   239a8:	cmn	r3, #-1073741823	; 0xc0000001
   239ac:	beq	23a10 <flatcc_builder_offset_vector_push@@Base+0x88>
   239b0:	add	r3, r3, #1
   239b4:	str	r3, [r2, #20]
   239b8:	ldr	r5, [r0, #20]
   239bc:	add	r3, r5, #4
   239c0:	str	r3, [r0, #20]
   239c4:	ldr	r2, [r0, #24]
   239c8:	cmp	r3, r2
   239cc:	bcs	239f4 <flatcc_builder_offset_vector_push@@Base+0x6c>
   239d0:	ldr	r3, [r4, #16]
   239d4:	adds	r0, r3, r5
   239d8:	strne	r6, [r3, r5]
   239dc:	pop	{r4, r5, r6, pc}
   239e0:	ldr	r3, [pc, #48]	; 23a18 <flatcc_builder_offset_vector_push@@Base+0x90>
   239e4:	ldr	r2, [pc, #48]	; 23a1c <flatcc_builder_offset_vector_push@@Base+0x94>
   239e8:	ldr	r1, [pc, #48]	; 23a20 <flatcc_builder_offset_vector_push@@Base+0x98>
   239ec:	ldr	r0, [pc, #48]	; 23a24 <flatcc_builder_offset_vector_push@@Base+0x9c>
   239f0:	bl	126a8 <__assert_fail@plt>
   239f4:	mvn	r2, #3
   239f8:	add	r1, r5, #5
   239fc:	bl	22364 <main@@Base+0x78>
   23a00:	cmp	r0, #0
   23a04:	beq	239d0 <flatcc_builder_offset_vector_push@@Base+0x48>
   23a08:	mov	r0, #0
   23a0c:	pop	{r4, r5, r6, pc}
   23a10:	mov	r0, #0
   23a14:	pop	{r4, r5, r6, pc}
   23a18:	andeq	fp, r2, r8, ror ip
   23a1c:	andeq	r0, r0, r6, lsr #7
   23a20:	andeq	ip, r2, r8, asr #32
   23a24:	andeq	ip, r2, ip, ror #3

00023a28 <flatcc_builder_append_offset_vector@@Base>:
   23a28:	push	{r4, r5, r6, r7, r8, lr}
   23a2c:	mov	r6, r1
   23a30:	ldr	r1, [r0, #32]
   23a34:	ldrh	r3, [r1, #14]
   23a38:	cmp	r3, #5
   23a3c:	bne	23aac <flatcc_builder_append_offset_vector@@Base+0x84>
   23a40:	mov	r5, r0
   23a44:	ldr	r3, [r1, #20]
   23a48:	adds	r3, r2, r3
   23a4c:	movcs	ip, #1
   23a50:	movcc	ip, #0
   23a54:	cmn	r3, #-1073741823	; 0xc0000001
   23a58:	movls	r0, #0
   23a5c:	movhi	r0, #1
   23a60:	orrs	r0, ip, r0
   23a64:	bne	23ac0 <flatcc_builder_append_offset_vector@@Base+0x98>
   23a68:	str	r3, [r1, #20]
   23a6c:	lsl	r4, r2, #2
   23a70:	ldr	r7, [r5, #20]
   23a74:	add	r1, r4, r7
   23a78:	str	r1, [r5, #20]
   23a7c:	ldr	r3, [r5, #24]
   23a80:	cmp	r1, r3
   23a84:	bcs	23ad4 <flatcc_builder_append_offset_vector@@Base+0xac>
   23a88:	ldr	r5, [r5, #16]
   23a8c:	adds	r5, r5, r7
   23a90:	beq	23aa4 <flatcc_builder_append_offset_vector@@Base+0x7c>
   23a94:	mov	r2, r4
   23a98:	mov	r1, r6
   23a9c:	mov	r0, r5
   23aa0:	bl	125ac <memcpy@plt>
   23aa4:	mov	r0, r5
   23aa8:	pop	{r4, r5, r6, r7, r8, pc}
   23aac:	ldr	r3, [pc, #64]	; 23af4 <flatcc_builder_append_offset_vector@@Base+0xcc>
   23ab0:	mov	r2, #948	; 0x3b4
   23ab4:	ldr	r1, [pc, #60]	; 23af8 <flatcc_builder_append_offset_vector@@Base+0xd0>
   23ab8:	ldr	r0, [pc, #60]	; 23afc <flatcc_builder_append_offset_vector@@Base+0xd4>
   23abc:	bl	126a8 <__assert_fail@plt>
   23ac0:	ldr	r3, [pc, #56]	; 23b00 <flatcc_builder_append_offset_vector@@Base+0xd8>
   23ac4:	mov	r2, #892	; 0x37c
   23ac8:	ldr	r1, [pc, #40]	; 23af8 <flatcc_builder_append_offset_vector@@Base+0xd0>
   23acc:	ldr	r0, [pc, #48]	; 23b04 <flatcc_builder_append_offset_vector@@Base+0xdc>
   23ad0:	bl	126a8 <__assert_fail@plt>
   23ad4:	mvn	r2, #3
   23ad8:	add	r1, r1, #1
   23adc:	mov	r0, r5
   23ae0:	bl	22364 <main@@Base+0x78>
   23ae4:	cmp	r0, #0
   23ae8:	beq	23a88 <flatcc_builder_append_offset_vector@@Base+0x60>
   23aec:	mov	r5, #0
   23af0:	b	23aa4 <flatcc_builder_append_offset_vector@@Base+0x7c>
   23af4:	muleq	r2, ip, ip
   23af8:	andeq	ip, r2, r8, asr #32
   23afc:	andeq	ip, r2, ip, ror #3
   23b00:	andeq	fp, r2, r8, lsr #24
   23b04:	andeq	ip, r2, r4, ror #2

00023b08 <flatcc_builder_extend_string@@Base>:
   23b08:	push	{r4, r5, r6, lr}
   23b0c:	ldr	r2, [r0, #32]
   23b10:	ldrh	r3, [r2, #14]
   23b14:	cmp	r3, #6
   23b18:	bne	23b54 <flatcc_builder_extend_string@@Base+0x4c>
   23b1c:	mov	r4, r0
   23b20:	ldr	r3, [r2, #20]
   23b24:	adds	r3, r1, r3
   23b28:	bcs	23b68 <flatcc_builder_extend_string@@Base+0x60>
   23b2c:	str	r3, [r2, #20]
   23b30:	ldr	r5, [r0, #20]
   23b34:	add	r1, r1, r5
   23b38:	str	r1, [r0, #20]
   23b3c:	ldr	r3, [r0, #24]
   23b40:	cmp	r1, r3
   23b44:	bcs	23b7c <flatcc_builder_extend_string@@Base+0x74>
   23b48:	ldr	r0, [r4, #16]
   23b4c:	add	r0, r0, r5
   23b50:	pop	{r4, r5, r6, pc}
   23b54:	ldr	r3, [pc, #60]	; 23b98 <flatcc_builder_extend_string@@Base+0x90>
   23b58:	ldr	r2, [pc, #60]	; 23b9c <flatcc_builder_extend_string@@Base+0x94>
   23b5c:	ldr	r1, [pc, #60]	; 23ba0 <flatcc_builder_extend_string@@Base+0x98>
   23b60:	ldr	r0, [pc, #60]	; 23ba4 <flatcc_builder_extend_string@@Base+0x9c>
   23b64:	bl	126a8 <__assert_fail@plt>
   23b68:	ldr	r3, [pc, #56]	; 23ba8 <flatcc_builder_extend_string@@Base+0xa0>
   23b6c:	mov	r2, #892	; 0x37c
   23b70:	ldr	r1, [pc, #40]	; 23ba0 <flatcc_builder_extend_string@@Base+0x98>
   23b74:	ldr	r0, [pc, #48]	; 23bac <flatcc_builder_extend_string@@Base+0xa4>
   23b78:	bl	126a8 <__assert_fail@plt>
   23b7c:	mvn	r2, #3
   23b80:	add	r1, r1, #1
   23b84:	bl	22364 <main@@Base+0x78>
   23b88:	cmp	r0, #0
   23b8c:	beq	23b48 <flatcc_builder_extend_string@@Base+0x40>
   23b90:	mov	r0, #0
   23b94:	pop	{r4, r5, r6, pc}
   23b98:	andeq	fp, r2, r0, asr #25
   23b9c:			; <UNDEFINED> instruction: 0x000003bd
   23ba0:	andeq	ip, r2, r8, asr #32
   23ba4:	andeq	ip, r2, r0, lsr #4
   23ba8:	andeq	fp, r2, r8, lsr #24
   23bac:	andeq	ip, r2, r4, ror #2

00023bb0 <flatcc_builder_append_string@@Base>:
   23bb0:	push	{r4, r5, r6, r7, r8, lr}
   23bb4:	mov	r5, r2
   23bb8:	ldr	r2, [r0, #32]
   23bbc:	ldrh	r3, [r2, #14]
   23bc0:	cmp	r3, #6
   23bc4:	bne	23c1c <flatcc_builder_append_string@@Base+0x6c>
   23bc8:	mov	r4, r0
   23bcc:	mov	r6, r1
   23bd0:	ldr	r3, [r2, #20]
   23bd4:	adds	r3, r5, r3
   23bd8:	bcs	23c30 <flatcc_builder_append_string@@Base+0x80>
   23bdc:	str	r3, [r2, #20]
   23be0:	ldr	r7, [r0, #20]
   23be4:	add	r1, r5, r7
   23be8:	str	r1, [r0, #20]
   23bec:	ldr	r3, [r0, #24]
   23bf0:	cmp	r1, r3
   23bf4:	bcs	23c44 <flatcc_builder_append_string@@Base+0x94>
   23bf8:	ldr	r4, [r4, #16]
   23bfc:	adds	r4, r4, r7
   23c00:	beq	23c14 <flatcc_builder_append_string@@Base+0x64>
   23c04:	mov	r2, r5
   23c08:	mov	r1, r6
   23c0c:	mov	r0, r4
   23c10:	bl	125ac <memcpy@plt>
   23c14:	mov	r0, r4
   23c18:	pop	{r4, r5, r6, r7, r8, pc}
   23c1c:	ldr	r3, [pc, #60]	; 23c60 <flatcc_builder_append_string@@Base+0xb0>
   23c20:	ldr	r2, [pc, #60]	; 23c64 <flatcc_builder_append_string@@Base+0xb4>
   23c24:	ldr	r1, [pc, #60]	; 23c68 <flatcc_builder_append_string@@Base+0xb8>
   23c28:	ldr	r0, [pc, #60]	; 23c6c <flatcc_builder_append_string@@Base+0xbc>
   23c2c:	bl	126a8 <__assert_fail@plt>
   23c30:	ldr	r3, [pc, #56]	; 23c70 <flatcc_builder_append_string@@Base+0xc0>
   23c34:	mov	r2, #892	; 0x37c
   23c38:	ldr	r1, [pc, #40]	; 23c68 <flatcc_builder_append_string@@Base+0xb8>
   23c3c:	ldr	r0, [pc, #48]	; 23c74 <flatcc_builder_append_string@@Base+0xc4>
   23c40:	bl	126a8 <__assert_fail@plt>
   23c44:	mvn	r2, #3
   23c48:	add	r1, r1, #1
   23c4c:	bl	22364 <main@@Base+0x78>
   23c50:	cmp	r0, #0
   23c54:	beq	23bf8 <flatcc_builder_append_string@@Base+0x48>
   23c58:	mov	r4, #0
   23c5c:	b	23c14 <flatcc_builder_append_string@@Base+0x64>
   23c60:	andeq	fp, r2, r0, ror #25
   23c64:	andeq	r0, r0, r6, asr #7
   23c68:	andeq	ip, r2, r8, asr #32
   23c6c:	andeq	ip, r2, r0, lsr #4
   23c70:	andeq	fp, r2, r8, lsr #24
   23c74:	andeq	ip, r2, r4, ror #2

00023c78 <flatcc_builder_append_string_str@@Base>:
   23c78:	push	{r4, r5, r6, lr}
   23c7c:	mov	r5, r0
   23c80:	mov	r4, r1
   23c84:	mov	r0, r1
   23c88:	bl	12630 <strlen@plt>
   23c8c:	mov	r2, r0
   23c90:	mov	r1, r4
   23c94:	mov	r0, r5
   23c98:	bl	23bb0 <flatcc_builder_append_string@@Base>
   23c9c:	pop	{r4, r5, r6, pc}

00023ca0 <flatcc_builder_append_string_strn@@Base>:
   23ca0:	push	{r4, r5, r6, lr}
   23ca4:	mov	r6, r0
   23ca8:	mov	r4, r1
   23cac:	mov	r5, r2
   23cb0:	mov	r1, #0
   23cb4:	mov	r0, r4
   23cb8:	bl	1266c <memchr@plt>
   23cbc:	cmp	r0, #0
   23cc0:	subne	r5, r0, r4
   23cc4:	mov	r2, r5
   23cc8:	mov	r1, r4
   23ccc:	mov	r0, r6
   23cd0:	bl	23bb0 <flatcc_builder_append_string@@Base>
   23cd4:	pop	{r4, r5, r6, pc}

00023cd8 <flatcc_builder_truncate_vector@@Base>:
   23cd8:	push	{r4, lr}
   23cdc:	ldr	ip, [r0, #32]
   23ce0:	ldrh	r3, [ip, #14]
   23ce4:	cmp	r3, #4
   23ce8:	bne	23d30 <flatcc_builder_truncate_vector@@Base+0x58>
   23cec:	ldr	r3, [ip, #20]
   23cf0:	cmp	r3, r1
   23cf4:	bcc	23d44 <flatcc_builder_truncate_vector@@Base+0x6c>
   23cf8:	sub	r3, r3, r1
   23cfc:	str	r3, [ip, #20]
   23d00:	ldr	r3, [r0, #32]
   23d04:	ldr	r2, [r3, #16]
   23d08:	mul	r2, r2, r1
   23d0c:	ldr	r3, [r0, #20]
   23d10:	sub	r3, r3, r2
   23d14:	str	r3, [r0, #20]
   23d18:	ldr	r0, [r0, #16]
   23d1c:	mov	r1, #0
   23d20:	add	r0, r0, r3
   23d24:	bl	12654 <memset@plt>
   23d28:	mov	r0, #0
   23d2c:	pop	{r4, pc}
   23d30:	ldr	r3, [pc, #32]	; 23d58 <flatcc_builder_truncate_vector@@Base+0x80>
   23d34:	ldr	r2, [pc, #32]	; 23d5c <flatcc_builder_truncate_vector@@Base+0x84>
   23d38:	ldr	r1, [pc, #32]	; 23d60 <flatcc_builder_truncate_vector@@Base+0x88>
   23d3c:	ldr	r0, [pc, #32]	; 23d64 <flatcc_builder_truncate_vector@@Base+0x8c>
   23d40:	bl	126a8 <__assert_fail@plt>
   23d44:	ldr	r3, [pc, #12]	; 23d58 <flatcc_builder_truncate_vector@@Base+0x80>
   23d48:	ldr	r2, [pc, #24]	; 23d68 <flatcc_builder_truncate_vector@@Base+0x90>
   23d4c:	ldr	r1, [pc, #12]	; 23d60 <flatcc_builder_truncate_vector@@Base+0x88>
   23d50:	ldr	r0, [pc, #20]	; 23d6c <flatcc_builder_truncate_vector@@Base+0x94>
   23d54:	bl	126a8 <__assert_fail@plt>
   23d58:	andeq	fp, r2, r0, lsl #26
   23d5c:	ldrdeq	r0, [r0], -r9
   23d60:	andeq	ip, r2, r8, asr #32
   23d64:	andeq	ip, r2, r0, lsl #3
   23d68:	ldrdeq	r0, [r0], -sl
   23d6c:	andeq	ip, r2, ip, asr #4

00023d70 <flatcc_builder_truncate_offset_vector@@Base>:
   23d70:	push	{r4, lr}
   23d74:	ldr	ip, [r0, #32]
   23d78:	ldrh	r3, [ip, #14]
   23d7c:	cmp	r3, #5
   23d80:	bne	23dc8 <flatcc_builder_truncate_offset_vector@@Base+0x58>
   23d84:	ldr	r3, [ip, #20]
   23d88:	cmp	r3, r1
   23d8c:	bcc	23ddc <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   23d90:	sub	r3, r3, r1
   23d94:	str	r3, [ip, #20]
   23d98:	ldr	r3, [r0, #32]
   23d9c:	ldr	r2, [r3, #16]
   23da0:	mul	r2, r2, r1
   23da4:	ldr	r3, [r0, #20]
   23da8:	sub	r3, r3, r2
   23dac:	str	r3, [r0, #20]
   23db0:	ldr	r0, [r0, #16]
   23db4:	mov	r1, #0
   23db8:	add	r0, r0, r3
   23dbc:	bl	12654 <memset@plt>
   23dc0:	mov	r0, #0
   23dc4:	pop	{r4, pc}
   23dc8:	ldr	r3, [pc, #32]	; 23df0 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   23dcc:	ldr	r2, [pc, #32]	; 23df4 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   23dd0:	ldr	r1, [pc, #32]	; 23df8 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   23dd4:	ldr	r0, [pc, #32]	; 23dfc <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   23dd8:	bl	126a8 <__assert_fail@plt>
   23ddc:	ldr	r3, [pc, #12]	; 23df0 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   23de0:	ldr	r2, [pc, #24]	; 23e00 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   23de4:	ldr	r1, [pc, #12]	; 23df8 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   23de8:	ldr	r0, [pc, #20]	; 23e04 <flatcc_builder_truncate_offset_vector@@Base+0x94>
   23dec:	bl	126a8 <__assert_fail@plt>
   23df0:	andeq	fp, r2, r0, lsr #26
   23df4:	andeq	r0, r0, r2, ror #7
   23df8:	andeq	ip, r2, r8, asr #32
   23dfc:	andeq	ip, r2, ip, ror #3
   23e00:	andeq	r0, r0, r3, ror #7
   23e04:	andeq	ip, r2, r0, ror r2

00023e08 <flatcc_builder_truncate_string@@Base>:
   23e08:	push	{r4, lr}
   23e0c:	ldr	r2, [r0, #32]
   23e10:	ldrh	r3, [r2, #14]
   23e14:	cmp	r3, #6
   23e18:	bne	23e58 <flatcc_builder_truncate_string@@Base+0x50>
   23e1c:	ldr	r3, [r2, #20]
   23e20:	cmp	r3, r1
   23e24:	bcc	23e6c <flatcc_builder_truncate_string@@Base+0x64>
   23e28:	sub	r3, r3, r1
   23e2c:	str	r3, [r2, #20]
   23e30:	ldr	r3, [r0, #20]
   23e34:	sub	r3, r3, r1
   23e38:	str	r3, [r0, #20]
   23e3c:	ldr	r0, [r0, #16]
   23e40:	mov	r2, r1
   23e44:	mov	r1, #0
   23e48:	add	r0, r0, r3
   23e4c:	bl	12654 <memset@plt>
   23e50:	mov	r0, #0
   23e54:	pop	{r4, pc}
   23e58:	ldr	r3, [pc, #32]	; 23e80 <flatcc_builder_truncate_string@@Base+0x78>
   23e5c:	ldr	r2, [pc, #32]	; 23e84 <flatcc_builder_truncate_string@@Base+0x7c>
   23e60:	ldr	r1, [pc, #32]	; 23e88 <flatcc_builder_truncate_string@@Base+0x80>
   23e64:	ldr	r0, [pc, #32]	; 23e8c <flatcc_builder_truncate_string@@Base+0x84>
   23e68:	bl	126a8 <__assert_fail@plt>
   23e6c:	ldr	r3, [pc, #12]	; 23e80 <flatcc_builder_truncate_string@@Base+0x78>
   23e70:	mov	r2, #1004	; 0x3ec
   23e74:	ldr	r1, [pc, #12]	; 23e88 <flatcc_builder_truncate_string@@Base+0x80>
   23e78:	ldr	r0, [pc, #16]	; 23e90 <flatcc_builder_truncate_string@@Base+0x88>
   23e7c:	bl	126a8 <__assert_fail@plt>
   23e80:	andeq	fp, r2, r8, asr #26
   23e84:	andeq	r0, r0, fp, ror #7
   23e88:	andeq	ip, r2, r8, asr #32
   23e8c:	andeq	ip, r2, r0, lsr #4
   23e90:	andeq	ip, r2, ip, lsr #5

00023e94 <flatcc_builder_start_vector@@Base>:
   23e94:	push	{r4, r5, r6, lr}
   23e98:	mov	r4, r0
   23e9c:	mov	r6, r1
   23ea0:	mov	r5, r3
   23ea4:	cmp	r2, #4
   23ea8:	movcs	r1, r2
   23eac:	movcc	r1, #4
   23eb0:	bl	22604 <flatcc_builder_default_alloc@@Base+0x22c>
   23eb4:	cmp	r0, #0
   23eb8:	bne	23f18 <flatcc_builder_start_vector@@Base+0x84>
   23ebc:	ldr	r3, [r4, #32]
   23ec0:	str	r6, [r3, #16]
   23ec4:	ldr	r3, [r4, #32]
   23ec8:	mov	r2, #0
   23ecc:	str	r2, [r3, #20]
   23ed0:	ldr	r3, [r4, #32]
   23ed4:	str	r5, [r3, #24]
   23ed8:	ldr	r3, [r4, #32]
   23edc:	mov	r2, #4
   23ee0:	strh	r2, [r3, #14]
   23ee4:	ldr	r1, [r4, #28]
   23ee8:	ldr	r2, [r4, #60]	; 0x3c
   23eec:	add	r2, r2, r1
   23ef0:	str	r2, [r4, #16]
   23ef4:	ldr	r3, [r4, #64]	; 0x40
   23ef8:	sub	r3, r3, r1
   23efc:	cmn	r3, #4
   23f00:	mvnhi	r3, #3
   23f04:	str	r3, [r4, #24]
   23f08:	ldr	r3, [r4, #32]
   23f0c:	mvn	r2, #3
   23f10:	str	r2, [r3, #4]
   23f14:	pop	{r4, r5, r6, pc}
   23f18:	mvn	r0, #0
   23f1c:	pop	{r4, r5, r6, pc}

00023f20 <flatcc_builder_start_offset_vector@@Base>:
   23f20:	push	{r4, lr}
   23f24:	mov	r4, r0
   23f28:	mov	r1, #4
   23f2c:	bl	22604 <flatcc_builder_default_alloc@@Base+0x22c>
   23f30:	cmp	r0, #0
   23f34:	bne	23f90 <flatcc_builder_start_offset_vector@@Base+0x70>
   23f38:	ldr	r3, [r4, #32]
   23f3c:	mov	r2, #4
   23f40:	str	r2, [r3, #16]
   23f44:	ldr	r3, [r4, #32]
   23f48:	mov	r2, #0
   23f4c:	str	r2, [r3, #20]
   23f50:	ldr	r3, [r4, #32]
   23f54:	mov	r2, #5
   23f58:	strh	r2, [r3, #14]
   23f5c:	ldr	r1, [r4, #28]
   23f60:	ldr	r2, [r4, #60]	; 0x3c
   23f64:	add	r2, r2, r1
   23f68:	str	r2, [r4, #16]
   23f6c:	ldr	r3, [r4, #64]	; 0x40
   23f70:	sub	r3, r3, r1
   23f74:	cmn	r3, #4
   23f78:	mvnhi	r3, #3
   23f7c:	str	r3, [r4, #24]
   23f80:	ldr	r3, [r4, #32]
   23f84:	mvn	r2, #3
   23f88:	str	r2, [r3, #4]
   23f8c:	pop	{r4, pc}
   23f90:	mvn	r0, #0
   23f94:	pop	{r4, pc}

00023f98 <flatcc_builder_start_string@@Base>:
   23f98:	push	{r4, lr}
   23f9c:	mov	r4, r0
   23fa0:	mov	r1, #1
   23fa4:	bl	22604 <flatcc_builder_default_alloc@@Base+0x22c>
   23fa8:	cmp	r0, #0
   23fac:	bne	24008 <flatcc_builder_start_string@@Base+0x70>
   23fb0:	ldr	r3, [r4, #32]
   23fb4:	mov	r2, #1
   23fb8:	str	r2, [r3, #16]
   23fbc:	ldr	r3, [r4, #32]
   23fc0:	mov	r2, #0
   23fc4:	str	r2, [r3, #20]
   23fc8:	ldr	r3, [r4, #32]
   23fcc:	mov	r2, #6
   23fd0:	strh	r2, [r3, #14]
   23fd4:	ldr	r1, [r4, #28]
   23fd8:	ldr	r2, [r4, #60]	; 0x3c
   23fdc:	add	r2, r2, r1
   23fe0:	str	r2, [r4, #16]
   23fe4:	ldr	r3, [r4, #64]	; 0x40
   23fe8:	sub	r3, r3, r1
   23fec:	cmn	r3, #4
   23ff0:	mvnhi	r3, #3
   23ff4:	str	r3, [r4, #24]
   23ff8:	ldr	r3, [r4, #32]
   23ffc:	mvn	r2, #3
   24000:	str	r2, [r3, #4]
   24004:	pop	{r4, pc}
   24008:	mvn	r0, #0
   2400c:	pop	{r4, pc}

00024010 <flatcc_builder_reserve_table@@Base>:
   24010:	push	{r4, r5, r6, r7, lr}
   24014:	sub	sp, sp, #12
   24018:	cmp	r1, #0
   2401c:	blt	240a8 <flatcc_builder_reserve_table@@Base+0x98>
   24020:	mov	r5, r0
   24024:	ldr	r2, [r0, #32]
   24028:	ldrh	r6, [r2, #28]
   2402c:	ldr	r3, [r2, #16]
   24030:	add	r6, r3, r6, lsl #1
   24034:	add	r1, r1, #2
   24038:	lsl	r4, r1, #1
   2403c:	add	r2, r6, r4
   24040:	ldr	r3, [r0, #56]	; 0x38
   24044:	cmp	r2, r3
   24048:	bhi	240bc <flatcc_builder_reserve_table@@Base+0xac>
   2404c:	ldr	r3, [r5, #52]	; 0x34
   24050:	adds	r3, r3, r6
   24054:	moveq	r3, #0
   24058:	streq	r3, [r5, #4]
   2405c:	mvneq	r0, #0
   24060:	beq	240a0 <flatcc_builder_reserve_table@@Base+0x90>
   24064:	add	r3, r3, #4
   24068:	str	r3, [r5, #4]
   2406c:	ldr	r3, [r5, #32]
   24070:	ldr	r6, [r3, #20]
   24074:	add	r2, r4, r6
   24078:	sub	r2, r2, #3
   2407c:	ldr	r3, [r5, #80]	; 0x50
   24080:	cmp	r2, r3
   24084:	bhi	240f4 <flatcc_builder_reserve_table@@Base+0xe4>
   24088:	ldr	r0, [r5, #76]	; 0x4c
   2408c:	add	r0, r0, r6
   24090:	str	r0, [r5]
   24094:	cmp	r0, #0
   24098:	movne	r0, #0
   2409c:	mvneq	r0, #0
   240a0:	add	sp, sp, #12
   240a4:	pop	{r4, r5, r6, r7, pc}
   240a8:	ldr	r3, [pc, #124]	; 2412c <flatcc_builder_reserve_table@@Base+0x11c>
   240ac:	ldr	r2, [pc, #124]	; 24130 <flatcc_builder_reserve_table@@Base+0x120>
   240b0:	ldr	r1, [pc, #124]	; 24134 <flatcc_builder_reserve_table@@Base+0x124>
   240b4:	ldr	r0, [pc, #124]	; 24138 <flatcc_builder_reserve_table@@Base+0x128>
   240b8:	bl	126a8 <__assert_fail@plt>
   240bc:	mov	r3, #0
   240c0:	str	r3, [sp]
   240c4:	ldr	r7, [r0, #48]	; 0x30
   240c8:	mov	r3, #1
   240cc:	add	r1, r0, #52	; 0x34
   240d0:	ldr	r0, [r0, #40]	; 0x28
   240d4:	blx	r7
   240d8:	cmp	r0, #0
   240dc:	beq	2404c <flatcc_builder_reserve_table@@Base+0x3c>
   240e0:	ldr	r3, [pc, #84]	; 2413c <flatcc_builder_reserve_table@@Base+0x12c>
   240e4:	mov	r2, #308	; 0x134
   240e8:	ldr	r1, [pc, #68]	; 24134 <flatcc_builder_reserve_table@@Base+0x124>
   240ec:	ldr	r0, [pc, #76]	; 24140 <flatcc_builder_reserve_table@@Base+0x130>
   240f0:	bl	126a8 <__assert_fail@plt>
   240f4:	mov	r3, #3
   240f8:	str	r3, [sp]
   240fc:	ldr	r4, [r5, #48]	; 0x30
   24100:	mov	r3, #0
   24104:	add	r1, r5, #76	; 0x4c
   24108:	ldr	r0, [r5, #40]	; 0x28
   2410c:	blx	r4
   24110:	cmp	r0, #0
   24114:	beq	24088 <flatcc_builder_reserve_table@@Base+0x78>
   24118:	ldr	r3, [pc, #28]	; 2413c <flatcc_builder_reserve_table@@Base+0x12c>
   2411c:	mov	r2, #308	; 0x134
   24120:	ldr	r1, [pc, #12]	; 24134 <flatcc_builder_reserve_table@@Base+0x124>
   24124:	ldr	r0, [pc, #20]	; 24140 <flatcc_builder_reserve_table@@Base+0x130>
   24128:	bl	126a8 <__assert_fail@plt>
   2412c:	andeq	fp, r2, r8, ror #26
   24130:	andeq	r0, r0, r9, lsr #8
   24134:	andeq	ip, r2, r8, asr #32
   24138:	ldrdeq	ip, [r2], -r0
   2413c:	andeq	fp, r2, r4, lsl fp
   24140:	muleq	r2, ip, r0

00024144 <flatcc_builder_start_table@@Base>:
   24144:	push	{r4, r5, r6, r7, lr}
   24148:	sub	sp, sp, #12
   2414c:	mov	r4, r0
   24150:	mov	r5, r1
   24154:	mov	r1, #4
   24158:	bl	22604 <flatcc_builder_default_alloc@@Base+0x22c>
   2415c:	cmp	r0, #0
   24160:	bne	242f0 <flatcc_builder_start_table@@Base+0x1ac>
   24164:	ldr	r2, [r4, #32]
   24168:	ldr	r3, [r4, #4]
   2416c:	ldr	r1, [r4, #52]	; 0x34
   24170:	sub	r3, r3, r1
   24174:	str	r3, [r2, #16]
   24178:	ldr	r2, [r4, #32]
   2417c:	ldr	r3, [r4]
   24180:	ldr	r1, [r4, #76]	; 0x4c
   24184:	sub	r3, r3, r1
   24188:	str	r3, [r2, #20]
   2418c:	ldr	r3, [r4, #32]
   24190:	ldr	r2, [r4, #12]
   24194:	str	r2, [r3, #24]
   24198:	ldr	r3, [r4, #32]
   2419c:	ldrh	r2, [r4, #8]
   241a0:	strh	r2, [r3, #28]
   241a4:	ldr	r3, [pc, #340]	; 24300 <flatcc_builder_start_table@@Base+0x1bc>
   241a8:	str	r3, [r4, #12]
   241ac:	mov	r3, #0
   241b0:	strh	r3, [r4, #8]
   241b4:	ldr	r3, [r4, #32]
   241b8:	mov	r2, #3
   241bc:	strh	r2, [r3, #14]
   241c0:	ldr	r2, [r4, #32]
   241c4:	ldrh	r6, [r2, #28]
   241c8:	ldr	r3, [r2, #16]
   241cc:	add	r6, r3, r6, lsl #1
   241d0:	add	r5, r5, #2
   241d4:	lsl	r5, r5, #1
   241d8:	add	r2, r6, r5
   241dc:	ldr	r3, [r4, #56]	; 0x38
   241e0:	cmp	r2, r3
   241e4:	bhi	24280 <flatcc_builder_start_table@@Base+0x13c>
   241e8:	ldr	r3, [r4, #52]	; 0x34
   241ec:	adds	r3, r3, r6
   241f0:	moveq	r3, #0
   241f4:	streq	r3, [r4, #4]
   241f8:	mvneq	r0, #0
   241fc:	beq	24278 <flatcc_builder_start_table@@Base+0x134>
   24200:	add	r3, r3, #4
   24204:	str	r3, [r4, #4]
   24208:	ldr	r3, [r4, #32]
   2420c:	ldr	r6, [r3, #20]
   24210:	sub	r2, r5, #3
   24214:	add	r2, r2, r6
   24218:	ldr	r3, [r4, #80]	; 0x50
   2421c:	cmp	r2, r3
   24220:	bhi	242b8 <flatcc_builder_start_table@@Base+0x174>
   24224:	ldr	r0, [r4, #76]	; 0x4c
   24228:	add	r0, r0, r6
   2422c:	str	r0, [r4]
   24230:	cmp	r0, #0
   24234:	movne	r0, #0
   24238:	mvneq	r0, #0
   2423c:	cmp	r0, #0
   24240:	bne	242f8 <flatcc_builder_start_table@@Base+0x1b4>
   24244:	ldr	r1, [r4, #28]
   24248:	ldr	r2, [r4, #60]	; 0x3c
   2424c:	add	r2, r2, r1
   24250:	str	r2, [r4, #16]
   24254:	ldr	r3, [r4, #64]	; 0x40
   24258:	sub	r3, r3, r1
   2425c:	ldr	r2, [pc, #160]	; 24304 <flatcc_builder_start_table@@Base+0x1c0>
   24260:	cmp	r3, r2
   24264:	ldrhi	r3, [pc, #152]	; 24304 <flatcc_builder_start_table@@Base+0x1c0>
   24268:	str	r3, [r4, #24]
   2426c:	ldr	r3, [r4, #32]
   24270:	ldr	r2, [pc, #140]	; 24304 <flatcc_builder_start_table@@Base+0x1c0>
   24274:	str	r2, [r3, #4]
   24278:	add	sp, sp, #12
   2427c:	pop	{r4, r5, r6, r7, pc}
   24280:	mov	r3, #0
   24284:	str	r3, [sp]
   24288:	ldr	r7, [r4, #48]	; 0x30
   2428c:	mov	r3, #1
   24290:	add	r1, r4, #52	; 0x34
   24294:	ldr	r0, [r4, #40]	; 0x28
   24298:	blx	r7
   2429c:	cmp	r0, #0
   242a0:	beq	241e8 <flatcc_builder_start_table@@Base+0xa4>
   242a4:	ldr	r3, [pc, #92]	; 24308 <flatcc_builder_start_table@@Base+0x1c4>
   242a8:	mov	r2, #308	; 0x134
   242ac:	ldr	r1, [pc, #88]	; 2430c <flatcc_builder_start_table@@Base+0x1c8>
   242b0:	ldr	r0, [pc, #88]	; 24310 <flatcc_builder_start_table@@Base+0x1cc>
   242b4:	bl	126a8 <__assert_fail@plt>
   242b8:	mov	r3, #3
   242bc:	str	r3, [sp]
   242c0:	ldr	r5, [r4, #48]	; 0x30
   242c4:	mov	r3, #0
   242c8:	add	r1, r4, #76	; 0x4c
   242cc:	ldr	r0, [r4, #40]	; 0x28
   242d0:	blx	r5
   242d4:	cmp	r0, #0
   242d8:	beq	24224 <flatcc_builder_start_table@@Base+0xe0>
   242dc:	ldr	r3, [pc, #36]	; 24308 <flatcc_builder_start_table@@Base+0x1c4>
   242e0:	mov	r2, #308	; 0x134
   242e4:	ldr	r1, [pc, #32]	; 2430c <flatcc_builder_start_table@@Base+0x1c8>
   242e8:	ldr	r0, [pc, #32]	; 24310 <flatcc_builder_start_table@@Base+0x1cc>
   242ec:	bl	126a8 <__assert_fail@plt>
   242f0:	mvn	r0, #0
   242f4:	b	24278 <flatcc_builder_start_table@@Base+0x134>
   242f8:	mvn	r0, #0
   242fc:	b	24278 <flatcc_builder_start_table@@Base+0x134>
   24300:	svccs	0x00693b52
   24304:	strdeq	pc, [r0], -ip
   24308:	andeq	fp, r2, r4, lsl fp
   2430c:	andeq	ip, r2, r8, asr #32
   24310:	muleq	r2, ip, r0

00024314 <flatcc_builder_create_vtable@@Base>:
   24314:	push	{r4, r5, r6, lr}
   24318:	sub	sp, sp, #80	; 0x50
   2431c:	mov	r5, r0
   24320:	mov	r3, #0
   24324:	str	r3, [sp, #8]
   24328:	str	r3, [sp, #12]
   2432c:	cmp	r2, #0
   24330:	beq	243b4 <flatcc_builder_create_vtable@@Base+0xa0>
   24334:	str	r2, [sp, #8]
   24338:	str	r1, [sp, #16]
   2433c:	str	r2, [sp, #20]
   24340:	mov	r3, #1
   24344:	str	r3, [sp, #12]
   24348:	ldr	r3, [r0, #152]	; 0x98
   2434c:	cmp	r3, #0
   24350:	bne	243cc <flatcc_builder_create_vtable@@Base+0xb8>
   24354:	ldr	r3, [r0, #180]	; 0xb4
   24358:	cmp	r3, #0
   2435c:	bne	243cc <flatcc_builder_create_vtable@@Base+0xb8>
   24360:	ldr	r4, [r0, #140]	; 0x8c
   24364:	mov	r3, r2
   24368:	add	r2, r2, r4
   2436c:	str	r2, [r0, #140]	; 0x8c
   24370:	cmp	r4, r2
   24374:	ble	2442c <flatcc_builder_create_vtable@@Base+0x118>
   24378:	ldr	r3, [pc, #232]	; 24468 <flatcc_builder_create_vtable@@Base+0x154>
   2437c:	ldr	r2, [pc, #232]	; 2446c <flatcc_builder_create_vtable@@Base+0x158>
   24380:	ldr	r1, [pc, #232]	; 24470 <flatcc_builder_create_vtable@@Base+0x15c>
   24384:	ldr	r0, [pc, #232]	; 24474 <flatcc_builder_create_vtable@@Base+0x160>
   24388:	bl	126a8 <__assert_fail@plt>
   2438c:	ldr	r3, [pc, #228]	; 24478 <flatcc_builder_create_vtable@@Base+0x164>
   24390:	ldr	r2, [pc, #228]	; 2447c <flatcc_builder_create_vtable@@Base+0x168>
   24394:	ldr	r1, [pc, #212]	; 24470 <flatcc_builder_create_vtable@@Base+0x15c>
   24398:	ldr	r0, [pc, #212]	; 24474 <flatcc_builder_create_vtable@@Base+0x160>
   2439c:	bl	126a8 <__assert_fail@plt>
   243a0:	ldr	r3, [pc, #208]	; 24478 <flatcc_builder_create_vtable@@Base+0x164>
   243a4:	ldr	r2, [pc, #212]	; 24480 <flatcc_builder_create_vtable@@Base+0x16c>
   243a8:	ldr	r1, [pc, #192]	; 24470 <flatcc_builder_create_vtable@@Base+0x15c>
   243ac:	ldr	r0, [pc, #192]	; 24474 <flatcc_builder_create_vtable@@Base+0x160>
   243b0:	bl	126a8 <__assert_fail@plt>
   243b4:	ldr	r3, [r0, #152]	; 0x98
   243b8:	cmp	r3, #0
   243bc:	bne	2438c <flatcc_builder_create_vtable@@Base+0x78>
   243c0:	ldr	r3, [r0, #180]	; 0xb4
   243c4:	cmp	r3, #0
   243c8:	beq	2441c <flatcc_builder_create_vtable@@Base+0x108>
   243cc:	ldr	r2, [r5, #136]	; 0x88
   243d0:	ldr	r3, [sp, #8]
   243d4:	sub	r4, r2, r3
   243d8:	cmp	r2, r4
   243dc:	ble	2438c <flatcc_builder_create_vtable@@Base+0x78>
   243e0:	str	r3, [sp]
   243e4:	ldr	r6, [r5, #44]	; 0x2c
   243e8:	mov	r3, r4
   243ec:	ldr	r2, [sp, #12]
   243f0:	add	r1, sp, #16
   243f4:	ldr	r0, [r5, #36]	; 0x24
   243f8:	blx	r6
   243fc:	cmp	r0, #0
   24400:	bne	243a0 <flatcc_builder_create_vtable@@Base+0x8c>
   24404:	str	r4, [r5, #136]	; 0x88
   24408:	cmp	r4, #0
   2440c:	addne	r4, r4, #1
   24410:	mov	r0, r4
   24414:	add	sp, sp, #80	; 0x50
   24418:	pop	{r4, r5, r6, pc}
   2441c:	ldr	r4, [r5, #140]	; 0x8c
   24420:	ldr	r3, [sp, #8]
   24424:	add	r2, r3, r4
   24428:	str	r2, [r5, #140]	; 0x8c
   2442c:	ldr	r0, [r5, #36]	; 0x24
   24430:	str	r3, [sp]
   24434:	ldr	r5, [r5, #44]	; 0x2c
   24438:	mov	r3, r4
   2443c:	ldr	r2, [sp, #12]
   24440:	add	r1, sp, #16
   24444:	blx	r5
   24448:	cmp	r0, #0
   2444c:	addeq	r4, r4, #1
   24450:	beq	24410 <flatcc_builder_create_vtable@@Base+0xfc>
   24454:	ldr	r3, [pc, #12]	; 24468 <flatcc_builder_create_vtable@@Base+0x154>
   24458:	ldr	r2, [pc, #36]	; 24484 <flatcc_builder_create_vtable@@Base+0x170>
   2445c:	ldr	r1, [pc, #12]	; 24470 <flatcc_builder_create_vtable@@Base+0x15c>
   24460:	ldr	r0, [pc, #12]	; 24474 <flatcc_builder_create_vtable@@Base+0x160>
   24464:	bl	126a8 <__assert_fail@plt>
   24468:	strdeq	fp, [r2], -r8
   2446c:	andeq	r0, r0, r1, lsr #5
   24470:	andeq	ip, r2, r8, asr #32
   24474:	muleq	r2, ip, r0
   24478:	andeq	fp, r2, r4, asr #22
   2447c:	andeq	r0, r0, r7, lsl #5
   24480:	andeq	r0, r0, fp, lsl #5
   24484:	andeq	r0, r0, r5, lsr #5

00024488 <flatcc_builder_create_cached_vtable@@Base>:
   24488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2448c:	sub	sp, sp, #28
   24490:	mov	r8, r0
   24494:	str	r1, [sp, #8]
   24498:	mov	r7, r2
   2449c:	mov	fp, r3
   244a0:	ldr	r4, [r0, #116]	; 0x74
   244a4:	cmp	r4, #0
   244a8:	beq	244f0 <flatcc_builder_create_cached_vtable@@Base+0x68>
   244ac:	ldr	r3, [r8, #116]	; 0x74
   244b0:	rsb	r3, r3, #32
   244b4:	lsr	fp, fp, r3
   244b8:	ldr	r3, [r8, #92]	; 0x5c
   244bc:	str	r3, [sp, #16]
   244c0:	adds	r2, r3, fp, lsl #2
   244c4:	str	r2, [sp, #20]
   244c8:	beq	247c0 <flatcc_builder_create_cached_vtable@@Base+0x338>
   244cc:	ldr	r5, [r3, fp, lsl #2]
   244d0:	cmp	r5, #0
   244d4:	beq	24660 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   244d8:	ldr	sl, [r8, #100]	; 0x64
   244dc:	ldr	r6, [r8, #68]	; 0x44
   244e0:	mov	r9, r2
   244e4:	mov	r3, #0
   244e8:	str	r3, [sp, #12]
   244ec:	b	245e8 <flatcc_builder_create_cached_vtable@@Base+0x160>
   244f0:	add	r6, r0, #92	; 0x5c
   244f4:	ldr	r3, [r0, #124]	; 0x7c
   244f8:	cmp	r3, #0
   244fc:	bne	24554 <flatcc_builder_create_cached_vtable@@Base+0xcc>
   24500:	ldr	r3, [r0, #104]	; 0x68
   24504:	cmp	r3, #15
   24508:	bls	24568 <flatcc_builder_create_cached_vtable@@Base+0xe0>
   2450c:	ldr	r3, [r8, #100]	; 0x64
   24510:	cmp	r3, #0
   24514:	beq	247e0 <flatcc_builder_create_cached_vtable@@Base+0x358>
   24518:	mov	r3, #16
   2451c:	str	r3, [r8, #124]	; 0x7c
   24520:	mov	r3, #5
   24524:	str	r3, [sp]
   24528:	ldr	r5, [r8, #48]	; 0x30
   2452c:	mov	r3, #1
   24530:	mov	r2, #256	; 0x100
   24534:	mov	r1, r6
   24538:	ldr	r0, [r8, #40]	; 0x28
   2453c:	blx	r5
   24540:	cmp	r0, #0
   24544:	bne	247e0 <flatcc_builder_create_cached_vtable@@Base+0x358>
   24548:	ldr	r1, [r8, #96]	; 0x60
   2454c:	mov	r3, #256	; 0x100
   24550:	b	245a8 <flatcc_builder_create_cached_vtable@@Base+0x120>
   24554:	ldr	r3, [pc, #652]	; 247e8 <flatcc_builder_create_cached_vtable@@Base+0x360>
   24558:	ldr	r2, [pc, #652]	; 247ec <flatcc_builder_create_cached_vtable@@Base+0x364>
   2455c:	ldr	r1, [pc, #652]	; 247f0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   24560:	ldr	r0, [pc, #652]	; 247f4 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   24564:	bl	126a8 <__assert_fail@plt>
   24568:	mov	r3, #6
   2456c:	str	r3, [sp]
   24570:	ldr	r5, [r0, #48]	; 0x30
   24574:	mov	r3, #0
   24578:	mov	r2, #16
   2457c:	add	r1, r0, #100	; 0x64
   24580:	ldr	r0, [r0, #40]	; 0x28
   24584:	blx	r5
   24588:	cmp	r0, #0
   2458c:	beq	2450c <flatcc_builder_create_cached_vtable@@Base+0x84>
   24590:	ldr	r3, [pc, #608]	; 247f8 <flatcc_builder_create_cached_vtable@@Base+0x370>
   24594:	mov	r2, #308	; 0x134
   24598:	ldr	r1, [pc, #592]	; 247f0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   2459c:	ldr	r0, [pc, #600]	; 247fc <flatcc_builder_create_cached_vtable@@Base+0x374>
   245a0:	bl	126a8 <__assert_fail@plt>
   245a4:	mov	r3, r2
   245a8:	lsl	r2, r3, #1
   245ac:	cmp	r2, r1
   245b0:	bls	245a4 <flatcc_builder_create_cached_vtable@@Base+0x11c>
   245b4:	lsr	r3, r3, #2
   245b8:	cmp	r3, #1
   245bc:	bls	245d0 <flatcc_builder_create_cached_vtable@@Base+0x148>
   245c0:	mov	r2, #1
   245c4:	add	r4, r4, #1
   245c8:	cmp	r3, r2, lsl r4
   245cc:	bhi	245c4 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   245d0:	str	r4, [r8, #116]	; 0x74
   245d4:	b	244ac <flatcc_builder_create_cached_vtable@@Base+0x24>
   245d8:	add	r9, r4, #12
   245dc:	ldr	r5, [r4, #12]
   245e0:	cmp	r5, #0
   245e4:	beq	24668 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   245e8:	add	r4, sl, r5
   245ec:	ldr	r3, [r4, #8]
   245f0:	add	r1, r6, r3
   245f4:	ldrh	r3, [r6, r3]
   245f8:	cmp	r3, r7
   245fc:	bne	245d8 <flatcc_builder_create_cached_vtable@@Base+0x150>
   24600:	mov	r2, r7
   24604:	ldr	r0, [sp, #8]
   24608:	bl	125c4 <memcmp@plt>
   2460c:	cmp	r0, #0
   24610:	bne	245d8 <flatcc_builder_create_cached_vtable@@Base+0x150>
   24614:	ldr	r2, [r4, #4]
   24618:	ldr	r3, [r8, #152]	; 0x98
   2461c:	cmp	r2, r3
   24620:	addne	r9, r4, #12
   24624:	ldrne	r5, [r4, #12]
   24628:	strne	r4, [sp, #12]
   2462c:	bne	245e0 <flatcc_builder_create_cached_vtable@@Base+0x158>
   24630:	ldr	r3, [sp, #20]
   24634:	cmp	r3, r9
   24638:	beq	24654 <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   2463c:	ldr	r3, [r4, #12]
   24640:	str	r3, [r9]
   24644:	ldr	r2, [sp, #16]
   24648:	ldr	r3, [r2, fp, lsl #2]
   2464c:	str	r3, [r4, #12]
   24650:	str	r5, [r2, fp, lsl #2]
   24654:	ldr	r0, [r4]
   24658:	add	sp, sp, #28
   2465c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24660:	mov	r3, #0
   24664:	str	r3, [sp, #12]
   24668:	ldr	r4, [r8, #124]	; 0x7c
   2466c:	add	r2, r4, #16
   24670:	ldr	r3, [r8, #104]	; 0x68
   24674:	cmp	r2, r3
   24678:	bhi	246e4 <flatcc_builder_create_cached_vtable@@Base+0x25c>
   2467c:	ldr	r5, [r8, #100]	; 0x64
   24680:	adds	r6, r5, r4
   24684:	beq	247c8 <flatcc_builder_create_cached_vtable@@Base+0x340>
   24688:	ldr	r3, [r8, #124]	; 0x7c
   2468c:	add	r2, r3, #16
   24690:	str	r2, [r8, #124]	; 0x7c
   24694:	ldr	r2, [r8, #152]	; 0x98
   24698:	str	r2, [r6, #4]
   2469c:	ldr	r1, [sp, #16]
   246a0:	ldr	r2, [r1, fp, lsl #2]
   246a4:	str	r2, [r6, #12]
   246a8:	str	r3, [r1, fp, lsl #2]
   246ac:	mov	r2, r7
   246b0:	ldr	r1, [sp, #8]
   246b4:	mov	r0, r8
   246b8:	bl	24314 <flatcc_builder_create_vtable@@Base>
   246bc:	str	r0, [r5, r4]
   246c0:	cmp	r0, #0
   246c4:	beq	247d0 <flatcc_builder_create_cached_vtable@@Base+0x348>
   246c8:	ldr	r3, [sp, #12]
   246cc:	cmp	r3, #0
   246d0:	beq	2471c <flatcc_builder_create_cached_vtable@@Base+0x294>
   246d4:	ldr	r3, [r3, #8]
   246d8:	str	r3, [r6, #8]
   246dc:	ldr	r0, [r5, r4]
   246e0:	b	24658 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   246e4:	mov	r3, #6
   246e8:	str	r3, [sp]
   246ec:	ldr	r5, [r8, #48]	; 0x30
   246f0:	mov	r3, #0
   246f4:	add	r1, r8, #100	; 0x64
   246f8:	ldr	r0, [r8, #40]	; 0x28
   246fc:	blx	r5
   24700:	cmp	r0, #0
   24704:	beq	2467c <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   24708:	ldr	r3, [pc, #232]	; 247f8 <flatcc_builder_create_cached_vtable@@Base+0x370>
   2470c:	mov	r2, #308	; 0x134
   24710:	ldr	r1, [pc, #216]	; 247f0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   24714:	ldr	r0, [pc, #224]	; 247fc <flatcc_builder_create_cached_vtable@@Base+0x374>
   24718:	bl	126a8 <__assert_fail@plt>
   2471c:	ldr	r2, [r8, #172]	; 0xac
   24720:	cmp	r2, #0
   24724:	beq	24738 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   24728:	ldr	r3, [r8, #120]	; 0x78
   2472c:	add	r3, r7, r3
   24730:	cmp	r2, r3
   24734:	bcc	2477c <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   24738:	ldr	r9, [r8, #120]	; 0x78
   2473c:	add	r2, r9, r7
   24740:	ldr	r3, [r8, #72]	; 0x48
   24744:	cmp	r2, r3
   24748:	bhi	24788 <flatcc_builder_create_cached_vtable@@Base+0x300>
   2474c:	ldr	r3, [r8, #68]	; 0x44
   24750:	adds	r0, r3, r9
   24754:	beq	247d8 <flatcc_builder_create_cached_vtable@@Base+0x350>
   24758:	ldr	r3, [r8, #120]	; 0x78
   2475c:	str	r3, [r6, #8]
   24760:	ldr	r3, [r8, #120]	; 0x78
   24764:	add	r3, r3, r7
   24768:	str	r3, [r8, #120]	; 0x78
   2476c:	mov	r2, r7
   24770:	ldr	r1, [sp, #8]
   24774:	bl	125ac <memcpy@plt>
   24778:	b	246dc <flatcc_builder_create_cached_vtable@@Base+0x254>
   2477c:	mov	r0, r8
   24780:	bl	22948 <flatcc_builder_flush_vtable_cache@@Base>
   24784:	b	246dc <flatcc_builder_create_cached_vtable@@Base+0x254>
   24788:	mov	r3, #2
   2478c:	str	r3, [sp]
   24790:	ldr	sl, [r8, #48]	; 0x30
   24794:	mov	r3, #0
   24798:	add	r1, r8, #68	; 0x44
   2479c:	ldr	r0, [r8, #40]	; 0x28
   247a0:	blx	sl
   247a4:	cmp	r0, #0
   247a8:	beq	2474c <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   247ac:	ldr	r3, [pc, #68]	; 247f8 <flatcc_builder_create_cached_vtable@@Base+0x370>
   247b0:	mov	r2, #308	; 0x134
   247b4:	ldr	r1, [pc, #52]	; 247f0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   247b8:	ldr	r0, [pc, #60]	; 247fc <flatcc_builder_create_cached_vtable@@Base+0x374>
   247bc:	bl	126a8 <__assert_fail@plt>
   247c0:	mov	r0, #0
   247c4:	b	24658 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   247c8:	mov	r0, #0
   247cc:	b	24658 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   247d0:	mov	r0, #0
   247d4:	b	24658 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   247d8:	mvn	r0, #0
   247dc:	b	24658 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   247e0:	mov	r0, #0
   247e4:	b	24658 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   247e8:	andeq	fp, r2, r8, lsl #27
   247ec:	andeq	r0, r0, r6, asr r1
   247f0:	andeq	ip, r2, r8, asr #32
   247f4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   247f8:	andeq	fp, r2, r4, lsl fp
   247fc:	muleq	r2, ip, r0

00024800 <flatcc_builder_create_table@@Base>:
   24800:	push	{r4, r5, r6, r7, lr}
   24804:	sub	sp, sp, #92	; 0x5c
   24808:	ldr	r4, [sp, #116]	; 0x74
   2480c:	ldr	ip, [sp, #120]	; 0x78
   24810:	cmp	r4, #0
   24814:	blt	24954 <flatcc_builder_create_table@@Base+0x154>
   24818:	mov	r5, r0
   2481c:	tst	ip, #1
   24820:	beq	24968 <flatcc_builder_create_table@@Base+0x168>
   24824:	cmp	r3, #4
   24828:	movcs	r0, r3
   2482c:	movcc	r0, #4
   24830:	ldrh	r3, [r5, #128]	; 0x80
   24834:	cmp	r3, r0
   24838:	strhcc	r0, [r5, #128]	; 0x80
   2483c:	ldr	lr, [r5, #136]	; 0x88
   24840:	sub	r7, lr, r2
   24844:	sub	r0, r0, #1
   24848:	and	r7, r7, r0
   2484c:	mvn	r3, #3
   24850:	sub	r3, r3, r2
   24854:	add	r3, r3, lr
   24858:	sub	r3, r3, r7
   2485c:	sub	ip, ip, #1
   24860:	sub	ip, r3, ip
   24864:	str	ip, [sp, #84]	; 0x54
   24868:	cmp	r4, #0
   2486c:	ble	2489c <flatcc_builder_create_table@@Base+0x9c>
   24870:	ldr	ip, [sp, #112]	; 0x70
   24874:	add	r4, ip, r4, lsl #1
   24878:	mvn	r6, #3
   2487c:	sub	r6, r6, r3
   24880:	ldrh	r3, [ip], #2
   24884:	sub	lr, r6, r3
   24888:	ldr	r0, [r1, r3]
   2488c:	add	r0, r0, lr
   24890:	str	r0, [r1, r3]
   24894:	cmp	ip, r4
   24898:	bne	24880 <flatcc_builder_create_table@@Base+0x80>
   2489c:	mov	r3, #4
   248a0:	str	r3, [sp, #12]
   248a4:	add	r0, sp, #84	; 0x54
   248a8:	str	r0, [sp, #20]
   248ac:	str	r3, [sp, #24]
   248b0:	mov	r3, #1
   248b4:	str	r3, [sp, #16]
   248b8:	cmp	r2, #0
   248bc:	beq	248d8 <flatcc_builder_create_table@@Base+0xd8>
   248c0:	add	r3, r2, #4
   248c4:	str	r3, [sp, #12]
   248c8:	str	r1, [sp, #28]
   248cc:	str	r2, [sp, #32]
   248d0:	mov	r3, #2
   248d4:	str	r3, [sp, #16]
   248d8:	cmp	r7, #0
   248dc:	beq	2490c <flatcc_builder_create_table@@Base+0x10c>
   248e0:	ldr	r3, [sp, #12]
   248e4:	add	r3, r3, r7
   248e8:	str	r3, [sp, #12]
   248ec:	ldr	r3, [sp, #16]
   248f0:	add	r3, r3, #1
   248f4:	add	r2, sp, #88	; 0x58
   248f8:	add	r2, r2, r3, lsl #3
   248fc:	ldr	r1, [pc, #160]	; 249a4 <flatcc_builder_create_table@@Base+0x1a4>
   24900:	str	r1, [r2, #-76]	; 0xffffffb4
   24904:	str	r7, [r2, #-72]	; 0xffffffb8
   24908:	str	r3, [sp, #16]
   2490c:	ldr	r2, [r5, #136]	; 0x88
   24910:	ldr	r3, [sp, #12]
   24914:	sub	r4, r2, r3
   24918:	cmp	r2, r4
   2491c:	ble	2497c <flatcc_builder_create_table@@Base+0x17c>
   24920:	str	r3, [sp]
   24924:	ldr	r6, [r5, #44]	; 0x2c
   24928:	mov	r3, r4
   2492c:	ldr	r2, [sp, #16]
   24930:	add	r1, sp, #20
   24934:	ldr	r0, [r5, #36]	; 0x24
   24938:	blx	r6
   2493c:	cmp	r0, #0
   24940:	bne	24990 <flatcc_builder_create_table@@Base+0x190>
   24944:	str	r4, [r5, #136]	; 0x88
   24948:	mov	r0, r4
   2494c:	add	sp, sp, #92	; 0x5c
   24950:	pop	{r4, r5, r6, r7, pc}
   24954:	ldr	r3, [pc, #76]	; 249a8 <flatcc_builder_create_table@@Base+0x1a8>
   24958:	ldr	r2, [pc, #76]	; 249ac <flatcc_builder_create_table@@Base+0x1ac>
   2495c:	ldr	r1, [pc, #76]	; 249b0 <flatcc_builder_create_table@@Base+0x1b0>
   24960:	ldr	r0, [pc, #76]	; 249b4 <flatcc_builder_create_table@@Base+0x1b4>
   24964:	bl	126a8 <__assert_fail@plt>
   24968:	ldr	r3, [pc, #56]	; 249a8 <flatcc_builder_create_table@@Base+0x1a8>
   2496c:	ldr	r2, [pc, #68]	; 249b8 <flatcc_builder_create_table@@Base+0x1b8>
   24970:	ldr	r1, [pc, #56]	; 249b0 <flatcc_builder_create_table@@Base+0x1b0>
   24974:	ldr	r0, [pc, #64]	; 249bc <flatcc_builder_create_table@@Base+0x1bc>
   24978:	bl	126a8 <__assert_fail@plt>
   2497c:	ldr	r3, [pc, #60]	; 249c0 <flatcc_builder_create_table@@Base+0x1c0>
   24980:	ldr	r2, [pc, #60]	; 249c4 <flatcc_builder_create_table@@Base+0x1c4>
   24984:	ldr	r1, [pc, #36]	; 249b0 <flatcc_builder_create_table@@Base+0x1b0>
   24988:	ldr	r0, [pc, #56]	; 249c8 <flatcc_builder_create_table@@Base+0x1c8>
   2498c:	bl	126a8 <__assert_fail@plt>
   24990:	ldr	r3, [pc, #40]	; 249c0 <flatcc_builder_create_table@@Base+0x1c0>
   24994:	ldr	r2, [pc, #48]	; 249cc <flatcc_builder_create_table@@Base+0x1cc>
   24998:	ldr	r1, [pc, #16]	; 249b0 <flatcc_builder_create_table@@Base+0x1b0>
   2499c:	ldr	r0, [pc, #36]	; 249c8 <flatcc_builder_create_table@@Base+0x1c8>
   249a0:	bl	126a8 <__assert_fail@plt>
   249a4:	strdeq	fp, [r2], -r8
   249a8:	muleq	r2, r4, sp
   249ac:	ldrdeq	r0, [r0], -r5
   249b0:	andeq	ip, r2, r8, asr #32
   249b4:	andeq	ip, r2, ip, ror #5
   249b8:	ldrdeq	r0, [r0], -fp
   249bc:	andeq	ip, r2, r0, lsl #6
   249c0:	andeq	fp, r2, r4, asr #22
   249c4:	andeq	r0, r0, r7, lsl #5
   249c8:	muleq	r2, ip, r0
   249cc:	andeq	r0, r0, fp, lsl #5

000249d0 <flatcc_builder_check_required_field@@Base>:
   249d0:	ldr	r3, [r0, #32]
   249d4:	ldrh	r3, [r3, #14]
   249d8:	cmp	r3, #3
   249dc:	bne	24a08 <flatcc_builder_check_required_field@@Base+0x38>
   249e0:	ldrh	r3, [r0, #8]
   249e4:	cmp	r3, r1
   249e8:	movls	r0, #0
   249ec:	bls	24a04 <flatcc_builder_check_required_field@@Base+0x34>
   249f0:	ldr	r3, [r0, #4]
   249f4:	lsl	r1, r1, #1
   249f8:	ldrh	r0, [r3, r1]
   249fc:	adds	r0, r0, #0
   24a00:	movne	r0, #1
   24a04:	bx	lr
   24a08:	push	{r4, lr}
   24a0c:	ldr	r3, [pc, #12]	; 24a20 <flatcc_builder_check_required_field@@Base+0x50>
   24a10:	ldr	r2, [pc, #12]	; 24a24 <flatcc_builder_check_required_field@@Base+0x54>
   24a14:	ldr	r1, [pc, #12]	; 24a28 <flatcc_builder_check_required_field@@Base+0x58>
   24a18:	ldr	r0, [pc, #12]	; 24a2c <flatcc_builder_check_required_field@@Base+0x5c>
   24a1c:	bl	126a8 <__assert_fail@plt>
   24a20:			; <UNDEFINED> instruction: 0x0002bdb0
   24a24:	strdeq	r0, [r0], -r8
   24a28:	andeq	ip, r2, r8, asr #32
   24a2c:	andeq	ip, r2, ip, lsl #6

00024a30 <flatcc_builder_check_union_field@@Base>:
   24a30:	ldr	r3, [r0, #32]
   24a34:	ldrh	r3, [r3, #14]
   24a38:	cmp	r3, #3
   24a3c:	bne	24a98 <flatcc_builder_check_union_field@@Base+0x68>
   24a40:	cmp	r1, #0
   24a44:	moveq	r0, #0
   24a48:	beq	24ac0 <flatcc_builder_check_union_field@@Base+0x90>
   24a4c:	ldrh	r3, [r0, #8]
   24a50:	cmp	r3, r1
   24a54:	movls	r0, #0
   24a58:	bls	24ac0 <flatcc_builder_check_union_field@@Base+0x90>
   24a5c:	ldr	r3, [r0, #4]
   24a60:	sub	r1, r1, #-2147483647	; 0x80000001
   24a64:	lsl	r1, r1, #1
   24a68:	ldrh	r2, [r3, r1]
   24a6c:	cmp	r2, #0
   24a70:	beq	24ab0 <flatcc_builder_check_union_field@@Base+0x80>
   24a74:	ldr	r0, [r0, #16]
   24a78:	ldrb	r2, [r0, r2]
   24a7c:	cmp	r2, #0
   24a80:	bne	24ac4 <flatcc_builder_check_union_field@@Base+0x94>
   24a84:	add	r1, r3, r1
   24a88:	ldrh	r0, [r1, #2]
   24a8c:	clz	r0, r0
   24a90:	lsr	r0, r0, #5
   24a94:	b	24ac0 <flatcc_builder_check_union_field@@Base+0x90>
   24a98:	push	{r4, lr}
   24a9c:	ldr	r3, [pc, #52]	; 24ad8 <flatcc_builder_check_union_field@@Base+0xa8>
   24aa0:	ldr	r2, [pc, #52]	; 24adc <flatcc_builder_check_union_field@@Base+0xac>
   24aa4:	ldr	r1, [pc, #52]	; 24ae0 <flatcc_builder_check_union_field@@Base+0xb0>
   24aa8:	ldr	r0, [pc, #52]	; 24ae4 <flatcc_builder_check_union_field@@Base+0xb4>
   24aac:	bl	126a8 <__assert_fail@plt>
   24ab0:	add	r1, r3, r1
   24ab4:	ldrh	r0, [r1, #2]
   24ab8:	clz	r0, r0
   24abc:	lsr	r0, r0, #5
   24ac0:	bx	lr
   24ac4:	add	r1, r3, r1
   24ac8:	ldrh	r0, [r1, #2]
   24acc:	adds	r0, r0, #0
   24ad0:	movne	r0, #1
   24ad4:	b	24ac0 <flatcc_builder_check_union_field@@Base+0x90>
   24ad8:	ldrdeq	fp, [r2], -r4
   24adc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   24ae0:	andeq	ip, r2, r8, asr #32
   24ae4:	andeq	ip, r2, ip, lsl #6

00024ae8 <flatcc_builder_check_required@@Base>:
   24ae8:	ldr	r3, [r0, #32]
   24aec:	ldrh	r3, [r3, #14]
   24af0:	cmp	r3, #3
   24af4:	bne	24b54 <flatcc_builder_check_required@@Base+0x6c>
   24af8:	ldrh	r3, [r0, #8]
   24afc:	cmp	r3, r2
   24b00:	movlt	r0, #0
   24b04:	blt	24b70 <flatcc_builder_check_required@@Base+0x88>
   24b08:	cmp	r2, #0
   24b0c:	ble	24b74 <flatcc_builder_check_required@@Base+0x8c>
   24b10:	ldr	ip, [r0, #4]
   24b14:	ldrh	r3, [r1]
   24b18:	lsl	r3, r3, #1
   24b1c:	ldrh	r3, [ip, r3]
   24b20:	cmp	r3, #0
   24b24:	beq	24b7c <flatcc_builder_check_required@@Base+0x94>
   24b28:	add	r0, r1, #2
   24b2c:	add	r2, r1, r2, lsl #1
   24b30:	cmp	r0, r2
   24b34:	beq	24b6c <flatcc_builder_check_required@@Base+0x84>
   24b38:	ldrh	r3, [r0], #2
   24b3c:	lsl	r3, r3, #1
   24b40:	ldrh	r3, [ip, r3]
   24b44:	cmp	r3, #0
   24b48:	bne	24b30 <flatcc_builder_check_required@@Base+0x48>
   24b4c:	mov	r0, #0
   24b50:	b	24b70 <flatcc_builder_check_required@@Base+0x88>
   24b54:	push	{r4, lr}
   24b58:	ldr	r3, [pc, #36]	; 24b84 <flatcc_builder_check_required@@Base+0x9c>
   24b5c:	ldr	r2, [pc, #36]	; 24b88 <flatcc_builder_check_required@@Base+0xa0>
   24b60:	ldr	r1, [pc, #36]	; 24b8c <flatcc_builder_check_required@@Base+0xa4>
   24b64:	ldr	r0, [pc, #36]	; 24b90 <flatcc_builder_check_required@@Base+0xa8>
   24b68:	bl	126a8 <__assert_fail@plt>
   24b6c:	mov	r0, #1
   24b70:	bx	lr
   24b74:	mov	r0, #1
   24b78:	b	24b70 <flatcc_builder_check_required@@Base+0x88>
   24b7c:	mov	r0, #0
   24b80:	b	24b70 <flatcc_builder_check_required@@Base+0x88>
   24b84:	strdeq	fp, [r2], -r8
   24b88:	andeq	r0, r0, r1, lsl r5
   24b8c:	andeq	ip, r2, r8, asr #32
   24b90:	andeq	ip, r2, ip, lsl #6

00024b94 <flatcc_builder_end_table@@Base>:
   24b94:	push	{r4, r5, r6, r7, lr}
   24b98:	sub	sp, sp, #20
   24b9c:	ldr	r3, [r0, #32]
   24ba0:	ldrh	r3, [r3, #14]
   24ba4:	cmp	r3, #3
   24ba8:	bne	24c18 <flatcc_builder_end_table@@Base+0x84>
   24bac:	mov	r4, r0
   24bb0:	ldr	r1, [r0, #4]
   24bb4:	sub	r6, r1, #4
   24bb8:	ldrh	r5, [r0, #8]
   24bbc:	add	r5, r5, #2
   24bc0:	lsl	r5, r5, #1
   24bc4:	uxth	r5, r5
   24bc8:	strh	r5, [r1, #-4]
   24bcc:	ldr	r3, [r0, #20]
   24bd0:	add	r3, r3, #4
   24bd4:	uxth	r2, r3
   24bd8:	strh	r2, [r1, #-2]
   24bdc:	ldr	r3, [r0, #12]
   24be0:	eor	r3, r3, r5
   24be4:	ldr	r1, [pc, #328]	; 24d34 <flatcc_builder_end_table@@Base+0x1a0>
   24be8:	mul	r3, r1, r3
   24bec:	eor	r3, r3, r2
   24bf0:	mul	r3, r1, r3
   24bf4:	str	r3, [r0, #12]
   24bf8:	mov	r2, r5
   24bfc:	mov	r1, r6
   24c00:	bl	24488 <flatcc_builder_create_cached_vtable@@Base>
   24c04:	subs	r7, r0, #0
   24c08:	bne	24c2c <flatcc_builder_end_table@@Base+0x98>
   24c0c:	mov	r0, r7
   24c10:	add	sp, sp, #20
   24c14:	pop	{r4, r5, r6, r7, pc}
   24c18:	ldr	r3, [pc, #280]	; 24d38 <flatcc_builder_end_table@@Base+0x1a4>
   24c1c:	ldr	r2, [pc, #280]	; 24d3c <flatcc_builder_end_table@@Base+0x1a8>
   24c20:	ldr	r1, [pc, #280]	; 24d40 <flatcc_builder_end_table@@Base+0x1ac>
   24c24:	ldr	r0, [pc, #280]	; 24d44 <flatcc_builder_end_table@@Base+0x1b0>
   24c28:	bl	126a8 <__assert_fail@plt>
   24c2c:	mov	r2, r5
   24c30:	mov	r1, #0
   24c34:	mov	r0, r6
   24c38:	bl	12654 <memset@plt>
   24c3c:	ldr	r3, [r4, #32]
   24c40:	ldr	r1, [r4, #76]	; 0x4c
   24c44:	ldr	r3, [r3, #20]
   24c48:	add	r1, r1, r3
   24c4c:	ldrh	r3, [r4, #130]	; 0x82
   24c50:	str	r7, [sp, #8]
   24c54:	ldr	r2, [r4]
   24c58:	sub	r2, r2, r1
   24c5c:	asr	r2, r2, #1
   24c60:	str	r2, [sp, #4]
   24c64:	str	r1, [sp]
   24c68:	ldr	r2, [r4, #20]
   24c6c:	ldr	r1, [r4, #16]
   24c70:	mov	r0, r4
   24c74:	bl	24800 <flatcc_builder_create_table@@Base>
   24c78:	subs	r7, r0, #0
   24c7c:	beq	24c0c <flatcc_builder_end_table@@Base+0x78>
   24c80:	ldr	r3, [r4, #32]
   24c84:	ldr	r2, [r3, #24]
   24c88:	str	r2, [r4, #12]
   24c8c:	ldrh	r2, [r3, #28]
   24c90:	strh	r2, [r4, #8]
   24c94:	ldr	r2, [r4, #52]	; 0x34
   24c98:	ldr	r1, [r3, #16]
   24c9c:	add	r2, r2, r1
   24ca0:	str	r2, [r4, #4]
   24ca4:	ldr	r2, [r4, #76]	; 0x4c
   24ca8:	ldr	r3, [r3, #20]
   24cac:	add	r3, r2, r3
   24cb0:	str	r3, [r4]
   24cb4:	ldr	r2, [r4, #20]
   24cb8:	mov	r1, #0
   24cbc:	ldr	r0, [r4, #16]
   24cc0:	bl	12654 <memset@plt>
   24cc4:	ldr	r2, [r4, #32]
   24cc8:	ldr	r3, [r2, #8]
   24ccc:	str	r3, [r4, #20]
   24cd0:	ldr	r0, [r2]
   24cd4:	str	r0, [r4, #28]
   24cd8:	ldr	r1, [r2, #4]
   24cdc:	ldr	r3, [r4, #60]	; 0x3c
   24ce0:	add	r3, r3, r0
   24ce4:	str	r3, [r4, #16]
   24ce8:	ldr	r3, [r4, #64]	; 0x40
   24cec:	sub	r3, r3, r0
   24cf0:	cmp	r3, r1
   24cf4:	movcs	r3, r1
   24cf8:	str	r3, [r4, #24]
   24cfc:	str	r1, [r2, #4]
   24d00:	ldrh	r3, [r4, #130]	; 0x82
   24d04:	ldrh	r2, [r4, #128]	; 0x80
   24d08:	cmp	r2, r3
   24d0c:	strhcc	r3, [r4, #128]	; 0x80
   24d10:	ldr	r3, [r4, #32]
   24d14:	ldrh	r2, [r3, #12]
   24d18:	strh	r2, [r4, #130]	; 0x82
   24d1c:	sub	r3, r3, #36	; 0x24
   24d20:	str	r3, [r4, #32]
   24d24:	ldr	r3, [r4, #156]	; 0x9c
   24d28:	sub	r3, r3, #1
   24d2c:	str	r3, [r4, #156]	; 0x9c
   24d30:	b	24c0c <flatcc_builder_end_table@@Base+0x78>
   24d34:			; <UNDEFINED> instruction: 0x9e3779b1
   24d38:	andeq	fp, r2, r8, lsl lr
   24d3c:	andeq	r0, r0, r5, lsr #10
   24d40:	andeq	ip, r2, r8, asr #32
   24d44:	andeq	ip, r2, ip, lsl #6

00024d48 <flatcc_builder_create_vector@@Base>:
   24d48:	push	{r4, r5, r6, lr}
   24d4c:	sub	sp, sp, #88	; 0x58
   24d50:	mov	r4, r0
   24d54:	ldrh	r0, [sp, #104]	; 0x68
   24d58:	ldr	ip, [sp, #108]	; 0x6c
   24d5c:	cmp	r2, ip
   24d60:	bhi	24e44 <flatcc_builder_create_vector@@Base+0xfc>
   24d64:	cmp	r0, #4
   24d68:	movcc	r0, #4
   24d6c:	ldrh	ip, [r4, #128]	; 0x80
   24d70:	cmp	ip, r0
   24d74:	strhcc	r0, [r4, #128]	; 0x80
   24d78:	mul	r3, r3, r2
   24d7c:	str	r2, [sp, #84]	; 0x54
   24d80:	ldr	r2, [r4, #136]	; 0x88
   24d84:	sub	ip, r2, r3
   24d88:	sub	r0, r0, #1
   24d8c:	and	r0, r0, ip
   24d90:	mov	ip, #4
   24d94:	str	ip, [sp, #12]
   24d98:	add	lr, sp, #84	; 0x54
   24d9c:	str	lr, [sp, #20]
   24da0:	str	ip, [sp, #24]
   24da4:	mov	ip, #1
   24da8:	str	ip, [sp, #16]
   24dac:	cmp	r3, #0
   24db0:	beq	24dcc <flatcc_builder_create_vector@@Base+0x84>
   24db4:	add	ip, r3, #4
   24db8:	str	ip, [sp, #12]
   24dbc:	str	r1, [sp, #28]
   24dc0:	str	r3, [sp, #32]
   24dc4:	mov	r3, #2
   24dc8:	str	r3, [sp, #16]
   24dcc:	cmp	r0, #0
   24dd0:	beq	24e00 <flatcc_builder_create_vector@@Base+0xb8>
   24dd4:	ldr	r3, [sp, #12]
   24dd8:	add	r3, r3, r0
   24ddc:	str	r3, [sp, #12]
   24de0:	ldr	r3, [sp, #16]
   24de4:	add	r3, r3, #1
   24de8:	add	r1, sp, #88	; 0x58
   24dec:	add	r1, r1, r3, lsl #3
   24df0:	ldr	ip, [pc, #136]	; 24e80 <flatcc_builder_create_vector@@Base+0x138>
   24df4:	str	ip, [r1, #-76]	; 0xffffffb4
   24df8:	str	r0, [r1, #-72]	; 0xffffffb8
   24dfc:	str	r3, [sp, #16]
   24e00:	ldr	r3, [sp, #12]
   24e04:	sub	r5, r2, r3
   24e08:	cmp	r2, r5
   24e0c:	ble	24e58 <flatcc_builder_create_vector@@Base+0x110>
   24e10:	str	r3, [sp]
   24e14:	ldr	r6, [r4, #44]	; 0x2c
   24e18:	mov	r3, r5
   24e1c:	ldr	r2, [sp, #16]
   24e20:	add	r1, sp, #20
   24e24:	ldr	r0, [r4, #36]	; 0x24
   24e28:	blx	r6
   24e2c:	cmp	r0, #0
   24e30:	bne	24e6c <flatcc_builder_create_vector@@Base+0x124>
   24e34:	str	r5, [r4, #136]	; 0x88
   24e38:	mov	r0, r5
   24e3c:	add	sp, sp, #88	; 0x58
   24e40:	pop	{r4, r5, r6, pc}
   24e44:	ldr	r3, [pc, #56]	; 24e84 <flatcc_builder_create_vector@@Base+0x13c>
   24e48:	ldr	r2, [pc, #56]	; 24e88 <flatcc_builder_create_vector@@Base+0x140>
   24e4c:	ldr	r1, [pc, #56]	; 24e8c <flatcc_builder_create_vector@@Base+0x144>
   24e50:	ldr	r0, [pc, #56]	; 24e90 <flatcc_builder_create_vector@@Base+0x148>
   24e54:	bl	126a8 <__assert_fail@plt>
   24e58:	ldr	r3, [pc, #52]	; 24e94 <flatcc_builder_create_vector@@Base+0x14c>
   24e5c:	ldr	r2, [pc, #52]	; 24e98 <flatcc_builder_create_vector@@Base+0x150>
   24e60:	ldr	r1, [pc, #36]	; 24e8c <flatcc_builder_create_vector@@Base+0x144>
   24e64:	ldr	r0, [pc, #48]	; 24e9c <flatcc_builder_create_vector@@Base+0x154>
   24e68:	bl	126a8 <__assert_fail@plt>
   24e6c:	ldr	r3, [pc, #32]	; 24e94 <flatcc_builder_create_vector@@Base+0x14c>
   24e70:	ldr	r2, [pc, #40]	; 24ea0 <flatcc_builder_create_vector@@Base+0x158>
   24e74:	ldr	r1, [pc, #16]	; 24e8c <flatcc_builder_create_vector@@Base+0x144>
   24e78:	ldr	r0, [pc, #28]	; 24e9c <flatcc_builder_create_vector@@Base+0x154>
   24e7c:	bl	126a8 <__assert_fail@plt>
   24e80:	strdeq	fp, [r2], -r8
   24e84:	andeq	fp, r2, r4, lsr lr
   24e88:	andeq	r0, r0, r5, asr r5
   24e8c:	andeq	ip, r2, r8, asr #32
   24e90:	andeq	ip, r2, r8, lsr r3
   24e94:	andeq	fp, r2, r4, asr #22
   24e98:	andeq	r0, r0, r7, lsl #5
   24e9c:	muleq	r2, ip, r0
   24ea0:	andeq	r0, r0, fp, lsl #5

00024ea4 <flatcc_builder_end_vector@@Base>:
   24ea4:	push	{r4, r5, lr}
   24ea8:	sub	sp, sp, #12
   24eac:	ldr	r1, [r0, #32]
   24eb0:	ldrh	r3, [r1, #14]
   24eb4:	cmp	r3, #4
   24eb8:	bne	24ef4 <flatcc_builder_end_vector@@Base+0x50>
   24ebc:	mov	r4, r0
   24ec0:	ldr	r3, [r1, #16]
   24ec4:	ldr	r2, [r1, #20]
   24ec8:	ldr	r1, [r1, #24]
   24ecc:	str	r1, [sp, #4]
   24ed0:	ldrh	r1, [r0, #130]	; 0x82
   24ed4:	str	r1, [sp]
   24ed8:	ldr	r1, [r0, #16]
   24edc:	bl	24d48 <flatcc_builder_create_vector@@Base>
   24ee0:	subs	r5, r0, #0
   24ee4:	bne	24f08 <flatcc_builder_end_vector@@Base+0x64>
   24ee8:	mov	r0, r5
   24eec:	add	sp, sp, #12
   24ef0:	pop	{r4, r5, pc}
   24ef4:	ldr	r3, [pc, #140]	; 24f88 <flatcc_builder_end_vector@@Base+0xe4>
   24ef8:	ldr	r2, [pc, #140]	; 24f8c <flatcc_builder_end_vector@@Base+0xe8>
   24efc:	ldr	r1, [pc, #140]	; 24f90 <flatcc_builder_end_vector@@Base+0xec>
   24f00:	ldr	r0, [pc, #140]	; 24f94 <flatcc_builder_end_vector@@Base+0xf0>
   24f04:	bl	126a8 <__assert_fail@plt>
   24f08:	ldr	r2, [r4, #20]
   24f0c:	mov	r1, #0
   24f10:	ldr	r0, [r4, #16]
   24f14:	bl	12654 <memset@plt>
   24f18:	ldr	r2, [r4, #32]
   24f1c:	ldr	r3, [r2, #8]
   24f20:	str	r3, [r4, #20]
   24f24:	ldr	r0, [r2]
   24f28:	str	r0, [r4, #28]
   24f2c:	ldr	r1, [r2, #4]
   24f30:	ldr	r3, [r4, #60]	; 0x3c
   24f34:	add	r3, r3, r0
   24f38:	str	r3, [r4, #16]
   24f3c:	ldr	r3, [r4, #64]	; 0x40
   24f40:	sub	r3, r3, r0
   24f44:	cmp	r3, r1
   24f48:	movcs	r3, r1
   24f4c:	str	r3, [r4, #24]
   24f50:	str	r1, [r2, #4]
   24f54:	ldrh	r3, [r4, #130]	; 0x82
   24f58:	ldrh	r2, [r4, #128]	; 0x80
   24f5c:	cmp	r2, r3
   24f60:	strhcc	r3, [r4, #128]	; 0x80
   24f64:	ldr	r3, [r4, #32]
   24f68:	ldrh	r2, [r3, #12]
   24f6c:	strh	r2, [r4, #130]	; 0x82
   24f70:	sub	r3, r3, #36	; 0x24
   24f74:	str	r3, [r4, #32]
   24f78:	ldr	r3, [r4, #156]	; 0x9c
   24f7c:	sub	r3, r3, #1
   24f80:	str	r3, [r4, #156]	; 0x9c
   24f84:	b	24ee8 <flatcc_builder_end_vector@@Base+0x44>
   24f88:	andeq	fp, r2, r4, asr lr
   24f8c:	andeq	r0, r0, r8, ror r5
   24f90:	andeq	ip, r2, r8, asr #32
   24f94:	andeq	ip, r2, r0, lsl #3

00024f98 <flatcc_builder_vector_count@@Base>:
   24f98:	ldr	r3, [r0, #32]
   24f9c:	ldr	r0, [r3, #20]
   24fa0:	bx	lr

00024fa4 <flatcc_builder_vector_edit@@Base>:
   24fa4:	ldr	r0, [r0, #16]
   24fa8:	bx	lr

00024fac <flatcc_builder_create_offset_vector_direct@@Base>:
   24fac:	push	{r4, lr}
   24fb0:	mov	r3, #0
   24fb4:	bl	22750 <flatcc_builder_default_alloc@@Base+0x378>
   24fb8:	pop	{r4, pc}

00024fbc <flatcc_builder_end_offset_vector@@Base>:
   24fbc:	push	{r4, r5, r6, lr}
   24fc0:	ldr	r3, [r0, #32]
   24fc4:	ldrh	r2, [r3, #14]
   24fc8:	cmp	r2, #5
   24fcc:	bne	24ff0 <flatcc_builder_end_offset_vector@@Base+0x34>
   24fd0:	mov	r4, r0
   24fd4:	ldr	r2, [r3, #20]
   24fd8:	ldr	r1, [r0, #16]
   24fdc:	bl	24fac <flatcc_builder_create_offset_vector_direct@@Base>
   24fe0:	subs	r5, r0, #0
   24fe4:	bne	25004 <flatcc_builder_end_offset_vector@@Base+0x48>
   24fe8:	mov	r0, r5
   24fec:	pop	{r4, r5, r6, pc}
   24ff0:	ldr	r3, [pc, #140]	; 25084 <flatcc_builder_end_offset_vector@@Base+0xc8>
   24ff4:	ldr	r2, [pc, #140]	; 25088 <flatcc_builder_end_offset_vector@@Base+0xcc>
   24ff8:	ldr	r1, [pc, #140]	; 2508c <flatcc_builder_end_offset_vector@@Base+0xd0>
   24ffc:	ldr	r0, [pc, #140]	; 25090 <flatcc_builder_end_offset_vector@@Base+0xd4>
   25000:	bl	126a8 <__assert_fail@plt>
   25004:	ldr	r2, [r4, #20]
   25008:	mov	r1, #0
   2500c:	ldr	r0, [r4, #16]
   25010:	bl	12654 <memset@plt>
   25014:	ldr	r2, [r4, #32]
   25018:	ldr	r3, [r2, #8]
   2501c:	str	r3, [r4, #20]
   25020:	ldr	r0, [r2]
   25024:	str	r0, [r4, #28]
   25028:	ldr	r1, [r2, #4]
   2502c:	ldr	r3, [r4, #60]	; 0x3c
   25030:	add	r3, r3, r0
   25034:	str	r3, [r4, #16]
   25038:	ldr	r3, [r4, #64]	; 0x40
   2503c:	sub	r3, r3, r0
   25040:	cmp	r3, r1
   25044:	movcs	r3, r1
   25048:	str	r3, [r4, #24]
   2504c:	str	r1, [r2, #4]
   25050:	ldrh	r3, [r4, #130]	; 0x82
   25054:	ldrh	r2, [r4, #128]	; 0x80
   25058:	cmp	r2, r3
   2505c:	strhcc	r3, [r4, #128]	; 0x80
   25060:	ldr	r3, [r4, #32]
   25064:	ldrh	r2, [r3, #12]
   25068:	strh	r2, [r4, #130]	; 0x82
   2506c:	sub	r3, r3, #36	; 0x24
   25070:	str	r3, [r4, #32]
   25074:	ldr	r3, [r4, #156]	; 0x9c
   25078:	sub	r3, r3, #1
   2507c:	str	r3, [r4, #156]	; 0x9c
   25080:	b	24fe8 <flatcc_builder_end_offset_vector@@Base+0x2c>
   25084:	andeq	fp, r2, r0, ror lr
   25088:	andeq	r0, r0, r8, asr #11
   2508c:	andeq	ip, r2, r8, asr #32
   25090:	andeq	ip, r2, ip, ror #3

00025094 <flatcc_builder_create_offset_vector@@Base>:
   25094:	push	{r4, r5, r6, lr}
   25098:	mov	r4, r0
   2509c:	mov	r6, r1
   250a0:	mov	r5, r2
   250a4:	bl	23f20 <flatcc_builder_start_offset_vector@@Base>
   250a8:	cmp	r0, #0
   250ac:	beq	250b8 <flatcc_builder_create_offset_vector@@Base+0x24>
   250b0:	mov	r0, #0
   250b4:	pop	{r4, r5, r6, pc}
   250b8:	mov	r1, r5
   250bc:	mov	r0, r4
   250c0:	bl	238f0 <flatcc_builder_extend_offset_vector@@Base>
   250c4:	cmp	r0, #0
   250c8:	beq	250e4 <flatcc_builder_create_offset_vector@@Base+0x50>
   250cc:	lsl	r2, r5, #2
   250d0:	mov	r1, r6
   250d4:	bl	125ac <memcpy@plt>
   250d8:	mov	r0, r4
   250dc:	bl	24fbc <flatcc_builder_end_offset_vector@@Base>
   250e0:	pop	{r4, r5, r6, pc}
   250e4:	mov	r0, #0
   250e8:	pop	{r4, r5, r6, pc}

000250ec <flatcc_builder_end_offset_vector_for_unions@@Base>:
   250ec:	push	{r4, r5, r6, lr}
   250f0:	mov	r4, r0
   250f4:	ldr	r2, [r0, #32]
   250f8:	ldrh	r0, [r2, #14]
   250fc:	cmp	r0, #5
   25100:	bne	25128 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   25104:	mov	r3, r1
   25108:	ldr	r2, [r2, #20]
   2510c:	ldr	r1, [r4, #16]
   25110:	mov	r0, r4
   25114:	bl	22750 <flatcc_builder_default_alloc@@Base+0x378>
   25118:	subs	r5, r0, #0
   2511c:	bne	2513c <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   25120:	mov	r0, r5
   25124:	pop	{r4, r5, r6, pc}
   25128:	ldr	r3, [pc, #140]	; 251bc <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   2512c:	ldr	r2, [pc, #140]	; 251c0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd4>
   25130:	ldr	r1, [pc, #140]	; 251c4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   25134:	ldr	r0, [pc, #140]	; 251c8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   25138:	bl	126a8 <__assert_fail@plt>
   2513c:	ldr	r2, [r4, #20]
   25140:	mov	r1, #0
   25144:	ldr	r0, [r4, #16]
   25148:	bl	12654 <memset@plt>
   2514c:	ldr	r2, [r4, #32]
   25150:	ldr	r3, [r2, #8]
   25154:	str	r3, [r4, #20]
   25158:	ldr	r0, [r2]
   2515c:	str	r0, [r4, #28]
   25160:	ldr	r1, [r2, #4]
   25164:	ldr	r3, [r4, #60]	; 0x3c
   25168:	add	r3, r3, r0
   2516c:	str	r3, [r4, #16]
   25170:	ldr	r3, [r4, #64]	; 0x40
   25174:	sub	r3, r3, r0
   25178:	cmp	r3, r1
   2517c:	movcs	r3, r1
   25180:	str	r3, [r4, #24]
   25184:	str	r1, [r2, #4]
   25188:	ldrh	r3, [r4, #130]	; 0x82
   2518c:	ldrh	r2, [r4, #128]	; 0x80
   25190:	cmp	r2, r3
   25194:	strhcc	r3, [r4, #128]	; 0x80
   25198:	ldr	r3, [r4, #32]
   2519c:	ldrh	r2, [r3, #12]
   251a0:	strh	r2, [r4, #130]	; 0x82
   251a4:	sub	r3, r3, #36	; 0x24
   251a8:	str	r3, [r4, #32]
   251ac:	ldr	r3, [r4, #156]	; 0x9c
   251b0:	sub	r3, r3, #1
   251b4:	str	r3, [r4, #156]	; 0x9c
   251b8:	b	25120 <flatcc_builder_end_offset_vector_for_unions@@Base+0x34>
   251bc:	muleq	r2, r4, lr
   251c0:	ldrdeq	r0, [r0], -r5
   251c4:	andeq	ip, r2, r8, asr #32
   251c8:	andeq	ip, r2, ip, ror #3

000251cc <flatcc_builder_offset_vector_edit@@Base>:
   251cc:	ldr	r0, [r0, #16]
   251d0:	bx	lr

000251d4 <flatcc_builder_offset_vector_count@@Base>:
   251d4:	ldr	r3, [r0, #32]
   251d8:	ldr	r0, [r3, #20]
   251dc:	bx	lr

000251e0 <flatcc_builder_create_union_vector_direct@@Base>:
   251e0:	push	{r4, r5, r6, r7, lr}
   251e4:	sub	sp, sp, #12
   251e8:	mov	r4, r0
   251ec:	mov	r5, r1
   251f0:	mov	r6, r2
   251f4:	mov	r1, r3
   251f8:	mov	r3, r2
   251fc:	ldr	r2, [sp, #32]
   25200:	mov	r0, r5
   25204:	bl	22750 <flatcc_builder_default_alloc@@Base+0x378>
   25208:	subs	r7, r0, #0
   2520c:	bne	25228 <flatcc_builder_create_union_vector_direct@@Base+0x48>
   25210:	mov	r3, #0
   25214:	str	r3, [r4]
   25218:	str	r3, [r4, #4]
   2521c:	mov	r0, r4
   25220:	add	sp, sp, #12
   25224:	pop	{r4, r5, r6, r7, pc}
   25228:	mvn	r3, #0
   2522c:	str	r3, [sp, #4]
   25230:	mov	r3, #1
   25234:	str	r3, [sp]
   25238:	ldr	r2, [sp, #32]
   2523c:	mov	r1, r6
   25240:	mov	r0, r5
   25244:	bl	24d48 <flatcc_builder_create_vector@@Base>
   25248:	cmp	r0, #0
   2524c:	moveq	r3, #0
   25250:	streq	r3, [r4]
   25254:	strne	r0, [r4]
   25258:	str	r7, [r4, #4]
   2525c:	b	2521c <flatcc_builder_create_union_vector_direct@@Base+0x3c>

00025260 <flatcc_builder_create_union_vector@@Base>:
   25260:	push	{r4, r5, r6, r7, r8, lr}
   25264:	sub	sp, sp, #16
   25268:	mov	r5, r0
   2526c:	mov	r4, r1
   25270:	mov	r7, r2
   25274:	mov	r6, r3
   25278:	mov	r0, r1
   2527c:	bl	23f20 <flatcc_builder_start_offset_vector@@Base>
   25280:	cmp	r0, #0
   25284:	beq	252a0 <flatcc_builder_create_union_vector@@Base+0x40>
   25288:	mov	r3, #0
   2528c:	str	r3, [r5]
   25290:	str	r3, [r5, #4]
   25294:	mov	r0, r5
   25298:	add	sp, sp, #16
   2529c:	pop	{r4, r5, r6, r7, r8, pc}
   252a0:	mov	r1, r6
   252a4:	mov	r0, r4
   252a8:	bl	238f0 <flatcc_builder_extend_offset_vector@@Base>
   252ac:	cmp	r0, #0
   252b0:	moveq	r3, #0
   252b4:	streq	r3, [r5]
   252b8:	streq	r3, [r5, #4]
   252bc:	beq	25294 <flatcc_builder_create_union_vector@@Base+0x34>
   252c0:	ldr	r8, [r4, #20]
   252c4:	add	r1, r6, r8
   252c8:	str	r1, [r4, #20]
   252cc:	ldr	r3, [r4, #24]
   252d0:	cmp	r1, r3
   252d4:	bcs	253b8 <flatcc_builder_create_union_vector@@Base+0x158>
   252d8:	ldr	r3, [r4, #16]
   252dc:	adds	r2, r3, r8
   252e0:	beq	253d0 <flatcc_builder_create_union_vector@@Base+0x170>
   252e4:	cmp	r6, #0
   252e8:	beq	25318 <flatcc_builder_create_union_vector@@Base+0xb8>
   252ec:	mov	r1, r7
   252f0:	sub	ip, r2, #1
   252f4:	sub	r0, r3, #4
   252f8:	add	r7, r7, r6, lsl #3
   252fc:	ldrb	lr, [r1]
   25300:	strb	lr, [ip, #1]!
   25304:	ldr	lr, [r1, #4]
   25308:	str	lr, [r0, #4]!
   2530c:	add	r1, r1, #8
   25310:	cmp	r1, r7
   25314:	bne	252fc <flatcc_builder_create_union_vector@@Base+0x9c>
   25318:	str	r6, [sp]
   2531c:	mov	r1, r4
   25320:	add	r0, sp, #8
   25324:	bl	251e0 <flatcc_builder_create_union_vector_direct@@Base>
   25328:	ldr	r7, [sp, #8]
   2532c:	ldr	r6, [sp, #12]
   25330:	ldr	r2, [r4, #20]
   25334:	mov	r1, #0
   25338:	ldr	r0, [r4, #16]
   2533c:	bl	12654 <memset@plt>
   25340:	ldr	r2, [r4, #32]
   25344:	ldr	r3, [r2, #8]
   25348:	str	r3, [r4, #20]
   2534c:	ldr	r0, [r2]
   25350:	str	r0, [r4, #28]
   25354:	ldr	r1, [r2, #4]
   25358:	ldr	r3, [r4, #60]	; 0x3c
   2535c:	add	r3, r3, r0
   25360:	str	r3, [r4, #16]
   25364:	ldr	r3, [r4, #64]	; 0x40
   25368:	sub	r3, r3, r0
   2536c:	cmp	r3, r1
   25370:	movcs	r3, r1
   25374:	str	r3, [r4, #24]
   25378:	str	r1, [r2, #4]
   2537c:	ldrh	r3, [r4, #130]	; 0x82
   25380:	ldrh	r2, [r4, #128]	; 0x80
   25384:	cmp	r2, r3
   25388:	strhcc	r3, [r4, #128]	; 0x80
   2538c:	ldr	r3, [r4, #32]
   25390:	ldrh	r2, [r3, #12]
   25394:	strh	r2, [r4, #130]	; 0x82
   25398:	sub	r3, r3, #36	; 0x24
   2539c:	str	r3, [r4, #32]
   253a0:	ldr	r3, [r4, #156]	; 0x9c
   253a4:	sub	r3, r3, #1
   253a8:	str	r3, [r4, #156]	; 0x9c
   253ac:	str	r7, [r5]
   253b0:	str	r6, [r5, #4]
   253b4:	b	25294 <flatcc_builder_create_union_vector@@Base+0x34>
   253b8:	mvn	r2, #3
   253bc:	add	r1, r1, #1
   253c0:	mov	r0, r4
   253c4:	bl	22364 <main@@Base+0x78>
   253c8:	cmp	r0, #0
   253cc:	beq	252d8 <flatcc_builder_create_union_vector@@Base+0x78>
   253d0:	mov	r3, #0
   253d4:	str	r3, [r5]
   253d8:	str	r3, [r5, #4]
   253dc:	b	25294 <flatcc_builder_create_union_vector@@Base+0x34>

000253e0 <flatcc_builder_start_union_vector@@Base>:
   253e0:	push	{r4, lr}
   253e4:	mov	r4, r0
   253e8:	mov	r1, #4
   253ec:	bl	22604 <flatcc_builder_default_alloc@@Base+0x22c>
   253f0:	cmp	r0, #0
   253f4:	bne	25450 <flatcc_builder_start_union_vector@@Base+0x70>
   253f8:	ldr	r3, [r4, #32]
   253fc:	mov	r2, #8
   25400:	str	r2, [r3, #16]
   25404:	ldr	r3, [r4, #32]
   25408:	mov	r2, #0
   2540c:	str	r2, [r3, #20]
   25410:	ldr	r3, [r4, #32]
   25414:	mov	r2, #7
   25418:	strh	r2, [r3, #14]
   2541c:	ldr	r1, [r4, #28]
   25420:	ldr	r2, [r4, #60]	; 0x3c
   25424:	add	r2, r2, r1
   25428:	str	r2, [r4, #16]
   2542c:	ldr	r3, [r4, #64]	; 0x40
   25430:	sub	r3, r3, r1
   25434:	cmn	r3, #4
   25438:	mvnhi	r3, #3
   2543c:	str	r3, [r4, #24]
   25440:	ldr	r3, [r4, #32]
   25444:	mvn	r2, #3
   25448:	str	r2, [r3, #4]
   2544c:	pop	{r4, pc}
   25450:	mvn	r0, #0
   25454:	pop	{r4, pc}

00025458 <flatcc_builder_end_union_vector@@Base>:
   25458:	push	{r4, r5, r6, r7, r8, lr}
   2545c:	sub	sp, sp, #16
   25460:	ldr	r3, [r1, #32]
   25464:	ldrh	r2, [r3, #14]
   25468:	cmp	r2, #7
   2546c:	bne	25584 <flatcc_builder_end_union_vector@@Base+0x12c>
   25470:	mov	r6, r0
   25474:	mov	r4, r1
   25478:	ldr	r5, [r3, #20]
   2547c:	ldr	r8, [r1, #20]
   25480:	add	r1, r5, r5, lsl #2
   25484:	add	r1, r1, r8
   25488:	str	r1, [r4, #20]
   2548c:	ldr	r3, [r4, #24]
   25490:	cmp	r1, r3
   25494:	bcs	25598 <flatcc_builder_end_union_vector@@Base+0x140>
   25498:	ldr	r7, [r4, #16]
   2549c:	adds	r3, r7, r8
   254a0:	beq	255b0 <flatcc_builder_end_union_vector@@Base+0x158>
   254a4:	add	r2, r3, r5, lsl #2
   254a8:	cmp	r5, #0
   254ac:	beq	254dc <flatcc_builder_end_union_vector@@Base+0x84>
   254b0:	mov	r1, r7
   254b4:	sub	ip, r2, #1
   254b8:	sub	r0, r3, #4
   254bc:	add	r7, r7, r5, lsl #3
   254c0:	ldrb	lr, [r1]
   254c4:	strb	lr, [ip, #1]!
   254c8:	ldr	lr, [r1, #4]
   254cc:	str	lr, [r0, #4]!
   254d0:	add	r1, r1, #8
   254d4:	cmp	r1, r7
   254d8:	bne	254c0 <flatcc_builder_end_union_vector@@Base+0x68>
   254dc:	str	r5, [sp]
   254e0:	mov	r1, r4
   254e4:	add	r0, sp, #8
   254e8:	bl	251e0 <flatcc_builder_create_union_vector_direct@@Base>
   254ec:	ldr	r7, [sp, #8]
   254f0:	ldr	r5, [sp, #12]
   254f4:	ldr	r2, [r4, #20]
   254f8:	mov	r1, #0
   254fc:	ldr	r0, [r4, #16]
   25500:	bl	12654 <memset@plt>
   25504:	ldr	r2, [r4, #32]
   25508:	ldr	r3, [r2, #8]
   2550c:	str	r3, [r4, #20]
   25510:	ldr	r0, [r2]
   25514:	str	r0, [r4, #28]
   25518:	ldr	r1, [r2, #4]
   2551c:	ldr	r3, [r4, #60]	; 0x3c
   25520:	add	r3, r3, r0
   25524:	str	r3, [r4, #16]
   25528:	ldr	r3, [r4, #64]	; 0x40
   2552c:	sub	r3, r3, r0
   25530:	cmp	r3, r1
   25534:	movcs	r3, r1
   25538:	str	r3, [r4, #24]
   2553c:	str	r1, [r2, #4]
   25540:	ldrh	r3, [r4, #130]	; 0x82
   25544:	ldrh	r2, [r4, #128]	; 0x80
   25548:	cmp	r2, r3
   2554c:	strhcc	r3, [r4, #128]	; 0x80
   25550:	ldr	r3, [r4, #32]
   25554:	ldrh	r2, [r3, #12]
   25558:	strh	r2, [r4, #130]	; 0x82
   2555c:	sub	r3, r3, #36	; 0x24
   25560:	str	r3, [r4, #32]
   25564:	ldr	r3, [r4, #156]	; 0x9c
   25568:	sub	r3, r3, #1
   2556c:	str	r3, [r4, #156]	; 0x9c
   25570:	str	r7, [r6]
   25574:	str	r5, [r6, #4]
   25578:	mov	r0, r6
   2557c:	add	sp, sp, #16
   25580:	pop	{r4, r5, r6, r7, r8, pc}
   25584:	ldr	r3, [pc, #52]	; 255c0 <flatcc_builder_end_union_vector@@Base+0x168>
   25588:	ldr	r2, [pc, #52]	; 255c4 <flatcc_builder_end_union_vector@@Base+0x16c>
   2558c:	ldr	r1, [pc, #52]	; 255c8 <flatcc_builder_end_union_vector@@Base+0x170>
   25590:	ldr	r0, [pc, #52]	; 255cc <flatcc_builder_end_union_vector@@Base+0x174>
   25594:	bl	126a8 <__assert_fail@plt>
   25598:	mvn	r2, #3
   2559c:	add	r1, r1, #1
   255a0:	mov	r0, r4
   255a4:	bl	22364 <main@@Base+0x78>
   255a8:	cmp	r0, #0
   255ac:	beq	25498 <flatcc_builder_end_union_vector@@Base+0x40>
   255b0:	mov	r3, #0
   255b4:	str	r3, [r6]
   255b8:	str	r3, [r6, #4]
   255bc:	b	25578 <flatcc_builder_end_union_vector@@Base+0x120>
   255c0:	andeq	fp, r2, r0, asr #29
   255c4:	andeq	r0, r0, r1, asr r6
   255c8:	andeq	ip, r2, r8, asr #32
   255cc:	andeq	ip, r2, ip, asr #6

000255d0 <flatcc_builder_union_vector_edit@@Base>:
   255d0:	ldr	r0, [r0, #16]
   255d4:	bx	lr

000255d8 <flatcc_builder_union_vector_count@@Base>:
   255d8:	ldr	r3, [r0, #32]
   255dc:	ldr	r0, [r3, #20]
   255e0:	bx	lr

000255e4 <flatcc_builder_extend_union_vector@@Base>:
   255e4:	push	{r4, r5, r6, lr}
   255e8:	mov	r4, r0
   255ec:	ldr	r2, [r0, #32]
   255f0:	ldr	r3, [r2, #20]
   255f4:	adds	r3, r1, r3
   255f8:	movcs	ip, #1
   255fc:	movcc	ip, #0
   25600:	cmn	r3, #-536870911	; 0xe0000001
   25604:	movls	r0, #0
   25608:	movhi	r0, #1
   2560c:	orrs	r0, ip, r0
   25610:	bne	2563c <flatcc_builder_extend_union_vector@@Base+0x58>
   25614:	str	r3, [r2, #20]
   25618:	ldr	r5, [r4, #20]
   2561c:	add	r1, r5, r1, lsl #3
   25620:	str	r1, [r4, #20]
   25624:	ldr	r3, [r4, #24]
   25628:	cmp	r1, r3
   2562c:	bcs	25650 <flatcc_builder_extend_union_vector@@Base+0x6c>
   25630:	ldr	r0, [r4, #16]
   25634:	add	r0, r0, r5
   25638:	pop	{r4, r5, r6, pc}
   2563c:	ldr	r3, [pc, #44]	; 25670 <flatcc_builder_extend_union_vector@@Base+0x8c>
   25640:	mov	r2, #892	; 0x37c
   25644:	ldr	r1, [pc, #40]	; 25674 <flatcc_builder_extend_union_vector@@Base+0x90>
   25648:	ldr	r0, [pc, #40]	; 25678 <flatcc_builder_extend_union_vector@@Base+0x94>
   2564c:	bl	126a8 <__assert_fail@plt>
   25650:	mvn	r2, #3
   25654:	add	r1, r1, #1
   25658:	mov	r0, r4
   2565c:	bl	22364 <main@@Base+0x78>
   25660:	cmp	r0, #0
   25664:	beq	25630 <flatcc_builder_extend_union_vector@@Base+0x4c>
   25668:	mov	r0, #0
   2566c:	pop	{r4, r5, r6, pc}
   25670:	andeq	fp, r2, r8, lsr #24
   25674:	andeq	ip, r2, r8, asr #32
   25678:	andeq	ip, r2, r4, ror #2

0002567c <flatcc_builder_truncate_union_vector@@Base>:
   2567c:	push	{r4, lr}
   25680:	ldr	ip, [r0, #32]
   25684:	ldrh	r3, [ip, #14]
   25688:	cmp	r3, #7
   2568c:	bne	256d4 <flatcc_builder_truncate_union_vector@@Base+0x58>
   25690:	ldr	r3, [ip, #20]
   25694:	cmp	r3, r1
   25698:	bcc	256e8 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   2569c:	sub	r3, r3, r1
   256a0:	str	r3, [ip, #20]
   256a4:	ldr	r3, [r0, #32]
   256a8:	ldr	r2, [r3, #16]
   256ac:	mul	r2, r2, r1
   256b0:	ldr	r3, [r0, #20]
   256b4:	sub	r3, r3, r2
   256b8:	str	r3, [r0, #20]
   256bc:	ldr	r0, [r0, #16]
   256c0:	mov	r1, #0
   256c4:	add	r0, r0, r3
   256c8:	bl	12654 <memset@plt>
   256cc:	mov	r0, #0
   256d0:	pop	{r4, pc}
   256d4:	ldr	r3, [pc, #32]	; 256fc <flatcc_builder_truncate_union_vector@@Base+0x80>
   256d8:	ldr	r2, [pc, #32]	; 25700 <flatcc_builder_truncate_union_vector@@Base+0x84>
   256dc:	ldr	r1, [pc, #32]	; 25704 <flatcc_builder_truncate_union_vector@@Base+0x88>
   256e0:	ldr	r0, [pc, #32]	; 25708 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   256e4:	bl	126a8 <__assert_fail@plt>
   256e8:	ldr	r3, [pc, #12]	; 256fc <flatcc_builder_truncate_union_vector@@Base+0x80>
   256ec:	ldr	r2, [pc, #24]	; 2570c <flatcc_builder_truncate_union_vector@@Base+0x90>
   256f0:	ldr	r1, [pc, #12]	; 25704 <flatcc_builder_truncate_union_vector@@Base+0x88>
   256f4:	ldr	r0, [pc, #20]	; 25710 <flatcc_builder_truncate_union_vector@@Base+0x94>
   256f8:	bl	126a8 <__assert_fail@plt>
   256fc:	andeq	fp, r2, r0, ror #29
   25700:	andeq	r0, r0, r1, lsl #13
   25704:	andeq	ip, r2, r8, asr #32
   25708:	andeq	ip, r2, ip, asr #6
   2570c:	andeq	r0, r0, r2, lsl #13
   25710:	andeq	ip, r2, r0, ror r2

00025714 <flatcc_builder_union_vector_push@@Base>:
   25714:	push	{r4, r5, lr}
   25718:	sub	sp, sp, #12
   2571c:	add	r3, sp, #8
   25720:	stmdb	r3, {r1, r2}
   25724:	ldr	r2, [r0, #32]
   25728:	ldrh	r3, [r2, #14]
   2572c:	cmp	r3, #7
   25730:	bne	25788 <flatcc_builder_union_vector_push@@Base+0x74>
   25734:	mov	r4, r0
   25738:	ldr	r3, [r2, #20]
   2573c:	cmn	r3, #-536870911	; 0xe0000001
   25740:	beq	257b8 <flatcc_builder_union_vector_push@@Base+0xa4>
   25744:	add	r3, r3, #1
   25748:	str	r3, [r2, #20]
   2574c:	ldr	r5, [r0, #20]
   25750:	add	r3, r5, #8
   25754:	str	r3, [r0, #20]
   25758:	ldr	r2, [r0, #24]
   2575c:	cmp	r3, r2
   25760:	bcs	2579c <flatcc_builder_union_vector_push@@Base+0x88>
   25764:	ldr	r3, [r4, #16]
   25768:	adds	r3, r3, r5
   2576c:	moveq	r0, r3
   25770:	addne	r2, sp, #8
   25774:	ldmdbne	r2, {r0, r1}
   25778:	stmne	r3, {r0, r1}
   2577c:	movne	r0, r3
   25780:	add	sp, sp, #12
   25784:	pop	{r4, r5, pc}
   25788:	ldr	r3, [pc, #48]	; 257c0 <flatcc_builder_union_vector_push@@Base+0xac>
   2578c:	ldr	r2, [pc, #48]	; 257c4 <flatcc_builder_union_vector_push@@Base+0xb0>
   25790:	ldr	r1, [pc, #48]	; 257c8 <flatcc_builder_union_vector_push@@Base+0xb4>
   25794:	ldr	r0, [pc, #48]	; 257cc <flatcc_builder_union_vector_push@@Base+0xb8>
   25798:	bl	126a8 <__assert_fail@plt>
   2579c:	mvn	r2, #3
   257a0:	add	r1, r5, #9
   257a4:	bl	22364 <main@@Base+0x78>
   257a8:	cmp	r0, #0
   257ac:	beq	25764 <flatcc_builder_union_vector_push@@Base+0x50>
   257b0:	mov	r0, #0
   257b4:	b	25780 <flatcc_builder_union_vector_push@@Base+0x6c>
   257b8:	mov	r0, #0
   257bc:	b	25780 <flatcc_builder_union_vector_push@@Base+0x6c>
   257c0:	andeq	fp, r2, r8, lsl #30
   257c4:	andeq	r0, r0, sp, lsl #13
   257c8:	andeq	ip, r2, r8, asr #32
   257cc:	andeq	ip, r2, ip, asr #6

000257d0 <flatcc_builder_append_union_vector@@Base>:
   257d0:	push	{r4, r5, r6, r7, r8, lr}
   257d4:	mov	r6, r1
   257d8:	ldr	r1, [r0, #32]
   257dc:	ldrh	r3, [r1, #14]
   257e0:	cmp	r3, #7
   257e4:	bne	25854 <flatcc_builder_append_union_vector@@Base+0x84>
   257e8:	mov	r5, r0
   257ec:	ldr	r3, [r1, #20]
   257f0:	adds	r3, r2, r3
   257f4:	movcs	ip, #1
   257f8:	movcc	ip, #0
   257fc:	cmn	r3, #-536870911	; 0xe0000001
   25800:	movls	r0, #0
   25804:	movhi	r0, #1
   25808:	orrs	r0, ip, r0
   2580c:	bne	25868 <flatcc_builder_append_union_vector@@Base+0x98>
   25810:	str	r3, [r1, #20]
   25814:	lsl	r4, r2, #3
   25818:	ldr	r7, [r5, #20]
   2581c:	add	r1, r4, r7
   25820:	str	r1, [r5, #20]
   25824:	ldr	r3, [r5, #24]
   25828:	cmp	r1, r3
   2582c:	bcs	2587c <flatcc_builder_append_union_vector@@Base+0xac>
   25830:	ldr	r5, [r5, #16]
   25834:	adds	r5, r5, r7
   25838:	beq	2584c <flatcc_builder_append_union_vector@@Base+0x7c>
   2583c:	mov	r2, r4
   25840:	mov	r1, r6
   25844:	mov	r0, r5
   25848:	bl	125ac <memcpy@plt>
   2584c:	mov	r0, r5
   25850:	pop	{r4, r5, r6, r7, r8, pc}
   25854:	ldr	r3, [pc, #64]	; 2589c <flatcc_builder_append_union_vector@@Base+0xcc>
   25858:	ldr	r2, [pc, #64]	; 258a0 <flatcc_builder_append_union_vector@@Base+0xd0>
   2585c:	ldr	r1, [pc, #64]	; 258a4 <flatcc_builder_append_union_vector@@Base+0xd4>
   25860:	ldr	r0, [pc, #64]	; 258a8 <flatcc_builder_append_union_vector@@Base+0xd8>
   25864:	bl	126a8 <__assert_fail@plt>
   25868:	ldr	r3, [pc, #60]	; 258ac <flatcc_builder_append_union_vector@@Base+0xdc>
   2586c:	mov	r2, #892	; 0x37c
   25870:	ldr	r1, [pc, #44]	; 258a4 <flatcc_builder_append_union_vector@@Base+0xd4>
   25874:	ldr	r0, [pc, #52]	; 258b0 <flatcc_builder_append_union_vector@@Base+0xe0>
   25878:	bl	126a8 <__assert_fail@plt>
   2587c:	mvn	r2, #3
   25880:	add	r1, r1, #1
   25884:	mov	r0, r5
   25888:	bl	22364 <main@@Base+0x78>
   2588c:	cmp	r0, #0
   25890:	beq	25830 <flatcc_builder_append_union_vector@@Base+0x60>
   25894:	mov	r5, #0
   25898:	b	2584c <flatcc_builder_append_union_vector@@Base+0x7c>
   2589c:	andeq	fp, r2, ip, lsr #30
   258a0:	muleq	r0, ip, r6
   258a4:	andeq	ip, r2, r8, asr #32
   258a8:	andeq	ip, r2, ip, asr #6
   258ac:	andeq	fp, r2, r8, lsr #24
   258b0:	andeq	ip, r2, r4, ror #2

000258b4 <flatcc_builder_create_string@@Base>:
   258b4:	push	{r4, r5, r6, lr}
   258b8:	sub	sp, sp, #88	; 0x58
   258bc:	mov	r5, r0
   258c0:	str	r2, [sp, #84]	; 0x54
   258c4:	ldr	r0, [r0, #136]	; 0x88
   258c8:	sub	r3, r0, r2
   258cc:	sub	r3, r3, #1
   258d0:	and	r3, r3, #3
   258d4:	add	r3, r3, #1
   258d8:	mov	ip, #4
   258dc:	str	ip, [sp, #12]
   258e0:	add	lr, sp, #84	; 0x54
   258e4:	str	lr, [sp, #20]
   258e8:	str	ip, [sp, #24]
   258ec:	mov	ip, #1
   258f0:	str	ip, [sp, #16]
   258f4:	cmp	r2, #0
   258f8:	beq	25914 <flatcc_builder_create_string@@Base+0x60>
   258fc:	add	ip, r2, #4
   25900:	str	ip, [sp, #12]
   25904:	str	r1, [sp, #28]
   25908:	str	r2, [sp, #32]
   2590c:	mov	r2, #2
   25910:	str	r2, [sp, #16]
   25914:	cmp	r3, #0
   25918:	beq	25948 <flatcc_builder_create_string@@Base+0x94>
   2591c:	ldr	r2, [sp, #12]
   25920:	add	r2, r2, r3
   25924:	str	r2, [sp, #12]
   25928:	ldr	r2, [sp, #16]
   2592c:	add	r2, r2, #1
   25930:	add	r1, sp, #88	; 0x58
   25934:	add	r1, r1, r2, lsl #3
   25938:	ldr	ip, [pc, #116]	; 259b4 <flatcc_builder_create_string@@Base+0x100>
   2593c:	str	ip, [r1, #-76]	; 0xffffffb4
   25940:	str	r3, [r1, #-72]	; 0xffffffb8
   25944:	str	r2, [sp, #16]
   25948:	ldr	r3, [sp, #12]
   2594c:	sub	r4, r0, r3
   25950:	cmp	r0, r4
   25954:	ble	2598c <flatcc_builder_create_string@@Base+0xd8>
   25958:	str	r3, [sp]
   2595c:	ldr	r6, [r5, #44]	; 0x2c
   25960:	mov	r3, r4
   25964:	ldr	r2, [sp, #16]
   25968:	add	r1, sp, #20
   2596c:	ldr	r0, [r5, #36]	; 0x24
   25970:	blx	r6
   25974:	cmp	r0, #0
   25978:	bne	259a0 <flatcc_builder_create_string@@Base+0xec>
   2597c:	str	r4, [r5, #136]	; 0x88
   25980:	mov	r0, r4
   25984:	add	sp, sp, #88	; 0x58
   25988:	pop	{r4, r5, r6, pc}
   2598c:	ldr	r3, [pc, #36]	; 259b8 <flatcc_builder_create_string@@Base+0x104>
   25990:	ldr	r2, [pc, #36]	; 259bc <flatcc_builder_create_string@@Base+0x108>
   25994:	ldr	r1, [pc, #36]	; 259c0 <flatcc_builder_create_string@@Base+0x10c>
   25998:	ldr	r0, [pc, #36]	; 259c4 <flatcc_builder_create_string@@Base+0x110>
   2599c:	bl	126a8 <__assert_fail@plt>
   259a0:	ldr	r3, [pc, #16]	; 259b8 <flatcc_builder_create_string@@Base+0x104>
   259a4:	ldr	r2, [pc, #28]	; 259c8 <flatcc_builder_create_string@@Base+0x114>
   259a8:	ldr	r1, [pc, #16]	; 259c0 <flatcc_builder_create_string@@Base+0x10c>
   259ac:	ldr	r0, [pc, #16]	; 259c4 <flatcc_builder_create_string@@Base+0x110>
   259b0:	bl	126a8 <__assert_fail@plt>
   259b4:	strdeq	fp, [r2], -r8
   259b8:	andeq	fp, r2, r4, asr #22
   259bc:	andeq	r0, r0, r7, lsl #5
   259c0:	andeq	ip, r2, r8, asr #32
   259c4:	muleq	r2, ip, r0
   259c8:	andeq	r0, r0, fp, lsl #5

000259cc <flatcc_builder_create_string_str@@Base>:
   259cc:	push	{r4, r5, r6, lr}
   259d0:	mov	r5, r0
   259d4:	mov	r4, r1
   259d8:	mov	r0, r1
   259dc:	bl	12630 <strlen@plt>
   259e0:	mov	r2, r0
   259e4:	mov	r1, r4
   259e8:	mov	r0, r5
   259ec:	bl	258b4 <flatcc_builder_create_string@@Base>
   259f0:	pop	{r4, r5, r6, pc}

000259f4 <flatcc_builder_create_string_strn@@Base>:
   259f4:	push	{r4, r5, r6, lr}
   259f8:	mov	r6, r0
   259fc:	mov	r4, r1
   25a00:	mov	r5, r2
   25a04:	mov	r1, #0
   25a08:	mov	r0, r4
   25a0c:	bl	1266c <memchr@plt>
   25a10:	cmp	r0, #0
   25a14:	subne	r5, r0, r4
   25a18:	mov	r2, r5
   25a1c:	mov	r1, r4
   25a20:	mov	r0, r6
   25a24:	bl	258b4 <flatcc_builder_create_string@@Base>
   25a28:	pop	{r4, r5, r6, pc}

00025a2c <flatcc_builder_end_string@@Base>:
   25a2c:	push	{r4, r5, r6, lr}
   25a30:	ldr	r3, [r0, #32]
   25a34:	ldrh	r2, [r3, #14]
   25a38:	cmp	r2, #6
   25a3c:	bne	25a6c <flatcc_builder_end_string@@Base+0x40>
   25a40:	mov	r4, r0
   25a44:	ldr	r2, [r3, #20]
   25a48:	ldr	r3, [r0, #20]
   25a4c:	cmp	r2, r3
   25a50:	bne	25a80 <flatcc_builder_end_string@@Base+0x54>
   25a54:	ldr	r1, [r0, #16]
   25a58:	bl	258b4 <flatcc_builder_create_string@@Base>
   25a5c:	subs	r5, r0, #0
   25a60:	bne	25a94 <flatcc_builder_end_string@@Base+0x68>
   25a64:	mov	r0, r5
   25a68:	pop	{r4, r5, r6, pc}
   25a6c:	ldr	r3, [pc, #160]	; 25b14 <flatcc_builder_end_string@@Base+0xe8>
   25a70:	ldr	r2, [pc, #160]	; 25b18 <flatcc_builder_end_string@@Base+0xec>
   25a74:	ldr	r1, [pc, #160]	; 25b1c <flatcc_builder_end_string@@Base+0xf0>
   25a78:	ldr	r0, [pc, #160]	; 25b20 <flatcc_builder_end_string@@Base+0xf4>
   25a7c:	bl	126a8 <__assert_fail@plt>
   25a80:	ldr	r3, [pc, #140]	; 25b14 <flatcc_builder_end_string@@Base+0xe8>
   25a84:	ldr	r2, [pc, #152]	; 25b24 <flatcc_builder_end_string@@Base+0xf8>
   25a88:	ldr	r1, [pc, #140]	; 25b1c <flatcc_builder_end_string@@Base+0xf0>
   25a8c:	ldr	r0, [pc, #148]	; 25b28 <flatcc_builder_end_string@@Base+0xfc>
   25a90:	bl	126a8 <__assert_fail@plt>
   25a94:	ldr	r2, [r4, #20]
   25a98:	mov	r1, #0
   25a9c:	ldr	r0, [r4, #16]
   25aa0:	bl	12654 <memset@plt>
   25aa4:	ldr	r2, [r4, #32]
   25aa8:	ldr	r3, [r2, #8]
   25aac:	str	r3, [r4, #20]
   25ab0:	ldr	r0, [r2]
   25ab4:	str	r0, [r4, #28]
   25ab8:	ldr	r1, [r2, #4]
   25abc:	ldr	r3, [r4, #60]	; 0x3c
   25ac0:	add	r3, r3, r0
   25ac4:	str	r3, [r4, #16]
   25ac8:	ldr	r3, [r4, #64]	; 0x40
   25acc:	sub	r3, r3, r0
   25ad0:	cmp	r3, r1
   25ad4:	movcs	r3, r1
   25ad8:	str	r3, [r4, #24]
   25adc:	str	r1, [r2, #4]
   25ae0:	ldrh	r3, [r4, #130]	; 0x82
   25ae4:	ldrh	r2, [r4, #128]	; 0x80
   25ae8:	cmp	r2, r3
   25aec:	strhcc	r3, [r4, #128]	; 0x80
   25af0:	ldr	r3, [r4, #32]
   25af4:	ldrh	r2, [r3, #12]
   25af8:	strh	r2, [r4, #130]	; 0x82
   25afc:	sub	r3, r3, #36	; 0x24
   25b00:	str	r3, [r4, #32]
   25b04:	ldr	r3, [r4, #156]	; 0x9c
   25b08:	sub	r3, r3, #1
   25b0c:	str	r3, [r4, #156]	; 0x9c
   25b10:	b	25a64 <flatcc_builder_end_string@@Base+0x38>
   25b14:	andeq	fp, r2, r0, asr pc
   25b18:	andeq	r0, r0, r4, asr #13
   25b1c:	andeq	ip, r2, r8, asr #32
   25b20:	andeq	ip, r2, r0, lsr #4
   25b24:	andeq	r0, r0, r5, asr #13
   25b28:	andeq	ip, r2, r0, lsl #7

00025b2c <flatcc_builder_string_edit@@Base>:
   25b2c:	ldr	r0, [r0, #16]
   25b30:	bx	lr

00025b34 <flatcc_builder_string_len@@Base>:
   25b34:	ldr	r3, [r0, #32]
   25b38:	ldr	r0, [r3, #20]
   25b3c:	bx	lr

00025b40 <flatcc_builder_table_add@@Base>:
   25b40:	push	{r4, r5, r6, r7, r8, lr}
   25b44:	mov	r5, r1
   25b48:	ldr	r1, [r0, #32]
   25b4c:	ldrh	r1, [r1, #14]
   25b50:	cmp	r1, #3
   25b54:	bne	25c00 <flatcc_builder_table_add@@Base+0xc0>
   25b58:	mov	r4, r0
   25b5c:	ldr	r1, [pc, #248]	; 25c5c <flatcc_builder_table_add@@Base+0x11c>
   25b60:	cmp	r5, r1
   25b64:	bhi	25c14 <flatcc_builder_table_add@@Base+0xd4>
   25b68:	ldrh	r1, [r0, #130]	; 0x82
   25b6c:	cmp	r1, r3
   25b70:	strhcc	r3, [r0, #130]	; 0x82
   25b74:	ldr	r0, [r0, #4]
   25b78:	lsl	r1, r5, #1
   25b7c:	ldrh	r1, [r0, r1]
   25b80:	cmp	r1, #0
   25b84:	bne	25c28 <flatcc_builder_table_add@@Base+0xe8>
   25b88:	ldr	r0, [r4, #12]
   25b8c:	eor	r0, r0, r5
   25b90:	ldr	r1, [pc, #200]	; 25c60 <flatcc_builder_table_add@@Base+0x120>
   25b94:	mul	r0, r1, r0
   25b98:	eor	r0, r0, r2
   25b9c:	mul	r0, r1, r0
   25ba0:	str	r0, [r4, #12]
   25ba4:	uxth	r7, r5
   25ba8:	sub	r6, r3, #1
   25bac:	ldr	r0, [r4, #20]
   25bb0:	add	r6, r6, r0
   25bb4:	rsb	r3, r3, #0
   25bb8:	and	r6, r6, r3
   25bbc:	add	r1, r2, r6
   25bc0:	str	r1, [r4, #20]
   25bc4:	ldr	r3, [r4, #24]
   25bc8:	cmp	r1, r3
   25bcc:	bcs	25c3c <flatcc_builder_table_add@@Base+0xfc>
   25bd0:	uxth	r5, r5
   25bd4:	ldr	r3, [r4, #4]
   25bd8:	lsl	r5, r5, #1
   25bdc:	add	r2, r6, #4
   25be0:	strh	r2, [r3, r5]
   25be4:	ldrh	r3, [r4, #8]
   25be8:	cmp	r3, r7
   25bec:	addls	r7, r7, #1
   25bf0:	strhls	r7, [r4, #8]
   25bf4:	ldr	r0, [r4, #16]
   25bf8:	add	r0, r0, r6
   25bfc:	pop	{r4, r5, r6, r7, r8, pc}
   25c00:	ldr	r3, [pc, #92]	; 25c64 <flatcc_builder_table_add@@Base+0x124>
   25c04:	ldr	r2, [pc, #92]	; 25c68 <flatcc_builder_table_add@@Base+0x128>
   25c08:	ldr	r1, [pc, #92]	; 25c6c <flatcc_builder_table_add@@Base+0x12c>
   25c0c:	ldr	r0, [pc, #92]	; 25c70 <flatcc_builder_table_add@@Base+0x130>
   25c10:	bl	126a8 <__assert_fail@plt>
   25c14:	ldr	r3, [pc, #72]	; 25c64 <flatcc_builder_table_add@@Base+0x124>
   25c18:	ldr	r2, [pc, #84]	; 25c74 <flatcc_builder_table_add@@Base+0x134>
   25c1c:	ldr	r1, [pc, #72]	; 25c6c <flatcc_builder_table_add@@Base+0x12c>
   25c20:	ldr	r0, [pc, #80]	; 25c78 <flatcc_builder_table_add@@Base+0x138>
   25c24:	bl	126a8 <__assert_fail@plt>
   25c28:	ldr	r3, [pc, #52]	; 25c64 <flatcc_builder_table_add@@Base+0x124>
   25c2c:	ldr	r2, [pc, #72]	; 25c7c <flatcc_builder_table_add@@Base+0x13c>
   25c30:	ldr	r1, [pc, #52]	; 25c6c <flatcc_builder_table_add@@Base+0x12c>
   25c34:	ldr	r0, [pc, #68]	; 25c80 <flatcc_builder_table_add@@Base+0x140>
   25c38:	bl	126a8 <__assert_fail@plt>
   25c3c:	ldr	r2, [pc, #64]	; 25c84 <flatcc_builder_table_add@@Base+0x144>
   25c40:	add	r1, r1, #1
   25c44:	mov	r0, r4
   25c48:	bl	22364 <main@@Base+0x78>
   25c4c:	cmp	r0, #0
   25c50:	beq	25bd0 <flatcc_builder_table_add@@Base+0x90>
   25c54:	mov	r0, #0
   25c58:	pop	{r4, r5, r6, r7, r8, pc}
   25c5c:	strdeq	r7, [r0], -ip
   25c60:			; <UNDEFINED> instruction: 0x9e3779b1
   25c64:	andeq	fp, r2, ip, ror #30
   25c68:	andeq	r0, r0, sp, ror #13
   25c6c:	andeq	ip, r2, r8, asr #32
   25c70:	andeq	ip, r2, ip, lsl #6
   25c74:	andeq	r0, r0, lr, ror #13
   25c78:	andeq	ip, r2, r4, lsr #7
   25c7c:	strdeq	r0, [r0], -r8
   25c80:	muleq	r2, ip, r0
   25c84:	strdeq	pc, [r0], -ip

00025c88 <flatcc_builder_table_edit@@Base>:
   25c88:	ldr	r3, [r0, #32]
   25c8c:	ldrh	r3, [r3, #14]
   25c90:	cmp	r3, #3
   25c94:	bne	25cac <flatcc_builder_table_edit@@Base+0x24>
   25c98:	ldr	r3, [r0, #20]
   25c9c:	sub	r1, r3, r1
   25ca0:	ldr	r0, [r0, #16]
   25ca4:	add	r0, r0, r1
   25ca8:	bx	lr
   25cac:	push	{r4, lr}
   25cb0:	ldr	r3, [pc, #12]	; 25cc4 <flatcc_builder_table_edit@@Base+0x3c>
   25cb4:	ldr	r2, [pc, #12]	; 25cc8 <flatcc_builder_table_edit@@Base+0x40>
   25cb8:	ldr	r1, [pc, #12]	; 25ccc <flatcc_builder_table_edit@@Base+0x44>
   25cbc:	ldr	r0, [pc, #12]	; 25cd0 <flatcc_builder_table_edit@@Base+0x48>
   25cc0:	bl	126a8 <__assert_fail@plt>
   25cc4:	andeq	fp, r2, r8, lsl #31
   25cc8:	andeq	r0, r0, r2, lsl #14
   25ccc:	andeq	ip, r2, r8, asr #32
   25cd0:	andeq	ip, r2, ip, lsl #6

00025cd4 <flatcc_builder_table_add_copy@@Base>:
   25cd4:	push	{r4, r5, r6, lr}
   25cd8:	mov	r6, r2
   25cdc:	mov	r5, r3
   25ce0:	ldrh	r3, [sp, #16]
   25ce4:	mov	r2, r5
   25ce8:	bl	25b40 <flatcc_builder_table_add@@Base>
   25cec:	subs	r4, r0, #0
   25cf0:	beq	25d04 <flatcc_builder_table_add_copy@@Base+0x30>
   25cf4:	mov	r2, r5
   25cf8:	mov	r1, r6
   25cfc:	mov	r0, r4
   25d00:	bl	125ac <memcpy@plt>
   25d04:	mov	r0, r4
   25d08:	pop	{r4, r5, r6, pc}

00025d0c <flatcc_builder_table_add_offset@@Base>:
   25d0c:	push	{r4, r5, r6, r7, r8, lr}
   25d10:	ldr	r3, [r0, #32]
   25d14:	ldrh	r3, [r3, #14]
   25d18:	cmp	r3, #3
   25d1c:	bne	25dcc <flatcc_builder_table_add_offset@@Base+0xc0>
   25d20:	mov	r4, r0
   25d24:	mov	r5, r1
   25d28:	ldr	r3, [pc, #240]	; 25e20 <flatcc_builder_table_add_offset@@Base+0x114>
   25d2c:	cmp	r1, r3
   25d30:	bhi	25de0 <flatcc_builder_table_add_offset@@Base+0xd4>
   25d34:	ldr	r2, [r0, #4]
   25d38:	lsl	r3, r1, #1
   25d3c:	ldrh	r3, [r2, r3]
   25d40:	cmp	r3, #0
   25d44:	bne	25df4 <flatcc_builder_table_add_offset@@Base+0xe8>
   25d48:	ldr	r3, [r0, #12]
   25d4c:	eor	r3, r3, r1
   25d50:	ldr	r2, [pc, #204]	; 25e24 <flatcc_builder_table_add_offset@@Base+0x118>
   25d54:	mul	r3, r2, r3
   25d58:	eor	r3, r3, #4
   25d5c:	mul	r3, r2, r3
   25d60:	str	r3, [r0, #12]
   25d64:	uxth	r7, r1
   25d68:	ldr	r6, [r0, #20]
   25d6c:	add	r6, r6, #3
   25d70:	bic	r6, r6, #3
   25d74:	add	r1, r6, #4
   25d78:	str	r1, [r0, #20]
   25d7c:	ldr	r3, [r0, #24]
   25d80:	cmp	r1, r3
   25d84:	bhi	25e08 <flatcc_builder_table_add_offset@@Base+0xfc>
   25d88:	uxth	r2, r6
   25d8c:	uxth	r5, r5
   25d90:	ldr	r3, [r4, #4]
   25d94:	lsl	r5, r5, #1
   25d98:	add	r1, r2, #4
   25d9c:	strh	r1, [r3, r5]
   25da0:	ldrh	r3, [r4, #8]
   25da4:	cmp	r3, r7
   25da8:	addls	r7, r7, #1
   25dac:	strhls	r7, [r4, #8]
   25db0:	ldr	r3, [r4]
   25db4:	add	r1, r3, #2
   25db8:	str	r1, [r4]
   25dbc:	strh	r2, [r3]
   25dc0:	ldr	r0, [r4, #16]
   25dc4:	add	r0, r0, r6
   25dc8:	pop	{r4, r5, r6, r7, r8, pc}
   25dcc:	ldr	r3, [pc, #84]	; 25e28 <flatcc_builder_table_add_offset@@Base+0x11c>
   25dd0:	ldr	r2, [pc, #84]	; 25e2c <flatcc_builder_table_add_offset@@Base+0x120>
   25dd4:	ldr	r1, [pc, #84]	; 25e30 <flatcc_builder_table_add_offset@@Base+0x124>
   25dd8:	ldr	r0, [pc, #84]	; 25e34 <flatcc_builder_table_add_offset@@Base+0x128>
   25ddc:	bl	126a8 <__assert_fail@plt>
   25de0:	ldr	r3, [pc, #64]	; 25e28 <flatcc_builder_table_add_offset@@Base+0x11c>
   25de4:	ldr	r2, [pc, #76]	; 25e38 <flatcc_builder_table_add_offset@@Base+0x12c>
   25de8:	ldr	r1, [pc, #64]	; 25e30 <flatcc_builder_table_add_offset@@Base+0x124>
   25dec:	ldr	r0, [pc, #72]	; 25e3c <flatcc_builder_table_add_offset@@Base+0x130>
   25df0:	bl	126a8 <__assert_fail@plt>
   25df4:	ldr	r3, [pc, #44]	; 25e28 <flatcc_builder_table_add_offset@@Base+0x11c>
   25df8:	ldr	r2, [pc, #64]	; 25e40 <flatcc_builder_table_add_offset@@Base+0x134>
   25dfc:	ldr	r1, [pc, #44]	; 25e30 <flatcc_builder_table_add_offset@@Base+0x124>
   25e00:	ldr	r0, [pc, #60]	; 25e44 <flatcc_builder_table_add_offset@@Base+0x138>
   25e04:	bl	126a8 <__assert_fail@plt>
   25e08:	ldr	r2, [pc, #56]	; 25e48 <flatcc_builder_table_add_offset@@Base+0x13c>
   25e0c:	bl	22364 <main@@Base+0x78>
   25e10:	cmp	r0, #0
   25e14:	beq	25d88 <flatcc_builder_table_add_offset@@Base+0x7c>
   25e18:	mov	r0, #0
   25e1c:	pop	{r4, r5, r6, r7, r8, pc}
   25e20:	strdeq	r7, [r0], -ip
   25e24:			; <UNDEFINED> instruction: 0x9e3779b1
   25e28:	andeq	fp, r2, r4, lsr #31
   25e2c:	andeq	r0, r0, r3, lsl r7
   25e30:	andeq	ip, r2, r8, asr #32
   25e34:	andeq	ip, r2, ip, lsl #6
   25e38:	andeq	r0, r0, r4, lsl r7
   25e3c:	andeq	ip, r2, r4, lsr #7
   25e40:	andeq	r0, r0, fp, lsl r7
   25e44:	muleq	r2, ip, r0
   25e48:	strdeq	pc, [r0], -ip

00025e4c <flatcc_builder_table_add_union@@Base>:
   25e4c:	push	{r4, r5, r6, r7, lr}
   25e50:	sub	sp, sp, #12
   25e54:	mov	r5, r1
   25e58:	add	r1, sp, #8
   25e5c:	stmdb	r1, {r2, r3}
   25e60:	ldr	r3, [r0, #32]
   25e64:	ldrh	r3, [r3, #14]
   25e68:	cmp	r3, #3
   25e6c:	bne	25edc <flatcc_builder_table_add_union@@Base+0x90>
   25e70:	mov	r4, r0
   25e74:	ldrb	r7, [sp]
   25e78:	ldr	r6, [sp, #4]
   25e7c:	adds	r3, r6, #0
   25e80:	movne	r3, #1
   25e84:	cmp	r7, #0
   25e88:	movne	r3, #0
   25e8c:	cmp	r3, #0
   25e90:	bne	25ef0 <flatcc_builder_table_add_union@@Base+0xa4>
   25e94:	cmp	r6, #0
   25e98:	beq	25eb0 <flatcc_builder_table_add_union@@Base+0x64>
   25e9c:	mov	r1, r5
   25ea0:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   25ea4:	cmp	r0, #0
   25ea8:	strne	r6, [r0]
   25eac:	beq	25f04 <flatcc_builder_table_add_union@@Base+0xb8>
   25eb0:	mov	r3, #1
   25eb4:	mov	r2, r3
   25eb8:	sub	r1, r5, #1
   25ebc:	mov	r0, r4
   25ec0:	bl	25b40 <flatcc_builder_table_add@@Base>
   25ec4:	cmp	r0, #0
   25ec8:	beq	25f18 <flatcc_builder_table_add_union@@Base+0xcc>
   25ecc:	strb	r7, [r0]
   25ed0:	mov	r0, #0
   25ed4:	add	sp, sp, #12
   25ed8:	pop	{r4, r5, r6, r7, pc}
   25edc:	ldr	r3, [pc, #72]	; 25f2c <flatcc_builder_table_add_union@@Base+0xe0>
   25ee0:	ldr	r2, [pc, #72]	; 25f30 <flatcc_builder_table_add_union@@Base+0xe4>
   25ee4:	ldr	r1, [pc, #72]	; 25f34 <flatcc_builder_table_add_union@@Base+0xe8>
   25ee8:	ldr	r0, [pc, #72]	; 25f38 <flatcc_builder_table_add_union@@Base+0xec>
   25eec:	bl	126a8 <__assert_fail@plt>
   25ef0:	ldr	r3, [pc, #52]	; 25f2c <flatcc_builder_table_add_union@@Base+0xe0>
   25ef4:	ldr	r2, [pc, #64]	; 25f3c <flatcc_builder_table_add_union@@Base+0xf0>
   25ef8:	ldr	r1, [pc, #52]	; 25f34 <flatcc_builder_table_add_union@@Base+0xe8>
   25efc:	ldr	r0, [pc, #60]	; 25f40 <flatcc_builder_table_add_union@@Base+0xf4>
   25f00:	bl	126a8 <__assert_fail@plt>
   25f04:	ldr	r3, [pc, #32]	; 25f2c <flatcc_builder_table_add_union@@Base+0xe0>
   25f08:	ldr	r2, [pc, #52]	; 25f44 <flatcc_builder_table_add_union@@Base+0xf8>
   25f0c:	ldr	r1, [pc, #32]	; 25f34 <flatcc_builder_table_add_union@@Base+0xe8>
   25f10:	ldr	r0, [pc, #48]	; 25f48 <flatcc_builder_table_add_union@@Base+0xfc>
   25f14:	bl	126a8 <__assert_fail@plt>
   25f18:	ldr	r3, [pc, #12]	; 25f2c <flatcc_builder_table_add_union@@Base+0xe0>
   25f1c:	ldr	r2, [pc, #40]	; 25f4c <flatcc_builder_table_add_union@@Base+0x100>
   25f20:	ldr	r1, [pc, #12]	; 25f34 <flatcc_builder_table_add_union@@Base+0xe8>
   25f24:	ldr	r0, [pc, #36]	; 25f50 <flatcc_builder_table_add_union@@Base+0x104>
   25f28:	bl	126a8 <__assert_fail@plt>
   25f2c:	andeq	fp, r2, r4, asr #31
   25f30:	andeq	r0, r0, lr, ror #11
   25f34:	andeq	ip, r2, r8, asr #32
   25f38:	andeq	ip, r2, ip, lsl #6
   25f3c:	andeq	r0, r0, pc, ror #11
   25f40:	andeq	ip, r2, r8, ror #7
   25f44:	strdeq	r0, [r0], -r2
   25f48:	andeq	ip, r2, ip, lsl #8
   25f4c:	strdeq	r0, [r0], -r6
   25f50:	andeq	ip, r2, r8, lsl r4

00025f54 <flatcc_builder_table_add_union_vector@@Base>:
   25f54:	push	{r4, r5, r6, r7, lr}
   25f58:	sub	sp, sp, #12
   25f5c:	mov	r7, r1
   25f60:	add	r1, sp, #8
   25f64:	stmdb	r1, {r2, r3}
   25f68:	ldr	r4, [sp]
   25f6c:	ldr	r6, [sp, #4]
   25f70:	ldr	r3, [r0, #32]
   25f74:	ldrh	r3, [r3, #14]
   25f78:	cmp	r3, #3
   25f7c:	bne	25fb8 <flatcc_builder_table_add_union_vector@@Base+0x64>
   25f80:	mov	r5, r0
   25f84:	clz	r3, r6
   25f88:	lsr	r3, r3, #5
   25f8c:	clz	r2, r4
   25f90:	lsr	r2, r2, #5
   25f94:	cmp	r2, r3
   25f98:	beq	25fe0 <flatcc_builder_table_add_union_vector@@Base+0x8c>
   25f9c:	adds	r4, r4, #0
   25fa0:	movne	r4, #1
   25fa4:	cmp	r4, r3
   25fa8:	mvnne	r0, #0
   25fac:	beq	25fcc <flatcc_builder_table_add_union_vector@@Base+0x78>
   25fb0:	add	sp, sp, #12
   25fb4:	pop	{r4, r5, r6, r7, pc}
   25fb8:	ldr	r3, [pc, #136]	; 26048 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   25fbc:	mov	r2, #1536	; 0x600
   25fc0:	ldr	r1, [pc, #132]	; 2604c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   25fc4:	ldr	r0, [pc, #132]	; 26050 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   25fc8:	bl	126a8 <__assert_fail@plt>
   25fcc:	ldr	r3, [pc, #116]	; 26048 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   25fd0:	ldr	r2, [pc, #124]	; 26054 <flatcc_builder_table_add_union_vector@@Base+0x100>
   25fd4:	ldr	r1, [pc, #112]	; 2604c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   25fd8:	ldr	r0, [pc, #120]	; 26058 <flatcc_builder_table_add_union_vector@@Base+0x104>
   25fdc:	bl	126a8 <__assert_fail@plt>
   25fe0:	cmp	r4, #0
   25fe4:	moveq	r0, #0
   25fe8:	beq	25fb0 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   25fec:	sub	r1, r7, #1
   25ff0:	mov	r0, r5
   25ff4:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   25ff8:	cmp	r0, #0
   25ffc:	beq	26034 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   26000:	str	r4, [r0]
   26004:	mov	r1, r7
   26008:	mov	r0, r5
   2600c:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   26010:	cmp	r0, #0
   26014:	strne	r6, [r0]
   26018:	movne	r0, #0
   2601c:	bne	25fb0 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   26020:	ldr	r3, [pc, #32]	; 26048 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   26024:	ldr	r2, [pc, #48]	; 2605c <flatcc_builder_table_add_union_vector@@Base+0x108>
   26028:	ldr	r1, [pc, #28]	; 2604c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   2602c:	ldr	r0, [pc, #44]	; 26060 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   26030:	bl	126a8 <__assert_fail@plt>
   26034:	ldr	r3, [pc, #12]	; 26048 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   26038:	ldr	r2, [pc, #36]	; 26064 <flatcc_builder_table_add_union_vector@@Base+0x110>
   2603c:	ldr	r1, [pc, #8]	; 2604c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   26040:	ldr	r0, [pc, #24]	; 26060 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   26044:	bl	126a8 <__assert_fail@plt>
   26048:	andeq	fp, r2, r4, ror #31
   2604c:	andeq	ip, r2, r8, asr #32
   26050:	andeq	ip, r2, ip, lsl #6
   26054:	andeq	r0, r0, r1, lsl #12
   26058:	andeq	ip, r2, r4, lsr #8
   2605c:	andeq	r0, r0, r8, lsl #12
   26060:	andeq	ip, r2, ip, lsl #8
   26064:	andeq	r0, r0, r4, lsl #12

00026068 <flatcc_builder_push_buffer_alignment@@Base>:
   26068:	mov	r3, r0
   2606c:	ldrh	r0, [r0, #128]	; 0x80
   26070:	mov	r2, #4
   26074:	strh	r2, [r3, #128]	; 0x80
   26078:	bx	lr

0002607c <flatcc_builder_pop_buffer_alignment@@Base>:
   2607c:	ldrh	r3, [r0, #128]	; 0x80
   26080:	cmp	r3, r1
   26084:	strhcc	r1, [r0, #128]	; 0x80
   26088:	bx	lr

0002608c <flatcc_builder_get_buffer_alignment@@Base>:
   2608c:	ldrh	r0, [r0, #128]	; 0x80
   26090:	bx	lr

00026094 <flatcc_builder_set_vtable_clustering@@Base>:
   26094:	clz	r1, r1
   26098:	lsr	r1, r1, #5
   2609c:	str	r1, [r0, #180]	; 0xb4
   260a0:	bx	lr

000260a4 <flatcc_builder_set_block_align@@Base>:
   260a4:	strh	r1, [r0, #132]	; 0x84
   260a8:	bx	lr

000260ac <flatcc_builder_get_level@@Base>:
   260ac:	ldr	r0, [r0, #156]	; 0x9c
   260b0:	bx	lr

000260b4 <flatcc_builder_set_max_level@@Base>:
   260b4:	str	r1, [r0, #176]	; 0xb0
   260b8:	ldr	r3, [r0, #160]	; 0xa0
   260bc:	cmp	r1, r3
   260c0:	strgt	r1, [r0, #160]	; 0xa0
   260c4:	bx	lr

000260c8 <flatcc_builder_get_buffer_size@@Base>:
   260c8:	ldr	r2, [r0, #140]	; 0x8c
   260cc:	ldr	r0, [r0, #136]	; 0x88
   260d0:	sub	r0, r2, r0
   260d4:	bx	lr

000260d8 <flatcc_builder_get_buffer_start@@Base>:
   260d8:	ldr	r0, [r0, #136]	; 0x88
   260dc:	bx	lr

000260e0 <flatcc_builder_get_buffer_end@@Base>:
   260e0:	ldr	r0, [r0, #140]	; 0x8c
   260e4:	bx	lr

000260e8 <flatcc_builder_set_vtable_cache_limit@@Base>:
   260e8:	str	r1, [r0, #172]	; 0xac
   260ec:	bx	lr

000260f0 <flatcc_builder_set_identifier@@Base>:
   260f0:	ldr	r3, [pc, #16]	; 26108 <flatcc_builder_set_identifier@@Base+0x18>
   260f4:	cmp	r1, #0
   260f8:	moveq	r1, r3
   260fc:	ldr	r3, [r1]
   26100:	str	r3, [r0, #168]	; 0xa8
   26104:	bx	lr
   26108:	strdeq	fp, [r2], -r8

0002610c <flatcc_builder_get_type@@Base>:
   2610c:	ldr	r3, [r0, #32]
   26110:	cmp	r3, #0
   26114:	ldrhne	r0, [r3, #14]
   26118:	moveq	r0, #0
   2611c:	bx	lr

00026120 <flatcc_builder_get_type_at@@Base>:
   26120:	cmp	r1, #0
   26124:	ble	2614c <flatcc_builder_get_type_at@@Base+0x2c>
   26128:	ldr	r3, [r0, #156]	; 0x9c
   2612c:	cmp	r1, r3
   26130:	bgt	26154 <flatcc_builder_get_type_at@@Base+0x34>
   26134:	sub	r1, r1, r3
   26138:	ldr	r3, [r0, #32]
   2613c:	add	r1, r1, r1, lsl #3
   26140:	add	r1, r3, r1, lsl #2
   26144:	ldrh	r0, [r1, #14]
   26148:	bx	lr
   2614c:	mov	r0, #0
   26150:	bx	lr
   26154:	mov	r0, #0
   26158:	bx	lr

0002615c <flatcc_builder_get_direct_buffer@@Base>:
   2615c:	ldr	r3, [r0, #184]	; 0xb8
   26160:	cmp	r3, #0
   26164:	beq	261a0 <flatcc_builder_get_direct_buffer@@Base+0x44>
   26168:	ldr	r2, [r0, #188]	; 0xbc
   2616c:	ldr	r3, [r0, #192]	; 0xc0
   26170:	cmp	r2, r3
   26174:	beq	2618c <flatcc_builder_get_direct_buffer@@Base+0x30>
   26178:	cmp	r1, #0
   2617c:	beq	261b4 <flatcc_builder_get_direct_buffer@@Base+0x58>
   26180:	mov	r0, #0
   26184:	str	r0, [r1]
   26188:	bx	lr
   2618c:	cmp	r1, #0
   26190:	ldrne	r3, [r0, #212]	; 0xd4
   26194:	strne	r3, [r1]
   26198:	ldr	r0, [r0, #196]	; 0xc4
   2619c:	bx	lr
   261a0:	cmp	r1, #0
   261a4:	beq	261bc <flatcc_builder_get_direct_buffer@@Base+0x60>
   261a8:	mov	r0, #0
   261ac:	str	r0, [r1]
   261b0:	bx	lr
   261b4:	mov	r0, #0
   261b8:	bx	lr
   261bc:	mov	r0, #0
   261c0:	bx	lr

000261c4 <flatcc_builder_copy_buffer@@Base>:
   261c4:	ldr	r3, [r0, #184]	; 0xb8
   261c8:	cmp	r3, #0
   261cc:	beq	261f8 <flatcc_builder_copy_buffer@@Base+0x34>
   261d0:	push	{r4, lr}
   261d4:	add	r0, r0, #188	; 0xbc
   261d8:	bl	268f4 <flatcc_emitter_copy_buffer@@Base>
   261dc:	cmp	r0, #0
   261e0:	popne	{r4, pc}
   261e4:	ldr	r3, [pc, #20]	; 26200 <flatcc_builder_copy_buffer@@Base+0x3c>
   261e8:	ldr	r2, [pc, #20]	; 26204 <flatcc_builder_copy_buffer@@Base+0x40>
   261ec:	ldr	r1, [pc, #20]	; 26208 <flatcc_builder_copy_buffer@@Base+0x44>
   261f0:	ldr	r0, [pc, #20]	; 2620c <flatcc_builder_copy_buffer@@Base+0x48>
   261f4:	bl	126a8 <__assert_fail@plt>
   261f8:	mov	r0, #0
   261fc:	bx	lr
   26200:	andeq	ip, r2, ip
   26204:	andeq	r0, r0, r6, lsl #15
   26208:	andeq	ip, r2, r8, asr #32
   2620c:	andeq	ip, r2, ip, asr #8

00026210 <flatcc_builder_finalize_buffer@@Base>:
   26210:	push	{r4, r5, r6, lr}
   26214:	mov	r5, r0
   26218:	ldr	r4, [r0, #140]	; 0x8c
   2621c:	ldr	r3, [r0, #136]	; 0x88
   26220:	sub	r4, r4, r3
   26224:	cmp	r1, #0
   26228:	strne	r4, [r1]
   2622c:	mov	r0, r4
   26230:	bl	12600 <malloc@plt>
   26234:	subs	r6, r0, #0
   26238:	beq	2625c <flatcc_builder_finalize_buffer@@Base+0x4c>
   2623c:	mov	r2, r4
   26240:	mov	r1, r6
   26244:	mov	r0, r5
   26248:	bl	261c4 <flatcc_builder_copy_buffer@@Base>
   2624c:	cmp	r0, #0
   26250:	beq	26270 <flatcc_builder_finalize_buffer@@Base+0x60>
   26254:	mov	r0, r6
   26258:	pop	{r4, r5, r6, pc}
   2625c:	ldr	r3, [pc, #32]	; 26284 <flatcc_builder_finalize_buffer@@Base+0x74>
   26260:	ldr	r2, [pc, #32]	; 26288 <flatcc_builder_finalize_buffer@@Base+0x78>
   26264:	ldr	r1, [pc, #32]	; 2628c <flatcc_builder_finalize_buffer@@Base+0x7c>
   26268:	ldr	r0, [pc, #32]	; 26290 <flatcc_builder_finalize_buffer@@Base+0x80>
   2626c:	bl	126a8 <__assert_fail@plt>
   26270:	ldr	r3, [pc, #12]	; 26284 <flatcc_builder_finalize_buffer@@Base+0x74>
   26274:	ldr	r2, [pc, #24]	; 26294 <flatcc_builder_finalize_buffer@@Base+0x84>
   26278:	ldr	r1, [pc, #12]	; 2628c <flatcc_builder_finalize_buffer@@Base+0x7c>
   2627c:	ldr	r0, [pc, #12]	; 26290 <flatcc_builder_finalize_buffer@@Base+0x80>
   26280:	bl	126a8 <__assert_fail@plt>
   26284:	andeq	ip, r2, r8, lsr #32
   26288:	muleq	r0, r8, r7
   2628c:	andeq	ip, r2, r8, asr #32
   26290:	muleq	r2, ip, r0
   26294:	muleq	r0, ip, r7

00026298 <flatcc_builder_finalize_aligned_buffer@@Base>:
   26298:	push	{r4, r5, r6, r7, lr}
   2629c:	sub	sp, sp, #12
   262a0:	mov	r7, r0
   262a4:	ldr	r4, [r0, #140]	; 0x8c
   262a8:	ldr	r3, [r0, #136]	; 0x88
   262ac:	sub	r3, r4, r3
   262b0:	subs	r6, r1, #0
   262b4:	strne	r3, [r6]
   262b8:	ldrh	r1, [r0, #128]	; 0x80
   262bc:	sub	r4, r1, #1
   262c0:	add	r4, r4, r3
   262c4:	rsb	r3, r1, #0
   262c8:	and	r4, r4, r3
   262cc:	add	r0, sp, #8
   262d0:	mov	r3, #0
   262d4:	str	r3, [r0, #-4]!
   262d8:	mov	r2, r4
   262dc:	cmp	r1, #4
   262e0:	movcc	r1, #4
   262e4:	bl	12648 <posix_memalign@plt>
   262e8:	cmp	r0, #0
   262ec:	beq	26310 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   262f0:	ldr	r0, [sp, #4]
   262f4:	cmp	r0, #0
   262f8:	beq	26300 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   262fc:	bl	125a0 <free@plt>
   26300:	cmp	r6, #0
   26304:	mov	r5, #0
   26308:	strne	r5, [r6]
   2630c:	b	26334 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   26310:	ldr	r5, [sp, #4]
   26314:	cmp	r5, #0
   26318:	beq	26300 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   2631c:	mov	r2, r4
   26320:	mov	r1, r5
   26324:	mov	r0, r7
   26328:	bl	261c4 <flatcc_builder_copy_buffer@@Base>
   2632c:	cmp	r0, #0
   26330:	beq	26340 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   26334:	mov	r0, r5
   26338:	add	sp, sp, #12
   2633c:	pop	{r4, r5, r6, r7, pc}
   26340:	mov	r0, r5
   26344:	bl	125a0 <free@plt>
   26348:	b	26300 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>

0002634c <flatcc_builder_aligned_alloc@@Base>:
   2634c:	push	{lr}		; (str lr, [sp, #-4]!)
   26350:	sub	sp, sp, #12
   26354:	add	r3, sp, #8
   26358:	mov	r2, #0
   2635c:	str	r2, [r3, #-4]!
   26360:	mov	r2, r1
   26364:	cmp	r0, #4
   26368:	movcs	r1, r0
   2636c:	movcc	r1, #4
   26370:	mov	r0, r3
   26374:	bl	12648 <posix_memalign@plt>
   26378:	cmp	r0, #0
   2637c:	beq	26398 <flatcc_builder_aligned_alloc@@Base+0x4c>
   26380:	ldr	r0, [sp, #4]
   26384:	cmp	r0, #0
   26388:	beq	26398 <flatcc_builder_aligned_alloc@@Base+0x4c>
   2638c:	bl	125a0 <free@plt>
   26390:	mov	r3, #0
   26394:	str	r3, [sp, #4]
   26398:	ldr	r0, [sp, #4]
   2639c:	add	sp, sp, #12
   263a0:	pop	{pc}		; (ldr pc, [sp], #4)

000263a4 <flatcc_builder_aligned_free@@Base>:
   263a4:	push	{r4, lr}
   263a8:	bl	125a0 <free@plt>
   263ac:	pop	{r4, pc}

000263b0 <flatcc_builder_get_emit_context@@Base>:
   263b0:	ldr	r0, [r0, #36]	; 0x24
   263b4:	bx	lr

000263b8 <flatcc_emitter_recycle_page@@Base>:
   263b8:	ldr	r3, [r0]
   263bc:	cmp	r3, r1
   263c0:	beq	26410 <flatcc_emitter_recycle_page@@Base+0x58>
   263c4:	ldr	r3, [r0, #4]
   263c8:	cmp	r1, r3
   263cc:	beq	26418 <flatcc_emitter_recycle_page@@Base+0x60>
   263d0:	ldr	r3, [r1, #2944]	; 0xb80
   263d4:	ldr	r2, [r1, #2948]	; 0xb84
   263d8:	str	r2, [r3, #2948]	; 0xb84
   263dc:	ldr	r3, [r1, #2948]	; 0xb84
   263e0:	ldr	r2, [r1, #2944]	; 0xb80
   263e4:	str	r2, [r3, #2944]	; 0xb80
   263e8:	ldr	r3, [r0]
   263ec:	ldr	r3, [r3, #2948]	; 0xb84
   263f0:	str	r3, [r1, #2948]	; 0xb84
   263f4:	ldr	r2, [r0]
   263f8:	str	r2, [r1, #2944]	; 0xb80
   263fc:	str	r1, [r3, #2944]	; 0xb80
   26400:	ldr	r3, [r1, #2944]	; 0xb80
   26404:	str	r1, [r3, #2948]	; 0xb84
   26408:	mov	r0, #0
   2640c:	bx	lr
   26410:	mvn	r0, #0
   26414:	bx	lr
   26418:	mvn	r0, #0
   2641c:	bx	lr

00026420 <flatcc_emitter_reset@@Base>:
   26420:	ldr	r3, [r0]
   26424:	cmp	r3, #0
   26428:	bxeq	lr
   2642c:	str	r3, [r0, #4]
   26430:	add	r2, r3, #1472	; 0x5c0
   26434:	str	r2, [r0, #8]
   26438:	str	r2, [r0, #16]
   2643c:	mov	r2, #1472	; 0x5c0
   26440:	str	r2, [r0, #12]
   26444:	str	r2, [r0, #20]
   26448:	sub	r2, r2, #2944	; 0xb80
   2644c:	str	r2, [r3, #2952]	; 0xb88
   26450:	ldr	r3, [r0, #32]
   26454:	cmp	r3, #0
   26458:	ldreq	r3, [r0, #24]
   2645c:	streq	r3, [r0, #32]
   26460:	ldr	r3, [r0, #32]
   26464:	add	r2, r3, r3, lsl #1
   26468:	ldr	r3, [r0, #24]
   2646c:	lsr	r3, r3, #2
   26470:	add	r3, r3, r2, lsr #2
   26474:	str	r3, [r0, #32]
   26478:	mov	r2, #0
   2647c:	str	r2, [r0, #24]
   26480:	ldr	r2, [r0, #28]
   26484:	cmp	r2, r3, lsl #1
   26488:	bxls	lr
   2648c:	push	{r4, lr}
   26490:	mov	r4, r0
   26494:	ldr	r3, [r0, #4]
   26498:	ldr	r0, [r3, #2944]	; 0xb80
   2649c:	ldr	r2, [r4]
   264a0:	cmp	r0, r2
   264a4:	popeq	{r4, pc}
   264a8:	ldr	r2, [r0, #2944]	; 0xb80
   264ac:	str	r2, [r3, #2944]	; 0xb80
   264b0:	ldr	r3, [r0, #2944]	; 0xb80
   264b4:	ldr	r2, [r4, #4]
   264b8:	str	r2, [r3, #2948]	; 0xb84
   264bc:	bl	125a0 <free@plt>
   264c0:	ldr	r3, [r4, #28]
   264c4:	sub	r3, r3, #2944	; 0xb80
   264c8:	str	r3, [r4, #28]
   264cc:	ldr	r2, [r4, #32]
   264d0:	cmp	r3, r2, lsl #1
   264d4:	popls	{r4, pc}
   264d8:	ldr	r3, [r4, #4]
   264dc:	ldr	r0, [r3, #2944]	; 0xb80
   264e0:	ldr	r2, [r4]
   264e4:	cmp	r0, r2
   264e8:	bne	264a8 <flatcc_emitter_reset@@Base+0x88>
   264ec:	pop	{r4, pc}

000264f0 <flatcc_emitter_clear@@Base>:
   264f0:	ldr	r3, [r0]
   264f4:	cmp	r3, #0
   264f8:	bxeq	lr
   264fc:	push	{r4, r5, r6, lr}
   26500:	mov	r5, r0
   26504:	ldr	r2, [r3, #2948]	; 0xb84
   26508:	mov	r1, #0
   2650c:	str	r1, [r2, #2944]	; 0xb80
   26510:	ldr	r4, [r3, #2944]	; 0xb80
   26514:	cmp	r4, r1
   26518:	bne	26528 <flatcc_emitter_clear@@Base+0x38>
   2651c:	mov	r4, r3
   26520:	b	2653c <flatcc_emitter_clear@@Base+0x4c>
   26524:	mov	r4, r3
   26528:	ldr	r0, [r4, #2948]	; 0xb84
   2652c:	bl	125a0 <free@plt>
   26530:	ldr	r3, [r4, #2944]	; 0xb80
   26534:	cmp	r3, #0
   26538:	bne	26524 <flatcc_emitter_clear@@Base+0x34>
   2653c:	mov	r0, r4
   26540:	bl	125a0 <free@plt>
   26544:	mov	r2, #36	; 0x24
   26548:	mov	r1, #0
   2654c:	mov	r0, r5
   26550:	bl	12654 <memset@plt>
   26554:	pop	{r4, r5, r6, pc}

00026558 <flatcc_emitter@@Base>:
   26558:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2655c:	mov	r4, r0
   26560:	ldr	ip, [sp, #40]	; 0x28
   26564:	ldr	r0, [r0, #24]
   26568:	add	r0, r0, ip
   2656c:	str	r0, [r4, #24]
   26570:	cmp	r3, #0
   26574:	blt	265a0 <flatcc_emitter@@Base+0x48>
   26578:	ldr	r3, [r4, #20]
   2657c:	cmp	ip, r3
   26580:	bls	2668c <flatcc_emitter@@Base+0x134>
   26584:	cmp	r2, #0
   26588:	addne	r7, r1, #8
   2658c:	movne	sl, r2
   26590:	movne	fp, #2944	; 0xb80
   26594:	bne	26840 <flatcc_emitter@@Base+0x2e8>
   26598:	mov	r0, r2
   2659c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   265a0:	ldr	r3, [r4, #12]
   265a4:	cmp	ip, r3
   265a8:	bhi	265cc <flatcc_emitter@@Base+0x74>
   265ac:	ldr	r5, [r4, #8]
   265b0:	sub	r5, r5, ip
   265b4:	str	r5, [r4, #8]
   265b8:	sub	r3, r3, ip
   265bc:	str	r3, [r4, #12]
   265c0:	b	266a0 <flatcc_emitter@@Base+0x148>
   265c4:	mov	r0, r2
   265c8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   265cc:	add	r7, r1, r2, lsl #3
   265d0:	mov	r8, r2
   265d4:	mov	fp, #1472	; 0x5c0
   265d8:	mov	sl, #2944	; 0xb80
   265dc:	b	267bc <flatcc_emitter@@Base+0x264>
   265e0:	mov	r2, r5
   265e4:	rsb	r1, r2, #0
   265e8:	ldr	r0, [r4, #8]
   265ec:	add	r0, r0, r1
   265f0:	str	r0, [r4, #8]
   265f4:	sub	r3, r3, r2
   265f8:	str	r3, [r4, #12]
   265fc:	add	r6, r6, r1
   26600:	sub	r5, r5, r2
   26604:	mov	r1, r6
   26608:	bl	125ac <memcpy@plt>
   2660c:	cmp	r5, #0
   26610:	beq	267b4 <flatcc_emitter@@Base+0x25c>
   26614:	ldr	r3, [r4, #12]
   26618:	cmp	r3, r5
   2661c:	bcs	265e0 <flatcc_emitter@@Base+0x88>
   26620:	cmp	r3, #0
   26624:	movne	r2, r3
   26628:	bne	265e4 <flatcc_emitter@@Base+0x8c>
   2662c:	ldr	r9, [r4]
   26630:	cmp	r9, #0
   26634:	beq	268d4 <flatcc_emitter@@Base+0x37c>
   26638:	ldr	r2, [r9, #2948]	; 0xb84
   2663c:	ldr	r3, [r4, #4]
   26640:	cmp	r2, r3
   26644:	beq	2685c <flatcc_emitter@@Base+0x304>
   26648:	ldr	r3, [r9, #2952]	; 0xb88
   2664c:	sub	r3, r3, #2944	; 0xb80
   26650:	str	r3, [r2, #2952]	; 0xb88
   26654:	ldr	r3, [r4]
   26658:	ldr	r3, [r3, #2948]	; 0xb84
   2665c:	str	r3, [r4]
   26660:	ldr	r3, [r4]
   26664:	add	r2, r3, #2944	; 0xb80
   26668:	str	r2, [r4, #8]
   2666c:	str	sl, [r4, #12]
   26670:	ldr	r2, [r3, #2944]	; 0xb80
   26674:	ldr	r2, [r2, #2952]	; 0xb88
   26678:	sub	r2, r2, #2944	; 0xb80
   2667c:	str	r2, [r3, #2952]	; 0xb88
   26680:	b	2660c <flatcc_emitter@@Base+0xb4>
   26684:	mov	r0, #0
   26688:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2668c:	ldr	r5, [r4, #16]
   26690:	add	r0, r5, ip
   26694:	str	r0, [r4, #16]
   26698:	sub	r3, r3, ip
   2669c:	str	r3, [r4, #20]
   266a0:	cmp	r2, #0
   266a4:	addne	r4, r1, #8
   266a8:	movne	r8, r2
   266ac:	beq	265c4 <flatcc_emitter@@Base+0x6c>
   266b0:	ldr	r2, [r4, #-4]
   266b4:	ldr	r1, [r4, #-8]
   266b8:	mov	r0, r5
   266bc:	bl	125ac <memcpy@plt>
   266c0:	ldr	r3, [r4, #-4]
   266c4:	add	r5, r5, r3
   266c8:	add	r4, r4, #8
   266cc:	subs	r8, r8, #1
   266d0:	bne	266b0 <flatcc_emitter@@Base+0x158>
   266d4:	mov	r0, #0
   266d8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266dc:	ldr	r0, [pc, #520]	; 268ec <flatcc_emitter@@Base+0x394>
   266e0:	bl	12600 <malloc@plt>
   266e4:	cmp	r0, #0
   266e8:	beq	267a4 <flatcc_emitter@@Base+0x24c>
   266ec:	ldr	r3, [r4, #28]
   266f0:	add	r3, r3, #2944	; 0xb80
   266f4:	str	r3, [r4, #28]
   266f8:	str	r5, [r0, #2948]	; 0xb84
   266fc:	str	r9, [r0, #2944]	; 0xb80
   26700:	str	r0, [r9, #2948]	; 0xb84
   26704:	ldr	r3, [r4, #4]
   26708:	str	r0, [r3, #2944]	; 0xb80
   2670c:	str	r0, [r4, #4]
   26710:	b	26784 <flatcc_emitter@@Base+0x22c>
   26714:	mov	r5, r6
   26718:	mov	r2, r5
   2671c:	mov	r1, r8
   26720:	ldr	r0, [r4, #16]
   26724:	bl	125ac <memcpy@plt>
   26728:	sub	r6, r6, r5
   2672c:	add	r8, r8, r5
   26730:	ldr	r3, [r4, #16]
   26734:	add	r3, r3, r5
   26738:	str	r3, [r4, #16]
   2673c:	ldr	r3, [r4, #20]
   26740:	sub	r5, r3, r5
   26744:	str	r5, [r4, #20]
   26748:	cmp	r6, #0
   2674c:	beq	26834 <flatcc_emitter@@Base+0x2dc>
   26750:	ldr	r5, [r4, #20]
   26754:	cmp	r5, r6
   26758:	bcs	26714 <flatcc_emitter@@Base+0x1bc>
   2675c:	cmp	r5, #0
   26760:	bne	26718 <flatcc_emitter@@Base+0x1c0>
   26764:	ldr	r5, [r4, #4]
   26768:	cmp	r5, #0
   2676c:	beq	2681c <flatcc_emitter@@Base+0x2c4>
   26770:	ldr	r9, [r5, #2944]	; 0xb80
   26774:	ldr	r3, [r4]
   26778:	cmp	r9, r3
   2677c:	strne	r9, [r4, #4]
   26780:	beq	266dc <flatcc_emitter@@Base+0x184>
   26784:	ldr	r3, [r4, #4]
   26788:	str	r3, [r4, #16]
   2678c:	str	fp, [r4, #20]
   26790:	ldr	r2, [r3, #2948]	; 0xb84
   26794:	ldr	r2, [r2, #2952]	; 0xb88
   26798:	add	r2, r2, #2944	; 0xb80
   2679c:	str	r2, [r3, #2952]	; 0xb88
   267a0:	b	26748 <flatcc_emitter@@Base+0x1f0>
   267a4:	mvn	r0, #0
   267a8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   267ac:	mvn	r0, #0
   267b0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   267b4:	sub	r7, r7, #8
   267b8:	sub	r8, r8, #1
   267bc:	cmp	r8, #0
   267c0:	beq	26684 <flatcc_emitter@@Base+0x12c>
   267c4:	ldr	r5, [r7, #-4]
   267c8:	ldr	r6, [r7, #-8]
   267cc:	add	r6, r6, r5
   267d0:	cmp	r5, #0
   267d4:	bne	26614 <flatcc_emitter@@Base+0xbc>
   267d8:	b	267b4 <flatcc_emitter@@Base+0x25c>
   267dc:	ldr	r3, [r4, #28]
   267e0:	add	r3, r3, #2944	; 0xb80
   267e4:	str	r3, [r4, #28]
   267e8:	str	r0, [r4]
   267ec:	str	r0, [r4, #4]
   267f0:	str	r0, [r0, #2944]	; 0xb80
   267f4:	str	r0, [r0, #2948]	; 0xb84
   267f8:	add	r3, r0, #1472	; 0x5c0
   267fc:	str	r3, [r4, #8]
   26800:	str	r3, [r4, #16]
   26804:	mov	r3, #1472	; 0x5c0
   26808:	str	r3, [r4, #12]
   2680c:	str	r3, [r4, #20]
   26810:	sub	r3, r3, #2944	; 0xb80
   26814:	str	r3, [r0, #2952]	; 0xb88
   26818:	b	26748 <flatcc_emitter@@Base+0x1f0>
   2681c:	ldr	r0, [pc, #200]	; 268ec <flatcc_emitter@@Base+0x394>
   26820:	bl	12600 <malloc@plt>
   26824:	cmp	r0, #0
   26828:	bne	267dc <flatcc_emitter@@Base+0x284>
   2682c:	mvn	r0, #0
   26830:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26834:	add	r7, r7, #8
   26838:	subs	sl, sl, #1
   2683c:	beq	26854 <flatcc_emitter@@Base+0x2fc>
   26840:	ldr	r8, [r7, #-8]
   26844:	ldr	r6, [r7, #-4]
   26848:	cmp	r6, #0
   2684c:	bne	26750 <flatcc_emitter@@Base+0x1f8>
   26850:	b	26834 <flatcc_emitter@@Base+0x2dc>
   26854:	mov	r0, #0
   26858:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2685c:	ldr	r0, [pc, #136]	; 268ec <flatcc_emitter@@Base+0x394>
   26860:	bl	12600 <malloc@plt>
   26864:	cmp	r0, #0
   26868:	beq	267ac <flatcc_emitter@@Base+0x254>
   2686c:	ldr	r3, [r4, #28]
   26870:	add	r3, r3, #2944	; 0xb80
   26874:	str	r3, [r4, #28]
   26878:	ldr	r3, [r4, #4]
   2687c:	str	r3, [r0, #2948]	; 0xb84
   26880:	str	r9, [r0, #2944]	; 0xb80
   26884:	str	r0, [r9, #2948]	; 0xb84
   26888:	ldr	r3, [r4, #4]
   2688c:	str	r0, [r3, #2944]	; 0xb80
   26890:	str	r0, [r4]
   26894:	b	26660 <flatcc_emitter@@Base+0x108>
   26898:	ldr	r3, [r4, #28]
   2689c:	add	r3, r3, #2944	; 0xb80
   268a0:	str	r3, [r4, #28]
   268a4:	str	r0, [r4]
   268a8:	str	r0, [r4, #4]
   268ac:	str	r0, [r0, #2944]	; 0xb80
   268b0:	str	r0, [r0, #2948]	; 0xb84
   268b4:	add	r3, r0, #1472	; 0x5c0
   268b8:	str	r3, [r4, #8]
   268bc:	str	r3, [r4, #16]
   268c0:	str	fp, [r4, #12]
   268c4:	str	fp, [r4, #20]
   268c8:	ldr	r3, [pc, #32]	; 268f0 <flatcc_emitter@@Base+0x398>
   268cc:	str	r3, [r0, #2952]	; 0xb88
   268d0:	b	2660c <flatcc_emitter@@Base+0xb4>
   268d4:	ldr	r0, [pc, #16]	; 268ec <flatcc_emitter@@Base+0x394>
   268d8:	bl	12600 <malloc@plt>
   268dc:	cmp	r0, #0
   268e0:	bne	26898 <flatcc_emitter@@Base+0x340>
   268e4:	mvn	r0, #0
   268e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   268ec:	andeq	r0, r0, ip, lsl #23
   268f0:			; <UNDEFINED> instruction: 0xfffffa40

000268f4 <flatcc_emitter_copy_buffer@@Base>:
   268f4:	push	{r4, r5, r6, r7, r8, lr}
   268f8:	mov	r5, r1
   268fc:	ldr	r1, [r0, #24]
   26900:	cmp	r1, r2
   26904:	bhi	269a8 <flatcc_emitter_copy_buffer@@Base+0xb4>
   26908:	ldr	r3, [r0]
   2690c:	cmp	r3, #0
   26910:	beq	269b0 <flatcc_emitter_copy_buffer@@Base+0xbc>
   26914:	mov	r6, r0
   26918:	ldr	r2, [r0, #4]
   2691c:	cmp	r3, r2
   26920:	beq	26994 <flatcc_emitter_copy_buffer@@Base+0xa0>
   26924:	ldr	r4, [r0, #12]
   26928:	rsb	r4, r4, #2944	; 0xb80
   2692c:	mov	r2, r4
   26930:	ldr	r1, [r0, #8]
   26934:	mov	r0, r5
   26938:	bl	125ac <memcpy@plt>
   2693c:	add	r5, r5, r4
   26940:	ldr	r3, [r6]
   26944:	ldr	r4, [r3, #2944]	; 0xb80
   26948:	ldr	r1, [r6, #4]
   2694c:	cmp	r4, r1
   26950:	beq	2697c <flatcc_emitter_copy_buffer@@Base+0x88>
   26954:	mov	r7, #2944	; 0xb80
   26958:	mov	r2, r7
   2695c:	mov	r1, r4
   26960:	mov	r0, r5
   26964:	bl	125ac <memcpy@plt>
   26968:	add	r5, r5, #2944	; 0xb80
   2696c:	ldr	r4, [r4, #2944]	; 0xb80
   26970:	ldr	r1, [r6, #4]
   26974:	cmp	r1, r4
   26978:	bne	26958 <flatcc_emitter_copy_buffer@@Base+0x64>
   2697c:	ldr	r2, [r6, #20]
   26980:	rsb	r2, r2, #2944	; 0xb80
   26984:	mov	r0, r5
   26988:	bl	125ac <memcpy@plt>
   2698c:	mov	r0, r5
   26990:	pop	{r4, r5, r6, r7, r8, pc}
   26994:	mov	r2, r1
   26998:	ldr	r1, [r0, #8]
   2699c:	mov	r0, r5
   269a0:	bl	125ac <memcpy@plt>
   269a4:	b	2698c <flatcc_emitter_copy_buffer@@Base+0x98>
   269a8:	mov	r5, #0
   269ac:	b	2698c <flatcc_emitter_copy_buffer@@Base+0x98>
   269b0:	mov	r5, #0
   269b4:	b	2698c <flatcc_emitter_copy_buffer@@Base+0x98>
   269b8:	sub	sp, sp, #8
   269bc:	push	{r4, r5, r6, lr}
   269c0:	add	r1, sp, #12
   269c4:	stmib	r1, {r2, r3}
   269c8:	ldrd	r2, [sp, #16]
   269cc:	ldr	r6, [sp, #24]
   269d0:	orrs	r1, r2, r3
   269d4:	beq	26a84 <flatcc_emitter_copy_buffer@@Base+0x190>
   269d8:	mov	lr, r0
   269dc:	mov	r0, #0
   269e0:	ldr	r1, [pc, #176]	; 26a98 <flatcc_emitter_copy_buffer@@Base+0x1a4>
   269e4:	and	r0, r0, r2
   269e8:	and	r1, r1, r3
   269ec:	orrs	r1, r0, r1
   269f0:	subeq	ip, r6, #10
   269f4:	bne	26a2c <flatcc_emitter_copy_buffer@@Base+0x138>
   269f8:	lsl	r1, r3, #10
   269fc:	orr	r1, r1, r2, lsr #22
   26a00:	lsl	r0, r2, #10
   26a04:	mov	r2, r0
   26a08:	mov	r3, r1
   26a0c:	mov	r6, ip
   26a10:	mov	r0, #0
   26a14:	ldr	r1, [pc, #124]	; 26a98 <flatcc_emitter_copy_buffer@@Base+0x1a4>
   26a18:	and	r0, r0, r2
   26a1c:	and	r1, r1, r3
   26a20:	sub	ip, ip, #10
   26a24:	orrs	r1, r0, r1
   26a28:	beq	269f8 <flatcc_emitter_copy_buffer@@Base+0x104>
   26a2c:	cmp	r2, #0
   26a30:	sbcs	r1, r3, #0
   26a34:	blt	26a60 <flatcc_emitter_copy_buffer@@Base+0x16c>
   26a38:	sub	r1, r6, #1
   26a3c:	adds	r4, r2, r2
   26a40:	adc	r5, r3, r3
   26a44:	mov	r2, r4
   26a48:	mov	r3, r5
   26a4c:	mov	r6, r1
   26a50:	sub	r1, r1, #1
   26a54:	cmp	r4, #0
   26a58:	sbcs	r0, r5, #0
   26a5c:	bge	26a3c <flatcc_emitter_copy_buffer@@Base+0x148>
   26a60:	strd	r2, [sp, #16]
   26a64:	str	r6, [sp, #24]
   26a68:	add	r3, sp, #12
   26a6c:	ldmib	r3, {r0, r1, r2, r3}
   26a70:	stm	lr, {r0, r1, r2, r3}
   26a74:	mov	r0, lr
   26a78:	pop	{r4, r5, r6, lr}
   26a7c:	add	sp, sp, #8
   26a80:	bx	lr
   26a84:	ldr	r3, [pc, #16]	; 26a9c <flatcc_emitter_copy_buffer@@Base+0x1a8>
   26a88:	mov	r2, #260	; 0x104
   26a8c:	ldr	r1, [pc, #12]	; 26aa0 <flatcc_emitter_copy_buffer@@Base+0x1ac>
   26a90:	ldr	r0, [pc, #12]	; 26aa4 <flatcc_emitter_copy_buffer@@Base+0x1b0>
   26a94:	bl	126a8 <__assert_fail@plt>
   26a98:			; <UNDEFINED> instruction: 0xffc00000
   26a9c:	andeq	ip, r2, r8, asr r4
   26aa0:	ldrdeq	ip, [r2], -r8
   26aa4:	andeq	ip, r2, r0, lsr sp

00026aa8 <grisu3_diy_fp_encode_double@@Base>:
   26aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26aac:	sub	sp, sp, #76	; 0x4c
   26ab0:	mov	r4, r3
   26ab4:	ldr	sl, [sp, #112]	; 0x70
   26ab8:	cmp	sl, #0
   26abc:	movne	sl, #4
   26ac0:	sub	r5, r2, r3
   26ac4:	strd	r0, [sp, #56]	; 0x38
   26ac8:	mov	r3, #0
   26acc:	str	r3, [sp, #64]	; 0x40
   26ad0:	add	ip, sp, #56	; 0x38
   26ad4:	add	r3, sp, #72	; 0x48
   26ad8:	ldmdb	r3, {r0, r1}
   26adc:	stm	sp, {r0, r1}
   26ae0:	ldm	ip, {r2, r3}
   26ae4:	mov	r0, ip
   26ae8:	bl	269b8 <flatcc_emitter_copy_buffer@@Base+0xc4>
   26aec:	ldrd	r6, [sp, #56]	; 0x38
   26af0:	ldr	lr, [sp, #64]	; 0x40
   26af4:	rsb	r0, lr, #0
   26af8:	lsl	r3, sl, r0
   26afc:	str	r3, [sp, #32]
   26b00:	cmn	r5, #348	; 0x15c
   26b04:	blt	26ec4 <grisu3_diy_fp_encode_double@@Base+0x41c>
   26b08:	cmp	r5, #348	; 0x15c
   26b0c:	bge	26ed8 <grisu3_diy_fp_encode_double@@Base+0x430>
   26b10:	add	r3, r5, #348	; 0x15c
   26b14:	add	r2, r3, #7
   26b18:	cmp	r3, #0
   26b1c:	movlt	r3, r2
   26b20:	asr	r3, r3, #3
   26b24:	ldr	r2, [pc, #1068]	; 26f58 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   26b28:	add	r3, r2, r3, lsl #4
   26b2c:	ldrsh	ip, [r3, #66]	; 0x42
   26b30:	ldrd	r0, [r3, #56]	; 0x38
   26b34:	strd	r0, [sp, #24]
   26b38:	ldrsh	r3, [r3, #64]	; 0x40
   26b3c:	str	r3, [sp, #36]	; 0x24
   26b40:	cmp	r5, ip
   26b44:	blt	26eec <grisu3_diy_fp_encode_double@@Base+0x444>
   26b48:	add	r3, ip, #8
   26b4c:	cmp	r5, r3
   26b50:	bge	26f00 <grisu3_diy_fp_encode_double@@Base+0x458>
   26b54:	cmp	r5, ip
   26b58:	beq	26c3c <grisu3_diy_fp_encode_double@@Base+0x194>
   26b5c:	sub	ip, r5, ip
   26b60:	sub	ip, ip, #1
   26b64:	cmp	ip, #6
   26b68:	bhi	26f14 <grisu3_diy_fp_encode_double@@Base+0x46c>
   26b6c:	ldr	r2, [pc, #1000]	; 26f5c <grisu3_diy_fp_encode_double@@Base+0x4b4>
   26b70:	lsl	r3, ip, #4
   26b74:	add	r5, r2, r3
   26b78:	ldrd	r8, [r2, r3]
   26b7c:	mov	r3, #0
   26b80:	mov	r0, r8
   26b84:	mov	r1, #0
   26b88:	umull	sl, fp, r6, r9
   26b8c:	strd	sl, [sp, #16]
   26b90:	mla	sl, r9, r3, fp
   26b94:	str	sl, [sp, #20]
   26b98:	umull	sl, fp, r7, r8
   26b9c:	strd	sl, [sp, #8]
   26ba0:	mla	sl, r7, r1, fp
   26ba4:	str	sl, [sp, #12]
   26ba8:	mul	r1, r6, r1
   26bac:	mla	r3, r8, r3, r1
   26bb0:	umull	r0, r1, r6, r0
   26bb4:	add	r1, r3, r1
   26bb8:	mov	r2, r1
   26bbc:	mov	r3, #0
   26bc0:	ldr	r1, [sp, #8]
   26bc4:	adds	r2, r2, r1
   26bc8:	adc	r3, r3, #0
   26bcc:	adds	r2, r2, #-2147483648	; 0x80000000
   26bd0:	adc	r3, r3, #0
   26bd4:	ldrd	sl, [sp, #16]
   26bd8:	adds	r2, r2, sl
   26bdc:	adc	r3, r3, #0
   26be0:	mov	r0, r3
   26be4:	mov	r1, #0
   26be8:	ldr	r3, [sp, #12]
   26bec:	str	r3, [sp, #16]
   26bf0:	str	r1, [sp, #20]
   26bf4:	mov	r2, fp
   26bf8:	ldrd	sl, [sp, #16]
   26bfc:	adds	sl, sl, r2
   26c00:	adc	fp, fp, r1
   26c04:	mov	r2, sl
   26c08:	mov	r3, fp
   26c0c:	umlal	r2, r3, r9, r7
   26c10:	adds	r6, r0, r2
   26c14:	adc	r7, r1, r3
   26c18:	ldr	r3, [r5, #8]
   26c1c:	add	lr, lr, r3
   26c20:	add	lr, lr, #64	; 0x40
   26c24:	add	r4, r4, #1
   26c28:	add	ip, r4, ip
   26c2c:	cmp	ip, #19
   26c30:	ldrgt	r3, [sp, #32]
   26c34:	addgt	r3, r3, #4
   26c38:	strgt	r3, [sp, #32]
   26c3c:	mov	ip, #0
   26c40:	mov	r2, r6
   26c44:	mov	r3, #0
   26c48:	ldrd	sl, [sp, #24]
   26c4c:	mov	r8, sl
   26c50:	mov	r9, #0
   26c54:	umull	r0, r1, r6, fp
   26c58:	mla	r1, fp, r3, r1
   26c5c:	umull	r4, r5, r7, sl
   26c60:	mla	r5, r7, r9, r5
   26c64:	mul	r6, r6, r9
   26c68:	mla	r3, sl, r3, r6
   26c6c:	umull	r8, r9, r2, r8
   26c70:	add	r9, r3, r9
   26c74:	adds	r2, r9, r4
   26c78:	adc	r3, ip, #0
   26c7c:	adds	r2, r2, #-2147483648	; 0x80000000
   26c80:	adc	r3, r3, #0
   26c84:	adds	r2, r2, r0
   26c88:	adc	r3, r3, #0
   26c8c:	mov	r8, r3
   26c90:	mov	r2, r5
   26c94:	adds	r2, r2, r1
   26c98:	adc	r3, ip, ip
   26c9c:	umlal	r2, r3, fp, r7
   26ca0:	adds	r8, r8, r2
   26ca4:	adc	r9, ip, r3
   26ca8:	ldr	r3, [sp, #36]	; 0x24
   26cac:	add	fp, lr, r3
   26cb0:	add	fp, fp, #64	; 0x40
   26cb4:	ldr	r3, [sp, #32]
   26cb8:	cmp	r3, ip
   26cbc:	movne	r0, #9
   26cc0:	moveq	r0, #8
   26cc4:	add	sl, r3, r0
   26cc8:	strd	r8, [sp, #56]	; 0x38
   26ccc:	str	fp, [sp, #64]	; 0x40
   26cd0:	add	r5, sp, #40	; 0x28
   26cd4:	add	r3, sp, #72	; 0x48
   26cd8:	ldmdb	r3, {r0, r1}
   26cdc:	stm	sp, {r0, r1}
   26ce0:	add	r4, sp, #56	; 0x38
   26ce4:	ldm	r4, {r2, r3}
   26ce8:	mov	r0, r5
   26cec:	bl	269b8 <flatcc_emitter_copy_buffer@@Base+0xc4>
   26cf0:	ldm	r5, {r0, r1, r2, r3}
   26cf4:	stm	r4, {r0, r1, r2, r3}
   26cf8:	ldrd	r4, [sp, #56]	; 0x38
   26cfc:	ldr	r1, [sp, #64]	; 0x40
   26d00:	sub	r0, fp, r1
   26d04:	lsl	r0, sl, r0
   26d08:	add	r3, r1, #64	; 0x40
   26d0c:	ldr	r2, [pc, #588]	; 26f60 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   26d10:	cmp	r3, r2
   26d14:	movge	r8, #0
   26d18:	bge	26d74 <grisu3_diy_fp_encode_double@@Base+0x2cc>
   26d1c:	mvn	r2, #1072	; 0x430
   26d20:	cmp	r3, r2
   26d24:	blt	26f28 <grisu3_diy_fp_encode_double@@Base+0x480>
   26d28:	add	r8, r1, #1136	; 0x470
   26d2c:	add	r8, r8, #2
   26d30:	rsb	r3, r8, #67	; 0x43
   26d34:	cmp	r3, #63	; 0x3f
   26d38:	rsble	r8, r8, #64	; 0x40
   26d3c:	ble	26d74 <grisu3_diy_fp_encode_double@@Base+0x2cc>
   26d40:	rsb	r3, r8, #2
   26d44:	rsb	lr, r3, #32
   26d48:	sub	ip, r3, #32
   26d4c:	lsr	r2, r4, r3
   26d50:	orr	r2, r2, r5, lsl lr
   26d54:	orr	r2, r2, r5, lsr ip
   26d58:	lsr	ip, r5, r3
   26d5c:	mov	r4, r2
   26d60:	mov	r5, ip
   26d64:	add	r1, r1, r3
   26d68:	asr	r0, r0, r3
   26d6c:	add	r0, r0, #9
   26d70:	mov	r8, #62	; 0x3e
   26d74:	rsb	lr, r8, #32
   26d78:	sub	ip, r8, #32
   26d7c:	lsr	r2, r4, r8
   26d80:	orr	r2, r2, r5, lsl lr
   26d84:	orr	r2, r2, r5, lsr ip
   26d88:	lsr	r3, r5, r8
   26d8c:	add	r1, r8, r1
   26d90:	sub	lr, r8, #1
   26d94:	mov	ip, #1
   26d98:	lsl	r6, ip, lr
   26d9c:	and	r4, r4, r6
   26da0:	lsl	ip, r4, #3
   26da4:	mov	r4, #8
   26da8:	lsl	lr, r4, lr
   26dac:	add	r6, r0, lr
   26db0:	cmp	r8, r6
   26db4:	blt	26ddc <grisu3_diy_fp_encode_double@@Base+0x334>
   26db8:	adds	r2, r2, #1
   26dbc:	adc	r3, r3, #0
   26dc0:	mov	r4, #0
   26dc4:	and	r5, r3, #2097152	; 0x200000
   26dc8:	orrs	r4, r4, r5
   26dcc:	beq	26ddc <grisu3_diy_fp_encode_double@@Base+0x334>
   26dd0:	lsrs	r3, r3, #1
   26dd4:	rrx	r2, r2
   26dd8:	add	r1, r1, #1
   26ddc:	mvn	r4, #0
   26de0:	ldr	r5, [pc, #380]	; 26f64 <grisu3_diy_fp_encode_double@@Base+0x4bc>
   26de4:	cmp	r3, r5
   26de8:	cmpeq	r2, r4
   26dec:	bls	26e08 <grisu3_diy_fp_encode_double@@Base+0x360>
   26df0:	lsrs	r3, r3, #1
   26df4:	rrx	r2, r2
   26df8:	add	r1, r1, #1
   26dfc:	cmp	r3, r5
   26e00:	cmpeq	r2, r4
   26e04:	bhi	26df0 <grisu3_diy_fp_encode_double@@Base+0x348>
   26e08:	ldr	r4, [pc, #344]	; 26f68 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   26e0c:	cmp	r1, r4
   26e10:	movlt	r2, #0
   26e14:	movlt	r3, #0
   26e18:	blt	26e98 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   26e1c:	mvn	r4, #1072	; 0x430
   26e20:	cmp	r1, r4
   26e24:	blt	26f30 <grisu3_diy_fp_encode_double@@Base+0x488>
   26e28:	mov	r4, #0
   26e2c:	and	r5, r3, #1048576	; 0x100000
   26e30:	orrs	r4, r4, r5
   26e34:	bne	26e70 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   26e38:	sub	r7, r1, #1
   26e3c:	ldr	r8, [pc, #292]	; 26f68 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   26e40:	adds	r4, r2, r2
   26e44:	adc	r5, r3, r3
   26e48:	mov	r2, r4
   26e4c:	mov	r3, r5
   26e50:	mov	r1, r7
   26e54:	cmp	r7, r8
   26e58:	beq	26f3c <grisu3_diy_fp_encode_double@@Base+0x494>
   26e5c:	mov	r4, #0
   26e60:	and	r5, r5, #1048576	; 0x100000
   26e64:	sub	r7, r7, #1
   26e68:	orrs	r4, r4, r5
   26e6c:	beq	26e40 <grisu3_diy_fp_encode_double@@Base+0x398>
   26e70:	add	r8, r1, #1072	; 0x430
   26e74:	add	r8, r8, #3
   26e78:	mvn	r4, #0
   26e7c:	ldr	r5, [pc, #232]	; 26f6c <grisu3_diy_fp_encode_double@@Base+0x4c4>
   26e80:	and	r2, r2, r4
   26e84:	and	r3, r3, r5
   26e88:	mov	r4, #0
   26e8c:	lsl	r5, r8, #20
   26e90:	orr	r2, r2, r4
   26e94:	orr	r3, r3, r5
   26e98:	ldr	r1, [sp, #116]	; 0x74
   26e9c:	strd	r2, [r1]
   26ea0:	sub	r0, lr, r0
   26ea4:	cmp	ip, r6
   26ea8:	movlt	r6, #0
   26eac:	movge	r6, #1
   26eb0:	cmp	ip, r0
   26eb4:	movgt	r0, r6
   26eb8:	orrle	r0, r6, #1
   26ebc:	add	sp, sp, #76	; 0x4c
   26ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ec4:	ldr	r3, [pc, #164]	; 26f70 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   26ec8:	mov	r2, #80	; 0x50
   26ecc:	ldr	r1, [pc, #160]	; 26f74 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   26ed0:	ldr	r0, [pc, #160]	; 26f78 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   26ed4:	bl	126a8 <__assert_fail@plt>
   26ed8:	ldr	r3, [pc, #144]	; 26f70 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   26edc:	mov	r2, #81	; 0x51
   26ee0:	ldr	r1, [pc, #140]	; 26f74 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   26ee4:	ldr	r0, [pc, #144]	; 26f7c <grisu3_diy_fp_encode_double@@Base+0x4d4>
   26ee8:	bl	126a8 <__assert_fail@plt>
   26eec:	add	r3, r2, #24
   26ef0:	mov	r2, #88	; 0x58
   26ef4:	ldr	r1, [pc, #120]	; 26f74 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   26ef8:	ldr	r0, [pc, #128]	; 26f80 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   26efc:	bl	126a8 <__assert_fail@plt>
   26f00:	ldr	r3, [pc, #104]	; 26f70 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   26f04:	mov	r2, #89	; 0x59
   26f08:	ldr	r1, [pc, #100]	; 26f74 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   26f0c:	ldr	r0, [pc, #112]	; 26f84 <grisu3_diy_fp_encode_double@@Base+0x4dc>
   26f10:	bl	126a8 <__assert_fail@plt>
   26f14:	ldr	r3, [pc, #108]	; 26f88 <grisu3_diy_fp_encode_double@@Base+0x4e0>
   26f18:	mov	r2, #185	; 0xb9
   26f1c:	ldr	r1, [pc, #80]	; 26f74 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   26f20:	ldr	r0, [pc, #100]	; 26f8c <grisu3_diy_fp_encode_double@@Base+0x4e4>
   26f24:	bl	126a8 <__assert_fail@plt>
   26f28:	mov	r8, #0
   26f2c:	b	26d40 <grisu3_diy_fp_encode_double@@Base+0x298>
   26f30:	ldr	r4, [pc, #48]	; 26f68 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   26f34:	cmp	r1, r4
   26f38:	bne	26e70 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   26f3c:	mov	r4, #0
   26f40:	and	r5, r3, #1048576	; 0x100000
   26f44:	orrs	r1, r4, r5
   26f48:	moveq	r8, #0
   26f4c:	beq	26e78 <grisu3_diy_fp_encode_double@@Base+0x3d0>
   26f50:	ldr	r1, [pc, #16]	; 26f68 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   26f54:	b	26e70 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   26f58:	andeq	ip, r2, r8, asr r4
   26f5c:	andeq	ip, r2, r0, lsr #20
   26f60:			; <UNDEFINED> instruction: 0xfffffc0e
   26f64:			; <UNDEFINED> instruction: 0x001fffff
   26f68:			; <UNDEFINED> instruction: 0xfffffbce
   26f6c:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   26f70:	andeq	ip, r2, r0, ror r4
   26f74:	andeq	ip, r2, ip, lsr sp
   26f78:	muleq	r2, r4, sp
   26f7c:			; <UNDEFINED> instruction: 0x0002cdb4
   26f80:	andeq	ip, r2, r0, ror #27
   26f84:	strdeq	ip, [r2], -r0
   26f88:	andeq	ip, r2, r0, lsl #20
   26f8c:	andeq	ip, r2, ip, lsl #28
   26f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f94:	sub	sp, sp, #44	; 0x2c
   26f98:	str	r0, [sp, #12]
   26f9c:	mov	ip, r2
   26fa0:	str	r2, [sp, #20]
   26fa4:	mov	r2, #0
   26fa8:	mov	r3, #0
   26fac:	strd	r2, [ip]
   26fb0:	cmp	r1, #1000	; 0x3e8
   26fb4:	addle	r1, r1, #1
   26fb8:	movle	r3, r0
   26fbc:	addle	r9, r3, r1
   26fc0:	ldrgt	r3, [sp, #12]
   26fc4:	addgt	r9, r3, #1000	; 0x3e8
   26fc8:	addgt	r9, r9, #1
   26fcc:	ldr	r3, [sp, #12]
   26fd0:	cmp	r9, r3
   26fd4:	beq	278bc <grisu3_diy_fp_encode_double@@Base+0xe14>
   26fd8:	ldrb	r3, [r3]
   26fdc:	cmp	r3, #45	; 0x2d
   26fe0:	beq	27028 <grisu3_diy_fp_encode_double@@Base+0x580>
   26fe4:	ldr	r3, [sp, #12]
   26fe8:	mov	r2, #0
   26fec:	str	r2, [sp, #16]
   26ff0:	ldrb	r0, [r3]
   26ff4:	cmp	r0, #48	; 0x30
   26ff8:	beq	27044 <grisu3_diy_fp_encode_double@@Base+0x59c>
   26ffc:	sub	r2, r0, #49	; 0x31
   27000:	uxtb	r2, r2
   27004:	cmp	r2, #8
   27008:	bls	270b8 <grisu3_diy_fp_encode_double@@Base+0x610>
   2700c:	ldr	r4, [sp, #12]
   27010:	ldr	r3, [sp, #16]
   27014:	cmp	r3, #0
   27018:	movne	r4, #0
   2701c:	mov	r0, r4
   27020:	add	sp, sp, #44	; 0x2c
   27024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27028:	ldr	r3, [sp, #12]
   2702c:	add	r3, r3, #1
   27030:	cmp	r9, r3
   27034:	beq	278c4 <grisu3_diy_fp_encode_double@@Base+0xe1c>
   27038:	mov	r2, #1
   2703c:	str	r2, [sp, #16]
   27040:	b	26ff0 <grisu3_diy_fp_encode_double@@Base+0x548>
   27044:	add	r5, r3, #1
   27048:	cmp	r9, r5
   2704c:	beq	2793c <grisu3_diy_fp_encode_double@@Base+0xe94>
   27050:	ldrb	r2, [r3, #1]
   27054:	orr	r1, r2, #32
   27058:	cmp	r1, #120	; 0x78
   2705c:	beq	278cc <grisu3_diy_fp_encode_double@@Base+0xe24>
   27060:	cmp	r2, #48	; 0x30
   27064:	bne	2708c <grisu3_diy_fp_encode_double@@Base+0x5e4>
   27068:	add	r3, r3, #2
   2706c:	mov	r1, r9
   27070:	mov	r5, r3
   27074:	cmp	r3, r1
   27078:	beq	278d4 <grisu3_diy_fp_encode_double@@Base+0xe2c>
   2707c:	add	r3, r3, #1
   27080:	ldrb	r2, [r5]
   27084:	cmp	r2, #48	; 0x30
   27088:	beq	27070 <grisu3_diy_fp_encode_double@@Base+0x5c8>
   2708c:	ldrb	r2, [r5]
   27090:	sub	r3, r2, #48	; 0x30
   27094:	uxtb	r3, r3
   27098:	cmp	r3, #9
   2709c:	movhi	r4, r5
   270a0:	movhi	sl, #0
   270a4:	movhi	fp, #0
   270a8:	bhi	2796c <grisu3_diy_fp_encode_double@@Base+0xec4>
   270ac:	mov	sl, #0
   270b0:	mov	fp, #0
   270b4:	b	270fc <grisu3_diy_fp_encode_double@@Base+0x654>
   270b8:	add	r5, r3, #1
   270bc:	sub	r0, r0, #48	; 0x30
   270c0:	mov	sl, r0
   270c4:	asr	fp, r0, #31
   270c8:	cmp	r9, r5
   270cc:	moveq	r4, #0
   270d0:	beq	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   270d4:	ldrb	r2, [r3, #1]
   270d8:	sub	r3, r2, #48	; 0x30
   270dc:	uxtb	r3, r3
   270e0:	cmp	r3, #9
   270e4:	bhi	27968 <grisu3_diy_fp_encode_double@@Base+0xec0>
   270e8:	add	r1, pc, #896	; 0x380
   270ec:	ldrd	r0, [r1]
   270f0:	cmp	fp, r1
   270f4:	cmpeq	sl, r0
   270f8:	bhi	272c4 <grisu3_diy_fp_encode_double@@Base+0x81c>
   270fc:	add	ip, r5, #1
   27100:	mov	r8, r9
   27104:	mov	lr, #10
   27108:	add	r7, pc, #864	; 0x360
   2710c:	ldrd	r6, [r7]
   27110:	mov	r4, ip
   27114:	umull	r0, r1, sl, lr
   27118:	mla	r1, lr, fp, r1
   2711c:	uxtb	sl, r2
   27120:	mov	fp, #0
   27124:	adds	sl, sl, r0
   27128:	adc	fp, fp, r1
   2712c:	subs	sl, sl, #48	; 0x30
   27130:	sbc	fp, fp, #0
   27134:	cmp	ip, r8
   27138:	beq	2794c <grisu3_diy_fp_encode_double@@Base+0xea4>
   2713c:	ldrb	r2, [ip], #1
   27140:	sub	r3, r2, #48	; 0x30
   27144:	uxtb	r3, r3
   27148:	cmp	r3, #9
   2714c:	bhi	2796c <grisu3_diy_fp_encode_double@@Base+0xec4>
   27150:	cmp	fp, r7
   27154:	cmpeq	sl, r6
   27158:	bls	27110 <grisu3_diy_fp_encode_double@@Base+0x668>
   2715c:	mov	r1, r4
   27160:	cmp	r2, #52	; 0x34
   27164:	movls	r2, #0
   27168:	movhi	r2, #1
   2716c:	adds	sl, sl, r2
   27170:	adc	fp, fp, #0
   27174:	sub	r8, r1, r5
   27178:	cmp	r9, r1
   2717c:	moveq	r4, #0
   27180:	beq	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   27184:	mov	r3, #1
   27188:	str	r3, [sp, #24]
   2718c:	ldrb	r3, [r1]
   27190:	cmp	r3, #48	; 0x30
   27194:	bne	27980 <grisu3_diy_fp_encode_double@@Base+0xed8>
   27198:	add	r2, r1, #1
   2719c:	mov	ip, r9
   271a0:	sub	r3, r2, r1
   271a4:	mov	r4, r2
   271a8:	cmp	r2, ip
   271ac:	beq	278dc <grisu3_diy_fp_encode_double@@Base+0xe34>
   271b0:	add	r2, r2, #1
   271b4:	ldrb	r0, [r4]
   271b8:	cmp	r0, #48	; 0x30
   271bc:	beq	271a0 <grisu3_diy_fp_encode_double@@Base+0x6f8>
   271c0:	ldrb	r2, [r4]
   271c4:	sub	r2, r2, #49	; 0x31
   271c8:	uxtb	r2, r2
   271cc:	cmp	r2, #8
   271d0:	bhi	27234 <grisu3_diy_fp_encode_double@@Base+0x78c>
   271d4:	add	r0, r3, #1
   271d8:	add	r1, r4, #1
   271dc:	cmp	r9, r1
   271e0:	beq	278e4 <grisu3_diy_fp_encode_double@@Base+0xe3c>
   271e4:	ldrb	r2, [r4, #1]
   271e8:	sub	r2, r2, #48	; 0x30
   271ec:	uxtb	r2, r2
   271f0:	cmp	r2, #9
   271f4:	bhi	2798c <grisu3_diy_fp_encode_double@@Base+0xee4>
   271f8:	add	r1, r4, #2
   271fc:	mov	r0, r9
   27200:	sub	ip, r3, r4
   27204:	add	r3, ip, r1
   27208:	mov	r4, r1
   2720c:	cmp	r1, r0
   27210:	beq	278ec <grisu3_diy_fp_encode_double@@Base+0xe44>
   27214:	add	r1, r1, #1
   27218:	ldrb	r2, [r4]
   2721c:	sub	r2, r2, #48	; 0x30
   27220:	uxtb	r2, r2
   27224:	cmp	r2, #9
   27228:	bls	27204 <grisu3_diy_fp_encode_double@@Base+0x75c>
   2722c:	mov	r2, #1
   27230:	str	r2, [sp, #24]
   27234:	ldrb	r2, [r4]
   27238:	cmp	r2, #46	; 0x2e
   2723c:	beq	272cc <grisu3_diy_fp_encode_double@@Base+0x824>
   27240:	add	r3, r3, r8
   27244:	ldrb	r2, [r4]
   27248:	orr	r2, r2, #32
   2724c:	cmp	r2, #101	; 0x65
   27250:	movne	r2, #0
   27254:	beq	27488 <grisu3_diy_fp_encode_double@@Base+0x9e0>
   27258:	add	r5, r2, r3
   2725c:	cmp	r9, r4
   27260:	moveq	r4, #0
   27264:	beq	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   27268:	ldr	r6, [sp, #20]
   2726c:	ldr	r7, [sp, #12]
   27270:	orrs	r3, sl, fp
   27274:	moveq	r2, #1
   27278:	movne	r2, #0
   2727c:	cmn	r5, #324	; 0x144
   27280:	movge	r3, #0
   27284:	movlt	r3, #1
   27288:	orrs	r3, r2, r3
   2728c:	bne	272ac <grisu3_diy_fp_encode_double@@Base+0x804>
   27290:	sub	r2, r5, #1
   27294:	ldr	r3, [pc, #476]	; 27478 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   27298:	cmp	r2, r3
   2729c:	ble	2755c <grisu3_diy_fp_encode_double@@Base+0xab4>
   272a0:	mov	r2, #0
   272a4:	ldr	r3, [pc, #464]	; 2747c <grisu3_diy_fp_encode_double@@Base+0x9d4>
   272a8:	strd	r2, [r6]
   272ac:	ldr	r3, [sp, #16]
   272b0:	cmp	r3, #0
   272b4:	vldrne	d7, [r6]
   272b8:	vnegne.f64	d7, d7
   272bc:	vstrne	d7, [r6]
   272c0:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   272c4:	mov	r1, r5
   272c8:	b	27160 <grisu3_diy_fp_encode_double@@Base+0x6b8>
   272cc:	add	r2, r4, #1
   272d0:	mov	r1, r2
   272d4:	str	r2, [sp, #28]
   272d8:	ldrb	r5, [r4, #1]
   272dc:	sub	r2, r5, #48	; 0x30
   272e0:	uxtb	r2, r2
   272e4:	cmp	r2, #9
   272e8:	bhi	278f4 <grisu3_diy_fp_encode_double@@Base+0xe4c>
   272ec:	cmp	r9, r1
   272f0:	beq	278fc <grisu3_diy_fp_encode_double@@Base+0xe54>
   272f4:	add	r7, pc, #372	; 0x174
   272f8:	ldrd	r6, [r7]
   272fc:	cmp	fp, r7
   27300:	cmpeq	sl, r6
   27304:	bhi	279e0 <grisu3_diy_fp_encode_double@@Base+0xf38>
   27308:	add	ip, r4, #2
   2730c:	mov	lr, r9
   27310:	mov	r2, #10
   27314:	add	r7, pc, #340	; 0x154
   27318:	ldrd	r6, [r7]
   2731c:	mov	r4, ip
   27320:	umull	r0, r1, sl, r2
   27324:	mla	r1, r2, fp, r1
   27328:	uxtb	sl, r5
   2732c:	mov	fp, #0
   27330:	adds	sl, sl, r0
   27334:	adc	fp, fp, r1
   27338:	subs	sl, sl, #48	; 0x30
   2733c:	sbc	fp, fp, #0
   27340:	sub	r3, r3, #1
   27344:	cmp	lr, ip
   27348:	beq	279a0 <grisu3_diy_fp_encode_double@@Base+0xef8>
   2734c:	mov	r0, ip
   27350:	ldrb	r5, [r0], #1
   27354:	sub	r1, r5, #48	; 0x30
   27358:	uxtb	r1, r1
   2735c:	cmp	r1, #9
   27360:	bhi	27460 <grisu3_diy_fp_encode_double@@Base+0x9b8>
   27364:	cmp	fp, r7
   27368:	cmpeq	sl, r6
   2736c:	movls	ip, r0
   27370:	bls	2731c <grisu3_diy_fp_encode_double@@Base+0x874>
   27374:	ldr	r2, [sp, #24]
   27378:	cmp	r2, #0
   2737c:	bne	27394 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   27380:	cmp	r5, #52	; 0x34
   27384:	movls	r5, #0
   27388:	movhi	r5, #1
   2738c:	adds	sl, sl, r5
   27390:	adc	fp, fp, #0
   27394:	ldr	r2, [sp, #28]
   27398:	sub	r2, r4, r2
   2739c:	add	r8, r8, r2
   273a0:	cmp	r9, r4
   273a4:	moveq	r4, #0
   273a8:	beq	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   273ac:	mov	r2, #1
   273b0:	str	r2, [sp, #24]
   273b4:	ldrb	r2, [r4]
   273b8:	cmp	r2, #48	; 0x30
   273bc:	bne	273ec <grisu3_diy_fp_encode_double@@Base+0x944>
   273c0:	add	r2, r4, #1
   273c4:	mov	ip, r9
   273c8:	sub	r0, r3, r4
   273cc:	add	r3, r0, r2
   273d0:	mov	r4, r2
   273d4:	cmp	r2, ip
   273d8:	beq	27904 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   273dc:	add	r2, r2, #1
   273e0:	ldrb	r1, [r4]
   273e4:	cmp	r1, #48	; 0x30
   273e8:	beq	273cc <grisu3_diy_fp_encode_double@@Base+0x924>
   273ec:	ldrb	r2, [r4]
   273f0:	sub	r2, r2, #49	; 0x31
   273f4:	uxtb	r2, r2
   273f8:	cmp	r2, #8
   273fc:	bhi	27240 <grisu3_diy_fp_encode_double@@Base+0x798>
   27400:	add	r1, r4, #1
   27404:	cmp	r9, r1
   27408:	beq	2790c <grisu3_diy_fp_encode_double@@Base+0xe64>
   2740c:	ldrb	r2, [r4, #1]
   27410:	sub	r2, r2, #48	; 0x30
   27414:	uxtb	r2, r2
   27418:	cmp	r2, #9
   2741c:	bhi	279bc <grisu3_diy_fp_encode_double@@Base+0xf14>
   27420:	add	r1, r4, #2
   27424:	mov	r0, r9
   27428:	mov	r4, r1
   2742c:	cmp	r0, r1
   27430:	beq	27914 <grisu3_diy_fp_encode_double@@Base+0xe6c>
   27434:	add	r1, r1, #1
   27438:	ldrb	r2, [r4]
   2743c:	sub	r2, r2, #48	; 0x30
   27440:	uxtb	r2, r2
   27444:	cmp	r2, #9
   27448:	bls	27428 <grisu3_diy_fp_encode_double@@Base+0x980>
   2744c:	mov	r2, #1
   27450:	str	r2, [sp, #24]
   27454:	b	27240 <grisu3_diy_fp_encode_double@@Base+0x798>
   27458:	ldr	r4, [sp, #28]
   2745c:	b	27380 <grisu3_diy_fp_encode_double@@Base+0x8d8>
   27460:	ldr	r2, [sp, #28]
   27464:	sub	ip, ip, r2
   27468:	add	r8, r8, ip
   2746c:	b	273b4 <grisu3_diy_fp_encode_double@@Base+0x90c>
   27470:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   27474:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   27478:	andeq	r0, r0, r5, lsr r1
   2747c:	svcvc	0x00f00000	; IMB
   27480:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   27484:			; <UNDEFINED> instruction: 0x001fffff
   27488:	sub	r2, r9, r4
   2748c:	cmp	r2, #1
   27490:	ble	2791c <grisu3_diy_fp_encode_double@@Base+0xe74>
   27494:	ldrb	r2, [r4, #1]
   27498:	cmp	r2, #43	; 0x2b
   2749c:	beq	27534 <grisu3_diy_fp_encode_double@@Base+0xa8c>
   274a0:	cmp	r2, #45	; 0x2d
   274a4:	beq	27548 <grisu3_diy_fp_encode_double@@Base+0xaa0>
   274a8:	add	r1, r4, #1
   274ac:	mov	r6, #0
   274b0:	ldrb	r2, [r1]
   274b4:	sub	r0, r2, #48	; 0x30
   274b8:	uxtb	r0, r0
   274bc:	cmp	r0, #9
   274c0:	bhi	27934 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   274c4:	add	r4, r1, #1
   274c8:	sub	r2, r2, #48	; 0x30
   274cc:	cmp	r9, r4
   274d0:	beq	279cc <grisu3_diy_fp_encode_double@@Base+0xf24>
   274d4:	ldrb	ip, [r1, #1]
   274d8:	sub	r0, ip, #48	; 0x30
   274dc:	uxtb	r0, r0
   274e0:	cmp	r0, #9
   274e4:	bhi	27524 <grisu3_diy_fp_encode_double@@Base+0xa7c>
   274e8:	add	r1, r1, #2
   274ec:	mov	lr, r9
   274f0:	ldr	r5, [pc, #-120]	; 27480 <grisu3_diy_fp_encode_double@@Base+0x9d8>
   274f4:	cmp	r2, r5
   274f8:	addle	r2, r2, r2, lsl #2
   274fc:	addle	r2, ip, r2, lsl #1
   27500:	suble	r2, r2, #48	; 0x30
   27504:	mov	r4, r1
   27508:	cmp	lr, r1
   2750c:	beq	279cc <grisu3_diy_fp_encode_double@@Base+0xf24>
   27510:	ldrb	ip, [r1], #1
   27514:	sub	r0, ip, #48	; 0x30
   27518:	uxtb	r0, r0
   2751c:	cmp	r0, #9
   27520:	bls	274f4 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   27524:	cmp	r6, #0
   27528:	bne	279d8 <grisu3_diy_fp_encode_double@@Base+0xf30>
   2752c:	add	r5, r3, r2
   27530:	b	27268 <grisu3_diy_fp_encode_double@@Base+0x7c0>
   27534:	add	r1, r4, #2
   27538:	cmp	r9, r1
   2753c:	beq	27924 <grisu3_diy_fp_encode_double@@Base+0xe7c>
   27540:	mov	r6, #0
   27544:	b	274b0 <grisu3_diy_fp_encode_double@@Base+0xa08>
   27548:	add	r1, r4, #2
   2754c:	cmp	r9, r1
   27550:	beq	2792c <grisu3_diy_fp_encode_double@@Base+0xe84>
   27554:	mov	r6, #1
   27558:	b	274b0 <grisu3_diy_fp_encode_double@@Base+0xa08>
   2755c:	mvn	r2, #0
   27560:	ldr	r3, [pc, #-228]	; 27484 <grisu3_diy_fp_encode_double@@Base+0x9dc>
   27564:	cmp	fp, r3
   27568:	cmpeq	sl, r2
   2756c:	movls	r3, #1
   27570:	movhi	r3, #0
   27574:	cmp	r5, #22
   27578:	movhi	r3, #0
   2757c:	andls	r3, r3, #1
   27580:	cmp	r3, #0
   27584:	beq	27874 <grisu3_diy_fp_encode_double@@Base+0xdcc>
   27588:	mov	r0, sl
   2758c:	mov	r1, fp
   27590:	bl	2b330 <flatcc_json_parser_struct_as_root@@Base+0x418>
   27594:	vmov	d7, r0, r1
   27598:	sub	r3, r5, r8
   2759c:	add	r3, r3, #22
   275a0:	cmp	r3, #44	; 0x2c
   275a4:	ldrls	pc, [pc, r3, lsl #2]
   275a8:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   275ac:	andeq	r7, r2, r0, ror #12
   275b0:	andeq	r7, r2, r0, ror r6
   275b4:	andeq	r7, r2, ip, ror r6
   275b8:	andeq	r7, r2, r8, lsl #13
   275bc:	muleq	r2, r4, r6
   275c0:	andeq	r7, r2, r0, lsr #13
   275c4:	andeq	r7, r2, ip, lsr #13
   275c8:			; <UNDEFINED> instruction: 0x000276b8
   275cc:	andeq	r7, r2, r4, asr #13
   275d0:	ldrdeq	r7, [r2], -r0
   275d4:	ldrdeq	r7, [r2], -ip
   275d8:	andeq	r7, r2, r8, ror #13
   275dc:	strdeq	r7, [r2], -r4
   275e0:	andeq	r7, r2, r0, lsl #14
   275e4:	andeq	r7, r2, ip, lsl #14
   275e8:	andeq	r7, r2, r8, lsl r7
   275ec:	andeq	r7, r2, r4, lsr #14
   275f0:	andeq	r7, r2, r0, lsr r7
   275f4:	andeq	r7, r2, ip, lsr r7
   275f8:	andeq	r7, r2, r8, asr #14
   275fc:	andeq	r7, r2, r4, asr r7
   27600:	andeq	r7, r2, r0, ror #14
   27604:	andeq	r7, r2, r8, ror #12
   27608:	andeq	r7, r2, ip, ror #14
   2760c:	andeq	r7, r2, r8, ror r7
   27610:	andeq	r7, r2, r4, lsl #15
   27614:	muleq	r2, r0, r7
   27618:	muleq	r2, ip, r7
   2761c:	andeq	r7, r2, r8, lsr #15
   27620:			; <UNDEFINED> instruction: 0x000277b4
   27624:	andeq	r7, r2, r0, asr #15
   27628:	andeq	r7, r2, ip, asr #15
   2762c:	ldrdeq	r7, [r2], -r8
   27630:	andeq	r7, r2, r4, ror #15
   27634:	strdeq	r7, [r2], -r0
   27638:	strdeq	r7, [r2], -ip
   2763c:	andeq	r7, r2, r8, lsl #16
   27640:	andeq	r7, r2, r4, lsl r8
   27644:	andeq	r7, r2, r0, lsr #16
   27648:	andeq	r7, r2, ip, lsr #16
   2764c:	andeq	r7, r2, r8, lsr r8
   27650:	andeq	r7, r2, r4, asr #16
   27654:	andeq	r7, r2, r0, asr r8
   27658:	andeq	r7, r2, ip, asr r8
   2765c:	andeq	r7, r2, r8, ror #16
   27660:	vldr	d6, [pc, #912]	; 279f8 <grisu3_diy_fp_encode_double@@Base+0xf50>
   27664:	vdiv.f64	d7, d7, d6
   27668:	vstr	d7, [r6]
   2766c:	b	272ac <grisu3_diy_fp_encode_double@@Base+0x804>
   27670:	vldr	d6, [pc, #904]	; 27a00 <grisu3_diy_fp_encode_double@@Base+0xf58>
   27674:	vdiv.f64	d7, d7, d6
   27678:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2767c:	vldr	d6, [pc, #900]	; 27a08 <grisu3_diy_fp_encode_double@@Base+0xf60>
   27680:	vdiv.f64	d7, d7, d6
   27684:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27688:	vldr	d6, [pc, #896]	; 27a10 <grisu3_diy_fp_encode_double@@Base+0xf68>
   2768c:	vdiv.f64	d7, d7, d6
   27690:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27694:	vldr	d6, [pc, #892]	; 27a18 <grisu3_diy_fp_encode_double@@Base+0xf70>
   27698:	vdiv.f64	d7, d7, d6
   2769c:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   276a0:	vldr	d6, [pc, #888]	; 27a20 <grisu3_diy_fp_encode_double@@Base+0xf78>
   276a4:	vdiv.f64	d7, d7, d6
   276a8:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   276ac:	vldr	d6, [pc, #884]	; 27a28 <grisu3_diy_fp_encode_double@@Base+0xf80>
   276b0:	vdiv.f64	d7, d7, d6
   276b4:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   276b8:	vldr	d6, [pc, #880]	; 27a30 <grisu3_diy_fp_encode_double@@Base+0xf88>
   276bc:	vdiv.f64	d7, d7, d6
   276c0:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   276c4:	vldr	d6, [pc, #876]	; 27a38 <grisu3_diy_fp_encode_double@@Base+0xf90>
   276c8:	vdiv.f64	d7, d7, d6
   276cc:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   276d0:	vldr	d6, [pc, #872]	; 27a40 <grisu3_diy_fp_encode_double@@Base+0xf98>
   276d4:	vdiv.f64	d7, d7, d6
   276d8:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   276dc:	vldr	d6, [pc, #868]	; 27a48 <grisu3_diy_fp_encode_double@@Base+0xfa0>
   276e0:	vdiv.f64	d7, d7, d6
   276e4:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   276e8:	vldr	d6, [pc, #864]	; 27a50 <grisu3_diy_fp_encode_double@@Base+0xfa8>
   276ec:	vdiv.f64	d7, d7, d6
   276f0:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   276f4:	vldr	d6, [pc, #860]	; 27a58 <grisu3_diy_fp_encode_double@@Base+0xfb0>
   276f8:	vdiv.f64	d7, d7, d6
   276fc:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27700:	vldr	d6, [pc, #856]	; 27a60 <grisu3_diy_fp_encode_double@@Base+0xfb8>
   27704:	vdiv.f64	d7, d7, d6
   27708:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2770c:	vldr	d6, [pc, #852]	; 27a68 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   27710:	vdiv.f64	d7, d7, d6
   27714:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27718:	vldr	d6, [pc, #848]	; 27a70 <grisu3_diy_fp_encode_double@@Base+0xfc8>
   2771c:	vdiv.f64	d7, d7, d6
   27720:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27724:	vldr	d6, [pc, #844]	; 27a78 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   27728:	vdiv.f64	d7, d7, d6
   2772c:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27730:	vldr	d6, [pc, #840]	; 27a80 <grisu3_diy_fp_encode_double@@Base+0xfd8>
   27734:	vdiv.f64	d7, d7, d6
   27738:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2773c:	vldr	d6, [pc, #836]	; 27a88 <grisu3_diy_fp_encode_double@@Base+0xfe0>
   27740:	vdiv.f64	d7, d7, d6
   27744:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27748:	vldr	d6, [pc, #832]	; 27a90 <grisu3_diy_fp_encode_double@@Base+0xfe8>
   2774c:	vdiv.f64	d7, d7, d6
   27750:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27754:	vldr	d6, [pc, #828]	; 27a98 <grisu3_diy_fp_encode_double@@Base+0xff0>
   27758:	vdiv.f64	d7, d7, d6
   2775c:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27760:	vldr	d6, [pc, #824]	; 27aa0 <grisu3_diy_fp_encode_double@@Base+0xff8>
   27764:	vdiv.f64	d7, d7, d6
   27768:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2776c:	vldr	d6, [pc, #812]	; 27aa0 <grisu3_diy_fp_encode_double@@Base+0xff8>
   27770:	vmul.f64	d7, d7, d6
   27774:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27778:	vldr	d6, [pc, #792]	; 27a98 <grisu3_diy_fp_encode_double@@Base+0xff0>
   2777c:	vmul.f64	d7, d7, d6
   27780:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27784:	vldr	d6, [pc, #772]	; 27a90 <grisu3_diy_fp_encode_double@@Base+0xfe8>
   27788:	vmul.f64	d7, d7, d6
   2778c:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27790:	vldr	d6, [pc, #752]	; 27a88 <grisu3_diy_fp_encode_double@@Base+0xfe0>
   27794:	vmul.f64	d7, d7, d6
   27798:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2779c:	vldr	d6, [pc, #732]	; 27a80 <grisu3_diy_fp_encode_double@@Base+0xfd8>
   277a0:	vmul.f64	d7, d7, d6
   277a4:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   277a8:	vldr	d6, [pc, #712]	; 27a78 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   277ac:	vmul.f64	d7, d7, d6
   277b0:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   277b4:	vldr	d6, [pc, #692]	; 27a70 <grisu3_diy_fp_encode_double@@Base+0xfc8>
   277b8:	vmul.f64	d7, d7, d6
   277bc:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   277c0:	vldr	d6, [pc, #672]	; 27a68 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   277c4:	vmul.f64	d7, d7, d6
   277c8:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   277cc:	vldr	d6, [pc, #652]	; 27a60 <grisu3_diy_fp_encode_double@@Base+0xfb8>
   277d0:	vmul.f64	d7, d7, d6
   277d4:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   277d8:	vldr	d6, [pc, #632]	; 27a58 <grisu3_diy_fp_encode_double@@Base+0xfb0>
   277dc:	vmul.f64	d7, d7, d6
   277e0:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   277e4:	vldr	d6, [pc, #612]	; 27a50 <grisu3_diy_fp_encode_double@@Base+0xfa8>
   277e8:	vmul.f64	d7, d7, d6
   277ec:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   277f0:	vldr	d6, [pc, #592]	; 27a48 <grisu3_diy_fp_encode_double@@Base+0xfa0>
   277f4:	vmul.f64	d7, d7, d6
   277f8:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   277fc:	vldr	d6, [pc, #572]	; 27a40 <grisu3_diy_fp_encode_double@@Base+0xf98>
   27800:	vmul.f64	d7, d7, d6
   27804:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27808:	vldr	d6, [pc, #552]	; 27a38 <grisu3_diy_fp_encode_double@@Base+0xf90>
   2780c:	vmul.f64	d7, d7, d6
   27810:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27814:	vldr	d6, [pc, #532]	; 27a30 <grisu3_diy_fp_encode_double@@Base+0xf88>
   27818:	vmul.f64	d7, d7, d6
   2781c:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27820:	vldr	d6, [pc, #512]	; 27a28 <grisu3_diy_fp_encode_double@@Base+0xf80>
   27824:	vmul.f64	d7, d7, d6
   27828:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2782c:	vldr	d6, [pc, #492]	; 27a20 <grisu3_diy_fp_encode_double@@Base+0xf78>
   27830:	vmul.f64	d7, d7, d6
   27834:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27838:	vldr	d6, [pc, #472]	; 27a18 <grisu3_diy_fp_encode_double@@Base+0xf70>
   2783c:	vmul.f64	d7, d7, d6
   27840:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27844:	vldr	d6, [pc, #452]	; 27a10 <grisu3_diy_fp_encode_double@@Base+0xf68>
   27848:	vmul.f64	d7, d7, d6
   2784c:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27850:	vldr	d6, [pc, #432]	; 27a08 <grisu3_diy_fp_encode_double@@Base+0xf60>
   27854:	vmul.f64	d7, d7, d6
   27858:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2785c:	vldr	d6, [pc, #412]	; 27a00 <grisu3_diy_fp_encode_double@@Base+0xf58>
   27860:	vmul.f64	d7, d7, d6
   27864:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27868:	vldr	d6, [pc, #392]	; 279f8 <grisu3_diy_fp_encode_double@@Base+0xf50>
   2786c:	vmul.f64	d7, d7, d6
   27870:	b	27668 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   27874:	str	r6, [sp, #4]
   27878:	ldr	r3, [sp, #24]
   2787c:	str	r3, [sp]
   27880:	mov	r3, r8
   27884:	mov	r2, r5
   27888:	mov	r0, sl
   2788c:	mov	r1, fp
   27890:	bl	26aa8 <grisu3_diy_fp_encode_double@@Base>
   27894:	cmp	r0, #0
   27898:	bne	272ac <grisu3_diy_fp_encode_double@@Base+0x804>
   2789c:	add	r1, sp, #36	; 0x24
   278a0:	mov	r0, r7
   278a4:	bl	12660 <strtod@plt>
   278a8:	vstr	d0, [r6]
   278ac:	ldr	r3, [sp, #36]	; 0x24
   278b0:	cmp	r4, r3
   278b4:	movcs	r4, r3
   278b8:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   278bc:	ldr	r4, [sp, #12]
   278c0:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   278c4:	mov	r4, #0
   278c8:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   278cc:	ldr	r4, [sp, #12]
   278d0:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   278d4:	mov	r4, #0
   278d8:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   278dc:	mov	r4, #0
   278e0:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   278e4:	mov	r4, #0
   278e8:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   278ec:	mov	r4, #0
   278f0:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   278f4:	mov	r4, #0
   278f8:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   278fc:	mov	r4, #0
   27900:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   27904:	mov	r4, #0
   27908:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   2790c:	mov	r4, #0
   27910:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   27914:	mov	r4, #0
   27918:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   2791c:	mov	r4, #0
   27920:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   27924:	mov	r4, #0
   27928:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   2792c:	mov	r4, #0
   27930:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   27934:	mov	r4, #0
   27938:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   2793c:	mov	r5, r9
   27940:	mov	r4, r9
   27944:	mov	sl, #0
   27948:	mov	fp, #0
   2794c:	sub	r8, r4, r5
   27950:	cmp	r9, r4
   27954:	moveq	r4, #0
   27958:	beq	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   2795c:	mov	r3, #0
   27960:	str	r3, [sp, #24]
   27964:	b	271c0 <grisu3_diy_fp_encode_double@@Base+0x718>
   27968:	mov	r4, r5
   2796c:	sub	r8, r4, r5
   27970:	mov	r1, r4
   27974:	mov	r3, #0
   27978:	str	r3, [sp, #24]
   2797c:	b	2718c <grisu3_diy_fp_encode_double@@Base+0x6e4>
   27980:	mov	r4, r1
   27984:	mov	r3, #0
   27988:	b	271c0 <grisu3_diy_fp_encode_double@@Base+0x718>
   2798c:	mov	r3, r0
   27990:	mov	r4, r1
   27994:	mov	r2, #1
   27998:	str	r2, [sp, #24]
   2799c:	b	27234 <grisu3_diy_fp_encode_double@@Base+0x78c>
   279a0:	ldr	r2, [sp, #28]
   279a4:	sub	ip, ip, r2
   279a8:	add	r8, r8, ip
   279ac:	cmp	r9, r4
   279b0:	moveq	r4, #0
   279b4:	bne	273ec <grisu3_diy_fp_encode_double@@Base+0x944>
   279b8:	b	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   279bc:	mov	r4, r1
   279c0:	mov	r2, #1
   279c4:	str	r2, [sp, #24]
   279c8:	b	27240 <grisu3_diy_fp_encode_double@@Base+0x798>
   279cc:	cmp	r6, #0
   279d0:	moveq	r4, #0
   279d4:	beq	2701c <grisu3_diy_fp_encode_double@@Base+0x574>
   279d8:	rsb	r2, r2, #0
   279dc:	b	27258 <grisu3_diy_fp_encode_double@@Base+0x7b0>
   279e0:	ldr	r2, [sp, #24]
   279e4:	cmp	r2, #0
   279e8:	beq	27458 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   279ec:	ldr	r4, [sp, #28]
   279f0:	b	273b4 <grisu3_diy_fp_encode_double@@Base+0x90c>
   279f4:	nop			; (mov r0, r0)
   279f8:			; <UNDEFINED> instruction: 0x064dd592
   279fc:	strmi	pc, [r0], #207	; 0xcf
   27a00:	usatle	lr, #2, r0, asr #30
   27a04:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   27a08:	ldmvc	r5!, {r6, sl, fp, pc}
   27a0c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   27a10:	addsvs	r3, r1, r0, lsl #26
   27a14:	mvnmi	r5, #228, 16	; 0xe40000
   27a18:	strbvs	ip, [lr, -r0, lsl #16]
   27a1c:			; <UNDEFINED> instruction: 0x43abc16d
   27a20:	ldrbhi	sl, [r8]
   27a24:	cmnmi	r6, #1459617792	; 0x57000000
   27a28:	strbcc	r8, [r0, r0]!
   27a2c:	movtmi	ip, #4985	; 0x1379
   27a30:	ldrtcs	r0, [r4], -r0
   27a34:	movwmi	r6, #52213	; 0xcbf5
   27a38:	cdpne	0, 9, cr0, cr0, cr0, {0}
   27a3c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   27a40:	strb	r0, [r0, #-0]
   27a44:	adcmi	r3, r2, #156	; 0x9c
   27a48:	andge	r0, r0, #0
   27a4c:	rsbmi	r1, sp, #148, 20	; 0x94000
   27a50:	stmda	r0, {}	; <UNPREDICTABLE>
   27a54:	eorsmi	r4, r7, #7733248	; 0x760000
   27a58:	andcs	r0, r0, r0
   27a5c:	andmi	sl, r2, #95	; 0x5f
   27a60:	andeq	r0, r0, r0
   27a64:	bicmi	ip, sp, r5, ror #26
   27a68:	andeq	r0, r0, r0
   27a6c:	orrsmi	sp, r7, r4, lsl #15
   27a70:	andeq	r0, r0, r0
   27a74:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   27a78:	andeq	r0, r0, r0
   27a7c:	smlawbmi	lr, r0, r4, r8
   27a80:	andeq	r0, r0, r0
   27a84:	rscsmi	r6, r8, r0, lsl #20
   27a88:	andeq	r0, r0, r0
   27a8c:	sbcmi	r8, r3, r0, lsl #16
   27a90:	andeq	r0, r0, r0
   27a94:	addmi	r4, pc, r0
   27a98:	andeq	r0, r0, r0
   27a9c:	subsmi	r0, r9, r0
   27aa0:	andeq	r0, r0, r0
   27aa4:	eormi	r0, r4, r0

00027aa8 <flatcc_json_parser_error_string@@Base>:
   27aa8:	cmp	r0, #34	; 0x22
   27aac:	ldrls	pc, [pc, r0, lsl #2]
   27ab0:	b	27c50 <flatcc_json_parser_error_string@@Base+0x1a8>
   27ab4:	andeq	r7, r2, r8, asr ip
   27ab8:	andeq	r7, r2, r0, asr #22
   27abc:	andeq	r7, r2, r8, asr #22
   27ac0:	andeq	r7, r2, r0, asr fp
   27ac4:	andeq	r7, r2, r8, asr fp
   27ac8:	andeq	r7, r2, r0, ror #22
   27acc:	andeq	r7, r2, r8, ror #22
   27ad0:	andeq	r7, r2, r0, ror fp
   27ad4:	andeq	r7, r2, r8, ror fp
   27ad8:	andeq	r7, r2, r0, lsl #23
   27adc:	andeq	r7, r2, r8, lsl #23
   27ae0:	muleq	r2, r0, fp
   27ae4:	muleq	r2, r8, fp
   27ae8:	andeq	r7, r2, r0, lsr #23
   27aec:	andeq	r7, r2, r8, lsr #23
   27af0:			; <UNDEFINED> instruction: 0x00027bb0
   27af4:			; <UNDEFINED> instruction: 0x00027bb8
   27af8:	andeq	r7, r2, r0, asr #23
   27afc:	andeq	r7, r2, r8, asr #23
   27b00:	ldrdeq	r7, [r2], -r0
   27b04:	ldrdeq	r7, [r2], -r8
   27b08:	andeq	r7, r2, r0, ror #23
   27b0c:	andeq	r7, r2, r8, ror #23
   27b10:	strdeq	r7, [r2], -r0
   27b14:	strdeq	r7, [r2], -r8
   27b18:	andeq	r7, r2, r0, lsl #24
   27b1c:	andeq	r7, r2, r8, lsl #24
   27b20:	andeq	r7, r2, r0, lsl ip
   27b24:	andeq	r7, r2, r8, lsl ip
   27b28:	andeq	r7, r2, r0, lsr #24
   27b2c:	andeq	r7, r2, r8, lsr #24
   27b30:	andeq	r7, r2, r0, lsr ip
   27b34:	andeq	r7, r2, r8, lsr ip
   27b38:	andeq	r7, r2, r0, asr #24
   27b3c:	andeq	r7, r2, r8, asr #24
   27b40:	ldr	r0, [pc, #280]	; 27c60 <flatcc_json_parser_error_string@@Base+0x1b8>
   27b44:	bx	lr
   27b48:	ldr	r0, [pc, #276]	; 27c64 <flatcc_json_parser_error_string@@Base+0x1bc>
   27b4c:	bx	lr
   27b50:	ldr	r0, [pc, #272]	; 27c68 <flatcc_json_parser_error_string@@Base+0x1c0>
   27b54:	bx	lr
   27b58:	ldr	r0, [pc, #268]	; 27c6c <flatcc_json_parser_error_string@@Base+0x1c4>
   27b5c:	bx	lr
   27b60:	ldr	r0, [pc, #264]	; 27c70 <flatcc_json_parser_error_string@@Base+0x1c8>
   27b64:	bx	lr
   27b68:	ldr	r0, [pc, #260]	; 27c74 <flatcc_json_parser_error_string@@Base+0x1cc>
   27b6c:	bx	lr
   27b70:	ldr	r0, [pc, #256]	; 27c78 <flatcc_json_parser_error_string@@Base+0x1d0>
   27b74:	bx	lr
   27b78:	ldr	r0, [pc, #252]	; 27c7c <flatcc_json_parser_error_string@@Base+0x1d4>
   27b7c:	bx	lr
   27b80:	ldr	r0, [pc, #248]	; 27c80 <flatcc_json_parser_error_string@@Base+0x1d8>
   27b84:	bx	lr
   27b88:	ldr	r0, [pc, #244]	; 27c84 <flatcc_json_parser_error_string@@Base+0x1dc>
   27b8c:	bx	lr
   27b90:	ldr	r0, [pc, #240]	; 27c88 <flatcc_json_parser_error_string@@Base+0x1e0>
   27b94:	bx	lr
   27b98:	ldr	r0, [pc, #236]	; 27c8c <flatcc_json_parser_error_string@@Base+0x1e4>
   27b9c:	bx	lr
   27ba0:	ldr	r0, [pc, #232]	; 27c90 <flatcc_json_parser_error_string@@Base+0x1e8>
   27ba4:	bx	lr
   27ba8:	ldr	r0, [pc, #228]	; 27c94 <flatcc_json_parser_error_string@@Base+0x1ec>
   27bac:	bx	lr
   27bb0:	ldr	r0, [pc, #224]	; 27c98 <flatcc_json_parser_error_string@@Base+0x1f0>
   27bb4:	bx	lr
   27bb8:	ldr	r0, [pc, #220]	; 27c9c <flatcc_json_parser_error_string@@Base+0x1f4>
   27bbc:	bx	lr
   27bc0:	ldr	r0, [pc, #216]	; 27ca0 <flatcc_json_parser_error_string@@Base+0x1f8>
   27bc4:	bx	lr
   27bc8:	ldr	r0, [pc, #212]	; 27ca4 <flatcc_json_parser_error_string@@Base+0x1fc>
   27bcc:	bx	lr
   27bd0:	ldr	r0, [pc, #208]	; 27ca8 <flatcc_json_parser_error_string@@Base+0x200>
   27bd4:	bx	lr
   27bd8:	ldr	r0, [pc, #204]	; 27cac <flatcc_json_parser_error_string@@Base+0x204>
   27bdc:	bx	lr
   27be0:	ldr	r0, [pc, #200]	; 27cb0 <flatcc_json_parser_error_string@@Base+0x208>
   27be4:	bx	lr
   27be8:	ldr	r0, [pc, #196]	; 27cb4 <flatcc_json_parser_error_string@@Base+0x20c>
   27bec:	bx	lr
   27bf0:	ldr	r0, [pc, #192]	; 27cb8 <flatcc_json_parser_error_string@@Base+0x210>
   27bf4:	bx	lr
   27bf8:	ldr	r0, [pc, #188]	; 27cbc <flatcc_json_parser_error_string@@Base+0x214>
   27bfc:	bx	lr
   27c00:	ldr	r0, [pc, #184]	; 27cc0 <flatcc_json_parser_error_string@@Base+0x218>
   27c04:	bx	lr
   27c08:	ldr	r0, [pc, #180]	; 27cc4 <flatcc_json_parser_error_string@@Base+0x21c>
   27c0c:	bx	lr
   27c10:	ldr	r0, [pc, #176]	; 27cc8 <flatcc_json_parser_error_string@@Base+0x220>
   27c14:	bx	lr
   27c18:	ldr	r0, [pc, #172]	; 27ccc <flatcc_json_parser_error_string@@Base+0x224>
   27c1c:	bx	lr
   27c20:	ldr	r0, [pc, #168]	; 27cd0 <flatcc_json_parser_error_string@@Base+0x228>
   27c24:	bx	lr
   27c28:	ldr	r0, [pc, #164]	; 27cd4 <flatcc_json_parser_error_string@@Base+0x22c>
   27c2c:	bx	lr
   27c30:	ldr	r0, [pc, #160]	; 27cd8 <flatcc_json_parser_error_string@@Base+0x230>
   27c34:	bx	lr
   27c38:	ldr	r0, [pc, #156]	; 27cdc <flatcc_json_parser_error_string@@Base+0x234>
   27c3c:	bx	lr
   27c40:	ldr	r0, [pc, #152]	; 27ce0 <flatcc_json_parser_error_string@@Base+0x238>
   27c44:	bx	lr
   27c48:	ldr	r0, [pc, #148]	; 27ce4 <flatcc_json_parser_error_string@@Base+0x23c>
   27c4c:	bx	lr
   27c50:	ldr	r0, [pc, #144]	; 27ce8 <flatcc_json_parser_error_string@@Base+0x240>
   27c54:	bx	lr
   27c58:	ldr	r0, [pc, #140]	; 27cec <flatcc_json_parser_error_string@@Base+0x244>
   27c5c:	bx	lr
   27c60:	andeq	ip, r2, ip, lsr #28
   27c64:	andeq	ip, r2, r0, lsr lr
   27c68:	andeq	ip, r2, r0, asr #28
   27c6c:	andeq	ip, r2, r0, asr lr
   27c70:	andeq	ip, r2, r0, ror #28
   27c74:	andeq	ip, r2, r8, ror lr
   27c78:	andeq	ip, r2, r8, lsl #29
   27c7c:	muleq	r2, r4, lr
   27c80:	andeq	ip, r2, r0, lsr #29
   27c84:			; <UNDEFINED> instruction: 0x0002ceb4
   27c88:	andeq	ip, r2, r8, asr #29
   27c8c:	ldrdeq	ip, [r2], -r8
   27c90:	andeq	ip, r2, ip, ror #29
   27c94:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   27c98:	andeq	ip, r2, r8, lsl pc
   27c9c:	andeq	ip, r2, ip, lsr #30
   27ca0:	andeq	ip, r2, ip, lsr pc
   27ca4:	andeq	ip, r2, r0, asr pc
   27ca8:	andeq	ip, r2, r0, ror #30
   27cac:	andeq	ip, r2, r0, ror pc
   27cb0:	andeq	ip, r2, r4, lsl #31
   27cb4:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   27cb8:	andeq	ip, r2, r4, lsr #31
   27cbc:	andeq	ip, r2, r8, asr #31
   27cc0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   27cc4:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   27cc8:	andeq	sp, r2, ip, lsl r0
   27ccc:	andeq	sp, r2, r8, lsr r0
   27cd0:	andeq	sp, r2, r4, asr r0
   27cd4:	andeq	sp, r2, ip, rrx
   27cd8:	andeq	sp, r2, ip, lsl #1
   27cdc:	andeq	sp, r2, r4, lsr #1
   27ce0:	andeq	sp, r2, r0, asr #1
   27ce4:	ldrdeq	sp, [r2], -r0
   27ce8:	andeq	sp, r2, r0, ror #1
   27cec:	andeq	ip, r2, r8, lsr #28

00027cf0 <flatcc_json_parser_set_error@@Base>:
   27cf0:	ldr	ip, [r0, #24]
   27cf4:	cmp	ip, #0
   27cf8:	bne	27d14 <flatcc_json_parser_set_error@@Base+0x24>
   27cfc:	str	r3, [r0, #24]
   27d00:	ldr	r3, [r0, #4]
   27d04:	sub	r3, r1, r3
   27d08:	add	r3, r3, #1
   27d0c:	str	r3, [r0, #20]
   27d10:	str	r1, [r0, #36]	; 0x24
   27d14:	mov	r0, r2
   27d18:	bx	lr

00027d1c <flatcc_json_parser_string_part@@Base>:
   27d1c:	push	{r4, lr}
   27d20:	cmp	r1, r2
   27d24:	beq	27db0 <flatcc_json_parser_string_part@@Base+0x94>
   27d28:	ldrb	ip, [r1]
   27d2c:	cmp	ip, #34	; 0x22
   27d30:	cmpne	ip, #31
   27d34:	movhi	r3, #1
   27d38:	movls	r3, #0
   27d3c:	cmp	ip, #92	; 0x5c
   27d40:	moveq	r3, #0
   27d44:	andne	r3, r3, #1
   27d48:	cmp	r3, #0
   27d4c:	beq	27d8c <flatcc_json_parser_string_part@@Base+0x70>
   27d50:	add	r3, r1, #1
   27d54:	mov	r4, r2
   27d58:	mov	r1, r3
   27d5c:	cmp	r3, r4
   27d60:	beq	27db4 <flatcc_json_parser_string_part@@Base+0x98>
   27d64:	ldrb	lr, [r3], #1
   27d68:	cmp	lr, #34	; 0x22
   27d6c:	cmpne	lr, #31
   27d70:	movhi	ip, #1
   27d74:	movls	ip, #0
   27d78:	cmp	lr, #92	; 0x5c
   27d7c:	moveq	ip, #0
   27d80:	andne	ip, ip, #1
   27d84:	cmp	ip, #0
   27d88:	bne	27d58 <flatcc_json_parser_string_part@@Base+0x3c>
   27d8c:	ldrb	r3, [r1]
   27d90:	cmp	r3, #31
   27d94:	bls	27da0 <flatcc_json_parser_string_part@@Base+0x84>
   27d98:	mov	r0, r1
   27d9c:	pop	{r4, pc}
   27da0:	mov	r3, #17
   27da4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   27da8:	mov	r1, r0
   27dac:	b	27d98 <flatcc_json_parser_string_part@@Base+0x7c>
   27db0:	mov	r1, r2
   27db4:	mov	r3, #20
   27db8:	mov	r2, r1
   27dbc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   27dc0:	mov	r1, r0
   27dc4:	b	27d98 <flatcc_json_parser_string_part@@Base+0x7c>

00027dc8 <flatcc_json_parser_space_ext@@Base>:
   27dc8:	push	{r4, lr}
   27dcc:	mov	r4, #0
   27dd0:	cmp	r1, r2
   27dd4:	beq	27efc <flatcc_json_parser_space_ext@@Base+0x134>
   27dd8:	ldrb	r3, [r1]
   27ddc:	cmp	r3, #32
   27de0:	bne	27e08 <flatcc_json_parser_space_ext@@Base+0x40>
   27de4:	add	r3, r1, #1
   27de8:	mov	lr, r2
   27dec:	mov	r1, r3
   27df0:	cmp	r3, lr
   27df4:	beq	27f00 <flatcc_json_parser_space_ext@@Base+0x138>
   27df8:	add	r3, r3, #1
   27dfc:	ldrb	ip, [r1]
   27e00:	cmp	ip, #32
   27e04:	beq	27dec <flatcc_json_parser_space_ext@@Base+0x24>
   27e08:	ldrb	r3, [r1]
   27e0c:	cmp	r3, #32
   27e10:	bls	27e68 <flatcc_json_parser_space_ext@@Base+0xa0>
   27e14:	mov	r0, r1
   27e18:	pop	{r4, pc}
   27e1c:	sub	r3, r2, r1
   27e20:	cmp	r3, #1
   27e24:	movle	r3, r4
   27e28:	ble	27e3c <flatcc_json_parser_space_ext@@Base+0x74>
   27e2c:	ldrb	r3, [r1, #1]
   27e30:	cmp	r3, #10
   27e34:	movne	r3, #0
   27e38:	moveq	r3, #1
   27e3c:	add	r1, r1, r3
   27e40:	ldr	r3, [r0, #16]
   27e44:	add	r3, r3, #1
   27e48:	str	r3, [r0, #16]
   27e4c:	add	r1, r1, #1
   27e50:	str	r1, [r0, #4]
   27e54:	cmp	r2, r1
   27e58:	beq	27ef4 <flatcc_json_parser_space_ext@@Base+0x12c>
   27e5c:	ldrb	r3, [r1]
   27e60:	cmp	r3, #32
   27e64:	bhi	27eec <flatcc_json_parser_space_ext@@Base+0x124>
   27e68:	sub	r3, r3, #9
   27e6c:	cmp	r3, #23
   27e70:	ldrls	pc, [pc, r3, lsl #2]
   27e74:	b	27ee0 <flatcc_json_parser_space_ext@@Base+0x118>
   27e78:	ldrdeq	r7, [r2], -r8
   27e7c:	andeq	r7, r2, r0, asr #28
   27e80:	andeq	r7, r2, r0, ror #29
   27e84:	andeq	r7, r2, r0, ror #29
   27e88:	andeq	r7, r2, ip, lsl lr
   27e8c:	andeq	r7, r2, r0, ror #29
   27e90:	andeq	r7, r2, r0, ror #29
   27e94:	andeq	r7, r2, r0, ror #29
   27e98:	andeq	r7, r2, r0, ror #29
   27e9c:	andeq	r7, r2, r0, ror #29
   27ea0:	andeq	r7, r2, r0, ror #29
   27ea4:	andeq	r7, r2, r0, ror #29
   27ea8:	andeq	r7, r2, r0, ror #29
   27eac:	andeq	r7, r2, r0, ror #29
   27eb0:	andeq	r7, r2, r0, ror #29
   27eb4:	andeq	r7, r2, r0, ror #29
   27eb8:	andeq	r7, r2, r0, ror #29
   27ebc:	andeq	r7, r2, r0, ror #29
   27ec0:	andeq	r7, r2, r0, ror #29
   27ec4:	andeq	r7, r2, r0, ror #29
   27ec8:	andeq	r7, r2, r0, ror #29
   27ecc:	andeq	r7, r2, r0, ror #29
   27ed0:	andeq	r7, r2, r0, ror #29
   27ed4:	ldrdeq	r7, [r2], -r0
   27ed8:	add	r1, r1, #1
   27edc:	b	27e54 <flatcc_json_parser_space_ext@@Base+0x8c>
   27ee0:	mov	r3, #5
   27ee4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   27ee8:	pop	{r4, pc}
   27eec:	mov	r0, r1
   27ef0:	pop	{r4, pc}
   27ef4:	mov	r0, r2
   27ef8:	pop	{r4, pc}
   27efc:	mov	r1, r2
   27f00:	mov	r0, r1
   27f04:	pop	{r4, pc}
   27f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27f0c:	sub	sp, sp, #36	; 0x24
   27f10:	mov	r8, r0
   27f14:	mov	r6, r1
   27f18:	mov	r7, r2
   27f1c:	str	r3, [sp, #8]
   27f20:	mov	r3, #0
   27f24:	ldr	r2, [sp, #72]	; 0x48
   27f28:	strb	r3, [r2]
   27f2c:	cmp	r1, r7
   27f30:	beq	280c8 <flatcc_json_parser_space_ext@@Base+0x300>
   27f34:	ldrb	r3, [r1]
   27f38:	cmp	r3, #34	; 0x22
   27f3c:	addeq	r6, r1, #1
   27f40:	moveq	r3, #0
   27f44:	streq	r3, [r0, #12]
   27f48:	beq	280d4 <flatcc_json_parser_space_ext@@Base+0x30c>
   27f4c:	cmp	r3, #46	; 0x2e
   27f50:	movne	r3, #1
   27f54:	strne	r3, [r0, #12]
   27f58:	beq	27f70 <flatcc_json_parser_space_ext@@Base+0x1a8>
   27f5c:	mov	fp, #0
   27f60:	str	fp, [sp, #12]
   27f64:	add	sl, sp, #16
   27f68:	add	r9, sp, #24
   27f6c:	b	28010 <flatcc_json_parser_space_ext@@Base+0x248>
   27f70:	mov	r3, #5
   27f74:	mov	r2, r7
   27f78:	mov	r1, r6
   27f7c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   27f80:	mov	r6, r0
   27f84:	ldr	r3, [r8, #12]
   27f88:	cmp	r3, #0
   27f8c:	beq	280d4 <flatcc_json_parser_space_ext@@Base+0x30c>
   27f90:	b	28104 <flatcc_json_parser_space_ext@@Base+0x33c>
   27f94:	ldrb	r3, [r6, #1]
   27f98:	cmp	r3, #32
   27f9c:	addhi	r6, r6, #1
   27fa0:	bls	280f0 <flatcc_json_parser_space_ext@@Base+0x328>
   27fa4:	b	28104 <flatcc_json_parser_space_ext@@Base+0x33c>
   27fa8:	mov	r4, r0
   27fac:	cmp	fp, #0
   27fb0:	beq	27fc0 <flatcc_json_parser_space_ext@@Base+0x1f8>
   27fb4:	ldr	r3, [r8, #12]
   27fb8:	cmp	r3, #0
   27fbc:	bne	2806c <flatcc_json_parser_space_ext@@Base+0x2a4>
   27fc0:	ldr	r3, [sp, #20]
   27fc4:	cmp	r3, #0
   27fc8:	bne	28088 <flatcc_json_parser_space_ext@@Base+0x2c0>
   27fcc:	ldrd	r2, [sp, #24]
   27fd0:	cmp	r3, #0
   27fd4:	cmpeq	r2, #255	; 0xff
   27fd8:	uxtbls	r3, r2
   27fdc:	strls	r3, [sp, #12]
   27fe0:	bhi	280a8 <flatcc_json_parser_space_ext@@Base+0x2e0>
   27fe4:	ldr	r3, [sp, #72]	; 0x48
   27fe8:	ldrb	r3, [r3]
   27fec:	ldr	r2, [sp, #12]
   27ff0:	add	r3, r2, r3
   27ff4:	ldr	r2, [sp, #72]	; 0x48
   27ff8:	strb	r3, [r2]
   27ffc:	add	fp, fp, #1
   28000:	ldr	r3, [sp, #16]
   28004:	cmp	r3, #0
   28008:	beq	280c0 <flatcc_json_parser_space_ext@@Base+0x2f8>
   2800c:	mov	r6, r4
   28010:	ldr	r5, [sp, #8]
   28014:	str	sl, [sp, #4]
   28018:	str	r9, [sp]
   2801c:	ldr	r4, [r5]
   28020:	add	r3, sp, #20
   28024:	mov	r2, r7
   28028:	mov	r1, r6
   2802c:	mov	r0, r8
   28030:	blx	r4
   28034:	cmp	r7, r0
   28038:	beq	28110 <flatcc_json_parser_space_ext@@Base+0x348>
   2803c:	cmp	r6, r0
   28040:	bne	27fa8 <flatcc_json_parser_space_ext@@Base+0x1e0>
   28044:	ldr	r3, [r5, #4]!
   28048:	cmp	r3, #0
   2804c:	bne	28014 <flatcc_json_parser_space_ext@@Base+0x24c>
   28050:	mov	r3, #23
   28054:	mov	r2, r7
   28058:	mov	r1, r6
   2805c:	mov	r0, r8
   28060:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28064:	mov	r7, r0
   28068:	b	28110 <flatcc_json_parser_space_ext@@Base+0x348>
   2806c:	mov	r3, #14
   28070:	mov	r2, r7
   28074:	mov	r1, r0
   28078:	mov	r0, r8
   2807c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28080:	mov	r7, r0
   28084:	b	28110 <flatcc_json_parser_space_ext@@Base+0x348>
   28088:	mov	r3, #8
   2808c:	mov	r2, r7
   28090:	mov	r1, r4
   28094:	mov	r0, r8
   28098:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2809c:	cmp	r7, r0
   280a0:	bne	27fe4 <flatcc_json_parser_space_ext@@Base+0x21c>
   280a4:	b	28110 <flatcc_json_parser_space_ext@@Base+0x348>
   280a8:	mov	r3, #7
   280ac:	mov	r2, r7
   280b0:	mov	r1, r4
   280b4:	mov	r0, r8
   280b8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   280bc:	b	2809c <flatcc_json_parser_space_ext@@Base+0x2d4>
   280c0:	mov	r7, r4
   280c4:	b	28110 <flatcc_json_parser_space_ext@@Base+0x348>
   280c8:	ldr	r3, [r0, #12]
   280cc:	cmp	r3, #0
   280d0:	bne	2811c <flatcc_json_parser_space_ext@@Base+0x354>
   280d4:	sub	r3, r7, r6
   280d8:	cmp	r3, #1
   280dc:	ble	280f0 <flatcc_json_parser_space_ext@@Base+0x328>
   280e0:	ldrb	r3, [r6]
   280e4:	cmp	r3, #32
   280e8:	bhi	28104 <flatcc_json_parser_space_ext@@Base+0x33c>
   280ec:	beq	27f94 <flatcc_json_parser_space_ext@@Base+0x1cc>
   280f0:	mov	r2, r7
   280f4:	mov	r1, r6
   280f8:	mov	r0, r8
   280fc:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   28100:	mov	r6, r0
   28104:	cmp	r7, r6
   28108:	moveq	r7, r6
   2810c:	bne	27f5c <flatcc_json_parser_space_ext@@Base+0x194>
   28110:	mov	r0, r7
   28114:	add	sp, sp, #36	; 0x24
   28118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2811c:	mov	r7, r1
   28120:	b	28110 <flatcc_json_parser_space_ext@@Base+0x348>
   28124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28128:	sub	sp, sp, #28
   2812c:	mov	r7, r0
   28130:	mov	r4, r1
   28134:	mov	r6, r2
   28138:	str	r3, [sp, #12]
   2813c:	ldr	r9, [sp, #64]	; 0x40
   28140:	ldr	r8, [sp, #72]	; 0x48
   28144:	mov	r3, #0
   28148:	str	r3, [sp, #20]
   2814c:	ldr	r0, [r0]
   28150:	bl	23f20 <flatcc_builder_start_offset_vector@@Base>
   28154:	cmp	r0, #0
   28158:	bne	284c8 <flatcc_json_parser_space_ext@@Base+0x700>
   2815c:	cmp	r4, r6
   28160:	beq	28170 <flatcc_json_parser_space_ext@@Base+0x3a8>
   28164:	ldrb	r3, [r4]
   28168:	cmp	r3, #91	; 0x5b
   2816c:	beq	28190 <flatcc_json_parser_space_ext@@Base+0x3c8>
   28170:	mov	r3, #22
   28174:	mov	r2, r6
   28178:	mov	r1, r4
   2817c:	mov	r0, r7
   28180:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28184:	mov	sl, r0
   28188:	mov	r5, #0
   2818c:	b	283f4 <flatcc_json_parser_space_ext@@Base+0x62c>
   28190:	add	r3, r4, #1
   28194:	str	r3, [sp, #8]
   28198:	mov	sl, r6
   2819c:	sub	r3, r6, r3
   281a0:	cmp	r3, #1
   281a4:	ble	281b8 <flatcc_json_parser_space_ext@@Base+0x3f0>
   281a8:	ldrb	r3, [r4, #1]
   281ac:	cmp	r3, #32
   281b0:	bhi	281cc <flatcc_json_parser_space_ext@@Base+0x404>
   281b4:	beq	281f8 <flatcc_json_parser_space_ext@@Base+0x430>
   281b8:	mov	r2, r6
   281bc:	ldr	r1, [sp, #8]
   281c0:	mov	r0, r7
   281c4:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   281c8:	str	r0, [sp, #8]
   281cc:	ldr	r3, [sp, #8]
   281d0:	cmp	r6, r3
   281d4:	beq	281e4 <flatcc_json_parser_space_ext@@Base+0x41c>
   281d8:	ldrb	r3, [r3]
   281dc:	cmp	r3, #93	; 0x5d
   281e0:	beq	28210 <flatcc_json_parser_space_ext@@Base+0x448>
   281e4:	cmp	r9, #0
   281e8:	beq	28264 <flatcc_json_parser_space_ext@@Base+0x49c>
   281ec:	mov	r5, #0
   281f0:	add	fp, sp, #20
   281f4:	b	28340 <flatcc_json_parser_space_ext@@Base+0x578>
   281f8:	ldrb	r3, [r4, #2]
   281fc:	cmp	r3, #32
   28200:	addhi	r3, r4, #2
   28204:	strhi	r3, [sp, #8]
   28208:	bls	281b8 <flatcc_json_parser_space_ext@@Base+0x3f0>
   2820c:	b	281cc <flatcc_json_parser_space_ext@@Base+0x404>
   28210:	ldr	r2, [sp, #8]
   28214:	add	sl, r2, #1
   28218:	sub	r3, r6, sl
   2821c:	cmp	r3, #1
   28220:	ble	28234 <flatcc_json_parser_space_ext@@Base+0x46c>
   28224:	ldrb	r3, [r2, #1]
   28228:	cmp	r3, #32
   2822c:	bhi	28188 <flatcc_json_parser_space_ext@@Base+0x3c0>
   28230:	beq	2824c <flatcc_json_parser_space_ext@@Base+0x484>
   28234:	mov	r2, r6
   28238:	mov	r1, sl
   2823c:	mov	r0, r7
   28240:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   28244:	mov	sl, r0
   28248:	b	28188 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2824c:	ldrb	r3, [r2, #2]
   28250:	cmp	r3, #32
   28254:	movhi	r3, r2
   28258:	addhi	sl, r3, #2
   2825c:	bls	28234 <flatcc_json_parser_space_ext@@Base+0x46c>
   28260:	b	28188 <flatcc_json_parser_space_ext@@Base+0x3c0>
   28264:	mov	r3, #30
   28268:	mov	r2, r6
   2826c:	ldr	r1, [sp, #8]
   28270:	mov	r0, r7
   28274:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28278:	mov	sl, r0
   2827c:	b	284e0 <flatcc_json_parser_space_ext@@Base+0x718>
   28280:	ldrb	r3, [r4, #1]
   28284:	cmp	r3, #32
   28288:	addhi	r4, r4, #1
   2828c:	bls	283a8 <flatcc_json_parser_space_ext@@Base+0x5e0>
   28290:	b	283bc <flatcc_json_parser_space_ext@@Base+0x5f4>
   28294:	add	sl, r4, #1
   28298:	sub	r3, r6, sl
   2829c:	cmp	r3, #1
   282a0:	ble	282b4 <flatcc_json_parser_space_ext@@Base+0x4ec>
   282a4:	ldrb	r3, [r4, #1]
   282a8:	cmp	r3, #32
   282ac:	bhi	283f0 <flatcc_json_parser_space_ext@@Base+0x628>
   282b0:	beq	282cc <flatcc_json_parser_space_ext@@Base+0x504>
   282b4:	mov	r2, r6
   282b8:	mov	r1, sl
   282bc:	mov	r0, r7
   282c0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   282c4:	mov	sl, r0
   282c8:	b	283f0 <flatcc_json_parser_space_ext@@Base+0x628>
   282cc:	ldrb	r3, [r4, #2]
   282d0:	cmp	r3, #32
   282d4:	addhi	sl, r4, #2
   282d8:	bls	282b4 <flatcc_json_parser_space_ext@@Base+0x4ec>
   282dc:	b	283f0 <flatcc_json_parser_space_ext@@Base+0x628>
   282e0:	add	r3, r4, #1
   282e4:	str	r3, [sp, #8]
   282e8:	sub	r3, sl, r3
   282ec:	cmp	r3, #1
   282f0:	ble	28304 <flatcc_json_parser_space_ext@@Base+0x53c>
   282f4:	ldrb	r3, [r4, #1]
   282f8:	cmp	r3, #32
   282fc:	bhi	28318 <flatcc_json_parser_space_ext@@Base+0x550>
   28300:	beq	28418 <flatcc_json_parser_space_ext@@Base+0x650>
   28304:	mov	r2, r6
   28308:	ldr	r1, [sp, #8]
   2830c:	mov	r0, r7
   28310:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   28314:	str	r0, [sp, #8]
   28318:	ldr	r3, [sp, #8]
   2831c:	cmp	r6, r3
   28320:	beq	28430 <flatcc_json_parser_space_ext@@Base+0x668>
   28324:	ldr	r3, [sp, #8]
   28328:	ldrb	r3, [r3]
   2832c:	cmp	r3, #93	; 0x5d
   28330:	beq	2844c <flatcc_json_parser_space_ext@@Base+0x684>
   28334:	add	r5, r5, #1
   28338:	cmp	r9, r5
   2833c:	beq	28264 <flatcc_json_parser_space_ext@@Base+0x49c>
   28340:	ldr	r1, [sp, #12]
   28344:	ldr	r0, [r7]
   28348:	bl	22e08 <flatcc_builder_get_user_frame_ptr@@Base>
   2834c:	ldrb	r3, [r0, r5]
   28350:	str	fp, [sp]
   28354:	mov	r2, r6
   28358:	ldr	r1, [sp, #8]
   2835c:	mov	r0, r7
   28360:	blx	r8
   28364:	mov	r4, r0
   28368:	cmp	r6, r0
   2836c:	beq	28510 <flatcc_json_parser_space_ext@@Base+0x748>
   28370:	mov	r1, #1
   28374:	ldr	r0, [r7]
   28378:	bl	238f0 <flatcc_builder_extend_offset_vector@@Base>
   2837c:	cmp	r0, #0
   28380:	beq	284c8 <flatcc_json_parser_space_ext@@Base+0x700>
   28384:	ldr	r3, [sp, #20]
   28388:	str	r3, [r0]
   2838c:	sub	r3, sl, r4
   28390:	cmp	r3, #1
   28394:	ble	283a8 <flatcc_json_parser_space_ext@@Base+0x5e0>
   28398:	ldrb	r3, [r4]
   2839c:	cmp	r3, #32
   283a0:	bhi	283c4 <flatcc_json_parser_space_ext@@Base+0x5fc>
   283a4:	beq	28280 <flatcc_json_parser_space_ext@@Base+0x4b8>
   283a8:	mov	r2, r6
   283ac:	mov	r1, r4
   283b0:	mov	r0, r7
   283b4:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   283b8:	mov	r4, r0
   283bc:	cmp	r6, r4
   283c0:	beq	28518 <flatcc_json_parser_space_ext@@Base+0x750>
   283c4:	ldrb	r3, [r4]
   283c8:	cmp	r3, #44	; 0x2c
   283cc:	beq	282e0 <flatcc_json_parser_space_ext@@Base+0x518>
   283d0:	cmp	r3, #93	; 0x5d
   283d4:	beq	28294 <flatcc_json_parser_space_ext@@Base+0x4cc>
   283d8:	mov	r3, #9
   283dc:	mov	r2, r6
   283e0:	mov	r1, r4
   283e4:	mov	r0, r7
   283e8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   283ec:	mov	sl, r0
   283f0:	add	r5, r5, #1
   283f4:	cmp	r9, r5
   283f8:	beq	284a0 <flatcc_json_parser_space_ext@@Base+0x6d8>
   283fc:	mov	r3, #30
   28400:	mov	r2, r6
   28404:	mov	r1, sl
   28408:	mov	r0, r7
   2840c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28410:	mov	sl, r0
   28414:	b	284e0 <flatcc_json_parser_space_ext@@Base+0x718>
   28418:	ldrb	r3, [r4, #2]
   2841c:	cmp	r3, #32
   28420:	addhi	r3, r4, #2
   28424:	strhi	r3, [sp, #8]
   28428:	bls	28304 <flatcc_json_parser_space_ext@@Base+0x53c>
   2842c:	b	28318 <flatcc_json_parser_space_ext@@Base+0x550>
   28430:	mov	r3, #9
   28434:	mov	r2, r6
   28438:	ldr	r1, [sp, #8]
   2843c:	mov	r0, r7
   28440:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28444:	mov	sl, r0
   28448:	b	283f0 <flatcc_json_parser_space_ext@@Base+0x628>
   2844c:	ldr	r2, [sp, #8]
   28450:	add	sl, r2, #1
   28454:	sub	r3, r6, sl
   28458:	cmp	r3, #1
   2845c:	ble	28470 <flatcc_json_parser_space_ext@@Base+0x6a8>
   28460:	ldrb	r3, [r2, #1]
   28464:	cmp	r3, #32
   28468:	bhi	283f0 <flatcc_json_parser_space_ext@@Base+0x628>
   2846c:	beq	28488 <flatcc_json_parser_space_ext@@Base+0x6c0>
   28470:	mov	r2, r6
   28474:	mov	r1, sl
   28478:	mov	r0, r7
   2847c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   28480:	mov	sl, r0
   28484:	b	283f0 <flatcc_json_parser_space_ext@@Base+0x628>
   28488:	ldrb	r3, [r2, #2]
   2848c:	cmp	r3, #32
   28490:	movhi	r3, r2
   28494:	addhi	sl, r3, #2
   28498:	bls	28470 <flatcc_json_parser_space_ext@@Base+0x6a8>
   2849c:	b	283f0 <flatcc_json_parser_space_ext@@Base+0x628>
   284a0:	ldr	r1, [sp, #12]
   284a4:	ldr	r0, [r7]
   284a8:	bl	22e08 <flatcc_builder_get_user_frame_ptr@@Base>
   284ac:	mov	r1, r0
   284b0:	ldr	r0, [r7]
   284b4:	bl	250ec <flatcc_builder_end_offset_vector_for_unions@@Base>
   284b8:	str	r0, [sp, #20]
   284bc:	cmp	r0, #0
   284c0:	moveq	r4, sl
   284c4:	bne	284ec <flatcc_json_parser_space_ext@@Base+0x724>
   284c8:	mov	r3, #33	; 0x21
   284cc:	mov	r2, r6
   284d0:	mov	r1, r4
   284d4:	mov	r0, r7
   284d8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   284dc:	mov	sl, r0
   284e0:	mov	r0, sl
   284e4:	add	sp, sp, #28
   284e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   284ec:	ldrh	r1, [sp, #68]	; 0x44
   284f0:	ldr	r0, [r7]
   284f4:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   284f8:	cmp	r0, #0
   284fc:	ldrne	r3, [sp, #20]
   28500:	strne	r3, [r0]
   28504:	bne	284e0 <flatcc_json_parser_space_ext@@Base+0x718>
   28508:	mov	r4, sl
   2850c:	b	284c8 <flatcc_json_parser_space_ext@@Base+0x700>
   28510:	mov	sl, r6
   28514:	b	284e0 <flatcc_json_parser_space_ext@@Base+0x718>
   28518:	mov	sl, r6
   2851c:	b	283f0 <flatcc_json_parser_space_ext@@Base+0x628>

00028520 <flatcc_json_parser_string_escape@@Base>:
   28520:	push	{r4, lr}
   28524:	sub	ip, r2, r1
   28528:	cmp	ip, #1
   2852c:	ble	2853c <flatcc_json_parser_string_escape@@Base+0x1c>
   28530:	ldrb	lr, [r1]
   28534:	cmp	lr, #92	; 0x5c
   28538:	beq	28550 <flatcc_json_parser_string_escape@@Base+0x30>
   2853c:	mov	ip, #0
   28540:	strb	ip, [r3]
   28544:	mov	r3, #18
   28548:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2854c:	pop	{r4, pc}
   28550:	ldrb	lr, [r1, #1]
   28554:	sub	lr, lr, #34	; 0x22
   28558:	cmp	lr, #86	; 0x56
   2855c:	ldrls	pc, [pc, lr, lsl #2]
   28560:	b	28a4c <flatcc_json_parser_string_escape@@Base+0x52c>
   28564:	andeq	r8, r2, r4, lsl #20
   28568:	andeq	r8, r2, ip, asr #20
   2856c:	andeq	r8, r2, ip, asr #20
   28570:	andeq	r8, r2, ip, asr #20
   28574:	andeq	r8, r2, ip, asr #20
   28578:	andeq	r8, r2, ip, asr #20
   2857c:	andeq	r8, r2, ip, asr #20
   28580:	andeq	r8, r2, ip, asr #20
   28584:	andeq	r8, r2, ip, asr #20
   28588:	andeq	r8, r2, ip, asr #20
   2858c:	andeq	r8, r2, ip, asr #20
   28590:	andeq	r8, r2, ip, asr #20
   28594:	andeq	r8, r2, ip, asr #20
   28598:	andeq	r8, r2, r4, lsr sl
   2859c:	andeq	r8, r2, ip, asr #20
   285a0:	andeq	r8, r2, ip, asr #20
   285a4:	andeq	r8, r2, ip, asr #20
   285a8:	andeq	r8, r2, ip, asr #20
   285ac:	andeq	r8, r2, ip, asr #20
   285b0:	andeq	r8, r2, ip, asr #20
   285b4:	andeq	r8, r2, ip, asr #20
   285b8:	andeq	r8, r2, ip, asr #20
   285bc:	andeq	r8, r2, ip, asr #20
   285c0:	andeq	r8, r2, ip, asr #20
   285c4:	andeq	r8, r2, ip, asr #20
   285c8:	andeq	r8, r2, ip, asr #20
   285cc:	andeq	r8, r2, ip, asr #20
   285d0:	andeq	r8, r2, ip, asr #20
   285d4:	andeq	r8, r2, ip, asr #20
   285d8:	andeq	r8, r2, ip, asr #20
   285dc:	andeq	r8, r2, ip, asr #20
   285e0:	andeq	r8, r2, ip, asr #20
   285e4:	andeq	r8, r2, ip, asr #20
   285e8:	andeq	r8, r2, ip, asr #20
   285ec:	andeq	r8, r2, ip, asr #20
   285f0:	andeq	r8, r2, ip, asr #20
   285f4:	andeq	r8, r2, ip, asr #20
   285f8:	andeq	r8, r2, ip, asr #20
   285fc:	andeq	r8, r2, ip, asr #20
   28600:	andeq	r8, r2, ip, asr #20
   28604:	andeq	r8, r2, ip, asr #20
   28608:	andeq	r8, r2, ip, asr #20
   2860c:	andeq	r8, r2, ip, asr #20
   28610:	andeq	r8, r2, ip, asr #20
   28614:	andeq	r8, r2, ip, asr #20
   28618:	andeq	r8, r2, ip, asr #20
   2861c:	andeq	r8, r2, ip, asr #20
   28620:	andeq	r8, r2, ip, asr #20
   28624:	andeq	r8, r2, ip, asr #20
   28628:	andeq	r8, r2, ip, asr #20
   2862c:	andeq	r8, r2, ip, asr #20
   28630:	andeq	r8, r2, ip, asr #20
   28634:	andeq	r8, r2, ip, asr #20
   28638:	andeq	r8, r2, ip, asr #20
   2863c:	andeq	r8, r2, ip, asr #20
   28640:	andeq	r8, r2, ip, asr #20
   28644:	andeq	r8, r2, ip, asr #20
   28648:	andeq	r8, r2, ip, asr #20
   2864c:	andeq	r8, r2, ip, lsl sl
   28650:	andeq	r8, r2, ip, asr #20
   28654:	andeq	r8, r2, ip, asr #20
   28658:	andeq	r8, r2, ip, asr #20
   2865c:	andeq	r8, r2, ip, asr #20
   28660:	andeq	r8, r2, ip, asr #20
   28664:	ldrdeq	r8, [r2], -r4
   28668:	andeq	r8, r2, ip, asr #20
   2866c:	andeq	r8, r2, ip, asr #20
   28670:	andeq	r8, r2, ip, asr #20
   28674:	andeq	r8, r2, ip, ror #19
   28678:	andeq	r8, r2, ip, asr #20
   2867c:	andeq	r8, r2, ip, asr #20
   28680:	andeq	r8, r2, ip, asr #20
   28684:	andeq	r8, r2, ip, asr #20
   28688:	andeq	r8, r2, ip, asr #20
   2868c:	andeq	r8, r2, ip, asr #20
   28690:	andeq	r8, r2, ip, asr #20
   28694:	andeq	r8, r2, r4, lsr #19
   28698:	andeq	r8, r2, ip, asr #20
   2869c:	andeq	r8, r2, ip, asr #20
   286a0:	andeq	r8, r2, ip, asr #20
   286a4:			; <UNDEFINED> instruction: 0x000289bc
   286a8:	andeq	r8, r2, ip, asr #20
   286ac:	andeq	r8, r2, ip, lsl #19
   286b0:	andeq	r8, r2, ip, lsl #15
   286b4:	andeq	r8, r2, ip, asr #20
   286b8:	andeq	r8, r2, ip, asr #20
   286bc:	andeq	r8, r2, r0, asr #13
   286c0:	mov	lr, #1
   286c4:	strb	lr, [r3]
   286c8:	cmp	ip, #3
   286cc:	ble	28750 <flatcc_json_parser_string_escape@@Base+0x230>
   286d0:	ldrb	ip, [r1, #2]
   286d4:	sub	lr, ip, #48	; 0x30
   286d8:	uxtb	lr, lr
   286dc:	cmp	lr, #9
   286e0:	lslls	ip, ip, #4
   286e4:	andls	ip, ip, #240	; 0xf0
   286e8:	bls	2870c <flatcc_json_parser_string_escape@@Base+0x1ec>
   286ec:	orr	ip, ip, #32
   286f0:	sub	lr, ip, #97	; 0x61
   286f4:	uxtb	lr, lr
   286f8:	cmp	lr, #5
   286fc:	bhi	28764 <flatcc_json_parser_string_escape@@Base+0x244>
   28700:	sub	ip, ip, #87	; 0x57
   28704:	lsl	ip, ip, #4
   28708:	uxtb	ip, ip
   2870c:	ldrb	lr, [r1, #3]
   28710:	sub	r4, lr, #48	; 0x30
   28714:	uxtb	r4, r4
   28718:	cmp	r4, #9
   2871c:	orrls	ip, r4, ip
   28720:	bls	28744 <flatcc_json_parser_string_escape@@Base+0x224>
   28724:	orr	lr, lr, #32
   28728:	sub	r4, lr, #97	; 0x61
   2872c:	uxtb	r4, r4
   28730:	cmp	r4, #5
   28734:	bhi	28778 <flatcc_json_parser_string_escape@@Base+0x258>
   28738:	sub	lr, lr, #87	; 0x57
   2873c:	orr	ip, lr, ip
   28740:	uxtb	ip, ip
   28744:	strb	ip, [r3, #1]
   28748:	add	r0, r1, #4
   2874c:	pop	{r4, pc}
   28750:	mov	ip, #0
   28754:	strb	ip, [r3]
   28758:	mov	r3, #18
   2875c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28760:	pop	{r4, pc}
   28764:	mov	ip, #0
   28768:	strb	ip, [r3]
   2876c:	mov	r3, #18
   28770:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28774:	pop	{r4, pc}
   28778:	mov	ip, #0
   2877c:	strb	ip, [r3]
   28780:	mov	r3, #18
   28784:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28788:	pop	{r4, pc}
   2878c:	cmp	ip, #5
   28790:	ble	28854 <flatcc_json_parser_string_escape@@Base+0x334>
   28794:	ldrb	ip, [r1, #2]
   28798:	sub	lr, ip, #48	; 0x30
   2879c:	uxtb	lr, lr
   287a0:	cmp	lr, #9
   287a4:	lslls	ip, ip, #12
   287a8:	andls	lr, ip, #61440	; 0xf000
   287ac:	bls	287d0 <flatcc_json_parser_string_escape@@Base+0x2b0>
   287b0:	orr	ip, ip, #32
   287b4:	sub	lr, ip, #97	; 0x61
   287b8:	uxtb	lr, lr
   287bc:	cmp	lr, #5
   287c0:	bhi	28868 <flatcc_json_parser_string_escape@@Base+0x348>
   287c4:	sub	ip, ip, #87	; 0x57
   287c8:	lsl	ip, ip, #12
   287cc:	and	lr, ip, #61440	; 0xf000
   287d0:	ldrb	ip, [r1, #3]
   287d4:	sub	r4, ip, #48	; 0x30
   287d8:	uxtb	r4, r4
   287dc:	cmp	r4, #9
   287e0:	bhi	2887c <flatcc_json_parser_string_escape@@Base+0x35c>
   287e4:	sub	ip, ip, #48	; 0x30
   287e8:	uxth	ip, ip
   287ec:	orr	ip, lr, ip, lsl #8
   287f0:	and	ip, ip, #65280	; 0xff00
   287f4:	ldrb	lr, [r1, #4]
   287f8:	sub	r4, lr, #48	; 0x30
   287fc:	uxtb	r4, r4
   28800:	cmp	r4, #9
   28804:	bhi	288b8 <flatcc_json_parser_string_escape@@Base+0x398>
   28808:	sub	lr, lr, #48	; 0x30
   2880c:	uxth	lr, lr
   28810:	orr	ip, ip, lr, lsl #4
   28814:	uxth	ip, ip
   28818:	ldrb	lr, [r1, #5]
   2881c:	sub	r4, lr, #48	; 0x30
   28820:	uxtb	r4, r4
   28824:	cmp	r4, #9
   28828:	bhi	288f4 <flatcc_json_parser_string_escape@@Base+0x3d4>
   2882c:	sub	r2, lr, #48	; 0x30
   28830:	orr	r2, ip, r2
   28834:	uxth	r2, r2
   28838:	cmp	r2, #127	; 0x7f
   2883c:	bhi	28928 <flatcc_json_parser_string_escape@@Base+0x408>
   28840:	mov	r0, #1
   28844:	strb	r0, [r3]
   28848:	strb	r2, [r3, #1]
   2884c:	add	r0, r1, #6
   28850:	pop	{r4, pc}
   28854:	mov	ip, #0
   28858:	strb	ip, [r3]
   2885c:	mov	r3, #18
   28860:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28864:	pop	{r4, pc}
   28868:	mov	ip, #0
   2886c:	strb	ip, [r3]
   28870:	mov	r3, #18
   28874:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28878:	pop	{r4, pc}
   2887c:	orr	ip, ip, #32
   28880:	sub	r4, ip, #97	; 0x61
   28884:	uxtb	r4, r4
   28888:	cmp	r4, #5
   2888c:	bhi	288a4 <flatcc_json_parser_string_escape@@Base+0x384>
   28890:	sub	ip, ip, #87	; 0x57
   28894:	uxth	ip, ip
   28898:	orr	ip, lr, ip, lsl #8
   2889c:	and	ip, ip, #65280	; 0xff00
   288a0:	b	287f4 <flatcc_json_parser_string_escape@@Base+0x2d4>
   288a4:	mov	ip, #0
   288a8:	strb	ip, [r3]
   288ac:	mov	r3, #18
   288b0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   288b4:	pop	{r4, pc}
   288b8:	orr	lr, lr, #32
   288bc:	sub	r4, lr, #97	; 0x61
   288c0:	uxtb	r4, r4
   288c4:	cmp	r4, #5
   288c8:	bhi	288e0 <flatcc_json_parser_string_escape@@Base+0x3c0>
   288cc:	sub	lr, lr, #87	; 0x57
   288d0:	uxth	lr, lr
   288d4:	orr	ip, ip, lr, lsl #4
   288d8:	uxth	ip, ip
   288dc:	b	28818 <flatcc_json_parser_string_escape@@Base+0x2f8>
   288e0:	mov	ip, #0
   288e4:	strb	ip, [r3]
   288e8:	mov	r3, #18
   288ec:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   288f0:	pop	{r4, pc}
   288f4:	orr	lr, lr, #32
   288f8:	sub	r4, lr, #97	; 0x61
   288fc:	uxtb	r4, r4
   28900:	cmp	r4, #5
   28904:	subls	r2, lr, #87	; 0x57
   28908:	orrls	r2, ip, r2
   2890c:	uxthls	r2, r2
   28910:	bls	28838 <flatcc_json_parser_string_escape@@Base+0x318>
   28914:	mov	ip, #0
   28918:	strb	ip, [r3]
   2891c:	mov	r3, #18
   28920:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28924:	pop	{r4, pc}
   28928:	cmp	r2, #2048	; 0x800
   2892c:	bcs	28958 <flatcc_json_parser_string_escape@@Base+0x438>
   28930:	mov	r0, #2
   28934:	strb	r0, [r3]
   28938:	mvn	r0, #63	; 0x3f
   2893c:	orr	r0, r0, r2, lsr #6
   28940:	strb	r0, [r3, #1]
   28944:	and	r2, r2, #63	; 0x3f
   28948:	mvn	r2, r2, lsl #25
   2894c:	mvn	r2, r2, lsr #25
   28950:	strb	r2, [r3, #2]
   28954:	b	2884c <flatcc_json_parser_string_escape@@Base+0x32c>
   28958:	mov	r0, #3
   2895c:	strb	r0, [r3]
   28960:	mvn	r0, #31
   28964:	orr	r0, r0, r2, lsr #12
   28968:	strb	r0, [r3, #1]
   2896c:	lsl	r0, r2, #20
   28970:	mvn	ip, #127	; 0x7f
   28974:	orr	r0, ip, r0, lsr #26
   28978:	strb	r0, [r3, #2]
   2897c:	and	r2, r2, #63	; 0x3f
   28980:	orr	r2, r2, ip
   28984:	strb	r2, [r3, #3]
   28988:	b	2884c <flatcc_json_parser_string_escape@@Base+0x32c>
   2898c:	mov	r2, #1
   28990:	strb	r2, [r3]
   28994:	mov	r2, #9
   28998:	strb	r2, [r3, #1]
   2899c:	add	r0, r1, #2
   289a0:	pop	{r4, pc}
   289a4:	mov	r2, #1
   289a8:	strb	r2, [r3]
   289ac:	mov	r2, #10
   289b0:	strb	r2, [r3, #1]
   289b4:	add	r0, r1, #2
   289b8:	pop	{r4, pc}
   289bc:	mov	r2, #1
   289c0:	strb	r2, [r3]
   289c4:	mov	r2, #13
   289c8:	strb	r2, [r3, #1]
   289cc:	add	r0, r1, #2
   289d0:	pop	{r4, pc}
   289d4:	mov	r2, #1
   289d8:	strb	r2, [r3]
   289dc:	mov	r2, #8
   289e0:	strb	r2, [r3, #1]
   289e4:	add	r0, r1, #2
   289e8:	pop	{r4, pc}
   289ec:	mov	r2, #1
   289f0:	strb	r2, [r3]
   289f4:	mov	r2, #12
   289f8:	strb	r2, [r3, #1]
   289fc:	add	r0, r1, #2
   28a00:	pop	{r4, pc}
   28a04:	mov	r2, #1
   28a08:	strb	r2, [r3]
   28a0c:	mov	r2, #34	; 0x22
   28a10:	strb	r2, [r3, #1]
   28a14:	add	r0, r1, #2
   28a18:	pop	{r4, pc}
   28a1c:	mov	r2, #1
   28a20:	strb	r2, [r3]
   28a24:	mov	r2, #92	; 0x5c
   28a28:	strb	r2, [r3, #1]
   28a2c:	add	r0, r1, #2
   28a30:	pop	{r4, pc}
   28a34:	mov	r2, #1
   28a38:	strb	r2, [r3]
   28a3c:	mov	r2, #47	; 0x2f
   28a40:	strb	r2, [r3, #1]
   28a44:	add	r0, r1, #2
   28a48:	pop	{r4, pc}
   28a4c:	mov	ip, #0
   28a50:	strb	ip, [r3]
   28a54:	mov	r3, #18
   28a58:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28a5c:	pop	{r4, pc}

00028a60 <flatcc_json_parser_skip_constant@@Base>:
   28a60:	push	{r4, r5, r6, lr}
   28a64:	mov	r6, r0
   28a68:	mov	r4, r1
   28a6c:	mov	r5, r2
   28a70:	cmp	r1, r2
   28a74:	bne	28a88 <flatcc_json_parser_skip_constant@@Base+0x28>
   28a78:	b	28b1c <flatcc_json_parser_skip_constant@@Base+0xbc>
   28a7c:	add	r4, r4, #1
   28a80:	cmp	r5, r4
   28a84:	beq	28b1c <flatcc_json_parser_skip_constant@@Base+0xbc>
   28a88:	ldrb	r3, [r4]
   28a8c:	cmp	r3, #95	; 0x5f
   28a90:	movne	r2, #0
   28a94:	moveq	r2, #1
   28a98:	orrs	r2, r2, r3, lsr #7
   28a9c:	bne	28a7c <flatcc_json_parser_skip_constant@@Base+0x1c>
   28aa0:	sub	r2, r3, #48	; 0x30
   28aa4:	uxtb	r2, r2
   28aa8:	cmp	r3, #46	; 0x2e
   28aac:	cmpne	r2, #9
   28ab0:	bls	28a7c <flatcc_json_parser_skip_constant@@Base+0x1c>
   28ab4:	orr	r2, r3, #32
   28ab8:	sub	r2, r2, #97	; 0x61
   28abc:	uxtb	r2, r2
   28ac0:	cmp	r2, #25
   28ac4:	addls	r4, r4, #1
   28ac8:	bls	28a80 <flatcc_json_parser_skip_constant@@Base+0x20>
   28acc:	sub	r2, r5, r4
   28ad0:	cmp	r2, #1
   28ad4:	ble	28ae4 <flatcc_json_parser_skip_constant@@Base+0x84>
   28ad8:	cmp	r3, #32
   28adc:	bhi	28b18 <flatcc_json_parser_skip_constant@@Base+0xb8>
   28ae0:	beq	28b04 <flatcc_json_parser_skip_constant@@Base+0xa4>
   28ae4:	mov	r2, r5
   28ae8:	mov	r1, r4
   28aec:	mov	r0, r6
   28af0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   28af4:	cmp	r0, r4
   28af8:	beq	28b24 <flatcc_json_parser_skip_constant@@Base+0xc4>
   28afc:	mov	r4, r0
   28b00:	b	28a80 <flatcc_json_parser_skip_constant@@Base+0x20>
   28b04:	ldrb	r3, [r4, #1]
   28b08:	cmp	r3, #32
   28b0c:	addhi	r0, r4, #1
   28b10:	bls	28ae4 <flatcc_json_parser_skip_constant@@Base+0x84>
   28b14:	b	28af4 <flatcc_json_parser_skip_constant@@Base+0x94>
   28b18:	mov	r5, r4
   28b1c:	mov	r0, r5
   28b20:	pop	{r4, r5, r6, pc}
   28b24:	mov	r5, r0
   28b28:	b	28b1c <flatcc_json_parser_skip_constant@@Base+0xbc>

00028b2c <flatcc_json_parser_match_constant@@Base>:
   28b2c:	push	{r4, r5, r6, r7, r8, lr}
   28b30:	ldr	r5, [sp, #24]
   28b34:	sub	ip, r2, r1
   28b38:	cmp	r3, ip
   28b3c:	bge	28b94 <flatcc_json_parser_match_constant@@Base+0x68>
   28b40:	mov	r6, r2
   28b44:	mov	r7, r1
   28b48:	mov	ip, r0
   28b4c:	add	r4, r1, r3
   28b50:	ldr	r2, [r0, #12]
   28b54:	cmp	r2, #0
   28b58:	bne	28ba4 <flatcc_json_parser_match_constant@@Base+0x78>
   28b5c:	ldrb	r3, [r1, r3]
   28b60:	cmp	r3, #32
   28b64:	beq	28c64 <flatcc_json_parser_match_constant@@Base+0x138>
   28b68:	cmp	r3, #34	; 0x22
   28b6c:	beq	28cbc <flatcc_json_parser_match_constant@@Base+0x190>
   28b70:	cmp	r3, #92	; 0x5c
   28b74:	bne	28d0c <flatcc_json_parser_match_constant@@Base+0x1e0>
   28b78:	mov	r3, #0
   28b7c:	str	r3, [r5]
   28b80:	mov	r3, #18
   28b84:	mov	r2, r6
   28b88:	mov	r1, r4
   28b8c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28b90:	pop	{r4, r5, r6, r7, r8, pc}
   28b94:	mov	r3, #0
   28b98:	str	r3, [r5]
   28b9c:	mov	r0, r1
   28ba0:	pop	{r4, r5, r6, r7, r8, pc}
   28ba4:	sub	r2, r6, r4
   28ba8:	cmp	r2, #1
   28bac:	ble	28bc0 <flatcc_json_parser_match_constant@@Base+0x94>
   28bb0:	ldrb	r3, [r1, r3]
   28bb4:	cmp	r3, #32
   28bb8:	bhi	28d1c <flatcc_json_parser_match_constant@@Base+0x1f0>
   28bbc:	beq	28c38 <flatcc_json_parser_match_constant@@Base+0x10c>
   28bc0:	mov	r2, r6
   28bc4:	mov	r1, r4
   28bc8:	mov	r0, ip
   28bcc:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   28bd0:	cmp	r6, r0
   28bd4:	beq	28d28 <flatcc_json_parser_match_constant@@Base+0x1fc>
   28bd8:	cmp	r4, r0
   28bdc:	beq	28c0c <flatcc_json_parser_match_constant@@Base+0xe0>
   28be0:	ldrb	r3, [r0]
   28be4:	cmp	r3, #95	; 0x5f
   28be8:	movne	r2, #0
   28bec:	moveq	r2, #1
   28bf0:	orrs	r2, r2, r3, lsr #7
   28bf4:	bne	28c4c <flatcc_json_parser_match_constant@@Base+0x120>
   28bf8:	orr	r3, r3, #32
   28bfc:	sub	r3, r3, #97	; 0x61
   28c00:	uxtb	r3, r3
   28c04:	cmp	r3, #25
   28c08:	bls	28c58 <flatcc_json_parser_match_constant@@Base+0x12c>
   28c0c:	mov	r3, #0
   28c10:	str	r3, [r5]
   28c14:	ldrb	r2, [r0]
   28c18:	and	r3, r2, #223	; 0xdf
   28c1c:	cmp	r2, #44	; 0x2c
   28c20:	cmpne	r3, #93	; 0x5d
   28c24:	moveq	r3, #1
   28c28:	movne	r3, #0
   28c2c:	cmp	r3, #0
   28c30:	moveq	r0, r7
   28c34:	pop	{r4, r5, r6, r7, r8, pc}
   28c38:	ldrb	r3, [r4, #1]
   28c3c:	cmp	r3, #32
   28c40:	addhi	r0, r4, #1
   28c44:	bls	28bc0 <flatcc_json_parser_match_constant@@Base+0x94>
   28c48:	b	28bd0 <flatcc_json_parser_match_constant@@Base+0xa4>
   28c4c:	mov	r3, #1
   28c50:	str	r3, [r5]
   28c54:	pop	{r4, r5, r6, r7, r8, pc}
   28c58:	mov	r3, #1
   28c5c:	str	r3, [r5]
   28c60:	pop	{r4, r5, r6, r7, r8, pc}
   28c64:	add	r3, r4, #1
   28c68:	cmp	r6, r3
   28c6c:	beq	28d38 <flatcc_json_parser_match_constant@@Base+0x20c>
   28c70:	ldrb	r2, [r4, #1]
   28c74:	cmp	r2, #32
   28c78:	bne	28d4c <flatcc_json_parser_match_constant@@Base+0x220>
   28c7c:	add	r3, r4, #2
   28c80:	mov	r2, r6
   28c84:	mov	r4, r3
   28c88:	cmp	r2, r3
   28c8c:	beq	28d3c <flatcc_json_parser_match_constant@@Base+0x210>
   28c90:	add	r3, r3, #1
   28c94:	ldrb	r1, [r4]
   28c98:	cmp	r1, #32
   28c9c:	beq	28c84 <flatcc_json_parser_match_constant@@Base+0x158>
   28ca0:	ldrb	r3, [r4]
   28ca4:	cmp	r3, #34	; 0x22
   28ca8:	beq	28cbc <flatcc_json_parser_match_constant@@Base+0x190>
   28cac:	mov	r3, #1
   28cb0:	str	r3, [r5]
   28cb4:	mov	r0, r4
   28cb8:	pop	{r4, r5, r6, r7, r8, pc}
   28cbc:	add	r0, r4, #1
   28cc0:	rsb	r3, r0, #0
   28cc4:	cmp	r3, #1
   28cc8:	ble	28cdc <flatcc_json_parser_match_constant@@Base+0x1b0>
   28ccc:	ldrb	r3, [r4, #1]
   28cd0:	cmp	r3, #32
   28cd4:	bhi	28cec <flatcc_json_parser_match_constant@@Base+0x1c0>
   28cd8:	beq	28cf8 <flatcc_json_parser_match_constant@@Base+0x1cc>
   28cdc:	mov	r2, #0
   28ce0:	mov	r1, r0
   28ce4:	mov	r0, ip
   28ce8:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   28cec:	mov	r3, #0
   28cf0:	str	r3, [r5]
   28cf4:	pop	{r4, r5, r6, r7, r8, pc}
   28cf8:	ldrb	r3, [r4, #2]
   28cfc:	cmp	r3, #32
   28d00:	addhi	r0, r4, #2
   28d04:	bls	28cdc <flatcc_json_parser_match_constant@@Base+0x1b0>
   28d08:	b	28cec <flatcc_json_parser_match_constant@@Base+0x1c0>
   28d0c:	mov	r3, #0
   28d10:	str	r3, [r5]
   28d14:	mov	r0, r1
   28d18:	pop	{r4, r5, r6, r7, r8, pc}
   28d1c:	cmp	r4, r6
   28d20:	movne	r0, r4
   28d24:	bne	28c0c <flatcc_json_parser_match_constant@@Base+0xe0>
   28d28:	mov	r3, #0
   28d2c:	str	r3, [r5]
   28d30:	mov	r0, r6
   28d34:	pop	{r4, r5, r6, r7, r8, pc}
   28d38:	mov	r4, r3
   28d3c:	mov	r3, #0
   28d40:	str	r3, [r5]
   28d44:	mov	r0, r4
   28d48:	pop	{r4, r5, r6, r7, r8, pc}
   28d4c:	mov	r4, r3
   28d50:	b	28ca0 <flatcc_json_parser_match_constant@@Base+0x174>

00028d54 <flatcc_json_parser_double@@Base>:
   28d54:	push	{r4, r5, r6, r7, r8, lr}
   28d58:	mov	r4, #0
   28d5c:	mov	r5, #0
   28d60:	strd	r4, [r3]
   28d64:	cmp	r1, r2
   28d68:	beq	28dfc <flatcc_json_parser_double@@Base+0xa8>
   28d6c:	ldrb	ip, [r1]
   28d70:	cmp	ip, #45	; 0x2d
   28d74:	addeq	ip, r1, #1
   28d78:	movne	ip, r1
   28d7c:	mov	r6, r3
   28d80:	mov	r5, r2
   28d84:	mov	r4, r1
   28d88:	mov	r7, r0
   28d8c:	sub	r3, r2, ip
   28d90:	cmp	r3, #1
   28d94:	ble	28dac <flatcc_json_parser_double@@Base+0x58>
   28d98:	ldrb	r3, [ip]
   28d9c:	cmp	r3, #46	; 0x2e
   28da0:	beq	28e10 <flatcc_json_parser_double@@Base+0xbc>
   28da4:	cmp	r3, #48	; 0x30
   28da8:	beq	28e04 <flatcc_json_parser_double@@Base+0xb0>
   28dac:	mov	r2, r6
   28db0:	sub	r1, r5, r4
   28db4:	mov	r0, r4
   28db8:	bl	26f90 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   28dbc:	mov	r2, r0
   28dc0:	cmp	r4, r0
   28dc4:	cmpne	r0, #0
   28dc8:	bne	28dfc <flatcc_json_parser_double@@Base+0xa8>
   28dcc:	vldr	d7, [r6]
   28dd0:	vabs.f64	d7, d7
   28dd4:	vldr	d6, [pc, #84]	; 28e30 <flatcc_json_parser_double@@Base+0xdc>
   28dd8:	vcmp.f64	d7, d6
   28ddc:	vmrs	APSR_nzcv, fpscr
   28de0:	movgt	r3, #7
   28de4:	movle	r3, #6
   28de8:	mov	r2, r5
   28dec:	mov	r1, r4
   28df0:	mov	r0, r7
   28df4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28df8:	mov	r2, r0
   28dfc:	mov	r0, r2
   28e00:	pop	{r4, r5, r6, r7, r8, pc}
   28e04:	ldrb	r3, [ip, #1]
   28e08:	cmp	r3, #48	; 0x30
   28e0c:	bne	28dac <flatcc_json_parser_double@@Base+0x58>
   28e10:	mov	r3, #6
   28e14:	mov	r2, r5
   28e18:	mov	r1, r4
   28e1c:	mov	r0, r7
   28e20:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28e24:	mov	r2, r0
   28e28:	b	28dfc <flatcc_json_parser_double@@Base+0xa8>
   28e2c:	nop			; (mov r0, r0)
   28e30:			; <UNDEFINED> instruction: 0xffffffff
   28e34:	svcvc	0x00efffff

00028e38 <flatcc_json_parser_float@@Base>:
   28e38:	mov	ip, #0
   28e3c:	str	ip, [r3]
   28e40:	cmp	r1, r2
   28e44:	beq	28f54 <flatcc_json_parser_float@@Base+0x11c>
   28e48:	push	{r4, r5, r6, r7, lr}
   28e4c:	sub	sp, sp, #12
   28e50:	ldrb	ip, [r1]
   28e54:	cmp	ip, #45	; 0x2d
   28e58:	addeq	ip, r1, #1
   28e5c:	movne	ip, r1
   28e60:	mov	r6, r3
   28e64:	mov	r5, r2
   28e68:	mov	r4, r1
   28e6c:	mov	r7, r0
   28e70:	sub	r3, r2, ip
   28e74:	cmp	r3, #1
   28e78:	ble	28e90 <flatcc_json_parser_float@@Base+0x58>
   28e7c:	ldrb	r3, [ip]
   28e80:	cmp	r3, #46	; 0x2e
   28e84:	beq	28f10 <flatcc_json_parser_float@@Base+0xd8>
   28e88:	cmp	r3, #48	; 0x30
   28e8c:	beq	28f04 <flatcc_json_parser_float@@Base+0xcc>
   28e90:	mov	r2, sp
   28e94:	sub	r1, r5, r4
   28e98:	mov	r0, r4
   28e9c:	bl	26f90 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   28ea0:	vldr	d6, [sp]
   28ea4:	vcvt.f32.f64	s15, d6
   28ea8:	vstr	s15, [r6]
   28eac:	vabs.f32	s15, s15
   28eb0:	vldr	s14, [pc, #164]	; 28f5c <flatcc_json_parser_float@@Base+0x124>
   28eb4:	vcmp.f32	s15, s14
   28eb8:	vmrs	APSR_nzcv, fpscr
   28ebc:	ble	28f28 <flatcc_json_parser_float@@Base+0xf0>
   28ec0:	vcmpe.f64	d6, #0.0
   28ec4:	vmrs	APSR_nzcv, fpscr
   28ec8:	vldr	s14, [pc, #144]	; 28f60 <flatcc_json_parser_float@@Base+0x128>
   28ecc:	vldr	s15, [pc, #144]	; 28f64 <flatcc_json_parser_float@@Base+0x12c>
   28ed0:	vmovpl.f32	s15, s14
   28ed4:	vstr	s15, [r6]
   28ed8:	vabs.f32	s15, s15
   28edc:	vldr	s14, [pc, #120]	; 28f5c <flatcc_json_parser_float@@Base+0x124>
   28ee0:	vcmp.f32	s15, s14
   28ee4:	vmrs	APSR_nzcv, fpscr
   28ee8:	bgt	28f3c <flatcc_json_parser_float@@Base+0x104>
   28eec:	mov	r3, #6
   28ef0:	mov	r2, r5
   28ef4:	mov	r1, r4
   28ef8:	mov	r0, r7
   28efc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28f00:	b	28f34 <flatcc_json_parser_float@@Base+0xfc>
   28f04:	ldrb	r3, [ip, #1]
   28f08:	cmp	r3, #48	; 0x30
   28f0c:	bne	28e90 <flatcc_json_parser_float@@Base+0x58>
   28f10:	mov	r3, #6
   28f14:	mov	r2, r5
   28f18:	mov	r1, r4
   28f1c:	mov	r0, r7
   28f20:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28f24:	b	28f34 <flatcc_json_parser_float@@Base+0xfc>
   28f28:	cmp	r4, r0
   28f2c:	cmpne	r0, #0
   28f30:	beq	28eec <flatcc_json_parser_float@@Base+0xb4>
   28f34:	add	sp, sp, #12
   28f38:	pop	{r4, r5, r6, r7, pc}
   28f3c:	mov	r3, #7
   28f40:	mov	r2, r5
   28f44:	mov	r1, r4
   28f48:	mov	r0, r7
   28f4c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28f50:	b	28f34 <flatcc_json_parser_float@@Base+0xfc>
   28f54:	mov	r0, r2
   28f58:	bx	lr
   28f5c:	svcvc	0x007fffff
   28f60:	svcvc	0x00800000
   28f64:			; <UNDEFINED> instruction: 0xff800000

00028f68 <flatcc_json_parser_generic_json@@Base>:
   28f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28f6c:	sub	sp, sp, #524	; 0x20c
   28f70:	mov	r5, r2
   28f74:	cmp	r1, r2
   28f78:	beq	29940 <flatcc_json_parser_generic_json@@Base+0x9d8>
   28f7c:	mov	r8, r0
   28f80:	mov	r4, r1
   28f84:	add	r6, sp, #8
   28f88:	mov	r7, r6
   28f8c:	mov	sl, #10
   28f90:	mov	fp, #125	; 0x7d
   28f94:	b	29824 <flatcc_json_parser_generic_json@@Base+0x8bc>
   28f98:	ldrb	r3, [r4]
   28f9c:	cmp	r3, #34	; 0x22
   28fa0:	addeq	r4, r4, #1
   28fa4:	moveq	r3, #0
   28fa8:	streq	r3, [r8, #12]
   28fac:	beq	29000 <flatcc_json_parser_generic_json@@Base+0x98>
   28fb0:	cmp	r3, #46	; 0x2e
   28fb4:	movne	r3, #1
   28fb8:	strne	r3, [r8, #12]
   28fbc:	beq	28fdc <flatcc_json_parser_generic_json@@Base+0x74>
   28fc0:	cmp	r5, r4
   28fc4:	beq	29184 <flatcc_json_parser_generic_json@@Base+0x21c>
   28fc8:	ldrb	r3, [r4]
   28fcc:	cmp	r3, #32
   28fd0:	bls	29a74 <flatcc_json_parser_generic_json@@Base+0xb0c>
   28fd4:	add	r4, r4, #1
   28fd8:	b	2903c <flatcc_json_parser_generic_json@@Base+0xd4>
   28fdc:	mov	r3, #5
   28fe0:	mov	r2, r5
   28fe4:	mov	r1, r4
   28fe8:	mov	r0, r8
   28fec:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   28ff0:	mov	r4, r0
   28ff4:	ldr	r3, [r8, #12]
   28ff8:	cmp	r3, #0
   28ffc:	bne	28fc0 <flatcc_json_parser_generic_json@@Base+0x58>
   29000:	cmp	r5, r4
   29004:	beq	2916c <flatcc_json_parser_generic_json@@Base+0x204>
   29008:	ldrb	r3, [r4]
   2900c:	cmp	r3, #34	; 0x22
   29010:	bne	2913c <flatcc_json_parser_generic_json@@Base+0x1d4>
   29014:	add	r0, r4, #1
   29018:	b	2908c <flatcc_json_parser_generic_json@@Base+0x124>
   2901c:	mov	r0, r4
   29020:	cmp	r5, r0
   29024:	beq	29080 <flatcc_json_parser_generic_json@@Base+0x118>
   29028:	ldrb	r2, [r0]
   2902c:	add	r4, r4, #1
   29030:	cmp	r2, #32
   29034:	bls	29084 <flatcc_json_parser_generic_json@@Base+0x11c>
   29038:	mov	r3, r2
   2903c:	sub	r0, r4, #1
   29040:	cmp	r3, #46	; 0x2e
   29044:	cmpne	r3, #95	; 0x5f
   29048:	beq	2901c <flatcc_json_parser_generic_json@@Base+0xb4>
   2904c:	tst	r3, #128	; 0x80
   29050:	bne	2901c <flatcc_json_parser_generic_json@@Base+0xb4>
   29054:	sub	r2, r3, #48	; 0x30
   29058:	uxtb	r2, r2
   2905c:	cmp	r2, #9
   29060:	bls	2901c <flatcc_json_parser_generic_json@@Base+0xb4>
   29064:	orr	r2, r3, #32
   29068:	sub	r2, r2, #97	; 0x61
   2906c:	uxtb	r2, r2
   29070:	cmp	r2, #25
   29074:	bhi	29084 <flatcc_json_parser_generic_json@@Base+0x11c>
   29078:	mov	r0, r4
   2907c:	b	29020 <flatcc_json_parser_generic_json@@Base+0xb8>
   29080:	mov	r0, r5
   29084:	cmp	r3, #46	; 0x2e
   29088:	beq	2910c <flatcc_json_parser_generic_json@@Base+0x1a4>
   2908c:	mov	r9, r5
   29090:	sub	r3, r5, r0
   29094:	cmp	r3, #1
   29098:	ble	290b0 <flatcc_json_parser_generic_json@@Base+0x148>
   2909c:	ldrb	r3, [r0]
   290a0:	cmp	r3, #32
   290a4:	bhi	290c0 <flatcc_json_parser_generic_json@@Base+0x158>
   290a8:	cmp	r3, #32
   290ac:	beq	2918c <flatcc_json_parser_generic_json@@Base+0x224>
   290b0:	mov	r2, r5
   290b4:	mov	r1, r0
   290b8:	mov	r0, r8
   290bc:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   290c0:	cmp	r5, r0
   290c4:	beq	291a0 <flatcc_json_parser_generic_json@@Base+0x238>
   290c8:	ldrb	r3, [r0]
   290cc:	cmp	r3, #58	; 0x3a
   290d0:	bne	291b8 <flatcc_json_parser_generic_json@@Base+0x250>
   290d4:	add	r4, r0, #1
   290d8:	sub	r9, r9, r4
   290dc:	cmp	r9, #1
   290e0:	ble	290f4 <flatcc_json_parser_generic_json@@Base+0x18c>
   290e4:	ldrb	r3, [r0, #1]
   290e8:	cmp	r3, #32
   290ec:	bhi	29838 <flatcc_json_parser_generic_json@@Base+0x8d0>
   290f0:	beq	291d0 <flatcc_json_parser_generic_json@@Base+0x268>
   290f4:	mov	r2, r5
   290f8:	mov	r1, r4
   290fc:	mov	r0, r8
   29100:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   29104:	mov	r4, r0
   29108:	b	29838 <flatcc_json_parser_generic_json@@Base+0x8d0>
   2910c:	mov	r3, #5
   29110:	mov	r2, r5
   29114:	mov	r1, r0
   29118:	mov	r0, r8
   2911c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29120:	b	2908c <flatcc_json_parser_generic_json@@Base+0x124>
   29124:	add	r4, r3, #1
   29128:	cmp	r5, r4
   2912c:	beq	29950 <flatcc_json_parser_generic_json@@Base+0x9e8>
   29130:	ldrb	r3, [r3, #1]
   29134:	cmp	r3, #34	; 0x22
   29138:	beq	29160 <flatcc_json_parser_generic_json@@Base+0x1f8>
   2913c:	cmp	r3, #92	; 0x5c
   29140:	movne	r3, r4
   29144:	bne	29124 <flatcc_json_parser_generic_json@@Base+0x1bc>
   29148:	sub	r3, r5, r4
   2914c:	cmp	r3, #1
   29150:	addgt	r3, r4, #1
   29154:	bgt	29124 <flatcc_json_parser_generic_json@@Base+0x1bc>
   29158:	cmp	r5, r4
   2915c:	beq	2916c <flatcc_json_parser_generic_json@@Base+0x204>
   29160:	ldrb	r3, [r4]
   29164:	cmp	r3, #34	; 0x22
   29168:	beq	29014 <flatcc_json_parser_generic_json@@Base+0xac>
   2916c:	mov	r3, #20
   29170:	mov	r2, r5
   29174:	mov	r1, r4
   29178:	mov	r0, r8
   2917c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29180:	b	2908c <flatcc_json_parser_generic_json@@Base+0x124>
   29184:	mov	r0, r4
   29188:	b	2908c <flatcc_json_parser_generic_json@@Base+0x124>
   2918c:	ldrb	r3, [r0, #1]
   29190:	cmp	r3, #32
   29194:	addhi	r0, r0, #1
   29198:	bls	290b0 <flatcc_json_parser_generic_json@@Base+0x148>
   2919c:	b	290c0 <flatcc_json_parser_generic_json@@Base+0x158>
   291a0:	mov	r3, #10
   291a4:	mov	r2, r5
   291a8:	mov	r1, r0
   291ac:	mov	r0, r8
   291b0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   291b4:	b	29938 <flatcc_json_parser_generic_json@@Base+0x9d0>
   291b8:	mov	r3, #4
   291bc:	mov	r2, r5
   291c0:	mov	r1, r0
   291c4:	mov	r0, r8
   291c8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   291cc:	b	29938 <flatcc_json_parser_generic_json@@Base+0x9d0>
   291d0:	ldrb	r3, [r0, #2]
   291d4:	cmp	r3, #32
   291d8:	addhi	r4, r0, #2
   291dc:	bls	290f4 <flatcc_json_parser_generic_json@@Base+0x18c>
   291e0:	b	29838 <flatcc_json_parser_generic_json@@Base+0x8d0>
   291e4:	cmp	r3, #91	; 0x5b
   291e8:	beq	294bc <flatcc_json_parser_generic_json@@Base+0x554>
   291ec:	cmp	r3, #123	; 0x7b
   291f0:	bne	2985c <flatcc_json_parser_generic_json@@Base+0x8f4>
   291f4:	add	r3, sp, #520	; 0x208
   291f8:	cmp	r6, r3
   291fc:	beq	29558 <flatcc_json_parser_generic_json@@Base+0x5f0>
   29200:	add	r9, r6, #1
   29204:	strb	fp, [r6]
   29208:	add	r1, r4, #1
   2920c:	sub	r3, r5, r1
   29210:	cmp	r3, #1
   29214:	ble	2922c <flatcc_json_parser_generic_json@@Base+0x2c4>
   29218:	ldrb	r3, [r4, #1]
   2921c:	cmp	r3, #32
   29220:	movhi	r4, r1
   29224:	bhi	2923c <flatcc_json_parser_generic_json@@Base+0x2d4>
   29228:	beq	29570 <flatcc_json_parser_generic_json@@Base+0x608>
   2922c:	mov	r2, r5
   29230:	mov	r0, r8
   29234:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   29238:	mov	r4, r0
   2923c:	cmp	r5, r4
   29240:	beq	29948 <flatcc_json_parser_generic_json@@Base+0x9e0>
   29244:	ldrb	r3, [r4]
   29248:	cmp	r3, #125	; 0x7d
   2924c:	movne	r6, r9
   29250:	bne	29824 <flatcc_json_parser_generic_json@@Base+0x8bc>
   29254:	mov	r6, r9
   29258:	mov	r0, r4
   2925c:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29260:	cmp	r5, r4
   29264:	addne	r0, r4, #1
   29268:	bne	29280 <flatcc_json_parser_generic_json@@Base+0x318>
   2926c:	mov	r3, #16
   29270:	mov	r2, r4
   29274:	mov	r1, r5
   29278:	mov	r0, r8
   2927c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29280:	cmp	r5, r0
   29284:	beq	29a10 <flatcc_json_parser_generic_json@@Base+0xaa8>
   29288:	ldrb	r3, [r0]
   2928c:	cmp	r3, #34	; 0x22
   29290:	bne	292c0 <flatcc_json_parser_generic_json@@Base+0x358>
   29294:	b	292e4 <flatcc_json_parser_generic_json@@Base+0x37c>
   29298:	add	r3, sp, #4
   2929c:	mov	r2, r5
   292a0:	mov	r1, r0
   292a4:	mov	r0, r8
   292a8:	bl	28520 <flatcc_json_parser_string_escape@@Base>
   292ac:	cmp	r5, r0
   292b0:	beq	29a0c <flatcc_json_parser_generic_json@@Base+0xaa4>
   292b4:	ldrb	r3, [r0]
   292b8:	cmp	r3, #34	; 0x22
   292bc:	beq	292e4 <flatcc_json_parser_generic_json@@Base+0x37c>
   292c0:	mov	r2, r5
   292c4:	mov	r1, r0
   292c8:	mov	r0, r8
   292cc:	bl	27d1c <flatcc_json_parser_string_part@@Base>
   292d0:	cmp	r5, r0
   292d4:	beq	29298 <flatcc_json_parser_generic_json@@Base+0x330>
   292d8:	ldrb	r3, [r0]
   292dc:	cmp	r3, #34	; 0x22
   292e0:	bne	29298 <flatcc_json_parser_generic_json@@Base+0x330>
   292e4:	add	r0, r0, #1
   292e8:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   292ec:	add	r4, r4, #1
   292f0:	cmp	r5, r4
   292f4:	bne	2998c <flatcc_json_parser_generic_json@@Base+0xa24>
   292f8:	mov	r3, #6
   292fc:	mov	r2, r5
   29300:	mov	r1, r4
   29304:	mov	r0, r8
   29308:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2930c:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29310:	add	r0, r4, #1
   29314:	cmp	r5, r0
   29318:	beq	29498 <flatcc_json_parser_generic_json@@Base+0x530>
   2931c:	ldrb	r3, [r0]
   29320:	cmp	r3, #46	; 0x2e
   29324:	beq	293dc <flatcc_json_parser_generic_json@@Base+0x474>
   29328:	ldrb	r3, [r0]
   2932c:	and	r3, r3, #223	; 0xdf
   29330:	cmp	r3, #69	; 0x45
   29334:	bne	29a3c <flatcc_json_parser_generic_json@@Base+0xad4>
   29338:	add	r1, r0, #1
   2933c:	cmp	r5, r1
   29340:	beq	29458 <flatcc_json_parser_generic_json@@Base+0x4f0>
   29344:	ldrb	r3, [r0, #1]
   29348:	sub	r3, r3, #43	; 0x2b
   2934c:	tst	r3, #253	; 0xfd
   29350:	bne	29360 <flatcc_json_parser_generic_json@@Base+0x3f8>
   29354:	add	r1, r0, #2
   29358:	cmp	r5, r1
   2935c:	beq	2946c <flatcc_json_parser_generic_json@@Base+0x504>
   29360:	ldrb	r3, [r1]
   29364:	sub	r3, r3, #48	; 0x30
   29368:	uxtb	r3, r3
   2936c:	cmp	r3, #9
   29370:	bhi	2946c <flatcc_json_parser_generic_json@@Base+0x504>
   29374:	add	r0, r1, #1
   29378:	cmp	r5, r0
   2937c:	beq	29498 <flatcc_json_parser_generic_json@@Base+0x530>
   29380:	ldrb	r3, [r1, #1]
   29384:	sub	r3, r3, #48	; 0x30
   29388:	uxtb	r3, r3
   2938c:	cmp	r3, #9
   29390:	bhi	29a3c <flatcc_json_parser_generic_json@@Base+0xad4>
   29394:	add	r2, r1, #2
   29398:	mov	r1, r5
   2939c:	mov	r0, r2
   293a0:	cmp	r1, r2
   293a4:	beq	29498 <flatcc_json_parser_generic_json@@Base+0x530>
   293a8:	add	r2, r2, #1
   293ac:	ldrb	r3, [r0]
   293b0:	sub	r3, r3, #48	; 0x30
   293b4:	uxtb	r3, r3
   293b8:	cmp	r3, #9
   293bc:	bls	2939c <flatcc_json_parser_generic_json@@Base+0x434>
   293c0:	b	29a3c <flatcc_json_parser_generic_json@@Base+0xad4>
   293c4:	mov	r3, #6
   293c8:	mov	r2, r5
   293cc:	mov	r1, r4
   293d0:	mov	r0, r8
   293d4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   293d8:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   293dc:	ldrb	r3, [r0, #1]
   293e0:	sub	r3, r3, #48	; 0x30
   293e4:	uxtb	r3, r3
   293e8:	cmp	r3, #9
   293ec:	bhi	29440 <flatcc_json_parser_generic_json@@Base+0x4d8>
   293f0:	add	r2, r0, #2
   293f4:	cmp	r5, r2
   293f8:	beq	29a94 <flatcc_json_parser_generic_json@@Base+0xb2c>
   293fc:	ldrb	r3, [r0, #2]
   29400:	sub	r3, r3, #48	; 0x30
   29404:	uxtb	r3, r3
   29408:	cmp	r3, #9
   2940c:	bhi	29a6c <flatcc_json_parser_generic_json@@Base+0xb04>
   29410:	add	r2, r0, #3
   29414:	mov	r1, r5
   29418:	mov	r0, r2
   2941c:	cmp	r1, r2
   29420:	beq	29a34 <flatcc_json_parser_generic_json@@Base+0xacc>
   29424:	add	r2, r2, #1
   29428:	ldrb	r3, [r0]
   2942c:	sub	r3, r3, #48	; 0x30
   29430:	uxtb	r3, r3
   29434:	cmp	r3, #9
   29438:	bls	29418 <flatcc_json_parser_generic_json@@Base+0x4b0>
   2943c:	b	29328 <flatcc_json_parser_generic_json@@Base+0x3c0>
   29440:	mov	r3, #6
   29444:	mov	r2, r5
   29448:	add	r1, r0, #1
   2944c:	mov	r0, r8
   29450:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29454:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29458:	mov	r3, #6
   2945c:	mov	r2, r5
   29460:	mov	r0, r8
   29464:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29468:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2946c:	mov	r3, #6
   29470:	mov	r2, r5
   29474:	mov	r0, r8
   29478:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2947c:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29480:	cmp	r3, #9
   29484:	bcc	29498 <flatcc_json_parser_generic_json@@Base+0x530>
   29488:	cmp	r3, #11
   2948c:	bls	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29490:	cmp	r3, #13
   29494:	beq	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29498:	mov	r3, #6
   2949c:	mov	r2, r5
   294a0:	mov	r1, r0
   294a4:	mov	r0, r8
   294a8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   294ac:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   294b0:	cmp	r3, #44	; 0x2c
   294b4:	bne	29498 <flatcc_json_parser_generic_json@@Base+0x530>
   294b8:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   294bc:	add	r3, sp, #520	; 0x208
   294c0:	cmp	r6, r3
   294c4:	beq	2952c <flatcc_json_parser_generic_json@@Base+0x5c4>
   294c8:	add	r9, r6, #1
   294cc:	mov	r3, #93	; 0x5d
   294d0:	strb	r3, [r6]
   294d4:	add	r1, r4, #1
   294d8:	sub	r3, r5, r1
   294dc:	cmp	r3, #1
   294e0:	ble	294f8 <flatcc_json_parser_generic_json@@Base+0x590>
   294e4:	ldrb	r3, [r4, #1]
   294e8:	cmp	r3, #32
   294ec:	movhi	r4, r1
   294f0:	bhi	29508 <flatcc_json_parser_generic_json@@Base+0x5a0>
   294f4:	beq	29544 <flatcc_json_parser_generic_json@@Base+0x5dc>
   294f8:	mov	r2, r5
   294fc:	mov	r0, r8
   29500:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   29504:	mov	r4, r0
   29508:	cmp	r5, r4
   2950c:	beq	29948 <flatcc_json_parser_generic_json@@Base+0x9e0>
   29510:	ldrb	r3, [r4]
   29514:	cmp	r3, #93	; 0x5d
   29518:	movne	r6, r9
   2951c:	bne	29824 <flatcc_json_parser_generic_json@@Base+0x8bc>
   29520:	mov	r6, r9
   29524:	mov	r0, r4
   29528:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   2952c:	mov	r3, #2
   29530:	mov	r2, r5
   29534:	mov	r1, r4
   29538:	mov	r0, r8
   2953c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29540:	b	29938 <flatcc_json_parser_generic_json@@Base+0x9d0>
   29544:	ldrb	r3, [r4, #2]
   29548:	cmp	r3, #32
   2954c:	addhi	r4, r4, #2
   29550:	bls	294f8 <flatcc_json_parser_generic_json@@Base+0x590>
   29554:	b	29508 <flatcc_json_parser_generic_json@@Base+0x5a0>
   29558:	mov	r3, #2
   2955c:	mov	r2, r5
   29560:	mov	r1, r4
   29564:	mov	r0, r8
   29568:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2956c:	b	29938 <flatcc_json_parser_generic_json@@Base+0x9d0>
   29570:	ldrb	r3, [r4, #2]
   29574:	cmp	r3, #32
   29578:	addhi	r4, r4, #2
   2957c:	bls	2922c <flatcc_json_parser_generic_json@@Base+0x2c4>
   29580:	b	2923c <flatcc_json_parser_generic_json@@Base+0x2d4>
   29584:	sub	r3, r5, r0
   29588:	cmp	r3, #1
   2958c:	ble	295a0 <flatcc_json_parser_generic_json@@Base+0x638>
   29590:	ldrb	r3, [r0]
   29594:	cmp	r3, #32
   29598:	bhi	295b0 <flatcc_json_parser_generic_json@@Base+0x648>
   2959c:	beq	295e4 <flatcc_json_parser_generic_json@@Base+0x67c>
   295a0:	mov	r2, r5
   295a4:	mov	r1, r0
   295a8:	mov	r0, r8
   295ac:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   295b0:	cmp	r5, r0
   295b4:	beq	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   295b8:	ldrb	r3, [r0]
   295bc:	cmp	r3, #44	; 0x2c
   295c0:	beq	29640 <flatcc_json_parser_generic_json@@Base+0x6d8>
   295c4:	cmp	r3, #93	; 0x5d
   295c8:	beq	295f8 <flatcc_json_parser_generic_json@@Base+0x690>
   295cc:	mov	r3, #9
   295d0:	mov	r2, r5
   295d4:	mov	r1, r0
   295d8:	mov	r0, r8
   295dc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   295e0:	b	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   295e4:	ldrb	r3, [r0, #1]
   295e8:	cmp	r3, #32
   295ec:	addhi	r0, r0, #1
   295f0:	bls	295a0 <flatcc_json_parser_generic_json@@Base+0x638>
   295f4:	b	295b0 <flatcc_json_parser_generic_json@@Base+0x648>
   295f8:	add	r1, r0, #1
   295fc:	sub	r3, r5, r1
   29600:	cmp	r3, #1
   29604:	ble	2961c <flatcc_json_parser_generic_json@@Base+0x6b4>
   29608:	ldrb	r3, [r0, #1]
   2960c:	cmp	r3, #32
   29610:	movhi	r0, r1
   29614:	bhi	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   29618:	beq	2962c <flatcc_json_parser_generic_json@@Base+0x6c4>
   2961c:	mov	r2, r5
   29620:	mov	r0, r8
   29624:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   29628:	b	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   2962c:	ldrb	r3, [r0, #2]
   29630:	cmp	r3, #32
   29634:	addhi	r0, r0, #2
   29638:	bls	2961c <flatcc_json_parser_generic_json@@Base+0x6b4>
   2963c:	b	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   29640:	add	r1, r0, #1
   29644:	sub	r3, r5, r1
   29648:	cmp	r3, #1
   2964c:	ble	29660 <flatcc_json_parser_generic_json@@Base+0x6f8>
   29650:	ldrb	r3, [r0, #1]
   29654:	cmp	r3, #32
   29658:	bhi	29670 <flatcc_json_parser_generic_json@@Base+0x708>
   2965c:	beq	2968c <flatcc_json_parser_generic_json@@Base+0x724>
   29660:	mov	r2, r5
   29664:	mov	r0, r8
   29668:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   2966c:	mov	r1, r0
   29670:	cmp	r5, r1
   29674:	beq	296a0 <flatcc_json_parser_generic_json@@Base+0x738>
   29678:	ldrb	r3, [r1]
   2967c:	cmp	r3, #93	; 0x5d
   29680:	beq	296b4 <flatcc_json_parser_generic_json@@Base+0x74c>
   29684:	mov	r4, r1
   29688:	b	29824 <flatcc_json_parser_generic_json@@Base+0x8bc>
   2968c:	ldrb	r3, [r0, #2]
   29690:	cmp	r3, #32
   29694:	addhi	r1, r0, #2
   29698:	bls	29660 <flatcc_json_parser_generic_json@@Base+0x6f8>
   2969c:	b	29670 <flatcc_json_parser_generic_json@@Base+0x708>
   296a0:	mov	r3, #9
   296a4:	mov	r2, r5
   296a8:	mov	r0, r8
   296ac:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   296b0:	b	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   296b4:	add	r0, r1, #1
   296b8:	sub	r3, r5, r0
   296bc:	cmp	r3, #1
   296c0:	ble	296d4 <flatcc_json_parser_generic_json@@Base+0x76c>
   296c4:	ldrb	r3, [r1, #1]
   296c8:	cmp	r3, #32
   296cc:	bhi	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   296d0:	beq	296e8 <flatcc_json_parser_generic_json@@Base+0x780>
   296d4:	mov	r2, r5
   296d8:	mov	r1, r0
   296dc:	mov	r0, r8
   296e0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   296e4:	b	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   296e8:	ldrb	r3, [r1, #2]
   296ec:	cmp	r3, #32
   296f0:	addhi	r0, r1, #2
   296f4:	bls	296d4 <flatcc_json_parser_generic_json@@Base+0x76c>
   296f8:	b	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   296fc:	mov	r2, r5
   29700:	mov	r1, r0
   29704:	mov	r0, r8
   29708:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   2970c:	cmp	r5, r0
   29710:	beq	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   29714:	ldrb	r3, [r0]
   29718:	cmp	r3, #44	; 0x2c
   2971c:	beq	297dc <flatcc_json_parser_generic_json@@Base+0x874>
   29720:	cmp	r3, #125	; 0x7d
   29724:	beq	29794 <flatcc_json_parser_generic_json@@Base+0x82c>
   29728:	mov	r3, sl
   2972c:	mov	r2, r5
   29730:	mov	r1, r0
   29734:	mov	r0, r8
   29738:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2973c:	mov	r6, r9
   29740:	subs	r3, r6, r7
   29744:	movne	r3, #1
   29748:	cmp	r0, r5
   2974c:	cmpne	r6, r7
   29750:	beq	29904 <flatcc_json_parser_generic_json@@Base+0x99c>
   29754:	sub	r9, r6, #1
   29758:	ldrb	r3, [r6, #-1]
   2975c:	cmp	r3, #93	; 0x5d
   29760:	beq	29584 <flatcc_json_parser_generic_json@@Base+0x61c>
   29764:	sub	r3, r5, r0
   29768:	cmp	r3, #1
   2976c:	ble	296fc <flatcc_json_parser_generic_json@@Base+0x794>
   29770:	ldrb	r3, [r0]
   29774:	cmp	r3, #32
   29778:	bhi	2970c <flatcc_json_parser_generic_json@@Base+0x7a4>
   2977c:	bne	296fc <flatcc_json_parser_generic_json@@Base+0x794>
   29780:	ldrb	r3, [r0, #1]
   29784:	cmp	r3, #32
   29788:	addhi	r0, r0, #1
   2978c:	bls	296fc <flatcc_json_parser_generic_json@@Base+0x794>
   29790:	b	2970c <flatcc_json_parser_generic_json@@Base+0x7a4>
   29794:	add	r1, r0, #1
   29798:	sub	r3, r5, r1
   2979c:	cmp	r3, #1
   297a0:	ble	297b8 <flatcc_json_parser_generic_json@@Base+0x850>
   297a4:	ldrb	r3, [r0, #1]
   297a8:	cmp	r3, #32
   297ac:	movhi	r0, r1
   297b0:	bhi	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   297b4:	beq	297c8 <flatcc_json_parser_generic_json@@Base+0x860>
   297b8:	mov	r2, r5
   297bc:	mov	r0, r8
   297c0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   297c4:	b	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   297c8:	ldrb	r3, [r0, #2]
   297cc:	cmp	r3, #32
   297d0:	addhi	r0, r0, #2
   297d4:	bls	297b8 <flatcc_json_parser_generic_json@@Base+0x850>
   297d8:	b	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   297dc:	add	r1, r0, #1
   297e0:	sub	r3, r5, r1
   297e4:	cmp	r3, #1
   297e8:	ble	297fc <flatcc_json_parser_generic_json@@Base+0x894>
   297ec:	ldrb	r3, [r0, #1]
   297f0:	cmp	r3, #32
   297f4:	bhi	2980c <flatcc_json_parser_generic_json@@Base+0x8a4>
   297f8:	beq	2988c <flatcc_json_parser_generic_json@@Base+0x924>
   297fc:	mov	r2, r5
   29800:	mov	r0, r8
   29804:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   29808:	mov	r1, r0
   2980c:	cmp	r5, r1
   29810:	beq	298a0 <flatcc_json_parser_generic_json@@Base+0x938>
   29814:	ldrb	r3, [r1]
   29818:	cmp	r3, #125	; 0x7d
   2981c:	beq	298b4 <flatcc_json_parser_generic_json@@Base+0x94c>
   29820:	mov	r4, r1
   29824:	cmp	r6, r7
   29828:	beq	29958 <flatcc_json_parser_generic_json@@Base+0x9f0>
   2982c:	ldrb	r3, [r6, #-1]
   29830:	cmp	r3, #125	; 0x7d
   29834:	beq	28f98 <flatcc_json_parser_generic_json@@Base+0x30>
   29838:	ldrb	r3, [r4]
   2983c:	cmp	r3, #57	; 0x39
   29840:	bhi	291e4 <flatcc_json_parser_generic_json@@Base+0x27c>
   29844:	cmp	r3, #48	; 0x30
   29848:	bcs	2997c <flatcc_json_parser_generic_json@@Base+0xa14>
   2984c:	cmp	r3, #34	; 0x22
   29850:	beq	29260 <flatcc_json_parser_generic_json@@Base+0x2f8>
   29854:	cmp	r3, #45	; 0x2d
   29858:	beq	2997c <flatcc_json_parser_generic_json@@Base+0xa14>
   2985c:	mov	r2, r5
   29860:	mov	r1, r4
   29864:	mov	r0, r8
   29868:	bl	28a60 <flatcc_json_parser_skip_constant@@Base>
   2986c:	cmp	r0, r4
   29870:	bne	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29874:	mov	r3, #5
   29878:	mov	r2, r5
   2987c:	mov	r1, r0
   29880:	mov	r0, r8
   29884:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29888:	b	29938 <flatcc_json_parser_generic_json@@Base+0x9d0>
   2988c:	ldrb	r3, [r0, #2]
   29890:	cmp	r3, #32
   29894:	addhi	r1, r0, #2
   29898:	bls	297fc <flatcc_json_parser_generic_json@@Base+0x894>
   2989c:	b	2980c <flatcc_json_parser_generic_json@@Base+0x8a4>
   298a0:	mov	r3, sl
   298a4:	mov	r2, r5
   298a8:	mov	r0, r8
   298ac:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   298b0:	b	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   298b4:	add	r0, r1, #1
   298b8:	sub	r3, r5, r0
   298bc:	cmp	r3, #1
   298c0:	ble	298d4 <flatcc_json_parser_generic_json@@Base+0x96c>
   298c4:	ldrb	r3, [r1, #1]
   298c8:	cmp	r3, #32
   298cc:	bhi	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   298d0:	beq	298e8 <flatcc_json_parser_generic_json@@Base+0x980>
   298d4:	mov	r2, r5
   298d8:	mov	r1, r0
   298dc:	mov	r0, r8
   298e0:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   298e4:	b	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   298e8:	ldrb	r3, [r1, #2]
   298ec:	cmp	r3, #32
   298f0:	addhi	r0, r1, #2
   298f4:	bls	298d4 <flatcc_json_parser_generic_json@@Base+0x96c>
   298f8:	b	2973c <flatcc_json_parser_generic_json@@Base+0x7d4>
   298fc:	mov	r0, r4
   29900:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29904:	cmp	r0, r5
   29908:	movne	r3, #0
   2990c:	andeq	r3, r3, #1
   29910:	cmp	r3, #0
   29914:	beq	29938 <flatcc_json_parser_generic_json@@Base+0x9d0>
   29918:	ldrb	r3, [r6, #-1]
   2991c:	cmp	r3, #93	; 0x5d
   29920:	moveq	r3, #9
   29924:	movne	r3, #10
   29928:	mov	r2, r5
   2992c:	mov	r1, r0
   29930:	mov	r0, r8
   29934:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29938:	add	sp, sp, #524	; 0x20c
   2993c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29940:	mov	r0, r2
   29944:	b	29938 <flatcc_json_parser_generic_json@@Base+0x9d0>
   29948:	mov	r0, r5
   2994c:	b	29938 <flatcc_json_parser_generic_json@@Base+0x9d0>
   29950:	mov	r4, r5
   29954:	b	2916c <flatcc_json_parser_generic_json@@Base+0x204>
   29958:	ldrb	r3, [r4]
   2995c:	cmp	r3, #57	; 0x39
   29960:	bhi	299f8 <flatcc_json_parser_generic_json@@Base+0xa90>
   29964:	cmp	r3, #48	; 0x30
   29968:	bcs	2997c <flatcc_json_parser_generic_json@@Base+0xa14>
   2996c:	cmp	r3, #34	; 0x22
   29970:	beq	29260 <flatcc_json_parser_generic_json@@Base+0x2f8>
   29974:	cmp	r3, #45	; 0x2d
   29978:	bne	2985c <flatcc_json_parser_generic_json@@Base+0x8f4>
   2997c:	cmp	r5, r4
   29980:	beq	298fc <flatcc_json_parser_generic_json@@Base+0x994>
   29984:	cmp	r3, #45	; 0x2d
   29988:	beq	292ec <flatcc_json_parser_generic_json@@Base+0x384>
   2998c:	ldrb	r3, [r4]
   29990:	cmp	r3, #48	; 0x30
   29994:	beq	29310 <flatcc_json_parser_generic_json@@Base+0x3a8>
   29998:	sub	r3, r3, #49	; 0x31
   2999c:	uxtb	r3, r3
   299a0:	cmp	r3, #8
   299a4:	bhi	293c4 <flatcc_json_parser_generic_json@@Base+0x45c>
   299a8:	add	r0, r4, #1
   299ac:	cmp	r5, r0
   299b0:	beq	29498 <flatcc_json_parser_generic_json@@Base+0x530>
   299b4:	ldrb	r3, [r4, #1]
   299b8:	sub	r3, r3, #48	; 0x30
   299bc:	uxtb	r3, r3
   299c0:	cmp	r3, #9
   299c4:	bhi	2931c <flatcc_json_parser_generic_json@@Base+0x3b4>
   299c8:	add	r4, r4, #2
   299cc:	mov	r2, r5
   299d0:	mov	r0, r4
   299d4:	cmp	r4, r2
   299d8:	beq	29a28 <flatcc_json_parser_generic_json@@Base+0xac0>
   299dc:	add	r4, r4, #1
   299e0:	ldrb	r3, [r0]
   299e4:	sub	r3, r3, #48	; 0x30
   299e8:	uxtb	r3, r3
   299ec:	cmp	r3, #9
   299f0:	bls	299d0 <flatcc_json_parser_generic_json@@Base+0xa68>
   299f4:	b	2931c <flatcc_json_parser_generic_json@@Base+0x3b4>
   299f8:	cmp	r3, #91	; 0x5b
   299fc:	beq	294c8 <flatcc_json_parser_generic_json@@Base+0x560>
   29a00:	cmp	r3, #123	; 0x7b
   29a04:	beq	291f4 <flatcc_json_parser_generic_json@@Base+0x28c>
   29a08:	b	2985c <flatcc_json_parser_generic_json@@Base+0x8f4>
   29a0c:	mov	r0, r5
   29a10:	mov	r3, #20
   29a14:	mov	r2, r5
   29a18:	mov	r1, r0
   29a1c:	mov	r0, r8
   29a20:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29a24:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29a28:	cmp	r5, r4
   29a2c:	bne	29328 <flatcc_json_parser_generic_json@@Base+0x3c0>
   29a30:	b	29498 <flatcc_json_parser_generic_json@@Base+0x530>
   29a34:	cmp	r5, r2
   29a38:	beq	29498 <flatcc_json_parser_generic_json@@Base+0x530>
   29a3c:	ldrb	r3, [r0]
   29a40:	cmp	r3, #32
   29a44:	beq	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29a48:	bls	29480 <flatcc_json_parser_generic_json@@Base+0x518>
   29a4c:	cmp	r3, #58	; 0x3a
   29a50:	beq	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29a54:	bls	294b0 <flatcc_json_parser_generic_json@@Base+0x548>
   29a58:	cmp	r3, #93	; 0x5d
   29a5c:	beq	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29a60:	cmp	r3, #125	; 0x7d
   29a64:	bne	29498 <flatcc_json_parser_generic_json@@Base+0x530>
   29a68:	b	29740 <flatcc_json_parser_generic_json@@Base+0x7d8>
   29a6c:	mov	r0, r2
   29a70:	b	29328 <flatcc_json_parser_generic_json@@Base+0x3c0>
   29a74:	mov	r9, r5
   29a78:	sub	r3, r5, r4
   29a7c:	cmp	r3, #1
   29a80:	movle	r0, r4
   29a84:	ble	290b0 <flatcc_json_parser_generic_json@@Base+0x148>
   29a88:	ldrb	r3, [r4]
   29a8c:	mov	r0, r4
   29a90:	b	290a8 <flatcc_json_parser_generic_json@@Base+0x140>
   29a94:	mov	r0, r2
   29a98:	b	29498 <flatcc_json_parser_generic_json@@Base+0x530>

00029a9c <flatcc_json_parser_unmatched_symbol@@Base>:
   29a9c:	push	{r4, r5, r6, lr}
   29aa0:	mov	r5, r0
   29aa4:	mov	r4, r2
   29aa8:	ldr	r3, [r0, #8]
   29aac:	tst	r3, #1
   29ab0:	beq	29cc0 <flatcc_json_parser_unmatched_symbol@@Base+0x224>
   29ab4:	ldr	r3, [r0, #12]
   29ab8:	cmp	r3, #0
   29abc:	bne	29adc <flatcc_json_parser_unmatched_symbol@@Base+0x40>
   29ac0:	cmp	r1, r2
   29ac4:	beq	29c3c <flatcc_json_parser_unmatched_symbol@@Base+0x1a0>
   29ac8:	ldrb	r3, [r1]
   29acc:	cmp	r3, #34	; 0x22
   29ad0:	bne	29bf4 <flatcc_json_parser_unmatched_symbol@@Base+0x158>
   29ad4:	add	r1, r1, #1
   29ad8:	b	29b68 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   29adc:	cmp	r1, r2
   29ae0:	beq	29c4c <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   29ae4:	ldrb	r3, [r1]
   29ae8:	cmp	r3, #32
   29aec:	bls	29ccc <flatcc_json_parser_unmatched_symbol@@Base+0x230>
   29af0:	add	r2, r1, #1
   29af4:	b	29b18 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   29af8:	mov	r1, r2
   29afc:	cmp	r4, r1
   29b00:	beq	29b5c <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   29b04:	ldrb	r0, [r1]
   29b08:	add	r2, r2, #1
   29b0c:	cmp	r0, #32
   29b10:	bls	29b60 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   29b14:	mov	r3, r0
   29b18:	sub	r1, r2, #1
   29b1c:	cmp	r3, #46	; 0x2e
   29b20:	cmpne	r3, #95	; 0x5f
   29b24:	beq	29af8 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   29b28:	tst	r3, #128	; 0x80
   29b2c:	bne	29af8 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   29b30:	sub	r0, r3, #48	; 0x30
   29b34:	uxtb	r0, r0
   29b38:	cmp	r0, #9
   29b3c:	bls	29af8 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   29b40:	orr	r0, r3, #32
   29b44:	sub	r0, r0, #97	; 0x61
   29b48:	uxtb	r0, r0
   29b4c:	cmp	r0, #25
   29b50:	bhi	29b60 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   29b54:	mov	r1, r2
   29b58:	b	29afc <flatcc_json_parser_unmatched_symbol@@Base+0x60>
   29b5c:	mov	r1, r4
   29b60:	cmp	r3, #46	; 0x2e
   29b64:	beq	29bc4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   29b68:	mov	r6, r4
   29b6c:	sub	r3, r4, r1
   29b70:	cmp	r3, #1
   29b74:	ble	29b8c <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   29b78:	ldrb	r3, [r1]
   29b7c:	cmp	r3, #32
   29b80:	bhi	29b9c <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   29b84:	cmp	r3, #32
   29b88:	beq	29c54 <flatcc_json_parser_unmatched_symbol@@Base+0x1b8>
   29b8c:	mov	r2, r4
   29b90:	mov	r0, r5
   29b94:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   29b98:	mov	r1, r0
   29b9c:	cmp	r4, r1
   29ba0:	beq	29bb0 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   29ba4:	ldrb	r3, [r1]
   29ba8:	cmp	r3, #58	; 0x3a
   29bac:	beq	29c68 <flatcc_json_parser_unmatched_symbol@@Base+0x1cc>
   29bb0:	mov	r3, #4
   29bb4:	mov	r2, r4
   29bb8:	mov	r0, r5
   29bbc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29bc0:	pop	{r4, r5, r6, pc}
   29bc4:	mov	r3, #5
   29bc8:	mov	r2, r4
   29bcc:	mov	r0, r5
   29bd0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29bd4:	mov	r1, r0
   29bd8:	b	29b68 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   29bdc:	add	r1, r3, #1
   29be0:	cmp	r4, r1
   29be4:	beq	29c44 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   29be8:	ldrb	r3, [r3, #1]
   29bec:	cmp	r3, #34	; 0x22
   29bf0:	beq	29c18 <flatcc_json_parser_unmatched_symbol@@Base+0x17c>
   29bf4:	cmp	r3, #92	; 0x5c
   29bf8:	movne	r3, r1
   29bfc:	bne	29bdc <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   29c00:	sub	r3, r4, r1
   29c04:	cmp	r3, #1
   29c08:	addgt	r3, r1, #1
   29c0c:	bgt	29bdc <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   29c10:	cmp	r4, r1
   29c14:	beq	29c24 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
   29c18:	ldrb	r3, [r1]
   29c1c:	cmp	r3, #34	; 0x22
   29c20:	beq	29ad4 <flatcc_json_parser_unmatched_symbol@@Base+0x38>
   29c24:	mov	r3, #20
   29c28:	mov	r2, r4
   29c2c:	mov	r0, r5
   29c30:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29c34:	mov	r1, r0
   29c38:	b	29b68 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   29c3c:	mov	r1, r2
   29c40:	b	29c24 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
   29c44:	mov	r1, r4
   29c48:	b	29c24 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
   29c4c:	mov	r1, r2
   29c50:	b	29b68 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   29c54:	ldrb	r3, [r1, #1]
   29c58:	cmp	r3, #32
   29c5c:	addhi	r1, r1, #1
   29c60:	bls	29b8c <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   29c64:	b	29b9c <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   29c68:	add	r0, r1, #1
   29c6c:	sub	r6, r6, r0
   29c70:	cmp	r6, #1
   29c74:	ble	29c88 <flatcc_json_parser_unmatched_symbol@@Base+0x1ec>
   29c78:	ldrb	r3, [r1, #1]
   29c7c:	cmp	r3, #32
   29c80:	bhi	29c98 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   29c84:	beq	29cac <flatcc_json_parser_unmatched_symbol@@Base+0x210>
   29c88:	mov	r2, r4
   29c8c:	mov	r1, r0
   29c90:	mov	r0, r5
   29c94:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   29c98:	mov	r2, r4
   29c9c:	mov	r1, r0
   29ca0:	mov	r0, r5
   29ca4:	bl	28f68 <flatcc_json_parser_generic_json@@Base>
   29ca8:	pop	{r4, r5, r6, pc}
   29cac:	ldrb	r3, [r1, #2]
   29cb0:	cmp	r3, #32
   29cb4:	addhi	r0, r1, #2
   29cb8:	bls	29c88 <flatcc_json_parser_unmatched_symbol@@Base+0x1ec>
   29cbc:	b	29c98 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   29cc0:	mov	r3, #13
   29cc4:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29cc8:	pop	{r4, r5, r6, pc}
   29ccc:	mov	r6, r2
   29cd0:	sub	r3, r2, r1
   29cd4:	cmp	r3, #1
   29cd8:	ldrbgt	r3, [r1]
   29cdc:	bgt	29b84 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   29ce0:	b	29b8c <flatcc_json_parser_unmatched_symbol@@Base+0xf0>

00029ce4 <flatcc_json_parser_integer@@Base>:
   29ce4:	cmp	r1, r2
   29ce8:	beq	29e38 <flatcc_json_parser_integer@@Base+0x154>
   29cec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29cf0:	sub	sp, sp, #12
   29cf4:	mov	r8, r1
   29cf8:	ldrb	ip, [r1]
   29cfc:	cmp	ip, #45	; 0x2d
   29d00:	movne	ip, #0
   29d04:	moveq	ip, #1
   29d08:	str	ip, [r3]
   29d0c:	add	r1, r1, ip
   29d10:	cmp	r2, r1
   29d14:	beq	29e24 <flatcc_json_parser_integer@@Base+0x140>
   29d18:	mov	fp, r3
   29d1c:	mov	sl, r2
   29d20:	mov	r9, r8
   29d24:	str	r0, [sp, #4]
   29d28:	ldrb	r6, [r8, ip]
   29d2c:	sub	r3, r6, #48	; 0x30
   29d30:	uxtb	r3, r3
   29d34:	cmp	r3, #9
   29d38:	bhi	29dec <flatcc_json_parser_integer@@Base+0x108>
   29d3c:	uxtb	r6, r6
   29d40:	mov	r7, #0
   29d44:	subs	r6, r6, #48	; 0x30
   29d48:	sbc	r7, r7, #0
   29d4c:	add	ip, r1, #1
   29d50:	mov	lr, r2
   29d54:	mov	r0, #10
   29d58:	mov	r1, ip
   29d5c:	cmp	ip, lr
   29d60:	beq	29e2c <flatcc_json_parser_integer@@Base+0x148>
   29d64:	ldrb	r2, [ip], #1
   29d68:	sub	r3, r2, #48	; 0x30
   29d6c:	uxtb	r3, r3
   29d70:	cmp	r3, #9
   29d74:	bhi	29df4 <flatcc_json_parser_integer@@Base+0x110>
   29d78:	umull	r4, r5, r6, r0
   29d7c:	mla	r5, r0, r7, r5
   29d80:	subs	r4, r4, #48	; 0x30
   29d84:	sbc	r5, r5, #0
   29d88:	uxtb	r2, r2
   29d8c:	mov	r3, #0
   29d90:	adds	r2, r2, r4
   29d94:	adc	r3, r3, r5
   29d98:	cmp	r3, r7
   29d9c:	cmpeq	r2, r6
   29da0:	movcs	r6, r2
   29da4:	movcs	r7, r3
   29da8:	bcs	29d58 <flatcc_json_parser_integer@@Base+0x74>
   29dac:	cmp	fp, #0
   29db0:	movne	r3, #8
   29db4:	moveq	r3, #7
   29db8:	mov	r2, sl
   29dbc:	ldr	r0, [sp, #4]
   29dc0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29dc4:	mov	r1, r0
   29dc8:	b	29e18 <flatcc_json_parser_integer@@Base+0x134>
   29dcc:	mov	r3, #12
   29dd0:	mov	r2, sl
   29dd4:	ldr	r0, [sp, #4]
   29dd8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29ddc:	mov	r1, r0
   29de0:	b	29e18 <flatcc_json_parser_integer@@Base+0x134>
   29de4:	mov	r1, r9
   29de8:	b	29e18 <flatcc_json_parser_integer@@Base+0x134>
   29dec:	mov	r6, #0
   29df0:	mov	r7, #0
   29df4:	cmp	r1, r9
   29df8:	beq	29de4 <flatcc_json_parser_integer@@Base+0x100>
   29dfc:	ldrb	r3, [r1]
   29e00:	and	r2, r3, #223	; 0xdf
   29e04:	cmp	r3, #46	; 0x2e
   29e08:	cmpne	r2, #69	; 0x45
   29e0c:	beq	29dcc <flatcc_json_parser_integer@@Base+0xe8>
   29e10:	ldr	r3, [sp, #48]	; 0x30
   29e14:	strd	r6, [r3]
   29e18:	mov	r0, r1
   29e1c:	add	sp, sp, #12
   29e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e24:	mov	r6, #0
   29e28:	mov	r7, #0
   29e2c:	cmp	r8, r1
   29e30:	beq	29e18 <flatcc_json_parser_integer@@Base+0x134>
   29e34:	b	29e10 <flatcc_json_parser_integer@@Base+0x12c>
   29e38:	mov	r0, r2
   29e3c:	bx	lr

00029e40 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   29e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e44:	sub	sp, sp, #28
   29e48:	mov	r7, r0
   29e4c:	mov	r6, r2
   29e50:	mov	r8, r3
   29e54:	cmp	r1, r2
   29e58:	beq	29e6c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c>
   29e5c:	ldrb	r3, [r1]
   29e60:	cmp	r3, #34	; 0x22
   29e64:	addeq	r4, r1, #1
   29e68:	beq	29e80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   29e6c:	mov	r3, #16
   29e70:	mov	r2, r6
   29e74:	mov	r0, r7
   29e78:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29e7c:	mov	r4, r0
   29e80:	mov	r2, r6
   29e84:	mov	r1, r4
   29e88:	mov	r0, r7
   29e8c:	bl	27d1c <flatcc_json_parser_string_part@@Base>
   29e90:	mov	r5, r0
   29e94:	cmp	r6, r0
   29e98:	beq	29ea8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   29e9c:	ldrb	r3, [r0]
   29ea0:	cmp	r3, #34	; 0x22
   29ea4:	beq	29ed8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x98>
   29ea8:	mov	r3, #0
   29eac:	str	r3, [r8]
   29eb0:	ldr	r3, [sp, #64]	; 0x40
   29eb4:	cmp	r3, #0
   29eb8:	movne	r3, #32
   29ebc:	moveq	r3, #31
   29ec0:	mov	r2, r6
   29ec4:	mov	r1, r5
   29ec8:	mov	r0, r7
   29ecc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   29ed0:	add	sp, sp, #28
   29ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ed8:	sub	sl, r0, r4
   29edc:	lsr	r9, sl, #2
   29ee0:	add	r9, r9, r9, lsl #1
   29ee4:	and	r3, sl, #3
   29ee8:	cmp	r3, #2
   29eec:	addeq	r9, r9, #1
   29ef0:	beq	29efc <flatcc_json_parser_build_uint8_vector_base64@@Base+0xbc>
   29ef4:	cmp	r3, #3
   29ef8:	addeq	r9, r9, #2
   29efc:	mvn	r3, #0
   29f00:	mov	r2, #1
   29f04:	mov	r1, r2
   29f08:	ldr	r0, [r7]
   29f0c:	bl	23e94 <flatcc_builder_start_vector@@Base>
   29f10:	cmp	r0, #0
   29f14:	bne	2a1ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   29f18:	mov	r1, r9
   29f1c:	ldr	r0, [r7]
   29f20:	bl	2368c <flatcc_builder_extend_vector@@Base>
   29f24:	cmp	r0, #0
   29f28:	beq	2a1ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   29f2c:	ldr	r3, [sp, #64]	; 0x40
   29f30:	adds	r3, r3, #0
   29f34:	movne	r3, #1
   29f38:	cmp	r3, #0
   29f3c:	beq	29f80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   29f40:	cmp	r3, #1
   29f44:	bne	2a0e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a8>
   29f48:	ldr	lr, [pc, #700]	; 2a20c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3cc>
   29f4c:	cmp	r9, #0
   29f50:	movne	r3, r9
   29f54:	mvneq	r3, #0
   29f58:	str	r3, [sp, #12]
   29f5c:	str	r0, [sp, #8]
   29f60:	str	sl, [sp, #4]
   29f64:	mov	r1, r4
   29f68:	ldr	r3, [sp, #4]
   29f6c:	cmp	r3, #0
   29f70:	beq	29f88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x148>
   29f74:	mov	ip, r3
   29f78:	mov	r2, #0
   29f7c:	b	29fc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x188>
   29f80:	ldr	lr, [pc, #648]	; 2a210 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d0>
   29f84:	b	29f4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   29f88:	ldr	r2, [sp, #4]
   29f8c:	cmp	r2, #2
   29f90:	beq	2a0f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b4>
   29f94:	cmp	r2, #3
   29f98:	beq	2a19c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x35c>
   29f9c:	cmp	r2, #0
   29fa0:	bne	2a014 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d4>
   29fa4:	b	2a13c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   29fa8:	add	r1, r1, #1
   29fac:	sub	ip, ip, #1
   29fb0:	sub	r2, r2, #1
   29fb4:	add	r2, r2, #1
   29fb8:	cmp	r2, #3
   29fbc:	bhi	2a078 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x238>
   29fc0:	cmp	r2, ip
   29fc4:	beq	29f8c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   29fc8:	ldrb	r3, [r1, r2]
   29fcc:	ldrb	r3, [lr, r3]
   29fd0:	add	fp, sp, #24
   29fd4:	add	fp, fp, r2
   29fd8:	strb	r3, [fp, #-4]
   29fdc:	cmp	r3, #63	; 0x3f
   29fe0:	bls	29fb4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   29fe4:	cmp	r3, #65	; 0x41
   29fe8:	beq	29fa8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   29fec:	cmp	r3, #66	; 0x42
   29ff0:	movne	r3, r2
   29ff4:	beq	2a020 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e0>
   29ff8:	sub	r3, ip, r3
   29ffc:	cmp	r2, #2
   2a000:	beq	2a0f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   2a004:	cmp	r2, #3
   2a008:	beq	2a1a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   2a00c:	cmp	r2, #0
   2a010:	beq	2a12c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   2a014:	ldr	r3, [sp, #4]
   2a018:	sub	r5, sl, r3
   2a01c:	b	2a0ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ac>
   2a020:	add	r3, r2, #1
   2a024:	cmp	r3, #7
   2a028:	cmpls	r3, ip
   2a02c:	bcs	29ff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2a030:	add	fp, r1, r3
   2a034:	ldrb	r1, [r1, r3]
   2a038:	ldrb	r1, [lr, r1]
   2a03c:	sub	r1, r1, #65	; 0x41
   2a040:	uxtb	r1, r1
   2a044:	cmp	r1, #1
   2a048:	bhi	29ff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2a04c:	add	r3, r3, #1
   2a050:	cmp	r3, #7
   2a054:	cmpls	r3, ip
   2a058:	bcs	29ff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2a05c:	ldrb	r1, [fp, #1]!
   2a060:	ldrb	r1, [lr, r1]
   2a064:	sub	r1, r1, #65	; 0x41
   2a068:	uxtb	r1, r1
   2a06c:	cmp	r1, #1
   2a070:	bls	2a04c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   2a074:	b	29ff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2a078:	ldr	r3, [sp, #12]
   2a07c:	cmp	r3, #2
   2a080:	bls	2a108 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   2a084:	ldrb	fp, [sp, #21]
   2a088:	ldrb	r2, [sp, #20]
   2a08c:	lsr	r3, fp, #4
   2a090:	orr	r3, r3, r2, lsl #2
   2a094:	ldr	r2, [sp, #8]
   2a098:	strb	r3, [r2]
   2a09c:	ldrb	r2, [sp, #22]
   2a0a0:	lsr	r3, r2, #2
   2a0a4:	orr	r3, r3, fp, lsl #4
   2a0a8:	ldr	fp, [sp, #8]
   2a0ac:	strb	r3, [fp, #1]
   2a0b0:	ldrb	r3, [sp, #23]
   2a0b4:	orr	r3, r3, r2, lsl #6
   2a0b8:	strb	r3, [fp, #2]
   2a0bc:	add	r2, fp, #3
   2a0c0:	str	r2, [sp, #8]
   2a0c4:	add	r1, r1, #4
   2a0c8:	sub	r2, ip, #4
   2a0cc:	str	r2, [sp, #4]
   2a0d0:	ldr	r3, [sp, #12]
   2a0d4:	subs	r3, r3, #3
   2a0d8:	str	r3, [sp, #12]
   2a0dc:	bne	29f68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x128>
   2a0e0:	ldr	r3, [sp, #4]
   2a0e4:	b	2a12c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   2a0e8:	mov	r5, #0
   2a0ec:	add	r5, r4, r5
   2a0f0:	b	29ea8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   2a0f4:	mov	r3, #0
   2a0f8:	ldrb	r2, [sp, #21]
   2a0fc:	lsl	r1, r2, #4
   2a100:	tst	r1, #255	; 0xff
   2a104:	beq	2a114 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   2a108:	ldr	r3, [sp, #4]
   2a10c:	sub	r5, sl, r3
   2a110:	b	2a0ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ac>
   2a114:	ldrb	r1, [sp, #20]
   2a118:	lsr	r2, r2, #4
   2a11c:	orr	r2, r2, r1, lsl #2
   2a120:	ldr	r1, [sp, #8]
   2a124:	strb	r2, [r1], #1
   2a128:	str	r1, [sp, #8]
   2a12c:	sub	r3, sl, r3
   2a130:	cmp	sl, r3
   2a134:	addne	r5, r4, r3
   2a138:	bne	29ea8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   2a13c:	ldr	r3, [sp, #8]
   2a140:	sub	r1, r3, r0
   2a144:	cmp	r9, r1
   2a148:	bls	2a160 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
   2a14c:	sub	r1, r9, r1
   2a150:	ldr	r0, [r7]
   2a154:	bl	23cd8 <flatcc_builder_truncate_vector@@Base>
   2a158:	cmp	r0, #0
   2a15c:	bne	2a1ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   2a160:	ldr	r0, [r7]
   2a164:	bl	24ea4 <flatcc_builder_end_vector@@Base>
   2a168:	str	r0, [r8]
   2a16c:	cmp	r0, #0
   2a170:	beq	2a1ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   2a174:	ldrb	r3, [r5]
   2a178:	cmp	r3, #34	; 0x22
   2a17c:	addeq	r0, r5, #1
   2a180:	beq	29ed0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   2a184:	mov	r3, #20
   2a188:	mov	r2, r6
   2a18c:	mov	r1, r5
   2a190:	mov	r0, r7
   2a194:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a198:	b	29ed0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   2a19c:	mov	r3, #0
   2a1a0:	ldrb	r2, [sp, #22]
   2a1a4:	lsl	r1, r2, #6
   2a1a8:	tst	r1, #255	; 0xff
   2a1ac:	bne	2a108 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   2a1b0:	ldr	r1, [sp, #12]
   2a1b4:	cmp	r1, #1
   2a1b8:	bls	2a108 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   2a1bc:	ldrb	ip, [sp, #21]
   2a1c0:	ldrb	lr, [sp, #20]
   2a1c4:	lsr	r1, ip, #4
   2a1c8:	orr	r1, r1, lr, lsl #2
   2a1cc:	ldr	lr, [sp, #8]
   2a1d0:	strb	r1, [lr]
   2a1d4:	lsr	r2, r2, #2
   2a1d8:	orr	r2, r2, ip, lsl #4
   2a1dc:	strb	r2, [lr, #1]
   2a1e0:	add	r2, lr, #2
   2a1e4:	str	r2, [sp, #8]
   2a1e8:	b	2a12c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   2a1ec:	mov	r3, #0
   2a1f0:	str	r3, [r8]
   2a1f4:	mov	r3, #33	; 0x21
   2a1f8:	mov	r2, r6
   2a1fc:	mov	r1, r5
   2a200:	mov	r0, r7
   2a204:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a208:	b	29ed0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   2a20c:	muleq	r2, r0, sl
   2a210:	muleq	r2, r0, fp

0002a214 <flatcc_json_parser_build_string@@Base>:
   2a214:	push	{r4, r5, r6, r7, r8, lr}
   2a218:	sub	sp, sp, #8
   2a21c:	mov	r5, r0
   2a220:	mov	r6, r2
   2a224:	mov	r8, r3
   2a228:	cmp	r1, r2
   2a22c:	beq	2a240 <flatcc_json_parser_build_string@@Base+0x2c>
   2a230:	ldrb	r3, [r1]
   2a234:	cmp	r3, #34	; 0x22
   2a238:	addeq	r7, r1, #1
   2a23c:	beq	2a254 <flatcc_json_parser_build_string@@Base+0x40>
   2a240:	mov	r3, #16
   2a244:	mov	r2, r6
   2a248:	mov	r0, r5
   2a24c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a250:	mov	r7, r0
   2a254:	mov	r2, r6
   2a258:	mov	r1, r7
   2a25c:	mov	r0, r5
   2a260:	bl	27d1c <flatcc_json_parser_string_part@@Base>
   2a264:	mov	r4, r0
   2a268:	cmp	r6, r0
   2a26c:	beq	2a27c <flatcc_json_parser_build_string@@Base+0x68>
   2a270:	ldrb	r3, [r0]
   2a274:	cmp	r3, #34	; 0x22
   2a278:	beq	2a2a0 <flatcc_json_parser_build_string@@Base+0x8c>
   2a27c:	ldr	r0, [r5]
   2a280:	bl	23f98 <flatcc_builder_start_string@@Base>
   2a284:	cmp	r0, #0
   2a288:	beq	2a2c8 <flatcc_json_parser_build_string@@Base+0xb4>
   2a28c:	mov	r3, #0
   2a290:	str	r3, [r8]
   2a294:	mov	r0, r4
   2a298:	add	sp, sp, #8
   2a29c:	pop	{r4, r5, r6, r7, r8, pc}
   2a2a0:	sub	r2, r0, r7
   2a2a4:	mov	r1, r7
   2a2a8:	ldr	r0, [r5]
   2a2ac:	bl	258b4 <flatcc_builder_create_string@@Base>
   2a2b0:	str	r0, [r8]
   2a2b4:	ldrb	r3, [r4]
   2a2b8:	cmp	r3, #34	; 0x22
   2a2bc:	addeq	r4, r4, #1
   2a2c0:	bne	2a390 <flatcc_json_parser_build_string@@Base+0x17c>
   2a2c4:	b	2a294 <flatcc_json_parser_build_string@@Base+0x80>
   2a2c8:	sub	r2, r4, r7
   2a2cc:	mov	r1, r7
   2a2d0:	ldr	r0, [r5]
   2a2d4:	bl	23bb0 <flatcc_builder_append_string@@Base>
   2a2d8:	cmp	r0, #0
   2a2dc:	beq	2a28c <flatcc_json_parser_build_string@@Base+0x78>
   2a2e0:	cmp	r6, r4
   2a2e4:	beq	2a384 <flatcc_json_parser_build_string@@Base+0x170>
   2a2e8:	ldrb	r3, [r4]
   2a2ec:	cmp	r3, #34	; 0x22
   2a2f0:	bne	2a318 <flatcc_json_parser_build_string@@Base+0x104>
   2a2f4:	ldr	r0, [r5]
   2a2f8:	bl	25a2c <flatcc_builder_end_string@@Base>
   2a2fc:	str	r0, [r8]
   2a300:	b	2a2b4 <flatcc_json_parser_build_string@@Base+0xa0>
   2a304:	mov	r4, r7
   2a308:	b	2a28c <flatcc_json_parser_build_string@@Base+0x78>
   2a30c:	ldrb	r3, [r4]
   2a310:	cmp	r3, #34	; 0x22
   2a314:	beq	2a2f4 <flatcc_json_parser_build_string@@Base+0xe0>
   2a318:	add	r3, sp, #4
   2a31c:	mov	r2, r6
   2a320:	mov	r1, r4
   2a324:	mov	r0, r5
   2a328:	bl	28520 <flatcc_json_parser_string_escape@@Base>
   2a32c:	mov	r7, r0
   2a330:	ldrb	r2, [sp, #4]
   2a334:	add	r1, sp, #5
   2a338:	ldr	r0, [r5]
   2a33c:	bl	23bb0 <flatcc_builder_append_string@@Base>
   2a340:	cmp	r0, #0
   2a344:	beq	2a304 <flatcc_json_parser_build_string@@Base+0xf0>
   2a348:	mov	r2, r6
   2a34c:	mov	r1, r7
   2a350:	mov	r0, r5
   2a354:	bl	27d1c <flatcc_json_parser_string_part@@Base>
   2a358:	mov	r4, r0
   2a35c:	cmp	r6, r0
   2a360:	beq	2a380 <flatcc_json_parser_build_string@@Base+0x16c>
   2a364:	sub	r2, r0, r7
   2a368:	mov	r1, r7
   2a36c:	ldr	r0, [r5]
   2a370:	bl	23bb0 <flatcc_builder_append_string@@Base>
   2a374:	cmp	r0, #0
   2a378:	bne	2a30c <flatcc_json_parser_build_string@@Base+0xf8>
   2a37c:	b	2a28c <flatcc_json_parser_build_string@@Base+0x78>
   2a380:	mov	r4, r6
   2a384:	ldr	r0, [r5]
   2a388:	bl	25a2c <flatcc_builder_end_string@@Base>
   2a38c:	str	r0, [r8]
   2a390:	mov	r3, #20
   2a394:	mov	r2, r6
   2a398:	mov	r1, r4
   2a39c:	mov	r0, r5
   2a3a0:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a3a4:	mov	r4, r0
   2a3a8:	b	2a294 <flatcc_json_parser_build_string@@Base+0x80>

0002a3ac <flatcc_json_parser_prepare_unions@@Base>:
   2a3ac:	push	{r4, r5, r6, r7, r8, lr}
   2a3b0:	mov	r6, r0
   2a3b4:	mov	r4, r1
   2a3b8:	mov	r7, r2
   2a3bc:	mov	r5, r3
   2a3c0:	add	r1, r3, r3, lsl #1
   2a3c4:	lsl	r1, r1, #3
   2a3c8:	add	r1, r1, #8
   2a3cc:	ldr	r0, [r0]
   2a3d0:	bl	22cbc <flatcc_builder_enter_user_frame@@Base>
   2a3d4:	ldr	r3, [sp, #24]
   2a3d8:	str	r0, [r3]
   2a3dc:	cmp	r0, #0
   2a3e0:	beq	2a3fc <flatcc_json_parser_prepare_unions@@Base+0x50>
   2a3e4:	mov	r1, r0
   2a3e8:	ldr	r0, [r6]
   2a3ec:	bl	22e08 <flatcc_builder_get_user_frame_ptr@@Base>
   2a3f0:	str	r5, [r0]
   2a3f4:	mov	r0, r4
   2a3f8:	pop	{r4, r5, r6, r7, r8, pc}
   2a3fc:	mov	r3, #33	; 0x21
   2a400:	mov	r2, r7
   2a404:	mov	r1, r4
   2a408:	mov	r0, r6
   2a40c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a410:	pop	{r4, r5, r6, r7, r8, pc}

0002a414 <flatcc_json_parser_finalize_unions@@Base>:
   2a414:	push	{r4, r5, r6, r7, r8, lr}
   2a418:	mov	r4, r0
   2a41c:	mov	r6, r1
   2a420:	mov	r7, r2
   2a424:	mov	r5, r3
   2a428:	mov	r1, r3
   2a42c:	ldr	r0, [r0]
   2a430:	bl	22e08 <flatcc_builder_get_user_frame_ptr@@Base>
   2a434:	ldr	r3, [r0, #4]
   2a438:	cmp	r3, #0
   2a43c:	bne	2a454 <flatcc_json_parser_finalize_unions@@Base+0x40>
   2a440:	mov	r1, r5
   2a444:	ldr	r0, [r4]
   2a448:	bl	22dc0 <flatcc_builder_exit_user_frame_at@@Base>
   2a44c:	mov	r0, r6
   2a450:	pop	{r4, r5, r6, r7, r8, pc}
   2a454:	mov	r3, #27
   2a458:	mov	r2, r7
   2a45c:	mov	r1, r6
   2a460:	mov	r0, r4
   2a464:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a468:	mov	r6, r0
   2a46c:	b	2a440 <flatcc_json_parser_finalize_unions@@Base+0x2c>

0002a470 <flatcc_json_parser_union@@Base>:
   2a470:	push	{r4, r5, r6, r7, lr}
   2a474:	sub	sp, sp, #20
   2a478:	mov	r5, r0
   2a47c:	mov	r7, r1
   2a480:	mov	r6, r2
   2a484:	mov	r4, r3
   2a488:	ldr	r1, [sp, #44]	; 0x2c
   2a48c:	ldr	r0, [r0]
   2a490:	bl	22e08 <flatcc_builder_get_user_frame_ptr@@Base>
   2a494:	add	r3, r4, r4, lsl #1
   2a498:	add	r3, r0, r3, lsl #3
   2a49c:	ldr	r3, [r3, #8]
   2a4a0:	cmp	r3, #0
   2a4a4:	beq	2a4cc <flatcc_json_parser_union@@Base+0x5c>
   2a4a8:	mov	r3, #28
   2a4ac:	mov	r2, r6
   2a4b0:	mov	r1, r7
   2a4b4:	mov	r0, r5
   2a4b8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a4bc:	mov	r4, r0
   2a4c0:	mov	r0, r4
   2a4c4:	add	sp, sp, #20
   2a4c8:	pop	{r4, r5, r6, r7, pc}
   2a4cc:	add	r3, r4, r4, lsl #1
   2a4d0:	add	r3, r0, r3, lsl #3
   2a4d4:	ldrb	r3, [r3, #20]
   2a4d8:	cmp	r3, #0
   2a4dc:	beq	2a564 <flatcc_json_parser_union@@Base+0xf4>
   2a4e0:	add	r4, r4, r4, lsl #1
   2a4e4:	add	r4, r0, r4, lsl #3
   2a4e8:	ldrb	r3, [r4, #21]
   2a4ec:	strb	r3, [sp, #8]
   2a4f0:	cmp	r3, #0
   2a4f4:	beq	2a5a8 <flatcc_json_parser_union@@Base+0x138>
   2a4f8:	ldr	r2, [r0, #4]
   2a4fc:	sub	r2, r2, #1
   2a500:	str	r2, [r0, #4]
   2a504:	add	r2, sp, #12
   2a508:	str	r2, [sp]
   2a50c:	mov	r2, r6
   2a510:	mov	r1, r7
   2a514:	mov	r0, r5
   2a518:	ldr	r4, [sp, #48]	; 0x30
   2a51c:	blx	r4
   2a520:	mov	r4, r0
   2a524:	cmp	r6, r0
   2a528:	beq	2a4c0 <flatcc_json_parser_union@@Base+0x50>
   2a52c:	add	r3, sp, #16
   2a530:	ldmdb	r3, {r2, r3}
   2a534:	ldrh	r1, [sp, #40]	; 0x28
   2a538:	ldr	r0, [r5]
   2a53c:	bl	25e4c <flatcc_builder_table_add_union@@Base>
   2a540:	cmp	r0, #0
   2a544:	beq	2a4c0 <flatcc_json_parser_union@@Base+0x50>
   2a548:	mov	r3, #28
   2a54c:	mov	r2, r6
   2a550:	mov	r1, r4
   2a554:	mov	r0, r5
   2a558:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a55c:	mov	r4, r0
   2a560:	b	2a4c0 <flatcc_json_parser_union@@Base+0x50>
   2a564:	ldr	r3, [r0, #4]
   2a568:	add	r3, r3, #1
   2a56c:	str	r3, [r0, #4]
   2a570:	ldr	r1, [r5, #16]
   2a574:	lsl	r3, r4, #1
   2a578:	add	r2, r3, r4
   2a57c:	add	r2, r0, r2, lsl #3
   2a580:	str	r1, [r2, #16]
   2a584:	ldr	r1, [r5, #4]
   2a588:	str	r1, [r2, #12]
   2a58c:	str	r7, [r2, #8]
   2a590:	mov	r2, r6
   2a594:	mov	r1, r7
   2a598:	mov	r0, r5
   2a59c:	bl	28f68 <flatcc_json_parser_generic_json@@Base>
   2a5a0:	mov	r4, r0
   2a5a4:	b	2a4c0 <flatcc_json_parser_union@@Base+0x50>
   2a5a8:	mov	r3, #25
   2a5ac:	mov	r2, r6
   2a5b0:	mov	r1, r7
   2a5b4:	mov	r0, r5
   2a5b8:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a5bc:	mov	r4, r0
   2a5c0:	b	2a4c0 <flatcc_json_parser_union@@Base+0x50>

0002a5c4 <flatcc_json_parser_union_type@@Base>:
   2a5c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a5c8:	sub	sp, sp, #36	; 0x24
   2a5cc:	mov	r5, r0
   2a5d0:	mov	r9, r1
   2a5d4:	mov	r6, r2
   2a5d8:	mov	r4, r3
   2a5dc:	ldr	r1, [sp, #76]	; 0x4c
   2a5e0:	ldr	r0, [r0]
   2a5e4:	bl	22e08 <flatcc_builder_get_user_frame_ptr@@Base>
   2a5e8:	add	r8, r0, #8
   2a5ec:	add	r4, r4, r4, lsl #1
   2a5f0:	lsl	r4, r4, #3
   2a5f4:	add	sl, r8, r4
   2a5f8:	ldrb	r3, [sl, #12]
   2a5fc:	cmp	r3, #0
   2a600:	bne	2a720 <flatcc_json_parser_union_type@@Base+0x15c>
   2a604:	mov	r7, r0
   2a608:	mov	r3, #1
   2a60c:	strb	r3, [sl, #12]
   2a610:	mov	r2, #0
   2a614:	mov	r3, #0
   2a618:	strd	r2, [sp, #16]
   2a61c:	mov	r3, #0
   2a620:	str	r3, [sp, #12]
   2a624:	strb	r3, [sl, #13]
   2a628:	cmp	r9, r6
   2a62c:	beq	2a764 <flatcc_json_parser_union_type@@Base+0x1a0>
   2a630:	add	r3, sp, #16
   2a634:	str	r3, [sp]
   2a638:	add	r3, sp, #12
   2a63c:	mov	r2, r6
   2a640:	mov	r1, r9
   2a644:	mov	r0, r5
   2a648:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   2a64c:	mov	fp, r0
   2a650:	cmp	r9, r0
   2a654:	beq	2a764 <flatcc_json_parser_union_type@@Base+0x1a0>
   2a658:	ldr	r3, [sp, #12]
   2a65c:	cmp	r3, #0
   2a660:	bne	2a744 <flatcc_json_parser_union_type@@Base+0x180>
   2a664:	ldrd	r2, [sp, #16]
   2a668:	cmp	r3, #0
   2a66c:	cmpeq	r2, #255	; 0xff
   2a670:	strbls	r2, [sl, #13]
   2a674:	bhi	2a788 <flatcc_json_parser_union_type@@Base+0x1c4>
   2a678:	ldr	r3, [r8, r4]
   2a67c:	cmp	r3, #0
   2a680:	beq	2a7a4 <flatcc_json_parser_union_type@@Base+0x1e0>
   2a684:	ldr	r3, [r7, #4]
   2a688:	cmp	r3, #0
   2a68c:	beq	2a7bc <flatcc_json_parser_union_type@@Base+0x1f8>
   2a690:	sub	r3, r3, #1
   2a694:	str	r3, [r7, #4]
   2a698:	ldr	r9, [r5, #16]
   2a69c:	ldr	r7, [r5, #4]
   2a6a0:	ldr	r3, [sl, #8]
   2a6a4:	str	r3, [r5, #16]
   2a6a8:	ldr	r3, [sl, #4]
   2a6ac:	str	r3, [r5, #4]
   2a6b0:	ldrb	r3, [sl, #13]
   2a6b4:	strb	r3, [sp, #24]
   2a6b8:	ldr	r1, [r8, r4]
   2a6bc:	add	r2, sp, #28
   2a6c0:	str	r2, [sp]
   2a6c4:	mov	r2, r6
   2a6c8:	mov	r0, r5
   2a6cc:	ldr	r4, [sp, #84]	; 0x54
   2a6d0:	blx	r4
   2a6d4:	cmp	r6, r0
   2a6d8:	moveq	fp, r0
   2a6dc:	beq	2a738 <flatcc_json_parser_union_type@@Base+0x174>
   2a6e0:	add	r3, sp, #32
   2a6e4:	ldmdb	r3, {r2, r3}
   2a6e8:	ldrh	r1, [sp, #72]	; 0x48
   2a6ec:	ldr	r0, [r5]
   2a6f0:	bl	25e4c <flatcc_builder_table_add_union@@Base>
   2a6f4:	cmp	r0, #0
   2a6f8:	streq	r9, [r5, #16]
   2a6fc:	streq	r7, [r5, #4]
   2a700:	beq	2a738 <flatcc_json_parser_union_type@@Base+0x174>
   2a704:	mov	r3, #28
   2a708:	mov	r2, r6
   2a70c:	mov	r1, fp
   2a710:	mov	r0, r5
   2a714:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a718:	mov	fp, r0
   2a71c:	b	2a738 <flatcc_json_parser_union_type@@Base+0x174>
   2a720:	mov	r3, #28
   2a724:	mov	r2, r6
   2a728:	mov	r1, r9
   2a72c:	mov	r0, r5
   2a730:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a734:	mov	fp, r0
   2a738:	mov	r0, fp
   2a73c:	add	sp, sp, #36	; 0x24
   2a740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a744:	mov	r3, #8
   2a748:	mov	r2, r6
   2a74c:	mov	r1, r0
   2a750:	mov	r0, r5
   2a754:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a758:	mov	fp, r0
   2a75c:	cmp	r9, fp
   2a760:	bne	2a678 <flatcc_json_parser_union_type@@Base+0xb4>
   2a764:	add	r3, sl, #13
   2a768:	str	r3, [sp]
   2a76c:	ldr	r3, [sp, #80]	; 0x50
   2a770:	mov	r2, r6
   2a774:	mov	r1, r9
   2a778:	mov	r0, r5
   2a77c:	bl	27f08 <flatcc_json_parser_space_ext@@Base+0x140>
   2a780:	mov	fp, r0
   2a784:	b	2a678 <flatcc_json_parser_union_type@@Base+0xb4>
   2a788:	mov	r3, #7
   2a78c:	mov	r2, r6
   2a790:	mov	r1, r0
   2a794:	mov	r0, r5
   2a798:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a79c:	mov	fp, r0
   2a7a0:	b	2a75c <flatcc_json_parser_union_type@@Base+0x198>
   2a7a4:	ldrb	r2, [sl, #13]
   2a7a8:	ldr	r3, [r7, #4]
   2a7ac:	cmp	r2, #0
   2a7b0:	addne	r3, r3, #1
   2a7b4:	str	r3, [r7, #4]
   2a7b8:	b	2a738 <flatcc_json_parser_union_type@@Base+0x174>
   2a7bc:	ldr	r3, [pc, #12]	; 2a7d0 <flatcc_json_parser_union_type@@Base+0x20c>
   2a7c0:	ldr	r2, [pc, #12]	; 2a7d4 <flatcc_json_parser_union_type@@Base+0x210>
   2a7c4:	ldr	r1, [pc, #12]	; 2a7d8 <flatcc_json_parser_union_type@@Base+0x214>
   2a7c8:	ldr	r0, [pc, #12]	; 2a7dc <flatcc_json_parser_union_type@@Base+0x218>
   2a7cc:	bl	126a8 <__assert_fail@plt>
   2a7d0:	muleq	r2, r0, ip
   2a7d4:	andeq	r0, r0, r5, asr #7
   2a7d8:	andeq	sp, r2, r8, ror #1
   2a7dc:	andeq	sp, r2, r4, lsr r1

0002a7e0 <flatcc_json_parser_union_vector@@Base>:
   2a7e0:	push	{r4, r5, r6, r7, lr}
   2a7e4:	sub	sp, sp, #20
   2a7e8:	mov	r5, r0
   2a7ec:	mov	r6, r1
   2a7f0:	mov	r7, r2
   2a7f4:	mov	r4, r3
   2a7f8:	ldr	r1, [sp, #44]	; 0x2c
   2a7fc:	ldr	r0, [r0]
   2a800:	bl	22e08 <flatcc_builder_get_user_frame_ptr@@Base>
   2a804:	add	r2, r0, #8
   2a808:	add	r4, r4, r4, lsl #1
   2a80c:	lsl	r3, r4, #3
   2a810:	add	r1, r2, r3
   2a814:	ldr	ip, [r2, r3]
   2a818:	cmp	ip, #0
   2a81c:	beq	2a83c <flatcc_json_parser_union_vector@@Base+0x5c>
   2a820:	mov	r3, #28
   2a824:	mov	r2, r7
   2a828:	mov	r1, r6
   2a82c:	mov	r0, r5
   2a830:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a834:	add	sp, sp, #20
   2a838:	pop	{r4, r5, r6, r7, pc}
   2a83c:	ldrb	ip, [r1, #12]
   2a840:	cmp	ip, #0
   2a844:	beq	2a884 <flatcc_json_parser_union_vector@@Base+0xa4>
   2a848:	ldr	r3, [r0, #4]
   2a84c:	sub	r3, r3, #1
   2a850:	str	r3, [r0, #4]
   2a854:	ldr	r3, [r1, #20]
   2a858:	ldr	r2, [sp, #48]	; 0x30
   2a85c:	str	r2, [sp, #8]
   2a860:	ldrh	r2, [sp, #40]	; 0x28
   2a864:	str	r2, [sp, #4]
   2a868:	ldr	r2, [r1, #16]
   2a86c:	str	r2, [sp]
   2a870:	mov	r2, r7
   2a874:	mov	r1, r6
   2a878:	mov	r0, r5
   2a87c:	bl	28124 <flatcc_json_parser_space_ext@@Base+0x35c>
   2a880:	b	2a834 <flatcc_json_parser_union_vector@@Base+0x54>
   2a884:	ldr	ip, [r0, #4]
   2a888:	add	ip, ip, #1
   2a88c:	str	ip, [r0, #4]
   2a890:	ldr	r0, [r5, #16]
   2a894:	str	r0, [r1, #8]
   2a898:	ldr	r0, [r5, #4]
   2a89c:	str	r0, [r1, #4]
   2a8a0:	str	r6, [r2, r3]
   2a8a4:	mov	r2, r7
   2a8a8:	mov	r1, r6
   2a8ac:	mov	r0, r5
   2a8b0:	bl	28f68 <flatcc_json_parser_generic_json@@Base>
   2a8b4:	b	2a834 <flatcc_json_parser_union_vector@@Base+0x54>

0002a8b8 <flatcc_json_parser_union_type_vector@@Base>:
   2a8b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a8bc:	sub	sp, sp, #60	; 0x3c
   2a8c0:	mov	r7, r0
   2a8c4:	mov	r5, r1
   2a8c8:	mov	r6, r2
   2a8cc:	mov	r4, r3
   2a8d0:	ldrh	r3, [sp, #96]	; 0x60
   2a8d4:	str	r3, [sp, #24]
   2a8d8:	ldr	r1, [sp, #100]	; 0x64
   2a8dc:	ldr	r0, [r0]
   2a8e0:	bl	22e08 <flatcc_builder_get_user_frame_ptr@@Base>
   2a8e4:	add	r4, r4, r4, lsl #1
   2a8e8:	lsl	r3, r4, #3
   2a8ec:	str	r3, [sp, #28]
   2a8f0:	add	r0, r0, #8
   2a8f4:	add	r3, r0, r3
   2a8f8:	str	r3, [sp, #20]
   2a8fc:	ldrb	r3, [r3, #12]
   2a900:	cmp	r3, #0
   2a904:	bne	2a95c <flatcc_json_parser_union_type_vector@@Base+0xa4>
   2a908:	mov	r1, #1
   2a90c:	ldr	r3, [sp, #20]
   2a910:	strb	r1, [r3, #12]
   2a914:	mvn	r3, #0
   2a918:	mov	r2, r1
   2a91c:	ldr	r0, [r7]
   2a920:	bl	23e94 <flatcc_builder_start_vector@@Base>
   2a924:	cmp	r0, #0
   2a928:	bne	2acbc <flatcc_json_parser_union_type_vector@@Base+0x404>
   2a92c:	cmp	r5, r6
   2a930:	beq	2a940 <flatcc_json_parser_union_type_vector@@Base+0x88>
   2a934:	ldrb	r3, [r5]
   2a938:	cmp	r3, #91	; 0x5b
   2a93c:	beq	2a974 <flatcc_json_parser_union_type_vector@@Base+0xbc>
   2a940:	mov	r3, #22
   2a944:	mov	r2, r6
   2a948:	mov	r1, r5
   2a94c:	mov	r0, r7
   2a950:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a954:	mov	r5, r0
   2a958:	b	2ac60 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2a95c:	mov	r3, #28
   2a960:	mov	r2, r6
   2a964:	mov	r1, r5
   2a968:	mov	r0, r7
   2a96c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2a970:	b	2acd0 <flatcc_json_parser_union_type_vector@@Base+0x418>
   2a974:	add	r1, r5, #1
   2a978:	mov	sl, r6
   2a97c:	sub	r3, r6, r1
   2a980:	cmp	r3, #1
   2a984:	ble	2a99c <flatcc_json_parser_union_type_vector@@Base+0xe4>
   2a988:	ldrb	r3, [r5, #1]
   2a98c:	cmp	r3, #32
   2a990:	movhi	r5, r1
   2a994:	bhi	2a9ac <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2a998:	beq	2a9cc <flatcc_json_parser_union_type_vector@@Base+0x114>
   2a99c:	mov	r2, r6
   2a9a0:	mov	r0, r7
   2a9a4:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   2a9a8:	mov	r5, r0
   2a9ac:	cmp	r6, r5
   2a9b0:	beq	2a9c0 <flatcc_json_parser_union_type_vector@@Base+0x108>
   2a9b4:	ldrb	r3, [r5]
   2a9b8:	cmp	r3, #93	; 0x5d
   2a9bc:	beq	2a9e0 <flatcc_json_parser_union_type_vector@@Base+0x128>
   2a9c0:	mov	r8, #0
   2a9c4:	add	fp, sp, #40	; 0x28
   2a9c8:	b	2ab5c <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   2a9cc:	ldrb	r3, [r5, #2]
   2a9d0:	cmp	r3, #32
   2a9d4:	addhi	r5, r5, #2
   2a9d8:	bls	2a99c <flatcc_json_parser_union_type_vector@@Base+0xe4>
   2a9dc:	b	2a9ac <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2a9e0:	add	r1, r5, #1
   2a9e4:	sub	r3, r6, r1
   2a9e8:	cmp	r3, #1
   2a9ec:	ble	2aa04 <flatcc_json_parser_union_type_vector@@Base+0x14c>
   2a9f0:	ldrb	r3, [r5, #1]
   2a9f4:	cmp	r3, #32
   2a9f8:	movhi	r5, r1
   2a9fc:	bhi	2ac60 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2aa00:	beq	2aa18 <flatcc_json_parser_union_type_vector@@Base+0x160>
   2aa04:	mov	r2, r6
   2aa08:	mov	r0, r7
   2aa0c:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   2aa10:	mov	r5, r0
   2aa14:	b	2ac60 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2aa18:	ldrb	r3, [r5, #2]
   2aa1c:	cmp	r3, #32
   2aa20:	addhi	r5, r5, #2
   2aa24:	bls	2aa04 <flatcc_json_parser_union_type_vector@@Base+0x14c>
   2aa28:	b	2ac60 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2aa2c:	mov	r3, #8
   2aa30:	mov	r2, r6
   2aa34:	mov	r1, r0
   2aa38:	mov	r0, r7
   2aa3c:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2aa40:	mov	r4, r0
   2aa44:	cmp	r4, r5
   2aa48:	bne	2abd0 <flatcc_json_parser_union_type_vector@@Base+0x318>
   2aa4c:	add	r3, sp, #55	; 0x37
   2aa50:	str	r3, [sp]
   2aa54:	ldr	r3, [sp, #104]	; 0x68
   2aa58:	mov	r2, r6
   2aa5c:	mov	r1, r5
   2aa60:	mov	r0, r7
   2aa64:	bl	27f08 <flatcc_json_parser_space_ext@@Base+0x140>
   2aa68:	mov	r4, r0
   2aa6c:	cmp	r6, r0
   2aa70:	cmpne	r0, r5
   2aa74:	bne	2abd0 <flatcc_json_parser_union_type_vector@@Base+0x318>
   2aa78:	mov	r5, r0
   2aa7c:	b	2acbc <flatcc_json_parser_union_type_vector@@Base+0x404>
   2aa80:	mov	r3, #7
   2aa84:	mov	r2, r6
   2aa88:	mov	r1, r0
   2aa8c:	mov	r0, r7
   2aa90:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2aa94:	mov	r4, r0
   2aa98:	b	2aa44 <flatcc_json_parser_union_type_vector@@Base+0x18c>
   2aa9c:	mov	r3, #15
   2aaa0:	mov	r2, r6
   2aaa4:	mov	r1, r4
   2aaa8:	mov	r0, r7
   2aaac:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2aab0:	b	2acd0 <flatcc_json_parser_union_type_vector@@Base+0x418>
   2aab4:	ldrb	r3, [r4, #1]
   2aab8:	cmp	r3, #32
   2aabc:	addhi	r4, r4, #1
   2aac0:	bls	2ac18 <flatcc_json_parser_union_type_vector@@Base+0x360>
   2aac4:	b	2ac2c <flatcc_json_parser_union_type_vector@@Base+0x374>
   2aac8:	add	r5, r4, #1
   2aacc:	sub	r3, r6, r5
   2aad0:	cmp	r3, #1
   2aad4:	ble	2aae8 <flatcc_json_parser_union_type_vector@@Base+0x230>
   2aad8:	ldrb	r3, [r4, #1]
   2aadc:	cmp	r3, #32
   2aae0:	bhi	2ac60 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2aae4:	beq	2ab00 <flatcc_json_parser_union_type_vector@@Base+0x248>
   2aae8:	mov	r2, r6
   2aaec:	mov	r1, r5
   2aaf0:	mov	r0, r7
   2aaf4:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   2aaf8:	mov	r5, r0
   2aafc:	b	2ac60 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2ab00:	ldrb	r3, [r4, #2]
   2ab04:	cmp	r3, #32
   2ab08:	addhi	r5, r4, #2
   2ab0c:	bls	2aae8 <flatcc_json_parser_union_type_vector@@Base+0x230>
   2ab10:	b	2ac60 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2ab14:	add	r5, r4, #1
   2ab18:	sub	r3, sl, r5
   2ab1c:	cmp	r3, #1
   2ab20:	ble	2ab34 <flatcc_json_parser_union_type_vector@@Base+0x27c>
   2ab24:	ldrb	r3, [r4, #1]
   2ab28:	cmp	r3, #32
   2ab2c:	bhi	2ab48 <flatcc_json_parser_union_type_vector@@Base+0x290>
   2ab30:	beq	2acd8 <flatcc_json_parser_union_type_vector@@Base+0x420>
   2ab34:	mov	r2, r6
   2ab38:	mov	r1, r5
   2ab3c:	mov	r0, r7
   2ab40:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   2ab44:	mov	r5, r0
   2ab48:	cmp	r6, r5
   2ab4c:	beq	2acec <flatcc_json_parser_union_type_vector@@Base+0x434>
   2ab50:	ldrb	r3, [r5]
   2ab54:	cmp	r3, #93	; 0x5d
   2ab58:	beq	2ad08 <flatcc_json_parser_union_type_vector@@Base+0x450>
   2ab5c:	mov	r1, #1
   2ab60:	ldr	r0, [r7]
   2ab64:	bl	2368c <flatcc_builder_extend_vector@@Base>
   2ab68:	subs	r9, r0, #0
   2ab6c:	beq	2acbc <flatcc_json_parser_union_type_vector@@Base+0x404>
   2ab70:	mov	r2, #0
   2ab74:	mov	r3, #0
   2ab78:	strd	r2, [sp, #40]	; 0x28
   2ab7c:	str	r8, [sp, #36]	; 0x24
   2ab80:	strb	r8, [sp, #55]	; 0x37
   2ab84:	cmp	r6, r5
   2ab88:	beq	2aa4c <flatcc_json_parser_union_type_vector@@Base+0x194>
   2ab8c:	str	fp, [sp]
   2ab90:	add	r3, sp, #36	; 0x24
   2ab94:	mov	r2, r6
   2ab98:	mov	r1, r5
   2ab9c:	mov	r0, r7
   2aba0:	bl	29ce4 <flatcc_json_parser_integer@@Base>
   2aba4:	mov	r4, r0
   2aba8:	cmp	r0, r5
   2abac:	beq	2aa4c <flatcc_json_parser_union_type_vector@@Base+0x194>
   2abb0:	ldr	r3, [sp, #36]	; 0x24
   2abb4:	cmp	r3, #0
   2abb8:	bne	2aa2c <flatcc_json_parser_union_type_vector@@Base+0x174>
   2abbc:	ldrd	r2, [sp, #40]	; 0x28
   2abc0:	cmp	r3, #0
   2abc4:	cmpeq	r2, #255	; 0xff
   2abc8:	strbls	r2, [sp, #55]	; 0x37
   2abcc:	bhi	2aa80 <flatcc_json_parser_union_type_vector@@Base+0x1c8>
   2abd0:	ldrb	r0, [sp, #55]	; 0x37
   2abd4:	ldr	r3, [sp, #112]	; 0x70
   2abd8:	blx	r3
   2abdc:	cmp	r0, #0
   2abe0:	bne	2abf4 <flatcc_json_parser_union_type_vector@@Base+0x33c>
   2abe4:	ldr	r3, [r7, #8]
   2abe8:	tst	r3, #1
   2abec:	beq	2aa9c <flatcc_json_parser_union_type_vector@@Base+0x1e4>
   2abf0:	strb	r8, [sp, #55]	; 0x37
   2abf4:	ldrb	r3, [sp, #55]	; 0x37
   2abf8:	strb	r3, [r9]
   2abfc:	sub	r3, sl, r4
   2ac00:	cmp	r3, #1
   2ac04:	ble	2ac18 <flatcc_json_parser_union_type_vector@@Base+0x360>
   2ac08:	ldrb	r3, [r4]
   2ac0c:	cmp	r3, #32
   2ac10:	bhi	2ac2c <flatcc_json_parser_union_type_vector@@Base+0x374>
   2ac14:	beq	2aab4 <flatcc_json_parser_union_type_vector@@Base+0x1fc>
   2ac18:	mov	r2, r6
   2ac1c:	mov	r1, r4
   2ac20:	mov	r0, r7
   2ac24:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   2ac28:	mov	r4, r0
   2ac2c:	cmp	r6, r4
   2ac30:	beq	2ae2c <flatcc_json_parser_union_type_vector@@Base+0x574>
   2ac34:	ldrb	r3, [r4]
   2ac38:	cmp	r3, #44	; 0x2c
   2ac3c:	beq	2ab14 <flatcc_json_parser_union_type_vector@@Base+0x25c>
   2ac40:	cmp	r3, #93	; 0x5d
   2ac44:	beq	2aac8 <flatcc_json_parser_union_type_vector@@Base+0x210>
   2ac48:	mov	r3, #9
   2ac4c:	mov	r2, r6
   2ac50:	mov	r1, r4
   2ac54:	mov	r0, r7
   2ac58:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2ac5c:	mov	r5, r0
   2ac60:	ldr	r0, [r7]
   2ac64:	bl	24f98 <flatcc_builder_vector_count@@Base>
   2ac68:	mov	r4, r0
   2ac6c:	ldr	r3, [sp, #20]
   2ac70:	str	r0, [r3, #16]
   2ac74:	mov	r1, r0
   2ac78:	ldr	r0, [r7]
   2ac7c:	bl	22cbc <flatcc_builder_enter_user_frame@@Base>
   2ac80:	mov	r8, r0
   2ac84:	mov	r1, r0
   2ac88:	ldr	r0, [r7]
   2ac8c:	bl	22e08 <flatcc_builder_get_user_frame_ptr@@Base>
   2ac90:	mov	r9, r0
   2ac94:	ldr	r0, [r7]
   2ac98:	bl	24fa4 <flatcc_builder_vector_edit@@Base>
   2ac9c:	mov	r2, r4
   2aca0:	mov	r1, r0
   2aca4:	mov	r0, r9
   2aca8:	bl	125ac <memcpy@plt>
   2acac:	ldr	r0, [r7]
   2acb0:	bl	24ea4 <flatcc_builder_end_vector@@Base>
   2acb4:	subs	r9, r0, #0
   2acb8:	bne	2ad54 <flatcc_json_parser_union_type_vector@@Base+0x49c>
   2acbc:	mov	r3, #33	; 0x21
   2acc0:	mov	r2, r6
   2acc4:	mov	r1, r5
   2acc8:	mov	r0, r7
   2accc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2acd0:	add	sp, sp, #60	; 0x3c
   2acd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2acd8:	ldrb	r3, [r4, #2]
   2acdc:	cmp	r3, #32
   2ace0:	addhi	r5, r4, #2
   2ace4:	bls	2ab34 <flatcc_json_parser_union_type_vector@@Base+0x27c>
   2ace8:	b	2ab48 <flatcc_json_parser_union_type_vector@@Base+0x290>
   2acec:	mov	r3, #9
   2acf0:	mov	r2, r6
   2acf4:	mov	r1, r5
   2acf8:	mov	r0, r7
   2acfc:	bl	27cf0 <flatcc_json_parser_set_error@@Base>
   2ad00:	mov	r5, r0
   2ad04:	b	2ac60 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2ad08:	add	r1, r5, #1
   2ad0c:	sub	r3, r6, r1
   2ad10:	cmp	r3, #1
   2ad14:	ble	2ad2c <flatcc_json_parser_union_type_vector@@Base+0x474>
   2ad18:	ldrb	r3, [r5, #1]
   2ad1c:	cmp	r3, #32
   2ad20:	movhi	r5, r1
   2ad24:	bhi	2ac60 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2ad28:	beq	2ad40 <flatcc_json_parser_union_type_vector@@Base+0x488>
   2ad2c:	mov	r2, r6
   2ad30:	mov	r0, r7
   2ad34:	bl	27dc8 <flatcc_json_parser_space_ext@@Base>
   2ad38:	mov	r5, r0
   2ad3c:	b	2ac60 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2ad40:	ldrb	r3, [r5, #2]
   2ad44:	cmp	r3, #32
   2ad48:	addhi	r5, r5, #2
   2ad4c:	bls	2ad2c <flatcc_json_parser_union_type_vector@@Base+0x474>
   2ad50:	b	2ac60 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2ad54:	ldr	r3, [sp, #24]
   2ad58:	sub	r1, r3, #1
   2ad5c:	ldr	r0, [r7]
   2ad60:	bl	25d0c <flatcc_builder_table_add_offset@@Base>
   2ad64:	cmp	r0, #0
   2ad68:	beq	2acbc <flatcc_json_parser_union_type_vector@@Base+0x404>
   2ad6c:	str	r9, [r0]
   2ad70:	ldr	r1, [sp, #100]	; 0x64
   2ad74:	ldr	r0, [r7]
   2ad78:	bl	22e08 <flatcc_builder_get_user_frame_ptr@@Base>
   2ad7c:	add	r2, r0, #8
   2ad80:	ldr	r3, [sp, #28]
   2ad84:	add	r1, r2, r3
   2ad88:	str	r8, [r1, #20]
   2ad8c:	ldr	r3, [r2, r3]
   2ad90:	cmp	r3, #0
   2ad94:	beq	2ae04 <flatcc_json_parser_union_type_vector@@Base+0x54c>
   2ad98:	ldr	r3, [r0, #4]
   2ad9c:	cmp	r3, #0
   2ada0:	beq	2ae18 <flatcc_json_parser_union_type_vector@@Base+0x560>
   2ada4:	sub	r3, r3, #1
   2ada8:	str	r3, [r0, #4]
   2adac:	ldr	sl, [r7, #16]
   2adb0:	ldr	r9, [r7, #4]
   2adb4:	ldr	r3, [r1, #8]
   2adb8:	str	r3, [r7, #16]
   2adbc:	ldr	r3, [r1, #4]
   2adc0:	str	r3, [r7, #4]
   2adc4:	ldr	r3, [sp, #28]
   2adc8:	ldr	r1, [r2, r3]
   2adcc:	ldr	r3, [sp, #108]	; 0x6c
   2add0:	str	r3, [sp, #8]
   2add4:	ldr	r3, [sp, #24]
   2add8:	str	r3, [sp, #4]
   2addc:	str	r4, [sp]
   2ade0:	mov	r3, r8
   2ade4:	mov	r2, r6
   2ade8:	mov	r0, r7
   2adec:	bl	28124 <flatcc_json_parser_space_ext@@Base+0x35c>
   2adf0:	cmp	r6, r0
   2adf4:	strne	sl, [r7, #16]
   2adf8:	strne	r9, [r7, #4]
   2adfc:	movne	r0, r5
   2ae00:	b	2acd0 <flatcc_json_parser_union_type_vector@@Base+0x418>
   2ae04:	ldr	r3, [r0, #4]
   2ae08:	add	r3, r3, #1
   2ae0c:	str	r3, [r0, #4]
   2ae10:	mov	r0, r5
   2ae14:	b	2acd0 <flatcc_json_parser_union_type_vector@@Base+0x418>
   2ae18:	ldr	r3, [pc, #20]	; 2ae34 <flatcc_json_parser_union_type_vector@@Base+0x57c>
   2ae1c:	ldr	r2, [pc, #20]	; 2ae38 <flatcc_json_parser_union_type_vector@@Base+0x580>
   2ae20:	ldr	r1, [pc, #20]	; 2ae3c <flatcc_json_parser_union_type_vector@@Base+0x584>
   2ae24:	ldr	r0, [pc, #20]	; 2ae40 <flatcc_json_parser_union_type_vector@@Base+0x588>
   2ae28:	bl	126a8 <__assert_fail@plt>
   2ae2c:	mov	r5, r6
   2ae30:	b	2ac60 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2ae34:			; <UNDEFINED> instruction: 0x0002ccb0
   2ae38:	andeq	r0, r0, r2, ror #8
   2ae3c:	andeq	sp, r2, r8, ror #1
   2ae40:	andeq	sp, r2, r4, lsr r1

0002ae44 <flatcc_json_parser_table_as_root@@Base>:
   2ae44:	push	{r4, r5, r6, r7, r8, r9, lr}
   2ae48:	sub	sp, sp, #52	; 0x34
   2ae4c:	mov	r8, r0
   2ae50:	mov	r5, r2
   2ae54:	ldr	r9, [sp, #80]	; 0x50
   2ae58:	and	r6, r9, #4
   2ae5c:	cmp	r6, #0
   2ae60:	movne	r6, #2
   2ae64:	subs	r4, r1, #0
   2ae68:	addeq	r4, sp, #4
   2ae6c:	add	r7, r2, r3
   2ae70:	mov	r2, #44	; 0x2c
   2ae74:	mov	r1, #0
   2ae78:	mov	r0, r4
   2ae7c:	bl	12654 <memset@plt>
   2ae80:	str	r8, [r4]
   2ae84:	str	r5, [r4, #4]
   2ae88:	mov	r3, #1
   2ae8c:	str	r3, [r4, #16]
   2ae90:	str	r9, [r4, #8]
   2ae94:	str	r5, [r4, #28]
   2ae98:	str	r7, [r4, #32]
   2ae9c:	str	r5, [r4, #36]	; 0x24
   2aea0:	mov	r3, r6
   2aea4:	mov	r2, #0
   2aea8:	ldr	r1, [sp, #84]	; 0x54
   2aeac:	mov	r0, r8
   2aeb0:	bl	23318 <flatcc_builder_start_buffer@@Base>
   2aeb4:	cmp	r0, #0
   2aeb8:	bne	2af08 <flatcc_json_parser_table_as_root@@Base+0xc4>
   2aebc:	mov	r3, sp
   2aec0:	mov	r2, r7
   2aec4:	mov	r1, r5
   2aec8:	mov	r0, r4
   2aecc:	ldr	r6, [sp, #88]	; 0x58
   2aed0:	blx	r6
   2aed4:	ldr	r6, [r4, #24]
   2aed8:	cmp	r6, #0
   2aedc:	beq	2aeec <flatcc_json_parser_table_as_root@@Base+0xa8>
   2aee0:	mov	r0, r6
   2aee4:	add	sp, sp, #52	; 0x34
   2aee8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2aeec:	ldr	r1, [sp]
   2aef0:	mov	r0, r8
   2aef4:	bl	233d0 <flatcc_builder_end_buffer@@Base>
   2aef8:	cmp	r0, #0
   2aefc:	beq	2af10 <flatcc_json_parser_table_as_root@@Base+0xcc>
   2af00:	str	r5, [r4, #40]	; 0x28
   2af04:	b	2aee0 <flatcc_json_parser_table_as_root@@Base+0x9c>
   2af08:	mvn	r6, #0
   2af0c:	b	2aee0 <flatcc_json_parser_table_as_root@@Base+0x9c>
   2af10:	mvn	r6, #0
   2af14:	b	2aee0 <flatcc_json_parser_table_as_root@@Base+0x9c>

0002af18 <flatcc_json_parser_struct_as_root@@Base>:
   2af18:	push	{r4, r5, r6, r7, r8, r9, lr}
   2af1c:	sub	sp, sp, #52	; 0x34
   2af20:	mov	r8, r0
   2af24:	mov	r5, r2
   2af28:	ldr	r9, [sp, #80]	; 0x50
   2af2c:	and	r6, r9, #4
   2af30:	cmp	r6, #0
   2af34:	movne	r6, #2
   2af38:	subs	r4, r1, #0
   2af3c:	addeq	r4, sp, #4
   2af40:	add	r7, r2, r3
   2af44:	mov	r2, #44	; 0x2c
   2af48:	mov	r1, #0
   2af4c:	mov	r0, r4
   2af50:	bl	12654 <memset@plt>
   2af54:	str	r8, [r4]
   2af58:	str	r5, [r4, #4]
   2af5c:	mov	r3, #1
   2af60:	str	r3, [r4, #16]
   2af64:	str	r9, [r4, #8]
   2af68:	str	r5, [r4, #28]
   2af6c:	str	r7, [r4, #32]
   2af70:	str	r5, [r4, #36]	; 0x24
   2af74:	mov	r3, r6
   2af78:	mov	r2, #0
   2af7c:	ldr	r1, [sp, #84]	; 0x54
   2af80:	mov	r0, r8
   2af84:	bl	23318 <flatcc_builder_start_buffer@@Base>
   2af88:	cmp	r0, #0
   2af8c:	bne	2afdc <flatcc_json_parser_struct_as_root@@Base+0xc4>
   2af90:	mov	r3, sp
   2af94:	mov	r2, r7
   2af98:	mov	r1, r5
   2af9c:	mov	r0, r4
   2afa0:	ldr	r6, [sp, #88]	; 0x58
   2afa4:	blx	r6
   2afa8:	ldr	r6, [r4, #24]
   2afac:	cmp	r6, #0
   2afb0:	beq	2afc0 <flatcc_json_parser_struct_as_root@@Base+0xa8>
   2afb4:	mov	r0, r6
   2afb8:	add	sp, sp, #52	; 0x34
   2afbc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2afc0:	ldr	r1, [sp]
   2afc4:	mov	r0, r8
   2afc8:	bl	233d0 <flatcc_builder_end_buffer@@Base>
   2afcc:	cmp	r0, #0
   2afd0:	beq	2afe4 <flatcc_json_parser_struct_as_root@@Base+0xcc>
   2afd4:	str	r5, [r4, #40]	; 0x28
   2afd8:	b	2afb4 <flatcc_json_parser_struct_as_root@@Base+0x9c>
   2afdc:	mvn	r6, #0
   2afe0:	b	2afb4 <flatcc_json_parser_struct_as_root@@Base+0x9c>
   2afe4:	mvn	r6, #0
   2afe8:	b	2afb4 <flatcc_json_parser_struct_as_root@@Base+0x9c>
   2afec:	eor	r1, r1, #-2147483648	; 0x80000000
   2aff0:	b	2aff8 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   2aff4:	eor	r3, r3, #-2147483648	; 0x80000000
   2aff8:	push	{r4, r5, lr}
   2affc:	lsl	r4, r1, #1
   2b000:	lsl	r5, r3, #1
   2b004:	teq	r4, r5
   2b008:	teqeq	r0, r2
   2b00c:	orrsne	ip, r4, r0
   2b010:	orrsne	ip, r5, r2
   2b014:	mvnsne	ip, r4, asr #21
   2b018:	mvnsne	ip, r5, asr #21
   2b01c:	beq	2b208 <flatcc_json_parser_struct_as_root@@Base+0x2f0>
   2b020:	lsr	r4, r4, #21
   2b024:	rsbs	r5, r4, r5, lsr #21
   2b028:	rsblt	r5, r5, #0
   2b02c:	ble	2b04c <flatcc_json_parser_struct_as_root@@Base+0x134>
   2b030:	add	r4, r4, r5
   2b034:	eor	r2, r0, r2
   2b038:	eor	r3, r1, r3
   2b03c:	eor	r0, r2, r0
   2b040:	eor	r1, r3, r1
   2b044:	eor	r2, r0, r2
   2b048:	eor	r3, r1, r3
   2b04c:	cmp	r5, #54	; 0x36
   2b050:	pophi	{r4, r5, pc}
   2b054:	tst	r1, #-2147483648	; 0x80000000
   2b058:	lsl	r1, r1, #12
   2b05c:	mov	ip, #1048576	; 0x100000
   2b060:	orr	r1, ip, r1, lsr #12
   2b064:	beq	2b070 <flatcc_json_parser_struct_as_root@@Base+0x158>
   2b068:	rsbs	r0, r0, #0
   2b06c:	rsc	r1, r1, #0
   2b070:	tst	r3, #-2147483648	; 0x80000000
   2b074:	lsl	r3, r3, #12
   2b078:	orr	r3, ip, r3, lsr #12
   2b07c:	beq	2b088 <flatcc_json_parser_struct_as_root@@Base+0x170>
   2b080:	rsbs	r2, r2, #0
   2b084:	rsc	r3, r3, #0
   2b088:	teq	r4, r5
   2b08c:	beq	2b1f0 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   2b090:	sub	r4, r4, #1
   2b094:	rsbs	lr, r5, #32
   2b098:	blt	2b0b4 <flatcc_json_parser_struct_as_root@@Base+0x19c>
   2b09c:	lsl	ip, r2, lr
   2b0a0:	adds	r0, r0, r2, lsr r5
   2b0a4:	adc	r1, r1, #0
   2b0a8:	adds	r0, r0, r3, lsl lr
   2b0ac:	adcs	r1, r1, r3, asr r5
   2b0b0:	b	2b0d0 <flatcc_json_parser_struct_as_root@@Base+0x1b8>
   2b0b4:	sub	r5, r5, #32
   2b0b8:	add	lr, lr, #32
   2b0bc:	cmp	r2, #1
   2b0c0:	lsl	ip, r3, lr
   2b0c4:	orrcs	ip, ip, #2
   2b0c8:	adds	r0, r0, r3, asr r5
   2b0cc:	adcs	r1, r1, r3, asr #31
   2b0d0:	and	r5, r1, #-2147483648	; 0x80000000
   2b0d4:	bpl	2b0e4 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   2b0d8:	rsbs	ip, ip, #0
   2b0dc:	rscs	r0, r0, #0
   2b0e0:	rsc	r1, r1, #0
   2b0e4:	cmp	r1, #1048576	; 0x100000
   2b0e8:	bcc	2b128 <flatcc_json_parser_struct_as_root@@Base+0x210>
   2b0ec:	cmp	r1, #2097152	; 0x200000
   2b0f0:	bcc	2b110 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   2b0f4:	lsrs	r1, r1, #1
   2b0f8:	rrxs	r0, r0
   2b0fc:	rrx	ip, ip
   2b100:	add	r4, r4, #1
   2b104:	lsl	r2, r4, #21
   2b108:	cmn	r2, #4194304	; 0x400000
   2b10c:	bcs	2b268 <flatcc_json_parser_struct_as_root@@Base+0x350>
   2b110:	cmp	ip, #-2147483648	; 0x80000000
   2b114:	lsrseq	ip, r0, #1
   2b118:	adcs	r0, r0, #0
   2b11c:	adc	r1, r1, r4, lsl #20
   2b120:	orr	r1, r1, r5
   2b124:	pop	{r4, r5, pc}
   2b128:	lsls	ip, ip, #1
   2b12c:	adcs	r0, r0, r0
   2b130:	adc	r1, r1, r1
   2b134:	tst	r1, #1048576	; 0x100000
   2b138:	sub	r4, r4, #1
   2b13c:	bne	2b110 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   2b140:	teq	r1, #0
   2b144:	moveq	r1, r0
   2b148:	moveq	r0, #0
   2b14c:	clz	r3, r1
   2b150:	addeq	r3, r3, #32
   2b154:	sub	r3, r3, #11
   2b158:	subs	r2, r3, #32
   2b15c:	bge	2b180 <flatcc_json_parser_struct_as_root@@Base+0x268>
   2b160:	adds	r2, r2, #12
   2b164:	ble	2b17c <flatcc_json_parser_struct_as_root@@Base+0x264>
   2b168:	add	ip, r2, #20
   2b16c:	rsb	r2, r2, #12
   2b170:	lsl	r0, r1, ip
   2b174:	lsr	r1, r1, r2
   2b178:	b	2b190 <flatcc_json_parser_struct_as_root@@Base+0x278>
   2b17c:	add	r2, r2, #20
   2b180:	rsble	ip, r2, #32
   2b184:	lsl	r1, r1, r2
   2b188:	orrle	r1, r1, r0, lsr ip
   2b18c:	lslle	r0, r0, r2
   2b190:	subs	r4, r4, r3
   2b194:	addge	r1, r1, r4, lsl #20
   2b198:	orrge	r1, r1, r5
   2b19c:	popge	{r4, r5, pc}
   2b1a0:	mvn	r4, r4
   2b1a4:	subs	r4, r4, #31
   2b1a8:	bge	2b1e4 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   2b1ac:	adds	r4, r4, #12
   2b1b0:	bgt	2b1cc <flatcc_json_parser_struct_as_root@@Base+0x2b4>
   2b1b4:	add	r4, r4, #20
   2b1b8:	rsb	r2, r4, #32
   2b1bc:	lsr	r0, r0, r4
   2b1c0:	orr	r0, r0, r1, lsl r2
   2b1c4:	orr	r1, r5, r1, lsr r4
   2b1c8:	pop	{r4, r5, pc}
   2b1cc:	rsb	r4, r4, #12
   2b1d0:	rsb	r2, r4, #32
   2b1d4:	lsr	r0, r0, r2
   2b1d8:	orr	r0, r0, r1, lsl r4
   2b1dc:	mov	r1, r5
   2b1e0:	pop	{r4, r5, pc}
   2b1e4:	lsr	r0, r1, r4
   2b1e8:	mov	r1, r5
   2b1ec:	pop	{r4, r5, pc}
   2b1f0:	teq	r4, #0
   2b1f4:	eor	r3, r3, #1048576	; 0x100000
   2b1f8:	eoreq	r1, r1, #1048576	; 0x100000
   2b1fc:	addeq	r4, r4, #1
   2b200:	subne	r5, r5, #1
   2b204:	b	2b090 <flatcc_json_parser_struct_as_root@@Base+0x178>
   2b208:	mvns	ip, r4, asr #21
   2b20c:	mvnsne	ip, r5, asr #21
   2b210:	beq	2b278 <flatcc_json_parser_struct_as_root@@Base+0x360>
   2b214:	teq	r4, r5
   2b218:	teqeq	r0, r2
   2b21c:	beq	2b230 <flatcc_json_parser_struct_as_root@@Base+0x318>
   2b220:	orrs	ip, r4, r0
   2b224:	moveq	r1, r3
   2b228:	moveq	r0, r2
   2b22c:	pop	{r4, r5, pc}
   2b230:	teq	r1, r3
   2b234:	movne	r1, #0
   2b238:	movne	r0, #0
   2b23c:	popne	{r4, r5, pc}
   2b240:	lsrs	ip, r4, #21
   2b244:	bne	2b258 <flatcc_json_parser_struct_as_root@@Base+0x340>
   2b248:	lsls	r0, r0, #1
   2b24c:	adcs	r1, r1, r1
   2b250:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2b254:	pop	{r4, r5, pc}
   2b258:	adds	r4, r4, #4194304	; 0x400000
   2b25c:	addcc	r1, r1, #1048576	; 0x100000
   2b260:	popcc	{r4, r5, pc}
   2b264:	and	r5, r1, #-2147483648	; 0x80000000
   2b268:	orr	r1, r5, #2130706432	; 0x7f000000
   2b26c:	orr	r1, r1, #15728640	; 0xf00000
   2b270:	mov	r0, #0
   2b274:	pop	{r4, r5, pc}
   2b278:	mvns	ip, r4, asr #21
   2b27c:	movne	r1, r3
   2b280:	movne	r0, r2
   2b284:	mvnseq	ip, r5, asr #21
   2b288:	movne	r3, r1
   2b28c:	movne	r2, r0
   2b290:	orrs	r4, r0, r1, lsl #12
   2b294:	orrseq	r5, r2, r3, lsl #12
   2b298:	teqeq	r1, r3
   2b29c:	orrne	r1, r1, #524288	; 0x80000
   2b2a0:	pop	{r4, r5, pc}
   2b2a4:	teq	r0, #0
   2b2a8:	moveq	r1, #0
   2b2ac:	bxeq	lr
   2b2b0:	push	{r4, r5, lr}
   2b2b4:	mov	r4, #1024	; 0x400
   2b2b8:	add	r4, r4, #50	; 0x32
   2b2bc:	mov	r5, #0
   2b2c0:	mov	r1, #0
   2b2c4:	b	2b140 <flatcc_json_parser_struct_as_root@@Base+0x228>
   2b2c8:	teq	r0, #0
   2b2cc:	moveq	r1, #0
   2b2d0:	bxeq	lr
   2b2d4:	push	{r4, r5, lr}
   2b2d8:	mov	r4, #1024	; 0x400
   2b2dc:	add	r4, r4, #50	; 0x32
   2b2e0:	ands	r5, r0, #-2147483648	; 0x80000000
   2b2e4:	rsbmi	r0, r0, #0
   2b2e8:	mov	r1, #0
   2b2ec:	b	2b140 <flatcc_json_parser_struct_as_root@@Base+0x228>
   2b2f0:	lsls	r2, r0, #1
   2b2f4:	asr	r1, r2, #3
   2b2f8:	rrx	r1, r1
   2b2fc:	lsl	r0, r2, #28
   2b300:	andsne	r3, r2, #-16777216	; 0xff000000
   2b304:	teqne	r3, #-16777216	; 0xff000000
   2b308:	eorne	r1, r1, #939524096	; 0x38000000
   2b30c:	bxne	lr
   2b310:	teq	r2, #0
   2b314:	teqne	r3, #-16777216	; 0xff000000
   2b318:	bxeq	lr
   2b31c:	push	{r4, r5, lr}
   2b320:	mov	r4, #896	; 0x380
   2b324:	and	r5, r1, #-2147483648	; 0x80000000
   2b328:	bic	r1, r1, #-2147483648	; 0x80000000
   2b32c:	b	2b140 <flatcc_json_parser_struct_as_root@@Base+0x228>
   2b330:	orrs	r2, r0, r1
   2b334:	bxeq	lr
   2b338:	push	{r4, r5, lr}
   2b33c:	mov	r5, #0
   2b340:	b	2b360 <flatcc_json_parser_struct_as_root@@Base+0x448>
   2b344:	orrs	r2, r0, r1
   2b348:	bxeq	lr
   2b34c:	push	{r4, r5, lr}
   2b350:	ands	r5, r1, #-2147483648	; 0x80000000
   2b354:	bpl	2b360 <flatcc_json_parser_struct_as_root@@Base+0x448>
   2b358:	rsbs	r0, r0, #0
   2b35c:	rsc	r1, r1, #0
   2b360:	mov	r4, #1024	; 0x400
   2b364:	add	r4, r4, #50	; 0x32
   2b368:	lsrs	ip, r1, #22
   2b36c:	beq	2b0e4 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   2b370:	mov	r2, #3
   2b374:	lsrs	ip, ip, #3
   2b378:	addne	r2, r2, #3
   2b37c:	lsrs	ip, ip, #3
   2b380:	addne	r2, r2, #3
   2b384:	add	r2, r2, ip, lsr #3
   2b388:	rsb	r3, r2, #32
   2b38c:	lsl	ip, r0, r3
   2b390:	lsr	r0, r0, r2
   2b394:	orr	r0, r0, r1, lsl r3
   2b398:	lsr	r1, r1, r2
   2b39c:	add	r4, r4, r2
   2b3a0:	b	2b0e4 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   2b3a4:	eor	r0, r0, #-2147483648	; 0x80000000
   2b3a8:	b	2b3b0 <flatcc_json_parser_struct_as_root@@Base+0x498>
   2b3ac:	eor	r1, r1, #-2147483648	; 0x80000000
   2b3b0:	lsls	r2, r0, #1
   2b3b4:	lslsne	r3, r1, #1
   2b3b8:	teqne	r2, r3
   2b3bc:	mvnsne	ip, r2, asr #24
   2b3c0:	mvnsne	ip, r3, asr #24
   2b3c4:	beq	2b4bc <flatcc_json_parser_struct_as_root@@Base+0x5a4>
   2b3c8:	lsr	r2, r2, #24
   2b3cc:	rsbs	r3, r2, r3, lsr #24
   2b3d0:	addgt	r2, r2, r3
   2b3d4:	eorgt	r1, r0, r1
   2b3d8:	eorgt	r0, r1, r0
   2b3dc:	eorgt	r1, r0, r1
   2b3e0:	rsblt	r3, r3, #0
   2b3e4:	cmp	r3, #25
   2b3e8:	bxhi	lr
   2b3ec:	tst	r0, #-2147483648	; 0x80000000
   2b3f0:	orr	r0, r0, #8388608	; 0x800000
   2b3f4:	bic	r0, r0, #-16777216	; 0xff000000
   2b3f8:	rsbne	r0, r0, #0
   2b3fc:	tst	r1, #-2147483648	; 0x80000000
   2b400:	orr	r1, r1, #8388608	; 0x800000
   2b404:	bic	r1, r1, #-16777216	; 0xff000000
   2b408:	rsbne	r1, r1, #0
   2b40c:	teq	r2, r3
   2b410:	beq	2b4a4 <flatcc_json_parser_struct_as_root@@Base+0x58c>
   2b414:	sub	r2, r2, #1
   2b418:	adds	r0, r0, r1, asr r3
   2b41c:	rsb	r3, r3, #32
   2b420:	lsl	r1, r1, r3
   2b424:	and	r3, r0, #-2147483648	; 0x80000000
   2b428:	bpl	2b434 <flatcc_json_parser_struct_as_root@@Base+0x51c>
   2b42c:	rsbs	r1, r1, #0
   2b430:	rsc	r0, r0, #0
   2b434:	cmp	r0, #8388608	; 0x800000
   2b438:	bcc	2b46c <flatcc_json_parser_struct_as_root@@Base+0x554>
   2b43c:	cmp	r0, #16777216	; 0x1000000
   2b440:	bcc	2b458 <flatcc_json_parser_struct_as_root@@Base+0x540>
   2b444:	lsrs	r0, r0, #1
   2b448:	rrx	r1, r1
   2b44c:	add	r2, r2, #1
   2b450:	cmp	r2, #254	; 0xfe
   2b454:	bcs	2b510 <flatcc_json_parser_struct_as_root@@Base+0x5f8>
   2b458:	cmp	r1, #-2147483648	; 0x80000000
   2b45c:	adc	r0, r0, r2, lsl #23
   2b460:	biceq	r0, r0, #1
   2b464:	orr	r0, r0, r3
   2b468:	bx	lr
   2b46c:	lsls	r1, r1, #1
   2b470:	adc	r0, r0, r0
   2b474:	tst	r0, #8388608	; 0x800000
   2b478:	sub	r2, r2, #1
   2b47c:	bne	2b458 <flatcc_json_parser_struct_as_root@@Base+0x540>
   2b480:	clz	ip, r0
   2b484:	sub	ip, ip, #8
   2b488:	subs	r2, r2, ip
   2b48c:	lsl	r0, r0, ip
   2b490:	addge	r0, r0, r2, lsl #23
   2b494:	rsblt	r2, r2, #0
   2b498:	orrge	r0, r0, r3
   2b49c:	orrlt	r0, r3, r0, lsr r2
   2b4a0:	bx	lr
   2b4a4:	teq	r2, #0
   2b4a8:	eor	r1, r1, #8388608	; 0x800000
   2b4ac:	eoreq	r0, r0, #8388608	; 0x800000
   2b4b0:	addeq	r2, r2, #1
   2b4b4:	subne	r3, r3, #1
   2b4b8:	b	2b414 <flatcc_json_parser_struct_as_root@@Base+0x4fc>
   2b4bc:	lsl	r3, r1, #1
   2b4c0:	mvns	ip, r2, asr #24
   2b4c4:	mvnsne	ip, r3, asr #24
   2b4c8:	beq	2b51c <flatcc_json_parser_struct_as_root@@Base+0x604>
   2b4cc:	teq	r2, r3
   2b4d0:	beq	2b4e0 <flatcc_json_parser_struct_as_root@@Base+0x5c8>
   2b4d4:	teq	r2, #0
   2b4d8:	moveq	r0, r1
   2b4dc:	bx	lr
   2b4e0:	teq	r0, r1
   2b4e4:	movne	r0, #0
   2b4e8:	bxne	lr
   2b4ec:	tst	r2, #-16777216	; 0xff000000
   2b4f0:	bne	2b500 <flatcc_json_parser_struct_as_root@@Base+0x5e8>
   2b4f4:	lsls	r0, r0, #1
   2b4f8:	orrcs	r0, r0, #-2147483648	; 0x80000000
   2b4fc:	bx	lr
   2b500:	adds	r2, r2, #33554432	; 0x2000000
   2b504:	addcc	r0, r0, #8388608	; 0x800000
   2b508:	bxcc	lr
   2b50c:	and	r3, r0, #-2147483648	; 0x80000000
   2b510:	orr	r0, r3, #2130706432	; 0x7f000000
   2b514:	orr	r0, r0, #8388608	; 0x800000
   2b518:	bx	lr
   2b51c:	mvns	r2, r2, asr #24
   2b520:	movne	r0, r1
   2b524:	mvnseq	r3, r3, asr #24
   2b528:	movne	r1, r0
   2b52c:	lsls	r2, r0, #9
   2b530:	lslseq	r3, r1, #9
   2b534:	teqeq	r0, r1
   2b538:	orrne	r0, r0, #4194304	; 0x400000
   2b53c:	bx	lr
   2b540:	mov	r3, #0
   2b544:	b	2b550 <flatcc_json_parser_struct_as_root@@Base+0x638>
   2b548:	ands	r3, r0, #-2147483648	; 0x80000000
   2b54c:	rsbmi	r0, r0, #0
   2b550:	movs	ip, r0
   2b554:	bxeq	lr
   2b558:	orr	r3, r3, #1258291200	; 0x4b000000
   2b55c:	mov	r1, r0
   2b560:	mov	r0, #0
   2b564:	b	2b5a8 <flatcc_json_parser_struct_as_root@@Base+0x690>
   2b568:	orrs	r2, r0, r1
   2b56c:	bxeq	lr
   2b570:	mov	r3, #0
   2b574:	b	2b590 <flatcc_json_parser_struct_as_root@@Base+0x678>
   2b578:	orrs	r2, r0, r1
   2b57c:	bxeq	lr
   2b580:	ands	r3, r1, #-2147483648	; 0x80000000
   2b584:	bpl	2b590 <flatcc_json_parser_struct_as_root@@Base+0x678>
   2b588:	rsbs	r0, r0, #0
   2b58c:	rsc	r1, r1, #0
   2b590:	movs	ip, r1
   2b594:	moveq	ip, r0
   2b598:	moveq	r1, r0
   2b59c:	moveq	r0, #0
   2b5a0:	orr	r3, r3, #1526726656	; 0x5b000000
   2b5a4:	subeq	r3, r3, #268435456	; 0x10000000
   2b5a8:	sub	r3, r3, #8388608	; 0x800000
   2b5ac:	clz	r2, ip
   2b5b0:	subs	r2, r2, #8
   2b5b4:	sub	r3, r3, r2, lsl #23
   2b5b8:	blt	2b5d8 <flatcc_json_parser_struct_as_root@@Base+0x6c0>
   2b5bc:	add	r3, r3, r1, lsl r2
   2b5c0:	lsl	ip, r0, r2
   2b5c4:	rsb	r2, r2, #32
   2b5c8:	cmp	ip, #-2147483648	; 0x80000000
   2b5cc:	adc	r0, r3, r0, lsr r2
   2b5d0:	biceq	r0, r0, #1
   2b5d4:	bx	lr
   2b5d8:	add	r2, r2, #32
   2b5dc:	lsl	ip, r1, r2
   2b5e0:	rsb	r2, r2, #32
   2b5e4:	orrs	r0, r0, ip, lsl #1
   2b5e8:	adc	r0, r3, r1, lsr r2
   2b5ec:	biceq	r0, r0, ip, lsr #31
   2b5f0:	bx	lr

0002b5f4 <__libc_csu_init@@Base>:
   2b5f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b5f8:	mov	r7, r0
   2b5fc:	ldr	r6, [pc, #72]	; 2b64c <__libc_csu_init@@Base+0x58>
   2b600:	ldr	r5, [pc, #72]	; 2b650 <__libc_csu_init@@Base+0x5c>
   2b604:	add	r6, pc, r6
   2b608:	add	r5, pc, r5
   2b60c:	sub	r6, r6, r5
   2b610:	mov	r8, r1
   2b614:	mov	r9, r2
   2b618:	bl	12574 <fopen@plt-0x20>
   2b61c:	asrs	r6, r6, #2
   2b620:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b624:	mov	r4, #0
   2b628:	add	r4, r4, #1
   2b62c:	ldr	r3, [r5], #4
   2b630:	mov	r2, r9
   2b634:	mov	r1, r8
   2b638:	mov	r0, r7
   2b63c:	blx	r3
   2b640:	cmp	r6, r4
   2b644:	bne	2b628 <__libc_csu_init@@Base+0x34>
   2b648:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b64c:	andeq	r2, r1, r4, lsl #18
   2b650:	strdeq	r2, [r1], -ip

0002b654 <__libc_csu_fini@@Base>:
   2b654:	bx	lr

Disassembly of section .fini:

0002b658 <.fini>:
   2b658:	push	{r3, lr}
   2b65c:	pop	{r3, pc}
