
../repos/charybdis/wsockd/.libs/wsockd:     file format elf32-littlearm


Disassembly of section .init:

00010c60 <.init>:
   10c60:	push	{r3, lr}
   10c64:	bl	112c0 <rb_base64_encode@plt+0x3d0>
   10c68:	pop	{r3, pc}

Disassembly of section .plt:

00010c6c <open@plt-0x14>:
   10c6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c70:	ldr	lr, [pc, #4]	; 10c7c <open@plt-0x4>
   10c74:	add	lr, pc, lr
   10c78:	ldr	pc, [lr, #8]!
   10c7c:	andeq	r4, r1, r4, lsl #7

00010c80 <open@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #20, 20	; 0x14000
   10c88:	ldr	pc, [ip, #900]!	; 0x384

00010c8c <sigemptyset@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #20, 20	; 0x14000
   10c94:	ldr	pc, [ip, #892]!	; 0x37c

00010c98 <strerror@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #20, 20	; 0x14000
   10ca0:	ldr	pc, [ip, #884]!	; 0x374

00010ca4 <rb_get_type@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #20, 20	; 0x14000
   10cac:	ldr	pc, [ip, #876]!	; 0x36c

00010cb0 <abort@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #20, 20	; 0x14000
   10cb8:	ldr	pc, [ip, #868]!	; 0x364

00010cbc <rb_event_addish@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #20, 20	; 0x14000
   10cc4:	ldr	pc, [ip, #860]!	; 0x35c

00010cc8 <rb_ignore_errno@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #20, 20	; 0x14000
   10cd0:	ldr	pc, [ip, #852]!	; 0x354

00010cd4 <__libc_start_main@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #20, 20	; 0x14000
   10cdc:	ldr	pc, [ip, #844]!	; 0x34c

00010ce0 <rb_setselect@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #20, 20	; 0x14000
   10ce8:	ldr	pc, [ip, #836]!	; 0x344

00010cec <__gmon_start__@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #20, 20	; 0x14000
   10cf4:	ldr	pc, [ip, #828]!	; 0x33c

00010cf8 <rb_send_fd_buf@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #20, 20	; 0x14000
   10d00:	ldr	pc, [ip, #820]!	; 0x334

00010d04 <vsnprintf@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #20, 20	; 0x14000
   10d0c:	ldr	pc, [ip, #812]!	; 0x32c

00010d10 <getenv@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #20, 20	; 0x14000
   10d18:	ldr	pc, [ip, #804]!	; 0x324

00010d1c <calloc@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #20, 20	; 0x14000
   10d24:	ldr	pc, [ip, #796]!	; 0x31c

00010d28 <rb_set_nb@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #20, 20	; 0x14000
   10d30:	ldr	pc, [ip, #788]!	; 0x314

00010d34 <memset@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #20, 20	; 0x14000
   10d3c:	ldr	pc, [ip, #780]!	; 0x30c

00010d40 <__assert_fail@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #20, 20	; 0x14000
   10d48:	ldr	pc, [ip, #772]!	; 0x304

00010d4c <rb_linebuf_parse@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #20, 20	; 0x14000
   10d54:	ldr	pc, [ip, #764]!	; 0x2fc

00010d58 <rb_strlcpy@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #20, 20	; 0x14000
   10d60:	ldr	pc, [ip, #756]!	; 0x2f4

00010d64 <rb_init_rawbuffers@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #20, 20	; 0x14000
   10d6c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d70 <free@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #20, 20	; 0x14000
   10d78:	ldr	pc, [ip, #740]!	; 0x2e4

00010d7c <rb_lib_loop@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #20, 20	; 0x14000
   10d84:	ldr	pc, [ip, #732]!	; 0x2dc

00010d88 <rb_read@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #20, 20	; 0x14000
   10d90:	ldr	pc, [ip, #724]!	; 0x2d4

00010d94 <rb_set_type@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #20, 20	; 0x14000
   10d9c:	ldr	pc, [ip, #716]!	; 0x2cc

00010da0 <rb_linebuf_get@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #20, 20	; 0x14000
   10da8:	ldr	pc, [ip, #708]!	; 0x2c4

00010dac <rb_linebuf_flush@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #20, 20	; 0x14000
   10db4:	ldr	pc, [ip, #700]!	; 0x2bc

00010db8 <strlen@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #20, 20	; 0x14000
   10dc0:	ldr	pc, [ip, #692]!	; 0x2b4

00010dc4 <memcpy@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #20, 20	; 0x14000
   10dcc:	ldr	pc, [ip, #684]!	; 0x2ac

00010dd0 <rb_linebuf_donebuf@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #20, 20	; 0x14000
   10dd8:	ldr	pc, [ip, #676]!	; 0x2a4

00010ddc <rb_strcasestr@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #20, 20	; 0x14000
   10de4:	ldr	pc, [ip, #668]!	; 0x29c

00010de8 <rb_close@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #20, 20	; 0x14000
   10df0:	ldr	pc, [ip, #660]!	; 0x294

00010df4 <strtol@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #20, 20	; 0x14000
   10dfc:	ldr	pc, [ip, #652]!	; 0x28c

00010e00 <sigaddset@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #20, 20	; 0x14000
   10e08:	ldr	pc, [ip, #644]!	; 0x284

00010e0c <rb_rawbuf_length@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #20, 20	; 0x14000
   10e14:	ldr	pc, [ip, #636]!	; 0x27c

00010e18 <rb_free_rawbuffer@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #20, 20	; 0x14000
   10e20:	ldr	pc, [ip, #628]!	; 0x274

00010e24 <close@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #20, 20	; 0x14000
   10e2c:	ldr	pc, [ip, #620]!	; 0x26c

00010e30 <fwrite@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #20, 20	; 0x14000
   10e38:	ldr	pc, [ip, #612]!	; 0x264

00010e3c <rb_outofmemory@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #20, 20	; 0x14000
   10e44:	ldr	pc, [ip, #604]!	; 0x25c

00010e48 <rb_rawbuf_get@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #20, 20	; 0x14000
   10e50:	ldr	pc, [ip, #596]!	; 0x254

00010e54 <sigaction@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #20, 20	; 0x14000
   10e5c:	ldr	pc, [ip, #588]!	; 0x24c

00010e60 <rb_lib_init@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #20, 20	; 0x14000
   10e68:	ldr	pc, [ip, #580]!	; 0x244

00010e6c <rb_new_rawbuffer@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #20, 20	; 0x14000
   10e74:	ldr	pc, [ip, #572]!	; 0x23c

00010e78 <rb_open@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #20, 20	; 0x14000
   10e80:	ldr	pc, [ip, #564]!	; 0x234

00010e84 <rb_recv_fd_buf@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #20, 20	; 0x14000
   10e8c:	ldr	pc, [ip, #556]!	; 0x22c

00010e90 <dup2@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #20, 20	; 0x14000
   10e98:	ldr	pc, [ip, #548]!	; 0x224

00010e9c <rb_linebuf_newbuf@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #20, 20	; 0x14000
   10ea4:	ldr	pc, [ip, #540]!	; 0x21c

00010ea8 <rb_linebuf_init@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #20, 20	; 0x14000
   10eb0:	ldr	pc, [ip, #532]!	; 0x214

00010eb4 <getrlimit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #20, 20	; 0x14000
   10ebc:	ldr	pc, [ip, #524]!	; 0x20c

00010ec0 <rb_rawbuf_append@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #20, 20	; 0x14000
   10ec8:	ldr	pc, [ip, #516]!	; 0x204

00010ecc <rb_rawbuf_flush@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #20, 20	; 0x14000
   10ed4:	ldr	pc, [ip, #508]!	; 0x1fc

00010ed8 <exit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #20, 20	; 0x14000
   10ee0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ee4 <__errno_location@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #20, 20	; 0x14000
   10eec:	ldr	pc, [ip, #492]!	; 0x1ec

00010ef0 <rb_base64_encode@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #20, 20	; 0x14000
   10ef8:	ldr	pc, [ip, #484]!	; 0x1e4

Disassembly of section .text:

00010efc <.text>:
   10efc:	push	{r4, lr}
   10f00:	mov	r2, #213	; 0xd5
   10f04:	ldr	r3, [pc, #8]	; 10f14 <rb_base64_encode@plt+0x24>
   10f08:	ldr	r1, [pc, #8]	; 10f18 <rb_base64_encode@plt+0x28>
   10f0c:	ldr	r0, [pc, #8]	; 10f1c <rb_base64_encode@plt+0x2c>
   10f10:	bl	10d40 <__assert_fail@plt>
   10f14:	andeq	r3, r1, r0, ror #31
   10f18:	andeq	r4, r1, r0
   10f1c:	andeq	r4, r1, ip, lsl r0
   10f20:	push	{r4, lr}
   10f24:	mov	r2, #236	; 0xec
   10f28:	ldr	r3, [pc, #8]	; 10f38 <rb_base64_encode@plt+0x48>
   10f2c:	ldr	r1, [pc, #8]	; 10f3c <rb_base64_encode@plt+0x4c>
   10f30:	ldr	r0, [pc, #8]	; 10f40 <rb_base64_encode@plt+0x50>
   10f34:	bl	10d40 <__assert_fail@plt>
   10f38:	strdeq	r3, [r1], -r0
   10f3c:	andeq	r4, r1, r0
   10f40:	andeq	r4, r1, ip, lsr #32
   10f44:	push	{r4, r5, r6, r7, r8, r9, lr}
   10f48:	sub	sp, sp, #164	; 0xa4
   10f4c:	add	r1, sp, #20
   10f50:	mov	r0, #7
   10f54:	bl	10eb4 <getrlimit@plt>
   10f58:	cmp	r0, #0
   10f5c:	ldr	r0, [pc, #740]	; 11248 <rb_base64_encode@plt+0x358>
   10f60:	ldreq	r5, [sp, #20]
   10f64:	ldrne	r5, [pc, #736]	; 1124c <rb_base64_encode@plt+0x35c>
   10f68:	bl	10d10 <getenv@plt>
   10f6c:	mov	r7, r0
   10f70:	ldr	r0, [pc, #728]	; 11250 <rb_base64_encode@plt+0x360>
   10f74:	bl	10d10 <getenv@plt>
   10f78:	mov	r6, r0
   10f7c:	ldr	r0, [pc, #720]	; 11254 <rb_base64_encode@plt+0x364>
   10f80:	bl	10d10 <getenv@plt>
   10f84:	cmp	r6, #0
   10f88:	cmpne	r7, #0
   10f8c:	moveq	r4, #1
   10f90:	movne	r4, #0
   10f94:	cmp	r0, #0
   10f98:	orreq	r4, r4, #1
   10f9c:	cmp	r4, #0
   10fa0:	mov	r8, r0
   10fa4:	bne	111d8 <rb_base64_encode@plt+0x2e8>
   10fa8:	mov	r0, r7
   10fac:	mov	r2, #10
   10fb0:	mov	r1, r4
   10fb4:	bl	10df4 <strtol@plt>
   10fb8:	mov	r2, #10
   10fbc:	mov	r1, r4
   10fc0:	mov	r7, r0
   10fc4:	mov	r0, r6
   10fc8:	bl	10df4 <strtol@plt>
   10fcc:	mov	r2, #10
   10fd0:	mov	r1, r4
   10fd4:	mov	r6, r0
   10fd8:	mov	r0, r8
   10fdc:	bl	10df4 <strtol@plt>
   10fe0:	ldr	r3, [pc, #624]	; 11258 <rb_base64_encode@plt+0x368>
   10fe4:	cmp	r5, #0
   10fe8:	str	r0, [r3, #12]
   10fec:	ble	11034 <rb_base64_encode@plt+0x144>
   10ff0:	add	r4, r4, #1
   10ff4:	cmp	r4, r5
   10ff8:	beq	11034 <rb_base64_encode@plt+0x144>
   10ffc:	cmp	r4, r7
   11000:	cmpne	r4, r6
   11004:	movne	r3, #1
   11008:	moveq	r3, #0
   1100c:	cmp	r4, #2
   11010:	movle	r3, #0
   11014:	andgt	r3, r3, #1
   11018:	cmp	r3, #0
   1101c:	beq	10ff0 <rb_base64_encode@plt+0x100>
   11020:	mov	r0, r4
   11024:	add	r4, r4, #1
   11028:	bl	10e24 <close@plt>
   1102c:	cmp	r4, r5
   11030:	bne	10ffc <rb_base64_encode@plt+0x10c>
   11034:	mov	r1, #2
   11038:	ldr	r0, [pc, #540]	; 1125c <rb_base64_encode@plt+0x36c>
   1103c:	bl	10c80 <open@plt>
   11040:	subs	r4, r0, #0
   11044:	blt	11074 <rb_base64_encode@plt+0x184>
   11048:	cmp	r7, #0
   1104c:	cmpne	r6, #0
   11050:	bne	1120c <rb_base64_encode@plt+0x31c>
   11054:	cmp	r7, #1
   11058:	cmpne	r6, #1
   1105c:	bne	11234 <rb_base64_encode@plt+0x344>
   11060:	cmp	r7, #2
   11064:	cmpne	r6, #2
   11068:	bne	11224 <rb_base64_encode@plt+0x334>
   1106c:	cmp	r4, #2
   11070:	bgt	11218 <rb_base64_encode@plt+0x328>
   11074:	add	r8, sp, #24
   11078:	mov	r4, #0
   1107c:	mov	r0, r8
   11080:	mov	r9, #1
   11084:	str	r4, [sp, #152]	; 0x98
   11088:	str	r9, [sp, #20]
   1108c:	bl	10c8c <sigemptyset@plt>
   11090:	mov	r0, r8
   11094:	mov	r1, #13
   11098:	bl	10e00 <sigaddset@plt>
   1109c:	mov	r0, r8
   110a0:	mov	r1, #14
   110a4:	bl	10e00 <sigaddset@plt>
   110a8:	mov	r0, r8
   110ac:	mov	r1, #5
   110b0:	bl	10e00 <sigaddset@plt>
   110b4:	mov	r0, r8
   110b8:	mov	r1, #28
   110bc:	bl	10e00 <sigaddset@plt>
   110c0:	mov	r2, r4
   110c4:	add	r1, sp, #20
   110c8:	mov	r0, #28
   110cc:	bl	10e54 <sigaction@plt>
   110d0:	mov	r2, r4
   110d4:	add	r1, sp, #20
   110d8:	mov	r0, #13
   110dc:	bl	10e54 <sigaction@plt>
   110e0:	mov	r2, r4
   110e4:	add	r1, sp, #20
   110e8:	mov	r0, #5
   110ec:	bl	10e54 <sigaction@plt>
   110f0:	ldr	r3, [pc, #360]	; 11260 <rb_base64_encode@plt+0x370>
   110f4:	add	r1, sp, #20
   110f8:	mov	r2, r4
   110fc:	mov	r0, #14
   11100:	mov	r8, #4096	; 0x1000
   11104:	str	r3, [sp, #20]
   11108:	bl	10e54 <sigaction@plt>
   1110c:	mov	ip, #1024	; 0x400
   11110:	mov	r3, r4
   11114:	mov	r2, r4
   11118:	mov	r1, r4
   1111c:	str	ip, [sp, #4]
   11120:	mov	r0, r4
   11124:	str	r8, [sp, #8]
   11128:	str	r5, [sp]
   1112c:	bl	10e60 <rb_lib_init@plt>
   11130:	mov	r0, r8
   11134:	bl	10ea8 <rb_linebuf_init@plt>
   11138:	mov	r0, r8
   1113c:	bl	10d64 <rb_init_rawbuffers@plt>
   11140:	mov	r0, r9
   11144:	mov	r1, #48	; 0x30
   11148:	bl	10d1c <calloc@plt>
   1114c:	subs	r8, r0, #0
   11150:	beq	11244 <rb_base64_encode@plt+0x354>
   11154:	ldr	r5, [pc, #264]	; 11264 <rb_base64_encode@plt+0x374>
   11158:	mov	r0, r7
   1115c:	ldr	r2, [pc, #260]	; 11268 <rb_base64_encode@plt+0x378>
   11160:	mov	r1, #4
   11164:	str	r8, [r5, #-536]	; 0xfffffde8
   11168:	bl	10e78 <rb_open@plt>
   1116c:	ldr	r2, [pc, #248]	; 1126c <rb_base64_encode@plt+0x37c>
   11170:	mov	r1, #8
   11174:	ldr	r7, [r5, #-536]	; 0xfffffde8
   11178:	str	r0, [r8, #16]
   1117c:	mov	r0, r6
   11180:	bl	10e78 <rb_open@plt>
   11184:	ldr	r3, [r5, #-536]	; 0xfffffde8
   11188:	str	r0, [r7, #20]
   1118c:	ldr	r0, [r3, #16]
   11190:	bl	10d28 <rb_set_nb@plt>
   11194:	ldr	r3, [r5, #-536]	; 0xfffffde8
   11198:	ldr	r0, [r3, #20]
   1119c:	bl	10d28 <rb_set_nb@plt>
   111a0:	mov	r2, r4
   111a4:	mov	r3, #10
   111a8:	ldr	r1, [pc, #192]	; 11270 <rb_base64_encode@plt+0x380>
   111ac:	ldr	r0, [pc, #192]	; 11274 <rb_base64_encode@plt+0x384>
   111b0:	bl	10cbc <rb_event_addish@plt>
   111b4:	ldr	r3, [r5, #-536]	; 0xfffffde8
   111b8:	mov	r1, r4
   111bc:	ldr	r0, [r3, #20]
   111c0:	bl	1141c <rb_base64_encode@plt+0x52c>
   111c4:	ldr	r1, [r5, #-536]	; 0xfffffde8
   111c8:	ldr	r0, [r1, #16]
   111cc:	bl	1238c <rb_base64_encode@plt+0x149c>
   111d0:	mov	r0, r4
   111d4:	bl	10d7c <rb_lib_loop@plt>
   111d8:	ldr	r4, [pc, #152]	; 11278 <rb_base64_encode@plt+0x388>
   111dc:	mov	r2, #52	; 0x34
   111e0:	mov	r1, #1
   111e4:	ldr	r3, [r4]
   111e8:	ldr	r0, [pc, #140]	; 1127c <rb_base64_encode@plt+0x38c>
   111ec:	bl	10e30 <fwrite@plt>
   111f0:	ldr	r3, [r4]
   111f4:	mov	r2, #49	; 0x31
   111f8:	mov	r1, #1
   111fc:	ldr	r0, [pc, #124]	; 11280 <rb_base64_encode@plt+0x390>
   11200:	bl	10e30 <fwrite@plt>
   11204:	mov	r0, #1
   11208:	bl	10ed8 <exit@plt>
   1120c:	mov	r1, #0
   11210:	bl	10e90 <dup2@plt>
   11214:	b	11054 <rb_base64_encode@plt+0x164>
   11218:	mov	r0, r4
   1121c:	bl	10e24 <close@plt>
   11220:	b	11074 <rb_base64_encode@plt+0x184>
   11224:	mov	r1, #2
   11228:	mov	r0, r4
   1122c:	bl	10e90 <dup2@plt>
   11230:	b	1106c <rb_base64_encode@plt+0x17c>
   11234:	mov	r1, #1
   11238:	mov	r0, r4
   1123c:	bl	10e90 <dup2@plt>
   11240:	b	11060 <rb_base64_encode@plt+0x170>
   11244:	bl	10e3c <rb_outofmemory@plt>
   11248:	ldrdeq	r4, [r1], -ip
   1124c:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   11250:	andeq	r4, r1, r4, ror #3
   11254:	strdeq	r4, [r1], -r0
   11258:	strdeq	r5, [r2], -r8
   1125c:	andeq	r4, r1, r8, ror #4
   11260:	andeq	r1, r1, ip, lsr #7
   11264:	andeq	fp, r2, r0, ror #1
   11268:	andeq	r4, r1, r4, ror r2
   1126c:	andeq	r4, r1, r8, lsl #5
   11270:			; <UNDEFINED> instruction: 0x000113b0
   11274:	muleq	r1, r4, r2
   11278:	strdeq	r5, [r2], -r0
   1127c:	strdeq	r4, [r1], -ip
   11280:	andeq	r4, r1, r4, lsr r2
   11284:	mov	fp, #0
   11288:	mov	lr, #0
   1128c:	pop	{r1}		; (ldr r1, [sp], #4)
   11290:	mov	r2, sp
   11294:	push	{r2}		; (str r2, [sp, #-4]!)
   11298:	push	{r0}		; (str r0, [sp, #-4]!)
   1129c:	ldr	ip, [pc, #16]	; 112b4 <rb_base64_encode@plt+0x3c4>
   112a0:	push	{ip}		; (str ip, [sp, #-4]!)
   112a4:	ldr	r0, [pc, #12]	; 112b8 <rb_base64_encode@plt+0x3c8>
   112a8:	ldr	r3, [pc, #12]	; 112bc <rb_base64_encode@plt+0x3cc>
   112ac:	bl	10cd4 <__libc_start_main@plt>
   112b0:	bl	10cb0 <abort@plt>
   112b4:	ldrdeq	r3, [r1], -r0
   112b8:	andeq	r0, r1, r4, asr #30
   112bc:	andeq	r3, r1, r0, ror pc
   112c0:	ldr	r3, [pc, #20]	; 112dc <rb_base64_encode@plt+0x3ec>
   112c4:	ldr	r2, [pc, #20]	; 112e0 <rb_base64_encode@plt+0x3f0>
   112c8:	add	r3, pc, r3
   112cc:	ldr	r2, [r3, r2]
   112d0:	cmp	r2, #0
   112d4:	bxeq	lr
   112d8:	b	10cec <__gmon_start__@plt>
   112dc:	andeq	r3, r1, r0, lsr sp
   112e0:	andeq	r0, r0, r0, ror #1
   112e4:	ldr	r3, [pc, #28]	; 11308 <rb_base64_encode@plt+0x418>
   112e8:	ldr	r0, [pc, #28]	; 1130c <rb_base64_encode@plt+0x41c>
   112ec:	sub	r3, r3, r0
   112f0:	cmp	r3, #6
   112f4:	bxls	lr
   112f8:	ldr	r3, [pc, #16]	; 11310 <rb_base64_encode@plt+0x420>
   112fc:	cmp	r3, #0
   11300:	bxeq	lr
   11304:	bx	r3
   11308:	andeq	r5, r2, pc, ror #1
   1130c:	andeq	r5, r2, ip, ror #1
   11310:	andeq	r0, r0, r0
   11314:	ldr	r1, [pc, #36]	; 11340 <rb_base64_encode@plt+0x450>
   11318:	ldr	r0, [pc, #36]	; 11344 <rb_base64_encode@plt+0x454>
   1131c:	sub	r1, r1, r0
   11320:	asr	r1, r1, #2
   11324:	add	r1, r1, r1, lsr #31
   11328:	asrs	r1, r1, #1
   1132c:	bxeq	lr
   11330:	ldr	r3, [pc, #16]	; 11348 <rb_base64_encode@plt+0x458>
   11334:	cmp	r3, #0
   11338:	bxeq	lr
   1133c:	bx	r3
   11340:	andeq	r5, r2, ip, ror #1
   11344:	andeq	r5, r2, ip, ror #1
   11348:	andeq	r0, r0, r0
   1134c:	push	{r4, lr}
   11350:	ldr	r4, [pc, #24]	; 11370 <rb_base64_encode@plt+0x480>
   11354:	ldrb	r3, [r4]
   11358:	cmp	r3, #0
   1135c:	popne	{r4, pc}
   11360:	bl	112e4 <rb_base64_encode@plt+0x3f4>
   11364:	mov	r3, #1
   11368:	strb	r3, [r4]
   1136c:	pop	{r4, pc}
   11370:	strdeq	r5, [r2], -r4
   11374:	ldr	r0, [pc, #40]	; 113a4 <rb_base64_encode@plt+0x4b4>
   11378:	ldr	r3, [r0]
   1137c:	cmp	r3, #0
   11380:	bne	11388 <rb_base64_encode@plt+0x498>
   11384:	b	11314 <rb_base64_encode@plt+0x424>
   11388:	ldr	r3, [pc, #24]	; 113a8 <rb_base64_encode@plt+0x4b8>
   1138c:	cmp	r3, #0
   11390:	beq	11384 <rb_base64_encode@plt+0x494>
   11394:	push	{r4, lr}
   11398:	blx	r3
   1139c:	pop	{r4, lr}
   113a0:	b	11314 <rb_base64_encode@plt+0x424>
   113a4:	strdeq	r4, [r2], -ip
   113a8:	andeq	r0, r0, r0
   113ac:	bx	lr
   113b0:	push	{r4, r5, r6, lr}
   113b4:	ldr	r6, [pc, #92]	; 11418 <rb_base64_encode@plt+0x528>
   113b8:	ldr	r3, [r6]
   113bc:	cmp	r3, #0
   113c0:	beq	11408 <rb_base64_encode@plt+0x518>
   113c4:	ldr	r5, [r3, #8]
   113c8:	b	113d4 <rb_base64_encode@plt+0x4e4>
   113cc:	mov	r3, r5
   113d0:	ldr	r5, [r5, #8]
   113d4:	ldr	r4, [r3]
   113d8:	add	r0, r4, #52	; 0x34
   113dc:	bl	10dd0 <rb_linebuf_donebuf@plt>
   113e0:	add	r0, r4, #24
   113e4:	bl	10dd0 <rb_linebuf_donebuf@plt>
   113e8:	ldr	r0, [r4, #20]
   113ec:	bl	10e18 <rb_free_rawbuffer@plt>
   113f0:	ldr	r0, [r4, #16]
   113f4:	bl	10e18 <rb_free_rawbuffer@plt>
   113f8:	mov	r0, r4
   113fc:	bl	10d70 <free@plt>
   11400:	cmp	r5, #0
   11404:	bne	113cc <rb_base64_encode@plt+0x4dc>
   11408:	mov	r3, #0
   1140c:	str	r3, [r6]
   11410:	str	r3, [r6, #4]
   11414:	pop	{r4, r5, r6, pc}
   11418:	strdeq	r5, [r2], -r8
   1141c:	push	{r4, r5, lr}
   11420:	sub	sp, sp, #16384	; 0x4000
   11424:	sub	sp, sp, #4
   11428:	mov	r4, r0
   1142c:	mov	r5, #16384	; 0x4000
   11430:	mov	r2, r5
   11434:	mov	r1, sp
   11438:	mov	r0, r4
   1143c:	bl	10d88 <rb_read@plt>
   11440:	cmp	r0, #0
   11444:	bgt	11430 <rb_base64_encode@plt+0x540>
   11448:	beq	11480 <rb_base64_encode@plt+0x590>
   1144c:	bl	10ee4 <__errno_location@plt>
   11450:	ldr	r0, [r0]
   11454:	bl	10cc8 <rb_ignore_errno@plt>
   11458:	cmp	r0, #0
   1145c:	beq	11480 <rb_base64_encode@plt+0x590>
   11460:	mov	r0, r4
   11464:	mov	r3, #0
   11468:	ldr	r2, [pc, #24]	; 11488 <rb_base64_encode@plt+0x598>
   1146c:	mov	r1, #1
   11470:	bl	10ce0 <rb_setselect@plt>
   11474:	add	sp, sp, #16384	; 0x4000
   11478:	add	sp, sp, #4
   1147c:	pop	{r4, r5, pc}
   11480:	mov	r0, #0
   11484:	bl	10ed8 <exit@plt>
   11488:	andeq	r1, r1, ip, lsl r4
   1148c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11490:	mov	r8, r1
   11494:	ldr	r6, [r1, #36]	; 0x24
   11498:	sub	sp, sp, #8
   1149c:	cmp	r6, #0
   114a0:	beq	11590 <rb_base64_encode@plt+0x6a0>
   114a4:	ldr	r7, [r6, #8]
   114a8:	ldr	sl, [pc, #272]	; 115c0 <rb_base64_encode@plt+0x6d0>
   114ac:	mov	r9, #0
   114b0:	ldr	r4, [r6]
   114b4:	ldr	r1, [sl, #12]
   114b8:	ldr	r0, [r8, #16]
   114bc:	ldr	r3, [r4, #12]
   114c0:	ldr	r2, [r4, #36]	; 0x24
   114c4:	str	r1, [sp, #4]
   114c8:	ldr	r1, [r4, #16]
   114cc:	add	r5, r4, #20
   114d0:	str	r1, [sp]
   114d4:	mov	r1, r5
   114d8:	bl	10cf8 <rb_send_fd_buf@plt>
   114dc:	cmp	r0, #0
   114e0:	ble	1156c <rb_base64_encode@plt+0x67c>
   114e4:	ldmib	r6, {r2, r3}
   114e8:	cmp	r3, #0
   114ec:	strne	r2, [r3, #4]
   114f0:	ldrne	r2, [r6, #4]
   114f4:	streq	r2, [r8, #40]	; 0x28
   114f8:	cmp	r2, #0
   114fc:	strne	r3, [r2, #8]
   11500:	streq	r3, [r8, #36]	; 0x24
   11504:	ldr	r2, [r4, #36]	; 0x24
   11508:	ldr	r3, [r8, #44]	; 0x2c
   1150c:	cmp	r2, #0
   11510:	sub	r3, r3, #1
   11514:	str	r9, [r6, #4]
   11518:	str	r9, [r6, #8]
   1151c:	str	r3, [r8, #44]	; 0x2c
   11520:	movgt	r6, #0
   11524:	ble	11540 <rb_base64_encode@plt+0x650>
   11528:	ldr	r0, [r5], #4
   1152c:	bl	10de8 <rb_close@plt>
   11530:	ldr	r3, [r4, #36]	; 0x24
   11534:	add	r6, r6, #1
   11538:	cmp	r3, r6
   1153c:	bgt	11528 <rb_base64_encode@plt+0x638>
   11540:	ldr	r0, [r4, #12]
   11544:	cmp	r0, #0
   11548:	beq	11550 <rb_base64_encode@plt+0x660>
   1154c:	bl	10d70 <free@plt>
   11550:	mov	r0, r4
   11554:	bl	10d70 <free@plt>
   11558:	cmp	r7, #0
   1155c:	beq	11590 <rb_base64_encode@plt+0x6a0>
   11560:	mov	r6, r7
   11564:	ldr	r7, [r7, #8]
   11568:	b	114b0 <rb_base64_encode@plt+0x5c0>
   1156c:	beq	11588 <rb_base64_encode@plt+0x698>
   11570:	bge	11558 <rb_base64_encode@plt+0x668>
   11574:	bl	10ee4 <__errno_location@plt>
   11578:	ldr	r0, [r0]
   1157c:	bl	10cc8 <rb_ignore_errno@plt>
   11580:	cmp	r0, #0
   11584:	bne	11558 <rb_base64_encode@plt+0x668>
   11588:	mov	r0, #0
   1158c:	bl	10ed8 <exit@plt>
   11590:	ldr	r3, [r8, #44]	; 0x2c
   11594:	cmp	r3, #0
   11598:	bne	115a4 <rb_base64_encode@plt+0x6b4>
   1159c:	add	sp, sp, #8
   115a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   115a4:	mov	r3, r8
   115a8:	ldr	r0, [r8, #16]
   115ac:	ldr	r2, [pc, #16]	; 115c4 <rb_base64_encode@plt+0x6d4>
   115b0:	mov	r1, #2
   115b4:	add	sp, sp, #8
   115b8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   115bc:	b	10ce0 <rb_setselect@plt>
   115c0:	strdeq	r5, [r2], -r8
   115c4:	andeq	r1, r1, ip, lsl #9
   115c8:	push	{r4, r5, lr}
   115cc:	subs	r4, r1, #0
   115d0:	sub	sp, sp, #16384	; 0x4000
   115d4:	sub	sp, sp, #4
   115d8:	beq	11624 <rb_base64_encode@plt+0x734>
   115dc:	mov	r5, #16384	; 0x4000
   115e0:	mov	r2, r5
   115e4:	mov	r1, sp
   115e8:	ldr	r0, [r4, #88]	; 0x58
   115ec:	bl	10d88 <rb_read@plt>
   115f0:	cmp	r0, #0
   115f4:	beq	11630 <rb_base64_encode@plt+0x740>
   115f8:	bge	115e0 <rb_base64_encode@plt+0x6f0>
   115fc:	bl	10ee4 <__errno_location@plt>
   11600:	ldr	r0, [r0]
   11604:	bl	10cc8 <rb_ignore_errno@plt>
   11608:	cmp	r0, #0
   1160c:	beq	11630 <rb_base64_encode@plt+0x740>
   11610:	mov	r3, r4
   11614:	ldr	r0, [r4, #88]	; 0x58
   11618:	ldr	r2, [pc, #104]	; 11688 <rb_base64_encode@plt+0x798>
   1161c:	mov	r1, #1
   11620:	bl	10ce0 <rb_setselect@plt>
   11624:	add	sp, sp, #16384	; 0x4000
   11628:	add	sp, sp, #4
   1162c:	pop	{r4, r5, pc}
   11630:	ldr	r0, [r4, #88]	; 0x58
   11634:	bl	10de8 <rb_close@plt>
   11638:	ldr	r3, [pc, #76]	; 1168c <rb_base64_encode@plt+0x79c>
   1163c:	mov	r1, #0
   11640:	str	r4, [r4]
   11644:	ldr	r2, [r3]
   11648:	str	r1, [r4, #4]
   1164c:	cmp	r2, r1
   11650:	str	r2, [r4, #8]
   11654:	strne	r4, [r2, #4]
   11658:	beq	11678 <rb_base64_encode@plt+0x788>
   1165c:	ldr	r2, [r3, #8]
   11660:	str	r4, [r3]
   11664:	add	r2, r2, #1
   11668:	str	r2, [r3, #8]
   1166c:	add	sp, sp, #16384	; 0x4000
   11670:	add	sp, sp, #4
   11674:	pop	{r4, r5, pc}
   11678:	ldr	r2, [r3, #4]
   1167c:	cmp	r2, #0
   11680:	streq	r4, [r3, #4]
   11684:	b	1165c <rb_base64_encode@plt+0x76c>
   11688:	andeq	r1, r1, r8, asr #11
   1168c:	strdeq	r5, [r2], -r8
   11690:	ldrb	ip, [r0, #128]	; 0x80
   11694:	tst	ip, #2
   11698:	bxne	lr
   1169c:	tst	ip, #8
   116a0:	push	{r2, r3}
   116a4:	push	{r4, r5, r6, r7, lr}
   116a8:	mov	r4, r0
   116ac:	sub	sp, sp, #396	; 0x18c
   116b0:	mov	r5, r1
   116b4:	bne	117b0 <rb_base64_encode@plt+0x8c0>
   116b8:	ldr	r1, [r4, #84]	; 0x54
   116bc:	ldr	r0, [r4, #16]
   116c0:	bl	10ecc <rb_rawbuf_flush@plt>
   116c4:	add	r1, r4, #24
   116c8:	ldr	r0, [r4, #88]	; 0x58
   116cc:	bl	10dac <rb_linebuf_flush@plt>
   116d0:	ldr	r0, [r4, #84]	; 0x54
   116d4:	bl	10de8 <rb_close@plt>
   116d8:	ldr	ip, [r4, #80]	; 0x50
   116dc:	ldr	r0, [pc, #552]	; 1190c <rb_base64_encode@plt+0xa1c>
   116e0:	mov	r3, #2000	; 0x7d0
   116e4:	ldrb	r2, [r4, #128]	; 0x80
   116e8:	umull	r1, r0, r0, ip
   116ec:	ldr	r1, [r4, #8]
   116f0:	orr	r2, r2, #2
   116f4:	lsr	r0, r0, #7
   116f8:	cmp	r1, #0
   116fc:	mul	r0, r3, r0
   11700:	strb	r2, [r4, #128]	; 0x80
   11704:	sub	r0, ip, r0
   11708:	beq	117b8 <rb_base64_encode@plt+0x8c8>
   1170c:	ldr	r3, [r4, #4]
   11710:	ldr	r6, [pc, #504]	; 11910 <rb_base64_encode@plt+0xa20>
   11714:	str	r3, [r1, #4]
   11718:	ldr	r3, [r4, #4]
   1171c:	lsl	ip, r0, #1
   11720:	cmp	r3, #0
   11724:	addeq	r3, ip, r0
   11728:	add	r0, ip, r0
   1172c:	addeq	r3, r6, r3, lsl #2
   11730:	strne	r1, [r3, #8]
   11734:	streq	r1, [r3, #16]
   11738:	add	r0, r6, r0, lsl #2
   1173c:	ldr	r3, [sp, #416]	; 0x1a0
   11740:	mov	r7, #0
   11744:	cmp	r3, #0
   11748:	cmpne	r5, #0
   1174c:	ldr	r3, [r0, #24]
   11750:	moveq	r5, #1
   11754:	sub	r3, r3, #1
   11758:	str	r7, [r4, #4]
   1175c:	str	r7, [r4, #8]
   11760:	movne	r5, #0
   11764:	str	r3, [r0, #24]
   11768:	bne	117d4 <rb_base64_encode@plt+0x8e4>
   1176c:	ldr	r0, [r4, #88]	; 0x58
   11770:	bl	10de8 <rb_close@plt>
   11774:	ldr	r3, [r6]
   11778:	str	r7, [r4, #4]
   1177c:	cmp	r3, #0
   11780:	str	r4, [r4]
   11784:	str	r3, [r4, #8]
   11788:	strne	r4, [r3, #4]
   1178c:	beq	118d4 <rb_base64_encode@plt+0x9e4>
   11790:	ldr	r3, [r6, #8]
   11794:	str	r4, [r6]
   11798:	add	r3, r3, #1
   1179c:	str	r3, [r6, #8]
   117a0:	add	sp, sp, #396	; 0x18c
   117a4:	pop	{r4, r5, r6, r7, lr}
   117a8:	add	sp, sp, #8
   117ac:	bx	lr
   117b0:	bl	11a24 <rb_base64_encode@plt+0xb34>
   117b4:	b	116b8 <rb_base64_encode@plt+0x7c8>
   117b8:	lsl	ip, r0, #1
   117bc:	add	r2, ip, r0
   117c0:	ldr	r6, [pc, #328]	; 11910 <rb_base64_encode@plt+0xa20>
   117c4:	ldr	r3, [r4, #4]
   117c8:	add	r2, r6, r2, lsl #2
   117cc:	str	r3, [r2, #20]
   117d0:	b	11720 <rb_base64_encode@plt+0x830>
   117d4:	mov	r3, r4
   117d8:	ldr	r0, [r4, #88]	; 0x58
   117dc:	ldr	r2, [pc, #304]	; 11914 <rb_base64_encode@plt+0xa24>
   117e0:	mov	r1, #1
   117e4:	bl	10ce0 <rb_setselect@plt>
   117e8:	ldr	r0, [r4, #88]	; 0x58
   117ec:	mov	r3, r5
   117f0:	mov	r2, r5
   117f4:	mov	r1, #2
   117f8:	bl	10ce0 <rb_setselect@plt>
   117fc:	add	ip, sp, #420	; 0x1a4
   11800:	mov	r3, ip
   11804:	ldr	r2, [sp, #416]	; 0x1a0
   11808:	mov	r1, #128	; 0x80
   1180c:	add	r0, sp, #8
   11810:	str	ip, [sp, #4]
   11814:	bl	10d04 <vsnprintf@plt>
   11818:	ldr	ip, [r4, #80]	; 0x50
   1181c:	mov	r3, #68	; 0x44
   11820:	add	r1, sp, #8
   11824:	mov	r2, #251	; 0xfb
   11828:	add	r0, sp, #141	; 0x8d
   1182c:	str	ip, [sp, #137]	; 0x89
   11830:	strb	r3, [sp, #136]	; 0x88
   11834:	bl	10d58 <rb_strlcpy@plt>
   11838:	add	r0, sp, #8
   1183c:	bl	10db8 <strlen@plt>
   11840:	mov	r1, #40	; 0x28
   11844:	ldr	r6, [r4, #12]
   11848:	add	r7, r0, #6
   1184c:	mov	r0, #1
   11850:	bl	10d1c <calloc@plt>
   11854:	subs	r4, r0, #0
   11858:	beq	118e4 <rb_base64_encode@plt+0x9f4>
   1185c:	mov	r1, r7
   11860:	mov	r0, #1
   11864:	bl	10d1c <calloc@plt>
   11868:	subs	r3, r0, #0
   1186c:	beq	118e4 <rb_base64_encode@plt+0x9f4>
   11870:	str	r3, [r4, #12]
   11874:	str	r7, [r4, #16]
   11878:	mov	r2, r7
   1187c:	add	r1, sp, #136	; 0x88
   11880:	bl	10dc4 <memcpy@plt>
   11884:	cmn	r6, #36	; 0x24
   11888:	str	r5, [r4, #36]	; 0x24
   1188c:	beq	118f8 <rb_base64_encode@plt+0xa08>
   11890:	ldr	r3, [r6, #40]	; 0x28
   11894:	str	r4, [r4]
   11898:	cmp	r3, #0
   1189c:	stmib	r4, {r3, r5}
   118a0:	strne	r4, [r3, #8]
   118a4:	beq	118e8 <rb_base64_encode@plt+0x9f8>
   118a8:	ldr	r3, [r6, #44]	; 0x2c
   118ac:	str	r4, [r6, #40]	; 0x28
   118b0:	add	r3, r3, #1
   118b4:	str	r3, [r6, #44]	; 0x2c
   118b8:	mov	r1, r6
   118bc:	ldr	r0, [r6, #16]
   118c0:	bl	1148c <rb_base64_encode@plt+0x59c>
   118c4:	add	sp, sp, #396	; 0x18c
   118c8:	pop	{r4, r5, r6, r7, lr}
   118cc:	add	sp, sp, #8
   118d0:	bx	lr
   118d4:	ldr	r3, [r6, #4]
   118d8:	cmp	r3, #0
   118dc:	streq	r4, [r6, #4]
   118e0:	b	11790 <rb_base64_encode@plt+0x8a0>
   118e4:	bl	10e3c <rb_outofmemory@plt>
   118e8:	ldr	r3, [r6, #36]	; 0x24
   118ec:	cmp	r3, #0
   118f0:	streq	r4, [r6, #36]	; 0x24
   118f4:	b	118a8 <rb_base64_encode@plt+0x9b8>
   118f8:	ldr	r3, [pc, #24]	; 11918 <rb_base64_encode@plt+0xa28>
   118fc:	mov	r2, #212	; 0xd4
   11900:	ldr	r1, [pc, #20]	; 1191c <rb_base64_encode@plt+0xa2c>
   11904:	ldr	r0, [pc, #20]	; 11920 <rb_base64_encode@plt+0xa30>
   11908:	bl	10d40 <__assert_fail@plt>
   1190c:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   11910:	strdeq	r5, [r2], -r8
   11914:	andeq	r1, r1, r8, asr #11
   11918:	andeq	r3, r1, r0, ror #31
   1191c:	andeq	r4, r1, r0
   11920:	andeq	r4, r1, ip, lsr #32
   11924:	push	{r4, r5, r6, lr}
   11928:	mov	r5, r0
   1192c:	mov	r4, r1
   11930:	b	11944 <rb_base64_encode@plt+0xa54>
   11934:	ldrd	r2, [r4, #96]	; 0x60
   11938:	adds	r2, r2, r0
   1193c:	adc	r3, r3, r0, asr #31
   11940:	strd	r2, [r4, #96]	; 0x60
   11944:	mov	r1, r5
   11948:	ldr	r0, [r4, #16]
   1194c:	bl	10ecc <rb_rawbuf_flush@plt>
   11950:	cmp	r0, #0
   11954:	bgt	11934 <rb_base64_encode@plt+0xa44>
   11958:	beq	11994 <rb_base64_encode@plt+0xaa4>
   1195c:	bl	10ee4 <__errno_location@plt>
   11960:	mov	r5, r0
   11964:	ldr	r0, [r0]
   11968:	bl	10cc8 <rb_ignore_errno@plt>
   1196c:	cmp	r0, #0
   11970:	bne	119b4 <rb_base64_encode@plt+0xac4>
   11974:	ldr	r0, [r5]
   11978:	bl	10c98 <strerror@plt>
   1197c:	ldr	r2, [pc, #144]	; 11a14 <rb_base64_encode@plt+0xb24>
   11980:	mov	r1, #1
   11984:	mov	r3, r0
   11988:	mov	r0, r4
   1198c:	pop	{r4, r5, r6, lr}
   11990:	b	11690 <rb_base64_encode@plt+0x7a0>
   11994:	ldr	r3, [pc, #124]	; 11a18 <rb_base64_encode@plt+0xb28>
   11998:	ldr	r2, [pc, #124]	; 11a1c <rb_base64_encode@plt+0xb2c>
   1199c:	mov	r1, #1
   119a0:	mov	r0, r4
   119a4:	bl	11690 <rb_base64_encode@plt+0x7a0>
   119a8:	bl	10ee4 <__errno_location@plt>
   119ac:	mov	r5, r0
   119b0:	b	11974 <rb_base64_encode@plt+0xa84>
   119b4:	ldr	r0, [r4, #16]
   119b8:	bl	10e0c <rb_rawbuf_length@plt>
   119bc:	mov	r1, #2
   119c0:	cmp	r0, #0
   119c4:	movle	r3, #0
   119c8:	movgt	r3, r4
   119cc:	movle	r2, r3
   119d0:	ldrgt	r2, [pc, #72]	; 11a20 <rb_base64_encode@plt+0xb30>
   119d4:	ldr	r0, [r4, #84]	; 0x54
   119d8:	bl	10ce0 <rb_setselect@plt>
   119dc:	ldrb	r3, [r4, #128]	; 0x80
   119e0:	tst	r3, #1
   119e4:	popeq	{r4, r5, r6, pc}
   119e8:	ldr	r0, [r4, #16]
   119ec:	bl	10e0c <rb_rawbuf_length@plt>
   119f0:	cmp	r0, #0
   119f4:	popne	{r4, r5, r6, pc}
   119f8:	ldrb	r3, [r4, #128]	; 0x80
   119fc:	mov	r1, r4
   11a00:	ldr	r0, [r4, #88]	; 0x58
   11a04:	bic	r3, r3, #1
   11a08:	strb	r3, [r4, #128]	; 0x80
   11a0c:	pop	{r4, r5, r6, lr}
   11a10:	b	11b58 <rb_base64_encode@plt+0xc68>
   11a14:	andeq	r4, r1, ip, lsr r0
   11a18:	andeq	r4, r1, ip, asr #32
   11a1c:	andeq	r4, r1, r0, ror r0
   11a20:	andeq	r2, r1, r4, lsl r7
   11a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a28:	sub	sp, sp, #16384	; 0x4000
   11a2c:	sub	sp, sp, #20
   11a30:	mov	r4, r0
   11a34:	mov	r2, #16384	; 0x4000
   11a38:	add	r0, sp, #16
   11a3c:	mov	r1, #0
   11a40:	bl	10d34 <memset@plt>
   11a44:	add	r7, r4, #52	; 0x34
   11a48:	add	r8, sp, #12
   11a4c:	mov	r6, #0
   11a50:	mov	r5, #16384	; 0x4000
   11a54:	mvn	r9, #126	; 0x7e
   11a58:	mov	sl, #126	; 0x7e
   11a5c:	str	r6, [sp]
   11a60:	mov	r3, #0
   11a64:	mov	r2, r5
   11a68:	add	r1, sp, #16
   11a6c:	mov	r0, r7
   11a70:	bl	10da0 <rb_linebuf_get@plt>
   11a74:	subs	fp, r0, #0
   11a78:	beq	11b1c <rb_base64_encode@plt+0xc2c>
   11a7c:	ldrb	r2, [r4, #128]	; 0x80
   11a80:	tst	r2, #2
   11a84:	bne	11a5c <rb_base64_encode@plt+0xb6c>
   11a88:	add	r2, fp, #2
   11a8c:	cmp	fp, #122	; 0x7a
   11a90:	rev16	ip, r2
   11a94:	mov	r1, r8
   11a98:	mov	r2, #4
   11a9c:	ble	11af0 <rb_base64_encode@plt+0xc00>
   11aa0:	ldr	r0, [r4, #16]
   11aa4:	strb	r9, [sp, #12]
   11aa8:	strb	sl, [sp, #13]
   11aac:	strh	ip, [sp, #14]
   11ab0:	bl	10ec0 <rb_rawbuf_append@plt>
   11ab4:	ldrb	r2, [r4, #128]	; 0x80
   11ab8:	tst	r2, #2
   11abc:	bne	11a5c <rb_base64_encode@plt+0xb6c>
   11ac0:	mov	r2, fp
   11ac4:	add	r1, sp, #16
   11ac8:	ldr	r0, [r4, #16]
   11acc:	bl	10ec0 <rb_rawbuf_append@plt>
   11ad0:	ldrb	r3, [r4, #128]	; 0x80
   11ad4:	mov	r2, #2
   11ad8:	ldr	r1, [pc, #116]	; 11b54 <rb_base64_encode@plt+0xc64>
   11adc:	tst	r3, #2
   11ae0:	ldr	r0, [r4, #16]
   11ae4:	bne	11a5c <rb_base64_encode@plt+0xb6c>
   11ae8:	bl	10ec0 <rb_rawbuf_append@plt>
   11aec:	b	11a5c <rb_base64_encode@plt+0xb6c>
   11af0:	add	ip, fp, #2
   11af4:	and	ip, ip, #127	; 0x7f
   11af8:	mov	r2, #2
   11afc:	ldr	r0, [r4, #16]
   11b00:	strb	r9, [sp, #12]
   11b04:	strb	ip, [sp, #13]
   11b08:	bl	10ec0 <rb_rawbuf_append@plt>
   11b0c:	ldrb	r2, [r4, #128]	; 0x80
   11b10:	tst	r2, #2
   11b14:	bne	11a5c <rb_base64_encode@plt+0xb6c>
   11b18:	b	11ac0 <rb_base64_encode@plt+0xbd0>
   11b1c:	ldrb	r3, [r4, #128]	; 0x80
   11b20:	tst	r3, #8
   11b24:	beq	11b30 <rb_base64_encode@plt+0xc40>
   11b28:	tst	r3, #2
   11b2c:	beq	11b3c <rb_base64_encode@plt+0xc4c>
   11b30:	add	sp, sp, #16384	; 0x4000
   11b34:	add	sp, sp, #20
   11b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b3c:	mov	r1, r4
   11b40:	ldr	r0, [r4, #84]	; 0x54
   11b44:	bl	11924 <rb_base64_encode@plt+0xa34>
   11b48:	add	sp, sp, #16384	; 0x4000
   11b4c:	add	sp, sp, #20
   11b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b54:	andeq	r4, r1, r4, ror r0
   11b58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11b5c:	sub	sp, sp, #16384	; 0x4000
   11b60:	mov	r4, r1
   11b64:	mov	r0, sp
   11b68:	mov	r2, #16384	; 0x4000
   11b6c:	mov	r1, #0
   11b70:	bl	10d34 <memset@plt>
   11b74:	cmp	r4, #0
   11b78:	beq	11b88 <rb_base64_encode@plt+0xc98>
   11b7c:	ldrb	r3, [r4, #128]	; 0x80
   11b80:	ands	r5, r3, #2
   11b84:	beq	11b90 <rb_base64_encode@plt+0xca0>
   11b88:	add	sp, sp, #16384	; 0x4000
   11b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b90:	ldr	r0, [r4, #16]
   11b94:	bl	10e0c <rb_rawbuf_length@plt>
   11b98:	ldr	sl, [pc, #284]	; 11cbc <rb_base64_encode@plt+0xdcc>
   11b9c:	cmp	r0, sl
   11ba0:	movle	r8, #16384	; 0x4000
   11ba4:	addle	r9, r4, #52	; 0x34
   11ba8:	bgt	11c9c <rb_base64_encode@plt+0xdac>
   11bac:	ldrb	r3, [r4, #128]	; 0x80
   11bb0:	mov	r2, r8
   11bb4:	mov	r1, sp
   11bb8:	tst	r3, #2
   11bbc:	bne	11b88 <rb_base64_encode@plt+0xc98>
   11bc0:	ldr	r0, [r4, #88]	; 0x58
   11bc4:	bl	10d88 <rb_read@plt>
   11bc8:	mov	r3, r5
   11bcc:	mov	r1, sp
   11bd0:	subs	ip, r0, #0
   11bd4:	mov	r2, ip
   11bd8:	mov	r0, r9
   11bdc:	beq	11ca8 <rb_base64_encode@plt+0xdb8>
   11be0:	blt	11c5c <rb_base64_encode@plt+0xd6c>
   11be4:	ldrd	r6, [r4, #112]	; 0x70
   11be8:	adds	r6, r6, ip
   11bec:	adc	r7, r7, ip, asr #31
   11bf0:	strd	r6, [r4, #112]	; 0x70
   11bf4:	bl	10d4c <rb_linebuf_parse@plt>
   11bf8:	ldrb	r3, [r4, #128]	; 0x80
   11bfc:	ands	r6, r3, #2
   11c00:	bne	11b88 <rb_base64_encode@plt+0xc98>
   11c04:	ldr	r0, [r4, #16]
   11c08:	bl	10e0c <rb_rawbuf_length@plt>
   11c0c:	cmp	r0, sl
   11c10:	ble	11bac <rb_base64_encode@plt+0xcbc>
   11c14:	ldrb	r1, [r4, #128]	; 0x80
   11c18:	mov	r3, r6
   11c1c:	orr	r1, r1, #1
   11c20:	mov	r2, r3
   11c24:	strb	r1, [r4, #128]	; 0x80
   11c28:	ldr	r0, [r4, #88]	; 0x58
   11c2c:	mov	r1, #1
   11c30:	bl	10ce0 <rb_setselect@plt>
   11c34:	ldrb	r3, [r4, #128]	; 0x80
   11c38:	tst	r3, #8
   11c3c:	beq	11b88 <rb_base64_encode@plt+0xc98>
   11c40:	tst	r3, #2
   11c44:	bne	11b88 <rb_base64_encode@plt+0xc98>
   11c48:	mov	r1, r4
   11c4c:	ldr	r0, [r4, #84]	; 0x54
   11c50:	bl	11924 <rb_base64_encode@plt+0xa34>
   11c54:	add	sp, sp, #16384	; 0x4000
   11c58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c5c:	bl	10ee4 <__errno_location@plt>
   11c60:	ldr	r0, [r0]
   11c64:	bl	10cc8 <rb_ignore_errno@plt>
   11c68:	cmp	r0, #0
   11c6c:	beq	11ca8 <rb_base64_encode@plt+0xdb8>
   11c70:	mov	r3, r4
   11c74:	ldr	r2, [pc, #68]	; 11cc0 <rb_base64_encode@plt+0xdd0>
   11c78:	mov	r1, #1
   11c7c:	ldr	r0, [r4, #88]	; 0x58
   11c80:	bl	10ce0 <rb_setselect@plt>
   11c84:	ldrb	r3, [r4, #128]	; 0x80
   11c88:	tst	r3, #8
   11c8c:	beq	11b88 <rb_base64_encode@plt+0xc98>
   11c90:	mov	r0, r4
   11c94:	bl	11a24 <rb_base64_encode@plt+0xb34>
   11c98:	b	11b88 <rb_base64_encode@plt+0xc98>
   11c9c:	ldrb	r1, [r4, #128]	; 0x80
   11ca0:	mov	r3, r5
   11ca4:	b	11c1c <rb_base64_encode@plt+0xd2c>
   11ca8:	mov	r2, #0
   11cac:	mov	r0, r4
   11cb0:	mov	r1, r2
   11cb4:	bl	11690 <rb_base64_encode@plt+0x7a0>
   11cb8:	b	11b88 <rb_base64_encode@plt+0xc98>
   11cbc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11cc0:	andeq	r1, r1, r8, asr fp
   11cc4:	ldrb	r3, [r1, #128]	; 0x80
   11cc8:	tst	r3, #2
   11ccc:	bxne	lr
   11cd0:	push	{r4, r5, r6, lr}
   11cd4:	mov	r5, r0
   11cd8:	mov	r4, r1
   11cdc:	add	r6, r1, #24
   11ce0:	b	11cf4 <rb_base64_encode@plt+0xe04>
   11ce4:	ldrd	r2, [r4, #120]	; 0x78
   11ce8:	adds	r2, r2, r0
   11cec:	adc	r3, r3, r0, asr #31
   11cf0:	strd	r2, [r4, #120]	; 0x78
   11cf4:	mov	r1, r6
   11cf8:	mov	r0, r5
   11cfc:	bl	10dac <rb_linebuf_flush@plt>
   11d00:	cmp	r0, #0
   11d04:	bgt	11ce4 <rb_base64_encode@plt+0xdf4>
   11d08:	beq	11d44 <rb_base64_encode@plt+0xe54>
   11d0c:	bl	10ee4 <__errno_location@plt>
   11d10:	ldr	r0, [r0]
   11d14:	bl	10cc8 <rb_ignore_errno@plt>
   11d18:	cmp	r0, #0
   11d1c:	beq	11d44 <rb_base64_encode@plt+0xe54>
   11d20:	ldr	r3, [r4, #40]	; 0x28
   11d24:	cmp	r3, #0
   11d28:	ble	11d58 <rb_base64_encode@plt+0xe68>
   11d2c:	mov	r3, r4
   11d30:	ldr	r0, [r4, #88]	; 0x58
   11d34:	ldr	r2, [pc, #52]	; 11d70 <rb_base64_encode@plt+0xe80>
   11d38:	mov	r1, #2
   11d3c:	pop	{r4, r5, r6, lr}
   11d40:	b	10ce0 <rb_setselect@plt>
   11d44:	mov	r2, #0
   11d48:	mov	r0, r4
   11d4c:	mov	r1, r2
   11d50:	pop	{r4, r5, r6, lr}
   11d54:	b	11690 <rb_base64_encode@plt+0x7a0>
   11d58:	mov	r3, #0
   11d5c:	ldr	r0, [r4, #88]	; 0x58
   11d60:	mov	r2, r3
   11d64:	mov	r1, #2
   11d68:	pop	{r4, r5, r6, lr}
   11d6c:	b	10ce0 <rb_setselect@plt>
   11d70:	andeq	r1, r1, r4, asr #25
   11d74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d78:	sub	sp, sp, #32768	; 0x8000
   11d7c:	sub	sp, sp, #132	; 0x84
   11d80:	mov	r5, r1
   11d84:	str	r0, [sp, #4]
   11d88:	mov	r2, #16384	; 0x4000
   11d8c:	add	r0, sp, #128	; 0x80
   11d90:	mov	r1, #0
   11d94:	bl	10d34 <memset@plt>
   11d98:	cmp	r5, #0
   11d9c:	beq	11e80 <rb_base64_encode@plt+0xf90>
   11da0:	ldrb	r3, [r5, #128]	; 0x80
   11da4:	tst	r3, #2
   11da8:	bne	11e80 <rb_base64_encode@plt+0xf90>
   11dac:	ldr	r7, [pc, #1456]	; 12364 <rb_base64_encode@plt+0x1474>
   11db0:	ldr	fp, [pc, #1456]	; 12368 <rb_base64_encode@plt+0x1478>
   11db4:	mov	r2, #16384	; 0x4000
   11db8:	add	r1, sp, #128	; 0x80
   11dbc:	ldr	r0, [sp, #4]
   11dc0:	bl	10d88 <rb_read@plt>
   11dc4:	subs	r9, r0, #0
   11dc8:	blt	122a8 <rb_base64_encode@plt+0x13b8>
   11dcc:	beq	1228c <rb_base64_encode@plt+0x139c>
   11dd0:	mov	r2, r9
   11dd4:	add	r1, sp, #128	; 0x80
   11dd8:	ldr	r0, [r5, #20]
   11ddc:	bl	10ec0 <rb_rawbuf_append@plt>
   11de0:	ldrb	r6, [r5, #128]	; 0x80
   11de4:	ands	r6, r6, #8
   11de8:	movne	r6, #2
   11dec:	movne	r8, #16384	; 0x4000
   11df0:	bne	11eb4 <rb_base64_encode@plt+0xfc4>
   11df4:	add	r0, sp, #16384	; 0x4000
   11df8:	add	r0, r0, #128	; 0x80
   11dfc:	mov	r2, #16384	; 0x4000
   11e00:	mov	r1, r6
   11e04:	bl	10d34 <memset@plt>
   11e08:	mov	r4, #16384	; 0x4000
   11e0c:	add	sl, r5, #129	; 0x81
   11e10:	mov	r8, #37	; 0x25
   11e14:	b	11e30 <rb_base64_encode@plt+0xf40>
   11e18:	add	r0, sp, #16384	; 0x4000
   11e1c:	mov	r1, r7
   11e20:	add	r0, r0, #128	; 0x80
   11e24:	bl	10ddc <rb_strcasestr@plt>
   11e28:	cmp	r0, #0
   11e2c:	bne	120ec <rb_base64_encode@plt+0x11fc>
   11e30:	add	r1, sp, #16384	; 0x4000
   11e34:	mov	r2, r4
   11e38:	add	r1, r1, #128	; 0x80
   11e3c:	ldr	r0, [r5, #20]
   11e40:	bl	10e48 <rb_rawbuf_get@plt>
   11e44:	cmp	r0, #0
   11e48:	bne	11e18 <rb_base64_encode@plt+0xf28>
   11e4c:	ldrb	r3, [r5, #128]	; 0x80
   11e50:	tst	r3, #8
   11e54:	bne	121b8 <rb_base64_encode@plt+0x12c8>
   11e58:	tst	r3, #2
   11e5c:	bne	11e6c <rb_base64_encode@plt+0xf7c>
   11e60:	mov	r1, r5
   11e64:	ldr	r0, [r5, #84]	; 0x54
   11e68:	bl	11924 <rb_base64_encode@plt+0xa34>
   11e6c:	cmp	r9, #16384	; 0x4000
   11e70:	blt	120cc <rb_base64_encode@plt+0x11dc>
   11e74:	ldrb	r3, [r5, #128]	; 0x80
   11e78:	tst	r3, #2
   11e7c:	beq	11db4 <rb_base64_encode@plt+0xec4>
   11e80:	add	sp, sp, #32768	; 0x8000
   11e84:	add	sp, sp, #132	; 0x84
   11e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e8c:	add	r1, sp, #16384	; 0x4000
   11e90:	add	r1, r1, #128	; 0x80
   11e94:	ldr	r0, [r5, #20]
   11e98:	bl	10e48 <rb_rawbuf_get@plt>
   11e9c:	subs	r2, r0, #0
   11ea0:	bne	11f5c <rb_base64_encode@plt+0x106c>
   11ea4:	mov	r2, fp
   11ea8:	mov	r1, #1
   11eac:	mov	r0, r5
   11eb0:	bl	11690 <rb_base64_encode@plt+0x7a0>
   11eb4:	mov	r2, r6
   11eb8:	add	r1, sp, #8
   11ebc:	ldr	r0, [r5, #20]
   11ec0:	bl	10e48 <rb_rawbuf_get@plt>
   11ec4:	cmp	r0, #2
   11ec8:	bne	1204c <rb_base64_encode@plt+0x115c>
   11ecc:	ldrb	r1, [sp, #9]
   11ed0:	and	r2, r1, #127	; 0x7f
   11ed4:	cmp	r2, #126	; 0x7e
   11ed8:	strb	r2, [sp, #9]
   11edc:	lsr	sl, r1, #7
   11ee0:	beq	11f74 <rb_base64_encode@plt+0x1084>
   11ee4:	cmp	r2, #127	; 0x7f
   11ee8:	beq	11eb4 <rb_base64_encode@plt+0xfc4>
   11eec:	cmp	sl, #1
   11ef0:	bne	11e8c <rb_base64_encode@plt+0xf9c>
   11ef4:	add	r4, sp, #32
   11ef8:	mov	r1, r4
   11efc:	mov	r2, #4
   11f00:	ldr	r0, [r5, #20]
   11f04:	bl	10e48 <rb_rawbuf_get@plt>
   11f08:	cmp	r0, #0
   11f0c:	beq	12038 <rb_base64_encode@plt+0x1148>
   11f10:	add	r1, sp, #16384	; 0x4000
   11f14:	ldrb	r2, [sp, #9]
   11f18:	add	r1, r1, #128	; 0x80
   11f1c:	ldr	r0, [r5, #20]
   11f20:	bl	10e48 <rb_rawbuf_get@plt>
   11f24:	subs	r2, r0, #0
   11f28:	beq	11ea4 <rb_base64_encode@plt+0xfb4>
   11f2c:	ble	11f5c <rb_base64_encode@plt+0x106c>
   11f30:	add	lr, sp, #16384	; 0x4000
   11f34:	add	lr, lr, #128	; 0x80
   11f38:	mov	ip, #0
   11f3c:	and	r3, ip, #3
   11f40:	ldrb	r1, [lr]
   11f44:	ldrb	r3, [r4, r3]
   11f48:	add	ip, ip, #1
   11f4c:	cmp	ip, r2
   11f50:	eor	r3, r3, r1
   11f54:	strb	r3, [lr], #1
   11f58:	bne	11f3c <rb_base64_encode@plt+0x104c>
   11f5c:	add	r1, sp, #16384	; 0x4000
   11f60:	mov	r3, #1
   11f64:	add	r1, r1, #128	; 0x80
   11f68:	add	r0, r5, #24
   11f6c:	bl	10d4c <rb_linebuf_parse@plt>
   11f70:	b	11eb4 <rb_base64_encode@plt+0xfc4>
   11f74:	add	r0, sp, #16384	; 0x4000
   11f78:	mov	r2, r8
   11f7c:	mov	r1, #0
   11f80:	add	r0, r0, #128	; 0x80
   11f84:	bl	10d34 <memset@plt>
   11f88:	mov	r2, r6
   11f8c:	add	r1, sp, #12
   11f90:	ldr	r0, [r5, #20]
   11f94:	bl	10e48 <rb_rawbuf_get@plt>
   11f98:	cmp	r0, #0
   11f9c:	beq	12024 <rb_base64_encode@plt+0x1134>
   11fa0:	ldrh	r2, [sp, #12]
   11fa4:	cmp	sl, #1
   11fa8:	rev16	r2, r2
   11fac:	strh	r2, [sp, #12]
   11fb0:	uxth	r2, r2
   11fb4:	bne	11e8c <rb_base64_encode@plt+0xf9c>
   11fb8:	add	r4, sp, #32
   11fbc:	mov	r1, r4
   11fc0:	mov	r2, #4
   11fc4:	ldr	r0, [r5, #20]
   11fc8:	bl	10e48 <rb_rawbuf_get@plt>
   11fcc:	cmp	r0, #0
   11fd0:	beq	12038 <rb_base64_encode@plt+0x1148>
   11fd4:	add	r1, sp, #16384	; 0x4000
   11fd8:	ldrh	r2, [sp, #12]
   11fdc:	add	r1, r1, #128	; 0x80
   11fe0:	ldr	r0, [r5, #20]
   11fe4:	bl	10e48 <rb_rawbuf_get@plt>
   11fe8:	subs	r2, r0, #0
   11fec:	beq	11ea4 <rb_base64_encode@plt+0xfb4>
   11ff0:	ble	11f5c <rb_base64_encode@plt+0x106c>
   11ff4:	add	lr, sp, #16384	; 0x4000
   11ff8:	add	lr, lr, #128	; 0x80
   11ffc:	mov	ip, #0
   12000:	and	r3, ip, #3
   12004:	ldrb	r1, [lr]
   12008:	ldrb	r3, [r4, r3]
   1200c:	add	ip, ip, #1
   12010:	cmp	ip, r2
   12014:	eor	r3, r3, r1
   12018:	strb	r3, [lr], #1
   1201c:	bne	12000 <rb_base64_encode@plt+0x1110>
   12020:	b	11f5c <rb_base64_encode@plt+0x106c>
   12024:	ldr	r2, [pc, #832]	; 1236c <rb_base64_encode@plt+0x147c>
   12028:	mov	r1, #1
   1202c:	mov	r0, r5
   12030:	bl	11690 <rb_base64_encode@plt+0x7a0>
   12034:	b	11eb4 <rb_base64_encode@plt+0xfc4>
   12038:	mov	r1, sl
   1203c:	ldr	r2, [pc, #812]	; 12370 <rb_base64_encode@plt+0x1480>
   12040:	mov	r0, r5
   12044:	bl	11690 <rb_base64_encode@plt+0x7a0>
   12048:	b	11eb4 <rb_base64_encode@plt+0xfc4>
   1204c:	ldrb	r3, [r5, #128]	; 0x80
   12050:	tst	r3, #2
   12054:	bne	11e6c <rb_base64_encode@plt+0xf7c>
   12058:	ldr	r6, [r5, #88]	; 0x58
   1205c:	add	r4, r5, #24
   12060:	b	12074 <rb_base64_encode@plt+0x1184>
   12064:	ldrd	r2, [r5, #120]	; 0x78
   12068:	adds	r2, r2, r0
   1206c:	adc	r3, r3, r0, asr #31
   12070:	strd	r2, [r5, #120]	; 0x78
   12074:	mov	r1, r4
   12078:	mov	r0, r6
   1207c:	bl	10dac <rb_linebuf_flush@plt>
   12080:	cmp	r0, #0
   12084:	bgt	12064 <rb_base64_encode@plt+0x1174>
   12088:	beq	12228 <rb_base64_encode@plt+0x1338>
   1208c:	bl	10ee4 <__errno_location@plt>
   12090:	ldr	r0, [r0]
   12094:	bl	10cc8 <rb_ignore_errno@plt>
   12098:	cmp	r0, #0
   1209c:	beq	12228 <rb_base64_encode@plt+0x1338>
   120a0:	ldr	r3, [r5, #40]	; 0x28
   120a4:	mov	r1, #2
   120a8:	cmp	r3, #0
   120ac:	movle	r3, #0
   120b0:	movgt	r3, r5
   120b4:	ldrgt	r2, [pc, #696]	; 12374 <rb_base64_encode@plt+0x1484>
   120b8:	movle	r2, r3
   120bc:	ldr	r0, [r5, #88]	; 0x58
   120c0:	bl	10ce0 <rb_setselect@plt>
   120c4:	cmp	r9, #16384	; 0x4000
   120c8:	bge	11e74 <rb_base64_encode@plt+0xf84>
   120cc:	mov	r3, r5
   120d0:	ldr	r0, [sp, #4]
   120d4:	ldr	r2, [pc, #668]	; 12378 <rb_base64_encode@plt+0x1488>
   120d8:	mov	r1, #1
   120dc:	bl	10ce0 <rb_setselect@plt>
   120e0:	add	sp, sp, #32768	; 0x8000
   120e4:	add	sp, sp, #132	; 0x84
   120e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120ec:	add	r3, sp, #32768	; 0x8000
   120f0:	add	r1, r0, #18
   120f4:	add	r3, r3, #128	; 0x80
   120f8:	cmp	r1, r3
   120fc:	bcs	1214c <rb_base64_encode@plt+0x125c>
   12100:	ldrb	r3, [r0, #18]
   12104:	cmp	r3, #0
   12108:	beq	1214c <rb_base64_encode@plt+0x125c>
   1210c:	cmp	r3, #32
   12110:	cmpne	r3, #9
   12114:	addeq	r2, sp, #32768	; 0x8000
   12118:	addeq	r0, r0, #19
   1211c:	addeq	r2, r2, #128	; 0x80
   12120:	beq	12140 <rb_base64_encode@plt+0x1250>
   12124:	b	12168 <rb_base64_encode@plt+0x1278>
   12128:	ldrb	r3, [r0], #1
   1212c:	cmp	r3, #0
   12130:	beq	1214c <rb_base64_encode@plt+0x125c>
   12134:	cmp	r3, #32
   12138:	cmpne	r3, #9
   1213c:	bne	12168 <rb_base64_encode@plt+0x1278>
   12140:	cmp	r2, r0
   12144:	mov	r1, r0
   12148:	bne	12128 <rb_base64_encode@plt+0x1238>
   1214c:	mov	r2, r8
   12150:	mov	r0, sl
   12154:	bl	10d58 <rb_strlcpy@plt>
   12158:	ldrb	r3, [r5, #128]	; 0x80
   1215c:	orr	r3, r3, #8
   12160:	strb	r3, [r5, #128]	; 0x80
   12164:	b	11e30 <rb_base64_encode@plt+0xf40>
   12168:	cmp	r3, #10
   1216c:	cmpne	r3, #13
   12170:	addne	r3, r1, #1
   12174:	bne	12194 <rb_base64_encode@plt+0x12a4>
   12178:	b	121ac <rb_base64_encode@plt+0x12bc>
   1217c:	ldrb	r2, [r3], #1
   12180:	cmp	r2, #0
   12184:	beq	1214c <rb_base64_encode@plt+0x125c>
   12188:	cmp	r2, #10
   1218c:	cmpne	r2, #13
   12190:	beq	121b0 <rb_base64_encode@plt+0x12c0>
   12194:	add	r2, sp, #32768	; 0x8000
   12198:	add	r2, r2, #128	; 0x80
   1219c:	cmp	r3, r2
   121a0:	mov	r0, r3
   121a4:	bcc	1217c <rb_base64_encode@plt+0x128c>
   121a8:	b	1214c <rb_base64_encode@plt+0x125c>
   121ac:	mov	r0, r1
   121b0:	strb	r6, [r0]
   121b4:	b	1214c <rb_base64_encode@plt+0x125c>
   121b8:	add	r4, r5, #129	; 0x81
   121bc:	add	r0, sp, #32
   121c0:	bl	13cb0 <rb_base64_encode@plt+0x2dc0>
   121c4:	mov	r0, r4
   121c8:	bl	10db8 <strlen@plt>
   121cc:	mov	r1, r4
   121d0:	mov	r2, r0
   121d4:	add	r0, sp, #32
   121d8:	bl	13cfc <rb_base64_encode@plt+0x2e0c>
   121dc:	mov	r2, #36	; 0x24
   121e0:	add	r0, sp, #32
   121e4:	ldr	r1, [pc, #400]	; 1237c <rb_base64_encode@plt+0x148c>
   121e8:	bl	13cfc <rb_base64_encode@plt+0x2e0c>
   121ec:	add	r0, sp, #32
   121f0:	add	r1, sp, #12
   121f4:	bl	13dac <rb_base64_encode@plt+0x2ebc>
   121f8:	add	r0, sp, #12
   121fc:	mov	r1, #20
   12200:	bl	10ef0 <rb_base64_encode@plt>
   12204:	ldrb	r3, [r5, #128]	; 0x80
   12208:	tst	r3, #2
   1220c:	mov	r4, r0
   12210:	ldr	r0, [r5, #16]
   12214:	beq	1223c <rb_base64_encode@plt+0x134c>
   12218:	mov	r0, r4
   1221c:	bl	10d70 <free@plt>
   12220:	ldrb	r3, [r5, #128]	; 0x80
   12224:	b	11e58 <rb_base64_encode@plt+0xf68>
   12228:	mov	r2, #0
   1222c:	mov	r1, r2
   12230:	mov	r0, r5
   12234:	bl	11690 <rb_base64_encode@plt+0x7a0>
   12238:	b	11e6c <rb_base64_encode@plt+0xf7c>
   1223c:	mov	r2, #129	; 0x81
   12240:	ldr	r1, [pc, #312]	; 12380 <rb_base64_encode@plt+0x1490>
   12244:	bl	10ec0 <rb_rawbuf_append@plt>
   12248:	mov	r0, r4
   1224c:	bl	10db8 <strlen@plt>
   12250:	ldrb	r1, [r5, #128]	; 0x80
   12254:	tst	r1, #2
   12258:	mov	r2, r0
   1225c:	ldr	r0, [r5, #16]
   12260:	bne	12218 <rb_base64_encode@plt+0x1328>
   12264:	mov	r1, r4
   12268:	bl	10ec0 <rb_rawbuf_append@plt>
   1226c:	ldrb	r3, [r5, #128]	; 0x80
   12270:	ldr	r0, [r5, #16]
   12274:	tst	r3, #2
   12278:	bne	12218 <rb_base64_encode@plt+0x1328>
   1227c:	mov	r2, #4
   12280:	ldr	r1, [pc, #252]	; 12384 <rb_base64_encode@plt+0x1494>
   12284:	bl	10ec0 <rb_rawbuf_append@plt>
   12288:	b	12218 <rb_base64_encode@plt+0x1328>
   1228c:	mov	r0, r5
   12290:	ldr	r2, [pc, #240]	; 12388 <rb_base64_encode@plt+0x1498>
   12294:	mov	r1, #0
   12298:	bl	11690 <rb_base64_encode@plt+0x7a0>
   1229c:	add	sp, sp, #32768	; 0x8000
   122a0:	add	sp, sp, #132	; 0x84
   122a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122a8:	bl	10ee4 <__errno_location@plt>
   122ac:	mov	r6, r0
   122b0:	ldr	r0, [r0]
   122b4:	bl	10cc8 <rb_ignore_errno@plt>
   122b8:	cmp	r0, #0
   122bc:	beq	1228c <rb_base64_encode@plt+0x139c>
   122c0:	mov	r3, r5
   122c4:	ldr	r0, [sp, #4]
   122c8:	ldr	r2, [pc, #168]	; 12378 <rb_base64_encode@plt+0x1488>
   122cc:	mov	r1, #1
   122d0:	bl	10ce0 <rb_setselect@plt>
   122d4:	ldrb	r3, [r5, #128]	; 0x80
   122d8:	tst	r3, #2
   122dc:	bne	11e80 <rb_base64_encode@plt+0xf90>
   122e0:	ldr	r7, [r5, #88]	; 0x58
   122e4:	add	r4, r5, #24
   122e8:	b	122fc <rb_base64_encode@plt+0x140c>
   122ec:	ldrd	r2, [r5, #120]	; 0x78
   122f0:	adds	r2, r2, r0
   122f4:	adc	r3, r3, r0, asr #31
   122f8:	strd	r2, [r5, #120]	; 0x78
   122fc:	mov	r1, r4
   12300:	mov	r0, r7
   12304:	bl	10dac <rb_linebuf_flush@plt>
   12308:	cmp	r0, #0
   1230c:	bgt	122ec <rb_base64_encode@plt+0x13fc>
   12310:	beq	12350 <rb_base64_encode@plt+0x1460>
   12314:	ldr	r0, [r6]
   12318:	bl	10cc8 <rb_ignore_errno@plt>
   1231c:	cmp	r0, #0
   12320:	beq	12350 <rb_base64_encode@plt+0x1460>
   12324:	ldr	r3, [r5, #40]	; 0x28
   12328:	mov	r1, #2
   1232c:	cmp	r3, #0
   12330:	movgt	r3, r5
   12334:	movle	r3, #0
   12338:	ldrgt	r0, [r3, #88]	; 0x58
   1233c:	ldrgt	r2, [pc, #48]	; 12374 <rb_base64_encode@plt+0x1484>
   12340:	ldrle	r0, [r5, #88]	; 0x58
   12344:	movle	r2, r3
   12348:	bl	10ce0 <rb_setselect@plt>
   1234c:	b	11e80 <rb_base64_encode@plt+0xf90>
   12350:	mov	r2, #0
   12354:	mov	r0, r5
   12358:	mov	r1, r2
   1235c:	bl	11690 <rb_base64_encode@plt+0x7a0>
   12360:	b	11e80 <rb_base64_encode@plt+0xf90>
   12364:	andeq	r4, r1, ip, lsl #1
   12368:			; <UNDEFINED> instruction: 0x000141b0
   1236c:	andeq	r4, r1, r4, asr r1
   12370:	andeq	r4, r1, r4, lsl #3
   12374:	andeq	r1, r1, r4, asr #25
   12378:	andeq	r1, r1, r4, ror sp
   1237c:	andeq	r4, r1, r0, lsr #1
   12380:	andeq	r4, r1, r8, asr #1
   12384:	andeq	r4, r1, ip, asr #2
   12388:	andeq	r4, r1, r8, ror r0
   1238c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12390:	mov	r4, r1
   12394:	sub	sp, sp, #20
   12398:	mov	r8, #40	; 0x28
   1239c:	mov	r6, #1
   123a0:	mov	r7, #16384	; 0x4000
   123a4:	mov	r9, #4
   123a8:	mov	sl, #0
   123ac:	mov	r1, r8
   123b0:	mov	r0, r6
   123b4:	bl	10d1c <calloc@plt>
   123b8:	subs	r5, r0, #0
   123bc:	beq	12560 <rb_base64_encode@plt+0x1670>
   123c0:	mov	r1, r7
   123c4:	mov	r0, r6
   123c8:	bl	10d1c <calloc@plt>
   123cc:	subs	r1, r0, #0
   123d0:	beq	12560 <rb_base64_encode@plt+0x1670>
   123d4:	ldr	r0, [r4, #16]
   123d8:	str	r1, [r5, #12]
   123dc:	str	r7, [r5, #16]
   123e0:	add	r3, r5, #20
   123e4:	str	r9, [sp]
   123e8:	mov	r2, #16384	; 0x4000
   123ec:	bl	10e84 <rb_recv_fd_buf@plt>
   123f0:	cmp	r0, #0
   123f4:	ble	12460 <rb_base64_encode@plt+0x1570>
   123f8:	ldr	r3, [r4, #28]
   123fc:	str	r0, [r5, #16]
   12400:	cmp	r3, #0
   12404:	str	r5, [r5]
   12408:	stmib	r5, {r3, sl}
   1240c:	strne	r5, [r3, #8]
   12410:	beq	12564 <rb_base64_encode@plt+0x1674>
   12414:	ldr	r3, [r4, #32]
   12418:	ldr	r2, [r5, #20]
   1241c:	add	r3, r3, #1
   12420:	cmp	r2, #0
   12424:	str	r5, [r4, #28]
   12428:	str	r3, [r4, #32]
   1242c:	beq	126b8 <rb_base64_encode@plt+0x17c8>
   12430:	ldr	r3, [r5, #24]
   12434:	cmp	r3, #0
   12438:	beq	126c0 <rb_base64_encode@plt+0x17d0>
   1243c:	ldr	r3, [r5, #28]
   12440:	cmp	r3, #0
   12444:	beq	126c8 <rb_base64_encode@plt+0x17d8>
   12448:	ldr	r3, [r5, #32]
   1244c:	cmp	r3, #0
   12450:	movne	r3, #4
   12454:	moveq	r3, #3
   12458:	str	r3, [r5, #36]	; 0x24
   1245c:	b	123ac <rb_base64_encode@plt+0x14bc>
   12460:	mov	fp, r0
   12464:	ldr	r0, [r5, #12]
   12468:	cmp	r0, #0
   1246c:	beq	12474 <rb_base64_encode@plt+0x1584>
   12470:	bl	10d70 <free@plt>
   12474:	mov	r0, r5
   12478:	bl	10d70 <free@plt>
   1247c:	cmp	fp, #0
   12480:	beq	12700 <rb_base64_encode@plt+0x1810>
   12484:	bl	10ee4 <__errno_location@plt>
   12488:	ldr	r0, [r0]
   1248c:	bl	10cc8 <rb_ignore_errno@plt>
   12490:	cmp	r0, #0
   12494:	beq	12700 <rb_base64_encode@plt+0x1810>
   12498:	ldr	r6, [r4, #24]
   1249c:	cmp	r6, #0
   124a0:	beq	1257c <rb_base64_encode@plt+0x168c>
   124a4:	ldr	r7, [r6, #8]
   124a8:	ldr	sl, [pc, #600]	; 12708 <rb_base64_encode@plt+0x1818>
   124ac:	ldr	r8, [pc, #600]	; 1270c <rb_base64_encode@plt+0x181c>
   124b0:	ldr	r5, [r6]
   124b4:	ldr	r0, [r5, #12]
   124b8:	ldrb	r3, [r0]
   124bc:	cmp	r3, #65	; 0x41
   124c0:	bne	12574 <rb_base64_encode@plt+0x1684>
   124c4:	ldr	r3, [r5, #36]	; 0x24
   124c8:	cmp	r3, #2
   124cc:	beq	12598 <rb_base64_encode@plt+0x16a8>
   124d0:	cmp	r3, #0
   124d4:	ble	12574 <rb_base64_encode@plt+0x1684>
   124d8:	add	fp, r5, #20
   124dc:	mov	r9, #0
   124e0:	ldr	r0, [fp], #4
   124e4:	bl	10de8 <rb_close@plt>
   124e8:	ldr	r3, [r5, #36]	; 0x24
   124ec:	add	r9, r9, #1
   124f0:	cmp	r9, r3
   124f4:	blt	124e0 <rb_base64_encode@plt+0x15f0>
   124f8:	ldr	r3, [r6, #8]
   124fc:	ldr	r0, [r5, #12]
   12500:	ldr	r2, [r6, #4]
   12504:	cmp	r3, #0
   12508:	strne	r2, [r3, #4]
   1250c:	ldrne	r2, [r6, #4]
   12510:	streq	r2, [r4, #28]
   12514:	cmp	r2, #0
   12518:	strne	r3, [r2, #8]
   1251c:	streq	r3, [r4, #24]
   12520:	ldr	r3, [r4, #32]
   12524:	mov	r2, #0
   12528:	sub	r3, r3, #1
   1252c:	cmp	r0, #0
   12530:	str	r2, [r6, #4]
   12534:	str	r2, [r6, #8]
   12538:	str	r3, [r4, #32]
   1253c:	beq	12544 <rb_base64_encode@plt+0x1654>
   12540:	bl	10d70 <free@plt>
   12544:	mov	r0, r5
   12548:	bl	10d70 <free@plt>
   1254c:	cmp	r7, #0
   12550:	beq	1257c <rb_base64_encode@plt+0x168c>
   12554:	mov	r6, r7
   12558:	ldr	r7, [r7, #8]
   1255c:	b	124b0 <rb_base64_encode@plt+0x15c0>
   12560:	bl	10e3c <rb_outofmemory@plt>
   12564:	ldr	r3, [r4, #24]
   12568:	cmp	r3, #0
   1256c:	streq	r5, [r4, #24]
   12570:	b	12414 <rb_base64_encode@plt+0x1524>
   12574:	mov	r3, r7
   12578:	b	12500 <rb_base64_encode@plt+0x1610>
   1257c:	mov	r3, r4
   12580:	ldr	r0, [r4, #16]
   12584:	ldr	r2, [pc, #388]	; 12710 <rb_base64_encode@plt+0x1820>
   12588:	mov	r1, #1
   1258c:	add	sp, sp, #20
   12590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12594:	b	10ce0 <rb_setselect@plt>
   12598:	ldr	r3, [r5, #16]
   1259c:	cmp	r3, #5
   125a0:	bne	124d8 <rb_base64_encode@plt+0x15e8>
   125a4:	ldr	r3, [r5, #20]
   125a8:	mov	r1, #168	; 0xa8
   125ac:	mov	r0, #1
   125b0:	str	r3, [sp, #12]
   125b4:	ldr	fp, [r5, #24]
   125b8:	bl	10d1c <calloc@plt>
   125bc:	subs	r9, r0, #0
   125c0:	beq	12560 <rb_base64_encode@plt+0x1670>
   125c4:	ldr	r3, [sp, #12]
   125c8:	mvn	r2, #0
   125cc:	str	r3, [r9, #84]	; 0x54
   125d0:	str	r2, [r9, #80]	; 0x50
   125d4:	mov	r0, r3
   125d8:	str	r4, [r9, #12]
   125dc:	str	fp, [r9, #88]	; 0x58
   125e0:	bl	10d28 <rb_set_nb@plt>
   125e4:	mov	r0, fp
   125e8:	bl	10d28 <rb_set_nb@plt>
   125ec:	add	r0, r9, #52	; 0x34
   125f0:	bl	10e9c <rb_linebuf_newbuf@plt>
   125f4:	add	r0, r9, #24
   125f8:	bl	10e9c <rb_linebuf_newbuf@plt>
   125fc:	bl	10e6c <rb_new_rawbuffer@plt>
   12600:	str	r0, [r9, #20]
   12604:	bl	10e6c <rb_new_rawbuffer@plt>
   12608:	ldr	r3, [r5, #12]
   1260c:	mov	r1, #0
   12610:	str	r0, [r9, #16]
   12614:	ldr	r2, [r3, #1]
   12618:	str	r1, [r9, #4]
   1261c:	mov	r1, #2000	; 0x7d0
   12620:	umull	r0, r3, sl, r2
   12624:	str	r2, [r9, #80]	; 0x50
   12628:	str	r9, [r9]
   1262c:	lsr	r3, r3, #7
   12630:	mul	r3, r1, r3
   12634:	sub	r3, r2, r3
   12638:	lsl	r2, r3, #1
   1263c:	add	r1, r2, r3
   12640:	add	r1, r8, r1, lsl #2
   12644:	ldr	r0, [r1, #16]
   12648:	cmp	r0, #0
   1264c:	str	r0, [r9, #8]
   12650:	strne	r9, [r0, #4]
   12654:	beq	126e0 <rb_base64_encode@plt+0x17f0>
   12658:	add	r3, r2, r3
   1265c:	ldrb	r1, [r9, #128]	; 0x80
   12660:	add	r3, r8, r3, lsl #2
   12664:	ldr	r0, [r9, #84]	; 0x54
   12668:	ldr	r2, [r3, #24]
   1266c:	orr	r1, r1, #4
   12670:	add	r2, r2, #1
   12674:	strb	r1, [r9, #128]	; 0x80
   12678:	str	r9, [r3, #16]
   1267c:	str	r2, [r3, #24]
   12680:	bl	10ca4 <rb_get_type@plt>
   12684:	tst	r0, #64	; 0x40
   12688:	bne	126d0 <rb_base64_encode@plt+0x17e0>
   1268c:	ldr	r0, [r9, #88]	; 0x58
   12690:	bl	10ca4 <rb_get_type@plt>
   12694:	cmp	r0, #64	; 0x40
   12698:	beq	126f0 <rb_base64_encode@plt+0x1800>
   1269c:	mov	r1, r9
   126a0:	ldr	r0, [r9, #84]	; 0x54
   126a4:	bl	11d74 <rb_base64_encode@plt+0xe84>
   126a8:	mov	r1, r9
   126ac:	ldr	r0, [r9, #88]	; 0x58
   126b0:	bl	11b58 <rb_base64_encode@plt+0xc68>
   126b4:	b	124f8 <rb_base64_encode@plt+0x1608>
   126b8:	mov	r3, sl
   126bc:	b	12458 <rb_base64_encode@plt+0x1568>
   126c0:	mov	r3, r6
   126c4:	b	12458 <rb_base64_encode@plt+0x1568>
   126c8:	mov	r3, #2
   126cc:	b	12458 <rb_base64_encode@plt+0x1568>
   126d0:	mov	r1, #4
   126d4:	ldr	r0, [r9, #84]	; 0x54
   126d8:	bl	10d94 <rb_set_type@plt>
   126dc:	b	1268c <rb_base64_encode@plt+0x179c>
   126e0:	ldr	r0, [r1, #20]
   126e4:	cmp	r0, #0
   126e8:	streq	r9, [r1, #20]
   126ec:	b	12658 <rb_base64_encode@plt+0x1768>
   126f0:	mov	r1, #4
   126f4:	ldr	r0, [r9, #88]	; 0x58
   126f8:	bl	10d94 <rb_set_type@plt>
   126fc:	b	1269c <rb_base64_encode@plt+0x17ac>
   12700:	mov	r0, #0
   12704:	bl	10ed8 <exit@plt>
   12708:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   1270c:	strdeq	r5, [r2], -r8
   12710:	andeq	r2, r1, ip, lsl #7
   12714:	ldrb	r3, [r1, #128]	; 0x80
   12718:	tst	r3, #2
   1271c:	bne	12794 <rb_base64_encode@plt+0x18a4>
   12720:	push	{r4, r5, r6, lr}
   12724:	mov	r4, r1
   12728:	mov	r5, r0
   1272c:	b	12740 <rb_base64_encode@plt+0x1850>
   12730:	ldrd	r2, [r4, #96]	; 0x60
   12734:	adds	r2, r2, r0
   12738:	adc	r3, r3, r0, asr #31
   1273c:	strd	r2, [r4, #96]	; 0x60
   12740:	mov	r1, r5
   12744:	ldr	r0, [r4, #16]
   12748:	bl	10ecc <rb_rawbuf_flush@plt>
   1274c:	cmp	r0, #0
   12750:	bgt	12730 <rb_base64_encode@plt+0x1840>
   12754:	bne	12798 <rb_base64_encode@plt+0x18a8>
   12758:	ldr	r3, [pc, #176]	; 12810 <rb_base64_encode@plt+0x1920>
   1275c:	ldr	r2, [pc, #176]	; 12814 <rb_base64_encode@plt+0x1924>
   12760:	mov	r1, #1
   12764:	mov	r0, r4
   12768:	bl	11690 <rb_base64_encode@plt+0x7a0>
   1276c:	bl	10ee4 <__errno_location@plt>
   12770:	mov	r5, r0
   12774:	ldr	r0, [r5]
   12778:	bl	10c98 <strerror@plt>
   1277c:	ldr	r2, [pc, #148]	; 12818 <rb_base64_encode@plt+0x1928>
   12780:	mov	r1, #1
   12784:	mov	r3, r0
   12788:	mov	r0, r4
   1278c:	pop	{r4, r5, r6, lr}
   12790:	b	11690 <rb_base64_encode@plt+0x7a0>
   12794:	bx	lr
   12798:	bl	10ee4 <__errno_location@plt>
   1279c:	mov	r5, r0
   127a0:	ldr	r0, [r0]
   127a4:	bl	10cc8 <rb_ignore_errno@plt>
   127a8:	cmp	r0, #0
   127ac:	beq	12774 <rb_base64_encode@plt+0x1884>
   127b0:	ldr	r0, [r4, #16]
   127b4:	bl	10e0c <rb_rawbuf_length@plt>
   127b8:	mov	r1, #2
   127bc:	cmp	r0, #0
   127c0:	movle	r3, #0
   127c4:	movgt	r3, r4
   127c8:	movle	r2, r3
   127cc:	ldrgt	r2, [pc, #72]	; 1281c <rb_base64_encode@plt+0x192c>
   127d0:	ldr	r0, [r4, #84]	; 0x54
   127d4:	bl	10ce0 <rb_setselect@plt>
   127d8:	ldrb	r3, [r4, #128]	; 0x80
   127dc:	tst	r3, #1
   127e0:	popeq	{r4, r5, r6, pc}
   127e4:	ldr	r0, [r4, #16]
   127e8:	bl	10e0c <rb_rawbuf_length@plt>
   127ec:	cmp	r0, #0
   127f0:	popne	{r4, r5, r6, pc}
   127f4:	ldrb	r3, [r4, #128]	; 0x80
   127f8:	mov	r1, r4
   127fc:	ldr	r0, [r4, #88]	; 0x58
   12800:	bic	r3, r3, #1
   12804:	strb	r3, [r4, #128]	; 0x80
   12808:	pop	{r4, r5, r6, lr}
   1280c:	b	11b58 <rb_base64_encode@plt+0xc68>
   12810:	andeq	r4, r1, ip, asr #32
   12814:	andeq	r4, r1, r0, ror r0
   12818:	andeq	r4, r1, ip, lsr r0
   1281c:	andeq	r2, r1, r4, lsl r7
   12820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12824:	sub	sp, sp, #172	; 0xac
   12828:	mov	ip, r1
   1282c:	add	r5, r1, #64	; 0x40
   12830:	add	r4, sp, #104	; 0x68
   12834:	str	r0, [sp, #4]
   12838:	ldr	r0, [ip]
   1283c:	ldr	r1, [ip, #4]
   12840:	ldr	r2, [ip, #8]
   12844:	ldr	r3, [ip, #12]
   12848:	mov	lr, r4
   1284c:	add	ip, ip, #16
   12850:	cmp	ip, r5
   12854:	stmia	lr!, {r0, r1, r2, r3}
   12858:	mov	r4, lr
   1285c:	bne	12838 <rb_base64_encode@plt+0x1948>
   12860:	ldr	r3, [sp, #4]
   12864:	ldr	sl, [sp, #104]	; 0x68
   12868:	ldr	r2, [r3, #4]
   1286c:	rev	sl, sl
   12870:	mov	r4, r2
   12874:	ldr	r2, [r3, #8]
   12878:	ror	ip, r4, #2
   1287c:	mov	r1, r2
   12880:	ldr	r2, [r3, #12]
   12884:	str	r4, [sp, #88]	; 0x58
   12888:	mov	r6, r2
   1288c:	mov	r2, r3
   12890:	ldr	r3, [r3]
   12894:	ldr	r0, [r2, #16]
   12898:	mov	r7, r3
   1289c:	ldr	r3, [pc, #4088]	; 1389c <rb_base64_encode@plt+0x29ac>
   128a0:	mov	r5, r0
   128a4:	eor	lr, r1, r6
   128a8:	eor	r0, r1, ip
   128ac:	add	r2, r5, r3
   128b0:	and	lr, lr, r4
   128b4:	ldr	r4, [sp, #108]	; 0x6c
   128b8:	add	r2, r2, r7, ror #27
   128bc:	and	r0, r0, r7
   128c0:	eor	lr, lr, r6
   128c4:	str	r5, [sp, #100]	; 0x64
   128c8:	str	r6, [sp, #96]	; 0x60
   128cc:	mov	r5, r1
   128d0:	eor	r0, r0, r1
   128d4:	add	lr, lr, r2
   128d8:	add	r1, r6, r3
   128dc:	rev	r6, r4
   128e0:	add	r2, sl, lr
   128e4:	mov	r8, r6
   128e8:	ldr	r4, [sp, #112]	; 0x70
   128ec:	ror	r6, r7, #2
   128f0:	add	r0, r0, r1
   128f4:	eor	lr, ip, r6
   128f8:	add	r0, r0, r8
   128fc:	add	r0, r0, r2, ror #27
   12900:	ror	r1, r2, #2
   12904:	str	r7, [sp, #84]	; 0x54
   12908:	str	r8, [sp, #16]
   1290c:	ldr	r7, [sp, #116]	; 0x74
   12910:	rev	r8, r4
   12914:	str	r5, [sp, #92]	; 0x5c
   12918:	and	lr, lr, r2
   1291c:	add	r5, r5, r3
   12920:	eor	r2, r6, r1
   12924:	add	r5, r5, r8
   12928:	eor	lr, lr, ip
   1292c:	rev	r9, r7
   12930:	add	r4, ip, r3
   12934:	ror	r7, r0, #2
   12938:	and	r2, r2, r0
   1293c:	add	lr, lr, r5
   12940:	ldr	r5, [sp, #120]	; 0x78
   12944:	add	lr, lr, r0, ror #27
   12948:	eor	r2, r2, r6
   1294c:	add	ip, r4, r9
   12950:	eor	r0, r1, r7
   12954:	rev	fp, r5
   12958:	str	r8, [sp, #8]
   1295c:	add	r6, r6, r3
   12960:	ldr	r8, [sp, #124]	; 0x7c
   12964:	add	ip, r2, ip
   12968:	and	r0, r0, lr
   1296c:	add	ip, ip, lr, ror #27
   12970:	add	r2, r6, fp
   12974:	ror	lr, lr, #2
   12978:	ldr	r5, [sp, #128]	; 0x80
   1297c:	eor	r0, r0, r1
   12980:	eor	r4, r7, lr
   12984:	rev	r6, r8
   12988:	add	r0, r0, r2
   1298c:	add	r0, r0, ip, ror #27
   12990:	ror	r2, ip, #2
   12994:	str	r6, [sp, #28]
   12998:	and	r4, r4, ip
   1299c:	add	r6, r6, r3
   129a0:	rev	ip, r5
   129a4:	str	fp, [sp, #20]
   129a8:	add	r1, r6, r1
   129ac:	mov	fp, ip
   129b0:	eor	r4, r4, r7
   129b4:	ldr	ip, [sp, #132]	; 0x84
   129b8:	eor	r5, lr, r2
   129bc:	add	r4, r4, r1
   129c0:	add	r4, r4, r0, ror #27
   129c4:	add	r1, fp, r3
   129c8:	str	r9, [sp, #12]
   129cc:	and	r5, r5, r0
   129d0:	ror	r9, r0, #2
   129d4:	rev	r0, ip
   129d8:	add	r7, r1, r7
   129dc:	eor	r6, r5, lr
   129e0:	mov	ip, r0
   129e4:	eor	r0, r2, r9
   129e8:	str	fp, [sp, #24]
   129ec:	str	ip, [sp, #56]	; 0x38
   129f0:	ldr	fp, [sp, #136]	; 0x88
   129f4:	add	ip, ip, r3
   129f8:	add	r6, r6, r7
   129fc:	and	r0, r0, r4
   12a00:	add	r6, r6, r4, ror #27
   12a04:	add	lr, ip, lr
   12a08:	ror	r4, r4, #2
   12a0c:	eor	r0, r0, r2
   12a10:	rev	r1, fp
   12a14:	eor	r5, r9, r4
   12a18:	add	r0, r0, lr
   12a1c:	ldr	lr, [sp, #140]	; 0x8c
   12a20:	str	r1, [sp, #32]
   12a24:	add	ip, r1, r3
   12a28:	and	r5, r5, r6
   12a2c:	ror	r1, r6, #2
   12a30:	add	r0, r0, r6, ror #27
   12a34:	ldr	r8, [sp, #144]	; 0x90
   12a38:	add	ip, ip, r2
   12a3c:	eor	r6, r4, r1
   12a40:	eor	r5, r5, r9
   12a44:	rev	lr, lr
   12a48:	str	lr, [sp, #36]	; 0x24
   12a4c:	and	r6, r6, r0
   12a50:	add	lr, lr, r3
   12a54:	add	r5, r5, ip
   12a58:	ror	r7, r0, #2
   12a5c:	add	r5, r5, r0, ror #27
   12a60:	add	r9, lr, r9
   12a64:	eor	r2, r6, r4
   12a68:	rev	r0, r8
   12a6c:	add	r8, r0, r3
   12a70:	eor	ip, r1, r7
   12a74:	add	r2, r2, r9
   12a78:	str	r0, [sp, #60]	; 0x3c
   12a7c:	ldr	r0, [sp, #148]	; 0x94
   12a80:	add	r2, r2, r5, ror #27
   12a84:	and	ip, ip, r5
   12a88:	ror	r5, r5, #2
   12a8c:	add	r4, r8, r4
   12a90:	rev	r6, r0
   12a94:	eor	r8, r7, r5
   12a98:	ldr	r0, [sp, #152]	; 0x98
   12a9c:	eor	ip, ip, r1
   12aa0:	ror	lr, r2, #2
   12aa4:	str	r6, [sp, #64]	; 0x40
   12aa8:	add	ip, ip, r4
   12aac:	add	r6, r6, r3
   12ab0:	and	r8, r8, r2
   12ab4:	add	ip, ip, r2, ror #27
   12ab8:	rev	r9, r0
   12abc:	add	r6, r6, r1
   12ac0:	eor	r0, r5, lr
   12ac4:	eor	r8, r8, r7
   12ac8:	ldr	r2, [sp, #156]	; 0x9c
   12acc:	add	r1, r9, r3
   12ad0:	and	r0, r0, ip
   12ad4:	add	r8, r8, r6
   12ad8:	add	r8, r8, ip, ror #27
   12adc:	str	r9, [sp, #40]	; 0x28
   12ae0:	add	r7, r1, r7
   12ae4:	ror	r9, ip, #2
   12ae8:	eor	r4, r0, r5
   12aec:	eor	ip, lr, r9
   12af0:	rev	r0, r2
   12af4:	add	r4, r4, r7
   12af8:	ror	r6, r8, #2
   12afc:	add	r4, r4, r8, ror #27
   12b00:	add	r2, r0, r3
   12b04:	ldr	r7, [sp, #160]	; 0xa0
   12b08:	and	ip, ip, r8
   12b0c:	ldr	r8, [sp, #8]
   12b10:	ldr	r1, [sp, #32]
   12b14:	add	r5, r2, r5
   12b18:	eor	ip, ip, lr
   12b1c:	rev	r2, r7
   12b20:	eor	sl, sl, r8
   12b24:	add	ip, ip, r5
   12b28:	ldr	r5, [sp, #164]	; 0xa4
   12b2c:	mov	fp, r0
   12b30:	str	r2, [sp, #48]	; 0x30
   12b34:	eor	sl, sl, r1
   12b38:	add	r2, r2, r3
   12b3c:	ldr	r7, [sp, #12]
   12b40:	eor	r0, r9, r6
   12b44:	str	fp, [sp, #44]	; 0x2c
   12b48:	add	r2, r2, lr
   12b4c:	eor	sl, sl, fp
   12b50:	rev	lr, r5
   12b54:	ldr	fp, [sp, #16]
   12b58:	ror	r1, r4, #2
   12b5c:	mov	r8, lr
   12b60:	and	r0, r0, r4
   12b64:	add	ip, ip, r4, ror #27
   12b68:	str	r8, [sp, #16]
   12b6c:	eor	lr, r6, r1
   12b70:	eor	r4, fp, r7
   12b74:	eor	r0, r0, r9
   12b78:	ldr	r7, [sp, #36]	; 0x24
   12b7c:	add	r8, r8, r3
   12b80:	add	r8, r8, r9
   12b84:	add	r0, r0, r2
   12b88:	ldr	r9, [sp, #48]	; 0x30
   12b8c:	and	lr, lr, ip
   12b90:	ror	r5, ip, #2
   12b94:	ldr	fp, [sp, #20]
   12b98:	add	r0, r0, ip, ror #27
   12b9c:	ror	sl, sl, #31
   12ba0:	ldr	ip, [sp, #8]
   12ba4:	eor	r4, r4, r7
   12ba8:	eor	lr, lr, r6
   12bac:	eor	r4, r4, r9
   12bb0:	add	lr, lr, r8
   12bb4:	mov	r9, sl
   12bb8:	add	r8, sl, r3
   12bbc:	ldr	sl, [sp, #60]	; 0x3c
   12bc0:	eor	ip, ip, fp
   12bc4:	add	r8, r8, r6
   12bc8:	eor	ip, ip, sl
   12bcc:	ldr	r6, [sp, #28]
   12bd0:	ldr	sl, [sp, #12]
   12bd4:	eor	r2, r1, r5
   12bd8:	eor	sl, sl, r6
   12bdc:	ror	r6, r4, #31
   12be0:	mov	r4, r6
   12be4:	ldr	r6, [sp, #16]
   12be8:	and	r2, r2, r0
   12bec:	add	lr, lr, r0, ror #27
   12bf0:	eor	r2, r2, r1
   12bf4:	ror	r0, r0, #2
   12bf8:	eor	ip, ip, r6
   12bfc:	ldr	r6, [sp, #64]	; 0x40
   12c00:	add	r2, r2, r8
   12c04:	eor	r8, r5, r0
   12c08:	add	r2, r2, lr, ror #27
   12c0c:	str	r4, [sp, #20]
   12c10:	eor	sl, sl, r6
   12c14:	add	r4, r4, r3
   12c18:	and	r8, r8, lr
   12c1c:	mov	r6, fp
   12c20:	ror	lr, lr, #2
   12c24:	ldr	fp, [sp, #24]
   12c28:	ror	ip, ip, #31
   12c2c:	str	r9, [sp, #52]	; 0x34
   12c30:	add	r4, r4, r1
   12c34:	eor	sl, sl, r9
   12c38:	ldr	r1, [sp, #40]	; 0x28
   12c3c:	mov	r9, ip
   12c40:	eor	ip, r0, lr
   12c44:	and	ip, ip, r2
   12c48:	eor	r6, r6, fp
   12c4c:	str	ip, [sp, #12]
   12c50:	eor	r6, r6, r1
   12c54:	ldr	ip, [sp, #56]	; 0x38
   12c58:	ldr	r1, [sp, #28]
   12c5c:	ror	sl, sl, #31
   12c60:	str	r9, [sp, #24]
   12c64:	eor	r8, r8, r5
   12c68:	eor	r1, r1, ip
   12c6c:	str	sl, [sp, #8]
   12c70:	ldr	sl, [sp, #20]
   12c74:	ldr	ip, [sp, #12]
   12c78:	add	r8, r8, r4
   12c7c:	add	r4, r9, r3
   12c80:	add	r4, r4, r5
   12c84:	eor	r6, r6, sl
   12c88:	eor	ip, ip, r0
   12c8c:	ldr	sl, [sp, #44]	; 0x2c
   12c90:	add	ip, ip, r4
   12c94:	ldr	r4, [sp, #32]
   12c98:	ror	r9, r2, #2
   12c9c:	eor	r1, r1, sl
   12ca0:	ror	r6, r6, #31
   12ca4:	ldr	sl, [sp, #8]
   12ca8:	add	r8, r8, r2, ror #27
   12cac:	eor	r5, lr, r9
   12cb0:	eor	r4, fp, r4
   12cb4:	mov	fp, r6
   12cb8:	ldr	r6, [sp, #24]
   12cbc:	add	r2, sl, r3
   12cc0:	and	r5, r5, r8
   12cc4:	ldr	r3, [pc, #3028]	; 138a0 <rb_base64_encode@plt+0x29b0>
   12cc8:	add	r2, r2, r0
   12ccc:	eor	r1, r1, r6
   12cd0:	eor	r0, r5, lr
   12cd4:	ldr	r5, [sp, #48]	; 0x30
   12cd8:	add	ip, ip, r8, ror #27
   12cdc:	ror	r8, r8, #2
   12ce0:	add	r6, fp, r3
   12ce4:	eor	r4, r4, r5
   12ce8:	add	r0, r0, r2
   12cec:	eor	r5, r9, r8
   12cf0:	ror	r1, r1, #31
   12cf4:	str	r1, [sp, #12]
   12cf8:	add	r0, r0, ip, ror #27
   12cfc:	add	lr, r6, lr
   12d00:	eor	r6, r5, ip
   12d04:	ror	ip, ip, #2
   12d08:	mov	r1, ip
   12d0c:	str	fp, [sp, #28]
   12d10:	ldr	ip, [sp, #12]
   12d14:	ldr	fp, [sp, #56]	; 0x38
   12d18:	eor	r4, r4, sl
   12d1c:	ldr	sl, [sp, #16]
   12d20:	eor	r2, fp, r7
   12d24:	add	r5, ip, r3
   12d28:	ldr	fp, [sp, #32]
   12d2c:	ldr	ip, [sp, #60]	; 0x3c
   12d30:	eor	r2, r2, sl
   12d34:	add	r6, r6, lr
   12d38:	eor	sl, r8, r1
   12d3c:	add	r5, r5, r9
   12d40:	ldr	r9, [sp, #52]	; 0x34
   12d44:	add	r6, r6, r0, ror #27
   12d48:	ror	lr, r4, #31
   12d4c:	eor	sl, sl, r0
   12d50:	eor	fp, fp, ip
   12d54:	ror	r0, r0, #2
   12d58:	mov	r4, r1
   12d5c:	str	r1, [sp, #32]
   12d60:	eor	fp, fp, r9
   12d64:	mov	r1, r0
   12d68:	ldr	r9, [sp, #36]	; 0x24
   12d6c:	eor	r4, r4, r0
   12d70:	ldr	r0, [sp, #64]	; 0x40
   12d74:	mov	r7, lr
   12d78:	add	r5, sl, r5
   12d7c:	ldr	lr, [sp, #28]
   12d80:	eor	sl, r9, r0
   12d84:	ldr	r9, [sp, #12]
   12d88:	eor	r2, r2, lr
   12d8c:	eor	fp, fp, r9
   12d90:	mov	r9, ip
   12d94:	ldr	ip, [sp, #40]	; 0x28
   12d98:	add	lr, r7, r3
   12d9c:	ror	r2, r2, #31
   12da0:	add	r8, lr, r8
   12da4:	eor	r4, r4, r6
   12da8:	ldr	lr, [sp, #20]
   12dac:	eor	r9, r9, ip
   12db0:	ldr	ip, [sp, #32]
   12db4:	add	r4, r4, r8
   12db8:	add	r8, r2, r3
   12dbc:	eor	sl, sl, lr
   12dc0:	ror	fp, fp, #31
   12dc4:	add	ip, r8, ip
   12dc8:	ldr	r8, [sp, #44]	; 0x2c
   12dcc:	add	r5, r5, r6, ror #27
   12dd0:	str	r1, [sp, #36]	; 0x24
   12dd4:	ror	r6, r6, #2
   12dd8:	str	r7, [sp, #56]	; 0x38
   12ddc:	mov	lr, r1
   12de0:	eor	sl, sl, r7
   12de4:	mov	r7, fp
   12de8:	ldr	fp, [sp, #24]
   12dec:	eor	r8, r0, r8
   12df0:	eor	lr, lr, r6
   12df4:	ldr	r0, [sp, #36]	; 0x24
   12df8:	add	r4, r4, r5, ror #27
   12dfc:	eor	lr, lr, r5
   12e00:	eor	r9, r9, fp
   12e04:	ror	r5, r5, #2
   12e08:	add	fp, r7, r3
   12e0c:	add	ip, lr, ip
   12e10:	ror	sl, sl, #31
   12e14:	eor	lr, r6, r5
   12e18:	eor	r9, r9, r2
   12e1c:	add	r0, fp, r0
   12e20:	ldr	fp, [sp, #8]
   12e24:	mov	r1, sl
   12e28:	add	ip, ip, r4, ror #27
   12e2c:	eor	lr, lr, r4
   12e30:	ror	r4, r4, #2
   12e34:	eor	sl, r8, fp
   12e38:	str	r1, [sp, #60]	; 0x3c
   12e3c:	add	fp, r1, r3
   12e40:	ldr	r8, [sp, #40]	; 0x28
   12e44:	ldr	r1, [sp, #48]	; 0x30
   12e48:	add	r0, lr, r0
   12e4c:	ror	r9, r9, #31
   12e50:	eor	lr, r5, r4
   12e54:	str	r7, [sp, #40]	; 0x28
   12e58:	eor	sl, sl, r7
   12e5c:	add	r6, fp, r6
   12e60:	mov	r7, r9
   12e64:	eor	lr, lr, ip
   12e68:	ldr	r9, [sp, #28]
   12e6c:	eor	r8, r8, r1
   12e70:	add	lr, lr, r6
   12e74:	ldr	r6, [sp, #60]	; 0x3c
   12e78:	eor	r8, r8, r9
   12e7c:	add	r0, r0, ip, ror #27
   12e80:	eor	r8, r8, r6
   12e84:	ror	ip, ip, #2
   12e88:	add	fp, r7, r3
   12e8c:	eor	r9, r4, ip
   12e90:	ror	r6, sl, #31
   12e94:	str	r7, [sp, #32]
   12e98:	ldr	sl, [sp, #44]	; 0x2c
   12e9c:	mov	r7, r6
   12ea0:	add	r5, fp, r5
   12ea4:	ldr	r6, [sp, #16]
   12ea8:	eor	r9, r9, r0
   12eac:	ror	r8, r8, #31
   12eb0:	add	r9, r9, r5
   12eb4:	mov	r5, r8
   12eb8:	ldr	r8, [sp, #52]	; 0x34
   12ebc:	str	r7, [sp, #44]	; 0x2c
   12ec0:	add	fp, r7, r3
   12ec4:	eor	sl, sl, r6
   12ec8:	mov	r7, r1
   12ecc:	ldr	r6, [sp, #12]
   12ed0:	eor	r7, r7, r8
   12ed4:	ldr	r8, [sp, #32]
   12ed8:	eor	sl, sl, r6
   12edc:	eor	sl, sl, r8
   12ee0:	ldr	r8, [sp, #56]	; 0x38
   12ee4:	add	lr, lr, r0, ror #27
   12ee8:	add	r4, fp, r4
   12eec:	ror	r0, r0, #2
   12ef0:	ldr	fp, [sp, #44]	; 0x2c
   12ef4:	eor	r6, ip, r0
   12ef8:	eor	r7, r7, r8
   12efc:	add	r9, r9, lr, ror #27
   12f00:	eor	r6, r6, lr
   12f04:	eor	r7, r7, fp
   12f08:	ror	lr, lr, #2
   12f0c:	ror	sl, sl, #31
   12f10:	str	r5, [sp, #36]	; 0x24
   12f14:	add	r8, r5, r3
   12f18:	mov	fp, sl
   12f1c:	eor	r5, r0, lr
   12f20:	ldr	sl, [sp, #20]
   12f24:	add	r4, r6, r4
   12f28:	ldr	r6, [sp, #16]
   12f2c:	eor	r5, r5, r9
   12f30:	add	ip, r8, ip
   12f34:	ror	r7, r7, #31
   12f38:	mov	r1, r7
   12f3c:	ldr	r8, [sp, #52]	; 0x34
   12f40:	add	r4, r4, r9, ror #27
   12f44:	ldr	r7, [sp, #24]
   12f48:	ror	r9, r9, #2
   12f4c:	eor	sl, r6, sl
   12f50:	add	ip, r5, ip
   12f54:	ldr	r5, [sp, #36]	; 0x24
   12f58:	str	fp, [sp, #16]
   12f5c:	eor	r6, lr, r9
   12f60:	add	fp, fp, r3
   12f64:	eor	sl, sl, r2
   12f68:	eor	r6, r6, r4
   12f6c:	eor	sl, sl, r5
   12f70:	eor	r7, r8, r7
   12f74:	add	r0, fp, r0
   12f78:	ldr	r8, [sp, #40]	; 0x28
   12f7c:	add	r0, r6, r0
   12f80:	ldr	r6, [sp, #16]
   12f84:	eor	r7, r7, r8
   12f88:	ror	sl, sl, #31
   12f8c:	mov	fp, sl
   12f90:	eor	r7, r7, r6
   12f94:	ldr	sl, [sp, #20]
   12f98:	ldr	r6, [sp, #8]
   12f9c:	add	ip, ip, r4, ror #27
   12fa0:	eor	sl, sl, r6
   12fa4:	ldr	r6, [sp, #60]	; 0x3c
   12fa8:	ror	r4, r4, #2
   12fac:	add	r8, r1, r3
   12fb0:	eor	r5, r9, r4
   12fb4:	eor	sl, sl, r6
   12fb8:	eor	r5, r5, ip
   12fbc:	add	lr, r8, lr
   12fc0:	eor	sl, sl, r1
   12fc4:	ror	r8, r7, #31
   12fc8:	str	fp, [sp, #52]	; 0x34
   12fcc:	ldr	r7, [sp, #24]
   12fd0:	add	fp, fp, r3
   12fd4:	add	lr, r5, lr
   12fd8:	mov	r5, r8
   12fdc:	ldr	r8, [sp, #28]
   12fe0:	add	r0, r0, ip, ror #27
   12fe4:	add	r9, fp, r9
   12fe8:	ror	ip, ip, #2
   12fec:	ldr	fp, [sp, #32]
   12ff0:	ror	sl, sl, #31
   12ff4:	eor	r6, r4, ip
   12ff8:	str	r1, [sp, #48]	; 0x30
   12ffc:	eor	r7, r7, r8
   13000:	mov	r1, sl
   13004:	ldr	sl, [sp, #52]	; 0x34
   13008:	eor	r6, r6, r0
   1300c:	eor	r7, r7, fp
   13010:	add	r9, r6, r9
   13014:	eor	r7, r7, sl
   13018:	ldr	r6, [sp, #8]
   1301c:	ldr	sl, [sp, #12]
   13020:	str	r5, [sp, #20]
   13024:	eor	sl, r6, sl
   13028:	ror	r7, r7, #31
   1302c:	ldr	r6, [sp, #44]	; 0x2c
   13030:	add	lr, lr, r0, ror #27
   13034:	str	r7, [sp, #8]
   13038:	ror	r0, r0, #2
   1303c:	ldr	r7, [sp, #20]
   13040:	add	r8, r5, r3
   13044:	eor	sl, sl, r6
   13048:	eor	r5, ip, r0
   1304c:	eor	r5, r5, lr
   13050:	add	r4, r8, r4
   13054:	eor	sl, sl, r7
   13058:	ldr	r8, [sp, #28]
   1305c:	ldr	r7, [sp, #56]	; 0x38
   13060:	add	r4, r5, r4
   13064:	ldr	r5, [sp, #36]	; 0x24
   13068:	add	r9, r9, lr, ror #27
   1306c:	eor	r7, r8, r7
   13070:	ror	lr, lr, #2
   13074:	add	r6, r1, r3
   13078:	eor	fp, r0, lr
   1307c:	eor	r7, r7, r5
   13080:	str	r1, [sp, #64]	; 0x40
   13084:	eor	fp, fp, r9
   13088:	eor	r7, r7, r1
   1308c:	add	ip, r6, ip
   13090:	ldr	r1, [sp, #12]
   13094:	ror	sl, sl, #31
   13098:	mov	r6, sl
   1309c:	add	ip, fp, ip
   130a0:	ldr	sl, [sp, #16]
   130a4:	ldr	fp, [sp, #8]
   130a8:	add	r4, r4, r9, ror #27
   130ac:	eor	r1, r1, r2
   130b0:	ror	r9, r9, #2
   130b4:	add	r8, fp, r3
   130b8:	eor	r5, lr, r9
   130bc:	eor	r1, r1, sl
   130c0:	eor	r5, r5, r4
   130c4:	add	r0, r8, r0
   130c8:	eor	r1, r1, fp
   130cc:	add	r0, r5, r0
   130d0:	ldr	fp, [sp, #40]	; 0x28
   130d4:	ror	r5, r7, #31
   130d8:	ldr	r7, [sp, #56]	; 0x38
   130dc:	str	r6, [sp, #24]
   130e0:	ldr	r8, [sp, #48]	; 0x30
   130e4:	ror	r1, r1, #31
   130e8:	str	r1, [sp, #12]
   130ec:	add	ip, ip, r4, ror #27
   130f0:	ldr	r1, [sp, #24]
   130f4:	ror	r4, r4, #2
   130f8:	eor	r7, r7, fp
   130fc:	add	sl, r6, r3
   13100:	eor	r7, r7, r8
   13104:	eor	r6, r9, r4
   13108:	add	r0, r0, ip, ror #27
   1310c:	eor	r6, r6, ip
   13110:	eor	r7, r7, r1
   13114:	ror	ip, ip, #2
   13118:	str	r5, [sp, #28]
   1311c:	add	r8, r5, r3
   13120:	add	lr, sl, lr
   13124:	eor	r5, r4, ip
   13128:	ldr	sl, [sp, #60]	; 0x3c
   1312c:	ldr	r1, [sp, #52]	; 0x34
   13130:	eor	r5, r5, r0
   13134:	add	r9, r8, r9
   13138:	ror	r7, r7, #31
   1313c:	eor	r2, r2, sl
   13140:	add	r9, r5, r9
   13144:	mov	r5, r7
   13148:	ldr	r7, [sp, #28]
   1314c:	add	lr, r6, lr
   13150:	eor	r2, r2, r1
   13154:	ldr	r1, [sp, #12]
   13158:	add	lr, lr, r0, ror #27
   1315c:	eor	r2, r2, r7
   13160:	ror	r0, r0, #2
   13164:	add	r6, r1, r3
   13168:	eor	r1, ip, r0
   1316c:	eor	r1, r1, lr
   13170:	mov	r8, fp
   13174:	add	r4, r6, r4
   13178:	ldr	fp, [sp, #32]
   1317c:	ror	r2, r2, #31
   13180:	str	r2, [sp, #40]	; 0x28
   13184:	add	r4, r1, r4
   13188:	ldr	r1, [sp, #20]
   1318c:	add	r7, r5, r3
   13190:	ldr	r2, [sp, #12]
   13194:	ldr	r6, [sp, #40]	; 0x28
   13198:	eor	fp, r8, fp
   1319c:	eor	fp, fp, r1
   131a0:	add	ip, r7, ip
   131a4:	ldr	r7, [sp, #44]	; 0x2c
   131a8:	add	r9, r9, lr, ror #27
   131ac:	eor	fp, fp, r2
   131b0:	ror	lr, lr, #2
   131b4:	add	r3, r6, r3
   131b8:	ldr	r6, [sp, #64]	; 0x40
   131bc:	mov	r8, r5
   131c0:	eor	sl, sl, r7
   131c4:	eor	r5, r0, lr
   131c8:	add	r4, r4, r9, ror #27
   131cc:	eor	r5, r5, r9
   131d0:	eor	sl, sl, r6
   131d4:	ror	r9, r9, #2
   131d8:	ror	r6, fp, #31
   131dc:	eor	r2, lr, r9
   131e0:	ldr	fp, [sp, #32]
   131e4:	eor	sl, sl, r8
   131e8:	add	ip, r5, ip
   131ec:	mov	r5, r6
   131f0:	ldr	r6, [sp, #36]	; 0x24
   131f4:	add	ip, ip, r4, ror #27
   131f8:	eor	r2, r2, r4
   131fc:	add	r0, r3, r0
   13200:	ror	r4, r4, #2
   13204:	ldr	r3, [pc, #1688]	; 138a4 <rb_base64_encode@plt+0x29b4>
   13208:	eor	r1, fp, r6
   1320c:	add	r0, r2, r0
   13210:	ror	fp, sl, #31
   13214:	orr	r2, ip, r4
   13218:	add	r6, r5, r3
   1321c:	str	r8, [sp, #56]	; 0x38
   13220:	str	r5, [sp, #60]	; 0x3c
   13224:	and	r8, ip, r4
   13228:	str	fp, [sp, #32]
   1322c:	and	r2, r2, r9
   13230:	ldr	fp, [sp, #8]
   13234:	orr	r2, r2, r8
   13238:	add	lr, r6, lr
   1323c:	add	r0, r0, ip, ror #27
   13240:	ldr	sl, [sp, #16]
   13244:	ror	ip, ip, #2
   13248:	eor	r1, r1, fp
   1324c:	add	lr, r2, lr
   13250:	ldr	fp, [sp, #40]	; 0x28
   13254:	ldr	r2, [sp, #32]
   13258:	orr	r5, r0, ip
   1325c:	eor	r1, r1, fp
   13260:	eor	sl, r7, sl
   13264:	and	fp, r0, ip
   13268:	add	r7, r2, r3
   1326c:	and	r5, r5, r4
   13270:	ldr	r2, [sp, #24]
   13274:	orr	r5, r5, fp
   13278:	ldr	fp, [sp, #60]	; 0x3c
   1327c:	eor	sl, sl, r2
   13280:	add	lr, lr, r0, ror #27
   13284:	eor	sl, sl, fp
   13288:	add	r9, r7, r9
   1328c:	add	r9, r5, r9
   13290:	ror	r7, r1, #31
   13294:	ldr	r6, [sp, #36]	; 0x24
   13298:	mov	r1, r7
   1329c:	ldr	r8, [sp, #48]	; 0x30
   132a0:	add	r7, r9, lr, ror #27
   132a4:	ror	r9, sl, #31
   132a8:	ror	r0, r0, #2
   132ac:	mov	fp, r9
   132b0:	ldr	r9, [sp, #28]
   132b4:	orr	r2, lr, r0
   132b8:	eor	r8, r6, r8
   132bc:	and	r5, lr, r0
   132c0:	and	r2, r2, ip
   132c4:	eor	r8, r8, r9
   132c8:	ldr	r9, [sp, #32]
   132cc:	str	r1, [sp, #36]	; 0x24
   132d0:	ror	lr, lr, #2
   132d4:	ldr	sl, [sp, #16]
   132d8:	add	r1, r1, r3
   132dc:	orr	r2, r2, r5
   132e0:	ldr	r5, [sp, #52]	; 0x34
   132e4:	orr	r6, r7, lr
   132e8:	eor	r8, r8, r9
   132ec:	add	r4, r1, r4
   132f0:	ldr	r1, [sp, #12]
   132f4:	and	r9, r7, lr
   132f8:	eor	sl, sl, r5
   132fc:	add	r4, r2, r4
   13300:	and	r6, r6, r0
   13304:	add	r4, r4, r7, ror #27
   13308:	str	fp, [sp, #16]
   1330c:	orr	r6, r6, r9
   13310:	add	fp, fp, r3
   13314:	ldr	r9, [sp, #36]	; 0x24
   13318:	eor	sl, sl, r1
   1331c:	ror	r1, r7, #2
   13320:	ror	r7, r8, #31
   13324:	add	ip, fp, ip
   13328:	ldr	r8, [sp, #48]	; 0x30
   1332c:	mov	fp, r7
   13330:	ldr	r7, [sp, #20]
   13334:	orr	r2, r4, r1
   13338:	eor	sl, sl, r9
   1333c:	eor	r7, r8, r7
   13340:	ldr	r9, [sp, #56]	; 0x38
   13344:	and	r8, r4, r1
   13348:	and	r2, r2, lr
   1334c:	orr	r2, r2, r8
   13350:	ror	sl, sl, #31
   13354:	ldr	r8, [sp, #16]
   13358:	str	fp, [sp, #44]	; 0x2c
   1335c:	add	ip, r6, ip
   13360:	eor	r7, r7, r9
   13364:	add	r6, fp, r3
   13368:	mov	fp, sl
   1336c:	ldr	sl, [sp, #64]	; 0x40
   13370:	eor	r7, r7, r8
   13374:	ldr	r8, [sp, #40]	; 0x28
   13378:	add	ip, ip, r4, ror #27
   1337c:	add	r0, r6, r0
   13380:	ror	r4, r4, #2
   13384:	ldr	r6, [sp, #44]	; 0x2c
   13388:	eor	sl, r5, sl
   1338c:	orr	r9, ip, r4
   13390:	eor	sl, sl, r8
   13394:	str	fp, [sp, #68]	; 0x44
   13398:	and	r5, ip, r4
   1339c:	add	fp, fp, r3
   133a0:	eor	sl, sl, r6
   133a4:	and	r9, r9, r1
   133a8:	add	lr, fp, lr
   133ac:	orr	r9, r9, r5
   133b0:	ldr	fp, [sp, #8]
   133b4:	ror	r5, r7, #31
   133b8:	add	r9, r9, lr
   133bc:	ldr	r7, [sp, #20]
   133c0:	ror	lr, sl, #31
   133c4:	mov	r6, lr
   133c8:	ldr	lr, [sp, #60]	; 0x3c
   133cc:	add	r0, r2, r0
   133d0:	eor	r7, r7, fp
   133d4:	add	r0, r0, ip, ror #27
   133d8:	eor	r7, r7, lr
   133dc:	ror	ip, ip, #2
   133e0:	ldr	lr, [sp, #68]	; 0x44
   133e4:	orr	r8, r0, ip
   133e8:	add	r9, r9, r0, ror #27
   133ec:	and	fp, r0, ip
   133f0:	str	r5, [sp, #20]
   133f4:	ror	r0, r0, #2
   133f8:	add	r5, r5, r3
   133fc:	ldr	sl, [sp, #64]	; 0x40
   13400:	and	r8, r8, r4
   13404:	eor	r7, r7, lr
   13408:	ldr	lr, [sp, #24]
   1340c:	orr	r8, r8, fp
   13410:	orr	r2, r9, r0
   13414:	add	r1, r5, r1
   13418:	str	r6, [sp, #72]	; 0x48
   1341c:	eor	sl, sl, lr
   13420:	add	r1, r8, r1
   13424:	add	lr, r6, r3
   13428:	ldr	r8, [sp, #32]
   1342c:	and	r6, r9, r0
   13430:	and	r2, r2, ip
   13434:	ror	r7, r7, #31
   13438:	orr	r2, r2, r6
   1343c:	mov	r6, r7
   13440:	ldr	r7, [sp, #20]
   13444:	eor	sl, sl, r8
   13448:	eor	sl, sl, r7
   1344c:	add	r1, r1, r9, ror #27
   13450:	ldr	fp, [sp, #8]
   13454:	ror	r9, r9, #2
   13458:	ldr	r7, [sp, #28]
   1345c:	add	r4, lr, r4
   13460:	ror	sl, sl, #31
   13464:	str	sl, [sp, #48]	; 0x30
   13468:	orr	r5, r1, r9
   1346c:	ldr	sl, [sp, #36]	; 0x24
   13470:	add	r4, r2, r4
   13474:	add	r8, r4, r1, ror #27
   13478:	add	lr, r6, r3
   1347c:	and	r4, r1, r9
   13480:	and	r2, r5, r0
   13484:	eor	r7, fp, r7
   13488:	ldr	fp, [sp, #72]	; 0x48
   1348c:	orr	r2, r2, r4
   13490:	eor	r7, r7, sl
   13494:	ldr	r4, [sp, #12]
   13498:	add	ip, lr, ip
   1349c:	ldr	lr, [sp, #24]
   134a0:	str	r6, [sp, #76]	; 0x4c
   134a4:	ror	r1, r1, #2
   134a8:	eor	r7, r7, fp
   134ac:	ldr	sl, [sp, #48]	; 0x30
   134b0:	ldr	fp, [sp, #16]
   134b4:	orr	r5, r8, r1
   134b8:	eor	r6, lr, r4
   134bc:	ldr	r4, [sp, #76]	; 0x4c
   134c0:	add	sl, sl, r3
   134c4:	add	ip, r2, ip
   134c8:	and	r5, r5, r9
   134cc:	and	r2, r8, r1
   134d0:	eor	r6, r6, fp
   134d4:	add	ip, ip, r8, ror #27
   134d8:	ldr	lr, [sp, #28]
   134dc:	orr	r5, r5, r2
   134e0:	eor	r6, r6, r4
   134e4:	add	r0, sl, r0
   134e8:	ldr	sl, [sp, #56]	; 0x38
   134ec:	ror	r8, r8, #2
   134f0:	add	r0, r5, r0
   134f4:	ror	r2, r7, #31
   134f8:	eor	r5, lr, sl
   134fc:	orr	r7, ip, r8
   13500:	add	sl, r0, ip, ror #27
   13504:	and	lr, ip, r8
   13508:	ror	r0, ip, #2
   1350c:	ror	ip, r6, #31
   13510:	str	r2, [sp, #80]	; 0x50
   13514:	add	r4, r2, r3
   13518:	and	r2, r7, r1
   1351c:	mov	r7, ip
   13520:	ldr	ip, [sp, #44]	; 0x2c
   13524:	add	r9, r4, r9
   13528:	orr	r4, r2, lr
   1352c:	ldr	r2, [sp, #48]	; 0x30
   13530:	eor	r5, r5, ip
   13534:	eor	r5, r5, r2
   13538:	ldr	r6, [sp, #40]	; 0x28
   1353c:	add	lr, r7, r3
   13540:	ldr	ip, [sp, #12]
   13544:	str	r7, [sp, #40]	; 0x28
   13548:	add	r1, lr, r1
   1354c:	ldr	r7, [sp, #68]	; 0x44
   13550:	ror	lr, r5, #31
   13554:	mov	r5, lr
   13558:	eor	ip, ip, r6
   1355c:	ldr	lr, [sp, #80]	; 0x50
   13560:	eor	ip, ip, r7
   13564:	orr	fp, sl, r0
   13568:	eor	ip, ip, lr
   1356c:	and	r2, sl, r0
   13570:	and	fp, fp, r8
   13574:	ldr	r7, [sp, #60]	; 0x3c
   13578:	add	r4, r4, r9
   1357c:	orr	fp, fp, r2
   13580:	ldr	r9, [sp, #56]	; 0x38
   13584:	ror	ip, ip, #31
   13588:	add	r4, r4, sl, ror #27
   1358c:	str	r5, [sp, #52]	; 0x34
   13590:	ror	sl, sl, #2
   13594:	add	fp, fp, r1
   13598:	add	r1, r5, r3
   1359c:	mov	r5, ip
   135a0:	ldr	ip, [sp, #20]
   135a4:	orr	r2, r4, sl
   135a8:	eor	r9, r9, r7
   135ac:	add	fp, fp, r4, ror #27
   135b0:	and	lr, r4, sl
   135b4:	and	r2, r2, r0
   135b8:	ror	r4, r4, #2
   135bc:	eor	r9, r9, ip
   135c0:	ldr	ip, [sp, #40]	; 0x28
   135c4:	add	r1, r1, r8
   135c8:	orr	r2, r2, lr
   135cc:	mov	r8, r6
   135d0:	orr	lr, fp, r4
   135d4:	ldr	r6, [sp, #32]
   135d8:	str	r5, [sp, #56]	; 0x38
   135dc:	eor	r9, r9, ip
   135e0:	add	r2, r2, r1
   135e4:	add	ip, r5, r3
   135e8:	and	r1, fp, r4
   135ec:	ldr	r5, [sp, #72]	; 0x48
   135f0:	and	lr, lr, sl
   135f4:	eor	r8, r8, r6
   135f8:	orr	lr, lr, r1
   135fc:	ldr	r1, [sp, #52]	; 0x34
   13600:	eor	r8, r8, r5
   13604:	eor	r8, r8, r1
   13608:	ror	r9, r9, #31
   1360c:	add	r0, ip, r0
   13610:	ror	r8, r8, #31
   13614:	mov	ip, r9
   13618:	ldr	r9, [sp, #36]	; 0x24
   1361c:	add	r2, r2, fp, ror #27
   13620:	str	r8, [sp, #8]
   13624:	ror	fp, fp, #2
   13628:	ldr	r8, [sp, #16]
   1362c:	orr	r5, r2, fp
   13630:	add	lr, lr, r0
   13634:	eor	r9, r7, r9
   13638:	add	r0, ip, r3
   1363c:	ldr	r7, [sp, #76]	; 0x4c
   13640:	and	r1, r2, fp
   13644:	add	sl, r0, sl
   13648:	and	r5, r5, r4
   1364c:	ldr	r0, [sp, #56]	; 0x38
   13650:	eor	r8, r6, r8
   13654:	ldr	r6, [sp, #8]
   13658:	str	ip, [sp, #60]	; 0x3c
   1365c:	eor	r9, r9, r7
   13660:	orr	r5, r5, r1
   13664:	ldr	r1, [sp, #48]	; 0x30
   13668:	add	lr, lr, r2, ror #27
   1366c:	add	ip, r6, r3
   13670:	ror	r2, r2, #2
   13674:	ldr	r6, [sp, #60]	; 0x3c
   13678:	eor	r9, r9, r0
   1367c:	orr	r7, lr, r2
   13680:	eor	r8, r8, r1
   13684:	and	r0, lr, r2
   13688:	eor	r8, r8, r6
   1368c:	add	r5, r5, sl
   13690:	ldr	r6, [sp, #44]	; 0x2c
   13694:	ror	sl, r9, #31
   13698:	and	r7, r7, fp
   1369c:	ldr	r9, [sp, #36]	; 0x24
   136a0:	mov	r1, sl
   136a4:	add	r4, ip, r4
   136a8:	orr	r7, r7, r0
   136ac:	eor	sl, r9, r6
   136b0:	add	r7, r7, r4
   136b4:	ldr	r6, [sp, #80]	; 0x50
   136b8:	add	r4, r1, r3
   136bc:	ror	r9, r8, #31
   136c0:	add	r5, r5, lr, ror #27
   136c4:	ldr	r8, [sp, #16]
   136c8:	ror	lr, lr, #2
   136cc:	str	r1, [sp, #64]	; 0x40
   136d0:	str	r9, [sp, #12]
   136d4:	add	r1, r4, fp
   136d8:	ldr	r9, [sp, #68]	; 0x44
   136dc:	ldr	r4, [sp, #8]
   136e0:	orr	ip, r5, lr
   136e4:	eor	sl, sl, r6
   136e8:	and	r0, r5, lr
   136ec:	eor	sl, sl, r4
   136f0:	eor	fp, r8, r9
   136f4:	and	ip, ip, r2
   136f8:	ldr	r8, [sp, #40]	; 0x28
   136fc:	add	r7, r7, r5, ror #27
   13700:	orr	ip, ip, r0
   13704:	ror	r5, r5, #2
   13708:	orr	r6, r7, r5
   1370c:	add	ip, ip, r1
   13710:	eor	fp, fp, r8
   13714:	ldr	r1, [sp, #12]
   13718:	ror	r8, sl, #31
   1371c:	ldr	sl, [sp, #64]	; 0x40
   13720:	and	r0, r7, r5
   13724:	and	r6, r6, lr
   13728:	add	r4, r1, r3
   1372c:	orr	r6, r6, r0
   13730:	eor	fp, fp, sl
   13734:	ldr	r0, [sp, #44]	; 0x2c
   13738:	ldr	sl, [sp, #20]
   1373c:	str	r8, [sp, #16]
   13740:	add	r2, r4, r2
   13744:	ldr	r4, [sp, #52]	; 0x34
   13748:	add	ip, ip, r7, ror #27
   1374c:	eor	r8, r0, sl
   13750:	ror	r7, r7, #2
   13754:	add	r6, r6, r2
   13758:	ldr	r2, [sp, #16]
   1375c:	orr	r0, ip, r7
   13760:	eor	r8, r8, r4
   13764:	eor	r8, r8, r1
   13768:	add	r4, r2, r3
   1376c:	and	r0, r0, r5
   13770:	and	r2, ip, r7
   13774:	ror	fp, fp, #31
   13778:	str	fp, [sp, #20]
   1377c:	add	lr, r4, lr
   13780:	ldr	fp, [sp, #72]	; 0x48
   13784:	orr	r0, r0, r2
   13788:	ldr	r4, [sp, #56]	; 0x38
   1378c:	add	r0, r0, lr
   13790:	ror	lr, r8, #31
   13794:	str	lr, [sp, #24]
   13798:	eor	r9, r9, fp
   1379c:	ldr	lr, [sp, #16]
   137a0:	eor	r9, r9, r4
   137a4:	ldr	r8, [sp, #76]	; 0x4c
   137a8:	eor	r9, r9, lr
   137ac:	add	r6, r6, ip, ror #27
   137b0:	ldr	r1, [sp, #20]
   137b4:	ror	ip, ip, #2
   137b8:	mov	lr, sl
   137bc:	ldr	sl, [sp, #60]	; 0x3c
   137c0:	orr	r2, r6, ip
   137c4:	eor	lr, lr, r8
   137c8:	ror	r9, r9, #31
   137cc:	str	r9, [sp, #28]
   137d0:	and	r4, r6, ip
   137d4:	ldr	r9, [sp, #20]
   137d8:	add	r1, r1, r3
   137dc:	and	r2, r2, r7
   137e0:	ldr	r3, [pc, #192]	; 138a8 <rb_base64_encode@plt+0x29b8>
   137e4:	eor	lr, lr, sl
   137e8:	ldr	sl, [sp, #24]
   137ec:	add	r1, r1, r5
   137f0:	orr	r2, r2, r4
   137f4:	eor	lr, lr, r9
   137f8:	add	r2, r2, r1
   137fc:	ldr	r9, [sp, #48]	; 0x30
   13800:	add	r1, sl, r3
   13804:	add	r1, r1, r7
   13808:	ldr	r7, [sp, #8]
   1380c:	add	r0, r0, r6, ror #27
   13810:	eor	r5, fp, r9
   13814:	ror	r6, r6, #2
   13818:	eor	r4, ip, r6
   1381c:	eor	r5, r5, r7
   13820:	ldr	r7, [sp, #28]
   13824:	add	r2, r2, r0, ror #27
   13828:	eor	r4, r4, r0
   1382c:	ror	r0, r0, #2
   13830:	add	r7, r7, r3
   13834:	eor	r5, r5, sl
   13838:	add	r4, r4, r1
   1383c:	eor	r1, r6, r0
   13840:	ldr	sl, [sp, #80]	; 0x50
   13844:	ror	fp, lr, #31
   13848:	add	ip, r7, ip
   1384c:	eor	r1, r1, r2
   13850:	str	fp, [sp, #32]
   13854:	add	r1, r1, ip
   13858:	ldr	fp, [sp, #64]	; 0x40
   1385c:	ror	ip, r5, #31
   13860:	str	ip, [sp, #36]	; 0x24
   13864:	eor	lr, r8, sl
   13868:	ldr	ip, [sp, #28]
   1386c:	ldr	r8, [sp, #32]
   13870:	eor	lr, lr, fp
   13874:	add	r4, r4, r2, ror #27
   13878:	eor	lr, lr, ip
   1387c:	ror	r2, r2, #2
   13880:	ldr	ip, [sp, #40]	; 0x28
   13884:	eor	r7, r0, r2
   13888:	add	r8, r8, r3
   1388c:	eor	r5, r9, ip
   13890:	add	r6, r8, r6
   13894:	ldr	r9, [sp, #12]
   13898:	b	138ac <rb_base64_encode@plt+0x29bc>
   1389c:	bpl	fe0b1f08 <stderr@@GLIBC_2.4+0xfe08ce18>
   138a0:	vfnmsvs.f64	d30, d25, d17
   138a4:	svchi	0x001bbcdc
   138a8:	bgt	18c4008 <stderr@@GLIBC_2.4+0x189ef18>
   138ac:	eor	r8, r7, r4
   138b0:	ror	lr, lr, #31
   138b4:	str	lr, [sp, #44]	; 0x2c
   138b8:	add	r8, r8, r6
   138bc:	ldr	lr, [sp, #32]
   138c0:	ldr	r6, [sp, #36]	; 0x24
   138c4:	ror	ip, r4, #2
   138c8:	eor	r5, r5, r9
   138cc:	add	r1, r1, r4, ror #27
   138d0:	eor	fp, r2, ip
   138d4:	ldr	r4, [sp, #52]	; 0x34
   138d8:	add	r6, r6, r3
   138dc:	eor	r5, r5, lr
   138e0:	add	r0, r6, r0
   138e4:	ldr	lr, [sp, #16]
   138e8:	ldr	r6, [sp, #44]	; 0x2c
   138ec:	eor	fp, fp, r1
   138f0:	eor	r7, sl, r4
   138f4:	add	fp, fp, r0
   138f8:	ror	r0, r5, #31
   138fc:	ror	r9, r1, #2
   13900:	add	r8, r8, r1, ror #27
   13904:	add	r4, r6, r3
   13908:	mov	r1, r0
   1390c:	ldr	r6, [sp, #36]	; 0x24
   13910:	ldr	r0, [sp, #40]	; 0x28
   13914:	eor	r7, r7, lr
   13918:	ldr	lr, [sp, #56]	; 0x38
   1391c:	eor	sl, ip, r9
   13920:	eor	r7, r7, r6
   13924:	eor	r6, r0, lr
   13928:	ldr	r0, [sp, #20]
   1392c:	add	fp, fp, r8, ror #27
   13930:	eor	sl, sl, r8
   13934:	ror	r8, r8, #2
   13938:	str	r1, [sp, #40]	; 0x28
   1393c:	ldr	lr, [sp, #60]	; 0x3c
   13940:	add	r2, r4, r2
   13944:	eor	r6, r6, r0
   13948:	ldr	r4, [sp, #52]	; 0x34
   1394c:	eor	r0, r9, r8
   13950:	add	r1, r1, r3
   13954:	eor	r0, r0, fp
   13958:	add	r1, r1, ip
   1395c:	ldr	ip, [sp, #24]
   13960:	eor	r5, r4, lr
   13964:	add	r1, r0, r1
   13968:	ldr	r0, [sp, #40]	; 0x28
   1396c:	eor	r5, r5, ip
   13970:	ldr	r4, [sp, #56]	; 0x38
   13974:	add	sl, sl, r2
   13978:	eor	r5, r5, r0
   1397c:	ldr	r2, [sp, #44]	; 0x2c
   13980:	ldr	r0, [sp, #8]
   13984:	add	sl, sl, fp, ror #27
   13988:	ror	r7, r7, #31
   1398c:	ror	fp, fp, #2
   13990:	add	lr, r7, r3
   13994:	eor	ip, r4, r0
   13998:	eor	r6, r6, r2
   1399c:	ldr	r4, [sp, #28]
   139a0:	eor	r2, r8, fp
   139a4:	add	lr, lr, r9
   139a8:	eor	r2, r2, sl
   139ac:	add	r1, r1, sl, ror #27
   139b0:	ror	r6, r6, #31
   139b4:	ror	sl, sl, #2
   139b8:	ldr	r9, [sp, #64]	; 0x40
   139bc:	eor	ip, ip, r4
   139c0:	add	r2, r2, lr
   139c4:	ldr	lr, [sp, #60]	; 0x3c
   139c8:	str	r6, [sp, #56]	; 0x38
   139cc:	add	r0, r6, r3
   139d0:	eor	r4, fp, sl
   139d4:	ldr	r6, [sp, #32]
   139d8:	eor	ip, ip, r7
   139dc:	add	r8, r0, r8
   139e0:	eor	r9, lr, r9
   139e4:	eor	r4, r4, r1
   139e8:	eor	r9, r9, r6
   139ec:	add	r4, r4, r8
   139f0:	ldr	r6, [sp, #56]	; 0x38
   139f4:	ror	r8, ip, #31
   139f8:	str	r8, [sp, #48]	; 0x30
   139fc:	ldr	ip, [sp, #8]
   13a00:	ldr	r8, [sp, #12]
   13a04:	add	r2, r2, r1, ror #27
   13a08:	ror	r5, r5, #31
   13a0c:	ror	r1, r1, #2
   13a10:	eor	r9, r9, r6
   13a14:	ldr	r6, [sp, #36]	; 0x24
   13a18:	add	r0, r5, r3
   13a1c:	eor	lr, sl, r1
   13a20:	eor	r8, ip, r8
   13a24:	add	fp, r0, fp
   13a28:	eor	lr, lr, r2
   13a2c:	eor	r8, r8, r6
   13a30:	ldr	r6, [sp, #48]	; 0x30
   13a34:	add	lr, lr, fp
   13a38:	ror	fp, r9, #31
   13a3c:	str	fp, [sp, #8]
   13a40:	add	r0, r6, r3
   13a44:	ldr	fp, [sp, #16]
   13a48:	ldr	r9, [sp, #64]	; 0x40
   13a4c:	eor	r8, r8, r5
   13a50:	add	r0, r0, sl
   13a54:	ldr	sl, [sp, #44]	; 0x2c
   13a58:	eor	r9, r9, fp
   13a5c:	ror	r8, r8, #31
   13a60:	ldr	fp, [sp, #8]
   13a64:	str	r8, [sp, #52]	; 0x34
   13a68:	eor	r9, r9, sl
   13a6c:	add	r4, r4, r2, ror #27
   13a70:	add	sl, fp, r3
   13a74:	ror	r2, r2, #2
   13a78:	ldr	fp, [sp, #20]
   13a7c:	ldr	r8, [sp, #12]
   13a80:	eor	r9, r9, r6
   13a84:	ldr	r6, [sp, #52]	; 0x34
   13a88:	eor	ip, r1, r2
   13a8c:	add	r1, sl, r1
   13a90:	ldr	sl, [sp, #40]	; 0x28
   13a94:	eor	r8, r8, fp
   13a98:	add	fp, r6, r3
   13a9c:	ldr	r6, [sp, #8]
   13aa0:	eor	r8, r8, sl
   13aa4:	eor	r8, r8, r6
   13aa8:	ldr	sl, [sp, #16]
   13aac:	ldr	r6, [sp, #24]
   13ab0:	add	lr, lr, r4, ror #27
   13ab4:	eor	ip, ip, r4
   13ab8:	ror	r4, r4, #2
   13abc:	eor	sl, sl, r6
   13ac0:	add	ip, ip, r0
   13ac4:	ldr	r6, [sp, #28]
   13ac8:	eor	r0, r2, r4
   13acc:	add	r2, fp, r2
   13ad0:	ldr	fp, [sp, #20]
   13ad4:	add	ip, ip, lr, ror #27
   13ad8:	eor	fp, fp, r6
   13adc:	ldr	r6, [sp, #52]	; 0x34
   13ae0:	eor	r0, r0, lr
   13ae4:	eor	r7, r7, sl
   13ae8:	ror	lr, lr, #2
   13aec:	add	r0, r0, r1
   13af0:	eor	r7, r7, r6
   13af4:	eor	r1, r4, lr
   13af8:	ldr	r6, [sp, #56]	; 0x38
   13afc:	add	r0, r0, ip, ror #27
   13b00:	ror	r9, r9, #31
   13b04:	eor	r1, r1, ip
   13b08:	ror	ip, ip, #2
   13b0c:	add	sl, r9, r3
   13b10:	add	r1, r1, r2
   13b14:	eor	r6, r6, fp
   13b18:	eor	r2, lr, ip
   13b1c:	add	r1, r1, r0, ror #27
   13b20:	ldr	fp, [sp, #32]
   13b24:	add	r4, sl, r4
   13b28:	ror	r8, r8, #31
   13b2c:	eor	r2, r2, r0
   13b30:	eor	r6, r6, r9
   13b34:	ror	r0, r0, #2
   13b38:	ldr	r9, [sp, #24]
   13b3c:	add	sl, r8, r3
   13b40:	add	r2, r2, r4
   13b44:	eor	r4, ip, r0
   13b48:	eor	r9, r9, fp
   13b4c:	eor	r4, r4, r1
   13b50:	ror	r7, r7, #31
   13b54:	add	lr, sl, lr
   13b58:	add	r2, r2, r1, ror #27
   13b5c:	add	sl, r7, r3
   13b60:	ror	r1, r1, #2
   13b64:	eor	r5, r5, r9
   13b68:	add	lr, r4, lr
   13b6c:	ldr	r4, [sp, #28]
   13b70:	ldr	r9, [sp, #36]	; 0x24
   13b74:	eor	fp, r0, r1
   13b78:	add	ip, sl, ip
   13b7c:	ldr	sl, [sp, #48]	; 0x30
   13b80:	add	lr, lr, r2, ror #27
   13b84:	eor	fp, fp, r2
   13b88:	ror	r6, r6, #31
   13b8c:	ror	r2, r2, #2
   13b90:	eor	r9, r4, r9
   13b94:	eor	r9, r9, sl
   13b98:	add	r4, r6, r3
   13b9c:	add	ip, fp, ip
   13ba0:	eor	fp, r1, r2
   13ba4:	ror	sl, lr, #2
   13ba8:	add	ip, ip, lr, ror #27
   13bac:	eor	fp, fp, lr
   13bb0:	eor	r8, r8, r5
   13bb4:	add	r0, r4, r0
   13bb8:	eor	r7, r7, r9
   13bbc:	ldr	lr, [sp, #32]
   13bc0:	ldr	r9, [sp, #44]	; 0x2c
   13bc4:	add	r0, fp, r0
   13bc8:	ldr	fp, [sp, #8]
   13bcc:	ror	r8, r8, #31
   13bd0:	eor	lr, lr, r9
   13bd4:	eor	lr, lr, fp
   13bd8:	add	r9, r8, r3
   13bdc:	add	r1, r9, r1
   13be0:	eor	r6, r6, lr
   13be4:	ldr	r9, [sp, #36]	; 0x24
   13be8:	ldr	lr, [sp, #40]	; 0x28
   13bec:	eor	r5, r2, sl
   13bf0:	eor	lr, r9, lr
   13bf4:	ldr	r9, [sp, #52]	; 0x34
   13bf8:	add	r0, r0, ip, ror #27
   13bfc:	eor	r5, r5, ip
   13c00:	ror	ip, ip, #2
   13c04:	eor	r4, lr, r9
   13c08:	add	r7, r3, r7, ror #31
   13c0c:	eor	fp, sl, ip
   13c10:	add	r1, r5, r1
   13c14:	add	r1, r1, r0, ror #27
   13c18:	eor	fp, fp, r0
   13c1c:	add	r2, r7, r2
   13c20:	ror	r0, r0, #2
   13c24:	eor	r8, r8, r4
   13c28:	ldr	r4, [sp, #84]	; 0x54
   13c2c:	eor	r9, ip, r0
   13c30:	add	r6, r3, r6, ror #31
   13c34:	add	r2, r2, fp
   13c38:	add	r2, r2, r1, ror #27
   13c3c:	add	r3, r4, r3
   13c40:	eor	r9, r9, r1
   13c44:	ldr	r5, [sp, #92]	; 0x5c
   13c48:	add	r6, r6, sl
   13c4c:	ror	r1, r1, #2
   13c50:	add	r8, r3, r8, ror #31
   13c54:	add	r6, r6, r9
   13c58:	eor	r3, r0, r1
   13c5c:	add	r6, r6, r2, ror #27
   13c60:	add	ip, r8, ip
   13c64:	ldr	lr, [sp, #100]	; 0x64
   13c68:	eor	r8, r3, r2
   13c6c:	ldr	r4, [sp, #88]	; 0x58
   13c70:	ldr	r3, [sp, #4]
   13c74:	add	r2, r5, r2, ror #2
   13c78:	ldr	r5, [sp, #96]	; 0x60
   13c7c:	add	ip, ip, r8
   13c80:	add	r0, lr, r0
   13c84:	add	ip, ip, r6, ror #27
   13c88:	add	r1, r5, r1
   13c8c:	add	r6, r4, r6
   13c90:	str	r0, [r3, #16]
   13c94:	str	r2, [r3, #8]
   13c98:	mov	r0, #0
   13c9c:	str	ip, [r3]
   13ca0:	str	r6, [r3, #4]
   13ca4:	str	r1, [r3, #12]
   13ca8:	add	sp, sp, #172	; 0xac
   13cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cb0:	push	{r4, r5, lr}
   13cb4:	mov	r2, #0
   13cb8:	ldr	r4, [pc, #40]	; 13ce8 <rb_base64_encode@plt+0x2df8>
   13cbc:	ldr	lr, [pc, #40]	; 13cec <rb_base64_encode@plt+0x2dfc>
   13cc0:	ldr	r5, [pc, #40]	; 13cf0 <rb_base64_encode@plt+0x2e00>
   13cc4:	ldr	ip, [pc, #40]	; 13cf4 <rb_base64_encode@plt+0x2e04>
   13cc8:	ldr	r1, [pc, #40]	; 13cf8 <rb_base64_encode@plt+0x2e08>
   13ccc:	mov	r3, #0
   13cd0:	str	r5, [r0]
   13cd4:	stmib	r0, {r4, lr}
   13cd8:	str	ip, [r0, #12]
   13cdc:	str	r1, [r0, #16]
   13ce0:	strd	r2, [r0, #24]
   13ce4:	pop	{r4, r5, pc}
   13ce8:	svc	0x00cdab89
   13cec:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   13cf0:	strbvs	r2, [r5, -r1, lsl #6]
   13cf4:	eorsne	r5, r2, r6, ror r4
   13cf8:	bicsgt	lr, r2, #240, 2	; 0x3c
   13cfc:	push	{r4, r5, r6, r7, r8, lr}
   13d00:	mov	r7, r2
   13d04:	ldrd	r2, [r0, #24]
   13d08:	lsl	ip, r7, #3
   13d0c:	mov	r5, r0
   13d10:	lsr	r6, r2, #3
   13d14:	and	r6, r6, #63	; 0x3f
   13d18:	adds	r2, r2, ip
   13d1c:	adc	r3, r3, #0
   13d20:	add	r0, r6, r7
   13d24:	cmp	r0, #63	; 0x3f
   13d28:	mov	r8, r1
   13d2c:	strd	r2, [r5, #24]
   13d30:	addls	r0, r6, #32
   13d34:	movls	r1, #0
   13d38:	bhi	13d50 <rb_base64_encode@plt+0x2e60>
   13d3c:	sub	r2, r7, r1
   13d40:	add	r0, r5, r0
   13d44:	add	r1, r8, r1
   13d48:	pop	{r4, r5, r6, r7, r8, lr}
   13d4c:	b	10dc4 <memcpy@plt>
   13d50:	rsb	r4, r6, #64	; 0x40
   13d54:	add	r0, r6, #32
   13d58:	mov	r2, r4
   13d5c:	add	r0, r5, r0
   13d60:	bl	10dc4 <memcpy@plt>
   13d64:	rsb	r6, r6, #127	; 0x7f
   13d68:	add	r1, r5, #32
   13d6c:	mov	r0, r5
   13d70:	bl	12820 <rb_base64_encode@plt+0x1930>
   13d74:	cmp	r7, r6
   13d78:	bls	13da4 <rb_base64_encode@plt+0x2eb4>
   13d7c:	add	r1, r8, r4
   13d80:	mov	r0, r5
   13d84:	bl	12820 <rb_base64_encode@plt+0x1930>
   13d88:	add	r3, r4, #127	; 0x7f
   13d8c:	add	r1, r4, #64	; 0x40
   13d90:	cmp	r7, r3
   13d94:	mov	r4, r1
   13d98:	bhi	13d7c <rb_base64_encode@plt+0x2e8c>
   13d9c:	mov	r0, #32
   13da0:	b	13d3c <rb_base64_encode@plt+0x2e4c>
   13da4:	mov	r1, r4
   13da8:	b	13d9c <rb_base64_encode@plt+0x2eac>
   13dac:	ldrd	r2, [r0, #24]
   13db0:	push	{r4, r5, r6, r7, lr}
   13db4:	mov	r5, r1
   13db8:	lsr	r1, r3, #8
   13dbc:	and	r1, r1, #65280	; 0xff00
   13dc0:	orr	lr, r1, r3, lsr #24
   13dc4:	lsl	r1, r3, #8
   13dc8:	and	r1, r1, #16711680	; 0xff0000
   13dcc:	adds	r6, r2, #8
   13dd0:	lsr	ip, r2, #8
   13dd4:	orr	r1, r1, lr
   13dd8:	adc	r7, r3, #0
   13ddc:	orr	r1, r1, r3, lsl #24
   13de0:	and	ip, ip, #65280	; 0xff00
   13de4:	lsl	r3, r2, #8
   13de8:	orr	ip, ip, r2, lsr #24
   13dec:	and	r3, r3, #16711680	; 0xff0000
   13df0:	orr	r3, r3, ip
   13df4:	lsr	ip, r2, #3
   13df8:	sub	sp, sp, #12
   13dfc:	and	ip, ip, #63	; 0x3f
   13e00:	orr	r2, r3, r2, lsl #24
   13e04:	cmp	ip, #63	; 0x3f
   13e08:	mov	r4, r0
   13e0c:	strd	r6, [r0, #24]
   13e10:	stm	sp, {r1, r2}
   13e14:	beq	13f14 <rb_base64_encode@plt+0x3024>
   13e18:	ldr	r1, [pc, #328]	; 13f68 <rb_base64_encode@plt+0x3078>
   13e1c:	add	r0, ip, #32
   13e20:	mov	r2, #1
   13e24:	add	r0, r4, r0
   13e28:	bl	10dc4 <memcpy@plt>
   13e2c:	ldrd	r2, [r4, #24]
   13e30:	mov	r1, #0
   13e34:	cmp	r1, #0
   13e38:	and	r0, r2, #504	; 0x1f8
   13e3c:	cmpeq	r0, #448	; 0x1c0
   13e40:	beq	13e98 <rb_base64_encode@plt+0x2fa8>
   13e44:	mov	r7, #0
   13e48:	add	r6, r4, #32
   13e4c:	lsr	r1, r2, #3
   13e50:	and	r1, r1, #63	; 0x3f
   13e54:	adds	r2, r2, #8
   13e58:	adc	r3, r3, #0
   13e5c:	add	r0, r1, #32
   13e60:	cmp	r1, #63	; 0x3f
   13e64:	strd	r2, [r4, #24]
   13e68:	strbne	r7, [r4, r0]
   13e6c:	bne	13e80 <rb_base64_encode@plt+0x2f90>
   13e70:	strb	r7, [r4, #95]	; 0x5f
   13e74:	mov	r1, r6
   13e78:	mov	r0, r4
   13e7c:	bl	12820 <rb_base64_encode@plt+0x1930>
   13e80:	ldrd	r2, [r4, #24]
   13e84:	mov	r1, #0
   13e88:	cmp	r1, #0
   13e8c:	and	r0, r2, #504	; 0x1f8
   13e90:	cmpeq	r0, #448	; 0x1c0
   13e94:	bne	13e4c <rb_base64_encode@plt+0x2f5c>
   13e98:	lsr	r1, r2, #3
   13e9c:	and	r1, r1, #63	; 0x3f
   13ea0:	adds	r2, r2, #64	; 0x40
   13ea4:	adc	r3, r3, #0
   13ea8:	add	r0, r1, #8
   13eac:	cmp	r0, #63	; 0x3f
   13eb0:	strd	r2, [r4, #24]
   13eb4:	bhi	13f34 <rb_base64_encode@plt+0x3044>
   13eb8:	add	r0, r1, #32
   13ebc:	mov	r2, #8
   13ec0:	mov	r1, sp
   13ec4:	add	r0, r4, r0
   13ec8:	bl	10dc4 <memcpy@plt>
   13ecc:	sub	r1, r5, #1
   13ed0:	mov	r2, #0
   13ed4:	mvn	r3, r2
   13ed8:	lsr	r0, r2, #2
   13edc:	and	r3, r3, #3
   13ee0:	ldr	r0, [r4, r0, lsl #2]
   13ee4:	lsl	r3, r3, #3
   13ee8:	add	r2, r2, #1
   13eec:	lsr	r3, r0, r3
   13ef0:	cmp	r2, #20
   13ef4:	strb	r3, [r1, #1]!
   13ef8:	bne	13ed4 <rb_base64_encode@plt+0x2fe4>
   13efc:	mov	r0, r4
   13f00:	mov	r2, #96	; 0x60
   13f04:	mov	r1, #0
   13f08:	add	sp, sp, #12
   13f0c:	pop	{r4, r5, r6, r7, lr}
   13f10:	b	10d34 <memset@plt>
   13f14:	mvn	r3, #127	; 0x7f
   13f18:	add	r1, r0, #32
   13f1c:	strb	r3, [r0, #95]	; 0x5f
   13f20:	bl	12820 <rb_base64_encode@plt+0x1930>
   13f24:	ldr	r1, [pc, #64]	; 13f6c <rb_base64_encode@plt+0x307c>
   13f28:	mov	r0, #32
   13f2c:	mov	r2, #0
   13f30:	b	13e24 <rb_base64_encode@plt+0x2f34>
   13f34:	rsb	r6, r1, #64	; 0x40
   13f38:	add	r1, r1, #32
   13f3c:	mov	r2, r6
   13f40:	add	r0, r4, r1
   13f44:	mov	r1, sp
   13f48:	bl	10dc4 <memcpy@plt>
   13f4c:	add	r1, r4, #32
   13f50:	mov	r0, r4
   13f54:	bl	12820 <rb_base64_encode@plt+0x1930>
   13f58:	add	r1, sp, r6
   13f5c:	rsb	r2, r6, #8
   13f60:	mov	r0, #32
   13f64:	b	13ec4 <rb_base64_encode@plt+0x2fd4>
   13f68:	andeq	r4, r1, r8, lsr #5
   13f6c:	andeq	r4, r1, r9, lsr #5
   13f70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f74:	mov	r7, r0
   13f78:	ldr	r6, [pc, #72]	; 13fc8 <rb_base64_encode@plt+0x30d8>
   13f7c:	ldr	r5, [pc, #72]	; 13fcc <rb_base64_encode@plt+0x30dc>
   13f80:	add	r6, pc, r6
   13f84:	add	r5, pc, r5
   13f88:	sub	r6, r6, r5
   13f8c:	mov	r8, r1
   13f90:	mov	r9, r2
   13f94:	bl	10c60 <open@plt-0x20>
   13f98:	asrs	r6, r6, #2
   13f9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13fa0:	mov	r4, #0
   13fa4:	add	r4, r4, #1
   13fa8:	ldr	r3, [r5], #4
   13fac:	mov	r2, r9
   13fb0:	mov	r1, r8
   13fb4:	mov	r0, r7
   13fb8:	blx	r3
   13fbc:	cmp	r6, r4
   13fc0:	bne	13fa4 <rb_base64_encode@plt+0x30b4>
   13fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13fc8:	andeq	r0, r1, r0, ror pc
   13fcc:	andeq	r0, r1, r8, ror #30
   13fd0:	bx	lr

Disassembly of section .fini:

00013fd4 <.fini>:
   13fd4:	push	{r3, lr}
   13fd8:	pop	{r3, pc}
