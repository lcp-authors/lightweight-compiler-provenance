
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010d00 <.init>:
   10d00:	push	{r3, lr}
   10d04:	bl	11710 <__assert_fail@plt+0x75c>
   10d08:	pop	{r3, pc}

Disassembly of section .plt:

00010d0c <calloc@plt-0x14>:
   10d0c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d10:	ldr	lr, [pc, #4]	; 10d1c <calloc@plt-0x4>
   10d14:	add	lr, pc, lr
   10d18:	ldr	pc, [lr, #8]!
   10d1c:	andeq	r9, r1, r4, ror #5

00010d20 <calloc@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #102400	; 0x19000
   10d28:	ldr	pc, [ip, #740]!	; 0x2e4

00010d2c <fputs_unlocked@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #102400	; 0x19000
   10d34:	ldr	pc, [ip, #732]!	; 0x2dc

00010d38 <raise@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #102400	; 0x19000
   10d40:	ldr	pc, [ip, #724]!	; 0x2d4

00010d44 <strcmp@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #102400	; 0x19000
   10d4c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d50 <fflush@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #102400	; 0x19000
   10d58:	ldr	pc, [ip, #708]!	; 0x2c4

00010d5c <free@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #102400	; 0x19000
   10d64:	ldr	pc, [ip, #700]!	; 0x2bc

00010d68 <_exit@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #102400	; 0x19000
   10d70:	ldr	pc, [ip, #692]!	; 0x2b4

00010d74 <memcpy@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #102400	; 0x19000
   10d7c:	ldr	pc, [ip, #684]!	; 0x2ac

00010d80 <execvp@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #102400	; 0x19000
   10d88:	ldr	pc, [ip, #676]!	; 0x2a4

00010d8c <__strtoull_internal@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #102400	; 0x19000
   10d94:	ldr	pc, [ip, #668]!	; 0x29c

00010d98 <mbsinit@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #102400	; 0x19000
   10da0:	ldr	pc, [ip, #660]!	; 0x294

00010da4 <memcmp@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #102400	; 0x19000
   10dac:	ldr	pc, [ip, #652]!	; 0x28c

00010db0 <fputc_unlocked@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #102400	; 0x19000
   10db8:	ldr	pc, [ip, #644]!	; 0x284

00010dbc <dcgettext@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #102400	; 0x19000
   10dc4:	ldr	pc, [ip, #636]!	; 0x27c

00010dc8 <realloc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #102400	; 0x19000
   10dd0:	ldr	pc, [ip, #628]!	; 0x274

00010dd4 <textdomain@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #102400	; 0x19000
   10ddc:	ldr	pc, [ip, #620]!	; 0x26c

00010de0 <iswprint@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #102400	; 0x19000
   10de8:	ldr	pc, [ip, #612]!	; 0x264

00010dec <readlink@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #102400	; 0x19000
   10df4:	ldr	pc, [ip, #604]!	; 0x25c

00010df8 <fwrite@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #102400	; 0x19000
   10e00:	ldr	pc, [ip, #596]!	; 0x254

00010e04 <lseek64@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #102400	; 0x19000
   10e0c:	ldr	pc, [ip, #588]!	; 0x24c

00010e10 <__ctype_get_mb_cur_max@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #102400	; 0x19000
   10e18:	ldr	pc, [ip, #580]!	; 0x244

00010e1c <__fpending@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #102400	; 0x19000
   10e24:	ldr	pc, [ip, #572]!	; 0x23c

00010e28 <mbrtowc@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #102400	; 0x19000
   10e30:	ldr	pc, [ip, #564]!	; 0x234

00010e34 <error@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #102400	; 0x19000
   10e3c:	ldr	pc, [ip, #556]!	; 0x22c

00010e40 <__asprintf_chk@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #102400	; 0x19000
   10e48:	ldr	pc, [ip, #548]!	; 0x224

00010e4c <getenv@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #102400	; 0x19000
   10e54:	ldr	pc, [ip, #540]!	; 0x21c

00010e58 <malloc@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #102400	; 0x19000
   10e60:	ldr	pc, [ip, #532]!	; 0x214

00010e64 <__libc_start_main@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #102400	; 0x19000
   10e6c:	ldr	pc, [ip, #524]!	; 0x20c

00010e70 <__freading@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #102400	; 0x19000
   10e78:	ldr	pc, [ip, #516]!	; 0x204

00010e7c <__ctype_toupper_loc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #102400	; 0x19000
   10e84:	ldr	pc, [ip, #508]!	; 0x1fc

00010e88 <__gmon_start__@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #102400	; 0x19000
   10e90:	ldr	pc, [ip, #500]!	; 0x1f4

00010e94 <mempcpy@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #102400	; 0x19000
   10e9c:	ldr	pc, [ip, #492]!	; 0x1ec

00010ea0 <getopt_long@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #102400	; 0x19000
   10ea8:	ldr	pc, [ip, #484]!	; 0x1e4

00010eac <__ctype_b_loc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #102400	; 0x19000
   10eb4:	ldr	pc, [ip, #476]!	; 0x1dc

00010eb8 <exit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #102400	; 0x19000
   10ec0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ec4 <strlen@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #102400	; 0x19000
   10ecc:	ldr	pc, [ip, #460]!	; 0x1cc

00010ed0 <strchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #102400	; 0x19000
   10ed8:	ldr	pc, [ip, #452]!	; 0x1c4

00010edc <__errno_location@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #102400	; 0x19000
   10ee4:	ldr	pc, [ip, #444]!	; 0x1bc

00010ee8 <__cxa_atexit@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #102400	; 0x19000
   10ef0:	ldr	pc, [ip, #436]!	; 0x1b4

00010ef4 <memset@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #102400	; 0x19000
   10efc:	ldr	pc, [ip, #428]!	; 0x1ac

00010f00 <__printf_chk@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #102400	; 0x19000
   10f08:	ldr	pc, [ip, #420]!	; 0x1a4

00010f0c <fileno@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #102400	; 0x19000
   10f14:	ldr	pc, [ip, #412]!	; 0x19c

00010f18 <__fprintf_chk@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #102400	; 0x19000
   10f20:	ldr	pc, [ip, #404]!	; 0x194

00010f24 <access@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #102400	; 0x19000
   10f2c:	ldr	pc, [ip, #396]!	; 0x18c

00010f30 <fclose@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #102400	; 0x19000
   10f38:	ldr	pc, [ip, #388]!	; 0x184

00010f3c <fseeko64@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #102400	; 0x19000
   10f44:	ldr	pc, [ip, #380]!	; 0x17c

00010f48 <strtok@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #102400	; 0x19000
   10f50:	ldr	pc, [ip, #372]!	; 0x174

00010f54 <setlocale@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #102400	; 0x19000
   10f5c:	ldr	pc, [ip, #364]!	; 0x16c

00010f60 <putenv@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #102400	; 0x19000
   10f68:	ldr	pc, [ip, #356]!	; 0x164

00010f6c <strrchr@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #102400	; 0x19000
   10f74:	ldr	pc, [ip, #348]!	; 0x15c

00010f78 <nl_langinfo@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #102400	; 0x19000
   10f80:	ldr	pc, [ip, #340]!	; 0x154

00010f84 <bindtextdomain@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #102400	; 0x19000
   10f8c:	ldr	pc, [ip, #332]!	; 0x14c

00010f90 <__xstat64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #102400	; 0x19000
   10f98:	ldr	pc, [ip, #324]!	; 0x144

00010f9c <strncmp@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #102400	; 0x19000
   10fa4:	ldr	pc, [ip, #316]!	; 0x13c

00010fa8 <abort@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #102400	; 0x19000
   10fb0:	ldr	pc, [ip, #308]!	; 0x134

00010fb4 <__assert_fail@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #102400	; 0x19000
   10fbc:	ldr	pc, [ip, #300]!	; 0x12c

Disassembly of section .text:

00010fc0 <.text>:
   10fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fc4:	mov	r9, r0
   10fc8:	sub	sp, sp, #156	; 0x9c
   10fcc:	ldr	r0, [r1]
   10fd0:	mov	r7, r1
   10fd4:	bl	11f20 <__assert_fail@plt+0xf6c>
   10fd8:	ldr	r1, [pc, #1604]	; 11624 <__assert_fail@plt+0x670>
   10fdc:	mov	r0, #6
   10fe0:	bl	10f54 <setlocale@plt>
   10fe4:	ldr	r1, [pc, #1596]	; 11628 <__assert_fail@plt+0x674>
   10fe8:	ldr	r0, [pc, #1596]	; 1162c <__assert_fail@plt+0x678>
   10fec:	bl	10f84 <bindtextdomain@plt>
   10ff0:	ldr	r0, [pc, #1588]	; 1162c <__assert_fail@plt+0x678>
   10ff4:	bl	10dd4 <textdomain@plt>
   10ff8:	ldr	r3, [pc, #1584]	; 11630 <__assert_fail@plt+0x67c>
   10ffc:	mov	r2, #125	; 0x7d
   11000:	ldr	r0, [pc, #1580]	; 11634 <__assert_fail@plt+0x680>
   11004:	str	r2, [r3]
   11008:	bl	18a64 <__assert_fail@plt+0x7ab0>
   1100c:	ldr	r6, [pc, #1572]	; 11638 <__assert_fail@plt+0x684>
   11010:	ldr	r5, [pc, #1572]	; 1163c <__assert_fail@plt+0x688>
   11014:	ldr	fp, [pc, #1572]	; 11640 <__assert_fail@plt+0x68c>
   11018:	ldr	sl, [pc, #1572]	; 11644 <__assert_fail@plt+0x690>
   1101c:	ldr	r8, [pc, #1572]	; 11648 <__assert_fail@plt+0x694>
   11020:	mov	r4, #0
   11024:	str	r4, [sp]
   11028:	mov	r3, fp
   1102c:	mov	r2, sl
   11030:	mov	r1, r7
   11034:	mov	r0, r9
   11038:	bl	10ea0 <getopt_long@plt>
   1103c:	cmn	r0, #1
   11040:	beq	111e0 <__assert_fail@plt+0x22c>
   11044:	cmp	r0, #101	; 0x65
   11048:	beq	110b0 <__assert_fail@plt+0xfc>
   1104c:	bgt	11098 <__assert_fail@plt+0xe4>
   11050:	cmn	r0, #3
   11054:	beq	11068 <__assert_fail@plt+0xb4>
   11058:	cmn	r0, #2
   1105c:	bne	110a8 <__assert_fail@plt+0xf4>
   11060:	mov	r0, r4
   11064:	bl	117fc <__assert_fail@plt+0x848>
   11068:	ldr	r1, [pc, #1500]	; 1164c <__assert_fail@plt+0x698>
   1106c:	ldr	r3, [pc, #1500]	; 11650 <__assert_fail@plt+0x69c>
   11070:	ldr	r2, [pc, #1500]	; 11654 <__assert_fail@plt+0x6a0>
   11074:	str	r4, [sp, #4]
   11078:	ldr	r0, [r1]
   1107c:	ldr	r3, [r3]
   11080:	ldr	r1, [pc, #1488]	; 11658 <__assert_fail@plt+0x6a4>
   11084:	str	r2, [sp]
   11088:	ldr	r2, [pc, #1484]	; 1165c <__assert_fail@plt+0x6a8>
   1108c:	bl	167c0 <__assert_fail@plt+0x580c>
   11090:	mov	r0, r4
   11094:	bl	10eb8 <exit@plt>
   11098:	cmp	r0, #105	; 0x69
   1109c:	beq	110b0 <__assert_fail@plt+0xfc>
   110a0:	cmp	r0, #111	; 0x6f
   110a4:	beq	110b0 <__assert_fail@plt+0xfc>
   110a8:	mov	r0, #125	; 0x7d
   110ac:	bl	117fc <__assert_fail@plt+0x848>
   110b0:	ldr	r3, [pc, #1448]	; 11660 <__assert_fail@plt+0x6ac>
   110b4:	add	r3, r3, r0, lsl #2
   110b8:	ldr	r2, [r3, #-348]	; 0xfffffea4
   110bc:	cmp	r2, #2
   110c0:	bhi	115f4 <__assert_fail@plt+0x640>
   110c4:	mov	r3, #12
   110c8:	ldr	r4, [r5]
   110cc:	mla	r3, r3, r2, r6
   110d0:	str	r0, [r3, #4]
   110d4:	ldrb	r3, [r4]
   110d8:	sub	r3, r3, #9
   110dc:	cmp	r3, #23
   110e0:	bhi	11110 <__assert_fail@plt+0x15c>
   110e4:	mov	r1, #1
   110e8:	ands	r3, r8, r1, lsl r3
   110ec:	beq	11110 <__assert_fail@plt+0x15c>
   110f0:	add	r4, r4, #1
   110f4:	str	r4, [r5]
   110f8:	ldrb	r3, [r4]
   110fc:	sub	r3, r3, #9
   11100:	cmp	r3, #23
   11104:	bhi	11110 <__assert_fail@plt+0x15c>
   11108:	ands	r3, r8, r1, lsl r3
   1110c:	bne	110f0 <__assert_fail@plt+0x13c>
   11110:	add	r3, r2, r2, lsl #1
   11114:	cmp	r0, #105	; 0x69
   11118:	add	r3, r6, r3, lsl #2
   1111c:	str	r4, [r3, #8]
   11120:	beq	111b0 <__assert_fail@plt+0x1fc>
   11124:	ldr	r1, [pc, #1336]	; 11664 <__assert_fail@plt+0x6b0>
   11128:	mov	r0, r4
   1112c:	str	r2, [sp, #20]
   11130:	bl	10d44 <strcmp@plt>
   11134:	ldr	r2, [sp, #20]
   11138:	cmp	r0, #0
   1113c:	beq	11020 <__assert_fail@plt+0x6c>
   11140:	mov	r3, r4
   11144:	mov	r4, r2
   11148:	ldr	r2, [pc, #1304]	; 11668 <__assert_fail@plt+0x6b4>
   1114c:	mov	r0, r3
   11150:	str	r2, [sp]
   11154:	add	r3, sp, #48	; 0x30
   11158:	mov	r2, #10
   1115c:	mov	r1, #0
   11160:	bl	17060 <__assert_fail@plt+0x60ac>
   11164:	subs	r8, r0, #0
   11168:	beq	114a4 <__assert_fail@plt+0x4f0>
   1116c:	bl	10edc <__errno_location@plt>
   11170:	cmp	r8, #1
   11174:	ldrne	r4, [r0]
   11178:	beq	114c0 <__assert_fail@plt+0x50c>
   1117c:	mov	r2, #5
   11180:	ldr	r1, [pc, #1252]	; 1166c <__assert_fail@plt+0x6b8>
   11184:	str	r4, [r0]
   11188:	mov	r0, #0
   1118c:	bl	10dbc <dcgettext@plt>
   11190:	mov	r6, r0
   11194:	ldr	r0, [r5]
   11198:	bl	15dec <__assert_fail@plt+0x4e38>
   1119c:	mov	r2, r6
   111a0:	mov	r1, r4
   111a4:	mov	r3, r0
   111a8:	mov	r0, #125	; 0x7d
   111ac:	bl	10e34 <error@plt>
   111b0:	ldrb	r3, [r4]
   111b4:	cmp	r3, #76	; 0x4c
   111b8:	bne	11124 <__assert_fail@plt+0x170>
   111bc:	ldr	r1, [pc, #1196]	; 11670 <__assert_fail@plt+0x6bc>
   111c0:	mov	r2, #5
   111c4:	mov	r0, #0
   111c8:	bl	10dbc <dcgettext@plt>
   111cc:	mov	r2, r0
   111d0:	mov	r1, #0
   111d4:	mov	r0, r1
   111d8:	bl	10e34 <error@plt>
   111dc:	b	110a8 <__assert_fail@plt+0xf4>
   111e0:	ldr	r3, [pc, #1164]	; 11674 <__assert_fail@plt+0x6c0>
   111e4:	ldr	r6, [r3]
   111e8:	sub	r9, r9, r6
   111ec:	cmp	r9, r4
   111f0:	add	r8, r7, r6, lsl #2
   111f4:	movle	r2, #5
   111f8:	ldrle	r1, [pc, #1144]	; 11678 <__assert_fail@plt+0x6c4>
   111fc:	ble	111c4 <__assert_fail@plt+0x210>
   11200:	ldr	r5, [pc, #1072]	; 11638 <__assert_fail@plt+0x684>
   11204:	mov	r3, r4
   11208:	ldr	r4, [pc, #1132]	; 1167c <__assert_fail@plt+0x6c8>
   1120c:	mov	sl, r3
   11210:	mov	r9, r5
   11214:	mov	fp, #1
   11218:	ldr	r2, [r9, #8]
   1121c:	cmp	r2, #0
   11220:	beq	11298 <__assert_fail@plt+0x2e4>
   11224:	ldrb	r3, [r2]
   11228:	cmp	r3, #76	; 0x4c
   1122c:	ldr	r3, [r9, #4]
   11230:	add	r2, r3, #128	; 0x80
   11234:	beq	1142c <__assert_fail@plt+0x478>
   11238:	cmp	r2, r4
   1123c:	bhi	11254 <__assert_fail@plt+0x2a0>
   11240:	str	r3, [sp, #20]
   11244:	bl	10e7c <__ctype_toupper_loc@plt>
   11248:	ldr	r3, [sp, #20]
   1124c:	ldr	r2, [r0]
   11250:	ldr	r3, [r2, r3, lsl #2]
   11254:	ldr	r1, [r9]
   11258:	mov	r2, #0
   1125c:	str	r3, [sp]
   11260:	str	r1, [sp, #8]
   11264:	str	r2, [sp, #12]
   11268:	ldr	r3, [pc, #1040]	; 11680 <__assert_fail@plt+0x6cc>
   1126c:	ldr	r2, [pc, #1040]	; 11684 <__assert_fail@plt+0x6d0>
   11270:	mov	r1, fp
   11274:	add	r0, sp, #28
   11278:	bl	10e40 <__asprintf_chk@plt>
   1127c:	cmp	r0, #0
   11280:	blt	11594 <__assert_fail@plt+0x5e0>
   11284:	ldr	r0, [sp, #28]
   11288:	bl	10f60 <putenv@plt>
   1128c:	cmp	r0, #0
   11290:	bne	115d0 <__assert_fail@plt+0x61c>
   11294:	mov	r3, fp
   11298:	add	sl, sl, #1
   1129c:	cmp	sl, #3
   112a0:	add	r9, r9, #12
   112a4:	bne	11218 <__assert_fail@plt+0x264>
   112a8:	cmp	r3, #0
   112ac:	beq	11608 <__assert_fail@plt+0x654>
   112b0:	ldr	r3, [pc, #976]	; 11688 <__assert_fail@plt+0x6d4>
   112b4:	mov	r1, #47	; 0x2f
   112b8:	ldr	r4, [r3]
   112bc:	mov	r0, r4
   112c0:	bl	10ed0 <strchr@plt>
   112c4:	subs	r9, r0, #0
   112c8:	beq	11464 <__assert_fail@plt+0x4b0>
   112cc:	mov	r0, r4
   112d0:	bl	11c70 <__assert_fail@plt+0xcbc>
   112d4:	str	r0, [r5, #36]	; 0x24
   112d8:	ldr	r3, [r5, #36]	; 0x24
   112dc:	cmp	r3, #0
   112e0:	beq	114e0 <__assert_fail@plt+0x52c>
   112e4:	ldr	r0, [pc, #928]	; 1168c <__assert_fail@plt+0x6d8>
   112e8:	bl	10e4c <getenv@plt>
   112ec:	ldr	r3, [pc, #924]	; 11690 <__assert_fail@plt+0x6dc>
   112f0:	ldr	r2, [r5, #36]	; 0x24
   112f4:	str	r3, [sp, #40]	; 0x28
   112f8:	mov	r3, #0
   112fc:	ldr	r9, [pc, #912]	; 11694 <__assert_fail@plt+0x6e0>
   11300:	add	r4, sp, #36	; 0x24
   11304:	str	r2, [sp, #36]	; 0x24
   11308:	str	r3, [sp, #44]	; 0x2c
   1130c:	mov	sl, r0
   11310:	b	11360 <__assert_fail@plt+0x3ac>
   11314:	str	r9, [sp]
   11318:	ldr	r2, [pc, #888]	; 11698 <__assert_fail@plt+0x6e4>
   1131c:	mov	r1, #1
   11320:	add	r0, sp, #32
   11324:	bl	10e40 <__asprintf_chk@plt>
   11328:	cmp	r0, #0
   1132c:	blt	11594 <__assert_fail@plt+0x5e0>
   11330:	add	r2, sp, #48	; 0x30
   11334:	ldr	r1, [sp, #32]
   11338:	mov	r0, #3
   1133c:	bl	10f90 <__xstat64@plt>
   11340:	add	r3, sp, #48	; 0x30
   11344:	cmp	r0, #0
   11348:	beq	11380 <__assert_fail@plt+0x3cc>
   1134c:	ldr	r0, [sp, #32]
   11350:	bl	11ec8 <__assert_fail@plt+0xf14>
   11354:	ldr	fp, [r4, #4]!
   11358:	cmp	fp, #0
   1135c:	beq	11564 <__assert_fail@plt+0x5b0>
   11360:	ldr	r3, [r4]
   11364:	ldrb	r2, [r3]
   11368:	cmp	r2, #0
   1136c:	bne	11314 <__assert_fail@plt+0x360>
   11370:	ldr	r0, [pc, #796]	; 11694 <__assert_fail@plt+0x6e0>
   11374:	bl	16fb8 <__assert_fail@plt+0x6004>
   11378:	add	r3, sp, #48	; 0x30
   1137c:	str	r0, [sp, #32]
   11380:	cmp	sl, #0
   11384:	ldr	r2, [sp, #32]
   11388:	beq	11488 <__assert_fail@plt+0x4d4>
   1138c:	mov	r0, r3
   11390:	str	r2, [sp, #4]
   11394:	str	sl, [sp]
   11398:	ldr	r3, [pc, #748]	; 1168c <__assert_fail@plt+0x6d8>
   1139c:	ldr	r2, [pc, #760]	; 1169c <__assert_fail@plt+0x6e8>
   113a0:	mov	r1, #1
   113a4:	bl	10e40 <__asprintf_chk@plt>
   113a8:	cmp	r0, #0
   113ac:	blt	11594 <__assert_fail@plt+0x5e0>
   113b0:	ldr	r0, [sp, #32]
   113b4:	bl	11ec8 <__assert_fail@plt+0xf14>
   113b8:	ldr	r0, [sp, #48]	; 0x30
   113bc:	bl	10f60 <putenv@plt>
   113c0:	subs	r9, r0, #0
   113c4:	bne	11598 <__assert_fail@plt+0x5e4>
   113c8:	ldr	r0, [r5, #36]	; 0x24
   113cc:	bl	11ec8 <__assert_fail@plt+0xf14>
   113d0:	mov	r1, r8
   113d4:	ldr	r0, [r7, r6, lsl #2]
   113d8:	bl	10d80 <execvp@plt>
   113dc:	bl	10edc <__errno_location@plt>
   113e0:	mov	r2, #5
   113e4:	ldr	r1, [pc, #692]	; 116a0 <__assert_fail@plt+0x6ec>
   113e8:	ldr	r4, [r0]
   113ec:	mov	r0, r9
   113f0:	bl	10dbc <dcgettext@plt>
   113f4:	mov	r5, r0
   113f8:	ldr	r0, [r7, r6, lsl #2]
   113fc:	bl	15dec <__assert_fail@plt+0x4e38>
   11400:	mov	r1, r4
   11404:	cmp	r4, #2
   11408:	mov	r2, r5
   1140c:	moveq	r4, #127	; 0x7f
   11410:	movne	r4, #126	; 0x7e
   11414:	mov	r3, r0
   11418:	mov	r0, r9
   1141c:	bl	10e34 <error@plt>
   11420:	mov	r0, r4
   11424:	add	sp, sp, #156	; 0x9c
   11428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1142c:	cmp	r2, r4
   11430:	bhi	11448 <__assert_fail@plt+0x494>
   11434:	str	r3, [sp, #20]
   11438:	bl	10e7c <__ctype_toupper_loc@plt>
   1143c:	ldr	r3, [sp, #20]
   11440:	ldr	r2, [r0]
   11444:	ldr	r3, [r2, r3, lsl #2]
   11448:	str	r3, [sp]
   1144c:	ldr	r2, [pc, #592]	; 116a4 <__assert_fail@plt+0x6f0>
   11450:	ldr	r3, [pc, #552]	; 11680 <__assert_fail@plt+0x6cc>
   11454:	mov	r1, fp
   11458:	add	r0, sp, #28
   1145c:	bl	10e40 <__asprintf_chk@plt>
   11460:	b	1127c <__assert_fail@plt+0x2c8>
   11464:	ldr	r0, [pc, #572]	; 116a8 <__assert_fail@plt+0x6f4>
   11468:	bl	17030 <__assert_fail@plt+0x607c>
   1146c:	subs	sl, r0, #0
   11470:	beq	114f0 <__assert_fail@plt+0x53c>
   11474:	bl	11c70 <__assert_fail@plt+0xcbc>
   11478:	str	r0, [r5, #36]	; 0x24
   1147c:	mov	r0, sl
   11480:	bl	11ec8 <__assert_fail@plt+0xf14>
   11484:	b	112d8 <__assert_fail@plt+0x324>
   11488:	str	r2, [sp]
   1148c:	mov	r0, r3
   11490:	ldr	r2, [pc, #532]	; 116ac <__assert_fail@plt+0x6f8>
   11494:	ldr	r3, [pc, #496]	; 1168c <__assert_fail@plt+0x6d8>
   11498:	mov	r1, #1
   1149c:	bl	10e40 <__asprintf_chk@plt>
   114a0:	b	113a8 <__assert_fail@plt+0x3f4>
   114a4:	ldrd	sl, [sp, #48]	; 0x30
   114a8:	mov	r3, #0
   114ac:	mvn	r2, #0
   114b0:	cmp	fp, r3
   114b4:	cmpeq	sl, r2
   114b8:	bls	114c8 <__assert_fail@plt+0x514>
   114bc:	bl	10edc <__errno_location@plt>
   114c0:	mov	r4, #75	; 0x4b
   114c4:	b	1117c <__assert_fail@plt+0x1c8>
   114c8:	bl	10edc <__errno_location@plt>
   114cc:	mov	r3, #12
   114d0:	mul	r4, r3, r4
   114d4:	str	r8, [r0]
   114d8:	str	sl, [r6, r4]
   114dc:	b	11014 <__assert_fail@plt+0x60>
   114e0:	ldr	r0, [pc, #456]	; 116b0 <__assert_fail@plt+0x6fc>
   114e4:	bl	16fb8 <__assert_fail@plt+0x6004>
   114e8:	str	r0, [r5, #36]	; 0x24
   114ec:	b	112e4 <__assert_fail@plt+0x330>
   114f0:	ldr	r0, [pc, #444]	; 116b4 <__assert_fail@plt+0x700>
   114f4:	bl	10e4c <getenv@plt>
   114f8:	subs	sl, r0, #0
   114fc:	beq	1147c <__assert_fail@plt+0x4c8>
   11500:	bl	16fb8 <__assert_fail@plt+0x6004>
   11504:	ldr	r1, [pc, #428]	; 116b8 <__assert_fail@plt+0x704>
   11508:	mov	sl, r0
   1150c:	bl	10f48 <strtok@plt>
   11510:	b	11524 <__assert_fail@plt+0x570>
   11514:	bl	11ec8 <__assert_fail@plt+0xf14>
   11518:	ldr	r1, [pc, #408]	; 116b8 <__assert_fail@plt+0x704>
   1151c:	mov	r0, r9
   11520:	bl	10f48 <strtok@plt>
   11524:	cmp	r0, #0
   11528:	beq	1147c <__assert_fail@plt+0x4c8>
   1152c:	mov	r2, r9
   11530:	mov	r1, r4
   11534:	bl	11de4 <__assert_fail@plt+0xe30>
   11538:	mov	r1, #1
   1153c:	mov	fp, r0
   11540:	bl	10f24 <access@plt>
   11544:	cmp	r0, #0
   11548:	mov	r0, fp
   1154c:	bne	11514 <__assert_fail@plt+0x560>
   11550:	bl	11c70 <__assert_fail@plt+0xcbc>
   11554:	str	r0, [r5, #36]	; 0x24
   11558:	mov	r0, fp
   1155c:	bl	11ec8 <__assert_fail@plt+0xf14>
   11560:	b	1147c <__assert_fail@plt+0x4c8>
   11564:	mov	r2, #5
   11568:	ldr	r1, [pc, #332]	; 116bc <__assert_fail@plt+0x708>
   1156c:	mov	r0, fp
   11570:	bl	10dbc <dcgettext@plt>
   11574:	mov	r4, r0
   11578:	ldr	r0, [pc, #276]	; 11694 <__assert_fail@plt+0x6e0>
   1157c:	bl	15dec <__assert_fail@plt+0x4e38>
   11580:	mov	r2, r4
   11584:	mov	r1, fp
   11588:	mov	r3, r0
   1158c:	mov	r0, #125	; 0x7d
   11590:	bl	10e34 <error@plt>
   11594:	bl	16ff0 <__assert_fail@plt+0x603c>
   11598:	bl	10edc <__errno_location@plt>
   1159c:	mov	r2, #5
   115a0:	ldr	r1, [pc, #280]	; 116c0 <__assert_fail@plt+0x70c>
   115a4:	ldr	r4, [r0]
   115a8:	mov	r0, #0
   115ac:	bl	10dbc <dcgettext@plt>
   115b0:	mov	r5, r0
   115b4:	ldr	r0, [sp, #48]	; 0x30
   115b8:	bl	15dec <__assert_fail@plt+0x4e38>
   115bc:	mov	r2, r5
   115c0:	mov	r1, r4
   115c4:	mov	r3, r0
   115c8:	mov	r0, #125	; 0x7d
   115cc:	bl	10e34 <error@plt>
   115d0:	bl	10edc <__errno_location@plt>
   115d4:	mov	r2, #5
   115d8:	ldr	r1, [pc, #224]	; 116c0 <__assert_fail@plt+0x70c>
   115dc:	ldr	r4, [r0]
   115e0:	mov	r0, #0
   115e4:	bl	10dbc <dcgettext@plt>
   115e8:	mov	r5, r0
   115ec:	ldr	r0, [sp, #28]
   115f0:	b	115b8 <__assert_fail@plt+0x604>
   115f4:	ldr	r3, [pc, #200]	; 116c4 <__assert_fail@plt+0x710>
   115f8:	mov	r2, #336	; 0x150
   115fc:	ldr	r1, [pc, #196]	; 116c8 <__assert_fail@plt+0x714>
   11600:	ldr	r0, [pc, #196]	; 116cc <__assert_fail@plt+0x718>
   11604:	bl	10fb4 <__assert_fail@plt>
   11608:	mov	r2, #5
   1160c:	ldr	r1, [pc, #188]	; 116d0 <__assert_fail@plt+0x71c>
   11610:	mov	r0, r3
   11614:	str	r3, [sp, #20]
   11618:	bl	10dbc <dcgettext@plt>
   1161c:	mov	r2, r0
   11620:	b	111d0 <__assert_fail@plt+0x21c>
   11624:	andeq	r8, r1, r8, asr #27
   11628:	andeq	r9, r1, ip, lsr r1
   1162c:	muleq	r1, r4, r0
   11630:	strdeq	sl, [r2], -ip
   11634:	andeq	r1, r1, ip, lsl #23
   11638:	andeq	sl, r2, r0, ror #2
   1163c:	andeq	sl, r2, r8, asr r1
   11640:	strdeq	r8, [r1], -r4
   11644:	strdeq	r9, [r1], -r4
   11648:	addeq	r0, r0, pc, lsl r0
   1164c:	andeq	sl, r2, r4, asr r1
   11650:	strdeq	sl, [r2], -r8
   11654:	andeq	r9, r1, r4, ror #3
   11658:	andeq	r8, r1, r4, asr fp
   1165c:	muleq	r1, r0, r0
   11660:	andeq	r8, r1, r8, lsl #21
   11664:	andeq	r9, r1, r4, asr #3
   11668:	andeq	r9, r1, r8, asr #3
   1166c:	ldrdeq	r9, [r1], -r4
   11670:	andeq	r9, r1, r0, lsr #3
   11674:	andeq	sl, r2, r8, asr #2
   11678:	strdeq	r9, [r1], -ip
   1167c:	andeq	r0, r0, pc, ror r1
   11680:	andeq	r9, r1, ip, lsl #4
   11684:	andeq	r9, r1, r0, lsr #4
   11688:	muleq	r2, r0, r1
   1168c:			; <UNDEFINED> instruction: 0x000192bc
   11690:	andeq	r9, r1, r8, asr #5
   11694:	andeq	r9, r1, r8, ror #5
   11698:	strdeq	r9, [r1], -r8
   1169c:	andeq	r9, r1, r4, lsl r3
   116a0:	andeq	r9, r1, r8, lsr #6
   116a4:	andeq	r9, r1, r8, lsl r2
   116a8:	andeq	r9, r1, r4, lsl #5
   116ac:	andeq	r9, r1, r0, lsr #6
   116b0:	andeq	r9, r1, r0, lsr #5
   116b4:	muleq	r1, r4, r2
   116b8:	muleq	r1, ip, r2
   116bc:	andeq	r9, r1, r0, lsl #6
   116c0:	andeq	r9, r1, ip, lsr #4
   116c4:	andeq	r8, r1, ip, ror #21
   116c8:	andeq	r9, r1, r4, asr r1
   116cc:	andeq	r9, r1, r4, ror #2
   116d0:	andeq	r9, r1, r8, asr r2
   116d4:	mov	fp, #0
   116d8:	mov	lr, #0
   116dc:	pop	{r1}		; (ldr r1, [sp], #4)
   116e0:	mov	r2, sp
   116e4:	push	{r2}		; (str r2, [sp, #-4]!)
   116e8:	push	{r0}		; (str r0, [sp, #-4]!)
   116ec:	ldr	ip, [pc, #16]	; 11704 <__assert_fail@plt+0x750>
   116f0:	push	{ip}		; (str ip, [sp, #-4]!)
   116f4:	ldr	r0, [pc, #12]	; 11708 <__assert_fail@plt+0x754>
   116f8:	ldr	r3, [pc, #12]	; 1170c <__assert_fail@plt+0x758>
   116fc:	bl	10e64 <__libc_start_main@plt>
   11700:	bl	10fa8 <abort@plt>
   11704:	andeq	r8, r1, r0, ror #20
   11708:	andeq	r0, r1, r0, asr #31
   1170c:	andeq	r8, r1, r0, lsl #20
   11710:	ldr	r3, [pc, #20]	; 1172c <__assert_fail@plt+0x778>
   11714:	ldr	r2, [pc, #20]	; 11730 <__assert_fail@plt+0x77c>
   11718:	add	r3, pc, r3
   1171c:	ldr	r2, [r3, r2]
   11720:	cmp	r2, #0
   11724:	bxeq	lr
   11728:	b	10e88 <__gmon_start__@plt>
   1172c:	andeq	r8, r1, r0, ror #17
   11730:	andeq	r0, r0, ip, ror #1
   11734:	ldr	r3, [pc, #28]	; 11758 <__assert_fail@plt+0x7a4>
   11738:	ldr	r0, [pc, #28]	; 1175c <__assert_fail@plt+0x7a8>
   1173c:	sub	r3, r3, r0
   11740:	cmp	r3, #6
   11744:	bxls	lr
   11748:	ldr	r3, [pc, #16]	; 11760 <__assert_fail@plt+0x7ac>
   1174c:	cmp	r3, #0
   11750:	bxeq	lr
   11754:	bx	r3
   11758:	andeq	sl, r2, r3, asr #2
   1175c:	andeq	sl, r2, r0, asr #2
   11760:	andeq	r0, r0, r0
   11764:	ldr	r1, [pc, #36]	; 11790 <__assert_fail@plt+0x7dc>
   11768:	ldr	r0, [pc, #36]	; 11794 <__assert_fail@plt+0x7e0>
   1176c:	sub	r1, r1, r0
   11770:	asr	r1, r1, #2
   11774:	add	r1, r1, r1, lsr #31
   11778:	asrs	r1, r1, #1
   1177c:	bxeq	lr
   11780:	ldr	r3, [pc, #16]	; 11798 <__assert_fail@plt+0x7e4>
   11784:	cmp	r3, #0
   11788:	bxeq	lr
   1178c:	bx	r3
   11790:	andeq	sl, r2, r0, asr #2
   11794:	andeq	sl, r2, r0, asr #2
   11798:	andeq	r0, r0, r0
   1179c:	push	{r4, lr}
   117a0:	ldr	r4, [pc, #24]	; 117c0 <__assert_fail@plt+0x80c>
   117a4:	ldrb	r3, [r4]
   117a8:	cmp	r3, #0
   117ac:	popne	{r4, pc}
   117b0:	bl	11734 <__assert_fail@plt+0x780>
   117b4:	mov	r3, #1
   117b8:	strb	r3, [r4]
   117bc:	pop	{r4, pc}
   117c0:	andeq	sl, r2, ip, asr r1
   117c4:	ldr	r0, [pc, #40]	; 117f4 <__assert_fail@plt+0x840>
   117c8:	ldr	r3, [r0]
   117cc:	cmp	r3, #0
   117d0:	bne	117d8 <__assert_fail@plt+0x824>
   117d4:	b	11764 <__assert_fail@plt+0x7b0>
   117d8:	ldr	r3, [pc, #24]	; 117f8 <__assert_fail@plt+0x844>
   117dc:	cmp	r3, #0
   117e0:	beq	117d4 <__assert_fail@plt+0x820>
   117e4:	push	{r4, lr}
   117e8:	blx	r3
   117ec:	pop	{r4, lr}
   117f0:	b	11764 <__assert_fail@plt+0x7b0>
   117f4:	andeq	r9, r2, r4, lsl pc
   117f8:	andeq	r0, r0, r0
   117fc:	subs	r5, r0, #0
   11800:	push	{r7, lr}
   11804:	sub	sp, sp, #56	; 0x38
   11808:	beq	11844 <__assert_fail@plt+0x890>
   1180c:	ldr	r3, [pc, #756]	; 11b08 <__assert_fail@plt+0xb54>
   11810:	mov	r2, #5
   11814:	ldr	r1, [pc, #752]	; 11b0c <__assert_fail@plt+0xb58>
   11818:	mov	r0, #0
   1181c:	ldr	r4, [r3]
   11820:	bl	10dbc <dcgettext@plt>
   11824:	ldr	r3, [pc, #740]	; 11b10 <__assert_fail@plt+0xb5c>
   11828:	mov	r1, #1
   1182c:	ldr	r3, [r3]
   11830:	mov	r2, r0
   11834:	mov	r0, r4
   11838:	bl	10f18 <__fprintf_chk@plt>
   1183c:	mov	r0, r5
   11840:	bl	10eb8 <exit@plt>
   11844:	mov	r2, #5
   11848:	ldr	r1, [pc, #708]	; 11b14 <__assert_fail@plt+0xb60>
   1184c:	bl	10dbc <dcgettext@plt>
   11850:	ldr	r3, [pc, #696]	; 11b10 <__assert_fail@plt+0xb5c>
   11854:	ldr	r7, [pc, #700]	; 11b18 <__assert_fail@plt+0xb64>
   11858:	ldr	r4, [pc, #700]	; 11b1c <__assert_fail@plt+0xb68>
   1185c:	ldr	r2, [r3]
   11860:	mov	r1, r0
   11864:	mov	r0, #1
   11868:	bl	10f00 <__printf_chk@plt>
   1186c:	mov	r2, #5
   11870:	ldr	r1, [pc, #680]	; 11b20 <__assert_fail@plt+0xb6c>
   11874:	mov	r0, r5
   11878:	bl	10dbc <dcgettext@plt>
   1187c:	ldr	r1, [r7]
   11880:	bl	10d2c <fputs_unlocked@plt>
   11884:	mov	r2, #5
   11888:	ldr	r1, [pc, #660]	; 11b24 <__assert_fail@plt+0xb70>
   1188c:	mov	r0, r5
   11890:	bl	10dbc <dcgettext@plt>
   11894:	ldr	r1, [r7]
   11898:	bl	10d2c <fputs_unlocked@plt>
   1189c:	mov	r2, #5
   118a0:	ldr	r1, [pc, #640]	; 11b28 <__assert_fail@plt+0xb74>
   118a4:	mov	r0, r5
   118a8:	bl	10dbc <dcgettext@plt>
   118ac:	ldr	r1, [r7]
   118b0:	bl	10d2c <fputs_unlocked@plt>
   118b4:	mov	r2, #5
   118b8:	ldr	r1, [pc, #620]	; 11b2c <__assert_fail@plt+0xb78>
   118bc:	mov	r0, r5
   118c0:	bl	10dbc <dcgettext@plt>
   118c4:	ldr	r1, [r7]
   118c8:	bl	10d2c <fputs_unlocked@plt>
   118cc:	mov	r2, #5
   118d0:	ldr	r1, [pc, #600]	; 11b30 <__assert_fail@plt+0xb7c>
   118d4:	mov	r0, r5
   118d8:	bl	10dbc <dcgettext@plt>
   118dc:	ldr	r1, [r7]
   118e0:	bl	10d2c <fputs_unlocked@plt>
   118e4:	mov	r2, #5
   118e8:	ldr	r1, [pc, #580]	; 11b34 <__assert_fail@plt+0xb80>
   118ec:	mov	r0, r5
   118f0:	bl	10dbc <dcgettext@plt>
   118f4:	ldr	r1, [r7]
   118f8:	bl	10d2c <fputs_unlocked@plt>
   118fc:	mov	r2, #5
   11900:	ldr	r1, [pc, #560]	; 11b38 <__assert_fail@plt+0xb84>
   11904:	mov	r0, r5
   11908:	bl	10dbc <dcgettext@plt>
   1190c:	ldr	r1, [r7]
   11910:	bl	10d2c <fputs_unlocked@plt>
   11914:	mov	r2, #5
   11918:	ldr	r1, [pc, #540]	; 11b3c <__assert_fail@plt+0xb88>
   1191c:	mov	r0, r5
   11920:	bl	10dbc <dcgettext@plt>
   11924:	ldr	r1, [r7]
   11928:	bl	10d2c <fputs_unlocked@plt>
   1192c:	mov	r2, #5
   11930:	ldr	r1, [pc, #520]	; 11b40 <__assert_fail@plt+0xb8c>
   11934:	mov	r0, r5
   11938:	bl	10dbc <dcgettext@plt>
   1193c:	ldr	r1, [r7]
   11940:	bl	10d2c <fputs_unlocked@plt>
   11944:	ldm	r4!, {r0, r1, r2, r3}
   11948:	mov	lr, sp
   1194c:	stmia	lr!, {r0, r1, r2, r3}
   11950:	ldm	r4!, {r0, r1, r2, r3}
   11954:	ldr	ip, [sp]
   11958:	stmia	lr!, {r0, r1, r2, r3}
   1195c:	cmp	ip, #0
   11960:	ldm	r4!, {r0, r1, r2, r3}
   11964:	stmia	lr!, {r0, r1, r2, r3}
   11968:	ldm	r4, {r0, r1}
   1196c:	moveq	r4, sp
   11970:	stm	lr, {r0, r1}
   11974:	beq	119a4 <__assert_fail@plt+0x9f0>
   11978:	ldr	r6, [pc, #452]	; 11b44 <__assert_fail@plt+0xb90>
   1197c:	mov	r4, sp
   11980:	b	11990 <__assert_fail@plt+0x9dc>
   11984:	ldr	ip, [r4, #8]!
   11988:	cmp	ip, #0
   1198c:	beq	119a4 <__assert_fail@plt+0x9f0>
   11990:	mov	r1, ip
   11994:	mov	r0, r6
   11998:	bl	10d44 <strcmp@plt>
   1199c:	cmp	r0, #0
   119a0:	bne	11984 <__assert_fail@plt+0x9d0>
   119a4:	ldr	r4, [r4, #4]
   119a8:	mov	r2, #5
   119ac:	cmp	r4, #0
   119b0:	ldr	r1, [pc, #400]	; 11b48 <__assert_fail@plt+0xb94>
   119b4:	beq	11a5c <__assert_fail@plt+0xaa8>
   119b8:	mov	r0, #0
   119bc:	bl	10dbc <dcgettext@plt>
   119c0:	ldr	r3, [pc, #388]	; 11b4c <__assert_fail@plt+0xb98>
   119c4:	ldr	r2, [pc, #388]	; 11b50 <__assert_fail@plt+0xb9c>
   119c8:	mov	r1, r0
   119cc:	mov	r0, #1
   119d0:	bl	10f00 <__printf_chk@plt>
   119d4:	mov	r1, #0
   119d8:	mov	r0, #5
   119dc:	bl	10f54 <setlocale@plt>
   119e0:	cmp	r0, #0
   119e4:	ldreq	r6, [pc, #344]	; 11b44 <__assert_fail@plt+0xb90>
   119e8:	beq	11a04 <__assert_fail@plt+0xa50>
   119ec:	mov	r2, #3
   119f0:	ldr	r1, [pc, #348]	; 11b54 <__assert_fail@plt+0xba0>
   119f4:	bl	10f9c <strncmp@plt>
   119f8:	ldr	r6, [pc, #324]	; 11b44 <__assert_fail@plt+0xb90>
   119fc:	cmp	r0, #0
   11a00:	bne	11aec <__assert_fail@plt+0xb38>
   11a04:	mov	r2, #5
   11a08:	ldr	r1, [pc, #328]	; 11b58 <__assert_fail@plt+0xba4>
   11a0c:	mov	r0, #0
   11a10:	bl	10dbc <dcgettext@plt>
   11a14:	ldr	r3, [pc, #296]	; 11b44 <__assert_fail@plt+0xb90>
   11a18:	ldr	r2, [pc, #300]	; 11b4c <__assert_fail@plt+0xb98>
   11a1c:	mov	r1, r0
   11a20:	mov	r0, #1
   11a24:	bl	10f00 <__printf_chk@plt>
   11a28:	mov	r2, #5
   11a2c:	ldr	r1, [pc, #296]	; 11b5c <__assert_fail@plt+0xba8>
   11a30:	mov	r0, #0
   11a34:	bl	10dbc <dcgettext@plt>
   11a38:	ldr	r2, [pc, #288]	; 11b60 <__assert_fail@plt+0xbac>
   11a3c:	cmp	r4, r6
   11a40:	ldr	r3, [pc, #284]	; 11b64 <__assert_fail@plt+0xbb0>
   11a44:	movne	r3, r2
   11a48:	mov	r1, r0
   11a4c:	mov	r2, r4
   11a50:	mov	r0, #1
   11a54:	bl	10f00 <__printf_chk@plt>
   11a58:	b	1183c <__assert_fail@plt+0x888>
   11a5c:	mov	r0, r4
   11a60:	bl	10dbc <dcgettext@plt>
   11a64:	ldr	r3, [pc, #224]	; 11b4c <__assert_fail@plt+0xb98>
   11a68:	ldr	r2, [pc, #224]	; 11b50 <__assert_fail@plt+0xb9c>
   11a6c:	mov	r1, r0
   11a70:	mov	r0, #1
   11a74:	bl	10f00 <__printf_chk@plt>
   11a78:	mov	r1, r4
   11a7c:	mov	r0, #5
   11a80:	bl	10f54 <setlocale@plt>
   11a84:	cmp	r0, #0
   11a88:	beq	11aa0 <__assert_fail@plt+0xaec>
   11a8c:	mov	r2, #3
   11a90:	ldr	r1, [pc, #188]	; 11b54 <__assert_fail@plt+0xba0>
   11a94:	bl	10f9c <strncmp@plt>
   11a98:	cmp	r0, #0
   11a9c:	bne	11ae4 <__assert_fail@plt+0xb30>
   11aa0:	mov	r2, #5
   11aa4:	ldr	r1, [pc, #172]	; 11b58 <__assert_fail@plt+0xba4>
   11aa8:	mov	r0, #0
   11aac:	bl	10dbc <dcgettext@plt>
   11ab0:	ldr	r3, [pc, #140]	; 11b44 <__assert_fail@plt+0xb90>
   11ab4:	ldr	r2, [pc, #144]	; 11b4c <__assert_fail@plt+0xb98>
   11ab8:	mov	r4, r3
   11abc:	mov	r1, r0
   11ac0:	mov	r0, #1
   11ac4:	bl	10f00 <__printf_chk@plt>
   11ac8:	ldr	r1, [pc, #140]	; 11b5c <__assert_fail@plt+0xba8>
   11acc:	mov	r2, #5
   11ad0:	mov	r0, #0
   11ad4:	bl	10dbc <dcgettext@plt>
   11ad8:	ldr	r3, [pc, #132]	; 11b64 <__assert_fail@plt+0xbb0>
   11adc:	mov	r1, r0
   11ae0:	b	11a4c <__assert_fail@plt+0xa98>
   11ae4:	ldr	r6, [pc, #88]	; 11b44 <__assert_fail@plt+0xb90>
   11ae8:	mov	r4, r6
   11aec:	mov	r2, #5
   11af0:	ldr	r1, [pc, #112]	; 11b68 <__assert_fail@plt+0xbb4>
   11af4:	mov	r0, #0
   11af8:	bl	10dbc <dcgettext@plt>
   11afc:	ldr	r1, [r7]
   11b00:	bl	10d2c <fputs_unlocked@plt>
   11b04:	b	11a04 <__assert_fail@plt+0xa50>
   11b08:	andeq	sl, r2, r0, asr r1
   11b0c:	andeq	r8, r1, ip, asr fp
   11b10:	muleq	r2, r0, r1
   11b14:	andeq	r8, r1, r4, lsl #23
   11b18:	andeq	sl, r2, r4, asr r1
   11b1c:	andeq	r8, r1, r8, lsl #21
   11b20:	andeq	r8, r1, r4, lsr #23
   11b24:	strdeq	r8, [r1], -r0
   11b28:	andeq	r8, r1, ip, lsr ip
   11b2c:	strdeq	r8, [r1], -r4
   11b30:	andeq	r8, r1, r4, lsr #26
   11b34:	andeq	r8, r1, ip, asr sp
   11b38:	andeq	r8, r1, ip, asr #27
   11b3c:	andeq	r8, r1, ip, lsl #28
   11b40:	andeq	r8, r1, r4, asr #30
   11b44:	andeq	r8, r1, r4, asr fp
   11b48:	andeq	r9, r1, r0, asr r0
   11b4c:	andeq	r9, r1, r8, rrx
   11b50:	muleq	r1, r0, r0
   11b54:	andeq	r9, r1, r0, lsr #1
   11b58:	andeq	r9, r1, ip, ror #1
   11b5c:	andeq	r9, r1, r8, lsl #2
   11b60:	andeq	r8, r1, r8, asr #27
   11b64:	andeq	r9, r1, ip, asr #6
   11b68:	andeq	r9, r1, r4, lsr #1
   11b6c:	ldr	r3, [pc, #4]	; 11b78 <__assert_fail@plt+0xbc4>
   11b70:	str	r0, [r3]
   11b74:	bx	lr
   11b78:	andeq	sl, r2, r8, lsl #3
   11b7c:	ldr	r3, [pc, #4]	; 11b88 <__assert_fail@plt+0xbd4>
   11b80:	strb	r0, [r3, #4]
   11b84:	bx	lr
   11b88:	andeq	sl, r2, r8, lsl #3
   11b8c:	ldr	r3, [pc, #192]	; 11c54 <__assert_fail@plt+0xca0>
   11b90:	push	{r4, r5, r6, lr}
   11b94:	sub	sp, sp, #8
   11b98:	ldr	r0, [r3]
   11b9c:	bl	181c0 <__assert_fail@plt+0x720c>
   11ba0:	cmp	r0, #0
   11ba4:	beq	11bc8 <__assert_fail@plt+0xc14>
   11ba8:	ldr	r4, [pc, #168]	; 11c58 <__assert_fail@plt+0xca4>
   11bac:	ldrb	r3, [r4, #4]
   11bb0:	cmp	r3, #0
   11bb4:	beq	11be4 <__assert_fail@plt+0xc30>
   11bb8:	bl	10edc <__errno_location@plt>
   11bbc:	ldr	r3, [r0]
   11bc0:	cmp	r3, #32
   11bc4:	bne	11be4 <__assert_fail@plt+0xc30>
   11bc8:	ldr	r3, [pc, #140]	; 11c5c <__assert_fail@plt+0xca8>
   11bcc:	ldr	r0, [r3]
   11bd0:	bl	181c0 <__assert_fail@plt+0x720c>
   11bd4:	cmp	r0, #0
   11bd8:	bne	11c2c <__assert_fail@plt+0xc78>
   11bdc:	add	sp, sp, #8
   11be0:	pop	{r4, r5, r6, pc}
   11be4:	mov	r2, #5
   11be8:	ldr	r1, [pc, #112]	; 11c60 <__assert_fail@plt+0xcac>
   11bec:	mov	r0, #0
   11bf0:	bl	10dbc <dcgettext@plt>
   11bf4:	ldr	r4, [r4]
   11bf8:	cmp	r4, #0
   11bfc:	mov	r5, r0
   11c00:	beq	11c38 <__assert_fail@plt+0xc84>
   11c04:	bl	10edc <__errno_location@plt>
   11c08:	ldr	r6, [r0]
   11c0c:	mov	r0, r4
   11c10:	bl	14b8c <__assert_fail@plt+0x3bd8>
   11c14:	mov	r1, r6
   11c18:	str	r5, [sp]
   11c1c:	ldr	r2, [pc, #64]	; 11c64 <__assert_fail@plt+0xcb0>
   11c20:	mov	r3, r0
   11c24:	mov	r0, #0
   11c28:	bl	10e34 <error@plt>
   11c2c:	ldr	r3, [pc, #52]	; 11c68 <__assert_fail@plt+0xcb4>
   11c30:	ldr	r0, [r3]
   11c34:	bl	10d68 <_exit@plt>
   11c38:	bl	10edc <__errno_location@plt>
   11c3c:	mov	r3, r5
   11c40:	ldr	r2, [pc, #36]	; 11c6c <__assert_fail@plt+0xcb8>
   11c44:	ldr	r1, [r0]
   11c48:	mov	r0, r4
   11c4c:	bl	10e34 <error@plt>
   11c50:	b	11c2c <__assert_fail@plt+0xc78>
   11c54:	andeq	sl, r2, r4, asr r1
   11c58:	andeq	sl, r2, r8, lsl #3
   11c5c:	andeq	sl, r2, r0, asr r1
   11c60:	andeq	r9, r1, r8, ror #7
   11c64:	strdeq	r9, [r1], -r4
   11c68:	strdeq	sl, [r2], -ip
   11c6c:	strdeq	r9, [r1], -r8
   11c70:	push	{r4, lr}
   11c74:	bl	11cfc <__assert_fail@plt+0xd48>
   11c78:	cmp	r0, #0
   11c7c:	popne	{r4, pc}
   11c80:	bl	16ff0 <__assert_fail@plt+0x603c>
   11c84:	push	{r4, r5, r6, lr}
   11c88:	mov	r5, r0
   11c8c:	ldrb	r4, [r0]
   11c90:	bl	17f50 <__assert_fail@plt+0x6f9c>
   11c94:	sub	r4, r4, #47	; 0x2f
   11c98:	clz	r4, r4
   11c9c:	lsr	r4, r4, #5
   11ca0:	sub	r0, r0, r5
   11ca4:	cmp	r0, r4
   11ca8:	bls	11cf4 <__assert_fail@plt+0xd40>
   11cac:	sub	r3, r0, #1
   11cb0:	add	r2, r5, r3
   11cb4:	ldrb	r1, [r5, r3]
   11cb8:	cmp	r1, #47	; 0x2f
   11cbc:	beq	11cd8 <__assert_fail@plt+0xd24>
   11cc0:	b	11cf4 <__assert_fail@plt+0xd40>
   11cc4:	ldrb	r1, [r2, #-1]!
   11cc8:	sub	r0, r3, #1
   11ccc:	cmp	r1, #47	; 0x2f
   11cd0:	bne	11ce8 <__assert_fail@plt+0xd34>
   11cd4:	mov	r3, r0
   11cd8:	cmp	r4, r3
   11cdc:	bne	11cc4 <__assert_fail@plt+0xd10>
   11ce0:	mov	r0, r4
   11ce4:	pop	{r4, r5, r6, pc}
   11ce8:	mov	r4, r3
   11cec:	mov	r0, r4
   11cf0:	pop	{r4, r5, r6, pc}
   11cf4:	mov	r4, r0
   11cf8:	b	11ce0 <__assert_fail@plt+0xd2c>
   11cfc:	push	{r4, r5, r6, r7, r8, lr}
   11d00:	mov	r6, r0
   11d04:	ldrb	r4, [r0]
   11d08:	bl	17f50 <__assert_fail@plt+0x6f9c>
   11d0c:	sub	r4, r4, #47	; 0x2f
   11d10:	clz	r4, r4
   11d14:	lsr	r4, r4, #5
   11d18:	sub	r5, r0, r6
   11d1c:	cmp	r5, r4
   11d20:	bls	11ddc <__assert_fail@plt+0xe28>
   11d24:	sub	r3, r5, #1
   11d28:	add	r2, r6, r3
   11d2c:	ldrb	r1, [r6, r3]
   11d30:	cmp	r1, #47	; 0x2f
   11d34:	beq	11d50 <__assert_fail@plt+0xd9c>
   11d38:	b	11dac <__assert_fail@plt+0xdf8>
   11d3c:	ldrb	r0, [r2, #-1]!
   11d40:	sub	ip, r3, #1
   11d44:	cmp	r0, #47	; 0x2f
   11d48:	bne	11da8 <__assert_fail@plt+0xdf4>
   11d4c:	mov	r3, ip
   11d50:	cmp	r4, r3
   11d54:	bne	11d3c <__assert_fail@plt+0xd88>
   11d58:	eor	r3, r4, #1
   11d5c:	and	r3, r3, #1
   11d60:	add	r0, r4, #1
   11d64:	add	r0, r0, r3
   11d68:	uxtb	r5, r3
   11d6c:	bl	17e74 <__assert_fail@plt+0x6ec0>
   11d70:	subs	r7, r0, #0
   11d74:	beq	11dd4 <__assert_fail@plt+0xe20>
   11d78:	mov	r1, r6
   11d7c:	mov	r2, r4
   11d80:	bl	10d74 <memcpy@plt>
   11d84:	cmp	r5, #0
   11d88:	movne	r5, #1
   11d8c:	moveq	r5, r4
   11d90:	movne	r3, #46	; 0x2e
   11d94:	strbne	r3, [r7]
   11d98:	mov	r3, #0
   11d9c:	strb	r3, [r7, r5]
   11da0:	mov	r0, r7
   11da4:	pop	{r4, r5, r6, r7, r8, pc}
   11da8:	mov	r5, r3
   11dac:	add	r0, r5, #1
   11db0:	cmp	r5, #0
   11db4:	addeq	r0, r0, #1
   11db8:	bl	17e74 <__assert_fail@plt+0x6ec0>
   11dbc:	subs	r7, r0, #0
   11dc0:	beq	11dd4 <__assert_fail@plt+0xe20>
   11dc4:	mov	r1, r6
   11dc8:	mov	r2, r5
   11dcc:	bl	10d74 <memcpy@plt>
   11dd0:	b	11d98 <__assert_fail@plt+0xde4>
   11dd4:	mov	r7, #0
   11dd8:	b	11da0 <__assert_fail@plt+0xdec>
   11ddc:	mov	r4, r5
   11de0:	b	11d58 <__assert_fail@plt+0xda4>
   11de4:	push	{r4, lr}
   11de8:	bl	11df8 <__assert_fail@plt+0xe44>
   11dec:	cmp	r0, #0
   11df0:	popne	{r4, pc}
   11df4:	bl	16ff0 <__assert_fail@plt+0x603c>
   11df8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dfc:	mov	r6, r1
   11e00:	mov	r8, r2
   11e04:	mov	fp, r0
   11e08:	bl	17f50 <__assert_fail@plt+0x6f9c>
   11e0c:	mov	r4, r0
   11e10:	bl	17fac <__assert_fail@plt+0x6ff8>
   11e14:	sub	r4, r4, fp
   11e18:	mov	r5, r0
   11e1c:	mov	r0, r6
   11e20:	bl	10ec4 <strlen@plt>
   11e24:	cmp	r5, #0
   11e28:	add	r4, r4, r5
   11e2c:	mov	r7, r0
   11e30:	beq	11ea4 <__assert_fail@plt+0xef0>
   11e34:	add	r3, fp, r4
   11e38:	ldrb	r3, [r3, #-1]
   11e3c:	cmp	r3, #47	; 0x2f
   11e40:	beq	11ebc <__assert_fail@plt+0xf08>
   11e44:	ldrb	r3, [r6]
   11e48:	cmp	r3, #47	; 0x2f
   11e4c:	beq	11ebc <__assert_fail@plt+0xf08>
   11e50:	mov	r5, #1
   11e54:	mov	sl, #47	; 0x2f
   11e58:	add	r0, r7, #1
   11e5c:	add	r0, r0, r4
   11e60:	add	r0, r0, r5
   11e64:	bl	17e74 <__assert_fail@plt+0x6ec0>
   11e68:	subs	r9, r0, #0
   11e6c:	beq	11e9c <__assert_fail@plt+0xee8>
   11e70:	mov	r2, r4
   11e74:	mov	r1, fp
   11e78:	bl	10e94 <mempcpy@plt>
   11e7c:	cmp	r8, #0
   11e80:	mov	r2, r7
   11e84:	mov	r1, r6
   11e88:	strb	sl, [r0], r5
   11e8c:	strne	r0, [r8]
   11e90:	bl	10e94 <mempcpy@plt>
   11e94:	mov	r3, #0
   11e98:	strb	r3, [r0]
   11e9c:	mov	r0, r9
   11ea0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ea4:	ldrb	r3, [r6]
   11ea8:	cmp	r3, #47	; 0x2f
   11eac:	moveq	r5, #1
   11eb0:	moveq	sl, #46	; 0x2e
   11eb4:	movne	sl, r5
   11eb8:	b	11e58 <__assert_fail@plt+0xea4>
   11ebc:	mov	r5, #0
   11ec0:	mov	sl, r5
   11ec4:	b	11e58 <__assert_fail@plt+0xea4>
   11ec8:	push	{r4, r5, lr}
   11ecc:	sub	sp, sp, #12
   11ed0:	mov	r5, r0
   11ed4:	bl	10edc <__errno_location@plt>
   11ed8:	mov	r2, #0
   11edc:	mov	r4, r0
   11ee0:	ldr	r3, [r0]
   11ee4:	str	r2, [r4]
   11ee8:	mov	r0, r5
   11eec:	str	r3, [sp]
   11ef0:	str	r3, [sp, #4]
   11ef4:	bl	10d5c <free@plt>
   11ef8:	ldr	r3, [r4]
   11efc:	add	r2, sp, #8
   11f00:	cmp	r3, #0
   11f04:	moveq	r3, #4
   11f08:	movne	r3, #0
   11f0c:	add	r3, r2, r3
   11f10:	ldr	r3, [r3, #-8]
   11f14:	str	r3, [r4]
   11f18:	add	sp, sp, #12
   11f1c:	pop	{r4, r5, pc}
   11f20:	push	{r4, r5, r6, lr}
   11f24:	subs	r4, r0, #0
   11f28:	beq	11f9c <__assert_fail@plt+0xfe8>
   11f2c:	mov	r1, #47	; 0x2f
   11f30:	bl	10f6c <strrchr@plt>
   11f34:	subs	r5, r0, #0
   11f38:	beq	11f88 <__assert_fail@plt+0xfd4>
   11f3c:	add	r6, r5, #1
   11f40:	sub	r3, r6, r4
   11f44:	cmp	r3, #6
   11f48:	ble	11f88 <__assert_fail@plt+0xfd4>
   11f4c:	mov	r2, #7
   11f50:	ldr	r1, [pc, #96]	; 11fb8 <__assert_fail@plt+0x1004>
   11f54:	sub	r0, r5, #6
   11f58:	bl	10f9c <strncmp@plt>
   11f5c:	cmp	r0, #0
   11f60:	bne	11f88 <__assert_fail@plt+0xfd4>
   11f64:	mov	r2, #3
   11f68:	ldr	r1, [pc, #76]	; 11fbc <__assert_fail@plt+0x1008>
   11f6c:	mov	r0, r6
   11f70:	bl	10f9c <strncmp@plt>
   11f74:	cmp	r0, #0
   11f78:	movne	r4, r6
   11f7c:	ldreq	r3, [pc, #60]	; 11fc0 <__assert_fail@plt+0x100c>
   11f80:	addeq	r4, r5, #4
   11f84:	streq	r4, [r3]
   11f88:	ldr	r2, [pc, #52]	; 11fc4 <__assert_fail@plt+0x1010>
   11f8c:	ldr	r3, [pc, #52]	; 11fc8 <__assert_fail@plt+0x1014>
   11f90:	str	r4, [r2]
   11f94:	str	r4, [r3]
   11f98:	pop	{r4, r5, r6, pc}
   11f9c:	ldr	r3, [pc, #40]	; 11fcc <__assert_fail@plt+0x1018>
   11fa0:	mov	r2, #55	; 0x37
   11fa4:	mov	r1, #1
   11fa8:	ldr	r3, [r3]
   11fac:	ldr	r0, [pc, #28]	; 11fd0 <__assert_fail@plt+0x101c>
   11fb0:	bl	10df8 <fwrite@plt>
   11fb4:	bl	10fa8 <abort@plt>
   11fb8:	andeq	r9, r1, r4, lsr r4
   11fbc:	andeq	r9, r1, ip, lsr r4
   11fc0:	andeq	sl, r2, r0, asr #2
   11fc4:	muleq	r2, r0, r1
   11fc8:	andeq	sl, r2, r4, asr #2
   11fcc:	andeq	sl, r2, r0, asr r1
   11fd0:	strdeq	r9, [r1], -ip
   11fd4:	push	{r4, r5, r6, lr}
   11fd8:	mov	r4, r0
   11fdc:	mov	r5, r1
   11fe0:	bl	183dc <__assert_fail@plt+0x7428>
   11fe4:	ldrb	r3, [r0]
   11fe8:	bic	r3, r3, #32
   11fec:	cmp	r3, #85	; 0x55
   11ff0:	bne	12050 <__assert_fail@plt+0x109c>
   11ff4:	ldrb	r3, [r0, #1]
   11ff8:	bic	r3, r3, #32
   11ffc:	cmp	r3, #84	; 0x54
   12000:	bne	1208c <__assert_fail@plt+0x10d8>
   12004:	ldrb	r3, [r0, #2]
   12008:	bic	r3, r3, #32
   1200c:	cmp	r3, #70	; 0x46
   12010:	bne	1208c <__assert_fail@plt+0x10d8>
   12014:	ldrb	r3, [r0, #3]
   12018:	cmp	r3, #45	; 0x2d
   1201c:	bne	1208c <__assert_fail@plt+0x10d8>
   12020:	ldrb	r3, [r0, #4]
   12024:	cmp	r3, #56	; 0x38
   12028:	bne	1208c <__assert_fail@plt+0x10d8>
   1202c:	ldrb	r3, [r0, #5]
   12030:	cmp	r3, #0
   12034:	bne	1208c <__assert_fail@plt+0x10d8>
   12038:	ldrb	r2, [r4]
   1203c:	ldr	r3, [pc, #152]	; 120dc <__assert_fail@plt+0x1128>
   12040:	ldr	r0, [pc, #152]	; 120e0 <__assert_fail@plt+0x112c>
   12044:	cmp	r2, #96	; 0x60
   12048:	movne	r0, r3
   1204c:	pop	{r4, r5, r6, pc}
   12050:	cmp	r3, #71	; 0x47
   12054:	bne	1208c <__assert_fail@plt+0x10d8>
   12058:	ldrb	r3, [r0, #1]
   1205c:	bic	r3, r3, #32
   12060:	cmp	r3, #66	; 0x42
   12064:	bne	1208c <__assert_fail@plt+0x10d8>
   12068:	ldrb	r3, [r0, #2]
   1206c:	cmp	r3, #49	; 0x31
   12070:	bne	1208c <__assert_fail@plt+0x10d8>
   12074:	ldrb	r3, [r0, #3]
   12078:	cmp	r3, #56	; 0x38
   1207c:	bne	1208c <__assert_fail@plt+0x10d8>
   12080:	ldrb	r3, [r0, #4]
   12084:	cmp	r3, #48	; 0x30
   12088:	beq	120a0 <__assert_fail@plt+0x10ec>
   1208c:	ldr	r3, [pc, #80]	; 120e4 <__assert_fail@plt+0x1130>
   12090:	cmp	r5, #9
   12094:	ldr	r0, [pc, #76]	; 120e8 <__assert_fail@plt+0x1134>
   12098:	movne	r0, r3
   1209c:	pop	{r4, r5, r6, pc}
   120a0:	ldrb	r3, [r0, #5]
   120a4:	cmp	r3, #51	; 0x33
   120a8:	bne	1208c <__assert_fail@plt+0x10d8>
   120ac:	ldrb	r3, [r0, #6]
   120b0:	cmp	r3, #48	; 0x30
   120b4:	bne	1208c <__assert_fail@plt+0x10d8>
   120b8:	ldrb	r3, [r0, #7]
   120bc:	cmp	r3, #0
   120c0:	bne	1208c <__assert_fail@plt+0x10d8>
   120c4:	ldrb	r2, [r4]
   120c8:	ldr	r3, [pc, #28]	; 120ec <__assert_fail@plt+0x1138>
   120cc:	ldr	r0, [pc, #28]	; 120f0 <__assert_fail@plt+0x113c>
   120d0:	cmp	r2, #96	; 0x60
   120d4:	movne	r0, r3
   120d8:	pop	{r4, r5, r6, pc}
   120dc:	muleq	r1, r8, r4
   120e0:	muleq	r1, r4, r4
   120e4:	andeq	r9, r1, r8, lsr #9
   120e8:	andeq	r9, r1, r4, lsr #9
   120ec:	andeq	r9, r1, r0, lsr #9
   120f0:	muleq	r1, ip, r4
   120f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120f8:	sub	sp, sp, #140	; 0x8c
   120fc:	mov	r9, r1
   12100:	str	r3, [sp, #24]
   12104:	mov	r3, #1
   12108:	mov	sl, r0
   1210c:	str	r2, [sp, #44]	; 0x2c
   12110:	str	r3, [sp, #28]
   12114:	bl	10e10 <__ctype_get_mb_cur_max@plt>
   12118:	ldr	r3, [sp, #180]	; 0xb4
   1211c:	mov	fp, r9
   12120:	mov	r9, sl
   12124:	lsr	r3, r3, #1
   12128:	and	r3, r3, #1
   1212c:	str	r3, [sp, #40]	; 0x28
   12130:	ldr	r3, [sp, #180]	; 0xb4
   12134:	mov	r2, #0
   12138:	and	r3, r3, #4
   1213c:	str	r3, [sp, #100]	; 0x64
   12140:	ldr	r3, [sp, #180]	; 0xb4
   12144:	str	r2, [sp, #76]	; 0x4c
   12148:	and	r3, r3, #1
   1214c:	str	r3, [sp, #96]	; 0x60
   12150:	str	r2, [sp, #36]	; 0x24
   12154:	str	r2, [sp, #56]	; 0x38
   12158:	str	r2, [sp, #68]	; 0x44
   1215c:	str	r2, [sp, #72]	; 0x48
   12160:	str	r2, [sp, #84]	; 0x54
   12164:	str	r0, [sp, #80]	; 0x50
   12168:	ldr	r3, [sp, #176]	; 0xb0
   1216c:	cmp	r3, #10
   12170:	ldrls	pc, [pc, r3, lsl #2]
   12174:	b	1334c <__assert_fail@plt+0x2398>
   12178:	andeq	r2, r1, r4, lsr #3
   1217c:	andeq	r2, r1, r4, asr #9
   12180:	andeq	r2, r1, ip, lsl r6
   12184:	strdeq	r2, [r1], -r8
   12188:	andeq	r2, r1, r0, ror r6
   1218c:	andeq	r2, r1, r0, asr r6
   12190:	andeq	r2, r1, r8, lsl r5
   12194:	andeq	r2, r1, ip, lsr r5
   12198:	andeq	r2, r1, r4, ror #10
   1219c:	andeq	r2, r1, r4, ror #10
   121a0:	andeq	r2, r1, r4, ror #10
   121a4:	mov	r3, #0
   121a8:	ldr	r1, [sp, #56]	; 0x38
   121ac:	ldr	r2, [sp, #176]	; 0xb0
   121b0:	ldr	lr, [sp, #176]	; 0xb0
   121b4:	mov	r8, r3
   121b8:	mov	ip, r3
   121bc:	str	r3, [sp, #40]	; 0x28
   121c0:	mov	r3, r1
   121c4:	cmp	r2, #2
   121c8:	moveq	r3, #0
   121cc:	andne	r3, r3, #1
   121d0:	mov	r0, r3
   121d4:	str	r3, [sp, #92]	; 0x5c
   121d8:	ldr	r3, [sp, #68]	; 0x44
   121dc:	sub	lr, lr, #2
   121e0:	adds	r2, r3, #0
   121e4:	movne	r2, #1
   121e8:	and	r3, r1, ip
   121ec:	and	r3, r2, r3
   121f0:	clz	lr, lr
   121f4:	str	r3, [sp, #88]	; 0x58
   121f8:	lsr	lr, lr, #5
   121fc:	mov	r3, ip
   12200:	and	r3, r3, lr
   12204:	mov	sl, #0
   12208:	and	r0, r2, r0
   1220c:	str	r3, [sp, #64]	; 0x40
   12210:	eor	r3, r1, #1
   12214:	str	lr, [sp, #52]	; 0x34
   12218:	str	r0, [sp, #48]	; 0x30
   1221c:	str	r3, [sp, #60]	; 0x3c
   12220:	ldr	r3, [sp, #24]
   12224:	cmn	r3, #1
   12228:	beq	12758 <__assert_fail@plt+0x17a4>
   1222c:	subs	r7, r3, sl
   12230:	movne	r7, #1
   12234:	cmp	r7, #0
   12238:	beq	12770 <__assert_fail@plt+0x17bc>
   1223c:	ldr	r3, [sp, #48]	; 0x30
   12240:	cmp	r3, #0
   12244:	beq	12adc <__assert_fail@plt+0x1b28>
   12248:	ldr	r2, [sp, #68]	; 0x44
   1224c:	ldr	r1, [sp, #24]
   12250:	cmp	r2, #1
   12254:	mov	r3, r2
   12258:	movls	r3, #0
   1225c:	movhi	r3, #1
   12260:	cmn	r1, #1
   12264:	movne	r3, #0
   12268:	cmp	r3, #0
   1226c:	add	r4, sl, r2
   12270:	beq	12280 <__assert_fail@plt+0x12cc>
   12274:	ldr	r0, [sp, #44]	; 0x2c
   12278:	bl	10ec4 <strlen@plt>
   1227c:	str	r0, [sp, #24]
   12280:	ldr	r3, [sp, #24]
   12284:	cmp	r3, r4
   12288:	ldr	r3, [sp, #44]	; 0x2c
   1228c:	add	r5, r3, sl
   12290:	bcc	12ae4 <__assert_fail@plt+0x1b30>
   12294:	mov	r0, r5
   12298:	ldr	r2, [sp, #68]	; 0x44
   1229c:	ldr	r1, [sp, #72]	; 0x48
   122a0:	bl	10da4 <memcmp@plt>
   122a4:	cmp	r0, #0
   122a8:	bne	12ae4 <__assert_fail@plt+0x1b30>
   122ac:	ldr	r3, [sp, #40]	; 0x28
   122b0:	cmp	r3, #0
   122b4:	bne	134a0 <__assert_fail@plt+0x24ec>
   122b8:	ldrb	r4, [r5]
   122bc:	cmp	r4, #126	; 0x7e
   122c0:	ldrls	pc, [pc, r4, lsl #2]
   122c4:	b	133dc <__assert_fail@plt+0x2428>
   122c8:	muleq	r1, ip, r9
   122cc:	ldrdeq	r3, [r1], -ip
   122d0:	ldrdeq	r3, [r1], -ip
   122d4:	ldrdeq	r3, [r1], -ip
   122d8:	ldrdeq	r3, [r1], -ip
   122dc:	ldrdeq	r3, [r1], -ip
   122e0:	ldrdeq	r3, [r1], -ip
   122e4:	andeq	r2, r1, r8, lsl #19
   122e8:	andeq	r2, r1, r4, ror r9
   122ec:	andeq	r2, r1, r0, asr r9
   122f0:	andeq	r2, r1, r0, lsr r9
   122f4:	andeq	r2, r1, r0, ror #18
   122f8:	muleq	r1, r8, r8
   122fc:	andeq	r2, r1, ip, asr #21
   12300:	ldrdeq	r3, [r1], -ip
   12304:	ldrdeq	r3, [r1], -ip
   12308:	ldrdeq	r3, [r1], -ip
   1230c:	ldrdeq	r3, [r1], -ip
   12310:	ldrdeq	r3, [r1], -ip
   12314:	ldrdeq	r3, [r1], -ip
   12318:	ldrdeq	r3, [r1], -ip
   1231c:	ldrdeq	r3, [r1], -ip
   12320:	ldrdeq	r3, [r1], -ip
   12324:	ldrdeq	r3, [r1], -ip
   12328:	ldrdeq	r3, [r1], -ip
   1232c:	ldrdeq	r3, [r1], -ip
   12330:	ldrdeq	r3, [r1], -ip
   12334:	ldrdeq	r3, [r1], -ip
   12338:	ldrdeq	r3, [r1], -ip
   1233c:	ldrdeq	r3, [r1], -ip
   12340:	ldrdeq	r3, [r1], -ip
   12344:	ldrdeq	r3, [r1], -ip
   12348:			; <UNDEFINED> instruction: 0x00012abc
   1234c:	muleq	r1, ip, sl
   12350:	muleq	r1, ip, sl
   12354:	andeq	r2, r1, ip, ror sl
   12358:	muleq	r1, ip, sl
   1235c:	andeq	r2, r1, r8, lsl #17
   12360:	muleq	r1, ip, sl
   12364:	andeq	r2, r1, r4, ror #16
   12368:	muleq	r1, ip, sl
   1236c:	muleq	r1, ip, sl
   12370:	muleq	r1, ip, sl
   12374:	andeq	r2, r1, r8, lsl #17
   12378:	andeq	r2, r1, r8, lsl #17
   1237c:	andeq	r2, r1, r8, lsl #17
   12380:	andeq	r2, r1, r8, lsl #17
   12384:	andeq	r2, r1, r8, lsl #17
   12388:	andeq	r2, r1, r8, lsl #17
   1238c:	andeq	r2, r1, r8, lsl #17
   12390:	andeq	r2, r1, r8, lsl #17
   12394:	andeq	r2, r1, r8, lsl #17
   12398:	andeq	r2, r1, r8, lsl #17
   1239c:	andeq	r2, r1, r8, lsl #17
   123a0:	andeq	r2, r1, r8, lsl #17
   123a4:	andeq	r2, r1, r8, lsl #17
   123a8:	andeq	r2, r1, r8, lsl #17
   123ac:	andeq	r2, r1, r8, lsl #17
   123b0:	andeq	r2, r1, r8, lsl #17
   123b4:	muleq	r1, ip, sl
   123b8:	muleq	r1, ip, sl
   123bc:	muleq	r1, ip, sl
   123c0:	muleq	r1, ip, sl
   123c4:	andeq	r2, r1, r4, lsl r8
   123c8:	ldrdeq	r3, [r1], -ip
   123cc:	andeq	r2, r1, r8, lsl #17
   123d0:	andeq	r2, r1, r8, lsl #17
   123d4:	andeq	r2, r1, r8, lsl #17
   123d8:	andeq	r2, r1, r8, lsl #17
   123dc:	andeq	r2, r1, r8, lsl #17
   123e0:	andeq	r2, r1, r8, lsl #17
   123e4:	andeq	r2, r1, r8, lsl #17
   123e8:	andeq	r2, r1, r8, lsl #17
   123ec:	andeq	r2, r1, r8, lsl #17
   123f0:	andeq	r2, r1, r8, lsl #17
   123f4:	andeq	r2, r1, r8, lsl #17
   123f8:	andeq	r2, r1, r8, lsl #17
   123fc:	andeq	r2, r1, r8, lsl #17
   12400:	andeq	r2, r1, r8, lsl #17
   12404:	andeq	r2, r1, r8, lsl #17
   12408:	andeq	r2, r1, r8, lsl #17
   1240c:	andeq	r2, r1, r8, lsl #17
   12410:	andeq	r2, r1, r8, lsl #17
   12414:	andeq	r2, r1, r8, lsl #17
   12418:	andeq	r2, r1, r8, lsl #17
   1241c:	andeq	r2, r1, r8, lsl #17
   12420:	andeq	r2, r1, r8, lsl #17
   12424:	andeq	r2, r1, r8, lsl #17
   12428:	andeq	r2, r1, r8, lsl #17
   1242c:	andeq	r2, r1, r8, lsl #17
   12430:	andeq	r2, r1, r8, lsl #17
   12434:	muleq	r1, ip, sl
   12438:	andeq	r2, r1, r0, ror #15
   1243c:	andeq	r2, r1, r8, lsl #17
   12440:	muleq	r1, ip, sl
   12444:	andeq	r2, r1, r8, lsl #17
   12448:	muleq	r1, ip, sl
   1244c:	andeq	r2, r1, r8, lsl #17
   12450:	andeq	r2, r1, r8, lsl #17
   12454:	andeq	r2, r1, r8, lsl #17
   12458:	andeq	r2, r1, r8, lsl #17
   1245c:	andeq	r2, r1, r8, lsl #17
   12460:	andeq	r2, r1, r8, lsl #17
   12464:	andeq	r2, r1, r8, lsl #17
   12468:	andeq	r2, r1, r8, lsl #17
   1246c:	andeq	r2, r1, r8, lsl #17
   12470:	andeq	r2, r1, r8, lsl #17
   12474:	andeq	r2, r1, r8, lsl #17
   12478:	andeq	r2, r1, r8, lsl #17
   1247c:	andeq	r2, r1, r8, lsl #17
   12480:	andeq	r2, r1, r8, lsl #17
   12484:	andeq	r2, r1, r8, lsl #17
   12488:	andeq	r2, r1, r8, lsl #17
   1248c:	andeq	r2, r1, r8, lsl #17
   12490:	andeq	r2, r1, r8, lsl #17
   12494:	andeq	r2, r1, r8, lsl #17
   12498:	andeq	r2, r1, r8, lsl #17
   1249c:	andeq	r2, r1, r8, lsl #17
   124a0:	andeq	r2, r1, r8, lsl #17
   124a4:	andeq	r2, r1, r8, lsl #17
   124a8:	andeq	r2, r1, r8, lsl #17
   124ac:	andeq	r2, r1, r8, lsl #17
   124b0:	andeq	r2, r1, r8, lsl #17
   124b4:	muleq	r1, r8, r6
   124b8:	muleq	r1, ip, sl
   124bc:	muleq	r1, r8, r6
   124c0:	andeq	r2, r1, ip, ror sl
   124c4:	mov	r3, #1
   124c8:	str	r3, [sp, #40]	; 0x28
   124cc:	str	r3, [sp, #68]	; 0x44
   124d0:	mov	r8, #0
   124d4:	ldr	r3, [pc, #4056]	; 134b4 <__assert_fail@plt+0x2500>
   124d8:	str	r3, [sp, #72]	; 0x48
   124dc:	mov	r3, #2
   124e0:	str	r3, [sp, #176]	; 0xb0
   124e4:	ldr	r1, [sp, #56]	; 0x38
   124e8:	mov	r2, r3
   124ec:	ldr	ip, [sp, #40]	; 0x28
   124f0:	mov	lr, r3
   124f4:	b	121c0 <__assert_fail@plt+0x120c>
   124f8:	mov	r3, #1
   124fc:	str	r3, [sp, #56]	; 0x38
   12500:	str	r3, [sp, #68]	; 0x44
   12504:	str	r3, [sp, #40]	; 0x28
   12508:	ldr	r3, [pc, #4004]	; 134b4 <__assert_fail@plt+0x2500>
   1250c:	mov	r8, #0
   12510:	str	r3, [sp, #72]	; 0x48
   12514:	b	124dc <__assert_fail@plt+0x1528>
   12518:	mov	r3, #1
   1251c:	str	r3, [sp, #56]	; 0x38
   12520:	str	r3, [sp, #68]	; 0x44
   12524:	str	r3, [sp, #40]	; 0x28
   12528:	ldr	r3, [pc, #3976]	; 134b8 <__assert_fail@plt+0x2504>
   1252c:	mov	r8, #0
   12530:	str	r3, [sp, #72]	; 0x48
   12534:	mov	r3, #5
   12538:	b	124e0 <__assert_fail@plt+0x152c>
   1253c:	mov	r3, #0
   12540:	str	r3, [sp, #40]	; 0x28
   12544:	mov	r3, #1
   12548:	str	r3, [sp, #56]	; 0x38
   1254c:	mov	r8, #0
   12550:	mov	r1, r3
   12554:	ldr	r2, [sp, #176]	; 0xb0
   12558:	ldr	ip, [sp, #40]	; 0x28
   1255c:	ldr	lr, [sp, #176]	; 0xb0
   12560:	b	121c0 <__assert_fail@plt+0x120c>
   12564:	ldr	r3, [sp, #176]	; 0xb0
   12568:	cmp	r3, #10
   1256c:	beq	125b0 <__assert_fail@plt+0x15fc>
   12570:	mov	r2, #5
   12574:	ldr	r1, [pc, #3904]	; 134bc <__assert_fail@plt+0x2508>
   12578:	mov	r0, #0
   1257c:	bl	10dbc <dcgettext@plt>
   12580:	ldr	r2, [pc, #3892]	; 134bc <__assert_fail@plt+0x2508>
   12584:	cmp	r0, r2
   12588:	str	r0, [sp, #188]	; 0xbc
   1258c:	beq	13648 <__assert_fail@plt+0x2694>
   12590:	mov	r2, #5
   12594:	ldr	r1, [pc, #3864]	; 134b4 <__assert_fail@plt+0x2500>
   12598:	mov	r0, #0
   1259c:	bl	10dbc <dcgettext@plt>
   125a0:	ldr	r2, [pc, #3852]	; 134b4 <__assert_fail@plt+0x2500>
   125a4:	cmp	r0, r2
   125a8:	str	r0, [sp, #192]	; 0xc0
   125ac:	beq	13638 <__assert_fail@plt+0x2684>
   125b0:	ldr	r8, [sp, #40]	; 0x28
   125b4:	cmp	r8, #0
   125b8:	movne	r8, #0
   125bc:	bne	125ec <__assert_fail@plt+0x1638>
   125c0:	ldr	r3, [sp, #188]	; 0xbc
   125c4:	ldrb	r3, [r3]
   125c8:	cmp	r3, #0
   125cc:	beq	125ec <__assert_fail@plt+0x1638>
   125d0:	ldr	r2, [sp, #188]	; 0xbc
   125d4:	cmp	fp, r8
   125d8:	strbhi	r3, [r9, r8]
   125dc:	ldrb	r3, [r2, #1]!
   125e0:	add	r8, r8, #1
   125e4:	cmp	r3, #0
   125e8:	bne	125d4 <__assert_fail@plt+0x1620>
   125ec:	ldr	r0, [sp, #192]	; 0xc0
   125f0:	bl	10ec4 <strlen@plt>
   125f4:	ldr	r3, [sp, #192]	; 0xc0
   125f8:	ldr	r2, [sp, #176]	; 0xb0
   125fc:	str	r3, [sp, #72]	; 0x48
   12600:	mov	r3, #1
   12604:	str	r3, [sp, #56]	; 0x38
   12608:	mov	r1, r3
   1260c:	ldr	ip, [sp, #40]	; 0x28
   12610:	ldr	lr, [sp, #176]	; 0xb0
   12614:	str	r0, [sp, #68]	; 0x44
   12618:	b	121c0 <__assert_fail@plt+0x120c>
   1261c:	ldr	r3, [sp, #40]	; 0x28
   12620:	cmp	r3, #0
   12624:	beq	132cc <__assert_fail@plt+0x2318>
   12628:	mov	r3, #1
   1262c:	str	r3, [sp, #68]	; 0x44
   12630:	ldr	r3, [pc, #3708]	; 134b4 <__assert_fail@plt+0x2500>
   12634:	str	r3, [sp, #72]	; 0x48
   12638:	mov	r8, #0
   1263c:	ldr	r1, [sp, #56]	; 0x38
   12640:	ldr	r2, [sp, #176]	; 0xb0
   12644:	ldr	ip, [sp, #40]	; 0x28
   12648:	ldr	lr, [sp, #176]	; 0xb0
   1264c:	b	121c0 <__assert_fail@plt+0x120c>
   12650:	ldr	r3, [sp, #40]	; 0x28
   12654:	cmp	r3, #0
   12658:	beq	13350 <__assert_fail@plt+0x239c>
   1265c:	str	r3, [sp, #56]	; 0x38
   12660:	mov	r3, #1
   12664:	str	r3, [sp, #68]	; 0x44
   12668:	ldr	r3, [pc, #3656]	; 134b8 <__assert_fail@plt+0x2504>
   1266c:	b	12634 <__assert_fail@plt+0x1680>
   12670:	ldr	r3, [sp, #40]	; 0x28
   12674:	cmp	r3, #0
   12678:	mov	r3, #1
   1267c:	streq	r3, [sp, #56]	; 0x38
   12680:	beq	132cc <__assert_fail@plt+0x2318>
   12684:	str	r3, [sp, #68]	; 0x44
   12688:	ldr	r3, [pc, #3620]	; 134b4 <__assert_fail@plt+0x2500>
   1268c:	mov	r8, #0
   12690:	str	r3, [sp, #72]	; 0x48
   12694:	b	124dc <__assert_fail@plt+0x1528>
   12698:	ldr	r3, [sp, #24]
   1269c:	ldr	r6, [sp, #48]	; 0x30
   126a0:	cmn	r3, #1
   126a4:	beq	12d00 <__assert_fail@plt+0x1d4c>
   126a8:	subs	r3, r3, #1
   126ac:	movne	r3, #1
   126b0:	cmp	r3, #0
   126b4:	beq	12a80 <__assert_fail@plt+0x1acc>
   126b8:	ldr	r1, [sp, #52]	; 0x34
   126bc:	mov	r7, r3
   126c0:	mov	r3, #0
   126c4:	str	r3, [sp, #32]
   126c8:	ldr	r3, [sp, #60]	; 0x3c
   126cc:	orr	r2, r1, r3
   126d0:	ldr	r3, [sp, #40]	; 0x28
   126d4:	eor	r2, r2, #1
   126d8:	orr	r2, r3, r2
   126dc:	tst	r2, #255	; 0xff
   126e0:	bne	13004 <__assert_fail@plt+0x2050>
   126e4:	cmp	r6, #0
   126e8:	bne	128c4 <__assert_fail@plt+0x1910>
   126ec:	ldr	r3, [sp, #36]	; 0x24
   126f0:	add	sl, sl, #1
   126f4:	and	r3, r3, r7
   126f8:	uxtb	r6, r3
   126fc:	cmp	r6, #0
   12700:	beq	1272c <__assert_fail@plt+0x1778>
   12704:	cmp	fp, r8
   12708:	movhi	r3, #39	; 0x27
   1270c:	strbhi	r3, [r9, r8]
   12710:	add	r3, r8, #1
   12714:	cmp	fp, r3
   12718:	movhi	r2, #39	; 0x27
   1271c:	add	r8, r8, #2
   12720:	strbhi	r2, [r9, r3]
   12724:	mov	r3, #0
   12728:	str	r3, [sp, #36]	; 0x24
   1272c:	ldr	r2, [sp, #32]
   12730:	cmp	r8, fp
   12734:	ldr	r3, [sp, #28]
   12738:	strbcc	r4, [r9, r8]
   1273c:	cmp	r2, #0
   12740:	moveq	r3, #0
   12744:	str	r3, [sp, #28]
   12748:	ldr	r3, [sp, #24]
   1274c:	add	r8, r8, #1
   12750:	cmn	r3, #1
   12754:	bne	1222c <__assert_fail@plt+0x1278>
   12758:	ldr	r3, [sp, #44]	; 0x2c
   1275c:	ldrb	r3, [r3, sl]
   12760:	adds	r7, r3, #0
   12764:	movne	r7, #1
   12768:	cmp	r7, #0
   1276c:	bne	1223c <__assert_fail@plt+0x1288>
   12770:	ldr	r3, [sp, #64]	; 0x40
   12774:	cmp	r8, #0
   12778:	movne	r3, #0
   1277c:	andeq	r3, r3, #1
   12780:	cmp	r3, #0
   12784:	str	r3, [sp, #64]	; 0x40
   12788:	bne	1322c <__assert_fail@plt+0x2278>
   1278c:	ldr	r3, [sp, #40]	; 0x28
   12790:	ldr	r2, [sp, #52]	; 0x34
   12794:	eor	r3, r3, #1
   12798:	ands	r2, r2, r3
   1279c:	beq	13658 <__assert_fail@plt+0x26a4>
   127a0:	ldr	r3, [sp, #76]	; 0x4c
   127a4:	cmp	r3, #0
   127a8:	beq	13628 <__assert_fail@plt+0x2674>
   127ac:	ldr	r3, [sp, #28]
   127b0:	cmp	r3, #0
   127b4:	bne	135e4 <__assert_fail@plt+0x2630>
   127b8:	ldr	r2, [sp, #84]	; 0x54
   127bc:	clz	r3, fp
   127c0:	cmp	r2, #0
   127c4:	lsr	r3, r3, #5
   127c8:	moveq	r3, #0
   127cc:	cmp	r3, #0
   127d0:	beq	13584 <__assert_fail@plt+0x25d0>
   127d4:	mov	fp, r2
   127d8:	str	r3, [sp, #76]	; 0x4c
   127dc:	b	12168 <__assert_fail@plt+0x11b4>
   127e0:	ldr	r3, [sp, #176]	; 0xb0
   127e4:	ldr	r6, [sp, #48]	; 0x30
   127e8:	cmp	r3, #2
   127ec:	beq	12d24 <__assert_fail@plt+0x1d70>
   127f0:	ldr	r3, [sp, #88]	; 0x58
   127f4:	cmp	r3, #0
   127f8:	beq	132a8 <__assert_fail@plt+0x22f4>
   127fc:	mov	r3, #0
   12800:	add	sl, sl, #1
   12804:	ldr	r6, [sp, #36]	; 0x24
   12808:	str	r3, [sp, #32]
   1280c:	mov	r4, #92	; 0x5c
   12810:	b	126fc <__assert_fail@plt+0x1748>
   12814:	ldr	r3, [sp, #176]	; 0xb0
   12818:	ldr	r6, [sp, #48]	; 0x30
   1281c:	cmp	r3, #2
   12820:	beq	12d54 <__assert_fail@plt+0x1da0>
   12824:	cmp	r3, #5
   12828:	bne	132b8 <__assert_fail@plt+0x2304>
   1282c:	ldr	r3, [sp, #100]	; 0x64
   12830:	cmp	r3, #0
   12834:	beq	1331c <__assert_fail@plt+0x2368>
   12838:	ldr	r2, [sp, #24]
   1283c:	add	r3, sl, #2
   12840:	cmp	r2, r3
   12844:	bls	12854 <__assert_fail@plt+0x18a0>
   12848:	ldrb	r4, [r5, #1]
   1284c:	cmp	r4, #63	; 0x3f
   12850:	beq	134c4 <__assert_fail@plt+0x2510>
   12854:	mov	r1, #0
   12858:	str	r1, [sp, #32]
   1285c:	mov	r4, #63	; 0x3f
   12860:	b	126c8 <__assert_fail@plt+0x1714>
   12864:	ldr	r3, [sp, #176]	; 0xb0
   12868:	ldr	r6, [sp, #48]	; 0x30
   1286c:	cmp	r3, #2
   12870:	beq	12d80 <__assert_fail@plt+0x1dcc>
   12874:	str	r7, [sp, #32]
   12878:	str	r7, [sp, #76]	; 0x4c
   1287c:	mov	r1, #0
   12880:	mov	r4, #39	; 0x27
   12884:	b	126c8 <__assert_fail@plt+0x1714>
   12888:	ldr	r6, [sp, #48]	; 0x30
   1288c:	ldr	r1, [sp, #52]	; 0x34
   12890:	str	r7, [sp, #32]
   12894:	b	126c8 <__assert_fail@plt+0x1714>
   12898:	ldr	r6, [sp, #48]	; 0x30
   1289c:	ldr	r1, [sp, #52]	; 0x34
   128a0:	mov	r4, #12
   128a4:	mov	r3, #102	; 0x66
   128a8:	ldr	r2, [sp, #56]	; 0x38
   128ac:	cmp	r2, #0
   128b0:	streq	r2, [sp, #32]
   128b4:	beq	126c8 <__assert_fail@plt+0x1714>
   128b8:	mov	r4, r3
   128bc:	mov	r3, #0
   128c0:	str	r3, [sp, #32]
   128c4:	ldr	r3, [sp, #40]	; 0x28
   128c8:	cmp	r3, #0
   128cc:	bne	1303c <__assert_fail@plt+0x2088>
   128d0:	ldr	r3, [sp, #36]	; 0x24
   128d4:	eor	r3, r3, #1
   128d8:	and	r3, r3, r1
   128dc:	ands	r3, r3, #255	; 0xff
   128e0:	beq	12918 <__assert_fail@plt+0x1964>
   128e4:	cmp	fp, r8
   128e8:	movhi	r2, #39	; 0x27
   128ec:	strbhi	r2, [r9, r8]
   128f0:	add	r2, r8, #1
   128f4:	cmp	fp, r2
   128f8:	movhi	r1, #36	; 0x24
   128fc:	strbhi	r1, [r9, r2]
   12900:	add	r2, r8, #2
   12904:	cmp	fp, r2
   12908:	add	r8, r8, #3
   1290c:	movhi	r1, #39	; 0x27
   12910:	strbhi	r1, [r9, r2]
   12914:	str	r3, [sp, #36]	; 0x24
   12918:	cmp	fp, r8
   1291c:	movhi	r3, #92	; 0x5c
   12920:	strbhi	r3, [r9, r8]
   12924:	add	sl, sl, #1
   12928:	add	r8, r8, #1
   1292c:	b	1272c <__assert_fail@plt+0x1778>
   12930:	ldr	r6, [sp, #48]	; 0x30
   12934:	mov	r4, #10
   12938:	mov	r3, #110	; 0x6e
   1293c:	ldr	r2, [sp, #64]	; 0x40
   12940:	cmp	r2, #0
   12944:	bne	133c4 <__assert_fail@plt+0x2410>
   12948:	ldr	r1, [sp, #52]	; 0x34
   1294c:	b	128a8 <__assert_fail@plt+0x18f4>
   12950:	ldr	r6, [sp, #48]	; 0x30
   12954:	ldr	r1, [sp, #52]	; 0x34
   12958:	mov	r3, #116	; 0x74
   1295c:	b	128a8 <__assert_fail@plt+0x18f4>
   12960:	ldr	r6, [sp, #48]	; 0x30
   12964:	ldr	r1, [sp, #52]	; 0x34
   12968:	mov	r4, #11
   1296c:	mov	r3, #118	; 0x76
   12970:	b	128a8 <__assert_fail@plt+0x18f4>
   12974:	ldr	r6, [sp, #48]	; 0x30
   12978:	ldr	r1, [sp, #52]	; 0x34
   1297c:	mov	r4, #8
   12980:	mov	r3, #98	; 0x62
   12984:	b	128a8 <__assert_fail@plt+0x18f4>
   12988:	ldr	r6, [sp, #48]	; 0x30
   1298c:	ldr	r1, [sp, #52]	; 0x34
   12990:	mov	r4, #7
   12994:	mov	r3, #97	; 0x61
   12998:	b	128a8 <__assert_fail@plt+0x18f4>
   1299c:	ldr	r3, [sp, #56]	; 0x38
   129a0:	ldr	r6, [sp, #48]	; 0x30
   129a4:	cmp	r3, #0
   129a8:	beq	12e6c <__assert_fail@plt+0x1eb8>
   129ac:	ldr	r3, [sp, #40]	; 0x28
   129b0:	cmp	r3, #0
   129b4:	bne	134a0 <__assert_fail@plt+0x24ec>
   129b8:	ldr	r3, [sp, #36]	; 0x24
   129bc:	ldr	r2, [sp, #52]	; 0x34
   129c0:	eor	r3, r3, #1
   129c4:	ands	r3, r2, r3
   129c8:	moveq	r2, r8
   129cc:	beq	12a04 <__assert_fail@plt+0x1a50>
   129d0:	cmp	fp, r8
   129d4:	movhi	r2, #39	; 0x27
   129d8:	strbhi	r2, [r9, r8]
   129dc:	add	r2, r8, #1
   129e0:	cmp	fp, r2
   129e4:	movhi	r1, #36	; 0x24
   129e8:	strbhi	r1, [r9, r2]
   129ec:	add	r2, r8, #2
   129f0:	cmp	fp, r2
   129f4:	movhi	r1, #39	; 0x27
   129f8:	strbhi	r1, [r9, r2]
   129fc:	add	r2, r8, #3
   12a00:	str	r3, [sp, #36]	; 0x24
   12a04:	cmp	fp, r2
   12a08:	movhi	r3, #92	; 0x5c
   12a0c:	strbhi	r3, [r9, r2]
   12a10:	ldr	r3, [sp, #92]	; 0x5c
   12a14:	add	r8, r2, #1
   12a18:	cmp	r3, #0
   12a1c:	beq	133a0 <__assert_fail@plt+0x23ec>
   12a20:	ldr	r1, [sp, #24]
   12a24:	add	r3, sl, #1
   12a28:	cmp	r1, r3
   12a2c:	bls	12a64 <__assert_fail@plt+0x1ab0>
   12a30:	ldr	r1, [sp, #44]	; 0x2c
   12a34:	ldrb	r3, [r1, r3]
   12a38:	sub	r3, r3, #48	; 0x30
   12a3c:	cmp	r3, #9
   12a40:	bhi	12a64 <__assert_fail@plt+0x1ab0>
   12a44:	cmp	fp, r8
   12a48:	movhi	r3, #48	; 0x30
   12a4c:	strbhi	r3, [r9, r8]
   12a50:	add	r3, r2, #2
   12a54:	cmp	fp, r3
   12a58:	add	r8, r2, #3
   12a5c:	movhi	r1, #48	; 0x30
   12a60:	strbhi	r1, [r9, r3]
   12a64:	ldr	r3, [sp, #40]	; 0x28
   12a68:	ldr	r1, [sp, #52]	; 0x34
   12a6c:	mov	r7, r3
   12a70:	str	r3, [sp, #32]
   12a74:	mov	r4, #48	; 0x30
   12a78:	b	126c8 <__assert_fail@plt+0x1714>
   12a7c:	ldr	r6, [sp, #48]	; 0x30
   12a80:	cmp	sl, #0
   12a84:	streq	r7, [sp, #32]
   12a88:	beq	12aa8 <__assert_fail@plt+0x1af4>
   12a8c:	mov	r3, #0
   12a90:	ldr	r1, [sp, #52]	; 0x34
   12a94:	str	r3, [sp, #32]
   12a98:	b	126c8 <__assert_fail@plt+0x1714>
   12a9c:	ldr	r6, [sp, #48]	; 0x30
   12aa0:	mov	r3, #0
   12aa4:	str	r3, [sp, #32]
   12aa8:	ldr	r3, [sp, #64]	; 0x40
   12aac:	cmp	r3, #0
   12ab0:	bne	1322c <__assert_fail@plt+0x2278>
   12ab4:	ldr	r1, [sp, #52]	; 0x34
   12ab8:	b	126c8 <__assert_fail@plt+0x1714>
   12abc:	ldr	r3, [sp, #48]	; 0x30
   12ac0:	mov	r6, r3
   12ac4:	str	r3, [sp, #32]
   12ac8:	b	12aa8 <__assert_fail@plt+0x1af4>
   12acc:	ldr	r6, [sp, #48]	; 0x30
   12ad0:	mov	r4, #13
   12ad4:	mov	r3, #114	; 0x72
   12ad8:	b	1293c <__assert_fail@plt+0x1988>
   12adc:	ldr	r3, [sp, #44]	; 0x2c
   12ae0:	add	r5, r3, sl
   12ae4:	ldrb	r4, [r5]
   12ae8:	cmp	r4, #126	; 0x7e
   12aec:	ldrls	pc, [pc, r4, lsl #2]
   12af0:	b	12e8c <__assert_fail@plt+0x1ed8>
   12af4:	andeq	r2, r1, ip, asr lr
   12af8:	andeq	r2, r1, ip, lsl #29
   12afc:	andeq	r2, r1, ip, lsl #29
   12b00:	andeq	r2, r1, ip, lsl #29
   12b04:	andeq	r2, r1, ip, lsl #29
   12b08:	andeq	r2, r1, ip, lsl #29
   12b0c:	andeq	r2, r1, ip, lsl #29
   12b10:	andeq	r2, r1, r4, asr lr
   12b14:	andeq	r2, r1, ip, asr #28
   12b18:	andeq	r2, r1, r0, asr #28
   12b1c:	andeq	r2, r1, r8, lsr lr
   12b20:	andeq	r2, r1, r0, lsr lr
   12b24:	andeq	r2, r1, r8, lsr #28
   12b28:	andeq	r2, r1, r0, lsr #28
   12b2c:	andeq	r2, r1, ip, lsl #29
   12b30:	andeq	r2, r1, ip, lsl #29
   12b34:	andeq	r2, r1, ip, lsl #29
   12b38:	andeq	r2, r1, ip, lsl #29
   12b3c:	andeq	r2, r1, ip, lsl #29
   12b40:	andeq	r2, r1, ip, lsl #29
   12b44:	andeq	r2, r1, ip, lsl #29
   12b48:	andeq	r2, r1, ip, lsl #29
   12b4c:	andeq	r2, r1, ip, lsl #29
   12b50:	andeq	r2, r1, ip, lsl #29
   12b54:	andeq	r2, r1, ip, lsl #29
   12b58:	andeq	r2, r1, ip, lsl #29
   12b5c:	andeq	r2, r1, ip, lsl #29
   12b60:	andeq	r2, r1, ip, lsl #29
   12b64:	andeq	r2, r1, ip, lsl #29
   12b68:	andeq	r2, r1, ip, lsl #29
   12b6c:	andeq	r2, r1, ip, lsl #29
   12b70:	andeq	r2, r1, ip, lsl #29
   12b74:	andeq	r2, r1, r4, lsl lr
   12b78:	andeq	r2, r1, ip, lsl #28
   12b7c:	andeq	r2, r1, ip, lsl #28
   12b80:	andeq	r2, r1, r4, lsl #28
   12b84:	andeq	r2, r1, ip, lsl #28
   12b88:	strdeq	r2, [r1], -ip
   12b8c:	andeq	r2, r1, ip, lsl #28
   12b90:	andeq	r2, r1, r0, ror sp
   12b94:	andeq	r2, r1, ip, lsl #28
   12b98:	andeq	r2, r1, ip, lsl #28
   12b9c:	andeq	r2, r1, ip, lsl #28
   12ba0:	strdeq	r2, [r1], -ip
   12ba4:	strdeq	r2, [r1], -ip
   12ba8:	strdeq	r2, [r1], -ip
   12bac:	strdeq	r2, [r1], -ip
   12bb0:	strdeq	r2, [r1], -ip
   12bb4:	strdeq	r2, [r1], -ip
   12bb8:	strdeq	r2, [r1], -ip
   12bbc:	strdeq	r2, [r1], -ip
   12bc0:	strdeq	r2, [r1], -ip
   12bc4:	strdeq	r2, [r1], -ip
   12bc8:	strdeq	r2, [r1], -ip
   12bcc:	strdeq	r2, [r1], -ip
   12bd0:	strdeq	r2, [r1], -ip
   12bd4:	strdeq	r2, [r1], -ip
   12bd8:	strdeq	r2, [r1], -ip
   12bdc:	strdeq	r2, [r1], -ip
   12be0:	andeq	r2, r1, ip, lsl #28
   12be4:	andeq	r2, r1, ip, lsl #28
   12be8:	andeq	r2, r1, ip, lsl #28
   12bec:	andeq	r2, r1, ip, lsl #28
   12bf0:	andeq	r2, r1, r4, asr #26
   12bf4:	andeq	r2, r1, ip, lsl #29
   12bf8:	strdeq	r2, [r1], -ip
   12bfc:	strdeq	r2, [r1], -ip
   12c00:	strdeq	r2, [r1], -ip
   12c04:	strdeq	r2, [r1], -ip
   12c08:	strdeq	r2, [r1], -ip
   12c0c:	strdeq	r2, [r1], -ip
   12c10:	strdeq	r2, [r1], -ip
   12c14:	strdeq	r2, [r1], -ip
   12c18:	strdeq	r2, [r1], -ip
   12c1c:	strdeq	r2, [r1], -ip
   12c20:	strdeq	r2, [r1], -ip
   12c24:	strdeq	r2, [r1], -ip
   12c28:	strdeq	r2, [r1], -ip
   12c2c:	strdeq	r2, [r1], -ip
   12c30:	strdeq	r2, [r1], -ip
   12c34:	strdeq	r2, [r1], -ip
   12c38:	strdeq	r2, [r1], -ip
   12c3c:	strdeq	r2, [r1], -ip
   12c40:	strdeq	r2, [r1], -ip
   12c44:	strdeq	r2, [r1], -ip
   12c48:	strdeq	r2, [r1], -ip
   12c4c:	strdeq	r2, [r1], -ip
   12c50:	strdeq	r2, [r1], -ip
   12c54:	strdeq	r2, [r1], -ip
   12c58:	strdeq	r2, [r1], -ip
   12c5c:	strdeq	r2, [r1], -ip
   12c60:	andeq	r2, r1, ip, lsl #28
   12c64:	andeq	r2, r1, r4, lsl sp
   12c68:	strdeq	r2, [r1], -ip
   12c6c:	andeq	r2, r1, ip, lsl #28
   12c70:	strdeq	r2, [r1], -ip
   12c74:	andeq	r2, r1, ip, lsl #28
   12c78:	strdeq	r2, [r1], -ip
   12c7c:	strdeq	r2, [r1], -ip
   12c80:	strdeq	r2, [r1], -ip
   12c84:	strdeq	r2, [r1], -ip
   12c88:	strdeq	r2, [r1], -ip
   12c8c:	strdeq	r2, [r1], -ip
   12c90:	strdeq	r2, [r1], -ip
   12c94:	strdeq	r2, [r1], -ip
   12c98:	strdeq	r2, [r1], -ip
   12c9c:	strdeq	r2, [r1], -ip
   12ca0:	strdeq	r2, [r1], -ip
   12ca4:	strdeq	r2, [r1], -ip
   12ca8:	strdeq	r2, [r1], -ip
   12cac:	strdeq	r2, [r1], -ip
   12cb0:	strdeq	r2, [r1], -ip
   12cb4:	strdeq	r2, [r1], -ip
   12cb8:	strdeq	r2, [r1], -ip
   12cbc:	strdeq	r2, [r1], -ip
   12cc0:	strdeq	r2, [r1], -ip
   12cc4:	strdeq	r2, [r1], -ip
   12cc8:	strdeq	r2, [r1], -ip
   12ccc:	strdeq	r2, [r1], -ip
   12cd0:	strdeq	r2, [r1], -ip
   12cd4:	strdeq	r2, [r1], -ip
   12cd8:	strdeq	r2, [r1], -ip
   12cdc:	strdeq	r2, [r1], -ip
   12ce0:	strdeq	r2, [r1], -r0
   12ce4:	andeq	r2, r1, ip, lsl #28
   12ce8:	strdeq	r2, [r1], -r0
   12cec:	andeq	r2, r1, r4, lsl #28
   12cf0:	ldr	r3, [sp, #24]
   12cf4:	mov	r6, #0
   12cf8:	cmn	r3, #1
   12cfc:	bne	126a8 <__assert_fail@plt+0x16f4>
   12d00:	ldr	r3, [sp, #44]	; 0x2c
   12d04:	ldrb	r3, [r3, #1]
   12d08:	adds	r3, r3, #0
   12d0c:	movne	r3, #1
   12d10:	b	126b0 <__assert_fail@plt+0x16fc>
   12d14:	ldr	r3, [sp, #176]	; 0xb0
   12d18:	mov	r6, #0
   12d1c:	cmp	r3, #2
   12d20:	bne	127f0 <__assert_fail@plt+0x183c>
   12d24:	ldr	r3, [sp, #64]	; 0x40
   12d28:	cmp	r3, #0
   12d2c:	bne	13564 <__assert_fail@plt+0x25b0>
   12d30:	add	sl, sl, #1
   12d34:	ldr	r6, [sp, #36]	; 0x24
   12d38:	str	r3, [sp, #32]
   12d3c:	mov	r4, #92	; 0x5c
   12d40:	b	126fc <__assert_fail@plt+0x1748>
   12d44:	ldr	r3, [sp, #176]	; 0xb0
   12d48:	mov	r6, #0
   12d4c:	cmp	r3, #2
   12d50:	bne	12824 <__assert_fail@plt+0x1870>
   12d54:	ldr	r3, [sp, #40]	; 0x28
   12d58:	cmp	r3, #0
   12d5c:	bne	13040 <__assert_fail@plt+0x208c>
   12d60:	mov	r1, r7
   12d64:	str	r3, [sp, #32]
   12d68:	mov	r4, #63	; 0x3f
   12d6c:	b	126c8 <__assert_fail@plt+0x1714>
   12d70:	ldr	r3, [sp, #176]	; 0xb0
   12d74:	mov	r6, #0
   12d78:	cmp	r3, #2
   12d7c:	bne	12874 <__assert_fail@plt+0x18c0>
   12d80:	ldr	r3, [sp, #64]	; 0x40
   12d84:	cmp	r3, #0
   12d88:	bne	13564 <__assert_fail@plt+0x25b0>
   12d8c:	ldr	r2, [sp, #84]	; 0x54
   12d90:	adds	r3, fp, #0
   12d94:	movne	r3, #1
   12d98:	cmp	r2, #0
   12d9c:	movne	r3, #0
   12da0:	cmp	r3, #0
   12da4:	strne	fp, [sp, #84]	; 0x54
   12da8:	movne	fp, #0
   12dac:	bne	12ddc <__assert_fail@plt+0x1e28>
   12db0:	cmp	fp, r8
   12db4:	movhi	r3, #39	; 0x27
   12db8:	strbhi	r3, [r9, r8]
   12dbc:	add	r3, r8, #1
   12dc0:	cmp	fp, r3
   12dc4:	movhi	r2, #92	; 0x5c
   12dc8:	strbhi	r2, [r9, r3]
   12dcc:	add	r3, r8, #2
   12dd0:	cmp	fp, r3
   12dd4:	movhi	r2, #39	; 0x27
   12dd8:	strbhi	r2, [r9, r3]
   12ddc:	ldr	r3, [sp, #64]	; 0x40
   12de0:	add	r8, r8, #3
   12de4:	mov	r1, r7
   12de8:	str	r7, [sp, #32]
   12dec:	str	r7, [sp, #76]	; 0x4c
   12df0:	str	r3, [sp, #36]	; 0x24
   12df4:	mov	r4, #39	; 0x27
   12df8:	b	126c8 <__assert_fail@plt+0x1714>
   12dfc:	mov	r6, #0
   12e00:	b	1288c <__assert_fail@plt+0x18d8>
   12e04:	mov	r6, #0
   12e08:	b	12a80 <__assert_fail@plt+0x1acc>
   12e0c:	mov	r6, #0
   12e10:	b	12aa0 <__assert_fail@plt+0x1aec>
   12e14:	str	r7, [sp, #32]
   12e18:	mov	r6, #0
   12e1c:	b	12aa8 <__assert_fail@plt+0x1af4>
   12e20:	mov	r6, #0
   12e24:	b	12ad0 <__assert_fail@plt+0x1b1c>
   12e28:	mov	r6, #0
   12e2c:	b	1289c <__assert_fail@plt+0x18e8>
   12e30:	mov	r6, #0
   12e34:	b	12964 <__assert_fail@plt+0x19b0>
   12e38:	mov	r6, #0
   12e3c:	b	12934 <__assert_fail@plt+0x1980>
   12e40:	mov	r6, #0
   12e44:	mov	r3, #116	; 0x74
   12e48:	b	1293c <__assert_fail@plt+0x1988>
   12e4c:	mov	r6, #0
   12e50:	b	12978 <__assert_fail@plt+0x19c4>
   12e54:	mov	r6, #0
   12e58:	b	1298c <__assert_fail@plt+0x19d8>
   12e5c:	ldr	r3, [sp, #56]	; 0x38
   12e60:	mov	r6, #0
   12e64:	cmp	r3, #0
   12e68:	bne	129ac <__assert_fail@plt+0x19f8>
   12e6c:	ldr	r3, [sp, #96]	; 0x60
   12e70:	cmp	r3, #0
   12e74:	addne	sl, sl, #1
   12e78:	bne	12220 <__assert_fail@plt+0x126c>
   12e7c:	ldr	r1, [sp, #52]	; 0x34
   12e80:	str	r3, [sp, #32]
   12e84:	mov	r4, r3
   12e88:	b	126c8 <__assert_fail@plt+0x1714>
   12e8c:	mov	r6, #0
   12e90:	ldr	r3, [sp, #80]	; 0x50
   12e94:	cmp	r3, #1
   12e98:	bne	13088 <__assert_fail@plt+0x20d4>
   12e9c:	bl	10eac <__ctype_b_loc@plt>
   12ea0:	ldr	r2, [sp, #80]	; 0x50
   12ea4:	sxth	r3, r4
   12ea8:	mov	r1, r2
   12eac:	lsl	r3, r3, #1
   12eb0:	ldr	r2, [r0]
   12eb4:	ldrh	r3, [r2, r3]
   12eb8:	and	r3, r3, #16384	; 0x4000
   12ebc:	cmp	r3, #0
   12ec0:	movne	r3, #1
   12ec4:	moveq	r3, #0
   12ec8:	str	r3, [sp, #32]
   12ecc:	moveq	r3, #1
   12ed0:	movne	r3, #0
   12ed4:	ldr	r2, [sp, #56]	; 0x38
   12ed8:	and	r3, r3, r2
   12edc:	ands	r3, r3, #255	; 0xff
   12ee0:	beq	12ab4 <__assert_fail@plt+0x1b00>
   12ee4:	add	r1, sl, r1
   12ee8:	mov	r0, #0
   12eec:	ldr	r7, [sp, #40]	; 0x28
   12ef0:	ldr	r2, [sp, #36]	; 0x24
   12ef4:	ldr	lr, [sp, #52]	; 0x34
   12ef8:	b	12fa8 <__assert_fail@plt+0x1ff4>
   12efc:	cmp	r7, #0
   12f00:	bne	132fc <__assert_fail@plt+0x2348>
   12f04:	eor	r0, r2, #1
   12f08:	ands	r0, lr, r0
   12f0c:	beq	12f44 <__assert_fail@plt+0x1f90>
   12f10:	cmp	fp, r8
   12f14:	movhi	r2, #39	; 0x27
   12f18:	strbhi	r2, [r9, r8]
   12f1c:	add	r2, r8, #1
   12f20:	cmp	fp, r2
   12f24:	movhi	ip, #36	; 0x24
   12f28:	strbhi	ip, [r9, r2]
   12f2c:	add	r2, r8, #2
   12f30:	cmp	fp, r2
   12f34:	movhi	ip, #39	; 0x27
   12f38:	strbhi	ip, [r9, r2]
   12f3c:	add	r8, r8, #3
   12f40:	mov	r2, r0
   12f44:	cmp	fp, r8
   12f48:	movhi	r0, #92	; 0x5c
   12f4c:	strbhi	r0, [r9, r8]
   12f50:	add	r0, r8, #1
   12f54:	cmp	fp, r0
   12f58:	lsrhi	ip, r4, #6
   12f5c:	addhi	ip, ip, #48	; 0x30
   12f60:	strbhi	ip, [r9, r0]
   12f64:	add	ip, r8, #2
   12f68:	cmp	fp, ip
   12f6c:	lsrhi	r0, r4, #3
   12f70:	andhi	r0, r0, #7
   12f74:	addhi	r0, r0, #48	; 0x30
   12f78:	add	sl, sl, #1
   12f7c:	strbhi	r0, [r9, ip]
   12f80:	and	r4, r4, #7
   12f84:	cmp	sl, r1
   12f88:	add	r4, r4, #48	; 0x30
   12f8c:	add	r8, r8, #3
   12f90:	bcs	13314 <__assert_fail@plt+0x2360>
   12f94:	mov	r0, r3
   12f98:	cmp	fp, r8
   12f9c:	strbhi	r4, [r9, r8]
   12fa0:	ldrb	r4, [r5, #1]!
   12fa4:	add	r8, r8, #1
   12fa8:	cmp	r3, #0
   12fac:	bne	12efc <__assert_fail@plt+0x1f48>
   12fb0:	cmp	r6, #0
   12fb4:	bne	13058 <__assert_fail@plt+0x20a4>
   12fb8:	eor	r6, r0, #1
   12fbc:	and	r6, r6, r2
   12fc0:	add	sl, sl, #1
   12fc4:	cmp	r1, sl
   12fc8:	uxtb	r6, r6
   12fcc:	bls	13080 <__assert_fail@plt+0x20cc>
   12fd0:	cmp	r6, #0
   12fd4:	beq	12f98 <__assert_fail@plt+0x1fe4>
   12fd8:	cmp	fp, r8
   12fdc:	movhi	r2, #39	; 0x27
   12fe0:	strbhi	r2, [r9, r8]
   12fe4:	add	r2, r8, #1
   12fe8:	cmp	fp, r2
   12fec:	movhi	ip, #39	; 0x27
   12ff0:	strbhi	ip, [r9, r2]
   12ff4:	add	r8, r8, #2
   12ff8:	mov	r6, r3
   12ffc:	mov	r2, r3
   13000:	b	12f98 <__assert_fail@plt+0x1fe4>
   13004:	ldr	r3, [sp, #184]	; 0xb8
   13008:	cmp	r3, #0
   1300c:	beq	126e4 <__assert_fail@plt+0x1730>
   13010:	lsr	r2, r4, #5
   13014:	mov	r0, r3
   13018:	uxtb	r2, r2
   1301c:	and	r3, r4, #31
   13020:	ldr	r2, [r0, r2, lsl #2]
   13024:	lsr	r3, r2, r3
   13028:	tst	r3, #1
   1302c:	beq	126e4 <__assert_fail@plt+0x1730>
   13030:	ldr	r3, [sp, #40]	; 0x28
   13034:	cmp	r3, #0
   13038:	beq	128d0 <__assert_fail@plt+0x191c>
   1303c:	mov	r3, r1
   13040:	str	r3, [sp, #64]	; 0x40
   13044:	mov	sl, r9
   13048:	ldr	r3, [sp, #56]	; 0x38
   1304c:	mov	r9, fp
   13050:	ldr	r2, [sp, #64]	; 0x40
   13054:	b	13244 <__assert_fail@plt+0x2290>
   13058:	cmp	fp, r8
   1305c:	eor	r6, r0, #1
   13060:	movhi	ip, #92	; 0x5c
   13064:	and	r6, r6, r2
   13068:	add	sl, sl, #1
   1306c:	strbhi	ip, [r9, r8]
   13070:	cmp	r1, sl
   13074:	add	r8, r8, #1
   13078:	uxtb	r6, r6
   1307c:	bhi	12fd0 <__assert_fail@plt+0x201c>
   13080:	str	r2, [sp, #36]	; 0x24
   13084:	b	126fc <__assert_fail@plt+0x1748>
   13088:	ldr	r3, [sp, #24]
   1308c:	cmn	r3, #1
   13090:	mov	r3, #0
   13094:	str	r3, [sp, #128]	; 0x80
   13098:	str	r3, [sp, #132]	; 0x84
   1309c:	beq	13390 <__assert_fail@plt+0x23dc>
   130a0:	mov	r2, r7
   130a4:	mov	r3, #0
   130a8:	str	r7, [sp, #104]	; 0x68
   130ac:	str	r5, [sp, #116]	; 0x74
   130b0:	mov	r7, r3
   130b4:	mov	r5, r2
   130b8:	str	r4, [sp, #32]
   130bc:	str	r6, [sp, #108]	; 0x6c
   130c0:	str	r8, [sp, #112]	; 0x70
   130c4:	ldr	r3, [sp, #44]	; 0x2c
   130c8:	add	r6, sl, r7
   130cc:	add	r4, r3, r6
   130d0:	ldr	r3, [sp, #24]
   130d4:	mov	r1, r4
   130d8:	sub	r2, r3, r6
   130dc:	add	r0, sp, #124	; 0x7c
   130e0:	add	r3, sp, #128	; 0x80
   130e4:	bl	18410 <__assert_fail@plt+0x745c>
   130e8:	subs	r8, r0, #0
   130ec:	beq	13474 <__assert_fail@plt+0x24c0>
   130f0:	cmn	r8, #1
   130f4:	beq	1344c <__assert_fail@plt+0x2498>
   130f8:	cmn	r8, #2
   130fc:	beq	133e4 <__assert_fail@plt+0x2430>
   13100:	ldr	r3, [sp, #64]	; 0x40
   13104:	cmp	r3, #0
   13108:	beq	131c8 <__assert_fail@plt+0x2214>
   1310c:	cmp	r8, #1
   13110:	beq	131c8 <__assert_fail@plt+0x2214>
   13114:	sub	r3, r8, #1
   13118:	add	r6, r3, r6
   1311c:	ldr	r3, [sp, #44]	; 0x2c
   13120:	add	r6, r3, r6
   13124:	ldrb	r3, [r4, #1]!
   13128:	sub	r3, r3, #91	; 0x5b
   1312c:	cmp	r3, #33	; 0x21
   13130:	ldrls	pc, [pc, r3, lsl #2]
   13134:	b	131c0 <__assert_fail@plt+0x220c>
   13138:	andeq	r3, r1, ip, lsr #4
   1313c:	andeq	r3, r1, ip, lsr #4
   13140:	andeq	r3, r1, r0, asr #3
   13144:	andeq	r3, r1, ip, lsr #4
   13148:	andeq	r3, r1, r0, asr #3
   1314c:	andeq	r3, r1, ip, lsr #4
   13150:	andeq	r3, r1, r0, asr #3
   13154:	andeq	r3, r1, r0, asr #3
   13158:	andeq	r3, r1, r0, asr #3
   1315c:	andeq	r3, r1, r0, asr #3
   13160:	andeq	r3, r1, r0, asr #3
   13164:	andeq	r3, r1, r0, asr #3
   13168:	andeq	r3, r1, r0, asr #3
   1316c:	andeq	r3, r1, r0, asr #3
   13170:	andeq	r3, r1, r0, asr #3
   13174:	andeq	r3, r1, r0, asr #3
   13178:	andeq	r3, r1, r0, asr #3
   1317c:	andeq	r3, r1, r0, asr #3
   13180:	andeq	r3, r1, r0, asr #3
   13184:	andeq	r3, r1, r0, asr #3
   13188:	andeq	r3, r1, r0, asr #3
   1318c:	andeq	r3, r1, r0, asr #3
   13190:	andeq	r3, r1, r0, asr #3
   13194:	andeq	r3, r1, r0, asr #3
   13198:	andeq	r3, r1, r0, asr #3
   1319c:	andeq	r3, r1, r0, asr #3
   131a0:	andeq	r3, r1, r0, asr #3
   131a4:	andeq	r3, r1, r0, asr #3
   131a8:	andeq	r3, r1, r0, asr #3
   131ac:	andeq	r3, r1, r0, asr #3
   131b0:	andeq	r3, r1, r0, asr #3
   131b4:	andeq	r3, r1, r0, asr #3
   131b8:	andeq	r3, r1, r0, asr #3
   131bc:	andeq	r3, r1, ip, lsr #4
   131c0:	cmp	r6, r4
   131c4:	bne	13124 <__assert_fail@plt+0x2170>
   131c8:	ldr	r0, [sp, #124]	; 0x7c
   131cc:	bl	10de0 <iswprint@plt>
   131d0:	add	r7, r7, r8
   131d4:	cmp	r0, #0
   131d8:	add	r0, sp, #128	; 0x80
   131dc:	moveq	r5, #0
   131e0:	bl	10d98 <mbsinit@plt>
   131e4:	cmp	r0, #0
   131e8:	beq	130c4 <__assert_fail@plt+0x2110>
   131ec:	ldr	r4, [sp, #32]
   131f0:	str	r5, [sp, #32]
   131f4:	ldr	r3, [sp, #32]
   131f8:	mov	r1, r7
   131fc:	eor	r3, r3, #1
   13200:	ldr	r7, [sp, #104]	; 0x68
   13204:	ldr	r6, [sp, #108]	; 0x6c
   13208:	ldr	r8, [sp, #112]	; 0x70
   1320c:	ldr	r5, [sp, #116]	; 0x74
   13210:	uxtb	r3, r3
   13214:	cmp	r1, #1
   13218:	bls	12ed4 <__assert_fail@plt+0x1f20>
   1321c:	ldr	r2, [sp, #56]	; 0x38
   13220:	and	r3, r3, r2
   13224:	uxtb	r3, r3
   13228:	b	12ee4 <__assert_fail@plt+0x1f30>
   1322c:	mov	r3, #2
   13230:	str	r3, [sp, #176]	; 0xb0
   13234:	ldr	r2, [sp, #64]	; 0x40
   13238:	ldr	r3, [sp, #56]	; 0x38
   1323c:	mov	sl, r9
   13240:	mov	r9, fp
   13244:	and	r3, r3, r2
   13248:	tst	r3, #255	; 0xff
   1324c:	ldr	r3, [sp, #176]	; 0xb0
   13250:	movne	r3, #4
   13254:	str	r3, [sp, #176]	; 0xb0
   13258:	ldr	r3, [sp, #180]	; 0xb4
   1325c:	mov	ip, #0
   13260:	bic	r3, r3, #2
   13264:	str	r3, [sp, #4]
   13268:	ldr	r3, [sp, #192]	; 0xc0
   1326c:	ldr	r2, [sp, #44]	; 0x2c
   13270:	str	r3, [sp, #16]
   13274:	ldr	r3, [sp, #188]	; 0xbc
   13278:	mov	r1, r9
   1327c:	str	r3, [sp, #12]
   13280:	ldr	r3, [sp, #176]	; 0xb0
   13284:	mov	r0, sl
   13288:	str	r3, [sp]
   1328c:	str	ip, [sp, #8]
   13290:	ldr	r3, [sp, #24]
   13294:	bl	120f4 <__assert_fail@plt+0x1140>
   13298:	mov	fp, r0
   1329c:	mov	r0, fp
   132a0:	add	sp, sp, #140	; 0x8c
   132a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132a8:	mov	r4, #92	; 0x5c
   132ac:	mov	r1, #0
   132b0:	mov	r3, r4
   132b4:	b	128a8 <__assert_fail@plt+0x18f4>
   132b8:	mov	r3, #0
   132bc:	ldr	r1, [sp, #52]	; 0x34
   132c0:	str	r3, [sp, #32]
   132c4:	mov	r4, #63	; 0x3f
   132c8:	b	126c8 <__assert_fail@plt+0x1714>
   132cc:	cmp	fp, #0
   132d0:	beq	1332c <__assert_fail@plt+0x2378>
   132d4:	mov	r3, #39	; 0x27
   132d8:	strb	r3, [r9]
   132dc:	mov	r3, #0
   132e0:	str	r3, [sp, #40]	; 0x28
   132e4:	mov	r3, #1
   132e8:	str	r3, [sp, #68]	; 0x44
   132ec:	ldr	r3, [pc, #448]	; 134b4 <__assert_fail@plt+0x2500>
   132f0:	mov	r8, #1
   132f4:	str	r3, [sp, #72]	; 0x48
   132f8:	b	124dc <__assert_fail@plt+0x1528>
   132fc:	ldr	r3, [sp, #40]	; 0x28
   13300:	mov	sl, r9
   13304:	str	r3, [sp, #56]	; 0x38
   13308:	mov	r9, fp
   1330c:	ldr	r2, [sp, #64]	; 0x40
   13310:	b	13244 <__assert_fail@plt+0x2290>
   13314:	str	r2, [sp, #36]	; 0x24
   13318:	b	1272c <__assert_fail@plt+0x1778>
   1331c:	mov	r1, #0
   13320:	str	r3, [sp, #32]
   13324:	mov	r4, #63	; 0x3f
   13328:	b	126c8 <__assert_fail@plt+0x1714>
   1332c:	ldr	r3, [pc, #384]	; 134b4 <__assert_fail@plt+0x2500>
   13330:	str	r3, [sp, #72]	; 0x48
   13334:	mov	r3, #0
   13338:	str	r3, [sp, #40]	; 0x28
   1333c:	mov	r3, #1
   13340:	str	r3, [sp, #68]	; 0x44
   13344:	mov	r8, r3
   13348:	b	124dc <__assert_fail@plt+0x1528>
   1334c:	bl	10fa8 <abort@plt>
   13350:	cmp	fp, #0
   13354:	beq	133b4 <__assert_fail@plt+0x2400>
   13358:	mov	r2, #1
   1335c:	mov	r3, #34	; 0x22
   13360:	strb	r3, [r9]
   13364:	mov	r8, r2
   13368:	mov	r3, r2
   1336c:	str	r2, [sp, #68]	; 0x44
   13370:	str	r3, [sp, #56]	; 0x38
   13374:	ldr	r3, [pc, #316]	; 134b8 <__assert_fail@plt+0x2504>
   13378:	ldr	r1, [sp, #56]	; 0x38
   1337c:	str	r3, [sp, #72]	; 0x48
   13380:	ldr	r2, [sp, #176]	; 0xb0
   13384:	ldr	ip, [sp, #40]	; 0x28
   13388:	ldr	lr, [sp, #176]	; 0xb0
   1338c:	b	121c0 <__assert_fail@plt+0x120c>
   13390:	ldr	r0, [sp, #44]	; 0x2c
   13394:	bl	10ec4 <strlen@plt>
   13398:	str	r0, [sp, #24]
   1339c:	b	130a0 <__assert_fail@plt+0x20ec>
   133a0:	mov	r7, #0
   133a4:	ldr	r1, [sp, #52]	; 0x34
   133a8:	str	r3, [sp, #32]
   133ac:	mov	r4, #48	; 0x30
   133b0:	b	126c8 <__assert_fail@plt+0x1714>
   133b4:	mov	r3, #1
   133b8:	str	r3, [sp, #68]	; 0x44
   133bc:	mov	r8, r3
   133c0:	b	13370 <__assert_fail@plt+0x23bc>
   133c4:	mov	r3, #2
   133c8:	mov	sl, r9
   133cc:	str	r3, [sp, #176]	; 0xb0
   133d0:	mov	r9, fp
   133d4:	ldr	r3, [sp, #56]	; 0x38
   133d8:	b	13244 <__assert_fail@plt+0x2290>
   133dc:	ldr	r6, [sp, #48]	; 0x30
   133e0:	b	12e90 <__assert_fail@plt+0x1edc>
   133e4:	ldr	r0, [sp, #24]
   133e8:	mov	ip, r6
   133ec:	cmp	r0, ip
   133f0:	mov	r1, r7
   133f4:	mov	r2, r4
   133f8:	ldr	r7, [sp, #104]	; 0x68
   133fc:	ldr	r4, [sp, #32]
   13400:	ldr	r6, [sp, #108]	; 0x6c
   13404:	ldr	r8, [sp, #112]	; 0x70
   13408:	ldr	r5, [sp, #116]	; 0x74
   1340c:	bls	1343c <__assert_fail@plt+0x2488>
   13410:	ldrb	r3, [r2]
   13414:	cmp	r3, #0
   13418:	bne	1342c <__assert_fail@plt+0x2478>
   1341c:	b	1354c <__assert_fail@plt+0x2598>
   13420:	ldrb	r3, [r2, #1]!
   13424:	cmp	r3, #0
   13428:	beq	1354c <__assert_fail@plt+0x2598>
   1342c:	add	r1, r1, #1
   13430:	add	r3, sl, r1
   13434:	cmp	r0, r3
   13438:	bhi	13420 <__assert_fail@plt+0x246c>
   1343c:	mov	r2, #0
   13440:	mov	r3, r7
   13444:	str	r2, [sp, #32]
   13448:	b	13214 <__assert_fail@plt+0x2260>
   1344c:	mov	r1, r7
   13450:	ldr	r7, [sp, #104]	; 0x68
   13454:	mov	r2, #0
   13458:	ldr	r4, [sp, #32]
   1345c:	ldr	r6, [sp, #108]	; 0x6c
   13460:	ldr	r8, [sp, #112]	; 0x70
   13464:	ldr	r5, [sp, #116]	; 0x74
   13468:	mov	r3, r7
   1346c:	str	r2, [sp, #32]
   13470:	b	13214 <__assert_fail@plt+0x2260>
   13474:	mov	r3, r5
   13478:	eor	r3, r3, #1
   1347c:	ldr	r4, [sp, #32]
   13480:	mov	r1, r7
   13484:	str	r5, [sp, #32]
   13488:	ldr	r7, [sp, #104]	; 0x68
   1348c:	ldr	r6, [sp, #108]	; 0x6c
   13490:	ldr	r8, [sp, #112]	; 0x70
   13494:	ldr	r5, [sp, #116]	; 0x74
   13498:	uxtb	r3, r3
   1349c:	b	13214 <__assert_fail@plt+0x2260>
   134a0:	mov	sl, r9
   134a4:	str	r3, [sp, #56]	; 0x38
   134a8:	mov	r9, fp
   134ac:	ldr	r2, [sp, #64]	; 0x40
   134b0:	b	13244 <__assert_fail@plt+0x2290>
   134b4:	andeq	r9, r1, r8, lsr #9
   134b8:	andeq	r9, r1, r4, lsr #9
   134bc:	andeq	r9, r1, ip, lsr #9
   134c0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   134c4:	ldr	r2, [sp, #44]	; 0x2c
   134c8:	ldrb	r1, [r2, r3]
   134cc:	sub	r2, r1, #33	; 0x21
   134d0:	uxtb	r2, r2
   134d4:	cmp	r2, #29
   134d8:	bhi	13558 <__assert_fail@plt+0x25a4>
   134dc:	ldr	r0, [pc, #-36]	; 134c0 <__assert_fail@plt+0x250c>
   134e0:	mov	ip, #1
   134e4:	ands	r2, r0, ip, lsl r2
   134e8:	beq	13578 <__assert_fail@plt+0x25c4>
   134ec:	ldr	r2, [sp, #40]	; 0x28
   134f0:	cmp	r2, #0
   134f4:	bne	1366c <__assert_fail@plt+0x26b8>
   134f8:	add	r2, r8, #1
   134fc:	cmp	fp, r8
   13500:	strbhi	r4, [r9, r8]
   13504:	cmp	fp, r2
   13508:	movhi	r0, #34	; 0x22
   1350c:	strbhi	r0, [r9, r2]
   13510:	add	r2, r8, #2
   13514:	cmp	fp, r2
   13518:	movhi	r0, #34	; 0x22
   1351c:	strbhi	r0, [r9, r2]
   13520:	add	r2, r8, #3
   13524:	cmp	fp, r2
   13528:	mov	sl, r3
   1352c:	ldr	r3, [sp, #40]	; 0x28
   13530:	movhi	r0, #63	; 0x3f
   13534:	mov	r4, r1
   13538:	strbhi	r0, [r9, r2]
   1353c:	add	r8, r8, #4
   13540:	mov	r1, r3
   13544:	str	r3, [sp, #32]
   13548:	b	126c8 <__assert_fail@plt+0x1714>
   1354c:	str	r3, [sp, #32]
   13550:	mov	r3, r7
   13554:	b	13214 <__assert_fail@plt+0x2260>
   13558:	mov	r1, #0
   1355c:	str	r1, [sp, #32]
   13560:	b	126c8 <__assert_fail@plt+0x1714>
   13564:	mov	sl, r9
   13568:	ldr	r3, [sp, #56]	; 0x38
   1356c:	mov	r9, fp
   13570:	ldr	r2, [sp, #64]	; 0x40
   13574:	b	13244 <__assert_fail@plt+0x2290>
   13578:	str	r2, [sp, #32]
   1357c:	mov	r1, #0
   13580:	b	126c8 <__assert_fail@plt+0x1714>
   13584:	ldr	r2, [sp, #76]	; 0x4c
   13588:	mov	sl, r9
   1358c:	mov	r9, fp
   13590:	mov	fp, r8
   13594:	ldr	r1, [sp, #72]	; 0x48
   13598:	cmp	r1, #0
   1359c:	moveq	r3, #0
   135a0:	andne	r3, r2, #1
   135a4:	cmp	r3, #0
   135a8:	beq	135d4 <__assert_fail@plt+0x2620>
   135ac:	ldrb	r3, [r1]
   135b0:	cmp	r3, #0
   135b4:	beq	135d4 <__assert_fail@plt+0x2620>
   135b8:	mov	r2, r1
   135bc:	cmp	r9, fp
   135c0:	strbhi	r3, [sl, fp]
   135c4:	ldrb	r3, [r2, #1]!
   135c8:	add	fp, fp, #1
   135cc:	cmp	r3, #0
   135d0:	bne	135bc <__assert_fail@plt+0x2608>
   135d4:	cmp	r9, fp
   135d8:	movhi	r3, #0
   135dc:	strbhi	r3, [sl, fp]
   135e0:	b	1329c <__assert_fail@plt+0x22e8>
   135e4:	ldr	r3, [sp, #192]	; 0xc0
   135e8:	mov	ip, #5
   135ec:	str	r3, [sp, #16]
   135f0:	ldr	r3, [sp, #188]	; 0xbc
   135f4:	ldr	r2, [sp, #44]	; 0x2c
   135f8:	str	r3, [sp, #12]
   135fc:	ldr	r3, [sp, #184]	; 0xb8
   13600:	ldr	r1, [sp, #84]	; 0x54
   13604:	str	r3, [sp, #8]
   13608:	ldr	r3, [sp, #180]	; 0xb4
   1360c:	mov	r0, r9
   13610:	str	r3, [sp, #4]
   13614:	str	ip, [sp]
   13618:	ldr	r3, [sp, #24]
   1361c:	bl	120f4 <__assert_fail@plt+0x1140>
   13620:	mov	fp, r0
   13624:	b	1329c <__assert_fail@plt+0x22e8>
   13628:	mov	sl, r9
   1362c:	mov	r9, fp
   13630:	mov	fp, r8
   13634:	b	13594 <__assert_fail@plt+0x25e0>
   13638:	ldr	r1, [sp, #176]	; 0xb0
   1363c:	bl	11fd4 <__assert_fail@plt+0x1020>
   13640:	str	r0, [sp, #192]	; 0xc0
   13644:	b	125b0 <__assert_fail@plt+0x15fc>
   13648:	ldr	r1, [sp, #176]	; 0xb0
   1364c:	bl	11fd4 <__assert_fail@plt+0x1020>
   13650:	str	r0, [sp, #188]	; 0xbc
   13654:	b	12590 <__assert_fail@plt+0x15dc>
   13658:	mov	sl, r9
   1365c:	mov	r2, r3
   13660:	mov	r9, fp
   13664:	mov	fp, r8
   13668:	b	13594 <__assert_fail@plt+0x25e0>
   1366c:	mov	sl, r9
   13670:	mov	r9, fp
   13674:	b	13258 <__assert_fail@plt+0x22a4>
   13678:	push	{r4, r5, r6, lr}
   1367c:	mov	r5, r0
   13680:	bl	10edc <__errno_location@plt>
   13684:	cmp	r5, #0
   13688:	mov	r1, #48	; 0x30
   1368c:	mov	r4, r0
   13690:	ldr	r0, [pc, #16]	; 136a8 <__assert_fail@plt+0x26f4>
   13694:	ldr	r6, [r4]
   13698:	movne	r0, r5
   1369c:	bl	16f14 <__assert_fail@plt+0x5f60>
   136a0:	str	r6, [r4]
   136a4:	pop	{r4, r5, r6, pc}
   136a8:	muleq	r2, r4, r1
   136ac:	ldr	r3, [pc, #12]	; 136c0 <__assert_fail@plt+0x270c>
   136b0:	cmp	r0, #0
   136b4:	moveq	r0, r3
   136b8:	ldr	r0, [r0]
   136bc:	bx	lr
   136c0:	muleq	r2, r4, r1
   136c4:	ldr	r3, [pc, #12]	; 136d8 <__assert_fail@plt+0x2724>
   136c8:	cmp	r0, #0
   136cc:	moveq	r0, r3
   136d0:	str	r1, [r0]
   136d4:	bx	lr
   136d8:	muleq	r2, r4, r1
   136dc:	ldr	r3, [pc, #52]	; 13718 <__assert_fail@plt+0x2764>
   136e0:	cmp	r0, #0
   136e4:	moveq	r0, r3
   136e8:	add	r3, r0, #8
   136ec:	push	{lr}		; (str lr, [sp, #-4]!)
   136f0:	lsr	lr, r1, #5
   136f4:	and	r1, r1, #31
   136f8:	ldr	ip, [r3, lr, lsl #2]
   136fc:	lsr	r0, ip, r1
   13700:	eor	r2, r2, r0
   13704:	and	r2, r2, #1
   13708:	and	r0, r0, #1
   1370c:	eor	r1, ip, r2, lsl r1
   13710:	str	r1, [r3, lr, lsl #2]
   13714:	pop	{pc}		; (ldr pc, [sp], #4)
   13718:	muleq	r2, r4, r1
   1371c:	ldr	r3, [pc, #16]	; 13734 <__assert_fail@plt+0x2780>
   13720:	cmp	r0, #0
   13724:	movne	r3, r0
   13728:	ldr	r0, [r3, #4]
   1372c:	str	r1, [r3, #4]
   13730:	bx	lr
   13734:	muleq	r2, r4, r1
   13738:	ldr	r3, [pc, #44]	; 1376c <__assert_fail@plt+0x27b8>
   1373c:	cmp	r0, #0
   13740:	moveq	r0, r3
   13744:	mov	ip, #10
   13748:	cmp	r2, #0
   1374c:	cmpne	r1, #0
   13750:	str	ip, [r0]
   13754:	beq	13764 <__assert_fail@plt+0x27b0>
   13758:	str	r1, [r0, #40]	; 0x28
   1375c:	str	r2, [r0, #44]	; 0x2c
   13760:	bx	lr
   13764:	push	{r4, lr}
   13768:	bl	10fa8 <abort@plt>
   1376c:	muleq	r2, r4, r1
   13770:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13774:	sub	sp, sp, #24
   13778:	ldr	ip, [pc, #108]	; 137ec <__assert_fail@plt+0x2838>
   1377c:	ldr	r4, [sp, #56]	; 0x38
   13780:	mov	r9, r2
   13784:	cmp	r4, #0
   13788:	moveq	r4, ip
   1378c:	mov	sl, r3
   13790:	mov	r7, r0
   13794:	mov	r8, r1
   13798:	bl	10edc <__errno_location@plt>
   1379c:	ldr	r3, [r4, #44]	; 0x2c
   137a0:	mov	r1, r8
   137a4:	ldr	r6, [r0]
   137a8:	str	r3, [sp, #16]
   137ac:	ldr	r2, [r4, #40]	; 0x28
   137b0:	add	r3, r4, #8
   137b4:	str	r3, [sp, #8]
   137b8:	str	r2, [sp, #12]
   137bc:	ldr	r2, [r4, #4]
   137c0:	mov	r5, r0
   137c4:	str	r2, [sp, #4]
   137c8:	ldr	ip, [r4]
   137cc:	mov	r3, sl
   137d0:	mov	r2, r9
   137d4:	mov	r0, r7
   137d8:	str	ip, [sp]
   137dc:	bl	120f4 <__assert_fail@plt+0x1140>
   137e0:	str	r6, [r5]
   137e4:	add	sp, sp, #24
   137e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   137ec:	muleq	r2, r4, r1
   137f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137f4:	cmp	r2, #0
   137f8:	sub	sp, sp, #36	; 0x24
   137fc:	ldr	r4, [pc, #164]	; 138a8 <__assert_fail@plt+0x28f4>
   13800:	mov	r8, r1
   13804:	movne	r4, r2
   13808:	mov	r7, r0
   1380c:	bl	10edc <__errno_location@plt>
   13810:	ldr	r3, [r4, #44]	; 0x2c
   13814:	ldr	r5, [r4, #4]
   13818:	add	r9, r4, #8
   1381c:	orr	r5, r5, #1
   13820:	mov	r1, #0
   13824:	mov	r2, r7
   13828:	ldr	fp, [r0]
   1382c:	str	r3, [sp, #16]
   13830:	ldr	r3, [r4, #40]	; 0x28
   13834:	stmib	sp, {r5, r9}
   13838:	str	r3, [sp, #12]
   1383c:	ldr	r3, [r4]
   13840:	mov	r6, r0
   13844:	str	r3, [sp]
   13848:	mov	r0, r1
   1384c:	mov	r3, r8
   13850:	bl	120f4 <__assert_fail@plt+0x1140>
   13854:	add	r1, r0, #1
   13858:	mov	r0, r1
   1385c:	str	r1, [sp, #28]
   13860:	bl	169d0 <__assert_fail@plt+0x5a1c>
   13864:	ldr	r3, [r4, #44]	; 0x2c
   13868:	ldr	r1, [sp, #28]
   1386c:	str	r3, [sp, #16]
   13870:	ldr	r3, [r4, #40]	; 0x28
   13874:	str	r5, [sp, #4]
   13878:	str	r3, [sp, #12]
   1387c:	str	r9, [sp, #8]
   13880:	ldr	ip, [r4]
   13884:	mov	r3, r8
   13888:	mov	r2, r7
   1388c:	str	ip, [sp]
   13890:	mov	sl, r0
   13894:	bl	120f4 <__assert_fail@plt+0x1140>
   13898:	mov	r0, sl
   1389c:	str	fp, [r6]
   138a0:	add	sp, sp, #36	; 0x24
   138a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138a8:	muleq	r2, r4, r1
   138ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138b0:	cmp	r3, #0
   138b4:	sub	sp, sp, #44	; 0x2c
   138b8:	ldr	r4, [pc, #192]	; 13980 <__assert_fail@plt+0x29cc>
   138bc:	mov	r6, r2
   138c0:	movne	r4, r3
   138c4:	mov	r9, r1
   138c8:	mov	r8, r0
   138cc:	bl	10edc <__errno_location@plt>
   138d0:	ldr	r3, [r4, #44]	; 0x2c
   138d4:	ldr	r5, [r4, #4]
   138d8:	add	sl, r4, #8
   138dc:	cmp	r6, #0
   138e0:	orreq	r5, r5, #1
   138e4:	mov	r1, #0
   138e8:	ldr	r2, [r0]
   138ec:	str	r3, [sp, #16]
   138f0:	ldr	r3, [r4, #40]	; 0x28
   138f4:	stmib	sp, {r5, sl}
   138f8:	str	r3, [sp, #12]
   138fc:	ldr	r3, [r4]
   13900:	mov	r7, r0
   13904:	str	r2, [sp, #28]
   13908:	str	r3, [sp]
   1390c:	mov	r2, r8
   13910:	mov	r3, r9
   13914:	mov	r0, r1
   13918:	bl	120f4 <__assert_fail@plt+0x1140>
   1391c:	add	r1, r0, #1
   13920:	mov	fp, r0
   13924:	mov	r0, r1
   13928:	str	r1, [sp, #36]	; 0x24
   1392c:	bl	169d0 <__assert_fail@plt+0x5a1c>
   13930:	ldr	r3, [r4, #44]	; 0x2c
   13934:	mov	r2, r8
   13938:	str	r3, [sp, #16]
   1393c:	ldr	r3, [r4, #40]	; 0x28
   13940:	str	r5, [sp, #4]
   13944:	str	r3, [sp, #12]
   13948:	str	sl, [sp, #8]
   1394c:	ldr	ip, [r4]
   13950:	ldr	r1, [sp, #36]	; 0x24
   13954:	mov	r3, r9
   13958:	str	ip, [sp]
   1395c:	str	r0, [sp, #32]
   13960:	bl	120f4 <__assert_fail@plt+0x1140>
   13964:	ldr	r2, [sp, #28]
   13968:	cmp	r6, #0
   1396c:	str	r2, [r7]
   13970:	ldr	r0, [sp, #32]
   13974:	strne	fp, [r6]
   13978:	add	sp, sp, #44	; 0x2c
   1397c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13980:	muleq	r2, r4, r1
   13984:	push	{r4, r5, r6, r7, r8, lr}
   13988:	ldr	r6, [pc, #116]	; 13a04 <__assert_fail@plt+0x2a50>
   1398c:	ldr	r3, [r6, #4]
   13990:	ldr	r7, [r6]
   13994:	cmp	r3, #1
   13998:	movgt	r5, r7
   1399c:	movgt	r4, #1
   139a0:	ble	139c0 <__assert_fail@plt+0x2a0c>
   139a4:	ldr	r0, [r5, #12]
   139a8:	bl	11ec8 <__assert_fail@plt+0xf14>
   139ac:	ldr	r3, [r6, #4]
   139b0:	add	r4, r4, #1
   139b4:	cmp	r3, r4
   139b8:	add	r5, r5, #8
   139bc:	bgt	139a4 <__assert_fail@plt+0x29f0>
   139c0:	ldr	r0, [r7, #4]
   139c4:	ldr	r4, [pc, #60]	; 13a08 <__assert_fail@plt+0x2a54>
   139c8:	cmp	r0, r4
   139cc:	beq	139e0 <__assert_fail@plt+0x2a2c>
   139d0:	bl	11ec8 <__assert_fail@plt+0xf14>
   139d4:	mov	r3, #256	; 0x100
   139d8:	str	r4, [r6, #12]
   139dc:	str	r3, [r6, #8]
   139e0:	ldr	r4, [pc, #36]	; 13a0c <__assert_fail@plt+0x2a58>
   139e4:	cmp	r7, r4
   139e8:	beq	139f8 <__assert_fail@plt+0x2a44>
   139ec:	mov	r0, r7
   139f0:	bl	11ec8 <__assert_fail@plt+0xf14>
   139f4:	str	r4, [r6]
   139f8:	mov	r3, #1
   139fc:	str	r3, [r6, #4]
   13a00:	pop	{r4, r5, r6, r7, r8, pc}
   13a04:	andeq	sl, r2, r0, lsl #2
   13a08:	andeq	sl, r2, r4, asr #3
   13a0c:	andeq	sl, r2, r8, lsl #2
   13a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a14:	sub	sp, sp, #44	; 0x2c
   13a18:	mov	r5, r0
   13a1c:	mov	sl, r1
   13a20:	bl	10edc <__errno_location@plt>
   13a24:	ldr	r4, [pc, #400]	; 13bbc <__assert_fail@plt+0x2c08>
   13a28:	cmn	r5, #-2147483647	; 0x80000001
   13a2c:	ldr	r6, [r4]
   13a30:	mov	r8, r0
   13a34:	movne	r0, #0
   13a38:	moveq	r0, #1
   13a3c:	ldr	r3, [r8]
   13a40:	orrs	r0, r0, r5, lsr #31
   13a44:	str	r3, [sp, #24]
   13a48:	bne	13bb8 <__assert_fail@plt+0x2c04>
   13a4c:	ldr	r2, [r4, #4]
   13a50:	cmp	r5, r2
   13a54:	blt	13ab4 <__assert_fail@plt+0x2b00>
   13a58:	add	r7, r4, #8
   13a5c:	cmp	r6, r7
   13a60:	str	r2, [sp, #36]	; 0x24
   13a64:	beq	13b88 <__assert_fail@plt+0x2bd4>
   13a68:	mov	r3, #8
   13a6c:	sub	r2, r5, r2
   13a70:	mov	r0, r6
   13a74:	str	r3, [sp]
   13a78:	add	r2, r2, #1
   13a7c:	mvn	r3, #-2147483648	; 0x80000000
   13a80:	add	r1, sp, #36	; 0x24
   13a84:	bl	16bec <__assert_fail@plt+0x5c38>
   13a88:	mov	r6, r0
   13a8c:	str	r0, [r4]
   13a90:	ldr	r0, [r4, #4]
   13a94:	ldr	r2, [sp, #36]	; 0x24
   13a98:	mov	r1, #0
   13a9c:	sub	r2, r2, r0
   13aa0:	add	r0, r6, r0, lsl #3
   13aa4:	lsl	r2, r2, #3
   13aa8:	bl	10ef4 <memset@plt>
   13aac:	ldr	r3, [sp, #36]	; 0x24
   13ab0:	str	r3, [r4, #4]
   13ab4:	ldr	r4, [pc, #260]	; 13bc0 <__assert_fail@plt+0x2c0c>
   13ab8:	add	fp, r6, r5, lsl #3
   13abc:	ldr	r9, [r6, r5, lsl #3]
   13ac0:	ldr	r0, [r4, #4]
   13ac4:	ldr	r3, [r4]
   13ac8:	ldr	r7, [fp, #4]
   13acc:	ldr	r1, [r4, #44]	; 0x2c
   13ad0:	ldr	r2, [r4, #40]	; 0x28
   13ad4:	orr	r0, r0, #1
   13ad8:	str	r3, [sp]
   13adc:	add	r3, r4, #8
   13ae0:	str	r0, [sp, #28]
   13ae4:	str	r0, [sp, #4]
   13ae8:	str	r1, [sp, #16]
   13aec:	str	r2, [sp, #12]
   13af0:	str	r3, [sp, #8]
   13af4:	mov	r0, r7
   13af8:	mov	r1, r9
   13afc:	mvn	r3, #0
   13b00:	mov	r2, sl
   13b04:	bl	120f4 <__assert_fail@plt+0x1140>
   13b08:	cmp	r9, r0
   13b0c:	bhi	13b74 <__assert_fail@plt+0x2bc0>
   13b10:	add	r3, r4, #48	; 0x30
   13b14:	add	r9, r0, #1
   13b18:	cmp	r7, r3
   13b1c:	str	r9, [r6, r5, lsl #3]
   13b20:	beq	13b2c <__assert_fail@plt+0x2b78>
   13b24:	mov	r0, r7
   13b28:	bl	11ec8 <__assert_fail@plt+0xf14>
   13b2c:	mov	r0, r9
   13b30:	bl	169d0 <__assert_fail@plt+0x5a1c>
   13b34:	ldr	ip, [r4, #44]	; 0x2c
   13b38:	ldr	r3, [r4]
   13b3c:	ldr	lr, [r4, #40]	; 0x28
   13b40:	ldr	r4, [pc, #124]	; 13bc4 <__assert_fail@plt+0x2c10>
   13b44:	mov	r2, sl
   13b48:	mov	r1, r9
   13b4c:	str	r0, [fp, #4]
   13b50:	str	r4, [sp, #8]
   13b54:	ldr	r4, [sp, #28]
   13b58:	str	r3, [sp]
   13b5c:	str	r4, [sp, #4]
   13b60:	str	ip, [sp, #16]
   13b64:	str	lr, [sp, #12]
   13b68:	mvn	r3, #0
   13b6c:	mov	r7, r0
   13b70:	bl	120f4 <__assert_fail@plt+0x1140>
   13b74:	ldr	r3, [sp, #24]
   13b78:	mov	r0, r7
   13b7c:	str	r3, [r8]
   13b80:	add	sp, sp, #44	; 0x2c
   13b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b88:	mov	r3, #8
   13b8c:	sub	r2, r5, r2
   13b90:	str	r3, [sp]
   13b94:	add	r1, sp, #36	; 0x24
   13b98:	add	r2, r2, #1
   13b9c:	mvn	r3, #-2147483648	; 0x80000000
   13ba0:	bl	16bec <__assert_fail@plt+0x5c38>
   13ba4:	mov	r6, r0
   13ba8:	ldm	r7, {r0, r1}
   13bac:	str	r6, [r4]
   13bb0:	stm	r6, {r0, r1}
   13bb4:	b	13a90 <__assert_fail@plt+0x2adc>
   13bb8:	bl	10fa8 <abort@plt>
   13bbc:	andeq	sl, r2, r0, lsl #2
   13bc0:	muleq	r2, r4, r1
   13bc4:	muleq	r2, ip, r1
   13bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bcc:	sub	sp, sp, #52	; 0x34
   13bd0:	mov	r5, r0
   13bd4:	mov	sl, r1
   13bd8:	mov	fp, r2
   13bdc:	bl	10edc <__errno_location@plt>
   13be0:	ldr	r4, [pc, #408]	; 13d80 <__assert_fail@plt+0x2dcc>
   13be4:	cmn	r5, #-2147483647	; 0x80000001
   13be8:	ldr	r6, [r4]
   13bec:	mov	r8, r0
   13bf0:	movne	r0, #0
   13bf4:	moveq	r0, #1
   13bf8:	ldr	r3, [r8]
   13bfc:	orrs	r0, r0, r5, lsr #31
   13c00:	str	r3, [sp, #28]
   13c04:	bne	13d7c <__assert_fail@plt+0x2dc8>
   13c08:	ldr	r2, [r4, #4]
   13c0c:	cmp	r5, r2
   13c10:	blt	13c70 <__assert_fail@plt+0x2cbc>
   13c14:	add	r7, r4, #8
   13c18:	cmp	r6, r7
   13c1c:	str	r2, [sp, #44]	; 0x2c
   13c20:	beq	13d4c <__assert_fail@plt+0x2d98>
   13c24:	mov	r3, #8
   13c28:	sub	r2, r5, r2
   13c2c:	mov	r0, r6
   13c30:	str	r3, [sp]
   13c34:	add	r2, r2, #1
   13c38:	mvn	r3, #-2147483648	; 0x80000000
   13c3c:	add	r1, sp, #44	; 0x2c
   13c40:	bl	16bec <__assert_fail@plt+0x5c38>
   13c44:	mov	r6, r0
   13c48:	str	r0, [r4]
   13c4c:	ldr	r0, [r4, #4]
   13c50:	ldr	r2, [sp, #44]	; 0x2c
   13c54:	mov	r1, #0
   13c58:	sub	r2, r2, r0
   13c5c:	add	r0, r6, r0, lsl #3
   13c60:	lsl	r2, r2, #3
   13c64:	bl	10ef4 <memset@plt>
   13c68:	ldr	r3, [sp, #44]	; 0x2c
   13c6c:	str	r3, [r4, #4]
   13c70:	ldr	r4, [pc, #268]	; 13d84 <__assert_fail@plt+0x2dd0>
   13c74:	add	r3, r6, r5, lsl #3
   13c78:	str	r3, [sp, #32]
   13c7c:	ldr	r7, [r3, #4]
   13c80:	ldr	r0, [r4, #4]
   13c84:	ldr	r3, [r4]
   13c88:	ldr	r9, [r6, r5, lsl #3]
   13c8c:	ldr	r1, [r4, #44]	; 0x2c
   13c90:	ldr	r2, [r4, #40]	; 0x28
   13c94:	orr	r0, r0, #1
   13c98:	str	r3, [sp]
   13c9c:	add	r3, r4, #8
   13ca0:	str	r0, [sp, #36]	; 0x24
   13ca4:	str	r0, [sp, #4]
   13ca8:	str	r1, [sp, #16]
   13cac:	str	r2, [sp, #12]
   13cb0:	str	r3, [sp, #8]
   13cb4:	mov	r0, r7
   13cb8:	mov	r1, r9
   13cbc:	mov	r3, fp
   13cc0:	mov	r2, sl
   13cc4:	bl	120f4 <__assert_fail@plt+0x1140>
   13cc8:	cmp	r9, r0
   13ccc:	bhi	13d38 <__assert_fail@plt+0x2d84>
   13cd0:	add	r3, r4, #48	; 0x30
   13cd4:	add	r9, r0, #1
   13cd8:	cmp	r7, r3
   13cdc:	str	r9, [r6, r5, lsl #3]
   13ce0:	beq	13cec <__assert_fail@plt+0x2d38>
   13ce4:	mov	r0, r7
   13ce8:	bl	11ec8 <__assert_fail@plt+0xf14>
   13cec:	mov	r0, r9
   13cf0:	bl	169d0 <__assert_fail@plt+0x5a1c>
   13cf4:	ldr	ip, [sp, #32]
   13cf8:	ldr	lr, [r4, #44]	; 0x2c
   13cfc:	ldr	r5, [r4, #40]	; 0x28
   13d00:	mov	r3, fp
   13d04:	mov	r2, sl
   13d08:	mov	r1, r9
   13d0c:	str	r0, [ip, #4]
   13d10:	ldr	ip, [r4]
   13d14:	ldr	r4, [pc, #108]	; 13d88 <__assert_fail@plt+0x2dd4>
   13d18:	str	lr, [sp, #16]
   13d1c:	str	r4, [sp, #8]
   13d20:	ldr	r4, [sp, #36]	; 0x24
   13d24:	str	r5, [sp, #12]
   13d28:	str	r4, [sp, #4]
   13d2c:	str	ip, [sp]
   13d30:	mov	r7, r0
   13d34:	bl	120f4 <__assert_fail@plt+0x1140>
   13d38:	ldr	r3, [sp, #28]
   13d3c:	mov	r0, r7
   13d40:	str	r3, [r8]
   13d44:	add	sp, sp, #52	; 0x34
   13d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d4c:	mov	r3, #8
   13d50:	sub	r2, r5, r2
   13d54:	str	r3, [sp]
   13d58:	add	r1, sp, #44	; 0x2c
   13d5c:	add	r2, r2, #1
   13d60:	mvn	r3, #-2147483648	; 0x80000000
   13d64:	bl	16bec <__assert_fail@plt+0x5c38>
   13d68:	mov	r6, r0
   13d6c:	ldm	r7, {r0, r1}
   13d70:	str	r6, [r4]
   13d74:	stm	r6, {r0, r1}
   13d78:	b	13c4c <__assert_fail@plt+0x2c98>
   13d7c:	bl	10fa8 <abort@plt>
   13d80:	andeq	sl, r2, r0, lsl #2
   13d84:	muleq	r2, r4, r1
   13d88:	muleq	r2, ip, r1
   13d8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d90:	sub	sp, sp, #44	; 0x2c
   13d94:	mov	sl, r0
   13d98:	bl	10edc <__errno_location@plt>
   13d9c:	ldr	r4, [pc, #352]	; 13f04 <__assert_fail@plt+0x2f50>
   13da0:	ldr	r2, [r4, #4]
   13da4:	ldr	r5, [r4]
   13da8:	cmp	r2, #0
   13dac:	ldr	r3, [r0]
   13db0:	mov	r8, r0
   13db4:	str	r3, [sp, #28]
   13db8:	bgt	13e14 <__assert_fail@plt+0x2e60>
   13dbc:	add	r6, r4, #8
   13dc0:	cmp	r5, r6
   13dc4:	str	r2, [sp, #36]	; 0x24
   13dc8:	beq	13ed4 <__assert_fail@plt+0x2f20>
   13dcc:	mov	r3, #8
   13dd0:	mov	r0, r5
   13dd4:	str	r3, [sp]
   13dd8:	rsb	r2, r2, #1
   13ddc:	mvn	r3, #-2147483648	; 0x80000000
   13de0:	add	r1, sp, #36	; 0x24
   13de4:	bl	16bec <__assert_fail@plt+0x5c38>
   13de8:	mov	r5, r0
   13dec:	str	r0, [r4]
   13df0:	ldr	r0, [r4, #4]
   13df4:	ldr	r2, [sp, #36]	; 0x24
   13df8:	mov	r1, #0
   13dfc:	sub	r2, r2, r0
   13e00:	add	r0, r5, r0, lsl #3
   13e04:	lsl	r2, r2, #3
   13e08:	bl	10ef4 <memset@plt>
   13e0c:	ldr	r3, [sp, #36]	; 0x24
   13e10:	str	r3, [r4, #4]
   13e14:	ldr	r4, [pc, #236]	; 13f08 <__assert_fail@plt+0x2f54>
   13e18:	ldr	r9, [r5]
   13e1c:	ldr	r6, [r5, #4]
   13e20:	ldr	r7, [r4, #4]
   13e24:	ldr	r1, [r4, #44]	; 0x2c
   13e28:	ldr	r2, [r4, #40]	; 0x28
   13e2c:	ldr	r3, [r4]
   13e30:	orr	r7, r7, #1
   13e34:	add	fp, r4, #8
   13e38:	str	r1, [sp, #16]
   13e3c:	str	r2, [sp, #12]
   13e40:	str	r3, [sp]
   13e44:	str	r7, [sp, #4]
   13e48:	str	fp, [sp, #8]
   13e4c:	mov	r1, r9
   13e50:	mov	r0, r6
   13e54:	mvn	r3, #0
   13e58:	mov	r2, sl
   13e5c:	bl	120f4 <__assert_fail@plt+0x1140>
   13e60:	cmp	r9, r0
   13e64:	bhi	13ec0 <__assert_fail@plt+0x2f0c>
   13e68:	add	r3, r4, #48	; 0x30
   13e6c:	add	r9, r0, #1
   13e70:	cmp	r6, r3
   13e74:	str	r9, [r5]
   13e78:	beq	13e84 <__assert_fail@plt+0x2ed0>
   13e7c:	mov	r0, r6
   13e80:	bl	11ec8 <__assert_fail@plt+0xf14>
   13e84:	mov	r0, r9
   13e88:	bl	169d0 <__assert_fail@plt+0x5a1c>
   13e8c:	ldr	ip, [r4, #44]	; 0x2c
   13e90:	ldr	r3, [r4]
   13e94:	ldr	lr, [r4, #40]	; 0x28
   13e98:	mov	r2, sl
   13e9c:	mov	r1, r9
   13ea0:	str	r0, [r5, #4]
   13ea4:	str	r3, [sp]
   13ea8:	stmib	sp, {r7, fp}
   13eac:	str	ip, [sp, #16]
   13eb0:	str	lr, [sp, #12]
   13eb4:	mvn	r3, #0
   13eb8:	mov	r6, r0
   13ebc:	bl	120f4 <__assert_fail@plt+0x1140>
   13ec0:	ldr	r3, [sp, #28]
   13ec4:	mov	r0, r6
   13ec8:	str	r3, [r8]
   13ecc:	add	sp, sp, #44	; 0x2c
   13ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ed4:	mov	r3, #8
   13ed8:	str	r3, [sp]
   13edc:	add	r1, sp, #36	; 0x24
   13ee0:	rsb	r2, r2, #1
   13ee4:	mvn	r3, #-2147483648	; 0x80000000
   13ee8:	mov	r0, #0
   13eec:	bl	16bec <__assert_fail@plt+0x5c38>
   13ef0:	mov	r5, r0
   13ef4:	ldm	r6, {r0, r1}
   13ef8:	str	r5, [r4]
   13efc:	stm	r5, {r0, r1}
   13f00:	b	13df0 <__assert_fail@plt+0x2e3c>
   13f04:	andeq	sl, r2, r0, lsl #2
   13f08:	muleq	r2, r4, r1
   13f0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f10:	sub	sp, sp, #44	; 0x2c
   13f14:	mov	r9, r0
   13f18:	mov	sl, r1
   13f1c:	bl	10edc <__errno_location@plt>
   13f20:	ldr	r4, [pc, #364]	; 14094 <__assert_fail@plt+0x30e0>
   13f24:	ldr	r2, [r4, #4]
   13f28:	ldr	r5, [r4]
   13f2c:	cmp	r2, #0
   13f30:	ldr	r3, [r0]
   13f34:	mov	r7, r0
   13f38:	str	r3, [sp, #24]
   13f3c:	bgt	13f98 <__assert_fail@plt+0x2fe4>
   13f40:	add	r6, r4, #8
   13f44:	cmp	r5, r6
   13f48:	str	r2, [sp, #36]	; 0x24
   13f4c:	beq	14064 <__assert_fail@plt+0x30b0>
   13f50:	mov	r3, #8
   13f54:	mov	r0, r5
   13f58:	str	r3, [sp]
   13f5c:	rsb	r2, r2, #1
   13f60:	mvn	r3, #-2147483648	; 0x80000000
   13f64:	add	r1, sp, #36	; 0x24
   13f68:	bl	16bec <__assert_fail@plt+0x5c38>
   13f6c:	mov	r5, r0
   13f70:	str	r0, [r4]
   13f74:	ldr	r0, [r4, #4]
   13f78:	ldr	r2, [sp, #36]	; 0x24
   13f7c:	mov	r1, #0
   13f80:	sub	r2, r2, r0
   13f84:	add	r0, r5, r0, lsl #3
   13f88:	lsl	r2, r2, #3
   13f8c:	bl	10ef4 <memset@plt>
   13f90:	ldr	r3, [sp, #36]	; 0x24
   13f94:	str	r3, [r4, #4]
   13f98:	ldr	r4, [pc, #248]	; 14098 <__assert_fail@plt+0x30e4>
   13f9c:	ldr	r8, [r5]
   13fa0:	ldr	r6, [r5, #4]
   13fa4:	ldr	r0, [r4, #4]
   13fa8:	ldr	r1, [r4, #44]	; 0x2c
   13fac:	ldr	r2, [r4, #40]	; 0x28
   13fb0:	ldr	r3, [r4]
   13fb4:	orr	r0, r0, #1
   13fb8:	add	fp, r4, #8
   13fbc:	str	r0, [sp, #28]
   13fc0:	str	r0, [sp, #4]
   13fc4:	str	r1, [sp, #16]
   13fc8:	str	r2, [sp, #12]
   13fcc:	str	r3, [sp]
   13fd0:	str	fp, [sp, #8]
   13fd4:	mov	r1, r8
   13fd8:	mov	r0, r6
   13fdc:	mov	r3, sl
   13fe0:	mov	r2, r9
   13fe4:	bl	120f4 <__assert_fail@plt+0x1140>
   13fe8:	cmp	r8, r0
   13fec:	bhi	14050 <__assert_fail@plt+0x309c>
   13ff0:	add	r3, r4, #48	; 0x30
   13ff4:	add	r8, r0, #1
   13ff8:	cmp	r6, r3
   13ffc:	str	r8, [r5]
   14000:	beq	1400c <__assert_fail@plt+0x3058>
   14004:	mov	r0, r6
   14008:	bl	11ec8 <__assert_fail@plt+0xf14>
   1400c:	mov	r0, r8
   14010:	bl	169d0 <__assert_fail@plt+0x5a1c>
   14014:	ldr	lr, [r4, #44]	; 0x2c
   14018:	ldr	ip, [r4]
   1401c:	mov	r3, sl
   14020:	mov	r2, r9
   14024:	mov	r1, r8
   14028:	str	r0, [r5, #4]
   1402c:	ldr	r5, [r4, #40]	; 0x28
   14030:	ldr	r4, [sp, #28]
   14034:	str	fp, [sp, #8]
   14038:	str	r4, [sp, #4]
   1403c:	str	lr, [sp, #16]
   14040:	str	r5, [sp, #12]
   14044:	str	ip, [sp]
   14048:	mov	r6, r0
   1404c:	bl	120f4 <__assert_fail@plt+0x1140>
   14050:	ldr	r3, [sp, #24]
   14054:	mov	r0, r6
   14058:	str	r3, [r7]
   1405c:	add	sp, sp, #44	; 0x2c
   14060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14064:	mov	r3, #8
   14068:	str	r3, [sp]
   1406c:	add	r1, sp, #36	; 0x24
   14070:	rsb	r2, r2, #1
   14074:	mvn	r3, #-2147483648	; 0x80000000
   14078:	mov	r0, #0
   1407c:	bl	16bec <__assert_fail@plt+0x5c38>
   14080:	mov	r5, r0
   14084:	ldm	r6, {r0, r1}
   14088:	str	r5, [r4]
   1408c:	stm	r5, {r0, r1}
   14090:	b	13f74 <__assert_fail@plt+0x2fc0>
   14094:	andeq	sl, r2, r0, lsl #2
   14098:	muleq	r2, r4, r1
   1409c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140a0:	sub	sp, sp, #132	; 0x84
   140a4:	mov	r5, r1
   140a8:	mov	r4, r0
   140ac:	mov	r9, r2
   140b0:	add	r0, sp, #80	; 0x50
   140b4:	mov	r2, #48	; 0x30
   140b8:	mov	r1, #0
   140bc:	bl	10ef4 <memset@plt>
   140c0:	cmp	r5, #10
   140c4:	beq	1427c <__assert_fail@plt+0x32c8>
   140c8:	add	lr, sp, #80	; 0x50
   140cc:	str	r5, [sp, #80]	; 0x50
   140d0:	ldm	lr!, {r0, r1, r2, r3}
   140d4:	add	ip, sp, #32
   140d8:	ldr	r6, [pc, #416]	; 14280 <__assert_fail@plt+0x32cc>
   140dc:	stmia	ip!, {r0, r1, r2, r3}
   140e0:	ldm	lr!, {r0, r1, r2, r3}
   140e4:	stmia	ip!, {r0, r1, r2, r3}
   140e8:	ldm	lr, {r0, r1, r2, r3}
   140ec:	stm	ip, {r0, r1, r2, r3}
   140f0:	bl	10edc <__errno_location@plt>
   140f4:	cmn	r4, #-2147483647	; 0x80000001
   140f8:	ldr	r5, [r6]
   140fc:	mov	r7, r0
   14100:	movne	r0, #0
   14104:	moveq	r0, #1
   14108:	ldr	r3, [r7]
   1410c:	orrs	r0, r0, r4, lsr #31
   14110:	str	r3, [sp, #24]
   14114:	bne	1427c <__assert_fail@plt+0x32c8>
   14118:	ldr	r2, [r6, #4]
   1411c:	cmp	r4, r2
   14120:	blt	14180 <__assert_fail@plt+0x31cc>
   14124:	add	r8, r6, #8
   14128:	cmp	r5, r8
   1412c:	str	r2, [sp, #80]	; 0x50
   14130:	beq	1424c <__assert_fail@plt+0x3298>
   14134:	mov	r3, #8
   14138:	sub	r2, r4, r2
   1413c:	mov	r0, r5
   14140:	str	r3, [sp]
   14144:	add	r2, r2, #1
   14148:	add	r1, sp, #80	; 0x50
   1414c:	mvn	r3, #-2147483648	; 0x80000000
   14150:	bl	16bec <__assert_fail@plt+0x5c38>
   14154:	mov	r5, r0
   14158:	str	r0, [r6]
   1415c:	ldr	r0, [r6, #4]
   14160:	ldr	r2, [sp, #80]	; 0x50
   14164:	mov	r1, #0
   14168:	sub	r2, r2, r0
   1416c:	add	r0, r5, r0, lsl #3
   14170:	lsl	r2, r2, #3
   14174:	bl	10ef4 <memset@plt>
   14178:	ldr	r3, [sp, #80]	; 0x50
   1417c:	str	r3, [r6, #4]
   14180:	add	fp, r5, r4, lsl #3
   14184:	ldr	r1, [sp, #36]	; 0x24
   14188:	ldr	r8, [r5, r4, lsl #3]
   1418c:	ldr	r6, [fp, #4]
   14190:	ldr	r2, [sp, #72]	; 0x48
   14194:	ldr	r3, [sp, #32]
   14198:	ldr	ip, [sp, #76]	; 0x4c
   1419c:	orr	r1, r1, #1
   141a0:	add	sl, sp, #40	; 0x28
   141a4:	str	r1, [sp, #28]
   141a8:	str	r1, [sp, #4]
   141ac:	str	r2, [sp, #12]
   141b0:	str	r3, [sp]
   141b4:	mov	r0, r6
   141b8:	mov	r1, r8
   141bc:	str	ip, [sp, #16]
   141c0:	str	sl, [sp, #8]
   141c4:	mvn	r3, #0
   141c8:	mov	r2, r9
   141cc:	bl	120f4 <__assert_fail@plt+0x1140>
   141d0:	cmp	r8, r0
   141d4:	bhi	14238 <__assert_fail@plt+0x3284>
   141d8:	ldr	r3, [pc, #164]	; 14284 <__assert_fail@plt+0x32d0>
   141dc:	add	r8, r0, #1
   141e0:	cmp	r6, r3
   141e4:	str	r8, [r5, r4, lsl #3]
   141e8:	beq	141f4 <__assert_fail@plt+0x3240>
   141ec:	mov	r0, r6
   141f0:	bl	11ec8 <__assert_fail@plt+0xf14>
   141f4:	mov	r0, r8
   141f8:	bl	169d0 <__assert_fail@plt+0x5a1c>
   141fc:	ldr	lr, [sp, #76]	; 0x4c
   14200:	ldr	r3, [sp, #32]
   14204:	ldr	ip, [sp, #72]	; 0x48
   14208:	ldr	r4, [sp, #28]
   1420c:	mov	r2, r9
   14210:	mov	r1, r8
   14214:	str	r0, [fp, #4]
   14218:	str	r3, [sp]
   1421c:	str	sl, [sp, #8]
   14220:	str	r4, [sp, #4]
   14224:	str	lr, [sp, #16]
   14228:	str	ip, [sp, #12]
   1422c:	mvn	r3, #0
   14230:	mov	r6, r0
   14234:	bl	120f4 <__assert_fail@plt+0x1140>
   14238:	ldr	r3, [sp, #24]
   1423c:	mov	r0, r6
   14240:	str	r3, [r7]
   14244:	add	sp, sp, #132	; 0x84
   14248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1424c:	mov	r3, #8
   14250:	sub	r2, r4, r2
   14254:	add	r1, sp, #80	; 0x50
   14258:	str	r3, [sp]
   1425c:	add	r2, r2, #1
   14260:	mvn	r3, #-2147483648	; 0x80000000
   14264:	bl	16bec <__assert_fail@plt+0x5c38>
   14268:	mov	r5, r0
   1426c:	ldm	r8, {r0, r1}
   14270:	str	r5, [r6]
   14274:	stm	r5, {r0, r1}
   14278:	b	1415c <__assert_fail@plt+0x31a8>
   1427c:	bl	10fa8 <abort@plt>
   14280:	andeq	sl, r2, r0, lsl #2
   14284:	andeq	sl, r2, r4, asr #3
   14288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1428c:	sub	sp, sp, #132	; 0x84
   14290:	mov	r5, r1
   14294:	mov	r4, r0
   14298:	mov	r9, r2
   1429c:	add	r0, sp, #80	; 0x50
   142a0:	mov	r2, #48	; 0x30
   142a4:	mov	r1, #0
   142a8:	mov	sl, r3
   142ac:	bl	10ef4 <memset@plt>
   142b0:	cmp	r5, #10
   142b4:	beq	14470 <__assert_fail@plt+0x34bc>
   142b8:	add	lr, sp, #80	; 0x50
   142bc:	str	r5, [sp, #80]	; 0x50
   142c0:	ldm	lr!, {r0, r1, r2, r3}
   142c4:	add	ip, sp, #32
   142c8:	ldr	r6, [pc, #420]	; 14474 <__assert_fail@plt+0x34c0>
   142cc:	stmia	ip!, {r0, r1, r2, r3}
   142d0:	ldm	lr!, {r0, r1, r2, r3}
   142d4:	stmia	ip!, {r0, r1, r2, r3}
   142d8:	ldm	lr, {r0, r1, r2, r3}
   142dc:	stm	ip, {r0, r1, r2, r3}
   142e0:	bl	10edc <__errno_location@plt>
   142e4:	cmn	r4, #-2147483647	; 0x80000001
   142e8:	ldr	r5, [r6]
   142ec:	mov	r7, r0
   142f0:	movne	r0, #0
   142f4:	moveq	r0, #1
   142f8:	ldr	r3, [r7]
   142fc:	orrs	r0, r0, r4, lsr #31
   14300:	str	r3, [sp, #24]
   14304:	bne	14470 <__assert_fail@plt+0x34bc>
   14308:	ldr	r2, [r6, #4]
   1430c:	cmp	r4, r2
   14310:	blt	14370 <__assert_fail@plt+0x33bc>
   14314:	add	r8, r6, #8
   14318:	cmp	r5, r8
   1431c:	str	r2, [sp, #80]	; 0x50
   14320:	beq	14440 <__assert_fail@plt+0x348c>
   14324:	mov	r3, #8
   14328:	sub	r2, r4, r2
   1432c:	mov	r0, r5
   14330:	str	r3, [sp]
   14334:	add	r2, r2, #1
   14338:	add	r1, sp, #80	; 0x50
   1433c:	mvn	r3, #-2147483648	; 0x80000000
   14340:	bl	16bec <__assert_fail@plt+0x5c38>
   14344:	mov	r5, r0
   14348:	str	r0, [r6]
   1434c:	ldr	r0, [r6, #4]
   14350:	ldr	r2, [sp, #80]	; 0x50
   14354:	mov	r1, #0
   14358:	sub	r2, r2, r0
   1435c:	add	r0, r5, r0, lsl #3
   14360:	lsl	r2, r2, #3
   14364:	bl	10ef4 <memset@plt>
   14368:	ldr	r3, [sp, #80]	; 0x50
   1436c:	str	r3, [r6, #4]
   14370:	add	fp, r5, r4, lsl #3
   14374:	ldr	r3, [sp, #32]
   14378:	ldr	r1, [sp, #36]	; 0x24
   1437c:	ldr	r8, [r5, r4, lsl #3]
   14380:	ldr	r6, [fp, #4]
   14384:	ldr	r2, [sp, #72]	; 0x48
   14388:	ldr	ip, [sp, #76]	; 0x4c
   1438c:	orr	r1, r1, #1
   14390:	str	r3, [sp]
   14394:	add	r3, sp, #40	; 0x28
   14398:	str	r1, [sp, #28]
   1439c:	str	r1, [sp, #4]
   143a0:	str	r2, [sp, #12]
   143a4:	str	r3, [sp, #8]
   143a8:	mov	r0, r6
   143ac:	mov	r1, r8
   143b0:	str	ip, [sp, #16]
   143b4:	mov	r3, sl
   143b8:	mov	r2, r9
   143bc:	bl	120f4 <__assert_fail@plt+0x1140>
   143c0:	cmp	r8, r0
   143c4:	bhi	1442c <__assert_fail@plt+0x3478>
   143c8:	ldr	r3, [pc, #168]	; 14478 <__assert_fail@plt+0x34c4>
   143cc:	add	r8, r0, #1
   143d0:	cmp	r6, r3
   143d4:	str	r8, [r5, r4, lsl #3]
   143d8:	beq	143e4 <__assert_fail@plt+0x3430>
   143dc:	mov	r0, r6
   143e0:	bl	11ec8 <__assert_fail@plt+0xf14>
   143e4:	mov	r0, r8
   143e8:	bl	169d0 <__assert_fail@plt+0x5a1c>
   143ec:	add	lr, sp, #40	; 0x28
   143f0:	ldr	ip, [sp, #76]	; 0x4c
   143f4:	ldr	r4, [sp, #72]	; 0x48
   143f8:	ldr	r5, [sp, #28]
   143fc:	mov	r3, sl
   14400:	mov	r2, r9
   14404:	mov	r1, r8
   14408:	str	r0, [fp, #4]
   1440c:	str	lr, [sp, #8]
   14410:	ldr	lr, [sp, #32]
   14414:	str	r5, [sp, #4]
   14418:	str	ip, [sp, #16]
   1441c:	str	r4, [sp, #12]
   14420:	str	lr, [sp]
   14424:	mov	r6, r0
   14428:	bl	120f4 <__assert_fail@plt+0x1140>
   1442c:	ldr	r3, [sp, #24]
   14430:	mov	r0, r6
   14434:	str	r3, [r7]
   14438:	add	sp, sp, #132	; 0x84
   1443c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14440:	mov	r3, #8
   14444:	sub	r2, r4, r2
   14448:	add	r1, sp, #80	; 0x50
   1444c:	str	r3, [sp]
   14450:	add	r2, r2, #1
   14454:	mvn	r3, #-2147483648	; 0x80000000
   14458:	bl	16bec <__assert_fail@plt+0x5c38>
   1445c:	mov	r5, r0
   14460:	ldm	r8, {r0, r1}
   14464:	str	r5, [r6]
   14468:	stm	r5, {r0, r1}
   1446c:	b	1434c <__assert_fail@plt+0x3398>
   14470:	bl	10fa8 <abort@plt>
   14474:	andeq	sl, r2, r0, lsl #2
   14478:	andeq	sl, r2, r4, asr #3
   1447c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14480:	sub	sp, sp, #124	; 0x7c
   14484:	mov	r4, r0
   14488:	mov	r9, r1
   1448c:	add	r0, sp, #72	; 0x48
   14490:	mov	r2, #48	; 0x30
   14494:	mov	r1, #0
   14498:	bl	10ef4 <memset@plt>
   1449c:	cmp	r4, #10
   144a0:	beq	1462c <__assert_fail@plt+0x3678>
   144a4:	add	lr, sp, #72	; 0x48
   144a8:	str	r4, [sp, #72]	; 0x48
   144ac:	ldm	lr!, {r0, r1, r2, r3}
   144b0:	add	ip, sp, #24
   144b4:	ldr	r5, [pc, #372]	; 14630 <__assert_fail@plt+0x367c>
   144b8:	stmia	ip!, {r0, r1, r2, r3}
   144bc:	ldm	lr!, {r0, r1, r2, r3}
   144c0:	stmia	ip!, {r0, r1, r2, r3}
   144c4:	ldm	lr, {r0, r1, r2, r3}
   144c8:	stm	ip, {r0, r1, r2, r3}
   144cc:	bl	10edc <__errno_location@plt>
   144d0:	ldr	r2, [r5, #4]
   144d4:	ldr	r4, [r5]
   144d8:	cmp	r2, #0
   144dc:	mov	r7, r0
   144e0:	ldr	fp, [r0]
   144e4:	bgt	14540 <__assert_fail@plt+0x358c>
   144e8:	add	r6, r5, #8
   144ec:	cmp	r4, r6
   144f0:	str	r2, [sp, #72]	; 0x48
   144f4:	beq	145fc <__assert_fail@plt+0x3648>
   144f8:	mov	r3, #8
   144fc:	mov	r0, r4
   14500:	str	r3, [sp]
   14504:	rsb	r2, r2, #1
   14508:	add	r1, sp, #72	; 0x48
   1450c:	mvn	r3, #-2147483648	; 0x80000000
   14510:	bl	16bec <__assert_fail@plt+0x5c38>
   14514:	mov	r4, r0
   14518:	str	r0, [r5]
   1451c:	ldr	r0, [r5, #4]
   14520:	ldr	r2, [sp, #72]	; 0x48
   14524:	mov	r1, #0
   14528:	sub	r2, r2, r0
   1452c:	add	r0, r4, r0, lsl #3
   14530:	lsl	r2, r2, #3
   14534:	bl	10ef4 <memset@plt>
   14538:	ldr	r3, [sp, #72]	; 0x48
   1453c:	str	r3, [r5, #4]
   14540:	ldr	r6, [sp, #28]
   14544:	ldr	r8, [r4]
   14548:	ldr	r5, [r4, #4]
   1454c:	ldr	r2, [sp, #64]	; 0x40
   14550:	ldr	r3, [sp, #24]
   14554:	ldr	ip, [sp, #68]	; 0x44
   14558:	orr	r6, r6, #1
   1455c:	add	sl, sp, #32
   14560:	str	r2, [sp, #12]
   14564:	str	r3, [sp]
   14568:	str	r6, [sp, #4]
   1456c:	mov	r1, r8
   14570:	mov	r0, r5
   14574:	str	ip, [sp, #16]
   14578:	str	sl, [sp, #8]
   1457c:	mvn	r3, #0
   14580:	mov	r2, r9
   14584:	bl	120f4 <__assert_fail@plt+0x1140>
   14588:	cmp	r8, r0
   1458c:	bhi	145ec <__assert_fail@plt+0x3638>
   14590:	ldr	r3, [pc, #156]	; 14634 <__assert_fail@plt+0x3680>
   14594:	add	r8, r0, #1
   14598:	cmp	r5, r3
   1459c:	str	r8, [r4]
   145a0:	beq	145ac <__assert_fail@plt+0x35f8>
   145a4:	mov	r0, r5
   145a8:	bl	11ec8 <__assert_fail@plt+0xf14>
   145ac:	mov	r0, r8
   145b0:	bl	169d0 <__assert_fail@plt+0x5a1c>
   145b4:	ldr	lr, [sp, #68]	; 0x44
   145b8:	ldr	r3, [sp, #24]
   145bc:	ldr	ip, [sp, #64]	; 0x40
   145c0:	mov	r2, r9
   145c4:	mov	r1, r8
   145c8:	str	r0, [r4, #4]
   145cc:	str	r3, [sp]
   145d0:	str	sl, [sp, #8]
   145d4:	str	r6, [sp, #4]
   145d8:	str	lr, [sp, #16]
   145dc:	str	ip, [sp, #12]
   145e0:	mvn	r3, #0
   145e4:	mov	r5, r0
   145e8:	bl	120f4 <__assert_fail@plt+0x1140>
   145ec:	mov	r0, r5
   145f0:	str	fp, [r7]
   145f4:	add	sp, sp, #124	; 0x7c
   145f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145fc:	mov	r3, #8
   14600:	add	r1, sp, #72	; 0x48
   14604:	str	r3, [sp]
   14608:	rsb	r2, r2, #1
   1460c:	mvn	r3, #-2147483648	; 0x80000000
   14610:	mov	r0, #0
   14614:	bl	16bec <__assert_fail@plt+0x5c38>
   14618:	mov	r4, r0
   1461c:	ldm	r6, {r0, r1}
   14620:	str	r4, [r5]
   14624:	stm	r4, {r0, r1}
   14628:	b	1451c <__assert_fail@plt+0x3568>
   1462c:	bl	10fa8 <abort@plt>
   14630:	andeq	sl, r2, r0, lsl #2
   14634:	andeq	sl, r2, r4, asr #3
   14638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1463c:	sub	sp, sp, #132	; 0x84
   14640:	mov	r4, r0
   14644:	mov	r9, r1
   14648:	mov	sl, r2
   1464c:	add	r0, sp, #80	; 0x50
   14650:	mov	r2, #48	; 0x30
   14654:	mov	r1, #0
   14658:	bl	10ef4 <memset@plt>
   1465c:	cmp	r4, #10
   14660:	beq	147f4 <__assert_fail@plt+0x3840>
   14664:	add	lr, sp, #80	; 0x50
   14668:	str	r4, [sp, #80]	; 0x50
   1466c:	ldm	lr!, {r0, r1, r2, r3}
   14670:	add	ip, sp, #32
   14674:	ldr	r5, [pc, #380]	; 147f8 <__assert_fail@plt+0x3844>
   14678:	stmia	ip!, {r0, r1, r2, r3}
   1467c:	ldm	lr!, {r0, r1, r2, r3}
   14680:	stmia	ip!, {r0, r1, r2, r3}
   14684:	ldm	lr, {r0, r1, r2, r3}
   14688:	stm	ip, {r0, r1, r2, r3}
   1468c:	bl	10edc <__errno_location@plt>
   14690:	ldr	r2, [r5, #4]
   14694:	ldr	r4, [r5]
   14698:	cmp	r2, #0
   1469c:	ldr	r3, [r0]
   146a0:	mov	r7, r0
   146a4:	str	r3, [sp, #28]
   146a8:	bgt	14704 <__assert_fail@plt+0x3750>
   146ac:	add	r6, r5, #8
   146b0:	cmp	r4, r6
   146b4:	str	r2, [sp, #80]	; 0x50
   146b8:	beq	147c4 <__assert_fail@plt+0x3810>
   146bc:	mov	r3, #8
   146c0:	mov	r0, r4
   146c4:	str	r3, [sp]
   146c8:	rsb	r2, r2, #1
   146cc:	add	r1, sp, #80	; 0x50
   146d0:	mvn	r3, #-2147483648	; 0x80000000
   146d4:	bl	16bec <__assert_fail@plt+0x5c38>
   146d8:	mov	r4, r0
   146dc:	str	r0, [r5]
   146e0:	ldr	r0, [r5, #4]
   146e4:	ldr	r2, [sp, #80]	; 0x50
   146e8:	mov	r1, #0
   146ec:	sub	r2, r2, r0
   146f0:	add	r0, r4, r0, lsl #3
   146f4:	lsl	r2, r2, #3
   146f8:	bl	10ef4 <memset@plt>
   146fc:	ldr	r3, [sp, #80]	; 0x50
   14700:	str	r3, [r5, #4]
   14704:	ldr	r6, [sp, #36]	; 0x24
   14708:	ldr	r8, [r4]
   1470c:	ldr	r5, [r4, #4]
   14710:	ldr	r2, [sp, #72]	; 0x48
   14714:	ldr	r3, [sp, #32]
   14718:	ldr	ip, [sp, #76]	; 0x4c
   1471c:	orr	r6, r6, #1
   14720:	add	fp, sp, #40	; 0x28
   14724:	str	r2, [sp, #12]
   14728:	str	r3, [sp]
   1472c:	str	r6, [sp, #4]
   14730:	mov	r1, r8
   14734:	mov	r0, r5
   14738:	str	ip, [sp, #16]
   1473c:	str	fp, [sp, #8]
   14740:	mov	r3, sl
   14744:	mov	r2, r9
   14748:	bl	120f4 <__assert_fail@plt+0x1140>
   1474c:	cmp	r8, r0
   14750:	bhi	147b0 <__assert_fail@plt+0x37fc>
   14754:	ldr	r3, [pc, #160]	; 147fc <__assert_fail@plt+0x3848>
   14758:	add	r8, r0, #1
   1475c:	cmp	r5, r3
   14760:	str	r8, [r4]
   14764:	beq	14770 <__assert_fail@plt+0x37bc>
   14768:	mov	r0, r5
   1476c:	bl	11ec8 <__assert_fail@plt+0xf14>
   14770:	mov	r0, r8
   14774:	bl	169d0 <__assert_fail@plt+0x5a1c>
   14778:	ldr	ip, [sp, #76]	; 0x4c
   1477c:	ldr	lr, [sp, #32]
   14780:	mov	r3, sl
   14784:	mov	r2, r9
   14788:	mov	r1, r8
   1478c:	str	r0, [r4, #4]
   14790:	ldr	r4, [sp, #72]	; 0x48
   14794:	str	fp, [sp, #8]
   14798:	str	r6, [sp, #4]
   1479c:	str	ip, [sp, #16]
   147a0:	str	r4, [sp, #12]
   147a4:	str	lr, [sp]
   147a8:	mov	r5, r0
   147ac:	bl	120f4 <__assert_fail@plt+0x1140>
   147b0:	ldr	r3, [sp, #28]
   147b4:	mov	r0, r5
   147b8:	str	r3, [r7]
   147bc:	add	sp, sp, #132	; 0x84
   147c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147c4:	mov	r3, #8
   147c8:	add	r1, sp, #80	; 0x50
   147cc:	str	r3, [sp]
   147d0:	rsb	r2, r2, #1
   147d4:	mvn	r3, #-2147483648	; 0x80000000
   147d8:	mov	r0, #0
   147dc:	bl	16bec <__assert_fail@plt+0x5c38>
   147e0:	mov	r4, r0
   147e4:	ldm	r6, {r0, r1}
   147e8:	str	r4, [r5]
   147ec:	stm	r4, {r0, r1}
   147f0:	b	146e0 <__assert_fail@plt+0x372c>
   147f4:	bl	10fa8 <abort@plt>
   147f8:	andeq	sl, r2, r0, lsl #2
   147fc:	andeq	sl, r2, r4, asr #3
   14800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14804:	mov	r4, r2
   14808:	ldr	lr, [pc, #432]	; 149c0 <__assert_fail@plt+0x3a0c>
   1480c:	mov	sl, r0
   14810:	mov	fp, r1
   14814:	ldm	lr!, {r0, r1, r2, r3}
   14818:	sub	sp, sp, #92	; 0x5c
   1481c:	add	ip, sp, #40	; 0x28
   14820:	lsr	r7, r4, #5
   14824:	stmia	ip!, {r0, r1, r2, r3}
   14828:	add	r6, sp, #48	; 0x30
   1482c:	ldm	lr!, {r0, r1, r2, r3}
   14830:	and	r4, r4, #31
   14834:	ldr	r5, [pc, #392]	; 149c4 <__assert_fail@plt+0x3a10>
   14838:	stmia	ip!, {r0, r1, r2, r3}
   1483c:	ldm	lr, {r0, r1, r2, r3}
   14840:	stm	ip, {r0, r1, r2, r3}
   14844:	ldr	r2, [r6, r7, lsl #2]
   14848:	lsr	r3, r2, r4
   1484c:	eor	r3, r3, #1
   14850:	and	r3, r3, #1
   14854:	eor	r4, r2, r3, lsl r4
   14858:	str	r4, [r6, r7, lsl #2]
   1485c:	bl	10edc <__errno_location@plt>
   14860:	ldr	r2, [r5, #4]
   14864:	ldr	r4, [r5]
   14868:	cmp	r2, #0
   1486c:	ldr	r3, [r0]
   14870:	mov	r8, r0
   14874:	str	r3, [sp, #28]
   14878:	bgt	148d4 <__assert_fail@plt+0x3920>
   1487c:	add	r7, r5, #8
   14880:	cmp	r4, r7
   14884:	str	r2, [sp, #36]	; 0x24
   14888:	beq	14990 <__assert_fail@plt+0x39dc>
   1488c:	mov	r3, #8
   14890:	mov	r0, r4
   14894:	str	r3, [sp]
   14898:	rsb	r2, r2, #1
   1489c:	mvn	r3, #-2147483648	; 0x80000000
   148a0:	add	r1, sp, #36	; 0x24
   148a4:	bl	16bec <__assert_fail@plt+0x5c38>
   148a8:	mov	r4, r0
   148ac:	str	r0, [r5]
   148b0:	ldr	r0, [r5, #4]
   148b4:	ldr	r2, [sp, #36]	; 0x24
   148b8:	mov	r1, #0
   148bc:	sub	r2, r2, r0
   148c0:	add	r0, r4, r0, lsl #3
   148c4:	lsl	r2, r2, #3
   148c8:	bl	10ef4 <memset@plt>
   148cc:	ldr	r3, [sp, #36]	; 0x24
   148d0:	str	r3, [r5, #4]
   148d4:	ldr	r7, [sp, #44]	; 0x2c
   148d8:	ldr	r9, [r4]
   148dc:	ldr	r5, [r4, #4]
   148e0:	ldr	r2, [sp, #80]	; 0x50
   148e4:	ldr	r3, [sp, #40]	; 0x28
   148e8:	ldr	ip, [sp, #84]	; 0x54
   148ec:	orr	r7, r7, #1
   148f0:	str	r2, [sp, #12]
   148f4:	str	r3, [sp]
   148f8:	str	r7, [sp, #4]
   148fc:	str	r6, [sp, #8]
   14900:	mov	r1, r9
   14904:	mov	r0, r5
   14908:	str	ip, [sp, #16]
   1490c:	mov	r3, fp
   14910:	mov	r2, sl
   14914:	bl	120f4 <__assert_fail@plt+0x1140>
   14918:	cmp	r9, r0
   1491c:	bhi	1497c <__assert_fail@plt+0x39c8>
   14920:	ldr	r3, [pc, #160]	; 149c8 <__assert_fail@plt+0x3a14>
   14924:	add	r9, r0, #1
   14928:	cmp	r5, r3
   1492c:	str	r9, [r4]
   14930:	beq	1493c <__assert_fail@plt+0x3988>
   14934:	mov	r0, r5
   14938:	bl	11ec8 <__assert_fail@plt+0xf14>
   1493c:	mov	r0, r9
   14940:	bl	169d0 <__assert_fail@plt+0x5a1c>
   14944:	ldr	ip, [sp, #84]	; 0x54
   14948:	ldr	lr, [sp, #40]	; 0x28
   1494c:	mov	r3, fp
   14950:	mov	r2, sl
   14954:	mov	r1, r9
   14958:	str	r0, [r4, #4]
   1495c:	ldr	r4, [sp, #80]	; 0x50
   14960:	str	r6, [sp, #8]
   14964:	str	r7, [sp, #4]
   14968:	str	ip, [sp, #16]
   1496c:	str	r4, [sp, #12]
   14970:	str	lr, [sp]
   14974:	mov	r5, r0
   14978:	bl	120f4 <__assert_fail@plt+0x1140>
   1497c:	ldr	r3, [sp, #28]
   14980:	mov	r0, r5
   14984:	str	r3, [r8]
   14988:	add	sp, sp, #92	; 0x5c
   1498c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14990:	mov	r3, #8
   14994:	str	r3, [sp]
   14998:	add	r1, sp, #36	; 0x24
   1499c:	rsb	r2, r2, #1
   149a0:	mvn	r3, #-2147483648	; 0x80000000
   149a4:	mov	r0, #0
   149a8:	bl	16bec <__assert_fail@plt+0x5c38>
   149ac:	mov	r4, r0
   149b0:	ldm	r7, {r0, r1}
   149b4:	str	r4, [r5]
   149b8:	stm	r4, {r0, r1}
   149bc:	b	148b0 <__assert_fail@plt+0x38fc>
   149c0:	muleq	r2, r4, r1
   149c4:	andeq	sl, r2, r0, lsl #2
   149c8:	andeq	sl, r2, r4, asr #3
   149cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149d0:	mov	r4, r1
   149d4:	ldr	lr, [pc, #420]	; 14b80 <__assert_fail@plt+0x3bcc>
   149d8:	mov	r6, r0
   149dc:	sub	sp, sp, #84	; 0x54
   149e0:	ldm	lr!, {r0, r1, r2, r3}
   149e4:	add	ip, sp, #32
   149e8:	lsr	r8, r4, #5
   149ec:	add	r5, sp, #40	; 0x28
   149f0:	stmia	ip!, {r0, r1, r2, r3}
   149f4:	and	r4, r4, #31
   149f8:	ldm	lr!, {r0, r1, r2, r3}
   149fc:	ldr	r7, [pc, #384]	; 14b84 <__assert_fail@plt+0x3bd0>
   14a00:	stmia	ip!, {r0, r1, r2, r3}
   14a04:	ldm	lr, {r0, r1, r2, r3}
   14a08:	stm	ip, {r0, r1, r2, r3}
   14a0c:	ldr	r2, [r5, r8, lsl #2]
   14a10:	lsr	r3, r2, r4
   14a14:	eor	r3, r3, #1
   14a18:	and	r3, r3, #1
   14a1c:	eor	r4, r2, r3, lsl r4
   14a20:	str	r4, [r5, r8, lsl #2]
   14a24:	bl	10edc <__errno_location@plt>
   14a28:	ldr	r2, [r7, #4]
   14a2c:	ldr	r4, [r7]
   14a30:	cmp	r2, #0
   14a34:	mov	r9, r0
   14a38:	ldr	sl, [r0]
   14a3c:	bgt	14a98 <__assert_fail@plt+0x3ae4>
   14a40:	add	r8, r7, #8
   14a44:	cmp	r4, r8
   14a48:	str	r2, [sp, #28]
   14a4c:	beq	14b50 <__assert_fail@plt+0x3b9c>
   14a50:	mov	r3, #8
   14a54:	mov	r0, r4
   14a58:	str	r3, [sp]
   14a5c:	rsb	r2, r2, #1
   14a60:	mvn	r3, #-2147483648	; 0x80000000
   14a64:	add	r1, sp, #28
   14a68:	bl	16bec <__assert_fail@plt+0x5c38>
   14a6c:	mov	r4, r0
   14a70:	str	r0, [r7]
   14a74:	ldr	r0, [r7, #4]
   14a78:	ldr	r2, [sp, #28]
   14a7c:	mov	r1, #0
   14a80:	sub	r2, r2, r0
   14a84:	add	r0, r4, r0, lsl #3
   14a88:	lsl	r2, r2, #3
   14a8c:	bl	10ef4 <memset@plt>
   14a90:	ldr	r3, [sp, #28]
   14a94:	str	r3, [r7, #4]
   14a98:	ldr	r8, [sp, #36]	; 0x24
   14a9c:	ldr	fp, [r4]
   14aa0:	ldr	r7, [r4, #4]
   14aa4:	ldr	r2, [sp, #72]	; 0x48
   14aa8:	ldr	r3, [sp, #32]
   14aac:	ldr	ip, [sp, #76]	; 0x4c
   14ab0:	orr	r8, r8, #1
   14ab4:	str	r2, [sp, #12]
   14ab8:	str	r3, [sp]
   14abc:	str	r8, [sp, #4]
   14ac0:	str	r5, [sp, #8]
   14ac4:	mov	r1, fp
   14ac8:	mov	r0, r7
   14acc:	str	ip, [sp, #16]
   14ad0:	mvn	r3, #0
   14ad4:	mov	r2, r6
   14ad8:	bl	120f4 <__assert_fail@plt+0x1140>
   14adc:	cmp	fp, r0
   14ae0:	bhi	14b40 <__assert_fail@plt+0x3b8c>
   14ae4:	ldr	r3, [pc, #156]	; 14b88 <__assert_fail@plt+0x3bd4>
   14ae8:	add	fp, r0, #1
   14aec:	cmp	r7, r3
   14af0:	str	fp, [r4]
   14af4:	beq	14b00 <__assert_fail@plt+0x3b4c>
   14af8:	mov	r0, r7
   14afc:	bl	11ec8 <__assert_fail@plt+0xf14>
   14b00:	mov	r0, fp
   14b04:	bl	169d0 <__assert_fail@plt+0x5a1c>
   14b08:	ldr	lr, [sp, #76]	; 0x4c
   14b0c:	ldr	r3, [sp, #32]
   14b10:	ldr	ip, [sp, #72]	; 0x48
   14b14:	mov	r2, r6
   14b18:	mov	r1, fp
   14b1c:	str	r0, [r4, #4]
   14b20:	str	r3, [sp]
   14b24:	str	r5, [sp, #8]
   14b28:	str	r8, [sp, #4]
   14b2c:	str	lr, [sp, #16]
   14b30:	str	ip, [sp, #12]
   14b34:	mvn	r3, #0
   14b38:	mov	r7, r0
   14b3c:	bl	120f4 <__assert_fail@plt+0x1140>
   14b40:	mov	r0, r7
   14b44:	str	sl, [r9]
   14b48:	add	sp, sp, #84	; 0x54
   14b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b50:	mov	r3, #8
   14b54:	str	r3, [sp]
   14b58:	add	r1, sp, #28
   14b5c:	rsb	r2, r2, #1
   14b60:	mvn	r3, #-2147483648	; 0x80000000
   14b64:	mov	r0, #0
   14b68:	bl	16bec <__assert_fail@plt+0x5c38>
   14b6c:	mov	r4, r0
   14b70:	ldm	r8, {r0, r1}
   14b74:	str	r4, [r7]
   14b78:	stm	r4, {r0, r1}
   14b7c:	b	14a74 <__assert_fail@plt+0x3ac0>
   14b80:	muleq	r2, r4, r1
   14b84:	andeq	sl, r2, r0, lsl #2
   14b88:	andeq	sl, r2, r4, asr #3
   14b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b90:	mov	r6, r0
   14b94:	ldr	lr, [pc, #404]	; 14d30 <__assert_fail@plt+0x3d7c>
   14b98:	sub	sp, sp, #84	; 0x54
   14b9c:	add	ip, sp, #32
   14ba0:	ldm	lr!, {r0, r1, r2, r3}
   14ba4:	ldr	r5, [pc, #392]	; 14d34 <__assert_fail@plt+0x3d80>
   14ba8:	stmia	ip!, {r0, r1, r2, r3}
   14bac:	ldm	lr!, {r0, r1, r2, r3}
   14bb0:	ldr	r4, [sp, #44]	; 0x2c
   14bb4:	stmia	ip!, {r0, r1, r2, r3}
   14bb8:	ldm	lr, {r0, r1, r2, r3}
   14bbc:	mvn	lr, r4
   14bc0:	and	lr, lr, #67108864	; 0x4000000
   14bc4:	eor	lr, lr, r4
   14bc8:	stm	ip, {r0, r1, r2, r3}
   14bcc:	str	lr, [sp, #44]	; 0x2c
   14bd0:	bl	10edc <__errno_location@plt>
   14bd4:	ldr	r2, [r5, #4]
   14bd8:	ldr	r4, [r5]
   14bdc:	cmp	r2, #0
   14be0:	mov	r8, r0
   14be4:	ldr	sl, [r0]
   14be8:	bgt	14c44 <__assert_fail@plt+0x3c90>
   14bec:	add	r7, r5, #8
   14bf0:	cmp	r4, r7
   14bf4:	str	r2, [sp, #28]
   14bf8:	beq	14d00 <__assert_fail@plt+0x3d4c>
   14bfc:	mov	r3, #8
   14c00:	mov	r0, r4
   14c04:	str	r3, [sp]
   14c08:	rsb	r2, r2, #1
   14c0c:	mvn	r3, #-2147483648	; 0x80000000
   14c10:	add	r1, sp, #28
   14c14:	bl	16bec <__assert_fail@plt+0x5c38>
   14c18:	mov	r4, r0
   14c1c:	str	r0, [r5]
   14c20:	ldr	r0, [r5, #4]
   14c24:	ldr	r2, [sp, #28]
   14c28:	mov	r1, #0
   14c2c:	sub	r2, r2, r0
   14c30:	add	r0, r4, r0, lsl #3
   14c34:	lsl	r2, r2, #3
   14c38:	bl	10ef4 <memset@plt>
   14c3c:	ldr	r3, [sp, #28]
   14c40:	str	r3, [r5, #4]
   14c44:	ldr	r7, [sp, #36]	; 0x24
   14c48:	ldr	r9, [r4]
   14c4c:	ldr	r5, [r4, #4]
   14c50:	ldr	r2, [sp, #72]	; 0x48
   14c54:	ldr	r3, [sp, #32]
   14c58:	ldr	ip, [sp, #76]	; 0x4c
   14c5c:	orr	r7, r7, #1
   14c60:	add	fp, sp, #40	; 0x28
   14c64:	str	r2, [sp, #12]
   14c68:	str	r3, [sp]
   14c6c:	str	r7, [sp, #4]
   14c70:	mov	r1, r9
   14c74:	mov	r0, r5
   14c78:	str	ip, [sp, #16]
   14c7c:	str	fp, [sp, #8]
   14c80:	mvn	r3, #0
   14c84:	mov	r2, r6
   14c88:	bl	120f4 <__assert_fail@plt+0x1140>
   14c8c:	cmp	r9, r0
   14c90:	bhi	14cf0 <__assert_fail@plt+0x3d3c>
   14c94:	ldr	r3, [pc, #156]	; 14d38 <__assert_fail@plt+0x3d84>
   14c98:	add	r9, r0, #1
   14c9c:	cmp	r5, r3
   14ca0:	str	r9, [r4]
   14ca4:	beq	14cb0 <__assert_fail@plt+0x3cfc>
   14ca8:	mov	r0, r5
   14cac:	bl	11ec8 <__assert_fail@plt+0xf14>
   14cb0:	mov	r0, r9
   14cb4:	bl	169d0 <__assert_fail@plt+0x5a1c>
   14cb8:	ldr	lr, [sp, #76]	; 0x4c
   14cbc:	ldr	r3, [sp, #32]
   14cc0:	ldr	ip, [sp, #72]	; 0x48
   14cc4:	mov	r2, r6
   14cc8:	mov	r1, r9
   14ccc:	str	r0, [r4, #4]
   14cd0:	str	r3, [sp]
   14cd4:	str	fp, [sp, #8]
   14cd8:	str	r7, [sp, #4]
   14cdc:	str	lr, [sp, #16]
   14ce0:	str	ip, [sp, #12]
   14ce4:	mvn	r3, #0
   14ce8:	mov	r5, r0
   14cec:	bl	120f4 <__assert_fail@plt+0x1140>
   14cf0:	mov	r0, r5
   14cf4:	str	sl, [r8]
   14cf8:	add	sp, sp, #84	; 0x54
   14cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d00:	mov	r3, #8
   14d04:	str	r3, [sp]
   14d08:	add	r1, sp, #28
   14d0c:	rsb	r2, r2, #1
   14d10:	mvn	r3, #-2147483648	; 0x80000000
   14d14:	mov	r0, #0
   14d18:	bl	16bec <__assert_fail@plt+0x5c38>
   14d1c:	mov	r4, r0
   14d20:	ldm	r7, {r0, r1}
   14d24:	str	r4, [r5]
   14d28:	stm	r4, {r0, r1}
   14d2c:	b	14c20 <__assert_fail@plt+0x3c6c>
   14d30:	muleq	r2, r4, r1
   14d34:	andeq	sl, r2, r0, lsl #2
   14d38:	andeq	sl, r2, r4, asr #3
   14d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d40:	mov	r9, r0
   14d44:	ldr	lr, [pc, #416]	; 14eec <__assert_fail@plt+0x3f38>
   14d48:	mov	sl, r1
   14d4c:	sub	sp, sp, #92	; 0x5c
   14d50:	ldm	lr!, {r0, r1, r2, r3}
   14d54:	add	ip, sp, #40	; 0x28
   14d58:	ldr	r5, [pc, #400]	; 14ef0 <__assert_fail@plt+0x3f3c>
   14d5c:	stmia	ip!, {r0, r1, r2, r3}
   14d60:	ldm	lr!, {r0, r1, r2, r3}
   14d64:	ldr	r4, [sp, #52]	; 0x34
   14d68:	stmia	ip!, {r0, r1, r2, r3}
   14d6c:	ldm	lr, {r0, r1, r2, r3}
   14d70:	mvn	lr, r4
   14d74:	and	lr, lr, #67108864	; 0x4000000
   14d78:	eor	lr, lr, r4
   14d7c:	stm	ip, {r0, r1, r2, r3}
   14d80:	str	lr, [sp, #52]	; 0x34
   14d84:	bl	10edc <__errno_location@plt>
   14d88:	ldr	r2, [r5, #4]
   14d8c:	ldr	r4, [r5]
   14d90:	cmp	r2, #0
   14d94:	ldr	r3, [r0]
   14d98:	mov	r7, r0
   14d9c:	str	r3, [sp, #28]
   14da0:	bgt	14dfc <__assert_fail@plt+0x3e48>
   14da4:	add	r6, r5, #8
   14da8:	cmp	r4, r6
   14dac:	str	r2, [sp, #36]	; 0x24
   14db0:	beq	14ebc <__assert_fail@plt+0x3f08>
   14db4:	mov	r3, #8
   14db8:	mov	r0, r4
   14dbc:	str	r3, [sp]
   14dc0:	rsb	r2, r2, #1
   14dc4:	mvn	r3, #-2147483648	; 0x80000000
   14dc8:	add	r1, sp, #36	; 0x24
   14dcc:	bl	16bec <__assert_fail@plt+0x5c38>
   14dd0:	mov	r4, r0
   14dd4:	str	r0, [r5]
   14dd8:	ldr	r0, [r5, #4]
   14ddc:	ldr	r2, [sp, #36]	; 0x24
   14de0:	mov	r1, #0
   14de4:	sub	r2, r2, r0
   14de8:	add	r0, r4, r0, lsl #3
   14dec:	lsl	r2, r2, #3
   14df0:	bl	10ef4 <memset@plt>
   14df4:	ldr	r3, [sp, #36]	; 0x24
   14df8:	str	r3, [r5, #4]
   14dfc:	ldr	r6, [sp, #44]	; 0x2c
   14e00:	ldr	r8, [r4]
   14e04:	ldr	r5, [r4, #4]
   14e08:	ldr	r2, [sp, #80]	; 0x50
   14e0c:	ldr	r3, [sp, #40]	; 0x28
   14e10:	ldr	ip, [sp, #84]	; 0x54
   14e14:	orr	r6, r6, #1
   14e18:	add	fp, sp, #48	; 0x30
   14e1c:	str	r2, [sp, #12]
   14e20:	str	r3, [sp]
   14e24:	str	r6, [sp, #4]
   14e28:	mov	r1, r8
   14e2c:	mov	r0, r5
   14e30:	str	ip, [sp, #16]
   14e34:	str	fp, [sp, #8]
   14e38:	mov	r3, sl
   14e3c:	mov	r2, r9
   14e40:	bl	120f4 <__assert_fail@plt+0x1140>
   14e44:	cmp	r8, r0
   14e48:	bhi	14ea8 <__assert_fail@plt+0x3ef4>
   14e4c:	ldr	r3, [pc, #160]	; 14ef4 <__assert_fail@plt+0x3f40>
   14e50:	add	r8, r0, #1
   14e54:	cmp	r5, r3
   14e58:	str	r8, [r4]
   14e5c:	beq	14e68 <__assert_fail@plt+0x3eb4>
   14e60:	mov	r0, r5
   14e64:	bl	11ec8 <__assert_fail@plt+0xf14>
   14e68:	mov	r0, r8
   14e6c:	bl	169d0 <__assert_fail@plt+0x5a1c>
   14e70:	ldr	ip, [sp, #84]	; 0x54
   14e74:	ldr	lr, [sp, #40]	; 0x28
   14e78:	mov	r3, sl
   14e7c:	mov	r2, r9
   14e80:	mov	r1, r8
   14e84:	str	r0, [r4, #4]
   14e88:	ldr	r4, [sp, #80]	; 0x50
   14e8c:	str	fp, [sp, #8]
   14e90:	str	r6, [sp, #4]
   14e94:	str	ip, [sp, #16]
   14e98:	str	r4, [sp, #12]
   14e9c:	str	lr, [sp]
   14ea0:	mov	r5, r0
   14ea4:	bl	120f4 <__assert_fail@plt+0x1140>
   14ea8:	ldr	r3, [sp, #28]
   14eac:	mov	r0, r5
   14eb0:	str	r3, [r7]
   14eb4:	add	sp, sp, #92	; 0x5c
   14eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ebc:	mov	r3, #8
   14ec0:	str	r3, [sp]
   14ec4:	add	r1, sp, #36	; 0x24
   14ec8:	rsb	r2, r2, #1
   14ecc:	mvn	r3, #-2147483648	; 0x80000000
   14ed0:	mov	r0, #0
   14ed4:	bl	16bec <__assert_fail@plt+0x5c38>
   14ed8:	mov	r4, r0
   14edc:	ldm	r6, {r0, r1}
   14ee0:	str	r4, [r5]
   14ee4:	stm	r4, {r0, r1}
   14ee8:	b	14dd8 <__assert_fail@plt+0x3e24>
   14eec:	muleq	r2, r4, r1
   14ef0:	andeq	sl, r2, r0, lsl #2
   14ef4:	andeq	sl, r2, r4, asr #3
   14ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14efc:	sub	sp, sp, #180	; 0xb4
   14f00:	mov	r6, r1
   14f04:	mov	r4, r0
   14f08:	mov	r9, r2
   14f0c:	add	r0, sp, #80	; 0x50
   14f10:	mov	r2, #48	; 0x30
   14f14:	mov	r1, #0
   14f18:	bl	10ef4 <memset@plt>
   14f1c:	cmp	r6, #10
   14f20:	beq	15100 <__assert_fail@plt+0x414c>
   14f24:	add	r5, sp, #80	; 0x50
   14f28:	str	r6, [sp, #80]	; 0x50
   14f2c:	ldm	r5!, {r0, r1, r2, r3}
   14f30:	add	ip, sp, #128	; 0x80
   14f34:	mov	r7, ip
   14f38:	add	lr, sp, #32
   14f3c:	stmia	ip!, {r0, r1, r2, r3}
   14f40:	mov	r8, #67108864	; 0x4000000
   14f44:	ldm	r5!, {r0, r1, r2, r3}
   14f48:	ldr	r6, [pc, #436]	; 15104 <__assert_fail@plt+0x4150>
   14f4c:	stmia	ip!, {r0, r1, r2, r3}
   14f50:	ldm	r5, {r0, r1, r2, r3}
   14f54:	stm	ip, {r0, r1, r2, r3}
   14f58:	ldm	r7!, {r0, r1, r2, r3}
   14f5c:	stmia	lr!, {r0, r1, r2, r3}
   14f60:	ldm	r7!, {r0, r1, r2, r3}
   14f64:	str	r8, [sp, #44]	; 0x2c
   14f68:	stmia	lr!, {r0, r1, r2, r3}
   14f6c:	ldm	ip, {r0, r1, r2, r3}
   14f70:	stm	lr, {r0, r1, r2, r3}
   14f74:	bl	10edc <__errno_location@plt>
   14f78:	cmn	r4, #-2147483647	; 0x80000001
   14f7c:	ldr	r5, [r6]
   14f80:	mov	r7, r0
   14f84:	movne	r0, #0
   14f88:	moveq	r0, #1
   14f8c:	ldr	r3, [r7]
   14f90:	orrs	r0, r0, r4, lsr #31
   14f94:	str	r3, [sp, #24]
   14f98:	bne	15100 <__assert_fail@plt+0x414c>
   14f9c:	ldr	r2, [r6, #4]
   14fa0:	cmp	r4, r2
   14fa4:	blt	15004 <__assert_fail@plt+0x4050>
   14fa8:	add	r8, r6, #8
   14fac:	cmp	r5, r8
   14fb0:	str	r2, [sp, #80]	; 0x50
   14fb4:	beq	150d0 <__assert_fail@plt+0x411c>
   14fb8:	mov	r3, #8
   14fbc:	sub	r2, r4, r2
   14fc0:	mov	r0, r5
   14fc4:	str	r3, [sp]
   14fc8:	add	r2, r2, #1
   14fcc:	add	r1, sp, #80	; 0x50
   14fd0:	mvn	r3, #-2147483648	; 0x80000000
   14fd4:	bl	16bec <__assert_fail@plt+0x5c38>
   14fd8:	mov	r5, r0
   14fdc:	str	r0, [r6]
   14fe0:	ldr	r0, [r6, #4]
   14fe4:	ldr	r2, [sp, #80]	; 0x50
   14fe8:	mov	r1, #0
   14fec:	sub	r2, r2, r0
   14ff0:	add	r0, r5, r0, lsl #3
   14ff4:	lsl	r2, r2, #3
   14ff8:	bl	10ef4 <memset@plt>
   14ffc:	ldr	r3, [sp, #80]	; 0x50
   15000:	str	r3, [r6, #4]
   15004:	add	fp, r5, r4, lsl #3
   15008:	ldr	r1, [sp, #36]	; 0x24
   1500c:	ldr	r8, [r5, r4, lsl #3]
   15010:	ldr	r6, [fp, #4]
   15014:	ldr	r2, [sp, #72]	; 0x48
   15018:	ldr	r3, [sp, #32]
   1501c:	ldr	ip, [sp, #76]	; 0x4c
   15020:	orr	r1, r1, #1
   15024:	add	sl, sp, #40	; 0x28
   15028:	str	r1, [sp, #28]
   1502c:	str	r1, [sp, #4]
   15030:	str	r2, [sp, #12]
   15034:	str	r3, [sp]
   15038:	mov	r0, r6
   1503c:	mov	r1, r8
   15040:	str	ip, [sp, #16]
   15044:	str	sl, [sp, #8]
   15048:	mvn	r3, #0
   1504c:	mov	r2, r9
   15050:	bl	120f4 <__assert_fail@plt+0x1140>
   15054:	cmp	r8, r0
   15058:	bhi	150bc <__assert_fail@plt+0x4108>
   1505c:	ldr	r3, [pc, #164]	; 15108 <__assert_fail@plt+0x4154>
   15060:	add	r8, r0, #1
   15064:	cmp	r6, r3
   15068:	str	r8, [r5, r4, lsl #3]
   1506c:	beq	15078 <__assert_fail@plt+0x40c4>
   15070:	mov	r0, r6
   15074:	bl	11ec8 <__assert_fail@plt+0xf14>
   15078:	mov	r0, r8
   1507c:	bl	169d0 <__assert_fail@plt+0x5a1c>
   15080:	ldr	lr, [sp, #76]	; 0x4c
   15084:	ldr	r3, [sp, #32]
   15088:	ldr	ip, [sp, #72]	; 0x48
   1508c:	ldr	r4, [sp, #28]
   15090:	mov	r2, r9
   15094:	mov	r1, r8
   15098:	str	r0, [fp, #4]
   1509c:	str	r3, [sp]
   150a0:	str	sl, [sp, #8]
   150a4:	str	r4, [sp, #4]
   150a8:	str	lr, [sp, #16]
   150ac:	str	ip, [sp, #12]
   150b0:	mvn	r3, #0
   150b4:	mov	r6, r0
   150b8:	bl	120f4 <__assert_fail@plt+0x1140>
   150bc:	ldr	r3, [sp, #24]
   150c0:	mov	r0, r6
   150c4:	str	r3, [r7]
   150c8:	add	sp, sp, #180	; 0xb4
   150cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150d0:	mov	r3, #8
   150d4:	sub	r2, r4, r2
   150d8:	add	r1, sp, #80	; 0x50
   150dc:	str	r3, [sp]
   150e0:	add	r2, r2, #1
   150e4:	mvn	r3, #-2147483648	; 0x80000000
   150e8:	bl	16bec <__assert_fail@plt+0x5c38>
   150ec:	mov	r5, r0
   150f0:	ldm	r8, {r0, r1}
   150f4:	str	r5, [r6]
   150f8:	stm	r5, {r0, r1}
   150fc:	b	14fe0 <__assert_fail@plt+0x402c>
   15100:	bl	10fa8 <abort@plt>
   15104:	andeq	sl, r2, r0, lsl #2
   15108:	andeq	sl, r2, r4, asr #3
   1510c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15110:	mov	r7, r1
   15114:	ldr	lr, [pc, #492]	; 15308 <__assert_fail@plt+0x4354>
   15118:	mov	r8, r2
   1511c:	mov	r4, r0
   15120:	mov	fp, r3
   15124:	ldm	lr!, {r0, r1, r2, r3}
   15128:	sub	sp, sp, #100	; 0x64
   1512c:	add	ip, sp, #48	; 0x30
   15130:	mov	sl, #10
   15134:	stmia	ip!, {r0, r1, r2, r3}
   15138:	cmp	r8, #0
   1513c:	cmpne	r7, #0
   15140:	ldm	lr!, {r0, r1, r2, r3}
   15144:	str	sl, [sp, #48]	; 0x30
   15148:	stmia	ip!, {r0, r1, r2, r3}
   1514c:	ldm	lr, {r0, r1, r2, r3}
   15150:	stm	ip, {r0, r1, r2, r3}
   15154:	beq	15304 <__assert_fail@plt+0x4350>
   15158:	str	r7, [sp, #88]	; 0x58
   1515c:	str	r8, [sp, #92]	; 0x5c
   15160:	bl	10edc <__errno_location@plt>
   15164:	ldr	r6, [pc, #416]	; 1530c <__assert_fail@plt+0x4358>
   15168:	cmn	r4, #-2147483647	; 0x80000001
   1516c:	ldr	r5, [r6]
   15170:	mov	r9, r0
   15174:	movne	r0, #0
   15178:	moveq	r0, #1
   1517c:	ldr	r3, [r9]
   15180:	orrs	r0, r0, r4, lsr #31
   15184:	str	r3, [sp, #28]
   15188:	bne	15304 <__assert_fail@plt+0x4350>
   1518c:	ldr	r2, [r6, #4]
   15190:	cmp	r4, r2
   15194:	movlt	r3, sl
   15198:	blt	15204 <__assert_fail@plt+0x4250>
   1519c:	add	r7, r6, #8
   151a0:	cmp	r5, r7
   151a4:	str	r2, [sp, #44]	; 0x2c
   151a8:	beq	152d4 <__assert_fail@plt+0x4320>
   151ac:	mov	r3, #8
   151b0:	sub	r2, r4, r2
   151b4:	mov	r0, r5
   151b8:	str	r3, [sp]
   151bc:	add	r2, r2, #1
   151c0:	mvn	r3, #-2147483648	; 0x80000000
   151c4:	add	r1, sp, #44	; 0x2c
   151c8:	bl	16bec <__assert_fail@plt+0x5c38>
   151cc:	mov	r5, r0
   151d0:	str	r0, [r6]
   151d4:	ldr	r0, [r6, #4]
   151d8:	ldr	r2, [sp, #44]	; 0x2c
   151dc:	mov	r1, #0
   151e0:	sub	r2, r2, r0
   151e4:	add	r0, r5, r0, lsl #3
   151e8:	lsl	r2, r2, #3
   151ec:	bl	10ef4 <memset@plt>
   151f0:	ldr	r3, [sp, #48]	; 0x30
   151f4:	ldr	r7, [sp, #88]	; 0x58
   151f8:	ldr	r8, [sp, #92]	; 0x5c
   151fc:	ldr	r2, [sp, #44]	; 0x2c
   15200:	str	r2, [r6, #4]
   15204:	add	r2, r5, r4, lsl #3
   15208:	mov	r1, r2
   1520c:	str	r2, [sp, #32]
   15210:	ldr	r2, [sp, #52]	; 0x34
   15214:	ldr	r6, [r1, #4]
   15218:	ldr	sl, [r5, r4, lsl #3]
   1521c:	orr	r2, r2, #1
   15220:	str	r3, [sp]
   15224:	add	r3, sp, #56	; 0x38
   15228:	str	r2, [sp, #36]	; 0x24
   1522c:	str	r2, [sp, #4]
   15230:	str	r3, [sp, #8]
   15234:	mov	r0, r6
   15238:	str	r8, [sp, #16]
   1523c:	str	r7, [sp, #12]
   15240:	mov	r1, sl
   15244:	mvn	r3, #0
   15248:	mov	r2, fp
   1524c:	bl	120f4 <__assert_fail@plt+0x1140>
   15250:	cmp	sl, r0
   15254:	bhi	152c0 <__assert_fail@plt+0x430c>
   15258:	ldr	r3, [pc, #176]	; 15310 <__assert_fail@plt+0x435c>
   1525c:	add	r7, r0, #1
   15260:	cmp	r6, r3
   15264:	str	r7, [r5, r4, lsl #3]
   15268:	beq	15274 <__assert_fail@plt+0x42c0>
   1526c:	mov	r0, r6
   15270:	bl	11ec8 <__assert_fail@plt+0xf14>
   15274:	mov	r0, r7
   15278:	bl	169d0 <__assert_fail@plt+0x5a1c>
   1527c:	ldr	r3, [sp, #32]
   15280:	ldr	lr, [sp, #92]	; 0x5c
   15284:	ldr	ip, [sp, #88]	; 0x58
   15288:	ldr	r4, [sp, #36]	; 0x24
   1528c:	mov	r2, fp
   15290:	mov	r1, r7
   15294:	str	r0, [r3, #4]
   15298:	add	r3, sp, #56	; 0x38
   1529c:	str	r3, [sp, #8]
   152a0:	ldr	r3, [sp, #48]	; 0x30
   152a4:	str	r4, [sp, #4]
   152a8:	str	r3, [sp]
   152ac:	str	lr, [sp, #16]
   152b0:	str	ip, [sp, #12]
   152b4:	mvn	r3, #0
   152b8:	mov	r6, r0
   152bc:	bl	120f4 <__assert_fail@plt+0x1140>
   152c0:	ldr	r3, [sp, #28]
   152c4:	mov	r0, r6
   152c8:	str	r3, [r9]
   152cc:	add	sp, sp, #100	; 0x64
   152d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152d4:	mov	r3, #8
   152d8:	sub	r2, r4, r2
   152dc:	str	r3, [sp]
   152e0:	add	r1, sp, #44	; 0x2c
   152e4:	add	r2, r2, #1
   152e8:	mvn	r3, #-2147483648	; 0x80000000
   152ec:	bl	16bec <__assert_fail@plt+0x5c38>
   152f0:	mov	r5, r0
   152f4:	ldm	r7, {r0, r1}
   152f8:	str	r5, [r6]
   152fc:	stm	r5, {r0, r1}
   15300:	b	151d4 <__assert_fail@plt+0x4220>
   15304:	bl	10fa8 <abort@plt>
   15308:	muleq	r2, r4, r1
   1530c:	andeq	sl, r2, r0, lsl #2
   15310:	andeq	sl, r2, r4, asr #3
   15314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15318:	mov	r7, r1
   1531c:	ldr	lr, [pc, #492]	; 15510 <__assert_fail@plt+0x455c>
   15320:	mov	r8, r2
   15324:	mov	r4, r0
   15328:	mov	fp, r3
   1532c:	ldm	lr!, {r0, r1, r2, r3}
   15330:	sub	sp, sp, #100	; 0x64
   15334:	add	ip, sp, #48	; 0x30
   15338:	mov	sl, #10
   1533c:	stmia	ip!, {r0, r1, r2, r3}
   15340:	cmp	r8, #0
   15344:	cmpne	r7, #0
   15348:	ldm	lr!, {r0, r1, r2, r3}
   1534c:	str	sl, [sp, #48]	; 0x30
   15350:	stmia	ip!, {r0, r1, r2, r3}
   15354:	ldm	lr, {r0, r1, r2, r3}
   15358:	stm	ip, {r0, r1, r2, r3}
   1535c:	beq	1550c <__assert_fail@plt+0x4558>
   15360:	str	r7, [sp, #88]	; 0x58
   15364:	str	r8, [sp, #92]	; 0x5c
   15368:	bl	10edc <__errno_location@plt>
   1536c:	ldr	r6, [pc, #416]	; 15514 <__assert_fail@plt+0x4560>
   15370:	cmn	r4, #-2147483647	; 0x80000001
   15374:	ldr	r5, [r6]
   15378:	mov	r9, r0
   1537c:	movne	r0, #0
   15380:	moveq	r0, #1
   15384:	ldr	r3, [r9]
   15388:	orrs	r0, r0, r4, lsr #31
   1538c:	str	r3, [sp, #28]
   15390:	bne	1550c <__assert_fail@plt+0x4558>
   15394:	ldr	r2, [r6, #4]
   15398:	cmp	r4, r2
   1539c:	movlt	r3, sl
   153a0:	blt	1540c <__assert_fail@plt+0x4458>
   153a4:	add	r7, r6, #8
   153a8:	cmp	r5, r7
   153ac:	str	r2, [sp, #44]	; 0x2c
   153b0:	beq	154dc <__assert_fail@plt+0x4528>
   153b4:	mov	r3, #8
   153b8:	sub	r2, r4, r2
   153bc:	mov	r0, r5
   153c0:	str	r3, [sp]
   153c4:	add	r2, r2, #1
   153c8:	mvn	r3, #-2147483648	; 0x80000000
   153cc:	add	r1, sp, #44	; 0x2c
   153d0:	bl	16bec <__assert_fail@plt+0x5c38>
   153d4:	mov	r5, r0
   153d8:	str	r0, [r6]
   153dc:	ldr	r0, [r6, #4]
   153e0:	ldr	r2, [sp, #44]	; 0x2c
   153e4:	mov	r1, #0
   153e8:	sub	r2, r2, r0
   153ec:	add	r0, r5, r0, lsl #3
   153f0:	lsl	r2, r2, #3
   153f4:	bl	10ef4 <memset@plt>
   153f8:	ldr	r3, [sp, #48]	; 0x30
   153fc:	ldr	r7, [sp, #88]	; 0x58
   15400:	ldr	r8, [sp, #92]	; 0x5c
   15404:	ldr	r2, [sp, #44]	; 0x2c
   15408:	str	r2, [r6, #4]
   1540c:	add	r2, r5, r4, lsl #3
   15410:	mov	r1, r2
   15414:	str	r2, [sp, #32]
   15418:	ldr	r2, [sp, #52]	; 0x34
   1541c:	ldr	r6, [r1, #4]
   15420:	ldr	sl, [r5, r4, lsl #3]
   15424:	orr	r2, r2, #1
   15428:	str	r3, [sp]
   1542c:	add	r3, sp, #56	; 0x38
   15430:	str	r2, [sp, #36]	; 0x24
   15434:	str	r2, [sp, #4]
   15438:	str	r3, [sp, #8]
   1543c:	mov	r0, r6
   15440:	str	r8, [sp, #16]
   15444:	str	r7, [sp, #12]
   15448:	mov	r1, sl
   1544c:	ldr	r3, [sp, #136]	; 0x88
   15450:	mov	r2, fp
   15454:	bl	120f4 <__assert_fail@plt+0x1140>
   15458:	cmp	sl, r0
   1545c:	bhi	154c8 <__assert_fail@plt+0x4514>
   15460:	ldr	r3, [pc, #176]	; 15518 <__assert_fail@plt+0x4564>
   15464:	add	r7, r0, #1
   15468:	cmp	r6, r3
   1546c:	str	r7, [r5, r4, lsl #3]
   15470:	beq	1547c <__assert_fail@plt+0x44c8>
   15474:	mov	r0, r6
   15478:	bl	11ec8 <__assert_fail@plt+0xf14>
   1547c:	mov	r0, r7
   15480:	bl	169d0 <__assert_fail@plt+0x5a1c>
   15484:	ldr	r3, [sp, #32]
   15488:	ldr	lr, [sp, #92]	; 0x5c
   1548c:	ldr	ip, [sp, #88]	; 0x58
   15490:	ldr	r4, [sp, #36]	; 0x24
   15494:	mov	r2, fp
   15498:	mov	r1, r7
   1549c:	str	r0, [r3, #4]
   154a0:	add	r3, sp, #56	; 0x38
   154a4:	str	r3, [sp, #8]
   154a8:	ldr	r3, [sp, #48]	; 0x30
   154ac:	str	r4, [sp, #4]
   154b0:	str	r3, [sp]
   154b4:	str	lr, [sp, #16]
   154b8:	str	ip, [sp, #12]
   154bc:	ldr	r3, [sp, #136]	; 0x88
   154c0:	mov	r6, r0
   154c4:	bl	120f4 <__assert_fail@plt+0x1140>
   154c8:	ldr	r3, [sp, #28]
   154cc:	mov	r0, r6
   154d0:	str	r3, [r9]
   154d4:	add	sp, sp, #100	; 0x64
   154d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154dc:	mov	r3, #8
   154e0:	sub	r2, r4, r2
   154e4:	str	r3, [sp]
   154e8:	add	r1, sp, #44	; 0x2c
   154ec:	add	r2, r2, #1
   154f0:	mvn	r3, #-2147483648	; 0x80000000
   154f4:	bl	16bec <__assert_fail@plt+0x5c38>
   154f8:	mov	r5, r0
   154fc:	ldm	r7, {r0, r1}
   15500:	str	r5, [r6]
   15504:	stm	r5, {r0, r1}
   15508:	b	153dc <__assert_fail@plt+0x4428>
   1550c:	bl	10fa8 <abort@plt>
   15510:	muleq	r2, r4, r1
   15514:	andeq	sl, r2, r0, lsl #2
   15518:	andeq	sl, r2, r4, asr #3
   1551c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15520:	mov	r5, r0
   15524:	ldr	lr, [pc, #452]	; 156f0 <__assert_fail@plt+0x473c>
   15528:	mov	r6, r1
   1552c:	mov	sl, r2
   15530:	ldm	lr!, {r0, r1, r2, r3}
   15534:	sub	sp, sp, #92	; 0x5c
   15538:	add	ip, sp, #40	; 0x28
   1553c:	cmp	r6, #0
   15540:	cmpne	r5, #0
   15544:	stmia	ip!, {r0, r1, r2, r3}
   15548:	mov	r9, #10
   1554c:	ldm	lr!, {r0, r1, r2, r3}
   15550:	moveq	fp, #1
   15554:	movne	fp, #0
   15558:	str	r9, [sp, #40]	; 0x28
   1555c:	stmia	ip!, {r0, r1, r2, r3}
   15560:	ldm	lr, {r0, r1, r2, r3}
   15564:	stm	ip, {r0, r1, r2, r3}
   15568:	beq	156ec <__assert_fail@plt+0x4738>
   1556c:	str	r5, [sp, #80]	; 0x50
   15570:	str	r6, [sp, #84]	; 0x54
   15574:	bl	10edc <__errno_location@plt>
   15578:	ldr	r7, [pc, #372]	; 156f4 <__assert_fail@plt+0x4740>
   1557c:	ldr	r2, [r7, #4]
   15580:	ldr	r4, [r7]
   15584:	cmp	r2, #0
   15588:	ldr	r3, [r0]
   1558c:	mov	r8, r0
   15590:	str	r3, [sp, #24]
   15594:	movgt	r3, r9
   15598:	bgt	15600 <__assert_fail@plt+0x464c>
   1559c:	add	r5, r7, #8
   155a0:	cmp	r4, r5
   155a4:	str	r2, [sp, #36]	; 0x24
   155a8:	beq	156bc <__assert_fail@plt+0x4708>
   155ac:	mov	r3, #8
   155b0:	mov	r0, r4
   155b4:	str	r3, [sp]
   155b8:	rsb	r2, r2, #1
   155bc:	mvn	r3, #-2147483648	; 0x80000000
   155c0:	add	r1, sp, #36	; 0x24
   155c4:	bl	16bec <__assert_fail@plt+0x5c38>
   155c8:	mov	r4, r0
   155cc:	str	r0, [r7]
   155d0:	ldr	r0, [r7, #4]
   155d4:	ldr	r2, [sp, #36]	; 0x24
   155d8:	mov	r1, #0
   155dc:	sub	r2, r2, r0
   155e0:	add	r0, r4, r0, lsl #3
   155e4:	lsl	r2, r2, #3
   155e8:	bl	10ef4 <memset@plt>
   155ec:	ldr	r3, [sp, #40]	; 0x28
   155f0:	ldr	r5, [sp, #80]	; 0x50
   155f4:	ldr	r6, [sp, #84]	; 0x54
   155f8:	ldr	r2, [sp, #36]	; 0x24
   155fc:	str	r2, [r7, #4]
   15600:	ldr	r2, [sp, #44]	; 0x2c
   15604:	ldr	r9, [r4]
   15608:	ldr	r7, [r4, #4]
   1560c:	orr	r2, r2, #1
   15610:	add	fp, sp, #48	; 0x30
   15614:	str	r2, [sp, #28]
   15618:	str	r2, [sp, #4]
   1561c:	str	r3, [sp]
   15620:	str	r6, [sp, #16]
   15624:	str	r5, [sp, #12]
   15628:	mov	r1, r9
   1562c:	mov	r0, r7
   15630:	str	fp, [sp, #8]
   15634:	mvn	r3, #0
   15638:	mov	r2, sl
   1563c:	bl	120f4 <__assert_fail@plt+0x1140>
   15640:	cmp	r9, r0
   15644:	bhi	156a8 <__assert_fail@plt+0x46f4>
   15648:	ldr	r3, [pc, #168]	; 156f8 <__assert_fail@plt+0x4744>
   1564c:	add	r5, r0, #1
   15650:	cmp	r7, r3
   15654:	str	r5, [r4]
   15658:	beq	15664 <__assert_fail@plt+0x46b0>
   1565c:	mov	r0, r7
   15660:	bl	11ec8 <__assert_fail@plt+0xf14>
   15664:	mov	r0, r5
   15668:	bl	169d0 <__assert_fail@plt+0x5a1c>
   1566c:	ldr	lr, [sp, #84]	; 0x54
   15670:	ldr	r3, [sp, #40]	; 0x28
   15674:	ldr	ip, [sp, #80]	; 0x50
   15678:	mov	r2, sl
   1567c:	mov	r1, r5
   15680:	str	r0, [r4, #4]
   15684:	ldr	r4, [sp, #28]
   15688:	str	r3, [sp]
   1568c:	str	fp, [sp, #8]
   15690:	str	r4, [sp, #4]
   15694:	str	lr, [sp, #16]
   15698:	str	ip, [sp, #12]
   1569c:	mvn	r3, #0
   156a0:	mov	r7, r0
   156a4:	bl	120f4 <__assert_fail@plt+0x1140>
   156a8:	ldr	r3, [sp, #24]
   156ac:	mov	r0, r7
   156b0:	str	r3, [r8]
   156b4:	add	sp, sp, #92	; 0x5c
   156b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156bc:	mov	r3, #8
   156c0:	str	r3, [sp]
   156c4:	add	r1, sp, #36	; 0x24
   156c8:	rsb	r2, r2, #1
   156cc:	mov	r0, fp
   156d0:	mvn	r3, #-2147483648	; 0x80000000
   156d4:	bl	16bec <__assert_fail@plt+0x5c38>
   156d8:	mov	r4, r0
   156dc:	ldm	r5, {r0, r1}
   156e0:	str	r4, [r7]
   156e4:	stm	r4, {r0, r1}
   156e8:	b	155d0 <__assert_fail@plt+0x461c>
   156ec:	bl	10fa8 <abort@plt>
   156f0:	muleq	r2, r4, r1
   156f4:	andeq	sl, r2, r0, lsl #2
   156f8:	andeq	sl, r2, r4, asr #3
   156fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15700:	mov	r5, r0
   15704:	ldr	lr, [pc, #464]	; 158dc <__assert_fail@plt+0x4928>
   15708:	mov	r6, r1
   1570c:	mov	sl, r2
   15710:	mov	fp, r3
   15714:	ldm	lr!, {r0, r1, r2, r3}
   15718:	sub	sp, sp, #92	; 0x5c
   1571c:	add	ip, sp, #40	; 0x28
   15720:	cmp	r6, #0
   15724:	cmpne	r5, #0
   15728:	stmia	ip!, {r0, r1, r2, r3}
   1572c:	moveq	r4, #1
   15730:	ldm	lr!, {r0, r1, r2, r3}
   15734:	movne	r4, #0
   15738:	mov	r9, #10
   1573c:	str	r4, [sp, #28]
   15740:	stmia	ip!, {r0, r1, r2, r3}
   15744:	ldm	lr, {r0, r1, r2, r3}
   15748:	str	r9, [sp, #40]	; 0x28
   1574c:	stm	ip, {r0, r1, r2, r3}
   15750:	beq	158d8 <__assert_fail@plt+0x4924>
   15754:	str	r5, [sp, #80]	; 0x50
   15758:	str	r6, [sp, #84]	; 0x54
   1575c:	bl	10edc <__errno_location@plt>
   15760:	ldr	r7, [pc, #376]	; 158e0 <__assert_fail@plt+0x492c>
   15764:	ldr	r2, [r7, #4]
   15768:	ldr	r4, [r7]
   1576c:	cmp	r2, #0
   15770:	ldr	r3, [r0]
   15774:	mov	r8, r0
   15778:	str	r3, [sp, #24]
   1577c:	movgt	r3, r9
   15780:	bgt	157e8 <__assert_fail@plt+0x4834>
   15784:	add	r5, r7, #8
   15788:	cmp	r4, r5
   1578c:	str	r2, [sp, #36]	; 0x24
   15790:	beq	158a8 <__assert_fail@plt+0x48f4>
   15794:	mov	r3, #8
   15798:	mov	r0, r4
   1579c:	str	r3, [sp]
   157a0:	rsb	r2, r2, #1
   157a4:	mvn	r3, #-2147483648	; 0x80000000
   157a8:	add	r1, sp, #36	; 0x24
   157ac:	bl	16bec <__assert_fail@plt+0x5c38>
   157b0:	mov	r4, r0
   157b4:	str	r0, [r7]
   157b8:	ldr	r0, [r7, #4]
   157bc:	ldr	r2, [sp, #36]	; 0x24
   157c0:	mov	r1, #0
   157c4:	sub	r2, r2, r0
   157c8:	add	r0, r4, r0, lsl #3
   157cc:	lsl	r2, r2, #3
   157d0:	bl	10ef4 <memset@plt>
   157d4:	ldr	r3, [sp, #40]	; 0x28
   157d8:	ldr	r5, [sp, #80]	; 0x50
   157dc:	ldr	r6, [sp, #84]	; 0x54
   157e0:	ldr	r2, [sp, #36]	; 0x24
   157e4:	str	r2, [r7, #4]
   157e8:	ldr	r2, [sp, #44]	; 0x2c
   157ec:	ldr	r9, [r4]
   157f0:	ldr	r7, [r4, #4]
   157f4:	orr	r2, r2, #1
   157f8:	str	r3, [sp]
   157fc:	add	r3, sp, #48	; 0x30
   15800:	str	r2, [sp, #28]
   15804:	str	r2, [sp, #4]
   15808:	str	r3, [sp, #8]
   1580c:	str	r6, [sp, #16]
   15810:	str	r5, [sp, #12]
   15814:	mov	r1, r9
   15818:	mov	r0, r7
   1581c:	mov	r3, fp
   15820:	mov	r2, sl
   15824:	bl	120f4 <__assert_fail@plt+0x1140>
   15828:	cmp	r9, r0
   1582c:	bhi	15894 <__assert_fail@plt+0x48e0>
   15830:	ldr	r3, [pc, #172]	; 158e4 <__assert_fail@plt+0x4930>
   15834:	add	r5, r0, #1
   15838:	cmp	r7, r3
   1583c:	str	r5, [r4]
   15840:	beq	1584c <__assert_fail@plt+0x4898>
   15844:	mov	r0, r7
   15848:	bl	11ec8 <__assert_fail@plt+0xf14>
   1584c:	mov	r0, r5
   15850:	bl	169d0 <__assert_fail@plt+0x5a1c>
   15854:	add	lr, sp, #48	; 0x30
   15858:	ldr	ip, [sp, #84]	; 0x54
   1585c:	mov	r1, r5
   15860:	ldr	r5, [sp, #28]
   15864:	mov	r3, fp
   15868:	mov	r2, sl
   1586c:	str	r0, [r4, #4]
   15870:	ldr	r4, [sp, #80]	; 0x50
   15874:	str	lr, [sp, #8]
   15878:	ldr	lr, [sp, #40]	; 0x28
   1587c:	str	r5, [sp, #4]
   15880:	str	ip, [sp, #16]
   15884:	str	r4, [sp, #12]
   15888:	str	lr, [sp]
   1588c:	mov	r7, r0
   15890:	bl	120f4 <__assert_fail@plt+0x1140>
   15894:	ldr	r3, [sp, #24]
   15898:	mov	r0, r7
   1589c:	str	r3, [r8]
   158a0:	add	sp, sp, #92	; 0x5c
   158a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158a8:	mov	r3, #8
   158ac:	str	r3, [sp]
   158b0:	add	r1, sp, #36	; 0x24
   158b4:	rsb	r2, r2, #1
   158b8:	ldr	r0, [sp, #28]
   158bc:	mvn	r3, #-2147483648	; 0x80000000
   158c0:	bl	16bec <__assert_fail@plt+0x5c38>
   158c4:	mov	r4, r0
   158c8:	ldm	r5, {r0, r1}
   158cc:	str	r4, [r7]
   158d0:	stm	r4, {r0, r1}
   158d4:	b	157b8 <__assert_fail@plt+0x4804>
   158d8:	bl	10fa8 <abort@plt>
   158dc:	muleq	r2, r4, r1
   158e0:	andeq	sl, r2, r0, lsl #2
   158e4:	andeq	sl, r2, r4, asr #3
   158e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158ec:	sub	sp, sp, #52	; 0x34
   158f0:	mov	r5, r0
   158f4:	mov	sl, r1
   158f8:	mov	fp, r2
   158fc:	bl	10edc <__errno_location@plt>
   15900:	ldr	r4, [pc, #404]	; 15a9c <__assert_fail@plt+0x4ae8>
   15904:	cmn	r5, #-2147483647	; 0x80000001
   15908:	ldr	r6, [r4]
   1590c:	mov	r8, r0
   15910:	movne	r0, #0
   15914:	moveq	r0, #1
   15918:	ldr	r3, [r8]
   1591c:	orrs	r0, r0, r5, lsr #31
   15920:	str	r3, [sp, #28]
   15924:	bne	15a98 <__assert_fail@plt+0x4ae4>
   15928:	ldr	r2, [r4, #4]
   1592c:	cmp	r5, r2
   15930:	blt	15990 <__assert_fail@plt+0x49dc>
   15934:	add	r7, r4, #8
   15938:	cmp	r6, r7
   1593c:	str	r2, [sp, #44]	; 0x2c
   15940:	beq	15a68 <__assert_fail@plt+0x4ab4>
   15944:	mov	r3, #8
   15948:	sub	r2, r5, r2
   1594c:	mov	r0, r6
   15950:	str	r3, [sp]
   15954:	add	r2, r2, #1
   15958:	mvn	r3, #-2147483648	; 0x80000000
   1595c:	add	r1, sp, #44	; 0x2c
   15960:	bl	16bec <__assert_fail@plt+0x5c38>
   15964:	mov	r6, r0
   15968:	str	r0, [r4]
   1596c:	ldr	r0, [r4, #4]
   15970:	ldr	r2, [sp, #44]	; 0x2c
   15974:	mov	r1, #0
   15978:	sub	r2, r2, r0
   1597c:	add	r0, r6, r0, lsl #3
   15980:	lsl	r2, r2, #3
   15984:	bl	10ef4 <memset@plt>
   15988:	ldr	r3, [sp, #44]	; 0x2c
   1598c:	str	r3, [r4, #4]
   15990:	ldr	r2, [r4, #56]	; 0x38
   15994:	add	r3, r6, r5, lsl #3
   15998:	ldr	r1, [r4, #20]
   1599c:	ldr	r7, [r3, #4]
   159a0:	ldr	r9, [r6, r5, lsl #3]
   159a4:	ldr	ip, [r4, #60]	; 0x3c
   159a8:	str	r3, [sp, #32]
   159ac:	ldr	r3, [r4, #16]
   159b0:	str	r2, [sp, #12]
   159b4:	ldr	r2, [pc, #228]	; 15aa0 <__assert_fail@plt+0x4aec>
   159b8:	orr	r1, r1, #1
   159bc:	str	r1, [sp, #36]	; 0x24
   159c0:	str	r1, [sp, #4]
   159c4:	str	r2, [sp, #8]
   159c8:	str	r3, [sp]
   159cc:	mov	r0, r7
   159d0:	mov	r1, r9
   159d4:	str	ip, [sp, #16]
   159d8:	mov	r3, fp
   159dc:	mov	r2, sl
   159e0:	bl	120f4 <__assert_fail@plt+0x1140>
   159e4:	cmp	r9, r0
   159e8:	bhi	15a54 <__assert_fail@plt+0x4aa0>
   159ec:	ldr	r3, [pc, #176]	; 15aa4 <__assert_fail@plt+0x4af0>
   159f0:	add	r9, r0, #1
   159f4:	cmp	r7, r3
   159f8:	str	r9, [r6, r5, lsl #3]
   159fc:	beq	15a08 <__assert_fail@plt+0x4a54>
   15a00:	mov	r0, r7
   15a04:	bl	11ec8 <__assert_fail@plt+0xf14>
   15a08:	mov	r0, r9
   15a0c:	bl	169d0 <__assert_fail@plt+0x5a1c>
   15a10:	ldr	ip, [sp, #32]
   15a14:	ldr	lr, [r4, #60]	; 0x3c
   15a18:	ldr	r5, [r4, #56]	; 0x38
   15a1c:	mov	r3, fp
   15a20:	mov	r2, sl
   15a24:	mov	r1, r9
   15a28:	str	r0, [ip, #4]
   15a2c:	ldr	ip, [r4, #16]
   15a30:	ldr	r4, [pc, #104]	; 15aa0 <__assert_fail@plt+0x4aec>
   15a34:	str	lr, [sp, #16]
   15a38:	str	r4, [sp, #8]
   15a3c:	ldr	r4, [sp, #36]	; 0x24
   15a40:	str	r5, [sp, #12]
   15a44:	str	r4, [sp, #4]
   15a48:	str	ip, [sp]
   15a4c:	mov	r7, r0
   15a50:	bl	120f4 <__assert_fail@plt+0x1140>
   15a54:	ldr	r3, [sp, #28]
   15a58:	mov	r0, r7
   15a5c:	str	r3, [r8]
   15a60:	add	sp, sp, #52	; 0x34
   15a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a68:	mov	r3, #8
   15a6c:	sub	r2, r5, r2
   15a70:	str	r3, [sp]
   15a74:	add	r1, sp, #44	; 0x2c
   15a78:	add	r2, r2, #1
   15a7c:	mvn	r3, #-2147483648	; 0x80000000
   15a80:	bl	16bec <__assert_fail@plt+0x5c38>
   15a84:	mov	r6, r0
   15a88:	ldm	r7, {r0, r1}
   15a8c:	str	r6, [r4]
   15a90:	stm	r6, {r0, r1}
   15a94:	b	1596c <__assert_fail@plt+0x49b8>
   15a98:	bl	10fa8 <abort@plt>
   15a9c:	andeq	sl, r2, r0, lsl #2
   15aa0:	andeq	sl, r2, r8, lsl r1
   15aa4:	andeq	sl, r2, r4, asr #3
   15aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15aac:	sub	sp, sp, #44	; 0x2c
   15ab0:	mov	r9, r0
   15ab4:	mov	sl, r1
   15ab8:	bl	10edc <__errno_location@plt>
   15abc:	ldr	r4, [pc, #360]	; 15c2c <__assert_fail@plt+0x4c78>
   15ac0:	ldr	r2, [r4, #4]
   15ac4:	ldr	r5, [r4]
   15ac8:	cmp	r2, #0
   15acc:	ldr	r3, [r0]
   15ad0:	mov	r7, r0
   15ad4:	str	r3, [sp, #24]
   15ad8:	bgt	15b34 <__assert_fail@plt+0x4b80>
   15adc:	add	r6, r4, #8
   15ae0:	cmp	r5, r6
   15ae4:	str	r2, [sp, #36]	; 0x24
   15ae8:	beq	15bfc <__assert_fail@plt+0x4c48>
   15aec:	mov	r3, #8
   15af0:	mov	r0, r5
   15af4:	str	r3, [sp]
   15af8:	rsb	r2, r2, #1
   15afc:	mvn	r3, #-2147483648	; 0x80000000
   15b00:	add	r1, sp, #36	; 0x24
   15b04:	bl	16bec <__assert_fail@plt+0x5c38>
   15b08:	mov	r5, r0
   15b0c:	str	r0, [r4]
   15b10:	ldr	r0, [r4, #4]
   15b14:	ldr	r2, [sp, #36]	; 0x24
   15b18:	mov	r1, #0
   15b1c:	sub	r2, r2, r0
   15b20:	add	r0, r5, r0, lsl #3
   15b24:	lsl	r2, r2, #3
   15b28:	bl	10ef4 <memset@plt>
   15b2c:	ldr	r3, [sp, #36]	; 0x24
   15b30:	str	r3, [r4, #4]
   15b34:	ldr	r1, [r4, #20]
   15b38:	ldr	r8, [r5]
   15b3c:	ldr	r6, [r5, #4]
   15b40:	ldr	r2, [r4, #56]	; 0x38
   15b44:	ldr	r3, [r4, #16]
   15b48:	ldr	ip, [r4, #60]	; 0x3c
   15b4c:	ldr	fp, [pc, #220]	; 15c30 <__assert_fail@plt+0x4c7c>
   15b50:	orr	r1, r1, #1
   15b54:	str	r1, [sp, #28]
   15b58:	str	r1, [sp, #4]
   15b5c:	str	r2, [sp, #12]
   15b60:	str	r3, [sp]
   15b64:	mov	r1, r8
   15b68:	mov	r0, r6
   15b6c:	str	ip, [sp, #16]
   15b70:	str	fp, [sp, #8]
   15b74:	mov	r3, sl
   15b78:	mov	r2, r9
   15b7c:	bl	120f4 <__assert_fail@plt+0x1140>
   15b80:	cmp	r8, r0
   15b84:	bhi	15be8 <__assert_fail@plt+0x4c34>
   15b88:	ldr	r3, [pc, #164]	; 15c34 <__assert_fail@plt+0x4c80>
   15b8c:	add	r8, r0, #1
   15b90:	cmp	r6, r3
   15b94:	str	r8, [r5]
   15b98:	beq	15ba4 <__assert_fail@plt+0x4bf0>
   15b9c:	mov	r0, r6
   15ba0:	bl	11ec8 <__assert_fail@plt+0xf14>
   15ba4:	mov	r0, r8
   15ba8:	bl	169d0 <__assert_fail@plt+0x5a1c>
   15bac:	ldr	lr, [r4, #60]	; 0x3c
   15bb0:	ldr	ip, [r4, #16]
   15bb4:	mov	r3, sl
   15bb8:	mov	r2, r9
   15bbc:	mov	r1, r8
   15bc0:	str	r0, [r5, #4]
   15bc4:	ldr	r5, [r4, #56]	; 0x38
   15bc8:	ldr	r4, [sp, #28]
   15bcc:	str	fp, [sp, #8]
   15bd0:	str	r4, [sp, #4]
   15bd4:	str	lr, [sp, #16]
   15bd8:	str	r5, [sp, #12]
   15bdc:	str	ip, [sp]
   15be0:	mov	r6, r0
   15be4:	bl	120f4 <__assert_fail@plt+0x1140>
   15be8:	ldr	r3, [sp, #24]
   15bec:	mov	r0, r6
   15bf0:	str	r3, [r7]
   15bf4:	add	sp, sp, #44	; 0x2c
   15bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bfc:	mov	r3, #8
   15c00:	str	r3, [sp]
   15c04:	add	r1, sp, #36	; 0x24
   15c08:	rsb	r2, r2, #1
   15c0c:	mvn	r3, #-2147483648	; 0x80000000
   15c10:	mov	r0, #0
   15c14:	bl	16bec <__assert_fail@plt+0x5c38>
   15c18:	mov	r5, r0
   15c1c:	ldm	r6, {r0, r1}
   15c20:	str	r5, [r4]
   15c24:	stm	r5, {r0, r1}
   15c28:	b	15b10 <__assert_fail@plt+0x4b5c>
   15c2c:	andeq	sl, r2, r0, lsl #2
   15c30:	andeq	sl, r2, r8, lsl r1
   15c34:	andeq	sl, r2, r4, asr #3
   15c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c3c:	sub	sp, sp, #44	; 0x2c
   15c40:	mov	r5, r0
   15c44:	mov	sl, r1
   15c48:	bl	10edc <__errno_location@plt>
   15c4c:	ldr	r4, [pc, #396]	; 15de0 <__assert_fail@plt+0x4e2c>
   15c50:	cmn	r5, #-2147483647	; 0x80000001
   15c54:	ldr	r6, [r4]
   15c58:	mov	r8, r0
   15c5c:	movne	r0, #0
   15c60:	moveq	r0, #1
   15c64:	ldr	r3, [r8]
   15c68:	orrs	r0, r0, r5, lsr #31
   15c6c:	str	r3, [sp, #24]
   15c70:	bne	15ddc <__assert_fail@plt+0x4e28>
   15c74:	ldr	r2, [r4, #4]
   15c78:	cmp	r5, r2
   15c7c:	blt	15cdc <__assert_fail@plt+0x4d28>
   15c80:	add	r7, r4, #8
   15c84:	cmp	r6, r7
   15c88:	str	r2, [sp, #36]	; 0x24
   15c8c:	beq	15dac <__assert_fail@plt+0x4df8>
   15c90:	mov	r3, #8
   15c94:	sub	r2, r5, r2
   15c98:	mov	r0, r6
   15c9c:	str	r3, [sp]
   15ca0:	add	r2, r2, #1
   15ca4:	mvn	r3, #-2147483648	; 0x80000000
   15ca8:	add	r1, sp, #36	; 0x24
   15cac:	bl	16bec <__assert_fail@plt+0x5c38>
   15cb0:	mov	r6, r0
   15cb4:	str	r0, [r4]
   15cb8:	ldr	r0, [r4, #4]
   15cbc:	ldr	r2, [sp, #36]	; 0x24
   15cc0:	mov	r1, #0
   15cc4:	sub	r2, r2, r0
   15cc8:	add	r0, r6, r0, lsl #3
   15ccc:	lsl	r2, r2, #3
   15cd0:	bl	10ef4 <memset@plt>
   15cd4:	ldr	r3, [sp, #36]	; 0x24
   15cd8:	str	r3, [r4, #4]
   15cdc:	ldr	r2, [r4, #56]	; 0x38
   15ce0:	add	fp, r6, r5, lsl #3
   15ce4:	ldr	r1, [r4, #20]
   15ce8:	ldr	r9, [r6, r5, lsl #3]
   15cec:	ldr	r7, [fp, #4]
   15cf0:	ldr	r3, [r4, #16]
   15cf4:	ldr	ip, [r4, #60]	; 0x3c
   15cf8:	str	r2, [sp, #12]
   15cfc:	ldr	r2, [pc, #224]	; 15de4 <__assert_fail@plt+0x4e30>
   15d00:	orr	r1, r1, #1
   15d04:	str	r1, [sp, #28]
   15d08:	str	r1, [sp, #4]
   15d0c:	str	r2, [sp, #8]
   15d10:	str	r3, [sp]
   15d14:	mov	r0, r7
   15d18:	mov	r1, r9
   15d1c:	str	ip, [sp, #16]
   15d20:	mvn	r3, #0
   15d24:	mov	r2, sl
   15d28:	bl	120f4 <__assert_fail@plt+0x1140>
   15d2c:	cmp	r9, r0
   15d30:	bhi	15d98 <__assert_fail@plt+0x4de4>
   15d34:	ldr	r3, [pc, #172]	; 15de8 <__assert_fail@plt+0x4e34>
   15d38:	add	r9, r0, #1
   15d3c:	cmp	r7, r3
   15d40:	str	r9, [r6, r5, lsl #3]
   15d44:	beq	15d50 <__assert_fail@plt+0x4d9c>
   15d48:	mov	r0, r7
   15d4c:	bl	11ec8 <__assert_fail@plt+0xf14>
   15d50:	mov	r0, r9
   15d54:	bl	169d0 <__assert_fail@plt+0x5a1c>
   15d58:	ldr	ip, [r4, #60]	; 0x3c
   15d5c:	ldr	r3, [r4, #16]
   15d60:	ldr	lr, [r4, #56]	; 0x38
   15d64:	ldr	r4, [pc, #120]	; 15de4 <__assert_fail@plt+0x4e30>
   15d68:	mov	r2, sl
   15d6c:	mov	r1, r9
   15d70:	str	r0, [fp, #4]
   15d74:	str	r4, [sp, #8]
   15d78:	ldr	r4, [sp, #28]
   15d7c:	str	r3, [sp]
   15d80:	str	r4, [sp, #4]
   15d84:	str	ip, [sp, #16]
   15d88:	str	lr, [sp, #12]
   15d8c:	mvn	r3, #0
   15d90:	mov	r7, r0
   15d94:	bl	120f4 <__assert_fail@plt+0x1140>
   15d98:	ldr	r3, [sp, #24]
   15d9c:	mov	r0, r7
   15da0:	str	r3, [r8]
   15da4:	add	sp, sp, #44	; 0x2c
   15da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dac:	mov	r3, #8
   15db0:	sub	r2, r5, r2
   15db4:	str	r3, [sp]
   15db8:	add	r1, sp, #36	; 0x24
   15dbc:	add	r2, r2, #1
   15dc0:	mvn	r3, #-2147483648	; 0x80000000
   15dc4:	bl	16bec <__assert_fail@plt+0x5c38>
   15dc8:	mov	r6, r0
   15dcc:	ldm	r7, {r0, r1}
   15dd0:	str	r6, [r4]
   15dd4:	stm	r6, {r0, r1}
   15dd8:	b	15cb8 <__assert_fail@plt+0x4d04>
   15ddc:	bl	10fa8 <abort@plt>
   15de0:	andeq	sl, r2, r0, lsl #2
   15de4:	andeq	sl, r2, r8, lsl r1
   15de8:	andeq	sl, r2, r4, asr #3
   15dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15df0:	sub	sp, sp, #44	; 0x2c
   15df4:	mov	sl, r0
   15df8:	bl	10edc <__errno_location@plt>
   15dfc:	ldr	r4, [pc, #348]	; 15f60 <__assert_fail@plt+0x4fac>
   15e00:	ldr	r2, [r4, #4]
   15e04:	ldr	r5, [r4]
   15e08:	cmp	r2, #0
   15e0c:	ldr	r3, [r0]
   15e10:	mov	r8, r0
   15e14:	str	r3, [sp, #28]
   15e18:	bgt	15e74 <__assert_fail@plt+0x4ec0>
   15e1c:	add	r6, r4, #8
   15e20:	cmp	r5, r6
   15e24:	str	r2, [sp, #36]	; 0x24
   15e28:	beq	15f30 <__assert_fail@plt+0x4f7c>
   15e2c:	mov	r3, #8
   15e30:	mov	r0, r5
   15e34:	str	r3, [sp]
   15e38:	rsb	r2, r2, #1
   15e3c:	mvn	r3, #-2147483648	; 0x80000000
   15e40:	add	r1, sp, #36	; 0x24
   15e44:	bl	16bec <__assert_fail@plt+0x5c38>
   15e48:	mov	r5, r0
   15e4c:	str	r0, [r4]
   15e50:	ldr	r0, [r4, #4]
   15e54:	ldr	r2, [sp, #36]	; 0x24
   15e58:	mov	r1, #0
   15e5c:	sub	r2, r2, r0
   15e60:	add	r0, r5, r0, lsl #3
   15e64:	lsl	r2, r2, #3
   15e68:	bl	10ef4 <memset@plt>
   15e6c:	ldr	r3, [sp, #36]	; 0x24
   15e70:	str	r3, [r4, #4]
   15e74:	ldr	r7, [r4, #20]
   15e78:	ldr	r9, [r5]
   15e7c:	ldr	r6, [r5, #4]
   15e80:	ldr	r2, [r4, #56]	; 0x38
   15e84:	ldr	r3, [r4, #16]
   15e88:	ldr	ip, [r4, #60]	; 0x3c
   15e8c:	ldr	fp, [pc, #208]	; 15f64 <__assert_fail@plt+0x4fb0>
   15e90:	orr	r7, r7, #1
   15e94:	str	r2, [sp, #12]
   15e98:	str	r3, [sp]
   15e9c:	str	r7, [sp, #4]
   15ea0:	mov	r1, r9
   15ea4:	mov	r0, r6
   15ea8:	str	ip, [sp, #16]
   15eac:	str	fp, [sp, #8]
   15eb0:	mvn	r3, #0
   15eb4:	mov	r2, sl
   15eb8:	bl	120f4 <__assert_fail@plt+0x1140>
   15ebc:	cmp	r9, r0
   15ec0:	bhi	15f1c <__assert_fail@plt+0x4f68>
   15ec4:	ldr	r3, [pc, #156]	; 15f68 <__assert_fail@plt+0x4fb4>
   15ec8:	add	r9, r0, #1
   15ecc:	cmp	r6, r3
   15ed0:	str	r9, [r5]
   15ed4:	beq	15ee0 <__assert_fail@plt+0x4f2c>
   15ed8:	mov	r0, r6
   15edc:	bl	11ec8 <__assert_fail@plt+0xf14>
   15ee0:	mov	r0, r9
   15ee4:	bl	169d0 <__assert_fail@plt+0x5a1c>
   15ee8:	ldr	ip, [r4, #60]	; 0x3c
   15eec:	ldr	r3, [r4, #16]
   15ef0:	ldr	lr, [r4, #56]	; 0x38
   15ef4:	mov	r2, sl
   15ef8:	mov	r1, r9
   15efc:	str	r0, [r5, #4]
   15f00:	str	r3, [sp]
   15f04:	stmib	sp, {r7, fp}
   15f08:	str	ip, [sp, #16]
   15f0c:	str	lr, [sp, #12]
   15f10:	mvn	r3, #0
   15f14:	mov	r6, r0
   15f18:	bl	120f4 <__assert_fail@plt+0x1140>
   15f1c:	ldr	r3, [sp, #28]
   15f20:	mov	r0, r6
   15f24:	str	r3, [r8]
   15f28:	add	sp, sp, #44	; 0x2c
   15f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f30:	mov	r3, #8
   15f34:	str	r3, [sp]
   15f38:	add	r1, sp, #36	; 0x24
   15f3c:	rsb	r2, r2, #1
   15f40:	mvn	r3, #-2147483648	; 0x80000000
   15f44:	mov	r0, #0
   15f48:	bl	16bec <__assert_fail@plt+0x5c38>
   15f4c:	mov	r5, r0
   15f50:	ldm	r6, {r0, r1}
   15f54:	str	r5, [r4]
   15f58:	stm	r5, {r0, r1}
   15f5c:	b	15e50 <__assert_fail@plt+0x4e9c>
   15f60:	andeq	sl, r2, r0, lsl #2
   15f64:	andeq	sl, r2, r8, lsl r1
   15f68:	andeq	sl, r2, r4, asr #3
   15f6c:	push	{r4, r5, r6, lr}
   15f70:	sub	sp, sp, #32
   15f74:	cmp	r1, #0
   15f78:	mov	r4, r0
   15f7c:	ldr	r5, [sp, #48]	; 0x30
   15f80:	ldr	r6, [sp, #52]	; 0x34
   15f84:	beq	1629c <__assert_fail@plt+0x52e8>
   15f88:	stm	sp, {r2, r3}
   15f8c:	mov	r3, r1
   15f90:	ldr	r2, [pc, #808]	; 162c0 <__assert_fail@plt+0x530c>
   15f94:	mov	r1, #1
   15f98:	bl	10f18 <__fprintf_chk@plt>
   15f9c:	mov	r2, #5
   15fa0:	ldr	r1, [pc, #796]	; 162c4 <__assert_fail@plt+0x5310>
   15fa4:	mov	r0, #0
   15fa8:	bl	10dbc <dcgettext@plt>
   15fac:	ldr	r3, [pc, #788]	; 162c8 <__assert_fail@plt+0x5314>
   15fb0:	ldr	r2, [pc, #788]	; 162cc <__assert_fail@plt+0x5318>
   15fb4:	str	r3, [sp]
   15fb8:	mov	r1, #1
   15fbc:	mov	r3, r0
   15fc0:	mov	r0, r4
   15fc4:	bl	10f18 <__fprintf_chk@plt>
   15fc8:	mov	r1, r4
   15fcc:	mov	r0, #10
   15fd0:	bl	10db0 <fputc_unlocked@plt>
   15fd4:	mov	r2, #5
   15fd8:	ldr	r1, [pc, #752]	; 162d0 <__assert_fail@plt+0x531c>
   15fdc:	mov	r0, #0
   15fe0:	bl	10dbc <dcgettext@plt>
   15fe4:	mov	r1, #1
   15fe8:	ldr	r3, [pc, #740]	; 162d4 <__assert_fail@plt+0x5320>
   15fec:	mov	r2, r0
   15ff0:	mov	r0, r4
   15ff4:	bl	10f18 <__fprintf_chk@plt>
   15ff8:	mov	r1, r4
   15ffc:	mov	r0, #10
   16000:	bl	10db0 <fputc_unlocked@plt>
   16004:	cmp	r6, #9
   16008:	ldrls	pc, [pc, r6, lsl #2]
   1600c:	b	162b4 <__assert_fail@plt+0x5300>
   16010:	muleq	r1, r4, r0
   16014:	muleq	r1, ip, r0
   16018:	andeq	r6, r1, r8, asr #1
   1601c:	strdeq	r6, [r1], -ip
   16020:	andeq	r6, r1, r8, lsr r1
   16024:	andeq	r6, r1, r4, ror r1
   16028:			; <UNDEFINED> instruction: 0x000161b0
   1602c:	strdeq	r6, [r1], -r4
   16030:	andeq	r6, r1, r4, asr #4
   16034:	andeq	r6, r1, r8, lsr r0
   16038:	ldr	r1, [pc, #664]	; 162d8 <__assert_fail@plt+0x5324>
   1603c:	mov	r2, #5
   16040:	mov	r0, #0
   16044:	bl	10dbc <dcgettext@plt>
   16048:	ldr	ip, [r5, #32]
   1604c:	ldr	r1, [r5, #28]
   16050:	ldr	r2, [r5, #24]
   16054:	ldr	r3, [r5]
   16058:	ldr	r6, [r5, #20]
   1605c:	str	ip, [sp, #28]
   16060:	ldr	lr, [r5, #16]
   16064:	str	r1, [sp, #24]
   16068:	ldr	ip, [r5, #12]
   1606c:	str	r2, [sp, #20]
   16070:	ldr	r1, [r5, #8]
   16074:	ldr	r2, [r5, #4]
   16078:	str	r6, [sp, #16]
   1607c:	stmib	sp, {r1, ip, lr}
   16080:	mov	r1, #1
   16084:	str	r2, [sp]
   16088:	mov	r2, r0
   1608c:	mov	r0, r4
   16090:	bl	10f18 <__fprintf_chk@plt>
   16094:	add	sp, sp, #32
   16098:	pop	{r4, r5, r6, pc}
   1609c:	mov	r2, #5
   160a0:	ldr	r1, [pc, #564]	; 162dc <__assert_fail@plt+0x5328>
   160a4:	mov	r0, #0
   160a8:	bl	10dbc <dcgettext@plt>
   160ac:	ldr	r3, [r5]
   160b0:	mov	r1, #1
   160b4:	mov	r2, r0
   160b8:	mov	r0, r4
   160bc:	add	sp, sp, #32
   160c0:	pop	{r4, r5, r6, lr}
   160c4:	b	10f18 <__fprintf_chk@plt>
   160c8:	mov	r2, #5
   160cc:	ldr	r1, [pc, #524]	; 162e0 <__assert_fail@plt+0x532c>
   160d0:	mov	r0, #0
   160d4:	bl	10dbc <dcgettext@plt>
   160d8:	ldr	r2, [r5, #4]
   160dc:	ldr	r3, [r5]
   160e0:	mov	r1, #1
   160e4:	str	r2, [sp, #48]	; 0x30
   160e8:	mov	r2, r0
   160ec:	mov	r0, r4
   160f0:	add	sp, sp, #32
   160f4:	pop	{r4, r5, r6, lr}
   160f8:	b	10f18 <__fprintf_chk@plt>
   160fc:	mov	r2, #5
   16100:	ldr	r1, [pc, #476]	; 162e4 <__assert_fail@plt+0x5330>
   16104:	mov	r0, #0
   16108:	bl	10dbc <dcgettext@plt>
   1610c:	ldr	r1, [r5, #8]
   16110:	ldr	r2, [r5, #4]
   16114:	ldr	r3, [r5]
   16118:	str	r1, [sp, #52]	; 0x34
   1611c:	str	r2, [sp, #48]	; 0x30
   16120:	mov	r1, #1
   16124:	mov	r2, r0
   16128:	mov	r0, r4
   1612c:	add	sp, sp, #32
   16130:	pop	{r4, r5, r6, lr}
   16134:	b	10f18 <__fprintf_chk@plt>
   16138:	mov	r2, #5
   1613c:	ldr	r1, [pc, #420]	; 162e8 <__assert_fail@plt+0x5334>
   16140:	mov	r0, #0
   16144:	bl	10dbc <dcgettext@plt>
   16148:	ldr	r1, [r5, #8]
   1614c:	ldr	ip, [r5, #12]
   16150:	ldr	r2, [r5, #4]
   16154:	ldr	r3, [r5]
   16158:	stmib	sp, {r1, ip}
   1615c:	str	r2, [sp]
   16160:	mov	r1, #1
   16164:	mov	r2, r0
   16168:	mov	r0, r4
   1616c:	bl	10f18 <__fprintf_chk@plt>
   16170:	b	16094 <__assert_fail@plt+0x50e0>
   16174:	mov	r2, #5
   16178:	ldr	r1, [pc, #364]	; 162ec <__assert_fail@plt+0x5338>
   1617c:	mov	r0, #0
   16180:	bl	10dbc <dcgettext@plt>
   16184:	add	r1, r5, #8
   16188:	ldr	r2, [r5, #4]
   1618c:	ldm	r1, {r1, ip, lr}
   16190:	ldr	r3, [r5]
   16194:	str	r2, [sp]
   16198:	stmib	sp, {r1, ip, lr}
   1619c:	mov	r1, #1
   161a0:	mov	r2, r0
   161a4:	mov	r0, r4
   161a8:	bl	10f18 <__fprintf_chk@plt>
   161ac:	b	16094 <__assert_fail@plt+0x50e0>
   161b0:	mov	r2, #5
   161b4:	ldr	r1, [pc, #308]	; 162f0 <__assert_fail@plt+0x533c>
   161b8:	mov	r0, #0
   161bc:	bl	10dbc <dcgettext@plt>
   161c0:	add	r1, r5, #8
   161c4:	ldr	r2, [r5, #4]
   161c8:	ldm	r1, {r1, ip, lr}
   161cc:	ldr	r6, [r5, #20]
   161d0:	ldr	r3, [r5]
   161d4:	stmib	sp, {r1, ip, lr}
   161d8:	mov	r1, #1
   161dc:	str	r2, [sp]
   161e0:	str	r6, [sp, #16]
   161e4:	mov	r2, r0
   161e8:	mov	r0, r4
   161ec:	bl	10f18 <__fprintf_chk@plt>
   161f0:	b	16094 <__assert_fail@plt+0x50e0>
   161f4:	mov	r2, #5
   161f8:	ldr	r1, [pc, #244]	; 162f4 <__assert_fail@plt+0x5340>
   161fc:	mov	r0, #0
   16200:	bl	10dbc <dcgettext@plt>
   16204:	ldr	r2, [r5, #24]
   16208:	ldr	r3, [r5]
   1620c:	ldr	r6, [r5, #20]
   16210:	ldr	lr, [r5, #16]
   16214:	ldr	ip, [r5, #12]
   16218:	str	r2, [sp, #20]
   1621c:	ldr	r1, [r5, #8]
   16220:	ldr	r2, [r5, #4]
   16224:	str	r6, [sp, #16]
   16228:	stmib	sp, {r1, ip, lr}
   1622c:	mov	r1, #1
   16230:	str	r2, [sp]
   16234:	mov	r2, r0
   16238:	mov	r0, r4
   1623c:	bl	10f18 <__fprintf_chk@plt>
   16240:	b	16094 <__assert_fail@plt+0x50e0>
   16244:	mov	r2, #5
   16248:	ldr	r1, [pc, #168]	; 162f8 <__assert_fail@plt+0x5344>
   1624c:	mov	r0, #0
   16250:	bl	10dbc <dcgettext@plt>
   16254:	ldr	r1, [r5, #28]
   16258:	ldr	r2, [r5, #24]
   1625c:	ldr	r3, [r5]
   16260:	ldr	r6, [r5, #20]
   16264:	ldr	lr, [r5, #16]
   16268:	str	r1, [sp, #24]
   1626c:	ldr	ip, [r5, #12]
   16270:	str	r2, [sp, #20]
   16274:	ldr	r1, [r5, #8]
   16278:	ldr	r2, [r5, #4]
   1627c:	str	r6, [sp, #16]
   16280:	stmib	sp, {r1, ip, lr}
   16284:	mov	r1, #1
   16288:	str	r2, [sp]
   1628c:	mov	r2, r0
   16290:	mov	r0, r4
   16294:	bl	10f18 <__fprintf_chk@plt>
   16298:	b	16094 <__assert_fail@plt+0x50e0>
   1629c:	str	r3, [sp]
   162a0:	mov	r1, #1
   162a4:	mov	r3, r2
   162a8:	ldr	r2, [pc, #76]	; 162fc <__assert_fail@plt+0x5348>
   162ac:	bl	10f18 <__fprintf_chk@plt>
   162b0:	b	15f9c <__assert_fail@plt+0x4fe8>
   162b4:	mov	r2, #5
   162b8:	ldr	r1, [pc, #64]	; 16300 <__assert_fail@plt+0x534c>
   162bc:	b	16040 <__assert_fail@plt+0x508c>
   162c0:	andeq	r9, r1, r4, lsl r5
   162c4:	andeq	r9, r1, r8, lsr #10
   162c8:	andeq	r0, r0, r6, ror #15
   162cc:	andeq	r9, r1, r0, lsl #16
   162d0:	andeq	r9, r1, ip, lsr #10
   162d4:	ldrdeq	r9, [r1], -r8
   162d8:	andeq	r9, r1, r8, lsl #14
   162dc:	strdeq	r9, [r1], -ip
   162e0:	andeq	r9, r1, ip, lsl #12
   162e4:	andeq	r9, r1, r4, lsr #12
   162e8:	andeq	r9, r1, r0, asr #12
   162ec:	andeq	r9, r1, r0, ror #12
   162f0:	andeq	r9, r1, r4, lsl #13
   162f4:	andeq	r9, r1, ip, lsr #13
   162f8:	ldrdeq	r9, [r1], -r8
   162fc:	andeq	r9, r1, r0, lsr #10
   16300:	andeq	r9, r1, ip, lsr r7
   16304:	push	{r4, r5, lr}
   16308:	sub	sp, sp, #12
   1630c:	ldr	r5, [sp, #24]
   16310:	ldr	ip, [r5]
   16314:	cmp	ip, #0
   16318:	beq	16334 <__assert_fail@plt+0x5380>
   1631c:	mov	lr, r5
   16320:	mov	ip, #0
   16324:	ldr	r4, [lr, #4]!
   16328:	add	ip, ip, #1
   1632c:	cmp	r4, #0
   16330:	bne	16324 <__assert_fail@plt+0x5370>
   16334:	stm	sp, {r5, ip}
   16338:	bl	15f6c <__assert_fail@plt+0x4fb8>
   1633c:	add	sp, sp, #12
   16340:	pop	{r4, r5, pc}
   16344:	push	{r4, r5, lr}
   16348:	sub	sp, sp, #76	; 0x4c
   1634c:	mov	r5, r0
   16350:	ldr	ip, [sp, #88]	; 0x58
   16354:	ldr	r0, [ip]
   16358:	cmp	r0, #0
   1635c:	str	r0, [sp, #32]
   16360:	beq	16734 <__assert_fail@plt+0x5780>
   16364:	ldr	r0, [ip, #4]
   16368:	cmp	r0, #0
   1636c:	str	r0, [sp, #36]	; 0x24
   16370:	beq	1673c <__assert_fail@plt+0x5788>
   16374:	ldr	r0, [ip, #8]
   16378:	cmp	r0, #0
   1637c:	str	r0, [sp, #40]	; 0x28
   16380:	beq	16744 <__assert_fail@plt+0x5790>
   16384:	ldr	r0, [ip, #12]
   16388:	cmp	r0, #0
   1638c:	str	r0, [sp, #44]	; 0x2c
   16390:	beq	1674c <__assert_fail@plt+0x5798>
   16394:	ldr	r0, [ip, #16]
   16398:	cmp	r0, #0
   1639c:	str	r0, [sp, #48]	; 0x30
   163a0:	beq	16754 <__assert_fail@plt+0x57a0>
   163a4:	ldr	r0, [ip, #20]
   163a8:	cmp	r0, #0
   163ac:	str	r0, [sp, #52]	; 0x34
   163b0:	beq	1675c <__assert_fail@plt+0x57a8>
   163b4:	ldr	r0, [ip, #24]
   163b8:	cmp	r0, #0
   163bc:	str	r0, [sp, #56]	; 0x38
   163c0:	beq	16764 <__assert_fail@plt+0x57b0>
   163c4:	ldr	r0, [ip, #28]
   163c8:	cmp	r0, #0
   163cc:	str	r0, [sp, #60]	; 0x3c
   163d0:	beq	1676c <__assert_fail@plt+0x57b8>
   163d4:	ldr	r0, [ip, #32]
   163d8:	cmp	r0, #0
   163dc:	str	r0, [sp, #64]	; 0x40
   163e0:	beq	16774 <__assert_fail@plt+0x57c0>
   163e4:	ldr	r0, [ip, #36]	; 0x24
   163e8:	cmp	r0, #0
   163ec:	movne	r4, #10
   163f0:	moveq	r4, #9
   163f4:	cmp	r1, #0
   163f8:	beq	1670c <__assert_fail@plt+0x5758>
   163fc:	stm	sp, {r2, r3}
   16400:	mov	r0, r5
   16404:	mov	r3, r1
   16408:	ldr	r2, [pc, #876]	; 1677c <__assert_fail@plt+0x57c8>
   1640c:	mov	r1, #1
   16410:	bl	10f18 <__fprintf_chk@plt>
   16414:	mov	r2, #5
   16418:	ldr	r1, [pc, #864]	; 16780 <__assert_fail@plt+0x57cc>
   1641c:	mov	r0, #0
   16420:	bl	10dbc <dcgettext@plt>
   16424:	ldr	r3, [pc, #856]	; 16784 <__assert_fail@plt+0x57d0>
   16428:	ldr	r2, [pc, #856]	; 16788 <__assert_fail@plt+0x57d4>
   1642c:	str	r3, [sp]
   16430:	mov	r1, #1
   16434:	mov	r3, r0
   16438:	mov	r0, r5
   1643c:	bl	10f18 <__fprintf_chk@plt>
   16440:	mov	r1, r5
   16444:	mov	r0, #10
   16448:	bl	10db0 <fputc_unlocked@plt>
   1644c:	mov	r2, #5
   16450:	ldr	r1, [pc, #820]	; 1678c <__assert_fail@plt+0x57d8>
   16454:	mov	r0, #0
   16458:	bl	10dbc <dcgettext@plt>
   1645c:	mov	r1, #1
   16460:	ldr	r3, [pc, #808]	; 16790 <__assert_fail@plt+0x57dc>
   16464:	mov	r2, r0
   16468:	mov	r0, r5
   1646c:	bl	10f18 <__fprintf_chk@plt>
   16470:	mov	r1, r5
   16474:	mov	r0, #10
   16478:	bl	10db0 <fputc_unlocked@plt>
   1647c:	cmp	r4, #9
   16480:	ldrls	pc, [pc, r4, lsl #2]
   16484:	b	16728 <__assert_fail@plt+0x5774>
   16488:	andeq	r6, r1, ip, lsl #10
   1648c:	andeq	r6, r1, r4, lsl r5
   16490:	andeq	r6, r1, r0, asr #10
   16494:	andeq	r6, r1, r4, ror r5
   16498:	andeq	r6, r1, ip, lsr #11
   1649c:	andeq	r6, r1, r8, ror #11
   164a0:	andeq	r6, r1, r4, lsr #12
   164a4:	andeq	r6, r1, r8, ror #12
   164a8:			; <UNDEFINED> instruction: 0x000166b4
   164ac:			; <UNDEFINED> instruction: 0x000164b0
   164b0:	ldr	r1, [pc, #732]	; 16794 <__assert_fail@plt+0x57e0>
   164b4:	mov	r2, #5
   164b8:	mov	r0, #0
   164bc:	bl	10dbc <dcgettext@plt>
   164c0:	ldr	ip, [sp, #64]	; 0x40
   164c4:	ldr	r1, [sp, #60]	; 0x3c
   164c8:	ldr	r2, [sp, #56]	; 0x38
   164cc:	ldr	lr, [sp, #48]	; 0x30
   164d0:	str	ip, [sp, #28]
   164d4:	str	r1, [sp, #24]
   164d8:	ldr	ip, [sp, #44]	; 0x2c
   164dc:	ldr	r1, [sp, #40]	; 0x28
   164e0:	ldr	r4, [sp, #52]	; 0x34
   164e4:	str	r2, [sp, #20]
   164e8:	ldr	r2, [sp, #36]	; 0x24
   164ec:	stmib	sp, {r1, ip, lr}
   164f0:	mov	r1, #1
   164f4:	str	r2, [sp]
   164f8:	ldr	r3, [sp, #32]
   164fc:	str	r4, [sp, #16]
   16500:	mov	r2, r0
   16504:	mov	r0, r5
   16508:	bl	10f18 <__fprintf_chk@plt>
   1650c:	add	sp, sp, #76	; 0x4c
   16510:	pop	{r4, r5, pc}
   16514:	mov	r2, #5
   16518:	ldr	r1, [pc, #632]	; 16798 <__assert_fail@plt+0x57e4>
   1651c:	mov	r0, #0
   16520:	bl	10dbc <dcgettext@plt>
   16524:	ldr	r3, [sp, #32]
   16528:	mov	r1, #1
   1652c:	mov	r2, r0
   16530:	mov	r0, r5
   16534:	add	sp, sp, #76	; 0x4c
   16538:	pop	{r4, r5, lr}
   1653c:	b	10f18 <__fprintf_chk@plt>
   16540:	mov	r2, #5
   16544:	ldr	r1, [pc, #592]	; 1679c <__assert_fail@plt+0x57e8>
   16548:	mov	r0, #0
   1654c:	bl	10dbc <dcgettext@plt>
   16550:	ldr	r2, [sp, #36]	; 0x24
   16554:	ldr	r3, [sp, #32]
   16558:	str	r2, [sp, #88]	; 0x58
   1655c:	mov	r1, #1
   16560:	mov	r2, r0
   16564:	mov	r0, r5
   16568:	add	sp, sp, #76	; 0x4c
   1656c:	pop	{r4, r5, lr}
   16570:	b	10f18 <__fprintf_chk@plt>
   16574:	mov	r2, #5
   16578:	ldr	r1, [pc, #544]	; 167a0 <__assert_fail@plt+0x57ec>
   1657c:	mov	r0, #0
   16580:	bl	10dbc <dcgettext@plt>
   16584:	ldr	r1, [sp, #40]	; 0x28
   16588:	ldr	r2, [sp, #36]	; 0x24
   1658c:	str	r1, [sp, #4]
   16590:	str	r2, [sp]
   16594:	ldr	r3, [sp, #32]
   16598:	mov	r1, #1
   1659c:	mov	r2, r0
   165a0:	mov	r0, r5
   165a4:	bl	10f18 <__fprintf_chk@plt>
   165a8:	b	1650c <__assert_fail@plt+0x5558>
   165ac:	mov	r2, #5
   165b0:	ldr	r1, [pc, #492]	; 167a4 <__assert_fail@plt+0x57f0>
   165b4:	mov	r0, #0
   165b8:	bl	10dbc <dcgettext@plt>
   165bc:	ldr	r1, [sp, #40]	; 0x28
   165c0:	ldr	ip, [sp, #44]	; 0x2c
   165c4:	ldr	r2, [sp, #36]	; 0x24
   165c8:	ldr	r3, [sp, #32]
   165cc:	stmib	sp, {r1, ip}
   165d0:	str	r2, [sp]
   165d4:	mov	r1, #1
   165d8:	mov	r2, r0
   165dc:	mov	r0, r5
   165e0:	bl	10f18 <__fprintf_chk@plt>
   165e4:	b	1650c <__assert_fail@plt+0x5558>
   165e8:	mov	r2, #5
   165ec:	ldr	r1, [pc, #436]	; 167a8 <__assert_fail@plt+0x57f4>
   165f0:	mov	r0, #0
   165f4:	bl	10dbc <dcgettext@plt>
   165f8:	add	r1, sp, #40	; 0x28
   165fc:	ldr	r2, [sp, #36]	; 0x24
   16600:	ldm	r1, {r1, ip, lr}
   16604:	ldr	r3, [sp, #32]
   16608:	str	r2, [sp]
   1660c:	stmib	sp, {r1, ip, lr}
   16610:	mov	r1, #1
   16614:	mov	r2, r0
   16618:	mov	r0, r5
   1661c:	bl	10f18 <__fprintf_chk@plt>
   16620:	b	1650c <__assert_fail@plt+0x5558>
   16624:	mov	r2, #5
   16628:	ldr	r1, [pc, #380]	; 167ac <__assert_fail@plt+0x57f8>
   1662c:	mov	r0, #0
   16630:	bl	10dbc <dcgettext@plt>
   16634:	add	r1, sp, #40	; 0x28
   16638:	ldr	r2, [sp, #36]	; 0x24
   1663c:	ldm	r1, {r1, ip, lr}
   16640:	ldr	r4, [sp, #52]	; 0x34
   16644:	str	r2, [sp]
   16648:	stmib	sp, {r1, ip, lr}
   1664c:	mov	r1, #1
   16650:	ldr	r3, [sp, #32]
   16654:	str	r4, [sp, #16]
   16658:	mov	r2, r0
   1665c:	mov	r0, r5
   16660:	bl	10f18 <__fprintf_chk@plt>
   16664:	b	1650c <__assert_fail@plt+0x5558>
   16668:	mov	r2, #5
   1666c:	ldr	r1, [pc, #316]	; 167b0 <__assert_fail@plt+0x57fc>
   16670:	mov	r0, #0
   16674:	bl	10dbc <dcgettext@plt>
   16678:	add	r1, sp, #40	; 0x28
   1667c:	ldr	r2, [sp, #56]	; 0x38
   16680:	ldm	r1, {r1, ip, lr}
   16684:	ldr	r4, [sp, #52]	; 0x34
   16688:	str	r2, [sp, #20]
   1668c:	ldr	r2, [sp, #36]	; 0x24
   16690:	stmib	sp, {r1, ip, lr}
   16694:	mov	r1, #1
   16698:	str	r2, [sp]
   1669c:	ldr	r3, [sp, #32]
   166a0:	str	r4, [sp, #16]
   166a4:	mov	r2, r0
   166a8:	mov	r0, r5
   166ac:	bl	10f18 <__fprintf_chk@plt>
   166b0:	b	1650c <__assert_fail@plt+0x5558>
   166b4:	mov	r2, #5
   166b8:	ldr	r1, [pc, #244]	; 167b4 <__assert_fail@plt+0x5800>
   166bc:	mov	r0, #0
   166c0:	bl	10dbc <dcgettext@plt>
   166c4:	ldr	r1, [sp, #60]	; 0x3c
   166c8:	ldr	r2, [sp, #56]	; 0x38
   166cc:	ldr	lr, [sp, #48]	; 0x30
   166d0:	ldr	ip, [sp, #44]	; 0x2c
   166d4:	str	r1, [sp, #24]
   166d8:	ldr	r1, [sp, #40]	; 0x28
   166dc:	ldr	r4, [sp, #52]	; 0x34
   166e0:	str	r2, [sp, #20]
   166e4:	ldr	r2, [sp, #36]	; 0x24
   166e8:	stmib	sp, {r1, ip, lr}
   166ec:	mov	r1, #1
   166f0:	str	r2, [sp]
   166f4:	ldr	r3, [sp, #32]
   166f8:	str	r4, [sp, #16]
   166fc:	mov	r2, r0
   16700:	mov	r0, r5
   16704:	bl	10f18 <__fprintf_chk@plt>
   16708:	b	1650c <__assert_fail@plt+0x5558>
   1670c:	str	r3, [sp]
   16710:	mov	r1, #1
   16714:	mov	r3, r2
   16718:	mov	r0, r5
   1671c:	ldr	r2, [pc, #148]	; 167b8 <__assert_fail@plt+0x5804>
   16720:	bl	10f18 <__fprintf_chk@plt>
   16724:	b	16414 <__assert_fail@plt+0x5460>
   16728:	mov	r2, #5
   1672c:	ldr	r1, [pc, #136]	; 167bc <__assert_fail@plt+0x5808>
   16730:	b	164b8 <__assert_fail@plt+0x5504>
   16734:	mov	r4, r0
   16738:	b	163f4 <__assert_fail@plt+0x5440>
   1673c:	mov	r4, #1
   16740:	b	163f4 <__assert_fail@plt+0x5440>
   16744:	mov	r4, #2
   16748:	b	163f4 <__assert_fail@plt+0x5440>
   1674c:	mov	r4, #3
   16750:	b	163f4 <__assert_fail@plt+0x5440>
   16754:	mov	r4, #4
   16758:	b	163f4 <__assert_fail@plt+0x5440>
   1675c:	mov	r4, #5
   16760:	b	163f4 <__assert_fail@plt+0x5440>
   16764:	mov	r4, #6
   16768:	b	163f4 <__assert_fail@plt+0x5440>
   1676c:	mov	r4, #7
   16770:	b	163f4 <__assert_fail@plt+0x5440>
   16774:	mov	r4, #8
   16778:	b	163f4 <__assert_fail@plt+0x5440>
   1677c:	andeq	r9, r1, r4, lsl r5
   16780:	andeq	r9, r1, r8, lsr #10
   16784:	andeq	r0, r0, r6, ror #15
   16788:	andeq	r9, r1, r0, lsl #16
   1678c:	andeq	r9, r1, ip, lsr #10
   16790:	ldrdeq	r9, [r1], -r8
   16794:	andeq	r9, r1, r8, lsl #14
   16798:	strdeq	r9, [r1], -ip
   1679c:	andeq	r9, r1, ip, lsl #12
   167a0:	andeq	r9, r1, r4, lsr #12
   167a4:	andeq	r9, r1, r0, asr #12
   167a8:	andeq	r9, r1, r0, ror #12
   167ac:	andeq	r9, r1, r4, lsl #13
   167b0:	andeq	r9, r1, ip, lsr #13
   167b4:	ldrdeq	r9, [r1], -r8
   167b8:	andeq	r9, r1, r0, lsr #10
   167bc:	andeq	r9, r1, ip, lsr r7
   167c0:	push	{r3}		; (str r3, [sp, #-4]!)
   167c4:	push	{lr}		; (str lr, [sp, #-4]!)
   167c8:	sub	sp, sp, #56	; 0x38
   167cc:	add	r3, sp, #64	; 0x40
   167d0:	ldr	ip, [sp, #64]	; 0x40
   167d4:	str	r3, [sp, #12]
   167d8:	cmp	ip, #0
   167dc:	str	ip, [sp, #16]
   167e0:	beq	16878 <__assert_fail@plt+0x58c4>
   167e4:	ldr	ip, [sp, #68]	; 0x44
   167e8:	cmp	ip, #0
   167ec:	str	ip, [sp, #20]
   167f0:	beq	16898 <__assert_fail@plt+0x58e4>
   167f4:	ldr	ip, [sp, #72]	; 0x48
   167f8:	cmp	ip, #0
   167fc:	str	ip, [sp, #24]
   16800:	beq	168a0 <__assert_fail@plt+0x58ec>
   16804:	ldr	ip, [sp, #76]	; 0x4c
   16808:	cmp	ip, #0
   1680c:	str	ip, [sp, #28]
   16810:	beq	168a8 <__assert_fail@plt+0x58f4>
   16814:	ldr	ip, [sp, #80]	; 0x50
   16818:	cmp	ip, #0
   1681c:	str	ip, [sp, #32]
   16820:	beq	168b0 <__assert_fail@plt+0x58fc>
   16824:	ldr	ip, [sp, #84]	; 0x54
   16828:	cmp	ip, #0
   1682c:	str	ip, [sp, #36]	; 0x24
   16830:	beq	168b8 <__assert_fail@plt+0x5904>
   16834:	ldr	ip, [sp, #88]	; 0x58
   16838:	cmp	ip, #0
   1683c:	str	ip, [sp, #40]	; 0x28
   16840:	beq	168c0 <__assert_fail@plt+0x590c>
   16844:	ldr	ip, [sp, #92]	; 0x5c
   16848:	cmp	ip, #0
   1684c:	str	ip, [sp, #44]	; 0x2c
   16850:	beq	168c8 <__assert_fail@plt+0x5914>
   16854:	ldr	ip, [sp, #96]	; 0x60
   16858:	cmp	ip, #0
   1685c:	str	ip, [sp, #48]	; 0x30
   16860:	beq	168d0 <__assert_fail@plt+0x591c>
   16864:	ldr	ip, [sp, #100]	; 0x64
   16868:	cmp	ip, #0
   1686c:	str	ip, [sp, #52]	; 0x34
   16870:	movne	ip, #10
   16874:	moveq	ip, #9
   16878:	add	r3, sp, #16
   1687c:	stm	sp, {r3, ip}
   16880:	ldr	r3, [sp, #60]	; 0x3c
   16884:	bl	15f6c <__assert_fail@plt+0x4fb8>
   16888:	add	sp, sp, #56	; 0x38
   1688c:	pop	{lr}		; (ldr lr, [sp], #4)
   16890:	add	sp, sp, #4
   16894:	bx	lr
   16898:	mov	ip, #1
   1689c:	b	16878 <__assert_fail@plt+0x58c4>
   168a0:	mov	ip, #2
   168a4:	b	16878 <__assert_fail@plt+0x58c4>
   168a8:	mov	ip, #3
   168ac:	b	16878 <__assert_fail@plt+0x58c4>
   168b0:	mov	ip, #4
   168b4:	b	16878 <__assert_fail@plt+0x58c4>
   168b8:	mov	ip, #5
   168bc:	b	16878 <__assert_fail@plt+0x58c4>
   168c0:	mov	ip, #6
   168c4:	b	16878 <__assert_fail@plt+0x58c4>
   168c8:	mov	ip, #7
   168cc:	b	16878 <__assert_fail@plt+0x58c4>
   168d0:	mov	ip, #8
   168d4:	b	16878 <__assert_fail@plt+0x58c4>
   168d8:	ldr	r3, [pc, #116]	; 16954 <__assert_fail@plt+0x59a0>
   168dc:	push	{r4, lr}
   168e0:	mov	r0, #10
   168e4:	ldr	r1, [r3]
   168e8:	bl	10db0 <fputc_unlocked@plt>
   168ec:	mov	r2, #5
   168f0:	ldr	r1, [pc, #96]	; 16958 <__assert_fail@plt+0x59a4>
   168f4:	mov	r0, #0
   168f8:	bl	10dbc <dcgettext@plt>
   168fc:	ldr	r2, [pc, #88]	; 1695c <__assert_fail@plt+0x59a8>
   16900:	mov	r1, r0
   16904:	mov	r0, #1
   16908:	bl	10f00 <__printf_chk@plt>
   1690c:	mov	r2, #5
   16910:	ldr	r1, [pc, #72]	; 16960 <__assert_fail@plt+0x59ac>
   16914:	mov	r0, #0
   16918:	bl	10dbc <dcgettext@plt>
   1691c:	ldr	r3, [pc, #64]	; 16964 <__assert_fail@plt+0x59b0>
   16920:	ldr	r2, [pc, #64]	; 16968 <__assert_fail@plt+0x59b4>
   16924:	mov	r1, r0
   16928:	mov	r0, #1
   1692c:	bl	10f00 <__printf_chk@plt>
   16930:	mov	r2, #5
   16934:	ldr	r1, [pc, #48]	; 1696c <__assert_fail@plt+0x59b8>
   16938:	mov	r0, #0
   1693c:	bl	10dbc <dcgettext@plt>
   16940:	ldr	r2, [pc, #40]	; 16970 <__assert_fail@plt+0x59bc>
   16944:	pop	{r4, lr}
   16948:	mov	r1, r0
   1694c:	mov	r0, #1
   16950:	b	10f00 <__printf_chk@plt>
   16954:	andeq	sl, r2, r4, asr r1
   16958:	andeq	r9, r1, r8, ror r7
   1695c:	andeq	r9, r1, ip, lsl #15
   16960:	andeq	r9, r1, r4, lsr #15
   16964:	andeq	r9, r1, r8, rrx
   16968:	muleq	r1, r0, r0
   1696c:			; <UNDEFINED> instruction: 0x000197b8
   16970:	andeq	r9, r1, r0, ror #15
   16974:	push	{r4, r5, r6, lr}
   16978:	mov	r6, r0
   1697c:	mov	r5, r1
   16980:	mov	r4, r2
   16984:	bl	18464 <__assert_fail@plt+0x74b0>
   16988:	cmp	r0, #0
   1698c:	popne	{r4, r5, r6, pc}
   16990:	cmp	r6, #0
   16994:	beq	169a4 <__assert_fail@plt+0x59f0>
   16998:	cmp	r5, #0
   1699c:	cmpne	r4, #0
   169a0:	popeq	{r4, r5, r6, pc}
   169a4:	bl	16ff0 <__assert_fail@plt+0x603c>
   169a8:	push	{r4, lr}
   169ac:	bl	17e74 <__assert_fail@plt+0x6ec0>
   169b0:	cmp	r0, #0
   169b4:	popne	{r4, pc}
   169b8:	bl	16ff0 <__assert_fail@plt+0x603c>
   169bc:	push	{r4, lr}
   169c0:	bl	17e74 <__assert_fail@plt+0x6ec0>
   169c4:	cmp	r0, #0
   169c8:	popne	{r4, pc}
   169cc:	bl	16ff0 <__assert_fail@plt+0x603c>
   169d0:	push	{r4, lr}
   169d4:	bl	17e74 <__assert_fail@plt+0x6ec0>
   169d8:	cmp	r0, #0
   169dc:	popne	{r4, pc}
   169e0:	bl	16ff0 <__assert_fail@plt+0x603c>
   169e4:	push	{r4, r5, r6, lr}
   169e8:	mov	r5, r0
   169ec:	mov	r4, r1
   169f0:	bl	17ea0 <__assert_fail@plt+0x6eec>
   169f4:	cmp	r0, #0
   169f8:	popne	{r4, r5, r6, pc}
   169fc:	adds	r4, r4, #0
   16a00:	movne	r4, #1
   16a04:	cmp	r5, #0
   16a08:	orreq	r4, r4, #1
   16a0c:	cmp	r4, #0
   16a10:	popeq	{r4, r5, r6, pc}
   16a14:	bl	16ff0 <__assert_fail@plt+0x603c>
   16a18:	push	{r4, lr}
   16a1c:	cmp	r1, #0
   16a20:	orreq	r1, r1, #1
   16a24:	bl	17ea0 <__assert_fail@plt+0x6eec>
   16a28:	cmp	r0, #0
   16a2c:	popne	{r4, pc}
   16a30:	bl	16ff0 <__assert_fail@plt+0x603c>
   16a34:	push	{r4, r5, r6, lr}
   16a38:	mov	r6, r0
   16a3c:	mov	r5, r1
   16a40:	mov	r4, r2
   16a44:	bl	18464 <__assert_fail@plt+0x74b0>
   16a48:	cmp	r0, #0
   16a4c:	popne	{r4, r5, r6, pc}
   16a50:	cmp	r6, #0
   16a54:	beq	16a64 <__assert_fail@plt+0x5ab0>
   16a58:	cmp	r5, #0
   16a5c:	cmpne	r4, #0
   16a60:	popeq	{r4, r5, r6, pc}
   16a64:	bl	16ff0 <__assert_fail@plt+0x603c>
   16a68:	cmp	r2, #0
   16a6c:	cmpne	r1, #0
   16a70:	moveq	r2, #1
   16a74:	moveq	r1, r2
   16a78:	push	{r4, lr}
   16a7c:	bl	18464 <__assert_fail@plt+0x74b0>
   16a80:	cmp	r0, #0
   16a84:	popne	{r4, pc}
   16a88:	bl	16ff0 <__assert_fail@plt+0x603c>
   16a8c:	push	{r4, lr}
   16a90:	mov	r2, r1
   16a94:	mov	r1, r0
   16a98:	mov	r0, #0
   16a9c:	bl	18464 <__assert_fail@plt+0x74b0>
   16aa0:	cmp	r0, #0
   16aa4:	popne	{r4, pc}
   16aa8:	bl	16ff0 <__assert_fail@plt+0x603c>
   16aac:	cmp	r1, #0
   16ab0:	cmpne	r0, #0
   16ab4:	moveq	r2, #1
   16ab8:	movne	r2, r1
   16abc:	moveq	r1, r2
   16ac0:	movne	r1, r0
   16ac4:	push	{r4, lr}
   16ac8:	mov	r0, #0
   16acc:	bl	18464 <__assert_fail@plt+0x74b0>
   16ad0:	cmp	r0, #0
   16ad4:	popne	{r4, pc}
   16ad8:	bl	16ff0 <__assert_fail@plt+0x603c>
   16adc:	cmp	r0, #0
   16ae0:	push	{r4, r5, r6, lr}
   16ae4:	mov	r5, r1
   16ae8:	ldr	r4, [r1]
   16aec:	beq	16b28 <__assert_fail@plt+0x5b74>
   16af0:	lsr	r2, r4, #1
   16af4:	add	r3, r2, #1
   16af8:	mvn	r3, r3
   16afc:	cmp	r4, r3
   16b00:	bhi	16b44 <__assert_fail@plt+0x5b90>
   16b04:	add	r4, r4, #1
   16b08:	add	r4, r4, r2
   16b0c:	mov	r1, r4
   16b10:	mov	r2, #1
   16b14:	bl	18464 <__assert_fail@plt+0x74b0>
   16b18:	cmp	r0, #0
   16b1c:	beq	16b48 <__assert_fail@plt+0x5b94>
   16b20:	str	r4, [r5]
   16b24:	pop	{r4, r5, r6, pc}
   16b28:	cmp	r4, #0
   16b2c:	moveq	r4, #64	; 0x40
   16b30:	mov	r1, r4
   16b34:	mov	r2, #1
   16b38:	bl	18464 <__assert_fail@plt+0x74b0>
   16b3c:	cmp	r0, #0
   16b40:	bne	16b20 <__assert_fail@plt+0x5b6c>
   16b44:	bl	16ff0 <__assert_fail@plt+0x603c>
   16b48:	cmp	r4, #0
   16b4c:	bne	16b44 <__assert_fail@plt+0x5b90>
   16b50:	str	r4, [r5]
   16b54:	pop	{r4, r5, r6, pc}
   16b58:	cmp	r0, #0
   16b5c:	push	{r4, r5, r6, lr}
   16b60:	mov	r5, r1
   16b64:	ldr	r4, [r1]
   16b68:	mov	r6, r2
   16b6c:	beq	16bb0 <__assert_fail@plt+0x5bfc>
   16b70:	lsr	r1, r4, #1
   16b74:	add	r3, r1, #1
   16b78:	mvn	r3, r3
   16b7c:	cmp	r4, r3
   16b80:	bhi	16be8 <__assert_fail@plt+0x5c34>
   16b84:	add	r4, r4, #1
   16b88:	add	r4, r4, r1
   16b8c:	mov	r1, r4
   16b90:	bl	18464 <__assert_fail@plt+0x74b0>
   16b94:	cmp	r0, #0
   16b98:	bne	16ba8 <__assert_fail@plt+0x5bf4>
   16b9c:	cmp	r4, #0
   16ba0:	cmpne	r6, #0
   16ba4:	bne	16be8 <__assert_fail@plt+0x5c34>
   16ba8:	str	r4, [r5]
   16bac:	pop	{r4, r5, r6, pc}
   16bb0:	cmp	r4, #0
   16bb4:	bne	16bd0 <__assert_fail@plt+0x5c1c>
   16bb8:	mov	r1, r2
   16bbc:	mov	r0, #64	; 0x40
   16bc0:	bl	185a4 <__assert_fail@plt+0x75f0>
   16bc4:	cmp	r0, #0
   16bc8:	movne	r4, r0
   16bcc:	addeq	r4, r0, #1
   16bd0:	mov	r2, r6
   16bd4:	mov	r1, r4
   16bd8:	mov	r0, #0
   16bdc:	bl	18464 <__assert_fail@plt+0x74b0>
   16be0:	cmp	r0, #0
   16be4:	bne	16ba8 <__assert_fail@plt+0x5bf4>
   16be8:	bl	16ff0 <__assert_fail@plt+0x603c>
   16bec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bf0:	sub	sp, sp, #12
   16bf4:	ldr	r6, [r1]
   16bf8:	mov	r8, r1
   16bfc:	mov	r9, r0
   16c00:	asrs	r4, r6, #1
   16c04:	mov	sl, r2
   16c08:	mov	fp, r3
   16c0c:	ldr	r7, [sp, #48]	; 0x30
   16c10:	bmi	16d8c <__assert_fail@plt+0x5dd8>
   16c14:	mvn	r1, #-2147483648	; 0x80000000
   16c18:	sub	r1, r1, r4
   16c1c:	cmp	r6, r1
   16c20:	movle	r1, #0
   16c24:	movgt	r1, #1
   16c28:	mvn	r3, fp
   16c2c:	cmp	r1, #0
   16c30:	addeq	r4, r4, r6
   16c34:	mvnne	r4, #-2147483648	; 0x80000000
   16c38:	lsr	r3, r3, #31
   16c3c:	cmp	fp, r4
   16c40:	movge	r2, #0
   16c44:	andlt	r2, r3, #1
   16c48:	cmp	r2, #0
   16c4c:	beq	16d3c <__assert_fail@plt+0x5d88>
   16c50:	cmp	r7, #0
   16c54:	blt	16e24 <__assert_fail@plt+0x5e70>
   16c58:	bne	16e1c <__assert_fail@plt+0x5e68>
   16c5c:	mov	r5, #64	; 0x40
   16c60:	mov	r1, r7
   16c64:	mov	r0, r5
   16c68:	str	r3, [sp, #4]
   16c6c:	bl	187b0 <__assert_fail@plt+0x77fc>
   16c70:	mov	r1, r7
   16c74:	mov	r4, r0
   16c78:	mov	r0, r5
   16c7c:	bl	189d0 <__assert_fail@plt+0x7a1c>
   16c80:	ldr	r3, [sp, #4]
   16c84:	sub	r5, r5, r1
   16c88:	cmp	r9, #0
   16c8c:	sub	r2, r4, r6
   16c90:	streq	r9, [r8]
   16c94:	cmp	r2, sl
   16c98:	bge	16d1c <__assert_fail@plt+0x5d68>
   16c9c:	cmp	sl, #0
   16ca0:	blt	16dbc <__assert_fail@plt+0x5e08>
   16ca4:	cmp	r6, #0
   16ca8:	blt	16cc8 <__assert_fail@plt+0x5d14>
   16cac:	mvn	r2, #-2147483648	; 0x80000000
   16cb0:	sub	r2, r2, sl
   16cb4:	cmp	r6, r2
   16cb8:	movle	r2, #0
   16cbc:	movgt	r2, #1
   16cc0:	cmp	r2, #0
   16cc4:	bne	16db8 <__assert_fail@plt+0x5e04>
   16cc8:	add	r6, r6, sl
   16ccc:	cmp	fp, r6
   16cd0:	movge	r3, #0
   16cd4:	andlt	r3, r3, #1
   16cd8:	cmp	r3, #0
   16cdc:	mov	r4, r6
   16ce0:	bne	16db8 <__assert_fail@plt+0x5e04>
   16ce4:	cmp	r7, #0
   16ce8:	blt	16dd0 <__assert_fail@plt+0x5e1c>
   16cec:	beq	16d18 <__assert_fail@plt+0x5d64>
   16cf0:	cmp	r6, #0
   16cf4:	blt	16e74 <__assert_fail@plt+0x5ec0>
   16cf8:	mov	r1, r7
   16cfc:	mvn	r0, #-2147483648	; 0x80000000
   16d00:	bl	187b0 <__assert_fail@plt+0x77fc>
   16d04:	cmp	r6, r0
   16d08:	movle	r0, #0
   16d0c:	movgt	r0, #1
   16d10:	cmp	r0, #0
   16d14:	bne	16db8 <__assert_fail@plt+0x5e04>
   16d18:	mul	r5, r6, r7
   16d1c:	mov	r1, r5
   16d20:	mov	r0, r9
   16d24:	bl	17ea0 <__assert_fail@plt+0x6eec>
   16d28:	cmp	r0, #0
   16d2c:	beq	16da0 <__assert_fail@plt+0x5dec>
   16d30:	str	r4, [r8]
   16d34:	add	sp, sp, #12
   16d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d3c:	cmp	r7, #0
   16d40:	blt	16dfc <__assert_fail@plt+0x5e48>
   16d44:	beq	16c5c <__assert_fail@plt+0x5ca8>
   16d48:	cmp	r4, #0
   16d4c:	blt	16e2c <__assert_fail@plt+0x5e78>
   16d50:	mov	r1, r7
   16d54:	mvn	r0, #-2147483648	; 0x80000000
   16d58:	str	r3, [sp, #4]
   16d5c:	bl	187b0 <__assert_fail@plt+0x77fc>
   16d60:	ldr	r3, [sp, #4]
   16d64:	cmp	r0, r4
   16d68:	movge	r0, #0
   16d6c:	movlt	r0, #1
   16d70:	cmp	r0, #0
   16d74:	mvnne	r5, #-2147483648	; 0x80000000
   16d78:	bne	16c60 <__assert_fail@plt+0x5cac>
   16d7c:	mul	r5, r7, r4
   16d80:	cmp	r5, #63	; 0x3f
   16d84:	bgt	16c88 <__assert_fail@plt+0x5cd4>
   16d88:	b	16c5c <__assert_fail@plt+0x5ca8>
   16d8c:	rsb	r1, r4, #-2147483648	; 0x80000000
   16d90:	cmp	r6, r1
   16d94:	movge	r1, #0
   16d98:	movlt	r1, #1
   16d9c:	b	16c28 <__assert_fail@plt+0x5c74>
   16da0:	adds	r5, r5, #0
   16da4:	movne	r5, #1
   16da8:	cmp	r9, #0
   16dac:	orreq	r5, r5, #1
   16db0:	cmp	r5, #0
   16db4:	beq	16d30 <__assert_fail@plt+0x5d7c>
   16db8:	bl	16ff0 <__assert_fail@plt+0x603c>
   16dbc:	rsb	r2, sl, #-2147483648	; 0x80000000
   16dc0:	cmp	r6, r2
   16dc4:	movge	r2, #0
   16dc8:	movlt	r2, #1
   16dcc:	b	16cc0 <__assert_fail@plt+0x5d0c>
   16dd0:	cmp	r6, #0
   16dd4:	blt	16e58 <__assert_fail@plt+0x5ea4>
   16dd8:	cmn	r7, #1
   16ddc:	beq	16d18 <__assert_fail@plt+0x5d64>
   16de0:	mov	r1, r7
   16de4:	mov	r0, #-2147483648	; 0x80000000
   16de8:	bl	187b0 <__assert_fail@plt+0x77fc>
   16dec:	cmp	r6, r0
   16df0:	movle	r0, #0
   16df4:	movgt	r0, #1
   16df8:	b	16d10 <__assert_fail@plt+0x5d5c>
   16dfc:	cmp	r4, #0
   16e00:	blt	16e98 <__assert_fail@plt+0x5ee4>
   16e04:	cmn	r7, #1
   16e08:	beq	16d7c <__assert_fail@plt+0x5dc8>
   16e0c:	str	r3, [sp, #4]
   16e10:	mov	r1, r7
   16e14:	mov	r0, #-2147483648	; 0x80000000
   16e18:	b	16d5c <__assert_fail@plt+0x5da8>
   16e1c:	mov	r4, fp
   16e20:	b	16d50 <__assert_fail@plt+0x5d9c>
   16e24:	mov	r4, fp
   16e28:	b	16e04 <__assert_fail@plt+0x5e50>
   16e2c:	cmn	r4, #1
   16e30:	beq	16d7c <__assert_fail@plt+0x5dc8>
   16e34:	mov	r1, r4
   16e38:	mov	r0, #-2147483648	; 0x80000000
   16e3c:	str	r3, [sp, #4]
   16e40:	bl	187b0 <__assert_fail@plt+0x77fc>
   16e44:	ldr	r3, [sp, #4]
   16e48:	cmp	r7, r0
   16e4c:	movle	r0, #0
   16e50:	movgt	r0, #1
   16e54:	b	16d70 <__assert_fail@plt+0x5dbc>
   16e58:	mov	r1, r7
   16e5c:	mvn	r0, #-2147483648	; 0x80000000
   16e60:	bl	187b0 <__assert_fail@plt+0x77fc>
   16e64:	cmp	r6, r0
   16e68:	movge	r0, #0
   16e6c:	movlt	r0, #1
   16e70:	b	16d10 <__assert_fail@plt+0x5d5c>
   16e74:	cmn	r6, #1
   16e78:	beq	16d18 <__assert_fail@plt+0x5d64>
   16e7c:	mov	r1, r6
   16e80:	mov	r0, #-2147483648	; 0x80000000
   16e84:	bl	187b0 <__assert_fail@plt+0x77fc>
   16e88:	cmp	r7, r0
   16e8c:	movle	r0, #0
   16e90:	movgt	r0, #1
   16e94:	b	16d10 <__assert_fail@plt+0x5d5c>
   16e98:	mov	r1, r7
   16e9c:	mvn	r0, #-2147483648	; 0x80000000
   16ea0:	str	r3, [sp, #4]
   16ea4:	bl	187b0 <__assert_fail@plt+0x77fc>
   16ea8:	ldr	r3, [sp, #4]
   16eac:	cmp	r0, r4
   16eb0:	movle	r0, #0
   16eb4:	movgt	r0, #1
   16eb8:	b	16d70 <__assert_fail@plt+0x5dbc>
   16ebc:	push	{r4, lr}
   16ec0:	mov	r1, #1
   16ec4:	bl	17e2c <__assert_fail@plt+0x6e78>
   16ec8:	cmp	r0, #0
   16ecc:	popne	{r4, pc}
   16ed0:	bl	16ff0 <__assert_fail@plt+0x603c>
   16ed4:	push	{r4, lr}
   16ed8:	mov	r1, #1
   16edc:	bl	17e2c <__assert_fail@plt+0x6e78>
   16ee0:	cmp	r0, #0
   16ee4:	popne	{r4, pc}
   16ee8:	bl	16ff0 <__assert_fail@plt+0x603c>
   16eec:	push	{r4, lr}
   16ef0:	bl	17e2c <__assert_fail@plt+0x6e78>
   16ef4:	cmp	r0, #0
   16ef8:	popne	{r4, pc}
   16efc:	bl	16ff0 <__assert_fail@plt+0x603c>
   16f00:	push	{r4, lr}
   16f04:	bl	17e2c <__assert_fail@plt+0x6e78>
   16f08:	cmp	r0, #0
   16f0c:	popne	{r4, pc}
   16f10:	bl	16ff0 <__assert_fail@plt+0x603c>
   16f14:	push	{r4, r5, r6, lr}
   16f18:	mov	r6, r0
   16f1c:	mov	r0, r1
   16f20:	mov	r4, r1
   16f24:	bl	17e74 <__assert_fail@plt+0x6ec0>
   16f28:	subs	r5, r0, #0
   16f2c:	beq	16f44 <__assert_fail@plt+0x5f90>
   16f30:	mov	r2, r4
   16f34:	mov	r1, r6
   16f38:	bl	10d74 <memcpy@plt>
   16f3c:	mov	r0, r5
   16f40:	pop	{r4, r5, r6, pc}
   16f44:	bl	16ff0 <__assert_fail@plt+0x603c>
   16f48:	push	{r4, r5, r6, lr}
   16f4c:	mov	r6, r0
   16f50:	mov	r0, r1
   16f54:	mov	r4, r1
   16f58:	bl	17e74 <__assert_fail@plt+0x6ec0>
   16f5c:	subs	r5, r0, #0
   16f60:	beq	16f78 <__assert_fail@plt+0x5fc4>
   16f64:	mov	r2, r4
   16f68:	mov	r1, r6
   16f6c:	bl	10d74 <memcpy@plt>
   16f70:	mov	r0, r5
   16f74:	pop	{r4, r5, r6, pc}
   16f78:	bl	16ff0 <__assert_fail@plt+0x603c>
   16f7c:	push	{r4, r5, r6, lr}
   16f80:	mov	r6, r0
   16f84:	add	r0, r1, #1
   16f88:	mov	r4, r1
   16f8c:	bl	17e74 <__assert_fail@plt+0x6ec0>
   16f90:	subs	r5, r0, #0
   16f94:	beq	16fb4 <__assert_fail@plt+0x6000>
   16f98:	mov	r3, #0
   16f9c:	mov	r1, r6
   16fa0:	strb	r3, [r5, r4]
   16fa4:	mov	r2, r4
   16fa8:	bl	10d74 <memcpy@plt>
   16fac:	mov	r0, r5
   16fb0:	pop	{r4, r5, r6, pc}
   16fb4:	bl	16ff0 <__assert_fail@plt+0x603c>
   16fb8:	push	{r4, r5, r6, lr}
   16fbc:	mov	r6, r0
   16fc0:	bl	10ec4 <strlen@plt>
   16fc4:	add	r4, r0, #1
   16fc8:	mov	r0, r4
   16fcc:	bl	17e74 <__assert_fail@plt+0x6ec0>
   16fd0:	subs	r5, r0, #0
   16fd4:	beq	16fec <__assert_fail@plt+0x6038>
   16fd8:	mov	r2, r4
   16fdc:	mov	r1, r6
   16fe0:	bl	10d74 <memcpy@plt>
   16fe4:	mov	r0, r5
   16fe8:	pop	{r4, r5, r6, pc}
   16fec:	bl	16ff0 <__assert_fail@plt+0x603c>
   16ff0:	ldr	r3, [pc, #44]	; 17024 <__assert_fail@plt+0x6070>
   16ff4:	push	{r4, lr}
   16ff8:	mov	r2, #5
   16ffc:	ldr	r1, [pc, #36]	; 17028 <__assert_fail@plt+0x6074>
   17000:	mov	r0, #0
   17004:	ldr	r4, [r3]
   17008:	bl	10dbc <dcgettext@plt>
   1700c:	ldr	r2, [pc, #24]	; 1702c <__assert_fail@plt+0x6078>
   17010:	mov	r1, #0
   17014:	mov	r3, r0
   17018:	mov	r0, r4
   1701c:	bl	10e34 <error@plt>
   17020:	bl	10fa8 <abort@plt>
   17024:	strdeq	sl, [r2], -ip
   17028:	andeq	r9, r1, r0, lsr r8
   1702c:	strdeq	r9, [r1], -r8
   17030:	push	{r4, lr}
   17034:	bl	17f1c <__assert_fail@plt+0x6f68>
   17038:	subs	r4, r0, #0
   1703c:	beq	17048 <__assert_fail@plt+0x6094>
   17040:	mov	r0, r4
   17044:	pop	{r4, pc}
   17048:	bl	10edc <__errno_location@plt>
   1704c:	ldr	r3, [r0]
   17050:	cmp	r3, #12
   17054:	bne	17040 <__assert_fail@plt+0x608c>
   17058:	bl	16ff0 <__assert_fail@plt+0x603c>
   1705c:	andeq	r0, r0, r0
   17060:	cmp	r2, #36	; 0x24
   17064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17068:	sub	sp, sp, #52	; 0x34
   1706c:	bhi	17dfc <__assert_fail@plt+0x6e48>
   17070:	cmp	r1, #0
   17074:	mov	r6, r2
   17078:	mov	sl, r0
   1707c:	mov	r5, r1
   17080:	mov	r8, r3
   17084:	addeq	r5, sp, #44	; 0x2c
   17088:	bl	10edc <__errno_location@plt>
   1708c:	mov	r3, #0
   17090:	str	r3, [r0]
   17094:	mov	fp, r0
   17098:	bl	10eac <__ctype_b_loc@plt>
   1709c:	ldrb	r3, [sl]
   170a0:	mov	r2, sl
   170a4:	ldr	r0, [r0]
   170a8:	b	170b0 <__assert_fail@plt+0x60fc>
   170ac:	ldrb	r3, [r2, #1]!
   170b0:	lsl	r1, r3, #1
   170b4:	ldrh	r4, [r0, r1]
   170b8:	ands	r4, r4, #8192	; 0x2000
   170bc:	bne	170ac <__assert_fail@plt+0x60f8>
   170c0:	cmp	r3, #45	; 0x2d
   170c4:	bne	170d8 <__assert_fail@plt+0x6124>
   170c8:	mov	r4, #4
   170cc:	mov	r0, r4
   170d0:	add	sp, sp, #52	; 0x34
   170d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170d8:	mov	r2, r6
   170dc:	mov	r3, r4
   170e0:	mov	r1, r5
   170e4:	mov	r0, sl
   170e8:	bl	10d8c <__strtoull_internal@plt>
   170ec:	ldr	r9, [r5]
   170f0:	cmp	sl, r9
   170f4:	mov	r6, r0
   170f8:	mov	r7, r1
   170fc:	beq	17144 <__assert_fail@plt+0x6190>
   17100:	ldr	r4, [fp]
   17104:	cmp	r4, #0
   17108:	bne	17134 <__assert_fail@plt+0x6180>
   1710c:	ldr	r3, [sp, #88]	; 0x58
   17110:	cmp	r3, #0
   17114:	beq	17124 <__assert_fail@plt+0x6170>
   17118:	ldrb	sl, [r9]
   1711c:	cmp	sl, #0
   17120:	bne	17178 <__assert_fail@plt+0x61c4>
   17124:	mov	r0, r4
   17128:	strd	r6, [r8]
   1712c:	add	sp, sp, #52	; 0x34
   17130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17134:	cmp	r4, #34	; 0x22
   17138:	bne	170c8 <__assert_fail@plt+0x6114>
   1713c:	mov	r4, #1
   17140:	b	1710c <__assert_fail@plt+0x6158>
   17144:	ldr	r3, [sp, #88]	; 0x58
   17148:	cmp	r3, #0
   1714c:	beq	170c8 <__assert_fail@plt+0x6114>
   17150:	ldrb	sl, [r9]
   17154:	cmp	sl, #0
   17158:	beq	170c8 <__assert_fail@plt+0x6114>
   1715c:	mov	r1, sl
   17160:	mov	r0, r3
   17164:	bl	10ed0 <strchr@plt>
   17168:	cmp	r0, #0
   1716c:	movne	r6, #1
   17170:	movne	r7, #0
   17174:	beq	170c8 <__assert_fail@plt+0x6114>
   17178:	mov	r1, sl
   1717c:	ldr	r0, [sp, #88]	; 0x58
   17180:	bl	10ed0 <strchr@plt>
   17184:	cmp	r0, #0
   17188:	beq	17ce8 <__assert_fail@plt+0x6d34>
   1718c:	sub	r3, sl, #69	; 0x45
   17190:	cmp	r3, #47	; 0x2f
   17194:	ldrls	pc, [pc, r3, lsl #2]
   17198:	b	1728c <__assert_fail@plt+0x62d8>
   1719c:	andeq	r7, r1, ip, asr r2
   171a0:	andeq	r7, r1, ip, lsl #5
   171a4:	andeq	r7, r1, ip, asr r2
   171a8:	andeq	r7, r1, ip, lsl #5
   171ac:	andeq	r7, r1, ip, lsl #5
   171b0:	andeq	r7, r1, ip, lsl #5
   171b4:	andeq	r7, r1, ip, asr r2
   171b8:	andeq	r7, r1, ip, lsl #5
   171bc:	andeq	r7, r1, ip, asr r2
   171c0:	andeq	r7, r1, ip, lsl #5
   171c4:	andeq	r7, r1, ip, lsl #5
   171c8:	andeq	r7, r1, ip, asr r2
   171cc:	andeq	r7, r1, ip, lsl #5
   171d0:	andeq	r7, r1, ip, lsl #5
   171d4:	andeq	r7, r1, ip, lsl #5
   171d8:	andeq	r7, r1, ip, asr r2
   171dc:	andeq	r7, r1, ip, lsl #5
   171e0:	andeq	r7, r1, ip, lsl #5
   171e4:	andeq	r7, r1, ip, lsl #5
   171e8:	andeq	r7, r1, ip, lsl #5
   171ec:	andeq	r7, r1, ip, asr r2
   171f0:	andeq	r7, r1, ip, asr r2
   171f4:	andeq	r7, r1, ip, lsl #5
   171f8:	andeq	r7, r1, ip, lsl #5
   171fc:	andeq	r7, r1, ip, lsl #5
   17200:	andeq	r7, r1, ip, lsl #5
   17204:	andeq	r7, r1, ip, lsl #5
   17208:	andeq	r7, r1, ip, lsl #5
   1720c:	andeq	r7, r1, ip, lsl #5
   17210:	andeq	r7, r1, ip, lsl #5
   17214:	andeq	r7, r1, ip, lsl #5
   17218:	andeq	r7, r1, ip, lsl #5
   1721c:	andeq	r7, r1, ip, lsl #5
   17220:	andeq	r7, r1, ip, lsl #5
   17224:	andeq	r7, r1, ip, asr r2
   17228:	andeq	r7, r1, ip, lsl #5
   1722c:	andeq	r7, r1, ip, lsl #5
   17230:	andeq	r7, r1, ip, lsl #5
   17234:	andeq	r7, r1, ip, asr r2
   17238:	andeq	r7, r1, ip, lsl #5
   1723c:	andeq	r7, r1, ip, asr r2
   17240:	andeq	r7, r1, ip, lsl #5
   17244:	andeq	r7, r1, ip, lsl #5
   17248:	andeq	r7, r1, ip, lsl #5
   1724c:	andeq	r7, r1, ip, lsl #5
   17250:	andeq	r7, r1, ip, lsl #5
   17254:	andeq	r7, r1, ip, lsl #5
   17258:	andeq	r7, r1, ip, asr r2
   1725c:	mov	r1, #48	; 0x30
   17260:	ldr	r0, [sp, #88]	; 0x58
   17264:	bl	10ed0 <strchr@plt>
   17268:	cmp	r0, #0
   1726c:	beq	17d7c <__assert_fail@plt+0x6dc8>
   17270:	ldrb	r3, [r9, #1]
   17274:	cmp	r3, #68	; 0x44
   17278:	beq	17d5c <__assert_fail@plt+0x6da8>
   1727c:	cmp	r3, #105	; 0x69
   17280:	beq	17d2c <__assert_fail@plt+0x6d78>
   17284:	cmp	r3, #66	; 0x42
   17288:	beq	17d5c <__assert_fail@plt+0x6da8>
   1728c:	ldr	r3, [pc, #2948]	; 17e18 <__assert_fail@plt+0x6e64>
   17290:	mvn	r2, #0
   17294:	mov	r1, #1024	; 0x400
   17298:	mov	lr, #0
   1729c:	strd	r2, [sp]
   172a0:	mov	r3, #1
   172a4:	str	r3, [sp, #12]
   172a8:	sub	sl, sl, #66	; 0x42
   172ac:	cmp	sl, #53	; 0x35
   172b0:	ldrls	pc, [pc, sl, lsl #2]
   172b4:	b	17ce8 <__assert_fail@plt+0x6d34>
   172b8:			; <UNDEFINED> instruction: 0x00017cb8
   172bc:	andeq	r7, r1, r8, ror #25
   172c0:	andeq	r7, r1, r8, ror #25
   172c4:	andeq	r7, r1, r4, lsr fp
   172c8:	andeq	r7, r1, r8, ror #25
   172cc:	andeq	r7, r1, r0, ror sl
   172d0:	andeq	r7, r1, r8, ror #25
   172d4:	andeq	r7, r1, r8, ror #25
   172d8:	andeq	r7, r1, r8, ror #25
   172dc:	strdeq	r7, [r1], -r4
   172e0:	andeq	r7, r1, r8, ror #25
   172e4:	muleq	r1, r0, r3
   172e8:	andeq	r7, r1, r8, ror #25
   172ec:	andeq	r7, r1, r8, ror #25
   172f0:	andeq	r7, r1, ip, lsl r4
   172f4:	andeq	r7, r1, r8, ror #25
   172f8:	andeq	r7, r1, r8, ror #25
   172fc:	andeq	r7, r1, r8, ror #25
   17300:	muleq	r1, ip, r7
   17304:	andeq	r7, r1, r8, ror #25
   17308:	andeq	r7, r1, r8, ror #25
   1730c:	andeq	r7, r1, r8, ror #25
   17310:	andeq	r7, r1, r8, ror #25
   17314:	andeq	r7, r1, r4, ror r5
   17318:	ldrdeq	r7, [r1], -r0
   1731c:	andeq	r7, r1, r8, ror #25
   17320:	andeq	r7, r1, r8, ror #25
   17324:	andeq	r7, r1, r8, ror #25
   17328:	andeq	r7, r1, r8, ror #25
   1732c:	andeq	r7, r1, r8, ror #25
   17330:	andeq	r7, r1, r8, ror #25
   17334:	andeq	r7, r1, r8, ror #25
   17338:	andeq	r7, r1, r0, lsr #17
   1733c:	muleq	r1, r8, r8
   17340:	andeq	r7, r1, r8, ror #25
   17344:	andeq	r7, r1, r8, ror #25
   17348:	andeq	r7, r1, r8, ror #25
   1734c:	andeq	r7, r1, r0, ror sl
   17350:	andeq	r7, r1, r8, ror #25
   17354:	andeq	r7, r1, r8, ror #25
   17358:	andeq	r7, r1, r8, ror #25
   1735c:	strdeq	r7, [r1], -r4
   17360:	andeq	r7, r1, r8, ror #25
   17364:	muleq	r1, r0, r3
   17368:	andeq	r7, r1, r8, ror #25
   1736c:	andeq	r7, r1, r8, ror #25
   17370:	andeq	r7, r1, r8, ror #25
   17374:	andeq	r7, r1, r8, ror #25
   17378:	andeq	r7, r1, r8, ror #25
   1737c:	andeq	r7, r1, r8, ror #25
   17380:	muleq	r1, ip, r7
   17384:	andeq	r7, r1, r8, ror #25
   17388:	andeq	r7, r1, r8, ror #25
   1738c:	andeq	r7, r1, ip, ror r8
   17390:	mul	r0, r6, lr
   17394:	ldrd	sl, [sp]
   17398:	umull	r2, r3, r6, r1
   1739c:	mla	r0, r1, r7, r0
   173a0:	cmp	r7, fp
   173a4:	cmpeq	r6, sl
   173a8:	add	r3, r0, r3
   173ac:	mvnhi	r3, #0
   173b0:	mvnhi	r2, #0
   173b4:	mul	r6, r1, r3
   173b8:	umull	r0, r1, r1, r2
   173bc:	mla	lr, lr, r2, r6
   173c0:	ldrd	r6, [sp]
   173c4:	movhi	ip, #1
   173c8:	movls	ip, #0
   173cc:	cmp	r7, r3
   173d0:	cmpeq	r6, r2
   173d4:	mvncc	r0, #0
   173d8:	add	r1, lr, r1
   173dc:	mov	sl, r6
   173e0:	movcc	r1, r0
   173e4:	mov	fp, r7
   173e8:	cmp	fp, r3
   173ec:	cmpeq	sl, r2
   173f0:	mov	r6, r0
   173f4:	mov	r7, r1
   173f8:	orrcc	ip, ip, #1
   173fc:	ldr	r2, [sp, #12]
   17400:	orr	r4, r4, ip
   17404:	add	r3, r9, r2
   17408:	str	r3, [r5]
   1740c:	ldrb	r3, [r9, r2]
   17410:	cmp	r3, #0
   17414:	orrne	r4, r4, #2
   17418:	b	17124 <__assert_fail@plt+0x6170>
   1741c:	ldrd	sl, [sp]
   17420:	umull	r2, r3, r6, r1
   17424:	mul	r0, r6, lr
   17428:	cmp	r7, fp
   1742c:	cmpeq	r6, sl
   17430:	mvnhi	r2, #0
   17434:	mla	r0, r1, r7, r0
   17438:	umull	sl, fp, r2, r1
   1743c:	add	r3, r0, r3
   17440:	mul	r0, lr, r2
   17444:	mvnhi	r3, #0
   17448:	strd	sl, [sp, #16]
   1744c:	ldrd	sl, [sp]
   17450:	mla	r0, r1, r3, r0
   17454:	ldr	ip, [sp, #20]
   17458:	cmp	r3, fp
   1745c:	add	r0, r0, ip
   17460:	cmpeq	r2, sl
   17464:	str	r0, [sp, #20]
   17468:	bls	17480 <__assert_fail@plt+0x64cc>
   1746c:	mvn	sl, #0
   17470:	mvn	fp, #0
   17474:	strd	sl, [sp, #16]
   17478:	ldr	r0, [sp, #20]
   1747c:	ldrd	sl, [sp]
   17480:	cmp	r7, fp
   17484:	cmpeq	r6, sl
   17488:	mul	r0, r1, r0
   1748c:	ldrd	r6, [sp, #16]
   17490:	mla	ip, lr, r6, r0
   17494:	mov	r0, r6
   17498:	movhi	r0, #1
   1749c:	movls	r0, #0
   174a0:	cmp	r3, fp
   174a4:	cmpeq	r2, sl
   174a8:	ldrd	r2, [sp, #16]
   174ac:	umull	r6, r7, r1, r6
   174b0:	orrhi	r0, r0, #1
   174b4:	cmp	fp, r3
   174b8:	cmpeq	sl, r2
   174bc:	add	r7, ip, r7
   174c0:	bcc	17dcc <__assert_fail@plt+0x6e18>
   174c4:	mov	sl, r6
   174c8:	mov	fp, r7
   174cc:	strd	r6, [sp, #24]
   174d0:	mul	r3, r1, fp
   174d4:	umull	r6, r7, r1, sl
   174d8:	mla	ip, lr, sl, r3
   174dc:	ldrd	sl, [sp]
   174e0:	ldrd	r2, [sp, #16]
   174e4:	add	r7, ip, r7
   174e8:	cmp	fp, r3
   174ec:	cmpeq	sl, r2
   174f0:	mov	r3, fp
   174f4:	mov	r2, sl
   174f8:	ldrd	sl, [sp, #24]
   174fc:	orrcc	r0, r0, #1
   17500:	str	r0, [sp, #16]
   17504:	cmp	r3, fp
   17508:	cmpeq	r2, sl
   1750c:	bcs	17a64 <__assert_fail@plt+0x6ab0>
   17510:	mvn	r2, #0
   17514:	mvn	r3, #0
   17518:	mul	ip, lr, r2
   1751c:	ldrd	sl, [sp]
   17520:	mla	ip, r1, r3, ip
   17524:	umull	r6, r7, r2, r1
   17528:	ldrd	r0, [sp, #24]
   1752c:	add	r7, ip, r7
   17530:	cmp	fp, r1
   17534:	ldr	r1, [sp, #16]
   17538:	cmpeq	sl, r0
   1753c:	orrcc	r1, r1, #1
   17540:	cmp	r3, fp
   17544:	cmpeq	r2, sl
   17548:	mvnhi	r0, #0
   1754c:	movls	ip, r7
   17550:	movhi	ip, r0
   17554:	movls	r0, r6
   17558:	cmp	r3, fp
   1755c:	cmpeq	r2, sl
   17560:	mov	r7, ip
   17564:	mov	r6, r0
   17568:	movls	ip, r1
   1756c:	orrhi	ip, r1, #1
   17570:	b	173fc <__assert_fail@plt+0x6448>
   17574:	ldrd	sl, [sp]
   17578:	umull	r2, r3, r6, r1
   1757c:	mul	r0, r6, lr
   17580:	cmp	r7, fp
   17584:	cmpeq	r6, sl
   17588:	mvnhi	r2, #0
   1758c:	mla	r0, r1, r7, r0
   17590:	umull	sl, fp, r2, r1
   17594:	add	r3, r0, r3
   17598:	mul	r0, lr, r2
   1759c:	mvnhi	r3, #0
   175a0:	strd	sl, [sp, #16]
   175a4:	ldrd	sl, [sp]
   175a8:	mla	r0, r1, r3, r0
   175ac:	ldr	ip, [sp, #20]
   175b0:	cmp	r3, fp
   175b4:	add	r0, r0, ip
   175b8:	cmpeq	r2, sl
   175bc:	str	r0, [sp, #20]
   175c0:	mvnhi	sl, #0
   175c4:	mvnhi	fp, #0
   175c8:	strdhi	sl, [sp, #16]
   175cc:	ldrdhi	sl, [sp]
   175d0:	ldr	r0, [sp, #16]
   175d4:	cmp	r3, fp
   175d8:	ldr	r3, [sp, #20]
   175dc:	mul	r0, lr, r0
   175e0:	cmpeq	r2, sl
   175e4:	mla	r0, r1, r3, r0
   175e8:	ldr	r3, [sp, #16]
   175ec:	umull	r2, r3, r3, r1
   175f0:	strd	r2, [sp, #24]
   175f4:	movhi	r3, #1
   175f8:	movls	r3, #0
   175fc:	cmp	r7, fp
   17600:	cmpeq	r6, sl
   17604:	ldrd	r6, [sp, #16]
   17608:	ldr	r2, [sp, #28]
   1760c:	movls	ip, r3
   17610:	orrhi	ip, r3, #1
   17614:	cmp	r7, fp
   17618:	add	r2, r0, r2
   1761c:	cmpeq	r6, sl
   17620:	str	r2, [sp, #28]
   17624:	mvnhi	r2, #0
   17628:	mvnhi	r3, #0
   1762c:	strdhi	r2, [sp, #24]
   17630:	ldrd	r6, [sp, #24]
   17634:	mul	r2, r1, r7
   17638:	umull	sl, fp, r1, r6
   1763c:	mla	r3, lr, r6, r2
   17640:	ldrd	r6, [sp]
   17644:	str	r3, [sp, #32]
   17648:	ldrd	r2, [sp, #16]
   1764c:	cmp	r3, r7
   17650:	cmpeq	r2, r6
   17654:	ldrd	r2, [sp, #24]
   17658:	orrhi	ip, ip, #1
   1765c:	cmp	r3, r7
   17660:	ldr	r3, [sp, #32]
   17664:	cmpeq	r2, r6
   17668:	add	r2, r3, fp
   1766c:	mov	fp, r2
   17670:	bhi	17db4 <__assert_fail@plt+0x6e00>
   17674:	strd	sl, [sp, #16]
   17678:	mul	r2, r1, fp
   1767c:	umull	r6, r7, r1, sl
   17680:	mla	r3, lr, sl, r2
   17684:	ldrd	sl, [sp]
   17688:	str	r3, [sp, #32]
   1768c:	ldrd	r2, [sp, #24]
   17690:	cmp	r3, fp
   17694:	cmpeq	r2, sl
   17698:	ldrd	r2, [sp, #16]
   1769c:	orrhi	ip, ip, #1
   176a0:	cmp	fp, r3
   176a4:	ldr	r3, [sp, #32]
   176a8:	cmpeq	sl, r2
   176ac:	add	r2, r3, r7
   176b0:	mov	r7, r2
   176b4:	mvncc	r7, #0
   176b8:	mvncc	r6, #0
   176bc:	mul	r2, r1, r7
   176c0:	mov	sl, r6
   176c4:	strd	r6, [sp, #24]
   176c8:	mla	r0, lr, sl, r2
   176cc:	ldrd	r2, [sp, #16]
   176d0:	ldrd	sl, [sp]
   176d4:	umull	r6, r7, r1, r6
   176d8:	cmp	fp, r3
   176dc:	cmpeq	sl, r2
   176e0:	mov	r3, fp
   176e4:	mov	r2, sl
   176e8:	ldrd	sl, [sp, #24]
   176ec:	orrcc	ip, ip, #1
   176f0:	add	r7, r0, r7
   176f4:	cmp	r3, fp
   176f8:	cmpeq	r2, sl
   176fc:	mvncc	r6, #0
   17700:	mvncc	r7, #0
   17704:	umull	sl, fp, r1, r6
   17708:	mul	r3, r1, r7
   1770c:	strd	sl, [sp, #16]
   17710:	mla	r0, lr, r6, r3
   17714:	ldrd	sl, [sp, #24]
   17718:	ldrd	r2, [sp]
   1771c:	cmp	r3, fp
   17720:	cmpeq	r2, sl
   17724:	orrcc	ip, ip, #1
   17728:	cmp	r3, r7
   1772c:	ldr	r3, [sp, #20]
   17730:	cmpeq	r2, r6
   17734:	add	r3, r0, r3
   17738:	str	r3, [sp, #20]
   1773c:	mvncc	r2, #0
   17740:	mvncc	r3, #0
   17744:	ldrdcs	r2, [sp, #16]
   17748:	ldrd	sl, [sp]
   1774c:	mul	r0, r1, r3
   17750:	cmp	fp, r7
   17754:	str	r0, [sp, #16]
   17758:	cmpeq	sl, r6
   1775c:	ldr	r6, [sp, #16]
   17760:	umull	r0, r1, r1, r2
   17764:	mla	lr, lr, r2, r6
   17768:	orrcc	ip, ip, #1
   1776c:	cmp	r3, fp
   17770:	cmpeq	r2, sl
   17774:	add	r1, lr, r1
   17778:	bls	17784 <__assert_fail@plt+0x67d0>
   1777c:	mvn	r0, #0
   17780:	mov	r1, r0
   17784:	cmp	r3, fp
   17788:	cmpeq	r2, sl
   1778c:	mov	r6, r0
   17790:	mov	r7, r1
   17794:	orrhi	ip, ip, #1
   17798:	b	173fc <__assert_fail@plt+0x6448>
   1779c:	ldrd	sl, [sp]
   177a0:	umull	r2, r3, r6, r1
   177a4:	mul	r0, r6, lr
   177a8:	cmp	r7, fp
   177ac:	cmpeq	r6, sl
   177b0:	mvnhi	r2, #0
   177b4:	mla	r0, r1, r7, r0
   177b8:	umull	sl, fp, r1, r2
   177bc:	add	r3, r0, r3
   177c0:	mvnhi	r3, #0
   177c4:	strd	sl, [sp, #16]
   177c8:	mul	r0, r1, r3
   177cc:	ldrd	sl, [sp]
   177d0:	mla	r0, lr, r2, r0
   177d4:	ldr	ip, [sp, #20]
   177d8:	cmp	fp, r3
   177dc:	add	r0, r0, ip
   177e0:	cmpeq	sl, r2
   177e4:	str	r0, [sp, #20]
   177e8:	mvncc	sl, #0
   177ec:	mvncc	fp, #0
   177f0:	strdcc	sl, [sp, #16]
   177f4:	ldrdcc	sl, [sp]
   177f8:	ldr	r0, [sp, #16]
   177fc:	cmp	fp, r3
   17800:	cmpeq	sl, r2
   17804:	mul	r0, lr, r0
   17808:	ldr	r2, [sp, #20]
   1780c:	ldr	r3, [sp, #16]
   17810:	movcc	ip, #1
   17814:	movcs	ip, #0
   17818:	cmp	r7, fp
   1781c:	cmpeq	r6, sl
   17820:	ldrd	r6, [sp, #16]
   17824:	mla	r0, r1, r2, r0
   17828:	umull	r2, r3, r3, r1
   1782c:	orrhi	ip, ip, #1
   17830:	cmp	r7, fp
   17834:	cmpeq	r6, sl
   17838:	add	r3, r0, r3
   1783c:	mvnhi	r3, #0
   17840:	mvnhi	r2, #0
   17844:	mul	r0, r1, r3
   17848:	cmp	r7, fp
   1784c:	str	r0, [sp, #24]
   17850:	cmpeq	r6, sl
   17854:	ldr	r6, [sp, #24]
   17858:	umull	r0, r1, r1, r2
   1785c:	mla	lr, lr, r2, r6
   17860:	orrhi	ip, ip, #1
   17864:	cmp	fp, r3
   17868:	cmpeq	sl, r2
   1786c:	mvncc	r0, #0
   17870:	add	r1, lr, r1
   17874:	movcc	r1, r0
   17878:	b	173e8 <__assert_fail@plt+0x6434>
   1787c:	cmp	r6, #0
   17880:	sbcs	r3, r7, #0
   17884:	blt	17d1c <__assert_fail@plt+0x6d68>
   17888:	adds	r6, r6, r6
   1788c:	adc	r7, r7, r7
   17890:	mov	ip, #0
   17894:	b	173fc <__assert_fail@plt+0x6448>
   17898:	mov	ip, #0
   1789c:	b	173fc <__assert_fail@plt+0x6448>
   178a0:	ldr	r3, [pc, #1396]	; 17e1c <__assert_fail@plt+0x6e68>
   178a4:	mvn	r2, #0
   178a8:	cmp	r7, r3
   178ac:	cmpeq	r6, r2
   178b0:	bhi	17d1c <__assert_fail@plt+0x6d68>
   178b4:	lsl	r3, r7, #9
   178b8:	orr	r3, r3, r6, lsr #23
   178bc:	lsl	r2, r6, #9
   178c0:	mov	r6, r2
   178c4:	mov	r7, r3
   178c8:	mov	ip, #0
   178cc:	b	173fc <__assert_fail@plt+0x6448>
   178d0:	ldrd	sl, [sp]
   178d4:	umull	r2, r3, r6, r1
   178d8:	mul	r0, r6, lr
   178dc:	cmp	r7, fp
   178e0:	cmpeq	r6, sl
   178e4:	mvnhi	r2, #0
   178e8:	mla	r0, r1, r7, r0
   178ec:	umull	sl, fp, r2, r1
   178f0:	add	r3, r0, r3
   178f4:	mul	r0, lr, r2
   178f8:	mvnhi	r3, #0
   178fc:	strd	sl, [sp, #16]
   17900:	ldrd	sl, [sp]
   17904:	mla	r0, r1, r3, r0
   17908:	ldr	ip, [sp, #20]
   1790c:	cmp	r3, fp
   17910:	add	r0, r0, ip
   17914:	cmpeq	r2, sl
   17918:	str	r0, [sp, #20]
   1791c:	mvnhi	sl, #0
   17920:	mvnhi	fp, #0
   17924:	strdhi	sl, [sp, #16]
   17928:	ldrdhi	sl, [sp]
   1792c:	ldr	r0, [sp, #16]
   17930:	cmp	r3, fp
   17934:	ldr	r3, [sp, #20]
   17938:	mul	r0, lr, r0
   1793c:	cmpeq	r2, sl
   17940:	mla	r0, r1, r3, r0
   17944:	ldr	r3, [sp, #16]
   17948:	umull	r2, r3, r3, r1
   1794c:	strd	r2, [sp, #24]
   17950:	movhi	r3, #1
   17954:	movls	r3, #0
   17958:	cmp	r7, fp
   1795c:	cmpeq	r6, sl
   17960:	ldrd	r6, [sp, #16]
   17964:	ldr	r2, [sp, #28]
   17968:	movls	ip, r3
   1796c:	orrhi	ip, r3, #1
   17970:	cmp	r7, fp
   17974:	add	r2, r0, r2
   17978:	cmpeq	r6, sl
   1797c:	str	r2, [sp, #28]
   17980:	mvnhi	r2, #0
   17984:	mvnhi	r3, #0
   17988:	strdhi	r2, [sp, #24]
   1798c:	ldrd	r6, [sp, #24]
   17990:	mul	r2, lr, r6
   17994:	umull	sl, fp, r6, r1
   17998:	mla	r3, r1, r7, r2
   1799c:	ldrd	r6, [sp]
   179a0:	str	r3, [sp, #32]
   179a4:	ldrd	r2, [sp, #16]
   179a8:	cmp	r3, r7
   179ac:	cmpeq	r2, r6
   179b0:	ldrd	r2, [sp, #24]
   179b4:	orrhi	ip, ip, #1
   179b8:	cmp	r3, r7
   179bc:	ldr	r3, [sp, #32]
   179c0:	cmpeq	r2, r6
   179c4:	add	r2, r3, fp
   179c8:	mov	fp, r2
   179cc:	bhi	17de4 <__assert_fail@plt+0x6e30>
   179d0:	strd	sl, [sp, #16]
   179d4:	mul	r2, lr, sl
   179d8:	umull	r6, r7, sl, r1
   179dc:	mla	r3, r1, fp, r2
   179e0:	ldrd	sl, [sp]
   179e4:	str	r3, [sp, #32]
   179e8:	ldrd	r2, [sp, #24]
   179ec:	cmp	r3, fp
   179f0:	cmpeq	r2, sl
   179f4:	ldrd	r2, [sp, #16]
   179f8:	orrhi	ip, ip, #1
   179fc:	cmp	r3, fp
   17a00:	ldr	r3, [sp, #32]
   17a04:	cmpeq	r2, sl
   17a08:	add	r2, r3, r7
   17a0c:	mov	r7, r2
   17a10:	mvnhi	r7, #0
   17a14:	mvnhi	r6, #0
   17a18:	mul	r2, r1, r7
   17a1c:	mov	sl, r6
   17a20:	strd	r6, [sp, #24]
   17a24:	mla	r0, lr, sl, r2
   17a28:	ldrd	sl, [sp]
   17a2c:	ldrd	r2, [sp, #16]
   17a30:	umull	r6, r7, r1, r6
   17a34:	cmp	r3, fp
   17a38:	cmpeq	r2, sl
   17a3c:	mov	r3, ip
   17a40:	orrhi	r3, r3, #1
   17a44:	mov	r2, sl
   17a48:	str	r3, [sp, #16]
   17a4c:	mov	r3, fp
   17a50:	ldrd	sl, [sp, #24]
   17a54:	add	r7, r0, r7
   17a58:	cmp	r3, fp
   17a5c:	cmpeq	r2, sl
   17a60:	bcc	17510 <__assert_fail@plt+0x655c>
   17a64:	mov	r2, r6
   17a68:	mov	r3, r7
   17a6c:	b	17518 <__assert_fail@plt+0x6564>
   17a70:	ldrd	sl, [sp]
   17a74:	umull	r2, r3, r6, r1
   17a78:	mul	r0, r6, lr
   17a7c:	cmp	r7, fp
   17a80:	cmpeq	r6, sl
   17a84:	mvnhi	r2, #0
   17a88:	mla	r0, r1, r7, r0
   17a8c:	umull	sl, fp, r2, r1
   17a90:	add	r3, r0, r3
   17a94:	mul	r0, lr, r2
   17a98:	mvnhi	r3, #0
   17a9c:	strd	sl, [sp, #16]
   17aa0:	ldrd	sl, [sp]
   17aa4:	mla	r0, r1, r3, r0
   17aa8:	ldr	ip, [sp, #20]
   17aac:	cmp	r3, fp
   17ab0:	add	r0, r0, ip
   17ab4:	cmpeq	r2, sl
   17ab8:	str	r0, [sp, #20]
   17abc:	mvnhi	sl, #0
   17ac0:	mvnhi	fp, #0
   17ac4:	strdhi	sl, [sp, #16]
   17ac8:	ldrdhi	sl, [sp]
   17acc:	ldr	r0, [sp, #16]
   17ad0:	cmp	r3, fp
   17ad4:	ldr	ip, [sp, #20]
   17ad8:	mul	r0, lr, r0
   17adc:	ldr	r3, [sp, #16]
   17ae0:	cmpeq	r2, sl
   17ae4:	mla	r0, r1, ip, r0
   17ae8:	umull	r2, r3, r3, r1
   17aec:	movhi	r1, #1
   17af0:	movls	r1, #0
   17af4:	cmp	r7, fp
   17af8:	cmpeq	r6, sl
   17afc:	ldrd	r6, [sp, #16]
   17b00:	movls	ip, r1
   17b04:	orrhi	ip, r1, #1
   17b08:	cmp	r7, fp
   17b0c:	cmpeq	r6, sl
   17b10:	mvnhi	r2, #0
   17b14:	add	r3, r0, r3
   17b18:	movhi	r3, r2
   17b1c:	cmp	r7, fp
   17b20:	cmpeq	r6, sl
   17b24:	mov	r7, r3
   17b28:	mov	r6, r2
   17b2c:	orrhi	ip, ip, #1
   17b30:	b	173fc <__assert_fail@plt+0x6448>
   17b34:	ldrd	sl, [sp]
   17b38:	umull	r2, r3, r6, r1
   17b3c:	mul	r0, r6, lr
   17b40:	cmp	r7, fp
   17b44:	cmpeq	r6, sl
   17b48:	mvnhi	r2, #0
   17b4c:	mla	r0, r1, r7, r0
   17b50:	umull	sl, fp, r1, r2
   17b54:	add	r3, r0, r3
   17b58:	mvnhi	r3, #0
   17b5c:	strd	sl, [sp, #16]
   17b60:	mul	r0, r1, r3
   17b64:	ldrd	sl, [sp]
   17b68:	mla	r0, lr, r2, r0
   17b6c:	ldr	ip, [sp, #20]
   17b70:	cmp	fp, r3
   17b74:	add	r0, r0, ip
   17b78:	cmpeq	sl, r2
   17b7c:	str	r0, [sp, #20]
   17b80:	mvncc	sl, #0
   17b84:	mvncc	fp, #0
   17b88:	strdcc	sl, [sp, #16]
   17b8c:	ldrdcc	sl, [sp]
   17b90:	ldr	r0, [sp, #16]
   17b94:	cmp	fp, r3
   17b98:	ldr	r3, [sp, #20]
   17b9c:	mul	r0, lr, r0
   17ba0:	cmpeq	sl, r2
   17ba4:	mla	r0, r1, r3, r0
   17ba8:	ldr	r3, [sp, #16]
   17bac:	umull	r2, r3, r3, r1
   17bb0:	strd	r2, [sp, #24]
   17bb4:	movcc	r3, #1
   17bb8:	movcs	r3, #0
   17bbc:	cmp	r7, fp
   17bc0:	cmpeq	r6, sl
   17bc4:	movls	ip, r3
   17bc8:	orrhi	ip, r3, #1
   17bcc:	ldrd	r2, [sp, #16]
   17bd0:	cmp	r3, fp
   17bd4:	ldr	r3, [sp, #28]
   17bd8:	cmpeq	r2, sl
   17bdc:	add	r3, r0, r3
   17be0:	str	r3, [sp, #28]
   17be4:	bhi	17d9c <__assert_fail@plt+0x6de8>
   17be8:	ldrd	r2, [sp, #24]
   17bec:	mov	sl, r2
   17bf0:	mov	fp, r3
   17bf4:	mul	r2, lr, sl
   17bf8:	umull	r6, r7, sl, r1
   17bfc:	mla	r0, r1, fp, r2
   17c00:	ldrd	r2, [sp]
   17c04:	add	r7, r0, r7
   17c08:	mov	sl, r2
   17c0c:	mov	fp, r3
   17c10:	strd	r2, [sp, #32]
   17c14:	ldrd	r2, [sp, #16]
   17c18:	cmp	r3, fp
   17c1c:	cmpeq	r2, sl
   17c20:	ldrd	r2, [sp, #32]
   17c24:	ldrd	sl, [sp, #24]
   17c28:	orrhi	ip, ip, #1
   17c2c:	cmp	fp, r3
   17c30:	cmpeq	sl, r2
   17c34:	mvnhi	r6, #0
   17c38:	mvnhi	r7, #0
   17c3c:	umull	sl, fp, r6, r1
   17c40:	mul	r3, lr, r6
   17c44:	strd	sl, [sp, #16]
   17c48:	mla	r0, r1, r7, r3
   17c4c:	ldrd	sl, [sp, #24]
   17c50:	ldrd	r2, [sp]
   17c54:	cmp	fp, r3
   17c58:	cmpeq	sl, r2
   17c5c:	orrhi	ip, ip, #1
   17c60:	cmp	r7, r3
   17c64:	ldr	r3, [sp, #20]
   17c68:	cmpeq	r6, r2
   17c6c:	add	r3, r0, r3
   17c70:	str	r3, [sp, #20]
   17c74:	mvnhi	r2, #0
   17c78:	mvnhi	r3, #0
   17c7c:	ldrdls	r2, [sp, #16]
   17c80:	ldrd	sl, [sp]
   17c84:	mul	r0, r1, r3
   17c88:	cmp	r7, fp
   17c8c:	str	r0, [sp, #16]
   17c90:	cmpeq	r6, sl
   17c94:	ldr	r6, [sp, #16]
   17c98:	umull	r0, r1, r1, r2
   17c9c:	mla	lr, lr, r2, r6
   17ca0:	orrhi	ip, ip, #1
   17ca4:	cmp	r3, fp
   17ca8:	cmpeq	r2, sl
   17cac:	add	r1, lr, r1
   17cb0:	bls	17784 <__assert_fail@plt+0x67d0>
   17cb4:	b	1777c <__assert_fail@plt+0x67c8>
   17cb8:	ldr	r3, [pc, #344]	; 17e18 <__assert_fail@plt+0x6e64>
   17cbc:	mvn	r2, #0
   17cc0:	cmp	r7, r3
   17cc4:	cmpeq	r6, r2
   17cc8:	bhi	17d1c <__assert_fail@plt+0x6d68>
   17ccc:	lsl	r3, r7, #10
   17cd0:	orr	r3, r3, r6, lsr #22
   17cd4:	lsl	r2, r6, #10
   17cd8:	mov	r6, r2
   17cdc:	mov	r7, r3
   17ce0:	mov	ip, #0
   17ce4:	b	173fc <__assert_fail@plt+0x6448>
   17ce8:	strd	r6, [r8]
   17cec:	orr	r4, r4, #2
   17cf0:	b	170cc <__assert_fail@plt+0x6118>
   17cf4:	ldrd	r2, [sp]
   17cf8:	cmp	r7, r3
   17cfc:	cmpeq	r6, r2
   17d00:	bhi	17d1c <__assert_fail@plt+0x6d68>
   17d04:	mul	r3, r6, lr
   17d08:	mov	ip, #0
   17d0c:	mla	r3, r1, r7, r3
   17d10:	umull	r6, r7, r6, r1
   17d14:	add	r7, r3, r7
   17d18:	b	173fc <__assert_fail@plt+0x6448>
   17d1c:	mvn	r6, #0
   17d20:	mvn	r7, #0
   17d24:	mov	ip, #1
   17d28:	b	173fc <__assert_fail@plt+0x6448>
   17d2c:	ldrb	r3, [r9, #2]
   17d30:	mvn	r2, #0
   17d34:	mov	r1, #1024	; 0x400
   17d38:	cmp	r3, #66	; 0x42
   17d3c:	ldr	r3, [pc, #212]	; 17e18 <__assert_fail@plt+0x6e64>
   17d40:	mov	lr, #0
   17d44:	strd	r2, [sp]
   17d48:	moveq	r3, #3
   17d4c:	streq	r3, [sp, #12]
   17d50:	movne	r3, #1
   17d54:	strne	r3, [sp, #12]
   17d58:	b	172a8 <__assert_fail@plt+0x62f4>
   17d5c:	add	r3, pc, #172	; 0xac
   17d60:	ldrd	r2, [r3]
   17d64:	mov	r1, #1000	; 0x3e8
   17d68:	mov	lr, #0
   17d6c:	strd	r2, [sp]
   17d70:	mov	r3, #2
   17d74:	str	r3, [sp, #12]
   17d78:	b	172a8 <__assert_fail@plt+0x62f4>
   17d7c:	ldr	r3, [pc, #148]	; 17e18 <__assert_fail@plt+0x6e64>
   17d80:	mvn	r2, #0
   17d84:	mov	lr, r0
   17d88:	strd	r2, [sp]
   17d8c:	mov	r3, #1
   17d90:	mov	r1, #1024	; 0x400
   17d94:	str	r3, [sp, #12]
   17d98:	b	172a8 <__assert_fail@plt+0x62f4>
   17d9c:	mvn	r2, #0
   17da0:	mvn	r3, #0
   17da4:	mov	sl, r2
   17da8:	strd	r2, [sp, #24]
   17dac:	mov	fp, r3
   17db0:	b	17bf4 <__assert_fail@plt+0x6c40>
   17db4:	mvn	r2, #0
   17db8:	mvn	r3, #0
   17dbc:	mov	sl, r2
   17dc0:	strd	r2, [sp, #16]
   17dc4:	mov	fp, r3
   17dc8:	b	17678 <__assert_fail@plt+0x66c4>
   17dcc:	mvn	r2, #0
   17dd0:	mvn	r3, #0
   17dd4:	mov	sl, r2
   17dd8:	strd	r2, [sp, #24]
   17ddc:	mov	fp, r3
   17de0:	b	174d0 <__assert_fail@plt+0x651c>
   17de4:	mvn	r2, #0
   17de8:	mvn	r3, #0
   17dec:	mov	sl, r2
   17df0:	strd	r2, [sp, #16]
   17df4:	mov	fp, r3
   17df8:	b	179d4 <__assert_fail@plt+0x6a20>
   17dfc:	ldr	r3, [pc, #28]	; 17e20 <__assert_fail@plt+0x6e6c>
   17e00:	mov	r2, #85	; 0x55
   17e04:	ldr	r1, [pc, #24]	; 17e24 <__assert_fail@plt+0x6e70>
   17e08:	ldr	r0, [pc, #24]	; 17e28 <__assert_fail@plt+0x6e74>
   17e0c:	bl	10fb4 <__assert_fail@plt>
   17e10:	blmi	ff1c1dd4 <optarg@@GLIBC_2.4+0xff197c7c>
   17e14:	subeq	r8, r1, r7, lsr r9
   17e18:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   17e1c:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   17e20:	andeq	r9, r1, r4, asr #16
   17e24:	andeq	r9, r1, r0, asr r8
   17e28:	andeq	r9, r1, r0, ror #16
   17e2c:	cmp	r1, #0
   17e30:	cmpne	r0, #0
   17e34:	moveq	r1, #1
   17e38:	moveq	r0, r1
   17e3c:	umull	r2, r3, r0, r1
   17e40:	adds	r3, r3, #0
   17e44:	movne	r3, #1
   17e48:	cmp	r2, #0
   17e4c:	blt	17e5c <__assert_fail@plt+0x6ea8>
   17e50:	cmp	r3, #0
   17e54:	bne	17e5c <__assert_fail@plt+0x6ea8>
   17e58:	b	10d20 <calloc@plt>
   17e5c:	push	{r4, lr}
   17e60:	bl	10edc <__errno_location@plt>
   17e64:	mov	r3, #12
   17e68:	str	r3, [r0]
   17e6c:	mov	r0, #0
   17e70:	pop	{r4, pc}
   17e74:	cmp	r0, #0
   17e78:	moveq	r0, #1
   17e7c:	cmp	r0, #0
   17e80:	blt	17e88 <__assert_fail@plt+0x6ed4>
   17e84:	b	10e58 <malloc@plt>
   17e88:	push	{r4, lr}
   17e8c:	bl	10edc <__errno_location@plt>
   17e90:	mov	r3, #12
   17e94:	str	r3, [r0]
   17e98:	mov	r0, #0
   17e9c:	pop	{r4, pc}
   17ea0:	cmp	r0, #0
   17ea4:	beq	17ec8 <__assert_fail@plt+0x6f14>
   17ea8:	cmp	r1, #0
   17eac:	push	{lr}		; (str lr, [sp, #-4]!)
   17eb0:	sub	sp, sp, #12
   17eb4:	beq	17ed0 <__assert_fail@plt+0x6f1c>
   17eb8:	blt	17ee8 <__assert_fail@plt+0x6f34>
   17ebc:	add	sp, sp, #12
   17ec0:	pop	{lr}		; (ldr lr, [sp], #4)
   17ec4:	b	10dc8 <realloc@plt>
   17ec8:	mov	r0, r1
   17ecc:	b	17e74 <__assert_fail@plt+0x6ec0>
   17ed0:	str	r1, [sp, #4]
   17ed4:	bl	11ec8 <__assert_fail@plt+0xf14>
   17ed8:	ldr	r3, [sp, #4]
   17edc:	mov	r0, r3
   17ee0:	add	sp, sp, #12
   17ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ee8:	bl	10edc <__errno_location@plt>
   17eec:	mov	r2, #12
   17ef0:	mov	r3, #0
   17ef4:	str	r2, [r0]
   17ef8:	b	17edc <__assert_fail@plt+0x6f28>
   17efc:	cmn	r0, #100	; 0x64
   17f00:	bne	17f14 <__assert_fail@plt+0x6f60>
   17f04:	mov	r0, r1
   17f08:	mov	r1, r2
   17f0c:	mov	r2, r3
   17f10:	b	10dec <readlink@plt>
   17f14:	push	{r4, lr}
   17f18:	bl	10fa8 <abort@plt>
   17f1c:	push	{lr}		; (str lr, [sp, #-4]!)
   17f20:	sub	sp, sp, #12
   17f24:	ldr	r2, [pc, #32]	; 17f4c <__assert_fail@plt+0x6f98>
   17f28:	mov	r3, #0
   17f2c:	mov	r1, r0
   17f30:	str	r2, [sp, #4]
   17f34:	str	r3, [sp]
   17f38:	mov	r2, r3
   17f3c:	mvn	r0, #99	; 0x63
   17f40:	bl	17ffc <__assert_fail@plt+0x7048>
   17f44:	add	sp, sp, #12
   17f48:	pop	{pc}		; (ldr pc, [sp], #4)
   17f4c:	strdeq	r7, [r1], -ip
   17f50:	ldrb	r3, [r0]
   17f54:	cmp	r3, #47	; 0x2f
   17f58:	bne	17f68 <__assert_fail@plt+0x6fb4>
   17f5c:	ldrb	r3, [r0, #1]!
   17f60:	cmp	r3, #47	; 0x2f
   17f64:	beq	17f5c <__assert_fail@plt+0x6fa8>
   17f68:	cmp	r3, #0
   17f6c:	bxeq	lr
   17f70:	mov	r2, #0
   17f74:	push	{lr}		; (str lr, [sp, #-4]!)
   17f78:	mov	ip, r2
   17f7c:	mov	r1, r0
   17f80:	mov	lr, #1
   17f84:	cmp	r3, #47	; 0x2f
   17f88:	moveq	r2, lr
   17f8c:	beq	17f9c <__assert_fail@plt+0x6fe8>
   17f90:	cmp	r2, #0
   17f94:	movne	r0, r1
   17f98:	movne	r2, ip
   17f9c:	ldrb	r3, [r1, #1]!
   17fa0:	cmp	r3, #0
   17fa4:	bne	17f84 <__assert_fail@plt+0x6fd0>
   17fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   17fac:	push	{r4, lr}
   17fb0:	mov	r4, r0
   17fb4:	bl	10ec4 <strlen@plt>
   17fb8:	cmp	r0, #1
   17fbc:	popls	{r4, pc}
   17fc0:	sub	r3, r0, #1
   17fc4:	add	r2, r4, r3
   17fc8:	ldrb	r1, [r4, r3]
   17fcc:	cmp	r1, #47	; 0x2f
   17fd0:	popne	{r4, pc}
   17fd4:	cmp	r3, #1
   17fd8:	beq	17fec <__assert_fail@plt+0x7038>
   17fdc:	ldrb	r1, [r2, #-1]!
   17fe0:	sub	r0, r3, #1
   17fe4:	cmp	r1, #47	; 0x2f
   17fe8:	beq	17ff4 <__assert_fail@plt+0x7040>
   17fec:	mov	r0, r3
   17ff0:	pop	{r4, pc}
   17ff4:	mov	r3, r0
   17ff8:	b	17fd4 <__assert_fail@plt+0x7020>
   17ffc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18000:	sub	sp, sp, #1024	; 0x400
   18004:	sub	sp, sp, #8
   18008:	ldr	ip, [pc, #428]	; 181bc <__assert_fail@plt+0x7208>
   1800c:	ldr	r6, [sp, #1064]	; 0x428
   18010:	mov	r8, r0
   18014:	cmp	r6, #0
   18018:	moveq	r6, ip
   1801c:	subs	r7, r2, #0
   18020:	mov	r9, r1
   18024:	ldr	sl, [sp, #1068]	; 0x42c
   18028:	beq	1817c <__assert_fail@plt+0x71c8>
   1802c:	mvn	r4, #-2147483648	; 0x80000000
   18030:	cmp	r3, r4
   18034:	movcc	r4, r3
   18038:	mov	r5, r7
   1803c:	mov	r1, r9
   18040:	mov	r3, r4
   18044:	mov	r2, r5
   18048:	mov	r0, r8
   1804c:	blx	sl
   18050:	subs	r1, r0, #0
   18054:	mov	r0, r5
   18058:	blt	180d0 <__assert_fail@plt+0x711c>
   1805c:	cmp	r1, r4
   18060:	blt	1810c <__assert_fail@plt+0x7158>
   18064:	cmp	r7, r5
   18068:	beq	18074 <__assert_fail@plt+0x70c0>
   1806c:	ldr	r3, [r6, #8]
   18070:	blx	r3
   18074:	lsl	r3, r4, #1
   18078:	cmn	r4, #-1073741822	; 0xc0000002
   1807c:	add	r4, r3, #1
   18080:	mov	r0, r4
   18084:	bgt	1815c <__assert_fail@plt+0x71a8>
   18088:	ldr	r3, [r6]
   1808c:	blx	r3
   18090:	mov	r3, r4
   18094:	subs	r5, r0, #0
   18098:	bne	1803c <__assert_fail@plt+0x7088>
   1809c:	ldr	r2, [r6, #12]
   180a0:	cmp	r2, #0
   180a4:	beq	180b0 <__assert_fail@plt+0x70fc>
   180a8:	mov	r0, r3
   180ac:	blx	r2
   180b0:	bl	10edc <__errno_location@plt>
   180b4:	mov	r5, #0
   180b8:	mov	r3, #12
   180bc:	str	r3, [r0]
   180c0:	mov	r0, r5
   180c4:	add	sp, sp, #1024	; 0x400
   180c8:	add	sp, sp, #8
   180cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   180d0:	cmp	r7, r5
   180d4:	moveq	r5, #0
   180d8:	beq	180c0 <__assert_fail@plt+0x710c>
   180dc:	bl	10edc <__errno_location@plt>
   180e0:	ldr	r3, [r6, #8]
   180e4:	mov	r4, r0
   180e8:	ldr	r6, [r0]
   180ec:	mov	r0, r5
   180f0:	blx	r3
   180f4:	mov	r5, #0
   180f8:	mov	r0, r5
   180fc:	str	r6, [r4]
   18100:	add	sp, sp, #1024	; 0x400
   18104:	add	sp, sp, #8
   18108:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1810c:	add	r3, sp, #8
   18110:	cmp	r5, r3
   18114:	mov	r3, #0
   18118:	strb	r3, [r5, r1]
   1811c:	add	r1, r1, #1
   18120:	beq	18188 <__assert_fail@plt+0x71d4>
   18124:	cmp	r7, r5
   18128:	cmpne	r1, r4
   1812c:	bge	180c0 <__assert_fail@plt+0x710c>
   18130:	ldr	r3, [r6, #4]
   18134:	cmp	r3, #0
   18138:	beq	180c0 <__assert_fail@plt+0x710c>
   1813c:	mov	r0, r5
   18140:	blx	r3
   18144:	cmp	r0, #0
   18148:	movne	r5, r0
   1814c:	mov	r0, r5
   18150:	add	sp, sp, #1024	; 0x400
   18154:	add	sp, sp, #8
   18158:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1815c:	bl	10edc <__errno_location@plt>
   18160:	mov	r5, #0
   18164:	mov	r3, #36	; 0x24
   18168:	str	r3, [r0]
   1816c:	mov	r0, r5
   18170:	add	sp, sp, #1024	; 0x400
   18174:	add	sp, sp, #8
   18178:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1817c:	mov	r4, #1024	; 0x400
   18180:	add	r7, sp, #8
   18184:	b	18038 <__assert_fail@plt+0x7084>
   18188:	ldr	r3, [r6]
   1818c:	mov	r0, r1
   18190:	str	r1, [sp, #4]
   18194:	blx	r3
   18198:	ldr	r1, [sp, #4]
   1819c:	mov	r3, r1
   181a0:	cmp	r0, #0
   181a4:	beq	1809c <__assert_fail@plt+0x70e8>
   181a8:	mov	r2, r1
   181ac:	mov	r1, r5
   181b0:	bl	10d74 <memcpy@plt>
   181b4:	mov	r5, r0
   181b8:	b	180c0 <__assert_fail@plt+0x710c>
   181bc:	muleq	r1, r0, r8
   181c0:	push	{r4, r5, r6, lr}
   181c4:	mov	r4, r0
   181c8:	bl	10e1c <__fpending@plt>
   181cc:	ldr	r5, [r4]
   181d0:	and	r5, r5, #32
   181d4:	mov	r6, r0
   181d8:	mov	r0, r4
   181dc:	bl	1823c <__assert_fail@plt+0x7288>
   181e0:	cmp	r5, #0
   181e4:	mov	r4, r0
   181e8:	bne	18208 <__assert_fail@plt+0x7254>
   181ec:	cmp	r0, #0
   181f0:	beq	18200 <__assert_fail@plt+0x724c>
   181f4:	cmp	r6, #0
   181f8:	beq	18224 <__assert_fail@plt+0x7270>
   181fc:	mvn	r4, #0
   18200:	mov	r0, r4
   18204:	pop	{r4, r5, r6, pc}
   18208:	cmp	r0, #0
   1820c:	bne	181fc <__assert_fail@plt+0x7248>
   18210:	bl	10edc <__errno_location@plt>
   18214:	str	r4, [r0]
   18218:	mvn	r4, #0
   1821c:	mov	r0, r4
   18220:	pop	{r4, r5, r6, pc}
   18224:	bl	10edc <__errno_location@plt>
   18228:	ldr	r4, [r0]
   1822c:	subs	r4, r4, #9
   18230:	mvnne	r4, #0
   18234:	mov	r0, r4
   18238:	pop	{r4, r5, r6, pc}
   1823c:	push	{r4, r5, lr}
   18240:	sub	sp, sp, #12
   18244:	mov	r4, r0
   18248:	bl	10f0c <fileno@plt>
   1824c:	cmp	r0, #0
   18250:	mov	r0, r4
   18254:	blt	182d0 <__assert_fail@plt+0x731c>
   18258:	bl	10e70 <__freading@plt>
   1825c:	cmp	r0, #0
   18260:	bne	1829c <__assert_fail@plt+0x72e8>
   18264:	mov	r0, r4
   18268:	bl	182dc <__assert_fail@plt+0x7328>
   1826c:	cmp	r0, #0
   18270:	beq	182cc <__assert_fail@plt+0x7318>
   18274:	bl	10edc <__errno_location@plt>
   18278:	mov	r5, r0
   1827c:	mov	r0, r4
   18280:	ldr	r4, [r5]
   18284:	bl	10f30 <fclose@plt>
   18288:	cmp	r4, #0
   1828c:	mvnne	r0, #0
   18290:	strne	r4, [r5]
   18294:	add	sp, sp, #12
   18298:	pop	{r4, r5, pc}
   1829c:	mov	r0, r4
   182a0:	bl	10f0c <fileno@plt>
   182a4:	mov	r3, #1
   182a8:	str	r3, [sp]
   182ac:	mov	r2, #0
   182b0:	mov	r3, #0
   182b4:	bl	10e04 <lseek64@plt>
   182b8:	mvn	r3, #0
   182bc:	mvn	r2, #0
   182c0:	cmp	r1, r3
   182c4:	cmpeq	r0, r2
   182c8:	bne	18264 <__assert_fail@plt+0x72b0>
   182cc:	mov	r0, r4
   182d0:	add	sp, sp, #12
   182d4:	pop	{r4, r5, lr}
   182d8:	b	10f30 <fclose@plt>
   182dc:	push	{r4, lr}
   182e0:	subs	r4, r0, #0
   182e4:	sub	sp, sp, #8
   182e8:	beq	18304 <__assert_fail@plt+0x7350>
   182ec:	bl	10e70 <__freading@plt>
   182f0:	cmp	r0, #0
   182f4:	beq	18304 <__assert_fail@plt+0x7350>
   182f8:	ldr	r3, [r4]
   182fc:	tst	r3, #256	; 0x100
   18300:	bne	18314 <__assert_fail@plt+0x7360>
   18304:	mov	r0, r4
   18308:	add	sp, sp, #8
   1830c:	pop	{r4, lr}
   18310:	b	10d50 <fflush@plt>
   18314:	mov	r3, #1
   18318:	str	r3, [sp]
   1831c:	mov	r2, #0
   18320:	mov	r3, #0
   18324:	mov	r0, r4
   18328:	bl	1833c <__assert_fail@plt+0x7388>
   1832c:	mov	r0, r4
   18330:	add	sp, sp, #8
   18334:	pop	{r4, lr}
   18338:	b	10d50 <fflush@plt>
   1833c:	push	{r4, r5, r6, r7, r8, lr}
   18340:	sub	sp, sp, #8
   18344:	ldmib	r0, {ip, lr}
   18348:	mov	r4, r0
   1834c:	ldr	r5, [sp, #32]
   18350:	cmp	lr, ip
   18354:	beq	1836c <__assert_fail@plt+0x73b8>
   18358:	str	r5, [sp, #32]
   1835c:	mov	r0, r4
   18360:	add	sp, sp, #8
   18364:	pop	{r4, r5, r6, r7, r8, lr}
   18368:	b	10f3c <fseeko64@plt>
   1836c:	ldr	lr, [r0, #20]
   18370:	ldr	ip, [r0, #16]
   18374:	cmp	lr, ip
   18378:	bne	18358 <__assert_fail@plt+0x73a4>
   1837c:	ldr	r8, [r0, #36]	; 0x24
   18380:	cmp	r8, #0
   18384:	bne	18358 <__assert_fail@plt+0x73a4>
   18388:	mov	r6, r2
   1838c:	mov	r7, r3
   18390:	bl	10f0c <fileno@plt>
   18394:	mov	r2, r6
   18398:	mov	r3, r7
   1839c:	str	r5, [sp]
   183a0:	bl	10e04 <lseek64@plt>
   183a4:	mvn	r3, #0
   183a8:	mvn	r2, #0
   183ac:	cmp	r1, r3
   183b0:	cmpeq	r0, r2
   183b4:	beq	183d4 <__assert_fail@plt+0x7420>
   183b8:	ldr	r3, [r4]
   183bc:	strd	r0, [r4, #80]	; 0x50
   183c0:	mov	r0, r8
   183c4:	bic	r3, r3, #16
   183c8:	str	r3, [r4]
   183cc:	add	sp, sp, #8
   183d0:	pop	{r4, r5, r6, r7, r8, pc}
   183d4:	mvn	r0, #0
   183d8:	b	183cc <__assert_fail@plt+0x7418>
   183dc:	push	{r4, lr}
   183e0:	mov	r0, #14
   183e4:	bl	10f78 <nl_langinfo@plt>
   183e8:	cmp	r0, #0
   183ec:	beq	18404 <__assert_fail@plt+0x7450>
   183f0:	ldrb	r2, [r0]
   183f4:	ldr	r3, [pc, #16]	; 1840c <__assert_fail@plt+0x7458>
   183f8:	cmp	r2, #0
   183fc:	moveq	r0, r3
   18400:	pop	{r4, pc}
   18404:	ldr	r0, [pc]	; 1840c <__assert_fail@plt+0x7458>
   18408:	pop	{r4, pc}
   1840c:	andeq	r9, r1, r8, lsl #17
   18410:	push	{r4, r5, r6, r7, lr}
   18414:	subs	r6, r0, #0
   18418:	sub	sp, sp, #12
   1841c:	addeq	r6, sp, #4
   18420:	mov	r0, r6
   18424:	mov	r5, r2
   18428:	mov	r7, r1
   1842c:	bl	10e28 <mbrtowc@plt>
   18430:	cmp	r5, #0
   18434:	cmnne	r0, #3
   18438:	mov	r4, r0
   1843c:	bls	18458 <__assert_fail@plt+0x74a4>
   18440:	mov	r0, #0
   18444:	bl	184b0 <__assert_fail@plt+0x74fc>
   18448:	cmp	r0, #0
   1844c:	moveq	r4, #1
   18450:	ldrbeq	r3, [r7]
   18454:	streq	r3, [r6]
   18458:	mov	r0, r4
   1845c:	add	sp, sp, #12
   18460:	pop	{r4, r5, r6, r7, pc}
   18464:	push	{r4, r5, r6, lr}
   18468:	subs	r4, r2, #0
   1846c:	mov	r6, r0
   18470:	mov	r5, r1
   18474:	beq	184a0 <__assert_fail@plt+0x74ec>
   18478:	mov	r1, r4
   1847c:	mvn	r0, #0
   18480:	bl	185a4 <__assert_fail@plt+0x75f0>
   18484:	cmp	r0, r5
   18488:	bcs	184a0 <__assert_fail@plt+0x74ec>
   1848c:	bl	10edc <__errno_location@plt>
   18490:	mov	r3, #12
   18494:	str	r3, [r0]
   18498:	mov	r0, #0
   1849c:	pop	{r4, r5, r6, pc}
   184a0:	mul	r1, r5, r4
   184a4:	mov	r0, r6
   184a8:	pop	{r4, r5, r6, lr}
   184ac:	b	17ea0 <__assert_fail@plt+0x6eec>
   184b0:	push	{lr}		; (str lr, [sp, #-4]!)
   184b4:	sub	sp, sp, #268	; 0x10c
   184b8:	add	r1, sp, #4
   184bc:	ldr	r2, [pc, #60]	; 18500 <__assert_fail@plt+0x754c>
   184c0:	bl	1850c <__assert_fail@plt+0x7558>
   184c4:	cmp	r0, #0
   184c8:	movne	r0, #0
   184cc:	bne	184f8 <__assert_fail@plt+0x7544>
   184d0:	ldr	r1, [pc, #44]	; 18504 <__assert_fail@plt+0x7550>
   184d4:	add	r0, sp, #4
   184d8:	bl	10d44 <strcmp@plt>
   184dc:	cmp	r0, #0
   184e0:	beq	184f8 <__assert_fail@plt+0x7544>
   184e4:	add	r0, sp, #4
   184e8:	ldr	r1, [pc, #24]	; 18508 <__assert_fail@plt+0x7554>
   184ec:	bl	10d44 <strcmp@plt>
   184f0:	adds	r0, r0, #0
   184f4:	movne	r0, #1
   184f8:	add	sp, sp, #268	; 0x10c
   184fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18500:	andeq	r0, r0, r1, lsl #2
   18504:	andeq	r9, r1, r0, lsr #17
   18508:	andeq	r9, r1, r4, lsr #17
   1850c:	push	{r4, r5, r6, lr}
   18510:	mov	r5, r1
   18514:	mov	r1, #0
   18518:	mov	r4, r2
   1851c:	bl	10f54 <setlocale@plt>
   18520:	subs	r6, r0, #0
   18524:	beq	18580 <__assert_fail@plt+0x75cc>
   18528:	bl	10ec4 <strlen@plt>
   1852c:	cmp	r4, r0
   18530:	bhi	18568 <__assert_fail@plt+0x75b4>
   18534:	cmp	r4, #0
   18538:	bne	18544 <__assert_fail@plt+0x7590>
   1853c:	mov	r0, #34	; 0x22
   18540:	pop	{r4, r5, r6, pc}
   18544:	sub	r4, r4, #1
   18548:	mov	r1, r6
   1854c:	mov	r2, r4
   18550:	mov	r0, r5
   18554:	bl	10d74 <memcpy@plt>
   18558:	mov	r3, #0
   1855c:	strb	r3, [r5, r4]
   18560:	mov	r0, #34	; 0x22
   18564:	pop	{r4, r5, r6, pc}
   18568:	add	r2, r0, #1
   1856c:	mov	r1, r6
   18570:	mov	r0, r5
   18574:	bl	10d74 <memcpy@plt>
   18578:	mov	r0, #0
   1857c:	pop	{r4, r5, r6, pc}
   18580:	cmp	r4, #0
   18584:	beq	18594 <__assert_fail@plt+0x75e0>
   18588:	strb	r6, [r5]
   1858c:	mov	r0, #22
   18590:	pop	{r4, r5, r6, pc}
   18594:	mov	r0, #22
   18598:	pop	{r4, r5, r6, pc}
   1859c:	mov	r1, #0
   185a0:	b	10f54 <setlocale@plt>
   185a4:	subs	r2, r1, #1
   185a8:	bxeq	lr
   185ac:	bcc	18784 <__assert_fail@plt+0x77d0>
   185b0:	cmp	r0, r1
   185b4:	bls	18768 <__assert_fail@plt+0x77b4>
   185b8:	tst	r1, r2
   185bc:	beq	18774 <__assert_fail@plt+0x77c0>
   185c0:	clz	r3, r0
   185c4:	clz	r2, r1
   185c8:	sub	r3, r2, r3
   185cc:	rsbs	r3, r3, #31
   185d0:	addne	r3, r3, r3, lsl #1
   185d4:	mov	r2, #0
   185d8:	addne	pc, pc, r3, lsl #2
   185dc:	nop			; (mov r0, r0)
   185e0:	cmp	r0, r1, lsl #31
   185e4:	adc	r2, r2, r2
   185e8:	subcs	r0, r0, r1, lsl #31
   185ec:	cmp	r0, r1, lsl #30
   185f0:	adc	r2, r2, r2
   185f4:	subcs	r0, r0, r1, lsl #30
   185f8:	cmp	r0, r1, lsl #29
   185fc:	adc	r2, r2, r2
   18600:	subcs	r0, r0, r1, lsl #29
   18604:	cmp	r0, r1, lsl #28
   18608:	adc	r2, r2, r2
   1860c:	subcs	r0, r0, r1, lsl #28
   18610:	cmp	r0, r1, lsl #27
   18614:	adc	r2, r2, r2
   18618:	subcs	r0, r0, r1, lsl #27
   1861c:	cmp	r0, r1, lsl #26
   18620:	adc	r2, r2, r2
   18624:	subcs	r0, r0, r1, lsl #26
   18628:	cmp	r0, r1, lsl #25
   1862c:	adc	r2, r2, r2
   18630:	subcs	r0, r0, r1, lsl #25
   18634:	cmp	r0, r1, lsl #24
   18638:	adc	r2, r2, r2
   1863c:	subcs	r0, r0, r1, lsl #24
   18640:	cmp	r0, r1, lsl #23
   18644:	adc	r2, r2, r2
   18648:	subcs	r0, r0, r1, lsl #23
   1864c:	cmp	r0, r1, lsl #22
   18650:	adc	r2, r2, r2
   18654:	subcs	r0, r0, r1, lsl #22
   18658:	cmp	r0, r1, lsl #21
   1865c:	adc	r2, r2, r2
   18660:	subcs	r0, r0, r1, lsl #21
   18664:	cmp	r0, r1, lsl #20
   18668:	adc	r2, r2, r2
   1866c:	subcs	r0, r0, r1, lsl #20
   18670:	cmp	r0, r1, lsl #19
   18674:	adc	r2, r2, r2
   18678:	subcs	r0, r0, r1, lsl #19
   1867c:	cmp	r0, r1, lsl #18
   18680:	adc	r2, r2, r2
   18684:	subcs	r0, r0, r1, lsl #18
   18688:	cmp	r0, r1, lsl #17
   1868c:	adc	r2, r2, r2
   18690:	subcs	r0, r0, r1, lsl #17
   18694:	cmp	r0, r1, lsl #16
   18698:	adc	r2, r2, r2
   1869c:	subcs	r0, r0, r1, lsl #16
   186a0:	cmp	r0, r1, lsl #15
   186a4:	adc	r2, r2, r2
   186a8:	subcs	r0, r0, r1, lsl #15
   186ac:	cmp	r0, r1, lsl #14
   186b0:	adc	r2, r2, r2
   186b4:	subcs	r0, r0, r1, lsl #14
   186b8:	cmp	r0, r1, lsl #13
   186bc:	adc	r2, r2, r2
   186c0:	subcs	r0, r0, r1, lsl #13
   186c4:	cmp	r0, r1, lsl #12
   186c8:	adc	r2, r2, r2
   186cc:	subcs	r0, r0, r1, lsl #12
   186d0:	cmp	r0, r1, lsl #11
   186d4:	adc	r2, r2, r2
   186d8:	subcs	r0, r0, r1, lsl #11
   186dc:	cmp	r0, r1, lsl #10
   186e0:	adc	r2, r2, r2
   186e4:	subcs	r0, r0, r1, lsl #10
   186e8:	cmp	r0, r1, lsl #9
   186ec:	adc	r2, r2, r2
   186f0:	subcs	r0, r0, r1, lsl #9
   186f4:	cmp	r0, r1, lsl #8
   186f8:	adc	r2, r2, r2
   186fc:	subcs	r0, r0, r1, lsl #8
   18700:	cmp	r0, r1, lsl #7
   18704:	adc	r2, r2, r2
   18708:	subcs	r0, r0, r1, lsl #7
   1870c:	cmp	r0, r1, lsl #6
   18710:	adc	r2, r2, r2
   18714:	subcs	r0, r0, r1, lsl #6
   18718:	cmp	r0, r1, lsl #5
   1871c:	adc	r2, r2, r2
   18720:	subcs	r0, r0, r1, lsl #5
   18724:	cmp	r0, r1, lsl #4
   18728:	adc	r2, r2, r2
   1872c:	subcs	r0, r0, r1, lsl #4
   18730:	cmp	r0, r1, lsl #3
   18734:	adc	r2, r2, r2
   18738:	subcs	r0, r0, r1, lsl #3
   1873c:	cmp	r0, r1, lsl #2
   18740:	adc	r2, r2, r2
   18744:	subcs	r0, r0, r1, lsl #2
   18748:	cmp	r0, r1, lsl #1
   1874c:	adc	r2, r2, r2
   18750:	subcs	r0, r0, r1, lsl #1
   18754:	cmp	r0, r1
   18758:	adc	r2, r2, r2
   1875c:	subcs	r0, r0, r1
   18760:	mov	r0, r2
   18764:	bx	lr
   18768:	moveq	r0, #1
   1876c:	movne	r0, #0
   18770:	bx	lr
   18774:	clz	r2, r1
   18778:	rsb	r2, r2, #31
   1877c:	lsr	r0, r0, r2
   18780:	bx	lr
   18784:	cmp	r0, #0
   18788:	mvnne	r0, #0
   1878c:	b	189f0 <__assert_fail@plt+0x7a3c>
   18790:	cmp	r1, #0
   18794:	beq	18784 <__assert_fail@plt+0x77d0>
   18798:	push	{r0, r1, lr}
   1879c:	bl	185a4 <__assert_fail@plt+0x75f0>
   187a0:	pop	{r1, r2, lr}
   187a4:	mul	r3, r2, r0
   187a8:	sub	r1, r1, r3
   187ac:	bx	lr
   187b0:	cmp	r1, #0
   187b4:	beq	189c0 <__assert_fail@plt+0x7a0c>
   187b8:	eor	ip, r0, r1
   187bc:	rsbmi	r1, r1, #0
   187c0:	subs	r2, r1, #1
   187c4:	beq	1898c <__assert_fail@plt+0x79d8>
   187c8:	movs	r3, r0
   187cc:	rsbmi	r3, r0, #0
   187d0:	cmp	r3, r1
   187d4:	bls	18998 <__assert_fail@plt+0x79e4>
   187d8:	tst	r1, r2
   187dc:	beq	189a8 <__assert_fail@plt+0x79f4>
   187e0:	clz	r2, r3
   187e4:	clz	r0, r1
   187e8:	sub	r2, r0, r2
   187ec:	rsbs	r2, r2, #31
   187f0:	addne	r2, r2, r2, lsl #1
   187f4:	mov	r0, #0
   187f8:	addne	pc, pc, r2, lsl #2
   187fc:	nop			; (mov r0, r0)
   18800:	cmp	r3, r1, lsl #31
   18804:	adc	r0, r0, r0
   18808:	subcs	r3, r3, r1, lsl #31
   1880c:	cmp	r3, r1, lsl #30
   18810:	adc	r0, r0, r0
   18814:	subcs	r3, r3, r1, lsl #30
   18818:	cmp	r3, r1, lsl #29
   1881c:	adc	r0, r0, r0
   18820:	subcs	r3, r3, r1, lsl #29
   18824:	cmp	r3, r1, lsl #28
   18828:	adc	r0, r0, r0
   1882c:	subcs	r3, r3, r1, lsl #28
   18830:	cmp	r3, r1, lsl #27
   18834:	adc	r0, r0, r0
   18838:	subcs	r3, r3, r1, lsl #27
   1883c:	cmp	r3, r1, lsl #26
   18840:	adc	r0, r0, r0
   18844:	subcs	r3, r3, r1, lsl #26
   18848:	cmp	r3, r1, lsl #25
   1884c:	adc	r0, r0, r0
   18850:	subcs	r3, r3, r1, lsl #25
   18854:	cmp	r3, r1, lsl #24
   18858:	adc	r0, r0, r0
   1885c:	subcs	r3, r3, r1, lsl #24
   18860:	cmp	r3, r1, lsl #23
   18864:	adc	r0, r0, r0
   18868:	subcs	r3, r3, r1, lsl #23
   1886c:	cmp	r3, r1, lsl #22
   18870:	adc	r0, r0, r0
   18874:	subcs	r3, r3, r1, lsl #22
   18878:	cmp	r3, r1, lsl #21
   1887c:	adc	r0, r0, r0
   18880:	subcs	r3, r3, r1, lsl #21
   18884:	cmp	r3, r1, lsl #20
   18888:	adc	r0, r0, r0
   1888c:	subcs	r3, r3, r1, lsl #20
   18890:	cmp	r3, r1, lsl #19
   18894:	adc	r0, r0, r0
   18898:	subcs	r3, r3, r1, lsl #19
   1889c:	cmp	r3, r1, lsl #18
   188a0:	adc	r0, r0, r0
   188a4:	subcs	r3, r3, r1, lsl #18
   188a8:	cmp	r3, r1, lsl #17
   188ac:	adc	r0, r0, r0
   188b0:	subcs	r3, r3, r1, lsl #17
   188b4:	cmp	r3, r1, lsl #16
   188b8:	adc	r0, r0, r0
   188bc:	subcs	r3, r3, r1, lsl #16
   188c0:	cmp	r3, r1, lsl #15
   188c4:	adc	r0, r0, r0
   188c8:	subcs	r3, r3, r1, lsl #15
   188cc:	cmp	r3, r1, lsl #14
   188d0:	adc	r0, r0, r0
   188d4:	subcs	r3, r3, r1, lsl #14
   188d8:	cmp	r3, r1, lsl #13
   188dc:	adc	r0, r0, r0
   188e0:	subcs	r3, r3, r1, lsl #13
   188e4:	cmp	r3, r1, lsl #12
   188e8:	adc	r0, r0, r0
   188ec:	subcs	r3, r3, r1, lsl #12
   188f0:	cmp	r3, r1, lsl #11
   188f4:	adc	r0, r0, r0
   188f8:	subcs	r3, r3, r1, lsl #11
   188fc:	cmp	r3, r1, lsl #10
   18900:	adc	r0, r0, r0
   18904:	subcs	r3, r3, r1, lsl #10
   18908:	cmp	r3, r1, lsl #9
   1890c:	adc	r0, r0, r0
   18910:	subcs	r3, r3, r1, lsl #9
   18914:	cmp	r3, r1, lsl #8
   18918:	adc	r0, r0, r0
   1891c:	subcs	r3, r3, r1, lsl #8
   18920:	cmp	r3, r1, lsl #7
   18924:	adc	r0, r0, r0
   18928:	subcs	r3, r3, r1, lsl #7
   1892c:	cmp	r3, r1, lsl #6
   18930:	adc	r0, r0, r0
   18934:	subcs	r3, r3, r1, lsl #6
   18938:	cmp	r3, r1, lsl #5
   1893c:	adc	r0, r0, r0
   18940:	subcs	r3, r3, r1, lsl #5
   18944:	cmp	r3, r1, lsl #4
   18948:	adc	r0, r0, r0
   1894c:	subcs	r3, r3, r1, lsl #4
   18950:	cmp	r3, r1, lsl #3
   18954:	adc	r0, r0, r0
   18958:	subcs	r3, r3, r1, lsl #3
   1895c:	cmp	r3, r1, lsl #2
   18960:	adc	r0, r0, r0
   18964:	subcs	r3, r3, r1, lsl #2
   18968:	cmp	r3, r1, lsl #1
   1896c:	adc	r0, r0, r0
   18970:	subcs	r3, r3, r1, lsl #1
   18974:	cmp	r3, r1
   18978:	adc	r0, r0, r0
   1897c:	subcs	r3, r3, r1
   18980:	cmp	ip, #0
   18984:	rsbmi	r0, r0, #0
   18988:	bx	lr
   1898c:	teq	ip, r0
   18990:	rsbmi	r0, r0, #0
   18994:	bx	lr
   18998:	movcc	r0, #0
   1899c:	asreq	r0, ip, #31
   189a0:	orreq	r0, r0, #1
   189a4:	bx	lr
   189a8:	clz	r2, r1
   189ac:	rsb	r2, r2, #31
   189b0:	cmp	ip, #0
   189b4:	lsr	r0, r3, r2
   189b8:	rsbmi	r0, r0, #0
   189bc:	bx	lr
   189c0:	cmp	r0, #0
   189c4:	mvngt	r0, #-2147483648	; 0x80000000
   189c8:	movlt	r0, #-2147483648	; 0x80000000
   189cc:	b	189f0 <__assert_fail@plt+0x7a3c>
   189d0:	cmp	r1, #0
   189d4:	beq	189c0 <__assert_fail@plt+0x7a0c>
   189d8:	push	{r0, r1, lr}
   189dc:	bl	187b8 <__assert_fail@plt+0x7804>
   189e0:	pop	{r1, r2, lr}
   189e4:	mul	r3, r2, r0
   189e8:	sub	r1, r1, r3
   189ec:	bx	lr
   189f0:	push	{r1, lr}
   189f4:	mov	r0, #8
   189f8:	bl	10d38 <raise@plt>
   189fc:	pop	{r1, pc}
   18a00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18a04:	mov	r7, r0
   18a08:	ldr	r6, [pc, #72]	; 18a58 <__assert_fail@plt+0x7aa4>
   18a0c:	ldr	r5, [pc, #72]	; 18a5c <__assert_fail@plt+0x7aa8>
   18a10:	add	r6, pc, r6
   18a14:	add	r5, pc, r5
   18a18:	sub	r6, r6, r5
   18a1c:	mov	r8, r1
   18a20:	mov	r9, r2
   18a24:	bl	10d00 <calloc@plt-0x20>
   18a28:	asrs	r6, r6, #2
   18a2c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a30:	mov	r4, #0
   18a34:	add	r4, r4, #1
   18a38:	ldr	r3, [r5], #4
   18a3c:	mov	r2, r9
   18a40:	mov	r1, r8
   18a44:	mov	r0, r7
   18a48:	blx	r3
   18a4c:	cmp	r6, r4
   18a50:	bne	18a34 <__assert_fail@plt+0x7a80>
   18a54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a58:	strdeq	r1, [r1], -r8
   18a5c:	strdeq	r1, [r1], -r0
   18a60:	bx	lr
   18a64:	ldr	r3, [pc, #12]	; 18a78 <__assert_fail@plt+0x7ac4>
   18a68:	mov	r1, #0
   18a6c:	add	r3, pc, r3
   18a70:	ldr	r2, [r3]
   18a74:	b	10ee8 <__cxa_atexit@plt>
   18a78:	andeq	r1, r1, r0, lsl #13

Disassembly of section .fini:

00018a7c <.fini>:
   18a7c:	push	{r3, lr}
   18a80:	pop	{r3, pc}
