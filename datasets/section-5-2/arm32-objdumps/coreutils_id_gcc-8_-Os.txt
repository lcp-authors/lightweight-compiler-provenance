
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00010eb4 <.init>:
   10eb4:	push	{r3, lr}
   10eb8:	bl	117cc <__assert_fail@plt+0x610>
   10ebc:	pop	{r3, pc}

Disassembly of section .plt:

00010ec0 <calloc@plt-0x14>:
   10ec0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ec4:	ldr	lr, [pc, #4]	; 10ed0 <calloc@plt-0x4>
   10ec8:	add	lr, pc, lr
   10ecc:	ldr	pc, [lr, #8]!
   10ed0:	andeq	r5, r1, r0, lsr r1

00010ed4 <calloc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #304]!	; 0x130

00010ee0 <endgrent@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #296]!	; 0x128

00010eec <fputs_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #288]!	; 0x120

00010ef8 <raise@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #280]!	; 0x118

00010f04 <getpwnam@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #272]!	; 0x110

00010f10 <is_selinux_enabled@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #264]!	; 0x108

00010f1c <strcmp@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #256]!	; 0x100

00010f28 <getpwuid@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #248]!	; 0xf8

00010f34 <fflush@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #240]!	; 0xf0

00010f40 <getuid@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #232]!	; 0xe8

00010f4c <free@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #224]!	; 0xe0

00010f58 <_exit@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #216]!	; 0xd8

00010f64 <memcpy@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #208]!	; 0xd0

00010f70 <mbsinit@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #200]!	; 0xc8

00010f7c <memcmp@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #192]!	; 0xc0

00010f88 <fputc_unlocked@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #184]!	; 0xb8

00010f94 <dcgettext@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #176]!	; 0xb0

00010fa0 <realloc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #168]!	; 0xa8

00010fac <textdomain@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #160]!	; 0xa0

00010fb8 <geteuid@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #152]!	; 0x98

00010fc4 <iswprint@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #144]!	; 0x90

00010fd0 <getegid@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #136]!	; 0x88

00010fdc <lseek64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #128]!	; 0x80

00010fe8 <__ctype_get_mb_cur_max@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #120]!	; 0x78

00010ff4 <getcon@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #112]!	; 0x70

00011000 <__fpending@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #104]!	; 0x68

0001100c <ferror_unlocked@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #96]!	; 0x60

00011018 <mbrtowc@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #88]!	; 0x58

00011024 <error@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #80]!	; 0x50

00011030 <getenv@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #72]!	; 0x48

0001103c <malloc@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #64]!	; 0x40

00011048 <__libc_start_main@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #56]!	; 0x38

00011054 <__freading@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #48]!	; 0x30

00011060 <__gmon_start__@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #40]!	; 0x28

0001106c <getopt_long@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #86016	; 0x15000
   11074:	ldr	pc, [ip, #32]!

00011078 <__ctype_b_loc@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #86016	; 0x15000
   11080:	ldr	pc, [ip, #24]!

00011084 <exit@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #86016	; 0x15000
   1108c:	ldr	pc, [ip, #16]!

00011090 <strtoul@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #86016	; 0x15000
   11098:	ldr	pc, [ip, #8]!

0001109c <strlen@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #86016	; 0x15000
   110a4:	ldr	pc, [ip, #0]!

000110a8 <strchr@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #20, 20	; 0x14000
   110b0:	ldr	pc, [ip, #4088]!	; 0xff8

000110b4 <__errno_location@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #20, 20	; 0x14000
   110bc:	ldr	pc, [ip, #4080]!	; 0xff0

000110c0 <__cxa_atexit@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #20, 20	; 0x14000
   110c8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110cc <getgid@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #20, 20	; 0x14000
   110d4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110d8 <getgrouplist@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #20, 20	; 0x14000
   110e0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110e4 <memset@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #20, 20	; 0x14000
   110ec:	ldr	pc, [ip, #4048]!	; 0xfd0

000110f0 <__printf_chk@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #20, 20	; 0x14000
   110f8:	ldr	pc, [ip, #4040]!	; 0xfc8

000110fc <fileno@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #20, 20	; 0x14000
   11104:	ldr	pc, [ip, #4032]!	; 0xfc0

00011108 <__fprintf_chk@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #20, 20	; 0x14000
   11110:	ldr	pc, [ip, #4024]!	; 0xfb8

00011114 <fclose@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #20, 20	; 0x14000
   1111c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011120 <fseeko64@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #20, 20	; 0x14000
   11128:	ldr	pc, [ip, #4008]!	; 0xfa8

0001112c <setlocale@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #20, 20	; 0x14000
   11134:	ldr	pc, [ip, #4000]!	; 0xfa0

00011138 <endpwent@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #20, 20	; 0x14000
   11140:	ldr	pc, [ip, #3992]!	; 0xf98

00011144 <strrchr@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #20, 20	; 0x14000
   1114c:	ldr	pc, [ip, #3984]!	; 0xf90

00011150 <nl_langinfo@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #20, 20	; 0x14000
   11158:	ldr	pc, [ip, #3976]!	; 0xf88

0001115c <getgroups@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #20, 20	; 0x14000
   11164:	ldr	pc, [ip, #3968]!	; 0xf80

00011168 <bindtextdomain@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #20, 20	; 0x14000
   11170:	ldr	pc, [ip, #3960]!	; 0xf78

00011174 <fputs@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #20, 20	; 0x14000
   1117c:	ldr	pc, [ip, #3952]!	; 0xf70

00011180 <strncmp@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #20, 20	; 0x14000
   11188:	ldr	pc, [ip, #3944]!	; 0xf68

0001118c <abort@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #20, 20	; 0x14000
   11194:	ldr	pc, [ip, #3936]!	; 0xf60

00011198 <getgrgid@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #20, 20	; 0x14000
   111a0:	ldr	pc, [ip, #3928]!	; 0xf58

000111a4 <getgrnam@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #20, 20	; 0x14000
   111ac:	ldr	pc, [ip, #3920]!	; 0xf50

000111b0 <putchar_unlocked@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #20, 20	; 0x14000
   111b8:	ldr	pc, [ip, #3912]!	; 0xf48

000111bc <__assert_fail@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #20, 20	; 0x14000
   111c4:	ldr	pc, [ip, #3904]!	; 0xf40

Disassembly of section .text:

000111c8 <.text>:
   111c8:	push	{r4, lr}
   111cc:	bl	110b4 <__errno_location@plt>
   111d0:	mov	r3, #12
   111d4:	str	r3, [r0]
   111d8:	mov	r0, #0
   111dc:	pop	{r4, pc}
   111e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111e4:	sub	sp, sp, #28
   111e8:	mov	r6, r1
   111ec:	mov	r8, r0
   111f0:	bl	10f10 <is_selinux_enabled@plt>
   111f4:	mov	r7, r0
   111f8:	ldr	r0, [r6]
   111fc:	bl	122d4 <__assert_fail@plt+0x1118>
   11200:	ldr	r1, [pc, #1300]	; 1171c <__assert_fail@plt+0x560>
   11204:	mov	r0, #6
   11208:	bl	1112c <setlocale@plt>
   1120c:	ldr	r1, [pc, #1292]	; 11720 <__assert_fail@plt+0x564>
   11210:	ldr	r0, [pc, #1292]	; 11724 <__assert_fail@plt+0x568>
   11214:	bl	11168 <bindtextdomain@plt>
   11218:	ldr	r0, [pc, #1284]	; 11724 <__assert_fail@plt+0x568>
   1121c:	bl	10fac <textdomain@plt>
   11220:	ldr	r0, [pc, #1280]	; 11728 <__assert_fail@plt+0x56c>
   11224:	ldr	r9, [pc, #1280]	; 1172c <__assert_fail@plt+0x570>
   11228:	ldr	r5, [pc, #1280]	; 11730 <__assert_fail@plt+0x574>
   1122c:	ldr	r4, [pc, #1280]	; 11734 <__assert_fail@plt+0x578>
   11230:	bl	15020 <__assert_fail@plt+0x3e64>
   11234:	mov	sl, #0
   11238:	mov	r3, r9
   1123c:	mov	r2, r5
   11240:	str	sl, [sp]
   11244:	mov	r1, r6
   11248:	mov	r0, r8
   1124c:	bl	1106c <getopt_long@plt>
   11250:	cmn	r0, #1
   11254:	bne	11284 <__assert_fail@plt+0xc8>
   11258:	ldr	r5, [pc, #1240]	; 11738 <__assert_fail@plt+0x57c>
   1125c:	ldr	r4, [pc, #1232]	; 11734 <__assert_fail@plt+0x578>
   11260:	ldr	lr, [r5]
   11264:	ldrb	r2, [r4, #46]	; 0x2e
   11268:	subs	r0, r8, lr
   1126c:	beq	11390 <__assert_fail@plt+0x1d4>
   11270:	cmp	r2, #0
   11274:	beq	11390 <__assert_fail@plt+0x1d4>
   11278:	mov	r2, #5
   1127c:	ldr	r1, [pc, #1208]	; 1173c <__assert_fail@plt+0x580>
   11280:	b	112cc <__assert_fail@plt+0x110>
   11284:	cmp	r0, #97	; 0x61
   11288:	beq	11238 <__assert_fail@plt+0x7c>
   1128c:	bgt	112e4 <__assert_fail@plt+0x128>
   11290:	cmn	r0, #2
   11294:	beq	11354 <__assert_fail@plt+0x198>
   11298:	bgt	112ac <__assert_fail@plt+0xf0>
   1129c:	cmn	r0, #3
   112a0:	beq	1135c <__assert_fail@plt+0x1a0>
   112a4:	mov	r0, #1
   112a8:	b	11358 <__assert_fail@plt+0x19c>
   112ac:	cmp	r0, #71	; 0x47
   112b0:	beq	11348 <__assert_fail@plt+0x18c>
   112b4:	cmp	r0, #90	; 0x5a
   112b8:	bne	112a4 <__assert_fail@plt+0xe8>
   112bc:	cmp	r7, #0
   112c0:	bgt	11324 <__assert_fail@plt+0x168>
   112c4:	ldr	r1, [pc, #1140]	; 11740 <__assert_fail@plt+0x584>
   112c8:	mov	r2, #5
   112cc:	mov	r0, #0
   112d0:	bl	10f94 <dcgettext@plt>
   112d4:	mov	r2, r0
   112d8:	mov	r1, #0
   112dc:	mov	r0, #1
   112e0:	bl	11024 <error@plt>
   112e4:	cmp	r0, #114	; 0x72
   112e8:	mov	r3, #1
   112ec:	beq	11338 <__assert_fail@plt+0x17c>
   112f0:	bgt	1130c <__assert_fail@plt+0x150>
   112f4:	cmp	r0, #103	; 0x67
   112f8:	beq	11330 <__assert_fail@plt+0x174>
   112fc:	cmp	r0, #110	; 0x6e
   11300:	bne	112a4 <__assert_fail@plt+0xe8>
   11304:	strb	r3, [r4, #12]
   11308:	b	11234 <__assert_fail@plt+0x78>
   1130c:	cmp	r0, #117	; 0x75
   11310:	beq	11340 <__assert_fail@plt+0x184>
   11314:	cmp	r0, #122	; 0x7a
   11318:	bne	112a4 <__assert_fail@plt+0xe8>
   1131c:	strb	r3, [r4, #45]	; 0x2d
   11320:	b	11234 <__assert_fail@plt+0x78>
   11324:	mov	r3, #1
   11328:	strb	r3, [r4, #46]	; 0x2e
   1132c:	b	11234 <__assert_fail@plt+0x78>
   11330:	strb	r3, [r4, #34]	; 0x22
   11334:	b	11234 <__assert_fail@plt+0x78>
   11338:	strb	r3, [r4, #1]
   1133c:	b	11234 <__assert_fail@plt+0x78>
   11340:	strb	r3, [r4]
   11344:	b	11234 <__assert_fail@plt+0x78>
   11348:	mov	r3, #1
   1134c:	strb	r3, [r4, #44]	; 0x2c
   11350:	b	11234 <__assert_fail@plt+0x78>
   11354:	mov	r0, #0
   11358:	bl	11d00 <__assert_fail@plt+0xb44>
   1135c:	ldr	r3, [pc, #992]	; 11744 <__assert_fail@plt+0x588>
   11360:	ldr	r0, [pc, #992]	; 11748 <__assert_fail@plt+0x58c>
   11364:	ldr	r2, [pc, #992]	; 1174c <__assert_fail@plt+0x590>
   11368:	stmib	sp, {r3, sl}
   1136c:	ldr	r3, [pc, #988]	; 11750 <__assert_fail@plt+0x594>
   11370:	ldr	r1, [pc, #988]	; 11754 <__assert_fail@plt+0x598>
   11374:	str	r3, [sp]
   11378:	ldr	r3, [pc, #984]	; 11758 <__assert_fail@plt+0x59c>
   1137c:	ldr	r0, [r0]
   11380:	ldr	r3, [r3]
   11384:	bl	1405c <__assert_fail@plt+0x2ea0>
   11388:	mov	r0, #0
   1138c:	bl	11084 <exit@plt>
   11390:	ldrb	r1, [r4, #34]	; 0x22
   11394:	ldrb	ip, [r4]
   11398:	ldrb	r8, [r4, #44]	; 0x2c
   1139c:	add	r3, ip, r1
   113a0:	add	r3, r3, r8
   113a4:	add	r3, r3, r2
   113a8:	cmp	r3, #1
   113ac:	movgt	r2, #5
   113b0:	ldrgt	r1, [pc, #932]	; 1175c <__assert_fail@plt+0x5a0>
   113b4:	bgt	112cc <__assert_fail@plt+0x110>
   113b8:	orr	ip, ip, r2
   113bc:	orr	r1, r1, ip
   113c0:	orrs	r3, r8, r1
   113c4:	bne	1149c <__assert_fail@plt+0x2e0>
   113c8:	ldrb	r3, [r4, #1]
   113cc:	cmp	r3, #0
   113d0:	bne	113e0 <__assert_fail@plt+0x224>
   113d4:	ldrb	r8, [r4, #12]
   113d8:	cmp	r8, #0
   113dc:	beq	113ec <__assert_fail@plt+0x230>
   113e0:	mov	r2, #5
   113e4:	ldr	r1, [pc, #884]	; 11760 <__assert_fail@plt+0x5a4>
   113e8:	b	112cc <__assert_fail@plt+0x110>
   113ec:	ldrb	r3, [r4, #45]	; 0x2d
   113f0:	cmp	r3, #0
   113f4:	movne	r2, #5
   113f8:	ldrne	r1, [pc, #868]	; 11764 <__assert_fail@plt+0x5a8>
   113fc:	bne	112cc <__assert_fail@plt+0x110>
   11400:	cmp	r0, #0
   11404:	bne	116f8 <__assert_fail@plt+0x53c>
   11408:	ldr	r0, [pc, #856]	; 11768 <__assert_fail@plt+0x5ac>
   1140c:	bl	11030 <getenv@plt>
   11410:	cmp	r0, #0
   11414:	beq	114ac <__assert_fail@plt+0x2f0>
   11418:	ldrb	r5, [r4]
   1141c:	cmp	r5, #0
   11420:	bne	115c4 <__assert_fail@plt+0x408>
   11424:	ldrb	r3, [r4, #34]	; 0x22
   11428:	cmp	r3, #0
   1142c:	bne	11624 <__assert_fail@plt+0x468>
   11430:	ldrb	r3, [r4, #44]	; 0x2c
   11434:	cmp	r3, #0
   11438:	bne	11670 <__assert_fail@plt+0x4b4>
   1143c:	ldrb	r3, [r4, #46]	; 0x2e
   11440:	cmp	r3, #0
   11444:	bne	11670 <__assert_fail@plt+0x4b4>
   11448:	mov	r7, #0
   1144c:	bl	110b4 <__errno_location@plt>
   11450:	str	r7, [r0]
   11454:	mov	r6, r0
   11458:	bl	10fb8 <geteuid@plt>
   1145c:	cmn	r0, #1
   11460:	str	r0, [r4, #8]
   11464:	bne	1147c <__assert_fail@plt+0x2c0>
   11468:	ldr	r6, [r6]
   1146c:	cmp	r6, r7
   11470:	movne	r2, #5
   11474:	ldrne	r1, [pc, #752]	; 1176c <__assert_fail@plt+0x5b0>
   11478:	bne	11604 <__assert_fail@plt+0x448>
   1147c:	cmp	r5, #0
   11480:	beq	11618 <__assert_fail@plt+0x45c>
   11484:	ldrb	r3, [r4, #1]
   11488:	cmp	r3, #0
   1148c:	bne	115d0 <__assert_fail@plt+0x414>
   11490:	mov	r0, #0
   11494:	bl	11880 <__assert_fail@plt+0x6c4>
   11498:	b	1154c <__assert_fail@plt+0x390>
   1149c:	cmp	r0, #0
   114a0:	bne	116f8 <__assert_fail@plt+0x53c>
   114a4:	cmp	r2, #0
   114a8:	beq	11418 <__assert_fail@plt+0x25c>
   114ac:	cmp	r7, #0
   114b0:	ble	11418 <__assert_fail@plt+0x25c>
   114b4:	ldr	r0, [pc, #692]	; 11770 <__assert_fail@plt+0x5b4>
   114b8:	bl	10ff4 <getcon@plt>
   114bc:	cmp	r0, #0
   114c0:	beq	11418 <__assert_fail@plt+0x25c>
   114c4:	ldrb	r3, [r4, #46]	; 0x2e
   114c8:	cmp	r3, #0
   114cc:	movne	r2, #5
   114d0:	ldrne	r1, [pc, #668]	; 11774 <__assert_fail@plt+0x5b8>
   114d4:	beq	11418 <__assert_fail@plt+0x25c>
   114d8:	b	112cc <__assert_fail@plt+0x110>
   114dc:	ldr	r0, [r6, r3, lsl #2]
   114e0:	ldrb	r3, [r0]
   114e4:	cmp	r3, #0
   114e8:	bne	11560 <__assert_fail@plt+0x3a4>
   114ec:	bl	110b4 <__errno_location@plt>
   114f0:	mov	r1, r8
   114f4:	mov	r2, #5
   114f8:	ldr	fp, [r0]
   114fc:	mov	r0, #0
   11500:	bl	10f94 <dcgettext@plt>
   11504:	ldr	r3, [r5]
   11508:	mov	r2, r0
   1150c:	str	r2, [sp, #20]
   11510:	ldr	r0, [r6, r3, lsl #2]
   11514:	bl	138d4 <__assert_fail@plt+0x2718>
   11518:	mov	r3, r0
   1151c:	mov	r1, fp
   11520:	ldr	r2, [sp, #20]
   11524:	mov	r0, #0
   11528:	bl	11024 <error@plt>
   1152c:	mov	r3, #0
   11530:	strb	r3, [r7]
   11534:	ldr	r3, [r5]
   11538:	add	r3, r3, #1
   1153c:	str	r3, [r5]
   11540:	ldr	r3, [r5]
   11544:	cmp	r3, sl
   11548:	bcc	114dc <__assert_fail@plt+0x320>
   1154c:	ldr	r3, [pc, #548]	; 11778 <__assert_fail@plt+0x5bc>
   11550:	ldrb	r0, [r3]
   11554:	eor	r0, r0, #1
   11558:	add	sp, sp, #28
   1155c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11560:	mov	r3, #0
   11564:	mov	r1, r9
   11568:	mov	r2, r3
   1156c:	str	r3, [sp]
   11570:	bl	13b74 <__assert_fail@plt+0x29b8>
   11574:	cmp	r0, #0
   11578:	bne	114ec <__assert_fail@plt+0x330>
   1157c:	ldr	r0, [r4, #8]
   11580:	bl	10f28 <getpwuid@plt>
   11584:	subs	fp, r0, #0
   11588:	beq	114ec <__assert_fail@plt+0x330>
   1158c:	ldr	r0, [fp]
   11590:	bl	143c0 <__assert_fail@plt+0x3204>
   11594:	ldr	r3, [fp, #8]
   11598:	str	r0, [sp, #20]
   1159c:	str	r3, [r4, #4]
   115a0:	str	r3, [r4, #8]
   115a4:	ldr	r3, [fp, #12]
   115a8:	str	r3, [r4, #36]	; 0x24
   115ac:	str	r3, [r4, #40]	; 0x28
   115b0:	bl	11880 <__assert_fail@plt+0x6c4>
   115b4:	ldr	r2, [sp, #20]
   115b8:	mov	r0, r2
   115bc:	bl	1221c <__assert_fail@plt+0x1060>
   115c0:	b	11534 <__assert_fail@plt+0x378>
   115c4:	ldrb	r3, [r4, #1]
   115c8:	cmp	r3, #0
   115cc:	beq	11448 <__assert_fail@plt+0x28c>
   115d0:	mov	r7, #0
   115d4:	bl	110b4 <__errno_location@plt>
   115d8:	str	r7, [r0]
   115dc:	mov	r6, r0
   115e0:	bl	10f40 <getuid@plt>
   115e4:	cmn	r0, #1
   115e8:	str	r0, [r4, #4]
   115ec:	bne	1168c <__assert_fail@plt+0x4d0>
   115f0:	ldr	r6, [r6]
   115f4:	cmp	r6, #0
   115f8:	beq	1168c <__assert_fail@plt+0x4d0>
   115fc:	ldr	r1, [pc, #376]	; 1177c <__assert_fail@plt+0x5c0>
   11600:	mov	r2, #5
   11604:	mov	r0, r7
   11608:	bl	10f94 <dcgettext@plt>
   1160c:	mov	r2, r0
   11610:	mov	r1, r6
   11614:	b	112dc <__assert_fail@plt+0x120>
   11618:	ldrb	r3, [r4, #34]	; 0x22
   1161c:	cmp	r3, #0
   11620:	beq	11670 <__assert_fail@plt+0x4b4>
   11624:	mov	r6, #0
   11628:	bl	110b4 <__errno_location@plt>
   1162c:	str	r6, [r0]
   11630:	mov	r5, r0
   11634:	bl	10fd0 <getegid@plt>
   11638:	cmn	r0, #1
   1163c:	mov	r3, r6
   11640:	str	r0, [r4, #40]	; 0x28
   11644:	bne	116bc <__assert_fail@plt+0x500>
   11648:	ldr	r7, [r5]
   1164c:	cmp	r7, r6
   11650:	beq	116bc <__assert_fail@plt+0x500>
   11654:	mov	r2, #5
   11658:	ldr	r1, [pc, #288]	; 11780 <__assert_fail@plt+0x5c4>
   1165c:	mov	r0, r6
   11660:	bl	10f94 <dcgettext@plt>
   11664:	mov	r2, r0
   11668:	mov	r1, r7
   1166c:	b	112dc <__assert_fail@plt+0x120>
   11670:	ldrb	r3, [r4, #44]	; 0x2c
   11674:	cmp	r3, #0
   11678:	bne	115d0 <__assert_fail@plt+0x414>
   1167c:	ldrb	r3, [r4, #46]	; 0x2e
   11680:	cmp	r3, #0
   11684:	bne	116a0 <__assert_fail@plt+0x4e4>
   11688:	b	115d0 <__assert_fail@plt+0x414>
   1168c:	cmp	r5, #0
   11690:	bne	11490 <__assert_fail@plt+0x2d4>
   11694:	ldrb	r3, [r4, #34]	; 0x22
   11698:	cmp	r3, #0
   1169c:	bne	11624 <__assert_fail@plt+0x468>
   116a0:	ldrb	r3, [r4, #44]	; 0x2c
   116a4:	cmp	r3, #0
   116a8:	bne	11624 <__assert_fail@plt+0x468>
   116ac:	ldrb	r3, [r4, #46]	; 0x2e
   116b0:	cmp	r3, #0
   116b4:	bne	11490 <__assert_fail@plt+0x2d4>
   116b8:	b	11624 <__assert_fail@plt+0x468>
   116bc:	str	r3, [r5]
   116c0:	bl	110cc <getgid@plt>
   116c4:	cmn	r0, #1
   116c8:	str	r0, [r4, #36]	; 0x24
   116cc:	bne	11490 <__assert_fail@plt+0x2d4>
   116d0:	ldr	r4, [r5]
   116d4:	cmp	r4, #0
   116d8:	beq	11490 <__assert_fail@plt+0x2d4>
   116dc:	mov	r2, #5
   116e0:	ldr	r1, [pc, #156]	; 11784 <__assert_fail@plt+0x5c8>
   116e4:	mov	r0, #0
   116e8:	bl	10f94 <dcgettext@plt>
   116ec:	mov	r2, r0
   116f0:	mov	r1, r4
   116f4:	b	112dc <__assert_fail@plt+0x120>
   116f8:	cmp	r0, #1
   116fc:	add	sl, lr, r0
   11700:	ldr	r9, [pc, #128]	; 11788 <__assert_fail@plt+0x5cc>
   11704:	movls	r3, #0
   11708:	movhi	r3, #1
   1170c:	ldr	r8, [pc, #120]	; 1178c <__assert_fail@plt+0x5d0>
   11710:	strb	r3, [r4, #73]	; 0x49
   11714:	ldr	r7, [pc, #92]	; 11778 <__assert_fail@plt+0x5bc>
   11718:	b	11540 <__assert_fail@plt+0x384>
   1171c:	andeq	r5, r1, r4, ror r2
   11720:	andeq	r5, r1, lr, lsl #12
   11724:	andeq	r5, r1, fp, ror #10
   11728:	andeq	r2, r1, r8, asr #2
   1172c:	andeq	r5, r1, ip, ror r0
   11730:	andeq	r5, r1, ip, ror r6
   11734:	andeq	r6, r2, ip, ror r1
   11738:	andeq	r6, r2, r8, ror #2
   1173c:	andeq	r5, r1, r5, lsl #13
   11740:	andeq	r5, r1, r6, lsr #12
   11744:	andeq	r5, r1, sp, asr r6
   11748:	andeq	r6, r2, r4, ror r1
   1174c:	andeq	r5, r1, r7, ror #10
   11750:	andeq	r5, r1, sp, ror #12
   11754:			; <UNDEFINED> instruction: 0x000151be
   11758:	andeq	r6, r2, r8, lsl r1
   1175c:			; <UNDEFINED> instruction: 0x000156b7
   11760:	andeq	r5, r1, r3, ror #13
   11764:	andeq	r5, r1, r9, lsl r7
   11768:	andeq	r5, r1, r7, asr #14
   1176c:	andeq	r5, r1, r2, lsl #15
   11770:	andeq	r6, r2, ip, lsr #3
   11774:	andeq	r5, r1, r7, asr r7
   11778:	andeq	r6, r2, r4, lsl r1
   1177c:	muleq	r1, fp, r7
   11780:	andeq	r5, r1, pc, lsr #15
   11784:	andeq	r5, r1, r8, asr #15
   11788:	andeq	r6, r2, r4, lsl #3
   1178c:	andeq	r5, r1, r1, ror r7
   11790:	mov	fp, #0
   11794:	mov	lr, #0
   11798:	pop	{r1}		; (ldr r1, [sp], #4)
   1179c:	mov	r2, sp
   117a0:	push	{r2}		; (str r2, [sp, #-4]!)
   117a4:	push	{r0}		; (str r0, [sp, #-4]!)
   117a8:	ldr	ip, [pc, #16]	; 117c0 <__assert_fail@plt+0x604>
   117ac:	push	{ip}		; (str ip, [sp, #-4]!)
   117b0:	ldr	r0, [pc, #12]	; 117c4 <__assert_fail@plt+0x608>
   117b4:	ldr	r3, [pc, #12]	; 117c8 <__assert_fail@plt+0x60c>
   117b8:	bl	11048 <__libc_start_main@plt>
   117bc:	bl	1118c <abort@plt>
   117c0:	andeq	r5, r1, ip, lsl r0
   117c4:	andeq	r1, r1, r0, ror #3
   117c8:			; <UNDEFINED> instruction: 0x00014fbc
   117cc:	ldr	r3, [pc, #20]	; 117e8 <__assert_fail@plt+0x62c>
   117d0:	ldr	r2, [pc, #20]	; 117ec <__assert_fail@plt+0x630>
   117d4:	add	r3, pc, r3
   117d8:	ldr	r2, [r3, r2]
   117dc:	cmp	r2, #0
   117e0:	bxeq	lr
   117e4:	b	11060 <__gmon_start__@plt>
   117e8:	andeq	r4, r1, r4, lsr #16
   117ec:	andeq	r0, r0, r8, lsl #2
   117f0:	ldr	r0, [pc, #24]	; 11810 <__assert_fail@plt+0x654>
   117f4:	ldr	r3, [pc, #24]	; 11814 <__assert_fail@plt+0x658>
   117f8:	cmp	r3, r0
   117fc:	bxeq	lr
   11800:	ldr	r3, [pc, #16]	; 11818 <__assert_fail@plt+0x65c>
   11804:	cmp	r3, #0
   11808:	bxeq	lr
   1180c:	bx	r3
   11810:	andeq	r6, r2, r0, ror #2
   11814:	andeq	r6, r2, r0, ror #2
   11818:	andeq	r0, r0, r0
   1181c:	ldr	r0, [pc, #36]	; 11848 <__assert_fail@plt+0x68c>
   11820:	ldr	r1, [pc, #36]	; 1184c <__assert_fail@plt+0x690>
   11824:	sub	r1, r1, r0
   11828:	asr	r1, r1, #2
   1182c:	add	r1, r1, r1, lsr #31
   11830:	asrs	r1, r1, #1
   11834:	bxeq	lr
   11838:	ldr	r3, [pc, #16]	; 11850 <__assert_fail@plt+0x694>
   1183c:	cmp	r3, #0
   11840:	bxeq	lr
   11844:	bx	r3
   11848:	andeq	r6, r2, r0, ror #2
   1184c:	andeq	r6, r2, r0, ror #2
   11850:	andeq	r0, r0, r0
   11854:	push	{r4, lr}
   11858:	ldr	r4, [pc, #24]	; 11878 <__assert_fail@plt+0x6bc>
   1185c:	ldrb	r3, [r4]
   11860:	cmp	r3, #0
   11864:	popne	{r4, pc}
   11868:	bl	117f0 <__assert_fail@plt+0x634>
   1186c:	mov	r3, #1
   11870:	strb	r3, [r4]
   11874:	pop	{r4, pc}
   11878:	andeq	r6, r2, r8, ror r1
   1187c:	b	1181c <__assert_fail@plt+0x660>
   11880:	push	{r4, r5, r6, r7, r8, r9, lr}
   11884:	sub	sp, sp, #20
   11888:	ldr	r4, [pc, #1076]	; 11cc4 <__assert_fail@plt+0xb08>
   1188c:	ldrb	r3, [r4]
   11890:	cmp	r3, #0
   11894:	beq	11924 <__assert_fail@plt+0x768>
   11898:	ldrb	r3, [r4, #1]
   1189c:	cmp	r3, #0
   118a0:	ldrb	r3, [r4, #12]
   118a4:	ldrne	r6, [r4, #4]
   118a8:	ldreq	r6, [r4, #8]
   118ac:	cmp	r3, #0
   118b0:	beq	11904 <__assert_fail@plt+0x748>
   118b4:	mov	r0, r6
   118b8:	bl	10f28 <getpwuid@plt>
   118bc:	subs	r5, r0, #0
   118c0:	ldrne	r0, [r5]
   118c4:	bne	11914 <__assert_fail@plt+0x758>
   118c8:	mov	r2, #5
   118cc:	ldr	r1, [pc, #1012]	; 11cc8 <__assert_fail@plt+0xb0c>
   118d0:	bl	10f94 <dcgettext@plt>
   118d4:	mov	r7, r0
   118d8:	ldr	r2, [pc, #1004]	; 11ccc <__assert_fail@plt+0xb10>
   118dc:	mov	r1, r5
   118e0:	mov	r0, r6
   118e4:	bl	1226c <__assert_fail@plt+0x10b0>
   118e8:	mov	r3, r0
   118ec:	mov	r2, r7
   118f0:	mov	r1, r5
   118f4:	mov	r0, r5
   118f8:	bl	11024 <error@plt>
   118fc:	ldr	r3, [pc, #972]	; 11cd0 <__assert_fail@plt+0xb14>
   11900:	strb	r5, [r3]
   11904:	ldr	r2, [pc, #960]	; 11ccc <__assert_fail@plt+0xb10>
   11908:	mov	r0, r6
   1190c:	mov	r1, #0
   11910:	bl	1226c <__assert_fail@plt+0x10b0>
   11914:	ldr	r3, [pc, #952]	; 11cd4 <__assert_fail@plt+0xb18>
   11918:	ldr	r1, [r3]
   1191c:	bl	10eec <fputs_unlocked@plt>
   11920:	b	11958 <__assert_fail@plt+0x79c>
   11924:	ldrb	r3, [r4, #34]	; 0x22
   11928:	cmp	r3, #0
   1192c:	beq	11998 <__assert_fail@plt+0x7dc>
   11930:	ldrb	r3, [r4, #1]
   11934:	ldrb	r1, [r4, #12]
   11938:	cmp	r3, #0
   1193c:	ldrne	r0, [r4, #36]	; 0x24
   11940:	ldreq	r0, [r4, #40]	; 0x28
   11944:	bl	11f58 <__assert_fail@plt+0xd9c>
   11948:	ldr	r2, [pc, #896]	; 11cd0 <__assert_fail@plt+0xb14>
   1194c:	ldrb	r3, [r2]
   11950:	and	r0, r0, r3
   11954:	strb	r0, [r2]
   11958:	ldrb	r3, [r4, #45]	; 0x2d
   1195c:	cmp	r3, #0
   11960:	moveq	r0, #10
   11964:	beq	1198c <__assert_fail@plt+0x7d0>
   11968:	ldrb	r0, [r4, #44]	; 0x2c
   1196c:	cmp	r0, #0
   11970:	beq	1198c <__assert_fail@plt+0x7d0>
   11974:	ldrb	r0, [r4, #73]	; 0x49
   11978:	cmp	r0, #0
   1197c:	beq	1198c <__assert_fail@plt+0x7d0>
   11980:	mov	r0, #0
   11984:	bl	111b0 <putchar_unlocked@plt>
   11988:	mov	r0, #0
   1198c:	bl	111b0 <putchar_unlocked@plt>
   11990:	add	sp, sp, #20
   11994:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11998:	ldrb	r3, [r4, #44]	; 0x2c
   1199c:	cmp	r3, #0
   119a0:	beq	119d0 <__assert_fail@plt+0x814>
   119a4:	ldrb	r2, [r4, #45]	; 0x2d
   119a8:	ldrb	r3, [r4, #12]
   119ac:	ldr	r1, [r4, #4]
   119b0:	cmp	r2, #0
   119b4:	movne	r2, #0
   119b8:	moveq	r2, #32
   119bc:	str	r3, [sp]
   119c0:	str	r2, [sp, #4]
   119c4:	ldrd	r2, [r4, #36]	; 0x24
   119c8:	bl	11fd4 <__assert_fail@plt+0xe18>
   119cc:	b	11948 <__assert_fail@plt+0x78c>
   119d0:	ldrb	r6, [r4, #46]	; 0x2e
   119d4:	cmp	r6, #0
   119d8:	beq	119ec <__assert_fail@plt+0x830>
   119dc:	ldr	r3, [pc, #752]	; 11cd4 <__assert_fail@plt+0xb18>
   119e0:	ldr	r0, [r4, #48]	; 0x30
   119e4:	ldr	r1, [r3]
   119e8:	b	1191c <__assert_fail@plt+0x760>
   119ec:	mov	r2, #5
   119f0:	ldr	r1, [pc, #736]	; 11cd8 <__assert_fail@plt+0xb1c>
   119f4:	mov	r5, r0
   119f8:	mov	r0, r6
   119fc:	bl	10f94 <dcgettext@plt>
   11a00:	mov	r7, r0
   11a04:	mov	r1, r6
   11a08:	ldr	r0, [r4, #4]
   11a0c:	add	r2, r4, #13
   11a10:	bl	1226c <__assert_fail@plt+0x10b0>
   11a14:	mov	r2, r0
   11a18:	mov	r1, r7
   11a1c:	mov	r0, #1
   11a20:	bl	110f0 <__printf_chk@plt>
   11a24:	ldr	r0, [r4, #4]
   11a28:	bl	10f28 <getpwuid@plt>
   11a2c:	subs	r6, r0, #0
   11a30:	beq	11a44 <__assert_fail@plt+0x888>
   11a34:	ldr	r1, [pc, #672]	; 11cdc <__assert_fail@plt+0xb20>
   11a38:	mov	r0, #1
   11a3c:	ldr	r2, [r6]
   11a40:	bl	110f0 <__printf_chk@plt>
   11a44:	mov	r2, #5
   11a48:	ldr	r1, [pc, #656]	; 11ce0 <__assert_fail@plt+0xb24>
   11a4c:	mov	r0, #0
   11a50:	bl	10f94 <dcgettext@plt>
   11a54:	mov	r7, r0
   11a58:	ldr	r2, [pc, #644]	; 11ce4 <__assert_fail@plt+0xb28>
   11a5c:	mov	r1, #0
   11a60:	ldr	r0, [r4, #36]	; 0x24
   11a64:	bl	1226c <__assert_fail@plt+0x10b0>
   11a68:	mov	r2, r0
   11a6c:	mov	r1, r7
   11a70:	mov	r0, #1
   11a74:	bl	110f0 <__printf_chk@plt>
   11a78:	ldr	r0, [r4, #36]	; 0x24
   11a7c:	bl	11198 <getgrgid@plt>
   11a80:	cmp	r0, #0
   11a84:	beq	11a98 <__assert_fail@plt+0x8dc>
   11a88:	ldr	r1, [pc, #588]	; 11cdc <__assert_fail@plt+0xb20>
   11a8c:	ldr	r2, [r0]
   11a90:	mov	r0, #1
   11a94:	bl	110f0 <__printf_chk@plt>
   11a98:	ldr	r3, [r4, #4]
   11a9c:	ldr	r2, [r4, #8]
   11aa0:	cmp	r2, r3
   11aa4:	beq	11afc <__assert_fail@plt+0x940>
   11aa8:	mov	r2, #5
   11aac:	ldr	r1, [pc, #564]	; 11ce8 <__assert_fail@plt+0xb2c>
   11ab0:	mov	r0, #0
   11ab4:	bl	10f94 <dcgettext@plt>
   11ab8:	mov	r6, r0
   11abc:	ldr	r2, [pc, #520]	; 11ccc <__assert_fail@plt+0xb10>
   11ac0:	mov	r1, #0
   11ac4:	ldr	r0, [r4, #8]
   11ac8:	bl	1226c <__assert_fail@plt+0x10b0>
   11acc:	mov	r2, r0
   11ad0:	mov	r1, r6
   11ad4:	mov	r0, #1
   11ad8:	bl	110f0 <__printf_chk@plt>
   11adc:	ldr	r0, [r4, #8]
   11ae0:	bl	10f28 <getpwuid@plt>
   11ae4:	subs	r6, r0, #0
   11ae8:	beq	11afc <__assert_fail@plt+0x940>
   11aec:	ldr	r1, [pc, #488]	; 11cdc <__assert_fail@plt+0xb20>
   11af0:	mov	r0, #1
   11af4:	ldr	r2, [r6]
   11af8:	bl	110f0 <__printf_chk@plt>
   11afc:	ldr	r3, [r4, #36]	; 0x24
   11b00:	ldr	r7, [r4, #40]	; 0x28
   11b04:	cmp	r7, r3
   11b08:	beq	11b60 <__assert_fail@plt+0x9a4>
   11b0c:	mov	r2, #5
   11b10:	ldr	r1, [pc, #468]	; 11cec <__assert_fail@plt+0xb30>
   11b14:	mov	r0, #0
   11b18:	bl	10f94 <dcgettext@plt>
   11b1c:	mov	r8, r0
   11b20:	ldr	r2, [pc, #444]	; 11ce4 <__assert_fail@plt+0xb28>
   11b24:	mov	r1, #0
   11b28:	mov	r0, r7
   11b2c:	bl	1226c <__assert_fail@plt+0x10b0>
   11b30:	mov	r2, r0
   11b34:	mov	r1, r8
   11b38:	mov	r0, #1
   11b3c:	bl	110f0 <__printf_chk@plt>
   11b40:	ldr	r0, [r4, #40]	; 0x28
   11b44:	bl	11198 <getgrgid@plt>
   11b48:	cmp	r0, #0
   11b4c:	beq	11b60 <__assert_fail@plt+0x9a4>
   11b50:	ldr	r1, [pc, #388]	; 11cdc <__assert_fail@plt+0xb20>
   11b54:	ldr	r2, [r0]
   11b58:	mov	r0, #1
   11b5c:	bl	110f0 <__printf_chk@plt>
   11b60:	cmp	r5, #0
   11b64:	ldreq	r1, [r4, #40]	; 0x28
   11b68:	beq	11b78 <__assert_fail@plt+0x9bc>
   11b6c:	cmp	r6, #0
   11b70:	ldrne	r1, [r6, #12]
   11b74:	mvneq	r1, #0
   11b78:	add	r2, sp, #12
   11b7c:	mov	r0, r5
   11b80:	bl	1441c <__assert_fail@plt+0x3260>
   11b84:	subs	r6, r0, #0
   11b88:	bge	11bfc <__assert_fail@plt+0xa40>
   11b8c:	bl	110b4 <__errno_location@plt>
   11b90:	cmp	r5, #0
   11b94:	mov	r2, #5
   11b98:	ldr	r6, [r0]
   11b9c:	beq	11bdc <__assert_fail@plt+0xa20>
   11ba0:	ldr	r1, [pc, #328]	; 11cf0 <__assert_fail@plt+0xb34>
   11ba4:	mov	r0, #0
   11ba8:	bl	10f94 <dcgettext@plt>
   11bac:	mov	r7, r0
   11bb0:	mov	r0, r5
   11bb4:	bl	138d4 <__assert_fail@plt+0x2718>
   11bb8:	mov	r3, r0
   11bbc:	mov	r2, r7
   11bc0:	mov	r1, r6
   11bc4:	mov	r0, #0
   11bc8:	bl	11024 <error@plt>
   11bcc:	ldr	r3, [pc, #252]	; 11cd0 <__assert_fail@plt+0xb14>
   11bd0:	mov	r2, #0
   11bd4:	strb	r2, [r3]
   11bd8:	b	11958 <__assert_fail@plt+0x79c>
   11bdc:	ldr	r1, [pc, #272]	; 11cf4 <__assert_fail@plt+0xb38>
   11be0:	mov	r0, r5
   11be4:	bl	10f94 <dcgettext@plt>
   11be8:	mov	r2, r0
   11bec:	mov	r1, r6
   11bf0:	mov	r0, r5
   11bf4:	bl	11024 <error@plt>
   11bf8:	b	11bcc <__assert_fail@plt+0xa10>
   11bfc:	beq	11c1c <__assert_fail@plt+0xa60>
   11c00:	ldr	r1, [pc, #240]	; 11cf8 <__assert_fail@plt+0xb3c>
   11c04:	mov	r2, #5
   11c08:	mov	r0, #0
   11c0c:	bl	10f94 <dcgettext@plt>
   11c10:	ldr	r3, [pc, #188]	; 11cd4 <__assert_fail@plt+0xb18>
   11c14:	ldr	r1, [r3]
   11c18:	bl	10eec <fputs_unlocked@plt>
   11c1c:	ldr	r7, [pc, #192]	; 11ce4 <__assert_fail@plt+0xb28>
   11c20:	mov	r5, #0
   11c24:	ldr	r8, [pc, #168]	; 11cd4 <__assert_fail@plt+0xb18>
   11c28:	ldr	r9, [pc, #172]	; 11cdc <__assert_fail@plt+0xb20>
   11c2c:	cmp	r6, r5
   11c30:	bne	11c6c <__assert_fail@plt+0xab0>
   11c34:	ldr	r0, [sp, #12]
   11c38:	bl	1221c <__assert_fail@plt+0x1060>
   11c3c:	ldr	r3, [r4, #48]	; 0x30
   11c40:	cmp	r3, #0
   11c44:	beq	11958 <__assert_fail@plt+0x79c>
   11c48:	mov	r2, #5
   11c4c:	ldr	r1, [pc, #168]	; 11cfc <__assert_fail@plt+0xb40>
   11c50:	mov	r0, #0
   11c54:	bl	10f94 <dcgettext@plt>
   11c58:	mov	r1, r0
   11c5c:	mov	r0, #1
   11c60:	ldr	r2, [r4, #48]	; 0x30
   11c64:	bl	110f0 <__printf_chk@plt>
   11c68:	b	11958 <__assert_fail@plt+0x79c>
   11c6c:	cmp	r5, #0
   11c70:	beq	11c7c <__assert_fail@plt+0xac0>
   11c74:	mov	r0, #44	; 0x2c
   11c78:	bl	111b0 <putchar_unlocked@plt>
   11c7c:	ldr	r3, [sp, #12]
   11c80:	mov	r2, r7
   11c84:	mov	r1, #0
   11c88:	ldr	r0, [r3, r5, lsl #2]
   11c8c:	bl	1226c <__assert_fail@plt+0x10b0>
   11c90:	ldr	r1, [r8]
   11c94:	bl	10eec <fputs_unlocked@plt>
   11c98:	ldr	r3, [sp, #12]
   11c9c:	ldr	r0, [r3, r5, lsl #2]
   11ca0:	bl	11198 <getgrgid@plt>
   11ca4:	cmp	r0, #0
   11ca8:	beq	11cbc <__assert_fail@plt+0xb00>
   11cac:	mov	r1, r9
   11cb0:	ldr	r2, [r0]
   11cb4:	mov	r0, #1
   11cb8:	bl	110f0 <__printf_chk@plt>
   11cbc:	add	r5, r5, #1
   11cc0:	b	11c2c <__assert_fail@plt+0xa70>
   11cc4:	andeq	r6, r2, ip, ror r1
   11cc8:	andeq	r5, r1, ip, lsl r1
   11ccc:	andeq	r6, r2, r9, lsl #3
   11cd0:	andeq	r6, r2, r4, lsl r1
   11cd4:	andeq	r6, r2, r4, ror r1
   11cd8:	andeq	r5, r1, fp, asr #2
   11cdc:	andeq	r5, r1, ip, lsr r1
   11ce0:	andeq	r5, r1, r1, asr #2
   11ce4:			; <UNDEFINED> instruction: 0x000261b0
   11ce8:	andeq	r5, r1, r9, asr #2
   11cec:	andeq	r5, r1, r2, asr r1
   11cf0:	andeq	r5, r1, fp, asr r1
   11cf4:	andeq	r5, r1, ip, ror r1
   11cf8:	andeq	r5, r1, r9, lsr #3
   11cfc:			; <UNDEFINED> instruction: 0x000151b2
   11d00:	subs	r5, r0, #0
   11d04:	push	{r7, lr}
   11d08:	sub	sp, sp, #56	; 0x38
   11d0c:	ldr	r4, [pc, #496]	; 11f04 <__assert_fail@plt+0xd48>
   11d10:	beq	11d48 <__assert_fail@plt+0xb8c>
   11d14:	mov	r2, #5
   11d18:	mov	r0, #0
   11d1c:	ldr	r3, [pc, #484]	; 11f08 <__assert_fail@plt+0xd4c>
   11d20:	ldr	r1, [pc, #484]	; 11f0c <__assert_fail@plt+0xd50>
   11d24:	ldr	r6, [r3]
   11d28:	bl	10f94 <dcgettext@plt>
   11d2c:	mov	r2, r0
   11d30:	mov	r1, #1
   11d34:	ldr	r3, [r4]
   11d38:	mov	r0, r6
   11d3c:	bl	11108 <__fprintf_chk@plt>
   11d40:	mov	r0, r5
   11d44:	bl	11084 <exit@plt>
   11d48:	mov	r2, #5
   11d4c:	ldr	r1, [pc, #444]	; 11f10 <__assert_fail@plt+0xd54>
   11d50:	mov	r6, sp
   11d54:	bl	10f94 <dcgettext@plt>
   11d58:	ldr	r2, [r4]
   11d5c:	mov	r1, r0
   11d60:	mov	r0, #1
   11d64:	bl	110f0 <__printf_chk@plt>
   11d68:	ldr	r4, [pc, #420]	; 11f14 <__assert_fail@plt+0xd58>
   11d6c:	mov	r2, #5
   11d70:	mov	r0, r5
   11d74:	ldr	r1, [pc, #412]	; 11f18 <__assert_fail@plt+0xd5c>
   11d78:	bl	10f94 <dcgettext@plt>
   11d7c:	ldr	r7, [pc, #408]	; 11f1c <__assert_fail@plt+0xd60>
   11d80:	ldr	r1, [r4]
   11d84:	bl	10eec <fputs_unlocked@plt>
   11d88:	mov	r2, #5
   11d8c:	ldr	r1, [pc, #396]	; 11f20 <__assert_fail@plt+0xd64>
   11d90:	mov	r0, r5
   11d94:	bl	10f94 <dcgettext@plt>
   11d98:	ldr	r1, [r4]
   11d9c:	bl	10eec <fputs_unlocked@plt>
   11da0:	mov	r2, #5
   11da4:	ldr	r1, [pc, #376]	; 11f24 <__assert_fail@plt+0xd68>
   11da8:	mov	r0, r5
   11dac:	bl	10f94 <dcgettext@plt>
   11db0:	ldr	r1, [r4]
   11db4:	bl	10eec <fputs_unlocked@plt>
   11db8:	mov	r2, #5
   11dbc:	ldr	r1, [pc, #356]	; 11f28 <__assert_fail@plt+0xd6c>
   11dc0:	mov	r0, r5
   11dc4:	bl	10f94 <dcgettext@plt>
   11dc8:	ldr	r1, [r4]
   11dcc:	bl	10eec <fputs_unlocked@plt>
   11dd0:	mov	r2, #5
   11dd4:	ldr	r1, [pc, #336]	; 11f2c <__assert_fail@plt+0xd70>
   11dd8:	mov	r0, r5
   11ddc:	bl	10f94 <dcgettext@plt>
   11de0:	ldr	r1, [r4]
   11de4:	bl	10eec <fputs_unlocked@plt>
   11de8:	ldr	lr, [pc, #320]	; 11f30 <__assert_fail@plt+0xd74>
   11dec:	mov	ip, sp
   11df0:	ldm	lr!, {r0, r1, r2, r3}
   11df4:	stmia	ip!, {r0, r1, r2, r3}
   11df8:	ldm	lr!, {r0, r1, r2, r3}
   11dfc:	stmia	ip!, {r0, r1, r2, r3}
   11e00:	ldm	lr!, {r0, r1, r2, r3}
   11e04:	stmia	ip!, {r0, r1, r2, r3}
   11e08:	ldm	lr, {r0, r1}
   11e0c:	stm	ip, {r0, r1}
   11e10:	ldr	r1, [r6]
   11e14:	cmp	r1, #0
   11e18:	bne	11ebc <__assert_fail@plt+0xd00>
   11e1c:	ldr	r6, [r6, #4]
   11e20:	mov	r2, #5
   11e24:	mov	r0, #0
   11e28:	ldr	r7, [pc, #236]	; 11f1c <__assert_fail@plt+0xd60>
   11e2c:	ldr	r1, [pc, #256]	; 11f34 <__assert_fail@plt+0xd78>
   11e30:	cmp	r6, #0
   11e34:	moveq	r6, r7
   11e38:	bl	10f94 <dcgettext@plt>
   11e3c:	mov	r1, r0
   11e40:	ldr	r3, [pc, #240]	; 11f38 <__assert_fail@plt+0xd7c>
   11e44:	mov	r0, #1
   11e48:	ldr	r2, [pc, #236]	; 11f3c <__assert_fail@plt+0xd80>
   11e4c:	bl	110f0 <__printf_chk@plt>
   11e50:	mov	r1, #0
   11e54:	mov	r0, #5
   11e58:	bl	1112c <setlocale@plt>
   11e5c:	cmp	r0, #0
   11e60:	bne	11ed4 <__assert_fail@plt+0xd18>
   11e64:	mov	r2, #5
   11e68:	ldr	r1, [pc, #208]	; 11f40 <__assert_fail@plt+0xd84>
   11e6c:	mov	r0, #0
   11e70:	bl	10f94 <dcgettext@plt>
   11e74:	mov	r1, r0
   11e78:	ldr	r3, [pc, #156]	; 11f1c <__assert_fail@plt+0xd60>
   11e7c:	mov	r0, #1
   11e80:	ldr	r2, [pc, #176]	; 11f38 <__assert_fail@plt+0xd7c>
   11e84:	bl	110f0 <__printf_chk@plt>
   11e88:	mov	r2, #5
   11e8c:	ldr	r1, [pc, #176]	; 11f44 <__assert_fail@plt+0xd88>
   11e90:	mov	r0, #0
   11e94:	bl	10f94 <dcgettext@plt>
   11e98:	ldr	r2, [pc, #168]	; 11f48 <__assert_fail@plt+0xd8c>
   11e9c:	cmp	r6, r7
   11ea0:	mov	r1, r0
   11ea4:	mov	r0, #1
   11ea8:	ldr	r3, [pc, #156]	; 11f4c <__assert_fail@plt+0xd90>
   11eac:	moveq	r3, r2
   11eb0:	mov	r2, r6
   11eb4:	bl	110f0 <__printf_chk@plt>
   11eb8:	b	11d40 <__assert_fail@plt+0xb84>
   11ebc:	mov	r0, r7
   11ec0:	bl	10f1c <strcmp@plt>
   11ec4:	cmp	r0, #0
   11ec8:	beq	11e1c <__assert_fail@plt+0xc60>
   11ecc:	add	r6, r6, #8
   11ed0:	b	11e10 <__assert_fail@plt+0xc54>
   11ed4:	mov	r2, #3
   11ed8:	ldr	r1, [pc, #112]	; 11f50 <__assert_fail@plt+0xd94>
   11edc:	bl	11180 <strncmp@plt>
   11ee0:	cmp	r0, #0
   11ee4:	beq	11e64 <__assert_fail@plt+0xca8>
   11ee8:	mov	r2, #5
   11eec:	ldr	r1, [pc, #96]	; 11f54 <__assert_fail@plt+0xd98>
   11ef0:	mov	r0, #0
   11ef4:	bl	10f94 <dcgettext@plt>
   11ef8:	ldr	r1, [r4]
   11efc:	bl	10eec <fputs_unlocked@plt>
   11f00:	b	11e64 <__assert_fail@plt+0xca8>
   11f04:	andeq	r6, r2, r4, ror #3
   11f08:	andeq	r6, r2, r0, ror r1
   11f0c:	andeq	r5, r1, r1, asr #3
   11f10:	andeq	r5, r1, r8, ror #3
   11f14:	andeq	r6, r2, r4, ror r1
   11f18:	andeq	r5, r1, r9, lsl #4
   11f1c:			; <UNDEFINED> instruction: 0x000151be
   11f20:	andeq	r5, r1, r5, ror r2
   11f24:	andeq	r5, r1, lr, ror r4
   11f28:	andeq	r5, r1, fp, lsr #9
   11f2c:	andeq	r5, r1, r1, ror #9
   11f30:	andeq	r5, r1, r4, asr #32
   11f34:	andeq	r5, r1, r8, lsr #10
   11f38:	andeq	r5, r1, pc, lsr r5
   11f3c:	andeq	r5, r1, r7, ror #10
   11f40:	andeq	r5, r1, r0, asr #11
   11f44:	ldrdeq	r5, [r1], -fp
   11f48:	strdeq	r5, [r1], -r8
   11f4c:	andeq	r5, r1, r4, ror r2
   11f50:	andeq	r5, r1, r5, ror r5
   11f54:	andeq	r5, r1, r9, ror r5
   11f58:	push	{r4, r5, r6, lr}
   11f5c:	subs	r5, r1, #0
   11f60:	mov	r6, r0
   11f64:	beq	11fc0 <__assert_fail@plt+0xe04>
   11f68:	bl	11198 <getgrgid@plt>
   11f6c:	subs	r4, r0, #0
   11f70:	ldrne	r0, [r4]
   11f74:	bne	11fac <__assert_fail@plt+0xdf0>
   11f78:	mov	r2, #5
   11f7c:	mov	r5, r4
   11f80:	ldr	r1, [pc, #64]	; 11fc8 <__assert_fail@plt+0xe0c>
   11f84:	bl	10f94 <dcgettext@plt>
   11f88:	mov	r2, r0
   11f8c:	mov	r3, r6
   11f90:	mov	r1, r4
   11f94:	mov	r0, r4
   11f98:	bl	11024 <error@plt>
   11f9c:	ldr	r2, [pc, #40]	; 11fcc <__assert_fail@plt+0xe10>
   11fa0:	mov	r0, r6
   11fa4:	mov	r1, #0
   11fa8:	bl	1226c <__assert_fail@plt+0x10b0>
   11fac:	ldr	r3, [pc, #28]	; 11fd0 <__assert_fail@plt+0xe14>
   11fb0:	ldr	r1, [r3]
   11fb4:	bl	10eec <fputs_unlocked@plt>
   11fb8:	mov	r0, r5
   11fbc:	pop	{r4, r5, r6, pc}
   11fc0:	mov	r5, #1
   11fc4:	b	11f9c <__assert_fail@plt+0xde0>
   11fc8:	andeq	r5, r1, lr, asr r8
   11fcc:	andeq	r6, r2, r6, asr #3
   11fd0:	andeq	r6, r2, r4, ror r1
   11fd4:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11fd8:	subs	r5, r0, #0
   11fdc:	mov	r8, r2
   11fe0:	mov	r6, r3
   11fe4:	moveq	r7, r5
   11fe8:	moveq	r4, #1
   11fec:	ldrb	r9, [sp, #40]	; 0x28
   11ff0:	ldrb	sl, [sp, #44]	; 0x2c
   11ff4:	beq	1200c <__assert_fail@plt+0xe50>
   11ff8:	mov	r0, r1
   11ffc:	bl	10f28 <getpwuid@plt>
   12000:	adds	r4, r0, #0
   12004:	mov	r7, r0
   12008:	movne	r4, #1
   1200c:	mov	r1, r9
   12010:	mov	r0, r8
   12014:	bl	11f58 <__assert_fail@plt+0xd9c>
   12018:	cmp	r0, #0
   1201c:	moveq	r4, #0
   12020:	cmp	r8, r6
   12024:	beq	12044 <__assert_fail@plt+0xe88>
   12028:	mov	r0, sl
   1202c:	bl	111b0 <putchar_unlocked@plt>
   12030:	mov	r1, r9
   12034:	mov	r0, r6
   12038:	bl	11f58 <__assert_fail@plt+0xd9c>
   1203c:	cmp	r0, #0
   12040:	moveq	r4, #0
   12044:	cmp	r7, #0
   12048:	mov	r0, r5
   1204c:	ldrne	r1, [r7, #12]
   12050:	moveq	r1, r6
   12054:	add	r2, sp, #4
   12058:	bl	1441c <__assert_fail@plt+0x3260>
   1205c:	subs	r7, r0, #0
   12060:	movge	r5, #0
   12064:	bge	1210c <__assert_fail@plt+0xf50>
   12068:	bl	110b4 <__errno_location@plt>
   1206c:	cmp	r5, #0
   12070:	mov	r2, #5
   12074:	ldr	r4, [r0]
   12078:	beq	120b8 <__assert_fail@plt+0xefc>
   1207c:	ldr	r1, [pc, #156]	; 12120 <__assert_fail@plt+0xf64>
   12080:	mov	r0, #0
   12084:	bl	10f94 <dcgettext@plt>
   12088:	mov	r6, r0
   1208c:	mov	r0, r5
   12090:	bl	138d4 <__assert_fail@plt+0x2718>
   12094:	mov	r3, r0
   12098:	mov	r2, r6
   1209c:	mov	r1, r4
   120a0:	mov	r0, #0
   120a4:	bl	11024 <error@plt>
   120a8:	mov	r4, #0
   120ac:	mov	r0, r4
   120b0:	add	sp, sp, #8
   120b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   120b8:	ldr	r1, [pc, #100]	; 12124 <__assert_fail@plt+0xf68>
   120bc:	mov	r0, r5
   120c0:	bl	10f94 <dcgettext@plt>
   120c4:	mov	r2, r0
   120c8:	mov	r1, r4
   120cc:	mov	r0, r5
   120d0:	bl	11024 <error@plt>
   120d4:	b	120a8 <__assert_fail@plt+0xeec>
   120d8:	ldr	r3, [r0, r5, lsl #2]
   120dc:	cmp	r3, r6
   120e0:	cmpne	r3, r8
   120e4:	beq	12108 <__assert_fail@plt+0xf4c>
   120e8:	mov	r0, sl
   120ec:	bl	111b0 <putchar_unlocked@plt>
   120f0:	ldr	r3, [sp, #4]
   120f4:	mov	r1, r9
   120f8:	ldr	r0, [r3, r5, lsl #2]
   120fc:	bl	11f58 <__assert_fail@plt+0xd9c>
   12100:	cmp	r0, #0
   12104:	moveq	r4, #0
   12108:	add	r5, r5, #1
   1210c:	cmp	r5, r7
   12110:	ldr	r0, [sp, #4]
   12114:	bne	120d8 <__assert_fail@plt+0xf1c>
   12118:	bl	1221c <__assert_fail@plt+0x1060>
   1211c:	b	120ac <__assert_fail@plt+0xef0>
   12120:	andeq	r5, r1, fp, asr r1
   12124:	andeq	r5, r1, ip, ror r1
   12128:	ldr	r3, [pc, #4]	; 12134 <__assert_fail@plt+0xf78>
   1212c:	str	r0, [r3]
   12130:	bx	lr
   12134:	ldrdeq	r6, [r2], -ip
   12138:	ldr	r3, [pc, #4]	; 12144 <__assert_fail@plt+0xf88>
   1213c:	strb	r0, [r3, #4]
   12140:	bx	lr
   12144:	ldrdeq	r6, [r2], -ip
   12148:	ldr	r3, [pc, #176]	; 12200 <__assert_fail@plt+0x1044>
   1214c:	push	{r0, r1, r4, r5, r6, lr}
   12150:	ldr	r0, [r3]
   12154:	bl	148c0 <__assert_fail@plt+0x3704>
   12158:	cmp	r0, #0
   1215c:	beq	121e4 <__assert_fail@plt+0x1028>
   12160:	ldr	r4, [pc, #156]	; 12204 <__assert_fail@plt+0x1048>
   12164:	bl	110b4 <__errno_location@plt>
   12168:	mov	r5, r0
   1216c:	ldrb	r6, [r4, #4]
   12170:	cmp	r6, #0
   12174:	beq	12184 <__assert_fail@plt+0xfc8>
   12178:	ldr	r3, [r0]
   1217c:	cmp	r3, #32
   12180:	beq	121e4 <__assert_fail@plt+0x1028>
   12184:	mov	r2, #5
   12188:	ldr	r1, [pc, #120]	; 12208 <__assert_fail@plt+0x104c>
   1218c:	mov	r0, #0
   12190:	bl	10f94 <dcgettext@plt>
   12194:	mov	r6, r0
   12198:	ldr	r0, [r4]
   1219c:	cmp	r0, #0
   121a0:	beq	121d0 <__assert_fail@plt+0x1014>
   121a4:	ldr	r4, [r5]
   121a8:	bl	13784 <__assert_fail@plt+0x25c8>
   121ac:	mov	r3, r0
   121b0:	ldr	r2, [pc, #84]	; 1220c <__assert_fail@plt+0x1050>
   121b4:	mov	r0, #0
   121b8:	str	r6, [sp]
   121bc:	mov	r1, r4
   121c0:	bl	11024 <error@plt>
   121c4:	ldr	r3, [pc, #68]	; 12210 <__assert_fail@plt+0x1054>
   121c8:	ldr	r0, [r3]
   121cc:	bl	10f58 <_exit@plt>
   121d0:	mov	r3, r6
   121d4:	ldr	r2, [pc, #56]	; 12214 <__assert_fail@plt+0x1058>
   121d8:	ldr	r1, [r5]
   121dc:	bl	11024 <error@plt>
   121e0:	b	121c4 <__assert_fail@plt+0x1008>
   121e4:	ldr	r3, [pc, #44]	; 12218 <__assert_fail@plt+0x105c>
   121e8:	ldr	r0, [r3]
   121ec:	bl	148c0 <__assert_fail@plt+0x3704>
   121f0:	cmp	r0, #0
   121f4:	bne	121c4 <__assert_fail@plt+0x1008>
   121f8:	add	sp, sp, #8
   121fc:	pop	{r4, r5, r6, pc}
   12200:	andeq	r6, r2, r4, ror r1
   12204:	ldrdeq	r6, [r2], -ip
   12208:	andeq	r5, r1, pc, lsl #17
   1220c:	muleq	r1, fp, r8
   12210:	andeq	r6, r2, ip, lsl r1
   12214:	muleq	r1, pc, r8	; <UNPREDICTABLE>
   12218:	andeq	r6, r2, r0, ror r1
   1221c:	push	{r0, r1, r2, r4, r5, lr}
   12220:	mov	r5, r0
   12224:	bl	110b4 <__errno_location@plt>
   12228:	mov	r4, r0
   1222c:	mov	r0, r5
   12230:	ldr	r3, [r4]
   12234:	str	r3, [sp]
   12238:	str	r3, [sp, #4]
   1223c:	mov	r3, #0
   12240:	str	r3, [r4]
   12244:	bl	10f4c <free@plt>
   12248:	ldr	r3, [r4]
   1224c:	add	r2, sp, #8
   12250:	clz	r3, r3
   12254:	lsr	r3, r3, #5
   12258:	add	r3, r2, r3, lsl #2
   1225c:	ldr	r3, [r3, #-8]
   12260:	str	r3, [r4]
   12264:	add	sp, sp, #12
   12268:	pop	{r4, r5, pc}
   1226c:	push	{r4, r5, r6, lr}
   12270:	mov	r3, #0
   12274:	mov	r4, r0
   12278:	mov	r5, r1
   1227c:	add	r6, r2, #20
   12280:	strb	r3, [r2, #20]
   12284:	mov	r2, #10
   12288:	mov	r3, #0
   1228c:	mov	r0, r4
   12290:	mov	r1, r5
   12294:	bl	14e48 <__assert_fail@plt+0x3c8c>
   12298:	add	r2, r2, #48	; 0x30
   1229c:	mov	r3, #0
   122a0:	mov	r0, r4
   122a4:	mov	r1, r5
   122a8:	strb	r2, [r6, #-1]!
   122ac:	mov	r2, #10
   122b0:	bl	14e48 <__assert_fail@plt+0x3c8c>
   122b4:	cmp	r5, #0
   122b8:	cmpeq	r4, #9
   122bc:	bhi	122c8 <__assert_fail@plt+0x110c>
   122c0:	mov	r0, r6
   122c4:	pop	{r4, r5, r6, pc}
   122c8:	mov	r4, r0
   122cc:	mov	r5, r1
   122d0:	b	12284 <__assert_fail@plt+0x10c8>
   122d4:	push	{r4, r5, r6, lr}
   122d8:	subs	r4, r0, #0
   122dc:	bne	122f4 <__assert_fail@plt+0x1138>
   122e0:	ldr	r3, [pc, #124]	; 12364 <__assert_fail@plt+0x11a8>
   122e4:	ldr	r0, [pc, #124]	; 12368 <__assert_fail@plt+0x11ac>
   122e8:	ldr	r1, [r3]
   122ec:	bl	11174 <fputs@plt>
   122f0:	bl	1118c <abort@plt>
   122f4:	mov	r1, #47	; 0x2f
   122f8:	bl	11144 <strrchr@plt>
   122fc:	subs	r6, r0, #0
   12300:	beq	12350 <__assert_fail@plt+0x1194>
   12304:	add	r5, r6, #1
   12308:	sub	r3, r5, r4
   1230c:	cmp	r3, #6
   12310:	ble	12350 <__assert_fail@plt+0x1194>
   12314:	mov	r2, #7
   12318:	ldr	r1, [pc, #76]	; 1236c <__assert_fail@plt+0x11b0>
   1231c:	sub	r0, r6, #6
   12320:	bl	11180 <strncmp@plt>
   12324:	cmp	r0, #0
   12328:	bne	12350 <__assert_fail@plt+0x1194>
   1232c:	mov	r2, #3
   12330:	ldr	r1, [pc, #56]	; 12370 <__assert_fail@plt+0x11b4>
   12334:	mov	r0, r5
   12338:	bl	11180 <strncmp@plt>
   1233c:	cmp	r0, #0
   12340:	ldreq	r3, [pc, #44]	; 12374 <__assert_fail@plt+0x11b8>
   12344:	addeq	r4, r6, #4
   12348:	movne	r4, r5
   1234c:	streq	r4, [r3]
   12350:	ldr	r3, [pc, #32]	; 12378 <__assert_fail@plt+0x11bc>
   12354:	str	r4, [r3]
   12358:	ldr	r3, [pc, #28]	; 1237c <__assert_fail@plt+0x11c0>
   1235c:	str	r4, [r3]
   12360:	pop	{r4, r5, r6, pc}
   12364:	andeq	r6, r2, r0, ror r1
   12368:	andeq	r5, r1, r2, lsr #17
   1236c:	ldrdeq	r5, [r1], -sl
   12370:	andeq	r5, r1, r2, ror #17
   12374:	andeq	r6, r2, r0, ror #2
   12378:	andeq	r6, r2, r4, ror #3
   1237c:	andeq	r6, r2, r4, ror #2
   12380:	push	{r4, lr}
   12384:	mov	r2, #48	; 0x30
   12388:	mov	r4, r1
   1238c:	mov	r1, #0
   12390:	bl	110e4 <memset@plt>
   12394:	cmp	r4, #10
   12398:	bne	123a0 <__assert_fail@plt+0x11e4>
   1239c:	bl	1118c <abort@plt>
   123a0:	str	r4, [r0]
   123a4:	pop	{r4, pc}
   123a8:	push	{r4, r5, r6, lr}
   123ac:	mov	r2, #5
   123b0:	mov	r6, r0
   123b4:	mov	r5, r1
   123b8:	mov	r1, r0
   123bc:	mov	r0, #0
   123c0:	bl	10f94 <dcgettext@plt>
   123c4:	cmp	r6, r0
   123c8:	mov	r4, r0
   123cc:	bne	1243c <__assert_fail@plt+0x1280>
   123d0:	bl	14ae8 <__assert_fail@plt+0x392c>
   123d4:	ldrb	r3, [r0]
   123d8:	bic	r3, r3, #32
   123dc:	cmp	r3, #85	; 0x55
   123e0:	bne	12444 <__assert_fail@plt+0x1288>
   123e4:	ldrb	r3, [r0, #1]
   123e8:	bic	r3, r3, #32
   123ec:	cmp	r3, #84	; 0x54
   123f0:	bne	124b4 <__assert_fail@plt+0x12f8>
   123f4:	ldrb	r3, [r0, #2]
   123f8:	bic	r3, r3, #32
   123fc:	cmp	r3, #70	; 0x46
   12400:	bne	124b4 <__assert_fail@plt+0x12f8>
   12404:	ldrb	r3, [r0, #3]
   12408:	cmp	r3, #45	; 0x2d
   1240c:	bne	124b4 <__assert_fail@plt+0x12f8>
   12410:	ldrb	r3, [r0, #4]
   12414:	cmp	r3, #56	; 0x38
   12418:	bne	124b4 <__assert_fail@plt+0x12f8>
   1241c:	ldrb	r3, [r0, #5]
   12420:	cmp	r3, #0
   12424:	bne	124b4 <__assert_fail@plt+0x12f8>
   12428:	ldrb	r2, [r4]
   1242c:	ldr	r3, [pc, #144]	; 124c4 <__assert_fail@plt+0x1308>
   12430:	ldr	r4, [pc, #144]	; 124c8 <__assert_fail@plt+0x130c>
   12434:	cmp	r2, #96	; 0x60
   12438:	movne	r4, r3
   1243c:	mov	r0, r4
   12440:	pop	{r4, r5, r6, pc}
   12444:	cmp	r3, #71	; 0x47
   12448:	bne	124b4 <__assert_fail@plt+0x12f8>
   1244c:	ldrb	r3, [r0, #1]
   12450:	bic	r3, r3, #32
   12454:	cmp	r3, #66	; 0x42
   12458:	bne	124b4 <__assert_fail@plt+0x12f8>
   1245c:	ldrb	r3, [r0, #2]
   12460:	cmp	r3, #49	; 0x31
   12464:	bne	124b4 <__assert_fail@plt+0x12f8>
   12468:	ldrb	r3, [r0, #3]
   1246c:	cmp	r3, #56	; 0x38
   12470:	bne	124b4 <__assert_fail@plt+0x12f8>
   12474:	ldrb	r3, [r0, #4]
   12478:	cmp	r3, #48	; 0x30
   1247c:	bne	124b4 <__assert_fail@plt+0x12f8>
   12480:	ldrb	r3, [r0, #5]
   12484:	cmp	r3, #51	; 0x33
   12488:	bne	124b4 <__assert_fail@plt+0x12f8>
   1248c:	ldrb	r3, [r0, #6]
   12490:	cmp	r3, #48	; 0x30
   12494:	bne	124b4 <__assert_fail@plt+0x12f8>
   12498:	ldrb	r3, [r0, #7]
   1249c:	cmp	r3, #0
   124a0:	bne	124b4 <__assert_fail@plt+0x12f8>
   124a4:	ldrb	r2, [r4]
   124a8:	ldr	r3, [pc, #28]	; 124cc <__assert_fail@plt+0x1310>
   124ac:	ldr	r4, [pc, #28]	; 124d0 <__assert_fail@plt+0x1314>
   124b0:	b	12434 <__assert_fail@plt+0x1278>
   124b4:	ldr	r4, [pc, #24]	; 124d4 <__assert_fail@plt+0x1318>
   124b8:	cmp	r5, #9
   124bc:	ldr	r3, [pc, #20]	; 124d8 <__assert_fail@plt+0x131c>
   124c0:	b	12438 <__assert_fail@plt+0x127c>
   124c4:	andeq	r5, r1, lr, lsr r9
   124c8:	andeq	r5, r1, r9, asr #18
   124cc:	andeq	r5, r1, r2, asr #18
   124d0:	andeq	r5, r1, r5, asr #18
   124d4:	andeq	r5, r1, ip, lsr r9
   124d8:	andeq	r5, r1, sp, asr #18
   124dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124e0:	sub	sp, sp, #108	; 0x6c
   124e4:	mov	r8, r0
   124e8:	mov	r5, r1
   124ec:	mov	r6, #0
   124f0:	str	r3, [sp, #40]	; 0x28
   124f4:	str	r2, [sp, #48]	; 0x30
   124f8:	ldr	sl, [sp, #144]	; 0x90
   124fc:	bl	10fe8 <__ctype_get_mb_cur_max@plt>
   12500:	ldr	r3, [sp, #148]	; 0x94
   12504:	str	r6, [sp, #24]
   12508:	str	r6, [sp, #32]
   1250c:	str	r6, [sp, #44]	; 0x2c
   12510:	str	r6, [sp, #52]	; 0x34
   12514:	ubfx	r7, r3, #1, #1
   12518:	mov	r3, #1
   1251c:	str	r6, [sp, #60]	; 0x3c
   12520:	str	r3, [sp, #72]	; 0x48
   12524:	str	r0, [sp, #76]	; 0x4c
   12528:	cmp	sl, #10
   1252c:	ldrls	pc, [pc, sl, lsl #2]
   12530:	b	12774 <__assert_fail@plt+0x15b8>
   12534:	andeq	r2, r1, r0, ror #10
   12538:	andeq	r2, r1, ip, lsl #15
   1253c:	andeq	r2, r1, r0, lsl r7
   12540:	andeq	r2, r1, r8, lsr #14
   12544:	strdeq	r2, [r1], -r8
   12548:	andeq	r2, r1, r0, asr r6
   1254c:	andeq	r2, r1, r0, lsr r6
   12550:	andeq	r2, r1, r8, ror r7
   12554:	andeq	r2, r1, r0, lsl #13
   12558:	andeq	r2, r1, r0, lsl #13
   1255c:	andeq	r2, r1, r0, lsl #13
   12560:	mov	r4, sl
   12564:	mov	r7, #0
   12568:	mov	r9, r5
   1256c:	mov	r3, #0
   12570:	str	r6, [sp, #68]	; 0x44
   12574:	str	r3, [sp, #28]
   12578:	ldr	r3, [sp, #40]	; 0x28
   1257c:	cmn	r3, #1
   12580:	bne	13120 <__assert_fail@plt+0x1f64>
   12584:	ldr	r2, [sp, #28]
   12588:	ldr	r3, [sp, #48]	; 0x30
   1258c:	ldrb	r3, [r3, r2]
   12590:	adds	r3, r3, #0
   12594:	movne	r3, #1
   12598:	str	r3, [sp, #36]	; 0x24
   1259c:	ldr	r3, [sp, #36]	; 0x24
   125a0:	cmp	r3, #0
   125a4:	bne	127b0 <__assert_fail@plt+0x15f4>
   125a8:	sub	r3, sl, #2
   125ac:	cmp	r4, #0
   125b0:	clz	r3, r3
   125b4:	movne	r2, #0
   125b8:	lsr	r3, r3, #5
   125bc:	andeq	r2, r3, r7
   125c0:	cmp	r2, #0
   125c4:	bne	12974 <__assert_fail@plt+0x17b8>
   125c8:	eor	r7, r7, #1
   125cc:	ands	r3, r3, r7
   125d0:	beq	13198 <__assert_fail@plt+0x1fdc>
   125d4:	ldr	r2, [sp, #68]	; 0x44
   125d8:	cmp	r2, #0
   125dc:	beq	13160 <__assert_fail@plt+0x1fa4>
   125e0:	ldr	r3, [sp, #72]	; 0x48
   125e4:	cmp	r3, #0
   125e8:	beq	13134 <__assert_fail@plt+0x1f78>
   125ec:	ldr	r2, [sp, #48]	; 0x30
   125f0:	ldr	r3, [sp, #160]	; 0xa0
   125f4:	ldr	r1, [sp, #60]	; 0x3c
   125f8:	str	r3, [sp, #16]
   125fc:	ldr	r3, [sp, #156]	; 0x9c
   12600:	str	r3, [sp, #12]
   12604:	ldr	r3, [sp, #152]	; 0x98
   12608:	str	r3, [sp, #8]
   1260c:	ldr	r3, [sp, #148]	; 0x94
   12610:	str	r3, [sp, #4]
   12614:	mov	r3, #5
   12618:	str	r3, [sp]
   1261c:	ldr	r3, [sp, #40]	; 0x28
   12620:	mov	r0, r8
   12624:	bl	124dc <__assert_fail@plt+0x1320>
   12628:	mov	r4, r0
   1262c:	b	1318c <__assert_fail@plt+0x1fd0>
   12630:	ldr	r3, [pc, #2948]	; 131bc <__assert_fail@plt+0x2000>
   12634:	mov	r7, #1
   12638:	mov	r4, #0
   1263c:	mov	sl, #5
   12640:	str	r7, [sp, #24]
   12644:	str	r7, [sp, #32]
   12648:	str	r3, [sp, #44]	; 0x2c
   1264c:	b	12568 <__assert_fail@plt+0x13ac>
   12650:	cmp	r7, #0
   12654:	bne	12798 <__assert_fail@plt+0x15dc>
   12658:	cmp	r5, #0
   1265c:	mov	r4, #1
   12660:	movne	r3, #34	; 0x22
   12664:	strbne	r3, [r8]
   12668:	mov	r3, #1
   1266c:	str	r3, [sp, #24]
   12670:	str	r3, [sp, #32]
   12674:	ldr	r3, [pc, #2880]	; 131bc <__assert_fail@plt+0x2000>
   12678:	str	r3, [sp, #44]	; 0x2c
   1267c:	b	12568 <__assert_fail@plt+0x13ac>
   12680:	cmp	sl, #10
   12684:	beq	126a8 <__assert_fail@plt+0x14ec>
   12688:	mov	r1, sl
   1268c:	ldr	r0, [pc, #2860]	; 131c0 <__assert_fail@plt+0x2004>
   12690:	bl	123a8 <__assert_fail@plt+0x11ec>
   12694:	mov	r1, sl
   12698:	str	r0, [sp, #156]	; 0x9c
   1269c:	ldr	r0, [pc, #2848]	; 131c4 <__assert_fail@plt+0x2008>
   126a0:	bl	123a8 <__assert_fail@plt+0x11ec>
   126a4:	str	r0, [sp, #160]	; 0xa0
   126a8:	cmp	r7, #0
   126ac:	moveq	r4, r7
   126b0:	beq	126c8 <__assert_fail@plt+0x150c>
   126b4:	mov	r4, #0
   126b8:	b	126d8 <__assert_fail@plt+0x151c>
   126bc:	cmp	r5, r4
   126c0:	strbhi	r3, [r8, r4]
   126c4:	add	r4, r4, #1
   126c8:	ldr	r3, [sp, #156]	; 0x9c
   126cc:	ldrb	r3, [r3, r4]
   126d0:	cmp	r3, #0
   126d4:	bne	126bc <__assert_fail@plt+0x1500>
   126d8:	ldr	r0, [sp, #160]	; 0xa0
   126dc:	bl	1109c <strlen@plt>
   126e0:	ldr	r3, [sp, #160]	; 0xa0
   126e4:	str	r0, [sp, #32]
   126e8:	str	r3, [sp, #44]	; 0x2c
   126ec:	mov	r3, #1
   126f0:	str	r3, [sp, #24]
   126f4:	b	12568 <__assert_fail@plt+0x13ac>
   126f8:	mov	r3, #1
   126fc:	cmp	r7, #0
   12700:	streq	r3, [sp, #24]
   12704:	beq	12748 <__assert_fail@plt+0x158c>
   12708:	str	r3, [sp, #32]
   1270c:	b	12734 <__assert_fail@plt+0x1578>
   12710:	cmp	r7, #0
   12714:	beq	12748 <__assert_fail@plt+0x158c>
   12718:	mov	r3, #1
   1271c:	str	r3, [sp, #32]
   12720:	ldr	r3, [pc, #2716]	; 131c4 <__assert_fail@plt+0x2008>
   12724:	b	127a8 <__assert_fail@plt+0x15ec>
   12728:	mov	r7, #1
   1272c:	str	r7, [sp, #24]
   12730:	str	r7, [sp, #32]
   12734:	ldr	r3, [pc, #2696]	; 131c4 <__assert_fail@plt+0x2008>
   12738:	mov	r4, #0
   1273c:	str	r3, [sp, #44]	; 0x2c
   12740:	mov	sl, #2
   12744:	b	12568 <__assert_fail@plt+0x13ac>
   12748:	cmp	r5, #0
   1274c:	movne	r3, #39	; 0x27
   12750:	movne	r7, #0
   12754:	strbne	r3, [r8]
   12758:	moveq	r7, r5
   1275c:	mov	r3, #1
   12760:	mov	r4, #1
   12764:	str	r3, [sp, #32]
   12768:	ldr	r3, [pc, #2644]	; 131c4 <__assert_fail@plt+0x2008>
   1276c:	str	r3, [sp, #44]	; 0x2c
   12770:	b	12740 <__assert_fail@plt+0x1584>
   12774:	bl	1118c <abort@plt>
   12778:	mov	r3, #1
   1277c:	mov	r7, #0
   12780:	str	r3, [sp, #24]
   12784:	mov	r4, #0
   12788:	b	12568 <__assert_fail@plt+0x13ac>
   1278c:	mov	r7, #1
   12790:	str	sl, [sp, #32]
   12794:	b	12734 <__assert_fail@plt+0x1578>
   12798:	mov	r3, #1
   1279c:	str	r7, [sp, #24]
   127a0:	str	r3, [sp, #32]
   127a4:	ldr	r3, [pc, #2576]	; 131bc <__assert_fail@plt+0x2000>
   127a8:	str	r3, [sp, #44]	; 0x2c
   127ac:	b	12784 <__assert_fail@plt+0x15c8>
   127b0:	ldr	fp, [sp, #24]
   127b4:	ldr	r3, [sp, #32]
   127b8:	cmp	sl, #2
   127bc:	moveq	fp, #0
   127c0:	andne	fp, fp, #1
   127c4:	adds	r5, r3, #0
   127c8:	movne	r5, #1
   127cc:	ands	r3, fp, r5
   127d0:	str	r3, [sp, #64]	; 0x40
   127d4:	beq	128a4 <__assert_fail@plt+0x16e8>
   127d8:	ldr	r3, [sp, #28]
   127dc:	ldr	r2, [sp, #32]
   127e0:	cmp	r2, #1
   127e4:	add	r6, r3, r2
   127e8:	mov	r3, r2
   127ec:	ldr	r2, [sp, #40]	; 0x28
   127f0:	movls	r3, #0
   127f4:	movhi	r3, #1
   127f8:	cmn	r2, #1
   127fc:	movne	r3, #0
   12800:	cmp	r3, #0
   12804:	beq	12814 <__assert_fail@plt+0x1658>
   12808:	ldr	r0, [sp, #48]	; 0x30
   1280c:	bl	1109c <strlen@plt>
   12810:	str	r0, [sp, #40]	; 0x28
   12814:	ldr	r3, [sp, #40]	; 0x28
   12818:	cmp	r6, r3
   1281c:	bhi	1289c <__assert_fail@plt+0x16e0>
   12820:	ldr	r0, [sp, #28]
   12824:	ldr	r2, [sp, #32]
   12828:	ldr	r3, [sp, #48]	; 0x30
   1282c:	ldr	r1, [sp, #44]	; 0x2c
   12830:	add	r0, r3, r0
   12834:	bl	10f7c <memcmp@plt>
   12838:	cmp	r0, #0
   1283c:	bne	1289c <__assert_fail@plt+0x16e0>
   12840:	cmp	r7, #0
   12844:	beq	128a4 <__assert_fail@plt+0x16e8>
   12848:	str	r7, [sp, #24]
   1284c:	ldr	r3, [sp, #24]
   12850:	mov	r1, r9
   12854:	ldr	r2, [sp, #48]	; 0x30
   12858:	cmp	sl, #2
   1285c:	movne	r3, #0
   12860:	andeq	r3, r3, #1
   12864:	cmp	r3, #0
   12868:	ldr	r3, [sp, #160]	; 0xa0
   1286c:	movne	sl, #4
   12870:	str	sl, [sp]
   12874:	str	r3, [sp, #16]
   12878:	ldr	r3, [sp, #156]	; 0x9c
   1287c:	str	r3, [sp, #12]
   12880:	mov	r3, #0
   12884:	str	r3, [sp, #8]
   12888:	ldr	r3, [sp, #148]	; 0x94
   1288c:	bic	r3, r3, #2
   12890:	str	r3, [sp, #4]
   12894:	ldr	r3, [sp, #40]	; 0x28
   12898:	b	12620 <__assert_fail@plt+0x1464>
   1289c:	mov	r3, #0
   128a0:	str	r3, [sp, #64]	; 0x40
   128a4:	ldr	r2, [sp, #28]
   128a8:	ldr	r3, [sp, #48]	; 0x30
   128ac:	add	r3, r3, r2
   128b0:	str	r3, [sp, #80]	; 0x50
   128b4:	ldr	r3, [sp, #48]	; 0x30
   128b8:	ldrb	r6, [r3, r2]
   128bc:	cmp	r6, #58	; 0x3a
   128c0:	bhi	12a24 <__assert_fail@plt+0x1868>
   128c4:	cmp	r6, #43	; 0x2b
   128c8:	bcs	12be4 <__assert_fail@plt+0x1a28>
   128cc:	cmp	r6, #32
   128d0:	beq	12c38 <__assert_fail@plt+0x1a7c>
   128d4:	bhi	1297c <__assert_fail@plt+0x17c0>
   128d8:	cmp	r6, #9
   128dc:	beq	12de0 <__assert_fail@plt+0x1c24>
   128e0:	bhi	12940 <__assert_fail@plt+0x1784>
   128e4:	cmp	r6, #7
   128e8:	beq	12df0 <__assert_fail@plt+0x1c34>
   128ec:	bhi	12e0c <__assert_fail@plt+0x1c50>
   128f0:	cmp	r6, #0
   128f4:	beq	12c54 <__assert_fail@plt+0x1a98>
   128f8:	ldr	r3, [sp, #76]	; 0x4c
   128fc:	cmp	r3, #1
   12900:	bne	12e58 <__assert_fail@plt+0x1c9c>
   12904:	bl	11078 <__ctype_b_loc@plt>
   12908:	ldr	r2, [r0]
   1290c:	sxth	r3, r6
   12910:	lsl	r3, r3, #1
   12914:	ldrh	r5, [r2, r3]
   12918:	ldr	r3, [sp, #76]	; 0x4c
   1291c:	ubfx	r5, r5, #14, #1
   12920:	str	r3, [sp, #56]	; 0x38
   12924:	ldr	r3, [sp, #24]
   12928:	eor	fp, r5, #1
   1292c:	and	fp, fp, r3
   12930:	ands	fp, fp, #255	; 0xff
   12934:	beq	12b14 <__assert_fail@plt+0x1958>
   12938:	mov	r5, #0
   1293c:	b	12f04 <__assert_fail@plt+0x1d48>
   12940:	cmp	r6, #11
   12944:	beq	12e14 <__assert_fail@plt+0x1c58>
   12948:	bcc	12de8 <__assert_fail@plt+0x1c2c>
   1294c:	cmp	r6, #12
   12950:	beq	12e1c <__assert_fail@plt+0x1c60>
   12954:	cmp	r6, #13
   12958:	moveq	r3, #114	; 0x72
   1295c:	bne	128f8 <__assert_fail@plt+0x173c>
   12960:	cmp	sl, #2
   12964:	movne	r2, #0
   12968:	andeq	r2, r7, #1
   1296c:	cmp	r2, #0
   12970:	beq	12df4 <__assert_fail@plt+0x1c38>
   12974:	mov	sl, #2
   12978:	b	1284c <__assert_fail@plt+0x1690>
   1297c:	cmp	r6, #37	; 0x25
   12980:	beq	12be4 <__assert_fail@plt+0x1a28>
   12984:	bhi	12998 <__assert_fail@plt+0x17dc>
   12988:	cmp	r6, #35	; 0x23
   1298c:	beq	12c2c <__assert_fail@plt+0x1a70>
   12990:	mov	r5, #0
   12994:	b	12c3c <__assert_fail@plt+0x1a80>
   12998:	cmp	r6, #39	; 0x27
   1299c:	bne	12990 <__assert_fail@plt+0x17d4>
   129a0:	cmp	sl, #2
   129a4:	ldrne	r5, [sp, #36]	; 0x24
   129a8:	movne	r3, r5
   129ac:	strne	r3, [sp, #68]	; 0x44
   129b0:	bne	12d30 <__assert_fail@plt+0x1b74>
   129b4:	cmp	r7, #0
   129b8:	bne	1284c <__assert_fail@plt+0x1690>
   129bc:	ldr	r3, [sp, #60]	; 0x3c
   129c0:	cmp	r9, #0
   129c4:	clz	r3, r3
   129c8:	lsr	r3, r3, #5
   129cc:	moveq	r3, #0
   129d0:	cmp	r3, #0
   129d4:	strne	r9, [sp, #60]	; 0x3c
   129d8:	movne	r9, #0
   129dc:	bne	129ec <__assert_fail@plt+0x1830>
   129e0:	cmp	r9, r4
   129e4:	movhi	r3, #39	; 0x27
   129e8:	strbhi	r3, [r8, r4]
   129ec:	add	r3, r4, #1
   129f0:	ldr	r5, [sp, #36]	; 0x24
   129f4:	mov	fp, #0
   129f8:	cmp	r3, r9
   129fc:	movcc	r2, #92	; 0x5c
   12a00:	str	fp, [sp, #52]	; 0x34
   12a04:	strbcc	r2, [r8, r3]
   12a08:	add	r3, r4, #2
   12a0c:	add	r4, r4, #3
   12a10:	cmp	r3, r9
   12a14:	str	r5, [sp, #68]	; 0x44
   12a18:	movcc	r2, #39	; 0x27
   12a1c:	strbcc	r2, [r8, r3]
   12a20:	b	12b14 <__assert_fail@plt+0x1958>
   12a24:	cmp	r6, #94	; 0x5e
   12a28:	beq	12990 <__assert_fail@plt+0x17d4>
   12a2c:	bhi	12bec <__assert_fail@plt+0x1a30>
   12a30:	cmp	r6, #90	; 0x5a
   12a34:	bhi	12bd8 <__assert_fail@plt+0x1a1c>
   12a38:	cmp	r6, #65	; 0x41
   12a3c:	bcs	12be4 <__assert_fail@plt+0x1a28>
   12a40:	cmp	r6, #62	; 0x3e
   12a44:	bls	12990 <__assert_fail@plt+0x17d4>
   12a48:	cmp	r6, #63	; 0x3f
   12a4c:	bne	128f8 <__assert_fail@plt+0x173c>
   12a50:	cmp	sl, #2
   12a54:	beq	12d38 <__assert_fail@plt+0x1b7c>
   12a58:	cmp	sl, #5
   12a5c:	movne	fp, #0
   12a60:	bne	13108 <__assert_fail@plt+0x1f4c>
   12a64:	ldr	r3, [sp, #148]	; 0x94
   12a68:	tst	r3, #4
   12a6c:	beq	12d40 <__assert_fail@plt+0x1b84>
   12a70:	ldr	r3, [sp, #28]
   12a74:	add	r2, r3, #2
   12a78:	ldr	r3, [sp, #40]	; 0x28
   12a7c:	cmp	r2, r3
   12a80:	bcs	12d40 <__assert_fail@plt+0x1b84>
   12a84:	ldr	r1, [sp, #28]
   12a88:	ldr	r3, [sp, #48]	; 0x30
   12a8c:	add	r3, r3, r1
   12a90:	ldrb	r1, [r3, #1]
   12a94:	cmp	r1, #63	; 0x3f
   12a98:	bne	12d40 <__assert_fail@plt+0x1b84>
   12a9c:	ldr	r3, [sp, #48]	; 0x30
   12aa0:	ldrb	r6, [r3, r2]
   12aa4:	sub	r3, r6, #33	; 0x21
   12aa8:	uxtb	r3, r3
   12aac:	cmp	r3, #29
   12ab0:	bhi	13110 <__assert_fail@plt+0x1f54>
   12ab4:	ldr	r0, [pc, #1804]	; 131c8 <__assert_fail@plt+0x200c>
   12ab8:	mov	r5, #1
   12abc:	ands	r5, r0, r5, lsl r3
   12ac0:	beq	13118 <__assert_fail@plt+0x1f5c>
   12ac4:	cmp	r7, #0
   12ac8:	bne	1284c <__assert_fail@plt+0x1690>
   12acc:	cmp	r9, r4
   12ad0:	add	r3, r4, #1
   12ad4:	str	r2, [sp, #28]
   12ad8:	mov	r5, #0
   12adc:	strbhi	r1, [r8, r4]
   12ae0:	cmp	r9, r3
   12ae4:	mov	fp, r5
   12ae8:	movhi	r1, #34	; 0x22
   12aec:	strbhi	r1, [r8, r3]
   12af0:	add	r3, r4, #2
   12af4:	cmp	r9, r3
   12af8:	movhi	r1, #34	; 0x22
   12afc:	strbhi	r1, [r8, r3]
   12b00:	add	r3, r4, #3
   12b04:	add	r4, r4, #4
   12b08:	cmp	r9, r3
   12b0c:	movhi	r1, #63	; 0x3f
   12b10:	strbhi	r1, [r8, r3]
   12b14:	ldr	r3, [sp, #24]
   12b18:	eor	r3, r3, #1
   12b1c:	cmp	sl, #2
   12b20:	orreq	r3, r3, #1
   12b24:	eor	r3, r3, #1
   12b28:	orr	r3, r7, r3
   12b2c:	tst	r3, #255	; 0xff
   12b30:	beq	12b5c <__assert_fail@plt+0x19a0>
   12b34:	ldr	r3, [sp, #152]	; 0x98
   12b38:	cmp	r3, #0
   12b3c:	beq	12b5c <__assert_fail@plt+0x19a0>
   12b40:	ldr	r1, [sp, #152]	; 0x98
   12b44:	ubfx	r2, r6, #5, #8
   12b48:	and	r3, r6, #31
   12b4c:	ldr	r2, [r1, r2, lsl #2]
   12b50:	lsr	r3, r2, r3
   12b54:	tst	r3, #1
   12b58:	bne	12b68 <__assert_fail@plt+0x19ac>
   12b5c:	ldr	r3, [sp, #64]	; 0x40
   12b60:	cmp	r3, #0
   12b64:	beq	12d60 <__assert_fail@plt+0x1ba4>
   12b68:	sub	r3, sl, #2
   12b6c:	cmp	r7, #0
   12b70:	clz	r3, r3
   12b74:	lsr	r3, r3, #5
   12b78:	bne	1284c <__assert_fail@plt+0x1690>
   12b7c:	ldr	r2, [sp, #52]	; 0x34
   12b80:	eor	r2, r2, #1
   12b84:	ands	r3, r3, r2
   12b88:	beq	12bc0 <__assert_fail@plt+0x1a04>
   12b8c:	cmp	r9, r4
   12b90:	str	r3, [sp, #52]	; 0x34
   12b94:	movhi	r2, #39	; 0x27
   12b98:	strbhi	r2, [r8, r4]
   12b9c:	add	r2, r4, #1
   12ba0:	cmp	r9, r2
   12ba4:	movhi	r1, #36	; 0x24
   12ba8:	strbhi	r1, [r8, r2]
   12bac:	add	r2, r4, #2
   12bb0:	add	r4, r4, #3
   12bb4:	cmp	r9, r2
   12bb8:	movhi	r1, #39	; 0x27
   12bbc:	strbhi	r1, [r8, r2]
   12bc0:	cmp	r9, r4
   12bc4:	ldr	fp, [sp, #36]	; 0x24
   12bc8:	movhi	r3, #92	; 0x5c
   12bcc:	strbhi	r3, [r8, r4]
   12bd0:	add	r4, r4, #1
   12bd4:	b	12d60 <__assert_fail@plt+0x1ba4>
   12bd8:	cmp	r6, #92	; 0x5c
   12bdc:	beq	12d48 <__assert_fail@plt+0x1b8c>
   12be0:	bls	12990 <__assert_fail@plt+0x17d4>
   12be4:	ldr	r5, [sp, #36]	; 0x24
   12be8:	b	12d30 <__assert_fail@plt+0x1b74>
   12bec:	cmp	r6, #122	; 0x7a
   12bf0:	bhi	12c10 <__assert_fail@plt+0x1a54>
   12bf4:	cmp	r6, #97	; 0x61
   12bf8:	bcs	12be4 <__assert_fail@plt+0x1a28>
   12bfc:	cmp	r6, #95	; 0x5f
   12c00:	beq	12be4 <__assert_fail@plt+0x1a28>
   12c04:	cmp	r6, #96	; 0x60
   12c08:	bne	128f8 <__assert_fail@plt+0x173c>
   12c0c:	b	12990 <__assert_fail@plt+0x17d4>
   12c10:	cmp	r6, #124	; 0x7c
   12c14:	beq	12990 <__assert_fail@plt+0x17d4>
   12c18:	bcc	12e24 <__assert_fail@plt+0x1c68>
   12c1c:	cmp	r6, #125	; 0x7d
   12c20:	beq	12e24 <__assert_fail@plt+0x1c68>
   12c24:	cmp	r6, #126	; 0x7e
   12c28:	bne	128f8 <__assert_fail@plt+0x173c>
   12c2c:	ldr	r3, [sp, #28]
   12c30:	cmp	r3, #0
   12c34:	bne	12d40 <__assert_fail@plt+0x1b84>
   12c38:	ldr	r5, [sp, #36]	; 0x24
   12c3c:	cmp	sl, #2
   12c40:	movne	fp, #0
   12c44:	andeq	fp, r7, #1
   12c48:	cmp	fp, #0
   12c4c:	beq	12b14 <__assert_fail@plt+0x1958>
   12c50:	b	12974 <__assert_fail@plt+0x17b8>
   12c54:	ldr	r3, [sp, #24]
   12c58:	cmp	r3, #0
   12c5c:	beq	12d24 <__assert_fail@plt+0x1b68>
   12c60:	sub	r2, sl, #2
   12c64:	cmp	r7, #0
   12c68:	clz	r2, r2
   12c6c:	lsr	r2, r2, #5
   12c70:	bne	12848 <__assert_fail@plt+0x168c>
   12c74:	ldr	r3, [sp, #52]	; 0x34
   12c78:	eor	r3, r3, #1
   12c7c:	ands	r2, r2, r3
   12c80:	moveq	r3, r4
   12c84:	beq	12cbc <__assert_fail@plt+0x1b00>
   12c88:	cmp	r9, r4
   12c8c:	str	r2, [sp, #52]	; 0x34
   12c90:	movhi	r3, #39	; 0x27
   12c94:	strbhi	r3, [r8, r4]
   12c98:	add	r3, r4, #1
   12c9c:	cmp	r9, r3
   12ca0:	movhi	r1, #36	; 0x24
   12ca4:	strbhi	r1, [r8, r3]
   12ca8:	add	r3, r4, #2
   12cac:	cmp	r9, r3
   12cb0:	movhi	r1, #39	; 0x27
   12cb4:	strbhi	r1, [r8, r3]
   12cb8:	add	r3, r4, #3
   12cbc:	cmp	r9, r3
   12cc0:	add	r4, r3, #1
   12cc4:	movhi	r2, #92	; 0x5c
   12cc8:	strbhi	r2, [r8, r3]
   12ccc:	cmp	fp, #0
   12cd0:	beq	130f8 <__assert_fail@plt+0x1f3c>
   12cd4:	ldr	r2, [sp, #28]
   12cd8:	ldr	r1, [sp, #40]	; 0x28
   12cdc:	add	r2, r2, #1
   12ce0:	cmp	r2, r1
   12ce4:	bcs	12d1c <__assert_fail@plt+0x1b60>
   12ce8:	ldr	r1, [sp, #48]	; 0x30
   12cec:	mov	r6, #48	; 0x30
   12cf0:	ldrb	r2, [r1, r2]
   12cf4:	sub	r2, r2, #48	; 0x30
   12cf8:	cmp	r2, #9
   12cfc:	bhi	13108 <__assert_fail@plt+0x1f4c>
   12d00:	cmp	r9, r4
   12d04:	add	r2, r3, #2
   12d08:	strbhi	r6, [r8, r4]
   12d0c:	cmp	r9, r2
   12d10:	add	r4, r3, #3
   12d14:	movhi	r1, #48	; 0x30
   12d18:	strbhi	r1, [r8, r2]
   12d1c:	mov	r5, #0
   12d20:	b	13100 <__assert_fail@plt+0x1f44>
   12d24:	ldr	r3, [sp, #148]	; 0x94
   12d28:	ands	r5, r3, #1
   12d2c:	bne	12db4 <__assert_fail@plt+0x1bf8>
   12d30:	mov	fp, #0
   12d34:	b	12b14 <__assert_fail@plt+0x1958>
   12d38:	cmp	r7, #0
   12d3c:	bne	1284c <__assert_fail@plt+0x1690>
   12d40:	mov	r5, #0
   12d44:	b	12d30 <__assert_fail@plt+0x1b74>
   12d48:	cmp	sl, #2
   12d4c:	bne	12dc0 <__assert_fail@plt+0x1c04>
   12d50:	cmp	r7, #0
   12d54:	bne	1284c <__assert_fail@plt+0x1690>
   12d58:	mov	r5, r7
   12d5c:	mov	fp, r7
   12d60:	ldr	r3, [sp, #52]	; 0x34
   12d64:	eor	fp, fp, #1
   12d68:	tst	r3, fp
   12d6c:	beq	12d98 <__assert_fail@plt+0x1bdc>
   12d70:	cmp	r9, r4
   12d74:	movhi	r3, #39	; 0x27
   12d78:	strbhi	r3, [r8, r4]
   12d7c:	add	r3, r4, #1
   12d80:	add	r4, r4, #2
   12d84:	cmp	r9, r3
   12d88:	movhi	r2, #39	; 0x27
   12d8c:	strbhi	r2, [r8, r3]
   12d90:	mov	r3, #0
   12d94:	str	r3, [sp, #52]	; 0x34
   12d98:	cmp	r9, r4
   12d9c:	ldr	r3, [sp, #72]	; 0x48
   12da0:	strbhi	r6, [r8, r4]
   12da4:	cmp	r5, #0
   12da8:	add	r4, r4, #1
   12dac:	moveq	r3, #0
   12db0:	str	r3, [sp, #72]	; 0x48
   12db4:	ldr	r3, [sp, #28]
   12db8:	add	r3, r3, #1
   12dbc:	b	12574 <__assert_fail@plt+0x13b8>
   12dc0:	ldr	r3, [sp, #24]
   12dc4:	and	r3, r3, r7
   12dc8:	tst	r5, r3
   12dcc:	moveq	r3, r6
   12dd0:	beq	12960 <__assert_fail@plt+0x17a4>
   12dd4:	mov	fp, #0
   12dd8:	mov	r5, fp
   12ddc:	b	12d60 <__assert_fail@plt+0x1ba4>
   12de0:	mov	r3, #116	; 0x74
   12de4:	b	12960 <__assert_fail@plt+0x17a4>
   12de8:	mov	r3, #110	; 0x6e
   12dec:	b	12960 <__assert_fail@plt+0x17a4>
   12df0:	mov	r3, #97	; 0x61
   12df4:	ldr	r2, [sp, #24]
   12df8:	cmp	r2, #0
   12dfc:	beq	12d40 <__assert_fail@plt+0x1b84>
   12e00:	mov	r6, r3
   12e04:	mov	r5, #0
   12e08:	b	12b68 <__assert_fail@plt+0x19ac>
   12e0c:	mov	r3, #98	; 0x62
   12e10:	b	12df4 <__assert_fail@plt+0x1c38>
   12e14:	mov	r3, #118	; 0x76
   12e18:	b	12df4 <__assert_fail@plt+0x1c38>
   12e1c:	mov	r3, #102	; 0x66
   12e20:	b	12df4 <__assert_fail@plt+0x1c38>
   12e24:	ldr	r3, [sp, #40]	; 0x28
   12e28:	cmn	r3, #1
   12e2c:	bne	12e4c <__assert_fail@plt+0x1c90>
   12e30:	ldr	r3, [sp, #48]	; 0x30
   12e34:	ldrb	r3, [r3, #1]
   12e38:	adds	r3, r3, #0
   12e3c:	movne	r3, #1
   12e40:	cmp	r3, #0
   12e44:	bne	12d40 <__assert_fail@plt+0x1b84>
   12e48:	b	12c2c <__assert_fail@plt+0x1a70>
   12e4c:	ldr	r3, [sp, #40]	; 0x28
   12e50:	subs	r3, r3, #1
   12e54:	b	12e3c <__assert_fail@plt+0x1c80>
   12e58:	mov	r3, #0
   12e5c:	mov	r2, #0
   12e60:	strd	r2, [sp, #96]	; 0x60
   12e64:	ldr	r3, [sp, #40]	; 0x28
   12e68:	cmn	r3, #1
   12e6c:	bne	12e7c <__assert_fail@plt+0x1cc0>
   12e70:	ldr	r0, [sp, #48]	; 0x30
   12e74:	bl	1109c <strlen@plt>
   12e78:	str	r0, [sp, #40]	; 0x28
   12e7c:	ldr	r5, [sp, #36]	; 0x24
   12e80:	mov	r3, #0
   12e84:	str	r3, [sp, #56]	; 0x38
   12e88:	ldr	r3, [sp, #28]
   12e8c:	add	r0, sp, #92	; 0x5c
   12e90:	ldr	r1, [sp, #40]	; 0x28
   12e94:	ldr	r2, [sp, #56]	; 0x38
   12e98:	add	r2, r3, r2
   12e9c:	ldr	r3, [sp, #48]	; 0x30
   12ea0:	add	fp, r3, r2
   12ea4:	sub	r2, r1, r2
   12ea8:	add	r3, sp, #96	; 0x60
   12eac:	mov	r1, fp
   12eb0:	bl	14b1c <__assert_fail@plt+0x3960>
   12eb4:	subs	r2, r0, #0
   12eb8:	beq	12ef8 <__assert_fail@plt+0x1d3c>
   12ebc:	cmn	r2, #1
   12ec0:	beq	130cc <__assert_fail@plt+0x1f10>
   12ec4:	cmn	r2, #2
   12ec8:	bne	1303c <__assert_fail@plt+0x1e80>
   12ecc:	ldr	r3, [sp, #28]
   12ed0:	ldr	r2, [sp, #56]	; 0x38
   12ed4:	add	r3, r3, r2
   12ed8:	ldr	r2, [sp, #40]	; 0x28
   12edc:	cmp	r2, r3
   12ee0:	bls	130cc <__assert_fail@plt+0x1f10>
   12ee4:	ldr	r2, [sp, #56]	; 0x38
   12ee8:	ldr	r3, [sp, #80]	; 0x50
   12eec:	ldrb	r5, [r3, r2]
   12ef0:	cmp	r5, #0
   12ef4:	bne	1302c <__assert_fail@plt+0x1e70>
   12ef8:	ldr	r3, [sp, #56]	; 0x38
   12efc:	cmp	r3, #1
   12f00:	bls	12924 <__assert_fail@plt+0x1768>
   12f04:	ldr	r3, [sp, #28]
   12f08:	mov	fp, #0
   12f0c:	mov	ip, #92	; 0x5c
   12f10:	ldr	r2, [sp, #56]	; 0x38
   12f14:	add	r3, r3, r2
   12f18:	ldr	r2, [sp, #24]
   12f1c:	str	r3, [sp, #36]	; 0x24
   12f20:	eor	r3, r5, #1
   12f24:	and	r3, r3, r2
   12f28:	mov	r2, #39	; 0x27
   12f2c:	uxtb	r3, r3
   12f30:	cmp	r3, #0
   12f34:	beq	130d4 <__assert_fail@plt+0x1f18>
   12f38:	sub	r0, sl, #2
   12f3c:	cmp	r7, #0
   12f40:	clz	r0, r0
   12f44:	lsr	r0, r0, #5
   12f48:	bne	12848 <__assert_fail@plt+0x168c>
   12f4c:	ldr	r1, [sp, #52]	; 0x34
   12f50:	eor	r1, r1, #1
   12f54:	ands	r1, r0, r1
   12f58:	beq	12f88 <__assert_fail@plt+0x1dcc>
   12f5c:	cmp	r9, r4
   12f60:	add	r0, r4, #1
   12f64:	str	r1, [sp, #52]	; 0x34
   12f68:	strbhi	r2, [r8, r4]
   12f6c:	cmp	r9, r0
   12f70:	movhi	lr, #36	; 0x24
   12f74:	strbhi	lr, [r8, r0]
   12f78:	add	r0, r4, #2
   12f7c:	add	r4, r4, #3
   12f80:	cmp	r9, r0
   12f84:	strbhi	r2, [r8, r0]
   12f88:	cmp	r9, r4
   12f8c:	add	r0, r4, #1
   12f90:	mov	fp, r3
   12f94:	strbhi	ip, [r8, r4]
   12f98:	cmp	r9, r0
   12f9c:	lsrhi	r1, r6, #6
   12fa0:	addhi	r1, r1, #48	; 0x30
   12fa4:	strbhi	r1, [r8, r0]
   12fa8:	add	r0, r4, #2
   12fac:	add	r4, r4, #3
   12fb0:	cmp	r9, r0
   12fb4:	ubfxhi	r1, r6, #3, #3
   12fb8:	and	r6, r6, #7
   12fbc:	add	r6, r6, #48	; 0x30
   12fc0:	addhi	r1, r1, #48	; 0x30
   12fc4:	strbhi	r1, [r8, r0]
   12fc8:	eor	r0, fp, #1
   12fcc:	ldr	r1, [sp, #28]
   12fd0:	ldr	lr, [sp, #52]	; 0x34
   12fd4:	add	r1, r1, #1
   12fd8:	and	r0, r0, lr
   12fdc:	ldr	lr, [sp, #36]	; 0x24
   12fe0:	cmp	r1, lr
   12fe4:	bcs	12d60 <__assert_fail@plt+0x1ba4>
   12fe8:	cmp	r0, #0
   12fec:	beq	13010 <__assert_fail@plt+0x1e54>
   12ff0:	cmp	r9, r4
   12ff4:	add	r0, r4, #1
   12ff8:	strbhi	r2, [r8, r4]
   12ffc:	cmp	r9, r0
   13000:	add	r4, r4, #2
   13004:	strbhi	r2, [r8, r0]
   13008:	mov	r0, #0
   1300c:	str	r0, [sp, #52]	; 0x34
   13010:	ldr	r0, [sp, #48]	; 0x30
   13014:	cmp	r9, r4
   13018:	str	r1, [sp, #28]
   1301c:	strbhi	r6, [r8, r4]
   13020:	add	r4, r4, #1
   13024:	ldrb	r6, [r0, r1]
   13028:	b	12f30 <__assert_fail@plt+0x1d74>
   1302c:	ldr	r3, [sp, #56]	; 0x38
   13030:	add	r3, r3, #1
   13034:	str	r3, [sp, #56]	; 0x38
   13038:	b	12ecc <__assert_fail@plt+0x1d10>
   1303c:	cmp	sl, #2
   13040:	movne	r3, #0
   13044:	andeq	r3, r7, #1
   13048:	cmp	r3, #0
   1304c:	movne	r1, #1
   13050:	bne	130ac <__assert_fail@plt+0x1ef0>
   13054:	ldr	r0, [sp, #92]	; 0x5c
   13058:	str	r2, [sp, #84]	; 0x54
   1305c:	bl	10fc4 <iswprint@plt>
   13060:	ldr	r3, [sp, #56]	; 0x38
   13064:	cmp	r0, #0
   13068:	add	r0, sp, #96	; 0x60
   1306c:	moveq	r5, #0
   13070:	ldr	r2, [sp, #84]	; 0x54
   13074:	add	r3, r3, r2
   13078:	str	r3, [sp, #56]	; 0x38
   1307c:	bl	10f70 <mbsinit@plt>
   13080:	cmp	r0, #0
   13084:	beq	12e88 <__assert_fail@plt+0x1ccc>
   13088:	b	12ef8 <__assert_fail@plt+0x1d3c>
   1308c:	ldrb	r3, [fp, #1]!
   13090:	cmp	r3, #94	; 0x5e
   13094:	beq	12974 <__assert_fail@plt+0x17b8>
   13098:	bhi	130b8 <__assert_fail@plt+0x1efc>
   1309c:	sub	r3, r3, #91	; 0x5b
   130a0:	cmp	r3, #1
   130a4:	bls	12974 <__assert_fail@plt+0x17b8>
   130a8:	add	r1, r1, #1
   130ac:	cmp	r1, r2
   130b0:	bne	1308c <__assert_fail@plt+0x1ed0>
   130b4:	b	13054 <__assert_fail@plt+0x1e98>
   130b8:	cmp	r3, #96	; 0x60
   130bc:	beq	12974 <__assert_fail@plt+0x17b8>
   130c0:	cmp	r3, #124	; 0x7c
   130c4:	bne	130a8 <__assert_fail@plt+0x1eec>
   130c8:	b	12974 <__assert_fail@plt+0x17b8>
   130cc:	mov	r5, #0
   130d0:	b	12ef8 <__assert_fail@plt+0x1d3c>
   130d4:	ldr	r1, [sp, #64]	; 0x40
   130d8:	cmp	r1, #0
   130dc:	beq	12fc8 <__assert_fail@plt+0x1e0c>
   130e0:	cmp	r9, r4
   130e4:	mov	r1, #0
   130e8:	strbhi	ip, [r8, r4]
   130ec:	add	r4, r4, #1
   130f0:	str	r1, [sp, #64]	; 0x40
   130f4:	b	12fc8 <__assert_fail@plt+0x1e0c>
   130f8:	mov	r5, fp
   130fc:	ldr	fp, [sp, #24]
   13100:	mov	r6, #48	; 0x30
   13104:	b	12b14 <__assert_fail@plt+0x1958>
   13108:	mov	r5, #0
   1310c:	b	12b14 <__assert_fail@plt+0x1958>
   13110:	mov	r6, r1
   13114:	b	12d40 <__assert_fail@plt+0x1b84>
   13118:	mov	r6, r1
   1311c:	b	12d30 <__assert_fail@plt+0x1b74>
   13120:	ldr	r2, [sp, #28]
   13124:	ldr	r3, [sp, #40]	; 0x28
   13128:	subs	r3, r3, r2
   1312c:	movne	r3, #1
   13130:	b	12598 <__assert_fail@plt+0x13dc>
   13134:	ldr	r3, [sp, #60]	; 0x3c
   13138:	mov	sl, #2
   1313c:	ldr	r7, [sp, #72]	; 0x48
   13140:	adds	r6, r3, #0
   13144:	mov	r5, r3
   13148:	movne	r6, #1
   1314c:	cmp	r9, #0
   13150:	movne	r6, #0
   13154:	cmp	r6, #0
   13158:	bne	12528 <__assert_fail@plt+0x136c>
   1315c:	ldr	r3, [sp, #68]	; 0x44
   13160:	ldr	r2, [sp, #44]	; 0x2c
   13164:	cmp	r2, #0
   13168:	moveq	r3, #0
   1316c:	andne	r3, r3, #1
   13170:	cmp	r3, #0
   13174:	movne	r3, r2
   13178:	subne	r3, r3, #1
   1317c:	bne	131ac <__assert_fail@plt+0x1ff0>
   13180:	cmp	r9, r4
   13184:	movhi	r3, #0
   13188:	strbhi	r3, [r8, r4]
   1318c:	mov	r0, r4
   13190:	add	sp, sp, #108	; 0x6c
   13194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13198:	mov	r3, r7
   1319c:	b	13160 <__assert_fail@plt+0x1fa4>
   131a0:	cmp	r9, r4
   131a4:	strbhi	r2, [r8, r4]
   131a8:	add	r4, r4, #1
   131ac:	ldrb	r2, [r3, #1]!
   131b0:	cmp	r2, #0
   131b4:	bne	131a0 <__assert_fail@plt+0x1fe4>
   131b8:	b	13180 <__assert_fail@plt+0x1fc4>
   131bc:	andeq	r5, r1, ip, lsr r9
   131c0:	andeq	r5, r1, pc, asr #18
   131c4:	andeq	r5, r1, sp, asr #18
   131c8:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   131cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131d0:	sub	sp, sp, #52	; 0x34
   131d4:	mov	r6, r0
   131d8:	mov	r5, r3
   131dc:	mov	r8, r1
   131e0:	mov	r9, r2
   131e4:	bl	110b4 <__errno_location@plt>
   131e8:	ldr	r3, [r0]
   131ec:	cmn	r6, #-2147483647	; 0x80000001
   131f0:	str	r0, [sp, #24]
   131f4:	ldr	r7, [pc, #368]	; 1336c <__assert_fail@plt+0x21b0>
   131f8:	str	r3, [sp, #32]
   131fc:	movne	r3, #0
   13200:	moveq	r3, #1
   13204:	orrs	r3, r3, r6, lsr #31
   13208:	ldr	r4, [r7]
   1320c:	beq	13214 <__assert_fail@plt+0x2058>
   13210:	bl	1118c <abort@plt>
   13214:	ldr	r2, [r7, #4]
   13218:	cmp	r2, r6
   1321c:	bgt	1328c <__assert_fail@plt+0x20d0>
   13220:	add	sl, r7, #8
   13224:	mov	r3, #8
   13228:	cmp	r4, sl
   1322c:	add	r1, sp, #44	; 0x2c
   13230:	str	r2, [sp, #44]	; 0x2c
   13234:	sub	r2, r6, r2
   13238:	movne	r0, r4
   1323c:	moveq	r0, #0
   13240:	add	r2, r2, #1
   13244:	str	r3, [sp]
   13248:	mvn	r3, #-2147483648	; 0x80000000
   1324c:	bl	1425c <__assert_fail@plt+0x30a0>
   13250:	cmp	r4, sl
   13254:	mov	fp, r0
   13258:	str	r0, [r7]
   1325c:	ldmeq	r4, {r0, r1}
   13260:	mov	r4, fp
   13264:	ldr	r2, [sp, #44]	; 0x2c
   13268:	stmeq	fp, {r0, r1}
   1326c:	mov	r1, #0
   13270:	ldr	r0, [r7, #4]
   13274:	sub	r2, r2, r0
   13278:	add	r0, fp, r0, lsl #3
   1327c:	lsl	r2, r2, #3
   13280:	bl	110e4 <memset@plt>
   13284:	ldr	r3, [sp, #44]	; 0x2c
   13288:	str	r3, [r7, #4]
   1328c:	ldr	r3, [r5, #4]
   13290:	add	sl, r4, r6, lsl #3
   13294:	mov	r2, r8
   13298:	ldr	fp, [r4, r6, lsl #3]
   1329c:	ldr	r7, [sl, #4]
   132a0:	orr	r3, r3, #1
   132a4:	str	r3, [sp, #28]
   132a8:	add	r3, r5, #8
   132ac:	mov	r1, fp
   132b0:	str	r3, [sp, #36]	; 0x24
   132b4:	mov	r0, r7
   132b8:	ldr	r3, [r5, #44]	; 0x2c
   132bc:	str	r3, [sp, #16]
   132c0:	ldr	r3, [r5, #40]	; 0x28
   132c4:	str	r3, [sp, #12]
   132c8:	add	r3, r5, #8
   132cc:	str	r3, [sp, #8]
   132d0:	ldr	r3, [sp, #28]
   132d4:	str	r3, [sp, #4]
   132d8:	ldr	r3, [r5]
   132dc:	str	r3, [sp]
   132e0:	mov	r3, r9
   132e4:	bl	124dc <__assert_fail@plt+0x1320>
   132e8:	cmp	fp, r0
   132ec:	bhi	13354 <__assert_fail@plt+0x2198>
   132f0:	ldr	r3, [pc, #120]	; 13370 <__assert_fail@plt+0x21b4>
   132f4:	add	fp, r0, #1
   132f8:	str	fp, [r4, r6, lsl #3]
   132fc:	cmp	r7, r3
   13300:	beq	1330c <__assert_fail@plt+0x2150>
   13304:	mov	r0, r7
   13308:	bl	1221c <__assert_fail@plt+0x1060>
   1330c:	mov	r0, fp
   13310:	bl	1414c <__assert_fail@plt+0x2f90>
   13314:	ldr	r3, [r5, #44]	; 0x2c
   13318:	mov	r2, r8
   1331c:	mov	r1, fp
   13320:	str	r0, [sl, #4]
   13324:	mov	r7, r0
   13328:	str	r3, [sp, #16]
   1332c:	ldr	r3, [r5, #40]	; 0x28
   13330:	str	r3, [sp, #12]
   13334:	add	r3, r5, #8
   13338:	str	r3, [sp, #8]
   1333c:	ldr	r3, [sp, #28]
   13340:	str	r3, [sp, #4]
   13344:	ldr	r3, [r5]
   13348:	str	r3, [sp]
   1334c:	mov	r3, r9
   13350:	bl	124dc <__assert_fail@plt+0x1320>
   13354:	ldr	r3, [sp, #24]
   13358:	mov	r0, r7
   1335c:	ldr	r2, [sp, #32]
   13360:	str	r2, [r3]
   13364:	add	sp, sp, #52	; 0x34
   13368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1336c:	andeq	r6, r2, r0, lsr #2
   13370:	andeq	r6, r2, r8, ror #3
   13374:	push	{r4, r5, r6, lr}
   13378:	mov	r5, r0
   1337c:	bl	110b4 <__errno_location@plt>
   13380:	mov	r4, r0
   13384:	cmp	r5, #0
   13388:	ldr	r0, [pc, #20]	; 133a4 <__assert_fail@plt+0x21e8>
   1338c:	mov	r1, #48	; 0x30
   13390:	movne	r0, r5
   13394:	ldr	r6, [r4]
   13398:	bl	1434c <__assert_fail@plt+0x3190>
   1339c:	str	r6, [r4]
   133a0:	pop	{r4, r5, r6, pc}
   133a4:	andeq	r6, r2, r8, ror #5
   133a8:	ldr	r3, [pc, #12]	; 133bc <__assert_fail@plt+0x2200>
   133ac:	cmp	r0, #0
   133b0:	moveq	r0, r3
   133b4:	ldr	r0, [r0]
   133b8:	bx	lr
   133bc:	andeq	r6, r2, r8, ror #5
   133c0:	ldr	r3, [pc, #12]	; 133d4 <__assert_fail@plt+0x2218>
   133c4:	cmp	r0, #0
   133c8:	moveq	r0, r3
   133cc:	str	r1, [r0]
   133d0:	bx	lr
   133d4:	andeq	r6, r2, r8, ror #5
   133d8:	ldr	r3, [pc, #52]	; 13414 <__assert_fail@plt+0x2258>
   133dc:	cmp	r0, #0
   133e0:	push	{lr}		; (str lr, [sp, #-4]!)
   133e4:	lsr	lr, r1, #5
   133e8:	and	r1, r1, #31
   133ec:	moveq	r0, r3
   133f0:	add	r3, r0, #8
   133f4:	ldr	ip, [r3, lr, lsl #2]
   133f8:	lsr	r0, ip, r1
   133fc:	eor	r2, r2, r0
   13400:	and	r0, r0, #1
   13404:	and	r2, r2, #1
   13408:	eor	r1, ip, r2, lsl r1
   1340c:	str	r1, [r3, lr, lsl #2]
   13410:	pop	{pc}		; (ldr pc, [sp], #4)
   13414:	andeq	r6, r2, r8, ror #5
   13418:	ldr	r3, [pc, #16]	; 13430 <__assert_fail@plt+0x2274>
   1341c:	cmp	r0, #0
   13420:	movne	r3, r0
   13424:	ldr	r0, [r3, #4]
   13428:	str	r1, [r3, #4]
   1342c:	bx	lr
   13430:	andeq	r6, r2, r8, ror #5
   13434:	ldr	r3, [pc, #44]	; 13468 <__assert_fail@plt+0x22ac>
   13438:	cmp	r0, #0
   1343c:	moveq	r0, r3
   13440:	mov	r3, #10
   13444:	cmp	r2, #0
   13448:	cmpne	r1, #0
   1344c:	str	r3, [r0]
   13450:	bne	1345c <__assert_fail@plt+0x22a0>
   13454:	push	{r4, lr}
   13458:	bl	1118c <abort@plt>
   1345c:	str	r1, [r0, #40]	; 0x28
   13460:	str	r2, [r0, #44]	; 0x2c
   13464:	bx	lr
   13468:	andeq	r6, r2, r8, ror #5
   1346c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13470:	sub	sp, sp, #24
   13474:	mov	sl, r3
   13478:	mov	r7, r0
   1347c:	mov	r8, r1
   13480:	mov	r9, r2
   13484:	ldr	r4, [sp, #56]	; 0x38
   13488:	ldr	r3, [pc, #88]	; 134e8 <__assert_fail@plt+0x232c>
   1348c:	cmp	r4, #0
   13490:	moveq	r4, r3
   13494:	bl	110b4 <__errno_location@plt>
   13498:	ldr	r3, [r4, #44]	; 0x2c
   1349c:	mov	r5, r0
   134a0:	mov	r2, r9
   134a4:	mov	r1, r8
   134a8:	mov	r0, r7
   134ac:	ldr	r6, [r5]
   134b0:	str	r3, [sp, #16]
   134b4:	ldr	r3, [r4, #40]	; 0x28
   134b8:	str	r3, [sp, #12]
   134bc:	add	r3, r4, #8
   134c0:	str	r3, [sp, #8]
   134c4:	ldr	r3, [r4, #4]
   134c8:	str	r3, [sp, #4]
   134cc:	ldr	r3, [r4]
   134d0:	str	r3, [sp]
   134d4:	mov	r3, sl
   134d8:	bl	124dc <__assert_fail@plt+0x1320>
   134dc:	str	r6, [r5]
   134e0:	add	sp, sp, #24
   134e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   134e8:	andeq	r6, r2, r8, ror #5
   134ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134f0:	cmp	r3, #0
   134f4:	sub	sp, sp, #44	; 0x2c
   134f8:	mov	r6, r2
   134fc:	mov	sl, r1
   13500:	mov	r9, r0
   13504:	ldr	r4, [pc, #176]	; 135bc <__assert_fail@plt+0x2400>
   13508:	movne	r4, r3
   1350c:	bl	110b4 <__errno_location@plt>
   13510:	ldr	r3, [r0]
   13514:	mov	r1, #0
   13518:	mov	r2, r9
   1351c:	mov	r8, r0
   13520:	mov	r0, r1
   13524:	ldr	r5, [r4, #4]
   13528:	add	fp, r4, #8
   1352c:	str	r3, [sp, #28]
   13530:	ldr	r3, [r4, #44]	; 0x2c
   13534:	cmp	r6, #0
   13538:	orreq	r5, r5, #1
   1353c:	str	r3, [sp, #16]
   13540:	ldr	r3, [r4, #40]	; 0x28
   13544:	stmib	sp, {r5, fp}
   13548:	str	r3, [sp, #12]
   1354c:	ldr	r3, [r4]
   13550:	str	r3, [sp]
   13554:	mov	r3, sl
   13558:	bl	124dc <__assert_fail@plt+0x1320>
   1355c:	add	r1, r0, #1
   13560:	mov	r7, r0
   13564:	mov	r0, r1
   13568:	str	r1, [sp, #36]	; 0x24
   1356c:	bl	1414c <__assert_fail@plt+0x2f90>
   13570:	ldr	r3, [r4, #44]	; 0x2c
   13574:	mov	r2, r9
   13578:	ldr	r1, [sp, #36]	; 0x24
   1357c:	str	r3, [sp, #16]
   13580:	ldr	r3, [r4, #40]	; 0x28
   13584:	stmib	sp, {r5, fp}
   13588:	str	r0, [sp, #32]
   1358c:	str	r3, [sp, #12]
   13590:	ldr	r3, [r4]
   13594:	str	r3, [sp]
   13598:	mov	r3, sl
   1359c:	bl	124dc <__assert_fail@plt+0x1320>
   135a0:	ldr	r3, [sp, #28]
   135a4:	cmp	r6, #0
   135a8:	ldr	r0, [sp, #32]
   135ac:	str	r3, [r8]
   135b0:	strne	r7, [r6]
   135b4:	add	sp, sp, #44	; 0x2c
   135b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135bc:	andeq	r6, r2, r8, ror #5
   135c0:	mov	r3, r2
   135c4:	mov	r2, #0
   135c8:	b	134ec <__assert_fail@plt+0x2330>
   135cc:	push	{r4, r5, r6, r7, r8, lr}
   135d0:	mov	r6, #1
   135d4:	ldr	r4, [pc, #100]	; 13640 <__assert_fail@plt+0x2484>
   135d8:	ldr	r5, [r4]
   135dc:	add	r7, r5, #4
   135e0:	ldr	r3, [r4, #4]
   135e4:	cmp	r3, r6
   135e8:	bgt	13630 <__assert_fail@plt+0x2474>
   135ec:	ldr	r6, [pc, #80]	; 13644 <__assert_fail@plt+0x2488>
   135f0:	ldr	r0, [r5, #4]
   135f4:	cmp	r0, r6
   135f8:	beq	1360c <__assert_fail@plt+0x2450>
   135fc:	bl	1221c <__assert_fail@plt+0x1060>
   13600:	mov	r3, #256	; 0x100
   13604:	str	r3, [r4, #8]
   13608:	str	r6, [r4, #12]
   1360c:	ldr	r6, [pc, #52]	; 13648 <__assert_fail@plt+0x248c>
   13610:	cmp	r5, r6
   13614:	beq	13624 <__assert_fail@plt+0x2468>
   13618:	mov	r0, r5
   1361c:	bl	1221c <__assert_fail@plt+0x1060>
   13620:	str	r6, [r4]
   13624:	mov	r3, #1
   13628:	str	r3, [r4, #4]
   1362c:	pop	{r4, r5, r6, r7, r8, pc}
   13630:	ldr	r0, [r7, r6, lsl #3]
   13634:	add	r6, r6, #1
   13638:	bl	1221c <__assert_fail@plt+0x1060>
   1363c:	b	135e0 <__assert_fail@plt+0x2424>
   13640:	andeq	r6, r2, r0, lsr #2
   13644:	andeq	r6, r2, r8, ror #3
   13648:	andeq	r6, r2, r8, lsr #2
   1364c:	ldr	r3, [pc, #4]	; 13658 <__assert_fail@plt+0x249c>
   13650:	mvn	r2, #0
   13654:	b	131cc <__assert_fail@plt+0x2010>
   13658:	andeq	r6, r2, r8, ror #5
   1365c:	ldr	r3, [pc]	; 13664 <__assert_fail@plt+0x24a8>
   13660:	b	131cc <__assert_fail@plt+0x2010>
   13664:	andeq	r6, r2, r8, ror #5
   13668:	mov	r1, r0
   1366c:	mov	r0, #0
   13670:	b	1364c <__assert_fail@plt+0x2490>
   13674:	mov	r2, r1
   13678:	mov	r1, r0
   1367c:	mov	r0, #0
   13680:	b	1365c <__assert_fail@plt+0x24a0>
   13684:	push	{r4, r5, lr}
   13688:	sub	sp, sp, #52	; 0x34
   1368c:	mov	r5, r2
   13690:	mov	r4, r0
   13694:	mov	r0, sp
   13698:	bl	12380 <__assert_fail@plt+0x11c4>
   1369c:	mov	r3, sp
   136a0:	mvn	r2, #0
   136a4:	mov	r1, r5
   136a8:	mov	r0, r4
   136ac:	bl	131cc <__assert_fail@plt+0x2010>
   136b0:	add	sp, sp, #52	; 0x34
   136b4:	pop	{r4, r5, pc}
   136b8:	push	{r4, r5, r6, lr}
   136bc:	sub	sp, sp, #48	; 0x30
   136c0:	mov	r5, r2
   136c4:	mov	r6, r3
   136c8:	mov	r4, r0
   136cc:	mov	r0, sp
   136d0:	bl	12380 <__assert_fail@plt+0x11c4>
   136d4:	mov	r3, sp
   136d8:	mov	r2, r6
   136dc:	mov	r1, r5
   136e0:	mov	r0, r4
   136e4:	bl	131cc <__assert_fail@plt+0x2010>
   136e8:	add	sp, sp, #48	; 0x30
   136ec:	pop	{r4, r5, r6, pc}
   136f0:	mov	r2, r1
   136f4:	mov	r1, r0
   136f8:	mov	r0, #0
   136fc:	b	13684 <__assert_fail@plt+0x24c8>
   13700:	mov	r3, r2
   13704:	mov	r2, r1
   13708:	mov	r1, r0
   1370c:	mov	r0, #0
   13710:	b	136b8 <__assert_fail@plt+0x24fc>
   13714:	push	{r4, r5, r6, lr}
   13718:	mov	r4, r0
   1371c:	mov	r5, r1
   13720:	mov	r6, r2
   13724:	sub	sp, sp, #48	; 0x30
   13728:	mov	ip, sp
   1372c:	ldr	lr, [pc, #64]	; 13774 <__assert_fail@plt+0x25b8>
   13730:	ldm	lr!, {r0, r1, r2, r3}
   13734:	stmia	ip!, {r0, r1, r2, r3}
   13738:	ldm	lr!, {r0, r1, r2, r3}
   1373c:	stmia	ip!, {r0, r1, r2, r3}
   13740:	ldm	lr, {r0, r1, r2, r3}
   13744:	stm	ip, {r0, r1, r2, r3}
   13748:	mov	r1, r6
   1374c:	mov	r2, #1
   13750:	mov	r0, sp
   13754:	bl	133d8 <__assert_fail@plt+0x221c>
   13758:	mov	r3, sp
   1375c:	mov	r2, r5
   13760:	mov	r1, r4
   13764:	mov	r0, #0
   13768:	bl	131cc <__assert_fail@plt+0x2010>
   1376c:	add	sp, sp, #48	; 0x30
   13770:	pop	{r4, r5, r6, pc}
   13774:	andeq	r6, r2, r8, ror #5
   13778:	mov	r2, r1
   1377c:	mvn	r1, #0
   13780:	b	13714 <__assert_fail@plt+0x2558>
   13784:	mov	r1, #58	; 0x3a
   13788:	b	13778 <__assert_fail@plt+0x25bc>
   1378c:	mov	r2, #58	; 0x3a
   13790:	b	13714 <__assert_fail@plt+0x2558>
   13794:	push	{r4, r5, lr}
   13798:	sub	sp, sp, #100	; 0x64
   1379c:	mov	r4, r0
   137a0:	mov	r0, sp
   137a4:	mov	r5, r2
   137a8:	bl	12380 <__assert_fail@plt+0x11c4>
   137ac:	mov	ip, sp
   137b0:	add	lr, sp, #48	; 0x30
   137b4:	ldm	ip!, {r0, r1, r2, r3}
   137b8:	stmia	lr!, {r0, r1, r2, r3}
   137bc:	ldm	ip!, {r0, r1, r2, r3}
   137c0:	stmia	lr!, {r0, r1, r2, r3}
   137c4:	ldm	ip, {r0, r1, r2, r3}
   137c8:	stm	lr, {r0, r1, r2, r3}
   137cc:	mov	r2, #1
   137d0:	mov	r1, #58	; 0x3a
   137d4:	add	r0, sp, #48	; 0x30
   137d8:	bl	133d8 <__assert_fail@plt+0x221c>
   137dc:	add	r3, sp, #48	; 0x30
   137e0:	mvn	r2, #0
   137e4:	mov	r1, r5
   137e8:	mov	r0, r4
   137ec:	bl	131cc <__assert_fail@plt+0x2010>
   137f0:	add	sp, sp, #100	; 0x64
   137f4:	pop	{r4, r5, pc}
   137f8:	push	{r4, r5, r6, r7, lr}
   137fc:	mov	r4, r0
   13800:	mov	r6, r1
   13804:	mov	r7, r2
   13808:	mov	r5, r3
   1380c:	sub	sp, sp, #52	; 0x34
   13810:	ldr	lr, [pc, #68]	; 1385c <__assert_fail@plt+0x26a0>
   13814:	mov	ip, sp
   13818:	ldm	lr!, {r0, r1, r2, r3}
   1381c:	stmia	ip!, {r0, r1, r2, r3}
   13820:	ldm	lr!, {r0, r1, r2, r3}
   13824:	stmia	ip!, {r0, r1, r2, r3}
   13828:	ldm	lr, {r0, r1, r2, r3}
   1382c:	stm	ip, {r0, r1, r2, r3}
   13830:	mov	r2, r7
   13834:	mov	r1, r6
   13838:	mov	r0, sp
   1383c:	bl	13434 <__assert_fail@plt+0x2278>
   13840:	ldr	r2, [sp, #72]	; 0x48
   13844:	mov	r3, sp
   13848:	mov	r1, r5
   1384c:	mov	r0, r4
   13850:	bl	131cc <__assert_fail@plt+0x2010>
   13854:	add	sp, sp, #52	; 0x34
   13858:	pop	{r4, r5, r6, r7, pc}
   1385c:	andeq	r6, r2, r8, ror #5
   13860:	mvn	ip, #0
   13864:	push	{r0, r1, r2, lr}
   13868:	str	ip, [sp]
   1386c:	bl	137f8 <__assert_fail@plt+0x263c>
   13870:	add	sp, sp, #12
   13874:	pop	{pc}		; (ldr pc, [sp], #4)
   13878:	mov	r3, r2
   1387c:	mov	r2, r1
   13880:	mov	r1, r0
   13884:	mov	r0, #0
   13888:	b	13860 <__assert_fail@plt+0x26a4>
   1388c:	push	{r0, r1, r2, lr}
   13890:	str	r3, [sp]
   13894:	mov	r3, r2
   13898:	mov	r2, r1
   1389c:	mov	r1, r0
   138a0:	mov	r0, #0
   138a4:	bl	137f8 <__assert_fail@plt+0x263c>
   138a8:	add	sp, sp, #12
   138ac:	pop	{pc}		; (ldr pc, [sp], #4)
   138b0:	ldr	r3, [pc]	; 138b8 <__assert_fail@plt+0x26fc>
   138b4:	b	131cc <__assert_fail@plt+0x2010>
   138b8:	andeq	r6, r2, r0, lsr r1
   138bc:	mov	r2, r1
   138c0:	mov	r1, r0
   138c4:	mov	r0, #0
   138c8:	b	138b0 <__assert_fail@plt+0x26f4>
   138cc:	mvn	r2, #0
   138d0:	b	138b0 <__assert_fail@plt+0x26f4>
   138d4:	mov	r1, r0
   138d8:	mov	r0, #0
   138dc:	b	138cc <__assert_fail@plt+0x2710>
   138e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138e4:	sub	sp, sp, #44	; 0x2c
   138e8:	subs	sl, r3, #0
   138ec:	mvneq	r7, #0
   138f0:	mov	fp, r2
   138f4:	mov	r4, r1
   138f8:	ldr	r3, [sp, #80]	; 0x50
   138fc:	ldrne	r7, [sl]
   13900:	ldr	r9, [r2]
   13904:	cmp	r3, #0
   13908:	ldrne	r2, [sp, #80]	; 0x50
   1390c:	movne	r3, #0
   13910:	strne	r3, [r2]
   13914:	ldr	r3, [sp, #84]	; 0x54
   13918:	cmp	r3, #0
   1391c:	ldrne	r2, [sp, #84]	; 0x54
   13920:	movne	r3, #0
   13924:	strne	r3, [r2]
   13928:	cmp	r1, #0
   1392c:	bne	13a38 <__assert_fail@plt+0x287c>
   13930:	ldrb	r3, [r0]
   13934:	cmp	r3, #0
   13938:	moveq	r8, r1
   1393c:	moveq	r6, r1
   13940:	moveq	r5, r1
   13944:	beq	139d4 <__assert_fail@plt+0x2818>
   13948:	bl	143c0 <__assert_fail@plt+0x3204>
   1394c:	mov	r5, r0
   13950:	mov	r6, r4
   13954:	ldrb	r3, [r5]
   13958:	adds	r4, r4, #0
   1395c:	movne	r4, #1
   13960:	cmp	r6, #0
   13964:	movne	r4, #0
   13968:	cmp	r3, #43	; 0x2b
   1396c:	bne	13a78 <__assert_fail@plt+0x28bc>
   13970:	cmp	r4, #0
   13974:	movne	r4, #0
   13978:	ldrne	r3, [pc, #484]	; 13b64 <__assert_fail@plt+0x29a8>
   1397c:	bne	139c0 <__assert_fail@plt+0x2804>
   13980:	mov	r2, #10
   13984:	mov	r1, r4
   13988:	ldr	r3, [pc, #472]	; 13b68 <__assert_fail@plt+0x29ac>
   1398c:	mov	r0, r5
   13990:	str	r3, [sp]
   13994:	add	r3, sp, #16
   13998:	bl	14498 <__assert_fail@plt+0x32dc>
   1399c:	cmp	r0, #0
   139a0:	ldrne	r3, [pc, #452]	; 13b6c <__assert_fail@plt+0x29b0>
   139a4:	bne	139bc <__assert_fail@plt+0x2800>
   139a8:	ldr	r3, [sp, #16]
   139ac:	cmn	r3, #1
   139b0:	movne	r9, r3
   139b4:	ldr	r3, [pc, #432]	; 13b6c <__assert_fail@plt+0x29b0>
   139b8:	movne	r3, #0
   139bc:	mov	r4, #0
   139c0:	str	r3, [sp, #12]
   139c4:	mov	r8, r5
   139c8:	bl	11138 <endpwent@plt>
   139cc:	ldr	r3, [sp, #12]
   139d0:	mov	r5, r3
   139d4:	clz	r3, r5
   139d8:	cmp	r6, #0
   139dc:	lsr	r3, r3, #5
   139e0:	moveq	r3, #0
   139e4:	cmp	r3, #0
   139e8:	beq	13af8 <__assert_fail@plt+0x293c>
   139ec:	ldrb	r3, [r6]
   139f0:	cmp	r3, #43	; 0x2b
   139f4:	bne	13ad0 <__assert_fail@plt+0x2914>
   139f8:	ldr	r3, [pc, #360]	; 13b68 <__assert_fail@plt+0x29ac>
   139fc:	mov	r2, #10
   13a00:	mov	r1, #0
   13a04:	mov	r0, r6
   13a08:	str	r3, [sp]
   13a0c:	add	r3, sp, #16
   13a10:	bl	14498 <__assert_fail@plt+0x32dc>
   13a14:	cmp	r0, #0
   13a18:	ldrne	r5, [pc, #336]	; 13b70 <__assert_fail@plt+0x29b4>
   13a1c:	bne	13ae8 <__assert_fail@plt+0x292c>
   13a20:	ldr	r3, [sp, #16]
   13a24:	ldr	r5, [pc, #324]	; 13b70 <__assert_fail@plt+0x29b4>
   13a28:	cmn	r3, #1
   13a2c:	movne	r7, r3
   13a30:	movne	r5, #0
   13a34:	b	13ae8 <__assert_fail@plt+0x292c>
   13a38:	subs	r6, r1, r0
   13a3c:	moveq	r5, r6
   13a40:	beq	13a58 <__assert_fail@plt+0x289c>
   13a44:	add	r1, r6, #1
   13a48:	bl	14370 <__assert_fail@plt+0x31b4>
   13a4c:	mov	r5, r0
   13a50:	mov	r3, #0
   13a54:	strb	r3, [r0, r6]
   13a58:	ldrb	r6, [r4, #1]
   13a5c:	cmp	r6, #0
   13a60:	addne	r6, r4, #1
   13a64:	cmp	r5, #0
   13a68:	moveq	r8, r5
   13a6c:	moveq	r4, r5
   13a70:	bne	13954 <__assert_fail@plt+0x2798>
   13a74:	b	139d4 <__assert_fail@plt+0x2818>
   13a78:	mov	r0, r5
   13a7c:	bl	10f04 <getpwnam@plt>
   13a80:	cmp	r0, #0
   13a84:	beq	13970 <__assert_fail@plt+0x27b4>
   13a88:	cmp	r4, #0
   13a8c:	ldr	r9, [r0, #8]
   13a90:	moveq	r3, r4
   13a94:	beq	139c0 <__assert_fail@plt+0x2804>
   13a98:	ldr	r7, [r0, #12]
   13a9c:	mov	r0, r7
   13aa0:	bl	11198 <getgrgid@plt>
   13aa4:	subs	r1, r0, #0
   13aa8:	ldrne	r0, [r1]
   13aac:	bne	13abc <__assert_fail@plt+0x2900>
   13ab0:	add	r2, sp, #16
   13ab4:	mov	r0, r7
   13ab8:	bl	1226c <__assert_fail@plt+0x10b0>
   13abc:	bl	143c0 <__assert_fail@plt+0x3204>
   13ac0:	mov	r4, r0
   13ac4:	bl	10ee0 <endgrent@plt>
   13ac8:	mov	r3, #0
   13acc:	b	139c0 <__assert_fail@plt+0x2804>
   13ad0:	mov	r0, r6
   13ad4:	bl	111a4 <getgrnam@plt>
   13ad8:	cmp	r0, #0
   13adc:	movne	r5, #0
   13ae0:	ldrne	r7, [r0, #8]
   13ae4:	beq	139f8 <__assert_fail@plt+0x283c>
   13ae8:	bl	10ee0 <endgrent@plt>
   13aec:	mov	r0, r6
   13af0:	bl	143c0 <__assert_fail@plt+0x3204>
   13af4:	mov	r4, r0
   13af8:	cmp	r5, #0
   13afc:	bne	13b2c <__assert_fail@plt+0x2970>
   13b00:	ldr	r3, [sp, #80]	; 0x50
   13b04:	cmp	sl, #0
   13b08:	str	r9, [fp]
   13b0c:	strne	r7, [sl]
   13b10:	cmp	r3, #0
   13b14:	strne	r8, [r3]
   13b18:	movne	r8, #0
   13b1c:	ldr	r3, [sp, #84]	; 0x54
   13b20:	cmp	r3, #0
   13b24:	strne	r4, [r3]
   13b28:	movne	r4, #0
   13b2c:	mov	r0, r8
   13b30:	bl	1221c <__assert_fail@plt+0x1060>
   13b34:	mov	r0, r4
   13b38:	bl	1221c <__assert_fail@plt+0x1060>
   13b3c:	cmp	r5, #0
   13b40:	beq	13b58 <__assert_fail@plt+0x299c>
   13b44:	mov	r1, r5
   13b48:	mov	r2, #5
   13b4c:	mov	r0, #0
   13b50:	bl	10f94 <dcgettext@plt>
   13b54:	mov	r5, r0
   13b58:	mov	r0, r5
   13b5c:	add	sp, sp, #44	; 0x2c
   13b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b64:	andeq	r5, r1, sl, lsr #19
   13b68:	andeq	r5, r1, r4, ror r2
   13b6c:	muleq	r1, sp, r9
   13b70:			; <UNDEFINED> instruction: 0x000159b7
   13b74:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13b78:	subs	r5, r2, #0
   13b7c:	mov	r7, r0
   13b80:	mov	r8, r1
   13b84:	mov	r9, r3
   13b88:	moveq	r4, r5
   13b8c:	ldr	sl, [sp, #40]	; 0x28
   13b90:	beq	13ba0 <__assert_fail@plt+0x29e4>
   13b94:	mov	r1, #58	; 0x3a
   13b98:	bl	110a8 <strchr@plt>
   13b9c:	mov	r4, r0
   13ba0:	mov	r1, r4
   13ba4:	mov	r3, r5
   13ba8:	stm	sp, {r9, sl}
   13bac:	mov	r2, r8
   13bb0:	mov	r0, r7
   13bb4:	clz	r4, r4
   13bb8:	lsr	r4, r4, #5
   13bbc:	bl	138e0 <__assert_fail@plt+0x2724>
   13bc0:	cmp	r5, #0
   13bc4:	mov	r6, r0
   13bc8:	moveq	r4, #0
   13bcc:	cmp	r4, #0
   13bd0:	beq	13c10 <__assert_fail@plt+0x2a54>
   13bd4:	cmp	r0, #0
   13bd8:	beq	13c0c <__assert_fail@plt+0x2a50>
   13bdc:	mov	r1, #46	; 0x2e
   13be0:	mov	r0, r7
   13be4:	bl	110a8 <strchr@plt>
   13be8:	subs	r1, r0, #0
   13bec:	beq	13c10 <__assert_fail@plt+0x2a54>
   13bf0:	mov	r3, r5
   13bf4:	mov	r2, r8
   13bf8:	stm	sp, {r9, sl}
   13bfc:	mov	r0, r7
   13c00:	bl	138e0 <__assert_fail@plt+0x2724>
   13c04:	cmp	r0, #0
   13c08:	bne	13c10 <__assert_fail@plt+0x2a54>
   13c0c:	mov	r6, #0
   13c10:	mov	r0, r6
   13c14:	add	sp, sp, #8
   13c18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c1c:	push	{r4, r5, r6, lr}
   13c20:	cmp	r1, #0
   13c24:	sub	sp, sp, #32
   13c28:	mov	r5, r0
   13c2c:	ldr	r4, [sp, #48]	; 0x30
   13c30:	ldr	r6, [sp, #52]	; 0x34
   13c34:	beq	13ce8 <__assert_fail@plt+0x2b2c>
   13c38:	strd	r2, [sp]
   13c3c:	mov	r3, r1
   13c40:	mov	r1, #1
   13c44:	ldr	r2, [pc, #856]	; 13fa4 <__assert_fail@plt+0x2de8>
   13c48:	bl	11108 <__fprintf_chk@plt>
   13c4c:	mov	r2, #5
   13c50:	ldr	r1, [pc, #848]	; 13fa8 <__assert_fail@plt+0x2dec>
   13c54:	mov	r0, #0
   13c58:	bl	10f94 <dcgettext@plt>
   13c5c:	movw	r3, #2022	; 0x7e6
   13c60:	ldr	r2, [pc, #836]	; 13fac <__assert_fail@plt+0x2df0>
   13c64:	mov	r1, #1
   13c68:	str	r3, [sp]
   13c6c:	mov	r3, r0
   13c70:	mov	r0, r5
   13c74:	bl	11108 <__fprintf_chk@plt>
   13c78:	mov	r1, r5
   13c7c:	mov	r0, #10
   13c80:	bl	10f88 <fputc_unlocked@plt>
   13c84:	mov	r2, #5
   13c88:	ldr	r1, [pc, #800]	; 13fb0 <__assert_fail@plt+0x2df4>
   13c8c:	mov	r0, #0
   13c90:	bl	10f94 <dcgettext@plt>
   13c94:	mov	r2, r0
   13c98:	mov	r1, #1
   13c9c:	ldr	r3, [pc, #784]	; 13fb4 <__assert_fail@plt+0x2df8>
   13ca0:	mov	r0, r5
   13ca4:	bl	11108 <__fprintf_chk@plt>
   13ca8:	mov	r1, r5
   13cac:	mov	r0, #10
   13cb0:	bl	10f88 <fputc_unlocked@plt>
   13cb4:	cmp	r6, #9
   13cb8:	ldrls	pc, [pc, r6, lsl #2]
   13cbc:	b	13f98 <__assert_fail@plt+0x2ddc>
   13cc0:	ldrdeq	r3, [r1], -r8
   13cc4:	andeq	r3, r1, r0, lsl #26
   13cc8:	andeq	r3, r1, ip, lsr #26
   13ccc:	andeq	r3, r1, r0, ror #26
   13cd0:	muleq	r1, ip, sp
   13cd4:	andeq	r3, r1, r0, ror #27
   13cd8:	andeq	r3, r1, r8, lsr #28
   13cdc:	andeq	r3, r1, r8, ror lr
   13ce0:	ldrdeq	r3, [r1], -r0
   13ce4:	andeq	r3, r1, r0, lsr pc
   13ce8:	mov	r1, #1
   13cec:	str	r3, [sp]
   13cf0:	mov	r3, r2
   13cf4:	ldr	r2, [pc, #700]	; 13fb8 <__assert_fail@plt+0x2dfc>
   13cf8:	bl	11108 <__fprintf_chk@plt>
   13cfc:	b	13c4c <__assert_fail@plt+0x2a90>
   13d00:	mov	r2, #5
   13d04:	ldr	r1, [pc, #688]	; 13fbc <__assert_fail@plt+0x2e00>
   13d08:	mov	r0, #0
   13d0c:	bl	10f94 <dcgettext@plt>
   13d10:	ldr	r3, [r4]
   13d14:	mov	r2, r0
   13d18:	mov	r1, #1
   13d1c:	mov	r0, r5
   13d20:	add	sp, sp, #32
   13d24:	pop	{r4, r5, r6, lr}
   13d28:	b	11108 <__fprintf_chk@plt>
   13d2c:	mov	r2, #5
   13d30:	ldr	r1, [pc, #648]	; 13fc0 <__assert_fail@plt+0x2e04>
   13d34:	mov	r0, #0
   13d38:	bl	10f94 <dcgettext@plt>
   13d3c:	ldr	r3, [r4, #4]
   13d40:	mov	r2, r0
   13d44:	mov	r1, #1
   13d48:	mov	r0, r5
   13d4c:	str	r3, [sp, #48]	; 0x30
   13d50:	ldr	r3, [r4]
   13d54:	add	sp, sp, #32
   13d58:	pop	{r4, r5, r6, lr}
   13d5c:	b	11108 <__fprintf_chk@plt>
   13d60:	mov	r2, #5
   13d64:	ldr	r1, [pc, #600]	; 13fc4 <__assert_fail@plt+0x2e08>
   13d68:	mov	r0, #0
   13d6c:	bl	10f94 <dcgettext@plt>
   13d70:	ldr	r3, [r4, #8]
   13d74:	mov	r2, r0
   13d78:	mov	r1, #1
   13d7c:	mov	r0, r5
   13d80:	str	r3, [sp, #52]	; 0x34
   13d84:	ldr	r3, [r4, #4]
   13d88:	str	r3, [sp, #48]	; 0x30
   13d8c:	ldr	r3, [r4]
   13d90:	add	sp, sp, #32
   13d94:	pop	{r4, r5, r6, lr}
   13d98:	b	11108 <__fprintf_chk@plt>
   13d9c:	mov	r2, #5
   13da0:	ldr	r1, [pc, #544]	; 13fc8 <__assert_fail@plt+0x2e0c>
   13da4:	mov	r0, #0
   13da8:	bl	10f94 <dcgettext@plt>
   13dac:	ldr	r3, [r4, #12]
   13db0:	mov	r2, r0
   13db4:	mov	r1, #1
   13db8:	mov	r0, r5
   13dbc:	str	r3, [sp, #8]
   13dc0:	ldr	r3, [r4, #8]
   13dc4:	str	r3, [sp, #4]
   13dc8:	ldr	r3, [r4, #4]
   13dcc:	str	r3, [sp]
   13dd0:	ldr	r3, [r4]
   13dd4:	bl	11108 <__fprintf_chk@plt>
   13dd8:	add	sp, sp, #32
   13ddc:	pop	{r4, r5, r6, pc}
   13de0:	mov	r2, #5
   13de4:	ldr	r1, [pc, #480]	; 13fcc <__assert_fail@plt+0x2e10>
   13de8:	mov	r0, #0
   13dec:	bl	10f94 <dcgettext@plt>
   13df0:	ldr	r3, [r4, #16]
   13df4:	mov	r2, r0
   13df8:	mov	r1, #1
   13dfc:	mov	r0, r5
   13e00:	str	r3, [sp, #12]
   13e04:	ldr	r3, [r4, #12]
   13e08:	str	r3, [sp, #8]
   13e0c:	ldr	r3, [r4, #8]
   13e10:	str	r3, [sp, #4]
   13e14:	ldr	r3, [r4, #4]
   13e18:	str	r3, [sp]
   13e1c:	ldr	r3, [r4]
   13e20:	bl	11108 <__fprintf_chk@plt>
   13e24:	b	13dd8 <__assert_fail@plt+0x2c1c>
   13e28:	mov	r2, #5
   13e2c:	ldr	r1, [pc, #412]	; 13fd0 <__assert_fail@plt+0x2e14>
   13e30:	mov	r0, #0
   13e34:	bl	10f94 <dcgettext@plt>
   13e38:	ldr	r3, [r4, #20]
   13e3c:	mov	r2, r0
   13e40:	mov	r1, #1
   13e44:	mov	r0, r5
   13e48:	str	r3, [sp, #16]
   13e4c:	ldr	r3, [r4, #16]
   13e50:	str	r3, [sp, #12]
   13e54:	ldr	r3, [r4, #12]
   13e58:	str	r3, [sp, #8]
   13e5c:	ldr	r3, [r4, #8]
   13e60:	str	r3, [sp, #4]
   13e64:	ldr	r3, [r4, #4]
   13e68:	str	r3, [sp]
   13e6c:	ldr	r3, [r4]
   13e70:	bl	11108 <__fprintf_chk@plt>
   13e74:	b	13dd8 <__assert_fail@plt+0x2c1c>
   13e78:	mov	r2, #5
   13e7c:	ldr	r1, [pc, #336]	; 13fd4 <__assert_fail@plt+0x2e18>
   13e80:	mov	r0, #0
   13e84:	bl	10f94 <dcgettext@plt>
   13e88:	ldr	r3, [r4, #24]
   13e8c:	mov	r2, r0
   13e90:	mov	r1, #1
   13e94:	mov	r0, r5
   13e98:	str	r3, [sp, #20]
   13e9c:	ldr	r3, [r4, #20]
   13ea0:	str	r3, [sp, #16]
   13ea4:	ldr	r3, [r4, #16]
   13ea8:	str	r3, [sp, #12]
   13eac:	ldr	r3, [r4, #12]
   13eb0:	str	r3, [sp, #8]
   13eb4:	ldr	r3, [r4, #8]
   13eb8:	str	r3, [sp, #4]
   13ebc:	ldr	r3, [r4, #4]
   13ec0:	str	r3, [sp]
   13ec4:	ldr	r3, [r4]
   13ec8:	bl	11108 <__fprintf_chk@plt>
   13ecc:	b	13dd8 <__assert_fail@plt+0x2c1c>
   13ed0:	mov	r2, #5
   13ed4:	ldr	r1, [pc, #252]	; 13fd8 <__assert_fail@plt+0x2e1c>
   13ed8:	mov	r0, #0
   13edc:	bl	10f94 <dcgettext@plt>
   13ee0:	ldr	r3, [r4, #28]
   13ee4:	mov	r2, r0
   13ee8:	mov	r1, #1
   13eec:	mov	r0, r5
   13ef0:	str	r3, [sp, #24]
   13ef4:	ldr	r3, [r4, #24]
   13ef8:	str	r3, [sp, #20]
   13efc:	ldr	r3, [r4, #20]
   13f00:	str	r3, [sp, #16]
   13f04:	ldr	r3, [r4, #16]
   13f08:	str	r3, [sp, #12]
   13f0c:	ldr	r3, [r4, #12]
   13f10:	str	r3, [sp, #8]
   13f14:	ldr	r3, [r4, #8]
   13f18:	str	r3, [sp, #4]
   13f1c:	ldr	r3, [r4, #4]
   13f20:	str	r3, [sp]
   13f24:	ldr	r3, [r4]
   13f28:	bl	11108 <__fprintf_chk@plt>
   13f2c:	b	13dd8 <__assert_fail@plt+0x2c1c>
   13f30:	ldr	r1, [pc, #164]	; 13fdc <__assert_fail@plt+0x2e20>
   13f34:	mov	r2, #5
   13f38:	mov	r0, #0
   13f3c:	bl	10f94 <dcgettext@plt>
   13f40:	ldr	r3, [r4, #32]
   13f44:	mov	r2, r0
   13f48:	mov	r1, #1
   13f4c:	mov	r0, r5
   13f50:	str	r3, [sp, #28]
   13f54:	ldr	r3, [r4, #28]
   13f58:	str	r3, [sp, #24]
   13f5c:	ldr	r3, [r4, #24]
   13f60:	str	r3, [sp, #20]
   13f64:	ldr	r3, [r4, #20]
   13f68:	str	r3, [sp, #16]
   13f6c:	ldr	r3, [r4, #16]
   13f70:	str	r3, [sp, #12]
   13f74:	ldr	r3, [r4, #12]
   13f78:	str	r3, [sp, #8]
   13f7c:	ldr	r3, [r4, #8]
   13f80:	str	r3, [sp, #4]
   13f84:	ldr	r3, [r4, #4]
   13f88:	str	r3, [sp]
   13f8c:	ldr	r3, [r4]
   13f90:	bl	11108 <__fprintf_chk@plt>
   13f94:	b	13dd8 <__assert_fail@plt+0x2c1c>
   13f98:	mov	r2, #5
   13f9c:	ldr	r1, [pc, #60]	; 13fe0 <__assert_fail@plt+0x2e24>
   13fa0:	b	13f38 <__assert_fail@plt+0x2d7c>
   13fa4:	andeq	r5, r1, r5, asr #19
   13fa8:	ldrdeq	r5, [r1], -r8
   13fac:	andeq	r5, r1, r6, lsr #25
   13fb0:	ldrdeq	r5, [r1], -ip
   13fb4:	andeq	r5, r1, r7, lsl #21
   13fb8:	ldrdeq	r5, [r1], -r1
   13fbc:	andeq	r5, r1, r9, lsr #21
   13fc0:			; <UNDEFINED> instruction: 0x00015ab9
   13fc4:	ldrdeq	r5, [r1], -r0
   13fc8:	andeq	r5, r1, ip, ror #21
   13fcc:	andeq	r5, r1, ip, lsl #22
   13fd0:	andeq	r5, r1, r0, lsr fp
   13fd4:	andeq	r5, r1, r8, asr fp
   13fd8:	andeq	r5, r1, r4, lsl #23
   13fdc:			; <UNDEFINED> instruction: 0x00015bb4
   13fe0:	andeq	r5, r1, r8, ror #23
   13fe4:	push	{r0, r1, r4, lr}
   13fe8:	mov	ip, #0
   13fec:	ldr	lr, [sp, #16]
   13ff0:	ldr	r4, [lr, ip, lsl #2]
   13ff4:	cmp	r4, #0
   13ff8:	bne	14010 <__assert_fail@plt+0x2e54>
   13ffc:	str	lr, [sp]
   14000:	str	ip, [sp, #4]
   14004:	bl	13c1c <__assert_fail@plt+0x2a60>
   14008:	add	sp, sp, #8
   1400c:	pop	{r4, pc}
   14010:	add	ip, ip, #1
   14014:	b	13ff0 <__assert_fail@plt+0x2e34>
   14018:	push	{r4, r5, r6, lr}
   1401c:	sub	sp, sp, #48	; 0x30
   14020:	mov	ip, #0
   14024:	add	lr, sp, #8
   14028:	mov	r5, lr
   1402c:	ldr	r6, [sp, #64]	; 0x40
   14030:	ldr	r4, [r6, ip, lsl #2]
   14034:	cmp	r4, #0
   14038:	str	r4, [lr], #4
   1403c:	beq	1404c <__assert_fail@plt+0x2e90>
   14040:	add	ip, ip, #1
   14044:	cmp	ip, #10
   14048:	bne	14030 <__assert_fail@plt+0x2e74>
   1404c:	stm	sp, {r5, ip}
   14050:	bl	13c1c <__assert_fail@plt+0x2a60>
   14054:	add	sp, sp, #48	; 0x30
   14058:	pop	{r4, r5, r6, pc}
   1405c:	push	{r3}		; (str r3, [sp, #-4]!)
   14060:	push	{r0, r1, r2, r3, lr}
   14064:	add	r3, sp, #24
   14068:	str	r3, [sp]
   1406c:	str	r3, [sp, #12]
   14070:	ldr	r3, [sp, #20]
   14074:	bl	14018 <__assert_fail@plt+0x2e5c>
   14078:	add	sp, sp, #16
   1407c:	pop	{lr}		; (ldr lr, [sp], #4)
   14080:	add	sp, sp, #4
   14084:	bx	lr
   14088:	ldr	r3, [pc, #116]	; 14104 <__assert_fail@plt+0x2f48>
   1408c:	mov	r0, #10
   14090:	push	{r4, lr}
   14094:	ldr	r1, [r3]
   14098:	bl	10f88 <fputc_unlocked@plt>
   1409c:	mov	r2, #5
   140a0:	ldr	r1, [pc, #96]	; 14108 <__assert_fail@plt+0x2f4c>
   140a4:	mov	r0, #0
   140a8:	bl	10f94 <dcgettext@plt>
   140ac:	mov	r1, r0
   140b0:	ldr	r2, [pc, #84]	; 1410c <__assert_fail@plt+0x2f50>
   140b4:	mov	r0, #1
   140b8:	bl	110f0 <__printf_chk@plt>
   140bc:	mov	r2, #5
   140c0:	ldr	r1, [pc, #72]	; 14110 <__assert_fail@plt+0x2f54>
   140c4:	mov	r0, #0
   140c8:	bl	10f94 <dcgettext@plt>
   140cc:	mov	r1, r0
   140d0:	ldr	r3, [pc, #60]	; 14114 <__assert_fail@plt+0x2f58>
   140d4:	mov	r0, #1
   140d8:	ldr	r2, [pc, #56]	; 14118 <__assert_fail@plt+0x2f5c>
   140dc:	bl	110f0 <__printf_chk@plt>
   140e0:	mov	r2, #5
   140e4:	ldr	r1, [pc, #48]	; 1411c <__assert_fail@plt+0x2f60>
   140e8:	mov	r0, #0
   140ec:	bl	10f94 <dcgettext@plt>
   140f0:	mov	r1, r0
   140f4:	ldr	r2, [pc, #36]	; 14120 <__assert_fail@plt+0x2f64>
   140f8:	mov	r0, #1
   140fc:	pop	{r4, lr}
   14100:	b	110f0 <__printf_chk@plt>
   14104:	andeq	r6, r2, r4, ror r1
   14108:	andeq	r5, r1, r4, lsr #24
   1410c:	andeq	r5, r1, r8, lsr ip
   14110:	andeq	r5, r1, lr, asr #24
   14114:	andeq	r5, r1, pc, lsr r5
   14118:	andeq	r5, r1, r7, ror #10
   1411c:	andeq	r5, r1, r2, ror #24
   14120:	andeq	r5, r1, r9, lsl #25
   14124:	push	{r4, lr}
   14128:	bl	14850 <__assert_fail@plt+0x3694>
   1412c:	cmp	r0, #0
   14130:	popne	{r4, pc}
   14134:	bl	143dc <__assert_fail@plt+0x3220>
   14138:	push	{r4, lr}
   1413c:	bl	14850 <__assert_fail@plt+0x3694>
   14140:	cmp	r0, #0
   14144:	popne	{r4, pc}
   14148:	bl	143dc <__assert_fail@plt+0x3220>
   1414c:	b	14124 <__assert_fail@plt+0x2f68>
   14150:	push	{r4, r5, r6, lr}
   14154:	mov	r5, r0
   14158:	mov	r4, r1
   1415c:	bl	1487c <__assert_fail@plt+0x36c0>
   14160:	cmp	r0, #0
   14164:	popne	{r4, r5, r6, pc}
   14168:	adds	r4, r4, #0
   1416c:	movne	r4, #1
   14170:	cmp	r5, #0
   14174:	moveq	r4, #1
   14178:	cmp	r4, #0
   1417c:	popeq	{r4, r5, r6, pc}
   14180:	bl	143dc <__assert_fail@plt+0x3220>
   14184:	push	{r4, lr}
   14188:	bl	14ac4 <__assert_fail@plt+0x3908>
   1418c:	cmp	r0, #0
   14190:	popne	{r4, pc}
   14194:	bl	143dc <__assert_fail@plt+0x3220>
   14198:	push	{r4, r5, r6, lr}
   1419c:	mov	r6, r0
   141a0:	mov	r5, r1
   141a4:	mov	r4, r2
   141a8:	bl	14d3c <__assert_fail@plt+0x3b80>
   141ac:	cmp	r0, #0
   141b0:	popne	{r4, r5, r6, pc}
   141b4:	cmp	r6, #0
   141b8:	beq	141c8 <__assert_fail@plt+0x300c>
   141bc:	cmp	r5, #0
   141c0:	cmpne	r4, #0
   141c4:	popeq	{r4, r5, r6, pc}
   141c8:	bl	143dc <__assert_fail@plt+0x3220>
   141cc:	b	14198 <__assert_fail@plt+0x2fdc>
   141d0:	push	{r4, lr}
   141d4:	bl	14ad4 <__assert_fail@plt+0x3918>
   141d8:	cmp	r0, #0
   141dc:	popne	{r4, pc}
   141e0:	bl	143dc <__assert_fail@plt+0x3220>
   141e4:	mov	r2, r1
   141e8:	mov	r1, r0
   141ec:	mov	r0, #0
   141f0:	b	14198 <__assert_fail@plt+0x2fdc>
   141f4:	mov	r2, r1
   141f8:	mov	r1, r0
   141fc:	mov	r0, #0
   14200:	b	141d0 <__assert_fail@plt+0x3014>
   14204:	cmp	r0, #0
   14208:	push	{r4, r5, r6, lr}
   1420c:	mov	r5, r1
   14210:	ldr	r4, [r1]
   14214:	bne	14240 <__assert_fail@plt+0x3084>
   14218:	cmp	r4, #0
   1421c:	bne	14230 <__assert_fail@plt+0x3074>
   14220:	mov	r4, #64	; 0x40
   14224:	udiv	r4, r4, r2
   14228:	cmp	r2, #64	; 0x40
   1422c:	addhi	r4, r4, #1
   14230:	mov	r1, r4
   14234:	bl	14198 <__assert_fail@plt+0x2fdc>
   14238:	str	r4, [r5]
   1423c:	pop	{r4, r5, r6, pc}
   14240:	lsr	r3, r4, #1
   14244:	add	r3, r3, #1
   14248:	adds	r4, r4, r3
   1424c:	bcc	14230 <__assert_fail@plt+0x3074>
   14250:	bl	143dc <__assert_fail@plt+0x3220>
   14254:	mov	r2, #1
   14258:	b	14204 <__assert_fail@plt+0x3048>
   1425c:	ldr	ip, [r1]
   14260:	push	{r4, r5, r6, r7, r8, lr}
   14264:	mov	r5, r1
   14268:	mvn	r8, r3
   1426c:	lsr	r8, r8, #31
   14270:	ldr	lr, [sp, #24]
   14274:	asr	r1, ip, #1
   14278:	adds	r4, ip, r1
   1427c:	mvnvs	r4, #-2147483648	; 0x80000000
   14280:	cmp	r3, r4
   14284:	movge	r1, #0
   14288:	andlt	r1, r8, #1
   1428c:	cmp	r1, #0
   14290:	movne	r4, r3
   14294:	smull	r6, r7, r4, lr
   14298:	cmp	r7, r6, asr #31
   1429c:	bne	142b4 <__assert_fail@plt+0x30f8>
   142a0:	cmp	r6, #63	; 0x3f
   142a4:	mov	r1, r6
   142a8:	bgt	142c4 <__assert_fail@plt+0x3108>
   142ac:	mov	r1, #64	; 0x40
   142b0:	b	142b8 <__assert_fail@plt+0x30fc>
   142b4:	mvn	r1, #-2147483648	; 0x80000000
   142b8:	sdiv	r4, r1, lr
   142bc:	mls	r6, lr, r4, r1
   142c0:	sub	r1, r1, r6
   142c4:	cmp	r0, #0
   142c8:	sub	r6, r4, ip
   142cc:	streq	r0, [r5]
   142d0:	cmp	r6, r2
   142d4:	bge	14308 <__assert_fail@plt+0x314c>
   142d8:	adds	r4, ip, r2
   142dc:	bvs	14304 <__assert_fail@plt+0x3148>
   142e0:	cmp	r4, r3
   142e4:	movle	r3, #0
   142e8:	andgt	r3, r8, #1
   142ec:	cmp	r3, #0
   142f0:	bne	14304 <__assert_fail@plt+0x3148>
   142f4:	smull	r2, r3, r4, lr
   142f8:	cmp	r3, r2, asr #31
   142fc:	mov	r1, r2
   14300:	beq	14308 <__assert_fail@plt+0x314c>
   14304:	bl	143dc <__assert_fail@plt+0x3220>
   14308:	bl	14150 <__assert_fail@plt+0x2f94>
   1430c:	str	r4, [r5]
   14310:	pop	{r4, r5, r6, r7, r8, pc}
   14314:	push	{r4, lr}
   14318:	bl	147fc <__assert_fail@plt+0x3640>
   1431c:	cmp	r0, #0
   14320:	popne	{r4, pc}
   14324:	bl	143dc <__assert_fail@plt+0x3220>
   14328:	mov	r1, #1
   1432c:	b	14314 <__assert_fail@plt+0x3158>
   14330:	push	{r4, lr}
   14334:	bl	147fc <__assert_fail@plt+0x3640>
   14338:	cmp	r0, #0
   1433c:	popne	{r4, pc}
   14340:	bl	143dc <__assert_fail@plt+0x3220>
   14344:	mov	r1, #1
   14348:	b	14330 <__assert_fail@plt+0x3174>
   1434c:	push	{r4, r5, r6, lr}
   14350:	mov	r4, r1
   14354:	mov	r5, r0
   14358:	mov	r0, r1
   1435c:	bl	14124 <__assert_fail@plt+0x2f68>
   14360:	mov	r2, r4
   14364:	mov	r1, r5
   14368:	pop	{r4, r5, r6, lr}
   1436c:	b	10f64 <memcpy@plt>
   14370:	push	{r4, r5, r6, lr}
   14374:	mov	r4, r1
   14378:	mov	r5, r0
   1437c:	mov	r0, r1
   14380:	bl	14138 <__assert_fail@plt+0x2f7c>
   14384:	mov	r2, r4
   14388:	mov	r1, r5
   1438c:	pop	{r4, r5, r6, lr}
   14390:	b	10f64 <memcpy@plt>
   14394:	push	{r4, r5, r6, lr}
   14398:	mov	r5, r0
   1439c:	add	r0, r1, #1
   143a0:	mov	r4, r1
   143a4:	bl	14138 <__assert_fail@plt+0x2f7c>
   143a8:	mov	r2, #0
   143ac:	mov	r1, r5
   143b0:	strb	r2, [r0, r4]
   143b4:	mov	r2, r4
   143b8:	pop	{r4, r5, r6, lr}
   143bc:	b	10f64 <memcpy@plt>
   143c0:	push	{r4, lr}
   143c4:	mov	r4, r0
   143c8:	bl	1109c <strlen@plt>
   143cc:	add	r1, r0, #1
   143d0:	mov	r0, r4
   143d4:	pop	{r4, lr}
   143d8:	b	1434c <__assert_fail@plt+0x3190>
   143dc:	ldr	r3, [pc, #44]	; 14410 <__assert_fail@plt+0x3254>
   143e0:	mov	r2, #5
   143e4:	mov	r0, #0
   143e8:	push	{r4, lr}
   143ec:	ldr	r1, [pc, #32]	; 14414 <__assert_fail@plt+0x3258>
   143f0:	ldr	r4, [r3]
   143f4:	bl	10f94 <dcgettext@plt>
   143f8:	mov	r3, r0
   143fc:	ldr	r2, [pc, #20]	; 14418 <__assert_fail@plt+0x325c>
   14400:	mov	r1, #0
   14404:	mov	r0, r4
   14408:	bl	11024 <error@plt>
   1440c:	bl	1118c <abort@plt>
   14410:	andeq	r6, r2, ip, lsl r1
   14414:	ldrdeq	r5, [r1], -r5	; <UNPREDICTABLE>
   14418:	muleq	r1, pc, r8	; <UNPREDICTABLE>
   1441c:	push	{r4, lr}
   14420:	bl	14ba4 <__assert_fail@plt+0x39e8>
   14424:	cmn	r0, #1
   14428:	mov	r4, r0
   1442c:	bne	14444 <__assert_fail@plt+0x3288>
   14430:	bl	110b4 <__errno_location@plt>
   14434:	ldr	r3, [r0]
   14438:	cmp	r3, #12
   1443c:	bne	14444 <__assert_fail@plt+0x3288>
   14440:	bl	143dc <__assert_fail@plt+0x3220>
   14444:	mov	r0, r4
   14448:	pop	{r4, pc}
   1444c:	subs	r2, r2, #1
   14450:	mov	r3, #0
   14454:	bcs	14460 <__assert_fail@plt+0x32a4>
   14458:	mov	r0, r3
   1445c:	bx	lr
   14460:	push	{r4, r5, lr}
   14464:	sub	r2, r2, #1
   14468:	ldr	r4, [r0]
   1446c:	umull	r4, r5, r1, r4
   14470:	adds	ip, r5, #0
   14474:	movne	ip, #1
   14478:	cmp	ip, #0
   1447c:	orr	r3, r3, ip
   14480:	mvnne	r4, #0
   14484:	cmn	r2, #1
   14488:	str	r4, [r0]
   1448c:	bne	14464 <__assert_fail@plt+0x32a8>
   14490:	mov	r0, r3
   14494:	pop	{r4, r5, pc}
   14498:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1449c:	cmp	r2, #36	; 0x24
   144a0:	ldr	r6, [sp, #48]	; 0x30
   144a4:	bls	144bc <__assert_fail@plt+0x3300>
   144a8:	ldr	r3, [pc, #832]	; 147f0 <__assert_fail@plt+0x3634>
   144ac:	mov	r2, #85	; 0x55
   144b0:	ldr	r1, [pc, #828]	; 147f4 <__assert_fail@plt+0x3638>
   144b4:	ldr	r0, [pc, #828]	; 147f8 <__assert_fail@plt+0x363c>
   144b8:	bl	111bc <__assert_fail@plt>
   144bc:	cmp	r1, #0
   144c0:	mov	r7, r1
   144c4:	mov	r4, r0
   144c8:	mov	fp, r2
   144cc:	mov	r8, r3
   144d0:	moveq	r7, sp
   144d4:	bl	110b4 <__errno_location@plt>
   144d8:	mov	r3, #0
   144dc:	mov	sl, r0
   144e0:	str	r3, [r0]
   144e4:	bl	11078 <__ctype_b_loc@plt>
   144e8:	ldrb	r9, [r4]
   144ec:	mov	r3, r4
   144f0:	ldr	r1, [r0]
   144f4:	lsl	r2, r9, #1
   144f8:	ldrh	r5, [r1, r2]
   144fc:	ands	r5, r5, #8192	; 0x2000
   14500:	bne	1451c <__assert_fail@plt+0x3360>
   14504:	cmp	r9, #45	; 0x2d
   14508:	bne	14524 <__assert_fail@plt+0x3368>
   1450c:	mov	r5, #4
   14510:	mov	r0, r5
   14514:	add	sp, sp, #12
   14518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1451c:	ldrb	r9, [r3, #1]!
   14520:	b	144f4 <__assert_fail@plt+0x3338>
   14524:	mov	r2, fp
   14528:	mov	r1, r7
   1452c:	mov	r0, r4
   14530:	bl	11090 <strtoul@plt>
   14534:	ldr	r9, [r7]
   14538:	str	r0, [sp, #4]
   1453c:	cmp	r9, r4
   14540:	bne	145a0 <__assert_fail@plt+0x33e4>
   14544:	cmp	r6, #0
   14548:	beq	1450c <__assert_fail@plt+0x3350>
   1454c:	ldrb	r1, [r4]
   14550:	cmp	r1, #0
   14554:	beq	1450c <__assert_fail@plt+0x3350>
   14558:	mov	r0, r6
   1455c:	bl	110a8 <strchr@plt>
   14560:	cmp	r0, #0
   14564:	movne	r3, #1
   14568:	strne	r3, [sp, #4]
   1456c:	beq	1450c <__assert_fail@plt+0x3350>
   14570:	ldrb	r4, [r9]
   14574:	cmp	r4, #0
   14578:	beq	147a8 <__assert_fail@plt+0x35ec>
   1457c:	mov	r1, r4
   14580:	mov	r0, r6
   14584:	bl	110a8 <strchr@plt>
   14588:	cmp	r0, #0
   1458c:	bne	145c8 <__assert_fail@plt+0x340c>
   14590:	ldr	r3, [sp, #4]
   14594:	orr	r5, r5, #2
   14598:	str	r3, [r8]
   1459c:	b	14510 <__assert_fail@plt+0x3354>
   145a0:	ldr	r5, [sl]
   145a4:	cmp	r5, #0
   145a8:	beq	145b8 <__assert_fail@plt+0x33fc>
   145ac:	cmp	r5, #34	; 0x22
   145b0:	bne	1450c <__assert_fail@plt+0x3350>
   145b4:	mov	r5, #1
   145b8:	cmp	r6, #0
   145bc:	streq	r0, [r8]
   145c0:	bne	14570 <__assert_fail@plt+0x33b4>
   145c4:	b	14510 <__assert_fail@plt+0x3354>
   145c8:	cmp	r4, #84	; 0x54
   145cc:	beq	14620 <__assert_fail@plt+0x3464>
   145d0:	bhi	14608 <__assert_fail@plt+0x344c>
   145d4:	cmp	r4, #75	; 0x4b
   145d8:	beq	14620 <__assert_fail@plt+0x3464>
   145dc:	bhi	145f8 <__assert_fail@plt+0x343c>
   145e0:	cmp	r4, #69	; 0x45
   145e4:	beq	14620 <__assert_fail@plt+0x3464>
   145e8:	cmp	r4, #71	; 0x47
   145ec:	beq	14620 <__assert_fail@plt+0x3464>
   145f0:	mov	r6, #1
   145f4:	b	146cc <__assert_fail@plt+0x3510>
   145f8:	cmp	r4, #77	; 0x4d
   145fc:	beq	14620 <__assert_fail@plt+0x3464>
   14600:	cmp	r4, #80	; 0x50
   14604:	b	145ec <__assert_fail@plt+0x3430>
   14608:	cmp	r4, #103	; 0x67
   1460c:	beq	14620 <__assert_fail@plt+0x3464>
   14610:	bhi	146a4 <__assert_fail@plt+0x34e8>
   14614:	sub	r3, r4, #89	; 0x59
   14618:	cmp	r3, #1
   1461c:	bhi	145f0 <__assert_fail@plt+0x3434>
   14620:	mov	r1, #48	; 0x30
   14624:	mov	r0, r6
   14628:	bl	110a8 <strchr@plt>
   1462c:	cmp	r0, #0
   14630:	beq	145f0 <__assert_fail@plt+0x3434>
   14634:	ldrb	r3, [r9, #1]
   14638:	cmp	r3, #68	; 0x44
   1463c:	moveq	r6, #2
   14640:	moveq	r1, #1000	; 0x3e8
   14644:	beq	14664 <__assert_fail@plt+0x34a8>
   14648:	cmp	r3, #105	; 0x69
   1464c:	beq	146bc <__assert_fail@plt+0x3500>
   14650:	cmp	r3, #66	; 0x42
   14654:	moveq	r6, #2
   14658:	movne	r6, #1
   1465c:	moveq	r1, #1000	; 0x3e8
   14660:	movne	r1, #1024	; 0x400
   14664:	cmp	r4, #89	; 0x59
   14668:	beq	147e0 <__assert_fail@plt+0x3624>
   1466c:	bhi	146f4 <__assert_fail@plt+0x3538>
   14670:	cmp	r4, #75	; 0x4b
   14674:	beq	14734 <__assert_fail@plt+0x3578>
   14678:	bhi	146d4 <__assert_fail@plt+0x3518>
   1467c:	cmp	r4, #69	; 0x45
   14680:	beq	147b4 <__assert_fail@plt+0x35f8>
   14684:	cmp	r4, #71	; 0x47
   14688:	beq	147c0 <__assert_fail@plt+0x3604>
   1468c:	cmp	r4, #66	; 0x42
   14690:	bne	14590 <__assert_fail@plt+0x33d4>
   14694:	ldr	r3, [sp, #4]
   14698:	lsl	r2, r3, #10
   1469c:	lsrs	r3, r3, #22
   146a0:	b	14770 <__assert_fail@plt+0x35b4>
   146a4:	cmp	r4, #109	; 0x6d
   146a8:	beq	14620 <__assert_fail@plt+0x3464>
   146ac:	cmp	r4, #116	; 0x74
   146b0:	beq	14620 <__assert_fail@plt+0x3464>
   146b4:	cmp	r4, #107	; 0x6b
   146b8:	b	145ec <__assert_fail@plt+0x3430>
   146bc:	ldrb	r3, [r9, #2]
   146c0:	cmp	r3, #66	; 0x42
   146c4:	movne	r6, #1
   146c8:	moveq	r6, #3
   146cc:	mov	r1, #1024	; 0x400
   146d0:	b	14664 <__assert_fail@plt+0x34a8>
   146d4:	cmp	r4, #80	; 0x50
   146d8:	beq	147c8 <__assert_fail@plt+0x360c>
   146dc:	cmp	r4, #84	; 0x54
   146e0:	beq	147d0 <__assert_fail@plt+0x3614>
   146e4:	cmp	r4, #77	; 0x4d
   146e8:	bne	14590 <__assert_fail@plt+0x33d4>
   146ec:	mov	r2, #2
   146f0:	b	147b8 <__assert_fail@plt+0x35fc>
   146f4:	cmp	r4, #103	; 0x67
   146f8:	beq	147c0 <__assert_fail@plt+0x3604>
   146fc:	bhi	14720 <__assert_fail@plt+0x3564>
   14700:	cmp	r4, #98	; 0x62
   14704:	beq	14764 <__assert_fail@plt+0x35a8>
   14708:	cmp	r4, #99	; 0x63
   1470c:	beq	147e8 <__assert_fail@plt+0x362c>
   14710:	cmp	r4, #90	; 0x5a
   14714:	bne	14590 <__assert_fail@plt+0x33d4>
   14718:	mov	r2, #7
   1471c:	b	147b8 <__assert_fail@plt+0x35fc>
   14720:	cmp	r4, #109	; 0x6d
   14724:	beq	146ec <__assert_fail@plt+0x3530>
   14728:	bhi	1473c <__assert_fail@plt+0x3580>
   1472c:	cmp	r4, #107	; 0x6b
   14730:	bne	14590 <__assert_fail@plt+0x33d4>
   14734:	mov	r2, #1
   14738:	b	147b8 <__assert_fail@plt+0x35fc>
   1473c:	cmp	r4, #116	; 0x74
   14740:	beq	147d0 <__assert_fail@plt+0x3614>
   14744:	cmp	r4, #119	; 0x77
   14748:	bne	14590 <__assert_fail@plt+0x33d4>
   1474c:	ldr	r0, [sp, #4]
   14750:	lsl	r3, r0, #1
   14754:	lsrs	r0, r0, #31
   14758:	streq	r3, [sp, #4]
   1475c:	beq	1478c <__assert_fail@plt+0x35d0>
   14760:	b	14780 <__assert_fail@plt+0x35c4>
   14764:	ldr	r3, [sp, #4]
   14768:	lsl	r2, r3, #9
   1476c:	lsrs	r3, r3, #23
   14770:	movne	r0, #1
   14774:	moveq	r0, #0
   14778:	streq	r2, [sp, #4]
   1477c:	beq	1478c <__assert_fail@plt+0x35d0>
   14780:	mvn	r3, #0
   14784:	mov	r0, #1
   14788:	str	r3, [sp, #4]
   1478c:	ldr	r3, [r7]
   14790:	orr	r5, r5, r0
   14794:	add	r2, r3, r6
   14798:	str	r2, [r7]
   1479c:	ldrb	r3, [r3, r6]
   147a0:	cmp	r3, #0
   147a4:	orrne	r5, r5, #2
   147a8:	ldr	r3, [sp, #4]
   147ac:	str	r3, [r8]
   147b0:	b	14510 <__assert_fail@plt+0x3354>
   147b4:	mov	r2, #6
   147b8:	add	r0, sp, #4
   147bc:	b	147d8 <__assert_fail@plt+0x361c>
   147c0:	mov	r2, #3
   147c4:	b	147b8 <__assert_fail@plt+0x35fc>
   147c8:	mov	r2, #5
   147cc:	b	147b8 <__assert_fail@plt+0x35fc>
   147d0:	mov	r2, #4
   147d4:	add	r0, sp, r2
   147d8:	bl	1444c <__assert_fail@plt+0x3290>
   147dc:	b	1478c <__assert_fail@plt+0x35d0>
   147e0:	mov	r2, #8
   147e4:	b	147b8 <__assert_fail@plt+0x35fc>
   147e8:	mov	r0, #0
   147ec:	b	1478c <__assert_fail@plt+0x35d0>
   147f0:	andeq	r5, r1, r6, ror #25
   147f4:	andeq	r5, r1, pc, ror #25
   147f8:	strdeq	r5, [r1], -sp
   147fc:	cmp	r1, #0
   14800:	cmpne	r0, #0
   14804:	beq	1483c <__assert_fail@plt+0x3680>
   14808:	push	{r4, r5, r6, lr}
   1480c:	umull	r4, r5, r0, r1
   14810:	adds	r3, r5, #0
   14814:	movne	r3, #1
   14818:	cmp	r4, #0
   1481c:	blt	14828 <__assert_fail@plt+0x366c>
   14820:	cmp	r3, #0
   14824:	beq	14848 <__assert_fail@plt+0x368c>
   14828:	bl	110b4 <__errno_location@plt>
   1482c:	mov	r3, #12
   14830:	str	r3, [r0]
   14834:	mov	r0, #0
   14838:	pop	{r4, r5, r6, pc}
   1483c:	mov	r1, #1
   14840:	mov	r0, r1
   14844:	b	10ed4 <calloc@plt>
   14848:	pop	{r4, r5, r6, lr}
   1484c:	b	14844 <__assert_fail@plt+0x3688>
   14850:	cmp	r0, #0
   14854:	beq	14874 <__assert_fail@plt+0x36b8>
   14858:	bge	14878 <__assert_fail@plt+0x36bc>
   1485c:	push	{r4, lr}
   14860:	bl	110b4 <__errno_location@plt>
   14864:	mov	r3, #12
   14868:	str	r3, [r0]
   1486c:	mov	r0, #0
   14870:	pop	{r4, pc}
   14874:	mov	r0, #1
   14878:	b	1103c <malloc@plt>
   1487c:	cmp	r0, #0
   14880:	bne	1488c <__assert_fail@plt+0x36d0>
   14884:	mov	r0, r1
   14888:	b	14850 <__assert_fail@plt+0x3694>
   1488c:	cmp	r1, #0
   14890:	push	{r4, lr}
   14894:	bne	148a4 <__assert_fail@plt+0x36e8>
   14898:	bl	1221c <__assert_fail@plt+0x1060>
   1489c:	mov	r0, #0
   148a0:	pop	{r4, pc}
   148a4:	blt	148b0 <__assert_fail@plt+0x36f4>
   148a8:	pop	{r4, lr}
   148ac:	b	10fa0 <realloc@plt>
   148b0:	bl	110b4 <__errno_location@plt>
   148b4:	mov	r3, #12
   148b8:	str	r3, [r0]
   148bc:	b	1489c <__assert_fail@plt+0x36e0>
   148c0:	push	{r4, r5, r6, lr}
   148c4:	mov	r4, r0
   148c8:	bl	11000 <__fpending@plt>
   148cc:	mov	r5, r0
   148d0:	mov	r0, r4
   148d4:	bl	1100c <ferror_unlocked@plt>
   148d8:	mov	r6, r0
   148dc:	mov	r0, r4
   148e0:	bl	14930 <__assert_fail@plt+0x3774>
   148e4:	cmp	r6, #0
   148e8:	mov	r4, r0
   148ec:	bne	14918 <__assert_fail@plt+0x375c>
   148f0:	cmp	r0, #0
   148f4:	beq	14910 <__assert_fail@plt+0x3754>
   148f8:	cmp	r5, #0
   148fc:	bne	14928 <__assert_fail@plt+0x376c>
   14900:	bl	110b4 <__errno_location@plt>
   14904:	ldr	r4, [r0]
   14908:	subs	r4, r4, #9
   1490c:	mvnne	r4, #0
   14910:	mov	r0, r4
   14914:	pop	{r4, r5, r6, pc}
   14918:	cmp	r0, #0
   1491c:	bne	14928 <__assert_fail@plt+0x376c>
   14920:	bl	110b4 <__errno_location@plt>
   14924:	str	r4, [r0]
   14928:	mvn	r4, #0
   1492c:	b	14910 <__assert_fail@plt+0x3754>
   14930:	push	{r0, r1, r2, r4, r5, lr}
   14934:	mov	r4, r0
   14938:	bl	110fc <fileno@plt>
   1493c:	cmp	r0, #0
   14940:	mov	r0, r4
   14944:	bge	14954 <__assert_fail@plt+0x3798>
   14948:	add	sp, sp, #12
   1494c:	pop	{r4, r5, lr}
   14950:	b	11114 <fclose@plt>
   14954:	bl	11054 <__freading@plt>
   14958:	cmp	r0, #0
   1495c:	bne	14998 <__assert_fail@plt+0x37dc>
   14960:	mov	r0, r4
   14964:	bl	149d8 <__assert_fail@plt+0x381c>
   14968:	cmp	r0, #0
   1496c:	bne	149cc <__assert_fail@plt+0x3810>
   14970:	mov	r5, #0
   14974:	mov	r0, r4
   14978:	bl	11114 <fclose@plt>
   1497c:	cmp	r5, #0
   14980:	beq	14990 <__assert_fail@plt+0x37d4>
   14984:	bl	110b4 <__errno_location@plt>
   14988:	str	r5, [r0]
   1498c:	mvn	r0, #0
   14990:	add	sp, sp, #12
   14994:	pop	{r4, r5, pc}
   14998:	mov	r0, r4
   1499c:	bl	110fc <fileno@plt>
   149a0:	mov	r3, #1
   149a4:	mov	r2, #0
   149a8:	str	r3, [sp]
   149ac:	mov	r3, #0
   149b0:	bl	10fdc <lseek64@plt>
   149b4:	mvn	r3, #0
   149b8:	mvn	r2, #0
   149bc:	cmp	r1, r3
   149c0:	cmpeq	r0, r2
   149c4:	bne	14960 <__assert_fail@plt+0x37a4>
   149c8:	b	14970 <__assert_fail@plt+0x37b4>
   149cc:	bl	110b4 <__errno_location@plt>
   149d0:	ldr	r5, [r0]
   149d4:	b	14974 <__assert_fail@plt+0x37b8>
   149d8:	push	{r0, r1, r4, lr}
   149dc:	subs	r4, r0, #0
   149e0:	bne	149f4 <__assert_fail@plt+0x3838>
   149e4:	mov	r0, r4
   149e8:	add	sp, sp, #8
   149ec:	pop	{r4, lr}
   149f0:	b	10f34 <fflush@plt>
   149f4:	bl	11054 <__freading@plt>
   149f8:	cmp	r0, #0
   149fc:	beq	149e4 <__assert_fail@plt+0x3828>
   14a00:	ldr	r3, [r4]
   14a04:	tst	r3, #256	; 0x100
   14a08:	beq	149e4 <__assert_fail@plt+0x3828>
   14a0c:	mov	r3, #1
   14a10:	mov	r2, #0
   14a14:	mov	r0, r4
   14a18:	str	r3, [sp]
   14a1c:	mov	r3, #0
   14a20:	bl	14a28 <__assert_fail@plt+0x386c>
   14a24:	b	149e4 <__assert_fail@plt+0x3828>
   14a28:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14a2c:	mov	r4, r0
   14a30:	ldmib	r0, {ip, lr}
   14a34:	ldr	r8, [sp, #32]
   14a38:	cmp	lr, ip
   14a3c:	bne	14aac <__assert_fail@plt+0x38f0>
   14a40:	ldr	ip, [r0, #16]
   14a44:	ldr	lr, [r0, #20]
   14a48:	cmp	lr, ip
   14a4c:	bne	14aac <__assert_fail@plt+0x38f0>
   14a50:	ldr	r5, [r0, #36]	; 0x24
   14a54:	cmp	r5, #0
   14a58:	bne	14aac <__assert_fail@plt+0x38f0>
   14a5c:	mov	r6, r2
   14a60:	mov	r7, r3
   14a64:	bl	110fc <fileno@plt>
   14a68:	mov	r2, r6
   14a6c:	mov	r3, r7
   14a70:	str	r8, [sp]
   14a74:	bl	10fdc <lseek64@plt>
   14a78:	mvn	r3, #0
   14a7c:	mvn	r2, #0
   14a80:	cmp	r1, r3
   14a84:	cmpeq	r0, r2
   14a88:	mvneq	r0, #0
   14a8c:	beq	14aa4 <__assert_fail@plt+0x38e8>
   14a90:	ldr	r3, [r4]
   14a94:	strd	r0, [r4, #80]	; 0x50
   14a98:	mov	r0, r5
   14a9c:	bic	r3, r3, #16
   14aa0:	str	r3, [r4]
   14aa4:	add	sp, sp, #8
   14aa8:	pop	{r4, r5, r6, r7, r8, pc}
   14aac:	mov	r0, r4
   14ab0:	str	r8, [sp, #32]
   14ab4:	add	sp, sp, #8
   14ab8:	pop	{r4, r5, r6, r7, r8, lr}
   14abc:	b	11120 <fseeko64@plt>
   14ac0:	b	14850 <__assert_fail@plt+0x3694>
   14ac4:	cmp	r1, #0
   14ac8:	orreq	r1, r1, #1
   14acc:	b	1487c <__assert_fail@plt+0x36c0>
   14ad0:	b	147fc <__assert_fail@plt+0x3640>
   14ad4:	cmp	r2, #0
   14ad8:	cmpne	r1, #0
   14adc:	moveq	r2, #1
   14ae0:	moveq	r1, r2
   14ae4:	b	14d3c <__assert_fail@plt+0x3b80>
   14ae8:	push	{r4, lr}
   14aec:	mov	r0, #14
   14af0:	bl	11150 <nl_langinfo@plt>
   14af4:	cmp	r0, #0
   14af8:	beq	14b10 <__assert_fail@plt+0x3954>
   14afc:	ldrb	r2, [r0]
   14b00:	ldr	r3, [pc, #16]	; 14b18 <__assert_fail@plt+0x395c>
   14b04:	cmp	r2, #0
   14b08:	moveq	r0, r3
   14b0c:	pop	{r4, pc}
   14b10:	ldr	r0, [pc]	; 14b18 <__assert_fail@plt+0x395c>
   14b14:	pop	{r4, pc}
   14b18:	andeq	r5, r1, r3, lsr #26
   14b1c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14b20:	subs	r5, r0, #0
   14b24:	mov	r7, r2
   14b28:	addeq	r5, sp, #4
   14b2c:	mov	r6, r1
   14b30:	mov	r0, r5
   14b34:	bl	11018 <mbrtowc@plt>
   14b38:	cmp	r7, #0
   14b3c:	cmnne	r0, #3
   14b40:	mov	r4, r0
   14b44:	bls	14b60 <__assert_fail@plt+0x39a4>
   14b48:	mov	r0, #0
   14b4c:	bl	14d68 <__assert_fail@plt+0x3bac>
   14b50:	cmp	r0, #0
   14b54:	ldrbeq	r3, [r6]
   14b58:	moveq	r4, #1
   14b5c:	streq	r3, [r5]
   14b60:	mov	r0, r4
   14b64:	add	sp, sp, #12
   14b68:	pop	{r4, r5, r6, r7, pc}
   14b6c:	lsrs	r3, r1, #30
   14b70:	movne	r3, #1
   14b74:	moveq	r3, #0
   14b78:	lsls	r1, r1, #2
   14b7c:	bmi	14b8c <__assert_fail@plt+0x39d0>
   14b80:	cmp	r3, #0
   14b84:	bne	14b8c <__assert_fail@plt+0x39d0>
   14b88:	b	1487c <__assert_fail@plt+0x36c0>
   14b8c:	push	{r4, lr}
   14b90:	bl	110b4 <__errno_location@plt>
   14b94:	mov	r3, #12
   14b98:	str	r3, [r0]
   14b9c:	mov	r0, #0
   14ba0:	pop	{r4, pc}
   14ba4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14ba8:	subs	r7, r0, #0
   14bac:	mov	r5, r1
   14bb0:	mov	r6, r2
   14bb4:	beq	14c44 <__assert_fail@plt+0x3a88>
   14bb8:	mov	r1, #10
   14bbc:	mov	r0, #0
   14bc0:	str	r1, [sp, #4]
   14bc4:	bl	14b6c <__assert_fail@plt+0x39b0>
   14bc8:	subs	r4, r0, #0
   14bcc:	bne	14bdc <__assert_fail@plt+0x3a20>
   14bd0:	mvn	r0, #0
   14bd4:	add	sp, sp, #12
   14bd8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14bdc:	add	r3, sp, #4
   14be0:	mov	r2, r4
   14be4:	ldr	r9, [sp, #4]
   14be8:	mov	r1, r5
   14bec:	mov	r0, r7
   14bf0:	bl	110d8 <getgrouplist@plt>
   14bf4:	subs	r8, r0, #0
   14bf8:	bge	14c0c <__assert_fail@plt+0x3a50>
   14bfc:	ldr	r3, [sp, #4]
   14c00:	cmp	r3, r9
   14c04:	lsleq	r3, r3, #1
   14c08:	streq	r3, [sp, #4]
   14c0c:	mov	r0, r4
   14c10:	ldr	r1, [sp, #4]
   14c14:	bl	14b6c <__assert_fail@plt+0x39b0>
   14c18:	cmp	r0, #0
   14c1c:	bne	14c2c <__assert_fail@plt+0x3a70>
   14c20:	mov	r0, r4
   14c24:	bl	1221c <__assert_fail@plt+0x1060>
   14c28:	b	14bd0 <__assert_fail@plt+0x3a14>
   14c2c:	cmp	r8, #0
   14c30:	mov	r4, r0
   14c34:	blt	14bdc <__assert_fail@plt+0x3a20>
   14c38:	str	r4, [r6]
   14c3c:	ldr	r0, [sp, #4]
   14c40:	b	14bd4 <__assert_fail@plt+0x3a18>
   14c44:	mov	r1, r7
   14c48:	bl	1115c <getgroups@plt>
   14c4c:	cmp	r0, #0
   14c50:	str	r0, [sp, #4]
   14c54:	bge	14c90 <__assert_fail@plt+0x3ad4>
   14c58:	bl	110b4 <__errno_location@plt>
   14c5c:	ldr	r3, [r0]
   14c60:	cmp	r3, #38	; 0x26
   14c64:	bne	14bd0 <__assert_fail@plt+0x3a14>
   14c68:	mov	r1, #1
   14c6c:	mov	r0, r7
   14c70:	bl	14b6c <__assert_fail@plt+0x39b0>
   14c74:	cmp	r0, #0
   14c78:	beq	14bd0 <__assert_fail@plt+0x3a14>
   14c7c:	str	r0, [r6]
   14c80:	str	r5, [r0]
   14c84:	adds	r0, r5, #1
   14c88:	movne	r0, #1
   14c8c:	b	14bd4 <__assert_fail@plt+0x3a18>
   14c90:	adds	r7, r5, #1
   14c94:	movne	r7, #1
   14c98:	cmp	r0, #0
   14c9c:	movne	r3, r7
   14ca0:	moveq	r3, #1
   14ca4:	cmp	r3, #0
   14ca8:	addne	r0, r0, #1
   14cac:	strne	r0, [sp, #4]
   14cb0:	mov	r0, #0
   14cb4:	ldr	r1, [sp, #4]
   14cb8:	bl	14b6c <__assert_fail@plt+0x39b0>
   14cbc:	subs	r4, r0, #0
   14cc0:	beq	14bd0 <__assert_fail@plt+0x3a14>
   14cc4:	ldr	r0, [sp, #4]
   14cc8:	cmn	r5, #1
   14ccc:	movne	r1, #4
   14cd0:	moveq	r1, #0
   14cd4:	add	r1, r4, r1
   14cd8:	sub	r0, r0, r7
   14cdc:	bl	1115c <getgroups@plt>
   14ce0:	cmp	r0, #0
   14ce4:	blt	14c20 <__assert_fail@plt+0x3a64>
   14ce8:	cmn	r5, #1
   14cec:	addne	r0, r0, #1
   14cf0:	strne	r5, [r4]
   14cf4:	cmp	r0, #1
   14cf8:	addgt	r1, r4, r0, lsl #2
   14cfc:	addgt	r3, r4, #4
   14d00:	ldrgt	ip, [r4]
   14d04:	str	r4, [r6]
   14d08:	ble	14bd4 <__assert_fail@plt+0x3a18>
   14d0c:	cmp	r1, r3
   14d10:	bls	14bd4 <__assert_fail@plt+0x3a18>
   14d14:	ldr	r2, [r3], #4
   14d18:	cmp	r2, ip
   14d1c:	beq	14d34 <__assert_fail@plt+0x3b78>
   14d20:	ldr	lr, [r4]
   14d24:	cmp	r2, lr
   14d28:	strne	r2, [r4, #4]
   14d2c:	addne	r4, r4, #4
   14d30:	bne	14d0c <__assert_fail@plt+0x3b50>
   14d34:	sub	r0, r0, #1
   14d38:	b	14d0c <__assert_fail@plt+0x3b50>
   14d3c:	umull	r2, r3, r1, r2
   14d40:	cmp	r3, #0
   14d44:	bne	14d50 <__assert_fail@plt+0x3b94>
   14d48:	mov	r1, r2
   14d4c:	b	1487c <__assert_fail@plt+0x36c0>
   14d50:	push	{r4, lr}
   14d54:	bl	110b4 <__errno_location@plt>
   14d58:	mov	r3, #12
   14d5c:	str	r3, [r0]
   14d60:	mov	r0, #0
   14d64:	pop	{r4, pc}
   14d68:	push	{lr}		; (str lr, [sp, #-4]!)
   14d6c:	sub	sp, sp, #268	; 0x10c
   14d70:	movw	r2, #257	; 0x101
   14d74:	add	r1, sp, #4
   14d78:	bl	14dc4 <__assert_fail@plt+0x3c08>
   14d7c:	cmp	r0, #0
   14d80:	movne	r0, #0
   14d84:	bne	14db4 <__assert_fail@plt+0x3bf8>
   14d88:	ldr	r1, [pc, #44]	; 14dbc <__assert_fail@plt+0x3c00>
   14d8c:	add	r0, sp, #4
   14d90:	bl	10f1c <strcmp@plt>
   14d94:	cmp	r0, #0
   14d98:	beq	14db0 <__assert_fail@plt+0x3bf4>
   14d9c:	ldr	r1, [pc, #28]	; 14dc0 <__assert_fail@plt+0x3c04>
   14da0:	add	r0, sp, #4
   14da4:	bl	10f1c <strcmp@plt>
   14da8:	adds	r0, r0, #0
   14dac:	movne	r0, #1
   14db0:	and	r0, r0, #1
   14db4:	add	sp, sp, #268	; 0x10c
   14db8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dbc:	andeq	r5, r1, r9, lsr #26
   14dc0:	andeq	r5, r1, fp, lsr #26
   14dc4:	push	{r4, r5, r6, lr}
   14dc8:	mov	r5, r1
   14dcc:	mov	r1, #0
   14dd0:	mov	r4, r2
   14dd4:	bl	1112c <setlocale@plt>
   14dd8:	subs	r6, r0, #0
   14ddc:	bne	14df0 <__assert_fail@plt+0x3c34>
   14de0:	cmp	r4, #0
   14de4:	mov	r0, #22
   14de8:	strbne	r6, [r5]
   14dec:	pop	{r4, r5, r6, pc}
   14df0:	bl	1109c <strlen@plt>
   14df4:	cmp	r4, r0
   14df8:	bls	14e14 <__assert_fail@plt+0x3c58>
   14dfc:	add	r2, r0, #1
   14e00:	mov	r1, r6
   14e04:	mov	r0, r5
   14e08:	bl	10f64 <memcpy@plt>
   14e0c:	mov	r0, #0
   14e10:	pop	{r4, r5, r6, pc}
   14e14:	cmp	r4, #0
   14e18:	beq	14e38 <__assert_fail@plt+0x3c7c>
   14e1c:	sub	r4, r4, #1
   14e20:	mov	r1, r6
   14e24:	mov	r2, r4
   14e28:	mov	r0, r5
   14e2c:	bl	10f64 <memcpy@plt>
   14e30:	mov	r3, #0
   14e34:	strb	r3, [r5, r4]
   14e38:	mov	r0, #34	; 0x22
   14e3c:	pop	{r4, r5, r6, pc}
   14e40:	mov	r1, #0
   14e44:	b	1112c <setlocale@plt>
   14e48:	cmp	r3, #0
   14e4c:	cmpeq	r2, #0
   14e50:	bne	14e68 <__assert_fail@plt+0x3cac>
   14e54:	cmp	r1, #0
   14e58:	cmpeq	r0, #0
   14e5c:	mvnne	r1, #0
   14e60:	mvnne	r0, #0
   14e64:	b	14e84 <__assert_fail@plt+0x3cc8>
   14e68:	sub	sp, sp, #8
   14e6c:	push	{sp, lr}
   14e70:	bl	14e94 <__assert_fail@plt+0x3cd8>
   14e74:	ldr	lr, [sp, #4]
   14e78:	add	sp, sp, #8
   14e7c:	pop	{r2, r3}
   14e80:	bx	lr
   14e84:	push	{r1, lr}
   14e88:	mov	r0, #8
   14e8c:	bl	10ef8 <raise@plt>
   14e90:	pop	{r1, pc}
   14e94:	cmp	r1, r3
   14e98:	cmpeq	r0, r2
   14e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ea0:	mov	r4, r0
   14ea4:	movcc	r0, #0
   14ea8:	mov	r5, r1
   14eac:	ldr	lr, [sp, #36]	; 0x24
   14eb0:	movcc	r1, r0
   14eb4:	bcc	14fb0 <__assert_fail@plt+0x3df4>
   14eb8:	cmp	r3, #0
   14ebc:	clzeq	ip, r2
   14ec0:	clzne	ip, r3
   14ec4:	addeq	ip, ip, #32
   14ec8:	cmp	r5, #0
   14ecc:	clzeq	r1, r4
   14ed0:	addeq	r1, r1, #32
   14ed4:	clzne	r1, r5
   14ed8:	sub	ip, ip, r1
   14edc:	sub	sl, ip, #32
   14ee0:	lsl	r9, r3, ip
   14ee4:	rsb	fp, ip, #32
   14ee8:	orr	r9, r9, r2, lsl sl
   14eec:	orr	r9, r9, r2, lsr fp
   14ef0:	lsl	r8, r2, ip
   14ef4:	cmp	r5, r9
   14ef8:	cmpeq	r4, r8
   14efc:	movcc	r0, #0
   14f00:	movcc	r1, r0
   14f04:	bcc	14f20 <__assert_fail@plt+0x3d64>
   14f08:	mov	r0, #1
   14f0c:	subs	r4, r4, r8
   14f10:	lsl	r1, r0, sl
   14f14:	orr	r1, r1, r0, lsr fp
   14f18:	lsl	r0, r0, ip
   14f1c:	sbc	r5, r5, r9
   14f20:	cmp	ip, #0
   14f24:	beq	14fb0 <__assert_fail@plt+0x3df4>
   14f28:	lsr	r6, r8, #1
   14f2c:	orr	r6, r6, r9, lsl #31
   14f30:	lsr	r7, r9, #1
   14f34:	mov	r2, ip
   14f38:	b	14f5c <__assert_fail@plt+0x3da0>
   14f3c:	subs	r3, r4, r6
   14f40:	sbc	r8, r5, r7
   14f44:	adds	r3, r3, r3
   14f48:	adc	r8, r8, r8
   14f4c:	adds	r4, r3, #1
   14f50:	adc	r5, r8, #0
   14f54:	subs	r2, r2, #1
   14f58:	beq	14f78 <__assert_fail@plt+0x3dbc>
   14f5c:	cmp	r5, r7
   14f60:	cmpeq	r4, r6
   14f64:	bcs	14f3c <__assert_fail@plt+0x3d80>
   14f68:	adds	r4, r4, r4
   14f6c:	adc	r5, r5, r5
   14f70:	subs	r2, r2, #1
   14f74:	bne	14f5c <__assert_fail@plt+0x3da0>
   14f78:	lsr	r3, r4, ip
   14f7c:	orr	r3, r3, r5, lsl fp
   14f80:	lsr	r2, r5, ip
   14f84:	orr	r3, r3, r5, lsr sl
   14f88:	adds	r0, r0, r4
   14f8c:	mov	r4, r3
   14f90:	lsl	r3, r2, ip
   14f94:	orr	r3, r3, r4, lsl sl
   14f98:	lsl	ip, r4, ip
   14f9c:	orr	r3, r3, r4, lsr fp
   14fa0:	adc	r1, r1, r5
   14fa4:	subs	r0, r0, ip
   14fa8:	mov	r5, r2
   14fac:	sbc	r1, r1, r3
   14fb0:	cmp	lr, #0
   14fb4:	strdne	r4, [lr]
   14fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14fc0:	mov	r7, r0
   14fc4:	ldr	r6, [pc, #72]	; 15014 <__assert_fail@plt+0x3e58>
   14fc8:	ldr	r5, [pc, #72]	; 15018 <__assert_fail@plt+0x3e5c>
   14fcc:	add	r6, pc, r6
   14fd0:	add	r5, pc, r5
   14fd4:	sub	r6, r6, r5
   14fd8:	mov	r8, r1
   14fdc:	mov	r9, r2
   14fe0:	bl	10eb4 <calloc@plt-0x20>
   14fe4:	asrs	r6, r6, #2
   14fe8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fec:	mov	r4, #0
   14ff0:	add	r4, r4, #1
   14ff4:	ldr	r3, [r5], #4
   14ff8:	mov	r2, r9
   14ffc:	mov	r1, r8
   15000:	mov	r0, r7
   15004:	blx	r3
   15008:	cmp	r6, r4
   1500c:	bne	14ff0 <__assert_fail@plt+0x3e34>
   15010:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15014:	andeq	r0, r1, r8, lsr pc
   15018:	andeq	r0, r1, r0, lsr pc
   1501c:	bx	lr
   15020:	ldr	r3, [pc, #12]	; 15034 <__assert_fail@plt+0x3e78>
   15024:	mov	r1, #0
   15028:	add	r3, pc, r3
   1502c:	ldr	r2, [r3]
   15030:	b	110c0 <__cxa_atexit@plt>
   15034:	andeq	r1, r1, r0, ror #1

Disassembly of section .fini:

00015038 <.fini>:
   15038:	push	{r3, lr}
   1503c:	pop	{r3, pc}
