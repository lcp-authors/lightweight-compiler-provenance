
../repos/stcorp-coda-3a25f25/CMakeFiles/CheckTypeSize/SIZEOF_DOUBLE.bin:     file format elf32-littlearm


Disassembly of section .init:

000104b0 <.init>:
   104b0:	push	{r3, lr}
   104b4:	bl	10540 <_start@@Base+0x3c>
   104b8:	pop	{r3, pc}

Disassembly of section .plt:

000104bc <__libc_start_main@plt-0x14>:
   104bc:	push	{lr}		; (str lr, [sp, #-4]!)
   104c0:	ldr	lr, [pc, #4]	; 104cc <__libc_start_main@plt-0x4>
   104c4:	add	lr, pc, lr
   104c8:	ldr	pc, [lr, #8]!
   104cc:	andeq	r0, r1, r4, lsr fp

000104d0 <__libc_start_main@plt>:
   104d0:	add	ip, pc, #0, 12
   104d4:	add	ip, ip, #16, 20	; 0x10000
   104d8:	ldr	pc, [ip, #2868]!	; 0xb34

000104dc <__gmon_start__@plt>:
   104dc:	add	ip, pc, #0, 12
   104e0:	add	ip, ip, #16, 20	; 0x10000
   104e4:	ldr	pc, [ip, #2860]!	; 0xb2c

000104e8 <abort@plt>:
   104e8:	add	ip, pc, #0, 12
   104ec:	add	ip, ip, #16, 20	; 0x10000
   104f0:	ldr	pc, [ip, #2852]!	; 0xb24

Disassembly of section .text:

000104f4 <main@@Base>:
   104f4:	ldr	r3, [pc, #4]	; 10500 <main@@Base+0xc>
   104f8:	ldrb	r0, [r3, r0]
   104fc:	bx	lr
   10500:	andeq	r0, r1, r4, ror #12

00010504 <_start@@Base>:
   10504:	mov	fp, #0
   10508:	mov	lr, #0
   1050c:	pop	{r1}		; (ldr r1, [sp], #4)
   10510:	mov	r2, sp
   10514:	push	{r2}		; (str r2, [sp, #-4]!)
   10518:	push	{r0}		; (str r0, [sp, #-4]!)
   1051c:	ldr	ip, [pc, #16]	; 10534 <_start@@Base+0x30>
   10520:	push	{ip}		; (str ip, [sp, #-4]!)
   10524:	ldr	r0, [pc, #12]	; 10538 <_start@@Base+0x34>
   10528:	ldr	r3, [pc, #12]	; 1053c <_start@@Base+0x38>
   1052c:	bl	104d0 <__libc_start_main@plt>
   10530:	bl	104e8 <abort@plt>
   10534:	andeq	r0, r1, r4, asr r6
   10538:	strdeq	r0, [r1], -r4
   1053c:	strdeq	r0, [r1], -r4
   10540:	ldr	r3, [pc, #20]	; 1055c <_start@@Base+0x58>
   10544:	ldr	r2, [pc, #20]	; 10560 <_start@@Base+0x5c>
   10548:	add	r3, pc, r3
   1054c:	ldr	r2, [r3, r2]
   10550:	cmp	r2, #0
   10554:	bxeq	lr
   10558:	b	104dc <__gmon_start__@plt>
   1055c:			; <UNDEFINED> instruction: 0x00010ab0
   10560:	andeq	r0, r0, r8, lsl r0
   10564:	ldr	r0, [pc, #24]	; 10584 <_start@@Base+0x80>
   10568:	ldr	r3, [pc, #24]	; 10588 <_start@@Base+0x84>
   1056c:	cmp	r3, r0
   10570:	bxeq	lr
   10574:	ldr	r3, [pc, #16]	; 1058c <_start@@Base+0x88>
   10578:	cmp	r3, #0
   1057c:	bxeq	lr
   10580:	bx	r3
   10584:	andeq	r1, r2, r4, lsr #32
   10588:	andeq	r1, r2, r4, lsr #32
   1058c:	andeq	r0, r0, r0
   10590:	ldr	r0, [pc, #36]	; 105bc <_start@@Base+0xb8>
   10594:	ldr	r1, [pc, #36]	; 105c0 <_start@@Base+0xbc>
   10598:	sub	r1, r1, r0
   1059c:	asr	r1, r1, #2
   105a0:	add	r1, r1, r1, lsr #31
   105a4:	asrs	r1, r1, #1
   105a8:	bxeq	lr
   105ac:	ldr	r3, [pc, #16]	; 105c4 <_start@@Base+0xc0>
   105b0:	cmp	r3, #0
   105b4:	bxeq	lr
   105b8:	bx	r3
   105bc:	andeq	r1, r2, r4, lsr #32
   105c0:	andeq	r1, r2, r4, lsr #32
   105c4:	andeq	r0, r0, r0
   105c8:	push	{r4, lr}
   105cc:	ldr	r4, [pc, #24]	; 105ec <_start@@Base+0xe8>
   105d0:	ldrb	r3, [r4]
   105d4:	cmp	r3, #0
   105d8:	popne	{r4, pc}
   105dc:	bl	10564 <_start@@Base+0x60>
   105e0:	mov	r3, #1
   105e4:	strb	r3, [r4]
   105e8:	pop	{r4, pc}
   105ec:	andeq	r1, r2, r4, lsr #32
   105f0:	b	10590 <_start@@Base+0x8c>

000105f4 <__libc_csu_init@@Base>:
   105f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   105f8:	mov	r7, r0
   105fc:	ldr	r6, [pc, #72]	; 1064c <__libc_csu_init@@Base+0x58>
   10600:	ldr	r5, [pc, #72]	; 10650 <__libc_csu_init@@Base+0x5c>
   10604:	add	r6, pc, r6
   10608:	add	r5, pc, r5
   1060c:	sub	r6, r6, r5
   10610:	mov	r8, r1
   10614:	mov	r9, r2
   10618:	bl	104b0 <__libc_start_main@plt-0x20>
   1061c:	asrs	r6, r6, #2
   10620:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10624:	mov	r4, #0
   10628:	add	r4, r4, #1
   1062c:	ldr	r3, [r5], #4
   10630:	mov	r2, r9
   10634:	mov	r1, r8
   10638:	mov	r0, r7
   1063c:	blx	r3
   10640:	cmp	r6, r4
   10644:	bne	10628 <__libc_csu_init@@Base+0x34>
   10648:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1064c:	andeq	r0, r1, r8, lsl #18
   10650:	andeq	r0, r1, r0, lsl #18

00010654 <__libc_csu_fini@@Base>:
   10654:	bx	lr

Disassembly of section .fini:

00010658 <.fini>:
   10658:	push	{r3, lr}
   1065c:	pop	{r3, pc}
