
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00011084 <.init>:
   11084:	push	{r3, lr}
   11088:	bl	113bc <__assert_fail@plt+0x48>
   1108c:	pop	{r3, pc}

Disassembly of section .plt:

00011090 <calloc@plt-0x14>:
   11090:	push	{lr}		; (str lr, [sp, #-4]!)
   11094:	ldr	lr, [pc, #4]	; 110a0 <calloc@plt-0x4>
   11098:	add	lr, pc, lr
   1109c:	ldr	pc, [lr, #8]!
   110a0:	andeq	r6, r1, r0, ror #30

000110a4 <calloc@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #3936]!	; 0xf60

000110b0 <endgrent@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #3928]!	; 0xf58

000110bc <fputs_unlocked@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #3920]!	; 0xf50

000110c8 <raise@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #3912]!	; 0xf48

000110d4 <getpwnam@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #3904]!	; 0xf40

000110e0 <is_selinux_enabled@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #3896]!	; 0xf38

000110ec <strcmp@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #3888]!	; 0xf30

000110f8 <getpwuid@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #3880]!	; 0xf28

00011104 <fflush@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #3872]!	; 0xf20

00011110 <getuid@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #3864]!	; 0xf18

0001111c <free@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #3856]!	; 0xf10

00011128 <_exit@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #3848]!	; 0xf08

00011134 <memcpy@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3840]!	; 0xf00

00011140 <mbsinit@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3832]!	; 0xef8

0001114c <memcmp@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3824]!	; 0xef0

00011158 <dcgettext@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3816]!	; 0xee8

00011164 <realloc@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3808]!	; 0xee0

00011170 <textdomain@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3800]!	; 0xed8

0001117c <geteuid@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3792]!	; 0xed0

00011188 <iswprint@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #90112	; 0x16000
   11190:	ldr	pc, [ip, #3784]!	; 0xec8

00011194 <getegid@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #90112	; 0x16000
   1119c:	ldr	pc, [ip, #3776]!	; 0xec0

000111a0 <fwrite@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #90112	; 0x16000
   111a8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111ac <lseek64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #90112	; 0x16000
   111b4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111b8 <__ctype_get_mb_cur_max@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #90112	; 0x16000
   111c0:	ldr	pc, [ip, #3752]!	; 0xea8

000111c4 <getcon@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #90112	; 0x16000
   111cc:	ldr	pc, [ip, #3744]!	; 0xea0

000111d0 <__fpending@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #90112	; 0x16000
   111d8:	ldr	pc, [ip, #3736]!	; 0xe98

000111dc <mbrtowc@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #90112	; 0x16000
   111e4:	ldr	pc, [ip, #3728]!	; 0xe90

000111e8 <error@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #90112	; 0x16000
   111f0:	ldr	pc, [ip, #3720]!	; 0xe88

000111f4 <getenv@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #90112	; 0x16000
   111fc:	ldr	pc, [ip, #3712]!	; 0xe80

00011200 <malloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #90112	; 0x16000
   11208:	ldr	pc, [ip, #3704]!	; 0xe78

0001120c <__libc_start_main@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #90112	; 0x16000
   11214:	ldr	pc, [ip, #3696]!	; 0xe70

00011218 <__freading@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #90112	; 0x16000
   11220:	ldr	pc, [ip, #3688]!	; 0xe68

00011224 <__gmon_start__@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #90112	; 0x16000
   1122c:	ldr	pc, [ip, #3680]!	; 0xe60

00011230 <getopt_long@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #90112	; 0x16000
   11238:	ldr	pc, [ip, #3672]!	; 0xe58

0001123c <__ctype_b_loc@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #90112	; 0x16000
   11244:	ldr	pc, [ip, #3664]!	; 0xe50

00011248 <exit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #90112	; 0x16000
   11250:	ldr	pc, [ip, #3656]!	; 0xe48

00011254 <strtoul@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #90112	; 0x16000
   1125c:	ldr	pc, [ip, #3648]!	; 0xe40

00011260 <strlen@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #90112	; 0x16000
   11268:	ldr	pc, [ip, #3640]!	; 0xe38

0001126c <strchr@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #90112	; 0x16000
   11274:	ldr	pc, [ip, #3632]!	; 0xe30

00011278 <__errno_location@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #90112	; 0x16000
   11280:	ldr	pc, [ip, #3624]!	; 0xe28

00011284 <__cxa_atexit@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #90112	; 0x16000
   1128c:	ldr	pc, [ip, #3616]!	; 0xe20

00011290 <getgid@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #90112	; 0x16000
   11298:	ldr	pc, [ip, #3608]!	; 0xe18

0001129c <getgrouplist@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #90112	; 0x16000
   112a4:	ldr	pc, [ip, #3600]!	; 0xe10

000112a8 <memset@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #90112	; 0x16000
   112b0:	ldr	pc, [ip, #3592]!	; 0xe08

000112b4 <__printf_chk@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #90112	; 0x16000
   112bc:	ldr	pc, [ip, #3584]!	; 0xe00

000112c0 <fileno@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #90112	; 0x16000
   112c8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112cc <__fprintf_chk@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #90112	; 0x16000
   112d4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112d8 <fclose@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #90112	; 0x16000
   112e0:	ldr	pc, [ip, #3560]!	; 0xde8

000112e4 <fseeko64@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #90112	; 0x16000
   112ec:	ldr	pc, [ip, #3552]!	; 0xde0

000112f0 <__overflow@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #90112	; 0x16000
   112f8:	ldr	pc, [ip, #3544]!	; 0xdd8

000112fc <setlocale@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #90112	; 0x16000
   11304:	ldr	pc, [ip, #3536]!	; 0xdd0

00011308 <endpwent@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #90112	; 0x16000
   11310:	ldr	pc, [ip, #3528]!	; 0xdc8

00011314 <strrchr@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #90112	; 0x16000
   1131c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011320 <nl_langinfo@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #90112	; 0x16000
   11328:	ldr	pc, [ip, #3512]!	; 0xdb8

0001132c <getgroups@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #90112	; 0x16000
   11334:	ldr	pc, [ip, #3504]!	; 0xdb0

00011338 <bindtextdomain@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #90112	; 0x16000
   11340:	ldr	pc, [ip, #3496]!	; 0xda8

00011344 <strncmp@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #90112	; 0x16000
   1134c:	ldr	pc, [ip, #3488]!	; 0xda0

00011350 <abort@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #90112	; 0x16000
   11358:	ldr	pc, [ip, #3480]!	; 0xd98

0001135c <getgrgid@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #90112	; 0x16000
   11364:	ldr	pc, [ip, #3472]!	; 0xd90

00011368 <getgrnam@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #90112	; 0x16000
   11370:	ldr	pc, [ip, #3464]!	; 0xd88

00011374 <__assert_fail@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #90112	; 0x16000
   1137c:	ldr	pc, [ip, #3456]!	; 0xd80

Disassembly of section .text:

00011380 <.text>:
   11380:	mov	fp, #0
   11384:	mov	lr, #0
   11388:	pop	{r1}		; (ldr r1, [sp], #4)
   1138c:	mov	r2, sp
   11390:	push	{r2}		; (str r2, [sp, #-4]!)
   11394:	push	{r0}		; (str r0, [sp, #-4]!)
   11398:	ldr	ip, [pc, #16]	; 113b0 <__assert_fail@plt+0x3c>
   1139c:	push	{ip}		; (str ip, [sp, #-4]!)
   113a0:	ldr	r0, [pc, #12]	; 113b4 <__assert_fail@plt+0x40>
   113a4:	ldr	r3, [pc, #12]	; 113b8 <__assert_fail@plt+0x44>
   113a8:	bl	1120c <__libc_start_main@plt>
   113ac:	bl	11350 <abort@plt>
   113b0:	andeq	r6, r1, r4, lsr r8
   113b4:	andeq	r1, r1, ip, ror #13
   113b8:	ldrdeq	r6, [r1], -r4
   113bc:	ldr	r3, [pc, #20]	; 113d8 <__assert_fail@plt+0x64>
   113c0:	ldr	r2, [pc, #20]	; 113dc <__assert_fail@plt+0x68>
   113c4:	add	r3, pc, r3
   113c8:	ldr	r2, [r3, r2]
   113cc:	cmp	r2, #0
   113d0:	bxeq	lr
   113d4:	b	11224 <__gmon_start__@plt>
   113d8:	andeq	r6, r1, r4, lsr ip
   113dc:	andeq	r0, r0, r0, lsl #2
   113e0:	ldr	r0, [pc, #24]	; 11400 <__assert_fail@plt+0x8c>
   113e4:	ldr	r3, [pc, #24]	; 11404 <__assert_fail@plt+0x90>
   113e8:	cmp	r3, r0
   113ec:	bxeq	lr
   113f0:	ldr	r3, [pc, #16]	; 11408 <__assert_fail@plt+0x94>
   113f4:	cmp	r3, #0
   113f8:	bxeq	lr
   113fc:	bx	r3
   11400:	andeq	r8, r2, r0, ror #2
   11404:	andeq	r8, r2, r0, ror #2
   11408:	andeq	r0, r0, r0
   1140c:	ldr	r0, [pc, #36]	; 11438 <__assert_fail@plt+0xc4>
   11410:	ldr	r1, [pc, #36]	; 1143c <__assert_fail@plt+0xc8>
   11414:	sub	r1, r1, r0
   11418:	asr	r1, r1, #2
   1141c:	add	r1, r1, r1, lsr #31
   11420:	asrs	r1, r1, #1
   11424:	bxeq	lr
   11428:	ldr	r3, [pc, #16]	; 11440 <__assert_fail@plt+0xcc>
   1142c:	cmp	r3, #0
   11430:	bxeq	lr
   11434:	bx	r3
   11438:	andeq	r8, r2, r0, ror #2
   1143c:	andeq	r8, r2, r0, ror #2
   11440:	andeq	r0, r0, r0
   11444:	push	{r4, lr}
   11448:	ldr	r4, [pc, #24]	; 11468 <__assert_fail@plt+0xf4>
   1144c:	ldrb	r3, [r4]
   11450:	cmp	r3, #0
   11454:	popne	{r4, pc}
   11458:	bl	113e0 <__assert_fail@plt+0x6c>
   1145c:	mov	r3, #1
   11460:	strb	r3, [r4]
   11464:	pop	{r4, pc}
   11468:	andeq	r8, r2, r8, ror r1
   1146c:	b	1140c <__assert_fail@plt+0x98>
   11470:	push	{fp, lr}
   11474:	mov	fp, sp
   11478:	sub	sp, sp, #56	; 0x38
   1147c:	mov	r4, r0
   11480:	cmp	r0, #0
   11484:	bne	116a8 <__assert_fail@plt+0x334>
   11488:	movw	r1, #26755	; 0x6883
   1148c:	mov	r0, #0
   11490:	mov	r2, #5
   11494:	movt	r1, #1
   11498:	bl	11158 <dcgettext@plt>
   1149c:	mov	r1, r0
   114a0:	movw	r0, #33252	; 0x81e4
   114a4:	movt	r0, #2
   114a8:	ldr	r2, [r0]
   114ac:	mov	r0, #1
   114b0:	bl	112b4 <__printf_chk@plt>
   114b4:	movw	r1, #26788	; 0x68a4
   114b8:	mov	r0, #0
   114bc:	mov	r2, #5
   114c0:	movt	r1, #1
   114c4:	bl	11158 <dcgettext@plt>
   114c8:	movw	r7, #33140	; 0x8174
   114cc:	movt	r7, #2
   114d0:	ldr	r1, [r7]
   114d4:	bl	110bc <fputs_unlocked@plt>
   114d8:	movw	r1, #26896	; 0x6910
   114dc:	mov	r0, #0
   114e0:	mov	r2, #5
   114e4:	movt	r1, #1
   114e8:	bl	11158 <dcgettext@plt>
   114ec:	ldr	r1, [r7]
   114f0:	bl	110bc <fputs_unlocked@plt>
   114f4:	movw	r1, #27417	; 0x6b19
   114f8:	mov	r0, #0
   114fc:	mov	r2, #5
   11500:	movt	r1, #1
   11504:	bl	11158 <dcgettext@plt>
   11508:	ldr	r1, [r7]
   1150c:	bl	110bc <fputs_unlocked@plt>
   11510:	movw	r1, #27462	; 0x6b46
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	11158 <dcgettext@plt>
   11524:	ldr	r1, [r7]
   11528:	bl	110bc <fputs_unlocked@plt>
   1152c:	movw	r1, #27516	; 0x6b7c
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	movt	r1, #1
   1153c:	bl	11158 <dcgettext@plt>
   11540:	ldr	r1, [r7]
   11544:	bl	110bc <fputs_unlocked@plt>
   11548:	movw	r0, #28736	; 0x7040
   1154c:	mov	r2, #48	; 0x30
   11550:	mov	r6, sp
   11554:	movw	r5, #27587	; 0x6bc3
   11558:	movt	r0, #1
   1155c:	movt	r5, #1
   11560:	add	r1, r0, #32
   11564:	add	r3, r0, #16
   11568:	vld1.64	{d18-d19}, [r0], r2
   1156c:	vld1.64	{d16-d17}, [r1]
   11570:	vld1.64	{d20-d21}, [r3]
   11574:	add	r1, r6, #32
   11578:	vldr	d22, [r0]
   1157c:	add	r0, r6, #16
   11580:	vst1.64	{d16-d17}, [r1]
   11584:	movw	r1, #28066	; 0x6da2
   11588:	vst1.64	{d20-d21}, [r0]
   1158c:	mov	r0, r6
   11590:	vst1.64	{d18-d19}, [r0], r2
   11594:	movt	r1, #1
   11598:	vstr	d22, [r0]
   1159c:	mov	r0, r5
   115a0:	bl	110ec <strcmp@plt>
   115a4:	cmp	r0, #0
   115a8:	ldrne	r1, [r6, #8]!
   115ac:	cmpne	r1, #0
   115b0:	bne	1159c <__assert_fail@plt+0x228>
   115b4:	ldr	r6, [r6, #4]
   115b8:	movw	r1, #28161	; 0x6e01
   115bc:	mov	r0, #0
   115c0:	mov	r2, #5
   115c4:	movt	r1, #1
   115c8:	bl	11158 <dcgettext@plt>
   115cc:	movw	r2, #27678	; 0x6c1e
   115d0:	movw	r3, #28184	; 0x6e18
   115d4:	mov	r1, r0
   115d8:	mov	r0, #1
   115dc:	movt	r2, #1
   115e0:	movt	r3, #1
   115e4:	bl	112b4 <__printf_chk@plt>
   115e8:	cmp	r6, #0
   115ec:	mov	r0, #5
   115f0:	mov	r1, #0
   115f4:	moveq	r6, r5
   115f8:	bl	112fc <setlocale@plt>
   115fc:	cmp	r0, #0
   11600:	beq	11638 <__assert_fail@plt+0x2c4>
   11604:	movw	r1, #28224	; 0x6e40
   11608:	mov	r2, #3
   1160c:	movt	r1, #1
   11610:	bl	11344 <strncmp@plt>
   11614:	cmp	r0, #0
   11618:	beq	11638 <__assert_fail@plt+0x2c4>
   1161c:	movw	r1, #28228	; 0x6e44
   11620:	mov	r0, #0
   11624:	mov	r2, #5
   11628:	movt	r1, #1
   1162c:	bl	11158 <dcgettext@plt>
   11630:	ldr	r1, [r7]
   11634:	bl	110bc <fputs_unlocked@plt>
   11638:	movw	r1, #28299	; 0x6e8b
   1163c:	mov	r0, #0
   11640:	mov	r2, #5
   11644:	movt	r1, #1
   11648:	bl	11158 <dcgettext@plt>
   1164c:	movw	r2, #28184	; 0x6e18
   11650:	mov	r1, r0
   11654:	mov	r0, #1
   11658:	mov	r3, r5
   1165c:	movt	r2, #1
   11660:	bl	112b4 <__printf_chk@plt>
   11664:	movw	r1, #28326	; 0x6ea6
   11668:	mov	r0, #0
   1166c:	mov	r2, #5
   11670:	movt	r1, #1
   11674:	bl	11158 <dcgettext@plt>
   11678:	movw	r3, #26895	; 0x690f
   1167c:	mov	r1, r0
   11680:	movw	r0, #28094	; 0x6dbe
   11684:	cmp	r6, r5
   11688:	mov	r2, r6
   1168c:	movt	r0, #1
   11690:	movt	r3, #1
   11694:	moveq	r3, r0
   11698:	mov	r0, #1
   1169c:	bl	112b4 <__printf_chk@plt>
   116a0:	mov	r0, r4
   116a4:	bl	11248 <exit@plt>
   116a8:	movw	r0, #33136	; 0x8170
   116ac:	movw	r1, #26716	; 0x685c
   116b0:	mov	r2, #5
   116b4:	movt	r0, #2
   116b8:	movt	r1, #1
   116bc:	ldr	r5, [r0]
   116c0:	mov	r0, #0
   116c4:	bl	11158 <dcgettext@plt>
   116c8:	mov	r2, r0
   116cc:	movw	r0, #33252	; 0x81e4
   116d0:	mov	r1, #1
   116d4:	movt	r0, #2
   116d8:	ldr	r3, [r0]
   116dc:	mov	r0, r5
   116e0:	bl	112cc <__fprintf_chk@plt>
   116e4:	mov	r0, r4
   116e8:	bl	11248 <exit@plt>
   116ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116f0:	add	fp, sp, #28
   116f4:	sub	sp, sp, #20
   116f8:	mov	r4, r1
   116fc:	mov	r5, r0
   11700:	bl	110e0 <is_selinux_enabled@plt>
   11704:	str	r0, [sp, #16]
   11708:	ldr	r0, [r4]
   1170c:	bl	1299c <__assert_fail@plt+0x1628>
   11710:	movw	r1, #26895	; 0x690f
   11714:	mov	r0, #6
   11718:	movt	r1, #1
   1171c:	bl	112fc <setlocale@plt>
   11720:	movw	r6, #27682	; 0x6c22
   11724:	movw	r1, #27590	; 0x6bc6
   11728:	movt	r6, #1
   1172c:	movt	r1, #1
   11730:	mov	r0, r6
   11734:	bl	11338 <bindtextdomain@plt>
   11738:	mov	r0, r6
   1173c:	bl	11170 <textdomain@plt>
   11740:	movw	r0, #10288	; 0x2830
   11744:	movt	r0, #1
   11748:	bl	16838 <__assert_fail@plt+0x54c4>
   1174c:	movw	r7, #27614	; 0x6bde
   11750:	movw	r6, #28576	; 0x6fa0
   11754:	movw	sl, #33149	; 0x817d
   11758:	mov	r9, #0
   1175c:	mov	r8, #1
   11760:	movt	r7, #1
   11764:	movt	r6, #1
   11768:	movt	sl, #2
   1176c:	b	11774 <__assert_fail@plt+0x400>
   11770:	strb	r8, [r0]
   11774:	mov	r0, r5
   11778:	mov	r1, r4
   1177c:	mov	r2, r7
   11780:	mov	r3, r6
   11784:	str	r9, [sp]
   11788:	bl	11230 <getopt_long@plt>
   1178c:	cmp	r0, #70	; 0x46
   11790:	ble	118e0 <__assert_fail@plt+0x56c>
   11794:	sub	r1, r0, #71	; 0x47
   11798:	cmp	r1, #51	; 0x33
   1179c:	bhi	11d58 <__assert_fail@plt+0x9e4>
   117a0:	add	r2, pc, #4
   117a4:	mov	r0, sl
   117a8:	ldr	pc, [r2, r1, lsl #2]
   117ac:	andeq	r1, r1, ip, ror r8
   117b0:	andeq	r1, r1, r8, asr sp
   117b4:	andeq	r1, r1, r8, asr sp
   117b8:	andeq	r1, r1, r8, asr sp
   117bc:	andeq	r1, r1, r8, asr sp
   117c0:	andeq	r1, r1, r8, asr sp
   117c4:	andeq	r1, r1, r8, asr sp
   117c8:	andeq	r1, r1, r8, asr sp
   117cc:	andeq	r1, r1, r8, asr sp
   117d0:	andeq	r1, r1, r8, asr sp
   117d4:	andeq	r1, r1, r8, asr sp
   117d8:	andeq	r1, r1, r8, asr sp
   117dc:	andeq	r1, r1, r8, asr sp
   117e0:	andeq	r1, r1, r8, asr sp
   117e4:	andeq	r1, r1, r8, asr sp
   117e8:	andeq	r1, r1, r8, asr sp
   117ec:	andeq	r1, r1, r8, asr sp
   117f0:	andeq	r1, r1, r8, asr sp
   117f4:	andeq	r1, r1, r8, asr sp
   117f8:	muleq	r1, r8, r8
   117fc:	andeq	r1, r1, r8, asr sp
   11800:	andeq	r1, r1, r8, asr sp
   11804:	andeq	r1, r1, r8, asr sp
   11808:	andeq	r1, r1, r8, asr sp
   1180c:	andeq	r1, r1, r8, asr sp
   11810:	andeq	r1, r1, r8, asr sp
   11814:	andeq	r1, r1, r4, ror r7
   11818:	andeq	r1, r1, r8, asr sp
   1181c:	andeq	r1, r1, r8, asr sp
   11820:	andeq	r1, r1, r8, asr sp
   11824:	andeq	r1, r1, r8, asr sp
   11828:	andeq	r1, r1, r8, asr sp
   1182c:	andeq	r1, r1, r0, ror r7
   11830:	andeq	r1, r1, r8, asr sp
   11834:	andeq	r1, r1, r8, asr sp
   11838:	andeq	r1, r1, r8, asr sp
   1183c:	andeq	r1, r1, r8, asr sp
   11840:	andeq	r1, r1, r8, asr sp
   11844:	andeq	r1, r1, r8, asr sp
   11848:	andeq	r1, r1, ip, lsl #17
   1184c:	andeq	r1, r1, r8, asr sp
   11850:	andeq	r1, r1, r8, asr sp
   11854:	andeq	r1, r1, r8, asr sp
   11858:	ldrdeq	r1, [r1], -r0
   1185c:	andeq	r1, r1, r8, asr sp
   11860:	andeq	r1, r1, r8, asr sp
   11864:			; <UNDEFINED> instruction: 0x000118b0
   11868:	andeq	r1, r1, r8, asr sp
   1186c:	andeq	r1, r1, r8, asr sp
   11870:	andeq	r1, r1, r8, asr sp
   11874:	andeq	r1, r1, r8, asr sp
   11878:	andeq	r1, r1, r0, asr #17
   1187c:	movw	r0, #33154	; 0x8182
   11880:	movt	r0, #2
   11884:	strb	r8, [r0]
   11888:	b	11774 <__assert_fail@plt+0x400>
   1188c:	movw	r0, #33150	; 0x817e
   11890:	movt	r0, #2
   11894:	b	11770 <__assert_fail@plt+0x3fc>
   11898:	ldr	r0, [sp, #16]
   1189c:	cmp	r0, #0
   118a0:	movw	r0, #33148	; 0x817c
   118a4:	movt	r0, #2
   118a8:	bgt	11770 <__assert_fail@plt+0x3fc>
   118ac:	b	11d60 <__assert_fail@plt+0x9ec>
   118b0:	movw	r0, #33152	; 0x8180
   118b4:	movt	r0, #2
   118b8:	strb	r8, [r0]
   118bc:	b	11774 <__assert_fail@plt+0x400>
   118c0:	movw	r0, #33153	; 0x8181
   118c4:	movt	r0, #2
   118c8:	strb	r8, [r0]
   118cc:	b	11774 <__assert_fail@plt+0x400>
   118d0:	movw	r0, #33151	; 0x817f
   118d4:	movt	r0, #2
   118d8:	strb	r8, [r0]
   118dc:	b	11774 <__assert_fail@plt+0x400>
   118e0:	cmn	r0, #1
   118e4:	bne	11cec <__assert_fail@plt+0x978>
   118e8:	movw	sl, #33128	; 0x8168
   118ec:	movw	lr, #33148	; 0x817c
   118f0:	movt	sl, #2
   118f4:	movt	lr, #2
   118f8:	ldr	r0, [sl]
   118fc:	ldrb	r2, [lr]
   11900:	subs	ip, r5, r0
   11904:	cmpne	r2, #0
   11908:	bne	11d6c <__assert_fail@plt+0x9f8>
   1190c:	clz	r3, ip
   11910:	movw	r9, #33152	; 0x8180
   11914:	movw	r8, #33149	; 0x817d
   11918:	movw	r7, #33154	; 0x8182
   1191c:	lsr	r3, r3, #5
   11920:	movt	r8, #2
   11924:	movt	r9, #2
   11928:	movt	r7, #2
   1192c:	and	r2, r3, r2
   11930:	ldrb	r3, [r9]
   11934:	ldrb	r6, [r8]
   11938:	ldrb	r7, [r7]
   1193c:	add	r1, r6, r3
   11940:	add	r1, r1, r7
   11944:	add	r1, r1, r2
   11948:	cmp	r1, #2
   1194c:	bcs	11d78 <__assert_fail@plt+0xa04>
   11950:	orr	r1, r7, r2
   11954:	orr	r3, r3, r6
   11958:	orrs	r3, r3, r1
   1195c:	bne	1199c <__assert_fail@plt+0x628>
   11960:	movw	r1, #33151	; 0x817f
   11964:	movt	r1, #2
   11968:	ldrb	r1, [r1]
   1196c:	cmp	r1, #0
   11970:	bne	11d84 <__assert_fail@plt+0xa10>
   11974:	movw	r1, #33150	; 0x817e
   11978:	movt	r1, #2
   1197c:	ldrb	r1, [r1]
   11980:	cmp	r1, #1
   11984:	beq	11d84 <__assert_fail@plt+0xa10>
   11988:	movw	r1, #33153	; 0x8181
   1198c:	movt	r1, #2
   11990:	ldrb	r1, [r1]
   11994:	cmp	r1, #1
   11998:	beq	11d90 <__assert_fail@plt+0xa1c>
   1199c:	cmp	ip, #0
   119a0:	beq	11ac4 <__assert_fail@plt+0x750>
   119a4:	subs	r1, ip, #1
   119a8:	movw	r2, #33160	; 0x8188
   119ac:	movwne	r1, #1
   119b0:	movt	r2, #2
   119b4:	cmp	r0, r5
   119b8:	strb	r1, [r2]
   119bc:	bcs	11cd4 <__assert_fail@plt+0x960>
   119c0:	movw	r9, #33164	; 0x818c
   119c4:	mov	r8, #0
   119c8:	movt	r9, #2
   119cc:	b	11a34 <__assert_fail@plt+0x6c0>
   119d0:	ldr	r0, [r9]
   119d4:	bl	110f8 <getpwuid@plt>
   119d8:	cmp	r0, #0
   119dc:	beq	11a60 <__assert_fail@plt+0x6ec>
   119e0:	mov	r6, r0
   119e4:	ldr	r0, [r0]
   119e8:	bl	1568c <__assert_fail@plt+0x4318>
   119ec:	mov	r7, r0
   119f0:	ldr	r0, [r6, #8]
   119f4:	movw	r2, #33168	; 0x8190
   119f8:	ldr	r1, [r6, #12]
   119fc:	movt	r2, #2
   11a00:	str	r0, [r2]
   11a04:	str	r0, [r9]
   11a08:	movw	r0, #33176	; 0x8198
   11a0c:	movt	r0, #2
   11a10:	str	r1, [r0]
   11a14:	movw	r0, #33172	; 0x8194
   11a18:	movt	r0, #2
   11a1c:	str	r1, [r0]
   11a20:	mov	r0, r7
   11a24:	bl	11e14 <__assert_fail@plt+0xaa0>
   11a28:	mov	r0, r7
   11a2c:	bl	12918 <__assert_fail@plt+0x15a4>
   11a30:	b	11aac <__assert_fail@plt+0x738>
   11a34:	ldr	r0, [r4, r0, lsl #2]
   11a38:	ldrb	r1, [r0]
   11a3c:	cmp	r1, #0
   11a40:	beq	11a60 <__assert_fail@plt+0x6ec>
   11a44:	mov	r1, r9
   11a48:	mov	r2, #0
   11a4c:	mov	r3, #0
   11a50:	str	r8, [sp]
   11a54:	bl	14708 <__assert_fail@plt+0x3394>
   11a58:	cmp	r0, #0
   11a5c:	beq	119d0 <__assert_fail@plt+0x65c>
   11a60:	bl	11278 <__errno_location@plt>
   11a64:	ldr	r6, [r0]
   11a68:	movw	r1, #27959	; 0x6d37
   11a6c:	mov	r0, #0
   11a70:	mov	r2, #5
   11a74:	movt	r1, #1
   11a78:	bl	11158 <dcgettext@plt>
   11a7c:	mov	r7, r0
   11a80:	ldr	r0, [sl]
   11a84:	ldr	r0, [r4, r0, lsl #2]
   11a88:	bl	145d0 <__assert_fail@plt+0x325c>
   11a8c:	mov	r3, r0
   11a90:	mov	r0, #0
   11a94:	mov	r1, r6
   11a98:	mov	r2, r7
   11a9c:	bl	111e8 <error@plt>
   11aa0:	movw	r0, #33040	; 0x8110
   11aa4:	movt	r0, #2
   11aa8:	strb	r8, [r0]
   11aac:	ldr	r0, [sl]
   11ab0:	add	r0, r0, #1
   11ab4:	cmp	r0, r5
   11ab8:	str	r0, [sl]
   11abc:	bcc	11a34 <__assert_fail@plt+0x6c0>
   11ac0:	b	11cd4 <__assert_fail@plt+0x960>
   11ac4:	cmp	r2, #0
   11ac8:	mov	r5, lr
   11acc:	bne	11af0 <__assert_fail@plt+0x77c>
   11ad0:	cmp	r3, #0
   11ad4:	bne	11b20 <__assert_fail@plt+0x7ac>
   11ad8:	movw	r0, #27917	; 0x6d0d
   11adc:	movt	r0, #1
   11ae0:	bl	111f4 <getenv@plt>
   11ae4:	mov	lr, r5
   11ae8:	cmp	r0, #0
   11aec:	bne	11b20 <__assert_fail@plt+0x7ac>
   11af0:	ldr	r0, [sp, #16]
   11af4:	cmp	r0, #1
   11af8:	blt	11b20 <__assert_fail@plt+0x7ac>
   11afc:	movw	r0, #33156	; 0x8184
   11b00:	movt	r0, #2
   11b04:	bl	111c4 <getcon@plt>
   11b08:	mov	lr, r5
   11b0c:	cmp	r0, #0
   11b10:	beq	11b20 <__assert_fail@plt+0x7ac>
   11b14:	ldrb	r0, [lr]
   11b18:	cmp	r0, #1
   11b1c:	beq	11db4 <__assert_fail@plt+0xa40>
   11b20:	ldrb	r0, [r9]
   11b24:	cmp	r0, #1
   11b28:	bne	11b84 <__assert_fail@plt+0x810>
   11b2c:	movw	r0, #33151	; 0x817f
   11b30:	movt	r0, #2
   11b34:	ldrb	r0, [r0]
   11b38:	cmp	r0, #0
   11b3c:	bne	11c00 <__assert_fail@plt+0x88c>
   11b40:	bl	11278 <__errno_location@plt>
   11b44:	mov	r4, r0
   11b48:	mov	r0, #0
   11b4c:	str	r0, [r4]
   11b50:	bl	1117c <geteuid@plt>
   11b54:	movw	r1, #33164	; 0x818c
   11b58:	mov	lr, r5
   11b5c:	cmn	r0, #1
   11b60:	movt	r1, #2
   11b64:	str	r0, [r1]
   11b68:	bne	11bb0 <__assert_fail@plt+0x83c>
   11b6c:	ldr	r4, [r4]
   11b70:	cmp	r4, #0
   11b74:	beq	11bb0 <__assert_fail@plt+0x83c>
   11b78:	movw	r1, #27976	; 0x6d48
   11b7c:	movt	r1, #1
   11b80:	b	11df8 <__assert_fail@plt+0xa84>
   11b84:	ldrb	r0, [r8]
   11b88:	cmp	r0, #0
   11b8c:	bne	11c70 <__assert_fail@plt+0x8fc>
   11b90:	movw	r0, #33154	; 0x8182
   11b94:	movt	r0, #2
   11b98:	ldrb	r0, [r0]
   11b9c:	cmp	r0, #0
   11ba0:	bne	11c00 <__assert_fail@plt+0x88c>
   11ba4:	ldrb	r0, [lr]
   11ba8:	cmp	r0, #0
   11bac:	beq	11b40 <__assert_fail@plt+0x7cc>
   11bb0:	ldrb	r0, [r9]
   11bb4:	cmp	r0, #1
   11bb8:	bne	11bd4 <__assert_fail@plt+0x860>
   11bbc:	movw	r0, #33151	; 0x817f
   11bc0:	movt	r0, #2
   11bc4:	ldrb	r0, [r0]
   11bc8:	cmp	r0, #0
   11bcc:	bne	11c00 <__assert_fail@plt+0x88c>
   11bd0:	b	11ccc <__assert_fail@plt+0x958>
   11bd4:	ldrb	r0, [r8]
   11bd8:	cmp	r0, #0
   11bdc:	bne	11c70 <__assert_fail@plt+0x8fc>
   11be0:	movw	r0, #33154	; 0x8182
   11be4:	movt	r0, #2
   11be8:	ldrb	r0, [r0]
   11bec:	cmp	r0, #0
   11bf0:	bne	11c00 <__assert_fail@plt+0x88c>
   11bf4:	ldrb	r0, [lr]
   11bf8:	cmp	r0, #0
   11bfc:	bne	11c38 <__assert_fail@plt+0x8c4>
   11c00:	bl	11278 <__errno_location@plt>
   11c04:	mov	r4, r0
   11c08:	mov	r0, #0
   11c0c:	str	r0, [r4]
   11c10:	bl	11110 <getuid@plt>
   11c14:	movw	r1, #33168	; 0x8190
   11c18:	mov	lr, r5
   11c1c:	cmn	r0, #1
   11c20:	movt	r1, #2
   11c24:	str	r0, [r1]
   11c28:	bne	11c38 <__assert_fail@plt+0x8c4>
   11c2c:	ldr	r4, [r4]
   11c30:	cmp	r4, #0
   11c34:	bne	11df0 <__assert_fail@plt+0xa7c>
   11c38:	ldrb	r0, [r9]
   11c3c:	cmp	r0, #0
   11c40:	bne	11ccc <__assert_fail@plt+0x958>
   11c44:	ldrb	r0, [r8]
   11c48:	cmp	r0, #0
   11c4c:	bne	11c70 <__assert_fail@plt+0x8fc>
   11c50:	movw	r0, #33154	; 0x8182
   11c54:	movt	r0, #2
   11c58:	ldrb	r0, [r0]
   11c5c:	cmp	r0, #0
   11c60:	bne	11c70 <__assert_fail@plt+0x8fc>
   11c64:	ldrb	r0, [lr]
   11c68:	cmp	r0, #0
   11c6c:	bne	11ccc <__assert_fail@plt+0x958>
   11c70:	bl	11278 <__errno_location@plt>
   11c74:	mov	r6, #0
   11c78:	mov	r4, r0
   11c7c:	str	r6, [r0]
   11c80:	bl	11194 <getegid@plt>
   11c84:	movw	r1, #33172	; 0x8194
   11c88:	cmn	r0, #1
   11c8c:	movt	r1, #2
   11c90:	str	r0, [r1]
   11c94:	bne	11ca4 <__assert_fail@plt+0x930>
   11c98:	ldr	r5, [r4]
   11c9c:	cmp	r5, #0
   11ca0:	bne	11dc0 <__assert_fail@plt+0xa4c>
   11ca4:	str	r6, [r4]
   11ca8:	bl	11290 <getgid@plt>
   11cac:	movw	r1, #33176	; 0x8198
   11cb0:	cmn	r0, #1
   11cb4:	movt	r1, #2
   11cb8:	str	r0, [r1]
   11cbc:	bne	11ccc <__assert_fail@plt+0x958>
   11cc0:	ldr	r4, [r4]
   11cc4:	cmp	r4, #0
   11cc8:	bne	11de4 <__assert_fail@plt+0xa70>
   11ccc:	mov	r0, #0
   11cd0:	bl	11e14 <__assert_fail@plt+0xaa0>
   11cd4:	movw	r0, #33040	; 0x8110
   11cd8:	movt	r0, #2
   11cdc:	ldrb	r0, [r0]
   11ce0:	eor	r0, r0, #1
   11ce4:	sub	sp, fp, #28
   11ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cec:	cmn	r0, #3
   11cf0:	bne	11d48 <__assert_fail@plt+0x9d4>
   11cf4:	movw	r0, #33044	; 0x8114
   11cf8:	movw	r2, #27707	; 0x6c3b
   11cfc:	mov	r1, #0
   11d00:	movw	r7, #27692	; 0x6c2c
   11d04:	movt	r0, #2
   11d08:	movt	r2, #1
   11d0c:	str	r1, [sp, #8]
   11d10:	movw	r1, #27587	; 0x6bc3
   11d14:	movt	r7, #1
   11d18:	ldr	r3, [r0]
   11d1c:	movw	r0, #33140	; 0x8174
   11d20:	str	r2, [sp, #4]
   11d24:	movw	r2, #27678	; 0x6c1e
   11d28:	movt	r1, #1
   11d2c:	str	r7, [sp]
   11d30:	movt	r0, #2
   11d34:	movt	r2, #1
   11d38:	ldr	r0, [r0]
   11d3c:	bl	14f38 <__assert_fail@plt+0x3bc4>
   11d40:	mov	r0, #0
   11d44:	bl	11248 <exit@plt>
   11d48:	cmn	r0, #2
   11d4c:	bne	11d58 <__assert_fail@plt+0x9e4>
   11d50:	mov	r0, #0
   11d54:	bl	11470 <__assert_fail@plt+0xfc>
   11d58:	mov	r0, #1
   11d5c:	bl	11470 <__assert_fail@plt+0xfc>
   11d60:	movw	r1, #27623	; 0x6be7
   11d64:	movt	r1, #1
   11d68:	b	11d98 <__assert_fail@plt+0xa24>
   11d6c:	movw	r1, #27723	; 0x6c4b
   11d70:	movt	r1, #1
   11d74:	b	11d98 <__assert_fail@plt+0xa24>
   11d78:	movw	r1, #27773	; 0x6c7d
   11d7c:	movt	r1, #1
   11d80:	b	11d98 <__assert_fail@plt+0xa24>
   11d84:	movw	r1, #27817	; 0x6ca9
   11d88:	movt	r1, #1
   11d8c:	b	11d98 <__assert_fail@plt+0xa24>
   11d90:	movw	r1, #27871	; 0x6cdf
   11d94:	movt	r1, #1
   11d98:	mov	r0, #0
   11d9c:	mov	r2, #5
   11da0:	bl	11158 <dcgettext@plt>
   11da4:	mov	r2, r0
   11da8:	mov	r0, #1
   11dac:	mov	r1, #0
   11db0:	bl	111e8 <error@plt>
   11db4:	movw	r1, #27933	; 0x6d1d
   11db8:	movt	r1, #1
   11dbc:	b	11d98 <__assert_fail@plt+0xa24>
   11dc0:	movw	r1, #28021	; 0x6d75
   11dc4:	mov	r0, #0
   11dc8:	mov	r2, #5
   11dcc:	movt	r1, #1
   11dd0:	bl	11158 <dcgettext@plt>
   11dd4:	mov	r2, r0
   11dd8:	mov	r0, #1
   11ddc:	mov	r1, r5
   11de0:	bl	111e8 <error@plt>
   11de4:	movw	r1, #28046	; 0x6d8e
   11de8:	movt	r1, #1
   11dec:	b	11df8 <__assert_fail@plt+0xa84>
   11df0:	movw	r1, #28001	; 0x6d61
   11df4:	movt	r1, #1
   11df8:	mov	r0, #0
   11dfc:	mov	r2, #5
   11e00:	bl	11158 <dcgettext@plt>
   11e04:	mov	r2, r0
   11e08:	mov	r0, #1
   11e0c:	mov	r1, r4
   11e10:	bl	111e8 <error@plt>
   11e14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11e18:	add	fp, sp, #24
   11e1c:	sub	sp, sp, #16
   11e20:	mov	r4, r0
   11e24:	movw	r0, #33152	; 0x8180
   11e28:	movt	r0, #2
   11e2c:	ldrb	r0, [r0]
   11e30:	cmp	r0, #1
   11e34:	bne	11e8c <__assert_fail@plt+0xb18>
   11e38:	movw	r0, #33151	; 0x817f
   11e3c:	movw	r1, #33168	; 0x8190
   11e40:	movw	r2, #33164	; 0x818c
   11e44:	movt	r0, #2
   11e48:	movt	r1, #2
   11e4c:	movt	r2, #2
   11e50:	ldrb	r0, [r0]
   11e54:	cmp	r0, #0
   11e58:	movw	r0, #33150	; 0x817e
   11e5c:	movt	r0, #2
   11e60:	movne	r2, r1
   11e64:	ldrb	r0, [r0]
   11e68:	ldr	r4, [r2]
   11e6c:	cmp	r0, #0
   11e70:	beq	11edc <__assert_fail@plt+0xb68>
   11e74:	mov	r0, r4
   11e78:	bl	110f8 <getpwuid@plt>
   11e7c:	cmp	r0, #0
   11e80:	beq	11f98 <__assert_fail@plt+0xc24>
   11e84:	ldr	r0, [r0]
   11e88:	b	11ffc <__assert_fail@plt+0xc88>
   11e8c:	movw	r0, #33149	; 0x817d
   11e90:	movt	r0, #2
   11e94:	ldrb	r0, [r0]
   11e98:	cmp	r0, #1
   11e9c:	bne	11ee4 <__assert_fail@plt+0xb70>
   11ea0:	movw	r0, #33151	; 0x817f
   11ea4:	movw	r1, #33176	; 0x8198
   11ea8:	movw	r2, #33172	; 0x8194
   11eac:	movt	r0, #2
   11eb0:	movt	r1, #2
   11eb4:	movt	r2, #2
   11eb8:	ldrb	r0, [r0]
   11ebc:	cmp	r0, #0
   11ec0:	movne	r2, r1
   11ec4:	movw	r1, #33150	; 0x817e
   11ec8:	movt	r1, #2
   11ecc:	ldr	r0, [r2]
   11ed0:	ldrb	r1, [r1]
   11ed4:	bl	12784 <__assert_fail@plt+0x1410>
   11ed8:	b	11f50 <__assert_fail@plt+0xbdc>
   11edc:	mov	r5, #0
   11ee0:	b	11fe8 <__assert_fail@plt+0xc74>
   11ee4:	movw	r0, #33154	; 0x8182
   11ee8:	movt	r0, #2
   11eec:	ldrb	r0, [r0]
   11ef0:	cmp	r0, #1
   11ef4:	bne	11f68 <__assert_fail@plt+0xbf4>
   11ef8:	movw	r0, #33172	; 0x8194
   11efc:	movw	r7, #33150	; 0x817e
   11f00:	mov	r6, #32
   11f04:	movt	r0, #2
   11f08:	movt	r7, #2
   11f0c:	ldr	r3, [r0]
   11f10:	movw	r0, #33176	; 0x8198
   11f14:	ldrb	r7, [r7]
   11f18:	movt	r0, #2
   11f1c:	ldr	r2, [r0]
   11f20:	movw	r0, #33168	; 0x8190
   11f24:	movt	r0, #2
   11f28:	ldr	r1, [r0]
   11f2c:	movw	r0, #33153	; 0x8181
   11f30:	str	r7, [sp]
   11f34:	movt	r0, #2
   11f38:	ldrb	r0, [r0]
   11f3c:	cmp	r0, #0
   11f40:	mov	r0, r4
   11f44:	movwne	r6, #0
   11f48:	str	r6, [sp, #4]
   11f4c:	bl	12480 <__assert_fail@plt+0x110c>
   11f50:	movw	r1, #33040	; 0x8110
   11f54:	movt	r1, #2
   11f58:	ldrb	r2, [r1]
   11f5c:	and	r0, r2, r0
   11f60:	strb	r0, [r1]
   11f64:	b	1200c <__assert_fail@plt+0xc98>
   11f68:	movw	r0, #33148	; 0x817c
   11f6c:	movt	r0, #2
   11f70:	ldrb	r0, [r0]
   11f74:	cmp	r0, #1
   11f78:	bne	120e4 <__assert_fail@plt+0xd70>
   11f7c:	movw	r0, #33140	; 0x8174
   11f80:	movt	r0, #2
   11f84:	ldr	r1, [r0]
   11f88:	movw	r0, #33156	; 0x8184
   11f8c:	movt	r0, #2
   11f90:	ldr	r0, [r0]
   11f94:	b	12008 <__assert_fail@plt+0xc94>
   11f98:	movw	r1, #28412	; 0x6efc
   11f9c:	mov	r0, #0
   11fa0:	mov	r2, #5
   11fa4:	mov	r5, #0
   11fa8:	movt	r1, #1
   11fac:	bl	11158 <dcgettext@plt>
   11fb0:	movw	r2, #33180	; 0x819c
   11fb4:	mov	r6, r0
   11fb8:	mov	r0, r4
   11fbc:	mov	r1, #0
   11fc0:	movt	r2, #2
   11fc4:	bl	12940 <__assert_fail@plt+0x15cc>
   11fc8:	mov	r3, r0
   11fcc:	mov	r0, #0
   11fd0:	mov	r1, #0
   11fd4:	mov	r2, r6
   11fd8:	bl	111e8 <error@plt>
   11fdc:	movw	r0, #33040	; 0x8110
   11fe0:	movt	r0, #2
   11fe4:	strb	r5, [r0]
   11fe8:	movw	r2, #33180	; 0x819c
   11fec:	mov	r0, r4
   11ff0:	mov	r1, r5
   11ff4:	movt	r2, #2
   11ff8:	bl	12940 <__assert_fail@plt+0x15cc>
   11ffc:	movw	r1, #33140	; 0x8174
   12000:	movt	r1, #2
   12004:	ldr	r1, [r1]
   12008:	bl	110bc <fputs_unlocked@plt>
   1200c:	movw	r0, #33153	; 0x8181
   12010:	movt	r0, #2
   12014:	ldrb	r0, [r0]
   12018:	cmp	r0, #1
   1201c:	bne	12044 <__assert_fail@plt+0xcd0>
   12020:	movw	r1, #33160	; 0x8188
   12024:	movt	r1, #2
   12028:	ldrb	r1, [r1]
   1202c:	cmp	r1, #0
   12030:	movwne	r1, #33154	; 0x8182
   12034:	movtne	r1, #2
   12038:	ldrbne	r1, [r1]
   1203c:	cmpne	r1, #0
   12040:	bne	12080 <__assert_fail@plt+0xd0c>
   12044:	cmp	r0, #0
   12048:	movw	r0, #33140	; 0x8174
   1204c:	mov	r1, #10
   12050:	movt	r0, #2
   12054:	movwne	r1, #0
   12058:	ldr	r0, [r0]
   1205c:	ldr	r2, [r0, #20]
   12060:	ldr	r3, [r0, #24]
   12064:	cmp	r2, r3
   12068:	addcc	r3, r2, #1
   1206c:	strcc	r3, [r0, #20]
   12070:	strbcc	r1, [r2]
   12074:	subcc	sp, fp, #24
   12078:	popcc	{r4, r5, r6, r7, r8, r9, fp, pc}
   1207c:	b	120d8 <__assert_fail@plt+0xd64>
   12080:	movw	r4, #33140	; 0x8174
   12084:	movt	r4, #2
   12088:	ldr	r0, [r4]
   1208c:	ldr	r1, [r0, #20]
   12090:	ldr	r2, [r0, #24]
   12094:	cmp	r1, r2
   12098:	bcs	12474 <__assert_fail@plt+0x1100>
   1209c:	add	r2, r1, #1
   120a0:	str	r2, [r0, #20]
   120a4:	mov	r0, #0
   120a8:	strb	r0, [r1]
   120ac:	ldr	r0, [r4]
   120b0:	ldr	r1, [r0, #20]
   120b4:	ldr	r2, [r0, #24]
   120b8:	cmp	r1, r2
   120bc:	addcc	r2, r1, #1
   120c0:	strcc	r2, [r0, #20]
   120c4:	movcc	r0, #0
   120c8:	strbcc	r0, [r1]
   120cc:	subcc	sp, fp, #24
   120d0:	popcc	{r4, r5, r6, r7, r8, r9, fp, pc}
   120d4:	mov	r1, #0
   120d8:	bl	112f0 <__overflow@plt>
   120dc:	sub	sp, fp, #24
   120e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   120e4:	movw	r1, #28459	; 0x6f2b
   120e8:	mov	r0, #0
   120ec:	mov	r2, #5
   120f0:	movt	r1, #1
   120f4:	bl	11158 <dcgettext@plt>
   120f8:	movw	r7, #33168	; 0x8190
   120fc:	mov	r5, r0
   12100:	movw	r2, #33180	; 0x819c
   12104:	mov	r1, #0
   12108:	movt	r7, #2
   1210c:	movt	r2, #2
   12110:	ldr	r0, [r7]
   12114:	bl	12940 <__assert_fail@plt+0x15cc>
   12118:	mov	r2, r0
   1211c:	mov	r0, #1
   12120:	mov	r1, r5
   12124:	bl	112b4 <__printf_chk@plt>
   12128:	ldr	r0, [r7]
   1212c:	bl	110f8 <getpwuid@plt>
   12130:	mov	r5, r0
   12134:	cmp	r0, #0
   12138:	beq	12150 <__assert_fail@plt+0xddc>
   1213c:	ldr	r2, [r5]
   12140:	movw	r1, #28444	; 0x6f1c
   12144:	mov	r0, #1
   12148:	movt	r1, #1
   1214c:	bl	112b4 <__printf_chk@plt>
   12150:	movw	r1, #28449	; 0x6f21
   12154:	mov	r0, #0
   12158:	mov	r2, #5
   1215c:	movt	r1, #1
   12160:	bl	11158 <dcgettext@plt>
   12164:	movw	r8, #33176	; 0x8198
   12168:	mov	r6, r0
   1216c:	movw	r2, #33201	; 0x81b1
   12170:	mov	r1, #0
   12174:	movt	r8, #2
   12178:	movt	r2, #2
   1217c:	ldr	r0, [r8]
   12180:	bl	12940 <__assert_fail@plt+0x15cc>
   12184:	mov	r2, r0
   12188:	mov	r0, #1
   1218c:	mov	r1, r6
   12190:	bl	112b4 <__printf_chk@plt>
   12194:	ldr	r0, [r8]
   12198:	bl	1135c <getgrgid@plt>
   1219c:	cmp	r0, #0
   121a0:	beq	121b8 <__assert_fail@plt+0xe44>
   121a4:	ldr	r2, [r0]
   121a8:	movw	r1, #28444	; 0x6f1c
   121ac:	mov	r0, #1
   121b0:	movt	r1, #1
   121b4:	bl	112b4 <__printf_chk@plt>
   121b8:	ldr	r0, [r7]
   121bc:	movw	r7, #33164	; 0x818c
   121c0:	movt	r7, #2
   121c4:	ldr	r1, [r7]
   121c8:	cmp	r1, r0
   121cc:	beq	1223c <__assert_fail@plt+0xec8>
   121d0:	movw	r1, #28457	; 0x6f29
   121d4:	mov	r0, #0
   121d8:	mov	r2, #5
   121dc:	mov	r5, #0
   121e0:	movt	r1, #1
   121e4:	bl	11158 <dcgettext@plt>
   121e8:	mov	r6, r0
   121ec:	ldr	r0, [r7]
   121f0:	movw	r2, #33180	; 0x819c
   121f4:	mov	r1, #0
   121f8:	movt	r2, #2
   121fc:	bl	12940 <__assert_fail@plt+0x15cc>
   12200:	mov	r2, r0
   12204:	mov	r0, #1
   12208:	mov	r1, r6
   1220c:	bl	112b4 <__printf_chk@plt>
   12210:	ldr	r0, [r7]
   12214:	bl	110f8 <getpwuid@plt>
   12218:	cmp	r0, #0
   1221c:	beq	1223c <__assert_fail@plt+0xec8>
   12220:	ldr	r2, [r0]
   12224:	movw	r1, #28444	; 0x6f1c
   12228:	mov	r6, r0
   1222c:	mov	r0, #1
   12230:	movt	r1, #1
   12234:	bl	112b4 <__printf_chk@plt>
   12238:	mov	r5, r6
   1223c:	movw	r7, #33172	; 0x8194
   12240:	ldr	r0, [r8]
   12244:	movt	r7, #2
   12248:	ldr	r1, [r7]
   1224c:	cmp	r1, r0
   12250:	beq	122b4 <__assert_fail@plt+0xf40>
   12254:	movw	r1, #28466	; 0x6f32
   12258:	mov	r0, #0
   1225c:	mov	r2, #5
   12260:	movt	r1, #1
   12264:	bl	11158 <dcgettext@plt>
   12268:	mov	r6, r0
   1226c:	ldr	r0, [r7]
   12270:	movw	r2, #33201	; 0x81b1
   12274:	mov	r1, #0
   12278:	movt	r2, #2
   1227c:	bl	12940 <__assert_fail@plt+0x15cc>
   12280:	mov	r2, r0
   12284:	mov	r0, #1
   12288:	mov	r1, r6
   1228c:	bl	112b4 <__printf_chk@plt>
   12290:	ldr	r0, [r7]
   12294:	bl	1135c <getgrgid@plt>
   12298:	cmp	r0, #0
   1229c:	beq	122b4 <__assert_fail@plt+0xf40>
   122a0:	ldr	r2, [r0]
   122a4:	movw	r1, #28444	; 0x6f1c
   122a8:	mov	r0, #1
   122ac:	movt	r1, #1
   122b0:	bl	112b4 <__printf_chk@plt>
   122b4:	cmp	r4, #0
   122b8:	beq	122cc <__assert_fail@plt+0xf58>
   122bc:	cmp	r5, #0
   122c0:	ldrne	r1, [r5, #12]
   122c4:	mvneq	r1, #0
   122c8:	b	122d0 <__assert_fail@plt+0xf5c>
   122cc:	ldr	r1, [r7]
   122d0:	add	r2, sp, #12
   122d4:	mov	r0, r4
   122d8:	bl	15710 <__assert_fail@plt+0x439c>
   122dc:	cmn	r0, #1
   122e0:	ble	12330 <__assert_fail@plt+0xfbc>
   122e4:	mov	r5, r0
   122e8:	cmp	r0, #0
   122ec:	beq	12430 <__assert_fail@plt+0x10bc>
   122f0:	movw	r1, #28553	; 0x6f89
   122f4:	mov	r0, #0
   122f8:	mov	r2, #5
   122fc:	mov	r7, #0
   12300:	movt	r1, #1
   12304:	bl	11158 <dcgettext@plt>
   12308:	movw	r6, #33140	; 0x8174
   1230c:	movt	r6, #2
   12310:	ldr	r1, [r6]
   12314:	bl	110bc <fputs_unlocked@plt>
   12318:	movw	r4, #33201	; 0x81b1
   1231c:	movw	r8, #28444	; 0x6f1c
   12320:	mov	r9, #44	; 0x2c
   12324:	movt	r4, #2
   12328:	movt	r8, #1
   1232c:	b	123bc <__assert_fail@plt+0x1048>
   12330:	bl	11278 <__errno_location@plt>
   12334:	ldr	r5, [r0]
   12338:	cmp	r4, #0
   1233c:	beq	12378 <__assert_fail@plt+0x1004>
   12340:	movw	r1, #28475	; 0x6f3b
   12344:	mov	r0, #0
   12348:	mov	r2, #5
   1234c:	movt	r1, #1
   12350:	bl	11158 <dcgettext@plt>
   12354:	mov	r6, r0
   12358:	mov	r0, r4
   1235c:	bl	145d0 <__assert_fail@plt+0x325c>
   12360:	mov	r3, r0
   12364:	mov	r0, #0
   12368:	mov	r1, r5
   1236c:	mov	r2, r6
   12370:	bl	111e8 <error@plt>
   12374:	b	1239c <__assert_fail@plt+0x1028>
   12378:	movw	r1, #28508	; 0x6f5c
   1237c:	mov	r0, #0
   12380:	mov	r2, #5
   12384:	movt	r1, #1
   12388:	bl	11158 <dcgettext@plt>
   1238c:	mov	r2, r0
   12390:	mov	r0, #0
   12394:	mov	r1, r5
   12398:	bl	111e8 <error@plt>
   1239c:	movw	r0, #33040	; 0x8110
   123a0:	mov	r1, #0
   123a4:	movt	r0, #2
   123a8:	strb	r1, [r0]
   123ac:	b	1200c <__assert_fail@plt+0xc98>
   123b0:	mov	r1, #44	; 0x2c
   123b4:	bl	112f0 <__overflow@plt>
   123b8:	b	123e4 <__assert_fail@plt+0x1070>
   123bc:	cmp	r7, #0
   123c0:	beq	123e4 <__assert_fail@plt+0x1070>
   123c4:	ldr	r0, [r6]
   123c8:	ldr	r1, [r0, #20]
   123cc:	ldr	r2, [r0, #24]
   123d0:	cmp	r1, r2
   123d4:	bcs	123b0 <__assert_fail@plt+0x103c>
   123d8:	add	r2, r1, #1
   123dc:	str	r2, [r0, #20]
   123e0:	strb	r9, [r1]
   123e4:	ldr	r0, [sp, #12]
   123e8:	mov	r1, #0
   123ec:	mov	r2, r4
   123f0:	ldr	r0, [r0, r7, lsl #2]
   123f4:	bl	12940 <__assert_fail@plt+0x15cc>
   123f8:	ldr	r1, [r6]
   123fc:	bl	110bc <fputs_unlocked@plt>
   12400:	ldr	r0, [sp, #12]
   12404:	ldr	r0, [r0, r7, lsl #2]
   12408:	bl	1135c <getgrgid@plt>
   1240c:	cmp	r0, #0
   12410:	beq	12424 <__assert_fail@plt+0x10b0>
   12414:	ldr	r2, [r0]
   12418:	mov	r0, #1
   1241c:	mov	r1, r8
   12420:	bl	112b4 <__printf_chk@plt>
   12424:	add	r7, r7, #1
   12428:	cmp	r5, r7
   1242c:	bne	123bc <__assert_fail@plt+0x1048>
   12430:	ldr	r0, [sp, #12]
   12434:	bl	12918 <__assert_fail@plt+0x15a4>
   12438:	movw	r4, #33156	; 0x8184
   1243c:	movt	r4, #2
   12440:	ldr	r0, [r4]
   12444:	cmp	r0, #0
   12448:	beq	1200c <__assert_fail@plt+0xc98>
   1244c:	movw	r1, #28562	; 0x6f92
   12450:	mov	r0, #0
   12454:	mov	r2, #5
   12458:	movt	r1, #1
   1245c:	bl	11158 <dcgettext@plt>
   12460:	ldr	r2, [r4]
   12464:	mov	r1, r0
   12468:	mov	r0, #1
   1246c:	bl	112b4 <__printf_chk@plt>
   12470:	b	1200c <__assert_fail@plt+0xc98>
   12474:	mov	r1, #0
   12478:	bl	112f0 <__overflow@plt>
   1247c:	b	120ac <__assert_fail@plt+0xd38>
   12480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12484:	add	fp, sp, #28
   12488:	sub	sp, sp, #12
   1248c:	mov	r4, r3
   12490:	mov	r5, r2
   12494:	mov	r8, r0
   12498:	cmp	r0, #0
   1249c:	beq	124bc <__assert_fail@plt+0x1148>
   124a0:	mov	r0, r1
   124a4:	bl	110f8 <getpwuid@plt>
   124a8:	cmp	r0, #0
   124ac:	mov	r6, r0
   124b0:	mov	r7, r0
   124b4:	movwne	r6, #1
   124b8:	b	124c4 <__assert_fail@plt+0x1150>
   124bc:	mov	r7, #0
   124c0:	mov	r6, #1
   124c4:	ldr	r0, [fp, #8]
   124c8:	cmp	r0, #0
   124cc:	beq	12518 <__assert_fail@plt+0x11a4>
   124d0:	mov	r0, r5
   124d4:	bl	1135c <getgrgid@plt>
   124d8:	cmp	r0, #0
   124dc:	beq	124ec <__assert_fail@plt+0x1178>
   124e0:	movw	r1, #33140	; 0x8174
   124e4:	ldr	r0, [r0]
   124e8:	b	12530 <__assert_fail@plt+0x11bc>
   124ec:	movw	r1, #28792	; 0x7078
   124f0:	mov	r0, #0
   124f4:	mov	r2, #5
   124f8:	mov	r6, #0
   124fc:	movt	r1, #1
   12500:	bl	11158 <dcgettext@plt>
   12504:	mov	r2, r0
   12508:	mov	r0, #0
   1250c:	mov	r1, #0
   12510:	mov	r3, r5
   12514:	bl	111e8 <error@plt>
   12518:	movw	r2, #33222	; 0x81c6
   1251c:	mov	r0, r5
   12520:	mov	r1, #0
   12524:	movt	r2, #2
   12528:	bl	12940 <__assert_fail@plt+0x15cc>
   1252c:	movw	r1, #33140	; 0x8174
   12530:	movt	r1, #2
   12534:	ldr	r1, [r1]
   12538:	bl	110bc <fputs_unlocked@plt>
   1253c:	cmp	r4, r5
   12540:	beq	125e0 <__assert_fail@plt+0x126c>
   12544:	movw	r9, #33140	; 0x8174
   12548:	movt	r9, #2
   1254c:	ldr	r0, [r9]
   12550:	ldr	r1, [r0, #20]
   12554:	ldr	r2, [r0, #24]
   12558:	cmp	r1, r2
   1255c:	bcs	12778 <__assert_fail@plt+0x1404>
   12560:	add	r2, r1, #1
   12564:	str	r2, [r0, #20]
   12568:	ldr	r0, [fp, #12]
   1256c:	strb	r0, [r1]
   12570:	ldr	r0, [fp, #8]
   12574:	cmp	r0, #0
   12578:	beq	125c4 <__assert_fail@plt+0x1250>
   1257c:	mov	r0, r4
   12580:	bl	1135c <getgrgid@plt>
   12584:	cmp	r0, #0
   12588:	beq	12598 <__assert_fail@plt+0x1224>
   1258c:	ldr	r1, [r9]
   12590:	ldr	r0, [r0]
   12594:	b	125dc <__assert_fail@plt+0x1268>
   12598:	movw	r1, #28792	; 0x7078
   1259c:	mov	r0, #0
   125a0:	mov	r2, #5
   125a4:	mov	r6, #0
   125a8:	movt	r1, #1
   125ac:	bl	11158 <dcgettext@plt>
   125b0:	mov	r2, r0
   125b4:	mov	r0, #0
   125b8:	mov	r1, #0
   125bc:	mov	r3, r4
   125c0:	bl	111e8 <error@plt>
   125c4:	movw	r2, #33222	; 0x81c6
   125c8:	mov	r0, r4
   125cc:	mov	r1, #0
   125d0:	movt	r2, #2
   125d4:	bl	12940 <__assert_fail@plt+0x15cc>
   125d8:	ldr	r1, [r9]
   125dc:	bl	110bc <fputs_unlocked@plt>
   125e0:	cmp	r7, #0
   125e4:	mov	r1, r4
   125e8:	add	r2, sp, #8
   125ec:	mov	r0, r8
   125f0:	ldrne	r1, [r7, #12]
   125f4:	bl	15710 <__assert_fail@plt+0x439c>
   125f8:	cmp	r0, #0
   125fc:	blt	12624 <__assert_fail@plt+0x12b0>
   12600:	str	r6, [sp, #4]
   12604:	beq	12760 <__assert_fail@plt+0x13ec>
   12608:	movw	r9, #33140	; 0x8174
   1260c:	movw	sl, #33222	; 0x81c6
   12610:	mov	r7, r0
   12614:	mov	r8, #0
   12618:	movt	r9, #2
   1261c:	movt	sl, #2
   12620:	b	126a4 <__assert_fail@plt+0x1330>
   12624:	bl	11278 <__errno_location@plt>
   12628:	ldr	r4, [r0]
   1262c:	mov	r6, #0
   12630:	cmp	r8, #0
   12634:	beq	12670 <__assert_fail@plt+0x12fc>
   12638:	movw	r1, #28475	; 0x6f3b
   1263c:	mov	r0, #0
   12640:	mov	r2, #5
   12644:	movt	r1, #1
   12648:	bl	11158 <dcgettext@plt>
   1264c:	mov	r5, r0
   12650:	mov	r0, r8
   12654:	bl	145d0 <__assert_fail@plt+0x325c>
   12658:	mov	r3, r0
   1265c:	mov	r0, #0
   12660:	mov	r1, r4
   12664:	mov	r2, r5
   12668:	bl	111e8 <error@plt>
   1266c:	b	1276c <__assert_fail@plt+0x13f8>
   12670:	movw	r1, #28508	; 0x6f5c
   12674:	mov	r0, #0
   12678:	mov	r2, #5
   1267c:	movt	r1, #1
   12680:	bl	11158 <dcgettext@plt>
   12684:	mov	r2, r0
   12688:	mov	r0, #0
   1268c:	mov	r1, r4
   12690:	bl	111e8 <error@plt>
   12694:	b	1276c <__assert_fail@plt+0x13f8>
   12698:	ldr	r1, [fp, #12]
   1269c:	bl	112f0 <__overflow@plt>
   126a0:	b	126dc <__assert_fail@plt+0x1368>
   126a4:	ldr	r0, [sp, #8]
   126a8:	ldr	r0, [r0, r8, lsl #2]
   126ac:	cmp	r0, r5
   126b0:	cmpne	r0, r4
   126b4:	beq	12754 <__assert_fail@plt+0x13e0>
   126b8:	ldr	r0, [r9]
   126bc:	ldr	r1, [r0, #20]
   126c0:	ldr	r2, [r0, #24]
   126c4:	cmp	r1, r2
   126c8:	bcs	12698 <__assert_fail@plt+0x1324>
   126cc:	add	r2, r1, #1
   126d0:	str	r2, [r0, #20]
   126d4:	ldr	r0, [fp, #12]
   126d8:	strb	r0, [r1]
   126dc:	ldr	r0, [sp, #8]
   126e0:	ldr	r6, [r0, r8, lsl #2]
   126e4:	ldr	r0, [fp, #8]
   126e8:	cmp	r0, #0
   126ec:	beq	1273c <__assert_fail@plt+0x13c8>
   126f0:	mov	r0, r6
   126f4:	bl	1135c <getgrgid@plt>
   126f8:	cmp	r0, #0
   126fc:	beq	1270c <__assert_fail@plt+0x1398>
   12700:	ldr	r1, [r9]
   12704:	ldr	r0, [r0]
   12708:	b	12750 <__assert_fail@plt+0x13dc>
   1270c:	movw	r1, #28792	; 0x7078
   12710:	mov	r0, #0
   12714:	mov	r2, #5
   12718:	str	r0, [sp, #4]
   1271c:	mov	r0, #0
   12720:	movt	r1, #1
   12724:	bl	11158 <dcgettext@plt>
   12728:	mov	r2, r0
   1272c:	mov	r0, #0
   12730:	mov	r1, #0
   12734:	mov	r3, r6
   12738:	bl	111e8 <error@plt>
   1273c:	mov	r0, r6
   12740:	mov	r1, #0
   12744:	mov	r2, sl
   12748:	bl	12940 <__assert_fail@plt+0x15cc>
   1274c:	ldr	r1, [r9]
   12750:	bl	110bc <fputs_unlocked@plt>
   12754:	add	r8, r8, #1
   12758:	cmp	r7, r8
   1275c:	bne	126a4 <__assert_fail@plt+0x1330>
   12760:	ldr	r0, [sp, #8]
   12764:	bl	12918 <__assert_fail@plt+0x15a4>
   12768:	ldr	r6, [sp, #4]
   1276c:	and	r0, r6, #1
   12770:	sub	sp, fp, #28
   12774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12778:	ldr	r1, [fp, #12]
   1277c:	bl	112f0 <__overflow@plt>
   12780:	b	12570 <__assert_fail@plt+0x11fc>
   12784:	push	{r4, r5, fp, lr}
   12788:	add	fp, sp, #8
   1278c:	mov	r5, r0
   12790:	mov	r4, #1
   12794:	cmp	r1, #0
   12798:	beq	127e4 <__assert_fail@plt+0x1470>
   1279c:	mov	r0, r5
   127a0:	bl	1135c <getgrgid@plt>
   127a4:	cmp	r0, #0
   127a8:	beq	127b8 <__assert_fail@plt+0x1444>
   127ac:	ldr	r0, [r0]
   127b0:	mov	r4, #1
   127b4:	b	127f8 <__assert_fail@plt+0x1484>
   127b8:	movw	r1, #28792	; 0x7078
   127bc:	mov	r0, #0
   127c0:	mov	r2, #5
   127c4:	mov	r4, #0
   127c8:	movt	r1, #1
   127cc:	bl	11158 <dcgettext@plt>
   127d0:	mov	r2, r0
   127d4:	mov	r0, #0
   127d8:	mov	r1, #0
   127dc:	mov	r3, r5
   127e0:	bl	111e8 <error@plt>
   127e4:	movw	r2, #33222	; 0x81c6
   127e8:	mov	r0, r5
   127ec:	mov	r1, #0
   127f0:	movt	r2, #2
   127f4:	bl	12940 <__assert_fail@plt+0x15cc>
   127f8:	movw	r1, #33140	; 0x8174
   127fc:	movt	r1, #2
   12800:	ldr	r1, [r1]
   12804:	bl	110bc <fputs_unlocked@plt>
   12808:	mov	r0, r4
   1280c:	pop	{r4, r5, fp, pc}
   12810:	movw	r1, #33244	; 0x81dc
   12814:	movt	r1, #2
   12818:	str	r0, [r1]
   1281c:	bx	lr
   12820:	movw	r1, #33248	; 0x81e0
   12824:	movt	r1, #2
   12828:	strb	r0, [r1]
   1282c:	bx	lr
   12830:	push	{r4, r5, r6, sl, fp, lr}
   12834:	add	fp, sp, #16
   12838:	sub	sp, sp, #8
   1283c:	movw	r0, #33140	; 0x8174
   12840:	movt	r0, #2
   12844:	ldr	r0, [r0]
   12848:	bl	16040 <__assert_fail@plt+0x4ccc>
   1284c:	cmp	r0, #0
   12850:	beq	12878 <__assert_fail@plt+0x1504>
   12854:	movw	r0, #33248	; 0x81e0
   12858:	movt	r0, #2
   1285c:	ldrb	r0, [r0]
   12860:	cmp	r0, #0
   12864:	beq	12898 <__assert_fail@plt+0x1524>
   12868:	bl	11278 <__errno_location@plt>
   1286c:	ldr	r0, [r0]
   12870:	cmp	r0, #32
   12874:	bne	12898 <__assert_fail@plt+0x1524>
   12878:	movw	r0, #33136	; 0x8170
   1287c:	movt	r0, #2
   12880:	ldr	r0, [r0]
   12884:	bl	16040 <__assert_fail@plt+0x4ccc>
   12888:	cmp	r0, #0
   1288c:	subeq	sp, fp, #16
   12890:	popeq	{r4, r5, r6, sl, fp, pc}
   12894:	b	12908 <__assert_fail@plt+0x1594>
   12898:	movw	r1, #28841	; 0x70a9
   1289c:	mov	r0, #0
   128a0:	mov	r2, #5
   128a4:	movt	r1, #1
   128a8:	bl	11158 <dcgettext@plt>
   128ac:	mov	r4, r0
   128b0:	movw	r0, #33244	; 0x81dc
   128b4:	movt	r0, #2
   128b8:	ldr	r6, [r0]
   128bc:	bl	11278 <__errno_location@plt>
   128c0:	ldr	r5, [r0]
   128c4:	cmp	r6, #0
   128c8:	bne	128e4 <__assert_fail@plt+0x1570>
   128cc:	movw	r2, #28857	; 0x70b9
   128d0:	mov	r0, #0
   128d4:	mov	r1, r5
   128d8:	mov	r3, r4
   128dc:	movt	r2, #1
   128e0:	b	12904 <__assert_fail@plt+0x1590>
   128e4:	mov	r0, r6
   128e8:	bl	14248 <__assert_fail@plt+0x2ed4>
   128ec:	movw	r2, #28853	; 0x70b5
   128f0:	mov	r3, r0
   128f4:	str	r4, [sp]
   128f8:	mov	r0, #0
   128fc:	mov	r1, r5
   12900:	movt	r2, #1
   12904:	bl	111e8 <error@plt>
   12908:	movw	r0, #33048	; 0x8118
   1290c:	movt	r0, #2
   12910:	ldr	r0, [r0]
   12914:	bl	11128 <_exit@plt>
   12918:	push	{r4, r5, r6, sl, fp, lr}
   1291c:	add	fp, sp, #16
   12920:	mov	r4, r0
   12924:	bl	11278 <__errno_location@plt>
   12928:	ldr	r6, [r0]
   1292c:	mov	r5, r0
   12930:	mov	r0, r4
   12934:	bl	1111c <free@plt>
   12938:	str	r6, [r5]
   1293c:	pop	{r4, r5, r6, sl, fp, pc}
   12940:	push	{r4, r5, r6, sl, fp, lr}
   12944:	add	fp, sp, #16
   12948:	mov	r5, r0
   1294c:	mov	r0, #0
   12950:	mov	r4, r1
   12954:	add	r6, r2, #19
   12958:	strb	r0, [r2, #20]
   1295c:	mov	r0, r5
   12960:	mov	r1, r4
   12964:	mov	r2, #10
   12968:	mov	r3, #0
   1296c:	bl	16660 <__assert_fail@plt+0x52ec>
   12970:	add	r2, r0, r0, lsl #2
   12974:	sub	r2, r5, r2, lsl #1
   12978:	orr	r2, r2, #48	; 0x30
   1297c:	strb	r2, [r6], #-1
   12980:	rsbs	r2, r5, #9
   12984:	mov	r5, r0
   12988:	rscs	r2, r4, #0
   1298c:	mov	r4, r1
   12990:	bcc	1295c <__assert_fail@plt+0x15e8>
   12994:	add	r0, r6, #1
   12998:	pop	{r4, r5, r6, sl, fp, pc}
   1299c:	push	{r4, r5, fp, lr}
   129a0:	add	fp, sp, #8
   129a4:	cmp	r0, #0
   129a8:	beq	12a3c <__assert_fail@plt+0x16c8>
   129ac:	mov	r1, #47	; 0x2f
   129b0:	mov	r4, r0
   129b4:	bl	11314 <strrchr@plt>
   129b8:	cmp	r0, #0
   129bc:	mov	r5, r4
   129c0:	addne	r5, r0, #1
   129c4:	sub	r0, r5, r4
   129c8:	cmp	r0, #7
   129cc:	blt	12a20 <__assert_fail@plt+0x16ac>
   129d0:	movw	r1, #28916	; 0x70f4
   129d4:	sub	r0, r5, #7
   129d8:	mov	r2, #7
   129dc:	movt	r1, #1
   129e0:	bl	11344 <strncmp@plt>
   129e4:	cmp	r0, #0
   129e8:	bne	12a20 <__assert_fail@plt+0x16ac>
   129ec:	movw	r1, #28924	; 0x70fc
   129f0:	mov	r0, r5
   129f4:	mov	r2, #3
   129f8:	movt	r1, #1
   129fc:	bl	11344 <strncmp@plt>
   12a00:	cmp	r0, #0
   12a04:	beq	12a10 <__assert_fail@plt+0x169c>
   12a08:	mov	r4, r5
   12a0c:	b	12a20 <__assert_fail@plt+0x16ac>
   12a10:	movw	r0, #33120	; 0x8160
   12a14:	add	r4, r5, #3
   12a18:	movt	r0, #2
   12a1c:	str	r4, [r0]
   12a20:	movw	r0, #33124	; 0x8164
   12a24:	movt	r0, #2
   12a28:	str	r4, [r0]
   12a2c:	movw	r0, #33252	; 0x81e4
   12a30:	movt	r0, #2
   12a34:	str	r4, [r0]
   12a38:	pop	{r4, r5, fp, pc}
   12a3c:	movw	r0, #33136	; 0x8170
   12a40:	mov	r1, #55	; 0x37
   12a44:	mov	r2, #1
   12a48:	movt	r0, #2
   12a4c:	ldr	r3, [r0]
   12a50:	movw	r0, #28860	; 0x70bc
   12a54:	movt	r0, #1
   12a58:	bl	111a0 <fwrite@plt>
   12a5c:	bl	11350 <abort@plt>
   12a60:	push	{r4, r5, r6, sl, fp, lr}
   12a64:	add	fp, sp, #16
   12a68:	mov	r4, r0
   12a6c:	movw	r0, #33256	; 0x81e8
   12a70:	movt	r0, #2
   12a74:	cmp	r4, #0
   12a78:	moveq	r4, r0
   12a7c:	bl	11278 <__errno_location@plt>
   12a80:	ldr	r6, [r0]
   12a84:	mov	r5, r0
   12a88:	mov	r0, r4
   12a8c:	mov	r1, #48	; 0x30
   12a90:	bl	155cc <__assert_fail@plt+0x4258>
   12a94:	str	r6, [r5]
   12a98:	pop	{r4, r5, r6, sl, fp, pc}
   12a9c:	movw	r1, #33256	; 0x81e8
   12aa0:	cmp	r0, #0
   12aa4:	movt	r1, #2
   12aa8:	movne	r1, r0
   12aac:	ldr	r0, [r1]
   12ab0:	bx	lr
   12ab4:	movw	r2, #33256	; 0x81e8
   12ab8:	cmp	r0, #0
   12abc:	movt	r2, #2
   12ac0:	movne	r2, r0
   12ac4:	str	r1, [r2]
   12ac8:	bx	lr
   12acc:	movw	r3, #33256	; 0x81e8
   12ad0:	cmp	r0, #0
   12ad4:	movt	r3, #2
   12ad8:	movne	r3, r0
   12adc:	ubfx	r0, r1, #5, #3
   12ae0:	and	r1, r1, #31
   12ae4:	add	r0, r3, r0, lsl #2
   12ae8:	ldr	r3, [r0, #8]
   12aec:	eor	r2, r2, r3, lsr r1
   12af0:	and	r2, r2, #1
   12af4:	eor	r2, r3, r2, lsl r1
   12af8:	str	r2, [r0, #8]
   12afc:	mov	r0, #1
   12b00:	and	r0, r0, r3, lsr r1
   12b04:	bx	lr
   12b08:	movw	r2, #33256	; 0x81e8
   12b0c:	cmp	r0, #0
   12b10:	movt	r2, #2
   12b14:	movne	r2, r0
   12b18:	ldr	r0, [r2, #4]
   12b1c:	str	r1, [r2, #4]
   12b20:	bx	lr
   12b24:	movw	r3, #33256	; 0x81e8
   12b28:	cmp	r0, #0
   12b2c:	movt	r3, #2
   12b30:	movne	r3, r0
   12b34:	cmp	r1, #0
   12b38:	mov	r0, #10
   12b3c:	cmpne	r2, #0
   12b40:	str	r0, [r3]
   12b44:	bne	12b54 <__assert_fail@plt+0x17e0>
   12b48:	push	{fp, lr}
   12b4c:	mov	fp, sp
   12b50:	bl	11350 <abort@plt>
   12b54:	str	r1, [r3, #40]	; 0x28
   12b58:	str	r2, [r3, #44]	; 0x2c
   12b5c:	bx	lr
   12b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b64:	add	fp, sp, #28
   12b68:	sub	sp, sp, #20
   12b6c:	mov	r7, r0
   12b70:	ldr	r0, [fp, #8]
   12b74:	movw	r5, #33256	; 0x81e8
   12b78:	mov	r8, r3
   12b7c:	mov	r9, r2
   12b80:	mov	sl, r1
   12b84:	movt	r5, #2
   12b88:	cmp	r0, #0
   12b8c:	movne	r5, r0
   12b90:	bl	11278 <__errno_location@plt>
   12b94:	mov	r4, r0
   12b98:	ldm	r5, {r0, r1}
   12b9c:	ldr	r2, [r5, #40]	; 0x28
   12ba0:	ldr	r3, [r5, #44]	; 0x2c
   12ba4:	add	r5, r5, #8
   12ba8:	ldr	r6, [r4]
   12bac:	stm	sp, {r0, r1, r5}
   12bb0:	str	r2, [sp, #12]
   12bb4:	str	r3, [sp, #16]
   12bb8:	mov	r0, r7
   12bbc:	mov	r1, sl
   12bc0:	mov	r2, r9
   12bc4:	mov	r3, r8
   12bc8:	bl	12bd8 <__assert_fail@plt+0x1864>
   12bcc:	str	r6, [r4]
   12bd0:	sub	sp, fp, #28
   12bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bdc:	add	fp, sp, #28
   12be0:	sub	sp, sp, #156	; 0x9c
   12be4:	str	r0, [sp, #80]	; 0x50
   12be8:	ldr	r0, [fp, #12]
   12bec:	mov	r6, r1
   12bf0:	mov	r9, r3
   12bf4:	str	r2, [fp, #-84]	; 0xffffffac
   12bf8:	and	r1, r0, #4
   12bfc:	str	r1, [sp, #32]
   12c00:	and	r1, r0, #1
   12c04:	str	r1, [sp, #36]	; 0x24
   12c08:	ubfx	r4, r0, #1, #1
   12c0c:	bl	111b8 <__ctype_get_mb_cur_max@plt>
   12c10:	str	r0, [sp, #40]	; 0x28
   12c14:	ldr	r0, [fp, #24]
   12c18:	ldr	r7, [fp, #8]
   12c1c:	mov	r1, #0
   12c20:	mov	r5, #1
   12c24:	str	r1, [fp, #-56]	; 0xffffffc8
   12c28:	mov	r1, #0
   12c2c:	str	r1, [sp, #60]	; 0x3c
   12c30:	str	r0, [sp, #76]	; 0x4c
   12c34:	ldr	r0, [fp, #20]
   12c38:	str	r0, [sp, #72]	; 0x48
   12c3c:	mov	r0, #0
   12c40:	str	r0, [sp, #56]	; 0x38
   12c44:	mov	r0, #0
   12c48:	str	r0, [sp, #92]	; 0x5c
   12c4c:	mov	r0, #0
   12c50:	str	r0, [fp, #-76]	; 0xffffffb4
   12c54:	mov	r0, #0
   12c58:	cmp	r7, #10
   12c5c:	bhi	13bdc <__assert_fail@plt+0x2868>
   12c60:	add	r1, pc, #28
   12c64:	mov	sl, r6
   12c68:	ldr	r6, [sp, #80]	; 0x50
   12c6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c70:	mov	r8, #0
   12c74:	mov	r2, #1
   12c78:	mov	r3, #0
   12c7c:	mov	lr, r9
   12c80:	ldr	pc, [r1, r7, lsl #2]
   12c84:	andeq	r2, r1, r8, ror #26
   12c88:	muleq	r1, r4, sp
   12c8c:	andeq	r2, r1, r8, asr sp
   12c90:	andeq	r2, r1, r0, asr sp
   12c94:	andeq	r2, r1, r8, lsl #27
   12c98:	ldrdeq	r2, [r1], -ip
   12c9c:	andeq	r2, r1, r8, ror sp
   12ca0:	andeq	r2, r1, r8, lsr lr
   12ca4:			; <UNDEFINED> instruction: 0x00012cb0
   12ca8:			; <UNDEFINED> instruction: 0x00012cb0
   12cac:	ldrdeq	r2, [r1], -r8
   12cb0:	movw	r0, #29006	; 0x714e
   12cb4:	mov	r1, r7
   12cb8:	movt	r0, #1
   12cbc:	bl	145e8 <__assert_fail@plt+0x3274>
   12cc0:	str	r0, [sp, #72]	; 0x48
   12cc4:	movw	r0, #29008	; 0x7150
   12cc8:	mov	r1, r7
   12ccc:	movt	r0, #1
   12cd0:	bl	145e8 <__assert_fail@plt+0x3274>
   12cd4:	str	r0, [sp, #76]	; 0x4c
   12cd8:	str	r5, [fp, #-48]	; 0xffffffd0
   12cdc:	mov	r8, #0
   12ce0:	mov	r5, r7
   12ce4:	tst	r4, #1
   12ce8:	bne	12d20 <__assert_fail@plt+0x19ac>
   12cec:	ldr	r0, [sp, #72]	; 0x48
   12cf0:	ldrb	r0, [r0]
   12cf4:	cmp	r0, #0
   12cf8:	beq	12d20 <__assert_fail@plt+0x19ac>
   12cfc:	ldr	r1, [sp, #72]	; 0x48
   12d00:	mov	r8, #0
   12d04:	add	r1, r1, #1
   12d08:	cmp	r8, sl
   12d0c:	strbcc	r0, [r6, r8]
   12d10:	ldrb	r0, [r1, r8]
   12d14:	add	r8, r8, #1
   12d18:	cmp	r0, #0
   12d1c:	bne	12d08 <__assert_fail@plt+0x1994>
   12d20:	ldr	r7, [sp, #76]	; 0x4c
   12d24:	mov	r0, r7
   12d28:	bl	11260 <strlen@plt>
   12d2c:	str	r7, [sp, #92]	; 0x5c
   12d30:	mov	r7, r5
   12d34:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d38:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12d3c:	str	r0, [fp, #-76]	; 0xffffffb4
   12d40:	mov	r2, #1
   12d44:	mov	r3, r4
   12d48:	mov	lr, r9
   12d4c:	b	12e38 <__assert_fail@plt+0x1ac4>
   12d50:	mov	r0, #1
   12d54:	b	12d94 <__assert_fail@plt+0x1a20>
   12d58:	tst	r4, #1
   12d5c:	bne	12d94 <__assert_fail@plt+0x1a20>
   12d60:	mov	r2, r0
   12d64:	b	12dbc <__assert_fail@plt+0x1a48>
   12d68:	mov	r7, #0
   12d6c:	mov	r8, #0
   12d70:	mov	r2, r0
   12d74:	b	12e34 <__assert_fail@plt+0x1ac0>
   12d78:	mov	r0, #1
   12d7c:	mov	r8, #0
   12d80:	mov	r7, #5
   12d84:	b	12df0 <__assert_fail@plt+0x1a7c>
   12d88:	mov	r2, #1
   12d8c:	tst	r4, #1
   12d90:	beq	12dbc <__assert_fail@plt+0x1a48>
   12d94:	mov	r1, #1
   12d98:	mov	r8, #0
   12d9c:	mov	r7, #2
   12da0:	mov	r2, r0
   12da4:	mov	r3, #1
   12da8:	str	r1, [fp, #-76]	; 0xffffffb4
   12dac:	movw	r1, #29008	; 0x7150
   12db0:	movt	r1, #1
   12db4:	str	r1, [sp, #92]	; 0x5c
   12db8:	b	12e38 <__assert_fail@plt+0x1ac4>
   12dbc:	cmp	sl, #0
   12dc0:	mov	r8, #1
   12dc4:	mov	r7, #2
   12dc8:	movne	r0, #39	; 0x27
   12dcc:	strbne	r0, [r6]
   12dd0:	movw	r0, #29008	; 0x7150
   12dd4:	movt	r0, #1
   12dd8:	b	12e28 <__assert_fail@plt+0x1ab4>
   12ddc:	mov	r7, #5
   12de0:	tst	r4, #1
   12de4:	beq	12e0c <__assert_fail@plt+0x1a98>
   12de8:	mov	r0, #1
   12dec:	mov	r8, #0
   12df0:	str	r0, [fp, #-76]	; 0xffffffb4
   12df4:	movw	r0, #29004	; 0x714c
   12df8:	mov	r2, #1
   12dfc:	mov	r3, #1
   12e00:	movt	r0, #1
   12e04:	str	r0, [sp, #92]	; 0x5c
   12e08:	b	12e38 <__assert_fail@plt+0x1ac4>
   12e0c:	cmp	sl, #0
   12e10:	mov	r8, #1
   12e14:	mov	r2, #1
   12e18:	movne	r0, #34	; 0x22
   12e1c:	strbne	r0, [r6]
   12e20:	movw	r0, #29004	; 0x714c
   12e24:	movt	r0, #1
   12e28:	str	r0, [sp, #92]	; 0x5c
   12e2c:	mov	r0, #1
   12e30:	str	r0, [fp, #-76]	; 0xffffffb4
   12e34:	mov	r3, #0
   12e38:	ldr	r0, [fp, #16]
   12e3c:	str	r3, [fp, #-72]	; 0xffffffb8
   12e40:	str	r7, [fp, #-64]	; 0xffffffc0
   12e44:	str	r2, [sp, #84]	; 0x54
   12e48:	cmp	r0, #0
   12e4c:	movwne	r0, #1
   12e50:	and	r0, r0, r3
   12e54:	str	r0, [fp, #-88]	; 0xffffffa8
   12e58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e5c:	cmp	r0, #0
   12e60:	movwne	r0, #1
   12e64:	subs	r4, r7, #2
   12e68:	mov	r7, #0
   12e6c:	and	r1, r0, r3
   12e70:	str	r4, [fp, #-80]	; 0xffffffb0
   12e74:	and	r1, r2, r1
   12e78:	str	r1, [sp, #48]	; 0x30
   12e7c:	clz	r1, r4
   12e80:	lsr	r1, r1, #5
   12e84:	and	r1, r1, r3
   12e88:	eor	r3, r3, #1
   12e8c:	str	r1, [sp, #64]	; 0x40
   12e90:	mov	r1, r4
   12e94:	str	r3, [sp, #88]	; 0x58
   12e98:	movwne	r1, #1
   12e9c:	orr	r3, r1, r3
   12ea0:	and	r1, r1, r2
   12ea4:	and	r0, r0, r1
   12ea8:	str	r3, [sp, #68]	; 0x44
   12eac:	str	r1, [fp, #-68]	; 0xffffffbc
   12eb0:	str	r0, [fp, #-60]	; 0xffffffc4
   12eb4:	eor	r0, r2, #1
   12eb8:	str	r0, [sp, #52]	; 0x34
   12ebc:	cmn	lr, #1
   12ec0:	beq	12ed0 <__assert_fail@plt+0x1b5c>
   12ec4:	cmp	r7, lr
   12ec8:	bne	12edc <__assert_fail@plt+0x1b68>
   12ecc:	b	13a04 <__assert_fail@plt+0x2690>
   12ed0:	ldrb	r0, [ip, r7]
   12ed4:	cmp	r0, #0
   12ed8:	beq	13a0c <__assert_fail@plt+0x2698>
   12edc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12ee0:	mov	r9, #0
   12ee4:	str	r5, [fp, #-48]	; 0xffffffd0
   12ee8:	cmp	r0, #0
   12eec:	beq	12f20 <__assert_fail@plt+0x1bac>
   12ef0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12ef4:	add	r4, r7, r0
   12ef8:	cmp	r0, #2
   12efc:	bcc	12f18 <__assert_fail@plt+0x1ba4>
   12f00:	cmn	lr, #1
   12f04:	bne	12f18 <__assert_fail@plt+0x1ba4>
   12f08:	mov	r0, ip
   12f0c:	bl	11260 <strlen@plt>
   12f10:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f14:	mov	lr, r0
   12f18:	cmp	r4, lr
   12f1c:	bls	12f28 <__assert_fail@plt+0x1bb4>
   12f20:	mov	r0, #0
   12f24:	b	12f68 <__assert_fail@plt+0x1bf4>
   12f28:	ldr	r1, [sp, #92]	; 0x5c
   12f2c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12f30:	add	r0, ip, r7
   12f34:	mov	r4, lr
   12f38:	bl	1114c <memcmp@plt>
   12f3c:	ldr	r2, [sp, #88]	; 0x58
   12f40:	cmp	r0, #0
   12f44:	mov	r1, r0
   12f48:	movwne	r1, #1
   12f4c:	orr	r1, r1, r2
   12f50:	tst	r1, #1
   12f54:	beq	13a9c <__assert_fail@plt+0x2728>
   12f58:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f5c:	clz	r0, r0
   12f60:	mov	lr, r4
   12f64:	lsr	r0, r0, #5
   12f68:	str	r0, [fp, #-52]	; 0xffffffcc
   12f6c:	ldrb	r5, [ip, r7]
   12f70:	cmp	r5, #126	; 0x7e
   12f74:	bhi	1332c <__assert_fail@plt+0x1fb8>
   12f78:	add	r3, pc, #16
   12f7c:	mov	r4, #1
   12f80:	mov	r2, #110	; 0x6e
   12f84:	mov	r0, #97	; 0x61
   12f88:	mov	r1, #0
   12f8c:	ldr	pc, [r3, r5, lsl #2]
   12f90:	andeq	r3, r1, r8, lsr #4
   12f94:	andeq	r3, r1, ip, lsr #6
   12f98:	andeq	r3, r1, ip, lsr #6
   12f9c:	andeq	r3, r1, ip, lsr #6
   12fa0:	andeq	r3, r1, ip, lsr #6
   12fa4:	andeq	r3, r1, ip, lsr #6
   12fa8:	andeq	r3, r1, ip, lsr #6
   12fac:	andeq	r3, r1, r0, ror #7
   12fb0:	andeq	r3, r1, r8, lsl #4
   12fb4:	andeq	r3, r1, r0, lsl #4
   12fb8:	andeq	r3, r1, r4, lsl r2
   12fbc:	muleq	r1, r4, r2
   12fc0:	strdeq	r3, [r1], -r8
   12fc4:	andeq	r3, r1, r0, lsl r2
   12fc8:	andeq	r3, r1, ip, lsr #6
   12fcc:	andeq	r3, r1, ip, lsr #6
   12fd0:	andeq	r3, r1, ip, lsr #6
   12fd4:	andeq	r3, r1, ip, lsr #6
   12fd8:	andeq	r3, r1, ip, lsr #6
   12fdc:	andeq	r3, r1, ip, lsr #6
   12fe0:	andeq	r3, r1, ip, lsr #6
   12fe4:	andeq	r3, r1, ip, lsr #6
   12fe8:	andeq	r3, r1, ip, lsr #6
   12fec:	andeq	r3, r1, ip, lsr #6
   12ff0:	andeq	r3, r1, ip, lsr #6
   12ff4:	andeq	r3, r1, ip, lsr #6
   12ff8:	andeq	r3, r1, ip, lsr #6
   12ffc:	andeq	r3, r1, ip, lsr #6
   13000:	andeq	r3, r1, ip, lsr #6
   13004:	andeq	r3, r1, ip, lsr #6
   13008:	andeq	r3, r1, ip, lsr #6
   1300c:	andeq	r3, r1, ip, lsr #6
   13010:	muleq	r1, r8, r3
   13014:	muleq	r1, ip, r3
   13018:	muleq	r1, ip, r3
   1301c:	andeq	r3, r1, r0, lsr #3
   13020:	muleq	r1, ip, r3
   13024:	andeq	r3, r1, ip, lsl #3
   13028:	muleq	r1, ip, r3
   1302c:	muleq	r1, ip, r2
   13030:	muleq	r1, ip, r3
   13034:	muleq	r1, ip, r3
   13038:	muleq	r1, ip, r3
   1303c:	andeq	r3, r1, ip, lsl #3
   13040:	andeq	r3, r1, ip, lsl #3
   13044:	andeq	r3, r1, ip, lsl #3
   13048:	andeq	r3, r1, ip, lsl #3
   1304c:	andeq	r3, r1, ip, lsl #3
   13050:	andeq	r3, r1, ip, lsl #3
   13054:	andeq	r3, r1, ip, lsl #3
   13058:	andeq	r3, r1, ip, lsl #3
   1305c:	andeq	r3, r1, ip, lsl #3
   13060:	andeq	r3, r1, ip, lsl #3
   13064:	andeq	r3, r1, ip, lsl #3
   13068:	andeq	r3, r1, ip, lsl #3
   1306c:	andeq	r3, r1, ip, lsl #3
   13070:	andeq	r3, r1, ip, lsl #3
   13074:	andeq	r3, r1, ip, lsl #3
   13078:	andeq	r3, r1, ip, lsl #3
   1307c:	muleq	r1, ip, r3
   13080:	muleq	r1, ip, r3
   13084:	muleq	r1, ip, r3
   13088:	muleq	r1, ip, r3
   1308c:	andeq	r3, r1, r8, ror #4
   13090:	andeq	r3, r1, ip, lsr #6
   13094:	andeq	r3, r1, ip, lsl #3
   13098:	andeq	r3, r1, ip, lsl #3
   1309c:	andeq	r3, r1, ip, lsl #3
   130a0:	andeq	r3, r1, ip, lsl #3
   130a4:	andeq	r3, r1, ip, lsl #3
   130a8:	andeq	r3, r1, ip, lsl #3
   130ac:	andeq	r3, r1, ip, lsl #3
   130b0:	andeq	r3, r1, ip, lsl #3
   130b4:	andeq	r3, r1, ip, lsl #3
   130b8:	andeq	r3, r1, ip, lsl #3
   130bc:	andeq	r3, r1, ip, lsl #3
   130c0:	andeq	r3, r1, ip, lsl #3
   130c4:	andeq	r3, r1, ip, lsl #3
   130c8:	andeq	r3, r1, ip, lsl #3
   130cc:	andeq	r3, r1, ip, lsl #3
   130d0:	andeq	r3, r1, ip, lsl #3
   130d4:	andeq	r3, r1, ip, lsl #3
   130d8:	andeq	r3, r1, ip, lsl #3
   130dc:	andeq	r3, r1, ip, lsl #3
   130e0:	andeq	r3, r1, ip, lsl #3
   130e4:	andeq	r3, r1, ip, lsl #3
   130e8:	andeq	r3, r1, ip, lsl #3
   130ec:	andeq	r3, r1, ip, lsl #3
   130f0:	andeq	r3, r1, ip, lsl #3
   130f4:	andeq	r3, r1, ip, lsl #3
   130f8:	andeq	r3, r1, ip, lsl #3
   130fc:	muleq	r1, ip, r3
   13100:	ldrdeq	r3, [r1], -r4
   13104:	andeq	r3, r1, ip, lsl #3
   13108:	muleq	r1, ip, r3
   1310c:	andeq	r3, r1, ip, lsl #3
   13110:	muleq	r1, ip, r3
   13114:	andeq	r3, r1, ip, lsl #3
   13118:	andeq	r3, r1, ip, lsl #3
   1311c:	andeq	r3, r1, ip, lsl #3
   13120:	andeq	r3, r1, ip, lsl #3
   13124:	andeq	r3, r1, ip, lsl #3
   13128:	andeq	r3, r1, ip, lsl #3
   1312c:	andeq	r3, r1, ip, lsl #3
   13130:	andeq	r3, r1, ip, lsl #3
   13134:	andeq	r3, r1, ip, lsl #3
   13138:	andeq	r3, r1, ip, lsl #3
   1313c:	andeq	r3, r1, ip, lsl #3
   13140:	andeq	r3, r1, ip, lsl #3
   13144:	andeq	r3, r1, ip, lsl #3
   13148:	andeq	r3, r1, ip, lsl #3
   1314c:	andeq	r3, r1, ip, lsl #3
   13150:	andeq	r3, r1, ip, lsl #3
   13154:	andeq	r3, r1, ip, lsl #3
   13158:	andeq	r3, r1, ip, lsl #3
   1315c:	andeq	r3, r1, ip, lsl #3
   13160:	andeq	r3, r1, ip, lsl #3
   13164:	andeq	r3, r1, ip, lsl #3
   13168:	andeq	r3, r1, ip, lsl #3
   1316c:	andeq	r3, r1, ip, lsl #3
   13170:	andeq	r3, r1, ip, lsl #3
   13174:	andeq	r3, r1, ip, lsl #3
   13178:	andeq	r3, r1, ip, lsl #3
   1317c:			; <UNDEFINED> instruction: 0x000131b4
   13180:	muleq	r1, ip, r3
   13184:			; <UNDEFINED> instruction: 0x000131b4
   13188:	andeq	r3, r1, r0, lsr #3
   1318c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13190:	cmp	r0, #0
   13194:	beq	133f4 <__assert_fail@plt+0x2080>
   13198:	ldr	r0, [fp, #16]
   1319c:	b	133f8 <__assert_fail@plt+0x2084>
   131a0:	mov	r4, #0
   131a4:	cmp	r7, #0
   131a8:	beq	13398 <__assert_fail@plt+0x2024>
   131ac:	mov	r9, #0
   131b0:	b	1318c <__assert_fail@plt+0x1e18>
   131b4:	mov	r4, #0
   131b8:	cmn	lr, #1
   131bc:	beq	1337c <__assert_fail@plt+0x2008>
   131c0:	cmp	r7, #0
   131c4:	bne	131ac <__assert_fail@plt+0x1e38>
   131c8:	cmp	lr, #1
   131cc:	beq	13398 <__assert_fail@plt+0x2024>
   131d0:	b	131ac <__assert_fail@plt+0x1e38>
   131d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   131d8:	cmp	r0, #2
   131dc:	bne	133bc <__assert_fail@plt+0x2048>
   131e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   131e4:	tst	r0, #1
   131e8:	bne	13ab8 <__assert_fail@plt+0x2744>
   131ec:	mov	r9, #0
   131f0:	mov	r0, #92	; 0x5c
   131f4:	b	133d0 <__assert_fail@plt+0x205c>
   131f8:	mov	r0, #102	; 0x66
   131fc:	b	133e0 <__assert_fail@plt+0x206c>
   13200:	mov	r2, #116	; 0x74
   13204:	b	13214 <__assert_fail@plt+0x1ea0>
   13208:	mov	r0, #98	; 0x62
   1320c:	b	133e0 <__assert_fail@plt+0x206c>
   13210:	mov	r2, #114	; 0x72
   13214:	ldr	r0, [sp, #68]	; 0x44
   13218:	tst	r0, #1
   1321c:	mov	r0, r2
   13220:	bne	133e0 <__assert_fail@plt+0x206c>
   13224:	b	13ab8 <__assert_fail@plt+0x2744>
   13228:	ldr	r0, [sp, #84]	; 0x54
   1322c:	tst	r0, #1
   13230:	beq	134d0 <__assert_fail@plt+0x215c>
   13234:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13238:	tst	r0, #1
   1323c:	bne	13bc8 <__assert_fail@plt+0x2854>
   13240:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13244:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13248:	cmp	r0, #2
   1324c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13250:	movwne	r0, #1
   13254:	orr	r0, r0, r2
   13258:	tst	r0, #1
   1325c:	beq	138a0 <__assert_fail@plt+0x252c>
   13260:	mov	r0, r8
   13264:	b	138d4 <__assert_fail@plt+0x2560>
   13268:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1326c:	mov	r9, #0
   13270:	mov	r5, #63	; 0x3f
   13274:	cmp	r0, #5
   13278:	beq	13684 <__assert_fail@plt+0x2310>
   1327c:	cmp	r0, #2
   13280:	bne	13728 <__assert_fail@plt+0x23b4>
   13284:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13288:	tst	r0, #1
   1328c:	beq	1372c <__assert_fail@plt+0x23b8>
   13290:	b	13ab8 <__assert_fail@plt+0x2744>
   13294:	mov	r0, #118	; 0x76
   13298:	b	133e0 <__assert_fail@plt+0x206c>
   1329c:	mov	r0, #1
   132a0:	mov	r5, #39	; 0x27
   132a4:	str	r0, [sp, #60]	; 0x3c
   132a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   132ac:	cmp	r0, #2
   132b0:	bne	13324 <__assert_fail@plt+0x1fb0>
   132b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132b8:	tst	r0, #1
   132bc:	bne	13ab8 <__assert_fail@plt+0x2744>
   132c0:	ldr	r2, [sp, #56]	; 0x38
   132c4:	clz	r1, sl
   132c8:	mov	r9, #0
   132cc:	lsr	r1, r1, #5
   132d0:	cmp	r2, #0
   132d4:	mov	r0, r2
   132d8:	movwne	r0, #1
   132dc:	orrs	r0, r0, r1
   132e0:	moveq	r2, sl
   132e4:	moveq	sl, r0
   132e8:	cmp	r8, sl
   132ec:	str	r2, [sp, #56]	; 0x38
   132f0:	movcc	r0, #39	; 0x27
   132f4:	strbcc	r0, [r6, r8]
   132f8:	add	r0, r8, #1
   132fc:	cmp	r0, sl
   13300:	movcc	r1, #92	; 0x5c
   13304:	strbcc	r1, [r6, r0]
   13308:	add	r0, r8, #2
   1330c:	add	r8, r8, #3
   13310:	cmp	r0, sl
   13314:	movcc	r1, #39	; 0x27
   13318:	strbcc	r1, [r6, r0]
   1331c:	mov	r0, #0
   13320:	str	r0, [fp, #-56]	; 0xffffffc8
   13324:	mov	r4, #1
   13328:	b	1318c <__assert_fail@plt+0x1e18>
   1332c:	ldr	r0, [sp, #40]	; 0x28
   13330:	cmp	r0, #1
   13334:	bne	134fc <__assert_fail@plt+0x2188>
   13338:	str	lr, [sp, #28]
   1333c:	bl	1123c <__ctype_b_loc@plt>
   13340:	ldr	r0, [r0]
   13344:	ldr	ip, [fp, #-84]	; 0xffffffac
   13348:	mov	r1, #1
   1334c:	add	r0, r0, r5, lsl #1
   13350:	ldrb	r0, [r0, #1]
   13354:	ubfx	r4, r0, #6, #1
   13358:	ldr	r0, [sp, #52]	; 0x34
   1335c:	mov	r2, r1
   13360:	cmp	r1, #1
   13364:	orr	r0, r4, r0
   13368:	bhi	13734 <__assert_fail@plt+0x23c0>
   1336c:	tst	r0, #1
   13370:	beq	13734 <__assert_fail@plt+0x23c0>
   13374:	ldr	lr, [sp, #28]
   13378:	b	1318c <__assert_fail@plt+0x1e18>
   1337c:	cmp	r7, #0
   13380:	ldrbeq	r0, [ip, #1]
   13384:	cmpeq	r0, #0
   13388:	beq	13398 <__assert_fail@plt+0x2024>
   1338c:	mvn	lr, #0
   13390:	mov	r9, #0
   13394:	b	1318c <__assert_fail@plt+0x1e18>
   13398:	mov	r1, #1
   1339c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   133a0:	cmp	r0, #2
   133a4:	bne	133b4 <__assert_fail@plt+0x2040>
   133a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   133ac:	tst	r0, #1
   133b0:	bne	13ab8 <__assert_fail@plt+0x2744>
   133b4:	mov	r4, r1
   133b8:	b	1318c <__assert_fail@plt+0x1e18>
   133bc:	ldr	r1, [sp, #48]	; 0x30
   133c0:	mov	r9, #0
   133c4:	mov	r0, #92	; 0x5c
   133c8:	cmp	r1, #0
   133cc:	beq	133e0 <__assert_fail@plt+0x206c>
   133d0:	mov	r4, #0
   133d4:	cmp	r9, #0
   133d8:	beq	1396c <__assert_fail@plt+0x25f8>
   133dc:	b	139a8 <__assert_fail@plt+0x2634>
   133e0:	ldr	r1, [sp, #84]	; 0x54
   133e4:	mov	r4, #0
   133e8:	mov	r9, #0
   133ec:	tst	r1, #1
   133f0:	bne	13430 <__assert_fail@plt+0x20bc>
   133f4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   133f8:	cmp	r0, #0
   133fc:	mov	r0, r5
   13400:	beq	13424 <__assert_fail@plt+0x20b0>
   13404:	ldr	r1, [fp, #16]
   13408:	ubfx	r0, r5, #5, #3
   1340c:	mov	r2, #1
   13410:	ldr	r0, [r1, r0, lsl #2]
   13414:	and	r1, r5, #31
   13418:	tst	r0, r2, lsl r1
   1341c:	mov	r0, r5
   13420:	bne	13430 <__assert_fail@plt+0x20bc>
   13424:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13428:	cmp	r1, #0
   1342c:	beq	13964 <__assert_fail@plt+0x25f0>
   13430:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13434:	tst	r1, #1
   13438:	bne	13a90 <__assert_fail@plt+0x271c>
   1343c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13440:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13444:	cmp	r1, #2
   13448:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1344c:	movwne	r1, #1
   13450:	orr	r1, r1, r2
   13454:	tst	r1, #1
   13458:	beq	13464 <__assert_fail@plt+0x20f0>
   1345c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13460:	b	134a0 <__assert_fail@plt+0x212c>
   13464:	cmp	r8, sl
   13468:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1346c:	movcc	r1, #39	; 0x27
   13470:	strbcc	r1, [r6, r8]
   13474:	add	r1, r8, #1
   13478:	cmp	r1, sl
   1347c:	movcc	r2, #36	; 0x24
   13480:	strbcc	r2, [r6, r1]
   13484:	add	r1, r8, #2
   13488:	add	r8, r8, #3
   1348c:	cmp	r1, sl
   13490:	movcc	r2, #39	; 0x27
   13494:	strbcc	r2, [r6, r1]
   13498:	mov	r1, #1
   1349c:	str	r1, [fp, #-56]	; 0xffffffc8
   134a0:	cmp	r8, sl
   134a4:	movcc	r1, #92	; 0x5c
   134a8:	strbcc	r1, [r6, r8]
   134ac:	add	r8, r8, #1
   134b0:	cmp	r8, sl
   134b4:	and	r5, r5, r4
   134b8:	add	r7, r7, #1
   134bc:	strbcc	r0, [r6, r8]
   134c0:	add	r8, r8, #1
   134c4:	cmn	lr, #1
   134c8:	bne	12ec4 <__assert_fail@plt+0x1b50>
   134cc:	b	12ed0 <__assert_fail@plt+0x1b5c>
   134d0:	ldr	r0, [sp, #36]	; 0x24
   134d4:	mov	r4, #0
   134d8:	mov	r9, #0
   134dc:	mov	r5, #0
   134e0:	cmp	r0, #0
   134e4:	beq	133f4 <__assert_fail@plt+0x2080>
   134e8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   134ec:	add	r7, r7, #1
   134f0:	cmn	lr, #1
   134f4:	bne	12ec4 <__assert_fail@plt+0x1b50>
   134f8:	b	12ed0 <__assert_fail@plt+0x1b5c>
   134fc:	mov	r0, #0
   13500:	cmn	lr, #1
   13504:	str	r0, [fp, #-36]	; 0xffffffdc
   13508:	str	r0, [fp, #-40]	; 0xffffffd8
   1350c:	bne	13520 <__assert_fail@plt+0x21ac>
   13510:	mov	r0, ip
   13514:	bl	11260 <strlen@plt>
   13518:	ldr	ip, [fp, #-84]	; 0xffffffac
   1351c:	mov	lr, r0
   13520:	add	r0, ip, r7
   13524:	mov	r4, #1
   13528:	mov	r6, #0
   1352c:	str	lr, [sp, #28]
   13530:	str	r0, [sp, #24]
   13534:	sub	r0, fp, #40	; 0x28
   13538:	mov	r3, r0
   1353c:	str	r6, [sp, #44]	; 0x2c
   13540:	add	r6, r6, r7
   13544:	sub	r0, fp, #44	; 0x2c
   13548:	add	r1, ip, r6
   1354c:	sub	r2, lr, r6
   13550:	bl	16298 <__assert_fail@plt+0x4f24>
   13554:	cmp	r0, #0
   13558:	beq	139f0 <__assert_fail@plt+0x267c>
   1355c:	cmn	r0, #1
   13560:	beq	139b0 <__assert_fail@plt+0x263c>
   13564:	ldr	lr, [sp, #28]
   13568:	cmn	r0, #2
   1356c:	beq	139b8 <__assert_fail@plt+0x2644>
   13570:	ldr	r2, [sp, #64]	; 0x40
   13574:	cmp	r0, #2
   13578:	mov	r1, #0
   1357c:	movwcc	r1, #1
   13580:	eor	r2, r2, #1
   13584:	orrs	r1, r2, r1
   13588:	bne	13648 <__assert_fail@plt+0x22d4>
   1358c:	ldr	r1, [sp, #44]	; 0x2c
   13590:	ldr	r2, [sp, #24]
   13594:	add	r1, r2, r1
   13598:	mov	r2, #1
   1359c:	ldrb	r3, [r1, r2]
   135a0:	sub	r3, r3, #91	; 0x5b
   135a4:	cmp	r3, #33	; 0x21
   135a8:	bhi	1363c <__assert_fail@plt+0x22c8>
   135ac:	add	r6, pc, #0
   135b0:	ldr	pc, [r6, r3, lsl #2]
   135b4:			; <UNDEFINED> instruction: 0x00013ab0
   135b8:			; <UNDEFINED> instruction: 0x00013ab0
   135bc:	andeq	r3, r1, ip, lsr r6
   135c0:			; <UNDEFINED> instruction: 0x00013ab0
   135c4:	andeq	r3, r1, ip, lsr r6
   135c8:			; <UNDEFINED> instruction: 0x00013ab0
   135cc:	andeq	r3, r1, ip, lsr r6
   135d0:	andeq	r3, r1, ip, lsr r6
   135d4:	andeq	r3, r1, ip, lsr r6
   135d8:	andeq	r3, r1, ip, lsr r6
   135dc:	andeq	r3, r1, ip, lsr r6
   135e0:	andeq	r3, r1, ip, lsr r6
   135e4:	andeq	r3, r1, ip, lsr r6
   135e8:	andeq	r3, r1, ip, lsr r6
   135ec:	andeq	r3, r1, ip, lsr r6
   135f0:	andeq	r3, r1, ip, lsr r6
   135f4:	andeq	r3, r1, ip, lsr r6
   135f8:	andeq	r3, r1, ip, lsr r6
   135fc:	andeq	r3, r1, ip, lsr r6
   13600:	andeq	r3, r1, ip, lsr r6
   13604:	andeq	r3, r1, ip, lsr r6
   13608:	andeq	r3, r1, ip, lsr r6
   1360c:	andeq	r3, r1, ip, lsr r6
   13610:	andeq	r3, r1, ip, lsr r6
   13614:	andeq	r3, r1, ip, lsr r6
   13618:	andeq	r3, r1, ip, lsr r6
   1361c:	andeq	r3, r1, ip, lsr r6
   13620:	andeq	r3, r1, ip, lsr r6
   13624:	andeq	r3, r1, ip, lsr r6
   13628:	andeq	r3, r1, ip, lsr r6
   1362c:	andeq	r3, r1, ip, lsr r6
   13630:	andeq	r3, r1, ip, lsr r6
   13634:	andeq	r3, r1, ip, lsr r6
   13638:			; <UNDEFINED> instruction: 0x00013ab0
   1363c:	add	r2, r2, #1
   13640:	cmp	r2, r0
   13644:	bcc	1359c <__assert_fail@plt+0x2228>
   13648:	ldr	r6, [sp, #44]	; 0x2c
   1364c:	add	r6, r0, r6
   13650:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13654:	bl	11188 <iswprint@plt>
   13658:	cmp	r0, #0
   1365c:	movwne	r0, #1
   13660:	and	r4, r4, r0
   13664:	sub	r0, fp, #40	; 0x28
   13668:	bl	11140 <mbsinit@plt>
   1366c:	ldr	lr, [sp, #28]
   13670:	ldr	ip, [fp, #-84]	; 0xffffffac
   13674:	sub	r3, fp, #40	; 0x28
   13678:	cmp	r0, #0
   1367c:	beq	1353c <__assert_fail@plt+0x21c8>
   13680:	b	139f8 <__assert_fail@plt+0x2684>
   13684:	ldr	r0, [sp, #32]
   13688:	cmp	r0, #0
   1368c:	beq	13728 <__assert_fail@plt+0x23b4>
   13690:	add	r0, r7, #2
   13694:	cmp	r0, lr
   13698:	bcs	13728 <__assert_fail@plt+0x23b4>
   1369c:	add	r1, ip, r7
   136a0:	ldrb	r1, [r1, #1]
   136a4:	cmp	r1, #63	; 0x3f
   136a8:	bne	13728 <__assert_fail@plt+0x23b4>
   136ac:	ldrb	r5, [ip, r0]
   136b0:	sub	r1, r5, #33	; 0x21
   136b4:	cmp	r1, #29
   136b8:	bhi	13728 <__assert_fail@plt+0x23b4>
   136bc:	movw	r3, #20929	; 0x51c1
   136c0:	mov	r2, #1
   136c4:	movt	r3, #14336	; 0x3800
   136c8:	tst	r3, r2, lsl r1
   136cc:	beq	13728 <__assert_fail@plt+0x23b4>
   136d0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   136d4:	tst	r1, #1
   136d8:	bne	13bd0 <__assert_fail@plt+0x285c>
   136dc:	cmp	r8, sl
   136e0:	mov	r7, r0
   136e4:	mov	r4, #0
   136e8:	movcc	r1, #63	; 0x3f
   136ec:	strbcc	r1, [r6, r8]
   136f0:	add	r1, r8, #1
   136f4:	cmp	r1, sl
   136f8:	movcc	r2, #34	; 0x22
   136fc:	strbcc	r2, [r6, r1]
   13700:	add	r1, r8, #2
   13704:	cmp	r1, sl
   13708:	movcc	r2, #34	; 0x22
   1370c:	strbcc	r2, [r6, r1]
   13710:	add	r1, r8, #3
   13714:	add	r8, r8, #4
   13718:	cmp	r1, sl
   1371c:	movcc	r2, #63	; 0x3f
   13720:	strbcc	r2, [r6, r1]
   13724:	b	1318c <__assert_fail@plt+0x1e18>
   13728:	mov	r5, #63	; 0x3f
   1372c:	mov	r4, #0
   13730:	b	1318c <__assert_fail@plt+0x1e18>
   13734:	add	r1, r2, r7
   13738:	ldr	lr, [sp, #28]
   1373c:	mov	r3, #0
   13740:	str	r1, [sp, #44]	; 0x2c
   13744:	add	r1, r7, #1
   13748:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1374c:	tst	r0, #1
   13750:	bne	13824 <__assert_fail@plt+0x24b0>
   13754:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13758:	tst	r2, #1
   1375c:	bne	13b18 <__assert_fail@plt+0x27a4>
   13760:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13764:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13768:	cmp	r7, #2
   1376c:	movwne	r3, #1
   13770:	orr	r3, r3, r2
   13774:	tst	r3, #1
   13778:	bne	137b4 <__assert_fail@plt+0x2440>
   1377c:	cmp	r8, sl
   13780:	add	r3, r8, #1
   13784:	movcc	r2, #39	; 0x27
   13788:	strbcc	r2, [r6, r8]
   1378c:	cmp	r3, sl
   13790:	movcc	r2, #36	; 0x24
   13794:	strbcc	r2, [r6, r3]
   13798:	add	r3, r8, #2
   1379c:	add	r8, r8, #3
   137a0:	cmp	r3, sl
   137a4:	movcc	r2, #39	; 0x27
   137a8:	strbcc	r2, [r6, r3]
   137ac:	mov	r2, #1
   137b0:	str	r2, [fp, #-56]	; 0xffffffc8
   137b4:	cmp	r8, sl
   137b8:	movcc	r3, #92	; 0x5c
   137bc:	strbcc	r3, [r6, r8]
   137c0:	add	r3, r8, #1
   137c4:	cmp	r3, sl
   137c8:	andcc	r7, r5, #192	; 0xc0
   137cc:	movcc	r2, #48	; 0x30
   137d0:	orrcc	r7, r2, r7, lsr #6
   137d4:	strbcc	r7, [r6, r3]
   137d8:	add	r3, r8, #2
   137dc:	add	r8, r8, #3
   137e0:	cmp	r3, sl
   137e4:	lsrcc	r7, r5, #3
   137e8:	movcc	r2, #6
   137ec:	bficc	r7, r2, #3, #29
   137f0:	mov	r2, #6
   137f4:	strbcc	r7, [r6, r3]
   137f8:	bfi	r5, r2, #3, #29
   137fc:	mov	r3, #1
   13800:	b	13848 <__assert_fail@plt+0x24d4>
   13804:	cmp	r8, sl
   13808:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1380c:	strbcc	r5, [r6, r8]
   13810:	add	r8, r8, #1
   13814:	ldrb	r5, [ip, r1]
   13818:	add	r1, r1, #1
   1381c:	tst	r0, #1
   13820:	beq	13754 <__assert_fail@plt+0x23e0>
   13824:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13828:	tst	r2, #1
   1382c:	beq	13840 <__assert_fail@plt+0x24cc>
   13830:	cmp	r8, sl
   13834:	movcc	r7, #92	; 0x5c
   13838:	strbcc	r7, [r6, r8]
   1383c:	add	r8, r8, #1
   13840:	mov	r2, #0
   13844:	str	r2, [fp, #-52]	; 0xffffffcc
   13848:	ldr	r2, [sp, #44]	; 0x2c
   1384c:	and	r9, r3, #1
   13850:	cmp	r2, r1
   13854:	bls	13954 <__assert_fail@plt+0x25e0>
   13858:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1385c:	cmp	r9, #0
   13860:	movwne	r9, #1
   13864:	mvn	r7, r2
   13868:	orr	r7, r7, r9
   1386c:	tst	r7, #1
   13870:	bne	13804 <__assert_fail@plt+0x2490>
   13874:	cmp	r8, sl
   13878:	movcc	r7, #39	; 0x27
   1387c:	strbcc	r7, [r6, r8]
   13880:	add	r7, r8, #1
   13884:	add	r8, r8, #2
   13888:	cmp	r7, sl
   1388c:	movcc	r2, #39	; 0x27
   13890:	strbcc	r2, [r6, r7]
   13894:	mov	r2, #0
   13898:	str	r2, [fp, #-56]	; 0xffffffc8
   1389c:	b	13804 <__assert_fail@plt+0x2490>
   138a0:	cmp	r8, sl
   138a4:	mov	r2, #1
   138a8:	movcc	r0, #39	; 0x27
   138ac:	strbcc	r0, [r6, r8]
   138b0:	add	r0, r8, #1
   138b4:	cmp	r0, sl
   138b8:	movcc	r1, #36	; 0x24
   138bc:	strbcc	r1, [r6, r0]
   138c0:	add	r0, r8, #2
   138c4:	cmp	r0, sl
   138c8:	movcc	r1, #39	; 0x27
   138cc:	strbcc	r1, [r6, r0]
   138d0:	add	r0, r8, #3
   138d4:	cmp	r0, sl
   138d8:	add	r8, r0, #1
   138dc:	str	r2, [fp, #-56]	; 0xffffffc8
   138e0:	movcc	r1, #92	; 0x5c
   138e4:	strbcc	r1, [r6, r0]
   138e8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   138ec:	cmp	r1, #2
   138f0:	beq	13944 <__assert_fail@plt+0x25d0>
   138f4:	add	r1, r7, #1
   138f8:	mov	r4, #0
   138fc:	mov	r9, #1
   13900:	mov	r5, #48	; 0x30
   13904:	cmp	r1, lr
   13908:	bcs	1318c <__assert_fail@plt+0x1e18>
   1390c:	ldrb	r1, [ip, r1]
   13910:	sub	r1, r1, #48	; 0x30
   13914:	uxtb	r1, r1
   13918:	cmp	r1, #9
   1391c:	bhi	1318c <__assert_fail@plt+0x1e18>
   13920:	cmp	r8, sl
   13924:	movcc	r1, #48	; 0x30
   13928:	strbcc	r1, [r6, r8]
   1392c:	add	r1, r0, #2
   13930:	add	r8, r0, #3
   13934:	cmp	r1, sl
   13938:	movcc	r2, #48	; 0x30
   1393c:	strbcc	r2, [r6, r1]
   13940:	b	1318c <__assert_fail@plt+0x1e18>
   13944:	mov	r0, #48	; 0x30
   13948:	mov	r9, #1
   1394c:	mov	r4, #0
   13950:	b	13424 <__assert_fail@plt+0x20b0>
   13954:	cmp	r9, #0
   13958:	sub	r7, r1, #1
   1395c:	mov	r0, r5
   13960:	movwne	r9, #1
   13964:	cmp	r9, #0
   13968:	bne	139a8 <__assert_fail@plt+0x2634>
   1396c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13970:	tst	r1, #1
   13974:	beq	139a8 <__assert_fail@plt+0x2634>
   13978:	cmp	r8, sl
   1397c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13980:	movcc	r1, #39	; 0x27
   13984:	strbcc	r1, [r6, r8]
   13988:	add	r1, r8, #1
   1398c:	add	r8, r8, #2
   13990:	cmp	r1, sl
   13994:	movcc	r2, #39	; 0x27
   13998:	strbcc	r2, [r6, r1]
   1399c:	mov	r1, #0
   139a0:	str	r1, [fp, #-56]	; 0xffffffc8
   139a4:	b	134b0 <__assert_fail@plt+0x213c>
   139a8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   139ac:	b	134b0 <__assert_fail@plt+0x213c>
   139b0:	mov	r4, #0
   139b4:	b	139f0 <__assert_fail@plt+0x267c>
   139b8:	mov	r4, #0
   139bc:	cmp	lr, r6
   139c0:	bls	139f0 <__assert_fail@plt+0x267c>
   139c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   139c8:	ldr	r6, [sp, #44]	; 0x2c
   139cc:	ldr	r0, [sp, #24]
   139d0:	ldrb	r0, [r0, r6]
   139d4:	cmp	r0, #0
   139d8:	beq	139f8 <__assert_fail@plt+0x2684>
   139dc:	add	r6, r6, #1
   139e0:	add	r0, r7, r6
   139e4:	cmp	r0, lr
   139e8:	bcc	139cc <__assert_fail@plt+0x2658>
   139ec:	b	139f8 <__assert_fail@plt+0x2684>
   139f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   139f4:	ldr	r6, [sp, #44]	; 0x2c
   139f8:	mov	r1, r6
   139fc:	ldr	r6, [sp, #80]	; 0x50
   13a00:	b	13358 <__assert_fail@plt+0x1fe4>
   13a04:	mov	lr, r7
   13a08:	b	13a10 <__assert_fail@plt+0x269c>
   13a0c:	mvn	lr, #0
   13a10:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13a14:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13a18:	eor	r0, r7, #2
   13a1c:	orr	r0, r0, r8
   13a20:	clz	r0, r0
   13a24:	lsr	r0, r0, #5
   13a28:	tst	r1, r0
   13a2c:	bne	13ab8 <__assert_fail@plt+0x2744>
   13a30:	mov	r0, r1
   13a34:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13a38:	cmp	r7, #2
   13a3c:	movwne	r1, #1
   13a40:	orr	r0, r0, r1
   13a44:	tst	r0, #1
   13a48:	ldreq	r0, [sp, #60]	; 0x3c
   13a4c:	eoreq	r0, r0, #1
   13a50:	tsteq	r0, #1
   13a54:	bne	13b64 <__assert_fail@plt+0x27f0>
   13a58:	mov	r9, lr
   13a5c:	tst	r5, #1
   13a60:	bne	13b20 <__assert_fail@plt+0x27ac>
   13a64:	ldr	r6, [sp, #56]	; 0x38
   13a68:	mov	r4, #0
   13a6c:	cmp	r6, #0
   13a70:	beq	13b5c <__assert_fail@plt+0x27e8>
   13a74:	ldr	r0, [sp, #84]	; 0x54
   13a78:	mov	r1, #0
   13a7c:	cmp	sl, #0
   13a80:	mov	r5, #0
   13a84:	str	r1, [fp, #-72]	; 0xffffffb8
   13a88:	beq	12c58 <__assert_fail@plt+0x18e4>
   13a8c:	b	13b64 <__assert_fail@plt+0x27f0>
   13a90:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13a94:	ldr	r2, [sp, #84]	; 0x54
   13a98:	b	13ac0 <__assert_fail@plt+0x274c>
   13a9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13aa0:	mov	r2, #1
   13aa4:	mov	lr, r4
   13aa8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13aac:	b	13ac0 <__assert_fail@plt+0x274c>
   13ab0:	ldr	r6, [sp, #80]	; 0x50
   13ab4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ab8:	ldr	r2, [sp, #84]	; 0x54
   13abc:	mov	r7, #2
   13ac0:	mov	r0, #0
   13ac4:	ldr	r1, [fp, #12]
   13ac8:	tst	r2, #1
   13acc:	mov	r2, r7
   13ad0:	mov	r3, lr
   13ad4:	str	r0, [sp, #8]
   13ad8:	ldr	r0, [sp, #72]	; 0x48
   13adc:	movwne	r2, #4
   13ae0:	cmp	r7, #2
   13ae4:	movne	r2, r7
   13ae8:	str	r2, [sp]
   13aec:	mov	r2, ip
   13af0:	bic	r1, r1, #2
   13af4:	str	r0, [sp, #12]
   13af8:	ldr	r0, [sp, #76]	; 0x4c
   13afc:	str	r1, [sp, #4]
   13b00:	mov	r1, sl
   13b04:	str	r0, [sp, #16]
   13b08:	mov	r0, r6
   13b0c:	bl	12bd8 <__assert_fail@plt+0x1864>
   13b10:	mov	r8, r0
   13b14:	b	13bbc <__assert_fail@plt+0x2848>
   13b18:	ldr	r2, [sp, #84]	; 0x54
   13b1c:	b	13ac0 <__assert_fail@plt+0x274c>
   13b20:	mov	r0, #5
   13b24:	ldr	r1, [sp, #56]	; 0x38
   13b28:	ldr	r2, [fp, #-84]	; 0xffffffac
   13b2c:	mov	r3, r9
   13b30:	str	r0, [sp]
   13b34:	ldr	r0, [fp, #12]
   13b38:	str	r0, [sp, #4]
   13b3c:	ldr	r0, [fp, #16]
   13b40:	str	r0, [sp, #8]
   13b44:	ldr	r0, [sp, #72]	; 0x48
   13b48:	str	r0, [sp, #12]
   13b4c:	ldr	r0, [sp, #76]	; 0x4c
   13b50:	str	r0, [sp, #16]
   13b54:	ldr	r0, [sp, #80]	; 0x50
   13b58:	b	13b0c <__assert_fail@plt+0x2798>
   13b5c:	mov	r0, #0
   13b60:	str	r0, [fp, #-72]	; 0xffffffb8
   13b64:	ldr	r1, [sp, #92]	; 0x5c
   13b68:	cmp	r1, #0
   13b6c:	beq	13bac <__assert_fail@plt+0x2838>
   13b70:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b74:	ldr	r2, [sp, #80]	; 0x50
   13b78:	tst	r0, #1
   13b7c:	bne	13bb0 <__assert_fail@plt+0x283c>
   13b80:	ldrb	r0, [r1]
   13b84:	cmp	r0, #0
   13b88:	beq	13bb0 <__assert_fail@plt+0x283c>
   13b8c:	add	r1, r1, #1
   13b90:	cmp	r8, sl
   13b94:	strbcc	r0, [r2, r8]
   13b98:	add	r8, r8, #1
   13b9c:	ldrb	r0, [r1], #1
   13ba0:	cmp	r0, #0
   13ba4:	bne	13b90 <__assert_fail@plt+0x281c>
   13ba8:	b	13bb0 <__assert_fail@plt+0x283c>
   13bac:	ldr	r2, [sp, #80]	; 0x50
   13bb0:	cmp	r8, sl
   13bb4:	movcc	r0, #0
   13bb8:	strbcc	r0, [r2, r8]
   13bbc:	mov	r0, r8
   13bc0:	sub	sp, fp, #28
   13bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bc8:	mov	r2, #1
   13bcc:	b	13aa8 <__assert_fail@plt+0x2734>
   13bd0:	ldr	r2, [sp, #84]	; 0x54
   13bd4:	mov	r7, #5
   13bd8:	b	13ac0 <__assert_fail@plt+0x274c>
   13bdc:	bl	11350 <abort@plt>
   13be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13be4:	add	fp, sp, #28
   13be8:	sub	sp, sp, #28
   13bec:	movw	r5, #33256	; 0x81e8
   13bf0:	cmp	r2, #0
   13bf4:	mov	r4, r1
   13bf8:	mov	r7, r0
   13bfc:	str	r0, [sp, #20]
   13c00:	movt	r5, #2
   13c04:	movne	r5, r2
   13c08:	bl	11278 <__errno_location@plt>
   13c0c:	mov	sl, r0
   13c10:	ldm	r5, {r0, r1}
   13c14:	ldr	r2, [r5, #40]	; 0x28
   13c18:	ldr	r3, [r5, #44]	; 0x2c
   13c1c:	add	r9, r5, #8
   13c20:	ldr	r6, [sl]
   13c24:	orr	r8, r1, #1
   13c28:	mov	r1, #0
   13c2c:	str	r6, [sp, #24]
   13c30:	stm	sp, {r0, r8, r9}
   13c34:	str	r2, [sp, #12]
   13c38:	str	r3, [sp, #16]
   13c3c:	mov	r0, #0
   13c40:	mov	r2, r7
   13c44:	mov	r3, r4
   13c48:	mov	r6, r4
   13c4c:	bl	12bd8 <__assert_fail@plt+0x1864>
   13c50:	add	r7, r0, #1
   13c54:	mov	r0, r7
   13c58:	bl	1519c <__assert_fail@plt+0x3e28>
   13c5c:	mov	r4, r0
   13c60:	ldr	r0, [r5]
   13c64:	ldr	r2, [r5, #44]	; 0x2c
   13c68:	ldr	r1, [r5, #40]	; 0x28
   13c6c:	mov	r3, r6
   13c70:	stm	sp, {r0, r8, r9}
   13c74:	str	r2, [sp, #16]
   13c78:	str	r1, [sp, #12]
   13c7c:	mov	r0, r4
   13c80:	mov	r1, r7
   13c84:	ldr	r2, [sp, #20]
   13c88:	bl	12bd8 <__assert_fail@plt+0x1864>
   13c8c:	ldr	r0, [sp, #24]
   13c90:	str	r0, [sl]
   13c94:	mov	r0, r4
   13c98:	sub	sp, fp, #28
   13c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ca4:	add	fp, sp, #28
   13ca8:	sub	sp, sp, #36	; 0x24
   13cac:	movw	r8, #33256	; 0x81e8
   13cb0:	cmp	r3, #0
   13cb4:	mov	r4, r2
   13cb8:	str	r2, [sp, #24]
   13cbc:	mov	r5, r1
   13cc0:	mov	r6, r0
   13cc4:	str	r0, [sp, #20]
   13cc8:	movt	r8, #2
   13ccc:	movne	r8, r3
   13cd0:	bl	11278 <__errno_location@plt>
   13cd4:	str	r0, [sp, #28]
   13cd8:	cmp	r4, #0
   13cdc:	add	sl, r8, #8
   13ce0:	ldm	r8, {r3, r9}
   13ce4:	ldr	r7, [r0]
   13ce8:	ldr	r1, [r8, #40]	; 0x28
   13cec:	ldr	r2, [r8, #44]	; 0x2c
   13cf0:	mov	r0, #0
   13cf4:	orreq	r9, r9, #1
   13cf8:	str	r7, [sp, #32]
   13cfc:	mov	r7, r5
   13d00:	stm	sp, {r3, r9, sl}
   13d04:	str	r1, [sp, #12]
   13d08:	str	r2, [sp, #16]
   13d0c:	mov	r1, #0
   13d10:	mov	r2, r6
   13d14:	mov	r3, r5
   13d18:	bl	12bd8 <__assert_fail@plt+0x1864>
   13d1c:	add	r4, r0, #1
   13d20:	mov	r5, r0
   13d24:	mov	r0, r4
   13d28:	bl	1519c <__assert_fail@plt+0x3e28>
   13d2c:	mov	r6, r0
   13d30:	ldr	r0, [r8]
   13d34:	ldr	r2, [r8, #44]	; 0x2c
   13d38:	ldr	r1, [r8, #40]	; 0x28
   13d3c:	mov	r3, r7
   13d40:	stm	sp, {r0, r9, sl}
   13d44:	str	r2, [sp, #16]
   13d48:	str	r1, [sp, #12]
   13d4c:	mov	r0, r6
   13d50:	mov	r1, r4
   13d54:	ldr	r2, [sp, #20]
   13d58:	bl	12bd8 <__assert_fail@plt+0x1864>
   13d5c:	ldr	r0, [sp, #24]
   13d60:	ldr	r1, [sp, #32]
   13d64:	ldr	r2, [sp, #28]
   13d68:	cmp	r0, #0
   13d6c:	str	r1, [r2]
   13d70:	strne	r5, [r0]
   13d74:	mov	r0, r6
   13d78:	sub	sp, fp, #28
   13d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d84:	add	fp, sp, #24
   13d88:	movw	r5, #33060	; 0x8124
   13d8c:	movw	r8, #33056	; 0x8120
   13d90:	movt	r5, #2
   13d94:	movt	r8, #2
   13d98:	ldr	r0, [r5]
   13d9c:	ldr	r4, [r8]
   13da0:	cmp	r0, #2
   13da4:	blt	13dd0 <__assert_fail@plt+0x2a5c>
   13da8:	add	r7, r4, #12
   13dac:	mov	r6, #0
   13db0:	ldr	r0, [r7, r6, lsl #3]
   13db4:	bl	12918 <__assert_fail@plt+0x15a4>
   13db8:	ldr	r1, [r5]
   13dbc:	add	r2, r6, #2
   13dc0:	add	r0, r6, #1
   13dc4:	mov	r6, r0
   13dc8:	cmp	r2, r1
   13dcc:	blt	13db0 <__assert_fail@plt+0x2a3c>
   13dd0:	ldr	r0, [r4, #4]
   13dd4:	movw	r7, #33304	; 0x8218
   13dd8:	movt	r7, #2
   13ddc:	cmp	r0, r7
   13de0:	beq	13df8 <__assert_fail@plt+0x2a84>
   13de4:	bl	12918 <__assert_fail@plt+0x15a4>
   13de8:	movw	r0, #33064	; 0x8128
   13dec:	mov	r6, #256	; 0x100
   13df0:	movt	r0, #2
   13df4:	strd	r6, [r0]
   13df8:	movw	r6, #33064	; 0x8128
   13dfc:	movt	r6, #2
   13e00:	cmp	r4, r6
   13e04:	beq	13e14 <__assert_fail@plt+0x2aa0>
   13e08:	mov	r0, r4
   13e0c:	bl	12918 <__assert_fail@plt+0x15a4>
   13e10:	str	r6, [r8]
   13e14:	mov	r0, #1
   13e18:	str	r0, [r5]
   13e1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e20:	movw	r3, #33256	; 0x81e8
   13e24:	mvn	r2, #0
   13e28:	movt	r3, #2
   13e2c:	b	13e30 <__assert_fail@plt+0x2abc>
   13e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e34:	add	fp, sp, #28
   13e38:	sub	sp, sp, #44	; 0x2c
   13e3c:	mov	r7, r3
   13e40:	str	r2, [sp, #36]	; 0x24
   13e44:	str	r1, [sp, #32]
   13e48:	mov	r5, r0
   13e4c:	bl	11278 <__errno_location@plt>
   13e50:	cmp	r5, #0
   13e54:	blt	13fc0 <__assert_fail@plt+0x2c4c>
   13e58:	cmn	r5, #-2147483647	; 0x80000001
   13e5c:	beq	13fc0 <__assert_fail@plt+0x2c4c>
   13e60:	movw	r8, #33060	; 0x8124
   13e64:	movw	r4, #33056	; 0x8120
   13e68:	str	r0, [sp, #28]
   13e6c:	ldr	r0, [r0]
   13e70:	movt	r8, #2
   13e74:	movt	r4, #2
   13e78:	ldr	r1, [r8]
   13e7c:	ldr	r6, [r4]
   13e80:	str	r0, [sp, #24]
   13e84:	cmp	r1, r5
   13e88:	ble	13e94 <__assert_fail@plt+0x2b20>
   13e8c:	mov	sl, r6
   13e90:	b	13efc <__assert_fail@plt+0x2b88>
   13e94:	movw	r9, #33064	; 0x8128
   13e98:	mov	r0, #8
   13e9c:	add	r2, r5, #1
   13ea0:	str	r1, [fp, #-32]	; 0xffffffe0
   13ea4:	mvn	r3, #-2147483648	; 0x80000000
   13ea8:	movt	r9, #2
   13eac:	str	r0, [sp]
   13eb0:	sub	r2, r2, r1
   13eb4:	sub	r1, fp, #32
   13eb8:	subs	r0, r6, r9
   13ebc:	movne	r0, r6
   13ec0:	bl	1539c <__assert_fail@plt+0x4028>
   13ec4:	cmp	r6, r9
   13ec8:	mov	sl, r0
   13ecc:	str	r0, [r4]
   13ed0:	ldrdeq	r0, [r9]
   13ed4:	stmeq	sl, {r0, r1}
   13ed8:	ldr	r1, [r8]
   13edc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13ee0:	add	r0, sl, r1, lsl #3
   13ee4:	sub	r1, r2, r1
   13ee8:	lsl	r2, r1, #3
   13eec:	mov	r1, #0
   13ef0:	bl	112a8 <memset@plt>
   13ef4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13ef8:	str	r0, [r8]
   13efc:	mov	r9, sl
   13f00:	ldr	r6, [r9, r5, lsl #3]!
   13f04:	ldr	r4, [r9, #4]!
   13f08:	ldm	r7, {r0, r1}
   13f0c:	ldr	r2, [r7, #40]	; 0x28
   13f10:	ldr	r3, [r7, #44]	; 0x2c
   13f14:	orr	r8, r1, #1
   13f18:	add	r1, r7, #8
   13f1c:	stm	sp, {r0, r8}
   13f20:	add	r0, sp, #8
   13f24:	str	r1, [sp, #20]
   13f28:	stm	r0, {r1, r2, r3}
   13f2c:	mov	r0, r4
   13f30:	mov	r1, r6
   13f34:	ldr	r2, [sp, #32]
   13f38:	ldr	r3, [sp, #36]	; 0x24
   13f3c:	bl	12bd8 <__assert_fail@plt+0x1864>
   13f40:	cmp	r6, r0
   13f44:	bhi	13fa8 <__assert_fail@plt+0x2c34>
   13f48:	add	r6, r0, #1
   13f4c:	movw	r0, #33304	; 0x8218
   13f50:	movt	r0, #2
   13f54:	str	r6, [sl, r5, lsl #3]
   13f58:	cmp	r4, r0
   13f5c:	beq	13f68 <__assert_fail@plt+0x2bf4>
   13f60:	mov	r0, r4
   13f64:	bl	12918 <__assert_fail@plt+0x15a4>
   13f68:	mov	r0, r6
   13f6c:	bl	1519c <__assert_fail@plt+0x3e28>
   13f70:	str	r0, [r9]
   13f74:	mov	r4, r0
   13f78:	add	r3, sp, #8
   13f7c:	ldr	r0, [r7]
   13f80:	ldr	r1, [r7, #40]	; 0x28
   13f84:	ldr	r2, [r7, #44]	; 0x2c
   13f88:	stm	sp, {r0, r8}
   13f8c:	ldr	r0, [sp, #20]
   13f90:	stm	r3, {r0, r1, r2}
   13f94:	mov	r0, r4
   13f98:	mov	r1, r6
   13f9c:	ldr	r2, [sp, #32]
   13fa0:	ldr	r3, [sp, #36]	; 0x24
   13fa4:	bl	12bd8 <__assert_fail@plt+0x1864>
   13fa8:	ldr	r0, [sp, #28]
   13fac:	ldr	r1, [sp, #24]
   13fb0:	str	r1, [r0]
   13fb4:	mov	r0, r4
   13fb8:	sub	sp, fp, #28
   13fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fc0:	bl	11350 <abort@plt>
   13fc4:	movw	r3, #33256	; 0x81e8
   13fc8:	movt	r3, #2
   13fcc:	b	13e30 <__assert_fail@plt+0x2abc>
   13fd0:	movw	r3, #33256	; 0x81e8
   13fd4:	mov	r1, r0
   13fd8:	mov	r0, #0
   13fdc:	mvn	r2, #0
   13fe0:	movt	r3, #2
   13fe4:	b	13e30 <__assert_fail@plt+0x2abc>
   13fe8:	movw	r3, #33256	; 0x81e8
   13fec:	mov	r2, r1
   13ff0:	mov	r1, r0
   13ff4:	mov	r0, #0
   13ff8:	movt	r3, #2
   13ffc:	b	13e30 <__assert_fail@plt+0x2abc>
   14000:	push	{fp, lr}
   14004:	mov	fp, sp
   14008:	sub	sp, sp, #48	; 0x30
   1400c:	vmov.i32	q8, #0	; 0x00000000
   14010:	mov	ip, #32
   14014:	mov	r3, sp
   14018:	mov	lr, r2
   1401c:	cmp	r1, #10
   14020:	add	r2, r3, #16
   14024:	vst1.64	{d16-d17}, [r3], ip
   14028:	vst1.64	{d16-d17}, [r3]
   1402c:	vst1.64	{d16-d17}, [r2]
   14030:	beq	14050 <__assert_fail@plt+0x2cdc>
   14034:	str	r1, [sp]
   14038:	mov	r3, sp
   1403c:	mov	r1, lr
   14040:	mvn	r2, #0
   14044:	bl	13e30 <__assert_fail@plt+0x2abc>
   14048:	mov	sp, fp
   1404c:	pop	{fp, pc}
   14050:	bl	11350 <abort@plt>
   14054:	push	{r4, sl, fp, lr}
   14058:	add	fp, sp, #8
   1405c:	sub	sp, sp, #48	; 0x30
   14060:	mov	ip, r3
   14064:	mov	r3, sp
   14068:	vmov.i32	q8, #0	; 0x00000000
   1406c:	mov	lr, #32
   14070:	cmp	r1, #10
   14074:	add	r4, r3, #16
   14078:	vst1.64	{d16-d17}, [r3], lr
   1407c:	vst1.64	{d16-d17}, [r3]
   14080:	vst1.64	{d16-d17}, [r4]
   14084:	beq	140a4 <__assert_fail@plt+0x2d30>
   14088:	str	r1, [sp]
   1408c:	mov	r1, r2
   14090:	mov	r3, sp
   14094:	mov	r2, ip
   14098:	bl	13e30 <__assert_fail@plt+0x2abc>
   1409c:	sub	sp, fp, #8
   140a0:	pop	{r4, sl, fp, pc}
   140a4:	bl	11350 <abort@plt>
   140a8:	push	{fp, lr}
   140ac:	mov	fp, sp
   140b0:	sub	sp, sp, #48	; 0x30
   140b4:	mov	r3, sp
   140b8:	vmov.i32	q8, #0	; 0x00000000
   140bc:	mov	ip, #32
   140c0:	cmp	r0, #10
   140c4:	add	r2, r3, #16
   140c8:	vst1.64	{d16-d17}, [r3], ip
   140cc:	vst1.64	{d16-d17}, [r3]
   140d0:	vst1.64	{d16-d17}, [r2]
   140d4:	beq	140f4 <__assert_fail@plt+0x2d80>
   140d8:	str	r0, [sp]
   140dc:	mov	r3, sp
   140e0:	mov	r0, #0
   140e4:	mvn	r2, #0
   140e8:	bl	13e30 <__assert_fail@plt+0x2abc>
   140ec:	mov	sp, fp
   140f0:	pop	{fp, pc}
   140f4:	bl	11350 <abort@plt>
   140f8:	push	{fp, lr}
   140fc:	mov	fp, sp
   14100:	sub	sp, sp, #48	; 0x30
   14104:	mov	r3, sp
   14108:	vmov.i32	q8, #0	; 0x00000000
   1410c:	mov	ip, #32
   14110:	cmp	r0, #10
   14114:	add	lr, r3, #16
   14118:	vst1.64	{d16-d17}, [r3], ip
   1411c:	vst1.64	{d16-d17}, [r3]
   14120:	vst1.64	{d16-d17}, [lr]
   14124:	beq	14140 <__assert_fail@plt+0x2dcc>
   14128:	str	r0, [sp]
   1412c:	mov	r3, sp
   14130:	mov	r0, #0
   14134:	bl	13e30 <__assert_fail@plt+0x2abc>
   14138:	mov	sp, fp
   1413c:	pop	{fp, pc}
   14140:	bl	11350 <abort@plt>
   14144:	push	{r4, sl, fp, lr}
   14148:	add	fp, sp, #8
   1414c:	sub	sp, sp, #48	; 0x30
   14150:	mov	lr, r0
   14154:	movw	r0, #33256	; 0x81e8
   14158:	mov	r3, #32
   1415c:	mov	ip, r1
   14160:	mov	r4, #1
   14164:	movt	r0, #2
   14168:	add	r1, r0, #16
   1416c:	vld1.64	{d16-d17}, [r0], r3
   14170:	mov	r3, sp
   14174:	vld1.64	{d18-d19}, [r1]
   14178:	add	r1, r3, #16
   1417c:	vld1.64	{d20-d21}, [r0]
   14180:	add	r0, r3, #32
   14184:	vst1.64	{d18-d19}, [r1]
   14188:	mov	r1, r3
   1418c:	vst1.64	{d20-d21}, [r0]
   14190:	mov	r0, #28
   14194:	and	r0, r0, r2, lsr #3
   14198:	and	r2, r2, #31
   1419c:	vst1.64	{d16-d17}, [r1], r0
   141a0:	ldr	r0, [r1, #8]
   141a4:	bic	r4, r4, r0, lsr r2
   141a8:	eor	r0, r0, r4, lsl r2
   141ac:	mov	r2, ip
   141b0:	str	r0, [r1, #8]
   141b4:	mov	r0, #0
   141b8:	mov	r1, lr
   141bc:	bl	13e30 <__assert_fail@plt+0x2abc>
   141c0:	sub	sp, fp, #8
   141c4:	pop	{r4, sl, fp, pc}
   141c8:	push	{fp, lr}
   141cc:	mov	fp, sp
   141d0:	sub	sp, sp, #48	; 0x30
   141d4:	mov	ip, r0
   141d8:	movw	r0, #33256	; 0x81e8
   141dc:	mov	r3, #32
   141e0:	movt	r0, #2
   141e4:	add	r2, r0, #16
   141e8:	vld1.64	{d16-d17}, [r0], r3
   141ec:	mov	r3, sp
   141f0:	vld1.64	{d18-d19}, [r2]
   141f4:	add	r2, r3, #16
   141f8:	vld1.64	{d20-d21}, [r0]
   141fc:	add	r0, r3, #32
   14200:	vst1.64	{d18-d19}, [r2]
   14204:	mov	r2, r3
   14208:	vst1.64	{d20-d21}, [r0]
   1420c:	mov	r0, #28
   14210:	and	r0, r0, r1, lsr #3
   14214:	and	r1, r1, #31
   14218:	vst1.64	{d16-d17}, [r2], r0
   1421c:	mov	r0, #1
   14220:	ldr	lr, [r2, #8]
   14224:	bic	r0, r0, lr, lsr r1
   14228:	eor	r0, lr, r0, lsl r1
   1422c:	mov	r1, ip
   14230:	str	r0, [r2, #8]
   14234:	mov	r0, #0
   14238:	mvn	r2, #0
   1423c:	bl	13e30 <__assert_fail@plt+0x2abc>
   14240:	mov	sp, fp
   14244:	pop	{fp, pc}
   14248:	push	{fp, lr}
   1424c:	mov	fp, sp
   14250:	sub	sp, sp, #48	; 0x30
   14254:	movw	r2, #33256	; 0x81e8
   14258:	mov	r3, #32
   1425c:	mov	r1, r0
   14260:	movt	r2, #2
   14264:	add	r0, r2, #16
   14268:	vld1.64	{d16-d17}, [r2], r3
   1426c:	mov	r3, sp
   14270:	vld1.64	{d18-d19}, [r0]
   14274:	add	r0, r3, #16
   14278:	vld1.64	{d20-d21}, [r2]
   1427c:	mov	r2, r3
   14280:	vst1.64	{d18-d19}, [r0]
   14284:	add	r0, r3, #32
   14288:	vst1.64	{d20-d21}, [r0]
   1428c:	mov	r0, #12
   14290:	vst1.64	{d16-d17}, [r2], r0
   14294:	ldr	r0, [r2]
   14298:	orr	r0, r0, #67108864	; 0x4000000
   1429c:	str	r0, [r2]
   142a0:	mov	r0, #0
   142a4:	mvn	r2, #0
   142a8:	bl	13e30 <__assert_fail@plt+0x2abc>
   142ac:	mov	sp, fp
   142b0:	pop	{fp, pc}
   142b4:	push	{fp, lr}
   142b8:	mov	fp, sp
   142bc:	sub	sp, sp, #48	; 0x30
   142c0:	mov	ip, r1
   142c4:	mov	r1, r0
   142c8:	movw	r0, #33256	; 0x81e8
   142cc:	mov	r3, #32
   142d0:	movt	r0, #2
   142d4:	add	r2, r0, #16
   142d8:	vld1.64	{d16-d17}, [r0], r3
   142dc:	mov	r3, sp
   142e0:	vld1.64	{d18-d19}, [r2]
   142e4:	add	r2, r3, #16
   142e8:	vld1.64	{d20-d21}, [r0]
   142ec:	add	r0, r3, #32
   142f0:	vst1.64	{d18-d19}, [r2]
   142f4:	mov	r2, r3
   142f8:	vst1.64	{d20-d21}, [r0]
   142fc:	mov	r0, #12
   14300:	vst1.64	{d16-d17}, [r2], r0
   14304:	ldr	r0, [r2]
   14308:	orr	r0, r0, #67108864	; 0x4000000
   1430c:	str	r0, [r2]
   14310:	mov	r0, #0
   14314:	mov	r2, ip
   14318:	bl	13e30 <__assert_fail@plt+0x2abc>
   1431c:	mov	sp, fp
   14320:	pop	{fp, pc}
   14324:	push	{r4, sl, fp, lr}
   14328:	add	fp, sp, #8
   1432c:	sub	sp, sp, #96	; 0x60
   14330:	mov	ip, r2
   14334:	mov	r2, sp
   14338:	vmov.i32	q8, #0	; 0x00000000
   1433c:	mov	r4, #28
   14340:	cmp	r1, #10
   14344:	mov	r3, r2
   14348:	add	lr, r2, #16
   1434c:	vst1.64	{d16-d17}, [r3], r4
   14350:	vst1.64	{d16-d17}, [lr]
   14354:	vst1.32	{d16-d17}, [r3]
   14358:	beq	143a8 <__assert_fail@plt+0x3034>
   1435c:	vld1.64	{d16-d17}, [r2], r4
   14360:	vld1.64	{d18-d19}, [lr]
   14364:	add	r3, sp, #48	; 0x30
   14368:	add	r4, r3, #4
   1436c:	vld1.32	{d20-d21}, [r2]
   14370:	add	r2, r3, #20
   14374:	vst1.32	{d16-d17}, [r4]
   14378:	vst1.32	{d18-d19}, [r2]
   1437c:	add	r2, r3, #32
   14380:	vst1.32	{d20-d21}, [r2]
   14384:	str	r1, [sp, #48]	; 0x30
   14388:	mvn	r2, #0
   1438c:	ldr	r1, [sp, #60]	; 0x3c
   14390:	orr	r1, r1, #67108864	; 0x4000000
   14394:	str	r1, [sp, #60]	; 0x3c
   14398:	mov	r1, ip
   1439c:	bl	13e30 <__assert_fail@plt+0x2abc>
   143a0:	sub	sp, fp, #8
   143a4:	pop	{r4, sl, fp, pc}
   143a8:	bl	11350 <abort@plt>
   143ac:	push	{r4, r5, fp, lr}
   143b0:	add	fp, sp, #8
   143b4:	sub	sp, sp, #48	; 0x30
   143b8:	mov	ip, r3
   143bc:	movw	r3, #33256	; 0x81e8
   143c0:	mov	lr, #32
   143c4:	cmp	r1, #0
   143c8:	mov	r5, sp
   143cc:	movt	r3, #2
   143d0:	cmpne	r2, #0
   143d4:	add	r4, r3, #16
   143d8:	vld1.64	{d16-d17}, [r3], lr
   143dc:	vld1.64	{d18-d19}, [r4]
   143e0:	add	r4, r5, #16
   143e4:	vld1.64	{d20-d21}, [r3]
   143e8:	vst1.64	{d16-d17}, [r5], lr
   143ec:	mov	r3, #10
   143f0:	vst1.64	{d18-d19}, [r4]
   143f4:	vst1.64	{d20-d21}, [r5]
   143f8:	str	r3, [sp]
   143fc:	bne	14404 <__assert_fail@plt+0x3090>
   14400:	bl	11350 <abort@plt>
   14404:	str	r2, [sp, #44]	; 0x2c
   14408:	str	r1, [sp, #40]	; 0x28
   1440c:	mov	r3, sp
   14410:	mov	r1, ip
   14414:	mvn	r2, #0
   14418:	bl	13e30 <__assert_fail@plt+0x2abc>
   1441c:	sub	sp, fp, #8
   14420:	pop	{r4, r5, fp, pc}
   14424:	push	{r4, r5, fp, lr}
   14428:	add	fp, sp, #8
   1442c:	sub	sp, sp, #48	; 0x30
   14430:	mov	lr, r3
   14434:	movw	r3, #33256	; 0x81e8
   14438:	mov	ip, #32
   1443c:	cmp	r1, #0
   14440:	mov	r5, sp
   14444:	movt	r3, #2
   14448:	cmpne	r2, #0
   1444c:	add	r4, r3, #16
   14450:	vld1.64	{d16-d17}, [r3], ip
   14454:	vld1.64	{d18-d19}, [r4]
   14458:	add	r4, r5, #16
   1445c:	vld1.64	{d20-d21}, [r3]
   14460:	vst1.64	{d16-d17}, [r5], ip
   14464:	mov	r3, #10
   14468:	vst1.64	{d18-d19}, [r4]
   1446c:	vst1.64	{d20-d21}, [r5]
   14470:	str	r3, [sp]
   14474:	bne	1447c <__assert_fail@plt+0x3108>
   14478:	bl	11350 <abort@plt>
   1447c:	ldr	ip, [fp, #8]
   14480:	str	r2, [sp, #44]	; 0x2c
   14484:	str	r1, [sp, #40]	; 0x28
   14488:	mov	r3, sp
   1448c:	mov	r1, lr
   14490:	mov	r2, ip
   14494:	bl	13e30 <__assert_fail@plt+0x2abc>
   14498:	sub	sp, fp, #8
   1449c:	pop	{r4, r5, fp, pc}
   144a0:	push	{r4, sl, fp, lr}
   144a4:	add	fp, sp, #8
   144a8:	sub	sp, sp, #48	; 0x30
   144ac:	mov	ip, r2
   144b0:	movw	r2, #33256	; 0x81e8
   144b4:	mov	lr, #32
   144b8:	cmp	r0, #0
   144bc:	mov	r4, sp
   144c0:	movt	r2, #2
   144c4:	cmpne	r1, #0
   144c8:	add	r3, r2, #16
   144cc:	vld1.64	{d16-d17}, [r2], lr
   144d0:	vld1.64	{d18-d19}, [r3]
   144d4:	add	r3, r4, #16
   144d8:	vld1.64	{d20-d21}, [r2]
   144dc:	vst1.64	{d16-d17}, [r4], lr
   144e0:	mov	r2, #10
   144e4:	vst1.64	{d18-d19}, [r3]
   144e8:	vst1.64	{d20-d21}, [r4]
   144ec:	str	r2, [sp]
   144f0:	bne	144f8 <__assert_fail@plt+0x3184>
   144f4:	bl	11350 <abort@plt>
   144f8:	str	r1, [sp, #44]	; 0x2c
   144fc:	str	r0, [sp, #40]	; 0x28
   14500:	mov	r3, sp
   14504:	mov	r0, #0
   14508:	mov	r1, ip
   1450c:	mvn	r2, #0
   14510:	bl	13e30 <__assert_fail@plt+0x2abc>
   14514:	sub	sp, fp, #8
   14518:	pop	{r4, sl, fp, pc}
   1451c:	push	{r4, r5, fp, lr}
   14520:	add	fp, sp, #8
   14524:	sub	sp, sp, #48	; 0x30
   14528:	mov	lr, r2
   1452c:	movw	r2, #33256	; 0x81e8
   14530:	mov	ip, r3
   14534:	mov	r3, #32
   14538:	cmp	r0, #0
   1453c:	mov	r5, sp
   14540:	movt	r2, #2
   14544:	cmpne	r1, #0
   14548:	add	r4, r2, #16
   1454c:	vld1.64	{d16-d17}, [r2], r3
   14550:	vld1.64	{d18-d19}, [r4]
   14554:	add	r4, r5, #16
   14558:	vld1.64	{d20-d21}, [r2]
   1455c:	vst1.64	{d16-d17}, [r5], r3
   14560:	mov	r2, #10
   14564:	vst1.64	{d18-d19}, [r4]
   14568:	vst1.64	{d20-d21}, [r5]
   1456c:	str	r2, [sp]
   14570:	bne	14578 <__assert_fail@plt+0x3204>
   14574:	bl	11350 <abort@plt>
   14578:	str	r1, [sp, #44]	; 0x2c
   1457c:	str	r0, [sp, #40]	; 0x28
   14580:	mov	r3, sp
   14584:	mov	r0, #0
   14588:	mov	r1, lr
   1458c:	mov	r2, ip
   14590:	bl	13e30 <__assert_fail@plt+0x2abc>
   14594:	sub	sp, fp, #8
   14598:	pop	{r4, r5, fp, pc}
   1459c:	movw	r3, #33072	; 0x8130
   145a0:	movt	r3, #2
   145a4:	b	13e30 <__assert_fail@plt+0x2abc>
   145a8:	movw	r3, #33072	; 0x8130
   145ac:	mov	r2, r1
   145b0:	mov	r1, r0
   145b4:	mov	r0, #0
   145b8:	movt	r3, #2
   145bc:	b	13e30 <__assert_fail@plt+0x2abc>
   145c0:	movw	r3, #33072	; 0x8130
   145c4:	mvn	r2, #0
   145c8:	movt	r3, #2
   145cc:	b	13e30 <__assert_fail@plt+0x2abc>
   145d0:	movw	r3, #33072	; 0x8130
   145d4:	mov	r1, r0
   145d8:	mov	r0, #0
   145dc:	mvn	r2, #0
   145e0:	movt	r3, #2
   145e4:	b	13e30 <__assert_fail@plt+0x2abc>
   145e8:	push	{r4, r5, fp, lr}
   145ec:	add	fp, sp, #8
   145f0:	mov	r5, r0
   145f4:	mov	r4, r1
   145f8:	mov	r0, #0
   145fc:	mov	r2, #5
   14600:	mov	r1, r5
   14604:	bl	11158 <dcgettext@plt>
   14608:	cmp	r0, r5
   1460c:	popne	{r4, r5, fp, pc}
   14610:	bl	16260 <__assert_fail@plt+0x4eec>
   14614:	ldrb	r1, [r0]
   14618:	and	r1, r1, #223	; 0xdf
   1461c:	cmp	r1, #71	; 0x47
   14620:	beq	14688 <__assert_fail@plt+0x3314>
   14624:	cmp	r1, #85	; 0x55
   14628:	bne	146ac <__assert_fail@plt+0x3338>
   1462c:	ldrb	r1, [r0, #1]
   14630:	and	r1, r1, #223	; 0xdf
   14634:	cmp	r1, #84	; 0x54
   14638:	bne	146ac <__assert_fail@plt+0x3338>
   1463c:	ldrb	r1, [r0, #2]
   14640:	and	r1, r1, #223	; 0xdf
   14644:	cmp	r1, #70	; 0x46
   14648:	ldrbeq	r1, [r0, #3]
   1464c:	cmpeq	r1, #45	; 0x2d
   14650:	bne	146ac <__assert_fail@plt+0x3338>
   14654:	ldrb	r1, [r0, #4]
   14658:	cmp	r1, #56	; 0x38
   1465c:	ldrbeq	r0, [r0, #5]
   14660:	cmpeq	r0, #0
   14664:	bne	146ac <__assert_fail@plt+0x3338>
   14668:	ldrb	r1, [r5]
   1466c:	movw	r2, #29010	; 0x7152
   14670:	movw	r0, #29014	; 0x7156
   14674:	movt	r2, #1
   14678:	movt	r0, #1
   1467c:	cmp	r1, #96	; 0x60
   14680:	moveq	r0, r2
   14684:	pop	{r4, r5, fp, pc}
   14688:	ldrb	r1, [r0, #1]
   1468c:	and	r1, r1, #223	; 0xdf
   14690:	cmp	r1, #66	; 0x42
   14694:	bne	146ac <__assert_fail@plt+0x3338>
   14698:	ldrb	r1, [r0, #2]
   1469c:	cmp	r1, #49	; 0x31
   146a0:	ldrbeq	r1, [r0, #3]
   146a4:	cmpeq	r1, #56	; 0x38
   146a8:	beq	146c8 <__assert_fail@plt+0x3354>
   146ac:	movw	r1, #29004	; 0x714c
   146b0:	movw	r0, #29008	; 0x7150
   146b4:	cmp	r4, #9
   146b8:	movt	r1, #1
   146bc:	movt	r0, #1
   146c0:	moveq	r0, r1
   146c4:	pop	{r4, r5, fp, pc}
   146c8:	ldrb	r1, [r0, #4]
   146cc:	cmp	r1, #48	; 0x30
   146d0:	ldrbeq	r1, [r0, #5]
   146d4:	cmpeq	r1, #51	; 0x33
   146d8:	bne	146ac <__assert_fail@plt+0x3338>
   146dc:	ldrb	r1, [r0, #6]
   146e0:	cmp	r1, #48	; 0x30
   146e4:	ldrbeq	r0, [r0, #7]
   146e8:	cmpeq	r0, #0
   146ec:	bne	146ac <__assert_fail@plt+0x3338>
   146f0:	ldrb	r1, [r5]
   146f4:	movw	r2, #29018	; 0x715a
   146f8:	movw	r0, #29022	; 0x715e
   146fc:	movt	r2, #1
   14700:	movt	r0, #1
   14704:	b	1467c <__assert_fail@plt+0x3308>
   14708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1470c:	add	fp, sp, #28
   14710:	sub	sp, sp, #12
   14714:	ldr	sl, [fp, #8]
   14718:	mov	r9, r3
   1471c:	mov	r4, r2
   14720:	mov	r8, r1
   14724:	mov	r7, r0
   14728:	cmp	r2, #0
   1472c:	beq	14744 <__assert_fail@plt+0x33d0>
   14730:	mov	r0, r7
   14734:	mov	r1, #58	; 0x3a
   14738:	bl	1126c <strchr@plt>
   1473c:	mov	r6, r0
   14740:	b	14748 <__assert_fail@plt+0x33d4>
   14744:	mov	r6, #0
   14748:	mov	r0, r7
   1474c:	mov	r1, r6
   14750:	mov	r2, r8
   14754:	mov	r3, r4
   14758:	stm	sp, {r9, sl}
   1475c:	bl	147c4 <__assert_fail@plt+0x3450>
   14760:	mov	r5, r0
   14764:	cmp	r4, #0
   14768:	beq	147b8 <__assert_fail@plt+0x3444>
   1476c:	cmp	r6, #0
   14770:	bne	147b8 <__assert_fail@plt+0x3444>
   14774:	cmp	r5, #0
   14778:	beq	147b8 <__assert_fail@plt+0x3444>
   1477c:	mov	r0, r7
   14780:	mov	r1, #46	; 0x2e
   14784:	bl	1126c <strchr@plt>
   14788:	cmp	r0, #0
   1478c:	beq	147b8 <__assert_fail@plt+0x3444>
   14790:	mov	r1, r0
   14794:	mov	r0, r7
   14798:	mov	r2, r8
   1479c:	mov	r3, r4
   147a0:	stm	sp, {r9, sl}
   147a4:	bl	147c4 <__assert_fail@plt+0x3450>
   147a8:	cmp	r0, #0
   147ac:	movne	r0, r5
   147b0:	sub	sp, fp, #28
   147b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147b8:	mov	r0, r5
   147bc:	sub	sp, fp, #28
   147c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147c8:	add	fp, sp, #28
   147cc:	sub	sp, sp, #36	; 0x24
   147d0:	mov	sl, r3
   147d4:	ldr	r3, [r2]
   147d8:	mov	r9, r2
   147dc:	mov	r4, r1
   147e0:	ldr	r2, [fp, #8]
   147e4:	ldr	r8, [fp, #12]
   147e8:	cmp	sl, #0
   147ec:	ldrne	r1, [sl]
   147f0:	str	r3, [sp, #4]
   147f4:	mvneq	r1, #0
   147f8:	cmp	r2, #0
   147fc:	str	r1, [sp, #8]
   14800:	movne	r1, #0
   14804:	strne	r1, [r2]
   14808:	cmp	r8, #0
   1480c:	movne	r1, #0
   14810:	strne	r1, [r8]
   14814:	cmp	r4, #0
   14818:	beq	1484c <__assert_fail@plt+0x34d8>
   1481c:	subs	r5, r4, r0
   14820:	beq	148dc <__assert_fail@plt+0x3568>
   14824:	add	r1, r5, #1
   14828:	bl	15608 <__assert_fail@plt+0x4294>
   1482c:	mov	r7, r0
   14830:	mov	r0, #0
   14834:	mov	r6, r4
   14838:	strb	r0, [r7, r5]
   1483c:	ldrb	r0, [r6, #1]!
   14840:	cmp	r0, #0
   14844:	moveq	r6, r0
   14848:	b	14864 <__assert_fail@plt+0x34f0>
   1484c:	ldrb	r1, [r0]
   14850:	cmp	r1, #0
   14854:	beq	149f4 <__assert_fail@plt+0x3680>
   14858:	bl	1568c <__assert_fail@plt+0x4318>
   1485c:	mov	r7, r0
   14860:	mov	r6, #0
   14864:	ldrb	r0, [r7]
   14868:	cmp	r0, #43	; 0x2b
   1486c:	beq	148bc <__assert_fail@plt+0x3548>
   14870:	mov	r0, r7
   14874:	bl	110d4 <getpwnam@plt>
   14878:	cmp	r0, #0
   1487c:	beq	148bc <__assert_fail@plt+0x3548>
   14880:	ldr	r1, [r0, #8]
   14884:	mov	r5, #0
   14888:	cmp	r4, #0
   1488c:	str	r1, [sp, #4]
   14890:	beq	14a00 <__assert_fail@plt+0x368c>
   14894:	cmp	r6, #0
   14898:	bne	14a00 <__assert_fail@plt+0x368c>
   1489c:	ldr	r4, [r0, #12]
   148a0:	mov	r0, r4
   148a4:	bl	1135c <getgrgid@plt>
   148a8:	cmp	r0, #0
   148ac:	str	r4, [sp, #8]
   148b0:	beq	14a08 <__assert_fail@plt+0x3694>
   148b4:	ldr	r0, [r0]
   148b8:	b	14a18 <__assert_fail@plt+0x36a4>
   148bc:	cmp	r4, #0
   148c0:	beq	14998 <__assert_fail@plt+0x3624>
   148c4:	cmp	r6, #0
   148c8:	bne	14998 <__assert_fail@plt+0x3624>
   148cc:	movw	r5, #29139	; 0x71d3
   148d0:	mov	r4, #0
   148d4:	movt	r5, #1
   148d8:	b	14a24 <__assert_fail@plt+0x36b0>
   148dc:	ldrb	r0, [r4, #1]!
   148e0:	mov	r7, #0
   148e4:	mov	r5, #0
   148e8:	cmp	r0, #0
   148ec:	moveq	r4, r0
   148f0:	mov	r6, r4
   148f4:	mov	r4, #0
   148f8:	cmp	r6, #0
   148fc:	beq	14a30 <__assert_fail@plt+0x36bc>
   14900:	cmp	r5, #0
   14904:	bne	14a30 <__assert_fail@plt+0x36bc>
   14908:	ldrb	r0, [r6]
   1490c:	cmp	r0, #43	; 0x2b
   14910:	beq	14930 <__assert_fail@plt+0x35bc>
   14914:	mov	r0, r6
   14918:	bl	11368 <getgrnam@plt>
   1491c:	cmp	r0, #0
   14920:	beq	14930 <__assert_fail@plt+0x35bc>
   14924:	ldr	r0, [r0, #8]
   14928:	mov	r5, #0
   1492c:	b	14980 <__assert_fail@plt+0x360c>
   14930:	movw	r0, #26895	; 0x690f
   14934:	add	r3, sp, #12
   14938:	mov	r1, #0
   1493c:	mov	r2, #10
   14940:	movt	r0, #1
   14944:	str	r0, [sp]
   14948:	mov	r0, r6
   1494c:	bl	15744 <__assert_fail@plt+0x43d0>
   14950:	ldr	r1, [sp, #12]
   14954:	clz	r0, r0
   14958:	movw	r5, #29125	; 0x71c5
   1495c:	lsr	r0, r0, #5
   14960:	movt	r5, #1
   14964:	add	r2, r1, #1
   14968:	cmn	r1, #1
   1496c:	movwne	r2, #1
   14970:	ands	r0, r0, r2
   14974:	ldr	r0, [sp, #8]
   14978:	movwne	r5, #0
   1497c:	movne	r0, r1
   14980:	str	r0, [sp, #8]
   14984:	bl	110b0 <endgrent@plt>
   14988:	mov	r0, r6
   1498c:	bl	1568c <__assert_fail@plt+0x4318>
   14990:	mov	r4, r0
   14994:	b	14a30 <__assert_fail@plt+0x36bc>
   14998:	movw	r0, #26895	; 0x690f
   1499c:	add	r3, sp, #12
   149a0:	mov	r1, #0
   149a4:	mov	r2, #10
   149a8:	mov	r4, #0
   149ac:	movt	r0, #1
   149b0:	str	r0, [sp]
   149b4:	mov	r0, r7
   149b8:	bl	15744 <__assert_fail@plt+0x43d0>
   149bc:	ldr	r1, [sp, #12]
   149c0:	clz	r0, r0
   149c4:	movw	r5, #29112	; 0x71b8
   149c8:	lsr	r0, r0, #5
   149cc:	movt	r5, #1
   149d0:	add	r2, r1, #1
   149d4:	cmn	r1, #1
   149d8:	movwne	r2, #1
   149dc:	ands	r0, r0, r2
   149e0:	ldr	r0, [sp, #4]
   149e4:	movwne	r5, #0
   149e8:	movne	r0, r1
   149ec:	str	r0, [sp, #4]
   149f0:	b	14a24 <__assert_fail@plt+0x36b0>
   149f4:	mov	r4, #0
   149f8:	mov	r7, #0
   149fc:	b	14a3c <__assert_fail@plt+0x36c8>
   14a00:	mov	r4, #0
   14a04:	b	14a24 <__assert_fail@plt+0x36b0>
   14a08:	add	r2, sp, #12
   14a0c:	mov	r0, r4
   14a10:	mov	r1, #0
   14a14:	bl	12940 <__assert_fail@plt+0x15cc>
   14a18:	bl	1568c <__assert_fail@plt+0x4318>
   14a1c:	mov	r4, r0
   14a20:	bl	110b0 <endgrent@plt>
   14a24:	bl	11308 <endpwent@plt>
   14a28:	cmp	r6, #0
   14a2c:	bne	14900 <__assert_fail@plt+0x358c>
   14a30:	mov	r6, #0
   14a34:	cmp	r5, #0
   14a38:	bne	14a80 <__assert_fail@plt+0x370c>
   14a3c:	ldr	r0, [sp, #4]
   14a40:	cmp	sl, #0
   14a44:	mov	r6, #1
   14a48:	str	r0, [r9]
   14a4c:	ldrne	r0, [sp, #8]
   14a50:	strne	r0, [sl]
   14a54:	ldr	r0, [fp, #8]
   14a58:	cmp	r0, #0
   14a5c:	strne	r7, [r0]
   14a60:	movne	r7, #0
   14a64:	cmp	r8, #0
   14a68:	beq	14a7c <__assert_fail@plt+0x3708>
   14a6c:	str	r4, [r8]
   14a70:	mov	r5, #0
   14a74:	mov	r4, #0
   14a78:	b	14a80 <__assert_fail@plt+0x370c>
   14a7c:	mov	r5, #0
   14a80:	mov	r0, r7
   14a84:	bl	12918 <__assert_fail@plt+0x15a4>
   14a88:	mov	r0, r4
   14a8c:	bl	12918 <__assert_fail@plt+0x15a4>
   14a90:	mov	r0, #0
   14a94:	cmp	r6, #0
   14a98:	bne	14aac <__assert_fail@plt+0x3738>
   14a9c:	mov	r0, #0
   14aa0:	mov	r1, r5
   14aa4:	mov	r2, #5
   14aa8:	bl	11158 <dcgettext@plt>
   14aac:	sub	sp, fp, #28
   14ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ab4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ab8:	add	fp, sp, #24
   14abc:	sub	sp, sp, #32
   14ac0:	ldr	r6, [fp, #12]
   14ac4:	ldr	r7, [fp, #8]
   14ac8:	mov	r4, r2
   14acc:	mov	r8, r0
   14ad0:	cmp	r1, #0
   14ad4:	beq	14afc <__assert_fail@plt+0x3788>
   14ad8:	movw	r2, #29152	; 0x71e0
   14adc:	mov	r5, r1
   14ae0:	str	r3, [sp, #4]
   14ae4:	str	r4, [sp]
   14ae8:	mov	r0, r8
   14aec:	mov	r1, #1
   14af0:	movt	r2, #1
   14af4:	mov	r3, r5
   14af8:	b	14b14 <__assert_fail@plt+0x37a0>
   14afc:	movw	r2, #29164	; 0x71ec
   14b00:	str	r3, [sp]
   14b04:	mov	r0, r8
   14b08:	mov	r1, #1
   14b0c:	mov	r3, r4
   14b10:	movt	r2, #1
   14b14:	bl	112cc <__fprintf_chk@plt>
   14b18:	movw	r1, #29171	; 0x71f3
   14b1c:	mov	r0, #0
   14b20:	mov	r2, #5
   14b24:	movt	r1, #1
   14b28:	bl	11158 <dcgettext@plt>
   14b2c:	movw	r2, #29889	; 0x74c1
   14b30:	mov	r3, r0
   14b34:	movw	r0, #2022	; 0x7e6
   14b38:	mov	r1, #1
   14b3c:	str	r0, [sp]
   14b40:	movt	r2, #1
   14b44:	mov	r0, r8
   14b48:	bl	112cc <__fprintf_chk@plt>
   14b4c:	movw	r4, #26894	; 0x690e
   14b50:	mov	r1, r8
   14b54:	movt	r4, #1
   14b58:	mov	r0, r4
   14b5c:	bl	110bc <fputs_unlocked@plt>
   14b60:	movw	r1, #29175	; 0x71f7
   14b64:	mov	r0, #0
   14b68:	mov	r2, #5
   14b6c:	movt	r1, #1
   14b70:	bl	11158 <dcgettext@plt>
   14b74:	movw	r3, #29346	; 0x72a2
   14b78:	mov	r2, r0
   14b7c:	mov	r0, r8
   14b80:	mov	r1, #1
   14b84:	movt	r3, #1
   14b88:	bl	112cc <__fprintf_chk@plt>
   14b8c:	mov	r0, r4
   14b90:	mov	r1, r8
   14b94:	bl	110bc <fputs_unlocked@plt>
   14b98:	cmp	r6, #9
   14b9c:	bhi	14bd8 <__assert_fail@plt+0x3864>
   14ba0:	add	r0, pc, #0
   14ba4:	ldr	pc, [r0, r6, lsl #2]
   14ba8:	ldrdeq	r4, [r1], -r0
   14bac:	andeq	r4, r1, r4, ror #23
   14bb0:	andeq	r4, r1, r4, lsl ip
   14bb4:	andeq	r4, r1, ip, lsr ip
   14bb8:	andeq	r4, r1, r4, ror #24
   14bbc:	andeq	r4, r1, ip, lsl #25
   14bc0:			; <UNDEFINED> instruction: 0x00014cb4
   14bc4:	andeq	r4, r1, ip, ror #25
   14bc8:	andeq	r4, r1, ip, lsl #27
   14bcc:	andeq	r4, r1, r4, lsr sp
   14bd0:	sub	sp, fp, #24
   14bd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bd8:	movw	r1, #29699	; 0x7403
   14bdc:	movt	r1, #1
   14be0:	b	14d3c <__assert_fail@plt+0x39c8>
   14be4:	movw	r1, #29380	; 0x72c4
   14be8:	mov	r0, #0
   14bec:	mov	r2, #5
   14bf0:	movt	r1, #1
   14bf4:	bl	11158 <dcgettext@plt>
   14bf8:	ldr	r3, [r7]
   14bfc:	mov	r2, r0
   14c00:	mov	r0, r8
   14c04:	mov	r1, #1
   14c08:	sub	sp, fp, #24
   14c0c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c10:	b	112cc <__fprintf_chk@plt>
   14c14:	movw	r1, #29396	; 0x72d4
   14c18:	mov	r0, #0
   14c1c:	mov	r2, #5
   14c20:	movt	r1, #1
   14c24:	bl	11158 <dcgettext@plt>
   14c28:	mov	r2, r0
   14c2c:	ldr	r3, [r7]
   14c30:	ldr	r0, [r7, #4]
   14c34:	str	r0, [sp]
   14c38:	b	14d28 <__assert_fail@plt+0x39b4>
   14c3c:	movw	r1, #29419	; 0x72eb
   14c40:	mov	r0, #0
   14c44:	mov	r2, #5
   14c48:	movt	r1, #1
   14c4c:	bl	11158 <dcgettext@plt>
   14c50:	ldr	r3, [r7]
   14c54:	mov	r2, r0
   14c58:	ldmib	r7, {r0, r1}
   14c5c:	stm	sp, {r0, r1}
   14c60:	b	14d28 <__assert_fail@plt+0x39b4>
   14c64:	movw	r1, #29447	; 0x7307
   14c68:	mov	r0, #0
   14c6c:	mov	r2, #5
   14c70:	movt	r1, #1
   14c74:	bl	11158 <dcgettext@plt>
   14c78:	ldr	r3, [r7]
   14c7c:	mov	r2, r0
   14c80:	ldmib	r7, {r0, r1, r7}
   14c84:	stm	sp, {r0, r1, r7}
   14c88:	b	14d28 <__assert_fail@plt+0x39b4>
   14c8c:	movw	r1, #29479	; 0x7327
   14c90:	mov	r0, #0
   14c94:	mov	r2, #5
   14c98:	movt	r1, #1
   14c9c:	bl	11158 <dcgettext@plt>
   14ca0:	ldr	r3, [r7]
   14ca4:	mov	r2, r0
   14ca8:	ldmib	r7, {r0, r1, r6, r7}
   14cac:	stm	sp, {r0, r1, r6, r7}
   14cb0:	b	14d28 <__assert_fail@plt+0x39b4>
   14cb4:	movw	r1, #29515	; 0x734b
   14cb8:	mov	r0, #0
   14cbc:	mov	r2, #5
   14cc0:	movt	r1, #1
   14cc4:	bl	11158 <dcgettext@plt>
   14cc8:	ldr	r3, [r7]
   14ccc:	mov	r2, r0
   14cd0:	ldmib	r7, {r0, r1, r6}
   14cd4:	ldr	r5, [r7, #16]
   14cd8:	ldr	r7, [r7, #20]
   14cdc:	stm	sp, {r0, r1, r6}
   14ce0:	str	r5, [sp, #12]
   14ce4:	str	r7, [sp, #16]
   14ce8:	b	14d28 <__assert_fail@plt+0x39b4>
   14cec:	movw	r1, #29555	; 0x7373
   14cf0:	mov	r0, #0
   14cf4:	mov	r2, #5
   14cf8:	movt	r1, #1
   14cfc:	bl	11158 <dcgettext@plt>
   14d00:	ldr	r3, [r7]
   14d04:	mov	r2, r0
   14d08:	ldmib	r7, {r0, r1, r6}
   14d0c:	ldr	r5, [r7, #16]
   14d10:	ldr	r4, [r7, #20]
   14d14:	ldr	r7, [r7, #24]
   14d18:	stm	sp, {r0, r1, r6}
   14d1c:	str	r5, [sp, #12]
   14d20:	str	r4, [sp, #16]
   14d24:	str	r7, [sp, #20]
   14d28:	mov	r0, r8
   14d2c:	mov	r1, #1
   14d30:	b	14ddc <__assert_fail@plt+0x3a68>
   14d34:	movw	r1, #29647	; 0x73cf
   14d38:	movt	r1, #1
   14d3c:	mov	r0, #0
   14d40:	mov	r2, #5
   14d44:	bl	11158 <dcgettext@plt>
   14d48:	mov	ip, r0
   14d4c:	ldr	r3, [r7]
   14d50:	ldr	r0, [r7, #4]
   14d54:	ldr	r1, [r7, #8]
   14d58:	ldr	r6, [r7, #12]
   14d5c:	ldr	r5, [r7, #16]
   14d60:	ldr	r4, [r7, #20]
   14d64:	ldr	r2, [r7, #24]
   14d68:	ldr	lr, [r7, #28]
   14d6c:	ldr	r7, [r7, #32]
   14d70:	stm	sp, {r0, r1, r6}
   14d74:	str	r5, [sp, #12]
   14d78:	str	r4, [sp, #16]
   14d7c:	str	r2, [sp, #20]
   14d80:	str	lr, [sp, #24]
   14d84:	str	r7, [sp, #28]
   14d88:	b	14dd0 <__assert_fail@plt+0x3a5c>
   14d8c:	movw	r1, #29599	; 0x739f
   14d90:	mov	r0, #0
   14d94:	mov	r2, #5
   14d98:	movt	r1, #1
   14d9c:	bl	11158 <dcgettext@plt>
   14da0:	mov	ip, r0
   14da4:	ldr	r3, [r7]
   14da8:	ldmib	r7, {r0, r1, r6}
   14dac:	ldr	r5, [r7, #16]
   14db0:	ldr	r4, [r7, #20]
   14db4:	ldr	r2, [r7, #24]
   14db8:	ldr	r7, [r7, #28]
   14dbc:	stm	sp, {r0, r1, r6}
   14dc0:	str	r5, [sp, #12]
   14dc4:	str	r4, [sp, #16]
   14dc8:	str	r2, [sp, #20]
   14dcc:	str	r7, [sp, #24]
   14dd0:	mov	r0, r8
   14dd4:	mov	r1, #1
   14dd8:	mov	r2, ip
   14ddc:	bl	112cc <__fprintf_chk@plt>
   14de0:	sub	sp, fp, #24
   14de4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14de8:	push	{r4, sl, fp, lr}
   14dec:	add	fp, sp, #8
   14df0:	sub	sp, sp, #8
   14df4:	ldr	ip, [fp, #8]
   14df8:	mov	lr, #0
   14dfc:	ldr	r4, [ip, lr, lsl #2]
   14e00:	add	lr, lr, #1
   14e04:	cmp	r4, #0
   14e08:	bne	14dfc <__assert_fail@plt+0x3a88>
   14e0c:	sub	r4, lr, #1
   14e10:	str	ip, [sp]
   14e14:	str	r4, [sp, #4]
   14e18:	bl	14ab4 <__assert_fail@plt+0x3740>
   14e1c:	sub	sp, fp, #8
   14e20:	pop	{r4, sl, fp, pc}
   14e24:	push	{fp, lr}
   14e28:	mov	fp, sp
   14e2c:	sub	sp, sp, #48	; 0x30
   14e30:	ldr	ip, [fp, #8]
   14e34:	ldr	lr, [ip]
   14e38:	cmp	lr, #0
   14e3c:	str	lr, [sp, #8]
   14e40:	beq	14edc <__assert_fail@plt+0x3b68>
   14e44:	ldr	lr, [ip, #4]
   14e48:	cmp	lr, #0
   14e4c:	str	lr, [sp, #12]
   14e50:	beq	14ee4 <__assert_fail@plt+0x3b70>
   14e54:	ldr	lr, [ip, #8]
   14e58:	cmp	lr, #0
   14e5c:	str	lr, [sp, #16]
   14e60:	beq	14eec <__assert_fail@plt+0x3b78>
   14e64:	ldr	lr, [ip, #12]
   14e68:	cmp	lr, #0
   14e6c:	str	lr, [sp, #20]
   14e70:	beq	14ef4 <__assert_fail@plt+0x3b80>
   14e74:	ldr	lr, [ip, #16]
   14e78:	cmp	lr, #0
   14e7c:	str	lr, [sp, #24]
   14e80:	beq	14efc <__assert_fail@plt+0x3b88>
   14e84:	ldr	lr, [ip, #20]
   14e88:	cmp	lr, #0
   14e8c:	str	lr, [sp, #28]
   14e90:	beq	14f04 <__assert_fail@plt+0x3b90>
   14e94:	ldr	lr, [ip, #24]
   14e98:	cmp	lr, #0
   14e9c:	str	lr, [sp, #32]
   14ea0:	beq	14f0c <__assert_fail@plt+0x3b98>
   14ea4:	ldr	lr, [ip, #28]
   14ea8:	cmp	lr, #0
   14eac:	str	lr, [sp, #36]	; 0x24
   14eb0:	beq	14f14 <__assert_fail@plt+0x3ba0>
   14eb4:	ldr	lr, [ip, #32]
   14eb8:	cmp	lr, #0
   14ebc:	str	lr, [sp, #40]	; 0x28
   14ec0:	beq	14f1c <__assert_fail@plt+0x3ba8>
   14ec4:	ldr	lr, [ip, #36]	; 0x24
   14ec8:	mov	ip, #10
   14ecc:	cmp	lr, #0
   14ed0:	str	lr, [sp, #44]	; 0x2c
   14ed4:	movweq	ip, #9
   14ed8:	b	14f20 <__assert_fail@plt+0x3bac>
   14edc:	mov	ip, #0
   14ee0:	b	14f20 <__assert_fail@plt+0x3bac>
   14ee4:	mov	ip, #1
   14ee8:	b	14f20 <__assert_fail@plt+0x3bac>
   14eec:	mov	ip, #2
   14ef0:	b	14f20 <__assert_fail@plt+0x3bac>
   14ef4:	mov	ip, #3
   14ef8:	b	14f20 <__assert_fail@plt+0x3bac>
   14efc:	mov	ip, #4
   14f00:	b	14f20 <__assert_fail@plt+0x3bac>
   14f04:	mov	ip, #5
   14f08:	b	14f20 <__assert_fail@plt+0x3bac>
   14f0c:	mov	ip, #6
   14f10:	b	14f20 <__assert_fail@plt+0x3bac>
   14f14:	mov	ip, #7
   14f18:	b	14f20 <__assert_fail@plt+0x3bac>
   14f1c:	mov	ip, #8
   14f20:	add	lr, sp, #8
   14f24:	str	ip, [sp, #4]
   14f28:	str	lr, [sp]
   14f2c:	bl	14ab4 <__assert_fail@plt+0x3740>
   14f30:	mov	sp, fp
   14f34:	pop	{fp, pc}
   14f38:	push	{fp, lr}
   14f3c:	mov	fp, sp
   14f40:	sub	sp, sp, #56	; 0x38
   14f44:	add	ip, fp, #8
   14f48:	str	ip, [sp, #12]
   14f4c:	ldr	lr, [fp, #8]
   14f50:	cmp	lr, #0
   14f54:	str	lr, [sp, #16]
   14f58:	beq	14ff4 <__assert_fail@plt+0x3c80>
   14f5c:	ldr	lr, [ip, #4]
   14f60:	cmp	lr, #0
   14f64:	str	lr, [sp, #20]
   14f68:	beq	14ffc <__assert_fail@plt+0x3c88>
   14f6c:	ldr	lr, [ip, #8]
   14f70:	cmp	lr, #0
   14f74:	str	lr, [sp, #24]
   14f78:	beq	15004 <__assert_fail@plt+0x3c90>
   14f7c:	ldr	lr, [ip, #12]
   14f80:	cmp	lr, #0
   14f84:	str	lr, [sp, #28]
   14f88:	beq	1500c <__assert_fail@plt+0x3c98>
   14f8c:	ldr	lr, [ip, #16]
   14f90:	cmp	lr, #0
   14f94:	str	lr, [sp, #32]
   14f98:	beq	15014 <__assert_fail@plt+0x3ca0>
   14f9c:	ldr	lr, [ip, #20]
   14fa0:	cmp	lr, #0
   14fa4:	str	lr, [sp, #36]	; 0x24
   14fa8:	beq	1501c <__assert_fail@plt+0x3ca8>
   14fac:	ldr	lr, [ip, #24]
   14fb0:	cmp	lr, #0
   14fb4:	str	lr, [sp, #40]	; 0x28
   14fb8:	beq	15024 <__assert_fail@plt+0x3cb0>
   14fbc:	ldr	lr, [ip, #28]
   14fc0:	cmp	lr, #0
   14fc4:	str	lr, [sp, #44]	; 0x2c
   14fc8:	beq	1502c <__assert_fail@plt+0x3cb8>
   14fcc:	ldr	lr, [ip, #32]
   14fd0:	cmp	lr, #0
   14fd4:	str	lr, [sp, #48]	; 0x30
   14fd8:	beq	15034 <__assert_fail@plt+0x3cc0>
   14fdc:	ldr	lr, [ip, #36]	; 0x24
   14fe0:	mov	ip, #10
   14fe4:	cmp	lr, #0
   14fe8:	str	lr, [sp, #52]	; 0x34
   14fec:	movweq	ip, #9
   14ff0:	b	15038 <__assert_fail@plt+0x3cc4>
   14ff4:	mov	ip, #0
   14ff8:	b	15038 <__assert_fail@plt+0x3cc4>
   14ffc:	mov	ip, #1
   15000:	b	15038 <__assert_fail@plt+0x3cc4>
   15004:	mov	ip, #2
   15008:	b	15038 <__assert_fail@plt+0x3cc4>
   1500c:	mov	ip, #3
   15010:	b	15038 <__assert_fail@plt+0x3cc4>
   15014:	mov	ip, #4
   15018:	b	15038 <__assert_fail@plt+0x3cc4>
   1501c:	mov	ip, #5
   15020:	b	15038 <__assert_fail@plt+0x3cc4>
   15024:	mov	ip, #6
   15028:	b	15038 <__assert_fail@plt+0x3cc4>
   1502c:	mov	ip, #7
   15030:	b	15038 <__assert_fail@plt+0x3cc4>
   15034:	mov	ip, #8
   15038:	add	lr, sp, #16
   1503c:	str	ip, [sp, #4]
   15040:	str	lr, [sp]
   15044:	bl	14ab4 <__assert_fail@plt+0x3740>
   15048:	mov	sp, fp
   1504c:	pop	{fp, pc}
   15050:	push	{fp, lr}
   15054:	mov	fp, sp
   15058:	movw	r0, #33140	; 0x8174
   1505c:	movt	r0, #2
   15060:	ldr	r1, [r0]
   15064:	movw	r0, #26894	; 0x690e
   15068:	movt	r0, #1
   1506c:	bl	110bc <fputs_unlocked@plt>
   15070:	movw	r1, #29759	; 0x743f
   15074:	mov	r0, #0
   15078:	mov	r2, #5
   1507c:	movt	r1, #1
   15080:	bl	11158 <dcgettext@plt>
   15084:	movw	r2, #29779	; 0x7453
   15088:	mov	r1, r0
   1508c:	mov	r0, #1
   15090:	movt	r2, #1
   15094:	bl	112b4 <__printf_chk@plt>
   15098:	movw	r1, #29801	; 0x7469
   1509c:	mov	r0, #0
   150a0:	mov	r2, #5
   150a4:	movt	r1, #1
   150a8:	bl	11158 <dcgettext@plt>
   150ac:	movw	r2, #27678	; 0x6c1e
   150b0:	movw	r3, #28184	; 0x6e18
   150b4:	mov	r1, r0
   150b8:	mov	r0, #1
   150bc:	movt	r2, #1
   150c0:	movt	r3, #1
   150c4:	bl	112b4 <__printf_chk@plt>
   150c8:	movw	r1, #29821	; 0x747d
   150cc:	mov	r0, #0
   150d0:	mov	r2, #5
   150d4:	movt	r1, #1
   150d8:	bl	11158 <dcgettext@plt>
   150dc:	movw	r2, #29860	; 0x74a4
   150e0:	mov	r1, r0
   150e4:	mov	r0, #1
   150e8:	movt	r2, #1
   150ec:	pop	{fp, lr}
   150f0:	b	112b4 <__printf_chk@plt>
   150f4:	push	{r4, r5, r6, sl, fp, lr}
   150f8:	add	fp, sp, #16
   150fc:	mov	r4, r2
   15100:	mov	r5, r1
   15104:	mov	r6, r0
   15108:	bl	1651c <__assert_fail@plt+0x51a8>
   1510c:	cmp	r0, #0
   15110:	popne	{r4, r5, r6, sl, fp, pc}
   15114:	cmp	r6, #0
   15118:	beq	1512c <__assert_fail@plt+0x3db8>
   1511c:	cmp	r5, #0
   15120:	cmpne	r4, #0
   15124:	bne	1512c <__assert_fail@plt+0x3db8>
   15128:	pop	{r4, r5, r6, sl, fp, pc}
   1512c:	bl	156cc <__assert_fail@plt+0x4358>
   15130:	push	{r4, r5, r6, sl, fp, lr}
   15134:	add	fp, sp, #16
   15138:	mov	r4, r2
   1513c:	mov	r5, r1
   15140:	mov	r6, r0
   15144:	bl	1651c <__assert_fail@plt+0x51a8>
   15148:	cmp	r0, #0
   1514c:	popne	{r4, r5, r6, sl, fp, pc}
   15150:	cmp	r6, #0
   15154:	beq	15168 <__assert_fail@plt+0x3df4>
   15158:	cmp	r5, #0
   1515c:	cmpne	r4, #0
   15160:	bne	15168 <__assert_fail@plt+0x3df4>
   15164:	pop	{r4, r5, r6, sl, fp, pc}
   15168:	bl	156cc <__assert_fail@plt+0x4358>
   1516c:	push	{fp, lr}
   15170:	mov	fp, sp
   15174:	bl	15fbc <__assert_fail@plt+0x4c48>
   15178:	cmp	r0, #0
   1517c:	popne	{fp, pc}
   15180:	bl	156cc <__assert_fail@plt+0x4358>
   15184:	push	{fp, lr}
   15188:	mov	fp, sp
   1518c:	bl	15fbc <__assert_fail@plt+0x4c48>
   15190:	cmp	r0, #0
   15194:	popne	{fp, pc}
   15198:	bl	156cc <__assert_fail@plt+0x4358>
   1519c:	push	{fp, lr}
   151a0:	mov	fp, sp
   151a4:	bl	15fbc <__assert_fail@plt+0x4c48>
   151a8:	cmp	r0, #0
   151ac:	popne	{fp, pc}
   151b0:	bl	156cc <__assert_fail@plt+0x4358>
   151b4:	push	{r4, r5, fp, lr}
   151b8:	add	fp, sp, #8
   151bc:	mov	r4, r1
   151c0:	mov	r5, r0
   151c4:	bl	15fec <__assert_fail@plt+0x4c78>
   151c8:	cmp	r0, #0
   151cc:	popne	{r4, r5, fp, pc}
   151d0:	cmp	r5, #0
   151d4:	beq	151e4 <__assert_fail@plt+0x3e70>
   151d8:	cmp	r4, #0
   151dc:	bne	151e4 <__assert_fail@plt+0x3e70>
   151e0:	pop	{r4, r5, fp, pc}
   151e4:	bl	156cc <__assert_fail@plt+0x4358>
   151e8:	push	{fp, lr}
   151ec:	mov	fp, sp
   151f0:	cmp	r1, #0
   151f4:	orreq	r1, r1, #1
   151f8:	bl	15fec <__assert_fail@plt+0x4c78>
   151fc:	cmp	r0, #0
   15200:	popne	{fp, pc}
   15204:	bl	156cc <__assert_fail@plt+0x4358>
   15208:	push	{fp, lr}
   1520c:	mov	fp, sp
   15210:	clz	r3, r2
   15214:	lsr	ip, r3, #5
   15218:	clz	r3, r1
   1521c:	lsr	r3, r3, #5
   15220:	orrs	r3, r3, ip
   15224:	movwne	r1, #1
   15228:	movwne	r2, #1
   1522c:	bl	1651c <__assert_fail@plt+0x51a8>
   15230:	cmp	r0, #0
   15234:	popne	{fp, pc}
   15238:	bl	156cc <__assert_fail@plt+0x4358>
   1523c:	push	{fp, lr}
   15240:	mov	fp, sp
   15244:	mov	r2, r1
   15248:	mov	r1, r0
   1524c:	mov	r0, #0
   15250:	bl	1651c <__assert_fail@plt+0x51a8>
   15254:	cmp	r0, #0
   15258:	popne	{fp, pc}
   1525c:	bl	156cc <__assert_fail@plt+0x4358>
   15260:	push	{fp, lr}
   15264:	mov	fp, sp
   15268:	mov	r2, r1
   1526c:	mov	r1, r0
   15270:	clz	r0, r2
   15274:	clz	r3, r1
   15278:	lsr	r0, r0, #5
   1527c:	lsr	r3, r3, #5
   15280:	orrs	r0, r3, r0
   15284:	movwne	r1, #1
   15288:	movwne	r2, #1
   1528c:	mov	r0, #0
   15290:	bl	1651c <__assert_fail@plt+0x51a8>
   15294:	cmp	r0, #0
   15298:	popne	{fp, pc}
   1529c:	bl	156cc <__assert_fail@plt+0x4358>
   152a0:	push	{r4, r5, r6, sl, fp, lr}
   152a4:	add	fp, sp, #16
   152a8:	ldr	r5, [r1]
   152ac:	mov	r4, r1
   152b0:	mov	r6, r0
   152b4:	cmp	r0, #0
   152b8:	beq	152d0 <__assert_fail@plt+0x3f5c>
   152bc:	mov	r0, #1
   152c0:	add	r0, r0, r5, lsr #1
   152c4:	adds	r5, r5, r0
   152c8:	bcc	152d8 <__assert_fail@plt+0x3f64>
   152cc:	b	15314 <__assert_fail@plt+0x3fa0>
   152d0:	cmp	r5, #0
   152d4:	movweq	r5, #64	; 0x40
   152d8:	mov	r0, r6
   152dc:	mov	r1, r5
   152e0:	mov	r2, #1
   152e4:	bl	1651c <__assert_fail@plt+0x51a8>
   152e8:	cmp	r5, #0
   152ec:	mov	r1, r5
   152f0:	movwne	r1, #1
   152f4:	cmp	r0, #0
   152f8:	bne	1530c <__assert_fail@plt+0x3f98>
   152fc:	clz	r2, r6
   15300:	lsr	r2, r2, #5
   15304:	orrs	r1, r2, r1
   15308:	bne	15314 <__assert_fail@plt+0x3fa0>
   1530c:	str	r5, [r4]
   15310:	pop	{r4, r5, r6, sl, fp, pc}
   15314:	bl	156cc <__assert_fail@plt+0x4358>
   15318:	push	{r4, r5, r6, r7, fp, lr}
   1531c:	add	fp, sp, #16
   15320:	ldr	r5, [r1]
   15324:	mov	r6, r2
   15328:	mov	r4, r1
   1532c:	mov	r7, r0
   15330:	cmp	r0, #0
   15334:	beq	1534c <__assert_fail@plt+0x3fd8>
   15338:	mov	r0, #1
   1533c:	add	r0, r0, r5, lsr #1
   15340:	adds	r5, r5, r0
   15344:	bcc	15364 <__assert_fail@plt+0x3ff0>
   15348:	b	15398 <__assert_fail@plt+0x4024>
   1534c:	cmp	r5, #0
   15350:	bne	15364 <__assert_fail@plt+0x3ff0>
   15354:	mov	r0, #64	; 0x40
   15358:	cmp	r6, #64	; 0x40
   1535c:	udiv	r5, r0, r6
   15360:	addhi	r5, r5, #1
   15364:	mov	r0, r7
   15368:	mov	r1, r5
   1536c:	mov	r2, r6
   15370:	bl	1651c <__assert_fail@plt+0x51a8>
   15374:	cmp	r0, #0
   15378:	bne	15390 <__assert_fail@plt+0x401c>
   1537c:	cmp	r7, #0
   15380:	beq	15398 <__assert_fail@plt+0x4024>
   15384:	cmp	r6, #0
   15388:	cmpne	r5, #0
   1538c:	bne	15398 <__assert_fail@plt+0x4024>
   15390:	str	r5, [r4]
   15394:	pop	{r4, r5, r6, r7, fp, pc}
   15398:	bl	156cc <__assert_fail@plt+0x4358>
   1539c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   153a0:	add	fp, sp, #24
   153a4:	mov	r8, r1
   153a8:	ldr	r1, [r1]
   153ac:	mov	r5, r0
   153b0:	add	r0, r1, r1, asr #1
   153b4:	cmp	r0, r1
   153b8:	mvnvs	r0, #-2147483648	; 0x80000000
   153bc:	cmp	r0, r3
   153c0:	mov	r7, r0
   153c4:	movgt	r7, r3
   153c8:	cmn	r3, #1
   153cc:	movle	r7, r0
   153d0:	ldr	r0, [fp, #8]
   153d4:	cmn	r0, #1
   153d8:	ble	15400 <__assert_fail@plt+0x408c>
   153dc:	cmp	r0, #0
   153e0:	beq	15454 <__assert_fail@plt+0x40e0>
   153e4:	cmn	r7, #1
   153e8:	ble	15428 <__assert_fail@plt+0x40b4>
   153ec:	mvn	r4, #-2147483648	; 0x80000000
   153f0:	udiv	r6, r4, r0
   153f4:	cmp	r6, r7
   153f8:	bge	15454 <__assert_fail@plt+0x40e0>
   153fc:	b	15464 <__assert_fail@plt+0x40f0>
   15400:	cmn	r7, #1
   15404:	ble	15444 <__assert_fail@plt+0x40d0>
   15408:	cmn	r0, #1
   1540c:	beq	15454 <__assert_fail@plt+0x40e0>
   15410:	mov	r6, #-2147483648	; 0x80000000
   15414:	mvn	r4, #-2147483648	; 0x80000000
   15418:	sdiv	r6, r6, r0
   1541c:	cmp	r6, r7
   15420:	bge	15454 <__assert_fail@plt+0x40e0>
   15424:	b	15464 <__assert_fail@plt+0x40f0>
   15428:	beq	15454 <__assert_fail@plt+0x40e0>
   1542c:	mov	r6, #-2147483648	; 0x80000000
   15430:	mvn	r4, #-2147483648	; 0x80000000
   15434:	sdiv	r6, r6, r7
   15438:	cmp	r6, r0
   1543c:	bge	15454 <__assert_fail@plt+0x40e0>
   15440:	b	15464 <__assert_fail@plt+0x40f0>
   15444:	mvn	r4, #-2147483648	; 0x80000000
   15448:	sdiv	r6, r4, r0
   1544c:	cmp	r7, r6
   15450:	blt	15464 <__assert_fail@plt+0x40f0>
   15454:	mul	r6, r7, r0
   15458:	mov	r4, #64	; 0x40
   1545c:	cmp	r6, #63	; 0x3f
   15460:	bgt	1546c <__assert_fail@plt+0x40f8>
   15464:	sdiv	r7, r4, r0
   15468:	mul	r6, r7, r0
   1546c:	cmp	r5, #0
   15470:	moveq	r4, #0
   15474:	streq	r4, [r8]
   15478:	sub	r4, r7, r1
   1547c:	cmp	r4, r2
   15480:	bge	1552c <__assert_fail@plt+0x41b8>
   15484:	add	r7, r1, r2
   15488:	mov	r6, #0
   1548c:	mov	r2, #0
   15490:	cmp	r7, r3
   15494:	movwgt	r6, #1
   15498:	cmn	r3, #1
   1549c:	movwgt	r2, #1
   154a0:	cmp	r7, r1
   154a4:	bvs	15560 <__assert_fail@plt+0x41ec>
   154a8:	ands	r1, r2, r6
   154ac:	bne	15560 <__assert_fail@plt+0x41ec>
   154b0:	cmn	r0, #1
   154b4:	ble	154dc <__assert_fail@plt+0x4168>
   154b8:	cmp	r0, #0
   154bc:	beq	15528 <__assert_fail@plt+0x41b4>
   154c0:	cmn	r7, #1
   154c4:	ble	15500 <__assert_fail@plt+0x418c>
   154c8:	mvn	r1, #-2147483648	; 0x80000000
   154cc:	udiv	r1, r1, r0
   154d0:	cmp	r1, r7
   154d4:	bge	15528 <__assert_fail@plt+0x41b4>
   154d8:	b	15560 <__assert_fail@plt+0x41ec>
   154dc:	cmn	r7, #1
   154e0:	ble	15518 <__assert_fail@plt+0x41a4>
   154e4:	cmn	r0, #1
   154e8:	beq	15528 <__assert_fail@plt+0x41b4>
   154ec:	mov	r1, #-2147483648	; 0x80000000
   154f0:	sdiv	r1, r1, r0
   154f4:	cmp	r1, r7
   154f8:	bge	15528 <__assert_fail@plt+0x41b4>
   154fc:	b	15560 <__assert_fail@plt+0x41ec>
   15500:	beq	15528 <__assert_fail@plt+0x41b4>
   15504:	mov	r1, #-2147483648	; 0x80000000
   15508:	sdiv	r1, r1, r7
   1550c:	cmp	r1, r0
   15510:	bge	15528 <__assert_fail@plt+0x41b4>
   15514:	b	15560 <__assert_fail@plt+0x41ec>
   15518:	mvn	r1, #-2147483648	; 0x80000000
   1551c:	sdiv	r1, r1, r0
   15520:	cmp	r7, r1
   15524:	blt	15560 <__assert_fail@plt+0x41ec>
   15528:	mul	r6, r7, r0
   1552c:	mov	r0, r5
   15530:	mov	r1, r6
   15534:	bl	15fec <__assert_fail@plt+0x4c78>
   15538:	cmp	r6, #0
   1553c:	movwne	r6, #1
   15540:	cmp	r0, #0
   15544:	bne	15558 <__assert_fail@plt+0x41e4>
   15548:	clz	r1, r5
   1554c:	lsr	r1, r1, #5
   15550:	orrs	r1, r1, r6
   15554:	bne	15560 <__assert_fail@plt+0x41ec>
   15558:	str	r7, [r8]
   1555c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15560:	bl	156cc <__assert_fail@plt+0x4358>
   15564:	push	{fp, lr}
   15568:	mov	fp, sp
   1556c:	mov	r1, #1
   15570:	bl	15f68 <__assert_fail@plt+0x4bf4>
   15574:	cmp	r0, #0
   15578:	popne	{fp, pc}
   1557c:	bl	156cc <__assert_fail@plt+0x4358>
   15580:	push	{fp, lr}
   15584:	mov	fp, sp
   15588:	bl	15f68 <__assert_fail@plt+0x4bf4>
   1558c:	cmp	r0, #0
   15590:	popne	{fp, pc}
   15594:	bl	156cc <__assert_fail@plt+0x4358>
   15598:	push	{fp, lr}
   1559c:	mov	fp, sp
   155a0:	mov	r1, #1
   155a4:	bl	15f68 <__assert_fail@plt+0x4bf4>
   155a8:	cmp	r0, #0
   155ac:	popne	{fp, pc}
   155b0:	bl	156cc <__assert_fail@plt+0x4358>
   155b4:	push	{fp, lr}
   155b8:	mov	fp, sp
   155bc:	bl	15f68 <__assert_fail@plt+0x4bf4>
   155c0:	cmp	r0, #0
   155c4:	popne	{fp, pc}
   155c8:	bl	156cc <__assert_fail@plt+0x4358>
   155cc:	push	{r4, r5, r6, sl, fp, lr}
   155d0:	add	fp, sp, #16
   155d4:	mov	r5, r0
   155d8:	mov	r0, r1
   155dc:	mov	r4, r1
   155e0:	bl	15fbc <__assert_fail@plt+0x4c48>
   155e4:	cmp	r0, #0
   155e8:	beq	15604 <__assert_fail@plt+0x4290>
   155ec:	mov	r1, r5
   155f0:	mov	r2, r4
   155f4:	mov	r6, r0
   155f8:	bl	11134 <memcpy@plt>
   155fc:	mov	r0, r6
   15600:	pop	{r4, r5, r6, sl, fp, pc}
   15604:	bl	156cc <__assert_fail@plt+0x4358>
   15608:	push	{r4, r5, r6, sl, fp, lr}
   1560c:	add	fp, sp, #16
   15610:	mov	r5, r0
   15614:	mov	r0, r1
   15618:	mov	r4, r1
   1561c:	bl	15fbc <__assert_fail@plt+0x4c48>
   15620:	cmp	r0, #0
   15624:	beq	15640 <__assert_fail@plt+0x42cc>
   15628:	mov	r1, r5
   1562c:	mov	r2, r4
   15630:	mov	r6, r0
   15634:	bl	11134 <memcpy@plt>
   15638:	mov	r0, r6
   1563c:	pop	{r4, r5, r6, sl, fp, pc}
   15640:	bl	156cc <__assert_fail@plt+0x4358>
   15644:	push	{r4, r5, r6, sl, fp, lr}
   15648:	add	fp, sp, #16
   1564c:	mov	r5, r0
   15650:	add	r0, r1, #1
   15654:	mov	r4, r1
   15658:	bl	15fbc <__assert_fail@plt+0x4c48>
   1565c:	cmp	r0, #0
   15660:	beq	15688 <__assert_fail@plt+0x4314>
   15664:	mov	r6, r0
   15668:	mov	r0, #0
   1566c:	mov	r1, r5
   15670:	mov	r2, r4
   15674:	strb	r0, [r6, r4]
   15678:	mov	r0, r6
   1567c:	bl	11134 <memcpy@plt>
   15680:	mov	r0, r6
   15684:	pop	{r4, r5, r6, sl, fp, pc}
   15688:	bl	156cc <__assert_fail@plt+0x4358>
   1568c:	push	{r4, r5, r6, sl, fp, lr}
   15690:	add	fp, sp, #16
   15694:	mov	r4, r0
   15698:	bl	11260 <strlen@plt>
   1569c:	add	r5, r0, #1
   156a0:	mov	r0, r5
   156a4:	bl	15fbc <__assert_fail@plt+0x4c48>
   156a8:	cmp	r0, #0
   156ac:	beq	156c8 <__assert_fail@plt+0x4354>
   156b0:	mov	r1, r4
   156b4:	mov	r2, r5
   156b8:	mov	r6, r0
   156bc:	bl	11134 <memcpy@plt>
   156c0:	mov	r0, r6
   156c4:	pop	{r4, r5, r6, sl, fp, pc}
   156c8:	bl	156cc <__assert_fail@plt+0x4358>
   156cc:	push	{fp, lr}
   156d0:	mov	fp, sp
   156d4:	movw	r0, #33048	; 0x8118
   156d8:	movw	r1, #29936	; 0x74f0
   156dc:	mov	r2, #5
   156e0:	movt	r0, #2
   156e4:	movt	r1, #1
   156e8:	ldr	r4, [r0]
   156ec:	mov	r0, #0
   156f0:	bl	11158 <dcgettext@plt>
   156f4:	movw	r2, #28857	; 0x70b9
   156f8:	mov	r3, r0
   156fc:	mov	r0, r4
   15700:	mov	r1, #0
   15704:	movt	r2, #1
   15708:	bl	111e8 <error@plt>
   1570c:	bl	11350 <abort@plt>
   15710:	push	{r4, sl, fp, lr}
   15714:	add	fp, sp, #8
   15718:	bl	162f8 <__assert_fail@plt+0x4f84>
   1571c:	mov	r4, r0
   15720:	cmn	r0, #1
   15724:	bne	15738 <__assert_fail@plt+0x43c4>
   15728:	bl	11278 <__errno_location@plt>
   1572c:	ldr	r0, [r0]
   15730:	cmp	r0, #12
   15734:	beq	15740 <__assert_fail@plt+0x43cc>
   15738:	mov	r0, r4
   1573c:	pop	{r4, sl, fp, pc}
   15740:	bl	156cc <__assert_fail@plt+0x4358>
   15744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15748:	add	fp, sp, #28
   1574c:	sub	sp, sp, #20
   15750:	cmp	r2, #37	; 0x25
   15754:	bcs	15f48 <__assert_fail@plt+0x4bd4>
   15758:	ldr	r9, [fp, #8]
   1575c:	mov	r5, r2
   15760:	mov	r4, r1
   15764:	mov	r7, r0
   15768:	str	r3, [sp, #12]
   1576c:	bl	11278 <__errno_location@plt>
   15770:	mov	r8, r0
   15774:	mov	r0, #0
   15778:	str	r0, [r8]
   1577c:	bl	1123c <__ctype_b_loc@plt>
   15780:	ldr	r1, [r0]
   15784:	mov	r2, r7
   15788:	ldrb	r0, [r2], #1
   1578c:	add	r3, r1, r0, lsl #1
   15790:	ldrb	r3, [r3, #1]
   15794:	tst	r3, #32
   15798:	bne	15788 <__assert_fail@plt+0x4414>
   1579c:	add	r6, sp, #16
   157a0:	cmp	r4, #0
   157a4:	mov	sl, #4
   157a8:	movne	r6, r4
   157ac:	cmp	r0, #45	; 0x2d
   157b0:	beq	15f3c <__assert_fail@plt+0x4bc8>
   157b4:	mov	r0, r7
   157b8:	mov	r1, r6
   157bc:	mov	r2, r5
   157c0:	bl	11254 <strtoul@plt>
   157c4:	ldr	r5, [r6]
   157c8:	cmp	r5, r7
   157cc:	beq	157f8 <__assert_fail@plt+0x4484>
   157d0:	mov	r4, r0
   157d4:	ldr	r0, [r8]
   157d8:	cmp	r0, #0
   157dc:	beq	15824 <__assert_fail@plt+0x44b0>
   157e0:	cmp	r0, #34	; 0x22
   157e4:	bne	15f3c <__assert_fail@plt+0x4bc8>
   157e8:	mov	sl, #1
   157ec:	cmp	r9, #0
   157f0:	bne	15830 <__assert_fail@plt+0x44bc>
   157f4:	b	15f34 <__assert_fail@plt+0x4bc0>
   157f8:	cmp	r9, #0
   157fc:	ldrbne	r1, [r7]
   15800:	cmpne	r1, #0
   15804:	beq	15f3c <__assert_fail@plt+0x4bc8>
   15808:	mov	r0, r9
   1580c:	bl	1126c <strchr@plt>
   15810:	cmp	r0, #0
   15814:	beq	15f3c <__assert_fail@plt+0x4bc8>
   15818:	mov	r4, #1
   1581c:	mov	sl, #0
   15820:	b	15830 <__assert_fail@plt+0x44bc>
   15824:	mov	sl, r0
   15828:	cmp	r9, #0
   1582c:	beq	15f34 <__assert_fail@plt+0x4bc0>
   15830:	ldrb	r7, [r5]
   15834:	cmp	r7, #0
   15838:	beq	15f34 <__assert_fail@plt+0x4bc0>
   1583c:	mov	r0, r9
   15840:	mov	r1, r7
   15844:	bl	1126c <strchr@plt>
   15848:	cmp	r0, #0
   1584c:	beq	15ac8 <__assert_fail@plt+0x4754>
   15850:	sub	r0, r7, #69	; 0x45
   15854:	mov	lr, #1
   15858:	mov	r8, #1024	; 0x400
   1585c:	cmp	r0, #47	; 0x2f
   15860:	bhi	1597c <__assert_fail@plt+0x4608>
   15864:	add	r1, pc, #0
   15868:	ldr	pc, [r1, r0, lsl #2]
   1586c:	andeq	r5, r1, ip, lsr #18
   15870:	andeq	r5, r1, ip, ror r9
   15874:	andeq	r5, r1, ip, lsr #18
   15878:	andeq	r5, r1, ip, ror r9
   1587c:	andeq	r5, r1, ip, ror r9
   15880:	andeq	r5, r1, ip, ror r9
   15884:	andeq	r5, r1, ip, lsr #18
   15888:	andeq	r5, r1, ip, ror r9
   1588c:	andeq	r5, r1, ip, lsr #18
   15890:	andeq	r5, r1, ip, ror r9
   15894:	andeq	r5, r1, ip, ror r9
   15898:	andeq	r5, r1, ip, lsr #18
   1589c:	andeq	r5, r1, ip, ror r9
   158a0:	andeq	r5, r1, ip, ror r9
   158a4:	andeq	r5, r1, ip, ror r9
   158a8:	andeq	r5, r1, ip, lsr #18
   158ac:	andeq	r5, r1, ip, ror r9
   158b0:	andeq	r5, r1, ip, ror r9
   158b4:	andeq	r5, r1, ip, ror r9
   158b8:	andeq	r5, r1, ip, ror r9
   158bc:	andeq	r5, r1, ip, lsr #18
   158c0:	andeq	r5, r1, ip, lsr #18
   158c4:	andeq	r5, r1, ip, ror r9
   158c8:	andeq	r5, r1, ip, ror r9
   158cc:	andeq	r5, r1, ip, ror r9
   158d0:	andeq	r5, r1, ip, ror r9
   158d4:	andeq	r5, r1, ip, ror r9
   158d8:	andeq	r5, r1, ip, ror r9
   158dc:	andeq	r5, r1, ip, ror r9
   158e0:	andeq	r5, r1, ip, ror r9
   158e4:	andeq	r5, r1, ip, ror r9
   158e8:	andeq	r5, r1, ip, ror r9
   158ec:	andeq	r5, r1, ip, ror r9
   158f0:	andeq	r5, r1, ip, ror r9
   158f4:	andeq	r5, r1, ip, lsr #18
   158f8:	andeq	r5, r1, ip, ror r9
   158fc:	andeq	r5, r1, ip, ror r9
   15900:	andeq	r5, r1, ip, ror r9
   15904:	andeq	r5, r1, ip, lsr #18
   15908:	andeq	r5, r1, ip, ror r9
   1590c:	andeq	r5, r1, ip, lsr #18
   15910:	andeq	r5, r1, ip, ror r9
   15914:	andeq	r5, r1, ip, ror r9
   15918:	andeq	r5, r1, ip, ror r9
   1591c:	andeq	r5, r1, ip, ror r9
   15920:	andeq	r5, r1, ip, ror r9
   15924:	andeq	r5, r1, ip, ror r9
   15928:	andeq	r5, r1, ip, lsr #18
   1592c:	mov	r0, r9
   15930:	mov	r1, #48	; 0x30
   15934:	bl	1126c <strchr@plt>
   15938:	cmp	r0, #0
   1593c:	beq	15978 <__assert_fail@plt+0x4604>
   15940:	ldrb	r0, [r5, #1]
   15944:	cmp	r0, #66	; 0x42
   15948:	cmpne	r0, #68	; 0x44
   1594c:	bne	1595c <__assert_fail@plt+0x45e8>
   15950:	mov	lr, #2
   15954:	mov	r8, #1000	; 0x3e8
   15958:	b	1597c <__assert_fail@plt+0x4608>
   1595c:	cmp	r0, #105	; 0x69
   15960:	bne	15978 <__assert_fail@plt+0x4604>
   15964:	ldrb	r0, [r5, #2]
   15968:	mov	lr, #1
   1596c:	cmp	r0, #66	; 0x42
   15970:	movweq	lr, #3
   15974:	b	1597c <__assert_fail@plt+0x4608>
   15978:	mov	lr, #1
   1597c:	sub	r1, r7, #66	; 0x42
   15980:	cmp	r1, #53	; 0x35
   15984:	bhi	15ac8 <__assert_fail@plt+0x4754>
   15988:	add	r2, pc, #4
   1598c:	mov	r0, #0
   15990:	ldr	pc, [r2, r1, lsl #2]
   15994:	andeq	r5, r1, ip, ror ip
   15998:	andeq	r5, r1, r8, asr #21
   1599c:	andeq	r5, r1, r8, asr #21
   159a0:	muleq	r1, r8, ip
   159a4:	andeq	r5, r1, r8, asr #21
   159a8:	andeq	r5, r1, ip, ror #20
   159ac:	andeq	r5, r1, r8, asr #21
   159b0:	andeq	r5, r1, r8, asr #21
   159b4:	andeq	r5, r1, r8, asr #21
   159b8:	ldrdeq	r5, [r1], -r4
   159bc:	andeq	r5, r1, r8, asr #21
   159c0:	strdeq	r5, [r1], -r4
   159c4:	andeq	r5, r1, r8, asr #21
   159c8:	andeq	r5, r1, r8, asr #21
   159cc:	andeq	r5, r1, r0, asr sp
   159d0:	andeq	r5, r1, r8, asr #21
   159d4:	andeq	r5, r1, r8, asr #21
   159d8:	andeq	r5, r1, r8, asr #21
   159dc:	andeq	r5, r1, r4, lsr fp
   159e0:	andeq	r5, r1, r8, asr #21
   159e4:	andeq	r5, r1, r8, asr #21
   159e8:	andeq	r5, r1, r8, asr #21
   159ec:	andeq	r5, r1, r8, asr #21
   159f0:	andeq	r5, r1, ip, ror #27
   159f4:	andeq	r5, r1, r8, lsr #23
   159f8:	andeq	r5, r1, r8, asr #21
   159fc:	andeq	r5, r1, r8, asr #21
   15a00:	andeq	r5, r1, r8, asr #21
   15a04:	andeq	r5, r1, r8, asr #21
   15a08:	andeq	r5, r1, r8, asr #21
   15a0c:	andeq	r5, r1, r8, asr #21
   15a10:	andeq	r5, r1, r8, asr #21
   15a14:	andeq	r5, r1, r4, ror #29
   15a18:	andeq	r5, r1, ip, lsl pc
   15a1c:	andeq	r5, r1, r8, asr #21
   15a20:	andeq	r5, r1, r8, asr #21
   15a24:	andeq	r5, r1, r8, asr #21
   15a28:	andeq	r5, r1, ip, ror #20
   15a2c:	andeq	r5, r1, r8, asr #21
   15a30:	andeq	r5, r1, r8, asr #21
   15a34:	andeq	r5, r1, r8, asr #21
   15a38:	ldrdeq	r5, [r1], -r4
   15a3c:	andeq	r5, r1, r8, asr #21
   15a40:	strdeq	r5, [r1], -r4
   15a44:	andeq	r5, r1, r8, asr #21
   15a48:	andeq	r5, r1, r8, asr #21
   15a4c:	andeq	r5, r1, r8, asr #21
   15a50:	andeq	r5, r1, r8, asr #21
   15a54:	andeq	r5, r1, r8, asr #21
   15a58:	andeq	r5, r1, r8, asr #21
   15a5c:	andeq	r5, r1, r4, lsr fp
   15a60:	andeq	r5, r1, r8, asr #21
   15a64:	andeq	r5, r1, r8, asr #21
   15a68:	andeq	r5, r1, r8, lsl #30
   15a6c:	mvn	r0, #0
   15a70:	mul	r1, r4, r8
   15a74:	mov	r7, #0
   15a78:	udiv	r0, r0, r8
   15a7c:	cmp	r0, r4
   15a80:	mvncc	r1, #0
   15a84:	mul	r2, r1, r8
   15a88:	cmp	r0, r1
   15a8c:	mvncc	r2, #0
   15a90:	cmp	r0, r2
   15a94:	mul	r3, r2, r8
   15a98:	mov	r2, #0
   15a9c:	mvncc	r3, #0
   15aa0:	movwcc	r7, #1
   15aa4:	cmp	r0, r1
   15aa8:	mov	r1, #0
   15aac:	movwcc	r1, #1
   15ab0:	cmp	r0, r4
   15ab4:	mov	r4, r3
   15ab8:	movwcc	r2, #1
   15abc:	orr	r0, r2, r1
   15ac0:	orr	r0, r0, r7
   15ac4:	b	15f1c <__assert_fail@plt+0x4ba8>
   15ac8:	ldr	r0, [sp, #12]
   15acc:	orr	sl, sl, #2
   15ad0:	b	15f38 <__assert_fail@plt+0x4bc4>
   15ad4:	mvn	r0, #0
   15ad8:	mul	r1, r4, r8
   15adc:	udiv	r0, r0, r8
   15ae0:	cmp	r0, r4
   15ae4:	mov	r0, #0
   15ae8:	mvncc	r1, #0
   15aec:	movwcc	r0, #1
   15af0:	b	15f18 <__assert_fail@plt+0x4ba4>
   15af4:	mvn	r0, #0
   15af8:	mul	r1, r4, r8
   15afc:	mov	r3, #0
   15b00:	udiv	r0, r0, r8
   15b04:	cmp	r0, r4
   15b08:	mvncc	r1, #0
   15b0c:	cmp	r0, r1
   15b10:	mul	r2, r1, r8
   15b14:	mov	r1, #0
   15b18:	mvncc	r2, #0
   15b1c:	movwcc	r3, #1
   15b20:	cmp	r0, r4
   15b24:	movwcc	r1, #1
   15b28:	mov	r4, r2
   15b2c:	orr	r0, r1, r3
   15b30:	b	15f1c <__assert_fail@plt+0x4ba8>
   15b34:	mvn	r0, #0
   15b38:	mul	r1, r4, r8
   15b3c:	mov	r7, #0
   15b40:	udiv	r0, r0, r8
   15b44:	cmp	r0, r4
   15b48:	mvncc	r1, #0
   15b4c:	mul	r2, r1, r8
   15b50:	cmp	r0, r1
   15b54:	mvncc	r2, #0
   15b58:	mul	r3, r2, r8
   15b5c:	cmp	r0, r2
   15b60:	mvncc	r3, #0
   15b64:	cmp	r0, r3
   15b68:	mul	ip, r3, r8
   15b6c:	mov	r3, #0
   15b70:	mvncc	ip, #0
   15b74:	movwcc	r7, #1
   15b78:	cmp	r0, r2
   15b7c:	mov	r2, #0
   15b80:	movwcc	r2, #1
   15b84:	cmp	r0, r1
   15b88:	mov	r1, #0
   15b8c:	movwcc	r1, #1
   15b90:	cmp	r0, r4
   15b94:	movwcc	r3, #1
   15b98:	orr	r0, r3, r1
   15b9c:	orr	r0, r0, r2
   15ba0:	orr	r0, r0, r7
   15ba4:	b	15de4 <__assert_fail@plt+0x4a70>
   15ba8:	mvn	r0, #0
   15bac:	str	lr, [sp, #8]
   15bb0:	mul	lr, r4, r8
   15bb4:	udiv	r0, r0, r8
   15bb8:	cmp	r0, r4
   15bbc:	mvncc	lr, #0
   15bc0:	mul	r9, lr, r8
   15bc4:	cmp	r0, lr
   15bc8:	mvncc	r9, #0
   15bcc:	mul	r7, r9, r8
   15bd0:	cmp	r0, r9
   15bd4:	mvncc	r7, #0
   15bd8:	mul	r3, r7, r8
   15bdc:	cmp	r0, r7
   15be0:	mvncc	r3, #0
   15be4:	mul	r1, r3, r8
   15be8:	cmp	r0, r3
   15bec:	mvncc	r1, #0
   15bf0:	mul	r2, r1, r8
   15bf4:	cmp	r0, r1
   15bf8:	mvncc	r2, #0
   15bfc:	mul	ip, r2, r8
   15c00:	cmp	r0, r2
   15c04:	mov	r8, #0
   15c08:	mov	r2, #0
   15c0c:	mvncc	ip, #0
   15c10:	movwcc	r8, #1
   15c14:	cmp	r0, r1
   15c18:	mov	r1, #0
   15c1c:	movwcc	r1, #1
   15c20:	cmp	r0, r3
   15c24:	mov	r3, #0
   15c28:	movwcc	r3, #1
   15c2c:	cmp	r0, r7
   15c30:	mov	r7, #0
   15c34:	movwcc	r7, #1
   15c38:	cmp	r0, r9
   15c3c:	mov	r9, #0
   15c40:	movwcc	r9, #1
   15c44:	cmp	r0, lr
   15c48:	mov	lr, #0
   15c4c:	movwcc	lr, #1
   15c50:	cmp	r0, r4
   15c54:	movwcc	r2, #1
   15c58:	orr	r0, r2, lr
   15c5c:	ldr	lr, [sp, #8]
   15c60:	orr	r0, r0, r9
   15c64:	orr	r0, r0, r7
   15c68:	orr	r0, r0, r3
   15c6c:	orr	r0, r0, r1
   15c70:	orr	r0, r0, r8
   15c74:	and	r0, r0, #1
   15c78:	b	15de4 <__assert_fail@plt+0x4a70>
   15c7c:	mov	r1, #0
   15c80:	lsr	r0, r4, #22
   15c84:	cmp	r1, r4, lsr #22
   15c88:	lsl	r4, r4, #10
   15c8c:	movwne	r0, #1
   15c90:	mvnne	r4, #0
   15c94:	b	15f1c <__assert_fail@plt+0x4ba8>
   15c98:	mvn	r0, #0
   15c9c:	mul	ip, r4, r8
   15ca0:	str	lr, [sp, #8]
   15ca4:	mov	r9, #0
   15ca8:	udiv	r0, r0, r8
   15cac:	cmp	r0, r4
   15cb0:	mvncc	ip, #0
   15cb4:	mul	r2, ip, r8
   15cb8:	cmp	r0, ip
   15cbc:	mvncc	r2, #0
   15cc0:	mul	r3, r2, r8
   15cc4:	cmp	r0, r2
   15cc8:	mvncc	r3, #0
   15ccc:	mul	r7, r3, r8
   15cd0:	cmp	r0, r3
   15cd4:	mvncc	r7, #0
   15cd8:	mul	r1, r7, r8
   15cdc:	cmp	r0, r7
   15ce0:	mvncc	r1, #0
   15ce4:	mul	lr, r1, r8
   15ce8:	cmp	r0, r1
   15cec:	mov	r8, #0
   15cf0:	mov	r1, #0
   15cf4:	mvncc	lr, #0
   15cf8:	movwcc	r8, #1
   15cfc:	cmp	r0, r7
   15d00:	mov	r7, #0
   15d04:	movwcc	r7, #1
   15d08:	cmp	r0, r3
   15d0c:	mov	r3, #0
   15d10:	movwcc	r3, #1
   15d14:	cmp	r0, r2
   15d18:	mov	r2, #0
   15d1c:	movwcc	r2, #1
   15d20:	cmp	r0, ip
   15d24:	movwcc	r1, #1
   15d28:	cmp	r0, r4
   15d2c:	mov	r4, lr
   15d30:	ldr	lr, [sp, #8]
   15d34:	movwcc	r9, #1
   15d38:	orr	r0, r9, r1
   15d3c:	orr	r0, r0, r2
   15d40:	orr	r0, r0, r3
   15d44:	orr	r0, r0, r7
   15d48:	orr	r0, r0, r8
   15d4c:	b	15f1c <__assert_fail@plt+0x4ba8>
   15d50:	mvn	r0, #0
   15d54:	mul	r1, r4, r8
   15d58:	udiv	r0, r0, r8
   15d5c:	cmp	r0, r4
   15d60:	mvncc	r1, #0
   15d64:	mul	r2, r1, r8
   15d68:	cmp	r0, r1
   15d6c:	mvncc	r2, #0
   15d70:	mul	r3, r2, r8
   15d74:	cmp	r0, r2
   15d78:	mvncc	r3, #0
   15d7c:	mul	r7, r3, r8
   15d80:	cmp	r0, r3
   15d84:	mvncc	r7, #0
   15d88:	mul	ip, r7, r8
   15d8c:	cmp	r0, r7
   15d90:	mov	r8, lr
   15d94:	mov	lr, #0
   15d98:	mov	r7, #0
   15d9c:	mvncc	ip, #0
   15da0:	movwcc	lr, #1
   15da4:	cmp	r0, r3
   15da8:	mov	r3, #0
   15dac:	movwcc	r3, #1
   15db0:	cmp	r0, r2
   15db4:	mov	r2, #0
   15db8:	movwcc	r2, #1
   15dbc:	cmp	r0, r1
   15dc0:	mov	r1, #0
   15dc4:	movwcc	r1, #1
   15dc8:	cmp	r0, r4
   15dcc:	movwcc	r7, #1
   15dd0:	orr	r0, r7, r1
   15dd4:	orr	r0, r0, r2
   15dd8:	orr	r0, r0, r3
   15ddc:	orr	r0, r0, lr
   15de0:	mov	lr, r8
   15de4:	mov	r4, ip
   15de8:	b	15f1c <__assert_fail@plt+0x4ba8>
   15dec:	mvn	r0, #0
   15df0:	str	lr, [sp, #8]
   15df4:	mul	lr, r4, r8
   15df8:	udiv	r0, r0, r8
   15dfc:	cmp	r0, r4
   15e00:	mvncc	lr, #0
   15e04:	mul	r9, lr, r8
   15e08:	cmp	r0, lr
   15e0c:	mvncc	r9, #0
   15e10:	mul	r7, r9, r8
   15e14:	cmp	r0, r9
   15e18:	mvncc	r7, #0
   15e1c:	mul	r3, r7, r8
   15e20:	cmp	r0, r7
   15e24:	mvncc	r3, #0
   15e28:	mul	r1, r3, r8
   15e2c:	cmp	r0, r3
   15e30:	mvncc	r1, #0
   15e34:	mul	r2, r1, r8
   15e38:	cmp	r0, r1
   15e3c:	mvncc	r2, #0
   15e40:	mul	ip, r2, r8
   15e44:	cmp	r0, r2
   15e48:	mvncc	ip, #0
   15e4c:	mul	r8, ip, r8
   15e50:	cmp	r0, ip
   15e54:	mov	ip, #0
   15e58:	mvncc	r8, #0
   15e5c:	str	r8, [sp, #4]
   15e60:	mov	r8, #0
   15e64:	movwcc	r8, #1
   15e68:	cmp	r0, r2
   15e6c:	mov	r2, #0
   15e70:	movwcc	r2, #1
   15e74:	cmp	r0, r1
   15e78:	mov	r1, #0
   15e7c:	movwcc	r1, #1
   15e80:	cmp	r0, r3
   15e84:	mov	r3, #0
   15e88:	movwcc	r3, #1
   15e8c:	cmp	r0, r7
   15e90:	mov	r7, #0
   15e94:	movwcc	r7, #1
   15e98:	cmp	r0, r9
   15e9c:	mov	r9, #0
   15ea0:	movwcc	r9, #1
   15ea4:	cmp	r0, lr
   15ea8:	mov	lr, #0
   15eac:	movwcc	lr, #1
   15eb0:	cmp	r0, r4
   15eb4:	ldr	r4, [sp, #4]
   15eb8:	movwcc	ip, #1
   15ebc:	orr	r0, ip, lr
   15ec0:	ldr	lr, [sp, #8]
   15ec4:	orr	r0, r0, r9
   15ec8:	orr	r0, r0, r7
   15ecc:	orr	r0, r0, r3
   15ed0:	orr	r0, r0, r1
   15ed4:	orr	r0, r0, r2
   15ed8:	orr	r0, r0, r8
   15edc:	and	r0, r0, #1
   15ee0:	b	15f1c <__assert_fail@plt+0x4ba8>
   15ee4:	movw	r0, #65535	; 0xffff
   15ee8:	movt	r0, #63	; 0x3f
   15eec:	add	r1, r0, #4194304	; 0x400000
   15ef0:	mov	r0, #0
   15ef4:	cmp	r4, r1
   15ef8:	lsl	r4, r4, #9
   15efc:	movwhi	r0, #1
   15f00:	mvnhi	r4, #0
   15f04:	b	15f1c <__assert_fail@plt+0x4ba8>
   15f08:	lsl	r1, r4, #1
   15f0c:	cmp	r4, #0
   15f10:	lsr	r0, r4, #31
   15f14:	mvnlt	r1, #0
   15f18:	mov	r4, r1
   15f1c:	add	r1, r5, lr
   15f20:	orr	sl, r0, sl
   15f24:	str	r1, [r6]
   15f28:	ldrb	r1, [r5, lr]
   15f2c:	cmp	r1, #0
   15f30:	orrne	sl, sl, #2
   15f34:	ldr	r0, [sp, #12]
   15f38:	str	r4, [r0]
   15f3c:	mov	r0, sl
   15f40:	sub	sp, fp, #28
   15f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f48:	movw	r0, #29953	; 0x7501
   15f4c:	movw	r1, #29991	; 0x7527
   15f50:	movw	r3, #30007	; 0x7537
   15f54:	mov	r2, #85	; 0x55
   15f58:	movt	r0, #1
   15f5c:	movt	r1, #1
   15f60:	movt	r3, #1
   15f64:	bl	11374 <__assert_fail@plt>
   15f68:	clz	r2, r1
   15f6c:	clz	r3, r0
   15f70:	lsr	r2, r2, #5
   15f74:	lsr	r3, r3, #5
   15f78:	orrs	r2, r3, r2
   15f7c:	movwne	r1, #1
   15f80:	movwne	r0, #1
   15f84:	cmp	r1, #0
   15f88:	beq	15fb8 <__assert_fail@plt+0x4c44>
   15f8c:	mvn	r2, #-2147483648	; 0x80000000
   15f90:	udiv	r2, r2, r1
   15f94:	cmp	r2, r0
   15f98:	bcs	15fb8 <__assert_fail@plt+0x4c44>
   15f9c:	push	{fp, lr}
   15fa0:	mov	fp, sp
   15fa4:	bl	11278 <__errno_location@plt>
   15fa8:	mov	r1, #12
   15fac:	str	r1, [r0]
   15fb0:	mov	r0, #0
   15fb4:	pop	{fp, pc}
   15fb8:	b	110a4 <calloc@plt>
   15fbc:	cmp	r0, #0
   15fc0:	movweq	r0, #1
   15fc4:	cmn	r0, #1
   15fc8:	ble	15fd0 <__assert_fail@plt+0x4c5c>
   15fcc:	b	11200 <malloc@plt>
   15fd0:	push	{fp, lr}
   15fd4:	mov	fp, sp
   15fd8:	bl	11278 <__errno_location@plt>
   15fdc:	mov	r1, #12
   15fe0:	str	r1, [r0]
   15fe4:	mov	r0, #0
   15fe8:	pop	{fp, pc}
   15fec:	push	{fp, lr}
   15ff0:	mov	fp, sp
   15ff4:	cmp	r0, #0
   15ff8:	beq	16014 <__assert_fail@plt+0x4ca0>
   15ffc:	cmp	r1, #0
   16000:	beq	16020 <__assert_fail@plt+0x4cac>
   16004:	cmn	r1, #1
   16008:	ble	1602c <__assert_fail@plt+0x4cb8>
   1600c:	pop	{fp, lr}
   16010:	b	11164 <realloc@plt>
   16014:	mov	r0, r1
   16018:	pop	{fp, lr}
   1601c:	b	15fbc <__assert_fail@plt+0x4c48>
   16020:	bl	12918 <__assert_fail@plt+0x15a4>
   16024:	mov	r0, #0
   16028:	pop	{fp, pc}
   1602c:	bl	11278 <__errno_location@plt>
   16030:	mov	r1, #12
   16034:	str	r1, [r0]
   16038:	mov	r0, #0
   1603c:	pop	{fp, pc}
   16040:	push	{r4, r5, r6, sl, fp, lr}
   16044:	add	fp, sp, #16
   16048:	mov	r4, r0
   1604c:	bl	111d0 <__fpending@plt>
   16050:	ldr	r6, [r4]
   16054:	mov	r5, r0
   16058:	mov	r0, r4
   1605c:	bl	160c4 <__assert_fail@plt+0x4d50>
   16060:	tst	r6, #32
   16064:	bne	1609c <__assert_fail@plt+0x4d28>
   16068:	cmp	r0, #0
   1606c:	mov	r4, r0
   16070:	mvnne	r4, #0
   16074:	cmp	r5, #0
   16078:	bne	160a8 <__assert_fail@plt+0x4d34>
   1607c:	cmp	r0, #0
   16080:	beq	160a8 <__assert_fail@plt+0x4d34>
   16084:	bl	11278 <__errno_location@plt>
   16088:	ldr	r0, [r0]
   1608c:	subs	r4, r0, #9
   16090:	mvnne	r4, #0
   16094:	mov	r0, r4
   16098:	pop	{r4, r5, r6, sl, fp, pc}
   1609c:	mvn	r4, #0
   160a0:	cmp	r0, #0
   160a4:	beq	160b0 <__assert_fail@plt+0x4d3c>
   160a8:	mov	r0, r4
   160ac:	pop	{r4, r5, r6, sl, fp, pc}
   160b0:	bl	11278 <__errno_location@plt>
   160b4:	mov	r1, #0
   160b8:	str	r1, [r0]
   160bc:	mov	r0, r4
   160c0:	pop	{r4, r5, r6, sl, fp, pc}
   160c4:	push	{r4, r5, r6, sl, fp, lr}
   160c8:	add	fp, sp, #16
   160cc:	sub	sp, sp, #8
   160d0:	mov	r4, r0
   160d4:	bl	112c0 <fileno@plt>
   160d8:	cmn	r0, #1
   160dc:	ble	16150 <__assert_fail@plt+0x4ddc>
   160e0:	mov	r0, r4
   160e4:	bl	11218 <__freading@plt>
   160e8:	cmp	r0, #0
   160ec:	beq	16118 <__assert_fail@plt+0x4da4>
   160f0:	mov	r0, r4
   160f4:	bl	112c0 <fileno@plt>
   160f8:	mov	r1, #1
   160fc:	mov	r2, #0
   16100:	mov	r3, #0
   16104:	str	r1, [sp]
   16108:	bl	111ac <lseek64@plt>
   1610c:	and	r0, r0, r1
   16110:	cmn	r0, #1
   16114:	beq	16150 <__assert_fail@plt+0x4ddc>
   16118:	mov	r0, r4
   1611c:	bl	16160 <__assert_fail@plt+0x4dec>
   16120:	cmp	r0, #0
   16124:	beq	16150 <__assert_fail@plt+0x4ddc>
   16128:	bl	11278 <__errno_location@plt>
   1612c:	ldr	r6, [r0]
   16130:	mov	r5, r0
   16134:	mov	r0, r4
   16138:	bl	112d8 <fclose@plt>
   1613c:	cmp	r6, #0
   16140:	strne	r6, [r5]
   16144:	mvnne	r0, #0
   16148:	sub	sp, fp, #16
   1614c:	pop	{r4, r5, r6, sl, fp, pc}
   16150:	mov	r0, r4
   16154:	sub	sp, fp, #16
   16158:	pop	{r4, r5, r6, sl, fp, lr}
   1615c:	b	112d8 <fclose@plt>
   16160:	push	{r4, sl, fp, lr}
   16164:	add	fp, sp, #8
   16168:	sub	sp, sp, #8
   1616c:	mov	r4, r0
   16170:	cmp	r0, #0
   16174:	beq	16190 <__assert_fail@plt+0x4e1c>
   16178:	mov	r0, r4
   1617c:	bl	11218 <__freading@plt>
   16180:	cmp	r0, #0
   16184:	ldrbne	r0, [r4, #1]
   16188:	tstne	r0, #1
   1618c:	bne	161a0 <__assert_fail@plt+0x4e2c>
   16190:	mov	r0, r4
   16194:	sub	sp, fp, #8
   16198:	pop	{r4, sl, fp, lr}
   1619c:	b	11104 <fflush@plt>
   161a0:	mov	r0, #1
   161a4:	mov	r2, #0
   161a8:	mov	r3, #0
   161ac:	str	r0, [sp]
   161b0:	mov	r0, r4
   161b4:	bl	161bc <__assert_fail@plt+0x4e48>
   161b8:	b	16190 <__assert_fail@plt+0x4e1c>
   161bc:	push	{r4, r5, r6, r7, fp, lr}
   161c0:	add	fp, sp, #16
   161c4:	sub	sp, sp, #8
   161c8:	mov	r4, r0
   161cc:	ldr	r0, [r0, #4]
   161d0:	mov	r5, r3
   161d4:	mov	r6, r2
   161d8:	ldr	r1, [r4, #8]
   161dc:	cmp	r1, r0
   161e0:	bne	161fc <__assert_fail@plt+0x4e88>
   161e4:	ldrd	r0, [r4, #16]
   161e8:	cmp	r1, r0
   161ec:	bne	161fc <__assert_fail@plt+0x4e88>
   161f0:	ldr	r0, [r4, #36]	; 0x24
   161f4:	cmp	r0, #0
   161f8:	beq	16214 <__assert_fail@plt+0x4ea0>
   161fc:	mov	r0, r4
   16200:	mov	r2, r6
   16204:	mov	r3, r5
   16208:	sub	sp, fp, #16
   1620c:	pop	{r4, r5, r6, r7, fp, lr}
   16210:	b	112e4 <fseeko64@plt>
   16214:	ldr	r7, [fp, #8]
   16218:	mov	r0, r4
   1621c:	bl	112c0 <fileno@plt>
   16220:	mov	r2, r6
   16224:	mov	r3, r5
   16228:	str	r7, [sp]
   1622c:	bl	111ac <lseek64@plt>
   16230:	and	r2, r0, r1
   16234:	cmn	r2, #1
   16238:	mvneq	r0, #0
   1623c:	subeq	sp, fp, #16
   16240:	popeq	{r4, r5, r6, r7, fp, pc}
   16244:	strd	r0, [r4, #80]	; 0x50
   16248:	ldr	r0, [r4]
   1624c:	bic	r0, r0, #16
   16250:	str	r0, [r4]
   16254:	mov	r0, #0
   16258:	sub	sp, fp, #16
   1625c:	pop	{r4, r5, r6, r7, fp, pc}
   16260:	push	{fp, lr}
   16264:	mov	fp, sp
   16268:	mov	r0, #14
   1626c:	bl	11320 <nl_langinfo@plt>
   16270:	movw	r1, #26895	; 0x690f
   16274:	cmp	r0, #0
   16278:	movt	r1, #1
   1627c:	movne	r1, r0
   16280:	movw	r0, #30088	; 0x7588
   16284:	ldrb	r2, [r1]
   16288:	movt	r0, #1
   1628c:	cmp	r2, #0
   16290:	movne	r0, r1
   16294:	pop	{fp, pc}
   16298:	push	{r4, r5, r6, r7, fp, lr}
   1629c:	add	fp, sp, #16
   162a0:	sub	sp, sp, #8
   162a4:	add	r5, sp, #4
   162a8:	cmp	r0, #0
   162ac:	mov	r7, r2
   162b0:	mov	r4, r1
   162b4:	movne	r5, r0
   162b8:	mov	r0, r5
   162bc:	bl	111dc <mbrtowc@plt>
   162c0:	mov	r6, r0
   162c4:	cmp	r7, #0
   162c8:	beq	162ec <__assert_fail@plt+0x4f78>
   162cc:	cmn	r6, #2
   162d0:	bcc	162ec <__assert_fail@plt+0x4f78>
   162d4:	mov	r0, #0
   162d8:	bl	16558 <__assert_fail@plt+0x51e4>
   162dc:	cmp	r0, #0
   162e0:	ldrbeq	r0, [r4]
   162e4:	moveq	r6, #1
   162e8:	streq	r0, [r5]
   162ec:	mov	r0, r6
   162f0:	sub	sp, fp, #16
   162f4:	pop	{r4, r5, r6, r7, fp, pc}
   162f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162fc:	add	fp, sp, #28
   16300:	sub	sp, sp, #12
   16304:	mov	sl, r2
   16308:	mov	r6, r1
   1630c:	cmp	r0, #0
   16310:	beq	163b4 <__assert_fail@plt+0x5040>
   16314:	mov	r7, r0
   16318:	mov	r8, #10
   1631c:	mov	r0, #0
   16320:	mov	r1, #40	; 0x28
   16324:	str	r8, [sp, #8]
   16328:	bl	15fec <__assert_fail@plt+0x4c78>
   1632c:	mvn	r9, #0
   16330:	cmp	r0, #0
   16334:	beq	16450 <__assert_fail@plt+0x50dc>
   16338:	str	sl, [sp, #4]
   1633c:	mov	r5, r0
   16340:	add	sl, sp, #8
   16344:	b	16350 <__assert_fail@plt+0x4fdc>
   16348:	ldr	r8, [sp, #8]
   1634c:	mov	r5, r0
   16350:	mov	r0, r7
   16354:	mov	r1, r6
   16358:	mov	r2, r5
   1635c:	mov	r3, sl
   16360:	bl	1129c <getgrouplist@plt>
   16364:	mov	r4, r0
   16368:	ldr	r0, [sp, #8]
   1636c:	cmn	r4, #1
   16370:	bgt	16380 <__assert_fail@plt+0x500c>
   16374:	cmp	r8, r0
   16378:	lsleq	r0, r8, #1
   1637c:	streq	r0, [sp, #8]
   16380:	cmp	r0, #536870912	; 0x20000000
   16384:	bcs	1643c <__assert_fail@plt+0x50c8>
   16388:	lsl	r1, r0, #2
   1638c:	mov	r0, r5
   16390:	bl	15fec <__assert_fail@plt+0x4c78>
   16394:	cmp	r0, #0
   16398:	beq	16448 <__assert_fail@plt+0x50d4>
   1639c:	cmn	r4, #1
   163a0:	ble	16348 <__assert_fail@plt+0x4fd4>
   163a4:	ldr	r1, [sp, #4]
   163a8:	str	r0, [r1]
   163ac:	ldr	r9, [sp, #8]
   163b0:	b	16450 <__assert_fail@plt+0x50dc>
   163b4:	mov	r0, #0
   163b8:	mov	r1, #0
   163bc:	bl	1132c <getgroups@plt>
   163c0:	cmn	r0, #1
   163c4:	str	r0, [sp, #8]
   163c8:	ble	163fc <__assert_fail@plt+0x5088>
   163cc:	mov	r4, r0
   163d0:	cmn	r6, #1
   163d4:	bne	1645c <__assert_fail@plt+0x50e8>
   163d8:	cmp	r4, #0
   163dc:	beq	1645c <__assert_fail@plt+0x50e8>
   163e0:	cmp	r4, #536870912	; 0x20000000
   163e4:	bcc	1646c <__assert_fail@plt+0x50f8>
   163e8:	bl	11278 <__errno_location@plt>
   163ec:	mov	r1, #12
   163f0:	mvn	r9, #0
   163f4:	str	r1, [r0]
   163f8:	b	16450 <__assert_fail@plt+0x50dc>
   163fc:	bl	11278 <__errno_location@plt>
   16400:	ldr	r0, [r0]
   16404:	mvn	r9, #0
   16408:	cmp	r0, #38	; 0x26
   1640c:	bne	16450 <__assert_fail@plt+0x50dc>
   16410:	mov	r0, #0
   16414:	mov	r1, #4
   16418:	bl	15fec <__assert_fail@plt+0x4c78>
   1641c:	cmp	r0, #0
   16420:	beq	16450 <__assert_fail@plt+0x50dc>
   16424:	add	r9, r6, #1
   16428:	cmn	r6, #1
   1642c:	str	r0, [sl]
   16430:	str	r6, [r0]
   16434:	movwne	r9, #1
   16438:	b	16450 <__assert_fail@plt+0x50dc>
   1643c:	bl	11278 <__errno_location@plt>
   16440:	mov	r1, #12
   16444:	str	r1, [r0]
   16448:	mov	r0, r5
   1644c:	bl	12918 <__assert_fail@plt+0x15a4>
   16450:	mov	r0, r9
   16454:	sub	sp, fp, #28
   16458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1645c:	add	r4, r4, #1
   16460:	str	r4, [sp, #8]
   16464:	cmp	r4, #536870912	; 0x20000000
   16468:	bcs	163e8 <__assert_fail@plt+0x5074>
   1646c:	lsl	r1, r4, #2
   16470:	mov	r0, #0
   16474:	bl	15fec <__assert_fail@plt+0x4c78>
   16478:	mvn	r9, #0
   1647c:	cmp	r0, #0
   16480:	beq	16450 <__assert_fail@plt+0x50dc>
   16484:	add	r1, r6, #1
   16488:	cmn	r6, #1
   1648c:	mov	r7, r0
   16490:	movwne	r1, #1
   16494:	sub	r0, r4, r1
   16498:	add	r1, r7, r1, lsl #2
   1649c:	bl	1132c <getgroups@plt>
   164a0:	cmn	r0, #1
   164a4:	ble	16514 <__assert_fail@plt+0x51a0>
   164a8:	cmn	r6, #1
   164ac:	addne	r0, r0, #1
   164b0:	strne	r6, [r7]
   164b4:	str	r7, [sl]
   164b8:	cmp	r0, #2
   164bc:	blt	1650c <__assert_fail@plt+0x5198>
   164c0:	mov	r2, r7
   164c4:	add	r1, r7, r0, lsl #2
   164c8:	ldr	r6, [r2], #4
   164cc:	cmp	r1, r2
   164d0:	bls	1650c <__assert_fail@plt+0x5198>
   164d4:	mov	r3, r6
   164d8:	mov	r9, r0
   164dc:	ldr	r0, [r2]
   164e0:	cmp	r0, r6
   164e4:	cmpne	r0, r3
   164e8:	bne	164f4 <__assert_fail@plt+0x5180>
   164ec:	sub	r9, r9, #1
   164f0:	b	164fc <__assert_fail@plt+0x5188>
   164f4:	str	r0, [r7, #4]!
   164f8:	mov	r3, r0
   164fc:	add	r2, r2, #4
   16500:	cmp	r2, r1
   16504:	bcc	164dc <__assert_fail@plt+0x5168>
   16508:	b	16450 <__assert_fail@plt+0x50dc>
   1650c:	mov	r9, r0
   16510:	b	16450 <__assert_fail@plt+0x50dc>
   16514:	mov	r0, r7
   16518:	b	1644c <__assert_fail@plt+0x50d8>
   1651c:	cmp	r2, #0
   16520:	beq	16550 <__assert_fail@plt+0x51dc>
   16524:	mvn	r3, #0
   16528:	udiv	r3, r3, r2
   1652c:	cmp	r3, r1
   16530:	bcs	16550 <__assert_fail@plt+0x51dc>
   16534:	push	{fp, lr}
   16538:	mov	fp, sp
   1653c:	bl	11278 <__errno_location@plt>
   16540:	mov	r1, #12
   16544:	str	r1, [r0]
   16548:	mov	r0, #0
   1654c:	pop	{fp, pc}
   16550:	mul	r1, r2, r1
   16554:	b	15fec <__assert_fail@plt+0x4c78>
   16558:	push	{r4, sl, fp, lr}
   1655c:	add	fp, sp, #8
   16560:	sub	sp, sp, #264	; 0x108
   16564:	add	r1, sp, #7
   16568:	movw	r2, #257	; 0x101
   1656c:	bl	165bc <__assert_fail@plt+0x5248>
   16570:	mov	r4, #0
   16574:	cmp	r0, #0
   16578:	bne	165b0 <__assert_fail@plt+0x523c>
   1657c:	movw	r1, #30094	; 0x758e
   16580:	add	r0, sp, #7
   16584:	movt	r1, #1
   16588:	bl	110ec <strcmp@plt>
   1658c:	cmp	r0, #0
   16590:	beq	165b0 <__assert_fail@plt+0x523c>
   16594:	movw	r1, #30096	; 0x7590
   16598:	add	r0, sp, #7
   1659c:	movt	r1, #1
   165a0:	bl	110ec <strcmp@plt>
   165a4:	mov	r4, r0
   165a8:	cmp	r0, #0
   165ac:	movwne	r4, #1
   165b0:	mov	r0, r4
   165b4:	sub	sp, fp, #8
   165b8:	pop	{r4, sl, fp, pc}
   165bc:	push	{r4, r5, r6, r7, fp, lr}
   165c0:	add	fp, sp, #16
   165c4:	mov	r4, r1
   165c8:	mov	r1, #0
   165cc:	mov	r6, r2
   165d0:	bl	112fc <setlocale@plt>
   165d4:	cmp	r0, #0
   165d8:	beq	16608 <__assert_fail@plt+0x5294>
   165dc:	mov	r7, r0
   165e0:	bl	11260 <strlen@plt>
   165e4:	cmp	r0, r6
   165e8:	bcs	16628 <__assert_fail@plt+0x52b4>
   165ec:	add	r2, r0, #1
   165f0:	mov	r0, r4
   165f4:	mov	r1, r7
   165f8:	bl	11134 <memcpy@plt>
   165fc:	mov	r5, #0
   16600:	mov	r0, r5
   16604:	pop	{r4, r5, r6, r7, fp, pc}
   16608:	cmp	r6, #0
   1660c:	mov	r5, #22
   16610:	movne	r0, #0
   16614:	strbne	r0, [r4]
   16618:	movne	r0, r5
   1661c:	popne	{r4, r5, r6, r7, fp, pc}
   16620:	mov	r0, r5
   16624:	pop	{r4, r5, r6, r7, fp, pc}
   16628:	mov	r5, #34	; 0x22
   1662c:	cmp	r6, #0
   16630:	beq	16650 <__assert_fail@plt+0x52dc>
   16634:	sub	r6, r6, #1
   16638:	mov	r0, r4
   1663c:	mov	r1, r7
   16640:	mov	r2, r6
   16644:	bl	11134 <memcpy@plt>
   16648:	mov	r0, #0
   1664c:	strb	r0, [r4, r6]
   16650:	mov	r0, r5
   16654:	pop	{r4, r5, r6, r7, fp, pc}
   16658:	mov	r1, #0
   1665c:	b	112fc <setlocale@plt>
   16660:	cmp	r3, #0
   16664:	cmpeq	r2, #0
   16668:	bne	16680 <__assert_fail@plt+0x530c>
   1666c:	cmp	r1, #0
   16670:	cmpeq	r0, #0
   16674:	mvnne	r1, #0
   16678:	mvnne	r0, #0
   1667c:	b	1669c <__assert_fail@plt+0x5328>
   16680:	sub	sp, sp, #8
   16684:	push	{sp, lr}
   16688:	bl	166ac <__assert_fail@plt+0x5338>
   1668c:	ldr	lr, [sp, #4]
   16690:	add	sp, sp, #8
   16694:	pop	{r2, r3}
   16698:	bx	lr
   1669c:	push	{r1, lr}
   166a0:	mov	r0, #8
   166a4:	bl	110c8 <raise@plt>
   166a8:	pop	{r1, pc}
   166ac:	cmp	r1, r3
   166b0:	cmpeq	r0, r2
   166b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166b8:	mov	r4, r0
   166bc:	movcc	r0, #0
   166c0:	mov	r5, r1
   166c4:	ldr	lr, [sp, #36]	; 0x24
   166c8:	movcc	r1, r0
   166cc:	bcc	167c8 <__assert_fail@plt+0x5454>
   166d0:	cmp	r3, #0
   166d4:	clzeq	ip, r2
   166d8:	clzne	ip, r3
   166dc:	addeq	ip, ip, #32
   166e0:	cmp	r5, #0
   166e4:	clzeq	r1, r4
   166e8:	addeq	r1, r1, #32
   166ec:	clzne	r1, r5
   166f0:	sub	ip, ip, r1
   166f4:	sub	sl, ip, #32
   166f8:	lsl	r9, r3, ip
   166fc:	rsb	fp, ip, #32
   16700:	orr	r9, r9, r2, lsl sl
   16704:	orr	r9, r9, r2, lsr fp
   16708:	lsl	r8, r2, ip
   1670c:	cmp	r5, r9
   16710:	cmpeq	r4, r8
   16714:	movcc	r0, #0
   16718:	movcc	r1, r0
   1671c:	bcc	16738 <__assert_fail@plt+0x53c4>
   16720:	mov	r0, #1
   16724:	subs	r4, r4, r8
   16728:	lsl	r1, r0, sl
   1672c:	orr	r1, r1, r0, lsr fp
   16730:	lsl	r0, r0, ip
   16734:	sbc	r5, r5, r9
   16738:	cmp	ip, #0
   1673c:	beq	167c8 <__assert_fail@plt+0x5454>
   16740:	lsr	r6, r8, #1
   16744:	orr	r6, r6, r9, lsl #31
   16748:	lsr	r7, r9, #1
   1674c:	mov	r2, ip
   16750:	b	16774 <__assert_fail@plt+0x5400>
   16754:	subs	r3, r4, r6
   16758:	sbc	r8, r5, r7
   1675c:	adds	r3, r3, r3
   16760:	adc	r8, r8, r8
   16764:	adds	r4, r3, #1
   16768:	adc	r5, r8, #0
   1676c:	subs	r2, r2, #1
   16770:	beq	16790 <__assert_fail@plt+0x541c>
   16774:	cmp	r5, r7
   16778:	cmpeq	r4, r6
   1677c:	bcs	16754 <__assert_fail@plt+0x53e0>
   16780:	adds	r4, r4, r4
   16784:	adc	r5, r5, r5
   16788:	subs	r2, r2, #1
   1678c:	bne	16774 <__assert_fail@plt+0x5400>
   16790:	lsr	r3, r4, ip
   16794:	orr	r3, r3, r5, lsl fp
   16798:	lsr	r2, r5, ip
   1679c:	orr	r3, r3, r5, lsr sl
   167a0:	adds	r0, r0, r4
   167a4:	mov	r4, r3
   167a8:	lsl	r3, r2, ip
   167ac:	orr	r3, r3, r4, lsl sl
   167b0:	lsl	ip, r4, ip
   167b4:	orr	r3, r3, r4, lsr fp
   167b8:	adc	r1, r1, r5
   167bc:	subs	r0, r0, ip
   167c0:	mov	r5, r2
   167c4:	sbc	r1, r1, r3
   167c8:	cmp	lr, #0
   167cc:	strdne	r4, [lr]
   167d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   167d8:	mov	r7, r0
   167dc:	ldr	r6, [pc, #72]	; 1682c <__assert_fail@plt+0x54b8>
   167e0:	ldr	r5, [pc, #72]	; 16830 <__assert_fail@plt+0x54bc>
   167e4:	add	r6, pc, r6
   167e8:	add	r5, pc, r5
   167ec:	sub	r6, r6, r5
   167f0:	mov	r8, r1
   167f4:	mov	r9, r2
   167f8:	bl	11084 <calloc@plt-0x20>
   167fc:	asrs	r6, r6, #2
   16800:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16804:	mov	r4, #0
   16808:	add	r4, r4, #1
   1680c:	ldr	r3, [r5], #4
   16810:	mov	r2, r9
   16814:	mov	r1, r8
   16818:	mov	r0, r7
   1681c:	blx	r3
   16820:	cmp	r6, r4
   16824:	bne	16808 <__assert_fail@plt+0x5494>
   16828:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1682c:	andeq	r1, r1, r8, lsl r7
   16830:	andeq	r1, r1, r0, lsl r7
   16834:	bx	lr
   16838:	ldr	r3, [pc, #12]	; 1684c <__assert_fail@plt+0x54d8>
   1683c:	mov	r1, #0
   16840:	add	r3, pc, r3
   16844:	ldr	r2, [r3]
   16848:	b	11284 <__cxa_atexit@plt>
   1684c:	andeq	r1, r1, r4, asr #17

Disassembly of section .fini:

00016850 <.fini>:
   16850:	push	{r3, lr}
   16854:	pop	{r3, pc}
