
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010c64 <.init>:
   10c64:	push	{r3, lr}
   10c68:	bl	11110 <__assert_fail@plt+0x228>
   10c6c:	pop	{r3, pc}

Disassembly of section .plt:

00010c70 <calloc@plt-0x14>:
   10c70:	push	{lr}		; (str lr, [sp, #-4]!)
   10c74:	ldr	lr, [pc, #4]	; 10c80 <calloc@plt-0x4>
   10c78:	add	lr, pc, lr
   10c7c:	ldr	pc, [lr, #8]!
   10c80:	andeq	r5, r1, r0, lsl #7

00010c84 <calloc@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #86016	; 0x15000
   10c8c:	ldr	pc, [ip, #896]!	; 0x380

00010c90 <fputs_unlocked@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #86016	; 0x15000
   10c98:	ldr	pc, [ip, #888]!	; 0x378

00010c9c <raise@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #86016	; 0x15000
   10ca4:	ldr	pc, [ip, #880]!	; 0x370

00010ca8 <strcmp@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #86016	; 0x15000
   10cb0:	ldr	pc, [ip, #872]!	; 0x368

00010cb4 <fflush@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #86016	; 0x15000
   10cbc:	ldr	pc, [ip, #864]!	; 0x360

00010cc0 <free@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #86016	; 0x15000
   10cc8:	ldr	pc, [ip, #856]!	; 0x358

00010ccc <_exit@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #86016	; 0x15000
   10cd4:	ldr	pc, [ip, #848]!	; 0x350

00010cd8 <memcpy@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #86016	; 0x15000
   10ce0:	ldr	pc, [ip, #840]!	; 0x348

00010ce4 <mbsinit@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #86016	; 0x15000
   10cec:	ldr	pc, [ip, #832]!	; 0x340

00010cf0 <__sched_cpucount@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #86016	; 0x15000
   10cf8:	ldr	pc, [ip, #824]!	; 0x338

00010cfc <memcmp@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #86016	; 0x15000
   10d04:	ldr	pc, [ip, #816]!	; 0x330

00010d08 <fputc_unlocked@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #86016	; 0x15000
   10d10:	ldr	pc, [ip, #808]!	; 0x328

00010d14 <dcgettext@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #86016	; 0x15000
   10d1c:	ldr	pc, [ip, #800]!	; 0x320

00010d20 <sysconf@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #86016	; 0x15000
   10d28:	ldr	pc, [ip, #792]!	; 0x318

00010d2c <realloc@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #86016	; 0x15000
   10d34:	ldr	pc, [ip, #784]!	; 0x310

00010d38 <textdomain@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #776]!	; 0x308

00010d44 <iswprint@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #768]!	; 0x300

00010d50 <lseek64@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #760]!	; 0x2f8

00010d5c <__ctype_get_mb_cur_max@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #752]!	; 0x2f0

00010d68 <__fpending@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #744]!	; 0x2e8

00010d74 <ferror_unlocked@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d80 <mbrtowc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #728]!	; 0x2d8

00010d8c <error@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #720]!	; 0x2d0

00010d98 <getenv@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #712]!	; 0x2c8

00010da4 <malloc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #704]!	; 0x2c0

00010db0 <__libc_start_main@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dbc <__freading@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #688]!	; 0x2b0

00010dc8 <__gmon_start__@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #680]!	; 0x2a8

00010dd4 <getopt_long@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #672]!	; 0x2a0

00010de0 <__ctype_b_loc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #664]!	; 0x298

00010dec <exit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #656]!	; 0x290

00010df8 <strtoul@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #648]!	; 0x288

00010e04 <strlen@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #640]!	; 0x280

00010e10 <strchr@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #632]!	; 0x278

00010e1c <__errno_location@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #624]!	; 0x270

00010e28 <__cxa_atexit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #616]!	; 0x268

00010e34 <memset@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #608]!	; 0x260

00010e40 <__printf_chk@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #600]!	; 0x258

00010e4c <fileno@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #592]!	; 0x250

00010e58 <strtoumax@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #584]!	; 0x248

00010e64 <__fprintf_chk@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #576]!	; 0x240

00010e70 <fclose@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #568]!	; 0x238

00010e7c <fseeko64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #560]!	; 0x230

00010e88 <setlocale@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #552]!	; 0x228

00010e94 <strrchr@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #544]!	; 0x220

00010ea0 <nl_langinfo@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #536]!	; 0x218

00010eac <sched_getaffinity@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #528]!	; 0x210

00010eb8 <bindtextdomain@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #520]!	; 0x208

00010ec4 <fputs@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #512]!	; 0x200

00010ed0 <strncmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #504]!	; 0x1f8

00010edc <abort@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ee8 <__assert_fail@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #488]!	; 0x1e8

Disassembly of section .text:

00010ef4 <.text>:
   10ef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ef8:	mov	r8, r0
   10efc:	sub	sp, sp, #28
   10f00:	ldr	r0, [r1]
   10f04:	mov	r6, r1
   10f08:	bl	11708 <__assert_fail@plt+0x820>
   10f0c:	ldr	r1, [pc, #384]	; 11094 <__assert_fail@plt+0x1ac>
   10f10:	mov	r0, #6
   10f14:	bl	10e88 <setlocale@plt>
   10f18:	ldr	r1, [pc, #376]	; 11098 <__assert_fail@plt+0x1b0>
   10f1c:	ldr	r0, [pc, #376]	; 1109c <__assert_fail@plt+0x1b4>
   10f20:	bl	10eb8 <bindtextdomain@plt>
   10f24:	ldr	r0, [pc, #368]	; 1109c <__assert_fail@plt+0x1b4>
   10f28:	bl	10d38 <textdomain@plt>
   10f2c:	ldr	r0, [pc, #364]	; 110a0 <__assert_fail@plt+0x1b8>
   10f30:	bl	14764 <__assert_fail@plt+0x387c>
   10f34:	ldr	r9, [pc, #344]	; 11094 <__assert_fail@plt+0x1ac>
   10f38:	ldr	sl, [pc, #356]	; 110a4 <__assert_fail@plt+0x1bc>
   10f3c:	ldr	fp, [pc, #356]	; 110a8 <__assert_fail@plt+0x1c0>
   10f40:	mov	r7, #2
   10f44:	mov	r5, #0
   10f48:	mov	r4, #0
   10f4c:	str	r4, [sp]
   10f50:	mov	r3, sl
   10f54:	ldr	r2, [pc, #312]	; 11094 <__assert_fail@plt+0x1ac>
   10f58:	mov	r1, r6
   10f5c:	mov	r0, r8
   10f60:	bl	10dd4 <getopt_long@plt>
   10f64:	cmn	r0, #1
   10f68:	beq	11020 <__assert_fail@plt+0x138>
   10f6c:	cmn	r0, #2
   10f70:	beq	10fe8 <__assert_fail@plt+0x100>
   10f74:	bgt	10f90 <__assert_fail@plt+0xa8>
   10f78:	cmn	r0, #3
   10f7c:	beq	10ff0 <__assert_fail@plt+0x108>
   10f80:	mov	r0, #1
   10f84:	b	10fec <__assert_fail@plt+0x104>
   10f88:	mov	r7, r4
   10f8c:	b	10f4c <__assert_fail@plt+0x64>
   10f90:	cmp	r0, #256	; 0x100
   10f94:	beq	10f88 <__assert_fail@plt+0xa0>
   10f98:	cmp	r0, fp
   10f9c:	bne	10f80 <__assert_fail@plt+0x98>
   10fa0:	ldr	r3, [pc, #260]	; 110ac <__assert_fail@plt+0x1c4>
   10fa4:	mov	r2, #5
   10fa8:	ldr	r1, [pc, #256]	; 110b0 <__assert_fail@plt+0x1c8>
   10fac:	mov	r0, #0
   10fb0:	ldr	r5, [r3]
   10fb4:	bl	10d14 <dcgettext@plt>
   10fb8:	mvn	r2, #0
   10fbc:	mov	r3, #0
   10fc0:	str	r4, [sp, #16]
   10fc4:	strd	r2, [sp]
   10fc8:	str	r9, [sp, #8]
   10fcc:	mov	r2, #0
   10fd0:	mov	r3, #0
   10fd4:	str	r0, [sp, #12]
   10fd8:	mov	r0, r5
   10fdc:	bl	13850 <__assert_fail@plt+0x2968>
   10fe0:	mov	r5, r0
   10fe4:	b	10f48 <__assert_fail@plt+0x60>
   10fe8:	mov	r0, #0
   10fec:	bl	111fc <__assert_fail@plt+0x314>
   10ff0:	ldr	r3, [pc, #188]	; 110b4 <__assert_fail@plt+0x1cc>
   10ff4:	ldr	r0, [pc, #188]	; 110b8 <__assert_fail@plt+0x1d0>
   10ff8:	str	r3, [sp]
   10ffc:	ldr	r3, [pc, #184]	; 110bc <__assert_fail@plt+0x1d4>
   11000:	str	r4, [sp, #4]
   11004:	ldr	r2, [pc, #180]	; 110c0 <__assert_fail@plt+0x1d8>
   11008:	ldr	r0, [r0]
   1100c:	ldr	r3, [r3]
   11010:	ldr	r1, [pc, #172]	; 110c4 <__assert_fail@plt+0x1dc>
   11014:	bl	13188 <__assert_fail@plt+0x22a0>
   11018:	mov	r0, #0
   1101c:	bl	10dec <exit@plt>
   11020:	ldr	r4, [pc, #160]	; 110c8 <__assert_fail@plt+0x1e0>
   11024:	ldr	r3, [r4]
   11028:	cmp	r8, r3
   1102c:	beq	11068 <__assert_fail@plt+0x180>
   11030:	mov	r2, #5
   11034:	ldr	r1, [pc, #144]	; 110cc <__assert_fail@plt+0x1e4>
   11038:	mov	r0, #0
   1103c:	bl	10d14 <dcgettext@plt>
   11040:	ldr	r3, [r4]
   11044:	mov	r5, r0
   11048:	ldr	r0, [r6, r3, lsl #2]
   1104c:	bl	12d38 <__assert_fail@plt+0x1e50>
   11050:	mov	r1, #0
   11054:	mov	r2, r5
   11058:	mov	r3, r0
   1105c:	mov	r0, r1
   11060:	bl	10d8c <error@plt>
   11064:	b	10f80 <__assert_fail@plt+0x98>
   11068:	mov	r0, r7
   1106c:	bl	11640 <__assert_fail@plt+0x758>
   11070:	ldr	r1, [pc, #88]	; 110d0 <__assert_fail@plt+0x1e8>
   11074:	cmp	r5, r0
   11078:	subcc	r2, r0, r5
   1107c:	movcs	r2, #1
   11080:	mov	r0, #1
   11084:	bl	10e40 <__printf_chk@plt>
   11088:	mov	r0, #0
   1108c:	add	sp, sp, #28
   11090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11094:	ldrdeq	r4, [r1], -r3
   11098:	muleq	r1, r2, sl
   1109c:	andeq	r4, r1, pc, ror #19
   110a0:	andeq	r1, r1, ip, asr r4
   110a4:	andeq	r4, r1, r0, asr #15
   110a8:	andeq	r0, r0, r1, lsl #2
   110ac:	andeq	r6, r2, r8, asr #2
   110b0:			; <UNDEFINED> instruction: 0x00014abc
   110b4:	andeq	r4, r1, sl, lsr #21
   110b8:	andeq	r6, r2, r4, asr #2
   110bc:	andeq	r6, r2, r8, ror #1
   110c0:	andeq	r4, r1, fp, ror #19
   110c4:	andeq	r4, r1, r0, lsl r8
   110c8:	andeq	r6, r2, r8, lsr r1
   110cc:	andeq	r4, r1, fp, asr #21
   110d0:	ldrdeq	r4, [r1], -ip
   110d4:	mov	fp, #0
   110d8:	mov	lr, #0
   110dc:	pop	{r1}		; (ldr r1, [sp], #4)
   110e0:	mov	r2, sp
   110e4:	push	{r2}		; (str r2, [sp, #-4]!)
   110e8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ec:	ldr	ip, [pc, #16]	; 11104 <__assert_fail@plt+0x21c>
   110f0:	push	{ip}		; (str ip, [sp, #-4]!)
   110f4:	ldr	r0, [pc, #12]	; 11108 <__assert_fail@plt+0x220>
   110f8:	ldr	r3, [pc, #12]	; 1110c <__assert_fail@plt+0x224>
   110fc:	bl	10db0 <__libc_start_main@plt>
   11100:	bl	10edc <abort@plt>
   11104:	andeq	r4, r1, r0, ror #14
   11108:	strdeq	r0, [r1], -r4
   1110c:	andeq	r4, r1, r0, lsl #14
   11110:	ldr	r3, [pc, #20]	; 1112c <__assert_fail@plt+0x244>
   11114:	ldr	r2, [pc, #20]	; 11130 <__assert_fail@plt+0x248>
   11118:	add	r3, pc, r3
   1111c:	ldr	r2, [r3, r2]
   11120:	cmp	r2, #0
   11124:	bxeq	lr
   11128:	b	10dc8 <__gmon_start__@plt>
   1112c:	andeq	r4, r1, r0, ror #29
   11130:	ldrdeq	r0, [r0], -ip
   11134:	ldr	r3, [pc, #28]	; 11158 <__assert_fail@plt+0x270>
   11138:	ldr	r0, [pc, #28]	; 1115c <__assert_fail@plt+0x274>
   1113c:	sub	r3, r3, r0
   11140:	cmp	r3, #6
   11144:	bxls	lr
   11148:	ldr	r3, [pc, #16]	; 11160 <__assert_fail@plt+0x278>
   1114c:	cmp	r3, #0
   11150:	bxeq	lr
   11154:	bx	r3
   11158:	andeq	r6, r2, r3, lsr r1
   1115c:	andeq	r6, r2, r0, lsr r1
   11160:	andeq	r0, r0, r0
   11164:	ldr	r1, [pc, #36]	; 11190 <__assert_fail@plt+0x2a8>
   11168:	ldr	r0, [pc, #36]	; 11194 <__assert_fail@plt+0x2ac>
   1116c:	sub	r1, r1, r0
   11170:	asr	r1, r1, #2
   11174:	add	r1, r1, r1, lsr #31
   11178:	asrs	r1, r1, #1
   1117c:	bxeq	lr
   11180:	ldr	r3, [pc, #16]	; 11198 <__assert_fail@plt+0x2b0>
   11184:	cmp	r3, #0
   11188:	bxeq	lr
   1118c:	bx	r3
   11190:	andeq	r6, r2, r0, lsr r1
   11194:	andeq	r6, r2, r0, lsr r1
   11198:	andeq	r0, r0, r0
   1119c:	push	{r4, lr}
   111a0:	ldr	r4, [pc, #24]	; 111c0 <__assert_fail@plt+0x2d8>
   111a4:	ldrb	r3, [r4]
   111a8:	cmp	r3, #0
   111ac:	popne	{r4, pc}
   111b0:	bl	11134 <__assert_fail@plt+0x24c>
   111b4:	mov	r3, #1
   111b8:	strb	r3, [r4]
   111bc:	pop	{r4, pc}
   111c0:	andeq	r6, r2, ip, asr #2
   111c4:	ldr	r0, [pc, #40]	; 111f4 <__assert_fail@plt+0x30c>
   111c8:	ldr	r3, [r0]
   111cc:	cmp	r3, #0
   111d0:	bne	111d8 <__assert_fail@plt+0x2f0>
   111d4:	b	11164 <__assert_fail@plt+0x27c>
   111d8:	ldr	r3, [pc, #24]	; 111f8 <__assert_fail@plt+0x310>
   111dc:	cmp	r3, #0
   111e0:	beq	111d4 <__assert_fail@plt+0x2ec>
   111e4:	push	{r4, lr}
   111e8:	blx	r3
   111ec:	pop	{r4, lr}
   111f0:	b	11164 <__assert_fail@plt+0x27c>
   111f4:	andeq	r5, r2, r4, lsl pc
   111f8:	andeq	r0, r0, r0
   111fc:	subs	r5, r0, #0
   11200:	push	{r7, lr}
   11204:	sub	sp, sp, #56	; 0x38
   11208:	ldr	r4, [pc, #476]	; 113ec <__assert_fail@plt+0x504>
   1120c:	beq	11244 <__assert_fail@plt+0x35c>
   11210:	ldr	r3, [pc, #472]	; 113f0 <__assert_fail@plt+0x508>
   11214:	mov	r2, #5
   11218:	ldr	r1, [pc, #468]	; 113f4 <__assert_fail@plt+0x50c>
   1121c:	mov	r0, #0
   11220:	ldr	r6, [r3]
   11224:	bl	10d14 <dcgettext@plt>
   11228:	ldr	r3, [r4]
   1122c:	mov	r1, #1
   11230:	mov	r2, r0
   11234:	mov	r0, r6
   11238:	bl	10e64 <__fprintf_chk@plt>
   1123c:	mov	r0, r5
   11240:	bl	10dec <exit@plt>
   11244:	mov	r2, #5
   11248:	ldr	r1, [pc, #424]	; 113f8 <__assert_fail@plt+0x510>
   1124c:	bl	10d14 <dcgettext@plt>
   11250:	ldr	r2, [r4]
   11254:	ldr	r4, [pc, #416]	; 113fc <__assert_fail@plt+0x514>
   11258:	ldr	r8, [pc, #416]	; 11400 <__assert_fail@plt+0x518>
   1125c:	mov	r6, r5
   11260:	mov	r1, r0
   11264:	mov	r0, #1
   11268:	bl	10e40 <__printf_chk@plt>
   1126c:	mov	r2, #5
   11270:	ldr	r1, [pc, #396]	; 11404 <__assert_fail@plt+0x51c>
   11274:	mov	r0, r5
   11278:	bl	10d14 <dcgettext@plt>
   1127c:	ldr	r1, [r4]
   11280:	bl	10c90 <fputs_unlocked@plt>
   11284:	mov	r2, #5
   11288:	ldr	r1, [pc, #376]	; 11408 <__assert_fail@plt+0x520>
   1128c:	mov	r0, r5
   11290:	bl	10d14 <dcgettext@plt>
   11294:	ldr	r1, [r4]
   11298:	bl	10c90 <fputs_unlocked@plt>
   1129c:	mov	r2, #5
   112a0:	ldr	r1, [pc, #356]	; 1140c <__assert_fail@plt+0x524>
   112a4:	mov	r0, r5
   112a8:	bl	10d14 <dcgettext@plt>
   112ac:	ldr	r1, [r4]
   112b0:	bl	10c90 <fputs_unlocked@plt>
   112b4:	mov	r2, #5
   112b8:	ldr	r1, [pc, #336]	; 11410 <__assert_fail@plt+0x528>
   112bc:	mov	r0, r5
   112c0:	bl	10d14 <dcgettext@plt>
   112c4:	ldr	r1, [r4]
   112c8:	bl	10c90 <fputs_unlocked@plt>
   112cc:	ldr	lr, [pc, #320]	; 11414 <__assert_fail@plt+0x52c>
   112d0:	mov	ip, sp
   112d4:	ldm	lr!, {r0, r1, r2, r3}
   112d8:	stmia	ip!, {r0, r1, r2, r3}
   112dc:	ldm	lr!, {r0, r1, r2, r3}
   112e0:	stmia	ip!, {r0, r1, r2, r3}
   112e4:	ldm	lr!, {r0, r1, r2, r3}
   112e8:	stmia	ip!, {r0, r1, r2, r3}
   112ec:	ldm	lr, {r0, r1}
   112f0:	stm	ip, {r0, r1}
   112f4:	ldr	r1, [sp, r6]
   112f8:	add	r7, sp, r6
   112fc:	cmp	r1, #0
   11300:	bne	113a4 <__assert_fail@plt+0x4bc>
   11304:	ldr	r6, [r7, #4]
   11308:	ldr	r7, [pc, #240]	; 11400 <__assert_fail@plt+0x518>
   1130c:	cmp	r6, #0
   11310:	mov	r2, #5
   11314:	ldr	r1, [pc, #252]	; 11418 <__assert_fail@plt+0x530>
   11318:	mov	r0, #0
   1131c:	moveq	r6, r7
   11320:	bl	10d14 <dcgettext@plt>
   11324:	ldr	r3, [pc, #240]	; 1141c <__assert_fail@plt+0x534>
   11328:	ldr	r2, [pc, #240]	; 11420 <__assert_fail@plt+0x538>
   1132c:	mov	r1, r0
   11330:	mov	r0, #1
   11334:	bl	10e40 <__printf_chk@plt>
   11338:	mov	r1, #0
   1133c:	mov	r0, #5
   11340:	bl	10e88 <setlocale@plt>
   11344:	cmp	r0, #0
   11348:	bne	113bc <__assert_fail@plt+0x4d4>
   1134c:	mov	r2, #5
   11350:	ldr	r1, [pc, #204]	; 11424 <__assert_fail@plt+0x53c>
   11354:	mov	r0, #0
   11358:	bl	10d14 <dcgettext@plt>
   1135c:	ldr	r3, [pc, #156]	; 11400 <__assert_fail@plt+0x518>
   11360:	ldr	r2, [pc, #180]	; 1141c <__assert_fail@plt+0x534>
   11364:	mov	r1, r0
   11368:	mov	r0, #1
   1136c:	bl	10e40 <__printf_chk@plt>
   11370:	mov	r2, #5
   11374:	ldr	r1, [pc, #172]	; 11428 <__assert_fail@plt+0x540>
   11378:	mov	r0, #0
   1137c:	bl	10d14 <dcgettext@plt>
   11380:	ldr	r2, [pc, #164]	; 1142c <__assert_fail@plt+0x544>
   11384:	cmp	r6, r7
   11388:	ldr	r3, [pc, #160]	; 11430 <__assert_fail@plt+0x548>
   1138c:	moveq	r3, r2
   11390:	mov	r2, r6
   11394:	mov	r1, r0
   11398:	mov	r0, #1
   1139c:	bl	10e40 <__printf_chk@plt>
   113a0:	b	1123c <__assert_fail@plt+0x354>
   113a4:	mov	r0, r8
   113a8:	bl	10ca8 <strcmp@plt>
   113ac:	add	r6, r6, #8
   113b0:	cmp	r0, #0
   113b4:	bne	112f4 <__assert_fail@plt+0x40c>
   113b8:	b	11304 <__assert_fail@plt+0x41c>
   113bc:	mov	r2, #3
   113c0:	ldr	r1, [pc, #108]	; 11434 <__assert_fail@plt+0x54c>
   113c4:	bl	10ed0 <strncmp@plt>
   113c8:	cmp	r0, #0
   113cc:	beq	1134c <__assert_fail@plt+0x464>
   113d0:	mov	r2, #5
   113d4:	ldr	r1, [pc, #92]	; 11438 <__assert_fail@plt+0x550>
   113d8:	mov	r0, #0
   113dc:	bl	10d14 <dcgettext@plt>
   113e0:	ldr	r1, [r4]
   113e4:	bl	10c90 <fputs_unlocked@plt>
   113e8:	b	1134c <__assert_fail@plt+0x464>
   113ec:	andeq	r6, r2, r8, asr r1
   113f0:	andeq	r6, r2, r0, asr #2
   113f4:	andeq	r4, r1, r6, lsl r8
   113f8:	andeq	r4, r1, sp, lsr r8
   113fc:	andeq	r6, r2, r4, asr #2
   11400:	andeq	r4, r1, r0, lsl r8
   11404:	andeq	r4, r1, r4, asr r8
   11408:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1140c:	andeq	r4, r1, r9, asr #18
   11410:	andeq	r4, r1, r6, ror r9
   11414:	andeq	r4, r1, r8, lsl #15
   11418:	andeq	r4, r1, ip, lsr #19
   1141c:	andeq	r4, r1, r3, asr #19
   11420:	andeq	r4, r1, fp, ror #19
   11424:	andeq	r4, r1, r4, asr #20
   11428:	andeq	r4, r1, pc, asr sl
   1142c:	strdeq	r4, [r1], -sp
   11430:	ldrdeq	r4, [r1], -r3
   11434:	strdeq	r4, [r1], -r9
   11438:	strdeq	r4, [r1], -sp
   1143c:	ldr	r3, [pc, #4]	; 11448 <__assert_fail@plt+0x560>
   11440:	str	r0, [r3]
   11444:	bx	lr
   11448:	andeq	r6, r2, r0, asr r1
   1144c:	ldr	r3, [pc, #4]	; 11458 <__assert_fail@plt+0x570>
   11450:	strb	r0, [r3, #4]
   11454:	bx	lr
   11458:	andeq	r6, r2, r0, asr r1
   1145c:	ldr	r3, [pc, #192]	; 11524 <__assert_fail@plt+0x63c>
   11460:	push	{r0, r1, r4, r5, r6, lr}
   11464:	ldr	r0, [r3]
   11468:	bl	13d40 <__assert_fail@plt+0x2e58>
   1146c:	cmp	r0, #0
   11470:	beq	11508 <__assert_fail@plt+0x620>
   11474:	ldr	r3, [pc, #172]	; 11528 <__assert_fail@plt+0x640>
   11478:	mov	r4, r3
   1147c:	ldrb	r2, [r3, #4]
   11480:	cmp	r2, #0
   11484:	beq	11498 <__assert_fail@plt+0x5b0>
   11488:	bl	10e1c <__errno_location@plt>
   1148c:	ldr	r3, [r0]
   11490:	cmp	r3, #32
   11494:	beq	11508 <__assert_fail@plt+0x620>
   11498:	mov	r2, #5
   1149c:	ldr	r1, [pc, #136]	; 1152c <__assert_fail@plt+0x644>
   114a0:	mov	r0, #0
   114a4:	bl	10d14 <dcgettext@plt>
   114a8:	ldr	r4, [r4]
   114ac:	cmp	r4, #0
   114b0:	mov	r5, r0
   114b4:	beq	114ec <__assert_fail@plt+0x604>
   114b8:	bl	10e1c <__errno_location@plt>
   114bc:	ldr	r6, [r0]
   114c0:	mov	r0, r4
   114c4:	bl	12be8 <__assert_fail@plt+0x1d00>
   114c8:	str	r5, [sp]
   114cc:	ldr	r2, [pc, #92]	; 11530 <__assert_fail@plt+0x648>
   114d0:	mov	r1, r6
   114d4:	mov	r3, r0
   114d8:	mov	r0, #0
   114dc:	bl	10d8c <error@plt>
   114e0:	ldr	r3, [pc, #76]	; 11534 <__assert_fail@plt+0x64c>
   114e4:	ldr	r0, [r3]
   114e8:	bl	10ccc <_exit@plt>
   114ec:	bl	10e1c <__errno_location@plt>
   114f0:	mov	r3, r5
   114f4:	ldr	r2, [pc, #60]	; 11538 <__assert_fail@plt+0x650>
   114f8:	ldr	r1, [r0]
   114fc:	mov	r0, r4
   11500:	bl	10d8c <error@plt>
   11504:	b	114e0 <__assert_fail@plt+0x5f8>
   11508:	ldr	r3, [pc, #44]	; 1153c <__assert_fail@plt+0x654>
   1150c:	ldr	r0, [r3]
   11510:	bl	13d40 <__assert_fail@plt+0x2e58>
   11514:	cmp	r0, #0
   11518:	bne	114e0 <__assert_fail@plt+0x5f8>
   1151c:	add	sp, sp, #8
   11520:	pop	{r4, r5, r6, pc}
   11524:	andeq	r6, r2, r4, asr #2
   11528:	andeq	r6, r2, r0, asr r1
   1152c:	andeq	r4, r1, r7, ror #22
   11530:	andeq	r4, r1, r3, ror fp
   11534:	andeq	r6, r2, ip, ror #1
   11538:	andeq	r4, r1, r7, ror fp
   1153c:	andeq	r6, r2, r0, asr #2
   11540:	push	{r0, r1, r2, lr}
   11544:	cmp	r0, #0
   11548:	beq	115f4 <__assert_fail@plt+0x70c>
   1154c:	ldr	r1, [pc, #168]	; 115fc <__assert_fail@plt+0x714>
   11550:	mov	lr, #1
   11554:	mov	ip, r0
   11558:	ldrb	r3, [r0], #1
   1155c:	cmp	r3, #0
   11560:	beq	11580 <__assert_fail@plt+0x698>
   11564:	sub	r2, r3, #9
   11568:	cmp	r2, #23
   1156c:	bls	11588 <__assert_fail@plt+0x6a0>
   11570:	sub	r3, r3, #48	; 0x30
   11574:	cmp	r3, #9
   11578:	mov	r3, #0
   1157c:	bls	115a8 <__assert_fail@plt+0x6c0>
   11580:	mov	r0, #0
   11584:	b	115f4 <__assert_fail@plt+0x70c>
   11588:	ands	r2, r1, lr, lsl r2
   1158c:	bne	11554 <__assert_fail@plt+0x66c>
   11590:	b	11570 <__assert_fail@plt+0x688>
   11594:	ands	r1, lr, ip, lsl r1
   11598:	beq	115ec <__assert_fail@plt+0x704>
   1159c:	add	r3, r3, #1
   115a0:	str	r3, [sp, #4]
   115a4:	b	115d0 <__assert_fail@plt+0x6e8>
   115a8:	add	r1, sp, #8
   115ac:	mov	r0, ip
   115b0:	str	r3, [r1, #-4]!
   115b4:	mov	r2, #10
   115b8:	bl	10df8 <strtoul@plt>
   115bc:	ldr	r3, [sp, #4]
   115c0:	cmp	r3, #0
   115c4:	movne	ip, #1
   115c8:	ldrne	lr, [pc, #44]	; 115fc <__assert_fail@plt+0x714>
   115cc:	beq	11580 <__assert_fail@plt+0x698>
   115d0:	ldr	r3, [sp, #4]
   115d4:	ldrb	r2, [r3]
   115d8:	cmp	r2, #0
   115dc:	beq	115f4 <__assert_fail@plt+0x70c>
   115e0:	sub	r1, r2, #9
   115e4:	cmp	r1, #23
   115e8:	bls	11594 <__assert_fail@plt+0x6ac>
   115ec:	cmp	r2, #44	; 0x2c
   115f0:	bne	11580 <__assert_fail@plt+0x698>
   115f4:	add	sp, sp, #12
   115f8:	pop	{pc}		; (ldr pc, [sp], #4)
   115fc:	addeq	r0, r0, pc, lsl r0
   11600:	push	{lr}		; (str lr, [sp, #-4]!)
   11604:	sub	sp, sp, #132	; 0x84
   11608:	mov	r2, sp
   1160c:	mov	r1, #128	; 0x80
   11610:	mov	r0, #0
   11614:	bl	10eac <sched_getaffinity@plt>
   11618:	cmp	r0, #0
   1161c:	bne	11634 <__assert_fail@plt+0x74c>
   11620:	mov	r1, sp
   11624:	mov	r0, #128	; 0x80
   11628:	bl	10cf0 <__sched_cpucount@plt>
   1162c:	cmp	r0, #0
   11630:	bne	11638 <__assert_fail@plt+0x750>
   11634:	mov	r0, #0
   11638:	add	sp, sp, #132	; 0x84
   1163c:	pop	{pc}		; (ldr pc, [sp], #4)
   11640:	cmp	r0, #2
   11644:	push	{r4, r5, r6, lr}
   11648:	bne	11688 <__assert_fail@plt+0x7a0>
   1164c:	ldr	r0, [pc, #172]	; 11700 <__assert_fail@plt+0x818>
   11650:	bl	10d98 <getenv@plt>
   11654:	bl	11540 <__assert_fail@plt+0x658>
   11658:	mov	r5, r0
   1165c:	ldr	r0, [pc, #160]	; 11704 <__assert_fail@plt+0x81c>
   11660:	bl	10d98 <getenv@plt>
   11664:	bl	11540 <__assert_fail@plt+0x658>
   11668:	subs	r4, r0, #0
   1166c:	mvneq	r4, #0
   11670:	cmp	r5, #0
   11674:	beq	11694 <__assert_fail@plt+0x7ac>
   11678:	cmp	r4, r5
   1167c:	movcc	r0, r4
   11680:	movcs	r0, r5
   11684:	pop	{r4, r5, r6, pc}
   11688:	cmp	r0, #1
   1168c:	bne	116bc <__assert_fail@plt+0x7d4>
   11690:	mvn	r4, #0
   11694:	bl	11600 <__assert_fail@plt+0x718>
   11698:	cmp	r0, #0
   1169c:	bne	116b0 <__assert_fail@plt+0x7c8>
   116a0:	mov	r0, #84	; 0x54
   116a4:	bl	10d20 <sysconf@plt>
   116a8:	cmp	r0, #1
   116ac:	movlt	r0, #1
   116b0:	cmp	r0, r4
   116b4:	movcs	r0, r4
   116b8:	pop	{r4, r5, r6, pc}
   116bc:	mov	r0, #83	; 0x53
   116c0:	bl	10d20 <sysconf@plt>
   116c4:	sub	r3, r0, #1
   116c8:	cmp	r3, #1
   116cc:	mov	r4, r0
   116d0:	bhi	116e4 <__assert_fail@plt+0x7fc>
   116d4:	bl	11600 <__assert_fail@plt+0x718>
   116d8:	cmp	r4, r0
   116dc:	bcs	116f4 <__assert_fail@plt+0x80c>
   116e0:	mov	r4, r0
   116e4:	cmp	r4, #0
   116e8:	mvnle	r4, #0
   116ec:	movle	r0, #1
   116f0:	ble	116b0 <__assert_fail@plt+0x7c8>
   116f4:	mov	r0, r4
   116f8:	mvn	r4, #0
   116fc:	b	116b0 <__assert_fail@plt+0x7c8>
   11700:	andeq	r4, r1, sl, ror fp
   11704:	andeq	r4, r1, sl, lsl #23
   11708:	push	{r4, r5, r6, lr}
   1170c:	subs	r5, r0, #0
   11710:	bne	11728 <__assert_fail@plt+0x840>
   11714:	ldr	r3, [pc, #124]	; 11798 <__assert_fail@plt+0x8b0>
   11718:	ldr	r0, [pc, #124]	; 1179c <__assert_fail@plt+0x8b4>
   1171c:	ldr	r1, [r3]
   11720:	bl	10ec4 <fputs@plt>
   11724:	bl	10edc <abort@plt>
   11728:	mov	r1, #47	; 0x2f
   1172c:	bl	10e94 <strrchr@plt>
   11730:	cmp	r0, #0
   11734:	addne	r4, r0, #1
   11738:	moveq	r4, r5
   1173c:	sub	r3, r4, r5
   11740:	cmp	r3, #6
   11744:	ble	11784 <__assert_fail@plt+0x89c>
   11748:	mov	r2, #7
   1174c:	ldr	r1, [pc, #76]	; 117a0 <__assert_fail@plt+0x8b8>
   11750:	sub	r0, r4, #7
   11754:	bl	10ed0 <strncmp@plt>
   11758:	cmp	r0, #0
   1175c:	bne	11784 <__assert_fail@plt+0x89c>
   11760:	mov	r2, #3
   11764:	ldr	r1, [pc, #56]	; 117a4 <__assert_fail@plt+0x8bc>
   11768:	mov	r0, r4
   1176c:	bl	10ed0 <strncmp@plt>
   11770:	cmp	r0, #0
   11774:	movne	r5, r4
   11778:	ldreq	r3, [pc, #40]	; 117a8 <__assert_fail@plt+0x8c0>
   1177c:	addeq	r5, r4, #3
   11780:	streq	r5, [r3]
   11784:	ldr	r3, [pc, #32]	; 117ac <__assert_fail@plt+0x8c4>
   11788:	str	r5, [r3]
   1178c:	ldr	r3, [pc, #28]	; 117b0 <__assert_fail@plt+0x8c8>
   11790:	str	r5, [r3]
   11794:	pop	{r4, r5, r6, pc}
   11798:	andeq	r6, r2, r0, asr #2
   1179c:	muleq	r1, fp, fp
   117a0:	ldrdeq	r4, [r1], -r3
   117a4:	ldrdeq	r4, [r1], -fp
   117a8:	andeq	r6, r2, r0, lsr r1
   117ac:	andeq	r6, r2, r8, asr r1
   117b0:	andeq	r6, r2, r4, lsr r1
   117b4:	push	{r4, r5, r6, lr}
   117b8:	mov	r2, #48	; 0x30
   117bc:	mov	r5, r1
   117c0:	mov	r1, #0
   117c4:	mov	r4, r0
   117c8:	bl	10e34 <memset@plt>
   117cc:	cmp	r5, #10
   117d0:	bne	117d8 <__assert_fail@plt+0x8f0>
   117d4:	bl	10edc <abort@plt>
   117d8:	str	r5, [r4]
   117dc:	mov	r0, r4
   117e0:	pop	{r4, r5, r6, pc}
   117e4:	push	{r4, r5, r6, lr}
   117e8:	mov	r4, r0
   117ec:	mov	r5, r1
   117f0:	bl	13f90 <__assert_fail@plt+0x30a8>
   117f4:	ldrb	r3, [r0]
   117f8:	bic	r3, r3, #32
   117fc:	cmp	r3, #85	; 0x55
   11800:	bne	11870 <__assert_fail@plt+0x988>
   11804:	ldrb	r3, [r0, #1]
   11808:	bic	r3, r3, #32
   1180c:	cmp	r3, #84	; 0x54
   11810:	bne	11848 <__assert_fail@plt+0x960>
   11814:	ldrb	r3, [r0, #2]
   11818:	bic	r3, r3, #32
   1181c:	cmp	r3, #70	; 0x46
   11820:	bne	11848 <__assert_fail@plt+0x960>
   11824:	ldrb	r3, [r0, #3]
   11828:	cmp	r3, #45	; 0x2d
   1182c:	bne	11848 <__assert_fail@plt+0x960>
   11830:	ldrb	r3, [r0, #4]
   11834:	cmp	r3, #56	; 0x38
   11838:	bne	11848 <__assert_fail@plt+0x960>
   1183c:	ldrb	r3, [r0, #5]
   11840:	cmp	r3, #0
   11844:	beq	1185c <__assert_fail@plt+0x974>
   11848:	ldr	r1, [pc, #144]	; 118e0 <__assert_fail@plt+0x9f8>
   1184c:	ldr	r0, [pc, #144]	; 118e4 <__assert_fail@plt+0x9fc>
   11850:	cmp	r5, #9
   11854:	movne	r0, r1
   11858:	pop	{r4, r5, r6, pc}
   1185c:	ldrb	r3, [r4]
   11860:	ldr	r1, [pc, #128]	; 118e8 <__assert_fail@plt+0xa00>
   11864:	ldr	r0, [pc, #128]	; 118ec <__assert_fail@plt+0xa04>
   11868:	cmp	r3, #96	; 0x60
   1186c:	b	11854 <__assert_fail@plt+0x96c>
   11870:	cmp	r3, #71	; 0x47
   11874:	bne	11848 <__assert_fail@plt+0x960>
   11878:	ldrb	r3, [r0, #1]
   1187c:	bic	r3, r3, #32
   11880:	cmp	r3, #66	; 0x42
   11884:	bne	11848 <__assert_fail@plt+0x960>
   11888:	ldrb	r3, [r0, #2]
   1188c:	cmp	r3, #49	; 0x31
   11890:	bne	11848 <__assert_fail@plt+0x960>
   11894:	ldrb	r3, [r0, #3]
   11898:	cmp	r3, #56	; 0x38
   1189c:	bne	11848 <__assert_fail@plt+0x960>
   118a0:	ldrb	r3, [r0, #4]
   118a4:	cmp	r3, #48	; 0x30
   118a8:	bne	11848 <__assert_fail@plt+0x960>
   118ac:	ldrb	r3, [r0, #5]
   118b0:	cmp	r3, #51	; 0x33
   118b4:	bne	11848 <__assert_fail@plt+0x960>
   118b8:	ldrb	r3, [r0, #6]
   118bc:	cmp	r3, #48	; 0x30
   118c0:	bne	11848 <__assert_fail@plt+0x960>
   118c4:	ldrb	r3, [r0, #7]
   118c8:	cmp	r3, #0
   118cc:	bne	11848 <__assert_fail@plt+0x960>
   118d0:	ldrb	r3, [r4]
   118d4:	ldr	r1, [pc, #20]	; 118f0 <__assert_fail@plt+0xa08>
   118d8:	ldr	r0, [pc, #20]	; 118f4 <__assert_fail@plt+0xa0c>
   118dc:	b	11868 <__assert_fail@plt+0x980>
   118e0:	andeq	r4, r1, r5, asr #24
   118e4:	andeq	r4, r1, r3, asr #24
   118e8:	andeq	r4, r1, r8, lsr ip
   118ec:	andeq	r4, r1, r4, lsr ip
   118f0:	andeq	r4, r1, r0, asr #24
   118f4:	andeq	r4, r1, ip, lsr ip
   118f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118fc:	sub	sp, sp, #108	; 0x6c
   11900:	mov	r8, r0
   11904:	str	r3, [sp, #36]	; 0x24
   11908:	mov	r5, r1
   1190c:	str	r2, [sp, #44]	; 0x2c
   11910:	ldr	sl, [sp, #144]	; 0x90
   11914:	bl	10d5c <__ctype_get_mb_cur_max@plt>
   11918:	ldr	r3, [sp, #148]	; 0x94
   1191c:	mov	r7, #0
   11920:	str	r7, [sp, #48]	; 0x30
   11924:	lsr	r6, r3, #1
   11928:	and	r6, r6, #1
   1192c:	mov	r3, #1
   11930:	str	r3, [sp, #72]	; 0x48
   11934:	str	r7, [sp, #24]
   11938:	str	r7, [sp, #32]
   1193c:	str	r7, [sp, #40]	; 0x28
   11940:	str	r7, [sp, #60]	; 0x3c
   11944:	str	r0, [sp, #76]	; 0x4c
   11948:	cmp	sl, #10
   1194c:	ldrls	pc, [pc, sl, lsl #2]
   11950:	b	11b8c <__assert_fail@plt+0xca4>
   11954:	andeq	r1, r1, r0, lsl #19
   11958:	andeq	r2, r1, r4, lsl r6
   1195c:	andeq	r1, r1, r8, asr fp
   11960:	andeq	r1, r1, r4, lsr #23
   11964:	andeq	r1, r1, r4, lsr fp
   11968:	andeq	r1, r1, ip, lsl #19
   1196c:	strdeq	r2, [r1], -r4
   11970:	muleq	r1, r0, fp
   11974:	andeq	r1, r1, r4, lsl #21
   11978:	andeq	r1, r1, r4, lsl #21
   1197c:	andeq	r1, r1, r4, lsl #21
   11980:	mov	r6, #0
   11984:	mov	r4, #0
   11988:	b	119b8 <__assert_fail@plt+0xad0>
   1198c:	cmp	r6, #0
   11990:	bne	11bb4 <__assert_fail@plt+0xccc>
   11994:	cmp	r5, #0
   11998:	movne	r3, #34	; 0x22
   1199c:	strbne	r3, [r8]
   119a0:	mov	r3, #1
   119a4:	str	r3, [sp, #24]
   119a8:	str	r3, [sp, #32]
   119ac:	mov	r4, #1
   119b0:	ldr	r3, [pc, #3172]	; 1261c <__assert_fail@plt+0x1734>
   119b4:	str	r3, [sp, #40]	; 0x28
   119b8:	mov	r9, r5
   119bc:	mov	r3, #0
   119c0:	str	r7, [sp, #68]	; 0x44
   119c4:	str	r3, [sp, #28]
   119c8:	ldr	r3, [sp, #36]	; 0x24
   119cc:	cmn	r3, #1
   119d0:	bne	12560 <__assert_fail@plt+0x1678>
   119d4:	ldr	r3, [sp, #44]	; 0x2c
   119d8:	ldr	r2, [sp, #28]
   119dc:	ldrb	r3, [r3, r2]
   119e0:	adds	r3, r3, #0
   119e4:	movne	r3, #1
   119e8:	str	r3, [sp, #52]	; 0x34
   119ec:	ldr	r3, [sp, #52]	; 0x34
   119f0:	cmp	r3, #0
   119f4:	bne	11bdc <__assert_fail@plt+0xcf4>
   119f8:	sub	r2, sl, #2
   119fc:	clz	r2, r2
   11a00:	lsr	r2, r2, #5
   11a04:	and	r3, r6, r2
   11a08:	cmp	r4, #0
   11a0c:	movne	r3, #0
   11a10:	andeq	r3, r3, #1
   11a14:	cmp	r3, #0
   11a18:	bne	11da4 <__assert_fail@plt+0xebc>
   11a1c:	eor	r3, r6, #1
   11a20:	ands	r2, r2, r3
   11a24:	beq	12598 <__assert_fail@plt+0x16b0>
   11a28:	ldr	r3, [sp, #68]	; 0x44
   11a2c:	cmp	r3, #0
   11a30:	beq	125d0 <__assert_fail@plt+0x16e8>
   11a34:	ldr	r3, [sp, #72]	; 0x48
   11a38:	cmp	r3, #0
   11a3c:	beq	12574 <__assert_fail@plt+0x168c>
   11a40:	ldr	r3, [sp, #160]	; 0xa0
   11a44:	ldr	r2, [sp, #44]	; 0x2c
   11a48:	str	r3, [sp, #16]
   11a4c:	ldr	r3, [sp, #156]	; 0x9c
   11a50:	ldr	r1, [sp, #60]	; 0x3c
   11a54:	str	r3, [sp, #12]
   11a58:	ldr	r3, [sp, #152]	; 0x98
   11a5c:	str	r3, [sp, #8]
   11a60:	ldr	r3, [sp, #148]	; 0x94
   11a64:	str	r3, [sp, #4]
   11a68:	mov	r3, #5
   11a6c:	str	r3, [sp]
   11a70:	ldr	r3, [sp, #36]	; 0x24
   11a74:	mov	r0, r8
   11a78:	bl	118f8 <__assert_fail@plt+0xa10>
   11a7c:	mov	r4, r0
   11a80:	b	125c4 <__assert_fail@plt+0x16dc>
   11a84:	cmp	sl, #10
   11a88:	beq	11ae4 <__assert_fail@plt+0xbfc>
   11a8c:	ldr	r4, [pc, #2956]	; 12620 <__assert_fail@plt+0x1738>
   11a90:	mov	r2, #5
   11a94:	mov	r1, r4
   11a98:	mov	r0, #0
   11a9c:	bl	10d14 <dcgettext@plt>
   11aa0:	cmp	r0, r4
   11aa4:	str	r0, [sp, #156]	; 0x9c
   11aa8:	bne	11ab8 <__assert_fail@plt+0xbd0>
   11aac:	mov	r1, sl
   11ab0:	bl	117e4 <__assert_fail@plt+0x8fc>
   11ab4:	str	r0, [sp, #156]	; 0x9c
   11ab8:	ldr	r4, [pc, #2916]	; 12624 <__assert_fail@plt+0x173c>
   11abc:	mov	r2, #5
   11ac0:	mov	r1, r4
   11ac4:	mov	r0, #0
   11ac8:	bl	10d14 <dcgettext@plt>
   11acc:	cmp	r0, r4
   11ad0:	str	r0, [sp, #160]	; 0xa0
   11ad4:	bne	11ae4 <__assert_fail@plt+0xbfc>
   11ad8:	mov	r1, sl
   11adc:	bl	117e4 <__assert_fail@plt+0x8fc>
   11ae0:	str	r0, [sp, #160]	; 0xa0
   11ae4:	cmp	r6, #0
   11ae8:	moveq	r4, r6
   11aec:	beq	11b04 <__assert_fail@plt+0xc1c>
   11af0:	mov	r4, #0
   11af4:	b	11b14 <__assert_fail@plt+0xc2c>
   11af8:	cmp	r5, r4
   11afc:	strbhi	r3, [r8, r4]
   11b00:	add	r4, r4, #1
   11b04:	ldr	r3, [sp, #156]	; 0x9c
   11b08:	ldrb	r3, [r3, r4]
   11b0c:	cmp	r3, #0
   11b10:	bne	11af8 <__assert_fail@plt+0xc10>
   11b14:	ldr	r0, [sp, #160]	; 0xa0
   11b18:	bl	10e04 <strlen@plt>
   11b1c:	ldr	r3, [sp, #160]	; 0xa0
   11b20:	str	r3, [sp, #40]	; 0x28
   11b24:	mov	r3, #1
   11b28:	str	r3, [sp, #24]
   11b2c:	str	r0, [sp, #32]
   11b30:	b	119b8 <__assert_fail@plt+0xad0>
   11b34:	mov	r3, #1
   11b38:	cmp	r6, #0
   11b3c:	streq	r3, [sp, #24]
   11b40:	beq	11b60 <__assert_fail@plt+0xc78>
   11b44:	str	r3, [sp, #32]
   11b48:	ldr	r3, [pc, #2772]	; 12624 <__assert_fail@plt+0x173c>
   11b4c:	mov	r4, #0
   11b50:	str	r3, [sp, #40]	; 0x28
   11b54:	b	11b84 <__assert_fail@plt+0xc9c>
   11b58:	cmp	r6, #0
   11b5c:	bne	11bcc <__assert_fail@plt+0xce4>
   11b60:	cmp	r5, #0
   11b64:	movne	r3, #39	; 0x27
   11b68:	strbne	r3, [r8]
   11b6c:	mov	r3, #1
   11b70:	str	r3, [sp, #32]
   11b74:	mov	r6, #0
   11b78:	ldr	r3, [pc, #2724]	; 12624 <__assert_fail@plt+0x173c>
   11b7c:	mov	r4, #1
   11b80:	str	r3, [sp, #40]	; 0x28
   11b84:	mov	sl, #2
   11b88:	b	119b8 <__assert_fail@plt+0xad0>
   11b8c:	bl	10edc <abort@plt>
   11b90:	mov	r6, #0
   11b94:	mov	r3, #1
   11b98:	str	r3, [sp, #24]
   11b9c:	mov	r4, r6
   11ba0:	b	119b8 <__assert_fail@plt+0xad0>
   11ba4:	mov	r6, #1
   11ba8:	str	r6, [sp, #24]
   11bac:	str	r6, [sp, #32]
   11bb0:	b	11b48 <__assert_fail@plt+0xc60>
   11bb4:	mov	r3, #1
   11bb8:	str	r3, [sp, #32]
   11bbc:	ldr	r3, [pc, #2648]	; 1261c <__assert_fail@plt+0x1734>
   11bc0:	str	r6, [sp, #24]
   11bc4:	str	r3, [sp, #40]	; 0x28
   11bc8:	b	11984 <__assert_fail@plt+0xa9c>
   11bcc:	mov	r3, #1
   11bd0:	str	r3, [sp, #32]
   11bd4:	ldr	r3, [pc, #2632]	; 12624 <__assert_fail@plt+0x173c>
   11bd8:	b	11bc4 <__assert_fail@plt+0xcdc>
   11bdc:	ldr	r3, [sp, #32]
   11be0:	ldr	fp, [sp, #24]
   11be4:	cmp	sl, #2
   11be8:	moveq	fp, #0
   11bec:	andne	fp, fp, #1
   11bf0:	adds	r5, r3, #0
   11bf4:	movne	r5, #1
   11bf8:	ands	r3, r5, fp
   11bfc:	str	r3, [sp, #64]	; 0x40
   11c00:	beq	11cd0 <__assert_fail@plt+0xde8>
   11c04:	ldr	r2, [sp, #32]
   11c08:	ldr	r3, [sp, #28]
   11c0c:	add	r7, r3, r2
   11c10:	mov	r3, r2
   11c14:	ldr	r2, [sp, #36]	; 0x24
   11c18:	cmp	r3, #1
   11c1c:	movls	r3, #0
   11c20:	movhi	r3, #1
   11c24:	cmn	r2, #1
   11c28:	movne	r3, #0
   11c2c:	cmp	r3, #0
   11c30:	beq	11c40 <__assert_fail@plt+0xd58>
   11c34:	ldr	r0, [sp, #44]	; 0x2c
   11c38:	bl	10e04 <strlen@plt>
   11c3c:	str	r0, [sp, #36]	; 0x24
   11c40:	ldr	r3, [sp, #36]	; 0x24
   11c44:	cmp	r3, r7
   11c48:	bcc	11cc8 <__assert_fail@plt+0xde0>
   11c4c:	ldr	r3, [sp, #44]	; 0x2c
   11c50:	ldr	r0, [sp, #28]
   11c54:	ldr	r2, [sp, #32]
   11c58:	ldr	r1, [sp, #40]	; 0x28
   11c5c:	add	r0, r3, r0
   11c60:	bl	10cfc <memcmp@plt>
   11c64:	cmp	r0, #0
   11c68:	bne	11cc8 <__assert_fail@plt+0xde0>
   11c6c:	cmp	r6, #0
   11c70:	beq	11cd0 <__assert_fail@plt+0xde8>
   11c74:	str	r6, [sp, #24]
   11c78:	ldr	r3, [sp, #24]
   11c7c:	ldr	r2, [sp, #44]	; 0x2c
   11c80:	cmp	sl, #2
   11c84:	movne	r3, #0
   11c88:	andeq	r3, r3, #1
   11c8c:	cmp	r3, #0
   11c90:	ldr	r3, [sp, #160]	; 0xa0
   11c94:	movne	sl, #4
   11c98:	str	r3, [sp, #16]
   11c9c:	ldr	r3, [sp, #156]	; 0x9c
   11ca0:	str	sl, [sp]
   11ca4:	str	r3, [sp, #12]
   11ca8:	mov	r3, #0
   11cac:	str	r3, [sp, #8]
   11cb0:	ldr	r3, [sp, #148]	; 0x94
   11cb4:	mov	r1, r9
   11cb8:	bic	r3, r3, #2
   11cbc:	str	r3, [sp, #4]
   11cc0:	ldr	r3, [sp, #36]	; 0x24
   11cc4:	b	11a74 <__assert_fail@plt+0xb8c>
   11cc8:	mov	r3, #0
   11ccc:	str	r3, [sp, #64]	; 0x40
   11cd0:	ldr	r2, [sp, #28]
   11cd4:	ldr	r3, [sp, #44]	; 0x2c
   11cd8:	add	r3, r3, r2
   11cdc:	str	r3, [sp, #80]	; 0x50
   11ce0:	ldr	r3, [sp, #44]	; 0x2c
   11ce4:	ldrb	r7, [r3, r2]
   11ce8:	cmp	r7, #58	; 0x3a
   11cec:	bhi	11e54 <__assert_fail@plt+0xf6c>
   11cf0:	cmp	r7, #43	; 0x2b
   11cf4:	bcs	11ea8 <__assert_fail@plt+0xfc0>
   11cf8:	cmp	r7, #32
   11cfc:	beq	11f00 <__assert_fail@plt+0x1018>
   11d00:	bhi	11dac <__assert_fail@plt+0xec4>
   11d04:	cmp	r7, #9
   11d08:	beq	121b4 <__assert_fail@plt+0x12cc>
   11d0c:	bhi	11d70 <__assert_fail@plt+0xe88>
   11d10:	cmp	r7, #7
   11d14:	beq	12260 <__assert_fail@plt+0x1378>
   11d18:	bhi	11f1c <__assert_fail@plt+0x1034>
   11d1c:	cmp	r7, #0
   11d20:	beq	11f38 <__assert_fail@plt+0x1050>
   11d24:	ldr	r3, [sp, #76]	; 0x4c
   11d28:	cmp	r3, #1
   11d2c:	bne	122a4 <__assert_fail@plt+0x13bc>
   11d30:	bl	10de0 <__ctype_b_loc@plt>
   11d34:	sxth	r3, r7
   11d38:	lsl	r3, r3, #1
   11d3c:	ldr	r2, [r0]
   11d40:	ldrh	r5, [r2, r3]
   11d44:	ldr	r3, [sp, #76]	; 0x4c
   11d48:	str	r3, [sp, #56]	; 0x38
   11d4c:	lsr	r5, r5, #14
   11d50:	and	r5, r5, #1
   11d54:	ldr	r3, [sp, #24]
   11d58:	eor	fp, r5, #1
   11d5c:	and	fp, fp, r3
   11d60:	ands	fp, fp, #255	; 0xff
   11d64:	beq	120ec <__assert_fail@plt+0x1204>
   11d68:	mov	r5, #0
   11d6c:	b	12350 <__assert_fail@plt+0x1468>
   11d70:	cmp	r7, #11
   11d74:	beq	121bc <__assert_fail@plt+0x12d4>
   11d78:	bcc	12258 <__assert_fail@plt+0x1370>
   11d7c:	cmp	r7, #12
   11d80:	beq	12268 <__assert_fail@plt+0x1380>
   11d84:	cmp	r7, #13
   11d88:	moveq	r3, #114	; 0x72
   11d8c:	bne	11d24 <__assert_fail@plt+0xe3c>
   11d90:	cmp	sl, #2
   11d94:	movne	r2, #0
   11d98:	andeq	r2, r6, #1
   11d9c:	cmp	r2, #0
   11da0:	beq	11f20 <__assert_fail@plt+0x1038>
   11da4:	mov	sl, #2
   11da8:	b	11c78 <__assert_fail@plt+0xd90>
   11dac:	cmp	r7, #37	; 0x25
   11db0:	beq	11ea8 <__assert_fail@plt+0xfc0>
   11db4:	bhi	11dc8 <__assert_fail@plt+0xee0>
   11db8:	cmp	r7, #35	; 0x23
   11dbc:	beq	11ef4 <__assert_fail@plt+0x100c>
   11dc0:	mov	r5, #0
   11dc4:	b	11f04 <__assert_fail@plt+0x101c>
   11dc8:	cmp	r7, #39	; 0x27
   11dcc:	bne	11dc0 <__assert_fail@plt+0xed8>
   11dd0:	cmp	sl, #2
   11dd4:	ldrne	r5, [sp, #52]	; 0x34
   11dd8:	movne	r3, r5
   11ddc:	strne	r3, [sp, #68]	; 0x44
   11de0:	bne	11eac <__assert_fail@plt+0xfc4>
   11de4:	cmp	r6, #0
   11de8:	bne	11c78 <__assert_fail@plt+0xd90>
   11dec:	ldr	r2, [sp, #60]	; 0x3c
   11df0:	adds	r3, r9, #0
   11df4:	movne	r3, #1
   11df8:	cmp	r2, #0
   11dfc:	movne	r3, #0
   11e00:	cmp	r3, #0
   11e04:	strne	r9, [sp, #60]	; 0x3c
   11e08:	movne	r9, #0
   11e0c:	bne	11e1c <__assert_fail@plt+0xf34>
   11e10:	cmp	r9, r4
   11e14:	movhi	r3, #39	; 0x27
   11e18:	strbhi	r3, [r8, r4]
   11e1c:	add	r3, r4, #1
   11e20:	cmp	r3, r9
   11e24:	movcc	r2, #92	; 0x5c
   11e28:	strbcc	r2, [r8, r3]
   11e2c:	add	r3, r4, #2
   11e30:	cmp	r3, r9
   11e34:	ldr	r5, [sp, #52]	; 0x34
   11e38:	movcc	r2, #39	; 0x27
   11e3c:	strbcc	r2, [r8, r3]
   11e40:	add	r4, r4, #3
   11e44:	mov	fp, r6
   11e48:	str	r5, [sp, #68]	; 0x44
   11e4c:	str	r6, [sp, #48]	; 0x30
   11e50:	b	120ec <__assert_fail@plt+0x1204>
   11e54:	cmp	r7, #94	; 0x5e
   11e58:	beq	11dc0 <__assert_fail@plt+0xed8>
   11e5c:	bhi	11eb4 <__assert_fail@plt+0xfcc>
   11e60:	cmp	r7, #90	; 0x5a
   11e64:	bhi	11e9c <__assert_fail@plt+0xfb4>
   11e68:	cmp	r7, #65	; 0x41
   11e6c:	bcs	11ea8 <__assert_fail@plt+0xfc0>
   11e70:	cmp	r7, #62	; 0x3e
   11e74:	bls	11dc0 <__assert_fail@plt+0xed8>
   11e78:	cmp	r7, #63	; 0x3f
   11e7c:	bne	11d24 <__assert_fail@plt+0xe3c>
   11e80:	cmp	sl, #2
   11e84:	beq	12028 <__assert_fail@plt+0x1140>
   11e88:	cmp	sl, #5
   11e8c:	beq	12038 <__assert_fail@plt+0x1150>
   11e90:	mov	fp, #0
   11e94:	mov	r5, fp
   11e98:	b	120ec <__assert_fail@plt+0x1204>
   11e9c:	cmp	r7, #92	; 0x5c
   11ea0:	beq	121c4 <__assert_fail@plt+0x12dc>
   11ea4:	bls	11dc0 <__assert_fail@plt+0xed8>
   11ea8:	ldr	r5, [sp, #52]	; 0x34
   11eac:	mov	fp, #0
   11eb0:	b	120ec <__assert_fail@plt+0x1204>
   11eb4:	cmp	r7, #122	; 0x7a
   11eb8:	bhi	11ed8 <__assert_fail@plt+0xff0>
   11ebc:	cmp	r7, #97	; 0x61
   11ec0:	bcs	11ea8 <__assert_fail@plt+0xfc0>
   11ec4:	cmp	r7, #95	; 0x5f
   11ec8:	beq	11ea8 <__assert_fail@plt+0xfc0>
   11ecc:	cmp	r7, #96	; 0x60
   11ed0:	bne	11d24 <__assert_fail@plt+0xe3c>
   11ed4:	b	11dc0 <__assert_fail@plt+0xed8>
   11ed8:	cmp	r7, #124	; 0x7c
   11edc:	beq	11dc0 <__assert_fail@plt+0xed8>
   11ee0:	bcc	12270 <__assert_fail@plt+0x1388>
   11ee4:	cmp	r7, #125	; 0x7d
   11ee8:	beq	12270 <__assert_fail@plt+0x1388>
   11eec:	cmp	r7, #126	; 0x7e
   11ef0:	bne	11d24 <__assert_fail@plt+0xe3c>
   11ef4:	ldr	r3, [sp, #28]
   11ef8:	cmp	r3, #0
   11efc:	bne	12030 <__assert_fail@plt+0x1148>
   11f00:	ldr	r5, [sp, #52]	; 0x34
   11f04:	cmp	sl, #2
   11f08:	movne	fp, #0
   11f0c:	andeq	fp, r6, #1
   11f10:	cmp	fp, #0
   11f14:	beq	120ec <__assert_fail@plt+0x1204>
   11f18:	b	11da4 <__assert_fail@plt+0xebc>
   11f1c:	mov	r3, #98	; 0x62
   11f20:	ldr	r2, [sp, #24]
   11f24:	cmp	r2, #0
   11f28:	beq	12030 <__assert_fail@plt+0x1148>
   11f2c:	mov	r7, r3
   11f30:	mov	r5, #0
   11f34:	b	12144 <__assert_fail@plt+0x125c>
   11f38:	ldr	r3, [sp, #24]
   11f3c:	cmp	r3, #0
   11f40:	beq	1200c <__assert_fail@plt+0x1124>
   11f44:	cmp	r6, #0
   11f48:	bne	11c74 <__assert_fail@plt+0xd8c>
   11f4c:	ldr	r3, [sp, #48]	; 0x30
   11f50:	eor	r2, r3, #1
   11f54:	cmp	sl, #2
   11f58:	movne	r2, #0
   11f5c:	andeq	r2, r2, #1
   11f60:	cmp	r2, #0
   11f64:	moveq	r3, r4
   11f68:	beq	11fa0 <__assert_fail@plt+0x10b8>
   11f6c:	cmp	r9, r4
   11f70:	movhi	r3, #39	; 0x27
   11f74:	strbhi	r3, [r8, r4]
   11f78:	add	r3, r4, #1
   11f7c:	cmp	r9, r3
   11f80:	movhi	r1, #36	; 0x24
   11f84:	strbhi	r1, [r8, r3]
   11f88:	add	r3, r4, #2
   11f8c:	cmp	r9, r3
   11f90:	movhi	r1, #39	; 0x27
   11f94:	strbhi	r1, [r8, r3]
   11f98:	add	r3, r4, #3
   11f9c:	str	r2, [sp, #48]	; 0x30
   11fa0:	cmp	r9, r3
   11fa4:	movhi	r2, #92	; 0x5c
   11fa8:	strbhi	r2, [r8, r3]
   11fac:	cmp	fp, #0
   11fb0:	add	r4, r3, #1
   11fb4:	beq	12544 <__assert_fail@plt+0x165c>
   11fb8:	ldr	r2, [sp, #28]
   11fbc:	ldr	r1, [sp, #36]	; 0x24
   11fc0:	add	r2, r2, #1
   11fc4:	cmp	r1, r2
   11fc8:	bls	12004 <__assert_fail@plt+0x111c>
   11fcc:	ldr	r1, [sp, #44]	; 0x2c
   11fd0:	mov	r7, #48	; 0x30
   11fd4:	ldrb	r2, [r1, r2]
   11fd8:	sub	r2, r2, #48	; 0x30
   11fdc:	cmp	r2, #9
   11fe0:	movhi	r5, r6
   11fe4:	bhi	120ec <__assert_fail@plt+0x1204>
   11fe8:	cmp	r9, r4
   11fec:	add	r2, r3, #2
   11ff0:	strbhi	r7, [r8, r4]
   11ff4:	cmp	r9, r2
   11ff8:	add	r4, r3, #3
   11ffc:	movhi	r1, #48	; 0x30
   12000:	strbhi	r1, [r8, r2]
   12004:	mov	r5, r6
   12008:	b	1254c <__assert_fail@plt+0x1664>
   1200c:	ldr	r3, [sp, #148]	; 0x94
   12010:	tst	r3, #1
   12014:	ldreq	r5, [sp, #24]
   12018:	beq	12558 <__assert_fail@plt+0x1670>
   1201c:	ldr	r3, [sp, #28]
   12020:	add	r3, r3, #1
   12024:	b	119c4 <__assert_fail@plt+0xadc>
   12028:	cmp	r6, #0
   1202c:	bne	11c78 <__assert_fail@plt+0xd90>
   12030:	mov	r5, #0
   12034:	b	11eac <__assert_fail@plt+0xfc4>
   12038:	ldr	r3, [sp, #148]	; 0x94
   1203c:	tst	r3, #4
   12040:	beq	12030 <__assert_fail@plt+0x1148>
   12044:	ldr	r3, [sp, #28]
   12048:	add	r2, r3, #2
   1204c:	ldr	r3, [sp, #36]	; 0x24
   12050:	cmp	r3, r2
   12054:	bls	12030 <__assert_fail@plt+0x1148>
   12058:	ldr	r3, [sp, #44]	; 0x2c
   1205c:	ldr	r1, [sp, #28]
   12060:	add	r3, r3, r1
   12064:	ldrb	r0, [r3, #1]
   12068:	cmp	r0, #63	; 0x3f
   1206c:	bne	12030 <__assert_fail@plt+0x1148>
   12070:	ldr	r3, [sp, #44]	; 0x2c
   12074:	ldrb	r1, [r3, r2]
   12078:	sub	r3, r1, #33	; 0x21
   1207c:	uxtb	r3, r3
   12080:	cmp	r3, #29
   12084:	bhi	12554 <__assert_fail@plt+0x166c>
   12088:	mov	ip, #1
   1208c:	ldr	r5, [pc, #1428]	; 12628 <__assert_fail@plt+0x1740>
   12090:	ands	r5, r5, ip, lsl r3
   12094:	beq	11eac <__assert_fail@plt+0xfc4>
   12098:	cmp	r6, #0
   1209c:	bne	11c78 <__assert_fail@plt+0xd90>
   120a0:	add	r3, r4, #1
   120a4:	cmp	r9, r4
   120a8:	strbhi	r0, [r8, r4]
   120ac:	cmp	r9, r3
   120b0:	movhi	r0, #34	; 0x22
   120b4:	strbhi	r0, [r8, r3]
   120b8:	add	r3, r4, #2
   120bc:	cmp	r9, r3
   120c0:	movhi	r0, #34	; 0x22
   120c4:	strbhi	r0, [r8, r3]
   120c8:	add	r3, r4, #3
   120cc:	cmp	r9, r3
   120d0:	add	r4, r4, #4
   120d4:	mov	r5, r6
   120d8:	mov	fp, r6
   120dc:	mov	r7, r1
   120e0:	movhi	r0, #63	; 0x3f
   120e4:	strbhi	r0, [r8, r3]
   120e8:	str	r2, [sp, #28]
   120ec:	ldr	r3, [sp, #24]
   120f0:	eor	r3, r3, #1
   120f4:	cmp	sl, #2
   120f8:	orreq	r3, r3, #1
   120fc:	eor	r3, r3, #1
   12100:	orr	r3, r6, r3
   12104:	tst	r3, #255	; 0xff
   12108:	beq	12138 <__assert_fail@plt+0x1250>
   1210c:	ldr	r3, [sp, #152]	; 0x98
   12110:	cmp	r3, #0
   12114:	beq	12138 <__assert_fail@plt+0x1250>
   12118:	lsr	r2, r7, #5
   1211c:	ldr	r1, [sp, #152]	; 0x98
   12120:	uxtb	r2, r2
   12124:	and	r3, r7, #31
   12128:	ldr	r2, [r1, r2, lsl #2]
   1212c:	lsr	r3, r2, r3
   12130:	tst	r3, #1
   12134:	bne	12144 <__assert_fail@plt+0x125c>
   12138:	ldr	r3, [sp, #64]	; 0x40
   1213c:	cmp	r3, #0
   12140:	beq	121dc <__assert_fail@plt+0x12f4>
   12144:	cmp	r6, #0
   12148:	bne	11c78 <__assert_fail@plt+0xd90>
   1214c:	ldr	r3, [sp, #48]	; 0x30
   12150:	eor	r3, r3, #1
   12154:	cmp	sl, #2
   12158:	movne	r3, #0
   1215c:	andeq	r3, r3, #1
   12160:	cmp	r3, #0
   12164:	beq	1219c <__assert_fail@plt+0x12b4>
   12168:	cmp	r9, r4
   1216c:	movhi	r2, #39	; 0x27
   12170:	strbhi	r2, [r8, r4]
   12174:	add	r2, r4, #1
   12178:	cmp	r9, r2
   1217c:	movhi	r1, #36	; 0x24
   12180:	strbhi	r1, [r8, r2]
   12184:	add	r2, r4, #2
   12188:	cmp	r9, r2
   1218c:	add	r4, r4, #3
   12190:	movhi	r1, #39	; 0x27
   12194:	strbhi	r1, [r8, r2]
   12198:	str	r3, [sp, #48]	; 0x30
   1219c:	cmp	r9, r4
   121a0:	movhi	r3, #92	; 0x5c
   121a4:	strbhi	r3, [r8, r4]
   121a8:	ldr	fp, [sp, #52]	; 0x34
   121ac:	add	r4, r4, #1
   121b0:	b	121dc <__assert_fail@plt+0x12f4>
   121b4:	mov	r3, #116	; 0x74
   121b8:	b	11d90 <__assert_fail@plt+0xea8>
   121bc:	mov	r3, #118	; 0x76
   121c0:	b	11f20 <__assert_fail@plt+0x1038>
   121c4:	cmp	sl, #2
   121c8:	bne	12238 <__assert_fail@plt+0x1350>
   121cc:	cmp	r6, #0
   121d0:	bne	11c78 <__assert_fail@plt+0xd90>
   121d4:	mov	r5, r6
   121d8:	mov	fp, r6
   121dc:	ldr	r3, [sp, #48]	; 0x30
   121e0:	eor	fp, fp, #1
   121e4:	and	fp, fp, r3
   121e8:	tst	fp, #255	; 0xff
   121ec:	beq	12218 <__assert_fail@plt+0x1330>
   121f0:	cmp	r9, r4
   121f4:	movhi	r3, #39	; 0x27
   121f8:	strbhi	r3, [r8, r4]
   121fc:	add	r3, r4, #1
   12200:	cmp	r9, r3
   12204:	movhi	r2, #39	; 0x27
   12208:	add	r4, r4, #2
   1220c:	strbhi	r2, [r8, r3]
   12210:	mov	r3, #0
   12214:	str	r3, [sp, #48]	; 0x30
   12218:	cmp	r9, r4
   1221c:	strbhi	r7, [r8, r4]
   12220:	ldr	r3, [sp, #72]	; 0x48
   12224:	cmp	r5, #0
   12228:	moveq	r3, #0
   1222c:	add	r4, r4, #1
   12230:	str	r3, [sp, #72]	; 0x48
   12234:	b	1201c <__assert_fail@plt+0x1134>
   12238:	ldr	r3, [sp, #24]
   1223c:	and	r3, r3, r6
   12240:	tst	r5, r3
   12244:	moveq	r3, r7
   12248:	beq	11d90 <__assert_fail@plt+0xea8>
   1224c:	mov	fp, #0
   12250:	mov	r5, fp
   12254:	b	121dc <__assert_fail@plt+0x12f4>
   12258:	mov	r3, #110	; 0x6e
   1225c:	b	11d90 <__assert_fail@plt+0xea8>
   12260:	mov	r3, #97	; 0x61
   12264:	b	11f20 <__assert_fail@plt+0x1038>
   12268:	mov	r3, #102	; 0x66
   1226c:	b	11f20 <__assert_fail@plt+0x1038>
   12270:	ldr	r3, [sp, #36]	; 0x24
   12274:	cmn	r3, #1
   12278:	bne	12298 <__assert_fail@plt+0x13b0>
   1227c:	ldr	r3, [sp, #44]	; 0x2c
   12280:	ldrb	r3, [r3, #1]
   12284:	adds	r3, r3, #0
   12288:	movne	r3, #1
   1228c:	cmp	r3, #0
   12290:	bne	12030 <__assert_fail@plt+0x1148>
   12294:	b	11ef4 <__assert_fail@plt+0x100c>
   12298:	ldr	r3, [sp, #36]	; 0x24
   1229c:	subs	r3, r3, #1
   122a0:	b	12288 <__assert_fail@plt+0x13a0>
   122a4:	mov	r3, #0
   122a8:	str	r3, [sp, #96]	; 0x60
   122ac:	str	r3, [sp, #100]	; 0x64
   122b0:	ldr	r3, [sp, #36]	; 0x24
   122b4:	cmn	r3, #1
   122b8:	bne	122c8 <__assert_fail@plt+0x13e0>
   122bc:	ldr	r0, [sp, #44]	; 0x2c
   122c0:	bl	10e04 <strlen@plt>
   122c4:	str	r0, [sp, #36]	; 0x24
   122c8:	ldr	r5, [sp, #52]	; 0x34
   122cc:	mov	r3, #0
   122d0:	str	r3, [sp, #56]	; 0x38
   122d4:	ldr	r3, [sp, #28]
   122d8:	ldr	r2, [sp, #56]	; 0x38
   122dc:	ldr	r1, [sp, #36]	; 0x24
   122e0:	add	r2, r3, r2
   122e4:	ldr	r3, [sp, #44]	; 0x2c
   122e8:	add	r0, sp, #92	; 0x5c
   122ec:	add	fp, r3, r2
   122f0:	sub	r2, r1, r2
   122f4:	add	r3, sp, #96	; 0x60
   122f8:	mov	r1, fp
   122fc:	bl	13fc4 <__assert_fail@plt+0x30dc>
   12300:	subs	r2, r0, #0
   12304:	beq	12344 <__assert_fail@plt+0x145c>
   12308:	cmn	r2, #1
   1230c:	beq	1251c <__assert_fail@plt+0x1634>
   12310:	cmn	r2, #2
   12314:	bne	1248c <__assert_fail@plt+0x15a4>
   12318:	ldr	r2, [sp, #56]	; 0x38
   1231c:	ldr	r3, [sp, #28]
   12320:	add	r3, r3, r2
   12324:	ldr	r2, [sp, #36]	; 0x24
   12328:	cmp	r2, r3
   1232c:	bls	1251c <__assert_fail@plt+0x1634>
   12330:	ldr	r3, [sp, #80]	; 0x50
   12334:	ldr	r2, [sp, #56]	; 0x38
   12338:	ldrb	r5, [r3, r2]
   1233c:	cmp	r5, #0
   12340:	bne	1247c <__assert_fail@plt+0x1594>
   12344:	ldr	r3, [sp, #56]	; 0x38
   12348:	cmp	r3, #1
   1234c:	bls	11d54 <__assert_fail@plt+0xe6c>
   12350:	ldr	r2, [sp, #56]	; 0x38
   12354:	ldr	r3, [sp, #28]
   12358:	mov	fp, #0
   1235c:	add	r3, r3, r2
   12360:	ldr	r2, [sp, #24]
   12364:	str	r3, [sp, #52]	; 0x34
   12368:	eor	r3, r5, #1
   1236c:	and	r3, r3, r2
   12370:	mov	ip, #92	; 0x5c
   12374:	uxtb	r3, r3
   12378:	mov	r2, #39	; 0x27
   1237c:	cmp	r3, #0
   12380:	beq	12524 <__assert_fail@plt+0x163c>
   12384:	cmp	r6, #0
   12388:	bne	11c74 <__assert_fail@plt+0xd8c>
   1238c:	ldr	r1, [sp, #48]	; 0x30
   12390:	eor	r1, r1, #1
   12394:	cmp	sl, #2
   12398:	movne	r1, #0
   1239c:	andeq	r1, r1, #1
   123a0:	cmp	r1, #0
   123a4:	beq	123d4 <__assert_fail@plt+0x14ec>
   123a8:	add	r0, r4, #1
   123ac:	cmp	r9, r4
   123b0:	strbhi	r2, [r8, r4]
   123b4:	cmp	r9, r0
   123b8:	movhi	lr, #36	; 0x24
   123bc:	strbhi	lr, [r8, r0]
   123c0:	add	r0, r4, #2
   123c4:	add	r4, r4, #3
   123c8:	cmp	r9, r0
   123cc:	strbhi	r2, [r8, r0]
   123d0:	str	r1, [sp, #48]	; 0x30
   123d4:	add	r0, r4, #1
   123d8:	cmp	r9, r4
   123dc:	strbhi	ip, [r8, r4]
   123e0:	cmp	r9, r0
   123e4:	lsrhi	r1, r7, #6
   123e8:	addhi	r1, r1, #48	; 0x30
   123ec:	strbhi	r1, [r8, r0]
   123f0:	add	r0, r4, #2
   123f4:	cmp	r9, r0
   123f8:	lsrhi	r1, r7, #3
   123fc:	and	r7, r7, #7
   12400:	andhi	r1, r1, #7
   12404:	add	r4, r4, #3
   12408:	add	r7, r7, #48	; 0x30
   1240c:	mov	fp, r3
   12410:	addhi	r1, r1, #48	; 0x30
   12414:	strbhi	r1, [r8, r0]
   12418:	ldr	r1, [sp, #28]
   1241c:	ldr	r0, [sp, #52]	; 0x34
   12420:	add	r1, r1, #1
   12424:	cmp	r0, r1
   12428:	bls	121dc <__assert_fail@plt+0x12f4>
   1242c:	ldr	lr, [sp, #48]	; 0x30
   12430:	eor	r0, fp, #1
   12434:	and	r0, r0, lr
   12438:	tst	r0, #255	; 0xff
   1243c:	beq	12460 <__assert_fail@plt+0x1578>
   12440:	add	r0, r4, #1
   12444:	cmp	r9, r4
   12448:	strbhi	r2, [r8, r4]
   1244c:	cmp	r9, r0
   12450:	add	r4, r4, #2
   12454:	strbhi	r2, [r8, r0]
   12458:	mov	r0, #0
   1245c:	str	r0, [sp, #48]	; 0x30
   12460:	ldr	r0, [sp, #44]	; 0x2c
   12464:	cmp	r9, r4
   12468:	strbhi	r7, [r8, r4]
   1246c:	str	r1, [sp, #28]
   12470:	add	r4, r4, #1
   12474:	ldrb	r7, [r0, r1]
   12478:	b	1237c <__assert_fail@plt+0x1494>
   1247c:	ldr	r3, [sp, #56]	; 0x38
   12480:	add	r3, r3, #1
   12484:	str	r3, [sp, #56]	; 0x38
   12488:	b	12318 <__assert_fail@plt+0x1430>
   1248c:	cmp	sl, #2
   12490:	movne	r3, #0
   12494:	andeq	r3, r6, #1
   12498:	cmp	r3, #0
   1249c:	movne	r1, #1
   124a0:	bne	124fc <__assert_fail@plt+0x1614>
   124a4:	ldr	r0, [sp, #92]	; 0x5c
   124a8:	str	r2, [sp, #84]	; 0x54
   124ac:	bl	10d44 <iswprint@plt>
   124b0:	ldr	r3, [sp, #56]	; 0x38
   124b4:	ldr	r2, [sp, #84]	; 0x54
   124b8:	add	r3, r3, r2
   124bc:	str	r3, [sp, #56]	; 0x38
   124c0:	cmp	r0, #0
   124c4:	add	r0, sp, #96	; 0x60
   124c8:	moveq	r5, #0
   124cc:	bl	10ce4 <mbsinit@plt>
   124d0:	cmp	r0, #0
   124d4:	beq	122d4 <__assert_fail@plt+0x13ec>
   124d8:	b	12344 <__assert_fail@plt+0x145c>
   124dc:	ldrb	r3, [fp, r1]
   124e0:	cmp	r3, #94	; 0x5e
   124e4:	beq	11da4 <__assert_fail@plt+0xebc>
   124e8:	bhi	12508 <__assert_fail@plt+0x1620>
   124ec:	sub	r3, r3, #91	; 0x5b
   124f0:	cmp	r3, #1
   124f4:	bls	11da4 <__assert_fail@plt+0xebc>
   124f8:	add	r1, r1, #1
   124fc:	cmp	r1, r2
   12500:	bne	124dc <__assert_fail@plt+0x15f4>
   12504:	b	124a4 <__assert_fail@plt+0x15bc>
   12508:	cmp	r3, #96	; 0x60
   1250c:	beq	11da4 <__assert_fail@plt+0xebc>
   12510:	cmp	r3, #124	; 0x7c
   12514:	bne	124f8 <__assert_fail@plt+0x1610>
   12518:	b	11da4 <__assert_fail@plt+0xebc>
   1251c:	mov	r5, #0
   12520:	b	12344 <__assert_fail@plt+0x145c>
   12524:	ldr	r1, [sp, #64]	; 0x40
   12528:	cmp	r1, #0
   1252c:	beq	12418 <__assert_fail@plt+0x1530>
   12530:	cmp	r9, r4
   12534:	strbhi	ip, [r8, r4]
   12538:	str	r3, [sp, #64]	; 0x40
   1253c:	add	r4, r4, #1
   12540:	b	12418 <__assert_fail@plt+0x1530>
   12544:	mov	r5, fp
   12548:	ldr	fp, [sp, #24]
   1254c:	mov	r7, #48	; 0x30
   12550:	b	120ec <__assert_fail@plt+0x1204>
   12554:	mov	r5, #0
   12558:	mov	fp, r5
   1255c:	b	120ec <__assert_fail@plt+0x1204>
   12560:	ldr	r3, [sp, #36]	; 0x24
   12564:	ldr	r2, [sp, #28]
   12568:	subs	r3, r3, r2
   1256c:	movne	r3, #1
   12570:	b	119e8 <__assert_fail@plt+0xb00>
   12574:	ldr	r3, [sp, #60]	; 0x3c
   12578:	clz	r7, r9
   1257c:	cmp	r3, #0
   12580:	lsr	r7, r7, #5
   12584:	moveq	r7, #0
   12588:	cmp	r7, #0
   1258c:	mov	r5, r3
   12590:	bne	11948 <__assert_fail@plt+0xa60>
   12594:	ldr	r3, [sp, #68]	; 0x44
   12598:	ldr	r2, [sp, #40]	; 0x28
   1259c:	cmp	r2, #0
   125a0:	moveq	r3, #0
   125a4:	andne	r3, r3, #1
   125a8:	cmp	r3, #0
   125ac:	movne	r3, r2
   125b0:	subne	r2, r3, #1
   125b4:	bne	125e4 <__assert_fail@plt+0x16fc>
   125b8:	cmp	r9, r4
   125bc:	movhi	r3, #0
   125c0:	strbhi	r3, [r8, r4]
   125c4:	mov	r0, r4
   125c8:	add	sp, sp, #108	; 0x6c
   125cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125d0:	mov	r3, r2
   125d4:	b	12598 <__assert_fail@plt+0x16b0>
   125d8:	cmp	r9, r4
   125dc:	strbhi	r3, [r8, r4]
   125e0:	add	r4, r4, #1
   125e4:	ldrb	r3, [r2, #1]!
   125e8:	cmp	r3, #0
   125ec:	bne	125d8 <__assert_fail@plt+0x16f0>
   125f0:	b	125b8 <__assert_fail@plt+0x16d0>
   125f4:	ldr	r3, [pc, #32]	; 1261c <__assert_fail@plt+0x1734>
   125f8:	mov	r6, #1
   125fc:	str	r6, [sp, #24]
   12600:	str	r6, [sp, #32]
   12604:	str	r3, [sp, #40]	; 0x28
   12608:	mov	r4, #0
   1260c:	mov	sl, #5
   12610:	b	119b8 <__assert_fail@plt+0xad0>
   12614:	mov	r6, #1
   12618:	b	11bac <__assert_fail@plt+0xcc4>
   1261c:	andeq	r4, r1, r3, asr #24
   12620:	andeq	r4, r1, r7, asr #24
   12624:	andeq	r4, r1, r5, asr #24
   12628:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1262c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12630:	sub	sp, sp, #52	; 0x34
   12634:	mov	r6, r0
   12638:	mov	r5, r3
   1263c:	mov	r8, r1
   12640:	mov	r9, r2
   12644:	bl	10e1c <__errno_location@plt>
   12648:	ldr	r7, [pc, #380]	; 127cc <__assert_fail@plt+0x18e4>
   1264c:	cmn	r6, #-2147483647	; 0x80000001
   12650:	ldr	r4, [r7]
   12654:	ldr	r3, [r0]
   12658:	str	r0, [sp, #24]
   1265c:	str	r3, [sp, #32]
   12660:	movne	r3, #0
   12664:	moveq	r3, #1
   12668:	orrs	r3, r3, r6, lsr #31
   1266c:	beq	12674 <__assert_fail@plt+0x178c>
   12670:	bl	10edc <abort@plt>
   12674:	ldr	r2, [r7, #4]
   12678:	cmp	r6, r2
   1267c:	blt	126ec <__assert_fail@plt+0x1804>
   12680:	add	r1, sp, #48	; 0x30
   12684:	add	sl, r7, #8
   12688:	str	r2, [r1, #-4]!
   1268c:	cmp	r4, sl
   12690:	mov	r3, #8
   12694:	sub	r2, r6, r2
   12698:	movne	r0, r4
   1269c:	str	r3, [sp]
   126a0:	add	r2, r2, #1
   126a4:	mvn	r3, #-2147483648	; 0x80000000
   126a8:	moveq	r0, #0
   126ac:	bl	133c0 <__assert_fail@plt+0x24d8>
   126b0:	cmp	r4, sl
   126b4:	ldr	r2, [sp, #44]	; 0x2c
   126b8:	mov	fp, r0
   126bc:	str	r0, [r7]
   126c0:	ldmeq	r4, {r0, r1}
   126c4:	mov	r4, fp
   126c8:	stmeq	fp, {r0, r1}
   126cc:	ldr	r0, [r7, #4]
   126d0:	mov	r1, #0
   126d4:	sub	r2, r2, r0
   126d8:	add	r0, fp, r0, lsl #3
   126dc:	lsl	r2, r2, #3
   126e0:	bl	10e34 <memset@plt>
   126e4:	ldr	r3, [sp, #44]	; 0x2c
   126e8:	str	r3, [r7, #4]
   126ec:	ldr	r3, [r5, #4]
   126f0:	add	sl, r4, r6, lsl #3
   126f4:	orr	r3, r3, #1
   126f8:	str	r3, [sp, #28]
   126fc:	add	r3, r5, #8
   12700:	str	r3, [sp, #36]	; 0x24
   12704:	ldr	r3, [r5, #44]	; 0x2c
   12708:	ldr	fp, [r4, r6, lsl #3]
   1270c:	ldr	r7, [sl, #4]
   12710:	str	r3, [sp, #16]
   12714:	ldr	r3, [r5, #40]	; 0x28
   12718:	mov	r2, r8
   1271c:	str	r3, [sp, #12]
   12720:	add	r3, r5, #8
   12724:	str	r3, [sp, #8]
   12728:	ldr	r3, [sp, #28]
   1272c:	mov	r1, fp
   12730:	str	r3, [sp, #4]
   12734:	ldr	r3, [r5]
   12738:	mov	r0, r7
   1273c:	str	r3, [sp]
   12740:	mov	r3, r9
   12744:	bl	118f8 <__assert_fail@plt+0xa10>
   12748:	cmp	fp, r0
   1274c:	bhi	127b4 <__assert_fail@plt+0x18cc>
   12750:	ldr	r3, [pc, #120]	; 127d0 <__assert_fail@plt+0x18e8>
   12754:	add	fp, r0, #1
   12758:	cmp	r7, r3
   1275c:	str	fp, [r4, r6, lsl #3]
   12760:	beq	1276c <__assert_fail@plt+0x1884>
   12764:	mov	r0, r7
   12768:	bl	13ea8 <__assert_fail@plt+0x2fc0>
   1276c:	mov	r0, fp
   12770:	bl	13278 <__assert_fail@plt+0x2390>
   12774:	ldr	r3, [r5, #44]	; 0x2c
   12778:	mov	r2, r8
   1277c:	mov	r1, fp
   12780:	str	r0, [sl, #4]
   12784:	str	r3, [sp, #16]
   12788:	ldr	r3, [r5, #40]	; 0x28
   1278c:	mov	r7, r0
   12790:	str	r3, [sp, #12]
   12794:	add	r3, r5, #8
   12798:	str	r3, [sp, #8]
   1279c:	ldr	r3, [sp, #28]
   127a0:	str	r3, [sp, #4]
   127a4:	ldr	r3, [r5]
   127a8:	str	r3, [sp]
   127ac:	mov	r3, r9
   127b0:	bl	118f8 <__assert_fail@plt+0xa10>
   127b4:	ldr	r3, [sp, #24]
   127b8:	ldr	r2, [sp, #32]
   127bc:	mov	r0, r7
   127c0:	str	r2, [r3]
   127c4:	add	sp, sp, #52	; 0x34
   127c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127cc:	strdeq	r6, [r2], -r0
   127d0:	andeq	r6, r2, ip, asr r1
   127d4:	push	{r4, r5, r6, lr}
   127d8:	mov	r5, r0
   127dc:	bl	10e1c <__errno_location@plt>
   127e0:	cmp	r5, #0
   127e4:	mov	r1, #48	; 0x30
   127e8:	ldr	r6, [r0]
   127ec:	mov	r4, r0
   127f0:	ldr	r0, [pc, #12]	; 12804 <__assert_fail@plt+0x191c>
   127f4:	movne	r0, r5
   127f8:	bl	13654 <__assert_fail@plt+0x276c>
   127fc:	str	r6, [r4]
   12800:	pop	{r4, r5, r6, pc}
   12804:	andeq	r6, r2, ip, asr r2
   12808:	ldr	r3, [pc, #12]	; 1281c <__assert_fail@plt+0x1934>
   1280c:	cmp	r0, #0
   12810:	moveq	r0, r3
   12814:	ldr	r0, [r0]
   12818:	bx	lr
   1281c:	andeq	r6, r2, ip, asr r2
   12820:	ldr	r3, [pc, #12]	; 12834 <__assert_fail@plt+0x194c>
   12824:	cmp	r0, #0
   12828:	moveq	r0, r3
   1282c:	str	r1, [r0]
   12830:	bx	lr
   12834:	andeq	r6, r2, ip, asr r2
   12838:	ldr	r3, [pc, #52]	; 12874 <__assert_fail@plt+0x198c>
   1283c:	cmp	r0, #0
   12840:	moveq	r0, r3
   12844:	add	r3, r0, #8
   12848:	push	{lr}		; (str lr, [sp, #-4]!)
   1284c:	lsr	lr, r1, #5
   12850:	and	r1, r1, #31
   12854:	ldr	ip, [r3, lr, lsl #2]
   12858:	lsr	r0, ip, r1
   1285c:	eor	r2, r2, r0
   12860:	and	r2, r2, #1
   12864:	and	r0, r0, #1
   12868:	eor	r1, ip, r2, lsl r1
   1286c:	str	r1, [r3, lr, lsl #2]
   12870:	pop	{pc}		; (ldr pc, [sp], #4)
   12874:	andeq	r6, r2, ip, asr r2
   12878:	ldr	r3, [pc, #16]	; 12890 <__assert_fail@plt+0x19a8>
   1287c:	cmp	r0, #0
   12880:	movne	r3, r0
   12884:	ldr	r0, [r3, #4]
   12888:	str	r1, [r3, #4]
   1288c:	bx	lr
   12890:	andeq	r6, r2, ip, asr r2
   12894:	ldr	r3, [pc, #44]	; 128c8 <__assert_fail@plt+0x19e0>
   12898:	cmp	r0, #0
   1289c:	moveq	r0, r3
   128a0:	mov	r3, #10
   128a4:	cmp	r2, #0
   128a8:	cmpne	r1, #0
   128ac:	str	r3, [r0]
   128b0:	bne	128bc <__assert_fail@plt+0x19d4>
   128b4:	push	{r4, lr}
   128b8:	bl	10edc <abort@plt>
   128bc:	str	r1, [r0, #40]	; 0x28
   128c0:	str	r2, [r0, #44]	; 0x2c
   128c4:	bx	lr
   128c8:	andeq	r6, r2, ip, asr r2
   128cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   128d0:	sub	sp, sp, #24
   128d4:	mov	sl, r3
   128d8:	ldr	r4, [sp, #56]	; 0x38
   128dc:	ldr	r3, [pc, #100]	; 12948 <__assert_fail@plt+0x1a60>
   128e0:	cmp	r4, #0
   128e4:	moveq	r4, r3
   128e8:	mov	r7, r0
   128ec:	mov	r8, r1
   128f0:	mov	r9, r2
   128f4:	bl	10e1c <__errno_location@plt>
   128f8:	ldr	r3, [r4, #44]	; 0x2c
   128fc:	mov	r2, r9
   12900:	mov	r1, r8
   12904:	ldr	r6, [r0]
   12908:	str	r3, [sp, #16]
   1290c:	ldr	r3, [r4, #40]	; 0x28
   12910:	mov	r5, r0
   12914:	str	r3, [sp, #12]
   12918:	add	r3, r4, #8
   1291c:	str	r3, [sp, #8]
   12920:	ldr	r3, [r4, #4]
   12924:	mov	r0, r7
   12928:	str	r3, [sp, #4]
   1292c:	ldr	r3, [r4]
   12930:	str	r3, [sp]
   12934:	mov	r3, sl
   12938:	bl	118f8 <__assert_fail@plt+0xa10>
   1293c:	str	r6, [r5]
   12940:	add	sp, sp, #24
   12944:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12948:	andeq	r6, r2, ip, asr r2
   1294c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12950:	cmp	r3, #0
   12954:	sub	sp, sp, #44	; 0x2c
   12958:	ldr	r4, [pc, #188]	; 12a1c <__assert_fail@plt+0x1b34>
   1295c:	mov	r6, r2
   12960:	movne	r4, r3
   12964:	mov	sl, r1
   12968:	mov	r9, r0
   1296c:	bl	10e1c <__errno_location@plt>
   12970:	ldr	r5, [r4, #4]
   12974:	add	fp, r4, #8
   12978:	cmp	r6, #0
   1297c:	orreq	r5, r5, #1
   12980:	mov	r1, #0
   12984:	mov	r2, r9
   12988:	ldr	r3, [r0]
   1298c:	mov	r8, r0
   12990:	str	r3, [sp, #28]
   12994:	ldr	r3, [r4, #44]	; 0x2c
   12998:	mov	r0, r1
   1299c:	str	r3, [sp, #16]
   129a0:	ldr	r3, [r4, #40]	; 0x28
   129a4:	stmib	sp, {r5, fp}
   129a8:	str	r3, [sp, #12]
   129ac:	ldr	r3, [r4]
   129b0:	str	r3, [sp]
   129b4:	mov	r3, sl
   129b8:	bl	118f8 <__assert_fail@plt+0xa10>
   129bc:	add	r1, r0, #1
   129c0:	mov	r7, r0
   129c4:	mov	r0, r1
   129c8:	str	r1, [sp, #36]	; 0x24
   129cc:	bl	13278 <__assert_fail@plt+0x2390>
   129d0:	ldr	r3, [r4, #44]	; 0x2c
   129d4:	mov	r2, r9
   129d8:	str	r3, [sp, #16]
   129dc:	ldr	r3, [r4, #40]	; 0x28
   129e0:	stmib	sp, {r5, fp}
   129e4:	str	r3, [sp, #12]
   129e8:	ldr	r3, [r4]
   129ec:	ldr	r1, [sp, #36]	; 0x24
   129f0:	str	r3, [sp]
   129f4:	mov	r3, sl
   129f8:	str	r0, [sp, #32]
   129fc:	bl	118f8 <__assert_fail@plt+0xa10>
   12a00:	ldr	r3, [sp, #28]
   12a04:	cmp	r6, #0
   12a08:	str	r3, [r8]
   12a0c:	ldr	r0, [sp, #32]
   12a10:	strne	r7, [r6]
   12a14:	add	sp, sp, #44	; 0x2c
   12a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a1c:	andeq	r6, r2, ip, asr r2
   12a20:	mov	r3, r2
   12a24:	mov	r2, #0
   12a28:	b	1294c <__assert_fail@plt+0x1a64>
   12a2c:	push	{r4, r5, r6, r7, r8, lr}
   12a30:	mov	r6, #1
   12a34:	ldr	r4, [pc, #104]	; 12aa4 <__assert_fail@plt+0x1bbc>
   12a38:	ldr	r5, [r4]
   12a3c:	add	r7, r5, #12
   12a40:	ldr	r3, [r4, #4]
   12a44:	add	r7, r7, #8
   12a48:	cmp	r6, r3
   12a4c:	blt	12a94 <__assert_fail@plt+0x1bac>
   12a50:	ldr	r0, [r5, #4]
   12a54:	ldr	r6, [pc, #76]	; 12aa8 <__assert_fail@plt+0x1bc0>
   12a58:	cmp	r0, r6
   12a5c:	beq	12a70 <__assert_fail@plt+0x1b88>
   12a60:	bl	13ea8 <__assert_fail@plt+0x2fc0>
   12a64:	mov	r3, #256	; 0x100
   12a68:	str	r3, [r4, #8]
   12a6c:	str	r6, [r4, #12]
   12a70:	ldr	r6, [pc, #52]	; 12aac <__assert_fail@plt+0x1bc4>
   12a74:	cmp	r5, r6
   12a78:	beq	12a88 <__assert_fail@plt+0x1ba0>
   12a7c:	mov	r0, r5
   12a80:	bl	13ea8 <__assert_fail@plt+0x2fc0>
   12a84:	str	r6, [r4]
   12a88:	mov	r3, #1
   12a8c:	str	r3, [r4, #4]
   12a90:	pop	{r4, r5, r6, r7, r8, pc}
   12a94:	ldr	r0, [r7, #-8]
   12a98:	bl	13ea8 <__assert_fail@plt+0x2fc0>
   12a9c:	add	r6, r6, #1
   12aa0:	b	12a40 <__assert_fail@plt+0x1b58>
   12aa4:	strdeq	r6, [r2], -r0
   12aa8:	andeq	r6, r2, ip, asr r1
   12aac:	strdeq	r6, [r2], -r8
   12ab0:	ldr	r3, [pc, #4]	; 12abc <__assert_fail@plt+0x1bd4>
   12ab4:	mvn	r2, #0
   12ab8:	b	1262c <__assert_fail@plt+0x1744>
   12abc:	andeq	r6, r2, ip, asr r2
   12ac0:	ldr	r3, [pc]	; 12ac8 <__assert_fail@plt+0x1be0>
   12ac4:	b	1262c <__assert_fail@plt+0x1744>
   12ac8:	andeq	r6, r2, ip, asr r2
   12acc:	mov	r1, r0
   12ad0:	mov	r0, #0
   12ad4:	b	12ab0 <__assert_fail@plt+0x1bc8>
   12ad8:	mov	r2, r1
   12adc:	mov	r1, r0
   12ae0:	mov	r0, #0
   12ae4:	b	12ac0 <__assert_fail@plt+0x1bd8>
   12ae8:	push	{r4, r5, lr}
   12aec:	sub	sp, sp, #52	; 0x34
   12af0:	mov	r5, r2
   12af4:	mov	r4, r0
   12af8:	mov	r0, sp
   12afc:	bl	117b4 <__assert_fail@plt+0x8cc>
   12b00:	mov	r3, sp
   12b04:	mvn	r2, #0
   12b08:	mov	r1, r5
   12b0c:	mov	r0, r4
   12b10:	bl	1262c <__assert_fail@plt+0x1744>
   12b14:	add	sp, sp, #52	; 0x34
   12b18:	pop	{r4, r5, pc}
   12b1c:	push	{r4, r5, r6, lr}
   12b20:	sub	sp, sp, #48	; 0x30
   12b24:	mov	r5, r2
   12b28:	mov	r6, r3
   12b2c:	mov	r4, r0
   12b30:	mov	r0, sp
   12b34:	bl	117b4 <__assert_fail@plt+0x8cc>
   12b38:	mov	r3, sp
   12b3c:	mov	r2, r6
   12b40:	mov	r1, r5
   12b44:	mov	r0, r4
   12b48:	bl	1262c <__assert_fail@plt+0x1744>
   12b4c:	add	sp, sp, #48	; 0x30
   12b50:	pop	{r4, r5, r6, pc}
   12b54:	mov	r2, r1
   12b58:	mov	r1, r0
   12b5c:	mov	r0, #0
   12b60:	b	12ae8 <__assert_fail@plt+0x1c00>
   12b64:	mov	r3, r2
   12b68:	mov	r2, r1
   12b6c:	mov	r1, r0
   12b70:	mov	r0, #0
   12b74:	b	12b1c <__assert_fail@plt+0x1c34>
   12b78:	push	{r4, r5, r6, lr}
   12b7c:	mov	r4, r0
   12b80:	ldr	lr, [pc, #80]	; 12bd8 <__assert_fail@plt+0x1cf0>
   12b84:	mov	r5, r1
   12b88:	mov	r6, r2
   12b8c:	ldm	lr!, {r0, r1, r2, r3}
   12b90:	sub	sp, sp, #48	; 0x30
   12b94:	mov	ip, sp
   12b98:	stmia	ip!, {r0, r1, r2, r3}
   12b9c:	ldm	lr!, {r0, r1, r2, r3}
   12ba0:	stmia	ip!, {r0, r1, r2, r3}
   12ba4:	ldm	lr, {r0, r1, r2, r3}
   12ba8:	stm	ip, {r0, r1, r2, r3}
   12bac:	mov	r1, r6
   12bb0:	mov	r2, #1
   12bb4:	mov	r0, sp
   12bb8:	bl	12838 <__assert_fail@plt+0x1950>
   12bbc:	mov	r3, sp
   12bc0:	mov	r2, r5
   12bc4:	mov	r1, r4
   12bc8:	mov	r0, #0
   12bcc:	bl	1262c <__assert_fail@plt+0x1744>
   12bd0:	add	sp, sp, #48	; 0x30
   12bd4:	pop	{r4, r5, r6, pc}
   12bd8:	andeq	r6, r2, ip, asr r2
   12bdc:	mov	r2, r1
   12be0:	mvn	r1, #0
   12be4:	b	12b78 <__assert_fail@plt+0x1c90>
   12be8:	mov	r1, #58	; 0x3a
   12bec:	b	12bdc <__assert_fail@plt+0x1cf4>
   12bf0:	mov	r2, #58	; 0x3a
   12bf4:	b	12b78 <__assert_fail@plt+0x1c90>
   12bf8:	push	{r4, r5, lr}
   12bfc:	sub	sp, sp, #100	; 0x64
   12c00:	mov	r4, r0
   12c04:	mov	r0, sp
   12c08:	mov	r5, r2
   12c0c:	bl	117b4 <__assert_fail@plt+0x8cc>
   12c10:	mov	ip, sp
   12c14:	add	lr, sp, #48	; 0x30
   12c18:	ldm	ip!, {r0, r1, r2, r3}
   12c1c:	stmia	lr!, {r0, r1, r2, r3}
   12c20:	ldm	ip!, {r0, r1, r2, r3}
   12c24:	stmia	lr!, {r0, r1, r2, r3}
   12c28:	ldm	ip, {r0, r1, r2, r3}
   12c2c:	stm	lr, {r0, r1, r2, r3}
   12c30:	mov	r2, #1
   12c34:	mov	r1, #58	; 0x3a
   12c38:	add	r0, sp, #48	; 0x30
   12c3c:	bl	12838 <__assert_fail@plt+0x1950>
   12c40:	add	r3, sp, #48	; 0x30
   12c44:	mvn	r2, #0
   12c48:	mov	r1, r5
   12c4c:	mov	r0, r4
   12c50:	bl	1262c <__assert_fail@plt+0x1744>
   12c54:	add	sp, sp, #100	; 0x64
   12c58:	pop	{r4, r5, pc}
   12c5c:	push	{r4, r5, r6, r7, lr}
   12c60:	mov	r4, r0
   12c64:	ldr	lr, [pc, #84]	; 12cc0 <__assert_fail@plt+0x1dd8>
   12c68:	mov	r6, r1
   12c6c:	mov	r7, r2
   12c70:	mov	r5, r3
   12c74:	ldm	lr!, {r0, r1, r2, r3}
   12c78:	sub	sp, sp, #52	; 0x34
   12c7c:	mov	ip, sp
   12c80:	stmia	ip!, {r0, r1, r2, r3}
   12c84:	ldm	lr!, {r0, r1, r2, r3}
   12c88:	stmia	ip!, {r0, r1, r2, r3}
   12c8c:	ldm	lr, {r0, r1, r2, r3}
   12c90:	stm	ip, {r0, r1, r2, r3}
   12c94:	mov	r2, r7
   12c98:	mov	r1, r6
   12c9c:	mov	r0, sp
   12ca0:	bl	12894 <__assert_fail@plt+0x19ac>
   12ca4:	mov	r3, sp
   12ca8:	ldr	r2, [sp, #72]	; 0x48
   12cac:	mov	r1, r5
   12cb0:	mov	r0, r4
   12cb4:	bl	1262c <__assert_fail@plt+0x1744>
   12cb8:	add	sp, sp, #52	; 0x34
   12cbc:	pop	{r4, r5, r6, r7, pc}
   12cc0:	andeq	r6, r2, ip, asr r2
   12cc4:	mvn	ip, #0
   12cc8:	push	{r0, r1, r2, lr}
   12ccc:	str	ip, [sp]
   12cd0:	bl	12c5c <__assert_fail@plt+0x1d74>
   12cd4:	add	sp, sp, #12
   12cd8:	pop	{pc}		; (ldr pc, [sp], #4)
   12cdc:	mov	r3, r2
   12ce0:	mov	r2, r1
   12ce4:	mov	r1, r0
   12ce8:	mov	r0, #0
   12cec:	b	12cc4 <__assert_fail@plt+0x1ddc>
   12cf0:	push	{r0, r1, r2, lr}
   12cf4:	str	r3, [sp]
   12cf8:	mov	r3, r2
   12cfc:	mov	r2, r1
   12d00:	mov	r1, r0
   12d04:	mov	r0, #0
   12d08:	bl	12c5c <__assert_fail@plt+0x1d74>
   12d0c:	add	sp, sp, #12
   12d10:	pop	{pc}		; (ldr pc, [sp], #4)
   12d14:	ldr	r3, [pc]	; 12d1c <__assert_fail@plt+0x1e34>
   12d18:	b	1262c <__assert_fail@plt+0x1744>
   12d1c:	andeq	r6, r2, r0, lsl #2
   12d20:	mov	r2, r1
   12d24:	mov	r1, r0
   12d28:	mov	r0, #0
   12d2c:	b	12d14 <__assert_fail@plt+0x1e2c>
   12d30:	mvn	r2, #0
   12d34:	b	12d14 <__assert_fail@plt+0x1e2c>
   12d38:	mov	r1, r0
   12d3c:	mov	r0, #0
   12d40:	b	12d30 <__assert_fail@plt+0x1e48>
   12d44:	push	{r4, r5, r6, lr}
   12d48:	sub	sp, sp, #32
   12d4c:	cmp	r1, #0
   12d50:	mov	r5, r0
   12d54:	ldr	r4, [sp, #48]	; 0x30
   12d58:	ldr	r6, [sp, #52]	; 0x34
   12d5c:	beq	12e10 <__assert_fail@plt+0x1f28>
   12d60:	stm	sp, {r2, r3}
   12d64:	mov	r3, r1
   12d68:	ldr	r2, [pc, #860]	; 130cc <__assert_fail@plt+0x21e4>
   12d6c:	mov	r1, #1
   12d70:	bl	10e64 <__fprintf_chk@plt>
   12d74:	mov	r2, #5
   12d78:	ldr	r1, [pc, #848]	; 130d0 <__assert_fail@plt+0x21e8>
   12d7c:	mov	r0, #0
   12d80:	bl	10d14 <dcgettext@plt>
   12d84:	ldr	r3, [pc, #840]	; 130d4 <__assert_fail@plt+0x21ec>
   12d88:	ldr	r2, [pc, #840]	; 130d8 <__assert_fail@plt+0x21f0>
   12d8c:	str	r3, [sp]
   12d90:	mov	r1, #1
   12d94:	mov	r3, r0
   12d98:	mov	r0, r5
   12d9c:	bl	10e64 <__fprintf_chk@plt>
   12da0:	mov	r1, r5
   12da4:	mov	r0, #10
   12da8:	bl	10d08 <fputc_unlocked@plt>
   12dac:	mov	r2, #5
   12db0:	ldr	r1, [pc, #804]	; 130dc <__assert_fail@plt+0x21f4>
   12db4:	mov	r0, #0
   12db8:	bl	10d14 <dcgettext@plt>
   12dbc:	mov	r1, #1
   12dc0:	ldr	r3, [pc, #792]	; 130e0 <__assert_fail@plt+0x21f8>
   12dc4:	mov	r2, r0
   12dc8:	mov	r0, r5
   12dcc:	bl	10e64 <__fprintf_chk@plt>
   12dd0:	mov	r1, r5
   12dd4:	mov	r0, #10
   12dd8:	bl	10d08 <fputc_unlocked@plt>
   12ddc:	cmp	r6, #9
   12de0:	ldrls	pc, [pc, r6, lsl #2]
   12de4:	b	130c0 <__assert_fail@plt+0x21d8>
   12de8:	andeq	r2, r1, r0, lsl #30
   12dec:	andeq	r2, r1, r8, lsr #28
   12df0:	andeq	r2, r1, r4, asr lr
   12df4:	andeq	r2, r1, r8, lsl #29
   12df8:	andeq	r2, r1, r4, asr #29
   12dfc:	andeq	r2, r1, r8, lsl #30
   12e00:	andeq	r2, r1, r0, asr pc
   12e04:	andeq	r2, r1, r0, lsr #31
   12e08:	strdeq	r2, [r1], -r8
   12e0c:	andeq	r3, r1, r8, asr r0
   12e10:	str	r3, [sp]
   12e14:	mov	r1, #1
   12e18:	mov	r3, r2
   12e1c:	ldr	r2, [pc, #704]	; 130e4 <__assert_fail@plt+0x21fc>
   12e20:	bl	10e64 <__fprintf_chk@plt>
   12e24:	b	12d74 <__assert_fail@plt+0x1e8c>
   12e28:	mov	r2, #5
   12e2c:	ldr	r1, [pc, #692]	; 130e8 <__assert_fail@plt+0x2200>
   12e30:	mov	r0, #0
   12e34:	bl	10d14 <dcgettext@plt>
   12e38:	ldr	r3, [r4]
   12e3c:	mov	r1, #1
   12e40:	mov	r2, r0
   12e44:	mov	r0, r5
   12e48:	add	sp, sp, #32
   12e4c:	pop	{r4, r5, r6, lr}
   12e50:	b	10e64 <__fprintf_chk@plt>
   12e54:	mov	r2, #5
   12e58:	ldr	r1, [pc, #652]	; 130ec <__assert_fail@plt+0x2204>
   12e5c:	mov	r0, #0
   12e60:	bl	10d14 <dcgettext@plt>
   12e64:	ldr	r3, [r4, #4]
   12e68:	mov	r1, #1
   12e6c:	str	r3, [sp, #48]	; 0x30
   12e70:	ldr	r3, [r4]
   12e74:	mov	r2, r0
   12e78:	mov	r0, r5
   12e7c:	add	sp, sp, #32
   12e80:	pop	{r4, r5, r6, lr}
   12e84:	b	10e64 <__fprintf_chk@plt>
   12e88:	mov	r2, #5
   12e8c:	ldr	r1, [pc, #604]	; 130f0 <__assert_fail@plt+0x2208>
   12e90:	mov	r0, #0
   12e94:	bl	10d14 <dcgettext@plt>
   12e98:	ldr	r3, [r4, #8]
   12e9c:	mov	r1, #1
   12ea0:	str	r3, [sp, #52]	; 0x34
   12ea4:	ldr	r3, [r4, #4]
   12ea8:	str	r3, [sp, #48]	; 0x30
   12eac:	ldr	r3, [r4]
   12eb0:	mov	r2, r0
   12eb4:	mov	r0, r5
   12eb8:	add	sp, sp, #32
   12ebc:	pop	{r4, r5, r6, lr}
   12ec0:	b	10e64 <__fprintf_chk@plt>
   12ec4:	mov	r2, #5
   12ec8:	ldr	r1, [pc, #548]	; 130f4 <__assert_fail@plt+0x220c>
   12ecc:	mov	r0, #0
   12ed0:	bl	10d14 <dcgettext@plt>
   12ed4:	ldr	r3, [r4, #12]
   12ed8:	mov	r1, #1
   12edc:	str	r3, [sp, #8]
   12ee0:	ldr	r3, [r4, #8]
   12ee4:	str	r3, [sp, #4]
   12ee8:	ldr	r3, [r4, #4]
   12eec:	str	r3, [sp]
   12ef0:	ldr	r3, [r4]
   12ef4:	mov	r2, r0
   12ef8:	mov	r0, r5
   12efc:	bl	10e64 <__fprintf_chk@plt>
   12f00:	add	sp, sp, #32
   12f04:	pop	{r4, r5, r6, pc}
   12f08:	mov	r2, #5
   12f0c:	ldr	r1, [pc, #484]	; 130f8 <__assert_fail@plt+0x2210>
   12f10:	mov	r0, #0
   12f14:	bl	10d14 <dcgettext@plt>
   12f18:	ldr	r3, [r4, #16]
   12f1c:	mov	r1, #1
   12f20:	str	r3, [sp, #12]
   12f24:	ldr	r3, [r4, #12]
   12f28:	str	r3, [sp, #8]
   12f2c:	ldr	r3, [r4, #8]
   12f30:	str	r3, [sp, #4]
   12f34:	ldr	r3, [r4, #4]
   12f38:	str	r3, [sp]
   12f3c:	ldr	r3, [r4]
   12f40:	mov	r2, r0
   12f44:	mov	r0, r5
   12f48:	bl	10e64 <__fprintf_chk@plt>
   12f4c:	b	12f00 <__assert_fail@plt+0x2018>
   12f50:	mov	r2, #5
   12f54:	ldr	r1, [pc, #416]	; 130fc <__assert_fail@plt+0x2214>
   12f58:	mov	r0, #0
   12f5c:	bl	10d14 <dcgettext@plt>
   12f60:	ldr	r3, [r4, #20]
   12f64:	mov	r1, #1
   12f68:	str	r3, [sp, #16]
   12f6c:	ldr	r3, [r4, #16]
   12f70:	str	r3, [sp, #12]
   12f74:	ldr	r3, [r4, #12]
   12f78:	str	r3, [sp, #8]
   12f7c:	ldr	r3, [r4, #8]
   12f80:	str	r3, [sp, #4]
   12f84:	ldr	r3, [r4, #4]
   12f88:	str	r3, [sp]
   12f8c:	ldr	r3, [r4]
   12f90:	mov	r2, r0
   12f94:	mov	r0, r5
   12f98:	bl	10e64 <__fprintf_chk@plt>
   12f9c:	b	12f00 <__assert_fail@plt+0x2018>
   12fa0:	mov	r2, #5
   12fa4:	ldr	r1, [pc, #340]	; 13100 <__assert_fail@plt+0x2218>
   12fa8:	mov	r0, #0
   12fac:	bl	10d14 <dcgettext@plt>
   12fb0:	ldr	r3, [r4, #24]
   12fb4:	mov	r1, #1
   12fb8:	str	r3, [sp, #20]
   12fbc:	ldr	r3, [r4, #20]
   12fc0:	str	r3, [sp, #16]
   12fc4:	ldr	r3, [r4, #16]
   12fc8:	str	r3, [sp, #12]
   12fcc:	ldr	r3, [r4, #12]
   12fd0:	str	r3, [sp, #8]
   12fd4:	ldr	r3, [r4, #8]
   12fd8:	str	r3, [sp, #4]
   12fdc:	ldr	r3, [r4, #4]
   12fe0:	str	r3, [sp]
   12fe4:	ldr	r3, [r4]
   12fe8:	mov	r2, r0
   12fec:	mov	r0, r5
   12ff0:	bl	10e64 <__fprintf_chk@plt>
   12ff4:	b	12f00 <__assert_fail@plt+0x2018>
   12ff8:	mov	r2, #5
   12ffc:	ldr	r1, [pc, #256]	; 13104 <__assert_fail@plt+0x221c>
   13000:	mov	r0, #0
   13004:	bl	10d14 <dcgettext@plt>
   13008:	ldr	r3, [r4, #28]
   1300c:	mov	r1, #1
   13010:	str	r3, [sp, #24]
   13014:	ldr	r3, [r4, #24]
   13018:	str	r3, [sp, #20]
   1301c:	ldr	r3, [r4, #20]
   13020:	str	r3, [sp, #16]
   13024:	ldr	r3, [r4, #16]
   13028:	str	r3, [sp, #12]
   1302c:	ldr	r3, [r4, #12]
   13030:	str	r3, [sp, #8]
   13034:	ldr	r3, [r4, #8]
   13038:	str	r3, [sp, #4]
   1303c:	ldr	r3, [r4, #4]
   13040:	str	r3, [sp]
   13044:	ldr	r3, [r4]
   13048:	mov	r2, r0
   1304c:	mov	r0, r5
   13050:	bl	10e64 <__fprintf_chk@plt>
   13054:	b	12f00 <__assert_fail@plt+0x2018>
   13058:	ldr	r1, [pc, #168]	; 13108 <__assert_fail@plt+0x2220>
   1305c:	mov	r2, #5
   13060:	mov	r0, #0
   13064:	bl	10d14 <dcgettext@plt>
   13068:	ldr	r3, [r4, #32]
   1306c:	mov	r1, #1
   13070:	str	r3, [sp, #28]
   13074:	ldr	r3, [r4, #28]
   13078:	str	r3, [sp, #24]
   1307c:	ldr	r3, [r4, #24]
   13080:	str	r3, [sp, #20]
   13084:	ldr	r3, [r4, #20]
   13088:	str	r3, [sp, #16]
   1308c:	ldr	r3, [r4, #16]
   13090:	str	r3, [sp, #12]
   13094:	ldr	r3, [r4, #12]
   13098:	str	r3, [sp, #8]
   1309c:	ldr	r3, [r4, #8]
   130a0:	str	r3, [sp, #4]
   130a4:	ldr	r3, [r4, #4]
   130a8:	str	r3, [sp]
   130ac:	ldr	r3, [r4]
   130b0:	mov	r2, r0
   130b4:	mov	r0, r5
   130b8:	bl	10e64 <__fprintf_chk@plt>
   130bc:	b	12f00 <__assert_fail@plt+0x2018>
   130c0:	mov	r2, #5
   130c4:	ldr	r1, [pc, #64]	; 1310c <__assert_fail@plt+0x2224>
   130c8:	b	13060 <__assert_fail@plt+0x2178>
   130cc:	muleq	r1, r5, ip
   130d0:	andeq	r4, r1, r8, lsr #25
   130d4:	andeq	r0, r0, r6, ror #15
   130d8:	andeq	r4, r1, r6, ror pc
   130dc:	andeq	r4, r1, ip, lsr #25
   130e0:	andeq	r4, r1, r7, asr sp
   130e4:	andeq	r4, r1, r1, lsr #25
   130e8:	andeq	r4, r1, r9, ror sp
   130ec:	andeq	r4, r1, r9, lsl #27
   130f0:	andeq	r4, r1, r0, lsr #27
   130f4:			; <UNDEFINED> instruction: 0x00014dbc
   130f8:	ldrdeq	r4, [r1], -ip
   130fc:	andeq	r4, r1, r0, lsl #28
   13100:	andeq	r4, r1, r8, lsr #28
   13104:	andeq	r4, r1, r4, asr lr
   13108:	andeq	r4, r1, r4, lsl #29
   1310c:			; <UNDEFINED> instruction: 0x00014eb8
   13110:	push	{r0, r1, r4, lr}
   13114:	mov	ip, #0
   13118:	ldr	lr, [sp, #16]
   1311c:	ldr	r4, [lr, ip, lsl #2]
   13120:	cmp	r4, #0
   13124:	bne	1313c <__assert_fail@plt+0x2254>
   13128:	str	ip, [sp, #4]
   1312c:	str	lr, [sp]
   13130:	bl	12d44 <__assert_fail@plt+0x1e5c>
   13134:	add	sp, sp, #8
   13138:	pop	{r4, pc}
   1313c:	add	ip, ip, #1
   13140:	b	1311c <__assert_fail@plt+0x2234>
   13144:	push	{r4, r5, lr}
   13148:	sub	sp, sp, #52	; 0x34
   1314c:	mov	ip, #0
   13150:	ldr	r5, [sp, #64]	; 0x40
   13154:	add	lr, sp, #8
   13158:	ldr	r4, [r5, ip, lsl #2]
   1315c:	cmp	r4, #0
   13160:	str	r4, [lr, ip, lsl #2]
   13164:	beq	13174 <__assert_fail@plt+0x228c>
   13168:	add	ip, ip, #1
   1316c:	cmp	ip, #10
   13170:	bne	13158 <__assert_fail@plt+0x2270>
   13174:	str	ip, [sp, #4]
   13178:	str	lr, [sp]
   1317c:	bl	12d44 <__assert_fail@plt+0x1e5c>
   13180:	add	sp, sp, #52	; 0x34
   13184:	pop	{r4, r5, pc}
   13188:	push	{r3}		; (str r3, [sp, #-4]!)
   1318c:	push	{r0, r1, r2, r3, lr}
   13190:	add	r3, sp, #24
   13194:	str	r3, [sp, #12]
   13198:	str	r3, [sp]
   1319c:	ldr	r3, [sp, #20]
   131a0:	bl	13144 <__assert_fail@plt+0x225c>
   131a4:	add	sp, sp, #16
   131a8:	pop	{lr}		; (ldr lr, [sp], #4)
   131ac:	add	sp, sp, #4
   131b0:	bx	lr
   131b4:	ldr	r3, [pc, #116]	; 13230 <__assert_fail@plt+0x2348>
   131b8:	push	{r4, lr}
   131bc:	mov	r0, #10
   131c0:	ldr	r1, [r3]
   131c4:	bl	10d08 <fputc_unlocked@plt>
   131c8:	mov	r2, #5
   131cc:	ldr	r1, [pc, #96]	; 13234 <__assert_fail@plt+0x234c>
   131d0:	mov	r0, #0
   131d4:	bl	10d14 <dcgettext@plt>
   131d8:	ldr	r2, [pc, #88]	; 13238 <__assert_fail@plt+0x2350>
   131dc:	mov	r1, r0
   131e0:	mov	r0, #1
   131e4:	bl	10e40 <__printf_chk@plt>
   131e8:	mov	r2, #5
   131ec:	ldr	r1, [pc, #72]	; 1323c <__assert_fail@plt+0x2354>
   131f0:	mov	r0, #0
   131f4:	bl	10d14 <dcgettext@plt>
   131f8:	ldr	r3, [pc, #64]	; 13240 <__assert_fail@plt+0x2358>
   131fc:	ldr	r2, [pc, #64]	; 13244 <__assert_fail@plt+0x235c>
   13200:	mov	r1, r0
   13204:	mov	r0, #1
   13208:	bl	10e40 <__printf_chk@plt>
   1320c:	mov	r2, #5
   13210:	ldr	r1, [pc, #48]	; 13248 <__assert_fail@plt+0x2360>
   13214:	mov	r0, #0
   13218:	bl	10d14 <dcgettext@plt>
   1321c:	ldr	r2, [pc, #40]	; 1324c <__assert_fail@plt+0x2364>
   13220:	pop	{r4, lr}
   13224:	mov	r1, r0
   13228:	mov	r0, #1
   1322c:	b	10e40 <__printf_chk@plt>
   13230:	andeq	r6, r2, r4, asr #2
   13234:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13238:	andeq	r4, r1, r8, lsl #30
   1323c:	andeq	r4, r1, lr, lsl pc
   13240:	andeq	r4, r1, r3, asr #19
   13244:	andeq	r4, r1, fp, ror #19
   13248:	andeq	r4, r1, r2, lsr pc
   1324c:	andeq	r4, r1, r9, asr pc
   13250:	push	{r4, lr}
   13254:	bl	13ca4 <__assert_fail@plt+0x2dbc>
   13258:	cmp	r0, #0
   1325c:	popne	{r4, pc}
   13260:	bl	136e4 <__assert_fail@plt+0x27fc>
   13264:	push	{r4, lr}
   13268:	bl	13ca4 <__assert_fail@plt+0x2dbc>
   1326c:	cmp	r0, #0
   13270:	popne	{r4, pc}
   13274:	bl	136e4 <__assert_fail@plt+0x27fc>
   13278:	b	13250 <__assert_fail@plt+0x2368>
   1327c:	push	{r4, r5, r6, lr}
   13280:	mov	r5, r0
   13284:	mov	r4, r1
   13288:	bl	13ce4 <__assert_fail@plt+0x2dfc>
   1328c:	cmp	r0, #0
   13290:	popne	{r4, r5, r6, pc}
   13294:	adds	r4, r4, #0
   13298:	movne	r4, #1
   1329c:	cmp	r5, #0
   132a0:	orreq	r4, r4, #1
   132a4:	cmp	r4, #0
   132a8:	popeq	{r4, r5, r6, pc}
   132ac:	bl	136e4 <__assert_fail@plt+0x27fc>
   132b0:	push	{r4, lr}
   132b4:	cmp	r1, #0
   132b8:	orreq	r1, r1, #1
   132bc:	bl	13ce4 <__assert_fail@plt+0x2dfc>
   132c0:	cmp	r0, #0
   132c4:	popne	{r4, pc}
   132c8:	bl	136e4 <__assert_fail@plt+0x27fc>
   132cc:	push	{r4, r5, r6, lr}
   132d0:	mov	r6, r0
   132d4:	mov	r5, r1
   132d8:	mov	r4, r2
   132dc:	bl	14014 <__assert_fail@plt+0x312c>
   132e0:	cmp	r0, #0
   132e4:	popne	{r4, r5, r6, pc}
   132e8:	cmp	r6, #0
   132ec:	beq	132fc <__assert_fail@plt+0x2414>
   132f0:	cmp	r5, #0
   132f4:	cmpne	r4, #0
   132f8:	popeq	{r4, r5, r6, pc}
   132fc:	bl	136e4 <__assert_fail@plt+0x27fc>
   13300:	b	132cc <__assert_fail@plt+0x23e4>
   13304:	cmp	r2, #0
   13308:	cmpne	r1, #0
   1330c:	moveq	r2, #1
   13310:	moveq	r1, r2
   13314:	push	{r4, lr}
   13318:	bl	14014 <__assert_fail@plt+0x312c>
   1331c:	cmp	r0, #0
   13320:	popne	{r4, pc}
   13324:	bl	136e4 <__assert_fail@plt+0x27fc>
   13328:	mov	r2, r1
   1332c:	mov	r1, r0
   13330:	mov	r0, #0
   13334:	b	132cc <__assert_fail@plt+0x23e4>
   13338:	mov	r2, r1
   1333c:	mov	r1, r0
   13340:	mov	r0, #0
   13344:	b	13304 <__assert_fail@plt+0x241c>
   13348:	push	{r4, r5, r6, r7, r8, lr}
   1334c:	subs	r7, r0, #0
   13350:	mov	r5, r1
   13354:	mov	r6, r2
   13358:	ldr	r4, [r1]
   1335c:	bne	13398 <__assert_fail@plt+0x24b0>
   13360:	cmp	r4, #0
   13364:	bne	13380 <__assert_fail@plt+0x2498>
   13368:	mov	r1, r2
   1336c:	mov	r0, #64	; 0x40
   13370:	bl	14140 <__assert_fail@plt+0x3258>
   13374:	cmp	r0, #0
   13378:	movne	r4, r0
   1337c:	addeq	r4, r0, #1
   13380:	mov	r2, r6
   13384:	mov	r1, r4
   13388:	mov	r0, r7
   1338c:	bl	132cc <__assert_fail@plt+0x23e4>
   13390:	str	r4, [r5]
   13394:	pop	{r4, r5, r6, r7, r8, pc}
   13398:	lsr	r2, r4, #1
   1339c:	add	r3, r2, #1
   133a0:	mvn	r3, r3
   133a4:	cmp	r4, r3
   133a8:	addls	r4, r4, #1
   133ac:	addls	r4, r4, r2
   133b0:	bls	13380 <__assert_fail@plt+0x2498>
   133b4:	bl	136e4 <__assert_fail@plt+0x27fc>
   133b8:	mov	r2, #1
   133bc:	b	13348 <__assert_fail@plt+0x2460>
   133c0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133c4:	mov	sl, r0
   133c8:	ldr	r8, [r1]
   133cc:	mov	fp, r1
   133d0:	mov	r5, r2
   133d4:	asrs	r4, r8, #1
   133d8:	mov	r9, r3
   133dc:	ldr	r7, [sp, #48]	; 0x30
   133e0:	bpl	1347c <__assert_fail@plt+0x2594>
   133e4:	rsb	r2, r4, #-2147483648	; 0x80000000
   133e8:	cmp	r8, r2
   133ec:	movge	r2, #0
   133f0:	movlt	r2, #1
   133f4:	mvn	r3, r9
   133f8:	cmp	r2, #0
   133fc:	lsr	r3, r3, #31
   13400:	addeq	r4, r4, r8
   13404:	mvnne	r4, #-2147483648	; 0x80000000
   13408:	mov	r0, r3
   1340c:	cmp	r9, r4
   13410:	movge	r0, #0
   13414:	andlt	r0, r0, #1
   13418:	cmp	r0, #0
   1341c:	str	r3, [sp, #4]
   13420:	bne	135f0 <__assert_fail@plt+0x2708>
   13424:	cmp	r7, #0
   13428:	bge	1353c <__assert_fail@plt+0x2654>
   1342c:	cmp	r4, #0
   13430:	bge	13494 <__assert_fail@plt+0x25ac>
   13434:	mov	r1, r7
   13438:	mvn	r0, #-2147483648	; 0x80000000
   1343c:	bl	1434c <__assert_fail@plt+0x3464>
   13440:	cmp	r0, r4
   13444:	movle	r0, #0
   13448:	movgt	r0, #1
   1344c:	cmp	r0, #0
   13450:	mvnne	r6, #-2147483648	; 0x80000000
   13454:	beq	134a4 <__assert_fail@plt+0x25bc>
   13458:	mov	r1, r7
   1345c:	mov	r0, r6
   13460:	bl	1434c <__assert_fail@plt+0x3464>
   13464:	mov	r1, r7
   13468:	mov	r4, r0
   1346c:	mov	r0, r6
   13470:	bl	1456c <__assert_fail@plt+0x3684>
   13474:	sub	r1, r6, r1
   13478:	b	134b4 <__assert_fail@plt+0x25cc>
   1347c:	mvn	r2, #-2147483648	; 0x80000000
   13480:	sub	r2, r2, r4
   13484:	cmp	r8, r2
   13488:	movle	r2, #0
   1348c:	movgt	r2, #1
   13490:	b	133f4 <__assert_fail@plt+0x250c>
   13494:	cmn	r7, #1
   13498:	movne	r1, r7
   1349c:	movne	r0, #-2147483648	; 0x80000000
   134a0:	bne	13608 <__assert_fail@plt+0x2720>
   134a4:	mul	r1, r7, r4
   134a8:	cmp	r1, #63	; 0x3f
   134ac:	movle	r6, #64	; 0x40
   134b0:	ble	13458 <__assert_fail@plt+0x2570>
   134b4:	cmp	sl, #0
   134b8:	sub	r2, r4, r8
   134bc:	streq	sl, [fp]
   134c0:	cmp	r2, r5
   134c4:	bge	13598 <__assert_fail@plt+0x26b0>
   134c8:	cmp	r5, #0
   134cc:	bge	13564 <__assert_fail@plt+0x267c>
   134d0:	rsb	r2, r5, #-2147483648	; 0x80000000
   134d4:	cmp	r8, r2
   134d8:	movge	r2, #0
   134dc:	movlt	r2, #1
   134e0:	cmp	r2, #0
   134e4:	bne	13538 <__assert_fail@plt+0x2650>
   134e8:	ldr	r0, [sp, #4]
   134ec:	add	r5, r8, r5
   134f0:	cmp	r9, r5
   134f4:	movge	r0, #0
   134f8:	andlt	r0, r0, #1
   134fc:	cmp	r0, #0
   13500:	mov	r4, r5
   13504:	bne	13538 <__assert_fail@plt+0x2650>
   13508:	cmp	r7, #0
   1350c:	bge	135ac <__assert_fail@plt+0x26c4>
   13510:	cmp	r5, #0
   13514:	bge	13584 <__assert_fail@plt+0x269c>
   13518:	mov	r1, r7
   1351c:	mvn	r0, #-2147483648	; 0x80000000
   13520:	bl	1434c <__assert_fail@plt+0x3464>
   13524:	cmp	r5, r0
   13528:	movge	r0, #0
   1352c:	movlt	r0, #1
   13530:	cmp	r0, #0
   13534:	beq	13594 <__assert_fail@plt+0x26ac>
   13538:	bl	136e4 <__assert_fail@plt+0x27fc>
   1353c:	beq	134a4 <__assert_fail@plt+0x25bc>
   13540:	cmp	r4, #0
   13544:	bge	13600 <__assert_fail@plt+0x2718>
   13548:	cmn	r4, #1
   1354c:	beq	134a4 <__assert_fail@plt+0x25bc>
   13550:	mov	r1, r4
   13554:	mov	r0, #-2147483648	; 0x80000000
   13558:	bl	1434c <__assert_fail@plt+0x3464>
   1355c:	cmp	r7, r0
   13560:	b	13444 <__assert_fail@plt+0x255c>
   13564:	cmp	r8, #0
   13568:	blt	134e8 <__assert_fail@plt+0x2600>
   1356c:	mvn	r2, #-2147483648	; 0x80000000
   13570:	sub	r2, r2, r5
   13574:	cmp	r8, r2
   13578:	movle	r2, #0
   1357c:	movgt	r2, #1
   13580:	b	134e0 <__assert_fail@plt+0x25f8>
   13584:	cmn	r7, #1
   13588:	movne	r1, r7
   1358c:	movne	r0, #-2147483648	; 0x80000000
   13590:	bne	135e4 <__assert_fail@plt+0x26fc>
   13594:	mul	r1, r5, r7
   13598:	mov	r0, sl
   1359c:	bl	1327c <__assert_fail@plt+0x2394>
   135a0:	str	r4, [fp]
   135a4:	add	sp, sp, #12
   135a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135ac:	beq	13594 <__assert_fail@plt+0x26ac>
   135b0:	cmp	r5, #0
   135b4:	movge	r1, r7
   135b8:	mvnge	r0, #-2147483648	; 0x80000000
   135bc:	bge	135e4 <__assert_fail@plt+0x26fc>
   135c0:	cmn	r5, #1
   135c4:	beq	13594 <__assert_fail@plt+0x26ac>
   135c8:	mov	r1, r5
   135cc:	mov	r0, #-2147483648	; 0x80000000
   135d0:	bl	1434c <__assert_fail@plt+0x3464>
   135d4:	cmp	r7, r0
   135d8:	movle	r0, #0
   135dc:	movgt	r0, #1
   135e0:	b	13530 <__assert_fail@plt+0x2648>
   135e4:	bl	1434c <__assert_fail@plt+0x3464>
   135e8:	cmp	r5, r0
   135ec:	b	135d8 <__assert_fail@plt+0x26f0>
   135f0:	cmp	r7, #0
   135f4:	mov	r4, r9
   135f8:	blt	13494 <__assert_fail@plt+0x25ac>
   135fc:	beq	134a4 <__assert_fail@plt+0x25bc>
   13600:	mov	r1, r7
   13604:	mvn	r0, #-2147483648	; 0x80000000
   13608:	bl	1434c <__assert_fail@plt+0x3464>
   1360c:	cmp	r0, r4
   13610:	movge	r0, #0
   13614:	movlt	r0, #1
   13618:	b	1344c <__assert_fail@plt+0x2564>
   1361c:	push	{r4, lr}
   13620:	bl	13c5c <__assert_fail@plt+0x2d74>
   13624:	cmp	r0, #0
   13628:	popne	{r4, pc}
   1362c:	bl	136e4 <__assert_fail@plt+0x27fc>
   13630:	mov	r1, #1
   13634:	b	1361c <__assert_fail@plt+0x2734>
   13638:	push	{r4, lr}
   1363c:	bl	13c5c <__assert_fail@plt+0x2d74>
   13640:	cmp	r0, #0
   13644:	popne	{r4, pc}
   13648:	bl	136e4 <__assert_fail@plt+0x27fc>
   1364c:	mov	r1, #1
   13650:	b	13638 <__assert_fail@plt+0x2750>
   13654:	push	{r4, r5, r6, lr}
   13658:	mov	r4, r1
   1365c:	mov	r5, r0
   13660:	mov	r0, r1
   13664:	bl	13250 <__assert_fail@plt+0x2368>
   13668:	mov	r2, r4
   1366c:	mov	r1, r5
   13670:	pop	{r4, r5, r6, lr}
   13674:	b	10cd8 <memcpy@plt>
   13678:	push	{r4, r5, r6, lr}
   1367c:	mov	r4, r1
   13680:	mov	r5, r0
   13684:	mov	r0, r1
   13688:	bl	13264 <__assert_fail@plt+0x237c>
   1368c:	mov	r2, r4
   13690:	mov	r1, r5
   13694:	pop	{r4, r5, r6, lr}
   13698:	b	10cd8 <memcpy@plt>
   1369c:	push	{r4, r5, r6, lr}
   136a0:	mov	r5, r0
   136a4:	add	r0, r1, #1
   136a8:	mov	r4, r1
   136ac:	bl	13264 <__assert_fail@plt+0x237c>
   136b0:	mov	r2, #0
   136b4:	mov	r1, r5
   136b8:	strb	r2, [r0, r4]
   136bc:	mov	r2, r4
   136c0:	pop	{r4, r5, r6, lr}
   136c4:	b	10cd8 <memcpy@plt>
   136c8:	push	{r4, lr}
   136cc:	mov	r4, r0
   136d0:	bl	10e04 <strlen@plt>
   136d4:	add	r1, r0, #1
   136d8:	mov	r0, r4
   136dc:	pop	{r4, lr}
   136e0:	b	13654 <__assert_fail@plt+0x276c>
   136e4:	ldr	r3, [pc, #44]	; 13718 <__assert_fail@plt+0x2830>
   136e8:	push	{r4, lr}
   136ec:	mov	r2, #5
   136f0:	ldr	r1, [pc, #36]	; 1371c <__assert_fail@plt+0x2834>
   136f4:	mov	r0, #0
   136f8:	ldr	r4, [r3]
   136fc:	bl	10d14 <dcgettext@plt>
   13700:	ldr	r2, [pc, #24]	; 13720 <__assert_fail@plt+0x2838>
   13704:	mov	r1, #0
   13708:	mov	r3, r0
   1370c:	mov	r0, r4
   13710:	bl	10d8c <error@plt>
   13714:	bl	10edc <abort@plt>
   13718:	andeq	r6, r2, ip, ror #1
   1371c:	andeq	r4, r1, r5, lsr #31
   13720:	andeq	r4, r1, r7, ror fp
   13724:	push	{r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
   13728:	mov	r9, r3
   1372c:	ldr	r3, [sp, #48]	; 0x30
   13730:	mov	r8, r2
   13734:	str	r3, [sp]
   13738:	mov	r2, r1
   1373c:	add	r3, sp, #8
   13740:	mov	r1, #0
   13744:	mov	r6, r0
   13748:	ldr	r4, [sp, #56]	; 0x38
   1374c:	bl	13930 <__assert_fail@plt+0x2a48>
   13750:	cmp	r0, #0
   13754:	bne	137c8 <__assert_fail@plt+0x28e0>
   13758:	ldrd	r0, [sp, #8]
   1375c:	ldrd	r2, [sp, #40]	; 0x28
   13760:	cmp	r1, r9
   13764:	cmpeq	r0, r8
   13768:	movcc	ip, #1
   1376c:	movcs	ip, #0
   13770:	cmp	r1, r3
   13774:	cmpeq	r0, r2
   13778:	movls	r3, ip
   1377c:	orrhi	r3, ip, #1
   13780:	cmp	r3, #0
   13784:	beq	13844 <__assert_fail@plt+0x295c>
   13788:	mov	r3, #0
   1378c:	mvn	r2, #-1073741824	; 0xc0000000
   13790:	cmp	r1, r3
   13794:	cmpeq	r0, r2
   13798:	bls	137bc <__assert_fail@plt+0x28d4>
   1379c:	bl	10e1c <__errno_location@plt>
   137a0:	mov	r3, #75	; 0x4b
   137a4:	cmp	r4, #0
   137a8:	str	r3, [r0]
   137ac:	beq	13810 <__assert_fail@plt+0x2928>
   137b0:	bl	10e1c <__errno_location@plt>
   137b4:	ldr	r5, [r0]
   137b8:	b	13824 <__assert_fail@plt+0x293c>
   137bc:	bl	10e1c <__errno_location@plt>
   137c0:	mov	r3, #34	; 0x22
   137c4:	b	137a4 <__assert_fail@plt+0x28bc>
   137c8:	cmp	r0, #1
   137cc:	bne	137f4 <__assert_fail@plt+0x290c>
   137d0:	bl	10e1c <__errno_location@plt>
   137d4:	mov	r3, #75	; 0x4b
   137d8:	cmp	r4, #0
   137dc:	str	r3, [r0]
   137e0:	bne	13814 <__assert_fail@plt+0x292c>
   137e4:	bl	10e1c <__errno_location@plt>
   137e8:	mov	r4, #1
   137ec:	ldr	r5, [r0]
   137f0:	b	13824 <__assert_fail@plt+0x293c>
   137f4:	cmp	r0, #3
   137f8:	bne	13808 <__assert_fail@plt+0x2920>
   137fc:	bl	10e1c <__errno_location@plt>
   13800:	mov	r3, #0
   13804:	b	137d8 <__assert_fail@plt+0x28f0>
   13808:	cmp	r4, #0
   1380c:	bne	13814 <__assert_fail@plt+0x292c>
   13810:	mov	r4, #1
   13814:	bl	10e1c <__errno_location@plt>
   13818:	ldr	r5, [r0]
   1381c:	cmp	r5, #22
   13820:	moveq	r5, #0
   13824:	mov	r0, r6
   13828:	bl	12d38 <__assert_fail@plt+0x1e50>
   1382c:	ldr	r3, [sp, #52]	; 0x34
   13830:	ldr	r2, [pc, #20]	; 1384c <__assert_fail@plt+0x2964>
   13834:	mov	r1, r5
   13838:	str	r0, [sp]
   1383c:	mov	r0, r4
   13840:	bl	10d8c <error@plt>
   13844:	add	sp, sp, #16
   13848:	pop	{r4, r5, r6, r8, r9, pc}
   1384c:	andeq	r4, r1, r3, ror fp
   13850:	push	{r4, r5}
   13854:	mov	r1, #10
   13858:	pop	{r4, r5}
   1385c:	b	13724 <__assert_fail@plt+0x283c>
   13860:	push	{r4, r5, r6, lr}
   13864:	subs	r5, r1, #0
   13868:	mov	r4, r0
   1386c:	bge	138ac <__assert_fail@plt+0x29c4>
   13870:	ldm	r0, {r0, r3}
   13874:	orr	r0, r0, r3
   13878:	adds	r0, r0, #0
   1387c:	movne	r0, #1
   13880:	cmp	r0, #0
   13884:	bne	138e0 <__assert_fail@plt+0x29f8>
   13888:	ldr	r2, [r4]
   1388c:	asr	r3, r5, #31
   13890:	ldr	r1, [r4, #4]
   13894:	mul	r3, r3, r2
   13898:	mla	r1, r5, r1, r3
   1389c:	umull	r2, r3, r2, r5
   138a0:	add	r3, r1, r3
   138a4:	strd	r2, [r4]
   138a8:	pop	{r4, r5, r6, pc}
   138ac:	moveq	r0, r5
   138b0:	beq	13880 <__assert_fail@plt+0x2998>
   138b4:	mov	r2, r5
   138b8:	asr	r3, r5, #31
   138bc:	mvn	r0, #0
   138c0:	mvn	r1, #0
   138c4:	bl	1458c <__assert_fail@plt+0x36a4>
   138c8:	ldrd	r2, [r4]
   138cc:	cmp	r1, r3
   138d0:	cmpeq	r0, r2
   138d4:	movcc	r0, #1
   138d8:	movcs	r0, #0
   138dc:	b	13880 <__assert_fail@plt+0x2998>
   138e0:	mvn	r2, #0
   138e4:	mvn	r3, #0
   138e8:	mov	r0, #1
   138ec:	strd	r2, [r4]
   138f0:	pop	{r4, r5, r6, pc}
   138f4:	push	{r4, r5, r6, r7, r8, lr}
   138f8:	mov	r6, r0
   138fc:	mov	r7, r1
   13900:	mov	r5, r2
   13904:	mov	r4, #0
   13908:	cmp	r5, #0
   1390c:	bne	13918 <__assert_fail@plt+0x2a30>
   13910:	mov	r0, r4
   13914:	pop	{r4, r5, r6, r7, r8, pc}
   13918:	mov	r1, r7
   1391c:	mov	r0, r6
   13920:	bl	13860 <__assert_fail@plt+0x2978>
   13924:	sub	r5, r5, #1
   13928:	orr	r4, r4, r0
   1392c:	b	13908 <__assert_fail@plt+0x2a20>
   13930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13934:	sub	sp, sp, #20
   13938:	cmp	r2, #36	; 0x24
   1393c:	ldr	r9, [sp, #56]	; 0x38
   13940:	bls	13958 <__assert_fail@plt+0x2a70>
   13944:	ldr	r3, [pc, #772]	; 13c50 <__assert_fail@plt+0x2d68>
   13948:	mov	r2, #85	; 0x55
   1394c:	ldr	r1, [pc, #768]	; 13c54 <__assert_fail@plt+0x2d6c>
   13950:	ldr	r0, [pc, #768]	; 13c58 <__assert_fail@plt+0x2d70>
   13954:	bl	10ee8 <__assert_fail@plt>
   13958:	cmp	r1, #0
   1395c:	mov	r7, r1
   13960:	mov	r4, r0
   13964:	mov	fp, r2
   13968:	mov	r8, r3
   1396c:	addeq	r7, sp, #4
   13970:	bl	10e1c <__errno_location@plt>
   13974:	mov	r3, #0
   13978:	str	r3, [r0]
   1397c:	mov	sl, r0
   13980:	bl	10de0 <__ctype_b_loc@plt>
   13984:	ldrb	r6, [r4]
   13988:	mov	r3, r4
   1398c:	ldr	r1, [r0]
   13990:	lsl	r2, r6, #1
   13994:	ldrh	r5, [r1, r2]
   13998:	ands	r5, r5, #8192	; 0x2000
   1399c:	bne	139b8 <__assert_fail@plt+0x2ad0>
   139a0:	cmp	r6, #45	; 0x2d
   139a4:	bne	139c0 <__assert_fail@plt+0x2ad8>
   139a8:	mov	r5, #4
   139ac:	mov	r0, r5
   139b0:	add	sp, sp, #20
   139b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139b8:	ldrb	r6, [r3, #1]!
   139bc:	b	13990 <__assert_fail@plt+0x2aa8>
   139c0:	mov	r2, fp
   139c4:	mov	r1, r7
   139c8:	mov	r0, r4
   139cc:	bl	10e58 <strtoumax@plt>
   139d0:	ldr	r6, [r7]
   139d4:	cmp	r4, r6
   139d8:	strd	r0, [sp, #8]
   139dc:	bne	13a40 <__assert_fail@plt+0x2b58>
   139e0:	cmp	r9, #0
   139e4:	beq	139a8 <__assert_fail@plt+0x2ac0>
   139e8:	ldrb	r1, [r6]
   139ec:	cmp	r1, #0
   139f0:	beq	139a8 <__assert_fail@plt+0x2ac0>
   139f4:	mov	r0, r9
   139f8:	bl	10e10 <strchr@plt>
   139fc:	cmp	r0, #0
   13a00:	beq	139a8 <__assert_fail@plt+0x2ac0>
   13a04:	mov	r2, #1
   13a08:	mov	r3, #0
   13a0c:	strd	r2, [sp, #8]
   13a10:	ldrb	r4, [r6]
   13a14:	cmp	r4, #0
   13a18:	beq	13b50 <__assert_fail@plt+0x2c68>
   13a1c:	mov	r1, r4
   13a20:	mov	r0, r9
   13a24:	bl	10e10 <strchr@plt>
   13a28:	cmp	r0, #0
   13a2c:	bne	13a68 <__assert_fail@plt+0x2b80>
   13a30:	ldrd	r2, [sp, #8]
   13a34:	orr	r5, r5, #2
   13a38:	strd	r2, [r8]
   13a3c:	b	139ac <__assert_fail@plt+0x2ac4>
   13a40:	ldr	r5, [sl]
   13a44:	cmp	r5, #0
   13a48:	beq	13a58 <__assert_fail@plt+0x2b70>
   13a4c:	cmp	r5, #34	; 0x22
   13a50:	bne	139a8 <__assert_fail@plt+0x2ac0>
   13a54:	mov	r5, #1
   13a58:	cmp	r9, #0
   13a5c:	bne	13a10 <__assert_fail@plt+0x2b28>
   13a60:	strd	r0, [r8]
   13a64:	b	139ac <__assert_fail@plt+0x2ac4>
   13a68:	cmp	r4, #84	; 0x54
   13a6c:	beq	13ac0 <__assert_fail@plt+0x2bd8>
   13a70:	bhi	13aa8 <__assert_fail@plt+0x2bc0>
   13a74:	cmp	r4, #75	; 0x4b
   13a78:	beq	13ac0 <__assert_fail@plt+0x2bd8>
   13a7c:	bhi	13a98 <__assert_fail@plt+0x2bb0>
   13a80:	cmp	r4, #69	; 0x45
   13a84:	beq	13ac0 <__assert_fail@plt+0x2bd8>
   13a88:	cmp	r4, #71	; 0x47
   13a8c:	beq	13ac0 <__assert_fail@plt+0x2bd8>
   13a90:	mov	r6, #1
   13a94:	b	13b84 <__assert_fail@plt+0x2c9c>
   13a98:	cmp	r4, #77	; 0x4d
   13a9c:	beq	13ac0 <__assert_fail@plt+0x2bd8>
   13aa0:	cmp	r4, #80	; 0x50
   13aa4:	b	13a8c <__assert_fail@plt+0x2ba4>
   13aa8:	cmp	r4, #103	; 0x67
   13aac:	beq	13ac0 <__assert_fail@plt+0x2bd8>
   13ab0:	bhi	13b5c <__assert_fail@plt+0x2c74>
   13ab4:	sub	r3, r4, #89	; 0x59
   13ab8:	cmp	r3, #1
   13abc:	bhi	13a90 <__assert_fail@plt+0x2ba8>
   13ac0:	mov	r1, #48	; 0x30
   13ac4:	mov	r0, r9
   13ac8:	bl	10e10 <strchr@plt>
   13acc:	cmp	r0, #0
   13ad0:	beq	13a90 <__assert_fail@plt+0x2ba8>
   13ad4:	ldrb	r3, [r6, #1]
   13ad8:	cmp	r3, #68	; 0x44
   13adc:	beq	13af0 <__assert_fail@plt+0x2c08>
   13ae0:	cmp	r3, #105	; 0x69
   13ae4:	beq	13b74 <__assert_fail@plt+0x2c8c>
   13ae8:	cmp	r3, #66	; 0x42
   13aec:	bne	13a90 <__assert_fail@plt+0x2ba8>
   13af0:	mov	r6, #2
   13af4:	mov	r1, #1000	; 0x3e8
   13af8:	cmp	r4, #89	; 0x59
   13afc:	beq	13c38 <__assert_fail@plt+0x2d50>
   13b00:	bhi	13bac <__assert_fail@plt+0x2cc4>
   13b04:	cmp	r4, #75	; 0x4b
   13b08:	beq	13bec <__assert_fail@plt+0x2d04>
   13b0c:	bhi	13b8c <__assert_fail@plt+0x2ca4>
   13b10:	cmp	r4, #69	; 0x45
   13b14:	beq	13c14 <__assert_fail@plt+0x2d2c>
   13b18:	cmp	r4, #71	; 0x47
   13b1c:	beq	13c20 <__assert_fail@plt+0x2d38>
   13b20:	cmp	r4, #66	; 0x42
   13b24:	moveq	r1, #1024	; 0x400
   13b28:	bne	13a30 <__assert_fail@plt+0x2b48>
   13b2c:	add	r0, sp, #8
   13b30:	bl	13860 <__assert_fail@plt+0x2978>
   13b34:	ldr	r3, [r7]
   13b38:	orr	r5, r5, r0
   13b3c:	add	r2, r3, r6
   13b40:	str	r2, [r7]
   13b44:	ldrb	r3, [r3, r6]
   13b48:	cmp	r3, #0
   13b4c:	orrne	r5, r5, #2
   13b50:	ldrd	r2, [sp, #8]
   13b54:	strd	r2, [r8]
   13b58:	b	139ac <__assert_fail@plt+0x2ac4>
   13b5c:	cmp	r4, #109	; 0x6d
   13b60:	beq	13ac0 <__assert_fail@plt+0x2bd8>
   13b64:	cmp	r4, #116	; 0x74
   13b68:	beq	13ac0 <__assert_fail@plt+0x2bd8>
   13b6c:	cmp	r4, #107	; 0x6b
   13b70:	b	13a8c <__assert_fail@plt+0x2ba4>
   13b74:	ldrb	r6, [r6, #2]
   13b78:	cmp	r6, #66	; 0x42
   13b7c:	movne	r6, #1
   13b80:	moveq	r6, #3
   13b84:	mov	r1, #1024	; 0x400
   13b88:	b	13af8 <__assert_fail@plt+0x2c10>
   13b8c:	cmp	r4, #80	; 0x50
   13b90:	beq	13c28 <__assert_fail@plt+0x2d40>
   13b94:	cmp	r4, #84	; 0x54
   13b98:	beq	13c30 <__assert_fail@plt+0x2d48>
   13b9c:	cmp	r4, #77	; 0x4d
   13ba0:	bne	13a30 <__assert_fail@plt+0x2b48>
   13ba4:	mov	r2, #2
   13ba8:	b	13c18 <__assert_fail@plt+0x2d30>
   13bac:	cmp	r4, #103	; 0x67
   13bb0:	beq	13c20 <__assert_fail@plt+0x2d38>
   13bb4:	bhi	13bd8 <__assert_fail@plt+0x2cf0>
   13bb8:	cmp	r4, #98	; 0x62
   13bbc:	beq	13c0c <__assert_fail@plt+0x2d24>
   13bc0:	cmp	r4, #99	; 0x63
   13bc4:	beq	13c48 <__assert_fail@plt+0x2d60>
   13bc8:	cmp	r4, #90	; 0x5a
   13bcc:	bne	13a30 <__assert_fail@plt+0x2b48>
   13bd0:	mov	r2, #7
   13bd4:	b	13c18 <__assert_fail@plt+0x2d30>
   13bd8:	cmp	r4, #109	; 0x6d
   13bdc:	beq	13ba4 <__assert_fail@plt+0x2cbc>
   13be0:	bhi	13bf4 <__assert_fail@plt+0x2d0c>
   13be4:	cmp	r4, #107	; 0x6b
   13be8:	bne	13a30 <__assert_fail@plt+0x2b48>
   13bec:	mov	r2, #1
   13bf0:	b	13c18 <__assert_fail@plt+0x2d30>
   13bf4:	cmp	r4, #116	; 0x74
   13bf8:	beq	13c30 <__assert_fail@plt+0x2d48>
   13bfc:	cmp	r4, #119	; 0x77
   13c00:	moveq	r1, #2
   13c04:	beq	13b2c <__assert_fail@plt+0x2c44>
   13c08:	b	13a30 <__assert_fail@plt+0x2b48>
   13c0c:	mov	r1, #512	; 0x200
   13c10:	b	13b2c <__assert_fail@plt+0x2c44>
   13c14:	mov	r2, #6
   13c18:	add	r0, sp, #8
   13c1c:	b	13c40 <__assert_fail@plt+0x2d58>
   13c20:	mov	r2, #3
   13c24:	b	13c18 <__assert_fail@plt+0x2d30>
   13c28:	mov	r2, #5
   13c2c:	b	13c18 <__assert_fail@plt+0x2d30>
   13c30:	mov	r2, #4
   13c34:	b	13c18 <__assert_fail@plt+0x2d30>
   13c38:	mov	r2, #8
   13c3c:	add	r0, sp, r2
   13c40:	bl	138f4 <__assert_fail@plt+0x2a0c>
   13c44:	b	13b34 <__assert_fail@plt+0x2c4c>
   13c48:	mov	r0, #0
   13c4c:	b	13b34 <__assert_fail@plt+0x2c4c>
   13c50:			; <UNDEFINED> instruction: 0x00014fb6
   13c54:	andeq	r4, r1, r1, asr #31
   13c58:	andeq	r4, r1, pc, asr #31
   13c5c:	cmp	r1, #0
   13c60:	cmpne	r0, #0
   13c64:	moveq	r1, #1
   13c68:	moveq	r0, r1
   13c6c:	umull	r2, r3, r0, r1
   13c70:	adds	r3, r3, #0
   13c74:	movne	r3, #1
   13c78:	cmp	r2, #0
   13c7c:	blt	13c8c <__assert_fail@plt+0x2da4>
   13c80:	cmp	r3, #0
   13c84:	bne	13c8c <__assert_fail@plt+0x2da4>
   13c88:	b	10c84 <calloc@plt>
   13c8c:	push	{r4, lr}
   13c90:	bl	10e1c <__errno_location@plt>
   13c94:	mov	r3, #12
   13c98:	str	r3, [r0]
   13c9c:	mov	r0, #0
   13ca0:	pop	{r4, pc}
   13ca4:	cmp	r0, #0
   13ca8:	mov	r3, #0
   13cac:	moveq	r0, #1
   13cb0:	adds	r3, r3, #0
   13cb4:	movne	r3, #1
   13cb8:	cmp	r0, #0
   13cbc:	blt	13ccc <__assert_fail@plt+0x2de4>
   13cc0:	cmp	r3, #0
   13cc4:	bne	13ccc <__assert_fail@plt+0x2de4>
   13cc8:	b	10da4 <malloc@plt>
   13ccc:	push	{r4, lr}
   13cd0:	bl	10e1c <__errno_location@plt>
   13cd4:	mov	r3, #12
   13cd8:	str	r3, [r0]
   13cdc:	mov	r0, #0
   13ce0:	pop	{r4, pc}
   13ce4:	cmp	r0, #0
   13ce8:	push	{r4, lr}
   13cec:	mov	r4, r1
   13cf0:	bne	13d00 <__assert_fail@plt+0x2e18>
   13cf4:	mov	r0, r1
   13cf8:	pop	{r4, lr}
   13cfc:	b	13ca4 <__assert_fail@plt+0x2dbc>
   13d00:	cmp	r1, #0
   13d04:	bne	13d14 <__assert_fail@plt+0x2e2c>
   13d08:	bl	13ea8 <__assert_fail@plt+0x2fc0>
   13d0c:	mov	r0, #0
   13d10:	pop	{r4, pc}
   13d14:	cmp	r1, #0
   13d18:	blt	13d28 <__assert_fail@plt+0x2e40>
   13d1c:	mov	r3, #0
   13d20:	cmp	r3, r3
   13d24:	beq	13d38 <__assert_fail@plt+0x2e50>
   13d28:	bl	10e1c <__errno_location@plt>
   13d2c:	mov	r3, #12
   13d30:	str	r3, [r0]
   13d34:	b	13d0c <__assert_fail@plt+0x2e24>
   13d38:	pop	{r4, lr}
   13d3c:	b	10d2c <realloc@plt>
   13d40:	push	{r4, r5, r6, lr}
   13d44:	mov	r4, r0
   13d48:	bl	10d68 <__fpending@plt>
   13d4c:	mov	r5, r0
   13d50:	mov	r0, r4
   13d54:	bl	10d74 <ferror_unlocked@plt>
   13d58:	mov	r6, r0
   13d5c:	mov	r0, r4
   13d60:	bl	13db0 <__assert_fail@plt+0x2ec8>
   13d64:	cmp	r6, #0
   13d68:	mov	r4, r0
   13d6c:	bne	13d98 <__assert_fail@plt+0x2eb0>
   13d70:	cmp	r0, #0
   13d74:	beq	13d90 <__assert_fail@plt+0x2ea8>
   13d78:	cmp	r5, #0
   13d7c:	bne	13da8 <__assert_fail@plt+0x2ec0>
   13d80:	bl	10e1c <__errno_location@plt>
   13d84:	ldr	r4, [r0]
   13d88:	subs	r4, r4, #9
   13d8c:	mvnne	r4, #0
   13d90:	mov	r0, r4
   13d94:	pop	{r4, r5, r6, pc}
   13d98:	cmp	r0, #0
   13d9c:	bne	13da8 <__assert_fail@plt+0x2ec0>
   13da0:	bl	10e1c <__errno_location@plt>
   13da4:	str	r4, [r0]
   13da8:	mvn	r4, #0
   13dac:	b	13d90 <__assert_fail@plt+0x2ea8>
   13db0:	push	{r0, r1, r2, r4, r5, lr}
   13db4:	mov	r4, r0
   13db8:	bl	10e4c <fileno@plt>
   13dbc:	cmp	r0, #0
   13dc0:	mov	r0, r4
   13dc4:	bge	13dd4 <__assert_fail@plt+0x2eec>
   13dc8:	add	sp, sp, #12
   13dcc:	pop	{r4, r5, lr}
   13dd0:	b	10e70 <fclose@plt>
   13dd4:	bl	10dbc <__freading@plt>
   13dd8:	cmp	r0, #0
   13ddc:	bne	13e18 <__assert_fail@plt+0x2f30>
   13de0:	mov	r0, r4
   13de4:	bl	13e58 <__assert_fail@plt+0x2f70>
   13de8:	cmp	r0, #0
   13dec:	bne	13e4c <__assert_fail@plt+0x2f64>
   13df0:	mov	r5, #0
   13df4:	mov	r0, r4
   13df8:	bl	10e70 <fclose@plt>
   13dfc:	cmp	r5, #0
   13e00:	beq	13e10 <__assert_fail@plt+0x2f28>
   13e04:	bl	10e1c <__errno_location@plt>
   13e08:	str	r5, [r0]
   13e0c:	mvn	r0, #0
   13e10:	add	sp, sp, #12
   13e14:	pop	{r4, r5, pc}
   13e18:	mov	r0, r4
   13e1c:	bl	10e4c <fileno@plt>
   13e20:	mov	r3, #1
   13e24:	str	r3, [sp]
   13e28:	mov	r2, #0
   13e2c:	mov	r3, #0
   13e30:	bl	10d50 <lseek64@plt>
   13e34:	mvn	r3, #0
   13e38:	mvn	r2, #0
   13e3c:	cmp	r1, r3
   13e40:	cmpeq	r0, r2
   13e44:	bne	13de0 <__assert_fail@plt+0x2ef8>
   13e48:	b	13df0 <__assert_fail@plt+0x2f08>
   13e4c:	bl	10e1c <__errno_location@plt>
   13e50:	ldr	r5, [r0]
   13e54:	b	13df4 <__assert_fail@plt+0x2f0c>
   13e58:	push	{r0, r1, r4, lr}
   13e5c:	subs	r4, r0, #0
   13e60:	bne	13e74 <__assert_fail@plt+0x2f8c>
   13e64:	mov	r0, r4
   13e68:	add	sp, sp, #8
   13e6c:	pop	{r4, lr}
   13e70:	b	10cb4 <fflush@plt>
   13e74:	bl	10dbc <__freading@plt>
   13e78:	cmp	r0, #0
   13e7c:	beq	13e64 <__assert_fail@plt+0x2f7c>
   13e80:	ldr	r3, [r4]
   13e84:	tst	r3, #256	; 0x100
   13e88:	beq	13e64 <__assert_fail@plt+0x2f7c>
   13e8c:	mov	r3, #1
   13e90:	str	r3, [sp]
   13e94:	mov	r2, #0
   13e98:	mov	r3, #0
   13e9c:	mov	r0, r4
   13ea0:	bl	13efc <__assert_fail@plt+0x3014>
   13ea4:	b	13e64 <__assert_fail@plt+0x2f7c>
   13ea8:	push	{r0, r1, r2, r4, r5, lr}
   13eac:	mov	r5, r0
   13eb0:	bl	10e1c <__errno_location@plt>
   13eb4:	ldr	r3, [r0]
   13eb8:	mov	r4, r0
   13ebc:	str	r3, [sp]
   13ec0:	str	r3, [sp, #4]
   13ec4:	mov	r3, #0
   13ec8:	str	r3, [r0]
   13ecc:	mov	r0, r5
   13ed0:	bl	10cc0 <free@plt>
   13ed4:	ldr	r3, [r4]
   13ed8:	add	r2, sp, #8
   13edc:	cmp	r3, #0
   13ee0:	moveq	r3, #4
   13ee4:	movne	r3, #0
   13ee8:	add	r3, r2, r3
   13eec:	ldr	r3, [r3, #-8]
   13ef0:	str	r3, [r4]
   13ef4:	add	sp, sp, #12
   13ef8:	pop	{r4, r5, pc}
   13efc:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13f00:	mov	r4, r0
   13f04:	ldmib	r0, {ip, lr}
   13f08:	ldr	r8, [sp, #32]
   13f0c:	cmp	lr, ip
   13f10:	bne	13f7c <__assert_fail@plt+0x3094>
   13f14:	ldr	lr, [r0, #20]
   13f18:	ldr	ip, [r0, #16]
   13f1c:	cmp	lr, ip
   13f20:	bne	13f7c <__assert_fail@plt+0x3094>
   13f24:	ldr	r5, [r0, #36]	; 0x24
   13f28:	cmp	r5, #0
   13f2c:	bne	13f7c <__assert_fail@plt+0x3094>
   13f30:	mov	r6, r2
   13f34:	mov	r7, r3
   13f38:	bl	10e4c <fileno@plt>
   13f3c:	mov	r2, r6
   13f40:	mov	r3, r7
   13f44:	str	r8, [sp]
   13f48:	bl	10d50 <lseek64@plt>
   13f4c:	mvn	r3, #0
   13f50:	mvn	r2, #0
   13f54:	cmp	r1, r3
   13f58:	cmpeq	r0, r2
   13f5c:	mvneq	r0, #0
   13f60:	ldrne	r3, [r4]
   13f64:	strdne	r0, [r4, #80]	; 0x50
   13f68:	movne	r0, r5
   13f6c:	bicne	r3, r3, #16
   13f70:	strne	r3, [r4]
   13f74:	add	sp, sp, #8
   13f78:	pop	{r4, r5, r6, r7, r8, pc}
   13f7c:	str	r8, [sp, #32]
   13f80:	mov	r0, r4
   13f84:	add	sp, sp, #8
   13f88:	pop	{r4, r5, r6, r7, r8, lr}
   13f8c:	b	10e7c <fseeko64@plt>
   13f90:	push	{r4, lr}
   13f94:	mov	r0, #14
   13f98:	bl	10ea0 <nl_langinfo@plt>
   13f9c:	ldr	r3, [pc, #24]	; 13fbc <__assert_fail@plt+0x30d4>
   13fa0:	cmp	r0, #0
   13fa4:	moveq	r0, r3
   13fa8:	ldr	r3, [pc, #16]	; 13fc0 <__assert_fail@plt+0x30d8>
   13fac:	ldrb	r2, [r0]
   13fb0:	cmp	r2, #0
   13fb4:	moveq	r0, r3
   13fb8:	pop	{r4, pc}
   13fbc:	ldrdeq	r4, [r1], -r3
   13fc0:	strdeq	r4, [r1], -r5
   13fc4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13fc8:	subs	r5, r0, #0
   13fcc:	addeq	r5, sp, #4
   13fd0:	mov	r0, r5
   13fd4:	mov	r7, r2
   13fd8:	mov	r6, r1
   13fdc:	bl	10d80 <mbrtowc@plt>
   13fe0:	cmp	r7, #0
   13fe4:	cmnne	r0, #3
   13fe8:	mov	r4, r0
   13fec:	bls	14008 <__assert_fail@plt+0x3120>
   13ff0:	mov	r0, #0
   13ff4:	bl	14060 <__assert_fail@plt+0x3178>
   13ff8:	cmp	r0, #0
   13ffc:	moveq	r4, #1
   14000:	ldrbeq	r3, [r6]
   14004:	streq	r3, [r5]
   14008:	mov	r0, r4
   1400c:	add	sp, sp, #12
   14010:	pop	{r4, r5, r6, r7, pc}
   14014:	push	{r4, r5, r6, lr}
   14018:	subs	r4, r2, #0
   1401c:	mov	r6, r0
   14020:	mov	r5, r1
   14024:	beq	1403c <__assert_fail@plt+0x3154>
   14028:	mov	r1, r4
   1402c:	mvn	r0, #0
   14030:	bl	14140 <__assert_fail@plt+0x3258>
   14034:	cmp	r0, r5
   14038:	bcc	1404c <__assert_fail@plt+0x3164>
   1403c:	mul	r1, r5, r4
   14040:	mov	r0, r6
   14044:	pop	{r4, r5, r6, lr}
   14048:	b	13ce4 <__assert_fail@plt+0x2dfc>
   1404c:	bl	10e1c <__errno_location@plt>
   14050:	mov	r3, #12
   14054:	str	r3, [r0]
   14058:	mov	r0, #0
   1405c:	pop	{r4, r5, r6, pc}
   14060:	push	{lr}		; (str lr, [sp, #-4]!)
   14064:	sub	sp, sp, #268	; 0x10c
   14068:	ldr	r2, [pc, #64]	; 140b0 <__assert_fail@plt+0x31c8>
   1406c:	add	r1, sp, #4
   14070:	bl	140bc <__assert_fail@plt+0x31d4>
   14074:	cmp	r0, #0
   14078:	movne	r0, #0
   1407c:	bne	140a8 <__assert_fail@plt+0x31c0>
   14080:	ldr	r1, [pc, #44]	; 140b4 <__assert_fail@plt+0x31cc>
   14084:	add	r0, sp, #4
   14088:	bl	10ca8 <strcmp@plt>
   1408c:	cmp	r0, #0
   14090:	beq	140a8 <__assert_fail@plt+0x31c0>
   14094:	ldr	r1, [pc, #28]	; 140b8 <__assert_fail@plt+0x31d0>
   14098:	add	r0, sp, #4
   1409c:	bl	10ca8 <strcmp@plt>
   140a0:	adds	r0, r0, #0
   140a4:	movne	r0, #1
   140a8:	add	sp, sp, #268	; 0x10c
   140ac:	pop	{pc}		; (ldr pc, [sp], #4)
   140b0:	andeq	r0, r0, r1, lsl #2
   140b4:	strdeq	r4, [r1], -fp
   140b8:	strdeq	r4, [r1], -sp
   140bc:	push	{r4, r5, r6, lr}
   140c0:	mov	r5, r1
   140c4:	mov	r1, #0
   140c8:	mov	r4, r2
   140cc:	bl	10e88 <setlocale@plt>
   140d0:	subs	r6, r0, #0
   140d4:	bne	140e8 <__assert_fail@plt+0x3200>
   140d8:	cmp	r4, #0
   140dc:	strbne	r6, [r5]
   140e0:	mov	r0, #22
   140e4:	pop	{r4, r5, r6, pc}
   140e8:	bl	10e04 <strlen@plt>
   140ec:	cmp	r4, r0
   140f0:	bls	1410c <__assert_fail@plt+0x3224>
   140f4:	add	r2, r0, #1
   140f8:	mov	r1, r6
   140fc:	mov	r0, r5
   14100:	bl	10cd8 <memcpy@plt>
   14104:	mov	r0, #0
   14108:	pop	{r4, r5, r6, pc}
   1410c:	cmp	r4, #0
   14110:	beq	14130 <__assert_fail@plt+0x3248>
   14114:	sub	r4, r4, #1
   14118:	mov	r2, r4
   1411c:	mov	r1, r6
   14120:	mov	r0, r5
   14124:	bl	10cd8 <memcpy@plt>
   14128:	mov	r3, #0
   1412c:	strb	r3, [r5, r4]
   14130:	mov	r0, #34	; 0x22
   14134:	pop	{r4, r5, r6, pc}
   14138:	mov	r1, #0
   1413c:	b	10e88 <setlocale@plt>
   14140:	subs	r2, r1, #1
   14144:	bxeq	lr
   14148:	bcc	14320 <__assert_fail@plt+0x3438>
   1414c:	cmp	r0, r1
   14150:	bls	14304 <__assert_fail@plt+0x341c>
   14154:	tst	r1, r2
   14158:	beq	14310 <__assert_fail@plt+0x3428>
   1415c:	clz	r3, r0
   14160:	clz	r2, r1
   14164:	sub	r3, r2, r3
   14168:	rsbs	r3, r3, #31
   1416c:	addne	r3, r3, r3, lsl #1
   14170:	mov	r2, #0
   14174:	addne	pc, pc, r3, lsl #2
   14178:	nop			; (mov r0, r0)
   1417c:	cmp	r0, r1, lsl #31
   14180:	adc	r2, r2, r2
   14184:	subcs	r0, r0, r1, lsl #31
   14188:	cmp	r0, r1, lsl #30
   1418c:	adc	r2, r2, r2
   14190:	subcs	r0, r0, r1, lsl #30
   14194:	cmp	r0, r1, lsl #29
   14198:	adc	r2, r2, r2
   1419c:	subcs	r0, r0, r1, lsl #29
   141a0:	cmp	r0, r1, lsl #28
   141a4:	adc	r2, r2, r2
   141a8:	subcs	r0, r0, r1, lsl #28
   141ac:	cmp	r0, r1, lsl #27
   141b0:	adc	r2, r2, r2
   141b4:	subcs	r0, r0, r1, lsl #27
   141b8:	cmp	r0, r1, lsl #26
   141bc:	adc	r2, r2, r2
   141c0:	subcs	r0, r0, r1, lsl #26
   141c4:	cmp	r0, r1, lsl #25
   141c8:	adc	r2, r2, r2
   141cc:	subcs	r0, r0, r1, lsl #25
   141d0:	cmp	r0, r1, lsl #24
   141d4:	adc	r2, r2, r2
   141d8:	subcs	r0, r0, r1, lsl #24
   141dc:	cmp	r0, r1, lsl #23
   141e0:	adc	r2, r2, r2
   141e4:	subcs	r0, r0, r1, lsl #23
   141e8:	cmp	r0, r1, lsl #22
   141ec:	adc	r2, r2, r2
   141f0:	subcs	r0, r0, r1, lsl #22
   141f4:	cmp	r0, r1, lsl #21
   141f8:	adc	r2, r2, r2
   141fc:	subcs	r0, r0, r1, lsl #21
   14200:	cmp	r0, r1, lsl #20
   14204:	adc	r2, r2, r2
   14208:	subcs	r0, r0, r1, lsl #20
   1420c:	cmp	r0, r1, lsl #19
   14210:	adc	r2, r2, r2
   14214:	subcs	r0, r0, r1, lsl #19
   14218:	cmp	r0, r1, lsl #18
   1421c:	adc	r2, r2, r2
   14220:	subcs	r0, r0, r1, lsl #18
   14224:	cmp	r0, r1, lsl #17
   14228:	adc	r2, r2, r2
   1422c:	subcs	r0, r0, r1, lsl #17
   14230:	cmp	r0, r1, lsl #16
   14234:	adc	r2, r2, r2
   14238:	subcs	r0, r0, r1, lsl #16
   1423c:	cmp	r0, r1, lsl #15
   14240:	adc	r2, r2, r2
   14244:	subcs	r0, r0, r1, lsl #15
   14248:	cmp	r0, r1, lsl #14
   1424c:	adc	r2, r2, r2
   14250:	subcs	r0, r0, r1, lsl #14
   14254:	cmp	r0, r1, lsl #13
   14258:	adc	r2, r2, r2
   1425c:	subcs	r0, r0, r1, lsl #13
   14260:	cmp	r0, r1, lsl #12
   14264:	adc	r2, r2, r2
   14268:	subcs	r0, r0, r1, lsl #12
   1426c:	cmp	r0, r1, lsl #11
   14270:	adc	r2, r2, r2
   14274:	subcs	r0, r0, r1, lsl #11
   14278:	cmp	r0, r1, lsl #10
   1427c:	adc	r2, r2, r2
   14280:	subcs	r0, r0, r1, lsl #10
   14284:	cmp	r0, r1, lsl #9
   14288:	adc	r2, r2, r2
   1428c:	subcs	r0, r0, r1, lsl #9
   14290:	cmp	r0, r1, lsl #8
   14294:	adc	r2, r2, r2
   14298:	subcs	r0, r0, r1, lsl #8
   1429c:	cmp	r0, r1, lsl #7
   142a0:	adc	r2, r2, r2
   142a4:	subcs	r0, r0, r1, lsl #7
   142a8:	cmp	r0, r1, lsl #6
   142ac:	adc	r2, r2, r2
   142b0:	subcs	r0, r0, r1, lsl #6
   142b4:	cmp	r0, r1, lsl #5
   142b8:	adc	r2, r2, r2
   142bc:	subcs	r0, r0, r1, lsl #5
   142c0:	cmp	r0, r1, lsl #4
   142c4:	adc	r2, r2, r2
   142c8:	subcs	r0, r0, r1, lsl #4
   142cc:	cmp	r0, r1, lsl #3
   142d0:	adc	r2, r2, r2
   142d4:	subcs	r0, r0, r1, lsl #3
   142d8:	cmp	r0, r1, lsl #2
   142dc:	adc	r2, r2, r2
   142e0:	subcs	r0, r0, r1, lsl #2
   142e4:	cmp	r0, r1, lsl #1
   142e8:	adc	r2, r2, r2
   142ec:	subcs	r0, r0, r1, lsl #1
   142f0:	cmp	r0, r1
   142f4:	adc	r2, r2, r2
   142f8:	subcs	r0, r0, r1
   142fc:	mov	r0, r2
   14300:	bx	lr
   14304:	moveq	r0, #1
   14308:	movne	r0, #0
   1430c:	bx	lr
   14310:	clz	r2, r1
   14314:	rsb	r2, r2, #31
   14318:	lsr	r0, r0, r2
   1431c:	bx	lr
   14320:	cmp	r0, #0
   14324:	mvnne	r0, #0
   14328:	b	145c8 <__assert_fail@plt+0x36e0>
   1432c:	cmp	r1, #0
   14330:	beq	14320 <__assert_fail@plt+0x3438>
   14334:	push	{r0, r1, lr}
   14338:	bl	14140 <__assert_fail@plt+0x3258>
   1433c:	pop	{r1, r2, lr}
   14340:	mul	r3, r2, r0
   14344:	sub	r1, r1, r3
   14348:	bx	lr
   1434c:	cmp	r1, #0
   14350:	beq	1455c <__assert_fail@plt+0x3674>
   14354:	eor	ip, r0, r1
   14358:	rsbmi	r1, r1, #0
   1435c:	subs	r2, r1, #1
   14360:	beq	14528 <__assert_fail@plt+0x3640>
   14364:	movs	r3, r0
   14368:	rsbmi	r3, r0, #0
   1436c:	cmp	r3, r1
   14370:	bls	14534 <__assert_fail@plt+0x364c>
   14374:	tst	r1, r2
   14378:	beq	14544 <__assert_fail@plt+0x365c>
   1437c:	clz	r2, r3
   14380:	clz	r0, r1
   14384:	sub	r2, r0, r2
   14388:	rsbs	r2, r2, #31
   1438c:	addne	r2, r2, r2, lsl #1
   14390:	mov	r0, #0
   14394:	addne	pc, pc, r2, lsl #2
   14398:	nop			; (mov r0, r0)
   1439c:	cmp	r3, r1, lsl #31
   143a0:	adc	r0, r0, r0
   143a4:	subcs	r3, r3, r1, lsl #31
   143a8:	cmp	r3, r1, lsl #30
   143ac:	adc	r0, r0, r0
   143b0:	subcs	r3, r3, r1, lsl #30
   143b4:	cmp	r3, r1, lsl #29
   143b8:	adc	r0, r0, r0
   143bc:	subcs	r3, r3, r1, lsl #29
   143c0:	cmp	r3, r1, lsl #28
   143c4:	adc	r0, r0, r0
   143c8:	subcs	r3, r3, r1, lsl #28
   143cc:	cmp	r3, r1, lsl #27
   143d0:	adc	r0, r0, r0
   143d4:	subcs	r3, r3, r1, lsl #27
   143d8:	cmp	r3, r1, lsl #26
   143dc:	adc	r0, r0, r0
   143e0:	subcs	r3, r3, r1, lsl #26
   143e4:	cmp	r3, r1, lsl #25
   143e8:	adc	r0, r0, r0
   143ec:	subcs	r3, r3, r1, lsl #25
   143f0:	cmp	r3, r1, lsl #24
   143f4:	adc	r0, r0, r0
   143f8:	subcs	r3, r3, r1, lsl #24
   143fc:	cmp	r3, r1, lsl #23
   14400:	adc	r0, r0, r0
   14404:	subcs	r3, r3, r1, lsl #23
   14408:	cmp	r3, r1, lsl #22
   1440c:	adc	r0, r0, r0
   14410:	subcs	r3, r3, r1, lsl #22
   14414:	cmp	r3, r1, lsl #21
   14418:	adc	r0, r0, r0
   1441c:	subcs	r3, r3, r1, lsl #21
   14420:	cmp	r3, r1, lsl #20
   14424:	adc	r0, r0, r0
   14428:	subcs	r3, r3, r1, lsl #20
   1442c:	cmp	r3, r1, lsl #19
   14430:	adc	r0, r0, r0
   14434:	subcs	r3, r3, r1, lsl #19
   14438:	cmp	r3, r1, lsl #18
   1443c:	adc	r0, r0, r0
   14440:	subcs	r3, r3, r1, lsl #18
   14444:	cmp	r3, r1, lsl #17
   14448:	adc	r0, r0, r0
   1444c:	subcs	r3, r3, r1, lsl #17
   14450:	cmp	r3, r1, lsl #16
   14454:	adc	r0, r0, r0
   14458:	subcs	r3, r3, r1, lsl #16
   1445c:	cmp	r3, r1, lsl #15
   14460:	adc	r0, r0, r0
   14464:	subcs	r3, r3, r1, lsl #15
   14468:	cmp	r3, r1, lsl #14
   1446c:	adc	r0, r0, r0
   14470:	subcs	r3, r3, r1, lsl #14
   14474:	cmp	r3, r1, lsl #13
   14478:	adc	r0, r0, r0
   1447c:	subcs	r3, r3, r1, lsl #13
   14480:	cmp	r3, r1, lsl #12
   14484:	adc	r0, r0, r0
   14488:	subcs	r3, r3, r1, lsl #12
   1448c:	cmp	r3, r1, lsl #11
   14490:	adc	r0, r0, r0
   14494:	subcs	r3, r3, r1, lsl #11
   14498:	cmp	r3, r1, lsl #10
   1449c:	adc	r0, r0, r0
   144a0:	subcs	r3, r3, r1, lsl #10
   144a4:	cmp	r3, r1, lsl #9
   144a8:	adc	r0, r0, r0
   144ac:	subcs	r3, r3, r1, lsl #9
   144b0:	cmp	r3, r1, lsl #8
   144b4:	adc	r0, r0, r0
   144b8:	subcs	r3, r3, r1, lsl #8
   144bc:	cmp	r3, r1, lsl #7
   144c0:	adc	r0, r0, r0
   144c4:	subcs	r3, r3, r1, lsl #7
   144c8:	cmp	r3, r1, lsl #6
   144cc:	adc	r0, r0, r0
   144d0:	subcs	r3, r3, r1, lsl #6
   144d4:	cmp	r3, r1, lsl #5
   144d8:	adc	r0, r0, r0
   144dc:	subcs	r3, r3, r1, lsl #5
   144e0:	cmp	r3, r1, lsl #4
   144e4:	adc	r0, r0, r0
   144e8:	subcs	r3, r3, r1, lsl #4
   144ec:	cmp	r3, r1, lsl #3
   144f0:	adc	r0, r0, r0
   144f4:	subcs	r3, r3, r1, lsl #3
   144f8:	cmp	r3, r1, lsl #2
   144fc:	adc	r0, r0, r0
   14500:	subcs	r3, r3, r1, lsl #2
   14504:	cmp	r3, r1, lsl #1
   14508:	adc	r0, r0, r0
   1450c:	subcs	r3, r3, r1, lsl #1
   14510:	cmp	r3, r1
   14514:	adc	r0, r0, r0
   14518:	subcs	r3, r3, r1
   1451c:	cmp	ip, #0
   14520:	rsbmi	r0, r0, #0
   14524:	bx	lr
   14528:	teq	ip, r0
   1452c:	rsbmi	r0, r0, #0
   14530:	bx	lr
   14534:	movcc	r0, #0
   14538:	asreq	r0, ip, #31
   1453c:	orreq	r0, r0, #1
   14540:	bx	lr
   14544:	clz	r2, r1
   14548:	rsb	r2, r2, #31
   1454c:	cmp	ip, #0
   14550:	lsr	r0, r3, r2
   14554:	rsbmi	r0, r0, #0
   14558:	bx	lr
   1455c:	cmp	r0, #0
   14560:	mvngt	r0, #-2147483648	; 0x80000000
   14564:	movlt	r0, #-2147483648	; 0x80000000
   14568:	b	145c8 <__assert_fail@plt+0x36e0>
   1456c:	cmp	r1, #0
   14570:	beq	1455c <__assert_fail@plt+0x3674>
   14574:	push	{r0, r1, lr}
   14578:	bl	14354 <__assert_fail@plt+0x346c>
   1457c:	pop	{r1, r2, lr}
   14580:	mul	r3, r2, r0
   14584:	sub	r1, r1, r3
   14588:	bx	lr
   1458c:	cmp	r3, #0
   14590:	cmpeq	r2, #0
   14594:	bne	145ac <__assert_fail@plt+0x36c4>
   14598:	cmp	r1, #0
   1459c:	cmpeq	r0, #0
   145a0:	mvnne	r1, #0
   145a4:	mvnne	r0, #0
   145a8:	b	145c8 <__assert_fail@plt+0x36e0>
   145ac:	sub	sp, sp, #8
   145b0:	push	{sp, lr}
   145b4:	bl	145d8 <__assert_fail@plt+0x36f0>
   145b8:	ldr	lr, [sp, #4]
   145bc:	add	sp, sp, #8
   145c0:	pop	{r2, r3}
   145c4:	bx	lr
   145c8:	push	{r1, lr}
   145cc:	mov	r0, #8
   145d0:	bl	10c9c <raise@plt>
   145d4:	pop	{r1, pc}
   145d8:	cmp	r1, r3
   145dc:	push	{r4, r5, r6, r7, r8, r9, lr}
   145e0:	cmpeq	r0, r2
   145e4:	mov	r4, r0
   145e8:	mov	r5, r1
   145ec:	ldr	r9, [sp, #28]
   145f0:	movcc	r0, #0
   145f4:	movcc	r1, #0
   145f8:	bcc	146f0 <__assert_fail@plt+0x3808>
   145fc:	cmp	r3, #0
   14600:	clzeq	ip, r2
   14604:	clzne	ip, r3
   14608:	addeq	ip, ip, #32
   1460c:	cmp	r5, #0
   14610:	clzeq	r1, r4
   14614:	addeq	r1, r1, #32
   14618:	clzne	r1, r5
   1461c:	sub	ip, ip, r1
   14620:	sub	lr, ip, #32
   14624:	lsl	r7, r3, ip
   14628:	rsb	r8, ip, #32
   1462c:	orr	r7, r7, r2, lsl lr
   14630:	orr	r7, r7, r2, lsr r8
   14634:	lsl	r6, r2, ip
   14638:	cmp	r5, r7
   1463c:	cmpeq	r4, r6
   14640:	movcc	r0, #0
   14644:	movcc	r1, #0
   14648:	bcc	14664 <__assert_fail@plt+0x377c>
   1464c:	mov	r3, #1
   14650:	subs	r4, r4, r6
   14654:	lsl	r1, r3, lr
   14658:	lsl	r0, r3, ip
   1465c:	orr	r1, r1, r3, lsr r8
   14660:	sbc	r5, r5, r7
   14664:	cmp	ip, #0
   14668:	beq	146f0 <__assert_fail@plt+0x3808>
   1466c:	lsrs	r3, r7, #1
   14670:	rrx	r2, r6
   14674:	mov	r6, ip
   14678:	b	1469c <__assert_fail@plt+0x37b4>
   1467c:	subs	r4, r4, r2
   14680:	sbc	r5, r5, r3
   14684:	adds	r4, r4, r4
   14688:	adc	r5, r5, r5
   1468c:	adds	r4, r4, #1
   14690:	adc	r5, r5, #0
   14694:	subs	r6, r6, #1
   14698:	beq	146b8 <__assert_fail@plt+0x37d0>
   1469c:	cmp	r5, r3
   146a0:	cmpeq	r4, r2
   146a4:	bcs	1467c <__assert_fail@plt+0x3794>
   146a8:	adds	r4, r4, r4
   146ac:	adc	r5, r5, r5
   146b0:	subs	r6, r6, #1
   146b4:	bne	1469c <__assert_fail@plt+0x37b4>
   146b8:	lsr	r6, r4, ip
   146bc:	lsr	r7, r5, ip
   146c0:	orr	r6, r6, r5, lsl r8
   146c4:	adds	r2, r0, r4
   146c8:	orr	r6, r6, r5, lsr lr
   146cc:	adc	r3, r1, r5
   146d0:	lsl	r1, r7, ip
   146d4:	orr	r1, r1, r6, lsl lr
   146d8:	lsl	r0, r6, ip
   146dc:	orr	r1, r1, r6, lsr r8
   146e0:	subs	r0, r2, r0
   146e4:	mov	r4, r6
   146e8:	mov	r5, r7
   146ec:	sbc	r1, r3, r1
   146f0:	cmp	r9, #0
   146f4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   146f8:	strd	r4, [r9]
   146fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14700:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14704:	mov	r7, r0
   14708:	ldr	r6, [pc, #72]	; 14758 <__assert_fail@plt+0x3870>
   1470c:	ldr	r5, [pc, #72]	; 1475c <__assert_fail@plt+0x3874>
   14710:	add	r6, pc, r6
   14714:	add	r5, pc, r5
   14718:	sub	r6, r6, r5
   1471c:	mov	r8, r1
   14720:	mov	r9, r2
   14724:	bl	10c64 <calloc@plt-0x20>
   14728:	asrs	r6, r6, #2
   1472c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14730:	mov	r4, #0
   14734:	add	r4, r4, #1
   14738:	ldr	r3, [r5], #4
   1473c:	mov	r2, r9
   14740:	mov	r1, r8
   14744:	mov	r0, r7
   14748:	blx	r3
   1474c:	cmp	r6, r4
   14750:	bne	14734 <__assert_fail@plt+0x384c>
   14754:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14758:	strdeq	r1, [r1], -r8
   1475c:	strdeq	r1, [r1], -r0
   14760:	bx	lr
   14764:	ldr	r3, [pc, #12]	; 14778 <__assert_fail@plt+0x3890>
   14768:	mov	r1, #0
   1476c:	add	r3, pc, r3
   14770:	ldr	r2, [r3]
   14774:	b	10e28 <__cxa_atexit@plt>
   14778:	andeq	r1, r1, r0, ror r9

Disassembly of section .fini:

0001477c <.fini>:
   1477c:	push	{r3, lr}
   14780:	pop	{r3, pc}
