
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

00011f98 <.init>:
   11f98:	push	{r3, lr}
   11f9c:	bl	121f4 <_start@@Base+0x3c>
   11fa0:	pop	{r3, pc}

Disassembly of section .plt:

00011fa4 <printf@plt-0x14>:
   11fa4:	push	{lr}		; (str lr, [sp, #-4]!)
   11fa8:	ldr	lr, [pc, #4]	; 11fb4 <printf@plt-0x4>
   11fac:	add	lr, pc, lr
   11fb0:	ldr	pc, [lr, #8]!
   11fb4:	andeq	r8, r1, ip, asr #32

00011fb8 <printf@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #24, 20	; 0x18000
   11fc0:	ldr	pc, [ip, #76]!	; 0x4c

00011fc4 <free@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #24, 20	; 0x18000
   11fcc:	ldr	pc, [ip, #68]!	; 0x44

00011fd0 <memcpy@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #24, 20	; 0x18000
   11fd8:	ldr	pc, [ip, #60]!	; 0x3c

00011fdc <memcmp@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #24, 20	; 0x18000
   11fe4:	ldr	pc, [ip, #52]!	; 0x34

00011fe8 <realloc@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #24, 20	; 0x18000
   11ff0:	ldr	pc, [ip, #44]!	; 0x2c

00011ff4 <fwrite@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #24, 20	; 0x18000
   11ffc:	ldr	pc, [ip, #36]!	; 0x24

00012000 <puts@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #24, 20	; 0x18000
   12008:	ldr	pc, [ip, #28]!

0001200c <malloc@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #24, 20	; 0x18000
   12014:	ldr	pc, [ip, #20]!

00012018 <__libc_start_main@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #24, 20	; 0x18000
   12020:	ldr	pc, [ip, #12]!

00012024 <__gmon_start__@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #24, 20	; 0x18000
   1202c:	ldr	pc, [ip, #4]!

00012030 <strlen@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #94208	; 0x17000
   12038:	ldr	pc, [ip, #4092]!	; 0xffc

0001203c <fprintf@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #94208	; 0x17000
   12044:	ldr	pc, [ip, #4084]!	; 0xff4

00012048 <posix_memalign@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #94208	; 0x17000
   12050:	ldr	pc, [ip, #4076]!	; 0xfec

00012054 <memset@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #94208	; 0x17000
   1205c:	ldr	pc, [ip, #4068]!	; 0xfe4

00012060 <memchr@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #94208	; 0x17000
   12068:	ldr	pc, [ip, #4060]!	; 0xfdc

0001206c <fputc@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #94208	; 0x17000
   12074:	ldr	pc, [ip, #4052]!	; 0xfd4

00012078 <abort@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #94208	; 0x17000
   12080:	ldr	pc, [ip, #4044]!	; 0xfcc

00012084 <__assert_fail@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #94208	; 0x17000
   1208c:	ldr	pc, [ip, #4036]!	; 0xfc4

Disassembly of section .text:

00012090 <main@@Base-0x110>:
   12090:	push	{r4, lr}
   12094:	mov	r2, #308	; 0x134
   12098:	ldr	r3, [pc, #8]	; 120a8 <__assert_fail@plt+0x24>
   1209c:	ldr	r1, [pc, #8]	; 120ac <__assert_fail@plt+0x28>
   120a0:	ldr	r0, [pc, #8]	; 120b0 <__assert_fail@plt+0x2c>
   120a4:	bl	12084 <__assert_fail@plt>
   120a8:	andeq	r8, r1, ip, ror #23
   120ac:	andeq	r9, r1, ip, lsr r3
   120b0:	strdeq	r9, [r1], -ip
   120b4:	push	{r4, lr}
   120b8:	ldr	r3, [pc, #12]	; 120cc <__assert_fail@plt+0x48>
   120bc:	ldr	r2, [pc, #12]	; 120d0 <__assert_fail@plt+0x4c>
   120c0:	ldr	r1, [pc, #12]	; 120d4 <__assert_fail@plt+0x50>
   120c4:	ldr	r0, [pc, #12]	; 120d8 <__assert_fail@plt+0x54>
   120c8:	bl	12084 <__assert_fail@plt>
   120cc:	strdeq	r8, [r1], -ip
   120d0:	andeq	r0, r0, r1, lsr #5
   120d4:	andeq	r9, r1, ip, lsr r3
   120d8:	strdeq	r9, [r1], -ip
   120dc:	push	{r4, lr}
   120e0:	ldr	r3, [pc, #12]	; 120f4 <__assert_fail@plt+0x70>
   120e4:	ldr	r2, [pc, #12]	; 120f8 <__assert_fail@plt+0x74>
   120e8:	ldr	r1, [pc, #12]	; 120fc <__assert_fail@plt+0x78>
   120ec:	ldr	r0, [pc, #12]	; 12100 <__assert_fail@plt+0x7c>
   120f0:	bl	12084 <__assert_fail@plt>
   120f4:	andeq	r8, r1, r8, lsl #24
   120f8:	andeq	r0, r0, r7, lsl #5
   120fc:	andeq	r9, r1, ip, lsr r3
   12100:	strdeq	r9, [r1], -ip
   12104:	push	{r4, lr}
   12108:	mov	r2, #892	; 0x37c
   1210c:	ldr	r3, [pc, #8]	; 1211c <__assert_fail@plt+0x98>
   12110:	ldr	r1, [pc, #8]	; 12120 <__assert_fail@plt+0x9c>
   12114:	ldr	r0, [pc, #8]	; 12124 <__assert_fail@plt+0xa0>
   12118:	bl	12084 <__assert_fail@plt>
   1211c:	andeq	r8, r1, r4, lsl ip
   12120:	andeq	r9, r1, ip, lsr r3
   12124:	andeq	r9, r1, r4, lsl #7
   12128:	push	{r4, lr}
   1212c:	ldr	r3, [pc, #12]	; 12140 <__assert_fail@plt+0xbc>
   12130:	ldr	r2, [pc, #12]	; 12144 <__assert_fail@plt+0xc0>
   12134:	ldr	r1, [pc, #12]	; 12148 <__assert_fail@plt+0xc4>
   12138:	ldr	r0, [pc, #12]	; 1214c <__assert_fail@plt+0xc8>
   1213c:	bl	12084 <__assert_fail@plt>
   12140:	andeq	r8, r1, r8, lsr #24
   12144:	andeq	r0, r0, lr, lsl r2
   12148:	andeq	r9, r1, ip, lsr r3
   1214c:	andeq	r9, r1, r0, lsr #7
   12150:	push	{r4, lr}
   12154:	ldr	r3, [pc, #12]	; 12168 <__assert_fail@plt+0xe4>
   12158:	ldr	r2, [pc, #12]	; 1216c <__assert_fail@plt+0xe8>
   1215c:	ldr	r1, [pc, #12]	; 12170 <__assert_fail@plt+0xec>
   12160:	ldr	r0, [pc, #12]	; 12174 <__assert_fail@plt+0xf0>
   12164:	bl	12084 <__assert_fail@plt>
   12168:	andeq	r8, r1, r8, asr #24
   1216c:	andeq	r0, r0, r6, asr #7
   12170:	andeq	r9, r1, ip, lsr r3
   12174:			; <UNDEFINED> instruction: 0x000193bc
   12178:	push	{r4, lr}
   1217c:	ldr	r3, [pc, #12]	; 12190 <__assert_fail@plt+0x10c>
   12180:	ldr	r2, [pc, #12]	; 12194 <__assert_fail@plt+0x110>
   12184:	ldr	r1, [pc, #12]	; 12198 <__assert_fail@plt+0x114>
   12188:	ldr	r0, [pc, #12]	; 1219c <__assert_fail@plt+0x118>
   1218c:	bl	12084 <__assert_fail@plt>
   12190:	andeq	r8, r1, r8, ror #24
   12194:	andeq	r0, r0, r6, lsl #15
   12198:	andeq	r9, r1, ip, lsr r3
   1219c:	andeq	r9, r1, r8, ror #7

000121a0 <main@@Base>:
   121a0:	push	{r4, lr}
   121a4:	bl	12390 <debug_test@@Base>
   121a8:	mov	r4, r0
   121ac:	bl	12504 <emit_test@@Base>
   121b0:	orr	r0, r4, r0
   121b4:	pop	{r4, pc}

000121b8 <_start@@Base>:
   121b8:	mov	fp, #0
   121bc:	mov	lr, #0
   121c0:	pop	{r1}		; (ldr r1, [sp], #4)
   121c4:	mov	r2, sp
   121c8:	push	{r2}		; (str r2, [sp, #-4]!)
   121cc:	push	{r0}		; (str r0, [sp, #-4]!)
   121d0:	ldr	ip, [pc, #16]	; 121e8 <_start@@Base+0x30>
   121d4:	push	{ip}		; (str ip, [sp, #-4]!)
   121d8:	ldr	r0, [pc, #12]	; 121ec <_start@@Base+0x34>
   121dc:	ldr	r3, [pc, #12]	; 121f0 <_start@@Base+0x38>
   121e0:	bl	12018 <__libc_start_main@plt>
   121e4:	bl	12078 <abort@plt>
   121e8:	andeq	r8, r1, ip, lsr #17
   121ec:	andeq	r2, r1, r0, lsr #3
   121f0:	andeq	r8, r1, ip, asr #16
   121f4:	ldr	r3, [pc, #20]	; 12210 <_start@@Base+0x58>
   121f8:	ldr	r2, [pc, #20]	; 12214 <_start@@Base+0x5c>
   121fc:	add	r3, pc, r3
   12200:	ldr	r2, [r3, r2]
   12204:	cmp	r2, #0
   12208:	bxeq	lr
   1220c:	b	12024 <__gmon_start__@plt>
   12210:	strdeq	r7, [r1], -ip
   12214:	andeq	r0, r0, r4, asr r0
   12218:	ldr	r3, [pc, #28]	; 1223c <_start@@Base+0x84>
   1221c:	ldr	r0, [pc, #28]	; 12240 <_start@@Base+0x88>
   12220:	sub	r3, r3, r0
   12224:	cmp	r3, #6
   12228:	bxls	lr
   1222c:	ldr	r3, [pc, #16]	; 12244 <_start@@Base+0x8c>
   12230:	cmp	r3, #0
   12234:	bxeq	lr
   12238:	bx	r3
   1223c:	andeq	sl, r2, r3, rrx
   12240:	andeq	sl, r2, r0, rrx
   12244:	andeq	r0, r0, r0
   12248:	ldr	r1, [pc, #36]	; 12274 <_start@@Base+0xbc>
   1224c:	ldr	r0, [pc, #36]	; 12278 <_start@@Base+0xc0>
   12250:	sub	r1, r1, r0
   12254:	asr	r1, r1, #2
   12258:	add	r1, r1, r1, lsr #31
   1225c:	asrs	r1, r1, #1
   12260:	bxeq	lr
   12264:	ldr	r3, [pc, #16]	; 1227c <_start@@Base+0xc4>
   12268:	cmp	r3, #0
   1226c:	bxeq	lr
   12270:	bx	r3
   12274:	andeq	sl, r2, r0, rrx
   12278:	andeq	sl, r2, r0, rrx
   1227c:	andeq	r0, r0, r0
   12280:	push	{r4, lr}
   12284:	ldr	r4, [pc, #24]	; 122a4 <_start@@Base+0xec>
   12288:	ldrb	r3, [r4]
   1228c:	cmp	r3, #0
   12290:	popne	{r4, pc}
   12294:	bl	12218 <_start@@Base+0x60>
   12298:	mov	r3, #1
   1229c:	strb	r3, [r4]
   122a0:	pop	{r4, pc}
   122a4:	andeq	sl, r2, r4, rrx
   122a8:	ldr	r0, [pc, #40]	; 122d8 <_start@@Base+0x120>
   122ac:	ldr	r3, [r0]
   122b0:	cmp	r3, #0
   122b4:	bne	122bc <_start@@Base+0x104>
   122b8:	b	12248 <_start@@Base+0x90>
   122bc:	ldr	r3, [pc, #24]	; 122dc <_start@@Base+0x124>
   122c0:	cmp	r3, #0
   122c4:	beq	122b8 <_start@@Base+0x100>
   122c8:	push	{r4, lr}
   122cc:	blx	r3
   122d0:	pop	{r4, lr}
   122d4:	b	12248 <_start@@Base+0x90>
   122d8:	andeq	r9, r2, r4, lsl pc
   122dc:	andeq	r0, r0, r0

000122e0 <dbg_emitter@@Base>:
   122e0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122e4:	mov	r7, r2
   122e8:	mov	r6, r3
   122ec:	mov	r2, r3
   122f0:	mov	r8, r1
   122f4:	ldr	r3, [sp, #40]	; 0x28
   122f8:	mov	r1, r7
   122fc:	ldr	r0, [pc, #124]	; 12380 <dbg_emitter@@Base+0xa0>
   12300:	bl	11fb8 <printf@plt>
   12304:	cmp	r7, #0
   12308:	ble	1234c <dbg_emitter@@Base+0x6c>
   1230c:	ldr	fp, [pc, #112]	; 12384 <dbg_emitter@@Base+0xa4>
   12310:	ldr	sl, [pc, #112]	; 12388 <dbg_emitter@@Base+0xa8>
   12314:	ldr	r9, [pc, #112]	; 1238c <dbg_emitter@@Base+0xac>
   12318:	mov	r5, r8
   1231c:	mov	r4, #0
   12320:	ldr	r3, [r8, r4, lsl #3]
   12324:	cmp	r3, fp
   12328:	beq	12368 <dbg_emitter@@Base+0x88>
   1232c:	cmp	r3, #0
   12330:	add	r4, r4, #1
   12334:	beq	12354 <dbg_emitter@@Base+0x74>
   12338:	ldr	r3, [r5, #4]
   1233c:	cmp	r7, r4
   12340:	add	r6, r6, r3
   12344:	add	r5, r5, #8
   12348:	bne	12320 <dbg_emitter@@Base+0x40>
   1234c:	mov	r0, #0
   12350:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12354:	ldr	r2, [r5, #4]
   12358:	mov	r1, r6
   1235c:	mov	r0, r9
   12360:	bl	11fb8 <printf@plt>
   12364:	b	12338 <dbg_emitter@@Base+0x58>
   12368:	ldr	r2, [r5, #4]
   1236c:	mov	r1, r6
   12370:	mov	r0, sl
   12374:	bl	11fb8 <printf@plt>
   12378:	ldr	r3, [r8, r4, lsl #3]
   1237c:	b	1232c <dbg_emitter@@Base+0x4c>
   12380:	andeq	r8, r1, r0, lsr r9
   12384:	andeq	r8, r1, r4, lsl #25
   12388:	andeq	r8, r1, r4, ror #18
   1238c:	andeq	r8, r1, r8, lsl #19

00012390 <debug_test@@Base>:
   12390:	push	{r4, r5, lr}
   12394:	sub	sp, sp, #284	; 0x11c
   12398:	mov	r2, #40	; 0x28
   1239c:	mov	r1, #0
   123a0:	add	r0, sp, #8
   123a4:	mov	r4, #0
   123a8:	bl	12054 <memset@plt>
   123ac:	ldr	r0, [pc, #312]	; 124ec <debug_test@@Base+0x15c>
   123b0:	bl	12000 <puts@plt>
   123b4:	mov	r3, r4
   123b8:	mov	r2, r4
   123bc:	ldr	r1, [pc, #300]	; 124f0 <debug_test@@Base+0x160>
   123c0:	add	r0, sp, #48	; 0x30
   123c4:	str	r4, [sp]
   123c8:	bl	12e58 <flatcc_builder_custom_init@@Base>
   123cc:	mov	r3, #4
   123d0:	mvn	r2, #-1073741824	; 0xc0000000
   123d4:	add	r1, sp, #8
   123d8:	str	r2, [sp, #4]
   123dc:	str	r3, [sp]
   123e0:	mov	r2, #10
   123e4:	add	r0, sp, #48	; 0x30
   123e8:	bl	1618c <flatcc_builder_create_vector@@Base>
   123ec:	mov	r3, r4
   123f0:	mov	r2, r4
   123f4:	mov	r1, r4
   123f8:	mov	r5, r0
   123fc:	add	r0, sp, #48	; 0x30
   12400:	bl	139ac <flatcc_builder_start_buffer@@Base>
   12404:	cmp	r0, r4
   12408:	beq	12420 <debug_test@@Base+0x90>
   1240c:	add	r0, sp, #48	; 0x30
   12410:	bl	13128 <flatcc_builder_clear@@Base>
   12414:	mov	r0, #0
   12418:	add	sp, sp, #284	; 0x11c
   1241c:	pop	{r4, r5, pc}
   12420:	mov	r1, #3
   12424:	add	r0, sp, #48	; 0x30
   12428:	bl	1558c <flatcc_builder_start_table@@Base>
   1242c:	subs	r4, r0, #0
   12430:	bne	12464 <debug_test@@Base+0xd4>
   12434:	mov	r3, #8
   12438:	mov	r2, r3
   1243c:	mov	r1, r4
   12440:	add	r0, sp, #48	; 0x30
   12444:	bl	176f8 <flatcc_builder_table_add@@Base>
   12448:	cmp	r0, #0
   1244c:	beq	12464 <debug_test@@Base+0xd4>
   12450:	mov	r2, #42	; 0x2a
   12454:	mov	r3, #0
   12458:	cmp	r5, #0
   1245c:	strd	r2, [r0]
   12460:	bne	12474 <debug_test@@Base+0xe4>
   12464:	mov	r1, #0
   12468:	add	r0, sp, #48	; 0x30
   1246c:	bl	13b38 <flatcc_builder_end_buffer@@Base>
   12470:	b	1240c <debug_test@@Base+0x7c>
   12474:	mov	r1, #2
   12478:	add	r0, sp, #48	; 0x30
   1247c:	bl	17a94 <flatcc_builder_table_add_offset@@Base>
   12480:	cmp	r0, #0
   12484:	beq	12464 <debug_test@@Base+0xd4>
   12488:	mov	r3, #1
   1248c:	str	r5, [r0]
   12490:	mov	r2, r3
   12494:	mov	r1, r3
   12498:	add	r0, sp, #48	; 0x30
   1249c:	bl	176f8 <flatcc_builder_table_add@@Base>
   124a0:	cmp	r0, #0
   124a4:	beq	12464 <debug_test@@Base+0xd4>
   124a8:	mov	r3, #1
   124ac:	strb	r3, [r0]
   124b0:	mov	r2, r4
   124b4:	ldr	r1, [pc, #56]	; 124f4 <debug_test@@Base+0x164>
   124b8:	add	r0, sp, #48	; 0x30
   124bc:	bl	15f34 <flatcc_builder_check_required@@Base>
   124c0:	cmp	r0, #0
   124c4:	beq	124d8 <debug_test@@Base+0x148>
   124c8:	add	r0, sp, #48	; 0x30
   124cc:	bl	15fcc <flatcc_builder_end_table@@Base>
   124d0:	mov	r1, r0
   124d4:	b	12468 <debug_test@@Base+0xd8>
   124d8:	ldr	r3, [pc, #24]	; 124f8 <debug_test@@Base+0x168>
   124dc:	mov	r2, #21
   124e0:	ldr	r1, [pc, #20]	; 124fc <debug_test@@Base+0x16c>
   124e4:	ldr	r0, [pc, #20]	; 12500 <debug_test@@Base+0x170>
   124e8:	bl	12084 <__assert_fail@plt>
   124ec:			; <UNDEFINED> instruction: 0x000189b8
   124f0:	andeq	r2, r1, r0, ror #5
   124f4:			; <UNDEFINED> instruction: 0x000188bc
   124f8:	andeq	r8, r1, r0, asr #17
   124fc:	andeq	r8, r1, ip, lsl #20
   12500:	andeq	r8, r1, ip, ror #20

00012504 <emit_test@@Base>:
   12504:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12508:	sub	sp, sp, #348	; 0x15c
   1250c:	ldr	r4, [pc, #1112]	; 1296c <emit_test@@Base+0x468>
   12510:	add	ip, sp, #52	; 0x34
   12514:	add	r5, sp, #16
   12518:	ldm	r4!, {r0, r1, r2, r3}
   1251c:	stmia	ip!, {r0, r1, r2, r3}
   12520:	ldm	r4!, {r0, r1, r2, r3}
   12524:	stmia	ip!, {r0, r1, r2, r3}
   12528:	ldm	r4!, {r0, r1, r2, r3}
   1252c:	stmia	ip!, {r0, r1, r2, r3}
   12530:	add	r3, r4, #12
   12534:	ldm	r4, {r0, r1, r2}
   12538:	lsr	lr, r2, #16
   1253c:	stmia	ip!, {r0, r1}
   12540:	strh	r2, [ip], #2
   12544:	strb	lr, [ip]
   12548:	ldm	r3, {r0, r1, r2, r3}
   1254c:	stm	r5, {r0, r1, r2, r3}
   12550:	add	r0, sp, #112	; 0x70
   12554:	bl	12ebc <flatcc_builder_init@@Base>
   12558:	add	r0, sp, #112	; 0x70
   1255c:	bl	18284 <flatcc_builder_get_emit_context@@Base>
   12560:	mov	r3, #4
   12564:	mvn	r2, #-1073741824	; 0xc0000000
   12568:	mov	r1, r5
   1256c:	str	r2, [sp, #4]
   12570:	str	r3, [sp]
   12574:	mov	r2, r3
   12578:	mov	r6, r0
   1257c:	add	r0, sp, #112	; 0x70
   12580:	bl	1618c <flatcc_builder_create_vector@@Base>
   12584:	mov	r3, #0
   12588:	mov	r2, r3
   1258c:	mov	r1, r3
   12590:	mov	r5, r0
   12594:	add	r0, sp, #112	; 0x70
   12598:	bl	139ac <flatcc_builder_start_buffer@@Base>
   1259c:	cmp	r0, #0
   125a0:	beq	125c4 <emit_test@@Base+0xc0>
   125a4:	ldr	r2, [r6, #4]
   125a8:	ldr	r3, [r6]
   125ac:	cmp	r2, r3
   125b0:	beq	12624 <emit_test@@Base+0x120>
   125b4:	mvn	r4, #0
   125b8:	mov	r0, r4
   125bc:	add	sp, sp, #348	; 0x15c
   125c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125c4:	mov	r1, #3
   125c8:	add	r0, sp, #112	; 0x70
   125cc:	bl	1558c <flatcc_builder_start_table@@Base>
   125d0:	subs	r7, r0, #0
   125d4:	bne	12608 <emit_test@@Base+0x104>
   125d8:	mov	r3, #8
   125dc:	mov	r2, r3
   125e0:	mov	r1, r7
   125e4:	add	r0, sp, #112	; 0x70
   125e8:	bl	176f8 <flatcc_builder_table_add@@Base>
   125ec:	cmp	r0, #0
   125f0:	beq	12608 <emit_test@@Base+0x104>
   125f4:	mov	r2, #42	; 0x2a
   125f8:	mov	r3, #0
   125fc:	cmp	r5, #0
   12600:	strd	r2, [r0]
   12604:	bne	128a0 <emit_test@@Base+0x39c>
   12608:	mov	r1, #0
   1260c:	add	r0, sp, #112	; 0x70
   12610:	bl	13b38 <flatcc_builder_end_buffer@@Base>
   12614:	ldr	r2, [r6, #4]
   12618:	ldr	r3, [r6]
   1261c:	cmp	r2, r3
   12620:	bne	125b4 <emit_test@@Base+0xb0>
   12624:	ldr	r3, [r6, #8]
   12628:	ldr	r4, [r6, #24]
   1262c:	cmp	r3, #0
   12630:	str	r3, [sp, #12]
   12634:	beq	125b4 <emit_test@@Base+0xb0>
   12638:	add	r0, sp, #112	; 0x70
   1263c:	bl	17fe0 <flatcc_builder_get_buffer_size@@Base>
   12640:	cmp	r0, r4
   12644:	mov	r8, r0
   12648:	bne	12904 <emit_test@@Base+0x400>
   1264c:	ldr	r4, [pc, #796]	; 12970 <emit_test@@Base+0x46c>
   12650:	mov	r2, r0
   12654:	ldr	r1, [pc, #792]	; 12974 <emit_test@@Base+0x470>
   12658:	ldr	r0, [r4]
   1265c:	bl	1203c <fprintf@plt>
   12660:	ldr	r6, [r4]
   12664:	ldr	r2, [pc, #780]	; 12978 <emit_test@@Base+0x474>
   12668:	mov	r0, r6
   1266c:	ldr	r1, [pc, #776]	; 1297c <emit_test@@Base+0x478>
   12670:	bl	1203c <fprintf@plt>
   12674:	cmp	r8, #0
   12678:	beq	1287c <emit_test@@Base+0x378>
   1267c:	ldr	r3, [sp, #12]
   12680:	mov	r4, #0
   12684:	ldr	fp, [pc, #756]	; 12980 <emit_test@@Base+0x47c>
   12688:	ldr	sl, [pc, #756]	; 12984 <emit_test@@Base+0x480>
   1268c:	mov	r9, r4
   12690:	sub	r7, r3, #1
   12694:	b	126fc <emit_test@@Base+0x1f8>
   12698:	cmp	r4, #0
   1269c:	beq	126b0 <emit_test@@Base+0x1ac>
   126a0:	add	r2, sp, #32
   126a4:	ldr	r1, [pc, #732]	; 12988 <emit_test@@Base+0x484>
   126a8:	mov	r0, r6
   126ac:	bl	1203c <fprintf@plt>
   126b0:	mov	r2, r4
   126b4:	mov	r1, fp
   126b8:	mov	r0, r6
   126bc:	bl	1203c <fprintf@plt>
   126c0:	ldrb	r2, [r7, #1]
   126c4:	mov	r1, sl
   126c8:	mov	r0, r6
   126cc:	bl	1203c <fprintf@plt>
   126d0:	ldrb	r2, [r7, #1]!
   126d4:	add	r3, sp, #344	; 0x158
   126d8:	add	r3, r3, r5
   126dc:	sub	r1, r2, #32
   126e0:	cmp	r1, #94	; 0x5e
   126e4:	add	r4, r4, #1
   126e8:	movhi	r2, #46	; 0x2e
   126ec:	cmp	r8, r4
   126f0:	strb	r9, [r3, #-311]	; 0xfffffec9
   126f4:	strb	r2, [r3, #-312]	; 0xfffffec8
   126f8:	beq	1271c <emit_test@@Base+0x218>
   126fc:	ands	r5, r4, #15
   12700:	beq	12698 <emit_test@@Base+0x194>
   12704:	tst	r4, #7
   12708:	bne	126c0 <emit_test@@Base+0x1bc>
   1270c:	mov	r1, r6
   12710:	mov	r0, #32
   12714:	bl	1206c <fputc@plt>
   12718:	b	126c0 <emit_test@@Base+0x1bc>
   1271c:	tst	r8, #15
   12720:	beq	12750 <emit_test@@Base+0x24c>
   12724:	ldr	r9, [pc, #608]	; 1298c <emit_test@@Base+0x488>
   12728:	mov	r7, #3
   1272c:	mov	r5, #1
   12730:	add	r4, r4, #1
   12734:	mov	r3, r6
   12738:	mov	r2, r7
   1273c:	mov	r1, r5
   12740:	mov	r0, r9
   12744:	bl	11ff4 <fwrite@plt>
   12748:	tst	r4, #15
   1274c:	bne	12730 <emit_test@@Base+0x22c>
   12750:	add	r2, sp, #32
   12754:	mov	r0, r6
   12758:	ldr	r1, [pc, #552]	; 12988 <emit_test@@Base+0x484>
   1275c:	bl	1203c <fprintf@plt>
   12760:	cmp	r8, #58	; 0x3a
   12764:	bne	1288c <emit_test@@Base+0x388>
   12768:	mov	r2, r8
   1276c:	add	r1, sp, #52	; 0x34
   12770:	ldr	r0, [sp, #12]
   12774:	bl	11fdc <memcmp@plt>
   12778:	subs	r4, r0, #0
   1277c:	bne	1292c <emit_test@@Base+0x428>
   12780:	ldr	r3, [sp, #12]
   12784:	ldr	r2, [r3]
   12788:	adds	r3, r3, r2
   1278c:	beq	12918 <emit_test@@Base+0x414>
   12790:	ldr	r1, [sp, #12]
   12794:	ldr	r2, [r1, r2]
   12798:	sub	r2, r3, r2
   1279c:	ldrh	r1, [r2]
   127a0:	cmp	r1, #5
   127a4:	bhi	127bc <emit_test@@Base+0x2b8>
   127a8:	ldr	r3, [pc, #480]	; 12990 <emit_test@@Base+0x48c>
   127ac:	mov	r2, #112	; 0x70
   127b0:	ldr	r1, [pc, #476]	; 12994 <emit_test@@Base+0x490>
   127b4:	ldr	r0, [pc, #476]	; 12998 <emit_test@@Base+0x494>
   127b8:	bl	12084 <__assert_fail@plt>
   127bc:	ldrh	r0, [r2, #4]
   127c0:	cmp	r0, #0
   127c4:	beq	127a8 <emit_test@@Base+0x2a4>
   127c8:	ldrd	r6, [r3, r0]
   127cc:	cmp	r7, #0
   127d0:	cmpeq	r6, #42	; 0x2a
   127d4:	bne	127a8 <emit_test@@Base+0x2a4>
   127d8:	cmp	r1, #7
   127dc:	bhi	127f4 <emit_test@@Base+0x2f0>
   127e0:	ldr	r3, [pc, #424]	; 12990 <emit_test@@Base+0x48c>
   127e4:	mov	r2, #113	; 0x71
   127e8:	ldr	r1, [pc, #420]	; 12994 <emit_test@@Base+0x490>
   127ec:	ldr	r0, [pc, #420]	; 12998 <emit_test@@Base+0x494>
   127f0:	bl	12084 <__assert_fail@plt>
   127f4:	ldrh	r0, [r2, #6]
   127f8:	cmp	r0, #0
   127fc:	beq	127e0 <emit_test@@Base+0x2dc>
   12800:	ldrb	r0, [r3, r0]
   12804:	cmp	r0, #1
   12808:	bne	127e0 <emit_test@@Base+0x2dc>
   1280c:	cmp	r1, #9
   12810:	bhi	12828 <emit_test@@Base+0x324>
   12814:	ldr	r3, [pc, #372]	; 12990 <emit_test@@Base+0x48c>
   12818:	mov	r2, #114	; 0x72
   1281c:	ldr	r1, [pc, #368]	; 12994 <emit_test@@Base+0x490>
   12820:	ldr	r0, [pc, #368]	; 12998 <emit_test@@Base+0x494>
   12824:	bl	12084 <__assert_fail@plt>
   12828:	ldrh	r1, [r2, #8]
   1282c:	cmp	r1, #0
   12830:	beq	12814 <emit_test@@Base+0x310>
   12834:	ldr	r2, [r3, r1]
   12838:	add	r3, r3, r1
   1283c:	add	r2, r2, #4
   12840:	adds	r3, r3, r2
   12844:	beq	12814 <emit_test@@Base+0x310>
   12848:	ldr	r2, [r3, #-4]
   1284c:	cmp	r2, #4
   12850:	bne	12814 <emit_test@@Base+0x310>
   12854:	vldr	s15, [pc, #268]	; 12968 <emit_test@@Base+0x464>
   12858:	vldr	s14, [r3, #8]
   1285c:	vcmp.f32	s14, s15
   12860:	vmrs	APSR_nzcv, fpscr
   12864:	bne	12940 <emit_test@@Base+0x43c>
   12868:	add	r0, sp, #112	; 0x70
   1286c:	bl	13128 <flatcc_builder_clear@@Base>
   12870:	mov	r0, r4
   12874:	add	sp, sp, #348	; 0x15c
   12878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1287c:	mov	r0, r6
   12880:	add	r2, sp, #32
   12884:	ldr	r1, [pc, #252]	; 12988 <emit_test@@Base+0x484>
   12888:	bl	1203c <fprintf@plt>
   1288c:	ldr	r3, [pc, #252]	; 12990 <emit_test@@Base+0x48c>
   12890:	mov	r2, #106	; 0x6a
   12894:	ldr	r1, [pc, #248]	; 12994 <emit_test@@Base+0x490>
   12898:	ldr	r0, [pc, #248]	; 12998 <emit_test@@Base+0x494>
   1289c:	bl	12084 <__assert_fail@plt>
   128a0:	mov	r1, #2
   128a4:	add	r0, sp, #112	; 0x70
   128a8:	bl	17a94 <flatcc_builder_table_add_offset@@Base>
   128ac:	cmp	r0, #0
   128b0:	beq	12608 <emit_test@@Base+0x104>
   128b4:	mov	r3, #1
   128b8:	str	r5, [r0]
   128bc:	mov	r2, r3
   128c0:	mov	r1, r3
   128c4:	add	r0, sp, #112	; 0x70
   128c8:	bl	176f8 <flatcc_builder_table_add@@Base>
   128cc:	cmp	r0, #0
   128d0:	beq	12608 <emit_test@@Base+0x104>
   128d4:	mov	r3, #1
   128d8:	strb	r3, [r0]
   128dc:	mov	r2, r7
   128e0:	sub	r1, r4, #64	; 0x40
   128e4:	add	r0, sp, #112	; 0x70
   128e8:	bl	15f34 <flatcc_builder_check_required@@Base>
   128ec:	cmp	r0, #0
   128f0:	beq	12954 <emit_test@@Base+0x450>
   128f4:	add	r0, sp, #112	; 0x70
   128f8:	bl	15fcc <flatcc_builder_end_table@@Base>
   128fc:	mov	r1, r0
   12900:	b	1260c <emit_test@@Base+0x108>
   12904:	ldr	r3, [pc, #132]	; 12990 <emit_test@@Base+0x48c>
   12908:	mov	r2, #101	; 0x65
   1290c:	ldr	r1, [pc, #128]	; 12994 <emit_test@@Base+0x490>
   12910:	ldr	r0, [pc, #128]	; 12998 <emit_test@@Base+0x494>
   12914:	bl	12084 <__assert_fail@plt>
   12918:	ldr	r3, [pc, #124]	; 1299c <emit_test@@Base+0x498>
   1291c:	mov	r2, #41	; 0x29
   12920:	ldr	r1, [pc, #120]	; 129a0 <emit_test@@Base+0x49c>
   12924:	ldr	r0, [pc, #120]	; 129a4 <emit_test@@Base+0x4a0>
   12928:	bl	12084 <__assert_fail@plt>
   1292c:	ldr	r3, [pc, #92]	; 12990 <emit_test@@Base+0x48c>
   12930:	mov	r2, #108	; 0x6c
   12934:	ldr	r1, [pc, #88]	; 12994 <emit_test@@Base+0x490>
   12938:	ldr	r0, [pc, #88]	; 12998 <emit_test@@Base+0x494>
   1293c:	bl	12084 <__assert_fail@plt>
   12940:	ldr	r3, [pc, #72]	; 12990 <emit_test@@Base+0x48c>
   12944:	mov	r2, #115	; 0x73
   12948:	ldr	r1, [pc, #68]	; 12994 <emit_test@@Base+0x490>
   1294c:	ldr	r0, [pc, #68]	; 12998 <emit_test@@Base+0x494>
   12950:	bl	12084 <__assert_fail@plt>
   12954:	sub	r3, r4, #60	; 0x3c
   12958:	mov	r2, #21
   1295c:	ldr	r1, [pc, #68]	; 129a8 <emit_test@@Base+0x4a4>
   12960:	ldr	r0, [pc, #68]	; 129ac <emit_test@@Base+0x4a8>
   12964:	bl	12084 <__assert_fail@plt>
   12968:	svccc	0x0099999a
   1296c:	andeq	r8, r1, ip, asr #17
   12970:	andeq	sl, r2, r0, rrx
   12974:	andeq	r8, r1, r4, lsr #22
   12978:	andeq	r8, r1, r8, lsr fp
   1297c:	andeq	r8, r1, r4, asr #22
   12980:	andeq	r8, r1, r4, asr fp
   12984:	andeq	r8, r1, ip, asr fp
   12988:	andeq	r8, r1, ip, asr #22
   1298c:	andeq	r8, r1, r4, ror #22
   12990:	andeq	r8, r1, r8, lsl r9
   12994:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12998:	strdeq	r9, [r1], -ip
   1299c:	andeq	r8, r1, r4, lsr #18
   129a0:	andeq	r8, r1, r8, ror #22
   129a4:	andeq	r8, r1, r4, asr #23
   129a8:	andeq	r8, r1, ip, lsl #20
   129ac:	andeq	r8, r1, ip, ror #20

000129b0 <flatcc_builder_default_alloc@@Base>:
   129b0:	push	{r4, r5, r6, r7, r8, lr}
   129b4:	subs	r5, r2, #0
   129b8:	mov	r6, r1
   129bc:	bne	129e0 <flatcc_builder_default_alloc@@Base+0x30>
   129c0:	ldr	r0, [r1]
   129c4:	cmp	r0, #0
   129c8:	popeq	{r4, r5, r6, r7, r8, pc}
   129cc:	bl	11fc4 <free@plt>
   129d0:	str	r5, [r6]
   129d4:	str	r5, [r6, #4]
   129d8:	mov	r0, r5
   129dc:	pop	{r4, r5, r6, r7, r8, pc}
   129e0:	mov	r7, r3
   129e4:	ldr	r3, [sp, #24]
   129e8:	sub	r2, r3, #1
   129ec:	cmp	r2, #6
   129f0:	ldrls	pc, [pc, r2, lsl #2]
   129f4:	b	12a90 <flatcc_builder_default_alloc@@Base+0xe0>
   129f8:	andeq	r2, r1, r4, ror #20
   129fc:	muleq	r1, r0, sl
   12a00:	muleq	r1, r0, sl
   12a04:	andeq	r2, r1, r8, lsl #21
   12a08:	andeq	r2, r1, r4, lsl sl
   12a0c:	muleq	r1, r0, sl
   12a10:	andeq	r2, r1, r0, lsl #21
   12a14:	mov	r4, r5
   12a18:	ldr	r3, [r6, #4]
   12a1c:	cmp	r5, r3
   12a20:	bhi	12a2c <flatcc_builder_default_alloc@@Base+0x7c>
   12a24:	cmp	r4, r3, lsr #1
   12a28:	bls	12a98 <flatcc_builder_default_alloc@@Base+0xe8>
   12a2c:	mov	r1, r4
   12a30:	ldr	r0, [r6]
   12a34:	bl	11fe8 <realloc@plt>
   12a38:	subs	r5, r0, #0
   12a3c:	beq	12ab4 <flatcc_builder_default_alloc@@Base+0x104>
   12a40:	cmp	r7, #0
   12a44:	beq	12a54 <flatcc_builder_default_alloc@@Base+0xa4>
   12a48:	ldr	r0, [r6, #4]
   12a4c:	cmp	r0, r4
   12a50:	bcc	12aa0 <flatcc_builder_default_alloc@@Base+0xf0>
   12a54:	str	r5, [r6]
   12a58:	str	r4, [r6, #4]
   12a5c:	mov	r0, #0
   12a60:	pop	{r4, r5, r6, r7, r8, pc}
   12a64:	mov	r4, #256	; 0x100
   12a68:	cmp	r5, r4
   12a6c:	bls	12a18 <flatcc_builder_default_alloc@@Base+0x68>
   12a70:	lsl	r4, r4, #1
   12a74:	cmp	r5, r4
   12a78:	bhi	12a70 <flatcc_builder_default_alloc@@Base+0xc0>
   12a7c:	b	12a18 <flatcc_builder_default_alloc@@Base+0x68>
   12a80:	mov	r4, #64	; 0x40
   12a84:	b	12a68 <flatcc_builder_default_alloc@@Base+0xb8>
   12a88:	mov	r4, #288	; 0x120
   12a8c:	b	12a68 <flatcc_builder_default_alloc@@Base+0xb8>
   12a90:	mov	r4, #32
   12a94:	b	12a68 <flatcc_builder_default_alloc@@Base+0xb8>
   12a98:	mov	r0, #0
   12a9c:	pop	{r4, r5, r6, r7, r8, pc}
   12aa0:	sub	r2, r4, r0
   12aa4:	mov	r1, #0
   12aa8:	add	r0, r5, r0
   12aac:	bl	12054 <memset@plt>
   12ab0:	b	12a54 <flatcc_builder_default_alloc@@Base+0xa4>
   12ab4:	mvn	r0, #0
   12ab8:	pop	{r4, r5, r6, r7, r8, pc}
   12abc:	push	{r4, r5, r6, r7, r8, lr}
   12ac0:	mov	r5, r0
   12ac4:	ldrh	r0, [r0, #128]	; 0x80
   12ac8:	sub	sp, sp, #88	; 0x58
   12acc:	mov	r7, #4
   12ad0:	cmp	r0, #3
   12ad4:	movls	r0, #4
   12ad8:	strhls	r0, [r5, #128]	; 0x80
   12adc:	ldr	r0, [r5, #136]	; 0x88
   12ae0:	lsls	r4, r2, #2
   12ae4:	mov	r8, #1
   12ae8:	str	r7, [sp, #16]
   12aec:	str	r8, [sp, #20]
   12af0:	and	ip, r0, #3
   12af4:	movne	r8, #2
   12af8:	str	r7, [sp, #28]
   12afc:	addne	r7, r4, r7
   12b00:	strne	r4, [sp, #36]	; 0x24
   12b04:	add	lr, sp, #12
   12b08:	strne	r1, [sp, #32]
   12b0c:	strne	r7, [sp, #16]
   12b10:	strne	r8, [sp, #20]
   12b14:	movne	r4, #3
   12b18:	moveq	r4, #2
   12b1c:	cmp	ip, #0
   12b20:	str	r2, [sp, #12]
   12b24:	str	lr, [sp, #24]
   12b28:	beq	12b54 <flatcc_builder_default_alloc@@Base+0x1a4>
   12b2c:	add	lr, r8, #1
   12b30:	add	r8, sp, #88	; 0x58
   12b34:	add	lr, r8, lr, lsl #3
   12b38:	ldr	r6, [pc, #320]	; 12c80 <flatcc_builder_default_alloc@@Base+0x2d0>
   12b3c:	mov	r8, r4
   12b40:	add	r7, r7, ip
   12b44:	str	ip, [lr, #-68]	; 0xffffffbc
   12b48:	str	r7, [sp, #16]
   12b4c:	str	r4, [sp, #20]
   12b50:	str	r6, [lr, #-72]	; 0xffffffb8
   12b54:	cmp	r2, #0
   12b58:	sub	r4, r0, r7
   12b5c:	beq	12bf0 <flatcc_builder_default_alloc@@Base+0x240>
   12b60:	cmp	r3, #0
   12b64:	addne	r6, r3, r2
   12b68:	mvnne	r0, #3
   12b6c:	bne	12ba0 <flatcc_builder_default_alloc@@Base+0x1f0>
   12b70:	b	12c2c <flatcc_builder_default_alloc@@Base+0x27c>
   12b74:	sub	lr, r0, r4
   12b78:	add	ip, lr, ip
   12b7c:	str	ip, [r1]
   12b80:	ldrb	ip, [r3]
   12b84:	cmp	ip, #0
   12b88:	beq	12c54 <flatcc_builder_default_alloc@@Base+0x2a4>
   12b8c:	add	r3, r3, #1
   12b90:	cmp	r3, r6
   12b94:	add	r1, r1, #4
   12b98:	sub	r0, r0, #4
   12b9c:	beq	12be8 <flatcc_builder_default_alloc@@Base+0x238>
   12ba0:	ldr	ip, [r1]
   12ba4:	cmp	ip, #0
   12ba8:	bne	12b74 <flatcc_builder_default_alloc@@Base+0x1c4>
   12bac:	ldrb	ip, [r3]
   12bb0:	cmp	ip, #0
   12bb4:	beq	12b8c <flatcc_builder_default_alloc@@Base+0x1dc>
   12bb8:	ldr	r3, [pc, #196]	; 12c84 <flatcc_builder_default_alloc@@Base+0x2d4>
   12bbc:	ldr	r2, [pc, #196]	; 12c88 <flatcc_builder_default_alloc@@Base+0x2d8>
   12bc0:	ldr	r1, [pc, #196]	; 12c8c <flatcc_builder_default_alloc@@Base+0x2dc>
   12bc4:	ldr	r0, [pc, #196]	; 12c90 <flatcc_builder_default_alloc@@Base+0x2e0>
   12bc8:	bl	12084 <__assert_fail@plt>
   12bcc:	sub	r1, r0, r4
   12bd0:	add	r3, r3, #1
   12bd4:	add	r1, r1, lr
   12bd8:	cmp	r2, r3
   12bdc:	str	r1, [ip, #4]!
   12be0:	sub	r0, r0, #4
   12be4:	bne	12c34 <flatcc_builder_default_alloc@@Base+0x284>
   12be8:	ldr	r0, [r5, #136]	; 0x88
   12bec:	sub	r4, r0, r7
   12bf0:	cmp	r4, r0
   12bf4:	bge	12c7c <flatcc_builder_default_alloc@@Base+0x2cc>
   12bf8:	ldr	r0, [r5, #36]	; 0x24
   12bfc:	mov	r2, r8
   12c00:	str	r7, [sp]
   12c04:	mov	r3, r4
   12c08:	ldr	r6, [r5, #44]	; 0x2c
   12c0c:	add	r1, sp, #24
   12c10:	blx	r6
   12c14:	cmp	r0, #0
   12c18:	bne	12c68 <flatcc_builder_default_alloc@@Base+0x2b8>
   12c1c:	mov	r0, r4
   12c20:	str	r4, [r5, #136]	; 0x88
   12c24:	add	sp, sp, #88	; 0x58
   12c28:	pop	{r4, r5, r6, r7, r8, pc}
   12c2c:	sub	ip, r1, #4
   12c30:	mvn	r0, #3
   12c34:	ldr	lr, [ip, #4]
   12c38:	cmp	lr, #0
   12c3c:	bne	12bcc <flatcc_builder_default_alloc@@Base+0x21c>
   12c40:	ldr	r3, [pc, #60]	; 12c84 <flatcc_builder_default_alloc@@Base+0x2d4>
   12c44:	ldr	r2, [pc, #72]	; 12c94 <flatcc_builder_default_alloc@@Base+0x2e4>
   12c48:	ldr	r1, [pc, #60]	; 12c8c <flatcc_builder_default_alloc@@Base+0x2dc>
   12c4c:	ldr	r0, [pc, #68]	; 12c98 <flatcc_builder_default_alloc@@Base+0x2e8>
   12c50:	bl	12084 <__assert_fail@plt>
   12c54:	ldr	r3, [pc, #40]	; 12c84 <flatcc_builder_default_alloc@@Base+0x2d4>
   12c58:	ldr	r2, [pc, #60]	; 12c9c <flatcc_builder_default_alloc@@Base+0x2ec>
   12c5c:	ldr	r1, [pc, #40]	; 12c8c <flatcc_builder_default_alloc@@Base+0x2dc>
   12c60:	ldr	r0, [pc, #56]	; 12ca0 <flatcc_builder_default_alloc@@Base+0x2f0>
   12c64:	bl	12084 <__assert_fail@plt>
   12c68:	ldr	r3, [pc, #52]	; 12ca4 <flatcc_builder_default_alloc@@Base+0x2f4>
   12c6c:	ldr	r2, [pc, #52]	; 12ca8 <flatcc_builder_default_alloc@@Base+0x2f8>
   12c70:	ldr	r1, [pc, #20]	; 12c8c <flatcc_builder_default_alloc@@Base+0x2dc>
   12c74:	ldr	r0, [pc, #28]	; 12c98 <flatcc_builder_default_alloc@@Base+0x2e8>
   12c78:	bl	12084 <__assert_fail@plt>
   12c7c:	bl	120dc <__assert_fail@plt+0x58>
   12c80:	andeq	r8, r1, r4, lsl #25
   12c84:	andeq	r8, r1, r4, lsl #29
   12c88:			; <UNDEFINED> instruction: 0x000005b5
   12c8c:	andeq	r9, r1, ip, lsr r3
   12c90:	andeq	r9, r1, r0, lsl #8
   12c94:			; <UNDEFINED> instruction: 0x000005b7
   12c98:	strdeq	r9, [r1], -ip
   12c9c:			; <UNDEFINED> instruction: 0x000005b1
   12ca0:	strdeq	r9, [r1], -r0
   12ca4:	andeq	r8, r1, r8, lsl #24
   12ca8:	andeq	r0, r0, fp, lsl #5
   12cac:	ldrh	r3, [r0, #128]	; 0x80
   12cb0:	push	{r4, r5, r6, r7, lr}
   12cb4:	sub	sp, sp, #92	; 0x5c
   12cb8:	cmp	r3, #3
   12cbc:	movls	r3, #4
   12cc0:	ldr	lr, [r0, #136]	; 0x88
   12cc4:	mov	ip, #4
   12cc8:	strhls	r3, [r0, #128]	; 0x80
   12ccc:	mov	r4, r0
   12cd0:	lsls	r6, r2, #2
   12cd4:	mov	r0, #1
   12cd8:	add	r5, sp, #12
   12cdc:	str	ip, [sp, #16]
   12ce0:	str	r0, [sp, #20]
   12ce4:	and	r3, lr, #3
   12ce8:	movne	r0, #2
   12cec:	str	ip, [sp, #28]
   12cf0:	addne	ip, r6, ip
   12cf4:	str	r5, [sp, #24]
   12cf8:	strne	r6, [sp, #36]	; 0x24
   12cfc:	strne	r1, [sp, #32]
   12d00:	strne	ip, [sp, #16]
   12d04:	strne	r0, [sp, #20]
   12d08:	movne	r5, r0
   12d0c:	movne	r6, #3
   12d10:	moveq	r5, r0
   12d14:	moveq	r6, #2
   12d18:	cmp	r3, #0
   12d1c:	str	r2, [sp, #12]
   12d20:	beq	12d4c <flatcc_builder_default_alloc@@Base+0x39c>
   12d24:	add	r0, r5, #1
   12d28:	add	r5, sp, #88	; 0x58
   12d2c:	add	r0, r5, r0, lsl #3
   12d30:	ldr	r7, [pc, #204]	; 12e04 <flatcc_builder_default_alloc@@Base+0x454>
   12d34:	mov	r5, r6
   12d38:	add	ip, ip, r3
   12d3c:	str	r3, [r0, #-68]	; 0xffffffbc
   12d40:	str	ip, [sp, #16]
   12d44:	str	r6, [sp, #20]
   12d48:	str	r7, [r0, #-72]	; 0xffffffb8
   12d4c:	cmp	r2, #0
   12d50:	beq	12dac <flatcc_builder_default_alloc@@Base+0x3fc>
   12d54:	ldr	r3, [r1]
   12d58:	cmp	r3, #0
   12d5c:	beq	12d94 <flatcc_builder_default_alloc@@Base+0x3e4>
   12d60:	sub	r6, lr, ip
   12d64:	mov	r0, #0
   12d68:	mvn	lr, #3
   12d6c:	sub	r3, r3, r6
   12d70:	add	r0, r0, #1
   12d74:	add	r3, r3, lr
   12d78:	cmp	r2, r0
   12d7c:	str	r3, [r1]
   12d80:	beq	12da8 <flatcc_builder_default_alloc@@Base+0x3f8>
   12d84:	ldr	r3, [r1, #4]!
   12d88:	sub	lr, lr, #4
   12d8c:	cmp	r3, #0
   12d90:	bne	12d6c <flatcc_builder_default_alloc@@Base+0x3bc>
   12d94:	ldr	r3, [pc, #108]	; 12e08 <flatcc_builder_default_alloc@@Base+0x458>
   12d98:	ldr	r2, [pc, #108]	; 12e0c <flatcc_builder_default_alloc@@Base+0x45c>
   12d9c:	ldr	r1, [pc, #108]	; 12e10 <flatcc_builder_default_alloc@@Base+0x460>
   12da0:	ldr	r0, [pc, #108]	; 12e14 <flatcc_builder_default_alloc@@Base+0x464>
   12da4:	bl	12084 <__assert_fail@plt>
   12da8:	ldr	lr, [r4, #136]	; 0x88
   12dac:	sub	r6, lr, ip
   12db0:	cmp	r6, lr
   12db4:	bge	12e00 <flatcc_builder_default_alloc@@Base+0x450>
   12db8:	ldr	r0, [r4, #36]	; 0x24
   12dbc:	mov	r2, r5
   12dc0:	str	ip, [sp]
   12dc4:	mov	r3, r6
   12dc8:	ldr	r5, [r4, #44]	; 0x2c
   12dcc:	add	r1, sp, #24
   12dd0:	blx	r5
   12dd4:	cmp	r0, #0
   12dd8:	bne	12dec <flatcc_builder_default_alloc@@Base+0x43c>
   12ddc:	mov	r0, r6
   12de0:	str	r6, [r4, #136]	; 0x88
   12de4:	add	sp, sp, #92	; 0x5c
   12de8:	pop	{r4, r5, r6, r7, pc}
   12dec:	ldr	r3, [pc, #36]	; 12e18 <flatcc_builder_default_alloc@@Base+0x468>
   12df0:	ldr	r2, [pc, #36]	; 12e1c <flatcc_builder_default_alloc@@Base+0x46c>
   12df4:	ldr	r1, [pc, #20]	; 12e10 <flatcc_builder_default_alloc@@Base+0x460>
   12df8:	ldr	r0, [pc, #20]	; 12e14 <flatcc_builder_default_alloc@@Base+0x464>
   12dfc:	bl	12084 <__assert_fail@plt>
   12e00:	bl	120dc <__assert_fail@plt+0x58>
   12e04:	andeq	r8, r1, r4, lsl #25
   12e08:	andeq	r8, r1, r4, lsl #29
   12e0c:			; <UNDEFINED> instruction: 0x000005b7
   12e10:	andeq	r9, r1, ip, lsr r3
   12e14:	strdeq	r9, [r1], -ip
   12e18:	andeq	r8, r1, r8, lsl #24
   12e1c:	andeq	r0, r0, fp, lsl #5

00012e20 <flatcc_builder_flush_vtable_cache@@Base>:
   12e20:	ldr	r3, [r0, #116]	; 0x74
   12e24:	cmp	r3, #0
   12e28:	bxeq	lr
   12e2c:	ldr	r2, [r0, #96]	; 0x60
   12e30:	push	{r4, lr}
   12e34:	mov	r1, #0
   12e38:	mov	r4, r0
   12e3c:	ldr	r0, [r0, #92]	; 0x5c
   12e40:	bl	12054 <memset@plt>
   12e44:	mov	r2, #16
   12e48:	mov	r3, #0
   12e4c:	str	r2, [r4, #124]	; 0x7c
   12e50:	str	r3, [r4, #120]	; 0x78
   12e54:	pop	{r4, pc}

00012e58 <flatcc_builder_custom_init@@Base>:
   12e58:	push	{r4, r5, r6, r7, r8, lr}
   12e5c:	mov	r6, r1
   12e60:	mov	r7, r2
   12e64:	mov	r1, #0
   12e68:	mov	r2, #232	; 0xe8
   12e6c:	mov	r4, r0
   12e70:	mov	r5, r3
   12e74:	ldr	r8, [sp, #24]
   12e78:	bl	12054 <memset@plt>
   12e7c:	cmp	r6, #0
   12e80:	moveq	r3, #1
   12e84:	ldreq	r6, [pc, #40]	; 12eb4 <flatcc_builder_custom_init@@Base+0x5c>
   12e88:	addeq	r7, r4, #188	; 0xbc
   12e8c:	str	r8, [r4, #40]	; 0x28
   12e90:	str	r7, [r4, #36]	; 0x24
   12e94:	str	r6, [r4, #44]	; 0x2c
   12e98:	mov	r0, #0
   12e9c:	streq	r3, [r4, #184]	; 0xb8
   12ea0:	ldr	r3, [pc, #16]	; 12eb8 <flatcc_builder_custom_init@@Base+0x60>
   12ea4:	cmp	r5, #0
   12ea8:	moveq	r5, r3
   12eac:	str	r5, [r4, #48]	; 0x30
   12eb0:	pop	{r4, r5, r6, r7, r8, pc}
   12eb4:	andeq	r8, r1, ip, lsl #8
   12eb8:			; <UNDEFINED> instruction: 0x000129b0

00012ebc <flatcc_builder_init@@Base>:
   12ebc:	push	{r4, lr}
   12ec0:	mov	r2, #232	; 0xe8
   12ec4:	mov	r1, #0
   12ec8:	mov	r4, r0
   12ecc:	bl	12054 <memset@plt>
   12ed0:	ldr	r1, [pc, #32]	; 12ef8 <flatcc_builder_init@@Base+0x3c>
   12ed4:	ldr	r3, [pc, #32]	; 12efc <flatcc_builder_init@@Base+0x40>
   12ed8:	mov	r0, #1
   12edc:	add	r2, r4, #188	; 0xbc
   12ee0:	str	r0, [r4, #184]	; 0xb8
   12ee4:	str	r1, [r4, #48]	; 0x30
   12ee8:	str	r2, [r4, #36]	; 0x24
   12eec:	str	r3, [r4, #44]	; 0x2c
   12ef0:	mov	r0, #0
   12ef4:	pop	{r4, pc}
   12ef8:			; <UNDEFINED> instruction: 0x000129b0
   12efc:	andeq	r8, r1, ip, lsl #8

00012f00 <flatcc_builder_custom_reset@@Base>:
   12f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f04:	add	r7, r0, #52	; 0x34
   12f08:	mov	r4, #0
   12f0c:	sub	sp, sp, #12
   12f10:	mov	r5, r0
   12f14:	mov	sl, r1
   12f18:	mov	r8, r2
   12f1c:	mov	r6, r7
   12f20:	mov	r9, r4
   12f24:	mov	fp, #1
   12f28:	b	12f7c <flatcc_builder_custom_reset@@Base+0x7c>
   12f2c:	cmp	r4, #5
   12f30:	cmpne	r8, #0
   12f34:	beq	12f60 <flatcc_builder_custom_reset@@Base+0x60>
   12f38:	ldr	r0, [r5, #40]	; 0x28
   12f3c:	mov	r3, fp
   12f40:	str	r4, [sp]
   12f44:	mov	r2, #1
   12f48:	mov	r1, r6
   12f4c:	ldr	ip, [r5, #48]	; 0x30
   12f50:	blx	ip
   12f54:	cmp	r0, #0
   12f58:	bne	13030 <flatcc_builder_custom_reset@@Base+0x130>
   12f5c:	ldr	r0, [r7, r4, lsl #3]
   12f60:	ldr	r2, [r6, #4]
   12f64:	mov	r1, r9
   12f68:	bl	12054 <memset@plt>
   12f6c:	add	r4, r4, #1
   12f70:	cmp	r4, #8
   12f74:	add	r6, r6, #8
   12f78:	beq	12fa8 <flatcc_builder_custom_reset@@Base+0xa8>
   12f7c:	ldr	r0, [r7, r4, lsl #3]
   12f80:	cmp	r0, #0
   12f84:	bne	12f2c <flatcc_builder_custom_reset@@Base+0x2c>
   12f88:	ldr	r3, [r6, #4]
   12f8c:	cmp	r3, #0
   12f90:	beq	12f6c <flatcc_builder_custom_reset@@Base+0x6c>
   12f94:	ldr	r3, [pc, #156]	; 13038 <flatcc_builder_custom_reset@@Base+0x138>
   12f98:	ldr	r2, [pc, #156]	; 1303c <flatcc_builder_custom_reset@@Base+0x13c>
   12f9c:	ldr	r1, [pc, #156]	; 13040 <flatcc_builder_custom_reset@@Base+0x140>
   12fa0:	ldr	r0, [pc, #156]	; 13044 <flatcc_builder_custom_reset@@Base+0x144>
   12fa4:	bl	12084 <__assert_fail@plt>
   12fa8:	ldr	r2, [r5, #124]	; 0x7c
   12fac:	mov	r3, #0
   12fb0:	ldr	r0, [r5, #60]	; 0x3c
   12fb4:	cmp	r2, r3
   12fb8:	str	r3, [r5, #120]	; 0x78
   12fbc:	ldr	r1, [r5, #76]	; 0x4c
   12fc0:	movne	r3, #16
   12fc4:	ldr	r2, [r5, #52]	; 0x34
   12fc8:	str	r0, [r5, #16]
   12fcc:	ldr	r0, [r5, #184]	; 0xb8
   12fd0:	strne	r3, [r5, #124]	; 0x7c
   12fd4:	mov	r3, #0
   12fd8:	cmp	sl, #0
   12fdc:	strne	r3, [r5, #172]	; 0xac
   12fe0:	strne	r3, [r5, #176]	; 0xb0
   12fe4:	strne	r3, [r5, #180]	; 0xb4
   12fe8:	cmp	r0, #0
   12fec:	stm	r5, {r1, r2}
   12ff0:	strh	r3, [r5, #128]	; 0x80
   12ff4:	str	r3, [r5, #136]	; 0x88
   12ff8:	str	r3, [r5, #140]	; 0x8c
   12ffc:	str	r3, [r5, #156]	; 0x9c
   13000:	str	r3, [r5, #160]	; 0xa0
   13004:	str	r3, [r5, #20]
   13008:	str	r3, [r5, #24]
   1300c:	str	r3, [r5, #148]	; 0x94
   13010:	str	r3, [r5, #152]	; 0x98
   13014:	str	r3, [r5, #32]
   13018:	beq	13028 <flatcc_builder_custom_reset@@Base+0x128>
   1301c:	add	r0, r5, #188	; 0xbc
   13020:	bl	182e4 <flatcc_emitter_reset@@Base>
   13024:	mov	r0, #0
   13028:	add	sp, sp, #12
   1302c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13030:	mvn	r0, #0
   13034:	b	13028 <flatcc_builder_custom_reset@@Base+0x128>
   13038:	andeq	r8, r1, r4, lsr #29
   1303c:			; <UNDEFINED> instruction: 0x000001b2
   13040:	andeq	r9, r1, ip, lsr r3
   13044:	andeq	r9, r1, r0, lsl r4

00013048 <flatcc_builder_reset@@Base>:
   13048:	push	{r4, r5, r6, r7, r8, lr}
   1304c:	mov	r5, r0
   13050:	add	r4, r0, #52	; 0x34
   13054:	add	r6, r0, #116	; 0x74
   13058:	mov	r7, #0
   1305c:	b	13078 <flatcc_builder_reset@@Base+0x30>
   13060:	ldr	r2, [r4, #4]
   13064:	mov	r1, r7
   13068:	bl	12054 <memset@plt>
   1306c:	add	r4, r4, #8
   13070:	cmp	r6, r4
   13074:	beq	130a4 <flatcc_builder_reset@@Base+0x5c>
   13078:	ldr	r0, [r4]
   1307c:	cmp	r0, #0
   13080:	bne	13060 <flatcc_builder_reset@@Base+0x18>
   13084:	ldr	r3, [r4, #4]
   13088:	cmp	r3, #0
   1308c:	beq	1306c <flatcc_builder_reset@@Base+0x24>
   13090:	ldr	r3, [pc, #128]	; 13118 <flatcc_builder_reset@@Base+0xd0>
   13094:	ldr	r2, [pc, #128]	; 1311c <flatcc_builder_reset@@Base+0xd4>
   13098:	ldr	r1, [pc, #128]	; 13120 <flatcc_builder_reset@@Base+0xd8>
   1309c:	ldr	r0, [pc, #128]	; 13124 <flatcc_builder_reset@@Base+0xdc>
   130a0:	bl	12084 <__assert_fail@plt>
   130a4:	ldr	r2, [r5, #124]	; 0x7c
   130a8:	mov	r3, #0
   130ac:	cmp	r2, r3
   130b0:	str	r3, [r5, #120]	; 0x78
   130b4:	movne	r3, #16
   130b8:	strne	r3, [r5, #124]	; 0x7c
   130bc:	ldr	r1, [r5, #76]	; 0x4c
   130c0:	ldr	r3, [r5, #184]	; 0xb8
   130c4:	ldr	r2, [r5, #52]	; 0x34
   130c8:	ldr	r0, [r5, #60]	; 0x3c
   130cc:	cmp	r3, #0
   130d0:	mov	r3, #0
   130d4:	str	r0, [r5, #16]
   130d8:	stm	r5, {r1, r2}
   130dc:	strh	r3, [r5, #128]	; 0x80
   130e0:	str	r3, [r5, #136]	; 0x88
   130e4:	str	r3, [r5, #140]	; 0x8c
   130e8:	str	r3, [r5, #156]	; 0x9c
   130ec:	str	r3, [r5, #160]	; 0xa0
   130f0:	str	r3, [r5, #20]
   130f4:	str	r3, [r5, #24]
   130f8:	str	r3, [r5, #148]	; 0x94
   130fc:	str	r3, [r5, #152]	; 0x98
   13100:	str	r3, [r5, #32]
   13104:	beq	13110 <flatcc_builder_reset@@Base+0xc8>
   13108:	add	r0, r5, #188	; 0xbc
   1310c:	bl	182e4 <flatcc_emitter_reset@@Base>
   13110:	mov	r0, #0
   13114:	pop	{r4, r5, r6, r7, r8, pc}
   13118:	andeq	r8, r1, r4, lsr #29
   1311c:			; <UNDEFINED> instruction: 0x000001b2
   13120:	andeq	r9, r1, ip, lsr r3
   13124:	andeq	r9, r1, r0, lsl r4

00013128 <flatcc_builder_clear@@Base>:
   13128:	push	{r4, r5, r6, r7, r8, lr}
   1312c:	mov	r4, #0
   13130:	sub	sp, sp, #8
   13134:	mov	r6, r0
   13138:	add	r5, r0, #52	; 0x34
   1313c:	mov	r8, r4
   13140:	ldr	r0, [r6, #40]	; 0x28
   13144:	mov	r1, r5
   13148:	str	r4, [sp]
   1314c:	mov	r3, r8
   13150:	add	r4, r4, #1
   13154:	ldr	r7, [r6, #48]	; 0x30
   13158:	mov	r2, #0
   1315c:	blx	r7
   13160:	cmp	r4, #8
   13164:	add	r5, r5, #8
   13168:	bne	13140 <flatcc_builder_clear@@Base+0x18>
   1316c:	ldr	r3, [r6, #184]	; 0xb8
   13170:	cmp	r3, #0
   13174:	beq	13180 <flatcc_builder_clear@@Base+0x58>
   13178:	add	r0, r6, #188	; 0xbc
   1317c:	bl	183a0 <flatcc_emitter_clear@@Base>
   13180:	mov	r0, r6
   13184:	mov	r2, #232	; 0xe8
   13188:	mov	r1, #0
   1318c:	add	sp, sp, #8
   13190:	pop	{r4, r5, r6, r7, r8, lr}
   13194:	b	12054 <memset@plt>

00013198 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13198:	push	{r4, r5, r6, r7, r8, lr}
   1319c:	add	r4, r1, #3
   131a0:	bic	r4, r4, #3
   131a4:	ldr	r7, [r0, #228]	; 0xe4
   131a8:	add	r4, r4, #4
   131ac:	ldr	r3, [r0, #112]	; 0x70
   131b0:	add	r2, r4, r7
   131b4:	cmp	r2, r3
   131b8:	sub	sp, sp, #8
   131bc:	mov	r6, r0
   131c0:	bhi	13208 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   131c4:	ldr	r8, [r6, #108]	; 0x6c
   131c8:	adds	r5, r8, r7
   131cc:	beq	13230 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   131d0:	mov	r2, r4
   131d4:	mov	r1, #0
   131d8:	mov	r0, r5
   131dc:	bl	12054 <memset@plt>
   131e0:	ldr	r3, [r6, #224]	; 0xe0
   131e4:	add	r0, r5, #4
   131e8:	str	r3, [r8, r7]
   131ec:	ldr	r3, [r6, #228]	; 0xe4
   131f0:	add	r4, r4, r3
   131f4:	add	r3, r3, #4
   131f8:	str	r4, [r6, #228]	; 0xe4
   131fc:	str	r3, [r6, #224]	; 0xe0
   13200:	add	sp, sp, #8
   13204:	pop	{r4, r5, r6, r7, r8, pc}
   13208:	mov	r3, #7
   1320c:	ldr	r0, [r0, #40]	; 0x28
   13210:	add	r1, r6, #108	; 0x6c
   13214:	str	r3, [sp]
   13218:	mov	r3, #0
   1321c:	ldr	r5, [r6, #48]	; 0x30
   13220:	blx	r5
   13224:	cmp	r0, #0
   13228:	beq	131c4 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   1322c:	bl	12090 <__assert_fail@plt+0xc>
   13230:	mov	r0, r5
   13234:	b	13200 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00013238 <flatcc_builder_enter_user_frame@@Base>:
   13238:	push	{r4, r5, r6, r7, lr}
   1323c:	add	r4, r1, #3
   13240:	bic	r4, r4, #3
   13244:	ldr	r6, [r0, #228]	; 0xe4
   13248:	add	r4, r4, #4
   1324c:	ldr	r3, [r0, #112]	; 0x70
   13250:	add	r2, r4, r6
   13254:	cmp	r2, r3
   13258:	sub	sp, sp, #12
   1325c:	mov	r5, r0
   13260:	bhi	132a0 <flatcc_builder_enter_user_frame@@Base+0x68>
   13264:	ldr	r7, [r5, #108]	; 0x6c
   13268:	adds	r0, r7, r6
   1326c:	beq	13298 <flatcc_builder_enter_user_frame@@Base+0x60>
   13270:	mov	r2, r4
   13274:	mov	r1, #0
   13278:	bl	12054 <memset@plt>
   1327c:	ldr	r3, [r5, #224]	; 0xe0
   13280:	str	r3, [r7, r6]
   13284:	ldr	r0, [r5, #228]	; 0xe4
   13288:	add	r4, r4, r0
   1328c:	add	r0, r0, #4
   13290:	str	r4, [r5, #228]	; 0xe4
   13294:	str	r0, [r5, #224]	; 0xe0
   13298:	add	sp, sp, #12
   1329c:	pop	{r4, r5, r6, r7, pc}
   132a0:	mov	r3, #7
   132a4:	ldr	r0, [r0, #40]	; 0x28
   132a8:	add	r1, r5, #108	; 0x6c
   132ac:	str	r3, [sp]
   132b0:	mov	r3, #0
   132b4:	ldr	r7, [r5, #48]	; 0x30
   132b8:	blx	r7
   132bc:	cmp	r0, #0
   132c0:	beq	13264 <flatcc_builder_enter_user_frame@@Base+0x2c>
   132c4:	bl	12090 <__assert_fail@plt+0xc>

000132c8 <flatcc_builder_exit_user_frame@@Base>:
   132c8:	ldr	r3, [r0, #224]	; 0xe0
   132cc:	cmp	r3, #0
   132d0:	beq	132f4 <flatcc_builder_exit_user_frame@@Base+0x2c>
   132d4:	ldr	r2, [r0, #108]	; 0x6c
   132d8:	sub	r1, r3, #4
   132dc:	add	r3, r2, r3
   132e0:	str	r1, [r0, #228]	; 0xe4
   132e4:	ldr	r3, [r3, #-4]
   132e8:	str	r3, [r0, #224]	; 0xe0
   132ec:	mov	r0, r3
   132f0:	bx	lr
   132f4:	push	{r4, lr}
   132f8:	bl	12128 <__assert_fail@plt+0xa4>

000132fc <flatcc_builder_exit_user_frame_at@@Base>:
   132fc:	ldr	r3, [r0, #224]	; 0xe0
   13300:	push	{r4, lr}
   13304:	cmp	r3, r1
   13308:	bcc	13338 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   1330c:	cmp	r1, #0
   13310:	str	r1, [r0, #224]	; 0xe0
   13314:	beq	1334c <flatcc_builder_exit_user_frame_at@@Base+0x50>
   13318:	ldr	r3, [r0, #108]	; 0x6c
   1331c:	sub	r2, r1, #4
   13320:	add	r1, r3, r1
   13324:	str	r2, [r0, #228]	; 0xe4
   13328:	ldr	r3, [r1, #-4]
   1332c:	str	r3, [r0, #224]	; 0xe0
   13330:	mov	r0, r3
   13334:	pop	{r4, pc}
   13338:	ldr	r3, [pc, #16]	; 13350 <flatcc_builder_exit_user_frame_at@@Base+0x54>
   1333c:	ldr	r2, [pc, #16]	; 13354 <flatcc_builder_exit_user_frame_at@@Base+0x58>
   13340:	ldr	r1, [pc, #16]	; 13358 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13344:	ldr	r0, [pc, #16]	; 1335c <flatcc_builder_exit_user_frame_at@@Base+0x60>
   13348:	bl	12084 <__assert_fail@plt>
   1334c:	bl	12128 <__assert_fail@plt+0xa4>
   13350:	andeq	r8, r1, r0, asr #29
   13354:	andeq	r0, r0, r7, lsr #4
   13358:	andeq	r9, r1, ip, lsr r3
   1335c:	andeq	r9, r1, r4, lsr #8

00013360 <flatcc_builder_get_current_user_frame@@Base>:
   13360:	ldr	r0, [r0, #224]	; 0xe0
   13364:	bx	lr

00013368 <flatcc_builder_get_user_frame_ptr@@Base>:
   13368:	ldr	r0, [r0, #108]	; 0x6c
   1336c:	add	r0, r0, r1
   13370:	bx	lr

00013374 <flatcc_builder_embed_buffer@@Base>:
   13374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13378:	sub	sp, sp, #92	; 0x5c
   1337c:	cmp	r1, #0
   13380:	ldr	r6, [sp, #132]	; 0x84
   13384:	mov	r8, r2
   13388:	mov	r5, r0
   1338c:	mov	r7, r3
   13390:	ldr	r2, [r0, #152]	; 0x98
   13394:	and	r6, r6, #2
   13398:	ldrh	r4, [sp, #128]	; 0x80
   1339c:	bne	133ac <flatcc_builder_embed_buffer@@Base+0x38>
   133a0:	ldrh	r1, [r0, #132]	; 0x84
   133a4:	cmp	r1, #0
   133a8:	beq	13534 <flatcc_builder_embed_buffer@@Base+0x1c0>
   133ac:	cmp	r4, #4
   133b0:	movcc	r4, #4
   133b4:	cmp	r1, r4
   133b8:	movcs	r4, r1
   133bc:	cmp	r2, #0
   133c0:	bne	13428 <flatcc_builder_embed_buffer@@Base+0xb4>
   133c4:	ldr	r9, [r5, #140]	; 0x8c
   133c8:	sub	r1, r1, #1
   133cc:	ands	r1, r1, r9
   133d0:	beq	13428 <flatcc_builder_embed_buffer@@Base+0xb4>
   133d4:	add	r3, r9, r1
   133d8:	ldr	sl, [pc, #420]	; 13584 <flatcc_builder_embed_buffer@@Base+0x210>
   133dc:	mov	r2, #1
   133e0:	cmp	r9, r3
   133e4:	str	r1, [sp, #16]
   133e8:	str	r1, [sp, #28]
   133ec:	str	sl, [sp, #24]
   133f0:	str	r3, [r5, #140]	; 0x8c
   133f4:	str	r2, [sp, #20]
   133f8:	bgt	13558 <flatcc_builder_embed_buffer@@Base+0x1e4>
   133fc:	ldr	r0, [r5, #36]	; 0x24
   13400:	mov	r3, r9
   13404:	str	r1, [sp]
   13408:	add	r1, sp, #24
   1340c:	ldr	fp, [r5, #44]	; 0x2c
   13410:	blx	fp
   13414:	cmp	r0, #0
   13418:	bne	1355c <flatcc_builder_embed_buffer@@Base+0x1e8>
   1341c:	cmn	r9, #1
   13420:	beq	13570 <flatcc_builder_embed_buffer@@Base+0x1fc>
   13424:	ldr	r2, [r5, #152]	; 0x98
   13428:	ldr	r1, [r5, #136]	; 0x88
   1342c:	cmp	r6, #0
   13430:	movne	r6, #4
   13434:	moveq	r6, #0
   13438:	sub	r3, r1, r7
   1343c:	sub	r6, r3, r6
   13440:	sub	r4, r4, #1
   13444:	and	r4, r4, r6
   13448:	mov	r3, #0
   1344c:	add	r0, r7, r4
   13450:	cmp	r2, #0
   13454:	str	r0, [sp, #12]
   13458:	str	r3, [sp, #16]
   1345c:	str	r3, [sp, #20]
   13460:	bne	1350c <flatcc_builder_embed_buffer@@Base+0x198>
   13464:	mov	r3, r2
   13468:	mov	ip, #2
   1346c:	mov	r0, #1
   13470:	cmp	r7, #0
   13474:	beq	134a0 <flatcc_builder_embed_buffer@@Base+0x12c>
   13478:	add	r2, r2, #1
   1347c:	add	lr, sp, #88	; 0x58
   13480:	add	r2, lr, r2, lsl #3
   13484:	add	r3, r3, r7
   13488:	str	r3, [sp, #16]
   1348c:	str	r8, [r2, #-72]	; 0xffffffb8
   13490:	str	r7, [r2, #-68]	; 0xffffffbc
   13494:	mov	r2, r0
   13498:	str	r0, [sp, #20]
   1349c:	mov	r0, ip
   134a0:	cmp	r4, #0
   134a4:	beq	134d0 <flatcc_builder_embed_buffer@@Base+0x15c>
   134a8:	add	r2, r2, #1
   134ac:	add	ip, sp, #88	; 0x58
   134b0:	add	ip, ip, r2, lsl #3
   134b4:	ldr	lr, [pc, #200]	; 13584 <flatcc_builder_embed_buffer@@Base+0x210>
   134b8:	mov	r2, r0
   134bc:	add	r3, r3, r4
   134c0:	str	r3, [sp, #16]
   134c4:	str	r4, [ip, #-68]	; 0xffffffbc
   134c8:	str	lr, [ip, #-72]	; 0xffffffb8
   134cc:	str	r0, [sp, #20]
   134d0:	sub	r4, r1, r3
   134d4:	cmp	r1, r4
   134d8:	ble	13540 <flatcc_builder_embed_buffer@@Base+0x1cc>
   134dc:	ldr	r0, [r5, #36]	; 0x24
   134e0:	add	r1, sp, #24
   134e4:	str	r3, [sp]
   134e8:	mov	r3, r4
   134ec:	ldr	r6, [r5, #44]	; 0x2c
   134f0:	blx	r6
   134f4:	cmp	r0, #0
   134f8:	bne	13544 <flatcc_builder_embed_buffer@@Base+0x1d0>
   134fc:	mov	r0, r4
   13500:	str	r4, [r5, #136]	; 0x88
   13504:	add	sp, sp, #92	; 0x5c
   13508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1350c:	mov	r3, #4
   13510:	add	r0, sp, #12
   13514:	mov	r2, #1
   13518:	str	r0, [sp, #24]
   1351c:	str	r3, [sp, #16]
   13520:	str	r3, [sp, #28]
   13524:	str	r2, [sp, #20]
   13528:	mov	ip, #3
   1352c:	mov	r0, #2
   13530:	b	13470 <flatcc_builder_embed_buffer@@Base+0xfc>
   13534:	cmp	r4, #4
   13538:	movcc	r4, #4
   1353c:	b	13428 <flatcc_builder_embed_buffer@@Base+0xb4>
   13540:	bl	120dc <__assert_fail@plt+0x58>
   13544:	ldr	r3, [pc, #60]	; 13588 <flatcc_builder_embed_buffer@@Base+0x214>
   13548:	ldr	r2, [pc, #60]	; 1358c <flatcc_builder_embed_buffer@@Base+0x218>
   1354c:	ldr	r1, [pc, #60]	; 13590 <flatcc_builder_embed_buffer@@Base+0x21c>
   13550:	ldr	r0, [pc, #60]	; 13594 <flatcc_builder_embed_buffer@@Base+0x220>
   13554:	bl	12084 <__assert_fail@plt>
   13558:	bl	120b4 <__assert_fail@plt+0x30>
   1355c:	ldr	r3, [pc, #52]	; 13598 <flatcc_builder_embed_buffer@@Base+0x224>
   13560:	ldr	r2, [pc, #52]	; 1359c <flatcc_builder_embed_buffer@@Base+0x228>
   13564:	ldr	r1, [pc, #36]	; 13590 <flatcc_builder_embed_buffer@@Base+0x21c>
   13568:	ldr	r0, [pc, #36]	; 13594 <flatcc_builder_embed_buffer@@Base+0x220>
   1356c:	bl	12084 <__assert_fail@plt>
   13570:	add	r3, sl, #608	; 0x260
   13574:	ldr	r2, [pc, #36]	; 135a0 <flatcc_builder_embed_buffer@@Base+0x22c>
   13578:	ldr	r1, [pc, #16]	; 13590 <flatcc_builder_embed_buffer@@Base+0x21c>
   1357c:	ldr	r0, [pc, #16]	; 13594 <flatcc_builder_embed_buffer@@Base+0x220>
   13580:	bl	12084 <__assert_fail@plt>
   13584:	andeq	r8, r1, r4, lsl #25
   13588:	andeq	r8, r1, r8, lsl #24
   1358c:	andeq	r0, r0, fp, lsl #5
   13590:	andeq	r9, r1, ip, lsr r3
   13594:	strdeq	r9, [r1], -ip
   13598:	strdeq	r8, [r1], -ip
   1359c:	andeq	r0, r0, r5, lsr #5
   135a0:			; <UNDEFINED> instruction: 0x000002be

000135a4 <flatcc_builder_create_buffer@@Base>:
   135a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a8:	sub	sp, sp, #100	; 0x64
   135ac:	mov	ip, #0
   135b0:	ldr	r5, [sp, #140]	; 0x8c
   135b4:	cmp	r2, #0
   135b8:	mov	r6, r0
   135bc:	mov	r8, r1
   135c0:	mov	sl, r3
   135c4:	and	r7, r5, #1
   135c8:	str	ip, [sp, #20]
   135cc:	ldrh	r4, [sp, #136]	; 0x88
   135d0:	bne	135e0 <flatcc_builder_create_buffer@@Base+0x3c>
   135d4:	ldrh	r2, [r0, #132]	; 0x84
   135d8:	cmp	r2, ip
   135dc:	beq	137ec <flatcc_builder_create_buffer@@Base+0x248>
   135e0:	cmp	r4, #4
   135e4:	movcc	r4, #4
   135e8:	cmp	r2, r4
   135ec:	movcs	r4, r2
   135f0:	cmp	r7, #0
   135f4:	bne	13658 <flatcc_builder_create_buffer@@Base+0xb4>
   135f8:	ldr	r9, [r6, #140]	; 0x8c
   135fc:	sub	r2, r2, #1
   13600:	ands	r3, r2, r9
   13604:	beq	13658 <flatcc_builder_create_buffer@@Base+0xb4>
   13608:	add	r1, r9, r3
   1360c:	ldr	fp, [pc, #584]	; 1385c <flatcc_builder_create_buffer@@Base+0x2b8>
   13610:	mov	r2, #1
   13614:	cmp	r9, r1
   13618:	str	r3, [sp, #24]
   1361c:	str	r3, [sp, #36]	; 0x24
   13620:	str	fp, [sp, #32]
   13624:	str	r1, [r6, #140]	; 0x8c
   13628:	str	r2, [sp, #28]
   1362c:	bgt	13844 <flatcc_builder_create_buffer@@Base+0x2a0>
   13630:	ldr	r0, [r6, #36]	; 0x24
   13634:	add	r1, sp, #32
   13638:	str	r3, [sp]
   1363c:	mov	r3, r9
   13640:	ldr	ip, [r6, #44]	; 0x2c
   13644:	blx	ip
   13648:	cmp	r0, #0
   1364c:	bne	13848 <flatcc_builder_create_buffer@@Base+0x2a4>
   13650:	cmn	r9, #1
   13654:	beq	13804 <flatcc_builder_create_buffer@@Base+0x260>
   13658:	ldrh	r3, [r6, #128]	; 0x80
   1365c:	ldr	r0, [r6, #136]	; 0x88
   13660:	uxtb	lr, r7
   13664:	cmp	r3, r4
   13668:	strhcc	r4, [r6, #128]	; 0x80
   1366c:	cmp	r8, #0
   13670:	ldreq	r1, [sp, #20]
   13674:	ldrne	r1, [r8]
   13678:	ldrne	r3, [r8]
   1367c:	strne	r3, [sp, #20]
   13680:	cmp	r1, #0
   13684:	movne	r1, #4
   13688:	moveq	r1, #0
   1368c:	ands	r5, r5, #2
   13690:	bne	137b4 <flatcc_builder_create_buffer@@Base+0x210>
   13694:	sub	r3, r4, #1
   13698:	sub	r4, r0, #4
   1369c:	cmp	lr, #0
   136a0:	sub	r4, r4, r1
   136a4:	and	r4, r4, r3
   136a8:	moveq	r8, #3
   136ac:	moveq	ip, #2
   136b0:	moveq	r2, #1
   136b4:	moveq	r3, #4
   136b8:	bne	137c4 <flatcc_builder_create_buffer@@Base+0x220>
   136bc:	add	r5, r5, #1
   136c0:	add	r9, sp, #96	; 0x60
   136c4:	add	r5, r9, r5, lsl #3
   136c8:	add	fp, sp, #12
   136cc:	mov	r9, #4
   136d0:	cmp	r1, #0
   136d4:	str	r3, [sp, #24]
   136d8:	str	fp, [r5, #-72]	; 0xffffffb8
   136dc:	str	r9, [r5, #-68]	; 0xffffffbc
   136e0:	str	r2, [sp, #28]
   136e4:	beq	13714 <flatcc_builder_create_buffer@@Base+0x170>
   136e8:	add	r2, r2, #1
   136ec:	add	r5, sp, #96	; 0x60
   136f0:	add	r2, r5, r2, lsl #3
   136f4:	add	r3, r3, r1
   136f8:	add	r5, sp, #20
   136fc:	str	r3, [sp, #24]
   13700:	str	r1, [r2, #-68]	; 0xffffffbc
   13704:	str	r5, [r2, #-72]	; 0xffffffb8
   13708:	mov	r2, ip
   1370c:	str	ip, [sp, #28]
   13710:	mov	ip, r8
   13714:	cmp	r4, #0
   13718:	beq	13744 <flatcc_builder_create_buffer@@Base+0x1a0>
   1371c:	add	r2, r2, #1
   13720:	add	r1, sp, #96	; 0x60
   13724:	add	r1, r1, r2, lsl #3
   13728:	ldr	r5, [pc, #300]	; 1385c <flatcc_builder_create_buffer@@Base+0x2b8>
   1372c:	mov	r2, ip
   13730:	add	r3, r3, r4
   13734:	str	r3, [sp, #24]
   13738:	str	r4, [r1, #-68]	; 0xffffffbc
   1373c:	str	r5, [r1, #-72]	; 0xffffffb8
   13740:	str	ip, [sp, #28]
   13744:	sub	r4, r0, r3
   13748:	cmp	lr, #0
   1374c:	mov	r1, r4
   13750:	beq	137f8 <flatcc_builder_create_buffer@@Base+0x254>
   13754:	cmp	r7, #0
   13758:	add	r1, r4, #4
   1375c:	beq	137f8 <flatcc_builder_create_buffer@@Base+0x254>
   13760:	ldr	ip, [r6, #144]	; 0x90
   13764:	sub	ip, ip, r1
   13768:	sub	sl, sl, r1
   1376c:	cmp	r4, r0
   13770:	str	sl, [sp, #12]
   13774:	str	ip, [sp, #16]
   13778:	bge	13818 <flatcc_builder_create_buffer@@Base+0x274>
   1377c:	ldr	r0, [r6, #36]	; 0x24
   13780:	add	r1, sp, #32
   13784:	str	r3, [sp]
   13788:	mov	r3, r4
   1378c:	ldr	r5, [r6, #44]	; 0x2c
   13790:	blx	r5
   13794:	cmp	r0, #0
   13798:	bne	1381c <flatcc_builder_create_buffer@@Base+0x278>
   1379c:	cmp	r4, #0
   137a0:	str	r4, [r6, #136]	; 0x88
   137a4:	beq	13830 <flatcc_builder_create_buffer@@Base+0x28c>
   137a8:	mov	r0, r4
   137ac:	add	sp, sp, #100	; 0x64
   137b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137b4:	sub	r3, r0, #8
   137b8:	sub	r4, r4, #1
   137bc:	sub	r3, r3, r1
   137c0:	and	r4, r4, r3
   137c4:	add	r3, sp, #16
   137c8:	mov	r8, #4
   137cc:	mov	r5, #1
   137d0:	str	r3, [sp, #32]
   137d4:	str	r8, [sp, #36]	; 0x24
   137d8:	mov	lr, r5
   137dc:	mov	ip, #3
   137e0:	mov	r2, #2
   137e4:	mov	r3, #8
   137e8:	b	136bc <flatcc_builder_create_buffer@@Base+0x118>
   137ec:	cmp	r4, #4
   137f0:	movcc	r4, #4
   137f4:	b	13658 <flatcc_builder_create_buffer@@Base+0xb4>
   137f8:	ldr	ip, [r6, #140]	; 0x8c
   137fc:	sub	ip, ip, r1
   13800:	b	13768 <flatcc_builder_create_buffer@@Base+0x1c4>
   13804:	add	r3, fp, #608	; 0x260
   13808:	ldr	r2, [pc, #80]	; 13860 <flatcc_builder_create_buffer@@Base+0x2bc>
   1380c:	ldr	r1, [pc, #80]	; 13864 <flatcc_builder_create_buffer@@Base+0x2c0>
   13810:	ldr	r0, [pc, #80]	; 13868 <flatcc_builder_create_buffer@@Base+0x2c4>
   13814:	bl	12084 <__assert_fail@plt>
   13818:	bl	120dc <__assert_fail@plt+0x58>
   1381c:	ldr	r3, [pc, #72]	; 1386c <flatcc_builder_create_buffer@@Base+0x2c8>
   13820:	ldr	r2, [pc, #72]	; 13870 <flatcc_builder_create_buffer@@Base+0x2cc>
   13824:	ldr	r1, [pc, #56]	; 13864 <flatcc_builder_create_buffer@@Base+0x2c0>
   13828:	ldr	r0, [pc, #56]	; 13868 <flatcc_builder_create_buffer@@Base+0x2c4>
   1382c:	bl	12084 <__assert_fail@plt>
   13830:	ldr	r3, [pc, #60]	; 13874 <flatcc_builder_create_buffer@@Base+0x2d0>
   13834:	mov	r2, #772	; 0x304
   13838:	ldr	r1, [pc, #36]	; 13864 <flatcc_builder_create_buffer@@Base+0x2c0>
   1383c:	ldr	r0, [pc, #36]	; 13868 <flatcc_builder_create_buffer@@Base+0x2c4>
   13840:	bl	12084 <__assert_fail@plt>
   13844:	bl	120b4 <__assert_fail@plt+0x30>
   13848:	ldr	r3, [pc, #40]	; 13878 <flatcc_builder_create_buffer@@Base+0x2d4>
   1384c:	ldr	r2, [pc, #40]	; 1387c <flatcc_builder_create_buffer@@Base+0x2d8>
   13850:	ldr	r1, [pc, #12]	; 13864 <flatcc_builder_create_buffer@@Base+0x2c0>
   13854:	ldr	r0, [pc, #12]	; 13868 <flatcc_builder_create_buffer@@Base+0x2c4>
   13858:	bl	12084 <__assert_fail@plt>
   1385c:	andeq	r8, r1, r4, lsl #25
   13860:			; <UNDEFINED> instruction: 0x000002be
   13864:	andeq	r9, r1, ip, lsr r3
   13868:	strdeq	r9, [r1], -ip
   1386c:	andeq	r8, r1, r8, lsl #24
   13870:	andeq	r0, r0, fp, lsl #5
   13874:	strdeq	r8, [r1], -r4
   13878:	strdeq	r8, [r1], -ip
   1387c:	andeq	r0, r0, r5, lsr #5

00013880 <flatcc_builder_create_struct@@Base>:
   13880:	cmp	r3, #0
   13884:	push	{r4, r5, r6, lr}
   13888:	sub	sp, sp, #80	; 0x50
   1388c:	beq	13978 <flatcc_builder_create_struct@@Base+0xf8>
   13890:	mov	ip, r2
   13894:	ldrh	r2, [r0, #128]	; 0x80
   13898:	mov	r5, r0
   1389c:	cmp	r2, r3
   138a0:	strhcc	r3, [r0, #128]	; 0x80
   138a4:	ldr	r0, [r0, #136]	; 0x88
   138a8:	mov	r2, #0
   138ac:	sub	r3, r3, #1
   138b0:	sub	r4, r0, ip
   138b4:	cmp	ip, #0
   138b8:	and	r3, r3, r4
   138bc:	str	r2, [sp, #8]
   138c0:	str	r2, [sp, #12]
   138c4:	bne	13938 <flatcc_builder_create_struct@@Base+0xb8>
   138c8:	cmp	r3, #0
   138cc:	movne	r2, #1
   138d0:	movne	r1, ip
   138d4:	beq	13960 <flatcc_builder_create_struct@@Base+0xe0>
   138d8:	add	r1, r1, #1
   138dc:	add	r4, sp, #80	; 0x50
   138e0:	add	ip, ip, r3
   138e4:	add	r1, r4, r1, lsl #3
   138e8:	ldr	lr, [pc, #156]	; 1398c <flatcc_builder_create_struct@@Base+0x10c>
   138ec:	sub	r4, r0, ip
   138f0:	str	r3, [r1, #-68]	; 0xffffffbc
   138f4:	str	ip, [sp, #8]
   138f8:	str	r2, [sp, #12]
   138fc:	str	lr, [r1, #-72]	; 0xffffffb8
   13900:	cmp	r0, r4
   13904:	ble	13960 <flatcc_builder_create_struct@@Base+0xe0>
   13908:	ldr	r0, [r5, #36]	; 0x24
   1390c:	mov	r3, r4
   13910:	str	ip, [sp]
   13914:	add	r1, sp, #16
   13918:	ldr	r6, [r5, #44]	; 0x2c
   1391c:	blx	r6
   13920:	cmp	r0, #0
   13924:	bne	13964 <flatcc_builder_create_struct@@Base+0xe4>
   13928:	mov	r0, r4
   1392c:	str	r4, [r5, #136]	; 0x88
   13930:	add	sp, sp, #80	; 0x50
   13934:	pop	{r4, r5, r6, pc}
   13938:	cmp	r3, r2
   1393c:	mov	r2, #1
   13940:	str	r1, [sp, #16]
   13944:	str	r2, [sp, #12]
   13948:	movne	r1, r2
   1394c:	str	ip, [sp, #8]
   13950:	str	ip, [sp, #20]
   13954:	movne	r2, #2
   13958:	beq	13900 <flatcc_builder_create_struct@@Base+0x80>
   1395c:	b	138d8 <flatcc_builder_create_struct@@Base+0x58>
   13960:	bl	120dc <__assert_fail@plt+0x58>
   13964:	ldr	r3, [pc, #36]	; 13990 <flatcc_builder_create_struct@@Base+0x110>
   13968:	ldr	r2, [pc, #36]	; 13994 <flatcc_builder_create_struct@@Base+0x114>
   1396c:	ldr	r1, [pc, #36]	; 13998 <flatcc_builder_create_struct@@Base+0x118>
   13970:	ldr	r0, [pc, #36]	; 1399c <flatcc_builder_create_struct@@Base+0x11c>
   13974:	bl	12084 <__assert_fail@plt>
   13978:	ldr	r3, [pc, #32]	; 139a0 <flatcc_builder_create_struct@@Base+0x120>
   1397c:	ldr	r2, [pc, #32]	; 139a4 <flatcc_builder_create_struct@@Base+0x124>
   13980:	ldr	r1, [pc, #16]	; 13998 <flatcc_builder_create_struct@@Base+0x118>
   13984:	ldr	r0, [pc, #28]	; 139a8 <flatcc_builder_create_struct@@Base+0x128>
   13988:	bl	12084 <__assert_fail@plt>
   1398c:	andeq	r8, r1, r4, lsl #25
   13990:	andeq	r8, r1, r8, lsl #24
   13994:	andeq	r0, r0, fp, lsl #5
   13998:	andeq	r9, r1, ip, lsr r3
   1399c:	strdeq	r9, [r1], -ip
   139a0:	andeq	r8, r1, r4, lsl pc
   139a4:	andeq	r0, r0, pc, lsl #6
   139a8:	andeq	r9, r1, r4, asr #8

000139ac <flatcc_builder_start_buffer@@Base>:
   139ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   139b0:	mov	r4, r0
   139b4:	ldr	r0, [r0, #156]	; 0x9c
   139b8:	ldr	ip, [r4, #160]	; 0xa0
   139bc:	mov	r5, r1
   139c0:	add	r1, r0, #1
   139c4:	cmp	r1, ip
   139c8:	sub	sp, sp, #8
   139cc:	mov	r7, r2
   139d0:	mov	r6, r3
   139d4:	str	r1, [r4, #156]	; 0x9c
   139d8:	ldrh	r8, [r4, #128]	; 0x80
   139dc:	ble	13a4c <flatcc_builder_start_buffer@@Base+0xa0>
   139e0:	ldr	r3, [r4, #176]	; 0xb0
   139e4:	cmp	r3, #0
   139e8:	cmpgt	r1, r3
   139ec:	movgt	r3, #1
   139f0:	movle	r3, #0
   139f4:	bgt	13b28 <flatcc_builder_start_buffer@@Base+0x17c>
   139f8:	add	r0, r0, r0, lsl #3
   139fc:	ldr	r1, [r4, #88]	; 0x58
   13a00:	lsl	r9, r0, #2
   13a04:	add	r2, r9, #36	; 0x24
   13a08:	cmp	r2, r1
   13a0c:	bhi	13b04 <flatcc_builder_start_buffer@@Base+0x158>
   13a10:	ldr	r3, [r4, #84]	; 0x54
   13a14:	add	r3, r3, r9
   13a18:	cmp	r3, #0
   13a1c:	str	r3, [r4, #32]
   13a20:	beq	13b28 <flatcc_builder_start_buffer@@Base+0x17c>
   13a24:	ldr	r2, [r4, #88]	; 0x58
   13a28:	ldr	r0, [pc, #256]	; 13b30 <flatcc_builder_start_buffer@@Base+0x184>
   13a2c:	ldr	r1, [r4, #176]	; 0xb0
   13a30:	umull	r0, r2, r0, r2
   13a34:	lsr	r2, r2, #3
   13a38:	cmp	r1, #0
   13a3c:	cmpgt	r2, r1
   13a40:	str	r2, [r4, #160]	; 0xa0
   13a44:	strgt	r1, [r4, #160]	; 0xa0
   13a48:	b	13a58 <flatcc_builder_start_buffer@@Base+0xac>
   13a4c:	ldr	r3, [r4, #32]
   13a50:	add	r3, r3, #36	; 0x24
   13a54:	str	r3, [r4, #32]
   13a58:	ldr	r0, [r4, #20]
   13a5c:	ldr	r1, [r4, #28]
   13a60:	ldrh	lr, [r4, #130]	; 0x82
   13a64:	ldrh	ip, [r4, #132]	; 0x84
   13a68:	add	r2, r0, r1
   13a6c:	add	r2, r2, #7
   13a70:	str	r0, [r3, #8]
   13a74:	strh	lr, [r3, #12]
   13a78:	bic	r2, r2, #7
   13a7c:	strh	r8, [r4, #130]	; 0x82
   13a80:	mvn	lr, #3
   13a84:	str	r1, [r3]
   13a88:	mov	r0, #0
   13a8c:	mov	r1, #1
   13a90:	str	lr, [r3, #4]
   13a94:	str	r2, [r4, #28]
   13a98:	str	r0, [r4, #20]
   13a9c:	strh	r1, [r4, #128]	; 0x80
   13aa0:	strh	ip, [r3, #34]	; 0x22
   13aa4:	ldrh	r2, [r4, #164]	; 0xa4
   13aa8:	strh	r7, [r4, #132]	; 0x84
   13aac:	ldr	ip, [pc, #128]	; 13b34 <flatcc_builder_start_buffer@@Base+0x188>
   13ab0:	strh	r2, [r3, #32]
   13ab4:	ldr	r2, [r4, #144]	; 0x90
   13ab8:	strh	r6, [r4, #164]	; 0xa4
   13abc:	str	r2, [r3, #20]
   13ac0:	ldr	r2, [r4, #152]	; 0x98
   13ac4:	cmp	r5, r0
   13ac8:	str	r2, [r3, #28]
   13acc:	ldr	r2, [r4, #148]	; 0x94
   13ad0:	ldr	lr, [r4, #136]	; 0x88
   13ad4:	moveq	r5, ip
   13ad8:	ldr	ip, [r4, #168]	; 0xa8
   13adc:	add	r6, r2, r1
   13ae0:	str	r2, [r4, #152]	; 0x98
   13ae4:	str	r6, [r4, #148]	; 0x94
   13ae8:	str	lr, [r4, #144]	; 0x90
   13aec:	str	ip, [r3, #16]
   13af0:	ldr	r2, [r5]
   13af4:	str	r2, [r4, #168]	; 0xa8
   13af8:	strh	r1, [r3, #14]
   13afc:	add	sp, sp, #8
   13b00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b04:	mov	r1, #4
   13b08:	ldr	r0, [r4, #40]	; 0x28
   13b0c:	str	r1, [sp]
   13b10:	add	r1, r4, #84	; 0x54
   13b14:	ldr	sl, [r4, #48]	; 0x30
   13b18:	blx	sl
   13b1c:	cmp	r0, #0
   13b20:	beq	13a10 <flatcc_builder_start_buffer@@Base+0x64>
   13b24:	bl	12090 <__assert_fail@plt+0xc>
   13b28:	mvn	r0, #0
   13b2c:	b	13afc <flatcc_builder_start_buffer@@Base+0x150>
   13b30:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   13b34:	andeq	r8, r1, r4, lsl #25

00013b38 <flatcc_builder_end_buffer@@Base>:
   13b38:	ldr	r3, [r0, #32]
   13b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b40:	sub	sp, sp, #100	; 0x64
   13b44:	ldrh	r5, [r0, #164]	; 0xa4
   13b48:	ldrh	r3, [r3, #14]
   13b4c:	ldr	r2, [r0, #152]	; 0x98
   13b50:	and	r5, r5, #2
   13b54:	cmp	r2, #0
   13b58:	orrne	r5, r5, #1
   13b5c:	cmp	r3, #1
   13b60:	bne	13e4c <flatcc_builder_end_buffer@@Base+0x314>
   13b64:	ldrh	r3, [r0, #132]	; 0x84
   13b68:	ldrh	r2, [r0, #128]	; 0x80
   13b6c:	mov	r9, r1
   13b70:	mov	r1, #0
   13b74:	cmp	r3, r2
   13b78:	movhi	r2, r3
   13b7c:	strhhi	r3, [r0, #128]	; 0x80
   13b80:	cmp	r3, #0
   13b84:	mov	r4, r0
   13b88:	str	r1, [sp, #20]
   13b8c:	and	r7, r5, #1
   13b90:	beq	13df8 <flatcc_builder_end_buffer@@Base+0x2c0>
   13b94:	cmp	r3, #4
   13b98:	movcc	r6, #4
   13b9c:	movcs	r6, r3
   13ba0:	cmp	r6, r2
   13ba4:	movcc	r6, r2
   13ba8:	cmp	r7, r1
   13bac:	bne	13c14 <flatcc_builder_end_buffer@@Base+0xdc>
   13bb0:	ldr	r8, [r0, #140]	; 0x8c
   13bb4:	sub	r3, r3, #1
   13bb8:	ands	r3, r3, r8
   13bbc:	beq	13c14 <flatcc_builder_end_buffer@@Base+0xdc>
   13bc0:	add	r1, r8, r3
   13bc4:	ldr	sl, [pc, #748]	; 13eb8 <flatcc_builder_end_buffer@@Base+0x380>
   13bc8:	mov	r2, #1
   13bcc:	cmp	r8, r1
   13bd0:	str	r3, [sp, #24]
   13bd4:	str	r3, [sp, #36]	; 0x24
   13bd8:	str	sl, [sp, #32]
   13bdc:	str	r1, [r0, #140]	; 0x8c
   13be0:	str	r2, [sp, #28]
   13be4:	bgt	13ea0 <flatcc_builder_end_buffer@@Base+0x368>
   13be8:	ldr	r0, [r0, #36]	; 0x24
   13bec:	add	r1, sp, #32
   13bf0:	str	r3, [sp]
   13bf4:	mov	r3, r8
   13bf8:	ldr	fp, [r4, #44]	; 0x2c
   13bfc:	blx	fp
   13c00:	cmp	r0, #0
   13c04:	bne	13ea4 <flatcc_builder_end_buffer@@Base+0x36c>
   13c08:	cmn	r8, #1
   13c0c:	beq	13e8c <flatcc_builder_end_buffer@@Base+0x354>
   13c10:	ldrh	r2, [r4, #128]	; 0x80
   13c14:	ldr	r3, [r4, #168]	; 0xa8
   13c18:	cmp	r2, r6
   13c1c:	strhcc	r6, [r4, #128]	; 0x80
   13c20:	cmp	r3, #0
   13c24:	movne	r1, #4
   13c28:	moveq	r1, #0
   13c2c:	ands	r5, r5, #2
   13c30:	uxtb	ip, r7
   13c34:	str	r3, [sp, #20]
   13c38:	ldr	r0, [r4, #136]	; 0x88
   13c3c:	bne	13e08 <flatcc_builder_end_buffer@@Base+0x2d0>
   13c40:	sub	r3, r6, #1
   13c44:	sub	r6, r0, #4
   13c48:	cmp	ip, #0
   13c4c:	sub	r6, r6, r1
   13c50:	and	r6, r6, r3
   13c54:	moveq	r8, #3
   13c58:	moveq	lr, #2
   13c5c:	moveq	r2, #1
   13c60:	moveq	r3, #4
   13c64:	bne	13e18 <flatcc_builder_end_buffer@@Base+0x2e0>
   13c68:	add	r5, r5, #1
   13c6c:	add	sl, sp, #96	; 0x60
   13c70:	add	r5, sl, r5, lsl #3
   13c74:	add	fp, sp, #12
   13c78:	mov	sl, #4
   13c7c:	cmp	r1, #0
   13c80:	str	r3, [sp, #24]
   13c84:	str	fp, [r5, #-72]	; 0xffffffb8
   13c88:	str	sl, [r5, #-68]	; 0xffffffbc
   13c8c:	str	r2, [sp, #28]
   13c90:	beq	13cc0 <flatcc_builder_end_buffer@@Base+0x188>
   13c94:	add	r2, r2, #1
   13c98:	add	r5, sp, #96	; 0x60
   13c9c:	add	r2, r5, r2, lsl #3
   13ca0:	add	r3, r3, r1
   13ca4:	add	r5, sp, #20
   13ca8:	str	r3, [sp, #24]
   13cac:	str	r1, [r2, #-68]	; 0xffffffbc
   13cb0:	str	r5, [r2, #-72]	; 0xffffffb8
   13cb4:	mov	r2, lr
   13cb8:	str	lr, [sp, #28]
   13cbc:	mov	lr, r8
   13cc0:	cmp	r6, #0
   13cc4:	beq	13cf0 <flatcc_builder_end_buffer@@Base+0x1b8>
   13cc8:	add	r2, r2, #1
   13ccc:	add	r1, sp, #96	; 0x60
   13cd0:	add	r1, r1, r2, lsl #3
   13cd4:	ldr	r5, [pc, #476]	; 13eb8 <flatcc_builder_end_buffer@@Base+0x380>
   13cd8:	mov	r2, lr
   13cdc:	add	r3, r3, r6
   13ce0:	str	r3, [sp, #24]
   13ce4:	str	r6, [r1, #-68]	; 0xffffffbc
   13ce8:	str	r5, [r1, #-72]	; 0xffffffb8
   13cec:	str	lr, [sp, #28]
   13cf0:	sub	r5, r0, r3
   13cf4:	cmp	ip, #0
   13cf8:	mov	r1, r5
   13cfc:	beq	13e40 <flatcc_builder_end_buffer@@Base+0x308>
   13d00:	cmp	r7, #0
   13d04:	add	r1, r5, #4
   13d08:	beq	13e40 <flatcc_builder_end_buffer@@Base+0x308>
   13d0c:	ldr	ip, [r4, #144]	; 0x90
   13d10:	sub	ip, ip, r1
   13d14:	sub	r9, r9, r1
   13d18:	cmp	r5, r0
   13d1c:	str	r9, [sp, #12]
   13d20:	str	ip, [sp, #16]
   13d24:	bge	13e60 <flatcc_builder_end_buffer@@Base+0x328>
   13d28:	ldr	r0, [r4, #36]	; 0x24
   13d2c:	add	r1, sp, #32
   13d30:	str	r3, [sp]
   13d34:	mov	r3, r5
   13d38:	ldr	r6, [r4, #44]	; 0x2c
   13d3c:	blx	r6
   13d40:	subs	r1, r0, #0
   13d44:	bne	13e64 <flatcc_builder_end_buffer@@Base+0x32c>
   13d48:	cmp	r5, #0
   13d4c:	str	r5, [r4, #136]	; 0x88
   13d50:	beq	13e78 <flatcc_builder_end_buffer@@Base+0x340>
   13d54:	ldr	r3, [r4, #32]
   13d58:	ldr	r2, [r4, #20]
   13d5c:	ldr	r0, [r4, #16]
   13d60:	ldr	ip, [r3, #20]
   13d64:	str	ip, [r4, #144]	; 0x90
   13d68:	ldr	ip, [r3, #28]
   13d6c:	str	ip, [r4, #152]	; 0x98
   13d70:	ldr	ip, [r3, #16]
   13d74:	str	ip, [r4, #168]	; 0xa8
   13d78:	ldrh	r3, [r3, #32]
   13d7c:	strh	r3, [r4, #164]	; 0xa4
   13d80:	bl	12054 <memset@plt>
   13d84:	ldr	r3, [r4, #32]
   13d88:	ldr	r2, [r4, #64]	; 0x40
   13d8c:	ldrh	lr, [r4, #130]	; 0x82
   13d90:	ldr	ip, [r3]
   13d94:	ldr	r1, [r3, #4]
   13d98:	ldrh	r0, [r4, #128]	; 0x80
   13d9c:	sub	r2, r2, ip
   13da0:	cmp	r2, r1
   13da4:	movcs	r2, r1
   13da8:	cmp	r0, lr
   13dac:	ldr	r0, [r4, #60]	; 0x3c
   13db0:	ldr	r6, [r3, #8]
   13db4:	str	r2, [r4, #24]
   13db8:	add	r2, r0, ip
   13dbc:	str	r2, [r4, #16]
   13dc0:	str	r6, [r4, #20]
   13dc4:	ldr	r2, [r4, #156]	; 0x9c
   13dc8:	str	ip, [r4, #28]
   13dcc:	str	r1, [r3, #4]
   13dd0:	strhcc	lr, [r4, #128]	; 0x80
   13dd4:	ldrh	r1, [r3, #12]
   13dd8:	sub	r2, r2, #1
   13ddc:	sub	r3, r3, #36	; 0x24
   13de0:	mov	r0, r5
   13de4:	str	r2, [r4, #156]	; 0x9c
   13de8:	strh	r1, [r4, #130]	; 0x82
   13dec:	str	r3, [r4, #32]
   13df0:	add	sp, sp, #100	; 0x64
   13df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df8:	cmp	r2, #4
   13dfc:	movcs	r6, r2
   13e00:	movcc	r6, #4
   13e04:	b	13c14 <flatcc_builder_end_buffer@@Base+0xdc>
   13e08:	sub	r3, r0, #8
   13e0c:	sub	r6, r6, #1
   13e10:	sub	r3, r3, r1
   13e14:	and	r6, r6, r3
   13e18:	add	r3, sp, #16
   13e1c:	mov	r8, #4
   13e20:	mov	r5, #1
   13e24:	str	r3, [sp, #32]
   13e28:	str	r8, [sp, #36]	; 0x24
   13e2c:	mov	ip, r5
   13e30:	mov	lr, #3
   13e34:	mov	r2, #2
   13e38:	mov	r3, #8
   13e3c:	b	13c68 <flatcc_builder_end_buffer@@Base+0x130>
   13e40:	ldr	ip, [r4, #140]	; 0x8c
   13e44:	sub	ip, ip, r1
   13e48:	b	13d14 <flatcc_builder_end_buffer@@Base+0x1dc>
   13e4c:	ldr	r3, [pc, #104]	; 13ebc <flatcc_builder_end_buffer@@Base+0x384>
   13e50:	ldr	r2, [pc, #104]	; 13ec0 <flatcc_builder_end_buffer@@Base+0x388>
   13e54:	ldr	r1, [pc, #104]	; 13ec4 <flatcc_builder_end_buffer@@Base+0x38c>
   13e58:	ldr	r0, [pc, #104]	; 13ec8 <flatcc_builder_end_buffer@@Base+0x390>
   13e5c:	bl	12084 <__assert_fail@plt>
   13e60:	bl	120dc <__assert_fail@plt+0x58>
   13e64:	ldr	r3, [pc, #96]	; 13ecc <flatcc_builder_end_buffer@@Base+0x394>
   13e68:	ldr	r2, [pc, #96]	; 13ed0 <flatcc_builder_end_buffer@@Base+0x398>
   13e6c:	ldr	r1, [pc, #80]	; 13ec4 <flatcc_builder_end_buffer@@Base+0x38c>
   13e70:	ldr	r0, [pc, #92]	; 13ed4 <flatcc_builder_end_buffer@@Base+0x39c>
   13e74:	bl	12084 <__assert_fail@plt>
   13e78:	ldr	r3, [pc, #88]	; 13ed8 <flatcc_builder_end_buffer@@Base+0x3a0>
   13e7c:	mov	r2, #772	; 0x304
   13e80:	ldr	r1, [pc, #60]	; 13ec4 <flatcc_builder_end_buffer@@Base+0x38c>
   13e84:	ldr	r0, [pc, #72]	; 13ed4 <flatcc_builder_end_buffer@@Base+0x39c>
   13e88:	bl	12084 <__assert_fail@plt>
   13e8c:	add	r3, sl, #608	; 0x260
   13e90:	ldr	r2, [pc, #68]	; 13edc <flatcc_builder_end_buffer@@Base+0x3a4>
   13e94:	ldr	r1, [pc, #40]	; 13ec4 <flatcc_builder_end_buffer@@Base+0x38c>
   13e98:	ldr	r0, [pc, #52]	; 13ed4 <flatcc_builder_end_buffer@@Base+0x39c>
   13e9c:	bl	12084 <__assert_fail@plt>
   13ea0:	bl	120b4 <__assert_fail@plt+0x30>
   13ea4:	ldr	r3, [pc, #52]	; 13ee0 <flatcc_builder_end_buffer@@Base+0x3a8>
   13ea8:	ldr	r2, [pc, #52]	; 13ee4 <flatcc_builder_end_buffer@@Base+0x3ac>
   13eac:	ldr	r1, [pc, #16]	; 13ec4 <flatcc_builder_end_buffer@@Base+0x38c>
   13eb0:	ldr	r0, [pc, #28]	; 13ed4 <flatcc_builder_end_buffer@@Base+0x39c>
   13eb4:	bl	12084 <__assert_fail@plt>
   13eb8:	andeq	r8, r1, r4, lsl #25
   13ebc:	andeq	r8, r1, r4, lsr pc
   13ec0:	andeq	r0, r0, r6, asr #6
   13ec4:	andeq	r9, r1, ip, lsr r3
   13ec8:	andeq	r9, r1, r0, asr r4
   13ecc:	andeq	r8, r1, r8, lsl #24
   13ed0:	andeq	r0, r0, fp, lsl #5
   13ed4:	strdeq	r9, [r1], -ip
   13ed8:	strdeq	r8, [r1], -r4
   13edc:			; <UNDEFINED> instruction: 0x000002be
   13ee0:	strdeq	r8, [r1], -ip
   13ee4:	andeq	r0, r0, r5, lsr #5

00013ee8 <flatcc_builder_start_struct@@Base>:
   13ee8:	push	{r4, r5, r6, r7, r8, lr}
   13eec:	mov	r4, r0
   13ef0:	ldr	r0, [r0, #156]	; 0x9c
   13ef4:	ldr	r3, [r4, #160]	; 0xa0
   13ef8:	mov	r6, r1
   13efc:	add	r1, r0, #1
   13f00:	cmp	r1, r3
   13f04:	sub	sp, sp, #8
   13f08:	mov	r5, r2
   13f0c:	str	r1, [r4, #156]	; 0x9c
   13f10:	ble	13f80 <flatcc_builder_start_struct@@Base+0x98>
   13f14:	ldr	r3, [r4, #176]	; 0xb0
   13f18:	cmp	r3, #0
   13f1c:	cmpgt	r1, r3
   13f20:	movgt	r3, #1
   13f24:	movle	r3, #0
   13f28:	bgt	14090 <flatcc_builder_start_struct@@Base+0x1a8>
   13f2c:	add	r0, r0, r0, lsl #3
   13f30:	ldr	r1, [r4, #88]	; 0x58
   13f34:	lsl	r7, r0, #2
   13f38:	add	r2, r7, #36	; 0x24
   13f3c:	cmp	r2, r1
   13f40:	bhi	1406c <flatcc_builder_start_struct@@Base+0x184>
   13f44:	ldr	r3, [r4, #84]	; 0x54
   13f48:	add	r3, r3, r7
   13f4c:	cmp	r3, #0
   13f50:	str	r3, [r4, #32]
   13f54:	beq	14090 <flatcc_builder_start_struct@@Base+0x1a8>
   13f58:	ldr	r2, [r4, #88]	; 0x58
   13f5c:	ldr	r0, [pc, #308]	; 14098 <flatcc_builder_start_struct@@Base+0x1b0>
   13f60:	ldr	r1, [r4, #176]	; 0xb0
   13f64:	umull	r0, r2, r0, r2
   13f68:	lsr	r2, r2, #3
   13f6c:	cmp	r1, #0
   13f70:	cmpgt	r2, r1
   13f74:	str	r2, [r4, #160]	; 0xa0
   13f78:	strgt	r1, [r4, #160]	; 0xa0
   13f7c:	b	13f8c <flatcc_builder_start_struct@@Base+0xa4>
   13f80:	ldr	r3, [r4, #32]
   13f84:	add	r3, r3, #36	; 0x24
   13f88:	str	r3, [r4, #32]
   13f8c:	ldr	lr, [r4, #20]
   13f90:	ldr	ip, [r4, #28]
   13f94:	ldr	r1, [r4, #64]	; 0x40
   13f98:	add	r2, lr, ip
   13f9c:	add	r2, r2, #7
   13fa0:	ldrh	r7, [r4, #130]	; 0x82
   13fa4:	bic	r2, r2, #7
   13fa8:	sub	r1, r1, r2
   13fac:	ldr	r0, [r4, #60]	; 0x3c
   13fb0:	cmn	r1, #4
   13fb4:	str	lr, [r3, #8]
   13fb8:	mvn	lr, #3
   13fbc:	strh	r7, [r3, #12]
   13fc0:	movhi	r1, lr
   13fc4:	strh	r5, [r4, #130]	; 0x82
   13fc8:	str	ip, [r3]
   13fcc:	mov	r5, #0
   13fd0:	mov	ip, #2
   13fd4:	str	lr, [r3, #4]
   13fd8:	add	r0, r0, r2
   13fdc:	str	r5, [r4, #20]
   13fe0:	str	r2, [r4, #28]
   13fe4:	mvn	r5, #3
   13fe8:	strh	ip, [r3, #14]
   13fec:	strls	r1, [r4, #24]
   13ff0:	strhi	lr, [r4, #24]
   13ff4:	cmp	r6, r1
   13ff8:	str	r0, [r4, #16]
   13ffc:	str	r5, [r3, #4]
   14000:	str	r6, [r4, #20]
   14004:	bcs	14010 <flatcc_builder_start_struct@@Base+0x128>
   14008:	add	sp, sp, #8
   1400c:	pop	{r4, r5, r6, r7, r8, pc}
   14010:	add	r6, r6, #1
   14014:	mov	r3, #1
   14018:	ldr	r0, [r4, #40]	; 0x28
   1401c:	add	r2, r6, r2
   14020:	str	r3, [sp]
   14024:	add	r1, r4, #60	; 0x3c
   14028:	ldr	r6, [r4, #48]	; 0x30
   1402c:	blx	r6
   14030:	cmp	r0, #0
   14034:	bne	14090 <flatcc_builder_start_struct@@Base+0x1a8>
   14038:	ldr	r2, [r4, #28]
   1403c:	ldr	r3, [r4, #64]	; 0x40
   14040:	ldr	r0, [r4, #60]	; 0x3c
   14044:	sub	r3, r3, r2
   14048:	ldr	r1, [r4, #32]
   1404c:	cmp	r3, r5
   14050:	add	r0, r0, r2
   14054:	movhi	r3, r5
   14058:	str	r3, [r4, #24]
   1405c:	str	r0, [r4, #16]
   14060:	str	r5, [r1, #4]
   14064:	add	sp, sp, #8
   14068:	pop	{r4, r5, r6, r7, r8, pc}
   1406c:	mov	r1, #4
   14070:	ldr	r0, [r4, #40]	; 0x28
   14074:	str	r1, [sp]
   14078:	add	r1, r4, #84	; 0x54
   1407c:	ldr	r8, [r4, #48]	; 0x30
   14080:	blx	r8
   14084:	cmp	r0, #0
   14088:	beq	13f44 <flatcc_builder_start_struct@@Base+0x5c>
   1408c:	bl	12090 <__assert_fail@plt+0xc>
   14090:	mov	r0, #0
   14094:	b	14008 <flatcc_builder_start_struct@@Base+0x120>
   14098:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

0001409c <flatcc_builder_struct_edit@@Base>:
   1409c:	ldr	r0, [r0, #16]
   140a0:	bx	lr

000140a4 <flatcc_builder_end_struct@@Base>:
   140a4:	ldr	r3, [r0, #32]
   140a8:	push	{r4, r5, r6, lr}
   140ac:	sub	sp, sp, #80	; 0x50
   140b0:	ldrh	r3, [r3, #14]
   140b4:	cmp	r3, #2
   140b8:	bne	14244 <flatcc_builder_end_struct@@Base+0x1a0>
   140bc:	ldrh	r3, [r0, #130]	; 0x82
   140c0:	mov	r4, r0
   140c4:	ldr	r0, [r0, #16]
   140c8:	cmp	r3, #0
   140cc:	ldr	r1, [r4, #20]
   140d0:	beq	14230 <flatcc_builder_end_struct@@Base+0x18c>
   140d4:	ldrh	r2, [r4, #128]	; 0x80
   140d8:	ldr	ip, [r4, #136]	; 0x88
   140dc:	cmp	r2, r3
   140e0:	strhcc	r3, [r4, #128]	; 0x80
   140e4:	mov	r2, #0
   140e8:	sub	r3, r3, #1
   140ec:	sub	r5, ip, r1
   140f0:	cmp	r1, #0
   140f4:	and	r3, r3, r5
   140f8:	str	r2, [sp, #8]
   140fc:	str	r2, [sp, #12]
   14100:	bne	141f0 <flatcc_builder_end_struct@@Base+0x14c>
   14104:	cmp	r3, #0
   14108:	movne	r2, #1
   1410c:	movne	r0, r1
   14110:	beq	14218 <flatcc_builder_end_struct@@Base+0x174>
   14114:	add	r0, r0, #1
   14118:	add	r5, sp, #80	; 0x50
   1411c:	add	r1, r1, r3
   14120:	add	r0, r5, r0, lsl #3
   14124:	ldr	lr, [pc, #300]	; 14258 <flatcc_builder_end_struct@@Base+0x1b4>
   14128:	sub	r5, ip, r1
   1412c:	str	r3, [r0, #-68]	; 0xffffffbc
   14130:	str	r1, [sp, #8]
   14134:	str	r2, [sp, #12]
   14138:	str	lr, [r0, #-72]	; 0xffffffb8
   1413c:	cmp	ip, r5
   14140:	ble	14218 <flatcc_builder_end_struct@@Base+0x174>
   14144:	ldr	r0, [r4, #36]	; 0x24
   14148:	mov	r3, r5
   1414c:	str	r1, [sp]
   14150:	add	r1, sp, #16
   14154:	ldr	r6, [r4, #44]	; 0x2c
   14158:	blx	r6
   1415c:	subs	r1, r0, #0
   14160:	bne	1421c <flatcc_builder_end_struct@@Base+0x178>
   14164:	cmp	r5, #0
   14168:	str	r5, [r4, #136]	; 0x88
   1416c:	beq	141e4 <flatcc_builder_end_struct@@Base+0x140>
   14170:	ldr	r2, [r4, #20]
   14174:	ldr	r0, [r4, #16]
   14178:	bl	12054 <memset@plt>
   1417c:	ldr	r3, [r4, #32]
   14180:	ldr	r2, [r4, #64]	; 0x40
   14184:	ldrh	lr, [r4, #130]	; 0x82
   14188:	ldr	ip, [r3]
   1418c:	ldr	r1, [r3, #4]
   14190:	ldrh	r0, [r4, #128]	; 0x80
   14194:	sub	r2, r2, ip
   14198:	cmp	r2, r1
   1419c:	movcs	r2, r1
   141a0:	cmp	r0, lr
   141a4:	ldr	r0, [r4, #60]	; 0x3c
   141a8:	ldr	r6, [r3, #8]
   141ac:	str	r2, [r4, #24]
   141b0:	add	r2, r0, ip
   141b4:	str	r2, [r4, #16]
   141b8:	str	r6, [r4, #20]
   141bc:	ldr	r2, [r4, #156]	; 0x9c
   141c0:	str	ip, [r4, #28]
   141c4:	str	r1, [r3, #4]
   141c8:	strhcc	lr, [r4, #128]	; 0x80
   141cc:	ldrh	r1, [r3, #12]
   141d0:	sub	r2, r2, #1
   141d4:	sub	r3, r3, #36	; 0x24
   141d8:	str	r2, [r4, #156]	; 0x9c
   141dc:	strh	r1, [r4, #130]	; 0x82
   141e0:	str	r3, [r4, #32]
   141e4:	mov	r0, r5
   141e8:	add	sp, sp, #80	; 0x50
   141ec:	pop	{r4, r5, r6, pc}
   141f0:	cmp	r3, r2
   141f4:	mov	r2, #1
   141f8:	str	r0, [sp, #16]
   141fc:	str	r2, [sp, #12]
   14200:	movne	r0, r2
   14204:	str	r1, [sp, #8]
   14208:	str	r1, [sp, #20]
   1420c:	movne	r2, #2
   14210:	beq	1413c <flatcc_builder_end_struct@@Base+0x98>
   14214:	b	14114 <flatcc_builder_end_struct@@Base+0x70>
   14218:	bl	120dc <__assert_fail@plt+0x58>
   1421c:	ldr	r3, [pc, #56]	; 1425c <flatcc_builder_end_struct@@Base+0x1b8>
   14220:	ldr	r2, [pc, #56]	; 14260 <flatcc_builder_end_struct@@Base+0x1bc>
   14224:	ldr	r1, [pc, #56]	; 14264 <flatcc_builder_end_struct@@Base+0x1c0>
   14228:	ldr	r0, [pc, #56]	; 14268 <flatcc_builder_end_struct@@Base+0x1c4>
   1422c:	bl	12084 <__assert_fail@plt>
   14230:	ldr	r3, [pc, #52]	; 1426c <flatcc_builder_end_struct@@Base+0x1c8>
   14234:	ldr	r2, [pc, #52]	; 14270 <flatcc_builder_end_struct@@Base+0x1cc>
   14238:	ldr	r1, [pc, #36]	; 14264 <flatcc_builder_end_struct@@Base+0x1c0>
   1423c:	ldr	r0, [pc, #48]	; 14274 <flatcc_builder_end_struct@@Base+0x1d0>
   14240:	bl	12084 <__assert_fail@plt>
   14244:	ldr	r3, [pc, #44]	; 14278 <flatcc_builder_end_struct@@Base+0x1d4>
   14248:	mov	r2, #872	; 0x368
   1424c:	ldr	r1, [pc, #16]	; 14264 <flatcc_builder_end_struct@@Base+0x1c0>
   14250:	ldr	r0, [pc, #36]	; 1427c <flatcc_builder_end_struct@@Base+0x1d8>
   14254:	bl	12084 <__assert_fail@plt>
   14258:	andeq	r8, r1, r4, lsl #25
   1425c:	andeq	r8, r1, r8, lsl #24
   14260:	andeq	r0, r0, fp, lsl #5
   14264:	andeq	r9, r1, ip, lsr r3
   14268:	strdeq	r9, [r1], -ip
   1426c:	andeq	r8, r1, r4, lsl pc
   14270:	andeq	r0, r0, pc, lsl #6
   14274:	andeq	r9, r1, r4, asr #8
   14278:	andeq	r8, r1, r0, asr pc
   1427c:	andeq	r9, r1, ip, ror r4

00014280 <flatcc_builder_extend_vector@@Base>:
   14280:	ldr	r3, [r0, #32]
   14284:	push	{r4, r5, r6, r7, lr}
   14288:	mov	r5, r0
   1428c:	ldr	r0, [r3, #20]
   14290:	ldr	r4, [r3, #24]
   14294:	add	ip, r1, r0
   14298:	cmp	r0, ip
   1429c:	movls	r0, #0
   142a0:	movhi	r0, #1
   142a4:	cmp	r4, ip
   142a8:	movcs	r4, r0
   142ac:	orrcc	r4, r0, #1
   142b0:	cmp	r4, #0
   142b4:	sub	sp, sp, #12
   142b8:	bne	14354 <flatcc_builder_extend_vector@@Base+0xd4>
   142bc:	ldr	r2, [r3, #16]
   142c0:	str	ip, [r3, #20]
   142c4:	ldr	r6, [r5, #20]
   142c8:	ldr	r3, [r5, #24]
   142cc:	mla	r1, r2, r1, r6
   142d0:	cmp	r1, r3
   142d4:	str	r1, [r5, #20]
   142d8:	bcs	142ec <flatcc_builder_extend_vector@@Base+0x6c>
   142dc:	ldr	r0, [r5, #16]
   142e0:	add	r0, r0, r6
   142e4:	add	sp, sp, #12
   142e8:	pop	{r4, r5, r6, r7, pc}
   142ec:	ldr	r2, [r5, #28]
   142f0:	mov	r3, #1
   142f4:	add	r2, r2, #1
   142f8:	ldr	r0, [r5, #40]	; 0x28
   142fc:	add	r2, r2, r1
   14300:	str	r3, [sp]
   14304:	add	r1, r5, #60	; 0x3c
   14308:	ldr	r7, [r5, #48]	; 0x30
   1430c:	blx	r7
   14310:	cmp	r0, #0
   14314:	bne	1434c <flatcc_builder_extend_vector@@Base+0xcc>
   14318:	ldr	r2, [r5, #28]
   1431c:	ldr	r3, [r5, #64]	; 0x40
   14320:	ldr	r0, [r5, #60]	; 0x3c
   14324:	sub	r3, r3, r2
   14328:	cmn	r3, #4
   1432c:	mvnhi	r3, #3
   14330:	str	r3, [r5, #24]
   14334:	ldr	r3, [r5, #32]
   14338:	add	r0, r0, r2
   1433c:	mvn	r2, #3
   14340:	str	r0, [r5, #16]
   14344:	str	r2, [r3, #4]
   14348:	b	142e0 <flatcc_builder_extend_vector@@Base+0x60>
   1434c:	mov	r0, r4
   14350:	b	142e4 <flatcc_builder_extend_vector@@Base+0x64>
   14354:	bl	12104 <__assert_fail@plt+0x80>

00014358 <flatcc_builder_vector_push@@Base>:
   14358:	ldr	r3, [r0, #32]
   1435c:	push	{r4, r5, r6, r7, r8, lr}
   14360:	sub	sp, sp, #8
   14364:	ldrh	r2, [r3, #14]
   14368:	cmp	r2, #4
   1436c:	bne	14454 <flatcc_builder_vector_push@@Base+0xfc>
   14370:	mov	r5, r1
   14374:	ldr	r2, [r3, #20]
   14378:	ldr	r1, [r3, #24]
   1437c:	cmp	r2, r1
   14380:	bhi	14440 <flatcc_builder_vector_push@@Base+0xe8>
   14384:	add	r2, r2, #1
   14388:	str	r2, [r3, #20]
   1438c:	ldr	r7, [r3, #16]
   14390:	ldr	r6, [r0, #20]
   14394:	ldr	r3, [r0, #24]
   14398:	add	r1, r7, r6
   1439c:	cmp	r1, r3
   143a0:	mov	r4, r0
   143a4:	str	r1, [r0, #20]
   143a8:	bcs	143d8 <flatcc_builder_vector_push@@Base+0x80>
   143ac:	ldr	r3, [r0, #16]
   143b0:	adds	r3, r3, r6
   143b4:	beq	143cc <flatcc_builder_vector_push@@Base+0x74>
   143b8:	mov	r0, r3
   143bc:	mov	r2, r7
   143c0:	mov	r1, r5
   143c4:	bl	11fd0 <memcpy@plt>
   143c8:	mov	r3, r0
   143cc:	mov	r0, r3
   143d0:	add	sp, sp, #8
   143d4:	pop	{r4, r5, r6, r7, r8, pc}
   143d8:	ldr	r2, [r0, #28]
   143dc:	mov	r3, #1
   143e0:	add	r2, r2, #1
   143e4:	ldr	r0, [r0, #40]	; 0x28
   143e8:	add	r2, r2, r1
   143ec:	str	r3, [sp]
   143f0:	add	r1, r4, #60	; 0x3c
   143f4:	ldr	r8, [r4, #48]	; 0x30
   143f8:	blx	r8
   143fc:	cmp	r0, #0
   14400:	bne	14438 <flatcc_builder_vector_push@@Base+0xe0>
   14404:	ldr	r1, [r4, #28]
   14408:	ldr	r2, [r4, #64]	; 0x40
   1440c:	ldr	r3, [r4, #60]	; 0x3c
   14410:	sub	r2, r2, r1
   14414:	cmn	r2, #4
   14418:	mvnhi	r2, #3
   1441c:	str	r2, [r4, #24]
   14420:	ldr	r2, [r4, #32]
   14424:	add	r3, r3, r1
   14428:	mvn	r1, #3
   1442c:	str	r3, [r4, #16]
   14430:	str	r1, [r2, #4]
   14434:	b	143b0 <flatcc_builder_vector_push@@Base+0x58>
   14438:	mov	r3, #0
   1443c:	b	143cc <flatcc_builder_vector_push@@Base+0x74>
   14440:	ldr	r3, [pc, #32]	; 14468 <flatcc_builder_vector_push@@Base+0x110>
   14444:	mov	r2, #908	; 0x38c
   14448:	ldr	r1, [pc, #28]	; 1446c <flatcc_builder_vector_push@@Base+0x114>
   1444c:	ldr	r0, [pc, #28]	; 14470 <flatcc_builder_vector_push@@Base+0x118>
   14450:	bl	12084 <__assert_fail@plt>
   14454:	ldr	r3, [pc, #12]	; 14468 <flatcc_builder_vector_push@@Base+0x110>
   14458:	ldr	r2, [pc, #20]	; 14474 <flatcc_builder_vector_push@@Base+0x11c>
   1445c:	ldr	r1, [pc, #8]	; 1446c <flatcc_builder_vector_push@@Base+0x114>
   14460:	ldr	r0, [pc, #16]	; 14478 <flatcc_builder_vector_push@@Base+0x120>
   14464:	bl	12084 <__assert_fail@plt>
   14468:	andeq	r8, r1, ip, ror #30
   1446c:	andeq	r9, r1, ip, lsr r3
   14470:	ldrdeq	r9, [r1], -r4
   14474:	andeq	r0, r0, fp, lsl #7
   14478:	andeq	r9, r1, r8, lsr #9

0001447c <flatcc_builder_append_vector@@Base>:
   1447c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14480:	mov	r5, r1
   14484:	ldr	r1, [r0, #32]
   14488:	sub	sp, sp, #12
   1448c:	ldrh	r3, [r1, #14]
   14490:	cmp	r3, #4
   14494:	bne	14584 <flatcc_builder_append_vector@@Base+0x108>
   14498:	ldr	r3, [r1, #20]
   1449c:	mov	r6, r0
   144a0:	add	r0, r2, r3
   144a4:	cmp	r3, r0
   144a8:	ldr	r4, [r1, #24]
   144ac:	movls	r3, #0
   144b0:	movhi	r3, #1
   144b4:	cmp	r4, r0
   144b8:	movcs	r4, r3
   144bc:	orrcc	r4, r3, #1
   144c0:	cmp	r4, #0
   144c4:	bne	14580 <flatcc_builder_append_vector@@Base+0x104>
   144c8:	ldr	r7, [r1, #16]
   144cc:	str	r0, [r1, #20]
   144d0:	ldr	r8, [r6, #20]
   144d4:	mul	r7, r7, r2
   144d8:	ldr	r3, [r6, #24]
   144dc:	add	r1, r7, r8
   144e0:	cmp	r1, r3
   144e4:	str	r1, [r6, #20]
   144e8:	bcs	14518 <flatcc_builder_append_vector@@Base+0x9c>
   144ec:	ldr	r3, [r6, #16]
   144f0:	adds	r3, r3, r8
   144f4:	beq	1450c <flatcc_builder_append_vector@@Base+0x90>
   144f8:	mov	r0, r3
   144fc:	mov	r2, r7
   14500:	mov	r1, r5
   14504:	bl	11fd0 <memcpy@plt>
   14508:	mov	r3, r0
   1450c:	mov	r0, r3
   14510:	add	sp, sp, #12
   14514:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14518:	ldr	r2, [r6, #28]
   1451c:	mov	r3, #1
   14520:	add	r2, r2, #1
   14524:	ldr	r0, [r6, #40]	; 0x28
   14528:	add	r2, r2, r1
   1452c:	str	r3, [sp]
   14530:	add	r1, r6, #60	; 0x3c
   14534:	ldr	r9, [r6, #48]	; 0x30
   14538:	blx	r9
   1453c:	cmp	r0, #0
   14540:	bne	14578 <flatcc_builder_append_vector@@Base+0xfc>
   14544:	ldr	r1, [r6, #28]
   14548:	ldr	r2, [r6, #64]	; 0x40
   1454c:	ldr	r3, [r6, #60]	; 0x3c
   14550:	sub	r2, r2, r1
   14554:	cmn	r2, #4
   14558:	mvnhi	r2, #3
   1455c:	str	r2, [r6, #24]
   14560:	ldr	r2, [r6, #32]
   14564:	add	r3, r3, r1
   14568:	mvn	r1, #3
   1456c:	str	r3, [r6, #16]
   14570:	str	r1, [r2, #4]
   14574:	b	144f0 <flatcc_builder_append_vector@@Base+0x74>
   14578:	mov	r3, r4
   1457c:	b	1450c <flatcc_builder_append_vector@@Base+0x90>
   14580:	bl	12104 <__assert_fail@plt+0x80>
   14584:	ldr	r3, [pc, #12]	; 14598 <flatcc_builder_append_vector@@Base+0x11c>
   14588:	ldr	r2, [pc, #12]	; 1459c <flatcc_builder_append_vector@@Base+0x120>
   1458c:	ldr	r1, [pc, #12]	; 145a0 <flatcc_builder_append_vector@@Base+0x124>
   14590:	ldr	r0, [pc, #12]	; 145a4 <flatcc_builder_append_vector@@Base+0x128>
   14594:	bl	12084 <__assert_fail@plt>
   14598:	andeq	r8, r1, r8, lsl #31
   1459c:	muleq	r0, r3, r3
   145a0:	andeq	r9, r1, ip, lsr r3
   145a4:	andeq	r9, r1, r8, lsr #9

000145a8 <flatcc_builder_extend_offset_vector@@Base>:
   145a8:	ldr	ip, [r0, #32]
   145ac:	push	{r4, r5, r6, r7, lr}
   145b0:	mov	r4, r0
   145b4:	ldr	r3, [ip, #20]
   145b8:	sub	sp, sp, #12
   145bc:	adds	r3, r1, r3
   145c0:	movcs	r2, #1
   145c4:	movcc	r2, #0
   145c8:	cmn	r3, #-1073741823	; 0xc0000001
   145cc:	movls	r0, #0
   145d0:	movhi	r0, #1
   145d4:	orrs	r5, r2, r0
   145d8:	bne	14670 <flatcc_builder_extend_offset_vector@@Base+0xc8>
   145dc:	str	r3, [ip, #20]
   145e0:	ldr	r6, [r4, #20]
   145e4:	ldr	r3, [r4, #24]
   145e8:	add	r1, r6, r1, lsl #2
   145ec:	cmp	r1, r3
   145f0:	str	r1, [r4, #20]
   145f4:	bcs	14608 <flatcc_builder_extend_offset_vector@@Base+0x60>
   145f8:	ldr	r0, [r4, #16]
   145fc:	add	r0, r0, r6
   14600:	add	sp, sp, #12
   14604:	pop	{r4, r5, r6, r7, pc}
   14608:	ldr	r2, [r4, #28]
   1460c:	mov	r3, #1
   14610:	add	r2, r2, #1
   14614:	ldr	r0, [r4, #40]	; 0x28
   14618:	add	r2, r2, r1
   1461c:	str	r3, [sp]
   14620:	add	r1, r4, #60	; 0x3c
   14624:	ldr	r7, [r4, #48]	; 0x30
   14628:	blx	r7
   1462c:	cmp	r0, #0
   14630:	bne	14668 <flatcc_builder_extend_offset_vector@@Base+0xc0>
   14634:	ldr	r2, [r4, #28]
   14638:	ldr	r3, [r4, #64]	; 0x40
   1463c:	ldr	r0, [r4, #60]	; 0x3c
   14640:	sub	r3, r3, r2
   14644:	cmn	r3, #4
   14648:	mvnhi	r3, #3
   1464c:	str	r3, [r4, #24]
   14650:	ldr	r3, [r4, #32]
   14654:	add	r0, r0, r2
   14658:	mvn	r2, #3
   1465c:	str	r0, [r4, #16]
   14660:	str	r2, [r3, #4]
   14664:	b	145fc <flatcc_builder_extend_offset_vector@@Base+0x54>
   14668:	mov	r0, r5
   1466c:	b	14600 <flatcc_builder_extend_offset_vector@@Base+0x58>
   14670:	bl	12104 <__assert_fail@plt+0x80>

00014674 <flatcc_builder_offset_vector_push@@Base>:
   14674:	ldr	r2, [r0, #32]
   14678:	push	{r4, r5, r6, r7, lr}
   1467c:	sub	sp, sp, #12
   14680:	ldrh	r3, [r2, #14]
   14684:	cmp	r3, #5
   14688:	bne	14740 <flatcc_builder_offset_vector_push@@Base+0xcc>
   1468c:	ldr	r3, [r2, #20]
   14690:	cmn	r3, #-1073741823	; 0xc0000001
   14694:	beq	14734 <flatcc_builder_offset_vector_push@@Base+0xc0>
   14698:	add	r3, r3, #1
   1469c:	str	r3, [r2, #20]
   146a0:	ldr	r5, [r0, #20]
   146a4:	ldr	r2, [r0, #24]
   146a8:	add	r3, r5, #4
   146ac:	cmp	r3, r2
   146b0:	mov	r4, r0
   146b4:	mov	r6, r1
   146b8:	str	r3, [r0, #20]
   146bc:	bcs	146d4 <flatcc_builder_offset_vector_push@@Base+0x60>
   146c0:	ldr	r3, [r0, #16]
   146c4:	adds	r0, r3, r5
   146c8:	strne	r6, [r3, r5]
   146cc:	add	sp, sp, #12
   146d0:	pop	{r4, r5, r6, r7, pc}
   146d4:	ldr	r2, [r0, #28]
   146d8:	mov	r3, #1
   146dc:	add	r2, r5, r2
   146e0:	ldr	r0, [r0, #40]	; 0x28
   146e4:	add	r2, r2, #5
   146e8:	str	r3, [sp]
   146ec:	add	r1, r4, #60	; 0x3c
   146f0:	ldr	r7, [r4, #48]	; 0x30
   146f4:	blx	r7
   146f8:	cmp	r0, #0
   146fc:	bne	14734 <flatcc_builder_offset_vector_push@@Base+0xc0>
   14700:	ldr	r1, [r4, #28]
   14704:	ldr	r2, [r4, #64]	; 0x40
   14708:	ldr	r3, [r4, #60]	; 0x3c
   1470c:	sub	r2, r2, r1
   14710:	cmn	r2, #4
   14714:	mvnhi	r2, #3
   14718:	str	r2, [r4, #24]
   1471c:	ldr	r2, [r4, #32]
   14720:	add	r3, r3, r1
   14724:	mvn	r1, #3
   14728:	str	r3, [r4, #16]
   1472c:	str	r1, [r2, #4]
   14730:	b	146c4 <flatcc_builder_offset_vector_push@@Base+0x50>
   14734:	mov	r0, #0
   14738:	add	sp, sp, #12
   1473c:	pop	{r4, r5, r6, r7, pc}
   14740:	ldr	r3, [pc, #12]	; 14754 <flatcc_builder_offset_vector_push@@Base+0xe0>
   14744:	ldr	r2, [pc, #12]	; 14758 <flatcc_builder_offset_vector_push@@Base+0xe4>
   14748:	ldr	r1, [pc, #12]	; 1475c <flatcc_builder_offset_vector_push@@Base+0xe8>
   1474c:	ldr	r0, [pc, #12]	; 14760 <flatcc_builder_offset_vector_push@@Base+0xec>
   14750:	bl	12084 <__assert_fail@plt>
   14754:	andeq	r8, r1, r8, lsr #31
   14758:	andeq	r0, r0, r6, lsr #7
   1475c:	andeq	r9, r1, ip, lsr r3
   14760:	andeq	r9, r1, r4, lsl r5

00014764 <flatcc_builder_append_offset_vector@@Base>:
   14764:	push	{r4, r5, r6, r7, r8, r9, lr}
   14768:	mov	r5, r0
   1476c:	ldr	r0, [r0, #32]
   14770:	sub	sp, sp, #12
   14774:	ldrh	r3, [r0, #14]
   14778:	cmp	r3, #5
   1477c:	bne	14860 <flatcc_builder_append_offset_vector@@Base+0xfc>
   14780:	mov	r7, r1
   14784:	ldr	r1, [r0, #20]
   14788:	adds	r1, r2, r1
   1478c:	movcs	r4, #1
   14790:	movcc	r4, #0
   14794:	cmn	r1, #-1073741823	; 0xc0000001
   14798:	movls	r3, #0
   1479c:	movhi	r3, #1
   147a0:	orrs	r4, r4, r3
   147a4:	bne	1485c <flatcc_builder_append_offset_vector@@Base+0xf8>
   147a8:	str	r1, [r0, #20]
   147ac:	ldr	r8, [r5, #20]
   147b0:	lsl	r6, r2, #2
   147b4:	ldr	r3, [r5, #24]
   147b8:	add	r1, r6, r8
   147bc:	cmp	r1, r3
   147c0:	str	r1, [r5, #20]
   147c4:	bcs	147f4 <flatcc_builder_append_offset_vector@@Base+0x90>
   147c8:	ldr	r3, [r5, #16]
   147cc:	adds	r3, r3, r8
   147d0:	beq	147e8 <flatcc_builder_append_offset_vector@@Base+0x84>
   147d4:	mov	r0, r3
   147d8:	mov	r2, r6
   147dc:	mov	r1, r7
   147e0:	bl	11fd0 <memcpy@plt>
   147e4:	mov	r3, r0
   147e8:	mov	r0, r3
   147ec:	add	sp, sp, #12
   147f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   147f4:	ldr	r2, [r5, #28]
   147f8:	mov	r3, #1
   147fc:	add	r2, r2, #1
   14800:	ldr	r0, [r5, #40]	; 0x28
   14804:	add	r2, r2, r1
   14808:	str	r3, [sp]
   1480c:	add	r1, r5, #60	; 0x3c
   14810:	ldr	r9, [r5, #48]	; 0x30
   14814:	blx	r9
   14818:	cmp	r0, #0
   1481c:	bne	14854 <flatcc_builder_append_offset_vector@@Base+0xf0>
   14820:	ldr	r1, [r5, #28]
   14824:	ldr	r2, [r5, #64]	; 0x40
   14828:	ldr	r3, [r5, #60]	; 0x3c
   1482c:	sub	r2, r2, r1
   14830:	cmn	r2, #4
   14834:	mvnhi	r2, #3
   14838:	str	r2, [r5, #24]
   1483c:	ldr	r2, [r5, #32]
   14840:	add	r3, r3, r1
   14844:	mvn	r1, #3
   14848:	str	r3, [r5, #16]
   1484c:	str	r1, [r2, #4]
   14850:	b	147cc <flatcc_builder_append_offset_vector@@Base+0x68>
   14854:	mov	r3, r4
   14858:	b	147e8 <flatcc_builder_append_offset_vector@@Base+0x84>
   1485c:	bl	12104 <__assert_fail@plt+0x80>
   14860:	ldr	r3, [pc, #12]	; 14874 <flatcc_builder_append_offset_vector@@Base+0x110>
   14864:	mov	r2, #948	; 0x3b4
   14868:	ldr	r1, [pc, #8]	; 14878 <flatcc_builder_append_offset_vector@@Base+0x114>
   1486c:	ldr	r0, [pc, #8]	; 1487c <flatcc_builder_append_offset_vector@@Base+0x118>
   14870:	bl	12084 <__assert_fail@plt>
   14874:	andeq	r8, r1, ip, asr #31
   14878:	andeq	r9, r1, ip, lsr r3
   1487c:	andeq	r9, r1, r4, lsl r5

00014880 <flatcc_builder_extend_string@@Base>:
   14880:	ldr	r2, [r0, #32]
   14884:	push	{r4, r5, r6, lr}
   14888:	sub	sp, sp, #8
   1488c:	ldrh	r3, [r2, #14]
   14890:	cmp	r3, #6
   14894:	bne	14940 <flatcc_builder_extend_string@@Base+0xc0>
   14898:	ldr	r3, [r2, #20]
   1489c:	adds	r3, r1, r3
   148a0:	bcs	1493c <flatcc_builder_extend_string@@Base+0xbc>
   148a4:	str	r3, [r2, #20]
   148a8:	ldr	r5, [r0, #20]
   148ac:	ldr	r3, [r0, #24]
   148b0:	add	r1, r1, r5
   148b4:	cmp	r1, r3
   148b8:	mov	r4, r0
   148bc:	str	r1, [r0, #20]
   148c0:	bcs	148d4 <flatcc_builder_extend_string@@Base+0x54>
   148c4:	ldr	r0, [r0, #16]
   148c8:	add	r0, r0, r5
   148cc:	add	sp, sp, #8
   148d0:	pop	{r4, r5, r6, pc}
   148d4:	ldr	r2, [r0, #28]
   148d8:	mov	r3, #1
   148dc:	add	r2, r2, #1
   148e0:	ldr	r0, [r0, #40]	; 0x28
   148e4:	add	r2, r2, r1
   148e8:	str	r3, [sp]
   148ec:	add	r1, r4, #60	; 0x3c
   148f0:	ldr	r6, [r4, #48]	; 0x30
   148f4:	blx	r6
   148f8:	cmp	r0, #0
   148fc:	bne	14934 <flatcc_builder_extend_string@@Base+0xb4>
   14900:	ldr	r2, [r4, #28]
   14904:	ldr	r3, [r4, #64]	; 0x40
   14908:	ldr	r0, [r4, #60]	; 0x3c
   1490c:	sub	r3, r3, r2
   14910:	cmn	r3, #4
   14914:	mvnhi	r3, #3
   14918:	str	r3, [r4, #24]
   1491c:	ldr	r3, [r4, #32]
   14920:	add	r0, r0, r2
   14924:	mvn	r2, #3
   14928:	str	r0, [r4, #16]
   1492c:	str	r2, [r3, #4]
   14930:	b	148c8 <flatcc_builder_extend_string@@Base+0x48>
   14934:	mov	r0, #0
   14938:	b	148cc <flatcc_builder_extend_string@@Base+0x4c>
   1493c:	bl	12104 <__assert_fail@plt+0x80>
   14940:	ldr	r3, [pc, #12]	; 14954 <flatcc_builder_extend_string@@Base+0xd4>
   14944:	ldr	r2, [pc, #12]	; 14958 <flatcc_builder_extend_string@@Base+0xd8>
   14948:	ldr	r1, [pc, #12]	; 1495c <flatcc_builder_extend_string@@Base+0xdc>
   1494c:	ldr	r0, [pc, #12]	; 14960 <flatcc_builder_extend_string@@Base+0xe0>
   14950:	bl	12084 <__assert_fail@plt>
   14954:	strdeq	r8, [r1], -r0
   14958:			; <UNDEFINED> instruction: 0x000003bd
   1495c:	andeq	r9, r1, ip, lsr r3
   14960:			; <UNDEFINED> instruction: 0x000193bc

00014964 <flatcc_builder_append_string@@Base>:
   14964:	push	{r4, r5, r6, r7, r8, lr}
   14968:	mov	r6, r1
   1496c:	ldr	r1, [r0, #32]
   14970:	sub	sp, sp, #8
   14974:	ldrh	r3, [r1, #14]
   14978:	cmp	r3, #6
   1497c:	bne	14a48 <flatcc_builder_append_string@@Base+0xe4>
   14980:	ldr	r3, [r1, #20]
   14984:	mov	r5, r2
   14988:	adds	r3, r2, r3
   1498c:	bcs	14a44 <flatcc_builder_append_string@@Base+0xe0>
   14990:	str	r3, [r1, #20]
   14994:	ldr	r7, [r0, #20]
   14998:	ldr	r3, [r0, #24]
   1499c:	add	r1, r2, r7
   149a0:	cmp	r1, r3
   149a4:	mov	r4, r0
   149a8:	str	r1, [r0, #20]
   149ac:	bcs	149dc <flatcc_builder_append_string@@Base+0x78>
   149b0:	ldr	r3, [r0, #16]
   149b4:	adds	r3, r3, r7
   149b8:	beq	149d0 <flatcc_builder_append_string@@Base+0x6c>
   149bc:	mov	r0, r3
   149c0:	mov	r2, r5
   149c4:	mov	r1, r6
   149c8:	bl	11fd0 <memcpy@plt>
   149cc:	mov	r3, r0
   149d0:	mov	r0, r3
   149d4:	add	sp, sp, #8
   149d8:	pop	{r4, r5, r6, r7, r8, pc}
   149dc:	ldr	r2, [r0, #28]
   149e0:	mov	r3, #1
   149e4:	add	r2, r2, #1
   149e8:	ldr	r0, [r0, #40]	; 0x28
   149ec:	add	r2, r2, r1
   149f0:	str	r3, [sp]
   149f4:	add	r1, r4, #60	; 0x3c
   149f8:	ldr	r8, [r4, #48]	; 0x30
   149fc:	blx	r8
   14a00:	cmp	r0, #0
   14a04:	bne	14a3c <flatcc_builder_append_string@@Base+0xd8>
   14a08:	ldr	r1, [r4, #28]
   14a0c:	ldr	r2, [r4, #64]	; 0x40
   14a10:	ldr	r3, [r4, #60]	; 0x3c
   14a14:	sub	r2, r2, r1
   14a18:	cmn	r2, #4
   14a1c:	mvnhi	r2, #3
   14a20:	str	r2, [r4, #24]
   14a24:	ldr	r2, [r4, #32]
   14a28:	add	r3, r3, r1
   14a2c:	mvn	r1, #3
   14a30:	str	r3, [r4, #16]
   14a34:	str	r1, [r2, #4]
   14a38:	b	149b4 <flatcc_builder_append_string@@Base+0x50>
   14a3c:	mov	r3, #0
   14a40:	b	149d0 <flatcc_builder_append_string@@Base+0x6c>
   14a44:	bl	12104 <__assert_fail@plt+0x80>
   14a48:	bl	12150 <__assert_fail@plt+0xcc>

00014a4c <flatcc_builder_append_string_str@@Base>:
   14a4c:	push	{r4, r5, r6, r7, r8, lr}
   14a50:	mov	r4, r0
   14a54:	sub	sp, sp, #8
   14a58:	mov	r0, r1
   14a5c:	mov	r6, r1
   14a60:	bl	12030 <strlen@plt>
   14a64:	ldr	r2, [r4, #32]
   14a68:	ldrh	r3, [r2, #14]
   14a6c:	cmp	r3, #6
   14a70:	bne	14b38 <flatcc_builder_append_string_str@@Base+0xec>
   14a74:	ldr	r3, [r2, #20]
   14a78:	mov	r5, r0
   14a7c:	adds	r3, r0, r3
   14a80:	bcs	14b34 <flatcc_builder_append_string_str@@Base+0xe8>
   14a84:	str	r3, [r2, #20]
   14a88:	ldr	r7, [r4, #20]
   14a8c:	ldr	r3, [r4, #24]
   14a90:	add	r1, r0, r7
   14a94:	cmp	r1, r3
   14a98:	str	r1, [r4, #20]
   14a9c:	bcs	14acc <flatcc_builder_append_string_str@@Base+0x80>
   14aa0:	ldr	r3, [r4, #16]
   14aa4:	adds	r3, r3, r7
   14aa8:	beq	14ac0 <flatcc_builder_append_string_str@@Base+0x74>
   14aac:	mov	r0, r3
   14ab0:	mov	r2, r5
   14ab4:	mov	r1, r6
   14ab8:	bl	11fd0 <memcpy@plt>
   14abc:	mov	r3, r0
   14ac0:	mov	r0, r3
   14ac4:	add	sp, sp, #8
   14ac8:	pop	{r4, r5, r6, r7, r8, pc}
   14acc:	ldr	r2, [r4, #28]
   14ad0:	mov	r3, #1
   14ad4:	add	r2, r2, #1
   14ad8:	ldr	r0, [r4, #40]	; 0x28
   14adc:	add	r2, r2, r1
   14ae0:	str	r3, [sp]
   14ae4:	add	r1, r4, #60	; 0x3c
   14ae8:	ldr	r8, [r4, #48]	; 0x30
   14aec:	blx	r8
   14af0:	cmp	r0, #0
   14af4:	bne	14b2c <flatcc_builder_append_string_str@@Base+0xe0>
   14af8:	ldr	r1, [r4, #28]
   14afc:	ldr	r2, [r4, #64]	; 0x40
   14b00:	ldr	r3, [r4, #60]	; 0x3c
   14b04:	sub	r2, r2, r1
   14b08:	cmn	r2, #4
   14b0c:	mvnhi	r2, #3
   14b10:	str	r2, [r4, #24]
   14b14:	ldr	r2, [r4, #32]
   14b18:	add	r3, r3, r1
   14b1c:	mvn	r1, #3
   14b20:	str	r3, [r4, #16]
   14b24:	str	r1, [r2, #4]
   14b28:	b	14aa4 <flatcc_builder_append_string_str@@Base+0x58>
   14b2c:	mov	r3, #0
   14b30:	b	14ac0 <flatcc_builder_append_string_str@@Base+0x74>
   14b34:	bl	12104 <__assert_fail@plt+0x80>
   14b38:	bl	12150 <__assert_fail@plt+0xcc>

00014b3c <flatcc_builder_append_string_strn@@Base>:
   14b3c:	push	{r4, r5, r6, r7, r8, lr}
   14b40:	mov	r6, r1
   14b44:	mov	r4, r0
   14b48:	sub	sp, sp, #8
   14b4c:	mov	r1, #0
   14b50:	mov	r0, r6
   14b54:	mov	r5, r2
   14b58:	bl	12060 <memchr@plt>
   14b5c:	ldr	r2, [r4, #32]
   14b60:	ldrh	r3, [r2, #14]
   14b64:	cmp	r0, #0
   14b68:	subne	r5, r0, r6
   14b6c:	cmp	r3, #6
   14b70:	bne	14c34 <flatcc_builder_append_string_strn@@Base+0xf8>
   14b74:	ldr	r3, [r2, #20]
   14b78:	adds	r3, r5, r3
   14b7c:	bcs	14c30 <flatcc_builder_append_string_strn@@Base+0xf4>
   14b80:	str	r3, [r2, #20]
   14b84:	ldr	r7, [r4, #20]
   14b88:	ldr	r3, [r4, #24]
   14b8c:	add	r1, r5, r7
   14b90:	cmp	r1, r3
   14b94:	str	r1, [r4, #20]
   14b98:	bcs	14bc8 <flatcc_builder_append_string_strn@@Base+0x8c>
   14b9c:	ldr	r3, [r4, #16]
   14ba0:	adds	r3, r3, r7
   14ba4:	beq	14bbc <flatcc_builder_append_string_strn@@Base+0x80>
   14ba8:	mov	r0, r3
   14bac:	mov	r2, r5
   14bb0:	mov	r1, r6
   14bb4:	bl	11fd0 <memcpy@plt>
   14bb8:	mov	r3, r0
   14bbc:	mov	r0, r3
   14bc0:	add	sp, sp, #8
   14bc4:	pop	{r4, r5, r6, r7, r8, pc}
   14bc8:	ldr	r2, [r4, #28]
   14bcc:	mov	r3, #1
   14bd0:	add	r2, r2, #1
   14bd4:	ldr	r0, [r4, #40]	; 0x28
   14bd8:	add	r2, r2, r1
   14bdc:	str	r3, [sp]
   14be0:	add	r1, r4, #60	; 0x3c
   14be4:	ldr	r8, [r4, #48]	; 0x30
   14be8:	blx	r8
   14bec:	cmp	r0, #0
   14bf0:	bne	14c28 <flatcc_builder_append_string_strn@@Base+0xec>
   14bf4:	ldr	r1, [r4, #28]
   14bf8:	ldr	r2, [r4, #64]	; 0x40
   14bfc:	ldr	r3, [r4, #60]	; 0x3c
   14c00:	sub	r2, r2, r1
   14c04:	cmn	r2, #4
   14c08:	mvnhi	r2, #3
   14c0c:	str	r2, [r4, #24]
   14c10:	ldr	r2, [r4, #32]
   14c14:	add	r3, r3, r1
   14c18:	mvn	r1, #3
   14c1c:	str	r3, [r4, #16]
   14c20:	str	r1, [r2, #4]
   14c24:	b	14ba0 <flatcc_builder_append_string_strn@@Base+0x64>
   14c28:	mov	r3, #0
   14c2c:	b	14bbc <flatcc_builder_append_string_strn@@Base+0x80>
   14c30:	bl	12104 <__assert_fail@plt+0x80>
   14c34:	bl	12150 <__assert_fail@plt+0xcc>

00014c38 <flatcc_builder_truncate_vector@@Base>:
   14c38:	ldr	r3, [r0, #32]
   14c3c:	push	{r4, lr}
   14c40:	ldrh	r2, [r3, #14]
   14c44:	cmp	r2, #4
   14c48:	bne	14c8c <flatcc_builder_truncate_vector@@Base+0x54>
   14c4c:	ldr	ip, [r3, #20]
   14c50:	cmp	ip, r1
   14c54:	bcc	14ca0 <flatcc_builder_truncate_vector@@Base+0x68>
   14c58:	ldr	r2, [r3, #16]
   14c5c:	sub	ip, ip, r1
   14c60:	str	ip, [r3, #20]
   14c64:	mul	r2, r2, r1
   14c68:	ldr	r3, [r0, #20]
   14c6c:	ldr	r1, [r0, #16]
   14c70:	sub	r3, r3, r2
   14c74:	str	r3, [r0, #20]
   14c78:	add	r0, r1, r3
   14c7c:	mov	r1, #0
   14c80:	bl	12054 <memset@plt>
   14c84:	mov	r0, #0
   14c88:	pop	{r4, pc}
   14c8c:	ldr	r3, [pc, #32]	; 14cb4 <flatcc_builder_truncate_vector@@Base+0x7c>
   14c90:	ldr	r2, [pc, #32]	; 14cb8 <flatcc_builder_truncate_vector@@Base+0x80>
   14c94:	ldr	r1, [pc, #32]	; 14cbc <flatcc_builder_truncate_vector@@Base+0x84>
   14c98:	ldr	r0, [pc, #32]	; 14cc0 <flatcc_builder_truncate_vector@@Base+0x88>
   14c9c:	bl	12084 <__assert_fail@plt>
   14ca0:	ldr	r3, [pc, #12]	; 14cb4 <flatcc_builder_truncate_vector@@Base+0x7c>
   14ca4:	ldr	r2, [pc, #24]	; 14cc4 <flatcc_builder_truncate_vector@@Base+0x8c>
   14ca8:	ldr	r1, [pc, #12]	; 14cbc <flatcc_builder_truncate_vector@@Base+0x84>
   14cac:	ldr	r0, [pc, #20]	; 14cc8 <flatcc_builder_truncate_vector@@Base+0x90>
   14cb0:	bl	12084 <__assert_fail@plt>
   14cb4:	andeq	r9, r1, r0, lsl r0
   14cb8:	ldrdeq	r0, [r0], -r9
   14cbc:	andeq	r9, r1, ip, lsr r3
   14cc0:	andeq	r9, r1, r8, lsr #9
   14cc4:	ldrdeq	r0, [r0], -sl
   14cc8:	andeq	r9, r1, r8, asr #10

00014ccc <flatcc_builder_truncate_offset_vector@@Base>:
   14ccc:	ldr	r3, [r0, #32]
   14cd0:	push	{r4, lr}
   14cd4:	ldrh	r2, [r3, #14]
   14cd8:	cmp	r2, #5
   14cdc:	bne	14d20 <flatcc_builder_truncate_offset_vector@@Base+0x54>
   14ce0:	ldr	ip, [r3, #20]
   14ce4:	cmp	ip, r1
   14ce8:	bcc	14d34 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   14cec:	ldr	r2, [r3, #16]
   14cf0:	sub	ip, ip, r1
   14cf4:	str	ip, [r3, #20]
   14cf8:	mul	r2, r2, r1
   14cfc:	ldr	r3, [r0, #20]
   14d00:	ldr	r1, [r0, #16]
   14d04:	sub	r3, r3, r2
   14d08:	str	r3, [r0, #20]
   14d0c:	add	r0, r1, r3
   14d10:	mov	r1, #0
   14d14:	bl	12054 <memset@plt>
   14d18:	mov	r0, #0
   14d1c:	pop	{r4, pc}
   14d20:	ldr	r3, [pc, #32]	; 14d48 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14d24:	ldr	r2, [pc, #32]	; 14d4c <flatcc_builder_truncate_offset_vector@@Base+0x80>
   14d28:	ldr	r1, [pc, #32]	; 14d50 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   14d2c:	ldr	r0, [pc, #32]	; 14d54 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   14d30:	bl	12084 <__assert_fail@plt>
   14d34:	ldr	r3, [pc, #12]	; 14d48 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14d38:	ldr	r2, [pc, #24]	; 14d58 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   14d3c:	ldr	r1, [pc, #12]	; 14d50 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   14d40:	ldr	r0, [pc, #20]	; 14d5c <flatcc_builder_truncate_offset_vector@@Base+0x90>
   14d44:	bl	12084 <__assert_fail@plt>
   14d48:	andeq	r9, r1, r0, lsr r0
   14d4c:	andeq	r0, r0, r2, ror #7
   14d50:	andeq	r9, r1, ip, lsr r3
   14d54:	andeq	r9, r1, r4, lsl r5
   14d58:	andeq	r0, r0, r3, ror #7
   14d5c:	andeq	r9, r1, ip, ror #10

00014d60 <flatcc_builder_truncate_string@@Base>:
   14d60:	ldr	r2, [r0, #32]
   14d64:	push	{r4, lr}
   14d68:	ldrh	r3, [r2, #14]
   14d6c:	cmp	r3, #6
   14d70:	bne	14db0 <flatcc_builder_truncate_string@@Base+0x50>
   14d74:	ldr	r3, [r2, #20]
   14d78:	cmp	r3, r1
   14d7c:	bcc	14dc4 <flatcc_builder_truncate_string@@Base+0x64>
   14d80:	sub	r3, r3, r1
   14d84:	str	r3, [r2, #20]
   14d88:	ldr	r3, [r0, #20]
   14d8c:	ldr	r2, [r0, #16]
   14d90:	sub	r3, r3, r1
   14d94:	str	r3, [r0, #20]
   14d98:	add	r0, r2, r3
   14d9c:	mov	r2, r1
   14da0:	mov	r1, #0
   14da4:	bl	12054 <memset@plt>
   14da8:	mov	r0, #0
   14dac:	pop	{r4, pc}
   14db0:	ldr	r3, [pc, #32]	; 14dd8 <flatcc_builder_truncate_string@@Base+0x78>
   14db4:	ldr	r2, [pc, #32]	; 14ddc <flatcc_builder_truncate_string@@Base+0x7c>
   14db8:	ldr	r1, [pc, #32]	; 14de0 <flatcc_builder_truncate_string@@Base+0x80>
   14dbc:	ldr	r0, [pc, #32]	; 14de4 <flatcc_builder_truncate_string@@Base+0x84>
   14dc0:	bl	12084 <__assert_fail@plt>
   14dc4:	ldr	r3, [pc, #12]	; 14dd8 <flatcc_builder_truncate_string@@Base+0x78>
   14dc8:	mov	r2, #1004	; 0x3ec
   14dcc:	ldr	r1, [pc, #12]	; 14de0 <flatcc_builder_truncate_string@@Base+0x80>
   14dd0:	ldr	r0, [pc, #16]	; 14de8 <flatcc_builder_truncate_string@@Base+0x88>
   14dd4:	bl	12084 <__assert_fail@plt>
   14dd8:	andeq	r9, r1, r8, asr r0
   14ddc:	andeq	r0, r0, fp, ror #7
   14de0:	andeq	r9, r1, ip, lsr r3
   14de4:			; <UNDEFINED> instruction: 0x000193bc
   14de8:	andeq	r9, r1, r8, lsr #11

00014dec <flatcc_builder_start_vector@@Base>:
   14dec:	ldr	ip, [r0, #156]	; 0x9c
   14df0:	push	{r4, r5, r6, r7, r8, r9, lr}
   14df4:	cmp	r2, #4
   14df8:	ldr	lr, [r0, #160]	; 0xa0
   14dfc:	mov	r4, r0
   14e00:	add	r0, ip, #1
   14e04:	movcs	r7, r2
   14e08:	movcc	r7, #4
   14e0c:	cmp	r0, lr
   14e10:	sub	sp, sp, #12
   14e14:	mov	r6, r1
   14e18:	mov	r5, r3
   14e1c:	str	r0, [r4, #156]	; 0x9c
   14e20:	ble	14e90 <flatcc_builder_start_vector@@Base+0xa4>
   14e24:	ldr	r3, [r4, #176]	; 0xb0
   14e28:	cmp	r3, #0
   14e2c:	cmpgt	r0, r3
   14e30:	movgt	r3, #1
   14e34:	movle	r3, #0
   14e38:	bgt	14f38 <flatcc_builder_start_vector@@Base+0x14c>
   14e3c:	add	ip, ip, ip, lsl #3
   14e40:	ldr	r1, [r4, #88]	; 0x58
   14e44:	lsl	r8, ip, #2
   14e48:	add	r2, r8, #36	; 0x24
   14e4c:	cmp	r2, r1
   14e50:	bhi	14f14 <flatcc_builder_start_vector@@Base+0x128>
   14e54:	ldr	r3, [r4, #84]	; 0x54
   14e58:	add	r3, r3, r8
   14e5c:	cmp	r3, #0
   14e60:	str	r3, [r4, #32]
   14e64:	beq	14f38 <flatcc_builder_start_vector@@Base+0x14c>
   14e68:	ldr	r2, [r4, #88]	; 0x58
   14e6c:	ldr	r0, [pc, #204]	; 14f40 <flatcc_builder_start_vector@@Base+0x154>
   14e70:	ldr	r1, [r4, #176]	; 0xb0
   14e74:	umull	r0, r2, r0, r2
   14e78:	lsr	r2, r2, #3
   14e7c:	cmp	r1, #0
   14e80:	cmpgt	r2, r1
   14e84:	str	r2, [r4, #160]	; 0xa0
   14e88:	strgt	r1, [r4, #160]	; 0xa0
   14e8c:	b	14e9c <flatcc_builder_start_vector@@Base+0xb0>
   14e90:	ldr	r3, [r4, #32]
   14e94:	add	r3, r3, #36	; 0x24
   14e98:	str	r3, [r4, #32]
   14e9c:	ldr	r0, [r4, #20]
   14ea0:	ldr	r1, [r4, #28]
   14ea4:	ldrh	ip, [r4, #130]	; 0x82
   14ea8:	add	r2, r0, r1
   14eac:	add	r2, r2, #7
   14eb0:	str	r0, [r3, #8]
   14eb4:	bic	r2, r2, #7
   14eb8:	mov	r0, #0
   14ebc:	strh	ip, [r3, #12]
   14ec0:	strh	r7, [r4, #130]	; 0x82
   14ec4:	str	r1, [r3]
   14ec8:	str	r2, [r4, #28]
   14ecc:	str	r0, [r4, #20]
   14ed0:	str	r0, [r3, #20]
   14ed4:	str	r6, [r3, #16]
   14ed8:	str	r5, [r3, #24]
   14edc:	ldr	r1, [r4, #64]	; 0x40
   14ee0:	ldr	ip, [r4, #60]	; 0x3c
   14ee4:	sub	r1, r1, r2
   14ee8:	mvn	lr, #3
   14eec:	cmp	r1, lr
   14ef0:	add	r2, ip, r2
   14ef4:	movhi	r1, lr
   14ef8:	mov	ip, #4
   14efc:	strh	ip, [r3, #14]
   14f00:	str	r2, [r4, #16]
   14f04:	str	r1, [r4, #24]
   14f08:	str	lr, [r3, #4]
   14f0c:	add	sp, sp, #12
   14f10:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14f14:	mov	r1, #4
   14f18:	ldr	r0, [r4, #40]	; 0x28
   14f1c:	str	r1, [sp]
   14f20:	add	r1, r4, #84	; 0x54
   14f24:	ldr	r9, [r4, #48]	; 0x30
   14f28:	blx	r9
   14f2c:	cmp	r0, #0
   14f30:	beq	14e54 <flatcc_builder_start_vector@@Base+0x68>
   14f34:	bl	12090 <__assert_fail@plt+0xc>
   14f38:	mvn	r0, #0
   14f3c:	b	14f0c <flatcc_builder_start_vector@@Base+0x120>
   14f40:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00014f44 <flatcc_builder_start_offset_vector@@Base>:
   14f44:	ldr	r1, [r0, #156]	; 0x9c
   14f48:	ldr	r3, [r0, #160]	; 0xa0
   14f4c:	add	r2, r1, #1
   14f50:	cmp	r2, r3
   14f54:	push	{r4, r5, r6, lr}
   14f58:	mov	r4, r0
   14f5c:	sub	sp, sp, #8
   14f60:	str	r2, [r0, #156]	; 0x9c
   14f64:	ble	14fd4 <flatcc_builder_start_offset_vector@@Base+0x90>
   14f68:	ldr	r3, [r0, #176]	; 0xb0
   14f6c:	cmp	r3, #0
   14f70:	cmpgt	r2, r3
   14f74:	movgt	r3, #1
   14f78:	movle	r3, #0
   14f7c:	bgt	1507c <flatcc_builder_start_offset_vector@@Base+0x138>
   14f80:	add	r1, r1, r1, lsl #3
   14f84:	ldr	r0, [r0, #88]	; 0x58
   14f88:	lsl	r5, r1, #2
   14f8c:	add	r2, r5, #36	; 0x24
   14f90:	cmp	r2, r0
   14f94:	bhi	15058 <flatcc_builder_start_offset_vector@@Base+0x114>
   14f98:	ldr	r3, [r4, #84]	; 0x54
   14f9c:	add	r3, r3, r5
   14fa0:	cmp	r3, #0
   14fa4:	str	r3, [r4, #32]
   14fa8:	beq	1507c <flatcc_builder_start_offset_vector@@Base+0x138>
   14fac:	ldr	r2, [r4, #88]	; 0x58
   14fb0:	ldr	r0, [pc, #204]	; 15084 <flatcc_builder_start_offset_vector@@Base+0x140>
   14fb4:	ldr	r1, [r4, #176]	; 0xb0
   14fb8:	umull	r0, r2, r0, r2
   14fbc:	lsr	r2, r2, #3
   14fc0:	cmp	r1, #0
   14fc4:	cmpgt	r2, r1
   14fc8:	str	r2, [r4, #160]	; 0xa0
   14fcc:	strgt	r1, [r4, #160]	; 0xa0
   14fd0:	b	14fe0 <flatcc_builder_start_offset_vector@@Base+0x9c>
   14fd4:	ldr	r3, [r0, #32]
   14fd8:	add	r3, r3, #36	; 0x24
   14fdc:	str	r3, [r0, #32]
   14fe0:	ldr	lr, [r4, #20]
   14fe4:	ldr	ip, [r4, #28]
   14fe8:	ldrh	r5, [r4, #130]	; 0x82
   14fec:	add	r2, lr, ip
   14ff0:	add	r2, r2, #7
   14ff4:	bic	r2, r2, #7
   14ff8:	mov	r1, #4
   14ffc:	mov	r0, #0
   15000:	str	lr, [r3, #8]
   15004:	strh	r5, [r3, #12]
   15008:	strh	r1, [r4, #130]	; 0x82
   1500c:	str	ip, [r3]
   15010:	str	r2, [r4, #28]
   15014:	str	r0, [r4, #20]
   15018:	str	r1, [r3, #16]
   1501c:	str	r0, [r3, #20]
   15020:	ldr	r1, [r4, #64]	; 0x40
   15024:	ldr	ip, [r4, #60]	; 0x3c
   15028:	sub	r1, r1, r2
   1502c:	mvn	lr, #3
   15030:	cmp	r1, lr
   15034:	add	r2, ip, r2
   15038:	movhi	r1, lr
   1503c:	mov	ip, #5
   15040:	strh	ip, [r3, #14]
   15044:	str	r2, [r4, #16]
   15048:	str	r1, [r4, #24]
   1504c:	str	lr, [r3, #4]
   15050:	add	sp, sp, #8
   15054:	pop	{r4, r5, r6, pc}
   15058:	mov	r1, #4
   1505c:	ldr	r0, [r4, #40]	; 0x28
   15060:	str	r1, [sp]
   15064:	add	r1, r4, #84	; 0x54
   15068:	ldr	r6, [r4, #48]	; 0x30
   1506c:	blx	r6
   15070:	cmp	r0, #0
   15074:	beq	14f98 <flatcc_builder_start_offset_vector@@Base+0x54>
   15078:	bl	12090 <__assert_fail@plt+0xc>
   1507c:	mvn	r0, #0
   15080:	b	15050 <flatcc_builder_start_offset_vector@@Base+0x10c>
   15084:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00015088 <flatcc_builder_create_offset_vector@@Base>:
   15088:	push	{r4, r5, r6, r7, r8, lr}
   1508c:	mov	r4, r0
   15090:	ldr	r0, [r0, #156]	; 0x9c
   15094:	ldr	r3, [r4, #160]	; 0xa0
   15098:	mov	r7, r1
   1509c:	add	r1, r0, #1
   150a0:	cmp	r1, r3
   150a4:	sub	sp, sp, #8
   150a8:	mov	r5, r2
   150ac:	str	r1, [r4, #156]	; 0x9c
   150b0:	ble	15120 <flatcc_builder_create_offset_vector@@Base+0x98>
   150b4:	ldr	r3, [r4, #176]	; 0xb0
   150b8:	cmp	r1, r3
   150bc:	cmpgt	r3, #0
   150c0:	movgt	r3, #1
   150c4:	movle	r3, #0
   150c8:	bgt	151f0 <flatcc_builder_create_offset_vector@@Base+0x168>
   150cc:	add	r0, r0, r0, lsl #3
   150d0:	ldr	r1, [r4, #88]	; 0x58
   150d4:	lsl	r6, r0, #2
   150d8:	add	r2, r6, #36	; 0x24
   150dc:	cmp	r2, r1
   150e0:	bhi	15258 <flatcc_builder_create_offset_vector@@Base+0x1d0>
   150e4:	ldr	r3, [r4, #84]	; 0x54
   150e8:	add	r3, r3, r6
   150ec:	cmp	r3, #0
   150f0:	str	r3, [r4, #32]
   150f4:	beq	151f0 <flatcc_builder_create_offset_vector@@Base+0x168>
   150f8:	ldr	r2, [r4, #88]	; 0x58
   150fc:	ldr	r0, [pc, #552]	; 1532c <flatcc_builder_create_offset_vector@@Base+0x2a4>
   15100:	ldr	r1, [r4, #176]	; 0xb0
   15104:	umull	r0, r2, r0, r2
   15108:	lsr	r2, r2, #3
   1510c:	cmp	r1, #0
   15110:	cmpgt	r2, r1
   15114:	str	r2, [r4, #160]	; 0xa0
   15118:	strgt	r1, [r4, #160]	; 0xa0
   1511c:	b	1512c <flatcc_builder_create_offset_vector@@Base+0xa4>
   15120:	ldr	r3, [r4, #32]
   15124:	add	r3, r3, #36	; 0x24
   15128:	str	r3, [r4, #32]
   1512c:	ldr	r2, [r4, #20]
   15130:	ldr	ip, [r4, #28]
   15134:	ldrh	r6, [r4, #130]	; 0x82
   15138:	add	r1, r2, ip
   1513c:	mvn	lr, #3
   15140:	add	r1, r1, #7
   15144:	str	r2, [r3, #8]
   15148:	bic	r1, r1, #7
   1514c:	mov	r0, #4
   15150:	mov	r2, #0
   15154:	strh	r6, [r3, #12]
   15158:	strh	r0, [r4, #130]	; 0x82
   1515c:	stm	r3, {ip, lr}
   15160:	str	r2, [r4, #20]
   15164:	str	r1, [r4, #28]
   15168:	str	r0, [r3, #16]
   1516c:	str	r2, [r3, #20]
   15170:	ldr	r2, [r4, #64]	; 0x40
   15174:	ldr	r0, [r4, #60]	; 0x3c
   15178:	sub	r2, r2, r1
   1517c:	cmp	r2, lr
   15180:	mov	ip, #5
   15184:	strh	ip, [r3, #14]
   15188:	add	r0, r0, r1
   1518c:	strls	r2, [r4, #24]
   15190:	strhi	lr, [r4, #24]
   15194:	movhi	r2, lr
   15198:	mvn	r6, #3
   1519c:	cmn	r5, #-1073741823	; 0xc0000001
   151a0:	str	r0, [r4, #16]
   151a4:	str	r6, [r3, #4]
   151a8:	bhi	15314 <flatcc_builder_create_offset_vector@@Base+0x28c>
   151ac:	lsl	r8, r5, #2
   151b0:	cmp	r8, r2
   151b4:	str	r5, [r3, #20]
   151b8:	str	r8, [r4, #20]
   151bc:	bcs	15200 <flatcc_builder_create_offset_vector@@Base+0x178>
   151c0:	cmp	r0, #0
   151c4:	beq	151f0 <flatcc_builder_create_offset_vector@@Base+0x168>
   151c8:	mov	r2, r8
   151cc:	mov	r1, r7
   151d0:	bl	11fd0 <memcpy@plt>
   151d4:	ldr	r3, [r4, #32]
   151d8:	ldrh	r2, [r3, #14]
   151dc:	cmp	r2, #5
   151e0:	bne	15318 <flatcc_builder_create_offset_vector@@Base+0x290>
   151e4:	ldr	r2, [r3, #20]
   151e8:	cmn	r2, #-1073741823	; 0xc0000001
   151ec:	bls	1527c <flatcc_builder_create_offset_vector@@Base+0x1f4>
   151f0:	mov	r5, #0
   151f4:	mov	r0, r5
   151f8:	add	sp, sp, #8
   151fc:	pop	{r4, r5, r6, r7, r8, pc}
   15200:	mov	r3, #1
   15204:	add	r2, r8, #1
   15208:	ldr	r0, [r4, #40]	; 0x28
   1520c:	add	r2, r2, r1
   15210:	str	r3, [sp]
   15214:	add	r1, r4, #60	; 0x3c
   15218:	ldr	r5, [r4, #48]	; 0x30
   1521c:	blx	r5
   15220:	cmp	r0, #0
   15224:	bne	151f0 <flatcc_builder_create_offset_vector@@Base+0x168>
   15228:	ldr	r2, [r4, #28]
   1522c:	ldr	r3, [r4, #64]	; 0x40
   15230:	ldr	r0, [r4, #60]	; 0x3c
   15234:	sub	r3, r3, r2
   15238:	ldr	r1, [r4, #32]
   1523c:	cmn	r3, #4
   15240:	movhi	r3, r6
   15244:	add	r0, r0, r2
   15248:	str	r3, [r4, #24]
   1524c:	str	r0, [r4, #16]
   15250:	str	r6, [r1, #4]
   15254:	b	151c0 <flatcc_builder_create_offset_vector@@Base+0x138>
   15258:	mov	r1, #4
   1525c:	ldr	r0, [r4, #40]	; 0x28
   15260:	str	r1, [sp]
   15264:	add	r1, r4, #84	; 0x54
   15268:	ldr	r8, [r4, #48]	; 0x30
   1526c:	blx	r8
   15270:	cmp	r0, #0
   15274:	beq	150e4 <flatcc_builder_create_offset_vector@@Base+0x5c>
   15278:	bl	12090 <__assert_fail@plt+0xc>
   1527c:	ldr	r1, [r4, #16]
   15280:	mov	r0, r4
   15284:	bl	12cac <flatcc_builder_default_alloc@@Base+0x2fc>
   15288:	subs	r5, r0, #0
   1528c:	beq	151f0 <flatcc_builder_create_offset_vector@@Base+0x168>
   15290:	ldr	r2, [r4, #20]
   15294:	mov	r1, #0
   15298:	ldr	r0, [r4, #16]
   1529c:	bl	12054 <memset@plt>
   152a0:	ldr	r3, [r4, #32]
   152a4:	ldr	r2, [r4, #64]	; 0x40
   152a8:	ldrh	lr, [r4, #130]	; 0x82
   152ac:	ldr	ip, [r3]
   152b0:	ldr	r1, [r3, #4]
   152b4:	ldrh	r0, [r4, #128]	; 0x80
   152b8:	sub	r2, r2, ip
   152bc:	cmp	r2, r1
   152c0:	movcs	r2, r1
   152c4:	cmp	r0, lr
   152c8:	ldr	r0, [r4, #60]	; 0x3c
   152cc:	ldr	r6, [r3, #8]
   152d0:	str	r2, [r4, #24]
   152d4:	add	r2, r0, ip
   152d8:	str	r2, [r4, #16]
   152dc:	str	r6, [r4, #20]
   152e0:	ldr	r2, [r4, #156]	; 0x9c
   152e4:	str	ip, [r4, #28]
   152e8:	str	r1, [r3, #4]
   152ec:	strhcc	lr, [r4, #128]	; 0x80
   152f0:	ldrh	r1, [r3, #12]
   152f4:	sub	r2, r2, #1
   152f8:	sub	r3, r3, #36	; 0x24
   152fc:	mov	r0, r5
   15300:	str	r2, [r4, #156]	; 0x9c
   15304:	strh	r1, [r4, #130]	; 0x82
   15308:	str	r3, [r4, #32]
   1530c:	add	sp, sp, #8
   15310:	pop	{r4, r5, r6, r7, r8, pc}
   15314:	bl	12104 <__assert_fail@plt+0x80>
   15318:	ldr	r3, [pc, #16]	; 15330 <flatcc_builder_create_offset_vector@@Base+0x2a8>
   1531c:	ldr	r2, [pc, #16]	; 15334 <flatcc_builder_create_offset_vector@@Base+0x2ac>
   15320:	ldr	r1, [pc, #16]	; 15338 <flatcc_builder_create_offset_vector@@Base+0x2b0>
   15324:	ldr	r0, [pc, #16]	; 1533c <flatcc_builder_create_offset_vector@@Base+0x2b4>
   15328:	bl	12084 <__assert_fail@plt>
   1532c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   15330:	andeq	r9, r1, r8, ror r0
   15334:	andeq	r0, r0, r8, asr #11
   15338:	andeq	r9, r1, ip, lsr r3
   1533c:	andeq	r9, r1, r4, lsl r5

00015340 <flatcc_builder_start_string@@Base>:
   15340:	ldr	r1, [r0, #156]	; 0x9c
   15344:	ldr	r3, [r0, #160]	; 0xa0
   15348:	add	r2, r1, #1
   1534c:	cmp	r2, r3
   15350:	push	{r4, r5, r6, lr}
   15354:	mov	r4, r0
   15358:	sub	sp, sp, #8
   1535c:	str	r2, [r0, #156]	; 0x9c
   15360:	ble	153d0 <flatcc_builder_start_string@@Base+0x90>
   15364:	ldr	r3, [r0, #176]	; 0xb0
   15368:	cmp	r3, #0
   1536c:	cmpgt	r2, r3
   15370:	movgt	r3, #1
   15374:	movle	r3, #0
   15378:	bgt	15478 <flatcc_builder_start_string@@Base+0x138>
   1537c:	add	r1, r1, r1, lsl #3
   15380:	ldr	r0, [r0, #88]	; 0x58
   15384:	lsl	r5, r1, #2
   15388:	add	r2, r5, #36	; 0x24
   1538c:	cmp	r2, r0
   15390:	bhi	15454 <flatcc_builder_start_string@@Base+0x114>
   15394:	ldr	r3, [r4, #84]	; 0x54
   15398:	add	r3, r3, r5
   1539c:	cmp	r3, #0
   153a0:	str	r3, [r4, #32]
   153a4:	beq	15478 <flatcc_builder_start_string@@Base+0x138>
   153a8:	ldr	r2, [r4, #88]	; 0x58
   153ac:	ldr	r0, [pc, #204]	; 15480 <flatcc_builder_start_string@@Base+0x140>
   153b0:	ldr	r1, [r4, #176]	; 0xb0
   153b4:	umull	r0, r2, r0, r2
   153b8:	lsr	r2, r2, #3
   153bc:	cmp	r1, #0
   153c0:	cmpgt	r2, r1
   153c4:	str	r2, [r4, #160]	; 0xa0
   153c8:	strgt	r1, [r4, #160]	; 0xa0
   153cc:	b	153dc <flatcc_builder_start_string@@Base+0x9c>
   153d0:	ldr	r3, [r0, #32]
   153d4:	add	r3, r3, #36	; 0x24
   153d8:	str	r3, [r0, #32]
   153dc:	ldr	lr, [r4, #20]
   153e0:	ldr	ip, [r4, #28]
   153e4:	ldrh	r5, [r4, #130]	; 0x82
   153e8:	add	r2, lr, ip
   153ec:	add	r2, r2, #7
   153f0:	bic	r2, r2, #7
   153f4:	mov	r1, #1
   153f8:	mov	r0, #0
   153fc:	str	lr, [r3, #8]
   15400:	strh	r5, [r3, #12]
   15404:	strh	r1, [r4, #130]	; 0x82
   15408:	str	ip, [r3]
   1540c:	str	r2, [r4, #28]
   15410:	str	r0, [r4, #20]
   15414:	str	r1, [r3, #16]
   15418:	str	r0, [r3, #20]
   1541c:	ldr	r1, [r4, #64]	; 0x40
   15420:	ldr	ip, [r4, #60]	; 0x3c
   15424:	sub	r1, r1, r2
   15428:	mvn	lr, #3
   1542c:	cmp	r1, lr
   15430:	add	r2, ip, r2
   15434:	movhi	r1, lr
   15438:	mov	ip, #6
   1543c:	strh	ip, [r3, #14]
   15440:	str	r2, [r4, #16]
   15444:	str	r1, [r4, #24]
   15448:	str	lr, [r3, #4]
   1544c:	add	sp, sp, #8
   15450:	pop	{r4, r5, r6, pc}
   15454:	mov	r1, #4
   15458:	ldr	r0, [r4, #40]	; 0x28
   1545c:	str	r1, [sp]
   15460:	add	r1, r4, #84	; 0x54
   15464:	ldr	r6, [r4, #48]	; 0x30
   15468:	blx	r6
   1546c:	cmp	r0, #0
   15470:	beq	15394 <flatcc_builder_start_string@@Base+0x54>
   15474:	bl	12090 <__assert_fail@plt+0xc>
   15478:	mvn	r0, #0
   1547c:	b	1544c <flatcc_builder_start_string@@Base+0x10c>
   15480:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00015484 <flatcc_builder_reserve_table@@Base>:
   15484:	cmp	r1, #0
   15488:	push	{r4, r5, r6, r7, lr}
   1548c:	sub	sp, sp, #12
   15490:	blt	15568 <flatcc_builder_reserve_table@@Base+0xe4>
   15494:	ldr	r2, [r0, #32]
   15498:	add	r1, r1, #2
   1549c:	mov	r5, r0
   154a0:	ldrh	r6, [r2, #28]
   154a4:	ldr	r3, [r2, #16]
   154a8:	ldr	r0, [r0, #56]	; 0x38
   154ac:	lsl	r4, r1, #1
   154b0:	add	r6, r3, r6, lsl #1
   154b4:	add	r2, r6, r4
   154b8:	cmp	r2, r0
   154bc:	bhi	15518 <flatcc_builder_reserve_table@@Base+0x94>
   154c0:	ldr	r3, [r5, #52]	; 0x34
   154c4:	adds	r3, r3, r6
   154c8:	streq	r3, [r5, #4]
   154cc:	mvneq	r0, #0
   154d0:	beq	15510 <flatcc_builder_reserve_table@@Base+0x8c>
   154d4:	ldr	r2, [r5, #32]
   154d8:	add	r3, r3, #4
   154dc:	str	r3, [r5, #4]
   154e0:	ldr	r6, [r2, #20]
   154e4:	ldr	r3, [r5, #80]	; 0x50
   154e8:	add	r2, r4, r6
   154ec:	sub	r2, r2, #3
   154f0:	cmp	r2, r3
   154f4:	bhi	15540 <flatcc_builder_reserve_table@@Base+0xbc>
   154f8:	ldr	r3, [r5, #76]	; 0x4c
   154fc:	add	r3, r3, r6
   15500:	cmp	r3, #0
   15504:	movne	r0, #0
   15508:	mvneq	r0, #0
   1550c:	str	r3, [r5]
   15510:	add	sp, sp, #12
   15514:	pop	{r4, r5, r6, r7, pc}
   15518:	mov	r3, #0
   1551c:	ldr	r0, [r5, #40]	; 0x28
   15520:	add	r1, r5, #52	; 0x34
   15524:	str	r3, [sp]
   15528:	mov	r3, #1
   1552c:	ldr	r7, [r5, #48]	; 0x30
   15530:	blx	r7
   15534:	cmp	r0, #0
   15538:	beq	154c0 <flatcc_builder_reserve_table@@Base+0x3c>
   1553c:	bl	12090 <__assert_fail@plt+0xc>
   15540:	mov	r3, #3
   15544:	ldr	r0, [r5, #40]	; 0x28
   15548:	add	r1, r5, #76	; 0x4c
   1554c:	str	r3, [sp]
   15550:	mov	r3, #0
   15554:	ldr	r4, [r5, #48]	; 0x30
   15558:	blx	r4
   1555c:	cmp	r0, #0
   15560:	beq	154f8 <flatcc_builder_reserve_table@@Base+0x74>
   15564:	b	1553c <flatcc_builder_reserve_table@@Base+0xb8>
   15568:	ldr	r3, [pc, #12]	; 1557c <flatcc_builder_reserve_table@@Base+0xf8>
   1556c:	ldr	r2, [pc, #12]	; 15580 <flatcc_builder_reserve_table@@Base+0xfc>
   15570:	ldr	r1, [pc, #12]	; 15584 <flatcc_builder_reserve_table@@Base+0x100>
   15574:	ldr	r0, [pc, #12]	; 15588 <flatcc_builder_reserve_table@@Base+0x104>
   15578:	bl	12084 <__assert_fail@plt>
   1557c:	muleq	r1, ip, r0
   15580:	andeq	r0, r0, r9, lsr #8
   15584:	andeq	r9, r1, ip, lsr r3
   15588:	andeq	r9, r1, ip, asr #11

0001558c <flatcc_builder_start_table@@Base>:
   1558c:	push	{r4, r5, r6, r7, lr}
   15590:	mov	r5, r1
   15594:	ldr	r1, [r0, #156]	; 0x9c
   15598:	ldr	r3, [r0, #160]	; 0xa0
   1559c:	add	r2, r1, #1
   155a0:	cmp	r2, r3
   155a4:	sub	sp, sp, #12
   155a8:	mov	r4, r0
   155ac:	str	r2, [r0, #156]	; 0x9c
   155b0:	ble	15620 <flatcc_builder_start_table@@Base+0x94>
   155b4:	ldr	r3, [r0, #176]	; 0xb0
   155b8:	cmp	r3, #0
   155bc:	cmpgt	r2, r3
   155c0:	movgt	r3, #1
   155c4:	movle	r3, #0
   155c8:	bgt	157c0 <flatcc_builder_start_table@@Base+0x234>
   155cc:	add	r1, r1, r1, lsl #3
   155d0:	ldr	r0, [r0, #88]	; 0x58
   155d4:	lsl	r6, r1, #2
   155d8:	add	r2, r6, #36	; 0x24
   155dc:	cmp	r2, r0
   155e0:	bhi	1579c <flatcc_builder_start_table@@Base+0x210>
   155e4:	ldr	r3, [r4, #84]	; 0x54
   155e8:	add	r3, r3, r6
   155ec:	cmp	r3, #0
   155f0:	str	r3, [r4, #32]
   155f4:	beq	157c0 <flatcc_builder_start_table@@Base+0x234>
   155f8:	ldr	r2, [r4, #88]	; 0x58
   155fc:	ldr	r0, [pc, #452]	; 157c8 <flatcc_builder_start_table@@Base+0x23c>
   15600:	ldr	r1, [r4, #176]	; 0xb0
   15604:	umull	r0, r2, r0, r2
   15608:	lsr	r2, r2, #3
   1560c:	cmp	r2, r1
   15610:	cmpgt	r1, #0
   15614:	str	r2, [r4, #160]	; 0xa0
   15618:	strgt	r1, [r4, #160]	; 0xa0
   1561c:	b	1562c <flatcc_builder_start_table@@Base+0xa0>
   15620:	ldr	r3, [r0, #32]
   15624:	add	r3, r3, #36	; 0x24
   15628:	str	r3, [r0, #32]
   1562c:	ldr	ip, [r4, #20]
   15630:	ldr	lr, [r4, #28]
   15634:	ldrh	r7, [r4, #130]	; 0x82
   15638:	ldr	r6, [r4, #4]
   1563c:	ldr	r0, [r4, #52]	; 0x34
   15640:	add	r2, ip, lr
   15644:	str	ip, [r3, #8]
   15648:	add	r2, r2, #7
   1564c:	mov	ip, #4
   15650:	strh	r7, [r3, #12]
   15654:	sub	r1, r6, r0
   15658:	strh	ip, [r4, #130]	; 0x82
   1565c:	bic	r2, r2, #7
   15660:	mvn	r6, #3
   15664:	mov	ip, #0
   15668:	str	lr, [r3]
   1566c:	str	r6, [r3, #4]
   15670:	str	r2, [r4, #28]
   15674:	str	ip, [r4, #20]
   15678:	str	r1, [r3, #16]
   1567c:	ldr	lr, [r4, #76]	; 0x4c
   15680:	ldr	r2, [r4]
   15684:	add	r5, r5, #2
   15688:	sub	r2, r2, lr
   1568c:	str	r2, [r3, #20]
   15690:	ldr	r2, [r4, #12]
   15694:	lsl	r5, r5, #1
   15698:	str	r2, [r3, #24]
   1569c:	ldrh	r6, [r4, #8]
   156a0:	ldr	lr, [pc, #292]	; 157cc <flatcc_builder_start_table@@Base+0x240>
   156a4:	strh	r6, [r3, #28]
   156a8:	add	r6, r1, r6, lsl #1
   156ac:	ldr	r1, [r4, #56]	; 0x38
   156b0:	add	r2, r6, r5
   156b4:	cmp	r2, r1
   156b8:	mov	r1, #3
   156bc:	strh	ip, [r4, #8]
   156c0:	str	lr, [r4, #12]
   156c4:	strh	r1, [r3, #14]
   156c8:	bhi	1574c <flatcc_builder_start_table@@Base+0x1c0>
   156cc:	adds	r6, r6, r0
   156d0:	streq	r6, [r4, #4]
   156d4:	beq	157c0 <flatcc_builder_start_table@@Base+0x234>
   156d8:	ldr	r3, [r4, #32]
   156dc:	add	r6, r6, #4
   156e0:	str	r6, [r4, #4]
   156e4:	ldr	r6, [r3, #20]
   156e8:	sub	r2, r5, #3
   156ec:	ldr	r3, [r4, #80]	; 0x50
   156f0:	add	r2, r2, r6
   156f4:	cmp	r2, r3
   156f8:	bhi	15774 <flatcc_builder_start_table@@Base+0x1e8>
   156fc:	ldr	r3, [r4, #76]	; 0x4c
   15700:	add	r3, r3, r6
   15704:	cmp	r3, #0
   15708:	str	r3, [r4]
   1570c:	beq	157c0 <flatcc_builder_start_table@@Base+0x234>
   15710:	ldr	ip, [r4, #28]
   15714:	ldr	r3, [r4, #64]	; 0x40
   15718:	ldr	r2, [pc, #176]	; 157d0 <flatcc_builder_start_table@@Base+0x244>
   1571c:	sub	r3, r3, ip
   15720:	ldr	r1, [r4, #60]	; 0x3c
   15724:	ldr	lr, [r4, #32]
   15728:	cmp	r3, r2
   1572c:	mov	r0, #0
   15730:	add	r1, r1, ip
   15734:	movcs	r3, r2
   15738:	str	r1, [r4, #16]
   1573c:	str	r3, [r4, #24]
   15740:	str	r2, [lr, #4]
   15744:	add	sp, sp, #12
   15748:	pop	{r4, r5, r6, r7, pc}
   1574c:	ldr	r0, [r4, #40]	; 0x28
   15750:	mov	r3, #1
   15754:	str	ip, [sp]
   15758:	add	r1, r4, #52	; 0x34
   1575c:	ldr	r7, [r4, #48]	; 0x30
   15760:	blx	r7
   15764:	cmp	r0, #0
   15768:	bne	15798 <flatcc_builder_start_table@@Base+0x20c>
   1576c:	ldr	r0, [r4, #52]	; 0x34
   15770:	b	156cc <flatcc_builder_start_table@@Base+0x140>
   15774:	mov	r3, #3
   15778:	ldr	r0, [r4, #40]	; 0x28
   1577c:	add	r1, r4, #76	; 0x4c
   15780:	str	r3, [sp]
   15784:	mov	r3, #0
   15788:	ldr	r5, [r4, #48]	; 0x30
   1578c:	blx	r5
   15790:	cmp	r0, #0
   15794:	beq	156fc <flatcc_builder_start_table@@Base+0x170>
   15798:	bl	12090 <__assert_fail@plt+0xc>
   1579c:	mov	r1, #4
   157a0:	ldr	r0, [r4, #40]	; 0x28
   157a4:	str	r1, [sp]
   157a8:	add	r1, r4, #84	; 0x54
   157ac:	ldr	r7, [r4, #48]	; 0x30
   157b0:	blx	r7
   157b4:	cmp	r0, #0
   157b8:	beq	155e4 <flatcc_builder_start_table@@Base+0x58>
   157bc:	b	15798 <flatcc_builder_start_table@@Base+0x20c>
   157c0:	mvn	r0, #0
   157c4:	b	15744 <flatcc_builder_start_table@@Base+0x1b8>
   157c8:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   157cc:	svccs	0x00693b52
   157d0:	strdeq	pc, [r0], -ip

000157d4 <flatcc_builder_create_vtable@@Base>:
   157d4:	push	{r4, r5, r6, lr}
   157d8:	sub	sp, sp, #80	; 0x50
   157dc:	mov	r3, #0
   157e0:	cmp	r2, #0
   157e4:	str	r3, [sp, #8]
   157e8:	str	r3, [sp, #12]
   157ec:	mov	r4, r0
   157f0:	ldr	r3, [r0, #152]	; 0x98
   157f4:	beq	15868 <flatcc_builder_create_vtable@@Base+0x94>
   157f8:	mov	r0, #1
   157fc:	cmp	r3, #0
   15800:	str	r1, [sp, #16]
   15804:	str	r2, [sp, #8]
   15808:	str	r2, [sp, #20]
   1580c:	str	r0, [sp, #12]
   15810:	mov	r1, r2
   15814:	beq	15880 <flatcc_builder_create_vtable@@Base+0xac>
   15818:	ldr	r3, [r4, #136]	; 0x88
   1581c:	sub	r5, r3, r2
   15820:	cmp	r3, r5
   15824:	ble	1587c <flatcc_builder_create_vtable@@Base+0xa8>
   15828:	ldr	r0, [r4, #36]	; 0x24
   1582c:	mov	r3, r5
   15830:	str	r2, [sp]
   15834:	add	r1, sp, #16
   15838:	ldr	r6, [r4, #44]	; 0x2c
   1583c:	mov	r2, #1
   15840:	blx	r6
   15844:	cmp	r0, #0
   15848:	bne	158e4 <flatcc_builder_create_vtable@@Base+0x110>
   1584c:	cmp	r5, #0
   15850:	str	r5, [r4, #136]	; 0x88
   15854:	beq	1585c <flatcc_builder_create_vtable@@Base+0x88>
   15858:	add	r5, r5, #1
   1585c:	mov	r0, r5
   15860:	add	sp, sp, #80	; 0x50
   15864:	pop	{r4, r5, r6, pc}
   15868:	cmp	r3, #0
   1586c:	bne	1587c <flatcc_builder_create_vtable@@Base+0xa8>
   15870:	ldr	r2, [r0, #180]	; 0xb4
   15874:	cmp	r2, #0
   15878:	beq	158d8 <flatcc_builder_create_vtable@@Base+0x104>
   1587c:	bl	120dc <__assert_fail@plt+0x58>
   15880:	ldr	r3, [r4, #180]	; 0xb4
   15884:	cmp	r3, #0
   15888:	bne	15818 <flatcc_builder_create_vtable@@Base+0x44>
   1588c:	ldr	r5, [r4, #140]	; 0x8c
   15890:	add	r3, r5, r2
   15894:	cmp	r5, r3
   15898:	str	r3, [r4, #140]	; 0x8c
   1589c:	movle	r2, r0
   158a0:	bgt	158f8 <flatcc_builder_create_vtable@@Base+0x124>
   158a4:	ldr	r0, [r4, #36]	; 0x24
   158a8:	mov	r3, r5
   158ac:	str	r1, [sp]
   158b0:	add	r1, sp, #16
   158b4:	ldr	r4, [r4, #44]	; 0x2c
   158b8:	blx	r4
   158bc:	cmp	r0, #0
   158c0:	beq	15858 <flatcc_builder_create_vtable@@Base+0x84>
   158c4:	ldr	r3, [pc, #48]	; 158fc <flatcc_builder_create_vtable@@Base+0x128>
   158c8:	ldr	r2, [pc, #48]	; 15900 <flatcc_builder_create_vtable@@Base+0x12c>
   158cc:	ldr	r1, [pc, #48]	; 15904 <flatcc_builder_create_vtable@@Base+0x130>
   158d0:	ldr	r0, [pc, #48]	; 15908 <flatcc_builder_create_vtable@@Base+0x134>
   158d4:	bl	12084 <__assert_fail@plt>
   158d8:	ldr	r5, [r4, #140]	; 0x8c
   158dc:	mov	r1, r2
   158e0:	b	158a4 <flatcc_builder_create_vtable@@Base+0xd0>
   158e4:	ldr	r3, [pc, #32]	; 1590c <flatcc_builder_create_vtable@@Base+0x138>
   158e8:	ldr	r2, [pc, #32]	; 15910 <flatcc_builder_create_vtable@@Base+0x13c>
   158ec:	ldr	r1, [pc, #16]	; 15904 <flatcc_builder_create_vtable@@Base+0x130>
   158f0:	ldr	r0, [pc, #16]	; 15908 <flatcc_builder_create_vtable@@Base+0x134>
   158f4:	bl	12084 <__assert_fail@plt>
   158f8:	bl	120b4 <__assert_fail@plt+0x30>
   158fc:	strdeq	r8, [r1], -ip
   15900:	andeq	r0, r0, r5, lsr #5
   15904:	andeq	r9, r1, ip, lsr r3
   15908:	strdeq	r9, [r1], -ip
   1590c:	andeq	r8, r1, r8, lsl #24
   15910:	andeq	r0, r0, fp, lsl #5

00015914 <flatcc_builder_create_cached_vtable@@Base>:
   15914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15918:	sub	sp, sp, #28
   1591c:	ldr	r4, [r0, #116]	; 0x74
   15920:	mov	sl, r3
   15924:	cmp	r4, #0
   15928:	mov	r8, r0
   1592c:	str	r1, [sp, #8]
   15930:	mov	r7, r2
   15934:	rsbne	r3, r4, #32
   15938:	beq	15a90 <flatcc_builder_create_cached_vtable@@Base+0x17c>
   1593c:	lsr	sl, sl, r3
   15940:	ldr	r3, [r8, #92]	; 0x5c
   15944:	adds	r2, r3, sl, lsl #2
   15948:	str	r3, [sp, #16]
   1594c:	str	r2, [sp, #20]
   15950:	beq	15a84 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15954:	ldr	r5, [r3, sl, lsl #2]
   15958:	cmp	r5, #0
   1595c:	beq	15b80 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   15960:	mov	r3, #0
   15964:	ldr	fp, [r8, #100]	; 0x64
   15968:	ldr	r6, [r8, #68]	; 0x44
   1596c:	mov	r9, r2
   15970:	str	r3, [sp, #12]
   15974:	b	15988 <flatcc_builder_create_cached_vtable@@Base+0x74>
   15978:	ldr	r5, [r4, #12]
   1597c:	add	r9, r4, #12
   15980:	cmp	r5, #0
   15984:	beq	159d8 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   15988:	add	r4, fp, r5
   1598c:	ldr	r2, [r4, #8]
   15990:	add	r1, r6, r2
   15994:	ldrh	r2, [r6, r2]
   15998:	cmp	r2, r7
   1599c:	bne	15978 <flatcc_builder_create_cached_vtable@@Base+0x64>
   159a0:	mov	r2, r7
   159a4:	ldr	r0, [sp, #8]
   159a8:	bl	11fdc <memcmp@plt>
   159ac:	cmp	r0, #0
   159b0:	bne	15978 <flatcc_builder_create_cached_vtable@@Base+0x64>
   159b4:	ldr	r1, [r4, #4]
   159b8:	ldr	r2, [r8, #152]	; 0x98
   159bc:	cmp	r1, r2
   159c0:	beq	15a54 <flatcc_builder_create_cached_vtable@@Base+0x140>
   159c4:	ldr	r5, [r4, #12]
   159c8:	add	r9, r4, #12
   159cc:	cmp	r5, #0
   159d0:	str	r4, [sp, #12]
   159d4:	bne	15988 <flatcc_builder_create_cached_vtable@@Base+0x74>
   159d8:	ldr	r4, [r8, #124]	; 0x7c
   159dc:	ldr	r3, [r8, #104]	; 0x68
   159e0:	add	r2, r4, #16
   159e4:	cmp	r2, r3
   159e8:	bhi	15b58 <flatcc_builder_create_cached_vtable@@Base+0x244>
   159ec:	ldr	r5, [r8, #100]	; 0x64
   159f0:	adds	r6, r5, r4
   159f4:	beq	15a84 <flatcc_builder_create_cached_vtable@@Base+0x170>
   159f8:	ldr	r3, [r8, #124]	; 0x7c
   159fc:	ldr	r0, [sp, #16]
   15a00:	ldr	r2, [r8, #152]	; 0x98
   15a04:	add	r1, r3, #16
   15a08:	str	r1, [r8, #124]	; 0x7c
   15a0c:	str	r2, [r6, #4]
   15a10:	ldr	r1, [r0, sl, lsl #2]
   15a14:	mov	r2, r7
   15a18:	str	r1, [r6, #12]
   15a1c:	str	r3, [r0, sl, lsl #2]
   15a20:	ldr	r1, [sp, #8]
   15a24:	mov	r0, r8
   15a28:	bl	157d4 <flatcc_builder_create_vtable@@Base>
   15a2c:	cmp	r0, #0
   15a30:	str	r0, [r5, r4]
   15a34:	beq	15a84 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15a38:	ldr	r3, [sp, #12]
   15a3c:	cmp	r3, #0
   15a40:	beq	15b88 <flatcc_builder_create_cached_vtable@@Base+0x274>
   15a44:	ldr	r3, [r3, #8]
   15a48:	str	r3, [r6, #8]
   15a4c:	add	sp, sp, #28
   15a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a54:	ldr	r3, [sp, #20]
   15a58:	cmp	r3, r9
   15a5c:	beq	15a78 <flatcc_builder_create_cached_vtable@@Base+0x164>
   15a60:	ldr	r2, [sp, #16]
   15a64:	ldr	r3, [r4, #12]
   15a68:	str	r3, [r9]
   15a6c:	ldr	r3, [r2, sl, lsl #2]
   15a70:	str	r3, [r4, #12]
   15a74:	str	r5, [r2, sl, lsl #2]
   15a78:	ldr	r0, [r4]
   15a7c:	add	sp, sp, #28
   15a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a84:	mov	r0, #0
   15a88:	add	sp, sp, #28
   15a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a90:	ldr	r3, [r0, #124]	; 0x7c
   15a94:	add	r5, r0, #92	; 0x5c
   15a98:	cmp	r3, #0
   15a9c:	bne	15c4c <flatcc_builder_create_cached_vtable@@Base+0x338>
   15aa0:	ldr	r3, [r0, #104]	; 0x68
   15aa4:	cmp	r3, #15
   15aa8:	bls	15b2c <flatcc_builder_create_cached_vtable@@Base+0x218>
   15aac:	ldr	r3, [r8, #100]	; 0x64
   15ab0:	cmp	r3, #0
   15ab4:	beq	15a84 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15ab8:	mov	r2, #16
   15abc:	mov	r3, #5
   15ac0:	str	r2, [r8, #124]	; 0x7c
   15ac4:	ldr	r0, [r8, #40]	; 0x28
   15ac8:	mov	r1, r5
   15acc:	str	r3, [sp]
   15ad0:	mov	r2, #256	; 0x100
   15ad4:	ldr	r5, [r8, #48]	; 0x30
   15ad8:	mov	r3, #1
   15adc:	blx	r5
   15ae0:	cmp	r0, #0
   15ae4:	bne	15a84 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15ae8:	ldr	r1, [r8, #96]	; 0x60
   15aec:	mov	r3, #256	; 0x100
   15af0:	b	15af8 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15af4:	mov	r3, r2
   15af8:	lsl	r2, r3, #1
   15afc:	cmp	r2, r1
   15b00:	bls	15af4 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   15b04:	lsr	r3, r3, #2
   15b08:	cmp	r3, #1
   15b0c:	bls	15bd8 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   15b10:	mov	r2, #1
   15b14:	add	r4, r4, #1
   15b18:	cmp	r3, r2, lsl r4
   15b1c:	bhi	15b14 <flatcc_builder_create_cached_vtable@@Base+0x200>
   15b20:	rsb	r3, r4, #32
   15b24:	str	r4, [r8, #116]	; 0x74
   15b28:	b	1593c <flatcc_builder_create_cached_vtable@@Base+0x28>
   15b2c:	mov	r3, #6
   15b30:	ldr	r0, [r0, #40]	; 0x28
   15b34:	mov	r2, #16
   15b38:	str	r3, [sp]
   15b3c:	add	r1, r8, #100	; 0x64
   15b40:	ldr	r6, [r8, #48]	; 0x30
   15b44:	mov	r3, r4
   15b48:	blx	r6
   15b4c:	cmp	r0, #0
   15b50:	beq	15aac <flatcc_builder_create_cached_vtable@@Base+0x198>
   15b54:	b	15c40 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   15b58:	mov	r3, #6
   15b5c:	ldr	r0, [r8, #40]	; 0x28
   15b60:	add	r1, r8, #100	; 0x64
   15b64:	str	r3, [sp]
   15b68:	mov	r3, #0
   15b6c:	ldr	r5, [r8, #48]	; 0x30
   15b70:	blx	r5
   15b74:	cmp	r0, #0
   15b78:	beq	159ec <flatcc_builder_create_cached_vtable@@Base+0xd8>
   15b7c:	b	15c40 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   15b80:	str	r5, [sp, #12]
   15b84:	b	159d8 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   15b88:	ldr	r3, [r8, #172]	; 0xac
   15b8c:	ldr	r9, [r8, #120]	; 0x78
   15b90:	cmp	r3, #0
   15b94:	add	r2, r9, r7
   15b98:	beq	15be0 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   15b9c:	cmp	r3, r2
   15ba0:	bcs	15be0 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   15ba4:	ldr	r3, [r8, #116]	; 0x74
   15ba8:	cmp	r3, #0
   15bac:	beq	15a4c <flatcc_builder_create_cached_vtable@@Base+0x138>
   15bb0:	ldr	r6, [sp, #12]
   15bb4:	ldr	r2, [r8, #96]	; 0x60
   15bb8:	mov	r1, r6
   15bbc:	ldr	r0, [r8, #92]	; 0x5c
   15bc0:	bl	12054 <memset@plt>
   15bc4:	mov	r3, #16
   15bc8:	ldr	r0, [r5, r4]
   15bcc:	str	r6, [r8, #120]	; 0x78
   15bd0:	str	r3, [r8, #124]	; 0x7c
   15bd4:	b	15a4c <flatcc_builder_create_cached_vtable@@Base+0x138>
   15bd8:	mov	r3, #32
   15bdc:	b	15b24 <flatcc_builder_create_cached_vtable@@Base+0x210>
   15be0:	ldr	r3, [r8, #72]	; 0x48
   15be4:	cmp	r3, r2
   15be8:	bcc	15c1c <flatcc_builder_create_cached_vtable@@Base+0x308>
   15bec:	ldr	r3, [r8, #68]	; 0x44
   15bf0:	adds	r0, r3, r9
   15bf4:	beq	15c44 <flatcc_builder_create_cached_vtable@@Base+0x330>
   15bf8:	ldr	r3, [r8, #120]	; 0x78
   15bfc:	ldr	r1, [sp, #8]
   15c00:	add	ip, r3, r7
   15c04:	str	r3, [r6, #8]
   15c08:	mov	r2, r7
   15c0c:	str	ip, [r8, #120]	; 0x78
   15c10:	bl	11fd0 <memcpy@plt>
   15c14:	ldr	r0, [r5, r4]
   15c18:	b	15a4c <flatcc_builder_create_cached_vtable@@Base+0x138>
   15c1c:	mov	r3, #2
   15c20:	ldr	r0, [r8, #40]	; 0x28
   15c24:	add	r1, r8, #68	; 0x44
   15c28:	str	r3, [sp]
   15c2c:	mov	r3, #0
   15c30:	ldr	sl, [r8, #48]	; 0x30
   15c34:	blx	sl
   15c38:	cmp	r0, #0
   15c3c:	beq	15bec <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   15c40:	bl	12090 <__assert_fail@plt+0xc>
   15c44:	mvn	r0, #0
   15c48:	b	15a4c <flatcc_builder_create_cached_vtable@@Base+0x138>
   15c4c:	ldr	r3, [pc, #12]	; 15c60 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   15c50:	ldr	r2, [pc, #12]	; 15c64 <flatcc_builder_create_cached_vtable@@Base+0x350>
   15c54:	ldr	r1, [pc, #12]	; 15c68 <flatcc_builder_create_cached_vtable@@Base+0x354>
   15c58:	ldr	r0, [pc, #12]	; 15c6c <flatcc_builder_create_cached_vtable@@Base+0x358>
   15c5c:	bl	12084 <__assert_fail@plt>
   15c60:	strheq	r9, [r1], -ip
   15c64:	andeq	r0, r0, r6, asr r1
   15c68:	andeq	r9, r1, ip, lsr r3
   15c6c:	ldrdeq	r9, [r1], -r8

00015c70 <flatcc_builder_create_table@@Base>:
   15c70:	push	{r4, r5, r6, r7, r8, lr}
   15c74:	sub	sp, sp, #88	; 0x58
   15c78:	ldr	r4, [sp, #116]	; 0x74
   15c7c:	ldr	lr, [sp, #120]	; 0x78
   15c80:	cmp	r4, #0
   15c84:	blt	15dbc <flatcc_builder_create_table@@Base+0x14c>
   15c88:	mov	r8, r2
   15c8c:	ands	r2, lr, #1
   15c90:	beq	15de8 <flatcc_builder_create_table@@Base+0x178>
   15c94:	mov	r5, r0
   15c98:	ldrh	r0, [r0, #128]	; 0x80
   15c9c:	cmp	r3, #4
   15ca0:	movcc	r3, #4
   15ca4:	ldr	ip, [r5, #136]	; 0x88
   15ca8:	cmp	r0, r3
   15cac:	mvn	r0, #3
   15cb0:	strhcc	r3, [r5, #128]	; 0x80
   15cb4:	sub	r7, ip, r8
   15cb8:	sub	r3, r3, #1
   15cbc:	sub	r0, r0, r8
   15cc0:	and	r7, r7, r3
   15cc4:	add	r0, r0, ip
   15cc8:	sub	lr, lr, #1
   15ccc:	sub	r0, r0, r7
   15cd0:	sub	lr, r0, lr
   15cd4:	cmp	r4, #0
   15cd8:	str	lr, [sp, #12]
   15cdc:	beq	15d10 <flatcc_builder_create_table@@Base+0xa0>
   15ce0:	ldr	ip, [sp, #112]	; 0x70
   15ce4:	mvn	r6, #3
   15ce8:	add	r4, ip, r4, lsl #1
   15cec:	sub	r6, r6, r0
   15cf0:	ldrh	r3, [ip], #2
   15cf4:	sub	lr, r6, r3
   15cf8:	ldr	r0, [r1, r3]
   15cfc:	cmp	r4, ip
   15d00:	add	r0, r0, lr
   15d04:	str	r0, [r1, r3]
   15d08:	bne	15cf0 <flatcc_builder_create_table@@Base+0x80>
   15d0c:	ldr	ip, [r5, #136]	; 0x88
   15d10:	cmp	r8, #0
   15d14:	mov	r3, #4
   15d18:	mov	r0, #1
   15d1c:	str	r3, [sp, #16]
   15d20:	movne	r2, #2
   15d24:	str	r3, [sp, #28]
   15d28:	addne	r3, r8, r3
   15d2c:	str	r0, [sp, #20]
   15d30:	add	lr, sp, #12
   15d34:	strne	r1, [sp, #32]
   15d38:	strne	r8, [sp, #36]	; 0x24
   15d3c:	strne	r3, [sp, #16]
   15d40:	strne	r2, [sp, #20]
   15d44:	movne	r0, #3
   15d48:	moveq	r0, #2
   15d4c:	cmp	r7, #0
   15d50:	str	lr, [sp, #24]
   15d54:	beq	15d80 <flatcc_builder_create_table@@Base+0x110>
   15d58:	add	r2, r2, #1
   15d5c:	add	r1, sp, #88	; 0x58
   15d60:	add	r1, r1, r2, lsl #3
   15d64:	ldr	lr, [pc, #144]	; 15dfc <flatcc_builder_create_table@@Base+0x18c>
   15d68:	mov	r2, r0
   15d6c:	add	r3, r3, r7
   15d70:	str	r7, [r1, #-68]	; 0xffffffbc
   15d74:	str	r3, [sp, #16]
   15d78:	str	r0, [sp, #20]
   15d7c:	str	lr, [r1, #-72]	; 0xffffffb8
   15d80:	sub	r4, ip, r3
   15d84:	cmp	r4, ip
   15d88:	bge	15de4 <flatcc_builder_create_table@@Base+0x174>
   15d8c:	ldr	r0, [r5, #36]	; 0x24
   15d90:	add	r1, sp, #24
   15d94:	str	r3, [sp]
   15d98:	mov	r3, r4
   15d9c:	ldr	r6, [r5, #44]	; 0x2c
   15da0:	blx	r6
   15da4:	cmp	r0, #0
   15da8:	bne	15dd0 <flatcc_builder_create_table@@Base+0x160>
   15dac:	mov	r0, r4
   15db0:	str	r4, [r5, #136]	; 0x88
   15db4:	add	sp, sp, #88	; 0x58
   15db8:	pop	{r4, r5, r6, r7, r8, pc}
   15dbc:	ldr	r3, [pc, #60]	; 15e00 <flatcc_builder_create_table@@Base+0x190>
   15dc0:	ldr	r2, [pc, #60]	; 15e04 <flatcc_builder_create_table@@Base+0x194>
   15dc4:	ldr	r1, [pc, #60]	; 15e08 <flatcc_builder_create_table@@Base+0x198>
   15dc8:	ldr	r0, [pc, #60]	; 15e0c <flatcc_builder_create_table@@Base+0x19c>
   15dcc:	bl	12084 <__assert_fail@plt>
   15dd0:	ldr	r3, [pc, #56]	; 15e10 <flatcc_builder_create_table@@Base+0x1a0>
   15dd4:	ldr	r2, [pc, #56]	; 15e14 <flatcc_builder_create_table@@Base+0x1a4>
   15dd8:	ldr	r1, [pc, #40]	; 15e08 <flatcc_builder_create_table@@Base+0x198>
   15ddc:	ldr	r0, [pc, #52]	; 15e18 <flatcc_builder_create_table@@Base+0x1a8>
   15de0:	bl	12084 <__assert_fail@plt>
   15de4:	bl	120dc <__assert_fail@plt+0x58>
   15de8:	ldr	r3, [pc, #16]	; 15e00 <flatcc_builder_create_table@@Base+0x190>
   15dec:	ldr	r2, [pc, #40]	; 15e1c <flatcc_builder_create_table@@Base+0x1ac>
   15df0:	ldr	r1, [pc, #16]	; 15e08 <flatcc_builder_create_table@@Base+0x198>
   15df4:	ldr	r0, [pc, #36]	; 15e20 <flatcc_builder_create_table@@Base+0x1b0>
   15df8:	bl	12084 <__assert_fail@plt>
   15dfc:	andeq	r8, r1, r4, lsl #25
   15e00:	andeq	r9, r1, r8, asr #1
   15e04:	ldrdeq	r0, [r0], -r5
   15e08:	andeq	r9, r1, ip, lsr r3
   15e0c:	andeq	r9, r1, r8, ror #11
   15e10:	andeq	r8, r1, r8, lsl #24
   15e14:	andeq	r0, r0, fp, lsl #5
   15e18:	strdeq	r9, [r1], -ip
   15e1c:	ldrdeq	r0, [r0], -fp
   15e20:	strdeq	r9, [r1], -ip

00015e24 <flatcc_builder_check_required_field@@Base>:
   15e24:	ldr	r3, [r0, #32]
   15e28:	ldrh	r3, [r3, #14]
   15e2c:	cmp	r3, #3
   15e30:	bne	15e5c <flatcc_builder_check_required_field@@Base+0x38>
   15e34:	ldrh	r3, [r0, #8]
   15e38:	cmp	r3, r1
   15e3c:	movls	r0, #0
   15e40:	bls	15e58 <flatcc_builder_check_required_field@@Base+0x34>
   15e44:	ldr	r3, [r0, #4]
   15e48:	lsl	r1, r1, #1
   15e4c:	ldrh	r0, [r3, r1]
   15e50:	adds	r0, r0, #0
   15e54:	movne	r0, #1
   15e58:	bx	lr
   15e5c:	push	{r4, lr}
   15e60:	ldr	r3, [pc, #12]	; 15e74 <flatcc_builder_check_required_field@@Base+0x50>
   15e64:	ldr	r2, [pc, #12]	; 15e78 <flatcc_builder_check_required_field@@Base+0x54>
   15e68:	ldr	r1, [pc, #12]	; 15e7c <flatcc_builder_check_required_field@@Base+0x58>
   15e6c:	ldr	r0, [pc, #12]	; 15e80 <flatcc_builder_check_required_field@@Base+0x5c>
   15e70:	bl	12084 <__assert_fail@plt>
   15e74:	andeq	r9, r1, r4, ror #1
   15e78:	strdeq	r0, [r0], -r8
   15e7c:	andeq	r9, r1, ip, lsr r3
   15e80:	andeq	r9, r1, r8, lsl #12

00015e84 <flatcc_builder_check_union_field@@Base>:
   15e84:	ldr	r3, [r0, #32]
   15e88:	ldrh	r3, [r3, #14]
   15e8c:	cmp	r3, #3
   15e90:	bne	15f0c <flatcc_builder_check_union_field@@Base+0x88>
   15e94:	cmp	r1, #0
   15e98:	beq	15ee4 <flatcc_builder_check_union_field@@Base+0x60>
   15e9c:	ldrh	r3, [r0, #8]
   15ea0:	cmp	r3, r1
   15ea4:	bls	15ee4 <flatcc_builder_check_union_field@@Base+0x60>
   15ea8:	sub	r1, r1, #-2147483647	; 0x80000001
   15eac:	ldr	r3, [r0, #4]
   15eb0:	lsl	r1, r1, #1
   15eb4:	ldrh	r2, [r3, r1]
   15eb8:	cmp	r2, #0
   15ebc:	beq	15ef8 <flatcc_builder_check_union_field@@Base+0x74>
   15ec0:	ldr	r0, [r0, #16]
   15ec4:	add	r1, r3, r1
   15ec8:	ldrb	r2, [r0, r2]
   15ecc:	ldrh	r1, [r1, #2]
   15ed0:	cmp	r2, #0
   15ed4:	bne	15eec <flatcc_builder_check_union_field@@Base+0x68>
   15ed8:	clz	r0, r1
   15edc:	lsr	r0, r0, #5
   15ee0:	bx	lr
   15ee4:	mov	r0, #0
   15ee8:	bx	lr
   15eec:	adds	r0, r1, #0
   15ef0:	movne	r0, #1
   15ef4:	b	15ee8 <flatcc_builder_check_union_field@@Base+0x64>
   15ef8:	add	r1, r3, r1
   15efc:	ldrh	r1, [r1, #2]
   15f00:	clz	r0, r1
   15f04:	lsr	r0, r0, #5
   15f08:	bx	lr
   15f0c:	push	{r4, lr}
   15f10:	ldr	r3, [pc, #12]	; 15f24 <flatcc_builder_check_union_field@@Base+0xa0>
   15f14:	ldr	r2, [pc, #12]	; 15f28 <flatcc_builder_check_union_field@@Base+0xa4>
   15f18:	ldr	r1, [pc, #12]	; 15f2c <flatcc_builder_check_union_field@@Base+0xa8>
   15f1c:	ldr	r0, [pc, #12]	; 15f30 <flatcc_builder_check_union_field@@Base+0xac>
   15f20:	bl	12084 <__assert_fail@plt>
   15f24:	andeq	r9, r1, r8, lsl #2
   15f28:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15f2c:	andeq	r9, r1, ip, lsr r3
   15f30:	andeq	r9, r1, r8, lsl #12

00015f34 <flatcc_builder_check_required@@Base>:
   15f34:	ldr	r3, [r0, #32]
   15f38:	ldrh	r3, [r3, #14]
   15f3c:	cmp	r3, #3
   15f40:	bne	15fa4 <flatcc_builder_check_required@@Base+0x70>
   15f44:	ldrh	r3, [r0, #8]
   15f48:	cmp	r3, r2
   15f4c:	movlt	r0, #0
   15f50:	blt	15fa0 <flatcc_builder_check_required@@Base+0x6c>
   15f54:	cmp	r2, #0
   15f58:	ble	15f9c <flatcc_builder_check_required@@Base+0x68>
   15f5c:	ldrh	r3, [r1]
   15f60:	ldr	ip, [r0, #4]
   15f64:	lsl	r3, r3, #1
   15f68:	ldrh	r0, [ip, r3]
   15f6c:	cmp	r0, #0
   15f70:	beq	15fa0 <flatcc_builder_check_required@@Base+0x6c>
   15f74:	add	r2, r1, r2, lsl #1
   15f78:	add	r1, r1, #2
   15f7c:	b	15f94 <flatcc_builder_check_required@@Base+0x60>
   15f80:	ldrh	r3, [r1], #2
   15f84:	lsl	r3, r3, #1
   15f88:	ldrh	r0, [ip, r3]
   15f8c:	cmp	r0, #0
   15f90:	beq	15fa0 <flatcc_builder_check_required@@Base+0x6c>
   15f94:	cmp	r1, r2
   15f98:	bne	15f80 <flatcc_builder_check_required@@Base+0x4c>
   15f9c:	mov	r0, #1
   15fa0:	bx	lr
   15fa4:	push	{r4, lr}
   15fa8:	ldr	r3, [pc, #12]	; 15fbc <flatcc_builder_check_required@@Base+0x88>
   15fac:	ldr	r2, [pc, #12]	; 15fc0 <flatcc_builder_check_required@@Base+0x8c>
   15fb0:	ldr	r1, [pc, #12]	; 15fc4 <flatcc_builder_check_required@@Base+0x90>
   15fb4:	ldr	r0, [pc, #12]	; 15fc8 <flatcc_builder_check_required@@Base+0x94>
   15fb8:	bl	12084 <__assert_fail@plt>
   15fbc:	andeq	r9, r1, ip, lsr #2
   15fc0:	andeq	r0, r0, r1, lsl r5
   15fc4:	andeq	r9, r1, ip, lsr r3
   15fc8:	andeq	r9, r1, r8, lsl #12

00015fcc <flatcc_builder_end_table@@Base>:
   15fcc:	ldr	r3, [r0, #32]
   15fd0:	push	{r4, r5, r6, r7, lr}
   15fd4:	sub	sp, sp, #20
   15fd8:	ldrh	r3, [r3, #14]
   15fdc:	cmp	r3, #3
   15fe0:	bne	16164 <flatcc_builder_end_table@@Base+0x198>
   15fe4:	ldrh	r5, [r0, #8]
   15fe8:	ldr	r3, [r0, #12]
   15fec:	ldr	r1, [pc, #388]	; 16178 <flatcc_builder_end_table@@Base+0x1ac>
   15ff0:	add	r5, r5, #2
   15ff4:	ldr	r2, [r0, #20]
   15ff8:	lsl	r5, r5, #1
   15ffc:	add	r2, r2, #4
   16000:	uxth	r5, r5
   16004:	eor	r3, r3, r5
   16008:	uxth	r2, r2
   1600c:	mul	r3, r1, r3
   16010:	ldr	ip, [r0, #4]
   16014:	eor	r3, r3, r2
   16018:	sub	r6, ip, #4
   1601c:	mul	r1, r1, r3
   16020:	strh	r2, [ip, #-2]
   16024:	strh	r5, [ip, #-4]
   16028:	mov	r3, r1
   1602c:	str	r1, [r0, #12]
   16030:	mov	r2, r5
   16034:	mov	r1, r6
   16038:	mov	r4, r0
   1603c:	bl	15914 <flatcc_builder_create_cached_vtable@@Base>
   16040:	subs	r7, r0, #0
   16044:	bne	16058 <flatcc_builder_end_table@@Base+0x8c>
   16048:	mov	r5, #0
   1604c:	mov	r0, r5
   16050:	add	sp, sp, #20
   16054:	pop	{r4, r5, r6, r7, pc}
   16058:	mov	r2, r5
   1605c:	mov	r1, #0
   16060:	mov	r0, r6
   16064:	bl	12054 <memset@plt>
   16068:	ldr	r3, [r4, #32]
   1606c:	ldr	ip, [r4, #76]	; 0x4c
   16070:	ldr	r0, [r4]
   16074:	ldr	r2, [r3, #20]
   16078:	ldr	r1, [r4, #16]
   1607c:	add	ip, ip, r2
   16080:	sub	r0, r0, ip
   16084:	ldrh	r3, [r4, #130]	; 0x82
   16088:	asr	r0, r0, #1
   1608c:	ldr	r2, [r4, #20]
   16090:	str	r0, [sp, #4]
   16094:	str	r7, [sp, #8]
   16098:	str	ip, [sp]
   1609c:	mov	r0, r4
   160a0:	bl	15c70 <flatcc_builder_create_table@@Base>
   160a4:	subs	r5, r0, #0
   160a8:	beq	16048 <flatcc_builder_end_table@@Base+0x7c>
   160ac:	ldr	r3, [r4, #32]
   160b0:	ldr	r0, [r4, #52]	; 0x34
   160b4:	ldr	ip, [r4, #76]	; 0x4c
   160b8:	ldr	r1, [r3, #24]
   160bc:	ldr	r2, [r4, #20]
   160c0:	str	r1, [r4, #12]
   160c4:	ldrh	lr, [r3, #28]
   160c8:	mov	r1, #0
   160cc:	strh	lr, [r4, #8]
   160d0:	ldr	lr, [r3, #16]
   160d4:	add	r0, r0, lr
   160d8:	str	r0, [r4, #4]
   160dc:	ldr	r3, [r3, #20]
   160e0:	ldr	r0, [r4, #16]
   160e4:	add	r3, ip, r3
   160e8:	str	r3, [r4]
   160ec:	bl	12054 <memset@plt>
   160f0:	ldr	r3, [r4, #32]
   160f4:	ldr	r2, [r4, #64]	; 0x40
   160f8:	ldrh	lr, [r4, #130]	; 0x82
   160fc:	ldr	ip, [r3]
   16100:	ldr	r1, [r3, #4]
   16104:	ldrh	r0, [r4, #128]	; 0x80
   16108:	sub	r2, r2, ip
   1610c:	cmp	r2, r1
   16110:	movcs	r2, r1
   16114:	cmp	r0, lr
   16118:	ldr	r0, [r4, #60]	; 0x3c
   1611c:	ldr	r6, [r3, #8]
   16120:	str	r2, [r4, #24]
   16124:	add	r2, r0, ip
   16128:	str	r2, [r4, #16]
   1612c:	str	r6, [r4, #20]
   16130:	ldr	r2, [r4, #156]	; 0x9c
   16134:	str	ip, [r4, #28]
   16138:	str	r1, [r3, #4]
   1613c:	strhcc	lr, [r4, #128]	; 0x80
   16140:	ldrh	r1, [r3, #12]
   16144:	sub	r2, r2, #1
   16148:	sub	r3, r3, #36	; 0x24
   1614c:	mov	r0, r5
   16150:	str	r2, [r4, #156]	; 0x9c
   16154:	strh	r1, [r4, #130]	; 0x82
   16158:	str	r3, [r4, #32]
   1615c:	add	sp, sp, #20
   16160:	pop	{r4, r5, r6, r7, pc}
   16164:	ldr	r3, [pc, #16]	; 1617c <flatcc_builder_end_table@@Base+0x1b0>
   16168:	ldr	r2, [pc, #16]	; 16180 <flatcc_builder_end_table@@Base+0x1b4>
   1616c:	ldr	r1, [pc, #16]	; 16184 <flatcc_builder_end_table@@Base+0x1b8>
   16170:	ldr	r0, [pc, #16]	; 16188 <flatcc_builder_end_table@@Base+0x1bc>
   16174:	bl	12084 <__assert_fail@plt>
   16178:			; <UNDEFINED> instruction: 0x9e3779b1
   1617c:	andeq	r9, r1, ip, asr #2
   16180:	andeq	r0, r0, r5, lsr #10
   16184:	andeq	r9, r1, ip, lsr r3
   16188:	andeq	r9, r1, r8, lsl #12

0001618c <flatcc_builder_create_vector@@Base>:
   1618c:	push	{r4, r5, r6, lr}
   16190:	sub	sp, sp, #88	; 0x58
   16194:	mov	r4, r0
   16198:	ldr	ip, [sp, #108]	; 0x6c
   1619c:	ldrh	r0, [sp, #104]	; 0x68
   161a0:	cmp	r2, ip
   161a4:	bhi	16280 <flatcc_builder_create_vector@@Base+0xf4>
   161a8:	ldrh	ip, [r4, #128]	; 0x80
   161ac:	mul	r3, r3, r2
   161b0:	cmp	r0, #4
   161b4:	movcc	r0, #4
   161b8:	ldr	lr, [r4, #136]	; 0x88
   161bc:	cmp	ip, r0
   161c0:	sub	r6, lr, r3
   161c4:	mov	ip, #4
   161c8:	strhcc	r0, [r4, #128]	; 0x80
   161cc:	str	r2, [sp, #12]
   161d0:	cmp	r3, #0
   161d4:	mov	r2, #1
   161d8:	sub	r0, r0, #1
   161dc:	str	ip, [sp, #16]
   161e0:	str	r2, [sp, #20]
   161e4:	and	r0, r0, r6
   161e8:	movne	r2, #2
   161ec:	str	ip, [sp, #28]
   161f0:	addne	ip, r3, ip
   161f4:	strne	r3, [sp, #36]	; 0x24
   161f8:	add	r5, sp, #12
   161fc:	strne	r1, [sp, #32]
   16200:	strne	ip, [sp, #16]
   16204:	strne	r2, [sp, #20]
   16208:	movne	r3, #3
   1620c:	moveq	r3, #2
   16210:	cmp	r0, #0
   16214:	str	r5, [sp, #24]
   16218:	beq	16244 <flatcc_builder_create_vector@@Base+0xb8>
   1621c:	add	r2, r2, #1
   16220:	add	r1, sp, #88	; 0x58
   16224:	add	r1, r1, r2, lsl #3
   16228:	ldr	r5, [pc, #124]	; 162ac <flatcc_builder_create_vector@@Base+0x120>
   1622c:	mov	r2, r3
   16230:	add	ip, ip, r0
   16234:	str	r0, [r1, #-68]	; 0xffffffbc
   16238:	str	ip, [sp, #16]
   1623c:	str	r3, [sp, #20]
   16240:	str	r5, [r1, #-72]	; 0xffffffb8
   16244:	sub	r5, lr, ip
   16248:	cmp	lr, r5
   1624c:	ble	162a8 <flatcc_builder_create_vector@@Base+0x11c>
   16250:	ldr	r0, [r4, #36]	; 0x24
   16254:	mov	r3, r5
   16258:	str	ip, [sp]
   1625c:	add	r1, sp, #24
   16260:	ldr	r6, [r4, #44]	; 0x2c
   16264:	blx	r6
   16268:	cmp	r0, #0
   1626c:	bne	16294 <flatcc_builder_create_vector@@Base+0x108>
   16270:	mov	r0, r5
   16274:	str	r5, [r4, #136]	; 0x88
   16278:	add	sp, sp, #88	; 0x58
   1627c:	pop	{r4, r5, r6, pc}
   16280:	ldr	r3, [pc, #40]	; 162b0 <flatcc_builder_create_vector@@Base+0x124>
   16284:	ldr	r2, [pc, #40]	; 162b4 <flatcc_builder_create_vector@@Base+0x128>
   16288:	ldr	r1, [pc, #40]	; 162b8 <flatcc_builder_create_vector@@Base+0x12c>
   1628c:	ldr	r0, [pc, #40]	; 162bc <flatcc_builder_create_vector@@Base+0x130>
   16290:	bl	12084 <__assert_fail@plt>
   16294:	ldr	r3, [pc, #36]	; 162c0 <flatcc_builder_create_vector@@Base+0x134>
   16298:	ldr	r2, [pc, #36]	; 162c4 <flatcc_builder_create_vector@@Base+0x138>
   1629c:	ldr	r1, [pc, #20]	; 162b8 <flatcc_builder_create_vector@@Base+0x12c>
   162a0:	ldr	r0, [pc, #32]	; 162c8 <flatcc_builder_create_vector@@Base+0x13c>
   162a4:	bl	12084 <__assert_fail@plt>
   162a8:	bl	120dc <__assert_fail@plt+0x58>
   162ac:	andeq	r8, r1, r4, lsl #25
   162b0:	andeq	r9, r1, r8, ror #2
   162b4:	andeq	r0, r0, r5, asr r5
   162b8:	andeq	r9, r1, ip, lsr r3
   162bc:	andeq	r9, r1, r4, lsr r6
   162c0:	andeq	r8, r1, r8, lsl #24
   162c4:	andeq	r0, r0, fp, lsl #5
   162c8:	strdeq	r9, [r1], -ip

000162cc <flatcc_builder_end_vector@@Base>:
   162cc:	ldr	r3, [r0, #32]
   162d0:	push	{r4, r5, r6, lr}
   162d4:	sub	sp, sp, #88	; 0x58
   162d8:	ldrh	r2, [r3, #14]
   162dc:	cmp	r2, #4
   162e0:	bne	16484 <flatcc_builder_end_vector@@Base+0x1b8>
   162e4:	ldr	lr, [r3, #20]
   162e8:	ldr	r2, [r3, #24]
   162ec:	ldr	r1, [r3, #16]
   162f0:	cmp	lr, r2
   162f4:	mov	r4, r0
   162f8:	ldr	r5, [r0, #16]
   162fc:	ldrh	r3, [r0, #130]	; 0x82
   16300:	bhi	16470 <flatcc_builder_end_vector@@Base+0x1a4>
   16304:	ldrh	r2, [r0, #128]	; 0x80
   16308:	mul	r1, r1, lr
   1630c:	cmp	r3, #4
   16310:	movcc	r3, #4
   16314:	ldr	ip, [r0, #136]	; 0x88
   16318:	cmp	r2, r3
   1631c:	strhcc	r3, [r0, #128]	; 0x80
   16320:	sub	r2, r3, #1
   16324:	sub	r0, ip, r1
   16328:	cmp	r1, #0
   1632c:	mov	r3, #4
   16330:	and	r0, r0, r2
   16334:	mov	r2, #1
   16338:	str	r3, [sp, #16]
   1633c:	str	r2, [sp, #20]
   16340:	str	r3, [sp, #28]
   16344:	movne	r2, #2
   16348:	addne	r3, r1, r3
   1634c:	strne	r1, [sp, #36]	; 0x24
   16350:	str	lr, [sp, #12]
   16354:	strne	r5, [sp, #32]
   16358:	add	lr, sp, #12
   1635c:	strne	r3, [sp, #16]
   16360:	strne	r2, [sp, #20]
   16364:	movne	r1, #3
   16368:	moveq	r1, #2
   1636c:	cmp	r0, #0
   16370:	str	lr, [sp, #24]
   16374:	beq	163a0 <flatcc_builder_end_vector@@Base+0xd4>
   16378:	add	r2, r2, #1
   1637c:	add	lr, sp, #88	; 0x58
   16380:	add	lr, lr, r2, lsl #3
   16384:	ldr	r5, [pc, #268]	; 16498 <flatcc_builder_end_vector@@Base+0x1cc>
   16388:	mov	r2, r1
   1638c:	add	r3, r3, r0
   16390:	str	r0, [lr, #-68]	; 0xffffffbc
   16394:	str	r3, [sp, #16]
   16398:	str	r1, [sp, #20]
   1639c:	str	r5, [lr, #-72]	; 0xffffffb8
   163a0:	sub	r5, ip, r3
   163a4:	cmp	ip, r5
   163a8:	ble	1646c <flatcc_builder_end_vector@@Base+0x1a0>
   163ac:	ldr	r0, [r4, #36]	; 0x24
   163b0:	add	r1, sp, #24
   163b4:	str	r3, [sp]
   163b8:	mov	r3, r5
   163bc:	ldr	r6, [r4, #44]	; 0x2c
   163c0:	blx	r6
   163c4:	subs	r1, r0, #0
   163c8:	bne	16458 <flatcc_builder_end_vector@@Base+0x18c>
   163cc:	cmp	r5, #0
   163d0:	str	r5, [r4, #136]	; 0x88
   163d4:	beq	1644c <flatcc_builder_end_vector@@Base+0x180>
   163d8:	ldr	r2, [r4, #20]
   163dc:	ldr	r0, [r4, #16]
   163e0:	bl	12054 <memset@plt>
   163e4:	ldr	r3, [r4, #32]
   163e8:	ldr	r2, [r4, #64]	; 0x40
   163ec:	ldrh	lr, [r4, #130]	; 0x82
   163f0:	ldr	ip, [r3]
   163f4:	ldr	r1, [r3, #4]
   163f8:	ldrh	r0, [r4, #128]	; 0x80
   163fc:	sub	r2, r2, ip
   16400:	cmp	r2, r1
   16404:	movcs	r2, r1
   16408:	cmp	r0, lr
   1640c:	ldr	r0, [r4, #60]	; 0x3c
   16410:	ldr	r6, [r3, #8]
   16414:	str	r2, [r4, #24]
   16418:	add	r2, r0, ip
   1641c:	str	r2, [r4, #16]
   16420:	str	r6, [r4, #20]
   16424:	ldr	r2, [r4, #156]	; 0x9c
   16428:	str	ip, [r4, #28]
   1642c:	str	r1, [r3, #4]
   16430:	strhcc	lr, [r4, #128]	; 0x80
   16434:	ldrh	r1, [r3, #12]
   16438:	sub	r2, r2, #1
   1643c:	sub	r3, r3, #36	; 0x24
   16440:	str	r2, [r4, #156]	; 0x9c
   16444:	strh	r1, [r4, #130]	; 0x82
   16448:	str	r3, [r4, #32]
   1644c:	mov	r0, r5
   16450:	add	sp, sp, #88	; 0x58
   16454:	pop	{r4, r5, r6, pc}
   16458:	ldr	r3, [pc, #60]	; 1649c <flatcc_builder_end_vector@@Base+0x1d0>
   1645c:	ldr	r2, [pc, #60]	; 164a0 <flatcc_builder_end_vector@@Base+0x1d4>
   16460:	ldr	r1, [pc, #60]	; 164a4 <flatcc_builder_end_vector@@Base+0x1d8>
   16464:	ldr	r0, [pc, #60]	; 164a8 <flatcc_builder_end_vector@@Base+0x1dc>
   16468:	bl	12084 <__assert_fail@plt>
   1646c:	bl	120dc <__assert_fail@plt+0x58>
   16470:	ldr	r3, [pc, #52]	; 164ac <flatcc_builder_end_vector@@Base+0x1e0>
   16474:	ldr	r2, [pc, #52]	; 164b0 <flatcc_builder_end_vector@@Base+0x1e4>
   16478:	ldr	r1, [pc, #36]	; 164a4 <flatcc_builder_end_vector@@Base+0x1d8>
   1647c:	ldr	r0, [pc, #48]	; 164b4 <flatcc_builder_end_vector@@Base+0x1e8>
   16480:	bl	12084 <__assert_fail@plt>
   16484:	ldr	r3, [pc, #44]	; 164b8 <flatcc_builder_end_vector@@Base+0x1ec>
   16488:	ldr	r2, [pc, #44]	; 164bc <flatcc_builder_end_vector@@Base+0x1f0>
   1648c:	ldr	r1, [pc, #16]	; 164a4 <flatcc_builder_end_vector@@Base+0x1d8>
   16490:	ldr	r0, [pc, #40]	; 164c0 <flatcc_builder_end_vector@@Base+0x1f4>
   16494:	bl	12084 <__assert_fail@plt>
   16498:	andeq	r8, r1, r4, lsl #25
   1649c:	andeq	r8, r1, r8, lsl #24
   164a0:	andeq	r0, r0, fp, lsl #5
   164a4:	andeq	r9, r1, ip, lsr r3
   164a8:	strdeq	r9, [r1], -ip
   164ac:	andeq	r9, r1, r8, ror #2
   164b0:	andeq	r0, r0, r5, asr r5
   164b4:	andeq	r9, r1, r4, lsr r6
   164b8:	andeq	r9, r1, r8, lsl #3
   164bc:	andeq	r0, r0, r8, ror r5
   164c0:	andeq	r9, r1, r8, lsr #9

000164c4 <flatcc_builder_vector_count@@Base>:
   164c4:	ldr	r3, [r0, #32]
   164c8:	ldr	r0, [r3, #20]
   164cc:	bx	lr

000164d0 <flatcc_builder_vector_edit@@Base>:
   164d0:	ldr	r0, [r0, #16]
   164d4:	bx	lr

000164d8 <flatcc_builder_create_offset_vector_direct@@Base>:
   164d8:	cmn	r2, #-1073741823	; 0xc0000001
   164dc:	bls	164e8 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   164e0:	mov	r0, #0
   164e4:	bx	lr
   164e8:	b	12cac <flatcc_builder_default_alloc@@Base+0x2fc>

000164ec <flatcc_builder_end_offset_vector@@Base>:
   164ec:	ldr	r3, [r0, #32]
   164f0:	push	{r4, r5, r6, lr}
   164f4:	ldrh	r2, [r3, #14]
   164f8:	cmp	r2, #5
   164fc:	bne	165ac <flatcc_builder_end_offset_vector@@Base+0xc0>
   16500:	ldr	r2, [r3, #20]
   16504:	cmn	r2, #-1073741823	; 0xc0000001
   16508:	bls	16518 <flatcc_builder_end_offset_vector@@Base+0x2c>
   1650c:	mov	r5, #0
   16510:	mov	r0, r5
   16514:	pop	{r4, r5, r6, pc}
   16518:	ldr	r1, [r0, #16]
   1651c:	mov	r4, r0
   16520:	bl	12cac <flatcc_builder_default_alloc@@Base+0x2fc>
   16524:	subs	r5, r0, #0
   16528:	beq	1650c <flatcc_builder_end_offset_vector@@Base+0x20>
   1652c:	ldr	r2, [r4, #20]
   16530:	mov	r1, #0
   16534:	ldr	r0, [r4, #16]
   16538:	bl	12054 <memset@plt>
   1653c:	ldr	r3, [r4, #32]
   16540:	ldr	r2, [r4, #64]	; 0x40
   16544:	ldrh	lr, [r4, #130]	; 0x82
   16548:	ldr	ip, [r3]
   1654c:	ldr	r1, [r3, #4]
   16550:	ldrh	r0, [r4, #128]	; 0x80
   16554:	sub	r2, r2, ip
   16558:	cmp	r2, r1
   1655c:	movcs	r2, r1
   16560:	cmp	r0, lr
   16564:	ldr	r0, [r4, #60]	; 0x3c
   16568:	ldr	r6, [r3, #8]
   1656c:	str	r2, [r4, #24]
   16570:	add	r2, r0, ip
   16574:	str	r2, [r4, #16]
   16578:	str	r6, [r4, #20]
   1657c:	ldr	r2, [r4, #156]	; 0x9c
   16580:	str	ip, [r4, #28]
   16584:	str	r1, [r3, #4]
   16588:	strhcc	lr, [r4, #128]	; 0x80
   1658c:	ldrh	r1, [r3, #12]
   16590:	sub	r2, r2, #1
   16594:	sub	r3, r3, #36	; 0x24
   16598:	str	r2, [r4, #156]	; 0x9c
   1659c:	strh	r1, [r4, #130]	; 0x82
   165a0:	str	r3, [r4, #32]
   165a4:	mov	r0, r5
   165a8:	pop	{r4, r5, r6, pc}
   165ac:	ldr	r3, [pc, #12]	; 165c0 <flatcc_builder_end_offset_vector@@Base+0xd4>
   165b0:	ldr	r2, [pc, #12]	; 165c4 <flatcc_builder_end_offset_vector@@Base+0xd8>
   165b4:	ldr	r1, [pc, #12]	; 165c8 <flatcc_builder_end_offset_vector@@Base+0xdc>
   165b8:	ldr	r0, [pc, #12]	; 165cc <flatcc_builder_end_offset_vector@@Base+0xe0>
   165bc:	bl	12084 <__assert_fail@plt>
   165c0:	andeq	r9, r1, r8, ror r0
   165c4:	andeq	r0, r0, r8, asr #11
   165c8:	andeq	r9, r1, ip, lsr r3
   165cc:	andeq	r9, r1, r4, lsl r5

000165d0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   165d0:	ldr	r2, [r0, #32]
   165d4:	push	{r4, r5, r6, lr}
   165d8:	ldrh	ip, [r2, #14]
   165dc:	cmp	ip, #5
   165e0:	bne	16694 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   165e4:	ldr	r2, [r2, #20]
   165e8:	cmn	r2, #-1073741823	; 0xc0000001
   165ec:	bls	165fc <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   165f0:	mov	r5, #0
   165f4:	mov	r0, r5
   165f8:	pop	{r4, r5, r6, pc}
   165fc:	mov	r3, r1
   16600:	ldr	r1, [r0, #16]
   16604:	mov	r4, r0
   16608:	bl	12abc <flatcc_builder_default_alloc@@Base+0x10c>
   1660c:	subs	r5, r0, #0
   16610:	beq	165f0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   16614:	ldr	r2, [r4, #20]
   16618:	mov	r1, #0
   1661c:	ldr	r0, [r4, #16]
   16620:	bl	12054 <memset@plt>
   16624:	ldr	r3, [r4, #32]
   16628:	ldr	r2, [r4, #64]	; 0x40
   1662c:	ldrh	lr, [r4, #130]	; 0x82
   16630:	ldr	ip, [r3]
   16634:	ldr	r1, [r3, #4]
   16638:	ldrh	r0, [r4, #128]	; 0x80
   1663c:	sub	r2, r2, ip
   16640:	cmp	r2, r1
   16644:	movcs	r2, r1
   16648:	cmp	r0, lr
   1664c:	ldr	r0, [r4, #60]	; 0x3c
   16650:	ldr	r6, [r3, #8]
   16654:	str	r2, [r4, #24]
   16658:	add	r2, r0, ip
   1665c:	str	r2, [r4, #16]
   16660:	str	r6, [r4, #20]
   16664:	ldr	r2, [r4, #156]	; 0x9c
   16668:	str	ip, [r4, #28]
   1666c:	str	r1, [r3, #4]
   16670:	strhcc	lr, [r4, #128]	; 0x80
   16674:	ldrh	r1, [r3, #12]
   16678:	sub	r2, r2, #1
   1667c:	sub	r3, r3, #36	; 0x24
   16680:	str	r2, [r4, #156]	; 0x9c
   16684:	strh	r1, [r4, #130]	; 0x82
   16688:	str	r3, [r4, #32]
   1668c:	mov	r0, r5
   16690:	pop	{r4, r5, r6, pc}
   16694:	ldr	r3, [pc, #12]	; 166a8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   16698:	ldr	r2, [pc, #12]	; 166ac <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   1669c:	ldr	r1, [pc, #12]	; 166b0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   166a0:	ldr	r0, [pc, #12]	; 166b4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe4>
   166a4:	bl	12084 <__assert_fail@plt>
   166a8:	andeq	r9, r1, r4, lsr #3
   166ac:	ldrdeq	r0, [r0], -r5
   166b0:	andeq	r9, r1, ip, lsr r3
   166b4:	andeq	r9, r1, r4, lsl r5

000166b8 <flatcc_builder_offset_vector_edit@@Base>:
   166b8:	ldr	r0, [r0, #16]
   166bc:	bx	lr

000166c0 <flatcc_builder_offset_vector_count@@Base>:
   166c0:	ldr	r3, [r0, #32]
   166c4:	ldr	r0, [r3, #20]
   166c8:	bx	lr

000166cc <flatcc_builder_create_union_vector@@Base>:
   166cc:	push	{r4, r5, r6, r7, r8, r9, lr}
   166d0:	mov	r6, r0
   166d4:	ldr	r0, [r1, #156]	; 0x9c
   166d8:	ldr	ip, [r1, #160]	; 0xa0
   166dc:	mov	r4, r1
   166e0:	add	r1, r0, #1
   166e4:	cmp	r1, ip
   166e8:	sub	sp, sp, #12
   166ec:	mov	r5, r2
   166f0:	mov	r7, r3
   166f4:	str	r1, [r4, #156]	; 0x9c
   166f8:	ble	16780 <flatcc_builder_create_union_vector@@Base+0xb4>
   166fc:	ldr	r3, [r4, #176]	; 0xb0
   16700:	cmp	r1, r3
   16704:	cmpgt	r3, #0
   16708:	movgt	r3, #1
   1670c:	movle	r3, #0
   16710:	bgt	16768 <flatcc_builder_create_union_vector@@Base+0x9c>
   16714:	add	r0, r0, r0, lsl #3
   16718:	ldr	r1, [r4, #88]	; 0x58
   1671c:	lsl	r8, r0, #2
   16720:	add	r2, r8, #36	; 0x24
   16724:	cmp	r2, r1
   16728:	bhi	1699c <flatcc_builder_create_union_vector@@Base+0x2d0>
   1672c:	ldr	r3, [r4, #84]	; 0x54
   16730:	add	r3, r3, r8
   16734:	cmp	r3, #0
   16738:	str	r3, [r4, #32]
   1673c:	beq	16768 <flatcc_builder_create_union_vector@@Base+0x9c>
   16740:	ldr	r2, [r4, #88]	; 0x58
   16744:	ldr	r0, [pc, #732]	; 16a28 <flatcc_builder_create_union_vector@@Base+0x35c>
   16748:	ldr	r1, [r4, #176]	; 0xb0
   1674c:	umull	r0, r2, r0, r2
   16750:	lsr	r2, r2, #3
   16754:	cmp	r1, #0
   16758:	cmpgt	r2, r1
   1675c:	str	r2, [r4, #160]	; 0xa0
   16760:	strgt	r1, [r4, #160]	; 0xa0
   16764:	b	1678c <flatcc_builder_create_union_vector@@Base+0xc0>
   16768:	mov	r3, #0
   1676c:	mov	r0, r6
   16770:	str	r3, [r6]
   16774:	str	r3, [r6, #4]
   16778:	add	sp, sp, #12
   1677c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16780:	ldr	r3, [r4, #32]
   16784:	add	r3, r3, #36	; 0x24
   16788:	str	r3, [r4, #32]
   1678c:	ldr	r1, [r4, #20]
   16790:	ldr	ip, [r4, #28]
   16794:	ldrh	r8, [r4, #130]	; 0x82
   16798:	add	r2, r1, ip
   1679c:	mvn	lr, #3
   167a0:	add	r2, r2, #7
   167a4:	str	r1, [r3, #8]
   167a8:	bic	r2, r2, #7
   167ac:	mov	r0, #4
   167b0:	mov	r1, #0
   167b4:	strh	r8, [r3, #12]
   167b8:	strh	r0, [r4, #130]	; 0x82
   167bc:	stm	r3, {ip, lr}
   167c0:	str	r1, [r4, #20]
   167c4:	str	r2, [r4, #28]
   167c8:	str	r0, [r3, #16]
   167cc:	str	r1, [r3, #20]
   167d0:	ldr	r0, [r4, #64]	; 0x40
   167d4:	ldr	r1, [r4, #60]	; 0x3c
   167d8:	sub	r0, r0, r2
   167dc:	cmp	r0, lr
   167e0:	mov	ip, #5
   167e4:	strh	ip, [r3, #14]
   167e8:	add	r1, r1, r2
   167ec:	strls	r0, [r4, #24]
   167f0:	strhi	lr, [r4, #24]
   167f4:	movhi	r0, lr
   167f8:	mvn	r8, #3
   167fc:	cmn	r7, #-1073741823	; 0xc0000001
   16800:	str	r1, [r4, #16]
   16804:	str	r8, [r3, #4]
   16808:	bhi	16a1c <flatcc_builder_create_union_vector@@Base+0x350>
   1680c:	lsl	ip, r7, #2
   16810:	cmp	ip, r0
   16814:	str	r7, [r3, #20]
   16818:	str	ip, [r4, #20]
   1681c:	bcs	16944 <flatcc_builder_create_union_vector@@Base+0x278>
   16820:	cmp	r1, #0
   16824:	beq	16768 <flatcc_builder_create_union_vector@@Base+0x9c>
   16828:	ldr	r8, [r4, #20]
   1682c:	ldr	r0, [r4, #24]
   16830:	add	r3, r7, r8
   16834:	cmp	r3, r0
   16838:	str	r3, [r4, #20]
   1683c:	bcs	169c0 <flatcc_builder_create_union_vector@@Base+0x2f4>
   16840:	adds	r8, r1, r8
   16844:	beq	16768 <flatcc_builder_create_union_vector@@Base+0x9c>
   16848:	cmp	r7, #0
   1684c:	movne	r2, r5
   16850:	addne	lr, r2, r7, lsl #3
   16854:	subne	r0, r8, #1
   16858:	subne	r3, r1, #4
   1685c:	beq	1687c <flatcc_builder_create_union_vector@@Base+0x1b0>
   16860:	ldrb	ip, [r2]
   16864:	add	r2, r2, #8
   16868:	strb	ip, [r0, #1]!
   1686c:	ldr	ip, [r2, #-4]
   16870:	cmp	lr, r2
   16874:	str	ip, [r3, #4]!
   16878:	bne	16860 <flatcc_builder_create_union_vector@@Base+0x194>
   1687c:	mov	r3, r8
   16880:	mov	r2, r7
   16884:	mov	r0, r4
   16888:	bl	12abc <flatcc_builder_default_alloc@@Base+0x10c>
   1688c:	subs	r5, r0, #0
   16890:	beq	16a20 <flatcc_builder_create_union_vector@@Base+0x354>
   16894:	mvn	r0, #0
   16898:	mov	r3, #1
   1689c:	mov	r2, r7
   168a0:	str	r0, [sp, #4]
   168a4:	mov	r1, r8
   168a8:	str	r3, [sp]
   168ac:	mov	r0, r4
   168b0:	bl	1618c <flatcc_builder_create_vector@@Base>
   168b4:	mov	r7, r0
   168b8:	ldr	r2, [r4, #20]
   168bc:	mov	r1, #0
   168c0:	ldr	r0, [r4, #16]
   168c4:	bl	12054 <memset@plt>
   168c8:	ldr	r3, [r4, #32]
   168cc:	ldr	r2, [r4, #64]	; 0x40
   168d0:	ldrh	lr, [r4, #130]	; 0x82
   168d4:	ldr	ip, [r3]
   168d8:	ldr	r1, [r3, #4]
   168dc:	ldrh	r0, [r4, #128]	; 0x80
   168e0:	sub	r2, r2, ip
   168e4:	cmp	r2, r1
   168e8:	movcs	r2, r1
   168ec:	cmp	r0, lr
   168f0:	ldr	r0, [r4, #60]	; 0x3c
   168f4:	ldr	r8, [r3, #8]
   168f8:	str	r2, [r4, #24]
   168fc:	add	r2, r0, ip
   16900:	str	r2, [r4, #16]
   16904:	str	r8, [r4, #20]
   16908:	ldr	r2, [r4, #156]	; 0x9c
   1690c:	str	ip, [r4, #28]
   16910:	str	r1, [r3, #4]
   16914:	strhcc	lr, [r4, #128]	; 0x80
   16918:	ldrh	r1, [r3, #12]
   1691c:	sub	r2, r2, #1
   16920:	sub	r3, r3, #36	; 0x24
   16924:	mov	r0, r6
   16928:	str	r7, [r6]
   1692c:	str	r5, [r6, #4]
   16930:	str	r2, [r4, #156]	; 0x9c
   16934:	strh	r1, [r4, #130]	; 0x82
   16938:	str	r3, [r4, #32]
   1693c:	add	sp, sp, #12
   16940:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16944:	add	ip, ip, #1
   16948:	mov	r3, #1
   1694c:	ldr	r0, [r4, #40]	; 0x28
   16950:	add	r2, ip, r2
   16954:	str	r3, [sp]
   16958:	add	r1, r4, #60	; 0x3c
   1695c:	ldr	r9, [r4, #48]	; 0x30
   16960:	blx	r9
   16964:	cmp	r0, #0
   16968:	bne	16768 <flatcc_builder_create_union_vector@@Base+0x9c>
   1696c:	ldr	r2, [r4, #28]
   16970:	ldr	r3, [r4, #64]	; 0x40
   16974:	ldr	r1, [r4, #60]	; 0x3c
   16978:	sub	r3, r3, r2
   1697c:	ldr	r0, [r4, #32]
   16980:	cmn	r3, #4
   16984:	movhi	r3, r8
   16988:	add	r1, r1, r2
   1698c:	str	r3, [r4, #24]
   16990:	str	r1, [r4, #16]
   16994:	str	r8, [r0, #4]
   16998:	b	16820 <flatcc_builder_create_union_vector@@Base+0x154>
   1699c:	mov	r1, #4
   169a0:	ldr	r0, [r4, #40]	; 0x28
   169a4:	str	r1, [sp]
   169a8:	add	r1, r4, #84	; 0x54
   169ac:	ldr	r9, [r4, #48]	; 0x30
   169b0:	blx	r9
   169b4:	cmp	r0, #0
   169b8:	beq	1672c <flatcc_builder_create_union_vector@@Base+0x60>
   169bc:	bl	12090 <__assert_fail@plt+0xc>
   169c0:	add	r1, r3, #1
   169c4:	mov	r3, #1
   169c8:	ldr	r0, [r4, #40]	; 0x28
   169cc:	add	r2, r1, r2
   169d0:	str	r3, [sp]
   169d4:	add	r1, r4, #60	; 0x3c
   169d8:	ldr	r9, [r4, #48]	; 0x30
   169dc:	blx	r9
   169e0:	cmp	r0, #0
   169e4:	bne	16768 <flatcc_builder_create_union_vector@@Base+0x9c>
   169e8:	ldr	r2, [r4, #28]
   169ec:	ldr	r3, [r4, #64]	; 0x40
   169f0:	ldr	r1, [r4, #60]	; 0x3c
   169f4:	sub	r3, r3, r2
   169f8:	cmn	r3, #4
   169fc:	mvnhi	r3, #3
   16a00:	str	r3, [r4, #24]
   16a04:	ldr	r3, [r4, #32]
   16a08:	add	r1, r1, r2
   16a0c:	mvn	r2, #3
   16a10:	str	r1, [r4, #16]
   16a14:	str	r2, [r3, #4]
   16a18:	b	16840 <flatcc_builder_create_union_vector@@Base+0x174>
   16a1c:	bl	12104 <__assert_fail@plt+0x80>
   16a20:	mov	r7, r5
   16a24:	b	168b8 <flatcc_builder_create_union_vector@@Base+0x1ec>
   16a28:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00016a2c <flatcc_builder_create_union_vector_direct@@Base>:
   16a2c:	push	{r4, r5, r6, r7, r8, lr}
   16a30:	sub	sp, sp, #88	; 0x58
   16a34:	mov	r4, r0
   16a38:	ldr	r5, [sp, #112]	; 0x70
   16a3c:	cmn	r5, #-1073741823	; 0xc0000001
   16a40:	bls	16a5c <flatcc_builder_create_union_vector_direct@@Base+0x30>
   16a44:	mov	r3, #0
   16a48:	mov	r0, r4
   16a4c:	str	r3, [r4]
   16a50:	str	r3, [r4, #4]
   16a54:	add	sp, sp, #88	; 0x58
   16a58:	pop	{r4, r5, r6, r7, r8, pc}
   16a5c:	mov	r6, r1
   16a60:	mov	r8, r2
   16a64:	mov	r1, r3
   16a68:	mov	r0, r6
   16a6c:	mov	r3, r2
   16a70:	mov	r2, r5
   16a74:	bl	12abc <flatcc_builder_default_alloc@@Base+0x10c>
   16a78:	subs	r7, r0, #0
   16a7c:	beq	16a44 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   16a80:	ldrh	r3, [r6, #128]	; 0x80
   16a84:	ldr	r0, [r6, #136]	; 0x88
   16a88:	mov	r2, #1
   16a8c:	cmp	r3, #3
   16a90:	movls	r3, #4
   16a94:	strhls	r3, [r6, #128]	; 0x80
   16a98:	sub	r1, r0, r5
   16a9c:	cmp	r5, #0
   16aa0:	mov	r3, #4
   16aa4:	add	ip, sp, #12
   16aa8:	str	r3, [sp, #16]
   16aac:	str	r2, [sp, #20]
   16ab0:	and	r1, r1, #3
   16ab4:	movne	r2, #2
   16ab8:	str	r3, [sp, #28]
   16abc:	addne	r3, r5, r3
   16ac0:	str	ip, [sp, #24]
   16ac4:	strne	r8, [sp, #32]
   16ac8:	strne	r5, [sp, #36]	; 0x24
   16acc:	strne	r3, [sp, #16]
   16ad0:	strne	r2, [sp, #20]
   16ad4:	movne	ip, #3
   16ad8:	moveq	ip, #2
   16adc:	cmp	r1, #0
   16ae0:	str	r5, [sp, #12]
   16ae4:	beq	16b10 <flatcc_builder_create_union_vector_direct@@Base+0xe4>
   16ae8:	add	r2, r2, #1
   16aec:	add	lr, sp, #88	; 0x58
   16af0:	add	lr, lr, r2, lsl #3
   16af4:	ldr	r5, [pc, #108]	; 16b68 <flatcc_builder_create_union_vector_direct@@Base+0x13c>
   16af8:	mov	r2, ip
   16afc:	add	r3, r3, r1
   16b00:	str	r1, [lr, #-68]	; 0xffffffbc
   16b04:	str	r3, [sp, #16]
   16b08:	str	ip, [sp, #20]
   16b0c:	str	r5, [lr, #-72]	; 0xffffffb8
   16b10:	sub	r5, r0, r3
   16b14:	cmp	r0, r5
   16b18:	ble	16b50 <flatcc_builder_create_union_vector_direct@@Base+0x124>
   16b1c:	ldr	r0, [r6, #36]	; 0x24
   16b20:	add	r1, sp, #24
   16b24:	str	r3, [sp]
   16b28:	mov	r3, r5
   16b2c:	ldr	r8, [r6, #44]	; 0x2c
   16b30:	blx	r8
   16b34:	cmp	r0, #0
   16b38:	bne	16b54 <flatcc_builder_create_union_vector_direct@@Base+0x128>
   16b3c:	mov	r0, r4
   16b40:	str	r5, [r6, #136]	; 0x88
   16b44:	stm	r4, {r5, r7}
   16b48:	add	sp, sp, #88	; 0x58
   16b4c:	pop	{r4, r5, r6, r7, r8, pc}
   16b50:	bl	120dc <__assert_fail@plt+0x58>
   16b54:	ldr	r3, [pc, #16]	; 16b6c <flatcc_builder_create_union_vector_direct@@Base+0x140>
   16b58:	ldr	r2, [pc, #16]	; 16b70 <flatcc_builder_create_union_vector_direct@@Base+0x144>
   16b5c:	ldr	r1, [pc, #16]	; 16b74 <flatcc_builder_create_union_vector_direct@@Base+0x148>
   16b60:	ldr	r0, [pc, #16]	; 16b78 <flatcc_builder_create_union_vector_direct@@Base+0x14c>
   16b64:	bl	12084 <__assert_fail@plt>
   16b68:	andeq	r8, r1, r4, lsl #25
   16b6c:	andeq	r8, r1, r8, lsl #24
   16b70:	andeq	r0, r0, fp, lsl #5
   16b74:	andeq	r9, r1, ip, lsr r3
   16b78:	strdeq	r9, [r1], -ip

00016b7c <flatcc_builder_start_union_vector@@Base>:
   16b7c:	ldr	r1, [r0, #156]	; 0x9c
   16b80:	ldr	r3, [r0, #160]	; 0xa0
   16b84:	add	r2, r1, #1
   16b88:	cmp	r2, r3
   16b8c:	push	{r4, r5, r6, lr}
   16b90:	mov	r4, r0
   16b94:	sub	sp, sp, #8
   16b98:	str	r2, [r0, #156]	; 0x9c
   16b9c:	ble	16c0c <flatcc_builder_start_union_vector@@Base+0x90>
   16ba0:	ldr	r3, [r0, #176]	; 0xb0
   16ba4:	cmp	r3, #0
   16ba8:	cmpgt	r2, r3
   16bac:	movgt	r3, #1
   16bb0:	movle	r3, #0
   16bb4:	bgt	16cb8 <flatcc_builder_start_union_vector@@Base+0x13c>
   16bb8:	add	r1, r1, r1, lsl #3
   16bbc:	ldr	r0, [r0, #88]	; 0x58
   16bc0:	lsl	r5, r1, #2
   16bc4:	add	r2, r5, #36	; 0x24
   16bc8:	cmp	r2, r0
   16bcc:	bhi	16c94 <flatcc_builder_start_union_vector@@Base+0x118>
   16bd0:	ldr	r3, [r4, #84]	; 0x54
   16bd4:	add	r3, r3, r5
   16bd8:	cmp	r3, #0
   16bdc:	str	r3, [r4, #32]
   16be0:	beq	16cb8 <flatcc_builder_start_union_vector@@Base+0x13c>
   16be4:	ldr	r2, [r4, #88]	; 0x58
   16be8:	ldr	r0, [pc, #208]	; 16cc0 <flatcc_builder_start_union_vector@@Base+0x144>
   16bec:	ldr	r1, [r4, #176]	; 0xb0
   16bf0:	umull	r0, r2, r0, r2
   16bf4:	lsr	r2, r2, #3
   16bf8:	cmp	r1, #0
   16bfc:	cmpgt	r2, r1
   16c00:	str	r2, [r4, #160]	; 0xa0
   16c04:	strgt	r1, [r4, #160]	; 0xa0
   16c08:	b	16c18 <flatcc_builder_start_union_vector@@Base+0x9c>
   16c0c:	ldr	r3, [r0, #32]
   16c10:	add	r3, r3, #36	; 0x24
   16c14:	str	r3, [r0, #32]
   16c18:	ldr	ip, [r4, #20]
   16c1c:	ldr	r1, [r4, #28]
   16c20:	ldrh	r5, [r4, #130]	; 0x82
   16c24:	add	r2, ip, r1
   16c28:	add	r2, r2, #7
   16c2c:	str	ip, [r3, #8]
   16c30:	bic	r2, r2, #7
   16c34:	mov	lr, #4
   16c38:	mov	r0, #0
   16c3c:	mov	ip, #8
   16c40:	strh	r5, [r3, #12]
   16c44:	strh	lr, [r4, #130]	; 0x82
   16c48:	str	r1, [r3]
   16c4c:	str	r2, [r4, #28]
   16c50:	str	r0, [r4, #20]
   16c54:	str	r0, [r3, #20]
   16c58:	str	ip, [r3, #16]
   16c5c:	ldr	r1, [r4, #64]	; 0x40
   16c60:	ldr	ip, [r4, #60]	; 0x3c
   16c64:	sub	r1, r1, r2
   16c68:	mvn	lr, #3
   16c6c:	cmp	r1, lr
   16c70:	add	r2, ip, r2
   16c74:	movhi	r1, lr
   16c78:	mov	ip, #7
   16c7c:	strh	ip, [r3, #14]
   16c80:	str	r2, [r4, #16]
   16c84:	str	r1, [r4, #24]
   16c88:	str	lr, [r3, #4]
   16c8c:	add	sp, sp, #8
   16c90:	pop	{r4, r5, r6, pc}
   16c94:	mov	r1, #4
   16c98:	ldr	r0, [r4, #40]	; 0x28
   16c9c:	str	r1, [sp]
   16ca0:	add	r1, r4, #84	; 0x54
   16ca4:	ldr	r6, [r4, #48]	; 0x30
   16ca8:	blx	r6
   16cac:	cmp	r0, #0
   16cb0:	beq	16bd0 <flatcc_builder_start_union_vector@@Base+0x54>
   16cb4:	bl	12090 <__assert_fail@plt+0xc>
   16cb8:	mvn	r0, #0
   16cbc:	b	16c8c <flatcc_builder_start_union_vector@@Base+0x110>
   16cc0:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00016cc4 <flatcc_builder_end_union_vector@@Base>:
   16cc4:	ldr	r3, [r1, #32]
   16cc8:	push	{r4, r5, r6, r7, r8, r9, lr}
   16ccc:	sub	sp, sp, #12
   16cd0:	ldrh	r2, [r3, #14]
   16cd4:	cmp	r2, #7
   16cd8:	bne	16e98 <flatcc_builder_end_union_vector@@Base+0x1d4>
   16cdc:	ldr	r5, [r3, #20]
   16ce0:	ldr	r8, [r1, #20]
   16ce4:	ldr	r3, [r1, #24]
   16ce8:	lsl	r7, r5, #2
   16cec:	add	r2, r7, r5
   16cf0:	add	r2, r2, r8
   16cf4:	cmp	r2, r3
   16cf8:	mov	r4, r1
   16cfc:	mov	r6, r0
   16d00:	str	r2, [r1, #20]
   16d04:	bcs	16de0 <flatcc_builder_end_union_vector@@Base+0x11c>
   16d08:	ldr	r3, [r1, #16]
   16d0c:	adds	r1, r3, r8
   16d10:	beq	16e80 <flatcc_builder_end_union_vector@@Base+0x1bc>
   16d14:	cmp	r5, #0
   16d18:	add	r7, r1, r7
   16d1c:	addne	lr, r3, r5, lsl #3
   16d20:	subne	r0, r7, #1
   16d24:	subne	r2, r1, #4
   16d28:	beq	16e40 <flatcc_builder_end_union_vector@@Base+0x17c>
   16d2c:	ldrb	ip, [r3]
   16d30:	add	r3, r3, #8
   16d34:	strb	ip, [r0, #1]!
   16d38:	ldr	ip, [r3, #-4]
   16d3c:	cmp	lr, r3
   16d40:	str	ip, [r2, #4]!
   16d44:	bne	16d2c <flatcc_builder_end_union_vector@@Base+0x68>
   16d48:	cmn	r5, #-1073741823	; 0xc0000001
   16d4c:	bls	16e40 <flatcc_builder_end_union_vector@@Base+0x17c>
   16d50:	mov	r8, #0
   16d54:	mov	r5, r8
   16d58:	ldr	r2, [r4, #20]
   16d5c:	mov	r1, #0
   16d60:	ldr	r0, [r4, #16]
   16d64:	bl	12054 <memset@plt>
   16d68:	ldr	r3, [r4, #32]
   16d6c:	ldr	r2, [r4, #64]	; 0x40
   16d70:	ldrh	lr, [r4, #130]	; 0x82
   16d74:	ldr	ip, [r3]
   16d78:	ldr	r1, [r3, #4]
   16d7c:	ldrh	r0, [r4, #128]	; 0x80
   16d80:	sub	r2, r2, ip
   16d84:	cmp	r2, r1
   16d88:	movcs	r2, r1
   16d8c:	cmp	r0, lr
   16d90:	ldr	r0, [r4, #60]	; 0x3c
   16d94:	ldr	r7, [r3, #8]
   16d98:	str	r2, [r4, #24]
   16d9c:	add	r2, r0, ip
   16da0:	str	r2, [r4, #16]
   16da4:	str	r7, [r4, #20]
   16da8:	ldr	r2, [r4, #156]	; 0x9c
   16dac:	str	ip, [r4, #28]
   16db0:	str	r1, [r3, #4]
   16db4:	strhcc	lr, [r4, #128]	; 0x80
   16db8:	ldrh	r1, [r3, #12]
   16dbc:	sub	r2, r2, #1
   16dc0:	sub	r3, r3, #36	; 0x24
   16dc4:	mov	r0, r6
   16dc8:	stm	r6, {r5, r8}
   16dcc:	str	r2, [r4, #156]	; 0x9c
   16dd0:	strh	r1, [r4, #130]	; 0x82
   16dd4:	str	r3, [r4, #32]
   16dd8:	add	sp, sp, #12
   16ddc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16de0:	ldr	r1, [r1, #28]
   16de4:	mov	r3, #1
   16de8:	add	r1, r1, #1
   16dec:	ldr	r0, [r4, #40]	; 0x28
   16df0:	add	r2, r1, r2
   16df4:	str	r3, [sp]
   16df8:	add	r1, r4, #60	; 0x3c
   16dfc:	ldr	r9, [r4, #48]	; 0x30
   16e00:	blx	r9
   16e04:	cmp	r0, #0
   16e08:	bne	16e80 <flatcc_builder_end_union_vector@@Base+0x1bc>
   16e0c:	ldr	r1, [r4, #28]
   16e10:	ldr	r2, [r4, #64]	; 0x40
   16e14:	ldr	r3, [r4, #60]	; 0x3c
   16e18:	sub	r2, r2, r1
   16e1c:	cmn	r2, #4
   16e20:	mvnhi	r2, #3
   16e24:	str	r2, [r4, #24]
   16e28:	ldr	r2, [r4, #32]
   16e2c:	add	r3, r3, r1
   16e30:	mvn	r1, #3
   16e34:	str	r3, [r4, #16]
   16e38:	str	r1, [r2, #4]
   16e3c:	b	16d0c <flatcc_builder_end_union_vector@@Base+0x48>
   16e40:	mov	r3, r7
   16e44:	mov	r2, r5
   16e48:	mov	r0, r4
   16e4c:	bl	12abc <flatcc_builder_default_alloc@@Base+0x10c>
   16e50:	subs	r8, r0, #0
   16e54:	beq	16d50 <flatcc_builder_end_union_vector@@Base+0x8c>
   16e58:	mvn	r0, #0
   16e5c:	mov	r3, #1
   16e60:	mov	r2, r5
   16e64:	str	r0, [sp, #4]
   16e68:	mov	r1, r7
   16e6c:	str	r3, [sp]
   16e70:	mov	r0, r4
   16e74:	bl	1618c <flatcc_builder_create_vector@@Base>
   16e78:	mov	r5, r0
   16e7c:	b	16d58 <flatcc_builder_end_union_vector@@Base+0x94>
   16e80:	mov	r3, #0
   16e84:	mov	r0, r6
   16e88:	str	r3, [r6]
   16e8c:	str	r3, [r6, #4]
   16e90:	add	sp, sp, #12
   16e94:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16e98:	ldr	r3, [pc, #12]	; 16eac <flatcc_builder_end_union_vector@@Base+0x1e8>
   16e9c:	ldr	r2, [pc, #12]	; 16eb0 <flatcc_builder_end_union_vector@@Base+0x1ec>
   16ea0:	ldr	r1, [pc, #12]	; 16eb4 <flatcc_builder_end_union_vector@@Base+0x1f0>
   16ea4:	ldr	r0, [pc, #12]	; 16eb8 <flatcc_builder_end_union_vector@@Base+0x1f4>
   16ea8:	bl	12084 <__assert_fail@plt>
   16eac:	ldrdeq	r9, [r1], -r0
   16eb0:	andeq	r0, r0, r1, asr r6
   16eb4:	andeq	r9, r1, ip, lsr r3
   16eb8:	andeq	r9, r1, r8, asr #12

00016ebc <flatcc_builder_union_vector_edit@@Base>:
   16ebc:	ldr	r0, [r0, #16]
   16ec0:	bx	lr

00016ec4 <flatcc_builder_union_vector_count@@Base>:
   16ec4:	ldr	r3, [r0, #32]
   16ec8:	ldr	r0, [r3, #20]
   16ecc:	bx	lr

00016ed0 <flatcc_builder_extend_union_vector@@Base>:
   16ed0:	ldr	ip, [r0, #32]
   16ed4:	push	{r4, r5, r6, r7, lr}
   16ed8:	mov	r4, r0
   16edc:	ldr	r3, [ip, #20]
   16ee0:	sub	sp, sp, #12
   16ee4:	adds	r3, r1, r3
   16ee8:	movcs	r2, #1
   16eec:	movcc	r2, #0
   16ef0:	cmn	r3, #-536870911	; 0xe0000001
   16ef4:	movls	r0, #0
   16ef8:	movhi	r0, #1
   16efc:	orrs	r5, r2, r0
   16f00:	bne	16f98 <flatcc_builder_extend_union_vector@@Base+0xc8>
   16f04:	str	r3, [ip, #20]
   16f08:	ldr	r6, [r4, #20]
   16f0c:	ldr	r3, [r4, #24]
   16f10:	add	r1, r6, r1, lsl #3
   16f14:	cmp	r1, r3
   16f18:	str	r1, [r4, #20]
   16f1c:	bcs	16f30 <flatcc_builder_extend_union_vector@@Base+0x60>
   16f20:	ldr	r0, [r4, #16]
   16f24:	add	r0, r0, r6
   16f28:	add	sp, sp, #12
   16f2c:	pop	{r4, r5, r6, r7, pc}
   16f30:	ldr	r2, [r4, #28]
   16f34:	mov	r3, #1
   16f38:	add	r2, r2, #1
   16f3c:	ldr	r0, [r4, #40]	; 0x28
   16f40:	add	r2, r2, r1
   16f44:	str	r3, [sp]
   16f48:	add	r1, r4, #60	; 0x3c
   16f4c:	ldr	r7, [r4, #48]	; 0x30
   16f50:	blx	r7
   16f54:	cmp	r0, #0
   16f58:	bne	16f90 <flatcc_builder_extend_union_vector@@Base+0xc0>
   16f5c:	ldr	r2, [r4, #28]
   16f60:	ldr	r3, [r4, #64]	; 0x40
   16f64:	ldr	r0, [r4, #60]	; 0x3c
   16f68:	sub	r3, r3, r2
   16f6c:	cmn	r3, #4
   16f70:	mvnhi	r3, #3
   16f74:	str	r3, [r4, #24]
   16f78:	ldr	r3, [r4, #32]
   16f7c:	add	r0, r0, r2
   16f80:	mvn	r2, #3
   16f84:	str	r0, [r4, #16]
   16f88:	str	r2, [r3, #4]
   16f8c:	b	16f24 <flatcc_builder_extend_union_vector@@Base+0x54>
   16f90:	mov	r0, r5
   16f94:	b	16f28 <flatcc_builder_extend_union_vector@@Base+0x58>
   16f98:	bl	12104 <__assert_fail@plt+0x80>

00016f9c <flatcc_builder_truncate_union_vector@@Base>:
   16f9c:	ldr	r3, [r0, #32]
   16fa0:	push	{r4, lr}
   16fa4:	ldrh	r2, [r3, #14]
   16fa8:	cmp	r2, #7
   16fac:	bne	16ff0 <flatcc_builder_truncate_union_vector@@Base+0x54>
   16fb0:	ldr	ip, [r3, #20]
   16fb4:	cmp	ip, r1
   16fb8:	bcc	17004 <flatcc_builder_truncate_union_vector@@Base+0x68>
   16fbc:	ldr	r2, [r3, #16]
   16fc0:	sub	ip, ip, r1
   16fc4:	str	ip, [r3, #20]
   16fc8:	mul	r2, r2, r1
   16fcc:	ldr	r3, [r0, #20]
   16fd0:	ldr	r1, [r0, #16]
   16fd4:	sub	r3, r3, r2
   16fd8:	str	r3, [r0, #20]
   16fdc:	add	r0, r1, r3
   16fe0:	mov	r1, #0
   16fe4:	bl	12054 <memset@plt>
   16fe8:	mov	r0, #0
   16fec:	pop	{r4, pc}
   16ff0:	ldr	r3, [pc, #32]	; 17018 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   16ff4:	ldr	r2, [pc, #32]	; 1701c <flatcc_builder_truncate_union_vector@@Base+0x80>
   16ff8:	ldr	r1, [pc, #32]	; 17020 <flatcc_builder_truncate_union_vector@@Base+0x84>
   16ffc:	ldr	r0, [pc, #32]	; 17024 <flatcc_builder_truncate_union_vector@@Base+0x88>
   17000:	bl	12084 <__assert_fail@plt>
   17004:	ldr	r3, [pc, #12]	; 17018 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   17008:	ldr	r2, [pc, #24]	; 17028 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   1700c:	ldr	r1, [pc, #12]	; 17020 <flatcc_builder_truncate_union_vector@@Base+0x84>
   17010:	ldr	r0, [pc, #20]	; 1702c <flatcc_builder_truncate_union_vector@@Base+0x90>
   17014:	bl	12084 <__assert_fail@plt>
   17018:	strdeq	r9, [r1], -r0
   1701c:	andeq	r0, r0, r1, lsl #13
   17020:	andeq	r9, r1, ip, lsr r3
   17024:	andeq	r9, r1, r8, asr #12
   17028:	andeq	r0, r0, r2, lsl #13
   1702c:	andeq	r9, r1, ip, ror #10

00017030 <flatcc_builder_union_vector_push@@Base>:
   17030:	push	{r4, r5, r6, r7, lr}
   17034:	mov	r4, r0
   17038:	ldr	r0, [r0, #32]
   1703c:	sub	sp, sp, #20
   17040:	add	r5, sp, #8
   17044:	ldrh	r3, [r0, #14]
   17048:	stm	r5, {r1, r2}
   1704c:	cmp	r3, #7
   17050:	bne	17114 <flatcc_builder_union_vector_push@@Base+0xe4>
   17054:	ldr	r3, [r0, #20]
   17058:	cmn	r3, #-536870911	; 0xe0000001
   1705c:	beq	17104 <flatcc_builder_union_vector_push@@Base+0xd4>
   17060:	add	r3, r3, #1
   17064:	str	r3, [r0, #20]
   17068:	ldr	r6, [r4, #20]
   1706c:	ldr	r2, [r4, #24]
   17070:	add	r3, r6, #8
   17074:	cmp	r3, r2
   17078:	str	r3, [r4, #20]
   1707c:	bcs	170a4 <flatcc_builder_union_vector_push@@Base+0x74>
   17080:	ldr	r3, [r4, #16]
   17084:	adds	r3, r3, r6
   17088:	movne	r2, r3
   1708c:	ldmne	r5, {r0, r1}
   17090:	moveq	r2, r3
   17094:	stmne	r3, {r0, r1}
   17098:	mov	r0, r2
   1709c:	add	sp, sp, #20
   170a0:	pop	{r4, r5, r6, r7, pc}
   170a4:	ldr	r2, [r4, #28]
   170a8:	mov	r3, #1
   170ac:	add	r2, r6, r2
   170b0:	ldr	r0, [r4, #40]	; 0x28
   170b4:	add	r2, r2, #9
   170b8:	str	r3, [sp]
   170bc:	add	r1, r4, #60	; 0x3c
   170c0:	ldr	r7, [r4, #48]	; 0x30
   170c4:	blx	r7
   170c8:	cmp	r0, #0
   170cc:	bne	17104 <flatcc_builder_union_vector_push@@Base+0xd4>
   170d0:	ldr	r1, [r4, #28]
   170d4:	ldr	r2, [r4, #64]	; 0x40
   170d8:	ldr	r3, [r4, #60]	; 0x3c
   170dc:	sub	r2, r2, r1
   170e0:	cmn	r2, #4
   170e4:	mvnhi	r2, #3
   170e8:	str	r2, [r4, #24]
   170ec:	ldr	r2, [r4, #32]
   170f0:	add	r3, r3, r1
   170f4:	mvn	r1, #3
   170f8:	str	r3, [r4, #16]
   170fc:	str	r1, [r2, #4]
   17100:	b	17084 <flatcc_builder_union_vector_push@@Base+0x54>
   17104:	mov	r2, #0
   17108:	mov	r0, r2
   1710c:	add	sp, sp, #20
   17110:	pop	{r4, r5, r6, r7, pc}
   17114:	ldr	r3, [pc, #12]	; 17128 <flatcc_builder_union_vector_push@@Base+0xf8>
   17118:	ldr	r2, [pc, #12]	; 1712c <flatcc_builder_union_vector_push@@Base+0xfc>
   1711c:	ldr	r1, [pc, #12]	; 17130 <flatcc_builder_union_vector_push@@Base+0x100>
   17120:	ldr	r0, [pc, #12]	; 17134 <flatcc_builder_union_vector_push@@Base+0x104>
   17124:	bl	12084 <__assert_fail@plt>
   17128:	andeq	r9, r1, r8, lsl r2
   1712c:	andeq	r0, r0, sp, lsl #13
   17130:	andeq	r9, r1, ip, lsr r3
   17134:	andeq	r9, r1, r8, asr #12

00017138 <flatcc_builder_append_union_vector@@Base>:
   17138:	push	{r4, r5, r6, r7, r8, r9, lr}
   1713c:	mov	r5, r0
   17140:	ldr	r0, [r0, #32]
   17144:	sub	sp, sp, #12
   17148:	ldrh	r3, [r0, #14]
   1714c:	cmp	r3, #7
   17150:	bne	17234 <flatcc_builder_append_union_vector@@Base+0xfc>
   17154:	mov	r7, r1
   17158:	ldr	r1, [r0, #20]
   1715c:	adds	r1, r2, r1
   17160:	movcs	r4, #1
   17164:	movcc	r4, #0
   17168:	cmn	r1, #-536870911	; 0xe0000001
   1716c:	movls	r3, #0
   17170:	movhi	r3, #1
   17174:	orrs	r4, r4, r3
   17178:	bne	17230 <flatcc_builder_append_union_vector@@Base+0xf8>
   1717c:	str	r1, [r0, #20]
   17180:	ldr	r8, [r5, #20]
   17184:	lsl	r6, r2, #3
   17188:	ldr	r3, [r5, #24]
   1718c:	add	r1, r6, r8
   17190:	cmp	r1, r3
   17194:	str	r1, [r5, #20]
   17198:	bcs	171c8 <flatcc_builder_append_union_vector@@Base+0x90>
   1719c:	ldr	r3, [r5, #16]
   171a0:	adds	r3, r3, r8
   171a4:	beq	171bc <flatcc_builder_append_union_vector@@Base+0x84>
   171a8:	mov	r0, r3
   171ac:	mov	r2, r6
   171b0:	mov	r1, r7
   171b4:	bl	11fd0 <memcpy@plt>
   171b8:	mov	r3, r0
   171bc:	mov	r0, r3
   171c0:	add	sp, sp, #12
   171c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   171c8:	ldr	r2, [r5, #28]
   171cc:	mov	r3, #1
   171d0:	add	r2, r2, #1
   171d4:	ldr	r0, [r5, #40]	; 0x28
   171d8:	add	r2, r2, r1
   171dc:	str	r3, [sp]
   171e0:	add	r1, r5, #60	; 0x3c
   171e4:	ldr	r9, [r5, #48]	; 0x30
   171e8:	blx	r9
   171ec:	cmp	r0, #0
   171f0:	bne	17228 <flatcc_builder_append_union_vector@@Base+0xf0>
   171f4:	ldr	r1, [r5, #28]
   171f8:	ldr	r2, [r5, #64]	; 0x40
   171fc:	ldr	r3, [r5, #60]	; 0x3c
   17200:	sub	r2, r2, r1
   17204:	cmn	r2, #4
   17208:	mvnhi	r2, #3
   1720c:	str	r2, [r5, #24]
   17210:	ldr	r2, [r5, #32]
   17214:	add	r3, r3, r1
   17218:	mvn	r1, #3
   1721c:	str	r3, [r5, #16]
   17220:	str	r1, [r2, #4]
   17224:	b	171a0 <flatcc_builder_append_union_vector@@Base+0x68>
   17228:	mov	r3, r4
   1722c:	b	171bc <flatcc_builder_append_union_vector@@Base+0x84>
   17230:	bl	12104 <__assert_fail@plt+0x80>
   17234:	ldr	r3, [pc, #12]	; 17248 <flatcc_builder_append_union_vector@@Base+0x110>
   17238:	ldr	r2, [pc, #12]	; 1724c <flatcc_builder_append_union_vector@@Base+0x114>
   1723c:	ldr	r1, [pc, #12]	; 17250 <flatcc_builder_append_union_vector@@Base+0x118>
   17240:	ldr	r0, [pc, #12]	; 17254 <flatcc_builder_append_union_vector@@Base+0x11c>
   17244:	bl	12084 <__assert_fail@plt>
   17248:	andeq	r9, r1, ip, lsr r2
   1724c:	muleq	r0, ip, r6
   17250:	andeq	r9, r1, ip, lsr r3
   17254:	andeq	r9, r1, r8, asr #12

00017258 <flatcc_builder_create_string@@Base>:
   17258:	push	{r4, r5, r6, lr}
   1725c:	sub	sp, sp, #88	; 0x58
   17260:	ldr	lr, [r0, #136]	; 0x88
   17264:	mov	r4, r0
   17268:	add	r0, sp, #88	; 0x58
   1726c:	cmp	r2, #0
   17270:	sub	r3, lr, r2
   17274:	str	r2, [r0, #-76]!	; 0xffffffb4
   17278:	sub	r3, r3, #1
   1727c:	str	r0, [sp, #24]
   17280:	moveq	r0, #1
   17284:	strne	r1, [sp, #32]
   17288:	mov	ip, #4
   1728c:	moveq	r1, r0
   17290:	movne	r1, #2
   17294:	and	r3, r3, #3
   17298:	str	ip, [sp, #28]
   1729c:	add	r3, r3, #1
   172a0:	addne	ip, r2, ip
   172a4:	add	r1, r1, #1
   172a8:	add	ip, ip, r3
   172ac:	add	r0, sp, #88	; 0x58
   172b0:	add	r1, r0, r1, lsl #3
   172b4:	sub	r5, lr, ip
   172b8:	ldr	r0, [pc, #104]	; 17328 <flatcc_builder_create_string@@Base+0xd0>
   172bc:	strne	r2, [sp, #36]	; 0x24
   172c0:	moveq	r2, #2
   172c4:	movne	r2, #3
   172c8:	cmp	lr, r5
   172cc:	str	r3, [r1, #-68]	; 0xffffffbc
   172d0:	str	ip, [sp, #16]
   172d4:	str	r2, [sp, #20]
   172d8:	str	r0, [r1, #-72]	; 0xffffffb8
   172dc:	ble	17310 <flatcc_builder_create_string@@Base+0xb8>
   172e0:	ldr	r0, [r4, #36]	; 0x24
   172e4:	mov	r3, r5
   172e8:	str	ip, [sp]
   172ec:	add	r1, sp, #24
   172f0:	ldr	r6, [r4, #44]	; 0x2c
   172f4:	blx	r6
   172f8:	cmp	r0, #0
   172fc:	bne	17314 <flatcc_builder_create_string@@Base+0xbc>
   17300:	mov	r0, r5
   17304:	str	r5, [r4, #136]	; 0x88
   17308:	add	sp, sp, #88	; 0x58
   1730c:	pop	{r4, r5, r6, pc}
   17310:	bl	120dc <__assert_fail@plt+0x58>
   17314:	ldr	r3, [pc, #16]	; 1732c <flatcc_builder_create_string@@Base+0xd4>
   17318:	ldr	r2, [pc, #16]	; 17330 <flatcc_builder_create_string@@Base+0xd8>
   1731c:	ldr	r1, [pc, #16]	; 17334 <flatcc_builder_create_string@@Base+0xdc>
   17320:	ldr	r0, [pc, #16]	; 17338 <flatcc_builder_create_string@@Base+0xe0>
   17324:	bl	12084 <__assert_fail@plt>
   17328:	andeq	r8, r1, r4, lsl #25
   1732c:	andeq	r8, r1, r8, lsl #24
   17330:	andeq	r0, r0, fp, lsl #5
   17334:	andeq	r9, r1, ip, lsr r3
   17338:	strdeq	r9, [r1], -ip

0001733c <flatcc_builder_create_string_str@@Base>:
   1733c:	push	{r4, r5, r6, lr}
   17340:	mov	r4, r0
   17344:	sub	sp, sp, #88	; 0x58
   17348:	mov	r0, r1
   1734c:	mov	r5, r1
   17350:	bl	12030 <strlen@plt>
   17354:	ldr	lr, [r4, #136]	; 0x88
   17358:	add	r2, sp, #88	; 0x58
   1735c:	sub	r3, lr, #1
   17360:	mov	ip, #4
   17364:	str	ip, [sp, #28]
   17368:	cmp	r0, #0
   1736c:	str	r0, [r2, #-76]!	; 0xffffffb4
   17370:	sub	r3, r3, r0
   17374:	str	r2, [sp, #24]
   17378:	moveq	r2, #1
   1737c:	moveq	r1, r2
   17380:	movne	r1, #2
   17384:	and	r3, r3, #3
   17388:	addne	ip, r0, ip
   1738c:	add	r3, r3, #1
   17390:	add	r1, r1, #1
   17394:	strne	r0, [sp, #36]	; 0x24
   17398:	add	ip, ip, r3
   1739c:	add	r0, sp, #88	; 0x58
   173a0:	strne	r5, [sp, #32]
   173a4:	add	r1, r0, r1, lsl #3
   173a8:	sub	r5, lr, ip
   173ac:	ldr	r0, [pc, #100]	; 17418 <flatcc_builder_create_string_str@@Base+0xdc>
   173b0:	movne	r2, #3
   173b4:	moveq	r2, #2
   173b8:	cmp	lr, r5
   173bc:	str	r3, [r1, #-68]	; 0xffffffbc
   173c0:	str	ip, [sp, #16]
   173c4:	str	r2, [sp, #20]
   173c8:	str	r0, [r1, #-72]	; 0xffffffb8
   173cc:	ble	17400 <flatcc_builder_create_string_str@@Base+0xc4>
   173d0:	ldr	r0, [r4, #36]	; 0x24
   173d4:	mov	r3, r5
   173d8:	str	ip, [sp]
   173dc:	add	r1, sp, #24
   173e0:	ldr	r6, [r4, #44]	; 0x2c
   173e4:	blx	r6
   173e8:	cmp	r0, #0
   173ec:	bne	17404 <flatcc_builder_create_string_str@@Base+0xc8>
   173f0:	mov	r0, r5
   173f4:	str	r5, [r4, #136]	; 0x88
   173f8:	add	sp, sp, #88	; 0x58
   173fc:	pop	{r4, r5, r6, pc}
   17400:	bl	120dc <__assert_fail@plt+0x58>
   17404:	ldr	r3, [pc, #16]	; 1741c <flatcc_builder_create_string_str@@Base+0xe0>
   17408:	ldr	r2, [pc, #16]	; 17420 <flatcc_builder_create_string_str@@Base+0xe4>
   1740c:	ldr	r1, [pc, #16]	; 17424 <flatcc_builder_create_string_str@@Base+0xe8>
   17410:	ldr	r0, [pc, #16]	; 17428 <flatcc_builder_create_string_str@@Base+0xec>
   17414:	bl	12084 <__assert_fail@plt>
   17418:	andeq	r8, r1, r4, lsl #25
   1741c:	andeq	r8, r1, r8, lsl #24
   17420:	andeq	r0, r0, fp, lsl #5
   17424:	andeq	r9, r1, ip, lsr r3
   17428:	strdeq	r9, [r1], -ip

0001742c <flatcc_builder_create_string_strn@@Base>:
   1742c:	push	{r4, r5, r6, lr}
   17430:	mov	r6, r1
   17434:	sub	sp, sp, #88	; 0x58
   17438:	mov	r4, r0
   1743c:	mov	r1, #0
   17440:	mov	r0, r6
   17444:	mov	r5, r2
   17448:	bl	12060 <memchr@plt>
   1744c:	mov	ip, #4
   17450:	mov	r1, #1
   17454:	add	r2, sp, #88	; 0x58
   17458:	str	ip, [sp, #28]
   1745c:	add	lr, sp, #88	; 0x58
   17460:	cmp	r0, #0
   17464:	subne	r5, r0, r6
   17468:	ldr	r0, [r4, #136]	; 0x88
   1746c:	cmp	r5, #0
   17470:	sub	r3, r0, #1
   17474:	sub	r3, r3, r5
   17478:	movne	r1, #2
   1747c:	and	r3, r3, #3
   17480:	addne	ip, r5, ip
   17484:	add	r3, r3, #1
   17488:	add	r1, r1, #1
   1748c:	add	ip, r3, ip
   17490:	str	r5, [r2, #-76]!	; 0xffffffb4
   17494:	strne	r5, [sp, #36]	; 0x24
   17498:	add	r1, lr, r1, lsl #3
   1749c:	sub	r5, r0, ip
   174a0:	ldr	lr, [pc, #108]	; 17514 <flatcc_builder_create_string_strn@@Base+0xe8>
   174a4:	str	r2, [sp, #24]
   174a8:	strne	r6, [sp, #32]
   174ac:	movne	r2, #3
   174b0:	moveq	r2, #2
   174b4:	cmp	r0, r5
   174b8:	str	r3, [r1, #-68]	; 0xffffffbc
   174bc:	str	ip, [sp, #16]
   174c0:	str	r2, [sp, #20]
   174c4:	str	lr, [r1, #-72]	; 0xffffffb8
   174c8:	ble	174fc <flatcc_builder_create_string_strn@@Base+0xd0>
   174cc:	ldr	r0, [r4, #36]	; 0x24
   174d0:	mov	r3, r5
   174d4:	str	ip, [sp]
   174d8:	add	r1, sp, #24
   174dc:	ldr	r6, [r4, #44]	; 0x2c
   174e0:	blx	r6
   174e4:	cmp	r0, #0
   174e8:	bne	17500 <flatcc_builder_create_string_strn@@Base+0xd4>
   174ec:	mov	r0, r5
   174f0:	str	r5, [r4, #136]	; 0x88
   174f4:	add	sp, sp, #88	; 0x58
   174f8:	pop	{r4, r5, r6, pc}
   174fc:	bl	120dc <__assert_fail@plt+0x58>
   17500:	ldr	r3, [pc, #16]	; 17518 <flatcc_builder_create_string_strn@@Base+0xec>
   17504:	ldr	r2, [pc, #16]	; 1751c <flatcc_builder_create_string_strn@@Base+0xf0>
   17508:	ldr	r1, [pc, #16]	; 17520 <flatcc_builder_create_string_strn@@Base+0xf4>
   1750c:	ldr	r0, [pc, #16]	; 17524 <flatcc_builder_create_string_strn@@Base+0xf8>
   17510:	bl	12084 <__assert_fail@plt>
   17514:	andeq	r8, r1, r4, lsl #25
   17518:	andeq	r8, r1, r8, lsl #24
   1751c:	andeq	r0, r0, fp, lsl #5
   17520:	andeq	r9, r1, ip, lsr r3
   17524:	strdeq	r9, [r1], -ip

00017528 <flatcc_builder_end_string@@Base>:
   17528:	ldr	r3, [r0, #32]
   1752c:	push	{r4, r5, r6, lr}
   17530:	sub	sp, sp, #88	; 0x58
   17534:	ldrh	r2, [r3, #14]
   17538:	cmp	r2, #6
   1753c:	bne	176a8 <flatcc_builder_end_string@@Base+0x180>
   17540:	ldr	r2, [r3, #20]
   17544:	ldr	r3, [r0, #20]
   17548:	mov	r4, r0
   1754c:	cmp	r2, r3
   17550:	bne	17694 <flatcc_builder_end_string@@Base+0x16c>
   17554:	ldr	r0, [r0, #136]	; 0x88
   17558:	add	r1, sp, #88	; 0x58
   1755c:	sub	r3, r0, #1
   17560:	cmp	r2, #0
   17564:	sub	r3, r3, r2
   17568:	str	r2, [r1, #-76]!	; 0xffffffb4
   1756c:	mov	ip, #4
   17570:	str	r1, [sp, #24]
   17574:	ldr	lr, [r4, #16]
   17578:	mov	r1, #1
   1757c:	and	r3, r3, #3
   17580:	movne	r1, #2
   17584:	str	ip, [sp, #28]
   17588:	add	r3, r3, #1
   1758c:	addne	ip, r2, ip
   17590:	add	r1, r1, #1
   17594:	strne	lr, [sp, #32]
   17598:	add	ip, ip, r3
   1759c:	add	lr, sp, #88	; 0x58
   175a0:	add	r1, lr, r1, lsl #3
   175a4:	sub	r5, r0, ip
   175a8:	ldr	lr, [pc, #268]	; 176bc <flatcc_builder_end_string@@Base+0x194>
   175ac:	strne	r2, [sp, #36]	; 0x24
   175b0:	moveq	r2, #2
   175b4:	movne	r2, #3
   175b8:	cmp	r0, r5
   175bc:	str	r3, [r1, #-68]	; 0xffffffbc
   175c0:	str	ip, [sp, #16]
   175c4:	str	r2, [sp, #20]
   175c8:	str	lr, [r1, #-72]	; 0xffffffb8
   175cc:	ble	17690 <flatcc_builder_end_string@@Base+0x168>
   175d0:	ldr	r0, [r4, #36]	; 0x24
   175d4:	add	r1, sp, #24
   175d8:	str	ip, [sp]
   175dc:	mov	r3, r5
   175e0:	ldr	r6, [r4, #44]	; 0x2c
   175e4:	blx	r6
   175e8:	subs	r1, r0, #0
   175ec:	bne	1767c <flatcc_builder_end_string@@Base+0x154>
   175f0:	cmp	r5, #0
   175f4:	str	r5, [r4, #136]	; 0x88
   175f8:	beq	17670 <flatcc_builder_end_string@@Base+0x148>
   175fc:	ldr	r2, [r4, #20]
   17600:	ldr	r0, [r4, #16]
   17604:	bl	12054 <memset@plt>
   17608:	ldr	r3, [r4, #32]
   1760c:	ldr	r2, [r4, #64]	; 0x40
   17610:	ldrh	lr, [r4, #130]	; 0x82
   17614:	ldr	ip, [r3]
   17618:	ldr	r1, [r3, #4]
   1761c:	ldrh	r0, [r4, #128]	; 0x80
   17620:	sub	r2, r2, ip
   17624:	cmp	r2, r1
   17628:	movcs	r2, r1
   1762c:	cmp	r0, lr
   17630:	ldr	r0, [r4, #60]	; 0x3c
   17634:	ldr	r6, [r3, #8]
   17638:	str	r2, [r4, #24]
   1763c:	add	r2, r0, ip
   17640:	str	r2, [r4, #16]
   17644:	str	r6, [r4, #20]
   17648:	ldr	r2, [r4, #156]	; 0x9c
   1764c:	str	ip, [r4, #28]
   17650:	str	r1, [r3, #4]
   17654:	strhcc	lr, [r4, #128]	; 0x80
   17658:	ldrh	r1, [r3, #12]
   1765c:	sub	r2, r2, #1
   17660:	sub	r3, r3, #36	; 0x24
   17664:	str	r2, [r4, #156]	; 0x9c
   17668:	strh	r1, [r4, #130]	; 0x82
   1766c:	str	r3, [r4, #32]
   17670:	mov	r0, r5
   17674:	add	sp, sp, #88	; 0x58
   17678:	pop	{r4, r5, r6, pc}
   1767c:	ldr	r3, [pc, #60]	; 176c0 <flatcc_builder_end_string@@Base+0x198>
   17680:	ldr	r2, [pc, #60]	; 176c4 <flatcc_builder_end_string@@Base+0x19c>
   17684:	ldr	r1, [pc, #60]	; 176c8 <flatcc_builder_end_string@@Base+0x1a0>
   17688:	ldr	r0, [pc, #60]	; 176cc <flatcc_builder_end_string@@Base+0x1a4>
   1768c:	bl	12084 <__assert_fail@plt>
   17690:	bl	120dc <__assert_fail@plt+0x58>
   17694:	ldr	r3, [pc, #52]	; 176d0 <flatcc_builder_end_string@@Base+0x1a8>
   17698:	ldr	r2, [pc, #52]	; 176d4 <flatcc_builder_end_string@@Base+0x1ac>
   1769c:	ldr	r1, [pc, #36]	; 176c8 <flatcc_builder_end_string@@Base+0x1a0>
   176a0:	ldr	r0, [pc, #48]	; 176d8 <flatcc_builder_end_string@@Base+0x1b0>
   176a4:	bl	12084 <__assert_fail@plt>
   176a8:	ldr	r3, [pc, #32]	; 176d0 <flatcc_builder_end_string@@Base+0x1a8>
   176ac:	ldr	r2, [pc, #40]	; 176dc <flatcc_builder_end_string@@Base+0x1b4>
   176b0:	ldr	r1, [pc, #16]	; 176c8 <flatcc_builder_end_string@@Base+0x1a0>
   176b4:	ldr	r0, [pc, #36]	; 176e0 <flatcc_builder_end_string@@Base+0x1b8>
   176b8:	bl	12084 <__assert_fail@plt>
   176bc:	andeq	r8, r1, r4, lsl #25
   176c0:	andeq	r8, r1, r8, lsl #24
   176c4:	andeq	r0, r0, fp, lsl #5
   176c8:	andeq	r9, r1, ip, lsr r3
   176cc:	strdeq	r9, [r1], -ip
   176d0:	andeq	r9, r1, r0, ror #4
   176d4:	andeq	r0, r0, r5, asr #13
   176d8:	andeq	r9, r1, ip, ror r6
   176dc:	andeq	r0, r0, r4, asr #13
   176e0:			; <UNDEFINED> instruction: 0x000193bc

000176e4 <flatcc_builder_string_edit@@Base>:
   176e4:	ldr	r0, [r0, #16]
   176e8:	bx	lr

000176ec <flatcc_builder_string_len@@Base>:
   176ec:	ldr	r3, [r0, #32]
   176f0:	ldr	r0, [r3, #20]
   176f4:	bx	lr

000176f8 <flatcc_builder_table_add@@Base>:
   176f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   176fc:	mov	r4, r0
   17700:	ldr	r0, [r0, #32]
   17704:	sub	sp, sp, #12
   17708:	ldrh	r0, [r0, #14]
   1770c:	cmp	r0, #3
   17710:	bne	1784c <flatcc_builder_table_add@@Base+0x154>
   17714:	ldr	r0, [pc, #324]	; 17860 <flatcc_builder_table_add@@Base+0x168>
   17718:	cmp	r1, r0
   1771c:	bhi	17838 <flatcc_builder_table_add@@Base+0x140>
   17720:	ldrh	r0, [r4, #130]	; 0x82
   17724:	lsl	r7, r1, #1
   17728:	cmp	r0, r3
   1772c:	ldr	r0, [r4, #4]
   17730:	strhcc	r3, [r4, #130]	; 0x82
   17734:	add	lr, r0, r7
   17738:	ldrh	r6, [r0, r7]
   1773c:	cmp	r6, #0
   17740:	bne	17824 <flatcc_builder_table_add@@Base+0x12c>
   17744:	ldr	ip, [r4, #12]
   17748:	ldr	r9, [pc, #276]	; 17864 <flatcc_builder_table_add@@Base+0x16c>
   1774c:	eor	ip, ip, r1
   17750:	uxth	r5, r1
   17754:	mul	r1, r9, ip
   17758:	ldr	r0, [r4, #20]
   1775c:	eor	r1, r1, r2
   17760:	sub	r8, r3, #1
   17764:	add	r8, r8, r0
   17768:	rsb	r3, r3, #0
   1776c:	and	r8, r8, r3
   17770:	mul	r1, r9, r1
   17774:	ldr	r3, [r4, #24]
   17778:	add	r2, r2, r8
   1777c:	cmp	r2, r3
   17780:	str	r1, [r4, #12]
   17784:	str	r2, [r4, #20]
   17788:	bcs	177b4 <flatcc_builder_table_add@@Base+0xbc>
   1778c:	ldr	r0, [r4, #16]
   17790:	add	r3, r8, #4
   17794:	strh	r3, [lr]
   17798:	ldrh	r3, [r4, #8]
   1779c:	add	r0, r0, r8
   177a0:	cmp	r3, r5
   177a4:	addls	r5, r5, #1
   177a8:	strhls	r5, [r4, #8]
   177ac:	add	sp, sp, #12
   177b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   177b4:	ldr	r1, [r4, #28]
   177b8:	mov	r3, #1
   177bc:	add	r1, r1, #1
   177c0:	ldr	r0, [r4, #40]	; 0x28
   177c4:	add	r2, r1, r2
   177c8:	str	r3, [sp]
   177cc:	add	r1, r4, #60	; 0x3c
   177d0:	ldr	r9, [r4, #48]	; 0x30
   177d4:	blx	r9
   177d8:	cmp	r0, #0
   177dc:	bne	1781c <flatcc_builder_table_add@@Base+0x124>
   177e0:	ldr	r6, [r4, #28]
   177e4:	ldr	r3, [r4, #64]	; 0x40
   177e8:	ldr	r2, [pc, #120]	; 17868 <flatcc_builder_table_add@@Base+0x170>
   177ec:	sub	r3, r3, r6
   177f0:	ldr	r0, [r4, #60]	; 0x3c
   177f4:	ldr	r1, [r4, #32]
   177f8:	ldr	lr, [r4, #4]
   177fc:	cmp	r3, r2
   17800:	add	r0, r0, r6
   17804:	movcs	r3, r2
   17808:	str	r0, [r4, #16]
   1780c:	str	r3, [r4, #24]
   17810:	add	lr, lr, r7
   17814:	str	r2, [r1, #4]
   17818:	b	17790 <flatcc_builder_table_add@@Base+0x98>
   1781c:	mov	r0, r6
   17820:	b	177ac <flatcc_builder_table_add@@Base+0xb4>
   17824:	ldr	r3, [pc, #64]	; 1786c <flatcc_builder_table_add@@Base+0x174>
   17828:	ldr	r2, [pc, #64]	; 17870 <flatcc_builder_table_add@@Base+0x178>
   1782c:	ldr	r1, [pc, #64]	; 17874 <flatcc_builder_table_add@@Base+0x17c>
   17830:	ldr	r0, [pc, #64]	; 17878 <flatcc_builder_table_add@@Base+0x180>
   17834:	bl	12084 <__assert_fail@plt>
   17838:	ldr	r3, [pc, #44]	; 1786c <flatcc_builder_table_add@@Base+0x174>
   1783c:	ldr	r2, [pc, #56]	; 1787c <flatcc_builder_table_add@@Base+0x184>
   17840:	ldr	r1, [pc, #44]	; 17874 <flatcc_builder_table_add@@Base+0x17c>
   17844:	ldr	r0, [pc, #52]	; 17880 <flatcc_builder_table_add@@Base+0x188>
   17848:	bl	12084 <__assert_fail@plt>
   1784c:	ldr	r3, [pc, #24]	; 1786c <flatcc_builder_table_add@@Base+0x174>
   17850:	ldr	r2, [pc, #44]	; 17884 <flatcc_builder_table_add@@Base+0x18c>
   17854:	ldr	r1, [pc, #24]	; 17874 <flatcc_builder_table_add@@Base+0x17c>
   17858:	ldr	r0, [pc, #40]	; 17888 <flatcc_builder_table_add@@Base+0x190>
   1785c:	bl	12084 <__assert_fail@plt>
   17860:	strdeq	r7, [r0], -ip
   17864:			; <UNDEFINED> instruction: 0x9e3779b1
   17868:	strdeq	pc, [r0], -ip
   1786c:	andeq	r9, r1, ip, ror r2
   17870:	strdeq	r0, [r0], -r8
   17874:	andeq	r9, r1, ip, lsr r3
   17878:	strdeq	r9, [r1], -ip
   1787c:	andeq	r0, r0, lr, ror #13
   17880:	andeq	r9, r1, r0, lsr #13
   17884:	andeq	r0, r0, sp, ror #13
   17888:	andeq	r9, r1, r8, lsl #12

0001788c <flatcc_builder_table_edit@@Base>:
   1788c:	ldr	r3, [r0, #32]
   17890:	ldrh	r3, [r3, #14]
   17894:	cmp	r3, #3
   17898:	bne	178b0 <flatcc_builder_table_edit@@Base+0x24>
   1789c:	ldr	r3, [r0, #20]
   178a0:	ldr	r0, [r0, #16]
   178a4:	sub	r1, r3, r1
   178a8:	add	r0, r0, r1
   178ac:	bx	lr
   178b0:	push	{r4, lr}
   178b4:	ldr	r3, [pc, #12]	; 178c8 <flatcc_builder_table_edit@@Base+0x3c>
   178b8:	ldr	r2, [pc, #12]	; 178cc <flatcc_builder_table_edit@@Base+0x40>
   178bc:	ldr	r1, [pc, #12]	; 178d0 <flatcc_builder_table_edit@@Base+0x44>
   178c0:	ldr	r0, [pc, #12]	; 178d4 <flatcc_builder_table_edit@@Base+0x48>
   178c4:	bl	12084 <__assert_fail@plt>
   178c8:	muleq	r1, r8, r2
   178cc:	andeq	r0, r0, r2, lsl #14
   178d0:	andeq	r9, r1, ip, lsr r3
   178d4:	andeq	r9, r1, r8, lsl #12

000178d8 <flatcc_builder_table_add_copy@@Base>:
   178d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178dc:	mov	r4, r0
   178e0:	ldr	r0, [r0, #32]
   178e4:	mov	r7, r3
   178e8:	sub	sp, sp, #12
   178ec:	ldrh	r3, [r0, #14]
   178f0:	ldrh	ip, [sp, #48]	; 0x30
   178f4:	cmp	r3, #3
   178f8:	bne	17a54 <flatcc_builder_table_add_copy@@Base+0x17c>
   178fc:	ldr	r3, [pc, #356]	; 17a68 <flatcc_builder_table_add_copy@@Base+0x190>
   17900:	cmp	r1, r3
   17904:	bhi	17a40 <flatcc_builder_table_add_copy@@Base+0x168>
   17908:	ldrh	r3, [r4, #130]	; 0x82
   1790c:	lsl	sl, r1, #1
   17910:	mov	r8, r2
   17914:	cmp	r3, ip
   17918:	ldr	r3, [r4, #4]
   1791c:	strhcc	ip, [r4, #130]	; 0x82
   17920:	add	r0, r3, sl
   17924:	ldrh	r5, [r3, sl]
   17928:	cmp	r5, #0
   1792c:	bne	17a2c <flatcc_builder_table_add_copy@@Base+0x154>
   17930:	ldr	r2, [r4, #12]
   17934:	ldr	lr, [pc, #304]	; 17a6c <flatcc_builder_table_add_copy@@Base+0x194>
   17938:	eor	r2, r2, r1
   1793c:	ldr	r6, [r4, #20]
   17940:	mul	r2, lr, r2
   17944:	sub	r3, ip, #1
   17948:	eor	r2, r2, r7
   1794c:	add	r3, r3, r6
   17950:	rsb	ip, ip, #0
   17954:	and	r6, r3, ip
   17958:	mul	lr, lr, r2
   1795c:	ldr	r3, [r4, #24]
   17960:	uxth	r9, r1
   17964:	add	r1, r7, r6
   17968:	cmp	r1, r3
   1796c:	str	lr, [r4, #12]
   17970:	str	r1, [r4, #20]
   17974:	bcs	179bc <flatcc_builder_table_add_copy@@Base+0xe4>
   17978:	ldr	r3, [r4, #16]
   1797c:	add	r2, r6, #4
   17980:	strh	r2, [r0]
   17984:	ldrh	r2, [r4, #8]
   17988:	cmp	r2, r9
   1798c:	addls	r9, r9, #1
   17990:	strhls	r9, [r4, #8]
   17994:	adds	r3, r3, r6
   17998:	beq	179b0 <flatcc_builder_table_add_copy@@Base+0xd8>
   1799c:	mov	r0, r3
   179a0:	mov	r2, r7
   179a4:	mov	r1, r8
   179a8:	bl	11fd0 <memcpy@plt>
   179ac:	mov	r3, r0
   179b0:	mov	r0, r3
   179b4:	add	sp, sp, #12
   179b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179bc:	ldr	r2, [r4, #28]
   179c0:	mov	r3, #1
   179c4:	add	r2, r2, #1
   179c8:	ldr	r0, [r4, #40]	; 0x28
   179cc:	add	r2, r2, r1
   179d0:	str	r3, [sp]
   179d4:	add	r1, r4, #60	; 0x3c
   179d8:	ldr	fp, [r4, #48]	; 0x30
   179dc:	blx	fp
   179e0:	cmp	r0, #0
   179e4:	bne	17a24 <flatcc_builder_table_add_copy@@Base+0x14c>
   179e8:	ldr	r0, [r4, #28]
   179ec:	ldr	r2, [r4, #64]	; 0x40
   179f0:	ldr	r1, [pc, #120]	; 17a70 <flatcc_builder_table_add_copy@@Base+0x198>
   179f4:	ldr	r3, [r4, #60]	; 0x3c
   179f8:	sub	r2, r2, r0
   179fc:	ldr	ip, [r4, #32]
   17a00:	add	r3, r3, r0
   17a04:	cmp	r2, r1
   17a08:	ldr	r0, [r4, #4]
   17a0c:	movcs	r2, r1
   17a10:	str	r3, [r4, #16]
   17a14:	str	r2, [r4, #24]
   17a18:	add	r0, r0, sl
   17a1c:	str	r1, [ip, #4]
   17a20:	b	1797c <flatcc_builder_table_add_copy@@Base+0xa4>
   17a24:	mov	r3, r5
   17a28:	b	179b0 <flatcc_builder_table_add_copy@@Base+0xd8>
   17a2c:	ldr	r3, [pc, #64]	; 17a74 <flatcc_builder_table_add_copy@@Base+0x19c>
   17a30:	ldr	r2, [pc, #64]	; 17a78 <flatcc_builder_table_add_copy@@Base+0x1a0>
   17a34:	ldr	r1, [pc, #64]	; 17a7c <flatcc_builder_table_add_copy@@Base+0x1a4>
   17a38:	ldr	r0, [pc, #64]	; 17a80 <flatcc_builder_table_add_copy@@Base+0x1a8>
   17a3c:	bl	12084 <__assert_fail@plt>
   17a40:	ldr	r3, [pc, #44]	; 17a74 <flatcc_builder_table_add_copy@@Base+0x19c>
   17a44:	ldr	r2, [pc, #56]	; 17a84 <flatcc_builder_table_add_copy@@Base+0x1ac>
   17a48:	ldr	r1, [pc, #44]	; 17a7c <flatcc_builder_table_add_copy@@Base+0x1a4>
   17a4c:	ldr	r0, [pc, #52]	; 17a88 <flatcc_builder_table_add_copy@@Base+0x1b0>
   17a50:	bl	12084 <__assert_fail@plt>
   17a54:	ldr	r3, [pc, #24]	; 17a74 <flatcc_builder_table_add_copy@@Base+0x19c>
   17a58:	ldr	r2, [pc, #44]	; 17a8c <flatcc_builder_table_add_copy@@Base+0x1b4>
   17a5c:	ldr	r1, [pc, #24]	; 17a7c <flatcc_builder_table_add_copy@@Base+0x1a4>
   17a60:	ldr	r0, [pc, #40]	; 17a90 <flatcc_builder_table_add_copy@@Base+0x1b8>
   17a64:	bl	12084 <__assert_fail@plt>
   17a68:	strdeq	r7, [r0], -ip
   17a6c:			; <UNDEFINED> instruction: 0x9e3779b1
   17a70:	strdeq	pc, [r0], -ip
   17a74:	andeq	r9, r1, ip, ror r2
   17a78:	strdeq	r0, [r0], -r8
   17a7c:	andeq	r9, r1, ip, lsr r3
   17a80:	strdeq	r9, [r1], -ip
   17a84:	andeq	r0, r0, lr, ror #13
   17a88:	andeq	r9, r1, r0, lsr #13
   17a8c:	andeq	r0, r0, sp, ror #13
   17a90:	andeq	r9, r1, r8, lsl #12

00017a94 <flatcc_builder_table_add_offset@@Base>:
   17a94:	ldr	r3, [r0, #32]
   17a98:	push	{r4, r5, r6, r7, r8, r9, lr}
   17a9c:	sub	sp, sp, #12
   17aa0:	ldrh	r3, [r3, #14]
   17aa4:	cmp	r3, #3
   17aa8:	bne	17be4 <flatcc_builder_table_add_offset@@Base+0x150>
   17aac:	ldr	r3, [pc, #324]	; 17bf8 <flatcc_builder_table_add_offset@@Base+0x164>
   17ab0:	cmp	r1, r3
   17ab4:	bhi	17bd0 <flatcc_builder_table_add_offset@@Base+0x13c>
   17ab8:	ldr	r3, [r0, #4]
   17abc:	lsl	r7, r1, #1
   17ac0:	mov	r4, r0
   17ac4:	ldrh	r6, [r3, r7]
   17ac8:	add	ip, r3, r7
   17acc:	cmp	r6, #0
   17ad0:	bne	17bbc <flatcc_builder_table_add_offset@@Base+0x128>
   17ad4:	ldr	r3, [r0, #12]
   17ad8:	ldr	r2, [pc, #284]	; 17bfc <flatcc_builder_table_add_offset@@Base+0x168>
   17adc:	eor	r3, r3, r1
   17ae0:	ldr	r5, [r0, #20]
   17ae4:	mul	r3, r2, r3
   17ae8:	add	r5, r5, #3
   17aec:	eor	r3, r3, #4
   17af0:	ldr	r0, [r0, #24]
   17af4:	mul	r3, r2, r3
   17af8:	bic	r5, r5, #3
   17afc:	add	r2, r5, #4
   17b00:	cmp	r2, r0
   17b04:	uxth	r8, r1
   17b08:	str	r3, [r4, #12]
   17b0c:	str	r2, [r4, #20]
   17b10:	bhi	17b50 <flatcc_builder_table_add_offset@@Base+0xbc>
   17b14:	ldr	r0, [r4, #16]
   17b18:	uxth	r2, r5
   17b1c:	add	r3, r2, #4
   17b20:	strh	r3, [ip]
   17b24:	ldrh	r3, [r4, #8]
   17b28:	add	r0, r0, r5
   17b2c:	cmp	r3, r8
   17b30:	ldr	r3, [r4]
   17b34:	addls	r1, r8, #1
   17b38:	strhls	r1, [r4, #8]
   17b3c:	add	r1, r3, #2
   17b40:	str	r1, [r4]
   17b44:	strh	r2, [r3]
   17b48:	add	sp, sp, #12
   17b4c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17b50:	ldr	r1, [r4, #28]
   17b54:	mov	r3, #1
   17b58:	ldr	r0, [r4, #40]	; 0x28
   17b5c:	add	r2, r2, r1
   17b60:	str	r3, [sp]
   17b64:	add	r1, r4, #60	; 0x3c
   17b68:	ldr	r9, [r4, #48]	; 0x30
   17b6c:	blx	r9
   17b70:	cmp	r0, #0
   17b74:	bne	17bb4 <flatcc_builder_table_add_offset@@Base+0x120>
   17b78:	ldr	r6, [r4, #28]
   17b7c:	ldr	r3, [r4, #64]	; 0x40
   17b80:	ldr	r2, [pc, #120]	; 17c00 <flatcc_builder_table_add_offset@@Base+0x16c>
   17b84:	sub	r3, r3, r6
   17b88:	ldr	r0, [r4, #60]	; 0x3c
   17b8c:	ldr	r1, [r4, #32]
   17b90:	ldr	ip, [r4, #4]
   17b94:	cmp	r3, r2
   17b98:	add	r0, r0, r6
   17b9c:	movcs	r3, r2
   17ba0:	str	r0, [r4, #16]
   17ba4:	str	r3, [r4, #24]
   17ba8:	add	ip, ip, r7
   17bac:	str	r2, [r1, #4]
   17bb0:	b	17b18 <flatcc_builder_table_add_offset@@Base+0x84>
   17bb4:	mov	r0, r6
   17bb8:	b	17b48 <flatcc_builder_table_add_offset@@Base+0xb4>
   17bbc:	ldr	r3, [pc, #64]	; 17c04 <flatcc_builder_table_add_offset@@Base+0x170>
   17bc0:	ldr	r2, [pc, #64]	; 17c08 <flatcc_builder_table_add_offset@@Base+0x174>
   17bc4:	ldr	r1, [pc, #64]	; 17c0c <flatcc_builder_table_add_offset@@Base+0x178>
   17bc8:	ldr	r0, [pc, #64]	; 17c10 <flatcc_builder_table_add_offset@@Base+0x17c>
   17bcc:	bl	12084 <__assert_fail@plt>
   17bd0:	ldr	r3, [pc, #44]	; 17c04 <flatcc_builder_table_add_offset@@Base+0x170>
   17bd4:	ldr	r2, [pc, #56]	; 17c14 <flatcc_builder_table_add_offset@@Base+0x180>
   17bd8:	ldr	r1, [pc, #44]	; 17c0c <flatcc_builder_table_add_offset@@Base+0x178>
   17bdc:	ldr	r0, [pc, #52]	; 17c18 <flatcc_builder_table_add_offset@@Base+0x184>
   17be0:	bl	12084 <__assert_fail@plt>
   17be4:	ldr	r3, [pc, #24]	; 17c04 <flatcc_builder_table_add_offset@@Base+0x170>
   17be8:	ldr	r2, [pc, #44]	; 17c1c <flatcc_builder_table_add_offset@@Base+0x188>
   17bec:	ldr	r1, [pc, #24]	; 17c0c <flatcc_builder_table_add_offset@@Base+0x178>
   17bf0:	ldr	r0, [pc, #40]	; 17c20 <flatcc_builder_table_add_offset@@Base+0x18c>
   17bf4:	bl	12084 <__assert_fail@plt>
   17bf8:	strdeq	r7, [r0], -ip
   17bfc:			; <UNDEFINED> instruction: 0x9e3779b1
   17c00:	strdeq	pc, [r0], -ip
   17c04:			; <UNDEFINED> instruction: 0x000192b4
   17c08:	andeq	r0, r0, fp, lsl r7
   17c0c:	andeq	r9, r1, ip, lsr r3
   17c10:	strdeq	r9, [r1], -ip
   17c14:	andeq	r0, r0, r4, lsl r7
   17c18:	andeq	r9, r1, r0, lsr #13
   17c1c:	andeq	r0, r0, r3, lsl r7
   17c20:	andeq	r9, r1, r8, lsl #12

00017c24 <flatcc_builder_table_add_union@@Base>:
   17c24:	push	{r4, r5, r6, r7, r8, r9, lr}
   17c28:	sub	sp, sp, #20
   17c2c:	add	ip, sp, #16
   17c30:	stmdb	ip, {r2, r3}
   17c34:	ldr	r3, [r0, #32]
   17c38:	ldrb	r6, [sp, #8]
   17c3c:	ldr	r5, [sp, #12]
   17c40:	ldrh	r3, [r3, #14]
   17c44:	cmp	r3, #3
   17c48:	bne	17dd4 <flatcc_builder_table_add_union@@Base+0x1b0>
   17c4c:	cmp	r6, #0
   17c50:	mov	r4, r0
   17c54:	mov	r7, r1
   17c58:	beq	17d28 <flatcc_builder_table_add_union@@Base+0x104>
   17c5c:	cmp	r5, #0
   17c60:	beq	17c84 <flatcc_builder_table_add_union@@Base+0x60>
   17c64:	bl	17a94 <flatcc_builder_table_add_offset@@Base>
   17c68:	cmp	r0, #0
   17c6c:	beq	17e10 <flatcc_builder_table_add_union@@Base+0x1ec>
   17c70:	ldr	r3, [r4, #32]
   17c74:	str	r5, [r0]
   17c78:	ldrh	r3, [r3, #14]
   17c7c:	cmp	r3, #3
   17c80:	bne	17de8 <flatcc_builder_table_add_union@@Base+0x1c4>
   17c84:	ldr	r3, [pc, #408]	; 17e24 <flatcc_builder_table_add_union@@Base+0x200>
   17c88:	sub	r1, r7, #1
   17c8c:	cmp	r1, r3
   17c90:	bhi	17dfc <flatcc_builder_table_add_union@@Base+0x1d8>
   17c94:	ldrh	r3, [r4, #130]	; 0x82
   17c98:	lsl	r5, r1, #1
   17c9c:	cmp	r3, #0
   17ca0:	moveq	r3, #1
   17ca4:	strheq	r3, [r4, #130]	; 0x82
   17ca8:	ldr	r3, [r4, #4]
   17cac:	add	r0, r3, r5
   17cb0:	ldrh	r3, [r3, r5]
   17cb4:	cmp	r3, #0
   17cb8:	bne	17dc0 <flatcc_builder_table_add_union@@Base+0x19c>
   17cbc:	ldr	r3, [r4, #12]
   17cc0:	ldr	r2, [pc, #352]	; 17e28 <flatcc_builder_table_add_union@@Base+0x204>
   17cc4:	eor	r3, r3, r1
   17cc8:	ldr	r7, [r4, #20]
   17ccc:	mul	r3, r2, r3
   17cd0:	uxth	r8, r1
   17cd4:	eor	r3, r3, #1
   17cd8:	ldr	r1, [r4, #24]
   17cdc:	mul	r3, r2, r3
   17ce0:	add	r2, r7, #1
   17ce4:	cmp	r2, r1
   17ce8:	str	r3, [r4, #12]
   17cec:	str	r2, [r4, #20]
   17cf0:	bcs	17d44 <flatcc_builder_table_add_union@@Base+0x120>
   17cf4:	ldr	r3, [r4, #16]
   17cf8:	add	r2, r7, #4
   17cfc:	strh	r2, [r0]
   17d00:	ldrh	r2, [r4, #8]
   17d04:	cmp	r2, r8
   17d08:	addls	r1, r8, #1
   17d0c:	strhls	r1, [r4, #8]
   17d10:	cmn	r3, r7
   17d14:	beq	17dac <flatcc_builder_table_add_union@@Base+0x188>
   17d18:	mov	r0, #0
   17d1c:	strb	r6, [r3, r7]
   17d20:	add	sp, sp, #20
   17d24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17d28:	cmp	r5, #0
   17d2c:	beq	17c84 <flatcc_builder_table_add_union@@Base+0x60>
   17d30:	ldr	r3, [pc, #244]	; 17e2c <flatcc_builder_table_add_union@@Base+0x208>
   17d34:	ldr	r2, [pc, #244]	; 17e30 <flatcc_builder_table_add_union@@Base+0x20c>
   17d38:	ldr	r1, [pc, #244]	; 17e34 <flatcc_builder_table_add_union@@Base+0x210>
   17d3c:	ldr	r0, [pc, #244]	; 17e38 <flatcc_builder_table_add_union@@Base+0x214>
   17d40:	bl	12084 <__assert_fail@plt>
   17d44:	ldr	r2, [r4, #28]
   17d48:	mov	r3, #1
   17d4c:	add	r2, r7, r2
   17d50:	ldr	r0, [r4, #40]	; 0x28
   17d54:	add	r2, r2, #2
   17d58:	str	r3, [sp]
   17d5c:	add	r1, r4, #60	; 0x3c
   17d60:	ldr	r9, [r4, #48]	; 0x30
   17d64:	blx	r9
   17d68:	cmp	r0, #0
   17d6c:	bne	17dac <flatcc_builder_table_add_union@@Base+0x188>
   17d70:	ldr	r0, [r4, #28]
   17d74:	ldr	r2, [r4, #64]	; 0x40
   17d78:	ldr	r1, [pc, #188]	; 17e3c <flatcc_builder_table_add_union@@Base+0x218>
   17d7c:	ldr	r3, [r4, #60]	; 0x3c
   17d80:	sub	r2, r2, r0
   17d84:	ldr	ip, [r4, #32]
   17d88:	add	r3, r3, r0
   17d8c:	cmp	r2, r1
   17d90:	ldr	r0, [r4, #4]
   17d94:	movcs	r2, r1
   17d98:	str	r3, [r4, #16]
   17d9c:	str	r2, [r4, #24]
   17da0:	add	r0, r0, r5
   17da4:	str	r1, [ip, #4]
   17da8:	b	17cf8 <flatcc_builder_table_add_union@@Base+0xd4>
   17dac:	ldr	r3, [pc, #120]	; 17e2c <flatcc_builder_table_add_union@@Base+0x208>
   17db0:	ldr	r2, [pc, #136]	; 17e40 <flatcc_builder_table_add_union@@Base+0x21c>
   17db4:	ldr	r1, [pc, #120]	; 17e34 <flatcc_builder_table_add_union@@Base+0x210>
   17db8:	ldr	r0, [pc, #132]	; 17e44 <flatcc_builder_table_add_union@@Base+0x220>
   17dbc:	bl	12084 <__assert_fail@plt>
   17dc0:	ldr	r3, [pc, #128]	; 17e48 <flatcc_builder_table_add_union@@Base+0x224>
   17dc4:	ldr	r2, [pc, #128]	; 17e4c <flatcc_builder_table_add_union@@Base+0x228>
   17dc8:	ldr	r1, [pc, #100]	; 17e34 <flatcc_builder_table_add_union@@Base+0x210>
   17dcc:	ldr	r0, [pc, #124]	; 17e50 <flatcc_builder_table_add_union@@Base+0x22c>
   17dd0:	bl	12084 <__assert_fail@plt>
   17dd4:	ldr	r3, [pc, #80]	; 17e2c <flatcc_builder_table_add_union@@Base+0x208>
   17dd8:	ldr	r2, [pc, #116]	; 17e54 <flatcc_builder_table_add_union@@Base+0x230>
   17ddc:	ldr	r1, [pc, #80]	; 17e34 <flatcc_builder_table_add_union@@Base+0x210>
   17de0:	ldr	r0, [pc, #112]	; 17e58 <flatcc_builder_table_add_union@@Base+0x234>
   17de4:	bl	12084 <__assert_fail@plt>
   17de8:	ldr	r3, [pc, #88]	; 17e48 <flatcc_builder_table_add_union@@Base+0x224>
   17dec:	ldr	r2, [pc, #104]	; 17e5c <flatcc_builder_table_add_union@@Base+0x238>
   17df0:	ldr	r1, [pc, #60]	; 17e34 <flatcc_builder_table_add_union@@Base+0x210>
   17df4:	ldr	r0, [pc, #92]	; 17e58 <flatcc_builder_table_add_union@@Base+0x234>
   17df8:	bl	12084 <__assert_fail@plt>
   17dfc:	ldr	r3, [pc, #68]	; 17e48 <flatcc_builder_table_add_union@@Base+0x224>
   17e00:	ldr	r2, [pc, #88]	; 17e60 <flatcc_builder_table_add_union@@Base+0x23c>
   17e04:	ldr	r1, [pc, #40]	; 17e34 <flatcc_builder_table_add_union@@Base+0x210>
   17e08:	ldr	r0, [pc, #84]	; 17e64 <flatcc_builder_table_add_union@@Base+0x240>
   17e0c:	bl	12084 <__assert_fail@plt>
   17e10:	ldr	r3, [pc, #20]	; 17e2c <flatcc_builder_table_add_union@@Base+0x208>
   17e14:	ldr	r2, [pc, #76]	; 17e68 <flatcc_builder_table_add_union@@Base+0x244>
   17e18:	ldr	r1, [pc, #20]	; 17e34 <flatcc_builder_table_add_union@@Base+0x210>
   17e1c:	ldr	r0, [pc, #72]	; 17e6c <flatcc_builder_table_add_union@@Base+0x248>
   17e20:	bl	12084 <__assert_fail@plt>
   17e24:	strdeq	r7, [r0], -ip
   17e28:			; <UNDEFINED> instruction: 0x9e3779b1
   17e2c:	ldrdeq	r9, [r1], -r4
   17e30:	andeq	r0, r0, pc, ror #11
   17e34:	andeq	r9, r1, ip, lsr r3
   17e38:	andeq	r9, r1, r4, ror #13
   17e3c:	strdeq	pc, [r0], -ip
   17e40:	strdeq	r0, [r0], -r6
   17e44:	andeq	r9, r1, r4, lsl r7
   17e48:	andeq	r9, r1, ip, ror r2
   17e4c:	strdeq	r0, [r0], -r8
   17e50:	strdeq	r9, [r1], -ip
   17e54:	andeq	r0, r0, lr, ror #11
   17e58:	andeq	r9, r1, r8, lsl #12
   17e5c:	andeq	r0, r0, sp, ror #13
   17e60:	andeq	r0, r0, lr, ror #13
   17e64:	andeq	r9, r1, r0, lsr #13
   17e68:	strdeq	r0, [r0], -r2
   17e6c:	andeq	r9, r1, r8, lsl #14

00017e70 <flatcc_builder_table_add_union_vector@@Base>:
   17e70:	push	{r4, r5, r6, r7, lr}
   17e74:	sub	sp, sp, #12
   17e78:	add	ip, sp, #8
   17e7c:	stmdb	ip, {r2, r3}
   17e80:	ldr	r3, [r0, #32]
   17e84:	ldr	r4, [sp]
   17e88:	ldr	r6, [sp, #4]
   17e8c:	ldrh	r3, [r3, #14]
   17e90:	cmp	r3, #3
   17e94:	bne	17f24 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   17e98:	clz	r3, r6
   17e9c:	clz	r2, r4
   17ea0:	lsr	r3, r3, #5
   17ea4:	lsr	r2, r2, #5
   17ea8:	cmp	r2, r3
   17eac:	beq	17ecc <flatcc_builder_table_add_union_vector@@Base+0x5c>
   17eb0:	adds	r4, r4, #0
   17eb4:	movne	r4, #1
   17eb8:	cmp	r4, r3
   17ebc:	mvnne	r0, #0
   17ec0:	beq	17f38 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   17ec4:	add	sp, sp, #12
   17ec8:	pop	{r4, r5, r6, r7, pc}
   17ecc:	cmp	r4, #0
   17ed0:	moveq	r0, r4
   17ed4:	beq	17ec4 <flatcc_builder_table_add_union_vector@@Base+0x54>
   17ed8:	mov	r7, r1
   17edc:	sub	r1, r1, #1
   17ee0:	mov	r5, r0
   17ee4:	bl	17a94 <flatcc_builder_table_add_offset@@Base>
   17ee8:	cmp	r0, #0
   17eec:	beq	17f4c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   17ef0:	str	r4, [r0]
   17ef4:	mov	r1, r7
   17ef8:	mov	r0, r5
   17efc:	bl	17a94 <flatcc_builder_table_add_offset@@Base>
   17f00:	cmp	r0, #0
   17f04:	strne	r6, [r0]
   17f08:	movne	r0, #0
   17f0c:	bne	17ec4 <flatcc_builder_table_add_union_vector@@Base+0x54>
   17f10:	ldr	r3, [pc, #72]	; 17f60 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   17f14:	ldr	r2, [pc, #72]	; 17f64 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   17f18:	ldr	r1, [pc, #72]	; 17f68 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   17f1c:	ldr	r0, [pc, #72]	; 17f6c <flatcc_builder_table_add_union_vector@@Base+0xfc>
   17f20:	bl	12084 <__assert_fail@plt>
   17f24:	ldr	r3, [pc, #52]	; 17f60 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   17f28:	mov	r2, #1536	; 0x600
   17f2c:	ldr	r1, [pc, #52]	; 17f68 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   17f30:	ldr	r0, [pc, #56]	; 17f70 <flatcc_builder_table_add_union_vector@@Base+0x100>
   17f34:	bl	12084 <__assert_fail@plt>
   17f38:	ldr	r3, [pc, #32]	; 17f60 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   17f3c:	ldr	r2, [pc, #48]	; 17f74 <flatcc_builder_table_add_union_vector@@Base+0x104>
   17f40:	ldr	r1, [pc, #32]	; 17f68 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   17f44:	ldr	r0, [pc, #44]	; 17f78 <flatcc_builder_table_add_union_vector@@Base+0x108>
   17f48:	bl	12084 <__assert_fail@plt>
   17f4c:	ldr	r3, [pc, #12]	; 17f60 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   17f50:	ldr	r2, [pc, #36]	; 17f7c <flatcc_builder_table_add_union_vector@@Base+0x10c>
   17f54:	ldr	r1, [pc, #12]	; 17f68 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   17f58:	ldr	r0, [pc, #12]	; 17f6c <flatcc_builder_table_add_union_vector@@Base+0xfc>
   17f5c:	bl	12084 <__assert_fail@plt>
   17f60:	strdeq	r9, [r1], -r4
   17f64:	andeq	r0, r0, r8, lsl #12
   17f68:	andeq	r9, r1, ip, lsr r3
   17f6c:	andeq	r9, r1, r8, lsl #14
   17f70:	andeq	r9, r1, r8, lsl #12
   17f74:	andeq	r0, r0, r1, lsl #12
   17f78:	andeq	r9, r1, r0, lsr #14
   17f7c:	andeq	r0, r0, r4, lsl #12

00017f80 <flatcc_builder_push_buffer_alignment@@Base>:
   17f80:	mov	r3, r0
   17f84:	mov	r2, #4
   17f88:	ldrh	r0, [r0, #128]	; 0x80
   17f8c:	strh	r2, [r3, #128]	; 0x80
   17f90:	bx	lr

00017f94 <flatcc_builder_pop_buffer_alignment@@Base>:
   17f94:	ldrh	r3, [r0, #128]	; 0x80
   17f98:	cmp	r3, r1
   17f9c:	strhcc	r1, [r0, #128]	; 0x80
   17fa0:	bx	lr

00017fa4 <flatcc_builder_get_buffer_alignment@@Base>:
   17fa4:	ldrh	r0, [r0, #128]	; 0x80
   17fa8:	bx	lr

00017fac <flatcc_builder_set_vtable_clustering@@Base>:
   17fac:	clz	r1, r1
   17fb0:	lsr	r1, r1, #5
   17fb4:	str	r1, [r0, #180]	; 0xb4
   17fb8:	bx	lr

00017fbc <flatcc_builder_set_block_align@@Base>:
   17fbc:	strh	r1, [r0, #132]	; 0x84
   17fc0:	bx	lr

00017fc4 <flatcc_builder_get_level@@Base>:
   17fc4:	ldr	r0, [r0, #156]	; 0x9c
   17fc8:	bx	lr

00017fcc <flatcc_builder_set_max_level@@Base>:
   17fcc:	ldr	r3, [r0, #160]	; 0xa0
   17fd0:	str	r1, [r0, #176]	; 0xb0
   17fd4:	cmp	r1, r3
   17fd8:	strgt	r1, [r0, #160]	; 0xa0
   17fdc:	bx	lr

00017fe0 <flatcc_builder_get_buffer_size@@Base>:
   17fe0:	ldr	r2, [r0, #140]	; 0x8c
   17fe4:	ldr	r0, [r0, #136]	; 0x88
   17fe8:	sub	r0, r2, r0
   17fec:	bx	lr

00017ff0 <flatcc_builder_get_buffer_start@@Base>:
   17ff0:	ldr	r0, [r0, #136]	; 0x88
   17ff4:	bx	lr

00017ff8 <flatcc_builder_get_buffer_end@@Base>:
   17ff8:	ldr	r0, [r0, #140]	; 0x8c
   17ffc:	bx	lr

00018000 <flatcc_builder_set_vtable_cache_limit@@Base>:
   18000:	str	r1, [r0, #172]	; 0xac
   18004:	bx	lr

00018008 <flatcc_builder_set_identifier@@Base>:
   18008:	ldr	r3, [pc, #16]	; 18020 <flatcc_builder_set_identifier@@Base+0x18>
   1800c:	cmp	r1, #0
   18010:	moveq	r1, r3
   18014:	ldr	r3, [r1]
   18018:	str	r3, [r0, #168]	; 0xa8
   1801c:	bx	lr
   18020:	andeq	r8, r1, r4, lsl #25

00018024 <flatcc_builder_get_type@@Base>:
   18024:	ldr	r0, [r0, #32]
   18028:	cmp	r0, #0
   1802c:	ldrhne	r0, [r0, #14]
   18030:	bx	lr

00018034 <flatcc_builder_get_type_at@@Base>:
   18034:	cmp	r1, #0
   18038:	ble	18060 <flatcc_builder_get_type_at@@Base+0x2c>
   1803c:	ldr	r3, [r0, #156]	; 0x9c
   18040:	cmp	r1, r3
   18044:	bgt	18060 <flatcc_builder_get_type_at@@Base+0x2c>
   18048:	sub	r1, r1, r3
   1804c:	ldr	r3, [r0, #32]
   18050:	add	r1, r1, r1, lsl #3
   18054:	add	r1, r3, r1, lsl #2
   18058:	ldrh	r0, [r1, #14]
   1805c:	bx	lr
   18060:	mov	r0, #0
   18064:	bx	lr

00018068 <flatcc_builder_get_direct_buffer@@Base>:
   18068:	ldr	r3, [r0, #184]	; 0xb8
   1806c:	cmp	r3, #0
   18070:	beq	18084 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   18074:	ldr	r2, [r0, #188]	; 0xbc
   18078:	ldr	r3, [r0, #192]	; 0xc0
   1807c:	cmp	r2, r3
   18080:	beq	18098 <flatcc_builder_get_direct_buffer@@Base+0x30>
   18084:	cmp	r1, #0
   18088:	movne	r0, #0
   1808c:	strne	r0, [r1]
   18090:	moveq	r0, r1
   18094:	bx	lr
   18098:	cmp	r1, #0
   1809c:	ldrne	r3, [r0, #212]	; 0xd4
   180a0:	ldr	r0, [r0, #196]	; 0xc4
   180a4:	strne	r3, [r1]
   180a8:	bx	lr

000180ac <flatcc_builder_copy_buffer@@Base>:
   180ac:	ldr	r3, [r0, #184]	; 0xb8
   180b0:	cmp	r3, #0
   180b4:	beq	180d0 <flatcc_builder_copy_buffer@@Base+0x24>
   180b8:	push	{r4, lr}
   180bc:	add	r0, r0, #188	; 0xbc
   180c0:	bl	18784 <flatcc_emitter_copy_buffer@@Base>
   180c4:	cmp	r0, #0
   180c8:	popne	{r4, pc}
   180cc:	bl	12178 <__assert_fail@plt+0xf4>
   180d0:	mov	r0, r3
   180d4:	bx	lr

000180d8 <flatcc_builder_finalize_buffer@@Base>:
   180d8:	push	{r4, r5, r6, lr}
   180dc:	cmp	r1, #0
   180e0:	ldr	r4, [r0, #140]	; 0x8c
   180e4:	ldr	r2, [r0, #136]	; 0x88
   180e8:	mov	r5, r0
   180ec:	sub	r4, r4, r2
   180f0:	strne	r4, [r1]
   180f4:	mov	r0, r4
   180f8:	bl	1200c <malloc@plt>
   180fc:	subs	r6, r0, #0
   18100:	beq	18144 <flatcc_builder_finalize_buffer@@Base+0x6c>
   18104:	ldr	r3, [r5, #184]	; 0xb8
   18108:	cmp	r3, #0
   1810c:	beq	18130 <flatcc_builder_finalize_buffer@@Base+0x58>
   18110:	mov	r2, r4
   18114:	add	r0, r5, #188	; 0xbc
   18118:	mov	r1, r6
   1811c:	bl	18784 <flatcc_emitter_copy_buffer@@Base>
   18120:	cmp	r0, #0
   18124:	beq	18158 <flatcc_builder_finalize_buffer@@Base+0x80>
   18128:	mov	r0, r6
   1812c:	pop	{r4, r5, r6, pc}
   18130:	ldr	r3, [pc, #36]	; 1815c <flatcc_builder_finalize_buffer@@Base+0x84>
   18134:	ldr	r2, [pc, #36]	; 18160 <flatcc_builder_finalize_buffer@@Base+0x88>
   18138:	ldr	r1, [pc, #36]	; 18164 <flatcc_builder_finalize_buffer@@Base+0x8c>
   1813c:	ldr	r0, [pc, #36]	; 18168 <flatcc_builder_finalize_buffer@@Base+0x90>
   18140:	bl	12084 <__assert_fail@plt>
   18144:	ldr	r3, [pc, #16]	; 1815c <flatcc_builder_finalize_buffer@@Base+0x84>
   18148:	ldr	r2, [pc, #28]	; 1816c <flatcc_builder_finalize_buffer@@Base+0x94>
   1814c:	ldr	r1, [pc, #16]	; 18164 <flatcc_builder_finalize_buffer@@Base+0x8c>
   18150:	ldr	r0, [pc, #16]	; 18168 <flatcc_builder_finalize_buffer@@Base+0x90>
   18154:	bl	12084 <__assert_fail@plt>
   18158:	bl	12178 <__assert_fail@plt+0xf4>
   1815c:	andeq	r9, r1, ip, lsl r3
   18160:	muleq	r0, ip, r7
   18164:	andeq	r9, r1, ip, lsr r3
   18168:	strdeq	r9, [r1], -ip
   1816c:	muleq	r0, r8, r7

00018170 <flatcc_builder_finalize_aligned_buffer@@Base>:
   18170:	push	{r4, r5, r6, r7, lr}
   18174:	subs	r7, r1, #0
   18178:	ldrh	r1, [r0, #128]	; 0x80
   1817c:	ldr	r4, [r0, #140]	; 0x8c
   18180:	ldr	r3, [r0, #136]	; 0x88
   18184:	sub	sp, sp, #12
   18188:	sub	r3, r4, r3
   1818c:	sub	r4, r1, #1
   18190:	strne	r3, [r7]
   18194:	add	r4, r4, r3
   18198:	mov	r5, r0
   1819c:	rsb	r3, r1, #0
   181a0:	add	r0, sp, #8
   181a4:	cmp	r1, #4
   181a8:	mov	ip, #0
   181ac:	and	r4, r4, r3
   181b0:	movcc	r1, #4
   181b4:	mov	r2, r4
   181b8:	str	ip, [r0, #-4]!
   181bc:	bl	12048 <posix_memalign@plt>
   181c0:	cmp	r0, #0
   181c4:	beq	181f4 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   181c8:	ldr	r0, [sp, #4]
   181cc:	cmp	r0, #0
   181d0:	beq	181d8 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   181d4:	bl	11fc4 <free@plt>
   181d8:	cmp	r7, #0
   181dc:	moveq	r6, r7
   181e0:	movne	r6, #0
   181e4:	strne	r6, [r7]
   181e8:	mov	r0, r6
   181ec:	add	sp, sp, #12
   181f0:	pop	{r4, r5, r6, r7, pc}
   181f4:	ldr	r6, [sp, #4]
   181f8:	cmp	r6, #0
   181fc:	beq	181d8 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   18200:	ldr	r3, [r5, #184]	; 0xb8
   18204:	cmp	r3, #0
   18208:	beq	18228 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   1820c:	mov	r2, r4
   18210:	add	r0, r5, #188	; 0xbc
   18214:	mov	r1, r6
   18218:	bl	18784 <flatcc_emitter_copy_buffer@@Base>
   1821c:	cmp	r0, #0
   18220:	bne	181e8 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   18224:	bl	12178 <__assert_fail@plt+0xf4>
   18228:	mov	r0, r6
   1822c:	b	181d4 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>

00018230 <flatcc_builder_aligned_alloc@@Base>:
   18230:	push	{r4, lr}
   18234:	sub	sp, sp, #8
   18238:	add	r3, sp, #8
   1823c:	cmp	r0, #4
   18240:	mov	r4, #0
   18244:	mov	r2, r1
   18248:	str	r4, [r3, #-4]!
   1824c:	movcs	r1, r0
   18250:	movcc	r1, #4
   18254:	mov	r0, r3
   18258:	bl	12048 <posix_memalign@plt>
   1825c:	cmp	r0, r4
   18260:	ldr	r0, [sp, #4]
   18264:	beq	18278 <flatcc_builder_aligned_alloc@@Base+0x48>
   18268:	cmp	r0, #0
   1826c:	beq	18278 <flatcc_builder_aligned_alloc@@Base+0x48>
   18270:	bl	11fc4 <free@plt>
   18274:	mov	r0, r4
   18278:	add	sp, sp, #8
   1827c:	pop	{r4, pc}

00018280 <flatcc_builder_aligned_free@@Base>:
   18280:	b	11fc4 <free@plt>

00018284 <flatcc_builder_get_emit_context@@Base>:
   18284:	ldr	r0, [r0, #36]	; 0x24
   18288:	bx	lr

0001828c <flatcc_emitter_recycle_page@@Base>:
   1828c:	ldr	r3, [r0]
   18290:	cmp	r3, r1
   18294:	beq	182dc <flatcc_emitter_recycle_page@@Base+0x50>
   18298:	ldr	r2, [r0, #4]
   1829c:	cmp	r1, r2
   182a0:	beq	182dc <flatcc_emitter_recycle_page@@Base+0x50>
   182a4:	ldr	ip, [r1, #2944]	; 0xb80
   182a8:	ldr	r2, [r1, #2948]	; 0xb84
   182ac:	push	{lr}		; (str lr, [sp, #-4]!)
   182b0:	mov	r0, #0
   182b4:	str	r2, [ip, #2948]	; 0xb84
   182b8:	ldr	r2, [r3, #2948]	; 0xb84
   182bc:	ldr	lr, [r1, #2948]	; 0xb84
   182c0:	str	ip, [lr, #2944]	; 0xb80
   182c4:	str	r3, [r1, #2944]	; 0xb80
   182c8:	str	r2, [r1, #2948]	; 0xb84
   182cc:	str	r1, [r2, #2944]	; 0xb80
   182d0:	ldr	r3, [r1, #2944]	; 0xb80
   182d4:	str	r1, [r3, #2948]	; 0xb84
   182d8:	pop	{pc}		; (ldr pc, [sp], #4)
   182dc:	mvn	r0, #0
   182e0:	bx	lr

000182e4 <flatcc_emitter_reset@@Base>:
   182e4:	ldr	r2, [r0]
   182e8:	cmp	r2, #0
   182ec:	bxeq	lr
   182f0:	ldr	r3, [r0, #32]
   182f4:	mov	r1, #1472	; 0x5c0
   182f8:	push	{r4, lr}
   182fc:	cmp	r3, #0
   18300:	str	r1, [r0, #12]
   18304:	str	r1, [r0, #20]
   18308:	ldr	r1, [r0, #24]
   1830c:	add	ip, r2, #1472	; 0x5c0
   18310:	moveq	r3, r1
   18314:	stmib	r0, {r2, ip}
   18318:	str	ip, [r0, #16]
   1831c:	add	ip, r3, r3, lsl #1
   18320:	lsr	r3, r1, #2
   18324:	add	r3, r3, ip, lsr #2
   18328:	ldr	ip, [r0, #28]
   1832c:	ldr	lr, [pc, #104]	; 1839c <flatcc_emitter_reset@@Base+0xb8>
   18330:	cmp	ip, r3, lsl #1
   18334:	mov	r1, #0
   18338:	str	lr, [r2, #2952]	; 0xb88
   1833c:	str	r3, [r0, #32]
   18340:	str	r1, [r0, #24]
   18344:	popls	{r4, pc}
   18348:	ldr	r3, [r2, #2944]	; 0xb80
   1834c:	mov	r4, r0
   18350:	cmp	r2, r3
   18354:	popeq	{r4, pc}
   18358:	ldr	r1, [r3, #2944]	; 0xb80
   1835c:	mov	r0, r3
   18360:	str	r1, [r2, #2944]	; 0xb80
   18364:	ldr	r3, [r3, #2944]	; 0xb80
   18368:	str	r2, [r3, #2948]	; 0xb84
   1836c:	bl	11fc4 <free@plt>
   18370:	ldr	r3, [r4, #28]
   18374:	ldr	r2, [r4, #32]
   18378:	sub	r3, r3, #2944	; 0xb80
   1837c:	str	r3, [r4, #28]
   18380:	cmp	r3, r2, lsl #1
   18384:	popls	{r4, pc}
   18388:	ldm	r4, {r1, r2}
   1838c:	ldr	r3, [r2, #2944]	; 0xb80
   18390:	cmp	r3, r1
   18394:	bne	18358 <flatcc_emitter_reset@@Base+0x74>
   18398:	pop	{r4, pc}
   1839c:			; <UNDEFINED> instruction: 0xfffffa40

000183a0 <flatcc_emitter_clear@@Base>:
   183a0:	ldr	r3, [r0]
   183a4:	cmp	r3, #0
   183a8:	bxeq	lr
   183ac:	ldr	r2, [r3, #2948]	; 0xb84
   183b0:	mov	r1, #0
   183b4:	push	{r4, r5, r6, lr}
   183b8:	mov	r5, r0
   183bc:	str	r1, [r2, #2944]	; 0xb80
   183c0:	ldr	r4, [r3, #2944]	; 0xb80
   183c4:	cmp	r4, r1
   183c8:	bne	183d4 <flatcc_emitter_clear@@Base+0x34>
   183cc:	b	18404 <flatcc_emitter_clear@@Base+0x64>
   183d0:	mov	r4, r3
   183d4:	ldr	r0, [r4, #2948]	; 0xb84
   183d8:	bl	11fc4 <free@plt>
   183dc:	ldr	r3, [r4, #2944]	; 0xb80
   183e0:	cmp	r3, #0
   183e4:	bne	183d0 <flatcc_emitter_clear@@Base+0x30>
   183e8:	mov	r0, r4
   183ec:	bl	11fc4 <free@plt>
   183f0:	mov	r0, r5
   183f4:	mov	r2, #36	; 0x24
   183f8:	mov	r1, #0
   183fc:	pop	{r4, r5, r6, lr}
   18400:	b	12054 <memset@plt>
   18404:	mov	r4, r3
   18408:	b	183e8 <flatcc_emitter_clear@@Base+0x48>

0001840c <flatcc_emitter@@Base>:
   1840c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18410:	sub	sp, sp, #12
   18414:	mov	r5, r0
   18418:	ldr	ip, [sp, #48]	; 0x30
   1841c:	ldr	r0, [r0, #24]
   18420:	cmp	r3, #0
   18424:	add	r0, r0, ip
   18428:	str	r0, [r5, #24]
   1842c:	blt	185f4 <flatcc_emitter@@Base+0x1e8>
   18430:	ldr	r0, [r5, #20]
   18434:	cmp	ip, r0
   18438:	bls	184c8 <flatcc_emitter@@Base+0xbc>
   1843c:	cmp	r2, #0
   18440:	addne	r7, r1, #8
   18444:	movne	r8, r2
   18448:	movne	r9, #2944	; 0xb80
   1844c:	beq	184bc <flatcc_emitter@@Base+0xb0>
   18450:	ldr	r6, [r7, #-4]
   18454:	ldr	sl, [r7, #-8]
   18458:	cmp	r6, #0
   1845c:	movne	r4, r0
   18460:	beq	184b0 <flatcc_emitter@@Base+0xa4>
   18464:	cmp	r6, r4
   18468:	bls	18510 <flatcc_emitter@@Base+0x104>
   1846c:	cmp	r4, #0
   18470:	beq	1851c <flatcc_emitter@@Base+0x110>
   18474:	sub	r6, r6, r4
   18478:	mov	r2, r4
   1847c:	mov	r1, sl
   18480:	ldr	r0, [r5, #16]
   18484:	bl	11fd0 <memcpy@plt>
   18488:	ldr	r0, [r5, #20]
   1848c:	ldr	r3, [r5, #16]
   18490:	add	sl, sl, r4
   18494:	add	r3, r3, r4
   18498:	cmp	r6, #0
   1849c:	sub	r4, r0, r4
   184a0:	str	r3, [r5, #16]
   184a4:	str	r4, [r5, #20]
   184a8:	mov	r0, r4
   184ac:	bne	18464 <flatcc_emitter@@Base+0x58>
   184b0:	subs	r8, r8, #1
   184b4:	add	r7, r7, #8
   184b8:	bne	18450 <flatcc_emitter@@Base+0x44>
   184bc:	mov	r0, #0
   184c0:	add	sp, sp, #12
   184c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184c8:	ldr	r3, [r5, #16]
   184cc:	sub	r0, r0, ip
   184d0:	add	ip, r3, ip
   184d4:	str	r0, [r5, #20]
   184d8:	str	ip, [r5, #16]
   184dc:	cmp	r2, #0
   184e0:	addne	r4, r1, #8
   184e4:	movne	r7, r2
   184e8:	beq	184bc <flatcc_emitter@@Base+0xb0>
   184ec:	ldmdb	r4, {r1, r2}
   184f0:	mov	r0, r3
   184f4:	bl	11fd0 <memcpy@plt>
   184f8:	ldr	r2, [r4, #-4]
   184fc:	subs	r7, r7, #1
   18500:	add	r4, r4, #8
   18504:	add	r3, r0, r2
   18508:	bne	184ec <flatcc_emitter@@Base+0xe0>
   1850c:	b	184bc <flatcc_emitter@@Base+0xb0>
   18510:	mov	r4, r6
   18514:	mov	r6, #0
   18518:	b	18478 <flatcc_emitter@@Base+0x6c>
   1851c:	ldr	r4, [r5, #4]
   18520:	cmp	r4, #0
   18524:	beq	18594 <flatcc_emitter@@Base+0x188>
   18528:	ldr	fp, [r4, #2944]	; 0xb80
   1852c:	ldr	r3, [r5]
   18530:	cmp	fp, r3
   18534:	beq	1855c <flatcc_emitter@@Base+0x150>
   18538:	str	fp, [r5, #4]
   1853c:	ldr	r3, [fp, #2948]	; 0xb84
   18540:	mov	r4, #2944	; 0xb80
   18544:	str	fp, [r5, #16]
   18548:	ldr	r3, [r3, #2952]	; 0xb88
   1854c:	str	r9, [r5, #20]
   18550:	add	r3, r3, r4
   18554:	str	r3, [fp, #2952]	; 0xb88
   18558:	b	18464 <flatcc_emitter@@Base+0x58>
   1855c:	ldr	r0, [pc, #540]	; 18780 <flatcc_emitter@@Base+0x374>
   18560:	bl	1200c <malloc@plt>
   18564:	cmp	r0, #0
   18568:	beq	185a4 <flatcc_emitter@@Base+0x198>
   1856c:	ldr	r3, [r5, #28]
   18570:	str	fp, [r0, #2944]	; 0xb80
   18574:	add	r3, r3, #2944	; 0xb80
   18578:	str	r4, [r0, #2948]	; 0xb84
   1857c:	str	r3, [r5, #28]
   18580:	str	r0, [fp, #2948]	; 0xb84
   18584:	str	r0, [r4, #2944]	; 0xb80
   18588:	mov	fp, r0
   1858c:	str	r0, [r5, #4]
   18590:	b	1853c <flatcc_emitter@@Base+0x130>
   18594:	ldr	r0, [pc, #484]	; 18780 <flatcc_emitter@@Base+0x374>
   18598:	bl	1200c <malloc@plt>
   1859c:	cmp	r0, #0
   185a0:	bne	185b0 <flatcc_emitter@@Base+0x1a4>
   185a4:	mvn	r0, #0
   185a8:	add	sp, sp, #12
   185ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185b0:	mov	r2, #1472	; 0x5c0
   185b4:	ldr	r3, [r5, #28]
   185b8:	str	r2, [r5, #12]
   185bc:	str	r2, [r5, #20]
   185c0:	sub	r2, r2, #2944	; 0xb80
   185c4:	str	r2, [r0, #2952]	; 0xb88
   185c8:	str	r0, [r5]
   185cc:	add	r3, r3, #2944	; 0xb80
   185d0:	str	r0, [r5, #4]
   185d4:	str	r0, [r0, #2944]	; 0xb80
   185d8:	str	r0, [r0, #2948]	; 0xb84
   185dc:	add	r0, r0, #1472	; 0x5c0
   185e0:	str	r0, [r5, #8]
   185e4:	str	r0, [r5, #16]
   185e8:	str	r3, [r5, #28]
   185ec:	mov	r4, #1472	; 0x5c0
   185f0:	b	18464 <flatcc_emitter@@Base+0x58>
   185f4:	ldr	r0, [r5, #12]
   185f8:	cmp	ip, r0
   185fc:	bls	1867c <flatcc_emitter@@Base+0x270>
   18600:	add	r6, r1, r2, lsl #3
   18604:	mov	r7, r2
   18608:	mov	r9, #2944	; 0xb80
   1860c:	mov	r8, #0
   18610:	cmp	r7, #0
   18614:	beq	184bc <flatcc_emitter@@Base+0xb0>
   18618:	ldr	r4, [r6, #-4]
   1861c:	ldr	sl, [r6, #-8]
   18620:	cmp	r4, #0
   18624:	add	sl, sl, r4
   18628:	beq	18670 <flatcc_emitter@@Base+0x264>
   1862c:	ldr	r2, [r5, #12]
   18630:	cmp	r2, r4
   18634:	bcs	18694 <flatcc_emitter@@Base+0x288>
   18638:	cmp	r2, #0
   1863c:	beq	186a4 <flatcc_emitter@@Base+0x298>
   18640:	sub	r4, r4, r2
   18644:	mov	r1, r8
   18648:	ldr	r0, [r5, #8]
   1864c:	rsb	r3, r2, #0
   18650:	add	r0, r0, r3
   18654:	add	sl, sl, r3
   18658:	str	r1, [r5, #12]
   1865c:	str	r0, [r5, #8]
   18660:	mov	r1, sl
   18664:	bl	11fd0 <memcpy@plt>
   18668:	cmp	r4, #0
   1866c:	bne	1862c <flatcc_emitter@@Base+0x220>
   18670:	sub	r6, r6, #8
   18674:	sub	r7, r7, #1
   18678:	b	18610 <flatcc_emitter@@Base+0x204>
   1867c:	ldr	r3, [r5, #8]
   18680:	sub	r0, r0, ip
   18684:	sub	r3, r3, ip
   18688:	str	r0, [r5, #12]
   1868c:	str	r3, [r5, #8]
   18690:	b	184dc <flatcc_emitter@@Base+0xd0>
   18694:	sub	r1, r2, r4
   18698:	mov	r2, r4
   1869c:	mov	r4, #0
   186a0:	b	18648 <flatcc_emitter@@Base+0x23c>
   186a4:	ldr	r3, [r5]
   186a8:	cmp	r3, #0
   186ac:	beq	18730 <flatcc_emitter@@Base+0x324>
   186b0:	ldr	fp, [r3, #2948]	; 0xb84
   186b4:	ldr	r2, [r5, #4]
   186b8:	cmp	fp, r2
   186bc:	beq	186f0 <flatcc_emitter@@Base+0x2e4>
   186c0:	ldr	r3, [r3, #2952]	; 0xb88
   186c4:	sub	r3, r3, #2944	; 0xb80
   186c8:	str	r3, [fp, #2952]	; 0xb88
   186cc:	str	fp, [r5]
   186d0:	ldr	r3, [fp, #2944]	; 0xb80
   186d4:	add	r2, fp, #2944	; 0xb80
   186d8:	str	r9, [r5, #12]
   186dc:	ldr	r3, [r3, #2952]	; 0xb88
   186e0:	str	r2, [r5, #8]
   186e4:	sub	r3, r3, #2944	; 0xb80
   186e8:	str	r3, [fp, #2952]	; 0xb88
   186ec:	b	1862c <flatcc_emitter@@Base+0x220>
   186f0:	ldr	r0, [pc, #136]	; 18780 <flatcc_emitter@@Base+0x374>
   186f4:	str	r3, [sp, #4]
   186f8:	bl	1200c <malloc@plt>
   186fc:	ldr	r3, [sp, #4]
   18700:	cmp	r0, #0
   18704:	beq	185a4 <flatcc_emitter@@Base+0x198>
   18708:	ldr	r2, [r5, #28]
   1870c:	str	fp, [r0, #2948]	; 0xb84
   18710:	add	r2, r2, #2944	; 0xb80
   18714:	str	r3, [r0, #2944]	; 0xb80
   18718:	str	r2, [r5, #28]
   1871c:	str	r0, [r3, #2948]	; 0xb84
   18720:	str	r0, [fp, #2944]	; 0xb80
   18724:	str	r0, [r5]
   18728:	mov	fp, r0
   1872c:	b	186d0 <flatcc_emitter@@Base+0x2c4>
   18730:	ldr	r0, [pc, #72]	; 18780 <flatcc_emitter@@Base+0x374>
   18734:	bl	1200c <malloc@plt>
   18738:	cmp	r0, #0
   1873c:	beq	185a4 <flatcc_emitter@@Base+0x198>
   18740:	mov	r2, #1472	; 0x5c0
   18744:	ldr	r3, [r5, #28]
   18748:	str	r2, [r5, #12]
   1874c:	str	r2, [r5, #20]
   18750:	sub	r2, r2, #2944	; 0xb80
   18754:	str	r2, [r0, #2952]	; 0xb88
   18758:	str	r0, [r5]
   1875c:	add	r3, r3, #2944	; 0xb80
   18760:	str	r0, [r5, #4]
   18764:	str	r0, [r0, #2944]	; 0xb80
   18768:	str	r0, [r0, #2948]	; 0xb84
   1876c:	add	r0, r0, #1472	; 0x5c0
   18770:	str	r0, [r5, #8]
   18774:	str	r0, [r5, #16]
   18778:	str	r3, [r5, #28]
   1877c:	b	1862c <flatcc_emitter@@Base+0x220>
   18780:	andeq	r0, r0, ip, lsl #23

00018784 <flatcc_emitter_copy_buffer@@Base>:
   18784:	ldr	ip, [r0, #24]
   18788:	cmp	ip, r2
   1878c:	bhi	18828 <flatcc_emitter_copy_buffer@@Base+0xa4>
   18790:	ldr	r2, [r0]
   18794:	cmp	r2, #0
   18798:	beq	18828 <flatcc_emitter_copy_buffer@@Base+0xa4>
   1879c:	mov	r3, r1
   187a0:	ldr	r1, [r0, #4]
   187a4:	push	{r4, r5, r6, lr}
   187a8:	cmp	r2, r1
   187ac:	mov	r5, r0
   187b0:	beq	18834 <flatcc_emitter_copy_buffer@@Base+0xb0>
   187b4:	ldr	r4, [r0, #12]
   187b8:	ldr	r1, [r5, #8]
   187bc:	rsb	r4, r4, #2944	; 0xb80
   187c0:	mov	r2, r4
   187c4:	mov	r0, r3
   187c8:	bl	11fd0 <memcpy@plt>
   187cc:	ldr	r2, [r5]
   187d0:	ldr	r1, [r5, #4]
   187d4:	add	r3, r0, r4
   187d8:	ldr	r4, [r2, #2944]	; 0xb80
   187dc:	cmp	r4, r1
   187e0:	beq	1880c <flatcc_emitter_copy_buffer@@Base+0x88>
   187e4:	mov	r6, #2944	; 0xb80
   187e8:	mov	r1, r4
   187ec:	mov	r0, r3
   187f0:	mov	r2, r6
   187f4:	bl	11fd0 <memcpy@plt>
   187f8:	ldr	r4, [r4, #2944]	; 0xb80
   187fc:	ldr	r1, [r5, #4]
   18800:	cmp	r1, r4
   18804:	add	r3, r0, #2944	; 0xb80
   18808:	bne	187e8 <flatcc_emitter_copy_buffer@@Base+0x64>
   1880c:	ldr	r2, [r5, #20]
   18810:	mov	r0, r3
   18814:	rsb	r2, r2, #2944	; 0xb80
   18818:	bl	11fd0 <memcpy@plt>
   1881c:	mov	r3, r0
   18820:	mov	r0, r3
   18824:	pop	{r4, r5, r6, pc}
   18828:	mov	r3, #0
   1882c:	mov	r0, r3
   18830:	bx	lr
   18834:	ldr	r1, [r0, #8]
   18838:	mov	r2, ip
   1883c:	mov	r0, r3
   18840:	bl	11fd0 <memcpy@plt>
   18844:	mov	r3, r0
   18848:	b	18820 <flatcc_emitter_copy_buffer@@Base+0x9c>

0001884c <__libc_csu_init@@Base>:
   1884c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18850:	mov	r7, r0
   18854:	ldr	r6, [pc, #72]	; 188a4 <__libc_csu_init@@Base+0x58>
   18858:	ldr	r5, [pc, #72]	; 188a8 <__libc_csu_init@@Base+0x5c>
   1885c:	add	r6, pc, r6
   18860:	add	r5, pc, r5
   18864:	sub	r6, r6, r5
   18868:	mov	r8, r1
   1886c:	mov	r9, r2
   18870:	bl	11f98 <printf@plt-0x20>
   18874:	asrs	r6, r6, #2
   18878:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1887c:	mov	r4, #0
   18880:	add	r4, r4, #1
   18884:	ldr	r3, [r5], #4
   18888:	mov	r2, r9
   1888c:	mov	r1, r8
   18890:	mov	r0, r7
   18894:	blx	r3
   18898:	cmp	r6, r4
   1889c:	bne	18880 <__libc_csu_init@@Base+0x34>
   188a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   188a4:	andeq	r1, r1, ip, lsr #13
   188a8:	andeq	r1, r1, r4, lsr #13

000188ac <__libc_csu_fini@@Base>:
   188ac:	bx	lr

Disassembly of section .fini:

000188b0 <.fini>:
   188b0:	push	{r3, lr}
   188b4:	pop	{r3, pc}
