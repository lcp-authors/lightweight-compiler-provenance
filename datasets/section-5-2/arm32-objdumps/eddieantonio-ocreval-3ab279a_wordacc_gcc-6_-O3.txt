
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

000109b0 <.init>:
   109b0:	push	{r3, lr}
   109b4:	bl	10c48 <__assert_fail@plt+0xd4>
   109b8:	pop	{r3, pc}

Disassembly of section .plt:

000109bc <calloc@plt-0x14>:
   109bc:	push	{lr}		; (str lr, [sp, #-4]!)
   109c0:	ldr	lr, [pc, #4]	; 109cc <calloc@plt-0x4>
   109c4:	add	lr, pc, lr
   109c8:	ldr	pc, [lr, #8]!
   109cc:	andeq	r8, r1, r4, lsr r6

000109d0 <calloc@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #24, 20	; 0x18000
   109d8:	ldr	pc, [ip, #1588]!	; 0x634

000109dc <strcmp@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #24, 20	; 0x18000
   109e4:	ldr	pc, [ip, #1580]!	; 0x62c

000109e8 <strtol@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #24, 20	; 0x18000
   109f0:	ldr	pc, [ip, #1572]!	; 0x624

000109f4 <fopen@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #24, 20	; 0x18000
   109fc:	ldr	pc, [ip, #1564]!	; 0x61c

00010a00 <free@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #24, 20	; 0x18000
   10a08:	ldr	pc, [ip, #1556]!	; 0x614

00010a0c <utf8proc_get_property@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #24, 20	; 0x18000
   10a14:	ldr	pc, [ip, #1548]!	; 0x60c

00010a18 <fgets@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #24, 20	; 0x18000
   10a20:	ldr	pc, [ip, #1540]!	; 0x604

00010a24 <utf8proc_encode_char@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #24, 20	; 0x18000
   10a2c:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a30 <strdup@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #24, 20	; 0x18000
   10a38:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a3c <rewind@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #24, 20	; 0x18000
   10a44:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a48 <unlink@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #24, 20	; 0x18000
   10a50:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a54 <utf8proc_tolower@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #24, 20	; 0x18000
   10a5c:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a60 <__xstat@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #24, 20	; 0x18000
   10a68:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a6c <fwrite@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #24, 20	; 0x18000
   10a74:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a78 <fread@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #24, 20	; 0x18000
   10a80:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a84 <utf8proc_iterate@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #24, 20	; 0x18000
   10a8c:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a90 <malloc@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #24, 20	; 0x18000
   10a98:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a9c <__libc_start_main@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #24, 20	; 0x18000
   10aa4:	ldr	pc, [ip, #1452]!	; 0x5ac

00010aa8 <__sysv_signal@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #24, 20	; 0x18000
   10ab0:	ldr	pc, [ip, #1444]!	; 0x5a4

00010ab4 <__gmon_start__@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #24, 20	; 0x18000
   10abc:	ldr	pc, [ip, #1436]!	; 0x59c

00010ac0 <getpid@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #24, 20	; 0x18000
   10ac8:	ldr	pc, [ip, #1428]!	; 0x594

00010acc <exit@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #24, 20	; 0x18000
   10ad4:	ldr	pc, [ip, #1420]!	; 0x58c

00010ad8 <utf8proc_category@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #24, 20	; 0x18000
   10ae0:	ldr	pc, [ip, #1412]!	; 0x584

00010ae4 <strlen@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #24, 20	; 0x18000
   10aec:	ldr	pc, [ip, #1404]!	; 0x57c

00010af0 <fprintf@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #24, 20	; 0x18000
   10af8:	ldr	pc, [ip, #1396]!	; 0x574

00010afc <__isoc99_sscanf@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #24, 20	; 0x18000
   10b04:	ldr	pc, [ip, #1388]!	; 0x56c

00010b08 <fclose@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #24, 20	; 0x18000
   10b10:	ldr	pc, [ip, #1380]!	; 0x564

00010b14 <utf8proc_NFC@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #24, 20	; 0x18000
   10b1c:	ldr	pc, [ip, #1372]!	; 0x55c

00010b20 <fputc@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #24, 20	; 0x18000
   10b28:	ldr	pc, [ip, #1364]!	; 0x554

00010b2c <sprintf@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #24, 20	; 0x18000
   10b34:	ldr	pc, [ip, #1356]!	; 0x54c

00010b38 <utf8proc_errmsg@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #24, 20	; 0x18000
   10b40:	ldr	pc, [ip, #1348]!	; 0x544

00010b44 <fputs@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #24, 20	; 0x18000
   10b4c:	ldr	pc, [ip, #1340]!	; 0x53c

00010b50 <strncmp@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #24, 20	; 0x18000
   10b58:	ldr	pc, [ip, #1332]!	; 0x534

00010b5c <abort@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #24, 20	; 0x18000
   10b64:	ldr	pc, [ip, #1324]!	; 0x52c

00010b68 <getc@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #24, 20	; 0x18000
   10b70:	ldr	pc, [ip, #1316]!	; 0x524

00010b74 <__assert_fail@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #24, 20	; 0x18000
   10b7c:	ldr	pc, [ip, #1308]!	; 0x51c

Disassembly of section .text:

00010b80 <error@@Base-0x2c14>:
   10b80:	push	{lr}		; (str lr, [sp, #-4]!)
   10b84:	sub	sp, sp, #12
   10b88:	add	ip, sp, #8
   10b8c:	ldr	r3, [pc, #100]	; 10bf8 <__assert_fail@plt+0x84>
   10b90:	str	r0, [ip, #-4]!
   10b94:	ldr	r2, [pc, #96]	; 10bfc <__assert_fail@plt+0x88>
   10b98:	mov	r0, ip
   10b9c:	mov	r4, r1
   10ba0:	bl	138cc <error@@Base+0x138>
   10ba4:	ldr	r3, [sp, #4]
   10ba8:	sub	r3, r3, #2
   10bac:	cmp	r3, #1
   10bb0:	bls	10bbc <__assert_fail@plt+0x48>
   10bb4:	ldr	r0, [pc, #68]	; 10c00 <__assert_fail@plt+0x8c>
   10bb8:	bl	13794 <error@@Base>
   10bbc:	ldr	r3, [pc, #64]	; 10c04 <__assert_fail@plt+0x90>
   10bc0:	ldr	r0, [r3]
   10bc4:	bl	11be8 <__assert_fail@plt+0x1074>
   10bc8:	mov	r0, r4
   10bcc:	bl	10db0 <__assert_fail@plt+0x23c>
   10bd0:	bl	1122c <__assert_fail@plt+0x6b8>
   10bd4:	bl	114c4 <__assert_fail@plt+0x950>
   10bd8:	bl	117a4 <__assert_fail@plt+0xc30>
   10bdc:	ldr	r3, [sp, #4]
   10be0:	ldr	r0, [pc, #32]	; 10c08 <__assert_fail@plt+0x94>
   10be4:	cmp	r3, #3
   10be8:	movne	r1, #0
   10bec:	ldreq	r1, [r4, #8]
   10bf0:	bl	126cc <__assert_fail@plt+0x1b58>
   10bf4:	bl	1373c <__assert_fail@plt+0x2bc8>
   10bf8:	strheq	r9, [r2], -r4
   10bfc:	ldrdeq	r4, [r1], -ip
   10c00:	andeq	r4, r1, ip, lsl r6
   10c04:	andeq	fp, r2, r8, lsr #2
   10c08:	ldrdeq	sp, [r2], -r4
   10c0c:	mov	fp, #0
   10c10:	mov	lr, #0
   10c14:	pop	{r1}		; (ldr r1, [sp], #4)
   10c18:	mov	r2, sp
   10c1c:	push	{r2}		; (str r2, [sp, #-4]!)
   10c20:	push	{r0}		; (str r0, [sp, #-4]!)
   10c24:	ldr	ip, [pc, #16]	; 10c3c <__assert_fail@plt+0xc8>
   10c28:	push	{ip}		; (str ip, [sp, #-4]!)
   10c2c:	ldr	r0, [pc, #12]	; 10c40 <__assert_fail@plt+0xcc>
   10c30:	ldr	r3, [pc, #12]	; 10c44 <__assert_fail@plt+0xd0>
   10c34:	bl	10a9c <__libc_start_main@plt>
   10c38:	bl	10b5c <abort@plt>
   10c3c:	muleq	r1, r8, r5
   10c40:	andeq	r0, r1, r0, lsl #23
   10c44:	andeq	r4, r1, r8, lsr r5
   10c48:	ldr	r3, [pc, #20]	; 10c64 <__assert_fail@plt+0xf0>
   10c4c:	ldr	r2, [pc, #20]	; 10c68 <__assert_fail@plt+0xf4>
   10c50:	add	r3, pc, r3
   10c54:	ldr	r2, [r3, r2]
   10c58:	cmp	r2, #0
   10c5c:	bxeq	lr
   10c60:	b	10ab4 <__gmon_start__@plt>
   10c64:	andeq	r8, r1, r8, lsr #7
   10c68:	muleq	r0, ip, r0
   10c6c:	ldr	r3, [pc, #28]	; 10c90 <__assert_fail@plt+0x11c>
   10c70:	ldr	r0, [pc, #28]	; 10c94 <__assert_fail@plt+0x120>
   10c74:	sub	r3, r3, r0
   10c78:	cmp	r3, #6
   10c7c:	bxls	lr
   10c80:	ldr	r3, [pc, #16]	; 10c98 <__assert_fail@plt+0x124>
   10c84:	cmp	r3, #0
   10c88:	bxeq	lr
   10c8c:	bx	r3
   10c90:	andeq	r9, r2, r3, ror #1
   10c94:	andeq	r9, r2, r0, ror #1
   10c98:	andeq	r0, r0, r0
   10c9c:	ldr	r1, [pc, #36]	; 10cc8 <__assert_fail@plt+0x154>
   10ca0:	ldr	r0, [pc, #36]	; 10ccc <__assert_fail@plt+0x158>
   10ca4:	sub	r1, r1, r0
   10ca8:	asr	r1, r1, #2
   10cac:	add	r1, r1, r1, lsr #31
   10cb0:	asrs	r1, r1, #1
   10cb4:	bxeq	lr
   10cb8:	ldr	r3, [pc, #16]	; 10cd0 <__assert_fail@plt+0x15c>
   10cbc:	cmp	r3, #0
   10cc0:	bxeq	lr
   10cc4:	bx	r3
   10cc8:	andeq	r9, r2, r0, ror #1
   10ccc:	andeq	r9, r2, r0, ror #1
   10cd0:	andeq	r0, r0, r0
   10cd4:	push	{r4, lr}
   10cd8:	ldr	r4, [pc, #24]	; 10cf8 <__assert_fail@plt+0x184>
   10cdc:	ldrb	r3, [r4]
   10ce0:	cmp	r3, #0
   10ce4:	popne	{r4, pc}
   10ce8:	bl	10c6c <__assert_fail@plt+0xf8>
   10cec:	mov	r3, #1
   10cf0:	strb	r3, [r4]
   10cf4:	pop	{r4, pc}
   10cf8:	strdeq	r9, [r2], -r0
   10cfc:	ldr	r0, [pc, #40]	; 10d2c <__assert_fail@plt+0x1b8>
   10d00:	ldr	r3, [r0]
   10d04:	cmp	r3, #0
   10d08:	bne	10d10 <__assert_fail@plt+0x19c>
   10d0c:	b	10c9c <__assert_fail@plt+0x128>
   10d10:	ldr	r3, [pc, #24]	; 10d30 <__assert_fail@plt+0x1bc>
   10d14:	cmp	r3, #0
   10d18:	beq	10d0c <__assert_fail@plt+0x198>
   10d1c:	push	{r4, lr}
   10d20:	blx	r3
   10d24:	pop	{r4, lr}
   10d28:	b	10c9c <__assert_fail@plt+0x128>
   10d2c:	andeq	r8, r2, r4, lsl #28
   10d30:	andeq	r0, r0, r0
   10d34:	push	{r4, r5, r6, r7, r8, lr}
   10d38:	mov	r4, r0
   10d3c:	ldr	r6, [pc, #100]	; 10da8 <__assert_fail@plt+0x234>
   10d40:	mov	r5, r1
   10d44:	add	r6, r6, r0, lsl #4
   10d48:	mov	r1, #4
   10d4c:	ldr	r0, [r6, #12]
   10d50:	add	r0, r0, #1
   10d54:	bl	137d0 <error@@Base+0x3c>
   10d58:	ldr	lr, [r6, #12]
   10d5c:	mov	r1, #0
   10d60:	cmp	lr, #0
   10d64:	ble	10da0 <__assert_fail@plt+0x22c>
   10d68:	ldr	r7, [pc, #60]	; 10dac <__assert_fail@plt+0x238>
   10d6c:	mov	r3, r1
   10d70:	rsb	r6, r4, #1
   10d74:	ldr	r2, [r7, r4, lsl #2]
   10d78:	add	ip, r2, r3, lsl #3
   10d7c:	ldr	r2, [r2, r3, lsl #3]
   10d80:	add	r3, r3, #1
   10d84:	add	r2, r2, r6
   10d88:	ldrb	r2, [r2, #12]
   10d8c:	cmp	r2, #0
   10d90:	strne	ip, [r0, r1, lsl #2]
   10d94:	addne	r1, r1, #1
   10d98:	cmp	r3, lr
   10d9c:	bne	10d74 <__assert_fail@plt+0x200>
   10da0:	str	r1, [r5]
   10da4:	pop	{r4, r5, r6, r7, r8, pc}
   10da8:	andeq	fp, r2, ip, lsr #2
   10dac:			; <UNDEFINED> instruction: 0x000313b4
   10db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10db4:	sub	sp, sp, #28
   10db8:	mov	r3, #1
   10dbc:	ldr	r9, [pc, #604]	; 11020 <__assert_fail@plt+0x4ac>
   10dc0:	str	r3, [sp, #16]
   10dc4:	mov	r8, r3
   10dc8:	ldr	r3, [pc, #596]	; 11024 <__assert_fail@plt+0x4b0>
   10dcc:	sub	r2, r0, #4
   10dd0:	ldr	r7, [pc, #592]	; 11028 <__assert_fail@plt+0x4b4>
   10dd4:	ldr	sl, [pc, #592]	; 1102c <__assert_fail@plt+0x4b8>
   10dd8:	str	r3, [sp, #8]
   10ddc:	mov	r6, r9
   10de0:	mov	r5, #0
   10de4:	mov	r3, r2
   10de8:	str	r2, [sp, #20]
   10dec:	str	sl, [sp, #12]
   10df0:	ldr	r1, [r3, #4]!
   10df4:	ldr	r2, [pc, #564]	; 11030 <__assert_fail@plt+0x4bc>
   10df8:	ldr	r0, [sp, #8]
   10dfc:	str	r3, [sp, #20]
   10e00:	bl	13b80 <error@@Base+0x3ec>
   10e04:	cmp	r5, #0
   10e08:	beq	10fcc <__assert_fail@plt+0x458>
   10e0c:	ldr	r4, [sp, #12]
   10e10:	ldr	r1, [sp, #8]
   10e14:	mov	r0, r4
   10e18:	bl	12b2c <__assert_fail@plt+0x1fb8>
   10e1c:	ldr	r0, [r4, #12]
   10e20:	mov	r1, #8
   10e24:	add	r0, r0, #1
   10e28:	bl	137d0 <error@@Base+0x3c>
   10e2c:	ldr	r4, [sl, r5, lsl #4]
   10e30:	cmp	r4, #0
   10e34:	str	r0, [r6]
   10e38:	beq	10e84 <__assert_fail@plt+0x310>
   10e3c:	mov	fp, #0
   10e40:	str	r5, [sp, #4]
   10e44:	mov	r5, fp
   10e48:	ldr	r1, [r4, #8]
   10e4c:	mov	r0, r7
   10e50:	bl	128d0 <__assert_fail@plt+0x1d5c>
   10e54:	subs	fp, r0, #0
   10e58:	beq	10ec4 <__assert_fail@plt+0x350>
   10e5c:	ldr	r3, [sp, #4]
   10e60:	add	r3, fp, r3
   10e64:	strb	r8, [r3, #12]
   10e68:	ldr	r4, [r4, #4]
   10e6c:	ldr	r3, [r6]
   10e70:	cmp	r4, #0
   10e74:	str	fp, [r3, r5]
   10e78:	add	r5, r5, #8
   10e7c:	bne	10e48 <__assert_fail@plt+0x2d4>
   10e80:	ldr	r5, [sp, #4]
   10e84:	ldr	r3, [sp, #16]
   10e88:	cmp	r3, #2
   10e8c:	beq	10eec <__assert_fail@plt+0x378>
   10e90:	ldr	r3, [sp, #8]
   10e94:	add	r5, r5, #1
   10e98:	add	r3, r3, #16
   10e9c:	str	r3, [sp, #8]
   10ea0:	ldr	r3, [sp, #16]
   10ea4:	add	r6, r6, #4
   10ea8:	add	r3, r3, #1
   10eac:	str	r3, [sp, #16]
   10eb0:	ldr	r3, [sp, #12]
   10eb4:	add	r3, r3, #16
   10eb8:	str	r3, [sp, #12]
   10ebc:	ldr	r3, [sp, #20]
   10ec0:	b	10df0 <__assert_fail@plt+0x27c>
   10ec4:	mov	r1, #16
   10ec8:	mov	r0, r8
   10ecc:	bl	137d0 <error@@Base+0x3c>
   10ed0:	ldr	r3, [r4, #8]
   10ed4:	mov	fp, r0
   10ed8:	mov	r1, r0
   10edc:	str	r3, [r0, #8]
   10ee0:	mov	r0, r7
   10ee4:	bl	12954 <__assert_fail@plt+0x1de0>
   10ee8:	b	10e5c <__assert_fail@plt+0x2e8>
   10eec:	ldr	r0, [sl, #12]
   10ef0:	mov	r1, #4
   10ef4:	add	r0, r0, #1
   10ef8:	bl	137d0 <error@@Base+0x3c>
   10efc:	ldr	lr, [sl, #12]
   10f00:	cmp	lr, #0
   10f04:	ble	10fb4 <__assert_fail@plt+0x440>
   10f08:	mov	r1, #0
   10f0c:	mov	r3, r1
   10f10:	ldr	r2, [r9]
   10f14:	add	ip, r2, r3, lsl #3
   10f18:	ldr	r2, [r2, r3, lsl #3]
   10f1c:	add	r3, r3, #1
   10f20:	ldrb	r2, [r2, #13]
   10f24:	cmp	r2, #0
   10f28:	strne	ip, [r0, r1, lsl #2]
   10f2c:	addne	r1, r1, #1
   10f30:	cmp	r3, lr
   10f34:	bne	10f10 <__assert_fail@plt+0x39c>
   10f38:	ldr	r2, [pc, #244]	; 11034 <__assert_fail@plt+0x4c0>
   10f3c:	ldr	r3, [pc, #244]	; 11038 <__assert_fail@plt+0x4c4>
   10f40:	cmp	r1, #65536	; 0x10000
   10f44:	str	r1, [r2]
   10f48:	str	r0, [r3]
   10f4c:	bge	11010 <__assert_fail@plt+0x49c>
   10f50:	ldr	r0, [sl, #28]
   10f54:	mov	r1, #4
   10f58:	add	r0, r0, #1
   10f5c:	bl	137d0 <error@@Base+0x3c>
   10f60:	ldr	lr, [sl, #28]
   10f64:	mov	r1, #0
   10f68:	cmp	lr, #0
   10f6c:	ble	10f9c <__assert_fail@plt+0x428>
   10f70:	mov	r3, r1
   10f74:	ldr	r2, [r9, #4]
   10f78:	add	ip, r2, r3, lsl #3
   10f7c:	ldr	r2, [r2, r3, lsl #3]
   10f80:	add	r3, r3, #1
   10f84:	ldrb	r2, [r2, #12]
   10f88:	cmp	r2, #0
   10f8c:	strne	ip, [r0, r1, lsl #2]
   10f90:	addne	r1, r1, #1
   10f94:	cmp	r3, lr
   10f98:	bne	10f74 <__assert_fail@plt+0x400>
   10f9c:	ldr	r2, [pc, #152]	; 1103c <__assert_fail@plt+0x4c8>
   10fa0:	ldr	r3, [pc, #152]	; 11040 <__assert_fail@plt+0x4cc>
   10fa4:	str	r1, [r2]
   10fa8:	str	r0, [r3]
   10fac:	add	sp, sp, #28
   10fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fb4:	ldr	r2, [pc, #120]	; 11034 <__assert_fail@plt+0x4c0>
   10fb8:	ldr	r3, [pc, #120]	; 11038 <__assert_fail@plt+0x4c4>
   10fbc:	mov	r1, #0
   10fc0:	str	r1, [r2]
   10fc4:	str	r0, [r3]
   10fc8:	b	10f50 <__assert_fail@plt+0x3dc>
   10fcc:	ldr	r3, [pc, #92]	; 11030 <__assert_fail@plt+0x4bc>
   10fd0:	ldrb	r3, [r3, #11]
   10fd4:	cmp	r3, #0
   10fd8:	bne	11018 <__assert_fail@plt+0x4a4>
   10fdc:	ldr	r4, [sp, #12]
   10fe0:	ldr	r1, [sp, #8]
   10fe4:	mov	r0, r4
   10fe8:	bl	12b2c <__assert_fail@plt+0x1fb8>
   10fec:	ldr	r0, [r4, #12]
   10ff0:	mov	r1, #8
   10ff4:	add	r0, r0, #1
   10ff8:	bl	137d0 <error@@Base+0x3c>
   10ffc:	ldr	r4, [sl]
   11000:	cmp	r4, #0
   11004:	str	r0, [r6]
   11008:	bne	10e3c <__assert_fail@plt+0x2c8>
   1100c:	b	10e90 <__assert_fail@plt+0x31c>
   11010:	ldr	r0, [pc, #44]	; 11044 <__assert_fail@plt+0x4d0>
   11014:	bl	13794 <error@@Base>
   11018:	ldr	r0, [pc, #40]	; 11048 <__assert_fail@plt+0x4d4>
   1101c:	bl	13794 <error@@Base>
   11020:			; <UNDEFINED> instruction: 0x000313b4
   11024:	andeq	fp, r2, r0, lsl #2
   11028:	andeq	fp, r2, ip, asr r1
   1102c:	andeq	fp, r2, ip, lsr #2
   11030:	andeq	r9, r2, r8, lsr #1
   11034:	andeq	r1, r3, ip, lsr #7
   11038:	andeq	r1, r3, r8, lsr #7
   1103c:	andeq	fp, r2, r4, lsr #2
   11040:	andeq	fp, r2, r0, lsr #2
   11044:	andeq	r4, r1, r4, asr #11
   11048:	andeq	r4, r1, r8, lsr #11
   1104c:	cmp	r1, #0
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	beq	110b8 <__assert_fail@plt+0x544>
   11058:	ldr	r3, [r1, #8]
   1105c:	rsb	ip, r3, #0
   11060:	cmp	ip, r0
   11064:	sublt	ip, r0, #1
   11068:	addlt	r3, r3, ip
   1106c:	ldrlt	lr, [r1, #12]
   11070:	biclt	r3, r3, #1
   11074:	movge	lr, #0
   11078:	ldrhlt	lr, [lr, r3]
   1107c:	strlt	ip, [r2]
   11080:	ldrlt	r3, [r1, #8]
   11084:	cmp	r0, r3
   11088:	bge	110b0 <__assert_fail@plt+0x53c>
   1108c:	add	ip, r0, #1
   11090:	ldr	r1, [r1, #12]
   11094:	add	r3, ip, r3
   11098:	bic	r3, r3, #1
   1109c:	ldrh	r3, [r1, r3]
   110a0:	add	r3, r3, #1
   110a4:	cmp	lr, r3
   110a8:	movle	lr, r3
   110ac:	strle	ip, [r2]
   110b0:	mov	r0, lr
   110b4:	pop	{pc}		; (ldr pc, [sp], #4)
   110b8:	mov	lr, r1
   110bc:	mov	r0, lr
   110c0:	pop	{pc}		; (ldr pc, [sp], #4)
   110c4:	ldr	r3, [r1]
   110c8:	push	{r4, r5, r6, r7, lr}
   110cc:	cmp	r3, #0
   110d0:	beq	1111c <__assert_fail@plt+0x5a8>
   110d4:	ldr	r2, [r3, #8]
   110d8:	rsb	ip, r2, #0
   110dc:	cmp	r0, ip
   110e0:	ble	111d4 <__assert_fail@plt+0x660>
   110e4:	sub	ip, r0, #1
   110e8:	ldr	lr, [r3, #12]
   110ec:	add	r3, ip, r2
   110f0:	bic	r3, r3, #1
   110f4:	cmp	r0, r2
   110f8:	ldrh	r3, [lr, r3]
   110fc:	bge	1111c <__assert_fail@plt+0x5a8>
   11100:	add	ip, r0, #1
   11104:	add	r2, ip, r2
   11108:	bic	r2, r2, #1
   1110c:	ldrh	r2, [lr, r2]
   11110:	add	r2, r2, #1
   11114:	cmp	r3, r2
   11118:	movlt	r3, r2
   1111c:	ldr	ip, [pc, #240]	; 11214 <__assert_fail@plt+0x6a0>
   11120:	add	r2, r0, r3
   11124:	ldr	r6, [ip]
   11128:	ldr	ip, [pc, #232]	; 11218 <__assert_fail@plt+0x6a4>
   1112c:	cmp	r6, r3
   11130:	ldr	r7, [ip]
   11134:	ble	1120c <__assert_fail@plt+0x698>
   11138:	cmp	r2, r7
   1113c:	bge	111b4 <__assert_fail@plt+0x640>
   11140:	ldr	lr, [pc, #212]	; 1121c <__assert_fail@plt+0x6a8>
   11144:	ldr	ip, [pc, #212]	; 11220 <__assert_fail@plt+0x6ac>
   11148:	ldr	r4, [lr]
   1114c:	ldr	ip, [ip]
   11150:	add	lr, r4, r3, lsl #2
   11154:	ldr	r4, [r4, r3, lsl #2]
   11158:	ldr	r5, [ip, r2, lsl #2]
   1115c:	add	ip, ip, r2, lsl #2
   11160:	ldr	r4, [r4]
   11164:	ldr	r5, [r5]
   11168:	cmp	r5, r4
   1116c:	beq	11194 <__assert_fail@plt+0x620>
   11170:	b	111bc <__assert_fail@plt+0x648>
   11174:	cmp	r2, r7
   11178:	beq	111fc <__assert_fail@plt+0x688>
   1117c:	ldr	r5, [lr, #4]!
   11180:	ldr	r4, [ip, #4]!
   11184:	ldr	r5, [r5]
   11188:	ldr	r4, [r4]
   1118c:	cmp	r5, r4
   11190:	bne	111bc <__assert_fail@plt+0x648>
   11194:	add	r3, r3, #1
   11198:	cmp	r3, r6
   1119c:	add	r2, r2, #1
   111a0:	bne	11174 <__assert_fail@plt+0x600>
   111a4:	ldr	ip, [pc, #120]	; 11224 <__assert_fail@plt+0x6b0>
   111a8:	mov	r3, r6
   111ac:	add	lr, r0, #1
   111b0:	str	lr, [ip]
   111b4:	cmp	r7, r2
   111b8:	beq	111fc <__assert_fail@plt+0x688>
   111bc:	ldr	r2, [r1, #8]
   111c0:	ldr	r1, [r1, #12]
   111c4:	add	r0, r0, r2
   111c8:	bic	r0, r0, #1
   111cc:	strh	r3, [r1, r0]
   111d0:	pop	{r4, r5, r6, r7, pc}
   111d4:	cmp	r0, r2
   111d8:	movge	r3, #0
   111dc:	bge	1111c <__assert_fail@plt+0x5a8>
   111e0:	add	ip, r0, #1
   111e4:	ldr	lr, [r3, #12]
   111e8:	add	r2, ip, r2
   111ec:	bic	r2, r2, #1
   111f0:	ldrh	r3, [lr, r2]
   111f4:	add	r3, r3, #1
   111f8:	b	1111c <__assert_fail@plt+0x5a8>
   111fc:	ldr	r2, [pc, #36]	; 11228 <__assert_fail@plt+0x6b4>
   11200:	sub	ip, r0, #1
   11204:	str	ip, [r2]
   11208:	b	111bc <__assert_fail@plt+0x648>
   1120c:	bne	111b4 <__assert_fail@plt+0x640>
   11210:	b	111a4 <__assert_fail@plt+0x630>
   11214:	andeq	r1, r3, ip, lsr #7
   11218:	andeq	fp, r2, r4, lsr #2
   1121c:	andeq	r1, r3, r8, lsr #7
   11220:	andeq	fp, r2, r0, lsr #2
   11224:			; <UNDEFINED> instruction: 0x000313b0
   11228:	andeq	r1, r3, r4, lsr #7
   1122c:	ldr	r3, [pc, #628]	; 114a8 <__assert_fail@plt+0x934>
   11230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11234:	sub	sp, sp, #28
   11238:	ldr	fp, [r3]
   1123c:	ldr	r3, [pc, #616]	; 114ac <__assert_fail@plt+0x938>
   11240:	rsb	sl, fp, #0
   11244:	ldr	r9, [r3]
   11248:	ldr	r3, [pc, #608]	; 114b0 <__assert_fail@plt+0x93c>
   1124c:	str	sl, [r3]
   11250:	ldr	r3, [pc, #604]	; 114b4 <__assert_fail@plt+0x940>
   11254:	str	r9, [r3]
   11258:	sub	r9, r9, fp
   1125c:	mvn	r3, #0
   11260:	cmp	r9, sl
   11264:	str	r3, [sp, #12]
   11268:	blt	11454 <__assert_fail@plt+0x8e0>
   1126c:	mov	r1, #16
   11270:	mov	r0, #1
   11274:	bl	137d0 <error@@Base+0x3c>
   11278:	ldr	r3, [sp, #12]
   1127c:	mov	r1, #2
   11280:	add	r3, r3, #1
   11284:	mov	r4, r3
   11288:	str	r3, [sp, #12]
   1128c:	add	r7, r4, #3
   11290:	str	r3, [r0, #8]
   11294:	mov	r6, r0
   11298:	add	r0, r3, #1
   1129c:	bl	137d0 <error@@Base+0x3c>
   112a0:	mov	r1, r6
   112a4:	str	r0, [r6, #12]
   112a8:	ldr	r0, [pc, #520]	; 114b8 <__assert_fail@plt+0x944>
   112ac:	bl	119d4 <__assert_fail@plt+0xe60>
   112b0:	ldr	r3, [pc, #504]	; 114b0 <__assert_fail@plt+0x93c>
   112b4:	rsb	r1, r4, #1
   112b8:	ldr	sl, [r3]
   112bc:	mov	r3, #0
   112c0:	mov	r2, r3
   112c4:	str	r3, [sp, #20]
   112c8:	ldr	r3, [pc, #472]	; 114a8 <__assert_fail@plt+0x934>
   112cc:	str	sl, [sp, #16]
   112d0:	str	r2, [sp, #4]
   112d4:	ldr	fp, [r3]
   112d8:	ldr	r3, [pc, #460]	; 114ac <__assert_fail@plt+0x938>
   112dc:	ldr	r9, [r3]
   112e0:	ldr	r3, [pc, #460]	; 114b4 <__assert_fail@plt+0x940>
   112e4:	ldr	r8, [r3]
   112e8:	ldr	r3, [pc, #460]	; 114bc <__assert_fail@plt+0x948>
   112ec:	ldr	r3, [r3]
   112f0:	str	r3, [sp, #8]
   112f4:	ldr	r3, [pc, #452]	; 114c0 <__assert_fail@plt+0x94c>
   112f8:	ldr	r3, [r3]
   112fc:	str	r3, [sp]
   11300:	b	11310 <__assert_fail@plt+0x79c>
   11304:	add	r1, r1, #2
   11308:	cmp	r1, r7
   1130c:	beq	11424 <__assert_fail@plt+0x8b0>
   11310:	sub	lr, r1, #1
   11314:	cmp	lr, sl
   11318:	blt	11304 <__assert_fail@plt+0x790>
   1131c:	cmp	lr, r8
   11320:	bgt	11304 <__assert_fail@plt+0x790>
   11324:	ldr	r3, [r6]
   11328:	cmp	r3, #0
   1132c:	beq	11374 <__assert_fail@plt+0x800>
   11330:	ldr	r2, [r3, #8]
   11334:	rsb	r0, r2, #0
   11338:	cmp	lr, r0
   1133c:	ble	1145c <__assert_fail@plt+0x8e8>
   11340:	sub	ip, r1, #2
   11344:	ldr	r0, [r3, #12]
   11348:	add	r3, ip, r2
   1134c:	bic	r3, r3, #1
   11350:	cmp	lr, r2
   11354:	ldrh	r3, [r0, r3]
   11358:	bge	11374 <__assert_fail@plt+0x800>
   1135c:	add	r2, r1, r2
   11360:	bic	r2, r2, #1
   11364:	ldrh	r2, [r0, r2]
   11368:	add	r2, r2, #1
   1136c:	cmp	r3, r2
   11370:	movlt	r3, r2
   11374:	cmp	r3, fp
   11378:	add	r2, lr, r3
   1137c:	bge	11488 <__assert_fail@plt+0x914>
   11380:	cmp	r2, r9
   11384:	bge	113fc <__assert_fail@plt+0x888>
   11388:	ldr	ip, [sp, #8]
   1138c:	ldr	r0, [sp]
   11390:	ldr	r5, [ip, r3, lsl #2]
   11394:	ldr	r0, [r0, r2, lsl #2]
   11398:	add	ip, ip, r3, lsl #2
   1139c:	ldr	r4, [r0]
   113a0:	ldr	r0, [r5]
   113a4:	cmp	r4, r0
   113a8:	ldr	r0, [sp]
   113ac:	add	r0, r0, r2, lsl #2
   113b0:	beq	113d8 <__assert_fail@plt+0x864>
   113b4:	b	11404 <__assert_fail@plt+0x890>
   113b8:	cmp	r2, r9
   113bc:	beq	11494 <__assert_fail@plt+0x920>
   113c0:	ldr	r5, [ip, #4]!
   113c4:	ldr	r4, [r0, #4]!
   113c8:	ldr	r5, [r5]
   113cc:	ldr	r4, [r4]
   113d0:	cmp	r5, r4
   113d4:	bne	11404 <__assert_fail@plt+0x890>
   113d8:	add	r3, r3, #1
   113dc:	cmp	r3, fp
   113e0:	add	r2, r2, #1
   113e4:	bne	113b8 <__assert_fail@plt+0x844>
   113e8:	mov	sl, r1
   113ec:	mov	r3, fp
   113f0:	mov	r0, #1
   113f4:	str	r1, [sp, #16]
   113f8:	str	r0, [sp, #20]
   113fc:	cmp	r2, r9
   11400:	beq	11494 <__assert_fail@plt+0x920>
   11404:	ldr	r0, [r6, #8]
   11408:	ldr	r2, [r6, #12]
   1140c:	add	lr, lr, r0
   11410:	bic	lr, lr, #1
   11414:	add	r1, r1, #2
   11418:	cmp	r1, r7
   1141c:	strh	r3, [r2, lr]
   11420:	bne	11310 <__assert_fail@plt+0x79c>
   11424:	ldr	r3, [sp, #4]
   11428:	sub	r9, r9, fp
   1142c:	cmp	r3, #0
   11430:	ldrne	r3, [pc, #124]	; 114b4 <__assert_fail@plt+0x940>
   11434:	strne	r8, [r3]
   11438:	ldr	r3, [sp, #20]
   1143c:	cmp	r3, #0
   11440:	ldrne	r3, [pc, #104]	; 114b0 <__assert_fail@plt+0x93c>
   11444:	ldrne	r2, [sp, #16]
   11448:	strne	r2, [r3]
   1144c:	cmp	r9, sl
   11450:	bge	1126c <__assert_fail@plt+0x6f8>
   11454:	add	sp, sp, #28
   11458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1145c:	cmp	lr, r2
   11460:	movge	r3, #0
   11464:	bge	11374 <__assert_fail@plt+0x800>
   11468:	add	r2, r1, r2
   1146c:	ldr	r3, [r3, #12]
   11470:	bic	r2, r2, #1
   11474:	ldrh	r3, [r3, r2]
   11478:	add	r3, r3, #1
   1147c:	cmp	r3, fp
   11480:	add	r2, lr, r3
   11484:	blt	11380 <__assert_fail@plt+0x80c>
   11488:	beq	113e8 <__assert_fail@plt+0x874>
   1148c:	cmp	r2, r9
   11490:	bne	11404 <__assert_fail@plt+0x890>
   11494:	mov	r2, #1
   11498:	sub	r8, r1, #2
   1149c:	ldr	sl, [sp, #16]
   114a0:	str	r2, [sp, #4]
   114a4:	b	11404 <__assert_fail@plt+0x890>
   114a8:	andeq	r1, r3, ip, lsr #7
   114ac:	andeq	fp, r2, r4, lsr #2
   114b0:			; <UNDEFINED> instruction: 0x000313b0
   114b4:	andeq	r1, r3, r4, lsr #7
   114b8:	andeq	fp, r2, ip, asr #2
   114bc:	andeq	r1, r3, r8, lsr #7
   114c0:	andeq	fp, r2, r0, lsr #2
   114c4:	ldr	r1, [pc, #236]	; 115b8 <__assert_fail@plt+0xa44>
   114c8:	ldr	r2, [pc, #236]	; 115bc <__assert_fail@plt+0xa48>
   114cc:	ldr	r3, [pc, #236]	; 115c0 <__assert_fail@plt+0xa4c>
   114d0:	push	{r4, r5, r6, r7, r8, r9, lr}
   114d4:	ldr	r4, [r1, #4]
   114d8:	ldr	lr, [r2]
   114dc:	ldr	r3, [r3]
   114e0:	cmp	r4, #0
   114e4:	sub	lr, lr, r3
   114e8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   114ec:	ldr	r3, [pc, #208]	; 115c4 <__assert_fail@plt+0xa50>
   114f0:	ldr	r1, [r4, #8]
   114f4:	mov	r7, #0
   114f8:	ldr	r6, [r3]
   114fc:	mov	ip, #1
   11500:	ldr	r3, [r4, #12]
   11504:	add	r1, lr, r1
   11508:	bic	r1, r1, #1
   1150c:	ldr	r4, [r4]
   11510:	ldrh	r2, [r3, r1]
   11514:	cmp	r4, #0
   11518:	mov	r3, r2
   1151c:	beq	115a4 <__assert_fail@plt+0xa30>
   11520:	ldr	r1, [r4, #8]
   11524:	rsb	r0, r1, #0
   11528:	cmp	lr, r0
   1152c:	subgt	r5, lr, #1
   11530:	addgt	r0, r1, r5
   11534:	ldrgt	r8, [r4, #12]
   11538:	bicgt	r0, r0, #1
   1153c:	movle	r0, r7
   11540:	ldrhgt	r0, [r8, r0]
   11544:	cmp	lr, r1
   11548:	bge	11570 <__assert_fail@plt+0x9fc>
   1154c:	add	lr, lr, #1
   11550:	add	r8, r1, lr
   11554:	ldr	r9, [r4, #12]
   11558:	bic	r8, r8, #1
   1155c:	ldrh	r8, [r9, r8]
   11560:	add	r8, r8, #1
   11564:	cmp	r8, r0
   11568:	movge	r5, lr
   1156c:	movge	r0, r8
   11570:	cmp	r2, r0
   11574:	ble	1159c <__assert_fail@plt+0xa28>
   11578:	add	r2, r6, r2, lsl #2
   1157c:	ldr	r1, [r2, #-4]!
   11580:	sub	r3, r3, #1
   11584:	cmp	r3, r0
   11588:	strb	ip, [r1, #4]
   1158c:	bgt	1157c <__assert_fail@plt+0xa08>
   11590:	cmp	r4, #0
   11594:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   11598:	ldr	r1, [r4, #8]
   1159c:	mov	lr, r5
   115a0:	b	11500 <__assert_fail@plt+0x98c>
   115a4:	cmp	r2, #0
   115a8:	bne	115b0 <__assert_fail@plt+0xa3c>
   115ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   115b0:	mov	r0, r7
   115b4:	b	11578 <__assert_fail@plt+0xa04>
   115b8:	andeq	fp, r2, ip, asr #2
   115bc:	andeq	fp, r2, r4, lsr #2
   115c0:	andeq	r1, r3, ip, lsr #7
   115c4:	andeq	r1, r3, r8, lsr #7
   115c8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115cc:	add	fp, r0, #4096	; 0x1000
   115d0:	mov	r7, r2
   115d4:	mov	r8, r1
   115d8:	bl	12a5c <__assert_fail@plt+0x1ee8>
   115dc:	ldr	r2, [fp, #3956]	; 0xf74
   115e0:	cmp	r2, #0
   115e4:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115e8:	cmp	r7, #0
   115ec:	movne	r5, #0
   115f0:	movne	sl, #1
   115f4:	beq	11694 <__assert_fail@plt+0xb20>
   115f8:	ldr	r2, [fp, #3952]	; 0xf70
   115fc:	ldr	r0, [pc, #248]	; 116fc <__assert_fail@plt+0xb88>
   11600:	ldr	r2, [r2, r5, lsl #2]
   11604:	ldr	r4, [r2, #12]
   11608:	ldr	r6, [r2, #16]
   1160c:	mov	r1, r4
   11610:	mov	r2, r6
   11614:	bl	12470 <__assert_fail@plt+0x18fc>
   11618:	mov	r1, r4
   1161c:	mov	r2, r6
   11620:	mov	r0, r8
   11624:	bl	12470 <__assert_fail@plt+0x18fc>
   11628:	ldr	r2, [fp, #3952]	; 0xf70
   1162c:	sub	r9, r4, r6
   11630:	clz	r9, r9
   11634:	ldr	r2, [r2, r5, lsl #2]
   11638:	lsr	r9, r9, #5
   1163c:	add	r5, r5, #1
   11640:	ldr	r0, [r2, #8]
   11644:	bl	10ae4 <strlen@plt>
   11648:	mov	r2, r6
   1164c:	mov	r1, r4
   11650:	add	r0, r8, r0, lsl #3
   11654:	bl	12470 <__assert_fail@plt+0x18fc>
   11658:	mov	r2, r9
   1165c:	mov	r1, sl
   11660:	mov	r0, r7
   11664:	bl	12470 <__assert_fail@plt+0x18fc>
   11668:	cmp	r4, #10
   1166c:	mov	r0, #88	; 0x58
   11670:	lslle	r0, r4, #3
   11674:	mov	r2, r9
   11678:	add	r0, r7, r0
   1167c:	mov	r1, sl
   11680:	bl	12470 <__assert_fail@plt+0x18fc>
   11684:	ldr	r2, [fp, #3956]	; 0xf74
   11688:	cmp	r2, r5
   1168c:	bgt	115f8 <__assert_fail@plt+0xa84>
   11690:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11694:	ldr	r6, [pc, #96]	; 116fc <__assert_fail@plt+0xb88>
   11698:	ldr	r2, [fp, #3952]	; 0xf70
   1169c:	mov	r0, r6
   116a0:	ldr	r2, [r2, r7, lsl #2]
   116a4:	ldr	r4, [r2, #12]
   116a8:	ldr	r5, [r2, #16]
   116ac:	mov	r1, r4
   116b0:	mov	r2, r5
   116b4:	bl	12470 <__assert_fail@plt+0x18fc>
   116b8:	mov	r1, r4
   116bc:	mov	r2, r5
   116c0:	mov	r0, r8
   116c4:	bl	12470 <__assert_fail@plt+0x18fc>
   116c8:	ldr	r2, [fp, #3952]	; 0xf70
   116cc:	ldr	r2, [r2, r7, lsl #2]
   116d0:	add	r7, r7, #1
   116d4:	ldr	r0, [r2, #8]
   116d8:	bl	10ae4 <strlen@plt>
   116dc:	mov	r2, r5
   116e0:	mov	r1, r4
   116e4:	add	r0, r8, r0, lsl #3
   116e8:	bl	12470 <__assert_fail@plt+0x18fc>
   116ec:	ldr	r2, [fp, #3956]	; 0xf74
   116f0:	cmp	r7, r2
   116f4:	blt	11698 <__assert_fail@plt+0xb24>
   116f8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116fc:	ldrdeq	sp, [r2], -r4
   11700:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11704:	ldr	r3, [pc, #140]	; 11798 <__assert_fail@plt+0xc24>
   11708:	ldr	r2, [r3, #12]
   1170c:	cmp	r2, #0
   11710:	ble	11794 <__assert_fail@plt+0xc20>
   11714:	ldr	fp, [pc, #128]	; 1179c <__assert_fail@plt+0xc28>
   11718:	mov	sl, #0
   1171c:	mov	r8, #1
   11720:	ldr	r5, [pc, #120]	; 117a0 <__assert_fail@plt+0xc2c>
   11724:	mov	r4, sl
   11728:	lsl	r7, sl, #3
   1172c:	add	r9, sl, #7
   11730:	mov	r6, r8
   11734:	b	11744 <__assert_fail@plt+0xbd0>
   11738:	ldr	r3, [pc, #88]	; 11798 <__assert_fail@plt+0xc24>
   1173c:	add	r4, r4, #1
   11740:	ldr	r2, [r3, #12]
   11744:	cmp	r4, r2
   11748:	mov	r0, r5
   1174c:	mov	r1, r8
   11750:	bge	11784 <__assert_fail@plt+0xc10>
   11754:	ldr	r2, [fp]
   11758:	add	r5, r5, #8
   1175c:	add	r2, r2, r7
   11760:	add	r7, r7, #8
   11764:	ldrb	r2, [r2, #4]
   11768:	and	r6, r6, r2
   1176c:	eor	r2, r6, #1
   11770:	bl	12470 <__assert_fail@plt+0x18fc>
   11774:	cmp	r4, r9
   11778:	bne	11738 <__assert_fail@plt+0xbc4>
   1177c:	ldr	r3, [pc, #20]	; 11798 <__assert_fail@plt+0xc24>
   11780:	ldr	r2, [r3, #12]
   11784:	add	sl, sl, #1
   11788:	cmp	sl, r2
   1178c:	blt	11720 <__assert_fail@plt+0xbac>
   11790:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11794:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11798:	andeq	fp, r2, ip, lsr #2
   1179c:			; <UNDEFINED> instruction: 0x000313b4
   117a0:	andeq	sp, r2, r4, ror r4
   117a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117a8:	sub	sp, sp, #12
   117ac:	ldr	r9, [pc, #412]	; 11950 <__assert_fail@plt+0xddc>
   117b0:	ldr	r3, [r9, #12]
   117b4:	cmp	r3, #0
   117b8:	ble	11824 <__assert_fail@plt+0xcb0>
   117bc:	ldr	r6, [pc, #400]	; 11954 <__assert_fail@plt+0xde0>
   117c0:	ldr	sl, [pc, #400]	; 11958 <__assert_fail@plt+0xde4>
   117c4:	ldr	r8, [pc, #400]	; 1195c <__assert_fail@plt+0xde8>
   117c8:	mov	r4, #0
   117cc:	mov	r7, #1
   117d0:	ldr	r3, [r6]
   117d4:	lsl	r5, r4, #3
   117d8:	ldr	r3, [r3, r4, lsl #3]
   117dc:	ldr	r0, [r3, #8]
   117e0:	bl	11d40 <__assert_fail@plt+0x11cc>
   117e4:	ldr	r3, [r6]
   117e8:	mov	r2, r7
   117ec:	add	r5, r3, r5
   117f0:	ldr	r1, [r3, r4, lsl #3]
   117f4:	ldrb	r3, [r5, #4]
   117f8:	clz	r3, r3
   117fc:	ldr	r1, [r1, #8]
   11800:	lsr	r3, r3, #5
   11804:	add	r4, r4, #1
   11808:	cmp	r0, #0
   1180c:	moveq	r0, sl
   11810:	movne	r0, r8
   11814:	bl	12488 <__assert_fail@plt+0x1914>
   11818:	ldr	r3, [r9, #12]
   1181c:	cmp	r3, r4
   11820:	bgt	117d0 <__assert_fail@plt+0xc5c>
   11824:	ldr	r7, [pc, #308]	; 11960 <__assert_fail@plt+0xdec>
   11828:	ldr	r0, [pc, #300]	; 1195c <__assert_fail@plt+0xde8>
   1182c:	bl	12a5c <__assert_fail@plt+0x1ee8>
   11830:	ldr	r3, [r7, #852]	; 0x354
   11834:	cmp	r3, #0
   11838:	ble	118ac <__assert_fail@plt+0xd38>
   1183c:	ldr	r8, [pc, #288]	; 11964 <__assert_fail@plt+0xdf0>
   11840:	sub	fp, r7, #8192	; 0x2000
   11844:	mov	sl, r8
   11848:	mov	r4, #0
   1184c:	ldr	r3, [r7, #848]	; 0x350
   11850:	mov	r0, fp
   11854:	ldr	r3, [r3, r4, lsl #2]
   11858:	ldr	r5, [r3, #12]
   1185c:	ldr	r6, [r3, #16]
   11860:	mov	r1, r5
   11864:	mov	r2, r6
   11868:	bl	12470 <__assert_fail@plt+0x18fc>
   1186c:	mov	r2, r6
   11870:	mov	r1, r5
   11874:	mov	r0, sl
   11878:	bl	12470 <__assert_fail@plt+0x18fc>
   1187c:	ldr	r3, [r7, #848]	; 0x350
   11880:	ldr	r3, [r3, r4, lsl #2]
   11884:	add	r4, r4, #1
   11888:	ldr	r0, [r3, #8]
   1188c:	bl	10ae4 <strlen@plt>
   11890:	mov	r2, r6
   11894:	mov	r1, r5
   11898:	add	r0, r8, r0, lsl #3
   1189c:	bl	12470 <__assert_fail@plt+0x18fc>
   118a0:	ldr	r3, [r7, #852]	; 0x354
   118a4:	cmp	r4, r3
   118a8:	blt	1184c <__assert_fail@plt+0xcd8>
   118ac:	ldr	r2, [pc, #180]	; 11968 <__assert_fail@plt+0xdf4>
   118b0:	ldr	r0, [pc, #160]	; 11958 <__assert_fail@plt+0xde4>
   118b4:	sub	r1, r2, #408	; 0x198
   118b8:	bl	115c8 <__assert_fail@plt+0xa54>
   118bc:	ldr	r2, [r9, #12]
   118c0:	cmp	r2, #0
   118c4:	ble	11948 <__assert_fail@plt+0xdd4>
   118c8:	ldr	fp, [pc, #132]	; 11954 <__assert_fail@plt+0xde0>
   118cc:	mov	r8, #1
   118d0:	mov	r3, #0
   118d4:	str	r3, [sp, #4]
   118d8:	ldr	r5, [pc, #140]	; 1196c <__assert_fail@plt+0xdf8>
   118dc:	mov	r4, r3
   118e0:	lsl	r7, r3, #3
   118e4:	add	sl, r3, #7
   118e8:	mov	r6, r8
   118ec:	b	118f8 <__assert_fail@plt+0xd84>
   118f0:	ldr	r2, [r9, #12]
   118f4:	add	r4, r4, #1
   118f8:	cmp	r4, r2
   118fc:	mov	r0, r5
   11900:	mov	r1, r8
   11904:	bge	11934 <__assert_fail@plt+0xdc0>
   11908:	ldr	r2, [fp]
   1190c:	add	r5, r5, #8
   11910:	add	r2, r2, r7
   11914:	add	r7, r7, #8
   11918:	ldrb	r2, [r2, #4]
   1191c:	and	r6, r6, r2
   11920:	eor	r2, r6, #1
   11924:	bl	12470 <__assert_fail@plt+0x18fc>
   11928:	cmp	sl, r4
   1192c:	bne	118f0 <__assert_fail@plt+0xd7c>
   11930:	ldr	r2, [r9, #12]
   11934:	ldr	r3, [sp, #4]
   11938:	add	r3, r3, #1
   1193c:	cmp	r3, r2
   11940:	str	r3, [sp, #4]
   11944:	blt	118d8 <__assert_fail@plt+0xd64>
   11948:	add	sp, sp, #12
   1194c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11950:	andeq	fp, r2, ip, lsr #2
   11954:			; <UNDEFINED> instruction: 0x000313b4
   11958:	andeq	pc, r2, ip, lsr #8
   1195c:			; <UNDEFINED> instruction: 0x0002d4b4
   11960:	ldrdeq	pc, [r2], -r4
   11964:	ldrdeq	sp, [r2], -ip
   11968:	andeq	sp, r2, ip, lsl #8
   1196c:	andeq	sp, r2, r4, ror r4
   11970:	mov	r3, #0
   11974:	str	r3, [r0, #4]
   11978:	str	r3, [r0]
   1197c:	str	r3, [r0, #8]
   11980:	str	r3, [r0, #12]
   11984:	bx	lr
   11988:	ldr	r3, [r0]
   1198c:	mov	r2, #0
   11990:	cmp	r3, r2
   11994:	push	{r4, lr}
   11998:	mov	r4, r0
   1199c:	stm	r1, {r2, r3}
   119a0:	str	r1, [r0]
   119a4:	streq	r1, [r0, #4]
   119a8:	ldr	r0, [r0, #8]
   119ac:	strne	r1, [r3]
   119b0:	cmp	r0, #0
   119b4:	beq	119c4 <__assert_fail@plt+0xe50>
   119b8:	bl	10a00 <free@plt>
   119bc:	mov	r3, #0
   119c0:	str	r3, [r4, #8]
   119c4:	ldr	r3, [r4, #12]
   119c8:	add	r3, r3, #1
   119cc:	str	r3, [r4, #12]
   119d0:	pop	{r4, pc}
   119d4:	ldr	r3, [r0, #4]
   119d8:	mov	r2, #0
   119dc:	cmp	r3, r2
   119e0:	push	{r4, lr}
   119e4:	mov	r4, r0
   119e8:	str	r3, [r1]
   119ec:	str	r2, [r1, #4]
   119f0:	streq	r1, [r0]
   119f4:	ldr	r0, [r0, #8]
   119f8:	strne	r1, [r3, #4]
   119fc:	cmp	r0, #0
   11a00:	str	r1, [r4, #4]
   11a04:	beq	11a14 <__assert_fail@plt+0xea0>
   11a08:	bl	10a00 <free@plt>
   11a0c:	mov	r3, #0
   11a10:	str	r3, [r4, #8]
   11a14:	ldr	r3, [r4, #12]
   11a18:	add	r3, r3, #1
   11a1c:	str	r3, [r4, #12]
   11a20:	pop	{r4, pc}
   11a24:	ldr	r3, [r2]
   11a28:	push	{r4, lr}
   11a2c:	cmp	r3, #0
   11a30:	str	r3, [r1]
   11a34:	str	r2, [r1, #4]
   11a38:	mov	r4, r0
   11a3c:	streq	r1, [r0]
   11a40:	ldr	r0, [r0, #8]
   11a44:	strne	r1, [r3, #4]
   11a48:	cmp	r0, #0
   11a4c:	str	r1, [r2]
   11a50:	beq	11a60 <__assert_fail@plt+0xeec>
   11a54:	bl	10a00 <free@plt>
   11a58:	mov	r3, #0
   11a5c:	str	r3, [r4, #8]
   11a60:	ldr	r3, [r4, #12]
   11a64:	add	r3, r3, #1
   11a68:	str	r3, [r4, #12]
   11a6c:	pop	{r4, pc}
   11a70:	ldr	r3, [r1, #4]
   11a74:	push	{r4, lr}
   11a78:	cmp	r3, #0
   11a7c:	stm	r2, {r1, r3}
   11a80:	mov	r4, r0
   11a84:	str	r2, [r1, #4]
   11a88:	streq	r2, [r0, #4]
   11a8c:	ldr	r0, [r0, #8]
   11a90:	strne	r2, [r3]
   11a94:	cmp	r0, #0
   11a98:	beq	11aa8 <__assert_fail@plt+0xf34>
   11a9c:	bl	10a00 <free@plt>
   11aa0:	mov	r3, #0
   11aa4:	str	r3, [r4, #8]
   11aa8:	ldr	r3, [r4, #12]
   11aac:	add	r3, r3, #1
   11ab0:	str	r3, [r4, #12]
   11ab4:	pop	{r4, pc}
   11ab8:	ldr	r3, [r1]
   11abc:	ldr	r2, [r1, #4]
   11ac0:	cmp	r3, #0
   11ac4:	push	{r4, r5, r6, lr}
   11ac8:	mov	r4, r0
   11acc:	strne	r2, [r3, #4]
   11ad0:	ldrne	r2, [r1, #4]
   11ad4:	streq	r2, [r0]
   11ad8:	cmp	r2, #0
   11adc:	streq	r3, [r0, #4]
   11ae0:	ldr	r0, [r0, #8]
   11ae4:	mov	r5, #0
   11ae8:	strne	r3, [r2]
   11aec:	cmp	r0, r5
   11af0:	str	r5, [r1, #4]
   11af4:	str	r5, [r1]
   11af8:	beq	11b04 <__assert_fail@plt+0xf90>
   11afc:	bl	10a00 <free@plt>
   11b00:	str	r5, [r4, #8]
   11b04:	ldr	r3, [r4, #12]
   11b08:	sub	r3, r3, #1
   11b0c:	str	r3, [r4, #12]
   11b10:	pop	{r4, r5, r6, pc}
   11b14:	ldr	r3, [r0, #8]
   11b18:	cmp	r3, #0
   11b1c:	bxne	lr
   11b20:	ldr	r3, [r0, #12]
   11b24:	cmp	r3, #0
   11b28:	bxeq	lr
   11b2c:	push	{r4, lr}
   11b30:	mov	r1, #4
   11b34:	mov	r4, r0
   11b38:	mov	r0, r3
   11b3c:	bl	137d0 <error@@Base+0x3c>
   11b40:	ldr	r3, [r4]
   11b44:	cmp	r3, #0
   11b48:	str	r0, [r4, #8]
   11b4c:	popeq	{r4, pc}
   11b50:	sub	r0, r0, #4
   11b54:	str	r3, [r0, #4]!
   11b58:	ldr	r3, [r3, #4]
   11b5c:	cmp	r3, #0
   11b60:	bne	11b54 <__assert_fail@plt+0xfe0>
   11b64:	pop	{r4, pc}
   11b68:	push	{r4, r5, r6, r7, r8, lr}
   11b6c:	ldr	r4, [r0]
   11b70:	cmp	r4, #0
   11b74:	popeq	{r4, r5, r6, r7, r8, pc}
   11b78:	mov	r6, r1
   11b7c:	mov	r5, r0
   11b80:	mov	r7, #0
   11b84:	ldr	r3, [r4]
   11b88:	ldr	r2, [r4, #4]
   11b8c:	cmp	r3, #0
   11b90:	strne	r2, [r3, #4]
   11b94:	ldrne	r2, [r4, #4]
   11b98:	ldr	r0, [r5, #8]
   11b9c:	streq	r2, [r5]
   11ba0:	cmp	r2, #0
   11ba4:	strne	r3, [r2]
   11ba8:	streq	r3, [r5, #4]
   11bac:	cmp	r0, #0
   11bb0:	str	r7, [r4, #4]
   11bb4:	str	r7, [r4]
   11bb8:	beq	11bc4 <__assert_fail@plt+0x1050>
   11bbc:	bl	10a00 <free@plt>
   11bc0:	str	r7, [r5, #8]
   11bc4:	ldr	r3, [r5, #12]
   11bc8:	mov	r0, r4
   11bcc:	sub	r3, r3, #1
   11bd0:	str	r3, [r5, #12]
   11bd4:	blx	r6
   11bd8:	ldr	r4, [r5]
   11bdc:	cmp	r4, #0
   11be0:	bne	11b84 <__assert_fail@plt+0x1010>
   11be4:	pop	{r4, r5, r6, r7, r8, pc}
   11be8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bec:	ldr	r9, [pc, #308]	; 11d28 <__assert_fail@plt+0x11b4>
   11bf0:	ldrb	r3, [r9]
   11bf4:	cmp	r3, #0
   11bf8:	bne	11d20 <__assert_fail@plt+0x11ac>
   11bfc:	cmp	r0, #0
   11c00:	beq	11cb0 <__assert_fail@plt+0x113c>
   11c04:	mov	r1, r0
   11c08:	ldr	r2, [pc, #284]	; 11d2c <__assert_fail@plt+0x11b8>
   11c0c:	add	r0, r9, #4
   11c10:	bl	13b80 <error@@Base+0x3ec>
   11c14:	add	r1, r9, #4
   11c18:	add	r0, r9, #20
   11c1c:	bl	12b2c <__assert_fail@plt+0x1fb8>
   11c20:	ldr	r1, [pc, #264]	; 11d30 <__assert_fail@plt+0x11bc>
   11c24:	add	r0, r9, #4
   11c28:	bl	11b68 <__assert_fail@plt+0xff4>
   11c2c:	ldr	r4, [r9, #20]
   11c30:	cmp	r4, #0
   11c34:	beq	11c78 <__assert_fail@plt+0x1104>
   11c38:	ldr	r7, [pc, #244]	; 11d34 <__assert_fail@plt+0x11c0>
   11c3c:	add	r6, r9, #36	; 0x24
   11c40:	mov	sl, #12
   11c44:	mov	r8, #1
   11c48:	ldr	r5, [r4, #8]
   11c4c:	mov	r0, r6
   11c50:	mov	r1, r5
   11c54:	bl	128d0 <__assert_fail@plt+0x1d5c>
   11c58:	cmp	r0, #0
   11c5c:	beq	11c84 <__assert_fail@plt+0x1110>
   11c60:	mov	r1, r5
   11c64:	mov	r0, r7
   11c68:	bl	13b0c <error@@Base+0x378>
   11c6c:	ldr	r4, [r4, #4]
   11c70:	cmp	r4, #0
   11c74:	bne	11c48 <__assert_fail@plt+0x10d4>
   11c78:	mov	r3, #1
   11c7c:	strb	r3, [r9]
   11c80:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c84:	mov	r1, sl
   11c88:	mov	r0, r8
   11c8c:	bl	137d0 <error@@Base+0x3c>
   11c90:	mov	r1, r0
   11c94:	str	r5, [r0, #8]
   11c98:	mov	r0, r6
   11c9c:	bl	12954 <__assert_fail@plt+0x1de0>
   11ca0:	ldr	r4, [r4, #4]
   11ca4:	cmp	r4, #0
   11ca8:	bne	11c48 <__assert_fail@plt+0x10d4>
   11cac:	b	11c78 <__assert_fail@plt+0x1104>
   11cb0:	ldr	r4, [pc, #128]	; 11d38 <__assert_fail@plt+0x11c4>
   11cb4:	ldr	r8, [pc, #120]	; 11d34 <__assert_fail@plt+0x11c0>
   11cb8:	add	r6, r9, #36	; 0x24
   11cbc:	add	r7, r4, #440	; 0x1b8
   11cc0:	mov	fp, #12
   11cc4:	mov	sl, #1
   11cc8:	ldr	r5, [r4, #4]!
   11ccc:	mov	r0, r6
   11cd0:	mov	r1, r5
   11cd4:	bl	128d0 <__assert_fail@plt+0x1d5c>
   11cd8:	cmp	r0, #0
   11cdc:	beq	11cf8 <__assert_fail@plt+0x1184>
   11ce0:	mov	r1, r5
   11ce4:	mov	r0, r8
   11ce8:	bl	13b0c <error@@Base+0x378>
   11cec:	cmp	r7, r4
   11cf0:	bne	11cc8 <__assert_fail@plt+0x1154>
   11cf4:	b	11c78 <__assert_fail@plt+0x1104>
   11cf8:	mov	r1, fp
   11cfc:	mov	r0, sl
   11d00:	bl	137d0 <error@@Base+0x3c>
   11d04:	mov	r1, r0
   11d08:	str	r5, [r0, #8]
   11d0c:	mov	r0, r6
   11d10:	bl	12954 <__assert_fail@plt+0x1de0>
   11d14:	cmp	r7, r4
   11d18:	bne	11cc8 <__assert_fail@plt+0x1154>
   11d1c:	b	11c78 <__assert_fail@plt+0x1104>
   11d20:	ldr	r0, [pc, #20]	; 11d3c <__assert_fail@plt+0x11c8>
   11d24:	bl	13794 <error@@Base>
   11d28:	strdeq	r9, [r2], -r4
   11d2c:	andeq	r9, r2, ip, asr #1
   11d30:	andeq	r0, r1, r0, lsl #20
   11d34:	andeq	r4, r1, ip, lsl #16
   11d38:	andeq	r4, r1, r0, lsr r6
   11d3c:	andeq	r4, r1, ip, ror #15
   11d40:	ldr	r3, [pc, #44]	; 11d74 <__assert_fail@plt+0x1200>
   11d44:	push	{r4, lr}
   11d48:	ldrb	r2, [r3]
   11d4c:	cmp	r2, #0
   11d50:	beq	11d6c <__assert_fail@plt+0x11f8>
   11d54:	mov	r1, r0
   11d58:	add	r0, r3, #36	; 0x24
   11d5c:	bl	128d0 <__assert_fail@plt+0x1d5c>
   11d60:	adds	r0, r0, #0
   11d64:	movne	r0, #1
   11d68:	pop	{r4, pc}
   11d6c:	ldr	r0, [pc, #4]	; 11d78 <__assert_fail@plt+0x1204>
   11d70:	bl	13794 <error@@Base>
   11d74:	strdeq	r9, [r2], -r4
   11d78:	andeq	r4, r1, r0, lsr #16
   11d7c:	andeq	r0, r0, r0
   11d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d84:	mov	r2, r0
   11d88:	sub	sp, sp, #12
   11d8c:	mov	r7, r0
   11d90:	mov	r4, r1
   11d94:	ldr	r0, [pc, #248]	; 11e94 <__assert_fail@plt+0x1320>
   11d98:	mov	r1, #99	; 0x63
   11d9c:	bl	10a18 <fgets@plt>
   11da0:	cmp	r0, #0
   11da4:	beq	11e84 <__assert_fail@plt+0x1310>
   11da8:	mov	r2, r7
   11dac:	mov	r1, #99	; 0x63
   11db0:	ldr	r0, [pc, #220]	; 11e94 <__assert_fail@plt+0x1320>
   11db4:	bl	10a18 <fgets@plt>
   11db8:	cmp	r0, #0
   11dbc:	beq	11e84 <__assert_fail@plt+0x1310>
   11dc0:	ldr	r5, [pc, #204]	; 11e94 <__assert_fail@plt+0x1320>
   11dc4:	ldr	r8, [pc, #204]	; 11e98 <__assert_fail@plt+0x1324>
   11dc8:	ldr	sl, [pc, #204]	; 11e9c <__assert_fail@plt+0x1328>
   11dcc:	mov	fp, #0
   11dd0:	add	r6, r5, #29
   11dd4:	mov	r9, #99	; 0x63
   11dd8:	mov	r2, r7
   11ddc:	mov	r1, r9
   11de0:	mov	r0, r5
   11de4:	bl	10a18 <fgets@plt>
   11de8:	add	r3, sp, #4
   11dec:	mov	r2, sp
   11df0:	mov	r1, r8
   11df4:	cmp	r0, #0
   11df8:	mov	r0, r5
   11dfc:	beq	11e0c <__assert_fail@plt+0x1298>
   11e00:	bl	10afc <__isoc99_sscanf@plt>
   11e04:	cmp	r0, #2
   11e08:	beq	11e18 <__assert_fail@plt+0x12a4>
   11e0c:	mov	r0, fp
   11e10:	add	sp, sp, #12
   11e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e18:	mov	r1, #0
   11e1c:	mov	r2, #10
   11e20:	mov	r0, r6
   11e24:	bl	109e8 <strtol@plt>
   11e28:	mov	r1, sl
   11e2c:	subs	r3, r0, #0
   11e30:	mov	r0, r6
   11e34:	beq	11e64 <__assert_fail@plt+0x12f0>
   11e38:	lsl	r3, r3, #3
   11e3c:	ldr	ip, [sp]
   11e40:	add	r0, r4, r3
   11e44:	ldr	r1, [r4, r3]
   11e48:	ldr	r2, [r0, #4]
   11e4c:	ldr	lr, [sp, #4]
   11e50:	add	r1, r1, ip
   11e54:	add	r2, r2, lr
   11e58:	str	r1, [r4, r3]
   11e5c:	str	r2, [r0, #4]
   11e60:	b	11dd8 <__assert_fail@plt+0x1264>
   11e64:	bl	109dc <strcmp@plt>
   11e68:	mov	r3, #88	; 0x58
   11e6c:	cmp	r0, #0
   11e70:	bne	11e3c <__assert_fail@plt+0x12c8>
   11e74:	ldr	fp, [sp]
   11e78:	mov	r3, r0
   11e7c:	mov	ip, fp
   11e80:	b	11e40 <__assert_fail@plt+0x12cc>
   11e84:	mov	fp, #0
   11e88:	mov	r0, fp
   11e8c:	add	sp, sp, #12
   11e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e94:	muleq	r2, r0, r0
   11e98:	andeq	r4, r1, r8, asr #21
   11e9c:	andeq	r4, r1, r0, asr #21
   11ea0:	ldr	r1, [r1, #8]
   11ea4:	ldr	r0, [r0, #8]
   11ea8:	b	135a4 <__assert_fail@plt+0x2a30>
   11eac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eb0:	mov	r2, r0
   11eb4:	ldr	r7, [pc, #252]	; 11fb8 <__assert_fail@plt+0x1444>
   11eb8:	sub	sp, sp, #20
   11ebc:	mov	r8, r0
   11ec0:	mov	r9, r1
   11ec4:	mov	r0, r7
   11ec8:	mov	r1, #99	; 0x63
   11ecc:	bl	10a18 <fgets@plt>
   11ed0:	cmp	r0, #0
   11ed4:	beq	11f30 <__assert_fail@plt+0x13bc>
   11ed8:	mov	r2, r8
   11edc:	mov	r1, #99	; 0x63
   11ee0:	mov	r0, r7
   11ee4:	bl	10a18 <fgets@plt>
   11ee8:	cmp	r0, #0
   11eec:	beq	11f30 <__assert_fail@plt+0x13bc>
   11ef0:	ldr	fp, [pc, #196]	; 11fbc <__assert_fail@plt+0x1448>
   11ef4:	mov	r4, r7
   11ef8:	add	sl, r7, #29
   11efc:	mov	r2, r8
   11f00:	mov	r1, #99	; 0x63
   11f04:	mov	r0, r4
   11f08:	bl	10a18 <fgets@plt>
   11f0c:	add	r3, sp, #12
   11f10:	add	r2, sp, #8
   11f14:	mov	r1, fp
   11f18:	cmp	r0, #0
   11f1c:	mov	r0, r4
   11f20:	beq	11f30 <__assert_fail@plt+0x13bc>
   11f24:	bl	10afc <__isoc99_sscanf@plt>
   11f28:	cmp	r0, #2
   11f2c:	beq	11f38 <__assert_fail@plt+0x13c4>
   11f30:	add	sp, sp, #20
   11f34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f38:	mov	r0, r4
   11f3c:	bl	10ae4 <strlen@plt>
   11f40:	mov	r2, #0
   11f44:	mov	r1, sl
   11f48:	ldr	r5, [sp, #8]
   11f4c:	ldr	r6, [sp, #12]
   11f50:	add	r3, r7, r0
   11f54:	mov	r0, r9
   11f58:	strb	r2, [r3, #-1]
   11f5c:	bl	128d0 <__assert_fail@plt+0x1d5c>
   11f60:	subs	r3, r0, #0
   11f64:	beq	11f84 <__assert_fail@plt+0x1410>
   11f68:	ldr	r1, [r3, #12]
   11f6c:	ldr	r2, [r3, #16]
   11f70:	add	r5, r1, r5
   11f74:	add	r6, r2, r6
   11f78:	str	r5, [r3, #12]
   11f7c:	str	r6, [r3, #16]
   11f80:	b	11efc <__assert_fail@plt+0x1388>
   11f84:	mov	r1, #20
   11f88:	mov	r0, #1
   11f8c:	bl	137d0 <error@@Base+0x3c>
   11f90:	str	r0, [sp, #4]
   11f94:	mov	r0, sl
   11f98:	bl	10a30 <strdup@plt>
   11f9c:	ldr	r3, [sp, #4]
   11fa0:	mov	r1, r3
   11fa4:	str	r0, [r3, #8]
   11fa8:	mov	r0, r9
   11fac:	bl	12954 <__assert_fail@plt+0x1de0>
   11fb0:	ldr	r3, [sp, #4]
   11fb4:	b	11f68 <__assert_fail@plt+0x13f4>
   11fb8:	muleq	r2, r0, r0
   11fbc:	andeq	r4, r1, r8, asr #21
   11fc0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fc4:	add	r7, r1, #4096	; 0x1000
   11fc8:	vpush	{d8}
   11fcc:	mov	r6, r0
   11fd0:	mov	r0, r1
   11fd4:	mov	r4, r2
   11fd8:	bl	12a5c <__assert_fail@plt+0x1ee8>
   11fdc:	ldr	r1, [r7, #3952]	; 0xf70
   11fe0:	ldr	r0, [r7, #3956]	; 0xf74
   11fe4:	ldr	r2, [pc, #332]	; 12138 <__assert_fail@plt+0x15c4>
   11fe8:	bl	14510 <error@@Base+0xd7c>
   11fec:	mov	r2, r4
   11ff0:	ldr	r1, [pc, #324]	; 1213c <__assert_fail@plt+0x15c8>
   11ff4:	mov	r0, r6
   11ff8:	bl	10af0 <fprintf@plt>
   11ffc:	mov	r3, r6
   12000:	mov	r2, #26
   12004:	mov	r1, #1
   12008:	ldr	r0, [pc, #304]	; 12140 <__assert_fail@plt+0x15cc>
   1200c:	bl	10a6c <fwrite@plt>
   12010:	mov	r3, r6
   12014:	mov	r2, #3
   12018:	mov	r1, #1
   1201c:	ldr	r0, [pc, #288]	; 12144 <__assert_fail@plt+0x15d0>
   12020:	bl	10a6c <fwrite@plt>
   12024:	mov	r1, r6
   12028:	mov	r0, #10
   1202c:	bl	10b20 <fputc@plt>
   12030:	ldr	r3, [r7, #3956]	; 0xf74
   12034:	cmp	r3, #0
   12038:	ble	12124 <__assert_fail@plt+0x15b0>
   1203c:	vldr	d8, [pc, #236]	; 12130 <__assert_fail@plt+0x15bc>
   12040:	ldr	sl, [pc, #256]	; 12148 <__assert_fail@plt+0x15d4>
   12044:	ldr	fp, [pc, #256]	; 1214c <__assert_fail@plt+0x15d8>
   12048:	ldr	r9, [pc, #244]	; 12144 <__assert_fail@plt+0x15d0>
   1204c:	mov	r4, #0
   12050:	b	120b8 <__assert_fail@plt+0x1544>
   12054:	ldr	r2, [r5, #16]
   12058:	vmov	s15, r3
   1205c:	sub	r3, r3, r2
   12060:	vmov	s14, r3
   12064:	vcvt.f64.s32	d6, s15
   12068:	vcvt.f64.s32	d7, s14
   1206c:	vmul.f64	d7, d7, d8
   12070:	vdiv.f64	d5, d7, d6
   12074:	vmov	r2, r3, d5
   12078:	bl	10af0 <fprintf@plt>
   1207c:	mov	r3, r6
   12080:	mov	r2, #3
   12084:	mov	r1, #1
   12088:	mov	r0, r9
   1208c:	bl	10a6c <fwrite@plt>
   12090:	ldr	r3, [r7, #3952]	; 0xf70
   12094:	ldr	r1, [pc, #180]	; 12150 <__assert_fail@plt+0x15dc>
   12098:	mov	r0, r6
   1209c:	ldr	r3, [r3, r8]
   120a0:	add	r4, r4, #1
   120a4:	ldr	r2, [r3, #8]
   120a8:	bl	10af0 <fprintf@plt>
   120ac:	ldr	r3, [r7, #3956]	; 0xf74
   120b0:	cmp	r3, r4
   120b4:	ble	12124 <__assert_fail@plt+0x15b0>
   120b8:	ldr	r3, [r7, #3952]	; 0xf70
   120bc:	mov	r1, sl
   120c0:	mov	r0, r6
   120c4:	ldr	r5, [r3, r4, lsl #2]
   120c8:	lsl	r8, r4, #2
   120cc:	cmn	r5, #12
   120d0:	beq	1210c <__assert_fail@plt+0x1598>
   120d4:	ldr	r3, [r5, #16]
   120d8:	ldr	r2, [r5, #12]
   120dc:	bl	10af0 <fprintf@plt>
   120e0:	ldr	r3, [r5, #12]
   120e4:	mov	r1, fp
   120e8:	cmp	r3, #0
   120ec:	mov	r0, r6
   120f0:	bne	12054 <__assert_fail@plt+0x14e0>
   120f4:	mov	r3, r6
   120f8:	mov	r2, #8
   120fc:	mov	r1, #1
   12100:	ldr	r0, [pc, #76]	; 12154 <__assert_fail@plt+0x15e0>
   12104:	bl	10a6c <fwrite@plt>
   12108:	b	1207c <__assert_fail@plt+0x1508>
   1210c:	mov	r3, r6
   12110:	mov	r2, #26
   12114:	mov	r1, #1
   12118:	ldr	r0, [pc, #32]	; 12140 <__assert_fail@plt+0x15cc>
   1211c:	bl	10a6c <fwrite@plt>
   12120:	b	1207c <__assert_fail@plt+0x1508>
   12124:	vpop	{d8}
   12128:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1212c:	nop			; (mov r0, r0)
   12130:	andeq	r0, r0, r0
   12134:	subsmi	r0, r9, r0
   12138:	andeq	r1, r1, r0, lsr #29
   1213c:	ldrdeq	r4, [r1], -r0
   12140:	ldrdeq	r4, [r1], -r8
   12144:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12148:	strdeq	r4, [r1], -r8
   1214c:	andeq	r4, r1, r0, lsl fp
   12150:	andeq	r7, r1, r0, asr #31
   12154:	andeq	r4, r1, r4, lsl #22
   12158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1215c:	vpush	{d8}
   12160:	mov	r8, r2
   12164:	mov	r2, r3
   12168:	mov	r5, r0
   1216c:	sub	sp, sp, #12
   12170:	mov	r6, r1
   12174:	ldrb	r3, [sp, #56]	; 0x38
   12178:	ldr	r1, [pc, #704]	; 12440 <__assert_fail@plt+0x18cc>
   1217c:	mov	r4, r3
   12180:	str	r3, [sp, #4]
   12184:	ldrb	r3, [sp, #60]	; 0x3c
   12188:	str	r3, [sp]
   1218c:	bl	10af0 <fprintf@plt>
   12190:	mov	r3, r5
   12194:	mov	r2, #26
   12198:	mov	r1, #1
   1219c:	ldr	r0, [pc, #672]	; 12444 <__assert_fail@plt+0x18d0>
   121a0:	bl	10a6c <fwrite@plt>
   121a4:	mov	r3, r5
   121a8:	mov	r2, #3
   121ac:	mov	r1, #1
   121b0:	ldr	r0, [pc, #656]	; 12448 <__assert_fail@plt+0x18d4>
   121b4:	bl	10a6c <fwrite@plt>
   121b8:	cmp	r4, #0
   121bc:	beq	12344 <__assert_fail@plt+0x17d0>
   121c0:	ldr	r2, [pc, #644]	; 1244c <__assert_fail@plt+0x18d8>
   121c4:	ldr	r1, [pc, #644]	; 12450 <__assert_fail@plt+0x18dc>
   121c8:	mov	r0, r5
   121cc:	bl	10af0 <fprintf@plt>
   121d0:	cmp	r8, #0
   121d4:	ble	122a4 <__assert_fail@plt+0x1730>
   121d8:	vldr	d8, [pc, #600]	; 12438 <__assert_fail@plt+0x18c4>
   121dc:	ldr	r9, [pc, #624]	; 12454 <__assert_fail@plt+0x18e0>
   121e0:	ldr	fp, [pc, #608]	; 12448 <__assert_fail@plt+0x18d4>
   121e4:	ldr	sl, [pc, #620]	; 12458 <__assert_fail@plt+0x18e4>
   121e8:	mov	r4, #1
   121ec:	b	1224c <__assert_fail@plt+0x16d8>
   121f0:	ldr	r2, [r7, #4]
   121f4:	vmov	s15, r3
   121f8:	sub	r3, r3, r2
   121fc:	vmov	s14, r3
   12200:	vcvt.f64.s32	d6, s15
   12204:	vcvt.f64.s32	d7, s14
   12208:	vmul.f64	d7, d7, d8
   1220c:	vdiv.f64	d5, d7, d6
   12210:	vmov	r2, r3, d5
   12214:	bl	10af0 <fprintf@plt>
   12218:	mov	r2, #3
   1221c:	mov	r1, #1
   12220:	mov	r3, r5
   12224:	mov	r0, fp
   12228:	bl	10a6c <fwrite@plt>
   1222c:	mov	r2, r4
   12230:	mov	r1, sl
   12234:	mov	r0, r5
   12238:	bl	10af0 <fprintf@plt>
   1223c:	add	r4, r4, #1
   12240:	sxth	r4, r4
   12244:	cmp	r8, r4
   12248:	blt	12298 <__assert_fail@plt+0x1724>
   1224c:	ldr	r3, [r6, r4, lsl #3]
   12250:	mov	r1, r9
   12254:	subs	r2, r3, #0
   12258:	mov	r0, r5
   1225c:	add	r7, r6, r4, lsl #3
   12260:	ble	1223c <__assert_fail@plt+0x16c8>
   12264:	ldr	r3, [r7, #4]
   12268:	bl	10af0 <fprintf@plt>
   1226c:	ldr	r3, [r6, r4, lsl #3]
   12270:	ldr	r1, [pc, #484]	; 1245c <__assert_fail@plt+0x18e8>
   12274:	cmp	r3, #0
   12278:	mov	r0, r5
   1227c:	bne	121f0 <__assert_fail@plt+0x167c>
   12280:	mov	r3, r5
   12284:	mov	r2, #8
   12288:	mov	r1, #1
   1228c:	ldr	r0, [pc, #460]	; 12460 <__assert_fail@plt+0x18ec>
   12290:	bl	10a6c <fwrite@plt>
   12294:	b	12218 <__assert_fail@plt+0x16a4>
   12298:	ldr	r3, [sp, #4]
   1229c:	cmp	r3, #0
   122a0:	beq	1232c <__assert_fail@plt+0x17b8>
   122a4:	add	r4, r8, #1
   122a8:	ldr	r2, [r6, r4, lsl #3]
   122ac:	add	r7, r6, r4, lsl #3
   122b0:	cmp	r2, #0
   122b4:	ble	1232c <__assert_fail@plt+0x17b8>
   122b8:	ldr	r3, [r7, #4]
   122bc:	ldr	r1, [pc, #400]	; 12454 <__assert_fail@plt+0x18e0>
   122c0:	mov	r0, r5
   122c4:	bl	10af0 <fprintf@plt>
   122c8:	ldr	r2, [r6, r4, lsl #3]
   122cc:	cmp	r2, #0
   122d0:	beq	12404 <__assert_fail@plt+0x1890>
   122d4:	ldr	r3, [r7, #4]
   122d8:	vmov	s15, r2
   122dc:	sub	r3, r2, r3
   122e0:	vldr	d5, [pc, #336]	; 12438 <__assert_fail@plt+0x18c4>
   122e4:	vmov	s14, r3
   122e8:	vcvt.f64.s32	d6, s15
   122ec:	ldr	r1, [pc, #360]	; 1245c <__assert_fail@plt+0x18e8>
   122f0:	mov	r0, r5
   122f4:	vcvt.f64.s32	d7, s14
   122f8:	vmul.f64	d7, d7, d5
   122fc:	vdiv.f64	d5, d7, d6
   12300:	vmov	r2, r3, d5
   12304:	bl	10af0 <fprintf@plt>
   12308:	mov	r2, #3
   1230c:	mov	r1, #1
   12310:	mov	r3, r5
   12314:	ldr	r0, [pc, #300]	; 12448 <__assert_fail@plt+0x18d4>
   12318:	bl	10a6c <fwrite@plt>
   1231c:	mov	r2, r8
   12320:	ldr	r1, [pc, #316]	; 12464 <__assert_fail@plt+0x18f0>
   12324:	mov	r0, r5
   12328:	bl	10af0 <fprintf@plt>
   1232c:	ldr	r3, [sp]
   12330:	cmp	r3, #0
   12334:	bne	12360 <__assert_fail@plt+0x17ec>
   12338:	add	sp, sp, #12
   1233c:	vpop	{d8}
   12340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12344:	ldr	r2, [pc, #284]	; 12468 <__assert_fail@plt+0x18f4>
   12348:	ldr	r1, [pc, #256]	; 12450 <__assert_fail@plt+0x18dc>
   1234c:	mov	r0, r5
   12350:	bl	10af0 <fprintf@plt>
   12354:	cmp	r8, #0
   12358:	bgt	121d8 <__assert_fail@plt+0x1664>
   1235c:	b	1232c <__assert_fail@plt+0x17b8>
   12360:	cmp	r6, #0
   12364:	beq	1241c <__assert_fail@plt+0x18a8>
   12368:	ldm	r6, {r2, r3}
   1236c:	ldr	r1, [pc, #224]	; 12454 <__assert_fail@plt+0x18e0>
   12370:	mov	r0, r5
   12374:	bl	10af0 <fprintf@plt>
   12378:	ldr	r2, [r6]
   1237c:	cmp	r2, #0
   12380:	beq	123ec <__assert_fail@plt+0x1878>
   12384:	ldr	r3, [r6, #4]
   12388:	vmov	s15, r2
   1238c:	sub	r3, r2, r3
   12390:	vldr	d5, [pc, #160]	; 12438 <__assert_fail@plt+0x18c4>
   12394:	vmov	s14, r3
   12398:	vcvt.f64.s32	d6, s15
   1239c:	ldr	r1, [pc, #184]	; 1245c <__assert_fail@plt+0x18e8>
   123a0:	mov	r0, r5
   123a4:	vcvt.f64.s32	d7, s14
   123a8:	vmul.f64	d7, d7, d5
   123ac:	vdiv.f64	d5, d7, d6
   123b0:	vmov	r2, r3, d5
   123b4:	bl	10af0 <fprintf@plt>
   123b8:	mov	r3, r5
   123bc:	mov	r2, #3
   123c0:	mov	r1, #1
   123c4:	ldr	r0, [pc, #124]	; 12448 <__assert_fail@plt+0x18d4>
   123c8:	bl	10a6c <fwrite@plt>
   123cc:	mov	r3, r5
   123d0:	mov	r2, #7
   123d4:	mov	r1, #1
   123d8:	ldr	r0, [pc, #140]	; 1246c <__assert_fail@plt+0x18f8>
   123dc:	add	sp, sp, #12
   123e0:	vpop	{d8}
   123e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123e8:	b	10a6c <fwrite@plt>
   123ec:	mov	r3, r5
   123f0:	mov	r2, #8
   123f4:	mov	r1, #1
   123f8:	ldr	r0, [pc, #96]	; 12460 <__assert_fail@plt+0x18ec>
   123fc:	bl	10a6c <fwrite@plt>
   12400:	b	123b8 <__assert_fail@plt+0x1844>
   12404:	mov	r3, r5
   12408:	mov	r2, #8
   1240c:	mov	r1, #1
   12410:	ldr	r0, [pc, #72]	; 12460 <__assert_fail@plt+0x18ec>
   12414:	bl	10a6c <fwrite@plt>
   12418:	b	12308 <__assert_fail@plt+0x1794>
   1241c:	mov	r3, r5
   12420:	mov	r2, #26
   12424:	mov	r1, #1
   12428:	ldr	r0, [pc, #20]	; 12444 <__assert_fail@plt+0x18d0>
   1242c:	bl	10a6c <fwrite@plt>
   12430:	b	123b8 <__assert_fail@plt+0x1844>
   12434:	nop			; (mov r0, r0)
   12438:	andeq	r0, r0, r0
   1243c:	subsmi	r0, r9, r0
   12440:	ldrdeq	r4, [r1], -r0
   12444:	ldrdeq	r4, [r1], -r8
   12448:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1244c:	andeq	r4, r1, r8, lsr fp
   12450:	andeq	r7, r1, r0, asr #31
   12454:	strdeq	r4, [r1], -r8
   12458:	andeq	r4, r1, r8, lsl fp
   1245c:	andeq	r4, r1, r0, lsl fp
   12460:	andeq	r4, r1, r4, lsl #22
   12464:	andeq	r4, r1, r4, lsr #22
   12468:	andeq	r4, r1, r0, lsr fp
   1246c:	andeq	r4, r1, r0, asr #21
   12470:	ldr	ip, [r0]
   12474:	ldr	r3, [r0, #4]
   12478:	add	r1, ip, r1
   1247c:	add	r2, r3, r2
   12480:	stm	r0, {r1, r2}
   12484:	bx	lr
   12488:	push	{r4, r5, r6, r7, r8, lr}
   1248c:	mov	r6, r2
   12490:	mov	r5, r3
   12494:	mov	r7, r0
   12498:	mov	r8, r1
   1249c:	bl	128d0 <__assert_fail@plt+0x1d5c>
   124a0:	subs	r4, r0, #0
   124a4:	beq	124c4 <__assert_fail@plt+0x1950>
   124a8:	ldr	r0, [r4, #12]
   124ac:	ldr	r1, [r4, #16]
   124b0:	add	r2, r0, r6
   124b4:	add	r3, r1, r5
   124b8:	str	r2, [r4, #12]
   124bc:	str	r3, [r4, #16]
   124c0:	pop	{r4, r5, r6, r7, r8, pc}
   124c4:	mov	r1, #20
   124c8:	mov	r0, #1
   124cc:	bl	137d0 <error@@Base+0x3c>
   124d0:	mov	r4, r0
   124d4:	mov	r0, r8
   124d8:	bl	10a30 <strdup@plt>
   124dc:	mov	r1, r4
   124e0:	str	r0, [r4, #8]
   124e4:	mov	r0, r7
   124e8:	bl	12954 <__assert_fail@plt+0x1de0>
   124ec:	b	124a8 <__assert_fail@plt+0x1934>
   124f0:	push	{r4, r5, r6, r7, lr}
   124f4:	mov	r6, r1
   124f8:	sub	sp, sp, #12
   124fc:	ldr	r1, [pc, #428]	; 126b0 <__assert_fail@plt+0x1b3c>
   12500:	mov	r5, r0
   12504:	mov	r0, r6
   12508:	bl	13864 <error@@Base+0xd0>
   1250c:	mov	r1, #99	; 0x63
   12510:	mov	r2, r0
   12514:	mov	r4, r0
   12518:	ldr	r0, [pc, #404]	; 126b4 <__assert_fail@plt+0x1b40>
   1251c:	bl	10a18 <fgets@plt>
   12520:	cmp	r0, #0
   12524:	beq	1259c <__assert_fail@plt+0x1a28>
   12528:	mov	r2, #45	; 0x2d
   1252c:	ldr	r1, [pc, #388]	; 126b8 <__assert_fail@plt+0x1b44>
   12530:	ldr	r0, [pc, #380]	; 126b4 <__assert_fail@plt+0x1b40>
   12534:	bl	10b50 <strncmp@plt>
   12538:	cmp	r0, #0
   1253c:	bne	1259c <__assert_fail@plt+0x1a28>
   12540:	mov	r2, r4
   12544:	mov	r1, #99	; 0x63
   12548:	ldr	r0, [pc, #356]	; 126b4 <__assert_fail@plt+0x1b40>
   1254c:	bl	10a18 <fgets@plt>
   12550:	cmp	r0, #0
   12554:	beq	1259c <__assert_fail@plt+0x1a28>
   12558:	ldr	r1, [pc, #348]	; 126bc <__assert_fail@plt+0x1b48>
   1255c:	ldr	r0, [pc, #336]	; 126b4 <__assert_fail@plt+0x1b40>
   12560:	bl	109dc <strcmp@plt>
   12564:	cmp	r0, #0
   12568:	bne	1259c <__assert_fail@plt+0x1a28>
   1256c:	mov	r2, r4
   12570:	mov	r1, #99	; 0x63
   12574:	ldr	r0, [pc, #312]	; 126b4 <__assert_fail@plt+0x1b40>
   12578:	bl	10a18 <fgets@plt>
   1257c:	cmp	r0, #0
   12580:	beq	1259c <__assert_fail@plt+0x1a28>
   12584:	mov	r2, sp
   12588:	ldr	r1, [pc, #304]	; 126c0 <__assert_fail@plt+0x1b4c>
   1258c:	ldr	r0, [pc, #288]	; 126b4 <__assert_fail@plt+0x1b40>
   12590:	bl	10afc <__isoc99_sscanf@plt>
   12594:	cmp	r0, #1
   12598:	beq	125b0 <__assert_fail@plt+0x1a3c>
   1259c:	cmp	r6, #0
   125a0:	ldr	r1, [pc, #284]	; 126c4 <__assert_fail@plt+0x1b50>
   125a4:	ldr	r0, [pc, #284]	; 126c8 <__assert_fail@plt+0x1b54>
   125a8:	movne	r1, r6
   125ac:	bl	1381c <error@@Base+0x88>
   125b0:	mov	r2, r4
   125b4:	mov	r1, #99	; 0x63
   125b8:	ldr	r0, [pc, #244]	; 126b4 <__assert_fail@plt+0x1b40>
   125bc:	bl	10a18 <fgets@plt>
   125c0:	cmp	r0, #0
   125c4:	beq	1259c <__assert_fail@plt+0x1a28>
   125c8:	add	r2, sp, #4
   125cc:	ldr	r1, [pc, #236]	; 126c0 <__assert_fail@plt+0x1b4c>
   125d0:	ldr	r0, [pc, #220]	; 126b4 <__assert_fail@plt+0x1b40>
   125d4:	bl	10afc <__isoc99_sscanf@plt>
   125d8:	cmp	r0, #1
   125dc:	bne	1259c <__assert_fail@plt+0x1a28>
   125e0:	mov	r2, r4
   125e4:	mov	r1, #99	; 0x63
   125e8:	ldr	r0, [pc, #196]	; 126b4 <__assert_fail@plt+0x1b40>
   125ec:	bl	10a18 <fgets@plt>
   125f0:	cmp	r0, #0
   125f4:	beq	1259c <__assert_fail@plt+0x1a28>
   125f8:	mov	r2, r4
   125fc:	mov	r1, #99	; 0x63
   12600:	ldr	r0, [pc, #172]	; 126b4 <__assert_fail@plt+0x1b40>
   12604:	bl	10a18 <fgets@plt>
   12608:	cmp	r0, #0
   1260c:	beq	1259c <__assert_fail@plt+0x1a28>
   12610:	ldr	r0, [sp, #4]
   12614:	ldr	r2, [r5, #4]
   12618:	ldr	r3, [r5]
   1261c:	ldr	r1, [sp]
   12620:	add	r2, r2, r0
   12624:	add	r3, r3, r1
   12628:	str	r3, [r5]
   1262c:	str	r2, [r5, #4]
   12630:	add	r1, r5, #8
   12634:	mov	r0, r4
   12638:	bl	11d80 <__assert_fail@plt+0x120c>
   1263c:	add	r1, r5, #416	; 0x1a0
   12640:	mov	r7, r0
   12644:	mov	r0, r4
   12648:	bl	11d80 <__assert_fail@plt+0x120c>
   1264c:	add	r1, r5, #824	; 0x338
   12650:	mov	r6, r0
   12654:	mov	r0, r4
   12658:	bl	11d80 <__assert_fail@plt+0x120c>
   1265c:	ldr	r3, [sp]
   12660:	cmp	r3, #0
   12664:	ble	126a0 <__assert_fail@plt+0x1b2c>
   12668:	add	r1, r5, #920	; 0x398
   1266c:	mov	r0, r4
   12670:	bl	11d80 <__assert_fail@plt+0x120c>
   12674:	cmp	r7, #0
   12678:	ble	12688 <__assert_fail@plt+0x1b14>
   1267c:	add	r1, r5, #992	; 0x3e0
   12680:	mov	r0, r4
   12684:	bl	11eac <__assert_fail@plt+0x1338>
   12688:	cmp	r6, #0
   1268c:	ble	126a0 <__assert_fail@plt+0x1b2c>
   12690:	add	r1, r5, #9024	; 0x2340
   12694:	add	r1, r1, #24
   12698:	mov	r0, r4
   1269c:	bl	11eac <__assert_fail@plt+0x1338>
   126a0:	mov	r0, r4
   126a4:	bl	13638 <__assert_fail@plt+0x2ac4>
   126a8:	add	sp, sp, #12
   126ac:	pop	{r4, r5, r6, r7, pc}
   126b0:			; <UNDEFINED> instruction: 0x000149b0
   126b4:	muleq	r2, r0, r0
   126b8:	andeq	r4, r1, r8, asr #22
   126bc:	strheq	r8, [r1], -r4
   126c0:	andeq	r4, r1, ip, asr #21
   126c4:	andeq	r4, r1, r0, asr #22
   126c8:	andeq	r4, r1, r8, ror fp
   126cc:	mov	r3, r1
   126d0:	push	{r4, r5, r6, r7, lr}
   126d4:	mov	r4, r0
   126d8:	sub	sp, sp, #12
   126dc:	ldr	r1, [pc, #380]	; 12860 <__assert_fail@plt+0x1cec>
   126e0:	mov	r0, r3
   126e4:	bl	13864 <error@@Base+0xd0>
   126e8:	ldr	r3, [pc, #372]	; 12864 <__assert_fail@plt+0x1cf0>
   126ec:	ldr	r2, [pc, #372]	; 12868 <__assert_fail@plt+0x1cf4>
   126f0:	ldr	r1, [pc, #372]	; 1286c <__assert_fail@plt+0x1cf8>
   126f4:	mov	r5, r0
   126f8:	bl	10af0 <fprintf@plt>
   126fc:	ldr	r2, [r4]
   12700:	ldr	r1, [pc, #360]	; 12870 <__assert_fail@plt+0x1cfc>
   12704:	mov	r0, r5
   12708:	bl	10af0 <fprintf@plt>
   1270c:	ldr	r2, [r4, #4]
   12710:	mov	r0, r5
   12714:	ldr	r1, [pc, #344]	; 12874 <__assert_fail@plt+0x1d00>
   12718:	bl	10af0 <fprintf@plt>
   1271c:	ldr	r2, [r4]
   12720:	cmp	r2, #0
   12724:	beq	12840 <__assert_fail@plt+0x1ccc>
   12728:	ldr	r3, [r4, #4]
   1272c:	vmov	s15, r2
   12730:	sub	r3, r2, r3
   12734:	vldr	d5, [pc, #284]	; 12858 <__assert_fail@plt+0x1ce4>
   12738:	vmov	s14, r3
   1273c:	vcvt.f64.s32	d6, s15
   12740:	ldr	r1, [pc, #304]	; 12878 <__assert_fail@plt+0x1d04>
   12744:	mov	r0, r5
   12748:	vcvt.f64.s32	d7, s14
   1274c:	vmul.f64	d7, d7, d5
   12750:	vdiv.f64	d5, d7, d6
   12754:	vmov	r2, r3, d5
   12758:	bl	10af0 <fprintf@plt>
   1275c:	mov	r1, #1
   12760:	mov	r6, r1
   12764:	mov	r7, #0
   12768:	mov	r3, r5
   1276c:	mov	r2, #12
   12770:	ldr	r0, [pc, #260]	; 1287c <__assert_fail@plt+0x1d08>
   12774:	bl	10a6c <fwrite@plt>
   12778:	ldr	r3, [pc, #256]	; 12880 <__assert_fail@plt+0x1d0c>
   1277c:	mov	r2, #50	; 0x32
   12780:	add	r1, r4, #8
   12784:	mov	r0, r5
   12788:	str	r6, [sp, #4]
   1278c:	str	r7, [sp]
   12790:	bl	12158 <__assert_fail@plt+0x15e4>
   12794:	ldr	r3, [pc, #232]	; 12884 <__assert_fail@plt+0x1d10>
   12798:	mov	r2, #50	; 0x32
   1279c:	add	r1, r4, #416	; 0x1a0
   127a0:	mov	r0, r5
   127a4:	str	r6, [sp, #4]
   127a8:	str	r7, [sp]
   127ac:	bl	12158 <__assert_fail@plt+0x15e4>
   127b0:	ldr	r3, [pc, #208]	; 12888 <__assert_fail@plt+0x1d14>
   127b4:	str	r6, [sp, #4]
   127b8:	str	r6, [sp]
   127bc:	mov	r2, #10
   127c0:	add	r1, r4, #824	; 0x338
   127c4:	mov	r0, r5
   127c8:	bl	12158 <__assert_fail@plt+0x15e4>
   127cc:	ldr	r3, [r4]
   127d0:	cmp	r3, r7
   127d4:	ble	12830 <__assert_fail@plt+0x1cbc>
   127d8:	ldr	r3, [pc, #172]	; 1288c <__assert_fail@plt+0x1d18>
   127dc:	str	r7, [sp, #4]
   127e0:	str	r7, [sp]
   127e4:	mov	r2, #8
   127e8:	add	r1, r4, #920	; 0x398
   127ec:	mov	r0, r5
   127f0:	bl	12158 <__assert_fail@plt+0x15e4>
   127f4:	ldr	r3, [r4, #8]
   127f8:	cmp	r3, r7
   127fc:	ble	12810 <__assert_fail@plt+0x1c9c>
   12800:	ldr	r2, [pc, #120]	; 12880 <__assert_fail@plt+0x1d0c>
   12804:	add	r1, r4, #992	; 0x3e0
   12808:	mov	r0, r5
   1280c:	bl	11fc0 <__assert_fail@plt+0x144c>
   12810:	ldr	r3, [r4, #416]	; 0x1a0
   12814:	cmp	r3, #0
   12818:	ble	12830 <__assert_fail@plt+0x1cbc>
   1281c:	add	r1, r4, #9024	; 0x2340
   12820:	add	r1, r1, #24
   12824:	ldr	r2, [pc, #88]	; 12884 <__assert_fail@plt+0x1d10>
   12828:	mov	r0, r5
   1282c:	bl	11fc0 <__assert_fail@plt+0x144c>
   12830:	mov	r0, r5
   12834:	add	sp, sp, #12
   12838:	pop	{r4, r5, r6, r7, lr}
   1283c:	b	13638 <__assert_fail@plt+0x2ac4>
   12840:	mov	r3, r5
   12844:	mov	r2, #8
   12848:	mov	r1, #1
   1284c:	ldr	r0, [pc, #60]	; 12890 <__assert_fail@plt+0x1d1c>
   12850:	bl	10a6c <fwrite@plt>
   12854:	b	1275c <__assert_fail@plt+0x1be8>
   12858:	andeq	r0, r0, r0
   1285c:	subsmi	r0, r9, r0
   12860:	andeq	r4, r1, ip, lsl #23
   12864:	strheq	r8, [r1], -r4
   12868:	andeq	r4, r1, r8, asr #22
   1286c:	muleq	r1, r0, fp
   12870:	muleq	r1, r8, fp
   12874:	andeq	r4, r1, r8, lsr #23
   12878:	andeq	r4, r1, r0, lsl fp
   1287c:	andeq	r4, r1, r0, asr #23
   12880:	ldrdeq	r4, [r1], -r0
   12884:	ldrdeq	r4, [r1], -ip
   12888:	andeq	r4, r1, ip, ror #23
   1288c:	andeq	r4, r1, r4, lsl #24
   12890:	andeq	r4, r1, r4, lsl #22
   12894:	push	{r4, r5, r6, lr}
   12898:	add	r5, r0, #8000	; 0x1f40
   1289c:	mov	r6, r0
   128a0:	add	r5, r5, #48	; 0x30
   128a4:	mov	r4, r0
   128a8:	mov	r0, r4
   128ac:	add	r4, r4, #16
   128b0:	bl	11970 <__assert_fail@plt+0xdfc>
   128b4:	cmp	r5, r4
   128b8:	bne	128a8 <__assert_fail@plt+0x1d34>
   128bc:	add	r6, r6, #4096	; 0x1000
   128c0:	mov	r3, #0
   128c4:	str	r3, [r6, #3952]	; 0xf70
   128c8:	str	r3, [r6, #3956]	; 0xf74
   128cc:	pop	{r4, r5, r6, pc}
   128d0:	push	{r4, r5, r6, lr}
   128d4:	mov	r5, r1
   128d8:	ldrb	r3, [r1]
   128dc:	cmp	r3, #0
   128e0:	beq	12918 <__assert_fail@plt+0x1da4>
   128e4:	mov	r2, #0
   128e8:	add	r2, r2, r3
   128ec:	ldrb	r3, [r1, #1]!
   128f0:	cmp	r3, #0
   128f4:	bne	128e8 <__assert_fail@plt+0x1d74>
   128f8:	ldr	r1, [pc, #80]	; 12950 <__assert_fail@plt+0x1ddc>
   128fc:	asr	r3, r2, #31
   12900:	smull	ip, r1, r1, r2
   12904:	add	r1, r1, r2
   12908:	rsb	r3, r3, r1, asr #8
   1290c:	rsb	r1, r3, r3, lsl #6
   12910:	rsb	r3, r3, r1, lsl #3
   12914:	sub	r3, r2, r3
   12918:	ldr	r4, [r0, r3, lsl #4]
   1291c:	cmp	r4, #0
   12920:	bne	12934 <__assert_fail@plt+0x1dc0>
   12924:	b	12948 <__assert_fail@plt+0x1dd4>
   12928:	ldr	r4, [r4, #4]
   1292c:	cmp	r4, #0
   12930:	beq	12948 <__assert_fail@plt+0x1dd4>
   12934:	ldr	r1, [r4, #8]
   12938:	mov	r0, r5
   1293c:	bl	109dc <strcmp@plt>
   12940:	cmp	r0, #0
   12944:	bne	12928 <__assert_fail@plt+0x1db4>
   12948:	mov	r0, r4
   1294c:	pop	{r4, r5, r6, pc}
   12950:	subhi	r4, sl, #1552	; 0x610
   12954:	ldr	ip, [r1, #8]
   12958:	push	{r4, lr}
   1295c:	ldrb	r3, [ip]
   12960:	cmp	r3, #0
   12964:	beq	129a0 <__assert_fail@plt+0x1e2c>
   12968:	mov	r2, #0
   1296c:	add	r2, r2, r3
   12970:	ldrb	r3, [ip, #1]!
   12974:	cmp	r3, #0
   12978:	bne	1296c <__assert_fail@plt+0x1df8>
   1297c:	ldr	ip, [pc, #80]	; 129d4 <__assert_fail@plt+0x1e60>
   12980:	asr	r3, r2, #31
   12984:	smull	lr, ip, ip, r2
   12988:	add	ip, ip, r2
   1298c:	rsb	r3, r3, ip, asr #8
   12990:	rsb	ip, r3, r3, lsl #6
   12994:	rsb	r3, r3, ip, lsl #3
   12998:	sub	r3, r2, r3
   1299c:	lsl	r3, r3, #4
   129a0:	add	r4, r0, #4096	; 0x1000
   129a4:	add	r0, r0, r3
   129a8:	bl	11988 <__assert_fail@plt+0xe14>
   129ac:	ldr	r0, [r4, #3952]	; 0xf70
   129b0:	cmp	r0, #0
   129b4:	beq	129c4 <__assert_fail@plt+0x1e50>
   129b8:	bl	10a00 <free@plt>
   129bc:	mov	r3, #0
   129c0:	str	r3, [r4, #3952]	; 0xf70
   129c4:	ldr	r3, [r4, #3956]	; 0xf74
   129c8:	add	r3, r3, #1
   129cc:	str	r3, [r4, #3956]	; 0xf74
   129d0:	pop	{r4, pc}
   129d4:	subhi	r4, sl, #1552	; 0x610
   129d8:	ldr	ip, [r1, #8]
   129dc:	push	{r4, lr}
   129e0:	ldrb	r3, [ip]
   129e4:	cmp	r3, #0
   129e8:	beq	12a24 <__assert_fail@plt+0x1eb0>
   129ec:	mov	r2, #0
   129f0:	add	r2, r2, r3
   129f4:	ldrb	r3, [ip, #1]!
   129f8:	cmp	r3, #0
   129fc:	bne	129f0 <__assert_fail@plt+0x1e7c>
   12a00:	ldr	ip, [pc, #80]	; 12a58 <__assert_fail@plt+0x1ee4>
   12a04:	asr	r3, r2, #31
   12a08:	smull	lr, ip, ip, r2
   12a0c:	add	ip, ip, r2
   12a10:	rsb	r3, r3, ip, asr #8
   12a14:	rsb	ip, r3, r3, lsl #6
   12a18:	rsb	r3, r3, ip, lsl #3
   12a1c:	sub	r3, r2, r3
   12a20:	lsl	r3, r3, #4
   12a24:	add	r4, r0, #4096	; 0x1000
   12a28:	add	r0, r0, r3
   12a2c:	bl	11ab8 <__assert_fail@plt+0xf44>
   12a30:	ldr	r0, [r4, #3952]	; 0xf70
   12a34:	cmp	r0, #0
   12a38:	beq	12a48 <__assert_fail@plt+0x1ed4>
   12a3c:	bl	10a00 <free@plt>
   12a40:	mov	r3, #0
   12a44:	str	r3, [r4, #3952]	; 0xf70
   12a48:	ldr	r3, [r4, #3956]	; 0xf74
   12a4c:	sub	r3, r3, #1
   12a50:	str	r3, [r4, #3956]	; 0xf74
   12a54:	pop	{r4, pc}
   12a58:	subhi	r4, sl, #1552	; 0x610
   12a5c:	push	{r4, r5, r6, lr}
   12a60:	add	r6, r0, #4096	; 0x1000
   12a64:	ldr	r4, [r6, #3952]	; 0xf70
   12a68:	cmp	r4, #0
   12a6c:	popne	{r4, r5, r6, pc}
   12a70:	ldr	r3, [r6, #3956]	; 0xf74
   12a74:	cmp	r3, #0
   12a78:	popeq	{r4, r5, r6, pc}
   12a7c:	mov	r5, r0
   12a80:	mov	r1, #4
   12a84:	mov	r0, r3
   12a88:	bl	137d0 <error@@Base+0x3c>
   12a8c:	ldr	lr, [pc, #60]	; 12ad0 <__assert_fail@plt+0x1f5c>
   12a90:	mov	r2, r4
   12a94:	mov	ip, r4
   12a98:	str	r0, [r6, #3952]	; 0xf70
   12a9c:	ldr	r3, [r5, ip, lsl #4]
   12aa0:	cmp	r3, #0
   12aa4:	beq	12ac0 <__assert_fail@plt+0x1f4c>
   12aa8:	add	r1, r0, r2, lsl #2
   12aac:	str	r3, [r1], #4
   12ab0:	ldr	r3, [r3, #4]
   12ab4:	add	r2, r2, #1
   12ab8:	cmp	r3, #0
   12abc:	bne	12aac <__assert_fail@plt+0x1f38>
   12ac0:	add	ip, ip, #1
   12ac4:	cmp	ip, lr
   12ac8:	bne	12a9c <__assert_fail@plt+0x1f28>
   12acc:	pop	{r4, r5, r6, pc}
   12ad0:	strdeq	r0, [r0], -r7
   12ad4:	push	{r4, r5, r6, r7, r8, lr}
   12ad8:	add	r5, r0, #8000	; 0x1f40
   12adc:	mov	r7, r0
   12ae0:	mov	r6, r1
   12ae4:	add	r5, r5, #48	; 0x30
   12ae8:	mov	r4, r0
   12aec:	mov	r0, r4
   12af0:	mov	r1, r6
   12af4:	add	r4, r4, #16
   12af8:	bl	11b68 <__assert_fail@plt+0xff4>
   12afc:	cmp	r5, r4
   12b00:	bne	12aec <__assert_fail@plt+0x1f78>
   12b04:	add	r7, r7, #4096	; 0x1000
   12b08:	ldr	r0, [r7, #3952]	; 0xf70
   12b0c:	cmp	r0, #0
   12b10:	beq	12b20 <__assert_fail@plt+0x1fac>
   12b14:	bl	10a00 <free@plt>
   12b18:	mov	r3, #0
   12b1c:	str	r3, [r7, #3952]	; 0xf70
   12b20:	mov	r3, #0
   12b24:	str	r3, [r7, #3956]	; 0xf74
   12b28:	pop	{r4, r5, r6, r7, r8, pc}
   12b2c:	ldr	r3, [r1]
   12b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b34:	sub	sp, sp, #44	; 0x2c
   12b38:	cmp	r3, #0
   12b3c:	str	r3, [sp, #12]
   12b40:	str	r3, [sp, #28]
   12b44:	beq	12f20 <__assert_fail@plt+0x23ac>
   12b48:	ldr	r9, [pc, #2420]	; 134c4 <__assert_fail@plt+0x2950>
   12b4c:	ldr	fp, [pc, #2420]	; 134c8 <__assert_fail@plt+0x2954>
   12b50:	ldr	r4, [pc, #2420]	; 134cc <__assert_fail@plt+0x2958>
   12b54:	mov	sl, #0
   12b58:	str	r0, [sp, #20]
   12b5c:	mov	r7, #17
   12b60:	mov	r8, r3
   12b64:	ldr	r1, [r8, #12]
   12b68:	mov	r3, r9
   12b6c:	mov	r0, sl
   12b70:	mov	ip, fp
   12b74:	ldr	r2, [pc, #2380]	; 134c8 <__assert_fail@plt+0x2954>
   12b78:	b	12b90 <__assert_fail@plt+0x201c>
   12b7c:	sub	r2, ip, r0
   12b80:	add	r3, r0, r2, lsr #1
   12b84:	add	r3, r3, r3, lsl #1
   12b88:	add	r3, r4, r3, lsl #2
   12b8c:	ldr	r3, [r3, #40]	; 0x28
   12b90:	cmp	r1, r3
   12b94:	add	r3, r0, r2, lsr #1
   12b98:	subcc	ip, r3, #1
   12b9c:	bcc	12bb8 <__assert_fail@plt+0x2044>
   12ba0:	add	r2, r3, r3, lsl #1
   12ba4:	add	r2, r4, r2, lsl #2
   12ba8:	ldr	r0, [r2, #44]	; 0x2c
   12bac:	cmp	r1, r0
   12bb0:	bls	12f48 <__assert_fail@plt+0x23d4>
   12bb4:	add	r0, r3, #1
   12bb8:	cmp	ip, r0
   12bbc:	bcs	12b7c <__assert_fail@plt+0x2008>
   12bc0:	mov	r3, r9
   12bc4:	mov	r0, sl
   12bc8:	mov	ip, fp
   12bcc:	mov	r2, fp
   12bd0:	b	12be8 <__assert_fail@plt+0x2074>
   12bd4:	sub	r2, ip, r0
   12bd8:	add	r3, r0, r2, lsr #1
   12bdc:	add	r3, r3, r3, lsl #1
   12be0:	add	r3, r4, r3, lsl #2
   12be4:	ldr	r3, [r3, #40]	; 0x28
   12be8:	cmp	r1, r3
   12bec:	add	r3, r0, r2, lsr #1
   12bf0:	subcc	ip, r3, #1
   12bf4:	bcc	12c10 <__assert_fail@plt+0x209c>
   12bf8:	add	r2, r3, r3, lsl #1
   12bfc:	add	r2, r4, r2, lsl #2
   12c00:	ldr	r0, [r2, #44]	; 0x2c
   12c04:	cmp	r1, r0
   12c08:	bls	13014 <__assert_fail@plt+0x24a0>
   12c0c:	add	r0, r3, #1
   12c10:	cmp	ip, r0
   12c14:	bcs	12bd4 <__assert_fail@plt+0x2060>
   12c18:	mov	r3, r9
   12c1c:	mov	r0, sl
   12c20:	mov	ip, fp
   12c24:	mov	r2, fp
   12c28:	b	12c40 <__assert_fail@plt+0x20cc>
   12c2c:	sub	r2, ip, r0
   12c30:	add	r3, r0, r2, lsr #1
   12c34:	add	r3, r3, r3, lsl #1
   12c38:	add	r3, r4, r3, lsl #2
   12c3c:	ldr	r3, [r3, #40]	; 0x28
   12c40:	cmp	r3, r1
   12c44:	add	r2, r0, r2, lsr #1
   12c48:	subhi	ip, r2, #1
   12c4c:	bhi	12c68 <__assert_fail@plt+0x20f4>
   12c50:	add	r3, r2, r2, lsl #1
   12c54:	add	r3, r4, r3, lsl #2
   12c58:	ldr	r0, [r3, #44]	; 0x2c
   12c5c:	cmp	r0, r1
   12c60:	bcs	13050 <__assert_fail@plt+0x24dc>
   12c64:	add	r0, r2, #1
   12c68:	cmp	ip, r0
   12c6c:	bcs	12c2c <__assert_fail@plt+0x20b8>
   12c70:	mov	r6, #0
   12c74:	str	sl, [sp, #8]
   12c78:	mov	lr, r8
   12c7c:	ldr	lr, [lr, #4]
   12c80:	cmp	lr, #0
   12c84:	beq	12f68 <__assert_fail@plt+0x23f4>
   12c88:	ldr	r0, [lr, #12]
   12c8c:	mov	r3, r9
   12c90:	mov	r1, sl
   12c94:	mov	ip, fp
   12c98:	ldr	r2, [pc, #2088]	; 134c8 <__assert_fail@plt+0x2954>
   12c9c:	b	12cb4 <__assert_fail@plt+0x2140>
   12ca0:	sub	r2, ip, r1
   12ca4:	add	r3, r1, r2, lsr #1
   12ca8:	add	r3, r3, r3, lsl #1
   12cac:	add	r3, r4, r3, lsl #2
   12cb0:	ldr	r3, [r3, #40]	; 0x28
   12cb4:	cmp	r0, r3
   12cb8:	add	r2, r1, r2, lsr #1
   12cbc:	subcc	ip, r2, #1
   12cc0:	bcc	12cdc <__assert_fail@plt+0x2168>
   12cc4:	add	r3, r2, r2, lsl #1
   12cc8:	add	r3, r4, r3, lsl #2
   12ccc:	ldr	r1, [r3, #44]	; 0x2c
   12cd0:	cmp	r0, r1
   12cd4:	bls	12fe4 <__assert_fail@plt+0x2470>
   12cd8:	add	r1, r2, #1
   12cdc:	cmp	r1, ip
   12ce0:	bls	12ca0 <__assert_fail@plt+0x212c>
   12ce4:	mov	r3, r9
   12ce8:	mov	r1, sl
   12cec:	mov	ip, fp
   12cf0:	mov	r2, fp
   12cf4:	b	12d0c <__assert_fail@plt+0x2198>
   12cf8:	sub	r2, ip, r1
   12cfc:	add	r3, r1, r2, lsr #1
   12d00:	add	r3, r3, r3, lsl #1
   12d04:	add	r3, r4, r3, lsl #2
   12d08:	ldr	r3, [r3, #40]	; 0x28
   12d0c:	cmp	r0, r3
   12d10:	add	r2, r1, r2, lsr #1
   12d14:	subcc	ip, r2, #1
   12d18:	bcc	12d34 <__assert_fail@plt+0x21c0>
   12d1c:	add	r3, r2, r2, lsl #1
   12d20:	add	r3, r4, r3, lsl #2
   12d24:	ldr	r1, [r3, #44]	; 0x2c
   12d28:	cmp	r0, r1
   12d2c:	bls	13004 <__assert_fail@plt+0x2490>
   12d30:	add	r1, r2, #1
   12d34:	cmp	r1, ip
   12d38:	bls	12cf8 <__assert_fail@plt+0x2184>
   12d3c:	mov	r3, r9
   12d40:	mov	r1, sl
   12d44:	mov	ip, fp
   12d48:	mov	r2, fp
   12d4c:	b	12d64 <__assert_fail@plt+0x21f0>
   12d50:	sub	r2, ip, r1
   12d54:	add	r3, r1, r2, lsr #1
   12d58:	add	r3, r3, r3, lsl #1
   12d5c:	add	r3, r4, r3, lsl #2
   12d60:	ldr	r3, [r3, #40]	; 0x28
   12d64:	cmp	r0, r3
   12d68:	add	r2, r1, r2, lsr #1
   12d6c:	subcc	ip, r2, #1
   12d70:	bcc	12d8c <__assert_fail@plt+0x2218>
   12d74:	add	r3, r2, r2, lsl #1
   12d78:	add	r3, r4, r3, lsl #2
   12d7c:	ldr	r1, [r3, #44]	; 0x2c
   12d80:	cmp	r1, r0
   12d84:	bcs	1302c <__assert_fail@plt+0x24b8>
   12d88:	add	r1, r2, #1
   12d8c:	cmp	ip, r1
   12d90:	bcs	12d50 <__assert_fail@plt+0x21dc>
   12d94:	mov	r3, #0
   12d98:	mov	r5, r3
   12d9c:	str	r3, [sp, #4]
   12da0:	str	sl, [sp, #16]
   12da4:	ldr	lr, [lr, #4]
   12da8:	cmp	lr, #0
   12dac:	beq	12f40 <__assert_fail@plt+0x23cc>
   12db0:	ldr	r0, [lr, #12]
   12db4:	mov	r3, r9
   12db8:	mov	r1, sl
   12dbc:	mov	ip, fp
   12dc0:	ldr	r2, [pc, #1792]	; 134c8 <__assert_fail@plt+0x2954>
   12dc4:	b	12ddc <__assert_fail@plt+0x2268>
   12dc8:	sub	r2, ip, r1
   12dcc:	add	r3, r1, r2, lsr #1
   12dd0:	add	r3, r3, r3, lsl #1
   12dd4:	add	r3, r4, r3, lsl #2
   12dd8:	ldr	r3, [r3, #40]	; 0x28
   12ddc:	cmp	r0, r3
   12de0:	add	r2, r1, r2, lsr #1
   12de4:	subcc	ip, r2, #1
   12de8:	bcc	12e04 <__assert_fail@plt+0x2290>
   12dec:	add	r3, r2, r2, lsl #1
   12df0:	add	r3, r4, r3, lsl #2
   12df4:	ldr	r1, [r3, #44]	; 0x2c
   12df8:	cmp	r0, r1
   12dfc:	bls	12f28 <__assert_fail@plt+0x23b4>
   12e00:	add	r1, r2, #1
   12e04:	cmp	ip, r1
   12e08:	bcs	12dc8 <__assert_fail@plt+0x2254>
   12e0c:	mov	r3, r9
   12e10:	mov	r1, sl
   12e14:	mov	ip, fp
   12e18:	mov	r2, fp
   12e1c:	b	12e34 <__assert_fail@plt+0x22c0>
   12e20:	sub	r2, ip, r1
   12e24:	add	r3, r1, r2, lsr #1
   12e28:	add	r3, r3, r3, lsl #1
   12e2c:	add	r3, r4, r3, lsl #2
   12e30:	ldr	r3, [r3, #40]	; 0x28
   12e34:	cmp	r0, r3
   12e38:	add	r2, r1, r2, lsr #1
   12e3c:	subcc	ip, r2, #1
   12e40:	bcc	12e5c <__assert_fail@plt+0x22e8>
   12e44:	add	r3, r2, r2, lsl #1
   12e48:	add	r3, r4, r3, lsl #2
   12e4c:	ldr	r1, [r3, #44]	; 0x2c
   12e50:	cmp	r0, r1
   12e54:	bls	12ff4 <__assert_fail@plt+0x2480>
   12e58:	add	r1, r2, #1
   12e5c:	cmp	ip, r1
   12e60:	bcs	12e20 <__assert_fail@plt+0x22ac>
   12e64:	mov	r3, r9
   12e68:	mov	r1, sl
   12e6c:	mov	ip, fp
   12e70:	mov	r2, fp
   12e74:	b	12e8c <__assert_fail@plt+0x2318>
   12e78:	sub	r2, ip, r1
   12e7c:	add	r3, r1, r2, lsr #1
   12e80:	add	r3, r3, r3, lsl #1
   12e84:	add	r3, r4, r3, lsl #2
   12e88:	ldr	r3, [r3, #40]	; 0x28
   12e8c:	cmp	r0, r3
   12e90:	add	r2, r1, r2, lsr #1
   12e94:	subcc	ip, r2, #1
   12e98:	bcc	12eb4 <__assert_fail@plt+0x2340>
   12e9c:	add	r3, r2, r2, lsl #1
   12ea0:	add	r3, r4, r3, lsl #2
   12ea4:	ldr	r1, [r3, #44]	; 0x2c
   12ea8:	cmp	r1, r0
   12eac:	bcs	13024 <__assert_fail@plt+0x24b0>
   12eb0:	add	r1, r2, #1
   12eb4:	cmp	r1, ip
   12eb8:	bls	12e78 <__assert_fail@plt+0x2304>
   12ebc:	mov	r3, sl
   12ec0:	ldr	r2, [sp, #16]
   12ec4:	cmp	r2, #0
   12ec8:	beq	12f74 <__assert_fail@plt+0x2400>
   12ecc:	mov	r7, #1
   12ed0:	ldr	r3, [r8, #4]
   12ed4:	cmp	r3, #0
   12ed8:	bne	12b60 <__assert_fail@plt+0x1fec>
   12edc:	ldr	r3, [sp, #12]
   12ee0:	ldr	r0, [r3, #12]
   12ee4:	bl	10a0c <utf8proc_get_property@plt>
   12ee8:	ldrh	r3, [r0]
   12eec:	sub	r3, r3, #1
   12ef0:	uxth	r3, r3
   12ef4:	cmp	r3, #28
   12ef8:	bhi	12f0c <__assert_fail@plt+0x2398>
   12efc:	mov	r0, #1
   12f00:	ldr	r2, [pc, #1480]	; 134d0 <__assert_fail@plt+0x295c>
   12f04:	ands	r3, r2, r0, lsl r3
   12f08:	bne	1337c <__assert_fail@plt+0x2808>
   12f0c:	ldr	r3, [r8, #4]
   12f10:	cmp	r3, #0
   12f14:	str	r3, [sp, #12]
   12f18:	str	r3, [sp, #28]
   12f1c:	bne	12b5c <__assert_fail@plt+0x1fe8>
   12f20:	add	sp, sp, #44	; 0x2c
   12f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f28:	ldr	r3, [r3, #48]	; 0x30
   12f2c:	cmp	r3, #4
   12f30:	bne	12e0c <__assert_fail@plt+0x2298>
   12f34:	ldr	lr, [lr, #4]
   12f38:	cmp	lr, #0
   12f3c:	bne	12db0 <__assert_fail@plt+0x223c>
   12f40:	mov	r3, #18
   12f44:	b	12ec0 <__assert_fail@plt+0x234c>
   12f48:	ldr	r3, [r2, #48]	; 0x30
   12f4c:	cmp	r3, #4
   12f50:	bne	12bc0 <__assert_fail@plt+0x204c>
   12f54:	ldr	r8, [r8, #4]
   12f58:	cmp	r8, #0
   12f5c:	bne	12b64 <__assert_fail@plt+0x1ff0>
   12f60:	mov	r6, #18
   12f64:	str	sl, [sp, #8]
   12f68:	mov	r5, #18
   12f6c:	mov	r3, r5
   12f70:	str	sl, [sp, #4]
   12f74:	ldr	r1, [sp, #8]
   12f78:	sub	r2, r6, #2
   12f7c:	cmp	r2, #1
   12f80:	orrls	r1, r1, #1
   12f84:	cmp	r1, #0
   12f88:	bne	13168 <__assert_fail@plt+0x25f4>
   12f8c:	ldr	r2, [sp, #4]
   12f90:	bic	ip, r5, #2
   12f94:	cmp	ip, #1
   12f98:	orreq	r2, r2, #1
   12f9c:	cmp	r2, #0
   12fa0:	bne	13168 <__assert_fail@plt+0x25f4>
   12fa4:	sub	r0, r6, #8
   12fa8:	cmp	r0, #1
   12fac:	bls	13108 <__assert_fail@plt+0x2594>
   12fb0:	sub	r2, r7, #8
   12fb4:	cmp	r2, #1
   12fb8:	bls	13138 <__assert_fail@plt+0x25c4>
   12fbc:	sub	r2, r6, #8
   12fc0:	sub	r1, r5, #10
   12fc4:	clz	r2, r2
   12fc8:	clz	r1, r1
   12fcc:	lsr	r2, r2, #5
   12fd0:	lsr	r1, r1, #5
   12fd4:	tst	r2, r1
   12fd8:	beq	13068 <__assert_fail@plt+0x24f4>
   12fdc:	mov	r7, #8
   12fe0:	b	12ed0 <__assert_fail@plt+0x235c>
   12fe4:	ldr	r3, [r3, #48]	; 0x30
   12fe8:	cmp	r3, #4
   12fec:	beq	12c7c <__assert_fail@plt+0x2108>
   12ff0:	b	12ce4 <__assert_fail@plt+0x2170>
   12ff4:	ldr	r3, [r3, #48]	; 0x30
   12ff8:	cmp	r3, #6
   12ffc:	beq	12da4 <__assert_fail@plt+0x2230>
   13000:	b	12e64 <__assert_fail@plt+0x22f0>
   13004:	ldr	r3, [r3, #48]	; 0x30
   13008:	cmp	r3, #6
   1300c:	beq	12c7c <__assert_fail@plt+0x2108>
   13010:	b	12d3c <__assert_fail@plt+0x21c8>
   13014:	ldr	r3, [r2, #48]	; 0x30
   13018:	cmp	r3, #6
   1301c:	beq	12f54 <__assert_fail@plt+0x23e0>
   13020:	b	12c18 <__assert_fail@plt+0x20a4>
   13024:	ldr	r3, [r3, #48]	; 0x30
   13028:	b	12ec0 <__assert_fail@plt+0x234c>
   1302c:	ldr	r5, [r3, #48]	; 0x30
   13030:	ldr	r2, [sp, #8]
   13034:	sub	r3, r5, #2
   13038:	clz	r3, r3
   1303c:	lsr	r3, r3, #5
   13040:	str	r3, [sp, #4]
   13044:	and	r3, r2, r3
   13048:	str	r3, [sp, #16]
   1304c:	b	12da4 <__assert_fail@plt+0x2230>
   13050:	ldr	r6, [r3, #48]	; 0x30
   13054:	sub	r3, r6, #1
   13058:	clz	r3, r3
   1305c:	lsr	r3, r3, #5
   13060:	str	r3, [sp, #8]
   13064:	b	12c78 <__assert_fail@plt+0x2104>
   13068:	cmp	r5, #11
   1306c:	cmpeq	r3, #8
   13070:	moveq	lr, #1
   13074:	movne	lr, #0
   13078:	tst	r2, lr
   1307c:	bne	12fdc <__assert_fail@plt+0x2468>
   13080:	cmp	r6, #11
   13084:	cmpeq	r5, #8
   13088:	moveq	r2, #1
   1308c:	movne	r2, #0
   13090:	cmp	r7, #8
   13094:	movne	r2, #0
   13098:	andeq	r2, r2, #1
   1309c:	cmp	r2, #0
   130a0:	bne	13258 <__assert_fail@plt+0x26e4>
   130a4:	sub	lr, r6, #15
   130a8:	sub	r2, r5, #15
   130ac:	clz	lr, lr
   130b0:	clz	r2, r2
   130b4:	lsr	lr, lr, #5
   130b8:	lsr	r2, r2, #5
   130bc:	str	r2, [sp, #4]
   130c0:	ands	r2, lr, r2
   130c4:	bne	13160 <__assert_fail@plt+0x25ec>
   130c8:	cmp	r0, #1
   130cc:	bls	13448 <__assert_fail@plt+0x28d4>
   130d0:	cmp	r6, #15
   130d4:	beq	1327c <__assert_fail@plt+0x2708>
   130d8:	cmp	r7, #15
   130dc:	beq	132f8 <__assert_fail@plt+0x2784>
   130e0:	sub	r2, r6, #7
   130e4:	sub	r3, r5, #7
   130e8:	clz	r2, r2
   130ec:	clz	r3, r3
   130f0:	lsr	r2, r2, #5
   130f4:	lsr	r3, r3, #5
   130f8:	tst	r3, r2
   130fc:	beq	13348 <__assert_fail@plt+0x27d4>
   13100:	mov	r7, #7
   13104:	b	12ed0 <__assert_fail@plt+0x235c>
   13108:	sub	r2, r5, #8
   1310c:	cmp	r2, #1
   13110:	bls	13130 <__assert_fail@plt+0x25bc>
   13114:	sub	r2, r5, #12
   13118:	cmp	r5, #10
   1311c:	cmpne	r2, #1
   13120:	bhi	12fb0 <__assert_fail@plt+0x243c>
   13124:	sub	r2, r3, #8
   13128:	cmp	r2, #1
   1312c:	bhi	12fb0 <__assert_fail@plt+0x243c>
   13130:	mov	r7, r6
   13134:	b	12ed0 <__assert_fail@plt+0x235c>
   13138:	cmp	r6, #13
   1313c:	beq	13260 <__assert_fail@plt+0x26ec>
   13140:	sub	r2, r6, #10
   13144:	bics	r2, r2, #2
   13148:	bne	12fbc <__assert_fail@plt+0x2448>
   1314c:	sub	r2, r5, #8
   13150:	cmp	r2, #1
   13154:	bhi	12fbc <__assert_fail@plt+0x2448>
   13158:	mov	r7, r6
   1315c:	b	12ed0 <__assert_fail@plt+0x235c>
   13160:	mov	r7, #15
   13164:	b	12ed0 <__assert_fail@plt+0x235c>
   13168:	cmp	r8, #0
   1316c:	beq	12f20 <__assert_fail@plt+0x23ac>
   13170:	ldr	r0, [r8, #4]
   13174:	cmp	r0, #0
   13178:	beq	12edc <__assert_fail@plt+0x2368>
   1317c:	ldr	r1, [r0, #12]
   13180:	mov	r3, r9
   13184:	mov	ip, sl
   13188:	mov	lr, fp
   1318c:	ldr	r2, [pc, #820]	; 134c8 <__assert_fail@plt+0x2954>
   13190:	b	131a8 <__assert_fail@plt+0x2634>
   13194:	sub	r2, lr, ip
   13198:	add	r3, ip, r2, lsr #1
   1319c:	add	r3, r3, r3, lsl #1
   131a0:	add	r3, r4, r3, lsl #2
   131a4:	ldr	r3, [r3, #40]	; 0x28
   131a8:	cmp	r1, r3
   131ac:	add	r3, ip, r2, lsr #1
   131b0:	subcc	lr, r3, #1
   131b4:	bcc	131d0 <__assert_fail@plt+0x265c>
   131b8:	add	r2, r3, r3, lsl #1
   131bc:	add	r2, r4, r2, lsl #2
   131c0:	ldr	ip, [r2, #44]	; 0x2c
   131c4:	cmp	r1, ip
   131c8:	bls	13234 <__assert_fail@plt+0x26c0>
   131cc:	add	ip, r3, #1
   131d0:	cmp	lr, ip
   131d4:	bcs	13194 <__assert_fail@plt+0x2620>
   131d8:	mov	r3, r9
   131dc:	mov	ip, sl
   131e0:	mov	lr, fp
   131e4:	mov	r2, fp
   131e8:	b	13200 <__assert_fail@plt+0x268c>
   131ec:	sub	r2, lr, ip
   131f0:	add	r3, ip, r2, lsr #1
   131f4:	add	r3, r3, r3, lsl #1
   131f8:	add	r3, r4, r3, lsl #2
   131fc:	ldr	r3, [r3, #40]	; 0x28
   13200:	cmp	r1, r3
   13204:	add	r3, ip, r2, lsr #1
   13208:	subcc	lr, r3, #1
   1320c:	bcc	13228 <__assert_fail@plt+0x26b4>
   13210:	add	r2, r3, r3, lsl #1
   13214:	add	r2, r4, r2, lsl #2
   13218:	ldr	ip, [r2, #44]	; 0x2c
   1321c:	cmp	r1, ip
   13220:	bls	13248 <__assert_fail@plt+0x26d4>
   13224:	add	ip, r3, #1
   13228:	cmp	ip, lr
   1322c:	bls	131ec <__assert_fail@plt+0x2678>
   13230:	b	12edc <__assert_fail@plt+0x2368>
   13234:	ldr	r3, [r2, #48]	; 0x30
   13238:	cmp	r3, #4
   1323c:	bne	131d8 <__assert_fail@plt+0x2664>
   13240:	mov	r8, r0
   13244:	b	13170 <__assert_fail@plt+0x25fc>
   13248:	ldr	r3, [r2, #48]	; 0x30
   1324c:	cmp	r3, #6
   13250:	beq	13240 <__assert_fail@plt+0x26cc>
   13254:	b	12edc <__assert_fail@plt+0x2368>
   13258:	mov	r7, #11
   1325c:	b	12ed0 <__assert_fail@plt+0x235c>
   13260:	sub	r2, r5, #8
   13264:	cmp	r2, #1
   13268:	bls	13130 <__assert_fail@plt+0x25bc>
   1326c:	sub	r1, r5, #10
   13270:	clz	r1, r1
   13274:	lsr	r1, r1, #5
   13278:	b	13080 <__assert_fail@plt+0x250c>
   1327c:	sub	r2, r5, #8
   13280:	cmp	r2, #1
   13284:	bls	13160 <__assert_fail@plt+0x25ec>
   13288:	cmp	r7, #15
   1328c:	beq	13300 <__assert_fail@plt+0x278c>
   13290:	cmp	ip, #12
   13294:	orreq	r1, r1, #1
   13298:	cmp	r1, #0
   1329c:	beq	132a8 <__assert_fail@plt+0x2734>
   132a0:	cmp	r3, #15
   132a4:	beq	13160 <__assert_fail@plt+0x25ec>
   132a8:	cmp	r6, #7
   132ac:	cmpeq	r5, #7
   132b0:	sub	r3, r5, #7
   132b4:	clz	r3, r3
   132b8:	lsr	r3, r3, #5
   132bc:	beq	13100 <__assert_fail@plt+0x258c>
   132c0:	cmp	r5, #16
   132c4:	beq	13130 <__assert_fail@plt+0x25bc>
   132c8:	cmp	r6, #16
   132cc:	bne	13358 <__assert_fail@plt+0x27e4>
   132d0:	ldr	r1, [sp, #4]
   132d4:	sub	r2, r5, #8
   132d8:	cmp	r2, #1
   132dc:	orrls	r1, r1, #1
   132e0:	cmp	r1, #0
   132e4:	bne	132f0 <__assert_fail@plt+0x277c>
   132e8:	cmp	r3, #0
   132ec:	beq	13168 <__assert_fail@plt+0x25f4>
   132f0:	mov	r7, #16
   132f4:	b	12ed0 <__assert_fail@plt+0x235c>
   132f8:	cmp	r6, #14
   132fc:	beq	13470 <__assert_fail@plt+0x28fc>
   13300:	sub	r2, r6, #10
   13304:	bics	r2, r2, #2
   13308:	beq	1336c <__assert_fail@plt+0x27f8>
   1330c:	cmp	r6, #15
   13310:	beq	13290 <__assert_fail@plt+0x271c>
   13314:	sub	r2, r6, #7
   13318:	sub	r3, r5, #7
   1331c:	clz	r2, r2
   13320:	clz	r3, r3
   13324:	lsr	r2, r2, #5
   13328:	lsr	r3, r3, #5
   1332c:	tst	r2, r3
   13330:	bne	13100 <__assert_fail@plt+0x258c>
   13334:	cmp	r0, #1
   13338:	movhi	r0, lr
   1333c:	orrls	r0, lr, #1
   13340:	cmp	r0, #0
   13344:	bne	132c0 <__assert_fail@plt+0x274c>
   13348:	cmp	r6, #16
   1334c:	orreq	r2, r2, #1
   13350:	cmp	r2, #0
   13354:	bne	132c0 <__assert_fail@plt+0x274c>
   13358:	cmp	r6, #5
   1335c:	cmpeq	r5, #5
   13360:	bne	13168 <__assert_fail@plt+0x25f4>
   13364:	mov	r7, #5
   13368:	b	12ed0 <__assert_fail@plt+0x235c>
   1336c:	cmp	r5, #15
   13370:	bne	1330c <__assert_fail@plt+0x2798>
   13374:	mov	r7, r6
   13378:	b	12ed0 <__assert_fail@plt+0x235c>
   1337c:	ldr	r3, [sp, #12]
   13380:	ldr	r6, [r8, #4]
   13384:	cmp	r6, r3
   13388:	movne	r5, r3
   1338c:	movne	r7, #0
   13390:	bne	133a0 <__assert_fail@plt+0x282c>
   13394:	b	134b4 <__assert_fail@plt+0x2940>
   13398:	cmp	r5, #0
   1339c:	beq	134a0 <__assert_fail@plt+0x292c>
   133a0:	add	r1, sp, #24
   133a4:	ldr	r0, [r5, #12]
   133a8:	bl	10a24 <utf8proc_encode_char@plt>
   133ac:	cmp	r0, #0
   133b0:	beq	1348c <__assert_fail@plt+0x2918>
   133b4:	ldr	r5, [r5, #4]
   133b8:	add	r7, r7, r0
   133bc:	cmp	r6, r5
   133c0:	bne	13398 <__assert_fail@plt+0x2824>
   133c4:	add	r0, r7, #1
   133c8:	bl	10a90 <malloc@plt>
   133cc:	mov	r6, r5
   133d0:	str	r8, [sp, #4]
   133d4:	mov	r7, #0
   133d8:	ldr	r5, [sp, #12]
   133dc:	mov	r8, r0
   133e0:	b	133ec <__assert_fail@plt+0x2878>
   133e4:	cmp	r5, #0
   133e8:	beq	1345c <__assert_fail@plt+0x28e8>
   133ec:	add	r1, r8, r7
   133f0:	ldr	r0, [r5, #12]
   133f4:	bl	10a24 <utf8proc_encode_char@plt>
   133f8:	ldr	r5, [r5, #4]
   133fc:	cmp	r5, r6
   13400:	add	r7, r7, r0
   13404:	bne	133e4 <__assert_fail@plt+0x2870>
   13408:	mov	r6, r8
   1340c:	ldr	r8, [sp, #4]
   13410:	mov	r1, #12
   13414:	strb	sl, [r6, r7]
   13418:	mov	r0, #1
   1341c:	bl	137d0 <error@@Base+0x3c>
   13420:	mov	r5, r0
   13424:	mov	r0, r6
   13428:	bl	10b14 <utf8proc_NFC@plt>
   1342c:	mov	r1, r5
   13430:	str	r0, [r5, #8]
   13434:	ldr	r0, [sp, #20]
   13438:	bl	119d4 <__assert_fail@plt+0xe60>
   1343c:	mov	r0, r6
   13440:	bl	10a00 <free@plt>
   13444:	b	12f0c <__assert_fail@plt+0x2398>
   13448:	cmp	r5, #15
   1344c:	beq	13130 <__assert_fail@plt+0x25bc>
   13450:	cmp	r7, #15
   13454:	bne	1330c <__assert_fail@plt+0x2798>
   13458:	b	13300 <__assert_fail@plt+0x278c>
   1345c:	ldr	r3, [pc, #112]	; 134d4 <__assert_fail@plt+0x2960>
   13460:	ldr	r2, [pc, #112]	; 134d8 <__assert_fail@plt+0x2964>
   13464:	ldr	r1, [pc, #112]	; 134dc <__assert_fail@plt+0x2968>
   13468:	ldr	r0, [pc, #112]	; 134e0 <__assert_fail@plt+0x296c>
   1346c:	bl	10b74 <__assert_fail@plt>
   13470:	cmp	r5, #15
   13474:	moveq	r7, #14
   13478:	beq	12ed0 <__assert_fail@plt+0x235c>
   1347c:	sub	r3, r5, #7
   13480:	clz	r3, r3
   13484:	lsr	r3, r3, #5
   13488:	b	13334 <__assert_fail@plt+0x27c0>
   1348c:	ldr	r3, [pc, #56]	; 134cc <__assert_fail@plt+0x2958>
   13490:	mov	r2, #253	; 0xfd
   13494:	ldr	r1, [pc, #64]	; 134dc <__assert_fail@plt+0x2968>
   13498:	ldr	r0, [pc, #68]	; 134e4 <__assert_fail@plt+0x2970>
   1349c:	bl	10b74 <__assert_fail@plt>
   134a0:	ldr	r3, [pc, #36]	; 134cc <__assert_fail@plt+0x2958>
   134a4:	mov	r2, #249	; 0xf9
   134a8:	ldr	r1, [pc, #44]	; 134dc <__assert_fail@plt+0x2968>
   134ac:	ldr	r0, [pc, #44]	; 134e0 <__assert_fail@plt+0x296c>
   134b0:	bl	10b74 <__assert_fail@plt>
   134b4:	bl	10a90 <malloc@plt>
   134b8:	mov	r7, #0
   134bc:	mov	r6, r0
   134c0:	b	13410 <__assert_fail@plt+0x289c>
   134c4:	andeq	r2, r0, r6, rrx
   134c8:	andeq	r0, r0, r4, asr #8
   134cc:	andeq	r4, r1, ip, lsl #24
   134d0:	strdne	r0, [r0], -pc	; <UNPREDICTABLE>
   134d4:	andeq	r4, r1, r0, lsr #24
   134d8:	andeq	r0, r0, sp, lsl #2
   134dc:	andeq	r7, r1, r0, ror pc
   134e0:	andeq	r7, r1, r8, ror pc
   134e4:	andeq	r7, r1, r8, lsl #31
   134e8:	push	{r4, lr}
   134ec:	mov	r4, r0
   134f0:	ldr	r0, [r0, #8]
   134f4:	bl	10a00 <free@plt>
   134f8:	mov	r0, r4
   134fc:	pop	{r4, lr}
   13500:	b	10a00 <free@plt>
   13504:	ldr	r3, [pc, #136]	; 13594 <__assert_fail@plt+0x2a20>
   13508:	push	{r7, lr}
   1350c:	mov	r9, r0
   13510:	ldr	r3, [r3]
   13514:	sub	sp, sp, #112	; 0x70
   13518:	cmp	r3, #0
   1351c:	beq	13524 <__assert_fail@plt+0x29b0>
   13520:	blx	r3
   13524:	ldr	r6, [pc, #108]	; 13598 <__assert_fail@plt+0x2a24>
   13528:	ldrsh	r3, [r6]
   1352c:	cmp	r3, #0
   13530:	ble	1358c <__assert_fail@plt+0x2a18>
   13534:	ldr	r8, [pc, #96]	; 1359c <__assert_fail@plt+0x2a28>
   13538:	ldr	r7, [pc, #96]	; 135a0 <__assert_fail@plt+0x2a2c>
   1353c:	mov	r4, #1
   13540:	ldr	r5, [r8]
   13544:	bl	10ac0 <getpid@plt>
   13548:	mov	r2, r5
   1354c:	mov	r1, r7
   13550:	str	r4, [sp]
   13554:	add	r4, r4, #1
   13558:	sxth	r4, r4
   1355c:	mov	r3, r0
   13560:	add	r0, sp, #12
   13564:	bl	10b2c <sprintf@plt>
   13568:	add	r0, sp, #12
   1356c:	bl	10a30 <strdup@plt>
   13570:	mov	r5, r0
   13574:	bl	10a48 <unlink@plt>
   13578:	mov	r0, r5
   1357c:	bl	10a00 <free@plt>
   13580:	ldrsh	r3, [r6]
   13584:	cmp	r3, r4
   13588:	bge	13540 <__assert_fail@plt+0x29cc>
   1358c:	mov	r0, r9
   13590:	bl	10acc <exit@plt>
   13594:	andeq	r1, r3, r4, asr #7
   13598:	strdeq	fp, [r2], -r4
   1359c:	andeq	r1, r3, r0, asr #7
   135a0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   135a4:	ldrb	r3, [r0]
   135a8:	cmp	r3, #0
   135ac:	beq	13610 <__assert_fail@plt+0x2a9c>
   135b0:	ldrb	ip, [r1]
   135b4:	cmp	ip, r3
   135b8:	bne	13620 <__assert_fail@plt+0x2aac>
   135bc:	push	{lr}		; (str lr, [sp, #-4]!)
   135c0:	mov	r2, #0
   135c4:	mov	lr, r1
   135c8:	b	135d8 <__assert_fail@plt+0x2a64>
   135cc:	ldrb	ip, [lr, #1]!
   135d0:	cmp	r3, ip
   135d4:	bne	135f8 <__assert_fail@plt+0x2a84>
   135d8:	ldrb	r3, [r0, #1]!
   135dc:	add	r2, r2, #1
   135e0:	cmp	r3, #0
   135e4:	bne	135cc <__assert_fail@plt+0x2a58>
   135e8:	ldrb	ip, [r1, r2]
   135ec:	cmp	ip, #0
   135f0:	movne	r3, #0
   135f4:	beq	13608 <__assert_fail@plt+0x2a94>
   135f8:	cmp	r3, ip
   135fc:	movcs	r0, #1
   13600:	mvncc	r0, #0
   13604:	pop	{pc}		; (ldr pc, [sp], #4)
   13608:	mov	r0, ip
   1360c:	pop	{pc}		; (ldr pc, [sp], #4)
   13610:	ldrb	ip, [r1, r3]
   13614:	cmp	ip, #0
   13618:	movne	r3, #0
   1361c:	beq	13630 <__assert_fail@plt+0x2abc>
   13620:	cmp	r3, ip
   13624:	movcs	r0, #1
   13628:	mvncc	r0, #0
   1362c:	bx	lr
   13630:	mov	r0, ip
   13634:	bx	lr
   13638:	ldr	r2, [pc, #28]	; 1365c <__assert_fail@plt+0x2ae8>
   1363c:	ldr	r2, [r2]
   13640:	cmp	r2, r0
   13644:	bxeq	lr
   13648:	ldr	r2, [pc, #16]	; 13660 <__assert_fail@plt+0x2aec>
   1364c:	ldr	r2, [r2]
   13650:	cmp	r0, r2
   13654:	bxeq	lr
   13658:	b	10b08 <fclose@plt>
   1365c:	andeq	r9, r2, r8, ror #1
   13660:	andeq	r9, r2, ip, ror #1
   13664:	push	{lr}		; (str lr, [sp, #-4]!)
   13668:	sub	sp, sp, #92	; 0x5c
   1366c:	mov	r1, r0
   13670:	mov	r2, sp
   13674:	mov	r0, #3
   13678:	bl	10a60 <__xstat@plt>
   1367c:	clz	r0, r0
   13680:	lsr	r0, r0, #5
   13684:	add	sp, sp, #92	; 0x5c
   13688:	pop	{pc}		; (ldr pc, [sp], #4)
   1368c:	ldr	r3, [pc, #84]	; 136e8 <__assert_fail@plt+0x2b74>
   13690:	push	{r4, r5, lr}
   13694:	sub	sp, sp, #116	; 0x74
   13698:	ldrh	r4, [r3]
   1369c:	ldr	r2, [pc, #72]	; 136ec <__assert_fail@plt+0x2b78>
   136a0:	add	r4, r4, #1
   136a4:	ldr	r5, [r2]
   136a8:	sxth	r4, r4
   136ac:	strh	r4, [r3]
   136b0:	bl	10ac0 <getpid@plt>
   136b4:	mov	r2, r5
   136b8:	ldr	r1, [pc, #48]	; 136f0 <__assert_fail@plt+0x2b7c>
   136bc:	str	r4, [sp]
   136c0:	mov	r3, r0
   136c4:	add	r0, sp, #12
   136c8:	bl	10b2c <sprintf@plt>
   136cc:	add	r0, sp, #12
   136d0:	bl	10a30 <strdup@plt>
   136d4:	mov	r4, r0
   136d8:	bl	10a48 <unlink@plt>
   136dc:	mov	r0, r4
   136e0:	add	sp, sp, #116	; 0x74
   136e4:	pop	{r4, r5, pc}
   136e8:	strdeq	fp, [r2], -r4
   136ec:	andeq	r1, r3, r0, asr #7
   136f0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   136f4:	push	{r4, lr}
   136f8:	mov	r4, r0
   136fc:	bl	10ae4 <strlen@plt>
   13700:	sub	r0, r0, #1
   13704:	sxth	r0, r0
   13708:	cmp	r0, #0
   1370c:	bge	13724 <__assert_fail@plt+0x2bb0>
   13710:	b	13730 <__assert_fail@plt+0x2bbc>
   13714:	sub	r0, r0, #1
   13718:	sxth	r0, r0
   1371c:	cmn	r0, #1
   13720:	beq	13730 <__assert_fail@plt+0x2bbc>
   13724:	ldrb	r3, [r4, r0]
   13728:	cmp	r3, #47	; 0x2f
   1372c:	bne	13714 <__assert_fail@plt+0x2ba0>
   13730:	add	r0, r0, #1
   13734:	add	r0, r4, r0
   13738:	pop	{r4, pc}
   1373c:	push	{r4, lr}
   13740:	mov	r0, #0
   13744:	bl	13504 <__assert_fail@plt+0x2990>
   13748:	ldr	r2, [pc, #52]	; 13784 <__assert_fail@plt+0x2c10>
   1374c:	push	{r4, lr}
   13750:	ldr	r2, [r2]
   13754:	cmp	r2, #0
   13758:	beq	13764 <__assert_fail@plt+0x2bf0>
   1375c:	blx	r2
   13760:	bl	1373c <__assert_fail@plt+0x2bc8>
   13764:	ldr	r1, [pc, #28]	; 13788 <__assert_fail@plt+0x2c14>
   13768:	ldr	r2, [pc, #28]	; 1378c <__assert_fail@plt+0x2c18>
   1376c:	mov	r3, r0
   13770:	ldr	r0, [r1]
   13774:	ldr	r2, [r2]
   13778:	ldr	r1, [pc, #16]	; 13790 <__assert_fail@plt+0x2c1c>
   1377c:	bl	10af0 <fprintf@plt>
   13780:	b	13760 <__assert_fail@plt+0x2bec>
   13784:			; <UNDEFINED> instruction: 0x000313bc
   13788:	andeq	r9, r2, r0, ror #1
   1378c:	andeq	r1, r3, r0, asr #7
   13790:	andeq	r7, r1, ip, lsr #31

00013794 <error@@Base>:
   13794:	ldr	r1, [pc, #36]	; 137c0 <error@@Base+0x2c>
   13798:	ldr	r2, [pc, #36]	; 137c4 <error@@Base+0x30>
   1379c:	mov	r3, r0
   137a0:	push	{r4, lr}
   137a4:	ldr	r0, [r1]
   137a8:	ldr	r2, [r2]
   137ac:	ldr	r1, [pc, #20]	; 137c8 <error@@Base+0x34>
   137b0:	bl	10af0 <fprintf@plt>
   137b4:	ldr	r3, [pc, #16]	; 137cc <error@@Base+0x38>
   137b8:	ldr	r0, [r3]
   137bc:	bl	13504 <__assert_fail@plt+0x2990>
   137c0:	andeq	r9, r2, r0, ror #1
   137c4:	andeq	r1, r3, r0, asr #7
   137c8:			; <UNDEFINED> instruction: 0x00017fbc
   137cc:	ldrdeq	r9, [r2], -r8
   137d0:	push	{r4, lr}
   137d4:	bl	109d0 <calloc@plt>
   137d8:	cmp	r0, #0
   137dc:	popne	{r4, pc}
   137e0:	ldr	r0, [pc]	; 137e8 <error@@Base+0x54>
   137e4:	bl	13794 <error@@Base>
   137e8:	andeq	r7, r1, r4, asr #31
   137ec:	ldr	r3, [pc, #32]	; 13814 <error@@Base+0x80>
   137f0:	ldrb	r2, [r3, #2]
   137f4:	cmp	r2, #0
   137f8:	beq	13800 <error@@Base+0x6c>
   137fc:	bx	lr
   13800:	push	{r4, lr}
   13804:	mov	r2, #1
   13808:	ldr	r0, [pc, #8]	; 13818 <error@@Base+0x84>
   1380c:	strb	r2, [r3, #2]
   13810:	bl	13794 <error@@Base>
   13814:	strdeq	fp, [r2], -r4
   13818:	andeq	r7, r1, r0, ror #31
   1381c:	ldr	r3, [pc, #48]	; 13854 <error@@Base+0xc0>
   13820:	push	{lr}		; (str lr, [sp, #-4]!)
   13824:	sub	sp, sp, #12
   13828:	ldr	r2, [pc, #40]	; 13858 <error@@Base+0xc4>
   1382c:	str	r1, [sp]
   13830:	ldr	r1, [r3]
   13834:	ldr	r2, [r2]
   13838:	mov	r3, r0
   1383c:	mov	r0, r1
   13840:	ldr	r1, [pc, #20]	; 1385c <error@@Base+0xc8>
   13844:	bl	10af0 <fprintf@plt>
   13848:	ldr	r3, [pc, #16]	; 13860 <error@@Base+0xcc>
   1384c:	ldr	r0, [r3]
   13850:	bl	13504 <__assert_fail@plt+0x2990>
   13854:	andeq	r9, r2, r0, ror #1
   13858:	andeq	r1, r3, r0, asr #7
   1385c:	strdeq	r7, [r1], -r0
   13860:	ldrdeq	r9, [r2], -r8
   13864:	subs	r2, r0, #0
   13868:	push	{r4, r5, r6, lr}
   1386c:	mov	r4, r1
   13870:	beq	1389c <error@@Base+0x108>
   13874:	mov	r5, r2
   13878:	bl	109f4 <fopen@plt>
   1387c:	cmp	r0, #0
   13880:	popne	{r4, r5, r6, pc}
   13884:	ldrb	r3, [r4]
   13888:	mov	r1, r5
   1388c:	cmp	r3, #119	; 0x77
   13890:	beq	138b4 <error@@Base+0x120>
   13894:	ldr	r0, [pc, #32]	; 138bc <error@@Base+0x128>
   13898:	bl	1381c <error@@Base+0x88>
   1389c:	ldrb	r3, [r1]
   138a0:	cmp	r3, #114	; 0x72
   138a4:	ldreq	r3, [pc, #20]	; 138c0 <error@@Base+0x12c>
   138a8:	ldrne	r3, [pc, #20]	; 138c4 <error@@Base+0x130>
   138ac:	ldr	r0, [r3]
   138b0:	pop	{r4, r5, r6, pc}
   138b4:	ldr	r0, [pc, #12]	; 138c8 <error@@Base+0x134>
   138b8:	bl	1381c <error@@Base+0x88>
   138bc:	andeq	r8, r1, r8, lsl r0
   138c0:	andeq	r9, r2, r8, ror #1
   138c4:	andeq	r9, r2, ip, ror #1
   138c8:	andeq	r8, r1, r0
   138cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138d0:	sub	sp, sp, #20
   138d4:	ldr	r4, [r1]
   138d8:	str	r0, [sp, #8]
   138dc:	mov	r0, r4
   138e0:	mov	r9, r1
   138e4:	str	r2, [sp, #12]
   138e8:	mov	r6, r3
   138ec:	bl	10ae4 <strlen@plt>
   138f0:	sub	r0, r0, #1
   138f4:	sxth	r0, r0
   138f8:	cmp	r0, #0
   138fc:	bge	13914 <error@@Base+0x180>
   13900:	b	13920 <error@@Base+0x18c>
   13904:	sub	r0, r0, #1
   13908:	sxth	r0, r0
   1390c:	cmn	r0, #1
   13910:	beq	13920 <error@@Base+0x18c>
   13914:	ldrb	r3, [r4, r0]
   13918:	cmp	r3, #47	; 0x2f
   1391c:	bne	13904 <error@@Base+0x170>
   13920:	ldr	r3, [pc, #460]	; 13af4 <error@@Base+0x360>
   13924:	add	r0, r0, #1
   13928:	add	r4, r4, r0
   1392c:	ldr	r1, [pc, #452]	; 13af8 <error@@Base+0x364>
   13930:	mov	r0, #2
   13934:	str	r4, [r3]
   13938:	bl	10aa8 <__sysv_signal@plt>
   1393c:	ldr	r1, [pc, #436]	; 13af8 <error@@Base+0x364>
   13940:	mov	r0, #15
   13944:	bl	10aa8 <__sysv_signal@plt>
   13948:	ldr	r3, [sp, #8]
   1394c:	ldr	fp, [r3]
   13950:	cmp	fp, #1
   13954:	beq	13a88 <error@@Base+0x2f4>
   13958:	movgt	sl, #1
   1395c:	mov	r7, #0
   13960:	movgt	r4, sl
   13964:	bgt	1398c <error@@Base+0x1f8>
   13968:	b	13a98 <error@@Base+0x304>
   1396c:	add	r3, r7, #1
   13970:	str	r5, [r9, r7, lsl #2]
   13974:	sxth	r7, r3
   13978:	add	r4, r4, #1
   1397c:	sxth	r4, r4
   13980:	cmp	r4, fp
   13984:	mov	sl, r4
   13988:	bge	13a98 <error@@Base+0x304>
   1398c:	ldr	r5, [r9, r4, lsl #2]
   13990:	lsl	r3, r4, #2
   13994:	ldrb	r2, [r5]
   13998:	cmp	r2, #45	; 0x2d
   1399c:	bne	1396c <error@@Base+0x1d8>
   139a0:	ldrb	r8, [r5, #1]
   139a4:	str	r3, [sp, #4]
   139a8:	cmp	r8, #0
   139ac:	beq	1396c <error@@Base+0x1d8>
   139b0:	mov	r0, r5
   139b4:	bl	10ae4 <strlen@plt>
   139b8:	mov	r1, r5
   139bc:	mov	r2, r0
   139c0:	ldr	r0, [pc, #308]	; 13afc <error@@Base+0x368>
   139c4:	bl	10b50 <strncmp@plt>
   139c8:	cmp	r0, #0
   139cc:	beq	13ae0 <error@@Base+0x34c>
   139d0:	add	sl, sl, #1
   139d4:	cmp	sl, fp
   139d8:	movge	r0, #0
   139dc:	ldrlt	r3, [sp, #4]
   139e0:	addlt	r3, r9, r3
   139e4:	ldrlt	r0, [r3, #4]
   139e8:	cmp	r6, #0
   139ec:	beq	13a30 <error@@Base+0x29c>
   139f0:	ldrb	r3, [r6]
   139f4:	cmp	r3, #0
   139f8:	beq	13a30 <error@@Base+0x29c>
   139fc:	cmp	r3, r8
   13a00:	beq	13a3c <error@@Base+0x2a8>
   13a04:	mov	r3, #0
   13a08:	b	13a14 <error@@Base+0x280>
   13a0c:	cmp	r8, r1
   13a10:	beq	13a40 <error@@Base+0x2ac>
   13a14:	add	r3, r3, #1
   13a18:	sxth	r3, r3
   13a1c:	add	r2, r3, r3, lsl #1
   13a20:	ldrb	r1, [r6, r2, lsl #2]
   13a24:	add	r2, r6, r2, lsl #2
   13a28:	cmp	r1, #0
   13a2c:	bne	13a0c <error@@Base+0x278>
   13a30:	mov	r1, r5
   13a34:	ldr	r0, [pc, #196]	; 13b00 <error@@Base+0x36c>
   13a38:	bl	1381c <error@@Base+0x88>
   13a3c:	mov	r2, r6
   13a40:	ldr	r3, [r2, #4]
   13a44:	cmp	r3, #0
   13a48:	beq	13aa8 <error@@Base+0x314>
   13a4c:	ldrb	r1, [r5, #2]
   13a50:	cmp	r0, #0
   13a54:	cmpeq	r1, #0
   13a58:	beq	13aa8 <error@@Base+0x314>
   13a5c:	ldr	r2, [r3]
   13a60:	cmp	r2, #0
   13a64:	bne	13ae8 <error@@Base+0x354>
   13a68:	cmp	r1, #0
   13a6c:	addne	r0, r5, #2
   13a70:	str	r0, [r3]
   13a74:	ldrb	r3, [r5, #2]
   13a78:	cmp	r3, #0
   13a7c:	addeq	r4, r4, #1
   13a80:	sxtheq	r4, r4
   13a84:	b	13978 <error@@Base+0x1e4>
   13a88:	ldr	r3, [pc, #116]	; 13b04 <error@@Base+0x370>
   13a8c:	ldrb	r7, [r3, #4]
   13a90:	cmp	r7, #0
   13a94:	bne	13ae0 <error@@Base+0x34c>
   13a98:	ldr	r3, [sp, #8]
   13a9c:	str	r7, [r3]
   13aa0:	add	sp, sp, #20
   13aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aa8:	ldr	r3, [r2, #8]
   13aac:	cmp	r3, #0
   13ab0:	beq	13a30 <error@@Base+0x29c>
   13ab4:	ldrb	r2, [r5, #2]
   13ab8:	cmp	r2, #0
   13abc:	bne	13a30 <error@@Base+0x29c>
   13ac0:	ldrb	r2, [r3]
   13ac4:	cmp	r2, #0
   13ac8:	bne	13ae8 <error@@Base+0x354>
   13acc:	mov	r2, #1
   13ad0:	strb	r2, [r3]
   13ad4:	ldr	r3, [sp, #8]
   13ad8:	ldr	fp, [r3]
   13adc:	b	13978 <error@@Base+0x1e4>
   13ae0:	ldr	r0, [sp, #12]
   13ae4:	bl	13748 <__assert_fail@plt+0x2bd4>
   13ae8:	mov	r1, r5
   13aec:	ldr	r0, [pc, #20]	; 13b08 <error@@Base+0x374>
   13af0:	bl	1381c <error@@Base+0x88>
   13af4:	andeq	r1, r3, r0, asr #7
   13af8:	andeq	r3, r1, ip, ror #15
   13afc:	andeq	r8, r1, ip, lsr #32
   13b00:	andeq	r8, r1, r4, lsr r0
   13b04:	ldrdeq	r9, [r2], -r8
   13b08:	andeq	r8, r1, r4, asr #32
   13b0c:	ldr	r3, [pc, #44]	; 13b40 <error@@Base+0x3ac>
   13b10:	push	{lr}		; (str lr, [sp, #-4]!)
   13b14:	sub	sp, sp, #12
   13b18:	ldr	r2, [pc, #36]	; 13b44 <error@@Base+0x3b0>
   13b1c:	str	r1, [sp]
   13b20:	ldr	r1, [r3]
   13b24:	ldr	r2, [r2]
   13b28:	mov	r3, r0
   13b2c:	mov	r0, r1
   13b30:	ldr	r1, [pc, #16]	; 13b48 <error@@Base+0x3b4>
   13b34:	bl	10af0 <fprintf@plt>
   13b38:	add	sp, sp, #12
   13b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b40:	andeq	r9, r2, r0, ror #1
   13b44:	andeq	r1, r3, r0, asr #7
   13b48:	strdeq	r7, [r1], -r0
   13b4c:	push	{r4, r5, r6, lr}
   13b50:	mov	r4, r0
   13b54:	uxtb	r6, r1
   13b58:	mov	r0, #1
   13b5c:	mov	r1, #16
   13b60:	mov	r5, r2
   13b64:	bl	137d0 <error@@Base+0x3c>
   13b68:	strb	r6, [r0, #8]
   13b6c:	str	r5, [r0, #12]
   13b70:	mov	r1, r0
   13b74:	mov	r0, r4
   13b78:	pop	{r4, r5, r6, lr}
   13b7c:	b	119d4 <__assert_fail@plt+0xe60>
   13b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b84:	sub	sp, sp, #124	; 0x7c
   13b88:	ldrb	r3, [r2]
   13b8c:	str	r2, [sp, #8]
   13b90:	adds	r3, r3, #0
   13b94:	movne	r3, #1
   13b98:	cmp	r1, #0
   13b9c:	movne	r3, #0
   13ba0:	cmp	r3, #0
   13ba4:	bne	13f80 <error@@Base+0x7ec>
   13ba8:	mov	sl, r0
   13bac:	mov	r0, r1
   13bb0:	ldr	r3, [sl, #4]
   13bb4:	ldr	r1, [pc, #976]	; 13f8c <error@@Base+0x7f8>
   13bb8:	str	r3, [sp, #12]
   13bbc:	bl	13864 <error@@Base+0xd0>
   13bc0:	ldr	r3, [sp, #8]
   13bc4:	ldrb	r3, [r3]
   13bc8:	cmp	r3, #0
   13bcc:	mov	r5, r0
   13bd0:	bne	13ed4 <error@@Base+0x740>
   13bd4:	ldr	r2, [sp, #8]
   13bd8:	mov	r0, r5
   13bdc:	ldr	r3, [r2, #4]
   13be0:	ldrb	r6, [r2, #1]
   13be4:	mov	r4, r3
   13be8:	bl	10b68 <getc@plt>
   13bec:	cmp	r4, #0
   13bf0:	mov	r2, r4
   13bf4:	moveq	r2, #94	; 0x5e
   13bf8:	str	r2, [sp, #4]
   13bfc:	cmn	r0, #1
   13c00:	beq	13cc4 <error@@Base+0x530>
   13c04:	ldr	r9, [pc, #900]	; 13f90 <error@@Base+0x7fc>
   13c08:	ldrsb	r4, [r9, r0]
   13c0c:	cmp	r4, #0
   13c10:	ble	13f68 <error@@Base+0x7d4>
   13c14:	cmp	r6, #0
   13c18:	movne	r7, #0
   13c1c:	movne	r8, #1
   13c20:	movne	fp, #4
   13c24:	bne	13c38 <error@@Base+0x4a4>
   13c28:	b	13e38 <error@@Base+0x6a4>
   13c2c:	ldrsb	r4, [r9, r0]
   13c30:	cmp	r4, #0
   13c34:	ble	13f68 <error@@Base+0x7d4>
   13c38:	cmp	r4, #1
   13c3c:	strb	r0, [sp, #16]
   13c40:	beq	13c64 <error@@Base+0x4d0>
   13c44:	sub	r6, r4, #1
   13c48:	mov	r2, r6
   13c4c:	mov	r3, r5
   13c50:	mov	r1, r8
   13c54:	add	r0, sp, #17
   13c58:	bl	10a78 <fread@plt>
   13c5c:	cmp	r6, r0
   13c60:	bne	13f78 <error@@Base+0x7e4>
   13c64:	add	r2, sp, #20
   13c68:	mov	r1, fp
   13c6c:	add	r0, sp, #16
   13c70:	bl	10a84 <utf8proc_iterate@plt>
   13c74:	cmp	r0, r4
   13c78:	bne	13f70 <error@@Base+0x7dc>
   13c7c:	ldr	r4, [sp, #20]
   13c80:	ldr	r3, [sp, #4]
   13c84:	cmp	r4, r3
   13c88:	moveq	r7, r8
   13c8c:	beq	13cb4 <error@@Base+0x520>
   13c90:	mov	r1, #16
   13c94:	mov	r0, r8
   13c98:	bl	137d0 <error@@Base+0x3c>
   13c9c:	strb	r7, [r0, #8]
   13ca0:	mov	r1, r0
   13ca4:	str	r4, [r0, #12]
   13ca8:	mov	r0, sl
   13cac:	bl	119d4 <__assert_fail@plt+0xe60>
   13cb0:	mov	r7, #0
   13cb4:	mov	r0, r5
   13cb8:	bl	10b68 <getc@plt>
   13cbc:	cmn	r0, #1
   13cc0:	bne	13c2c <error@@Base+0x498>
   13cc4:	mov	r0, r5
   13cc8:	bl	13638 <__assert_fail@plt+0x2ac4>
   13ccc:	ldr	r3, [sp, #8]
   13cd0:	ldrb	r3, [r3, #9]
   13cd4:	cmp	r3, #0
   13cd8:	beq	13d58 <error@@Base+0x5c4>
   13cdc:	ldr	r3, [sp, #12]
   13ce0:	cmp	r3, #0
   13ce4:	ldrne	r6, [r3, #4]
   13ce8:	ldreq	r6, [sl]
   13cec:	cmp	r6, #0
   13cf0:	beq	13d58 <error@@Base+0x5c4>
   13cf4:	mov	r5, r6
   13cf8:	mov	r7, #32
   13cfc:	b	13d24 <error@@Base+0x590>
   13d00:	cmp	r4, #11
   13d04:	bcs	13d50 <error@@Base+0x5bc>
   13d08:	cmp	r4, #9
   13d0c:	beq	13d50 <error@@Base+0x5bc>
   13d10:	cmp	r4, #10
   13d14:	bne	13d40 <error@@Base+0x5ac>
   13d18:	ldr	r5, [r5, #4]
   13d1c:	cmp	r5, #0
   13d20:	beq	13df8 <error@@Base+0x664>
   13d24:	ldr	r4, [r5, #12]
   13d28:	mov	r0, r4
   13d2c:	bl	10a0c <utf8proc_get_property@plt>
   13d30:	cmp	r4, #13
   13d34:	bls	13d00 <error@@Base+0x56c>
   13d38:	cmp	r4, #160	; 0xa0
   13d3c:	beq	13d50 <error@@Base+0x5bc>
   13d40:	ldrsh	r3, [r0]
   13d44:	sub	r3, r3, #23
   13d48:	cmp	r3, #2
   13d4c:	bhi	13d18 <error@@Base+0x584>
   13d50:	str	r7, [r5, #12]
   13d54:	b	13d18 <error@@Base+0x584>
   13d58:	ldr	r3, [sp, #8]
   13d5c:	ldrb	r3, [r3, #10]
   13d60:	cmp	r3, #0
   13d64:	beq	13d94 <error@@Base+0x600>
   13d68:	ldr	r3, [sp, #12]
   13d6c:	cmp	r3, #0
   13d70:	ldrne	r4, [r3, #4]
   13d74:	ldreq	r4, [sl]
   13d78:	b	13d8c <error@@Base+0x5f8>
   13d7c:	ldr	r0, [r4, #12]
   13d80:	bl	10a54 <utf8proc_tolower@plt>
   13d84:	str	r0, [r4, #12]
   13d88:	ldr	r4, [r4, #4]
   13d8c:	cmp	r4, #0
   13d90:	bne	13d7c <error@@Base+0x5e8>
   13d94:	add	sp, sp, #124	; 0x7c
   13d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d9c:	cmp	r3, #10
   13da0:	movne	r2, #0
   13da4:	andeq	r2, r2, #1
   13da8:	cmp	r2, #0
   13dac:	beq	13e2c <error@@Base+0x698>
   13db0:	cmp	r4, #0
   13db4:	moveq	r3, #0
   13db8:	andne	r3, r5, #1
   13dbc:	cmp	r3, #0
   13dc0:	beq	13ddc <error@@Base+0x648>
   13dc4:	ldr	r3, [r4, #12]
   13dc8:	cmp	r3, #32
   13dcc:	ldrbeq	r3, [r4, #8]
   13dd0:	ldrbeq	r2, [r6, #8]
   13dd4:	orreq	r3, r3, r2
   13dd8:	strbeq	r3, [r4, #8]
   13ddc:	mov	r0, sl
   13de0:	mov	r1, r6
   13de4:	bl	11ab8 <__assert_fail@plt+0xf44>
   13de8:	mov	r0, r6
   13dec:	bl	10a00 <free@plt>
   13df0:	subs	r6, r4, #0
   13df4:	beq	13d58 <error@@Base+0x5c4>
   13df8:	ldr	r3, [r6, #12]
   13dfc:	ldr	r4, [r6, #4]
   13e00:	cmp	r3, #32
   13e04:	eor	r2, r5, #1
   13e08:	bne	13d9c <error@@Base+0x608>
   13e0c:	cmp	r4, #0
   13e10:	orreq	r2, r2, #1
   13e14:	cmp	r2, #0
   13e18:	bne	13db0 <error@@Base+0x61c>
   13e1c:	ldr	r2, [r4, #12]
   13e20:	cmp	r2, #10
   13e24:	cmpne	r2, #32
   13e28:	beq	13db0 <error@@Base+0x61c>
   13e2c:	subs	r5, r3, #10
   13e30:	movne	r5, #1
   13e34:	b	13df0 <error@@Base+0x65c>
   13e38:	mov	r7, #1
   13e3c:	mov	fp, #4
   13e40:	mov	r8, #16
   13e44:	b	13e54 <error@@Base+0x6c0>
   13e48:	ldrsb	r4, [r9, r0]
   13e4c:	cmp	r4, #0
   13e50:	ble	13f68 <error@@Base+0x7d4>
   13e54:	cmp	r4, #1
   13e58:	strb	r0, [sp, #16]
   13e5c:	beq	13e80 <error@@Base+0x6ec>
   13e60:	sub	r6, r4, #1
   13e64:	mov	r2, r6
   13e68:	mov	r3, r5
   13e6c:	mov	r1, r7
   13e70:	add	r0, sp, #17
   13e74:	bl	10a78 <fread@plt>
   13e78:	cmp	r6, r0
   13e7c:	bne	13f78 <error@@Base+0x7e4>
   13e80:	add	r2, sp, #20
   13e84:	mov	r1, fp
   13e88:	add	r0, sp, #16
   13e8c:	bl	10a84 <utf8proc_iterate@plt>
   13e90:	cmp	r0, r4
   13e94:	bne	13f70 <error@@Base+0x7dc>
   13e98:	mov	r1, r8
   13e9c:	mov	r0, r7
   13ea0:	ldr	r4, [sp, #20]
   13ea4:	bl	137d0 <error@@Base+0x3c>
   13ea8:	mov	r3, #0
   13eac:	mov	r1, r0
   13eb0:	strb	r3, [r0, #8]
   13eb4:	str	r4, [r0, #12]
   13eb8:	mov	r0, sl
   13ebc:	bl	119d4 <__assert_fail@plt+0xe60>
   13ec0:	mov	r0, r5
   13ec4:	bl	10b68 <getc@plt>
   13ec8:	cmn	r0, #1
   13ecc:	bne	13e48 <error@@Base+0x6b4>
   13ed0:	b	13cc4 <error@@Base+0x530>
   13ed4:	add	r0, sp, #20
   13ed8:	mov	r2, r5
   13edc:	mov	r1, #99	; 0x63
   13ee0:	bl	10a18 <fgets@plt>
   13ee4:	cmp	r0, #0
   13ee8:	beq	13f50 <error@@Base+0x7bc>
   13eec:	mov	r2, #51	; 0x33
   13ef0:	ldr	r1, [pc, #156]	; 13f94 <error@@Base+0x800>
   13ef4:	add	r0, sp, #20
   13ef8:	bl	10b50 <strncmp@plt>
   13efc:	subs	r4, r0, #0
   13f00:	bne	13f50 <error@@Base+0x7bc>
   13f04:	ldr	r7, [pc, #140]	; 13f98 <error@@Base+0x804>
   13f08:	mov	r6, #99	; 0x63
   13f0c:	mov	r2, r5
   13f10:	mov	r1, r6
   13f14:	add	r0, sp, #20
   13f18:	bl	10a18 <fgets@plt>
   13f1c:	cmp	r0, #0
   13f20:	beq	13f48 <error@@Base+0x7b4>
   13f24:	mov	r1, r7
   13f28:	add	r0, sp, #20
   13f2c:	bl	109dc <strcmp@plt>
   13f30:	cmp	r0, #0
   13f34:	bne	13f0c <error@@Base+0x778>
   13f38:	add	r4, r4, #1
   13f3c:	sxth	r4, r4
   13f40:	cmp	r4, #1
   13f44:	ble	13f0c <error@@Base+0x778>
   13f48:	mov	r3, #1
   13f4c:	b	13f5c <error@@Base+0x7c8>
   13f50:	mov	r0, r5
   13f54:	bl	10a3c <rewind@plt>
   13f58:	mov	r3, #0
   13f5c:	ldr	r2, [sp, #8]
   13f60:	strb	r3, [r2, #11]
   13f64:	b	13bd4 <error@@Base+0x440>
   13f68:	ldr	r0, [pc, #44]	; 13f9c <error@@Base+0x808>
   13f6c:	bl	13794 <error@@Base>
   13f70:	bl	10b38 <utf8proc_errmsg@plt>
   13f74:	bl	13794 <error@@Base>
   13f78:	ldr	r0, [pc, #32]	; 13fa0 <error@@Base+0x80c>
   13f7c:	bl	13794 <error@@Base>
   13f80:	ldr	r1, [pc, #28]	; 13fa4 <error@@Base+0x810>
   13f84:	ldr	r0, [pc, #28]	; 13fa8 <error@@Base+0x814>
   13f88:	bl	1381c <error@@Base+0x88>
   13f8c:			; <UNDEFINED> instruction: 0x000149b0
   13f90:	andeq	r8, r2, r8, lsl #28
   13f94:	andeq	r8, r1, r4, ror r0
   13f98:	andeq	r8, r1, ip, lsr #1
   13f9c:	andeq	r8, r1, r4, ror #1
   13fa0:	strdeq	r8, [r1], -ip
   13fa4:	andeq	r8, r1, r8, asr r0
   13fa8:	andeq	r8, r1, r4, rrx
   13fac:	push	{r4, lr}
   13fb0:	bl	10a24 <utf8proc_encode_char@plt>
   13fb4:	cmp	r0, #0
   13fb8:	ble	13fc4 <error@@Base+0x830>
   13fbc:	sxtb	r0, r0
   13fc0:	pop	{r4, pc}
   13fc4:	ldr	r0, [pc]	; 13fcc <error@@Base+0x838>
   13fc8:	bl	13794 <error@@Base>
   13fcc:	andeq	r8, r1, r4, lsl r1
   13fd0:	push	{r4, r5, r6, r7, r8, lr}
   13fd4:	uxtb	r4, r0
   13fd8:	cmp	r4, #0
   13fdc:	mov	r5, r1
   13fe0:	mov	r8, r2
   13fe4:	uxtb	r7, r3
   13fe8:	moveq	r6, r4
   13fec:	bne	1405c <error@@Base+0x8c8>
   13ff0:	cmp	r5, #10
   13ff4:	beq	14040 <error@@Base+0x8ac>
   13ff8:	mov	r0, r5
   13ffc:	bl	10a0c <utf8proc_get_property@plt>
   14000:	cmp	r5, #32
   14004:	beq	14084 <error@@Base+0x8f0>
   14008:	ldrh	r3, [r0]
   1400c:	cmp	r3, #29
   14010:	bhi	14024 <error@@Base+0x890>
   14014:	mov	r1, #1
   14018:	ldr	r2, [pc, #220]	; 140fc <error@@Base+0x968>
   1401c:	ands	r3, r2, r1, lsl r3
   14020:	bne	14084 <error@@Base+0x8f0>
   14024:	cmp	r5, #255	; 0xff
   14028:	bls	140e8 <error@@Base+0x954>
   1402c:	mov	r2, r5
   14030:	add	r0, r8, r4
   14034:	ldr	r1, [pc, #196]	; 14100 <error@@Base+0x96c>
   14038:	pop	{r4, r5, r6, r7, r8, lr}
   1403c:	b	10b2c <sprintf@plt>
   14040:	ldr	r3, [pc, #188]	; 14104 <error@@Base+0x970>
   14044:	cmp	r7, #0
   14048:	ldr	r1, [pc, #184]	; 14108 <error@@Base+0x974>
   1404c:	add	r0, r8, r4
   14050:	movne	r1, r3
   14054:	pop	{r4, r5, r6, r7, r8, lr}
   14058:	b	10b2c <sprintf@plt>
   1405c:	mov	r1, r2
   14060:	mov	r0, #94	; 0x5e
   14064:	bl	10a24 <utf8proc_encode_char@plt>
   14068:	subs	r6, r0, #0
   1406c:	sxtbgt	r6, r6
   14070:	movgt	r4, r6
   14074:	sxthgt	r6, r6
   14078:	bgt	13ff0 <error@@Base+0x85c>
   1407c:	ldr	r0, [pc, #136]	; 1410c <error@@Base+0x978>
   14080:	bl	13794 <error@@Base>
   14084:	mov	r0, r5
   14088:	bl	10ad8 <utf8proc_category@plt>
   1408c:	sub	r0, r0, #6
   14090:	cmp	r0, #2
   14094:	bhi	140bc <error@@Base+0x928>
   14098:	add	r1, r8, r4
   1409c:	ldr	r0, [pc, #108]	; 14110 <error@@Base+0x97c>
   140a0:	bl	10a24 <utf8proc_encode_char@plt>
   140a4:	cmp	r0, #0
   140a8:	sxtbgt	r0, r0
   140ac:	addgt	r6, r6, r0
   140b0:	sxthgt	r6, r6
   140b4:	movgt	r4, r6
   140b8:	ble	1407c <error@@Base+0x8e8>
   140bc:	add	r1, r8, r4
   140c0:	mov	r0, r5
   140c4:	bl	10a24 <utf8proc_encode_char@plt>
   140c8:	cmp	r0, #0
   140cc:	ble	1407c <error@@Base+0x8e8>
   140d0:	sxtb	r0, r0
   140d4:	add	r6, r6, r0
   140d8:	mov	r3, #0
   140dc:	sxth	r6, r6
   140e0:	strb	r3, [r8, r6]
   140e4:	pop	{r4, r5, r6, r7, r8, pc}
   140e8:	mov	r2, r5
   140ec:	add	r0, r8, r4
   140f0:	ldr	r1, [pc, #28]	; 14114 <error@@Base+0x980>
   140f4:	pop	{r4, r5, r6, r7, r8, lr}
   140f8:	b	10b2c <sprintf@plt>
   140fc:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   14100:	andeq	r8, r1, ip, lsr r1
   14104:	andeq	r8, r1, ip, lsr #2
   14108:			; <UNDEFINED> instruction: 0x00014bbc
   1410c:	andeq	r8, r1, r4, lsl r1
   14110:	andeq	r2, r0, ip, asr #11
   14114:	andeq	r8, r1, r4, lsr r1
   14118:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1411c:	mov	r6, r0
   14120:	sub	sp, sp, #20
   14124:	mov	r0, r1
   14128:	ldr	r1, [pc, #432]	; 142e0 <error@@Base+0xb4c>
   1412c:	mov	r4, r2
   14130:	bl	13864 <error@@Base+0xd0>
   14134:	cmp	r4, #0
   14138:	mov	r5, r0
   1413c:	beq	14184 <error@@Base+0x9f0>
   14140:	mov	r3, r0
   14144:	mov	r2, #55	; 0x37
   14148:	mov	r1, #1
   1414c:	ldr	r0, [pc, #400]	; 142e4 <error@@Base+0xb50>
   14150:	bl	10a6c <fwrite@plt>
   14154:	mov	r3, r5
   14158:	mov	r2, #55	; 0x37
   1415c:	mov	r1, #1
   14160:	ldr	r0, [pc, #384]	; 142e8 <error@@Base+0xb54>
   14164:	bl	10a6c <fwrite@plt>
   14168:	mov	r0, r5
   1416c:	blx	r4
   14170:	mov	r3, r5
   14174:	mov	r2, #55	; 0x37
   14178:	mov	r1, #1
   1417c:	ldr	r0, [pc, #356]	; 142e8 <error@@Base+0xb54>
   14180:	bl	10a6c <fwrite@plt>
   14184:	ldr	fp, [r6]
   14188:	cmp	fp, #0
   1418c:	beq	142c8 <error@@Base+0xb34>
   14190:	ldr	r8, [pc, #340]	; 142ec <error@@Base+0xb58>
   14194:	ldr	r7, [pc, #340]	; 142f0 <error@@Base+0xb5c>
   14198:	mov	r6, #0
   1419c:	b	1420c <error@@Base+0xa78>
   141a0:	cmp	r9, #10
   141a4:	ldrheq	r2, [r7]
   141a8:	strheq	r2, [sl]
   141ac:	beq	141f4 <error@@Base+0xa60>
   141b0:	mov	r0, r9
   141b4:	bl	10a0c <utf8proc_get_property@plt>
   141b8:	cmp	r9, #32
   141bc:	beq	1424c <error@@Base+0xab8>
   141c0:	ldrh	r0, [r0]
   141c4:	cmp	r0, #29
   141c8:	bhi	141dc <error@@Base+0xa48>
   141cc:	mov	ip, #1
   141d0:	ldr	r3, [pc, #284]	; 142f4 <error@@Base+0xb60>
   141d4:	ands	r3, r3, ip, lsl r0
   141d8:	bne	1424c <error@@Base+0xab8>
   141dc:	cmp	r9, #255	; 0xff
   141e0:	bls	142b4 <error@@Base+0xb20>
   141e4:	mov	r2, r9
   141e8:	mov	r0, sl
   141ec:	mov	r1, r8
   141f0:	bl	10b2c <sprintf@plt>
   141f4:	mov	r1, r5
   141f8:	add	r0, sp, #4
   141fc:	bl	10b44 <fputs@plt>
   14200:	ldr	fp, [fp, #4]
   14204:	cmp	fp, #0
   14208:	beq	142c8 <error@@Base+0xb34>
   1420c:	ldrb	r1, [fp, #8]
   14210:	ldr	r9, [fp, #12]
   14214:	cmp	r1, #0
   14218:	addeq	sl, sp, #4
   1421c:	moveq	r4, r6
   14220:	beq	141a0 <error@@Base+0xa0c>
   14224:	add	r1, sp, #4
   14228:	mov	r0, #94	; 0x5e
   1422c:	bl	10a24 <utf8proc_encode_char@plt>
   14230:	subs	r4, r0, #0
   14234:	ble	142d8 <error@@Base+0xb44>
   14238:	sxtb	r4, r4
   1423c:	add	r3, sp, #4
   14240:	add	sl, r3, r4
   14244:	sxth	r4, r4
   14248:	b	141a0 <error@@Base+0xa0c>
   1424c:	mov	r0, r9
   14250:	bl	10ad8 <utf8proc_category@plt>
   14254:	sub	r0, r0, #6
   14258:	cmp	r0, #2
   1425c:	bhi	14288 <error@@Base+0xaf4>
   14260:	mov	r1, sl
   14264:	ldr	r0, [pc, #140]	; 142f8 <error@@Base+0xb64>
   14268:	bl	10a24 <utf8proc_encode_char@plt>
   1426c:	cmp	r0, #0
   14270:	ble	142d8 <error@@Base+0xb44>
   14274:	sxtb	r0, r0
   14278:	add	r4, r4, r0
   1427c:	add	r3, sp, #4
   14280:	sxth	r4, r4
   14284:	add	sl, r3, r4
   14288:	mov	r1, sl
   1428c:	mov	r0, r9
   14290:	bl	10a24 <utf8proc_encode_char@plt>
   14294:	cmp	r0, #0
   14298:	ble	142d8 <error@@Base+0xb44>
   1429c:	sxtb	r0, r0
   142a0:	add	r4, r4, r0
   142a4:	add	r3, sp, #16
   142a8:	sxtah	r4, r3, r4
   142ac:	strb	r6, [r4, #-12]
   142b0:	b	141f4 <error@@Base+0xa60>
   142b4:	mov	r2, r9
   142b8:	mov	r0, sl
   142bc:	ldr	r1, [pc, #56]	; 142fc <error@@Base+0xb68>
   142c0:	bl	10b2c <sprintf@plt>
   142c4:	b	141f4 <error@@Base+0xa60>
   142c8:	mov	r0, r5
   142cc:	bl	13638 <__assert_fail@plt+0x2ac4>
   142d0:	add	sp, sp, #20
   142d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142d8:	ldr	r0, [pc, #32]	; 14300 <error@@Base+0xb6c>
   142dc:	bl	13794 <error@@Base>
   142e0:	andeq	r4, r1, ip, lsl #23
   142e4:	andeq	r8, r1, r4, ror r0
   142e8:	andeq	r8, r1, ip, lsr #1
   142ec:	andeq	r8, r1, ip, lsr r1
   142f0:			; <UNDEFINED> instruction: 0x00014bbc
   142f4:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   142f8:	andeq	r2, r0, ip, asr #11
   142fc:	andeq	r8, r1, r4, lsr r1
   14300:	andeq	r8, r1, r4, lsl r1
   14304:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14308:	mov	r5, #0
   1430c:	ldrb	r3, [r1]
   14310:	sub	sp, sp, #12
   14314:	cmp	r3, r5
   14318:	str	r5, [sp, #4]
   1431c:	beq	1438c <error@@Base+0xbf8>
   14320:	mov	r4, r1
   14324:	mov	r9, r0
   14328:	mvn	r8, #0
   1432c:	mov	r7, #16
   14330:	mov	r6, #1
   14334:	b	14360 <error@@Base+0xbcc>
   14338:	ldr	sl, [sp, #4]
   1433c:	bl	137d0 <error@@Base+0x3c>
   14340:	mov	r1, r0
   14344:	strb	r5, [r0, #8]
   14348:	str	sl, [r0, #12]
   1434c:	mov	r0, r9
   14350:	bl	119d4 <__assert_fail@plt+0xe60>
   14354:	ldrb	r3, [r4, fp]!
   14358:	cmp	r3, #0
   1435c:	beq	1438c <error@@Base+0xbf8>
   14360:	mov	r1, r8
   14364:	add	r2, sp, #4
   14368:	mov	r0, r4
   1436c:	bl	10a84 <utf8proc_iterate@plt>
   14370:	mov	r1, r7
   14374:	subs	fp, r0, #0
   14378:	mov	r0, r6
   1437c:	bgt	14338 <error@@Base+0xba4>
   14380:	mov	r0, #0
   14384:	add	sp, sp, #12
   14388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1438c:	mov	r0, #1
   14390:	add	sp, sp, #12
   14394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1439c:	sub	sp, sp, #12
   143a0:	lsl	r3, r1, #2
   143a4:	str	r1, [sp]
   143a8:	str	r3, [sp, #4]
   143ac:	ldr	r5, [pc, #344]	; 1450c <error@@Base+0xd78>
   143b0:	ldr	r3, [sp]
   143b4:	mov	r9, r0
   143b8:	ldr	r1, [r5]
   143bc:	cmp	r9, r3
   143c0:	movlt	r4, r3
   143c4:	ldr	r7, [r1, r9, lsl #2]
   143c8:	movlt	r8, r9
   143cc:	bge	144f8 <error@@Base+0xd64>
   143d0:	lsl	r6, r4, #2
   143d4:	b	143dc <error@@Base+0xc48>
   143d8:	ldr	r1, [r5]
   143dc:	ldr	r1, [r1, r6]
   143e0:	ldr	r3, [r5, #4]
   143e4:	mov	r0, r7
   143e8:	blx	r3
   143ec:	cmp	r0, #0
   143f0:	bge	14440 <error@@Base+0xcac>
   143f4:	sub	r4, r4, #1
   143f8:	cmp	r4, r8
   143fc:	sub	r6, r6, #4
   14400:	bgt	143d8 <error@@Base+0xc44>
   14404:	bne	1443c <error@@Base+0xca8>
   14408:	ldr	r1, [r5]
   1440c:	mov	fp, r4
   14410:	add	r0, r1, fp, lsl #2
   14414:	sub	r1, fp, #1
   14418:	cmp	r9, r1
   1441c:	str	r7, [r0]
   14420:	blt	144dc <error@@Base+0xd48>
   14424:	ldr	r3, [sp]
   14428:	add	r9, r4, #1
   1442c:	cmp	r9, r3
   14430:	blt	143b8 <error@@Base+0xc24>
   14434:	add	sp, sp, #12
   14438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1443c:	lsl	r6, r4, #2
   14440:	ldr	r1, [r5]
   14444:	add	fp, r8, #1
   14448:	cmp	fp, r4
   1444c:	ldr	r2, [r1, r6]
   14450:	add	r0, r1, r6
   14454:	str	r2, [r1, r8, lsl #2]
   14458:	lsl	r8, r8, #2
   1445c:	bge	144e8 <error@@Base+0xd54>
   14460:	add	sl, r8, #4
   14464:	b	1447c <error@@Base+0xce8>
   14468:	add	fp, fp, #1
   1446c:	cmp	fp, r4
   14470:	add	sl, sl, #4
   14474:	beq	144c0 <error@@Base+0xd2c>
   14478:	ldr	r1, [r5]
   1447c:	ldr	r1, [r1, sl]
   14480:	ldr	r8, [r5, #4]
   14484:	mov	r0, r7
   14488:	blx	r8
   1448c:	cmp	r0, #0
   14490:	bgt	14468 <error@@Base+0xcd4>
   14494:	ldr	r1, [r5]
   14498:	mov	r8, fp
   1449c:	add	r0, r1, r6
   144a0:	sub	r4, r4, #1
   144a4:	ldr	r2, [r1, sl]
   144a8:	cmp	r4, fp
   144ac:	str	r2, [r0]
   144b0:	bgt	143d0 <error@@Base+0xc3c>
   144b4:	mov	fp, r4
   144b8:	mov	r4, r8
   144bc:	b	14410 <error@@Base+0xc7c>
   144c0:	ldr	r0, [r5]
   144c4:	add	r0, r0, r6
   144c8:	sub	r1, fp, #1
   144cc:	cmp	r9, r1
   144d0:	mov	r4, fp
   144d4:	str	r7, [r0]
   144d8:	bge	14424 <error@@Base+0xc90>
   144dc:	mov	r0, r9
   144e0:	bl	14398 <error@@Base+0xc04>
   144e4:	b	14424 <error@@Base+0xc90>
   144e8:	beq	144c8 <error@@Base+0xd34>
   144ec:	lsl	sl, fp, #2
   144f0:	mov	r8, fp
   144f4:	b	144a0 <error@@Base+0xd0c>
   144f8:	mov	fp, r3
   144fc:	ldr	r3, [sp, #4]
   14500:	mov	r4, r9
   14504:	add	r0, r1, r3
   14508:	b	14414 <error@@Base+0xc80>
   1450c:	strdeq	fp, [r2], -r8
   14510:	cmp	r0, #1
   14514:	mov	ip, r1
   14518:	bxle	lr
   1451c:	ldr	r3, [pc, #16]	; 14534 <error@@Base+0xda0>
   14520:	sub	r1, r0, #1
   14524:	mov	r0, #0
   14528:	str	ip, [r3]
   1452c:	str	r2, [r3, #4]
   14530:	b	14398 <error@@Base+0xc04>
   14534:	strdeq	fp, [r2], -r8
   14538:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1453c:	mov	r7, r0
   14540:	ldr	r6, [pc, #72]	; 14590 <error@@Base+0xdfc>
   14544:	ldr	r5, [pc, #72]	; 14594 <error@@Base+0xe00>
   14548:	add	r6, pc, r6
   1454c:	add	r5, pc, r5
   14550:	sub	r6, r6, r5
   14554:	mov	r8, r1
   14558:	mov	r9, r2
   1455c:	bl	109b0 <calloc@plt-0x20>
   14560:	asrs	r6, r6, #2
   14564:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14568:	mov	r4, #0
   1456c:	add	r4, r4, #1
   14570:	ldr	r3, [r5], #4
   14574:	mov	r2, r9
   14578:	mov	r1, r8
   1457c:	mov	r0, r7
   14580:	blx	r3
   14584:	cmp	r6, r4
   14588:	bne	1456c <error@@Base+0xdd8>
   1458c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14590:			; <UNDEFINED> instruction: 0x000148b0
   14594:	andeq	r4, r1, r8, lsr #17
   14598:	bx	lr

Disassembly of section .fini:

0001459c <.fini>:
   1459c:	push	{r3, lr}
   145a0:	pop	{r3, pc}
