
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010af8 <.init>:
   10af8:	push	{r3, lr}
   10afc:	bl	10d04 <__assert_fail@plt+0x48>
   10b00:	pop	{r3, pc}

Disassembly of section .plt:

00010b04 <calloc@plt-0x14>:
   10b04:	push	{lr}		; (str lr, [sp, #-4]!)
   10b08:	ldr	lr, [pc, #4]	; 10b14 <calloc@plt-0x4>
   10b0c:	add	lr, pc, lr
   10b10:	ldr	pc, [lr, #8]!
   10b14:	andeq	r7, r1, ip, ror #9

00010b18 <calloc@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #94208	; 0x17000
   10b20:	ldr	pc, [ip, #1260]!	; 0x4ec

00010b24 <strcmp@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #94208	; 0x17000
   10b2c:	ldr	pc, [ip, #1252]!	; 0x4e4

00010b30 <fopen@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #94208	; 0x17000
   10b38:	ldr	pc, [ip, #1244]!	; 0x4dc

00010b3c <free@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #94208	; 0x17000
   10b44:	ldr	pc, [ip, #1236]!	; 0x4d4

00010b48 <utf8proc_get_property@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #94208	; 0x17000
   10b50:	ldr	pc, [ip, #1228]!	; 0x4cc

00010b54 <fgets@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #94208	; 0x17000
   10b5c:	ldr	pc, [ip, #1220]!	; 0x4c4

00010b60 <utf8proc_encode_char@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #94208	; 0x17000
   10b68:	ldr	pc, [ip, #1212]!	; 0x4bc

00010b6c <strdup@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #94208	; 0x17000
   10b74:	ldr	pc, [ip, #1204]!	; 0x4b4

00010b78 <rewind@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #94208	; 0x17000
   10b80:	ldr	pc, [ip, #1196]!	; 0x4ac

00010b84 <unlink@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #94208	; 0x17000
   10b8c:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b90 <utf8proc_tolower@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #94208	; 0x17000
   10b98:	ldr	pc, [ip, #1180]!	; 0x49c

00010b9c <__xstat@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #94208	; 0x17000
   10ba4:	ldr	pc, [ip, #1172]!	; 0x494

00010ba8 <fwrite@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #94208	; 0x17000
   10bb0:	ldr	pc, [ip, #1164]!	; 0x48c

00010bb4 <fread@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #94208	; 0x17000
   10bbc:	ldr	pc, [ip, #1156]!	; 0x484

00010bc0 <utf8proc_iterate@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #94208	; 0x17000
   10bc8:	ldr	pc, [ip, #1148]!	; 0x47c

00010bcc <malloc@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #94208	; 0x17000
   10bd4:	ldr	pc, [ip, #1140]!	; 0x474

00010bd8 <__libc_start_main@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #94208	; 0x17000
   10be0:	ldr	pc, [ip, #1132]!	; 0x46c

00010be4 <__sysv_signal@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #94208	; 0x17000
   10bec:	ldr	pc, [ip, #1124]!	; 0x464

00010bf0 <__gmon_start__@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #94208	; 0x17000
   10bf8:	ldr	pc, [ip, #1116]!	; 0x45c

00010bfc <getpid@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #94208	; 0x17000
   10c04:	ldr	pc, [ip, #1108]!	; 0x454

00010c08 <exit@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #94208	; 0x17000
   10c10:	ldr	pc, [ip, #1100]!	; 0x44c

00010c14 <utf8proc_category@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #94208	; 0x17000
   10c1c:	ldr	pc, [ip, #1092]!	; 0x444

00010c20 <strlen@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #94208	; 0x17000
   10c28:	ldr	pc, [ip, #1084]!	; 0x43c

00010c2c <fprintf@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #94208	; 0x17000
   10c34:	ldr	pc, [ip, #1076]!	; 0x434

00010c38 <__isoc99_sscanf@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #94208	; 0x17000
   10c40:	ldr	pc, [ip, #1068]!	; 0x42c

00010c44 <fclose@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #94208	; 0x17000
   10c4c:	ldr	pc, [ip, #1060]!	; 0x424

00010c50 <utf8proc_NFC@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #94208	; 0x17000
   10c58:	ldr	pc, [ip, #1052]!	; 0x41c

00010c5c <fputc@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #94208	; 0x17000
   10c64:	ldr	pc, [ip, #1044]!	; 0x414

00010c68 <sprintf@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #94208	; 0x17000
   10c70:	ldr	pc, [ip, #1036]!	; 0x40c

00010c74 <atoi@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #94208	; 0x17000
   10c7c:	ldr	pc, [ip, #1028]!	; 0x404

00010c80 <utf8proc_errmsg@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #94208	; 0x17000
   10c88:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c8c <fputs@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #94208	; 0x17000
   10c94:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c98 <strncmp@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #94208	; 0x17000
   10ca0:	ldr	pc, [ip, #1004]!	; 0x3ec

00010ca4 <abort@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #996]!	; 0x3e4

00010cb0 <getc@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #988]!	; 0x3dc

00010cbc <__assert_fail@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #980]!	; 0x3d4

Disassembly of section .text:

00010cc8 <error@@Base-0x2028>:
   10cc8:	mov	fp, #0
   10ccc:	mov	lr, #0
   10cd0:	pop	{r1}		; (ldr r1, [sp], #4)
   10cd4:	mov	r2, sp
   10cd8:	push	{r2}		; (str r2, [sp, #-4]!)
   10cdc:	push	{r0}		; (str r0, [sp, #-4]!)
   10ce0:	ldr	ip, [pc, #16]	; 10cf8 <__assert_fail@plt+0x3c>
   10ce4:	push	{ip}		; (str ip, [sp, #-4]!)
   10ce8:	ldr	r0, [pc, #12]	; 10cfc <__assert_fail@plt+0x40>
   10cec:	ldr	r3, [pc, #12]	; 10d00 <__assert_fail@plt+0x44>
   10cf0:	bl	10bd8 <__libc_start_main@plt>
   10cf4:	bl	10ca4 <abort@plt>
   10cf8:	andeq	r3, r1, r8, lsr #16
   10cfc:	andeq	r1, r1, r4, lsr r5
   10d00:	andeq	r3, r1, r8, asr #15
   10d04:	ldr	r3, [pc, #20]	; 10d20 <__assert_fail@plt+0x64>
   10d08:	ldr	r2, [pc, #20]	; 10d24 <__assert_fail@plt+0x68>
   10d0c:	add	r3, pc, r3
   10d10:	ldr	r2, [r3, r2]
   10d14:	cmp	r2, #0
   10d18:	bxeq	lr
   10d1c:	b	10bf0 <__gmon_start__@plt>
   10d20:	andeq	r7, r1, ip, ror #5
   10d24:	muleq	r0, ip, r0
   10d28:	ldr	r0, [pc, #24]	; 10d48 <__assert_fail@plt+0x8c>
   10d2c:	ldr	r3, [pc, #24]	; 10d4c <__assert_fail@plt+0x90>
   10d30:	cmp	r3, r0
   10d34:	bxeq	lr
   10d38:	ldr	r3, [pc, #16]	; 10d50 <__assert_fail@plt+0x94>
   10d3c:	cmp	r3, #0
   10d40:	bxeq	lr
   10d44:	bx	r3
   10d48:	andeq	r8, r2, r0, ror #1
   10d4c:	andeq	r8, r2, r0, ror #1
   10d50:	andeq	r0, r0, r0
   10d54:	ldr	r0, [pc, #36]	; 10d80 <__assert_fail@plt+0xc4>
   10d58:	ldr	r1, [pc, #36]	; 10d84 <__assert_fail@plt+0xc8>
   10d5c:	sub	r1, r1, r0
   10d60:	asr	r1, r1, #2
   10d64:	add	r1, r1, r1, lsr #31
   10d68:	asrs	r1, r1, #1
   10d6c:	bxeq	lr
   10d70:	ldr	r3, [pc, #16]	; 10d88 <__assert_fail@plt+0xcc>
   10d74:	cmp	r3, #0
   10d78:	bxeq	lr
   10d7c:	bx	r3
   10d80:	andeq	r8, r2, r0, ror #1
   10d84:	andeq	r8, r2, r0, ror #1
   10d88:	andeq	r0, r0, r0
   10d8c:	push	{r4, lr}
   10d90:	ldr	r4, [pc, #24]	; 10db0 <__assert_fail@plt+0xf4>
   10d94:	ldrb	r3, [r4]
   10d98:	cmp	r3, #0
   10d9c:	popne	{r4, pc}
   10da0:	bl	10d28 <__assert_fail@plt+0x6c>
   10da4:	mov	r3, #1
   10da8:	strb	r3, [r4]
   10dac:	pop	{r4, pc}
   10db0:	strdeq	r8, [r2], -r0
   10db4:	b	10d54 <__assert_fail@plt+0x98>
   10db8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10dbc:	add	fp, sp, #24
   10dc0:	mov	r8, r1
   10dc4:	mov	r9, r0
   10dc8:	movw	r0, #41260	; 0xa12c
   10dcc:	movt	r0, #2
   10dd0:	add	r6, r0, r9, lsl #4
   10dd4:	ldr	r0, [r6, #12]!
   10dd8:	add	r0, r0, #1
   10ddc:	mov	r1, #4
   10de0:	bl	12950 <__assert_fail@plt+0x1c94>
   10de4:	ldr	r1, [r6]
   10de8:	cmp	r1, #1
   10dec:	movlt	r1, #0
   10df0:	strlt	r1, [r8]
   10df4:	poplt	{r4, r5, r6, r7, r8, r9, fp, pc}
   10df8:	rsb	r2, r9, #1
   10dfc:	mov	r3, #0
   10e00:	movw	ip, #948	; 0x3b4
   10e04:	movt	ip, #3
   10e08:	mov	r1, #0
   10e0c:	mov	r7, #0
   10e10:	ldr	r4, [ip, r9, lsl #2]
   10e14:	ldr	r5, [r4, r3]!
   10e18:	add	r5, r5, r2
   10e1c:	ldrb	r5, [r5, #12]
   10e20:	cmp	r5, #0
   10e24:	strne	r4, [r0, r1, lsl #2]
   10e28:	addne	r1, r1, #1
   10e2c:	add	r3, r3, #8
   10e30:	add	r7, r7, #1
   10e34:	ldr	r5, [r6]
   10e38:	cmp	r7, r5
   10e3c:	strge	r1, [r8]
   10e40:	popge	{r4, r5, r6, r7, r8, r9, fp, pc}
   10e44:	b	10e10 <__assert_fail@plt+0x154>
   10e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e4c:	add	fp, sp, #28
   10e50:	push	{r0}		; (str r0, [sp, #-4]!)
   10e54:	mov	r4, #0
   10e58:	movw	r8, #948	; 0x3b4
   10e5c:	movt	r8, #3
   10e60:	movw	r6, #41308	; 0xa15c
   10e64:	movt	r6, #2
   10e68:	mov	r9, #1
   10e6c:	ldr	r0, [sp]
   10e70:	ldr	r1, [r0, r4, lsl #2]
   10e74:	movw	r0, #41216	; 0xa100
   10e78:	movt	r0, #2
   10e7c:	add	r7, r0, r4, lsl #4
   10e80:	mov	r0, r7
   10e84:	movw	r2, #32960	; 0x80c0
   10e88:	movt	r2, #2
   10e8c:	bl	12fdc <error@@Base+0x2ec>
   10e90:	cmp	r4, #0
   10e94:	bne	10eac <__assert_fail@plt+0x1f0>
   10e98:	movw	r0, #32960	; 0x80c0
   10e9c:	movt	r0, #2
   10ea0:	ldrb	r0, [r0, #11]
   10ea4:	cmp	r0, #0
   10ea8:	bne	10fa4 <__assert_fail@plt+0x2e8>
   10eac:	movw	r0, #41260	; 0xa12c
   10eb0:	movt	r0, #2
   10eb4:	mov	sl, r0
   10eb8:	add	r5, r0, r4, lsl #4
   10ebc:	mov	r0, r5
   10ec0:	mov	r1, r7
   10ec4:	bl	1237c <__assert_fail@plt+0x16c0>
   10ec8:	ldr	r0, [r5, #12]
   10ecc:	add	r0, r0, #1
   10ed0:	mov	r1, #8
   10ed4:	bl	12950 <__assert_fail@plt+0x1c94>
   10ed8:	str	r0, [r8, r4, lsl #2]
   10edc:	ldr	r5, [sl, r4, lsl #4]
   10ee0:	cmp	r5, #0
   10ee4:	beq	10f48 <__assert_fail@plt+0x28c>
   10ee8:	mov	sl, #0
   10eec:	ldr	r1, [r5, #8]
   10ef0:	mov	r0, r6
   10ef4:	bl	12164 <__assert_fail@plt+0x14a8>
   10ef8:	mov	r7, r0
   10efc:	cmp	r0, #0
   10f00:	bne	10f28 <__assert_fail@plt+0x26c>
   10f04:	mov	r0, #1
   10f08:	mov	r1, #16
   10f0c:	bl	12950 <__assert_fail@plt+0x1c94>
   10f10:	mov	r7, r0
   10f14:	ldr	r0, [r5, #8]
   10f18:	str	r0, [r7, #8]
   10f1c:	mov	r0, r6
   10f20:	mov	r1, r7
   10f24:	bl	1220c <__assert_fail@plt+0x1550>
   10f28:	add	r0, r7, r4
   10f2c:	strb	r9, [r0, #12]
   10f30:	ldr	r0, [r8, r4, lsl #2]
   10f34:	str	r7, [r0, sl]
   10f38:	add	sl, sl, #8
   10f3c:	ldr	r5, [r5, #4]
   10f40:	cmp	r5, #0
   10f44:	bne	10eec <__assert_fail@plt+0x230>
   10f48:	add	r4, r4, #1
   10f4c:	cmp	r4, #2
   10f50:	bcc	10e6c <__assert_fail@plt+0x1b0>
   10f54:	movw	r4, #940	; 0x3ac
   10f58:	movt	r4, #3
   10f5c:	mov	r0, #0
   10f60:	mov	r1, r4
   10f64:	bl	10db8 <__assert_fail@plt+0xfc>
   10f68:	movw	r1, #936	; 0x3a8
   10f6c:	movt	r1, #3
   10f70:	str	r0, [r1]
   10f74:	ldr	r0, [r4]
   10f78:	cmp	r0, #65536	; 0x10000
   10f7c:	bge	10fb0 <__assert_fail@plt+0x2f4>
   10f80:	movw	r1, #41252	; 0xa124
   10f84:	movt	r1, #2
   10f88:	mov	r0, #1
   10f8c:	bl	10db8 <__assert_fail@plt+0xfc>
   10f90:	movw	r1, #41248	; 0xa120
   10f94:	movt	r1, #2
   10f98:	str	r0, [r1]
   10f9c:	sub	sp, fp, #28
   10fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fa4:	movw	r0, #14408	; 0x3848
   10fa8:	movt	r0, #1
   10fac:	bl	12cf0 <error@@Base>
   10fb0:	movw	r0, #14434	; 0x3862
   10fb4:	movt	r0, #1
   10fb8:	bl	12cf0 <error@@Base>
   10fbc:	push	{fp, lr}
   10fc0:	mov	fp, sp
   10fc4:	cmp	r1, #0
   10fc8:	moveq	r0, #0
   10fcc:	popeq	{fp, pc}
   10fd0:	mov	r3, r0
   10fd4:	ldr	ip, [r1, #8]
   10fd8:	rsb	lr, ip, #0
   10fdc:	mov	r0, #0
   10fe0:	cmp	lr, r3
   10fe4:	bge	11004 <__assert_fail@plt+0x348>
   10fe8:	sub	lr, r3, #1
   10fec:	add	r0, ip, lr
   10ff0:	bic	ip, r0, #1
   10ff4:	ldr	r0, [r1, #12]
   10ff8:	add	r0, r0, ip
   10ffc:	ldrh	r0, [r0]
   11000:	str	lr, [r2]
   11004:	ldr	ip, [r1, #8]
   11008:	cmp	ip, r3
   1100c:	pople	{fp, pc}
   11010:	add	lr, r3, #1
   11014:	add	r3, ip, lr
   11018:	bic	r3, r3, #1
   1101c:	ldr	r1, [r1, #12]
   11020:	add	r1, r1, r3
   11024:	ldrh	r1, [r1]
   11028:	add	r1, r1, #1
   1102c:	cmp	r1, r0
   11030:	strcs	lr, [r2]
   11034:	movcs	r0, r1
   11038:	pop	{fp, pc}
   1103c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11040:	add	fp, sp, #28
   11044:	sub	sp, sp, #4
   11048:	mov	r8, r1
   1104c:	mov	r4, r0
   11050:	ldr	r1, [r1]
   11054:	mov	r2, sp
   11058:	bl	10fbc <__assert_fail@plt+0x300>
   1105c:	add	r2, r0, r4
   11060:	movw	ip, #41252	; 0xa124
   11064:	movt	ip, #2
   11068:	ldr	sl, [ip]
   1106c:	movw	lr, #940	; 0x3ac
   11070:	movt	lr, #3
   11074:	ldr	r3, [lr]
   11078:	cmp	r0, r3
   1107c:	cmplt	r2, sl
   11080:	blt	110cc <__assert_fail@plt+0x410>
   11084:	cmp	r0, r3
   11088:	addeq	r1, r4, #1
   1108c:	movweq	r3, #944	; 0x3b0
   11090:	movteq	r3, #3
   11094:	streq	r1, [r3]
   11098:	cmp	r2, sl
   1109c:	subeq	r1, r4, #1
   110a0:	movweq	r2, #932	; 0x3a4
   110a4:	movteq	r2, #3
   110a8:	streq	r1, [r2]
   110ac:	ldr	r1, [r8, #8]
   110b0:	ldr	r2, [r8, #12]
   110b4:	add	r1, r1, r4
   110b8:	bic	r1, r1, #1
   110bc:	add	r1, r2, r1
   110c0:	strh	r0, [r1]
   110c4:	sub	sp, fp, #28
   110c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110cc:	movw	r7, #41248	; 0xa120
   110d0:	movt	r7, #2
   110d4:	ldr	r9, [r7]
   110d8:	ldr	r5, [r9, r2, lsl #2]
   110dc:	ldr	r6, [r5]
   110e0:	movw	r5, #936	; 0x3a8
   110e4:	movt	r5, #3
   110e8:	ldr	r5, [r5]
   110ec:	ldr	r7, [r5, r0, lsl #2]
   110f0:	ldr	r7, [r7]
   110f4:	cmp	r7, r6
   110f8:	bne	11084 <__assert_fail@plt+0x3c8>
   110fc:	ldr	sl, [ip]
   11100:	ldr	r3, [lr]
   11104:	add	ip, r9, r4, lsl #2
   11108:	mov	r7, r0
   1110c:	add	r0, r4, r0
   11110:	add	r2, r0, #1
   11114:	add	r0, r7, #1
   11118:	cmp	r0, r3
   1111c:	cmplt	r2, sl
   11120:	bge	11144 <__assert_fail@plt+0x488>
   11124:	add	r1, ip, r7, lsl #2
   11128:	ldr	r1, [r1, #4]
   1112c:	ldr	r1, [r1]
   11130:	add	r6, r5, r7, lsl #2
   11134:	ldr	r6, [r6, #4]
   11138:	ldr	r6, [r6]
   1113c:	cmp	r6, r1
   11140:	beq	11108 <__assert_fail@plt+0x44c>
   11144:	add	r0, r7, #1
   11148:	b	11084 <__assert_fail@plt+0x3c8>
   1114c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11150:	add	fp, sp, #28
   11154:	sub	sp, sp, #4
   11158:	movw	r0, #41252	; 0xa124
   1115c:	movt	r0, #2
   11160:	ldr	r0, [r0]
   11164:	movw	r7, #932	; 0x3a4
   11168:	movt	r7, #3
   1116c:	str	r0, [r7]
   11170:	movw	r9, #940	; 0x3ac
   11174:	movt	r9, #3
   11178:	ldr	r1, [r9]
   1117c:	rsb	r2, r1, #0
   11180:	movw	r4, #944	; 0x3b0
   11184:	movt	r4, #3
   11188:	str	r2, [r4]
   1118c:	sub	r0, r0, r1
   11190:	cmp	r0, r2
   11194:	blt	11238 <__assert_fail@plt+0x57c>
   11198:	mvn	r8, #0
   1119c:	movw	sl, #41292	; 0xa14c
   111a0:	movt	sl, #2
   111a4:	mov	r6, r8
   111a8:	mov	r0, #1
   111ac:	mov	r1, #16
   111b0:	bl	12950 <__assert_fail@plt+0x1c94>
   111b4:	mov	r5, r0
   111b8:	add	r8, r8, #1
   111bc:	str	r8, [r0, #8]
   111c0:	add	r0, r6, #2
   111c4:	mov	r1, #2
   111c8:	bl	12950 <__assert_fail@plt+0x1c94>
   111cc:	str	r0, [r5, #12]
   111d0:	mov	r0, sl
   111d4:	mov	r1, r5
   111d8:	bl	1161c <__assert_fail@plt+0x960>
   111dc:	mvn	r6, r6
   111e0:	cmp	r8, r6
   111e4:	blt	11218 <__assert_fail@plt+0x55c>
   111e8:	ldr	r0, [r4]
   111ec:	cmp	r6, r0
   111f0:	blt	1120c <__assert_fail@plt+0x550>
   111f4:	ldr	r0, [r7]
   111f8:	cmp	r6, r0
   111fc:	bgt	1120c <__assert_fail@plt+0x550>
   11200:	mov	r0, r6
   11204:	mov	r1, r5
   11208:	bl	1103c <__assert_fail@plt+0x380>
   1120c:	add	r6, r6, #2
   11210:	cmp	r6, r8
   11214:	ble	111e8 <__assert_fail@plt+0x52c>
   11218:	ldr	r0, [r9]
   1121c:	movw	r1, #41252	; 0xa124
   11220:	movt	r1, #2
   11224:	ldr	r1, [r1]
   11228:	sub	r0, r1, r0
   1122c:	ldr	r1, [r4]
   11230:	cmp	r1, r0
   11234:	ble	111a4 <__assert_fail@plt+0x4e8>
   11238:	sub	sp, fp, #28
   1123c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11240:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11244:	add	fp, sp, #24
   11248:	sub	sp, sp, #8
   1124c:	movw	r0, #41292	; 0xa14c
   11250:	movt	r0, #2
   11254:	ldr	r5, [r0, #4]
   11258:	cmp	r5, #0
   1125c:	beq	112e4 <__assert_fail@plt+0x628>
   11260:	movw	r0, #940	; 0x3ac
   11264:	movt	r0, #3
   11268:	ldr	r0, [r0]
   1126c:	movw	r1, #41252	; 0xa124
   11270:	movt	r1, #2
   11274:	ldr	r1, [r1]
   11278:	sub	r0, r1, r0
   1127c:	add	r4, sp, #4
   11280:	movw	r8, #936	; 0x3a8
   11284:	movt	r8, #3
   11288:	mov	r7, #1
   1128c:	ldr	r1, [r5]
   11290:	ldr	r2, [r5, #8]
   11294:	ldr	r3, [r5, #12]
   11298:	add	r2, r2, r0
   1129c:	bic	r2, r2, #1
   112a0:	add	r2, r3, r2
   112a4:	ldrh	r6, [r2]
   112a8:	mov	r2, r4
   112ac:	bl	10fbc <__assert_fail@plt+0x300>
   112b0:	cmp	r0, r6
   112b4:	bge	112d4 <__assert_fail@plt+0x618>
   112b8:	ldr	r1, [r8]
   112bc:	sub	r1, r1, #4
   112c0:	ldr	r2, [r1, r6, lsl #2]
   112c4:	strb	r7, [r2, #4]
   112c8:	sub	r6, r6, #1
   112cc:	cmp	r6, r0
   112d0:	bgt	112c0 <__assert_fail@plt+0x604>
   112d4:	ldr	r5, [r5]
   112d8:	ldr	r0, [sp, #4]
   112dc:	cmp	r5, #0
   112e0:	bne	1128c <__assert_fail@plt+0x5d0>
   112e4:	sub	sp, fp, #24
   112e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   112ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112f0:	add	fp, sp, #28
   112f4:	sub	sp, sp, #4
   112f8:	mov	r4, r2
   112fc:	mov	sl, r1
   11300:	mov	r6, r0
   11304:	bl	122b8 <__assert_fail@plt+0x15fc>
   11308:	movw	r0, #8052	; 0x1f74
   1130c:	mov	r9, r6
   11310:	ldr	r0, [r9, r0]!
   11314:	cmp	r0, #1
   11318:	blt	113c8 <__assert_fail@plt+0x70c>
   1131c:	movw	r0, #8048	; 0x1f70
   11320:	add	r5, r6, r0
   11324:	mov	r8, #0
   11328:	ldr	r0, [r5]
   1132c:	ldr	r0, [r0, r8, lsl #2]
   11330:	ldr	r7, [r0, #12]
   11334:	ldr	r6, [r0, #16]
   11338:	movw	r0, #49364	; 0xc0d4
   1133c:	movt	r0, #2
   11340:	mov	r1, r7
   11344:	mov	r2, r6
   11348:	bl	118c0 <__assert_fail@plt+0xc04>
   1134c:	mov	r0, sl
   11350:	mov	r1, r7
   11354:	mov	r2, r6
   11358:	bl	118c0 <__assert_fail@plt+0xc04>
   1135c:	ldr	r0, [r5]
   11360:	ldr	r0, [r0, r8, lsl #2]
   11364:	ldr	r0, [r0, #8]
   11368:	bl	10c20 <strlen@plt>
   1136c:	add	r0, sl, r0, lsl #3
   11370:	mov	r1, r7
   11374:	mov	r2, r6
   11378:	bl	118c0 <__assert_fail@plt+0xc04>
   1137c:	cmp	r4, #0
   11380:	beq	113b8 <__assert_fail@plt+0x6fc>
   11384:	sub	r0, r7, r6
   11388:	clz	r0, r0
   1138c:	lsr	r6, r0, #5
   11390:	mov	r0, r4
   11394:	mov	r1, #1
   11398:	mov	r2, r6
   1139c:	bl	118c0 <__assert_fail@plt+0xc04>
   113a0:	cmp	r7, #11
   113a4:	movge	r7, #11
   113a8:	add	r0, r4, r7, lsl #3
   113ac:	mov	r1, #1
   113b0:	mov	r2, r6
   113b4:	bl	118c0 <__assert_fail@plt+0xc04>
   113b8:	ldr	r0, [r9]
   113bc:	add	r8, r8, #1
   113c0:	cmp	r8, r0
   113c4:	blt	11328 <__assert_fail@plt+0x66c>
   113c8:	sub	sp, fp, #28
   113cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113d4:	add	fp, sp, #28
   113d8:	sub	sp, sp, #4
   113dc:	movw	r9, #41260	; 0xa12c
   113e0:	movt	r9, #2
   113e4:	ldr	r0, [r9, #12]
   113e8:	cmp	r0, #1
   113ec:	blt	11474 <__assert_fail@plt+0x7b8>
   113f0:	mov	r6, #0
   113f4:	mov	r7, #4
   113f8:	movw	r0, #49364	; 0xc0d4
   113fc:	movt	r0, #2
   11400:	add	r0, r0, #928	; 0x3a0
   11404:	str	r0, [sp]
   11408:	movw	sl, #948	; 0x3b4
   1140c:	movt	sl, #3
   11410:	ldr	r4, [sp]
   11414:	mov	r5, #1
   11418:	mov	r8, #0
   1141c:	add	r0, r6, r8
   11420:	ldr	r1, [r9, #12]
   11424:	cmp	r0, r1
   11428:	bge	11460 <__assert_fail@plt+0x7a4>
   1142c:	ldr	r0, [sl]
   11430:	add	r0, r0, r7
   11434:	ldrb	r0, [r0, r8, lsl #3]
   11438:	and	r5, r5, r0
   1143c:	clz	r0, r5
   11440:	lsr	r2, r0, #5
   11444:	mov	r0, r4
   11448:	mov	r1, #1
   1144c:	bl	118c0 <__assert_fail@plt+0xc04>
   11450:	add	r4, r4, #8
   11454:	add	r8, r8, #1
   11458:	cmp	r8, #8
   1145c:	bcc	1141c <__assert_fail@plt+0x760>
   11460:	add	r7, r7, #8
   11464:	add	r6, r6, #1
   11468:	ldr	r0, [r9, #12]
   1146c:	cmp	r6, r0
   11470:	blt	11410 <__assert_fail@plt+0x754>
   11474:	sub	sp, fp, #28
   11478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1147c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11480:	add	fp, sp, #24
   11484:	movw	r8, #41260	; 0xa12c
   11488:	movt	r8, #2
   1148c:	ldr	r0, [r8, #12]
   11490:	cmp	r0, #1
   11494:	blt	11500 <__assert_fail@plt+0x844>
   11498:	mov	r5, #0
   1149c:	movw	r6, #948	; 0x3b4
   114a0:	movt	r6, #3
   114a4:	movw	r9, #9048	; 0x2358
   114a8:	movw	r4, #49364	; 0xc0d4
   114ac:	movt	r4, #2
   114b0:	add	r7, r4, #992	; 0x3e0
   114b4:	ldr	r0, [r6]
   114b8:	ldr	r0, [r0, r5, lsl #3]
   114bc:	ldr	r0, [r0, #8]
   114c0:	bl	11878 <__assert_fail@plt+0xbbc>
   114c4:	cmp	r0, #0
   114c8:	mov	r0, r7
   114cc:	addeq	r0, r4, r9
   114d0:	ldr	r2, [r6]
   114d4:	ldr	r1, [r2, r5, lsl #3]!
   114d8:	ldr	r1, [r1, #8]
   114dc:	ldrb	r2, [r2, #4]
   114e0:	clz	r2, r2
   114e4:	lsr	r3, r2, #5
   114e8:	mov	r2, #1
   114ec:	bl	118d4 <__assert_fail@plt+0xc18>
   114f0:	add	r5, r5, #1
   114f4:	ldr	r0, [r8, #12]
   114f8:	cmp	r5, r0
   114fc:	blt	114b4 <__assert_fail@plt+0x7f8>
   11500:	movw	r4, #49364	; 0xc0d4
   11504:	movt	r4, #2
   11508:	add	r0, r4, #992	; 0x3e0
   1150c:	add	r1, r4, #8
   11510:	mov	r2, #0
   11514:	bl	112ec <__assert_fail@plt+0x630>
   11518:	movw	r0, #9048	; 0x2358
   1151c:	add	r0, r4, r0
   11520:	add	r1, r4, #416	; 0x1a0
   11524:	add	r2, r4, #824	; 0x338
   11528:	bl	112ec <__assert_fail@plt+0x630>
   1152c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   11530:	b	113d0 <__assert_fail@plt+0x714>
   11534:	push	{fp, lr}
   11538:	mov	fp, sp
   1153c:	sub	sp, sp, #8
   11540:	mov	r4, r1
   11544:	str	r0, [sp, #4]
   11548:	add	r0, sp, #4
   1154c:	movw	r2, #14458	; 0x387a
   11550:	movt	r2, #1
   11554:	movw	r3, #32936	; 0x80a8
   11558:	movt	r3, #2
   1155c:	bl	12b70 <__assert_fail@plt+0x1eb4>
   11560:	ldr	r0, [sp, #4]
   11564:	bic	r0, r0, #1
   11568:	cmp	r0, #2
   1156c:	bne	115b4 <__assert_fail@plt+0x8f8>
   11570:	movw	r0, #41256	; 0xa128
   11574:	movt	r0, #2
   11578:	ldr	r0, [r0]
   1157c:	bl	1175c <__assert_fail@plt+0xaa0>
   11580:	mov	r0, r4
   11584:	bl	10e48 <__assert_fail@plt+0x18c>
   11588:	bl	1114c <__assert_fail@plt+0x490>
   1158c:	bl	11240 <__assert_fail@plt+0x584>
   11590:	bl	1147c <__assert_fail@plt+0x7c0>
   11594:	mov	r1, #0
   11598:	ldr	r0, [sp, #4]
   1159c:	cmp	r0, #3
   115a0:	ldreq	r1, [r4, #8]
   115a4:	movw	r0, #49364	; 0xc0d4
   115a8:	movt	r0, #2
   115ac:	bl	11c88 <__assert_fail@plt+0xfcc>
   115b0:	bl	12cb0 <__assert_fail@plt+0x1ff4>
   115b4:	movw	r0, #14519	; 0x38b7
   115b8:	movt	r0, #1
   115bc:	bl	12cf0 <error@@Base>
   115c0:	vmov.i32	q8, #0	; 0x00000000
   115c4:	vst1.32	{d16-d17}, [r0]
   115c8:	bx	lr
   115cc:	mov	r2, r1
   115d0:	ldr	r3, [r0]
   115d4:	mov	r1, #0
   115d8:	b	115dc <__assert_fail@plt+0x920>
   115dc:	push	{r4, sl, fp, lr}
   115e0:	add	fp, sp, #8
   115e4:	mov	r4, r0
   115e8:	stm	r2, {r1, r3}
   115ec:	cmp	r1, #0
   115f0:	addne	r0, r1, #4
   115f4:	str	r2, [r0]
   115f8:	cmp	r3, #0
   115fc:	addeq	r3, r4, #4
   11600:	str	r2, [r3]
   11604:	mov	r0, r4
   11608:	bl	11698 <__assert_fail@plt+0x9dc>
   1160c:	ldr	r0, [r4, #12]
   11610:	add	r0, r0, #1
   11614:	str	r0, [r4, #12]
   11618:	pop	{r4, sl, fp, pc}
   1161c:	mov	r2, r1
   11620:	ldr	r1, [r0, #4]
   11624:	mov	r3, #0
   11628:	b	115dc <__assert_fail@plt+0x920>
   1162c:	mov	r3, r2
   11630:	mov	r2, r1
   11634:	ldr	r1, [r3]
   11638:	b	115dc <__assert_fail@plt+0x920>
   1163c:	ldr	r3, [r1, #4]
   11640:	b	115dc <__assert_fail@plt+0x920>
   11644:	push	{r4, sl, fp, lr}
   11648:	add	fp, sp, #8
   1164c:	mov	r4, r0
   11650:	ldm	r1, {r0, r2}
   11654:	cmp	r0, #0
   11658:	mov	r3, r4
   1165c:	addne	r3, r0, #4
   11660:	str	r2, [r3]
   11664:	ldm	r1, {r0, r2}
   11668:	cmp	r2, #0
   1166c:	addeq	r2, r4, #4
   11670:	str	r0, [r2]
   11674:	mov	r0, #0
   11678:	str	r0, [r1]
   1167c:	str	r0, [r1, #4]
   11680:	mov	r0, r4
   11684:	bl	11698 <__assert_fail@plt+0x9dc>
   11688:	ldr	r0, [r4, #12]
   1168c:	sub	r0, r0, #1
   11690:	str	r0, [r4, #12]
   11694:	pop	{r4, sl, fp, pc}
   11698:	push	{r4, sl, fp, lr}
   1169c:	add	fp, sp, #8
   116a0:	mov	r4, r0
   116a4:	ldr	r0, [r0, #8]
   116a8:	cmp	r0, #0
   116ac:	popeq	{r4, sl, fp, pc}
   116b0:	bl	10b3c <free@plt>
   116b4:	mov	r0, #0
   116b8:	str	r0, [r4, #8]
   116bc:	pop	{r4, sl, fp, pc}
   116c0:	push	{r4, sl, fp, lr}
   116c4:	add	fp, sp, #8
   116c8:	mov	r4, r0
   116cc:	ldr	r0, [r0, #8]
   116d0:	cmp	r0, #0
   116d4:	bne	11718 <__assert_fail@plt+0xa5c>
   116d8:	ldr	r0, [r4, #12]
   116dc:	cmp	r0, #0
   116e0:	beq	11718 <__assert_fail@plt+0xa5c>
   116e4:	mov	r1, #4
   116e8:	bl	12950 <__assert_fail@plt+0x1c94>
   116ec:	str	r0, [r4, #8]
   116f0:	ldr	r0, [r4]
   116f4:	cmp	r0, #0
   116f8:	popeq	{r4, sl, fp, pc}
   116fc:	mov	r1, #0
   11700:	ldr	r2, [r4, #8]
   11704:	str	r0, [r2, r1]
   11708:	add	r1, r1, #4
   1170c:	ldr	r0, [r0, #4]
   11710:	cmp	r0, #0
   11714:	bne	11700 <__assert_fail@plt+0xa44>
   11718:	pop	{r4, sl, fp, pc}
   1171c:	push	{r4, r5, r6, sl, fp, lr}
   11720:	add	fp, sp, #16
   11724:	ldr	r6, [r0]
   11728:	cmp	r6, #0
   1172c:	popeq	{r4, r5, r6, sl, fp, pc}
   11730:	mov	r4, r1
   11734:	mov	r5, r0
   11738:	mov	r0, r5
   1173c:	mov	r1, r6
   11740:	bl	11644 <__assert_fail@plt+0x988>
   11744:	mov	r0, r6
   11748:	blx	r4
   1174c:	ldr	r6, [r5]
   11750:	cmp	r6, #0
   11754:	bne	11738 <__assert_fail@plt+0xa7c>
   11758:	pop	{r4, r5, r6, sl, fp, pc}
   1175c:	push	{r4, r5, r6, sl, fp, lr}
   11760:	add	fp, sp, #16
   11764:	mov	r1, r0
   11768:	movw	r6, #33012	; 0x80f4
   1176c:	movt	r6, #2
   11770:	ldrb	r0, [r6]
   11774:	cmp	r0, #1
   11778:	beq	11810 <__assert_fail@plt+0xb54>
   1177c:	cmp	r1, #0
   11780:	beq	117e4 <__assert_fail@plt+0xb28>
   11784:	movw	r4, #33016	; 0x80f8
   11788:	movt	r4, #2
   1178c:	movw	r2, #32972	; 0x80cc
   11790:	movt	r2, #2
   11794:	mov	r0, r4
   11798:	bl	12fdc <error@@Base+0x2ec>
   1179c:	movw	r5, #33032	; 0x8108
   117a0:	movt	r5, #2
   117a4:	mov	r0, r5
   117a8:	mov	r1, r4
   117ac:	bl	1237c <__assert_fail@plt+0x16c0>
   117b0:	movw	r1, #2876	; 0xb3c
   117b4:	movt	r1, #1
   117b8:	mov	r0, r4
   117bc:	bl	1171c <__assert_fail@plt+0xa60>
   117c0:	ldr	r4, [r5]
   117c4:	cmp	r4, #0
   117c8:	beq	11804 <__assert_fail@plt+0xb48>
   117cc:	ldr	r0, [r4, #8]
   117d0:	bl	1181c <__assert_fail@plt+0xb60>
   117d4:	ldr	r4, [r4, #4]
   117d8:	cmp	r4, #0
   117dc:	bne	117cc <__assert_fail@plt+0xb10>
   117e0:	b	11804 <__assert_fail@plt+0xb48>
   117e4:	mov	r4, #0
   117e8:	movw	r5, #15036	; 0x3abc
   117ec:	movt	r5, #1
   117f0:	ldr	r0, [r5, r4, lsl #2]
   117f4:	bl	1181c <__assert_fail@plt+0xb60>
   117f8:	add	r4, r4, #1
   117fc:	cmp	r4, #110	; 0x6e
   11800:	bne	117f0 <__assert_fail@plt+0xb34>
   11804:	mov	r0, #1
   11808:	strb	r0, [r6]
   1180c:	pop	{r4, r5, r6, sl, fp, pc}
   11810:	movw	r0, #14543	; 0x38cf
   11814:	movt	r0, #1
   11818:	bl	12cf0 <error@@Base>
   1181c:	push	{r4, sl, fp, lr}
   11820:	add	fp, sp, #8
   11824:	mov	r4, r0
   11828:	movw	r0, #33048	; 0x8118
   1182c:	movt	r0, #2
   11830:	mov	r1, r4
   11834:	bl	12164 <__assert_fail@plt+0x14a8>
   11838:	cmp	r0, #0
   1183c:	beq	11854 <__assert_fail@plt+0xb98>
   11840:	movw	r0, #14599	; 0x3907
   11844:	movt	r0, #1
   11848:	mov	r1, r4
   1184c:	pop	{r4, sl, fp, lr}
   11850:	b	12d78 <error@@Base+0x88>
   11854:	mov	r0, #1
   11858:	mov	r1, #12
   1185c:	bl	12950 <__assert_fail@plt+0x1c94>
   11860:	mov	r1, r0
   11864:	str	r4, [r0, #8]
   11868:	movw	r0, #33048	; 0x8118
   1186c:	movt	r0, #2
   11870:	pop	{r4, sl, fp, lr}
   11874:	b	1220c <__assert_fail@plt+0x1550>
   11878:	push	{fp, lr}
   1187c:	mov	fp, sp
   11880:	mov	r1, r0
   11884:	movw	r0, #33012	; 0x80f4
   11888:	movt	r0, #2
   1188c:	ldrb	r0, [r0]
   11890:	cmp	r0, #0
   11894:	beq	118b0 <__assert_fail@plt+0xbf4>
   11898:	movw	r0, #33048	; 0x8118
   1189c:	movt	r0, #2
   118a0:	bl	12164 <__assert_fail@plt+0x14a8>
   118a4:	cmp	r0, #0
   118a8:	movwne	r0, #1
   118ac:	pop	{fp, pc}
   118b0:	movw	r0, #14573	; 0x38ed
   118b4:	movt	r0, #1
   118b8:	bl	12cf0 <error@@Base>
   118bc:	andeq	r0, r0, r0
   118c0:	ldm	r0, {r3, ip}
   118c4:	add	r1, r3, r1
   118c8:	add	r2, ip, r2
   118cc:	stm	r0, {r1, r2}
   118d0:	bx	lr
   118d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   118d8:	add	fp, sp, #24
   118dc:	mov	r8, r3
   118e0:	mov	r5, r2
   118e4:	mov	r7, r1
   118e8:	mov	r6, r0
   118ec:	bl	12164 <__assert_fail@plt+0x14a8>
   118f0:	mov	r4, r0
   118f4:	cmp	r0, #0
   118f8:	bne	11924 <__assert_fail@plt+0xc68>
   118fc:	mov	r0, #1
   11900:	mov	r1, #20
   11904:	bl	12950 <__assert_fail@plt+0x1c94>
   11908:	mov	r4, r0
   1190c:	mov	r0, r7
   11910:	bl	10b6c <strdup@plt>
   11914:	str	r0, [r4, #8]
   11918:	mov	r0, r6
   1191c:	mov	r1, r4
   11920:	bl	1220c <__assert_fail@plt+0x1550>
   11924:	add	r0, r4, #12
   11928:	mov	r1, r5
   1192c:	mov	r2, r8
   11930:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11934:	b	118c0 <__assert_fail@plt+0xc04>
   11938:	push	{r4, r5, r6, r7, fp, lr}
   1193c:	add	fp, sp, #16
   11940:	sub	sp, sp, #8
   11944:	mov	r6, r1
   11948:	mov	r5, r0
   1194c:	movw	r1, #14852	; 0x3a04
   11950:	movt	r1, #1
   11954:	mov	r0, r6
   11958:	bl	129ec <__assert_fail@plt+0x1d30>
   1195c:	mov	r4, r0
   11960:	bl	11aac <__assert_fail@plt+0xdf0>
   11964:	cmp	r0, #0
   11968:	beq	11a90 <__assert_fail@plt+0xdd4>
   1196c:	movw	r0, #41104	; 0xa090
   11970:	movt	r0, #2
   11974:	movw	r1, #15476	; 0x3c74
   11978:	movt	r1, #1
   1197c:	mov	r2, #45	; 0x2d
   11980:	bl	10c98 <strncmp@plt>
   11984:	cmp	r0, #0
   11988:	bne	11a90 <__assert_fail@plt+0xdd4>
   1198c:	mov	r0, r4
   11990:	bl	11aac <__assert_fail@plt+0xdf0>
   11994:	cmp	r0, #0
   11998:	beq	11a90 <__assert_fail@plt+0xdd4>
   1199c:	movw	r0, #41104	; 0xa090
   119a0:	movt	r0, #2
   119a4:	movw	r1, #29267	; 0x7253
   119a8:	movt	r1, #1
   119ac:	bl	10b24 <strcmp@plt>
   119b0:	cmp	r0, #0
   119b4:	bne	11a90 <__assert_fail@plt+0xdd4>
   119b8:	add	r1, sp, #4
   119bc:	mov	r0, r4
   119c0:	bl	11ad4 <__assert_fail@plt+0xe18>
   119c4:	cmp	r0, #0
   119c8:	beq	11a90 <__assert_fail@plt+0xdd4>
   119cc:	mov	r1, sp
   119d0:	mov	r0, r4
   119d4:	bl	11ad4 <__assert_fail@plt+0xe18>
   119d8:	cmp	r0, #0
   119dc:	beq	11a90 <__assert_fail@plt+0xdd4>
   119e0:	mov	r0, r4
   119e4:	bl	11aac <__assert_fail@plt+0xdf0>
   119e8:	cmp	r0, #0
   119ec:	beq	11a90 <__assert_fail@plt+0xdd4>
   119f0:	mov	r0, r4
   119f4:	bl	11aac <__assert_fail@plt+0xdf0>
   119f8:	cmp	r0, #0
   119fc:	beq	11a90 <__assert_fail@plt+0xdd4>
   11a00:	ldr	r2, [sp]
   11a04:	ldr	r1, [sp, #4]
   11a08:	mov	r0, r5
   11a0c:	bl	118c0 <__assert_fail@plt+0xc04>
   11a10:	add	r1, r5, #8
   11a14:	mov	r0, r4
   11a18:	bl	11b18 <__assert_fail@plt+0xe5c>
   11a1c:	mov	r7, r0
   11a20:	add	r1, r5, #416	; 0x1a0
   11a24:	mov	r0, r4
   11a28:	bl	11b18 <__assert_fail@plt+0xe5c>
   11a2c:	mov	r6, r0
   11a30:	add	r1, r5, #824	; 0x338
   11a34:	mov	r0, r4
   11a38:	bl	11b18 <__assert_fail@plt+0xe5c>
   11a3c:	ldr	r0, [sp, #4]
   11a40:	cmp	r0, #1
   11a44:	blt	11a80 <__assert_fail@plt+0xdc4>
   11a48:	add	r1, r5, #920	; 0x398
   11a4c:	mov	r0, r4
   11a50:	bl	11b18 <__assert_fail@plt+0xe5c>
   11a54:	cmp	r7, #1
   11a58:	blt	11a68 <__assert_fail@plt+0xdac>
   11a5c:	add	r1, r5, #992	; 0x3e0
   11a60:	mov	r0, r4
   11a64:	bl	11be4 <__assert_fail@plt+0xf28>
   11a68:	cmp	r6, #1
   11a6c:	blt	11a80 <__assert_fail@plt+0xdc4>
   11a70:	movw	r0, #9048	; 0x2358
   11a74:	add	r1, r5, r0
   11a78:	mov	r0, r4
   11a7c:	bl	11be4 <__assert_fail@plt+0xf28>
   11a80:	mov	r0, r4
   11a84:	bl	12a64 <__assert_fail@plt+0x1da8>
   11a88:	sub	sp, fp, #16
   11a8c:	pop	{r4, r5, r6, r7, fp, pc}
   11a90:	movw	r1, #15542	; 0x3cb6
   11a94:	movt	r1, #1
   11a98:	cmp	r6, #0
   11a9c:	movne	r1, r6
   11aa0:	movw	r0, #15524	; 0x3ca4
   11aa4:	movt	r0, #1
   11aa8:	bl	12d30 <error@@Base+0x40>
   11aac:	push	{fp, lr}
   11ab0:	mov	fp, sp
   11ab4:	mov	r2, r0
   11ab8:	movw	r0, #41104	; 0xa090
   11abc:	movt	r0, #2
   11ac0:	mov	r1, #99	; 0x63
   11ac4:	bl	10b54 <fgets@plt>
   11ac8:	cmp	r0, #0
   11acc:	movwne	r0, #1
   11ad0:	pop	{fp, pc}
   11ad4:	push	{r4, sl, fp, lr}
   11ad8:	add	fp, sp, #8
   11adc:	mov	r4, r1
   11ae0:	bl	11aac <__assert_fail@plt+0xdf0>
   11ae4:	cmp	r0, #0
   11ae8:	moveq	r0, #0
   11aec:	popeq	{r4, sl, fp, pc}
   11af0:	movw	r0, #41104	; 0xa090
   11af4:	movt	r0, #2
   11af8:	movw	r1, #15655	; 0x3d27
   11afc:	movt	r1, #1
   11b00:	mov	r2, r4
   11b04:	bl	10c38 <__isoc99_sscanf@plt>
   11b08:	sub	r0, r0, #1
   11b0c:	clz	r0, r0
   11b10:	lsr	r0, r0, #5
   11b14:	pop	{r4, sl, fp, pc}
   11b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b1c:	add	fp, sp, #28
   11b20:	sub	sp, sp, #12
   11b24:	mov	r4, r1
   11b28:	mov	r6, r0
   11b2c:	bl	11aac <__assert_fail@plt+0xdf0>
   11b30:	mov	r5, #0
   11b34:	cmp	r0, #0
   11b38:	beq	11bd8 <__assert_fail@plt+0xf1c>
   11b3c:	mov	r0, r6
   11b40:	bl	11aac <__assert_fail@plt+0xdf0>
   11b44:	cmp	r0, #0
   11b48:	beq	11bd8 <__assert_fail@plt+0xf1c>
   11b4c:	add	r1, sp, #8
   11b50:	add	r2, sp, #4
   11b54:	mov	r0, r6
   11b58:	bl	1205c <__assert_fail@plt+0x13a0>
   11b5c:	cmp	r0, #0
   11b60:	beq	11bd8 <__assert_fail@plt+0xf1c>
   11b64:	mov	r5, #0
   11b68:	movw	r0, #41104	; 0xa090
   11b6c:	movt	r0, #2
   11b70:	add	r7, r0, #29
   11b74:	add	r9, sp, #8
   11b78:	add	sl, sp, #4
   11b7c:	mov	r0, r7
   11b80:	bl	10c74 <atoi@plt>
   11b84:	mov	r8, r0
   11b88:	cmp	r0, #0
   11b8c:	bne	11bb0 <__assert_fail@plt+0xef4>
   11b90:	mov	r0, r7
   11b94:	movw	r1, #15643	; 0x3d1b
   11b98:	movt	r1, #1
   11b9c:	bl	10b24 <strcmp@plt>
   11ba0:	cmp	r0, #0
   11ba4:	movne	r8, #11
   11ba8:	ldr	r0, [sp, #8]
   11bac:	moveq	r5, r0
   11bb0:	add	r0, r4, r8, lsl #3
   11bb4:	ldr	r2, [sp, #4]
   11bb8:	ldr	r1, [sp, #8]
   11bbc:	bl	118c0 <__assert_fail@plt+0xc04>
   11bc0:	mov	r0, r6
   11bc4:	mov	r1, r9
   11bc8:	mov	r2, sl
   11bcc:	bl	1205c <__assert_fail@plt+0x13a0>
   11bd0:	cmp	r0, #0
   11bd4:	bne	11b7c <__assert_fail@plt+0xec0>
   11bd8:	mov	r0, r5
   11bdc:	sub	sp, fp, #28
   11be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11be8:	add	fp, sp, #28
   11bec:	sub	sp, sp, #12
   11bf0:	mov	r4, r1
   11bf4:	mov	r5, r0
   11bf8:	bl	11aac <__assert_fail@plt+0xdf0>
   11bfc:	cmp	r0, #0
   11c00:	beq	11c80 <__assert_fail@plt+0xfc4>
   11c04:	mov	r0, r5
   11c08:	bl	11aac <__assert_fail@plt+0xdf0>
   11c0c:	cmp	r0, #0
   11c10:	beq	11c80 <__assert_fail@plt+0xfc4>
   11c14:	add	r1, sp, #8
   11c18:	add	r2, sp, #4
   11c1c:	mov	r0, r5
   11c20:	bl	1205c <__assert_fail@plt+0x13a0>
   11c24:	cmp	r0, #0
   11c28:	beq	11c80 <__assert_fail@plt+0xfc4>
   11c2c:	movw	r6, #41104	; 0xa090
   11c30:	movt	r6, #2
   11c34:	mov	sl, #0
   11c38:	add	r7, r6, #29
   11c3c:	add	r8, sp, #8
   11c40:	add	r9, sp, #4
   11c44:	mov	r0, r6
   11c48:	bl	10c20 <strlen@plt>
   11c4c:	add	r0, r6, r0
   11c50:	strb	sl, [r0, #-1]
   11c54:	ldr	r2, [sp, #8]
   11c58:	ldr	r3, [sp, #4]
   11c5c:	mov	r0, r4
   11c60:	mov	r1, r7
   11c64:	bl	118d4 <__assert_fail@plt+0xc18>
   11c68:	mov	r0, r5
   11c6c:	mov	r1, r8
   11c70:	mov	r2, r9
   11c74:	bl	1205c <__assert_fail@plt+0x13a0>
   11c78:	cmp	r0, #0
   11c7c:	bne	11c44 <__assert_fail@plt+0xf88>
   11c80:	sub	sp, fp, #28
   11c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11c8c:	add	fp, sp, #24
   11c90:	sub	sp, sp, #8
   11c94:	mov	r2, r1
   11c98:	mov	r5, r0
   11c9c:	movw	r1, #14827	; 0x39eb
   11ca0:	movt	r1, #1
   11ca4:	mov	r0, r2
   11ca8:	bl	129ec <__assert_fail@plt+0x1d30>
   11cac:	mov	r4, r0
   11cb0:	movw	r1, #15548	; 0x3cbc
   11cb4:	movt	r1, #1
   11cb8:	movw	r2, #15476	; 0x3c74
   11cbc:	movt	r2, #1
   11cc0:	movw	r3, #29267	; 0x7253
   11cc4:	movt	r3, #1
   11cc8:	bl	10c2c <fprintf@plt>
   11ccc:	ldr	r2, [r5]
   11cd0:	movw	r1, #15553	; 0x3cc1
   11cd4:	movt	r1, #1
   11cd8:	mov	r0, r4
   11cdc:	bl	10c2c <fprintf@plt>
   11ce0:	ldr	r2, [r5, #4]
   11ce4:	movw	r1, #15567	; 0x3ccf
   11ce8:	movt	r1, #1
   11cec:	mov	r0, r4
   11cf0:	bl	10c2c <fprintf@plt>
   11cf4:	mov	r0, r4
   11cf8:	mov	r1, r5
   11cfc:	bl	11e08 <__assert_fail@plt+0x114c>
   11d00:	movw	r0, #15589	; 0x3ce5
   11d04:	movt	r0, #1
   11d08:	mov	r7, #1
   11d0c:	mov	r1, #12
   11d10:	mov	r2, #1
   11d14:	mov	r3, r4
   11d18:	bl	10ba8 <fwrite@plt>
   11d1c:	mov	r8, #0
   11d20:	str	r8, [sp]
   11d24:	str	r7, [sp, #4]
   11d28:	add	r1, r5, #8
   11d2c:	movw	r3, #15602	; 0x3cf2
   11d30:	movt	r3, #1
   11d34:	mov	r0, r4
   11d38:	mov	r2, #50	; 0x32
   11d3c:	bl	11e70 <__assert_fail@plt+0x11b4>
   11d40:	str	r8, [sp]
   11d44:	str	r7, [sp, #4]
   11d48:	add	r6, r5, #416	; 0x1a0
   11d4c:	movw	r3, #15621	; 0x3d05
   11d50:	movt	r3, #1
   11d54:	mov	r0, r4
   11d58:	mov	r1, r6
   11d5c:	mov	r2, #50	; 0x32
   11d60:	bl	11e70 <__assert_fail@plt+0x11b4>
   11d64:	str	r7, [sp]
   11d68:	str	r7, [sp, #4]
   11d6c:	add	r1, r5, #824	; 0x338
   11d70:	movw	r3, #15612	; 0x3cfc
   11d74:	movt	r3, #1
   11d78:	mov	r0, r4
   11d7c:	mov	r2, #10
   11d80:	bl	11e70 <__assert_fail@plt+0x11b4>
   11d84:	ldr	r0, [r5]
   11d88:	cmp	r0, #1
   11d8c:	blt	11df4 <__assert_fail@plt+0x1138>
   11d90:	str	r8, [sp]
   11d94:	str	r8, [sp, #4]
   11d98:	add	r1, r5, #920	; 0x398
   11d9c:	movw	r3, #15635	; 0x3d13
   11da0:	movt	r3, #1
   11da4:	mov	r0, r4
   11da8:	mov	r2, #8
   11dac:	bl	11e70 <__assert_fail@plt+0x11b4>
   11db0:	ldr	r0, [r5, #8]
   11db4:	cmp	r0, #1
   11db8:	blt	11dd0 <__assert_fail@plt+0x1114>
   11dbc:	add	r1, r5, #992	; 0x3e0
   11dc0:	movw	r2, #15602	; 0x3cf2
   11dc4:	movt	r2, #1
   11dc8:	mov	r0, r4
   11dcc:	bl	11fa0 <__assert_fail@plt+0x12e4>
   11dd0:	ldr	r0, [r6]
   11dd4:	cmp	r0, #1
   11dd8:	blt	11df4 <__assert_fail@plt+0x1138>
   11ddc:	movw	r0, #9048	; 0x2358
   11de0:	add	r1, r5, r0
   11de4:	movw	r2, #15621	; 0x3d05
   11de8:	movt	r2, #1
   11dec:	mov	r0, r4
   11df0:	bl	11fa0 <__assert_fail@plt+0x12e4>
   11df4:	mov	r0, r4
   11df8:	sub	sp, fp, #24
   11dfc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e00:	b	12a64 <__assert_fail@plt+0x1da8>
   11e04:	nop	{0}
   11e08:	mov	ip, r0
   11e0c:	ldr	r0, [r1]
   11e10:	cmp	r0, #0
   11e14:	beq	11e50 <__assert_fail@plt+0x1194>
   11e18:	ldr	r1, [r1, #4]
   11e1c:	sub	r1, r0, r1
   11e20:	vldr	d16, [pc, #64]	; 11e68 <__assert_fail@plt+0x11ac>
   11e24:	vmov	s0, r1
   11e28:	vmov	s2, r0
   11e2c:	vcvt.f64.s32	d17, s0
   11e30:	vcvt.f64.s32	d18, s2
   11e34:	vmul.f64	d16, d17, d16
   11e38:	vdiv.f64	d16, d16, d18
   11e3c:	vmov	r2, r3, d16
   11e40:	movw	r1, #15668	; 0x3d34
   11e44:	movt	r1, #1
   11e48:	mov	r0, ip
   11e4c:	b	10c2c <fprintf@plt>
   11e50:	movw	r0, #15659	; 0x3d2b
   11e54:	movt	r0, #1
   11e58:	mov	r1, #8
   11e5c:	mov	r2, #1
   11e60:	mov	r3, ip
   11e64:	b	10ba8 <fwrite@plt>
   11e68:	andeq	r0, r0, r0
   11e6c:	subsmi	r0, r9, r0
   11e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e74:	add	fp, sp, #28
   11e78:	sub	sp, sp, #4
   11e7c:	mov	r7, r2
   11e80:	mov	r5, r1
   11e84:	mov	r4, r0
   11e88:	movw	r1, #15674	; 0x3d3a
   11e8c:	movt	r1, #1
   11e90:	mov	r2, r3
   11e94:	bl	10c2c <fprintf@plt>
   11e98:	mov	r0, r4
   11e9c:	mov	r1, #0
   11ea0:	bl	120a8 <__assert_fail@plt+0x13ec>
   11ea4:	ldrb	sl, [fp, #8]
   11ea8:	movw	r0, #15679	; 0x3d3f
   11eac:	movt	r0, #1
   11eb0:	movw	r2, #15686	; 0x3d46
   11eb4:	movt	r2, #1
   11eb8:	cmp	sl, #0
   11ebc:	movne	r2, r0
   11ec0:	movw	r1, #15675	; 0x3d3b
   11ec4:	movt	r1, #1
   11ec8:	mov	r0, r4
   11ecc:	bl	10c2c <fprintf@plt>
   11ed0:	sxth	r6, r7
   11ed4:	lsl	r0, r7, #16
   11ed8:	ldr	r1, [fp, #12]
   11edc:	str	r1, [sp]
   11ee0:	cmp	r0, #65536	; 0x10000
   11ee4:	blt	11f30 <__assert_fail@plt+0x1274>
   11ee8:	mov	r7, #1
   11eec:	movw	r8, #15693	; 0x3d4d
   11ef0:	movt	r8, #1
   11ef4:	mov	r9, #1
   11ef8:	mov	r1, r5
   11efc:	ldr	r0, [r1, r7, lsl #3]!
   11f00:	cmp	r0, #1
   11f04:	blt	11f20 <__assert_fail@plt+0x1264>
   11f08:	mov	r0, r4
   11f0c:	bl	120a8 <__assert_fail@plt+0x13ec>
   11f10:	mov	r0, r4
   11f14:	mov	r1, r8
   11f18:	mov	r2, r7
   11f1c:	bl	10c2c <fprintf@plt>
   11f20:	add	r9, r9, #1
   11f24:	sxth	r7, r9
   11f28:	cmp	r6, r7
   11f2c:	bge	11ef8 <__assert_fail@plt+0x123c>
   11f30:	cmp	sl, #0
   11f34:	beq	11f64 <__assert_fail@plt+0x12a8>
   11f38:	add	r1, r5, r6, lsl #3
   11f3c:	ldr	r0, [r1, #8]!
   11f40:	cmp	r0, #1
   11f44:	blt	11f64 <__assert_fail@plt+0x12a8>
   11f48:	mov	r0, r4
   11f4c:	bl	120a8 <__assert_fail@plt+0x13ec>
   11f50:	movw	r1, #15702	; 0x3d56
   11f54:	movt	r1, #1
   11f58:	mov	r0, r4
   11f5c:	mov	r2, r6
   11f60:	bl	10c2c <fprintf@plt>
   11f64:	ldr	r0, [sp]
   11f68:	tst	r0, #255	; 0xff
   11f6c:	subeq	sp, fp, #28
   11f70:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f74:	mov	r0, r4
   11f78:	mov	r1, r5
   11f7c:	bl	120a8 <__assert_fail@plt+0x13ec>
   11f80:	movw	r0, #15643	; 0x3d1b
   11f84:	movt	r0, #1
   11f88:	mov	r1, #7
   11f8c:	mov	r2, #1
   11f90:	mov	r3, r4
   11f94:	sub	sp, fp, #28
   11f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f9c:	b	10ba8 <fwrite@plt>
   11fa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11fa4:	add	fp, sp, #24
   11fa8:	mov	r6, r2
   11fac:	mov	r4, r1
   11fb0:	mov	r5, r0
   11fb4:	mov	r0, r1
   11fb8:	bl	122b8 <__assert_fail@plt+0x15fc>
   11fbc:	movw	r0, #8052	; 0x1f74
   11fc0:	ldr	r0, [r4, r0]!
   11fc4:	mov	r7, r4
   11fc8:	ldr	r1, [r7, #-4]!
   11fcc:	movw	r2, #8472	; 0x2118
   11fd0:	movt	r2, #1
   11fd4:	bl	1369c <error@@Base+0x9ac>
   11fd8:	movw	r1, #15674	; 0x3d3a
   11fdc:	movt	r1, #1
   11fe0:	mov	r0, r5
   11fe4:	mov	r2, r6
   11fe8:	bl	10c2c <fprintf@plt>
   11fec:	mov	r6, #0
   11ff0:	mov	r0, r5
   11ff4:	mov	r1, #0
   11ff8:	bl	120a8 <__assert_fail@plt+0x13ec>
   11ffc:	mov	r0, #10
   12000:	mov	r1, r5
   12004:	bl	10c5c <fputc@plt>
   12008:	ldr	r0, [r4]
   1200c:	cmp	r0, #1
   12010:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   12014:	movw	r8, #15675	; 0x3d3b
   12018:	movt	r8, #1
   1201c:	ldr	r0, [r7]
   12020:	ldr	r0, [r0, r6, lsl #2]
   12024:	add	r1, r0, #12
   12028:	mov	r0, r5
   1202c:	bl	120a8 <__assert_fail@plt+0x13ec>
   12030:	ldr	r0, [r7]
   12034:	ldr	r0, [r0, r6, lsl #2]
   12038:	ldr	r2, [r0, #8]
   1203c:	mov	r0, r5
   12040:	mov	r1, r8
   12044:	bl	10c2c <fprintf@plt>
   12048:	add	r6, r6, #1
   1204c:	ldr	r0, [r4]
   12050:	cmp	r6, r0
   12054:	blt	1201c <__assert_fail@plt+0x1360>
   12058:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1205c:	push	{r4, r5, fp, lr}
   12060:	add	fp, sp, #8
   12064:	mov	r4, r2
   12068:	mov	r5, r1
   1206c:	bl	11aac <__assert_fail@plt+0xdf0>
   12070:	cmp	r0, #0
   12074:	moveq	r0, #0
   12078:	popeq	{r4, r5, fp, pc}
   1207c:	movw	r0, #41104	; 0xa090
   12080:	movt	r0, #2
   12084:	movw	r1, #15651	; 0x3d23
   12088:	movt	r1, #1
   1208c:	mov	r2, r5
   12090:	mov	r3, r4
   12094:	bl	10c38 <__isoc99_sscanf@plt>
   12098:	sub	r0, r0, #2
   1209c:	clz	r0, r0
   120a0:	lsr	r0, r0, #5
   120a4:	pop	{r4, r5, fp, pc}
   120a8:	push	{r4, r5, fp, lr}
   120ac:	add	fp, sp, #8
   120b0:	mov	r4, r0
   120b4:	cmp	r1, #0
   120b8:	beq	120e4 <__assert_fail@plt+0x1428>
   120bc:	mov	r5, r1
   120c0:	ldm	r1, {r2, r3}
   120c4:	movw	r1, #15711	; 0x3d5f
   120c8:	movt	r1, #1
   120cc:	mov	r0, r4
   120d0:	bl	10c2c <fprintf@plt>
   120d4:	mov	r0, r4
   120d8:	mov	r1, r5
   120dc:	bl	11e08 <__assert_fail@plt+0x114c>
   120e0:	b	120fc <__assert_fail@plt+0x1440>
   120e4:	movw	r0, #15722	; 0x3d6a
   120e8:	movt	r0, #1
   120ec:	mov	r1, #26
   120f0:	mov	r2, #1
   120f4:	mov	r3, r4
   120f8:	bl	10ba8 <fwrite@plt>
   120fc:	movw	r0, #15749	; 0x3d85
   12100:	movt	r0, #1
   12104:	mov	r1, #3
   12108:	mov	r2, #1
   1210c:	mov	r3, r4
   12110:	pop	{r4, r5, fp, lr}
   12114:	b	10ba8 <fwrite@plt>
   12118:	ldr	r1, [r1, #8]
   1211c:	ldr	r0, [r0, #8]
   12120:	b	12970 <__assert_fail@plt+0x1cb4>
   12124:	push	{r4, r5, r6, sl, fp, lr}
   12128:	add	fp, sp, #16
   1212c:	mov	r4, r0
   12130:	movw	r6, #503	; 0x1f7
   12134:	mov	r5, r0
   12138:	mov	r0, r5
   1213c:	bl	115c0 <__assert_fail@plt+0x904>
   12140:	subs	r6, r6, #1
   12144:	add	r5, r5, #16
   12148:	bne	12138 <__assert_fail@plt+0x147c>
   1214c:	movw	r0, #8052	; 0x1f74
   12150:	mov	r1, #0
   12154:	str	r1, [r4, r0]
   12158:	movw	r0, #8048	; 0x1f70
   1215c:	str	r1, [r4, r0]
   12160:	pop	{r4, r5, r6, sl, fp, pc}
   12164:	push	{r4, r5, r6, sl, fp, lr}
   12168:	add	fp, sp, #16
   1216c:	mov	r5, r1
   12170:	mov	r4, r0
   12174:	mov	r0, r1
   12178:	bl	121c0 <__assert_fail@plt+0x1504>
   1217c:	ldr	r6, [r4, r0, lsl #4]
   12180:	mov	r4, #0
   12184:	cmp	r6, #0
   12188:	bne	121a0 <__assert_fail@plt+0x14e4>
   1218c:	mov	r0, r4
   12190:	pop	{r4, r5, r6, sl, fp, pc}
   12194:	ldr	r6, [r6, #4]
   12198:	cmp	r6, #0
   1219c:	beq	1218c <__assert_fail@plt+0x14d0>
   121a0:	ldr	r1, [r6, #8]
   121a4:	mov	r0, r5
   121a8:	bl	10b24 <strcmp@plt>
   121ac:	cmp	r0, #0
   121b0:	bne	12194 <__assert_fail@plt+0x14d8>
   121b4:	mov	r4, r6
   121b8:	mov	r0, r4
   121bc:	pop	{r4, r5, r6, sl, fp, pc}
   121c0:	ldrb	r1, [r0]
   121c4:	cmp	r1, #0
   121c8:	moveq	r0, #0
   121cc:	sxtheq	r0, r0
   121d0:	bxeq	lr
   121d4:	add	r2, r0, #1
   121d8:	mov	r0, #0
   121dc:	uxtab	r0, r0, r1
   121e0:	ldrb	r1, [r2], #1
   121e4:	cmp	r1, #0
   121e8:	bne	121dc <__assert_fail@plt+0x1520>
   121ec:	movw	r1, #20065	; 0x4e61
   121f0:	movt	r1, #33354	; 0x824a
   121f4:	umull	r1, r2, r0, r1
   121f8:	lsr	r1, r2, #8
   121fc:	movw	r2, #503	; 0x1f7
   12200:	mls	r0, r1, r2, r0
   12204:	sxth	r0, r0
   12208:	bx	lr
   1220c:	push	{r4, r5, fp, lr}
   12210:	add	fp, sp, #8
   12214:	mov	r4, r1
   12218:	mov	r5, r0
   1221c:	ldr	r0, [r1, #8]
   12220:	bl	121c0 <__assert_fail@plt+0x1504>
   12224:	add	r0, r5, r0, lsl #4
   12228:	mov	r1, r4
   1222c:	bl	115cc <__assert_fail@plt+0x910>
   12230:	mov	r0, r5
   12234:	bl	1224c <__assert_fail@plt+0x1590>
   12238:	movw	r0, #8052	; 0x1f74
   1223c:	ldr	r0, [r5, r0]!
   12240:	add	r0, r0, #1
   12244:	str	r0, [r5]
   12248:	pop	{r4, r5, fp, pc}
   1224c:	push	{r4, sl, fp, lr}
   12250:	add	fp, sp, #8
   12254:	mov	r4, r0
   12258:	movw	r0, #8048	; 0x1f70
   1225c:	ldr	r0, [r4, r0]!
   12260:	cmp	r0, #0
   12264:	popeq	{r4, sl, fp, pc}
   12268:	bl	10b3c <free@plt>
   1226c:	mov	r0, #0
   12270:	str	r0, [r4]
   12274:	pop	{r4, sl, fp, pc}
   12278:	push	{r4, r5, fp, lr}
   1227c:	add	fp, sp, #8
   12280:	mov	r4, r1
   12284:	mov	r5, r0
   12288:	ldr	r0, [r1, #8]
   1228c:	bl	121c0 <__assert_fail@plt+0x1504>
   12290:	add	r0, r5, r0, lsl #4
   12294:	mov	r1, r4
   12298:	bl	11644 <__assert_fail@plt+0x988>
   1229c:	mov	r0, r5
   122a0:	bl	1224c <__assert_fail@plt+0x1590>
   122a4:	movw	r0, #8052	; 0x1f74
   122a8:	ldr	r0, [r5, r0]!
   122ac:	sub	r0, r0, #1
   122b0:	str	r0, [r5]
   122b4:	pop	{r4, r5, fp, pc}
   122b8:	push	{r4, r5, fp, lr}
   122bc:	add	fp, sp, #8
   122c0:	mov	r4, r0
   122c4:	movw	r0, #8048	; 0x1f70
   122c8:	mov	r5, r4
   122cc:	ldr	r0, [r5, r0]!
   122d0:	cmp	r0, #0
   122d4:	bne	12330 <__assert_fail@plt+0x1674>
   122d8:	movw	r0, #8052	; 0x1f74
   122dc:	ldr	r0, [r4, r0]
   122e0:	cmp	r0, #0
   122e4:	popeq	{r4, r5, fp, pc}
   122e8:	mov	r1, #4
   122ec:	bl	12950 <__assert_fail@plt+0x1c94>
   122f0:	str	r0, [r5]
   122f4:	mov	r0, #0
   122f8:	movw	ip, #503	; 0x1f7
   122fc:	mov	r2, #0
   12300:	ldr	r3, [r4, r2, lsl #4]
   12304:	cmp	r3, #0
   12308:	beq	12324 <__assert_fail@plt+0x1668>
   1230c:	ldr	r1, [r5]
   12310:	str	r3, [r1, r0, lsl #2]
   12314:	add	r0, r0, #1
   12318:	ldr	r3, [r3, #4]
   1231c:	cmp	r3, #0
   12320:	bne	1230c <__assert_fail@plt+0x1650>
   12324:	add	r2, r2, #1
   12328:	cmp	r2, ip
   1232c:	bne	12300 <__assert_fail@plt+0x1644>
   12330:	pop	{r4, r5, fp, pc}
   12334:	push	{r4, r5, r6, r7, fp, lr}
   12338:	add	fp, sp, #16
   1233c:	mov	r5, r1
   12340:	mov	r4, r0
   12344:	mov	r6, #0
   12348:	movw	r7, #8048	; 0x1f70
   1234c:	add	r0, r4, r6
   12350:	mov	r1, r5
   12354:	bl	1171c <__assert_fail@plt+0xa60>
   12358:	add	r6, r6, #16
   1235c:	cmp	r6, r7
   12360:	bne	1234c <__assert_fail@plt+0x1690>
   12364:	mov	r0, r4
   12368:	bl	1224c <__assert_fail@plt+0x1590>
   1236c:	movw	r0, #8052	; 0x1f74
   12370:	mov	r1, #0
   12374:	str	r1, [r4, r0]
   12378:	pop	{r4, r5, r6, r7, fp, pc}
   1237c:	push	{r4, r5, r6, sl, fp, lr}
   12380:	add	fp, sp, #16
   12384:	mov	r4, r0
   12388:	ldr	r5, [r1]
   1238c:	mov	r0, r5
   12390:	bl	123dc <__assert_fail@plt+0x1720>
   12394:	cmp	r0, #0
   12398:	popeq	{r4, r5, r6, sl, fp, pc}
   1239c:	mov	r6, r0
   123a0:	ldr	r0, [r5, #12]
   123a4:	bl	12644 <__assert_fail@plt+0x1988>
   123a8:	cmp	r0, #0
   123ac:	beq	123c0 <__assert_fail@plt+0x1704>
   123b0:	mov	r0, r4
   123b4:	mov	r1, r5
   123b8:	mov	r2, r6
   123bc:	bl	12670 <__assert_fail@plt+0x19b4>
   123c0:	ldr	r5, [r6, #4]
   123c4:	mov	r0, r5
   123c8:	bl	123dc <__assert_fail@plt+0x1720>
   123cc:	mov	r6, r0
   123d0:	cmp	r0, #0
   123d4:	bne	123a0 <__assert_fail@plt+0x16e4>
   123d8:	pop	{r4, r5, r6, sl, fp, pc}
   123dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123e0:	add	fp, sp, #28
   123e4:	sub	sp, sp, #20
   123e8:	str	r0, [sp, #8]
   123ec:	cmp	r0, #0
   123f0:	moveq	r0, #0
   123f4:	subeq	sp, fp, #28
   123f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123fc:	ldr	r0, [sp, #8]
   12400:	cmp	r0, #0
   12404:	beq	12630 <__assert_fail@plt+0x1974>
   12408:	mov	r5, #17
   1240c:	add	r4, sp, #4
   12410:	mov	sl, #1
   12414:	mov	r8, #13312	; 0x3400
   12418:	movw	r9, #33664	; 0x8380
   1241c:	movt	r9, #1
   12420:	mov	r7, r5
   12424:	mov	r0, r4
   12428:	bl	126fc <__assert_fail@plt+0x1a40>
   1242c:	mov	r4, r0
   12430:	bl	12750 <__assert_fail@plt+0x1a94>
   12434:	mov	r5, r0
   12438:	mov	r0, r4
   1243c:	bl	126fc <__assert_fail@plt+0x1a40>
   12440:	bl	12750 <__assert_fail@plt+0x1a94>
   12444:	mov	r6, r0
   12448:	mov	r0, r4
   1244c:	bl	12764 <__assert_fail@plt+0x1aa8>
   12450:	bl	12750 <__assert_fail@plt+0x1a94>
   12454:	cmp	r5, #1
   12458:	cmpeq	r6, #2
   1245c:	beq	125b8 <__assert_fail@plt+0x18fc>
   12460:	sub	r1, r5, #1
   12464:	cmp	r1, #3
   12468:	subcs	r1, r6, #1
   1246c:	cmpcs	r1, #3
   12470:	bcc	12634 <__assert_fail@plt+0x1978>
   12474:	orr	r1, r6, #1
   12478:	orr	r2, r5, #1
   1247c:	cmp	r2, #9
   12480:	cmpeq	r1, #9
   12484:	beq	125b8 <__assert_fail@plt+0x18fc>
   12488:	cmp	r2, #9
   1248c:	bne	124ac <__assert_fail@plt+0x17f0>
   12490:	cmp	r6, #13
   12494:	bhi	124ac <__assert_fail@plt+0x17f0>
   12498:	tst	r8, sl, lsl r6
   1249c:	beq	124ac <__assert_fail@plt+0x17f0>
   124a0:	orr	r3, r0, #1
   124a4:	cmp	r3, #9
   124a8:	beq	125b8 <__assert_fail@plt+0x18fc>
   124ac:	orr	r3, r7, #1
   124b0:	cmp	r3, #9
   124b4:	bne	124d0 <__assert_fail@plt+0x1814>
   124b8:	cmp	r5, #13
   124bc:	bhi	124d0 <__assert_fail@plt+0x1814>
   124c0:	tst	r8, sl, lsl r5
   124c4:	beq	124d0 <__assert_fail@plt+0x1814>
   124c8:	cmp	r1, #9
   124cc:	beq	125b8 <__assert_fail@plt+0x18fc>
   124d0:	cmp	r5, #8
   124d4:	cmpeq	r6, #10
   124d8:	beq	125b8 <__assert_fail@plt+0x18fc>
   124dc:	cmp	r5, #8
   124e0:	cmpeq	r6, #11
   124e4:	beq	125a4 <__assert_fail@plt+0x18e8>
   124e8:	cmp	r7, #8
   124ec:	cmpeq	r5, #11
   124f0:	beq	125b0 <__assert_fail@plt+0x18f4>
   124f4:	sub	r3, r5, #15
   124f8:	clz	r3, r3
   124fc:	lsr	lr, r3, #5
   12500:	sub	r2, r2, #9
   12504:	clz	r2, r2
   12508:	lsr	ip, r2, #5
   1250c:	orr	r2, lr, ip
   12510:	sub	r3, r6, #15
   12514:	clz	r3, r3
   12518:	lsr	r3, r3, #5
   1251c:	tst	r2, r3
   12520:	subeq	r1, r1, #9
   12524:	clzeq	r1, r1
   12528:	lsreq	r1, r1, #5
   1252c:	andseq	r1, lr, r1
   12530:	bne	125b8 <__assert_fail@plt+0x18fc>
   12534:	cmp	r7, #15
   12538:	bne	12568 <__assert_fail@plt+0x18ac>
   1253c:	sub	r1, r5, #10
   12540:	clz	r1, r1
   12544:	lsr	r1, r1, #5
   12548:	orr	r2, r5, #2
   1254c:	sub	r2, r2, #14
   12550:	clz	r2, r2
   12554:	lsr	r2, r2, #5
   12558:	orr	r1, r1, r2
   1255c:	cmp	r1, #1
   12560:	cmpeq	r6, #15
   12564:	beq	125b8 <__assert_fail@plt+0x18fc>
   12568:	cmp	r5, #15
   1256c:	bne	125c8 <__assert_fail@plt+0x190c>
   12570:	sub	r1, r6, #10
   12574:	clz	r1, r1
   12578:	lsr	r1, r1, #5
   1257c:	orr	r2, r6, #2
   12580:	sub	r2, r2, #14
   12584:	clz	r2, r2
   12588:	lsr	r2, r2, #5
   1258c:	orr	r1, r1, r2
   12590:	cmp	r1, #1
   12594:	bne	125d4 <__assert_fail@plt+0x1918>
   12598:	cmp	r0, #15
   1259c:	beq	125b8 <__assert_fail@plt+0x18fc>
   125a0:	b	125d4 <__assert_fail@plt+0x1918>
   125a4:	cmp	r0, #8
   125a8:	beq	125b8 <__assert_fail@plt+0x18fc>
   125ac:	b	124e8 <__assert_fail@plt+0x182c>
   125b0:	cmp	r6, #8
   125b4:	bne	124f4 <__assert_fail@plt+0x1838>
   125b8:	ldr	r0, [r4, #4]
   125bc:	cmp	r0, #0
   125c0:	bne	12420 <__assert_fail@plt+0x1764>
   125c4:	b	12634 <__assert_fail@plt+0x1978>
   125c8:	cmp	r5, #7
   125cc:	cmpeq	r6, #7
   125d0:	beq	125b8 <__assert_fail@plt+0x18fc>
   125d4:	cmp	r6, #16
   125d8:	bne	12604 <__assert_fail@plt+0x1948>
   125dc:	orr	r0, r5, #8
   125e0:	sub	r0, r0, #15
   125e4:	clz	r0, r0
   125e8:	lsr	r0, r0, #5
   125ec:	orr	r0, r0, ip
   125f0:	sub	r1, r5, #16
   125f4:	clz	r1, r1
   125f8:	lsr	r1, r1, #5
   125fc:	orrs	r0, r1, r0
   12600:	bne	125b8 <__assert_fail@plt+0x18fc>
   12604:	cmp	r5, #16
   12608:	bne	12620 <__assert_fail@plt+0x1964>
   1260c:	cmp	r6, #16
   12610:	bhi	12634 <__assert_fail@plt+0x1978>
   12614:	tst	r9, sl, lsl r6
   12618:	bne	125b8 <__assert_fail@plt+0x18fc>
   1261c:	b	12634 <__assert_fail@plt+0x1978>
   12620:	cmp	r5, #5
   12624:	cmpeq	r6, #5
   12628:	beq	125b8 <__assert_fail@plt+0x18fc>
   1262c:	b	12634 <__assert_fail@plt+0x1978>
   12630:	add	r4, sp, #4
   12634:	mov	r0, r4
   12638:	bl	12778 <__assert_fail@plt+0x1abc>
   1263c:	sub	sp, fp, #28
   12640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12644:	push	{fp, lr}
   12648:	mov	fp, sp
   1264c:	bl	10b48 <utf8proc_get_property@plt>
   12650:	ldrsh	r1, [r0]
   12654:	sub	r2, r1, #1
   12658:	mov	r0, #1
   1265c:	cmp	r2, #12
   12660:	popcc	{fp, pc}
   12664:	cmp	r1, #29
   12668:	movne	r0, #0
   1266c:	pop	{fp, pc}
   12670:	push	{r4, r5, r6, r7, fp, lr}
   12674:	add	fp, sp, #16
   12678:	mov	r5, r1
   1267c:	mov	r4, r0
   12680:	ldr	r6, [r2, #4]
   12684:	mov	r0, r1
   12688:	mov	r1, r6
   1268c:	bl	12838 <__assert_fail@plt+0x1b7c>
   12690:	add	r0, r0, #1
   12694:	bl	10bcc <malloc@plt>
   12698:	mov	r7, r0
   1269c:	mov	r1, r5
   126a0:	mov	r2, r6
   126a4:	bl	128dc <__assert_fail@plt+0x1c20>
   126a8:	mov	r0, #1
   126ac:	mov	r1, #12
   126b0:	bl	12950 <__assert_fail@plt+0x1c94>
   126b4:	mov	r5, r0
   126b8:	mov	r0, r7
   126bc:	bl	10c50 <utf8proc_NFC@plt>
   126c0:	str	r0, [r5, #8]
   126c4:	mov	r0, r4
   126c8:	mov	r1, r5
   126cc:	bl	1161c <__assert_fail@plt+0x960>
   126d0:	mov	r0, r7
   126d4:	pop	{r4, r5, r6, r7, fp, lr}
   126d8:	b	10b3c <free@plt>
   126dc:	push	{r4, sl, fp, lr}
   126e0:	add	fp, sp, #8
   126e4:	mov	r4, r0
   126e8:	ldr	r0, [r0, #8]
   126ec:	bl	10b3c <free@plt>
   126f0:	mov	r0, r4
   126f4:	pop	{r4, sl, fp, lr}
   126f8:	b	10b3c <free@plt>
   126fc:	push	{r4, r5, fp, lr}
   12700:	add	fp, sp, #8
   12704:	mov	r4, #0
   12708:	cmp	r0, #0
   1270c:	beq	1271c <__assert_fail@plt+0x1a60>
   12710:	ldr	r5, [r0, #4]
   12714:	cmp	r5, #0
   12718:	bne	12730 <__assert_fail@plt+0x1a74>
   1271c:	mov	r0, r4
   12720:	pop	{r4, r5, fp, pc}
   12724:	ldr	r5, [r5, #4]
   12728:	cmp	r5, #0
   1272c:	beq	1271c <__assert_fail@plt+0x1a60>
   12730:	mov	r0, r5
   12734:	bl	12750 <__assert_fail@plt+0x1a94>
   12738:	orr	r0, r0, #2
   1273c:	cmp	r0, #6
   12740:	beq	12724 <__assert_fail@plt+0x1a68>
   12744:	mov	r4, r5
   12748:	mov	r0, r4
   1274c:	pop	{r4, r5, fp, pc}
   12750:	cmp	r0, #0
   12754:	moveq	r0, #18
   12758:	bxeq	lr
   1275c:	ldr	r0, [r0, #12]
   12760:	b	127c0 <__assert_fail@plt+0x1b04>
   12764:	push	{fp, lr}
   12768:	mov	fp, sp
   1276c:	bl	126fc <__assert_fail@plt+0x1a40>
   12770:	pop	{fp, lr}
   12774:	b	126fc <__assert_fail@plt+0x1a40>
   12778:	push	{r4, r5, fp, lr}
   1277c:	add	fp, sp, #8
   12780:	cmp	r0, #0
   12784:	moveq	r4, #0
   12788:	moveq	r0, r4
   1278c:	popeq	{r4, r5, fp, pc}
   12790:	mov	r5, r0
   12794:	mov	r4, r5
   12798:	ldr	r5, [r5, #4]
   1279c:	cmp	r5, #0
   127a0:	beq	127b8 <__assert_fail@plt+0x1afc>
   127a4:	mov	r0, r5
   127a8:	bl	12750 <__assert_fail@plt+0x1a94>
   127ac:	orr	r0, r0, #2
   127b0:	cmp	r0, #6
   127b4:	beq	12794 <__assert_fail@plt+0x1ad8>
   127b8:	mov	r0, r4
   127bc:	pop	{r4, r5, fp, pc}
   127c0:	mov	r1, #0
   127c4:	movw	r2, #1092	; 0x444
   127c8:	b	127cc <__assert_fail@plt+0x1b10>
   127cc:	push	{r4, r5, fp, lr}
   127d0:	add	fp, sp, #8
   127d4:	mov	lr, r0
   127d8:	mov	r0, #0
   127dc:	cmp	r2, r1
   127e0:	popcc	{r4, r5, fp, pc}
   127e4:	movw	ip, #15756	; 0x3d8c
   127e8:	movt	ip, #1
   127ec:	b	12808 <__assert_fail@plt+0x1b4c>
   127f0:	add	r1, ip, r4, lsl #2
   127f4:	ldr	r4, [r1, #4]
   127f8:	cmp	r4, lr
   127fc:	bcs	12830 <__assert_fail@plt+0x1b74>
   12800:	add	r1, r3, #1
   12804:	b	12824 <__assert_fail@plt+0x1b68>
   12808:	sub	r3, r2, r1
   1280c:	add	r3, r1, r3, lsr #1
   12810:	add	r4, r3, r3, lsl #1
   12814:	ldr	r5, [ip, r4, lsl #2]
   12818:	cmp	r5, lr
   1281c:	bls	127f0 <__assert_fail@plt+0x1b34>
   12820:	sub	r2, r3, #1
   12824:	cmp	r2, r1
   12828:	bcs	12808 <__assert_fail@plt+0x1b4c>
   1282c:	pop	{r4, r5, fp, pc}
   12830:	ldr	r0, [r1, #8]
   12834:	pop	{r4, r5, fp, pc}
   12838:	push	{r4, r5, r6, r7, fp, lr}
   1283c:	add	fp, sp, #16
   12840:	sub	sp, sp, #8
   12844:	cmp	r0, r1
   12848:	beq	1288c <__assert_fail@plt+0x1bd0>
   1284c:	mov	r5, r1
   12850:	mov	r6, r0
   12854:	mov	r4, #0
   12858:	add	r7, sp, #4
   1285c:	cmp	r6, #0
   12860:	beq	1289c <__assert_fail@plt+0x1be0>
   12864:	ldr	r0, [r6, #12]
   12868:	mov	r1, r7
   1286c:	bl	10b60 <utf8proc_encode_char@plt>
   12870:	cmp	r0, #0
   12874:	beq	128bc <__assert_fail@plt+0x1c00>
   12878:	add	r4, r0, r4
   1287c:	ldr	r6, [r6, #4]
   12880:	cmp	r6, r5
   12884:	bne	1285c <__assert_fail@plt+0x1ba0>
   12888:	b	12890 <__assert_fail@plt+0x1bd4>
   1288c:	mov	r4, #0
   12890:	mov	r0, r4
   12894:	sub	sp, fp, #16
   12898:	pop	{r4, r5, r6, r7, fp, pc}
   1289c:	movw	r0, #28879	; 0x70cf
   128a0:	movt	r0, #1
   128a4:	movw	r1, #28872	; 0x70c8
   128a8:	movt	r1, #1
   128ac:	movw	r3, #28895	; 0x70df
   128b0:	movt	r3, #1
   128b4:	mov	r2, #249	; 0xf9
   128b8:	bl	10cbc <__assert_fail@plt>
   128bc:	movw	r0, #28921	; 0x70f9
   128c0:	movt	r0, #1
   128c4:	movw	r1, #28872	; 0x70c8
   128c8:	movt	r1, #1
   128cc:	movw	r3, #28895	; 0x70df
   128d0:	movt	r3, #1
   128d4:	mov	r2, #253	; 0xfd
   128d8:	bl	10cbc <__assert_fail@plt>
   128dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   128e0:	add	fp, sp, #24
   128e4:	mov	r4, r0
   128e8:	mov	r8, #0
   128ec:	cmp	r1, r2
   128f0:	mov	r7, #0
   128f4:	beq	12928 <__assert_fail@plt+0x1c6c>
   128f8:	mov	r5, r2
   128fc:	mov	r6, r1
   12900:	mov	r7, #0
   12904:	cmp	r6, #0
   12908:	beq	12930 <__assert_fail@plt+0x1c74>
   1290c:	add	r1, r4, r7
   12910:	ldr	r0, [r6, #12]
   12914:	bl	10b60 <utf8proc_encode_char@plt>
   12918:	add	r7, r0, r7
   1291c:	ldr	r6, [r6, #4]
   12920:	cmp	r6, r5
   12924:	bne	12904 <__assert_fail@plt+0x1c48>
   12928:	strb	r8, [r4, r7]
   1292c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12930:	movw	r0, #28879	; 0x70cf
   12934:	movt	r0, #1
   12938:	movw	r1, #28872	; 0x70c8
   1293c:	movt	r1, #1
   12940:	movw	r3, #28940	; 0x710c
   12944:	movt	r3, #1
   12948:	movw	r2, #269	; 0x10d
   1294c:	bl	10cbc <__assert_fail@plt>
   12950:	push	{fp, lr}
   12954:	mov	fp, sp
   12958:	bl	10b18 <calloc@plt>
   1295c:	cmp	r0, #0
   12960:	popne	{fp, pc}
   12964:	movw	r0, #28964	; 0x7124
   12968:	movt	r0, #1
   1296c:	bl	12cf0 <error@@Base>
   12970:	push	{r4, r5, r6, sl, fp, lr}
   12974:	add	fp, sp, #16
   12978:	mov	r2, r0
   1297c:	ldrb	ip, [r1]
   12980:	ldrb	r3, [r0]
   12984:	mov	r0, #0
   12988:	cmp	r3, #0
   1298c:	beq	129c4 <__assert_fail@plt+0x1d08>
   12990:	add	lr, r1, #1
   12994:	add	r6, r2, #1
   12998:	mov	r2, #0
   1299c:	uxtb	r4, ip
   129a0:	uxtb	r5, r3
   129a4:	cmp	r5, r4
   129a8:	bne	129d4 <__assert_fail@plt+0x1d18>
   129ac:	ldrb	ip, [lr, r2]
   129b0:	ldrb	r3, [r6, r2]
   129b4:	add	r2, r2, #1
   129b8:	cmp	r3, #0
   129bc:	bne	1299c <__assert_fail@plt+0x1ce0>
   129c0:	b	129c8 <__assert_fail@plt+0x1d0c>
   129c4:	mov	r2, #0
   129c8:	cmp	ip, #0
   129cc:	popeq	{r4, r5, r6, sl, fp, pc}
   129d0:	mov	r3, #0
   129d4:	ldrb	r1, [r1, r2]
   129d8:	uxtb	r2, r3
   129dc:	mov	r0, #1
   129e0:	cmp	r2, r1
   129e4:	mvncc	r0, #0
   129e8:	pop	{r4, r5, r6, sl, fp, pc}
   129ec:	push	{r4, r5, fp, lr}
   129f0:	add	fp, sp, #8
   129f4:	mov	r5, r1
   129f8:	cmp	r0, #0
   129fc:	beq	12a30 <__assert_fail@plt+0x1d74>
   12a00:	mov	r4, r0
   12a04:	mov	r1, r5
   12a08:	bl	10b30 <fopen@plt>
   12a0c:	cmp	r0, #0
   12a10:	popne	{r4, r5, fp, pc}
   12a14:	ldrb	r0, [r5]
   12a18:	cmp	r0, #119	; 0x77
   12a1c:	bne	12a54 <__assert_fail@plt+0x1d98>
   12a20:	movw	r0, #28990	; 0x713e
   12a24:	movt	r0, #1
   12a28:	mov	r1, r4
   12a2c:	bl	12d30 <error@@Base+0x40>
   12a30:	ldrb	r0, [r5]
   12a34:	movw	r1, #33000	; 0x80e8
   12a38:	movt	r1, #2
   12a3c:	movw	r2, #33004	; 0x80ec
   12a40:	movt	r2, #2
   12a44:	cmp	r0, #114	; 0x72
   12a48:	moveq	r2, r1
   12a4c:	ldr	r0, [r2]
   12a50:	pop	{r4, r5, fp, pc}
   12a54:	movw	r0, #29012	; 0x7154
   12a58:	movt	r0, #1
   12a5c:	mov	r1, r4
   12a60:	bl	12d30 <error@@Base+0x40>
   12a64:	movw	r1, #33000	; 0x80e8
   12a68:	movt	r1, #2
   12a6c:	ldr	r1, [r1]
   12a70:	cmp	r1, r0
   12a74:	movwne	r1, #33004	; 0x80ec
   12a78:	movtne	r1, #2
   12a7c:	ldrne	r1, [r1]
   12a80:	cmpne	r1, r0
   12a84:	bxeq	lr
   12a88:	b	10c44 <fclose@plt>
   12a8c:	push	{fp, lr}
   12a90:	mov	fp, sp
   12a94:	sub	sp, sp, #88	; 0x58
   12a98:	mov	r1, sp
   12a9c:	bl	1382c <error@@Base+0xb3c>
   12aa0:	clz	r0, r0
   12aa4:	lsr	r0, r0, #5
   12aa8:	mov	sp, fp
   12aac:	pop	{fp, pc}
   12ab0:	push	{r4, sl, fp, lr}
   12ab4:	add	fp, sp, #8
   12ab8:	movw	r0, #41204	; 0xa0f4
   12abc:	movt	r0, #2
   12ac0:	ldrh	r1, [r0]
   12ac4:	add	r1, r1, #1
   12ac8:	strh	r1, [r0]
   12acc:	sxth	r0, r1
   12ad0:	bl	12ae4 <__assert_fail@plt+0x1e28>
   12ad4:	mov	r4, r0
   12ad8:	bl	10b84 <unlink@plt>
   12adc:	mov	r0, r4
   12ae0:	pop	{r4, sl, fp, pc}
   12ae4:	push	{r4, r5, fp, lr}
   12ae8:	add	fp, sp, #8
   12aec:	sub	sp, sp, #104	; 0x68
   12af0:	mov	r4, r0
   12af4:	movw	r0, #960	; 0x3c0
   12af8:	movt	r0, #3
   12afc:	ldr	r5, [r0]
   12b00:	bl	10bfc <getpid@plt>
   12b04:	mov	r3, r0
   12b08:	sxth	r0, r4
   12b0c:	str	r0, [sp]
   12b10:	add	r4, sp, #4
   12b14:	movw	r1, #29053	; 0x717d
   12b18:	movt	r1, #1
   12b1c:	mov	r0, r4
   12b20:	mov	r2, r5
   12b24:	bl	10c68 <sprintf@plt>
   12b28:	mov	r0, r4
   12b2c:	bl	10b6c <strdup@plt>
   12b30:	sub	sp, fp, #8
   12b34:	pop	{r4, r5, fp, pc}
   12b38:	push	{r4, sl, fp, lr}
   12b3c:	add	fp, sp, #8
   12b40:	mov	r4, r0
   12b44:	bl	10c20 <strlen@plt>
   12b48:	sub	r0, r0, #1
   12b4c:	sxth	r0, r0
   12b50:	cmp	r0, #0
   12b54:	blt	12b64 <__assert_fail@plt+0x1ea8>
   12b58:	ldrb	r1, [r4, r0]
   12b5c:	cmp	r1, #47	; 0x2f
   12b60:	bne	12b48 <__assert_fail@plt+0x1e8c>
   12b64:	add	r0, r4, r0
   12b68:	add	r0, r0, #1
   12b6c:	pop	{r4, sl, fp, pc}
   12b70:	push	{r4, r5, r6, r7, fp, lr}
   12b74:	add	fp, sp, #16
   12b78:	mov	r4, r3
   12b7c:	mov	r5, r2
   12b80:	mov	r6, r1
   12b84:	mov	r7, r0
   12b88:	ldr	r0, [r1]
   12b8c:	bl	12b38 <__assert_fail@plt+0x1e7c>
   12b90:	movw	r1, #960	; 0x3c0
   12b94:	movt	r1, #3
   12b98:	str	r0, [r1]
   12b9c:	bl	12db8 <error@@Base+0xc8>
   12ba0:	mov	r0, r7
   12ba4:	mov	r1, r6
   12ba8:	mov	r2, r5
   12bac:	mov	r3, r4
   12bb0:	pop	{r4, r5, r6, r7, fp, lr}
   12bb4:	b	12bb8 <__assert_fail@plt+0x1efc>
   12bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bbc:	add	fp, sp, #28
   12bc0:	sub	sp, sp, #12
   12bc4:	stmib	sp, {r2, r3}
   12bc8:	mov	r7, r1
   12bcc:	mov	r5, r0
   12bd0:	ldr	r0, [r0]
   12bd4:	cmp	r0, #1
   12bd8:	bne	12bf0 <__assert_fail@plt+0x1f34>
   12bdc:	movw	r0, #32984	; 0x80d8
   12be0:	movt	r0, #2
   12be4:	ldrb	r0, [r0]
   12be8:	cmp	r0, #0
   12bec:	bne	12ca8 <__assert_fail@plt+0x1fec>
   12bf0:	ldr	r9, [r5]
   12bf4:	mov	r6, #0
   12bf8:	cmp	r9, #2
   12bfc:	blt	12c98 <__assert_fail@plt+0x1fdc>
   12c00:	mov	sl, #1
   12c04:	mov	r6, #0
   12c08:	mov	r8, #1
   12c0c:	ldr	r4, [r7, sl, lsl #2]
   12c10:	ldrb	r0, [r4]
   12c14:	cmp	r0, #45	; 0x2d
   12c18:	bne	12c74 <__assert_fail@plt+0x1fb8>
   12c1c:	ldrb	r0, [r4, #1]
   12c20:	cmp	r0, #0
   12c24:	beq	12c74 <__assert_fail@plt+0x1fb8>
   12c28:	mov	r0, r4
   12c2c:	bl	10c20 <strlen@plt>
   12c30:	mov	r2, r0
   12c34:	movw	r0, #29082	; 0x719a
   12c38:	movt	r0, #1
   12c3c:	mov	r1, r4
   12c40:	bl	10c98 <strncmp@plt>
   12c44:	cmp	r0, #0
   12c48:	beq	12ca8 <__assert_fail@plt+0x1fec>
   12c4c:	add	r0, sl, #1
   12c50:	mov	r1, #0
   12c54:	cmp	r0, r9
   12c58:	ldrlt	r1, [r7, r0, lsl #2]
   12c5c:	mov	r0, r4
   12c60:	ldr	r2, [sp, #8]
   12c64:	bl	12e64 <error@@Base+0x174>
   12c68:	cmp	r0, #0
   12c6c:	addne	r8, r8, #1
   12c70:	b	12c84 <__assert_fail@plt+0x1fc8>
   12c74:	ldr	r0, [r7, sl, lsl #2]
   12c78:	sxth	r1, r6
   12c7c:	str	r0, [r7, r1, lsl #2]
   12c80:	add	r6, r6, #1
   12c84:	ldr	r9, [r5]
   12c88:	add	r8, r8, #1
   12c8c:	sxth	sl, r8
   12c90:	cmp	r9, sl
   12c94:	bgt	12c0c <__assert_fail@plt+0x1f50>
   12c98:	sxth	r0, r6
   12c9c:	str	r0, [r5]
   12ca0:	sub	sp, fp, #28
   12ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ca8:	ldr	r0, [sp, #4]
   12cac:	bl	12e14 <error@@Base+0x124>
   12cb0:	push	{fp, lr}
   12cb4:	mov	fp, sp
   12cb8:	mov	r0, #0
   12cbc:	bl	12cc0 <__assert_fail@plt+0x2004>
   12cc0:	push	{fp, lr}
   12cc4:	mov	fp, sp
   12cc8:	mov	r4, r0
   12ccc:	movw	r0, #964	; 0x3c4
   12cd0:	movt	r0, #3
   12cd4:	ldr	r0, [r0]
   12cd8:	cmp	r0, #0
   12cdc:	beq	12ce4 <__assert_fail@plt+0x2028>
   12ce0:	blx	r0
   12ce4:	bl	12f54 <error@@Base+0x264>
   12ce8:	mov	r0, r4
   12cec:	bl	10c08 <exit@plt>

00012cf0 <error@@Base>:
   12cf0:	push	{fp, lr}
   12cf4:	mov	fp, sp
   12cf8:	mov	r3, r0
   12cfc:	movw	r0, #960	; 0x3c0
   12d00:	movt	r0, #3
   12d04:	ldr	r2, [r0]
   12d08:	movw	r0, #32992	; 0x80e0
   12d0c:	movt	r0, #2
   12d10:	ldr	r0, [r0]
   12d14:	movw	r1, #29032	; 0x7168
   12d18:	movt	r1, #1
   12d1c:	bl	10c2c <fprintf@plt>
   12d20:	movw	r0, #32988	; 0x80dc
   12d24:	movt	r0, #2
   12d28:	ldr	r0, [r0]
   12d2c:	bl	12cc0 <__assert_fail@plt+0x2004>
   12d30:	push	{fp, lr}
   12d34:	mov	fp, sp
   12d38:	sub	sp, sp, #8
   12d3c:	mov	r3, r0
   12d40:	movw	r0, #960	; 0x3c0
   12d44:	movt	r0, #3
   12d48:	ldr	r2, [r0]
   12d4c:	movw	r0, #32992	; 0x80e0
   12d50:	movt	r0, #2
   12d54:	ldr	r0, [r0]
   12d58:	str	r1, [sp]
   12d5c:	movw	r1, #29040	; 0x7170
   12d60:	movt	r1, #1
   12d64:	bl	10c2c <fprintf@plt>
   12d68:	movw	r0, #32988	; 0x80dc
   12d6c:	movt	r0, #2
   12d70:	ldr	r0, [r0]
   12d74:	bl	12cc0 <__assert_fail@plt+0x2004>
   12d78:	push	{fp, lr}
   12d7c:	mov	fp, sp
   12d80:	sub	sp, sp, #8
   12d84:	mov	r3, r0
   12d88:	movw	r0, #960	; 0x3c0
   12d8c:	movt	r0, #3
   12d90:	ldr	r2, [r0]
   12d94:	movw	r0, #32992	; 0x80e0
   12d98:	movt	r0, #2
   12d9c:	ldr	r0, [r0]
   12da0:	str	r1, [sp]
   12da4:	movw	r1, #29040	; 0x7170
   12da8:	movt	r1, #1
   12dac:	bl	10c2c <fprintf@plt>
   12db0:	mov	sp, fp
   12db4:	pop	{fp, pc}
   12db8:	push	{r4, sl, fp, lr}
   12dbc:	add	fp, sp, #8
   12dc0:	movw	r4, #11748	; 0x2de4
   12dc4:	movt	r4, #1
   12dc8:	mov	r0, #2
   12dcc:	mov	r1, r4
   12dd0:	bl	10be4 <__sysv_signal@plt>
   12dd4:	mov	r0, #15
   12dd8:	mov	r1, r4
   12ddc:	pop	{r4, sl, fp, lr}
   12de0:	b	10be4 <__sysv_signal@plt>
   12de4:	movw	r0, #41206	; 0xa0f6
   12de8:	movt	r0, #2
   12dec:	ldrb	r1, [r0]
   12df0:	cmp	r1, #1
   12df4:	bxeq	lr
   12df8:	push	{fp, lr}
   12dfc:	mov	fp, sp
   12e00:	mov	r1, #1
   12e04:	strb	r1, [r0]
   12e08:	movw	r0, #29067	; 0x718b
   12e0c:	movt	r0, #1
   12e10:	bl	12cf0 <error@@Base>
   12e14:	push	{fp, lr}
   12e18:	mov	fp, sp
   12e1c:	mov	r3, r0
   12e20:	movw	r0, #956	; 0x3bc
   12e24:	movt	r0, #3
   12e28:	ldr	r0, [r0]
   12e2c:	cmp	r0, #0
   12e30:	bne	12e5c <error@@Base+0x16c>
   12e34:	movw	r0, #960	; 0x3c0
   12e38:	movt	r0, #3
   12e3c:	ldr	r2, [r0]
   12e40:	movw	r0, #32992	; 0x80e0
   12e44:	movt	r0, #2
   12e48:	ldr	r0, [r0]
   12e4c:	movw	r1, #29088	; 0x71a0
   12e50:	movt	r1, #1
   12e54:	bl	10c2c <fprintf@plt>
   12e58:	bl	12cb0 <__assert_fail@plt+0x1ff4>
   12e5c:	blx	r0
   12e60:	bl	12cb0 <__assert_fail@plt+0x1ff4>
   12e64:	push	{r4, sl, fp, lr}
   12e68:	add	fp, sp, #8
   12e6c:	mov	ip, r0
   12e70:	cmp	r2, #0
   12e74:	ldrbne	r0, [r2]
   12e78:	cmpne	r0, #0
   12e7c:	bne	12e90 <error@@Base+0x1a0>
   12e80:	movw	r0, #29103	; 0x71af
   12e84:	movt	r0, #1
   12e88:	mov	r1, ip
   12e8c:	bl	12d30 <error@@Base+0x40>
   12e90:	ldrb	lr, [ip, #1]
   12e94:	mov	r3, #0
   12e98:	cmp	lr, r0
   12e9c:	beq	12ec4 <error@@Base+0x1d4>
   12ea0:	mov	r0, #1
   12ea4:	sxth	r3, r0
   12ea8:	add	r4, r3, r3, lsl #1
   12eac:	ldrb	r4, [r2, r4, lsl #2]
   12eb0:	cmp	r4, #0
   12eb4:	beq	12e80 <error@@Base+0x190>
   12eb8:	add	r0, r0, #1
   12ebc:	cmp	lr, r4
   12ec0:	bne	12ea4 <error@@Base+0x1b4>
   12ec4:	add	r0, r3, r3, lsl #1
   12ec8:	add	r3, r2, r0, lsl #2
   12ecc:	ldr	r0, [r3, #4]
   12ed0:	cmp	r0, #0
   12ed4:	beq	12f14 <error@@Base+0x224>
   12ed8:	mov	r2, ip
   12edc:	ldrb	lr, [r2, #2]!
   12ee0:	cmp	r1, #0
   12ee4:	cmpeq	lr, #0
   12ee8:	beq	12f14 <error@@Base+0x224>
   12eec:	ldr	r3, [r0]
   12ef0:	cmp	r3, #0
   12ef4:	bne	12f44 <error@@Base+0x254>
   12ef8:	cmp	lr, #0
   12efc:	movne	r1, r2
   12f00:	str	r1, [r0]
   12f04:	ldrb	r0, [r2]
   12f08:	clz	r0, r0
   12f0c:	lsr	r0, r0, #5
   12f10:	pop	{r4, sl, fp, pc}
   12f14:	ldr	r0, [r3, #8]
   12f18:	cmp	r0, #0
   12f1c:	beq	12e80 <error@@Base+0x190>
   12f20:	ldrb	r1, [ip, #2]
   12f24:	cmp	r1, #0
   12f28:	bne	12e80 <error@@Base+0x190>
   12f2c:	ldrb	r1, [r0]
   12f30:	cmp	r1, #0
   12f34:	moveq	r1, #1
   12f38:	strbeq	r1, [r0]
   12f3c:	moveq	r0, #0
   12f40:	popeq	{r4, sl, fp, pc}
   12f44:	movw	r0, #29118	; 0x71be
   12f48:	movt	r0, #1
   12f4c:	mov	r1, ip
   12f50:	bl	12d30 <error@@Base+0x40>
   12f54:	push	{r4, r5, r6, sl, fp, lr}
   12f58:	add	fp, sp, #16
   12f5c:	movw	r5, #41204	; 0xa0f4
   12f60:	movt	r5, #2
   12f64:	ldrsh	r0, [r5]
   12f68:	cmp	r0, #1
   12f6c:	poplt	{r4, r5, r6, sl, fp, pc}
   12f70:	mov	r6, #1
   12f74:	sxth	r0, r6
   12f78:	bl	12ae4 <__assert_fail@plt+0x1e28>
   12f7c:	mov	r4, r0
   12f80:	bl	10b84 <unlink@plt>
   12f84:	mov	r0, r4
   12f88:	bl	10b3c <free@plt>
   12f8c:	add	r0, r6, #1
   12f90:	sxth	r6, r0
   12f94:	ldrsh	r0, [r5]
   12f98:	cmp	r6, r0
   12f9c:	ble	12f74 <error@@Base+0x284>
   12fa0:	pop	{r4, r5, r6, sl, fp, pc}
   12fa4:	push	{r4, r5, r6, sl, fp, lr}
   12fa8:	add	fp, sp, #16
   12fac:	mov	r4, r2
   12fb0:	mov	r5, r1
   12fb4:	mov	r6, r0
   12fb8:	mov	r0, #1
   12fbc:	mov	r1, #16
   12fc0:	bl	12950 <__assert_fail@plt+0x1c94>
   12fc4:	mov	r1, r0
   12fc8:	strb	r5, [r0, #8]
   12fcc:	str	r4, [r0, #12]
   12fd0:	mov	r0, r6
   12fd4:	pop	{r4, r5, r6, sl, fp, lr}
   12fd8:	b	1161c <__assert_fail@plt+0x960>
   12fdc:	push	{r4, r5, r6, r7, fp, lr}
   12fe0:	add	fp, sp, #16
   12fe4:	mov	r5, r2
   12fe8:	mov	r2, r1
   12fec:	mov	r4, r0
   12ff0:	cmp	r1, #0
   12ff4:	bne	13004 <error@@Base+0x314>
   12ff8:	ldrb	r0, [r5]
   12ffc:	cmp	r0, #0
   13000:	bne	1309c <error@@Base+0x3ac>
   13004:	ldr	r7, [r4, #4]
   13008:	movw	r1, #14852	; 0x3a04
   1300c:	movt	r1, #1
   13010:	mov	r0, r2
   13014:	bl	129ec <__assert_fail@plt+0x1d30>
   13018:	mov	r6, r0
   1301c:	ldrb	r0, [r5]
   13020:	cmp	r0, #0
   13024:	beq	13034 <error@@Base+0x344>
   13028:	mov	r0, r6
   1302c:	bl	130b0 <error@@Base+0x3c0>
   13030:	strb	r0, [r5, #11]
   13034:	ldrb	r2, [r5, #1]
   13038:	ldr	r3, [r5, #4]
   1303c:	cmp	r3, #0
   13040:	movweq	r3, #94	; 0x5e
   13044:	mov	r0, r6
   13048:	mov	r1, r4
   1304c:	bl	1315c <error@@Base+0x46c>
   13050:	mov	r0, r6
   13054:	bl	12a64 <__assert_fail@plt+0x1da8>
   13058:	ldrb	r0, [r5, #9]
   1305c:	cmp	r0, #0
   13060:	beq	1307c <error@@Base+0x38c>
   13064:	cmp	r7, #0
   13068:	mov	r0, r4
   1306c:	addne	r0, r7, #4
   13070:	ldr	r1, [r0]
   13074:	mov	r0, r4
   13078:	bl	13264 <error@@Base+0x574>
   1307c:	ldrb	r0, [r5, #10]
   13080:	cmp	r0, #0
   13084:	popeq	{r4, r5, r6, r7, fp, pc}
   13088:	cmp	r7, #0
   1308c:	addne	r4, r7, #4
   13090:	ldr	r0, [r4]
   13094:	pop	{r4, r5, r6, r7, fp, lr}
   13098:	b	1334c <error@@Base+0x65c>
   1309c:	movw	r0, #29135	; 0x71cf
   130a0:	movt	r0, #1
   130a4:	movw	r1, #29151	; 0x71df
   130a8:	movt	r1, #1
   130ac:	bl	12d30 <error@@Base+0x40>
   130b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130b4:	add	fp, sp, #24
   130b8:	sub	sp, sp, #104	; 0x68
   130bc:	mov	r4, r0
   130c0:	add	r0, sp, #4
   130c4:	mov	r1, #99	; 0x63
   130c8:	mov	r2, r4
   130cc:	bl	10b54 <fgets@plt>
   130d0:	cmp	r0, #0
   130d4:	beq	130f4 <error@@Base+0x404>
   130d8:	add	r0, sp, #4
   130dc:	movw	r1, #29203	; 0x7213
   130e0:	movt	r1, #1
   130e4:	mov	r2, #51	; 0x33
   130e8:	bl	10c98 <strncmp@plt>
   130ec:	cmp	r0, #0
   130f0:	beq	1310c <error@@Base+0x41c>
   130f4:	mov	r0, r4
   130f8:	bl	10b78 <rewind@plt>
   130fc:	mov	r7, #0
   13100:	mov	r0, r7
   13104:	sub	sp, fp, #24
   13108:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1310c:	mov	r6, #0
   13110:	add	r5, sp, #4
   13114:	movw	r8, #29259	; 0x724b
   13118:	movt	r8, #1
   1311c:	mov	r7, #1
   13120:	mov	r0, r5
   13124:	mov	r1, #99	; 0x63
   13128:	mov	r2, r4
   1312c:	bl	10b54 <fgets@plt>
   13130:	cmp	r0, #0
   13134:	beq	13100 <error@@Base+0x410>
   13138:	mov	r0, r5
   1313c:	mov	r1, r8
   13140:	bl	10b24 <strcmp@plt>
   13144:	cmp	r0, #0
   13148:	addeq	r6, r6, #1
   1314c:	sxth	r6, r6
   13150:	cmp	r6, #2
   13154:	blt	13120 <error@@Base+0x430>
   13158:	b	13100 <error@@Base+0x410>
   1315c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13160:	add	fp, sp, #28
   13164:	sub	sp, sp, #20
   13168:	str	r3, [sp, #8]
   1316c:	mov	r5, r2
   13170:	str	r1, [sp, #4]
   13174:	mov	r9, r0
   13178:	bl	10cb0 <getc@plt>
   1317c:	cmn	r0, #1
   13180:	beq	1323c <error@@Base+0x54c>
   13184:	uxtb	r8, r5
   13188:	add	r4, sp, #16
   1318c:	add	r1, r4, #1
   13190:	str	r1, [sp]
   13194:	mov	r7, #0
   13198:	movw	r6, #32256	; 0x7e00
   1319c:	movt	r6, #2
   131a0:	add	r1, r6, r0
   131a4:	ldrsb	sl, [r1]
   131a8:	cmp	sl, #0
   131ac:	ble	13244 <error@@Base+0x554>
   131b0:	strb	r0, [sp, #16]
   131b4:	cmp	sl, #1
   131b8:	beq	131e4 <error@@Base+0x4f4>
   131bc:	mov	r5, r8
   131c0:	sub	r8, sl, #1
   131c4:	ldr	r0, [sp]
   131c8:	mov	r1, #1
   131cc:	mov	r2, r8
   131d0:	mov	r3, r9
   131d4:	bl	10bb4 <fread@plt>
   131d8:	cmp	r0, r8
   131dc:	mov	r8, r5
   131e0:	bne	13258 <error@@Base+0x568>
   131e4:	mov	r0, r4
   131e8:	mov	r1, #4
   131ec:	add	r2, sp, #12
   131f0:	bl	10bc0 <utf8proc_iterate@plt>
   131f4:	cmp	r0, sl
   131f8:	bne	13250 <error@@Base+0x560>
   131fc:	ldr	r2, [sp, #12]
   13200:	cmp	r8, #0
   13204:	beq	13218 <error@@Base+0x528>
   13208:	mov	r5, #1
   1320c:	ldr	r0, [sp, #8]
   13210:	cmp	r2, r0
   13214:	beq	13228 <error@@Base+0x538>
   13218:	ldr	r0, [sp, #4]
   1321c:	mov	r1, r7
   13220:	bl	12fa4 <error@@Base+0x2b4>
   13224:	mov	r5, #0
   13228:	mov	r0, r9
   1322c:	bl	10cb0 <getc@plt>
   13230:	cmn	r0, #1
   13234:	mov	r7, r5
   13238:	bne	131a0 <error@@Base+0x4b0>
   1323c:	sub	sp, fp, #28
   13240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13244:	movw	r0, #29315	; 0x7283
   13248:	movt	r0, #1
   1324c:	bl	12cf0 <error@@Base>
   13250:	bl	10c80 <utf8proc_errmsg@plt>
   13254:	bl	12cf0 <error@@Base>
   13258:	movw	r0, #29339	; 0x729b
   1325c:	movt	r0, #1
   13260:	bl	12cf0 <error@@Base>
   13264:	push	{r4, r5, r6, r7, fp, lr}
   13268:	add	fp, sp, #16
   1326c:	cmp	r1, #0
   13270:	popeq	{r4, r5, r6, r7, fp, pc}
   13274:	mov	r5, r1
   13278:	mov	r4, r0
   1327c:	mov	r6, #32
   13280:	mov	r7, r1
   13284:	ldr	r0, [r7, #12]
   13288:	bl	13628 <error@@Base+0x938>
   1328c:	cmp	r0, #0
   13290:	strne	r6, [r7, #12]
   13294:	ldr	r7, [r7, #4]
   13298:	cmp	r7, #0
   1329c:	bne	13284 <error@@Base+0x594>
   132a0:	mov	r6, #0
   132a4:	b	132b8 <error@@Base+0x5c8>
   132a8:	mov	r0, #1
   132ac:	cmp	r1, #32
   132b0:	beq	132e0 <error@@Base+0x5f0>
   132b4:	b	13320 <error@@Base+0x630>
   132b8:	ldr	r7, [r5, #4]
   132bc:	ldr	r1, [r5, #12]
   132c0:	cmp	r1, #32
   132c4:	bne	1330c <error@@Base+0x61c>
   132c8:	tst	r6, #255	; 0xff
   132cc:	beq	132e0 <error@@Base+0x5f0>
   132d0:	cmp	r7, #0
   132d4:	ldrne	r1, [r7, #12]
   132d8:	cmpne	r1, #10
   132dc:	bne	132a8 <error@@Base+0x5b8>
   132e0:	tst	r6, #255	; 0xff
   132e4:	cmpne	r7, #0
   132e8:	beq	13328 <error@@Base+0x638>
   132ec:	ldr	r0, [r7, #12]
   132f0:	cmp	r0, #32
   132f4:	bne	13328 <error@@Base+0x638>
   132f8:	ldrb	r0, [r5, #8]
   132fc:	ldrb	r1, [r7, #8]
   13300:	orr	r0, r1, r0
   13304:	strb	r0, [r7, #8]
   13308:	b	13328 <error@@Base+0x638>
   1330c:	subs	r0, r1, #10
   13310:	movwne	r0, #1
   13314:	tst	r6, #255	; 0xff
   13318:	cmpeq	r1, #10
   1331c:	beq	13328 <error@@Base+0x638>
   13320:	mov	r6, r0
   13324:	b	1333c <error@@Base+0x64c>
   13328:	mov	r0, r4
   1332c:	mov	r1, r5
   13330:	bl	11644 <__assert_fail@plt+0x988>
   13334:	mov	r0, r5
   13338:	bl	10b3c <free@plt>
   1333c:	cmp	r7, #0
   13340:	mov	r5, r7
   13344:	bne	132b8 <error@@Base+0x5c8>
   13348:	pop	{r4, r5, r6, r7, fp, pc}
   1334c:	push	{r4, sl, fp, lr}
   13350:	add	fp, sp, #8
   13354:	cmp	r0, #0
   13358:	popeq	{r4, sl, fp, pc}
   1335c:	mov	r4, r0
   13360:	ldr	r0, [r4, #12]
   13364:	bl	10b90 <utf8proc_tolower@plt>
   13368:	str	r0, [r4, #12]
   1336c:	ldr	r4, [r4, #4]
   13370:	cmp	r4, #0
   13374:	bne	13360 <error@@Base+0x670>
   13378:	pop	{r4, sl, fp, pc}
   1337c:	push	{fp, lr}
   13380:	mov	fp, sp
   13384:	bl	10b60 <utf8proc_encode_char@plt>
   13388:	cmp	r0, #0
   1338c:	sxtbgt	r0, r0
   13390:	popgt	{fp, pc}
   13394:	movw	r0, #29161	; 0x71e9
   13398:	movt	r0, #1
   1339c:	bl	12cf0 <error@@Base>
   133a0:	push	{r4, r5, r6, r7, fp, lr}
   133a4:	add	fp, sp, #16
   133a8:	mov	r7, r3
   133ac:	mov	r4, r2
   133b0:	mov	r5, r1
   133b4:	tst	r0, #255	; 0xff
   133b8:	beq	133f8 <error@@Base+0x708>
   133bc:	mov	r0, #94	; 0x5e
   133c0:	mov	r1, r4
   133c4:	bl	1337c <error@@Base+0x68c>
   133c8:	mov	r6, r0
   133cc:	cmp	r5, #10
   133d0:	bne	13404 <error@@Base+0x714>
   133d4:	movw	r0, #29051	; 0x717b
   133d8:	movt	r0, #1
   133dc:	movw	r1, #29184	; 0x7200
   133e0:	movt	r1, #1
   133e4:	tst	r7, #255	; 0xff
   133e8:	moveq	r1, r0
   133ec:	add	r0, r4, r6
   133f0:	pop	{r4, r5, r6, r7, fp, lr}
   133f4:	b	10c68 <sprintf@plt>
   133f8:	mov	r6, #0
   133fc:	cmp	r5, #10
   13400:	beq	133d4 <error@@Base+0x6e4>
   13404:	mov	r0, r5
   13408:	bl	1347c <error@@Base+0x78c>
   1340c:	cmp	r0, #0
   13410:	beq	13450 <error@@Base+0x760>
   13414:	mov	r0, r5
   13418:	bl	134bc <error@@Base+0x7cc>
   1341c:	cmp	r0, #0
   13420:	beq	13434 <error@@Base+0x744>
   13424:	add	r1, r4, r6
   13428:	movw	r0, #9676	; 0x25cc
   1342c:	bl	1337c <error@@Base+0x68c>
   13430:	add	r6, r6, r0
   13434:	add	r1, r4, r6
   13438:	mov	r0, r5
   1343c:	bl	1337c <error@@Base+0x68c>
   13440:	add	r0, r6, r0
   13444:	mov	r1, #0
   13448:	strb	r1, [r4, r0]
   1344c:	pop	{r4, r5, r6, r7, fp, pc}
   13450:	add	r0, r4, r6
   13454:	cmp	r5, #255	; 0xff
   13458:	bhi	13468 <error@@Base+0x778>
   1345c:	movw	r1, #29189	; 0x7205
   13460:	movt	r1, #1
   13464:	b	13470 <error@@Base+0x780>
   13468:	movw	r1, #29196	; 0x720c
   1346c:	movt	r1, #1
   13470:	mov	r2, r5
   13474:	pop	{r4, r5, r6, r7, fp, lr}
   13478:	b	10c68 <sprintf@plt>
   1347c:	push	{r4, sl, fp, lr}
   13480:	add	fp, sp, #8
   13484:	mov	r4, r0
   13488:	bl	10b48 <utf8proc_get_property@plt>
   1348c:	mov	r1, r0
   13490:	mov	r0, #1
   13494:	cmp	r4, #32
   13498:	popeq	{r4, sl, fp, pc}
   1349c:	ldrsh	r1, [r1]
   134a0:	sub	r2, r1, #1
   134a4:	cmp	r2, #22
   134a8:	bcs	134b0 <error@@Base+0x7c0>
   134ac:	pop	{r4, sl, fp, pc}
   134b0:	cmp	r1, #29
   134b4:	movne	r0, #0
   134b8:	pop	{r4, sl, fp, pc}
   134bc:	push	{fp, lr}
   134c0:	mov	fp, sp
   134c4:	bl	10c14 <utf8proc_category@plt>
   134c8:	sub	r1, r0, #6
   134cc:	mov	r0, #0
   134d0:	cmp	r1, #3
   134d4:	movwcc	r0, #1
   134d8:	pop	{fp, pc}
   134dc:	push	{r4, r5, r6, r7, fp, lr}
   134e0:	add	fp, sp, #16
   134e4:	sub	sp, sp, #16
   134e8:	mov	r6, r2
   134ec:	mov	r2, r1
   134f0:	mov	r5, r0
   134f4:	movw	r1, #14827	; 0x39eb
   134f8:	movt	r1, #1
   134fc:	mov	r0, r2
   13500:	bl	129ec <__assert_fail@plt+0x1d30>
   13504:	mov	r4, r0
   13508:	cmp	r6, #0
   1350c:	beq	13560 <error@@Base+0x870>
   13510:	movw	r0, #29203	; 0x7213
   13514:	movt	r0, #1
   13518:	mov	r1, #55	; 0x37
   1351c:	mov	r2, #1
   13520:	mov	r3, r4
   13524:	bl	10ba8 <fwrite@plt>
   13528:	movw	r7, #29259	; 0x724b
   1352c:	movt	r7, #1
   13530:	mov	r0, r7
   13534:	mov	r1, #55	; 0x37
   13538:	mov	r2, #1
   1353c:	mov	r3, r4
   13540:	bl	10ba8 <fwrite@plt>
   13544:	mov	r0, r4
   13548:	blx	r6
   1354c:	mov	r0, r7
   13550:	mov	r1, #55	; 0x37
   13554:	mov	r2, #1
   13558:	mov	r3, r4
   1355c:	bl	10ba8 <fwrite@plt>
   13560:	ldr	r6, [r5]
   13564:	cmp	r6, #0
   13568:	beq	1359c <error@@Base+0x8ac>
   1356c:	add	r5, sp, #7
   13570:	ldr	r1, [r6, #12]
   13574:	ldrb	r0, [r6, #8]
   13578:	mov	r2, r5
   1357c:	mov	r3, #0
   13580:	bl	133a0 <error@@Base+0x6b0>
   13584:	mov	r0, r5
   13588:	mov	r1, r4
   1358c:	bl	10c8c <fputs@plt>
   13590:	ldr	r6, [r6, #4]
   13594:	cmp	r6, #0
   13598:	bne	13570 <error@@Base+0x880>
   1359c:	mov	r0, r4
   135a0:	bl	12a64 <__assert_fail@plt+0x1da8>
   135a4:	sub	sp, fp, #16
   135a8:	pop	{r4, r5, r6, r7, fp, pc}
   135ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135b0:	add	fp, sp, #24
   135b4:	sub	sp, sp, #8
   135b8:	mov	r6, r0
   135bc:	mov	r0, #0
   135c0:	str	r0, [sp, #4]
   135c4:	ldrb	r0, [r1]
   135c8:	mov	r8, #1
   135cc:	cmp	r0, #0
   135d0:	beq	1361c <error@@Base+0x92c>
   135d4:	mov	r5, r1
   135d8:	add	r7, sp, #4
   135dc:	mov	r0, r5
   135e0:	mvn	r1, #0
   135e4:	mov	r2, r7
   135e8:	bl	10bc0 <utf8proc_iterate@plt>
   135ec:	cmp	r0, #1
   135f0:	blt	13618 <error@@Base+0x928>
   135f4:	mov	r4, r0
   135f8:	ldr	r2, [sp, #4]
   135fc:	mov	r0, r6
   13600:	mov	r1, #0
   13604:	bl	12fa4 <error@@Base+0x2b4>
   13608:	ldrb	r0, [r5, r4]!
   1360c:	cmp	r0, #0
   13610:	bne	135dc <error@@Base+0x8ec>
   13614:	b	1361c <error@@Base+0x92c>
   13618:	mov	r8, #0
   1361c:	mov	r0, r8
   13620:	sub	sp, fp, #24
   13624:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13628:	push	{r4, sl, fp, lr}
   1362c:	add	fp, sp, #8
   13630:	mov	r4, r0
   13634:	bl	10b48 <utf8proc_get_property@plt>
   13638:	cmp	r4, #10
   1363c:	ble	13658 <error@@Base+0x968>
   13640:	sub	r1, r4, #11
   13644:	cmp	r1, #3
   13648:	bcc	13674 <error@@Base+0x984>
   1364c:	cmp	r4, #160	; 0xa0
   13650:	beq	13674 <error@@Base+0x984>
   13654:	b	13680 <error@@Base+0x990>
   13658:	cmp	r4, #9
   1365c:	beq	13674 <error@@Base+0x984>
   13660:	mov	r1, #0
   13664:	cmp	r4, #10
   13668:	bne	13680 <error@@Base+0x990>
   1366c:	mov	r0, r1
   13670:	pop	{r4, sl, fp, pc}
   13674:	mov	r1, #1
   13678:	mov	r0, r1
   1367c:	pop	{r4, sl, fp, pc}
   13680:	ldrsh	r0, [r0]
   13684:	sub	r0, r0, #23
   13688:	mov	r1, #0
   1368c:	cmp	r0, #3
   13690:	movwcc	r1, #1
   13694:	mov	r0, r1
   13698:	pop	{r4, sl, fp, pc}
   1369c:	cmp	r0, #2
   136a0:	bxlt	lr
   136a4:	movw	r3, #41212	; 0xa0fc
   136a8:	movt	r3, #2
   136ac:	str	r2, [r3]
   136b0:	movw	r2, #41208	; 0xa0f8
   136b4:	movt	r2, #2
   136b8:	str	r1, [r2]
   136bc:	sub	r1, r0, #1
   136c0:	mov	r0, #0
   136c4:	b	136c8 <error@@Base+0x9d8>
   136c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136cc:	add	fp, sp, #28
   136d0:	sub	sp, sp, #4
   136d4:	mov	r8, r1
   136d8:	mov	r9, r0
   136dc:	movw	r7, #41208	; 0xa0f8
   136e0:	movt	r7, #2
   136e4:	movw	sl, #41212	; 0xa0fc
   136e8:	movt	sl, #2
   136ec:	b	13718 <error@@Base+0xa28>
   136f0:	ldr	r0, [r7]
   136f4:	str	r6, [r0, r4, lsl #2]
   136f8:	sub	r1, r4, #1
   136fc:	cmp	r1, r9
   13700:	movgt	r0, r9
   13704:	blgt	136c8 <error@@Base+0x9d8>
   13708:	add	r9, r5, #1
   1370c:	cmp	r9, r8
   13710:	subge	sp, fp, #28
   13714:	popge	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13718:	ldr	r0, [r7]
   1371c:	ldr	r6, [r0, r9, lsl #2]
   13720:	cmp	r9, r8
   13724:	mov	r4, r8
   13728:	mov	r5, r9
   1372c:	bge	136f0 <error@@Base+0xa00>
   13730:	mov	r5, r9
   13734:	mov	r4, r8
   13738:	cmp	r5, r4
   1373c:	blt	13750 <error@@Base+0xa60>
   13740:	b	1376c <error@@Base+0xa7c>
   13744:	sub	r4, r4, #1
   13748:	cmp	r5, r4
   1374c:	bge	1376c <error@@Base+0xa7c>
   13750:	ldr	r0, [r7]
   13754:	ldr	r1, [r0, r4, lsl #2]
   13758:	ldr	r2, [sl]
   1375c:	mov	r0, r6
   13760:	blx	r2
   13764:	cmn	r0, #1
   13768:	ble	13744 <error@@Base+0xa54>
   1376c:	cmp	r5, r4
   13770:	beq	13784 <error@@Base+0xa94>
   13774:	ldr	r0, [r7]
   13778:	ldr	r1, [r0, r4, lsl #2]
   1377c:	str	r1, [r0, r5, lsl #2]
   13780:	add	r5, r5, #1
   13784:	cmp	r5, r4
   13788:	bge	137a8 <error@@Base+0xab8>
   1378c:	ldr	r0, [r7]
   13790:	ldr	r1, [r0, r5, lsl #2]
   13794:	ldr	r2, [sl]
   13798:	mov	r0, r6
   1379c:	blx	r2
   137a0:	cmp	r0, #1
   137a4:	bge	13780 <error@@Base+0xa90>
   137a8:	cmp	r5, r4
   137ac:	ldrne	r0, [r7]
   137b0:	ldrne	r1, [r0, r5, lsl #2]
   137b4:	strne	r1, [r0, r4, lsl #2]
   137b8:	subne	r4, r4, #1
   137bc:	cmp	r5, r4
   137c0:	blt	13748 <error@@Base+0xa58>
   137c4:	b	136f0 <error@@Base+0xa00>
   137c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   137cc:	mov	r7, r0
   137d0:	ldr	r6, [pc, #72]	; 13820 <error@@Base+0xb30>
   137d4:	ldr	r5, [pc, #72]	; 13824 <error@@Base+0xb34>
   137d8:	add	r6, pc, r6
   137dc:	add	r5, pc, r5
   137e0:	sub	r6, r6, r5
   137e4:	mov	r8, r1
   137e8:	mov	r9, r2
   137ec:	bl	10af8 <calloc@plt-0x20>
   137f0:	asrs	r6, r6, #2
   137f4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   137f8:	mov	r4, #0
   137fc:	add	r4, r4, #1
   13800:	ldr	r3, [r5], #4
   13804:	mov	r2, r9
   13808:	mov	r1, r8
   1380c:	mov	r0, r7
   13810:	blx	r3
   13814:	cmp	r6, r4
   13818:	bne	137fc <error@@Base+0xb0c>
   1381c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13820:	andeq	r4, r1, ip, lsl r6
   13824:	andeq	r4, r1, r4, lsl r6
   13828:	bx	lr
   1382c:	mov	r2, r1
   13830:	mov	r1, r0
   13834:	mov	r0, #3
   13838:	b	10b9c <__xstat@plt>

Disassembly of section .fini:

0001383c <.fini>:
   1383c:	push	{r3, lr}
   13840:	pop	{r3, pc}
