
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	110d0 <__assert_fail@plt+0x48>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <calloc@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <calloc@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	r7, r1, r0, ror #3

00010e24 <calloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <fputs_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <raise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <strcmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <posix_fadvise64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <memmove@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <_exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <memcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <mbsinit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <fwrite_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <memcmp@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <dcgettext@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <realloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <textdomain@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <iswprint@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <fwrite@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <lseek64@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <__ctype_get_mb_cur_max@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <__fpending@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <mbrtowc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <error@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <malloc@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <__libc_start_main@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <__freading@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <__gmon_start__@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <getopt_long@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <__ctype_b_loc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <exit@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <strlen@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <strchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <__errno_location@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <__cxa_atexit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <memset@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <__printf_chk@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <fileno@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__fprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

00010fec <memchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #176]!	; 0xb0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #168]!	; 0xa8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #160]!	; 0xa0

00011010 <__overflow@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #152]!	; 0x98

0001101c <setlocale@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #144]!	; 0x90

00011028 <strrchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #136]!	; 0x88

00011034 <nl_langinfo@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #128]!	; 0x80

00011040 <__strtoll_internal@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #120]!	; 0x78

0001104c <fopen64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #112]!	; 0x70

00011058 <bindtextdomain@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #104]!	; 0x68

00011064 <fread_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #96]!	; 0x60

00011070 <strncmp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #88]!	; 0x58

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #80]!	; 0x50

00011088 <__assert_fail@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #72]!	; 0x48

Disassembly of section .text:

00011094 <.text>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <__assert_fail@plt+0x3c>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <__assert_fail@plt+0x40>
   110b8:	ldr	r3, [pc, #12]	; 110cc <__assert_fail@plt+0x44>
   110bc:	bl	10f44 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	muleq	r1, r0, lr
   110c8:	andeq	r1, r1, ip, asr #8
   110cc:	andeq	r6, r1, r0, lsr lr
   110d0:	ldr	r3, [pc, #20]	; 110ec <__assert_fail@plt+0x64>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <__assert_fail@plt+0x68>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10f5c <__gmon_start__@plt>
   110ec:	andeq	r6, r1, r0, lsr #30
   110f0:	ldrdeq	r0, [r0], -ip
   110f4:	ldr	r0, [pc, #24]	; 11114 <__assert_fail@plt+0x8c>
   110f8:	ldr	r3, [pc, #24]	; 11118 <__assert_fail@plt+0x90>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__assert_fail@plt+0x94>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	r8, r2, r0, lsr r1
   11118:	andeq	r8, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <__assert_fail@plt+0xc4>
   11124:	ldr	r1, [pc, #36]	; 11150 <__assert_fail@plt+0xc8>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0xcc>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r8, r2, r0, lsr r1
   11150:	andeq	r8, r2, r0, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <__assert_fail@plt+0xf4>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <__assert_fail@plt+0x6c>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	r8, r2, r4, asr r1
   11180:	b	11120 <__assert_fail@plt+0x98>
   11184:	push	{fp, lr}
   11188:	mov	fp, sp
   1118c:	sub	sp, sp, #56	; 0x38
   11190:	mov	r4, r0
   11194:	cmp	r0, #0
   11198:	bne	11408 <__assert_fail@plt+0x380>
   1119c:	movw	r1, #28387	; 0x6ee3
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10ec0 <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	movw	r0, #33120	; 0x8160
   111b8:	movt	r0, #2
   111bc:	ldr	r2, [r0]
   111c0:	mov	r0, #1
   111c4:	bl	10fc8 <__printf_chk@plt>
   111c8:	movw	r1, #28417	; 0x6f01
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10ec0 <dcgettext@plt>
   111dc:	mov	r1, r0
   111e0:	mov	r0, #1
   111e4:	mov	r2, #64	; 0x40
   111e8:	bl	10fc8 <__printf_chk@plt>
   111ec:	movw	r1, #29207	; 0x7217
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10ec0 <dcgettext@plt>
   11200:	movw	r7, #33100	; 0x814c
   11204:	movt	r7, #2
   11208:	ldr	r1, [r7]
   1120c:	bl	10e30 <fputs_unlocked@plt>
   11210:	movw	r1, #29263	; 0x724f
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10ec0 <dcgettext@plt>
   11224:	ldr	r1, [r7]
   11228:	bl	10e30 <fputs_unlocked@plt>
   1122c:	movw	r1, #28487	; 0x6f47
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10ec0 <dcgettext@plt>
   11240:	ldr	r1, [r7]
   11244:	bl	10e30 <fputs_unlocked@plt>
   11248:	movw	r1, #28729	; 0x7039
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10ec0 <dcgettext@plt>
   1125c:	ldr	r1, [r7]
   11260:	bl	10e30 <fputs_unlocked@plt>
   11264:	movw	r1, #28774	; 0x7066
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10ec0 <dcgettext@plt>
   11278:	ldr	r1, [r7]
   1127c:	bl	10e30 <fputs_unlocked@plt>
   11280:	movw	r1, #28828	; 0x709c
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10ec0 <dcgettext@plt>
   11294:	movw	r5, #29096	; 0x71a8
   11298:	mov	r1, r0
   1129c:	mov	r0, #1
   112a0:	movt	r5, #1
   112a4:	mov	r2, r5
   112a8:	mov	r3, r5
   112ac:	bl	10fc8 <__printf_chk@plt>
   112b0:	movw	r0, #29848	; 0x7498
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movt	r0, #1
   112c0:	add	r1, r0, #32
   112c4:	add	r3, r0, #16
   112c8:	vld1.64	{d18-d19}, [r0], r2
   112cc:	vld1.64	{d16-d17}, [r1]
   112d0:	vld1.64	{d20-d21}, [r3]
   112d4:	add	r1, r6, #32
   112d8:	vldr	d22, [r0]
   112dc:	add	r0, r6, #16
   112e0:	vst1.64	{d16-d17}, [r1]
   112e4:	movw	r1, #29338	; 0x729a
   112e8:	vst1.64	{d20-d21}, [r0]
   112ec:	mov	r0, r6
   112f0:	vst1.64	{d18-d19}, [r0], r2
   112f4:	movt	r1, #1
   112f8:	vstr	d22, [r0]
   112fc:	mov	r0, r5
   11300:	bl	10e48 <strcmp@plt>
   11304:	cmp	r0, #0
   11308:	ldrne	r1, [r6, #8]!
   1130c:	cmpne	r1, #0
   11310:	bne	112fc <__assert_fail@plt+0x274>
   11314:	ldr	r6, [r6, #4]
   11318:	movw	r1, #29433	; 0x72f9
   1131c:	mov	r0, #0
   11320:	mov	r2, #5
   11324:	movt	r1, #1
   11328:	bl	10ec0 <dcgettext@plt>
   1132c:	movw	r2, #29157	; 0x71e5
   11330:	movw	r3, #29456	; 0x7310
   11334:	mov	r1, r0
   11338:	mov	r0, #1
   1133c:	movt	r2, #1
   11340:	movt	r3, #1
   11344:	bl	10fc8 <__printf_chk@plt>
   11348:	cmp	r6, #0
   1134c:	mov	r0, #5
   11350:	mov	r1, #0
   11354:	moveq	r6, r5
   11358:	bl	1101c <setlocale@plt>
   1135c:	cmp	r0, #0
   11360:	beq	11398 <__assert_fail@plt+0x310>
   11364:	movw	r1, #29496	; 0x7338
   11368:	mov	r2, #3
   1136c:	movt	r1, #1
   11370:	bl	11070 <strncmp@plt>
   11374:	cmp	r0, #0
   11378:	beq	11398 <__assert_fail@plt+0x310>
   1137c:	movw	r1, #29500	; 0x733c
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10ec0 <dcgettext@plt>
   11390:	ldr	r1, [r7]
   11394:	bl	10e30 <fputs_unlocked@plt>
   11398:	movw	r1, #29571	; 0x7383
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10ec0 <dcgettext@plt>
   113ac:	movw	r2, #29456	; 0x7310
   113b0:	mov	r1, r0
   113b4:	mov	r0, #1
   113b8:	mov	r3, r5
   113bc:	movt	r2, #1
   113c0:	bl	10fc8 <__printf_chk@plt>
   113c4:	movw	r1, #29598	; 0x739e
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	movt	r1, #1
   113d4:	bl	10ec0 <dcgettext@plt>
   113d8:	movw	r3, #29648	; 0x73d0
   113dc:	mov	r1, r0
   113e0:	movw	r0, #29366	; 0x72b6
   113e4:	cmp	r6, r5
   113e8:	mov	r2, r6
   113ec:	movt	r0, #1
   113f0:	movt	r3, #1
   113f4:	moveq	r3, r0
   113f8:	mov	r0, #1
   113fc:	bl	10fc8 <__printf_chk@plt>
   11400:	mov	r0, r4
   11404:	bl	10f80 <exit@plt>
   11408:	movw	r0, #33088	; 0x8140
   1140c:	movw	r1, #28348	; 0x6ebc
   11410:	mov	r2, #5
   11414:	movt	r0, #2
   11418:	movt	r1, #1
   1141c:	ldr	r5, [r0]
   11420:	mov	r0, #0
   11424:	bl	10ec0 <dcgettext@plt>
   11428:	mov	r2, r0
   1142c:	movw	r0, #33120	; 0x8160
   11430:	mov	r1, #1
   11434:	movt	r0, #2
   11438:	ldr	r3, [r0]
   1143c:	mov	r0, r5
   11440:	bl	10fe0 <__fprintf_chk@plt>
   11444:	mov	r0, r4
   11448:	bl	10f80 <exit@plt>
   1144c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11450:	add	fp, sp, #28
   11454:	sub	sp, sp, #28
   11458:	mov	r5, r0
   1145c:	ldr	r0, [r1]
   11460:	mov	r4, r1
   11464:	bl	125d0 <__assert_fail@plt+0x1548>
   11468:	movw	r1, #29648	; 0x73d0
   1146c:	mov	r0, #6
   11470:	movt	r1, #1
   11474:	bl	1101c <setlocale@plt>
   11478:	movw	r6, #29161	; 0x71e9
   1147c:	movw	r1, #29103	; 0x71af
   11480:	movt	r6, #1
   11484:	movt	r1, #1
   11488:	mov	r0, r6
   1148c:	bl	11058 <bindtextdomain@plt>
   11490:	mov	r0, r6
   11494:	bl	10ed8 <textdomain@plt>
   11498:	movw	r0, #8932	; 0x22e4
   1149c:	movt	r0, #1
   114a0:	bl	16e94 <__assert_fail@plt+0x5e0c>
   114a4:	movw	r9, #29127	; 0x71c7
   114a8:	movw	r7, #29752	; 0x7438
   114ac:	mov	r6, #76	; 0x4c
   114b0:	mov	r8, #0
   114b4:	mov	sl, #0
   114b8:	mov	r0, #0
   114bc:	movt	r9, #1
   114c0:	movt	r7, #1
   114c4:	b	114cc <__assert_fail@plt+0x444>
   114c8:	mov	r0, #1
   114cc:	str	r0, [sp, #12]
   114d0:	b	114d8 <__assert_fail@plt+0x450>
   114d4:	mov	sl, #1
   114d8:	mov	r0, r5
   114dc:	mov	r1, r4
   114e0:	mov	r2, r9
   114e4:	mov	r3, r7
   114e8:	str	r8, [sp]
   114ec:	bl	10f68 <getopt_long@plt>
   114f0:	cmp	r0, #99	; 0x63
   114f4:	ble	1156c <__assert_fail@plt+0x4e4>
   114f8:	cmp	r0, #100	; 0x64
   114fc:	beq	114d4 <__assert_fail@plt+0x44c>
   11500:	cmp	r0, #105	; 0x69
   11504:	beq	114c8 <__assert_fail@plt+0x440>
   11508:	cmp	r0, #119	; 0x77
   1150c:	bne	1173c <__assert_fail@plt+0x6b4>
   11510:	movw	r0, #33104	; 0x8150
   11514:	movw	r1, #29648	; 0x73d0
   11518:	mov	r2, #10
   1151c:	add	r3, sp, #16
   11520:	movt	r0, #2
   11524:	movt	r1, #1
   11528:	ldr	r0, [r0]
   1152c:	str	r1, [sp]
   11530:	mov	r1, #0
   11534:	bl	14f98 <__assert_fail@plt+0x3f10>
   11538:	cmp	r0, #1
   1153c:	bhi	116f8 <__assert_fail@plt+0x670>
   11540:	ldr	r1, [sp, #20]
   11544:	cmn	r1, #1
   11548:	ble	116f8 <__assert_fail@plt+0x670>
   1154c:	ldr	r2, [sp, #16]
   11550:	mvn	r3, #-2147483648	; 0x80000000
   11554:	subs	r3, r3, r2
   11558:	rscs	r1, r1, #0
   1155c:	movwlt	r2, #0
   11560:	subs	r6, r0, #1
   11564:	movne	r6, r2
   11568:	b	114d8 <__assert_fail@plt+0x450>
   1156c:	cmn	r0, #3
   11570:	beq	11584 <__assert_fail@plt+0x4fc>
   11574:	cmn	r0, #2
   11578:	bne	115cc <__assert_fail@plt+0x544>
   1157c:	mov	r0, #0
   11580:	bl	11184 <__assert_fail@plt+0xfc>
   11584:	movw	r0, #33000	; 0x80e8
   11588:	movw	r2, #29171	; 0x71f3
   1158c:	mov	r1, #0
   11590:	movt	r0, #2
   11594:	movt	r2, #1
   11598:	str	r1, [sp, #4]
   1159c:	movw	r1, #29096	; 0x71a8
   115a0:	ldr	r3, [r0]
   115a4:	movw	r0, #33100	; 0x814c
   115a8:	str	r2, [sp]
   115ac:	movw	r2, #29157	; 0x71e5
   115b0:	movt	r1, #1
   115b4:	movt	r0, #2
   115b8:	movt	r2, #1
   115bc:	ldr	r0, [r0]
   115c0:	bl	147c0 <__assert_fail@plt+0x3738>
   115c4:	mov	r0, #0
   115c8:	bl	10f80 <exit@plt>
   115cc:	cmn	r0, #1
   115d0:	bne	1173c <__assert_fail@plt+0x6b4>
   115d4:	movw	r7, #33080	; 0x8138
   115d8:	movt	r7, #2
   115dc:	ldr	r0, [r7]
   115e0:	sub	r1, r5, r0
   115e4:	cmp	r1, #2
   115e8:	blt	11630 <__assert_fail@plt+0x5a8>
   115ec:	movw	r1, #29187	; 0x7203
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	movt	r1, #1
   115fc:	bl	10ec0 <dcgettext@plt>
   11600:	mov	r5, r0
   11604:	ldr	r0, [r7]
   11608:	add	r0, r4, r0, lsl #2
   1160c:	ldr	r0, [r0, #4]
   11610:	bl	14204 <__assert_fail@plt+0x317c>
   11614:	mov	r3, r0
   11618:	mov	r0, #0
   1161c:	mov	r1, #0
   11620:	mov	r2, r5
   11624:	bl	10f2c <error@plt>
   11628:	mov	r0, #1
   1162c:	bl	11184 <__assert_fail@plt+0xfc>
   11630:	cmp	r0, r5
   11634:	movw	r1, #30305	; 0x7661
   11638:	ldrlt	r4, [r4, r0, lsl #2]
   1163c:	movt	r1, #1
   11640:	movwge	r4, #30305	; 0x7661
   11644:	movtge	r4, #1
   11648:	mov	r0, r4
   1164c:	bl	10e48 <strcmp@plt>
   11650:	cmp	r0, #0
   11654:	bne	11668 <__assert_fail@plt+0x5e0>
   11658:	movw	r0, #33096	; 0x8148
   1165c:	movt	r0, #2
   11660:	ldr	r5, [r0]
   11664:	b	116b4 <__assert_fail@plt+0x62c>
   11668:	movw	r1, #29204	; 0x7214
   1166c:	mov	r0, r4
   11670:	movt	r1, #1
   11674:	bl	1104c <fopen64@plt>
   11678:	mov	r5, r0
   1167c:	cmp	r0, #0
   11680:	bne	116b4 <__assert_fail@plt+0x62c>
   11684:	bl	10fa4 <__errno_location@plt>
   11688:	ldr	r5, [r0]
   1168c:	mov	r0, #0
   11690:	mov	r1, #3
   11694:	mov	r2, r4
   11698:	bl	13f58 <__assert_fail@plt+0x2ed0>
   1169c:	movw	r2, #29136	; 0x71d0
   116a0:	mov	r3, r0
   116a4:	mov	r0, #1
   116a8:	mov	r1, r5
   116ac:	movt	r2, #1
   116b0:	bl	10f2c <error@plt>
   116b4:	mov	r0, r5
   116b8:	mov	r1, #2
   116bc:	bl	123d0 <__assert_fail@plt+0x1348>
   116c0:	movw	r0, #33100	; 0x814c
   116c4:	tst	sl, #1
   116c8:	movt	r0, #2
   116cc:	ldr	r2, [r0]
   116d0:	beq	116e8 <__assert_fail@plt+0x660>
   116d4:	ldr	r0, [sp, #12]
   116d8:	mov	r1, r4
   116dc:	and	r3, r0, #1
   116e0:	mov	r0, r5
   116e4:	bl	11744 <__assert_fail@plt+0x6bc>
   116e8:	mov	r0, r5
   116ec:	mov	r1, r4
   116f0:	mov	r3, r6
   116f4:	bl	11944 <__assert_fail@plt+0x8bc>
   116f8:	movw	r1, #29139	; 0x71d3
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	10ec0 <dcgettext@plt>
   1170c:	mov	r4, r0
   11710:	movw	r0, #33104	; 0x8150
   11714:	movt	r0, #2
   11718:	ldr	r0, [r0]
   1171c:	bl	14204 <__assert_fail@plt+0x317c>
   11720:	movw	r2, #29132	; 0x71cc
   11724:	str	r0, [sp]
   11728:	mov	r0, #1
   1172c:	mov	r1, #0
   11730:	mov	r3, r4
   11734:	movt	r2, #1
   11738:	bl	10f2c <error@plt>
   1173c:	mov	r0, #1
   11740:	bl	11184 <__assert_fail@plt+0xfc>
   11744:	push	{fp, lr}
   11748:	mov	fp, sp
   1174c:	sub	sp, sp, #40	; 0x28
   11750:	add	ip, sp, #8
   11754:	stm	ip, {r1, r2, r3}
   11758:	str	r0, [fp, #-16]
   1175c:	mov	r0, #4096	; 0x1000
   11760:	bl	149f4 <__assert_fail@plt+0x396c>
   11764:	mov	r4, r0
   11768:	mov	r0, #3072	; 0xc00
   1176c:	bl	149f4 <__assert_fail@plt+0x396c>
   11770:	str	r0, [sp, #20]
   11774:	sub	r0, fp, #8
   11778:	bl	11e70 <__assert_fail@plt+0xde8>
   1177c:	mov	sl, #0
   11780:	ldr	r3, [fp, #-16]
   11784:	add	r9, r4, sl
   11788:	rsb	r2, sl, #4096	; 0x1000
   1178c:	mov	r1, #1
   11790:	mov	r0, r9
   11794:	mov	r6, r3
   11798:	bl	11064 <fread_unlocked@plt>
   1179c:	mov	r8, r0
   117a0:	cmp	r0, #1
   117a4:	blt	1180c <__assert_fail@plt+0x784>
   117a8:	ldr	r0, [sp, #16]
   117ac:	cmp	r0, #0
   117b0:	beq	1180c <__assert_fail@plt+0x784>
   117b4:	mov	r5, #0
   117b8:	add	r0, r5, sl
   117bc:	ldrb	r7, [r4, r0]
   117c0:	mov	r0, r7
   117c4:	bl	11e50 <__assert_fail@plt+0xdc8>
   117c8:	cmp	r0, #0
   117cc:	bne	11800 <__assert_fail@plt+0x778>
   117d0:	cmp	r7, #61	; 0x3d
   117d4:	beq	11800 <__assert_fail@plt+0x778>
   117d8:	sub	r8, r8, #1
   117dc:	add	r0, r9, r5
   117e0:	sub	r2, r8, r5
   117e4:	add	r1, r0, #1
   117e8:	bl	10e6c <memmove@plt>
   117ec:	cmp	r8, #1
   117f0:	blt	1180c <__assert_fail@plt+0x784>
   117f4:	cmp	r5, r8
   117f8:	blt	117b8 <__assert_fail@plt+0x730>
   117fc:	b	1180c <__assert_fail@plt+0x784>
   11800:	add	r5, r5, #1
   11804:	cmp	r8, #1
   11808:	bge	117f4 <__assert_fail@plt+0x76c>
   1180c:	ldr	r0, [r6]
   11810:	tst	r0, #32
   11814:	bne	11930 <__assert_fail@plt+0x8a8>
   11818:	add	sl, r8, sl
   1181c:	cmp	sl, #4096	; 0x1000
   11820:	bge	1182c <__assert_fail@plt+0x7a4>
   11824:	ands	r0, r0, #16
   11828:	beq	11780 <__assert_fail@plt+0x6f8>
   1182c:	ldr	r9, [sp, #12]
   11830:	mov	r6, #0
   11834:	mov	r5, #0
   11838:	ldr	r8, [sp, #20]
   1183c:	mov	r0, #3072	; 0xc00
   11840:	cmp	r6, #0
   11844:	mov	r2, #0
   11848:	mov	r1, r4
   1184c:	str	r0, [fp, #-12]
   11850:	sub	r0, fp, #12
   11854:	moveq	r2, sl
   11858:	str	r0, [sp]
   1185c:	sub	r0, fp, #8
   11860:	mov	r3, r8
   11864:	bl	11e7c <__assert_fail@plt+0xdf4>
   11868:	ldr	r2, [fp, #-12]
   1186c:	mov	r7, r0
   11870:	mov	r0, r8
   11874:	mov	r1, #1
   11878:	mov	r3, r9
   1187c:	bl	10ea8 <fwrite_unlocked@plt>
   11880:	ldr	r1, [fp, #-12]
   11884:	cmp	r0, r1
   11888:	bcc	11904 <__assert_fail@plt+0x87c>
   1188c:	cmp	r7, #0
   11890:	beq	118e0 <__assert_fail@plt+0x858>
   11894:	ldr	r0, [fp, #-16]
   11898:	mov	r2, #2
   1189c:	add	r1, r5, #1
   118a0:	ldr	r0, [r0]
   118a4:	ands	r0, r0, #16
   118a8:	movweq	r2, #1
   118ac:	cmp	r1, r2
   118b0:	bcs	118c8 <__assert_fail@plt+0x840>
   118b4:	ldr	r2, [fp, #-8]
   118b8:	sub	r6, r6, #1
   118bc:	orrs	r2, r5, r2
   118c0:	mov	r5, r1
   118c4:	bne	11838 <__assert_fail@plt+0x7b0>
   118c8:	mov	sl, #0
   118cc:	cmp	r0, #0
   118d0:	beq	11780 <__assert_fail@plt+0x6f8>
   118d4:	ldr	r0, [fp, #-16]
   118d8:	ldr	r1, [sp, #8]
   118dc:	bl	11b80 <__assert_fail@plt+0xaf8>
   118e0:	movw	r1, #29712	; 0x7410
   118e4:	mov	r0, #0
   118e8:	mov	r2, #5
   118ec:	movt	r1, #1
   118f0:	bl	10ec0 <dcgettext@plt>
   118f4:	mov	r2, r0
   118f8:	mov	r0, #1
   118fc:	mov	r1, #0
   11900:	bl	10f2c <error@plt>
   11904:	bl	10fa4 <__errno_location@plt>
   11908:	ldr	r4, [r0]
   1190c:	movw	r1, #29700	; 0x7404
   11910:	movt	r1, #1
   11914:	mov	r0, #0
   11918:	mov	r2, #5
   1191c:	bl	10ec0 <dcgettext@plt>
   11920:	mov	r2, r0
   11924:	mov	r0, #1
   11928:	mov	r1, r4
   1192c:	bl	10f2c <error@plt>
   11930:	bl	10fa4 <__errno_location@plt>
   11934:	ldr	r4, [r0]
   11938:	movw	r1, #29689	; 0x73f9
   1193c:	movt	r1, #1
   11940:	b	11914 <__assert_fail@plt+0x88c>
   11944:	push	{fp, lr}
   11948:	mov	fp, sp
   1194c:	sub	sp, sp, #16
   11950:	mov	r5, r0
   11954:	mov	r0, #30720	; 0x7800
   11958:	str	r3, [fp, #-4]
   1195c:	stm	sp, {r1, r2}
   11960:	bl	149f4 <__assert_fail@plt+0x396c>
   11964:	mov	r4, r0
   11968:	mov	r0, #40960	; 0xa000
   1196c:	bl	149f4 <__assert_fail@plt+0x396c>
   11970:	mov	r7, r0
   11974:	mov	sl, #0
   11978:	str	r0, [sp, #8]
   1197c:	mov	r6, #0
   11980:	add	r0, r4, r6
   11984:	rsb	r2, r6, #30720	; 0x7800
   11988:	mov	r1, #1
   1198c:	mov	r3, r5
   11990:	bl	11064 <fread_unlocked@plt>
   11994:	add	r6, r0, r6
   11998:	ldr	r0, [r5]
   1199c:	tst	r0, #16
   119a0:	bne	119b4 <__assert_fail@plt+0x92c>
   119a4:	cmp	r6, #30720	; 0x7800
   119a8:	bge	119b4 <__assert_fail@plt+0x92c>
   119ac:	ands	r0, r0, #32
   119b0:	beq	11980 <__assert_fail@plt+0x8f8>
   119b4:	cmp	r6, #1
   119b8:	blt	11ac0 <__assert_fail@plt+0xa38>
   119bc:	movw	r1, #21846	; 0x5556
   119c0:	add	r0, r6, #2
   119c4:	mov	r2, r7
   119c8:	movt	r1, #21845	; 0x5555
   119cc:	smmul	r0, r0, r1
   119d0:	mov	r1, r6
   119d4:	add	r0, r0, r0, lsr #31
   119d8:	lsl	r8, r0, #2
   119dc:	mov	r0, r4
   119e0:	mov	r3, r8
   119e4:	bl	11c10 <__assert_fail@plt+0xb88>
   119e8:	ldr	r0, [fp, #-4]
   119ec:	cmp	r0, #0
   119f0:	beq	11a9c <__assert_fail@plt+0xa14>
   119f4:	mov	r7, #0
   119f8:	ldr	r0, [fp, #-4]
   119fc:	sub	r9, r8, r7
   11a00:	sub	r0, r0, sl
   11a04:	cmp	r0, r9
   11a08:	movlt	r9, r0
   11a0c:	cmp	r9, #0
   11a10:	beq	11a50 <__assert_fail@plt+0x9c8>
   11a14:	movw	r1, #33100	; 0x814c
   11a18:	ldr	r0, [sp, #8]
   11a1c:	mov	r2, r9
   11a20:	movt	r1, #2
   11a24:	ldr	r3, [r1]
   11a28:	mov	r1, #1
   11a2c:	add	r0, r0, r7
   11a30:	bl	10ea8 <fwrite_unlocked@plt>
   11a34:	cmp	r0, r9
   11a38:	bcc	11b28 <__assert_fail@plt+0xaa0>
   11a3c:	add	r7, r9, r7
   11a40:	add	sl, r9, sl
   11a44:	cmp	r7, r8
   11a48:	blt	119f8 <__assert_fail@plt+0x970>
   11a4c:	b	11ac0 <__assert_fail@plt+0xa38>
   11a50:	ldr	r0, [sp, #4]
   11a54:	ldr	r2, [r0, #20]
   11a58:	ldr	r1, [r0, #24]
   11a5c:	cmp	r2, r1
   11a60:	bcs	11a84 <__assert_fail@plt+0x9fc>
   11a64:	add	r1, r2, #1
   11a68:	mov	sl, #0
   11a6c:	str	r1, [r0, #20]
   11a70:	mov	r0, #10
   11a74:	strb	r0, [r2]
   11a78:	cmp	r7, r8
   11a7c:	blt	119f8 <__assert_fail@plt+0x970>
   11a80:	b	11ac0 <__assert_fail@plt+0xa38>
   11a84:	mov	r1, #10
   11a88:	bl	11010 <__overflow@plt>
   11a8c:	mov	sl, #0
   11a90:	cmn	r0, #1
   11a94:	bne	11a78 <__assert_fail@plt+0x9f0>
   11a98:	b	11b28 <__assert_fail@plt+0xaa0>
   11a9c:	movw	r0, #33100	; 0x814c
   11aa0:	mov	r1, #1
   11aa4:	mov	r2, r8
   11aa8:	movt	r0, #2
   11aac:	ldr	r3, [r0]
   11ab0:	mov	r0, r7
   11ab4:	bl	10ea8 <fwrite_unlocked@plt>
   11ab8:	cmp	r0, r8
   11abc:	bcc	11b28 <__assert_fail@plt+0xaa0>
   11ac0:	ldr	r0, [r5]
   11ac4:	ldr	r7, [sp, #8]
   11ac8:	tst	r0, #16
   11acc:	cmpeq	r6, #30720	; 0x7800
   11ad0:	bne	11adc <__assert_fail@plt+0xa54>
   11ad4:	ands	r0, r0, #32
   11ad8:	beq	1197c <__assert_fail@plt+0x8f4>
   11adc:	ldr	r0, [fp, #-4]
   11ae0:	cmp	r0, #0
   11ae4:	beq	11b3c <__assert_fail@plt+0xab4>
   11ae8:	cmp	sl, #1
   11aec:	blt	11b3c <__assert_fail@plt+0xab4>
   11af0:	ldr	r0, [sp, #4]
   11af4:	ldr	r2, [r0, #20]
   11af8:	ldr	r1, [r0, #24]
   11afc:	cmp	r2, r1
   11b00:	bcs	11b18 <__assert_fail@plt+0xa90>
   11b04:	add	r1, r2, #1
   11b08:	str	r1, [r0, #20]
   11b0c:	mov	r1, #10
   11b10:	strb	r1, [r2]
   11b14:	b	11b3c <__assert_fail@plt+0xab4>
   11b18:	mov	r1, #10
   11b1c:	bl	11010 <__overflow@plt>
   11b20:	cmn	r0, #1
   11b24:	bne	11b3c <__assert_fail@plt+0xab4>
   11b28:	bl	10fa4 <__errno_location@plt>
   11b2c:	ldr	r4, [r0]
   11b30:	movw	r1, #29700	; 0x7404
   11b34:	movt	r1, #1
   11b38:	b	11b64 <__assert_fail@plt+0xadc>
   11b3c:	ldrb	r0, [r5]
   11b40:	tst	r0, #32
   11b44:	bne	11b54 <__assert_fail@plt+0xacc>
   11b48:	ldr	r1, [sp]
   11b4c:	mov	r0, r5
   11b50:	bl	11b80 <__assert_fail@plt+0xaf8>
   11b54:	bl	10fa4 <__errno_location@plt>
   11b58:	ldr	r4, [r0]
   11b5c:	movw	r1, #29689	; 0x73f9
   11b60:	movt	r1, #1
   11b64:	mov	r0, #0
   11b68:	mov	r2, #5
   11b6c:	bl	10ec0 <dcgettext@plt>
   11b70:	mov	r2, r0
   11b74:	mov	r0, #1
   11b78:	mov	r1, r4
   11b7c:	bl	10f2c <error@plt>
   11b80:	push	{fp, lr}
   11b84:	mov	fp, sp
   11b88:	mov	r5, r1
   11b8c:	bl	1240c <__assert_fail@plt+0x1384>
   11b90:	cmp	r0, #0
   11b94:	bne	11ba0 <__assert_fail@plt+0xb18>
   11b98:	mov	r0, #0
   11b9c:	bl	10f80 <exit@plt>
   11ba0:	movw	r1, #30305	; 0x7661
   11ba4:	mov	r0, r5
   11ba8:	movt	r1, #1
   11bac:	bl	10e48 <strcmp@plt>
   11bb0:	mov	r6, r0
   11bb4:	bl	10fa4 <__errno_location@plt>
   11bb8:	ldr	r4, [r0]
   11bbc:	cmp	r6, #0
   11bc0:	bne	11be8 <__assert_fail@plt+0xb60>
   11bc4:	movw	r1, #29726	; 0x741e
   11bc8:	mov	r0, #0
   11bcc:	mov	r2, #5
   11bd0:	movt	r1, #1
   11bd4:	bl	10ec0 <dcgettext@plt>
   11bd8:	mov	r2, r0
   11bdc:	mov	r0, #1
   11be0:	mov	r1, r4
   11be4:	bl	10f2c <error@plt>
   11be8:	mov	r0, #0
   11bec:	mov	r1, #3
   11bf0:	mov	r2, r5
   11bf4:	bl	13f58 <__assert_fail@plt+0x2ed0>
   11bf8:	movw	r2, #29136	; 0x71d0
   11bfc:	mov	r3, r0
   11c00:	mov	r0, #1
   11c04:	mov	r1, r4
   11c08:	movt	r2, #1
   11c0c:	bl	10f2c <error@plt>
   11c10:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11c14:	add	fp, sp, #24
   11c18:	tst	r3, #3
   11c1c:	bne	11c94 <__assert_fail@plt+0xc0c>
   11c20:	asr	r7, r3, #2
   11c24:	add	r7, r7, r7, lsl #1
   11c28:	cmp	r7, r1
   11c2c:	bne	11c94 <__assert_fail@plt+0xc0c>
   11c30:	cmp	r1, #0
   11c34:	beq	11cb0 <__assert_fail@plt+0xc28>
   11c38:	movw	r3, #29919	; 0x74df
   11c3c:	movt	r3, #1
   11c40:	ldrb	r7, [r0]
   11c44:	subs	r1, r1, #3
   11c48:	ldrb	r6, [r3, r7, lsr #2]
   11c4c:	strb	r6, [r2]
   11c50:	ldrb	r6, [r0, #1]
   11c54:	lsr	r5, r6, #4
   11c58:	bfi	r5, r7, #4, #2
   11c5c:	ldrb	r7, [r3, r5]
   11c60:	strb	r7, [r2, #1]
   11c64:	ldrb	r7, [r0, #2]
   11c68:	add	r0, r0, #3
   11c6c:	and	r5, r7, #63	; 0x3f
   11c70:	lsr	r7, r7, #6
   11c74:	bfi	r7, r6, #2, #4
   11c78:	ldrb	r5, [r3, r5]
   11c7c:	ldrb	r7, [r3, r7]
   11c80:	strb	r5, [r2, #3]
   11c84:	strb	r7, [r2, #2]
   11c88:	add	r2, r2, #4
   11c8c:	bne	11c40 <__assert_fail@plt+0xbb8>
   11c90:	b	11cb0 <__assert_fail@plt+0xc28>
   11c94:	cmp	r1, #0
   11c98:	cmpne	r3, #0
   11c9c:	bne	11cb4 <__assert_fail@plt+0xc2c>
   11ca0:	cmp	r3, #0
   11ca4:	beq	11cb0 <__assert_fail@plt+0xc28>
   11ca8:	mov	r0, #0
   11cac:	strb	r0, [r2]
   11cb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11cb4:	movw	r6, #29919	; 0x74df
   11cb8:	add	r0, r0, #1
   11cbc:	sub	ip, r3, #3
   11cc0:	sub	lr, r3, #2
   11cc4:	sub	r9, r3, #1
   11cc8:	sub	r8, r3, #4
   11ccc:	mov	r3, #0
   11cd0:	movt	r6, #1
   11cd4:	ldrb	r4, [r0, #-1]
   11cd8:	mov	r7, r2
   11cdc:	cmp	r9, r3
   11ce0:	ldrb	r4, [r6, r4, lsr #2]
   11ce4:	strb	r4, [r7, r3]!
   11ce8:	beq	11cb0 <__assert_fail@plt+0xc28>
   11cec:	ldrb	r4, [r0, #-1]
   11cf0:	cmp	r1, #1
   11cf4:	lsl	r5, r4, #4
   11cf8:	mov	r4, #0
   11cfc:	ldrbne	r4, [r0]
   11d00:	lsrne	r4, r4, #4
   11d04:	cmp	lr, r3
   11d08:	add	r4, r4, r5
   11d0c:	and	r4, r4, #63	; 0x3f
   11d10:	ldrb	r4, [r6, r4]
   11d14:	strb	r4, [r7, #1]
   11d18:	beq	11cb0 <__assert_fail@plt+0xc28>
   11d1c:	cmp	r1, #1
   11d20:	beq	11d4c <__assert_fail@plt+0xcc4>
   11d24:	subs	r5, r1, #2
   11d28:	ldrb	r1, [r0]
   11d2c:	ldrbne	r4, [r0, #1]
   11d30:	lsl	r1, r1, #2
   11d34:	lsrne	r4, r4, #6
   11d38:	moveq	r4, #0
   11d3c:	add	r1, r4, r1
   11d40:	and	r1, r1, #63	; 0x3f
   11d44:	ldrb	r1, [r6, r1]
   11d48:	b	11d54 <__assert_fail@plt+0xccc>
   11d4c:	mov	r1, #61	; 0x3d
   11d50:	mov	r5, #0
   11d54:	cmp	ip, r3
   11d58:	strb	r1, [r7, #2]
   11d5c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   11d60:	cmp	r5, #0
   11d64:	beq	11d78 <__assert_fail@plt+0xcf0>
   11d68:	ldrb	r1, [r0, #1]
   11d6c:	and	r1, r1, #63	; 0x3f
   11d70:	ldrb	r1, [r6, r1]
   11d74:	b	11d7c <__assert_fail@plt+0xcf4>
   11d78:	mov	r1, #61	; 0x3d
   11d7c:	cmp	r8, r3
   11d80:	strb	r1, [r7, #3]
   11d84:	beq	11cb0 <__assert_fail@plt+0xc28>
   11d88:	subs	r1, r5, #1
   11d8c:	add	r3, r3, #4
   11d90:	addne	r0, r0, #3
   11d94:	cmpne	r5, #0
   11d98:	bne	11cd4 <__assert_fail@plt+0xc4c>
   11d9c:	add	r2, r2, r3
   11da0:	b	11ca8 <__assert_fail@plt+0xc20>
   11da4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11da8:	add	fp, sp, #24
   11dac:	mov	r8, r0
   11db0:	movw	r0, #21846	; 0x5556
   11db4:	mov	r4, r1
   11db8:	mov	r6, r2
   11dbc:	movt	r0, #21845	; 0x5555
   11dc0:	smmul	r0, r1, r0
   11dc4:	add	r0, r0, r0, lsr #31
   11dc8:	add	r1, r0, r0, lsl #1
   11dcc:	subs	r1, r4, r1
   11dd0:	addne	r0, r0, #1
   11dd4:	cmn	r0, #1
   11dd8:	ble	11de8 <__assert_fail@plt+0xd60>
   11ddc:	cmn	r0, #-536870911	; 0xe0000001
   11de0:	ble	11dfc <__assert_fail@plt+0xd74>
   11de4:	b	11e40 <__assert_fail@plt+0xdb8>
   11de8:	beq	11dfc <__assert_fail@plt+0xd74>
   11dec:	mov	r1, #-2147483648	; 0x80000000
   11df0:	sdiv	r1, r1, r0
   11df4:	cmp	r1, #4
   11df8:	blt	11e40 <__assert_fail@plt+0xdb8>
   11dfc:	cmn	r4, #1
   11e00:	ble	11e40 <__assert_fail@plt+0xdb8>
   11e04:	lsl	r7, r0, #2
   11e08:	orr	r5, r7, #1
   11e0c:	mov	r0, r5
   11e10:	bl	16904 <__assert_fail@plt+0x587c>
   11e14:	cmp	r0, #0
   11e18:	str	r0, [r6]
   11e1c:	moveq	r0, r5
   11e20:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   11e24:	mov	r2, r0
   11e28:	mov	r0, r8
   11e2c:	mov	r1, r4
   11e30:	mov	r3, r5
   11e34:	bl	11c10 <__assert_fail@plt+0xb88>
   11e38:	mov	r0, r7
   11e3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11e40:	mov	r7, #0
   11e44:	mov	r0, r7
   11e48:	str	r7, [r6]
   11e4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11e50:	movw	r1, #29983	; 0x751f
   11e54:	movt	r1, #1
   11e58:	add	r0, r1, r0
   11e5c:	ldrsb	r1, [r0]
   11e60:	mov	r0, #0
   11e64:	cmn	r1, #1
   11e68:	movwgt	r0, #1
   11e6c:	bx	lr
   11e70:	mov	r1, #0
   11e74:	str	r1, [r0]
   11e78:	bx	lr
   11e7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e80:	add	fp, sp, #28
   11e84:	sub	sp, sp, #28
   11e88:	mov	r6, r2
   11e8c:	mov	r2, r0
   11e90:	ldr	r0, [fp, #8]
   11e94:	str	r3, [sp, #24]
   11e98:	mov	r5, r1
   11e9c:	mov	r8, #0
   11ea0:	cmp	r2, #0
   11ea4:	ldr	r7, [r0]
   11ea8:	mov	r0, #0
   11eac:	str	r7, [sp, #20]
   11eb0:	beq	11ec8 <__assert_fail@plt+0xe40>
   11eb4:	clz	r0, r6
   11eb8:	lsr	r8, r0, #5
   11ebc:	ldr	r0, [r2]
   11ec0:	cmp	r0, #0
   11ec4:	movwne	r0, #1
   11ec8:	orr	r0, r0, r8
   11ecc:	add	sl, sp, #24
   11ed0:	add	r4, sp, #20
   11ed4:	str	r2, [sp, #16]
   11ed8:	str	r0, [sp, #8]
   11edc:	add	r0, r2, #4
   11ee0:	str	r0, [sp, #4]
   11ee4:	clz	r0, r2
   11ee8:	lsr	r0, r0, #5
   11eec:	str	r0, [sp, #12]
   11ef0:	b	11f00 <__assert_fail@plt+0xe78>
   11ef4:	ldr	r7, [sp, #20]
   11ef8:	ldr	r2, [sp, #16]
   11efc:	sub	r6, r9, r5
   11f00:	ldr	r0, [sp, #8]
   11f04:	cmp	r0, #0
   11f08:	beq	11f1c <__assert_fail@plt+0xe94>
   11f0c:	b	11f3c <__assert_fail@plt+0xeb4>
   11f10:	ldr	r7, [sp, #20]
   11f14:	add	r5, r5, #4
   11f18:	sub	r6, r6, #4
   11f1c:	mov	r0, r5
   11f20:	mov	r1, r6
   11f24:	mov	r2, sl
   11f28:	mov	r3, r4
   11f2c:	bl	120e4 <__assert_fail@plt+0x105c>
   11f30:	cmp	r0, #0
   11f34:	bne	11f10 <__assert_fail@plt+0xe88>
   11f38:	ldr	r2, [sp, #16]
   11f3c:	cmp	r6, #0
   11f40:	mov	r0, r6
   11f44:	movwne	r0, #1
   11f48:	orr	r0, r8, r0
   11f4c:	cmp	r0, #1
   11f50:	bne	120b8 <__assert_fail@plt+0x1030>
   11f54:	cmp	r6, #0
   11f58:	beq	11f74 <__assert_fail@plt+0xeec>
   11f5c:	ldrb	r0, [r5]
   11f60:	ldr	r1, [sp, #12]
   11f64:	subs	r0, r0, #10
   11f68:	movwne	r0, #1
   11f6c:	orrs	r0, r0, r1
   11f70:	beq	12038 <__assert_fail@plt+0xfb0>
   11f74:	ldr	r0, [sp, #20]
   11f78:	ldr	r1, [sp, #24]
   11f7c:	add	r9, r5, r6
   11f80:	cmp	r2, #0
   11f84:	str	r7, [sp, #20]
   11f88:	sub	r0, r0, r7
   11f8c:	add	r0, r1, r0
   11f90:	str	r0, [sp, #24]
   11f94:	beq	12048 <__assert_fail@plt+0xfc0>
   11f98:	ldr	r7, [r2]
   11f9c:	cmp	r7, #0
   11fa0:	beq	11fb4 <__assert_fail@plt+0xf2c>
   11fa4:	cmp	r7, #4
   11fa8:	bne	11fe0 <__assert_fail@plt+0xf58>
   11fac:	mov	r0, #0
   11fb0:	str	r0, [r2]
   11fb4:	sub	r0, r9, r5
   11fb8:	mov	r7, #0
   11fbc:	cmp	r0, #4
   11fc0:	blt	11fe0 <__assert_fail@plt+0xf58>
   11fc4:	mov	r0, r5
   11fc8:	mov	r1, #10
   11fcc:	mov	r2, #4
   11fd0:	bl	10fec <memchr@plt>
   11fd4:	ldr	r2, [sp, #16]
   11fd8:	cmp	r0, #0
   11fdc:	beq	120a4 <__assert_fail@plt+0x101c>
   11fe0:	cmp	r6, #1
   11fe4:	blt	12050 <__assert_fail@plt+0xfc8>
   11fe8:	mov	r6, r7
   11fec:	mov	r0, r5
   11ff0:	ldrb	r1, [r5], #1
   11ff4:	cmp	r1, #10
   11ff8:	bne	12008 <__assert_fail@plt+0xf80>
   11ffc:	cmp	r5, r9
   12000:	bcc	11fec <__assert_fail@plt+0xf64>
   12004:	b	12030 <__assert_fail@plt+0xfa8>
   12008:	add	r7, r6, #1
   1200c:	mov	r3, r2
   12010:	add	r5, r0, #1
   12014:	str	r7, [r3], r6
   12018:	cmp	r5, r9
   1201c:	strb	r1, [r3, #4]
   12020:	ldr	r6, [r2]
   12024:	bcs	12030 <__assert_fail@plt+0xfa8>
   12028:	cmp	r6, #4
   1202c:	bne	11fec <__assert_fail@plt+0xf64>
   12030:	add	r5, r0, #1
   12034:	b	12054 <__assert_fail@plt+0xfcc>
   12038:	ldr	r7, [sp, #20]
   1203c:	sub	r6, r6, #1
   12040:	add	r5, r5, #1
   12044:	b	11f00 <__assert_fail@plt+0xe78>
   12048:	mov	r0, r5
   1204c:	b	12058 <__assert_fail@plt+0xfd0>
   12050:	mov	r6, r7
   12054:	ldr	r0, [sp, #4]
   12058:	mov	r1, #0
   1205c:	cmp	r6, #0
   12060:	beq	120bc <__assert_fail@plt+0x1034>
   12064:	ldr	r3, [sp, #12]
   12068:	cmp	r6, #3
   1206c:	mov	r2, #0
   12070:	movwgt	r2, #1
   12074:	orr	r2, r8, r2
   12078:	orr	r2, r2, r3
   1207c:	cmp	r2, #1
   12080:	bne	120bc <__assert_fail@plt+0x1034>
   12084:	mov	r1, r6
   12088:	mov	r2, sl
   1208c:	mov	r3, r4
   12090:	bl	120e4 <__assert_fail@plt+0x105c>
   12094:	cmp	r0, #0
   12098:	mov	r1, r6
   1209c:	bne	11ef4 <__assert_fail@plt+0xe6c>
   120a0:	b	120bc <__assert_fail@plt+0x1034>
   120a4:	add	r1, r5, #4
   120a8:	mov	r0, r5
   120ac:	mov	r6, #4
   120b0:	mov	r5, r1
   120b4:	b	12084 <__assert_fail@plt+0xffc>
   120b8:	mov	r1, r6
   120bc:	ldr	r0, [fp, #8]
   120c0:	ldr	r2, [sp, #20]
   120c4:	mov	r3, r0
   120c8:	ldr	r0, [r0]
   120cc:	sub	r0, r0, r2
   120d0:	str	r0, [r3]
   120d4:	clz	r0, r1
   120d8:	lsr	r0, r0, #5
   120dc:	sub	sp, fp, #28
   120e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120e4:	push	{r4, r5, r6, sl, fp, lr}
   120e8:	add	fp, sp, #16
   120ec:	mov	ip, #0
   120f0:	cmp	r1, #2
   120f4:	blt	12218 <__assert_fail@plt+0x1190>
   120f8:	ldrb	r4, [r0]
   120fc:	movw	lr, #29983	; 0x751f
   12100:	movt	lr, #1
   12104:	add	r4, lr, r4
   12108:	ldrsb	r5, [r4]
   1210c:	cmp	r5, #0
   12110:	blt	12218 <__assert_fail@plt+0x1190>
   12114:	ldrb	r4, [r0, #1]
   12118:	add	r4, lr, r4
   1211c:	ldrsb	r4, [r4]
   12120:	cmp	r4, #0
   12124:	blt	12218 <__assert_fail@plt+0x1190>
   12128:	ldr	r6, [r3]
   1212c:	ldr	ip, [r2]
   12130:	cmp	r6, #0
   12134:	beq	1215c <__assert_fail@plt+0x10d4>
   12138:	ubfx	r6, r4, #4, #4
   1213c:	orr	r5, r6, r5, lsl #2
   12140:	strb	r5, [ip], #1
   12144:	ldr	r5, [r3]
   12148:	sub	r6, r5, #1
   1214c:	str	r6, [r3]
   12150:	cmp	r1, #2
   12154:	bne	12168 <__assert_fail@plt+0x10e0>
   12158:	b	12220 <__assert_fail@plt+0x1198>
   1215c:	mov	r6, #0
   12160:	cmp	r1, #2
   12164:	beq	12220 <__assert_fail@plt+0x1198>
   12168:	ldrb	r5, [r0, #2]
   1216c:	cmp	r5, #61	; 0x3d
   12170:	bne	12188 <__assert_fail@plt+0x1100>
   12174:	cmp	r1, #4
   12178:	ldrbeq	r0, [r0, #3]
   1217c:	cmpeq	r0, #61	; 0x3d
   12180:	bne	12220 <__assert_fail@plt+0x1198>
   12184:	b	12210 <__assert_fail@plt+0x1188>
   12188:	add	r5, lr, r5
   1218c:	ldrsb	r5, [r5]
   12190:	cmn	r5, #1
   12194:	ble	12220 <__assert_fail@plt+0x1198>
   12198:	cmp	r6, #0
   1219c:	beq	121c4 <__assert_fail@plt+0x113c>
   121a0:	ubfx	r6, r5, #2, #6
   121a4:	orr	r4, r6, r4, lsl #4
   121a8:	strb	r4, [ip], #1
   121ac:	ldr	r4, [r3]
   121b0:	sub	r4, r4, #1
   121b4:	str	r4, [r3]
   121b8:	cmp	r1, #3
   121bc:	bne	121d0 <__assert_fail@plt+0x1148>
   121c0:	b	12220 <__assert_fail@plt+0x1198>
   121c4:	mov	r4, #0
   121c8:	cmp	r1, #3
   121cc:	beq	12220 <__assert_fail@plt+0x1198>
   121d0:	ldrb	r0, [r0, #3]
   121d4:	cmp	r0, #61	; 0x3d
   121d8:	bne	121e8 <__assert_fail@plt+0x1160>
   121dc:	cmp	r1, #4
   121e0:	beq	12210 <__assert_fail@plt+0x1188>
   121e4:	b	12220 <__assert_fail@plt+0x1198>
   121e8:	add	r0, lr, r0
   121ec:	ldrsb	r0, [r0]
   121f0:	cmn	r0, #1
   121f4:	ble	12220 <__assert_fail@plt+0x1198>
   121f8:	cmp	r4, #0
   121fc:	orrne	r0, r0, r5, lsl #6
   12200:	strbne	r0, [ip], #1
   12204:	ldrne	r0, [r3]
   12208:	subne	r0, r0, #1
   1220c:	strne	r0, [r3]
   12210:	str	ip, [r2]
   12214:	mov	ip, #1
   12218:	mov	r0, ip
   1221c:	pop	{r4, r5, r6, sl, fp, pc}
   12220:	str	ip, [r2]
   12224:	mov	ip, #0
   12228:	mov	r0, ip
   1222c:	pop	{r4, r5, r6, sl, fp, pc}
   12230:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12234:	add	fp, sp, #24
   12238:	sub	sp, sp, #8
   1223c:	mov	r7, r0
   12240:	asr	r0, r2, #2
   12244:	mov	r4, r3
   12248:	mov	r6, r2
   1224c:	mov	r8, r1
   12250:	add	r0, r0, r0, lsl #1
   12254:	add	r0, r0, #3
   12258:	str	r0, [sp, #4]
   1225c:	bl	16904 <__assert_fail@plt+0x587c>
   12260:	mov	r5, #1
   12264:	cmp	r0, #0
   12268:	str	r0, [r4]
   1226c:	beq	122b8 <__assert_fail@plt+0x1230>
   12270:	mov	r3, r0
   12274:	add	r0, sp, #4
   12278:	mov	r1, r8
   1227c:	mov	r2, r6
   12280:	str	r0, [sp]
   12284:	mov	r0, r7
   12288:	bl	11e7c <__assert_fail@plt+0xdf4>
   1228c:	cmp	r0, #0
   12290:	beq	122a8 <__assert_fail@plt+0x1220>
   12294:	ldr	r0, [fp, #8]
   12298:	cmp	r0, #0
   1229c:	ldrne	r1, [sp, #4]
   122a0:	strne	r1, [r0]
   122a4:	b	122b8 <__assert_fail@plt+0x1230>
   122a8:	ldr	r0, [r4]
   122ac:	bl	12504 <__assert_fail@plt+0x147c>
   122b0:	mov	r5, #0
   122b4:	str	r5, [r4]
   122b8:	mov	r0, r5
   122bc:	sub	sp, fp, #24
   122c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   122c4:	movw	r1, #33112	; 0x8158
   122c8:	movt	r1, #2
   122cc:	str	r0, [r1]
   122d0:	bx	lr
   122d4:	movw	r1, #33116	; 0x815c
   122d8:	movt	r1, #2
   122dc:	strb	r0, [r1]
   122e0:	bx	lr
   122e4:	push	{r4, r5, r6, sl, fp, lr}
   122e8:	add	fp, sp, #16
   122ec:	sub	sp, sp, #8
   122f0:	movw	r0, #33100	; 0x814c
   122f4:	movt	r0, #2
   122f8:	ldr	r0, [r0]
   122fc:	bl	16988 <__assert_fail@plt+0x5900>
   12300:	cmp	r0, #0
   12304:	beq	1232c <__assert_fail@plt+0x12a4>
   12308:	movw	r0, #33116	; 0x815c
   1230c:	movt	r0, #2
   12310:	ldrb	r0, [r0]
   12314:	cmp	r0, #0
   12318:	beq	1234c <__assert_fail@plt+0x12c4>
   1231c:	bl	10fa4 <__errno_location@plt>
   12320:	ldr	r0, [r0]
   12324:	cmp	r0, #32
   12328:	bne	1234c <__assert_fail@plt+0x12c4>
   1232c:	movw	r0, #33088	; 0x8140
   12330:	movt	r0, #2
   12334:	ldr	r0, [r0]
   12338:	bl	16988 <__assert_fail@plt+0x5900>
   1233c:	cmp	r0, #0
   12340:	subeq	sp, fp, #16
   12344:	popeq	{r4, r5, r6, sl, fp, pc}
   12348:	b	123bc <__assert_fail@plt+0x1334>
   1234c:	movw	r1, #29700	; 0x7404
   12350:	mov	r0, #0
   12354:	mov	r2, #5
   12358:	movt	r1, #1
   1235c:	bl	10ec0 <dcgettext@plt>
   12360:	mov	r4, r0
   12364:	movw	r0, #33112	; 0x8158
   12368:	movt	r0, #2
   1236c:	ldr	r6, [r0]
   12370:	bl	10fa4 <__errno_location@plt>
   12374:	ldr	r5, [r0]
   12378:	cmp	r6, #0
   1237c:	bne	12398 <__assert_fail@plt+0x1310>
   12380:	movw	r2, #29136	; 0x71d0
   12384:	mov	r0, #0
   12388:	mov	r1, r5
   1238c:	mov	r3, r4
   12390:	movt	r2, #1
   12394:	b	123b8 <__assert_fail@plt+0x1330>
   12398:	mov	r0, r6
   1239c:	bl	13e7c <__assert_fail@plt+0x2df4>
   123a0:	movw	r2, #29132	; 0x71cc
   123a4:	mov	r3, r0
   123a8:	str	r4, [sp]
   123ac:	mov	r0, #0
   123b0:	mov	r1, r5
   123b4:	movt	r2, #1
   123b8:	bl	10f2c <error@plt>
   123bc:	movw	r0, #33004	; 0x80ec
   123c0:	movt	r0, #2
   123c4:	ldr	r0, [r0]
   123c8:	bl	10e84 <_exit@plt>
   123cc:	b	10e54 <posix_fadvise64@plt>
   123d0:	cmp	r0, #0
   123d4:	bxeq	lr
   123d8:	push	{r4, sl, fp, lr}
   123dc:	add	fp, sp, #8
   123e0:	sub	sp, sp, #16
   123e4:	mov	r4, r1
   123e8:	bl	10fd4 <fileno@plt>
   123ec:	mov	r1, #0
   123f0:	mov	r2, #0
   123f4:	mov	r3, #0
   123f8:	str	r1, [sp]
   123fc:	stmib	sp, {r1, r4}
   12400:	bl	10e54 <posix_fadvise64@plt>
   12404:	sub	sp, fp, #8
   12408:	pop	{r4, sl, fp, pc}
   1240c:	push	{r4, r5, r6, sl, fp, lr}
   12410:	add	fp, sp, #16
   12414:	sub	sp, sp, #8
   12418:	mov	r4, r0
   1241c:	bl	10fd4 <fileno@plt>
   12420:	cmn	r0, #1
   12424:	ble	12498 <__assert_fail@plt+0x1410>
   12428:	mov	r0, r4
   1242c:	bl	10f50 <__freading@plt>
   12430:	cmp	r0, #0
   12434:	beq	12460 <__assert_fail@plt+0x13d8>
   12438:	mov	r0, r4
   1243c:	bl	10fd4 <fileno@plt>
   12440:	mov	r1, #1
   12444:	mov	r2, #0
   12448:	mov	r3, #0
   1244c:	str	r1, [sp]
   12450:	bl	10efc <lseek64@plt>
   12454:	and	r0, r0, r1
   12458:	cmn	r0, #1
   1245c:	beq	12498 <__assert_fail@plt+0x1410>
   12460:	mov	r0, r4
   12464:	bl	124a8 <__assert_fail@plt+0x1420>
   12468:	cmp	r0, #0
   1246c:	beq	12498 <__assert_fail@plt+0x1410>
   12470:	bl	10fa4 <__errno_location@plt>
   12474:	ldr	r6, [r0]
   12478:	mov	r5, r0
   1247c:	mov	r0, r4
   12480:	bl	10ff8 <fclose@plt>
   12484:	cmp	r6, #0
   12488:	strne	r6, [r5]
   1248c:	mvnne	r0, #0
   12490:	sub	sp, fp, #16
   12494:	pop	{r4, r5, r6, sl, fp, pc}
   12498:	mov	r0, r4
   1249c:	sub	sp, fp, #16
   124a0:	pop	{r4, r5, r6, sl, fp, lr}
   124a4:	b	10ff8 <fclose@plt>
   124a8:	push	{r4, sl, fp, lr}
   124ac:	add	fp, sp, #8
   124b0:	sub	sp, sp, #8
   124b4:	mov	r4, r0
   124b8:	cmp	r0, #0
   124bc:	beq	124d8 <__assert_fail@plt+0x1450>
   124c0:	mov	r0, r4
   124c4:	bl	10f50 <__freading@plt>
   124c8:	cmp	r0, #0
   124cc:	ldrbne	r0, [r4, #1]
   124d0:	tstne	r0, #1
   124d4:	bne	124e8 <__assert_fail@plt+0x1460>
   124d8:	mov	r0, r4
   124dc:	sub	sp, fp, #8
   124e0:	pop	{r4, sl, fp, lr}
   124e4:	b	10e60 <fflush@plt>
   124e8:	mov	r0, #1
   124ec:	mov	r2, #0
   124f0:	mov	r3, #0
   124f4:	str	r0, [sp]
   124f8:	mov	r0, r4
   124fc:	bl	1252c <__assert_fail@plt+0x14a4>
   12500:	b	124d8 <__assert_fail@plt+0x1450>
   12504:	push	{r4, r5, r6, sl, fp, lr}
   12508:	add	fp, sp, #16
   1250c:	mov	r4, r0
   12510:	bl	10fa4 <__errno_location@plt>
   12514:	ldr	r6, [r0]
   12518:	mov	r5, r0
   1251c:	mov	r0, r4
   12520:	bl	10e78 <free@plt>
   12524:	str	r6, [r5]
   12528:	pop	{r4, r5, r6, sl, fp, pc}
   1252c:	push	{r4, r5, r6, r7, fp, lr}
   12530:	add	fp, sp, #16
   12534:	sub	sp, sp, #8
   12538:	mov	r4, r0
   1253c:	ldr	r0, [r0, #4]
   12540:	mov	r5, r3
   12544:	mov	r6, r2
   12548:	ldr	r1, [r4, #8]
   1254c:	cmp	r1, r0
   12550:	bne	1256c <__assert_fail@plt+0x14e4>
   12554:	ldrd	r0, [r4, #16]
   12558:	cmp	r1, r0
   1255c:	bne	1256c <__assert_fail@plt+0x14e4>
   12560:	ldr	r0, [r4, #36]	; 0x24
   12564:	cmp	r0, #0
   12568:	beq	12584 <__assert_fail@plt+0x14fc>
   1256c:	mov	r0, r4
   12570:	mov	r2, r6
   12574:	mov	r3, r5
   12578:	sub	sp, fp, #16
   1257c:	pop	{r4, r5, r6, r7, fp, lr}
   12580:	b	11004 <fseeko64@plt>
   12584:	ldr	r7, [fp, #8]
   12588:	mov	r0, r4
   1258c:	bl	10fd4 <fileno@plt>
   12590:	mov	r2, r6
   12594:	mov	r3, r5
   12598:	str	r7, [sp]
   1259c:	bl	10efc <lseek64@plt>
   125a0:	and	r2, r0, r1
   125a4:	cmn	r2, #1
   125a8:	mvneq	r0, #0
   125ac:	subeq	sp, fp, #16
   125b0:	popeq	{r4, r5, r6, r7, fp, pc}
   125b4:	strd	r0, [r4, #80]	; 0x50
   125b8:	ldr	r0, [r4]
   125bc:	bic	r0, r0, #16
   125c0:	str	r0, [r4]
   125c4:	mov	r0, #0
   125c8:	sub	sp, fp, #16
   125cc:	pop	{r4, r5, r6, r7, fp, pc}
   125d0:	push	{r4, r5, fp, lr}
   125d4:	add	fp, sp, #8
   125d8:	cmp	r0, #0
   125dc:	beq	12670 <__assert_fail@plt+0x15e8>
   125e0:	mov	r1, #47	; 0x2f
   125e4:	mov	r4, r0
   125e8:	bl	11028 <strrchr@plt>
   125ec:	cmp	r0, #0
   125f0:	mov	r5, r4
   125f4:	addne	r5, r0, #1
   125f8:	sub	r0, r5, r4
   125fc:	cmp	r0, #7
   12600:	blt	12654 <__assert_fail@plt+0x15cc>
   12604:	movw	r1, #30295	; 0x7657
   12608:	sub	r0, r5, #7
   1260c:	mov	r2, #7
   12610:	movt	r1, #1
   12614:	bl	11070 <strncmp@plt>
   12618:	cmp	r0, #0
   1261c:	bne	12654 <__assert_fail@plt+0x15cc>
   12620:	movw	r1, #30303	; 0x765f
   12624:	mov	r0, r5
   12628:	mov	r2, #3
   1262c:	movt	r1, #1
   12630:	bl	11070 <strncmp@plt>
   12634:	cmp	r0, #0
   12638:	beq	12644 <__assert_fail@plt+0x15bc>
   1263c:	mov	r4, r5
   12640:	b	12654 <__assert_fail@plt+0x15cc>
   12644:	movw	r0, #33072	; 0x8130
   12648:	add	r4, r5, #3
   1264c:	movt	r0, #2
   12650:	str	r4, [r0]
   12654:	movw	r0, #33076	; 0x8134
   12658:	movt	r0, #2
   1265c:	str	r4, [r0]
   12660:	movw	r0, #33120	; 0x8160
   12664:	movt	r0, #2
   12668:	str	r4, [r0]
   1266c:	pop	{r4, r5, fp, pc}
   12670:	movw	r0, #33088	; 0x8140
   12674:	mov	r1, #55	; 0x37
   12678:	mov	r2, #1
   1267c:	movt	r0, #2
   12680:	ldr	r3, [r0]
   12684:	movw	r0, #30239	; 0x761f
   12688:	movt	r0, #1
   1268c:	bl	10ef0 <fwrite@plt>
   12690:	bl	1107c <abort@plt>
   12694:	push	{r4, r5, r6, sl, fp, lr}
   12698:	add	fp, sp, #16
   1269c:	mov	r4, r0
   126a0:	movw	r0, #33128	; 0x8168
   126a4:	movt	r0, #2
   126a8:	cmp	r4, #0
   126ac:	moveq	r4, r0
   126b0:	bl	10fa4 <__errno_location@plt>
   126b4:	ldr	r6, [r0]
   126b8:	mov	r5, r0
   126bc:	mov	r0, r4
   126c0:	mov	r1, #48	; 0x30
   126c4:	bl	14e54 <__assert_fail@plt+0x3dcc>
   126c8:	str	r6, [r5]
   126cc:	pop	{r4, r5, r6, sl, fp, pc}
   126d0:	movw	r1, #33128	; 0x8168
   126d4:	cmp	r0, #0
   126d8:	movt	r1, #2
   126dc:	movne	r1, r0
   126e0:	ldr	r0, [r1]
   126e4:	bx	lr
   126e8:	movw	r2, #33128	; 0x8168
   126ec:	cmp	r0, #0
   126f0:	movt	r2, #2
   126f4:	movne	r2, r0
   126f8:	str	r1, [r2]
   126fc:	bx	lr
   12700:	movw	r3, #33128	; 0x8168
   12704:	cmp	r0, #0
   12708:	movt	r3, #2
   1270c:	movne	r3, r0
   12710:	ubfx	r0, r1, #5, #3
   12714:	and	r1, r1, #31
   12718:	add	r0, r3, r0, lsl #2
   1271c:	ldr	r3, [r0, #8]
   12720:	eor	r2, r2, r3, lsr r1
   12724:	and	r2, r2, #1
   12728:	eor	r2, r3, r2, lsl r1
   1272c:	str	r2, [r0, #8]
   12730:	mov	r0, #1
   12734:	and	r0, r0, r3, lsr r1
   12738:	bx	lr
   1273c:	movw	r2, #33128	; 0x8168
   12740:	cmp	r0, #0
   12744:	movt	r2, #2
   12748:	movne	r2, r0
   1274c:	ldr	r0, [r2, #4]
   12750:	str	r1, [r2, #4]
   12754:	bx	lr
   12758:	movw	r3, #33128	; 0x8168
   1275c:	cmp	r0, #0
   12760:	movt	r3, #2
   12764:	movne	r3, r0
   12768:	cmp	r1, #0
   1276c:	mov	r0, #10
   12770:	cmpne	r2, #0
   12774:	str	r0, [r3]
   12778:	bne	12788 <__assert_fail@plt+0x1700>
   1277c:	push	{fp, lr}
   12780:	mov	fp, sp
   12784:	bl	1107c <abort@plt>
   12788:	str	r1, [r3, #40]	; 0x28
   1278c:	str	r2, [r3, #44]	; 0x2c
   12790:	bx	lr
   12794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12798:	add	fp, sp, #28
   1279c:	sub	sp, sp, #20
   127a0:	mov	r7, r0
   127a4:	ldr	r0, [fp, #8]
   127a8:	movw	r5, #33128	; 0x8168
   127ac:	mov	r8, r3
   127b0:	mov	r9, r2
   127b4:	mov	sl, r1
   127b8:	movt	r5, #2
   127bc:	cmp	r0, #0
   127c0:	movne	r5, r0
   127c4:	bl	10fa4 <__errno_location@plt>
   127c8:	mov	r4, r0
   127cc:	ldm	r5, {r0, r1}
   127d0:	ldr	r2, [r5, #40]	; 0x28
   127d4:	ldr	r3, [r5, #44]	; 0x2c
   127d8:	add	r5, r5, #8
   127dc:	ldr	r6, [r4]
   127e0:	stm	sp, {r0, r1, r5}
   127e4:	str	r2, [sp, #12]
   127e8:	str	r3, [sp, #16]
   127ec:	mov	r0, r7
   127f0:	mov	r1, sl
   127f4:	mov	r2, r9
   127f8:	mov	r3, r8
   127fc:	bl	1280c <__assert_fail@plt+0x1784>
   12800:	str	r6, [r4]
   12804:	sub	sp, fp, #28
   12808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1280c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12810:	add	fp, sp, #28
   12814:	sub	sp, sp, #156	; 0x9c
   12818:	str	r0, [sp, #80]	; 0x50
   1281c:	ldr	r0, [fp, #12]
   12820:	mov	r6, r1
   12824:	mov	r9, r3
   12828:	str	r2, [fp, #-84]	; 0xffffffac
   1282c:	and	r1, r0, #4
   12830:	str	r1, [sp, #32]
   12834:	and	r1, r0, #1
   12838:	str	r1, [sp, #36]	; 0x24
   1283c:	ubfx	r4, r0, #1, #1
   12840:	bl	10f08 <__ctype_get_mb_cur_max@plt>
   12844:	str	r0, [sp, #40]	; 0x28
   12848:	ldr	r0, [fp, #24]
   1284c:	ldr	r7, [fp, #8]
   12850:	mov	r1, #0
   12854:	mov	r5, #1
   12858:	str	r1, [fp, #-56]	; 0xffffffc8
   1285c:	mov	r1, #0
   12860:	str	r1, [sp, #60]	; 0x3c
   12864:	str	r0, [sp, #76]	; 0x4c
   12868:	ldr	r0, [fp, #20]
   1286c:	str	r0, [sp, #72]	; 0x48
   12870:	mov	r0, #0
   12874:	str	r0, [sp, #56]	; 0x38
   12878:	mov	r0, #0
   1287c:	str	r0, [sp, #92]	; 0x5c
   12880:	mov	r0, #0
   12884:	str	r0, [fp, #-76]	; 0xffffffb4
   12888:	mov	r0, #0
   1288c:	cmp	r7, #10
   12890:	bhi	13810 <__assert_fail@plt+0x2788>
   12894:	add	r1, pc, #28
   12898:	mov	sl, r6
   1289c:	ldr	r6, [sp, #80]	; 0x50
   128a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   128a4:	mov	r8, #0
   128a8:	mov	r2, #1
   128ac:	mov	r3, #0
   128b0:	mov	lr, r9
   128b4:	ldr	pc, [r1, r7, lsl #2]
   128b8:	muleq	r1, ip, r9
   128bc:	andeq	r2, r1, r8, asr #19
   128c0:	andeq	r2, r1, ip, lsl #19
   128c4:	andeq	r2, r1, r4, lsl #19
   128c8:			; <UNDEFINED> instruction: 0x000129bc
   128cc:	andeq	r2, r1, r0, lsl sl
   128d0:	andeq	r2, r1, ip, lsr #19
   128d4:	andeq	r2, r1, ip, ror #20
   128d8:	andeq	r2, r1, r4, ror #17
   128dc:	andeq	r2, r1, r4, ror #17
   128e0:	andeq	r2, r1, ip, lsl #18
   128e4:	movw	r0, #30385	; 0x76b1
   128e8:	mov	r1, r7
   128ec:	movt	r0, #1
   128f0:	bl	1421c <__assert_fail@plt+0x3194>
   128f4:	str	r0, [sp, #72]	; 0x48
   128f8:	movw	r0, #30387	; 0x76b3
   128fc:	mov	r1, r7
   12900:	movt	r0, #1
   12904:	bl	1421c <__assert_fail@plt+0x3194>
   12908:	str	r0, [sp, #76]	; 0x4c
   1290c:	str	r5, [fp, #-48]	; 0xffffffd0
   12910:	mov	r8, #0
   12914:	mov	r5, r7
   12918:	tst	r4, #1
   1291c:	bne	12954 <__assert_fail@plt+0x18cc>
   12920:	ldr	r0, [sp, #72]	; 0x48
   12924:	ldrb	r0, [r0]
   12928:	cmp	r0, #0
   1292c:	beq	12954 <__assert_fail@plt+0x18cc>
   12930:	ldr	r1, [sp, #72]	; 0x48
   12934:	mov	r8, #0
   12938:	add	r1, r1, #1
   1293c:	cmp	r8, sl
   12940:	strbcc	r0, [r6, r8]
   12944:	ldrb	r0, [r1, r8]
   12948:	add	r8, r8, #1
   1294c:	cmp	r0, #0
   12950:	bne	1293c <__assert_fail@plt+0x18b4>
   12954:	ldr	r7, [sp, #76]	; 0x4c
   12958:	mov	r0, r7
   1295c:	bl	10f8c <strlen@plt>
   12960:	str	r7, [sp, #92]	; 0x5c
   12964:	mov	r7, r5
   12968:	ldr	ip, [fp, #-84]	; 0xffffffac
   1296c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12970:	str	r0, [fp, #-76]	; 0xffffffb4
   12974:	mov	r2, #1
   12978:	mov	r3, r4
   1297c:	mov	lr, r9
   12980:	b	12a6c <__assert_fail@plt+0x19e4>
   12984:	mov	r0, #1
   12988:	b	129c8 <__assert_fail@plt+0x1940>
   1298c:	tst	r4, #1
   12990:	bne	129c8 <__assert_fail@plt+0x1940>
   12994:	mov	r2, r0
   12998:	b	129f0 <__assert_fail@plt+0x1968>
   1299c:	mov	r7, #0
   129a0:	mov	r8, #0
   129a4:	mov	r2, r0
   129a8:	b	12a68 <__assert_fail@plt+0x19e0>
   129ac:	mov	r0, #1
   129b0:	mov	r8, #0
   129b4:	mov	r7, #5
   129b8:	b	12a24 <__assert_fail@plt+0x199c>
   129bc:	mov	r2, #1
   129c0:	tst	r4, #1
   129c4:	beq	129f0 <__assert_fail@plt+0x1968>
   129c8:	mov	r1, #1
   129cc:	mov	r8, #0
   129d0:	mov	r7, #2
   129d4:	mov	r2, r0
   129d8:	mov	r3, #1
   129dc:	str	r1, [fp, #-76]	; 0xffffffb4
   129e0:	movw	r1, #30387	; 0x76b3
   129e4:	movt	r1, #1
   129e8:	str	r1, [sp, #92]	; 0x5c
   129ec:	b	12a6c <__assert_fail@plt+0x19e4>
   129f0:	cmp	sl, #0
   129f4:	mov	r8, #1
   129f8:	mov	r7, #2
   129fc:	movne	r0, #39	; 0x27
   12a00:	strbne	r0, [r6]
   12a04:	movw	r0, #30387	; 0x76b3
   12a08:	movt	r0, #1
   12a0c:	b	12a5c <__assert_fail@plt+0x19d4>
   12a10:	mov	r7, #5
   12a14:	tst	r4, #1
   12a18:	beq	12a40 <__assert_fail@plt+0x19b8>
   12a1c:	mov	r0, #1
   12a20:	mov	r8, #0
   12a24:	str	r0, [fp, #-76]	; 0xffffffb4
   12a28:	movw	r0, #30383	; 0x76af
   12a2c:	mov	r2, #1
   12a30:	mov	r3, #1
   12a34:	movt	r0, #1
   12a38:	str	r0, [sp, #92]	; 0x5c
   12a3c:	b	12a6c <__assert_fail@plt+0x19e4>
   12a40:	cmp	sl, #0
   12a44:	mov	r8, #1
   12a48:	mov	r2, #1
   12a4c:	movne	r0, #34	; 0x22
   12a50:	strbne	r0, [r6]
   12a54:	movw	r0, #30383	; 0x76af
   12a58:	movt	r0, #1
   12a5c:	str	r0, [sp, #92]	; 0x5c
   12a60:	mov	r0, #1
   12a64:	str	r0, [fp, #-76]	; 0xffffffb4
   12a68:	mov	r3, #0
   12a6c:	ldr	r0, [fp, #16]
   12a70:	str	r3, [fp, #-72]	; 0xffffffb8
   12a74:	str	r7, [fp, #-64]	; 0xffffffc0
   12a78:	str	r2, [sp, #84]	; 0x54
   12a7c:	cmp	r0, #0
   12a80:	movwne	r0, #1
   12a84:	and	r0, r0, r3
   12a88:	str	r0, [fp, #-88]	; 0xffffffa8
   12a8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a90:	cmp	r0, #0
   12a94:	movwne	r0, #1
   12a98:	subs	r4, r7, #2
   12a9c:	mov	r7, #0
   12aa0:	and	r1, r0, r3
   12aa4:	str	r4, [fp, #-80]	; 0xffffffb0
   12aa8:	and	r1, r2, r1
   12aac:	str	r1, [sp, #48]	; 0x30
   12ab0:	clz	r1, r4
   12ab4:	lsr	r1, r1, #5
   12ab8:	and	r1, r1, r3
   12abc:	eor	r3, r3, #1
   12ac0:	str	r1, [sp, #64]	; 0x40
   12ac4:	mov	r1, r4
   12ac8:	str	r3, [sp, #88]	; 0x58
   12acc:	movwne	r1, #1
   12ad0:	orr	r3, r1, r3
   12ad4:	and	r1, r1, r2
   12ad8:	and	r0, r0, r1
   12adc:	str	r3, [sp, #68]	; 0x44
   12ae0:	str	r1, [fp, #-68]	; 0xffffffbc
   12ae4:	str	r0, [fp, #-60]	; 0xffffffc4
   12ae8:	eor	r0, r2, #1
   12aec:	str	r0, [sp, #52]	; 0x34
   12af0:	cmn	lr, #1
   12af4:	beq	12b04 <__assert_fail@plt+0x1a7c>
   12af8:	cmp	r7, lr
   12afc:	bne	12b10 <__assert_fail@plt+0x1a88>
   12b00:	b	13638 <__assert_fail@plt+0x25b0>
   12b04:	ldrb	r0, [ip, r7]
   12b08:	cmp	r0, #0
   12b0c:	beq	13640 <__assert_fail@plt+0x25b8>
   12b10:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b14:	mov	r9, #0
   12b18:	str	r5, [fp, #-48]	; 0xffffffd0
   12b1c:	cmp	r0, #0
   12b20:	beq	12b54 <__assert_fail@plt+0x1acc>
   12b24:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b28:	add	r4, r7, r0
   12b2c:	cmp	r0, #2
   12b30:	bcc	12b4c <__assert_fail@plt+0x1ac4>
   12b34:	cmn	lr, #1
   12b38:	bne	12b4c <__assert_fail@plt+0x1ac4>
   12b3c:	mov	r0, ip
   12b40:	bl	10f8c <strlen@plt>
   12b44:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b48:	mov	lr, r0
   12b4c:	cmp	r4, lr
   12b50:	bls	12b5c <__assert_fail@plt+0x1ad4>
   12b54:	mov	r0, #0
   12b58:	b	12b9c <__assert_fail@plt+0x1b14>
   12b5c:	ldr	r1, [sp, #92]	; 0x5c
   12b60:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12b64:	add	r0, ip, r7
   12b68:	mov	r4, lr
   12b6c:	bl	10eb4 <memcmp@plt>
   12b70:	ldr	r2, [sp, #88]	; 0x58
   12b74:	cmp	r0, #0
   12b78:	mov	r1, r0
   12b7c:	movwne	r1, #1
   12b80:	orr	r1, r1, r2
   12b84:	tst	r1, #1
   12b88:	beq	136d0 <__assert_fail@plt+0x2648>
   12b8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b90:	clz	r0, r0
   12b94:	mov	lr, r4
   12b98:	lsr	r0, r0, #5
   12b9c:	str	r0, [fp, #-52]	; 0xffffffcc
   12ba0:	ldrb	r5, [ip, r7]
   12ba4:	cmp	r5, #126	; 0x7e
   12ba8:	bhi	12f60 <__assert_fail@plt+0x1ed8>
   12bac:	add	r3, pc, #16
   12bb0:	mov	r4, #1
   12bb4:	mov	r2, #110	; 0x6e
   12bb8:	mov	r0, #97	; 0x61
   12bbc:	mov	r1, #0
   12bc0:	ldr	pc, [r3, r5, lsl #2]
   12bc4:	andeq	r2, r1, ip, asr lr
   12bc8:	andeq	r2, r1, r0, ror #30
   12bcc:	andeq	r2, r1, r0, ror #30
   12bd0:	andeq	r2, r1, r0, ror #30
   12bd4:	andeq	r2, r1, r0, ror #30
   12bd8:	andeq	r2, r1, r0, ror #30
   12bdc:	andeq	r2, r1, r0, ror #30
   12be0:	andeq	r3, r1, r4, lsl r0
   12be4:	andeq	r2, r1, ip, lsr lr
   12be8:	andeq	r2, r1, r4, lsr lr
   12bec:	andeq	r2, r1, r8, asr #28
   12bf0:	andeq	r2, r1, r8, asr #29
   12bf4:	andeq	r2, r1, ip, lsr #28
   12bf8:	andeq	r2, r1, r4, asr #28
   12bfc:	andeq	r2, r1, r0, ror #30
   12c00:	andeq	r2, r1, r0, ror #30
   12c04:	andeq	r2, r1, r0, ror #30
   12c08:	andeq	r2, r1, r0, ror #30
   12c0c:	andeq	r2, r1, r0, ror #30
   12c10:	andeq	r2, r1, r0, ror #30
   12c14:	andeq	r2, r1, r0, ror #30
   12c18:	andeq	r2, r1, r0, ror #30
   12c1c:	andeq	r2, r1, r0, ror #30
   12c20:	andeq	r2, r1, r0, ror #30
   12c24:	andeq	r2, r1, r0, ror #30
   12c28:	andeq	r2, r1, r0, ror #30
   12c2c:	andeq	r2, r1, r0, ror #30
   12c30:	andeq	r2, r1, r0, ror #30
   12c34:	andeq	r2, r1, r0, ror #30
   12c38:	andeq	r2, r1, r0, ror #30
   12c3c:	andeq	r2, r1, r0, ror #30
   12c40:	andeq	r2, r1, r0, ror #30
   12c44:	andeq	r2, r1, ip, asr #31
   12c48:	ldrdeq	r2, [r1], -r0
   12c4c:	ldrdeq	r2, [r1], -r0
   12c50:	ldrdeq	r2, [r1], -r4
   12c54:	ldrdeq	r2, [r1], -r0
   12c58:	andeq	r2, r1, r0, asr #27
   12c5c:	ldrdeq	r2, [r1], -r0
   12c60:	ldrdeq	r2, [r1], -r0
   12c64:	ldrdeq	r2, [r1], -r0
   12c68:	ldrdeq	r2, [r1], -r0
   12c6c:	ldrdeq	r2, [r1], -r0
   12c70:	andeq	r2, r1, r0, asr #27
   12c74:	andeq	r2, r1, r0, asr #27
   12c78:	andeq	r2, r1, r0, asr #27
   12c7c:	andeq	r2, r1, r0, asr #27
   12c80:	andeq	r2, r1, r0, asr #27
   12c84:	andeq	r2, r1, r0, asr #27
   12c88:	andeq	r2, r1, r0, asr #27
   12c8c:	andeq	r2, r1, r0, asr #27
   12c90:	andeq	r2, r1, r0, asr #27
   12c94:	andeq	r2, r1, r0, asr #27
   12c98:	andeq	r2, r1, r0, asr #27
   12c9c:	andeq	r2, r1, r0, asr #27
   12ca0:	andeq	r2, r1, r0, asr #27
   12ca4:	andeq	r2, r1, r0, asr #27
   12ca8:	andeq	r2, r1, r0, asr #27
   12cac:	andeq	r2, r1, r0, asr #27
   12cb0:	ldrdeq	r2, [r1], -r0
   12cb4:	ldrdeq	r2, [r1], -r0
   12cb8:	ldrdeq	r2, [r1], -r0
   12cbc:	ldrdeq	r2, [r1], -r0
   12cc0:	muleq	r1, ip, lr
   12cc4:	andeq	r2, r1, r0, ror #30
   12cc8:	andeq	r2, r1, r0, asr #27
   12ccc:	andeq	r2, r1, r0, asr #27
   12cd0:	andeq	r2, r1, r0, asr #27
   12cd4:	andeq	r2, r1, r0, asr #27
   12cd8:	andeq	r2, r1, r0, asr #27
   12cdc:	andeq	r2, r1, r0, asr #27
   12ce0:	andeq	r2, r1, r0, asr #27
   12ce4:	andeq	r2, r1, r0, asr #27
   12ce8:	andeq	r2, r1, r0, asr #27
   12cec:	andeq	r2, r1, r0, asr #27
   12cf0:	andeq	r2, r1, r0, asr #27
   12cf4:	andeq	r2, r1, r0, asr #27
   12cf8:	andeq	r2, r1, r0, asr #27
   12cfc:	andeq	r2, r1, r0, asr #27
   12d00:	andeq	r2, r1, r0, asr #27
   12d04:	andeq	r2, r1, r0, asr #27
   12d08:	andeq	r2, r1, r0, asr #27
   12d0c:	andeq	r2, r1, r0, asr #27
   12d10:	andeq	r2, r1, r0, asr #27
   12d14:	andeq	r2, r1, r0, asr #27
   12d18:	andeq	r2, r1, r0, asr #27
   12d1c:	andeq	r2, r1, r0, asr #27
   12d20:	andeq	r2, r1, r0, asr #27
   12d24:	andeq	r2, r1, r0, asr #27
   12d28:	andeq	r2, r1, r0, asr #27
   12d2c:	andeq	r2, r1, r0, asr #27
   12d30:	ldrdeq	r2, [r1], -r0
   12d34:	andeq	r2, r1, r8, lsl #28
   12d38:	andeq	r2, r1, r0, asr #27
   12d3c:	ldrdeq	r2, [r1], -r0
   12d40:	andeq	r2, r1, r0, asr #27
   12d44:	ldrdeq	r2, [r1], -r0
   12d48:	andeq	r2, r1, r0, asr #27
   12d4c:	andeq	r2, r1, r0, asr #27
   12d50:	andeq	r2, r1, r0, asr #27
   12d54:	andeq	r2, r1, r0, asr #27
   12d58:	andeq	r2, r1, r0, asr #27
   12d5c:	andeq	r2, r1, r0, asr #27
   12d60:	andeq	r2, r1, r0, asr #27
   12d64:	andeq	r2, r1, r0, asr #27
   12d68:	andeq	r2, r1, r0, asr #27
   12d6c:	andeq	r2, r1, r0, asr #27
   12d70:	andeq	r2, r1, r0, asr #27
   12d74:	andeq	r2, r1, r0, asr #27
   12d78:	andeq	r2, r1, r0, asr #27
   12d7c:	andeq	r2, r1, r0, asr #27
   12d80:	andeq	r2, r1, r0, asr #27
   12d84:	andeq	r2, r1, r0, asr #27
   12d88:	andeq	r2, r1, r0, asr #27
   12d8c:	andeq	r2, r1, r0, asr #27
   12d90:	andeq	r2, r1, r0, asr #27
   12d94:	andeq	r2, r1, r0, asr #27
   12d98:	andeq	r2, r1, r0, asr #27
   12d9c:	andeq	r2, r1, r0, asr #27
   12da0:	andeq	r2, r1, r0, asr #27
   12da4:	andeq	r2, r1, r0, asr #27
   12da8:	andeq	r2, r1, r0, asr #27
   12dac:	andeq	r2, r1, r0, asr #27
   12db0:	andeq	r2, r1, r8, ror #27
   12db4:	ldrdeq	r2, [r1], -r0
   12db8:	andeq	r2, r1, r8, ror #27
   12dbc:	ldrdeq	r2, [r1], -r4
   12dc0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12dc4:	cmp	r0, #0
   12dc8:	beq	13028 <__assert_fail@plt+0x1fa0>
   12dcc:	ldr	r0, [fp, #16]
   12dd0:	b	1302c <__assert_fail@plt+0x1fa4>
   12dd4:	mov	r4, #0
   12dd8:	cmp	r7, #0
   12ddc:	beq	12fcc <__assert_fail@plt+0x1f44>
   12de0:	mov	r9, #0
   12de4:	b	12dc0 <__assert_fail@plt+0x1d38>
   12de8:	mov	r4, #0
   12dec:	cmn	lr, #1
   12df0:	beq	12fb0 <__assert_fail@plt+0x1f28>
   12df4:	cmp	r7, #0
   12df8:	bne	12de0 <__assert_fail@plt+0x1d58>
   12dfc:	cmp	lr, #1
   12e00:	beq	12fcc <__assert_fail@plt+0x1f44>
   12e04:	b	12de0 <__assert_fail@plt+0x1d58>
   12e08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e0c:	cmp	r0, #2
   12e10:	bne	12ff0 <__assert_fail@plt+0x1f68>
   12e14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12e18:	tst	r0, #1
   12e1c:	bne	136ec <__assert_fail@plt+0x2664>
   12e20:	mov	r9, #0
   12e24:	mov	r0, #92	; 0x5c
   12e28:	b	13004 <__assert_fail@plt+0x1f7c>
   12e2c:	mov	r0, #102	; 0x66
   12e30:	b	13014 <__assert_fail@plt+0x1f8c>
   12e34:	mov	r2, #116	; 0x74
   12e38:	b	12e48 <__assert_fail@plt+0x1dc0>
   12e3c:	mov	r0, #98	; 0x62
   12e40:	b	13014 <__assert_fail@plt+0x1f8c>
   12e44:	mov	r2, #114	; 0x72
   12e48:	ldr	r0, [sp, #68]	; 0x44
   12e4c:	tst	r0, #1
   12e50:	mov	r0, r2
   12e54:	bne	13014 <__assert_fail@plt+0x1f8c>
   12e58:	b	136ec <__assert_fail@plt+0x2664>
   12e5c:	ldr	r0, [sp, #84]	; 0x54
   12e60:	tst	r0, #1
   12e64:	beq	13104 <__assert_fail@plt+0x207c>
   12e68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12e6c:	tst	r0, #1
   12e70:	bne	137fc <__assert_fail@plt+0x2774>
   12e74:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e78:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12e7c:	cmp	r0, #2
   12e80:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12e84:	movwne	r0, #1
   12e88:	orr	r0, r0, r2
   12e8c:	tst	r0, #1
   12e90:	beq	134d4 <__assert_fail@plt+0x244c>
   12e94:	mov	r0, r8
   12e98:	b	13508 <__assert_fail@plt+0x2480>
   12e9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ea0:	mov	r9, #0
   12ea4:	mov	r5, #63	; 0x3f
   12ea8:	cmp	r0, #5
   12eac:	beq	132b8 <__assert_fail@plt+0x2230>
   12eb0:	cmp	r0, #2
   12eb4:	bne	1335c <__assert_fail@plt+0x22d4>
   12eb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ebc:	tst	r0, #1
   12ec0:	beq	13360 <__assert_fail@plt+0x22d8>
   12ec4:	b	136ec <__assert_fail@plt+0x2664>
   12ec8:	mov	r0, #118	; 0x76
   12ecc:	b	13014 <__assert_fail@plt+0x1f8c>
   12ed0:	mov	r0, #1
   12ed4:	mov	r5, #39	; 0x27
   12ed8:	str	r0, [sp, #60]	; 0x3c
   12edc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ee0:	cmp	r0, #2
   12ee4:	bne	12f58 <__assert_fail@plt+0x1ed0>
   12ee8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12eec:	tst	r0, #1
   12ef0:	bne	136ec <__assert_fail@plt+0x2664>
   12ef4:	ldr	r2, [sp, #56]	; 0x38
   12ef8:	clz	r1, sl
   12efc:	mov	r9, #0
   12f00:	lsr	r1, r1, #5
   12f04:	cmp	r2, #0
   12f08:	mov	r0, r2
   12f0c:	movwne	r0, #1
   12f10:	orrs	r0, r0, r1
   12f14:	moveq	r2, sl
   12f18:	moveq	sl, r0
   12f1c:	cmp	r8, sl
   12f20:	str	r2, [sp, #56]	; 0x38
   12f24:	movcc	r0, #39	; 0x27
   12f28:	strbcc	r0, [r6, r8]
   12f2c:	add	r0, r8, #1
   12f30:	cmp	r0, sl
   12f34:	movcc	r1, #92	; 0x5c
   12f38:	strbcc	r1, [r6, r0]
   12f3c:	add	r0, r8, #2
   12f40:	add	r8, r8, #3
   12f44:	cmp	r0, sl
   12f48:	movcc	r1, #39	; 0x27
   12f4c:	strbcc	r1, [r6, r0]
   12f50:	mov	r0, #0
   12f54:	str	r0, [fp, #-56]	; 0xffffffc8
   12f58:	mov	r4, #1
   12f5c:	b	12dc0 <__assert_fail@plt+0x1d38>
   12f60:	ldr	r0, [sp, #40]	; 0x28
   12f64:	cmp	r0, #1
   12f68:	bne	13130 <__assert_fail@plt+0x20a8>
   12f6c:	str	lr, [sp, #28]
   12f70:	bl	10f74 <__ctype_b_loc@plt>
   12f74:	ldr	r0, [r0]
   12f78:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f7c:	mov	r1, #1
   12f80:	add	r0, r0, r5, lsl #1
   12f84:	ldrb	r0, [r0, #1]
   12f88:	ubfx	r4, r0, #6, #1
   12f8c:	ldr	r0, [sp, #52]	; 0x34
   12f90:	mov	r2, r1
   12f94:	cmp	r1, #1
   12f98:	orr	r0, r4, r0
   12f9c:	bhi	13368 <__assert_fail@plt+0x22e0>
   12fa0:	tst	r0, #1
   12fa4:	beq	13368 <__assert_fail@plt+0x22e0>
   12fa8:	ldr	lr, [sp, #28]
   12fac:	b	12dc0 <__assert_fail@plt+0x1d38>
   12fb0:	cmp	r7, #0
   12fb4:	ldrbeq	r0, [ip, #1]
   12fb8:	cmpeq	r0, #0
   12fbc:	beq	12fcc <__assert_fail@plt+0x1f44>
   12fc0:	mvn	lr, #0
   12fc4:	mov	r9, #0
   12fc8:	b	12dc0 <__assert_fail@plt+0x1d38>
   12fcc:	mov	r1, #1
   12fd0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fd4:	cmp	r0, #2
   12fd8:	bne	12fe8 <__assert_fail@plt+0x1f60>
   12fdc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12fe0:	tst	r0, #1
   12fe4:	bne	136ec <__assert_fail@plt+0x2664>
   12fe8:	mov	r4, r1
   12fec:	b	12dc0 <__assert_fail@plt+0x1d38>
   12ff0:	ldr	r1, [sp, #48]	; 0x30
   12ff4:	mov	r9, #0
   12ff8:	mov	r0, #92	; 0x5c
   12ffc:	cmp	r1, #0
   13000:	beq	13014 <__assert_fail@plt+0x1f8c>
   13004:	mov	r4, #0
   13008:	cmp	r9, #0
   1300c:	beq	135a0 <__assert_fail@plt+0x2518>
   13010:	b	135dc <__assert_fail@plt+0x2554>
   13014:	ldr	r1, [sp, #84]	; 0x54
   13018:	mov	r4, #0
   1301c:	mov	r9, #0
   13020:	tst	r1, #1
   13024:	bne	13064 <__assert_fail@plt+0x1fdc>
   13028:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1302c:	cmp	r0, #0
   13030:	mov	r0, r5
   13034:	beq	13058 <__assert_fail@plt+0x1fd0>
   13038:	ldr	r1, [fp, #16]
   1303c:	ubfx	r0, r5, #5, #3
   13040:	mov	r2, #1
   13044:	ldr	r0, [r1, r0, lsl #2]
   13048:	and	r1, r5, #31
   1304c:	tst	r0, r2, lsl r1
   13050:	mov	r0, r5
   13054:	bne	13064 <__assert_fail@plt+0x1fdc>
   13058:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1305c:	cmp	r1, #0
   13060:	beq	13598 <__assert_fail@plt+0x2510>
   13064:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13068:	tst	r1, #1
   1306c:	bne	136c4 <__assert_fail@plt+0x263c>
   13070:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13074:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13078:	cmp	r1, #2
   1307c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13080:	movwne	r1, #1
   13084:	orr	r1, r1, r2
   13088:	tst	r1, #1
   1308c:	beq	13098 <__assert_fail@plt+0x2010>
   13090:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13094:	b	130d4 <__assert_fail@plt+0x204c>
   13098:	cmp	r8, sl
   1309c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   130a0:	movcc	r1, #39	; 0x27
   130a4:	strbcc	r1, [r6, r8]
   130a8:	add	r1, r8, #1
   130ac:	cmp	r1, sl
   130b0:	movcc	r2, #36	; 0x24
   130b4:	strbcc	r2, [r6, r1]
   130b8:	add	r1, r8, #2
   130bc:	add	r8, r8, #3
   130c0:	cmp	r1, sl
   130c4:	movcc	r2, #39	; 0x27
   130c8:	strbcc	r2, [r6, r1]
   130cc:	mov	r1, #1
   130d0:	str	r1, [fp, #-56]	; 0xffffffc8
   130d4:	cmp	r8, sl
   130d8:	movcc	r1, #92	; 0x5c
   130dc:	strbcc	r1, [r6, r8]
   130e0:	add	r8, r8, #1
   130e4:	cmp	r8, sl
   130e8:	and	r5, r5, r4
   130ec:	add	r7, r7, #1
   130f0:	strbcc	r0, [r6, r8]
   130f4:	add	r8, r8, #1
   130f8:	cmn	lr, #1
   130fc:	bne	12af8 <__assert_fail@plt+0x1a70>
   13100:	b	12b04 <__assert_fail@plt+0x1a7c>
   13104:	ldr	r0, [sp, #36]	; 0x24
   13108:	mov	r4, #0
   1310c:	mov	r9, #0
   13110:	mov	r5, #0
   13114:	cmp	r0, #0
   13118:	beq	13028 <__assert_fail@plt+0x1fa0>
   1311c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13120:	add	r7, r7, #1
   13124:	cmn	lr, #1
   13128:	bne	12af8 <__assert_fail@plt+0x1a70>
   1312c:	b	12b04 <__assert_fail@plt+0x1a7c>
   13130:	mov	r0, #0
   13134:	cmn	lr, #1
   13138:	str	r0, [fp, #-36]	; 0xffffffdc
   1313c:	str	r0, [fp, #-40]	; 0xffffffd8
   13140:	bne	13154 <__assert_fail@plt+0x20cc>
   13144:	mov	r0, ip
   13148:	bl	10f8c <strlen@plt>
   1314c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13150:	mov	lr, r0
   13154:	add	r0, ip, r7
   13158:	mov	r4, #1
   1315c:	mov	r6, #0
   13160:	str	lr, [sp, #28]
   13164:	str	r0, [sp, #24]
   13168:	sub	r0, fp, #40	; 0x28
   1316c:	mov	r3, r0
   13170:	str	r6, [sp, #44]	; 0x2c
   13174:	add	r6, r6, r7
   13178:	sub	r0, fp, #44	; 0x2c
   1317c:	add	r1, ip, r6
   13180:	sub	r2, lr, r6
   13184:	bl	16a44 <__assert_fail@plt+0x59bc>
   13188:	cmp	r0, #0
   1318c:	beq	13624 <__assert_fail@plt+0x259c>
   13190:	cmn	r0, #1
   13194:	beq	135e4 <__assert_fail@plt+0x255c>
   13198:	ldr	lr, [sp, #28]
   1319c:	cmn	r0, #2
   131a0:	beq	135ec <__assert_fail@plt+0x2564>
   131a4:	ldr	r2, [sp, #64]	; 0x40
   131a8:	cmp	r0, #2
   131ac:	mov	r1, #0
   131b0:	movwcc	r1, #1
   131b4:	eor	r2, r2, #1
   131b8:	orrs	r1, r2, r1
   131bc:	bne	1327c <__assert_fail@plt+0x21f4>
   131c0:	ldr	r1, [sp, #44]	; 0x2c
   131c4:	ldr	r2, [sp, #24]
   131c8:	add	r1, r2, r1
   131cc:	mov	r2, #1
   131d0:	ldrb	r3, [r1, r2]
   131d4:	sub	r3, r3, #91	; 0x5b
   131d8:	cmp	r3, #33	; 0x21
   131dc:	bhi	13270 <__assert_fail@plt+0x21e8>
   131e0:	add	r6, pc, #0
   131e4:	ldr	pc, [r6, r3, lsl #2]
   131e8:	andeq	r3, r1, r4, ror #13
   131ec:	andeq	r3, r1, r4, ror #13
   131f0:	andeq	r3, r1, r0, ror r2
   131f4:	andeq	r3, r1, r4, ror #13
   131f8:	andeq	r3, r1, r0, ror r2
   131fc:	andeq	r3, r1, r4, ror #13
   13200:	andeq	r3, r1, r0, ror r2
   13204:	andeq	r3, r1, r0, ror r2
   13208:	andeq	r3, r1, r0, ror r2
   1320c:	andeq	r3, r1, r0, ror r2
   13210:	andeq	r3, r1, r0, ror r2
   13214:	andeq	r3, r1, r0, ror r2
   13218:	andeq	r3, r1, r0, ror r2
   1321c:	andeq	r3, r1, r0, ror r2
   13220:	andeq	r3, r1, r0, ror r2
   13224:	andeq	r3, r1, r0, ror r2
   13228:	andeq	r3, r1, r0, ror r2
   1322c:	andeq	r3, r1, r0, ror r2
   13230:	andeq	r3, r1, r0, ror r2
   13234:	andeq	r3, r1, r0, ror r2
   13238:	andeq	r3, r1, r0, ror r2
   1323c:	andeq	r3, r1, r0, ror r2
   13240:	andeq	r3, r1, r0, ror r2
   13244:	andeq	r3, r1, r0, ror r2
   13248:	andeq	r3, r1, r0, ror r2
   1324c:	andeq	r3, r1, r0, ror r2
   13250:	andeq	r3, r1, r0, ror r2
   13254:	andeq	r3, r1, r0, ror r2
   13258:	andeq	r3, r1, r0, ror r2
   1325c:	andeq	r3, r1, r0, ror r2
   13260:	andeq	r3, r1, r0, ror r2
   13264:	andeq	r3, r1, r0, ror r2
   13268:	andeq	r3, r1, r0, ror r2
   1326c:	andeq	r3, r1, r4, ror #13
   13270:	add	r2, r2, #1
   13274:	cmp	r2, r0
   13278:	bcc	131d0 <__assert_fail@plt+0x2148>
   1327c:	ldr	r6, [sp, #44]	; 0x2c
   13280:	add	r6, r0, r6
   13284:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13288:	bl	10ee4 <iswprint@plt>
   1328c:	cmp	r0, #0
   13290:	movwne	r0, #1
   13294:	and	r4, r4, r0
   13298:	sub	r0, fp, #40	; 0x28
   1329c:	bl	10e9c <mbsinit@plt>
   132a0:	ldr	lr, [sp, #28]
   132a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   132a8:	sub	r3, fp, #40	; 0x28
   132ac:	cmp	r0, #0
   132b0:	beq	13170 <__assert_fail@plt+0x20e8>
   132b4:	b	1362c <__assert_fail@plt+0x25a4>
   132b8:	ldr	r0, [sp, #32]
   132bc:	cmp	r0, #0
   132c0:	beq	1335c <__assert_fail@plt+0x22d4>
   132c4:	add	r0, r7, #2
   132c8:	cmp	r0, lr
   132cc:	bcs	1335c <__assert_fail@plt+0x22d4>
   132d0:	add	r1, ip, r7
   132d4:	ldrb	r1, [r1, #1]
   132d8:	cmp	r1, #63	; 0x3f
   132dc:	bne	1335c <__assert_fail@plt+0x22d4>
   132e0:	ldrb	r5, [ip, r0]
   132e4:	sub	r1, r5, #33	; 0x21
   132e8:	cmp	r1, #29
   132ec:	bhi	1335c <__assert_fail@plt+0x22d4>
   132f0:	movw	r3, #20929	; 0x51c1
   132f4:	mov	r2, #1
   132f8:	movt	r3, #14336	; 0x3800
   132fc:	tst	r3, r2, lsl r1
   13300:	beq	1335c <__assert_fail@plt+0x22d4>
   13304:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13308:	tst	r1, #1
   1330c:	bne	13804 <__assert_fail@plt+0x277c>
   13310:	cmp	r8, sl
   13314:	mov	r7, r0
   13318:	mov	r4, #0
   1331c:	movcc	r1, #63	; 0x3f
   13320:	strbcc	r1, [r6, r8]
   13324:	add	r1, r8, #1
   13328:	cmp	r1, sl
   1332c:	movcc	r2, #34	; 0x22
   13330:	strbcc	r2, [r6, r1]
   13334:	add	r1, r8, #2
   13338:	cmp	r1, sl
   1333c:	movcc	r2, #34	; 0x22
   13340:	strbcc	r2, [r6, r1]
   13344:	add	r1, r8, #3
   13348:	add	r8, r8, #4
   1334c:	cmp	r1, sl
   13350:	movcc	r2, #63	; 0x3f
   13354:	strbcc	r2, [r6, r1]
   13358:	b	12dc0 <__assert_fail@plt+0x1d38>
   1335c:	mov	r5, #63	; 0x3f
   13360:	mov	r4, #0
   13364:	b	12dc0 <__assert_fail@plt+0x1d38>
   13368:	add	r1, r2, r7
   1336c:	ldr	lr, [sp, #28]
   13370:	mov	r3, #0
   13374:	str	r1, [sp, #44]	; 0x2c
   13378:	add	r1, r7, #1
   1337c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13380:	tst	r0, #1
   13384:	bne	13458 <__assert_fail@plt+0x23d0>
   13388:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1338c:	tst	r2, #1
   13390:	bne	1374c <__assert_fail@plt+0x26c4>
   13394:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13398:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1339c:	cmp	r7, #2
   133a0:	movwne	r3, #1
   133a4:	orr	r3, r3, r2
   133a8:	tst	r3, #1
   133ac:	bne	133e8 <__assert_fail@plt+0x2360>
   133b0:	cmp	r8, sl
   133b4:	add	r3, r8, #1
   133b8:	movcc	r2, #39	; 0x27
   133bc:	strbcc	r2, [r6, r8]
   133c0:	cmp	r3, sl
   133c4:	movcc	r2, #36	; 0x24
   133c8:	strbcc	r2, [r6, r3]
   133cc:	add	r3, r8, #2
   133d0:	add	r8, r8, #3
   133d4:	cmp	r3, sl
   133d8:	movcc	r2, #39	; 0x27
   133dc:	strbcc	r2, [r6, r3]
   133e0:	mov	r2, #1
   133e4:	str	r2, [fp, #-56]	; 0xffffffc8
   133e8:	cmp	r8, sl
   133ec:	movcc	r3, #92	; 0x5c
   133f0:	strbcc	r3, [r6, r8]
   133f4:	add	r3, r8, #1
   133f8:	cmp	r3, sl
   133fc:	andcc	r7, r5, #192	; 0xc0
   13400:	movcc	r2, #48	; 0x30
   13404:	orrcc	r7, r2, r7, lsr #6
   13408:	strbcc	r7, [r6, r3]
   1340c:	add	r3, r8, #2
   13410:	add	r8, r8, #3
   13414:	cmp	r3, sl
   13418:	lsrcc	r7, r5, #3
   1341c:	movcc	r2, #6
   13420:	bficc	r7, r2, #3, #29
   13424:	mov	r2, #6
   13428:	strbcc	r7, [r6, r3]
   1342c:	bfi	r5, r2, #3, #29
   13430:	mov	r3, #1
   13434:	b	1347c <__assert_fail@plt+0x23f4>
   13438:	cmp	r8, sl
   1343c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13440:	strbcc	r5, [r6, r8]
   13444:	add	r8, r8, #1
   13448:	ldrb	r5, [ip, r1]
   1344c:	add	r1, r1, #1
   13450:	tst	r0, #1
   13454:	beq	13388 <__assert_fail@plt+0x2300>
   13458:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1345c:	tst	r2, #1
   13460:	beq	13474 <__assert_fail@plt+0x23ec>
   13464:	cmp	r8, sl
   13468:	movcc	r7, #92	; 0x5c
   1346c:	strbcc	r7, [r6, r8]
   13470:	add	r8, r8, #1
   13474:	mov	r2, #0
   13478:	str	r2, [fp, #-52]	; 0xffffffcc
   1347c:	ldr	r2, [sp, #44]	; 0x2c
   13480:	and	r9, r3, #1
   13484:	cmp	r2, r1
   13488:	bls	13588 <__assert_fail@plt+0x2500>
   1348c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13490:	cmp	r9, #0
   13494:	movwne	r9, #1
   13498:	mvn	r7, r2
   1349c:	orr	r7, r7, r9
   134a0:	tst	r7, #1
   134a4:	bne	13438 <__assert_fail@plt+0x23b0>
   134a8:	cmp	r8, sl
   134ac:	movcc	r7, #39	; 0x27
   134b0:	strbcc	r7, [r6, r8]
   134b4:	add	r7, r8, #1
   134b8:	add	r8, r8, #2
   134bc:	cmp	r7, sl
   134c0:	movcc	r2, #39	; 0x27
   134c4:	strbcc	r2, [r6, r7]
   134c8:	mov	r2, #0
   134cc:	str	r2, [fp, #-56]	; 0xffffffc8
   134d0:	b	13438 <__assert_fail@plt+0x23b0>
   134d4:	cmp	r8, sl
   134d8:	mov	r2, #1
   134dc:	movcc	r0, #39	; 0x27
   134e0:	strbcc	r0, [r6, r8]
   134e4:	add	r0, r8, #1
   134e8:	cmp	r0, sl
   134ec:	movcc	r1, #36	; 0x24
   134f0:	strbcc	r1, [r6, r0]
   134f4:	add	r0, r8, #2
   134f8:	cmp	r0, sl
   134fc:	movcc	r1, #39	; 0x27
   13500:	strbcc	r1, [r6, r0]
   13504:	add	r0, r8, #3
   13508:	cmp	r0, sl
   1350c:	add	r8, r0, #1
   13510:	str	r2, [fp, #-56]	; 0xffffffc8
   13514:	movcc	r1, #92	; 0x5c
   13518:	strbcc	r1, [r6, r0]
   1351c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13520:	cmp	r1, #2
   13524:	beq	13578 <__assert_fail@plt+0x24f0>
   13528:	add	r1, r7, #1
   1352c:	mov	r4, #0
   13530:	mov	r9, #1
   13534:	mov	r5, #48	; 0x30
   13538:	cmp	r1, lr
   1353c:	bcs	12dc0 <__assert_fail@plt+0x1d38>
   13540:	ldrb	r1, [ip, r1]
   13544:	sub	r1, r1, #48	; 0x30
   13548:	uxtb	r1, r1
   1354c:	cmp	r1, #9
   13550:	bhi	12dc0 <__assert_fail@plt+0x1d38>
   13554:	cmp	r8, sl
   13558:	movcc	r1, #48	; 0x30
   1355c:	strbcc	r1, [r6, r8]
   13560:	add	r1, r0, #2
   13564:	add	r8, r0, #3
   13568:	cmp	r1, sl
   1356c:	movcc	r2, #48	; 0x30
   13570:	strbcc	r2, [r6, r1]
   13574:	b	12dc0 <__assert_fail@plt+0x1d38>
   13578:	mov	r0, #48	; 0x30
   1357c:	mov	r9, #1
   13580:	mov	r4, #0
   13584:	b	13058 <__assert_fail@plt+0x1fd0>
   13588:	cmp	r9, #0
   1358c:	sub	r7, r1, #1
   13590:	mov	r0, r5
   13594:	movwne	r9, #1
   13598:	cmp	r9, #0
   1359c:	bne	135dc <__assert_fail@plt+0x2554>
   135a0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   135a4:	tst	r1, #1
   135a8:	beq	135dc <__assert_fail@plt+0x2554>
   135ac:	cmp	r8, sl
   135b0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   135b4:	movcc	r1, #39	; 0x27
   135b8:	strbcc	r1, [r6, r8]
   135bc:	add	r1, r8, #1
   135c0:	add	r8, r8, #2
   135c4:	cmp	r1, sl
   135c8:	movcc	r2, #39	; 0x27
   135cc:	strbcc	r2, [r6, r1]
   135d0:	mov	r1, #0
   135d4:	str	r1, [fp, #-56]	; 0xffffffc8
   135d8:	b	130e4 <__assert_fail@plt+0x205c>
   135dc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   135e0:	b	130e4 <__assert_fail@plt+0x205c>
   135e4:	mov	r4, #0
   135e8:	b	13624 <__assert_fail@plt+0x259c>
   135ec:	mov	r4, #0
   135f0:	cmp	lr, r6
   135f4:	bls	13624 <__assert_fail@plt+0x259c>
   135f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   135fc:	ldr	r6, [sp, #44]	; 0x2c
   13600:	ldr	r0, [sp, #24]
   13604:	ldrb	r0, [r0, r6]
   13608:	cmp	r0, #0
   1360c:	beq	1362c <__assert_fail@plt+0x25a4>
   13610:	add	r6, r6, #1
   13614:	add	r0, r7, r6
   13618:	cmp	r0, lr
   1361c:	bcc	13600 <__assert_fail@plt+0x2578>
   13620:	b	1362c <__assert_fail@plt+0x25a4>
   13624:	ldr	ip, [fp, #-84]	; 0xffffffac
   13628:	ldr	r6, [sp, #44]	; 0x2c
   1362c:	mov	r1, r6
   13630:	ldr	r6, [sp, #80]	; 0x50
   13634:	b	12f8c <__assert_fail@plt+0x1f04>
   13638:	mov	lr, r7
   1363c:	b	13644 <__assert_fail@plt+0x25bc>
   13640:	mvn	lr, #0
   13644:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13648:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1364c:	eor	r0, r7, #2
   13650:	orr	r0, r0, r8
   13654:	clz	r0, r0
   13658:	lsr	r0, r0, #5
   1365c:	tst	r1, r0
   13660:	bne	136ec <__assert_fail@plt+0x2664>
   13664:	mov	r0, r1
   13668:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1366c:	cmp	r7, #2
   13670:	movwne	r1, #1
   13674:	orr	r0, r0, r1
   13678:	tst	r0, #1
   1367c:	ldreq	r0, [sp, #60]	; 0x3c
   13680:	eoreq	r0, r0, #1
   13684:	tsteq	r0, #1
   13688:	bne	13798 <__assert_fail@plt+0x2710>
   1368c:	mov	r9, lr
   13690:	tst	r5, #1
   13694:	bne	13754 <__assert_fail@plt+0x26cc>
   13698:	ldr	r6, [sp, #56]	; 0x38
   1369c:	mov	r4, #0
   136a0:	cmp	r6, #0
   136a4:	beq	13790 <__assert_fail@plt+0x2708>
   136a8:	ldr	r0, [sp, #84]	; 0x54
   136ac:	mov	r1, #0
   136b0:	cmp	sl, #0
   136b4:	mov	r5, #0
   136b8:	str	r1, [fp, #-72]	; 0xffffffb8
   136bc:	beq	1288c <__assert_fail@plt+0x1804>
   136c0:	b	13798 <__assert_fail@plt+0x2710>
   136c4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   136c8:	ldr	r2, [sp, #84]	; 0x54
   136cc:	b	136f4 <__assert_fail@plt+0x266c>
   136d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   136d4:	mov	r2, #1
   136d8:	mov	lr, r4
   136dc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   136e0:	b	136f4 <__assert_fail@plt+0x266c>
   136e4:	ldr	r6, [sp, #80]	; 0x50
   136e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   136ec:	ldr	r2, [sp, #84]	; 0x54
   136f0:	mov	r7, #2
   136f4:	mov	r0, #0
   136f8:	ldr	r1, [fp, #12]
   136fc:	tst	r2, #1
   13700:	mov	r2, r7
   13704:	mov	r3, lr
   13708:	str	r0, [sp, #8]
   1370c:	ldr	r0, [sp, #72]	; 0x48
   13710:	movwne	r2, #4
   13714:	cmp	r7, #2
   13718:	movne	r2, r7
   1371c:	str	r2, [sp]
   13720:	mov	r2, ip
   13724:	bic	r1, r1, #2
   13728:	str	r0, [sp, #12]
   1372c:	ldr	r0, [sp, #76]	; 0x4c
   13730:	str	r1, [sp, #4]
   13734:	mov	r1, sl
   13738:	str	r0, [sp, #16]
   1373c:	mov	r0, r6
   13740:	bl	1280c <__assert_fail@plt+0x1784>
   13744:	mov	r8, r0
   13748:	b	137f0 <__assert_fail@plt+0x2768>
   1374c:	ldr	r2, [sp, #84]	; 0x54
   13750:	b	136f4 <__assert_fail@plt+0x266c>
   13754:	mov	r0, #5
   13758:	ldr	r1, [sp, #56]	; 0x38
   1375c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13760:	mov	r3, r9
   13764:	str	r0, [sp]
   13768:	ldr	r0, [fp, #12]
   1376c:	str	r0, [sp, #4]
   13770:	ldr	r0, [fp, #16]
   13774:	str	r0, [sp, #8]
   13778:	ldr	r0, [sp, #72]	; 0x48
   1377c:	str	r0, [sp, #12]
   13780:	ldr	r0, [sp, #76]	; 0x4c
   13784:	str	r0, [sp, #16]
   13788:	ldr	r0, [sp, #80]	; 0x50
   1378c:	b	13740 <__assert_fail@plt+0x26b8>
   13790:	mov	r0, #0
   13794:	str	r0, [fp, #-72]	; 0xffffffb8
   13798:	ldr	r1, [sp, #92]	; 0x5c
   1379c:	cmp	r1, #0
   137a0:	beq	137e0 <__assert_fail@plt+0x2758>
   137a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   137a8:	ldr	r2, [sp, #80]	; 0x50
   137ac:	tst	r0, #1
   137b0:	bne	137e4 <__assert_fail@plt+0x275c>
   137b4:	ldrb	r0, [r1]
   137b8:	cmp	r0, #0
   137bc:	beq	137e4 <__assert_fail@plt+0x275c>
   137c0:	add	r1, r1, #1
   137c4:	cmp	r8, sl
   137c8:	strbcc	r0, [r2, r8]
   137cc:	add	r8, r8, #1
   137d0:	ldrb	r0, [r1], #1
   137d4:	cmp	r0, #0
   137d8:	bne	137c4 <__assert_fail@plt+0x273c>
   137dc:	b	137e4 <__assert_fail@plt+0x275c>
   137e0:	ldr	r2, [sp, #80]	; 0x50
   137e4:	cmp	r8, sl
   137e8:	movcc	r0, #0
   137ec:	strbcc	r0, [r2, r8]
   137f0:	mov	r0, r8
   137f4:	sub	sp, fp, #28
   137f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137fc:	mov	r2, #1
   13800:	b	136dc <__assert_fail@plt+0x2654>
   13804:	ldr	r2, [sp, #84]	; 0x54
   13808:	mov	r7, #5
   1380c:	b	136f4 <__assert_fail@plt+0x266c>
   13810:	bl	1107c <abort@plt>
   13814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13818:	add	fp, sp, #28
   1381c:	sub	sp, sp, #28
   13820:	movw	r5, #33128	; 0x8168
   13824:	cmp	r2, #0
   13828:	mov	r4, r1
   1382c:	mov	r7, r0
   13830:	str	r0, [sp, #20]
   13834:	movt	r5, #2
   13838:	movne	r5, r2
   1383c:	bl	10fa4 <__errno_location@plt>
   13840:	mov	sl, r0
   13844:	ldm	r5, {r0, r1}
   13848:	ldr	r2, [r5, #40]	; 0x28
   1384c:	ldr	r3, [r5, #44]	; 0x2c
   13850:	add	r9, r5, #8
   13854:	ldr	r6, [sl]
   13858:	orr	r8, r1, #1
   1385c:	mov	r1, #0
   13860:	str	r6, [sp, #24]
   13864:	stm	sp, {r0, r8, r9}
   13868:	str	r2, [sp, #12]
   1386c:	str	r3, [sp, #16]
   13870:	mov	r0, #0
   13874:	mov	r2, r7
   13878:	mov	r3, r4
   1387c:	mov	r6, r4
   13880:	bl	1280c <__assert_fail@plt+0x1784>
   13884:	add	r7, r0, #1
   13888:	mov	r0, r7
   1388c:	bl	14a24 <__assert_fail@plt+0x399c>
   13890:	mov	r4, r0
   13894:	ldr	r0, [r5]
   13898:	ldr	r2, [r5, #44]	; 0x2c
   1389c:	ldr	r1, [r5, #40]	; 0x28
   138a0:	mov	r3, r6
   138a4:	stm	sp, {r0, r8, r9}
   138a8:	str	r2, [sp, #16]
   138ac:	str	r1, [sp, #12]
   138b0:	mov	r0, r4
   138b4:	mov	r1, r7
   138b8:	ldr	r2, [sp, #20]
   138bc:	bl	1280c <__assert_fail@plt+0x1784>
   138c0:	ldr	r0, [sp, #24]
   138c4:	str	r0, [sl]
   138c8:	mov	r0, r4
   138cc:	sub	sp, fp, #28
   138d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138d8:	add	fp, sp, #28
   138dc:	sub	sp, sp, #36	; 0x24
   138e0:	movw	r8, #33128	; 0x8168
   138e4:	cmp	r3, #0
   138e8:	mov	r4, r2
   138ec:	str	r2, [sp, #24]
   138f0:	mov	r5, r1
   138f4:	mov	r6, r0
   138f8:	str	r0, [sp, #20]
   138fc:	movt	r8, #2
   13900:	movne	r8, r3
   13904:	bl	10fa4 <__errno_location@plt>
   13908:	str	r0, [sp, #28]
   1390c:	cmp	r4, #0
   13910:	add	sl, r8, #8
   13914:	ldm	r8, {r3, r9}
   13918:	ldr	r7, [r0]
   1391c:	ldr	r1, [r8, #40]	; 0x28
   13920:	ldr	r2, [r8, #44]	; 0x2c
   13924:	mov	r0, #0
   13928:	orreq	r9, r9, #1
   1392c:	str	r7, [sp, #32]
   13930:	mov	r7, r5
   13934:	stm	sp, {r3, r9, sl}
   13938:	str	r1, [sp, #12]
   1393c:	str	r2, [sp, #16]
   13940:	mov	r1, #0
   13944:	mov	r2, r6
   13948:	mov	r3, r5
   1394c:	bl	1280c <__assert_fail@plt+0x1784>
   13950:	add	r4, r0, #1
   13954:	mov	r5, r0
   13958:	mov	r0, r4
   1395c:	bl	14a24 <__assert_fail@plt+0x399c>
   13960:	mov	r6, r0
   13964:	ldr	r0, [r8]
   13968:	ldr	r2, [r8, #44]	; 0x2c
   1396c:	ldr	r1, [r8, #40]	; 0x28
   13970:	mov	r3, r7
   13974:	stm	sp, {r0, r9, sl}
   13978:	str	r2, [sp, #16]
   1397c:	str	r1, [sp, #12]
   13980:	mov	r0, r6
   13984:	mov	r1, r4
   13988:	ldr	r2, [sp, #20]
   1398c:	bl	1280c <__assert_fail@plt+0x1784>
   13990:	ldr	r0, [sp, #24]
   13994:	ldr	r1, [sp, #32]
   13998:	ldr	r2, [sp, #28]
   1399c:	cmp	r0, #0
   139a0:	str	r1, [r2]
   139a4:	strne	r5, [r0]
   139a8:	mov	r0, r6
   139ac:	sub	sp, fp, #28
   139b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139b8:	add	fp, sp, #24
   139bc:	movw	r5, #33012	; 0x80f4
   139c0:	movw	r8, #33008	; 0x80f0
   139c4:	movt	r5, #2
   139c8:	movt	r8, #2
   139cc:	ldr	r0, [r5]
   139d0:	ldr	r4, [r8]
   139d4:	cmp	r0, #2
   139d8:	blt	13a04 <__assert_fail@plt+0x297c>
   139dc:	add	r7, r4, #12
   139e0:	mov	r6, #0
   139e4:	ldr	r0, [r7, r6, lsl #3]
   139e8:	bl	12504 <__assert_fail@plt+0x147c>
   139ec:	ldr	r1, [r5]
   139f0:	add	r2, r6, #2
   139f4:	add	r0, r6, #1
   139f8:	mov	r6, r0
   139fc:	cmp	r2, r1
   13a00:	blt	139e4 <__assert_fail@plt+0x295c>
   13a04:	ldr	r0, [r4, #4]
   13a08:	movw	r7, #33176	; 0x8198
   13a0c:	movt	r7, #2
   13a10:	cmp	r0, r7
   13a14:	beq	13a2c <__assert_fail@plt+0x29a4>
   13a18:	bl	12504 <__assert_fail@plt+0x147c>
   13a1c:	movw	r0, #33016	; 0x80f8
   13a20:	mov	r6, #256	; 0x100
   13a24:	movt	r0, #2
   13a28:	strd	r6, [r0]
   13a2c:	movw	r6, #33016	; 0x80f8
   13a30:	movt	r6, #2
   13a34:	cmp	r4, r6
   13a38:	beq	13a48 <__assert_fail@plt+0x29c0>
   13a3c:	mov	r0, r4
   13a40:	bl	12504 <__assert_fail@plt+0x147c>
   13a44:	str	r6, [r8]
   13a48:	mov	r0, #1
   13a4c:	str	r0, [r5]
   13a50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a54:	movw	r3, #33128	; 0x8168
   13a58:	mvn	r2, #0
   13a5c:	movt	r3, #2
   13a60:	b	13a64 <__assert_fail@plt+0x29dc>
   13a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a68:	add	fp, sp, #28
   13a6c:	sub	sp, sp, #44	; 0x2c
   13a70:	mov	r7, r3
   13a74:	str	r2, [sp, #36]	; 0x24
   13a78:	str	r1, [sp, #32]
   13a7c:	mov	r5, r0
   13a80:	bl	10fa4 <__errno_location@plt>
   13a84:	cmp	r5, #0
   13a88:	blt	13bf4 <__assert_fail@plt+0x2b6c>
   13a8c:	cmn	r5, #-2147483647	; 0x80000001
   13a90:	beq	13bf4 <__assert_fail@plt+0x2b6c>
   13a94:	movw	r8, #33012	; 0x80f4
   13a98:	movw	r4, #33008	; 0x80f0
   13a9c:	str	r0, [sp, #28]
   13aa0:	ldr	r0, [r0]
   13aa4:	movt	r8, #2
   13aa8:	movt	r4, #2
   13aac:	ldr	r1, [r8]
   13ab0:	ldr	r6, [r4]
   13ab4:	str	r0, [sp, #24]
   13ab8:	cmp	r1, r5
   13abc:	ble	13ac8 <__assert_fail@plt+0x2a40>
   13ac0:	mov	sl, r6
   13ac4:	b	13b30 <__assert_fail@plt+0x2aa8>
   13ac8:	movw	r9, #33016	; 0x80f8
   13acc:	mov	r0, #8
   13ad0:	add	r2, r5, #1
   13ad4:	str	r1, [fp, #-32]	; 0xffffffe0
   13ad8:	mvn	r3, #-2147483648	; 0x80000000
   13adc:	movt	r9, #2
   13ae0:	str	r0, [sp]
   13ae4:	sub	r2, r2, r1
   13ae8:	sub	r1, fp, #32
   13aec:	subs	r0, r6, r9
   13af0:	movne	r0, r6
   13af4:	bl	14c24 <__assert_fail@plt+0x3b9c>
   13af8:	cmp	r6, r9
   13afc:	mov	sl, r0
   13b00:	str	r0, [r4]
   13b04:	ldrdeq	r0, [r9]
   13b08:	stmeq	sl, {r0, r1}
   13b0c:	ldr	r1, [r8]
   13b10:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13b14:	add	r0, sl, r1, lsl #3
   13b18:	sub	r1, r2, r1
   13b1c:	lsl	r2, r1, #3
   13b20:	mov	r1, #0
   13b24:	bl	10fbc <memset@plt>
   13b28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13b2c:	str	r0, [r8]
   13b30:	mov	r9, sl
   13b34:	ldr	r6, [r9, r5, lsl #3]!
   13b38:	ldr	r4, [r9, #4]!
   13b3c:	ldm	r7, {r0, r1}
   13b40:	ldr	r2, [r7, #40]	; 0x28
   13b44:	ldr	r3, [r7, #44]	; 0x2c
   13b48:	orr	r8, r1, #1
   13b4c:	add	r1, r7, #8
   13b50:	stm	sp, {r0, r8}
   13b54:	add	r0, sp, #8
   13b58:	str	r1, [sp, #20]
   13b5c:	stm	r0, {r1, r2, r3}
   13b60:	mov	r0, r4
   13b64:	mov	r1, r6
   13b68:	ldr	r2, [sp, #32]
   13b6c:	ldr	r3, [sp, #36]	; 0x24
   13b70:	bl	1280c <__assert_fail@plt+0x1784>
   13b74:	cmp	r6, r0
   13b78:	bhi	13bdc <__assert_fail@plt+0x2b54>
   13b7c:	add	r6, r0, #1
   13b80:	movw	r0, #33176	; 0x8198
   13b84:	movt	r0, #2
   13b88:	str	r6, [sl, r5, lsl #3]
   13b8c:	cmp	r4, r0
   13b90:	beq	13b9c <__assert_fail@plt+0x2b14>
   13b94:	mov	r0, r4
   13b98:	bl	12504 <__assert_fail@plt+0x147c>
   13b9c:	mov	r0, r6
   13ba0:	bl	14a24 <__assert_fail@plt+0x399c>
   13ba4:	str	r0, [r9]
   13ba8:	mov	r4, r0
   13bac:	add	r3, sp, #8
   13bb0:	ldr	r0, [r7]
   13bb4:	ldr	r1, [r7, #40]	; 0x28
   13bb8:	ldr	r2, [r7, #44]	; 0x2c
   13bbc:	stm	sp, {r0, r8}
   13bc0:	ldr	r0, [sp, #20]
   13bc4:	stm	r3, {r0, r1, r2}
   13bc8:	mov	r0, r4
   13bcc:	mov	r1, r6
   13bd0:	ldr	r2, [sp, #32]
   13bd4:	ldr	r3, [sp, #36]	; 0x24
   13bd8:	bl	1280c <__assert_fail@plt+0x1784>
   13bdc:	ldr	r0, [sp, #28]
   13be0:	ldr	r1, [sp, #24]
   13be4:	str	r1, [r0]
   13be8:	mov	r0, r4
   13bec:	sub	sp, fp, #28
   13bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bf4:	bl	1107c <abort@plt>
   13bf8:	movw	r3, #33128	; 0x8168
   13bfc:	movt	r3, #2
   13c00:	b	13a64 <__assert_fail@plt+0x29dc>
   13c04:	movw	r3, #33128	; 0x8168
   13c08:	mov	r1, r0
   13c0c:	mov	r0, #0
   13c10:	mvn	r2, #0
   13c14:	movt	r3, #2
   13c18:	b	13a64 <__assert_fail@plt+0x29dc>
   13c1c:	movw	r3, #33128	; 0x8168
   13c20:	mov	r2, r1
   13c24:	mov	r1, r0
   13c28:	mov	r0, #0
   13c2c:	movt	r3, #2
   13c30:	b	13a64 <__assert_fail@plt+0x29dc>
   13c34:	push	{fp, lr}
   13c38:	mov	fp, sp
   13c3c:	sub	sp, sp, #48	; 0x30
   13c40:	vmov.i32	q8, #0	; 0x00000000
   13c44:	mov	ip, #32
   13c48:	mov	r3, sp
   13c4c:	mov	lr, r2
   13c50:	cmp	r1, #10
   13c54:	add	r2, r3, #16
   13c58:	vst1.64	{d16-d17}, [r3], ip
   13c5c:	vst1.64	{d16-d17}, [r3]
   13c60:	vst1.64	{d16-d17}, [r2]
   13c64:	beq	13c84 <__assert_fail@plt+0x2bfc>
   13c68:	str	r1, [sp]
   13c6c:	mov	r3, sp
   13c70:	mov	r1, lr
   13c74:	mvn	r2, #0
   13c78:	bl	13a64 <__assert_fail@plt+0x29dc>
   13c7c:	mov	sp, fp
   13c80:	pop	{fp, pc}
   13c84:	bl	1107c <abort@plt>
   13c88:	push	{r4, sl, fp, lr}
   13c8c:	add	fp, sp, #8
   13c90:	sub	sp, sp, #48	; 0x30
   13c94:	mov	ip, r3
   13c98:	mov	r3, sp
   13c9c:	vmov.i32	q8, #0	; 0x00000000
   13ca0:	mov	lr, #32
   13ca4:	cmp	r1, #10
   13ca8:	add	r4, r3, #16
   13cac:	vst1.64	{d16-d17}, [r3], lr
   13cb0:	vst1.64	{d16-d17}, [r3]
   13cb4:	vst1.64	{d16-d17}, [r4]
   13cb8:	beq	13cd8 <__assert_fail@plt+0x2c50>
   13cbc:	str	r1, [sp]
   13cc0:	mov	r1, r2
   13cc4:	mov	r3, sp
   13cc8:	mov	r2, ip
   13ccc:	bl	13a64 <__assert_fail@plt+0x29dc>
   13cd0:	sub	sp, fp, #8
   13cd4:	pop	{r4, sl, fp, pc}
   13cd8:	bl	1107c <abort@plt>
   13cdc:	push	{fp, lr}
   13ce0:	mov	fp, sp
   13ce4:	sub	sp, sp, #48	; 0x30
   13ce8:	mov	r3, sp
   13cec:	vmov.i32	q8, #0	; 0x00000000
   13cf0:	mov	ip, #32
   13cf4:	cmp	r0, #10
   13cf8:	add	r2, r3, #16
   13cfc:	vst1.64	{d16-d17}, [r3], ip
   13d00:	vst1.64	{d16-d17}, [r3]
   13d04:	vst1.64	{d16-d17}, [r2]
   13d08:	beq	13d28 <__assert_fail@plt+0x2ca0>
   13d0c:	str	r0, [sp]
   13d10:	mov	r3, sp
   13d14:	mov	r0, #0
   13d18:	mvn	r2, #0
   13d1c:	bl	13a64 <__assert_fail@plt+0x29dc>
   13d20:	mov	sp, fp
   13d24:	pop	{fp, pc}
   13d28:	bl	1107c <abort@plt>
   13d2c:	push	{fp, lr}
   13d30:	mov	fp, sp
   13d34:	sub	sp, sp, #48	; 0x30
   13d38:	mov	r3, sp
   13d3c:	vmov.i32	q8, #0	; 0x00000000
   13d40:	mov	ip, #32
   13d44:	cmp	r0, #10
   13d48:	add	lr, r3, #16
   13d4c:	vst1.64	{d16-d17}, [r3], ip
   13d50:	vst1.64	{d16-d17}, [r3]
   13d54:	vst1.64	{d16-d17}, [lr]
   13d58:	beq	13d74 <__assert_fail@plt+0x2cec>
   13d5c:	str	r0, [sp]
   13d60:	mov	r3, sp
   13d64:	mov	r0, #0
   13d68:	bl	13a64 <__assert_fail@plt+0x29dc>
   13d6c:	mov	sp, fp
   13d70:	pop	{fp, pc}
   13d74:	bl	1107c <abort@plt>
   13d78:	push	{r4, sl, fp, lr}
   13d7c:	add	fp, sp, #8
   13d80:	sub	sp, sp, #48	; 0x30
   13d84:	mov	lr, r0
   13d88:	movw	r0, #33128	; 0x8168
   13d8c:	mov	r3, #32
   13d90:	mov	ip, r1
   13d94:	mov	r4, #1
   13d98:	movt	r0, #2
   13d9c:	add	r1, r0, #16
   13da0:	vld1.64	{d16-d17}, [r0], r3
   13da4:	mov	r3, sp
   13da8:	vld1.64	{d18-d19}, [r1]
   13dac:	add	r1, r3, #16
   13db0:	vld1.64	{d20-d21}, [r0]
   13db4:	add	r0, r3, #32
   13db8:	vst1.64	{d18-d19}, [r1]
   13dbc:	mov	r1, r3
   13dc0:	vst1.64	{d20-d21}, [r0]
   13dc4:	mov	r0, #28
   13dc8:	and	r0, r0, r2, lsr #3
   13dcc:	and	r2, r2, #31
   13dd0:	vst1.64	{d16-d17}, [r1], r0
   13dd4:	ldr	r0, [r1, #8]
   13dd8:	bic	r4, r4, r0, lsr r2
   13ddc:	eor	r0, r0, r4, lsl r2
   13de0:	mov	r2, ip
   13de4:	str	r0, [r1, #8]
   13de8:	mov	r0, #0
   13dec:	mov	r1, lr
   13df0:	bl	13a64 <__assert_fail@plt+0x29dc>
   13df4:	sub	sp, fp, #8
   13df8:	pop	{r4, sl, fp, pc}
   13dfc:	push	{fp, lr}
   13e00:	mov	fp, sp
   13e04:	sub	sp, sp, #48	; 0x30
   13e08:	mov	ip, r0
   13e0c:	movw	r0, #33128	; 0x8168
   13e10:	mov	r3, #32
   13e14:	movt	r0, #2
   13e18:	add	r2, r0, #16
   13e1c:	vld1.64	{d16-d17}, [r0], r3
   13e20:	mov	r3, sp
   13e24:	vld1.64	{d18-d19}, [r2]
   13e28:	add	r2, r3, #16
   13e2c:	vld1.64	{d20-d21}, [r0]
   13e30:	add	r0, r3, #32
   13e34:	vst1.64	{d18-d19}, [r2]
   13e38:	mov	r2, r3
   13e3c:	vst1.64	{d20-d21}, [r0]
   13e40:	mov	r0, #28
   13e44:	and	r0, r0, r1, lsr #3
   13e48:	and	r1, r1, #31
   13e4c:	vst1.64	{d16-d17}, [r2], r0
   13e50:	mov	r0, #1
   13e54:	ldr	lr, [r2, #8]
   13e58:	bic	r0, r0, lr, lsr r1
   13e5c:	eor	r0, lr, r0, lsl r1
   13e60:	mov	r1, ip
   13e64:	str	r0, [r2, #8]
   13e68:	mov	r0, #0
   13e6c:	mvn	r2, #0
   13e70:	bl	13a64 <__assert_fail@plt+0x29dc>
   13e74:	mov	sp, fp
   13e78:	pop	{fp, pc}
   13e7c:	push	{fp, lr}
   13e80:	mov	fp, sp
   13e84:	sub	sp, sp, #48	; 0x30
   13e88:	movw	r2, #33128	; 0x8168
   13e8c:	mov	r3, #32
   13e90:	mov	r1, r0
   13e94:	movt	r2, #2
   13e98:	add	r0, r2, #16
   13e9c:	vld1.64	{d16-d17}, [r2], r3
   13ea0:	mov	r3, sp
   13ea4:	vld1.64	{d18-d19}, [r0]
   13ea8:	add	r0, r3, #16
   13eac:	vld1.64	{d20-d21}, [r2]
   13eb0:	mov	r2, r3
   13eb4:	vst1.64	{d18-d19}, [r0]
   13eb8:	add	r0, r3, #32
   13ebc:	vst1.64	{d20-d21}, [r0]
   13ec0:	mov	r0, #12
   13ec4:	vst1.64	{d16-d17}, [r2], r0
   13ec8:	ldr	r0, [r2]
   13ecc:	orr	r0, r0, #67108864	; 0x4000000
   13ed0:	str	r0, [r2]
   13ed4:	mov	r0, #0
   13ed8:	mvn	r2, #0
   13edc:	bl	13a64 <__assert_fail@plt+0x29dc>
   13ee0:	mov	sp, fp
   13ee4:	pop	{fp, pc}
   13ee8:	push	{fp, lr}
   13eec:	mov	fp, sp
   13ef0:	sub	sp, sp, #48	; 0x30
   13ef4:	mov	ip, r1
   13ef8:	mov	r1, r0
   13efc:	movw	r0, #33128	; 0x8168
   13f00:	mov	r3, #32
   13f04:	movt	r0, #2
   13f08:	add	r2, r0, #16
   13f0c:	vld1.64	{d16-d17}, [r0], r3
   13f10:	mov	r3, sp
   13f14:	vld1.64	{d18-d19}, [r2]
   13f18:	add	r2, r3, #16
   13f1c:	vld1.64	{d20-d21}, [r0]
   13f20:	add	r0, r3, #32
   13f24:	vst1.64	{d18-d19}, [r2]
   13f28:	mov	r2, r3
   13f2c:	vst1.64	{d20-d21}, [r0]
   13f30:	mov	r0, #12
   13f34:	vst1.64	{d16-d17}, [r2], r0
   13f38:	ldr	r0, [r2]
   13f3c:	orr	r0, r0, #67108864	; 0x4000000
   13f40:	str	r0, [r2]
   13f44:	mov	r0, #0
   13f48:	mov	r2, ip
   13f4c:	bl	13a64 <__assert_fail@plt+0x29dc>
   13f50:	mov	sp, fp
   13f54:	pop	{fp, pc}
   13f58:	push	{r4, sl, fp, lr}
   13f5c:	add	fp, sp, #8
   13f60:	sub	sp, sp, #96	; 0x60
   13f64:	mov	ip, r2
   13f68:	mov	r2, sp
   13f6c:	vmov.i32	q8, #0	; 0x00000000
   13f70:	mov	r4, #28
   13f74:	cmp	r1, #10
   13f78:	mov	r3, r2
   13f7c:	add	lr, r2, #16
   13f80:	vst1.64	{d16-d17}, [r3], r4
   13f84:	vst1.64	{d16-d17}, [lr]
   13f88:	vst1.32	{d16-d17}, [r3]
   13f8c:	beq	13fdc <__assert_fail@plt+0x2f54>
   13f90:	vld1.64	{d16-d17}, [r2], r4
   13f94:	vld1.64	{d18-d19}, [lr]
   13f98:	add	r3, sp, #48	; 0x30
   13f9c:	add	r4, r3, #4
   13fa0:	vld1.32	{d20-d21}, [r2]
   13fa4:	add	r2, r3, #20
   13fa8:	vst1.32	{d16-d17}, [r4]
   13fac:	vst1.32	{d18-d19}, [r2]
   13fb0:	add	r2, r3, #32
   13fb4:	vst1.32	{d20-d21}, [r2]
   13fb8:	str	r1, [sp, #48]	; 0x30
   13fbc:	mvn	r2, #0
   13fc0:	ldr	r1, [sp, #60]	; 0x3c
   13fc4:	orr	r1, r1, #67108864	; 0x4000000
   13fc8:	str	r1, [sp, #60]	; 0x3c
   13fcc:	mov	r1, ip
   13fd0:	bl	13a64 <__assert_fail@plt+0x29dc>
   13fd4:	sub	sp, fp, #8
   13fd8:	pop	{r4, sl, fp, pc}
   13fdc:	bl	1107c <abort@plt>
   13fe0:	push	{r4, r5, fp, lr}
   13fe4:	add	fp, sp, #8
   13fe8:	sub	sp, sp, #48	; 0x30
   13fec:	mov	ip, r3
   13ff0:	movw	r3, #33128	; 0x8168
   13ff4:	mov	lr, #32
   13ff8:	cmp	r1, #0
   13ffc:	mov	r5, sp
   14000:	movt	r3, #2
   14004:	cmpne	r2, #0
   14008:	add	r4, r3, #16
   1400c:	vld1.64	{d16-d17}, [r3], lr
   14010:	vld1.64	{d18-d19}, [r4]
   14014:	add	r4, r5, #16
   14018:	vld1.64	{d20-d21}, [r3]
   1401c:	vst1.64	{d16-d17}, [r5], lr
   14020:	mov	r3, #10
   14024:	vst1.64	{d18-d19}, [r4]
   14028:	vst1.64	{d20-d21}, [r5]
   1402c:	str	r3, [sp]
   14030:	bne	14038 <__assert_fail@plt+0x2fb0>
   14034:	bl	1107c <abort@plt>
   14038:	str	r2, [sp, #44]	; 0x2c
   1403c:	str	r1, [sp, #40]	; 0x28
   14040:	mov	r3, sp
   14044:	mov	r1, ip
   14048:	mvn	r2, #0
   1404c:	bl	13a64 <__assert_fail@plt+0x29dc>
   14050:	sub	sp, fp, #8
   14054:	pop	{r4, r5, fp, pc}
   14058:	push	{r4, r5, fp, lr}
   1405c:	add	fp, sp, #8
   14060:	sub	sp, sp, #48	; 0x30
   14064:	mov	lr, r3
   14068:	movw	r3, #33128	; 0x8168
   1406c:	mov	ip, #32
   14070:	cmp	r1, #0
   14074:	mov	r5, sp
   14078:	movt	r3, #2
   1407c:	cmpne	r2, #0
   14080:	add	r4, r3, #16
   14084:	vld1.64	{d16-d17}, [r3], ip
   14088:	vld1.64	{d18-d19}, [r4]
   1408c:	add	r4, r5, #16
   14090:	vld1.64	{d20-d21}, [r3]
   14094:	vst1.64	{d16-d17}, [r5], ip
   14098:	mov	r3, #10
   1409c:	vst1.64	{d18-d19}, [r4]
   140a0:	vst1.64	{d20-d21}, [r5]
   140a4:	str	r3, [sp]
   140a8:	bne	140b0 <__assert_fail@plt+0x3028>
   140ac:	bl	1107c <abort@plt>
   140b0:	ldr	ip, [fp, #8]
   140b4:	str	r2, [sp, #44]	; 0x2c
   140b8:	str	r1, [sp, #40]	; 0x28
   140bc:	mov	r3, sp
   140c0:	mov	r1, lr
   140c4:	mov	r2, ip
   140c8:	bl	13a64 <__assert_fail@plt+0x29dc>
   140cc:	sub	sp, fp, #8
   140d0:	pop	{r4, r5, fp, pc}
   140d4:	push	{r4, sl, fp, lr}
   140d8:	add	fp, sp, #8
   140dc:	sub	sp, sp, #48	; 0x30
   140e0:	mov	ip, r2
   140e4:	movw	r2, #33128	; 0x8168
   140e8:	mov	lr, #32
   140ec:	cmp	r0, #0
   140f0:	mov	r4, sp
   140f4:	movt	r2, #2
   140f8:	cmpne	r1, #0
   140fc:	add	r3, r2, #16
   14100:	vld1.64	{d16-d17}, [r2], lr
   14104:	vld1.64	{d18-d19}, [r3]
   14108:	add	r3, r4, #16
   1410c:	vld1.64	{d20-d21}, [r2]
   14110:	vst1.64	{d16-d17}, [r4], lr
   14114:	mov	r2, #10
   14118:	vst1.64	{d18-d19}, [r3]
   1411c:	vst1.64	{d20-d21}, [r4]
   14120:	str	r2, [sp]
   14124:	bne	1412c <__assert_fail@plt+0x30a4>
   14128:	bl	1107c <abort@plt>
   1412c:	str	r1, [sp, #44]	; 0x2c
   14130:	str	r0, [sp, #40]	; 0x28
   14134:	mov	r3, sp
   14138:	mov	r0, #0
   1413c:	mov	r1, ip
   14140:	mvn	r2, #0
   14144:	bl	13a64 <__assert_fail@plt+0x29dc>
   14148:	sub	sp, fp, #8
   1414c:	pop	{r4, sl, fp, pc}
   14150:	push	{r4, r5, fp, lr}
   14154:	add	fp, sp, #8
   14158:	sub	sp, sp, #48	; 0x30
   1415c:	mov	lr, r2
   14160:	movw	r2, #33128	; 0x8168
   14164:	mov	ip, r3
   14168:	mov	r3, #32
   1416c:	cmp	r0, #0
   14170:	mov	r5, sp
   14174:	movt	r2, #2
   14178:	cmpne	r1, #0
   1417c:	add	r4, r2, #16
   14180:	vld1.64	{d16-d17}, [r2], r3
   14184:	vld1.64	{d18-d19}, [r4]
   14188:	add	r4, r5, #16
   1418c:	vld1.64	{d20-d21}, [r2]
   14190:	vst1.64	{d16-d17}, [r5], r3
   14194:	mov	r2, #10
   14198:	vst1.64	{d18-d19}, [r4]
   1419c:	vst1.64	{d20-d21}, [r5]
   141a0:	str	r2, [sp]
   141a4:	bne	141ac <__assert_fail@plt+0x3124>
   141a8:	bl	1107c <abort@plt>
   141ac:	str	r1, [sp, #44]	; 0x2c
   141b0:	str	r0, [sp, #40]	; 0x28
   141b4:	mov	r3, sp
   141b8:	mov	r0, #0
   141bc:	mov	r1, lr
   141c0:	mov	r2, ip
   141c4:	bl	13a64 <__assert_fail@plt+0x29dc>
   141c8:	sub	sp, fp, #8
   141cc:	pop	{r4, r5, fp, pc}
   141d0:	movw	r3, #33024	; 0x8100
   141d4:	movt	r3, #2
   141d8:	b	13a64 <__assert_fail@plt+0x29dc>
   141dc:	movw	r3, #33024	; 0x8100
   141e0:	mov	r2, r1
   141e4:	mov	r1, r0
   141e8:	mov	r0, #0
   141ec:	movt	r3, #2
   141f0:	b	13a64 <__assert_fail@plt+0x29dc>
   141f4:	movw	r3, #33024	; 0x8100
   141f8:	mvn	r2, #0
   141fc:	movt	r3, #2
   14200:	b	13a64 <__assert_fail@plt+0x29dc>
   14204:	movw	r3, #33024	; 0x8100
   14208:	mov	r1, r0
   1420c:	mov	r0, #0
   14210:	mvn	r2, #0
   14214:	movt	r3, #2
   14218:	b	13a64 <__assert_fail@plt+0x29dc>
   1421c:	push	{r4, r5, fp, lr}
   14220:	add	fp, sp, #8
   14224:	mov	r5, r0
   14228:	mov	r4, r1
   1422c:	mov	r0, #0
   14230:	mov	r2, #5
   14234:	mov	r1, r5
   14238:	bl	10ec0 <dcgettext@plt>
   1423c:	cmp	r0, r5
   14240:	popne	{r4, r5, fp, pc}
   14244:	bl	16a0c <__assert_fail@plt+0x5984>
   14248:	ldrb	r1, [r0]
   1424c:	and	r1, r1, #223	; 0xdf
   14250:	cmp	r1, #71	; 0x47
   14254:	beq	142bc <__assert_fail@plt+0x3234>
   14258:	cmp	r1, #85	; 0x55
   1425c:	bne	142e0 <__assert_fail@plt+0x3258>
   14260:	ldrb	r1, [r0, #1]
   14264:	and	r1, r1, #223	; 0xdf
   14268:	cmp	r1, #84	; 0x54
   1426c:	bne	142e0 <__assert_fail@plt+0x3258>
   14270:	ldrb	r1, [r0, #2]
   14274:	and	r1, r1, #223	; 0xdf
   14278:	cmp	r1, #70	; 0x46
   1427c:	ldrbeq	r1, [r0, #3]
   14280:	cmpeq	r1, #45	; 0x2d
   14284:	bne	142e0 <__assert_fail@plt+0x3258>
   14288:	ldrb	r1, [r0, #4]
   1428c:	cmp	r1, #56	; 0x38
   14290:	ldrbeq	r0, [r0, #5]
   14294:	cmpeq	r0, #0
   14298:	bne	142e0 <__assert_fail@plt+0x3258>
   1429c:	ldrb	r1, [r5]
   142a0:	movw	r2, #30389	; 0x76b5
   142a4:	movw	r0, #30393	; 0x76b9
   142a8:	movt	r2, #1
   142ac:	movt	r0, #1
   142b0:	cmp	r1, #96	; 0x60
   142b4:	moveq	r0, r2
   142b8:	pop	{r4, r5, fp, pc}
   142bc:	ldrb	r1, [r0, #1]
   142c0:	and	r1, r1, #223	; 0xdf
   142c4:	cmp	r1, #66	; 0x42
   142c8:	bne	142e0 <__assert_fail@plt+0x3258>
   142cc:	ldrb	r1, [r0, #2]
   142d0:	cmp	r1, #49	; 0x31
   142d4:	ldrbeq	r1, [r0, #3]
   142d8:	cmpeq	r1, #56	; 0x38
   142dc:	beq	142fc <__assert_fail@plt+0x3274>
   142e0:	movw	r1, #30383	; 0x76af
   142e4:	movw	r0, #30387	; 0x76b3
   142e8:	cmp	r4, #9
   142ec:	movt	r1, #1
   142f0:	movt	r0, #1
   142f4:	moveq	r0, r1
   142f8:	pop	{r4, r5, fp, pc}
   142fc:	ldrb	r1, [r0, #4]
   14300:	cmp	r1, #48	; 0x30
   14304:	ldrbeq	r1, [r0, #5]
   14308:	cmpeq	r1, #51	; 0x33
   1430c:	bne	142e0 <__assert_fail@plt+0x3258>
   14310:	ldrb	r1, [r0, #6]
   14314:	cmp	r1, #48	; 0x30
   14318:	ldrbeq	r0, [r0, #7]
   1431c:	cmpeq	r0, #0
   14320:	bne	142e0 <__assert_fail@plt+0x3258>
   14324:	ldrb	r1, [r5]
   14328:	movw	r2, #30397	; 0x76bd
   1432c:	movw	r0, #30401	; 0x76c1
   14330:	movt	r2, #1
   14334:	movt	r0, #1
   14338:	b	142b0 <__assert_fail@plt+0x3228>
   1433c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14340:	add	fp, sp, #24
   14344:	sub	sp, sp, #32
   14348:	ldr	r6, [fp, #12]
   1434c:	ldr	r7, [fp, #8]
   14350:	mov	r4, r2
   14354:	mov	r8, r0
   14358:	cmp	r1, #0
   1435c:	beq	14384 <__assert_fail@plt+0x32fc>
   14360:	movw	r2, #30488	; 0x7718
   14364:	mov	r5, r1
   14368:	str	r3, [sp, #4]
   1436c:	str	r4, [sp]
   14370:	mov	r0, r8
   14374:	mov	r1, #1
   14378:	movt	r2, #1
   1437c:	mov	r3, r5
   14380:	b	1439c <__assert_fail@plt+0x3314>
   14384:	movw	r2, #30500	; 0x7724
   14388:	str	r3, [sp]
   1438c:	mov	r0, r8
   14390:	mov	r1, #1
   14394:	mov	r3, r4
   14398:	movt	r2, #1
   1439c:	bl	10fe0 <__fprintf_chk@plt>
   143a0:	movw	r1, #30507	; 0x772b
   143a4:	mov	r0, #0
   143a8:	mov	r2, #5
   143ac:	movt	r1, #1
   143b0:	bl	10ec0 <dcgettext@plt>
   143b4:	movw	r2, #31225	; 0x79f9
   143b8:	mov	r3, r0
   143bc:	movw	r0, #2022	; 0x7e6
   143c0:	mov	r1, #1
   143c4:	str	r0, [sp]
   143c8:	movt	r2, #1
   143cc:	mov	r0, r8
   143d0:	bl	10fe0 <__fprintf_chk@plt>
   143d4:	movw	r4, #29647	; 0x73cf
   143d8:	mov	r1, r8
   143dc:	movt	r4, #1
   143e0:	mov	r0, r4
   143e4:	bl	10e30 <fputs_unlocked@plt>
   143e8:	movw	r1, #30511	; 0x772f
   143ec:	mov	r0, #0
   143f0:	mov	r2, #5
   143f4:	movt	r1, #1
   143f8:	bl	10ec0 <dcgettext@plt>
   143fc:	movw	r3, #30682	; 0x77da
   14400:	mov	r2, r0
   14404:	mov	r0, r8
   14408:	mov	r1, #1
   1440c:	movt	r3, #1
   14410:	bl	10fe0 <__fprintf_chk@plt>
   14414:	mov	r0, r4
   14418:	mov	r1, r8
   1441c:	bl	10e30 <fputs_unlocked@plt>
   14420:	cmp	r6, #9
   14424:	bhi	14460 <__assert_fail@plt+0x33d8>
   14428:	add	r0, pc, #0
   1442c:	ldr	pc, [r0, r6, lsl #2]
   14430:	andeq	r4, r1, r8, asr r4
   14434:	andeq	r4, r1, ip, ror #8
   14438:	muleq	r1, ip, r4
   1443c:	andeq	r4, r1, r4, asr #9
   14440:	andeq	r4, r1, ip, ror #9
   14444:	andeq	r4, r1, r4, lsl r5
   14448:	andeq	r4, r1, ip, lsr r5
   1444c:	andeq	r4, r1, r4, ror r5
   14450:	andeq	r4, r1, r4, lsl r6
   14454:			; <UNDEFINED> instruction: 0x000145bc
   14458:	sub	sp, fp, #24
   1445c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14460:	movw	r1, #31035	; 0x793b
   14464:	movt	r1, #1
   14468:	b	145c4 <__assert_fail@plt+0x353c>
   1446c:	movw	r1, #30716	; 0x77fc
   14470:	mov	r0, #0
   14474:	mov	r2, #5
   14478:	movt	r1, #1
   1447c:	bl	10ec0 <dcgettext@plt>
   14480:	ldr	r3, [r7]
   14484:	mov	r2, r0
   14488:	mov	r0, r8
   1448c:	mov	r1, #1
   14490:	sub	sp, fp, #24
   14494:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14498:	b	10fe0 <__fprintf_chk@plt>
   1449c:	movw	r1, #30732	; 0x780c
   144a0:	mov	r0, #0
   144a4:	mov	r2, #5
   144a8:	movt	r1, #1
   144ac:	bl	10ec0 <dcgettext@plt>
   144b0:	mov	r2, r0
   144b4:	ldr	r3, [r7]
   144b8:	ldr	r0, [r7, #4]
   144bc:	str	r0, [sp]
   144c0:	b	145b0 <__assert_fail@plt+0x3528>
   144c4:	movw	r1, #30755	; 0x7823
   144c8:	mov	r0, #0
   144cc:	mov	r2, #5
   144d0:	movt	r1, #1
   144d4:	bl	10ec0 <dcgettext@plt>
   144d8:	ldr	r3, [r7]
   144dc:	mov	r2, r0
   144e0:	ldmib	r7, {r0, r1}
   144e4:	stm	sp, {r0, r1}
   144e8:	b	145b0 <__assert_fail@plt+0x3528>
   144ec:	movw	r1, #30783	; 0x783f
   144f0:	mov	r0, #0
   144f4:	mov	r2, #5
   144f8:	movt	r1, #1
   144fc:	bl	10ec0 <dcgettext@plt>
   14500:	ldr	r3, [r7]
   14504:	mov	r2, r0
   14508:	ldmib	r7, {r0, r1, r7}
   1450c:	stm	sp, {r0, r1, r7}
   14510:	b	145b0 <__assert_fail@plt+0x3528>
   14514:	movw	r1, #30815	; 0x785f
   14518:	mov	r0, #0
   1451c:	mov	r2, #5
   14520:	movt	r1, #1
   14524:	bl	10ec0 <dcgettext@plt>
   14528:	ldr	r3, [r7]
   1452c:	mov	r2, r0
   14530:	ldmib	r7, {r0, r1, r6, r7}
   14534:	stm	sp, {r0, r1, r6, r7}
   14538:	b	145b0 <__assert_fail@plt+0x3528>
   1453c:	movw	r1, #30851	; 0x7883
   14540:	mov	r0, #0
   14544:	mov	r2, #5
   14548:	movt	r1, #1
   1454c:	bl	10ec0 <dcgettext@plt>
   14550:	ldr	r3, [r7]
   14554:	mov	r2, r0
   14558:	ldmib	r7, {r0, r1, r6}
   1455c:	ldr	r5, [r7, #16]
   14560:	ldr	r7, [r7, #20]
   14564:	stm	sp, {r0, r1, r6}
   14568:	str	r5, [sp, #12]
   1456c:	str	r7, [sp, #16]
   14570:	b	145b0 <__assert_fail@plt+0x3528>
   14574:	movw	r1, #30891	; 0x78ab
   14578:	mov	r0, #0
   1457c:	mov	r2, #5
   14580:	movt	r1, #1
   14584:	bl	10ec0 <dcgettext@plt>
   14588:	ldr	r3, [r7]
   1458c:	mov	r2, r0
   14590:	ldmib	r7, {r0, r1, r6}
   14594:	ldr	r5, [r7, #16]
   14598:	ldr	r4, [r7, #20]
   1459c:	ldr	r7, [r7, #24]
   145a0:	stm	sp, {r0, r1, r6}
   145a4:	str	r5, [sp, #12]
   145a8:	str	r4, [sp, #16]
   145ac:	str	r7, [sp, #20]
   145b0:	mov	r0, r8
   145b4:	mov	r1, #1
   145b8:	b	14664 <__assert_fail@plt+0x35dc>
   145bc:	movw	r1, #30983	; 0x7907
   145c0:	movt	r1, #1
   145c4:	mov	r0, #0
   145c8:	mov	r2, #5
   145cc:	bl	10ec0 <dcgettext@plt>
   145d0:	mov	ip, r0
   145d4:	ldr	r3, [r7]
   145d8:	ldr	r0, [r7, #4]
   145dc:	ldr	r1, [r7, #8]
   145e0:	ldr	r6, [r7, #12]
   145e4:	ldr	r5, [r7, #16]
   145e8:	ldr	r4, [r7, #20]
   145ec:	ldr	r2, [r7, #24]
   145f0:	ldr	lr, [r7, #28]
   145f4:	ldr	r7, [r7, #32]
   145f8:	stm	sp, {r0, r1, r6}
   145fc:	str	r5, [sp, #12]
   14600:	str	r4, [sp, #16]
   14604:	str	r2, [sp, #20]
   14608:	str	lr, [sp, #24]
   1460c:	str	r7, [sp, #28]
   14610:	b	14658 <__assert_fail@plt+0x35d0>
   14614:	movw	r1, #30935	; 0x78d7
   14618:	mov	r0, #0
   1461c:	mov	r2, #5
   14620:	movt	r1, #1
   14624:	bl	10ec0 <dcgettext@plt>
   14628:	mov	ip, r0
   1462c:	ldr	r3, [r7]
   14630:	ldmib	r7, {r0, r1, r6}
   14634:	ldr	r5, [r7, #16]
   14638:	ldr	r4, [r7, #20]
   1463c:	ldr	r2, [r7, #24]
   14640:	ldr	r7, [r7, #28]
   14644:	stm	sp, {r0, r1, r6}
   14648:	str	r5, [sp, #12]
   1464c:	str	r4, [sp, #16]
   14650:	str	r2, [sp, #20]
   14654:	str	r7, [sp, #24]
   14658:	mov	r0, r8
   1465c:	mov	r1, #1
   14660:	mov	r2, ip
   14664:	bl	10fe0 <__fprintf_chk@plt>
   14668:	sub	sp, fp, #24
   1466c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14670:	push	{r4, sl, fp, lr}
   14674:	add	fp, sp, #8
   14678:	sub	sp, sp, #8
   1467c:	ldr	ip, [fp, #8]
   14680:	mov	lr, #0
   14684:	ldr	r4, [ip, lr, lsl #2]
   14688:	add	lr, lr, #1
   1468c:	cmp	r4, #0
   14690:	bne	14684 <__assert_fail@plt+0x35fc>
   14694:	sub	r4, lr, #1
   14698:	str	ip, [sp]
   1469c:	str	r4, [sp, #4]
   146a0:	bl	1433c <__assert_fail@plt+0x32b4>
   146a4:	sub	sp, fp, #8
   146a8:	pop	{r4, sl, fp, pc}
   146ac:	push	{fp, lr}
   146b0:	mov	fp, sp
   146b4:	sub	sp, sp, #48	; 0x30
   146b8:	ldr	ip, [fp, #8]
   146bc:	ldr	lr, [ip]
   146c0:	cmp	lr, #0
   146c4:	str	lr, [sp, #8]
   146c8:	beq	14764 <__assert_fail@plt+0x36dc>
   146cc:	ldr	lr, [ip, #4]
   146d0:	cmp	lr, #0
   146d4:	str	lr, [sp, #12]
   146d8:	beq	1476c <__assert_fail@plt+0x36e4>
   146dc:	ldr	lr, [ip, #8]
   146e0:	cmp	lr, #0
   146e4:	str	lr, [sp, #16]
   146e8:	beq	14774 <__assert_fail@plt+0x36ec>
   146ec:	ldr	lr, [ip, #12]
   146f0:	cmp	lr, #0
   146f4:	str	lr, [sp, #20]
   146f8:	beq	1477c <__assert_fail@plt+0x36f4>
   146fc:	ldr	lr, [ip, #16]
   14700:	cmp	lr, #0
   14704:	str	lr, [sp, #24]
   14708:	beq	14784 <__assert_fail@plt+0x36fc>
   1470c:	ldr	lr, [ip, #20]
   14710:	cmp	lr, #0
   14714:	str	lr, [sp, #28]
   14718:	beq	1478c <__assert_fail@plt+0x3704>
   1471c:	ldr	lr, [ip, #24]
   14720:	cmp	lr, #0
   14724:	str	lr, [sp, #32]
   14728:	beq	14794 <__assert_fail@plt+0x370c>
   1472c:	ldr	lr, [ip, #28]
   14730:	cmp	lr, #0
   14734:	str	lr, [sp, #36]	; 0x24
   14738:	beq	1479c <__assert_fail@plt+0x3714>
   1473c:	ldr	lr, [ip, #32]
   14740:	cmp	lr, #0
   14744:	str	lr, [sp, #40]	; 0x28
   14748:	beq	147a4 <__assert_fail@plt+0x371c>
   1474c:	ldr	lr, [ip, #36]	; 0x24
   14750:	mov	ip, #10
   14754:	cmp	lr, #0
   14758:	str	lr, [sp, #44]	; 0x2c
   1475c:	movweq	ip, #9
   14760:	b	147a8 <__assert_fail@plt+0x3720>
   14764:	mov	ip, #0
   14768:	b	147a8 <__assert_fail@plt+0x3720>
   1476c:	mov	ip, #1
   14770:	b	147a8 <__assert_fail@plt+0x3720>
   14774:	mov	ip, #2
   14778:	b	147a8 <__assert_fail@plt+0x3720>
   1477c:	mov	ip, #3
   14780:	b	147a8 <__assert_fail@plt+0x3720>
   14784:	mov	ip, #4
   14788:	b	147a8 <__assert_fail@plt+0x3720>
   1478c:	mov	ip, #5
   14790:	b	147a8 <__assert_fail@plt+0x3720>
   14794:	mov	ip, #6
   14798:	b	147a8 <__assert_fail@plt+0x3720>
   1479c:	mov	ip, #7
   147a0:	b	147a8 <__assert_fail@plt+0x3720>
   147a4:	mov	ip, #8
   147a8:	add	lr, sp, #8
   147ac:	str	ip, [sp, #4]
   147b0:	str	lr, [sp]
   147b4:	bl	1433c <__assert_fail@plt+0x32b4>
   147b8:	mov	sp, fp
   147bc:	pop	{fp, pc}
   147c0:	push	{fp, lr}
   147c4:	mov	fp, sp
   147c8:	sub	sp, sp, #56	; 0x38
   147cc:	add	ip, fp, #8
   147d0:	str	ip, [sp, #12]
   147d4:	ldr	lr, [fp, #8]
   147d8:	cmp	lr, #0
   147dc:	str	lr, [sp, #16]
   147e0:	beq	1487c <__assert_fail@plt+0x37f4>
   147e4:	ldr	lr, [ip, #4]
   147e8:	cmp	lr, #0
   147ec:	str	lr, [sp, #20]
   147f0:	beq	14884 <__assert_fail@plt+0x37fc>
   147f4:	ldr	lr, [ip, #8]
   147f8:	cmp	lr, #0
   147fc:	str	lr, [sp, #24]
   14800:	beq	1488c <__assert_fail@plt+0x3804>
   14804:	ldr	lr, [ip, #12]
   14808:	cmp	lr, #0
   1480c:	str	lr, [sp, #28]
   14810:	beq	14894 <__assert_fail@plt+0x380c>
   14814:	ldr	lr, [ip, #16]
   14818:	cmp	lr, #0
   1481c:	str	lr, [sp, #32]
   14820:	beq	1489c <__assert_fail@plt+0x3814>
   14824:	ldr	lr, [ip, #20]
   14828:	cmp	lr, #0
   1482c:	str	lr, [sp, #36]	; 0x24
   14830:	beq	148a4 <__assert_fail@plt+0x381c>
   14834:	ldr	lr, [ip, #24]
   14838:	cmp	lr, #0
   1483c:	str	lr, [sp, #40]	; 0x28
   14840:	beq	148ac <__assert_fail@plt+0x3824>
   14844:	ldr	lr, [ip, #28]
   14848:	cmp	lr, #0
   1484c:	str	lr, [sp, #44]	; 0x2c
   14850:	beq	148b4 <__assert_fail@plt+0x382c>
   14854:	ldr	lr, [ip, #32]
   14858:	cmp	lr, #0
   1485c:	str	lr, [sp, #48]	; 0x30
   14860:	beq	148bc <__assert_fail@plt+0x3834>
   14864:	ldr	lr, [ip, #36]	; 0x24
   14868:	mov	ip, #10
   1486c:	cmp	lr, #0
   14870:	str	lr, [sp, #52]	; 0x34
   14874:	movweq	ip, #9
   14878:	b	148c0 <__assert_fail@plt+0x3838>
   1487c:	mov	ip, #0
   14880:	b	148c0 <__assert_fail@plt+0x3838>
   14884:	mov	ip, #1
   14888:	b	148c0 <__assert_fail@plt+0x3838>
   1488c:	mov	ip, #2
   14890:	b	148c0 <__assert_fail@plt+0x3838>
   14894:	mov	ip, #3
   14898:	b	148c0 <__assert_fail@plt+0x3838>
   1489c:	mov	ip, #4
   148a0:	b	148c0 <__assert_fail@plt+0x3838>
   148a4:	mov	ip, #5
   148a8:	b	148c0 <__assert_fail@plt+0x3838>
   148ac:	mov	ip, #6
   148b0:	b	148c0 <__assert_fail@plt+0x3838>
   148b4:	mov	ip, #7
   148b8:	b	148c0 <__assert_fail@plt+0x3838>
   148bc:	mov	ip, #8
   148c0:	add	lr, sp, #16
   148c4:	str	ip, [sp, #4]
   148c8:	str	lr, [sp]
   148cc:	bl	1433c <__assert_fail@plt+0x32b4>
   148d0:	mov	sp, fp
   148d4:	pop	{fp, pc}
   148d8:	push	{fp, lr}
   148dc:	mov	fp, sp
   148e0:	movw	r0, #33100	; 0x814c
   148e4:	movt	r0, #2
   148e8:	ldr	r1, [r0]
   148ec:	movw	r0, #29647	; 0x73cf
   148f0:	movt	r0, #1
   148f4:	bl	10e30 <fputs_unlocked@plt>
   148f8:	movw	r1, #31095	; 0x7977
   148fc:	mov	r0, #0
   14900:	mov	r2, #5
   14904:	movt	r1, #1
   14908:	bl	10ec0 <dcgettext@plt>
   1490c:	movw	r2, #31115	; 0x798b
   14910:	mov	r1, r0
   14914:	mov	r0, #1
   14918:	movt	r2, #1
   1491c:	bl	10fc8 <__printf_chk@plt>
   14920:	movw	r1, #31137	; 0x79a1
   14924:	mov	r0, #0
   14928:	mov	r2, #5
   1492c:	movt	r1, #1
   14930:	bl	10ec0 <dcgettext@plt>
   14934:	movw	r2, #29157	; 0x71e5
   14938:	movw	r3, #29456	; 0x7310
   1493c:	mov	r1, r0
   14940:	mov	r0, #1
   14944:	movt	r2, #1
   14948:	movt	r3, #1
   1494c:	bl	10fc8 <__printf_chk@plt>
   14950:	movw	r1, #31157	; 0x79b5
   14954:	mov	r0, #0
   14958:	mov	r2, #5
   1495c:	movt	r1, #1
   14960:	bl	10ec0 <dcgettext@plt>
   14964:	movw	r2, #31196	; 0x79dc
   14968:	mov	r1, r0
   1496c:	mov	r0, #1
   14970:	movt	r2, #1
   14974:	pop	{fp, lr}
   14978:	b	10fc8 <__printf_chk@plt>
   1497c:	push	{r4, r5, r6, sl, fp, lr}
   14980:	add	fp, sp, #16
   14984:	mov	r4, r2
   14988:	mov	r5, r1
   1498c:	mov	r6, r0
   14990:	bl	16aa4 <__assert_fail@plt+0x5a1c>
   14994:	cmp	r0, #0
   14998:	popne	{r4, r5, r6, sl, fp, pc}
   1499c:	cmp	r6, #0
   149a0:	beq	149b4 <__assert_fail@plt+0x392c>
   149a4:	cmp	r5, #0
   149a8:	cmpne	r4, #0
   149ac:	bne	149b4 <__assert_fail@plt+0x392c>
   149b0:	pop	{r4, r5, r6, sl, fp, pc}
   149b4:	bl	14f54 <__assert_fail@plt+0x3ecc>
   149b8:	push	{r4, r5, r6, sl, fp, lr}
   149bc:	add	fp, sp, #16
   149c0:	mov	r4, r2
   149c4:	mov	r5, r1
   149c8:	mov	r6, r0
   149cc:	bl	16aa4 <__assert_fail@plt+0x5a1c>
   149d0:	cmp	r0, #0
   149d4:	popne	{r4, r5, r6, sl, fp, pc}
   149d8:	cmp	r6, #0
   149dc:	beq	149f0 <__assert_fail@plt+0x3968>
   149e0:	cmp	r5, #0
   149e4:	cmpne	r4, #0
   149e8:	bne	149f0 <__assert_fail@plt+0x3968>
   149ec:	pop	{r4, r5, r6, sl, fp, pc}
   149f0:	bl	14f54 <__assert_fail@plt+0x3ecc>
   149f4:	push	{fp, lr}
   149f8:	mov	fp, sp
   149fc:	bl	16904 <__assert_fail@plt+0x587c>
   14a00:	cmp	r0, #0
   14a04:	popne	{fp, pc}
   14a08:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14a0c:	push	{fp, lr}
   14a10:	mov	fp, sp
   14a14:	bl	16904 <__assert_fail@plt+0x587c>
   14a18:	cmp	r0, #0
   14a1c:	popne	{fp, pc}
   14a20:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14a24:	push	{fp, lr}
   14a28:	mov	fp, sp
   14a2c:	bl	16904 <__assert_fail@plt+0x587c>
   14a30:	cmp	r0, #0
   14a34:	popne	{fp, pc}
   14a38:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14a3c:	push	{r4, r5, fp, lr}
   14a40:	add	fp, sp, #8
   14a44:	mov	r4, r1
   14a48:	mov	r5, r0
   14a4c:	bl	16934 <__assert_fail@plt+0x58ac>
   14a50:	cmp	r0, #0
   14a54:	popne	{r4, r5, fp, pc}
   14a58:	cmp	r5, #0
   14a5c:	beq	14a6c <__assert_fail@plt+0x39e4>
   14a60:	cmp	r4, #0
   14a64:	bne	14a6c <__assert_fail@plt+0x39e4>
   14a68:	pop	{r4, r5, fp, pc}
   14a6c:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14a70:	push	{fp, lr}
   14a74:	mov	fp, sp
   14a78:	cmp	r1, #0
   14a7c:	orreq	r1, r1, #1
   14a80:	bl	16934 <__assert_fail@plt+0x58ac>
   14a84:	cmp	r0, #0
   14a88:	popne	{fp, pc}
   14a8c:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14a90:	push	{fp, lr}
   14a94:	mov	fp, sp
   14a98:	clz	r3, r2
   14a9c:	lsr	ip, r3, #5
   14aa0:	clz	r3, r1
   14aa4:	lsr	r3, r3, #5
   14aa8:	orrs	r3, r3, ip
   14aac:	movwne	r1, #1
   14ab0:	movwne	r2, #1
   14ab4:	bl	16aa4 <__assert_fail@plt+0x5a1c>
   14ab8:	cmp	r0, #0
   14abc:	popne	{fp, pc}
   14ac0:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14ac4:	push	{fp, lr}
   14ac8:	mov	fp, sp
   14acc:	mov	r2, r1
   14ad0:	mov	r1, r0
   14ad4:	mov	r0, #0
   14ad8:	bl	16aa4 <__assert_fail@plt+0x5a1c>
   14adc:	cmp	r0, #0
   14ae0:	popne	{fp, pc}
   14ae4:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14ae8:	push	{fp, lr}
   14aec:	mov	fp, sp
   14af0:	mov	r2, r1
   14af4:	mov	r1, r0
   14af8:	clz	r0, r2
   14afc:	clz	r3, r1
   14b00:	lsr	r0, r0, #5
   14b04:	lsr	r3, r3, #5
   14b08:	orrs	r0, r3, r0
   14b0c:	movwne	r1, #1
   14b10:	movwne	r2, #1
   14b14:	mov	r0, #0
   14b18:	bl	16aa4 <__assert_fail@plt+0x5a1c>
   14b1c:	cmp	r0, #0
   14b20:	popne	{fp, pc}
   14b24:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14b28:	push	{r4, r5, r6, sl, fp, lr}
   14b2c:	add	fp, sp, #16
   14b30:	ldr	r5, [r1]
   14b34:	mov	r4, r1
   14b38:	mov	r6, r0
   14b3c:	cmp	r0, #0
   14b40:	beq	14b58 <__assert_fail@plt+0x3ad0>
   14b44:	mov	r0, #1
   14b48:	add	r0, r0, r5, lsr #1
   14b4c:	adds	r5, r5, r0
   14b50:	bcc	14b60 <__assert_fail@plt+0x3ad8>
   14b54:	b	14b9c <__assert_fail@plt+0x3b14>
   14b58:	cmp	r5, #0
   14b5c:	movweq	r5, #64	; 0x40
   14b60:	mov	r0, r6
   14b64:	mov	r1, r5
   14b68:	mov	r2, #1
   14b6c:	bl	16aa4 <__assert_fail@plt+0x5a1c>
   14b70:	cmp	r5, #0
   14b74:	mov	r1, r5
   14b78:	movwne	r1, #1
   14b7c:	cmp	r0, #0
   14b80:	bne	14b94 <__assert_fail@plt+0x3b0c>
   14b84:	clz	r2, r6
   14b88:	lsr	r2, r2, #5
   14b8c:	orrs	r1, r2, r1
   14b90:	bne	14b9c <__assert_fail@plt+0x3b14>
   14b94:	str	r5, [r4]
   14b98:	pop	{r4, r5, r6, sl, fp, pc}
   14b9c:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14ba0:	push	{r4, r5, r6, r7, fp, lr}
   14ba4:	add	fp, sp, #16
   14ba8:	ldr	r5, [r1]
   14bac:	mov	r6, r2
   14bb0:	mov	r4, r1
   14bb4:	mov	r7, r0
   14bb8:	cmp	r0, #0
   14bbc:	beq	14bd4 <__assert_fail@plt+0x3b4c>
   14bc0:	mov	r0, #1
   14bc4:	add	r0, r0, r5, lsr #1
   14bc8:	adds	r5, r5, r0
   14bcc:	bcc	14bec <__assert_fail@plt+0x3b64>
   14bd0:	b	14c20 <__assert_fail@plt+0x3b98>
   14bd4:	cmp	r5, #0
   14bd8:	bne	14bec <__assert_fail@plt+0x3b64>
   14bdc:	mov	r0, #64	; 0x40
   14be0:	cmp	r6, #64	; 0x40
   14be4:	udiv	r5, r0, r6
   14be8:	addhi	r5, r5, #1
   14bec:	mov	r0, r7
   14bf0:	mov	r1, r5
   14bf4:	mov	r2, r6
   14bf8:	bl	16aa4 <__assert_fail@plt+0x5a1c>
   14bfc:	cmp	r0, #0
   14c00:	bne	14c18 <__assert_fail@plt+0x3b90>
   14c04:	cmp	r7, #0
   14c08:	beq	14c20 <__assert_fail@plt+0x3b98>
   14c0c:	cmp	r6, #0
   14c10:	cmpne	r5, #0
   14c14:	bne	14c20 <__assert_fail@plt+0x3b98>
   14c18:	str	r5, [r4]
   14c1c:	pop	{r4, r5, r6, r7, fp, pc}
   14c20:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14c24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c28:	add	fp, sp, #24
   14c2c:	mov	r8, r1
   14c30:	ldr	r1, [r1]
   14c34:	mov	r5, r0
   14c38:	add	r0, r1, r1, asr #1
   14c3c:	cmp	r0, r1
   14c40:	mvnvs	r0, #-2147483648	; 0x80000000
   14c44:	cmp	r0, r3
   14c48:	mov	r7, r0
   14c4c:	movgt	r7, r3
   14c50:	cmn	r3, #1
   14c54:	movle	r7, r0
   14c58:	ldr	r0, [fp, #8]
   14c5c:	cmn	r0, #1
   14c60:	ble	14c88 <__assert_fail@plt+0x3c00>
   14c64:	cmp	r0, #0
   14c68:	beq	14cdc <__assert_fail@plt+0x3c54>
   14c6c:	cmn	r7, #1
   14c70:	ble	14cb0 <__assert_fail@plt+0x3c28>
   14c74:	mvn	r4, #-2147483648	; 0x80000000
   14c78:	udiv	r6, r4, r0
   14c7c:	cmp	r6, r7
   14c80:	bge	14cdc <__assert_fail@plt+0x3c54>
   14c84:	b	14cec <__assert_fail@plt+0x3c64>
   14c88:	cmn	r7, #1
   14c8c:	ble	14ccc <__assert_fail@plt+0x3c44>
   14c90:	cmn	r0, #1
   14c94:	beq	14cdc <__assert_fail@plt+0x3c54>
   14c98:	mov	r6, #-2147483648	; 0x80000000
   14c9c:	mvn	r4, #-2147483648	; 0x80000000
   14ca0:	sdiv	r6, r6, r0
   14ca4:	cmp	r6, r7
   14ca8:	bge	14cdc <__assert_fail@plt+0x3c54>
   14cac:	b	14cec <__assert_fail@plt+0x3c64>
   14cb0:	beq	14cdc <__assert_fail@plt+0x3c54>
   14cb4:	mov	r6, #-2147483648	; 0x80000000
   14cb8:	mvn	r4, #-2147483648	; 0x80000000
   14cbc:	sdiv	r6, r6, r7
   14cc0:	cmp	r6, r0
   14cc4:	bge	14cdc <__assert_fail@plt+0x3c54>
   14cc8:	b	14cec <__assert_fail@plt+0x3c64>
   14ccc:	mvn	r4, #-2147483648	; 0x80000000
   14cd0:	sdiv	r6, r4, r0
   14cd4:	cmp	r7, r6
   14cd8:	blt	14cec <__assert_fail@plt+0x3c64>
   14cdc:	mul	r6, r7, r0
   14ce0:	mov	r4, #64	; 0x40
   14ce4:	cmp	r6, #63	; 0x3f
   14ce8:	bgt	14cf4 <__assert_fail@plt+0x3c6c>
   14cec:	sdiv	r7, r4, r0
   14cf0:	mul	r6, r7, r0
   14cf4:	cmp	r5, #0
   14cf8:	moveq	r4, #0
   14cfc:	streq	r4, [r8]
   14d00:	sub	r4, r7, r1
   14d04:	cmp	r4, r2
   14d08:	bge	14db4 <__assert_fail@plt+0x3d2c>
   14d0c:	add	r7, r1, r2
   14d10:	mov	r6, #0
   14d14:	mov	r2, #0
   14d18:	cmp	r7, r3
   14d1c:	movwgt	r6, #1
   14d20:	cmn	r3, #1
   14d24:	movwgt	r2, #1
   14d28:	cmp	r7, r1
   14d2c:	bvs	14de8 <__assert_fail@plt+0x3d60>
   14d30:	ands	r1, r2, r6
   14d34:	bne	14de8 <__assert_fail@plt+0x3d60>
   14d38:	cmn	r0, #1
   14d3c:	ble	14d64 <__assert_fail@plt+0x3cdc>
   14d40:	cmp	r0, #0
   14d44:	beq	14db0 <__assert_fail@plt+0x3d28>
   14d48:	cmn	r7, #1
   14d4c:	ble	14d88 <__assert_fail@plt+0x3d00>
   14d50:	mvn	r1, #-2147483648	; 0x80000000
   14d54:	udiv	r1, r1, r0
   14d58:	cmp	r1, r7
   14d5c:	bge	14db0 <__assert_fail@plt+0x3d28>
   14d60:	b	14de8 <__assert_fail@plt+0x3d60>
   14d64:	cmn	r7, #1
   14d68:	ble	14da0 <__assert_fail@plt+0x3d18>
   14d6c:	cmn	r0, #1
   14d70:	beq	14db0 <__assert_fail@plt+0x3d28>
   14d74:	mov	r1, #-2147483648	; 0x80000000
   14d78:	sdiv	r1, r1, r0
   14d7c:	cmp	r1, r7
   14d80:	bge	14db0 <__assert_fail@plt+0x3d28>
   14d84:	b	14de8 <__assert_fail@plt+0x3d60>
   14d88:	beq	14db0 <__assert_fail@plt+0x3d28>
   14d8c:	mov	r1, #-2147483648	; 0x80000000
   14d90:	sdiv	r1, r1, r7
   14d94:	cmp	r1, r0
   14d98:	bge	14db0 <__assert_fail@plt+0x3d28>
   14d9c:	b	14de8 <__assert_fail@plt+0x3d60>
   14da0:	mvn	r1, #-2147483648	; 0x80000000
   14da4:	sdiv	r1, r1, r0
   14da8:	cmp	r7, r1
   14dac:	blt	14de8 <__assert_fail@plt+0x3d60>
   14db0:	mul	r6, r7, r0
   14db4:	mov	r0, r5
   14db8:	mov	r1, r6
   14dbc:	bl	16934 <__assert_fail@plt+0x58ac>
   14dc0:	cmp	r6, #0
   14dc4:	movwne	r6, #1
   14dc8:	cmp	r0, #0
   14dcc:	bne	14de0 <__assert_fail@plt+0x3d58>
   14dd0:	clz	r1, r5
   14dd4:	lsr	r1, r1, #5
   14dd8:	orrs	r1, r1, r6
   14ddc:	bne	14de8 <__assert_fail@plt+0x3d60>
   14de0:	str	r7, [r8]
   14de4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14de8:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14dec:	push	{fp, lr}
   14df0:	mov	fp, sp
   14df4:	mov	r1, #1
   14df8:	bl	168b0 <__assert_fail@plt+0x5828>
   14dfc:	cmp	r0, #0
   14e00:	popne	{fp, pc}
   14e04:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14e08:	push	{fp, lr}
   14e0c:	mov	fp, sp
   14e10:	bl	168b0 <__assert_fail@plt+0x5828>
   14e14:	cmp	r0, #0
   14e18:	popne	{fp, pc}
   14e1c:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14e20:	push	{fp, lr}
   14e24:	mov	fp, sp
   14e28:	mov	r1, #1
   14e2c:	bl	168b0 <__assert_fail@plt+0x5828>
   14e30:	cmp	r0, #0
   14e34:	popne	{fp, pc}
   14e38:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14e3c:	push	{fp, lr}
   14e40:	mov	fp, sp
   14e44:	bl	168b0 <__assert_fail@plt+0x5828>
   14e48:	cmp	r0, #0
   14e4c:	popne	{fp, pc}
   14e50:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14e54:	push	{r4, r5, r6, sl, fp, lr}
   14e58:	add	fp, sp, #16
   14e5c:	mov	r5, r0
   14e60:	mov	r0, r1
   14e64:	mov	r4, r1
   14e68:	bl	16904 <__assert_fail@plt+0x587c>
   14e6c:	cmp	r0, #0
   14e70:	beq	14e8c <__assert_fail@plt+0x3e04>
   14e74:	mov	r1, r5
   14e78:	mov	r2, r4
   14e7c:	mov	r6, r0
   14e80:	bl	10e90 <memcpy@plt>
   14e84:	mov	r0, r6
   14e88:	pop	{r4, r5, r6, sl, fp, pc}
   14e8c:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14e90:	push	{r4, r5, r6, sl, fp, lr}
   14e94:	add	fp, sp, #16
   14e98:	mov	r5, r0
   14e9c:	mov	r0, r1
   14ea0:	mov	r4, r1
   14ea4:	bl	16904 <__assert_fail@plt+0x587c>
   14ea8:	cmp	r0, #0
   14eac:	beq	14ec8 <__assert_fail@plt+0x3e40>
   14eb0:	mov	r1, r5
   14eb4:	mov	r2, r4
   14eb8:	mov	r6, r0
   14ebc:	bl	10e90 <memcpy@plt>
   14ec0:	mov	r0, r6
   14ec4:	pop	{r4, r5, r6, sl, fp, pc}
   14ec8:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14ecc:	push	{r4, r5, r6, sl, fp, lr}
   14ed0:	add	fp, sp, #16
   14ed4:	mov	r5, r0
   14ed8:	add	r0, r1, #1
   14edc:	mov	r4, r1
   14ee0:	bl	16904 <__assert_fail@plt+0x587c>
   14ee4:	cmp	r0, #0
   14ee8:	beq	14f10 <__assert_fail@plt+0x3e88>
   14eec:	mov	r6, r0
   14ef0:	mov	r0, #0
   14ef4:	mov	r1, r5
   14ef8:	mov	r2, r4
   14efc:	strb	r0, [r6, r4]
   14f00:	mov	r0, r6
   14f04:	bl	10e90 <memcpy@plt>
   14f08:	mov	r0, r6
   14f0c:	pop	{r4, r5, r6, sl, fp, pc}
   14f10:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14f14:	push	{r4, r5, r6, sl, fp, lr}
   14f18:	add	fp, sp, #16
   14f1c:	mov	r4, r0
   14f20:	bl	10f8c <strlen@plt>
   14f24:	add	r5, r0, #1
   14f28:	mov	r0, r5
   14f2c:	bl	16904 <__assert_fail@plt+0x587c>
   14f30:	cmp	r0, #0
   14f34:	beq	14f50 <__assert_fail@plt+0x3ec8>
   14f38:	mov	r1, r4
   14f3c:	mov	r2, r5
   14f40:	mov	r6, r0
   14f44:	bl	10e90 <memcpy@plt>
   14f48:	mov	r0, r6
   14f4c:	pop	{r4, r5, r6, sl, fp, pc}
   14f50:	bl	14f54 <__assert_fail@plt+0x3ecc>
   14f54:	push	{fp, lr}
   14f58:	mov	fp, sp
   14f5c:	movw	r0, #33004	; 0x80ec
   14f60:	movw	r1, #31272	; 0x7a28
   14f64:	mov	r2, #5
   14f68:	movt	r0, #2
   14f6c:	movt	r1, #1
   14f70:	ldr	r4, [r0]
   14f74:	mov	r0, #0
   14f78:	bl	10ec0 <dcgettext@plt>
   14f7c:	movw	r2, #29136	; 0x71d0
   14f80:	mov	r3, r0
   14f84:	mov	r0, r4
   14f88:	mov	r1, #0
   14f8c:	movt	r2, #1
   14f90:	bl	10f2c <error@plt>
   14f94:	bl	1107c <abort@plt>
   14f98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f9c:	add	fp, sp, #28
   14fa0:	sub	sp, sp, #36	; 0x24
   14fa4:	cmp	r2, #37	; 0x25
   14fa8:	bcs	16890 <__assert_fail@plt+0x5808>
   14fac:	ldr	r8, [fp, #8]
   14fb0:	mov	r9, r3
   14fb4:	mov	r6, r2
   14fb8:	mov	r7, r1
   14fbc:	mov	r4, r0
   14fc0:	bl	10fa4 <__errno_location@plt>
   14fc4:	add	sl, sp, #32
   14fc8:	cmp	r7, #0
   14fcc:	mov	r5, r0
   14fd0:	mov	r0, #0
   14fd4:	mov	r2, r6
   14fd8:	mov	r3, #0
   14fdc:	movne	sl, r7
   14fe0:	str	r0, [r5]
   14fe4:	mov	r0, r4
   14fe8:	mov	r1, sl
   14fec:	bl	11040 <__strtoll_internal@plt>
   14ff0:	mov	r7, r1
   14ff4:	ldr	r1, [sl]
   14ff8:	cmp	r1, r4
   14ffc:	beq	1502c <__assert_fail@plt+0x3fa4>
   15000:	mov	r6, r0
   15004:	ldr	r0, [r5]
   15008:	cmp	r0, #0
   1500c:	beq	1506c <__assert_fail@plt+0x3fe4>
   15010:	mov	r5, #4
   15014:	cmp	r0, #34	; 0x22
   15018:	bne	164a0 <__assert_fail@plt+0x5418>
   1501c:	mov	r5, #1
   15020:	cmp	r8, #0
   15024:	bne	15078 <__assert_fail@plt+0x3ff0>
   15028:	b	1649c <__assert_fail@plt+0x5414>
   1502c:	mov	r5, #4
   15030:	cmp	r8, #0
   15034:	beq	164a0 <__assert_fail@plt+0x5418>
   15038:	mov	r6, r1
   1503c:	ldrb	r1, [r4]
   15040:	cmp	r1, #0
   15044:	beq	164a0 <__assert_fail@plt+0x5418>
   15048:	mov	r0, r8
   1504c:	bl	10f98 <strchr@plt>
   15050:	cmp	r0, #0
   15054:	beq	164a0 <__assert_fail@plt+0x5418>
   15058:	mov	r1, r6
   1505c:	mov	r5, #0
   15060:	mov	r6, #1
   15064:	mov	r7, #0
   15068:	b	15078 <__assert_fail@plt+0x3ff0>
   1506c:	mov	r5, r0
   15070:	cmp	r8, #0
   15074:	beq	1649c <__assert_fail@plt+0x5414>
   15078:	ldrb	r4, [r1]
   1507c:	cmp	r4, #0
   15080:	beq	1649c <__assert_fail@plt+0x5414>
   15084:	str	r1, [sp, #20]
   15088:	mov	r0, r8
   1508c:	mov	r1, r4
   15090:	bl	10f98 <strchr@plt>
   15094:	cmp	r0, #0
   15098:	beq	15324 <__assert_fail@plt+0x429c>
   1509c:	sub	r0, r4, #69	; 0x45
   150a0:	mov	r1, #1
   150a4:	mov	r3, #0
   150a8:	mov	r2, #1024	; 0x400
   150ac:	cmp	r0, #47	; 0x2f
   150b0:	str	r1, [sp, #16]
   150b4:	bhi	151f0 <__assert_fail@plt+0x4168>
   150b8:	add	r1, pc, #0
   150bc:	ldr	pc, [r1, r0, lsl #2]
   150c0:	andeq	r5, r1, r0, lsl #3
   150c4:	strdeq	r5, [r1], -r0
   150c8:	andeq	r5, r1, r0, lsl #3
   150cc:	strdeq	r5, [r1], -r0
   150d0:	strdeq	r5, [r1], -r0
   150d4:	strdeq	r5, [r1], -r0
   150d8:	andeq	r5, r1, r0, lsl #3
   150dc:	strdeq	r5, [r1], -r0
   150e0:	andeq	r5, r1, r0, lsl #3
   150e4:	strdeq	r5, [r1], -r0
   150e8:	strdeq	r5, [r1], -r0
   150ec:	andeq	r5, r1, r0, lsl #3
   150f0:	strdeq	r5, [r1], -r0
   150f4:	strdeq	r5, [r1], -r0
   150f8:	strdeq	r5, [r1], -r0
   150fc:	andeq	r5, r1, r0, lsl #3
   15100:	strdeq	r5, [r1], -r0
   15104:	strdeq	r5, [r1], -r0
   15108:	strdeq	r5, [r1], -r0
   1510c:	strdeq	r5, [r1], -r0
   15110:	andeq	r5, r1, r0, lsl #3
   15114:	andeq	r5, r1, r0, lsl #3
   15118:	strdeq	r5, [r1], -r0
   1511c:	strdeq	r5, [r1], -r0
   15120:	strdeq	r5, [r1], -r0
   15124:	strdeq	r5, [r1], -r0
   15128:	strdeq	r5, [r1], -r0
   1512c:	strdeq	r5, [r1], -r0
   15130:	strdeq	r5, [r1], -r0
   15134:	strdeq	r5, [r1], -r0
   15138:	strdeq	r5, [r1], -r0
   1513c:	strdeq	r5, [r1], -r0
   15140:	strdeq	r5, [r1], -r0
   15144:	strdeq	r5, [r1], -r0
   15148:	andeq	r5, r1, r0, lsl #3
   1514c:	strdeq	r5, [r1], -r0
   15150:	strdeq	r5, [r1], -r0
   15154:	strdeq	r5, [r1], -r0
   15158:	andeq	r5, r1, r0, lsl #3
   1515c:	strdeq	r5, [r1], -r0
   15160:	andeq	r5, r1, r0, lsl #3
   15164:	strdeq	r5, [r1], -r0
   15168:	strdeq	r5, [r1], -r0
   1516c:	strdeq	r5, [r1], -r0
   15170:	strdeq	r5, [r1], -r0
   15174:	strdeq	r5, [r1], -r0
   15178:	strdeq	r5, [r1], -r0
   1517c:	andeq	r5, r1, r0, lsl #3
   15180:	mov	r0, r8
   15184:	mov	r1, #48	; 0x30
   15188:	bl	10f98 <strchr@plt>
   1518c:	cmp	r0, #0
   15190:	beq	151bc <__assert_fail@plt+0x4134>
   15194:	ldr	r1, [sp, #20]
   15198:	ldrb	r0, [r1, #1]
   1519c:	cmp	r0, #66	; 0x42
   151a0:	cmpne	r0, #68	; 0x44
   151a4:	bne	151c4 <__assert_fail@plt+0x413c>
   151a8:	mov	r0, #2
   151ac:	mov	r2, #1000	; 0x3e8
   151b0:	mov	r3, #0
   151b4:	str	r0, [sp, #16]
   151b8:	b	151f0 <__assert_fail@plt+0x4168>
   151bc:	mov	r3, #0
   151c0:	b	151ec <__assert_fail@plt+0x4164>
   151c4:	cmp	r0, #105	; 0x69
   151c8:	mov	r3, #0
   151cc:	bne	151ec <__assert_fail@plt+0x4164>
   151d0:	ldrb	r0, [r1, #2]
   151d4:	mov	r1, #1
   151d8:	mov	r2, #1024	; 0x400
   151dc:	cmp	r0, #66	; 0x42
   151e0:	movweq	r1, #3
   151e4:	str	r1, [sp, #16]
   151e8:	b	151f0 <__assert_fail@plt+0x4168>
   151ec:	mov	r2, #1024	; 0x400
   151f0:	sub	r0, r4, #66	; 0x42
   151f4:	cmp	r0, #53	; 0x35
   151f8:	bhi	15324 <__assert_fail@plt+0x429c>
   151fc:	add	r1, pc, #8
   15200:	str	r3, [sp, #28]
   15204:	str	r2, [sp, #24]
   15208:	ldr	pc, [r1, r0, lsl #2]
   1520c:	andeq	r5, r1, r4, lsr #8
   15210:	andeq	r5, r1, r4, lsr #6
   15214:	andeq	r5, r1, r4, lsr #6
   15218:	andeq	r5, r1, r8, lsr r4
   1521c:	andeq	r5, r1, r4, lsr #6
   15220:	andeq	r5, r1, r4, ror #5
   15224:	andeq	r5, r1, r4, lsr #6
   15228:	andeq	r5, r1, r4, lsr #6
   1522c:	andeq	r5, r1, r4, lsr #6
   15230:	andeq	r5, r1, ip, lsr #6
   15234:	andeq	r5, r1, r4, lsr #6
   15238:	andeq	r5, r1, ip, asr r3
   1523c:	andeq	r5, r1, r4, lsr #6
   15240:	andeq	r5, r1, r4, lsr #6
   15244:	andeq	r5, r1, ip, ror r4
   15248:	andeq	r5, r1, r4, lsr #6
   1524c:	andeq	r5, r1, r4, lsr #6
   15250:	andeq	r5, r1, r4, lsr #6
   15254:	muleq	r1, ip, r3
   15258:	andeq	r5, r1, r4, lsr #6
   1525c:	andeq	r5, r1, r4, lsr #6
   15260:	andeq	r5, r1, r4, lsr #6
   15264:	andeq	r5, r1, r4, lsr #6
   15268:	andeq	r5, r1, r0, asr #9
   1526c:	andeq	r5, r1, r0, ror #7
   15270:	andeq	r5, r1, r4, lsr #6
   15274:	andeq	r5, r1, r4, lsr #6
   15278:	andeq	r5, r1, r4, lsr #6
   1527c:	andeq	r5, r1, r4, lsr #6
   15280:	andeq	r5, r1, r4, lsr #6
   15284:	andeq	r5, r1, r4, lsr #6
   15288:	andeq	r5, r1, r4, lsr #6
   1528c:	andeq	r5, r1, r4, lsl #10
   15290:	andeq	r6, r1, ip, ror r4
   15294:	andeq	r5, r1, r4, lsr #6
   15298:	andeq	r5, r1, r4, lsr #6
   1529c:	andeq	r5, r1, r4, lsr #6
   152a0:	andeq	r5, r1, r4, ror #5
   152a4:	andeq	r5, r1, r4, lsr #6
   152a8:	andeq	r5, r1, r4, lsr #6
   152ac:	andeq	r5, r1, r4, lsr #6
   152b0:	andeq	r5, r1, ip, lsr #6
   152b4:	andeq	r5, r1, r4, lsr #6
   152b8:	andeq	r5, r1, ip, asr r3
   152bc:	andeq	r5, r1, r4, lsr #6
   152c0:	andeq	r5, r1, r4, lsr #6
   152c4:	andeq	r5, r1, r4, lsr #6
   152c8:	andeq	r5, r1, r4, lsr #6
   152cc:	andeq	r5, r1, r4, lsr #6
   152d0:	andeq	r5, r1, r4, lsr #6
   152d4:	muleq	r1, ip, r3
   152d8:	andeq	r5, r1, r4, lsr #6
   152dc:	andeq	r5, r1, r4, lsr #6
   152e0:	andeq	r5, r1, r8, lsl r5
   152e4:	cmn	r7, #1
   152e8:	str	r9, [sp, #12]
   152ec:	ble	1552c <__assert_fail@plt+0x44a4>
   152f0:	ldr	r3, [sp, #28]
   152f4:	mvn	r0, #0
   152f8:	mvn	r1, #-2147483648	; 0x80000000
   152fc:	mvn	r8, #0
   15300:	mvn	r9, #-2147483648	; 0x80000000
   15304:	bl	16cbc <__assert_fail@plt+0x5c34>
   15308:	ldr	r2, [sp, #24]
   1530c:	ldr	r3, [sp, #28]
   15310:	subs	r0, r0, r6
   15314:	mov	r4, #1
   15318:	sbcs	r0, r1, r7
   1531c:	bge	1556c <__assert_fail@plt+0x44e4>
   15320:	b	15584 <__assert_fail@plt+0x44fc>
   15324:	orr	r5, r5, #2
   15328:	b	1649c <__assert_fail@plt+0x5414>
   1532c:	cmn	r7, #1
   15330:	ble	155c0 <__assert_fail@plt+0x4538>
   15334:	ldr	r3, [sp, #28]
   15338:	mvn	r0, #0
   1533c:	mvn	r1, #-2147483648	; 0x80000000
   15340:	bl	16cbc <__assert_fail@plt+0x5c34>
   15344:	ldr	r2, [sp, #24]
   15348:	ldr	r3, [sp, #28]
   1534c:	subs	r0, r0, r6
   15350:	sbcs	r0, r1, r7
   15354:	bge	155f4 <__assert_fail@plt+0x456c>
   15358:	b	15d04 <__assert_fail@plt+0x4c7c>
   1535c:	cmn	r7, #1
   15360:	str	r9, [sp, #12]
   15364:	ble	15608 <__assert_fail@plt+0x4580>
   15368:	ldr	r3, [sp, #28]
   1536c:	mvn	r0, #0
   15370:	mvn	r1, #-2147483648	; 0x80000000
   15374:	mvn	r8, #0
   15378:	mvn	r9, #-2147483648	; 0x80000000
   1537c:	bl	16cbc <__assert_fail@plt+0x5c34>
   15380:	ldr	r2, [sp, #24]
   15384:	ldr	r3, [sp, #28]
   15388:	subs	r0, r0, r6
   1538c:	mov	r4, #1
   15390:	sbcs	r0, r1, r7
   15394:	bge	15648 <__assert_fail@plt+0x45c0>
   15398:	b	15660 <__assert_fail@plt+0x45d8>
   1539c:	cmn	r7, #1
   153a0:	str	r9, [sp, #12]
   153a4:	ble	15698 <__assert_fail@plt+0x4610>
   153a8:	ldr	r3, [sp, #28]
   153ac:	mvn	r0, #0
   153b0:	mvn	r1, #-2147483648	; 0x80000000
   153b4:	mvn	r9, #-2147483648	; 0x80000000
   153b8:	str	r0, [sp, #8]
   153bc:	mvn	r0, #0
   153c0:	bl	16cbc <__assert_fail@plt+0x5c34>
   153c4:	ldr	r2, [sp, #24]
   153c8:	ldr	r3, [sp, #28]
   153cc:	subs	r0, r0, r6
   153d0:	mov	r4, #1
   153d4:	sbcs	r0, r1, r7
   153d8:	bge	156dc <__assert_fail@plt+0x4654>
   153dc:	b	156f8 <__assert_fail@plt+0x4670>
   153e0:	cmp	r7, #0
   153e4:	str	r9, [sp, #12]
   153e8:	blt	159e0 <__assert_fail@plt+0x4958>
   153ec:	ldr	r3, [sp, #28]
   153f0:	mvn	r0, #0
   153f4:	mvn	r1, #-2147483648	; 0x80000000
   153f8:	mvn	r9, #-2147483648	; 0x80000000
   153fc:	str	r0, [sp, #8]
   15400:	mvn	r0, #0
   15404:	bl	16cbc <__assert_fail@plt+0x5c34>
   15408:	ldr	r2, [sp, #24]
   1540c:	ldr	r3, [sp, #28]
   15410:	subs	r0, r0, r6
   15414:	mov	r4, #1
   15418:	sbcs	r0, r1, r7
   1541c:	bge	15a24 <__assert_fail@plt+0x499c>
   15420:	b	15a40 <__assert_fail@plt+0x49b8>
   15424:	cmn	r7, #1
   15428:	ble	15a7c <__assert_fail@plt+0x49f4>
   1542c:	cmp	r7, #2097152	; 0x200000
   15430:	blt	15aac <__assert_fail@plt+0x4a24>
   15434:	b	15d04 <__assert_fail@plt+0x4c7c>
   15438:	cmp	r7, #0
   1543c:	str	r9, [sp, #12]
   15440:	blt	15abc <__assert_fail@plt+0x4a34>
   15444:	ldr	r3, [sp, #28]
   15448:	mvn	r0, #0
   1544c:	mvn	r1, #-2147483648	; 0x80000000
   15450:	mvn	r9, #-2147483648	; 0x80000000
   15454:	str	r0, [sp, #8]
   15458:	mvn	r0, #0
   1545c:	bl	16cbc <__assert_fail@plt+0x5c34>
   15460:	ldr	r2, [sp, #24]
   15464:	ldr	r3, [sp, #28]
   15468:	subs	r0, r0, r6
   1546c:	mov	r4, #1
   15470:	sbcs	r0, r1, r7
   15474:	bge	15b00 <__assert_fail@plt+0x4a78>
   15478:	b	15b1c <__assert_fail@plt+0x4a94>
   1547c:	cmp	r7, #0
   15480:	str	r9, [sp, #12]
   15484:	blt	15b58 <__assert_fail@plt+0x4ad0>
   15488:	ldr	r3, [sp, #28]
   1548c:	mvn	r0, #0
   15490:	mvn	r1, #-2147483648	; 0x80000000
   15494:	mvn	r8, #-2147483648	; 0x80000000
   15498:	str	r0, [sp, #8]
   1549c:	mvn	r0, #0
   154a0:	bl	16cbc <__assert_fail@plt+0x5c34>
   154a4:	ldr	r2, [sp, #24]
   154a8:	ldr	r3, [sp, #28]
   154ac:	subs	r0, r0, r6
   154b0:	mov	r4, #1
   154b4:	sbcs	r0, r1, r7
   154b8:	bge	15b9c <__assert_fail@plt+0x4b14>
   154bc:	b	15bb8 <__assert_fail@plt+0x4b30>
   154c0:	cmp	r7, #0
   154c4:	str	r9, [sp, #12]
   154c8:	blt	15bf4 <__assert_fail@plt+0x4b6c>
   154cc:	ldr	r3, [sp, #28]
   154d0:	mvn	r0, #0
   154d4:	mvn	r1, #-2147483648	; 0x80000000
   154d8:	mvn	r9, #-2147483648	; 0x80000000
   154dc:	str	r0, [sp, #8]
   154e0:	mvn	r0, #0
   154e4:	bl	16cbc <__assert_fail@plt+0x5c34>
   154e8:	ldr	r2, [sp, #24]
   154ec:	ldr	r3, [sp, #28]
   154f0:	subs	r0, r0, r6
   154f4:	mov	r4, #1
   154f8:	sbcs	r0, r1, r7
   154fc:	bge	15c38 <__assert_fail@plt+0x4bb0>
   15500:	b	15c54 <__assert_fail@plt+0x4bcc>
   15504:	cmn	r7, #1
   15508:	ble	15c94 <__assert_fail@plt+0x4c0c>
   1550c:	cmp	r7, #4194304	; 0x400000
   15510:	blt	15cc4 <__assert_fail@plt+0x4c3c>
   15514:	b	15d04 <__assert_fail@plt+0x4c7c>
   15518:	cmn	r7, #1
   1551c:	ble	15cd4 <__assert_fail@plt+0x4c4c>
   15520:	cmp	r7, #1073741824	; 0x40000000
   15524:	bge	15d04 <__assert_fail@plt+0x4c7c>
   15528:	b	15d24 <__assert_fail@plt+0x4c9c>
   1552c:	and	r0, r6, r7
   15530:	cmn	r0, #1
   15534:	beq	1556c <__assert_fail@plt+0x44e4>
   15538:	mov	r0, #0
   1553c:	mov	r1, #-2147483648	; 0x80000000
   15540:	mov	r2, r6
   15544:	mov	r3, r7
   15548:	mov	r8, #0
   1554c:	mov	r9, #-2147483648	; 0x80000000
   15550:	bl	16be8 <__assert_fail@plt+0x5b60>
   15554:	ldr	r2, [sp, #24]
   15558:	ldr	r3, [sp, #28]
   1555c:	mov	r4, #1
   15560:	subs	r0, r0, r2
   15564:	sbcs	r0, r1, r3
   15568:	blt	15734 <__assert_fail@plt+0x46ac>
   1556c:	umull	r8, r0, r6, r2
   15570:	mov	r4, #0
   15574:	mla	r0, r6, r3, r0
   15578:	mla	r9, r7, r2, r0
   1557c:	cmp	r9, #0
   15580:	blt	15734 <__assert_fail@plt+0x46ac>
   15584:	ldr	r3, [sp, #28]
   15588:	mvn	r0, #-2147483648	; 0x80000000
   1558c:	mvn	r1, #-2147483648	; 0x80000000
   15590:	mov	r6, r4
   15594:	mvn	r4, #0
   15598:	str	r0, [sp, #8]
   1559c:	mvn	r0, #0
   155a0:	bl	16cbc <__assert_fail@plt+0x5c34>
   155a4:	ldr	r2, [sp, #24]
   155a8:	ldr	r3, [sp, #28]
   155ac:	subs	r0, r0, r8
   155b0:	mov	r7, #1
   155b4:	sbcs	r0, r1, r9
   155b8:	bge	15770 <__assert_fail@plt+0x46e8>
   155bc:	b	1578c <__assert_fail@plt+0x4704>
   155c0:	and	r0, r6, r7
   155c4:	cmn	r0, #1
   155c8:	beq	155f4 <__assert_fail@plt+0x456c>
   155cc:	mov	r0, #0
   155d0:	mov	r1, #-2147483648	; 0x80000000
   155d4:	mov	r2, r6
   155d8:	mov	r3, r7
   155dc:	bl	16be8 <__assert_fail@plt+0x5b60>
   155e0:	ldr	r2, [sp, #24]
   155e4:	ldr	r3, [sp, #28]
   155e8:	subs	r0, r0, r2
   155ec:	sbcs	r0, r1, r3
   155f0:	blt	15d04 <__assert_fail@plt+0x4c7c>
   155f4:	umull	r0, r1, r6, r2
   155f8:	mla	r1, r6, r3, r1
   155fc:	mov	r6, r0
   15600:	mla	r7, r7, r2, r1
   15604:	b	1647c <__assert_fail@plt+0x53f4>
   15608:	and	r0, r6, r7
   1560c:	cmn	r0, #1
   15610:	beq	15648 <__assert_fail@plt+0x45c0>
   15614:	mov	r0, #0
   15618:	mov	r1, #-2147483648	; 0x80000000
   1561c:	mov	r2, r6
   15620:	mov	r3, r7
   15624:	mov	r8, #0
   15628:	mov	r9, #-2147483648	; 0x80000000
   1562c:	bl	16be8 <__assert_fail@plt+0x5b60>
   15630:	ldr	r2, [sp, #24]
   15634:	ldr	r3, [sp, #28]
   15638:	mov	r4, #1
   1563c:	subs	r0, r0, r2
   15640:	sbcs	r0, r1, r3
   15644:	blt	15820 <__assert_fail@plt+0x4798>
   15648:	umull	r8, r0, r6, r2
   1564c:	mov	r4, #0
   15650:	mla	r0, r6, r3, r0
   15654:	mla	r9, r7, r2, r0
   15658:	cmp	r9, #0
   1565c:	blt	15820 <__assert_fail@plt+0x4798>
   15660:	ldr	r3, [sp, #28]
   15664:	mvn	r0, #0
   15668:	mvn	r1, #-2147483648	; 0x80000000
   1566c:	str	r4, [sp, #8]
   15670:	mvn	r6, #0
   15674:	mvn	r7, #-2147483648	; 0x80000000
   15678:	bl	16cbc <__assert_fail@plt+0x5c34>
   1567c:	ldr	r4, [sp, #24]
   15680:	ldr	r3, [sp, #28]
   15684:	subs	r0, r0, r8
   15688:	mov	r2, #1
   1568c:	sbcs	r0, r1, r9
   15690:	bge	15858 <__assert_fail@plt+0x47d0>
   15694:	b	15990 <__assert_fail@plt+0x4908>
   15698:	and	r0, r6, r7
   1569c:	cmn	r0, #1
   156a0:	beq	156dc <__assert_fail@plt+0x4654>
   156a4:	mov	r0, #0
   156a8:	mov	r1, #-2147483648	; 0x80000000
   156ac:	mov	r2, r6
   156b0:	mov	r3, r7
   156b4:	bl	16be8 <__assert_fail@plt+0x5b60>
   156b8:	ldr	r2, [sp, #24]
   156bc:	ldr	r3, [sp, #28]
   156c0:	mov	r4, #1
   156c4:	mov	r9, #-2147483648	; 0x80000000
   156c8:	subs	r0, r0, r2
   156cc:	sbcs	r0, r1, r3
   156d0:	mov	r0, #0
   156d4:	str	r0, [sp, #8]
   156d8:	blt	1586c <__assert_fail@plt+0x47e4>
   156dc:	umull	r1, r0, r6, r2
   156e0:	mov	r4, #0
   156e4:	mla	r0, r6, r3, r0
   156e8:	str	r1, [sp, #8]
   156ec:	mla	r9, r7, r2, r0
   156f0:	cmp	r9, #0
   156f4:	blt	1586c <__assert_fail@plt+0x47e4>
   156f8:	ldr	r3, [sp, #28]
   156fc:	mvn	r0, #0
   15700:	mvn	r1, #-2147483648	; 0x80000000
   15704:	str	r4, [sp, #4]
   15708:	mvn	r6, #0
   1570c:	mvn	r8, #-2147483648	; 0x80000000
   15710:	bl	16cbc <__assert_fail@plt+0x5c34>
   15714:	ldr	r4, [sp, #8]
   15718:	ldr	r2, [sp, #24]
   1571c:	ldr	r3, [sp, #28]
   15720:	mov	r7, #1
   15724:	subs	r0, r0, r4
   15728:	sbcs	r0, r1, r9
   1572c:	bge	158a8 <__assert_fail@plt+0x4820>
   15730:	b	158c0 <__assert_fail@plt+0x4838>
   15734:	mov	r0, #-2147483648	; 0x80000000
   15738:	mov	r1, #-2147483648	; 0x80000000
   1573c:	mov	r2, r8
   15740:	mov	r3, r9
   15744:	mov	r6, r4
   15748:	mov	r4, #0
   1574c:	str	r0, [sp, #8]
   15750:	mov	r0, #0
   15754:	bl	16be8 <__assert_fail@plt+0x5b60>
   15758:	ldr	r2, [sp, #24]
   1575c:	ldr	r3, [sp, #28]
   15760:	mov	r7, #1
   15764:	subs	r0, r0, r2
   15768:	sbcs	r0, r1, r3
   1576c:	blt	157e0 <__assert_fail@plt+0x4758>
   15770:	umull	r4, r0, r8, r2
   15774:	mov	r7, r6
   15778:	mla	r0, r8, r3, r0
   1577c:	mla	r0, r9, r2, r0
   15780:	cmp	r0, #0
   15784:	str	r0, [sp, #8]
   15788:	blt	157e0 <__assert_fail@plt+0x4758>
   1578c:	ldr	r3, [sp, #28]
   15790:	mvn	r0, #0
   15794:	mvn	r1, #-2147483648	; 0x80000000
   15798:	mov	r9, r7
   1579c:	mvn	r6, #0
   157a0:	mvn	r7, #-2147483648	; 0x80000000
   157a4:	bl	16cbc <__assert_fail@plt+0x5c34>
   157a8:	ldr	r8, [sp, #8]
   157ac:	ldr	r3, [sp, #24]
   157b0:	ldr	ip, [sp, #28]
   157b4:	subs	r0, r0, r4
   157b8:	mov	r2, #1
   157bc:	sbcs	r0, r1, r8
   157c0:	blt	157d4 <__assert_fail@plt+0x474c>
   157c4:	umull	r6, r0, r4, r3
   157c8:	mov	r2, #0
   157cc:	mla	r0, r4, ip, r0
   157d0:	mla	r7, r8, r3, r0
   157d4:	orr	r3, r2, r9
   157d8:	ldr	r9, [sp, #12]
   157dc:	b	1647c <__assert_fail@plt+0x53f4>
   157e0:	ldr	r8, [sp, #8]
   157e4:	mov	r0, #0
   157e8:	mov	r1, #-2147483648	; 0x80000000
   157ec:	mov	r2, r4
   157f0:	mov	r9, r7
   157f4:	mov	r6, #0
   157f8:	mov	r7, #-2147483648	; 0x80000000
   157fc:	mov	r3, r8
   15800:	bl	16be8 <__assert_fail@plt+0x5b60>
   15804:	ldr	r3, [sp, #24]
   15808:	ldr	ip, [sp, #28]
   1580c:	mov	r2, #1
   15810:	subs	r0, r0, r3
   15814:	sbcs	r0, r1, ip
   15818:	bge	157c4 <__assert_fail@plt+0x473c>
   1581c:	b	157d4 <__assert_fail@plt+0x474c>
   15820:	mov	r0, #0
   15824:	mov	r1, #-2147483648	; 0x80000000
   15828:	mov	r2, r8
   1582c:	mov	r3, r9
   15830:	str	r4, [sp, #8]
   15834:	mov	r6, #0
   15838:	mov	r7, #-2147483648	; 0x80000000
   1583c:	bl	16be8 <__assert_fail@plt+0x5b60>
   15840:	ldr	r4, [sp, #24]
   15844:	ldr	r3, [sp, #28]
   15848:	mov	r2, #1
   1584c:	subs	r0, r0, r4
   15850:	sbcs	r0, r1, r3
   15854:	blt	15990 <__assert_fail@plt+0x4908>
   15858:	umull	r6, r0, r8, r4
   1585c:	mov	r2, #0
   15860:	mla	r0, r8, r3, r0
   15864:	mla	r7, r9, r4, r0
   15868:	b	15990 <__assert_fail@plt+0x4908>
   1586c:	str	r4, [sp, #4]
   15870:	ldr	r4, [sp, #8]
   15874:	mov	r0, #0
   15878:	mov	r1, #-2147483648	; 0x80000000
   1587c:	mov	r3, r9
   15880:	mov	r2, r4
   15884:	bl	16be8 <__assert_fail@plt+0x5b60>
   15888:	ldr	r2, [sp, #24]
   1588c:	ldr	r3, [sp, #28]
   15890:	mov	r7, #1
   15894:	mov	r6, #0
   15898:	mov	r8, #-2147483648	; 0x80000000
   1589c:	subs	r0, r0, r2
   158a0:	sbcs	r0, r1, r3
   158a4:	blt	158f8 <__assert_fail@plt+0x4870>
   158a8:	umull	r6, r0, r4, r2
   158ac:	ldr	r7, [sp, #4]
   158b0:	mla	r0, r4, r3, r0
   158b4:	mla	r8, r9, r2, r0
   158b8:	cmp	r8, #0
   158bc:	blt	158f8 <__assert_fail@plt+0x4870>
   158c0:	ldr	r3, [sp, #28]
   158c4:	mvn	r0, #0
   158c8:	mvn	r1, #-2147483648	; 0x80000000
   158cc:	str	r7, [sp, #8]
   158d0:	mvn	r4, #0
   158d4:	mvn	r9, #-2147483648	; 0x80000000
   158d8:	bl	16cbc <__assert_fail@plt+0x5c34>
   158dc:	ldr	r2, [sp, #24]
   158e0:	ldr	r3, [sp, #28]
   158e4:	subs	r0, r0, r6
   158e8:	mov	r7, #1
   158ec:	sbcs	r0, r1, r8
   158f0:	bge	15930 <__assert_fail@plt+0x48a8>
   158f4:	b	15948 <__assert_fail@plt+0x48c0>
   158f8:	mov	r0, #0
   158fc:	mov	r1, #-2147483648	; 0x80000000
   15900:	mov	r2, r6
   15904:	mov	r3, r8
   15908:	str	r7, [sp, #8]
   1590c:	bl	16be8 <__assert_fail@plt+0x5b60>
   15910:	ldr	r2, [sp, #24]
   15914:	ldr	r3, [sp, #28]
   15918:	mov	r7, #1
   1591c:	mov	r4, #0
   15920:	mov	r9, #-2147483648	; 0x80000000
   15924:	subs	r0, r0, r2
   15928:	sbcs	r0, r1, r3
   1592c:	blt	159a0 <__assert_fail@plt+0x4918>
   15930:	umull	r4, r0, r6, r2
   15934:	ldr	r7, [sp, #8]
   15938:	mla	r0, r6, r3, r0
   1593c:	mla	r9, r8, r2, r0
   15940:	cmp	r9, #0
   15944:	blt	159a0 <__assert_fail@plt+0x4918>
   15948:	ldr	r3, [sp, #28]
   1594c:	mvn	r0, #0
   15950:	mvn	r1, #-2147483648	; 0x80000000
   15954:	str	r7, [sp, #8]
   15958:	mvn	r6, #0
   1595c:	mvn	r7, #-2147483648	; 0x80000000
   15960:	bl	16cbc <__assert_fail@plt+0x5c34>
   15964:	ldr	r3, [sp, #24]
   15968:	ldr	ip, [sp, #28]
   1596c:	subs	r0, r0, r4
   15970:	mov	r2, #1
   15974:	mov	r8, r4
   15978:	sbcs	r0, r1, r9
   1597c:	blt	15990 <__assert_fail@plt+0x4908>
   15980:	umull	r6, r0, r8, r3
   15984:	mov	r2, #0
   15988:	mla	r0, r8, ip, r0
   1598c:	mla	r7, r9, r3, r0
   15990:	ldr	r0, [sp, #8]
   15994:	ldr	r9, [sp, #12]
   15998:	orr	r3, r2, r0
   1599c:	b	1647c <__assert_fail@plt+0x53f4>
   159a0:	mov	r0, #0
   159a4:	mov	r1, #-2147483648	; 0x80000000
   159a8:	mov	r2, r4
   159ac:	mov	r3, r9
   159b0:	str	r7, [sp, #8]
   159b4:	mov	r8, r4
   159b8:	bl	16be8 <__assert_fail@plt+0x5b60>
   159bc:	ldr	r3, [sp, #24]
   159c0:	ldr	ip, [sp, #28]
   159c4:	mov	r2, #1
   159c8:	mov	r6, #0
   159cc:	mov	r7, #-2147483648	; 0x80000000
   159d0:	subs	r0, r0, r3
   159d4:	sbcs	r0, r1, ip
   159d8:	bge	15980 <__assert_fail@plt+0x48f8>
   159dc:	b	15990 <__assert_fail@plt+0x4908>
   159e0:	and	r0, r6, r7
   159e4:	cmn	r0, #1
   159e8:	beq	15a24 <__assert_fail@plt+0x499c>
   159ec:	mov	r0, #0
   159f0:	mov	r1, #-2147483648	; 0x80000000
   159f4:	mov	r2, r6
   159f8:	mov	r3, r7
   159fc:	bl	16be8 <__assert_fail@plt+0x5b60>
   15a00:	ldr	r2, [sp, #24]
   15a04:	ldr	r3, [sp, #28]
   15a08:	mov	r4, #1
   15a0c:	mov	r9, #-2147483648	; 0x80000000
   15a10:	subs	r0, r0, r2
   15a14:	sbcs	r0, r1, r3
   15a18:	mov	r0, #0
   15a1c:	str	r0, [sp, #8]
   15a20:	blt	15d34 <__assert_fail@plt+0x4cac>
   15a24:	umull	r1, r0, r6, r2
   15a28:	mov	r4, #0
   15a2c:	mla	r0, r6, r3, r0
   15a30:	str	r1, [sp, #8]
   15a34:	mla	r9, r7, r2, r0
   15a38:	cmp	r9, #0
   15a3c:	blt	15d34 <__assert_fail@plt+0x4cac>
   15a40:	ldr	r3, [sp, #28]
   15a44:	mvn	r0, #0
   15a48:	mvn	r1, #-2147483648	; 0x80000000
   15a4c:	str	r4, [sp, #4]
   15a50:	mvn	r8, #0
   15a54:	mvn	r4, #-2147483648	; 0x80000000
   15a58:	bl	16cbc <__assert_fail@plt+0x5c34>
   15a5c:	ldr	r6, [sp, #8]
   15a60:	ldr	r2, [sp, #24]
   15a64:	ldr	r3, [sp, #28]
   15a68:	mov	r7, #1
   15a6c:	subs	r0, r0, r6
   15a70:	sbcs	r0, r1, r9
   15a74:	bge	15d70 <__assert_fail@plt+0x4ce8>
   15a78:	b	15d88 <__assert_fail@plt+0x4d00>
   15a7c:	and	r0, r6, r7
   15a80:	cmn	r0, #1
   15a84:	beq	15aac <__assert_fail@plt+0x4a24>
   15a88:	mov	r0, #0
   15a8c:	mov	r1, #-2147483648	; 0x80000000
   15a90:	mov	r2, r6
   15a94:	mov	r3, r7
   15a98:	bl	16be8 <__assert_fail@plt+0x5b60>
   15a9c:	ldr	r3, [sp, #28]
   15aa0:	subs	r0, r0, #1024	; 0x400
   15aa4:	sbcs	r0, r1, #0
   15aa8:	blt	15d04 <__assert_fail@plt+0x4c7c>
   15aac:	lsl	r0, r7, #10
   15ab0:	orr	r7, r0, r6, lsr #22
   15ab4:	lsl	r6, r6, #10
   15ab8:	b	1647c <__assert_fail@plt+0x53f4>
   15abc:	and	r0, r6, r7
   15ac0:	cmn	r0, #1
   15ac4:	beq	15b00 <__assert_fail@plt+0x4a78>
   15ac8:	mov	r0, #0
   15acc:	mov	r1, #-2147483648	; 0x80000000
   15ad0:	mov	r2, r6
   15ad4:	mov	r3, r7
   15ad8:	bl	16be8 <__assert_fail@plt+0x5b60>
   15adc:	ldr	r2, [sp, #24]
   15ae0:	ldr	r3, [sp, #28]
   15ae4:	mov	r4, #1
   15ae8:	mov	r9, #-2147483648	; 0x80000000
   15aec:	subs	r0, r0, r2
   15af0:	sbcs	r0, r1, r3
   15af4:	mov	r0, #0
   15af8:	str	r0, [sp, #8]
   15afc:	blt	1604c <__assert_fail@plt+0x4fc4>
   15b00:	umull	r1, r0, r6, r2
   15b04:	mov	r4, #0
   15b08:	mla	r0, r6, r3, r0
   15b0c:	str	r1, [sp, #8]
   15b10:	mla	r9, r7, r2, r0
   15b14:	cmp	r9, #0
   15b18:	blt	1604c <__assert_fail@plt+0x4fc4>
   15b1c:	ldr	r3, [sp, #28]
   15b20:	mvn	r0, #0
   15b24:	mvn	r1, #-2147483648	; 0x80000000
   15b28:	str	r4, [sp, #4]
   15b2c:	mvn	r8, #0
   15b30:	mvn	r4, #-2147483648	; 0x80000000
   15b34:	bl	16cbc <__assert_fail@plt+0x5c34>
   15b38:	ldr	r6, [sp, #8]
   15b3c:	ldr	r2, [sp, #24]
   15b40:	ldr	r3, [sp, #28]
   15b44:	mov	r7, #1
   15b48:	subs	r0, r0, r6
   15b4c:	sbcs	r0, r1, r9
   15b50:	bge	16088 <__assert_fail@plt+0x5000>
   15b54:	b	160a0 <__assert_fail@plt+0x5018>
   15b58:	and	r0, r6, r7
   15b5c:	cmn	r0, #1
   15b60:	beq	15b9c <__assert_fail@plt+0x4b14>
   15b64:	mov	r0, #0
   15b68:	mov	r1, #-2147483648	; 0x80000000
   15b6c:	mov	r2, r6
   15b70:	mov	r3, r7
   15b74:	bl	16be8 <__assert_fail@plt+0x5b60>
   15b78:	ldr	r2, [sp, #24]
   15b7c:	ldr	r3, [sp, #28]
   15b80:	mov	r4, #1
   15b84:	mov	r8, #-2147483648	; 0x80000000
   15b88:	subs	r0, r0, r2
   15b8c:	sbcs	r0, r1, r3
   15b90:	mov	r0, #0
   15b94:	str	r0, [sp, #8]
   15b98:	blt	162c8 <__assert_fail@plt+0x5240>
   15b9c:	umull	r1, r0, r6, r2
   15ba0:	mov	r4, #0
   15ba4:	mla	r0, r6, r3, r0
   15ba8:	str	r1, [sp, #8]
   15bac:	mla	r8, r7, r2, r0
   15bb0:	cmp	r8, #0
   15bb4:	blt	162c8 <__assert_fail@plt+0x5240>
   15bb8:	ldr	r3, [sp, #28]
   15bbc:	mvn	r0, #0
   15bc0:	mvn	r1, #-2147483648	; 0x80000000
   15bc4:	str	r4, [sp, #4]
   15bc8:	mvn	r9, #0
   15bcc:	mvn	r4, #-2147483648	; 0x80000000
   15bd0:	bl	16cbc <__assert_fail@plt+0x5c34>
   15bd4:	ldr	r6, [sp, #8]
   15bd8:	ldr	r2, [sp, #24]
   15bdc:	ldr	r3, [sp, #28]
   15be0:	mov	r7, #1
   15be4:	subs	r0, r0, r6
   15be8:	sbcs	r0, r1, r8
   15bec:	bge	16304 <__assert_fail@plt+0x527c>
   15bf0:	b	1631c <__assert_fail@plt+0x5294>
   15bf4:	and	r0, r6, r7
   15bf8:	cmn	r0, #1
   15bfc:	beq	15c38 <__assert_fail@plt+0x4bb0>
   15c00:	mov	r0, #0
   15c04:	mov	r1, #-2147483648	; 0x80000000
   15c08:	mov	r2, r6
   15c0c:	mov	r3, r7
   15c10:	bl	16be8 <__assert_fail@plt+0x5b60>
   15c14:	ldr	r2, [sp, #24]
   15c18:	ldr	r3, [sp, #28]
   15c1c:	mov	r4, #1
   15c20:	mov	r9, #-2147483648	; 0x80000000
   15c24:	subs	r0, r0, r2
   15c28:	sbcs	r0, r1, r3
   15c2c:	mov	r0, #0
   15c30:	str	r0, [sp, #8]
   15c34:	blt	164e4 <__assert_fail@plt+0x545c>
   15c38:	umull	r1, r0, r6, r2
   15c3c:	mov	r4, #0
   15c40:	mla	r0, r6, r3, r0
   15c44:	str	r1, [sp, #8]
   15c48:	mla	r9, r7, r2, r0
   15c4c:	cmp	r9, #0
   15c50:	blt	164e4 <__assert_fail@plt+0x545c>
   15c54:	ldr	r3, [sp, #28]
   15c58:	mvn	r0, #0
   15c5c:	mvn	r1, #-2147483648	; 0x80000000
   15c60:	str	r4, [sp]
   15c64:	mvn	r8, #-2147483648	; 0x80000000
   15c68:	str	r0, [sp, #4]
   15c6c:	mvn	r0, #0
   15c70:	bl	16cbc <__assert_fail@plt+0x5c34>
   15c74:	ldr	r6, [sp, #8]
   15c78:	ldr	r2, [sp, #24]
   15c7c:	ldr	r3, [sp, #28]
   15c80:	mov	r7, #1
   15c84:	subs	r0, r0, r6
   15c88:	sbcs	r0, r1, r9
   15c8c:	bge	16524 <__assert_fail@plt+0x549c>
   15c90:	b	16540 <__assert_fail@plt+0x54b8>
   15c94:	and	r0, r6, r7
   15c98:	cmn	r0, #1
   15c9c:	beq	15cc4 <__assert_fail@plt+0x4c3c>
   15ca0:	mov	r0, #0
   15ca4:	mov	r1, #-2147483648	; 0x80000000
   15ca8:	mov	r2, r6
   15cac:	mov	r3, r7
   15cb0:	bl	16be8 <__assert_fail@plt+0x5b60>
   15cb4:	ldr	r3, [sp, #28]
   15cb8:	subs	r0, r0, #512	; 0x200
   15cbc:	sbcs	r0, r1, #0
   15cc0:	blt	15d04 <__assert_fail@plt+0x4c7c>
   15cc4:	lsl	r0, r7, #9
   15cc8:	orr	r7, r0, r6, lsr #23
   15ccc:	lsl	r6, r6, #9
   15cd0:	b	1647c <__assert_fail@plt+0x53f4>
   15cd4:	and	r0, r6, r7
   15cd8:	cmn	r0, #1
   15cdc:	beq	15d24 <__assert_fail@plt+0x4c9c>
   15ce0:	mov	r0, #0
   15ce4:	mov	r1, #-2147483648	; 0x80000000
   15ce8:	mov	r2, r6
   15cec:	mov	r3, r7
   15cf0:	bl	16be8 <__assert_fail@plt+0x5b60>
   15cf4:	ldr	r3, [sp, #28]
   15cf8:	subs	r0, r0, #2
   15cfc:	sbcs	r0, r1, #0
   15d00:	bge	15d24 <__assert_fail@plt+0x4c9c>
   15d04:	mvn	r0, #-2147483648	; 0x80000000
   15d08:	cmp	r7, #0
   15d0c:	mvn	r6, #0
   15d10:	mov	r3, #1
   15d14:	movlt	r0, #-2147483648	; 0x80000000
   15d18:	movwlt	r6, #0
   15d1c:	mov	r7, r0
   15d20:	b	1647c <__assert_fail@plt+0x53f4>
   15d24:	lsl	r0, r7, #1
   15d28:	orr	r7, r0, r6, lsr #31
   15d2c:	lsl	r6, r6, #1
   15d30:	b	1647c <__assert_fail@plt+0x53f4>
   15d34:	ldr	r6, [sp, #8]
   15d38:	mov	r0, #0
   15d3c:	mov	r1, #-2147483648	; 0x80000000
   15d40:	mov	r3, r9
   15d44:	str	r4, [sp, #4]
   15d48:	mov	r2, r6
   15d4c:	bl	16be8 <__assert_fail@plt+0x5b60>
   15d50:	ldr	r2, [sp, #24]
   15d54:	ldr	r3, [sp, #28]
   15d58:	mov	r7, #1
   15d5c:	mov	r8, #0
   15d60:	mov	r4, #-2147483648	; 0x80000000
   15d64:	subs	r0, r0, r2
   15d68:	sbcs	r0, r1, r3
   15d6c:	blt	15dc0 <__assert_fail@plt+0x4d38>
   15d70:	umull	r8, r0, r6, r2
   15d74:	ldr	r7, [sp, #4]
   15d78:	mla	r0, r6, r3, r0
   15d7c:	mla	r4, r9, r2, r0
   15d80:	cmp	r4, #0
   15d84:	blt	15dc0 <__assert_fail@plt+0x4d38>
   15d88:	ldr	r3, [sp, #28]
   15d8c:	mvn	r0, #0
   15d90:	mvn	r1, #-2147483648	; 0x80000000
   15d94:	str	r7, [sp, #8]
   15d98:	mvn	r7, #0
   15d9c:	mvn	r9, #-2147483648	; 0x80000000
   15da0:	bl	16cbc <__assert_fail@plt+0x5c34>
   15da4:	ldr	r2, [sp, #24]
   15da8:	ldr	r3, [sp, #28]
   15dac:	subs	r0, r0, r8
   15db0:	mov	r6, #1
   15db4:	sbcs	r0, r1, r4
   15db8:	bge	15df8 <__assert_fail@plt+0x4d70>
   15dbc:	b	15e10 <__assert_fail@plt+0x4d88>
   15dc0:	mov	r0, #0
   15dc4:	mov	r1, #-2147483648	; 0x80000000
   15dc8:	mov	r2, r8
   15dcc:	mov	r3, r4
   15dd0:	str	r7, [sp, #8]
   15dd4:	bl	16be8 <__assert_fail@plt+0x5b60>
   15dd8:	ldr	r2, [sp, #24]
   15ddc:	ldr	r3, [sp, #28]
   15de0:	mov	r6, #1
   15de4:	mov	r7, #0
   15de8:	mov	r9, #-2147483648	; 0x80000000
   15dec:	subs	r0, r0, r2
   15df0:	sbcs	r0, r1, r3
   15df4:	blt	15e50 <__assert_fail@plt+0x4dc8>
   15df8:	umull	r7, r0, r8, r2
   15dfc:	ldr	r6, [sp, #8]
   15e00:	mla	r0, r8, r3, r0
   15e04:	mla	r9, r4, r2, r0
   15e08:	cmp	r9, #0
   15e0c:	blt	15e50 <__assert_fail@plt+0x4dc8>
   15e10:	ldr	r3, [sp, #28]
   15e14:	mvn	r0, #0
   15e18:	mvn	r1, #-2147483648	; 0x80000000
   15e1c:	str	r6, [sp, #8]
   15e20:	mvn	r8, #0
   15e24:	mvn	r4, #-2147483648	; 0x80000000
   15e28:	bl	16cbc <__assert_fail@plt+0x5c34>
   15e2c:	ldr	r2, [sp, #24]
   15e30:	ldr	r3, [sp, #28]
   15e34:	subs	r0, r0, r7
   15e38:	sbcs	r0, r1, r9
   15e3c:	bge	15e94 <__assert_fail@plt+0x4e0c>
   15e40:	mov	r0, #1
   15e44:	mov	r6, #0
   15e48:	str	r0, [sp, #8]
   15e4c:	b	15eac <__assert_fail@plt+0x4e24>
   15e50:	mov	r0, #0
   15e54:	mov	r1, #-2147483648	; 0x80000000
   15e58:	mov	r2, r7
   15e5c:	mov	r3, r9
   15e60:	str	r6, [sp, #8]
   15e64:	bl	16be8 <__assert_fail@plt+0x5b60>
   15e68:	ldr	r2, [sp, #24]
   15e6c:	ldr	r3, [sp, #28]
   15e70:	subs	r0, r0, r2
   15e74:	sbcs	r0, r1, r3
   15e78:	bge	15e94 <__assert_fail@plt+0x4e0c>
   15e7c:	mov	r0, #1
   15e80:	mov	r8, #0
   15e84:	mov	r4, #-2147483648	; 0x80000000
   15e88:	mov	r6, #0
   15e8c:	str	r0, [sp, #8]
   15e90:	b	15ee4 <__assert_fail@plt+0x4e5c>
   15e94:	umull	r8, r0, r7, r2
   15e98:	mov	r6, #0
   15e9c:	mla	r0, r7, r3, r0
   15ea0:	mla	r4, r9, r2, r0
   15ea4:	cmp	r4, #0
   15ea8:	blt	15ee4 <__assert_fail@plt+0x4e5c>
   15eac:	ldr	r3, [sp, #28]
   15eb0:	mvn	r0, #0
   15eb4:	mvn	r1, #-2147483648	; 0x80000000
   15eb8:	mvn	r9, #0
   15ebc:	mvn	r7, #-2147483648	; 0x80000000
   15ec0:	bl	16cbc <__assert_fail@plt+0x5c34>
   15ec4:	ldr	r2, [sp, #24]
   15ec8:	ldr	r3, [sp, #28]
   15ecc:	subs	r0, r0, r8
   15ed0:	sbcs	r0, r1, r4
   15ed4:	bge	15f20 <__assert_fail@plt+0x4e98>
   15ed8:	mov	r0, #1
   15edc:	str	r0, [sp, #8]
   15ee0:	b	15f34 <__assert_fail@plt+0x4eac>
   15ee4:	mov	r0, #0
   15ee8:	mov	r1, #-2147483648	; 0x80000000
   15eec:	mov	r2, r8
   15ef0:	mov	r3, r4
   15ef4:	bl	16be8 <__assert_fail@plt+0x5b60>
   15ef8:	ldr	r2, [sp, #24]
   15efc:	ldr	r3, [sp, #28]
   15f00:	subs	r0, r0, r2
   15f04:	sbcs	r0, r1, r3
   15f08:	bge	15f20 <__assert_fail@plt+0x4e98>
   15f0c:	mov	r0, #1
   15f10:	mov	r9, #0
   15f14:	mov	r7, #-2147483648	; 0x80000000
   15f18:	str	r0, [sp, #8]
   15f1c:	b	15f70 <__assert_fail@plt+0x4ee8>
   15f20:	umull	r9, r0, r8, r2
   15f24:	mla	r0, r8, r3, r0
   15f28:	mla	r7, r4, r2, r0
   15f2c:	cmp	r7, #0
   15f30:	blt	15f70 <__assert_fail@plt+0x4ee8>
   15f34:	ldr	r3, [sp, #28]
   15f38:	mvn	r0, #0
   15f3c:	mvn	r1, #-2147483648	; 0x80000000
   15f40:	mvn	r8, #0
   15f44:	mvn	r4, #-2147483648	; 0x80000000
   15f48:	bl	16cbc <__assert_fail@plt+0x5c34>
   15f4c:	ldr	r2, [sp, #24]
   15f50:	ldr	r3, [sp, #28]
   15f54:	subs	r0, r0, r9
   15f58:	sbcs	r0, r1, r7
   15f5c:	bge	15fb0 <__assert_fail@plt+0x4f28>
   15f60:	ldr	r9, [sp, #12]
   15f64:	mov	r0, #1
   15f68:	str	r0, [sp, #8]
   15f6c:	b	15fc8 <__assert_fail@plt+0x4f40>
   15f70:	mov	r0, #0
   15f74:	mov	r1, #-2147483648	; 0x80000000
   15f78:	mov	r2, r9
   15f7c:	mov	r3, r7
   15f80:	bl	16be8 <__assert_fail@plt+0x5b60>
   15f84:	ldr	r2, [sp, #24]
   15f88:	ldr	r3, [sp, #28]
   15f8c:	subs	r0, r0, r2
   15f90:	sbcs	r0, r1, r3
   15f94:	bge	15fb0 <__assert_fail@plt+0x4f28>
   15f98:	ldr	r9, [sp, #12]
   15f9c:	mov	r0, #1
   15fa0:	mov	r8, #0
   15fa4:	mov	r4, #-2147483648	; 0x80000000
   15fa8:	str	r0, [sp, #8]
   15fac:	b	16018 <__assert_fail@plt+0x4f90>
   15fb0:	umull	r8, r0, r9, r2
   15fb4:	mla	r0, r9, r3, r0
   15fb8:	ldr	r9, [sp, #12]
   15fbc:	mla	r4, r7, r2, r0
   15fc0:	cmp	r4, #0
   15fc4:	blt	16018 <__assert_fail@plt+0x4f90>
   15fc8:	ldr	r3, [sp, #28]
   15fcc:	mvn	r0, #0
   15fd0:	mvn	r1, #-2147483648	; 0x80000000
   15fd4:	mvn	r6, #0
   15fd8:	bl	16cbc <__assert_fail@plt+0x5c34>
   15fdc:	ldr	r7, [sp, #24]
   15fe0:	ldr	r3, [sp, #28]
   15fe4:	subs	r0, r0, r8
   15fe8:	mov	r2, #1
   15fec:	sbcs	r0, r1, r4
   15ff0:	mvn	r0, #-2147483648	; 0x80000000
   15ff4:	blt	16008 <__assert_fail@plt+0x4f80>
   15ff8:	umull	r6, r0, r8, r7
   15ffc:	mov	r2, #0
   16000:	mla	r0, r8, r3, r0
   16004:	mla	r0, r4, r7, r0
   16008:	ldr	r1, [sp, #8]
   1600c:	mov	r7, r0
   16010:	orr	r3, r2, r1
   16014:	b	1647c <__assert_fail@plt+0x53f4>
   16018:	mov	r0, #0
   1601c:	mov	r1, #-2147483648	; 0x80000000
   16020:	mov	r2, r8
   16024:	mov	r3, r4
   16028:	bl	16be8 <__assert_fail@plt+0x5b60>
   1602c:	ldr	r7, [sp, #24]
   16030:	ldr	r3, [sp, #28]
   16034:	mov	r2, #1
   16038:	subs	r0, r0, r7
   1603c:	sbcs	r0, r1, r3
   16040:	mov	r0, #-2147483648	; 0x80000000
   16044:	bge	15ff8 <__assert_fail@plt+0x4f70>
   16048:	b	16008 <__assert_fail@plt+0x4f80>
   1604c:	ldr	r6, [sp, #8]
   16050:	mov	r0, #0
   16054:	mov	r1, #-2147483648	; 0x80000000
   16058:	mov	r3, r9
   1605c:	str	r4, [sp, #4]
   16060:	mov	r2, r6
   16064:	bl	16be8 <__assert_fail@plt+0x5b60>
   16068:	ldr	r2, [sp, #24]
   1606c:	ldr	r3, [sp, #28]
   16070:	mov	r7, #1
   16074:	mov	r8, #0
   16078:	mov	r4, #-2147483648	; 0x80000000
   1607c:	subs	r0, r0, r2
   16080:	sbcs	r0, r1, r3
   16084:	blt	160dc <__assert_fail@plt+0x5054>
   16088:	umull	r8, r0, r6, r2
   1608c:	ldr	r7, [sp, #4]
   16090:	mla	r0, r6, r3, r0
   16094:	mla	r4, r9, r2, r0
   16098:	cmp	r4, #0
   1609c:	blt	160dc <__assert_fail@plt+0x5054>
   160a0:	ldr	r3, [sp, #28]
   160a4:	mvn	r0, #0
   160a8:	mvn	r1, #-2147483648	; 0x80000000
   160ac:	str	r7, [sp, #4]
   160b0:	mvn	r7, #0
   160b4:	mvn	r9, #-2147483648	; 0x80000000
   160b8:	bl	16cbc <__assert_fail@plt+0x5c34>
   160bc:	ldr	r2, [sp, #24]
   160c0:	ldr	r3, [sp, #28]
   160c4:	subs	r0, r0, r8
   160c8:	mov	r6, #1
   160cc:	sbcs	r0, r1, r4
   160d0:	str	r6, [sp, #8]
   160d4:	bge	16118 <__assert_fail@plt+0x5090>
   160d8:	b	16134 <__assert_fail@plt+0x50ac>
   160dc:	mov	r0, #0
   160e0:	mov	r1, #-2147483648	; 0x80000000
   160e4:	mov	r2, r8
   160e8:	mov	r3, r4
   160ec:	str	r7, [sp, #4]
   160f0:	bl	16be8 <__assert_fail@plt+0x5b60>
   160f4:	ldr	r2, [sp, #24]
   160f8:	ldr	r3, [sp, #28]
   160fc:	mov	r7, #1
   16100:	mov	r9, #-2147483648	; 0x80000000
   16104:	str	r7, [sp, #8]
   16108:	mov	r7, #0
   1610c:	subs	r0, r0, r2
   16110:	sbcs	r0, r1, r3
   16114:	blt	1616c <__assert_fail@plt+0x50e4>
   16118:	umull	r7, r0, r8, r2
   1611c:	mla	r0, r8, r3, r0
   16120:	mla	r9, r4, r2, r0
   16124:	ldr	r0, [sp, #4]
   16128:	cmp	r9, #0
   1612c:	str	r0, [sp, #8]
   16130:	blt	1616c <__assert_fail@plt+0x50e4>
   16134:	ldr	r3, [sp, #28]
   16138:	mvn	r0, #0
   1613c:	mvn	r1, #-2147483648	; 0x80000000
   16140:	mvn	r4, #0
   16144:	mvn	r8, #-2147483648	; 0x80000000
   16148:	bl	16cbc <__assert_fail@plt+0x5c34>
   1614c:	ldr	r2, [sp, #24]
   16150:	ldr	r3, [sp, #28]
   16154:	subs	r0, r0, r7
   16158:	sbcs	r0, r1, r9
   1615c:	bge	161a8 <__assert_fail@plt+0x5120>
   16160:	mov	r0, #1
   16164:	str	r0, [sp, #8]
   16168:	b	161bc <__assert_fail@plt+0x5134>
   1616c:	mov	r0, #0
   16170:	mov	r1, #-2147483648	; 0x80000000
   16174:	mov	r2, r7
   16178:	mov	r3, r9
   1617c:	bl	16be8 <__assert_fail@plt+0x5b60>
   16180:	ldr	r2, [sp, #24]
   16184:	ldr	r3, [sp, #28]
   16188:	subs	r0, r0, r2
   1618c:	sbcs	r0, r1, r3
   16190:	bge	161a8 <__assert_fail@plt+0x5120>
   16194:	mov	r0, #1
   16198:	mov	r4, #0
   1619c:	mov	r8, #-2147483648	; 0x80000000
   161a0:	str	r0, [sp, #8]
   161a4:	b	161f0 <__assert_fail@plt+0x5168>
   161a8:	umull	r4, r0, r7, r2
   161ac:	mla	r0, r7, r3, r0
   161b0:	mla	r8, r9, r2, r0
   161b4:	cmp	r8, #0
   161b8:	blt	161f0 <__assert_fail@plt+0x5168>
   161bc:	ldr	r3, [sp, #28]
   161c0:	mvn	r0, #0
   161c4:	mvn	r1, #-2147483648	; 0x80000000
   161c8:	mvn	r6, #0
   161cc:	mvn	r9, #-2147483648	; 0x80000000
   161d0:	bl	16cbc <__assert_fail@plt+0x5c34>
   161d4:	ldr	r2, [sp, #24]
   161d8:	ldr	r3, [sp, #28]
   161dc:	subs	r0, r0, r4
   161e0:	sbcs	r0, r1, r8
   161e4:	bge	16228 <__assert_fail@plt+0x51a0>
   161e8:	mov	r8, #1
   161ec:	b	16240 <__assert_fail@plt+0x51b8>
   161f0:	mov	r0, #0
   161f4:	mov	r1, #-2147483648	; 0x80000000
   161f8:	mov	r2, r4
   161fc:	mov	r3, r8
   16200:	bl	16be8 <__assert_fail@plt+0x5b60>
   16204:	ldr	r2, [sp, #24]
   16208:	ldr	r3, [sp, #28]
   1620c:	subs	r0, r0, r2
   16210:	sbcs	r0, r1, r3
   16214:	bge	16228 <__assert_fail@plt+0x51a0>
   16218:	mov	r8, #1
   1621c:	mov	r6, #0
   16220:	mov	r9, #-2147483648	; 0x80000000
   16224:	b	16290 <__assert_fail@plt+0x5208>
   16228:	umull	r6, r0, r4, r2
   1622c:	mla	r0, r4, r3, r0
   16230:	mla	r9, r8, r2, r0
   16234:	ldr	r8, [sp, #8]
   16238:	cmp	r9, #0
   1623c:	blt	16290 <__assert_fail@plt+0x5208>
   16240:	ldr	r3, [sp, #28]
   16244:	mvn	r0, #0
   16248:	mvn	r1, #-2147483648	; 0x80000000
   1624c:	mvn	r4, #0
   16250:	mvn	r7, #-2147483648	; 0x80000000
   16254:	bl	16cbc <__assert_fail@plt+0x5c34>
   16258:	ldr	r3, [sp, #24]
   1625c:	ldr	ip, [sp, #28]
   16260:	subs	r0, r0, r6
   16264:	mov	r2, #1
   16268:	sbcs	r0, r1, r9
   1626c:	blt	16280 <__assert_fail@plt+0x51f8>
   16270:	umull	r4, r0, r6, r3
   16274:	mov	r2, #0
   16278:	mla	r0, r6, ip, r0
   1627c:	mla	r7, r9, r3, r0
   16280:	ldr	r9, [sp, #12]
   16284:	orr	r3, r2, r8
   16288:	mov	r6, r4
   1628c:	b	1647c <__assert_fail@plt+0x53f4>
   16290:	mov	r0, #0
   16294:	mov	r1, #-2147483648	; 0x80000000
   16298:	mov	r2, r6
   1629c:	mov	r3, r9
   162a0:	bl	16be8 <__assert_fail@plt+0x5b60>
   162a4:	ldr	r3, [sp, #24]
   162a8:	ldr	ip, [sp, #28]
   162ac:	mov	r2, #1
   162b0:	mov	r4, #0
   162b4:	mov	r7, #-2147483648	; 0x80000000
   162b8:	subs	r0, r0, r3
   162bc:	sbcs	r0, r1, ip
   162c0:	bge	16270 <__assert_fail@plt+0x51e8>
   162c4:	b	16280 <__assert_fail@plt+0x51f8>
   162c8:	ldr	r6, [sp, #8]
   162cc:	mov	r0, #0
   162d0:	mov	r1, #-2147483648	; 0x80000000
   162d4:	mov	r3, r8
   162d8:	str	r4, [sp, #4]
   162dc:	mov	r2, r6
   162e0:	bl	16be8 <__assert_fail@plt+0x5b60>
   162e4:	ldr	r2, [sp, #24]
   162e8:	ldr	r3, [sp, #28]
   162ec:	mov	r7, #1
   162f0:	mov	r9, #0
   162f4:	mov	r4, #-2147483648	; 0x80000000
   162f8:	subs	r0, r0, r2
   162fc:	sbcs	r0, r1, r3
   16300:	blt	16358 <__assert_fail@plt+0x52d0>
   16304:	umull	r9, r0, r6, r2
   16308:	ldr	r7, [sp, #4]
   1630c:	mla	r0, r6, r3, r0
   16310:	mla	r4, r8, r2, r0
   16314:	cmp	r4, #0
   16318:	blt	16358 <__assert_fail@plt+0x52d0>
   1631c:	ldr	r3, [sp, #28]
   16320:	mvn	r0, #0
   16324:	mvn	r1, #-2147483648	; 0x80000000
   16328:	str	r7, [sp, #4]
   1632c:	mvn	r8, #0
   16330:	mvn	r7, #-2147483648	; 0x80000000
   16334:	bl	16cbc <__assert_fail@plt+0x5c34>
   16338:	ldr	r2, [sp, #24]
   1633c:	ldr	r3, [sp, #28]
   16340:	subs	r0, r0, r9
   16344:	mov	r6, #1
   16348:	sbcs	r0, r1, r4
   1634c:	str	r6, [sp, #8]
   16350:	bge	16394 <__assert_fail@plt+0x530c>
   16354:	b	163b0 <__assert_fail@plt+0x5328>
   16358:	mov	r0, #0
   1635c:	mov	r1, #-2147483648	; 0x80000000
   16360:	mov	r2, r9
   16364:	mov	r3, r4
   16368:	str	r7, [sp, #4]
   1636c:	bl	16be8 <__assert_fail@plt+0x5b60>
   16370:	ldr	r2, [sp, #24]
   16374:	ldr	r3, [sp, #28]
   16378:	mov	r7, #1
   1637c:	mov	r8, #0
   16380:	str	r7, [sp, #8]
   16384:	mov	r7, #-2147483648	; 0x80000000
   16388:	subs	r0, r0, r2
   1638c:	sbcs	r0, r1, r3
   16390:	blt	163e4 <__assert_fail@plt+0x535c>
   16394:	umull	r8, r0, r9, r2
   16398:	mla	r0, r9, r3, r0
   1639c:	mla	r7, r4, r2, r0
   163a0:	ldr	r0, [sp, #4]
   163a4:	cmp	r7, #0
   163a8:	str	r0, [sp, #8]
   163ac:	blt	163e4 <__assert_fail@plt+0x535c>
   163b0:	ldr	r3, [sp, #28]
   163b4:	mvn	r0, #0
   163b8:	mvn	r1, #-2147483648	; 0x80000000
   163bc:	mvn	r4, #0
   163c0:	mvn	r9, #-2147483648	; 0x80000000
   163c4:	bl	16cbc <__assert_fail@plt+0x5c34>
   163c8:	ldr	r2, [sp, #24]
   163cc:	ldr	r3, [sp, #28]
   163d0:	subs	r0, r0, r8
   163d4:	sbcs	r0, r1, r7
   163d8:	bge	1641c <__assert_fail@plt+0x5394>
   163dc:	mov	r8, #1
   163e0:	b	16434 <__assert_fail@plt+0x53ac>
   163e4:	mov	r0, #0
   163e8:	mov	r1, #-2147483648	; 0x80000000
   163ec:	mov	r2, r8
   163f0:	mov	r3, r7
   163f4:	bl	16be8 <__assert_fail@plt+0x5b60>
   163f8:	ldr	r2, [sp, #24]
   163fc:	ldr	r3, [sp, #28]
   16400:	subs	r0, r0, r2
   16404:	sbcs	r0, r1, r3
   16408:	bge	1641c <__assert_fail@plt+0x5394>
   1640c:	mov	r8, #1
   16410:	mov	r4, #0
   16414:	mov	r9, #-2147483648	; 0x80000000
   16418:	b	164ac <__assert_fail@plt+0x5424>
   1641c:	umull	r4, r0, r8, r2
   16420:	mla	r0, r8, r3, r0
   16424:	ldr	r8, [sp, #8]
   16428:	mla	r9, r7, r2, r0
   1642c:	cmp	r9, #0
   16430:	blt	164ac <__assert_fail@plt+0x5424>
   16434:	ldr	r3, [sp, #28]
   16438:	mvn	r0, #0
   1643c:	mvn	r1, #-2147483648	; 0x80000000
   16440:	mvn	r6, #0
   16444:	mvn	r7, #-2147483648	; 0x80000000
   16448:	bl	16cbc <__assert_fail@plt+0x5c34>
   1644c:	ldr	r3, [sp, #24]
   16450:	ldr	ip, [sp, #28]
   16454:	subs	r0, r0, r4
   16458:	mov	r2, #1
   1645c:	sbcs	r0, r1, r9
   16460:	blt	16474 <__assert_fail@plt+0x53ec>
   16464:	umull	r6, r0, r4, r3
   16468:	mov	r2, #0
   1646c:	mla	r0, r4, ip, r0
   16470:	mla	r7, r9, r3, r0
   16474:	ldr	r9, [sp, #12]
   16478:	orr	r3, r2, r8
   1647c:	ldr	r1, [sp, #20]
   16480:	ldr	r2, [sp, #16]
   16484:	orr	r5, r3, r5
   16488:	add	r0, r1, r2
   1648c:	str	r0, [sl]
   16490:	ldrb	r0, [r1, r2]
   16494:	cmp	r0, #0
   16498:	orrne	r5, r5, #2
   1649c:	strd	r6, [r9]
   164a0:	mov	r0, r5
   164a4:	sub	sp, fp, #28
   164a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164ac:	mov	r0, #0
   164b0:	mov	r1, #-2147483648	; 0x80000000
   164b4:	mov	r2, r4
   164b8:	mov	r3, r9
   164bc:	bl	16be8 <__assert_fail@plt+0x5b60>
   164c0:	ldr	r3, [sp, #24]
   164c4:	ldr	ip, [sp, #28]
   164c8:	mov	r2, #1
   164cc:	mov	r6, #0
   164d0:	mov	r7, #-2147483648	; 0x80000000
   164d4:	subs	r0, r0, r3
   164d8:	sbcs	r0, r1, ip
   164dc:	bge	16464 <__assert_fail@plt+0x53dc>
   164e0:	b	16474 <__assert_fail@plt+0x53ec>
   164e4:	ldr	r6, [sp, #8]
   164e8:	mov	r0, #0
   164ec:	mov	r1, #-2147483648	; 0x80000000
   164f0:	mov	r3, r9
   164f4:	str	r4, [sp]
   164f8:	mov	r2, r6
   164fc:	bl	16be8 <__assert_fail@plt+0x5b60>
   16500:	ldr	r2, [sp, #24]
   16504:	ldr	r3, [sp, #28]
   16508:	mov	r7, #1
   1650c:	mov	r8, #-2147483648	; 0x80000000
   16510:	subs	r0, r0, r2
   16514:	sbcs	r0, r1, r3
   16518:	mov	r0, #0
   1651c:	str	r0, [sp, #4]
   16520:	blt	16580 <__assert_fail@plt+0x54f8>
   16524:	umull	r1, r0, r6, r2
   16528:	ldr	r7, [sp]
   1652c:	mla	r0, r6, r3, r0
   16530:	str	r1, [sp, #4]
   16534:	mla	r8, r9, r2, r0
   16538:	cmp	r8, #0
   1653c:	blt	16580 <__assert_fail@plt+0x54f8>
   16540:	ldr	r3, [sp, #28]
   16544:	mvn	r0, #0
   16548:	mvn	r1, #-2147483648	; 0x80000000
   1654c:	str	r7, [sp]
   16550:	mvn	r7, #0
   16554:	mvn	r4, #-2147483648	; 0x80000000
   16558:	bl	16cbc <__assert_fail@plt+0x5c34>
   1655c:	mov	r6, #1
   16560:	ldr	r2, [sp, #24]
   16564:	ldr	r3, [sp, #28]
   16568:	str	r6, [sp, #8]
   1656c:	ldr	r6, [sp, #4]
   16570:	subs	r0, r0, r6
   16574:	sbcs	r0, r1, r8
   16578:	bge	165c0 <__assert_fail@plt+0x5538>
   1657c:	b	165dc <__assert_fail@plt+0x5554>
   16580:	ldr	r6, [sp, #4]
   16584:	mov	r0, #0
   16588:	mov	r1, #-2147483648	; 0x80000000
   1658c:	mov	r3, r8
   16590:	str	r7, [sp]
   16594:	mov	r2, r6
   16598:	bl	16be8 <__assert_fail@plt+0x5b60>
   1659c:	ldr	r2, [sp, #24]
   165a0:	ldr	r3, [sp, #28]
   165a4:	mov	r7, #1
   165a8:	mov	r4, #-2147483648	; 0x80000000
   165ac:	str	r7, [sp, #8]
   165b0:	mov	r7, #0
   165b4:	subs	r0, r0, r2
   165b8:	sbcs	r0, r1, r3
   165bc:	blt	16614 <__assert_fail@plt+0x558c>
   165c0:	umull	r7, r0, r6, r2
   165c4:	mla	r0, r6, r3, r0
   165c8:	mla	r4, r8, r2, r0
   165cc:	ldr	r0, [sp]
   165d0:	cmp	r4, #0
   165d4:	str	r0, [sp, #8]
   165d8:	blt	16614 <__assert_fail@plt+0x558c>
   165dc:	ldr	r3, [sp, #28]
   165e0:	mvn	r0, #0
   165e4:	mvn	r1, #-2147483648	; 0x80000000
   165e8:	mvn	r9, #0
   165ec:	mvn	r8, #-2147483648	; 0x80000000
   165f0:	bl	16cbc <__assert_fail@plt+0x5c34>
   165f4:	ldr	r2, [sp, #24]
   165f8:	ldr	r3, [sp, #28]
   165fc:	subs	r0, r0, r7
   16600:	sbcs	r0, r1, r4
   16604:	bge	16650 <__assert_fail@plt+0x55c8>
   16608:	mov	r0, #1
   1660c:	str	r0, [sp, #8]
   16610:	b	16664 <__assert_fail@plt+0x55dc>
   16614:	mov	r0, #0
   16618:	mov	r1, #-2147483648	; 0x80000000
   1661c:	mov	r2, r7
   16620:	mov	r3, r4
   16624:	bl	16be8 <__assert_fail@plt+0x5b60>
   16628:	ldr	r2, [sp, #24]
   1662c:	ldr	r3, [sp, #28]
   16630:	subs	r0, r0, r2
   16634:	sbcs	r0, r1, r3
   16638:	bge	16650 <__assert_fail@plt+0x55c8>
   1663c:	mov	r0, #1
   16640:	mov	r9, #0
   16644:	mov	r8, #-2147483648	; 0x80000000
   16648:	str	r0, [sp, #8]
   1664c:	b	1669c <__assert_fail@plt+0x5614>
   16650:	umull	r9, r0, r7, r2
   16654:	mla	r0, r7, r3, r0
   16658:	mla	r8, r4, r2, r0
   1665c:	cmp	r8, #0
   16660:	blt	1669c <__assert_fail@plt+0x5614>
   16664:	ldr	r3, [sp, #28]
   16668:	mvn	r0, #0
   1666c:	mvn	r1, #-2147483648	; 0x80000000
   16670:	mvn	r4, #0
   16674:	mvn	r7, #-2147483648	; 0x80000000
   16678:	bl	16cbc <__assert_fail@plt+0x5c34>
   1667c:	ldr	r2, [sp, #24]
   16680:	ldr	r3, [sp, #28]
   16684:	subs	r0, r0, r9
   16688:	sbcs	r0, r1, r8
   1668c:	bge	166d8 <__assert_fail@plt+0x5650>
   16690:	mov	r0, #1
   16694:	str	r0, [sp, #8]
   16698:	b	166ec <__assert_fail@plt+0x5664>
   1669c:	mov	r0, #0
   166a0:	mov	r1, #-2147483648	; 0x80000000
   166a4:	mov	r2, r9
   166a8:	mov	r3, r8
   166ac:	bl	16be8 <__assert_fail@plt+0x5b60>
   166b0:	ldr	r2, [sp, #24]
   166b4:	ldr	r3, [sp, #28]
   166b8:	subs	r0, r0, r2
   166bc:	sbcs	r0, r1, r3
   166c0:	bge	166d8 <__assert_fail@plt+0x5650>
   166c4:	mov	r0, #1
   166c8:	mov	r4, #0
   166cc:	mov	r7, #-2147483648	; 0x80000000
   166d0:	str	r0, [sp, #8]
   166d4:	b	16724 <__assert_fail@plt+0x569c>
   166d8:	umull	r4, r0, r9, r2
   166dc:	mla	r0, r9, r3, r0
   166e0:	mla	r7, r8, r2, r0
   166e4:	cmp	r7, #0
   166e8:	blt	16724 <__assert_fail@plt+0x569c>
   166ec:	ldr	r3, [sp, #28]
   166f0:	mvn	r0, #0
   166f4:	mvn	r1, #-2147483648	; 0x80000000
   166f8:	mvn	r8, #0
   166fc:	mvn	r9, #-2147483648	; 0x80000000
   16700:	bl	16cbc <__assert_fail@plt+0x5c34>
   16704:	ldr	r2, [sp, #24]
   16708:	ldr	r3, [sp, #28]
   1670c:	subs	r0, r0, r4
   16710:	sbcs	r0, r1, r7
   16714:	bge	16760 <__assert_fail@plt+0x56d8>
   16718:	mov	r0, #1
   1671c:	str	r0, [sp, #8]
   16720:	b	16774 <__assert_fail@plt+0x56ec>
   16724:	mov	r0, #0
   16728:	mov	r1, #-2147483648	; 0x80000000
   1672c:	mov	r2, r4
   16730:	mov	r3, r7
   16734:	bl	16be8 <__assert_fail@plt+0x5b60>
   16738:	ldr	r2, [sp, #24]
   1673c:	ldr	r3, [sp, #28]
   16740:	subs	r0, r0, r2
   16744:	sbcs	r0, r1, r3
   16748:	bge	16760 <__assert_fail@plt+0x56d8>
   1674c:	mov	r0, #1
   16750:	mov	r8, #0
   16754:	mov	r9, #-2147483648	; 0x80000000
   16758:	str	r0, [sp, #8]
   1675c:	b	167b0 <__assert_fail@plt+0x5728>
   16760:	umull	r8, r0, r4, r2
   16764:	mla	r0, r4, r3, r0
   16768:	mla	r9, r7, r2, r0
   1676c:	cmp	r9, #0
   16770:	blt	167b0 <__assert_fail@plt+0x5728>
   16774:	ldr	r3, [sp, #28]
   16778:	mvn	r0, #0
   1677c:	mvn	r1, #-2147483648	; 0x80000000
   16780:	mvn	r4, #0
   16784:	mvn	r6, #-2147483648	; 0x80000000
   16788:	bl	16cbc <__assert_fail@plt+0x5c34>
   1678c:	ldr	r2, [sp, #24]
   16790:	ldr	r3, [sp, #28]
   16794:	subs	r0, r0, r8
   16798:	sbcs	r0, r1, r9
   1679c:	bge	167f0 <__assert_fail@plt+0x5768>
   167a0:	ldr	r9, [sp, #12]
   167a4:	mov	r0, #1
   167a8:	str	r0, [sp, #8]
   167ac:	b	16808 <__assert_fail@plt+0x5780>
   167b0:	mov	r0, #0
   167b4:	mov	r1, #-2147483648	; 0x80000000
   167b8:	mov	r2, r8
   167bc:	mov	r3, r9
   167c0:	bl	16be8 <__assert_fail@plt+0x5b60>
   167c4:	ldr	r2, [sp, #24]
   167c8:	ldr	r3, [sp, #28]
   167cc:	subs	r0, r0, r2
   167d0:	sbcs	r0, r1, r3
   167d4:	bge	167f0 <__assert_fail@plt+0x5768>
   167d8:	ldr	r9, [sp, #12]
   167dc:	mov	r0, #1
   167e0:	mov	r4, #0
   167e4:	mov	r6, #-2147483648	; 0x80000000
   167e8:	str	r0, [sp, #8]
   167ec:	b	16854 <__assert_fail@plt+0x57cc>
   167f0:	umull	r4, r0, r8, r2
   167f4:	mla	r0, r8, r3, r0
   167f8:	mla	r6, r9, r2, r0
   167fc:	ldr	r9, [sp, #12]
   16800:	cmp	r6, #0
   16804:	blt	16854 <__assert_fail@plt+0x57cc>
   16808:	ldr	r3, [sp, #28]
   1680c:	mvn	r0, #0
   16810:	mvn	r1, #-2147483648	; 0x80000000
   16814:	mov	r8, r6
   16818:	mvn	r6, #0
   1681c:	mvn	r7, #-2147483648	; 0x80000000
   16820:	bl	16cbc <__assert_fail@plt+0x5c34>
   16824:	ldr	r3, [sp, #24]
   16828:	ldr	ip, [sp, #28]
   1682c:	subs	r0, r0, r4
   16830:	mov	r2, #1
   16834:	sbcs	r0, r1, r8
   16838:	blt	1684c <__assert_fail@plt+0x57c4>
   1683c:	umull	r6, r0, r4, r3
   16840:	mov	r2, #0
   16844:	mla	r0, r4, ip, r0
   16848:	mla	r7, r8, r3, r0
   1684c:	ldr	r0, [sp, #8]
   16850:	b	15998 <__assert_fail@plt+0x4910>
   16854:	mov	r0, #0
   16858:	mov	r1, #-2147483648	; 0x80000000
   1685c:	mov	r2, r4
   16860:	mov	r3, r6
   16864:	bl	16be8 <__assert_fail@plt+0x5b60>
   16868:	ldr	r3, [sp, #24]
   1686c:	ldr	ip, [sp, #28]
   16870:	mov	r8, r6
   16874:	mov	r2, #1
   16878:	mov	r6, #0
   1687c:	mov	r7, #-2147483648	; 0x80000000
   16880:	subs	r0, r0, r3
   16884:	sbcs	r0, r1, ip
   16888:	bge	1683c <__assert_fail@plt+0x57b4>
   1688c:	b	1684c <__assert_fail@plt+0x57c4>
   16890:	movw	r0, #31289	; 0x7a39
   16894:	movw	r1, #31327	; 0x7a5f
   16898:	movw	r3, #31343	; 0x7a6f
   1689c:	mov	r2, #85	; 0x55
   168a0:	movt	r0, #1
   168a4:	movt	r1, #1
   168a8:	movt	r3, #1
   168ac:	bl	11088 <__assert_fail@plt>
   168b0:	clz	r2, r1
   168b4:	clz	r3, r0
   168b8:	lsr	r2, r2, #5
   168bc:	lsr	r3, r3, #5
   168c0:	orrs	r2, r3, r2
   168c4:	movwne	r1, #1
   168c8:	movwne	r0, #1
   168cc:	cmp	r1, #0
   168d0:	beq	16900 <__assert_fail@plt+0x5878>
   168d4:	mvn	r2, #-2147483648	; 0x80000000
   168d8:	udiv	r2, r2, r1
   168dc:	cmp	r2, r0
   168e0:	bcs	16900 <__assert_fail@plt+0x5878>
   168e4:	push	{fp, lr}
   168e8:	mov	fp, sp
   168ec:	bl	10fa4 <__errno_location@plt>
   168f0:	mov	r1, #12
   168f4:	str	r1, [r0]
   168f8:	mov	r0, #0
   168fc:	pop	{fp, pc}
   16900:	b	10e24 <calloc@plt>
   16904:	cmp	r0, #0
   16908:	movweq	r0, #1
   1690c:	cmn	r0, #1
   16910:	ble	16918 <__assert_fail@plt+0x5890>
   16914:	b	10f38 <malloc@plt>
   16918:	push	{fp, lr}
   1691c:	mov	fp, sp
   16920:	bl	10fa4 <__errno_location@plt>
   16924:	mov	r1, #12
   16928:	str	r1, [r0]
   1692c:	mov	r0, #0
   16930:	pop	{fp, pc}
   16934:	push	{fp, lr}
   16938:	mov	fp, sp
   1693c:	cmp	r0, #0
   16940:	beq	1695c <__assert_fail@plt+0x58d4>
   16944:	cmp	r1, #0
   16948:	beq	16968 <__assert_fail@plt+0x58e0>
   1694c:	cmn	r1, #1
   16950:	ble	16974 <__assert_fail@plt+0x58ec>
   16954:	pop	{fp, lr}
   16958:	b	10ecc <realloc@plt>
   1695c:	mov	r0, r1
   16960:	pop	{fp, lr}
   16964:	b	16904 <__assert_fail@plt+0x587c>
   16968:	bl	12504 <__assert_fail@plt+0x147c>
   1696c:	mov	r0, #0
   16970:	pop	{fp, pc}
   16974:	bl	10fa4 <__errno_location@plt>
   16978:	mov	r1, #12
   1697c:	str	r1, [r0]
   16980:	mov	r0, #0
   16984:	pop	{fp, pc}
   16988:	push	{r4, r5, r6, sl, fp, lr}
   1698c:	add	fp, sp, #16
   16990:	mov	r4, r0
   16994:	bl	10f14 <__fpending@plt>
   16998:	ldr	r6, [r4]
   1699c:	mov	r5, r0
   169a0:	mov	r0, r4
   169a4:	bl	1240c <__assert_fail@plt+0x1384>
   169a8:	tst	r6, #32
   169ac:	bne	169e4 <__assert_fail@plt+0x595c>
   169b0:	cmp	r0, #0
   169b4:	mov	r4, r0
   169b8:	mvnne	r4, #0
   169bc:	cmp	r5, #0
   169c0:	bne	169f0 <__assert_fail@plt+0x5968>
   169c4:	cmp	r0, #0
   169c8:	beq	169f0 <__assert_fail@plt+0x5968>
   169cc:	bl	10fa4 <__errno_location@plt>
   169d0:	ldr	r0, [r0]
   169d4:	subs	r4, r0, #9
   169d8:	mvnne	r4, #0
   169dc:	mov	r0, r4
   169e0:	pop	{r4, r5, r6, sl, fp, pc}
   169e4:	mvn	r4, #0
   169e8:	cmp	r0, #0
   169ec:	beq	169f8 <__assert_fail@plt+0x5970>
   169f0:	mov	r0, r4
   169f4:	pop	{r4, r5, r6, sl, fp, pc}
   169f8:	bl	10fa4 <__errno_location@plt>
   169fc:	mov	r1, #0
   16a00:	str	r1, [r0]
   16a04:	mov	r0, r4
   16a08:	pop	{r4, r5, r6, sl, fp, pc}
   16a0c:	push	{fp, lr}
   16a10:	mov	fp, sp
   16a14:	mov	r0, #14
   16a18:	bl	11034 <nl_langinfo@plt>
   16a1c:	movw	r1, #29648	; 0x73d0
   16a20:	cmp	r0, #0
   16a24:	movt	r1, #1
   16a28:	movne	r1, r0
   16a2c:	movw	r0, #31421	; 0x7abd
   16a30:	ldrb	r2, [r1]
   16a34:	movt	r0, #1
   16a38:	cmp	r2, #0
   16a3c:	movne	r0, r1
   16a40:	pop	{fp, pc}
   16a44:	push	{r4, r5, r6, r7, fp, lr}
   16a48:	add	fp, sp, #16
   16a4c:	sub	sp, sp, #8
   16a50:	add	r5, sp, #4
   16a54:	cmp	r0, #0
   16a58:	mov	r7, r2
   16a5c:	mov	r4, r1
   16a60:	movne	r5, r0
   16a64:	mov	r0, r5
   16a68:	bl	10f20 <mbrtowc@plt>
   16a6c:	mov	r6, r0
   16a70:	cmp	r7, #0
   16a74:	beq	16a98 <__assert_fail@plt+0x5a10>
   16a78:	cmn	r6, #2
   16a7c:	bcc	16a98 <__assert_fail@plt+0x5a10>
   16a80:	mov	r0, #0
   16a84:	bl	16ae0 <__assert_fail@plt+0x5a58>
   16a88:	cmp	r0, #0
   16a8c:	ldrbeq	r0, [r4]
   16a90:	moveq	r6, #1
   16a94:	streq	r0, [r5]
   16a98:	mov	r0, r6
   16a9c:	sub	sp, fp, #16
   16aa0:	pop	{r4, r5, r6, r7, fp, pc}
   16aa4:	cmp	r2, #0
   16aa8:	beq	16ad8 <__assert_fail@plt+0x5a50>
   16aac:	mvn	r3, #0
   16ab0:	udiv	r3, r3, r2
   16ab4:	cmp	r3, r1
   16ab8:	bcs	16ad8 <__assert_fail@plt+0x5a50>
   16abc:	push	{fp, lr}
   16ac0:	mov	fp, sp
   16ac4:	bl	10fa4 <__errno_location@plt>
   16ac8:	mov	r1, #12
   16acc:	str	r1, [r0]
   16ad0:	mov	r0, #0
   16ad4:	pop	{fp, pc}
   16ad8:	mul	r1, r2, r1
   16adc:	b	16934 <__assert_fail@plt+0x58ac>
   16ae0:	push	{r4, sl, fp, lr}
   16ae4:	add	fp, sp, #8
   16ae8:	sub	sp, sp, #264	; 0x108
   16aec:	add	r1, sp, #7
   16af0:	movw	r2, #257	; 0x101
   16af4:	bl	16b44 <__assert_fail@plt+0x5abc>
   16af8:	mov	r4, #0
   16afc:	cmp	r0, #0
   16b00:	bne	16b38 <__assert_fail@plt+0x5ab0>
   16b04:	movw	r1, #31427	; 0x7ac3
   16b08:	add	r0, sp, #7
   16b0c:	movt	r1, #1
   16b10:	bl	10e48 <strcmp@plt>
   16b14:	cmp	r0, #0
   16b18:	beq	16b38 <__assert_fail@plt+0x5ab0>
   16b1c:	movw	r1, #31429	; 0x7ac5
   16b20:	add	r0, sp, #7
   16b24:	movt	r1, #1
   16b28:	bl	10e48 <strcmp@plt>
   16b2c:	mov	r4, r0
   16b30:	cmp	r0, #0
   16b34:	movwne	r4, #1
   16b38:	mov	r0, r4
   16b3c:	sub	sp, fp, #8
   16b40:	pop	{r4, sl, fp, pc}
   16b44:	push	{r4, r5, r6, r7, fp, lr}
   16b48:	add	fp, sp, #16
   16b4c:	mov	r4, r1
   16b50:	mov	r1, #0
   16b54:	mov	r6, r2
   16b58:	bl	1101c <setlocale@plt>
   16b5c:	cmp	r0, #0
   16b60:	beq	16b90 <__assert_fail@plt+0x5b08>
   16b64:	mov	r7, r0
   16b68:	bl	10f8c <strlen@plt>
   16b6c:	cmp	r0, r6
   16b70:	bcs	16bb0 <__assert_fail@plt+0x5b28>
   16b74:	add	r2, r0, #1
   16b78:	mov	r0, r4
   16b7c:	mov	r1, r7
   16b80:	bl	10e90 <memcpy@plt>
   16b84:	mov	r5, #0
   16b88:	mov	r0, r5
   16b8c:	pop	{r4, r5, r6, r7, fp, pc}
   16b90:	cmp	r6, #0
   16b94:	mov	r5, #22
   16b98:	movne	r0, #0
   16b9c:	strbne	r0, [r4]
   16ba0:	movne	r0, r5
   16ba4:	popne	{r4, r5, r6, r7, fp, pc}
   16ba8:	mov	r0, r5
   16bac:	pop	{r4, r5, r6, r7, fp, pc}
   16bb0:	mov	r5, #34	; 0x22
   16bb4:	cmp	r6, #0
   16bb8:	beq	16bd8 <__assert_fail@plt+0x5b50>
   16bbc:	sub	r6, r6, #1
   16bc0:	mov	r0, r4
   16bc4:	mov	r1, r7
   16bc8:	mov	r2, r6
   16bcc:	bl	10e90 <memcpy@plt>
   16bd0:	mov	r0, #0
   16bd4:	strb	r0, [r4, r6]
   16bd8:	mov	r0, r5
   16bdc:	pop	{r4, r5, r6, r7, fp, pc}
   16be0:	mov	r1, #0
   16be4:	b	1101c <setlocale@plt>
   16be8:	cmp	r3, #0
   16bec:	cmpeq	r2, #0
   16bf0:	bne	16c14 <__assert_fail@plt+0x5b8c>
   16bf4:	cmp	r1, #0
   16bf8:	movlt	r1, #-2147483648	; 0x80000000
   16bfc:	movlt	r0, #0
   16c00:	blt	16c10 <__assert_fail@plt+0x5b88>
   16c04:	cmpeq	r0, #0
   16c08:	mvnne	r1, #-2147483648	; 0x80000000
   16c0c:	mvnne	r0, #0
   16c10:	b	16cf8 <__assert_fail@plt+0x5c70>
   16c14:	sub	sp, sp, #8
   16c18:	push	{sp, lr}
   16c1c:	cmp	r1, #0
   16c20:	blt	16c40 <__assert_fail@plt+0x5bb8>
   16c24:	cmp	r3, #0
   16c28:	blt	16c74 <__assert_fail@plt+0x5bec>
   16c2c:	bl	16d08 <__assert_fail@plt+0x5c80>
   16c30:	ldr	lr, [sp, #4]
   16c34:	add	sp, sp, #8
   16c38:	pop	{r2, r3}
   16c3c:	bx	lr
   16c40:	rsbs	r0, r0, #0
   16c44:	sbc	r1, r1, r1, lsl #1
   16c48:	cmp	r3, #0
   16c4c:	blt	16c98 <__assert_fail@plt+0x5c10>
   16c50:	bl	16d08 <__assert_fail@plt+0x5c80>
   16c54:	ldr	lr, [sp, #4]
   16c58:	add	sp, sp, #8
   16c5c:	pop	{r2, r3}
   16c60:	rsbs	r0, r0, #0
   16c64:	sbc	r1, r1, r1, lsl #1
   16c68:	rsbs	r2, r2, #0
   16c6c:	sbc	r3, r3, r3, lsl #1
   16c70:	bx	lr
   16c74:	rsbs	r2, r2, #0
   16c78:	sbc	r3, r3, r3, lsl #1
   16c7c:	bl	16d08 <__assert_fail@plt+0x5c80>
   16c80:	ldr	lr, [sp, #4]
   16c84:	add	sp, sp, #8
   16c88:	pop	{r2, r3}
   16c8c:	rsbs	r0, r0, #0
   16c90:	sbc	r1, r1, r1, lsl #1
   16c94:	bx	lr
   16c98:	rsbs	r2, r2, #0
   16c9c:	sbc	r3, r3, r3, lsl #1
   16ca0:	bl	16d08 <__assert_fail@plt+0x5c80>
   16ca4:	ldr	lr, [sp, #4]
   16ca8:	add	sp, sp, #8
   16cac:	pop	{r2, r3}
   16cb0:	rsbs	r2, r2, #0
   16cb4:	sbc	r3, r3, r3, lsl #1
   16cb8:	bx	lr
   16cbc:	cmp	r3, #0
   16cc0:	cmpeq	r2, #0
   16cc4:	bne	16cdc <__assert_fail@plt+0x5c54>
   16cc8:	cmp	r1, #0
   16ccc:	cmpeq	r0, #0
   16cd0:	mvnne	r1, #0
   16cd4:	mvnne	r0, #0
   16cd8:	b	16cf8 <__assert_fail@plt+0x5c70>
   16cdc:	sub	sp, sp, #8
   16ce0:	push	{sp, lr}
   16ce4:	bl	16d08 <__assert_fail@plt+0x5c80>
   16ce8:	ldr	lr, [sp, #4]
   16cec:	add	sp, sp, #8
   16cf0:	pop	{r2, r3}
   16cf4:	bx	lr
   16cf8:	push	{r1, lr}
   16cfc:	mov	r0, #8
   16d00:	bl	10e3c <raise@plt>
   16d04:	pop	{r1, pc}
   16d08:	cmp	r1, r3
   16d0c:	cmpeq	r0, r2
   16d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d14:	mov	r4, r0
   16d18:	movcc	r0, #0
   16d1c:	mov	r5, r1
   16d20:	ldr	lr, [sp, #36]	; 0x24
   16d24:	movcc	r1, r0
   16d28:	bcc	16e24 <__assert_fail@plt+0x5d9c>
   16d2c:	cmp	r3, #0
   16d30:	clzeq	ip, r2
   16d34:	clzne	ip, r3
   16d38:	addeq	ip, ip, #32
   16d3c:	cmp	r5, #0
   16d40:	clzeq	r1, r4
   16d44:	addeq	r1, r1, #32
   16d48:	clzne	r1, r5
   16d4c:	sub	ip, ip, r1
   16d50:	sub	sl, ip, #32
   16d54:	lsl	r9, r3, ip
   16d58:	rsb	fp, ip, #32
   16d5c:	orr	r9, r9, r2, lsl sl
   16d60:	orr	r9, r9, r2, lsr fp
   16d64:	lsl	r8, r2, ip
   16d68:	cmp	r5, r9
   16d6c:	cmpeq	r4, r8
   16d70:	movcc	r0, #0
   16d74:	movcc	r1, r0
   16d78:	bcc	16d94 <__assert_fail@plt+0x5d0c>
   16d7c:	mov	r0, #1
   16d80:	subs	r4, r4, r8
   16d84:	lsl	r1, r0, sl
   16d88:	orr	r1, r1, r0, lsr fp
   16d8c:	lsl	r0, r0, ip
   16d90:	sbc	r5, r5, r9
   16d94:	cmp	ip, #0
   16d98:	beq	16e24 <__assert_fail@plt+0x5d9c>
   16d9c:	lsr	r6, r8, #1
   16da0:	orr	r6, r6, r9, lsl #31
   16da4:	lsr	r7, r9, #1
   16da8:	mov	r2, ip
   16dac:	b	16dd0 <__assert_fail@plt+0x5d48>
   16db0:	subs	r3, r4, r6
   16db4:	sbc	r8, r5, r7
   16db8:	adds	r3, r3, r3
   16dbc:	adc	r8, r8, r8
   16dc0:	adds	r4, r3, #1
   16dc4:	adc	r5, r8, #0
   16dc8:	subs	r2, r2, #1
   16dcc:	beq	16dec <__assert_fail@plt+0x5d64>
   16dd0:	cmp	r5, r7
   16dd4:	cmpeq	r4, r6
   16dd8:	bcs	16db0 <__assert_fail@plt+0x5d28>
   16ddc:	adds	r4, r4, r4
   16de0:	adc	r5, r5, r5
   16de4:	subs	r2, r2, #1
   16de8:	bne	16dd0 <__assert_fail@plt+0x5d48>
   16dec:	lsr	r3, r4, ip
   16df0:	orr	r3, r3, r5, lsl fp
   16df4:	lsr	r2, r5, ip
   16df8:	orr	r3, r3, r5, lsr sl
   16dfc:	adds	r0, r0, r4
   16e00:	mov	r4, r3
   16e04:	lsl	r3, r2, ip
   16e08:	orr	r3, r3, r4, lsl sl
   16e0c:	lsl	ip, r4, ip
   16e10:	orr	r3, r3, r4, lsr fp
   16e14:	adc	r1, r1, r5
   16e18:	subs	r0, r0, ip
   16e1c:	mov	r5, r2
   16e20:	sbc	r1, r1, r3
   16e24:	cmp	lr, #0
   16e28:	strdne	r4, [lr]
   16e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16e34:	mov	r7, r0
   16e38:	ldr	r6, [pc, #72]	; 16e88 <__assert_fail@plt+0x5e00>
   16e3c:	ldr	r5, [pc, #72]	; 16e8c <__assert_fail@plt+0x5e04>
   16e40:	add	r6, pc, r6
   16e44:	add	r5, pc, r5
   16e48:	sub	r6, r6, r5
   16e4c:	mov	r8, r1
   16e50:	mov	r9, r2
   16e54:	bl	10e04 <calloc@plt-0x20>
   16e58:	asrs	r6, r6, #2
   16e5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e60:	mov	r4, #0
   16e64:	add	r4, r4, #1
   16e68:	ldr	r3, [r5], #4
   16e6c:	mov	r2, r9
   16e70:	mov	r1, r8
   16e74:	mov	r0, r7
   16e78:	blx	r3
   16e7c:	cmp	r6, r4
   16e80:	bne	16e64 <__assert_fail@plt+0x5ddc>
   16e84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e88:	andeq	r1, r1, r4, asr #1
   16e8c:	strheq	r1, [r1], -ip
   16e90:	bx	lr
   16e94:	ldr	r3, [pc, #12]	; 16ea8 <__assert_fail@plt+0x5e20>
   16e98:	mov	r1, #0
   16e9c:	add	r3, pc, r3
   16ea0:	ldr	r2, [r3]
   16ea4:	b	10fb0 <__cxa_atexit@plt>
   16ea8:	andeq	r1, r1, r0, asr #4

Disassembly of section .fini:

00016eac <.fini>:
   16eac:	push	{r3, lr}
   16eb0:	pop	{r3, pc}
