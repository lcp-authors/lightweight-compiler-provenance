
../repos/coreutils/src/libstdbuf.so:     file format elf32-littlearm


Disassembly of section .init:

00000408 <.init>:
 408:	push	{r3, lr}
 40c:	bl	4a0 <__fprintf_chk@plt+0xc>
 410:	pop	{r3, pc}

Disassembly of section .plt:

00000414 <__cxa_finalize@plt-0x14>:
 414:	push	{lr}		; (str lr, [sp, #-4]!)
 418:	ldr	lr, [pc, #4]	; 424 <__cxa_finalize@plt-0x4>
 41c:	add	lr, pc, lr
 420:	ldr	pc, [lr, #8]!
 424:	ldrdeq	r0, [r1], -ip

00000428 <__cxa_finalize@plt>:
 428:	add	ip, pc, #0, 12
 42c:	add	ip, ip, #16, 20	; 0x10000
 430:	ldr	pc, [ip, #3036]!	; 0xbdc

00000434 <free@plt>:
 434:	add	ip, pc, #0, 12
 438:	add	ip, ip, #16, 20	; 0x10000
 43c:	ldr	pc, [ip, #3028]!	; 0xbd4

00000440 <__strtoull_internal@plt>:
 440:	add	ip, pc, #0, 12
 444:	add	ip, ip, #16, 20	; 0x10000
 448:	ldr	pc, [ip, #3020]!	; 0xbcc

0000044c <dcgettext@plt>:
 44c:	add	ip, pc, #0, 12
 450:	add	ip, ip, #16, 20	; 0x10000
 454:	ldr	pc, [ip, #3012]!	; 0xbc4

00000458 <getenv@plt>:
 458:	add	ip, pc, #0, 12
 45c:	add	ip, ip, #16, 20	; 0x10000
 460:	ldr	pc, [ip, #3004]!	; 0xbbc

00000464 <malloc@plt>:
 464:	add	ip, pc, #0, 12
 468:	add	ip, ip, #16, 20	; 0x10000
 46c:	ldr	pc, [ip, #2996]!	; 0xbb4

00000470 <__gmon_start__@plt>:
 470:	add	ip, pc, #0, 12
 474:	add	ip, ip, #16, 20	; 0x10000
 478:	ldr	pc, [ip, #2988]!	; 0xbac

0000047c <setvbuf@plt>:
 47c:	add	ip, pc, #0, 12
 480:	add	ip, ip, #16, 20	; 0x10000
 484:	ldr	pc, [ip, #2980]!	; 0xba4

00000488 <fileno@plt>:
 488:	add	ip, pc, #0, 12
 48c:	add	ip, ip, #16, 20	; 0x10000
 490:	ldr	pc, [ip, #2972]!	; 0xb9c

00000494 <__fprintf_chk@plt>:
 494:	add	ip, pc, #0, 12
 498:	add	ip, ip, #16, 20	; 0x10000
 49c:	ldr	pc, [ip, #2964]!	; 0xb94

Disassembly of section .text:

000004a0 <.text>:
 4a0:	ldr	r3, [pc, #20]	; 4bc <__fprintf_chk@plt+0x28>
 4a4:	ldr	r2, [pc, #20]	; 4c0 <__fprintf_chk@plt+0x2c>
 4a8:	add	r3, pc, r3
 4ac:	ldr	r2, [r3, r2]
 4b0:	cmp	r2, #0
 4b4:	bxeq	lr
 4b8:	b	470 <__gmon_start__@plt>
 4bc:	andeq	r0, r1, r0, asr fp
 4c0:	andeq	r0, r0, r0, asr #32
 4c4:	ldr	r0, [pc, #44]	; 4f8 <__fprintf_chk@plt+0x64>
 4c8:	ldr	r3, [pc, #44]	; 4fc <__fprintf_chk@plt+0x68>
 4cc:	add	r0, pc, r0
 4d0:	add	r3, pc, r3
 4d4:	cmp	r3, r0
 4d8:	ldr	r3, [pc, #32]	; 500 <__fprintf_chk@plt+0x6c>
 4dc:	add	r3, pc, r3
 4e0:	bxeq	lr
 4e4:	ldr	r2, [pc, #24]	; 504 <__fprintf_chk@plt+0x70>
 4e8:	ldr	r3, [r3, r2]
 4ec:	cmp	r3, #0
 4f0:	bxeq	lr
 4f4:	bx	r3
 4f8:	andeq	r0, r1, r0, lsl #23
 4fc:	andeq	r0, r1, ip, ror fp
 500:	andeq	r0, r1, ip, lsl fp
 504:	andeq	r0, r0, r8, lsr r0
 508:	ldr	r0, [pc, #56]	; 548 <__fprintf_chk@plt+0xb4>
 50c:	ldr	r3, [pc, #56]	; 54c <__fprintf_chk@plt+0xb8>
 510:	add	r0, pc, r0
 514:	add	r3, pc, r3
 518:	sub	r1, r3, r0
 51c:	ldr	r3, [pc, #44]	; 550 <__fprintf_chk@plt+0xbc>
 520:	asr	r1, r1, #2
 524:	add	r3, pc, r3
 528:	add	r1, r1, r1, lsr #31
 52c:	asrs	r1, r1, #1
 530:	bxeq	lr
 534:	ldr	r2, [pc, #24]	; 554 <__fprintf_chk@plt+0xc0>
 538:	ldr	r3, [r3, r2]
 53c:	cmp	r3, #0
 540:	bxeq	lr
 544:	bx	r3
 548:	andeq	r0, r1, ip, lsr fp
 54c:	andeq	r0, r1, r8, lsr fp
 550:	ldrdeq	r0, [r1], -r4
 554:	andeq	r0, r0, ip, asr #32
 558:	ldr	r3, [pc, #76]	; 5ac <__fprintf_chk@plt+0x118>
 55c:	ldr	r2, [pc, #76]	; 5b0 <__fprintf_chk@plt+0x11c>
 560:	add	r3, pc, r3
 564:	add	r2, pc, r2
 568:	ldrb	r3, [r3]
 56c:	cmp	r3, #0
 570:	bxne	lr
 574:	ldr	r3, [pc, #56]	; 5b4 <__fprintf_chk@plt+0x120>
 578:	push	{r4, lr}
 57c:	ldr	r3, [r2, r3]
 580:	cmp	r3, #0
 584:	beq	594 <__fprintf_chk@plt+0x100>
 588:	ldr	r3, [pc, #40]	; 5b8 <__fprintf_chk@plt+0x124>
 58c:	ldr	r0, [pc, r3]
 590:	bl	428 <__cxa_finalize@plt>
 594:	bl	4c4 <__fprintf_chk@plt+0x30>
 598:	ldr	r3, [pc, #28]	; 5bc <__fprintf_chk@plt+0x128>
 59c:	mov	r2, #1
 5a0:	add	r3, pc, r3
 5a4:	strb	r2, [r3]
 5a8:	pop	{r4, pc}
 5ac:	andeq	r0, r1, ip, ror #21
 5b0:	muleq	r1, r4, sl
 5b4:	andeq	r0, r0, r4, lsr r0
 5b8:			; <UNDEFINED> instruction: 0x00010abc
 5bc:	andeq	r0, r1, ip, lsr #21
 5c0:	b	508 <__fprintf_chk@plt+0x74>
 5c4:	strd	r4, [sp, #-28]!	; 0xffffffe4
 5c8:	strd	r6, [sp, #8]
 5cc:	strd	r8, [sp, #16]
 5d0:	str	lr, [sp, #24]
 5d4:	sub	sp, sp, #20
 5d8:	mov	r8, r0
 5dc:	mov	r4, r1
 5e0:	ldr	r5, [pc, #524]	; 7f4 <__fprintf_chk@plt+0x360>
 5e4:	add	r5, pc, r5
 5e8:	ldrb	r3, [r1]
 5ec:	cmp	r3, #48	; 0x30
 5f0:	beq	754 <__fprintf_chk@plt+0x2c0>
 5f4:	cmp	r3, #76	; 0x4c
 5f8:	bne	638 <__fprintf_chk@plt+0x1a4>
 5fc:	mov	r6, #0
 600:	mov	r2, #1
 604:	mov	r9, #0
 608:	mov	r3, r6
 60c:	mov	r1, r9
 610:	mov	r0, r8
 614:	bl	47c <setvbuf@plt>
 618:	cmp	r0, #0
 61c:	bne	764 <__fprintf_chk@plt+0x2d0>
 620:	add	sp, sp, #20
 624:	ldrd	r4, [sp]
 628:	ldrd	r6, [sp, #8]
 62c:	ldrd	r8, [sp, #16]
 630:	add	sp, sp, #24
 634:	pop	{pc}		; (ldr pc, [sp], #4)
 638:	mov	r3, #0
 63c:	mov	r2, #10
 640:	add	r1, sp, #12
 644:	mov	r0, r4
 648:	bl	440 <__strtoull_internal@plt>
 64c:	mov	r6, r0
 650:	mov	r7, r1
 654:	orrs	r3, r6, r7
 658:	beq	6c8 <__fprintf_chk@plt+0x234>
 65c:	ldr	r3, [sp, #12]
 660:	ldrb	r3, [r3]
 664:	cmp	r3, #0
 668:	bne	6c8 <__fprintf_chk@plt+0x234>
 66c:	mvn	r2, #0
 670:	mov	r3, #0
 674:	cmp	r1, r3
 678:	cmpeq	r0, r2
 67c:	bhi	690 <__fprintf_chk@plt+0x1fc>
 680:	bl	464 <malloc@plt>
 684:	subs	r9, r0, #0
 688:	movne	r2, #0
 68c:	bne	608 <__fprintf_chk@plt+0x174>
 690:	ldr	r3, [pc, #352]	; 7f8 <__fprintf_chk@plt+0x364>
 694:	ldr	r3, [r5, r3]
 698:	ldr	r4, [r3]
 69c:	mov	r2, #5
 6a0:	ldr	r1, [pc, #340]	; 7fc <__fprintf_chk@plt+0x368>
 6a4:	add	r1, pc, r1
 6a8:	mov	r0, #0
 6ac:	bl	44c <dcgettext@plt>
 6b0:	strd	r6, [sp]
 6b4:	mov	r2, r0
 6b8:	mov	r1, #1
 6bc:	mov	r0, r4
 6c0:	bl	494 <__fprintf_chk@plt>
 6c4:	b	620 <__fprintf_chk@plt+0x18c>
 6c8:	ldr	r3, [pc, #296]	; 7f8 <__fprintf_chk@plt+0x364>
 6cc:	ldr	r3, [r5, r3]
 6d0:	ldr	r5, [r3]
 6d4:	mov	r2, #5
 6d8:	ldr	r1, [pc, #288]	; 800 <__fprintf_chk@plt+0x36c>
 6dc:	add	r1, pc, r1
 6e0:	mov	r0, #0
 6e4:	bl	44c <dcgettext@plt>
 6e8:	mov	r6, r0
 6ec:	mov	r0, r8
 6f0:	bl	488 <fileno@plt>
 6f4:	cmp	r0, #1
 6f8:	beq	730 <__fprintf_chk@plt+0x29c>
 6fc:	cmp	r0, #2
 700:	beq	73c <__fprintf_chk@plt+0x2a8>
 704:	cmp	r0, #0
 708:	beq	748 <__fprintf_chk@plt+0x2b4>
 70c:	ldr	r3, [pc, #240]	; 804 <__fprintf_chk@plt+0x370>
 710:	add	r3, pc, r3
 714:	str	r3, [sp]
 718:	mov	r3, r4
 71c:	mov	r2, r6
 720:	mov	r1, #1
 724:	mov	r0, r5
 728:	bl	494 <__fprintf_chk@plt>
 72c:	b	620 <__fprintf_chk@plt+0x18c>
 730:	ldr	r3, [pc, #208]	; 808 <__fprintf_chk@plt+0x374>
 734:	add	r3, pc, r3
 738:	b	714 <__fprintf_chk@plt+0x280>
 73c:	ldr	r3, [pc, #200]	; 80c <__fprintf_chk@plt+0x378>
 740:	add	r3, pc, r3
 744:	b	714 <__fprintf_chk@plt+0x280>
 748:	ldr	r3, [pc, #192]	; 810 <__fprintf_chk@plt+0x37c>
 74c:	add	r3, pc, r3
 750:	b	714 <__fprintf_chk@plt+0x280>
 754:	mov	r6, #0
 758:	mov	r2, #2
 75c:	mov	r9, #0
 760:	b	608 <__fprintf_chk@plt+0x174>
 764:	ldr	r3, [pc, #140]	; 7f8 <__fprintf_chk@plt+0x364>
 768:	ldr	r3, [r5, r3]
 76c:	ldr	r5, [r3]
 770:	mov	r2, #5
 774:	ldr	r1, [pc, #152]	; 814 <__fprintf_chk@plt+0x380>
 778:	add	r1, pc, r1
 77c:	mov	r0, #0
 780:	bl	44c <dcgettext@plt>
 784:	mov	r6, r0
 788:	mov	r0, r8
 78c:	bl	488 <fileno@plt>
 790:	cmp	r0, #1
 794:	beq	7d0 <__fprintf_chk@plt+0x33c>
 798:	cmp	r0, #2
 79c:	beq	7dc <__fprintf_chk@plt+0x348>
 7a0:	cmp	r0, #0
 7a4:	beq	7e8 <__fprintf_chk@plt+0x354>
 7a8:	ldr	r3, [pc, #104]	; 818 <__fprintf_chk@plt+0x384>
 7ac:	add	r3, pc, r3
 7b0:	str	r4, [sp]
 7b4:	mov	r2, r6
 7b8:	mov	r1, #1
 7bc:	mov	r0, r5
 7c0:	bl	494 <__fprintf_chk@plt>
 7c4:	mov	r0, r9
 7c8:	bl	434 <free@plt>
 7cc:	b	620 <__fprintf_chk@plt+0x18c>
 7d0:	ldr	r3, [pc, #68]	; 81c <__fprintf_chk@plt+0x388>
 7d4:	add	r3, pc, r3
 7d8:	b	7b0 <__fprintf_chk@plt+0x31c>
 7dc:	ldr	r3, [pc, #60]	; 820 <__fprintf_chk@plt+0x38c>
 7e0:	add	r3, pc, r3
 7e4:	b	7b0 <__fprintf_chk@plt+0x31c>
 7e8:	ldr	r3, [pc, #52]	; 824 <__fprintf_chk@plt+0x390>
 7ec:	add	r3, pc, r3
 7f0:	b	7b0 <__fprintf_chk@plt+0x31c>
 7f4:	andeq	r0, r1, r4, lsl sl
 7f8:	andeq	r0, r0, ip, lsr r0
 7fc:	muleq	r0, r4, r2
 800:	andeq	r0, r0, r8, lsr r2
 804:	andeq	r0, r0, r4, ror #3
 808:	ldrdeq	r0, [r0], -r8
 80c:	andeq	r0, r0, r4, asr #3
 810:			; <UNDEFINED> instruction: 0x000001b0
 814:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 818:	andeq	r0, r0, r8, asr #2
 81c:	andeq	r0, r0, r8, lsr r1
 820:	andeq	r0, r0, r4, lsr #2
 824:	andeq	r0, r0, r0, lsl r1
 828:	strd	r4, [sp, #-24]!	; 0xffffffe8
 82c:	strd	r6, [sp, #8]
 830:	str	r8, [sp, #16]
 834:	str	lr, [sp, #20]
 838:	ldr	r4, [pc, #152]	; 8d8 <__fprintf_chk@plt+0x444>
 83c:	add	r4, pc, r4
 840:	ldr	r0, [pc, #148]	; 8dc <__fprintf_chk@plt+0x448>
 844:	add	r0, pc, r0
 848:	bl	458 <getenv@plt>
 84c:	mov	r7, r0
 850:	ldr	r0, [pc, #136]	; 8e0 <__fprintf_chk@plt+0x44c>
 854:	add	r0, pc, r0
 858:	bl	458 <getenv@plt>
 85c:	mov	r6, r0
 860:	ldr	r0, [pc, #124]	; 8e4 <__fprintf_chk@plt+0x450>
 864:	add	r0, pc, r0
 868:	bl	458 <getenv@plt>
 86c:	mov	r5, r0
 870:	cmp	r7, #0
 874:	beq	88c <__fprintf_chk@plt+0x3f8>
 878:	ldr	r3, [pc, #104]	; 8e8 <__fprintf_chk@plt+0x454>
 87c:	ldr	r3, [r4, r3]
 880:	mov	r1, r7
 884:	ldr	r0, [r3]
 888:	bl	5c4 <__fprintf_chk@plt+0x130>
 88c:	cmp	r6, #0
 890:	beq	8a8 <__fprintf_chk@plt+0x414>
 894:	ldr	r3, [pc, #80]	; 8ec <__fprintf_chk@plt+0x458>
 898:	ldr	r3, [r4, r3]
 89c:	mov	r1, r6
 8a0:	ldr	r0, [r3]
 8a4:	bl	5c4 <__fprintf_chk@plt+0x130>
 8a8:	cmp	r5, #0
 8ac:	beq	8c4 <__fprintf_chk@plt+0x430>
 8b0:	ldr	r3, [pc, #56]	; 8f0 <__fprintf_chk@plt+0x45c>
 8b4:	ldr	r3, [r4, r3]
 8b8:	mov	r1, r5
 8bc:	ldr	r0, [r3]
 8c0:	bl	5c4 <__fprintf_chk@plt+0x130>
 8c4:	ldrd	r4, [sp]
 8c8:	ldrd	r6, [sp, #8]
 8cc:	ldr	r8, [sp, #16]
 8d0:	add	sp, sp, #20
 8d4:	pop	{pc}		; (ldr pc, [sp], #4)
 8d8:			; <UNDEFINED> instruction: 0x000107bc
 8dc:	andeq	r0, r0, r0, asr r1
 8e0:	andeq	r0, r0, ip, asr #2
 8e4:	andeq	r0, r0, r8, asr #2
 8e8:	andeq	r0, r0, ip, lsr r0
 8ec:	andeq	r0, r0, r4, asr #32
 8f0:	andeq	r0, r0, r8, asr #32

Disassembly of section .fini:

000008f4 <.fini>:
 8f4:	push	{r3, lr}
 8f8:	pop	{r3, pc}
