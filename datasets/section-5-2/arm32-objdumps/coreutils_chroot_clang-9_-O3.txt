
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00011098 <.init>:
   11098:	push	{r3, lr}
   1109c:	bl	113e8 <__assert_fail@plt+0x48>
   110a0:	pop	{r3, pc}

Disassembly of section .plt:

000110a4 <calloc@plt-0x14>:
   110a4:	push	{lr}		; (str lr, [sp, #-4]!)
   110a8:	ldr	lr, [pc, #4]	; 110b4 <calloc@plt-0x4>
   110ac:	add	lr, pc, lr
   110b0:	ldr	pc, [lr, #8]!
   110b4:	andeq	r6, r1, ip, asr #30

000110b8 <calloc@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110c4 <endgrent@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #3908]!	; 0xf44

000110d0 <fputs_unlocked@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #90112	; 0x16000
   110d8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110dc <raise@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #3892]!	; 0xf34

000110e8 <getpwnam@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #3884]!	; 0xf2c

000110f4 <strcmp@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #3876]!	; 0xf24

00011100 <getpwuid@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #3868]!	; 0xf1c

0001110c <fflush@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #3860]!	; 0xf14

00011118 <free@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #3852]!	; 0xf0c

00011124 <_exit@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #3844]!	; 0xf04

00011130 <memcpy@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #3836]!	; 0xefc

0001113c <execvp@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #3828]!	; 0xef4

00011148 <__strtoull_internal@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3820]!	; 0xeec

00011154 <mbsinit@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3812]!	; 0xee4

00011160 <dcgettext@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3804]!	; 0xedc

0001116c <realloc@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3796]!	; 0xed4

00011178 <textdomain@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3788]!	; 0xecc

00011184 <chdir@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3780]!	; 0xec4

00011190 <iswprint@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3772]!	; 0xebc

0001119c <setgroups@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111a8 <fwrite@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3756]!	; 0xeac

000111b4 <lseek64@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #90112	; 0x16000
   111bc:	ldr	pc, [ip, #3748]!	; 0xea4

000111c0 <__ctype_get_mb_cur_max@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #90112	; 0x16000
   111c8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111cc <chroot@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #90112	; 0x16000
   111d4:	ldr	pc, [ip, #3732]!	; 0xe94

000111d8 <__fpending@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #90112	; 0x16000
   111e0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111e4 <mbrtowc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #90112	; 0x16000
   111ec:	ldr	pc, [ip, #3716]!	; 0xe84

000111f0 <error@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #90112	; 0x16000
   111f8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111fc <getenv@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3700]!	; 0xe74

00011208 <setgid@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3692]!	; 0xe6c

00011214 <malloc@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3684]!	; 0xe64

00011220 <__libc_start_main@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3676]!	; 0xe5c

0001122c <__freading@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3668]!	; 0xe54

00011238 <__gmon_start__@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3660]!	; 0xe4c

00011244 <getopt_long@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3652]!	; 0xe44

00011250 <__ctype_b_loc@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3644]!	; 0xe3c

0001125c <exit@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3636]!	; 0xe34

00011268 <bcmp@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3628]!	; 0xe2c

00011274 <strtoul@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3620]!	; 0xe24

00011280 <strlen@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3612]!	; 0xe1c

0001128c <strchr@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3604]!	; 0xe14

00011298 <__errno_location@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112a4 <__cxa_atexit@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3588]!	; 0xe04

000112b0 <getgrouplist@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112bc <memset@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112c8 <__printf_chk@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3564]!	; 0xdec

000112d4 <fileno@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3556]!	; 0xde4

000112e0 <__fprintf_chk@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ec <fclose@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112f8 <fseeko64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3532]!	; 0xdcc

00011304 <strtok@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011310 <setlocale@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3516]!	; 0xdbc

0001131c <endpwent@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3508]!	; 0xdb4

00011328 <strrchr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3500]!	; 0xdac

00011334 <nl_langinfo@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3492]!	; 0xda4

00011340 <setuid@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3484]!	; 0xd9c

0001134c <getgroups@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3476]!	; 0xd94

00011358 <canonicalize_file_name@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3468]!	; 0xd8c

00011364 <bindtextdomain@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3460]!	; 0xd84

00011370 <strncmp@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3452]!	; 0xd7c

0001137c <abort@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #90112	; 0x16000
   11384:	ldr	pc, [ip, #3444]!	; 0xd74

00011388 <getgrgid@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #90112	; 0x16000
   11390:	ldr	pc, [ip, #3436]!	; 0xd6c

00011394 <getgrnam@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #90112	; 0x16000
   1139c:	ldr	pc, [ip, #3428]!	; 0xd64

000113a0 <__assert_fail@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #90112	; 0x16000
   113a8:	ldr	pc, [ip, #3420]!	; 0xd5c

Disassembly of section .text:

000113ac <.text>:
   113ac:	mov	fp, #0
   113b0:	mov	lr, #0
   113b4:	pop	{r1}		; (ldr r1, [sp], #4)
   113b8:	mov	r2, sp
   113bc:	push	{r2}		; (str r2, [sp, #-4]!)
   113c0:	push	{r0}		; (str r0, [sp, #-4]!)
   113c4:	ldr	ip, [pc, #16]	; 113dc <__assert_fail@plt+0x3c>
   113c8:	push	{ip}		; (str ip, [sp, #-4]!)
   113cc:	ldr	r0, [pc, #12]	; 113e0 <__assert_fail@plt+0x40>
   113d0:	ldr	r3, [pc, #12]	; 113e4 <__assert_fail@plt+0x44>
   113d4:	bl	11220 <__libc_start_main@plt>
   113d8:	bl	1137c <abort@plt>
   113dc:	andeq	r7, r1, r4, ror #3
   113e0:	andeq	r1, r1, r0, ror r7
   113e4:	andeq	r7, r1, r4, lsl #3
   113e8:	ldr	r3, [pc, #20]	; 11404 <__assert_fail@plt+0x64>
   113ec:	ldr	r2, [pc, #20]	; 11408 <__assert_fail@plt+0x68>
   113f0:	add	r3, pc, r3
   113f4:	ldr	r2, [r3, r2]
   113f8:	cmp	r2, #0
   113fc:	bxeq	lr
   11400:	b	11238 <__gmon_start__@plt>
   11404:	andeq	r6, r1, r8, lsl #24
   11408:	andeq	r0, r0, r8, lsl #2
   1140c:	ldr	r0, [pc, #24]	; 1142c <__assert_fail@plt+0x8c>
   11410:	ldr	r3, [pc, #24]	; 11430 <__assert_fail@plt+0x90>
   11414:	cmp	r3, r0
   11418:	bxeq	lr
   1141c:	ldr	r3, [pc, #16]	; 11434 <__assert_fail@plt+0x94>
   11420:	cmp	r3, #0
   11424:	bxeq	lr
   11428:	bx	r3
   1142c:	andeq	r8, r2, r0, ror #2
   11430:	andeq	r8, r2, r0, ror #2
   11434:	andeq	r0, r0, r0
   11438:	ldr	r0, [pc, #36]	; 11464 <__assert_fail@plt+0xc4>
   1143c:	ldr	r1, [pc, #36]	; 11468 <__assert_fail@plt+0xc8>
   11440:	sub	r1, r1, r0
   11444:	asr	r1, r1, #2
   11448:	add	r1, r1, r1, lsr #31
   1144c:	asrs	r1, r1, #1
   11450:	bxeq	lr
   11454:	ldr	r3, [pc, #16]	; 1146c <__assert_fail@plt+0xcc>
   11458:	cmp	r3, #0
   1145c:	bxeq	lr
   11460:	bx	r3
   11464:	andeq	r8, r2, r0, ror #2
   11468:	andeq	r8, r2, r0, ror #2
   1146c:	andeq	r0, r0, r0
   11470:	push	{r4, lr}
   11474:	ldr	r4, [pc, #24]	; 11494 <__assert_fail@plt+0xf4>
   11478:	ldrb	r3, [r4]
   1147c:	cmp	r3, #0
   11480:	popne	{r4, pc}
   11484:	bl	1140c <__assert_fail@plt+0x6c>
   11488:	mov	r3, #1
   1148c:	strb	r3, [r4]
   11490:	pop	{r4, pc}
   11494:	andeq	r8, r2, ip, ror r1
   11498:	b	11438 <__assert_fail@plt+0x98>
   1149c:	push	{fp, lr}
   114a0:	mov	fp, sp
   114a4:	sub	sp, sp, #56	; 0x38
   114a8:	mov	r4, r0
   114ac:	cmp	r0, #0
   114b0:	bne	1172c <__assert_fail@plt+0x38c>
   114b4:	movw	r1, #29235	; 0x7233
   114b8:	mov	r0, #0
   114bc:	mov	r2, #5
   114c0:	movt	r1, #1
   114c4:	bl	11160 <dcgettext@plt>
   114c8:	mov	r1, r0
   114cc:	movw	r0, #33160	; 0x8188
   114d0:	movt	r0, #2
   114d4:	ldr	r2, [r0]
   114d8:	mov	r0, #1
   114dc:	mov	r3, r2
   114e0:	bl	112c8 <__printf_chk@plt>
   114e4:	movw	r1, #29299	; 0x7273
   114e8:	mov	r0, #0
   114ec:	mov	r2, #5
   114f0:	movt	r1, #1
   114f4:	bl	11160 <dcgettext@plt>
   114f8:	movw	r7, #33140	; 0x8174
   114fc:	movt	r7, #2
   11500:	ldr	r1, [r7]
   11504:	bl	110d0 <fputs_unlocked@plt>
   11508:	movw	r1, #29349	; 0x72a5
   1150c:	mov	r0, #0
   11510:	mov	r2, #5
   11514:	movt	r1, #1
   11518:	bl	11160 <dcgettext@plt>
   1151c:	ldr	r1, [r7]
   11520:	bl	110d0 <fputs_unlocked@plt>
   11524:	movw	r1, #29423	; 0x72ef
   11528:	mov	r0, #0
   1152c:	mov	r2, #5
   11530:	movt	r1, #1
   11534:	bl	11160 <dcgettext@plt>
   11538:	ldr	r1, [r7]
   1153c:	bl	110d0 <fputs_unlocked@plt>
   11540:	movw	r1, #29496	; 0x7338
   11544:	mov	r0, #0
   11548:	mov	r2, #5
   1154c:	movt	r1, #1
   11550:	bl	11160 <dcgettext@plt>
   11554:	movw	r1, #31723	; 0x7beb
   11558:	mov	r5, r0
   1155c:	mov	r0, #4
   11560:	movt	r1, #1
   11564:	bl	13d84 <__assert_fail@plt+0x29e4>
   11568:	mov	r2, r0
   1156c:	mov	r0, #1
   11570:	mov	r1, r5
   11574:	bl	112c8 <__printf_chk@plt>
   11578:	movw	r1, #29564	; 0x737c
   1157c:	mov	r0, #0
   11580:	mov	r2, #5
   11584:	movt	r1, #1
   11588:	bl	11160 <dcgettext@plt>
   1158c:	ldr	r1, [r7]
   11590:	bl	110d0 <fputs_unlocked@plt>
   11594:	movw	r1, #29609	; 0x73a9
   11598:	mov	r0, #0
   1159c:	mov	r2, #5
   115a0:	movt	r1, #1
   115a4:	bl	11160 <dcgettext@plt>
   115a8:	ldr	r1, [r7]
   115ac:	bl	110d0 <fputs_unlocked@plt>
   115b0:	movw	r1, #29663	; 0x73df
   115b4:	mov	r0, #0
   115b8:	mov	r2, #5
   115bc:	movt	r1, #1
   115c0:	bl	11160 <dcgettext@plt>
   115c4:	ldr	r1, [r7]
   115c8:	bl	110d0 <fputs_unlocked@plt>
   115cc:	movw	r0, #30608	; 0x7790
   115d0:	mov	r2, #48	; 0x30
   115d4:	mov	r6, sp
   115d8:	movw	r5, #29732	; 0x7424
   115dc:	movt	r0, #1
   115e0:	movt	r5, #1
   115e4:	add	r1, r0, #32
   115e8:	add	r3, r0, #16
   115ec:	vld1.64	{d18-d19}, [r0], r2
   115f0:	vld1.64	{d16-d17}, [r1]
   115f4:	vld1.64	{d20-d21}, [r3]
   115f8:	vldr	d22, [r0]
   115fc:	add	r1, r6, #32
   11600:	add	r0, r6, #16
   11604:	vst1.64	{d16-d17}, [r1]
   11608:	movw	r1, #30126	; 0x75ae
   1160c:	vst1.64	{d20-d21}, [r0]
   11610:	mov	r0, r6
   11614:	movt	r1, #1
   11618:	vst1.64	{d18-d19}, [r0], r2
   1161c:	vstr	d22, [r0]
   11620:	mov	r0, r5
   11624:	bl	110f4 <strcmp@plt>
   11628:	cmp	r0, #0
   1162c:	ldrne	r1, [r6, #8]!
   11630:	cmpne	r1, #0
   11634:	bne	11620 <__assert_fail@plt+0x280>
   11638:	movw	r1, #30221	; 0x760d
   1163c:	ldr	r6, [r6, #4]
   11640:	mov	r0, #0
   11644:	mov	r2, #5
   11648:	movt	r1, #1
   1164c:	bl	11160 <dcgettext@plt>
   11650:	movw	r2, #29765	; 0x7445
   11654:	movw	r3, #30244	; 0x7624
   11658:	mov	r1, r0
   1165c:	mov	r0, #1
   11660:	movt	r2, #1
   11664:	movt	r3, #1
   11668:	bl	112c8 <__printf_chk@plt>
   1166c:	cmp	r6, #0
   11670:	mov	r0, #5
   11674:	mov	r1, #0
   11678:	moveq	r6, r5
   1167c:	bl	11310 <setlocale@plt>
   11680:	cmp	r0, #0
   11684:	beq	116bc <__assert_fail@plt+0x31c>
   11688:	movw	r1, #30284	; 0x764c
   1168c:	mov	r2, #3
   11690:	movt	r1, #1
   11694:	bl	11370 <strncmp@plt>
   11698:	cmp	r0, #0
   1169c:	beq	116bc <__assert_fail@plt+0x31c>
   116a0:	movw	r1, #30288	; 0x7650
   116a4:	mov	r0, #0
   116a8:	mov	r2, #5
   116ac:	movt	r1, #1
   116b0:	bl	11160 <dcgettext@plt>
   116b4:	ldr	r1, [r7]
   116b8:	bl	110d0 <fputs_unlocked@plt>
   116bc:	movw	r1, #30359	; 0x7697
   116c0:	mov	r0, #0
   116c4:	mov	r2, #5
   116c8:	movt	r1, #1
   116cc:	bl	11160 <dcgettext@plt>
   116d0:	movw	r2, #30244	; 0x7624
   116d4:	mov	r1, r0
   116d8:	mov	r0, #1
   116dc:	mov	r3, r5
   116e0:	movt	r2, #1
   116e4:	bl	112c8 <__printf_chk@plt>
   116e8:	movw	r1, #30386	; 0x76b2
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #1
   116f8:	bl	11160 <dcgettext@plt>
   116fc:	mov	r1, r0
   11700:	movw	r0, #30154	; 0x75ca
   11704:	movw	r3, #29348	; 0x72a4
   11708:	cmp	r6, r5
   1170c:	mov	r2, r6
   11710:	movt	r0, #1
   11714:	movt	r3, #1
   11718:	moveq	r3, r0
   1171c:	mov	r0, #1
   11720:	bl	112c8 <__printf_chk@plt>
   11724:	mov	r0, r4
   11728:	bl	1125c <exit@plt>
   1172c:	movw	r0, #33136	; 0x8170
   11730:	movw	r1, #29196	; 0x720c
   11734:	mov	r2, #5
   11738:	movt	r0, #2
   1173c:	movt	r1, #1
   11740:	ldr	r5, [r0]
   11744:	mov	r0, #0
   11748:	bl	11160 <dcgettext@plt>
   1174c:	mov	r2, r0
   11750:	movw	r0, #33160	; 0x8188
   11754:	mov	r1, #1
   11758:	movt	r0, #2
   1175c:	ldr	r3, [r0]
   11760:	mov	r0, r5
   11764:	bl	112e0 <__fprintf_chk@plt>
   11768:	mov	r0, r4
   1176c:	bl	1125c <exit@plt>
   11770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11774:	add	fp, sp, #28
   11778:	sub	sp, sp, #36	; 0x24
   1177c:	mov	r8, #0
   11780:	mov	r6, r0
   11784:	mvn	r0, #0
   11788:	mov	r4, r1
   1178c:	str	r0, [sp, #32]
   11790:	str	r0, [sp, #28]
   11794:	str	r8, [sp, #24]
   11798:	str	r8, [sp, #20]
   1179c:	ldr	r0, [r1]
   117a0:	bl	122e8 <__assert_fail@plt+0xf48>
   117a4:	movw	r1, #29348	; 0x72a4
   117a8:	mov	r0, #6
   117ac:	movt	r1, #1
   117b0:	bl	11310 <setlocale@plt>
   117b4:	movw	r5, #29769	; 0x7449
   117b8:	movw	r1, #29739	; 0x742b
   117bc:	movt	r5, #1
   117c0:	movt	r1, #1
   117c4:	mov	r0, r5
   117c8:	bl	11364 <bindtextdomain@plt>
   117cc:	mov	r0, r5
   117d0:	bl	11178 <textdomain@plt>
   117d4:	movw	r0, #33052	; 0x811c
   117d8:	mov	r1, #125	; 0x7d
   117dc:	movt	r0, #2
   117e0:	str	r1, [r0]
   117e4:	movw	r0, #8660	; 0x21d4
   117e8:	movt	r0, #1
   117ec:	bl	171e8 <__assert_fail@plt+0x5e48>
   117f0:	movw	r5, #29763	; 0x7443
   117f4:	movw	r7, #30512	; 0x7730
   117f8:	mov	r0, #0
   117fc:	mov	r9, #0
   11800:	mov	sl, #0
   11804:	movt	r5, #1
   11808:	movt	r7, #1
   1180c:	str	r0, [sp, #12]
   11810:	mov	r0, r6
   11814:	mov	r1, r4
   11818:	mov	r2, r5
   1181c:	mov	r3, r7
   11820:	str	r8, [sp]
   11824:	bl	11244 <getopt_long@plt>
   11828:	cmp	r0, #255	; 0xff
   1182c:	ble	1189c <__assert_fail@plt+0x4fc>
   11830:	cmp	r0, #256	; 0x100
   11834:	beq	11850 <__assert_fail@plt+0x4b0>
   11838:	movw	r1, #258	; 0x102
   1183c:	cmp	r0, r1
   11840:	bne	11860 <__assert_fail@plt+0x4c0>
   11844:	mov	r0, #1
   11848:	str	r0, [sp, #12]
   1184c:	b	11810 <__assert_fail@plt+0x470>
   11850:	movw	r0, #33144	; 0x8178
   11854:	movt	r0, #2
   11858:	ldr	r9, [r0]
   1185c:	b	11810 <__assert_fail@plt+0x470>
   11860:	movw	r1, #257	; 0x101
   11864:	cmp	r0, r1
   11868:	bne	11db0 <__assert_fail@plt+0xa10>
   1186c:	movw	r0, #33144	; 0x8178
   11870:	movt	r0, #2
   11874:	ldr	sl, [r0]
   11878:	mov	r0, sl
   1187c:	bl	11280 <strlen@plt>
   11880:	cmp	r0, #0
   11884:	beq	11810 <__assert_fail@plt+0x470>
   11888:	sub	r0, r0, #1
   1188c:	ldrb	r1, [sl, r0]
   11890:	cmp	r1, #58	; 0x3a
   11894:	strbeq	r8, [sl, r0]
   11898:	b	11810 <__assert_fail@plt+0x470>
   1189c:	cmn	r0, #1
   118a0:	bne	11d50 <__assert_fail@plt+0x9b0>
   118a4:	movw	r0, #33128	; 0x8168
   118a8:	movt	r0, #2
   118ac:	ldr	r0, [r0]
   118b0:	cmp	r0, r6
   118b4:	bge	11db8 <__assert_fail@plt+0xa18>
   118b8:	ldr	r8, [r4, r0, lsl #2]
   118bc:	mov	r0, r8
   118c0:	bl	11358 <canonicalize_file_name@plt>
   118c4:	mov	r7, r0
   118c8:	cmp	r0, #0
   118cc:	beq	1194c <__assert_fail@plt+0x5ac>
   118d0:	movw	r0, #31723	; 0x7beb
   118d4:	mov	r1, r7
   118d8:	movt	r0, #1
   118dc:	bl	110f4 <strcmp@plt>
   118e0:	clz	r0, r0
   118e4:	lsr	r5, r0, #5
   118e8:	mov	r0, r7
   118ec:	bl	122c0 <__assert_fail@plt+0xf20>
   118f0:	cmp	r5, #0
   118f4:	bne	11960 <__assert_fail@plt+0x5c0>
   118f8:	ldr	r0, [sp, #12]
   118fc:	eor	r0, r0, #1
   11900:	tst	r0, #1
   11904:	bne	11960 <__assert_fail@plt+0x5c0>
   11908:	movw	r1, #29810	; 0x7472
   1190c:	mov	r0, #0
   11910:	mov	r2, #5
   11914:	movt	r1, #1
   11918:	bl	11160 <dcgettext@plt>
   1191c:	movw	r1, #31723	; 0x7beb
   11920:	mov	r4, r0
   11924:	mov	r0, #4
   11928:	movt	r1, #1
   1192c:	bl	13d84 <__assert_fail@plt+0x29e4>
   11930:	mov	r3, r0
   11934:	mov	r0, #0
   11938:	mov	r1, #0
   1193c:	mov	r2, r4
   11940:	bl	111f0 <error@plt>
   11944:	mov	r0, #125	; 0x7d
   11948:	bl	1149c <__assert_fail@plt+0xfc>
   1194c:	mov	r5, #0
   11950:	mov	r0, r7
   11954:	bl	122c0 <__assert_fail@plt+0xf20>
   11958:	cmp	r5, #0
   1195c:	beq	118f8 <__assert_fail@plt+0x558>
   11960:	mov	r7, #0
   11964:	cmp	r5, #0
   11968:	bne	11a7c <__assert_fail@plt+0x6dc>
   1196c:	cmp	sl, #0
   11970:	beq	11990 <__assert_fail@plt+0x5f0>
   11974:	mov	r0, #0
   11978:	add	r1, sp, #32
   1197c:	add	r2, sp, #28
   11980:	mov	r3, #0
   11984:	str	r0, [sp]
   11988:	mov	r0, sl
   1198c:	bl	142c4 <__assert_fail@plt+0x2f24>
   11990:	ldr	r0, [sp, #32]
   11994:	cmn	r0, #1
   11998:	beq	11a50 <__assert_fail@plt+0x6b0>
   1199c:	cmp	r9, #0
   119a0:	ldrne	r1, [sp, #28]
   119a4:	movne	r7, #0
   119a8:	cmnne	r1, #1
   119ac:	bne	11a5c <__assert_fail@plt+0x6bc>
   119b0:	bl	11100 <getpwuid@plt>
   119b4:	cmp	r0, #0
   119b8:	beq	11a50 <__assert_fail@plt+0x6b0>
   119bc:	ldr	r1, [sp, #28]
   119c0:	cmn	r1, #1
   119c4:	bne	119d0 <__assert_fail@plt+0x630>
   119c8:	ldr	r1, [r0, #12]
   119cc:	str	r1, [sp, #28]
   119d0:	ldr	r7, [r0]
   119d4:	cmp	r9, #0
   119d8:	bne	11a5c <__assert_fail@plt+0x6bc>
   119dc:	cmp	r7, #0
   119e0:	ldrne	r1, [sp, #28]
   119e4:	cmnne	r1, #1
   119e8:	beq	11a7c <__assert_fail@plt+0x6dc>
   119ec:	add	r2, sp, #24
   119f0:	mov	r0, r7
   119f4:	bl	152f8 <__assert_fail@plt+0x3f58>
   119f8:	cmp	r0, #1
   119fc:	strge	r0, [sp, #20]
   11a00:	mov	r0, r8
   11a04:	bl	111cc <chroot@plt>
   11a08:	cmp	r0, #0
   11a0c:	beq	11a8c <__assert_fail@plt+0x6ec>
   11a10:	bl	11298 <__errno_location@plt>
   11a14:	movw	r1, #29866	; 0x74aa
   11a18:	ldr	r4, [r0]
   11a1c:	mov	r0, #0
   11a20:	mov	r2, #5
   11a24:	movt	r1, #1
   11a28:	bl	11160 <dcgettext@plt>
   11a2c:	mov	r6, r0
   11a30:	mov	r0, #4
   11a34:	mov	r1, r8
   11a38:	bl	13d84 <__assert_fail@plt+0x29e4>
   11a3c:	mov	r3, r0
   11a40:	mov	r0, #125	; 0x7d
   11a44:	mov	r1, r4
   11a48:	mov	r2, r6
   11a4c:	bl	111f0 <error@plt>
   11a50:	mov	r7, #0
   11a54:	cmp	r9, #0
   11a58:	beq	119dc <__assert_fail@plt+0x63c>
   11a5c:	ldrb	r0, [r9]
   11a60:	cmp	r0, #0
   11a64:	beq	11a7c <__assert_fail@plt+0x6dc>
   11a68:	add	r1, sp, #24
   11a6c:	add	r2, sp, #20
   11a70:	mov	r0, r9
   11a74:	mov	r3, #0
   11a78:	bl	11e7c <__assert_fail@plt+0xadc>
   11a7c:	mov	r0, r8
   11a80:	bl	111cc <chroot@plt>
   11a84:	cmp	r0, #0
   11a88:	bne	11a10 <__assert_fail@plt+0x670>
   11a8c:	ldr	r0, [sp, #12]
   11a90:	tst	r0, #1
   11a94:	bne	11aac <__assert_fail@plt+0x70c>
   11a98:	movw	r0, #31723	; 0x7beb
   11a9c:	movt	r0, #1
   11aa0:	bl	11184 <chdir@plt>
   11aa4:	cmp	r0, #0
   11aa8:	bne	11e20 <__assert_fail@plt+0xa80>
   11aac:	movw	r0, #33128	; 0x8168
   11ab0:	movt	r0, #2
   11ab4:	ldr	r0, [r0]
   11ab8:	add	r0, r0, #1
   11abc:	cmp	r0, r6
   11ac0:	bne	11b04 <__assert_fail@plt+0x764>
   11ac4:	movw	r0, #29932	; 0x74ec
   11ac8:	movt	r0, #1
   11acc:	bl	111fc <getenv@plt>
   11ad0:	movw	r2, #29946	; 0x74fa
   11ad4:	movw	r3, #29938	; 0x74f2
   11ad8:	cmp	r0, #0
   11adc:	mov	r1, #0
   11ae0:	movt	r2, #1
   11ae4:	movt	r3, #1
   11ae8:	movne	r3, r0
   11aec:	str	r3, [r4]
   11af0:	str	r2, [r4, #4]
   11af4:	str	r1, [r4, #8]
   11af8:	cmp	sl, #0
   11afc:	bne	11b10 <__assert_fail@plt+0x770>
   11b00:	b	11b6c <__assert_fail@plt+0x7cc>
   11b04:	add	r4, r4, r0, lsl #2
   11b08:	cmp	sl, #0
   11b0c:	beq	11b6c <__assert_fail@plt+0x7cc>
   11b10:	mov	r0, #0
   11b14:	add	r1, sp, #32
   11b18:	add	r2, sp, #28
   11b1c:	mov	r3, #0
   11b20:	str	r0, [sp]
   11b24:	mov	r0, sl
   11b28:	bl	142c4 <__assert_fail@plt+0x2f24>
   11b2c:	cmp	r0, #0
   11b30:	beq	11b6c <__assert_fail@plt+0x7cc>
   11b34:	mov	r5, r0
   11b38:	ldr	r0, [sp, #32]
   11b3c:	cmn	r0, #1
   11b40:	bne	11b78 <__assert_fail@plt+0x7d8>
   11b44:	ldr	r0, [sp, #28]
   11b48:	cmn	r0, #1
   11b4c:	bne	11bd4 <__assert_fail@plt+0x834>
   11b50:	bl	11298 <__errno_location@plt>
   11b54:	ldr	r1, [r0]
   11b58:	movw	r2, #30695	; 0x77e7
   11b5c:	mov	r0, #125	; 0x7d
   11b60:	mov	r3, r5
   11b64:	movt	r2, #1
   11b68:	bl	111f0 <error@plt>
   11b6c:	ldr	r0, [sp, #32]
   11b70:	cmn	r0, #1
   11b74:	beq	11bd4 <__assert_fail@plt+0x834>
   11b78:	cmp	r9, #0
   11b7c:	ldrne	r1, [sp, #28]
   11b80:	cmnne	r1, #1
   11b84:	bne	11bb0 <__assert_fail@plt+0x810>
   11b88:	bl	11100 <getpwuid@plt>
   11b8c:	ldr	r1, [sp, #28]
   11b90:	cmp	r0, #0
   11b94:	beq	11bcc <__assert_fail@plt+0x82c>
   11b98:	cmn	r1, #1
   11b9c:	bne	11ba8 <__assert_fail@plt+0x808>
   11ba0:	ldr	r1, [r0, #12]
   11ba4:	str	r1, [sp, #28]
   11ba8:	ldr	r7, [r0]
   11bac:	b	11bd4 <__assert_fail@plt+0x834>
   11bb0:	ldr	r5, [sp, #24]
   11bb4:	mov	r0, #0
   11bb8:	str	r0, [sp, #16]
   11bbc:	ldrb	r0, [r9]
   11bc0:	cmp	r0, #0
   11bc4:	bne	11bf4 <__assert_fail@plt+0x854>
   11bc8:	b	11c54 <__assert_fail@plt+0x8b4>
   11bcc:	cmn	r1, #1
   11bd0:	beq	11e4c <__assert_fail@plt+0xaac>
   11bd4:	ldr	r5, [sp, #24]
   11bd8:	mov	r0, #0
   11bdc:	cmp	r9, #0
   11be0:	str	r0, [sp, #16]
   11be4:	beq	11c30 <__assert_fail@plt+0x890>
   11be8:	ldrb	r0, [r9]
   11bec:	cmp	r0, #0
   11bf0:	beq	11c54 <__assert_fail@plt+0x8b4>
   11bf4:	ldr	r0, [sp, #20]
   11bf8:	add	r1, sp, #16
   11bfc:	add	r2, sp, #20
   11c00:	clz	r0, r0
   11c04:	lsr	r3, r0, #5
   11c08:	mov	r0, r9
   11c0c:	bl	11e7c <__assert_fail@plt+0xadc>
   11c10:	cmp	r0, #0
   11c14:	beq	11c50 <__assert_fail@plt+0x8b0>
   11c18:	ldr	r0, [sp, #20]
   11c1c:	cmp	r0, #0
   11c20:	bne	11c54 <__assert_fail@plt+0x8b4>
   11c24:	mov	r0, #125	; 0x7d
   11c28:	sub	sp, fp, #28
   11c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c30:	cmp	r7, #0
   11c34:	ldrne	r1, [sp, #28]
   11c38:	cmnne	r1, #1
   11c3c:	bne	11d04 <__assert_fail@plt+0x964>
   11c40:	ldr	r0, [sp, #32]
   11c44:	cmn	r0, #1
   11c48:	bne	11c54 <__assert_fail@plt+0x8b4>
   11c4c:	b	11c68 <__assert_fail@plt+0x8c8>
   11c50:	ldr	r5, [sp, #16]
   11c54:	ldr	r0, [sp, #20]
   11c58:	mov	r1, r5
   11c5c:	bl	1119c <setgroups@plt>
   11c60:	cmp	r0, #0
   11c64:	bne	11de4 <__assert_fail@plt+0xa44>
   11c68:	ldr	r0, [sp, #16]
   11c6c:	bl	122c0 <__assert_fail@plt+0xf20>
   11c70:	ldr	r0, [sp, #24]
   11c74:	bl	122c0 <__assert_fail@plt+0xf20>
   11c78:	ldr	r0, [sp, #28]
   11c7c:	cmn	r0, #1
   11c80:	beq	11c90 <__assert_fail@plt+0x8f0>
   11c84:	bl	11208 <setgid@plt>
   11c88:	cmp	r0, #0
   11c8c:	bne	11df8 <__assert_fail@plt+0xa58>
   11c90:	ldr	r0, [sp, #32]
   11c94:	cmn	r0, #1
   11c98:	beq	11ca8 <__assert_fail@plt+0x908>
   11c9c:	bl	11340 <setuid@plt>
   11ca0:	cmp	r0, #0
   11ca4:	bne	11e0c <__assert_fail@plt+0xa6c>
   11ca8:	ldr	r0, [r4]
   11cac:	mov	r1, r4
   11cb0:	bl	1113c <execvp@plt>
   11cb4:	bl	11298 <__errno_location@plt>
   11cb8:	movw	r1, #30101	; 0x7595
   11cbc:	ldr	r5, [r0]
   11cc0:	mov	r0, #0
   11cc4:	mov	r2, #5
   11cc8:	movt	r1, #1
   11ccc:	bl	11160 <dcgettext@plt>
   11cd0:	mov	r6, r0
   11cd4:	ldr	r0, [r4]
   11cd8:	bl	142ac <__assert_fail@plt+0x2f0c>
   11cdc:	mov	r3, r0
   11ce0:	mov	r0, #0
   11ce4:	mov	r1, r5
   11ce8:	mov	r2, r6
   11cec:	bl	111f0 <error@plt>
   11cf0:	cmp	r5, #2
   11cf4:	mov	r0, #126	; 0x7e
   11cf8:	movweq	r0, #127	; 0x7f
   11cfc:	sub	sp, fp, #28
   11d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d04:	add	r2, sp, #16
   11d08:	mov	r0, r7
   11d0c:	bl	152f8 <__assert_fail@plt+0x3f58>
   11d10:	cmp	r0, #0
   11d14:	ble	11d30 <__assert_fail@plt+0x990>
   11d18:	ldr	r5, [sp, #16]
   11d1c:	str	r0, [sp, #20]
   11d20:	ldr	r0, [sp, #32]
   11d24:	cmn	r0, #1
   11d28:	bne	11c54 <__assert_fail@plt+0x8b4>
   11d2c:	b	11c68 <__assert_fail@plt+0x8c8>
   11d30:	ldr	r0, [sp, #20]
   11d34:	cmp	r0, #0
   11d38:	bne	11c40 <__assert_fail@plt+0x8a0>
   11d3c:	bl	11298 <__errno_location@plt>
   11d40:	ldr	r4, [r0]
   11d44:	movw	r1, #29988	; 0x7524
   11d48:	movt	r1, #1
   11d4c:	b	11e30 <__assert_fail@plt+0xa90>
   11d50:	cmn	r0, #3
   11d54:	bne	11da0 <__assert_fail@plt+0xa00>
   11d58:	movw	r0, #33048	; 0x8118
   11d5c:	movw	r2, #29779	; 0x7453
   11d60:	mov	r1, #0
   11d64:	movt	r0, #2
   11d68:	movt	r2, #1
   11d6c:	str	r1, [sp, #4]
   11d70:	movw	r1, #29732	; 0x7424
   11d74:	movt	r1, #1
   11d78:	ldr	r3, [r0]
   11d7c:	movw	r0, #33140	; 0x8174
   11d80:	str	r2, [sp]
   11d84:	movw	r2, #29765	; 0x7445
   11d88:	movt	r0, #2
   11d8c:	movt	r2, #1
   11d90:	ldr	r0, [r0]
   11d94:	bl	14b44 <__assert_fail@plt+0x37a4>
   11d98:	mov	r0, #0
   11d9c:	bl	1125c <exit@plt>
   11da0:	cmn	r0, #2
   11da4:	bne	11db0 <__assert_fail@plt+0xa10>
   11da8:	mov	r0, #0
   11dac:	bl	1149c <__assert_fail@plt+0xfc>
   11db0:	mov	r0, #125	; 0x7d
   11db4:	bl	1149c <__assert_fail@plt+0xfc>
   11db8:	movw	r1, #29794	; 0x7462
   11dbc:	mov	r0, #0
   11dc0:	mov	r2, #5
   11dc4:	movt	r1, #1
   11dc8:	bl	11160 <dcgettext@plt>
   11dcc:	mov	r2, r0
   11dd0:	mov	r0, #0
   11dd4:	mov	r1, #0
   11dd8:	bl	111f0 <error@plt>
   11ddc:	mov	r0, #125	; 0x7d
   11de0:	bl	1149c <__assert_fail@plt+0xfc>
   11de4:	bl	11298 <__errno_location@plt>
   11de8:	ldr	r4, [r0]
   11dec:	movw	r1, #30022	; 0x7546
   11df0:	movt	r1, #1
   11df4:	b	11e30 <__assert_fail@plt+0xa90>
   11df8:	bl	11298 <__errno_location@plt>
   11dfc:	ldr	r4, [r0]
   11e00:	movw	r1, #30056	; 0x7568
   11e04:	movt	r1, #1
   11e08:	b	11e30 <__assert_fail@plt+0xa90>
   11e0c:	bl	11298 <__errno_location@plt>
   11e10:	ldr	r4, [r0]
   11e14:	movw	r1, #30079	; 0x757f
   11e18:	movt	r1, #1
   11e1c:	b	11e30 <__assert_fail@plt+0xa90>
   11e20:	bl	11298 <__errno_location@plt>
   11e24:	ldr	r4, [r0]
   11e28:	movw	r1, #29901	; 0x74cd
   11e2c:	movt	r1, #1
   11e30:	mov	r0, #0
   11e34:	mov	r2, #5
   11e38:	bl	11160 <dcgettext@plt>
   11e3c:	mov	r2, r0
   11e40:	mov	r0, #125	; 0x7d
   11e44:	mov	r1, r4
   11e48:	bl	111f0 <error@plt>
   11e4c:	bl	11298 <__errno_location@plt>
   11e50:	movw	r1, #29949	; 0x74fd
   11e54:	ldr	r4, [r0]
   11e58:	mov	r0, #0
   11e5c:	mov	r2, #5
   11e60:	movt	r1, #1
   11e64:	bl	11160 <dcgettext@plt>
   11e68:	ldr	r3, [sp, #32]
   11e6c:	mov	r2, r0
   11e70:	mov	r0, #125	; 0x7d
   11e74:	mov	r1, r4
   11e78:	bl	111f0 <error@plt>
   11e7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e80:	add	fp, sp, #28
   11e84:	sub	sp, sp, #36	; 0x24
   11e88:	mov	r9, #0
   11e8c:	mov	r5, r3
   11e90:	mov	r8, r2
   11e94:	mov	sl, r1
   11e98:	mov	r7, r0
   11e9c:	str	r9, [sp, #32]
   11ea0:	bl	1527c <__assert_fail@plt+0x3edc>
   11ea4:	movw	r1, #30470	; 0x7706
   11ea8:	mov	r4, r0
   11eac:	movt	r1, #1
   11eb0:	bl	11304 <strtok@plt>
   11eb4:	cmp	r0, #0
   11eb8:	str	r4, [sp, #20]
   11ebc:	str	sl, [sp, #16]
   11ec0:	str	r7, [sp, #8]
   11ec4:	str	r8, [sp, #4]
   11ec8:	str	r5, [sp, #12]
   11ecc:	beq	1200c <__assert_fail@plt+0xc6c>
   11ed0:	mov	r6, r0
   11ed4:	cmp	r5, #0
   11ed8:	beq	12018 <__assert_fail@plt+0xc78>
   11edc:	movw	sl, #30470	; 0x7706
   11ee0:	add	r8, sp, #24
   11ee4:	mov	r7, #0
   11ee8:	mov	r5, #0
   11eec:	mov	r9, #0
   11ef0:	movt	sl, #1
   11ef4:	b	11f1c <__assert_fail@plt+0xb7c>
   11ef8:	ldr	r0, [sp, #24]
   11efc:	str	r0, [r5, r9, lsl #2]
   11f00:	add	r9, r9, #1
   11f04:	mov	r0, #0
   11f08:	mov	r1, sl
   11f0c:	bl	11304 <strtok@plt>
   11f10:	mov	r6, r0
   11f14:	cmp	r0, #0
   11f18:	beq	12108 <__assert_fail@plt+0xd68>
   11f1c:	movw	r0, #29348	; 0x72a4
   11f20:	mov	r1, #0
   11f24:	mov	r2, #10
   11f28:	mov	r3, r8
   11f2c:	movt	r0, #1
   11f30:	str	r0, [sp]
   11f34:	mov	r0, r6
   11f38:	bl	15bac <__assert_fail@plt+0x480c>
   11f3c:	cmp	r0, #0
   11f40:	ldreq	r0, [sp, #28]
   11f44:	cmpeq	r0, #0
   11f48:	beq	11fa0 <__assert_fail@plt+0xc00>
   11f4c:	mov	r0, r6
   11f50:	bl	11394 <getgrnam@plt>
   11f54:	cmp	r0, #0
   11f58:	bne	11fd8 <__assert_fail@plt+0xc38>
   11f5c:	bl	11298 <__errno_location@plt>
   11f60:	movw	r1, #30472	; 0x7708
   11f64:	ldr	r4, [r0]
   11f68:	mov	r0, #0
   11f6c:	mov	r2, #5
   11f70:	movt	r1, #1
   11f74:	bl	11160 <dcgettext@plt>
   11f78:	mov	r7, r0
   11f7c:	mov	r0, r6
   11f80:	bl	142ac <__assert_fail@plt+0x2f0c>
   11f84:	mov	r3, r0
   11f88:	mov	r0, #0
   11f8c:	mov	r1, r4
   11f90:	mov	r2, r7
   11f94:	bl	111f0 <error@plt>
   11f98:	mvn	r7, #0
   11f9c:	b	11f04 <__assert_fail@plt+0xb64>
   11fa0:	sub	r4, r6, #1
   11fa4:	bl	11250 <__ctype_b_loc@plt>
   11fa8:	ldr	r0, [r0]
   11fac:	ldrb	r1, [r4, #1]!
   11fb0:	add	r2, r0, r1, lsl #1
   11fb4:	ldrb	r2, [r2, #1]
   11fb8:	tst	r2, #32
   11fbc:	bne	11fac <__assert_fail@plt+0xc0c>
   11fc0:	cmp	r1, #43	; 0x2b
   11fc4:	beq	11fe8 <__assert_fail@plt+0xc48>
   11fc8:	mov	r0, r4
   11fcc:	bl	11394 <getgrnam@plt>
   11fd0:	cmp	r0, #0
   11fd4:	beq	11fe8 <__assert_fail@plt+0xc48>
   11fd8:	ldr	r0, [r0, #8]
   11fdc:	mov	r1, #0
   11fe0:	str	r1, [sp, #28]
   11fe4:	str	r0, [sp, #24]
   11fe8:	ldr	r0, [sp, #32]
   11fec:	cmp	r9, r0
   11ff0:	bne	11ef8 <__assert_fail@plt+0xb58>
   11ff4:	mov	r0, r5
   11ff8:	add	r1, sp, #32
   11ffc:	mov	r2, #4
   12000:	bl	14f24 <__assert_fail@plt+0x3b84>
   12004:	mov	r5, r0
   12008:	b	11ef8 <__assert_fail@plt+0xb58>
   1200c:	mov	r5, #0
   12010:	mov	r7, #0
   12014:	b	12108 <__assert_fail@plt+0xd68>
   12018:	movw	r8, #29348	; 0x72a4
   1201c:	movw	r4, #30470	; 0x7706
   12020:	add	sl, sp, #24
   12024:	mov	r5, #0
   12028:	mov	r9, #0
   1202c:	mov	r7, #0
   12030:	movt	r8, #1
   12034:	movt	r4, #1
   12038:	b	12060 <__assert_fail@plt+0xcc0>
   1203c:	ldr	r0, [sp, #24]
   12040:	mov	r1, r4
   12044:	str	r0, [r5, r9, lsl #2]
   12048:	mov	r0, #0
   1204c:	bl	11304 <strtok@plt>
   12050:	mov	r6, r0
   12054:	add	r9, r9, #1
   12058:	cmp	r0, #0
   1205c:	beq	12108 <__assert_fail@plt+0xd68>
   12060:	mov	r0, r6
   12064:	mov	r1, #0
   12068:	mov	r2, #10
   1206c:	mov	r3, sl
   12070:	str	r8, [sp]
   12074:	bl	15bac <__assert_fail@plt+0x480c>
   12078:	cmp	r0, #0
   1207c:	ldreq	r0, [sp, #28]
   12080:	cmpeq	r0, #0
   12084:	beq	120cc <__assert_fail@plt+0xd2c>
   12088:	mov	r0, r6
   1208c:	bl	11394 <getgrnam@plt>
   12090:	cmp	r0, #0
   12094:	beq	12154 <__assert_fail@plt+0xdb4>
   12098:	ldr	r0, [r0, #8]
   1209c:	mov	r1, #0
   120a0:	str	r1, [sp, #28]
   120a4:	str	r0, [sp, #24]
   120a8:	ldr	r0, [sp, #32]
   120ac:	cmp	r9, r0
   120b0:	bne	1203c <__assert_fail@plt+0xc9c>
   120b4:	mov	r0, r5
   120b8:	add	r1, sp, #32
   120bc:	mov	r2, #4
   120c0:	bl	14f24 <__assert_fail@plt+0x3b84>
   120c4:	mov	r5, r0
   120c8:	b	1203c <__assert_fail@plt+0xc9c>
   120cc:	sub	r6, r6, #1
   120d0:	bl	11250 <__ctype_b_loc@plt>
   120d4:	ldr	r0, [r0]
   120d8:	ldrb	r1, [r6, #1]!
   120dc:	add	r2, r0, r1, lsl #1
   120e0:	ldrb	r2, [r2, #1]
   120e4:	tst	r2, #32
   120e8:	bne	120d8 <__assert_fail@plt+0xd38>
   120ec:	cmp	r1, #43	; 0x2b
   120f0:	beq	120a8 <__assert_fail@plt+0xd08>
   120f4:	mov	r0, r6
   120f8:	bl	11394 <getgrnam@plt>
   120fc:	cmp	r0, #0
   12100:	bne	12098 <__assert_fail@plt+0xcf8>
   12104:	b	120a8 <__assert_fail@plt+0xd08>
   12108:	orrs	r0, r7, r9
   1210c:	mvneq	r7, #0
   12110:	bne	12174 <__assert_fail@plt+0xdd4>
   12114:	ldr	r0, [sp, #12]
   12118:	cmp	r0, #0
   1211c:	beq	12174 <__assert_fail@plt+0xdd4>
   12120:	movw	r1, #30489	; 0x7719
   12124:	mov	r0, #0
   12128:	mov	r2, #5
   1212c:	movt	r1, #1
   12130:	bl	11160 <dcgettext@plt>
   12134:	mov	r4, r0
   12138:	ldr	r0, [sp, #8]
   1213c:	bl	142ac <__assert_fail@plt+0x2f0c>
   12140:	mov	r3, r0
   12144:	mov	r0, #0
   12148:	mov	r1, #0
   1214c:	mov	r2, r4
   12150:	bl	111f0 <error@plt>
   12154:	ldr	r0, [sp, #16]
   12158:	mvn	r7, #0
   1215c:	str	r5, [r0]
   12160:	ldr	r0, [sp, #20]
   12164:	bl	122c0 <__assert_fail@plt+0xf20>
   12168:	mov	r0, r7
   1216c:	sub	sp, fp, #28
   12170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12174:	ldr	r0, [sp, #16]
   12178:	cmp	r7, #0
   1217c:	str	r5, [r0]
   12180:	ldr	r0, [sp, #20]
   12184:	beq	12198 <__assert_fail@plt+0xdf8>
   12188:	bl	122c0 <__assert_fail@plt+0xf20>
   1218c:	mov	r0, r7
   12190:	sub	sp, fp, #28
   12194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12198:	ldr	r1, [sp, #4]
   1219c:	mov	r7, #0
   121a0:	str	r9, [r1]
   121a4:	bl	122c0 <__assert_fail@plt+0xf20>
   121a8:	mov	r0, r7
   121ac:	sub	sp, fp, #28
   121b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121b4:	movw	r1, #33152	; 0x8180
   121b8:	movt	r1, #2
   121bc:	str	r0, [r1, #4]
   121c0:	bx	lr
   121c4:	movw	r1, #33152	; 0x8180
   121c8:	movt	r1, #2
   121cc:	strb	r0, [r1]
   121d0:	bx	lr
   121d4:	push	{r4, r5, r6, sl, fp, lr}
   121d8:	add	fp, sp, #16
   121dc:	sub	sp, sp, #8
   121e0:	movw	r0, #33140	; 0x8174
   121e4:	movt	r0, #2
   121e8:	ldr	r0, [r0]
   121ec:	bl	16938 <__assert_fail@plt+0x5598>
   121f0:	cmp	r0, #0
   121f4:	beq	1221c <__assert_fail@plt+0xe7c>
   121f8:	movw	r5, #33152	; 0x8180
   121fc:	movt	r5, #2
   12200:	ldrb	r0, [r5]
   12204:	cmp	r0, #0
   12208:	beq	12248 <__assert_fail@plt+0xea8>
   1220c:	bl	11298 <__errno_location@plt>
   12210:	ldr	r0, [r0]
   12214:	cmp	r0, #32
   12218:	bne	12248 <__assert_fail@plt+0xea8>
   1221c:	movw	r0, #33136	; 0x8170
   12220:	movt	r0, #2
   12224:	ldr	r0, [r0]
   12228:	bl	16938 <__assert_fail@plt+0x5598>
   1222c:	cmp	r0, #0
   12230:	subeq	sp, fp, #16
   12234:	popeq	{r4, r5, r6, sl, fp, pc}
   12238:	movw	r0, #33052	; 0x811c
   1223c:	movt	r0, #2
   12240:	ldr	r0, [r0]
   12244:	bl	11124 <_exit@plt>
   12248:	movw	r1, #30679	; 0x77d7
   1224c:	mov	r0, #0
   12250:	mov	r2, #5
   12254:	movt	r1, #1
   12258:	bl	11160 <dcgettext@plt>
   1225c:	ldr	r6, [r5, #4]
   12260:	mov	r4, r0
   12264:	bl	11298 <__errno_location@plt>
   12268:	ldr	r5, [r0]
   1226c:	cmp	r6, #0
   12270:	bne	1228c <__assert_fail@plt+0xeec>
   12274:	movw	r2, #30695	; 0x77e7
   12278:	mov	r0, #0
   1227c:	mov	r1, r5
   12280:	mov	r3, r4
   12284:	movt	r2, #1
   12288:	b	122ac <__assert_fail@plt+0xf0c>
   1228c:	mov	r0, r6
   12290:	bl	13f24 <__assert_fail@plt+0x2b84>
   12294:	movw	r2, #30691	; 0x77e3
   12298:	mov	r3, r0
   1229c:	str	r4, [sp]
   122a0:	mov	r0, #0
   122a4:	mov	r1, r5
   122a8:	movt	r2, #1
   122ac:	bl	111f0 <error@plt>
   122b0:	movw	r0, #33052	; 0x811c
   122b4:	movt	r0, #2
   122b8:	ldr	r0, [r0]
   122bc:	bl	11124 <_exit@plt>
   122c0:	push	{r4, r5, r6, sl, fp, lr}
   122c4:	add	fp, sp, #16
   122c8:	mov	r4, r0
   122cc:	bl	11298 <__errno_location@plt>
   122d0:	ldr	r6, [r0]
   122d4:	mov	r5, r0
   122d8:	mov	r0, r4
   122dc:	bl	11118 <free@plt>
   122e0:	str	r6, [r5]
   122e4:	pop	{r4, r5, r6, sl, fp, pc}
   122e8:	push	{r4, r5, fp, lr}
   122ec:	add	fp, sp, #8
   122f0:	cmp	r0, #0
   122f4:	beq	12388 <__assert_fail@plt+0xfe8>
   122f8:	mov	r1, #47	; 0x2f
   122fc:	mov	r4, r0
   12300:	bl	11328 <strrchr@plt>
   12304:	cmp	r0, #0
   12308:	mov	r5, r4
   1230c:	addne	r5, r0, #1
   12310:	sub	r0, r5, r4
   12314:	cmp	r0, #7
   12318:	blt	1236c <__assert_fail@plt+0xfcc>
   1231c:	movw	r1, #30754	; 0x7822
   12320:	sub	r0, r5, #7
   12324:	mov	r2, #7
   12328:	movt	r1, #1
   1232c:	bl	11370 <strncmp@plt>
   12330:	cmp	r0, #0
   12334:	bne	1236c <__assert_fail@plt+0xfcc>
   12338:	movw	r1, #30762	; 0x782a
   1233c:	mov	r0, r5
   12340:	mov	r2, #3
   12344:	movt	r1, #1
   12348:	bl	11370 <strncmp@plt>
   1234c:	cmp	r0, #0
   12350:	beq	1235c <__assert_fail@plt+0xfbc>
   12354:	mov	r4, r5
   12358:	b	1236c <__assert_fail@plt+0xfcc>
   1235c:	movw	r0, #33120	; 0x8160
   12360:	add	r4, r5, #3
   12364:	movt	r0, #2
   12368:	str	r4, [r0]
   1236c:	movw	r0, #33124	; 0x8164
   12370:	movt	r0, #2
   12374:	str	r4, [r0]
   12378:	movw	r0, #33160	; 0x8188
   1237c:	movt	r0, #2
   12380:	str	r4, [r0]
   12384:	pop	{r4, r5, fp, pc}
   12388:	movw	r0, #33136	; 0x8170
   1238c:	mov	r1, #55	; 0x37
   12390:	mov	r2, #1
   12394:	movt	r0, #2
   12398:	ldr	r3, [r0]
   1239c:	movw	r0, #30698	; 0x77ea
   123a0:	movt	r0, #1
   123a4:	bl	111a8 <fwrite@plt>
   123a8:	bl	1137c <abort@plt>
   123ac:	push	{r4, r5, r6, sl, fp, lr}
   123b0:	add	fp, sp, #16
   123b4:	mov	r4, r0
   123b8:	movw	r0, #33168	; 0x8190
   123bc:	movt	r0, #2
   123c0:	cmp	r4, #0
   123c4:	moveq	r4, r0
   123c8:	bl	11298 <__errno_location@plt>
   123cc:	ldr	r6, [r0]
   123d0:	mov	r5, r0
   123d4:	mov	r0, r4
   123d8:	mov	r1, #48	; 0x30
   123dc:	bl	151d8 <__assert_fail@plt+0x3e38>
   123e0:	str	r6, [r5]
   123e4:	pop	{r4, r5, r6, sl, fp, pc}
   123e8:	movw	r1, #33168	; 0x8190
   123ec:	cmp	r0, #0
   123f0:	movt	r1, #2
   123f4:	movne	r1, r0
   123f8:	ldr	r0, [r1]
   123fc:	bx	lr
   12400:	movw	r2, #33168	; 0x8190
   12404:	cmp	r0, #0
   12408:	movt	r2, #2
   1240c:	movne	r2, r0
   12410:	str	r1, [r2]
   12414:	bx	lr
   12418:	movw	r3, #33168	; 0x8190
   1241c:	cmp	r0, #0
   12420:	and	r2, r2, #1
   12424:	movt	r3, #2
   12428:	movne	r3, r0
   1242c:	ubfx	r0, r1, #5, #3
   12430:	and	r1, r1, #31
   12434:	add	ip, r3, r0, lsl #2
   12438:	mov	r0, #1
   1243c:	ldr	r3, [ip, #8]
   12440:	and	r0, r0, r3, lsr r1
   12444:	eor	r2, r0, r2
   12448:	eor	r1, r3, r2, lsl r1
   1244c:	str	r1, [ip, #8]
   12450:	bx	lr
   12454:	movw	r2, #33168	; 0x8190
   12458:	cmp	r0, #0
   1245c:	movt	r2, #2
   12460:	movne	r2, r0
   12464:	ldr	r0, [r2, #4]
   12468:	str	r1, [r2, #4]
   1246c:	bx	lr
   12470:	push	{fp, lr}
   12474:	mov	fp, sp
   12478:	movw	r3, #33168	; 0x8190
   1247c:	cmp	r0, #0
   12480:	movt	r3, #2
   12484:	movne	r3, r0
   12488:	cmp	r1, #0
   1248c:	mov	r0, #10
   12490:	cmpne	r2, #0
   12494:	str	r0, [r3]
   12498:	bne	124a0 <__assert_fail@plt+0x1100>
   1249c:	bl	1137c <abort@plt>
   124a0:	str	r1, [r3, #40]	; 0x28
   124a4:	str	r2, [r3, #44]	; 0x2c
   124a8:	pop	{fp, pc}
   124ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124b0:	add	fp, sp, #28
   124b4:	sub	sp, sp, #20
   124b8:	mov	r7, r0
   124bc:	ldr	r0, [fp, #8]
   124c0:	movw	r5, #33168	; 0x8190
   124c4:	mov	r8, r3
   124c8:	mov	r9, r2
   124cc:	mov	sl, r1
   124d0:	movt	r5, #2
   124d4:	cmp	r0, #0
   124d8:	movne	r5, r0
   124dc:	bl	11298 <__errno_location@plt>
   124e0:	ldr	r2, [r5, #40]	; 0x28
   124e4:	ldr	r3, [r5, #44]	; 0x2c
   124e8:	mov	r4, r0
   124ec:	ldm	r5, {r0, r1}
   124f0:	add	r5, r5, #8
   124f4:	ldr	r6, [r4]
   124f8:	stm	sp, {r0, r1, r5}
   124fc:	mov	r0, r7
   12500:	mov	r1, sl
   12504:	str	r2, [sp, #12]
   12508:	str	r3, [sp, #16]
   1250c:	mov	r2, r9
   12510:	mov	r3, r8
   12514:	bl	12524 <__assert_fail@plt+0x1184>
   12518:	str	r6, [r4]
   1251c:	sub	sp, fp, #28
   12520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12528:	add	fp, sp, #28
   1252c:	sub	sp, sp, #156	; 0x9c
   12530:	str	r0, [fp, #-84]	; 0xffffffac
   12534:	add	r0, r2, #1
   12538:	mov	r6, r1
   1253c:	mov	r7, r3
   12540:	str	r2, [fp, #-80]	; 0xffffffb0
   12544:	str	r0, [sp, #80]	; 0x50
   12548:	ldr	r0, [fp, #12]
   1254c:	and	r1, r0, #1
   12550:	str	r1, [sp, #36]	; 0x24
   12554:	and	r1, r0, #4
   12558:	str	r1, [sp, #32]
   1255c:	ubfx	r8, r0, #1, #1
   12560:	bl	111c0 <__ctype_get_mb_cur_max@plt>
   12564:	str	r0, [sp, #40]	; 0x28
   12568:	ldr	r0, [fp, #24]
   1256c:	ldr	r4, [fp, #8]
   12570:	mov	r1, #0
   12574:	str	r1, [fp, #-52]	; 0xffffffcc
   12578:	mov	r1, #0
   1257c:	str	r1, [sp, #60]	; 0x3c
   12580:	mov	r1, #1
   12584:	str	r1, [sp, #84]	; 0x54
   12588:	str	r0, [sp, #76]	; 0x4c
   1258c:	ldr	r0, [fp, #20]
   12590:	str	r0, [sp, #72]	; 0x48
   12594:	mov	r0, #0
   12598:	str	r0, [sp, #56]	; 0x38
   1259c:	mov	r0, #0
   125a0:	str	r0, [fp, #-88]	; 0xffffffa8
   125a4:	mov	r0, #0
   125a8:	str	r0, [fp, #-72]	; 0xffffffb8
   125ac:	mov	r0, #0
   125b0:	cmp	r4, #10
   125b4:	bhi	138d0 <__assert_fail@plt+0x2530>
   125b8:	add	r1, pc, #24
   125bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   125c0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   125c4:	mov	r5, r6
   125c8:	mov	r9, #0
   125cc:	mov	r2, #1
   125d0:	mov	r3, #0
   125d4:	ldr	pc, [r1, r4, lsl #2]
   125d8:	andeq	r2, r1, r0, lsr #13
   125dc:	ldrdeq	r2, [r1], -ip
   125e0:			; <UNDEFINED> instruction: 0x000126b0
   125e4:	muleq	r1, r8, r6
   125e8:	ldrdeq	r2, [r1], -r0
   125ec:	andeq	r2, r1, r4, lsr r7
   125f0:	andeq	r2, r1, r0, asr #13
   125f4:	andeq	r2, r1, ip, lsr #19
   125f8:	andeq	r2, r1, r4, lsl #12
   125fc:	andeq	r2, r1, r4, lsl #12
   12600:	andeq	r2, r1, ip, lsr r8
   12604:	movw	r6, #30844	; 0x787c
   12608:	mov	r0, #0
   1260c:	mov	r2, #5
   12610:	movt	r6, #1
   12614:	mov	r1, r6
   12618:	bl	11160 <dcgettext@plt>
   1261c:	cmp	r0, r6
   12620:	str	r0, [sp, #72]	; 0x48
   12624:	bne	12814 <__assert_fail@plt+0x1474>
   12628:	bl	16bb8 <__assert_fail@plt+0x5818>
   1262c:	ldrb	r1, [r0]
   12630:	and	r1, r1, #223	; 0xdf
   12634:	cmp	r1, #71	; 0x47
   12638:	beq	12794 <__assert_fail@plt+0x13f4>
   1263c:	cmp	r1, #85	; 0x55
   12640:	bne	127f8 <__assert_fail@plt+0x1458>
   12644:	ldrb	r1, [r0, #1]
   12648:	and	r1, r1, #223	; 0xdf
   1264c:	cmp	r1, #84	; 0x54
   12650:	bne	127f8 <__assert_fail@plt+0x1458>
   12654:	ldrb	r1, [r0, #2]
   12658:	and	r1, r1, #223	; 0xdf
   1265c:	cmp	r1, #70	; 0x46
   12660:	bne	127f8 <__assert_fail@plt+0x1458>
   12664:	ldrb	r1, [r0, #3]
   12668:	cmp	r1, #45	; 0x2d
   1266c:	bne	127f8 <__assert_fail@plt+0x1458>
   12670:	ldrb	r1, [r0, #4]
   12674:	cmp	r1, #56	; 0x38
   12678:	bne	127f8 <__assert_fail@plt+0x1458>
   1267c:	ldrb	r0, [r0, #5]
   12680:	cmp	r0, #0
   12684:	movw	r0, #30848	; 0x7880
   12688:	movt	r0, #1
   1268c:	str	r0, [sp, #72]	; 0x48
   12690:	bne	127f8 <__assert_fail@plt+0x1458>
   12694:	b	12814 <__assert_fail@plt+0x1474>
   12698:	mov	r0, #1
   1269c:	b	126dc <__assert_fail@plt+0x133c>
   126a0:	mov	r4, #0
   126a4:	mov	r9, #0
   126a8:	mov	r2, r0
   126ac:	b	1272c <__assert_fail@plt+0x138c>
   126b0:	tst	r8, #1
   126b4:	bne	126dc <__assert_fail@plt+0x133c>
   126b8:	mov	r2, r0
   126bc:	b	12704 <__assert_fail@plt+0x1364>
   126c0:	mov	r0, #1
   126c4:	mov	r9, #0
   126c8:	mov	r4, #5
   126cc:	b	12748 <__assert_fail@plt+0x13a8>
   126d0:	mov	r2, #1
   126d4:	tst	r8, #1
   126d8:	beq	12704 <__assert_fail@plt+0x1364>
   126dc:	mov	r1, #1
   126e0:	mov	r9, #0
   126e4:	mov	r4, #2
   126e8:	mov	r2, r0
   126ec:	mov	r3, #1
   126f0:	str	r1, [fp, #-72]	; 0xffffffb8
   126f4:	movw	r1, #30846	; 0x787e
   126f8:	movt	r1, #1
   126fc:	str	r1, [fp, #-88]	; 0xffffffa8
   12700:	b	129ac <__assert_fail@plt+0x160c>
   12704:	cmp	r5, #0
   12708:	mov	r9, #1
   1270c:	mov	r4, #2
   12710:	movne	r0, #39	; 0x27
   12714:	strbne	r0, [ip]
   12718:	movw	r0, #30846	; 0x787e
   1271c:	movt	r0, #1
   12720:	str	r0, [fp, #-88]	; 0xffffffa8
   12724:	mov	r0, #1
   12728:	str	r0, [fp, #-72]	; 0xffffffb8
   1272c:	mov	r3, #0
   12730:	b	129ac <__assert_fail@plt+0x160c>
   12734:	mov	r4, #5
   12738:	tst	r8, #1
   1273c:	beq	12764 <__assert_fail@plt+0x13c4>
   12740:	mov	r0, #1
   12744:	mov	r9, #0
   12748:	str	r0, [fp, #-72]	; 0xffffffb8
   1274c:	movw	r0, #30842	; 0x787a
   12750:	mov	r2, #1
   12754:	mov	r3, #1
   12758:	movt	r0, #1
   1275c:	str	r0, [fp, #-88]	; 0xffffffa8
   12760:	b	129ac <__assert_fail@plt+0x160c>
   12764:	cmp	r5, #0
   12768:	mov	r3, #0
   1276c:	mov	r9, #1
   12770:	mov	r2, #1
   12774:	movne	r0, #34	; 0x22
   12778:	strbne	r0, [ip]
   1277c:	movw	r0, #30842	; 0x787a
   12780:	movt	r0, #1
   12784:	str	r0, [fp, #-88]	; 0xffffffa8
   12788:	mov	r0, #1
   1278c:	str	r0, [fp, #-72]	; 0xffffffb8
   12790:	b	129ac <__assert_fail@plt+0x160c>
   12794:	ldrb	r1, [r0, #1]
   12798:	and	r1, r1, #223	; 0xdf
   1279c:	cmp	r1, #66	; 0x42
   127a0:	bne	127f8 <__assert_fail@plt+0x1458>
   127a4:	ldrb	r1, [r0, #2]
   127a8:	cmp	r1, #49	; 0x31
   127ac:	bne	127f8 <__assert_fail@plt+0x1458>
   127b0:	ldrb	r1, [r0, #3]
   127b4:	cmp	r1, #56	; 0x38
   127b8:	bne	127f8 <__assert_fail@plt+0x1458>
   127bc:	ldrb	r1, [r0, #4]
   127c0:	cmp	r1, #48	; 0x30
   127c4:	bne	127f8 <__assert_fail@plt+0x1458>
   127c8:	ldrb	r1, [r0, #5]
   127cc:	cmp	r1, #51	; 0x33
   127d0:	bne	127f8 <__assert_fail@plt+0x1458>
   127d4:	ldrb	r1, [r0, #6]
   127d8:	cmp	r1, #48	; 0x30
   127dc:	bne	127f8 <__assert_fail@plt+0x1458>
   127e0:	ldrb	r0, [r0, #7]
   127e4:	cmp	r0, #0
   127e8:	movw	r0, #30856	; 0x7888
   127ec:	movt	r0, #1
   127f0:	str	r0, [sp, #72]	; 0x48
   127f4:	beq	12814 <__assert_fail@plt+0x1474>
   127f8:	movw	r1, #30842	; 0x787a
   127fc:	movw	r0, #30846	; 0x787e
   12800:	cmp	r4, #9
   12804:	movt	r1, #1
   12808:	movt	r0, #1
   1280c:	moveq	r0, r1
   12810:	str	r0, [sp, #72]	; 0x48
   12814:	movw	r6, #30846	; 0x787e
   12818:	mov	r0, #0
   1281c:	mov	r2, #5
   12820:	movt	r6, #1
   12824:	mov	r1, r6
   12828:	bl	11160 <dcgettext@plt>
   1282c:	cmp	r0, r6
   12830:	str	r0, [sp, #76]	; 0x4c
   12834:	beq	12880 <__assert_fail@plt+0x14e0>
   12838:	ldr	ip, [fp, #-84]	; 0xffffffac
   1283c:	mov	r9, #0
   12840:	tst	r8, #1
   12844:	bne	12988 <__assert_fail@plt+0x15e8>
   12848:	ldr	r0, [sp, #72]	; 0x48
   1284c:	ldrb	r0, [r0]
   12850:	cmp	r0, #0
   12854:	beq	12988 <__assert_fail@plt+0x15e8>
   12858:	ldr	r1, [sp, #72]	; 0x48
   1285c:	mov	r9, #0
   12860:	add	r1, r1, #1
   12864:	cmp	r9, r5
   12868:	strbcc	r0, [ip, r9]
   1286c:	ldrb	r0, [r1, r9]
   12870:	add	r9, r9, #1
   12874:	cmp	r0, #0
   12878:	bne	12864 <__assert_fail@plt+0x14c4>
   1287c:	b	12988 <__assert_fail@plt+0x15e8>
   12880:	bl	16bb8 <__assert_fail@plt+0x5818>
   12884:	ldrb	r1, [r0]
   12888:	and	r1, r1, #223	; 0xdf
   1288c:	cmp	r1, #71	; 0x47
   12890:	beq	12900 <__assert_fail@plt+0x1560>
   12894:	ldr	ip, [fp, #-84]	; 0xffffffac
   12898:	cmp	r1, #85	; 0x55
   1289c:	bne	1295c <__assert_fail@plt+0x15bc>
   128a0:	ldrb	r1, [r0, #1]
   128a4:	and	r1, r1, #223	; 0xdf
   128a8:	cmp	r1, #84	; 0x54
   128ac:	bne	1295c <__assert_fail@plt+0x15bc>
   128b0:	ldrb	r1, [r0, #2]
   128b4:	and	r1, r1, #223	; 0xdf
   128b8:	cmp	r1, #70	; 0x46
   128bc:	bne	1295c <__assert_fail@plt+0x15bc>
   128c0:	ldrb	r1, [r0, #3]
   128c4:	cmp	r1, #45	; 0x2d
   128c8:	bne	1295c <__assert_fail@plt+0x15bc>
   128cc:	ldrb	r1, [r0, #4]
   128d0:	cmp	r1, #56	; 0x38
   128d4:	bne	1295c <__assert_fail@plt+0x15bc>
   128d8:	ldrb	r0, [r0, #5]
   128dc:	cmp	r0, #0
   128e0:	bne	1295c <__assert_fail@plt+0x15bc>
   128e4:	movw	r0, #30852	; 0x7884
   128e8:	movt	r0, #1
   128ec:	str	r0, [sp, #76]	; 0x4c
   128f0:	mov	r9, #0
   128f4:	tst	r8, #1
   128f8:	beq	12848 <__assert_fail@plt+0x14a8>
   128fc:	b	12988 <__assert_fail@plt+0x15e8>
   12900:	ldrb	r1, [r0, #1]
   12904:	ldr	ip, [fp, #-84]	; 0xffffffac
   12908:	and	r1, r1, #223	; 0xdf
   1290c:	cmp	r1, #66	; 0x42
   12910:	bne	1295c <__assert_fail@plt+0x15bc>
   12914:	ldrb	r1, [r0, #2]
   12918:	cmp	r1, #49	; 0x31
   1291c:	bne	1295c <__assert_fail@plt+0x15bc>
   12920:	ldrb	r1, [r0, #3]
   12924:	cmp	r1, #56	; 0x38
   12928:	bne	1295c <__assert_fail@plt+0x15bc>
   1292c:	ldrb	r1, [r0, #4]
   12930:	cmp	r1, #48	; 0x30
   12934:	bne	1295c <__assert_fail@plt+0x15bc>
   12938:	ldrb	r1, [r0, #5]
   1293c:	cmp	r1, #51	; 0x33
   12940:	bne	1295c <__assert_fail@plt+0x15bc>
   12944:	ldrb	r1, [r0, #6]
   12948:	cmp	r1, #48	; 0x30
   1294c:	bne	1295c <__assert_fail@plt+0x15bc>
   12950:	ldrb	r0, [r0, #7]
   12954:	cmp	r0, #0
   12958:	beq	13770 <__assert_fail@plt+0x23d0>
   1295c:	movw	r0, #30846	; 0x787e
   12960:	cmp	r4, #9
   12964:	movt	r0, #1
   12968:	mov	r1, r0
   1296c:	movw	r0, #30842	; 0x787a
   12970:	movt	r0, #1
   12974:	moveq	r1, r0
   12978:	str	r1, [sp, #76]	; 0x4c
   1297c:	mov	r9, #0
   12980:	tst	r8, #1
   12984:	beq	12848 <__assert_fail@plt+0x14a8>
   12988:	ldr	r6, [sp, #76]	; 0x4c
   1298c:	mov	r0, r6
   12990:	bl	11280 <strlen@plt>
   12994:	ldr	ip, [fp, #-84]	; 0xffffffac
   12998:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1299c:	str	r0, [fp, #-72]	; 0xffffffb8
   129a0:	str	r6, [fp, #-88]	; 0xffffffa8
   129a4:	mov	r2, #1
   129a8:	mov	r3, r8
   129ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129b0:	str	r4, [fp, #-64]	; 0xffffffc0
   129b4:	mov	sl, #0
   129b8:	str	r3, [fp, #-76]	; 0xffffffb4
   129bc:	str	r2, [sp, #88]	; 0x58
   129c0:	cmp	r0, #0
   129c4:	movwne	r0, #1
   129c8:	and	r1, r0, r3
   129cc:	and	r1, r2, r1
   129d0:	str	r1, [sp, #48]	; 0x30
   129d4:	sub	r1, r4, #2
   129d8:	clz	r1, r1
   129dc:	lsr	r1, r1, #5
   129e0:	and	r1, r1, r3
   129e4:	str	r1, [sp, #44]	; 0x2c
   129e8:	subs	r1, r4, #2
   129ec:	eor	r4, r3, #1
   129f0:	movwne	r1, #1
   129f4:	str	r4, [sp, #92]	; 0x5c
   129f8:	orr	r4, r1, r4
   129fc:	and	r1, r1, r2
   12a00:	and	r0, r0, r1
   12a04:	str	r4, [sp, #64]	; 0x40
   12a08:	ldr	r4, [sp, #84]	; 0x54
   12a0c:	str	r0, [fp, #-60]	; 0xffffffc4
   12a10:	orr	r0, r1, r3
   12a14:	ldr	r1, [fp, #16]
   12a18:	eor	r0, r0, #1
   12a1c:	clz	r1, r1
   12a20:	lsr	r1, r1, #5
   12a24:	orr	r0, r1, r0
   12a28:	str	r0, [fp, #-68]	; 0xffffffbc
   12a2c:	eor	r0, r2, #1
   12a30:	str	r0, [sp, #52]	; 0x34
   12a34:	cmn	r7, #1
   12a38:	beq	12a48 <__assert_fail@plt+0x16a8>
   12a3c:	cmp	sl, r7
   12a40:	bne	12a54 <__assert_fail@plt+0x16b4>
   12a44:	b	136e8 <__assert_fail@plt+0x2348>
   12a48:	ldrb	r0, [lr, sl]
   12a4c:	cmp	r0, #0
   12a50:	beq	136f0 <__assert_fail@plt+0x2350>
   12a54:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12a58:	cmp	r0, #0
   12a5c:	beq	12abc <__assert_fail@plt+0x171c>
   12a60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a64:	mov	r6, r5
   12a68:	add	r5, sl, r0
   12a6c:	cmp	r0, #2
   12a70:	bcc	12adc <__assert_fail@plt+0x173c>
   12a74:	mov	r0, #0
   12a78:	cmn	r7, #1
   12a7c:	str	r0, [fp, #-56]	; 0xffffffc8
   12a80:	bne	12a98 <__assert_fail@plt+0x16f8>
   12a84:	mov	r0, lr
   12a88:	bl	11280 <strlen@plt>
   12a8c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12a90:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a94:	mov	r7, r0
   12a98:	cmp	r5, r7
   12a9c:	bls	12aec <__assert_fail@plt+0x174c>
   12aa0:	mov	r0, #0
   12aa4:	mov	r5, r6
   12aa8:	str	r0, [fp, #-48]	; 0xffffffd0
   12aac:	ldrb	r6, [lr, sl]
   12ab0:	cmp	r6, #126	; 0x7e
   12ab4:	bls	12b3c <__assert_fail@plt+0x179c>
   12ab8:	b	13098 <__assert_fail@plt+0x1cf8>
   12abc:	mov	r0, #0
   12ac0:	str	r0, [fp, #-56]	; 0xffffffc8
   12ac4:	mov	r0, #0
   12ac8:	str	r0, [fp, #-48]	; 0xffffffd0
   12acc:	ldrb	r6, [lr, sl]
   12ad0:	cmp	r6, #126	; 0x7e
   12ad4:	bls	12b3c <__assert_fail@plt+0x179c>
   12ad8:	b	13098 <__assert_fail@plt+0x1cf8>
   12adc:	mov	r0, #0
   12ae0:	str	r0, [fp, #-56]	; 0xffffffc8
   12ae4:	cmp	r5, r7
   12ae8:	bhi	12aa0 <__assert_fail@plt+0x1700>
   12aec:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12af0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12af4:	add	r0, lr, sl
   12af8:	bl	11268 <bcmp@plt>
   12afc:	ldr	r2, [sp, #92]	; 0x5c
   12b00:	cmp	r0, #0
   12b04:	mov	r1, r0
   12b08:	mov	r5, r6
   12b0c:	movwne	r1, #1
   12b10:	orr	r1, r1, r2
   12b14:	tst	r1, #1
   12b18:	beq	137b0 <__assert_fail@plt+0x2410>
   12b1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b20:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12b24:	clz	r0, r0
   12b28:	lsr	r0, r0, #5
   12b2c:	str	r0, [fp, #-48]	; 0xffffffd0
   12b30:	ldrb	r6, [lr, sl]
   12b34:	cmp	r6, #126	; 0x7e
   12b38:	bhi	13098 <__assert_fail@plt+0x1cf8>
   12b3c:	add	r3, pc, #16
   12b40:	mov	r8, #1
   12b44:	mov	r2, #110	; 0x6e
   12b48:	mov	r0, #97	; 0x61
   12b4c:	mov	r1, #0
   12b50:	ldr	pc, [r3, r6, lsl #2]
   12b54:	andeq	r2, r1, r0, asr lr
   12b58:	muleq	r1, r8, r0
   12b5c:	muleq	r1, r8, r0
   12b60:	muleq	r1, r8, r0
   12b64:	muleq	r1, r8, r0
   12b68:	muleq	r1, r8, r0
   12b6c:	muleq	r1, r8, r0
   12b70:	andeq	r3, r1, ip, asr #2
   12b74:	andeq	r2, r1, r0, lsr lr
   12b78:	andeq	r2, r1, r8, lsr #28
   12b7c:	andeq	r2, r1, ip, lsr lr
   12b80:	andeq	r2, r1, ip, ror #30
   12b84:	andeq	r2, r1, r0, lsr #28
   12b88:	andeq	r2, r1, r8, lsr lr
   12b8c:	muleq	r1, r8, r0
   12b90:	muleq	r1, r8, r0
   12b94:	muleq	r1, r8, r0
   12b98:	muleq	r1, r8, r0
   12b9c:	muleq	r1, r8, r0
   12ba0:	muleq	r1, r8, r0
   12ba4:	muleq	r1, r8, r0
   12ba8:	muleq	r1, r8, r0
   12bac:	muleq	r1, r8, r0
   12bb0:	muleq	r1, r8, r0
   12bb4:	muleq	r1, r8, r0
   12bb8:	muleq	r1, r8, r0
   12bbc:	muleq	r1, r8, r0
   12bc0:	muleq	r1, r8, r0
   12bc4:	muleq	r1, r8, r0
   12bc8:	muleq	r1, r8, r0
   12bcc:	muleq	r1, r8, r0
   12bd0:	muleq	r1, r8, r0
   12bd4:	andeq	r2, r1, r4, asr #27
   12bd8:	andeq	r2, r1, r8, asr #27
   12bdc:	andeq	r2, r1, r8, asr #27
   12be0:			; <UNDEFINED> instruction: 0x00012db8
   12be4:	andeq	r2, r1, r8, asr #27
   12be8:	andeq	r2, r1, r0, asr sp
   12bec:	andeq	r2, r1, r8, asr #27
   12bf0:	andeq	r2, r1, r4, ror pc
   12bf4:	andeq	r2, r1, r8, asr #27
   12bf8:	andeq	r2, r1, r8, asr #27
   12bfc:	andeq	r2, r1, r8, asr #27
   12c00:	andeq	r2, r1, r0, asr sp
   12c04:	andeq	r2, r1, r0, asr sp
   12c08:	andeq	r2, r1, r0, asr sp
   12c0c:	andeq	r2, r1, r0, asr sp
   12c10:	andeq	r2, r1, r0, asr sp
   12c14:	andeq	r2, r1, r0, asr sp
   12c18:	andeq	r2, r1, r0, asr sp
   12c1c:	andeq	r2, r1, r0, asr sp
   12c20:	andeq	r2, r1, r0, asr sp
   12c24:	andeq	r2, r1, r0, asr sp
   12c28:	andeq	r2, r1, r0, asr sp
   12c2c:	andeq	r2, r1, r0, asr sp
   12c30:	andeq	r2, r1, r0, asr sp
   12c34:	andeq	r2, r1, r0, asr sp
   12c38:	andeq	r2, r1, r0, asr sp
   12c3c:	andeq	r2, r1, r0, asr sp
   12c40:	andeq	r2, r1, r8, asr #27
   12c44:	andeq	r2, r1, r8, asr #27
   12c48:	andeq	r2, r1, r8, asr #27
   12c4c:	andeq	r2, r1, r8, asr #27
   12c50:	andeq	r2, r1, r8, lsr pc
   12c54:	muleq	r1, r8, r0
   12c58:	andeq	r2, r1, r0, asr sp
   12c5c:	andeq	r2, r1, r0, asr sp
   12c60:	andeq	r2, r1, r0, asr sp
   12c64:	andeq	r2, r1, r0, asr sp
   12c68:	andeq	r2, r1, r0, asr sp
   12c6c:	andeq	r2, r1, r0, asr sp
   12c70:	andeq	r2, r1, r0, asr sp
   12c74:	andeq	r2, r1, r0, asr sp
   12c78:	andeq	r2, r1, r0, asr sp
   12c7c:	andeq	r2, r1, r0, asr sp
   12c80:	andeq	r2, r1, r0, asr sp
   12c84:	andeq	r2, r1, r0, asr sp
   12c88:	andeq	r2, r1, r0, asr sp
   12c8c:	andeq	r2, r1, r0, asr sp
   12c90:	andeq	r2, r1, r0, asr sp
   12c94:	andeq	r2, r1, r0, asr sp
   12c98:	andeq	r2, r1, r0, asr sp
   12c9c:	andeq	r2, r1, r0, asr sp
   12ca0:	andeq	r2, r1, r0, asr sp
   12ca4:	andeq	r2, r1, r0, asr sp
   12ca8:	andeq	r2, r1, r0, asr sp
   12cac:	andeq	r2, r1, r0, asr sp
   12cb0:	andeq	r2, r1, r0, asr sp
   12cb4:	andeq	r2, r1, r0, asr sp
   12cb8:	andeq	r2, r1, r0, asr sp
   12cbc:	andeq	r2, r1, r0, asr sp
   12cc0:	andeq	r2, r1, r8, asr #27
   12cc4:	strdeq	r2, [r1], -ip
   12cc8:	andeq	r2, r1, r0, asr sp
   12ccc:	andeq	r2, r1, r8, asr #27
   12cd0:	andeq	r2, r1, r0, asr sp
   12cd4:	andeq	r2, r1, r8, asr #27
   12cd8:	andeq	r2, r1, r0, asr sp
   12cdc:	andeq	r2, r1, r0, asr sp
   12ce0:	andeq	r2, r1, r0, asr sp
   12ce4:	andeq	r2, r1, r0, asr sp
   12ce8:	andeq	r2, r1, r0, asr sp
   12cec:	andeq	r2, r1, r0, asr sp
   12cf0:	andeq	r2, r1, r0, asr sp
   12cf4:	andeq	r2, r1, r0, asr sp
   12cf8:	andeq	r2, r1, r0, asr sp
   12cfc:	andeq	r2, r1, r0, asr sp
   12d00:	andeq	r2, r1, r0, asr sp
   12d04:	andeq	r2, r1, r0, asr sp
   12d08:	andeq	r2, r1, r0, asr sp
   12d0c:	andeq	r2, r1, r0, asr sp
   12d10:	andeq	r2, r1, r0, asr sp
   12d14:	andeq	r2, r1, r0, asr sp
   12d18:	andeq	r2, r1, r0, asr sp
   12d1c:	andeq	r2, r1, r0, asr sp
   12d20:	andeq	r2, r1, r0, asr sp
   12d24:	andeq	r2, r1, r0, asr sp
   12d28:	andeq	r2, r1, r0, asr sp
   12d2c:	andeq	r2, r1, r0, asr sp
   12d30:	andeq	r2, r1, r0, asr sp
   12d34:	andeq	r2, r1, r0, asr sp
   12d38:	andeq	r2, r1, r0, asr sp
   12d3c:	andeq	r2, r1, r0, asr sp
   12d40:	muleq	r1, r0, sp
   12d44:	andeq	r2, r1, r8, asr #27
   12d48:	muleq	r1, r0, sp
   12d4c:			; <UNDEFINED> instruction: 0x00012db8
   12d50:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d54:	tst	r0, #1
   12d58:	bne	13010 <__assert_fail@plt+0x1c70>
   12d5c:	ldr	r1, [fp, #16]
   12d60:	ubfx	r0, r6, #5, #3
   12d64:	mov	r2, #1
   12d68:	ldr	r0, [r1, r0, lsl #2]
   12d6c:	and	r1, r6, #31
   12d70:	tst	r0, r2, lsl r1
   12d74:	beq	13010 <__assert_fail@plt+0x1c70>
   12d78:	mov	r0, r6
   12d7c:	mov	r1, r8
   12d80:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12d84:	tst	r2, #1
   12d88:	beq	13030 <__assert_fail@plt+0x1c90>
   12d8c:	b	1378c <__assert_fail@plt+0x23ec>
   12d90:	cmp	r7, #1
   12d94:	beq	12db8 <__assert_fail@plt+0x1a18>
   12d98:	mov	r8, #0
   12d9c:	cmn	r7, #1
   12da0:	bne	12ffc <__assert_fail@plt+0x1c5c>
   12da4:	ldrb	r0, [lr, #1]
   12da8:	cmp	r0, #0
   12dac:	beq	12db8 <__assert_fail@plt+0x1a18>
   12db0:	mvn	r7, #0
   12db4:	b	12ffc <__assert_fail@plt+0x1c5c>
   12db8:	mov	r8, #0
   12dbc:	cmp	sl, #0
   12dc0:	bne	12ffc <__assert_fail@plt+0x1c5c>
   12dc4:	mov	r1, #1
   12dc8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12dcc:	cmp	r0, #2
   12dd0:	bne	12de8 <__assert_fail@plt+0x1a48>
   12dd4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12dd8:	mov	r8, r1
   12ddc:	tst	r0, #1
   12de0:	beq	12d50 <__assert_fail@plt+0x19b0>
   12de4:	b	1378c <__assert_fail@plt+0x23ec>
   12de8:	mov	r8, r1
   12dec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12df0:	tst	r0, #1
   12df4:	beq	12d5c <__assert_fail@plt+0x19bc>
   12df8:	b	13010 <__assert_fail@plt+0x1c70>
   12dfc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e00:	cmp	r0, #2
   12e04:	bne	130c4 <__assert_fail@plt+0x1d24>
   12e08:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e0c:	tst	r0, #1
   12e10:	bne	1378c <__assert_fail@plt+0x23ec>
   12e14:	mov	r0, #0
   12e18:	str	r0, [fp, #-56]	; 0xffffffc8
   12e1c:	b	130dc <__assert_fail@plt+0x1d3c>
   12e20:	mov	r0, #102	; 0x66
   12e24:	b	1314c <__assert_fail@plt+0x1dac>
   12e28:	mov	r2, #116	; 0x74
   12e2c:	b	12e3c <__assert_fail@plt+0x1a9c>
   12e30:	mov	r0, #98	; 0x62
   12e34:	b	1314c <__assert_fail@plt+0x1dac>
   12e38:	mov	r2, #114	; 0x72
   12e3c:	ldr	r0, [sp, #64]	; 0x40
   12e40:	tst	r0, #1
   12e44:	mov	r0, r2
   12e48:	bne	1314c <__assert_fail@plt+0x1dac>
   12e4c:	b	1378c <__assert_fail@plt+0x23ec>
   12e50:	ldr	r0, [sp, #88]	; 0x58
   12e54:	tst	r0, #1
   12e58:	beq	1316c <__assert_fail@plt+0x1dcc>
   12e5c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e60:	tst	r0, #1
   12e64:	bne	138c8 <__assert_fail@plt+0x2528>
   12e68:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e6c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12e70:	subs	r0, r0, #2
   12e74:	movwne	r0, #1
   12e78:	orr	r0, r0, r1
   12e7c:	tst	r0, #1
   12e80:	bne	12ebc <__assert_fail@plt+0x1b1c>
   12e84:	cmp	r9, r5
   12e88:	movcc	r0, #39	; 0x27
   12e8c:	strbcc	r0, [ip, r9]
   12e90:	add	r0, r9, #1
   12e94:	cmp	r0, r5
   12e98:	movcc	r1, #36	; 0x24
   12e9c:	strbcc	r1, [ip, r0]
   12ea0:	add	r0, r9, #2
   12ea4:	add	r9, r9, #3
   12ea8:	cmp	r0, r5
   12eac:	movcc	r1, #39	; 0x27
   12eb0:	strbcc	r1, [ip, r0]
   12eb4:	mov	r0, #1
   12eb8:	str	r0, [fp, #-52]	; 0xffffffcc
   12ebc:	mov	r1, #1
   12ec0:	cmp	r9, r5
   12ec4:	mov	r8, #0
   12ec8:	mov	r6, #48	; 0x30
   12ecc:	str	r1, [fp, #-56]	; 0xffffffc8
   12ed0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12ed4:	movcc	r0, #92	; 0x5c
   12ed8:	strbcc	r0, [ip, r9]
   12edc:	add	r0, r9, #1
   12ee0:	cmp	r1, #2
   12ee4:	beq	13338 <__assert_fail@plt+0x1f98>
   12ee8:	add	r1, sl, #1
   12eec:	cmp	r1, r7
   12ef0:	bcs	13338 <__assert_fail@plt+0x1f98>
   12ef4:	ldrb	r1, [lr, r1]
   12ef8:	sub	r1, r1, #48	; 0x30
   12efc:	uxtb	r1, r1
   12f00:	cmp	r1, #9
   12f04:	bhi	13338 <__assert_fail@plt+0x1f98>
   12f08:	cmp	r0, r5
   12f0c:	movcc	r1, #48	; 0x30
   12f10:	strbcc	r1, [ip, r0]
   12f14:	add	r0, r9, #2
   12f18:	add	r9, r9, #3
   12f1c:	cmp	r0, r5
   12f20:	movcc	r1, #48	; 0x30
   12f24:	strbcc	r1, [ip, r0]
   12f28:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f2c:	tst	r0, #1
   12f30:	beq	12d5c <__assert_fail@plt+0x19bc>
   12f34:	b	13010 <__assert_fail@plt+0x1c70>
   12f38:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f3c:	mov	r6, #63	; 0x3f
   12f40:	cmp	r0, #5
   12f44:	beq	1334c <__assert_fail@plt+0x1fac>
   12f48:	mov	r1, #0
   12f4c:	cmp	r0, #2
   12f50:	str	r1, [fp, #-56]	; 0xffffffc8
   12f54:	bne	13414 <__assert_fail@plt+0x2074>
   12f58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f5c:	mov	r8, #0
   12f60:	tst	r0, #1
   12f64:	beq	12d50 <__assert_fail@plt+0x19b0>
   12f68:	b	1378c <__assert_fail@plt+0x23ec>
   12f6c:	mov	r0, #118	; 0x76
   12f70:	b	1314c <__assert_fail@plt+0x1dac>
   12f74:	mov	r0, #1
   12f78:	mov	r6, #39	; 0x27
   12f7c:	str	r0, [sp, #60]	; 0x3c
   12f80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f84:	cmp	r0, #2
   12f88:	bne	1318c <__assert_fail@plt+0x1dec>
   12f8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f90:	tst	r0, #1
   12f94:	bne	1378c <__assert_fail@plt+0x23ec>
   12f98:	ldr	r2, [sp, #56]	; 0x38
   12f9c:	clz	r1, r5
   12fa0:	mov	r8, #1
   12fa4:	lsr	r1, r1, #5
   12fa8:	cmp	r2, #0
   12fac:	mov	r0, r2
   12fb0:	movwne	r0, #1
   12fb4:	orrs	r0, r0, r1
   12fb8:	moveq	r2, r5
   12fbc:	moveq	r5, r0
   12fc0:	cmp	r9, r5
   12fc4:	str	r2, [sp, #56]	; 0x38
   12fc8:	movcc	r0, #39	; 0x27
   12fcc:	strbcc	r0, [ip, r9]
   12fd0:	add	r0, r9, #1
   12fd4:	cmp	r0, r5
   12fd8:	movcc	r1, #92	; 0x5c
   12fdc:	strbcc	r1, [ip, r0]
   12fe0:	add	r0, r9, #2
   12fe4:	add	r9, r9, #3
   12fe8:	cmp	r0, r5
   12fec:	movcc	r1, #39	; 0x27
   12ff0:	strbcc	r1, [ip, r0]
   12ff4:	mov	r0, #0
   12ff8:	str	r0, [fp, #-52]	; 0xffffffcc
   12ffc:	mov	r0, #0
   13000:	str	r0, [fp, #-56]	; 0xffffffc8
   13004:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13008:	tst	r0, #1
   1300c:	beq	12d5c <__assert_fail@plt+0x19bc>
   13010:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13014:	mov	r1, r8
   13018:	cmp	r0, #0
   1301c:	mov	r0, r6
   13020:	beq	130e4 <__assert_fail@plt+0x1d44>
   13024:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13028:	tst	r2, #1
   1302c:	bne	1378c <__assert_fail@plt+0x23ec>
   13030:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13034:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13038:	subs	r2, r2, #2
   1303c:	movwne	r2, #1
   13040:	orr	r2, r2, r3
   13044:	tst	r2, #1
   13048:	bne	13084 <__assert_fail@plt+0x1ce4>
   1304c:	cmp	r9, r5
   13050:	movcc	r2, #39	; 0x27
   13054:	strbcc	r2, [ip, r9]
   13058:	add	r2, r9, #1
   1305c:	cmp	r2, r5
   13060:	movcc	r3, #36	; 0x24
   13064:	strbcc	r3, [ip, r2]
   13068:	add	r2, r9, #2
   1306c:	add	r9, r9, #3
   13070:	cmp	r2, r5
   13074:	movcc	r3, #39	; 0x27
   13078:	strbcc	r3, [ip, r2]
   1307c:	mov	r2, #1
   13080:	str	r2, [fp, #-52]	; 0xffffffcc
   13084:	cmp	r9, r5
   13088:	movcc	r2, #92	; 0x5c
   1308c:	strbcc	r2, [ip, r9]
   13090:	add	r9, r9, #1
   13094:	b	1312c <__assert_fail@plt+0x1d8c>
   13098:	ldr	r0, [sp, #40]	; 0x28
   1309c:	cmp	r0, #1
   130a0:	bne	131a0 <__assert_fail@plt+0x1e00>
   130a4:	bl	11250 <__ctype_b_loc@plt>
   130a8:	ldr	r0, [r0]
   130ac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   130b0:	mov	r1, #1
   130b4:	add	r0, r0, r6, lsl #1
   130b8:	ldrb	r0, [r0, #1]
   130bc:	ubfx	r8, r0, #6, #1
   130c0:	b	134f8 <__assert_fail@plt+0x2158>
   130c4:	ldr	r1, [sp, #48]	; 0x30
   130c8:	mov	r0, #0
   130cc:	str	r0, [fp, #-56]	; 0xffffffc8
   130d0:	mov	r0, #92	; 0x5c
   130d4:	cmp	r1, #0
   130d8:	beq	1314c <__assert_fail@plt+0x1dac>
   130dc:	mov	r6, #92	; 0x5c
   130e0:	mov	r8, #0
   130e4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   130e8:	cmp	r0, #0
   130ec:	bne	13124 <__assert_fail@plt+0x1d84>
   130f0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   130f4:	tst	r0, #1
   130f8:	beq	13124 <__assert_fail@plt+0x1d84>
   130fc:	cmp	r9, r5
   13100:	movcc	r0, #39	; 0x27
   13104:	strbcc	r0, [ip, r9]
   13108:	add	r0, r9, #1
   1310c:	add	r9, r9, #2
   13110:	cmp	r0, r5
   13114:	movcc	r1, #39	; 0x27
   13118:	strbcc	r1, [ip, r0]
   1311c:	mov	r0, #0
   13120:	str	r0, [fp, #-52]	; 0xffffffcc
   13124:	mov	r1, r8
   13128:	mov	r0, r6
   1312c:	cmp	r9, r5
   13130:	and	r4, r4, r1
   13134:	strbcc	r0, [ip, r9]
   13138:	add	r9, r9, #1
   1313c:	add	sl, sl, #1
   13140:	cmn	r7, #1
   13144:	bne	12a3c <__assert_fail@plt+0x169c>
   13148:	b	12a48 <__assert_fail@plt+0x16a8>
   1314c:	mov	r1, #0
   13150:	mov	r8, #0
   13154:	str	r1, [fp, #-56]	; 0xffffffc8
   13158:	ldr	r1, [sp, #88]	; 0x58
   1315c:	tst	r1, #1
   13160:	mov	r1, #0
   13164:	beq	12d50 <__assert_fail@plt+0x19b0>
   13168:	b	13024 <__assert_fail@plt+0x1c84>
   1316c:	ldr	r0, [sp, #36]	; 0x24
   13170:	mov	r6, #0
   13174:	mov	r8, #0
   13178:	cmp	r0, #0
   1317c:	mov	r0, #0
   13180:	str	r0, [fp, #-56]	; 0xffffffc8
   13184:	bne	1313c <__assert_fail@plt+0x1d9c>
   13188:	b	12d50 <__assert_fail@plt+0x19b0>
   1318c:	mov	r8, #1
   13190:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13194:	tst	r0, #1
   13198:	beq	12d5c <__assert_fail@plt+0x19bc>
   1319c:	b	13010 <__assert_fail@plt+0x1c70>
   131a0:	mov	r0, #0
   131a4:	cmn	r7, #1
   131a8:	str	r0, [fp, #-36]	; 0xffffffdc
   131ac:	str	r0, [fp, #-40]	; 0xffffffd8
   131b0:	bne	131c4 <__assert_fail@plt+0x1e24>
   131b4:	mov	r0, lr
   131b8:	bl	11280 <strlen@plt>
   131bc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   131c0:	mov	r7, r0
   131c4:	ldr	r0, [sp, #44]	; 0x2c
   131c8:	str	r4, [sp, #84]	; 0x54
   131cc:	str	r5, [sp, #28]
   131d0:	cmp	r0, #0
   131d4:	beq	13428 <__assert_fail@plt+0x2088>
   131d8:	ldr	r0, [sp, #80]	; 0x50
   131dc:	mov	r8, #1
   131e0:	mov	r5, #0
   131e4:	add	r0, r0, sl
   131e8:	str	r0, [sp, #24]
   131ec:	sub	r0, fp, #40	; 0x28
   131f0:	mov	r3, r0
   131f4:	b	13230 <__assert_fail@plt+0x1e90>
   131f8:	ldr	r5, [sp, #68]	; 0x44
   131fc:	add	r5, r0, r5
   13200:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13204:	bl	11190 <iswprint@plt>
   13208:	cmp	r0, #0
   1320c:	sub	r4, fp, #40	; 0x28
   13210:	movwne	r0, #1
   13214:	and	r8, r8, r0
   13218:	mov	r0, r4
   1321c:	bl	11154 <mbsinit@plt>
   13220:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13224:	mov	r3, r4
   13228:	cmp	r0, #0
   1322c:	bne	134ec <__assert_fail@plt+0x214c>
   13230:	str	r5, [sp, #68]	; 0x44
   13234:	add	r5, r5, sl
   13238:	sub	r0, fp, #44	; 0x2c
   1323c:	add	r1, lr, r5
   13240:	sub	r2, r7, r5
   13244:	bl	16bf0 <__assert_fail@plt+0x5850>
   13248:	cmn	r0, #2
   1324c:	beq	134ac <__assert_fail@plt+0x210c>
   13250:	ldr	ip, [fp, #-84]	; 0xffffffac
   13254:	cmn	r0, #1
   13258:	beq	134a0 <__assert_fail@plt+0x2100>
   1325c:	cmp	r0, #0
   13260:	beq	134a4 <__assert_fail@plt+0x2104>
   13264:	cmp	r0, #2
   13268:	bcc	131f8 <__assert_fail@plt+0x1e58>
   1326c:	ldr	r1, [sp, #68]	; 0x44
   13270:	ldr	r2, [sp, #24]
   13274:	add	r1, r2, r1
   13278:	sub	r2, r0, #1
   1327c:	ldrb	r3, [r1]
   13280:	sub	r3, r3, #91	; 0x5b
   13284:	cmp	r3, #33	; 0x21
   13288:	bls	132a8 <__assert_fail@plt+0x1f08>
   1328c:	add	r1, r1, #1
   13290:	subs	r2, r2, #1
   13294:	beq	131f8 <__assert_fail@plt+0x1e58>
   13298:	ldrb	r3, [r1]
   1329c:	sub	r3, r3, #91	; 0x5b
   132a0:	cmp	r3, #33	; 0x21
   132a4:	bhi	1328c <__assert_fail@plt+0x1eec>
   132a8:	add	r5, pc, #0
   132ac:	ldr	pc, [r5, r3, lsl #2]
   132b0:	andeq	r3, r1, r4, asr #15
   132b4:	andeq	r3, r1, r4, asr #15
   132b8:	andeq	r3, r1, ip, lsl #5
   132bc:	andeq	r3, r1, r4, asr #15
   132c0:	andeq	r3, r1, ip, lsl #5
   132c4:	andeq	r3, r1, r4, asr #15
   132c8:	andeq	r3, r1, ip, lsl #5
   132cc:	andeq	r3, r1, ip, lsl #5
   132d0:	andeq	r3, r1, ip, lsl #5
   132d4:	andeq	r3, r1, ip, lsl #5
   132d8:	andeq	r3, r1, ip, lsl #5
   132dc:	andeq	r3, r1, ip, lsl #5
   132e0:	andeq	r3, r1, ip, lsl #5
   132e4:	andeq	r3, r1, ip, lsl #5
   132e8:	andeq	r3, r1, ip, lsl #5
   132ec:	andeq	r3, r1, ip, lsl #5
   132f0:	andeq	r3, r1, ip, lsl #5
   132f4:	andeq	r3, r1, ip, lsl #5
   132f8:	andeq	r3, r1, ip, lsl #5
   132fc:	andeq	r3, r1, ip, lsl #5
   13300:	andeq	r3, r1, ip, lsl #5
   13304:	andeq	r3, r1, ip, lsl #5
   13308:	andeq	r3, r1, ip, lsl #5
   1330c:	andeq	r3, r1, ip, lsl #5
   13310:	andeq	r3, r1, ip, lsl #5
   13314:	andeq	r3, r1, ip, lsl #5
   13318:	andeq	r3, r1, ip, lsl #5
   1331c:	andeq	r3, r1, ip, lsl #5
   13320:	andeq	r3, r1, ip, lsl #5
   13324:	andeq	r3, r1, ip, lsl #5
   13328:	andeq	r3, r1, ip, lsl #5
   1332c:	andeq	r3, r1, ip, lsl #5
   13330:	andeq	r3, r1, ip, lsl #5
   13334:	andeq	r3, r1, r4, asr #15
   13338:	mov	r9, r0
   1333c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13340:	tst	r0, #1
   13344:	beq	12d5c <__assert_fail@plt+0x19bc>
   13348:	b	13010 <__assert_fail@plt+0x1c70>
   1334c:	mov	r0, #0
   13350:	str	r0, [fp, #-56]	; 0xffffffc8
   13354:	ldr	r0, [sp, #32]
   13358:	cmp	r0, #0
   1335c:	beq	13414 <__assert_fail@plt+0x2074>
   13360:	add	r0, sl, #2
   13364:	mov	r1, r7
   13368:	cmp	r0, r7
   1336c:	bcs	13414 <__assert_fail@plt+0x2074>
   13370:	add	r1, sl, lr
   13374:	ldrb	r1, [r1, #1]
   13378:	cmp	r1, #63	; 0x3f
   1337c:	bne	13414 <__assert_fail@plt+0x2074>
   13380:	ldrb	r8, [lr, r0]
   13384:	sub	r2, r8, #33	; 0x21
   13388:	cmp	r2, #29
   1338c:	bhi	13414 <__assert_fail@plt+0x2074>
   13390:	mov	r1, r4
   13394:	movw	r4, #20929	; 0x51c1
   13398:	mov	r3, #1
   1339c:	movt	r4, #14336	; 0x3800
   133a0:	tst	r4, r3, lsl r2
   133a4:	beq	136d0 <__assert_fail@plt+0x2330>
   133a8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   133ac:	tst	r2, #1
   133b0:	bne	1378c <__assert_fail@plt+0x23ec>
   133b4:	cmp	r9, r5
   133b8:	mov	r6, r8
   133bc:	mov	r4, r1
   133c0:	mov	sl, r0
   133c4:	mov	r8, #0
   133c8:	movcc	r2, #63	; 0x3f
   133cc:	strbcc	r2, [ip, r9]
   133d0:	add	r2, r9, #1
   133d4:	cmp	r2, r5
   133d8:	movcc	r3, #34	; 0x22
   133dc:	strbcc	r3, [ip, r2]
   133e0:	add	r2, r9, #2
   133e4:	cmp	r2, r5
   133e8:	movcc	r3, #34	; 0x22
   133ec:	strbcc	r3, [ip, r2]
   133f0:	add	r2, r9, #3
   133f4:	add	r9, r9, #4
   133f8:	cmp	r2, r5
   133fc:	movcc	r3, #63	; 0x3f
   13400:	strbcc	r3, [ip, r2]
   13404:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13408:	tst	r0, #1
   1340c:	beq	12d5c <__assert_fail@plt+0x19bc>
   13410:	b	13010 <__assert_fail@plt+0x1c70>
   13414:	mov	r8, #0
   13418:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1341c:	tst	r0, #1
   13420:	beq	12d5c <__assert_fail@plt+0x19bc>
   13424:	b	13010 <__assert_fail@plt+0x1c70>
   13428:	mov	r8, #1
   1342c:	mov	r5, #0
   13430:	sub	r4, fp, #40	; 0x28
   13434:	str	r5, [sp, #68]	; 0x44
   13438:	add	r5, r5, sl
   1343c:	sub	r0, fp, #44	; 0x2c
   13440:	mov	r3, r4
   13444:	add	r1, lr, r5
   13448:	sub	r2, r7, r5
   1344c:	bl	16bf0 <__assert_fail@plt+0x5850>
   13450:	cmn	r0, #2
   13454:	beq	134ac <__assert_fail@plt+0x210c>
   13458:	cmn	r0, #1
   1345c:	beq	134a0 <__assert_fail@plt+0x2100>
   13460:	ldr	r5, [sp, #68]	; 0x44
   13464:	cmp	r0, #0
   13468:	beq	134e8 <__assert_fail@plt+0x2148>
   1346c:	add	r5, r0, r5
   13470:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13474:	bl	11190 <iswprint@plt>
   13478:	cmp	r0, #0
   1347c:	sub	r4, fp, #40	; 0x28
   13480:	movwne	r0, #1
   13484:	and	r8, r8, r0
   13488:	mov	r0, r4
   1348c:	bl	11154 <mbsinit@plt>
   13490:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13494:	cmp	r0, #0
   13498:	beq	13434 <__assert_fail@plt+0x2094>
   1349c:	b	134ec <__assert_fail@plt+0x214c>
   134a0:	mov	r8, #0
   134a4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   134a8:	b	134e0 <__assert_fail@plt+0x2140>
   134ac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   134b0:	mov	r8, #0
   134b4:	cmp	r5, r7
   134b8:	bcs	134e0 <__assert_fail@plt+0x2140>
   134bc:	ldrb	r0, [lr, r5]
   134c0:	cmp	r0, #0
   134c4:	beq	134e0 <__assert_fail@plt+0x2140>
   134c8:	ldr	r0, [sp, #68]	; 0x44
   134cc:	add	r0, r0, #1
   134d0:	add	r5, r0, sl
   134d4:	str	r0, [sp, #68]	; 0x44
   134d8:	cmp	r5, r7
   134dc:	bcc	134bc <__assert_fail@plt+0x211c>
   134e0:	ldr	r5, [sp, #68]	; 0x44
   134e4:	b	134ec <__assert_fail@plt+0x214c>
   134e8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   134ec:	mov	r1, r5
   134f0:	ldr	r5, [sp, #28]
   134f4:	ldr	r4, [sp, #84]	; 0x54
   134f8:	ldr	r0, [sp, #52]	; 0x34
   134fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13500:	cmp	r1, #1
   13504:	orr	r2, r8, r0
   13508:	mov	r0, r1
   1350c:	bhi	13518 <__assert_fail@plt+0x2178>
   13510:	tst	r2, #1
   13514:	bne	12d50 <__assert_fail@plt+0x19b0>
   13518:	add	r0, r0, sl
   1351c:	str	r2, [sp, #84]	; 0x54
   13520:	str	r0, [fp, #-56]	; 0xffffffc8
   13524:	mov	r0, #0
   13528:	tst	r2, #1
   1352c:	bne	1360c <__assert_fail@plt+0x226c>
   13530:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13534:	tst	r1, #1
   13538:	bne	1378c <__assert_fail@plt+0x23ec>
   1353c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13540:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13544:	subs	r2, r1, #2
   13548:	movwne	r2, #1
   1354c:	orr	r2, r2, r0
   13550:	tst	r2, #1
   13554:	bne	13590 <__assert_fail@plt+0x21f0>
   13558:	cmp	r9, r5
   1355c:	add	r2, r9, #1
   13560:	mov	r0, #1
   13564:	movcc	r1, #39	; 0x27
   13568:	str	r0, [fp, #-52]	; 0xffffffcc
   1356c:	strbcc	r1, [ip, r9]
   13570:	cmp	r2, r5
   13574:	movcc	r1, #36	; 0x24
   13578:	strbcc	r1, [ip, r2]
   1357c:	add	r2, r9, #2
   13580:	add	r9, r9, #3
   13584:	cmp	r2, r5
   13588:	movcc	r1, #39	; 0x27
   1358c:	strbcc	r1, [ip, r2]
   13590:	cmp	r9, r5
   13594:	add	r2, r9, #1
   13598:	movcc	r1, #92	; 0x5c
   1359c:	strbcc	r1, [ip, r9]
   135a0:	cmp	r2, r5
   135a4:	bcs	135b8 <__assert_fail@plt+0x2218>
   135a8:	uxtb	r3, r6
   135ac:	mov	r1, #48	; 0x30
   135b0:	orr	r3, r1, r3, lsr #6
   135b4:	strb	r3, [ip, r2]
   135b8:	add	r2, r9, #2
   135bc:	add	r9, r9, #3
   135c0:	cmp	r2, r5
   135c4:	lsrcc	r3, r6, #3
   135c8:	movcc	r1, #6
   135cc:	bficc	r3, r1, #3, #29
   135d0:	mov	r1, #6
   135d4:	bfi	r6, r1, #3, #29
   135d8:	strbcc	r3, [ip, r2]
   135dc:	mov	r2, #1
   135e0:	b	13640 <__assert_fail@plt+0x22a0>
   135e4:	ldr	r1, [sp, #80]	; 0x50
   135e8:	cmp	r9, r2
   135ec:	mov	r5, r2
   135f0:	ldr	r2, [sp, #84]	; 0x54
   135f4:	strbcc	r6, [ip, r9]
   135f8:	add	r9, r9, #1
   135fc:	ldrb	r6, [r1, sl]
   13600:	mov	sl, r3
   13604:	tst	r2, #1
   13608:	beq	13530 <__assert_fail@plt+0x2190>
   1360c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13610:	tst	r1, #1
   13614:	beq	13634 <__assert_fail@plt+0x2294>
   13618:	cmp	r9, r5
   1361c:	mov	r2, r0
   13620:	movcc	r1, #92	; 0x5c
   13624:	strbcc	r1, [ip, r9]
   13628:	add	r9, r9, #1
   1362c:	mov	r1, #0
   13630:	b	1363c <__assert_fail@plt+0x229c>
   13634:	mov	r1, #0
   13638:	mov	r2, r0
   1363c:	str	r1, [fp, #-48]	; 0xffffffd0
   13640:	mov	r0, r2
   13644:	and	r1, r2, #1
   13648:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1364c:	add	r3, sl, #1
   13650:	cmp	r2, r3
   13654:	bls	136b4 <__assert_fail@plt+0x2314>
   13658:	mov	r2, r5
   1365c:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13660:	cmp	r1, #0
   13664:	movwne	r1, #1
   13668:	mvn	r5, r5
   1366c:	orr	r5, r5, r1
   13670:	tst	r5, #1
   13674:	bne	135e4 <__assert_fail@plt+0x2244>
   13678:	cmp	r9, r2
   1367c:	movcc	r5, r4
   13680:	movcc	r4, #39	; 0x27
   13684:	strbcc	r4, [ip, r9]
   13688:	movcc	r4, r5
   1368c:	add	r5, r9, #1
   13690:	add	r9, r9, #2
   13694:	cmp	r5, r2
   13698:	movcc	r1, r4
   1369c:	movcc	r4, #39	; 0x27
   136a0:	strbcc	r4, [ip, r5]
   136a4:	movcc	r4, r1
   136a8:	mov	r1, #0
   136ac:	str	r1, [fp, #-52]	; 0xffffffcc
   136b0:	b	135e4 <__assert_fail@plt+0x2244>
   136b4:	cmp	r1, #0
   136b8:	movwne	r1, #1
   136bc:	str	r1, [fp, #-56]	; 0xffffffc8
   136c0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   136c4:	cmp	r0, #0
   136c8:	beq	130f0 <__assert_fail@plt+0x1d50>
   136cc:	b	13124 <__assert_fail@plt+0x1d84>
   136d0:	mov	r8, #0
   136d4:	mov	r4, r1
   136d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136dc:	tst	r0, #1
   136e0:	beq	12d5c <__assert_fail@plt+0x19bc>
   136e4:	b	13010 <__assert_fail@plt+0x1c70>
   136e8:	mov	r7, sl
   136ec:	b	136f4 <__assert_fail@plt+0x2354>
   136f0:	mvn	r7, #0
   136f4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   136f8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   136fc:	ldr	r2, [sp, #88]	; 0x58
   13700:	eor	r0, r1, #2
   13704:	orr	r0, r0, r9
   13708:	clz	r0, r0
   1370c:	lsr	r0, r0, #5
   13710:	tst	r3, r0
   13714:	bne	1378c <__assert_fail@plt+0x23ec>
   13718:	subs	r0, r1, #2
   1371c:	movwne	r0, #1
   13720:	orr	r0, r3, r0
   13724:	tst	r0, #1
   13728:	ldreq	r0, [sp, #60]	; 0x3c
   1372c:	eoreq	r0, r0, #1
   13730:	tsteq	r0, #1
   13734:	bne	13868 <__assert_fail@plt+0x24c8>
   13738:	tst	r4, #1
   1373c:	bne	1382c <__assert_fail@plt+0x248c>
   13740:	ldr	r6, [sp, #56]	; 0x38
   13744:	mov	r8, #0
   13748:	cmp	r6, #0
   1374c:	beq	13864 <__assert_fail@plt+0x24c4>
   13750:	mov	r1, #0
   13754:	mov	r4, #2
   13758:	cmp	r5, #0
   1375c:	mov	r0, r2
   13760:	mov	r3, #0
   13764:	str	r1, [sp, #84]	; 0x54
   13768:	beq	125b0 <__assert_fail@plt+0x1210>
   1376c:	b	13868 <__assert_fail@plt+0x24c8>
   13770:	movw	r0, #30860	; 0x788c
   13774:	movt	r0, #1
   13778:	str	r0, [sp, #76]	; 0x4c
   1377c:	mov	r9, #0
   13780:	tst	r8, #1
   13784:	beq	12848 <__assert_fail@plt+0x14a8>
   13788:	b	12988 <__assert_fail@plt+0x15e8>
   1378c:	ldr	r1, [sp, #88]	; 0x58
   13790:	mov	r0, #2
   13794:	tst	r1, #1
   13798:	movwne	r0, #4
   1379c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   137a0:	ldr	r1, [fp, #12]
   137a4:	cmp	r2, #2
   137a8:	moveq	r2, r0
   137ac:	b	137e4 <__assert_fail@plt+0x2444>
   137b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   137b4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   137b8:	ldr	r1, [fp, #12]
   137bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   137c0:	b	137e4 <__assert_fail@plt+0x2444>
   137c4:	ldr	r1, [sp, #88]	; 0x58
   137c8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   137cc:	ldr	r5, [sp, #28]
   137d0:	mov	r0, #2
   137d4:	tst	r1, #1
   137d8:	ldr	r1, [fp, #12]
   137dc:	movwne	r0, #4
   137e0:	mov	r2, r0
   137e4:	mov	r0, #0
   137e8:	bic	r1, r1, #2
   137ec:	str	r2, [sp]
   137f0:	mov	r2, lr
   137f4:	str	r0, [sp, #8]
   137f8:	ldr	r0, [sp, #72]	; 0x48
   137fc:	str	r1, [sp, #4]
   13800:	mov	r1, r5
   13804:	str	r0, [sp, #12]
   13808:	ldr	r0, [sp, #76]	; 0x4c
   1380c:	str	r0, [sp, #16]
   13810:	mov	r0, ip
   13814:	mov	r3, r7
   13818:	bl	12524 <__assert_fail@plt+0x1184>
   1381c:	mov	r9, r0
   13820:	mov	r0, r9
   13824:	sub	sp, fp, #28
   13828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1382c:	mov	r0, #5
   13830:	ldr	r1, [sp, #56]	; 0x38
   13834:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13838:	str	r0, [sp]
   1383c:	ldr	r0, [fp, #12]
   13840:	str	r0, [sp, #4]
   13844:	ldr	r0, [fp, #16]
   13848:	str	r0, [sp, #8]
   1384c:	ldr	r0, [sp, #72]	; 0x48
   13850:	str	r0, [sp, #12]
   13854:	ldr	r0, [sp, #76]	; 0x4c
   13858:	str	r0, [sp, #16]
   1385c:	ldr	r0, [fp, #-84]	; 0xffffffac
   13860:	b	13814 <__assert_fail@plt+0x2474>
   13864:	mov	r3, #0
   13868:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1386c:	cmp	r1, #0
   13870:	beq	138ac <__assert_fail@plt+0x250c>
   13874:	ldr	r2, [fp, #-84]	; 0xffffffac
   13878:	tst	r3, #1
   1387c:	bne	138b0 <__assert_fail@plt+0x2510>
   13880:	ldrb	r0, [r1]
   13884:	cmp	r0, #0
   13888:	beq	138b0 <__assert_fail@plt+0x2510>
   1388c:	add	r1, r1, #1
   13890:	cmp	r9, r5
   13894:	strbcc	r0, [r2, r9]
   13898:	add	r9, r9, #1
   1389c:	ldrb	r0, [r1], #1
   138a0:	cmp	r0, #0
   138a4:	bne	13890 <__assert_fail@plt+0x24f0>
   138a8:	b	138b0 <__assert_fail@plt+0x2510>
   138ac:	ldr	r2, [fp, #-84]	; 0xffffffac
   138b0:	cmp	r9, r5
   138b4:	movcc	r0, #0
   138b8:	strbcc	r0, [r2, r9]
   138bc:	mov	r0, r9
   138c0:	sub	sp, fp, #28
   138c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138c8:	mov	r0, #4
   138cc:	b	1379c <__assert_fail@plt+0x23fc>
   138d0:	bl	1137c <abort@plt>
   138d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138d8:	add	fp, sp, #28
   138dc:	sub	sp, sp, #28
   138e0:	movw	r5, #33168	; 0x8190
   138e4:	cmp	r2, #0
   138e8:	mov	r4, r1
   138ec:	mov	r7, r0
   138f0:	str	r0, [sp, #20]
   138f4:	movt	r5, #2
   138f8:	movne	r5, r2
   138fc:	bl	11298 <__errno_location@plt>
   13900:	mov	sl, r0
   13904:	ldr	r2, [r5, #40]	; 0x28
   13908:	ldr	r3, [r5, #44]	; 0x2c
   1390c:	ldm	r5, {r0, r1}
   13910:	orr	r8, r1, #1
   13914:	add	r9, r5, #8
   13918:	mov	r1, #0
   1391c:	ldr	r6, [sl]
   13920:	stm	sp, {r0, r8, r9}
   13924:	mov	r0, #0
   13928:	str	r2, [sp, #12]
   1392c:	str	r3, [sp, #16]
   13930:	mov	r2, r7
   13934:	mov	r3, r4
   13938:	str	r6, [sp, #24]
   1393c:	mov	r6, r4
   13940:	bl	12524 <__assert_fail@plt+0x1184>
   13944:	add	r7, r0, #1
   13948:	mov	r0, r7
   1394c:	bl	14da8 <__assert_fail@plt+0x3a08>
   13950:	mov	r4, r0
   13954:	ldr	r0, [r5]
   13958:	ldr	r2, [r5, #44]	; 0x2c
   1395c:	ldr	r1, [r5, #40]	; 0x28
   13960:	mov	r3, r6
   13964:	stm	sp, {r0, r8, r9}
   13968:	str	r2, [sp, #16]
   1396c:	ldr	r2, [sp, #20]
   13970:	str	r1, [sp, #12]
   13974:	mov	r0, r4
   13978:	mov	r1, r7
   1397c:	bl	12524 <__assert_fail@plt+0x1184>
   13980:	ldr	r0, [sp, #24]
   13984:	str	r0, [sl]
   13988:	mov	r0, r4
   1398c:	sub	sp, fp, #28
   13990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13998:	add	fp, sp, #28
   1399c:	sub	sp, sp, #36	; 0x24
   139a0:	movw	r8, #33168	; 0x8190
   139a4:	cmp	r3, #0
   139a8:	mov	r4, r2
   139ac:	str	r2, [sp, #24]
   139b0:	mov	r5, r1
   139b4:	mov	r6, r0
   139b8:	str	r0, [sp, #20]
   139bc:	movt	r8, #2
   139c0:	movne	r8, r3
   139c4:	bl	11298 <__errno_location@plt>
   139c8:	str	r0, [sp, #28]
   139cc:	ldr	r1, [r8, #40]	; 0x28
   139d0:	ldr	r2, [r8, #44]	; 0x2c
   139d4:	ldr	r7, [r0]
   139d8:	cmp	r4, #0
   139dc:	add	sl, r8, #8
   139e0:	mov	r0, #0
   139e4:	ldm	r8, {r3, r9}
   139e8:	orreq	r9, r9, #1
   139ec:	stm	sp, {r3, r9, sl}
   139f0:	str	r1, [sp, #12]
   139f4:	str	r2, [sp, #16]
   139f8:	mov	r1, #0
   139fc:	mov	r2, r6
   13a00:	mov	r3, r5
   13a04:	str	r7, [sp, #32]
   13a08:	mov	r7, r5
   13a0c:	bl	12524 <__assert_fail@plt+0x1184>
   13a10:	add	r4, r0, #1
   13a14:	mov	r5, r0
   13a18:	mov	r0, r4
   13a1c:	bl	14da8 <__assert_fail@plt+0x3a08>
   13a20:	mov	r6, r0
   13a24:	ldr	r0, [r8]
   13a28:	ldr	r2, [r8, #44]	; 0x2c
   13a2c:	ldr	r1, [r8, #40]	; 0x28
   13a30:	mov	r3, r7
   13a34:	stm	sp, {r0, r9, sl}
   13a38:	str	r2, [sp, #16]
   13a3c:	ldr	r2, [sp, #20]
   13a40:	str	r1, [sp, #12]
   13a44:	mov	r0, r6
   13a48:	mov	r1, r4
   13a4c:	bl	12524 <__assert_fail@plt+0x1184>
   13a50:	ldr	r0, [sp, #24]
   13a54:	ldr	r1, [sp, #32]
   13a58:	ldr	r2, [sp, #28]
   13a5c:	cmp	r0, #0
   13a60:	str	r1, [r2]
   13a64:	strne	r5, [r0]
   13a68:	mov	r0, r6
   13a6c:	sub	sp, fp, #28
   13a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a74:	push	{r4, r5, r6, r7, fp, lr}
   13a78:	add	fp, sp, #16
   13a7c:	movw	r4, #33104	; 0x8150
   13a80:	movt	r4, #2
   13a84:	ldrd	r6, [r4]
   13a88:	cmp	r7, #2
   13a8c:	blt	13ab8 <__assert_fail@plt+0x2718>
   13a90:	add	r5, r6, #12
   13a94:	mov	r7, #0
   13a98:	ldr	r0, [r5, r7, lsl #3]
   13a9c:	bl	122c0 <__assert_fail@plt+0xf20>
   13aa0:	ldr	r1, [r4, #4]
   13aa4:	add	r2, r7, #2
   13aa8:	add	r0, r7, #1
   13aac:	mov	r7, r0
   13ab0:	cmp	r2, r1
   13ab4:	blt	13a98 <__assert_fail@plt+0x26f8>
   13ab8:	ldr	r0, [r6, #4]
   13abc:	movw	r5, #33216	; 0x81c0
   13ac0:	movt	r5, #2
   13ac4:	cmp	r0, r5
   13ac8:	beq	13adc <__assert_fail@plt+0x273c>
   13acc:	bl	122c0 <__assert_fail@plt+0xf20>
   13ad0:	mov	r0, #256	; 0x100
   13ad4:	str	r0, [r4, #8]
   13ad8:	str	r5, [r4, #12]
   13adc:	add	r5, r4, #8
   13ae0:	cmp	r6, r5
   13ae4:	beq	13af4 <__assert_fail@plt+0x2754>
   13ae8:	mov	r0, r6
   13aec:	bl	122c0 <__assert_fail@plt+0xf20>
   13af0:	str	r5, [r4]
   13af4:	mov	r0, #1
   13af8:	str	r0, [r4, #4]
   13afc:	pop	{r4, r5, r6, r7, fp, pc}
   13b00:	movw	r3, #33168	; 0x8190
   13b04:	mvn	r2, #0
   13b08:	movt	r3, #2
   13b0c:	b	13b10 <__assert_fail@plt+0x2770>
   13b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b14:	add	fp, sp, #28
   13b18:	sub	sp, sp, #44	; 0x2c
   13b1c:	mov	r7, r3
   13b20:	str	r2, [sp, #36]	; 0x24
   13b24:	str	r1, [sp, #32]
   13b28:	mov	r5, r0
   13b2c:	bl	11298 <__errno_location@plt>
   13b30:	cmp	r5, #0
   13b34:	bmi	13c9c <__assert_fail@plt+0x28fc>
   13b38:	cmn	r5, #-2147483647	; 0x80000001
   13b3c:	beq	13c9c <__assert_fail@plt+0x28fc>
   13b40:	movw	r8, #33104	; 0x8150
   13b44:	mov	r4, r0
   13b48:	ldr	r0, [r0]
   13b4c:	movt	r8, #2
   13b50:	str	r4, [sp, #28]
   13b54:	ldr	r1, [r8, #4]
   13b58:	ldr	r6, [r8]
   13b5c:	str	r0, [sp, #24]
   13b60:	cmp	r1, r5
   13b64:	ble	13b70 <__assert_fail@plt+0x27d0>
   13b68:	mov	sl, r6
   13b6c:	b	13bd8 <__assert_fail@plt+0x2838>
   13b70:	mov	r0, #8
   13b74:	add	r9, r8, #8
   13b78:	str	r1, [fp, #-32]	; 0xffffffe0
   13b7c:	sub	r1, r5, r1
   13b80:	mvn	r3, #-2147483648	; 0x80000000
   13b84:	str	r0, [sp]
   13b88:	subs	r0, r6, r9
   13b8c:	add	r2, r1, #1
   13b90:	sub	r1, fp, #32
   13b94:	movne	r0, r6
   13b98:	bl	14fa8 <__assert_fail@plt+0x3c08>
   13b9c:	mov	sl, r0
   13ba0:	cmp	r6, r9
   13ba4:	str	r0, [r8]
   13ba8:	bne	13bb4 <__assert_fail@plt+0x2814>
   13bac:	ldrd	r0, [r8, #8]
   13bb0:	stm	sl, {r0, r1}
   13bb4:	ldr	r1, [r8, #4]
   13bb8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13bbc:	add	r0, sl, r1, lsl #3
   13bc0:	sub	r1, r2, r1
   13bc4:	lsl	r2, r1, #3
   13bc8:	mov	r1, #0
   13bcc:	bl	112bc <memset@plt>
   13bd0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13bd4:	str	r0, [r8, #4]
   13bd8:	mov	r9, sl
   13bdc:	ldm	r7, {r0, r1}
   13be0:	orr	r8, r1, #1
   13be4:	add	r1, r7, #8
   13be8:	ldr	r2, [r7, #40]	; 0x28
   13bec:	ldr	r3, [r7, #44]	; 0x2c
   13bf0:	ldr	r6, [r9, r5, lsl #3]!
   13bf4:	str	r1, [sp, #20]
   13bf8:	ldr	r4, [r9, #4]!
   13bfc:	stm	sp, {r0, r8}
   13c00:	add	r0, sp, #8
   13c04:	stm	r0, {r1, r2, r3}
   13c08:	ldr	r2, [sp, #32]
   13c0c:	ldr	r3, [sp, #36]	; 0x24
   13c10:	mov	r1, r6
   13c14:	mov	r0, r4
   13c18:	bl	12524 <__assert_fail@plt+0x1184>
   13c1c:	cmp	r6, r0
   13c20:	bhi	13c84 <__assert_fail@plt+0x28e4>
   13c24:	add	r6, r0, #1
   13c28:	movw	r0, #33216	; 0x81c0
   13c2c:	movt	r0, #2
   13c30:	str	r6, [sl, r5, lsl #3]
   13c34:	cmp	r4, r0
   13c38:	beq	13c44 <__assert_fail@plt+0x28a4>
   13c3c:	mov	r0, r4
   13c40:	bl	122c0 <__assert_fail@plt+0xf20>
   13c44:	mov	r0, r6
   13c48:	bl	14da8 <__assert_fail@plt+0x3a08>
   13c4c:	str	r0, [r9]
   13c50:	mov	r4, r0
   13c54:	add	r3, sp, #8
   13c58:	ldr	r0, [r7]
   13c5c:	ldr	r1, [r7, #40]	; 0x28
   13c60:	ldr	r2, [r7, #44]	; 0x2c
   13c64:	stm	sp, {r0, r8}
   13c68:	ldr	r0, [sp, #20]
   13c6c:	stm	r3, {r0, r1, r2}
   13c70:	ldr	r2, [sp, #32]
   13c74:	ldr	r3, [sp, #36]	; 0x24
   13c78:	mov	r0, r4
   13c7c:	mov	r1, r6
   13c80:	bl	12524 <__assert_fail@plt+0x1184>
   13c84:	ldr	r1, [sp, #24]
   13c88:	ldr	r0, [sp, #28]
   13c8c:	str	r1, [r0]
   13c90:	mov	r0, r4
   13c94:	sub	sp, fp, #28
   13c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c9c:	bl	1137c <abort@plt>
   13ca0:	movw	r3, #33168	; 0x8190
   13ca4:	movt	r3, #2
   13ca8:	b	13b10 <__assert_fail@plt+0x2770>
   13cac:	movw	r3, #33168	; 0x8190
   13cb0:	mov	r1, r0
   13cb4:	mov	r0, #0
   13cb8:	mvn	r2, #0
   13cbc:	movt	r3, #2
   13cc0:	b	13b10 <__assert_fail@plt+0x2770>
   13cc4:	movw	r3, #33168	; 0x8190
   13cc8:	mov	r2, r1
   13ccc:	mov	r1, r0
   13cd0:	mov	r0, #0
   13cd4:	movt	r3, #2
   13cd8:	b	13b10 <__assert_fail@plt+0x2770>
   13cdc:	push	{fp, lr}
   13ce0:	mov	fp, sp
   13ce4:	sub	sp, sp, #48	; 0x30
   13ce8:	vmov.i32	q8, #0	; 0x00000000
   13cec:	mov	ip, #32
   13cf0:	mov	r3, sp
   13cf4:	mov	lr, r2
   13cf8:	cmp	r1, #10
   13cfc:	add	r2, r3, #16
   13d00:	vst1.64	{d16-d17}, [r3], ip
   13d04:	vst1.64	{d16-d17}, [r2]
   13d08:	vst1.64	{d16-d17}, [r3]
   13d0c:	beq	13d2c <__assert_fail@plt+0x298c>
   13d10:	str	r1, [sp]
   13d14:	mov	r3, sp
   13d18:	mov	r1, lr
   13d1c:	mvn	r2, #0
   13d20:	bl	13b10 <__assert_fail@plt+0x2770>
   13d24:	mov	sp, fp
   13d28:	pop	{fp, pc}
   13d2c:	bl	1137c <abort@plt>
   13d30:	push	{r4, sl, fp, lr}
   13d34:	add	fp, sp, #8
   13d38:	sub	sp, sp, #48	; 0x30
   13d3c:	vmov.i32	q8, #0	; 0x00000000
   13d40:	mov	ip, r3
   13d44:	mov	r3, sp
   13d48:	mov	lr, #32
   13d4c:	cmp	r1, #10
   13d50:	add	r4, r3, #16
   13d54:	vst1.64	{d16-d17}, [r3], lr
   13d58:	vst1.64	{d16-d17}, [r4]
   13d5c:	vst1.64	{d16-d17}, [r3]
   13d60:	beq	13d80 <__assert_fail@plt+0x29e0>
   13d64:	str	r1, [sp]
   13d68:	mov	r1, r2
   13d6c:	mov	r3, sp
   13d70:	mov	r2, ip
   13d74:	bl	13b10 <__assert_fail@plt+0x2770>
   13d78:	sub	sp, fp, #8
   13d7c:	pop	{r4, sl, fp, pc}
   13d80:	bl	1137c <abort@plt>
   13d84:	push	{fp, lr}
   13d88:	mov	fp, sp
   13d8c:	sub	sp, sp, #48	; 0x30
   13d90:	vmov.i32	q8, #0	; 0x00000000
   13d94:	mov	r3, sp
   13d98:	mov	ip, #32
   13d9c:	cmp	r0, #10
   13da0:	add	r2, r3, #16
   13da4:	vst1.64	{d16-d17}, [r3], ip
   13da8:	vst1.64	{d16-d17}, [r2]
   13dac:	vst1.64	{d16-d17}, [r3]
   13db0:	beq	13dd0 <__assert_fail@plt+0x2a30>
   13db4:	str	r0, [sp]
   13db8:	mov	r3, sp
   13dbc:	mov	r0, #0
   13dc0:	mvn	r2, #0
   13dc4:	bl	13b10 <__assert_fail@plt+0x2770>
   13dc8:	mov	sp, fp
   13dcc:	pop	{fp, pc}
   13dd0:	bl	1137c <abort@plt>
   13dd4:	push	{fp, lr}
   13dd8:	mov	fp, sp
   13ddc:	sub	sp, sp, #48	; 0x30
   13de0:	vmov.i32	q8, #0	; 0x00000000
   13de4:	mov	r3, sp
   13de8:	mov	ip, #32
   13dec:	cmp	r0, #10
   13df0:	add	lr, r3, #16
   13df4:	vst1.64	{d16-d17}, [r3], ip
   13df8:	vst1.64	{d16-d17}, [lr]
   13dfc:	vst1.64	{d16-d17}, [r3]
   13e00:	beq	13e1c <__assert_fail@plt+0x2a7c>
   13e04:	str	r0, [sp]
   13e08:	mov	r3, sp
   13e0c:	mov	r0, #0
   13e10:	bl	13b10 <__assert_fail@plt+0x2770>
   13e14:	mov	sp, fp
   13e18:	pop	{fp, pc}
   13e1c:	bl	1137c <abort@plt>
   13e20:	push	{r4, sl, fp, lr}
   13e24:	add	fp, sp, #8
   13e28:	sub	sp, sp, #48	; 0x30
   13e2c:	mov	lr, r0
   13e30:	movw	r0, #33168	; 0x8190
   13e34:	mov	ip, r1
   13e38:	mov	r1, #32
   13e3c:	mov	r4, #1
   13e40:	movt	r0, #2
   13e44:	add	r3, r0, #16
   13e48:	vld1.64	{d16-d17}, [r0], r1
   13e4c:	vld1.64	{d20-d21}, [r0]
   13e50:	vld1.64	{d18-d19}, [r3]
   13e54:	mov	r3, sp
   13e58:	add	r0, r3, #32
   13e5c:	add	r1, r3, #16
   13e60:	vst1.64	{d20-d21}, [r0]
   13e64:	mov	r0, #28
   13e68:	vst1.64	{d18-d19}, [r1]
   13e6c:	mov	r1, r3
   13e70:	and	r0, r0, r2, lsr #3
   13e74:	and	r2, r2, #31
   13e78:	vst1.64	{d16-d17}, [r1], r0
   13e7c:	ldr	r0, [r1, #8]
   13e80:	bic	r4, r4, r0, lsr r2
   13e84:	eor	r0, r0, r4, lsl r2
   13e88:	mov	r2, ip
   13e8c:	str	r0, [r1, #8]
   13e90:	mov	r0, #0
   13e94:	mov	r1, lr
   13e98:	bl	13b10 <__assert_fail@plt+0x2770>
   13e9c:	sub	sp, fp, #8
   13ea0:	pop	{r4, sl, fp, pc}
   13ea4:	push	{fp, lr}
   13ea8:	mov	fp, sp
   13eac:	sub	sp, sp, #48	; 0x30
   13eb0:	mov	ip, r0
   13eb4:	movw	r0, #33168	; 0x8190
   13eb8:	mov	r2, #32
   13ebc:	movt	r0, #2
   13ec0:	add	r3, r0, #16
   13ec4:	vld1.64	{d16-d17}, [r0], r2
   13ec8:	vld1.64	{d20-d21}, [r0]
   13ecc:	vld1.64	{d18-d19}, [r3]
   13ed0:	mov	r3, sp
   13ed4:	add	r0, r3, #32
   13ed8:	add	r2, r3, #16
   13edc:	vst1.64	{d20-d21}, [r0]
   13ee0:	mov	r0, #28
   13ee4:	vst1.64	{d18-d19}, [r2]
   13ee8:	mov	r2, r3
   13eec:	and	r0, r0, r1, lsr #3
   13ef0:	and	r1, r1, #31
   13ef4:	vst1.64	{d16-d17}, [r2], r0
   13ef8:	mov	r0, #1
   13efc:	ldr	lr, [r2, #8]
   13f00:	bic	r0, r0, lr, lsr r1
   13f04:	eor	r0, lr, r0, lsl r1
   13f08:	mov	r1, ip
   13f0c:	str	r0, [r2, #8]
   13f10:	mov	r0, #0
   13f14:	mvn	r2, #0
   13f18:	bl	13b10 <__assert_fail@plt+0x2770>
   13f1c:	mov	sp, fp
   13f20:	pop	{fp, pc}
   13f24:	push	{fp, lr}
   13f28:	mov	fp, sp
   13f2c:	sub	sp, sp, #48	; 0x30
   13f30:	mov	r1, r0
   13f34:	movw	r0, #33168	; 0x8190
   13f38:	mov	r3, #32
   13f3c:	movt	r0, #2
   13f40:	add	r2, r0, #16
   13f44:	vld1.64	{d16-d17}, [r0], r3
   13f48:	mov	r3, sp
   13f4c:	vld1.64	{d18-d19}, [r2]
   13f50:	vld1.64	{d20-d21}, [r0]
   13f54:	add	r2, r3, #16
   13f58:	add	r0, r3, #32
   13f5c:	vst1.64	{d18-d19}, [r2]
   13f60:	vst1.64	{d20-d21}, [r0]
   13f64:	mov	r0, #12
   13f68:	mov	r2, r3
   13f6c:	vst1.64	{d16-d17}, [r2], r0
   13f70:	ldr	r0, [r2]
   13f74:	orr	r0, r0, #67108864	; 0x4000000
   13f78:	str	r0, [r2]
   13f7c:	mov	r0, #0
   13f80:	mvn	r2, #0
   13f84:	bl	13b10 <__assert_fail@plt+0x2770>
   13f88:	mov	sp, fp
   13f8c:	pop	{fp, pc}
   13f90:	push	{fp, lr}
   13f94:	mov	fp, sp
   13f98:	sub	sp, sp, #48	; 0x30
   13f9c:	mov	ip, r1
   13fa0:	mov	r1, r0
   13fa4:	movw	r0, #33168	; 0x8190
   13fa8:	mov	r2, #32
   13fac:	movt	r0, #2
   13fb0:	add	r3, r0, #16
   13fb4:	vld1.64	{d16-d17}, [r0], r2
   13fb8:	vld1.64	{d18-d19}, [r3]
   13fbc:	vld1.64	{d20-d21}, [r0]
   13fc0:	mov	r3, sp
   13fc4:	add	r2, r3, #16
   13fc8:	add	r0, r3, #32
   13fcc:	vst1.64	{d18-d19}, [r2]
   13fd0:	vst1.64	{d20-d21}, [r0]
   13fd4:	mov	r0, #12
   13fd8:	mov	r2, r3
   13fdc:	vst1.64	{d16-d17}, [r2], r0
   13fe0:	ldr	r0, [r2]
   13fe4:	orr	r0, r0, #67108864	; 0x4000000
   13fe8:	str	r0, [r2]
   13fec:	mov	r0, #0
   13ff0:	mov	r2, ip
   13ff4:	bl	13b10 <__assert_fail@plt+0x2770>
   13ff8:	mov	sp, fp
   13ffc:	pop	{fp, pc}
   14000:	push	{r4, sl, fp, lr}
   14004:	add	fp, sp, #8
   14008:	sub	sp, sp, #96	; 0x60
   1400c:	vmov.i32	q8, #0	; 0x00000000
   14010:	mov	ip, r2
   14014:	mov	r2, sp
   14018:	mov	r4, #28
   1401c:	cmp	r1, #10
   14020:	mov	r3, r2
   14024:	add	lr, r2, #16
   14028:	vst1.64	{d16-d17}, [r3], r4
   1402c:	vst1.64	{d16-d17}, [lr]
   14030:	vst1.32	{d16-d17}, [r3]
   14034:	beq	14084 <__assert_fail@plt+0x2ce4>
   14038:	vld1.64	{d16-d17}, [r2], r4
   1403c:	vld1.64	{d18-d19}, [lr]
   14040:	add	r3, sp, #48	; 0x30
   14044:	vld1.32	{d20-d21}, [r2]
   14048:	add	r2, r3, #20
   1404c:	add	r4, r3, #4
   14050:	vst1.32	{d18-d19}, [r2]
   14054:	add	r2, r3, #32
   14058:	vst1.32	{d16-d17}, [r4]
   1405c:	vst1.32	{d20-d21}, [r2]
   14060:	str	r1, [sp, #48]	; 0x30
   14064:	mvn	r2, #0
   14068:	ldr	r1, [sp, #60]	; 0x3c
   1406c:	orr	r1, r1, #67108864	; 0x4000000
   14070:	str	r1, [sp, #60]	; 0x3c
   14074:	mov	r1, ip
   14078:	bl	13b10 <__assert_fail@plt+0x2770>
   1407c:	sub	sp, fp, #8
   14080:	pop	{r4, sl, fp, pc}
   14084:	bl	1137c <abort@plt>
   14088:	push	{r4, r5, r6, sl, fp, lr}
   1408c:	add	fp, sp, #16
   14090:	sub	sp, sp, #48	; 0x30
   14094:	mov	ip, r3
   14098:	movw	r3, #33168	; 0x8190
   1409c:	mov	r6, #32
   140a0:	cmp	r1, #0
   140a4:	mov	r4, sp
   140a8:	movt	r3, #2
   140ac:	cmpne	r2, #0
   140b0:	add	r5, r4, #16
   140b4:	add	lr, r3, #16
   140b8:	vld1.64	{d16-d17}, [r3], r6
   140bc:	vld1.64	{d18-d19}, [lr]
   140c0:	vld1.64	{d20-d21}, [r3]
   140c4:	mov	r3, #10
   140c8:	vst1.64	{d16-d17}, [r4], r6
   140cc:	vst1.64	{d18-d19}, [r5]
   140d0:	vst1.64	{d20-d21}, [r4]
   140d4:	str	r3, [sp]
   140d8:	bne	140e0 <__assert_fail@plt+0x2d40>
   140dc:	bl	1137c <abort@plt>
   140e0:	str	r2, [sp, #44]	; 0x2c
   140e4:	str	r1, [sp, #40]	; 0x28
   140e8:	mov	r3, sp
   140ec:	mov	r1, ip
   140f0:	mvn	r2, #0
   140f4:	bl	13b10 <__assert_fail@plt+0x2770>
   140f8:	sub	sp, fp, #16
   140fc:	pop	{r4, r5, r6, sl, fp, pc}
   14100:	push	{r4, r5, r6, sl, fp, lr}
   14104:	add	fp, sp, #16
   14108:	sub	sp, sp, #48	; 0x30
   1410c:	mov	lr, r3
   14110:	movw	r3, #33168	; 0x8190
   14114:	mov	r6, #32
   14118:	cmp	r1, #0
   1411c:	mov	r4, sp
   14120:	movt	r3, #2
   14124:	cmpne	r2, #0
   14128:	add	r5, r4, #16
   1412c:	add	ip, r3, #16
   14130:	vld1.64	{d16-d17}, [r3], r6
   14134:	vld1.64	{d18-d19}, [ip]
   14138:	vld1.64	{d20-d21}, [r3]
   1413c:	mov	r3, #10
   14140:	vst1.64	{d16-d17}, [r4], r6
   14144:	vst1.64	{d18-d19}, [r5]
   14148:	vst1.64	{d20-d21}, [r4]
   1414c:	str	r3, [sp]
   14150:	bne	14158 <__assert_fail@plt+0x2db8>
   14154:	bl	1137c <abort@plt>
   14158:	ldr	ip, [fp, #8]
   1415c:	str	r2, [sp, #44]	; 0x2c
   14160:	str	r1, [sp, #40]	; 0x28
   14164:	mov	r3, sp
   14168:	mov	r1, lr
   1416c:	mov	r2, ip
   14170:	bl	13b10 <__assert_fail@plt+0x2770>
   14174:	sub	sp, fp, #16
   14178:	pop	{r4, r5, r6, sl, fp, pc}
   1417c:	push	{r4, sl, fp, lr}
   14180:	add	fp, sp, #8
   14184:	sub	sp, sp, #48	; 0x30
   14188:	movw	r3, #33168	; 0x8190
   1418c:	mov	lr, #32
   14190:	mov	ip, r2
   14194:	cmp	r0, #0
   14198:	movt	r3, #2
   1419c:	cmpne	r1, #0
   141a0:	add	r2, r3, #16
   141a4:	vld1.64	{d16-d17}, [r3], lr
   141a8:	vld1.64	{d20-d21}, [r3]
   141ac:	vld1.64	{d18-d19}, [r2]
   141b0:	mov	r2, sp
   141b4:	add	r4, r2, #16
   141b8:	vst1.64	{d16-d17}, [r2], lr
   141bc:	vst1.64	{d20-d21}, [r2]
   141c0:	mov	r2, #10
   141c4:	vst1.64	{d18-d19}, [r4]
   141c8:	str	r2, [sp]
   141cc:	bne	141d4 <__assert_fail@plt+0x2e34>
   141d0:	bl	1137c <abort@plt>
   141d4:	str	r1, [sp, #44]	; 0x2c
   141d8:	str	r0, [sp, #40]	; 0x28
   141dc:	mov	r3, sp
   141e0:	mov	r0, #0
   141e4:	mov	r1, ip
   141e8:	mvn	r2, #0
   141ec:	bl	13b10 <__assert_fail@plt+0x2770>
   141f0:	sub	sp, fp, #8
   141f4:	pop	{r4, sl, fp, pc}
   141f8:	push	{r4, r5, fp, lr}
   141fc:	add	fp, sp, #8
   14200:	sub	sp, sp, #48	; 0x30
   14204:	mov	ip, r3
   14208:	movw	r3, #33168	; 0x8190
   1420c:	mov	r4, #32
   14210:	mov	lr, r2
   14214:	cmp	r0, #0
   14218:	movt	r3, #2
   1421c:	cmpne	r1, #0
   14220:	add	r2, r3, #16
   14224:	vld1.64	{d16-d17}, [r3], r4
   14228:	vld1.64	{d20-d21}, [r3]
   1422c:	vld1.64	{d18-d19}, [r2]
   14230:	mov	r2, sp
   14234:	add	r5, r2, #16
   14238:	vst1.64	{d16-d17}, [r2], r4
   1423c:	vst1.64	{d20-d21}, [r2]
   14240:	mov	r2, #10
   14244:	vst1.64	{d18-d19}, [r5]
   14248:	str	r2, [sp]
   1424c:	bne	14254 <__assert_fail@plt+0x2eb4>
   14250:	bl	1137c <abort@plt>
   14254:	str	r1, [sp, #44]	; 0x2c
   14258:	str	r0, [sp, #40]	; 0x28
   1425c:	mov	r3, sp
   14260:	mov	r0, #0
   14264:	mov	r1, lr
   14268:	mov	r2, ip
   1426c:	bl	13b10 <__assert_fail@plt+0x2770>
   14270:	sub	sp, fp, #8
   14274:	pop	{r4, r5, fp, pc}
   14278:	movw	r3, #33056	; 0x8120
   1427c:	movt	r3, #2
   14280:	b	13b10 <__assert_fail@plt+0x2770>
   14284:	movw	r3, #33056	; 0x8120
   14288:	mov	r2, r1
   1428c:	mov	r1, r0
   14290:	mov	r0, #0
   14294:	movt	r3, #2
   14298:	b	13b10 <__assert_fail@plt+0x2770>
   1429c:	movw	r3, #33056	; 0x8120
   142a0:	mvn	r2, #0
   142a4:	movt	r3, #2
   142a8:	b	13b10 <__assert_fail@plt+0x2770>
   142ac:	movw	r3, #33056	; 0x8120
   142b0:	mov	r1, r0
   142b4:	mov	r0, #0
   142b8:	mvn	r2, #0
   142bc:	movt	r3, #2
   142c0:	b	13b10 <__assert_fail@plt+0x2770>
   142c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142c8:	add	fp, sp, #28
   142cc:	sub	sp, sp, #12
   142d0:	ldr	sl, [fp, #8]
   142d4:	mov	r9, r3
   142d8:	mov	r8, r1
   142dc:	mov	r5, r0
   142e0:	cmp	r2, #0
   142e4:	beq	14370 <__assert_fail@plt+0x2fd0>
   142e8:	mov	r0, r5
   142ec:	mov	r1, #58	; 0x3a
   142f0:	mov	r6, r2
   142f4:	bl	1128c <strchr@plt>
   142f8:	mov	r7, r0
   142fc:	mov	r0, r5
   14300:	mov	r2, r8
   14304:	mov	r3, r6
   14308:	stm	sp, {r9, sl}
   1430c:	mov	r1, r7
   14310:	bl	14390 <__assert_fail@plt+0x2ff0>
   14314:	mov	r4, r0
   14318:	cmp	r0, #0
   1431c:	beq	14364 <__assert_fail@plt+0x2fc4>
   14320:	cmp	r7, #0
   14324:	bne	14364 <__assert_fail@plt+0x2fc4>
   14328:	mov	r0, r5
   1432c:	mov	r1, #46	; 0x2e
   14330:	bl	1128c <strchr@plt>
   14334:	cmp	r0, #0
   14338:	beq	14364 <__assert_fail@plt+0x2fc4>
   1433c:	mov	r1, r0
   14340:	mov	r0, r5
   14344:	mov	r2, r8
   14348:	mov	r3, r6
   1434c:	stm	sp, {r9, sl}
   14350:	bl	14390 <__assert_fail@plt+0x2ff0>
   14354:	cmp	r0, #0
   14358:	movne	r0, r4
   1435c:	sub	sp, fp, #28
   14360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14364:	mov	r0, r4
   14368:	sub	sp, fp, #28
   1436c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14370:	mov	r0, r5
   14374:	mov	r1, #0
   14378:	mov	r2, r8
   1437c:	mov	r3, #0
   14380:	stm	sp, {r9, sl}
   14384:	bl	14390 <__assert_fail@plt+0x2ff0>
   14388:	sub	sp, fp, #28
   1438c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14394:	add	fp, sp, #28
   14398:	sub	sp, sp, #36	; 0x24
   1439c:	mov	sl, r3
   143a0:	mov	r9, r2
   143a4:	ldr	r3, [r2]
   143a8:	ldr	r2, [fp, #8]
   143ac:	mov	r4, r1
   143b0:	cmp	sl, #0
   143b4:	beq	143c0 <__assert_fail@plt+0x3020>
   143b8:	ldr	r1, [sl]
   143bc:	b	143c4 <__assert_fail@plt+0x3024>
   143c0:	mvn	r1, #0
   143c4:	ldr	r8, [fp, #12]
   143c8:	cmp	r2, #0
   143cc:	str	r1, [sp, #8]
   143d0:	str	r3, [sp, #4]
   143d4:	movne	r1, #0
   143d8:	strne	r1, [r2]
   143dc:	cmp	r8, #0
   143e0:	movne	r1, #0
   143e4:	strne	r1, [r8]
   143e8:	cmp	r4, #0
   143ec:	beq	14474 <__assert_fail@plt+0x30d4>
   143f0:	subs	r5, r4, r0
   143f4:	beq	14564 <__assert_fail@plt+0x31c4>
   143f8:	add	r1, r5, #1
   143fc:	bl	1520c <__assert_fail@plt+0x3e6c>
   14400:	mov	r7, r0
   14404:	mov	r0, #0
   14408:	mov	r6, r4
   1440c:	strb	r0, [r7, r5]
   14410:	ldrb	r0, [r6, #1]!
   14414:	cmp	r0, #0
   14418:	moveq	r6, r0
   1441c:	ldrb	r0, [r7]
   14420:	cmp	r0, #43	; 0x2b
   14424:	beq	14498 <__assert_fail@plt+0x30f8>
   14428:	mov	r0, r7
   1442c:	bl	110e8 <getpwnam@plt>
   14430:	cmp	r0, #0
   14434:	beq	14498 <__assert_fail@plt+0x30f8>
   14438:	ldr	r1, [r0, #8]
   1443c:	mov	r5, #0
   14440:	cmp	r4, #0
   14444:	str	r1, [sp, #4]
   14448:	beq	14678 <__assert_fail@plt+0x32d8>
   1444c:	cmp	r6, #0
   14450:	bne	14678 <__assert_fail@plt+0x32d8>
   14454:	ldr	r4, [r0, #12]
   14458:	mov	r0, r4
   1445c:	bl	11388 <getgrgid@plt>
   14460:	cmp	r0, #0
   14464:	str	r4, [sp, #8]
   14468:	beq	1468c <__assert_fail@plt+0x32ec>
   1446c:	ldr	r0, [r0]
   14470:	b	1469c <__assert_fail@plt+0x32fc>
   14474:	ldrb	r1, [r0]
   14478:	cmp	r1, #0
   1447c:	beq	14600 <__assert_fail@plt+0x3260>
   14480:	bl	1527c <__assert_fail@plt+0x3edc>
   14484:	mov	r7, r0
   14488:	mov	r6, #0
   1448c:	ldrb	r0, [r7]
   14490:	cmp	r0, #43	; 0x2b
   14494:	bne	14428 <__assert_fail@plt+0x3088>
   14498:	cmp	r4, #0
   1449c:	beq	14598 <__assert_fail@plt+0x31f8>
   144a0:	cmp	r6, #0
   144a4:	bne	14598 <__assert_fail@plt+0x31f8>
   144a8:	movw	r5, #30975	; 0x78ff
   144ac:	mov	r4, #0
   144b0:	movt	r5, #1
   144b4:	bl	1131c <endpwent@plt>
   144b8:	cmp	r6, #0
   144bc:	beq	14588 <__assert_fail@plt+0x31e8>
   144c0:	cmp	r5, #0
   144c4:	bne	14588 <__assert_fail@plt+0x31e8>
   144c8:	ldrb	r0, [r6]
   144cc:	cmp	r0, #43	; 0x2b
   144d0:	beq	144f0 <__assert_fail@plt+0x3150>
   144d4:	mov	r0, r6
   144d8:	bl	11394 <getgrnam@plt>
   144dc:	cmp	r0, #0
   144e0:	beq	144f0 <__assert_fail@plt+0x3150>
   144e4:	ldr	r0, [r0, #8]
   144e8:	mov	r5, #0
   144ec:	b	14540 <__assert_fail@plt+0x31a0>
   144f0:	movw	r0, #29348	; 0x72a4
   144f4:	add	r3, sp, #12
   144f8:	mov	r1, #0
   144fc:	mov	r2, #10
   14500:	movt	r0, #1
   14504:	str	r0, [sp]
   14508:	mov	r0, r6
   1450c:	bl	1532c <__assert_fail@plt+0x3f8c>
   14510:	ldr	r1, [sp, #12]
   14514:	mvn	r2, #0
   14518:	clz	r0, r0
   1451c:	movw	r5, #30961	; 0x78f1
   14520:	lsr	r0, r0, #5
   14524:	movt	r5, #1
   14528:	subs	r2, r1, r2
   1452c:	movwne	r2, #1
   14530:	ands	r0, r0, r2
   14534:	ldr	r0, [sp, #8]
   14538:	movne	r0, r1
   1453c:	movwne	r5, #0
   14540:	str	r0, [sp, #8]
   14544:	bl	110c4 <endgrent@plt>
   14548:	mov	r0, r6
   1454c:	bl	1527c <__assert_fail@plt+0x3edc>
   14550:	mov	r4, r0
   14554:	mov	r6, #0
   14558:	cmp	r5, #0
   1455c:	bne	14644 <__assert_fail@plt+0x32a4>
   14560:	b	14608 <__assert_fail@plt+0x3268>
   14564:	ldrb	r0, [r4, #1]!
   14568:	mov	r7, #0
   1456c:	mov	r5, #0
   14570:	cmp	r0, #0
   14574:	moveq	r4, r0
   14578:	mov	r6, r4
   1457c:	mov	r4, #0
   14580:	cmp	r6, #0
   14584:	bne	144c0 <__assert_fail@plt+0x3120>
   14588:	mov	r6, #0
   1458c:	cmp	r5, #0
   14590:	bne	14644 <__assert_fail@plt+0x32a4>
   14594:	b	14608 <__assert_fail@plt+0x3268>
   14598:	movw	r0, #29348	; 0x72a4
   1459c:	add	r3, sp, #12
   145a0:	mov	r1, #0
   145a4:	mov	r2, #10
   145a8:	mov	r4, #0
   145ac:	movt	r0, #1
   145b0:	str	r0, [sp]
   145b4:	mov	r0, r7
   145b8:	bl	1532c <__assert_fail@plt+0x3f8c>
   145bc:	ldr	r1, [sp, #12]
   145c0:	mvn	r2, #0
   145c4:	clz	r0, r0
   145c8:	movw	r5, #30948	; 0x78e4
   145cc:	lsr	r0, r0, #5
   145d0:	movt	r5, #1
   145d4:	subs	r2, r1, r2
   145d8:	movwne	r2, #1
   145dc:	ands	r0, r0, r2
   145e0:	ldr	r0, [sp, #4]
   145e4:	movne	r0, r1
   145e8:	movwne	r5, #0
   145ec:	str	r0, [sp, #4]
   145f0:	bl	1131c <endpwent@plt>
   145f4:	cmp	r6, #0
   145f8:	bne	144c0 <__assert_fail@plt+0x3120>
   145fc:	b	14588 <__assert_fail@plt+0x31e8>
   14600:	mov	r4, #0
   14604:	mov	r7, #0
   14608:	ldr	r0, [sp, #4]
   1460c:	cmp	sl, #0
   14610:	mov	r6, #1
   14614:	str	r0, [r9]
   14618:	ldrne	r0, [sp, #8]
   1461c:	strne	r0, [sl]
   14620:	ldr	r0, [fp, #8]
   14624:	cmp	r0, #0
   14628:	strne	r7, [r0]
   1462c:	movne	r7, #0
   14630:	cmp	r8, #0
   14634:	moveq	r5, #0
   14638:	strne	r4, [r8]
   1463c:	movne	r5, #0
   14640:	movne	r4, #0
   14644:	mov	r0, r7
   14648:	bl	122c0 <__assert_fail@plt+0xf20>
   1464c:	mov	r0, r4
   14650:	bl	122c0 <__assert_fail@plt+0xf20>
   14654:	mov	r0, #0
   14658:	cmp	r6, #0
   1465c:	bne	14670 <__assert_fail@plt+0x32d0>
   14660:	mov	r0, #0
   14664:	mov	r1, r5
   14668:	mov	r2, #5
   1466c:	bl	11160 <dcgettext@plt>
   14670:	sub	sp, fp, #28
   14674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14678:	mov	r4, #0
   1467c:	bl	1131c <endpwent@plt>
   14680:	cmp	r6, #0
   14684:	bne	144c0 <__assert_fail@plt+0x3120>
   14688:	b	14588 <__assert_fail@plt+0x31e8>
   1468c:	add	r2, sp, #12
   14690:	mov	r0, r4
   14694:	mov	r1, #0
   14698:	bl	16b5c <__assert_fail@plt+0x57bc>
   1469c:	bl	1527c <__assert_fail@plt+0x3edc>
   146a0:	mov	r4, r0
   146a4:	bl	110c4 <endgrent@plt>
   146a8:	bl	1131c <endpwent@plt>
   146ac:	cmp	r6, #0
   146b0:	bne	144c0 <__assert_fail@plt+0x3120>
   146b4:	b	14588 <__assert_fail@plt+0x31e8>
   146b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   146bc:	add	fp, sp, #24
   146c0:	sub	sp, sp, #32
   146c4:	ldr	r6, [fp, #12]
   146c8:	ldr	r7, [fp, #8]
   146cc:	mov	r4, r2
   146d0:	mov	r8, r0
   146d4:	cmp	r1, #0
   146d8:	beq	14700 <__assert_fail@plt+0x3360>
   146dc:	movw	r2, #30988	; 0x790c
   146e0:	mov	r5, r1
   146e4:	str	r3, [sp, #4]
   146e8:	str	r4, [sp]
   146ec:	mov	r0, r8
   146f0:	mov	r1, #1
   146f4:	movt	r2, #1
   146f8:	mov	r3, r5
   146fc:	b	14718 <__assert_fail@plt+0x3378>
   14700:	movw	r2, #31000	; 0x7918
   14704:	str	r3, [sp]
   14708:	mov	r0, r8
   1470c:	mov	r1, #1
   14710:	mov	r3, r4
   14714:	movt	r2, #1
   14718:	bl	112e0 <__fprintf_chk@plt>
   1471c:	movw	r1, #31007	; 0x791f
   14720:	mov	r0, #0
   14724:	mov	r2, #5
   14728:	movt	r1, #1
   1472c:	bl	11160 <dcgettext@plt>
   14730:	movw	r2, #31725	; 0x7bed
   14734:	mov	r3, r0
   14738:	movw	r0, #2022	; 0x7e6
   1473c:	mov	r1, #1
   14740:	movt	r2, #1
   14744:	str	r0, [sp]
   14748:	mov	r0, r8
   1474c:	bl	112e0 <__fprintf_chk@plt>
   14750:	movw	r4, #29347	; 0x72a3
   14754:	mov	r1, r8
   14758:	movt	r4, #1
   1475c:	mov	r0, r4
   14760:	bl	110d0 <fputs_unlocked@plt>
   14764:	movw	r1, #31011	; 0x7923
   14768:	mov	r0, #0
   1476c:	mov	r2, #5
   14770:	movt	r1, #1
   14774:	bl	11160 <dcgettext@plt>
   14778:	movw	r3, #31182	; 0x79ce
   1477c:	mov	r2, r0
   14780:	mov	r0, r8
   14784:	mov	r1, #1
   14788:	movt	r3, #1
   1478c:	bl	112e0 <__fprintf_chk@plt>
   14790:	mov	r0, r4
   14794:	mov	r1, r8
   14798:	bl	110d0 <fputs_unlocked@plt>
   1479c:	cmp	r6, #9
   147a0:	bhi	147dc <__assert_fail@plt+0x343c>
   147a4:	add	r0, pc, #0
   147a8:	ldr	pc, [r0, r6, lsl #2]
   147ac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147b0:	andeq	r4, r1, r8, ror #15
   147b4:	andeq	r4, r1, r8, lsl r8
   147b8:	andeq	r4, r1, r0, asr #16
   147bc:	andeq	r4, r1, r8, ror #16
   147c0:	muleq	r1, r0, r8
   147c4:			; <UNDEFINED> instruction: 0x000148b8
   147c8:	strdeq	r4, [r1], -r0
   147cc:	muleq	r1, r8, r9
   147d0:	andeq	r4, r1, r0, asr #18
   147d4:	sub	sp, fp, #24
   147d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   147dc:	movw	r1, #31535	; 0x7b2f
   147e0:	movt	r1, #1
   147e4:	b	14948 <__assert_fail@plt+0x35a8>
   147e8:	movw	r1, #31216	; 0x79f0
   147ec:	mov	r0, #0
   147f0:	mov	r2, #5
   147f4:	movt	r1, #1
   147f8:	bl	11160 <dcgettext@plt>
   147fc:	ldr	r3, [r7]
   14800:	mov	r2, r0
   14804:	mov	r0, r8
   14808:	mov	r1, #1
   1480c:	sub	sp, fp, #24
   14810:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14814:	b	112e0 <__fprintf_chk@plt>
   14818:	movw	r1, #31232	; 0x7a00
   1481c:	mov	r0, #0
   14820:	mov	r2, #5
   14824:	movt	r1, #1
   14828:	bl	11160 <dcgettext@plt>
   1482c:	mov	r2, r0
   14830:	ldr	r3, [r7]
   14834:	ldr	r0, [r7, #4]
   14838:	str	r0, [sp]
   1483c:	b	1492c <__assert_fail@plt+0x358c>
   14840:	movw	r1, #31255	; 0x7a17
   14844:	mov	r0, #0
   14848:	mov	r2, #5
   1484c:	movt	r1, #1
   14850:	bl	11160 <dcgettext@plt>
   14854:	mov	r2, r0
   14858:	ldr	r3, [r7]
   1485c:	ldmib	r7, {r0, r1}
   14860:	stm	sp, {r0, r1}
   14864:	b	1492c <__assert_fail@plt+0x358c>
   14868:	movw	r1, #31283	; 0x7a33
   1486c:	mov	r0, #0
   14870:	mov	r2, #5
   14874:	movt	r1, #1
   14878:	bl	11160 <dcgettext@plt>
   1487c:	ldr	r3, [r7]
   14880:	mov	r2, r0
   14884:	ldmib	r7, {r0, r1, r7}
   14888:	stm	sp, {r0, r1, r7}
   1488c:	b	1492c <__assert_fail@plt+0x358c>
   14890:	movw	r1, #31315	; 0x7a53
   14894:	mov	r0, #0
   14898:	mov	r2, #5
   1489c:	movt	r1, #1
   148a0:	bl	11160 <dcgettext@plt>
   148a4:	ldr	r3, [r7]
   148a8:	mov	r2, r0
   148ac:	ldmib	r7, {r0, r1, r6, r7}
   148b0:	stm	sp, {r0, r1, r6, r7}
   148b4:	b	1492c <__assert_fail@plt+0x358c>
   148b8:	movw	r1, #31351	; 0x7a77
   148bc:	mov	r0, #0
   148c0:	mov	r2, #5
   148c4:	movt	r1, #1
   148c8:	bl	11160 <dcgettext@plt>
   148cc:	mov	r2, r0
   148d0:	ldr	r3, [r7]
   148d4:	ldmib	r7, {r0, r1, r6}
   148d8:	ldr	r5, [r7, #16]
   148dc:	ldr	r7, [r7, #20]
   148e0:	stm	sp, {r0, r1, r6}
   148e4:	str	r5, [sp, #12]
   148e8:	str	r7, [sp, #16]
   148ec:	b	1492c <__assert_fail@plt+0x358c>
   148f0:	movw	r1, #31391	; 0x7a9f
   148f4:	mov	r0, #0
   148f8:	mov	r2, #5
   148fc:	movt	r1, #1
   14900:	bl	11160 <dcgettext@plt>
   14904:	mov	r2, r0
   14908:	ldr	r3, [r7]
   1490c:	ldmib	r7, {r0, r1, r6}
   14910:	ldr	r5, [r7, #16]
   14914:	ldr	r4, [r7, #20]
   14918:	ldr	r7, [r7, #24]
   1491c:	stm	sp, {r0, r1, r6}
   14920:	str	r5, [sp, #12]
   14924:	str	r4, [sp, #16]
   14928:	str	r7, [sp, #20]
   1492c:	mov	r0, r8
   14930:	mov	r1, #1
   14934:	bl	112e0 <__fprintf_chk@plt>
   14938:	sub	sp, fp, #24
   1493c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14940:	movw	r1, #31483	; 0x7afb
   14944:	movt	r1, #1
   14948:	mov	r0, #0
   1494c:	mov	r2, #5
   14950:	bl	11160 <dcgettext@plt>
   14954:	mov	ip, r0
   14958:	ldr	r3, [r7]
   1495c:	ldr	r0, [r7, #4]
   14960:	ldr	r1, [r7, #8]
   14964:	ldr	r6, [r7, #12]
   14968:	ldr	r5, [r7, #16]
   1496c:	ldr	r4, [r7, #20]
   14970:	ldr	r2, [r7, #24]
   14974:	ldr	lr, [r7, #28]
   14978:	ldr	r7, [r7, #32]
   1497c:	stm	sp, {r0, r1, r6}
   14980:	str	r5, [sp, #12]
   14984:	str	r4, [sp, #16]
   14988:	str	r2, [sp, #20]
   1498c:	str	lr, [sp, #24]
   14990:	str	r7, [sp, #28]
   14994:	b	149dc <__assert_fail@plt+0x363c>
   14998:	movw	r1, #31435	; 0x7acb
   1499c:	mov	r0, #0
   149a0:	mov	r2, #5
   149a4:	movt	r1, #1
   149a8:	bl	11160 <dcgettext@plt>
   149ac:	mov	ip, r0
   149b0:	ldr	r3, [r7]
   149b4:	ldmib	r7, {r0, r1, r6}
   149b8:	ldr	r5, [r7, #16]
   149bc:	ldr	r4, [r7, #20]
   149c0:	ldr	r2, [r7, #24]
   149c4:	ldr	r7, [r7, #28]
   149c8:	stm	sp, {r0, r1, r6}
   149cc:	str	r5, [sp, #12]
   149d0:	str	r4, [sp, #16]
   149d4:	str	r2, [sp, #20]
   149d8:	str	r7, [sp, #24]
   149dc:	mov	r0, r8
   149e0:	mov	r1, #1
   149e4:	mov	r2, ip
   149e8:	bl	112e0 <__fprintf_chk@plt>
   149ec:	sub	sp, fp, #24
   149f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149f4:	push	{r4, sl, fp, lr}
   149f8:	add	fp, sp, #8
   149fc:	sub	sp, sp, #8
   14a00:	ldr	ip, [fp, #8]
   14a04:	mov	lr, #0
   14a08:	ldr	r4, [ip, lr, lsl #2]
   14a0c:	add	lr, lr, #1
   14a10:	cmp	r4, #0
   14a14:	bne	14a08 <__assert_fail@plt+0x3668>
   14a18:	sub	r4, lr, #1
   14a1c:	str	ip, [sp]
   14a20:	str	r4, [sp, #4]
   14a24:	bl	146b8 <__assert_fail@plt+0x3318>
   14a28:	sub	sp, fp, #8
   14a2c:	pop	{r4, sl, fp, pc}
   14a30:	push	{fp, lr}
   14a34:	mov	fp, sp
   14a38:	sub	sp, sp, #48	; 0x30
   14a3c:	ldr	ip, [fp, #8]
   14a40:	ldr	lr, [ip]
   14a44:	cmp	lr, #0
   14a48:	str	lr, [sp, #8]
   14a4c:	beq	14ae8 <__assert_fail@plt+0x3748>
   14a50:	ldr	lr, [ip, #4]
   14a54:	cmp	lr, #0
   14a58:	str	lr, [sp, #12]
   14a5c:	beq	14af0 <__assert_fail@plt+0x3750>
   14a60:	ldr	lr, [ip, #8]
   14a64:	cmp	lr, #0
   14a68:	str	lr, [sp, #16]
   14a6c:	beq	14af8 <__assert_fail@plt+0x3758>
   14a70:	ldr	lr, [ip, #12]
   14a74:	cmp	lr, #0
   14a78:	str	lr, [sp, #20]
   14a7c:	beq	14b00 <__assert_fail@plt+0x3760>
   14a80:	ldr	lr, [ip, #16]
   14a84:	cmp	lr, #0
   14a88:	str	lr, [sp, #24]
   14a8c:	beq	14b08 <__assert_fail@plt+0x3768>
   14a90:	ldr	lr, [ip, #20]
   14a94:	cmp	lr, #0
   14a98:	str	lr, [sp, #28]
   14a9c:	beq	14b10 <__assert_fail@plt+0x3770>
   14aa0:	ldr	lr, [ip, #24]
   14aa4:	cmp	lr, #0
   14aa8:	str	lr, [sp, #32]
   14aac:	beq	14b18 <__assert_fail@plt+0x3778>
   14ab0:	ldr	lr, [ip, #28]
   14ab4:	cmp	lr, #0
   14ab8:	str	lr, [sp, #36]	; 0x24
   14abc:	beq	14b20 <__assert_fail@plt+0x3780>
   14ac0:	ldr	lr, [ip, #32]
   14ac4:	cmp	lr, #0
   14ac8:	str	lr, [sp, #40]	; 0x28
   14acc:	beq	14b28 <__assert_fail@plt+0x3788>
   14ad0:	ldr	lr, [ip, #36]	; 0x24
   14ad4:	mov	ip, #10
   14ad8:	cmp	lr, #0
   14adc:	str	lr, [sp, #44]	; 0x2c
   14ae0:	movweq	ip, #9
   14ae4:	b	14b2c <__assert_fail@plt+0x378c>
   14ae8:	mov	ip, #0
   14aec:	b	14b2c <__assert_fail@plt+0x378c>
   14af0:	mov	ip, #1
   14af4:	b	14b2c <__assert_fail@plt+0x378c>
   14af8:	mov	ip, #2
   14afc:	b	14b2c <__assert_fail@plt+0x378c>
   14b00:	mov	ip, #3
   14b04:	b	14b2c <__assert_fail@plt+0x378c>
   14b08:	mov	ip, #4
   14b0c:	b	14b2c <__assert_fail@plt+0x378c>
   14b10:	mov	ip, #5
   14b14:	b	14b2c <__assert_fail@plt+0x378c>
   14b18:	mov	ip, #6
   14b1c:	b	14b2c <__assert_fail@plt+0x378c>
   14b20:	mov	ip, #7
   14b24:	b	14b2c <__assert_fail@plt+0x378c>
   14b28:	mov	ip, #8
   14b2c:	add	lr, sp, #8
   14b30:	str	ip, [sp, #4]
   14b34:	str	lr, [sp]
   14b38:	bl	146b8 <__assert_fail@plt+0x3318>
   14b3c:	mov	sp, fp
   14b40:	pop	{fp, pc}
   14b44:	push	{fp, lr}
   14b48:	mov	fp, sp
   14b4c:	sub	sp, sp, #56	; 0x38
   14b50:	add	ip, fp, #8
   14b54:	str	ip, [sp, #12]
   14b58:	ldr	lr, [fp, #8]
   14b5c:	cmp	lr, #0
   14b60:	str	lr, [sp, #16]
   14b64:	beq	14c00 <__assert_fail@plt+0x3860>
   14b68:	ldr	lr, [ip, #4]
   14b6c:	cmp	lr, #0
   14b70:	str	lr, [sp, #20]
   14b74:	beq	14c08 <__assert_fail@plt+0x3868>
   14b78:	ldr	lr, [ip, #8]
   14b7c:	cmp	lr, #0
   14b80:	str	lr, [sp, #24]
   14b84:	beq	14c10 <__assert_fail@plt+0x3870>
   14b88:	ldr	lr, [ip, #12]
   14b8c:	cmp	lr, #0
   14b90:	str	lr, [sp, #28]
   14b94:	beq	14c18 <__assert_fail@plt+0x3878>
   14b98:	ldr	lr, [ip, #16]
   14b9c:	cmp	lr, #0
   14ba0:	str	lr, [sp, #32]
   14ba4:	beq	14c20 <__assert_fail@plt+0x3880>
   14ba8:	ldr	lr, [ip, #20]
   14bac:	cmp	lr, #0
   14bb0:	str	lr, [sp, #36]	; 0x24
   14bb4:	beq	14c28 <__assert_fail@plt+0x3888>
   14bb8:	ldr	lr, [ip, #24]
   14bbc:	cmp	lr, #0
   14bc0:	str	lr, [sp, #40]	; 0x28
   14bc4:	beq	14c30 <__assert_fail@plt+0x3890>
   14bc8:	ldr	lr, [ip, #28]
   14bcc:	cmp	lr, #0
   14bd0:	str	lr, [sp, #44]	; 0x2c
   14bd4:	beq	14c38 <__assert_fail@plt+0x3898>
   14bd8:	ldr	lr, [ip, #32]
   14bdc:	cmp	lr, #0
   14be0:	str	lr, [sp, #48]	; 0x30
   14be4:	beq	14c40 <__assert_fail@plt+0x38a0>
   14be8:	ldr	lr, [ip, #36]	; 0x24
   14bec:	mov	ip, #10
   14bf0:	cmp	lr, #0
   14bf4:	str	lr, [sp, #52]	; 0x34
   14bf8:	movweq	ip, #9
   14bfc:	b	14c44 <__assert_fail@plt+0x38a4>
   14c00:	mov	ip, #0
   14c04:	b	14c44 <__assert_fail@plt+0x38a4>
   14c08:	mov	ip, #1
   14c0c:	b	14c44 <__assert_fail@plt+0x38a4>
   14c10:	mov	ip, #2
   14c14:	b	14c44 <__assert_fail@plt+0x38a4>
   14c18:	mov	ip, #3
   14c1c:	b	14c44 <__assert_fail@plt+0x38a4>
   14c20:	mov	ip, #4
   14c24:	b	14c44 <__assert_fail@plt+0x38a4>
   14c28:	mov	ip, #5
   14c2c:	b	14c44 <__assert_fail@plt+0x38a4>
   14c30:	mov	ip, #6
   14c34:	b	14c44 <__assert_fail@plt+0x38a4>
   14c38:	mov	ip, #7
   14c3c:	b	14c44 <__assert_fail@plt+0x38a4>
   14c40:	mov	ip, #8
   14c44:	add	lr, sp, #16
   14c48:	str	ip, [sp, #4]
   14c4c:	str	lr, [sp]
   14c50:	bl	146b8 <__assert_fail@plt+0x3318>
   14c54:	mov	sp, fp
   14c58:	pop	{fp, pc}
   14c5c:	push	{fp, lr}
   14c60:	mov	fp, sp
   14c64:	movw	r0, #33140	; 0x8174
   14c68:	movt	r0, #2
   14c6c:	ldr	r1, [r0]
   14c70:	movw	r0, #29347	; 0x72a3
   14c74:	movt	r0, #1
   14c78:	bl	110d0 <fputs_unlocked@plt>
   14c7c:	movw	r1, #31595	; 0x7b6b
   14c80:	mov	r0, #0
   14c84:	mov	r2, #5
   14c88:	movt	r1, #1
   14c8c:	bl	11160 <dcgettext@plt>
   14c90:	movw	r2, #31615	; 0x7b7f
   14c94:	mov	r1, r0
   14c98:	mov	r0, #1
   14c9c:	movt	r2, #1
   14ca0:	bl	112c8 <__printf_chk@plt>
   14ca4:	movw	r1, #31637	; 0x7b95
   14ca8:	mov	r0, #0
   14cac:	mov	r2, #5
   14cb0:	movt	r1, #1
   14cb4:	bl	11160 <dcgettext@plt>
   14cb8:	movw	r2, #29765	; 0x7445
   14cbc:	movw	r3, #30244	; 0x7624
   14cc0:	mov	r1, r0
   14cc4:	mov	r0, #1
   14cc8:	movt	r2, #1
   14ccc:	movt	r3, #1
   14cd0:	bl	112c8 <__printf_chk@plt>
   14cd4:	movw	r1, #31657	; 0x7ba9
   14cd8:	mov	r0, #0
   14cdc:	mov	r2, #5
   14ce0:	movt	r1, #1
   14ce4:	bl	11160 <dcgettext@plt>
   14ce8:	movw	r2, #31696	; 0x7bd0
   14cec:	mov	r1, r0
   14cf0:	mov	r0, #1
   14cf4:	movt	r2, #1
   14cf8:	pop	{fp, lr}
   14cfc:	b	112c8 <__printf_chk@plt>
   14d00:	push	{r4, r5, r6, sl, fp, lr}
   14d04:	add	fp, sp, #16
   14d08:	mov	r4, r2
   14d0c:	mov	r5, r1
   14d10:	mov	r6, r0
   14d14:	bl	16ec8 <__assert_fail@plt+0x5b28>
   14d18:	cmp	r0, #0
   14d1c:	popne	{r4, r5, r6, sl, fp, pc}
   14d20:	cmp	r6, #0
   14d24:	beq	14d38 <__assert_fail@plt+0x3998>
   14d28:	cmp	r5, #0
   14d2c:	cmpne	r4, #0
   14d30:	bne	14d38 <__assert_fail@plt+0x3998>
   14d34:	pop	{r4, r5, r6, sl, fp, pc}
   14d38:	bl	152b4 <__assert_fail@plt+0x3f14>
   14d3c:	push	{r4, r5, r6, sl, fp, lr}
   14d40:	add	fp, sp, #16
   14d44:	mov	r4, r2
   14d48:	mov	r5, r1
   14d4c:	mov	r6, r0
   14d50:	bl	16ec8 <__assert_fail@plt+0x5b28>
   14d54:	cmp	r0, #0
   14d58:	popne	{r4, r5, r6, sl, fp, pc}
   14d5c:	cmp	r6, #0
   14d60:	beq	14d74 <__assert_fail@plt+0x39d4>
   14d64:	cmp	r5, #0
   14d68:	cmpne	r4, #0
   14d6c:	bne	14d74 <__assert_fail@plt+0x39d4>
   14d70:	pop	{r4, r5, r6, sl, fp, pc}
   14d74:	bl	152b4 <__assert_fail@plt+0x3f14>
   14d78:	push	{fp, lr}
   14d7c:	mov	fp, sp
   14d80:	bl	168b4 <__assert_fail@plt+0x5514>
   14d84:	cmp	r0, #0
   14d88:	popne	{fp, pc}
   14d8c:	bl	152b4 <__assert_fail@plt+0x3f14>
   14d90:	push	{fp, lr}
   14d94:	mov	fp, sp
   14d98:	bl	168b4 <__assert_fail@plt+0x5514>
   14d9c:	cmp	r0, #0
   14da0:	popne	{fp, pc}
   14da4:	bl	152b4 <__assert_fail@plt+0x3f14>
   14da8:	push	{fp, lr}
   14dac:	mov	fp, sp
   14db0:	bl	168b4 <__assert_fail@plt+0x5514>
   14db4:	cmp	r0, #0
   14db8:	popne	{fp, pc}
   14dbc:	bl	152b4 <__assert_fail@plt+0x3f14>
   14dc0:	push	{r4, r5, fp, lr}
   14dc4:	add	fp, sp, #8
   14dc8:	mov	r4, r1
   14dcc:	mov	r5, r0
   14dd0:	bl	168e4 <__assert_fail@plt+0x5544>
   14dd4:	cmp	r0, #0
   14dd8:	popne	{r4, r5, fp, pc}
   14ddc:	cmp	r5, #0
   14de0:	beq	14df0 <__assert_fail@plt+0x3a50>
   14de4:	cmp	r4, #0
   14de8:	bne	14df0 <__assert_fail@plt+0x3a50>
   14dec:	pop	{r4, r5, fp, pc}
   14df0:	bl	152b4 <__assert_fail@plt+0x3f14>
   14df4:	push	{fp, lr}
   14df8:	mov	fp, sp
   14dfc:	cmp	r1, #0
   14e00:	orreq	r1, r1, #1
   14e04:	bl	168e4 <__assert_fail@plt+0x5544>
   14e08:	cmp	r0, #0
   14e0c:	popne	{fp, pc}
   14e10:	bl	152b4 <__assert_fail@plt+0x3f14>
   14e14:	push	{fp, lr}
   14e18:	mov	fp, sp
   14e1c:	clz	r3, r2
   14e20:	lsr	ip, r3, #5
   14e24:	clz	r3, r1
   14e28:	lsr	r3, r3, #5
   14e2c:	orrs	r3, r3, ip
   14e30:	movwne	r1, #1
   14e34:	movwne	r2, #1
   14e38:	bl	16ec8 <__assert_fail@plt+0x5b28>
   14e3c:	cmp	r0, #0
   14e40:	popne	{fp, pc}
   14e44:	bl	152b4 <__assert_fail@plt+0x3f14>
   14e48:	push	{fp, lr}
   14e4c:	mov	fp, sp
   14e50:	mov	r2, r1
   14e54:	mov	r1, r0
   14e58:	mov	r0, #0
   14e5c:	bl	16ec8 <__assert_fail@plt+0x5b28>
   14e60:	cmp	r0, #0
   14e64:	popne	{fp, pc}
   14e68:	bl	152b4 <__assert_fail@plt+0x3f14>
   14e6c:	push	{fp, lr}
   14e70:	mov	fp, sp
   14e74:	mov	r2, r1
   14e78:	mov	r1, r0
   14e7c:	clz	r0, r2
   14e80:	clz	r3, r1
   14e84:	lsr	r0, r0, #5
   14e88:	lsr	r3, r3, #5
   14e8c:	orrs	r0, r3, r0
   14e90:	mov	r0, #0
   14e94:	movwne	r1, #1
   14e98:	movwne	r2, #1
   14e9c:	bl	16ec8 <__assert_fail@plt+0x5b28>
   14ea0:	cmp	r0, #0
   14ea4:	popne	{fp, pc}
   14ea8:	bl	152b4 <__assert_fail@plt+0x3f14>
   14eac:	push	{r4, r5, r6, sl, fp, lr}
   14eb0:	add	fp, sp, #16
   14eb4:	ldr	r5, [r1]
   14eb8:	mov	r4, r1
   14ebc:	mov	r6, r0
   14ec0:	cmp	r0, #0
   14ec4:	beq	14edc <__assert_fail@plt+0x3b3c>
   14ec8:	mov	r0, #1
   14ecc:	add	r0, r0, r5, lsr #1
   14ed0:	adds	r5, r5, r0
   14ed4:	bcc	14ee4 <__assert_fail@plt+0x3b44>
   14ed8:	b	14f20 <__assert_fail@plt+0x3b80>
   14edc:	cmp	r5, #0
   14ee0:	movweq	r5, #64	; 0x40
   14ee4:	mov	r0, r6
   14ee8:	mov	r1, r5
   14eec:	mov	r2, #1
   14ef0:	bl	16ec8 <__assert_fail@plt+0x5b28>
   14ef4:	cmp	r5, #0
   14ef8:	mov	r1, r5
   14efc:	movwne	r1, #1
   14f00:	cmp	r0, #0
   14f04:	bne	14f18 <__assert_fail@plt+0x3b78>
   14f08:	clz	r2, r6
   14f0c:	lsr	r2, r2, #5
   14f10:	orrs	r1, r2, r1
   14f14:	bne	14f20 <__assert_fail@plt+0x3b80>
   14f18:	str	r5, [r4]
   14f1c:	pop	{r4, r5, r6, sl, fp, pc}
   14f20:	bl	152b4 <__assert_fail@plt+0x3f14>
   14f24:	push	{r4, r5, r6, r7, fp, lr}
   14f28:	add	fp, sp, #16
   14f2c:	ldr	r5, [r1]
   14f30:	mov	r6, r2
   14f34:	mov	r4, r1
   14f38:	mov	r7, r0
   14f3c:	cmp	r0, #0
   14f40:	beq	14f58 <__assert_fail@plt+0x3bb8>
   14f44:	mov	r0, #1
   14f48:	add	r0, r0, r5, lsr #1
   14f4c:	adds	r5, r5, r0
   14f50:	bcc	14f70 <__assert_fail@plt+0x3bd0>
   14f54:	b	14fa4 <__assert_fail@plt+0x3c04>
   14f58:	cmp	r5, #0
   14f5c:	bne	14f70 <__assert_fail@plt+0x3bd0>
   14f60:	mov	r0, #64	; 0x40
   14f64:	cmp	r6, #64	; 0x40
   14f68:	udiv	r5, r0, r6
   14f6c:	addhi	r5, r5, #1
   14f70:	mov	r0, r7
   14f74:	mov	r1, r5
   14f78:	mov	r2, r6
   14f7c:	bl	16ec8 <__assert_fail@plt+0x5b28>
   14f80:	cmp	r0, #0
   14f84:	bne	14f9c <__assert_fail@plt+0x3bfc>
   14f88:	cmp	r7, #0
   14f8c:	beq	14fa4 <__assert_fail@plt+0x3c04>
   14f90:	cmp	r6, #0
   14f94:	cmpne	r5, #0
   14f98:	bne	14fa4 <__assert_fail@plt+0x3c04>
   14f9c:	str	r5, [r4]
   14fa0:	pop	{r4, r5, r6, r7, fp, pc}
   14fa4:	bl	152b4 <__assert_fail@plt+0x3f14>
   14fa8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fac:	add	fp, sp, #24
   14fb0:	mov	r8, r1
   14fb4:	ldr	r1, [r1]
   14fb8:	mov	r5, r0
   14fbc:	add	r0, r1, r1, asr #1
   14fc0:	cmp	r0, r1
   14fc4:	mvnvs	r0, #-2147483648	; 0x80000000
   14fc8:	cmp	r0, r3
   14fcc:	mov	r7, r0
   14fd0:	movgt	r7, r3
   14fd4:	cmn	r3, #1
   14fd8:	movle	r7, r0
   14fdc:	ldr	r0, [fp, #8]
   14fe0:	cmn	r0, #1
   14fe4:	ble	1500c <__assert_fail@plt+0x3c6c>
   14fe8:	cmp	r0, #0
   14fec:	beq	15060 <__assert_fail@plt+0x3cc0>
   14ff0:	cmn	r7, #1
   14ff4:	ble	15034 <__assert_fail@plt+0x3c94>
   14ff8:	mvn	r4, #-2147483648	; 0x80000000
   14ffc:	udiv	r6, r4, r0
   15000:	cmp	r6, r7
   15004:	bge	15060 <__assert_fail@plt+0x3cc0>
   15008:	b	15070 <__assert_fail@plt+0x3cd0>
   1500c:	cmn	r7, #1
   15010:	ble	15050 <__assert_fail@plt+0x3cb0>
   15014:	cmn	r0, #1
   15018:	beq	15060 <__assert_fail@plt+0x3cc0>
   1501c:	mov	r6, #-2147483648	; 0x80000000
   15020:	mvn	r4, #-2147483648	; 0x80000000
   15024:	sdiv	r6, r6, r0
   15028:	cmp	r6, r7
   1502c:	bge	15060 <__assert_fail@plt+0x3cc0>
   15030:	b	15070 <__assert_fail@plt+0x3cd0>
   15034:	beq	15060 <__assert_fail@plt+0x3cc0>
   15038:	mov	r6, #-2147483648	; 0x80000000
   1503c:	mvn	r4, #-2147483648	; 0x80000000
   15040:	sdiv	r6, r6, r7
   15044:	cmp	r6, r0
   15048:	bge	15060 <__assert_fail@plt+0x3cc0>
   1504c:	b	15070 <__assert_fail@plt+0x3cd0>
   15050:	mvn	r4, #-2147483648	; 0x80000000
   15054:	sdiv	r6, r4, r0
   15058:	cmp	r7, r6
   1505c:	blt	15070 <__assert_fail@plt+0x3cd0>
   15060:	mul	r6, r7, r0
   15064:	mov	r4, #64	; 0x40
   15068:	cmp	r6, #63	; 0x3f
   1506c:	bgt	15078 <__assert_fail@plt+0x3cd8>
   15070:	sdiv	r7, r4, r0
   15074:	mul	r6, r7, r0
   15078:	cmp	r5, #0
   1507c:	moveq	r4, #0
   15080:	streq	r4, [r8]
   15084:	sub	r4, r7, r1
   15088:	cmp	r4, r2
   1508c:	bge	15138 <__assert_fail@plt+0x3d98>
   15090:	add	r7, r1, r2
   15094:	mov	r6, #0
   15098:	mov	r2, #0
   1509c:	cmp	r7, r3
   150a0:	movwgt	r6, #1
   150a4:	cmn	r3, #1
   150a8:	movwgt	r2, #1
   150ac:	cmp	r7, r1
   150b0:	bvs	1516c <__assert_fail@plt+0x3dcc>
   150b4:	ands	r1, r2, r6
   150b8:	bne	1516c <__assert_fail@plt+0x3dcc>
   150bc:	cmn	r0, #1
   150c0:	ble	150e8 <__assert_fail@plt+0x3d48>
   150c4:	cmp	r0, #0
   150c8:	beq	15134 <__assert_fail@plt+0x3d94>
   150cc:	cmn	r7, #1
   150d0:	ble	1510c <__assert_fail@plt+0x3d6c>
   150d4:	mvn	r1, #-2147483648	; 0x80000000
   150d8:	udiv	r1, r1, r0
   150dc:	cmp	r1, r7
   150e0:	bge	15134 <__assert_fail@plt+0x3d94>
   150e4:	b	1516c <__assert_fail@plt+0x3dcc>
   150e8:	cmn	r7, #1
   150ec:	ble	15124 <__assert_fail@plt+0x3d84>
   150f0:	cmn	r0, #1
   150f4:	beq	15134 <__assert_fail@plt+0x3d94>
   150f8:	mov	r1, #-2147483648	; 0x80000000
   150fc:	sdiv	r1, r1, r0
   15100:	cmp	r1, r7
   15104:	bge	15134 <__assert_fail@plt+0x3d94>
   15108:	b	1516c <__assert_fail@plt+0x3dcc>
   1510c:	beq	15134 <__assert_fail@plt+0x3d94>
   15110:	mov	r1, #-2147483648	; 0x80000000
   15114:	sdiv	r1, r1, r7
   15118:	cmp	r1, r0
   1511c:	bge	15134 <__assert_fail@plt+0x3d94>
   15120:	b	1516c <__assert_fail@plt+0x3dcc>
   15124:	mvn	r1, #-2147483648	; 0x80000000
   15128:	sdiv	r1, r1, r0
   1512c:	cmp	r7, r1
   15130:	blt	1516c <__assert_fail@plt+0x3dcc>
   15134:	mul	r6, r7, r0
   15138:	mov	r0, r5
   1513c:	mov	r1, r6
   15140:	bl	168e4 <__assert_fail@plt+0x5544>
   15144:	cmp	r6, #0
   15148:	movwne	r6, #1
   1514c:	cmp	r0, #0
   15150:	bne	15164 <__assert_fail@plt+0x3dc4>
   15154:	clz	r1, r5
   15158:	lsr	r1, r1, #5
   1515c:	orrs	r1, r1, r6
   15160:	bne	1516c <__assert_fail@plt+0x3dcc>
   15164:	str	r7, [r8]
   15168:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1516c:	bl	152b4 <__assert_fail@plt+0x3f14>
   15170:	push	{fp, lr}
   15174:	mov	fp, sp
   15178:	mov	r1, #1
   1517c:	bl	16860 <__assert_fail@plt+0x54c0>
   15180:	cmp	r0, #0
   15184:	popne	{fp, pc}
   15188:	bl	152b4 <__assert_fail@plt+0x3f14>
   1518c:	push	{fp, lr}
   15190:	mov	fp, sp
   15194:	bl	16860 <__assert_fail@plt+0x54c0>
   15198:	cmp	r0, #0
   1519c:	popne	{fp, pc}
   151a0:	bl	152b4 <__assert_fail@plt+0x3f14>
   151a4:	push	{fp, lr}
   151a8:	mov	fp, sp
   151ac:	mov	r1, #1
   151b0:	bl	16860 <__assert_fail@plt+0x54c0>
   151b4:	cmp	r0, #0
   151b8:	popne	{fp, pc}
   151bc:	bl	152b4 <__assert_fail@plt+0x3f14>
   151c0:	push	{fp, lr}
   151c4:	mov	fp, sp
   151c8:	bl	16860 <__assert_fail@plt+0x54c0>
   151cc:	cmp	r0, #0
   151d0:	popne	{fp, pc}
   151d4:	bl	152b4 <__assert_fail@plt+0x3f14>
   151d8:	push	{r4, r5, fp, lr}
   151dc:	add	fp, sp, #8
   151e0:	mov	r5, r0
   151e4:	mov	r0, r1
   151e8:	mov	r4, r1
   151ec:	bl	168b4 <__assert_fail@plt+0x5514>
   151f0:	cmp	r0, #0
   151f4:	beq	15208 <__assert_fail@plt+0x3e68>
   151f8:	mov	r1, r5
   151fc:	mov	r2, r4
   15200:	pop	{r4, r5, fp, lr}
   15204:	b	11130 <memcpy@plt>
   15208:	bl	152b4 <__assert_fail@plt+0x3f14>
   1520c:	push	{r4, r5, fp, lr}
   15210:	add	fp, sp, #8
   15214:	mov	r5, r0
   15218:	mov	r0, r1
   1521c:	mov	r4, r1
   15220:	bl	168b4 <__assert_fail@plt+0x5514>
   15224:	cmp	r0, #0
   15228:	beq	1523c <__assert_fail@plt+0x3e9c>
   1522c:	mov	r1, r5
   15230:	mov	r2, r4
   15234:	pop	{r4, r5, fp, lr}
   15238:	b	11130 <memcpy@plt>
   1523c:	bl	152b4 <__assert_fail@plt+0x3f14>
   15240:	push	{r4, r5, fp, lr}
   15244:	add	fp, sp, #8
   15248:	mov	r5, r0
   1524c:	add	r0, r1, #1
   15250:	mov	r4, r1
   15254:	bl	168b4 <__assert_fail@plt+0x5514>
   15258:	cmp	r0, #0
   1525c:	beq	15278 <__assert_fail@plt+0x3ed8>
   15260:	mov	r1, #0
   15264:	mov	r2, r4
   15268:	strb	r1, [r0, r4]
   1526c:	mov	r1, r5
   15270:	pop	{r4, r5, fp, lr}
   15274:	b	11130 <memcpy@plt>
   15278:	bl	152b4 <__assert_fail@plt+0x3f14>
   1527c:	push	{r4, r5, fp, lr}
   15280:	add	fp, sp, #8
   15284:	mov	r4, r0
   15288:	bl	11280 <strlen@plt>
   1528c:	add	r5, r0, #1
   15290:	mov	r0, r5
   15294:	bl	168b4 <__assert_fail@plt+0x5514>
   15298:	cmp	r0, #0
   1529c:	beq	152b0 <__assert_fail@plt+0x3f10>
   152a0:	mov	r1, r4
   152a4:	mov	r2, r5
   152a8:	pop	{r4, r5, fp, lr}
   152ac:	b	11130 <memcpy@plt>
   152b0:	bl	152b4 <__assert_fail@plt+0x3f14>
   152b4:	push	{fp, lr}
   152b8:	mov	fp, sp
   152bc:	movw	r0, #33052	; 0x811c
   152c0:	movw	r1, #31772	; 0x7c1c
   152c4:	mov	r2, #5
   152c8:	movt	r0, #2
   152cc:	movt	r1, #1
   152d0:	ldr	r4, [r0]
   152d4:	mov	r0, #0
   152d8:	bl	11160 <dcgettext@plt>
   152dc:	movw	r2, #30695	; 0x77e7
   152e0:	mov	r3, r0
   152e4:	mov	r0, r4
   152e8:	mov	r1, #0
   152ec:	movt	r2, #1
   152f0:	bl	111f0 <error@plt>
   152f4:	bl	1137c <abort@plt>
   152f8:	push	{r4, sl, fp, lr}
   152fc:	add	fp, sp, #8
   15300:	bl	16c54 <__assert_fail@plt+0x58b4>
   15304:	mov	r4, r0
   15308:	cmn	r0, #1
   1530c:	bne	15320 <__assert_fail@plt+0x3f80>
   15310:	bl	11298 <__errno_location@plt>
   15314:	ldr	r0, [r0]
   15318:	cmp	r0, #12
   1531c:	beq	15328 <__assert_fail@plt+0x3f88>
   15320:	mov	r0, r4
   15324:	pop	{r4, sl, fp, pc}
   15328:	bl	152b4 <__assert_fail@plt+0x3f14>
   1532c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15330:	add	fp, sp, #28
   15334:	sub	sp, sp, #20
   15338:	cmp	r2, #37	; 0x25
   1533c:	bcs	15b8c <__assert_fail@plt+0x47ec>
   15340:	ldr	r9, [fp, #8]
   15344:	mov	r5, r2
   15348:	mov	r4, r1
   1534c:	mov	r7, r0
   15350:	str	r3, [sp, #12]
   15354:	bl	11298 <__errno_location@plt>
   15358:	mov	r8, r0
   1535c:	mov	r0, #0
   15360:	str	r0, [r8]
   15364:	bl	11250 <__ctype_b_loc@plt>
   15368:	ldr	r1, [r0]
   1536c:	mov	r2, r7
   15370:	ldrb	r0, [r2], #1
   15374:	add	r3, r1, r0, lsl #1
   15378:	ldrb	r3, [r3, #1]
   1537c:	tst	r3, #32
   15380:	bne	15370 <__assert_fail@plt+0x3fd0>
   15384:	cmp	r4, #0
   15388:	add	r6, sp, #16
   1538c:	mov	sl, #4
   15390:	movne	r6, r4
   15394:	cmp	r0, #45	; 0x2d
   15398:	bne	153a8 <__assert_fail@plt+0x4008>
   1539c:	mov	r0, sl
   153a0:	sub	sp, fp, #28
   153a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153a8:	mov	r0, r7
   153ac:	mov	r1, r6
   153b0:	mov	r2, r5
   153b4:	bl	11274 <strtoul@plt>
   153b8:	ldr	r5, [r6]
   153bc:	cmp	r5, r7
   153c0:	beq	153f8 <__assert_fail@plt+0x4058>
   153c4:	mov	r4, r0
   153c8:	ldr	r0, [r8]
   153cc:	cmp	r0, #0
   153d0:	beq	1555c <__assert_fail@plt+0x41bc>
   153d4:	cmp	r0, #34	; 0x22
   153d8:	bne	1539c <__assert_fail@plt+0x3ffc>
   153dc:	mov	sl, #1
   153e0:	cmp	r9, #0
   153e4:	beq	15b78 <__assert_fail@plt+0x47d8>
   153e8:	ldrb	r7, [r5]
   153ec:	cmp	r7, #0
   153f0:	bne	15430 <__assert_fail@plt+0x4090>
   153f4:	b	15b78 <__assert_fail@plt+0x47d8>
   153f8:	cmp	r9, #0
   153fc:	beq	1539c <__assert_fail@plt+0x3ffc>
   15400:	ldrb	r1, [r7]
   15404:	cmp	r1, #0
   15408:	beq	1539c <__assert_fail@plt+0x3ffc>
   1540c:	mov	r0, r9
   15410:	bl	1128c <strchr@plt>
   15414:	cmp	r0, #0
   15418:	beq	1539c <__assert_fail@plt+0x3ffc>
   1541c:	mov	r4, #1
   15420:	mov	sl, #0
   15424:	ldrb	r7, [r5]
   15428:	cmp	r7, #0
   1542c:	beq	15b78 <__assert_fail@plt+0x47d8>
   15430:	mov	r0, r9
   15434:	mov	r1, r7
   15438:	bl	1128c <strchr@plt>
   1543c:	cmp	r0, #0
   15440:	beq	156f8 <__assert_fail@plt+0x4358>
   15444:	sub	r0, r7, #69	; 0x45
   15448:	mov	lr, #1
   1544c:	mov	r8, #1024	; 0x400
   15450:	cmp	r0, #47	; 0x2f
   15454:	bhi	155ac <__assert_fail@plt+0x420c>
   15458:	add	r1, pc, #0
   1545c:	ldr	pc, [r1, r0, lsl #2]
   15460:	andeq	r5, r1, r0, lsr #10
   15464:	andeq	r5, r1, ip, lsr #11
   15468:	andeq	r5, r1, r0, lsr #10
   1546c:	andeq	r5, r1, ip, lsr #11
   15470:	andeq	r5, r1, ip, lsr #11
   15474:	andeq	r5, r1, ip, lsr #11
   15478:	andeq	r5, r1, r0, lsr #10
   1547c:	andeq	r5, r1, ip, lsr #11
   15480:	andeq	r5, r1, r0, lsr #10
   15484:	andeq	r5, r1, ip, lsr #11
   15488:	andeq	r5, r1, ip, lsr #11
   1548c:	andeq	r5, r1, r0, lsr #10
   15490:	andeq	r5, r1, ip, lsr #11
   15494:	andeq	r5, r1, ip, lsr #11
   15498:	andeq	r5, r1, ip, lsr #11
   1549c:	andeq	r5, r1, r0, lsr #10
   154a0:	andeq	r5, r1, ip, lsr #11
   154a4:	andeq	r5, r1, ip, lsr #11
   154a8:	andeq	r5, r1, ip, lsr #11
   154ac:	andeq	r5, r1, ip, lsr #11
   154b0:	andeq	r5, r1, r0, lsr #10
   154b4:	andeq	r5, r1, r0, lsr #10
   154b8:	andeq	r5, r1, ip, lsr #11
   154bc:	andeq	r5, r1, ip, lsr #11
   154c0:	andeq	r5, r1, ip, lsr #11
   154c4:	andeq	r5, r1, ip, lsr #11
   154c8:	andeq	r5, r1, ip, lsr #11
   154cc:	andeq	r5, r1, ip, lsr #11
   154d0:	andeq	r5, r1, ip, lsr #11
   154d4:	andeq	r5, r1, ip, lsr #11
   154d8:	andeq	r5, r1, ip, lsr #11
   154dc:	andeq	r5, r1, ip, lsr #11
   154e0:	andeq	r5, r1, ip, lsr #11
   154e4:	andeq	r5, r1, ip, lsr #11
   154e8:	andeq	r5, r1, r0, lsr #10
   154ec:	andeq	r5, r1, ip, lsr #11
   154f0:	andeq	r5, r1, ip, lsr #11
   154f4:	andeq	r5, r1, ip, lsr #11
   154f8:	andeq	r5, r1, r0, lsr #10
   154fc:	andeq	r5, r1, ip, lsr #11
   15500:	andeq	r5, r1, r0, lsr #10
   15504:	andeq	r5, r1, ip, lsr #11
   15508:	andeq	r5, r1, ip, lsr #11
   1550c:	andeq	r5, r1, ip, lsr #11
   15510:	andeq	r5, r1, ip, lsr #11
   15514:	andeq	r5, r1, ip, lsr #11
   15518:	andeq	r5, r1, ip, lsr #11
   1551c:	andeq	r5, r1, r0, lsr #10
   15520:	mov	r0, r9
   15524:	mov	r1, #48	; 0x30
   15528:	bl	1128c <strchr@plt>
   1552c:	cmp	r0, #0
   15530:	beq	1556c <__assert_fail@plt+0x41cc>
   15534:	ldrb	r0, [r5, #1]
   15538:	cmp	r0, #66	; 0x42
   1553c:	cmpne	r0, #68	; 0x44
   15540:	bne	15580 <__assert_fail@plt+0x41e0>
   15544:	mov	lr, #2
   15548:	mov	r8, #1000	; 0x3e8
   1554c:	sub	r1, r7, #66	; 0x42
   15550:	cmp	r1, #53	; 0x35
   15554:	bls	155b8 <__assert_fail@plt+0x4218>
   15558:	b	156f8 <__assert_fail@plt+0x4358>
   1555c:	mov	sl, r0
   15560:	cmp	r9, #0
   15564:	bne	153e8 <__assert_fail@plt+0x4048>
   15568:	b	15b78 <__assert_fail@plt+0x47d8>
   1556c:	mov	lr, #1
   15570:	sub	r1, r7, #66	; 0x42
   15574:	cmp	r1, #53	; 0x35
   15578:	bls	155b8 <__assert_fail@plt+0x4218>
   1557c:	b	156f8 <__assert_fail@plt+0x4358>
   15580:	cmp	r0, #105	; 0x69
   15584:	bne	155a8 <__assert_fail@plt+0x4208>
   15588:	ldrb	r0, [r5, #2]
   1558c:	mov	lr, #1
   15590:	cmp	r0, #66	; 0x42
   15594:	movweq	lr, #3
   15598:	sub	r1, r7, #66	; 0x42
   1559c:	cmp	r1, #53	; 0x35
   155a0:	bls	155b8 <__assert_fail@plt+0x4218>
   155a4:	b	156f8 <__assert_fail@plt+0x4358>
   155a8:	mov	lr, #1
   155ac:	sub	r1, r7, #66	; 0x42
   155b0:	cmp	r1, #53	; 0x35
   155b4:	bhi	156f8 <__assert_fail@plt+0x4358>
   155b8:	add	r2, pc, #4
   155bc:	mov	r0, #0
   155c0:	ldr	pc, [r2, r1, lsl #2]
   155c4:	andeq	r5, r1, r0, asr #17
   155c8:	strdeq	r5, [r1], -r8
   155cc:	strdeq	r5, [r1], -r8
   155d0:	ldrdeq	r5, [r1], -ip
   155d4:	strdeq	r5, [r1], -r8
   155d8:	muleq	r1, ip, r6
   155dc:	strdeq	r5, [r1], -r8
   155e0:	strdeq	r5, [r1], -r8
   155e4:	strdeq	r5, [r1], -r8
   155e8:	andeq	r5, r1, r0, lsl r7
   155ec:	strdeq	r5, [r1], -r8
   155f0:	andeq	r5, r1, r0, lsr r7
   155f4:	strdeq	r5, [r1], -r8
   155f8:	strdeq	r5, [r1], -r8
   155fc:	muleq	r1, r4, r9
   15600:	strdeq	r5, [r1], -r8
   15604:	strdeq	r5, [r1], -r8
   15608:	strdeq	r5, [r1], -r8
   1560c:	andeq	r5, r1, r0, ror r7
   15610:	strdeq	r5, [r1], -r8
   15614:	strdeq	r5, [r1], -r8
   15618:	strdeq	r5, [r1], -r8
   1561c:	strdeq	r5, [r1], -r8
   15620:	andeq	r5, r1, r0, lsr sl
   15624:	andeq	r5, r1, r8, ror #15
   15628:	strdeq	r5, [r1], -r8
   1562c:	strdeq	r5, [r1], -r8
   15630:	strdeq	r5, [r1], -r8
   15634:	strdeq	r5, [r1], -r8
   15638:	strdeq	r5, [r1], -r8
   1563c:	strdeq	r5, [r1], -r8
   15640:	strdeq	r5, [r1], -r8
   15644:	andeq	r5, r1, r8, lsr #22
   15648:	andeq	r5, r1, r0, ror #22
   1564c:	strdeq	r5, [r1], -r8
   15650:	strdeq	r5, [r1], -r8
   15654:	strdeq	r5, [r1], -r8
   15658:	muleq	r1, ip, r6
   1565c:	strdeq	r5, [r1], -r8
   15660:	strdeq	r5, [r1], -r8
   15664:	strdeq	r5, [r1], -r8
   15668:	andeq	r5, r1, r0, lsl r7
   1566c:	strdeq	r5, [r1], -r8
   15670:	andeq	r5, r1, r0, lsr r7
   15674:	strdeq	r5, [r1], -r8
   15678:	strdeq	r5, [r1], -r8
   1567c:	strdeq	r5, [r1], -r8
   15680:	strdeq	r5, [r1], -r8
   15684:	strdeq	r5, [r1], -r8
   15688:	strdeq	r5, [r1], -r8
   1568c:	andeq	r5, r1, r0, ror r7
   15690:	strdeq	r5, [r1], -r8
   15694:	strdeq	r5, [r1], -r8
   15698:	andeq	r5, r1, ip, asr #22
   1569c:	mvn	r0, #0
   156a0:	mul	r1, r4, r8
   156a4:	mov	r7, #0
   156a8:	udiv	r0, r0, r8
   156ac:	cmp	r0, r4
   156b0:	mvncc	r1, #0
   156b4:	cmp	r0, r1
   156b8:	mul	r2, r1, r8
   156bc:	mvncc	r2, #0
   156c0:	cmp	r0, r2
   156c4:	mul	r3, r2, r8
   156c8:	mov	r2, #0
   156cc:	mvncc	r3, #0
   156d0:	movwcc	r7, #1
   156d4:	cmp	r0, r1
   156d8:	mov	r1, #0
   156dc:	movwcc	r1, #1
   156e0:	cmp	r0, r4
   156e4:	mov	r4, r3
   156e8:	movwcc	r2, #1
   156ec:	orr	r0, r2, r1
   156f0:	orr	r0, r0, r7
   156f4:	b	15b60 <__assert_fail@plt+0x47c0>
   156f8:	ldr	r0, [sp, #12]
   156fc:	orr	sl, sl, #2
   15700:	str	r4, [r0]
   15704:	mov	r0, sl
   15708:	sub	sp, fp, #28
   1570c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15710:	mvn	r0, #0
   15714:	mul	r1, r4, r8
   15718:	udiv	r0, r0, r8
   1571c:	cmp	r0, r4
   15720:	mov	r0, #0
   15724:	mvncc	r1, #0
   15728:	movwcc	r0, #1
   1572c:	b	15b5c <__assert_fail@plt+0x47bc>
   15730:	mvn	r0, #0
   15734:	mul	r1, r4, r8
   15738:	mov	r3, #0
   1573c:	udiv	r0, r0, r8
   15740:	cmp	r0, r4
   15744:	mvncc	r1, #0
   15748:	cmp	r0, r1
   1574c:	mul	r2, r1, r8
   15750:	mov	r1, #0
   15754:	mvncc	r2, #0
   15758:	movwcc	r3, #1
   1575c:	cmp	r0, r4
   15760:	movwcc	r1, #1
   15764:	mov	r4, r2
   15768:	orr	r0, r1, r3
   1576c:	b	15b60 <__assert_fail@plt+0x47c0>
   15770:	mvn	r0, #0
   15774:	mul	r1, r4, r8
   15778:	mov	r7, #0
   1577c:	udiv	r0, r0, r8
   15780:	cmp	r0, r4
   15784:	mvncc	r1, #0
   15788:	cmp	r0, r1
   1578c:	mul	r2, r1, r8
   15790:	mvncc	r2, #0
   15794:	cmp	r0, r2
   15798:	mul	r3, r2, r8
   1579c:	mvncc	r3, #0
   157a0:	cmp	r0, r3
   157a4:	mul	ip, r3, r8
   157a8:	mov	r3, #0
   157ac:	mvncc	ip, #0
   157b0:	movwcc	r7, #1
   157b4:	cmp	r0, r2
   157b8:	mov	r2, #0
   157bc:	movwcc	r2, #1
   157c0:	cmp	r0, r1
   157c4:	mov	r1, #0
   157c8:	movwcc	r1, #1
   157cc:	cmp	r0, r4
   157d0:	mov	r4, ip
   157d4:	movwcc	r3, #1
   157d8:	orr	r0, r3, r1
   157dc:	orr	r0, r0, r2
   157e0:	orr	r0, r0, r7
   157e4:	b	15b60 <__assert_fail@plt+0x47c0>
   157e8:	mvn	r0, #0
   157ec:	str	lr, [sp, #8]
   157f0:	mul	lr, r4, r8
   157f4:	udiv	r0, r0, r8
   157f8:	cmp	r0, r4
   157fc:	mvncc	lr, #0
   15800:	cmp	r0, lr
   15804:	mul	r9, lr, r8
   15808:	mvncc	r9, #0
   1580c:	cmp	r0, r9
   15810:	mul	r7, r9, r8
   15814:	mvncc	r7, #0
   15818:	cmp	r0, r7
   1581c:	mul	r3, r7, r8
   15820:	mvncc	r3, #0
   15824:	cmp	r0, r3
   15828:	mul	r1, r3, r8
   1582c:	mvncc	r1, #0
   15830:	cmp	r0, r1
   15834:	mul	r2, r1, r8
   15838:	mvncc	r2, #0
   1583c:	cmp	r0, r2
   15840:	mul	ip, r2, r8
   15844:	mov	r8, #0
   15848:	mov	r2, #0
   1584c:	mvncc	ip, #0
   15850:	movwcc	r8, #1
   15854:	cmp	r0, r1
   15858:	mov	r1, #0
   1585c:	movwcc	r1, #1
   15860:	cmp	r0, r3
   15864:	mov	r3, #0
   15868:	movwcc	r3, #1
   1586c:	cmp	r0, r7
   15870:	mov	r7, #0
   15874:	movwcc	r7, #1
   15878:	cmp	r0, r9
   1587c:	mov	r9, #0
   15880:	movwcc	r9, #1
   15884:	cmp	r0, lr
   15888:	mov	lr, #0
   1588c:	movwcc	lr, #1
   15890:	cmp	r0, r4
   15894:	mov	r4, ip
   15898:	movwcc	r2, #1
   1589c:	orr	r0, r2, lr
   158a0:	ldr	lr, [sp, #8]
   158a4:	orr	r0, r0, r9
   158a8:	orr	r0, r0, r7
   158ac:	orr	r0, r0, r3
   158b0:	orr	r0, r0, r1
   158b4:	orr	r0, r0, r8
   158b8:	and	r0, r0, #1
   158bc:	b	15b60 <__assert_fail@plt+0x47c0>
   158c0:	mov	r1, #0
   158c4:	lsr	r0, r4, #22
   158c8:	cmp	r1, r4, lsr #22
   158cc:	lsl	r4, r4, #10
   158d0:	movwne	r0, #1
   158d4:	mvnne	r4, #0
   158d8:	b	15b60 <__assert_fail@plt+0x47c0>
   158dc:	mvn	r0, #0
   158e0:	mul	ip, r4, r8
   158e4:	str	lr, [sp, #8]
   158e8:	mov	r9, #0
   158ec:	udiv	r0, r0, r8
   158f0:	cmp	r0, r4
   158f4:	mvncc	ip, #0
   158f8:	cmp	r0, ip
   158fc:	mul	r2, ip, r8
   15900:	mvncc	r2, #0
   15904:	cmp	r0, r2
   15908:	mul	r3, r2, r8
   1590c:	mvncc	r3, #0
   15910:	cmp	r0, r3
   15914:	mul	r7, r3, r8
   15918:	mvncc	r7, #0
   1591c:	cmp	r0, r7
   15920:	mul	r1, r7, r8
   15924:	mvncc	r1, #0
   15928:	cmp	r0, r1
   1592c:	mul	lr, r1, r8
   15930:	mov	r8, #0
   15934:	mov	r1, #0
   15938:	mvncc	lr, #0
   1593c:	movwcc	r8, #1
   15940:	cmp	r0, r7
   15944:	mov	r7, #0
   15948:	movwcc	r7, #1
   1594c:	cmp	r0, r3
   15950:	mov	r3, #0
   15954:	movwcc	r3, #1
   15958:	cmp	r0, r2
   1595c:	mov	r2, #0
   15960:	movwcc	r2, #1
   15964:	cmp	r0, ip
   15968:	movwcc	r1, #1
   1596c:	cmp	r0, r4
   15970:	mov	r4, lr
   15974:	ldr	lr, [sp, #8]
   15978:	movwcc	r9, #1
   1597c:	orr	r0, r9, r1
   15980:	orr	r0, r0, r2
   15984:	orr	r0, r0, r3
   15988:	orr	r0, r0, r7
   1598c:	orr	r0, r0, r8
   15990:	b	15b60 <__assert_fail@plt+0x47c0>
   15994:	mvn	r0, #0
   15998:	mul	r1, r4, r8
   1599c:	udiv	r0, r0, r8
   159a0:	cmp	r0, r4
   159a4:	mvncc	r1, #0
   159a8:	cmp	r0, r1
   159ac:	mul	r2, r1, r8
   159b0:	mvncc	r2, #0
   159b4:	cmp	r0, r2
   159b8:	mul	r3, r2, r8
   159bc:	mvncc	r3, #0
   159c0:	cmp	r0, r3
   159c4:	mul	r7, r3, r8
   159c8:	mvncc	r7, #0
   159cc:	cmp	r0, r7
   159d0:	mul	ip, r7, r8
   159d4:	mov	r8, lr
   159d8:	mov	lr, #0
   159dc:	mov	r7, #0
   159e0:	mvncc	ip, #0
   159e4:	movwcc	lr, #1
   159e8:	cmp	r0, r3
   159ec:	mov	r3, #0
   159f0:	movwcc	r3, #1
   159f4:	cmp	r0, r2
   159f8:	mov	r2, #0
   159fc:	movwcc	r2, #1
   15a00:	cmp	r0, r1
   15a04:	mov	r1, #0
   15a08:	movwcc	r1, #1
   15a0c:	cmp	r0, r4
   15a10:	mov	r4, ip
   15a14:	movwcc	r7, #1
   15a18:	orr	r0, r7, r1
   15a1c:	orr	r0, r0, r2
   15a20:	orr	r0, r0, r3
   15a24:	orr	r0, r0, lr
   15a28:	mov	lr, r8
   15a2c:	b	15b60 <__assert_fail@plt+0x47c0>
   15a30:	mvn	r0, #0
   15a34:	str	lr, [sp, #8]
   15a38:	mul	lr, r4, r8
   15a3c:	udiv	r0, r0, r8
   15a40:	cmp	r0, r4
   15a44:	mvncc	lr, #0
   15a48:	cmp	r0, lr
   15a4c:	mul	r9, lr, r8
   15a50:	mvncc	r9, #0
   15a54:	cmp	r0, r9
   15a58:	mul	r7, r9, r8
   15a5c:	mvncc	r7, #0
   15a60:	cmp	r0, r7
   15a64:	mul	r3, r7, r8
   15a68:	mvncc	r3, #0
   15a6c:	cmp	r0, r3
   15a70:	mul	r1, r3, r8
   15a74:	mvncc	r1, #0
   15a78:	cmp	r0, r1
   15a7c:	mul	r2, r1, r8
   15a80:	mvncc	r2, #0
   15a84:	cmp	r0, r2
   15a88:	mul	ip, r2, r8
   15a8c:	mvncc	ip, #0
   15a90:	cmp	r0, ip
   15a94:	mul	r8, ip, r8
   15a98:	mov	ip, #0
   15a9c:	mvncc	r8, #0
   15aa0:	str	r8, [sp, #4]
   15aa4:	mov	r8, #0
   15aa8:	movwcc	r8, #1
   15aac:	cmp	r0, r2
   15ab0:	mov	r2, #0
   15ab4:	movwcc	r2, #1
   15ab8:	cmp	r0, r1
   15abc:	mov	r1, #0
   15ac0:	movwcc	r1, #1
   15ac4:	cmp	r0, r3
   15ac8:	mov	r3, #0
   15acc:	movwcc	r3, #1
   15ad0:	cmp	r0, r7
   15ad4:	mov	r7, #0
   15ad8:	movwcc	r7, #1
   15adc:	cmp	r0, r9
   15ae0:	mov	r9, #0
   15ae4:	movwcc	r9, #1
   15ae8:	cmp	r0, lr
   15aec:	mov	lr, #0
   15af0:	movwcc	lr, #1
   15af4:	cmp	r0, r4
   15af8:	ldr	r4, [sp, #4]
   15afc:	movwcc	ip, #1
   15b00:	orr	r0, ip, lr
   15b04:	ldr	lr, [sp, #8]
   15b08:	orr	r0, r0, r9
   15b0c:	orr	r0, r0, r7
   15b10:	orr	r0, r0, r3
   15b14:	orr	r0, r0, r1
   15b18:	orr	r0, r0, r2
   15b1c:	orr	r0, r0, r8
   15b20:	and	r0, r0, #1
   15b24:	b	15b60 <__assert_fail@plt+0x47c0>
   15b28:	movw	r0, #65535	; 0xffff
   15b2c:	movt	r0, #63	; 0x3f
   15b30:	orr	r1, r0, #4194304	; 0x400000
   15b34:	mov	r0, #0
   15b38:	cmp	r4, r1
   15b3c:	lsl	r4, r4, #9
   15b40:	movwhi	r0, #1
   15b44:	mvnhi	r4, #0
   15b48:	b	15b60 <__assert_fail@plt+0x47c0>
   15b4c:	cmp	r4, #0
   15b50:	lsl	r1, r4, #1
   15b54:	lsr	r0, r4, #31
   15b58:	mvnmi	r1, #0
   15b5c:	mov	r4, r1
   15b60:	add	r1, r5, lr
   15b64:	orr	sl, r0, sl
   15b68:	str	r1, [r6]
   15b6c:	ldrb	r1, [r5, lr]
   15b70:	cmp	r1, #0
   15b74:	orrne	sl, sl, #2
   15b78:	ldr	r0, [sp, #12]
   15b7c:	str	r4, [r0]
   15b80:	mov	r0, sl
   15b84:	sub	sp, fp, #28
   15b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b8c:	movw	r0, #31789	; 0x7c2d
   15b90:	movw	r1, #31827	; 0x7c53
   15b94:	movw	r3, #31843	; 0x7c63
   15b98:	mov	r2, #85	; 0x55
   15b9c:	movt	r0, #1
   15ba0:	movt	r1, #1
   15ba4:	movt	r3, #1
   15ba8:	bl	113a0 <__assert_fail@plt>
   15bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bb0:	add	fp, sp, #28
   15bb4:	sub	sp, sp, #44	; 0x2c
   15bb8:	cmp	r2, #37	; 0x25
   15bbc:	bcs	16840 <__assert_fail@plt+0x54a0>
   15bc0:	ldr	sl, [fp, #8]
   15bc4:	mov	r6, r2
   15bc8:	mov	r7, r1
   15bcc:	mov	r4, r0
   15bd0:	str	r3, [sp, #36]	; 0x24
   15bd4:	bl	11298 <__errno_location@plt>
   15bd8:	mov	r5, r0
   15bdc:	mov	r0, #0
   15be0:	str	r0, [r5]
   15be4:	bl	11250 <__ctype_b_loc@plt>
   15be8:	ldr	r1, [r0]
   15bec:	mov	r2, r4
   15bf0:	ldrb	r0, [r2], #1
   15bf4:	add	r3, r1, r0, lsl #1
   15bf8:	ldrb	r3, [r3, #1]
   15bfc:	tst	r3, #32
   15c00:	bne	15bf0 <__assert_fail@plt+0x4850>
   15c04:	cmp	r7, #0
   15c08:	sub	r9, fp, #32
   15c0c:	mov	r8, #4
   15c10:	movne	r9, r7
   15c14:	cmp	r0, #45	; 0x2d
   15c18:	beq	15fd8 <__assert_fail@plt+0x4c38>
   15c1c:	mov	r0, r4
   15c20:	mov	r1, r9
   15c24:	mov	r2, r6
   15c28:	mov	r3, #0
   15c2c:	bl	11148 <__strtoull_internal@plt>
   15c30:	mov	r7, r1
   15c34:	ldr	r1, [r9]
   15c38:	cmp	r1, r4
   15c3c:	beq	15c74 <__assert_fail@plt+0x48d4>
   15c40:	mov	r6, r0
   15c44:	ldr	r0, [r5]
   15c48:	cmp	r0, #0
   15c4c:	beq	15f90 <__assert_fail@plt+0x4bf0>
   15c50:	cmp	r0, #34	; 0x22
   15c54:	bne	15fd8 <__assert_fail@plt+0x4c38>
   15c58:	mov	r8, #1
   15c5c:	cmp	sl, #0
   15c60:	beq	1682c <__assert_fail@plt+0x548c>
   15c64:	ldrb	r4, [r1]
   15c68:	cmp	r4, #0
   15c6c:	bne	15cb8 <__assert_fail@plt+0x4918>
   15c70:	b	1682c <__assert_fail@plt+0x548c>
   15c74:	cmp	sl, #0
   15c78:	beq	15fd8 <__assert_fail@plt+0x4c38>
   15c7c:	mov	r5, r1
   15c80:	ldrb	r1, [r4]
   15c84:	cmp	r1, #0
   15c88:	beq	15fd8 <__assert_fail@plt+0x4c38>
   15c8c:	mov	r0, sl
   15c90:	bl	1128c <strchr@plt>
   15c94:	cmp	r0, #0
   15c98:	beq	15fd8 <__assert_fail@plt+0x4c38>
   15c9c:	mov	r1, r5
   15ca0:	mov	r8, #0
   15ca4:	mov	r6, #1
   15ca8:	mov	r7, #0
   15cac:	ldrb	r4, [r1]
   15cb0:	cmp	r4, #0
   15cb4:	beq	1682c <__assert_fail@plt+0x548c>
   15cb8:	str	r1, [sp, #32]
   15cbc:	mov	r0, sl
   15cc0:	mov	r1, r4
   15cc4:	bl	1128c <strchr@plt>
   15cc8:	cmp	r0, #0
   15ccc:	beq	15fcc <__assert_fail@plt+0x4c2c>
   15cd0:	sub	r0, r4, #69	; 0x45
   15cd4:	mov	r1, #1
   15cd8:	mov	r3, #0
   15cdc:	mov	r5, #1024	; 0x400
   15ce0:	cmp	r0, #47	; 0x2f
   15ce4:	str	r1, [sp, #28]
   15ce8:	bhi	15dec <__assert_fail@plt+0x4a4c>
   15cec:	add	r1, pc, #0
   15cf0:	ldr	pc, [r1, r0, lsl #2]
   15cf4:			; <UNDEFINED> instruction: 0x00015db4
   15cf8:	andeq	r5, r1, ip, ror #27
   15cfc:			; <UNDEFINED> instruction: 0x00015db4
   15d00:	andeq	r5, r1, ip, ror #27
   15d04:	andeq	r5, r1, ip, ror #27
   15d08:	andeq	r5, r1, ip, ror #27
   15d0c:			; <UNDEFINED> instruction: 0x00015db4
   15d10:	andeq	r5, r1, ip, ror #27
   15d14:			; <UNDEFINED> instruction: 0x00015db4
   15d18:	andeq	r5, r1, ip, ror #27
   15d1c:	andeq	r5, r1, ip, ror #27
   15d20:			; <UNDEFINED> instruction: 0x00015db4
   15d24:	andeq	r5, r1, ip, ror #27
   15d28:	andeq	r5, r1, ip, ror #27
   15d2c:	andeq	r5, r1, ip, ror #27
   15d30:			; <UNDEFINED> instruction: 0x00015db4
   15d34:	andeq	r5, r1, ip, ror #27
   15d38:	andeq	r5, r1, ip, ror #27
   15d3c:	andeq	r5, r1, ip, ror #27
   15d40:	andeq	r5, r1, ip, ror #27
   15d44:			; <UNDEFINED> instruction: 0x00015db4
   15d48:			; <UNDEFINED> instruction: 0x00015db4
   15d4c:	andeq	r5, r1, ip, ror #27
   15d50:	andeq	r5, r1, ip, ror #27
   15d54:	andeq	r5, r1, ip, ror #27
   15d58:	andeq	r5, r1, ip, ror #27
   15d5c:	andeq	r5, r1, ip, ror #27
   15d60:	andeq	r5, r1, ip, ror #27
   15d64:	andeq	r5, r1, ip, ror #27
   15d68:	andeq	r5, r1, ip, ror #27
   15d6c:	andeq	r5, r1, ip, ror #27
   15d70:	andeq	r5, r1, ip, ror #27
   15d74:	andeq	r5, r1, ip, ror #27
   15d78:	andeq	r5, r1, ip, ror #27
   15d7c:			; <UNDEFINED> instruction: 0x00015db4
   15d80:	andeq	r5, r1, ip, ror #27
   15d84:	andeq	r5, r1, ip, ror #27
   15d88:	andeq	r5, r1, ip, ror #27
   15d8c:			; <UNDEFINED> instruction: 0x00015db4
   15d90:	andeq	r5, r1, ip, ror #27
   15d94:			; <UNDEFINED> instruction: 0x00015db4
   15d98:	andeq	r5, r1, ip, ror #27
   15d9c:	andeq	r5, r1, ip, ror #27
   15da0:	andeq	r5, r1, ip, ror #27
   15da4:	andeq	r5, r1, ip, ror #27
   15da8:	andeq	r5, r1, ip, ror #27
   15dac:	andeq	r5, r1, ip, ror #27
   15db0:			; <UNDEFINED> instruction: 0x00015db4
   15db4:	mov	r0, sl
   15db8:	mov	r1, #48	; 0x30
   15dbc:	bl	1128c <strchr@plt>
   15dc0:	cmp	r0, #0
   15dc4:	beq	15de8 <__assert_fail@plt+0x4a48>
   15dc8:	ldr	r1, [sp, #32]
   15dcc:	ldrb	r0, [r1, #1]
   15dd0:	cmp	r0, #66	; 0x42
   15dd4:	cmpne	r0, #68	; 0x44
   15dd8:	bne	15fa0 <__assert_fail@plt+0x4c00>
   15ddc:	mov	r5, #1000	; 0x3e8
   15de0:	mov	r0, #2
   15de4:	str	r0, [sp, #28]
   15de8:	mov	r3, #0
   15dec:	sub	r0, r4, #66	; 0x42
   15df0:	cmp	r0, #53	; 0x35
   15df4:	bhi	15fcc <__assert_fail@plt+0x4c2c>
   15df8:	add	r1, pc, #0
   15dfc:	ldr	pc, [r1, r0, lsl #2]
   15e00:	andeq	r6, r1, ip, lsr r3
   15e04:	andeq	r5, r1, ip, asr #31
   15e08:	andeq	r5, r1, ip, asr #31
   15e0c:	andeq	r6, r1, r4, ror #6
   15e10:	andeq	r5, r1, ip, asr #31
   15e14:	ldrdeq	r5, [r1], -r8
   15e18:	andeq	r5, r1, ip, asr #31
   15e1c:	andeq	r5, r1, ip, asr #31
   15e20:	andeq	r5, r1, ip, asr #31
   15e24:	andeq	r5, r1, r4, ror #31
   15e28:	andeq	r5, r1, ip, asr #31
   15e2c:	andeq	r6, r1, ip, lsr #32
   15e30:	andeq	r5, r1, ip, asr #31
   15e34:	andeq	r5, r1, ip, asr #31
   15e38:			; <UNDEFINED> instruction: 0x000164b8
   15e3c:	andeq	r5, r1, ip, asr #31
   15e40:	andeq	r5, r1, ip, asr #31
   15e44:	andeq	r5, r1, ip, asr #31
   15e48:	strheq	r6, [r1], -r8
   15e4c:	andeq	r5, r1, ip, asr #31
   15e50:	andeq	r5, r1, ip, asr #31
   15e54:	andeq	r5, r1, ip, asr #31
   15e58:	andeq	r5, r1, ip, asr #31
   15e5c:	andeq	r6, r1, r0, ror #11
   15e60:	andeq	r6, r1, r0, lsr #3
   15e64:	andeq	r5, r1, ip, asr #31
   15e68:	andeq	r5, r1, ip, asr #31
   15e6c:	andeq	r5, r1, ip, asr #31
   15e70:	andeq	r5, r1, ip, asr #31
   15e74:	andeq	r5, r1, ip, asr #31
   15e78:	andeq	r5, r1, ip, asr #31
   15e7c:	andeq	r5, r1, ip, asr #31
   15e80:			; <UNDEFINED> instruction: 0x000167b4
   15e84:	andeq	r6, r1, ip, lsl #16
   15e88:	andeq	r5, r1, ip, asr #31
   15e8c:	andeq	r5, r1, ip, asr #31
   15e90:	andeq	r5, r1, ip, asr #31
   15e94:	ldrdeq	r5, [r1], -r8
   15e98:	andeq	r5, r1, ip, asr #31
   15e9c:	andeq	r5, r1, ip, asr #31
   15ea0:	andeq	r5, r1, ip, asr #31
   15ea4:	andeq	r5, r1, r4, ror #31
   15ea8:	andeq	r5, r1, ip, asr #31
   15eac:	andeq	r6, r1, ip, lsr #32
   15eb0:	andeq	r5, r1, ip, asr #31
   15eb4:	andeq	r5, r1, ip, asr #31
   15eb8:	andeq	r5, r1, ip, asr #31
   15ebc:	andeq	r5, r1, ip, asr #31
   15ec0:	andeq	r5, r1, ip, asr #31
   15ec4:	andeq	r5, r1, ip, asr #31
   15ec8:	strheq	r6, [r1], -r8
   15ecc:	andeq	r5, r1, ip, asr #31
   15ed0:	andeq	r5, r1, ip, asr #31
   15ed4:	andeq	r6, r1, r8, ror #15
   15ed8:	mvn	r0, #0
   15edc:	mvn	r1, #0
   15ee0:	mov	r2, r5
   15ee4:	mov	sl, r3
   15ee8:	bl	17010 <__assert_fail@plt+0x5c70>
   15eec:	subs	r3, r0, r6
   15ef0:	umull	r4, r2, r6, r5
   15ef4:	mov	lr, #0
   15ef8:	str	r1, [sp, #20]
   15efc:	sbcs	r3, r1, r7
   15f00:	movwcc	lr, #1
   15f04:	mla	ip, r6, sl, r2
   15f08:	mov	r2, r1
   15f0c:	mov	r2, #0
   15f10:	cmp	lr, #0
   15f14:	mla	r7, r7, r5, ip
   15f18:	mvnne	r4, #0
   15f1c:	mvnne	r7, #0
   15f20:	subs	r6, r0, r4
   15f24:	sbcs	r6, r1, r7
   15f28:	umull	r3, r6, r4, r5
   15f2c:	movwcc	r2, #1
   15f30:	cmp	r2, #0
   15f34:	mvnne	r3, #0
   15f38:	cmp	r2, #0
   15f3c:	str	r6, [sp, #16]
   15f40:	umull	r6, ip, r3, r5
   15f44:	mla	r1, r3, sl, ip
   15f48:	ldr	ip, [sp, #16]
   15f4c:	str	r1, [sp, #12]
   15f50:	mla	r4, r4, sl, ip
   15f54:	mla	r4, r7, r5, r4
   15f58:	mvnne	r4, #0
   15f5c:	subs	r0, r0, r3
   15f60:	ldr	r0, [sp, #20]
   15f64:	ldr	r7, [sp, #12]
   15f68:	sbcs	r0, r0, r4
   15f6c:	mov	r0, #0
   15f70:	mla	r7, r4, r5, r7
   15f74:	movwcc	r0, #1
   15f78:	cmp	r0, #0
   15f7c:	mov	r1, r0
   15f80:	orr	r0, lr, r2
   15f84:	mvnne	r7, #0
   15f88:	mvnne	r6, #0
   15f8c:	b	165d8 <__assert_fail@plt+0x5238>
   15f90:	mov	r8, r0
   15f94:	cmp	sl, #0
   15f98:	bne	15c64 <__assert_fail@plt+0x48c4>
   15f9c:	b	1682c <__assert_fail@plt+0x548c>
   15fa0:	cmp	r0, #105	; 0x69
   15fa4:	mov	r3, #0
   15fa8:	bne	15dec <__assert_fail@plt+0x4a4c>
   15fac:	ldrb	r0, [r1, #2]
   15fb0:	mov	r1, #1
   15fb4:	cmp	r0, #66	; 0x42
   15fb8:	movweq	r1, #3
   15fbc:	str	r1, [sp, #28]
   15fc0:	sub	r0, r4, #66	; 0x42
   15fc4:	cmp	r0, #53	; 0x35
   15fc8:	bls	15df8 <__assert_fail@plt+0x4a58>
   15fcc:	ldr	r0, [sp, #36]	; 0x24
   15fd0:	orr	r8, r8, #2
   15fd4:	strd	r6, [r0]
   15fd8:	mov	r0, r8
   15fdc:	sub	sp, fp, #28
   15fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fe4:	mvn	r0, #0
   15fe8:	mvn	r1, #0
   15fec:	mov	r2, r5
   15ff0:	mov	r4, r3
   15ff4:	bl	17010 <__assert_fail@plt+0x5c70>
   15ff8:	subs	r0, r0, r6
   15ffc:	mov	r2, #0
   16000:	sbcs	r0, r1, r7
   16004:	umull	r0, r1, r6, r5
   16008:	movwcc	r2, #1
   1600c:	cmp	r2, #0
   16010:	mla	r1, r6, r4, r1
   16014:	mov	r3, r2
   16018:	mvnne	r0, #0
   1601c:	mla	r7, r7, r5, r1
   16020:	mvnne	r7, #0
   16024:	mov	r6, r0
   16028:	b	1680c <__assert_fail@plt+0x546c>
   1602c:	mvn	r0, #0
   16030:	mvn	r1, #0
   16034:	mov	r2, r5
   16038:	str	r3, [sp, #24]
   1603c:	bl	17010 <__assert_fail@plt+0x5c70>
   16040:	subs	r3, r0, r6
   16044:	mov	ip, r0
   16048:	umull	r4, r0, r6, r5
   1604c:	mov	sl, #0
   16050:	sbcs	r3, r1, r7
   16054:	mov	r3, #0
   16058:	movwcc	r3, #1
   1605c:	cmp	r3, #0
   16060:	str	r0, [sp, #20]
   16064:	ldr	r0, [sp, #24]
   16068:	mvnne	r4, #0
   1606c:	cmp	r3, #0
   16070:	umull	lr, r2, r4, r5
   16074:	mla	r2, r4, r0, r2
   16078:	str	r2, [sp, #16]
   1607c:	ldr	r2, [sp, #20]
   16080:	mla	r6, r6, r0, r2
   16084:	ldr	r0, [sp, #16]
   16088:	mla	r6, r7, r5, r6
   1608c:	mvnne	r6, #0
   16090:	mla	r7, r6, r5, r0
   16094:	subs	r0, ip, r4
   16098:	sbcs	r0, r1, r6
   1609c:	movwcc	sl, #1
   160a0:	cmp	sl, #0
   160a4:	orr	r3, r3, sl
   160a8:	mvnne	lr, #0
   160ac:	mvnne	r7, #0
   160b0:	mov	r6, lr
   160b4:	b	1680c <__assert_fail@plt+0x546c>
   160b8:	mvn	r0, #0
   160bc:	mvn	r1, #0
   160c0:	mov	r2, r5
   160c4:	mov	sl, r3
   160c8:	bl	17010 <__assert_fail@plt+0x5c70>
   160cc:	subs	r3, r0, r6
   160d0:	mov	ip, r1
   160d4:	umull	r2, lr, r6, r5
   160d8:	str	r0, [sp, #20]
   160dc:	sbcs	r3, r1, r7
   160e0:	mov	r1, #0
   160e4:	str	ip, [sp, #16]
   160e8:	movwcc	r1, #1
   160ec:	mla	r6, r6, sl, lr
   160f0:	mov	lr, #0
   160f4:	cmp	r1, #0
   160f8:	mla	r7, r7, r5, r6
   160fc:	mvnne	r2, #0
   16100:	cmp	r1, #0
   16104:	umull	r3, r4, r2, r5
   16108:	mvnne	r7, #0
   1610c:	mla	r4, r2, sl, r4
   16110:	subs	r2, r0, r2
   16114:	sbcs	r2, ip, r7
   16118:	mla	r4, r7, r5, r4
   1611c:	mov	r2, #0
   16120:	movwcc	lr, #1
   16124:	cmp	lr, #0
   16128:	mvnne	r3, #0
   1612c:	mvnne	r4, #0
   16130:	subs	r7, r0, r3
   16134:	mov	r0, r5
   16138:	sbcs	r7, ip, r4
   1613c:	umull	r5, r7, r3, r5
   16140:	movwcc	r2, #1
   16144:	cmp	r2, #0
   16148:	mla	r3, r3, sl, r7
   1614c:	mvnne	r5, #0
   16150:	cmp	r2, #0
   16154:	mla	r3, r4, r0, r3
   16158:	umull	r6, ip, r5, r0
   1615c:	mvnne	r3, #0
   16160:	mla	ip, r5, sl, ip
   16164:	mla	r7, r3, r0, ip
   16168:	ldr	r0, [sp, #20]
   1616c:	subs	r0, r0, r5
   16170:	ldr	r0, [sp, #16]
   16174:	sbcs	r0, r0, r3
   16178:	mov	r0, #0
   1617c:	movwcc	r0, #1
   16180:	cmp	r0, #0
   16184:	mov	r3, r0
   16188:	orr	r0, r1, lr
   1618c:	orr	r0, r0, r2
   16190:	mvnne	r7, #0
   16194:	mvnne	r6, #0
   16198:	orr	r3, r0, r3
   1619c:	b	1680c <__assert_fail@plt+0x546c>
   161a0:	mvn	r0, #0
   161a4:	mvn	r1, #0
   161a8:	mov	r2, r5
   161ac:	mov	r4, r3
   161b0:	str	r3, [sp, #24]
   161b4:	bl	17010 <__assert_fail@plt+0x5c70>
   161b8:	umull	r3, r2, r6, r5
   161bc:	mla	r2, r6, r4, r2
   161c0:	subs	r6, r0, r6
   161c4:	sbcs	r6, r1, r7
   161c8:	mov	r6, #0
   161cc:	mla	r2, r7, r5, r2
   161d0:	mov	r7, #0
   161d4:	movwcc	r6, #1
   161d8:	cmp	r6, #0
   161dc:	str	r6, [sp, #20]
   161e0:	mvnne	r3, #0
   161e4:	mvnne	r2, #0
   161e8:	subs	r4, r0, r3
   161ec:	umull	r6, ip, r3, r5
   161f0:	sbcs	r4, r1, r2
   161f4:	ldr	r4, [sp, #24]
   161f8:	movwcc	r7, #1
   161fc:	cmp	r7, #0
   16200:	mov	lr, r7
   16204:	str	r7, [sp, #16]
   16208:	mvnne	r6, #0
   1620c:	cmp	lr, #0
   16210:	mov	lr, #0
   16214:	umull	sl, r7, r6, r5
   16218:	mla	r3, r3, r4, ip
   1621c:	mla	r2, r2, r5, r3
   16220:	mvnne	r2, #0
   16224:	subs	r3, r0, r6
   16228:	mla	r7, r6, r4, r7
   1622c:	mov	r4, r0
   16230:	mov	r0, #0
   16234:	mla	r7, r2, r5, r7
   16238:	sbcs	r2, r1, r2
   1623c:	mov	r3, r4
   16240:	movwcc	r0, #1
   16244:	str	r3, [sp, #4]
   16248:	cmp	r0, #0
   1624c:	str	r0, [sp, #12]
   16250:	mov	r0, r1
   16254:	mvnne	sl, #0
   16258:	mvnne	r7, #0
   1625c:	str	r0, [sp, #8]
   16260:	subs	r2, r4, sl
   16264:	ldr	r4, [sp, #24]
   16268:	sbcs	r2, r1, r7
   1626c:	umull	r6, r2, sl, r5
   16270:	movwcc	lr, #1
   16274:	cmp	lr, #0
   16278:	mvnne	r6, #0
   1627c:	mla	r2, sl, r4, r2
   16280:	cmp	lr, #0
   16284:	umull	r1, ip, r6, r5
   16288:	mla	r2, r7, r5, r2
   1628c:	mvnne	r2, #0
   16290:	mla	ip, r6, r4, ip
   16294:	subs	r6, r3, r6
   16298:	mla	r7, r2, r5, ip
   1629c:	sbcs	r2, r0, r2
   162a0:	mov	ip, #0
   162a4:	mov	r2, #0
   162a8:	movwcc	ip, #1
   162ac:	cmp	ip, #0
   162b0:	mvnne	r1, #0
   162b4:	mvnne	r7, #0
   162b8:	subs	r6, r3, r1
   162bc:	ldr	r3, [sp, #24]
   162c0:	sbcs	r6, r0, r7
   162c4:	umull	r0, sl, r1, r5
   162c8:	movwcc	r2, #1
   162cc:	cmp	r2, #0
   162d0:	mvnne	r0, #0
   162d4:	mla	r1, r1, r3, sl
   162d8:	cmp	r2, #0
   162dc:	umull	r6, r4, r0, r5
   162e0:	mla	r1, r7, r5, r1
   162e4:	mvnne	r1, #0
   162e8:	mla	r4, r0, r3, r4
   162ec:	ldr	r3, [sp, #4]
   162f0:	mla	r7, r1, r5, r4
   162f4:	ldr	r5, [sp, #16]
   162f8:	subs	r0, r3, r0
   162fc:	ldr	r0, [sp, #8]
   16300:	sbcs	r0, r0, r1
   16304:	mov	r0, #0
   16308:	movwcc	r0, #1
   1630c:	cmp	r0, #0
   16310:	mov	r1, r0
   16314:	ldr	r0, [sp, #20]
   16318:	mvnne	r7, #0
   1631c:	mvnne	r6, #0
   16320:	orr	r0, r0, r5
   16324:	ldr	r5, [sp, #12]
   16328:	orr	r0, r0, r5
   1632c:	orr	r0, r0, lr
   16330:	orr	r0, r0, ip
   16334:	orr	r0, r0, r2
   16338:	b	167a8 <__assert_fail@plt+0x5408>
   1633c:	mov	r1, #0
   16340:	lsl	r2, r7, #10
   16344:	lsl	r0, r6, #10
   16348:	lsr	r3, r7, #22
   1634c:	cmp	r1, r7, lsr #22
   16350:	orr	r2, r2, r6, lsr #22
   16354:	mvnne	r0, #0
   16358:	movwne	r3, #1
   1635c:	cmp	r1, r7, lsr #22
   16360:	b	167d8 <__assert_fail@plt+0x5438>
   16364:	mvn	r0, #0
   16368:	mvn	r1, #0
   1636c:	mov	r2, r5
   16370:	mov	sl, r3
   16374:	bl	17010 <__assert_fail@plt+0x5c70>
   16378:	subs	r2, r0, r6
   1637c:	mov	ip, r0
   16380:	mov	r0, #0
   16384:	sbcs	r2, r1, r7
   16388:	umull	r4, r2, r6, r5
   1638c:	movwcc	r0, #1
   16390:	cmp	r0, #0
   16394:	mla	r2, r6, sl, r2
   16398:	str	r0, [sp, #20]
   1639c:	mvnne	r4, #0
   163a0:	cmp	r0, #0
   163a4:	mla	r2, r7, r5, r2
   163a8:	mov	r0, #0
   163ac:	umull	lr, r3, r4, r5
   163b0:	mvnne	r2, #0
   163b4:	mla	r3, r4, sl, r3
   163b8:	mla	r6, r2, r5, r3
   163bc:	subs	r3, ip, r4
   163c0:	mov	r3, r1
   163c4:	sbcs	r2, r1, r2
   163c8:	str	r3, [sp, #8]
   163cc:	movwcc	r0, #1
   163d0:	cmp	r0, #0
   163d4:	str	r0, [sp, #16]
   163d8:	mov	r0, ip
   163dc:	mvnne	lr, #0
   163e0:	mvnne	r6, #0
   163e4:	str	r0, [sp, #12]
   163e8:	subs	r2, ip, lr
   163ec:	umull	r7, r4, lr, r5
   163f0:	sbcs	r2, r1, r6
   163f4:	mov	r2, #0
   163f8:	movwcc	r2, #1
   163fc:	mla	r4, lr, sl, r4
   16400:	cmp	r2, #0
   16404:	mla	r6, r6, r5, r4
   16408:	mov	r4, #0
   1640c:	mvnne	r7, #0
   16410:	cmp	r2, #0
   16414:	umull	r1, ip, r7, r5
   16418:	mvnne	r6, #0
   1641c:	mla	ip, r7, sl, ip
   16420:	subs	r7, r0, r7
   16424:	sbcs	r7, r3, r6
   16428:	mla	lr, r6, r5, ip
   1642c:	mov	ip, #0
   16430:	movwcc	ip, #1
   16434:	cmp	ip, #0
   16438:	mvnne	r1, #0
   1643c:	mvnne	lr, #0
   16440:	subs	r7, r0, r1
   16444:	sbcs	r7, r3, lr
   16448:	umull	r0, r7, r1, r5
   1644c:	movwcc	r4, #1
   16450:	cmp	r4, #0
   16454:	mla	r1, r1, sl, r7
   16458:	mvnne	r0, #0
   1645c:	cmp	r4, #0
   16460:	mla	r1, lr, r5, r1
   16464:	umull	r6, r3, r0, r5
   16468:	mvnne	r1, #0
   1646c:	mla	r3, r0, sl, r3
   16470:	mla	r7, r1, r5, r3
   16474:	ldr	r3, [sp, #12]
   16478:	subs	r0, r3, r0
   1647c:	ldr	r0, [sp, #8]
   16480:	ldr	r3, [sp, #16]
   16484:	sbcs	r0, r0, r1
   16488:	mov	r0, #0
   1648c:	movwcc	r0, #1
   16490:	cmp	r0, #0
   16494:	mov	r1, r0
   16498:	ldr	r0, [sp, #20]
   1649c:	mvnne	r7, #0
   164a0:	mvnne	r6, #0
   164a4:	orr	r0, r0, r3
   164a8:	orr	r0, r0, r2
   164ac:	orr	r0, r0, ip
   164b0:	orr	r0, r0, r4
   164b4:	b	165d8 <__assert_fail@plt+0x5238>
   164b8:	mvn	r0, #0
   164bc:	mvn	r1, #0
   164c0:	mov	r2, r5
   164c4:	mov	sl, r3
   164c8:	bl	17010 <__assert_fail@plt+0x5c70>
   164cc:	umull	r3, r2, r6, r5
   164d0:	mov	lr, r1
   164d4:	mov	r1, r0
   164d8:	mla	r2, r6, sl, r2
   164dc:	subs	r6, r0, r6
   164e0:	mov	r0, #0
   164e4:	sbcs	r6, lr, r7
   164e8:	mla	r2, r7, r5, r2
   164ec:	movwcc	r0, #1
   164f0:	cmp	r0, #0
   164f4:	str	r0, [sp, #20]
   164f8:	mov	r0, r1
   164fc:	mvnne	r3, #0
   16500:	mvnne	r2, #0
   16504:	str	r0, [sp, #16]
   16508:	subs	r4, r1, r3
   1650c:	umull	r7, ip, r3, r5
   16510:	sbcs	r4, lr, r2
   16514:	mov	r4, #0
   16518:	movwcc	r4, #1
   1651c:	mla	r3, r3, sl, ip
   16520:	mov	ip, #0
   16524:	cmp	r4, #0
   16528:	mla	r2, r2, r5, r3
   1652c:	mvnne	r7, #0
   16530:	cmp	r4, #0
   16534:	umull	r1, r6, r7, r5
   16538:	mvnne	r2, #0
   1653c:	mla	r6, r7, sl, r6
   16540:	mla	r3, r2, r5, r6
   16544:	subs	r6, r0, r7
   16548:	sbcs	r2, lr, r2
   1654c:	mov	r2, #0
   16550:	movwcc	ip, #1
   16554:	cmp	ip, #0
   16558:	mvnne	r1, #0
   1655c:	mvnne	r3, #0
   16560:	subs	r6, r0, r1
   16564:	sbcs	r6, lr, r3
   16568:	umull	r0, r6, r1, r5
   1656c:	movwcc	r2, #1
   16570:	cmp	r2, #0
   16574:	mvnne	r0, #0
   16578:	cmp	r2, #0
   1657c:	str	r6, [sp, #12]
   16580:	umull	r6, r7, r0, r5
   16584:	mla	r7, r0, sl, r7
   16588:	str	r7, [sp, #8]
   1658c:	ldr	r7, [sp, #12]
   16590:	mla	r1, r1, sl, r7
   16594:	mla	r1, r3, r5, r1
   16598:	ldr	r3, [sp, #8]
   1659c:	mvnne	r1, #0
   165a0:	mla	r7, r1, r5, r3
   165a4:	ldr	r3, [sp, #16]
   165a8:	subs	r0, r3, r0
   165ac:	sbcs	r0, lr, r1
   165b0:	mov	r0, #0
   165b4:	movwcc	r0, #1
   165b8:	cmp	r0, #0
   165bc:	mov	r1, r0
   165c0:	ldr	r0, [sp, #20]
   165c4:	mvnne	r7, #0
   165c8:	mvnne	r6, #0
   165cc:	orr	r0, r0, r4
   165d0:	orr	r0, r0, ip
   165d4:	orr	r0, r0, r2
   165d8:	orr	r3, r0, r1
   165dc:	b	1680c <__assert_fail@plt+0x546c>
   165e0:	mvn	r0, #0
   165e4:	mvn	r1, #0
   165e8:	mov	r2, r5
   165ec:	mov	sl, r3
   165f0:	bl	17010 <__assert_fail@plt+0x5c70>
   165f4:	mov	ip, r1
   165f8:	subs	r1, r0, r6
   165fc:	umull	r3, lr, r6, r5
   16600:	mov	r2, r5
   16604:	sbcs	r1, ip, r7
   16608:	mov	r1, #0
   1660c:	str	ip, [sp, #4]
   16610:	movwcc	r1, #1
   16614:	mla	r6, r6, sl, lr
   16618:	cmp	r1, #0
   1661c:	mla	r7, r7, r2, r6
   16620:	str	r1, [sp, #20]
   16624:	mvnne	r3, #0
   16628:	cmp	r1, #0
   1662c:	mov	r1, r0
   16630:	umull	r4, r5, r3, r5
   16634:	mvnne	r7, #0
   16638:	mov	lr, r1
   1663c:	mla	r5, r3, sl, r5
   16640:	subs	r3, r0, r3
   16644:	sbcs	r0, ip, r7
   16648:	mov	r0, #0
   1664c:	mla	r5, r7, r2, r5
   16650:	movwcc	r0, #1
   16654:	cmp	r0, #0
   16658:	str	r0, [sp, #16]
   1665c:	mvnne	r4, #0
   16660:	mvnne	r5, #0
   16664:	subs	r0, r1, r4
   16668:	mov	r1, #0
   1666c:	sbcs	r0, ip, r5
   16670:	umull	r3, r0, r4, r2
   16674:	movwcc	r1, #1
   16678:	cmp	r1, #0
   1667c:	mla	r0, r4, sl, r0
   16680:	mov	r4, lr
   16684:	str	r1, [sp, #12]
   16688:	mvnne	r3, #0
   1668c:	cmp	r1, #0
   16690:	mla	r0, r5, r2, r0
   16694:	str	r4, [sp]
   16698:	umull	r7, r6, r3, r2
   1669c:	mvnne	r0, #0
   166a0:	mla	r6, r3, sl, r6
   166a4:	subs	r3, lr, r3
   166a8:	mov	r3, #0
   166ac:	mla	r5, r0, r2, r6
   166b0:	sbcs	r0, ip, r0
   166b4:	mov	r0, #0
   166b8:	movwcc	r0, #1
   166bc:	cmp	r0, #0
   166c0:	str	r0, [sp, #8]
   166c4:	mvnne	r7, #0
   166c8:	mvnne	r5, #0
   166cc:	subs	r0, lr, r7
   166d0:	sbcs	r0, ip, r5
   166d4:	umull	r6, r0, r7, r2
   166d8:	movwcc	r3, #1
   166dc:	cmp	r3, #0
   166e0:	mla	r7, r7, sl, r0
   166e4:	mov	r0, ip
   166e8:	mvnne	r6, #0
   166ec:	cmp	r3, #0
   166f0:	mla	r7, r5, r2, r7
   166f4:	mov	r5, #0
   166f8:	umull	r1, lr, r6, r2
   166fc:	mvnne	r7, #0
   16700:	mla	lr, r6, sl, lr
   16704:	subs	r6, r4, r6
   16708:	mla	lr, r7, r2, lr
   1670c:	sbcs	r7, ip, r7
   16710:	mov	ip, #0
   16714:	movwcc	ip, #1
   16718:	cmp	ip, #0
   1671c:	mvnne	r1, #0
   16720:	mvnne	lr, #0
   16724:	subs	r7, r4, r1
   16728:	sbcs	r7, r0, lr
   1672c:	umull	r0, r7, r1, r2
   16730:	movwcc	r5, #1
   16734:	cmp	r5, #0
   16738:	mla	r1, r1, sl, r7
   1673c:	mvnne	r0, #0
   16740:	cmp	r5, #0
   16744:	mla	r1, lr, r2, r1
   16748:	umull	r6, r4, r0, r2
   1674c:	mvnne	r1, #0
   16750:	mla	r4, r0, sl, r4
   16754:	mla	r7, r1, r2, r4
   16758:	ldr	r2, [sp]
   1675c:	subs	r0, r2, r0
   16760:	ldr	r0, [sp, #4]
   16764:	ldr	r2, [sp, #16]
   16768:	sbcs	r0, r0, r1
   1676c:	mov	r0, #0
   16770:	movwcc	r0, #1
   16774:	cmp	r0, #0
   16778:	mov	r1, r0
   1677c:	ldr	r0, [sp, #20]
   16780:	mvnne	r7, #0
   16784:	mvnne	r6, #0
   16788:	orr	r0, r0, r2
   1678c:	ldr	r2, [sp, #12]
   16790:	orr	r0, r0, r2
   16794:	ldr	r2, [sp, #8]
   16798:	orr	r0, r0, r2
   1679c:	orr	r0, r0, r3
   167a0:	orr	r0, r0, ip
   167a4:	orr	r0, r0, r5
   167a8:	orr	r0, r0, r1
   167ac:	and	r3, r0, #1
   167b0:	b	1680c <__assert_fail@plt+0x546c>
   167b4:	mov	r1, #0
   167b8:	lsl	r2, r7, #9
   167bc:	lsl	r0, r6, #9
   167c0:	lsr	r3, r7, #23
   167c4:	cmp	r1, r7, lsr #23
   167c8:	orr	r2, r2, r6, lsr #23
   167cc:	mvnne	r0, #0
   167d0:	movwne	r3, #1
   167d4:	cmp	r1, r7, lsr #23
   167d8:	mvnne	r2, #0
   167dc:	mov	r6, r0
   167e0:	mov	r7, r2
   167e4:	b	1680c <__assert_fail@plt+0x546c>
   167e8:	lsl	r1, r7, #1
   167ec:	cmp	r7, #0
   167f0:	lsl	r0, r6, #1
   167f4:	lsr	r3, r7, #31
   167f8:	orr	r1, r1, r6, lsr #31
   167fc:	mvnmi	r0, #0
   16800:	mvnmi	r1, #0
   16804:	mov	r6, r0
   16808:	mov	r7, r1
   1680c:	ldr	r1, [sp, #32]
   16810:	ldr	r2, [sp, #28]
   16814:	orr	r8, r3, r8
   16818:	add	r0, r1, r2
   1681c:	str	r0, [r9]
   16820:	ldrb	r0, [r1, r2]
   16824:	cmp	r0, #0
   16828:	orrne	r8, r8, #2
   1682c:	ldr	r0, [sp, #36]	; 0x24
   16830:	strd	r6, [r0]
   16834:	mov	r0, r8
   16838:	sub	sp, fp, #28
   1683c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16840:	movw	r0, #31789	; 0x7c2d
   16844:	movw	r1, #31827	; 0x7c53
   16848:	movw	r3, #31924	; 0x7cb4
   1684c:	mov	r2, #85	; 0x55
   16850:	movt	r0, #1
   16854:	movt	r1, #1
   16858:	movt	r3, #1
   1685c:	bl	113a0 <__assert_fail@plt>
   16860:	clz	r2, r1
   16864:	clz	r3, r0
   16868:	lsr	r2, r2, #5
   1686c:	lsr	r3, r3, #5
   16870:	orrs	r2, r3, r2
   16874:	movwne	r1, #1
   16878:	movwne	r0, #1
   1687c:	cmp	r1, #0
   16880:	beq	168b0 <__assert_fail@plt+0x5510>
   16884:	mvn	r2, #-2147483648	; 0x80000000
   16888:	udiv	r2, r2, r1
   1688c:	cmp	r2, r0
   16890:	bcs	168b0 <__assert_fail@plt+0x5510>
   16894:	push	{fp, lr}
   16898:	mov	fp, sp
   1689c:	bl	11298 <__errno_location@plt>
   168a0:	mov	r1, #12
   168a4:	str	r1, [r0]
   168a8:	mov	r0, #0
   168ac:	pop	{fp, pc}
   168b0:	b	110b8 <calloc@plt>
   168b4:	cmp	r0, #0
   168b8:	movweq	r0, #1
   168bc:	cmn	r0, #1
   168c0:	ble	168c8 <__assert_fail@plt+0x5528>
   168c4:	b	11214 <malloc@plt>
   168c8:	push	{fp, lr}
   168cc:	mov	fp, sp
   168d0:	bl	11298 <__errno_location@plt>
   168d4:	mov	r1, #12
   168d8:	str	r1, [r0]
   168dc:	mov	r0, #0
   168e0:	pop	{fp, pc}
   168e4:	push	{fp, lr}
   168e8:	mov	fp, sp
   168ec:	cmp	r0, #0
   168f0:	beq	1690c <__assert_fail@plt+0x556c>
   168f4:	cmp	r1, #0
   168f8:	beq	16918 <__assert_fail@plt+0x5578>
   168fc:	cmn	r1, #1
   16900:	ble	16924 <__assert_fail@plt+0x5584>
   16904:	pop	{fp, lr}
   16908:	b	1116c <realloc@plt>
   1690c:	mov	r0, r1
   16910:	pop	{fp, lr}
   16914:	b	168b4 <__assert_fail@plt+0x5514>
   16918:	bl	122c0 <__assert_fail@plt+0xf20>
   1691c:	mov	r0, #0
   16920:	pop	{fp, pc}
   16924:	bl	11298 <__errno_location@plt>
   16928:	mov	r1, #12
   1692c:	str	r1, [r0]
   16930:	mov	r0, #0
   16934:	pop	{fp, pc}
   16938:	push	{r4, r5, r6, sl, fp, lr}
   1693c:	add	fp, sp, #16
   16940:	mov	r4, r0
   16944:	bl	111d8 <__fpending@plt>
   16948:	ldr	r6, [r4]
   1694c:	mov	r5, r0
   16950:	mov	r0, r4
   16954:	bl	169bc <__assert_fail@plt+0x561c>
   16958:	tst	r6, #32
   1695c:	bne	16994 <__assert_fail@plt+0x55f4>
   16960:	cmp	r0, #0
   16964:	mov	r4, r0
   16968:	mvnne	r4, #0
   1696c:	cmp	r5, #0
   16970:	bne	169a0 <__assert_fail@plt+0x5600>
   16974:	cmp	r0, #0
   16978:	beq	169a0 <__assert_fail@plt+0x5600>
   1697c:	bl	11298 <__errno_location@plt>
   16980:	ldr	r0, [r0]
   16984:	subs	r4, r0, #9
   16988:	mvnne	r4, #0
   1698c:	mov	r0, r4
   16990:	pop	{r4, r5, r6, sl, fp, pc}
   16994:	mvn	r4, #0
   16998:	cmp	r0, #0
   1699c:	beq	169a8 <__assert_fail@plt+0x5608>
   169a0:	mov	r0, r4
   169a4:	pop	{r4, r5, r6, sl, fp, pc}
   169a8:	bl	11298 <__errno_location@plt>
   169ac:	mov	r1, #0
   169b0:	str	r1, [r0]
   169b4:	mov	r0, r4
   169b8:	pop	{r4, r5, r6, sl, fp, pc}
   169bc:	push	{r4, r5, r6, sl, fp, lr}
   169c0:	add	fp, sp, #16
   169c4:	sub	sp, sp, #8
   169c8:	mov	r4, r0
   169cc:	bl	112d4 <fileno@plt>
   169d0:	cmn	r0, #1
   169d4:	ble	16a48 <__assert_fail@plt+0x56a8>
   169d8:	mov	r0, r4
   169dc:	bl	1122c <__freading@plt>
   169e0:	cmp	r0, #0
   169e4:	beq	16a10 <__assert_fail@plt+0x5670>
   169e8:	mov	r0, r4
   169ec:	bl	112d4 <fileno@plt>
   169f0:	mov	r1, #1
   169f4:	mov	r2, #0
   169f8:	mov	r3, #0
   169fc:	str	r1, [sp]
   16a00:	bl	111b4 <lseek64@plt>
   16a04:	and	r0, r0, r1
   16a08:	cmn	r0, #1
   16a0c:	beq	16a48 <__assert_fail@plt+0x56a8>
   16a10:	mov	r0, r4
   16a14:	bl	16a58 <__assert_fail@plt+0x56b8>
   16a18:	cmp	r0, #0
   16a1c:	beq	16a48 <__assert_fail@plt+0x56a8>
   16a20:	bl	11298 <__errno_location@plt>
   16a24:	ldr	r6, [r0]
   16a28:	mov	r5, r0
   16a2c:	mov	r0, r4
   16a30:	bl	112ec <fclose@plt>
   16a34:	cmp	r6, #0
   16a38:	strne	r6, [r5]
   16a3c:	mvnne	r0, #0
   16a40:	sub	sp, fp, #16
   16a44:	pop	{r4, r5, r6, sl, fp, pc}
   16a48:	mov	r0, r4
   16a4c:	sub	sp, fp, #16
   16a50:	pop	{r4, r5, r6, sl, fp, lr}
   16a54:	b	112ec <fclose@plt>
   16a58:	push	{r4, sl, fp, lr}
   16a5c:	add	fp, sp, #8
   16a60:	sub	sp, sp, #8
   16a64:	mov	r4, r0
   16a68:	cmp	r0, #0
   16a6c:	beq	16aa4 <__assert_fail@plt+0x5704>
   16a70:	mov	r0, r4
   16a74:	bl	1122c <__freading@plt>
   16a78:	cmp	r0, #0
   16a7c:	beq	16aa4 <__assert_fail@plt+0x5704>
   16a80:	ldrb	r0, [r4, #1]
   16a84:	tst	r0, #1
   16a88:	beq	16aa4 <__assert_fail@plt+0x5704>
   16a8c:	mov	r0, #1
   16a90:	mov	r2, #0
   16a94:	mov	r3, #0
   16a98:	str	r0, [sp]
   16a9c:	mov	r0, r4
   16aa0:	bl	16ab4 <__assert_fail@plt+0x5714>
   16aa4:	mov	r0, r4
   16aa8:	sub	sp, fp, #8
   16aac:	pop	{r4, sl, fp, lr}
   16ab0:	b	1110c <fflush@plt>
   16ab4:	push	{r4, r5, r6, r7, fp, lr}
   16ab8:	add	fp, sp, #16
   16abc:	sub	sp, sp, #8
   16ac0:	mov	r4, r0
   16ac4:	ldr	r0, [r0, #4]
   16ac8:	mov	r5, r3
   16acc:	mov	r6, r2
   16ad0:	ldr	r1, [r4, #8]
   16ad4:	cmp	r1, r0
   16ad8:	bne	16af4 <__assert_fail@plt+0x5754>
   16adc:	ldrd	r0, [r4, #16]
   16ae0:	cmp	r1, r0
   16ae4:	bne	16af4 <__assert_fail@plt+0x5754>
   16ae8:	ldr	r0, [r4, #36]	; 0x24
   16aec:	cmp	r0, #0
   16af0:	beq	16b0c <__assert_fail@plt+0x576c>
   16af4:	mov	r0, r4
   16af8:	mov	r2, r6
   16afc:	mov	r3, r5
   16b00:	sub	sp, fp, #16
   16b04:	pop	{r4, r5, r6, r7, fp, lr}
   16b08:	b	112f8 <fseeko64@plt>
   16b0c:	ldr	r7, [fp, #8]
   16b10:	mov	r0, r4
   16b14:	bl	112d4 <fileno@plt>
   16b18:	mov	r2, r6
   16b1c:	mov	r3, r5
   16b20:	str	r7, [sp]
   16b24:	bl	111b4 <lseek64@plt>
   16b28:	and	r2, r0, r1
   16b2c:	cmn	r2, #1
   16b30:	beq	16b50 <__assert_fail@plt+0x57b0>
   16b34:	strd	r0, [r4, #80]	; 0x50
   16b38:	ldr	r0, [r4]
   16b3c:	bic	r0, r0, #16
   16b40:	str	r0, [r4]
   16b44:	mov	r0, #0
   16b48:	sub	sp, fp, #16
   16b4c:	pop	{r4, r5, r6, r7, fp, pc}
   16b50:	mvn	r0, #0
   16b54:	sub	sp, fp, #16
   16b58:	pop	{r4, r5, r6, r7, fp, pc}
   16b5c:	push	{r4, r5, r6, sl, fp, lr}
   16b60:	add	fp, sp, #16
   16b64:	mov	r5, r0
   16b68:	mov	r0, #0
   16b6c:	mov	r4, r1
   16b70:	add	r6, r2, #19
   16b74:	strb	r0, [r2, #20]
   16b78:	mov	r0, r5
   16b7c:	mov	r1, r4
   16b80:	mov	r2, #10
   16b84:	mov	r3, #0
   16b88:	bl	17010 <__assert_fail@plt+0x5c70>
   16b8c:	add	r2, r0, r0, lsl #2
   16b90:	sub	r2, r5, r2, lsl #1
   16b94:	orr	r2, r2, #48	; 0x30
   16b98:	strb	r2, [r6], #-1
   16b9c:	rsbs	r2, r5, #9
   16ba0:	mov	r5, r0
   16ba4:	rscs	r2, r4, #0
   16ba8:	mov	r4, r1
   16bac:	bcc	16b78 <__assert_fail@plt+0x57d8>
   16bb0:	add	r0, r6, #1
   16bb4:	pop	{r4, r5, r6, sl, fp, pc}
   16bb8:	push	{fp, lr}
   16bbc:	mov	fp, sp
   16bc0:	mov	r0, #14
   16bc4:	bl	11334 <nl_langinfo@plt>
   16bc8:	movw	r1, #29348	; 0x72a4
   16bcc:	cmp	r0, #0
   16bd0:	movt	r1, #1
   16bd4:	movne	r1, r0
   16bd8:	movw	r0, #32003	; 0x7d03
   16bdc:	ldrb	r2, [r1]
   16be0:	movt	r0, #1
   16be4:	cmp	r2, #0
   16be8:	movne	r0, r1
   16bec:	pop	{fp, pc}
   16bf0:	push	{r4, r5, r6, r7, fp, lr}
   16bf4:	add	fp, sp, #16
   16bf8:	sub	sp, sp, #8
   16bfc:	cmp	r0, #0
   16c00:	add	r5, sp, #4
   16c04:	mov	r7, r2
   16c08:	mov	r4, r1
   16c0c:	movne	r5, r0
   16c10:	mov	r0, r5
   16c14:	bl	111e4 <mbrtowc@plt>
   16c18:	mov	r6, r0
   16c1c:	cmp	r7, #0
   16c20:	beq	16c48 <__assert_fail@plt+0x58a8>
   16c24:	cmn	r6, #2
   16c28:	bcc	16c48 <__assert_fail@plt+0x58a8>
   16c2c:	mov	r0, #0
   16c30:	bl	16f04 <__assert_fail@plt+0x5b64>
   16c34:	cmp	r0, #0
   16c38:	bne	16c48 <__assert_fail@plt+0x58a8>
   16c3c:	ldrb	r0, [r4]
   16c40:	mov	r6, #1
   16c44:	str	r0, [r5]
   16c48:	mov	r0, r6
   16c4c:	sub	sp, fp, #16
   16c50:	pop	{r4, r5, r6, r7, fp, pc}
   16c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c58:	add	fp, sp, #28
   16c5c:	sub	sp, sp, #12
   16c60:	mov	sl, r2
   16c64:	mov	r6, r1
   16c68:	cmp	r0, #0
   16c6c:	beq	16d00 <__assert_fail@plt+0x5960>
   16c70:	mov	r7, r0
   16c74:	mov	r8, #10
   16c78:	mov	r0, #0
   16c7c:	mov	r1, #40	; 0x28
   16c80:	str	r8, [sp, #8]
   16c84:	bl	168e4 <__assert_fail@plt+0x5544>
   16c88:	mvn	r9, #0
   16c8c:	cmp	r0, #0
   16c90:	beq	16e98 <__assert_fail@plt+0x5af8>
   16c94:	str	sl, [sp, #4]
   16c98:	mov	r5, r0
   16c9c:	add	sl, sp, #8
   16ca0:	mov	r0, r7
   16ca4:	mov	r1, r6
   16ca8:	mov	r2, r5
   16cac:	mov	r3, sl
   16cb0:	bl	112b0 <getgrouplist@plt>
   16cb4:	mov	r4, r0
   16cb8:	ldr	r0, [sp, #8]
   16cbc:	cmn	r4, #1
   16cc0:	bgt	16cd0 <__assert_fail@plt+0x5930>
   16cc4:	cmp	r8, r0
   16cc8:	lsleq	r0, r8, #1
   16ccc:	streq	r0, [sp, #8]
   16cd0:	cmp	r0, #536870912	; 0x20000000
   16cd4:	bcs	16d98 <__assert_fail@plt+0x59f8>
   16cd8:	lsl	r1, r0, #2
   16cdc:	mov	r0, r5
   16ce0:	bl	168e4 <__assert_fail@plt+0x5544>
   16ce4:	cmp	r0, #0
   16ce8:	beq	16da4 <__assert_fail@plt+0x5a04>
   16cec:	cmn	r4, #1
   16cf0:	bgt	16db8 <__assert_fail@plt+0x5a18>
   16cf4:	ldr	r8, [sp, #8]
   16cf8:	mov	r5, r0
   16cfc:	b	16ca0 <__assert_fail@plt+0x5900>
   16d00:	mov	r0, #0
   16d04:	mov	r1, #0
   16d08:	bl	1134c <getgroups@plt>
   16d0c:	cmn	r0, #1
   16d10:	str	r0, [sp, #8]
   16d14:	ble	16d50 <__assert_fail@plt+0x59b0>
   16d18:	mov	r4, r0
   16d1c:	cmn	r6, #1
   16d20:	bne	16dd0 <__assert_fail@plt+0x5a30>
   16d24:	cmp	r4, #0
   16d28:	beq	16dd0 <__assert_fail@plt+0x5a30>
   16d2c:	cmp	r4, #536870912	; 0x20000000
   16d30:	bcc	16de0 <__assert_fail@plt+0x5a40>
   16d34:	bl	11298 <__errno_location@plt>
   16d38:	mov	r1, #12
   16d3c:	mvn	r9, #0
   16d40:	str	r1, [r0]
   16d44:	mov	r0, r9
   16d48:	sub	sp, fp, #28
   16d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d50:	bl	11298 <__errno_location@plt>
   16d54:	ldr	r0, [r0]
   16d58:	mvn	r9, #0
   16d5c:	cmp	r0, #38	; 0x26
   16d60:	bne	16e98 <__assert_fail@plt+0x5af8>
   16d64:	mov	r0, #0
   16d68:	mov	r1, #4
   16d6c:	bl	168e4 <__assert_fail@plt+0x5544>
   16d70:	cmp	r0, #0
   16d74:	beq	16e98 <__assert_fail@plt+0x5af8>
   16d78:	str	r0, [sl]
   16d7c:	str	r6, [r0]
   16d80:	mvn	r0, #0
   16d84:	subs	r9, r6, r0
   16d88:	movwne	r9, #1
   16d8c:	mov	r0, r9
   16d90:	sub	sp, fp, #28
   16d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d98:	bl	11298 <__errno_location@plt>
   16d9c:	mov	r1, #12
   16da0:	str	r1, [r0]
   16da4:	mov	r0, r5
   16da8:	bl	122c0 <__assert_fail@plt+0xf20>
   16dac:	mov	r0, r9
   16db0:	sub	sp, fp, #28
   16db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16db8:	ldr	r1, [sp, #4]
   16dbc:	str	r0, [r1]
   16dc0:	ldr	r9, [sp, #8]
   16dc4:	mov	r0, r9
   16dc8:	sub	sp, fp, #28
   16dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dd0:	add	r4, r4, #1
   16dd4:	str	r4, [sp, #8]
   16dd8:	cmp	r4, #536870912	; 0x20000000
   16ddc:	bcs	16d34 <__assert_fail@plt+0x5994>
   16de0:	lsl	r1, r4, #2
   16de4:	mov	r0, #0
   16de8:	bl	168e4 <__assert_fail@plt+0x5544>
   16dec:	cmp	r0, #0
   16df0:	beq	16e94 <__assert_fail@plt+0x5af4>
   16df4:	mvn	r9, #0
   16df8:	mov	r7, r0
   16dfc:	subs	r1, r6, r9
   16e00:	movwne	r1, #1
   16e04:	sub	r0, r4, r1
   16e08:	add	r1, r7, r1, lsl #2
   16e0c:	bl	1134c <getgroups@plt>
   16e10:	cmn	r0, #1
   16e14:	ble	16eb4 <__assert_fail@plt+0x5b14>
   16e18:	cmn	r6, #1
   16e1c:	addne	r0, r0, #1
   16e20:	strne	r6, [r7]
   16e24:	str	r7, [sl]
   16e28:	cmp	r0, #2
   16e2c:	blt	16ea4 <__assert_fail@plt+0x5b04>
   16e30:	mov	r2, r7
   16e34:	add	r1, r7, r0, lsl #2
   16e38:	ldr	r6, [r2], #4
   16e3c:	cmp	r1, r2
   16e40:	bls	16ea4 <__assert_fail@plt+0x5b04>
   16e44:	mov	r3, r6
   16e48:	mov	r9, r0
   16e4c:	ldr	r0, [r2]
   16e50:	cmp	r0, r6
   16e54:	cmpne	r0, r3
   16e58:	beq	16e80 <__assert_fail@plt+0x5ae0>
   16e5c:	str	r0, [r7, #4]!
   16e60:	mov	r3, r0
   16e64:	add	r2, r2, #4
   16e68:	cmp	r2, r1
   16e6c:	bcs	16e98 <__assert_fail@plt+0x5af8>
   16e70:	ldr	r0, [r2]
   16e74:	cmp	r0, r6
   16e78:	cmpne	r0, r3
   16e7c:	bne	16e5c <__assert_fail@plt+0x5abc>
   16e80:	sub	r9, r9, #1
   16e84:	add	r2, r2, #4
   16e88:	cmp	r2, r1
   16e8c:	bcc	16e70 <__assert_fail@plt+0x5ad0>
   16e90:	b	16e98 <__assert_fail@plt+0x5af8>
   16e94:	mvn	r9, #0
   16e98:	mov	r0, r9
   16e9c:	sub	sp, fp, #28
   16ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ea4:	mov	r9, r0
   16ea8:	mov	r0, r9
   16eac:	sub	sp, fp, #28
   16eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eb4:	mov	r0, r7
   16eb8:	bl	122c0 <__assert_fail@plt+0xf20>
   16ebc:	mov	r0, r9
   16ec0:	sub	sp, fp, #28
   16ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ec8:	cmp	r2, #0
   16ecc:	beq	16efc <__assert_fail@plt+0x5b5c>
   16ed0:	mvn	r3, #0
   16ed4:	udiv	r3, r3, r2
   16ed8:	cmp	r3, r1
   16edc:	bcs	16efc <__assert_fail@plt+0x5b5c>
   16ee0:	push	{fp, lr}
   16ee4:	mov	fp, sp
   16ee8:	bl	11298 <__errno_location@plt>
   16eec:	mov	r1, #12
   16ef0:	str	r1, [r0]
   16ef4:	mov	r0, #0
   16ef8:	pop	{fp, pc}
   16efc:	mul	r1, r2, r1
   16f00:	b	168e4 <__assert_fail@plt+0x5544>
   16f04:	push	{r4, sl, fp, lr}
   16f08:	add	fp, sp, #8
   16f0c:	sub	sp, sp, #264	; 0x108
   16f10:	add	r1, sp, #7
   16f14:	movw	r2, #257	; 0x101
   16f18:	bl	16f70 <__assert_fail@plt+0x5bd0>
   16f1c:	mov	r4, #0
   16f20:	cmp	r0, #0
   16f24:	bne	16f64 <__assert_fail@plt+0x5bc4>
   16f28:	movw	r1, #32009	; 0x7d09
   16f2c:	add	r0, sp, #7
   16f30:	mov	r2, #2
   16f34:	movt	r1, #1
   16f38:	bl	11268 <bcmp@plt>
   16f3c:	cmp	r0, #0
   16f40:	beq	16f64 <__assert_fail@plt+0x5bc4>
   16f44:	movw	r1, #32011	; 0x7d0b
   16f48:	add	r0, sp, #7
   16f4c:	mov	r2, #6
   16f50:	movt	r1, #1
   16f54:	bl	11268 <bcmp@plt>
   16f58:	cmp	r0, #0
   16f5c:	mov	r4, r0
   16f60:	movwne	r4, #1
   16f64:	mov	r0, r4
   16f68:	sub	sp, fp, #8
   16f6c:	pop	{r4, sl, fp, pc}
   16f70:	push	{r4, r5, r6, r7, fp, lr}
   16f74:	add	fp, sp, #16
   16f78:	mov	r4, r1
   16f7c:	mov	r1, #0
   16f80:	mov	r6, r2
   16f84:	bl	11310 <setlocale@plt>
   16f88:	cmp	r0, #0
   16f8c:	beq	16fbc <__assert_fail@plt+0x5c1c>
   16f90:	mov	r7, r0
   16f94:	bl	11280 <strlen@plt>
   16f98:	cmp	r0, r6
   16f9c:	bcs	16fd8 <__assert_fail@plt+0x5c38>
   16fa0:	add	r2, r0, #1
   16fa4:	mov	r0, r4
   16fa8:	mov	r1, r7
   16fac:	bl	11130 <memcpy@plt>
   16fb0:	mov	r5, #0
   16fb4:	mov	r0, r5
   16fb8:	pop	{r4, r5, r6, r7, fp, pc}
   16fbc:	mov	r5, #22
   16fc0:	cmp	r6, #0
   16fc4:	beq	17000 <__assert_fail@plt+0x5c60>
   16fc8:	mov	r0, #0
   16fcc:	strb	r0, [r4]
   16fd0:	mov	r0, r5
   16fd4:	pop	{r4, r5, r6, r7, fp, pc}
   16fd8:	mov	r5, #34	; 0x22
   16fdc:	cmp	r6, #0
   16fe0:	beq	17000 <__assert_fail@plt+0x5c60>
   16fe4:	sub	r6, r6, #1
   16fe8:	mov	r0, r4
   16fec:	mov	r1, r7
   16ff0:	mov	r2, r6
   16ff4:	bl	11130 <memcpy@plt>
   16ff8:	mov	r0, #0
   16ffc:	strb	r0, [r4, r6]
   17000:	mov	r0, r5
   17004:	pop	{r4, r5, r6, r7, fp, pc}
   17008:	mov	r1, #0
   1700c:	b	11310 <setlocale@plt>
   17010:	cmp	r3, #0
   17014:	cmpeq	r2, #0
   17018:	bne	17030 <__assert_fail@plt+0x5c90>
   1701c:	cmp	r1, #0
   17020:	cmpeq	r0, #0
   17024:	mvnne	r1, #0
   17028:	mvnne	r0, #0
   1702c:	b	1704c <__assert_fail@plt+0x5cac>
   17030:	sub	sp, sp, #8
   17034:	push	{sp, lr}
   17038:	bl	1705c <__assert_fail@plt+0x5cbc>
   1703c:	ldr	lr, [sp, #4]
   17040:	add	sp, sp, #8
   17044:	pop	{r2, r3}
   17048:	bx	lr
   1704c:	push	{r1, lr}
   17050:	mov	r0, #8
   17054:	bl	110dc <raise@plt>
   17058:	pop	{r1, pc}
   1705c:	cmp	r1, r3
   17060:	cmpeq	r0, r2
   17064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17068:	mov	r4, r0
   1706c:	movcc	r0, #0
   17070:	mov	r5, r1
   17074:	ldr	lr, [sp, #36]	; 0x24
   17078:	movcc	r1, r0
   1707c:	bcc	17178 <__assert_fail@plt+0x5dd8>
   17080:	cmp	r3, #0
   17084:	clzeq	ip, r2
   17088:	clzne	ip, r3
   1708c:	addeq	ip, ip, #32
   17090:	cmp	r5, #0
   17094:	clzeq	r1, r4
   17098:	addeq	r1, r1, #32
   1709c:	clzne	r1, r5
   170a0:	sub	ip, ip, r1
   170a4:	sub	sl, ip, #32
   170a8:	lsl	r9, r3, ip
   170ac:	rsb	fp, ip, #32
   170b0:	orr	r9, r9, r2, lsl sl
   170b4:	orr	r9, r9, r2, lsr fp
   170b8:	lsl	r8, r2, ip
   170bc:	cmp	r5, r9
   170c0:	cmpeq	r4, r8
   170c4:	movcc	r0, #0
   170c8:	movcc	r1, r0
   170cc:	bcc	170e8 <__assert_fail@plt+0x5d48>
   170d0:	mov	r0, #1
   170d4:	subs	r4, r4, r8
   170d8:	lsl	r1, r0, sl
   170dc:	orr	r1, r1, r0, lsr fp
   170e0:	lsl	r0, r0, ip
   170e4:	sbc	r5, r5, r9
   170e8:	cmp	ip, #0
   170ec:	beq	17178 <__assert_fail@plt+0x5dd8>
   170f0:	lsr	r6, r8, #1
   170f4:	orr	r6, r6, r9, lsl #31
   170f8:	lsr	r7, r9, #1
   170fc:	mov	r2, ip
   17100:	b	17124 <__assert_fail@plt+0x5d84>
   17104:	subs	r3, r4, r6
   17108:	sbc	r8, r5, r7
   1710c:	adds	r3, r3, r3
   17110:	adc	r8, r8, r8
   17114:	adds	r4, r3, #1
   17118:	adc	r5, r8, #0
   1711c:	subs	r2, r2, #1
   17120:	beq	17140 <__assert_fail@plt+0x5da0>
   17124:	cmp	r5, r7
   17128:	cmpeq	r4, r6
   1712c:	bcs	17104 <__assert_fail@plt+0x5d64>
   17130:	adds	r4, r4, r4
   17134:	adc	r5, r5, r5
   17138:	subs	r2, r2, #1
   1713c:	bne	17124 <__assert_fail@plt+0x5d84>
   17140:	lsr	r3, r4, ip
   17144:	orr	r3, r3, r5, lsl fp
   17148:	lsr	r2, r5, ip
   1714c:	orr	r3, r3, r5, lsr sl
   17150:	adds	r0, r0, r4
   17154:	mov	r4, r3
   17158:	lsl	r3, r2, ip
   1715c:	orr	r3, r3, r4, lsl sl
   17160:	lsl	ip, r4, ip
   17164:	orr	r3, r3, r4, lsr fp
   17168:	adc	r1, r1, r5
   1716c:	subs	r0, r0, ip
   17170:	mov	r5, r2
   17174:	sbc	r1, r1, r3
   17178:	cmp	lr, #0
   1717c:	strdne	r4, [lr]
   17180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17184:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17188:	mov	r7, r0
   1718c:	ldr	r6, [pc, #72]	; 171dc <__assert_fail@plt+0x5e3c>
   17190:	ldr	r5, [pc, #72]	; 171e0 <__assert_fail@plt+0x5e40>
   17194:	add	r6, pc, r6
   17198:	add	r5, pc, r5
   1719c:	sub	r6, r6, r5
   171a0:	mov	r8, r1
   171a4:	mov	r9, r2
   171a8:	bl	11098 <calloc@plt-0x20>
   171ac:	asrs	r6, r6, #2
   171b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   171b4:	mov	r4, #0
   171b8:	add	r4, r4, #1
   171bc:	ldr	r3, [r5], #4
   171c0:	mov	r2, r9
   171c4:	mov	r1, r8
   171c8:	mov	r0, r7
   171cc:	blx	r3
   171d0:	cmp	r6, r4
   171d4:	bne	171b8 <__assert_fail@plt+0x5e18>
   171d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171dc:	andeq	r0, r1, r0, ror sp
   171e0:	andeq	r0, r1, r8, ror #26
   171e4:	bx	lr
   171e8:	ldr	r3, [pc, #12]	; 171fc <__assert_fail@plt+0x5e5c>
   171ec:	mov	r1, #0
   171f0:	add	r3, pc, r3
   171f4:	ldr	r2, [r3]
   171f8:	b	112a4 <__cxa_atexit@plt>
   171fc:	andeq	r0, r1, ip, lsl pc

Disassembly of section .fini:

00017200 <.fini>:
   17200:	push	{r3, lr}
   17204:	pop	{r3, pc}
