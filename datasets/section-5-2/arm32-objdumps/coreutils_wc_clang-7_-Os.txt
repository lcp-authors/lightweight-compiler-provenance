
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

000112ac <.init>:
   112ac:	push	{r3, lr}
   112b0:	bl	1163c <__assert_fail@plt+0x4c>
   112b4:	pop	{r3, pc}

Disassembly of section .plt:

000112b8 <calloc@plt-0x14>:
   112b8:	push	{lr}		; (str lr, [sp, #-4]!)
   112bc:	ldr	lr, [pc, #4]	; 112c8 <calloc@plt-0x4>
   112c0:	add	lr, pc, lr
   112c4:	ldr	pc, [lr, #8]!
   112c8:	andeq	r6, r1, r8, lsr sp

000112cc <calloc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #90112	; 0x16000
   112d4:	ldr	pc, [ip, #3384]!	; 0xd38

000112d8 <fputs_unlocked@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #90112	; 0x16000
   112e0:	ldr	pc, [ip, #3376]!	; 0xd30

000112e4 <raise@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #90112	; 0x16000
   112ec:	ldr	pc, [ip, #3368]!	; 0xd28

000112f0 <strcmp@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #90112	; 0x16000
   112f8:	ldr	pc, [ip, #3360]!	; 0xd20

000112fc <posix_fadvise64@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #90112	; 0x16000
   11304:	ldr	pc, [ip, #3352]!	; 0xd18

00011308 <read@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #90112	; 0x16000
   11310:	ldr	pc, [ip, #3344]!	; 0xd10

00011314 <fflush@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #90112	; 0x16000
   1131c:	ldr	pc, [ip, #3336]!	; 0xd08

00011320 <wcwidth@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #90112	; 0x16000
   11328:	ldr	pc, [ip, #3328]!	; 0xd00

0001132c <memmove@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #90112	; 0x16000
   11334:	ldr	pc, [ip, #3320]!	; 0xcf8

00011338 <free@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #90112	; 0x16000
   11340:	ldr	pc, [ip, #3312]!	; 0xcf0

00011344 <ferror@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #90112	; 0x16000
   1134c:	ldr	pc, [ip, #3304]!	; 0xce8

00011350 <_exit@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #90112	; 0x16000
   11358:	ldr	pc, [ip, #3296]!	; 0xce0

0001135c <memcpy@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #90112	; 0x16000
   11364:	ldr	pc, [ip, #3288]!	; 0xcd8

00011368 <mbsinit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #90112	; 0x16000
   11370:	ldr	pc, [ip, #3280]!	; 0xcd0

00011374 <memcmp@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #90112	; 0x16000
   1137c:	ldr	pc, [ip, #3272]!	; 0xcc8

00011380 <dcgettext@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #90112	; 0x16000
   11388:	ldr	pc, [ip, #3264]!	; 0xcc0

0001138c <sysconf@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #90112	; 0x16000
   11394:	ldr	pc, [ip, #3256]!	; 0xcb8

00011398 <realloc@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #90112	; 0x16000
   113a0:	ldr	pc, [ip, #3248]!	; 0xcb0

000113a4 <textdomain@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #90112	; 0x16000
   113ac:	ldr	pc, [ip, #3240]!	; 0xca8

000113b0 <iswcntrl@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #90112	; 0x16000
   113b8:	ldr	pc, [ip, #3232]!	; 0xca0

000113bc <rawmemchr@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #90112	; 0x16000
   113c4:	ldr	pc, [ip, #3224]!	; 0xc98

000113c8 <iswprint@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #90112	; 0x16000
   113d0:	ldr	pc, [ip, #3216]!	; 0xc90

000113d4 <__fxstat64@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #90112	; 0x16000
   113dc:	ldr	pc, [ip, #3208]!	; 0xc88

000113e0 <lseek64@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #90112	; 0x16000
   113e8:	ldr	pc, [ip, #3200]!	; 0xc80

000113ec <__ctype_get_mb_cur_max@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #90112	; 0x16000
   113f4:	ldr	pc, [ip, #3192]!	; 0xc78

000113f8 <__fpending@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #90112	; 0x16000
   11400:	ldr	pc, [ip, #3184]!	; 0xc70

00011404 <ferror_unlocked@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #90112	; 0x16000
   1140c:	ldr	pc, [ip, #3176]!	; 0xc68

00011410 <mbrtowc@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #90112	; 0x16000
   11418:	ldr	pc, [ip, #3168]!	; 0xc60

0001141c <error@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #90112	; 0x16000
   11424:	ldr	pc, [ip, #3160]!	; 0xc58

00011428 <open64@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #90112	; 0x16000
   11430:	ldr	pc, [ip, #3152]!	; 0xc50

00011434 <getenv@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #90112	; 0x16000
   1143c:	ldr	pc, [ip, #3144]!	; 0xc48

00011440 <sysinfo@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #90112	; 0x16000
   11448:	ldr	pc, [ip, #3136]!	; 0xc40

0001144c <malloc@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #90112	; 0x16000
   11454:	ldr	pc, [ip, #3128]!	; 0xc38

00011458 <__libc_start_main@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #90112	; 0x16000
   11460:	ldr	pc, [ip, #3120]!	; 0xc30

00011464 <__freading@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #90112	; 0x16000
   1146c:	ldr	pc, [ip, #3112]!	; 0xc28

00011470 <__gmon_start__@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #90112	; 0x16000
   11478:	ldr	pc, [ip, #3104]!	; 0xc20

0001147c <getopt_long@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #90112	; 0x16000
   11484:	ldr	pc, [ip, #3096]!	; 0xc18

00011488 <__ctype_b_loc@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #90112	; 0x16000
   11490:	ldr	pc, [ip, #3088]!	; 0xc10

00011494 <exit@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #90112	; 0x16000
   1149c:	ldr	pc, [ip, #3080]!	; 0xc08

000114a0 <feof@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #90112	; 0x16000
   114a8:	ldr	pc, [ip, #3072]!	; 0xc00

000114ac <iswspace@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #90112	; 0x16000
   114b4:	ldr	pc, [ip, #3064]!	; 0xbf8

000114b8 <strlen@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #90112	; 0x16000
   114c0:	ldr	pc, [ip, #3056]!	; 0xbf0

000114c4 <strchr@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #90112	; 0x16000
   114cc:	ldr	pc, [ip, #3048]!	; 0xbe8

000114d0 <getpagesize@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #90112	; 0x16000
   114d8:	ldr	pc, [ip, #3040]!	; 0xbe0

000114dc <__errno_location@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #90112	; 0x16000
   114e4:	ldr	pc, [ip, #3032]!	; 0xbd8

000114e8 <__cxa_atexit@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #90112	; 0x16000
   114f0:	ldr	pc, [ip, #3024]!	; 0xbd0

000114f4 <setvbuf@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #90112	; 0x16000
   114fc:	ldr	pc, [ip, #3016]!	; 0xbc8

00011500 <memset@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #90112	; 0x16000
   11508:	ldr	pc, [ip, #3008]!	; 0xbc0

0001150c <btowc@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #90112	; 0x16000
   11514:	ldr	pc, [ip, #3000]!	; 0xbb8

00011518 <fgetc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #90112	; 0x16000
   11520:	ldr	pc, [ip, #2992]!	; 0xbb0

00011524 <__printf_chk@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #90112	; 0x16000
   1152c:	ldr	pc, [ip, #2984]!	; 0xba8

00011530 <fileno@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #90112	; 0x16000
   11538:	ldr	pc, [ip, #2976]!	; 0xba0

0001153c <__fprintf_chk@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #90112	; 0x16000
   11544:	ldr	pc, [ip, #2968]!	; 0xb98

00011548 <fclose@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #90112	; 0x16000
   11550:	ldr	pc, [ip, #2960]!	; 0xb90

00011554 <fseeko64@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #90112	; 0x16000
   1155c:	ldr	pc, [ip, #2952]!	; 0xb88

00011560 <setlocale@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #90112	; 0x16000
   11568:	ldr	pc, [ip, #2944]!	; 0xb80

0001156c <strrchr@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #90112	; 0x16000
   11574:	ldr	pc, [ip, #2936]!	; 0xb78

00011578 <nl_langinfo@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #90112	; 0x16000
   11580:	ldr	pc, [ip, #2928]!	; 0xb70

00011584 <fopen64@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #90112	; 0x16000
   1158c:	ldr	pc, [ip, #2920]!	; 0xb68

00011590 <bindtextdomain@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #90112	; 0x16000
   11598:	ldr	pc, [ip, #2912]!	; 0xb60

0001159c <getdelim@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #90112	; 0x16000
   115a4:	ldr	pc, [ip, #2904]!	; 0xb58

000115a8 <__xstat64@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #90112	; 0x16000
   115b0:	ldr	pc, [ip, #2896]!	; 0xb50

000115b4 <fputs@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #90112	; 0x16000
   115bc:	ldr	pc, [ip, #2888]!	; 0xb48

000115c0 <strncmp@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #90112	; 0x16000
   115c8:	ldr	pc, [ip, #2880]!	; 0xb40

000115cc <abort@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #90112	; 0x16000
   115d4:	ldr	pc, [ip, #2872]!	; 0xb38

000115d8 <close@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #90112	; 0x16000
   115e0:	ldr	pc, [ip, #2864]!	; 0xb30

000115e4 <putchar_unlocked@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #90112	; 0x16000
   115ec:	ldr	pc, [ip, #2856]!	; 0xb28

000115f0 <__assert_fail@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #90112	; 0x16000
   115f8:	ldr	pc, [ip, #2848]!	; 0xb20

Disassembly of section .text:

00011600 <_obstack_begin@@Base-0x4ee4>:
   11600:	mov	fp, #0
   11604:	mov	lr, #0
   11608:	pop	{r1}		; (ldr r1, [sp], #4)
   1160c:	mov	r2, sp
   11610:	push	{r2}		; (str r2, [sp, #-4]!)
   11614:	push	{r0}		; (str r0, [sp, #-4]!)
   11618:	ldr	ip, [pc, #16]	; 11630 <__assert_fail@plt+0x40>
   1161c:	push	{ip}		; (str ip, [sp, #-4]!)
   11620:	ldr	r0, [pc, #12]	; 11634 <__assert_fail@plt+0x44>
   11624:	ldr	r3, [pc, #12]	; 11638 <__assert_fail@plt+0x48>
   11628:	bl	11458 <__libc_start_main@plt>
   1162c:	bl	115cc <abort@plt>
   11630:	andeq	r6, r1, ip, ror #29
   11634:	andeq	r1, r1, r0, ror r9
   11638:	andeq	r6, r1, ip, lsl #29
   1163c:	ldr	r3, [pc, #20]	; 11658 <__assert_fail@plt+0x68>
   11640:	ldr	r2, [pc, #20]	; 1165c <__assert_fail@plt+0x6c>
   11644:	add	r3, pc, r3
   11648:	ldr	r2, [r3, r2]
   1164c:	cmp	r2, #0
   11650:	bxeq	lr
   11654:	b	11470 <__gmon_start__@plt>
   11658:			; <UNDEFINED> instruction: 0x000169b4
   1165c:	andeq	r0, r0, ip, lsl r1
   11660:	ldr	r0, [pc, #24]	; 11680 <__assert_fail@plt+0x90>
   11664:	ldr	r3, [pc, #24]	; 11684 <__assert_fail@plt+0x94>
   11668:	cmp	r3, r0
   1166c:	bxeq	lr
   11670:	ldr	r3, [pc, #16]	; 11688 <__assert_fail@plt+0x98>
   11674:	cmp	r3, #0
   11678:	bxeq	lr
   1167c:	bx	r3
   11680:	andeq	r8, r2, r4, ror r1
   11684:	andeq	r8, r2, r4, ror r1
   11688:	andeq	r0, r0, r0
   1168c:	ldr	r0, [pc, #36]	; 116b8 <__assert_fail@plt+0xc8>
   11690:	ldr	r1, [pc, #36]	; 116bc <__assert_fail@plt+0xcc>
   11694:	sub	r1, r1, r0
   11698:	asr	r1, r1, #2
   1169c:	add	r1, r1, r1, lsr #31
   116a0:	asrs	r1, r1, #1
   116a4:	bxeq	lr
   116a8:	ldr	r3, [pc, #16]	; 116c0 <__assert_fail@plt+0xd0>
   116ac:	cmp	r3, #0
   116b0:	bxeq	lr
   116b4:	bx	r3
   116b8:	andeq	r8, r2, r4, ror r1
   116bc:	andeq	r8, r2, r4, ror r1
   116c0:	andeq	r0, r0, r0
   116c4:	push	{r4, lr}
   116c8:	ldr	r4, [pc, #24]	; 116e8 <__assert_fail@plt+0xf8>
   116cc:	ldrb	r3, [r4]
   116d0:	cmp	r3, #0
   116d4:	popne	{r4, pc}
   116d8:	bl	11660 <__assert_fail@plt+0x70>
   116dc:	mov	r3, #1
   116e0:	strb	r3, [r4]
   116e4:	pop	{r4, pc}
   116e8:	muleq	r2, ip, r1
   116ec:	b	1168c <__assert_fail@plt+0x9c>
   116f0:	push	{fp, lr}
   116f4:	mov	fp, sp
   116f8:	sub	sp, sp, #56	; 0x38
   116fc:	mov	r8, r0
   11700:	cmp	r0, #0
   11704:	bne	1192c <__assert_fail@plt+0x33c>
   11708:	movw	r1, #28507	; 0x6f5b
   1170c:	mov	r0, #0
   11710:	mov	r2, #5
   11714:	movt	r1, #1
   11718:	bl	11380 <dcgettext@plt>
   1171c:	mov	r1, r0
   11720:	movw	r0, #33260	; 0x81ec
   11724:	movt	r0, #2
   11728:	ldr	r2, [r0]
   1172c:	mov	r0, #1
   11730:	mov	r3, r2
   11734:	bl	11524 <__printf_chk@plt>
   11738:	movw	r1, #28578	; 0x6fa2
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	movt	r1, #1
   11748:	bl	11380 <dcgettext@plt>
   1174c:	movw	r9, #33172	; 0x8194
   11750:	movt	r9, #2
   11754:	ldr	r1, [r9]
   11758:	bl	112d8 <fputs_unlocked@plt>
   1175c:	movw	r1, #29887	; 0x74bf
   11760:	mov	r0, #0
   11764:	mov	r2, #5
   11768:	movt	r1, #1
   1176c:	bl	11380 <dcgettext@plt>
   11770:	ldr	r1, [r9]
   11774:	bl	112d8 <fputs_unlocked@plt>
   11778:	movw	r1, #28772	; 0x7064
   1177c:	mov	r0, #0
   11780:	mov	r2, #5
   11784:	movt	r1, #1
   11788:	bl	11380 <dcgettext@plt>
   1178c:	ldr	r1, [r9]
   11790:	bl	112d8 <fputs_unlocked@plt>
   11794:	movw	r1, #29073	; 0x7191
   11798:	mov	r0, #0
   1179c:	mov	r2, #5
   117a0:	movt	r1, #1
   117a4:	bl	11380 <dcgettext@plt>
   117a8:	ldr	r1, [r9]
   117ac:	bl	112d8 <fputs_unlocked@plt>
   117b0:	movw	r1, #29374	; 0x72be
   117b4:	mov	r0, #0
   117b8:	mov	r2, #5
   117bc:	movt	r1, #1
   117c0:	bl	11380 <dcgettext@plt>
   117c4:	ldr	r1, [r9]
   117c8:	bl	112d8 <fputs_unlocked@plt>
   117cc:	movw	r1, #29419	; 0x72eb
   117d0:	mov	r0, #0
   117d4:	mov	r2, #5
   117d8:	movt	r1, #1
   117dc:	bl	11380 <dcgettext@plt>
   117e0:	ldr	r1, [r9]
   117e4:	bl	112d8 <fputs_unlocked@plt>
   117e8:	movw	r0, #30488	; 0x7718
   117ec:	mov	r6, sp
   117f0:	movt	r0, #1
   117f4:	mov	r1, r6
   117f8:	ldm	r0!, {r2, r3, r4, r5}
   117fc:	stmia	r1!, {r2, r3, r4, r5}
   11800:	ldm	r0!, {r2, r3, r4, r5, r7}
   11804:	stmia	r1!, {r2, r3, r4, r5, r7}
   11808:	ldm	r0, {r2, r3, r4, r5, r7}
   1180c:	stm	r1, {r2, r3, r4, r5, r7}
   11810:	movw	r1, #29943	; 0x74f7
   11814:	movw	r5, #29473	; 0x7321
   11818:	movt	r1, #1
   1181c:	movt	r5, #1
   11820:	mov	r0, r5
   11824:	bl	112f0 <strcmp@plt>
   11828:	cmp	r0, #0
   1182c:	ldrne	r1, [r6, #8]!
   11830:	cmpne	r1, #0
   11834:	bne	11820 <__assert_fail@plt+0x230>
   11838:	ldr	r6, [r6, #4]
   1183c:	movw	r1, #30038	; 0x7556
   11840:	mov	r0, #0
   11844:	mov	r2, #5
   11848:	movt	r1, #1
   1184c:	bl	11380 <dcgettext@plt>
   11850:	movw	r2, #29522	; 0x7352
   11854:	movw	r3, #30061	; 0x756d
   11858:	mov	r1, r0
   1185c:	mov	r0, #1
   11860:	movt	r2, #1
   11864:	movt	r3, #1
   11868:	bl	11524 <__printf_chk@plt>
   1186c:	cmp	r6, #0
   11870:	mov	r0, #5
   11874:	mov	r1, #0
   11878:	moveq	r6, r5
   1187c:	bl	11560 <setlocale@plt>
   11880:	cmp	r0, #0
   11884:	beq	118bc <__assert_fail@plt+0x2cc>
   11888:	movw	r1, #30101	; 0x7595
   1188c:	mov	r2, #3
   11890:	movt	r1, #1
   11894:	bl	115c0 <strncmp@plt>
   11898:	cmp	r0, #0
   1189c:	beq	118bc <__assert_fail@plt+0x2cc>
   118a0:	movw	r1, #30105	; 0x7599
   118a4:	mov	r0, #0
   118a8:	mov	r2, #5
   118ac:	movt	r1, #1
   118b0:	bl	11380 <dcgettext@plt>
   118b4:	ldr	r1, [r9]
   118b8:	bl	112d8 <fputs_unlocked@plt>
   118bc:	movw	r1, #30176	; 0x75e0
   118c0:	mov	r0, #0
   118c4:	mov	r2, #5
   118c8:	movt	r1, #1
   118cc:	bl	11380 <dcgettext@plt>
   118d0:	movw	r2, #30061	; 0x756d
   118d4:	mov	r1, r0
   118d8:	mov	r0, #1
   118dc:	mov	r3, r5
   118e0:	movt	r2, #1
   118e4:	bl	11524 <__printf_chk@plt>
   118e8:	movw	r1, #30203	; 0x75fb
   118ec:	mov	r0, #0
   118f0:	mov	r2, #5
   118f4:	movt	r1, #1
   118f8:	bl	11380 <dcgettext@plt>
   118fc:	movw	r3, #30253	; 0x762d
   11900:	mov	r1, r0
   11904:	movw	r0, #29971	; 0x7513
   11908:	cmp	r6, r5
   1190c:	mov	r2, r6
   11910:	movt	r0, #1
   11914:	movt	r3, #1
   11918:	moveq	r3, r0
   1191c:	mov	r0, #1
   11920:	bl	11524 <__printf_chk@plt>
   11924:	mov	r0, r8
   11928:	bl	11494 <exit@plt>
   1192c:	movw	r0, #33160	; 0x8188
   11930:	movw	r1, #28468	; 0x6f34
   11934:	mov	r2, #5
   11938:	movt	r0, #2
   1193c:	movt	r1, #1
   11940:	ldr	r5, [r0]
   11944:	mov	r0, #0
   11948:	bl	11380 <dcgettext@plt>
   1194c:	mov	r2, r0
   11950:	movw	r0, #33260	; 0x81ec
   11954:	mov	r1, #1
   11958:	movt	r0, #2
   1195c:	ldr	r3, [r0]
   11960:	mov	r0, r5
   11964:	bl	1153c <__fprintf_chk@plt>
   11968:	b	11924 <__assert_fail@plt+0x334>
   1196c:	nop	{0}
   11970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11974:	add	fp, sp, #28
   11978:	sub	sp, sp, #4
   1197c:	vpush	{d8-d10}
   11980:	sub	sp, sp, #312	; 0x138
   11984:	mov	r6, r0
   11988:	ldr	r0, [r1]
   1198c:	mov	r5, r1
   11990:	bl	13ad4 <__assert_fail@plt+0x24e4>
   11994:	movw	r1, #30253	; 0x762d
   11998:	mov	r0, #6
   1199c:	movt	r1, #1
   119a0:	bl	11560 <setlocale@plt>
   119a4:	movw	r4, #29526	; 0x7356
   119a8:	movw	r1, #29476	; 0x7324
   119ac:	movt	r4, #1
   119b0:	movt	r1, #1
   119b4:	mov	r0, r4
   119b8:	bl	11590 <bindtextdomain@plt>
   119bc:	mov	r0, r4
   119c0:	bl	113a4 <textdomain@plt>
   119c4:	movw	r0, #13676	; 0x356c
   119c8:	movt	r0, #1
   119cc:	bl	16ef0 <_obstack_memory_used@@Base+0x6dc>
   119d0:	bl	114d0 <getpagesize@plt>
   119d4:	movw	r1, #33184	; 0x81a0
   119d8:	mov	r2, #1
   119dc:	mov	r3, #0
   119e0:	mov	r4, #0
   119e4:	movt	r1, #2
   119e8:	str	r0, [r1]
   119ec:	movw	r0, #33172	; 0x8194
   119f0:	mov	r1, #0
   119f4:	movt	r0, #2
   119f8:	ldr	r0, [r0]
   119fc:	bl	114f4 <setvbuf@plt>
   11a00:	movw	r0, #29500	; 0x733c
   11a04:	movt	r0, #1
   11a08:	bl	11434 <getenv@plt>
   11a0c:	movw	r1, #33200	; 0x81b0
   11a10:	cmp	r0, #0
   11a14:	movw	r8, #33189	; 0x81a5
   11a18:	movw	r9, #33191	; 0x81a7
   11a1c:	movw	sl, #29516	; 0x734c
   11a20:	movw	r7, #30328	; 0x7678
   11a24:	movt	r1, #2
   11a28:	movwne	r0, #1
   11a2c:	movt	r8, #2
   11a30:	movt	r9, #2
   11a34:	movt	sl, #1
   11a38:	movt	r7, #1
   11a3c:	str	r4, [r1]
   11a40:	str	r4, [r1, #4]
   11a44:	movw	r1, #33208	; 0x81b8
   11a48:	strb	r4, [r8]
   11a4c:	strb	r4, [r9]
   11a50:	movt	r1, #2
   11a54:	str	r4, [r1]
   11a58:	str	r4, [r1, #4]
   11a5c:	movw	r1, #33216	; 0x81c0
   11a60:	movt	r1, #2
   11a64:	str	r4, [r1]
   11a68:	str	r4, [r1, #4]
   11a6c:	movw	r1, #33224	; 0x81c8
   11a70:	movt	r1, #2
   11a74:	str	r4, [r1]
   11a78:	str	r4, [r1, #4]
   11a7c:	movw	r1, #33232	; 0x81d0
   11a80:	movt	r1, #2
   11a84:	str	r4, [r1]
   11a88:	str	r4, [r1, #4]
   11a8c:	movw	r1, #33190	; 0x81a6
   11a90:	movt	r1, #2
   11a94:	strb	r4, [r1]
   11a98:	movw	r1, #33192	; 0x81a8
   11a9c:	movt	r1, #2
   11aa0:	strb	r4, [r1]
   11aa4:	movw	r1, #33193	; 0x81a9
   11aa8:	movt	r1, #2
   11aac:	strb	r4, [r1]
   11ab0:	movw	r1, #33188	; 0x81a4
   11ab4:	movt	r1, #2
   11ab8:	strb	r0, [r1]
   11abc:	mov	r0, #0
   11ac0:	b	11ad0 <__assert_fail@plt+0x4e0>
   11ac4:	movw	r0, #33176	; 0x8198
   11ac8:	movt	r0, #2
   11acc:	ldr	r0, [r0]
   11ad0:	str	r0, [sp, #44]	; 0x2c
   11ad4:	mov	r0, r6
   11ad8:	mov	r1, r5
   11adc:	mov	r2, sl
   11ae0:	mov	r3, r7
   11ae4:	str	r4, [sp]
   11ae8:	bl	1147c <getopt_long@plt>
   11aec:	cmp	r0, #108	; 0x6c
   11af0:	bgt	11b24 <__assert_fail@plt+0x534>
   11af4:	cmp	r0, #75	; 0x4b
   11af8:	ble	11b80 <__assert_fail@plt+0x590>
   11afc:	cmp	r0, #76	; 0x4c
   11b00:	beq	11b5c <__assert_fail@plt+0x56c>
   11b04:	cmp	r0, #99	; 0x63
   11b08:	mov	r1, r8
   11b0c:	beq	11b64 <__assert_fail@plt+0x574>
   11b10:	cmp	r0, #108	; 0x6c
   11b14:	bne	12498 <__assert_fail@plt+0xea8>
   11b18:	movw	r1, #33192	; 0x81a8
   11b1c:	movt	r1, #2
   11b20:	b	11b64 <__assert_fail@plt+0x574>
   11b24:	cmp	r0, #255	; 0xff
   11b28:	bgt	11b40 <__assert_fail@plt+0x550>
   11b2c:	cmp	r0, #109	; 0x6d
   11b30:	bne	11b4c <__assert_fail@plt+0x55c>
   11b34:	movw	r1, #33190	; 0x81a6
   11b38:	movt	r1, #2
   11b3c:	b	11b64 <__assert_fail@plt+0x574>
   11b40:	cmp	r0, #256	; 0x100
   11b44:	beq	11ad4 <__assert_fail@plt+0x4e4>
   11b48:	b	11b70 <__assert_fail@plt+0x580>
   11b4c:	cmp	r0, #119	; 0x77
   11b50:	bne	12498 <__assert_fail@plt+0xea8>
   11b54:	mov	r1, r9
   11b58:	b	11b64 <__assert_fail@plt+0x574>
   11b5c:	movw	r1, #33193	; 0x81a9
   11b60:	movt	r1, #2
   11b64:	mov	r0, #1
   11b68:	strb	r0, [r1]
   11b6c:	b	11ad4 <__assert_fail@plt+0x4e4>
   11b70:	movw	r1, #257	; 0x101
   11b74:	cmp	r0, r1
   11b78:	beq	11ac4 <__assert_fail@plt+0x4d4>
   11b7c:	b	12498 <__assert_fail@plt+0xea8>
   11b80:	cmn	r0, #1
   11b84:	bne	1238c <__assert_fail@plt+0xd9c>
   11b88:	movw	r4, #33192	; 0x81a8
   11b8c:	movt	r4, #2
   11b90:	ldrb	r0, [r4]
   11b94:	cmp	r0, #0
   11b98:	bne	11bf8 <__assert_fail@plt+0x608>
   11b9c:	movw	r0, #33191	; 0x81a7
   11ba0:	movt	r0, #2
   11ba4:	ldrb	r1, [r0]
   11ba8:	cmp	r1, #0
   11bac:	bne	11bf8 <__assert_fail@plt+0x608>
   11bb0:	movw	r1, #33190	; 0x81a6
   11bb4:	movt	r1, #2
   11bb8:	ldrb	r1, [r1]
   11bbc:	cmp	r1, #0
   11bc0:	bne	11bf8 <__assert_fail@plt+0x608>
   11bc4:	movw	r1, #33189	; 0x81a5
   11bc8:	movt	r1, #2
   11bcc:	ldrb	r2, [r1]
   11bd0:	cmp	r2, #0
   11bd4:	bne	11bf8 <__assert_fail@plt+0x608>
   11bd8:	movw	r2, #33193	; 0x81a9
   11bdc:	movt	r2, #2
   11be0:	ldrb	r2, [r2]
   11be4:	cmp	r2, #0
   11be8:	moveq	r2, #1
   11bec:	strbeq	r2, [r0]
   11bf0:	strbeq	r2, [r1]
   11bf4:	strbeq	r2, [r4]
   11bf8:	movw	r7, #33152	; 0x8180
   11bfc:	ldr	r1, [sp, #44]	; 0x2c
   11c00:	movt	r7, #2
   11c04:	ldr	r0, [r7]
   11c08:	cmp	r1, #0
   11c0c:	beq	11c90 <__assert_fail@plt+0x6a0>
   11c10:	cmp	r0, r6
   11c14:	blt	12424 <__assert_fail@plt+0xe34>
   11c18:	ldr	r6, [sp, #44]	; 0x2c
   11c1c:	movw	r1, #30682	; 0x77da
   11c20:	movt	r1, #1
   11c24:	mov	r0, r6
   11c28:	bl	112f0 <strcmp@plt>
   11c2c:	cmp	r0, #0
   11c30:	beq	11cb0 <__assert_fail@plt+0x6c0>
   11c34:	movw	r1, #29703	; 0x7407
   11c38:	mov	r0, r6
   11c3c:	movt	r1, #1
   11c40:	bl	11584 <fopen64@plt>
   11c44:	mov	r5, r0
   11c48:	cmp	r0, #0
   11c4c:	bne	11cbc <__assert_fail@plt+0x6cc>
   11c50:	bl	114dc <__errno_location@plt>
   11c54:	ldr	r4, [r0]
   11c58:	movw	r1, #29632	; 0x73c0
   11c5c:	mov	r0, #0
   11c60:	mov	r2, #5
   11c64:	movt	r1, #1
   11c68:	bl	11380 <dcgettext@plt>
   11c6c:	mov	r5, r0
   11c70:	mov	r0, #4
   11c74:	mov	r1, r6
   11c78:	bl	151a0 <__assert_fail@plt+0x3bb0>
   11c7c:	mov	r3, r0
   11c80:	mov	r0, #1
   11c84:	mov	r1, r4
   11c88:	mov	r2, r5
   11c8c:	bl	1141c <error@plt>
   11c90:	movw	r7, #33240	; 0x81d8
   11c94:	subs	r9, r6, r0
   11c98:	movt	r7, #2
   11c9c:	movle	r9, #1
   11ca0:	addgt	r7, r5, r0, lsl #2
   11ca4:	mov	r0, r7
   11ca8:	bl	133e8 <__assert_fail@plt+0x1df8>
   11cac:	b	11d34 <__assert_fail@plt+0x744>
   11cb0:	movw	r0, #33168	; 0x8190
   11cb4:	movt	r0, #2
   11cb8:	ldr	r5, [r0]
   11cbc:	mov	r0, r5
   11cc0:	bl	11530 <fileno@plt>
   11cc4:	add	r1, sp, #56	; 0x38
   11cc8:	bl	16f18 <_obstack_memory_used@@Base+0x704>
   11ccc:	cmp	r0, #0
   11cd0:	bne	11d24 <__assert_fail@plt+0x734>
   11cd4:	ldr	r0, [sp, #72]	; 0x48
   11cd8:	and	r0, r0, #61440	; 0xf000
   11cdc:	cmp	r0, #32768	; 0x8000
   11ce0:	bne	11d24 <__assert_fail@plt+0x734>
   11ce4:	ldr	r0, [sp, #104]	; 0x68
   11ce8:	ldr	r1, [sp, #108]	; 0x6c
   11cec:	bl	16cb8 <_obstack_memory_used@@Base+0x4a4>
   11cf0:	vldr	d9, [pc, #1000]	; 120e0 <__assert_fail@plt+0xaf0>
   11cf4:	vmov	d8, r0, r1
   11cf8:	bl	13a48 <__assert_fail@plt+0x2458>
   11cfc:	vmov.f64	d10, #96	; 0x3f000000  0.5
   11d00:	vmul.f64	d16, d0, d10
   11d04:	vcmpe.f64	d16, d9
   11d08:	vmrs	APSR_nzcv, fpscr
   11d0c:	bgt	11d18 <__assert_fail@plt+0x728>
   11d10:	bl	13a48 <__assert_fail@plt+0x2458>
   11d14:	vmul.f64	d9, d0, d10
   11d18:	vcmpe.f64	d9, d8
   11d1c:	vmrs	APSR_nzcv, fpscr
   11d20:	bge	12344 <__assert_fail@plt+0xd54>
   11d24:	mov	r0, r5
   11d28:	bl	1341c <__assert_fail@plt+0x1e2c>
   11d2c:	mov	r7, #0
   11d30:	mov	r9, #0
   11d34:	mov	r1, #0
   11d38:	cmp	r0, #0
   11d3c:	beq	12400 <__assert_fail@plt+0xe10>
   11d40:	str	r0, [sp, #48]	; 0x30
   11d44:	cmp	r9, #0
   11d48:	mov	r0, r9
   11d4c:	str	r1, [sp, #40]	; 0x28
   11d50:	mov	r1, #112	; 0x70
   11d54:	movweq	r0, #1
   11d58:	bl	15f30 <__assert_fail@plt+0x4940>
   11d5c:	cmp	r9, #0
   11d60:	str	r0, [sp, #52]	; 0x34
   11d64:	beq	11dbc <__assert_fail@plt+0x7cc>
   11d68:	cmp	r9, #1
   11d6c:	bne	11dcc <__assert_fail@plt+0x7dc>
   11d70:	movw	r1, #33191	; 0x81a7
   11d74:	ldrb	r0, [r4]
   11d78:	movt	r1, #2
   11d7c:	ldrb	r1, [r1]
   11d80:	add	r0, r1, r0
   11d84:	movw	r1, #33190	; 0x81a6
   11d88:	movt	r1, #2
   11d8c:	ldrb	r1, [r1]
   11d90:	add	r0, r0, r1
   11d94:	movw	r1, #33189	; 0x81a5
   11d98:	movt	r1, #2
   11d9c:	ldrb	r1, [r1]
   11da0:	add	r0, r0, r1
   11da4:	movw	r1, #33193	; 0x81a9
   11da8:	movt	r1, #2
   11dac:	ldrb	r1, [r1]
   11db0:	add	r0, r0, r1
   11db4:	cmp	r0, #1
   11db8:	bne	11dcc <__assert_fail@plt+0x7dc>
   11dbc:	ldr	r1, [sp, #52]	; 0x34
   11dc0:	mov	r0, #1
   11dc4:	str	r0, [r1]
   11dc8:	b	11e30 <__assert_fail@plt+0x840>
   11dcc:	ldr	r0, [sp, #52]	; 0x34
   11dd0:	movw	r8, #30682	; 0x77da
   11dd4:	mov	r5, r9
   11dd8:	movt	r8, #1
   11ddc:	add	r6, r0, #8
   11de0:	ldr	r4, [r7]
   11de4:	cmp	r4, #0
   11de8:	beq	11e10 <__assert_fail@plt+0x820>
   11dec:	mov	r0, r4
   11df0:	mov	r1, r8
   11df4:	bl	112f0 <strcmp@plt>
   11df8:	cmp	r0, #0
   11dfc:	beq	11e10 <__assert_fail@plt+0x820>
   11e00:	mov	r0, r4
   11e04:	mov	r1, r6
   11e08:	bl	16f08 <_obstack_memory_used@@Base+0x6f4>
   11e0c:	b	11e1c <__assert_fail@plt+0x82c>
   11e10:	mov	r0, #0
   11e14:	mov	r1, r6
   11e18:	bl	16f18 <_obstack_memory_used@@Base+0x704>
   11e1c:	str	r0, [r6, #-8]
   11e20:	add	r7, r7, #4
   11e24:	subs	r5, r5, #1
   11e28:	add	r6, r6, #112	; 0x70
   11e2c:	bne	11de0 <__assert_fail@plt+0x7f0>
   11e30:	mov	r4, #1
   11e34:	cmp	r9, #0
   11e38:	mov	r5, #1
   11e3c:	beq	11ef4 <__assert_fail@plt+0x904>
   11e40:	ldr	r0, [sp, #52]	; 0x34
   11e44:	mov	r5, #1
   11e48:	ldr	r2, [r0]
   11e4c:	cmp	r2, #0
   11e50:	bgt	11ef4 <__assert_fail@plt+0x904>
   11e54:	ldr	r1, [sp, #52]	; 0x34
   11e58:	sub	r0, r9, #1
   11e5c:	mov	r7, #0
   11e60:	mov	r8, #1
   11e64:	mov	r6, #0
   11e68:	add	r1, r1, #112	; 0x70
   11e6c:	b	11e78 <__assert_fail@plt+0x888>
   11e70:	ldr	r2, [r1], #112	; 0x70
   11e74:	sub	r0, r0, #1
   11e78:	cmp	r2, #0
   11e7c:	bne	11ea4 <__assert_fail@plt+0x8b4>
   11e80:	ldr	r2, [r1, #-88]	; 0xffffffa8
   11e84:	and	r2, r2, #61440	; 0xf000
   11e88:	cmp	r2, #32768	; 0x8000
   11e8c:	bne	11ea0 <__assert_fail@plt+0x8b0>
   11e90:	ldrd	r2, [r1, #-56]	; 0xffffffc8
   11e94:	adds	r7, r2, r7
   11e98:	adc	r6, r3, r6
   11e9c:	b	11ea4 <__assert_fail@plt+0x8b4>
   11ea0:	mov	r8, #7
   11ea4:	cmp	r0, #0
   11ea8:	bne	11e70 <__assert_fail@plt+0x880>
   11eac:	subs	r0, r7, #10
   11eb0:	mov	r5, #1
   11eb4:	sbcs	r0, r6, #0
   11eb8:	bcc	11eec <__assert_fail@plt+0x8fc>
   11ebc:	mov	r5, #1
   11ec0:	mov	r0, r7
   11ec4:	mov	r1, r6
   11ec8:	mov	r2, #10
   11ecc:	mov	r3, #0
   11ed0:	bl	16d18 <_obstack_memory_used@@Base+0x504>
   11ed4:	rsbs	r2, r7, #99	; 0x63
   11ed8:	add	r5, r5, #1
   11edc:	mov	r7, r0
   11ee0:	rscs	r2, r6, #0
   11ee4:	mov	r6, r1
   11ee8:	bcc	11ec0 <__assert_fail@plt+0x8d0>
   11eec:	cmp	r5, r8
   11ef0:	movlt	r5, r8
   11ef4:	movw	r0, #33244	; 0x81dc
   11ef8:	add	r1, sp, #56	; 0x38
   11efc:	movt	r0, #2
   11f00:	str	r5, [r0]
   11f04:	ldr	r5, [sp, #48]	; 0x30
   11f08:	mov	r0, r5
   11f0c:	bl	13450 <__assert_fail@plt+0x1e60>
   11f10:	ldr	r6, [sp, #44]	; 0x2c
   11f14:	cmp	r0, #0
   11f18:	beq	1218c <__assert_fail@plt+0xb9c>
   11f1c:	mov	sl, r0
   11f20:	mov	r8, #1
   11f24:	mov	r7, #0
   11f28:	cmp	r6, #0
   11f2c:	mov	r0, #0
   11f30:	beq	11fac <__assert_fail@plt+0x9bc>
   11f34:	movw	r1, #30682	; 0x77da
   11f38:	mov	r0, r6
   11f3c:	movt	r1, #1
   11f40:	bl	112f0 <strcmp@plt>
   11f44:	cmp	r0, #0
   11f48:	mov	r0, #0
   11f4c:	bne	11fac <__assert_fail@plt+0x9bc>
   11f50:	movw	r1, #30682	; 0x77da
   11f54:	mov	r0, sl
   11f58:	movt	r1, #1
   11f5c:	bl	112f0 <strcmp@plt>
   11f60:	cmp	r0, #0
   11f64:	mov	r0, #0
   11f68:	bne	11fac <__assert_fail@plt+0x9bc>
   11f6c:	movw	r1, #29777	; 0x7451
   11f70:	mov	r0, #0
   11f74:	mov	r2, #5
   11f78:	movt	r1, #1
   11f7c:	bl	11380 <dcgettext@plt>
   11f80:	mov	r5, r0
   11f84:	mov	r0, #4
   11f88:	mov	r1, sl
   11f8c:	bl	151a0 <__assert_fail@plt+0x3bb0>
   11f90:	mov	r2, r5
   11f94:	ldr	r5, [sp, #48]	; 0x30
   11f98:	mov	r3, r0
   11f9c:	mov	r0, #0
   11fa0:	mov	r1, #0
   11fa4:	bl	1141c <error@plt>
   11fa8:	mov	r0, #1
   11fac:	ldrb	r1, [sl]
   11fb0:	cmp	r1, #0
   11fb4:	beq	12078 <__assert_fail@plt+0xa88>
   11fb8:	mov	r4, #0
   11fbc:	cmp	r0, #0
   11fc0:	bne	12154 <__assert_fail@plt+0xb64>
   11fc4:	ldr	r1, [sp, #52]	; 0x34
   11fc8:	cmp	r9, #0
   11fcc:	mov	r0, r9
   11fd0:	movne	r0, r7
   11fd4:	rsb	r0, r0, r0, lsl #3
   11fd8:	add	r5, r1, r0, lsl #4
   11fdc:	movw	r1, #30682	; 0x77da
   11fe0:	mov	r0, sl
   11fe4:	movt	r1, #1
   11fe8:	bl	112f0 <strcmp@plt>
   11fec:	cmp	r0, #0
   11ff0:	beq	1211c <__assert_fail@plt+0xb2c>
   11ff4:	mov	r0, sl
   11ff8:	mov	r1, #0
   11ffc:	bl	11428 <open64@plt>
   12000:	cmn	r0, #1
   12004:	beq	1203c <__assert_fail@plt+0xa4c>
   12008:	mov	r6, r0
   1200c:	mov	r0, #0
   12010:	mov	r1, sl
   12014:	mov	r2, r5
   12018:	str	r0, [sp]
   1201c:	str	r0, [sp, #4]
   12020:	mov	r0, r6
   12024:	bl	126d8 <__assert_fail@plt+0x10e8>
   12028:	mov	r5, r0
   1202c:	mov	r0, r6
   12030:	bl	115d8 <close@plt>
   12034:	cmp	r0, #0
   12038:	beq	12070 <__assert_fail@plt+0xa80>
   1203c:	bl	114dc <__errno_location@plt>
   12040:	ldr	r6, [r0]
   12044:	mov	r0, #0
   12048:	mov	r1, #3
   1204c:	mov	r2, sl
   12050:	mov	r5, #0
   12054:	bl	15344 <__assert_fail@plt+0x3d54>
   12058:	movw	r2, #30580	; 0x7774
   1205c:	mov	r3, r0
   12060:	mov	r0, #0
   12064:	mov	r1, r6
   12068:	movt	r2, #1
   1206c:	bl	1141c <error@plt>
   12070:	ldr	r6, [sp, #44]	; 0x2c
   12074:	b	1214c <__assert_fail@plt+0xb5c>
   12078:	cmp	r6, #0
   1207c:	beq	120e8 <__assert_fail@plt+0xaf8>
   12080:	mov	r0, r5
   12084:	bl	134fc <__assert_fail@plt+0x1f0c>
   12088:	mov	r5, r0
   1208c:	mov	r0, #0
   12090:	mov	r1, #3
   12094:	mov	r2, r6
   12098:	mov	r4, #0
   1209c:	bl	15344 <__assert_fail@plt+0x3d54>
   120a0:	movw	r1, #29840	; 0x7490
   120a4:	mov	r6, r0
   120a8:	mov	r0, #0
   120ac:	mov	r2, #5
   120b0:	movt	r1, #1
   120b4:	bl	11380 <dcgettext@plt>
   120b8:	str	r5, [sp]
   120bc:	mov	r3, r6
   120c0:	ldr	r5, [sp, #48]	; 0x30
   120c4:	ldr	r6, [sp, #44]	; 0x2c
   120c8:	movw	r2, #29870	; 0x74ae
   120cc:	str	r0, [sp, #4]
   120d0:	mov	r0, #0
   120d4:	mov	r1, #0
   120d8:	movt	r2, #1
   120dc:	b	12114 <__assert_fail@plt+0xb24>
   120e0:	andeq	r0, r0, r0
   120e4:	cmnmi	r4, r0
   120e8:	movw	r1, #29840	; 0x7490
   120ec:	mov	r0, #0
   120f0:	mov	r2, #5
   120f4:	mov	r4, #0
   120f8:	movt	r1, #1
   120fc:	bl	11380 <dcgettext@plt>
   12100:	movw	r2, #30580	; 0x7774
   12104:	mov	r3, r0
   12108:	mov	r0, #0
   1210c:	mov	r1, #0
   12110:	movt	r2, #1
   12114:	bl	1141c <error@plt>
   12118:	b	12154 <__assert_fail@plt+0xb64>
   1211c:	movw	r1, #33248	; 0x81e0
   12120:	mov	r0, #1
   12124:	mov	r2, r5
   12128:	movt	r1, #2
   1212c:	strb	r0, [r1]
   12130:	mvn	r0, #0
   12134:	mov	r1, sl
   12138:	str	r0, [sp]
   1213c:	str	r0, [sp, #4]
   12140:	mov	r0, #0
   12144:	bl	126d8 <__assert_fail@plt+0x10e8>
   12148:	mov	r5, r0
   1214c:	and	r4, r8, r5
   12150:	ldr	r5, [sp, #48]	; 0x30
   12154:	cmp	r9, #0
   12158:	ldreq	r0, [sp, #52]	; 0x34
   1215c:	moveq	r1, #1
   12160:	streq	r1, [r0]
   12164:	mov	r0, r5
   12168:	add	r1, sp, #56	; 0x38
   1216c:	bl	13450 <__assert_fail@plt+0x1e60>
   12170:	cmp	r4, #0
   12174:	mov	sl, r0
   12178:	add	r7, r7, #1
   1217c:	movwne	r4, #1
   12180:	cmp	r0, #0
   12184:	mov	r8, r4
   12188:	bne	11f28 <__assert_fail@plt+0x938>
   1218c:	ldr	r0, [sp, #56]	; 0x38
   12190:	cmp	r0, #2
   12194:	beq	122ec <__assert_fail@plt+0xcfc>
   12198:	cmp	r0, #4
   1219c:	bne	123f8 <__assert_fail@plt+0xe08>
   121a0:	bl	114dc <__errno_location@plt>
   121a4:	ldr	r6, [r0]
   121a8:	movw	r1, #29690	; 0x73fa
   121ac:	mov	r0, #0
   121b0:	mov	r2, #5
   121b4:	mov	r4, #0
   121b8:	movt	r1, #1
   121bc:	bl	11380 <dcgettext@plt>
   121c0:	ldr	r2, [sp, #44]	; 0x2c
   121c4:	mov	r5, r0
   121c8:	mov	r0, #0
   121cc:	mov	r1, #3
   121d0:	bl	15344 <__assert_fail@plt+0x3d54>
   121d4:	mov	r3, r0
   121d8:	mov	r0, #0
   121dc:	mov	r1, r6
   121e0:	mov	r2, r5
   121e4:	bl	1141c <error@plt>
   121e8:	ldr	r5, [sp, #48]	; 0x30
   121ec:	ldr	r6, [sp, #40]	; 0x28
   121f0:	cmp	r6, #0
   121f4:	beq	12200 <__assert_fail@plt+0xc10>
   121f8:	add	r0, sp, #164	; 0xa4
   121fc:	bl	15690 <__assert_fail@plt+0x40a0>
   12200:	mov	r0, r5
   12204:	bl	134fc <__assert_fail@plt+0x1f0c>
   12208:	cmp	r0, #2
   1220c:	bcc	122a4 <__assert_fail@plt+0xcb4>
   12210:	movw	r0, #33224	; 0x81c8
   12214:	mov	r2, #5
   12218:	movt	r0, #2
   1221c:	ldr	r1, [r0]
   12220:	ldr	r0, [r0, #4]
   12224:	str	r0, [sp, #44]	; 0x2c
   12228:	movw	r0, #33232	; 0x81d0
   1222c:	str	r1, [sp, #40]	; 0x28
   12230:	movt	r0, #2
   12234:	ldr	r1, [r0]
   12238:	ldr	r0, [r0, #4]
   1223c:	str	r0, [sp, #36]	; 0x24
   12240:	movw	r0, #33216	; 0x81c0
   12244:	str	r1, [sp, #32]
   12248:	movw	r1, #29881	; 0x74b9
   1224c:	movt	r0, #2
   12250:	movt	r1, #1
   12254:	ldm	r0, {r5, r7}
   12258:	movw	r0, #33208	; 0x81b8
   1225c:	movt	r0, #2
   12260:	ldm	r0, {r6, r9}
   12264:	movw	r0, #33200	; 0x81b0
   12268:	movt	r0, #2
   1226c:	ldm	r0, {r8, sl}
   12270:	mov	r0, #0
   12274:	bl	11380 <dcgettext@plt>
   12278:	str	r5, [sp]
   1227c:	str	r7, [sp, #4]
   12280:	str	r6, [sp, #8]
   12284:	str	r9, [sp, #12]
   12288:	str	r8, [sp, #16]
   1228c:	str	sl, [sp, #20]
   12290:	str	r0, [sp, #24]
   12294:	add	r3, sp, #32
   12298:	ldr	r5, [sp, #48]	; 0x30
   1229c:	ldm	r3, {r0, r1, r2, r3}
   122a0:	bl	124f0 <__assert_fail@plt+0xf00>
   122a4:	mov	r0, r5
   122a8:	bl	13520 <__assert_fail@plt+0x1f30>
   122ac:	ldr	r0, [sp, #52]	; 0x34
   122b0:	bl	1378c <__assert_fail@plt+0x219c>
   122b4:	movw	r0, #33248	; 0x81e0
   122b8:	movt	r0, #2
   122bc:	ldrb	r0, [r0]
   122c0:	cmp	r0, #1
   122c4:	bne	122d8 <__assert_fail@plt+0xce8>
   122c8:	mov	r0, #0
   122cc:	bl	115d8 <close@plt>
   122d0:	cmp	r0, #0
   122d4:	bne	124a0 <__assert_fail@plt+0xeb0>
   122d8:	eor	r0, r4, #1
   122dc:	sub	sp, fp, #56	; 0x38
   122e0:	vpop	{d8-d10}
   122e4:	add	sp, sp, #4
   122e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122ec:	cmp	r6, #0
   122f0:	bne	121ec <__assert_fail@plt+0xbfc>
   122f4:	ldr	r6, [sp, #40]	; 0x28
   122f8:	eors	r0, r4, #1
   122fc:	bne	121f0 <__assert_fail@plt+0xc00>
   12300:	mov	r0, r5
   12304:	bl	134fc <__assert_fail@plt+0x1f0c>
   12308:	cmp	r0, #0
   1230c:	bne	121f0 <__assert_fail@plt+0xc00>
   12310:	movw	r0, #33248	; 0x81e0
   12314:	ldr	r2, [sp, #52]	; 0x34
   12318:	mov	r1, #1
   1231c:	movt	r0, #2
   12320:	strb	r1, [r0]
   12324:	mvn	r0, #0
   12328:	mov	r1, #0
   1232c:	str	r0, [sp]
   12330:	str	r0, [sp, #4]
   12334:	mov	r0, #0
   12338:	bl	126d8 <__assert_fail@plt+0x10e8>
   1233c:	and	r4, r4, r0
   12340:	b	121f0 <__assert_fail@plt+0xc00>
   12344:	add	r6, sp, #164	; 0xa4
   12348:	mov	r0, r6
   1234c:	bl	15610 <__assert_fail@plt+0x4020>
   12350:	mov	r0, r5
   12354:	mov	r1, r6
   12358:	bl	156c4 <__assert_fail@plt+0x40d4>
   1235c:	cmp	r0, #0
   12360:	beq	124b8 <__assert_fail@plt+0xec8>
   12364:	mov	r0, r5
   12368:	bl	13694 <__assert_fail@plt+0x20a4>
   1236c:	cmp	r0, #0
   12370:	bne	124b8 <__assert_fail@plt+0xec8>
   12374:	ldr	r7, [sp, #168]	; 0xa8
   12378:	ldr	r9, [sp, #164]	; 0xa4
   1237c:	mov	r0, r7
   12380:	bl	133e8 <__assert_fail@plt+0x1df8>
   12384:	mov	r1, #1
   12388:	b	11d38 <__assert_fail@plt+0x748>
   1238c:	cmn	r0, #3
   12390:	bne	123e8 <__assert_fail@plt+0xdf8>
   12394:	movw	r0, #33064	; 0x8128
   12398:	movw	r2, #29547	; 0x736b
   1239c:	mov	r1, #0
   123a0:	movw	r7, #29536	; 0x7360
   123a4:	movt	r0, #2
   123a8:	movt	r2, #1
   123ac:	str	r1, [sp, #8]
   123b0:	movw	r1, #29473	; 0x7321
   123b4:	movt	r7, #1
   123b8:	ldr	r3, [r0]
   123bc:	movw	r0, #33172	; 0x8194
   123c0:	str	r2, [sp, #4]
   123c4:	movw	r2, #29522	; 0x7352
   123c8:	movt	r1, #1
   123cc:	str	r7, [sp]
   123d0:	movt	r0, #2
   123d4:	movt	r2, #1
   123d8:	ldr	r0, [r0]
   123dc:	bl	15d58 <__assert_fail@plt+0x4768>
   123e0:	mov	r0, #0
   123e4:	bl	11494 <exit@plt>
   123e8:	cmn	r0, #2
   123ec:	bne	12498 <__assert_fail@plt+0xea8>
   123f0:	mov	r0, #0
   123f4:	bl	116f0 <__assert_fail@plt+0x100>
   123f8:	cmp	r0, #3
   123fc:	bne	12404 <__assert_fail@plt+0xe14>
   12400:	bl	162b0 <__assert_fail@plt+0x4cc0>
   12404:	movw	r0, #29705	; 0x7409
   12408:	movw	r1, #29745	; 0x7431
   1240c:	movw	r3, #29754	; 0x743a
   12410:	movw	r2, #938	; 0x3aa
   12414:	movt	r0, #1
   12418:	movt	r1, #1
   1241c:	movt	r3, #1
   12420:	bl	115f0 <__assert_fail@plt>
   12424:	movw	r1, #29563	; 0x737b
   12428:	mov	r0, #0
   1242c:	mov	r2, #5
   12430:	movt	r1, #1
   12434:	bl	11380 <dcgettext@plt>
   12438:	mov	r4, r0
   1243c:	ldr	r0, [r7]
   12440:	ldr	r1, [r5, r0, lsl #2]
   12444:	mov	r0, #4
   12448:	bl	151a0 <__assert_fail@plt+0x3bb0>
   1244c:	mov	r3, r0
   12450:	mov	r0, #0
   12454:	mov	r1, #0
   12458:	mov	r2, r4
   1245c:	bl	1141c <error@plt>
   12460:	movw	r0, #33160	; 0x8188
   12464:	movw	r1, #29580	; 0x738c
   12468:	mov	r2, #5
   1246c:	movt	r0, #2
   12470:	movt	r1, #1
   12474:	ldr	r4, [r0]
   12478:	mov	r0, #0
   1247c:	bl	11380 <dcgettext@plt>
   12480:	movw	r2, #30872	; 0x7898
   12484:	mov	r3, r0
   12488:	mov	r0, r4
   1248c:	mov	r1, #1
   12490:	movt	r2, #1
   12494:	bl	1153c <__fprintf_chk@plt>
   12498:	mov	r0, #1
   1249c:	bl	116f0 <__assert_fail@plt+0x100>
   124a0:	bl	114dc <__errno_location@plt>
   124a4:	ldr	r1, [r0]
   124a8:	movw	r2, #30682	; 0x77da
   124ac:	mov	r0, #1
   124b0:	movt	r2, #1
   124b4:	bl	1141c <error@plt>
   124b8:	movw	r1, #29659	; 0x73db
   124bc:	mov	r0, #0
   124c0:	mov	r2, #5
   124c4:	movt	r1, #1
   124c8:	bl	11380 <dcgettext@plt>
   124cc:	ldr	r1, [sp, #44]	; 0x2c
   124d0:	mov	r4, r0
   124d4:	mov	r0, #4
   124d8:	bl	151a0 <__assert_fail@plt+0x3bb0>
   124dc:	mov	r3, r0
   124e0:	mov	r0, #1
   124e4:	mov	r1, #0
   124e8:	mov	r2, r4
   124ec:	bl	1141c <error@plt>
   124f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   124f4:	add	fp, sp, #24
   124f8:	sub	sp, sp, #24
   124fc:	mov	r7, r2
   12500:	movw	r2, #33192	; 0x81a8
   12504:	movw	r8, #30544	; 0x7750
   12508:	mov	r6, r3
   1250c:	movt	r2, #2
   12510:	movt	r8, #1
   12514:	ldrb	r2, [r2]
   12518:	cmp	r2, #1
   1251c:	bne	12554 <__assert_fail@plt+0xf64>
   12520:	movw	r2, #33244	; 0x81dc
   12524:	movt	r2, #2
   12528:	ldr	r4, [r2]
   1252c:	add	r2, sp, #3
   12530:	bl	13858 <__assert_fail@plt+0x2268>
   12534:	movw	r5, #30544	; 0x7750
   12538:	mov	r3, r0
   1253c:	mov	r0, #1
   12540:	mov	r2, r4
   12544:	movt	r5, #1
   12548:	add	r1, r5, #1
   1254c:	bl	11524 <__printf_chk@plt>
   12550:	b	12558 <__assert_fail@plt+0xf68>
   12554:	add	r5, r8, #1
   12558:	movw	r0, #33191	; 0x81a7
   1255c:	movt	r0, #2
   12560:	ldrb	r0, [r0]
   12564:	cmp	r0, #1
   12568:	bne	125a4 <__assert_fail@plt+0xfb4>
   1256c:	movw	r0, #33244	; 0x81dc
   12570:	add	r2, sp, #3
   12574:	mov	r1, r6
   12578:	movt	r0, #2
   1257c:	ldr	r4, [r0]
   12580:	mov	r0, r7
   12584:	bl	13858 <__assert_fail@plt+0x2268>
   12588:	mov	r3, r0
   1258c:	mov	r0, #1
   12590:	mov	r1, r5
   12594:	mov	r2, r4
   12598:	bl	11524 <__printf_chk@plt>
   1259c:	movw	r5, #30544	; 0x7750
   125a0:	movt	r5, #1
   125a4:	movw	r0, #33190	; 0x81a6
   125a8:	movt	r0, #2
   125ac:	ldrb	r0, [r0]
   125b0:	cmp	r0, #1
   125b4:	bne	125f0 <__assert_fail@plt+0x1000>
   125b8:	movw	r2, #33244	; 0x81dc
   125bc:	ldr	r1, [fp, #12]
   125c0:	ldr	r0, [fp, #8]
   125c4:	movt	r2, #2
   125c8:	ldr	r4, [r2]
   125cc:	add	r2, sp, #3
   125d0:	bl	13858 <__assert_fail@plt+0x2268>
   125d4:	mov	r3, r0
   125d8:	mov	r0, #1
   125dc:	mov	r1, r5
   125e0:	mov	r2, r4
   125e4:	bl	11524 <__printf_chk@plt>
   125e8:	movw	r5, #30544	; 0x7750
   125ec:	movt	r5, #1
   125f0:	movw	r0, #33189	; 0x81a5
   125f4:	movt	r0, #2
   125f8:	ldrb	r0, [r0]
   125fc:	cmp	r0, #1
   12600:	bne	12638 <__assert_fail@plt+0x1048>
   12604:	movw	r2, #33244	; 0x81dc
   12608:	ldr	r1, [fp, #20]
   1260c:	ldr	r0, [fp, #16]
   12610:	movt	r2, #2
   12614:	ldr	r4, [r2]
   12618:	add	r2, sp, #3
   1261c:	bl	13858 <__assert_fail@plt+0x2268>
   12620:	mov	r3, r0
   12624:	mov	r0, #1
   12628:	mov	r1, r5
   1262c:	mov	r2, r4
   12630:	bl	11524 <__printf_chk@plt>
   12634:	b	1263c <__assert_fail@plt+0x104c>
   12638:	mov	r8, r5
   1263c:	movw	r0, #33193	; 0x81a9
   12640:	ldr	r5, [fp, #32]
   12644:	movt	r0, #2
   12648:	ldrb	r0, [r0]
   1264c:	cmp	r0, #1
   12650:	bne	12684 <__assert_fail@plt+0x1094>
   12654:	movw	r2, #33244	; 0x81dc
   12658:	ldr	r1, [fp, #28]
   1265c:	ldr	r0, [fp, #24]
   12660:	movt	r2, #2
   12664:	ldr	r4, [r2]
   12668:	add	r2, sp, #3
   1266c:	bl	13858 <__assert_fail@plt+0x2268>
   12670:	mov	r3, r0
   12674:	mov	r0, #1
   12678:	mov	r1, r8
   1267c:	mov	r2, r4
   12680:	bl	11524 <__printf_chk@plt>
   12684:	cmp	r5, #0
   12688:	beq	126c8 <__assert_fail@plt+0x10d8>
   1268c:	mov	r0, r5
   12690:	mov	r1, #10
   12694:	bl	114c4 <strchr@plt>
   12698:	cmp	r0, #0
   1269c:	beq	126b4 <__assert_fail@plt+0x10c4>
   126a0:	mov	r0, #0
   126a4:	mov	r1, #3
   126a8:	mov	r2, r5
   126ac:	bl	15344 <__assert_fail@plt+0x3d54>
   126b0:	mov	r5, r0
   126b4:	movw	r1, #30579	; 0x7773
   126b8:	mov	r0, #1
   126bc:	mov	r2, r5
   126c0:	movt	r1, #1
   126c4:	bl	11524 <__printf_chk@plt>
   126c8:	mov	r0, #10
   126cc:	bl	115e4 <putchar_unlocked@plt>
   126d0:	sub	sp, fp, #24
   126d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   126d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126dc:	add	fp, sp, #28
   126e0:	sub	sp, sp, #116	; 0x74
   126e4:	sub	sp, sp, #16384	; 0x4000
   126e8:	str	r0, [sp, #48]	; 0x30
   126ec:	mov	r9, r2
   126f0:	mov	r4, r1
   126f4:	cmp	r1, #0
   126f8:	mov	r0, r1
   126fc:	bne	12714 <__assert_fail@plt+0x1124>
   12700:	movw	r1, #30313	; 0x7669
   12704:	mov	r0, #0
   12708:	mov	r2, #5
   1270c:	movt	r1, #1
   12710:	bl	11380 <dcgettext@plt>
   12714:	str	r0, [sp, #32]
   12718:	bl	113ec <__ctype_get_mb_cur_max@plt>
   1271c:	movw	r3, #33190	; 0x81a6
   12720:	cmp	r0, #1
   12724:	mov	r2, #0
   12728:	movw	r7, #33192	; 0x81a8
   1272c:	mov	r1, #0
   12730:	movt	r3, #2
   12734:	movwhi	r2, #1
   12738:	cmp	r0, #2
   1273c:	mov	r0, #0
   12740:	movt	r7, #2
   12744:	ldrb	r3, [r3]
   12748:	movwcc	r0, #1
   1274c:	and	r8, r2, r3
   12750:	movw	r2, #33189	; 0x81a5
   12754:	and	r0, r3, r0
   12758:	movt	r2, #2
   1275c:	ldrb	r2, [r2]
   12760:	orr	r0, r2, r0
   12764:	movw	r2, #33191	; 0x81a7
   12768:	eor	r0, r0, #1
   1276c:	movt	r2, #2
   12770:	orr	r6, r8, r0
   12774:	movw	r0, #33193	; 0x81a9
   12778:	ldrb	r2, [r2]
   1277c:	movt	r0, #2
   12780:	tst	r6, #1
   12784:	ldrb	r0, [r0]
   12788:	orr	r5, r2, r0
   1278c:	ldrbeq	r0, [r7]
   12790:	cmpeq	r0, #0
   12794:	beq	127c4 <__assert_fail@plt+0x11d4>
   12798:	mov	r0, #2
   1279c:	mov	r1, #0
   127a0:	mov	r2, #0
   127a4:	mov	r3, #0
   127a8:	str	r0, [sp, #8]
   127ac:	ldr	r0, [sp, #48]	; 0x30
   127b0:	str	r1, [sp]
   127b4:	str	r1, [sp, #4]
   127b8:	bl	13654 <__assert_fail@plt+0x2064>
   127bc:	ldrb	r1, [r7]
   127c0:	b	127cc <__assert_fail@plt+0x11dc>
   127c4:	tst	r5, #1
   127c8:	bne	12798 <__assert_fail@plt+0x11a8>
   127cc:	orr	r0, r5, r1
   127d0:	str	r4, [sp, #40]	; 0x28
   127d4:	str	r8, [sp, #36]	; 0x24
   127d8:	orr	r0, r6, r0
   127dc:	tst	r0, #1
   127e0:	beq	12bb0 <__assert_fail@plt+0x15c0>
   127e4:	orr	r0, r8, r5
   127e8:	tst	r0, #1
   127ec:	beq	12c74 <__assert_fail@plt+0x1684>
   127f0:	bl	113ec <__ctype_get_mb_cur_max@plt>
   127f4:	cmp	r0, #1
   127f8:	bls	12e48 <__assert_fail@plt+0x1858>
   127fc:	mov	r0, #0
   12800:	mov	r1, #0
   12804:	mov	r4, #0
   12808:	mov	r8, #0
   1280c:	mov	r7, #0
   12810:	str	r0, [sp, #100]	; 0x64
   12814:	str	r0, [sp, #96]	; 0x60
   12818:	mov	r0, #0
   1281c:	str	r1, [sp, #44]	; 0x2c
   12820:	str	r0, [sp, #52]	; 0x34
   12824:	mov	r0, #0
   12828:	str	r0, [sp, #60]	; 0x3c
   1282c:	mov	r0, #0
   12830:	str	r0, [sp, #56]	; 0x38
   12834:	mov	r0, #0
   12838:	str	r0, [sp, #80]	; 0x50
   1283c:	mov	r0, #0
   12840:	str	r0, [sp, #88]	; 0x58
   12844:	mov	r0, #0
   12848:	str	r0, [sp, #76]	; 0x4c
   1284c:	mov	r0, #0
   12850:	str	r0, [sp, #72]	; 0x48
   12854:	mov	r0, #0
   12858:	str	r0, [sp, #84]	; 0x54
   1285c:	mov	r0, #0
   12860:	str	r0, [sp, #68]	; 0x44
   12864:	mov	r0, #0
   12868:	str	r0, [sp, #64]	; 0x40
   1286c:	mov	r5, #0
   12870:	add	r0, sp, #104	; 0x68
   12874:	rsb	r2, r5, #16384	; 0x4000
   12878:	add	r1, r0, r5
   1287c:	ldr	r0, [sp, #48]	; 0x30
   12880:	bl	15940 <__assert_fail@plt+0x4350>
   12884:	cmp	r0, #0
   12888:	beq	130d8 <__assert_fail@plt+0x1ae8>
   1288c:	cmn	r0, #1
   12890:	beq	130e4 <__assert_fail@plt+0x1af4>
   12894:	ldr	r1, [sp, #44]	; 0x2c
   12898:	add	r9, r0, r5
   1289c:	add	sl, sp, #104	; 0x68
   128a0:	adds	r1, r1, r0
   128a4:	ldr	r0, [sp, #52]	; 0x34
   128a8:	str	r1, [sp, #44]	; 0x2c
   128ac:	adc	r0, r0, #0
   128b0:	str	r0, [sp, #52]	; 0x34
   128b4:	b	129b8 <__assert_fail@plt+0x13c8>
   128b8:	cmp	r1, #0
   128bc:	beq	12950 <__assert_fail@plt+0x1360>
   128c0:	bl	113c8 <iswprint@plt>
   128c4:	cmp	r0, #0
   128c8:	beq	12b58 <__assert_fail@plt+0x1568>
   128cc:	movw	r0, #33193	; 0x81a9
   128d0:	movt	r0, #2
   128d4:	ldrb	r0, [r0]
   128d8:	cmp	r0, #1
   128dc:	bne	12904 <__assert_fail@plt+0x1314>
   128e0:	ldr	r0, [sp, #92]	; 0x5c
   128e4:	bl	11320 <wcwidth@plt>
   128e8:	ldr	r1, [sp, #68]	; 0x44
   128ec:	bic	r0, r0, r0, asr #31
   128f0:	adds	r1, r1, r0
   128f4:	ldr	r0, [sp, #64]	; 0x40
   128f8:	str	r1, [sp, #68]	; 0x44
   128fc:	adc	r0, r0, #0
   12900:	str	r0, [sp, #64]	; 0x40
   12904:	ldr	r0, [sp, #92]	; 0x5c
   12908:	bl	114ac <iswspace@plt>
   1290c:	cmp	r0, #0
   12910:	beq	1291c <__assert_fail@plt+0x132c>
   12914:	ldr	r3, [sp, #88]	; 0x58
   12918:	b	12b2c <__assert_fail@plt+0x153c>
   1291c:	movw	r0, #33188	; 0x81a4
   12920:	movt	r0, #2
   12924:	ldrb	r0, [r0]
   12928:	cmp	r0, #0
   1292c:	bne	129b0 <__assert_fail@plt+0x13c0>
   12930:	ldr	r0, [sp, #92]	; 0x5c
   12934:	movw	r1, #8238	; 0x202e
   12938:	cmp	r0, r1
   1293c:	bgt	12994 <__assert_fail@plt+0x13a4>
   12940:	cmp	r0, #160	; 0xa0
   12944:	beq	12914 <__assert_fail@plt+0x1324>
   12948:	movw	r1, #8199	; 0x2007
   1294c:	b	129a4 <__assert_fail@plt+0x13b4>
   12950:	bl	11488 <__ctype_b_loc@plt>
   12954:	ldrb	r1, [sl]
   12958:	ldr	r0, [r0]
   1295c:	add	r0, r0, r1, lsl #1
   12960:	ldrh	r0, [r0]
   12964:	tst	r0, #16384	; 0x4000
   12968:	beq	12b58 <__assert_fail@plt+0x1568>
   1296c:	ldr	r1, [sp, #68]	; 0x44
   12970:	ldr	r3, [sp, #88]	; 0x58
   12974:	adds	r1, r1, #1
   12978:	str	r1, [sp, #68]	; 0x44
   1297c:	ldr	r1, [sp, #64]	; 0x40
   12980:	adc	r1, r1, #0
   12984:	tst	r0, #8192	; 0x2000
   12988:	str	r1, [sp, #64]	; 0x40
   1298c:	beq	129b0 <__assert_fail@plt+0x13c0>
   12990:	b	12b2c <__assert_fail@plt+0x153c>
   12994:	movw	r1, #8239	; 0x202f
   12998:	cmp	r0, r1
   1299c:	beq	12914 <__assert_fail@plt+0x1324>
   129a0:	movw	r1, #8288	; 0x2060
   129a4:	ldr	r3, [sp, #88]	; 0x58
   129a8:	cmp	r0, r1
   129ac:	beq	12b2c <__assert_fail@plt+0x153c>
   129b0:	mov	r0, #1
   129b4:	b	12b54 <__assert_fail@plt+0x1564>
   129b8:	tst	r7, #1
   129bc:	bne	129f8 <__assert_fail@plt+0x1408>
   129c0:	ldrb	r0, [sl]
   129c4:	movw	r2, #30584	; 0x7778
   129c8:	mov	r3, #1
   129cc:	movt	r2, #1
   129d0:	ubfx	r1, r0, #5, #3
   129d4:	ldr	r1, [r2, r1, lsl #2]
   129d8:	and	r2, r0, #31
   129dc:	tst	r1, r3, lsl r2
   129e0:	beq	129f8 <__assert_fail@plt+0x1408>
   129e4:	str	r0, [sp, #92]	; 0x5c
   129e8:	mov	r6, #1
   129ec:	mov	r7, #0
   129f0:	mov	r1, #0
   129f4:	b	12a48 <__assert_fail@plt+0x1458>
   129f8:	ldr	r5, [sp, #96]	; 0x60
   129fc:	ldr	r7, [sp, #100]	; 0x64
   12a00:	add	r0, sp, #92	; 0x5c
   12a04:	mov	r1, sl
   12a08:	mov	r2, r9
   12a0c:	add	r3, sp, #96	; 0x60
   12a10:	bl	13964 <__assert_fail@plt+0x2374>
   12a14:	cmn	r0, #1
   12a18:	beq	12a98 <__assert_fail@plt+0x14a8>
   12a1c:	mov	r6, r0
   12a20:	cmn	r0, #2
   12a24:	beq	12b74 <__assert_fail@plt+0x1584>
   12a28:	add	r0, sp, #96	; 0x60
   12a2c:	bl	11368 <mbsinit@plt>
   12a30:	clz	r0, r0
   12a34:	cmp	r6, #0
   12a38:	lsr	r7, r0, #5
   12a3c:	beq	12ac8 <__assert_fail@plt+0x14d8>
   12a40:	ldr	r0, [sp, #92]	; 0x5c
   12a44:	mov	r1, #1
   12a48:	ldr	r3, [sp, #88]	; 0x58
   12a4c:	sub	r2, r0, #9
   12a50:	cmp	r2, #4
   12a54:	bhi	12aa8 <__assert_fail@plt+0x14b8>
   12a58:	add	r0, pc, #0
   12a5c:	ldr	pc, [r0, r2, lsl #2]
   12a60:	andeq	r2, r1, r4, ror sl
   12a64:	ldrdeq	r2, [r1], -r8
   12a68:	andeq	r2, r1, ip, lsr #22
   12a6c:	strdeq	r2, [r1], -r0
   12a70:	strdeq	r2, [r1], -r0
   12a74:	ldr	r2, [sp, #68]	; 0x44
   12a78:	ldr	r1, [sp, #64]	; 0x40
   12a7c:	adds	r0, r2, #8
   12a80:	and	r2, r2, #7
   12a84:	adc	r1, r1, #0
   12a88:	subs	r0, r0, r2
   12a8c:	str	r0, [sp, #68]	; 0x44
   12a90:	sbc	r0, r1, #0
   12a94:	b	12b28 <__assert_fail@plt+0x1538>
   12a98:	sub	r9, r9, #1
   12a9c:	add	sl, sl, #1
   12aa0:	mov	r7, #1
   12aa4:	b	12b68 <__assert_fail@plt+0x1578>
   12aa8:	cmp	r0, #32
   12aac:	bne	128b8 <__assert_fail@plt+0x12c8>
   12ab0:	ldr	r0, [sp, #68]	; 0x44
   12ab4:	adds	r0, r0, #1
   12ab8:	str	r0, [sp, #68]	; 0x44
   12abc:	ldr	r0, [sp, #64]	; 0x40
   12ac0:	adc	r0, r0, #0
   12ac4:	b	12b28 <__assert_fail@plt+0x1538>
   12ac8:	mov	r0, #0
   12acc:	mov	r6, #1
   12ad0:	str	r0, [sp, #92]	; 0x5c
   12ad4:	b	128c0 <__assert_fail@plt+0x12d0>
   12ad8:	ldr	r0, [sp, #60]	; 0x3c
   12adc:	adds	r0, r0, #1
   12ae0:	str	r0, [sp, #60]	; 0x3c
   12ae4:	ldr	r0, [sp, #56]	; 0x38
   12ae8:	adc	r0, r0, #0
   12aec:	str	r0, [sp, #56]	; 0x38
   12af0:	ldr	r1, [sp, #80]	; 0x50
   12af4:	ldr	r2, [sp, #68]	; 0x44
   12af8:	ldr	r5, [sp, #64]	; 0x40
   12afc:	subs	r0, r1, r2
   12b00:	sbcs	r0, r3, r5
   12b04:	mov	r0, #0
   12b08:	movwcc	r0, #1
   12b0c:	cmp	r0, #0
   12b10:	mov	r0, #0
   12b14:	movne	r1, r2
   12b18:	str	r0, [sp, #68]	; 0x44
   12b1c:	movne	r3, r5
   12b20:	mov	r0, #0
   12b24:	str	r1, [sp, #80]	; 0x50
   12b28:	str	r0, [sp, #64]	; 0x40
   12b2c:	ldr	r0, [sp, #84]	; 0x54
   12b30:	ldr	r1, [sp, #76]	; 0x4c
   12b34:	str	r3, [sp, #88]	; 0x58
   12b38:	and	r0, r0, #1
   12b3c:	adds	r1, r1, r0
   12b40:	ldr	r0, [sp, #72]	; 0x48
   12b44:	str	r1, [sp, #76]	; 0x4c
   12b48:	adc	r0, r0, #0
   12b4c:	str	r0, [sp, #72]	; 0x48
   12b50:	mov	r0, #0
   12b54:	str	r0, [sp, #84]	; 0x54
   12b58:	adds	r4, r4, #1
   12b5c:	sub	r9, r9, r6
   12b60:	add	sl, sl, r6
   12b64:	adc	r8, r8, #0
   12b68:	cmp	r9, #0
   12b6c:	bne	129b8 <__assert_fail@plt+0x13c8>
   12b70:	b	1286c <__assert_fail@plt+0x127c>
   12b74:	str	r5, [sp, #96]	; 0x60
   12b78:	str	r7, [sp, #100]	; 0x64
   12b7c:	mov	r7, #1
   12b80:	cmp	r9, #0
   12b84:	mov	r5, #0
   12b88:	beq	12870 <__assert_fail@plt+0x1280>
   12b8c:	cmp	r9, #16384	; 0x4000
   12b90:	add	r0, sp, #104	; 0x68
   12b94:	addeq	sl, sl, #1
   12b98:	subeq	r9, r9, #1
   12b9c:	mov	r1, sl
   12ba0:	mov	r2, r9
   12ba4:	bl	1132c <memmove@plt>
   12ba8:	mov	r5, r9
   12bac:	b	12870 <__assert_fail@plt+0x1280>
   12bb0:	ldr	r0, [r9]
   12bb4:	cmp	r0, #1
   12bb8:	blt	12bcc <__assert_fail@plt+0x15dc>
   12bbc:	ldr	r0, [sp, #48]	; 0x30
   12bc0:	add	r1, r9, #8
   12bc4:	bl	16f18 <_obstack_memory_used@@Base+0x704>
   12bc8:	str	r0, [r9]
   12bcc:	mov	r7, #0
   12bd0:	cmp	r0, #0
   12bd4:	mov	r6, #0
   12bd8:	mov	sl, #0
   12bdc:	beq	12e08 <__assert_fail@plt+0x1818>
   12be0:	mov	r0, #2
   12be4:	mov	r2, #0
   12be8:	mov	r3, #0
   12bec:	str	r7, [sp]
   12bf0:	str	r7, [sp, #4]
   12bf4:	str	r0, [sp, #8]
   12bf8:	ldr	r0, [sp, #48]	; 0x30
   12bfc:	bl	13654 <__assert_fail@plt+0x2064>
   12c00:	add	r4, sp, #104	; 0x68
   12c04:	mov	r7, r6
   12c08:	b	12c14 <__assert_fail@plt+0x1624>
   12c0c:	adds	r7, r7, r0
   12c10:	adc	sl, sl, #0
   12c14:	ldr	r0, [sp, #48]	; 0x30
   12c18:	mov	r1, r4
   12c1c:	mov	r2, #16384	; 0x4000
   12c20:	bl	15940 <__assert_fail@plt+0x4350>
   12c24:	cmp	r0, #0
   12c28:	beq	12dcc <__assert_fail@plt+0x17dc>
   12c2c:	cmn	r0, #1
   12c30:	bne	12c0c <__assert_fail@plt+0x161c>
   12c34:	str	sl, [sp, #52]	; 0x34
   12c38:	bl	114dc <__errno_location@plt>
   12c3c:	ldr	r2, [sp, #32]
   12c40:	ldr	r4, [r0]
   12c44:	mov	r0, #0
   12c48:	mov	r1, #3
   12c4c:	mov	r9, #0
   12c50:	bl	15344 <__assert_fail@plt+0x3d54>
   12c54:	movw	r2, #30580	; 0x7774
   12c58:	mov	r3, r0
   12c5c:	mov	r0, #0
   12c60:	mov	r1, r4
   12c64:	movt	r2, #1
   12c68:	bl	1141c <error@plt>
   12c6c:	mov	r0, #0
   12c70:	b	12dd8 <__assert_fail@plt+0x17e8>
   12c74:	mov	r0, #0
   12c78:	mov	r7, #0
   12c7c:	mov	r4, #0
   12c80:	mov	r9, #0
   12c84:	mov	sl, #0
   12c88:	str	r0, [sp, #52]	; 0x34
   12c8c:	b	12d5c <__assert_fail@plt+0x176c>
   12c90:	ldr	r0, [sp, #52]	; 0x34
   12c94:	adds	r7, r7, r6
   12c98:	mov	r8, r7
   12c9c:	adc	r0, r0, #0
   12ca0:	tst	r4, #1
   12ca4:	str	r0, [sp, #52]	; 0x34
   12ca8:	beq	12cfc <__assert_fail@plt+0x170c>
   12cac:	add	r0, sp, #104	; 0x68
   12cb0:	mov	r1, #10
   12cb4:	add	r4, r0, r6
   12cb8:	strb	r1, [r4]
   12cbc:	mov	r1, #10
   12cc0:	bl	113bc <rawmemchr@plt>
   12cc4:	cmp	r0, r4
   12cc8:	mov	r5, r9
   12ccc:	mov	r7, sl
   12cd0:	bcs	12d2c <__assert_fail@plt+0x173c>
   12cd4:	mov	r5, r9
   12cd8:	mov	r7, sl
   12cdc:	adds	r5, r5, #1
   12ce0:	add	r0, r0, #1
   12ce4:	mov	r1, #10
   12ce8:	adc	r7, r7, #0
   12cec:	bl	113bc <rawmemchr@plt>
   12cf0:	cmp	r0, r4
   12cf4:	bcc	12cdc <__assert_fail@plt+0x16ec>
   12cf8:	b	12d2c <__assert_fail@plt+0x173c>
   12cfc:	mov	r0, r6
   12d00:	mov	r5, r9
   12d04:	mov	r7, sl
   12d08:	add	r1, sp, #104	; 0x68
   12d0c:	ldrb	r4, [r1], #1
   12d10:	adds	r2, r5, #1
   12d14:	adc	r3, r7, #0
   12d18:	cmp	r4, #10
   12d1c:	moveq	r5, r2
   12d20:	moveq	r7, r3
   12d24:	subs	r0, r0, #1
   12d28:	bne	12d0c <__assert_fail@plt+0x171c>
   12d2c:	movw	r2, #34953	; 0x8889
   12d30:	subs	r0, r5, r9
   12d34:	mov	r4, #0
   12d38:	mov	r9, r5
   12d3c:	movt	r2, #34952	; 0x8888
   12d40:	sbc	r1, r7, sl
   12d44:	mov	sl, r7
   12d48:	mov	r7, r8
   12d4c:	umull	r2, r3, r6, r2
   12d50:	rsbs	r0, r0, r3, lsr #3
   12d54:	rscs	r0, r1, #0
   12d58:	movwcs	r4, #1
   12d5c:	ldr	r0, [sp, #48]	; 0x30
   12d60:	add	r1, sp, #104	; 0x68
   12d64:	mov	r2, #16384	; 0x4000
   12d68:	bl	15940 <__assert_fail@plt+0x4350>
   12d6c:	cmp	r0, #0
   12d70:	beq	130a0 <__assert_fail@plt+0x1ab0>
   12d74:	mov	r6, r0
   12d78:	cmn	r0, #1
   12d7c:	bne	12c90 <__assert_fail@plt+0x16a0>
   12d80:	bl	114dc <__errno_location@plt>
   12d84:	ldr	r2, [sp, #32]
   12d88:	ldr	r4, [r0]
   12d8c:	mov	r0, #0
   12d90:	mov	r1, #3
   12d94:	mov	r7, #0
   12d98:	bl	15344 <__assert_fail@plt+0x3d54>
   12d9c:	movw	r2, #30580	; 0x7774
   12da0:	mov	r3, r0
   12da4:	mov	r0, #0
   12da8:	mov	r1, r4
   12dac:	movt	r2, #1
   12db0:	bl	1141c <error@plt>
   12db4:	mov	r0, #0
   12db8:	mov	r9, #0
   12dbc:	mov	ip, #0
   12dc0:	str	r0, [sp, #52]	; 0x34
   12dc4:	mov	r0, #0
   12dc8:	b	130a8 <__assert_fail@plt+0x1ab8>
   12dcc:	str	sl, [sp, #52]	; 0x34
   12dd0:	mov	r0, #1
   12dd4:	mov	r9, #0
   12dd8:	mov	ip, #0
   12ddc:	mov	sl, #0
   12de0:	mov	r5, #0
   12de4:	mov	r4, #0
   12de8:	mov	r8, #0
   12dec:	mov	r2, #0
   12df0:	mov	r3, #0
   12df4:	str	r0, [sp, #48]	; 0x30
   12df8:	ldr	lr, [sp, #40]	; 0x28
   12dfc:	ldr	r6, [sp, #36]	; 0x24
   12e00:	movw	r1, #33190	; 0x81a6
   12e04:	b	130d0 <__assert_fail@plt+0x1ae0>
   12e08:	ldr	r0, [r9, #24]
   12e0c:	and	r0, r0, #53248	; 0xd000
   12e10:	orr	r0, r0, #8192	; 0x2000
   12e14:	cmp	r0, #40960	; 0xa000
   12e18:	bne	13170 <__assert_fail@plt+0x1b80>
   12e1c:	ldr	r0, [r9, #60]	; 0x3c
   12e20:	mov	r6, #0
   12e24:	mov	sl, #0
   12e28:	cmp	r0, #0
   12e2c:	blt	12be0 <__assert_fail@plt+0x15f0>
   12e30:	ldr	r5, [fp, #12]
   12e34:	ldr	r6, [r9, #56]	; 0x38
   12e38:	cmn	r5, #1
   12e3c:	ble	132d8 <__assert_fail@plt+0x1ce8>
   12e40:	ldr	r4, [fp, #8]
   12e44:	b	132f8 <__assert_fail@plt+0x1d08>
   12e48:	mov	r0, #0
   12e4c:	mov	r7, #0
   12e50:	add	r8, sp, #104	; 0x68
   12e54:	mov	r6, #0
   12e58:	mov	sl, #0
   12e5c:	mov	r9, #0
   12e60:	str	r0, [sp, #52]	; 0x34
   12e64:	mov	r0, #0
   12e68:	str	r0, [sp, #60]	; 0x3c
   12e6c:	mov	r0, #0
   12e70:	str	r0, [sp, #56]	; 0x38
   12e74:	mov	r0, #0
   12e78:	str	r0, [sp, #80]	; 0x50
   12e7c:	mov	r0, #0
   12e80:	str	r0, [sp, #76]	; 0x4c
   12e84:	mov	r0, #0
   12e88:	str	r0, [sp, #88]	; 0x58
   12e8c:	mov	r0, #0
   12e90:	str	r0, [sp, #84]	; 0x54
   12e94:	b	13044 <__assert_fail@plt+0x1a54>
   12e98:	str	r7, [sp, #44]	; 0x2c
   12e9c:	str	r0, [sp, #72]	; 0x48
   12ea0:	add	ip, sp, #80	; 0x50
   12ea4:	ldr	r7, [sp, #76]	; 0x4c
   12ea8:	mov	r5, r0
   12eac:	ldm	ip, {r2, r3, ip}
   12eb0:	b	12f68 <__assert_fail@plt+0x1978>
   12eb4:	add	r0, sp, #80	; 0x50
   12eb8:	stm	r0, {r2, r3, ip}
   12ebc:	bl	11488 <__ctype_b_loc@plt>
   12ec0:	ldr	r0, [r0]
   12ec4:	add	r0, r0, r4, lsl #1
   12ec8:	ldrh	r0, [r0]
   12ecc:	tst	r0, #16384	; 0x4000
   12ed0:	bne	12ee0 <__assert_fail@plt+0x18f0>
   12ed4:	add	ip, sp, #80	; 0x50
   12ed8:	ldm	ip, {r2, r3, ip}
   12edc:	b	13014 <__assert_fail@plt+0x1a24>
   12ee0:	adds	sl, sl, #1
   12ee4:	adc	r9, r9, #0
   12ee8:	tst	r0, #8192	; 0x2000
   12eec:	bne	12f5c <__assert_fail@plt+0x196c>
   12ef0:	mov	r0, r4
   12ef4:	bl	1150c <btowc@plt>
   12ef8:	movw	r1, #33188	; 0x81a4
   12efc:	movt	r1, #2
   12f00:	ldrb	r1, [r1]
   12f04:	cmp	r1, #0
   12f08:	beq	12f1c <__assert_fail@plt+0x192c>
   12f0c:	ldr	r2, [sp, #80]	; 0x50
   12f10:	ldr	ip, [sp, #88]	; 0x58
   12f14:	mov	r3, #1
   12f18:	b	13014 <__assert_fail@plt+0x1a24>
   12f1c:	movw	r1, #8238	; 0x202e
   12f20:	cmp	r0, r1
   12f24:	bgt	12f38 <__assert_fail@plt+0x1948>
   12f28:	cmp	r0, #160	; 0xa0
   12f2c:	beq	12f5c <__assert_fail@plt+0x196c>
   12f30:	movw	r1, #8199	; 0x2007
   12f34:	b	12f48 <__assert_fail@plt+0x1958>
   12f38:	movw	r1, #8239	; 0x202f
   12f3c:	cmp	r0, r1
   12f40:	beq	12f5c <__assert_fail@plt+0x196c>
   12f44:	movw	r1, #8288	; 0x2060
   12f48:	add	ip, sp, #80	; 0x50
   12f4c:	cmp	r0, r1
   12f50:	ldm	ip, {r2, r3, ip}
   12f54:	beq	13004 <__assert_fail@plt+0x1a14>
   12f58:	b	12f14 <__assert_fail@plt+0x1924>
   12f5c:	add	ip, sp, #80	; 0x50
   12f60:	ldm	ip, {r2, r3, ip}
   12f64:	b	13004 <__assert_fail@plt+0x1a14>
   12f68:	ldrb	r4, [r8], #1
   12f6c:	sub	r0, r4, #9
   12f70:	cmp	r0, #4
   12f74:	bhi	12fb4 <__assert_fail@plt+0x19c4>
   12f78:	add	r1, pc, #0
   12f7c:	ldr	pc, [r1, r0, lsl #2]
   12f80:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12f84:	andeq	r2, r1, r8, asr #31
   12f88:	andeq	r3, r1, r4
   12f8c:	andeq	r2, r1, r0, ror #31
   12f90:	andeq	r2, r1, r0, ror #31
   12f94:	adds	r0, sl, #8
   12f98:	mov	r4, r2
   12f9c:	and	r2, sl, #7
   12fa0:	adc	r1, r9, #0
   12fa4:	subs	sl, r0, r2
   12fa8:	mov	r2, r4
   12fac:	sbc	r9, r1, #0
   12fb0:	b	13004 <__assert_fail@plt+0x1a14>
   12fb4:	cmp	r4, #32
   12fb8:	bne	12eb4 <__assert_fail@plt+0x18c4>
   12fbc:	adds	sl, sl, #1
   12fc0:	adc	r9, r9, #0
   12fc4:	b	13004 <__assert_fail@plt+0x1a14>
   12fc8:	ldr	r0, [sp, #60]	; 0x3c
   12fcc:	adds	r0, r0, #1
   12fd0:	str	r0, [sp, #60]	; 0x3c
   12fd4:	ldr	r0, [sp, #56]	; 0x38
   12fd8:	adc	r0, r0, #0
   12fdc:	str	r0, [sp, #56]	; 0x38
   12fe0:	subs	r0, r2, sl
   12fe4:	sbcs	r0, r6, r9
   12fe8:	mov	r0, #0
   12fec:	movwcc	r0, #1
   12ff0:	cmp	r0, #0
   12ff4:	movne	r6, r9
   12ff8:	movne	r2, sl
   12ffc:	mov	sl, #0
   13000:	mov	r9, #0
   13004:	and	r0, r3, #1
   13008:	mov	r3, #0
   1300c:	adds	r7, r7, r0
   13010:	adc	ip, ip, #0
   13014:	subs	r5, r5, #1
   13018:	bne	12f68 <__assert_fail@plt+0x1978>
   1301c:	add	r0, sp, #80	; 0x50
   13020:	str	r7, [sp, #76]	; 0x4c
   13024:	add	r8, sp, #104	; 0x68
   13028:	stm	r0, {r2, r3, ip}
   1302c:	ldr	r7, [sp, #44]	; 0x2c
   13030:	ldr	r0, [sp, #72]	; 0x48
   13034:	adds	r7, r7, r0
   13038:	ldr	r0, [sp, #52]	; 0x34
   1303c:	adc	r0, r0, #0
   13040:	str	r0, [sp, #52]	; 0x34
   13044:	ldr	r0, [sp, #48]	; 0x30
   13048:	mov	r1, r8
   1304c:	mov	r2, #16384	; 0x4000
   13050:	bl	15940 <__assert_fail@plt+0x4350>
   13054:	cmp	r0, #0
   13058:	beq	1317c <__assert_fail@plt+0x1b8c>
   1305c:	cmn	r0, #1
   13060:	bne	12e98 <__assert_fail@plt+0x18a8>
   13064:	bl	114dc <__errno_location@plt>
   13068:	ldr	r2, [sp, #32]
   1306c:	ldr	r5, [r0]
   13070:	mov	r0, #0
   13074:	mov	r1, #3
   13078:	str	r0, [sp, #48]	; 0x30
   1307c:	mov	r0, #0
   13080:	bl	15344 <__assert_fail@plt+0x3d54>
   13084:	movw	r2, #30580	; 0x7774
   13088:	mov	r3, r0
   1308c:	mov	r0, #0
   13090:	mov	r1, r5
   13094:	movt	r2, #1
   13098:	bl	1141c <error@plt>
   1309c:	b	13184 <__assert_fail@plt+0x1b94>
   130a0:	mov	r0, #1
   130a4:	mov	ip, sl
   130a8:	str	r0, [sp, #48]	; 0x30
   130ac:	ldr	lr, [sp, #40]	; 0x28
   130b0:	ldr	r6, [sp, #36]	; 0x24
   130b4:	movw	r1, #33190	; 0x81a6
   130b8:	mov	sl, #0
   130bc:	mov	r5, #0
   130c0:	mov	r4, #0
   130c4:	mov	r8, #0
   130c8:	mov	r2, #0
   130cc:	mov	r3, #0
   130d0:	movt	r1, #2
   130d4:	b	131e8 <__assert_fail@plt+0x1bf8>
   130d8:	mov	r0, #1
   130dc:	str	r0, [sp, #48]	; 0x30
   130e0:	b	1311c <__assert_fail@plt+0x1b2c>
   130e4:	bl	114dc <__errno_location@plt>
   130e8:	ldr	r2, [sp, #32]
   130ec:	ldr	r6, [r0]
   130f0:	mov	r0, #0
   130f4:	mov	r1, #3
   130f8:	str	r0, [sp, #48]	; 0x30
   130fc:	mov	r0, #0
   13100:	bl	15344 <__assert_fail@plt+0x3d54>
   13104:	movw	r2, #30580	; 0x7774
   13108:	mov	r3, r0
   1310c:	mov	r0, #0
   13110:	mov	r1, r6
   13114:	movt	r2, #1
   13118:	bl	1141c <error@plt>
   1311c:	add	lr, sp, #64	; 0x40
   13120:	ldr	r7, [sp, #44]	; 0x2c
   13124:	ldr	sl, [sp, #80]	; 0x50
   13128:	ldr	r5, [sp, #88]	; 0x58
   1312c:	mov	r0, #0
   13130:	ldm	lr, {r3, r6, ip, lr}
   13134:	ldr	r9, [sp, #84]	; 0x54
   13138:	subs	r1, sl, r6
   1313c:	sbcs	r1, r5, r3
   13140:	movwcc	r0, #1
   13144:	movw	r1, #33190	; 0x81a6
   13148:	cmp	r0, #0
   1314c:	and	r0, r9, #1
   13150:	ldr	r9, [sp, #60]	; 0x3c
   13154:	movt	r1, #2
   13158:	movne	sl, r6
   1315c:	movne	r5, r3
   13160:	adds	r2, lr, r0
   13164:	ldr	lr, [sp, #40]	; 0x28
   13168:	ldr	r6, [sp, #36]	; 0x24
   1316c:	b	131e0 <__assert_fail@plt+0x1bf0>
   13170:	mov	r6, #0
   13174:	mov	sl, #0
   13178:	b	12be0 <__assert_fail@plt+0x15f0>
   1317c:	mov	r0, #1
   13180:	str	r0, [sp, #48]	; 0x30
   13184:	ldr	r0, [sp, #80]	; 0x50
   13188:	mov	r5, r6
   1318c:	ldr	r6, [sp, #84]	; 0x54
   13190:	ldr	r3, [sp, #76]	; 0x4c
   13194:	ldr	ip, [sp, #88]	; 0x58
   13198:	ldr	lr, [sp, #40]	; 0x28
   1319c:	movw	r1, #33190	; 0x81a6
   131a0:	mov	r4, #0
   131a4:	mov	r8, #0
   131a8:	movt	r1, #2
   131ac:	mov	r2, r0
   131b0:	subs	r0, r0, sl
   131b4:	sbcs	r0, r5, r9
   131b8:	mov	r0, #0
   131bc:	movwcc	r0, #1
   131c0:	cmp	r0, #0
   131c4:	and	r0, r6, #1
   131c8:	ldr	r6, [sp, #36]	; 0x24
   131cc:	movne	r2, sl
   131d0:	movne	r5, r9
   131d4:	ldr	r9, [sp, #60]	; 0x3c
   131d8:	mov	sl, r2
   131dc:	adds	r2, r3, r0
   131e0:	adc	r3, ip, #0
   131e4:	ldr	ip, [sp, #56]	; 0x38
   131e8:	ldrb	r0, [r1]
   131ec:	eor	r1, r6, #1
   131f0:	ldr	r6, [sp, #52]	; 0x34
   131f4:	str	r3, [sp, #84]	; 0x54
   131f8:	str	sl, [sp, #80]	; 0x50
   131fc:	ands	r0, r0, r1
   13200:	mov	r1, ip
   13204:	movne	r8, r6
   13208:	cmp	r0, #0
   1320c:	mov	r0, r9
   13210:	movne	r4, r7
   13214:	str	r4, [sp, #88]	; 0x58
   13218:	stm	sp, {r4, r8}
   1321c:	str	sl, [sp, #16]
   13220:	str	r7, [sp, #8]
   13224:	str	r6, [sp, #12]
   13228:	str	r5, [sp, #20]
   1322c:	str	lr, [sp, #24]
   13230:	mov	r4, r2
   13234:	mov	sl, ip
   13238:	bl	124f0 <__assert_fail@plt+0xf00>
   1323c:	movw	r0, #33232	; 0x81d0
   13240:	ldr	r1, [sp, #84]	; 0x54
   13244:	mov	ip, r5
   13248:	movt	r0, #2
   1324c:	ldrd	r2, [r0]
   13250:	adds	r2, r2, r9
   13254:	adc	r3, r3, sl
   13258:	strd	r2, [r0]
   1325c:	movw	r0, #33224	; 0x81c8
   13260:	movt	r0, #2
   13264:	ldrd	r2, [r0]
   13268:	adds	r2, r2, r4
   1326c:	adc	r3, r3, r1
   13270:	ldr	r1, [sp, #88]	; 0x58
   13274:	strd	r2, [r0]
   13278:	movw	r0, #33216	; 0x81c0
   1327c:	movt	r0, #2
   13280:	ldrd	r2, [r0]
   13284:	adds	r1, r2, r1
   13288:	movw	r2, #33208	; 0x81b8
   1328c:	movt	r2, #2
   13290:	str	r1, [r0]
   13294:	adc	r1, r3, r8
   13298:	ldr	r8, [sp, #80]	; 0x50
   1329c:	ldrd	r4, [r2]
   132a0:	str	r1, [r0, #4]
   132a4:	movw	r0, #33200	; 0x81b0
   132a8:	ldr	r1, [sp, #80]	; 0x50
   132ac:	movt	r0, #2
   132b0:	adds	r4, r4, r7
   132b4:	adc	r5, r5, r6
   132b8:	strd	r4, [r2]
   132bc:	ldrd	r2, [r0]
   132c0:	subs	r1, r2, r1
   132c4:	sbcs	r1, r3, ip
   132c8:	stmcc	r0, {r8, ip}
   132cc:	ldr	r0, [sp, #48]	; 0x30
   132d0:	sub	sp, fp, #28
   132d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132d8:	mov	r0, #1
   132dc:	mov	r2, #0
   132e0:	mov	r3, #0
   132e4:	str	r0, [sp]
   132e8:	ldr	r0, [sp, #48]	; 0x30
   132ec:	bl	113e0 <lseek64@plt>
   132f0:	mov	r4, r0
   132f4:	mov	r5, r1
   132f8:	movw	r0, #33184	; 0x81a0
   132fc:	movt	r0, #2
   13300:	ldr	r0, [r0]
   13304:	udiv	r1, r6, r0
   13308:	mls	r0, r1, r0, r6
   1330c:	cmp	r0, #0
   13310:	beq	13368 <__assert_fail@plt+0x1d78>
   13314:	subs	r7, r6, r4
   13318:	mov	r0, #0
   1331c:	ldr	r6, [sp, #36]	; 0x24
   13320:	ldr	lr, [sp, #40]	; 0x28
   13324:	mov	sl, #0
   13328:	mov	r4, #0
   1332c:	mov	r8, #0
   13330:	mov	r2, #0
   13334:	mov	r3, #0
   13338:	mov	ip, #0
   1333c:	mov	r9, #0
   13340:	rscs	r1, r5, #0
   13344:	mov	r5, #0
   13348:	movwlt	r0, #1
   1334c:	cmp	r0, #0
   13350:	mov	r0, #1
   13354:	movwne	r1, #0
   13358:	movwne	r7, #0
   1335c:	str	r0, [sp, #48]	; 0x30
   13360:	str	r1, [sp, #52]	; 0x34
   13364:	b	12e00 <__assert_fail@plt+0x1810>
   13368:	ldr	r0, [r9, #64]	; 0x40
   1336c:	movw	r2, #513	; 0x201
   13370:	movw	r1, #513	; 0x201
   13374:	mov	sl, #0
   13378:	cmp	r0, #536870913	; 0x20000001
   1337c:	addcc	r2, r0, #1
   13380:	cmp	r0, #0
   13384:	movle	r2, r1
   13388:	udiv	r0, r6, r2
   1338c:	mov	r6, #0
   13390:	mul	r8, r0, r2
   13394:	subs	r0, r4, r8
   13398:	sbcs	r0, r5, #0
   1339c:	bcs	12be0 <__assert_fail@plt+0x15f0>
   133a0:	mov	r0, #1
   133a4:	mov	r2, r8
   133a8:	mov	r3, #0
   133ac:	mvn	r9, #0
   133b0:	mov	r6, #0
   133b4:	str	r0, [sp]
   133b8:	ldr	r0, [sp, #48]	; 0x30
   133bc:	bl	113e0 <lseek64@plt>
   133c0:	subs	r0, r9, r0
   133c4:	sbcs	r0, r9, r1
   133c8:	movwlt	r6, #1
   133cc:	subs	r0, r8, r4
   133d0:	rsc	sl, r5, #0
   133d4:	cmp	r6, #0
   133d8:	moveq	r0, r6
   133dc:	moveq	sl, r6
   133e0:	mov	r6, r0
   133e4:	b	12be0 <__assert_fail@plt+0x15f0>
   133e8:	push	{r4, sl, fp, lr}
   133ec:	add	fp, sp, #8
   133f0:	mov	r4, r0
   133f4:	mov	r0, #24
   133f8:	bl	16348 <__assert_fail@plt+0x4d58>
   133fc:	cmp	r0, #0
   13400:	movne	r1, #0
   13404:	strne	r1, [r0]
   13408:	strne	r4, [r0, #16]
   1340c:	strne	r4, [r0, #20]
   13410:	popne	{r4, sl, fp, pc}
   13414:	mov	r0, #0
   13418:	pop	{r4, sl, fp, pc}
   1341c:	push	{r4, sl, fp, lr}
   13420:	add	fp, sp, #8
   13424:	mov	r4, r0
   13428:	mov	r0, #24
   1342c:	bl	16348 <__assert_fail@plt+0x4d58>
   13430:	cmp	r0, #0
   13434:	moveq	r0, #0
   13438:	popeq	{r4, sl, fp, pc}
   1343c:	mov	r1, r0
   13440:	vmov.i32	q8, #0	; 0x00000000
   13444:	str	r4, [r1], #4
   13448:	vst1.32	{d16-d17}, [r1]
   1344c:	pop	{r4, sl, fp, pc}
   13450:	push	{r4, r5, r6, sl, fp, lr}
   13454:	add	fp, sp, #16
   13458:	ldr	r3, [r0]
   1345c:	mov	r4, r1
   13460:	mov	r5, r0
   13464:	cmp	r3, #0
   13468:	beq	134a0 <__assert_fail@plt+0x1eb0>
   1346c:	add	r0, r5, #8
   13470:	add	r1, r5, #12
   13474:	mov	r2, #0
   13478:	mov	r6, #0
   1347c:	bl	1159c <getdelim@plt>
   13480:	cmn	r0, #1
   13484:	ble	134cc <__assert_fail@plt+0x1edc>
   13488:	mov	r0, #1
   1348c:	str	r0, [r4]
   13490:	ldmib	r5, {r0, r6}
   13494:	add	r0, r0, #1
   13498:	str	r0, [r5, #4]
   1349c:	b	134f4 <__assert_fail@plt+0x1f04>
   134a0:	ldr	r0, [r5, #20]
   134a4:	ldr	r0, [r0]
   134a8:	cmp	r0, #0
   134ac:	beq	134e8 <__assert_fail@plt+0x1ef8>
   134b0:	mov	r0, #1
   134b4:	str	r0, [r4]
   134b8:	ldr	r0, [r5, #20]
   134bc:	add	r1, r0, #4
   134c0:	str	r1, [r5, #20]
   134c4:	ldr	r6, [r0]
   134c8:	b	134f4 <__assert_fail@plt+0x1f04>
   134cc:	ldr	r0, [r5]
   134d0:	bl	114a0 <feof@plt>
   134d4:	mov	r1, #2
   134d8:	cmp	r0, #0
   134dc:	movweq	r1, #4
   134e0:	str	r1, [r4]
   134e4:	b	134f4 <__assert_fail@plt+0x1f04>
   134e8:	mov	r0, #2
   134ec:	mov	r6, #0
   134f0:	str	r0, [r4]
   134f4:	mov	r0, r6
   134f8:	pop	{r4, r5, r6, sl, fp, pc}
   134fc:	ldr	r1, [r0]
   13500:	cmp	r1, #0
   13504:	ldrne	r0, [r0, #4]
   13508:	bxne	lr
   1350c:	ldr	r1, [r0, #16]
   13510:	ldr	r0, [r0, #20]
   13514:	sub	r0, r0, r1
   13518:	asr	r0, r0, #2
   1351c:	bx	lr
   13520:	push	{r4, sl, fp, lr}
   13524:	add	fp, sp, #8
   13528:	mov	r4, r0
   1352c:	ldr	r0, [r0]
   13530:	cmp	r0, #0
   13534:	beq	13540 <__assert_fail@plt+0x1f50>
   13538:	ldr	r0, [r4, #8]
   1353c:	bl	1378c <__assert_fail@plt+0x219c>
   13540:	mov	r0, r4
   13544:	pop	{r4, sl, fp, lr}
   13548:	b	1378c <__assert_fail@plt+0x219c>
   1354c:	movw	r1, #33252	; 0x81e4
   13550:	movt	r1, #2
   13554:	str	r0, [r1]
   13558:	bx	lr
   1355c:	movw	r1, #33256	; 0x81e8
   13560:	movt	r1, #2
   13564:	strb	r0, [r1]
   13568:	bx	lr
   1356c:	push	{r4, r5, r6, sl, fp, lr}
   13570:	add	fp, sp, #16
   13574:	sub	sp, sp, #8
   13578:	movw	r0, #33172	; 0x8194
   1357c:	movt	r0, #2
   13580:	ldr	r0, [r0]
   13584:	bl	163c8 <__assert_fail@plt+0x4dd8>
   13588:	cmp	r0, #0
   1358c:	beq	135b4 <__assert_fail@plt+0x1fc4>
   13590:	movw	r0, #33256	; 0x81e8
   13594:	movt	r0, #2
   13598:	ldrb	r0, [r0]
   1359c:	cmp	r0, #0
   135a0:	beq	135d4 <__assert_fail@plt+0x1fe4>
   135a4:	bl	114dc <__errno_location@plt>
   135a8:	ldr	r0, [r0]
   135ac:	cmp	r0, #32
   135b0:	bne	135d4 <__assert_fail@plt+0x1fe4>
   135b4:	movw	r0, #33160	; 0x8188
   135b8:	movt	r0, #2
   135bc:	ldr	r0, [r0]
   135c0:	bl	163c8 <__assert_fail@plt+0x4dd8>
   135c4:	cmp	r0, #0
   135c8:	subeq	sp, fp, #16
   135cc:	popeq	{r4, r5, r6, sl, fp, pc}
   135d0:	b	13644 <__assert_fail@plt+0x2054>
   135d4:	movw	r1, #30564	; 0x7764
   135d8:	mov	r0, #0
   135dc:	mov	r2, #5
   135e0:	movt	r1, #1
   135e4:	bl	11380 <dcgettext@plt>
   135e8:	mov	r4, r0
   135ec:	movw	r0, #33252	; 0x81e4
   135f0:	movt	r0, #2
   135f4:	ldr	r6, [r0]
   135f8:	bl	114dc <__errno_location@plt>
   135fc:	ldr	r5, [r0]
   13600:	cmp	r6, #0
   13604:	bne	13620 <__assert_fail@plt+0x2030>
   13608:	movw	r2, #30580	; 0x7774
   1360c:	mov	r0, #0
   13610:	mov	r1, r5
   13614:	mov	r3, r4
   13618:	movt	r2, #1
   1361c:	b	13640 <__assert_fail@plt+0x2050>
   13620:	mov	r0, r6
   13624:	bl	15298 <__assert_fail@plt+0x3ca8>
   13628:	movw	r2, #30576	; 0x7770
   1362c:	mov	r3, r0
   13630:	str	r4, [sp]
   13634:	mov	r0, #0
   13638:	mov	r1, r5
   1363c:	movt	r2, #1
   13640:	bl	1141c <error@plt>
   13644:	movw	r0, #33068	; 0x812c
   13648:	movt	r0, #2
   1364c:	ldr	r0, [r0]
   13650:	bl	11350 <_exit@plt>
   13654:	b	112fc <posix_fadvise64@plt>
   13658:	cmp	r0, #0
   1365c:	bxeq	lr
   13660:	push	{r4, sl, fp, lr}
   13664:	add	fp, sp, #8
   13668:	sub	sp, sp, #16
   1366c:	mov	r4, r1
   13670:	bl	11530 <fileno@plt>
   13674:	mov	r1, #0
   13678:	mov	r2, #0
   1367c:	mov	r3, #0
   13680:	str	r1, [sp]
   13684:	stmib	sp, {r1, r4}
   13688:	bl	112fc <posix_fadvise64@plt>
   1368c:	sub	sp, fp, #8
   13690:	pop	{r4, sl, fp, pc}
   13694:	push	{r4, r5, r6, sl, fp, lr}
   13698:	add	fp, sp, #16
   1369c:	sub	sp, sp, #8
   136a0:	mov	r4, r0
   136a4:	bl	11530 <fileno@plt>
   136a8:	cmn	r0, #1
   136ac:	ble	13720 <__assert_fail@plt+0x2130>
   136b0:	mov	r0, r4
   136b4:	bl	11464 <__freading@plt>
   136b8:	cmp	r0, #0
   136bc:	beq	136e8 <__assert_fail@plt+0x20f8>
   136c0:	mov	r0, r4
   136c4:	bl	11530 <fileno@plt>
   136c8:	mov	r1, #1
   136cc:	mov	r2, #0
   136d0:	mov	r3, #0
   136d4:	str	r1, [sp]
   136d8:	bl	113e0 <lseek64@plt>
   136dc:	and	r0, r0, r1
   136e0:	cmn	r0, #1
   136e4:	beq	13720 <__assert_fail@plt+0x2130>
   136e8:	mov	r0, r4
   136ec:	bl	13730 <__assert_fail@plt+0x2140>
   136f0:	cmp	r0, #0
   136f4:	beq	13720 <__assert_fail@plt+0x2130>
   136f8:	bl	114dc <__errno_location@plt>
   136fc:	ldr	r6, [r0]
   13700:	mov	r5, r0
   13704:	mov	r0, r4
   13708:	bl	11548 <fclose@plt>
   1370c:	cmp	r6, #0
   13710:	strne	r6, [r5]
   13714:	mvnne	r0, #0
   13718:	sub	sp, fp, #16
   1371c:	pop	{r4, r5, r6, sl, fp, pc}
   13720:	mov	r0, r4
   13724:	sub	sp, fp, #16
   13728:	pop	{r4, r5, r6, sl, fp, lr}
   1372c:	b	11548 <fclose@plt>
   13730:	push	{r4, sl, fp, lr}
   13734:	add	fp, sp, #8
   13738:	sub	sp, sp, #8
   1373c:	mov	r4, r0
   13740:	cmp	r0, #0
   13744:	beq	13760 <__assert_fail@plt+0x2170>
   13748:	mov	r0, r4
   1374c:	bl	11464 <__freading@plt>
   13750:	cmp	r0, #0
   13754:	ldrbne	r0, [r4, #1]
   13758:	tstne	r0, #1
   1375c:	bne	13770 <__assert_fail@plt+0x2180>
   13760:	mov	r0, r4
   13764:	sub	sp, fp, #8
   13768:	pop	{r4, sl, fp, lr}
   1376c:	b	11314 <fflush@plt>
   13770:	mov	r0, #1
   13774:	mov	r2, #0
   13778:	mov	r3, #0
   1377c:	str	r0, [sp]
   13780:	mov	r0, r4
   13784:	bl	137b4 <__assert_fail@plt+0x21c4>
   13788:	b	13760 <__assert_fail@plt+0x2170>
   1378c:	push	{r4, r5, r6, sl, fp, lr}
   13790:	add	fp, sp, #16
   13794:	mov	r4, r0
   13798:	bl	114dc <__errno_location@plt>
   1379c:	ldr	r6, [r0]
   137a0:	mov	r5, r0
   137a4:	mov	r0, r4
   137a8:	bl	11338 <free@plt>
   137ac:	str	r6, [r5]
   137b0:	pop	{r4, r5, r6, sl, fp, pc}
   137b4:	push	{r4, r5, r6, r7, fp, lr}
   137b8:	add	fp, sp, #16
   137bc:	sub	sp, sp, #8
   137c0:	mov	r4, r0
   137c4:	ldr	r0, [r0, #4]
   137c8:	mov	r5, r3
   137cc:	mov	r6, r2
   137d0:	ldr	r1, [r4, #8]
   137d4:	cmp	r1, r0
   137d8:	bne	137f4 <__assert_fail@plt+0x2204>
   137dc:	ldrd	r0, [r4, #16]
   137e0:	cmp	r1, r0
   137e4:	bne	137f4 <__assert_fail@plt+0x2204>
   137e8:	ldr	r0, [r4, #36]	; 0x24
   137ec:	cmp	r0, #0
   137f0:	beq	1380c <__assert_fail@plt+0x221c>
   137f4:	mov	r0, r4
   137f8:	mov	r2, r6
   137fc:	mov	r3, r5
   13800:	sub	sp, fp, #16
   13804:	pop	{r4, r5, r6, r7, fp, lr}
   13808:	b	11554 <fseeko64@plt>
   1380c:	ldr	r7, [fp, #8]
   13810:	mov	r0, r4
   13814:	bl	11530 <fileno@plt>
   13818:	mov	r2, r6
   1381c:	mov	r3, r5
   13820:	str	r7, [sp]
   13824:	bl	113e0 <lseek64@plt>
   13828:	and	r2, r0, r1
   1382c:	cmn	r2, #1
   13830:	beq	1384c <__assert_fail@plt+0x225c>
   13834:	strd	r0, [r4, #80]	; 0x50
   13838:	ldr	r0, [r4]
   1383c:	bic	r0, r0, #16
   13840:	str	r0, [r4]
   13844:	mov	r0, #0
   13848:	b	13850 <__assert_fail@plt+0x2260>
   1384c:	mvn	r0, #0
   13850:	sub	sp, fp, #16
   13854:	pop	{r4, r5, r6, r7, fp, pc}
   13858:	push	{r4, r5, r6, sl, fp, lr}
   1385c:	add	fp, sp, #16
   13860:	mov	r5, r0
   13864:	mov	r0, #0
   13868:	mov	r4, r1
   1386c:	add	r6, r2, #19
   13870:	strb	r0, [r2, #20]
   13874:	mov	r0, r5
   13878:	mov	r1, r4
   1387c:	mov	r2, #10
   13880:	mov	r3, #0
   13884:	bl	16d18 <_obstack_memory_used@@Base+0x504>
   13888:	add	r2, r0, r0, lsl #2
   1388c:	sub	r2, r5, r2, lsl #1
   13890:	orr	r2, r2, #48	; 0x30
   13894:	strb	r2, [r6], #-1
   13898:	rsbs	r2, r5, #9
   1389c:	mov	r5, r0
   138a0:	rscs	r2, r4, #0
   138a4:	mov	r4, r1
   138a8:	bcc	13874 <__assert_fail@plt+0x2284>
   138ac:	add	r0, r6, #1
   138b0:	pop	{r4, r5, r6, sl, fp, pc}
   138b4:	push	{r4, sl, fp, lr}
   138b8:	add	fp, sp, #8
   138bc:	mov	r4, r0
   138c0:	bl	11320 <wcwidth@plt>
   138c4:	cmn	r0, #1
   138c8:	popgt	{r4, sl, fp, pc}
   138cc:	mov	r0, r4
   138d0:	bl	113b0 <iswcntrl@plt>
   138d4:	clz	r0, r0
   138d8:	lsr	r0, r0, #5
   138dc:	pop	{r4, sl, fp, pc}
   138e0:	push	{r4, r5, r6, sl, fp, lr}
   138e4:	add	fp, sp, #16
   138e8:	mov	r4, r0
   138ec:	mov	r0, r1
   138f0:	mov	r5, r1
   138f4:	ldr	r1, [r0], #16
   138f8:	cmp	r1, r0
   138fc:	beq	13908 <__assert_fail@plt+0x2318>
   13900:	mov	r6, r1
   13904:	b	13918 <__assert_fail@plt+0x2328>
   13908:	ldr	r2, [r5, #4]
   1390c:	add	r6, r4, #16
   13910:	mov	r0, r6
   13914:	bl	1135c <memcpy@plt>
   13918:	str	r6, [r4]
   1391c:	ldr	r0, [r5, #4]
   13920:	str	r0, [r4, #4]
   13924:	ldrb	r0, [r5, #8]
   13928:	strb	r0, [r4, #8]
   1392c:	cmp	r0, #0
   13930:	ldrne	r0, [r5, #12]
   13934:	strne	r0, [r4, #12]
   13938:	pop	{r4, r5, r6, sl, fp, pc}
   1393c:	movw	r2, #30584	; 0x7778
   13940:	ubfx	r1, r0, #5, #3
   13944:	and	r0, r0, #31
   13948:	movt	r2, #1
   1394c:	ldr	r1, [r2, r1, lsl #2]
   13950:	mov	r2, #1
   13954:	and	r0, r1, r2, lsl r0
   13958:	cmp	r0, #0
   1395c:	movwne	r0, #1
   13960:	bx	lr
   13964:	push	{r4, r5, r6, r7, fp, lr}
   13968:	add	fp, sp, #16
   1396c:	sub	sp, sp, #8
   13970:	add	r5, sp, #4
   13974:	cmp	r0, #0
   13978:	mov	r7, r2
   1397c:	mov	r4, r1
   13980:	movne	r5, r0
   13984:	mov	r0, r5
   13988:	bl	11410 <mbrtowc@plt>
   1398c:	mov	r6, r0
   13990:	cmp	r7, #0
   13994:	beq	139b8 <__assert_fail@plt+0x23c8>
   13998:	cmn	r6, #2
   1399c:	bcc	139b8 <__assert_fail@plt+0x23c8>
   139a0:	mov	r0, #0
   139a4:	bl	16448 <__assert_fail@plt+0x4e58>
   139a8:	cmp	r0, #0
   139ac:	ldrbeq	r0, [r4]
   139b0:	moveq	r6, #1
   139b4:	streq	r0, [r5]
   139b8:	mov	r0, r6
   139bc:	sub	sp, fp, #16
   139c0:	pop	{r4, r5, r6, r7, fp, pc}
   139c4:	andeq	r0, r0, r0
   139c8:	push	{r4, sl, fp, lr}
   139cc:	add	fp, sp, #8
   139d0:	sub	sp, sp, #64	; 0x40
   139d4:	mov	r0, #85	; 0x55
   139d8:	bl	1138c <sysconf@plt>
   139dc:	mov	r4, r0
   139e0:	mov	r0, #30
   139e4:	bl	1138c <sysconf@plt>
   139e8:	orr	r1, r0, r4
   139ec:	cmn	r1, #1
   139f0:	ble	13a0c <__assert_fail@plt+0x241c>
   139f4:	vmov	s0, r0
   139f8:	vcvt.f64.s32	d16, s0
   139fc:	vmov	s0, r4
   13a00:	vcvt.f64.s32	d17, s0
   13a04:	vmul.f64	d0, d17, d16
   13a08:	b	13a20 <__assert_fail@plt+0x2430>
   13a0c:	mov	r0, sp
   13a10:	bl	11440 <sysinfo@plt>
   13a14:	cmp	r0, #0
   13a18:	beq	13a28 <__assert_fail@plt+0x2438>
   13a1c:	vldr	d0, [pc, #28]	; 13a40 <__assert_fail@plt+0x2450>
   13a20:	sub	sp, fp, #8
   13a24:	pop	{r4, sl, fp, pc}
   13a28:	vldr	s0, [sp, #16]
   13a2c:	vldr	s2, [sp, #52]	; 0x34
   13a30:	vcvt.f64.u32	d16, s2
   13a34:	vcvt.f64.u32	d17, s0
   13a38:	b	13a04 <__assert_fail@plt+0x2414>
   13a3c:	nop	{0}
   13a40:	andeq	r0, r0, r0
   13a44:	orrsmi	r0, r0, r0
   13a48:	push	{r4, sl, fp, lr}
   13a4c:	add	fp, sp, #8
   13a50:	sub	sp, sp, #64	; 0x40
   13a54:	mov	r0, #86	; 0x56
   13a58:	bl	1138c <sysconf@plt>
   13a5c:	mov	r4, r0
   13a60:	mov	r0, #30
   13a64:	bl	1138c <sysconf@plt>
   13a68:	orr	r1, r0, r4
   13a6c:	cmp	r1, #0
   13a70:	blt	13a8c <__assert_fail@plt+0x249c>
   13a74:	vmov	s0, r0
   13a78:	vcvt.f64.s32	d16, s0
   13a7c:	vmov	s0, r4
   13a80:	vcvt.f64.s32	d17, s0
   13a84:	vmul.f64	d0, d17, d16
   13a88:	b	13acc <__assert_fail@plt+0x24dc>
   13a8c:	mov	r0, sp
   13a90:	bl	11440 <sysinfo@plt>
   13a94:	cmp	r0, #0
   13a98:	beq	13aac <__assert_fail@plt+0x24bc>
   13a9c:	bl	139c8 <__assert_fail@plt+0x23d8>
   13aa0:	vmov.f64	d16, #80	; 0x3e800000  0.250
   13aa4:	vmul.f64	d0, d0, d16
   13aa8:	b	13acc <__assert_fail@plt+0x24dc>
   13aac:	vldr	s0, [sp, #20]
   13ab0:	vldr	s2, [sp, #28]
   13ab4:	vldr	s4, [sp, #52]	; 0x34
   13ab8:	vcvt.f64.u32	d16, s2
   13abc:	vcvt.f64.u32	d17, s0
   13ac0:	vcvt.f64.u32	d18, s4
   13ac4:	vadd.f64	d16, d17, d16
   13ac8:	vmul.f64	d0, d16, d18
   13acc:	sub	sp, fp, #8
   13ad0:	pop	{r4, sl, fp, pc}
   13ad4:	push	{r4, r5, fp, lr}
   13ad8:	add	fp, sp, #8
   13adc:	cmp	r0, #0
   13ae0:	beq	13b74 <__assert_fail@plt+0x2584>
   13ae4:	mov	r1, #47	; 0x2f
   13ae8:	mov	r4, r0
   13aec:	bl	1156c <strrchr@plt>
   13af0:	cmp	r0, #0
   13af4:	mov	r5, r4
   13af8:	addne	r5, r0, #1
   13afc:	sub	r0, r5, r4
   13b00:	cmp	r0, #7
   13b04:	blt	13b58 <__assert_fail@plt+0x2568>
   13b08:	movw	r1, #30672	; 0x77d0
   13b0c:	sub	r0, r5, #7
   13b10:	mov	r2, #7
   13b14:	movt	r1, #1
   13b18:	bl	115c0 <strncmp@plt>
   13b1c:	cmp	r0, #0
   13b20:	bne	13b58 <__assert_fail@plt+0x2568>
   13b24:	movw	r1, #30680	; 0x77d8
   13b28:	mov	r0, r5
   13b2c:	mov	r2, #3
   13b30:	movt	r1, #1
   13b34:	bl	115c0 <strncmp@plt>
   13b38:	cmp	r0, #0
   13b3c:	beq	13b48 <__assert_fail@plt+0x2558>
   13b40:	mov	r4, r5
   13b44:	b	13b58 <__assert_fail@plt+0x2568>
   13b48:	movw	r0, #33144	; 0x8178
   13b4c:	add	r4, r5, #3
   13b50:	movt	r0, #2
   13b54:	str	r4, [r0]
   13b58:	movw	r0, #33148	; 0x817c
   13b5c:	movt	r0, #2
   13b60:	str	r4, [r0]
   13b64:	movw	r0, #33260	; 0x81ec
   13b68:	movt	r0, #2
   13b6c:	str	r4, [r0]
   13b70:	pop	{r4, r5, fp, pc}
   13b74:	movw	r0, #33160	; 0x8188
   13b78:	movt	r0, #2
   13b7c:	ldr	r1, [r0]
   13b80:	movw	r0, #30616	; 0x7798
   13b84:	movt	r0, #1
   13b88:	bl	115b4 <fputs@plt>
   13b8c:	bl	115cc <abort@plt>
   13b90:	push	{r4, r5, r6, sl, fp, lr}
   13b94:	add	fp, sp, #16
   13b98:	mov	r4, r0
   13b9c:	movw	r0, #33264	; 0x81f0
   13ba0:	movt	r0, #2
   13ba4:	cmp	r4, #0
   13ba8:	moveq	r4, r0
   13bac:	bl	114dc <__errno_location@plt>
   13bb0:	ldr	r6, [r0]
   13bb4:	mov	r5, r0
   13bb8:	mov	r0, r4
   13bbc:	mov	r1, #48	; 0x30
   13bc0:	bl	161b0 <__assert_fail@plt+0x4bc0>
   13bc4:	str	r6, [r5]
   13bc8:	pop	{r4, r5, r6, sl, fp, pc}
   13bcc:	movw	r1, #33264	; 0x81f0
   13bd0:	cmp	r0, #0
   13bd4:	movt	r1, #2
   13bd8:	movne	r1, r0
   13bdc:	ldr	r0, [r1]
   13be0:	bx	lr
   13be4:	movw	r2, #33264	; 0x81f0
   13be8:	cmp	r0, #0
   13bec:	movt	r2, #2
   13bf0:	movne	r2, r0
   13bf4:	str	r1, [r2]
   13bf8:	bx	lr
   13bfc:	movw	r3, #33264	; 0x81f0
   13c00:	cmp	r0, #0
   13c04:	movt	r3, #2
   13c08:	movne	r3, r0
   13c0c:	ubfx	r0, r1, #5, #3
   13c10:	and	r1, r1, #31
   13c14:	add	r0, r3, r0, lsl #2
   13c18:	ldr	r3, [r0, #8]
   13c1c:	eor	r2, r2, r3, lsr r1
   13c20:	and	r2, r2, #1
   13c24:	eor	r2, r3, r2, lsl r1
   13c28:	str	r2, [r0, #8]
   13c2c:	mov	r0, #1
   13c30:	and	r0, r0, r3, lsr r1
   13c34:	bx	lr
   13c38:	movw	r2, #33264	; 0x81f0
   13c3c:	cmp	r0, #0
   13c40:	movt	r2, #2
   13c44:	movne	r2, r0
   13c48:	ldr	r0, [r2, #4]
   13c4c:	str	r1, [r2, #4]
   13c50:	bx	lr
   13c54:	movw	r3, #33264	; 0x81f0
   13c58:	cmp	r0, #0
   13c5c:	movt	r3, #2
   13c60:	movne	r3, r0
   13c64:	cmp	r1, #0
   13c68:	mov	r0, #10
   13c6c:	cmpne	r2, #0
   13c70:	str	r0, [r3]
   13c74:	bne	13c84 <__assert_fail@plt+0x2694>
   13c78:	push	{fp, lr}
   13c7c:	mov	fp, sp
   13c80:	bl	115cc <abort@plt>
   13c84:	str	r1, [r3, #40]	; 0x28
   13c88:	str	r2, [r3, #44]	; 0x2c
   13c8c:	bx	lr
   13c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c94:	add	fp, sp, #28
   13c98:	sub	sp, sp, #20
   13c9c:	mov	r7, r0
   13ca0:	ldr	r0, [fp, #8]
   13ca4:	movw	r5, #33264	; 0x81f0
   13ca8:	mov	r8, r3
   13cac:	mov	r9, r2
   13cb0:	mov	sl, r1
   13cb4:	movt	r5, #2
   13cb8:	cmp	r0, #0
   13cbc:	movne	r5, r0
   13cc0:	bl	114dc <__errno_location@plt>
   13cc4:	mov	r4, r0
   13cc8:	ldm	r5, {r0, r1}
   13ccc:	ldr	r2, [r5, #40]	; 0x28
   13cd0:	ldr	r3, [r5, #44]	; 0x2c
   13cd4:	add	r5, r5, #8
   13cd8:	ldr	r6, [r4]
   13cdc:	stm	sp, {r0, r1, r5}
   13ce0:	str	r2, [sp, #12]
   13ce4:	str	r3, [sp, #16]
   13ce8:	mov	r0, r7
   13cec:	mov	r1, sl
   13cf0:	mov	r2, r9
   13cf4:	mov	r3, r8
   13cf8:	bl	13d08 <__assert_fail@plt+0x2718>
   13cfc:	str	r6, [r4]
   13d00:	sub	sp, fp, #28
   13d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d0c:	add	fp, sp, #28
   13d10:	sub	sp, sp, #156	; 0x9c
   13d14:	str	r0, [fp, #-56]	; 0xffffffc8
   13d18:	ldr	r0, [fp, #12]
   13d1c:	mov	r4, r1
   13d20:	str	r3, [sp, #80]	; 0x50
   13d24:	str	r2, [fp, #-84]	; 0xffffffac
   13d28:	and	r1, r0, #4
   13d2c:	str	r1, [sp, #24]
   13d30:	and	r1, r0, #1
   13d34:	str	r1, [sp, #28]
   13d38:	ubfx	r7, r0, #1, #1
   13d3c:	bl	113ec <__ctype_get_mb_cur_max@plt>
   13d40:	str	r0, [sp, #32]
   13d44:	ldr	r0, [fp, #24]
   13d48:	ldr	r9, [fp, #8]
   13d4c:	mov	r2, #0
   13d50:	mov	r1, #0
   13d54:	mov	r5, #0
   13d58:	str	r2, [sp, #52]	; 0x34
   13d5c:	mov	r2, #1
   13d60:	str	r0, [sp, #72]	; 0x48
   13d64:	ldr	r0, [fp, #20]
   13d68:	str	r0, [sp, #64]	; 0x40
   13d6c:	mov	r0, #0
   13d70:	str	r0, [sp, #92]	; 0x5c
   13d74:	mov	r0, #0
   13d78:	str	r0, [fp, #-76]	; 0xffffffb4
   13d7c:	mov	r0, #0
   13d80:	cmp	r9, #10
   13d84:	str	r1, [sp, #68]	; 0x44
   13d88:	bhi	14d88 <__assert_fail@plt+0x3798>
   13d8c:	add	r1, pc, #28
   13d90:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d94:	ldr	lr, [sp, #80]	; 0x50
   13d98:	mov	r6, r4
   13d9c:	mov	r8, #0
   13da0:	mov	r3, #1
   13da4:	mov	sl, #0
   13da8:	mov	r4, r2
   13dac:	ldr	pc, [r1, r9, lsl #2]
   13db0:	andeq	r3, r1, r0, lsl #29
   13db4:			; <UNDEFINED> instruction: 0x00013ebc
   13db8:	muleq	r1, r0, lr
   13dbc:	andeq	r3, r1, r8, ror lr
   13dc0:			; <UNDEFINED> instruction: 0x00013eb0
   13dc4:	andeq	r3, r1, r8, lsl #30
   13dc8:	andeq	r3, r1, r0, lsr #29
   13dcc:	andeq	r3, r1, r8, ror #30
   13dd0:	ldrdeq	r3, [r1], -ip
   13dd4:	ldrdeq	r3, [r1], -ip
   13dd8:	andeq	r3, r1, r4, lsl #28
   13ddc:	movw	r0, #30760	; 0x7828
   13de0:	mov	r1, r9
   13de4:	movt	r0, #1
   13de8:	bl	154f0 <__assert_fail@plt+0x3f00>
   13dec:	str	r0, [sp, #64]	; 0x40
   13df0:	movw	r0, #30762	; 0x782a
   13df4:	mov	r1, r9
   13df8:	movt	r0, #1
   13dfc:	bl	154f0 <__assert_fail@plt+0x3f00>
   13e00:	str	r0, [sp, #72]	; 0x48
   13e04:	mov	r8, #0
   13e08:	mov	sl, r7
   13e0c:	tst	r7, #1
   13e10:	str	r5, [fp, #-48]	; 0xffffffd0
   13e14:	bne	13e50 <__assert_fail@plt+0x2860>
   13e18:	ldr	r0, [sp, #64]	; 0x40
   13e1c:	ldrb	r0, [r0]
   13e20:	cmp	r0, #0
   13e24:	beq	13e50 <__assert_fail@plt+0x2860>
   13e28:	ldr	r1, [sp, #64]	; 0x40
   13e2c:	mov	r8, #0
   13e30:	add	r1, r1, #1
   13e34:	cmp	r8, r6
   13e38:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13e3c:	strbcc	r0, [r2, r8]
   13e40:	ldrb	r0, [r1, r8]
   13e44:	add	r8, r8, #1
   13e48:	cmp	r0, #0
   13e4c:	bne	13e34 <__assert_fail@plt+0x2844>
   13e50:	ldr	r7, [sp, #72]	; 0x48
   13e54:	mov	r0, r7
   13e58:	bl	114b8 <strlen@plt>
   13e5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e60:	ldr	lr, [sp, #80]	; 0x50
   13e64:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13e68:	str	r0, [fp, #-76]	; 0xffffffb4
   13e6c:	str	r7, [sp, #92]	; 0x5c
   13e70:	mov	r3, #1
   13e74:	b	13f68 <__assert_fail@plt+0x2978>
   13e78:	mov	r0, #1
   13e7c:	b	13ebc <__assert_fail@plt+0x28cc>
   13e80:	mov	r9, #0
   13e84:	mov	r8, #0
   13e88:	mov	r3, r0
   13e8c:	b	13f64 <__assert_fail@plt+0x2974>
   13e90:	tst	r7, #1
   13e94:	bne	13ebc <__assert_fail@plt+0x28cc>
   13e98:	mov	r3, r0
   13e9c:	b	13ee4 <__assert_fail@plt+0x28f4>
   13ea0:	mov	r0, #1
   13ea4:	mov	r8, #0
   13ea8:	mov	r9, #5
   13eac:	b	13f1c <__assert_fail@plt+0x292c>
   13eb0:	mov	r3, #1
   13eb4:	tst	r7, #1
   13eb8:	beq	13ee4 <__assert_fail@plt+0x28f4>
   13ebc:	mov	r1, #1
   13ec0:	mov	r8, #0
   13ec4:	mov	r9, #2
   13ec8:	mov	r3, r0
   13ecc:	mov	sl, #1
   13ed0:	str	r1, [fp, #-76]	; 0xffffffb4
   13ed4:	movw	r1, #30762	; 0x782a
   13ed8:	movt	r1, #1
   13edc:	str	r1, [sp, #92]	; 0x5c
   13ee0:	b	13f68 <__assert_fail@plt+0x2978>
   13ee4:	cmp	r6, #0
   13ee8:	mov	r8, #1
   13eec:	mov	r9, #2
   13ef0:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13ef4:	movne	r0, #39	; 0x27
   13ef8:	strbne	r0, [r1]
   13efc:	movw	r0, #30762	; 0x782a
   13f00:	movt	r0, #1
   13f04:	b	13f58 <__assert_fail@plt+0x2968>
   13f08:	mov	r9, #5
   13f0c:	tst	r7, #1
   13f10:	beq	13f38 <__assert_fail@plt+0x2948>
   13f14:	mov	r0, #1
   13f18:	mov	r8, #0
   13f1c:	str	r0, [fp, #-76]	; 0xffffffb4
   13f20:	movw	r0, #29743	; 0x742f
   13f24:	mov	r3, #1
   13f28:	mov	sl, #1
   13f2c:	movt	r0, #1
   13f30:	str	r0, [sp, #92]	; 0x5c
   13f34:	b	13f68 <__assert_fail@plt+0x2978>
   13f38:	cmp	r6, #0
   13f3c:	mov	r8, #1
   13f40:	mov	r3, #1
   13f44:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13f48:	movne	r0, #34	; 0x22
   13f4c:	strbne	r0, [r1]
   13f50:	movw	r0, #29743	; 0x742f
   13f54:	movt	r0, #1
   13f58:	str	r0, [sp, #92]	; 0x5c
   13f5c:	mov	r0, #1
   13f60:	str	r0, [fp, #-76]	; 0xffffffb4
   13f64:	mov	sl, #0
   13f68:	ldr	r0, [fp, #16]
   13f6c:	mov	r7, #0
   13f70:	str	r9, [fp, #-64]	; 0xffffffc0
   13f74:	str	sl, [fp, #-72]	; 0xffffffb8
   13f78:	str	r3, [sp, #84]	; 0x54
   13f7c:	cmp	r0, #0
   13f80:	movwne	r0, #1
   13f84:	and	r0, r0, sl
   13f88:	str	r0, [fp, #-88]	; 0xffffffa8
   13f8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13f90:	cmp	r0, #0
   13f94:	movwne	r0, #1
   13f98:	subs	r2, r9, #2
   13f9c:	and	r1, r0, sl
   13fa0:	str	r2, [fp, #-80]	; 0xffffffb0
   13fa4:	and	r1, r3, r1
   13fa8:	str	r1, [sp, #44]	; 0x2c
   13fac:	clz	r1, r2
   13fb0:	lsr	r1, r1, #5
   13fb4:	and	r1, r1, sl
   13fb8:	str	r1, [sp, #56]	; 0x38
   13fbc:	mov	r1, r2
   13fc0:	eor	r2, sl, #1
   13fc4:	movwne	r1, #1
   13fc8:	str	r2, [sp, #88]	; 0x58
   13fcc:	orr	r2, r1, r2
   13fd0:	and	r1, r1, r3
   13fd4:	and	r0, r0, r1
   13fd8:	str	r2, [sp, #60]	; 0x3c
   13fdc:	str	r1, [fp, #-68]	; 0xffffffbc
   13fe0:	str	r0, [fp, #-60]	; 0xffffffc4
   13fe4:	eor	r0, r3, #1
   13fe8:	str	r0, [sp, #48]	; 0x30
   13fec:	cmn	lr, #1
   13ff0:	beq	14000 <__assert_fail@plt+0x2a10>
   13ff4:	cmp	r7, lr
   13ff8:	bne	1400c <__assert_fail@plt+0x2a1c>
   13ffc:	b	14bb8 <__assert_fail@plt+0x35c8>
   14000:	ldrb	r0, [ip, r7]
   14004:	cmp	r0, #0
   14008:	beq	14bc0 <__assert_fail@plt+0x35d0>
   1400c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14010:	mov	r9, #0
   14014:	str	r5, [fp, #-48]	; 0xffffffd0
   14018:	str	r6, [fp, #-52]	; 0xffffffcc
   1401c:	cmp	r0, #0
   14020:	beq	14060 <__assert_fail@plt+0x2a70>
   14024:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14028:	mov	r5, r4
   1402c:	add	r4, r7, r0
   14030:	cmp	r0, #2
   14034:	bcc	14050 <__assert_fail@plt+0x2a60>
   14038:	cmn	lr, #1
   1403c:	bne	14050 <__assert_fail@plt+0x2a60>
   14040:	mov	r0, ip
   14044:	bl	114b8 <strlen@plt>
   14048:	ldr	ip, [fp, #-84]	; 0xffffffac
   1404c:	mov	lr, r0
   14050:	cmp	r4, lr
   14054:	bls	14068 <__assert_fail@plt+0x2a78>
   14058:	mov	r6, #0
   1405c:	b	140a8 <__assert_fail@plt+0x2ab8>
   14060:	mov	r6, #0
   14064:	b	140ac <__assert_fail@plt+0x2abc>
   14068:	ldr	r1, [sp, #92]	; 0x5c
   1406c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14070:	add	r0, ip, r7
   14074:	mov	r4, lr
   14078:	bl	11374 <memcmp@plt>
   1407c:	ldr	r2, [sp, #88]	; 0x58
   14080:	cmp	r0, #0
   14084:	mov	r1, r0
   14088:	movwne	r1, #1
   1408c:	orr	r1, r1, r2
   14090:	tst	r1, #1
   14094:	beq	14c54 <__assert_fail@plt+0x3664>
   14098:	ldr	ip, [fp, #-84]	; 0xffffffac
   1409c:	clz	r0, r0
   140a0:	mov	lr, r4
   140a4:	lsr	r6, r0, #5
   140a8:	mov	r4, r5
   140ac:	ldrb	r5, [ip, r7]
   140b0:	cmp	r5, #126	; 0x7e
   140b4:	bhi	1447c <__assert_fail@plt+0x2e8c>
   140b8:	add	r3, pc, #16
   140bc:	mov	sl, #1
   140c0:	mov	r2, #110	; 0x6e
   140c4:	mov	r0, #97	; 0x61
   140c8:	mov	r1, #0
   140cc:	ldr	pc, [r3, r5, lsl #2]
   140d0:	andeq	r4, r1, r0, ror #6
   140d4:	andeq	r4, r1, ip, ror r4
   140d8:	andeq	r4, r1, ip, ror r4
   140dc:	andeq	r4, r1, ip, ror r4
   140e0:	andeq	r4, r1, ip, ror r4
   140e4:	andeq	r4, r1, ip, ror r4
   140e8:	andeq	r4, r1, ip, ror r4
   140ec:	andeq	r4, r1, r0, lsr #10
   140f0:	andeq	r4, r1, r0, asr #6
   140f4:	andeq	r4, r1, r8, lsr r3
   140f8:	andeq	r4, r1, ip, asr #6
   140fc:	ldrdeq	r4, [r1], -r0
   14100:	andeq	r4, r1, r0, lsr r3
   14104:	andeq	r4, r1, r8, asr #6
   14108:	andeq	r4, r1, ip, ror r4
   1410c:	andeq	r4, r1, ip, ror r4
   14110:	andeq	r4, r1, ip, ror r4
   14114:	andeq	r4, r1, ip, ror r4
   14118:	andeq	r4, r1, ip, ror r4
   1411c:	andeq	r4, r1, ip, ror r4
   14120:	andeq	r4, r1, ip, ror r4
   14124:	andeq	r4, r1, ip, ror r4
   14128:	andeq	r4, r1, ip, ror r4
   1412c:	andeq	r4, r1, ip, ror r4
   14130:	andeq	r4, r1, ip, ror r4
   14134:	andeq	r4, r1, ip, ror r4
   14138:	andeq	r4, r1, ip, ror r4
   1413c:	andeq	r4, r1, ip, ror r4
   14140:	andeq	r4, r1, ip, ror r4
   14144:	andeq	r4, r1, ip, ror r4
   14148:	andeq	r4, r1, ip, ror r4
   1414c:	andeq	r4, r1, ip, ror r4
   14150:	andeq	r4, r1, r0, ror #9
   14154:	andeq	r4, r1, r4, ror #9
   14158:	andeq	r4, r1, r4, ror #9
   1415c:	andeq	r4, r1, r0, ror #5
   14160:	andeq	r4, r1, r4, ror #9
   14164:	andeq	r4, r1, ip, asr #5
   14168:	andeq	r4, r1, r4, ror #9
   1416c:	ldrdeq	r4, [r1], -r8
   14170:	andeq	r4, r1, r4, ror #9
   14174:	andeq	r4, r1, r4, ror #9
   14178:	andeq	r4, r1, r4, ror #9
   1417c:	andeq	r4, r1, ip, asr #5
   14180:	andeq	r4, r1, ip, asr #5
   14184:	andeq	r4, r1, ip, asr #5
   14188:	andeq	r4, r1, ip, asr #5
   1418c:	andeq	r4, r1, ip, asr #5
   14190:	andeq	r4, r1, ip, asr #5
   14194:	andeq	r4, r1, ip, asr #5
   14198:	andeq	r4, r1, ip, asr #5
   1419c:	andeq	r4, r1, ip, asr #5
   141a0:	andeq	r4, r1, ip, asr #5
   141a4:	andeq	r4, r1, ip, asr #5
   141a8:	andeq	r4, r1, ip, asr #5
   141ac:	andeq	r4, r1, ip, asr #5
   141b0:	andeq	r4, r1, ip, asr #5
   141b4:	andeq	r4, r1, ip, asr #5
   141b8:	andeq	r4, r1, ip, asr #5
   141bc:	andeq	r4, r1, r4, ror #9
   141c0:	andeq	r4, r1, r4, ror #9
   141c4:	andeq	r4, r1, r4, ror #9
   141c8:	andeq	r4, r1, r4, ror #9
   141cc:	andeq	r4, r1, r4, lsr #7
   141d0:	andeq	r4, r1, ip, ror r4
   141d4:	andeq	r4, r1, ip, asr #5
   141d8:	andeq	r4, r1, ip, asr #5
   141dc:	andeq	r4, r1, ip, asr #5
   141e0:	andeq	r4, r1, ip, asr #5
   141e4:	andeq	r4, r1, ip, asr #5
   141e8:	andeq	r4, r1, ip, asr #5
   141ec:	andeq	r4, r1, ip, asr #5
   141f0:	andeq	r4, r1, ip, asr #5
   141f4:	andeq	r4, r1, ip, asr #5
   141f8:	andeq	r4, r1, ip, asr #5
   141fc:	andeq	r4, r1, ip, asr #5
   14200:	andeq	r4, r1, ip, asr #5
   14204:	andeq	r4, r1, ip, asr #5
   14208:	andeq	r4, r1, ip, asr #5
   1420c:	andeq	r4, r1, ip, asr #5
   14210:	andeq	r4, r1, ip, asr #5
   14214:	andeq	r4, r1, ip, asr #5
   14218:	andeq	r4, r1, ip, asr #5
   1421c:	andeq	r4, r1, ip, asr #5
   14220:	andeq	r4, r1, ip, asr #5
   14224:	andeq	r4, r1, ip, asr #5
   14228:	andeq	r4, r1, ip, asr #5
   1422c:	andeq	r4, r1, ip, asr #5
   14230:	andeq	r4, r1, ip, asr #5
   14234:	andeq	r4, r1, ip, asr #5
   14238:	andeq	r4, r1, ip, asr #5
   1423c:	andeq	r4, r1, r4, ror #9
   14240:	andeq	r4, r1, ip, lsl #6
   14244:	andeq	r4, r1, ip, asr #5
   14248:	andeq	r4, r1, r4, ror #9
   1424c:	andeq	r4, r1, ip, asr #5
   14250:	andeq	r4, r1, r4, ror #9
   14254:	andeq	r4, r1, ip, asr #5
   14258:	andeq	r4, r1, ip, asr #5
   1425c:	andeq	r4, r1, ip, asr #5
   14260:	andeq	r4, r1, ip, asr #5
   14264:	andeq	r4, r1, ip, asr #5
   14268:	andeq	r4, r1, ip, asr #5
   1426c:	andeq	r4, r1, ip, asr #5
   14270:	andeq	r4, r1, ip, asr #5
   14274:	andeq	r4, r1, ip, asr #5
   14278:	andeq	r4, r1, ip, asr #5
   1427c:	andeq	r4, r1, ip, asr #5
   14280:	andeq	r4, r1, ip, asr #5
   14284:	andeq	r4, r1, ip, asr #5
   14288:	andeq	r4, r1, ip, asr #5
   1428c:	andeq	r4, r1, ip, asr #5
   14290:	andeq	r4, r1, ip, asr #5
   14294:	andeq	r4, r1, ip, asr #5
   14298:	andeq	r4, r1, ip, asr #5
   1429c:	andeq	r4, r1, ip, asr #5
   142a0:	andeq	r4, r1, ip, asr #5
   142a4:	andeq	r4, r1, ip, asr #5
   142a8:	andeq	r4, r1, ip, asr #5
   142ac:	andeq	r4, r1, ip, asr #5
   142b0:	andeq	r4, r1, ip, asr #5
   142b4:	andeq	r4, r1, ip, asr #5
   142b8:	andeq	r4, r1, ip, asr #5
   142bc:	strdeq	r4, [r1], -r0
   142c0:	andeq	r4, r1, r4, ror #9
   142c4:	strdeq	r4, [r1], -r0
   142c8:	andeq	r4, r1, r0, ror #5
   142cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   142d0:	cmp	r0, #0
   142d4:	beq	14534 <__assert_fail@plt+0x2f44>
   142d8:	ldr	r0, [fp, #16]
   142dc:	b	14538 <__assert_fail@plt+0x2f48>
   142e0:	mov	sl, #0
   142e4:	cmp	r7, #0
   142e8:	bne	14750 <__assert_fail@plt+0x3160>
   142ec:	b	144e0 <__assert_fail@plt+0x2ef0>
   142f0:	mov	sl, #0
   142f4:	cmn	lr, #1
   142f8:	beq	144cc <__assert_fail@plt+0x2edc>
   142fc:	cmp	r7, #0
   14300:	cmpeq	lr, #1
   14304:	bne	14750 <__assert_fail@plt+0x3160>
   14308:	b	144e0 <__assert_fail@plt+0x2ef0>
   1430c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14310:	cmp	r0, #2
   14314:	bne	14504 <__assert_fail@plt+0x2f14>
   14318:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1431c:	tst	r0, #1
   14320:	bne	14c70 <__assert_fail@plt+0x3680>
   14324:	mov	r9, #0
   14328:	mov	r0, #92	; 0x5c
   1432c:	b	14518 <__assert_fail@plt+0x2f28>
   14330:	mov	r0, #102	; 0x66
   14334:	b	14520 <__assert_fail@plt+0x2f30>
   14338:	mov	r2, #116	; 0x74
   1433c:	b	1434c <__assert_fail@plt+0x2d5c>
   14340:	mov	r0, #98	; 0x62
   14344:	b	14520 <__assert_fail@plt+0x2f30>
   14348:	mov	r2, #114	; 0x72
   1434c:	ldr	r0, [sp, #60]	; 0x3c
   14350:	tst	r0, #1
   14354:	mov	r0, r2
   14358:	bne	14520 <__assert_fail@plt+0x2f30>
   1435c:	b	14c70 <__assert_fail@plt+0x3680>
   14360:	ldr	r0, [sp, #84]	; 0x54
   14364:	tst	r0, #1
   14368:	beq	1460c <__assert_fail@plt+0x301c>
   1436c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14370:	tst	r0, #1
   14374:	bne	14d78 <__assert_fail@plt+0x3788>
   14378:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1437c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14380:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14384:	cmp	r0, #2
   14388:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1438c:	movwne	r0, #1
   14390:	orr	r0, r0, r3
   14394:	tst	r0, #1
   14398:	beq	14a8c <__assert_fail@plt+0x349c>
   1439c:	mov	r0, r8
   143a0:	b	14acc <__assert_fail@plt+0x34dc>
   143a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   143a8:	mov	r9, #0
   143ac:	mov	r5, #63	; 0x3f
   143b0:	cmp	r0, #5
   143b4:	beq	14758 <__assert_fail@plt+0x3168>
   143b8:	cmp	r0, #2
   143bc:	bne	14818 <__assert_fail@plt+0x3228>
   143c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   143c4:	tst	r0, #1
   143c8:	beq	1481c <__assert_fail@plt+0x322c>
   143cc:	b	14c70 <__assert_fail@plt+0x3680>
   143d0:	mov	r0, #118	; 0x76
   143d4:	b	14520 <__assert_fail@plt+0x2f30>
   143d8:	mov	r0, #1
   143dc:	mov	r5, #39	; 0x27
   143e0:	str	r0, [sp, #52]	; 0x34
   143e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   143e8:	cmp	r0, #2
   143ec:	bne	14474 <__assert_fail@plt+0x2e84>
   143f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   143f4:	tst	r0, #1
   143f8:	bne	14c70 <__assert_fail@plt+0x3680>
   143fc:	ldr	r3, [sp, #68]	; 0x44
   14400:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14404:	mov	r9, #0
   14408:	clz	r1, r2
   1440c:	cmp	r3, #0
   14410:	mov	r0, r3
   14414:	movwne	r0, #1
   14418:	lsr	r1, r1, #5
   1441c:	orrs	r0, r0, r1
   14420:	moveq	r3, r2
   14424:	moveq	r2, r0
   14428:	cmp	r8, r2
   1442c:	str	r3, [sp, #68]	; 0x44
   14430:	str	r2, [fp, #-52]	; 0xffffffcc
   14434:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   14438:	movcc	r0, #39	; 0x27
   1443c:	strbcc	r0, [r1, r8]
   14440:	add	r0, r8, #1
   14444:	cmp	r0, r2
   14448:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1444c:	movcc	r1, #92	; 0x5c
   14450:	strbcc	r1, [r3, r0]
   14454:	add	r0, r8, #2
   14458:	add	r8, r8, #3
   1445c:	cmp	r0, r2
   14460:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14464:	movcc	r1, #39	; 0x27
   14468:	strbcc	r1, [r2, r0]
   1446c:	mov	r0, #0
   14470:	str	r0, [fp, #-48]	; 0xffffffd0
   14474:	mov	sl, #1
   14478:	b	142cc <__assert_fail@plt+0x2cdc>
   1447c:	ldr	r0, [sp, #32]
   14480:	cmp	r0, #1
   14484:	bne	14630 <__assert_fail@plt+0x3040>
   14488:	str	lr, [sp, #80]	; 0x50
   1448c:	bl	11488 <__ctype_b_loc@plt>
   14490:	ldr	r0, [r0]
   14494:	ldr	ip, [fp, #-84]	; 0xffffffac
   14498:	mov	r1, #1
   1449c:	add	r0, r0, r5, lsl #1
   144a0:	ldrb	r0, [r0, #1]
   144a4:	ubfx	sl, r0, #6, #1
   144a8:	ldr	r0, [sp, #48]	; 0x30
   144ac:	mov	r2, r1
   144b0:	cmp	r1, #1
   144b4:	orr	r0, sl, r0
   144b8:	bhi	14824 <__assert_fail@plt+0x3234>
   144bc:	tst	r0, #1
   144c0:	beq	14824 <__assert_fail@plt+0x3234>
   144c4:	ldr	lr, [sp, #80]	; 0x50
   144c8:	b	142cc <__assert_fail@plt+0x2cdc>
   144cc:	cmp	r7, #0
   144d0:	bne	1474c <__assert_fail@plt+0x315c>
   144d4:	ldrb	r0, [ip, #1]
   144d8:	cmp	r0, #0
   144dc:	bne	1474c <__assert_fail@plt+0x315c>
   144e0:	mov	r1, #1
   144e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   144e8:	cmp	r0, #2
   144ec:	bne	144fc <__assert_fail@plt+0x2f0c>
   144f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   144f4:	tst	r0, #1
   144f8:	bne	14c70 <__assert_fail@plt+0x3680>
   144fc:	mov	sl, r1
   14500:	b	142cc <__assert_fail@plt+0x2cdc>
   14504:	ldr	r1, [sp, #44]	; 0x2c
   14508:	mov	r9, #0
   1450c:	mov	r0, #92	; 0x5c
   14510:	cmp	r1, #0
   14514:	beq	14520 <__assert_fail@plt+0x2f30>
   14518:	mov	sl, #0
   1451c:	b	14a38 <__assert_fail@plt+0x3448>
   14520:	ldr	r1, [sp, #84]	; 0x54
   14524:	mov	sl, #0
   14528:	mov	r9, #0
   1452c:	tst	r1, #1
   14530:	bne	1456c <__assert_fail@plt+0x2f7c>
   14534:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14538:	cmp	r0, #0
   1453c:	mov	r0, r5
   14540:	beq	14564 <__assert_fail@plt+0x2f74>
   14544:	ldr	r1, [fp, #16]
   14548:	ubfx	r0, r5, #5, #3
   1454c:	mov	r2, #1
   14550:	ldr	r0, [r1, r0, lsl #2]
   14554:	and	r1, r5, #31
   14558:	tst	r0, r2, lsl r1
   1455c:	mov	r0, r5
   14560:	bne	1456c <__assert_fail@plt+0x2f7c>
   14564:	cmp	r6, #0
   14568:	beq	14a38 <__assert_fail@plt+0x3448>
   1456c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14570:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14574:	tst	r1, #1
   14578:	bne	14c4c <__assert_fail@plt+0x365c>
   1457c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14580:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14584:	cmp	r1, #2
   14588:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1458c:	movwne	r1, #1
   14590:	orr	r1, r1, r5
   14594:	tst	r1, #1
   14598:	bne	145dc <__assert_fail@plt+0x2fec>
   1459c:	cmp	r8, r6
   145a0:	mov	r5, #1
   145a4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   145a8:	movcc	r1, #39	; 0x27
   145ac:	strbcc	r1, [r2, r8]
   145b0:	add	r1, r8, #1
   145b4:	cmp	r1, r6
   145b8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   145bc:	movcc	r2, #36	; 0x24
   145c0:	strbcc	r2, [r3, r1]
   145c4:	add	r1, r8, #2
   145c8:	add	r8, r8, #3
   145cc:	cmp	r1, r6
   145d0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   145d4:	movcc	r2, #39	; 0x27
   145d8:	strbcc	r2, [r3, r1]
   145dc:	cmp	r8, r6
   145e0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   145e4:	movcc	r1, #92	; 0x5c
   145e8:	strbcc	r1, [r2, r8]
   145ec:	add	r8, r8, #1
   145f0:	cmp	r8, r6
   145f4:	and	r4, r4, sl
   145f8:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   145fc:	strbcc	r0, [r1, r8]
   14600:	add	r8, r8, #1
   14604:	add	r7, r7, #1
   14608:	b	13fec <__assert_fail@plt+0x29fc>
   1460c:	ldr	r0, [sp, #28]
   14610:	mov	sl, #0
   14614:	mov	r9, #0
   14618:	mov	r5, #0
   1461c:	cmp	r0, #0
   14620:	beq	14534 <__assert_fail@plt+0x2f44>
   14624:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14628:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1462c:	b	14604 <__assert_fail@plt+0x3014>
   14630:	mov	r0, #0
   14634:	cmn	lr, #1
   14638:	str	r6, [sp, #76]	; 0x4c
   1463c:	str	r4, [sp, #20]
   14640:	str	r0, [fp, #-36]	; 0xffffffdc
   14644:	str	r0, [fp, #-40]	; 0xffffffd8
   14648:	bne	1465c <__assert_fail@plt+0x306c>
   1464c:	mov	r0, ip
   14650:	bl	114b8 <strlen@plt>
   14654:	ldr	ip, [fp, #-84]	; 0xffffffac
   14658:	mov	lr, r0
   1465c:	add	r0, ip, r7
   14660:	mov	sl, #1
   14664:	mov	r6, #0
   14668:	sub	r4, fp, #40	; 0x28
   1466c:	str	lr, [sp, #80]	; 0x50
   14670:	str	r0, [sp, #36]	; 0x24
   14674:	str	r6, [sp, #40]	; 0x28
   14678:	add	r6, r6, r7
   1467c:	sub	r0, fp, #44	; 0x2c
   14680:	mov	r3, r4
   14684:	add	r1, ip, r6
   14688:	sub	r2, lr, r6
   1468c:	bl	13964 <__assert_fail@plt+0x2374>
   14690:	cmp	r0, #0
   14694:	beq	14ba0 <__assert_fail@plt+0x35b0>
   14698:	cmn	r0, #1
   1469c:	beq	14b60 <__assert_fail@plt+0x3570>
   146a0:	ldr	lr, [sp, #80]	; 0x50
   146a4:	cmn	r0, #2
   146a8:	beq	14b68 <__assert_fail@plt+0x3578>
   146ac:	ldr	r2, [sp, #56]	; 0x38
   146b0:	cmp	r0, #2
   146b4:	mov	r1, #0
   146b8:	movwcc	r1, #1
   146bc:	eor	r2, r2, #1
   146c0:	orrs	r1, r2, r1
   146c4:	bne	14710 <__assert_fail@plt+0x3120>
   146c8:	ldr	r1, [sp, #40]	; 0x28
   146cc:	ldr	r2, [sp, #36]	; 0x24
   146d0:	add	ip, r2, r1
   146d4:	mov	r2, #1
   146d8:	ldrb	r3, [ip, r2]
   146dc:	sub	r6, r3, #94	; 0x5e
   146e0:	cmp	r6, #30
   146e4:	bhi	146f8 <__assert_fail@plt+0x3108>
   146e8:	mov	r4, #1
   146ec:	mov	r1, #1073741829	; 0x40000005
   146f0:	tst	r1, r4, lsl r6
   146f4:	bne	14c6c <__assert_fail@plt+0x367c>
   146f8:	sub	r3, r3, #91	; 0x5b
   146fc:	cmp	r3, #2
   14700:	bcc	14c6c <__assert_fail@plt+0x367c>
   14704:	add	r2, r2, #1
   14708:	cmp	r2, r0
   1470c:	bcc	146d8 <__assert_fail@plt+0x30e8>
   14710:	ldr	r6, [sp, #40]	; 0x28
   14714:	add	r6, r0, r6
   14718:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1471c:	bl	113c8 <iswprint@plt>
   14720:	cmp	r0, #0
   14724:	sub	r4, fp, #40	; 0x28
   14728:	movwne	r0, #1
   1472c:	and	sl, sl, r0
   14730:	mov	r0, r4
   14734:	bl	11368 <mbsinit@plt>
   14738:	ldr	lr, [sp, #80]	; 0x50
   1473c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14740:	cmp	r0, #0
   14744:	beq	14674 <__assert_fail@plt+0x3084>
   14748:	b	14ba8 <__assert_fail@plt+0x35b8>
   1474c:	mvn	lr, #0
   14750:	mov	r9, #0
   14754:	b	142cc <__assert_fail@plt+0x2cdc>
   14758:	ldr	r0, [sp, #24]
   1475c:	cmp	r0, #0
   14760:	beq	14818 <__assert_fail@plt+0x3228>
   14764:	add	r0, r7, #2
   14768:	cmp	r0, lr
   1476c:	bcs	14818 <__assert_fail@plt+0x3228>
   14770:	add	r1, ip, r7
   14774:	ldrb	r1, [r1, #1]
   14778:	cmp	r1, #63	; 0x3f
   1477c:	bne	14818 <__assert_fail@plt+0x3228>
   14780:	ldrb	r5, [ip, r0]
   14784:	sub	r1, r5, #33	; 0x21
   14788:	cmp	r1, #29
   1478c:	bhi	14818 <__assert_fail@plt+0x3228>
   14790:	movw	r3, #20929	; 0x51c1
   14794:	mov	r2, #1
   14798:	movt	r3, #14336	; 0x3800
   1479c:	tst	r3, r2, lsl r1
   147a0:	beq	14818 <__assert_fail@plt+0x3228>
   147a4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   147a8:	tst	r1, #1
   147ac:	bne	14d80 <__assert_fail@plt+0x3790>
   147b0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   147b4:	mov	r7, r0
   147b8:	cmp	r8, r1
   147bc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   147c0:	movcc	r1, #63	; 0x3f
   147c4:	strbcc	r1, [r2, r8]
   147c8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   147cc:	add	r1, r8, #1
   147d0:	cmp	r1, r2
   147d4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   147d8:	movcc	r2, #34	; 0x22
   147dc:	strbcc	r2, [r3, r1]
   147e0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   147e4:	add	r1, r8, #2
   147e8:	cmp	r1, r2
   147ec:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   147f0:	movcc	r2, #34	; 0x22
   147f4:	strbcc	r2, [r3, r1]
   147f8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   147fc:	add	r1, r8, #3
   14800:	add	r8, r8, #4
   14804:	cmp	r1, r2
   14808:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1480c:	movcc	r2, #63	; 0x3f
   14810:	strbcc	r2, [r3, r1]
   14814:	b	1481c <__assert_fail@plt+0x322c>
   14818:	mov	r5, #63	; 0x3f
   1481c:	mov	sl, #0
   14820:	b	142cc <__assert_fail@plt+0x2cdc>
   14824:	str	r0, [sp, #40]	; 0x28
   14828:	add	r0, r2, r7
   1482c:	str	r6, [sp, #76]	; 0x4c
   14830:	add	r1, r7, #1
   14834:	ldr	lr, [sp, #80]	; 0x50
   14838:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1483c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14840:	mov	r3, #0
   14844:	str	r0, [sp, #36]	; 0x24
   14848:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1484c:	b	148e0 <__assert_fail@plt+0x32f0>
   14850:	str	r0, [sp, #76]	; 0x4c
   14854:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14858:	cmp	r9, #0
   1485c:	movwne	r9, #1
   14860:	mvn	r7, r0
   14864:	orr	r7, r7, r9
   14868:	tst	r7, #1
   1486c:	bne	148bc <__assert_fail@plt+0x32cc>
   14870:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14874:	cmp	r8, r6
   14878:	bcs	14890 <__assert_fail@plt+0x32a0>
   1487c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   14880:	mov	r2, r4
   14884:	mov	r4, #39	; 0x27
   14888:	strb	r4, [r7, r8]
   1488c:	mov	r4, r2
   14890:	add	r7, r8, #1
   14894:	cmp	r7, r6
   14898:	bcs	148b0 <__assert_fail@plt+0x32c0>
   1489c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   148a0:	mov	r2, r4
   148a4:	mov	r4, #39	; 0x27
   148a8:	strb	r4, [r0, r7]
   148ac:	mov	r4, r2
   148b0:	add	r8, r8, #2
   148b4:	mov	r0, #0
   148b8:	b	148c4 <__assert_fail@plt+0x32d4>
   148bc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   148c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   148c4:	cmp	r8, r6
   148c8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   148cc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   148d0:	strbcc	r5, [r2, r8]
   148d4:	add	r8, r8, #1
   148d8:	ldrb	r5, [ip, r1]
   148dc:	add	r1, r1, #1
   148e0:	ldr	r2, [sp, #40]	; 0x28
   148e4:	tst	r2, #1
   148e8:	beq	14924 <__assert_fail@plt+0x3334>
   148ec:	ldr	r2, [sp, #76]	; 0x4c
   148f0:	str	r0, [fp, #-48]	; 0xffffffd0
   148f4:	tst	r2, #1
   148f8:	beq	1491c <__assert_fail@plt+0x332c>
   148fc:	cmp	r8, r6
   14900:	bcs	14918 <__assert_fail@plt+0x3328>
   14904:	ldr	r6, [fp, #-56]	; 0xffffffc8
   14908:	mov	r2, r4
   1490c:	mov	r4, #92	; 0x5c
   14910:	strb	r4, [r6, r8]
   14914:	mov	r4, r2
   14918:	add	r8, r8, #1
   1491c:	mov	r0, #0
   14920:	b	14a18 <__assert_fail@plt+0x3428>
   14924:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14928:	tst	r2, #1
   1492c:	bne	14c78 <__assert_fail@plt+0x3688>
   14930:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14934:	cmp	r7, #2
   14938:	movwne	r3, #1
   1493c:	orr	r3, r3, r0
   14940:	tst	r3, #1
   14944:	bne	149a0 <__assert_fail@plt+0x33b0>
   14948:	cmp	r8, r6
   1494c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14950:	movcc	r3, #39	; 0x27
   14954:	strbcc	r3, [r2, r8]
   14958:	add	r3, r8, #1
   1495c:	cmp	r3, r6
   14960:	bcs	14978 <__assert_fail@plt+0x3388>
   14964:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14968:	mov	r7, r4
   1496c:	mov	r4, #36	; 0x24
   14970:	strb	r4, [r2, r3]
   14974:	mov	r4, r7
   14978:	add	r3, r8, #2
   1497c:	cmp	r3, r6
   14980:	bcs	14998 <__assert_fail@plt+0x33a8>
   14984:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14988:	mov	r7, r4
   1498c:	mov	r4, #39	; 0x27
   14990:	strb	r4, [r2, r3]
   14994:	mov	r4, r7
   14998:	add	r8, r8, #3
   1499c:	mov	r0, #1
   149a0:	cmp	r8, r6
   149a4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   149a8:	movcc	r3, #92	; 0x5c
   149ac:	strbcc	r3, [r2, r8]
   149b0:	add	r3, r8, #1
   149b4:	cmp	r3, r6
   149b8:	bcs	149d8 <__assert_fail@plt+0x33e8>
   149bc:	mov	r2, r4
   149c0:	and	r7, r5, #192	; 0xc0
   149c4:	mov	r4, #48	; 0x30
   149c8:	orr	r7, r4, r7, lsr #6
   149cc:	mov	r4, r2
   149d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   149d4:	strb	r7, [r2, r3]
   149d8:	add	r3, r8, #2
   149dc:	cmp	r3, r6
   149e0:	bcs	14a00 <__assert_fail@plt+0x3410>
   149e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   149e8:	mov	r6, r4
   149ec:	lsr	r7, r5, #3
   149f0:	mov	r4, #6
   149f4:	bfi	r7, r4, #3, #29
   149f8:	mov	r4, r6
   149fc:	strb	r7, [r2, r3]
   14a00:	str	r0, [fp, #-48]	; 0xffffffd0
   14a04:	ldr	r0, [sp, #76]	; 0x4c
   14a08:	mov	r3, #6
   14a0c:	add	r8, r8, #3
   14a10:	bfi	r5, r3, #3, #29
   14a14:	mov	r3, #1
   14a18:	ldr	r2, [sp, #36]	; 0x24
   14a1c:	and	r9, r3, #1
   14a20:	cmp	r2, r1
   14a24:	bhi	14850 <__assert_fail@plt+0x3260>
   14a28:	cmp	r9, #0
   14a2c:	sub	r7, r1, #1
   14a30:	mov	r0, r5
   14a34:	movwne	r9, #1
   14a38:	cmp	r9, #0
   14a3c:	bne	14a80 <__assert_fail@plt+0x3490>
   14a40:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14a44:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14a48:	tst	r5, #1
   14a4c:	beq	145f0 <__assert_fail@plt+0x3000>
   14a50:	cmp	r8, r6
   14a54:	mov	r5, #0
   14a58:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14a5c:	movcc	r1, #39	; 0x27
   14a60:	strbcc	r1, [r2, r8]
   14a64:	add	r1, r8, #1
   14a68:	add	r8, r8, #2
   14a6c:	cmp	r1, r6
   14a70:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14a74:	movcc	r2, #39	; 0x27
   14a78:	strbcc	r2, [r3, r1]
   14a7c:	b	145f0 <__assert_fail@plt+0x3000>
   14a80:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14a84:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14a88:	b	145f0 <__assert_fail@plt+0x3000>
   14a8c:	cmp	r8, r1
   14a90:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14a94:	movcc	r0, #39	; 0x27
   14a98:	strbcc	r0, [r2, r8]
   14a9c:	add	r0, r8, #1
   14aa0:	cmp	r0, r1
   14aa4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14aa8:	movcc	r2, #36	; 0x24
   14aac:	strbcc	r2, [r3, r0]
   14ab0:	add	r0, r8, #2
   14ab4:	cmp	r0, r1
   14ab8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14abc:	movcc	r2, #39	; 0x27
   14ac0:	strbcc	r2, [r3, r0]
   14ac4:	add	r0, r8, #3
   14ac8:	mov	r3, #1
   14acc:	cmp	r0, r1
   14ad0:	add	r8, r0, #1
   14ad4:	str	r3, [fp, #-48]	; 0xffffffd0
   14ad8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14adc:	movcc	r1, #92	; 0x5c
   14ae0:	strbcc	r1, [r2, r0]
   14ae4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14ae8:	cmp	r1, #2
   14aec:	beq	14b50 <__assert_fail@plt+0x3560>
   14af0:	add	r1, r7, #1
   14af4:	mov	sl, #0
   14af8:	mov	r9, #1
   14afc:	mov	r5, #48	; 0x30
   14b00:	cmp	r1, lr
   14b04:	bcs	142cc <__assert_fail@plt+0x2cdc>
   14b08:	ldrb	r1, [ip, r1]
   14b0c:	sub	r1, r1, #48	; 0x30
   14b10:	uxtb	r1, r1
   14b14:	cmp	r1, #9
   14b18:	bhi	142cc <__assert_fail@plt+0x2cdc>
   14b1c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14b20:	cmp	r8, r1
   14b24:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14b28:	movcc	r1, #48	; 0x30
   14b2c:	strbcc	r1, [r2, r8]
   14b30:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14b34:	add	r1, r0, #2
   14b38:	add	r8, r0, #3
   14b3c:	cmp	r1, r2
   14b40:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14b44:	movcc	r2, #48	; 0x30
   14b48:	strbcc	r2, [r3, r1]
   14b4c:	b	142cc <__assert_fail@plt+0x2cdc>
   14b50:	mov	r0, #48	; 0x30
   14b54:	mov	r9, #1
   14b58:	mov	sl, #0
   14b5c:	b	14564 <__assert_fail@plt+0x2f74>
   14b60:	mov	sl, #0
   14b64:	b	14ba0 <__assert_fail@plt+0x35b0>
   14b68:	mov	sl, #0
   14b6c:	cmp	lr, r6
   14b70:	bls	14ba0 <__assert_fail@plt+0x35b0>
   14b74:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b78:	ldr	r6, [sp, #40]	; 0x28
   14b7c:	ldr	r0, [sp, #36]	; 0x24
   14b80:	ldrb	r0, [r0, r6]
   14b84:	cmp	r0, #0
   14b88:	beq	14ba8 <__assert_fail@plt+0x35b8>
   14b8c:	add	r6, r6, #1
   14b90:	add	r0, r7, r6
   14b94:	cmp	r0, lr
   14b98:	bcc	14b7c <__assert_fail@plt+0x358c>
   14b9c:	b	14ba8 <__assert_fail@plt+0x35b8>
   14ba0:	ldr	ip, [fp, #-84]	; 0xffffffac
   14ba4:	ldr	r6, [sp, #40]	; 0x28
   14ba8:	mov	r1, r6
   14bac:	ldr	r4, [sp, #20]
   14bb0:	ldr	r6, [sp, #76]	; 0x4c
   14bb4:	b	144a8 <__assert_fail@plt+0x2eb8>
   14bb8:	mov	lr, r7
   14bbc:	b	14bc4 <__assert_fail@plt+0x35d4>
   14bc0:	mvn	lr, #0
   14bc4:	ldr	r9, [fp, #-64]	; 0xffffffc0
   14bc8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14bcc:	eor	r0, r9, #2
   14bd0:	orr	r0, r0, r8
   14bd4:	clz	r0, r0
   14bd8:	lsr	r0, r0, #5
   14bdc:	tst	r1, r0
   14be0:	bne	14cdc <__assert_fail@plt+0x36ec>
   14be4:	mov	r0, r1
   14be8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14bec:	cmp	r9, #2
   14bf0:	movwne	r1, #1
   14bf4:	orr	r0, r0, r1
   14bf8:	tst	r0, #1
   14bfc:	bne	14d1c <__assert_fail@plt+0x372c>
   14c00:	ldr	r0, [sp, #52]	; 0x34
   14c04:	ldr	r1, [sp, #68]	; 0x44
   14c08:	str	lr, [sp, #80]	; 0x50
   14c0c:	eor	r0, r0, #1
   14c10:	tst	r0, #1
   14c14:	bne	14d1c <__assert_fail@plt+0x372c>
   14c18:	tst	r4, #1
   14c1c:	bne	14ce4 <__assert_fail@plt+0x36f4>
   14c20:	mov	r7, #0
   14c24:	cmp	r1, #0
   14c28:	beq	14d14 <__assert_fail@plt+0x3724>
   14c2c:	ldr	r0, [sp, #84]	; 0x54
   14c30:	mov	r3, #0
   14c34:	cmp	r6, #0
   14c38:	mov	r2, #0
   14c3c:	mov	r4, r1
   14c40:	str	r3, [fp, #-72]	; 0xffffffb8
   14c44:	beq	13d80 <__assert_fail@plt+0x2790>
   14c48:	b	14d1c <__assert_fail@plt+0x372c>
   14c4c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14c50:	b	14c78 <__assert_fail@plt+0x3688>
   14c54:	ldr	ip, [fp, #-84]	; 0xffffffac
   14c58:	mov	r2, #1
   14c5c:	mov	lr, r4
   14c60:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14c64:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14c68:	b	14c7c <__assert_fail@plt+0x368c>
   14c6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14c70:	mov	r7, #2
   14c74:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14c78:	ldr	r2, [sp, #84]	; 0x54
   14c7c:	mov	r0, #0
   14c80:	ldr	r1, [fp, #12]
   14c84:	tst	r2, #1
   14c88:	mov	r2, r7
   14c8c:	mov	r3, lr
   14c90:	str	r0, [sp, #8]
   14c94:	ldr	r0, [sp, #64]	; 0x40
   14c98:	movwne	r2, #4
   14c9c:	cmp	r7, #2
   14ca0:	movne	r2, r7
   14ca4:	str	r2, [sp]
   14ca8:	mov	r2, ip
   14cac:	bic	r1, r1, #2
   14cb0:	str	r0, [sp, #12]
   14cb4:	ldr	r0, [sp, #72]	; 0x48
   14cb8:	str	r1, [sp, #4]
   14cbc:	mov	r1, r6
   14cc0:	str	r0, [sp, #16]
   14cc4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14cc8:	bl	13d08 <__assert_fail@plt+0x2718>
   14ccc:	mov	r8, r0
   14cd0:	mov	r0, r8
   14cd4:	sub	sp, fp, #28
   14cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cdc:	mov	r7, #2
   14ce0:	b	14c78 <__assert_fail@plt+0x3688>
   14ce4:	mov	r0, #5
   14ce8:	ldr	r2, [fp, #-84]	; 0xffffffac
   14cec:	ldr	r3, [sp, #80]	; 0x50
   14cf0:	str	r0, [sp]
   14cf4:	ldr	r0, [fp, #12]
   14cf8:	str	r0, [sp, #4]
   14cfc:	ldr	r0, [fp, #16]
   14d00:	str	r0, [sp, #8]
   14d04:	ldr	r0, [sp, #64]	; 0x40
   14d08:	str	r0, [sp, #12]
   14d0c:	ldr	r0, [sp, #72]	; 0x48
   14d10:	b	14cc0 <__assert_fail@plt+0x36d0>
   14d14:	mov	r0, #0
   14d18:	str	r0, [fp, #-72]	; 0xffffffb8
   14d1c:	ldr	r1, [sp, #92]	; 0x5c
   14d20:	cmp	r1, #0
   14d24:	beq	14d64 <__assert_fail@plt+0x3774>
   14d28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14d2c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14d30:	tst	r0, #1
   14d34:	bne	14d68 <__assert_fail@plt+0x3778>
   14d38:	ldrb	r0, [r1]
   14d3c:	cmp	r0, #0
   14d40:	beq	14d68 <__assert_fail@plt+0x3778>
   14d44:	add	r1, r1, #1
   14d48:	cmp	r8, r6
   14d4c:	strbcc	r0, [r2, r8]
   14d50:	add	r8, r8, #1
   14d54:	ldrb	r0, [r1], #1
   14d58:	cmp	r0, #0
   14d5c:	bne	14d48 <__assert_fail@plt+0x3758>
   14d60:	b	14d68 <__assert_fail@plt+0x3778>
   14d64:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14d68:	cmp	r8, r6
   14d6c:	movcc	r0, #0
   14d70:	strbcc	r0, [r2, r8]
   14d74:	b	14cd0 <__assert_fail@plt+0x36e0>
   14d78:	mov	r2, #1
   14d7c:	b	14c60 <__assert_fail@plt+0x3670>
   14d80:	mov	r7, #5
   14d84:	b	14c74 <__assert_fail@plt+0x3684>
   14d88:	bl	115cc <abort@plt>
   14d8c:	mov	r3, r2
   14d90:	mov	r2, #0
   14d94:	b	14d98 <__assert_fail@plt+0x37a8>
   14d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d9c:	add	fp, sp, #28
   14da0:	sub	sp, sp, #36	; 0x24
   14da4:	movw	r8, #33264	; 0x81f0
   14da8:	cmp	r3, #0
   14dac:	mov	r4, r2
   14db0:	str	r2, [sp, #24]
   14db4:	mov	r5, r1
   14db8:	mov	r6, r0
   14dbc:	str	r0, [sp, #20]
   14dc0:	movt	r8, #2
   14dc4:	movne	r8, r3
   14dc8:	bl	114dc <__errno_location@plt>
   14dcc:	str	r0, [sp, #28]
   14dd0:	cmp	r4, #0
   14dd4:	add	sl, r8, #8
   14dd8:	ldm	r8, {r3, r9}
   14ddc:	ldr	r7, [r0]
   14de0:	ldr	r1, [r8, #40]	; 0x28
   14de4:	ldr	r2, [r8, #44]	; 0x2c
   14de8:	mov	r0, #0
   14dec:	orreq	r9, r9, #1
   14df0:	str	r7, [sp, #32]
   14df4:	mov	r7, r5
   14df8:	stm	sp, {r3, r9, sl}
   14dfc:	str	r1, [sp, #12]
   14e00:	str	r2, [sp, #16]
   14e04:	mov	r1, #0
   14e08:	mov	r2, r6
   14e0c:	mov	r3, r5
   14e10:	bl	13d08 <__assert_fail@plt+0x2718>
   14e14:	add	r4, r0, #1
   14e18:	mov	r5, r0
   14e1c:	mov	r0, r4
   14e20:	bl	15e90 <__assert_fail@plt+0x48a0>
   14e24:	mov	r6, r0
   14e28:	ldr	r0, [r8]
   14e2c:	ldr	r2, [r8, #44]	; 0x2c
   14e30:	ldr	r1, [r8, #40]	; 0x28
   14e34:	mov	r3, r7
   14e38:	stm	sp, {r0, r9, sl}
   14e3c:	str	r2, [sp, #16]
   14e40:	str	r1, [sp, #12]
   14e44:	mov	r0, r6
   14e48:	mov	r1, r4
   14e4c:	ldr	r2, [sp, #20]
   14e50:	bl	13d08 <__assert_fail@plt+0x2718>
   14e54:	ldr	r0, [sp, #24]
   14e58:	ldr	r1, [sp, #32]
   14e5c:	ldr	r2, [sp, #28]
   14e60:	cmp	r0, #0
   14e64:	str	r1, [r2]
   14e68:	strne	r5, [r0]
   14e6c:	mov	r0, r6
   14e70:	sub	sp, fp, #28
   14e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e7c:	add	fp, sp, #24
   14e80:	movw	r5, #33076	; 0x8134
   14e84:	movw	r8, #33072	; 0x8130
   14e88:	movt	r5, #2
   14e8c:	movt	r8, #2
   14e90:	ldr	r0, [r5]
   14e94:	ldr	r4, [r8]
   14e98:	cmp	r0, #2
   14e9c:	blt	14ec8 <__assert_fail@plt+0x38d8>
   14ea0:	add	r7, r4, #12
   14ea4:	mov	r6, #0
   14ea8:	ldr	r0, [r7, r6, lsl #3]
   14eac:	bl	1378c <__assert_fail@plt+0x219c>
   14eb0:	ldr	r1, [r5]
   14eb4:	add	r2, r6, #2
   14eb8:	add	r0, r6, #1
   14ebc:	mov	r6, r0
   14ec0:	cmp	r2, r1
   14ec4:	blt	14ea8 <__assert_fail@plt+0x38b8>
   14ec8:	ldr	r0, [r4, #4]
   14ecc:	movw	r7, #33312	; 0x8220
   14ed0:	movt	r7, #2
   14ed4:	cmp	r0, r7
   14ed8:	beq	14ef0 <__assert_fail@plt+0x3900>
   14edc:	bl	1378c <__assert_fail@plt+0x219c>
   14ee0:	movw	r0, #33080	; 0x8138
   14ee4:	mov	r6, #256	; 0x100
   14ee8:	movt	r0, #2
   14eec:	strd	r6, [r0]
   14ef0:	movw	r6, #33080	; 0x8138
   14ef4:	movt	r6, #2
   14ef8:	cmp	r4, r6
   14efc:	beq	14f0c <__assert_fail@plt+0x391c>
   14f00:	mov	r0, r4
   14f04:	bl	1378c <__assert_fail@plt+0x219c>
   14f08:	str	r6, [r8]
   14f0c:	mov	r0, #1
   14f10:	str	r0, [r5]
   14f14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f18:	movw	r3, #33264	; 0x81f0
   14f1c:	mvn	r2, #0
   14f20:	movt	r3, #2
   14f24:	b	14f28 <__assert_fail@plt+0x3938>
   14f28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f2c:	add	fp, sp, #28
   14f30:	sub	sp, sp, #44	; 0x2c
   14f34:	mov	r7, r3
   14f38:	str	r2, [sp, #36]	; 0x24
   14f3c:	str	r1, [sp, #32]
   14f40:	mov	r5, r0
   14f44:	bl	114dc <__errno_location@plt>
   14f48:	cmp	r5, #0
   14f4c:	blt	150b8 <__assert_fail@plt+0x3ac8>
   14f50:	cmn	r5, #-2147483647	; 0x80000001
   14f54:	beq	150b8 <__assert_fail@plt+0x3ac8>
   14f58:	movw	r8, #33076	; 0x8134
   14f5c:	movw	r4, #33072	; 0x8130
   14f60:	str	r0, [sp, #28]
   14f64:	ldr	r0, [r0]
   14f68:	movt	r8, #2
   14f6c:	movt	r4, #2
   14f70:	ldr	r1, [r8]
   14f74:	ldr	r6, [r4]
   14f78:	str	r0, [sp, #24]
   14f7c:	cmp	r1, r5
   14f80:	ble	14f8c <__assert_fail@plt+0x399c>
   14f84:	mov	sl, r6
   14f88:	b	14ff4 <__assert_fail@plt+0x3a04>
   14f8c:	movw	r9, #33080	; 0x8138
   14f90:	mov	r0, #8
   14f94:	add	r2, r5, #1
   14f98:	str	r1, [fp, #-32]	; 0xffffffe0
   14f9c:	mvn	r3, #-2147483648	; 0x80000000
   14fa0:	movt	r9, #2
   14fa4:	str	r0, [sp]
   14fa8:	sub	r2, r2, r1
   14fac:	sub	r1, fp, #32
   14fb0:	subs	r0, r6, r9
   14fb4:	movne	r0, r6
   14fb8:	bl	15fc0 <__assert_fail@plt+0x49d0>
   14fbc:	cmp	r6, r9
   14fc0:	mov	sl, r0
   14fc4:	str	r0, [r4]
   14fc8:	ldrdeq	r0, [r9]
   14fcc:	stmeq	sl, {r0, r1}
   14fd0:	ldr	r1, [r8]
   14fd4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14fd8:	add	r0, sl, r1, lsl #3
   14fdc:	sub	r1, r2, r1
   14fe0:	lsl	r2, r1, #3
   14fe4:	mov	r1, #0
   14fe8:	bl	11500 <memset@plt>
   14fec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14ff0:	str	r0, [r8]
   14ff4:	mov	r9, sl
   14ff8:	ldr	r6, [r9, r5, lsl #3]!
   14ffc:	ldr	r4, [r9, #4]!
   15000:	ldm	r7, {r0, r1}
   15004:	ldr	r2, [r7, #40]	; 0x28
   15008:	ldr	r3, [r7, #44]	; 0x2c
   1500c:	orr	r8, r1, #1
   15010:	add	r1, r7, #8
   15014:	stm	sp, {r0, r8}
   15018:	add	r0, sp, #8
   1501c:	str	r1, [sp, #20]
   15020:	stm	r0, {r1, r2, r3}
   15024:	mov	r0, r4
   15028:	mov	r1, r6
   1502c:	ldr	r2, [sp, #32]
   15030:	ldr	r3, [sp, #36]	; 0x24
   15034:	bl	13d08 <__assert_fail@plt+0x2718>
   15038:	cmp	r6, r0
   1503c:	bhi	150a0 <__assert_fail@plt+0x3ab0>
   15040:	add	r6, r0, #1
   15044:	movw	r0, #33312	; 0x8220
   15048:	movt	r0, #2
   1504c:	str	r6, [sl, r5, lsl #3]
   15050:	cmp	r4, r0
   15054:	beq	15060 <__assert_fail@plt+0x3a70>
   15058:	mov	r0, r4
   1505c:	bl	1378c <__assert_fail@plt+0x219c>
   15060:	mov	r0, r6
   15064:	bl	15e90 <__assert_fail@plt+0x48a0>
   15068:	str	r0, [r9]
   1506c:	mov	r4, r0
   15070:	add	r3, sp, #8
   15074:	ldr	r0, [r7]
   15078:	ldr	r1, [r7, #40]	; 0x28
   1507c:	ldr	r2, [r7, #44]	; 0x2c
   15080:	stm	sp, {r0, r8}
   15084:	ldr	r0, [sp, #20]
   15088:	stm	r3, {r0, r1, r2}
   1508c:	mov	r0, r4
   15090:	mov	r1, r6
   15094:	ldr	r2, [sp, #32]
   15098:	ldr	r3, [sp, #36]	; 0x24
   1509c:	bl	13d08 <__assert_fail@plt+0x2718>
   150a0:	ldr	r0, [sp, #28]
   150a4:	ldr	r1, [sp, #24]
   150a8:	str	r1, [r0]
   150ac:	mov	r0, r4
   150b0:	sub	sp, fp, #28
   150b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150b8:	bl	115cc <abort@plt>
   150bc:	movw	r3, #33264	; 0x81f0
   150c0:	movt	r3, #2
   150c4:	b	14f28 <__assert_fail@plt+0x3938>
   150c8:	movw	r3, #33264	; 0x81f0
   150cc:	mov	r1, r0
   150d0:	mov	r0, #0
   150d4:	mvn	r2, #0
   150d8:	movt	r3, #2
   150dc:	b	14f28 <__assert_fail@plt+0x3938>
   150e0:	movw	r3, #33264	; 0x81f0
   150e4:	mov	r2, r1
   150e8:	mov	r1, r0
   150ec:	mov	r0, #0
   150f0:	movt	r3, #2
   150f4:	b	14f28 <__assert_fail@plt+0x3938>
   150f8:	push	{fp, lr}
   150fc:	mov	fp, sp
   15100:	sub	sp, sp, #48	; 0x30
   15104:	vmov.i32	q8, #0	; 0x00000000
   15108:	mov	ip, #32
   1510c:	mov	r3, sp
   15110:	mov	lr, r2
   15114:	cmp	r1, #10
   15118:	add	r2, r3, #16
   1511c:	vst1.64	{d16-d17}, [r3], ip
   15120:	vst1.64	{d16-d17}, [r3]
   15124:	vst1.64	{d16-d17}, [r2]
   15128:	beq	15148 <__assert_fail@plt+0x3b58>
   1512c:	str	r1, [sp]
   15130:	mov	r3, sp
   15134:	mov	r1, lr
   15138:	mvn	r2, #0
   1513c:	bl	14f28 <__assert_fail@plt+0x3938>
   15140:	mov	sp, fp
   15144:	pop	{fp, pc}
   15148:	bl	115cc <abort@plt>
   1514c:	push	{r4, sl, fp, lr}
   15150:	add	fp, sp, #8
   15154:	sub	sp, sp, #48	; 0x30
   15158:	mov	ip, r3
   1515c:	mov	r3, sp
   15160:	vmov.i32	q8, #0	; 0x00000000
   15164:	mov	lr, #32
   15168:	cmp	r1, #10
   1516c:	add	r4, r3, #16
   15170:	vst1.64	{d16-d17}, [r3], lr
   15174:	vst1.64	{d16-d17}, [r3]
   15178:	vst1.64	{d16-d17}, [r4]
   1517c:	beq	1519c <__assert_fail@plt+0x3bac>
   15180:	str	r1, [sp]
   15184:	mov	r1, r2
   15188:	mov	r3, sp
   1518c:	mov	r2, ip
   15190:	bl	14f28 <__assert_fail@plt+0x3938>
   15194:	sub	sp, fp, #8
   15198:	pop	{r4, sl, fp, pc}
   1519c:	bl	115cc <abort@plt>
   151a0:	mov	r2, r1
   151a4:	mov	r1, r0
   151a8:	mov	r0, #0
   151ac:	b	150f8 <__assert_fail@plt+0x3b08>
   151b0:	mov	r3, r2
   151b4:	mov	r2, r1
   151b8:	mov	r1, r0
   151bc:	mov	r0, #0
   151c0:	b	1514c <__assert_fail@plt+0x3b5c>
   151c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   151c8:	add	fp, sp, #24
   151cc:	sub	sp, sp, #48	; 0x30
   151d0:	movw	r8, #33264	; 0x81f0
   151d4:	mov	lr, r0
   151d8:	mov	r3, sp
   151dc:	mov	ip, r1
   151e0:	movt	r8, #2
   151e4:	mov	r1, r3
   151e8:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   151ec:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   151f0:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   151f4:	stm	r1, {r0, r4, r5, r6, r7, r9}
   151f8:	ubfx	r0, r2, #5, #3
   151fc:	and	r2, r2, #31
   15200:	mov	r4, #1
   15204:	add	r0, r3, r0, lsl #2
   15208:	ldr	r1, [r0, #8]
   1520c:	bic	r4, r4, r1, lsr r2
   15210:	eor	r1, r1, r4, lsl r2
   15214:	mov	r2, ip
   15218:	str	r1, [r0, #8]
   1521c:	mov	r0, #0
   15220:	mov	r1, lr
   15224:	bl	14f28 <__assert_fail@plt+0x3938>
   15228:	sub	sp, fp, #24
   1522c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15230:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15234:	add	fp, sp, #24
   15238:	sub	sp, sp, #48	; 0x30
   1523c:	movw	lr, #33264	; 0x81f0
   15240:	mov	ip, r0
   15244:	mov	r3, sp
   15248:	movt	lr, #2
   1524c:	mov	r2, r3
   15250:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   15254:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   15258:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   1525c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   15260:	ubfx	r0, r1, #5, #3
   15264:	and	r1, r1, #31
   15268:	mov	r7, #1
   1526c:	add	r0, r3, r0, lsl #2
   15270:	ldr	r2, [r0, #8]
   15274:	bic	r7, r7, r2, lsr r1
   15278:	eor	r1, r2, r7, lsl r1
   1527c:	mvn	r2, #0
   15280:	str	r1, [r0, #8]
   15284:	mov	r0, #0
   15288:	mov	r1, ip
   1528c:	bl	14f28 <__assert_fail@plt+0x3938>
   15290:	sub	sp, fp, #24
   15294:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15298:	push	{r4, r5, r6, r7, fp, lr}
   1529c:	add	fp, sp, #16
   152a0:	sub	sp, sp, #48	; 0x30
   152a4:	movw	lr, #33264	; 0x81f0
   152a8:	mov	ip, r0
   152ac:	mov	r3, sp
   152b0:	movt	lr, #2
   152b4:	mov	r2, r3
   152b8:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   152bc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   152c0:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   152c4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   152c8:	mov	r1, ip
   152cc:	mvn	r2, #0
   152d0:	ldr	r0, [sp, #12]
   152d4:	orr	r0, r0, #67108864	; 0x4000000
   152d8:	str	r0, [sp, #12]
   152dc:	mov	r0, #0
   152e0:	bl	14f28 <__assert_fail@plt+0x3938>
   152e4:	sub	sp, fp, #16
   152e8:	pop	{r4, r5, r6, r7, fp, pc}
   152ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152f0:	add	fp, sp, #24
   152f4:	sub	sp, sp, #48	; 0x30
   152f8:	movw	r8, #33264	; 0x81f0
   152fc:	mov	ip, r1
   15300:	mov	lr, r0
   15304:	mov	r3, sp
   15308:	movt	r8, #2
   1530c:	mov	r2, r3
   15310:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   15314:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   15318:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   1531c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   15320:	mov	r1, lr
   15324:	mov	r2, ip
   15328:	ldr	r0, [sp, #12]
   1532c:	orr	r0, r0, #67108864	; 0x4000000
   15330:	str	r0, [sp, #12]
   15334:	mov	r0, #0
   15338:	bl	14f28 <__assert_fail@plt+0x3938>
   1533c:	sub	sp, fp, #24
   15340:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15344:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15348:	add	fp, sp, #24
   1534c:	sub	sp, sp, #96	; 0x60
   15350:	mov	lr, sp
   15354:	vmov.i32	q8, #0	; 0x00000000
   15358:	mov	ip, r2
   1535c:	cmp	r1, #10
   15360:	add	r3, lr, #16
   15364:	mov	r2, lr
   15368:	vst1.64	{d16-d17}, [r3]
   1536c:	mov	r3, #28
   15370:	vst1.64	{d16-d17}, [r2], r3
   15374:	vst1.32	{d16-d17}, [r2]
   15378:	beq	153b8 <__assert_fail@plt+0x3dc8>
   1537c:	str	r1, [sp, #48]	; 0x30
   15380:	add	r3, sp, #48	; 0x30
   15384:	ldm	lr!, {r2, r4, r5, r6, r7}
   15388:	add	r1, r3, #4
   1538c:	stmia	r1!, {r2, r4, r5, r6, r7}
   15390:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   15394:	stm	r1, {r2, r4, r5, r6, r7, r8}
   15398:	mvn	r2, #0
   1539c:	ldr	r1, [sp, #60]	; 0x3c
   153a0:	orr	r1, r1, #67108864	; 0x4000000
   153a4:	str	r1, [sp, #60]	; 0x3c
   153a8:	mov	r1, ip
   153ac:	bl	14f28 <__assert_fail@plt+0x3938>
   153b0:	sub	sp, fp, #24
   153b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   153b8:	bl	115cc <abort@plt>
   153bc:	push	{fp, lr}
   153c0:	mov	fp, sp
   153c4:	sub	sp, sp, #8
   153c8:	mvn	ip, #0
   153cc:	str	ip, [sp]
   153d0:	bl	153dc <__assert_fail@plt+0x3dec>
   153d4:	mov	sp, fp
   153d8:	pop	{fp, pc}
   153dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   153e0:	add	fp, sp, #24
   153e4:	sub	sp, sp, #48	; 0x30
   153e8:	movw	ip, #33264	; 0x81f0
   153ec:	mov	lr, r3
   153f0:	mov	r3, sp
   153f4:	cmp	r1, #0
   153f8:	movt	ip, #2
   153fc:	cmpne	r2, #0
   15400:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   15404:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   15408:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1540c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   15410:	mov	r3, #10
   15414:	str	r3, [sp]
   15418:	bne	15420 <__assert_fail@plt+0x3e30>
   1541c:	bl	115cc <abort@plt>
   15420:	ldr	ip, [fp, #8]
   15424:	str	r2, [sp, #44]	; 0x2c
   15428:	str	r1, [sp, #40]	; 0x28
   1542c:	mov	r3, sp
   15430:	mov	r1, lr
   15434:	mov	r2, ip
   15438:	bl	14f28 <__assert_fail@plt+0x3938>
   1543c:	sub	sp, fp, #24
   15440:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15444:	push	{fp, lr}
   15448:	mov	fp, sp
   1544c:	sub	sp, sp, #8
   15450:	mov	r3, r2
   15454:	mov	r2, r1
   15458:	mov	r1, r0
   1545c:	mvn	r0, #0
   15460:	str	r0, [sp]
   15464:	mov	r0, #0
   15468:	bl	153dc <__assert_fail@plt+0x3dec>
   1546c:	mov	sp, fp
   15470:	pop	{fp, pc}
   15474:	push	{fp, lr}
   15478:	mov	fp, sp
   1547c:	sub	sp, sp, #8
   15480:	mov	ip, r2
   15484:	mov	r2, r1
   15488:	mov	r1, r0
   1548c:	str	r3, [sp]
   15490:	mov	r0, #0
   15494:	mov	r3, ip
   15498:	bl	153dc <__assert_fail@plt+0x3dec>
   1549c:	mov	sp, fp
   154a0:	pop	{fp, pc}
   154a4:	movw	r3, #33088	; 0x8140
   154a8:	movt	r3, #2
   154ac:	b	14f28 <__assert_fail@plt+0x3938>
   154b0:	movw	r3, #33088	; 0x8140
   154b4:	mov	r2, r1
   154b8:	mov	r1, r0
   154bc:	mov	r0, #0
   154c0:	movt	r3, #2
   154c4:	b	14f28 <__assert_fail@plt+0x3938>
   154c8:	movw	r3, #33088	; 0x8140
   154cc:	mvn	r2, #0
   154d0:	movt	r3, #2
   154d4:	b	14f28 <__assert_fail@plt+0x3938>
   154d8:	movw	r3, #33088	; 0x8140
   154dc:	mov	r1, r0
   154e0:	mov	r0, #0
   154e4:	mvn	r2, #0
   154e8:	movt	r3, #2
   154ec:	b	14f28 <__assert_fail@plt+0x3938>
   154f0:	push	{r4, r5, fp, lr}
   154f4:	add	fp, sp, #8
   154f8:	mov	r5, r0
   154fc:	mov	r4, r1
   15500:	mov	r0, #0
   15504:	mov	r2, #5
   15508:	mov	r1, r5
   1550c:	bl	11380 <dcgettext@plt>
   15510:	cmp	r0, r5
   15514:	popne	{r4, r5, fp, pc}
   15518:	bl	164ac <__assert_fail@plt+0x4ebc>
   1551c:	ldrb	r1, [r0]
   15520:	and	r1, r1, #223	; 0xdf
   15524:	cmp	r1, #71	; 0x47
   15528:	beq	15590 <__assert_fail@plt+0x3fa0>
   1552c:	cmp	r1, #85	; 0x55
   15530:	bne	155b4 <__assert_fail@plt+0x3fc4>
   15534:	ldrb	r1, [r0, #1]
   15538:	and	r1, r1, #223	; 0xdf
   1553c:	cmp	r1, #84	; 0x54
   15540:	bne	155b4 <__assert_fail@plt+0x3fc4>
   15544:	ldrb	r1, [r0, #2]
   15548:	and	r1, r1, #223	; 0xdf
   1554c:	cmp	r1, #70	; 0x46
   15550:	ldrbeq	r1, [r0, #3]
   15554:	cmpeq	r1, #45	; 0x2d
   15558:	bne	155b4 <__assert_fail@plt+0x3fc4>
   1555c:	ldrb	r1, [r0, #4]
   15560:	cmp	r1, #56	; 0x38
   15564:	ldrbeq	r0, [r0, #5]
   15568:	cmpeq	r0, #0
   1556c:	bne	155b4 <__assert_fail@plt+0x3fc4>
   15570:	ldrb	r1, [r5]
   15574:	movw	r2, #30764	; 0x782c
   15578:	movw	r0, #30768	; 0x7830
   1557c:	movt	r2, #1
   15580:	movt	r0, #1
   15584:	cmp	r1, #96	; 0x60
   15588:	moveq	r0, r2
   1558c:	pop	{r4, r5, fp, pc}
   15590:	ldrb	r1, [r0, #1]
   15594:	and	r1, r1, #223	; 0xdf
   15598:	cmp	r1, #66	; 0x42
   1559c:	bne	155b4 <__assert_fail@plt+0x3fc4>
   155a0:	ldrb	r1, [r0, #2]
   155a4:	cmp	r1, #49	; 0x31
   155a8:	ldrbeq	r1, [r0, #3]
   155ac:	cmpeq	r1, #56	; 0x38
   155b0:	beq	155d0 <__assert_fail@plt+0x3fe0>
   155b4:	movw	r1, #29743	; 0x742f
   155b8:	movw	r0, #30762	; 0x782a
   155bc:	cmp	r4, #9
   155c0:	movt	r1, #1
   155c4:	movt	r0, #1
   155c8:	moveq	r0, r1
   155cc:	pop	{r4, r5, fp, pc}
   155d0:	ldrb	r1, [r0, #4]
   155d4:	cmp	r1, #48	; 0x30
   155d8:	ldrbeq	r1, [r0, #5]
   155dc:	cmpeq	r1, #51	; 0x33
   155e0:	bne	155b4 <__assert_fail@plt+0x3fc4>
   155e4:	ldrb	r1, [r0, #6]
   155e8:	cmp	r1, #48	; 0x30
   155ec:	ldrbeq	r0, [r0, #7]
   155f0:	cmpeq	r0, #0
   155f4:	bne	155b4 <__assert_fail@plt+0x3fc4>
   155f8:	ldrb	r1, [r5]
   155fc:	movw	r2, #30772	; 0x7834
   15600:	movw	r0, #30776	; 0x7838
   15604:	movt	r2, #1
   15608:	movt	r0, #1
   1560c:	b	15584 <__assert_fail@plt+0x3f94>
   15610:	push	{r4, r5, r6, sl, fp, lr}
   15614:	add	fp, sp, #16
   15618:	sub	sp, sp, #8
   1561c:	movw	r5, #25416	; 0x6348
   15620:	movw	r6, #14220	; 0x378c
   15624:	mov	r4, r0
   15628:	mov	r0, #0
   1562c:	mov	r1, #0
   15630:	mov	r2, #0
   15634:	movt	r5, #1
   15638:	str	r0, [r4]
   1563c:	str	r0, [r4, #4]
   15640:	str	r0, [r4, #8]
   15644:	movt	r6, #1
   15648:	add	r0, r4, #12
   1564c:	mov	r3, r5
   15650:	str	r6, [sp]
   15654:	bl	164e4 <_obstack_begin@@Base>
   15658:	add	r0, r4, #56	; 0x38
   1565c:	mov	r1, #0
   15660:	mov	r2, #0
   15664:	mov	r3, r5
   15668:	str	r6, [sp]
   1566c:	bl	164e4 <_obstack_begin@@Base>
   15670:	add	r0, r4, #100	; 0x64
   15674:	mov	r1, #0
   15678:	mov	r2, #0
   1567c:	mov	r3, r5
   15680:	str	r6, [sp]
   15684:	bl	164e4 <_obstack_begin@@Base>
   15688:	sub	sp, fp, #16
   1568c:	pop	{r4, r5, r6, sl, fp, pc}
   15690:	push	{r4, sl, fp, lr}
   15694:	add	fp, sp, #8
   15698:	mov	r4, r0
   1569c:	add	r0, r0, #12
   156a0:	mov	r1, #0
   156a4:	bl	1677c <_obstack_free@@Base>
   156a8:	add	r0, r4, #56	; 0x38
   156ac:	mov	r1, #0
   156b0:	bl	1677c <_obstack_free@@Base>
   156b4:	add	r0, r4, #100	; 0x64
   156b8:	mov	r1, #0
   156bc:	pop	{r4, sl, fp, lr}
   156c0:	b	1677c <_obstack_free@@Base>
   156c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156c8:	add	fp, sp, #24
   156cc:	mov	r5, r1
   156d0:	mov	r8, r0
   156d4:	bl	11518 <fgetc@plt>
   156d8:	cmn	r0, #1
   156dc:	beq	15740 <__assert_fail@plt+0x4150>
   156e0:	mov	r7, r0
   156e4:	add	r6, r5, #12
   156e8:	add	r4, r5, #24
   156ec:	ldr	r0, [r5, #24]
   156f0:	ldr	r1, [r5, #28]
   156f4:	cmp	r1, r0
   156f8:	bne	1570c <__assert_fail@plt+0x411c>
   156fc:	mov	r0, r6
   15700:	mov	r1, #1
   15704:	bl	165f0 <_obstack_newchunk@@Base>
   15708:	ldr	r0, [r4]
   1570c:	add	r1, r0, #1
   15710:	cmp	r7, #0
   15714:	str	r1, [r4]
   15718:	strb	r7, [r0]
   1571c:	bne	15728 <__assert_fail@plt+0x4138>
   15720:	mov	r0, r5
   15724:	bl	1586c <__assert_fail@plt+0x427c>
   15728:	mov	r0, r8
   1572c:	bl	11518 <fgetc@plt>
   15730:	mov	r7, r0
   15734:	cmn	r0, #1
   15738:	bne	156ec <__assert_fail@plt+0x40fc>
   1573c:	b	15748 <__assert_fail@plt+0x4158>
   15740:	add	r4, r5, #24
   15744:	add	r6, r5, #12
   15748:	ldr	r1, [r5, #20]
   1574c:	ldr	r0, [r5, #24]
   15750:	cmp	r0, r1
   15754:	beq	1578c <__assert_fail@plt+0x419c>
   15758:	ldr	r1, [r5, #28]
   1575c:	cmp	r1, r0
   15760:	bne	15774 <__assert_fail@plt+0x4184>
   15764:	mov	r0, r6
   15768:	mov	r1, #1
   1576c:	bl	165f0 <_obstack_newchunk@@Base>
   15770:	ldr	r0, [r4]
   15774:	add	r1, r0, #1
   15778:	str	r1, [r5, #24]
   1577c:	mov	r1, #0
   15780:	strb	r1, [r0]
   15784:	mov	r0, r5
   15788:	bl	1586c <__assert_fail@plt+0x427c>
   1578c:	ldr	r0, [r5, #68]	; 0x44
   15790:	ldr	r1, [r5, #72]	; 0x48
   15794:	sub	r1, r1, r0
   15798:	cmp	r1, #4
   1579c:	bcs	157b0 <__assert_fail@plt+0x41c0>
   157a0:	add	r0, r5, #56	; 0x38
   157a4:	mov	r1, #4
   157a8:	bl	165f0 <_obstack_newchunk@@Base>
   157ac:	ldr	r0, [r5, #68]	; 0x44
   157b0:	mov	r1, #0
   157b4:	str	r1, [r0]
   157b8:	ldr	r1, [r5, #68]	; 0x44
   157bc:	ldr	r0, [r5, #64]	; 0x40
   157c0:	add	r2, r1, #4
   157c4:	str	r2, [r5, #68]	; 0x44
   157c8:	cmp	r2, r0
   157cc:	ldrbeq	r1, [r5, #96]	; 0x60
   157d0:	orreq	r1, r1, #2
   157d4:	strbeq	r1, [r5, #96]	; 0x60
   157d8:	ldr	r7, [r5, #80]	; 0x50
   157dc:	ldr	r3, [r5, #60]	; 0x3c
   157e0:	ldr	r1, [r5, #72]	; 0x48
   157e4:	add	r2, r7, r2
   157e8:	bic	r2, r2, r7
   157ec:	sub	r7, r2, r3
   157f0:	sub	r3, r1, r3
   157f4:	str	r2, [r5, #68]	; 0x44
   157f8:	cmp	r7, r3
   157fc:	movhi	r2, r1
   15800:	strhi	r1, [r5, #68]	; 0x44
   15804:	str	r0, [r5, #4]
   15808:	str	r2, [r5, #64]	; 0x40
   1580c:	ldr	r0, [r5, #108]	; 0x6c
   15810:	ldr	r2, [r5, #112]	; 0x70
   15814:	cmp	r2, r0
   15818:	ldrbeq	r1, [r5, #140]	; 0x8c
   1581c:	orreq	r1, r1, #2
   15820:	strbeq	r1, [r5, #140]	; 0x8c
   15824:	ldr	r7, [r5, #124]	; 0x7c
   15828:	ldr	r3, [r5, #104]	; 0x68
   1582c:	ldr	r1, [r5, #116]	; 0x74
   15830:	add	r2, r7, r2
   15834:	bic	r2, r2, r7
   15838:	sub	r7, r2, r3
   1583c:	sub	r3, r1, r3
   15840:	str	r2, [r5, #112]	; 0x70
   15844:	cmp	r7, r3
   15848:	strhi	r1, [r5, #112]	; 0x70
   1584c:	str	r0, [r5, #8]
   15850:	movhi	r2, r1
   15854:	mov	r0, r8
   15858:	str	r2, [r5, #108]	; 0x6c
   1585c:	bl	11344 <ferror@plt>
   15860:	clz	r0, r0
   15864:	lsr	r0, r0, #5
   15868:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1586c:	push	{r4, r5, r6, r7, fp, lr}
   15870:	add	fp, sp, #16
   15874:	ldr	r5, [r0, #20]
   15878:	ldr	r6, [r0, #24]
   1587c:	mov	r4, r0
   15880:	cmp	r6, r5
   15884:	mvn	r7, r5
   15888:	ldrbeq	r0, [r4, #52]	; 0x34
   1588c:	orreq	r0, r0, #2
   15890:	strbeq	r0, [r4, #52]	; 0x34
   15894:	ldr	r1, [r4, #36]	; 0x24
   15898:	ldr	r2, [r4, #16]
   1589c:	ldr	r0, [r4, #28]
   158a0:	add	r3, r1, r6
   158a4:	bic	r1, r3, r1
   158a8:	sub	r3, r1, r2
   158ac:	sub	r2, r0, r2
   158b0:	str	r1, [r4, #24]
   158b4:	cmp	r3, r2
   158b8:	movhi	r1, r0
   158bc:	strhi	r0, [r4, #24]
   158c0:	str	r1, [r4, #20]
   158c4:	ldr	r0, [r4, #68]	; 0x44
   158c8:	ldr	r1, [r4, #72]	; 0x48
   158cc:	sub	r1, r1, r0
   158d0:	cmp	r1, #4
   158d4:	bcs	158e8 <__assert_fail@plt+0x42f8>
   158d8:	add	r0, r4, #56	; 0x38
   158dc:	mov	r1, #4
   158e0:	bl	165f0 <_obstack_newchunk@@Base>
   158e4:	ldr	r0, [r4, #68]	; 0x44
   158e8:	str	r5, [r0]
   158ec:	add	r6, r6, r7
   158f0:	ldr	r1, [r4, #68]	; 0x44
   158f4:	ldr	r0, [r4, #112]	; 0x70
   158f8:	ldr	r2, [r4, #116]	; 0x74
   158fc:	add	r1, r1, #4
   15900:	str	r1, [r4, #68]	; 0x44
   15904:	sub	r1, r2, r0
   15908:	cmp	r1, #4
   1590c:	bcs	15920 <__assert_fail@plt+0x4330>
   15910:	add	r0, r4, #100	; 0x64
   15914:	mov	r1, #4
   15918:	bl	165f0 <_obstack_newchunk@@Base>
   1591c:	ldr	r0, [r4, #112]	; 0x70
   15920:	str	r6, [r0]
   15924:	ldr	r0, [r4]
   15928:	ldr	r1, [r4, #112]	; 0x70
   1592c:	add	r1, r1, #4
   15930:	add	r0, r0, #1
   15934:	str	r1, [r4, #112]	; 0x70
   15938:	str	r0, [r4]
   1593c:	pop	{r4, r5, r6, r7, fp, pc}
   15940:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15944:	add	fp, sp, #24
   15948:	movw	r8, #0
   1594c:	mov	r6, r2
   15950:	mov	r4, r1
   15954:	mov	r5, r0
   15958:	movt	r8, #32752	; 0x7ff0
   1595c:	mov	r0, r5
   15960:	mov	r1, r4
   15964:	mov	r2, r6
   15968:	bl	11308 <read@plt>
   1596c:	mov	r7, r0
   15970:	cmn	r0, #1
   15974:	bgt	1599c <__assert_fail@plt+0x43ac>
   15978:	bl	114dc <__errno_location@plt>
   1597c:	ldr	r0, [r0]
   15980:	cmp	r0, #4
   15984:	beq	1595c <__assert_fail@plt+0x436c>
   15988:	cmp	r6, r8
   1598c:	bls	1599c <__assert_fail@plt+0x43ac>
   15990:	cmp	r0, #22
   15994:	mov	r6, r8
   15998:	beq	1595c <__assert_fail@plt+0x436c>
   1599c:	mov	r0, r7
   159a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159a8:	add	fp, sp, #24
   159ac:	sub	sp, sp, #32
   159b0:	ldr	r6, [fp, #12]
   159b4:	ldr	r7, [fp, #8]
   159b8:	mov	r4, r2
   159bc:	mov	r8, r0
   159c0:	cmp	r1, #0
   159c4:	beq	159ec <__assert_fail@plt+0x43fc>
   159c8:	movw	r2, #30864	; 0x7890
   159cc:	mov	r5, r1
   159d0:	str	r3, [sp, #4]
   159d4:	str	r4, [sp]
   159d8:	mov	r0, r8
   159dc:	mov	r1, #1
   159e0:	movt	r2, #1
   159e4:	mov	r3, r5
   159e8:	b	15a04 <__assert_fail@plt+0x4414>
   159ec:	movw	r2, #30876	; 0x789c
   159f0:	str	r3, [sp]
   159f4:	mov	r0, r8
   159f8:	mov	r1, #1
   159fc:	mov	r3, r4
   15a00:	movt	r2, #1
   15a04:	bl	1153c <__fprintf_chk@plt>
   15a08:	movw	r1, #30883	; 0x78a3
   15a0c:	mov	r0, #0
   15a10:	mov	r2, #5
   15a14:	movt	r1, #1
   15a18:	bl	11380 <dcgettext@plt>
   15a1c:	movw	r2, #31601	; 0x7b71
   15a20:	mov	r3, r0
   15a24:	movw	r0, #2022	; 0x7e6
   15a28:	mov	r1, #1
   15a2c:	str	r0, [sp]
   15a30:	movt	r2, #1
   15a34:	mov	r0, r8
   15a38:	bl	1153c <__fprintf_chk@plt>
   15a3c:	movw	r4, #30252	; 0x762c
   15a40:	mov	r1, r8
   15a44:	movt	r4, #1
   15a48:	mov	r0, r4
   15a4c:	bl	112d8 <fputs_unlocked@plt>
   15a50:	movw	r1, #30887	; 0x78a7
   15a54:	mov	r0, #0
   15a58:	mov	r2, #5
   15a5c:	movt	r1, #1
   15a60:	bl	11380 <dcgettext@plt>
   15a64:	movw	r3, #31058	; 0x7952
   15a68:	mov	r2, r0
   15a6c:	mov	r0, r8
   15a70:	mov	r1, #1
   15a74:	movt	r3, #1
   15a78:	bl	1153c <__fprintf_chk@plt>
   15a7c:	mov	r0, r4
   15a80:	mov	r1, r8
   15a84:	bl	112d8 <fputs_unlocked@plt>
   15a88:	cmp	r6, #9
   15a8c:	bhi	15af0 <__assert_fail@plt+0x4500>
   15a90:	add	r0, pc, #0
   15a94:	ldr	pc, [r0, r6, lsl #2]
   15a98:	andeq	r5, r1, r8, asr #25
   15a9c:	andeq	r5, r1, r0, asr #21
   15aa0:	strdeq	r5, [r1], -ip
   15aa4:	andeq	r5, r1, r4, lsr #22
   15aa8:	andeq	r5, r1, ip, asr #22
   15aac:	andeq	r5, r1, r4, ror fp
   15ab0:	muleq	r1, ip, fp
   15ab4:	ldrdeq	r5, [r1], -r4
   15ab8:	andeq	r5, r1, r4, ror ip
   15abc:	andeq	r5, r1, ip, lsl ip
   15ac0:	movw	r1, #31092	; 0x7974
   15ac4:	mov	r0, #0
   15ac8:	mov	r2, #5
   15acc:	movt	r1, #1
   15ad0:	bl	11380 <dcgettext@plt>
   15ad4:	ldr	r3, [r7]
   15ad8:	mov	r2, r0
   15adc:	mov	r0, r8
   15ae0:	mov	r1, #1
   15ae4:	sub	sp, fp, #24
   15ae8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15aec:	b	1153c <__fprintf_chk@plt>
   15af0:	movw	r1, #31411	; 0x7ab3
   15af4:	movt	r1, #1
   15af8:	b	15c24 <__assert_fail@plt+0x4634>
   15afc:	movw	r1, #31108	; 0x7984
   15b00:	mov	r0, #0
   15b04:	mov	r2, #5
   15b08:	movt	r1, #1
   15b0c:	bl	11380 <dcgettext@plt>
   15b10:	mov	r2, r0
   15b14:	ldr	r3, [r7]
   15b18:	ldr	r0, [r7, #4]
   15b1c:	str	r0, [sp]
   15b20:	b	15c10 <__assert_fail@plt+0x4620>
   15b24:	movw	r1, #31131	; 0x799b
   15b28:	mov	r0, #0
   15b2c:	mov	r2, #5
   15b30:	movt	r1, #1
   15b34:	bl	11380 <dcgettext@plt>
   15b38:	ldr	r3, [r7]
   15b3c:	mov	r2, r0
   15b40:	ldmib	r7, {r0, r1}
   15b44:	stm	sp, {r0, r1}
   15b48:	b	15c10 <__assert_fail@plt+0x4620>
   15b4c:	movw	r1, #31159	; 0x79b7
   15b50:	mov	r0, #0
   15b54:	mov	r2, #5
   15b58:	movt	r1, #1
   15b5c:	bl	11380 <dcgettext@plt>
   15b60:	ldr	r3, [r7]
   15b64:	mov	r2, r0
   15b68:	ldmib	r7, {r0, r1, r7}
   15b6c:	stm	sp, {r0, r1, r7}
   15b70:	b	15c10 <__assert_fail@plt+0x4620>
   15b74:	movw	r1, #31191	; 0x79d7
   15b78:	mov	r0, #0
   15b7c:	mov	r2, #5
   15b80:	movt	r1, #1
   15b84:	bl	11380 <dcgettext@plt>
   15b88:	ldr	r3, [r7]
   15b8c:	mov	r2, r0
   15b90:	ldmib	r7, {r0, r1, r6, r7}
   15b94:	stm	sp, {r0, r1, r6, r7}
   15b98:	b	15c10 <__assert_fail@plt+0x4620>
   15b9c:	movw	r1, #31227	; 0x79fb
   15ba0:	mov	r0, #0
   15ba4:	mov	r2, #5
   15ba8:	movt	r1, #1
   15bac:	bl	11380 <dcgettext@plt>
   15bb0:	ldr	r3, [r7]
   15bb4:	mov	r2, r0
   15bb8:	ldmib	r7, {r0, r1, r6}
   15bbc:	ldr	r5, [r7, #16]
   15bc0:	ldr	r7, [r7, #20]
   15bc4:	stm	sp, {r0, r1, r6}
   15bc8:	str	r5, [sp, #12]
   15bcc:	str	r7, [sp, #16]
   15bd0:	b	15c10 <__assert_fail@plt+0x4620>
   15bd4:	movw	r1, #31267	; 0x7a23
   15bd8:	mov	r0, #0
   15bdc:	mov	r2, #5
   15be0:	movt	r1, #1
   15be4:	bl	11380 <dcgettext@plt>
   15be8:	ldr	r3, [r7]
   15bec:	mov	r2, r0
   15bf0:	ldmib	r7, {r0, r1, r6}
   15bf4:	ldr	r5, [r7, #16]
   15bf8:	ldr	r4, [r7, #20]
   15bfc:	ldr	r7, [r7, #24]
   15c00:	stm	sp, {r0, r1, r6}
   15c04:	str	r5, [sp, #12]
   15c08:	str	r4, [sp, #16]
   15c0c:	str	r7, [sp, #20]
   15c10:	mov	r0, r8
   15c14:	mov	r1, #1
   15c18:	b	15cc4 <__assert_fail@plt+0x46d4>
   15c1c:	movw	r1, #31359	; 0x7a7f
   15c20:	movt	r1, #1
   15c24:	mov	r0, #0
   15c28:	mov	r2, #5
   15c2c:	bl	11380 <dcgettext@plt>
   15c30:	mov	ip, r0
   15c34:	ldr	r3, [r7]
   15c38:	ldr	r0, [r7, #4]
   15c3c:	ldr	r1, [r7, #8]
   15c40:	ldr	r6, [r7, #12]
   15c44:	ldr	r5, [r7, #16]
   15c48:	ldr	r4, [r7, #20]
   15c4c:	ldr	r2, [r7, #24]
   15c50:	ldr	lr, [r7, #28]
   15c54:	ldr	r7, [r7, #32]
   15c58:	stm	sp, {r0, r1, r6}
   15c5c:	str	r5, [sp, #12]
   15c60:	str	r4, [sp, #16]
   15c64:	str	r2, [sp, #20]
   15c68:	str	lr, [sp, #24]
   15c6c:	str	r7, [sp, #28]
   15c70:	b	15cb8 <__assert_fail@plt+0x46c8>
   15c74:	movw	r1, #31311	; 0x7a4f
   15c78:	mov	r0, #0
   15c7c:	mov	r2, #5
   15c80:	movt	r1, #1
   15c84:	bl	11380 <dcgettext@plt>
   15c88:	mov	ip, r0
   15c8c:	ldr	r3, [r7]
   15c90:	ldmib	r7, {r0, r1, r6}
   15c94:	ldr	r5, [r7, #16]
   15c98:	ldr	r4, [r7, #20]
   15c9c:	ldr	r2, [r7, #24]
   15ca0:	ldr	r7, [r7, #28]
   15ca4:	stm	sp, {r0, r1, r6}
   15ca8:	str	r5, [sp, #12]
   15cac:	str	r4, [sp, #16]
   15cb0:	str	r2, [sp, #20]
   15cb4:	str	r7, [sp, #24]
   15cb8:	mov	r0, r8
   15cbc:	mov	r1, #1
   15cc0:	mov	r2, ip
   15cc4:	bl	1153c <__fprintf_chk@plt>
   15cc8:	sub	sp, fp, #24
   15ccc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15cd0:	push	{r4, sl, fp, lr}
   15cd4:	add	fp, sp, #8
   15cd8:	sub	sp, sp, #8
   15cdc:	ldr	ip, [fp, #8]
   15ce0:	mov	lr, #0
   15ce4:	ldr	r4, [ip, lr, lsl #2]
   15ce8:	add	lr, lr, #1
   15cec:	cmp	r4, #0
   15cf0:	bne	15ce4 <__assert_fail@plt+0x46f4>
   15cf4:	sub	r4, lr, #1
   15cf8:	str	ip, [sp]
   15cfc:	str	r4, [sp, #4]
   15d00:	bl	159a4 <__assert_fail@plt+0x43b4>
   15d04:	sub	sp, fp, #8
   15d08:	pop	{r4, sl, fp, pc}
   15d0c:	push	{r4, r5, fp, lr}
   15d10:	add	fp, sp, #8
   15d14:	sub	sp, sp, #48	; 0x30
   15d18:	ldr	r4, [fp, #8]
   15d1c:	mov	ip, #0
   15d20:	add	lr, sp, #8
   15d24:	ldr	r5, [r4]
   15d28:	cmp	r5, #0
   15d2c:	str	r5, [lr, ip, lsl #2]
   15d30:	beq	15d44 <__assert_fail@plt+0x4754>
   15d34:	add	ip, ip, #1
   15d38:	add	r4, r4, #4
   15d3c:	cmp	ip, #10
   15d40:	bcc	15d24 <__assert_fail@plt+0x4734>
   15d44:	str	lr, [sp]
   15d48:	str	ip, [sp, #4]
   15d4c:	bl	159a4 <__assert_fail@plt+0x43b4>
   15d50:	sub	sp, fp, #8
   15d54:	pop	{r4, r5, fp, pc}
   15d58:	push	{fp, lr}
   15d5c:	mov	fp, sp
   15d60:	sub	sp, sp, #8
   15d64:	add	ip, fp, #8
   15d68:	str	ip, [sp, #4]
   15d6c:	str	ip, [sp]
   15d70:	bl	15d0c <__assert_fail@plt+0x471c>
   15d74:	mov	sp, fp
   15d78:	pop	{fp, pc}
   15d7c:	push	{fp, lr}
   15d80:	mov	fp, sp
   15d84:	movw	r0, #33172	; 0x8194
   15d88:	movt	r0, #2
   15d8c:	ldr	r1, [r0]
   15d90:	movw	r0, #30252	; 0x762c
   15d94:	movt	r0, #1
   15d98:	bl	112d8 <fputs_unlocked@plt>
   15d9c:	movw	r1, #31471	; 0x7aef
   15da0:	mov	r0, #0
   15da4:	mov	r2, #5
   15da8:	movt	r1, #1
   15dac:	bl	11380 <dcgettext@plt>
   15db0:	movw	r2, #31491	; 0x7b03
   15db4:	mov	r1, r0
   15db8:	mov	r0, #1
   15dbc:	movt	r2, #1
   15dc0:	bl	11524 <__printf_chk@plt>
   15dc4:	movw	r1, #31513	; 0x7b19
   15dc8:	mov	r0, #0
   15dcc:	mov	r2, #5
   15dd0:	movt	r1, #1
   15dd4:	bl	11380 <dcgettext@plt>
   15dd8:	movw	r2, #29522	; 0x7352
   15ddc:	movw	r3, #30061	; 0x756d
   15de0:	mov	r1, r0
   15de4:	mov	r0, #1
   15de8:	movt	r2, #1
   15dec:	movt	r3, #1
   15df0:	bl	11524 <__printf_chk@plt>
   15df4:	movw	r1, #31533	; 0x7b2d
   15df8:	mov	r0, #0
   15dfc:	mov	r2, #5
   15e00:	movt	r1, #1
   15e04:	bl	11380 <dcgettext@plt>
   15e08:	movw	r2, #31572	; 0x7b54
   15e0c:	mov	r1, r0
   15e10:	mov	r0, #1
   15e14:	movt	r2, #1
   15e18:	pop	{fp, lr}
   15e1c:	b	11524 <__printf_chk@plt>
   15e20:	b	15e24 <__assert_fail@plt+0x4834>
   15e24:	push	{r4, r5, r6, sl, fp, lr}
   15e28:	add	fp, sp, #16
   15e2c:	mov	r4, r2
   15e30:	mov	r5, r1
   15e34:	mov	r6, r0
   15e38:	bl	16888 <_obstack_memory_used@@Base+0x74>
   15e3c:	cmp	r0, #0
   15e40:	popne	{r4, r5, r6, sl, fp, pc}
   15e44:	cmp	r6, #0
   15e48:	beq	15e5c <__assert_fail@plt+0x486c>
   15e4c:	cmp	r5, #0
   15e50:	cmpne	r4, #0
   15e54:	bne	15e5c <__assert_fail@plt+0x486c>
   15e58:	pop	{r4, r5, r6, sl, fp, pc}
   15e5c:	bl	162b0 <__assert_fail@plt+0x4cc0>
   15e60:	push	{fp, lr}
   15e64:	mov	fp, sp
   15e68:	bl	16348 <__assert_fail@plt+0x4d58>
   15e6c:	cmp	r0, #0
   15e70:	popne	{fp, pc}
   15e74:	bl	162b0 <__assert_fail@plt+0x4cc0>
   15e78:	push	{fp, lr}
   15e7c:	mov	fp, sp
   15e80:	bl	16348 <__assert_fail@plt+0x4d58>
   15e84:	cmp	r0, #0
   15e88:	popne	{fp, pc}
   15e8c:	bl	162b0 <__assert_fail@plt+0x4cc0>
   15e90:	push	{fp, lr}
   15e94:	mov	fp, sp
   15e98:	bl	16348 <__assert_fail@plt+0x4d58>
   15e9c:	cmp	r0, #0
   15ea0:	popne	{fp, pc}
   15ea4:	bl	162b0 <__assert_fail@plt+0x4cc0>
   15ea8:	push	{r4, r5, fp, lr}
   15eac:	add	fp, sp, #8
   15eb0:	mov	r4, r1
   15eb4:	mov	r5, r0
   15eb8:	bl	16378 <__assert_fail@plt+0x4d88>
   15ebc:	cmp	r0, #0
   15ec0:	popne	{r4, r5, fp, pc}
   15ec4:	cmp	r5, #0
   15ec8:	beq	15ed8 <__assert_fail@plt+0x48e8>
   15ecc:	cmp	r4, #0
   15ed0:	bne	15ed8 <__assert_fail@plt+0x48e8>
   15ed4:	pop	{r4, r5, fp, pc}
   15ed8:	bl	162b0 <__assert_fail@plt+0x4cc0>
   15edc:	push	{fp, lr}
   15ee0:	mov	fp, sp
   15ee4:	cmp	r1, #0
   15ee8:	orreq	r1, r1, #1
   15eec:	bl	16378 <__assert_fail@plt+0x4d88>
   15ef0:	cmp	r0, #0
   15ef4:	popne	{fp, pc}
   15ef8:	bl	162b0 <__assert_fail@plt+0x4cc0>
   15efc:	push	{fp, lr}
   15f00:	mov	fp, sp
   15f04:	clz	r3, r2
   15f08:	lsr	ip, r3, #5
   15f0c:	clz	r3, r1
   15f10:	lsr	r3, r3, #5
   15f14:	orrs	r3, r3, ip
   15f18:	movwne	r1, #1
   15f1c:	movwne	r2, #1
   15f20:	bl	16888 <_obstack_memory_used@@Base+0x74>
   15f24:	cmp	r0, #0
   15f28:	popne	{fp, pc}
   15f2c:	bl	162b0 <__assert_fail@plt+0x4cc0>
   15f30:	push	{fp, lr}
   15f34:	mov	fp, sp
   15f38:	mov	r2, r1
   15f3c:	mov	r1, r0
   15f40:	mov	r0, #0
   15f44:	bl	16888 <_obstack_memory_used@@Base+0x74>
   15f48:	cmp	r0, #0
   15f4c:	popne	{fp, pc}
   15f50:	bl	162b0 <__assert_fail@plt+0x4cc0>
   15f54:	mov	r2, r1
   15f58:	mov	r1, r0
   15f5c:	mov	r0, #0
   15f60:	b	15efc <__assert_fail@plt+0x490c>
   15f64:	mov	r2, #1
   15f68:	b	15f6c <__assert_fail@plt+0x497c>
   15f6c:	push	{r4, r5, fp, lr}
   15f70:	add	fp, sp, #8
   15f74:	ldr	r5, [r1]
   15f78:	mov	r4, r1
   15f7c:	cmp	r0, #0
   15f80:	beq	15f98 <__assert_fail@plt+0x49a8>
   15f84:	mov	r1, #1
   15f88:	add	r1, r1, r5, lsr #1
   15f8c:	adds	r5, r5, r1
   15f90:	bcc	15fb0 <__assert_fail@plt+0x49c0>
   15f94:	bl	162b0 <__assert_fail@plt+0x4cc0>
   15f98:	cmp	r5, #0
   15f9c:	bne	15fb0 <__assert_fail@plt+0x49c0>
   15fa0:	mov	r1, #64	; 0x40
   15fa4:	cmp	r2, #64	; 0x40
   15fa8:	udiv	r5, r1, r2
   15fac:	addhi	r5, r5, #1
   15fb0:	mov	r1, r5
   15fb4:	bl	15e24 <__assert_fail@plt+0x4834>
   15fb8:	str	r5, [r4]
   15fbc:	pop	{r4, r5, fp, pc}
   15fc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15fc4:	add	fp, sp, #24
   15fc8:	ldr	r6, [r1]
   15fcc:	mov	r8, r1
   15fd0:	ldr	r4, [fp, #8]
   15fd4:	add	r1, r6, r6, asr #1
   15fd8:	cmp	r1, r6
   15fdc:	mvnvs	r1, #-2147483648	; 0x80000000
   15fe0:	cmp	r1, r3
   15fe4:	mov	r5, r1
   15fe8:	movgt	r5, r3
   15fec:	cmn	r3, #1
   15ff0:	movle	r5, r1
   15ff4:	cmn	r4, #1
   15ff8:	ble	16018 <__assert_fail@plt+0x4a28>
   15ffc:	cmp	r4, #0
   16000:	beq	1606c <__assert_fail@plt+0x4a7c>
   16004:	cmn	r5, #1
   16008:	ble	16040 <__assert_fail@plt+0x4a50>
   1600c:	mvn	r7, #-2147483648	; 0x80000000
   16010:	udiv	r1, r7, r4
   16014:	b	16034 <__assert_fail@plt+0x4a44>
   16018:	cmn	r5, #1
   1601c:	ble	1605c <__assert_fail@plt+0x4a6c>
   16020:	cmn	r4, #1
   16024:	beq	1606c <__assert_fail@plt+0x4a7c>
   16028:	mov	r1, #-2147483648	; 0x80000000
   1602c:	mvn	r7, #-2147483648	; 0x80000000
   16030:	sdiv	r1, r1, r4
   16034:	cmp	r1, r5
   16038:	bge	1606c <__assert_fail@plt+0x4a7c>
   1603c:	b	1607c <__assert_fail@plt+0x4a8c>
   16040:	beq	1606c <__assert_fail@plt+0x4a7c>
   16044:	mov	r1, #-2147483648	; 0x80000000
   16048:	mvn	r7, #-2147483648	; 0x80000000
   1604c:	sdiv	r1, r1, r5
   16050:	cmp	r1, r4
   16054:	bge	1606c <__assert_fail@plt+0x4a7c>
   16058:	b	1607c <__assert_fail@plt+0x4a8c>
   1605c:	mvn	r7, #-2147483648	; 0x80000000
   16060:	sdiv	r1, r7, r4
   16064:	cmp	r5, r1
   16068:	blt	1607c <__assert_fail@plt+0x4a8c>
   1606c:	mul	r1, r5, r4
   16070:	mov	r7, #64	; 0x40
   16074:	cmp	r1, #63	; 0x3f
   16078:	bgt	16084 <__assert_fail@plt+0x4a94>
   1607c:	sdiv	r5, r7, r4
   16080:	mul	r1, r5, r4
   16084:	cmp	r0, #0
   16088:	moveq	r7, #0
   1608c:	streq	r7, [r8]
   16090:	sub	r7, r5, r6
   16094:	cmp	r7, r2
   16098:	bge	1613c <__assert_fail@plt+0x4b4c>
   1609c:	add	r5, r6, r2
   160a0:	mov	r2, #0
   160a4:	mov	r1, #0
   160a8:	cmp	r5, r3
   160ac:	movwgt	r2, #1
   160b0:	cmn	r3, #1
   160b4:	movwgt	r1, #1
   160b8:	cmp	r5, r6
   160bc:	bvs	16124 <__assert_fail@plt+0x4b34>
   160c0:	ands	r1, r1, r2
   160c4:	bne	16124 <__assert_fail@plt+0x4b34>
   160c8:	cmn	r4, #1
   160cc:	ble	160ec <__assert_fail@plt+0x4afc>
   160d0:	cmp	r4, #0
   160d4:	beq	16138 <__assert_fail@plt+0x4b48>
   160d8:	cmn	r5, #1
   160dc:	ble	16110 <__assert_fail@plt+0x4b20>
   160e0:	mvn	r1, #-2147483648	; 0x80000000
   160e4:	udiv	r1, r1, r4
   160e8:	b	16104 <__assert_fail@plt+0x4b14>
   160ec:	cmn	r5, #1
   160f0:	ble	16128 <__assert_fail@plt+0x4b38>
   160f4:	cmn	r4, #1
   160f8:	beq	16138 <__assert_fail@plt+0x4b48>
   160fc:	mov	r1, #-2147483648	; 0x80000000
   16100:	sdiv	r1, r1, r4
   16104:	cmp	r1, r5
   16108:	bge	16138 <__assert_fail@plt+0x4b48>
   1610c:	b	16124 <__assert_fail@plt+0x4b34>
   16110:	beq	16138 <__assert_fail@plt+0x4b48>
   16114:	mov	r1, #-2147483648	; 0x80000000
   16118:	sdiv	r1, r1, r5
   1611c:	cmp	r1, r4
   16120:	bge	16138 <__assert_fail@plt+0x4b48>
   16124:	bl	162b0 <__assert_fail@plt+0x4cc0>
   16128:	mvn	r1, #-2147483648	; 0x80000000
   1612c:	sdiv	r1, r1, r4
   16130:	cmp	r5, r1
   16134:	blt	16124 <__assert_fail@plt+0x4b34>
   16138:	mul	r1, r5, r4
   1613c:	bl	15ea8 <__assert_fail@plt+0x48b8>
   16140:	str	r5, [r8]
   16144:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16148:	push	{fp, lr}
   1614c:	mov	fp, sp
   16150:	mov	r1, #1
   16154:	bl	162f4 <__assert_fail@plt+0x4d04>
   16158:	cmp	r0, #0
   1615c:	popne	{fp, pc}
   16160:	bl	162b0 <__assert_fail@plt+0x4cc0>
   16164:	push	{fp, lr}
   16168:	mov	fp, sp
   1616c:	bl	162f4 <__assert_fail@plt+0x4d04>
   16170:	cmp	r0, #0
   16174:	popne	{fp, pc}
   16178:	bl	162b0 <__assert_fail@plt+0x4cc0>
   1617c:	push	{fp, lr}
   16180:	mov	fp, sp
   16184:	mov	r1, #1
   16188:	bl	162f4 <__assert_fail@plt+0x4d04>
   1618c:	cmp	r0, #0
   16190:	popne	{fp, pc}
   16194:	bl	162b0 <__assert_fail@plt+0x4cc0>
   16198:	push	{fp, lr}
   1619c:	mov	fp, sp
   161a0:	bl	162f4 <__assert_fail@plt+0x4d04>
   161a4:	cmp	r0, #0
   161a8:	popne	{fp, pc}
   161ac:	bl	162b0 <__assert_fail@plt+0x4cc0>
   161b0:	push	{r4, r5, r6, sl, fp, lr}
   161b4:	add	fp, sp, #16
   161b8:	mov	r5, r0
   161bc:	mov	r0, r1
   161c0:	mov	r4, r1
   161c4:	bl	16348 <__assert_fail@plt+0x4d58>
   161c8:	cmp	r0, #0
   161cc:	beq	161e8 <__assert_fail@plt+0x4bf8>
   161d0:	mov	r1, r5
   161d4:	mov	r2, r4
   161d8:	mov	r6, r0
   161dc:	bl	1135c <memcpy@plt>
   161e0:	mov	r0, r6
   161e4:	pop	{r4, r5, r6, sl, fp, pc}
   161e8:	bl	162b0 <__assert_fail@plt+0x4cc0>
   161ec:	push	{r4, r5, r6, sl, fp, lr}
   161f0:	add	fp, sp, #16
   161f4:	mov	r5, r0
   161f8:	mov	r0, r1
   161fc:	mov	r4, r1
   16200:	bl	16348 <__assert_fail@plt+0x4d58>
   16204:	cmp	r0, #0
   16208:	beq	16224 <__assert_fail@plt+0x4c34>
   1620c:	mov	r1, r5
   16210:	mov	r2, r4
   16214:	mov	r6, r0
   16218:	bl	1135c <memcpy@plt>
   1621c:	mov	r0, r6
   16220:	pop	{r4, r5, r6, sl, fp, pc}
   16224:	bl	162b0 <__assert_fail@plt+0x4cc0>
   16228:	push	{r4, r5, r6, sl, fp, lr}
   1622c:	add	fp, sp, #16
   16230:	mov	r5, r0
   16234:	add	r0, r1, #1
   16238:	mov	r4, r1
   1623c:	bl	16348 <__assert_fail@plt+0x4d58>
   16240:	cmp	r0, #0
   16244:	beq	1626c <__assert_fail@plt+0x4c7c>
   16248:	mov	r6, r0
   1624c:	mov	r0, #0
   16250:	mov	r1, r5
   16254:	mov	r2, r4
   16258:	strb	r0, [r6, r4]
   1625c:	mov	r0, r6
   16260:	bl	1135c <memcpy@plt>
   16264:	mov	r0, r6
   16268:	pop	{r4, r5, r6, sl, fp, pc}
   1626c:	bl	162b0 <__assert_fail@plt+0x4cc0>
   16270:	push	{r4, r5, r6, sl, fp, lr}
   16274:	add	fp, sp, #16
   16278:	mov	r4, r0
   1627c:	bl	114b8 <strlen@plt>
   16280:	add	r5, r0, #1
   16284:	mov	r0, r5
   16288:	bl	16348 <__assert_fail@plt+0x4d58>
   1628c:	cmp	r0, #0
   16290:	beq	162ac <__assert_fail@plt+0x4cbc>
   16294:	mov	r1, r4
   16298:	mov	r2, r5
   1629c:	mov	r6, r0
   162a0:	bl	1135c <memcpy@plt>
   162a4:	mov	r0, r6
   162a8:	pop	{r4, r5, r6, sl, fp, pc}
   162ac:	bl	162b0 <__assert_fail@plt+0x4cc0>
   162b0:	push	{fp, lr}
   162b4:	mov	fp, sp
   162b8:	movw	r0, #33068	; 0x812c
   162bc:	movw	r1, #31648	; 0x7ba0
   162c0:	mov	r2, #5
   162c4:	movt	r0, #2
   162c8:	movt	r1, #1
   162cc:	ldr	r4, [r0]
   162d0:	mov	r0, #0
   162d4:	bl	11380 <dcgettext@plt>
   162d8:	movw	r2, #30580	; 0x7774
   162dc:	mov	r3, r0
   162e0:	mov	r0, r4
   162e4:	mov	r1, #0
   162e8:	movt	r2, #1
   162ec:	bl	1141c <error@plt>
   162f0:	bl	115cc <abort@plt>
   162f4:	clz	r2, r1
   162f8:	clz	r3, r0
   162fc:	lsr	r2, r2, #5
   16300:	lsr	r3, r3, #5
   16304:	orrs	r2, r3, r2
   16308:	movwne	r1, #1
   1630c:	movwne	r0, #1
   16310:	cmp	r1, #0
   16314:	beq	16344 <__assert_fail@plt+0x4d54>
   16318:	mvn	r2, #-2147483648	; 0x80000000
   1631c:	udiv	r2, r2, r1
   16320:	cmp	r2, r0
   16324:	bcs	16344 <__assert_fail@plt+0x4d54>
   16328:	push	{fp, lr}
   1632c:	mov	fp, sp
   16330:	bl	114dc <__errno_location@plt>
   16334:	mov	r1, #12
   16338:	str	r1, [r0]
   1633c:	mov	r0, #0
   16340:	pop	{fp, pc}
   16344:	b	112cc <calloc@plt>
   16348:	cmp	r0, #0
   1634c:	movweq	r0, #1
   16350:	cmn	r0, #1
   16354:	ble	1635c <__assert_fail@plt+0x4d6c>
   16358:	b	1144c <malloc@plt>
   1635c:	push	{fp, lr}
   16360:	mov	fp, sp
   16364:	bl	114dc <__errno_location@plt>
   16368:	mov	r1, #12
   1636c:	str	r1, [r0]
   16370:	mov	r0, #0
   16374:	pop	{fp, pc}
   16378:	push	{fp, lr}
   1637c:	mov	fp, sp
   16380:	cmp	r0, #0
   16384:	beq	163a0 <__assert_fail@plt+0x4db0>
   16388:	cmp	r1, #0
   1638c:	beq	163ac <__assert_fail@plt+0x4dbc>
   16390:	cmn	r1, #1
   16394:	ble	163b4 <__assert_fail@plt+0x4dc4>
   16398:	pop	{fp, lr}
   1639c:	b	11398 <realloc@plt>
   163a0:	mov	r0, r1
   163a4:	pop	{fp, lr}
   163a8:	b	16348 <__assert_fail@plt+0x4d58>
   163ac:	bl	1378c <__assert_fail@plt+0x219c>
   163b0:	b	163c0 <__assert_fail@plt+0x4dd0>
   163b4:	bl	114dc <__errno_location@plt>
   163b8:	mov	r1, #12
   163bc:	str	r1, [r0]
   163c0:	mov	r0, #0
   163c4:	pop	{fp, pc}
   163c8:	push	{r4, r5, r6, sl, fp, lr}
   163cc:	add	fp, sp, #16
   163d0:	mov	r4, r0
   163d4:	bl	113f8 <__fpending@plt>
   163d8:	mov	r5, r0
   163dc:	mov	r0, r4
   163e0:	bl	11404 <ferror_unlocked@plt>
   163e4:	mov	r6, r0
   163e8:	mov	r0, r4
   163ec:	bl	13694 <__assert_fail@plt+0x20a4>
   163f0:	cmp	r6, #0
   163f4:	beq	16414 <__assert_fail@plt+0x4e24>
   163f8:	mvn	r4, #0
   163fc:	cmp	r0, #0
   16400:	bne	16440 <__assert_fail@plt+0x4e50>
   16404:	bl	114dc <__errno_location@plt>
   16408:	mov	r1, #0
   1640c:	str	r1, [r0]
   16410:	b	16440 <__assert_fail@plt+0x4e50>
   16414:	cmp	r0, #0
   16418:	mov	r4, r0
   1641c:	mvnne	r4, #0
   16420:	cmp	r5, #0
   16424:	bne	16440 <__assert_fail@plt+0x4e50>
   16428:	cmp	r0, #0
   1642c:	beq	16440 <__assert_fail@plt+0x4e50>
   16430:	bl	114dc <__errno_location@plt>
   16434:	ldr	r0, [r0]
   16438:	subs	r4, r0, #9
   1643c:	mvnne	r4, #0
   16440:	mov	r0, r4
   16444:	pop	{r4, r5, r6, sl, fp, pc}
   16448:	push	{r4, sl, fp, lr}
   1644c:	add	fp, sp, #8
   16450:	sub	sp, sp, #264	; 0x108
   16454:	add	r1, sp, #7
   16458:	movw	r2, #257	; 0x101
   1645c:	bl	168c4 <_obstack_memory_used@@Base+0xb0>
   16460:	mov	r4, #0
   16464:	cmp	r0, #0
   16468:	bne	164a0 <__assert_fail@plt+0x4eb0>
   1646c:	movw	r1, #31665	; 0x7bb1
   16470:	add	r0, sp, #7
   16474:	movt	r1, #1
   16478:	bl	112f0 <strcmp@plt>
   1647c:	cmp	r0, #0
   16480:	beq	164a0 <__assert_fail@plt+0x4eb0>
   16484:	movw	r1, #31667	; 0x7bb3
   16488:	add	r0, sp, #7
   1648c:	movt	r1, #1
   16490:	bl	112f0 <strcmp@plt>
   16494:	mov	r4, r0
   16498:	cmp	r0, #0
   1649c:	movwne	r4, #1
   164a0:	mov	r0, r4
   164a4:	sub	sp, fp, #8
   164a8:	pop	{r4, sl, fp, pc}
   164ac:	push	{fp, lr}
   164b0:	mov	fp, sp
   164b4:	mov	r0, #14
   164b8:	bl	11578 <nl_langinfo@plt>
   164bc:	movw	r1, #30253	; 0x762d
   164c0:	cmp	r0, #0
   164c4:	movt	r1, #1
   164c8:	movne	r1, r0
   164cc:	movw	r0, #31673	; 0x7bb9
   164d0:	ldrb	r2, [r1]
   164d4:	movt	r0, #1
   164d8:	cmp	r2, #0
   164dc:	movne	r0, r1
   164e0:	pop	{fp, pc}

000164e4 <_obstack_begin@@Base>:
   164e4:	push	{fp, lr}
   164e8:	mov	fp, sp
   164ec:	str	r3, [r0, #28]
   164f0:	ldr	r3, [fp, #8]
   164f4:	str	r3, [r0, #32]
   164f8:	ldrb	r3, [r0, #40]	; 0x28
   164fc:	and	r3, r3, #254	; 0xfe
   16500:	strb	r3, [r0, #40]	; 0x28
   16504:	bl	16510 <_obstack_begin@@Base+0x2c>
   16508:	mov	r0, #1
   1650c:	pop	{fp, pc}
   16510:	push	{r4, r5, r6, sl, fp, lr}
   16514:	add	fp, sp, #16
   16518:	cmp	r1, #0
   1651c:	mov	r5, r2
   16520:	mov	r4, r0
   16524:	movweq	r1, #4072	; 0xfe8
   16528:	cmp	r2, #0
   1652c:	movweq	r5, #8
   16530:	str	r1, [r0]
   16534:	sub	r6, r5, #1
   16538:	str	r6, [r0, #24]
   1653c:	ldrb	r0, [r0, #40]	; 0x28
   16540:	tst	r0, #1
   16544:	bne	16558 <_obstack_begin@@Base+0x74>
   16548:	ldr	r2, [r4, #28]
   1654c:	mov	r0, r1
   16550:	blx	r2
   16554:	b	16564 <_obstack_begin@@Base+0x80>
   16558:	ldr	r2, [r4, #28]
   1655c:	ldr	r0, [r4, #36]	; 0x24
   16560:	blx	r2
   16564:	cmp	r0, #0
   16568:	str	r0, [r4, #4]
   1656c:	addne	r1, r6, r0
   16570:	rsbne	r2, r5, #0
   16574:	addne	r1, r1, #8
   16578:	andne	r1, r1, r2
   1657c:	strne	r1, [r4, #12]
   16580:	strne	r1, [r4, #8]
   16584:	ldrne	r1, [r4]
   16588:	addne	r1, r0, r1
   1658c:	strne	r1, [r0]
   16590:	strne	r1, [r4, #16]
   16594:	movne	r1, #0
   16598:	strne	r1, [r0, #4]
   1659c:	ldrbne	r0, [r4, #40]	; 0x28
   165a0:	andne	r0, r0, #249	; 0xf9
   165a4:	strbne	r0, [r4, #40]	; 0x28
   165a8:	popne	{r4, r5, r6, sl, fp, pc}
   165ac:	movw	r0, #33136	; 0x8170
   165b0:	movt	r0, #2
   165b4:	ldr	r0, [r0]
   165b8:	blx	r0

000165bc <_obstack_begin_1@@Base>:
   165bc:	push	{fp, lr}
   165c0:	mov	fp, sp
   165c4:	str	r3, [r0, #28]
   165c8:	ldr	r3, [fp, #8]
   165cc:	str	r3, [r0, #32]
   165d0:	ldr	r3, [fp, #12]
   165d4:	str	r3, [r0, #36]	; 0x24
   165d8:	ldrb	r3, [r0, #40]	; 0x28
   165dc:	orr	r3, r3, #1
   165e0:	strb	r3, [r0, #40]	; 0x28
   165e4:	bl	16510 <_obstack_begin@@Base+0x2c>
   165e8:	mov	r0, #1
   165ec:	pop	{fp, pc}

000165f0 <_obstack_newchunk@@Base>:
   165f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165f4:	add	fp, sp, #28
   165f8:	sub	sp, sp, #4
   165fc:	mov	r4, r0
   16600:	ldr	r2, [r0]
   16604:	ldr	r0, [r0, #8]
   16608:	ldr	r3, [r4, #12]
   1660c:	sub	r9, r3, r0
   16610:	ldr	r0, [r4, #24]
   16614:	mov	r3, #0
   16618:	add	r1, r9, r1
   1661c:	adds	r6, r1, r0
   16620:	adc	r0, r3, #0
   16624:	mov	r3, #100	; 0x64
   16628:	add	r3, r3, r9, lsr #3
   1662c:	adds	r7, r3, r6
   16630:	movcs	r7, r6
   16634:	cmp	r7, r2
   16638:	movcc	r7, r2
   1663c:	cmp	r1, r9
   16640:	bcc	16738 <_obstack_newchunk@@Base+0x148>
   16644:	cmp	r0, #0
   16648:	bne	16738 <_obstack_newchunk@@Base+0x148>
   1664c:	ldrb	r0, [r4, #40]	; 0x28
   16650:	ldr	r8, [r4, #4]
   16654:	tst	r0, #1
   16658:	bne	1666c <_obstack_newchunk@@Base+0x7c>
   1665c:	ldr	r1, [r4, #28]
   16660:	mov	r0, r7
   16664:	blx	r1
   16668:	b	1667c <_obstack_newchunk@@Base+0x8c>
   1666c:	ldr	r2, [r4, #28]
   16670:	ldr	r0, [r4, #36]	; 0x24
   16674:	mov	r1, r7
   16678:	blx	r2
   1667c:	mov	r6, r0
   16680:	cmp	r0, #0
   16684:	beq	16738 <_obstack_newchunk@@Base+0x148>
   16688:	add	r0, r6, r7
   1668c:	str	r6, [r4, #4]
   16690:	str	r8, [r6, #4]
   16694:	mov	r2, r9
   16698:	str	r0, [r4, #16]
   1669c:	str	r0, [r6]
   166a0:	ldr	r5, [r4, #24]
   166a4:	ldr	sl, [r4, #8]
   166a8:	add	r0, r5, r6
   166ac:	mov	r1, sl
   166b0:	add	r0, r0, #8
   166b4:	bic	r7, r0, r5
   166b8:	mov	r0, r7
   166bc:	bl	1135c <memcpy@plt>
   166c0:	ldrb	r0, [r4, #40]	; 0x28
   166c4:	tst	r0, #2
   166c8:	bne	16718 <_obstack_newchunk@@Base+0x128>
   166cc:	add	r1, r5, r8
   166d0:	mvn	r0, r5
   166d4:	add	r1, r1, #8
   166d8:	and	r0, r1, r0
   166dc:	cmp	sl, r0
   166e0:	bne	16718 <_obstack_newchunk@@Base+0x128>
   166e4:	ldr	r0, [r8, #4]
   166e8:	str	r0, [r6, #4]
   166ec:	ldrb	r0, [r4, #40]	; 0x28
   166f0:	tst	r0, #1
   166f4:	bne	16708 <_obstack_newchunk@@Base+0x118>
   166f8:	ldr	r1, [r4, #32]
   166fc:	mov	r0, r8
   16700:	blx	r1
   16704:	b	16718 <_obstack_newchunk@@Base+0x128>
   16708:	ldr	r2, [r4, #32]
   1670c:	ldr	r0, [r4, #36]	; 0x24
   16710:	mov	r1, r8
   16714:	blx	r2
   16718:	add	r0, r7, r9
   1671c:	str	r7, [r4, #8]
   16720:	str	r0, [r4, #12]
   16724:	ldrb	r0, [r4, #40]	; 0x28
   16728:	and	r0, r0, #253	; 0xfd
   1672c:	strb	r0, [r4, #40]	; 0x28
   16730:	sub	sp, fp, #28
   16734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16738:	movw	r0, #33136	; 0x8170
   1673c:	movt	r0, #2
   16740:	ldr	r0, [r0]
   16744:	blx	r0

00016748 <_obstack_allocated_p@@Base>:
   16748:	ldr	r2, [r0, #4]
   1674c:	mov	r0, #0
   16750:	b	16758 <_obstack_allocated_p@@Base+0x10>
   16754:	ldr	r2, [r2, #4]
   16758:	cmp	r2, #0
   1675c:	bxeq	lr
   16760:	cmp	r2, r1
   16764:	bcs	16754 <_obstack_allocated_p@@Base+0xc>
   16768:	ldr	r3, [r2]
   1676c:	cmp	r3, r1
   16770:	bcc	16754 <_obstack_allocated_p@@Base+0xc>
   16774:	mov	r0, #1
   16778:	bx	lr

0001677c <_obstack_free@@Base>:
   1677c:	push	{r4, r5, r6, sl, fp, lr}
   16780:	add	fp, sp, #16
   16784:	mov	r5, r1
   16788:	ldr	r1, [r0, #4]
   1678c:	cmp	r1, #0
   16790:	beq	167f0 <_obstack_free@@Base+0x74>
   16794:	mov	r4, r0
   16798:	cmp	r1, r5
   1679c:	bcs	167ac <_obstack_free@@Base+0x30>
   167a0:	ldr	r0, [r1]
   167a4:	cmp	r0, r5
   167a8:	bcs	167fc <_obstack_free@@Base+0x80>
   167ac:	ldrb	r0, [r4, #40]	; 0x28
   167b0:	ldr	r6, [r1, #4]
   167b4:	tst	r0, #1
   167b8:	bne	167cc <_obstack_free@@Base+0x50>
   167bc:	ldr	r2, [r4, #32]
   167c0:	mov	r0, r1
   167c4:	blx	r2
   167c8:	b	167d8 <_obstack_free@@Base+0x5c>
   167cc:	ldr	r2, [r4, #32]
   167d0:	ldr	r0, [r4, #36]	; 0x24
   167d4:	blx	r2
   167d8:	ldrb	r0, [r4, #40]	; 0x28
   167dc:	cmp	r6, #0
   167e0:	mov	r1, r6
   167e4:	orr	r0, r0, #2
   167e8:	strb	r0, [r4, #40]	; 0x28
   167ec:	bne	16798 <_obstack_free@@Base+0x1c>
   167f0:	cmp	r5, #0
   167f4:	popeq	{r4, r5, r6, sl, fp, pc}
   167f8:	bl	115cc <abort@plt>
   167fc:	str	r5, [r4, #8]
   16800:	str	r5, [r4, #12]
   16804:	ldr	r0, [r1]
   16808:	str	r1, [r4, #4]
   1680c:	str	r0, [r4, #16]
   16810:	pop	{r4, r5, r6, sl, fp, pc}

00016814 <_obstack_memory_used@@Base>:
   16814:	ldr	r1, [r0, #4]
   16818:	mov	r0, #0
   1681c:	cmp	r1, #0
   16820:	bxeq	lr
   16824:	ldr	r2, [r1]
   16828:	sub	r0, r0, r1
   1682c:	ldr	r1, [r1, #4]
   16830:	add	r0, r0, r2
   16834:	b	1681c <_obstack_memory_used@@Base+0x8>
   16838:	push	{fp, lr}
   1683c:	mov	fp, sp
   16840:	movw	r0, #33160	; 0x8188
   16844:	movw	r1, #31648	; 0x7ba0
   16848:	mov	r2, #5
   1684c:	movt	r0, #2
   16850:	movt	r1, #1
   16854:	ldr	r4, [r0]
   16858:	mov	r0, #0
   1685c:	bl	11380 <dcgettext@plt>
   16860:	movw	r2, #30872	; 0x7898
   16864:	mov	r3, r0
   16868:	mov	r0, r4
   1686c:	mov	r1, #1
   16870:	movt	r2, #1
   16874:	bl	1153c <__fprintf_chk@plt>
   16878:	movw	r0, #33068	; 0x812c
   1687c:	movt	r0, #2
   16880:	ldr	r0, [r0]
   16884:	bl	11494 <exit@plt>
   16888:	cmp	r2, #0
   1688c:	beq	168bc <_obstack_memory_used@@Base+0xa8>
   16890:	mvn	r3, #0
   16894:	udiv	r3, r3, r2
   16898:	cmp	r3, r1
   1689c:	bcs	168bc <_obstack_memory_used@@Base+0xa8>
   168a0:	push	{fp, lr}
   168a4:	mov	fp, sp
   168a8:	bl	114dc <__errno_location@plt>
   168ac:	mov	r1, #12
   168b0:	str	r1, [r0]
   168b4:	mov	r0, #0
   168b8:	pop	{fp, pc}
   168bc:	mul	r1, r2, r1
   168c0:	b	16378 <__assert_fail@plt+0x4d88>
   168c4:	push	{r4, r5, r6, r7, fp, lr}
   168c8:	add	fp, sp, #16
   168cc:	mov	r4, r1
   168d0:	mov	r1, #0
   168d4:	mov	r6, r2
   168d8:	bl	11560 <setlocale@plt>
   168dc:	cmp	r0, #0
   168e0:	beq	1690c <_obstack_memory_used@@Base+0xf8>
   168e4:	mov	r7, r0
   168e8:	bl	114b8 <strlen@plt>
   168ec:	cmp	r0, r6
   168f0:	bcs	16920 <_obstack_memory_used@@Base+0x10c>
   168f4:	add	r2, r0, #1
   168f8:	mov	r0, r4
   168fc:	mov	r1, r7
   16900:	bl	1135c <memcpy@plt>
   16904:	mov	r5, #0
   16908:	b	16948 <_obstack_memory_used@@Base+0x134>
   1690c:	cmp	r6, #0
   16910:	mov	r5, #22
   16914:	movne	r0, #0
   16918:	strbne	r0, [r4]
   1691c:	b	16948 <_obstack_memory_used@@Base+0x134>
   16920:	mov	r5, #34	; 0x22
   16924:	cmp	r6, #0
   16928:	beq	16948 <_obstack_memory_used@@Base+0x134>
   1692c:	sub	r6, r6, #1
   16930:	mov	r0, r4
   16934:	mov	r1, r7
   16938:	mov	r2, r6
   1693c:	bl	1135c <memcpy@plt>
   16940:	mov	r0, #0
   16944:	strb	r0, [r4, r6]
   16948:	mov	r0, r5
   1694c:	pop	{r4, r5, r6, r7, fp, pc}
   16950:	mov	r1, #0
   16954:	b	11560 <setlocale@plt>
   16958:	eor	r1, r1, #-2147483648	; 0x80000000
   1695c:	b	16964 <_obstack_memory_used@@Base+0x150>
   16960:	eor	r3, r3, #-2147483648	; 0x80000000
   16964:	push	{r4, r5, lr}
   16968:	lsl	r4, r1, #1
   1696c:	lsl	r5, r3, #1
   16970:	teq	r4, r5
   16974:	teqeq	r0, r2
   16978:	orrsne	ip, r4, r0
   1697c:	orrsne	ip, r5, r2
   16980:	mvnsne	ip, r4, asr #21
   16984:	mvnsne	ip, r5, asr #21
   16988:	beq	16b74 <_obstack_memory_used@@Base+0x360>
   1698c:	lsr	r4, r4, #21
   16990:	rsbs	r5, r4, r5, lsr #21
   16994:	rsblt	r5, r5, #0
   16998:	ble	169b8 <_obstack_memory_used@@Base+0x1a4>
   1699c:	add	r4, r4, r5
   169a0:	eor	r2, r0, r2
   169a4:	eor	r3, r1, r3
   169a8:	eor	r0, r2, r0
   169ac:	eor	r1, r3, r1
   169b0:	eor	r2, r0, r2
   169b4:	eor	r3, r1, r3
   169b8:	cmp	r5, #54	; 0x36
   169bc:	pophi	{r4, r5, pc}
   169c0:	tst	r1, #-2147483648	; 0x80000000
   169c4:	lsl	r1, r1, #12
   169c8:	mov	ip, #1048576	; 0x100000
   169cc:	orr	r1, ip, r1, lsr #12
   169d0:	beq	169dc <_obstack_memory_used@@Base+0x1c8>
   169d4:	rsbs	r0, r0, #0
   169d8:	rsc	r1, r1, #0
   169dc:	tst	r3, #-2147483648	; 0x80000000
   169e0:	lsl	r3, r3, #12
   169e4:	orr	r3, ip, r3, lsr #12
   169e8:	beq	169f4 <_obstack_memory_used@@Base+0x1e0>
   169ec:	rsbs	r2, r2, #0
   169f0:	rsc	r3, r3, #0
   169f4:	teq	r4, r5
   169f8:	beq	16b5c <_obstack_memory_used@@Base+0x348>
   169fc:	sub	r4, r4, #1
   16a00:	rsbs	lr, r5, #32
   16a04:	blt	16a20 <_obstack_memory_used@@Base+0x20c>
   16a08:	lsl	ip, r2, lr
   16a0c:	adds	r0, r0, r2, lsr r5
   16a10:	adc	r1, r1, #0
   16a14:	adds	r0, r0, r3, lsl lr
   16a18:	adcs	r1, r1, r3, asr r5
   16a1c:	b	16a3c <_obstack_memory_used@@Base+0x228>
   16a20:	sub	r5, r5, #32
   16a24:	add	lr, lr, #32
   16a28:	cmp	r2, #1
   16a2c:	lsl	ip, r3, lr
   16a30:	orrcs	ip, ip, #2
   16a34:	adds	r0, r0, r3, asr r5
   16a38:	adcs	r1, r1, r3, asr #31
   16a3c:	and	r5, r1, #-2147483648	; 0x80000000
   16a40:	bpl	16a50 <_obstack_memory_used@@Base+0x23c>
   16a44:	rsbs	ip, ip, #0
   16a48:	rscs	r0, r0, #0
   16a4c:	rsc	r1, r1, #0
   16a50:	cmp	r1, #1048576	; 0x100000
   16a54:	bcc	16a94 <_obstack_memory_used@@Base+0x280>
   16a58:	cmp	r1, #2097152	; 0x200000
   16a5c:	bcc	16a7c <_obstack_memory_used@@Base+0x268>
   16a60:	lsrs	r1, r1, #1
   16a64:	rrxs	r0, r0
   16a68:	rrx	ip, ip
   16a6c:	add	r4, r4, #1
   16a70:	lsl	r2, r4, #21
   16a74:	cmn	r2, #4194304	; 0x400000
   16a78:	bcs	16bd4 <_obstack_memory_used@@Base+0x3c0>
   16a7c:	cmp	ip, #-2147483648	; 0x80000000
   16a80:	lsrseq	ip, r0, #1
   16a84:	adcs	r0, r0, #0
   16a88:	adc	r1, r1, r4, lsl #20
   16a8c:	orr	r1, r1, r5
   16a90:	pop	{r4, r5, pc}
   16a94:	lsls	ip, ip, #1
   16a98:	adcs	r0, r0, r0
   16a9c:	adc	r1, r1, r1
   16aa0:	tst	r1, #1048576	; 0x100000
   16aa4:	sub	r4, r4, #1
   16aa8:	bne	16a7c <_obstack_memory_used@@Base+0x268>
   16aac:	teq	r1, #0
   16ab0:	moveq	r1, r0
   16ab4:	moveq	r0, #0
   16ab8:	clz	r3, r1
   16abc:	addeq	r3, r3, #32
   16ac0:	sub	r3, r3, #11
   16ac4:	subs	r2, r3, #32
   16ac8:	bge	16aec <_obstack_memory_used@@Base+0x2d8>
   16acc:	adds	r2, r2, #12
   16ad0:	ble	16ae8 <_obstack_memory_used@@Base+0x2d4>
   16ad4:	add	ip, r2, #20
   16ad8:	rsb	r2, r2, #12
   16adc:	lsl	r0, r1, ip
   16ae0:	lsr	r1, r1, r2
   16ae4:	b	16afc <_obstack_memory_used@@Base+0x2e8>
   16ae8:	add	r2, r2, #20
   16aec:	rsble	ip, r2, #32
   16af0:	lsl	r1, r1, r2
   16af4:	orrle	r1, r1, r0, lsr ip
   16af8:	lslle	r0, r0, r2
   16afc:	subs	r4, r4, r3
   16b00:	addge	r1, r1, r4, lsl #20
   16b04:	orrge	r1, r1, r5
   16b08:	popge	{r4, r5, pc}
   16b0c:	mvn	r4, r4
   16b10:	subs	r4, r4, #31
   16b14:	bge	16b50 <_obstack_memory_used@@Base+0x33c>
   16b18:	adds	r4, r4, #12
   16b1c:	bgt	16b38 <_obstack_memory_used@@Base+0x324>
   16b20:	add	r4, r4, #20
   16b24:	rsb	r2, r4, #32
   16b28:	lsr	r0, r0, r4
   16b2c:	orr	r0, r0, r1, lsl r2
   16b30:	orr	r1, r5, r1, lsr r4
   16b34:	pop	{r4, r5, pc}
   16b38:	rsb	r4, r4, #12
   16b3c:	rsb	r2, r4, #32
   16b40:	lsr	r0, r0, r2
   16b44:	orr	r0, r0, r1, lsl r4
   16b48:	mov	r1, r5
   16b4c:	pop	{r4, r5, pc}
   16b50:	lsr	r0, r1, r4
   16b54:	mov	r1, r5
   16b58:	pop	{r4, r5, pc}
   16b5c:	teq	r4, #0
   16b60:	eor	r3, r3, #1048576	; 0x100000
   16b64:	eoreq	r1, r1, #1048576	; 0x100000
   16b68:	addeq	r4, r4, #1
   16b6c:	subne	r5, r5, #1
   16b70:	b	169fc <_obstack_memory_used@@Base+0x1e8>
   16b74:	mvns	ip, r4, asr #21
   16b78:	mvnsne	ip, r5, asr #21
   16b7c:	beq	16be4 <_obstack_memory_used@@Base+0x3d0>
   16b80:	teq	r4, r5
   16b84:	teqeq	r0, r2
   16b88:	beq	16b9c <_obstack_memory_used@@Base+0x388>
   16b8c:	orrs	ip, r4, r0
   16b90:	moveq	r1, r3
   16b94:	moveq	r0, r2
   16b98:	pop	{r4, r5, pc}
   16b9c:	teq	r1, r3
   16ba0:	movne	r1, #0
   16ba4:	movne	r0, #0
   16ba8:	popne	{r4, r5, pc}
   16bac:	lsrs	ip, r4, #21
   16bb0:	bne	16bc4 <_obstack_memory_used@@Base+0x3b0>
   16bb4:	lsls	r0, r0, #1
   16bb8:	adcs	r1, r1, r1
   16bbc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   16bc0:	pop	{r4, r5, pc}
   16bc4:	adds	r4, r4, #4194304	; 0x400000
   16bc8:	addcc	r1, r1, #1048576	; 0x100000
   16bcc:	popcc	{r4, r5, pc}
   16bd0:	and	r5, r1, #-2147483648	; 0x80000000
   16bd4:	orr	r1, r5, #2130706432	; 0x7f000000
   16bd8:	orr	r1, r1, #15728640	; 0xf00000
   16bdc:	mov	r0, #0
   16be0:	pop	{r4, r5, pc}
   16be4:	mvns	ip, r4, asr #21
   16be8:	movne	r1, r3
   16bec:	movne	r0, r2
   16bf0:	mvnseq	ip, r5, asr #21
   16bf4:	movne	r3, r1
   16bf8:	movne	r2, r0
   16bfc:	orrs	r4, r0, r1, lsl #12
   16c00:	orrseq	r5, r2, r3, lsl #12
   16c04:	teqeq	r1, r3
   16c08:	orrne	r1, r1, #524288	; 0x80000
   16c0c:	pop	{r4, r5, pc}
   16c10:	teq	r0, #0
   16c14:	moveq	r1, #0
   16c18:	bxeq	lr
   16c1c:	push	{r4, r5, lr}
   16c20:	mov	r4, #1024	; 0x400
   16c24:	add	r4, r4, #50	; 0x32
   16c28:	mov	r5, #0
   16c2c:	mov	r1, #0
   16c30:	b	16aac <_obstack_memory_used@@Base+0x298>
   16c34:	teq	r0, #0
   16c38:	moveq	r1, #0
   16c3c:	bxeq	lr
   16c40:	push	{r4, r5, lr}
   16c44:	mov	r4, #1024	; 0x400
   16c48:	add	r4, r4, #50	; 0x32
   16c4c:	ands	r5, r0, #-2147483648	; 0x80000000
   16c50:	rsbmi	r0, r0, #0
   16c54:	mov	r1, #0
   16c58:	b	16aac <_obstack_memory_used@@Base+0x298>
   16c5c:	lsls	r2, r0, #1
   16c60:	asr	r1, r2, #3
   16c64:	rrx	r1, r1
   16c68:	lsl	r0, r2, #28
   16c6c:	andsne	r3, r2, #-16777216	; 0xff000000
   16c70:	teqne	r3, #-16777216	; 0xff000000
   16c74:	eorne	r1, r1, #939524096	; 0x38000000
   16c78:	bxne	lr
   16c7c:	bics	r2, r2, #-16777216	; 0xff000000
   16c80:	bxeq	lr
   16c84:	teq	r3, #-16777216	; 0xff000000
   16c88:	orreq	r1, r1, #524288	; 0x80000
   16c8c:	bxeq	lr
   16c90:	push	{r4, r5, lr}
   16c94:	mov	r4, #896	; 0x380
   16c98:	and	r5, r1, #-2147483648	; 0x80000000
   16c9c:	bic	r1, r1, #-2147483648	; 0x80000000
   16ca0:	b	16aac <_obstack_memory_used@@Base+0x298>
   16ca4:	orrs	r2, r0, r1
   16ca8:	bxeq	lr
   16cac:	push	{r4, r5, lr}
   16cb0:	mov	r5, #0
   16cb4:	b	16cd4 <_obstack_memory_used@@Base+0x4c0>
   16cb8:	orrs	r2, r0, r1
   16cbc:	bxeq	lr
   16cc0:	push	{r4, r5, lr}
   16cc4:	ands	r5, r1, #-2147483648	; 0x80000000
   16cc8:	bpl	16cd4 <_obstack_memory_used@@Base+0x4c0>
   16ccc:	rsbs	r0, r0, #0
   16cd0:	rsc	r1, r1, #0
   16cd4:	mov	r4, #1024	; 0x400
   16cd8:	add	r4, r4, #50	; 0x32
   16cdc:	lsrs	ip, r1, #22
   16ce0:	beq	16a50 <_obstack_memory_used@@Base+0x23c>
   16ce4:	mov	r2, #3
   16ce8:	lsrs	ip, ip, #3
   16cec:	addne	r2, r2, #3
   16cf0:	lsrs	ip, ip, #3
   16cf4:	addne	r2, r2, #3
   16cf8:	add	r2, r2, ip, lsr #3
   16cfc:	rsb	r3, r2, #32
   16d00:	lsl	ip, r0, r3
   16d04:	lsr	r0, r0, r2
   16d08:	orr	r0, r0, r1, lsl r3
   16d0c:	lsr	r1, r1, r2
   16d10:	add	r4, r4, r2
   16d14:	b	16a50 <_obstack_memory_used@@Base+0x23c>
   16d18:	cmp	r3, #0
   16d1c:	cmpeq	r2, #0
   16d20:	bne	16d38 <_obstack_memory_used@@Base+0x524>
   16d24:	cmp	r1, #0
   16d28:	cmpeq	r0, #0
   16d2c:	mvnne	r1, #0
   16d30:	mvnne	r0, #0
   16d34:	b	16d54 <_obstack_memory_used@@Base+0x540>
   16d38:	sub	sp, sp, #8
   16d3c:	push	{sp, lr}
   16d40:	bl	16d64 <_obstack_memory_used@@Base+0x550>
   16d44:	ldr	lr, [sp, #4]
   16d48:	add	sp, sp, #8
   16d4c:	pop	{r2, r3}
   16d50:	bx	lr
   16d54:	push	{r1, lr}
   16d58:	mov	r0, #8
   16d5c:	bl	112e4 <raise@plt>
   16d60:	pop	{r1, pc}
   16d64:	cmp	r1, r3
   16d68:	cmpeq	r0, r2
   16d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d70:	mov	r4, r0
   16d74:	movcc	r0, #0
   16d78:	mov	r5, r1
   16d7c:	ldr	lr, [sp, #36]	; 0x24
   16d80:	movcc	r1, r0
   16d84:	bcc	16e80 <_obstack_memory_used@@Base+0x66c>
   16d88:	cmp	r3, #0
   16d8c:	clzeq	ip, r2
   16d90:	clzne	ip, r3
   16d94:	addeq	ip, ip, #32
   16d98:	cmp	r5, #0
   16d9c:	clzeq	r1, r4
   16da0:	addeq	r1, r1, #32
   16da4:	clzne	r1, r5
   16da8:	sub	ip, ip, r1
   16dac:	sub	sl, ip, #32
   16db0:	lsl	r9, r3, ip
   16db4:	rsb	fp, ip, #32
   16db8:	orr	r9, r9, r2, lsl sl
   16dbc:	orr	r9, r9, r2, lsr fp
   16dc0:	lsl	r8, r2, ip
   16dc4:	cmp	r5, r9
   16dc8:	cmpeq	r4, r8
   16dcc:	movcc	r0, #0
   16dd0:	movcc	r1, r0
   16dd4:	bcc	16df0 <_obstack_memory_used@@Base+0x5dc>
   16dd8:	mov	r0, #1
   16ddc:	subs	r4, r4, r8
   16de0:	lsl	r1, r0, sl
   16de4:	orr	r1, r1, r0, lsr fp
   16de8:	lsl	r0, r0, ip
   16dec:	sbc	r5, r5, r9
   16df0:	cmp	ip, #0
   16df4:	beq	16e80 <_obstack_memory_used@@Base+0x66c>
   16df8:	lsr	r6, r8, #1
   16dfc:	orr	r6, r6, r9, lsl #31
   16e00:	lsr	r7, r9, #1
   16e04:	mov	r2, ip
   16e08:	b	16e2c <_obstack_memory_used@@Base+0x618>
   16e0c:	subs	r3, r4, r6
   16e10:	sbc	r8, r5, r7
   16e14:	adds	r3, r3, r3
   16e18:	adc	r8, r8, r8
   16e1c:	adds	r4, r3, #1
   16e20:	adc	r5, r8, #0
   16e24:	subs	r2, r2, #1
   16e28:	beq	16e48 <_obstack_memory_used@@Base+0x634>
   16e2c:	cmp	r5, r7
   16e30:	cmpeq	r4, r6
   16e34:	bcs	16e0c <_obstack_memory_used@@Base+0x5f8>
   16e38:	adds	r4, r4, r4
   16e3c:	adc	r5, r5, r5
   16e40:	subs	r2, r2, #1
   16e44:	bne	16e2c <_obstack_memory_used@@Base+0x618>
   16e48:	lsr	r3, r4, ip
   16e4c:	orr	r3, r3, r5, lsl fp
   16e50:	lsr	r2, r5, ip
   16e54:	orr	r3, r3, r5, lsr sl
   16e58:	adds	r0, r0, r4
   16e5c:	mov	r4, r3
   16e60:	lsl	r3, r2, ip
   16e64:	orr	r3, r3, r4, lsl sl
   16e68:	lsl	ip, r4, ip
   16e6c:	orr	r3, r3, r4, lsr fp
   16e70:	adc	r1, r1, r5
   16e74:	subs	r0, r0, ip
   16e78:	mov	r5, r2
   16e7c:	sbc	r1, r1, r3
   16e80:	cmp	lr, #0
   16e84:	strdne	r4, [lr]
   16e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16e90:	mov	r7, r0
   16e94:	ldr	r6, [pc, #72]	; 16ee4 <_obstack_memory_used@@Base+0x6d0>
   16e98:	ldr	r5, [pc, #72]	; 16ee8 <_obstack_memory_used@@Base+0x6d4>
   16e9c:	add	r6, pc, r6
   16ea0:	add	r5, pc, r5
   16ea4:	sub	r6, r6, r5
   16ea8:	mov	r8, r1
   16eac:	mov	r9, r2
   16eb0:	bl	112ac <calloc@plt-0x20>
   16eb4:	asrs	r6, r6, #2
   16eb8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ebc:	mov	r4, #0
   16ec0:	add	r4, r4, #1
   16ec4:	ldr	r3, [r5], #4
   16ec8:	mov	r2, r9
   16ecc:	mov	r1, r8
   16ed0:	mov	r0, r7
   16ed4:	blx	r3
   16ed8:	cmp	r6, r4
   16edc:	bne	16ec0 <_obstack_memory_used@@Base+0x6ac>
   16ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ee4:	andeq	r1, r1, r8, rrx
   16ee8:	andeq	r1, r1, r0, rrx
   16eec:	bx	lr
   16ef0:	ldr	r3, [pc, #12]	; 16f04 <_obstack_memory_used@@Base+0x6f0>
   16ef4:	mov	r1, #0
   16ef8:	add	r3, pc, r3
   16efc:	ldr	r2, [r3]
   16f00:	b	114e8 <__cxa_atexit@plt>
   16f04:	andeq	r1, r1, r4, lsr #4
   16f08:	mov	r2, r1
   16f0c:	mov	r1, r0
   16f10:	mov	r0, #3
   16f14:	b	115a8 <__xstat64@plt>
   16f18:	mov	r2, r1
   16f1c:	mov	r1, r0
   16f20:	mov	r0, #3
   16f24:	b	113d4 <__fxstat64@plt>

Disassembly of section .fini:

00016f28 <.fini>:
   16f28:	push	{r3, lr}
   16f2c:	pop	{r3, pc}
