
../repos/coreutils/src/stat:     file format elf32-littlearm


Disassembly of section .init:

0001164c <.init>:
   1164c:	push	{r3, lr}
   11650:	bl	11ad4 <__assert_fail@plt+0x48>
   11654:	pop	{r3, pc}

Disassembly of section .plt:

00011658 <calloc@plt-0x14>:
   11658:	push	{lr}		; (str lr, [sp, #-4]!)
   1165c:	ldr	lr, [pc, #4]	; 11668 <calloc@plt-0x4>
   11660:	add	lr, pc, lr
   11664:	ldr	pc, [lr, #8]!
   11668:	muleq	r2, r8, r9

0001166c <calloc@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #135168	; 0x21000
   11674:	ldr	pc, [ip, #2456]!	; 0x998

00011678 <fputs_unlocked@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #135168	; 0x21000
   11680:	ldr	pc, [ip, #2448]!	; 0x990

00011684 <raise@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #135168	; 0x21000
   1168c:	ldr	pc, [ip, #2440]!	; 0x988

00011690 <gmtime_r@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #135168	; 0x21000
   11698:	ldr	pc, [ip, #2432]!	; 0x980

0001169c <__getdelim@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #135168	; 0x21000
   116a4:	ldr	pc, [ip, #2424]!	; 0x978

000116a8 <is_selinux_enabled@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #135168	; 0x21000
   116b0:	ldr	pc, [ip, #2416]!	; 0x970

000116b4 <strcmp@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #135168	; 0x21000
   116bc:	ldr	pc, [ip, #2408]!	; 0x968

000116c0 <strtol@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #135168	; 0x21000
   116c8:	ldr	pc, [ip, #2400]!	; 0x960

000116cc <getpwuid@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #135168	; 0x21000
   116d4:	ldr	pc, [ip, #2392]!	; 0x958

000116d8 <mktime@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #135168	; 0x21000
   116e0:	ldr	pc, [ip, #2384]!	; 0x950

000116e4 <fflush@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #135168	; 0x21000
   116ec:	ldr	pc, [ip, #2376]!	; 0x948

000116f0 <free@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #135168	; 0x21000
   116f8:	ldr	pc, [ip, #2368]!	; 0x940

000116fc <_exit@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #135168	; 0x21000
   11704:	ldr	pc, [ip, #2360]!	; 0x938

00011708 <memcpy@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #135168	; 0x21000
   11710:	ldr	pc, [ip, #2352]!	; 0x930

00011714 <mbsinit@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #135168	; 0x21000
   1171c:	ldr	pc, [ip, #2344]!	; 0x928

00011720 <memcmp@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #135168	; 0x21000
   11728:	ldr	pc, [ip, #2336]!	; 0x920

0001172c <dcgettext@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #135168	; 0x21000
   11734:	ldr	pc, [ip, #2328]!	; 0x918

00011738 <realloc@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #135168	; 0x21000
   11740:	ldr	pc, [ip, #2320]!	; 0x910

00011744 <fgetfilecon@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #135168	; 0x21000
   1174c:	ldr	pc, [ip, #2312]!	; 0x908

00011750 <localtime_r@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #135168	; 0x21000
   11758:	ldr	pc, [ip, #2304]!	; 0x900

0001175c <textdomain@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #135168	; 0x21000
   11764:	ldr	pc, [ip, #2296]!	; 0x8f8

00011768 <chdir@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #135168	; 0x21000
   11770:	ldr	pc, [ip, #2288]!	; 0x8f0

00011774 <iswprint@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #135168	; 0x21000
   1177c:	ldr	pc, [ip, #2280]!	; 0x8e8

00011780 <tzset@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #135168	; 0x21000
   11788:	ldr	pc, [ip, #2272]!	; 0x8e0

0001178c <readlink@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #135168	; 0x21000
   11794:	ldr	pc, [ip, #2264]!	; 0x8d8

00011798 <fwrite@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #135168	; 0x21000
   117a0:	ldr	pc, [ip, #2256]!	; 0x8d0

000117a4 <lseek64@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #135168	; 0x21000
   117ac:	ldr	pc, [ip, #2248]!	; 0x8c8

000117b0 <__ctype_get_mb_cur_max@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #135168	; 0x21000
   117b8:	ldr	pc, [ip, #2240]!	; 0x8c0

000117bc <hasmntopt@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #135168	; 0x21000
   117c4:	ldr	pc, [ip, #2232]!	; 0x8b8

000117c8 <__fpending@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #135168	; 0x21000
   117d0:	ldr	pc, [ip, #2224]!	; 0x8b0

000117d4 <mbrtowc@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #135168	; 0x21000
   117dc:	ldr	pc, [ip, #2216]!	; 0x8a8

000117e0 <error@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #135168	; 0x21000
   117e8:	ldr	pc, [ip, #2208]!	; 0x8a0

000117ec <getmntent@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #135168	; 0x21000
   117f4:	ldr	pc, [ip, #2200]!	; 0x898

000117f8 <open64@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #135168	; 0x21000
   11800:	ldr	pc, [ip, #2192]!	; 0x890

00011804 <getenv@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #135168	; 0x21000
   1180c:	ldr	pc, [ip, #2184]!	; 0x888

00011810 <lgetfilecon@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #135168	; 0x21000
   11818:	ldr	pc, [ip, #2176]!	; 0x880

0001181c <malloc@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #135168	; 0x21000
   11824:	ldr	pc, [ip, #2168]!	; 0x878

00011828 <__libc_start_main@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #135168	; 0x21000
   11830:	ldr	pc, [ip, #2160]!	; 0x870

00011834 <strftime@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #135168	; 0x21000
   1183c:	ldr	pc, [ip, #2152]!	; 0x868

00011840 <__freading@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #135168	; 0x21000
   11848:	ldr	pc, [ip, #2144]!	; 0x860

0001184c <__ctype_tolower_loc@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #135168	; 0x21000
   11854:	ldr	pc, [ip, #2136]!	; 0x858

00011858 <__ctype_toupper_loc@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #135168	; 0x21000
   11860:	ldr	pc, [ip, #2128]!	; 0x850

00011864 <__gmon_start__@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #135168	; 0x21000
   1186c:	ldr	pc, [ip, #2120]!	; 0x848

00011870 <getopt_long@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #135168	; 0x21000
   11878:	ldr	pc, [ip, #2112]!	; 0x840

0001187c <__ctype_b_loc@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #135168	; 0x21000
   11884:	ldr	pc, [ip, #2104]!	; 0x838

00011888 <getcwd@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #135168	; 0x21000
   11890:	ldr	pc, [ip, #2096]!	; 0x830

00011894 <exit@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #135168	; 0x21000
   1189c:	ldr	pc, [ip, #2088]!	; 0x828

000118a0 <getfilecon@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #135168	; 0x21000
   118a8:	ldr	pc, [ip, #2080]!	; 0x820

000118ac <strlen@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #135168	; 0x21000
   118b4:	ldr	pc, [ip, #2072]!	; 0x818

000118b8 <strchr@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #135168	; 0x21000
   118c0:	ldr	pc, [ip, #2064]!	; 0x810

000118c4 <setenv@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #135168	; 0x21000
   118cc:	ldr	pc, [ip, #2056]!	; 0x808

000118d0 <openat64@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #135168	; 0x21000
   118d8:	ldr	pc, [ip, #2048]!	; 0x800

000118dc <memrchr@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #135168	; 0x21000
   118e4:	ldr	pc, [ip, #2040]!	; 0x7f8

000118e8 <__errno_location@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #135168	; 0x21000
   118f0:	ldr	pc, [ip, #2032]!	; 0x7f0

000118f4 <__sprintf_chk@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #135168	; 0x21000
   118fc:	ldr	pc, [ip, #2024]!	; 0x7e8

00011900 <__cxa_atexit@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #135168	; 0x21000
   11908:	ldr	pc, [ip, #2016]!	; 0x7e0

0001190c <__vasprintf_chk@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #135168	; 0x21000
   11914:	ldr	pc, [ip, #2008]!	; 0x7d8

00011918 <memset@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #135168	; 0x21000
   11920:	ldr	pc, [ip, #2000]!	; 0x7d0

00011924 <__printf_chk@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #135168	; 0x21000
   1192c:	ldr	pc, [ip, #1992]!	; 0x7c8

00011930 <fileno@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #135168	; 0x21000
   11938:	ldr	pc, [ip, #1984]!	; 0x7c0

0001193c <__fprintf_chk@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #135168	; 0x21000
   11944:	ldr	pc, [ip, #1976]!	; 0x7b8

00011948 <memchr@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #135168	; 0x21000
   11950:	ldr	pc, [ip, #1968]!	; 0x7b0

00011954 <fclose@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #135168	; 0x21000
   1195c:	ldr	pc, [ip, #1960]!	; 0x7a8

00011960 <fseeko64@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #135168	; 0x21000
   11968:	ldr	pc, [ip, #1952]!	; 0x7a0

0001196c <statx@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #135168	; 0x21000
   11974:	ldr	pc, [ip, #1944]!	; 0x798

00011978 <endmntent@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #135168	; 0x21000
   11980:	ldr	pc, [ip, #1936]!	; 0x790

00011984 <fcntl64@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #135168	; 0x21000
   1198c:	ldr	pc, [ip, #1928]!	; 0x788

00011990 <__overflow@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #135168	; 0x21000
   11998:	ldr	pc, [ip, #1920]!	; 0x780

0001199c <setlocale@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #135168	; 0x21000
   119a4:	ldr	pc, [ip, #1912]!	; 0x778

000119a8 <strrchr@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #135168	; 0x21000
   119b0:	ldr	pc, [ip, #1904]!	; 0x770

000119b4 <statfs64@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #135168	; 0x21000
   119bc:	ldr	pc, [ip, #1896]!	; 0x768

000119c0 <nl_langinfo@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #135168	; 0x21000
   119c8:	ldr	pc, [ip, #1888]!	; 0x760

000119cc <sscanf@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #135168	; 0x21000
   119d4:	ldr	pc, [ip, #1880]!	; 0x758

000119d8 <localeconv@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #135168	; 0x21000
   119e0:	ldr	pc, [ip, #1872]!	; 0x750

000119e4 <timegm@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #135168	; 0x21000
   119ec:	ldr	pc, [ip, #1864]!	; 0x748

000119f0 <fchdir@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #135168	; 0x21000
   119f8:	ldr	pc, [ip, #1856]!	; 0x740

000119fc <canonicalize_file_name@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #135168	; 0x21000
   11a04:	ldr	pc, [ip, #1848]!	; 0x738

00011a08 <fopen64@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #135168	; 0x21000
   11a10:	ldr	pc, [ip, #1840]!	; 0x730

00011a14 <freecon@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #135168	; 0x21000
   11a1c:	ldr	pc, [ip, #1832]!	; 0x728

00011a20 <setmntent@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #135168	; 0x21000
   11a28:	ldr	pc, [ip, #1824]!	; 0x720

00011a2c <bindtextdomain@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #135168	; 0x21000
   11a34:	ldr	pc, [ip, #1816]!	; 0x718

00011a38 <__xstat64@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #135168	; 0x21000
   11a40:	ldr	pc, [ip, #1808]!	; 0x710

00011a44 <unsetenv@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #135168	; 0x21000
   11a4c:	ldr	pc, [ip, #1800]!	; 0x708

00011a50 <strncmp@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #135168	; 0x21000
   11a58:	ldr	pc, [ip, #1792]!	; 0x700

00011a5c <abort@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #135168	; 0x21000
   11a64:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a68 <close@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #135168	; 0x21000
   11a70:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a74 <getgrgid@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #135168	; 0x21000
   11a7c:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a80 <strspn@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #135168	; 0x21000
   11a88:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a8c <__assert_fail@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #135168	; 0x21000
   11a94:	ldr	pc, [ip, #1752]!	; 0x6d8

Disassembly of section .text:

00011a98 <.text>:
   11a98:	mov	fp, #0
   11a9c:	mov	lr, #0
   11aa0:	pop	{r1}		; (ldr r1, [sp], #4)
   11aa4:	mov	r2, sp
   11aa8:	push	{r2}		; (str r2, [sp, #-4]!)
   11aac:	push	{r0}		; (str r0, [sp, #-4]!)
   11ab0:	ldr	ip, [pc, #16]	; 11ac8 <__assert_fail@plt+0x3c>
   11ab4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ab8:	ldr	r0, [pc, #12]	; 11acc <__assert_fail@plt+0x40>
   11abc:	ldr	r3, [pc, #12]	; 11ad0 <__assert_fail@plt+0x44>
   11ac0:	bl	11828 <__libc_start_main@plt>
   11ac4:	bl	11a5c <abort@plt>
   11ac8:	muleq	r2, ip, r9
   11acc:	andeq	r1, r1, r4, ror pc
   11ad0:	andeq	r0, r2, ip, lsr r9
   11ad4:	ldr	r3, [pc, #20]	; 11af0 <__assert_fail@plt+0x64>
   11ad8:	ldr	r2, [pc, #20]	; 11af4 <__assert_fail@plt+0x68>
   11adc:	add	r3, pc, r3
   11ae0:	ldr	r2, [r3, r2]
   11ae4:	cmp	r2, #0
   11ae8:	bxeq	lr
   11aec:	b	11864 <__gmon_start__@plt>
   11af0:	andeq	r1, r2, ip, lsl r5
   11af4:	andeq	r0, r0, r0, ror r1
   11af8:	ldr	r0, [pc, #24]	; 11b18 <__assert_fail@plt+0x8c>
   11afc:	ldr	r3, [pc, #24]	; 11b1c <__assert_fail@plt+0x90>
   11b00:	cmp	r3, r0
   11b04:	bxeq	lr
   11b08:	ldr	r3, [pc, #16]	; 11b20 <__assert_fail@plt+0x94>
   11b0c:	cmp	r3, #0
   11b10:	bxeq	lr
   11b14:	bx	r3
   11b18:	ldrdeq	r3, [r3], -r0
   11b1c:	ldrdeq	r3, [r3], -r0
   11b20:	andeq	r0, r0, r0
   11b24:	ldr	r0, [pc, #36]	; 11b50 <__assert_fail@plt+0xc4>
   11b28:	ldr	r1, [pc, #36]	; 11b54 <__assert_fail@plt+0xc8>
   11b2c:	sub	r1, r1, r0
   11b30:	asr	r1, r1, #2
   11b34:	add	r1, r1, r1, lsr #31
   11b38:	asrs	r1, r1, #1
   11b3c:	bxeq	lr
   11b40:	ldr	r3, [pc, #16]	; 11b58 <__assert_fail@plt+0xcc>
   11b44:	cmp	r3, #0
   11b48:	bxeq	lr
   11b4c:	bx	r3
   11b50:	ldrdeq	r3, [r3], -r0
   11b54:	ldrdeq	r3, [r3], -r0
   11b58:	andeq	r0, r0, r0
   11b5c:	push	{r4, lr}
   11b60:	ldr	r4, [pc, #24]	; 11b80 <__assert_fail@plt+0xf4>
   11b64:	ldrb	r3, [r4]
   11b68:	cmp	r3, #0
   11b6c:	popne	{r4, pc}
   11b70:	bl	11af8 <__assert_fail@plt+0x6c>
   11b74:	mov	r3, #1
   11b78:	strb	r3, [r4]
   11b7c:	pop	{r4, pc}
   11b80:	andeq	r3, r3, ip, ror #3
   11b84:	b	11b24 <__assert_fail@plt+0x98>
   11b88:	push	{fp, lr}
   11b8c:	mov	fp, sp
   11b90:	sub	sp, sp, #56	; 0x38
   11b94:	mov	r4, r0
   11b98:	cmp	r0, #0
   11b9c:	bne	11f30 <__assert_fail@plt+0x4a4>
   11ba0:	movw	r1, #2539	; 0x9eb
   11ba4:	mov	r0, #0
   11ba8:	mov	r2, #5
   11bac:	movt	r1, #2
   11bb0:	bl	1172c <dcgettext@plt>
   11bb4:	mov	r1, r0
   11bb8:	movw	r0, #12916	; 0x3274
   11bbc:	movt	r0, #3
   11bc0:	ldr	r2, [r0]
   11bc4:	mov	r0, #1
   11bc8:	bl	11924 <__printf_chk@plt>
   11bcc:	movw	r1, #2570	; 0xa0a
   11bd0:	mov	r0, #0
   11bd4:	mov	r2, #5
   11bd8:	movt	r1, #2
   11bdc:	bl	1172c <dcgettext@plt>
   11be0:	movw	r7, #12772	; 0x31e4
   11be4:	movt	r7, #3
   11be8:	ldr	r1, [r7]
   11bec:	bl	11678 <fputs_unlocked@plt>
   11bf0:	movw	r1, #6151	; 0x1807
   11bf4:	mov	r0, #0
   11bf8:	mov	r2, #5
   11bfc:	movt	r1, #2
   11c00:	bl	1172c <dcgettext@plt>
   11c04:	ldr	r1, [r7]
   11c08:	bl	11678 <fputs_unlocked@plt>
   11c0c:	movw	r1, #2607	; 0xa2f
   11c10:	mov	r0, #0
   11c14:	mov	r2, #5
   11c18:	movt	r1, #2
   11c1c:	bl	1172c <dcgettext@plt>
   11c20:	ldr	r1, [r7]
   11c24:	bl	11678 <fputs_unlocked@plt>
   11c28:	movw	r1, #2719	; 0xa9f
   11c2c:	mov	r0, #0
   11c30:	mov	r2, #5
   11c34:	movt	r1, #2
   11c38:	bl	1172c <dcgettext@plt>
   11c3c:	ldr	r1, [r7]
   11c40:	bl	11678 <fputs_unlocked@plt>
   11c44:	movw	r1, #2854	; 0xb26
   11c48:	mov	r0, #0
   11c4c:	mov	r2, #5
   11c50:	movt	r1, #2
   11c54:	bl	1172c <dcgettext@plt>
   11c58:	ldr	r1, [r7]
   11c5c:	bl	11678 <fputs_unlocked@plt>
   11c60:	movw	r1, #3272	; 0xcc8
   11c64:	mov	r0, #0
   11c68:	mov	r2, #5
   11c6c:	movt	r1, #2
   11c70:	bl	1172c <dcgettext@plt>
   11c74:	ldr	r1, [r7]
   11c78:	bl	11678 <fputs_unlocked@plt>
   11c7c:	movw	r1, #3317	; 0xcf5
   11c80:	mov	r0, #0
   11c84:	mov	r2, #5
   11c88:	movt	r1, #2
   11c8c:	bl	1172c <dcgettext@plt>
   11c90:	ldr	r1, [r7]
   11c94:	bl	11678 <fputs_unlocked@plt>
   11c98:	movw	r1, #3371	; 0xd2b
   11c9c:	mov	r0, #0
   11ca0:	mov	r2, #5
   11ca4:	movt	r1, #2
   11ca8:	bl	1172c <dcgettext@plt>
   11cac:	ldr	r1, [r7]
   11cb0:	bl	11678 <fputs_unlocked@plt>
   11cb4:	movw	r1, #3616	; 0xe20
   11cb8:	mov	r0, #0
   11cbc:	mov	r2, #5
   11cc0:	movt	r1, #2
   11cc4:	bl	1172c <dcgettext@plt>
   11cc8:	ldr	r1, [r7]
   11ccc:	bl	11678 <fputs_unlocked@plt>
   11cd0:	movw	r1, #3941	; 0xf65
   11cd4:	mov	r0, #0
   11cd8:	mov	r2, #5
   11cdc:	movt	r1, #2
   11ce0:	bl	1172c <dcgettext@plt>
   11ce4:	ldr	r1, [r7]
   11ce8:	bl	11678 <fputs_unlocked@plt>
   11cec:	movw	r1, #4188	; 0x105c
   11cf0:	mov	r0, #0
   11cf4:	mov	r2, #5
   11cf8:	movt	r1, #2
   11cfc:	bl	1172c <dcgettext@plt>
   11d00:	ldr	r1, [r7]
   11d04:	bl	11678 <fputs_unlocked@plt>
   11d08:	movw	r1, #4777	; 0x12a9
   11d0c:	mov	r0, #0
   11d10:	mov	r2, #5
   11d14:	movt	r1, #2
   11d18:	bl	1172c <dcgettext@plt>
   11d1c:	ldr	r1, [r7]
   11d20:	bl	11678 <fputs_unlocked@plt>
   11d24:	movw	r1, #5255	; 0x1487
   11d28:	mov	r0, #0
   11d2c:	mov	r2, #5
   11d30:	movt	r1, #2
   11d34:	bl	1172c <dcgettext@plt>
   11d38:	ldr	r1, [r7]
   11d3c:	bl	11678 <fputs_unlocked@plt>
   11d40:	movw	r1, #5495	; 0x1577
   11d44:	mov	r0, #0
   11d48:	mov	r2, #5
   11d4c:	movt	r1, #2
   11d50:	bl	1172c <dcgettext@plt>
   11d54:	ldr	r1, [r7]
   11d58:	bl	11678 <fputs_unlocked@plt>
   11d5c:	movw	r1, #5745	; 0x1671
   11d60:	mov	r0, #0
   11d64:	mov	r2, #5
   11d68:	movt	r1, #2
   11d6c:	bl	1172c <dcgettext@plt>
   11d70:	movw	r2, #8456	; 0x2108
   11d74:	mov	r1, r0
   11d78:	mov	r0, #1
   11d7c:	movt	r2, #2
   11d80:	bl	11924 <__printf_chk@plt>
   11d84:	movw	r1, #5800	; 0x16a8
   11d88:	mov	r0, #0
   11d8c:	mov	r2, #5
   11d90:	movt	r1, #2
   11d94:	bl	1172c <dcgettext@plt>
   11d98:	movw	r2, #8508	; 0x213c
   11d9c:	mov	r1, r0
   11da0:	mov	r0, #1
   11da4:	movt	r2, #2
   11da8:	bl	11924 <__printf_chk@plt>
   11dac:	movw	r1, #5868	; 0x16ec
   11db0:	mov	r0, #0
   11db4:	mov	r2, #5
   11db8:	movt	r1, #2
   11dbc:	bl	1172c <dcgettext@plt>
   11dc0:	movw	r5, #6059	; 0x17ab
   11dc4:	mov	r1, r0
   11dc8:	mov	r0, #1
   11dcc:	movt	r5, #2
   11dd0:	mov	r2, r5
   11dd4:	bl	11924 <__printf_chk@plt>
   11dd8:	movw	r0, #8720	; 0x2210
   11ddc:	mov	r2, #48	; 0x30
   11de0:	mov	r6, sp
   11de4:	movt	r0, #2
   11de8:	add	r1, r0, #32
   11dec:	add	r3, r0, #16
   11df0:	vld1.64	{d18-d19}, [r0], r2
   11df4:	vld1.64	{d16-d17}, [r1]
   11df8:	vld1.64	{d20-d21}, [r3]
   11dfc:	add	r1, r6, #32
   11e00:	vldr	d22, [r0]
   11e04:	add	r0, r6, #16
   11e08:	vst1.64	{d16-d17}, [r1]
   11e0c:	movw	r1, #6226	; 0x1852
   11e10:	vst1.64	{d20-d21}, [r0]
   11e14:	mov	r0, r6
   11e18:	vst1.64	{d18-d19}, [r0], r2
   11e1c:	movt	r1, #2
   11e20:	vstr	d22, [r0]
   11e24:	mov	r0, r5
   11e28:	bl	116b4 <strcmp@plt>
   11e2c:	cmp	r0, #0
   11e30:	ldrne	r1, [r6, #8]!
   11e34:	cmpne	r1, #0
   11e38:	bne	11e24 <__assert_fail@plt+0x398>
   11e3c:	ldr	r6, [r6, #4]
   11e40:	movw	r1, #6321	; 0x18b1
   11e44:	mov	r0, #0
   11e48:	mov	r2, #5
   11e4c:	movt	r1, #2
   11e50:	bl	1172c <dcgettext@plt>
   11e54:	movw	r2, #6103	; 0x17d7
   11e58:	movw	r3, #6344	; 0x18c8
   11e5c:	mov	r1, r0
   11e60:	mov	r0, #1
   11e64:	movt	r2, #2
   11e68:	movt	r3, #2
   11e6c:	bl	11924 <__printf_chk@plt>
   11e70:	cmp	r6, #0
   11e74:	mov	r0, #5
   11e78:	mov	r1, #0
   11e7c:	moveq	r6, r5
   11e80:	bl	1199c <setlocale@plt>
   11e84:	cmp	r0, #0
   11e88:	beq	11ec0 <__assert_fail@plt+0x434>
   11e8c:	movw	r1, #6384	; 0x18f0
   11e90:	mov	r2, #3
   11e94:	movt	r1, #2
   11e98:	bl	11a50 <strncmp@plt>
   11e9c:	cmp	r0, #0
   11ea0:	beq	11ec0 <__assert_fail@plt+0x434>
   11ea4:	movw	r1, #6388	; 0x18f4
   11ea8:	mov	r0, #0
   11eac:	mov	r2, #5
   11eb0:	movt	r1, #2
   11eb4:	bl	1172c <dcgettext@plt>
   11eb8:	ldr	r1, [r7]
   11ebc:	bl	11678 <fputs_unlocked@plt>
   11ec0:	movw	r1, #6459	; 0x193b
   11ec4:	mov	r0, #0
   11ec8:	mov	r2, #5
   11ecc:	movt	r1, #2
   11ed0:	bl	1172c <dcgettext@plt>
   11ed4:	movw	r2, #6344	; 0x18c8
   11ed8:	mov	r1, r0
   11edc:	mov	r0, #1
   11ee0:	mov	r3, r5
   11ee4:	movt	r2, #2
   11ee8:	bl	11924 <__printf_chk@plt>
   11eec:	movw	r1, #6486	; 0x1956
   11ef0:	mov	r0, #0
   11ef4:	mov	r2, #5
   11ef8:	movt	r1, #2
   11efc:	bl	1172c <dcgettext@plt>
   11f00:	movw	r3, #5254	; 0x1486
   11f04:	mov	r1, r0
   11f08:	movw	r0, #6254	; 0x186e
   11f0c:	cmp	r6, r5
   11f10:	mov	r2, r6
   11f14:	movt	r0, #2
   11f18:	movt	r3, #2
   11f1c:	moveq	r3, r0
   11f20:	mov	r0, #1
   11f24:	bl	11924 <__printf_chk@plt>
   11f28:	mov	r0, r4
   11f2c:	bl	11894 <exit@plt>
   11f30:	movw	r0, #12768	; 0x31e0
   11f34:	movw	r1, #2500	; 0x9c4
   11f38:	mov	r2, #5
   11f3c:	movt	r0, #3
   11f40:	movt	r1, #2
   11f44:	ldr	r5, [r0]
   11f48:	mov	r0, #0
   11f4c:	bl	1172c <dcgettext@plt>
   11f50:	mov	r2, r0
   11f54:	movw	r0, #12916	; 0x3274
   11f58:	mov	r1, #1
   11f5c:	movt	r0, #3
   11f60:	ldr	r3, [r0]
   11f64:	mov	r0, r5
   11f68:	bl	1193c <__fprintf_chk@plt>
   11f6c:	mov	r0, r4
   11f70:	bl	11894 <exit@plt>
   11f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f78:	add	fp, sp, #28
   11f7c:	sub	sp, sp, #492	; 0x1ec
   11f80:	str	r0, [sp, #112]	; 0x70
   11f84:	ldr	r0, [r1]
   11f88:	str	r1, [sp, #108]	; 0x6c
   11f8c:	bl	1b6b0 <__assert_fail@plt+0x9c24>
   11f90:	movw	r1, #5254	; 0x1486
   11f94:	mov	r0, #6
   11f98:	movt	r1, #2
   11f9c:	bl	1199c <setlocale@plt>
   11fa0:	movw	r4, #6107	; 0x17db
   11fa4:	movw	r1, #6064	; 0x17b0
   11fa8:	movt	r4, #2
   11fac:	movt	r1, #2
   11fb0:	mov	r0, r4
   11fb4:	bl	11a2c <bindtextdomain@plt>
   11fb8:	mov	r0, r4
   11fbc:	bl	1175c <textdomain@plt>
   11fc0:	bl	119d8 <localeconv@plt>
   11fc4:	ldr	r1, [r0]
   11fc8:	movw	r0, #8943	; 0x22ef
   11fcc:	movw	r4, #12808	; 0x3208
   11fd0:	movt	r0, #2
   11fd4:	movt	r4, #3
   11fd8:	ldrb	r2, [r1]
   11fdc:	cmp	r2, #0
   11fe0:	movne	r0, r1
   11fe4:	str	r0, [r4, #8]
   11fe8:	bl	118ac <strlen@plt>
   11fec:	str	r0, [r4, #12]
   11ff0:	movw	r0, #35428	; 0x8a64
   11ff4:	movt	r0, #1
   11ff8:	bl	209a0 <__assert_fail@plt+0xef14>
   11ffc:	movw	r4, #6088	; 0x17c8
   12000:	movw	r7, #8544	; 0x2160
   12004:	movw	r8, #12776	; 0x31e8
   12008:	movw	sl, #12672	; 0x3180
   1200c:	mov	r0, #0
   12010:	mov	r5, #0
   12014:	mov	r9, #1
   12018:	mov	r6, #0
   1201c:	str	r0, [sp, #100]	; 0x64
   12020:	movt	r4, #2
   12024:	movt	r7, #2
   12028:	movt	r8, #3
   1202c:	movt	sl, #3
   12030:	mov	r0, #0
   12034:	b	12040 <__assert_fail@plt+0x5b4>
   12038:	str	r0, [sl]
   1203c:	ldr	r0, [r8]
   12040:	str	r0, [sp, #104]	; 0x68
   12044:	b	1205c <__assert_fail@plt+0x5d0>
   12048:	mov	r6, #1
   1204c:	b	1205c <__assert_fail@plt+0x5d0>
   12050:	cmp	r0, #116	; 0x74
   12054:	beq	12048 <__assert_fail@plt+0x5bc>
   12058:	b	12180 <__assert_fail@plt+0x6f4>
   1205c:	ldr	r0, [sp, #112]	; 0x70
   12060:	ldr	r1, [sp, #108]	; 0x6c
   12064:	mov	r2, r4
   12068:	mov	r3, r7
   1206c:	str	r5, [sp]
   12070:	bl	11870 <getopt_long@plt>
   12074:	cmp	r0, #98	; 0x62
   12078:	ble	120a0 <__assert_fail@plt+0x614>
   1207c:	cmp	r0, #115	; 0x73
   12080:	bgt	12050 <__assert_fail@plt+0x5c4>
   12084:	cmp	r0, #99	; 0x63
   12088:	beq	121a0 <__assert_fail@plt+0x714>
   1208c:	cmp	r0, #102	; 0x66
   12090:	mov	r0, #1
   12094:	str	r0, [sp, #100]	; 0x64
   12098:	beq	1205c <__assert_fail@plt+0x5d0>
   1209c:	b	12a74 <__assert_fail@plt+0xfe8>
   120a0:	add	r1, r0, #3
   120a4:	cmp	r1, #3
   120a8:	bhi	1213c <__assert_fail@plt+0x6b0>
   120ac:	add	r0, pc, #0
   120b0:	ldr	pc, [r0, r1, lsl #2]
   120b4:	andeq	r2, r1, r4, lsr #20
   120b8:	andeq	r2, r1, ip, ror #20
   120bc:			; <UNDEFINED> instruction: 0x000121b8
   120c0:	andeq	r2, r1, r4, asr #1
   120c4:	movw	r0, #12680	; 0x3188
   120c8:	mov	r2, #4
   120cc:	ldr	r1, [r8]
   120d0:	mov	r5, r8
   120d4:	movt	r0, #3
   120d8:	str	r2, [sp]
   120dc:	movw	r2, #8700	; 0x21fc
   120e0:	ldr	r0, [r0]
   120e4:	movt	r2, #2
   120e8:	stmib	sp, {r0, r9}
   120ec:	movw	r9, #8688	; 0x21f0
   120f0:	movw	r0, #6094	; 0x17ce
   120f4:	movt	r9, #2
   120f8:	movt	r0, #2
   120fc:	mov	r3, r9
   12100:	bl	18890 <__assert_fail@plt+0x6e04>
   12104:	ldr	r0, [r9, r0, lsl #2]
   12108:	cmp	r0, #0
   1210c:	beq	12154 <__assert_fail@plt+0x6c8>
   12110:	cmp	r0, #2
   12114:	beq	12160 <__assert_fail@plt+0x6d4>
   12118:	mov	r8, r5
   1211c:	cmp	r0, #1
   12120:	mov	r9, #1
   12124:	mov	r5, #0
   12128:	bne	1205c <__assert_fail@plt+0x5d0>
   1212c:	movw	r0, #12808	; 0x3208
   12130:	movt	r0, #3
   12134:	strh	r9, [r0, #2]
   12138:	b	1205c <__assert_fail@plt+0x5d0>
   1213c:	cmp	r0, #76	; 0x4c
   12140:	bne	12a74 <__assert_fail@plt+0xfe8>
   12144:	movw	r0, #12808	; 0x3208
   12148:	movt	r0, #3
   1214c:	strb	r9, [r0, #1]
   12150:	b	1205c <__assert_fail@plt+0x5d0>
   12154:	movw	r0, #12808	; 0x3208
   12158:	mov	r1, #0
   1215c:	b	12168 <__assert_fail@plt+0x6dc>
   12160:	movw	r0, #12808	; 0x3208
   12164:	mov	r1, #256	; 0x100
   12168:	movt	r0, #3
   1216c:	mov	r8, r5
   12170:	strh	r1, [r0, #2]
   12174:	mov	r9, #1
   12178:	mov	r5, #0
   1217c:	b	1205c <__assert_fail@plt+0x5d0>
   12180:	cmp	r0, #256	; 0x100
   12184:	bne	12a74 <__assert_fail@plt+0xfe8>
   12188:	movw	r0, #12808	; 0x3208
   1218c:	movt	r0, #3
   12190:	strb	r9, [r0]
   12194:	movw	r0, #5254	; 0x1486
   12198:	movt	r0, #2
   1219c:	b	12038 <__assert_fail@plt+0x5ac>
   121a0:	movw	r0, #12808	; 0x3208
   121a4:	movt	r0, #3
   121a8:	strb	r5, [r0]
   121ac:	movw	r0, #5253	; 0x1485
   121b0:	movt	r0, #2
   121b4:	b	12038 <__assert_fail@plt+0x5ac>
   121b8:	movw	r9, #12760	; 0x31d8
   121bc:	ldr	r1, [sp, #112]	; 0x70
   121c0:	movt	r9, #3
   121c4:	ldr	r0, [r9]
   121c8:	cmp	r0, r1
   121cc:	beq	12a7c <__assert_fail@plt+0xff0>
   121d0:	ldr	r7, [sp, #104]	; 0x68
   121d4:	movw	r8, #12808	; 0x3208
   121d8:	movt	r8, #3
   121dc:	cmp	r7, #0
   121e0:	beq	12244 <__assert_fail@plt+0x7b8>
   121e4:	movw	r1, #6148	; 0x1804
   121e8:	mov	r0, r7
   121ec:	movt	r1, #2
   121f0:	bl	1ef08 <__assert_fail@plt+0xd47c>
   121f4:	cmp	r0, #0
   121f8:	beq	122cc <__assert_fail@plt+0x840>
   121fc:	movw	r0, #6601	; 0x19c9
   12200:	movt	r0, #2
   12204:	bl	11804 <getenv@plt>
   12208:	cmp	r0, #0
   1220c:	beq	1227c <__assert_fail@plt+0x7f0>
   12210:	movw	r5, #9604	; 0x2584
   12214:	movw	r1, #9560	; 0x2558
   12218:	mov	r3, #4
   1221c:	mov	r4, r0
   12220:	movt	r5, #2
   12224:	movt	r1, #2
   12228:	mov	r2, r5
   1222c:	bl	18540 <__assert_fail@plt+0x6ab4>
   12230:	cmp	r0, #0
   12234:	blt	1228c <__assert_fail@plt+0x800>
   12238:	ldr	r1, [r5, r0, lsl #2]
   1223c:	mov	r0, #0
   12240:	b	12284 <__assert_fail@plt+0x7f8>
   12244:	ldr	r0, [sp, #100]	; 0x64
   12248:	and	r5, r6, #1
   1224c:	mov	r2, #0
   12250:	mov	r1, r5
   12254:	and	r4, r0, #1
   12258:	mov	r0, r4
   1225c:	bl	12aa8 <__assert_fail@plt+0x101c>
   12260:	mov	r7, r0
   12264:	mov	r0, r4
   12268:	mov	r1, r5
   1226c:	mov	r2, #1
   12270:	bl	12aa8 <__assert_fail@plt+0x101c>
   12274:	str	r0, [sp, #24]
   12278:	b	122d0 <__assert_fail@plt+0x844>
   1227c:	mov	r0, #0
   12280:	mov	r1, #4
   12284:	bl	1b7c8 <__assert_fail@plt+0x9d3c>
   12288:	b	122cc <__assert_fail@plt+0x840>
   1228c:	mov	r0, #0
   12290:	mov	r1, #4
   12294:	bl	1b7c8 <__assert_fail@plt+0x9d3c>
   12298:	movw	r1, #6615	; 0x19d7
   1229c:	mov	r0, #0
   122a0:	mov	r2, #5
   122a4:	movt	r1, #2
   122a8:	bl	1172c <dcgettext@plt>
   122ac:	mov	r5, r0
   122b0:	mov	r0, r4
   122b4:	bl	1d62c <__assert_fail@plt+0xbba0>
   122b8:	mov	r3, r0
   122bc:	mov	r0, #0
   122c0:	mov	r1, #0
   122c4:	mov	r2, r5
   122c8:	bl	117e0 <error@plt>
   122cc:	str	r7, [sp, #24]
   122d0:	ldr	r9, [r9]
   122d4:	ldr	r1, [sp, #112]	; 0x70
   122d8:	mov	r0, #0
   122dc:	cmp	r9, r1
   122e0:	bge	12a1c <__assert_fail@plt+0xf90>
   122e4:	add	r0, sp, #116	; 0x74
   122e8:	add	r4, sp, #128	; 0x80
   122ec:	mov	sl, #1
   122f0:	str	r7, [sp, #104]	; 0x68
   122f4:	add	r0, r0, #4
   122f8:	str	r0, [sp, #20]
   122fc:	sub	r0, fp, #136	; 0x88
   12300:	add	r1, r0, #88	; 0x58
   12304:	str	r1, [sp, #88]	; 0x58
   12308:	add	r1, r0, #80	; 0x50
   1230c:	str	r1, [sp, #84]	; 0x54
   12310:	add	r1, r0, #72	; 0x48
   12314:	str	r1, [sp, #80]	; 0x50
   12318:	add	r1, r0, #64	; 0x40
   1231c:	str	r1, [sp, #76]	; 0x4c
   12320:	add	r1, r0, #48	; 0x30
   12324:	str	r1, [sp, #72]	; 0x48
   12328:	add	r1, r0, #32
   1232c:	add	r0, r0, #96	; 0x60
   12330:	str	r0, [sp, #64]	; 0x40
   12334:	add	r0, r4, #88	; 0x58
   12338:	str	r1, [sp, #68]	; 0x44
   1233c:	str	r0, [sp, #16]
   12340:	add	r0, r4, #80	; 0x50
   12344:	str	r0, [sp, #12]
   12348:	add	r0, r4, #104	; 0x68
   1234c:	str	r0, [sp, #60]	; 0x3c
   12350:	add	r0, r4, #96	; 0x60
   12354:	str	r0, [sp, #56]	; 0x38
   12358:	add	r0, r4, #120	; 0x78
   1235c:	str	r0, [sp, #52]	; 0x34
   12360:	add	r0, r4, #112	; 0x70
   12364:	str	r0, [sp, #48]	; 0x30
   12368:	add	r0, r4, #72	; 0x48
   1236c:	str	r0, [sp, #44]	; 0x2c
   12370:	add	r0, r4, #64	; 0x40
   12374:	str	r0, [sp, #40]	; 0x28
   12378:	add	r0, r4, #48	; 0x30
   1237c:	str	r0, [sp, #36]	; 0x24
   12380:	add	r0, r4, #40	; 0x28
   12384:	str	r0, [sp, #32]
   12388:	add	r0, r4, #32
   1238c:	str	r0, [sp, #28]
   12390:	ldr	r0, [sp, #108]	; 0x6c
   12394:	ldr	r5, [r0, r9, lsl #2]
   12398:	ldr	r0, [sp, #100]	; 0x64
   1239c:	tst	r0, #1
   123a0:	beq	12420 <__assert_fail@plt+0x994>
   123a4:	movw	r1, #9463	; 0x24f7
   123a8:	mov	r0, r5
   123ac:	movt	r1, #2
   123b0:	bl	116b4 <strcmp@plt>
   123b4:	cmp	r0, #0
   123b8:	beq	12920 <__assert_fail@plt+0xe94>
   123bc:	mov	r0, r5
   123c0:	mov	r1, r4
   123c4:	bl	119b4 <statfs64@plt>
   123c8:	cmp	r0, #0
   123cc:	beq	129bc <__assert_fail@plt+0xf30>
   123d0:	bl	118e8 <__errno_location@plt>
   123d4:	mov	r4, r5
   123d8:	ldr	r5, [r0]
   123dc:	movw	r1, #7203	; 0x1c23
   123e0:	mov	r0, #0
   123e4:	mov	r2, #5
   123e8:	mov	r7, #0
   123ec:	movt	r1, #2
   123f0:	bl	1172c <dcgettext@plt>
   123f4:	mov	r6, r0
   123f8:	mov	r0, #4
   123fc:	mov	r1, r4
   12400:	bl	1d104 <__assert_fail@plt+0xb678>
   12404:	mov	r3, r0
   12408:	mov	r0, #0
   1240c:	mov	r1, r5
   12410:	mov	r2, r6
   12414:	add	r4, sp, #128	; 0x80
   12418:	bl	117e0 <error@plt>
   1241c:	b	12a04 <__assert_fail@plt+0xf78>
   12420:	movw	r1, #9463	; 0x24f7
   12424:	mov	r0, r5
   12428:	movt	r1, #2
   1242c:	bl	116b4 <strcmp@plt>
   12430:	mov	r6, r0
   12434:	mov	r0, r4
   12438:	mov	r1, #0
   1243c:	mov	r2, #256	; 0x100
   12440:	bl	11918 <memset@plt>
   12444:	mvn	r1, #0
   12448:	sub	r0, fp, #136	; 0x88
   1244c:	mov	r7, #256	; 0x100
   12450:	mov	r2, r5
   12454:	str	r5, [sp, #92]	; 0x5c
   12458:	mov	r5, #0
   1245c:	str	r1, [sp, #120]	; 0x78
   12460:	str	r0, [sp, #116]	; 0x74
   12464:	ldrb	r0, [r8, #1]
   12468:	str	r1, [sp, #124]	; 0x7c
   1246c:	ldrb	r1, [r8, #3]
   12470:	cmp	r0, #0
   12474:	movw	r0, #5254	; 0x1486
   12478:	movwne	r7, #0
   1247c:	cmp	r6, #0
   12480:	movt	r0, #2
   12484:	moveq	r2, r0
   12488:	movweq	r7, #4096	; 0x1000
   1248c:	mvnne	r6, #99	; 0x63
   12490:	cmp	r1, #1
   12494:	ldrbne	r0, [r8, #2]
   12498:	ldr	r8, [sp, #104]	; 0x68
   1249c:	str	r2, [sp, #96]	; 0x60
   124a0:	bfine	r7, r0, #13, #1
   124a4:	orreq	r7, r7, #16384	; 0x4000
   124a8:	ldrb	r0, [r8]
   124ac:	cmp	r0, #37	; 0x25
   124b0:	bne	12538 <__assert_fail@plt+0xaac>
   124b4:	b	12550 <__assert_fail@plt+0xac4>
   124b8:	mov	r0, #16
   124bc:	b	12524 <__assert_fail@plt+0xa98>
   124c0:	mov	r0, #64	; 0x40
   124c4:	b	12524 <__assert_fail@plt+0xa98>
   124c8:	mov	r0, #128	; 0x80
   124cc:	b	12524 <__assert_fail@plt+0xa98>
   124d0:	mov	r0, #2048	; 0x800
   124d4:	b	12524 <__assert_fail@plt+0xa98>
   124d8:	mov	r0, #8
   124dc:	b	12524 <__assert_fail@plt+0xa98>
   124e0:	mov	r0, #32
   124e4:	b	12524 <__assert_fail@plt+0xa98>
   124e8:	movw	r0, #258	; 0x102
   124ec:	b	12524 <__assert_fail@plt+0xa98>
   124f0:	mov	r0, #256	; 0x100
   124f4:	b	12524 <__assert_fail@plt+0xa98>
   124f8:	mov	r0, #1
   124fc:	b	12524 <__assert_fail@plt+0xa98>
   12500:	mov	r0, #512	; 0x200
   12504:	b	12524 <__assert_fail@plt+0xa98>
   12508:	mov	r0, #3
   1250c:	b	12524 <__assert_fail@plt+0xa98>
   12510:	mov	r0, #4
   12514:	b	12524 <__assert_fail@plt+0xa98>
   12518:	mov	r0, #1024	; 0x400
   1251c:	b	12524 <__assert_fail@plt+0xa98>
   12520:	mov	r0, #0
   12524:	orr	r5, r0, r5
   12528:	add	r8, r8, #1
   1252c:	ldrb	r0, [r8]
   12530:	cmp	r0, #37	; 0x25
   12534:	beq	12550 <__assert_fail@plt+0xac4>
   12538:	cmp	r0, #0
   1253c:	beq	1279c <__assert_fail@plt+0xd10>
   12540:	add	r8, r8, #1
   12544:	ldrb	r0, [r8]
   12548:	cmp	r0, #37	; 0x25
   1254c:	bne	12538 <__assert_fail@plt+0xaac>
   12550:	movw	r1, #8825	; 0x2279
   12554:	add	r4, r8, #1
   12558:	mov	r0, r4
   1255c:	movt	r1, #2
   12560:	bl	11a80 <strspn@plt>
   12564:	add	r8, r4, r0
   12568:	movw	r4, #8833	; 0x2281
   1256c:	movt	r4, #2
   12570:	mov	r0, r8
   12574:	mov	r1, r4
   12578:	bl	11a80 <strspn@plt>
   1257c:	ldrb	r1, [r8, r0]!
   12580:	cmp	r1, #46	; 0x2e
   12584:	bne	1259c <__assert_fail@plt+0xb10>
   12588:	add	r0, r8, #1
   1258c:	mov	r1, r4
   12590:	bl	11a80 <strspn@plt>
   12594:	add	r8, r8, r0
   12598:	ldrb	r1, [r8, #1]!
   1259c:	cmp	r1, #122	; 0x7a
   125a0:	bhi	12520 <__assert_fail@plt+0xa94>
   125a4:	add	r2, pc, #4
   125a8:	mov	r0, #2
   125ac:	ldr	pc, [r2, r1, lsl #2]
   125b0:	muleq	r1, ip, r7
   125b4:	andeq	r2, r1, r0, lsr #10
   125b8:	andeq	r2, r1, r0, lsr #10
   125bc:	andeq	r2, r1, r0, lsr #10
   125c0:	andeq	r2, r1, r0, lsr #10
   125c4:	andeq	r2, r1, r0, lsr #10
   125c8:	andeq	r2, r1, r0, lsr #10
   125cc:	andeq	r2, r1, r0, lsr #10
   125d0:	andeq	r2, r1, r0, lsr #10
   125d4:	andeq	r2, r1, r0, lsr #10
   125d8:	andeq	r2, r1, r0, lsr #10
   125dc:	andeq	r2, r1, r0, lsr #10
   125e0:	andeq	r2, r1, r0, lsr #10
   125e4:	andeq	r2, r1, r0, lsr #10
   125e8:	andeq	r2, r1, r0, lsr #10
   125ec:	andeq	r2, r1, r0, lsr #10
   125f0:	andeq	r2, r1, r0, lsr #10
   125f4:	andeq	r2, r1, r0, lsr #10
   125f8:	andeq	r2, r1, r0, lsr #10
   125fc:	andeq	r2, r1, r0, lsr #10
   12600:	andeq	r2, r1, r0, lsr #10
   12604:	andeq	r2, r1, r0, lsr #10
   12608:	andeq	r2, r1, r0, lsr #10
   1260c:	andeq	r2, r1, r0, lsr #10
   12610:	andeq	r2, r1, r0, lsr #10
   12614:	andeq	r2, r1, r0, lsr #10
   12618:	andeq	r2, r1, r0, lsr #10
   1261c:	andeq	r2, r1, r0, lsr #10
   12620:	andeq	r2, r1, r0, lsr #10
   12624:	andeq	r2, r1, r0, lsr #10
   12628:	andeq	r2, r1, r0, lsr #10
   1262c:	andeq	r2, r1, r0, lsr #10
   12630:	andeq	r2, r1, r0, lsr #10
   12634:	andeq	r2, r1, r0, lsr #10
   12638:	andeq	r2, r1, r0, lsr #10
   1263c:	andeq	r2, r1, r0, lsr #10
   12640:	andeq	r2, r1, r0, lsr #10
   12644:	andeq	r2, r1, r0, lsr #10
   12648:	andeq	r2, r1, r0, lsr #10
   1264c:	andeq	r2, r1, r0, lsr #10
   12650:	andeq	r2, r1, r0, lsr #10
   12654:	andeq	r2, r1, r0, lsr #10
   12658:	andeq	r2, r1, r0, lsr #10
   1265c:	andeq	r2, r1, r0, lsr #10
   12660:	andeq	r2, r1, r0, lsr #10
   12664:	andeq	r2, r1, r0, lsr #10
   12668:	andeq	r2, r1, r0, lsr #10
   1266c:	andeq	r2, r1, r0, lsr #10
   12670:	andeq	r2, r1, r0, lsr #10
   12674:	andeq	r2, r1, r0, lsr #10
   12678:	andeq	r2, r1, r0, lsr #10
   1267c:	andeq	r2, r1, r0, lsr #10
   12680:	andeq	r2, r1, r0, lsr #10
   12684:	andeq	r2, r1, r0, lsr #10
   12688:	andeq	r2, r1, r0, lsr #10
   1268c:	andeq	r2, r1, r0, lsr #10
   12690:	andeq	r2, r1, r0, lsr #10
   12694:	andeq	r2, r1, r0, lsr #10
   12698:	andeq	r2, r1, r0, lsr #10
   1269c:	andeq	r2, r1, r0, lsr #10
   126a0:	andeq	r2, r1, r0, lsr #10
   126a4:	andeq	r2, r1, r0, lsr #10
   126a8:	andeq	r2, r1, r0, lsr #10
   126ac:	andeq	r2, r1, r0, lsr #10
   126b0:	andeq	r2, r1, r0, lsr #10
   126b4:	andeq	r2, r1, r4, lsr #10
   126b8:	andeq	r2, r1, r0, lsr #10
   126bc:	andeq	r2, r1, r0, lsr #10
   126c0:	andeq	r2, r1, r4, lsr #10
   126c4:	andeq	r2, r1, r0, lsr #10
   126c8:	strdeq	r2, [r1], -r8
   126cc:			; <UNDEFINED> instruction: 0x000124b8
   126d0:	andeq	r2, r1, r0, lsr #10
   126d4:	andeq	r2, r1, r0, lsr #10
   126d8:	andeq	r2, r1, r0, lsr #10
   126dc:	andeq	r2, r1, r0, lsr #10
   126e0:	andeq	r2, r1, r0, lsr #10
   126e4:	andeq	r2, r1, r0, lsr #10
   126e8:	andeq	r2, r1, r4, lsr #10
   126ec:	andeq	r2, r1, r0, lsr #10
   126f0:	andeq	r2, r1, r0, lsr #10
   126f4:	andeq	r2, r1, r0, lsr #10
   126f8:	andeq	r2, r1, r0, lsr #10
   126fc:	andeq	r2, r1, r0, lsr #10
   12700:	andeq	r2, r1, r4, lsr #10
   12704:	ldrdeq	r2, [r1], -r8
   12708:	andeq	r2, r1, r0, lsr #10
   1270c:	ldrdeq	r2, [r1], -r0
   12710:	andeq	r2, r1, r0, ror #9
   12714:	andeq	r2, r1, r0, asr #9
   12718:	andeq	r2, r1, r8, asr #9
   1271c:	andeq	r2, r1, r0, lsr #10
   12720:	andeq	r2, r1, r0, lsr #10
   12724:	andeq	r2, r1, r0, lsr #10
   12728:	andeq	r2, r1, r0, lsr #10
   1272c:	andeq	r2, r1, r0, lsr #10
   12730:	andeq	r2, r1, r0, lsr #10
   12734:	andeq	r2, r1, r4, lsr #10
   12738:	andeq	r2, r1, r8, lsl r5
   1273c:	andeq	r2, r1, r0, lsr #10
   12740:	andeq	r2, r1, r4, lsr #10
   12744:	andeq	r2, r1, r0, lsr #10
   12748:	andeq	r2, r1, r8, lsl #10
   1274c:			; <UNDEFINED> instruction: 0x000124b8
   12750:	andeq	r2, r1, r0, lsl r5
   12754:	strdeq	r2, [r1], -r0
   12758:	andeq	r2, r1, r0, lsr #10
   1275c:	andeq	r2, r1, r0, lsr #10
   12760:	andeq	r2, r1, r0, lsr #10
   12764:	andeq	r2, r1, r8, ror #9
   12768:	andeq	r2, r1, r0, lsr #10
   1276c:	andeq	r2, r1, r0, lsr #10
   12770:	andeq	r2, r1, r0, lsr #10
   12774:	andeq	r2, r1, r0, lsr #10
   12778:	andeq	r2, r1, r0, lsr #10
   1277c:	andeq	r2, r1, r0, lsl #10
   12780:	andeq	r2, r1, r4, lsr #10
   12784:	ldrdeq	r2, [r1], -r8
   12788:	andeq	r2, r1, r0, lsr #10
   1278c:	ldrdeq	r2, [r1], -r0
   12790:	andeq	r2, r1, r0, ror #9
   12794:	andeq	r2, r1, r0, asr #9
   12798:	andeq	r2, r1, r8, asr #9
   1279c:	ldr	r1, [sp, #96]	; 0x60
   127a0:	add	r0, sp, #128	; 0x80
   127a4:	mov	r2, r7
   127a8:	mov	r3, r5
   127ac:	str	r0, [sp]
   127b0:	mov	r0, r6
   127b4:	bl	1196c <statx@plt>
   127b8:	cmn	r0, #1
   127bc:	ble	12964 <__assert_fail@plt+0xed8>
   127c0:	ldr	r7, [sp, #268]	; 0x10c
   127c4:	ldr	r3, [sp, #264]	; 0x108
   127c8:	movw	r5, #65280	; 0xff00
   127cc:	ldrh	r2, [sp, #156]	; 0x9c
   127d0:	mov	r1, r0
   127d4:	sub	lr, fp, #116	; 0x74
   127d8:	movw	r8, #12808	; 0x3208
   127dc:	movt	r5, #15
   127e0:	movt	r8, #3
   127e4:	mov	ip, r5
   127e8:	and	r5, r5, r3, lsl #8
   127ec:	bic	r6, r7, #255	; 0xff
   127f0:	bfc	r3, #0, #12
   127f4:	and	r0, r2, #45056	; 0xb000
   127f8:	orr	r3, r3, r6, lsr #20
   127fc:	orr	r0, r0, #16384	; 0x4000
   12800:	str	r3, [fp, #-132]	; 0xffffff7c
   12804:	uxtb	r3, r7
   12808:	cmp	r0, #24576	; 0x6000
   1280c:	ldr	r0, [sp, #104]	; 0x68
   12810:	add	r7, sp, #144	; 0x90
   12814:	orr	r3, r5, r3
   12818:	orr	r3, r3, r6, lsl #12
   1281c:	str	r3, [fp, #-136]	; 0xffffff78
   12820:	ldr	r3, [sp, #28]
   12824:	ldreq	r0, [sp, #24]
   12828:	ldrd	r4, [r3]
   1282c:	ldr	r3, [sp, #64]	; 0x40
   12830:	strd	r4, [r3]
   12834:	str	r2, [fp, #-120]	; 0xffffff88
   12838:	ldm	r7, {r2, r3, r7}
   1283c:	ldr	r6, [sp, #256]	; 0x100
   12840:	stm	lr, {r2, r3, r7}
   12844:	and	r7, ip, r6, lsl #8
   12848:	bfc	r6, #0, #12
   1284c:	ldr	r2, [sp, #260]	; 0x104
   12850:	bic	r3, r2, #255	; 0xff
   12854:	uxtb	r2, r2
   12858:	orr	r2, r7, r2
   1285c:	orr	r5, r6, r3, lsr #20
   12860:	ldr	r7, [sp, #72]	; 0x48
   12864:	orr	r4, r2, r3, lsl #12
   12868:	ldr	r2, [sp, #68]	; 0x44
   1286c:	strd	r4, [r2]
   12870:	ldr	r2, [sp, #32]
   12874:	ldrd	r2, [r2]
   12878:	strd	r2, [r7]
   1287c:	ldr	r2, [sp, #132]	; 0x84
   12880:	ldr	r7, [sp, #76]	; 0x4c
   12884:	str	r2, [fp, #-80]	; 0xffffffb0
   12888:	ldr	r2, [sp, #36]	; 0x24
   1288c:	ldrd	r2, [r2]
   12890:	strd	r2, [r7]
   12894:	ldr	r2, [sp, #40]	; 0x28
   12898:	ldr	r3, [sp, #44]	; 0x2c
   1289c:	ldr	r7, [sp, #80]	; 0x50
   128a0:	ldr	r2, [r2]
   128a4:	ldr	r3, [r3]
   128a8:	strd	r2, [r7]
   128ac:	ldr	r2, [sp, #48]	; 0x30
   128b0:	ldr	r3, [sp, #52]	; 0x34
   128b4:	ldr	r7, [sp, #84]	; 0x54
   128b8:	ldr	r2, [r2]
   128bc:	ldr	r3, [r3]
   128c0:	strd	r2, [r7]
   128c4:	ldr	r2, [sp, #56]	; 0x38
   128c8:	ldr	r3, [sp, #60]	; 0x3c
   128cc:	ldr	r7, [sp, #88]	; 0x58
   128d0:	ldr	r2, [r2]
   128d4:	ldr	r3, [r3]
   128d8:	strd	r2, [r7]
   128dc:	ldrb	r2, [sp, #129]	; 0x81
   128e0:	tst	r2, #8
   128e4:	beq	12900 <__assert_fail@plt+0xe74>
   128e8:	ldr	r2, [sp, #12]
   128ec:	ldr	r3, [sp, #16]
   128f0:	ldr	r7, [sp, #20]
   128f4:	ldr	r2, [r2]
   128f8:	ldr	r3, [r3]
   128fc:	stm	r7, {r2, r3}
   12900:	add	r2, sp, #116	; 0x74
   12904:	movw	r3, #20956	; 0x51dc
   12908:	str	r2, [sp]
   1290c:	ldr	r2, [sp, #92]	; 0x5c
   12910:	movt	r3, #1
   12914:	bl	12c30 <__assert_fail@plt+0x11a4>
   12918:	eor	r7, r0, #1
   1291c:	b	12a00 <__assert_fail@plt+0xf74>
   12920:	movw	r1, #7135	; 0x1bdf
   12924:	mov	r0, #0
   12928:	mov	r2, #5
   1292c:	mov	r7, #0
   12930:	movt	r1, #2
   12934:	bl	1172c <dcgettext@plt>
   12938:	mov	r1, r5
   1293c:	mov	r5, r0
   12940:	mov	r0, #4
   12944:	bl	1d104 <__assert_fail@plt+0xb678>
   12948:	mov	r3, r0
   1294c:	mov	r0, #0
   12950:	mov	r1, #0
   12954:	mov	r2, r5
   12958:	add	r4, sp, #128	; 0x80
   1295c:	bl	117e0 <error@plt>
   12960:	b	12a04 <__assert_fail@plt+0xf78>
   12964:	bl	118e8 <__errno_location@plt>
   12968:	ldr	r5, [r0]
   1296c:	movw	r8, #12808	; 0x3208
   12970:	tst	r7, #4096	; 0x1000
   12974:	mov	r7, #0
   12978:	mov	r0, #0
   1297c:	movt	r8, #3
   12980:	bne	129e0 <__assert_fail@plt+0xf54>
   12984:	movw	r1, #8440	; 0x20f8
   12988:	mov	r2, #5
   1298c:	movt	r1, #2
   12990:	bl	1172c <dcgettext@plt>
   12994:	ldr	r1, [sp, #92]	; 0x5c
   12998:	mov	r4, r0
   1299c:	mov	r0, #4
   129a0:	bl	1d104 <__assert_fail@plt+0xb678>
   129a4:	mov	r3, r0
   129a8:	mov	r0, #0
   129ac:	mov	r1, r5
   129b0:	mov	r2, r4
   129b4:	bl	117e0 <error@plt>
   129b8:	b	12a00 <__assert_fail@plt+0xf74>
   129bc:	ldr	r0, [sp, #104]	; 0x68
   129c0:	movw	r3, #12980	; 0x32b4
   129c4:	mvn	r1, #0
   129c8:	mov	r2, r5
   129cc:	str	r4, [sp]
   129d0:	movt	r3, #1
   129d4:	bl	12c30 <__assert_fail@plt+0x11a4>
   129d8:	eor	r7, r0, #1
   129dc:	b	12a04 <__assert_fail@plt+0xf78>
   129e0:	movw	r1, #8413	; 0x20dd
   129e4:	mov	r2, #5
   129e8:	movt	r1, #2
   129ec:	bl	1172c <dcgettext@plt>
   129f0:	mov	r2, r0
   129f4:	mov	r0, #0
   129f8:	mov	r1, r5
   129fc:	bl	117e0 <error@plt>
   12a00:	add	r4, sp, #128	; 0x80
   12a04:	ldr	r0, [sp, #112]	; 0x70
   12a08:	add	r9, r9, #1
   12a0c:	and	sl, sl, r7
   12a10:	cmp	r9, r0
   12a14:	bne	12390 <__assert_fail@plt+0x904>
   12a18:	eor	r0, sl, #1
   12a1c:	sub	sp, fp, #28
   12a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a24:	movw	r0, #12676	; 0x3184
   12a28:	movw	r2, #6117	; 0x17e5
   12a2c:	mov	r1, #0
   12a30:	movt	r0, #3
   12a34:	movt	r2, #2
   12a38:	str	r1, [sp, #4]
   12a3c:	movw	r1, #6059	; 0x17ab
   12a40:	ldr	r3, [r0]
   12a44:	movw	r0, #12772	; 0x31e4
   12a48:	str	r2, [sp]
   12a4c:	movw	r2, #6103	; 0x17d7
   12a50:	movt	r1, #2
   12a54:	movt	r0, #3
   12a58:	movt	r2, #2
   12a5c:	ldr	r0, [r0]
   12a60:	bl	1e5e8 <__assert_fail@plt+0xcb5c>
   12a64:	mov	r0, #0
   12a68:	bl	11894 <exit@plt>
   12a6c:	mov	r0, #0
   12a70:	bl	11b88 <__assert_fail@plt+0xfc>
   12a74:	mov	r0, #1
   12a78:	bl	11b88 <__assert_fail@plt+0xfc>
   12a7c:	movw	r1, #6132	; 0x17f4
   12a80:	mov	r0, #0
   12a84:	mov	r2, #5
   12a88:	movt	r1, #2
   12a8c:	bl	1172c <dcgettext@plt>
   12a90:	mov	r2, r0
   12a94:	mov	r0, #0
   12a98:	mov	r1, #0
   12a9c:	bl	117e0 <error@plt>
   12aa0:	mov	r0, #1
   12aa4:	bl	11b88 <__assert_fail@plt+0xfc>
   12aa8:	push	{r4, r5, r6, sl, fp, lr}
   12aac:	add	fp, sp, #16
   12ab0:	cmp	r0, #0
   12ab4:	beq	12ad0 <__assert_fail@plt+0x1044>
   12ab8:	cmp	r1, #0
   12abc:	beq	12af8 <__assert_fail@plt+0x106c>
   12ac0:	movw	r0, #8508	; 0x213c
   12ac4:	movt	r0, #2
   12ac8:	bl	1ed3c <__assert_fail@plt+0xd2b0>
   12acc:	pop	{r4, r5, r6, sl, fp, pc}
   12ad0:	cmp	r1, #0
   12ad4:	beq	12b14 <__assert_fail@plt+0x1088>
   12ad8:	bl	116a8 <is_selinux_enabled@plt>
   12adc:	cmp	r0, #1
   12ae0:	movwge	r0, #8456	; 0x2108
   12ae4:	movtge	r0, #2
   12ae8:	movwlt	r0, #8776	; 0x2248
   12aec:	movtlt	r0, #2
   12af0:	bl	1ed3c <__assert_fail@plt+0xd2b0>
   12af4:	pop	{r4, r5, r6, sl, fp, pc}
   12af8:	movw	r1, #6680	; 0x1a18
   12afc:	mov	r0, #0
   12b00:	mov	r2, #5
   12b04:	movt	r1, #2
   12b08:	bl	1172c <dcgettext@plt>
   12b0c:	bl	1ed3c <__assert_fail@plt+0xd2b0>
   12b10:	pop	{r4, r5, r6, sl, fp, pc}
   12b14:	movw	r1, #6852	; 0x1ac4
   12b18:	mov	r4, r2
   12b1c:	mov	r0, #0
   12b20:	mov	r2, #5
   12b24:	movt	r1, #2
   12b28:	bl	1172c <dcgettext@plt>
   12b2c:	bl	1ed3c <__assert_fail@plt+0xd2b0>
   12b30:	movw	r1, #6979	; 0x1b43
   12b34:	mov	r5, r0
   12b38:	movw	r0, #6915	; 0x1b03
   12b3c:	cmp	r4, #0
   12b40:	mov	r2, #5
   12b44:	movt	r0, #2
   12b48:	movt	r1, #2
   12b4c:	movne	r1, r0
   12b50:	mov	r0, #0
   12b54:	bl	1172c <dcgettext@plt>
   12b58:	movw	r4, #6910	; 0x1afe
   12b5c:	mov	r2, r0
   12b60:	mov	r1, r5
   12b64:	movt	r4, #2
   12b68:	mov	r0, r4
   12b6c:	bl	1edfc <__assert_fail@plt+0xd370>
   12b70:	mov	r6, r0
   12b74:	mov	r0, r5
   12b78:	bl	18ea0 <__assert_fail@plt+0x7414>
   12b7c:	movw	r1, #7020	; 0x1b6c
   12b80:	mov	r0, #0
   12b84:	mov	r2, #5
   12b88:	movt	r1, #2
   12b8c:	bl	1172c <dcgettext@plt>
   12b90:	mov	r2, r0
   12b94:	mov	r0, r4
   12b98:	mov	r1, r6
   12b9c:	bl	1edfc <__assert_fail@plt+0xd370>
   12ba0:	mov	r4, r0
   12ba4:	mov	r0, r6
   12ba8:	bl	18ea0 <__assert_fail@plt+0x7414>
   12bac:	bl	116a8 <is_selinux_enabled@plt>
   12bb0:	cmp	r0, #1
   12bb4:	blt	12bf0 <__assert_fail@plt+0x1164>
   12bb8:	movw	r1, #7077	; 0x1ba5
   12bbc:	mov	r0, #0
   12bc0:	mov	r2, #5
   12bc4:	movt	r1, #2
   12bc8:	bl	1172c <dcgettext@plt>
   12bcc:	mov	r2, r0
   12bd0:	movw	r0, #6910	; 0x1afe
   12bd4:	mov	r1, r4
   12bd8:	movt	r0, #2
   12bdc:	bl	1edfc <__assert_fail@plt+0xd370>
   12be0:	mov	r5, r0
   12be4:	mov	r0, r4
   12be8:	bl	18ea0 <__assert_fail@plt+0x7414>
   12bec:	b	12bf4 <__assert_fail@plt+0x1168>
   12bf0:	mov	r5, r4
   12bf4:	movw	r1, #7090	; 0x1bb2
   12bf8:	mov	r0, #0
   12bfc:	mov	r2, #5
   12c00:	movt	r1, #2
   12c04:	bl	1172c <dcgettext@plt>
   12c08:	mov	r2, r0
   12c0c:	movw	r0, #6910	; 0x1afe
   12c10:	mov	r1, r5
   12c14:	movt	r0, #2
   12c18:	bl	1edfc <__assert_fail@plt+0xd370>
   12c1c:	mov	r4, r0
   12c20:	mov	r0, r5
   12c24:	bl	18ea0 <__assert_fail@plt+0x7414>
   12c28:	mov	r0, r4
   12c2c:	pop	{r4, r5, r6, sl, fp, pc}
   12c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c34:	add	fp, sp, #28
   12c38:	sub	sp, sp, #28
   12c3c:	add	ip, sp, #16
   12c40:	mov	sl, r0
   12c44:	stm	ip, {r1, r2, r3}
   12c48:	bl	118ac <strlen@plt>
   12c4c:	add	r0, r0, #4
   12c50:	bl	1e81c <__assert_fail@plt+0xcd90>
   12c54:	movw	r5, #8833	; 0x2281
   12c58:	movw	r6, #12772	; 0x31e4
   12c5c:	mov	r4, r0
   12c60:	mov	r9, #0
   12c64:	movt	r5, #2
   12c68:	movt	r6, #3
   12c6c:	ldrb	r1, [sl]
   12c70:	cmp	r1, #37	; 0x25
   12c74:	bne	12c90 <__assert_fail@plt+0x1204>
   12c78:	b	12cd0 <__assert_fail@plt+0x1244>
   12c7c:	movw	r5, #8833	; 0x2281
   12c80:	movt	r5, #2
   12c84:	ldrb	r1, [sl]
   12c88:	cmp	r1, #37	; 0x25
   12c8c:	beq	12cd0 <__assert_fail@plt+0x1244>
   12c90:	cmp	r1, #92	; 0x5c
   12c94:	beq	12d48 <__assert_fail@plt+0x12bc>
   12c98:	cmp	r1, #0
   12c9c:	beq	13248 <__assert_fail@plt+0x17bc>
   12ca0:	ldr	r0, [r6]
   12ca4:	ldr	r2, [r0, #20]
   12ca8:	ldr	r3, [r0, #24]
   12cac:	cmp	r2, r3
   12cb0:	bcs	131f8 <__assert_fail@plt+0x176c>
   12cb4:	add	r3, r2, #1
   12cb8:	add	sl, sl, #1
   12cbc:	str	r3, [r0, #20]
   12cc0:	strb	r1, [r2]
   12cc4:	ldrb	r1, [sl]
   12cc8:	cmp	r1, #37	; 0x25
   12ccc:	bne	12c90 <__assert_fail@plt+0x1204>
   12cd0:	movw	r1, #8825	; 0x2279
   12cd4:	add	r7, sl, #1
   12cd8:	mov	r0, r7
   12cdc:	movt	r1, #2
   12ce0:	bl	11a80 <strspn@plt>
   12ce4:	add	r8, r7, r0
   12ce8:	mov	r1, r5
   12cec:	mov	r0, r8
   12cf0:	bl	11a80 <strspn@plt>
   12cf4:	mov	r1, r5
   12cf8:	ldrb	r5, [r8, r0]!
   12cfc:	cmp	r5, #46	; 0x2e
   12d00:	bne	12d14 <__assert_fail@plt+0x1288>
   12d04:	add	r0, r8, #1
   12d08:	bl	11a80 <strspn@plt>
   12d0c:	add	r8, r8, r0
   12d10:	ldrb	r5, [r8, #1]!
   12d14:	sub	r7, r8, sl
   12d18:	mov	r0, r4
   12d1c:	mov	r1, sl
   12d20:	mov	r2, r7
   12d24:	bl	11708 <memcpy@plt>
   12d28:	mov	r2, #0
   12d2c:	cmp	r5, #71	; 0x47
   12d30:	bgt	12e10 <__assert_fail@plt+0x1384>
   12d34:	cmp	r5, #0
   12d38:	beq	12fdc <__assert_fail@plt+0x1550>
   12d3c:	cmp	r5, #37	; 0x25
   12d40:	beq	12fe0 <__assert_fail@plt+0x1554>
   12d44:	b	12e30 <__assert_fail@plt+0x13a4>
   12d48:	movw	r0, #12808	; 0x3208
   12d4c:	movt	r0, #3
   12d50:	ldrb	r0, [r0]
   12d54:	cmp	r0, #0
   12d58:	beq	12dd8 <__assert_fail@plt+0x134c>
   12d5c:	mov	r5, sl
   12d60:	ldrb	r7, [r5, #1]!
   12d64:	and	r0, r7, #248	; 0xf8
   12d68:	cmp	r0, #48	; 0x30
   12d6c:	bne	12e64 <__assert_fail@plt+0x13d8>
   12d70:	mov	r5, sl
   12d74:	sub	r1, r7, #48	; 0x30
   12d78:	ldrb	r0, [r5, #2]!
   12d7c:	and	r2, r0, #248	; 0xf8
   12d80:	cmp	r2, #48	; 0x30
   12d84:	bne	12dac <__assert_fail@plt+0x1320>
   12d88:	add	r0, r0, r1, lsl #3
   12d8c:	mov	r5, sl
   12d90:	sub	r1, r0, #48	; 0x30
   12d94:	ldrb	r0, [r5, #3]!
   12d98:	and	r2, r0, #248	; 0xf8
   12d9c:	cmp	r2, #48	; 0x30
   12da0:	addeq	r0, r0, r1, lsl #3
   12da4:	addeq	r5, sl, #4
   12da8:	subeq	r1, r0, #48	; 0x30
   12dac:	ldr	r0, [r6]
   12db0:	ldr	r2, [r0, #20]
   12db4:	ldr	r3, [r0, #24]
   12db8:	cmp	r2, r3
   12dbc:	bcs	1321c <__assert_fail@plt+0x1790>
   12dc0:	add	r3, r2, #1
   12dc4:	str	r3, [r0, #20]
   12dc8:	strb	r1, [r2]
   12dcc:	sub	r0, r5, #1
   12dd0:	add	sl, r0, #1
   12dd4:	b	12c7c <__assert_fail@plt+0x11f0>
   12dd8:	ldr	r0, [r6]
   12ddc:	ldr	r1, [r0, #20]
   12de0:	ldr	r2, [r0, #24]
   12de4:	cmp	r1, r2
   12de8:	bcs	131f4 <__assert_fail@plt+0x1768>
   12dec:	add	r2, r1, #1
   12df0:	add	sl, sl, #1
   12df4:	str	r2, [r0, #20]
   12df8:	mov	r0, #92	; 0x5c
   12dfc:	strb	r0, [r1]
   12e00:	ldrb	r1, [sl]
   12e04:	cmp	r1, #37	; 0x25
   12e08:	bne	12c90 <__assert_fail@plt+0x1204>
   12e0c:	b	12cd0 <__assert_fail@plt+0x1244>
   12e10:	cmp	r5, #72	; 0x48
   12e14:	cmpne	r5, #76	; 0x4c
   12e18:	bne	12e30 <__assert_fail@plt+0x13a4>
   12e1c:	ldr	r0, [sp, #24]
   12e20:	movw	r1, #20956	; 0x51dc
   12e24:	movt	r1, #1
   12e28:	cmp	r0, r1
   12e2c:	beq	13014 <__assert_fail@plt+0x1588>
   12e30:	mov	r3, r5
   12e34:	ldr	r0, [sp, #16]
   12e38:	mov	r1, r7
   12e3c:	ldr	r7, [sp, #24]
   12e40:	str	r0, [sp]
   12e44:	ldr	r0, [sp, #20]
   12e48:	str	r0, [sp, #4]
   12e4c:	ldr	r0, [fp, #8]
   12e50:	str	r0, [sp, #8]
   12e54:	mov	r0, r4
   12e58:	blx	r7
   12e5c:	orr	r9, r9, r0
   12e60:	b	1300c <__assert_fail@plt+0x1580>
   12e64:	sub	r0, r7, #34	; 0x22
   12e68:	cmp	r0, #86	; 0x56
   12e6c:	bhi	13034 <__assert_fail@plt+0x15a8>
   12e70:	add	r1, pc, #0
   12e74:	ldr	pc, [r1, r0, lsl #2]
   12e78:	andeq	r3, r1, ip, lsl #2
   12e7c:	ldrdeq	r3, [r1], -ip
   12e80:	ldrdeq	r3, [r1], -ip
   12e84:	ldrdeq	r3, [r1], -ip
   12e88:	ldrdeq	r3, [r1], -ip
   12e8c:	ldrdeq	r3, [r1], -ip
   12e90:	ldrdeq	r3, [r1], -ip
   12e94:	ldrdeq	r3, [r1], -ip
   12e98:	ldrdeq	r3, [r1], -ip
   12e9c:	ldrdeq	r3, [r1], -ip
   12ea0:	ldrdeq	r3, [r1], -ip
   12ea4:	ldrdeq	r3, [r1], -ip
   12ea8:	ldrdeq	r3, [r1], -ip
   12eac:	ldrdeq	r3, [r1], -ip
   12eb0:	ldrdeq	r3, [r1], -ip
   12eb4:	ldrdeq	r3, [r1], -ip
   12eb8:	ldrdeq	r3, [r1], -ip
   12ebc:	ldrdeq	r3, [r1], -ip
   12ec0:	ldrdeq	r3, [r1], -ip
   12ec4:	ldrdeq	r3, [r1], -ip
   12ec8:	ldrdeq	r3, [r1], -ip
   12ecc:	ldrdeq	r3, [r1], -ip
   12ed0:	ldrdeq	r3, [r1], -ip
   12ed4:	ldrdeq	r3, [r1], -ip
   12ed8:	ldrdeq	r3, [r1], -ip
   12edc:	ldrdeq	r3, [r1], -ip
   12ee0:	ldrdeq	r3, [r1], -ip
   12ee4:	ldrdeq	r3, [r1], -ip
   12ee8:	ldrdeq	r3, [r1], -ip
   12eec:	ldrdeq	r3, [r1], -ip
   12ef0:	ldrdeq	r3, [r1], -ip
   12ef4:	ldrdeq	r3, [r1], -ip
   12ef8:	ldrdeq	r3, [r1], -ip
   12efc:	ldrdeq	r3, [r1], -ip
   12f00:	ldrdeq	r3, [r1], -ip
   12f04:	ldrdeq	r3, [r1], -ip
   12f08:	ldrdeq	r3, [r1], -ip
   12f0c:	ldrdeq	r3, [r1], -ip
   12f10:	ldrdeq	r3, [r1], -ip
   12f14:	ldrdeq	r3, [r1], -ip
   12f18:	ldrdeq	r3, [r1], -ip
   12f1c:	ldrdeq	r3, [r1], -ip
   12f20:	ldrdeq	r3, [r1], -ip
   12f24:	ldrdeq	r3, [r1], -ip
   12f28:	ldrdeq	r3, [r1], -ip
   12f2c:	ldrdeq	r3, [r1], -ip
   12f30:	ldrdeq	r3, [r1], -ip
   12f34:	ldrdeq	r3, [r1], -ip
   12f38:	ldrdeq	r3, [r1], -ip
   12f3c:	ldrdeq	r3, [r1], -ip
   12f40:	ldrdeq	r3, [r1], -ip
   12f44:	ldrdeq	r3, [r1], -ip
   12f48:	ldrdeq	r3, [r1], -ip
   12f4c:	ldrdeq	r3, [r1], -ip
   12f50:	ldrdeq	r3, [r1], -ip
   12f54:	ldrdeq	r3, [r1], -ip
   12f58:	ldrdeq	r3, [r1], -ip
   12f5c:	ldrdeq	r3, [r1], -ip
   12f60:	andeq	r3, r1, ip, lsl #2
   12f64:	ldrdeq	r3, [r1], -ip
   12f68:	ldrdeq	r3, [r1], -ip
   12f6c:	ldrdeq	r3, [r1], -ip
   12f70:	ldrdeq	r3, [r1], -ip
   12f74:	ldrdeq	r2, [r1], -r4
   12f78:	andeq	r3, r1, ip, lsr #1
   12f7c:	ldrdeq	r3, [r1], -ip
   12f80:	ldrdeq	r3, [r1], -ip
   12f84:	muleq	r1, r4, r0
   12f88:	muleq	r1, ip, r0
   12f8c:	ldrdeq	r3, [r1], -ip
   12f90:	ldrdeq	r3, [r1], -ip
   12f94:	ldrdeq	r3, [r1], -ip
   12f98:	ldrdeq	r3, [r1], -ip
   12f9c:	ldrdeq	r3, [r1], -ip
   12fa0:	ldrdeq	r3, [r1], -ip
   12fa4:	ldrdeq	r3, [r1], -ip
   12fa8:	andeq	r3, r1, r4, lsr #1
   12fac:	ldrdeq	r3, [r1], -ip
   12fb0:	ldrdeq	r3, [r1], -ip
   12fb4:	ldrdeq	r3, [r1], -ip
   12fb8:	strheq	r3, [r1], -r4
   12fbc:	ldrdeq	r3, [r1], -ip
   12fc0:	andeq	r3, r1, ip, lsl #1
   12fc4:	ldrdeq	r3, [r1], -ip
   12fc8:	andeq	r3, r1, r8, lsl #2
   12fcc:	ldrdeq	r3, [r1], -ip
   12fd0:	strheq	r3, [r1], -ip
   12fd4:	mov	r7, #7
   12fd8:	b	1310c <__assert_fail@plt+0x1680>
   12fdc:	sub	r8, r8, #1
   12fe0:	cmp	r7, #2
   12fe4:	bcs	13270 <__assert_fail@plt+0x17e4>
   12fe8:	ldr	r0, [r6]
   12fec:	ldr	r1, [r0, #20]
   12ff0:	ldr	r2, [r0, #24]
   12ff4:	cmp	r1, r2
   12ff8:	bcs	13210 <__assert_fail@plt+0x1784>
   12ffc:	add	r2, r1, #1
   13000:	str	r2, [r0, #20]
   13004:	mov	r0, #37	; 0x25
   13008:	strb	r0, [r1]
   1300c:	add	sl, r8, #1
   13010:	b	12c7c <__assert_fail@plt+0x11f0>
   13014:	mov	r0, r8
   13018:	ldrb	r3, [r0, #1]!
   1301c:	cmp	r3, #100	; 0x64
   13020:	cmpne	r3, #114	; 0x72
   13024:	bne	12e30 <__assert_fail@plt+0x13a4>
   13028:	mov	r8, r0
   1302c:	mov	r2, r5
   13030:	b	12e34 <__assert_fail@plt+0x13a8>
   13034:	cmp	r7, #0
   13038:	bne	130dc <__assert_fail@plt+0x1650>
   1303c:	movw	r1, #7268	; 0x1c64
   13040:	mov	r0, #0
   13044:	mov	r2, #5
   13048:	movt	r1, #2
   1304c:	bl	1172c <dcgettext@plt>
   13050:	mov	r2, r0
   13054:	mov	r0, #0
   13058:	mov	r1, #0
   1305c:	bl	117e0 <error@plt>
   13060:	ldr	r0, [r6]
   13064:	ldr	r1, [r0, #20]
   13068:	ldr	r2, [r0, #24]
   1306c:	cmp	r1, r2
   13070:	bcs	13234 <__assert_fail@plt+0x17a8>
   13074:	add	r2, r1, #1
   13078:	str	r2, [r0, #20]
   1307c:	mov	r0, #92	; 0x5c
   13080:	strb	r0, [r1]
   13084:	add	sl, sl, #1
   13088:	b	12c7c <__assert_fail@plt+0x11f0>
   1308c:	mov	r7, #9
   13090:	b	1310c <__assert_fail@plt+0x1680>
   13094:	mov	r7, #27
   13098:	b	1310c <__assert_fail@plt+0x1680>
   1309c:	mov	r7, #12
   130a0:	b	1310c <__assert_fail@plt+0x1680>
   130a4:	mov	r7, #10
   130a8:	b	1310c <__assert_fail@plt+0x1680>
   130ac:	mov	r7, #8
   130b0:	b	1310c <__assert_fail@plt+0x1680>
   130b4:	mov	r7, #13
   130b8:	b	1310c <__assert_fail@plt+0x1680>
   130bc:	bl	1187c <__ctype_b_loc@plt>
   130c0:	mov	r1, sl
   130c4:	ldr	r0, [r0]
   130c8:	ldrb	r2, [r1, #2]!
   130cc:	add	r3, r0, r2, lsl #1
   130d0:	ldrb	r3, [r3, #1]
   130d4:	tst	r3, #16
   130d8:	bne	13134 <__assert_fail@plt+0x16a8>
   130dc:	movw	r1, #7535	; 0x1d6f
   130e0:	mov	r0, #0
   130e4:	mov	r2, #5
   130e8:	movt	r1, #2
   130ec:	bl	1172c <dcgettext@plt>
   130f0:	mov	r2, r0
   130f4:	mov	r0, #0
   130f8:	mov	r1, #0
   130fc:	mov	r3, r7
   13100:	bl	117e0 <error@plt>
   13104:	b	1310c <__assert_fail@plt+0x1680>
   13108:	mov	r7, #11
   1310c:	ldr	r0, [r6]
   13110:	ldr	r1, [r0, #20]
   13114:	ldr	r2, [r0, #24]
   13118:	cmp	r1, r2
   1311c:	bcs	13228 <__assert_fail@plt+0x179c>
   13120:	add	r2, r1, #1
   13124:	str	r2, [r0, #20]
   13128:	strb	r7, [r1]
   1312c:	add	sl, r5, #1
   13130:	b	12c7c <__assert_fail@plt+0x11f0>
   13134:	sub	r3, r2, #97	; 0x61
   13138:	uxtb	r7, r3
   1313c:	mvn	r3, #86	; 0x56
   13140:	cmp	r7, #6
   13144:	bcc	1315c <__assert_fail@plt+0x16d0>
   13148:	sub	r3, r2, #65	; 0x41
   1314c:	uxtb	r3, r3
   13150:	cmp	r3, #6
   13154:	mvn	r3, #47	; 0x2f
   13158:	mvncc	r3, #54	; 0x36
   1315c:	add	r2, r3, r2
   13160:	ldrb	r3, [sl, #3]!
   13164:	add	r0, r0, r3, lsl #1
   13168:	ldrb	r0, [r0, #1]
   1316c:	tst	r0, #16
   13170:	bne	13184 <__assert_fail@plt+0x16f8>
   13174:	movw	r5, #8833	; 0x2281
   13178:	mov	sl, r1
   1317c:	movt	r5, #2
   13180:	b	131c0 <__assert_fail@plt+0x1734>
   13184:	sub	r1, r3, #97	; 0x61
   13188:	movw	r5, #8833	; 0x2281
   1318c:	lsl	r0, r2, #4
   13190:	uxtb	r2, r1
   13194:	mvn	r1, #86	; 0x56
   13198:	movt	r5, #2
   1319c:	cmp	r2, #6
   131a0:	bcc	131b8 <__assert_fail@plt+0x172c>
   131a4:	sub	r1, r3, #65	; 0x41
   131a8:	uxtb	r1, r1
   131ac:	cmp	r1, #6
   131b0:	mvn	r1, #47	; 0x2f
   131b4:	mvncc	r1, #54	; 0x36
   131b8:	add	r1, r1, r3
   131bc:	add	r2, r1, r0
   131c0:	ldr	r0, [r6]
   131c4:	ldr	r1, [r0, #20]
   131c8:	ldr	r3, [r0, #24]
   131cc:	cmp	r1, r3
   131d0:	bcs	13240 <__assert_fail@plt+0x17b4>
   131d4:	add	r3, r1, #1
   131d8:	add	sl, sl, #1
   131dc:	str	r3, [r0, #20]
   131e0:	strb	r2, [r1]
   131e4:	ldrb	r1, [sl]
   131e8:	cmp	r1, #37	; 0x25
   131ec:	bne	12c90 <__assert_fail@plt+0x1204>
   131f0:	b	12cd0 <__assert_fail@plt+0x1244>
   131f4:	mov	r1, #92	; 0x5c
   131f8:	bl	11990 <__overflow@plt>
   131fc:	add	sl, sl, #1
   13200:	ldrb	r1, [sl]
   13204:	cmp	r1, #37	; 0x25
   13208:	bne	12c90 <__assert_fail@plt+0x1204>
   1320c:	b	12cd0 <__assert_fail@plt+0x1244>
   13210:	mov	r1, #37	; 0x25
   13214:	bl	11990 <__overflow@plt>
   13218:	b	1300c <__assert_fail@plt+0x1580>
   1321c:	uxtb	r1, r1
   13220:	bl	11990 <__overflow@plt>
   13224:	b	12dcc <__assert_fail@plt+0x1340>
   13228:	mov	r1, r7
   1322c:	bl	11990 <__overflow@plt>
   13230:	b	1312c <__assert_fail@plt+0x16a0>
   13234:	mov	r1, #92	; 0x5c
   13238:	bl	11990 <__overflow@plt>
   1323c:	b	13084 <__assert_fail@plt+0x15f8>
   13240:	uxtb	r1, r2
   13244:	b	131f8 <__assert_fail@plt+0x176c>
   13248:	mov	r0, r4
   1324c:	bl	18ea0 <__assert_fail@plt+0x7414>
   13250:	movw	r0, #12672	; 0x3180
   13254:	ldr	r1, [r6]
   13258:	movt	r0, #3
   1325c:	ldr	r0, [r0]
   13260:	bl	11678 <fputs_unlocked@plt>
   13264:	and	r0, r9, #1
   13268:	sub	sp, fp, #28
   1326c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13270:	mov	r0, r4
   13274:	mov	r1, #0
   13278:	mov	r2, #5
   1327c:	strb	r5, [r0, r7]!
   13280:	strb	r1, [r0, #1]
   13284:	movw	r1, #7246	; 0x1c4e
   13288:	mov	r0, #0
   1328c:	movt	r1, #2
   13290:	bl	1172c <dcgettext@plt>
   13294:	mov	r5, r0
   13298:	mov	r0, r4
   1329c:	bl	1d62c <__assert_fail@plt+0xbba0>
   132a0:	mov	r3, r0
   132a4:	mov	r0, #1
   132a8:	mov	r1, #0
   132ac:	mov	r2, r5
   132b0:	bl	117e0 <error@plt>
   132b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132b8:	add	fp, sp, #28
   132bc:	sub	sp, sp, #20
   132c0:	mov	r6, r1
   132c4:	sub	r1, r3, #83	; 0x53
   132c8:	cmp	r1, #33	; 0x21
   132cc:	bhi	13480 <__assert_fail@plt+0x19f4>
   132d0:	mov	sl, r0
   132d4:	ldr	r0, [fp, #16]
   132d8:	add	r2, pc, #0
   132dc:	ldr	pc, [r2, r1, lsl #2]
   132e0:	andeq	r3, r1, r8, ror #6
   132e4:	andeq	r3, r1, r4, ror #7
   132e8:	andeq	r3, r1, r0, lsl #9
   132ec:	andeq	r3, r1, r0, lsl #9
   132f0:	andeq	r3, r1, r0, lsl #9
   132f4:	andeq	r3, r1, r0, lsl #9
   132f8:	andeq	r3, r1, r0, lsl #9
   132fc:	andeq	r3, r1, r0, lsl #9
   13300:	andeq	r3, r1, r0, lsl #9
   13304:	andeq	r3, r1, r0, lsl #9
   13308:	andeq	r3, r1, r0, lsl #9
   1330c:	andeq	r3, r1, r0, lsl #9
   13310:	andeq	r3, r1, r0, lsl #9
   13314:	andeq	r3, r1, r0, lsl #9
   13318:			; <UNDEFINED> instruction: 0x000134b8
   1331c:	andeq	r3, r1, r4, lsr r5
   13320:			; <UNDEFINED> instruction: 0x000135b0
   13324:	andeq	r3, r1, r4, lsr r6
   13328:	andeq	r3, r1, r0, lsl #9
   1332c:			; <UNDEFINED> instruction: 0x000136b8
   13330:	andeq	r3, r1, r0, lsl #9
   13334:	andeq	r3, r1, r0, lsl #9
   13338:	andeq	r3, r1, r4, lsr r7
   1333c:	andeq	r3, r1, r0, lsl #9
   13340:	andeq	r3, r1, r0, lsl #9
   13344:			; <UNDEFINED> instruction: 0x000137b0
   13348:	andeq	r3, r1, r0, lsl #9
   1334c:	andeq	r3, r1, r4, lsr #16
   13350:	andeq	r3, r1, r0, lsl #9
   13354:	andeq	r3, r1, r0, lsl #9
   13358:	andeq	r3, r1, r0, lsl #9
   1335c:	andeq	r3, r1, r0, lsl #9
   13360:	muleq	r1, r0, r8
   13364:	andeq	r3, r1, r4, lsl #18
   13368:	ldr	r8, [r0, #60]	; 0x3c
   1336c:	add	r4, sl, r6
   13370:	str	sl, [sp, #12]
   13374:	add	sl, sl, #1
   13378:	str	r6, [sp, #16]
   1337c:	cmp	r8, #0
   13380:	ldreq	r8, [r0, #4]
   13384:	cmp	r6, #2
   13388:	blt	13978 <__assert_fail@plt+0x1eec>
   1338c:	movw	r7, #8825	; 0x2279
   13390:	movw	r9, #7346	; 0x1cb2
   13394:	mov	r6, sl
   13398:	movt	r7, #2
   1339c:	movt	r9, #2
   133a0:	ldrb	r5, [r6]
   133a4:	mov	r0, r7
   133a8:	mov	r2, #8
   133ac:	mov	r1, r5
   133b0:	bl	11948 <memchr@plt>
   133b4:	cmp	r0, #0
   133b8:	beq	1397c <__assert_fail@plt+0x1ef0>
   133bc:	mov	r0, r9
   133c0:	mov	r1, r5
   133c4:	mov	r2, #4
   133c8:	bl	11948 <memchr@plt>
   133cc:	cmp	r0, #0
   133d0:	add	r6, r6, #1
   133d4:	strbne	r5, [sl], #1
   133d8:	cmp	r6, r4
   133dc:	bcc	133a0 <__assert_fail@plt+0x1914>
   133e0:	b	1397c <__assert_fail@plt+0x1ef0>
   133e4:	ldr	r0, [r0]
   133e8:	movw	r1, #4519	; 0x11a7
   133ec:	movt	r1, #305	; 0x131
   133f0:	cmp	r0, r1
   133f4:	bgt	139dc <__assert_fail@plt+0x1f50>
   133f8:	movw	r1, #16963	; 0x4243
   133fc:	cmp	r0, r1
   13400:	bgt	14054 <__assert_fail@plt+0x25c8>
   13404:	movw	r1, #19777	; 0x4d41
   13408:	movt	r1, #65363	; 0xff53
   1340c:	cmp	r0, r1
   13410:	bgt	14130 <__assert_fail@plt+0x26a4>
   13414:	movw	r1, #5519	; 0x158f
   13418:	movt	r1, #51031	; 0xc757
   1341c:	cmp	r0, r1
   13420:	ble	1427c <__assert_fail@plt+0x27f0>
   13424:	movw	r1, #57825	; 0xe1e1
   13428:	movt	r1, #57589	; 0xe0f5
   1342c:	cmp	r0, r1
   13430:	ble	144b0 <__assert_fail@plt+0x2a24>
   13434:	movw	r1, #65419	; 0xff8b
   13438:	movt	r1, #63868	; 0xf97c
   1343c:	cmp	r0, r1
   13440:	ble	148a4 <__assert_fail@plt+0x2e18>
   13444:	movw	r1, #65420	; 0xff8c
   13448:	movt	r1, #63868	; 0xf97c
   1344c:	cmp	r0, r1
   13450:	beq	14d6c <__assert_fail@plt+0x32e0>
   13454:	movw	r1, #59465	; 0xe849
   13458:	movt	r1, #63893	; 0xf995
   1345c:	cmp	r0, r1
   13460:	beq	14d78 <__assert_fail@plt+0x32ec>
   13464:	movw	r1, #19778	; 0x4d42
   13468:	movt	r1, #65107	; 0xfe53
   1346c:	cmp	r0, r1
   13470:	bne	15040 <__assert_fail@plt+0x35b4>
   13474:	movw	r0, #8244	; 0x2034
   13478:	movt	r0, #2
   1347c:	b	150b8 <__assert_fail@plt+0x362c>
   13480:	movw	r0, #12772	; 0x31e4
   13484:	movt	r0, #3
   13488:	ldr	r0, [r0]
   1348c:	ldr	r1, [r0, #20]
   13490:	ldr	r2, [r0, #24]
   13494:	cmp	r1, r2
   13498:	bcs	151c8 <__assert_fail@plt+0x373c>
   1349c:	add	r2, r1, #1
   134a0:	str	r2, [r0, #20]
   134a4:	mov	r0, #63	; 0x3f
   134a8:	strb	r0, [r1]
   134ac:	mov	r0, #0
   134b0:	sub	sp, fp, #28
   134b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134b8:	ldr	r1, [r0, #24]
   134bc:	ldr	r0, [r0, #28]
   134c0:	add	r4, sl, r6
   134c4:	add	r8, sl, #1
   134c8:	cmp	r6, #2
   134cc:	str	r6, [sp, #16]
   134d0:	str	r1, [sp, #8]
   134d4:	str	r0, [sp, #12]
   134d8:	blt	13a68 <__assert_fail@plt+0x1fdc>
   134dc:	movw	r6, #8825	; 0x2279
   134e0:	movw	r9, #7436	; 0x1d0c
   134e4:	mov	r7, r8
   134e8:	movt	r6, #2
   134ec:	movt	r9, #2
   134f0:	ldrb	r5, [r7]
   134f4:	mov	r0, r6
   134f8:	mov	r2, #8
   134fc:	mov	r1, r5
   13500:	bl	11948 <memchr@plt>
   13504:	cmp	r0, #0
   13508:	beq	13a6c <__assert_fail@plt+0x1fe0>
   1350c:	mov	r0, r9
   13510:	mov	r1, r5
   13514:	mov	r2, #6
   13518:	bl	11948 <memchr@plt>
   1351c:	cmp	r0, #0
   13520:	add	r7, r7, #1
   13524:	strbne	r5, [r8], #1
   13528:	cmp	r7, r4
   1352c:	bcc	134f0 <__assert_fail@plt+0x1a64>
   13530:	b	13a6c <__assert_fail@plt+0x1fe0>
   13534:	ldr	r1, [r0, #8]
   13538:	ldr	r0, [r0, #12]
   1353c:	add	r4, sl, r6
   13540:	add	r8, sl, #1
   13544:	cmp	r6, #2
   13548:	str	r6, [sp, #16]
   1354c:	str	r1, [sp, #8]
   13550:	str	r0, [sp, #12]
   13554:	blt	13ac8 <__assert_fail@plt+0x203c>
   13558:	movw	r6, #8825	; 0x2279
   1355c:	movw	r9, #7436	; 0x1d0c
   13560:	mov	r7, r8
   13564:	movt	r6, #2
   13568:	movt	r9, #2
   1356c:	ldrb	r5, [r7]
   13570:	mov	r0, r6
   13574:	mov	r2, #8
   13578:	mov	r1, r5
   1357c:	bl	11948 <memchr@plt>
   13580:	cmp	r0, #0
   13584:	beq	13acc <__assert_fail@plt+0x2040>
   13588:	mov	r0, r9
   1358c:	mov	r1, r5
   13590:	mov	r2, #6
   13594:	bl	11948 <memchr@plt>
   13598:	cmp	r0, #0
   1359c:	add	r7, r7, #1
   135a0:	strbne	r5, [r8], #1
   135a4:	cmp	r7, r4
   135a8:	bcc	1356c <__assert_fail@plt+0x1ae0>
   135ac:	b	13acc <__assert_fail@plt+0x2040>
   135b0:	ldr	r2, [r0, #32]
   135b4:	ldr	r0, [r0, #36]	; 0x24
   135b8:	mov	r1, r6
   135bc:	add	r7, sl, r6
   135c0:	mov	r6, sl
   135c4:	add	r8, sl, #1
   135c8:	cmp	r1, #2
   135cc:	str	r1, [sp, #16]
   135d0:	str	r2, [sp, #8]
   135d4:	str	r0, [sp, #12]
   135d8:	blt	13b28 <__assert_fail@plt+0x209c>
   135dc:	movw	sl, #8825	; 0x2279
   135e0:	movw	r9, #7346	; 0x1cb2
   135e4:	mov	r5, r8
   135e8:	movt	sl, #2
   135ec:	movt	r9, #2
   135f0:	ldrb	r4, [r5]
   135f4:	mov	r0, sl
   135f8:	mov	r2, #8
   135fc:	mov	r1, r4
   13600:	bl	11948 <memchr@plt>
   13604:	cmp	r0, #0
   13608:	beq	13b2c <__assert_fail@plt+0x20a0>
   1360c:	mov	r0, r9
   13610:	mov	r1, r4
   13614:	mov	r2, #4
   13618:	bl	11948 <memchr@plt>
   1361c:	cmp	r0, #0
   13620:	add	r5, r5, #1
   13624:	strbne	r4, [r8], #1
   13628:	cmp	r5, r7
   1362c:	bcc	135f0 <__assert_fail@plt+0x1b64>
   13630:	b	13b2c <__assert_fail@plt+0x20a0>
   13634:	ldr	r2, [r0, #40]	; 0x28
   13638:	ldr	r0, [r0, #44]	; 0x2c
   1363c:	mov	r1, r6
   13640:	add	r7, sl, r6
   13644:	mov	r6, sl
   13648:	add	r8, sl, #1
   1364c:	cmp	r1, #2
   13650:	str	r1, [sp, #16]
   13654:	str	r2, [sp, #8]
   13658:	str	r0, [sp, #12]
   1365c:	blt	13b8c <__assert_fail@plt+0x2100>
   13660:	movw	sl, #8825	; 0x2279
   13664:	movw	r9, #7436	; 0x1d0c
   13668:	mov	r5, r8
   1366c:	movt	sl, #2
   13670:	movt	r9, #2
   13674:	ldrb	r4, [r5]
   13678:	mov	r0, sl
   1367c:	mov	r2, #8
   13680:	mov	r1, r4
   13684:	bl	11948 <memchr@plt>
   13688:	cmp	r0, #0
   1368c:	beq	13b90 <__assert_fail@plt+0x2104>
   13690:	mov	r0, r9
   13694:	mov	r1, r4
   13698:	mov	r2, #6
   1369c:	bl	11948 <memchr@plt>
   136a0:	cmp	r0, #0
   136a4:	add	r5, r5, #1
   136a8:	strbne	r4, [r8], #1
   136ac:	cmp	r5, r7
   136b0:	bcc	13674 <__assert_fail@plt+0x1be8>
   136b4:	b	13b90 <__assert_fail@plt+0x2104>
   136b8:	ldr	r1, [r0, #16]
   136bc:	ldr	r0, [r0, #20]
   136c0:	add	r4, sl, r6
   136c4:	add	r8, sl, #1
   136c8:	cmp	r6, #2
   136cc:	str	r6, [sp, #16]
   136d0:	str	r1, [sp, #8]
   136d4:	str	r0, [sp, #12]
   136d8:	blt	13bf0 <__assert_fail@plt+0x2164>
   136dc:	movw	r6, #8825	; 0x2279
   136e0:	movw	r9, #7436	; 0x1d0c
   136e4:	mov	r7, r8
   136e8:	movt	r6, #2
   136ec:	movt	r9, #2
   136f0:	ldrb	r5, [r7]
   136f4:	mov	r0, r6
   136f8:	mov	r2, #8
   136fc:	mov	r1, r5
   13700:	bl	11948 <memchr@plt>
   13704:	cmp	r0, #0
   13708:	beq	13bf4 <__assert_fail@plt+0x2168>
   1370c:	mov	r0, r9
   13710:	mov	r1, r5
   13714:	mov	r2, #6
   13718:	bl	11948 <memchr@plt>
   1371c:	cmp	r0, #0
   13720:	add	r7, r7, #1
   13724:	strbne	r5, [r8], #1
   13728:	cmp	r7, r4
   1372c:	bcc	136f0 <__assert_fail@plt+0x1c64>
   13730:	b	13bf4 <__assert_fail@plt+0x2168>
   13734:	ldr	r1, [r0, #48]	; 0x30
   13738:	ldr	r0, [r0, #52]	; 0x34
   1373c:	add	r7, sl, r6
   13740:	add	r8, sl, #1
   13744:	cmp	r6, #2
   13748:	str	r6, [sp, #16]
   1374c:	str	r1, [sp, #12]
   13750:	str	r0, [sp, #8]
   13754:	blt	13c50 <__assert_fail@plt+0x21c4>
   13758:	movw	r6, #8825	; 0x2279
   1375c:	movw	r9, #7354	; 0x1cba
   13760:	mov	r4, r8
   13764:	movt	r6, #2
   13768:	movt	r9, #2
   1376c:	ldrb	r5, [r4]
   13770:	mov	r0, r6
   13774:	mov	r2, #8
   13778:	mov	r1, r5
   1377c:	bl	11948 <memchr@plt>
   13780:	cmp	r0, #0
   13784:	beq	13c54 <__assert_fail@plt+0x21c8>
   13788:	mov	r0, r9
   1378c:	mov	r1, r5
   13790:	mov	r2, #4
   13794:	bl	11948 <memchr@plt>
   13798:	cmp	r0, #0
   1379c:	add	r4, r4, #1
   137a0:	strbne	r5, [r8], #1
   137a4:	cmp	r4, r7
   137a8:	bcc	1376c <__assert_fail@plt+0x1ce0>
   137ac:	b	13c54 <__assert_fail@plt+0x21c8>
   137b0:	ldr	r0, [r0, #56]	; 0x38
   137b4:	add	r9, sl, r6
   137b8:	add	r8, sl, #1
   137bc:	cmp	r6, #2
   137c0:	str	r6, [sp, #16]
   137c4:	str	r0, [sp, #12]
   137c8:	blt	13cb0 <__assert_fail@plt+0x2224>
   137cc:	movw	r7, #8825	; 0x2279
   137d0:	movw	r4, #7346	; 0x1cb2
   137d4:	mov	r6, r8
   137d8:	movt	r7, #2
   137dc:	movt	r4, #2
   137e0:	ldrb	r5, [r6]
   137e4:	mov	r0, r7
   137e8:	mov	r2, #8
   137ec:	mov	r1, r5
   137f0:	bl	11948 <memchr@plt>
   137f4:	cmp	r0, #0
   137f8:	beq	13cb4 <__assert_fail@plt+0x2228>
   137fc:	mov	r0, r4
   13800:	mov	r1, r5
   13804:	mov	r2, #4
   13808:	bl	11948 <memchr@plt>
   1380c:	cmp	r0, #0
   13810:	add	r6, r6, #1
   13814:	strbne	r5, [r8], #1
   13818:	cmp	r6, r9
   1381c:	bcc	137e0 <__assert_fail@plt+0x1d54>
   13820:	b	13cb4 <__assert_fail@plt+0x2228>
   13824:	add	r4, sl, r6
   13828:	str	sl, [sp, #12]
   1382c:	add	sl, sl, #1
   13830:	cmp	r6, #2
   13834:	blt	13d10 <__assert_fail@plt+0x2284>
   13838:	movw	r9, #8825	; 0x2279
   1383c:	movw	r8, #9463	; 0x24f7
   13840:	mov	r7, sl
   13844:	movt	r9, #2
   13848:	movt	r8, #2
   1384c:	ldrb	r5, [r7]
   13850:	mov	r0, r9
   13854:	mov	r2, #8
   13858:	mov	r1, r5
   1385c:	bl	11948 <memchr@plt>
   13860:	cmp	r0, #0
   13864:	beq	13d14 <__assert_fail@plt+0x2288>
   13868:	mov	r0, r8
   1386c:	mov	r1, r5
   13870:	mov	r2, #2
   13874:	bl	11948 <memchr@plt>
   13878:	cmp	r0, #0
   1387c:	add	r7, r7, #1
   13880:	strbne	r5, [sl], #1
   13884:	cmp	r7, r4
   13888:	bcc	1384c <__assert_fail@plt+0x1dc0>
   1388c:	b	13d14 <__assert_fail@plt+0x2288>
   13890:	ldr	r0, [r0, #4]
   13894:	add	r4, sl, r6
   13898:	add	r8, sl, #1
   1389c:	cmp	r6, #2
   138a0:	str	r6, [sp, #16]
   138a4:	str	r0, [sp, #12]
   138a8:	blt	13d74 <__assert_fail@plt+0x22e8>
   138ac:	movw	r7, #8825	; 0x2279
   138b0:	movw	r9, #7346	; 0x1cb2
   138b4:	mov	r6, r8
   138b8:	movt	r7, #2
   138bc:	movt	r9, #2
   138c0:	ldrb	r5, [r6]
   138c4:	mov	r0, r7
   138c8:	mov	r2, #8
   138cc:	mov	r1, r5
   138d0:	bl	11948 <memchr@plt>
   138d4:	cmp	r0, #0
   138d8:	beq	13d78 <__assert_fail@plt+0x22ec>
   138dc:	mov	r0, r9
   138e0:	mov	r1, r5
   138e4:	mov	r2, #4
   138e8:	bl	11948 <memchr@plt>
   138ec:	cmp	r0, #0
   138f0:	add	r6, r6, #1
   138f4:	strbne	r5, [r8], #1
   138f8:	cmp	r6, r4
   138fc:	bcc	138c0 <__assert_fail@plt+0x1e34>
   13900:	b	13d78 <__assert_fail@plt+0x22ec>
   13904:	ldr	r0, [r0]
   13908:	add	r4, sl, r6
   1390c:	add	r8, sl, #1
   13910:	cmp	r6, #2
   13914:	str	r6, [sp, #16]
   13918:	str	r0, [sp, #12]
   1391c:	blt	13dd4 <__assert_fail@plt+0x2348>
   13920:	movw	r7, #8825	; 0x2279
   13924:	movw	r9, #7354	; 0x1cba
   13928:	mov	r6, r8
   1392c:	movt	r7, #2
   13930:	movt	r9, #2
   13934:	ldrb	r5, [r6]
   13938:	mov	r0, r7
   1393c:	mov	r2, #8
   13940:	mov	r1, r5
   13944:	bl	11948 <memchr@plt>
   13948:	cmp	r0, #0
   1394c:	beq	13dd8 <__assert_fail@plt+0x234c>
   13950:	mov	r0, r9
   13954:	mov	r1, r5
   13958:	mov	r2, #4
   1395c:	bl	11948 <memchr@plt>
   13960:	cmp	r0, #0
   13964:	add	r6, r6, #1
   13968:	strbne	r5, [r8], #1
   1396c:	cmp	r6, r4
   13970:	bcc	13934 <__assert_fail@plt+0x1ea8>
   13974:	b	13dd8 <__assert_fail@plt+0x234c>
   13978:	mov	r6, sl
   1397c:	cmp	r6, r4
   13980:	bcs	13e60 <__assert_fail@plt+0x23d4>
   13984:	ldr	r0, [sp, #16]
   13988:	ldr	r1, [sp, #12]
   1398c:	sub	r0, r0, r6
   13990:	add	r0, r1, r0
   13994:	cmp	r0, #16
   13998:	bcc	13e44 <__assert_fail@plt+0x23b8>
   1399c:	cmp	sl, r4
   139a0:	addcc	r1, sl, r0
   139a4:	cmpcc	r6, r1
   139a8:	bcc	13e44 <__assert_fail@plt+0x23b8>
   139ac:	bic	r7, r0, #15
   139b0:	mov	r5, sl
   139b4:	add	r2, r6, r7
   139b8:	add	r1, sl, r7
   139bc:	mov	r3, r7
   139c0:	vld1.8	{d16-d17}, [r6]!
   139c4:	subs	r3, r3, #16
   139c8:	vst1.8	{d16-d17}, [r5]!
   139cc:	bne	139c0 <__assert_fail@plt+0x1f34>
   139d0:	cmp	r7, r0
   139d4:	bne	13e4c <__assert_fail@plt+0x23c0>
   139d8:	b	13e5c <__assert_fail@plt+0x23d0>
   139dc:	movw	r1, #255	; 0xff
   139e0:	movt	r1, #21529	; 0x5419
   139e4:	cmp	r0, r1
   139e8:	bgt	140b4 <__assert_fail@plt+0x2628>
   139ec:	movw	r1, #17993	; 0x4649
   139f0:	movt	r1, #12627	; 0x3153
   139f4:	cmp	r0, r1
   139f8:	ble	14174 <__assert_fail@plt+0x26e8>
   139fc:	movw	r1, #18002	; 0x4652
   13a00:	movt	r1, #18256	; 0x4750
   13a04:	cmp	r0, r1
   13a08:	ble	142c8 <__assert_fail@plt+0x283c>
   13a0c:	movw	r1, #12620	; 0x314c
   13a10:	movt	r1, #21318	; 0x5346
   13a14:	cmp	r0, r1
   13a18:	ble	144ec <__assert_fail@plt+0x2a60>
   13a1c:	movw	r1, #18501	; 0x4845
   13a20:	movt	r1, #21318	; 0x5346
   13a24:	cmp	r0, r1
   13a28:	ble	148d0 <__assert_fail@plt+0x2e44>
   13a2c:	movw	r1, #18502	; 0x4846
   13a30:	movt	r1, #21318	; 0x5346
   13a34:	cmp	r0, r1
   13a38:	beq	14d84 <__assert_fail@plt+0x32f8>
   13a3c:	movw	r1, #21582	; 0x544e
   13a40:	movt	r1, #21318	; 0x5346
   13a44:	cmp	r0, r1
   13a48:	beq	14d90 <__assert_fail@plt+0x3304>
   13a4c:	movw	r1, #17227	; 0x434b
   13a50:	movt	r1, #21327	; 0x534f
   13a54:	cmp	r0, r1
   13a58:	bne	15040 <__assert_fail@plt+0x35b4>
   13a5c:	movw	r0, #8254	; 0x203e
   13a60:	movt	r0, #2
   13a64:	b	150b8 <__assert_fail@plt+0x362c>
   13a68:	mov	r7, r8
   13a6c:	cmp	r7, r4
   13a70:	bcs	13f38 <__assert_fail@plt+0x24ac>
   13a74:	ldr	r0, [sp, #16]
   13a78:	sub	r0, r0, r7
   13a7c:	add	r0, sl, r0
   13a80:	cmp	r0, #16
   13a84:	bcc	13e8c <__assert_fail@plt+0x2400>
   13a88:	cmp	r8, r4
   13a8c:	addcc	r1, r8, r0
   13a90:	cmpcc	r7, r1
   13a94:	bcc	13e8c <__assert_fail@plt+0x2400>
   13a98:	bic	r6, r0, #15
   13a9c:	mov	r5, r8
   13aa0:	add	r2, r7, r6
   13aa4:	add	r1, r8, r6
   13aa8:	mov	r3, r6
   13aac:	vld1.8	{d16-d17}, [r7]!
   13ab0:	subs	r3, r3, #16
   13ab4:	vst1.8	{d16-d17}, [r5]!
   13ab8:	bne	13aac <__assert_fail@plt+0x2020>
   13abc:	cmp	r6, r0
   13ac0:	bne	13e94 <__assert_fail@plt+0x2408>
   13ac4:	b	13f34 <__assert_fail@plt+0x24a8>
   13ac8:	mov	r7, r8
   13acc:	cmp	r7, r4
   13ad0:	bcs	13f38 <__assert_fail@plt+0x24ac>
   13ad4:	ldr	r0, [sp, #16]
   13ad8:	sub	r0, r0, r7
   13adc:	add	r0, sl, r0
   13ae0:	cmp	r0, #16
   13ae4:	bcc	13ea8 <__assert_fail@plt+0x241c>
   13ae8:	cmp	r8, r4
   13aec:	addcc	r1, r8, r0
   13af0:	cmpcc	r7, r1
   13af4:	bcc	13ea8 <__assert_fail@plt+0x241c>
   13af8:	bic	r6, r0, #15
   13afc:	mov	r5, r8
   13b00:	add	r2, r7, r6
   13b04:	add	r1, r8, r6
   13b08:	mov	r3, r6
   13b0c:	vld1.8	{d16-d17}, [r7]!
   13b10:	subs	r3, r3, #16
   13b14:	vst1.8	{d16-d17}, [r5]!
   13b18:	bne	13b0c <__assert_fail@plt+0x2080>
   13b1c:	cmp	r6, r0
   13b20:	bne	13eb0 <__assert_fail@plt+0x2424>
   13b24:	b	13f34 <__assert_fail@plt+0x24a8>
   13b28:	mov	r5, r8
   13b2c:	cmp	r5, r7
   13b30:	bcs	13e34 <__assert_fail@plt+0x23a8>
   13b34:	ldr	r0, [sp, #16]
   13b38:	mov	r1, r6
   13b3c:	sub	r0, r0, r5
   13b40:	add	r0, r6, r0
   13b44:	cmp	r0, #16
   13b48:	bcc	13ec4 <__assert_fail@plt+0x2438>
   13b4c:	cmp	r8, r7
   13b50:	addcc	r2, r8, r0
   13b54:	cmpcc	r5, r2
   13b58:	bcc	13ec4 <__assert_fail@plt+0x2438>
   13b5c:	bic	ip, r0, #15
   13b60:	mov	r6, r8
   13b64:	add	r2, r5, ip
   13b68:	add	r4, r8, ip
   13b6c:	mov	r3, ip
   13b70:	vld1.8	{d16-d17}, [r5]!
   13b74:	subs	r3, r3, #16
   13b78:	vst1.8	{d16-d17}, [r6]!
   13b7c:	bne	13b70 <__assert_fail@plt+0x20e4>
   13b80:	cmp	ip, r0
   13b84:	bne	13ecc <__assert_fail@plt+0x2440>
   13b88:	b	13edc <__assert_fail@plt+0x2450>
   13b8c:	mov	r5, r8
   13b90:	cmp	r5, r7
   13b94:	bcs	13e3c <__assert_fail@plt+0x23b0>
   13b98:	ldr	r0, [sp, #16]
   13b9c:	mov	r1, r6
   13ba0:	sub	r0, r0, r5
   13ba4:	add	r0, r6, r0
   13ba8:	cmp	r0, #16
   13bac:	bcc	13eec <__assert_fail@plt+0x2460>
   13bb0:	cmp	r8, r7
   13bb4:	addcc	r2, r8, r0
   13bb8:	cmpcc	r5, r2
   13bbc:	bcc	13eec <__assert_fail@plt+0x2460>
   13bc0:	bic	ip, r0, #15
   13bc4:	mov	r6, r8
   13bc8:	add	r2, r5, ip
   13bcc:	add	r4, r8, ip
   13bd0:	mov	r3, ip
   13bd4:	vld1.8	{d16-d17}, [r5]!
   13bd8:	subs	r3, r3, #16
   13bdc:	vst1.8	{d16-d17}, [r6]!
   13be0:	bne	13bd4 <__assert_fail@plt+0x2148>
   13be4:	cmp	ip, r0
   13be8:	bne	13ef4 <__assert_fail@plt+0x2468>
   13bec:	b	13f04 <__assert_fail@plt+0x2478>
   13bf0:	mov	r7, r8
   13bf4:	cmp	r7, r4
   13bf8:	bcs	13f38 <__assert_fail@plt+0x24ac>
   13bfc:	ldr	r0, [sp, #16]
   13c00:	sub	r0, r0, r7
   13c04:	add	r0, sl, r0
   13c08:	cmp	r0, #16
   13c0c:	bcc	13f1c <__assert_fail@plt+0x2490>
   13c10:	cmp	r8, r4
   13c14:	addcc	r1, r8, r0
   13c18:	cmpcc	r7, r1
   13c1c:	bcc	13f1c <__assert_fail@plt+0x2490>
   13c20:	bic	r6, r0, #15
   13c24:	mov	r5, r8
   13c28:	add	r2, r7, r6
   13c2c:	add	r1, r8, r6
   13c30:	mov	r3, r6
   13c34:	vld1.8	{d16-d17}, [r7]!
   13c38:	subs	r3, r3, #16
   13c3c:	vst1.8	{d16-d17}, [r5]!
   13c40:	bne	13c34 <__assert_fail@plt+0x21a8>
   13c44:	cmp	r6, r0
   13c48:	bne	13f24 <__assert_fail@plt+0x2498>
   13c4c:	b	13f34 <__assert_fail@plt+0x24a8>
   13c50:	mov	r4, r8
   13c54:	cmp	r4, r7
   13c58:	bcs	13f60 <__assert_fail@plt+0x24d4>
   13c5c:	ldr	r0, [sp, #16]
   13c60:	sub	r0, r0, r4
   13c64:	add	r0, sl, r0
   13c68:	cmp	r0, #16
   13c6c:	bcc	13f44 <__assert_fail@plt+0x24b8>
   13c70:	cmp	r8, r7
   13c74:	addcc	r1, r8, r0
   13c78:	cmpcc	r4, r1
   13c7c:	bcc	13f44 <__assert_fail@plt+0x24b8>
   13c80:	bic	r6, r0, #15
   13c84:	mov	r5, r8
   13c88:	add	r2, r4, r6
   13c8c:	add	r1, r8, r6
   13c90:	mov	r3, r6
   13c94:	vld1.8	{d16-d17}, [r4]!
   13c98:	subs	r3, r3, #16
   13c9c:	vst1.8	{d16-d17}, [r5]!
   13ca0:	bne	13c94 <__assert_fail@plt+0x2208>
   13ca4:	cmp	r6, r0
   13ca8:	bne	13f4c <__assert_fail@plt+0x24c0>
   13cac:	b	13f5c <__assert_fail@plt+0x24d0>
   13cb0:	mov	r6, r8
   13cb4:	cmp	r6, r9
   13cb8:	bcs	14000 <__assert_fail@plt+0x2574>
   13cbc:	ldr	r0, [sp, #16]
   13cc0:	sub	r0, r0, r6
   13cc4:	add	r0, sl, r0
   13cc8:	cmp	r0, #16
   13ccc:	bcc	13f8c <__assert_fail@plt+0x2500>
   13cd0:	cmp	r8, r9
   13cd4:	addcc	r1, r8, r0
   13cd8:	cmpcc	r6, r1
   13cdc:	bcc	13f8c <__assert_fail@plt+0x2500>
   13ce0:	bic	r7, r0, #15
   13ce4:	mov	r5, r8
   13ce8:	add	r2, r6, r7
   13cec:	add	r1, r8, r7
   13cf0:	mov	r3, r7
   13cf4:	vld1.8	{d16-d17}, [r6]!
   13cf8:	subs	r3, r3, #16
   13cfc:	vst1.8	{d16-d17}, [r5]!
   13d00:	bne	13cf4 <__assert_fail@plt+0x2268>
   13d04:	cmp	r7, r0
   13d08:	bne	13f94 <__assert_fail@plt+0x2508>
   13d0c:	b	13ffc <__assert_fail@plt+0x2570>
   13d10:	mov	r7, sl
   13d14:	ldr	r2, [fp, #12]
   13d18:	cmp	r7, r4
   13d1c:	bcs	13fc4 <__assert_fail@plt+0x2538>
   13d20:	ldr	r1, [sp, #12]
   13d24:	sub	r0, r6, r7
   13d28:	add	r0, r1, r0
   13d2c:	cmp	r0, #16
   13d30:	bcc	13fa8 <__assert_fail@plt+0x251c>
   13d34:	cmp	sl, r4
   13d38:	addcc	r1, sl, r0
   13d3c:	cmpcc	r7, r1
   13d40:	bcc	13fa8 <__assert_fail@plt+0x251c>
   13d44:	bic	ip, r0, #15
   13d48:	mov	r6, sl
   13d4c:	add	r3, r7, ip
   13d50:	add	r1, sl, ip
   13d54:	mov	r5, ip
   13d58:	vld1.8	{d16-d17}, [r7]!
   13d5c:	subs	r5, r5, #16
   13d60:	vst1.8	{d16-d17}, [r6]!
   13d64:	bne	13d58 <__assert_fail@plt+0x22cc>
   13d68:	cmp	ip, r0
   13d6c:	bne	13fb0 <__assert_fail@plt+0x2524>
   13d70:	b	13fc0 <__assert_fail@plt+0x2534>
   13d74:	mov	r6, r8
   13d78:	cmp	r6, r4
   13d7c:	bcs	14000 <__assert_fail@plt+0x2574>
   13d80:	ldr	r0, [sp, #16]
   13d84:	sub	r0, r0, r6
   13d88:	add	r0, sl, r0
   13d8c:	cmp	r0, #16
   13d90:	bcc	13fe4 <__assert_fail@plt+0x2558>
   13d94:	cmp	r8, r4
   13d98:	addcc	r1, r8, r0
   13d9c:	cmpcc	r6, r1
   13da0:	bcc	13fe4 <__assert_fail@plt+0x2558>
   13da4:	bic	r7, r0, #15
   13da8:	mov	r5, r8
   13dac:	add	r2, r6, r7
   13db0:	add	r1, r8, r7
   13db4:	mov	r3, r7
   13db8:	vld1.8	{d16-d17}, [r6]!
   13dbc:	subs	r3, r3, #16
   13dc0:	vst1.8	{d16-d17}, [r5]!
   13dc4:	bne	13db8 <__assert_fail@plt+0x232c>
   13dc8:	cmp	r7, r0
   13dcc:	bne	13fec <__assert_fail@plt+0x2560>
   13dd0:	b	13ffc <__assert_fail@plt+0x2570>
   13dd4:	mov	r6, r8
   13dd8:	cmp	r6, r4
   13ddc:	bcs	14028 <__assert_fail@plt+0x259c>
   13de0:	ldr	r0, [sp, #16]
   13de4:	sub	r0, r0, r6
   13de8:	add	r0, sl, r0
   13dec:	cmp	r0, #16
   13df0:	bcc	1400c <__assert_fail@plt+0x2580>
   13df4:	cmp	r8, r4
   13df8:	addcc	r1, r8, r0
   13dfc:	cmpcc	r6, r1
   13e00:	bcc	1400c <__assert_fail@plt+0x2580>
   13e04:	bic	r7, r0, #15
   13e08:	mov	r5, r8
   13e0c:	add	r2, r6, r7
   13e10:	add	r1, r8, r7
   13e14:	mov	r3, r7
   13e18:	vld1.8	{d16-d17}, [r6]!
   13e1c:	subs	r3, r3, #16
   13e20:	vst1.8	{d16-d17}, [r5]!
   13e24:	bne	13e18 <__assert_fail@plt+0x238c>
   13e28:	cmp	r7, r0
   13e2c:	bne	14014 <__assert_fail@plt+0x2588>
   13e30:	b	14024 <__assert_fail@plt+0x2598>
   13e34:	mov	r1, r6
   13e38:	b	13ee0 <__assert_fail@plt+0x2454>
   13e3c:	mov	r1, r6
   13e40:	b	13f08 <__assert_fail@plt+0x247c>
   13e44:	mov	r1, sl
   13e48:	mov	r2, r6
   13e4c:	ldrb	r3, [r2], #1
   13e50:	strb	r3, [r1], #1
   13e54:	cmp	r4, r2
   13e58:	bne	13e4c <__assert_fail@plt+0x23c0>
   13e5c:	add	sl, sl, r0
   13e60:	ldr	r1, [sp, #12]
   13e64:	movw	r0, #27756	; 0x6c6c
   13e68:	asr	r3, r8, #31
   13e6c:	mov	r2, r8
   13e70:	movt	r0, #117	; 0x75
   13e74:	str	r0, [sl]
   13e78:	mov	r0, #1
   13e7c:	bl	11924 <__printf_chk@plt>
   13e80:	mov	r0, #0
   13e84:	sub	sp, fp, #28
   13e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e8c:	mov	r1, r8
   13e90:	mov	r2, r7
   13e94:	ldrb	r3, [r2], #1
   13e98:	strb	r3, [r1], #1
   13e9c:	cmp	r4, r2
   13ea0:	bne	13e94 <__assert_fail@plt+0x2408>
   13ea4:	b	13f34 <__assert_fail@plt+0x24a8>
   13ea8:	mov	r1, r8
   13eac:	mov	r2, r7
   13eb0:	ldrb	r3, [r2], #1
   13eb4:	strb	r3, [r1], #1
   13eb8:	cmp	r4, r2
   13ebc:	bne	13eb0 <__assert_fail@plt+0x2424>
   13ec0:	b	13f34 <__assert_fail@plt+0x24a8>
   13ec4:	mov	r4, r8
   13ec8:	mov	r2, r5
   13ecc:	ldrb	r3, [r2], #1
   13ed0:	strb	r3, [r4], #1
   13ed4:	cmp	r7, r2
   13ed8:	bne	13ecc <__assert_fail@plt+0x2440>
   13edc:	add	r8, r8, r0
   13ee0:	movw	r0, #27756	; 0x6c6c
   13ee4:	movt	r0, #117	; 0x75
   13ee8:	b	13f10 <__assert_fail@plt+0x2484>
   13eec:	mov	r4, r8
   13ef0:	mov	r2, r5
   13ef4:	ldrb	r3, [r2], #1
   13ef8:	strb	r3, [r4], #1
   13efc:	cmp	r7, r2
   13f00:	bne	13ef4 <__assert_fail@plt+0x2468>
   13f04:	add	r8, r8, r0
   13f08:	movw	r0, #27756	; 0x6c6c
   13f0c:	movt	r0, #100	; 0x64
   13f10:	str	r0, [r8]
   13f14:	mov	r0, #1
   13f18:	b	13f74 <__assert_fail@plt+0x24e8>
   13f1c:	mov	r1, r8
   13f20:	mov	r2, r7
   13f24:	ldrb	r3, [r2], #1
   13f28:	strb	r3, [r1], #1
   13f2c:	cmp	r4, r2
   13f30:	bne	13f24 <__assert_fail@plt+0x2498>
   13f34:	add	r8, r8, r0
   13f38:	movw	r0, #27756	; 0x6c6c
   13f3c:	movt	r0, #100	; 0x64
   13f40:	b	13f68 <__assert_fail@plt+0x24dc>
   13f44:	mov	r1, r8
   13f48:	mov	r2, r4
   13f4c:	ldrb	r3, [r2], #1
   13f50:	strb	r3, [r1], #1
   13f54:	cmp	r7, r2
   13f58:	bne	13f4c <__assert_fail@plt+0x24c0>
   13f5c:	add	r8, r8, r0
   13f60:	movw	r0, #27756	; 0x6c6c
   13f64:	movt	r0, #120	; 0x78
   13f68:	str	r0, [r8]
   13f6c:	mov	r0, #1
   13f70:	mov	r1, sl
   13f74:	ldr	r2, [sp, #8]
   13f78:	ldr	r3, [sp, #12]
   13f7c:	bl	11924 <__printf_chk@plt>
   13f80:	mov	r0, #0
   13f84:	sub	sp, fp, #28
   13f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f8c:	mov	r1, r8
   13f90:	mov	r2, r6
   13f94:	ldrb	r3, [r2], #1
   13f98:	strb	r3, [r1], #1
   13f9c:	cmp	r9, r2
   13fa0:	bne	13f94 <__assert_fail@plt+0x2508>
   13fa4:	b	13ffc <__assert_fail@plt+0x2570>
   13fa8:	mov	r1, sl
   13fac:	mov	r3, r7
   13fb0:	ldrb	r7, [r3], #1
   13fb4:	strb	r7, [r1], #1
   13fb8:	cmp	r4, r3
   13fbc:	bne	13fb0 <__assert_fail@plt+0x2524>
   13fc0:	add	sl, sl, r0
   13fc4:	ldr	r1, [sp, #12]
   13fc8:	mov	r0, #115	; 0x73
   13fcc:	strh	r0, [sl]
   13fd0:	mov	r0, #1
   13fd4:	bl	11924 <__printf_chk@plt>
   13fd8:	mov	r0, #0
   13fdc:	sub	sp, fp, #28
   13fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fe4:	mov	r1, r8
   13fe8:	mov	r2, r6
   13fec:	ldrb	r3, [r2], #1
   13ff0:	strb	r3, [r1], #1
   13ff4:	cmp	r4, r2
   13ff8:	bne	13fec <__assert_fail@plt+0x2560>
   13ffc:	add	r8, r8, r0
   14000:	movw	r0, #27756	; 0x6c6c
   14004:	movt	r0, #117	; 0x75
   14008:	b	14030 <__assert_fail@plt+0x25a4>
   1400c:	mov	r1, r8
   14010:	mov	r2, r6
   14014:	ldrb	r3, [r2], #1
   14018:	strb	r3, [r1], #1
   1401c:	cmp	r4, r2
   14020:	bne	14014 <__assert_fail@plt+0x2588>
   14024:	add	r8, r8, r0
   14028:	movw	r0, #27756	; 0x6c6c
   1402c:	movt	r0, #120	; 0x78
   14030:	str	r0, [r8]
   14034:	mov	r0, #1
   14038:	mov	r1, sl
   1403c:	ldr	r2, [sp, #12]
   14040:	asr	r3, r2, #31
   14044:	bl	11924 <__printf_chk@plt>
   14048:	mov	r0, #0
   1404c:	sub	sp, fp, #28
   14050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14054:	movw	r1, #61264	; 0xef50
   14058:	cmp	r0, r1
   1405c:	bgt	141d0 <__assert_fail@plt+0x2744>
   14060:	movw	r1, #26984	; 0x6968
   14064:	cmp	r0, r1
   14068:	ble	14314 <__assert_fail@plt+0x2888>
   1406c:	movw	r1, #40863	; 0x9f9f
   14070:	cmp	r0, r1
   14074:	ble	14528 <__assert_fail@plt+0x2a9c>
   14078:	movw	r1, #40865	; 0x9fa1
   1407c:	cmp	r0, r1
   14080:	ble	148fc <__assert_fail@plt+0x2e70>
   14084:	movw	r1, #40866	; 0x9fa2
   14088:	cmp	r0, r1
   1408c:	beq	14d9c <__assert_fail@plt+0x3310>
   14090:	movw	r1, #44533	; 0xadf5
   14094:	cmp	r0, r1
   14098:	beq	14da8 <__assert_fail@plt+0x331c>
   1409c:	movw	r1, #44543	; 0xadff
   140a0:	cmp	r0, r1
   140a4:	bne	15040 <__assert_fail@plt+0x35b4>
   140a8:	movw	r0, #7585	; 0x1da1
   140ac:	movt	r0, #2
   140b0:	b	150b8 <__assert_fail@plt+0x362c>
   140b4:	movw	r1, #21826	; 0x5542
   140b8:	movt	r1, #25971	; 0x6573
   140bc:	cmp	r0, r1
   140c0:	ble	14220 <__assert_fail@plt+0x2794>
   140c4:	movw	r1, #26226	; 0x6672
   140c8:	movt	r1, #29539	; 0x7363
   140cc:	cmp	r0, r1
   140d0:	ble	14350 <__assert_fail@plt+0x28c4>
   140d4:	movw	r1, #25454	; 0x636e
   140d8:	movt	r1, #29793	; 0x7461
   140dc:	cmp	r0, r1
   140e0:	ble	14558 <__assert_fail@plt+0x2acc>
   140e4:	movw	r1, #16981	; 0x4255
   140e8:	movt	r1, #30831	; 0x786f
   140ec:	cmp	r0, r1
   140f0:	ble	14920 <__assert_fail@plt+0x2e94>
   140f4:	movw	r1, #16982	; 0x4256
   140f8:	movt	r1, #30831	; 0x786f
   140fc:	cmp	r0, r1
   14100:	beq	14db4 <__assert_fail@plt+0x3328>
   14104:	movw	r1, #30256	; 0x7630
   14108:	movt	r1, #31052	; 0x794c
   1410c:	cmp	r0, r1
   14110:	beq	14dc0 <__assert_fail@plt+0x3334>
   14114:	movw	r1, #26227	; 0x6673
   14118:	movt	r1, #31868	; 0x7c7c
   1411c:	cmp	r0, r1
   14120:	bne	15040 <__assert_fail@plt+0x35b4>
   14124:	movw	r0, #8133	; 0x1fc5
   14128:	movt	r0, #2
   1412c:	b	150b8 <__assert_fail@plt+0x362c>
   14130:	movw	r1, #7376	; 0x1cd0
   14134:	cmp	r0, r1
   14138:	bgt	14480 <__assert_fail@plt+0x29f4>
   1413c:	movw	r1, #390	; 0x186
   14140:	cmp	r0, r1
   14144:	bgt	14594 <__assert_fail@plt+0x2b08>
   14148:	movw	r1, #19778	; 0x4d42
   1414c:	movt	r1, #65363	; 0xff53
   14150:	cmp	r0, r1
   14154:	beq	14d1c <__assert_fail@plt+0x3290>
   14158:	cmp	r0, #47	; 0x2f
   1415c:	beq	14d28 <__assert_fail@plt+0x329c>
   14160:	cmp	r0, #51	; 0x33
   14164:	bne	15040 <__assert_fail@plt+0x35b4>
   14168:	movw	r0, #8372	; 0x20b4
   1416c:	movt	r0, #2
   14170:	b	150b8 <__assert_fail@plt+0x362c>
   14174:	movw	r1, #513	; 0x201
   14178:	movt	r1, #6528	; 0x1980
   1417c:	cmp	r0, r1
   14180:	bgt	1439c <__assert_fail@plt+0x2910>
   14184:	movw	r1, #3023	; 0xbcf
   14188:	movt	r1, #3024	; 0xbd0
   1418c:	cmp	r0, r1
   14190:	bgt	1462c <__assert_fail@plt+0x2ba0>
   14194:	movw	r1, #6451	; 0x1933
   14198:	movt	r1, #2308	; 0x904
   1419c:	cmp	r0, r1
   141a0:	bgt	1494c <__assert_fail@plt+0x2ec0>
   141a4:	movw	r1, #4520	; 0x11a8
   141a8:	movt	r1, #305	; 0x131
   141ac:	cmp	r0, r1
   141b0:	beq	14dcc <__assert_fail@plt+0x3340>
   141b4:	movw	r1, #22561	; 0x5821
   141b8:	movt	r1, #1893	; 0x765
   141bc:	cmp	r0, r1
   141c0:	bne	15040 <__assert_fail@plt+0x35b4>
   141c4:	movw	r0, #8164	; 0x1fe4
   141c8:	movt	r0, #2
   141cc:	b	150b8 <__assert_fail@plt+0x362c>
   141d0:	movw	r1, #6547	; 0x1993
   141d4:	movt	r1, #258	; 0x102
   141d8:	cmp	r0, r1
   141dc:	bgt	143e8 <__assert_fail@plt+0x295c>
   141e0:	movw	r1, #57578	; 0xe0ea
   141e4:	movt	r1, #39	; 0x27
   141e8:	cmp	r0, r1
   141ec:	bgt	14668 <__assert_fail@plt+0x2bdc>
   141f0:	movw	r1, #61790	; 0xf15e
   141f4:	cmp	r0, r1
   141f8:	bgt	14978 <__assert_fail@plt+0x2eec>
   141fc:	movw	r1, #61265	; 0xef51
   14200:	cmp	r0, r1
   14204:	beq	14dd8 <__assert_fail@plt+0x334c>
   14208:	movw	r1, #61267	; 0xef53
   1420c:	cmp	r0, r1
   14210:	bne	15040 <__assert_fail@plt+0x35b4>
   14214:	movw	r0, #7826	; 0x1e92
   14218:	movt	r0, #2
   1421c:	b	150b8 <__assert_fail@plt+0x362c>
   14220:	movw	r1, #26475	; 0x676b
   14224:	movt	r1, #24933	; 0x6165
   14228:	cmp	r0, r1
   1422c:	bgt	14434 <__assert_fail@plt+0x29a8>
   14230:	movw	r1, #27119	; 0x69ef
   14234:	movt	r1, #23100	; 0x5a3c
   14238:	cmp	r0, r1
   1423c:	bgt	146a4 <__assert_fail@plt+0x2c18>
   14240:	movw	r1, #22568	; 0x5828
   14244:	movt	r1, #22569	; 0x5829
   14248:	cmp	r0, r1
   1424c:	bgt	149a0 <__assert_fail@plt+0x2f14>
   14250:	movw	r1, #256	; 0x100
   14254:	movt	r1, #21529	; 0x5419
   14258:	cmp	r0, r1
   1425c:	beq	14994 <__assert_fail@plt+0x2f08>
   14260:	movw	r1, #18003	; 0x4653
   14264:	movt	r1, #22106	; 0x565a
   14268:	cmp	r0, r1
   1426c:	bne	15040 <__assert_fail@plt+0x35b4>
   14270:	movw	r0, #8345	; 0x2099
   14274:	movt	r0, #2
   14278:	b	150b8 <__assert_fail@plt+0x362c>
   1427c:	movw	r1, #43753	; 0xaae9
   14280:	movt	r1, #43735	; 0xaad7
   14284:	cmp	r0, r1
   14288:	bgt	146e0 <__assert_fail@plt+0x2c54>
   1428c:	movw	r1, #22773	; 0x58f5
   14290:	movt	r1, #38276	; 0x9584
   14294:	cmp	r0, r1
   14298:	bgt	149cc <__assert_fail@plt+0x2f40>
   1429c:	movw	r1, #22774	; 0x58f6
   142a0:	movt	r1, #34180	; 0x8584
   142a4:	cmp	r0, r1
   142a8:	beq	14de4 <__assert_fail@plt+0x3358>
   142ac:	movw	r1, #26686	; 0x683e
   142b0:	movt	r1, #37155	; 0x9123
   142b4:	cmp	r0, r1
   142b8:	bne	15040 <__assert_fail@plt+0x35b4>
   142bc:	movw	r0, #7664	; 0x1df0
   142c0:	movt	r0, #2
   142c4:	b	150b8 <__assert_fail@plt+0x362c>
   142c8:	movw	r1, #16705	; 0x4141
   142cc:	movt	r1, #17485	; 0x444d
   142d0:	cmp	r0, r1
   142d4:	bgt	1471c <__assert_fail@plt+0x2c90>
   142d8:	movw	r1, #20044	; 0x4e4c
   142dc:	movt	r1, #16969	; 0x4249
   142e0:	cmp	r0, r1
   142e4:	bgt	149f8 <__assert_fail@plt+0x2f6c>
   142e8:	movw	r1, #17994	; 0x464a
   142ec:	movt	r1, #12627	; 0x3153
   142f0:	cmp	r0, r1
   142f4:	beq	14df0 <__assert_fail@plt+0x3364>
   142f8:	movw	r1, #21297	; 0x5331
   142fc:	movt	r1, #16966	; 0x4246
   14300:	cmp	r0, r1
   14304:	bne	15040 <__assert_fail@plt+0x35b4>
   14308:	movw	r0, #7631	; 0x1dcf
   1430c:	movt	r0, #2
   14310:	b	150b8 <__assert_fail@plt+0x362c>
   14314:	movw	r1, #19801	; 0x4d59
   14318:	cmp	r0, r1
   1431c:	bgt	14758 <__assert_fail@plt+0x2ccc>
   14320:	movw	r1, #18519	; 0x4857
   14324:	cmp	r0, r1
   14328:	bgt	14a24 <__assert_fail@plt+0x2f98>
   1432c:	movw	r1, #16964	; 0x4244
   14330:	cmp	r0, r1
   14334:	beq	14dfc <__assert_fail@plt+0x3370>
   14338:	movw	r1, #18475	; 0x482b
   1433c:	cmp	r0, r1
   14340:	bne	15040 <__assert_fail@plt+0x35b4>
   14344:	movw	r0, #7890	; 0x1ed2
   14348:	movt	r0, #2
   1434c:	b	150b8 <__assert_fail@plt+0x362c>
   14350:	movw	r1, #18002	; 0x4652
   14354:	movt	r1, #27457	; 0x6b41
   14358:	cmp	r0, r1
   1435c:	bgt	14788 <__assert_fail@plt+0x2cfc>
   14360:	movw	r1, #26984	; 0x6968
   14364:	movt	r1, #26457	; 0x6759
   14368:	cmp	r0, r1
   1436c:	bgt	14a48 <__assert_fail@plt+0x2fbc>
   14370:	movw	r1, #21827	; 0x5543
   14374:	movt	r1, #25971	; 0x6573
   14378:	cmp	r0, r1
   1437c:	beq	14e08 <__assert_fail@plt+0x337c>
   14380:	movw	r1, #21830	; 0x5546
   14384:	movt	r1, #25971	; 0x6573
   14388:	cmp	r0, r1
   1438c:	bne	15040 <__assert_fail@plt+0x35b4>
   14390:	movw	r0, #7852	; 0x1eac
   14394:	movt	r0, #2
   14398:	b	150b8 <__assert_fail@plt+0x362c>
   1439c:	movw	r1, #6404	; 0x1904
   143a0:	movt	r1, #9221	; 0x2405
   143a4:	cmp	r0, r1
   143a8:	bgt	147c4 <__assert_fail@plt+0x2d38>
   143ac:	movw	r1, #64205	; 0xfacd
   143b0:	movt	r1, #7085	; 0x1bad
   143b4:	cmp	r0, r1
   143b8:	bgt	14a74 <__assert_fail@plt+0x2fe8>
   143bc:	movw	r1, #514	; 0x202
   143c0:	movt	r1, #6528	; 0x1980
   143c4:	cmp	r0, r1
   143c8:	beq	14e14 <__assert_fail@plt+0x3388>
   143cc:	movw	r1, #806	; 0x326
   143d0:	movt	r1, #6531	; 0x1983
   143d4:	cmp	r0, r1
   143d8:	bne	15040 <__assert_fail@plt+0x35b4>
   143dc:	movw	r0, #7846	; 0x1ea6
   143e0:	movt	r0, #2
   143e4:	b	150b8 <__assert_fail@plt+0x362c>
   143e8:	movw	r1, #53612	; 0xd16c
   143ec:	movt	r1, #303	; 0x12f
   143f0:	cmp	r0, r1
   143f4:	bgt	14800 <__assert_fail@plt+0x2d74>
   143f8:	movw	r1, #6548	; 0x1994
   143fc:	movt	r1, #258	; 0x102
   14400:	cmp	r0, r1
   14404:	beq	14d54 <__assert_fail@plt+0x32c8>
   14408:	movw	r1, #6551	; 0x1997
   1440c:	movt	r1, #258	; 0x102
   14410:	cmp	r0, r1
   14414:	beq	14d60 <__assert_fail@plt+0x32d4>
   14418:	movw	r1, #6512	; 0x1970
   1441c:	movt	r1, #278	; 0x116
   14420:	cmp	r0, r1
   14424:	bne	15040 <__assert_fail@plt+0x35b4>
   14428:	movw	r0, #7876	; 0x1ec4
   1442c:	movt	r0, #2
   14430:	b	150b8 <__assert_fail@plt+0x362c>
   14434:	movw	r1, #25969	; 0x6571
   14438:	movt	r1, #25189	; 0x6265
   1443c:	cmp	r0, r1
   14440:	bgt	14838 <__assert_fail@plt+0x2dac>
   14444:	movw	r1, #25973	; 0x6575
   14448:	movt	r1, #25188	; 0x6264
   1444c:	cmp	r0, r1
   14450:	bgt	14aa0 <__assert_fail@plt+0x3014>
   14454:	movw	r1, #26476	; 0x676c
   14458:	movt	r1, #24933	; 0x6165
   1445c:	cmp	r0, r1
   14460:	beq	14e20 <__assert_fail@plt+0x3394>
   14464:	movw	r1, #26227	; 0x6673
   14468:	movt	r1, #24949	; 0x6175
   1446c:	cmp	r0, r1
   14470:	bne	15040 <__assert_fail@plt+0x35b4>
   14474:	movw	r0, #7604	; 0x1db4
   14478:	movt	r0, #2
   1447c:	b	150b8 <__assert_fail@plt+0x362c>
   14480:	movw	r1, #13363	; 0x3433
   14484:	cmp	r0, r1
   14488:	ble	14874 <__assert_fail@plt+0x2de8>
   1448c:	movw	r1, #16387	; 0x4003
   14490:	cmp	r0, r1
   14494:	bgt	14acc <__assert_fail@plt+0x3040>
   14498:	movw	r1, #13364	; 0x3434
   1449c:	cmp	r0, r1
   144a0:	beq	14e2c <__assert_fail@plt+0x33a0>
   144a4:	cmp	r0, #16384	; 0x4000
   144a8:	beq	14b60 <__assert_fail@plt+0x30d4>
   144ac:	b	15040 <__assert_fail@plt+0x35b4>
   144b0:	movw	r1, #18960	; 0x4a10
   144b4:	movt	r1, #51966	; 0xcafe
   144b8:	cmp	r0, r1
   144bc:	bgt	14af0 <__assert_fail@plt+0x3064>
   144c0:	movw	r1, #5520	; 0x1590
   144c4:	movt	r1, #51031	; 0xc757
   144c8:	cmp	r0, r1
   144cc:	beq	14e38 <__assert_fail@plt+0x33ac>
   144d0:	movw	r1, #33128	; 0x8168
   144d4:	movt	r1, #51582	; 0xc97e
   144d8:	cmp	r0, r1
   144dc:	bne	15040 <__assert_fail@plt+0x35b4>
   144e0:	movw	r0, #7973	; 0x1f25
   144e4:	movt	r0, #2
   144e8:	b	150b8 <__assert_fail@plt+0x362c>
   144ec:	movw	r1, #18802	; 0x4972
   144f0:	movt	r1, #21093	; 0x5265
   144f4:	cmp	r0, r1
   144f8:	bgt	14b1c <__assert_fail@plt+0x3090>
   144fc:	movw	r1, #18003	; 0x4653
   14500:	movt	r1, #18256	; 0x4750
   14504:	cmp	r0, r1
   14508:	beq	14e44 <__assert_fail@plt+0x33b8>
   1450c:	movw	r1, #20549	; 0x5045
   14510:	movt	r1, #20553	; 0x5049
   14514:	cmp	r0, r1
   14518:	bne	15040 <__assert_fail@plt+0x35b4>
   1451c:	movw	r0, #8187	; 0x1ffb
   14520:	movt	r0, #2
   14524:	b	150b8 <__assert_fail@plt+0x362c>
   14528:	movw	r1, #29365	; 0x72b5
   1452c:	cmp	r0, r1
   14530:	bgt	14b48 <__assert_fail@plt+0x30bc>
   14534:	movw	r1, #26985	; 0x6969
   14538:	cmp	r0, r1
   1453c:	beq	14e50 <__assert_fail@plt+0x33c4>
   14540:	movw	r1, #29301	; 0x7275
   14544:	cmp	r0, r1
   14548:	bne	15040 <__assert_fail@plt+0x35b4>
   1454c:	movw	r0, #8177	; 0x1ff1
   14550:	movt	r0, #2
   14554:	b	150b8 <__assert_fail@plt+0x362c>
   14558:	movw	r1, #29304	; 0x7278
   1455c:	movt	r1, #29554	; 0x7372
   14560:	cmp	r0, r1
   14564:	bgt	14b6c <__assert_fail@plt+0x30e0>
   14568:	movw	r1, #26227	; 0x6673
   1456c:	movt	r1, #29539	; 0x7363
   14570:	cmp	r0, r1
   14574:	beq	14e5c <__assert_fail@plt+0x33d0>
   14578:	movw	r1, #29544	; 0x7368
   1457c:	movt	r1, #29553	; 0x7371
   14580:	cmp	r0, r1
   14584:	bne	15040 <__assert_fail@plt+0x35b4>
   14588:	movw	r0, #8261	; 0x2045
   1458c:	movt	r0, #2
   14590:	b	150b8 <__assert_fail@plt+0x362c>
   14594:	movw	r1, #4979	; 0x1373
   14598:	sub	r1, r0, r1
   1459c:	cmp	r1, #28
   145a0:	bhi	14d34 <__assert_fail@plt+0x32a8>
   145a4:	add	r2, pc, #0
   145a8:	ldr	pc, [r2, r1, lsl #2]
   145ac:	andeq	r4, r1, r0, lsr #12
   145b0:	andeq	r5, r1, r0, asr #32
   145b4:	andeq	r5, r1, r0, asr #32
   145b8:	andeq	r5, r1, r0, asr #32
   145bc:	andeq	r5, r1, r0, asr #32
   145c0:	andeq	r5, r1, r0, asr #32
   145c4:	andeq	r5, r1, r0, asr #32
   145c8:	andeq	r5, r1, r0, asr #32
   145cc:	andeq	r5, r1, r0, asr #32
   145d0:	andeq	r5, r1, r0, asr #32
   145d4:	andeq	r5, r1, ip, lsl #1
   145d8:	andeq	r5, r1, r0, asr #32
   145dc:	muleq	r1, r8, r0
   145e0:	andeq	r5, r1, r0, asr #32
   145e4:	andeq	r5, r1, r0, asr #32
   145e8:	andeq	r5, r1, r0, asr #32
   145ec:	andeq	r5, r1, r0, asr #32
   145f0:	andeq	r5, r1, r0, asr #32
   145f4:	andeq	r5, r1, r0, asr #32
   145f8:	andeq	r5, r1, r0, asr #32
   145fc:	andeq	r5, r1, r0, asr #32
   14600:	andeq	r5, r1, r0, asr #32
   14604:	andeq	r5, r1, r0, asr #32
   14608:	andeq	r5, r1, r0, asr #32
   1460c:	andeq	r5, r1, r0, asr #32
   14610:	andeq	r5, r1, r0, asr #32
   14614:	andeq	r5, r1, r0, asr #32
   14618:	andeq	r5, r1, r0, asr #32
   1461c:	andeq	r5, r1, r4, lsr #1
   14620:	movw	r0, #8315	; 0x207b
   14624:	movt	r0, #2
   14628:	b	150b8 <__assert_fail@plt+0x362c>
   1462c:	movw	r1, #4965	; 0x1365
   14630:	movt	r1, #4966	; 0x1366
   14634:	cmp	r0, r1
   14638:	bgt	14b98 <__assert_fail@plt+0x310c>
   1463c:	movw	r1, #3024	; 0xbd0
   14640:	movt	r1, #3024	; 0xbd0
   14644:	cmp	r0, r1
   14648:	beq	14e68 <__assert_fail@plt+0x33dc>
   1464c:	movw	r1, #30804	; 0x7854
   14650:	movt	r1, #4400	; 0x1130
   14654:	cmp	r0, r1
   14658:	bne	15040 <__assert_fail@plt+0x35b4>
   1465c:	movw	r0, #7922	; 0x1ef2
   14660:	movt	r0, #2
   14664:	b	150b8 <__assert_fail@plt+0x362c>
   14668:	movw	r1, #65517	; 0xffed
   1466c:	movt	r1, #192	; 0xc0
   14670:	cmp	r0, r1
   14674:	bgt	14bc4 <__assert_fail@plt+0x3138>
   14678:	movw	r1, #57579	; 0xe0eb
   1467c:	movt	r1, #39	; 0x27
   14680:	cmp	r0, r1
   14684:	beq	14e74 <__assert_fail@plt+0x33e8>
   14688:	movw	r1, #19027	; 0x4a53
   1468c:	movt	r1, #65	; 0x41
   14690:	cmp	r0, r1
   14694:	bne	15040 <__assert_fail@plt+0x35b4>
   14698:	movw	r0, #7632	; 0x1dd0
   1469c:	movt	r0, #2
   146a0:	b	150b8 <__assert_fail@plt+0x362c>
   146a4:	movw	r1, #11764	; 0x2df4
   146a8:	movt	r1, #24010	; 0x5dca
   146ac:	cmp	r0, r1
   146b0:	bgt	14bf0 <__assert_fail@plt+0x3164>
   146b4:	movw	r1, #27120	; 0x69f0
   146b8:	movt	r1, #23100	; 0x5a3c
   146bc:	cmp	r0, r1
   146c0:	beq	14e80 <__assert_fail@plt+0x33f4>
   146c4:	movw	r1, #18003	; 0x4653
   146c8:	movt	r1, #23119	; 0x5a4f
   146cc:	cmp	r0, r1
   146d0:	bne	15040 <__assert_fail@plt+0x35b4>
   146d4:	movw	r0, #8379	; 0x20bb
   146d8:	movt	r0, #2
   146dc:	b	150b8 <__assert_fail@plt+0x362c>
   146e0:	movw	r1, #44219	; 0xacbb
   146e4:	movt	r1, #47819	; 0xbacb
   146e8:	cmp	r0, r1
   146ec:	bgt	14c1c <__assert_fail@plt+0x3190>
   146f0:	movw	r1, #43754	; 0xaaea
   146f4:	movt	r1, #43735	; 0xaad7
   146f8:	cmp	r0, r1
   146fc:	beq	14e8c <__assert_fail@plt+0x3400>
   14700:	movw	r1, #6516	; 0x1974
   14704:	movt	r1, #43962	; 0xabba
   14708:	cmp	r0, r1
   1470c:	bne	15040 <__assert_fail@plt+0x35b4>
   14710:	movw	r0, #8356	; 0x20a4
   14714:	movt	r0, #2
   14718:	b	150b8 <__assert_fail@plt+0x362c>
   1471c:	movw	r1, #17484	; 0x444c
   14720:	movt	r1, #17741	; 0x454d
   14724:	cmp	r0, r1
   14728:	bgt	14c48 <__assert_fail@plt+0x31bc>
   1472c:	movw	r1, #16706	; 0x4142
   14730:	movt	r1, #17485	; 0x444d
   14734:	cmp	r0, r1
   14738:	beq	14e98 <__assert_fail@plt+0x340c>
   1473c:	movw	r1, #52520	; 0xcd28
   14740:	movt	r1, #17725	; 0x453d
   14744:	cmp	r0, r1
   14748:	bne	15040 <__assert_fail@plt+0x35b4>
   1474c:	movw	r0, #7735	; 0x1e37
   14750:	movt	r0, #2
   14754:	b	150b8 <__assert_fail@plt+0x362c>
   14758:	movw	r1, #22091	; 0x564b
   1475c:	cmp	r0, r1
   14760:	bgt	14c74 <__assert_fail@plt+0x31e8>
   14764:	movw	r1, #19802	; 0x4d5a
   14768:	cmp	r0, r1
   1476c:	beq	14ea4 <__assert_fail@plt+0x3418>
   14770:	movw	r1, #20859	; 0x517b
   14774:	cmp	r0, r1
   14778:	bne	15040 <__assert_fail@plt+0x35b4>
   1477c:	movw	r0, #8240	; 0x2030
   14780:	movt	r0, #2
   14784:	b	150b8 <__assert_fail@plt+0x362c>
   14788:	movw	r1, #29539	; 0x7363
   1478c:	movt	r1, #28262	; 0x6e66
   14790:	cmp	r0, r1
   14794:	bgt	14c98 <__assert_fail@plt+0x320c>
   14798:	movw	r1, #18003	; 0x4653
   1479c:	movt	r1, #27457	; 0x6b41
   147a0:	cmp	r0, r1
   147a4:	beq	14eb0 <__assert_fail@plt+0x3424>
   147a8:	movw	r1, #28528	; 0x6f70
   147ac:	movt	r1, #27759	; 0x6c6f
   147b0:	cmp	r0, r1
   147b4:	bne	15040 <__assert_fail@plt+0x35b4>
   147b8:	movw	r0, #7636	; 0x1dd4
   147bc:	movt	r0, #2
   147c0:	b	150b8 <__assert_fail@plt+0x362c>
   147c4:	movw	r1, #7657	; 0x1de9
   147c8:	movt	r1, #11181	; 0x2bad
   147cc:	cmp	r0, r1
   147d0:	bgt	14cc4 <__assert_fail@plt+0x3238>
   147d4:	movw	r1, #6405	; 0x1905
   147d8:	movt	r1, #9221	; 0x2405
   147dc:	cmp	r0, r1
   147e0:	beq	14ebc <__assert_fail@plt+0x3430>
   147e4:	movw	r1, #15685	; 0x3d45
   147e8:	movt	r1, #10445	; 0x28cd
   147ec:	cmp	r0, r1
   147f0:	bne	15040 <__assert_fail@plt+0x35b4>
   147f4:	movw	r0, #7728	; 0x1e30
   147f8:	movt	r0, #2
   147fc:	b	150b8 <__assert_fail@plt+0x362c>
   14800:	movw	r1, #2124	; 0x84c
   14804:	movt	r1, #65232	; 0xfed0
   14808:	add	r1, r0, r1
   1480c:	cmp	r1, #3
   14810:	bhi	15024 <__assert_fail@plt+0x3598>
   14814:	add	r0, pc, #0
   14818:	ldr	pc, [r0, r1, lsl #2]
   1481c:	andeq	r4, r1, ip, lsr #16
   14820:	andeq	r5, r1, r8, rrx
   14824:	andeq	r5, r1, r4, ror r0
   14828:	andeq	r5, r1, r0, lsl #1
   1482c:	movw	r0, #8362	; 0x20aa
   14830:	movt	r0, #2
   14834:	b	150b8 <__assert_fail@plt+0x362c>
   14838:	movw	r1, #26399	; 0x671f
   1483c:	movt	r1, #25698	; 0x6462
   14840:	cmp	r0, r1
   14844:	bgt	14cf0 <__assert_fail@plt+0x3264>
   14848:	movw	r1, #25970	; 0x6572
   1484c:	movt	r1, #25189	; 0x6265
   14850:	cmp	r0, r1
   14854:	beq	14ec8 <__assert_fail@plt+0x343c>
   14858:	movw	r1, #29296	; 0x7270
   1485c:	movt	r1, #25447	; 0x6367
   14860:	cmp	r0, r1
   14864:	bne	15040 <__assert_fail@plt+0x35b4>
   14868:	movw	r0, #7695	; 0x1e0f
   1486c:	movt	r0, #2
   14870:	b	150b8 <__assert_fail@plt+0x362c>
   14874:	movw	r1, #7377	; 0x1cd1
   14878:	cmp	r0, r1
   1487c:	beq	14ed4 <__assert_fail@plt+0x3448>
   14880:	movw	r1, #9320	; 0x2468
   14884:	cmp	r0, r1
   14888:	beq	14ee0 <__assert_fail@plt+0x3454>
   1488c:	movw	r1, #9336	; 0x2478
   14890:	cmp	r0, r1
   14894:	bne	15040 <__assert_fail@plt+0x35b4>
   14898:	movw	r0, #8023	; 0x1f57
   1489c:	movt	r0, #2
   148a0:	b	150b8 <__assert_fail@plt+0x362c>
   148a4:	movw	r1, #57826	; 0xe1e2
   148a8:	movt	r1, #57589	; 0xe0f5
   148ac:	cmp	r0, r1
   148b0:	beq	14eec <__assert_fail@plt+0x3460>
   148b4:	movw	r1, #8208	; 0x2010
   148b8:	movt	r1, #62197	; 0xf2f5
   148bc:	cmp	r0, r1
   148c0:	bne	15040 <__assert_fail@plt+0x35b4>
   148c4:	movw	r0, #7841	; 0x1ea1
   148c8:	movt	r0, #2
   148cc:	b	150b8 <__assert_fail@plt+0x362c>
   148d0:	movw	r1, #12621	; 0x314d
   148d4:	movt	r1, #21318	; 0x5346
   148d8:	cmp	r0, r1
   148dc:	beq	14ef8 <__assert_fail@plt+0x346c>
   148e0:	movw	r1, #16719	; 0x414f
   148e4:	movt	r1, #21318	; 0x5346
   148e8:	cmp	r0, r1
   148ec:	bne	15040 <__assert_fail@plt+0x35b4>
   148f0:	movw	r0, #7969	; 0x1f21
   148f4:	movt	r0, #2
   148f8:	b	150b8 <__assert_fail@plt+0x362c>
   148fc:	movw	r1, #40864	; 0x9fa0
   14900:	cmp	r0, r1
   14904:	beq	14f04 <__assert_fail@plt+0x3478>
   14908:	movw	r1, #40865	; 0x9fa1
   1490c:	cmp	r0, r1
   14910:	bne	15040 <__assert_fail@plt+0x35b4>
   14914:	movw	r0, #8091	; 0x1f9b
   14918:	movt	r0, #2
   1491c:	b	150b8 <__assert_fail@plt+0x362c>
   14920:	movw	r1, #25455	; 0x636f
   14924:	movt	r1, #29793	; 0x7461
   14928:	cmp	r0, r1
   1492c:	beq	14f10 <__assert_fail@plt+0x3484>
   14930:	movw	r1, #24931	; 0x6163
   14934:	movt	r1, #29810	; 0x7472
   14938:	cmp	r0, r1
   1493c:	bne	15040 <__assert_fail@plt+0x35b4>
   14940:	movw	r0, #8294	; 0x2066
   14944:	movt	r0, #2
   14948:	b	150b8 <__assert_fail@plt+0x362c>
   1494c:	movw	r1, #6452	; 0x1934
   14950:	movt	r1, #2308	; 0x904
   14954:	cmp	r0, r1
   14958:	beq	14f1c <__assert_fail@plt+0x3490>
   1495c:	movw	r1, #7658	; 0x1dea
   14960:	movt	r1, #2989	; 0xbad
   14964:	cmp	r0, r1
   14968:	bne	15040 <__assert_fail@plt+0x35b4>
   1496c:	movw	r0, #7868	; 0x1ebc
   14970:	movt	r0, #2
   14974:	b	150b8 <__assert_fail@plt+0x362c>
   14978:	movw	r1, #61791	; 0xf15f
   1497c:	cmp	r0, r1
   14980:	beq	14f28 <__assert_fail@plt+0x349c>
   14984:	movw	r1, #6484	; 0x1954
   14988:	movt	r1, #1
   1498c:	cmp	r0, r1
   14990:	bne	15040 <__assert_fail@plt+0x35b4>
   14994:	movw	r0, #7605	; 0x1db5
   14998:	movt	r0, #2
   1499c:	b	150b8 <__assert_fail@plt+0x362c>
   149a0:	movw	r1, #22569	; 0x5829
   149a4:	movt	r1, #22569	; 0x5829
   149a8:	cmp	r0, r1
   149ac:	beq	14f34 <__assert_fail@plt+0x34a8>
   149b0:	movw	r1, #21314	; 0x5342
   149b4:	movt	r1, #22598	; 0x5846
   149b8:	cmp	r0, r1
   149bc:	bne	15040 <__assert_fail@plt+0x35b4>
   149c0:	movw	r0, #7749	; 0x1e45
   149c4:	movt	r0, #2
   149c8:	b	150b8 <__assert_fail@plt+0x362c>
   149cc:	movw	r1, #22774	; 0x58f6
   149d0:	movt	r1, #38276	; 0x9584
   149d4:	cmp	r0, r1
   149d8:	beq	14f40 <__assert_fail@plt+0x34b4>
   149dc:	movw	r1, #64757	; 0xfcf5
   149e0:	movt	r1, #42241	; 0xa501
   149e4:	cmp	r0, r1
   149e8:	bne	15040 <__assert_fail@plt+0x35b4>
   149ec:	movw	r0, #8340	; 0x2094
   149f0:	movt	r0, #2
   149f4:	b	150b8 <__assert_fail@plt+0x362c>
   149f8:	movw	r1, #20045	; 0x4e4d
   149fc:	movt	r1, #16969	; 0x4249
   14a00:	cmp	r0, r1
   14a04:	beq	14f4c <__assert_fail@plt+0x34c0>
   14a08:	movw	r1, #23891	; 0x5d53
   14a0c:	movt	r1, #17217	; 0x4341
   14a10:	cmp	r0, r1
   14a14:	bne	15040 <__assert_fail@plt+0x35b4>
   14a18:	movw	r0, #8232	; 0x2028
   14a1c:	movt	r0, #2
   14a20:	b	150b8 <__assert_fail@plt+0x362c>
   14a24:	movw	r1, #18520	; 0x4858
   14a28:	cmp	r0, r1
   14a2c:	beq	14f58 <__assert_fail@plt+0x34cc>
   14a30:	movw	r1, #19780	; 0x4d44
   14a34:	cmp	r0, r1
   14a38:	bne	15040 <__assert_fail@plt+0x35b4>
   14a3c:	movw	r0, #8057	; 0x1f79
   14a40:	movt	r0, #2
   14a44:	b	150b8 <__assert_fail@plt+0x362c>
   14a48:	movw	r1, #26985	; 0x6969
   14a4c:	movt	r1, #26457	; 0x6759
   14a50:	cmp	r0, r1
   14a54:	beq	14f64 <__assert_fail@plt+0x34d8>
   14a58:	movw	r1, #4386	; 0x1122
   14a5c:	movt	r1, #26649	; 0x6819
   14a60:	cmp	r0, r1
   14a64:	bne	15040 <__assert_fail@plt+0x35b4>
   14a68:	movw	r0, #8159	; 0x1fdf
   14a6c:	movt	r0, #2
   14a70:	b	150b8 <__assert_fail@plt+0x362c>
   14a74:	movw	r1, #64206	; 0xface
   14a78:	movt	r1, #7085	; 0x1bad
   14a7c:	cmp	r0, r1
   14a80:	beq	14f70 <__assert_fail@plt+0x34e4>
   14a84:	movw	r1, #47792	; 0xbab0
   14a88:	movt	r1, #8209	; 0x2011
   14a8c:	cmp	r0, r1
   14a90:	bne	15040 <__assert_fail@plt+0x35b4>
   14a94:	movw	r0, #7810	; 0x1e82
   14a98:	movt	r0, #2
   14a9c:	b	150b8 <__assert_fail@plt+0x362c>
   14aa0:	movw	r1, #25974	; 0x6576
   14aa4:	movt	r1, #25188	; 0x6264
   14aa8:	cmp	r0, r1
   14aac:	beq	14f7c <__assert_fail@plt+0x34f0>
   14ab0:	movw	r1, #25968	; 0x6570
   14ab4:	movt	r1, #25189	; 0x6265
   14ab8:	cmp	r0, r1
   14abc:	bne	15040 <__assert_fail@plt+0x35b4>
   14ac0:	movw	r0, #7719	; 0x1e27
   14ac4:	movt	r0, #2
   14ac8:	b	150b8 <__assert_fail@plt+0x362c>
   14acc:	movw	r1, #16388	; 0x4004
   14ad0:	cmp	r0, r1
   14ad4:	beq	14b60 <__assert_fail@plt+0x30d4>
   14ad8:	movw	r1, #16390	; 0x4006
   14adc:	cmp	r0, r1
   14ae0:	bne	15040 <__assert_fail@plt+0x35b4>
   14ae4:	movw	r0, #7812	; 0x1e84
   14ae8:	movt	r0, #2
   14aec:	b	150b8 <__assert_fail@plt+0x362c>
   14af0:	movw	r1, #18961	; 0x4a11
   14af4:	movt	r1, #51966	; 0xcafe
   14af8:	cmp	r0, r1
   14afc:	beq	14f88 <__assert_fail@plt+0x34fc>
   14b00:	movw	r1, #33252	; 0x81e4
   14b04:	movt	r1, #56926	; 0xde5e
   14b08:	cmp	r0, r1
   14b0c:	bne	15040 <__assert_fail@plt+0x35b4>
   14b10:	movw	r0, #7795	; 0x1e73
   14b14:	movt	r0, #2
   14b18:	b	150b8 <__assert_fail@plt+0x362c>
   14b1c:	movw	r1, #18803	; 0x4973
   14b20:	movt	r1, #21093	; 0x5265
   14b24:	cmp	r0, r1
   14b28:	beq	14f94 <__assert_fail@plt+0x3508>
   14b2c:	movw	r1, #17229	; 0x434d
   14b30:	movt	r1, #21317	; 0x5345
   14b34:	cmp	r0, r1
   14b38:	bne	15040 <__assert_fail@plt+0x35b4>
   14b3c:	movw	r0, #8203	; 0x200b
   14b40:	movt	r0, #2
   14b44:	b	150b8 <__assert_fail@plt+0x362c>
   14b48:	movw	r1, #29366	; 0x72b6
   14b4c:	cmp	r0, r1
   14b50:	beq	14fa0 <__assert_fail@plt+0x3514>
   14b54:	movw	r1, #38496	; 0x9660
   14b58:	cmp	r0, r1
   14b5c:	bne	15040 <__assert_fail@plt+0x35b4>
   14b60:	movw	r0, #7946	; 0x1f0a
   14b64:	movt	r0, #2
   14b68:	b	150b8 <__assert_fail@plt+0x362c>
   14b6c:	movw	r1, #29305	; 0x7279
   14b70:	movt	r1, #29554	; 0x7372
   14b74:	cmp	r0, r1
   14b78:	beq	14fac <__assert_fail@plt+0x3520>
   14b7c:	movw	r1, #29253	; 0x7245
   14b80:	movt	r1, #29557	; 0x7375
   14b84:	cmp	r0, r1
   14b88:	bne	15040 <__assert_fail@plt+0x35b4>
   14b8c:	movw	r0, #7710	; 0x1e1e
   14b90:	movt	r0, #2
   14b94:	b	150b8 <__assert_fail@plt+0x362c>
   14b98:	movw	r1, #4966	; 0x1366
   14b9c:	movt	r1, #4966	; 0x1366
   14ba0:	cmp	r0, r1
   14ba4:	beq	14fb8 <__assert_fail@plt+0x352c>
   14ba8:	movw	r1, #13126	; 0x3346
   14bac:	movt	r1, #5377	; 0x1501
   14bb0:	cmp	r0, r1
   14bb4:	bne	15040 <__assert_fail@plt+0x35b4>
   14bb8:	movw	r0, #8308	; 0x2074
   14bbc:	movt	r0, #2
   14bc0:	b	150b8 <__assert_fail@plt+0x362c>
   14bc4:	movw	r1, #65518	; 0xffee
   14bc8:	movt	r1, #192	; 0xc0
   14bcc:	cmp	r0, r1
   14bd0:	beq	14fc4 <__assert_fail@plt+0x3538>
   14bd4:	movw	r1, #25600	; 0x6400
   14bd8:	movt	r1, #195	; 0xc3
   14bdc:	cmp	r0, r1
   14be0:	bne	15040 <__assert_fail@plt+0x35b4>
   14be4:	movw	r0, #7681	; 0x1e01
   14be8:	movt	r0, #2
   14bec:	b	150b8 <__assert_fail@plt+0x362c>
   14bf0:	movw	r1, #11765	; 0x2df5
   14bf4:	movt	r1, #24010	; 0x5dca
   14bf8:	cmp	r0, r1
   14bfc:	beq	14fd0 <__assert_fail@plt+0x3544>
   14c00:	movw	r1, #26227	; 0x6673
   14c04:	movt	r1, #24931	; 0x6163
   14c08:	cmp	r0, r1
   14c0c:	bne	15040 <__assert_fail@plt+0x35b4>
   14c10:	movw	r0, #7575	; 0x1d97
   14c14:	movt	r0, #2
   14c18:	b	150b8 <__assert_fail@plt+0x362c>
   14c1c:	movw	r1, #44220	; 0xacbc
   14c20:	movt	r1, #47819	; 0xbacb
   14c24:	cmp	r0, r1
   14c28:	beq	14fdc <__assert_fail@plt+0x3550>
   14c2c:	movw	r1, #57005	; 0xdead
   14c30:	movt	r1, #48879	; 0xbeef
   14c34:	cmp	r0, r1
   14c38:	bne	15040 <__assert_fail@plt+0x35b4>
   14c3c:	movw	r0, #8249	; 0x2039
   14c40:	movt	r0, #2
   14c44:	b	150b8 <__assert_fail@plt+0x362c>
   14c48:	movw	r1, #17485	; 0x444d
   14c4c:	movt	r1, #17741	; 0x454d
   14c50:	cmp	r0, r1
   14c54:	beq	14fe8 <__assert_fail@plt+0x355c>
   14c58:	movw	r1, #18003	; 0x4653
   14c5c:	movt	r1, #17752	; 0x4558
   14c60:	cmp	r0, r1
   14c64:	bne	15040 <__assert_fail@plt+0x35b4>
   14c68:	movw	r0, #7871	; 0x1ebf
   14c6c:	movt	r0, #2
   14c70:	b	150b8 <__assert_fail@plt+0x362c>
   14c74:	movw	r1, #22092	; 0x564c
   14c78:	cmp	r0, r1
   14c7c:	beq	14ff4 <__assert_fail@plt+0x3568>
   14c80:	movw	r1, #24053	; 0x5df5
   14c84:	cmp	r0, r1
   14c88:	bne	15040 <__assert_fail@plt+0x35b4>
   14c8c:	movw	r0, #7816	; 0x1e88
   14c90:	movt	r0, #2
   14c94:	b	150b8 <__assert_fail@plt+0x362c>
   14c98:	movw	r1, #29540	; 0x7364
   14c9c:	movt	r1, #28262	; 0x6e66
   14ca0:	cmp	r0, r1
   14ca4:	beq	15000 <__assert_fail@plt+0x3574>
   14ca8:	movw	r1, #26227	; 0x6673
   14cac:	movt	r1, #28275	; 0x6e73
   14cb0:	cmp	r0, r1
   14cb4:	bne	15040 <__assert_fail@plt+0x35b4>
   14cb8:	movw	r0, #8081	; 0x1f91
   14cbc:	movt	r0, #2
   14cc0:	b	150b8 <__assert_fail@plt+0x362c>
   14cc4:	movw	r1, #7658	; 0x1dea
   14cc8:	movt	r1, #11181	; 0x2bad
   14ccc:	cmp	r0, r1
   14cd0:	beq	1500c <__assert_fail@plt+0x3580>
   14cd4:	movw	r1, #12225	; 0x2fc1
   14cd8:	movt	r1, #12225	; 0x2fc1
   14cdc:	cmp	r0, r1
   14ce0:	bne	15040 <__assert_fail@plt+0x35b4>
   14ce4:	movw	r0, #8346	; 0x209a
   14ce8:	movt	r0, #2
   14cec:	b	150b8 <__assert_fail@plt+0x362c>
   14cf0:	movw	r1, #26400	; 0x6720
   14cf4:	movt	r1, #25698	; 0x6462
   14cf8:	cmp	r0, r1
   14cfc:	beq	15018 <__assert_fail@plt+0x358c>
   14d00:	movw	r1, #24952	; 0x6178
   14d04:	movt	r1, #25700	; 0x6464
   14d08:	cmp	r0, r1
   14d0c:	bne	15040 <__assert_fail@plt+0x35b4>
   14d10:	movw	r0, #7747	; 0x1e43
   14d14:	movt	r0, #2
   14d18:	b	150b8 <__assert_fail@plt+0x362c>
   14d1c:	movw	r0, #7705	; 0x1e19
   14d20:	movt	r0, #2
   14d24:	b	150b8 <__assert_fail@plt+0x362c>
   14d28:	movw	r0, #8154	; 0x1fda
   14d2c:	movt	r0, #2
   14d30:	b	150b8 <__assert_fail@plt+0x362c>
   14d34:	movw	r1, #391	; 0x187
   14d38:	cmp	r0, r1
   14d3c:	beq	150b0 <__assert_fail@plt+0x3624>
   14d40:	cmp	r0, #1984	; 0x7c0
   14d44:	bne	15040 <__assert_fail@plt+0x35b4>
   14d48:	movw	r0, #7952	; 0x1f10
   14d4c:	movt	r0, #2
   14d50:	b	150b8 <__assert_fail@plt+0x362c>
   14d54:	movw	r0, #8288	; 0x2060
   14d58:	movt	r0, #2
   14d5c:	b	150b8 <__assert_fail@plt+0x362c>
   14d60:	movw	r0, #8321	; 0x2081
   14d64:	movt	r0, #2
   14d68:	b	150b8 <__assert_fail@plt+0x362c>
   14d6c:	movw	r0, #8224	; 0x2020
   14d70:	movt	r0, #2
   14d74:	b	150b8 <__assert_fail@plt+0x362c>
   14d78:	movw	r0, #7907	; 0x1ee3
   14d7c:	movt	r0, #2
   14d80:	b	150b8 <__assert_fail@plt+0x362c>
   14d84:	movw	r0, #8350	; 0x209e
   14d88:	movt	r0, #2
   14d8c:	b	150b8 <__assert_fail@plt+0x362c>
   14d90:	movw	r0, #8086	; 0x1f96
   14d94:	movt	r0, #2
   14d98:	b	150b8 <__assert_fail@plt+0x362c>
   14d9c:	movw	r0, #8312	; 0x2078
   14da0:	movt	r0, #2
   14da4:	b	150b8 <__assert_fail@plt+0x362c>
   14da8:	movw	r0, #7580	; 0x1d9c
   14dac:	movt	r0, #2
   14db0:	b	150b8 <__assert_fail@plt+0x362c>
   14db4:	movw	r0, #8326	; 0x2086
   14db8:	movt	r0, #2
   14dbc:	b	150b8 <__assert_fail@plt+0x362c>
   14dc0:	movw	r0, #8106	; 0x1faa
   14dc4:	movt	r0, #2
   14dc8:	b	150b8 <__assert_fail@plt+0x362c>
   14dcc:	movw	r0, #7930	; 0x1efa
   14dd0:	movt	r0, #2
   14dd4:	b	150b8 <__assert_fail@plt+0x362c>
   14dd8:	movw	r0, #7836	; 0x1e9c
   14ddc:	movt	r0, #2
   14de0:	b	150b8 <__assert_fail@plt+0x362c>
   14de4:	movw	r0, #7729	; 0x1e31
   14de8:	movt	r0, #2
   14dec:	b	150b8 <__assert_fail@plt+0x362c>
   14df0:	movw	r0, #7963	; 0x1f1b
   14df4:	movt	r0, #2
   14df8:	b	150b8 <__assert_fail@plt+0x362c>
   14dfc:	movw	r0, #8266	; 0x204a
   14e00:	movt	r0, #2
   14e04:	b	150b8 <__assert_fail@plt+0x362c>
   14e08:	movw	r0, #7860	; 0x1eb4
   14e0c:	movt	r0, #2
   14e10:	b	150b8 <__assert_fail@plt+0x362c>
   14e14:	movw	r0, #8050	; 0x1f72
   14e18:	movt	r0, #2
   14e1c:	b	150b8 <__assert_fail@plt+0x362c>
   14e20:	movw	r0, #8145	; 0x1fd1
   14e24:	movt	r0, #2
   14e28:	b	150b8 <__assert_fail@plt+0x362c>
   14e2c:	movw	r0, #8075	; 0x1f8b
   14e30:	movt	r0, #2
   14e34:	b	150b8 <__assert_fail@plt+0x362c>
   14e38:	movw	r0, #8122	; 0x1fba
   14e3c:	movt	r0, #2
   14e40:	b	150b8 <__assert_fail@plt+0x362c>
   14e44:	movw	r0, #7885	; 0x1ecd
   14e48:	movt	r0, #2
   14e4c:	b	150b8 <__assert_fail@plt+0x362c>
   14e50:	movw	r0, #8118	; 0x1fb6
   14e54:	movt	r0, #2
   14e58:	b	150b8 <__assert_fail@plt+0x362c>
   14e5c:	movw	r0, #8213	; 0x2015
   14e60:	movt	r0, #2
   14e64:	b	150b8 <__assert_fail@plt+0x362c>
   14e68:	movw	r0, #7979	; 0x1f2b
   14e6c:	movt	r0, #2
   14e70:	b	150b8 <__assert_fail@plt+0x362c>
   14e74:	movw	r0, #7686	; 0x1e06
   14e78:	movt	r0, #2
   14e7c:	b	150b8 <__assert_fail@plt+0x362c>
   14e80:	movw	r0, #7570	; 0x1d92
   14e84:	movt	r0, #2
   14e88:	b	150b8 <__assert_fail@plt+0x362c>
   14e8c:	movw	r0, #8116	; 0x1fb4
   14e90:	movt	r0, #2
   14e94:	b	150b8 <__assert_fail@plt+0x362c>
   14e98:	movw	r0, #7775	; 0x1e5f
   14e9c:	movt	r0, #2
   14ea0:	b	150b8 <__assert_fail@plt+0x362c>
   14ea4:	movw	r0, #8043	; 0x1f6b
   14ea8:	movt	r0, #2
   14eac:	b	150b8 <__assert_fail@plt+0x362c>
   14eb0:	movw	r0, #7967	; 0x1f1f
   14eb4:	movt	r0, #2
   14eb8:	b	150b8 <__assert_fail@plt+0x362c>
   14ebc:	movw	r0, #8302	; 0x206e
   14ec0:	movt	r0, #2
   14ec4:	b	150b8 <__assert_fail@plt+0x362c>
   14ec8:	movw	r0, #8270	; 0x204e
   14ecc:	movt	r0, #2
   14ed0:	b	150b8 <__assert_fail@plt+0x362c>
   14ed4:	movw	r0, #7768	; 0x1e58
   14ed8:	movt	r0, #2
   14edc:	b	150b8 <__assert_fail@plt+0x362c>
   14ee0:	movw	r0, #8014	; 0x1f4e
   14ee4:	movt	r0, #2
   14ee8:	b	150b8 <__assert_fail@plt+0x362c>
   14eec:	movw	r0, #7804	; 0x1e7c
   14ef0:	movt	r0, #2
   14ef4:	b	150b8 <__assert_fail@plt+0x362c>
   14ef8:	movw	r0, #7986	; 0x1f32
   14efc:	movt	r0, #2
   14f00:	b	150b8 <__assert_fail@plt+0x362c>
   14f04:	movw	r0, #8140	; 0x1fcc
   14f08:	movt	r0, #2
   14f0c:	b	150b8 <__assert_fail@plt+0x362c>
   14f10:	movw	r0, #8100	; 0x1fa4
   14f14:	movt	r0, #2
   14f18:	b	150b8 <__assert_fail@plt+0x362c>
   14f1c:	movw	r0, #7590	; 0x1da6
   14f20:	movt	r0, #2
   14f24:	b	150b8 <__assert_fail@plt+0x362c>
   14f28:	movw	r0, #7786	; 0x1e6a
   14f2c:	movt	r0, #2
   14f30:	b	150b8 <__assert_fail@plt+0x362c>
   14f34:	movw	r0, #8386	; 0x20c2
   14f38:	movt	r0, #2
   14f3c:	b	150b8 <__assert_fail@plt+0x362c>
   14f40:	movw	r0, #7912	; 0x1ee8
   14f44:	movt	r0, #2
   14f48:	b	150b8 <__assert_fail@plt+0x362c>
   14f4c:	movw	r0, #7652	; 0x1de4
   14f50:	movt	r0, #2
   14f54:	b	150b8 <__assert_fail@plt+0x362c>
   14f58:	movw	r0, #7895	; 0x1ed7
   14f5c:	movt	r0, #2
   14f60:	b	150b8 <__assert_fail@plt+0x362c>
   14f64:	movw	r0, #8183	; 0x1ff7
   14f68:	movt	r0, #2
   14f6c:	b	150b8 <__assert_fail@plt+0x362c>
   14f70:	movw	r0, #7918	; 0x1eee
   14f74:	movt	r0, #2
   14f78:	b	150b8 <__assert_fail@plt+0x362c>
   14f7c:	movw	r0, #8314	; 0x207a
   14f80:	movt	r0, #2
   14f84:	b	150b8 <__assert_fail@plt+0x362c>
   14f88:	movw	r0, #7645	; 0x1ddd
   14f8c:	movt	r0, #2
   14f90:	b	150b8 <__assert_fail@plt+0x362c>
   14f94:	movw	r0, #8168	; 0x1fe8
   14f98:	movt	r0, #2
   14f9c:	b	150b8 <__assert_fail@plt+0x362c>
   14fa0:	movw	r0, #7957	; 0x1f15
   14fa4:	movt	r0, #2
   14fa8:	b	150b8 <__assert_fail@plt+0x362c>
   14fac:	movw	r0, #7670	; 0x1df6
   14fb0:	movt	r0, #2
   14fb4:	b	150b8 <__assert_fail@plt+0x362c>
   14fb8:	movw	r0, #7616	; 0x1dc0
   14fbc:	movt	r0, #2
   14fc0:	b	150b8 <__assert_fail@plt+0x362c>
   14fc4:	movw	r0, #7900	; 0x1edc
   14fc8:	movt	r0, #2
   14fcc:	b	150b8 <__assert_fail@plt+0x362c>
   14fd0:	movw	r0, #8194	; 0x2002
   14fd4:	movt	r0, #2
   14fd8:	b	150b8 <__assert_fail@plt+0x362c>
   14fdc:	movw	r0, #8333	; 0x208d
   14fe0:	movt	r0, #2
   14fe4:	b	150b8 <__assert_fail@plt+0x362c>
   14fe8:	movw	r0, #7761	; 0x1e51
   14fec:	movt	r0, #2
   14ff0:	b	150b8 <__assert_fail@plt+0x362c>
   14ff4:	movw	r0, #8063	; 0x1f7f
   14ff8:	movt	r0, #2
   14ffc:	b	150b8 <__assert_fail@plt+0x362c>
   15000:	movw	r0, #8070	; 0x1f86
   15004:	movt	r0, #2
   15008:	b	150b8 <__assert_fail@plt+0x362c>
   1500c:	movw	r0, #7936	; 0x1f00
   15010:	movt	r0, #2
   15014:	b	150b8 <__assert_fail@plt+0x362c>
   15018:	movw	r0, #7753	; 0x1e49
   1501c:	movt	r0, #2
   15020:	b	150b8 <__assert_fail@plt+0x362c>
   15024:	movw	r1, #53613	; 0xd16d
   15028:	movt	r1, #303	; 0x12f
   1502c:	cmp	r0, r1
   15030:	bne	15040 <__assert_fail@plt+0x35b4>
   15034:	movw	r0, #8368	; 0x20b0
   15038:	movt	r0, #2
   1503c:	b	150b8 <__assert_fail@plt+0x362c>
   15040:	movw	r3, #8397	; 0x20cd
   15044:	str	r0, [sp]
   15048:	movw	r0, #12784	; 0x31f0
   1504c:	mov	r1, #1
   15050:	mov	r2, #21
   15054:	movt	r0, #3
   15058:	movt	r3, #2
   1505c:	str	r0, [sp, #12]
   15060:	bl	118f4 <__sprintf_chk@plt>
   15064:	b	150bc <__assert_fail@plt+0x3630>
   15068:	movw	r0, #8282	; 0x205a
   1506c:	movt	r0, #2
   15070:	b	150b8 <__assert_fail@plt+0x362c>
   15074:	movw	r0, #8276	; 0x2054
   15078:	movt	r0, #2
   1507c:	b	150b8 <__assert_fail@plt+0x362c>
   15080:	movw	r0, #7715	; 0x1e23
   15084:	movt	r0, #2
   15088:	b	150b8 <__assert_fail@plt+0x362c>
   1508c:	movw	r0, #7822	; 0x1e8e
   15090:	movt	r0, #2
   15094:	b	150b8 <__assert_fail@plt+0x362c>
   15098:	movw	r0, #7991	; 0x1f37
   1509c:	movt	r0, #2
   150a0:	b	150b8 <__assert_fail@plt+0x362c>
   150a4:	movw	r0, #7997	; 0x1f3d
   150a8:	movt	r0, #2
   150ac:	b	150b8 <__assert_fail@plt+0x362c>
   150b0:	movw	r0, #7609	; 0x1db9
   150b4:	movt	r0, #2
   150b8:	str	r0, [sp, #12]
   150bc:	add	r4, sl, r6
   150c0:	add	r8, sl, #1
   150c4:	cmp	r6, #2
   150c8:	str	r6, [sp, #16]
   150cc:	blt	15128 <__assert_fail@plt+0x369c>
   150d0:	movw	r7, #8825	; 0x2279
   150d4:	movw	r9, #9463	; 0x24f7
   150d8:	mov	r6, r8
   150dc:	movt	r7, #2
   150e0:	movt	r9, #2
   150e4:	ldrb	r5, [r6]
   150e8:	mov	r0, r7
   150ec:	mov	r2, #8
   150f0:	mov	r1, r5
   150f4:	bl	11948 <memchr@plt>
   150f8:	cmp	r0, #0
   150fc:	beq	1512c <__assert_fail@plt+0x36a0>
   15100:	mov	r0, r9
   15104:	mov	r1, r5
   15108:	mov	r2, #2
   1510c:	bl	11948 <memchr@plt>
   15110:	cmp	r0, #0
   15114:	add	r6, r6, #1
   15118:	strbne	r5, [r8], #1
   1511c:	cmp	r6, r4
   15120:	bcc	150e4 <__assert_fail@plt+0x3658>
   15124:	b	1512c <__assert_fail@plt+0x36a0>
   15128:	mov	r6, r8
   1512c:	cmp	r6, r4
   15130:	bcs	151a4 <__assert_fail@plt+0x3718>
   15134:	ldr	r0, [sp, #16]
   15138:	sub	r0, r0, r6
   1513c:	add	r0, sl, r0
   15140:	cmp	r0, #16
   15144:	bcc	15188 <__assert_fail@plt+0x36fc>
   15148:	cmp	r8, r4
   1514c:	addcc	r1, r8, r0
   15150:	cmpcc	r6, r1
   15154:	bcc	15188 <__assert_fail@plt+0x36fc>
   15158:	bic	r7, r0, #15
   1515c:	mov	r5, r8
   15160:	add	r2, r6, r7
   15164:	add	r1, r8, r7
   15168:	mov	r3, r7
   1516c:	vld1.8	{d16-d17}, [r6]!
   15170:	subs	r3, r3, #16
   15174:	vst1.8	{d16-d17}, [r5]!
   15178:	bne	1516c <__assert_fail@plt+0x36e0>
   1517c:	cmp	r7, r0
   15180:	bne	15190 <__assert_fail@plt+0x3704>
   15184:	b	151a0 <__assert_fail@plt+0x3714>
   15188:	mov	r1, r8
   1518c:	mov	r2, r6
   15190:	ldrb	r3, [r2], #1
   15194:	strb	r3, [r1], #1
   15198:	cmp	r4, r2
   1519c:	bne	15190 <__assert_fail@plt+0x3704>
   151a0:	add	r8, r8, r0
   151a4:	ldr	r2, [sp, #12]
   151a8:	mov	r0, #115	; 0x73
   151ac:	mov	r1, sl
   151b0:	strh	r0, [r8]
   151b4:	mov	r0, #1
   151b8:	bl	11924 <__printf_chk@plt>
   151bc:	mov	r0, #0
   151c0:	sub	sp, fp, #28
   151c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151c8:	mov	r1, #63	; 0x3f
   151cc:	bl	11990 <__overflow@plt>
   151d0:	mov	r0, #0
   151d4:	sub	sp, fp, #28
   151d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151e0:	add	fp, sp, #28
   151e4:	sub	sp, sp, #20
   151e8:	mov	r6, r0
   151ec:	sub	r0, r3, #65	; 0x41
   151f0:	cmp	r0, #57	; 0x39
   151f4:	bhi	154f4 <__assert_fail@plt+0x3a68>
   151f8:	mov	r7, r1
   151fc:	ldr	r1, [fp, #16]
   15200:	ldr	r9, [fp, #12]
   15204:	ldm	r1, {r4, r5}
   15208:	ldr	r3, [r1, #8]
   1520c:	add	r1, pc, #0
   15210:	ldr	pc, [r1, r0, lsl #2]
   15214:	strdeq	r5, [r1], -ip
   15218:	andeq	r5, r1, ip, lsl #7
   1521c:	strdeq	r5, [r1], -ip
   15220:	andeq	r5, r1, r4, ror r4
   15224:	strdeq	r5, [r1], -r4
   15228:	andeq	r5, r1, r4, lsr #10
   1522c:	muleq	r1, ip, r5
   15230:	strdeq	r5, [r1], -r4
   15234:	strdeq	r5, [r1], -r4
   15238:	strdeq	r5, [r1], -r4
   1523c:	strdeq	r5, [r1], -r4
   15240:	strdeq	r5, [r1], -r4
   15244:	strdeq	r5, [r1], -r4
   15248:			; <UNDEFINED> instruction: 0x000155b4
   1524c:	strdeq	r5, [r1], -r4
   15250:	strdeq	r5, [r1], -r4
   15254:	strdeq	r5, [r1], -r4
   15258:	andeq	r5, r1, r4, lsr #13
   1525c:	strdeq	r5, [r1], -r4
   15260:	andeq	r5, r1, r4, lsr #14
   15264:	andeq	r5, r1, r4, lsr #15
   15268:	strdeq	r5, [r1], -r4
   1526c:			; <UNDEFINED> instruction: 0x000157bc
   15270:	andeq	r5, r1, r8, ror #15
   15274:	strdeq	r5, [r1], -r0
   15278:	strdeq	r5, [r1], -r8
   1527c:	strdeq	r5, [r1], -r4
   15280:	strdeq	r5, [r1], -r4
   15284:	strdeq	r5, [r1], -r4
   15288:	strdeq	r5, [r1], -r4
   1528c:	strdeq	r5, [r1], -r4
   15290:	strdeq	r5, [r1], -r4
   15294:	andeq	r5, r1, ip, lsl #16
   15298:	andeq	r5, r1, r0, lsl #17
   1529c:	strdeq	r5, [r1], -r4
   152a0:	andeq	r5, r1, r0, lsl #18
   152a4:	strdeq	r5, [r1], -r4
   152a8:	andeq	r5, r1, ip, lsl #19
   152ac:	andeq	r5, r1, r4, lsl #20
   152b0:	andeq	r5, r1, ip, ror sl
   152b4:	strdeq	r5, [r1], -r4
   152b8:	strdeq	r5, [r1], -r4
   152bc:	strdeq	r5, [r1], -r4
   152c0:	strdeq	r5, [r1], -r4
   152c4:	andeq	r5, r1, r4, ror fp
   152c8:	andeq	r5, r1, ip, asr #23
   152cc:	andeq	r5, r1, r0, asr #24
   152d0:	strdeq	r5, [r1], -r4
   152d4:	strdeq	r5, [r1], -r4
   152d8:	andeq	r5, r1, ip, ror #25
   152dc:	andeq	r5, r1, r8, ror sp
   152e0:	strdeq	r5, [r1], -r8
   152e4:	andeq	r5, r1, r8, ror lr
   152e8:	strdeq	r5, [r1], -r4
   152ec:	strdeq	r5, [r1], -r0
   152f0:	andeq	r5, r1, r4, ror pc
   152f4:	andeq	r5, r1, ip, ror #31
   152f8:	andeq	r6, r1, r4, rrx
   152fc:	movw	r5, #12808	; 0x3208
   15300:	mov	r0, r4
   15304:	movt	r5, #3
   15308:	add	r1, r5, #24
   1530c:	str	r1, [sp, #4]
   15310:	bl	18e98 <__assert_fail@plt+0x740c>
   15314:	mov	r0, #0
   15318:	mov	r4, r6
   1531c:	add	r8, r6, #1
   15320:	cmp	r7, #2
   15324:	str	r7, [sp, #12]
   15328:	strb	r0, [r5, #34]	; 0x22
   1532c:	add	r5, r6, r7
   15330:	blt	160dc <__assert_fail@plt+0x4650>
   15334:	movw	sl, #8825	; 0x2279
   15338:	movw	r9, #9463	; 0x24f7
   1533c:	mov	r6, r8
   15340:	movt	sl, #2
   15344:	movt	r9, #2
   15348:	ldrb	r7, [r6]
   1534c:	mov	r0, sl
   15350:	mov	r2, #8
   15354:	mov	r1, r7
   15358:	bl	11948 <memchr@plt>
   1535c:	cmp	r0, #0
   15360:	beq	160e0 <__assert_fail@plt+0x4654>
   15364:	mov	r0, r9
   15368:	mov	r1, r7
   1536c:	mov	r2, #2
   15370:	bl	11948 <memchr@plt>
   15374:	cmp	r0, #0
   15378:	add	r6, r6, #1
   1537c:	strbne	r7, [r8], #1
   15380:	cmp	r6, r5
   15384:	bcc	15348 <__assert_fail@plt+0x38bc>
   15388:	b	160e0 <__assert_fail@plt+0x4654>
   1538c:	add	r5, r6, r7
   15390:	mov	r4, r6
   15394:	add	sl, r6, #1
   15398:	cmp	r7, #2
   1539c:	str	r7, [sp, #12]
   153a0:	blt	16140 <__assert_fail@plt+0x46b4>
   153a4:	movw	r9, #8825	; 0x2279
   153a8:	movw	r8, #7346	; 0x1cb2
   153ac:	mov	r7, sl
   153b0:	movt	r9, #2
   153b4:	movt	r8, #2
   153b8:	ldrb	r6, [r7]
   153bc:	mov	r0, r9
   153c0:	mov	r2, #8
   153c4:	mov	r1, r6
   153c8:	bl	11948 <memchr@plt>
   153cc:	cmp	r0, #0
   153d0:	beq	16144 <__assert_fail@plt+0x46b8>
   153d4:	mov	r0, r8
   153d8:	mov	r1, r6
   153dc:	mov	r2, #4
   153e0:	bl	11948 <memchr@plt>
   153e4:	cmp	r0, #0
   153e8:	add	r7, r7, #1
   153ec:	strbne	r6, [sl], #1
   153f0:	cmp	r7, r5
   153f4:	bcc	153b8 <__assert_fail@plt+0x392c>
   153f8:	b	16144 <__assert_fail@plt+0x46b8>
   153fc:	movw	r0, #12808	; 0x3208
   15400:	add	r1, sp, #16
   15404:	movt	r0, #3
   15408:	ldrb	r0, [r0, #1]
   1540c:	cmp	r0, #1
   15410:	bne	161a4 <__assert_fail@plt+0x4718>
   15414:	mov	r0, r9
   15418:	bl	1d6e4 <__assert_fail@plt+0xbc58>
   1541c:	cmp	r0, #0
   15420:	bge	161b4 <__assert_fail@plt+0x4728>
   15424:	bl	118e8 <__errno_location@plt>
   15428:	ldr	r8, [r0]
   1542c:	movw	r1, #7498	; 0x1d4a
   15430:	mov	r0, #0
   15434:	mov	r2, #5
   15438:	mov	r4, #0
   1543c:	movt	r1, #2
   15440:	bl	1172c <dcgettext@plt>
   15444:	mov	r5, r0
   15448:	mov	r0, #4
   1544c:	mov	r1, r9
   15450:	bl	1d104 <__assert_fail@plt+0xb678>
   15454:	mov	r3, r0
   15458:	mov	r0, #0
   1545c:	mov	r1, r8
   15460:	mov	r2, r5
   15464:	bl	117e0 <error@plt>
   15468:	mov	r9, #1
   1546c:	str	r4, [sp, #16]
   15470:	b	161bc <__assert_fail@plt+0x4730>
   15474:	ldr	r1, [r4]
   15478:	ldr	r0, [r4, #4]
   1547c:	add	r5, r6, r7
   15480:	mov	r8, r6
   15484:	add	sl, r6, #1
   15488:	cmp	r7, #2
   1548c:	str	r7, [sp, #12]
   15490:	str	r1, [sp]
   15494:	str	r0, [sp, #4]
   15498:	blt	16200 <__assert_fail@plt+0x4774>
   1549c:	movw	r4, #8825	; 0x2279
   154a0:	movw	r9, #7354	; 0x1cba
   154a4:	mov	r7, sl
   154a8:	movt	r4, #2
   154ac:	movt	r9, #2
   154b0:	ldrb	r6, [r7]
   154b4:	mov	r0, r4
   154b8:	mov	r2, #8
   154bc:	mov	r1, r6
   154c0:	bl	11948 <memchr@plt>
   154c4:	cmp	r0, #0
   154c8:	beq	16204 <__assert_fail@plt+0x4778>
   154cc:	mov	r0, r9
   154d0:	mov	r1, r6
   154d4:	mov	r2, #4
   154d8:	bl	11948 <memchr@plt>
   154dc:	cmp	r0, #0
   154e0:	add	r7, r7, #1
   154e4:	strbne	r6, [sl], #1
   154e8:	cmp	r7, r5
   154ec:	bcc	154b0 <__assert_fail@plt+0x3a24>
   154f0:	b	16204 <__assert_fail@plt+0x4778>
   154f4:	movw	r0, #12772	; 0x31e4
   154f8:	movt	r0, #3
   154fc:	ldr	r0, [r0]
   15500:	ldr	r1, [r0, #20]
   15504:	ldr	r2, [r0, #24]
   15508:	cmp	r1, r2
   1550c:	bcs	17900 <__assert_fail@plt+0x5e74>
   15510:	add	r2, r1, #1
   15514:	str	r2, [r0, #20]
   15518:	mov	r0, #63	; 0x3f
   1551c:	strb	r0, [r1]
   15520:	b	1734c <__assert_fail@plt+0x58c0>
   15524:	mov	r0, r4
   15528:	add	r9, r6, r7
   1552c:	bl	18c44 <__assert_fail@plt+0x71b8>
   15530:	stmib	sp, {r0, r6}
   15534:	add	r8, r6, #1
   15538:	mov	r6, r7
   1553c:	cmp	r7, #2
   15540:	blt	16260 <__assert_fail@plt+0x47d4>
   15544:	movw	sl, #8825	; 0x2279
   15548:	movw	r5, #9463	; 0x24f7
   1554c:	mov	r4, r8
   15550:	movt	sl, #2
   15554:	movt	r5, #2
   15558:	ldrb	r7, [r4]
   1555c:	mov	r0, sl
   15560:	mov	r2, #8
   15564:	mov	r1, r7
   15568:	bl	11948 <memchr@plt>
   1556c:	cmp	r0, #0
   15570:	beq	16264 <__assert_fail@plt+0x47d8>
   15574:	mov	r0, r5
   15578:	mov	r1, r7
   1557c:	mov	r2, #2
   15580:	bl	11948 <memchr@plt>
   15584:	cmp	r0, #0
   15588:	add	r4, r4, #1
   1558c:	strbne	r7, [r8], #1
   15590:	cmp	r4, r9
   15594:	bcc	15558 <__assert_fail@plt+0x3acc>
   15598:	b	16264 <__assert_fail@plt+0x47d8>
   1559c:	ldr	r0, [r4, #28]
   155a0:	bl	11a74 <getgrgid@plt>
   155a4:	cmp	r0, #0
   155a8:	beq	16a50 <__assert_fail@plt+0x4fc4>
   155ac:	ldr	r0, [r0]
   155b0:	b	16a58 <__assert_fail@plt+0x4fcc>
   155b4:	mov	r0, #0
   155b8:	bl	1b7b0 <__assert_fail@plt+0x9d24>
   155bc:	mov	r1, r9
   155c0:	bl	1d104 <__assert_fail@plt+0xb678>
   155c4:	str	r0, [sp]
   155c8:	add	r0, r6, #1
   155cc:	add	r8, r6, r7
   155d0:	str	r7, [sp, #12]
   155d4:	cmp	r7, #2
   155d8:	str	r6, [sp, #8]
   155dc:	mov	r9, r0
   155e0:	mov	r7, r0
   155e4:	str	r0, [sp, #4]
   155e8:	blt	15644 <__assert_fail@plt+0x3bb8>
   155ec:	ldr	r9, [sp, #4]
   155f0:	movw	r5, #8825	; 0x2279
   155f4:	movw	r6, #9463	; 0x24f7
   155f8:	movt	r5, #2
   155fc:	movt	r6, #2
   15600:	mov	r7, r9
   15604:	ldrb	sl, [r9]
   15608:	mov	r0, r5
   1560c:	mov	r2, #8
   15610:	mov	r1, sl
   15614:	bl	11948 <memchr@plt>
   15618:	cmp	r0, #0
   1561c:	beq	15644 <__assert_fail@plt+0x3bb8>
   15620:	mov	r0, r6
   15624:	mov	r1, sl
   15628:	mov	r2, #2
   1562c:	bl	11948 <memchr@plt>
   15630:	cmp	r0, #0
   15634:	add	r9, r9, #1
   15638:	strbne	sl, [r7], #1
   1563c:	cmp	r9, r8
   15640:	bcc	15604 <__assert_fail@plt+0x3b78>
   15644:	cmp	r9, r8
   15648:	bcs	16b48 <__assert_fail@plt+0x50bc>
   1564c:	ldr	r0, [sp, #12]
   15650:	ldr	r1, [sp, #8]
   15654:	sub	r0, r0, r9
   15658:	add	r0, r1, r0
   1565c:	cmp	r0, #16
   15660:	bcc	16b2c <__assert_fail@plt+0x50a0>
   15664:	cmp	r7, r8
   15668:	addcc	r1, r7, r0
   1566c:	cmpcc	r9, r1
   15670:	bcc	16b2c <__assert_fail@plt+0x50a0>
   15674:	bic	r5, r0, #15
   15678:	mov	r6, r7
   1567c:	add	r2, r9, r5
   15680:	add	r1, r7, r5
   15684:	mov	r3, r5
   15688:	vld1.8	{d16-d17}, [r9]!
   1568c:	subs	r3, r3, #16
   15690:	vst1.8	{d16-d17}, [r6]!
   15694:	bne	15688 <__assert_fail@plt+0x3bfc>
   15698:	cmp	r5, r0
   1569c:	bne	16b34 <__assert_fail@plt+0x50a8>
   156a0:	b	16b44 <__assert_fail@plt+0x50b8>
   156a4:	ldr	r1, [r4, #32]
   156a8:	ldr	r0, [r4, #36]	; 0x24
   156ac:	add	r5, r6, r7
   156b0:	mov	r8, r6
   156b4:	add	sl, r6, #1
   156b8:	cmp	r7, #2
   156bc:	str	r7, [sp, #12]
   156c0:	str	r1, [sp]
   156c4:	str	r0, [sp, #4]
   156c8:	blt	162c0 <__assert_fail@plt+0x4834>
   156cc:	movw	r4, #8825	; 0x2279
   156d0:	movw	r9, #7354	; 0x1cba
   156d4:	mov	r7, sl
   156d8:	movt	r4, #2
   156dc:	movt	r9, #2
   156e0:	ldrb	r6, [r7]
   156e4:	mov	r0, r4
   156e8:	mov	r2, #8
   156ec:	mov	r1, r6
   156f0:	bl	11948 <memchr@plt>
   156f4:	cmp	r0, #0
   156f8:	beq	162c4 <__assert_fail@plt+0x4838>
   156fc:	mov	r0, r9
   15700:	mov	r1, r6
   15704:	mov	r2, #4
   15708:	bl	11948 <memchr@plt>
   1570c:	cmp	r0, #0
   15710:	add	r7, r7, #1
   15714:	strbne	r6, [sl], #1
   15718:	cmp	r7, r5
   1571c:	bcc	156e0 <__assert_fail@plt+0x3c54>
   15720:	b	162c4 <__assert_fail@plt+0x4838>
   15724:	ldrd	r0, [r4, #32]
   15728:	add	r9, r6, r7
   1572c:	add	r8, r6, #1
   15730:	cmp	r7, #2
   15734:	lsr	r2, r0, #12
   15738:	orr	r1, r2, r1, lsl #20
   1573c:	bfi	r1, r0, #0, #8
   15740:	stmib	sp, {r1, r6}
   15744:	mov	r6, r7
   15748:	blt	16320 <__assert_fail@plt+0x4894>
   1574c:	movw	sl, #8825	; 0x2279
   15750:	movw	r5, #7354	; 0x1cba
   15754:	mov	r4, r8
   15758:	movt	sl, #2
   1575c:	movt	r5, #2
   15760:	ldrb	r7, [r4]
   15764:	mov	r0, sl
   15768:	mov	r2, #8
   1576c:	mov	r1, r7
   15770:	bl	11948 <memchr@plt>
   15774:	cmp	r0, #0
   15778:	beq	16324 <__assert_fail@plt+0x4898>
   1577c:	mov	r0, r5
   15780:	mov	r1, r7
   15784:	mov	r2, #4
   15788:	bl	11948 <memchr@plt>
   1578c:	cmp	r0, #0
   15790:	add	r4, r4, #1
   15794:	strbne	r7, [r8], #1
   15798:	cmp	r4, r9
   1579c:	bcc	15760 <__assert_fail@plt+0x3cd4>
   157a0:	b	16324 <__assert_fail@plt+0x4898>
   157a4:	ldr	r0, [r4, #24]
   157a8:	bl	116cc <getpwuid@plt>
   157ac:	cmp	r0, #0
   157b0:	beq	16c20 <__assert_fail@plt+0x5194>
   157b4:	ldr	r0, [r0]
   157b8:	b	16c28 <__assert_fail@plt+0x519c>
   157bc:	mov	r9, #0
   157c0:	cmn	r3, #1
   157c4:	mov	r0, r6
   157c8:	mov	r1, r7
   157cc:	movle	r5, r9
   157d0:	movle	r3, r9
   157d4:	mov	r2, r5
   157d8:	bl	179bc <__assert_fail@plt+0x5f30>
   157dc:	mov	r0, r9
   157e0:	sub	sp, fp, #28
   157e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157e8:	ldrd	r2, [r4, #72]	; 0x48
   157ec:	b	157fc <__assert_fail@plt+0x3d70>
   157f0:	ldrd	r2, [r4, #80]	; 0x50
   157f4:	b	157fc <__assert_fail@plt+0x3d70>
   157f8:	ldrd	r2, [r4, #88]	; 0x58
   157fc:	mov	r0, r6
   15800:	mov	r1, r7
   15804:	bl	179bc <__assert_fail@plt+0x5f30>
   15808:	b	1734c <__assert_fail@plt+0x58c0>
   1580c:	ldr	r8, [r4, #16]
   15810:	add	r5, r6, r7
   15814:	add	sl, r6, #1
   15818:	cmp	r7, #2
   1581c:	str	r6, [sp, #8]
   15820:	str	r7, [sp, #12]
   15824:	blt	16380 <__assert_fail@plt+0x48f4>
   15828:	movw	r4, #8825	; 0x2279
   1582c:	movw	r9, #7354	; 0x1cba
   15830:	mov	r6, sl
   15834:	movt	r4, #2
   15838:	movt	r9, #2
   1583c:	ldrb	r7, [r6]
   15840:	mov	r0, r4
   15844:	mov	r2, #8
   15848:	mov	r1, r7
   1584c:	bl	11948 <memchr@plt>
   15850:	cmp	r0, #0
   15854:	beq	16384 <__assert_fail@plt+0x48f8>
   15858:	mov	r0, r9
   1585c:	mov	r1, r7
   15860:	mov	r2, #4
   15864:	bl	11948 <memchr@plt>
   15868:	cmp	r0, #0
   1586c:	add	r6, r6, #1
   15870:	strbne	r7, [sl], #1
   15874:	cmp	r6, r5
   15878:	bcc	1583c <__assert_fail@plt+0x3db0>
   1587c:	b	16384 <__assert_fail@plt+0x48f8>
   15880:	ldr	r1, [r4, #64]	; 0x40
   15884:	ldr	r0, [r4, #68]	; 0x44
   15888:	add	r5, r6, r7
   1588c:	mov	r8, r6
   15890:	add	sl, r6, #1
   15894:	cmp	r7, #2
   15898:	str	r7, [sp, #12]
   1589c:	str	r1, [sp]
   158a0:	str	r0, [sp, #4]
   158a4:	blt	163e8 <__assert_fail@plt+0x495c>
   158a8:	movw	r4, #8825	; 0x2279
   158ac:	movw	r9, #7346	; 0x1cb2
   158b0:	mov	r7, sl
   158b4:	movt	r4, #2
   158b8:	movt	r9, #2
   158bc:	ldrb	r6, [r7]
   158c0:	mov	r0, r4
   158c4:	mov	r2, #8
   158c8:	mov	r1, r6
   158cc:	bl	11948 <memchr@plt>
   158d0:	cmp	r0, #0
   158d4:	beq	163ec <__assert_fail@plt+0x4960>
   158d8:	mov	r0, r9
   158dc:	mov	r1, r6
   158e0:	mov	r2, #4
   158e4:	bl	11948 <memchr@plt>
   158e8:	cmp	r0, #0
   158ec:	add	r7, r7, #1
   158f0:	strbne	r6, [sl], #1
   158f4:	cmp	r7, r5
   158f8:	bcc	158bc <__assert_fail@plt+0x3e30>
   158fc:	b	163ec <__assert_fail@plt+0x4960>
   15900:	cmp	r2, #72	; 0x48
   15904:	str	r6, [sp, #8]
   15908:	bne	16448 <__assert_fail@plt+0x49bc>
   1590c:	ldrd	r0, [r4]
   15910:	add	r9, r6, r7
   15914:	add	r8, r6, #1
   15918:	mov	r6, r7
   1591c:	cmp	r7, #2
   15920:	lsr	r1, r1, #12
   15924:	lsr	r0, r0, #8
   15928:	bfi	r0, r1, #12, #20
   1592c:	str	r0, [sp, #4]
   15930:	blt	1716c <__assert_fail@plt+0x56e0>
   15934:	movw	sl, #8825	; 0x2279
   15938:	movw	r5, #7346	; 0x1cb2
   1593c:	mov	r4, r8
   15940:	movt	sl, #2
   15944:	movt	r5, #2
   15948:	ldrb	r7, [r4]
   1594c:	mov	r0, sl
   15950:	mov	r2, #8
   15954:	mov	r1, r7
   15958:	bl	11948 <memchr@plt>
   1595c:	cmp	r0, #0
   15960:	beq	17170 <__assert_fail@plt+0x56e4>
   15964:	mov	r0, r5
   15968:	mov	r1, r7
   1596c:	mov	r2, #4
   15970:	bl	11948 <memchr@plt>
   15974:	cmp	r0, #0
   15978:	add	r4, r4, #1
   1597c:	strbne	r7, [r8], #1
   15980:	cmp	r4, r9
   15984:	bcc	15948 <__assert_fail@plt+0x3ebc>
   15988:	b	17170 <__assert_fail@plt+0x56e4>
   1598c:	ldr	r0, [r4, #16]
   15990:	add	r5, r6, r7
   15994:	mov	r8, r6
   15998:	add	sl, r6, #1
   1599c:	cmp	r7, #2
   159a0:	str	r7, [sp, #12]
   159a4:	str	r0, [sp, #4]
   159a8:	blt	164d4 <__assert_fail@plt+0x4a48>
   159ac:	movw	r4, #8825	; 0x2279
   159b0:	movw	r9, #7354	; 0x1cba
   159b4:	mov	r6, sl
   159b8:	movt	r4, #2
   159bc:	movt	r9, #2
   159c0:	ldrb	r7, [r6]
   159c4:	mov	r0, r4
   159c8:	mov	r2, #8
   159cc:	mov	r1, r7
   159d0:	bl	11948 <memchr@plt>
   159d4:	cmp	r0, #0
   159d8:	beq	164d8 <__assert_fail@plt+0x4a4c>
   159dc:	mov	r0, r9
   159e0:	mov	r1, r7
   159e4:	mov	r2, #4
   159e8:	bl	11948 <memchr@plt>
   159ec:	cmp	r0, #0
   159f0:	add	r6, r6, #1
   159f4:	strbne	r7, [sl], #1
   159f8:	cmp	r6, r5
   159fc:	bcc	159c0 <__assert_fail@plt+0x3f34>
   15a00:	b	164d8 <__assert_fail@plt+0x4a4c>
   15a04:	ldr	r0, [r4, #28]
   15a08:	add	r5, r6, r7
   15a0c:	mov	r8, r6
   15a10:	add	sl, r6, #1
   15a14:	cmp	r7, #2
   15a18:	str	r7, [sp, #12]
   15a1c:	str	r0, [sp, #4]
   15a20:	blt	16534 <__assert_fail@plt+0x4aa8>
   15a24:	movw	r4, #8825	; 0x2279
   15a28:	movw	r9, #7346	; 0x1cb2
   15a2c:	mov	r6, sl
   15a30:	movt	r4, #2
   15a34:	movt	r9, #2
   15a38:	ldrb	r7, [r6]
   15a3c:	mov	r0, r4
   15a40:	mov	r2, #8
   15a44:	mov	r1, r7
   15a48:	bl	11948 <memchr@plt>
   15a4c:	cmp	r0, #0
   15a50:	beq	16538 <__assert_fail@plt+0x4aac>
   15a54:	mov	r0, r9
   15a58:	mov	r1, r7
   15a5c:	mov	r2, #4
   15a60:	bl	11948 <memchr@plt>
   15a64:	cmp	r0, #0
   15a68:	add	r6, r6, #1
   15a6c:	strbne	r7, [sl], #1
   15a70:	cmp	r6, r5
   15a74:	bcc	15a38 <__assert_fail@plt+0x3fac>
   15a78:	b	16538 <__assert_fail@plt+0x4aac>
   15a7c:	ldr	r0, [r4, #20]
   15a80:	add	r5, r6, r7
   15a84:	mov	r8, r6
   15a88:	add	sl, r6, #1
   15a8c:	cmp	r7, #2
   15a90:	str	r7, [sp, #12]
   15a94:	str	r0, [sp, #4]
   15a98:	blt	16594 <__assert_fail@plt+0x4b08>
   15a9c:	movw	r4, #8825	; 0x2279
   15aa0:	movw	r9, #7346	; 0x1cb2
   15aa4:	mov	r6, sl
   15aa8:	movt	r4, #2
   15aac:	movt	r9, #2
   15ab0:	ldrb	r7, [r6]
   15ab4:	mov	r0, r4
   15ab8:	mov	r2, #8
   15abc:	mov	r1, r7
   15ac0:	bl	11948 <memchr@plt>
   15ac4:	cmp	r0, #0
   15ac8:	beq	16598 <__assert_fail@plt+0x4b0c>
   15acc:	mov	r0, r9
   15ad0:	mov	r1, r7
   15ad4:	mov	r2, #4
   15ad8:	bl	11948 <memchr@plt>
   15adc:	cmp	r0, #0
   15ae0:	add	r6, r6, #1
   15ae4:	strbne	r7, [sl], #1
   15ae8:	cmp	r6, r5
   15aec:	bcc	15ab0 <__assert_fail@plt+0x4024>
   15af0:	b	16598 <__assert_fail@plt+0x4b0c>
   15af4:	ldr	r1, [r4, #96]	; 0x60
   15af8:	ldr	r0, [r4, #100]	; 0x64
   15afc:	add	r5, r6, r7
   15b00:	mov	r8, r6
   15b04:	add	sl, r6, #1
   15b08:	cmp	r7, #2
   15b0c:	str	r7, [sp, #12]
   15b10:	str	r1, [sp]
   15b14:	str	r0, [sp, #4]
   15b18:	blt	165f4 <__assert_fail@plt+0x4b68>
   15b1c:	movw	r4, #8825	; 0x2279
   15b20:	movw	r9, #7346	; 0x1cb2
   15b24:	mov	r7, sl
   15b28:	movt	r4, #2
   15b2c:	movt	r9, #2
   15b30:	ldrb	r6, [r7]
   15b34:	mov	r0, r4
   15b38:	mov	r2, #8
   15b3c:	mov	r1, r6
   15b40:	bl	11948 <memchr@plt>
   15b44:	cmp	r0, #0
   15b48:	beq	165f8 <__assert_fail@plt+0x4b6c>
   15b4c:	mov	r0, r9
   15b50:	mov	r1, r6
   15b54:	mov	r2, #4
   15b58:	bl	11948 <memchr@plt>
   15b5c:	cmp	r0, #0
   15b60:	add	r7, r7, #1
   15b64:	strbne	r6, [sl], #1
   15b68:	cmp	r7, r5
   15b6c:	bcc	15b30 <__assert_fail@plt+0x40a4>
   15b70:	b	165f8 <__assert_fail@plt+0x4b6c>
   15b74:	movw	r0, #12808	; 0x3208
   15b78:	movt	r0, #3
   15b7c:	ldrb	r0, [r0, #1]
   15b80:	cmp	r0, #0
   15b84:	bne	15b98 <__assert_fail@plt+0x410c>
   15b88:	ldr	r0, [r4, #16]
   15b8c:	and	r0, r0, #61440	; 0xf000
   15b90:	cmp	r0, #40960	; 0xa000
   15b94:	beq	16a28 <__assert_fail@plt+0x4f9c>
   15b98:	mov	r0, r9
   15b9c:	bl	119fc <canonicalize_file_name@plt>
   15ba0:	cmp	r0, #0
   15ba4:	beq	17120 <__assert_fail@plt+0x5694>
   15ba8:	mov	r5, r0
   15bac:	bl	17f14 <__assert_fail@plt+0x6488>
   15bb0:	mov	r8, r0
   15bb4:	mov	r0, r5
   15bb8:	bl	18ea0 <__assert_fail@plt+0x7414>
   15bbc:	cmp	r8, #0
   15bc0:	beq	16a28 <__assert_fail@plt+0x4f9c>
   15bc4:	mov	r5, #0
   15bc8:	b	16a48 <__assert_fail@plt+0x4fbc>
   15bcc:	add	r5, r6, r7
   15bd0:	add	r8, r6, #1
   15bd4:	mov	r4, r9
   15bd8:	cmp	r7, #2
   15bdc:	str	r6, [sp, #8]
   15be0:	str	r7, [sp, #12]
   15be4:	blt	16654 <__assert_fail@plt+0x4bc8>
   15be8:	movw	r9, #8825	; 0x2279
   15bec:	movw	r6, #9463	; 0x24f7
   15bf0:	mov	sl, r8
   15bf4:	movt	r9, #2
   15bf8:	movt	r6, #2
   15bfc:	ldrb	r7, [sl]
   15c00:	mov	r0, r9
   15c04:	mov	r2, #8
   15c08:	mov	r1, r7
   15c0c:	bl	11948 <memchr@plt>
   15c10:	cmp	r0, #0
   15c14:	beq	16658 <__assert_fail@plt+0x4bcc>
   15c18:	mov	r0, r6
   15c1c:	mov	r1, r7
   15c20:	mov	r2, #2
   15c24:	bl	11948 <memchr@plt>
   15c28:	cmp	r0, #0
   15c2c:	add	sl, sl, #1
   15c30:	strbne	r7, [r8], #1
   15c34:	cmp	sl, r5
   15c38:	bcc	15bfc <__assert_fail@plt+0x4170>
   15c3c:	b	16658 <__assert_fail@plt+0x4bcc>
   15c40:	ldr	r0, [r4, #56]	; 0x38
   15c44:	mov	r1, #0
   15c48:	add	r8, r6, r7
   15c4c:	add	sl, r6, #1
   15c50:	str	r6, [sp, #8]
   15c54:	str	r7, [sp, #12]
   15c58:	subs	r2, r0, #536870913	; 0x20000001
   15c5c:	rscs	r2, r1, r0, asr #31
   15c60:	mov	r2, #0
   15c64:	movwcc	r2, #1
   15c68:	rsbs	r3, r0, #0
   15c6c:	sbcs	r3, r1, r0, asr #31
   15c70:	movwlt	r1, #1
   15c74:	ands	r1, r1, r2
   15c78:	mov	r2, r0
   15c7c:	moveq	r2, #512	; 0x200
   15c80:	asrne	r1, r0, #31
   15c84:	cmp	r7, #2
   15c88:	str	r2, [sp]
   15c8c:	str	r1, [sp, #4]
   15c90:	blt	166bc <__assert_fail@plt+0x4c30>
   15c94:	movw	r5, #8825	; 0x2279
   15c98:	movw	r9, #7346	; 0x1cb2
   15c9c:	mov	r6, sl
   15ca0:	movt	r5, #2
   15ca4:	movt	r9, #2
   15ca8:	ldrb	r4, [r6]
   15cac:	mov	r0, r5
   15cb0:	mov	r2, #8
   15cb4:	mov	r1, r4
   15cb8:	bl	11948 <memchr@plt>
   15cbc:	cmp	r0, #0
   15cc0:	beq	166c0 <__assert_fail@plt+0x4c34>
   15cc4:	mov	r0, r9
   15cc8:	mov	r1, r4
   15ccc:	mov	r2, #4
   15cd0:	bl	11948 <memchr@plt>
   15cd4:	cmp	r0, #0
   15cd8:	add	r6, r6, #1
   15cdc:	strbne	r4, [sl], #1
   15ce0:	cmp	r6, r8
   15ce4:	bcc	15ca8 <__assert_fail@plt+0x421c>
   15ce8:	b	166c0 <__assert_fail@plt+0x4c34>
   15cec:	cmp	r2, #72	; 0x48
   15cf0:	str	r6, [sp, #8]
   15cf4:	bne	16720 <__assert_fail@plt+0x4c94>
   15cf8:	ldrd	r0, [r4, #32]
   15cfc:	add	r9, r6, r7
   15d00:	add	r8, r6, #1
   15d04:	mov	r6, r7
   15d08:	cmp	r7, #2
   15d0c:	lsr	r1, r1, #12
   15d10:	lsr	r0, r0, #8
   15d14:	bfi	r0, r1, #12, #20
   15d18:	str	r0, [sp, #4]
   15d1c:	blt	171cc <__assert_fail@plt+0x5740>
   15d20:	movw	sl, #8825	; 0x2279
   15d24:	movw	r5, #7346	; 0x1cb2
   15d28:	mov	r4, r8
   15d2c:	movt	sl, #2
   15d30:	movt	r5, #2
   15d34:	ldrb	r7, [r4]
   15d38:	mov	r0, sl
   15d3c:	mov	r2, #8
   15d40:	mov	r1, r7
   15d44:	bl	11948 <memchr@plt>
   15d48:	cmp	r0, #0
   15d4c:	beq	171d0 <__assert_fail@plt+0x5744>
   15d50:	mov	r0, r5
   15d54:	mov	r1, r7
   15d58:	mov	r2, #4
   15d5c:	bl	11948 <memchr@plt>
   15d60:	cmp	r0, #0
   15d64:	add	r4, r4, #1
   15d68:	strbne	r7, [r8], #1
   15d6c:	cmp	r4, r9
   15d70:	bcc	15d34 <__assert_fail@plt+0x42a8>
   15d74:	b	171d0 <__assert_fail@plt+0x5744>
   15d78:	ldr	r1, [r4, #48]	; 0x30
   15d7c:	ldr	r0, [r4, #52]	; 0x34
   15d80:	add	r5, r6, r7
   15d84:	mov	r8, r6
   15d88:	add	sl, r6, #1
   15d8c:	cmp	r7, #2
   15d90:	str	r7, [sp, #12]
   15d94:	str	r1, [sp]
   15d98:	str	r0, [sp, #4]
   15d9c:	blt	167ac <__assert_fail@plt+0x4d20>
   15da0:	movw	r4, #8825	; 0x2279
   15da4:	movw	r9, #7436	; 0x1d0c
   15da8:	mov	r7, sl
   15dac:	movt	r4, #2
   15db0:	movt	r9, #2
   15db4:	ldrb	r6, [r7]
   15db8:	mov	r0, r4
   15dbc:	mov	r2, #8
   15dc0:	mov	r1, r6
   15dc4:	bl	11948 <memchr@plt>
   15dc8:	cmp	r0, #0
   15dcc:	beq	167b0 <__assert_fail@plt+0x4d24>
   15dd0:	mov	r0, r9
   15dd4:	mov	r1, r6
   15dd8:	mov	r2, #6
   15ddc:	bl	11948 <memchr@plt>
   15de0:	cmp	r0, #0
   15de4:	add	r7, r7, #1
   15de8:	strbne	r6, [sl], #1
   15dec:	cmp	r7, r5
   15df0:	bcc	15db4 <__assert_fail@plt+0x4328>
   15df4:	b	167b0 <__assert_fail@plt+0x4d24>
   15df8:	ldrd	r0, [r4, #32]
   15dfc:	add	r9, r6, r7
   15e00:	add	r8, r6, #1
   15e04:	cmp	r7, #2
   15e08:	lsr	r1, r1, #12
   15e0c:	lsr	r0, r0, #8
   15e10:	bfi	r0, r1, #12, #20
   15e14:	stmib	sp, {r0, r6}
   15e18:	mov	r6, r7
   15e1c:	blt	1680c <__assert_fail@plt+0x4d80>
   15e20:	movw	sl, #8825	; 0x2279
   15e24:	movw	r5, #7354	; 0x1cba
   15e28:	mov	r4, r8
   15e2c:	movt	sl, #2
   15e30:	movt	r5, #2
   15e34:	ldrb	r7, [r4]
   15e38:	mov	r0, sl
   15e3c:	mov	r2, #8
   15e40:	mov	r1, r7
   15e44:	bl	11948 <memchr@plt>
   15e48:	cmp	r0, #0
   15e4c:	beq	16810 <__assert_fail@plt+0x4d84>
   15e50:	mov	r0, r5
   15e54:	mov	r1, r7
   15e58:	mov	r2, #4
   15e5c:	bl	11948 <memchr@plt>
   15e60:	cmp	r0, #0
   15e64:	add	r4, r4, #1
   15e68:	strbne	r7, [r8], #1
   15e6c:	cmp	r4, r9
   15e70:	bcc	15e34 <__assert_fail@plt+0x43a8>
   15e74:	b	16810 <__assert_fail@plt+0x4d84>
   15e78:	ldr	r0, [r4, #24]
   15e7c:	add	r5, r6, r7
   15e80:	mov	r8, r6
   15e84:	add	sl, r6, #1
   15e88:	cmp	r7, #2
   15e8c:	str	r7, [sp, #12]
   15e90:	str	r0, [sp, #4]
   15e94:	blt	16874 <__assert_fail@plt+0x4de8>
   15e98:	movw	r4, #8825	; 0x2279
   15e9c:	movw	r9, #7346	; 0x1cb2
   15ea0:	mov	r6, sl
   15ea4:	movt	r4, #2
   15ea8:	movt	r9, #2
   15eac:	ldrb	r7, [r6]
   15eb0:	mov	r0, r4
   15eb4:	mov	r2, #8
   15eb8:	mov	r1, r7
   15ebc:	bl	11948 <memchr@plt>
   15ec0:	cmp	r0, #0
   15ec4:	beq	16878 <__assert_fail@plt+0x4dec>
   15ec8:	mov	r0, r9
   15ecc:	mov	r1, r7
   15ed0:	mov	r2, #4
   15ed4:	bl	11948 <memchr@plt>
   15ed8:	cmp	r0, #0
   15edc:	add	r6, r6, #1
   15ee0:	strbne	r7, [sl], #1
   15ee4:	cmp	r6, r5
   15ee8:	bcc	15eac <__assert_fail@plt+0x4420>
   15eec:	b	16878 <__assert_fail@plt+0x4dec>
   15ef0:	cmn	r3, #1
   15ef4:	str	r7, [sp, #12]
   15ef8:	ble	16d04 <__assert_fail@plt+0x5278>
   15efc:	mov	r0, r5
   15f00:	mov	r1, r3
   15f04:	bl	1790c <__assert_fail@plt+0x5e80>
   15f08:	add	r5, r6, r7
   15f0c:	mov	r4, r6
   15f10:	add	sl, r6, #1
   15f14:	cmp	r7, #2
   15f18:	blt	170b4 <__assert_fail@plt+0x5628>
   15f1c:	movw	r9, #8825	; 0x2279
   15f20:	movw	r8, #9463	; 0x24f7
   15f24:	mov	r7, sl
   15f28:	movt	r9, #2
   15f2c:	movt	r8, #2
   15f30:	ldrb	r6, [r7]
   15f34:	mov	r0, r9
   15f38:	mov	r2, #8
   15f3c:	mov	r1, r6
   15f40:	bl	11948 <memchr@plt>
   15f44:	cmp	r0, #0
   15f48:	beq	170b8 <__assert_fail@plt+0x562c>
   15f4c:	mov	r0, r8
   15f50:	mov	r1, r6
   15f54:	mov	r2, #2
   15f58:	bl	11948 <memchr@plt>
   15f5c:	cmp	r0, #0
   15f60:	add	r7, r7, #1
   15f64:	strbne	r6, [sl], #1
   15f68:	cmp	r7, r5
   15f6c:	bcc	15f30 <__assert_fail@plt+0x44a4>
   15f70:	b	170b8 <__assert_fail@plt+0x562c>
   15f74:	ldrd	r0, [r4, #72]	; 0x48
   15f78:	bl	1790c <__assert_fail@plt+0x5e80>
   15f7c:	add	r5, r6, r7
   15f80:	mov	r4, r6
   15f84:	add	sl, r6, #1
   15f88:	cmp	r7, #2
   15f8c:	str	r7, [sp, #12]
   15f90:	blt	168d4 <__assert_fail@plt+0x4e48>
   15f94:	movw	r9, #8825	; 0x2279
   15f98:	movw	r8, #9463	; 0x24f7
   15f9c:	mov	r7, sl
   15fa0:	movt	r9, #2
   15fa4:	movt	r8, #2
   15fa8:	ldrb	r6, [r7]
   15fac:	mov	r0, r9
   15fb0:	mov	r2, #8
   15fb4:	mov	r1, r6
   15fb8:	bl	11948 <memchr@plt>
   15fbc:	cmp	r0, #0
   15fc0:	beq	168d8 <__assert_fail@plt+0x4e4c>
   15fc4:	mov	r0, r8
   15fc8:	mov	r1, r6
   15fcc:	mov	r2, #2
   15fd0:	bl	11948 <memchr@plt>
   15fd4:	cmp	r0, #0
   15fd8:	add	r7, r7, #1
   15fdc:	strbne	r6, [sl], #1
   15fe0:	cmp	r7, r5
   15fe4:	bcc	15fa8 <__assert_fail@plt+0x451c>
   15fe8:	b	168d8 <__assert_fail@plt+0x4e4c>
   15fec:	ldrd	r0, [r4, #80]	; 0x50
   15ff0:	bl	1790c <__assert_fail@plt+0x5e80>
   15ff4:	add	r5, r6, r7
   15ff8:	mov	r4, r6
   15ffc:	add	sl, r6, #1
   16000:	cmp	r7, #2
   16004:	str	r7, [sp, #12]
   16008:	blt	16938 <__assert_fail@plt+0x4eac>
   1600c:	movw	r9, #8825	; 0x2279
   16010:	movw	r8, #9463	; 0x24f7
   16014:	mov	r7, sl
   16018:	movt	r9, #2
   1601c:	movt	r8, #2
   16020:	ldrb	r6, [r7]
   16024:	mov	r0, r9
   16028:	mov	r2, #8
   1602c:	mov	r1, r6
   16030:	bl	11948 <memchr@plt>
   16034:	cmp	r0, #0
   16038:	beq	1693c <__assert_fail@plt+0x4eb0>
   1603c:	mov	r0, r8
   16040:	mov	r1, r6
   16044:	mov	r2, #2
   16048:	bl	11948 <memchr@plt>
   1604c:	cmp	r0, #0
   16050:	add	r7, r7, #1
   16054:	strbne	r6, [sl], #1
   16058:	cmp	r7, r5
   1605c:	bcc	16020 <__assert_fail@plt+0x4594>
   16060:	b	1693c <__assert_fail@plt+0x4eb0>
   16064:	ldrd	r0, [r4, #88]	; 0x58
   16068:	bl	1790c <__assert_fail@plt+0x5e80>
   1606c:	add	r5, r6, r7
   16070:	mov	r4, r6
   16074:	add	sl, r6, #1
   16078:	cmp	r7, #2
   1607c:	str	r7, [sp, #12]
   16080:	blt	1699c <__assert_fail@plt+0x4f10>
   16084:	movw	r9, #8825	; 0x2279
   16088:	movw	r8, #9463	; 0x24f7
   1608c:	mov	r7, sl
   16090:	movt	r9, #2
   16094:	movt	r8, #2
   16098:	ldrb	r6, [r7]
   1609c:	mov	r0, r9
   160a0:	mov	r2, #8
   160a4:	mov	r1, r6
   160a8:	bl	11948 <memchr@plt>
   160ac:	cmp	r0, #0
   160b0:	beq	169a0 <__assert_fail@plt+0x4f14>
   160b4:	mov	r0, r8
   160b8:	mov	r1, r6
   160bc:	mov	r2, #2
   160c0:	bl	11948 <memchr@plt>
   160c4:	cmp	r0, #0
   160c8:	add	r7, r7, #1
   160cc:	strbne	r6, [sl], #1
   160d0:	cmp	r7, r5
   160d4:	bcc	16098 <__assert_fail@plt+0x460c>
   160d8:	b	169a0 <__assert_fail@plt+0x4f14>
   160dc:	mov	r6, r8
   160e0:	cmp	r6, r5
   160e4:	bcs	16a00 <__assert_fail@plt+0x4f74>
   160e8:	ldr	r0, [sp, #12]
   160ec:	mov	r1, r4
   160f0:	sub	r0, r0, r6
   160f4:	add	r0, r4, r0
   160f8:	cmp	r0, #16
   160fc:	bcc	16d70 <__assert_fail@plt+0x52e4>
   16100:	cmp	r8, r5
   16104:	addcc	r2, r8, r0
   16108:	cmpcc	r6, r2
   1610c:	bcc	16d70 <__assert_fail@plt+0x52e4>
   16110:	bic	ip, r0, #15
   16114:	mov	r4, r8
   16118:	add	r2, r6, ip
   1611c:	add	r7, r8, ip
   16120:	mov	r3, ip
   16124:	vld1.8	{d16-d17}, [r6]!
   16128:	subs	r3, r3, #16
   1612c:	vst1.8	{d16-d17}, [r4]!
   16130:	bne	16124 <__assert_fail@plt+0x4698>
   16134:	cmp	ip, r0
   16138:	bne	16d78 <__assert_fail@plt+0x52ec>
   1613c:	b	1709c <__assert_fail@plt+0x5610>
   16140:	mov	r7, sl
   16144:	cmp	r7, r5
   16148:	bcs	16a08 <__assert_fail@plt+0x4f7c>
   1614c:	ldr	r0, [sp, #12]
   16150:	mov	r1, r4
   16154:	sub	r0, r0, r7
   16158:	add	r0, r4, r0
   1615c:	cmp	r0, #16
   16160:	bcc	16d8c <__assert_fail@plt+0x5300>
   16164:	cmp	sl, r5
   16168:	addcc	r2, sl, r0
   1616c:	cmpcc	r7, r2
   16170:	bcc	16d8c <__assert_fail@plt+0x5300>
   16174:	bic	ip, r0, #15
   16178:	mov	r4, sl
   1617c:	add	r2, r7, ip
   16180:	add	r6, sl, ip
   16184:	mov	r3, ip
   16188:	vld1.8	{d16-d17}, [r7]!
   1618c:	subs	r3, r3, #16
   16190:	vst1.8	{d16-d17}, [r4]!
   16194:	bne	16188 <__assert_fail@plt+0x46fc>
   16198:	cmp	ip, r0
   1619c:	bne	16d94 <__assert_fail@plt+0x5308>
   161a0:	b	16da4 <__assert_fail@plt+0x5318>
   161a4:	mov	r0, r9
   161a8:	bl	1d758 <__assert_fail@plt+0xbccc>
   161ac:	cmp	r0, #0
   161b0:	blt	15424 <__assert_fail@plt+0x3998>
   161b4:	ldr	r4, [sp, #16]
   161b8:	mov	r9, #0
   161bc:	movw	r2, #7366	; 0x1cc6
   161c0:	add	r0, r6, r7
   161c4:	mov	r1, #115	; 0x73
   161c8:	cmp	r4, #0
   161cc:	movt	r2, #2
   161d0:	strh	r1, [r0]
   161d4:	mov	r0, #1
   161d8:	mov	r1, r6
   161dc:	movne	r2, r4
   161e0:	bl	11924 <__printf_chk@plt>
   161e4:	ldr	r0, [sp, #16]
   161e8:	cmp	r0, #0
   161ec:	beq	17350 <__assert_fail@plt+0x58c4>
   161f0:	bl	11a14 <freecon@plt>
   161f4:	mov	r0, r9
   161f8:	sub	sp, fp, #28
   161fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16200:	mov	r7, sl
   16204:	cmp	r7, r5
   16208:	bcs	16e18 <__assert_fail@plt+0x538c>
   1620c:	ldr	r0, [sp, #12]
   16210:	sub	r0, r0, r7
   16214:	add	r0, r8, r0
   16218:	cmp	r0, #16
   1621c:	bcc	16dc4 <__assert_fail@plt+0x5338>
   16220:	cmp	sl, r5
   16224:	addcc	r2, sl, r0
   16228:	cmpcc	r7, r2
   1622c:	bcc	16dc4 <__assert_fail@plt+0x5338>
   16230:	bic	ip, r0, #15
   16234:	mov	r4, sl
   16238:	add	r2, r7, ip
   1623c:	add	r6, sl, ip
   16240:	mov	r3, ip
   16244:	vld1.8	{d16-d17}, [r7]!
   16248:	subs	r3, r3, #16
   1624c:	vst1.8	{d16-d17}, [r4]!
   16250:	bne	16244 <__assert_fail@plt+0x47b8>
   16254:	cmp	ip, r0
   16258:	bne	16dcc <__assert_fail@plt+0x5340>
   1625c:	b	16e14 <__assert_fail@plt+0x5388>
   16260:	mov	r4, r8
   16264:	cmp	r4, r9
   16268:	bcs	16cfc <__assert_fail@plt+0x5270>
   1626c:	ldr	r1, [sp, #8]
   16270:	sub	r0, r6, r4
   16274:	add	r0, r1, r0
   16278:	cmp	r0, #16
   1627c:	bcc	16de0 <__assert_fail@plt+0x5354>
   16280:	cmp	r8, r9
   16284:	addcc	r2, r8, r0
   16288:	cmpcc	r4, r2
   1628c:	bcc	16de0 <__assert_fail@plt+0x5354>
   16290:	bic	r7, r0, #15
   16294:	mov	r5, r8
   16298:	add	r2, r4, r7
   1629c:	add	r6, r8, r7
   162a0:	mov	r3, r7
   162a4:	vld1.8	{d16-d17}, [r4]!
   162a8:	subs	r3, r3, #16
   162ac:	vst1.8	{d16-d17}, [r5]!
   162b0:	bne	162a4 <__assert_fail@plt+0x4818>
   162b4:	cmp	r7, r0
   162b8:	bne	16de8 <__assert_fail@plt+0x535c>
   162bc:	b	1709c <__assert_fail@plt+0x5610>
   162c0:	mov	r7, sl
   162c4:	cmp	r7, r5
   162c8:	bcs	16e18 <__assert_fail@plt+0x538c>
   162cc:	ldr	r0, [sp, #12]
   162d0:	sub	r0, r0, r7
   162d4:	add	r0, r8, r0
   162d8:	cmp	r0, #16
   162dc:	bcc	16dfc <__assert_fail@plt+0x5370>
   162e0:	cmp	sl, r5
   162e4:	addcc	r2, sl, r0
   162e8:	cmpcc	r7, r2
   162ec:	bcc	16dfc <__assert_fail@plt+0x5370>
   162f0:	bic	ip, r0, #15
   162f4:	mov	r4, sl
   162f8:	add	r2, r7, ip
   162fc:	add	r6, sl, ip
   16300:	mov	r3, ip
   16304:	vld1.8	{d16-d17}, [r7]!
   16308:	subs	r3, r3, #16
   1630c:	vst1.8	{d16-d17}, [r4]!
   16310:	bne	16304 <__assert_fail@plt+0x4878>
   16314:	cmp	ip, r0
   16318:	bne	16e04 <__assert_fail@plt+0x5378>
   1631c:	b	16e14 <__assert_fail@plt+0x5388>
   16320:	mov	r4, r8
   16324:	cmp	r4, r9
   16328:	bcs	1686c <__assert_fail@plt+0x4de0>
   1632c:	ldr	r1, [sp, #8]
   16330:	sub	r0, r6, r4
   16334:	add	r0, r1, r0
   16338:	cmp	r0, #16
   1633c:	bcc	16e24 <__assert_fail@plt+0x5398>
   16340:	cmp	r8, r9
   16344:	addcc	r2, r8, r0
   16348:	cmpcc	r4, r2
   1634c:	bcc	16e24 <__assert_fail@plt+0x5398>
   16350:	bic	r7, r0, #15
   16354:	mov	r5, r8
   16358:	add	r2, r4, r7
   1635c:	add	r6, r8, r7
   16360:	mov	r3, r7
   16364:	vld1.8	{d16-d17}, [r4]!
   16368:	subs	r3, r3, #16
   1636c:	vst1.8	{d16-d17}, [r5]!
   16370:	bne	16364 <__assert_fail@plt+0x48d8>
   16374:	cmp	r7, r0
   16378:	bne	16e2c <__assert_fail@plt+0x53a0>
   1637c:	b	16fcc <__assert_fail@plt+0x5540>
   16380:	mov	r6, sl
   16384:	bfc	r8, #12, #20
   16388:	cmp	r6, r5
   1638c:	bcs	16a10 <__assert_fail@plt+0x4f84>
   16390:	ldr	r0, [sp, #12]
   16394:	ldr	r1, [sp, #8]
   16398:	sub	r0, r0, r6
   1639c:	add	r0, r1, r0
   163a0:	cmp	r0, #16
   163a4:	bcc	16e40 <__assert_fail@plt+0x53b4>
   163a8:	cmp	sl, r5
   163ac:	addcc	r2, sl, r0
   163b0:	cmpcc	r6, r2
   163b4:	bcc	16e40 <__assert_fail@plt+0x53b4>
   163b8:	bic	ip, r0, #15
   163bc:	mov	r4, sl
   163c0:	add	r2, r6, ip
   163c4:	add	r7, sl, ip
   163c8:	mov	r3, ip
   163cc:	vld1.8	{d16-d17}, [r6]!
   163d0:	subs	r3, r3, #16
   163d4:	vst1.8	{d16-d17}, [r4]!
   163d8:	bne	163cc <__assert_fail@plt+0x4940>
   163dc:	cmp	ip, r0
   163e0:	bne	16e48 <__assert_fail@plt+0x53bc>
   163e4:	b	16e58 <__assert_fail@plt+0x53cc>
   163e8:	mov	r7, sl
   163ec:	cmp	r7, r5
   163f0:	bcs	16f10 <__assert_fail@plt+0x5484>
   163f4:	ldr	r0, [sp, #12]
   163f8:	sub	r0, r0, r7
   163fc:	add	r0, r8, r0
   16400:	cmp	r0, #16
   16404:	bcc	16e78 <__assert_fail@plt+0x53ec>
   16408:	cmp	sl, r5
   1640c:	addcc	r2, sl, r0
   16410:	cmpcc	r7, r2
   16414:	bcc	16e78 <__assert_fail@plt+0x53ec>
   16418:	bic	ip, r0, #15
   1641c:	mov	r4, sl
   16420:	add	r2, r7, ip
   16424:	add	r6, sl, ip
   16428:	mov	r3, ip
   1642c:	vld1.8	{d16-d17}, [r7]!
   16430:	subs	r3, r3, #16
   16434:	vst1.8	{d16-d17}, [r4]!
   16438:	bne	1642c <__assert_fail@plt+0x49a0>
   1643c:	cmp	ip, r0
   16440:	bne	16e80 <__assert_fail@plt+0x53f4>
   16444:	b	16f0c <__assert_fail@plt+0x5480>
   16448:	ldr	r8, [r4]
   1644c:	ldr	r1, [r4, #4]
   16450:	cmp	r2, #76	; 0x4c
   16454:	bne	17234 <__assert_fail@plt+0x57a8>
   16458:	lsr	r0, r8, #12
   1645c:	add	r9, r6, r7
   16460:	cmp	r7, #2
   16464:	orr	r0, r0, r1, lsl #20
   16468:	bfi	r0, r8, #0, #8
   1646c:	add	r8, r6, #1
   16470:	mov	r6, r7
   16474:	str	r0, [sp, #4]
   16478:	blt	17674 <__assert_fail@plt+0x5be8>
   1647c:	movw	r5, #8825	; 0x2279
   16480:	movw	r4, #7346	; 0x1cb2
   16484:	mov	sl, r8
   16488:	movt	r5, #2
   1648c:	movt	r4, #2
   16490:	ldrb	r7, [sl]
   16494:	mov	r0, r5
   16498:	mov	r2, #8
   1649c:	mov	r1, r7
   164a0:	bl	11948 <memchr@plt>
   164a4:	cmp	r0, #0
   164a8:	beq	17678 <__assert_fail@plt+0x5bec>
   164ac:	mov	r0, r4
   164b0:	mov	r1, r7
   164b4:	mov	r2, #4
   164b8:	bl	11948 <memchr@plt>
   164bc:	cmp	r0, #0
   164c0:	add	sl, sl, #1
   164c4:	strbne	r7, [r8], #1
   164c8:	cmp	sl, r9
   164cc:	bcc	16490 <__assert_fail@plt+0x4a04>
   164d0:	b	17678 <__assert_fail@plt+0x5bec>
   164d4:	mov	r6, sl
   164d8:	cmp	r6, r5
   164dc:	bcs	16eb0 <__assert_fail@plt+0x5424>
   164e0:	ldr	r0, [sp, #12]
   164e4:	sub	r0, r0, r6
   164e8:	add	r0, r8, r0
   164ec:	cmp	r0, #16
   164f0:	bcc	16e94 <__assert_fail@plt+0x5408>
   164f4:	cmp	sl, r5
   164f8:	addcc	r2, sl, r0
   164fc:	cmpcc	r6, r2
   16500:	bcc	16e94 <__assert_fail@plt+0x5408>
   16504:	bic	ip, r0, #15
   16508:	mov	r4, sl
   1650c:	add	r2, r6, ip
   16510:	add	r7, sl, ip
   16514:	mov	r3, ip
   16518:	vld1.8	{d16-d17}, [r6]!
   1651c:	subs	r3, r3, #16
   16520:	vst1.8	{d16-d17}, [r4]!
   16524:	bne	16518 <__assert_fail@plt+0x4a8c>
   16528:	cmp	ip, r0
   1652c:	bne	16e9c <__assert_fail@plt+0x5410>
   16530:	b	16eac <__assert_fail@plt+0x5420>
   16534:	mov	r6, sl
   16538:	cmp	r6, r5
   1653c:	bcs	16ff8 <__assert_fail@plt+0x556c>
   16540:	ldr	r0, [sp, #12]
   16544:	sub	r0, r0, r6
   16548:	add	r0, r8, r0
   1654c:	cmp	r0, #16
   16550:	bcc	16ebc <__assert_fail@plt+0x5430>
   16554:	cmp	sl, r5
   16558:	addcc	r2, sl, r0
   1655c:	cmpcc	r6, r2
   16560:	bcc	16ebc <__assert_fail@plt+0x5430>
   16564:	bic	ip, r0, #15
   16568:	mov	r4, sl
   1656c:	add	r2, r6, ip
   16570:	add	r7, sl, ip
   16574:	mov	r3, ip
   16578:	vld1.8	{d16-d17}, [r6]!
   1657c:	subs	r3, r3, #16
   16580:	vst1.8	{d16-d17}, [r4]!
   16584:	bne	16578 <__assert_fail@plt+0x4aec>
   16588:	cmp	ip, r0
   1658c:	bne	16ec4 <__assert_fail@plt+0x5438>
   16590:	b	16ff4 <__assert_fail@plt+0x5568>
   16594:	mov	r6, sl
   16598:	cmp	r6, r5
   1659c:	bcs	16ff8 <__assert_fail@plt+0x556c>
   165a0:	ldr	r0, [sp, #12]
   165a4:	sub	r0, r0, r6
   165a8:	add	r0, r8, r0
   165ac:	cmp	r0, #16
   165b0:	bcc	16ed8 <__assert_fail@plt+0x544c>
   165b4:	cmp	sl, r5
   165b8:	addcc	r2, sl, r0
   165bc:	cmpcc	r6, r2
   165c0:	bcc	16ed8 <__assert_fail@plt+0x544c>
   165c4:	bic	ip, r0, #15
   165c8:	mov	r4, sl
   165cc:	add	r2, r6, ip
   165d0:	add	r7, sl, ip
   165d4:	mov	r3, ip
   165d8:	vld1.8	{d16-d17}, [r6]!
   165dc:	subs	r3, r3, #16
   165e0:	vst1.8	{d16-d17}, [r4]!
   165e4:	bne	165d8 <__assert_fail@plt+0x4b4c>
   165e8:	cmp	ip, r0
   165ec:	bne	16ee0 <__assert_fail@plt+0x5454>
   165f0:	b	16ff4 <__assert_fail@plt+0x5568>
   165f4:	mov	r7, sl
   165f8:	cmp	r7, r5
   165fc:	bcs	16f10 <__assert_fail@plt+0x5484>
   16600:	ldr	r0, [sp, #12]
   16604:	sub	r0, r0, r7
   16608:	add	r0, r8, r0
   1660c:	cmp	r0, #16
   16610:	bcc	16ef4 <__assert_fail@plt+0x5468>
   16614:	cmp	sl, r5
   16618:	addcc	r2, sl, r0
   1661c:	cmpcc	r7, r2
   16620:	bcc	16ef4 <__assert_fail@plt+0x5468>
   16624:	bic	ip, r0, #15
   16628:	mov	r4, sl
   1662c:	add	r2, r7, ip
   16630:	add	r6, sl, ip
   16634:	mov	r3, ip
   16638:	vld1.8	{d16-d17}, [r7]!
   1663c:	subs	r3, r3, #16
   16640:	vst1.8	{d16-d17}, [r4]!
   16644:	bne	16638 <__assert_fail@plt+0x4bac>
   16648:	cmp	ip, r0
   1664c:	bne	16efc <__assert_fail@plt+0x5470>
   16650:	b	16f0c <__assert_fail@plt+0x5480>
   16654:	mov	sl, r8
   16658:	cmp	sl, r5
   1665c:	mov	r2, r4
   16660:	bcs	16a18 <__assert_fail@plt+0x4f8c>
   16664:	ldr	r0, [sp, #12]
   16668:	ldr	r1, [sp, #8]
   1666c:	sub	r0, r0, sl
   16670:	add	r0, r1, r0
   16674:	cmp	r0, #16
   16678:	bcc	16f1c <__assert_fail@plt+0x5490>
   1667c:	cmp	r8, r5
   16680:	addcc	r3, r8, r0
   16684:	cmpcc	sl, r3
   16688:	bcc	16f1c <__assert_fail@plt+0x5490>
   1668c:	bic	ip, r0, #15
   16690:	mov	r4, r8
   16694:	add	r6, sl, ip
   16698:	add	r7, r8, ip
   1669c:	mov	r3, ip
   166a0:	vld1.8	{d16-d17}, [sl]!
   166a4:	subs	r3, r3, #16
   166a8:	vst1.8	{d16-d17}, [r4]!
   166ac:	bne	166a0 <__assert_fail@plt+0x4c14>
   166b0:	cmp	ip, r0
   166b4:	bne	16f24 <__assert_fail@plt+0x5498>
   166b8:	b	16f34 <__assert_fail@plt+0x54a8>
   166bc:	mov	r6, sl
   166c0:	cmp	r6, r8
   166c4:	bcs	16a20 <__assert_fail@plt+0x4f94>
   166c8:	ldr	r0, [sp, #12]
   166cc:	ldr	r1, [sp, #8]
   166d0:	sub	r0, r0, r6
   166d4:	add	r0, r1, r0
   166d8:	cmp	r0, #16
   166dc:	bcc	16f44 <__assert_fail@plt+0x54b8>
   166e0:	cmp	sl, r8
   166e4:	addcc	r2, sl, r0
   166e8:	cmpcc	r6, r2
   166ec:	bcc	16f44 <__assert_fail@plt+0x54b8>
   166f0:	bic	ip, r0, #15
   166f4:	mov	r4, sl
   166f8:	add	r2, r6, ip
   166fc:	add	r5, sl, ip
   16700:	mov	r3, ip
   16704:	vld1.8	{d16-d17}, [r6]!
   16708:	subs	r3, r3, #16
   1670c:	vst1.8	{d16-d17}, [r4]!
   16710:	bne	16704 <__assert_fail@plt+0x4c78>
   16714:	cmp	ip, r0
   16718:	bne	16f4c <__assert_fail@plt+0x54c0>
   1671c:	b	16f5c <__assert_fail@plt+0x54d0>
   16720:	ldr	r8, [r4, #32]
   16724:	ldr	r1, [r4, #36]	; 0x24
   16728:	cmp	r2, #76	; 0x4c
   1672c:	bne	172a4 <__assert_fail@plt+0x5818>
   16730:	lsr	r0, r8, #12
   16734:	add	r9, r6, r7
   16738:	cmp	r7, #2
   1673c:	orr	r0, r0, r1, lsl #20
   16740:	bfi	r0, r8, #0, #8
   16744:	add	r8, r6, #1
   16748:	mov	r6, r7
   1674c:	str	r0, [sp, #4]
   16750:	blt	176d8 <__assert_fail@plt+0x5c4c>
   16754:	movw	r5, #8825	; 0x2279
   16758:	movw	r4, #7346	; 0x1cb2
   1675c:	mov	sl, r8
   16760:	movt	r5, #2
   16764:	movt	r4, #2
   16768:	ldrb	r7, [sl]
   1676c:	mov	r0, r5
   16770:	mov	r2, #8
   16774:	mov	r1, r7
   16778:	bl	11948 <memchr@plt>
   1677c:	cmp	r0, #0
   16780:	beq	176dc <__assert_fail@plt+0x5c50>
   16784:	mov	r0, r4
   16788:	mov	r1, r7
   1678c:	mov	r2, #4
   16790:	bl	11948 <memchr@plt>
   16794:	cmp	r0, #0
   16798:	add	sl, sl, #1
   1679c:	strbne	r7, [r8], #1
   167a0:	cmp	sl, r9
   167a4:	bcc	16768 <__assert_fail@plt+0x4cdc>
   167a8:	b	176dc <__assert_fail@plt+0x5c50>
   167ac:	mov	r7, sl
   167b0:	cmp	r7, r5
   167b4:	bcs	16f90 <__assert_fail@plt+0x5504>
   167b8:	ldr	r0, [sp, #12]
   167bc:	sub	r0, r0, r7
   167c0:	add	r0, r8, r0
   167c4:	cmp	r0, #16
   167c8:	bcc	16f74 <__assert_fail@plt+0x54e8>
   167cc:	cmp	sl, r5
   167d0:	addcc	r2, sl, r0
   167d4:	cmpcc	r7, r2
   167d8:	bcc	16f74 <__assert_fail@plt+0x54e8>
   167dc:	bic	ip, r0, #15
   167e0:	mov	r4, sl
   167e4:	add	r2, r7, ip
   167e8:	add	r6, sl, ip
   167ec:	mov	r3, ip
   167f0:	vld1.8	{d16-d17}, [r7]!
   167f4:	subs	r3, r3, #16
   167f8:	vst1.8	{d16-d17}, [r4]!
   167fc:	bne	167f0 <__assert_fail@plt+0x4d64>
   16800:	cmp	ip, r0
   16804:	bne	16f7c <__assert_fail@plt+0x54f0>
   16808:	b	16f8c <__assert_fail@plt+0x5500>
   1680c:	mov	r4, r8
   16810:	cmp	r4, r9
   16814:	bcs	1686c <__assert_fail@plt+0x4de0>
   16818:	ldr	r1, [sp, #8]
   1681c:	sub	r0, r6, r4
   16820:	add	r0, r1, r0
   16824:	cmp	r0, #16
   16828:	bcc	16fb4 <__assert_fail@plt+0x5528>
   1682c:	cmp	r8, r9
   16830:	addcc	r2, r8, r0
   16834:	cmpcc	r4, r2
   16838:	bcc	16fb4 <__assert_fail@plt+0x5528>
   1683c:	bic	r7, r0, #15
   16840:	mov	r5, r8
   16844:	add	r2, r4, r7
   16848:	add	r6, r8, r7
   1684c:	mov	r3, r7
   16850:	vld1.8	{d16-d17}, [r4]!
   16854:	subs	r3, r3, #16
   16858:	vst1.8	{d16-d17}, [r5]!
   1685c:	bne	16850 <__assert_fail@plt+0x4dc4>
   16860:	cmp	r7, r0
   16864:	bne	16fbc <__assert_fail@plt+0x5530>
   16868:	b	16fcc <__assert_fail@plt+0x5540>
   1686c:	ldr	r1, [sp, #8]
   16870:	b	16fd0 <__assert_fail@plt+0x5544>
   16874:	mov	r6, sl
   16878:	cmp	r6, r5
   1687c:	bcs	16ff8 <__assert_fail@plt+0x556c>
   16880:	ldr	r0, [sp, #12]
   16884:	sub	r0, r0, r6
   16888:	add	r0, r8, r0
   1688c:	cmp	r0, #16
   16890:	bcc	16fdc <__assert_fail@plt+0x5550>
   16894:	cmp	sl, r5
   16898:	addcc	r2, sl, r0
   1689c:	cmpcc	r6, r2
   168a0:	bcc	16fdc <__assert_fail@plt+0x5550>
   168a4:	bic	ip, r0, #15
   168a8:	mov	r4, sl
   168ac:	add	r2, r6, ip
   168b0:	add	r7, sl, ip
   168b4:	mov	r3, ip
   168b8:	vld1.8	{d16-d17}, [r6]!
   168bc:	subs	r3, r3, #16
   168c0:	vst1.8	{d16-d17}, [r4]!
   168c4:	bne	168b8 <__assert_fail@plt+0x4e2c>
   168c8:	cmp	ip, r0
   168cc:	bne	16fe4 <__assert_fail@plt+0x5558>
   168d0:	b	16ff4 <__assert_fail@plt+0x5568>
   168d4:	mov	r7, sl
   168d8:	cmp	r7, r5
   168dc:	bcs	17118 <__assert_fail@plt+0x568c>
   168e0:	ldr	r0, [sp, #12]
   168e4:	mov	r1, r4
   168e8:	sub	r0, r0, r7
   168ec:	add	r0, r4, r0
   168f0:	cmp	r0, #16
   168f4:	bcc	17014 <__assert_fail@plt+0x5588>
   168f8:	cmp	sl, r5
   168fc:	addcc	r2, sl, r0
   16900:	cmpcc	r7, r2
   16904:	bcc	17014 <__assert_fail@plt+0x5588>
   16908:	bic	ip, r0, #15
   1690c:	mov	r4, sl
   16910:	add	r2, r7, ip
   16914:	add	r6, sl, ip
   16918:	mov	r3, ip
   1691c:	vld1.8	{d16-d17}, [r7]!
   16920:	subs	r3, r3, #16
   16924:	vst1.8	{d16-d17}, [r4]!
   16928:	bne	1691c <__assert_fail@plt+0x4e90>
   1692c:	cmp	ip, r0
   16930:	bne	1701c <__assert_fail@plt+0x5590>
   16934:	b	1732c <__assert_fail@plt+0x58a0>
   16938:	mov	r7, sl
   1693c:	cmp	r7, r5
   16940:	bcs	17118 <__assert_fail@plt+0x568c>
   16944:	ldr	r0, [sp, #12]
   16948:	mov	r1, r4
   1694c:	sub	r0, r0, r7
   16950:	add	r0, r4, r0
   16954:	cmp	r0, #16
   16958:	bcc	17030 <__assert_fail@plt+0x55a4>
   1695c:	cmp	sl, r5
   16960:	addcc	r2, sl, r0
   16964:	cmpcc	r7, r2
   16968:	bcc	17030 <__assert_fail@plt+0x55a4>
   1696c:	bic	ip, r0, #15
   16970:	mov	r4, sl
   16974:	add	r2, r7, ip
   16978:	add	r6, sl, ip
   1697c:	mov	r3, ip
   16980:	vld1.8	{d16-d17}, [r7]!
   16984:	subs	r3, r3, #16
   16988:	vst1.8	{d16-d17}, [r4]!
   1698c:	bne	16980 <__assert_fail@plt+0x4ef4>
   16990:	cmp	ip, r0
   16994:	bne	17038 <__assert_fail@plt+0x55ac>
   16998:	b	1732c <__assert_fail@plt+0x58a0>
   1699c:	mov	r7, sl
   169a0:	cmp	r7, r5
   169a4:	bcs	17118 <__assert_fail@plt+0x568c>
   169a8:	ldr	r0, [sp, #12]
   169ac:	mov	r1, r4
   169b0:	sub	r0, r0, r7
   169b4:	add	r0, r4, r0
   169b8:	cmp	r0, #16
   169bc:	bcc	1704c <__assert_fail@plt+0x55c0>
   169c0:	cmp	sl, r5
   169c4:	addcc	r2, sl, r0
   169c8:	cmpcc	r7, r2
   169cc:	bcc	1704c <__assert_fail@plt+0x55c0>
   169d0:	bic	ip, r0, #15
   169d4:	mov	r4, sl
   169d8:	add	r2, r7, ip
   169dc:	add	r6, sl, ip
   169e0:	mov	r3, ip
   169e4:	vld1.8	{d16-d17}, [r7]!
   169e8:	subs	r3, r3, #16
   169ec:	vst1.8	{d16-d17}, [r4]!
   169f0:	bne	169e4 <__assert_fail@plt+0x4f58>
   169f4:	cmp	ip, r0
   169f8:	bne	17054 <__assert_fail@plt+0x55c8>
   169fc:	b	1732c <__assert_fail@plt+0x58a0>
   16a00:	mov	r1, r4
   16a04:	b	170a0 <__assert_fail@plt+0x5614>
   16a08:	mov	r1, r4
   16a0c:	b	16da8 <__assert_fail@plt+0x531c>
   16a10:	ldr	r1, [sp, #8]
   16a14:	b	16e5c <__assert_fail@plt+0x53d0>
   16a18:	ldr	r1, [sp, #8]
   16a1c:	b	16f38 <__assert_fail@plt+0x54ac>
   16a20:	ldr	r1, [sp, #8]
   16a24:	b	16f60 <__assert_fail@plt+0x54d4>
   16a28:	mov	r0, r9
   16a2c:	mov	r1, r4
   16a30:	bl	18064 <__assert_fail@plt+0x65d8>
   16a34:	cmp	r0, #0
   16a38:	beq	1747c <__assert_fail@plt+0x59f0>
   16a3c:	mov	r5, r0
   16a40:	bl	17f14 <__assert_fail@plt+0x6488>
   16a44:	mov	r8, r0
   16a48:	mov	r9, #0
   16a4c:	b	17488 <__assert_fail@plt+0x59fc>
   16a50:	movw	r0, #7338	; 0x1caa
   16a54:	movt	r0, #2
   16a58:	add	r9, r6, r7
   16a5c:	str	r6, [sp, #8]
   16a60:	add	r8, r6, #1
   16a64:	mov	r6, r7
   16a68:	cmp	r7, #2
   16a6c:	str	r0, [sp, #4]
   16a70:	blt	16acc <__assert_fail@plt+0x5040>
   16a74:	movw	sl, #8825	; 0x2279
   16a78:	movw	r5, #9463	; 0x24f7
   16a7c:	mov	r4, r8
   16a80:	movt	sl, #2
   16a84:	movt	r5, #2
   16a88:	ldrb	r7, [r4]
   16a8c:	mov	r0, sl
   16a90:	mov	r2, #8
   16a94:	mov	r1, r7
   16a98:	bl	11948 <memchr@plt>
   16a9c:	cmp	r0, #0
   16aa0:	beq	16ad0 <__assert_fail@plt+0x5044>
   16aa4:	mov	r0, r5
   16aa8:	mov	r1, r7
   16aac:	mov	r2, #2
   16ab0:	bl	11948 <memchr@plt>
   16ab4:	cmp	r0, #0
   16ab8:	add	r4, r4, #1
   16abc:	strbne	r7, [r8], #1
   16ac0:	cmp	r4, r9
   16ac4:	bcc	16a88 <__assert_fail@plt+0x4ffc>
   16ac8:	b	16ad0 <__assert_fail@plt+0x5044>
   16acc:	mov	r4, r8
   16ad0:	cmp	r4, r9
   16ad4:	bcs	16cfc <__assert_fail@plt+0x5270>
   16ad8:	ldr	r1, [sp, #8]
   16adc:	sub	r0, r6, r4
   16ae0:	add	r0, r1, r0
   16ae4:	cmp	r0, #16
   16ae8:	bcc	17068 <__assert_fail@plt+0x55dc>
   16aec:	cmp	r8, r9
   16af0:	addcc	r2, r8, r0
   16af4:	cmpcc	r4, r2
   16af8:	bcc	17068 <__assert_fail@plt+0x55dc>
   16afc:	bic	r7, r0, #15
   16b00:	mov	r5, r8
   16b04:	add	r2, r4, r7
   16b08:	add	r6, r8, r7
   16b0c:	mov	r3, r7
   16b10:	vld1.8	{d16-d17}, [r4]!
   16b14:	subs	r3, r3, #16
   16b18:	vst1.8	{d16-d17}, [r5]!
   16b1c:	bne	16b10 <__assert_fail@plt+0x5084>
   16b20:	cmp	r7, r0
   16b24:	bne	17070 <__assert_fail@plt+0x55e4>
   16b28:	b	1709c <__assert_fail@plt+0x5610>
   16b2c:	mov	r1, r7
   16b30:	mov	r2, r9
   16b34:	ldrb	r3, [r2], #1
   16b38:	strb	r3, [r1], #1
   16b3c:	cmp	r8, r2
   16b40:	bne	16b34 <__assert_fail@plt+0x50a8>
   16b44:	add	r7, r7, r0
   16b48:	ldr	r1, [sp, #8]
   16b4c:	ldr	r2, [sp]
   16b50:	mov	r0, #115	; 0x73
   16b54:	strh	r0, [r7]
   16b58:	mov	r0, #1
   16b5c:	bl	11924 <__printf_chk@plt>
   16b60:	ldr	r0, [r4, #16]
   16b64:	mov	r9, #0
   16b68:	and	r0, r0, #61440	; 0xf000
   16b6c:	cmp	r0, #40960	; 0xa000
   16b70:	bne	17350 <__assert_fail@plt+0x58c4>
   16b74:	ldr	r6, [fp, #12]
   16b78:	ldr	r1, [r4, #48]	; 0x30
   16b7c:	mov	r0, r6
   16b80:	bl	1835c <__assert_fail@plt+0x68d0>
   16b84:	cmp	r0, #0
   16b88:	beq	1735c <__assert_fail@plt+0x58d0>
   16b8c:	movw	r1, #7333	; 0x1ca5
   16b90:	mov	r9, r0
   16b94:	mov	r0, #1
   16b98:	movt	r1, #2
   16b9c:	bl	11924 <__printf_chk@plt>
   16ba0:	mov	r0, #0
   16ba4:	bl	1b7b0 <__assert_fail@plt+0x9d24>
   16ba8:	mov	r1, r9
   16bac:	bl	1d104 <__assert_fail@plt+0xb678>
   16bb0:	mov	sl, r0
   16bb4:	ldr	r0, [sp, #12]
   16bb8:	cmp	r0, #2
   16bbc:	blt	175d4 <__assert_fail@plt+0x5b48>
   16bc0:	ldr	r4, [sp, #4]
   16bc4:	movw	r5, #8825	; 0x2279
   16bc8:	movw	r7, #9463	; 0x24f7
   16bcc:	movt	r5, #2
   16bd0:	movt	r7, #2
   16bd4:	ldrb	r6, [r4]
   16bd8:	mov	r0, r5
   16bdc:	mov	r2, #8
   16be0:	mov	r1, r6
   16be4:	bl	11948 <memchr@plt>
   16be8:	cmp	r0, #0
   16bec:	beq	175d8 <__assert_fail@plt+0x5b4c>
   16bf0:	mov	r0, r7
   16bf4:	mov	r1, r6
   16bf8:	mov	r2, #2
   16bfc:	bl	11948 <memchr@plt>
   16c00:	cmp	r0, #0
   16c04:	add	r4, r4, #1
   16c08:	ldrne	r0, [sp, #4]
   16c0c:	strbne	r6, [r0], #1
   16c10:	strne	r0, [sp, #4]
   16c14:	cmp	r4, r8
   16c18:	bcc	16bd4 <__assert_fail@plt+0x5148>
   16c1c:	b	175d8 <__assert_fail@plt+0x5b4c>
   16c20:	movw	r0, #7338	; 0x1caa
   16c24:	movt	r0, #2
   16c28:	add	r9, r6, r7
   16c2c:	str	r6, [sp, #8]
   16c30:	add	r8, r6, #1
   16c34:	mov	r6, r7
   16c38:	cmp	r7, #2
   16c3c:	str	r0, [sp, #4]
   16c40:	blt	16c9c <__assert_fail@plt+0x5210>
   16c44:	movw	sl, #8825	; 0x2279
   16c48:	movw	r5, #9463	; 0x24f7
   16c4c:	mov	r4, r8
   16c50:	movt	sl, #2
   16c54:	movt	r5, #2
   16c58:	ldrb	r7, [r4]
   16c5c:	mov	r0, sl
   16c60:	mov	r2, #8
   16c64:	mov	r1, r7
   16c68:	bl	11948 <memchr@plt>
   16c6c:	cmp	r0, #0
   16c70:	beq	16ca0 <__assert_fail@plt+0x5214>
   16c74:	mov	r0, r5
   16c78:	mov	r1, r7
   16c7c:	mov	r2, #2
   16c80:	bl	11948 <memchr@plt>
   16c84:	cmp	r0, #0
   16c88:	add	r4, r4, #1
   16c8c:	strbne	r7, [r8], #1
   16c90:	cmp	r4, r9
   16c94:	bcc	16c58 <__assert_fail@plt+0x51cc>
   16c98:	b	16ca0 <__assert_fail@plt+0x5214>
   16c9c:	mov	r4, r8
   16ca0:	cmp	r4, r9
   16ca4:	bcs	16cfc <__assert_fail@plt+0x5270>
   16ca8:	ldr	r1, [sp, #8]
   16cac:	sub	r0, r6, r4
   16cb0:	add	r0, r1, r0
   16cb4:	cmp	r0, #16
   16cb8:	bcc	17084 <__assert_fail@plt+0x55f8>
   16cbc:	cmp	r8, r9
   16cc0:	addcc	r2, r8, r0
   16cc4:	cmpcc	r4, r2
   16cc8:	bcc	17084 <__assert_fail@plt+0x55f8>
   16ccc:	bic	r7, r0, #15
   16cd0:	mov	r5, r8
   16cd4:	add	r2, r4, r7
   16cd8:	add	r6, r8, r7
   16cdc:	mov	r3, r7
   16ce0:	vld1.8	{d16-d17}, [r4]!
   16ce4:	subs	r3, r3, #16
   16ce8:	vst1.8	{d16-d17}, [r5]!
   16cec:	bne	16ce0 <__assert_fail@plt+0x5254>
   16cf0:	cmp	r7, r0
   16cf4:	bne	1708c <__assert_fail@plt+0x5600>
   16cf8:	b	1709c <__assert_fail@plt+0x5610>
   16cfc:	ldr	r1, [sp, #8]
   16d00:	b	170a0 <__assert_fail@plt+0x5614>
   16d04:	add	r5, r6, r7
   16d08:	mov	r4, r6
   16d0c:	add	sl, r6, #1
   16d10:	cmp	r7, #2
   16d14:	blt	173ac <__assert_fail@plt+0x5920>
   16d18:	movw	r9, #8825	; 0x2279
   16d1c:	movw	r8, #9463	; 0x24f7
   16d20:	mov	r7, sl
   16d24:	movt	r9, #2
   16d28:	movt	r8, #2
   16d2c:	ldrb	r6, [r7]
   16d30:	mov	r0, r9
   16d34:	mov	r2, #8
   16d38:	mov	r1, r6
   16d3c:	bl	11948 <memchr@plt>
   16d40:	cmp	r0, #0
   16d44:	beq	173b0 <__assert_fail@plt+0x5924>
   16d48:	mov	r0, r8
   16d4c:	mov	r1, r6
   16d50:	mov	r2, #2
   16d54:	bl	11948 <memchr@plt>
   16d58:	cmp	r0, #0
   16d5c:	add	r7, r7, #1
   16d60:	strbne	r6, [sl], #1
   16d64:	cmp	r7, r5
   16d68:	bcc	16d2c <__assert_fail@plt+0x52a0>
   16d6c:	b	173b0 <__assert_fail@plt+0x5924>
   16d70:	mov	r7, r8
   16d74:	mov	r2, r6
   16d78:	ldrb	r3, [r2], #1
   16d7c:	strb	r3, [r7], #1
   16d80:	cmp	r5, r2
   16d84:	bne	16d78 <__assert_fail@plt+0x52ec>
   16d88:	b	1709c <__assert_fail@plt+0x5610>
   16d8c:	mov	r6, sl
   16d90:	mov	r2, r7
   16d94:	ldrb	r3, [r2], #1
   16d98:	strb	r3, [r6], #1
   16d9c:	cmp	r5, r2
   16da0:	bne	16d94 <__assert_fail@plt+0x5308>
   16da4:	add	sl, sl, r0
   16da8:	movw	r0, #27756	; 0x6c6c
   16dac:	mov	r9, #0
   16db0:	mov	r2, #512	; 0x200
   16db4:	movt	r0, #117	; 0x75
   16db8:	str	r0, [sl]
   16dbc:	mov	r0, #1
   16dc0:	b	17460 <__assert_fail@plt+0x59d4>
   16dc4:	mov	r6, sl
   16dc8:	mov	r2, r7
   16dcc:	ldrb	r3, [r2], #1
   16dd0:	strb	r3, [r6], #1
   16dd4:	cmp	r5, r2
   16dd8:	bne	16dcc <__assert_fail@plt+0x5340>
   16ddc:	b	16e14 <__assert_fail@plt+0x5388>
   16de0:	mov	r6, r8
   16de4:	mov	r2, r4
   16de8:	ldrb	r3, [r2], #1
   16dec:	strb	r3, [r6], #1
   16df0:	cmp	r9, r2
   16df4:	bne	16de8 <__assert_fail@plt+0x535c>
   16df8:	b	1709c <__assert_fail@plt+0x5610>
   16dfc:	mov	r6, sl
   16e00:	mov	r2, r7
   16e04:	ldrb	r3, [r2], #1
   16e08:	strb	r3, [r6], #1
   16e0c:	cmp	r5, r2
   16e10:	bne	16e04 <__assert_fail@plt+0x5378>
   16e14:	add	sl, sl, r0
   16e18:	movw	r0, #27756	; 0x6c6c
   16e1c:	movt	r0, #120	; 0x78
   16e20:	b	16f98 <__assert_fail@plt+0x550c>
   16e24:	mov	r6, r8
   16e28:	mov	r2, r4
   16e2c:	ldrb	r3, [r2], #1
   16e30:	strb	r3, [r6], #1
   16e34:	cmp	r9, r2
   16e38:	bne	16e2c <__assert_fail@plt+0x53a0>
   16e3c:	b	16fcc <__assert_fail@plt+0x5540>
   16e40:	mov	r7, sl
   16e44:	mov	r2, r6
   16e48:	ldrb	r3, [r2], #1
   16e4c:	strb	r3, [r7], #1
   16e50:	cmp	r5, r2
   16e54:	bne	16e48 <__assert_fail@plt+0x53bc>
   16e58:	add	sl, sl, r0
   16e5c:	movw	r0, #27756	; 0x6c6c
   16e60:	mov	r9, #0
   16e64:	mov	r2, r8
   16e68:	movt	r0, #111	; 0x6f
   16e6c:	str	r0, [sl]
   16e70:	mov	r0, #1
   16e74:	b	17460 <__assert_fail@plt+0x59d4>
   16e78:	mov	r6, sl
   16e7c:	mov	r2, r7
   16e80:	ldrb	r3, [r2], #1
   16e84:	strb	r3, [r6], #1
   16e88:	cmp	r5, r2
   16e8c:	bne	16e80 <__assert_fail@plt+0x53f4>
   16e90:	b	16f0c <__assert_fail@plt+0x5480>
   16e94:	mov	r7, sl
   16e98:	mov	r2, r6
   16e9c:	ldrb	r3, [r2], #1
   16ea0:	strb	r3, [r7], #1
   16ea4:	cmp	r5, r2
   16ea8:	bne	16e9c <__assert_fail@plt+0x5410>
   16eac:	add	sl, sl, r0
   16eb0:	movw	r0, #27756	; 0x6c6c
   16eb4:	movt	r0, #120	; 0x78
   16eb8:	b	17000 <__assert_fail@plt+0x5574>
   16ebc:	mov	r7, sl
   16ec0:	mov	r2, r6
   16ec4:	ldrb	r3, [r2], #1
   16ec8:	strb	r3, [r7], #1
   16ecc:	cmp	r5, r2
   16ed0:	bne	16ec4 <__assert_fail@plt+0x5438>
   16ed4:	b	16ff4 <__assert_fail@plt+0x5568>
   16ed8:	mov	r7, sl
   16edc:	mov	r2, r6
   16ee0:	ldrb	r3, [r2], #1
   16ee4:	strb	r3, [r7], #1
   16ee8:	cmp	r5, r2
   16eec:	bne	16ee0 <__assert_fail@plt+0x5454>
   16ef0:	b	16ff4 <__assert_fail@plt+0x5568>
   16ef4:	mov	r6, sl
   16ef8:	mov	r2, r7
   16efc:	ldrb	r3, [r2], #1
   16f00:	strb	r3, [r6], #1
   16f04:	cmp	r5, r2
   16f08:	bne	16efc <__assert_fail@plt+0x5470>
   16f0c:	add	sl, sl, r0
   16f10:	movw	r0, #27756	; 0x6c6c
   16f14:	movt	r0, #117	; 0x75
   16f18:	b	16f98 <__assert_fail@plt+0x550c>
   16f1c:	mov	r7, r8
   16f20:	mov	r6, sl
   16f24:	ldrb	r3, [r6], #1
   16f28:	strb	r3, [r7], #1
   16f2c:	cmp	r5, r6
   16f30:	bne	16f24 <__assert_fail@plt+0x5498>
   16f34:	add	r8, r8, r0
   16f38:	mov	r0, #115	; 0x73
   16f3c:	strh	r0, [r8]
   16f40:	b	17344 <__assert_fail@plt+0x58b8>
   16f44:	mov	r5, sl
   16f48:	mov	r2, r6
   16f4c:	ldrb	r3, [r2], #1
   16f50:	strb	r3, [r5], #1
   16f54:	cmp	r8, r2
   16f58:	bne	16f4c <__assert_fail@plt+0x54c0>
   16f5c:	add	sl, sl, r0
   16f60:	movw	r0, #27756	; 0x6c6c
   16f64:	movt	r0, #117	; 0x75
   16f68:	str	r0, [sl]
   16f6c:	mov	r0, #1
   16f70:	b	16fa4 <__assert_fail@plt+0x5518>
   16f74:	mov	r6, sl
   16f78:	mov	r2, r7
   16f7c:	ldrb	r3, [r2], #1
   16f80:	strb	r3, [r6], #1
   16f84:	cmp	r5, r2
   16f88:	bne	16f7c <__assert_fail@plt+0x54f0>
   16f8c:	add	sl, sl, r0
   16f90:	movw	r0, #27756	; 0x6c6c
   16f94:	movt	r0, #100	; 0x64
   16f98:	str	r0, [sl]
   16f9c:	mov	r0, #1
   16fa0:	mov	r1, r8
   16fa4:	ldr	r2, [sp]
   16fa8:	ldr	r3, [sp, #4]
   16fac:	bl	11924 <__printf_chk@plt>
   16fb0:	b	1734c <__assert_fail@plt+0x58c0>
   16fb4:	mov	r6, r8
   16fb8:	mov	r2, r4
   16fbc:	ldrb	r3, [r2], #1
   16fc0:	strb	r3, [r6], #1
   16fc4:	cmp	r9, r2
   16fc8:	bne	16fbc <__assert_fail@plt+0x5530>
   16fcc:	add	r8, r8, r0
   16fd0:	movw	r0, #27756	; 0x6c6c
   16fd4:	movt	r0, #120	; 0x78
   16fd8:	b	17450 <__assert_fail@plt+0x59c4>
   16fdc:	mov	r7, sl
   16fe0:	mov	r2, r6
   16fe4:	ldrb	r3, [r2], #1
   16fe8:	strb	r3, [r7], #1
   16fec:	cmp	r5, r2
   16ff0:	bne	16fe4 <__assert_fail@plt+0x5558>
   16ff4:	add	sl, sl, r0
   16ff8:	movw	r0, #27756	; 0x6c6c
   16ffc:	movt	r0, #117	; 0x75
   17000:	str	r0, [sl]
   17004:	mov	r9, #0
   17008:	mov	r0, #1
   1700c:	mov	r1, r8
   17010:	b	1745c <__assert_fail@plt+0x59d0>
   17014:	mov	r6, sl
   17018:	mov	r2, r7
   1701c:	ldrb	r3, [r2], #1
   17020:	strb	r3, [r6], #1
   17024:	cmp	r5, r2
   17028:	bne	1701c <__assert_fail@plt+0x5590>
   1702c:	b	1732c <__assert_fail@plt+0x58a0>
   17030:	mov	r6, sl
   17034:	mov	r2, r7
   17038:	ldrb	r3, [r2], #1
   1703c:	strb	r3, [r6], #1
   17040:	cmp	r5, r2
   17044:	bne	17038 <__assert_fail@plt+0x55ac>
   17048:	b	1732c <__assert_fail@plt+0x58a0>
   1704c:	mov	r6, sl
   17050:	mov	r2, r7
   17054:	ldrb	r3, [r2], #1
   17058:	strb	r3, [r6], #1
   1705c:	cmp	r5, r2
   17060:	bne	17054 <__assert_fail@plt+0x55c8>
   17064:	b	1732c <__assert_fail@plt+0x58a0>
   17068:	mov	r6, r8
   1706c:	mov	r2, r4
   17070:	ldrb	r3, [r2], #1
   17074:	strb	r3, [r6], #1
   17078:	cmp	r9, r2
   1707c:	bne	17070 <__assert_fail@plt+0x55e4>
   17080:	b	1709c <__assert_fail@plt+0x5610>
   17084:	mov	r6, r8
   17088:	mov	r2, r4
   1708c:	ldrb	r3, [r2], #1
   17090:	strb	r3, [r6], #1
   17094:	cmp	r9, r2
   17098:	bne	1708c <__assert_fail@plt+0x5600>
   1709c:	add	r8, r8, r0
   170a0:	mov	r0, #115	; 0x73
   170a4:	strh	r0, [r8]
   170a8:	mov	r0, #1
   170ac:	ldr	r2, [sp, #4]
   170b0:	b	17348 <__assert_fail@plt+0x58bc>
   170b4:	mov	r7, sl
   170b8:	cmp	r7, r5
   170bc:	bcs	17118 <__assert_fail@plt+0x568c>
   170c0:	ldr	r0, [sp, #12]
   170c4:	mov	r1, r4
   170c8:	sub	r0, r0, r7
   170cc:	add	r0, r4, r0
   170d0:	cmp	r0, #16
   170d4:	bcc	17314 <__assert_fail@plt+0x5888>
   170d8:	cmp	sl, r5
   170dc:	addcc	r2, sl, r0
   170e0:	cmpcc	r7, r2
   170e4:	bcc	17314 <__assert_fail@plt+0x5888>
   170e8:	bic	ip, r0, #15
   170ec:	mov	r4, sl
   170f0:	add	r2, r7, ip
   170f4:	add	r6, sl, ip
   170f8:	mov	r3, ip
   170fc:	vld1.8	{d16-d17}, [r7]!
   17100:	subs	r3, r3, #16
   17104:	vst1.8	{d16-d17}, [r4]!
   17108:	bne	170fc <__assert_fail@plt+0x5670>
   1710c:	cmp	ip, r0
   17110:	bne	1731c <__assert_fail@plt+0x5890>
   17114:	b	1732c <__assert_fail@plt+0x58a0>
   17118:	mov	r1, r4
   1711c:	b	17330 <__assert_fail@plt+0x58a4>
   17120:	bl	118e8 <__errno_location@plt>
   17124:	ldr	r4, [r0]
   17128:	movw	r1, #7368	; 0x1cc8
   1712c:	mov	r0, #0
   17130:	mov	r2, #5
   17134:	mov	r8, #0
   17138:	movt	r1, #2
   1713c:	bl	1172c <dcgettext@plt>
   17140:	mov	r5, r0
   17144:	mov	r0, #4
   17148:	mov	r1, r9
   1714c:	bl	1d104 <__assert_fail@plt+0xb678>
   17150:	mov	r3, r0
   17154:	mov	r0, #0
   17158:	mov	r1, r4
   1715c:	mov	r2, r5
   17160:	bl	117e0 <error@plt>
   17164:	mov	r9, #1
   17168:	b	17484 <__assert_fail@plt+0x59f8>
   1716c:	mov	r4, r8
   17170:	cmp	r4, r9
   17174:	bcs	1722c <__assert_fail@plt+0x57a0>
   17178:	ldr	r1, [sp, #8]
   1717c:	sub	r0, r6, r4
   17180:	add	r0, r1, r0
   17184:	cmp	r0, #16
   17188:	bcc	17410 <__assert_fail@plt+0x5984>
   1718c:	cmp	r8, r9
   17190:	addcc	r2, r8, r0
   17194:	cmpcc	r4, r2
   17198:	bcc	17410 <__assert_fail@plt+0x5984>
   1719c:	bic	r7, r0, #15
   171a0:	mov	r5, r8
   171a4:	add	r2, r4, r7
   171a8:	add	r6, r8, r7
   171ac:	mov	r3, r7
   171b0:	vld1.8	{d16-d17}, [r4]!
   171b4:	subs	r3, r3, #16
   171b8:	vst1.8	{d16-d17}, [r5]!
   171bc:	bne	171b0 <__assert_fail@plt+0x5724>
   171c0:	cmp	r7, r0
   171c4:	bne	17418 <__assert_fail@plt+0x598c>
   171c8:	b	17444 <__assert_fail@plt+0x59b8>
   171cc:	mov	r4, r8
   171d0:	cmp	r4, r9
   171d4:	bcs	1722c <__assert_fail@plt+0x57a0>
   171d8:	ldr	r1, [sp, #8]
   171dc:	sub	r0, r6, r4
   171e0:	add	r0, r1, r0
   171e4:	cmp	r0, #16
   171e8:	bcc	1742c <__assert_fail@plt+0x59a0>
   171ec:	cmp	r8, r9
   171f0:	addcc	r2, r8, r0
   171f4:	cmpcc	r4, r2
   171f8:	bcc	1742c <__assert_fail@plt+0x59a0>
   171fc:	bic	r7, r0, #15
   17200:	mov	r5, r8
   17204:	add	r2, r4, r7
   17208:	add	r6, r8, r7
   1720c:	mov	r3, r7
   17210:	vld1.8	{d16-d17}, [r4]!
   17214:	subs	r3, r3, #16
   17218:	vst1.8	{d16-d17}, [r5]!
   1721c:	bne	17210 <__assert_fail@plt+0x5784>
   17220:	cmp	r7, r0
   17224:	bne	17434 <__assert_fail@plt+0x59a8>
   17228:	b	17444 <__assert_fail@plt+0x59b8>
   1722c:	ldr	r1, [sp, #8]
   17230:	b	17448 <__assert_fail@plt+0x59bc>
   17234:	add	r5, r6, r7
   17238:	add	sl, r6, #1
   1723c:	cmp	r7, #2
   17240:	str	r1, [sp, #4]
   17244:	str	r7, [sp, #12]
   17248:	blt	17744 <__assert_fail@plt+0x5cb8>
   1724c:	movw	r4, #8825	; 0x2279
   17250:	movw	r9, #7346	; 0x1cb2
   17254:	mov	r7, sl
   17258:	movt	r4, #2
   1725c:	movt	r9, #2
   17260:	ldrb	r6, [r7]
   17264:	mov	r0, r4
   17268:	mov	r2, #8
   1726c:	mov	r1, r6
   17270:	bl	11948 <memchr@plt>
   17274:	cmp	r0, #0
   17278:	beq	17748 <__assert_fail@plt+0x5cbc>
   1727c:	mov	r0, r9
   17280:	mov	r1, r6
   17284:	mov	r2, #4
   17288:	bl	11948 <memchr@plt>
   1728c:	cmp	r0, #0
   17290:	add	r7, r7, #1
   17294:	strbne	r6, [sl], #1
   17298:	cmp	r7, r5
   1729c:	bcc	17260 <__assert_fail@plt+0x57d4>
   172a0:	b	17748 <__assert_fail@plt+0x5cbc>
   172a4:	add	r5, r6, r7
   172a8:	add	sl, r6, #1
   172ac:	cmp	r7, #2
   172b0:	str	r1, [sp, #4]
   172b4:	str	r7, [sp, #12]
   172b8:	blt	177a8 <__assert_fail@plt+0x5d1c>
   172bc:	movw	r4, #8825	; 0x2279
   172c0:	movw	r9, #7346	; 0x1cb2
   172c4:	mov	r7, sl
   172c8:	movt	r4, #2
   172cc:	movt	r9, #2
   172d0:	ldrb	r6, [r7]
   172d4:	mov	r0, r4
   172d8:	mov	r2, #8
   172dc:	mov	r1, r6
   172e0:	bl	11948 <memchr@plt>
   172e4:	cmp	r0, #0
   172e8:	beq	177ac <__assert_fail@plt+0x5d20>
   172ec:	mov	r0, r9
   172f0:	mov	r1, r6
   172f4:	mov	r2, #4
   172f8:	bl	11948 <memchr@plt>
   172fc:	cmp	r0, #0
   17300:	add	r7, r7, #1
   17304:	strbne	r6, [sl], #1
   17308:	cmp	r7, r5
   1730c:	bcc	172d0 <__assert_fail@plt+0x5844>
   17310:	b	177ac <__assert_fail@plt+0x5d20>
   17314:	mov	r6, sl
   17318:	mov	r2, r7
   1731c:	ldrb	r3, [r2], #1
   17320:	strb	r3, [r6], #1
   17324:	cmp	r5, r2
   17328:	bne	1731c <__assert_fail@plt+0x5890>
   1732c:	add	sl, sl, r0
   17330:	mov	r0, #115	; 0x73
   17334:	strh	r0, [sl]
   17338:	movw	r0, #12808	; 0x3208
   1733c:	movt	r0, #3
   17340:	add	r2, r0, #36	; 0x24
   17344:	mov	r0, #1
   17348:	bl	11924 <__printf_chk@plt>
   1734c:	mov	r9, #0
   17350:	mov	r0, r9
   17354:	sub	sp, fp, #28
   17358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1735c:	bl	118e8 <__errno_location@plt>
   17360:	ldr	r4, [r0]
   17364:	movw	r1, #7304	; 0x1c88
   17368:	mov	r0, #0
   1736c:	mov	r2, #5
   17370:	movt	r1, #2
   17374:	bl	1172c <dcgettext@plt>
   17378:	mov	r5, r0
   1737c:	mov	r0, #4
   17380:	mov	r1, r6
   17384:	bl	1d104 <__assert_fail@plt+0xb678>
   17388:	mov	r3, r0
   1738c:	mov	r0, #0
   17390:	mov	r1, r4
   17394:	mov	r2, r5
   17398:	bl	117e0 <error@plt>
   1739c:	mov	r9, #1
   173a0:	mov	r0, r9
   173a4:	sub	sp, fp, #28
   173a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173ac:	mov	r7, sl
   173b0:	cmp	r7, r5
   173b4:	bcs	17474 <__assert_fail@plt+0x59e8>
   173b8:	ldr	r0, [sp, #12]
   173bc:	mov	r1, r4
   173c0:	sub	r0, r0, r7
   173c4:	add	r0, r4, r0
   173c8:	cmp	r0, #16
   173cc:	bcc	17644 <__assert_fail@plt+0x5bb8>
   173d0:	cmp	sl, r5
   173d4:	addcc	r2, sl, r0
   173d8:	cmpcc	r7, r2
   173dc:	bcc	17644 <__assert_fail@plt+0x5bb8>
   173e0:	bic	ip, r0, #15
   173e4:	mov	r4, sl
   173e8:	add	r2, r7, ip
   173ec:	add	r6, sl, ip
   173f0:	mov	r3, ip
   173f4:	vld1.8	{d16-d17}, [r7]!
   173f8:	subs	r3, r3, #16
   173fc:	vst1.8	{d16-d17}, [r4]!
   17400:	bne	173f4 <__assert_fail@plt+0x5968>
   17404:	cmp	ip, r0
   17408:	bne	1764c <__assert_fail@plt+0x5bc0>
   1740c:	b	1765c <__assert_fail@plt+0x5bd0>
   17410:	mov	r6, r8
   17414:	mov	r2, r4
   17418:	ldrb	r3, [r2], #1
   1741c:	strb	r3, [r6], #1
   17420:	cmp	r9, r2
   17424:	bne	17418 <__assert_fail@plt+0x598c>
   17428:	b	17444 <__assert_fail@plt+0x59b8>
   1742c:	mov	r6, r8
   17430:	mov	r2, r4
   17434:	ldrb	r3, [r2], #1
   17438:	strb	r3, [r6], #1
   1743c:	cmp	r9, r2
   17440:	bne	17434 <__assert_fail@plt+0x59a8>
   17444:	add	r8, r8, r0
   17448:	movw	r0, #27756	; 0x6c6c
   1744c:	movt	r0, #117	; 0x75
   17450:	str	r0, [r8]
   17454:	mov	r9, #0
   17458:	mov	r0, #1
   1745c:	ldr	r2, [sp, #4]
   17460:	mov	r3, #0
   17464:	bl	11924 <__printf_chk@plt>
   17468:	mov	r0, r9
   1746c:	sub	sp, fp, #28
   17470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17474:	mov	r1, r4
   17478:	b	17660 <__assert_fail@plt+0x5bd4>
   1747c:	mov	r9, #1
   17480:	mov	r8, #0
   17484:	mov	r5, #0
   17488:	movw	r0, #7366	; 0x1cc6
   1748c:	cmp	r5, #0
   17490:	add	r4, r6, r7
   17494:	str	r5, [sp, #4]
   17498:	str	r6, [sp, #8]
   1749c:	str	r7, [sp, #12]
   174a0:	movt	r0, #2
   174a4:	movne	r0, r5
   174a8:	cmp	r8, #0
   174ac:	movne	r0, r8
   174b0:	add	r8, r6, #1
   174b4:	cmp	r7, #2
   174b8:	str	r0, [sp]
   174bc:	blt	17518 <__assert_fail@plt+0x5a8c>
   174c0:	movw	r5, #8825	; 0x2279
   174c4:	movw	r7, #9463	; 0x24f7
   174c8:	mov	r6, r8
   174cc:	movt	r5, #2
   174d0:	movt	r7, #2
   174d4:	ldrb	sl, [r6]
   174d8:	mov	r0, r5
   174dc:	mov	r2, #8
   174e0:	mov	r1, sl
   174e4:	bl	11948 <memchr@plt>
   174e8:	cmp	r0, #0
   174ec:	beq	1751c <__assert_fail@plt+0x5a90>
   174f0:	mov	r0, r7
   174f4:	mov	r1, sl
   174f8:	mov	r2, #2
   174fc:	bl	11948 <memchr@plt>
   17500:	cmp	r0, #0
   17504:	add	r6, r6, #1
   17508:	strbne	sl, [r8], #1
   1750c:	cmp	r6, r4
   17510:	bcc	174d4 <__assert_fail@plt+0x5a48>
   17514:	b	1751c <__assert_fail@plt+0x5a90>
   17518:	mov	r6, r8
   1751c:	cmp	r6, r4
   17520:	bcs	17584 <__assert_fail@plt+0x5af8>
   17524:	ldr	r0, [sp, #12]
   17528:	ldr	r1, [sp, #8]
   1752c:	ldr	r5, [sp, #4]
   17530:	sub	r0, r0, r6
   17534:	add	lr, r1, r0
   17538:	cmp	lr, #16
   1753c:	bcc	17590 <__assert_fail@plt+0x5b04>
   17540:	cmp	r8, r4
   17544:	addcc	r0, r8, lr
   17548:	cmpcc	r6, r0
   1754c:	bcc	17590 <__assert_fail@plt+0x5b04>
   17550:	bic	ip, lr, #15
   17554:	mov	r5, r8
   17558:	add	r2, r6, ip
   1755c:	add	r0, r8, ip
   17560:	mov	r3, ip
   17564:	vld1.8	{d16-d17}, [r6]!
   17568:	subs	r3, r3, #16
   1756c:	vst1.8	{d16-d17}, [r5]!
   17570:	bne	17564 <__assert_fail@plt+0x5ad8>
   17574:	ldr	r5, [sp, #4]
   17578:	cmp	ip, lr
   1757c:	bne	17598 <__assert_fail@plt+0x5b0c>
   17580:	b	175a8 <__assert_fail@plt+0x5b1c>
   17584:	ldr	r1, [sp, #8]
   17588:	ldr	r5, [sp, #4]
   1758c:	b	175ac <__assert_fail@plt+0x5b20>
   17590:	mov	r0, r8
   17594:	mov	r2, r6
   17598:	ldrb	r3, [r2], #1
   1759c:	strb	r3, [r0], #1
   175a0:	cmp	r4, r2
   175a4:	bne	17598 <__assert_fail@plt+0x5b0c>
   175a8:	add	r8, r8, lr
   175ac:	ldr	r2, [sp]
   175b0:	mov	r0, #115	; 0x73
   175b4:	strh	r0, [r8]
   175b8:	mov	r0, #1
   175bc:	bl	11924 <__printf_chk@plt>
   175c0:	mov	r0, r5
   175c4:	bl	18ea0 <__assert_fail@plt+0x7414>
   175c8:	mov	r0, r9
   175cc:	sub	sp, fp, #28
   175d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175d4:	ldr	r4, [sp, #4]
   175d8:	cmp	r4, r8
   175dc:	bcs	1763c <__assert_fail@plt+0x5bb0>
   175e0:	ldr	r0, [sp, #12]
   175e4:	ldr	r1, [sp, #8]
   175e8:	ldr	r5, [sp, #4]
   175ec:	sub	r0, r0, r4
   175f0:	add	r0, r1, r0
   175f4:	cmp	r0, #16
   175f8:	bcc	17814 <__assert_fail@plt+0x5d88>
   175fc:	cmp	r5, r8
   17600:	addcc	r1, r5, r0
   17604:	cmpcc	r4, r1
   17608:	bcc	17814 <__assert_fail@plt+0x5d88>
   1760c:	bic	r7, r0, #15
   17610:	mov	r6, r5
   17614:	add	r2, r4, r7
   17618:	add	r1, r5, r7
   1761c:	mov	r3, r7
   17620:	vld1.8	{d16-d17}, [r4]!
   17624:	subs	r3, r3, #16
   17628:	vst1.8	{d16-d17}, [r6]!
   1762c:	bne	17620 <__assert_fail@plt+0x5b94>
   17630:	cmp	r7, r0
   17634:	bne	1781c <__assert_fail@plt+0x5d90>
   17638:	b	1782c <__assert_fail@plt+0x5da0>
   1763c:	ldr	r5, [sp, #4]
   17640:	b	17830 <__assert_fail@plt+0x5da4>
   17644:	mov	r6, sl
   17648:	mov	r2, r7
   1764c:	ldrb	r3, [r2], #1
   17650:	strb	r3, [r6], #1
   17654:	cmp	r5, r2
   17658:	bne	1764c <__assert_fail@plt+0x5bc0>
   1765c:	add	sl, sl, r0
   17660:	movw	r2, #9463	; 0x24f7
   17664:	mov	r0, #115	; 0x73
   17668:	strh	r0, [sl]
   1766c:	movt	r2, #2
   17670:	b	17344 <__assert_fail@plt+0x58b8>
   17674:	mov	sl, r8
   17678:	cmp	sl, r9
   1767c:	bcs	1773c <__assert_fail@plt+0x5cb0>
   17680:	ldr	r1, [sp, #8]
   17684:	sub	r0, r6, sl
   17688:	add	r0, r1, r0
   1768c:	cmp	r0, #16
   17690:	bcc	17854 <__assert_fail@plt+0x5dc8>
   17694:	cmp	r8, r9
   17698:	addcc	r1, r8, r0
   1769c:	cmpcc	sl, r1
   176a0:	bcc	17854 <__assert_fail@plt+0x5dc8>
   176a4:	bic	r7, r0, #15
   176a8:	mov	r6, r8
   176ac:	add	r4, sl, r7
   176b0:	add	r1, r8, r7
   176b4:	mov	r3, r7
   176b8:	vld1.8	{d16-d17}, [sl]!
   176bc:	subs	r3, r3, #16
   176c0:	vst1.8	{d16-d17}, [r6]!
   176c4:	bne	176b8 <__assert_fail@plt+0x5c2c>
   176c8:	ldr	r2, [sp, #4]
   176cc:	cmp	r7, r0
   176d0:	bne	17860 <__assert_fail@plt+0x5dd4>
   176d4:	b	17890 <__assert_fail@plt+0x5e04>
   176d8:	mov	sl, r8
   176dc:	cmp	sl, r9
   176e0:	bcs	1773c <__assert_fail@plt+0x5cb0>
   176e4:	ldr	r1, [sp, #8]
   176e8:	sub	r0, r6, sl
   176ec:	add	r0, r1, r0
   176f0:	cmp	r0, #16
   176f4:	bcc	17874 <__assert_fail@plt+0x5de8>
   176f8:	cmp	r8, r9
   176fc:	addcc	r1, r8, r0
   17700:	cmpcc	sl, r1
   17704:	bcc	17874 <__assert_fail@plt+0x5de8>
   17708:	bic	r7, r0, #15
   1770c:	mov	r6, r8
   17710:	add	r4, sl, r7
   17714:	add	r1, r8, r7
   17718:	mov	r3, r7
   1771c:	vld1.8	{d16-d17}, [sl]!
   17720:	subs	r3, r3, #16
   17724:	vst1.8	{d16-d17}, [r6]!
   17728:	bne	1771c <__assert_fail@plt+0x5c90>
   1772c:	ldr	r2, [sp, #4]
   17730:	cmp	r7, r0
   17734:	bne	17880 <__assert_fail@plt+0x5df4>
   17738:	b	17890 <__assert_fail@plt+0x5e04>
   1773c:	ldr	r2, [sp, #4]
   17740:	b	17894 <__assert_fail@plt+0x5e08>
   17744:	mov	r7, sl
   17748:	cmp	r7, r5
   1774c:	bcs	1780c <__assert_fail@plt+0x5d80>
   17750:	ldr	r0, [sp, #12]
   17754:	ldr	r1, [sp, #8]
   17758:	sub	r0, r0, r7
   1775c:	add	r0, r1, r0
   17760:	cmp	r0, #16
   17764:	bcc	178b0 <__assert_fail@plt+0x5e24>
   17768:	cmp	sl, r5
   1776c:	addcc	r2, sl, r0
   17770:	cmpcc	r7, r2
   17774:	bcc	178b0 <__assert_fail@plt+0x5e24>
   17778:	bic	ip, r0, #15
   1777c:	mov	r4, sl
   17780:	add	r2, r7, ip
   17784:	add	r6, sl, ip
   17788:	mov	r3, ip
   1778c:	vld1.8	{d16-d17}, [r7]!
   17790:	subs	r3, r3, #16
   17794:	vst1.8	{d16-d17}, [r4]!
   17798:	bne	1778c <__assert_fail@plt+0x5d00>
   1779c:	cmp	ip, r0
   177a0:	bne	178b8 <__assert_fail@plt+0x5e2c>
   177a4:	b	178e4 <__assert_fail@plt+0x5e58>
   177a8:	mov	r7, sl
   177ac:	cmp	r7, r5
   177b0:	bcs	1780c <__assert_fail@plt+0x5d80>
   177b4:	ldr	r0, [sp, #12]
   177b8:	ldr	r1, [sp, #8]
   177bc:	sub	r0, r0, r7
   177c0:	add	r0, r1, r0
   177c4:	cmp	r0, #16
   177c8:	bcc	178cc <__assert_fail@plt+0x5e40>
   177cc:	cmp	sl, r5
   177d0:	addcc	r2, sl, r0
   177d4:	cmpcc	r7, r2
   177d8:	bcc	178cc <__assert_fail@plt+0x5e40>
   177dc:	bic	ip, r0, #15
   177e0:	mov	r4, sl
   177e4:	add	r2, r7, ip
   177e8:	add	r6, sl, ip
   177ec:	mov	r3, ip
   177f0:	vld1.8	{d16-d17}, [r7]!
   177f4:	subs	r3, r3, #16
   177f8:	vst1.8	{d16-d17}, [r4]!
   177fc:	bne	177f0 <__assert_fail@plt+0x5d64>
   17800:	cmp	ip, r0
   17804:	bne	178d4 <__assert_fail@plt+0x5e48>
   17808:	b	178e4 <__assert_fail@plt+0x5e58>
   1780c:	ldr	r1, [sp, #8]
   17810:	b	178e8 <__assert_fail@plt+0x5e5c>
   17814:	mov	r1, r5
   17818:	mov	r2, r4
   1781c:	ldrb	r3, [r2], #1
   17820:	strb	r3, [r1], #1
   17824:	cmp	r8, r2
   17828:	bne	1781c <__assert_fail@plt+0x5d90>
   1782c:	add	r5, r5, r0
   17830:	ldr	r1, [sp, #8]
   17834:	mov	r0, #115	; 0x73
   17838:	mov	r2, sl
   1783c:	strh	r0, [r5]
   17840:	mov	r0, #1
   17844:	bl	11924 <__printf_chk@plt>
   17848:	mov	r0, r9
   1784c:	bl	18ea0 <__assert_fail@plt+0x7414>
   17850:	b	1734c <__assert_fail@plt+0x58c0>
   17854:	ldr	r2, [sp, #4]
   17858:	mov	r1, r8
   1785c:	mov	r4, sl
   17860:	ldrb	r3, [r4], #1
   17864:	strb	r3, [r1], #1
   17868:	cmp	r9, r4
   1786c:	bne	17860 <__assert_fail@plt+0x5dd4>
   17870:	b	17890 <__assert_fail@plt+0x5e04>
   17874:	ldr	r2, [sp, #4]
   17878:	mov	r1, r8
   1787c:	mov	r4, sl
   17880:	ldrb	r3, [r4], #1
   17884:	strb	r3, [r1], #1
   17888:	cmp	r9, r4
   1788c:	bne	17880 <__assert_fail@plt+0x5df4>
   17890:	add	r8, r8, r0
   17894:	movw	r0, #27756	; 0x6c6c
   17898:	mov	r9, #0
   1789c:	movt	r0, #117	; 0x75
   178a0:	str	r0, [r8]
   178a4:	mov	r0, #1
   178a8:	ldr	r1, [sp, #8]
   178ac:	b	17460 <__assert_fail@plt+0x59d4>
   178b0:	mov	r6, sl
   178b4:	mov	r2, r7
   178b8:	ldrb	r3, [r2], #1
   178bc:	strb	r3, [r6], #1
   178c0:	cmp	r5, r2
   178c4:	bne	178b8 <__assert_fail@plt+0x5e2c>
   178c8:	b	178e4 <__assert_fail@plt+0x5e58>
   178cc:	mov	r6, sl
   178d0:	mov	r2, r7
   178d4:	ldrb	r3, [r2], #1
   178d8:	strb	r3, [r6], #1
   178dc:	cmp	r5, r2
   178e0:	bne	178d4 <__assert_fail@plt+0x5e48>
   178e4:	add	sl, sl, r0
   178e8:	movw	r0, #27756	; 0x6c6c
   178ec:	mov	r2, r8
   178f0:	movt	r0, #117	; 0x75
   178f4:	str	r0, [sl]
   178f8:	mov	r0, #1
   178fc:	b	16fa8 <__assert_fail@plt+0x551c>
   17900:	mov	r1, #63	; 0x3f
   17904:	bl	11990 <__overflow@plt>
   17908:	b	1734c <__assert_fail@plt+0x58c0>
   1790c:	push	{r4, r5, fp, lr}
   17910:	add	fp, sp, #8
   17914:	sub	sp, sp, #88	; 0x58
   17918:	movw	r5, #12808	; 0x3208
   1791c:	str	r1, [fp, #-12]
   17920:	str	r0, [fp, #-16]
   17924:	mov	r4, r1
   17928:	movt	r5, #3
   1792c:	ldr	r0, [r5, #20]
   17930:	cmp	r0, #0
   17934:	bne	1794c <__assert_fail@plt+0x5ec0>
   17938:	movw	r0, #7446	; 0x1d16
   1793c:	movt	r0, #2
   17940:	bl	11804 <getenv@plt>
   17944:	bl	1d840 <__assert_fail@plt+0xbdb4>
   17948:	str	r0, [r5, #20]
   1794c:	sub	r1, fp, #16
   17950:	add	r2, sp, #36	; 0x24
   17954:	bl	1d904 <__assert_fail@plt+0xbe78>
   17958:	cmp	r0, #0
   1795c:	beq	17988 <__assert_fail@plt+0x5efc>
   17960:	ldr	r0, [r5, #20]
   17964:	movw	r2, #7449	; 0x1d19
   17968:	add	r3, sp, #36	; 0x24
   1796c:	mov	r1, #61	; 0x3d
   17970:	movt	r2, #2
   17974:	stm	sp, {r0, r4}
   17978:	add	r0, r5, #36	; 0x24
   1797c:	bl	19c18 <__assert_fail@plt+0x818c>
   17980:	sub	sp, fp, #8
   17984:	pop	{r4, r5, fp, pc}
   17988:	ldr	r0, [fp, #-16]
   1798c:	add	r2, sp, #15
   17990:	asr	r1, r0, #31
   17994:	bl	18ec8 <__assert_fail@plt+0x743c>
   17998:	movw	r3, #7473	; 0x1d31
   1799c:	stm	sp, {r0, r4}
   179a0:	add	r0, r5, #36	; 0x24
   179a4:	mov	r1, #1
   179a8:	mov	r2, #61	; 0x3d
   179ac:	movt	r3, #2
   179b0:	bl	118f4 <__sprintf_chk@plt>
   179b4:	sub	sp, fp, #8
   179b8:	pop	{r4, r5, fp, pc}
   179bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179c0:	add	fp, sp, #28
   179c4:	sub	sp, sp, #44	; 0x2c
   179c8:	mov	r4, r1
   179cc:	mov	sl, r2
   179d0:	mov	r1, #46	; 0x2e
   179d4:	mov	r8, r3
   179d8:	mov	r6, r0
   179dc:	mov	r2, r4
   179e0:	bl	11948 <memchr@plt>
   179e4:	cmp	r0, #0
   179e8:	beq	17ad8 <__assert_fail@plt+0x604c>
   179ec:	mov	r7, r0
   179f0:	mov	r9, #0
   179f4:	sub	r0, r0, r6
   179f8:	mov	r5, #9
   179fc:	str	r0, [fp, #-32]	; 0xffffffe0
   17a00:	strb	r9, [r6, r4]
   17a04:	mov	r0, r7
   17a08:	ldrb	r1, [r0, #1]!
   17a0c:	sub	r1, r1, #48	; 0x30
   17a10:	cmp	r1, #9
   17a14:	bhi	17a34 <__assert_fail@plt+0x5fa8>
   17a18:	mov	r1, #0
   17a1c:	mov	r2, #10
   17a20:	mov	r4, #0
   17a24:	bl	116c0 <strtol@plt>
   17a28:	mov	r5, r0
   17a2c:	cmp	r0, #0
   17a30:	beq	17ae0 <__assert_fail@plt+0x6054>
   17a34:	ldrb	r0, [r7, #-1]
   17a38:	sub	r0, r0, #48	; 0x30
   17a3c:	cmp	r0, #9
   17a40:	bhi	17ac8 <__assert_fail@plt+0x603c>
   17a44:	mov	r0, #0
   17a48:	strb	r0, [r7]
   17a4c:	ldrb	r0, [r7, #-2]
   17a50:	sub	r4, r7, #1
   17a54:	mov	r7, r4
   17a58:	sub	r0, r0, #48	; 0x30
   17a5c:	cmp	r0, #10
   17a60:	bcc	17a4c <__assert_fail@plt+0x5fc0>
   17a64:	mov	r0, r4
   17a68:	mov	r1, #0
   17a6c:	mov	r2, #10
   17a70:	bl	116c0 <strtol@plt>
   17a74:	mov	r9, r0
   17a78:	cmp	r0, #2
   17a7c:	blt	17ac8 <__assert_fail@plt+0x603c>
   17a80:	movw	r0, #12808	; 0x3208
   17a84:	mov	r1, r9
   17a88:	movt	r0, #3
   17a8c:	ldr	r0, [r0, #12]
   17a90:	cmp	r9, r0
   17a94:	movls	r1, r0
   17a98:	sub	r0, r1, r0
   17a9c:	ldrb	r1, [r4]
   17aa0:	cmp	r0, #2
   17aa4:	sub	r1, r1, #48	; 0x30
   17aa8:	clz	r1, r1
   17aac:	lsr	r1, r1, #5
   17ab0:	add	r1, r4, r1
   17ab4:	sub	r2, r1, r6
   17ab8:	str	r2, [fp, #-32]	; 0xffffffe0
   17abc:	subge	r2, r0, r5
   17ac0:	cmpge	r2, #2
   17ac4:	bge	17e74 <__assert_fail@plt+0x63e8>
   17ac8:	cmp	r5, #8
   17acc:	bgt	17ef4 <__assert_fail@plt+0x6468>
   17ad0:	mov	r4, r9
   17ad4:	b	17ae4 <__assert_fail@plt+0x6058>
   17ad8:	str	r4, [fp, #-32]	; 0xffffffe0
   17adc:	mov	r4, #0
   17ae0:	mov	r5, #0
   17ae4:	cmp	r5, #8
   17ae8:	mov	r0, r5
   17aec:	mov	r1, r5
   17af0:	movle	r0, #8
   17af4:	add	r0, r0, #1
   17af8:	sub	r2, r0, r5
   17afc:	mov	r0, #1
   17b00:	cmp	r2, #3
   17b04:	bls	17b40 <__assert_fail@plt+0x60b4>
   17b08:	bic	r3, r2, #3
   17b0c:	vmov.i32	q8, #1	; 0x00000001
   17b10:	vmov.i32	q9, #10	; 0x0000000a
   17b14:	add	r1, r5, r3
   17b18:	mov	r0, r3
   17b1c:	subs	r0, r0, #4
   17b20:	vmul.i32	q8, q8, q9
   17b24:	bne	17b1c <__assert_fail@plt+0x6090>
   17b28:	vext.8	q9, q8, q8, #8
   17b2c:	cmp	r2, r3
   17b30:	vmul.i32	q0, q8, q9
   17b34:	vmul.i32	q8, q0, d0[1]
   17b38:	vmov.32	r0, d16[0]
   17b3c:	beq	17b58 <__assert_fail@plt+0x60cc>
   17b40:	sub	r1, r1, #1
   17b44:	add	r0, r0, r0, lsl #2
   17b48:	add	r1, r1, #1
   17b4c:	lsl	r0, r0, #1
   17b50:	cmp	r1, #8
   17b54:	blt	17b44 <__assert_fail@plt+0x60b8>
   17b58:	mov	r9, r4
   17b5c:	str	r5, [sp, #24]
   17b60:	sdiv	r3, r8, r0
   17b64:	cmn	sl, #1
   17b68:	str	r5, [sp, #36]	; 0x24
   17b6c:	bgt	17ba4 <__assert_fail@plt+0x6118>
   17b70:	cmp	r8, #0
   17b74:	beq	17ba4 <__assert_fail@plt+0x6118>
   17b78:	movw	r2, #51712	; 0xca00
   17b7c:	mls	r1, r3, r0, r8
   17b80:	movt	r2, #15258	; 0x3b9a
   17b84:	cmp	r1, #0
   17b88:	udiv	r0, r2, r0
   17b8c:	sub	r3, r0, r3
   17b90:	subne	r3, r3, #1
   17b94:	cmp	r3, #0
   17b98:	addne	sl, sl, #1
   17b9c:	cmp	sl, #0
   17ba0:	beq	17d44 <__assert_fail@plt+0x62b8>
   17ba4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17ba8:	str	sl, [sp, #28]
   17bac:	str	r9, [sp, #20]
   17bb0:	add	sl, r6, #1
   17bb4:	str	r3, [sp, #32]
   17bb8:	add	r9, r6, r0
   17bbc:	cmp	r0, #2
   17bc0:	blt	17c1c <__assert_fail@plt+0x6190>
   17bc4:	movw	r7, #8825	; 0x2279
   17bc8:	movw	r4, #7436	; 0x1d0c
   17bcc:	mov	r8, sl
   17bd0:	movt	r7, #2
   17bd4:	movt	r4, #2
   17bd8:	ldrb	r5, [r8]
   17bdc:	mov	r0, r7
   17be0:	mov	r2, #8
   17be4:	mov	r1, r5
   17be8:	bl	11948 <memchr@plt>
   17bec:	cmp	r0, #0
   17bf0:	beq	17c20 <__assert_fail@plt+0x6194>
   17bf4:	mov	r0, r4
   17bf8:	mov	r1, r5
   17bfc:	mov	r2, #6
   17c00:	bl	11948 <memchr@plt>
   17c04:	cmp	r0, #0
   17c08:	add	r8, r8, #1
   17c0c:	strbne	r5, [sl], #1
   17c10:	cmp	r8, r9
   17c14:	bcc	17bd8 <__assert_fail@plt+0x614c>
   17c18:	b	17c20 <__assert_fail@plt+0x6194>
   17c1c:	mov	r8, sl
   17c20:	cmp	r8, r9
   17c24:	bcs	17ca0 <__assert_fail@plt+0x6214>
   17c28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17c2c:	sub	r0, r0, r8
   17c30:	add	r0, r6, r0
   17c34:	cmp	r0, #16
   17c38:	bcc	17c84 <__assert_fail@plt+0x61f8>
   17c3c:	cmp	sl, r9
   17c40:	addcc	r1, sl, r0
   17c44:	cmpcc	r8, r1
   17c48:	bcc	17c84 <__assert_fail@plt+0x61f8>
   17c4c:	bic	r7, r0, #15
   17c50:	mov	r5, r6
   17c54:	mov	r6, sl
   17c58:	add	r2, r8, r7
   17c5c:	add	r1, sl, r7
   17c60:	mov	r3, r7
   17c64:	vld1.8	{d16-d17}, [r8]!
   17c68:	subs	r3, r3, #16
   17c6c:	vst1.8	{d16-d17}, [r6]!
   17c70:	bne	17c64 <__assert_fail@plt+0x61d8>
   17c74:	cmp	r7, r0
   17c78:	mov	r6, r5
   17c7c:	bne	17c8c <__assert_fail@plt+0x6200>
   17c80:	b	17c9c <__assert_fail@plt+0x6210>
   17c84:	mov	r1, sl
   17c88:	mov	r2, r8
   17c8c:	ldrb	r3, [r2], #1
   17c90:	strb	r3, [r1], #1
   17c94:	cmp	r9, r2
   17c98:	bne	17c8c <__assert_fail@plt+0x6200>
   17c9c:	add	sl, sl, r0
   17ca0:	ldr	r2, [sp, #28]
   17ca4:	movw	r0, #27756	; 0x6c6c
   17ca8:	ldr	r4, [sp, #36]	; 0x24
   17cac:	ldr	r9, [sp, #20]
   17cb0:	mov	r1, r6
   17cb4:	movt	r0, #100	; 0x64
   17cb8:	str	r0, [sl]
   17cbc:	mov	r0, #1
   17cc0:	asr	r3, r2, #31
   17cc4:	bl	11924 <__printf_chk@plt>
   17cc8:	cmp	r4, #0
   17ccc:	beq	17d3c <__assert_fail@plt+0x62b0>
   17cd0:	ldr	r3, [sp, #24]
   17cd4:	bic	r2, r0, r0, asr #31
   17cd8:	mov	r0, #0
   17cdc:	mov	r6, #0
   17ce0:	cmp	r9, r2
   17ce4:	sub	r1, r4, r3
   17ce8:	ble	17d0c <__assert_fail@plt+0x6280>
   17cec:	movw	r7, #12808	; 0x3208
   17cf0:	sub	r2, r9, r2
   17cf4:	mov	r6, #0
   17cf8:	movt	r7, #3
   17cfc:	ldr	r7, [r7, #12]
   17d00:	cmp	r2, r7
   17d04:	subhi	r2, r2, r3
   17d08:	subhi	r6, r2, r7
   17d0c:	movw	r2, #12808	; 0x3208
   17d10:	ldr	r7, [sp, #32]
   17d14:	str	r1, [sp, #8]
   17d18:	movw	r1, #7481	; 0x1d39
   17d1c:	str	r0, [sp, #12]
   17d20:	mov	r0, #1
   17d24:	str	r6, [sp, #4]
   17d28:	movt	r2, #3
   17d2c:	movt	r1, #2
   17d30:	ldr	r2, [r2, #8]
   17d34:	str	r7, [sp]
   17d38:	bl	11924 <__printf_chk@plt>
   17d3c:	sub	sp, fp, #28
   17d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17d48:	mov	r7, r9
   17d4c:	mov	sl, r6
   17d50:	str	r3, [sp, #32]
   17d54:	add	r8, r6, r0
   17d58:	add	r6, r6, #1
   17d5c:	cmp	r0, #2
   17d60:	blt	17e14 <__assert_fail@plt+0x6388>
   17d64:	movw	r9, #8825	; 0x2279
   17d68:	mov	r5, r6
   17d6c:	movt	r9, #2
   17d70:	ldrb	r4, [r5]
   17d74:	mov	r0, r9
   17d78:	mov	r2, #8
   17d7c:	mov	r1, r4
   17d80:	bl	11948 <memchr@plt>
   17d84:	cmp	r0, #0
   17d88:	beq	17db4 <__assert_fail@plt+0x6328>
   17d8c:	movw	r0, #7436	; 0x1d0c
   17d90:	mov	r1, r4
   17d94:	mov	r2, #6
   17d98:	movt	r0, #2
   17d9c:	bl	11948 <memchr@plt>
   17da0:	cmp	r0, #0
   17da4:	add	r5, r5, #1
   17da8:	strbne	r4, [r6], #1
   17dac:	cmp	r5, r8
   17db0:	bcc	17d70 <__assert_fail@plt+0x62e4>
   17db4:	cmp	r5, r8
   17db8:	bcs	17e20 <__assert_fail@plt+0x6394>
   17dbc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17dc0:	mov	r9, r7
   17dc4:	sub	r0, r0, r5
   17dc8:	add	r0, sl, r0
   17dcc:	cmp	r0, #16
   17dd0:	bcc	17e28 <__assert_fail@plt+0x639c>
   17dd4:	cmp	r6, r8
   17dd8:	addcc	r1, r6, r0
   17ddc:	cmpcc	r5, r1
   17de0:	bcc	17e28 <__assert_fail@plt+0x639c>
   17de4:	bic	r4, r0, #15
   17de8:	mov	r7, r6
   17dec:	add	r2, r5, r4
   17df0:	add	r1, r6, r4
   17df4:	mov	r3, r4
   17df8:	vld1.8	{d16-d17}, [r5]!
   17dfc:	subs	r3, r3, #16
   17e00:	vst1.8	{d16-d17}, [r7]!
   17e04:	bne	17df8 <__assert_fail@plt+0x636c>
   17e08:	cmp	r4, r0
   17e0c:	bne	17e30 <__assert_fail@plt+0x63a4>
   17e10:	b	17e40 <__assert_fail@plt+0x63b4>
   17e14:	mov	r5, r6
   17e18:	cmp	r5, r8
   17e1c:	bcc	17dbc <__assert_fail@plt+0x6330>
   17e20:	mov	r9, r7
   17e24:	b	17e44 <__assert_fail@plt+0x63b8>
   17e28:	mov	r1, r6
   17e2c:	mov	r2, r5
   17e30:	ldrb	r3, [r2], #1
   17e34:	strb	r3, [r1], #1
   17e38:	cmp	r8, r2
   17e3c:	bne	17e30 <__assert_fail@plt+0x63a4>
   17e40:	add	r6, r6, r0
   17e44:	movw	r0, #12334	; 0x302e
   17e48:	vmov.f64	d16, #208	; 0xbe800000 -0.250
   17e4c:	mov	r1, sl
   17e50:	movt	r0, #102	; 0x66
   17e54:	vmov	r2, r3, d16
   17e58:	str	r0, [r6]
   17e5c:	mov	r0, #1
   17e60:	bl	11924 <__printf_chk@plt>
   17e64:	ldr	r4, [sp, #36]	; 0x24
   17e68:	cmp	r4, #0
   17e6c:	bne	17cd0 <__assert_fail@plt+0x6244>
   17e70:	b	17d3c <__assert_fail@plt+0x62b0>
   17e74:	mov	r4, #0
   17e78:	cmp	r1, r6
   17e7c:	mov	r0, r6
   17e80:	bls	17ec8 <__assert_fail@plt+0x643c>
   17e84:	add	r1, r1, #1
   17e88:	add	r3, r6, #1
   17e8c:	mov	r7, #0
   17e90:	mov	r0, r6
   17e94:	mov	r4, r6
   17e98:	ldrb	r6, [r3, #-1]
   17e9c:	add	r3, r3, #1
   17ea0:	cmp	r6, #45	; 0x2d
   17ea4:	strbne	r6, [r0], #1
   17ea8:	moveq	r7, #1
   17eac:	mov	r6, r4
   17eb0:	cmp	r1, r3
   17eb4:	bne	17e94 <__assert_fail@plt+0x6408>
   17eb8:	sub	r4, r0, r6
   17ebc:	mov	r1, #0
   17ec0:	tst	r7, #1
   17ec4:	bne	17ee4 <__assert_fail@plt+0x6458>
   17ec8:	movw	r3, #9379	; 0x24a3
   17ecc:	str	r2, [sp]
   17ed0:	mov	r1, #1
   17ed4:	mvn	r2, #0
   17ed8:	movt	r3, #2
   17edc:	bl	118f4 <__sprintf_chk@plt>
   17ee0:	mov	r1, r0
   17ee4:	add	r0, r4, r1
   17ee8:	str	r0, [fp, #-32]	; 0xffffffe0
   17eec:	cmp	r5, #8
   17ef0:	ble	17ad0 <__assert_fail@plt+0x6044>
   17ef4:	mov	r1, #9
   17ef8:	mov	r0, #1
   17efc:	str	r1, [sp, #24]
   17f00:	sdiv	r3, r8, r0
   17f04:	cmn	sl, #1
   17f08:	str	r5, [sp, #36]	; 0x24
   17f0c:	ble	17b70 <__assert_fail@plt+0x60e4>
   17f10:	b	17ba4 <__assert_fail@plt+0x6118>
   17f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f18:	add	fp, sp, #28
   17f1c:	sub	sp, sp, #212	; 0xd4
   17f20:	movw	r6, #12808	; 0x3208
   17f24:	mov	r4, r0
   17f28:	movt	r6, #3
   17f2c:	ldrb	r0, [r6, #4]
   17f30:	cmp	r0, #0
   17f34:	bne	17f88 <__assert_fail@plt+0x64fc>
   17f38:	mov	r0, #0
   17f3c:	bl	18f88 <__assert_fail@plt+0x74fc>
   17f40:	cmp	r0, #0
   17f44:	str	r0, [r6, #16]
   17f48:	bne	17f80 <__assert_fail@plt+0x64f4>
   17f4c:	bl	118e8 <__errno_location@plt>
   17f50:	ldr	r5, [r0]
   17f54:	movw	r1, #7394	; 0x1ce2
   17f58:	mov	r0, #0
   17f5c:	mov	r2, #5
   17f60:	movt	r1, #2
   17f64:	bl	1172c <dcgettext@plt>
   17f68:	movw	r2, #5797	; 0x16a5
   17f6c:	mov	r3, r0
   17f70:	mov	r0, #0
   17f74:	mov	r1, r5
   17f78:	movt	r2, #2
   17f7c:	bl	117e0 <error@plt>
   17f80:	mov	r0, #1
   17f84:	strb	r0, [r6, #4]
   17f88:	add	r7, sp, #104	; 0x68
   17f8c:	mov	r0, #3
   17f90:	mov	r1, r4
   17f94:	mov	r2, r7
   17f98:	bl	11a38 <__xstat64@plt>
   17f9c:	mov	r5, #0
   17fa0:	cmp	r0, #0
   17fa4:	bne	18048 <__assert_fail@plt+0x65bc>
   17fa8:	ldr	r6, [r6, #16]
   17fac:	cmp	r6, #0
   17fb0:	beq	18048 <__assert_fail@plt+0x65bc>
   17fb4:	mov	r8, sp
   17fb8:	add	sl, r7, #96	; 0x60
   17fbc:	add	r9, r8, #96	; 0x60
   17fc0:	ldrb	r0, [r6, #24]
   17fc4:	tst	r0, #1
   17fc8:	beq	1803c <__assert_fail@plt+0x65b0>
   17fcc:	ldr	r7, [r6]
   17fd0:	ldrb	r0, [r7]
   17fd4:	cmp	r0, #47	; 0x2f
   17fd8:	bne	1803c <__assert_fail@plt+0x65b0>
   17fdc:	ldr	r0, [r6, #4]
   17fe0:	mov	r1, r4
   17fe4:	bl	116b4 <strcmp@plt>
   17fe8:	cmp	r0, #0
   17fec:	bne	1803c <__assert_fail@plt+0x65b0>
   17ff0:	mov	r0, #3
   17ff4:	mov	r1, r7
   17ff8:	mov	r2, r8
   17ffc:	bl	11a38 <__xstat64@plt>
   18000:	cmp	r0, #0
   18004:	bne	1803c <__assert_fail@plt+0x65b0>
   18008:	ldrd	r0, [r9]
   1800c:	ldrd	r2, [sl]
   18010:	eor	r1, r3, r1
   18014:	eor	r0, r2, r0
   18018:	orrs	r0, r0, r1
   1801c:	bne	1803c <__assert_fail@plt+0x65b0>
   18020:	ldm	sp, {r0, r1}
   18024:	ldr	r2, [sp, #104]	; 0x68
   18028:	ldr	r3, [sp, #108]	; 0x6c
   1802c:	eor	r1, r3, r1
   18030:	eor	r0, r2, r0
   18034:	orrs	r0, r0, r1
   18038:	beq	18054 <__assert_fail@plt+0x65c8>
   1803c:	ldr	r6, [r6, #28]
   18040:	cmp	r6, #0
   18044:	bne	17fc0 <__assert_fail@plt+0x6534>
   18048:	mov	r0, r5
   1804c:	sub	sp, fp, #28
   18050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18054:	ldr	r5, [r6]
   18058:	mov	r0, r5
   1805c:	sub	sp, fp, #28
   18060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18064:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18068:	add	fp, sp, #24
   1806c:	sub	sp, sp, #216	; 0xd8
   18070:	mov	r5, r0
   18074:	sub	r0, fp, #32
   18078:	mov	r4, r1
   1807c:	bl	1d644 <__assert_fail@plt+0xbbb8>
   18080:	cmp	r0, #0
   18084:	beq	180c4 <__assert_fail@plt+0x6638>
   18088:	bl	118e8 <__errno_location@plt>
   1808c:	ldr	r5, [r0]
   18090:	movw	r1, #8844	; 0x228c
   18094:	mov	r0, #0
   18098:	mov	r2, #5
   1809c:	mov	r4, #0
   180a0:	movt	r1, #2
   180a4:	bl	1172c <dcgettext@plt>
   180a8:	mov	r2, r0
   180ac:	mov	r0, #0
   180b0:	mov	r1, r5
   180b4:	bl	117e0 <error@plt>
   180b8:	mov	r0, r4
   180bc:	sub	sp, fp, #24
   180c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   180c4:	ldr	r0, [r4, #16]
   180c8:	and	r0, r0, #61440	; 0xf000
   180cc:	cmp	r0, #16384	; 0x4000
   180d0:	bne	180f8 <__assert_fail@plt+0x666c>
   180d4:	sub	r0, fp, #136	; 0x88
   180d8:	mov	r1, r4
   180dc:	mov	r2, #104	; 0x68
   180e0:	bl	11708 <memcpy@plt>
   180e4:	mov	r0, r5
   180e8:	bl	11768 <chdir@plt>
   180ec:	cmn	r0, #1
   180f0:	bgt	1815c <__assert_fail@plt+0x66d0>
   180f4:	b	18218 <__assert_fail@plt+0x678c>
   180f8:	mov	r0, r5
   180fc:	bl	18b50 <__assert_fail@plt+0x70c4>
   18100:	mov	r4, r0
   18104:	bl	118ac <strlen@plt>
   18108:	add	r1, r0, #8
   1810c:	bic	r1, r1, #7
   18110:	sub	r5, sp, r1
   18114:	mov	sp, r5
   18118:	add	r2, r0, #1
   1811c:	mov	r0, r5
   18120:	mov	r1, r4
   18124:	bl	11708 <memcpy@plt>
   18128:	mov	r0, r4
   1812c:	bl	18ea0 <__assert_fail@plt+0x7414>
   18130:	mov	r0, r5
   18134:	bl	11768 <chdir@plt>
   18138:	cmn	r0, #1
   1813c:	ble	18218 <__assert_fail@plt+0x678c>
   18140:	movw	r1, #8943	; 0x22ef
   18144:	sub	r2, fp, #136	; 0x88
   18148:	mov	r0, #3
   1814c:	movt	r1, #2
   18150:	bl	11a38 <__xstat64@plt>
   18154:	cmn	r0, #1
   18158:	ble	18274 <__assert_fail@plt+0x67e8>
   1815c:	movw	r1, #8942	; 0x22ee
   18160:	sub	r4, fp, #240	; 0xf0
   18164:	mov	r0, #3
   18168:	movt	r1, #2
   1816c:	mov	r2, r4
   18170:	bl	11a38 <__xstat64@plt>
   18174:	cmp	r0, #0
   18178:	blt	18200 <__assert_fail@plt+0x6774>
   1817c:	movw	r6, #8942	; 0x22ee
   18180:	sub	r8, fp, #136	; 0x88
   18184:	add	r5, r4, #96	; 0x60
   18188:	add	r7, r8, #96	; 0x60
   1818c:	movt	r6, #2
   18190:	ldr	r0, [fp, #-136]	; 0xffffff78
   18194:	ldr	r2, [fp, #-240]	; 0xffffff10
   18198:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1819c:	ldr	r3, [fp, #-236]	; 0xffffff14
   181a0:	eor	r1, r3, r1
   181a4:	eor	r0, r2, r0
   181a8:	orrs	r0, r0, r1
   181ac:	bne	18268 <__assert_fail@plt+0x67dc>
   181b0:	ldrd	r0, [r7]
   181b4:	ldrd	r2, [r5]
   181b8:	eor	r1, r3, r1
   181bc:	eor	r0, r2, r0
   181c0:	orrs	r0, r0, r1
   181c4:	beq	18268 <__assert_fail@plt+0x67dc>
   181c8:	mov	r0, r6
   181cc:	bl	11768 <chdir@plt>
   181d0:	cmn	r0, #1
   181d4:	ble	182b8 <__assert_fail@plt+0x682c>
   181d8:	mov	r0, r8
   181dc:	mov	r1, r4
   181e0:	mov	r2, #104	; 0x68
   181e4:	bl	11708 <memcpy@plt>
   181e8:	mov	r0, #3
   181ec:	mov	r1, r6
   181f0:	mov	r2, r4
   181f4:	bl	11a38 <__xstat64@plt>
   181f8:	cmp	r0, #0
   181fc:	bge	18190 <__assert_fail@plt+0x6704>
   18200:	bl	118e8 <__errno_location@plt>
   18204:	ldr	r5, [r0]
   18208:	movw	r1, #8945	; 0x22f1
   1820c:	mov	r4, #0
   18210:	movt	r1, #2
   18214:	b	182cc <__assert_fail@plt+0x6840>
   18218:	bl	118e8 <__errno_location@plt>
   1821c:	ldr	r6, [r0]
   18220:	movw	r1, #8873	; 0x22a9
   18224:	mov	r0, #0
   18228:	mov	r2, #5
   1822c:	mov	r4, #0
   18230:	movt	r1, #2
   18234:	bl	1172c <dcgettext@plt>
   18238:	mov	r7, r0
   1823c:	mov	r0, #4
   18240:	mov	r1, r5
   18244:	bl	1d104 <__assert_fail@plt+0xb678>
   18248:	mov	r3, r0
   1824c:	mov	r0, #0
   18250:	mov	r1, r6
   18254:	mov	r2, r7
   18258:	bl	117e0 <error@plt>
   1825c:	mov	r0, r4
   18260:	sub	sp, fp, #24
   18264:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18268:	bl	1edc0 <__assert_fail@plt+0xd334>
   1826c:	mov	r4, r0
   18270:	b	18300 <__assert_fail@plt+0x6874>
   18274:	bl	118e8 <__errno_location@plt>
   18278:	ldr	r6, [r0]
   1827c:	movw	r1, #8903	; 0x22c7
   18280:	mov	r0, #0
   18284:	mov	r2, #5
   18288:	mov	r4, #0
   1828c:	movt	r1, #2
   18290:	bl	1172c <dcgettext@plt>
   18294:	mov	r7, r0
   18298:	mov	r0, #4
   1829c:	mov	r1, r5
   182a0:	bl	1d104 <__assert_fail@plt+0xb678>
   182a4:	mov	r3, r0
   182a8:	mov	r0, #0
   182ac:	mov	r1, r6
   182b0:	mov	r2, r7
   182b4:	b	182fc <__assert_fail@plt+0x6870>
   182b8:	bl	118e8 <__errno_location@plt>
   182bc:	ldr	r5, [r0]
   182c0:	movw	r1, #8873	; 0x22a9
   182c4:	mov	r4, #0
   182c8:	movt	r1, #2
   182cc:	mov	r0, #0
   182d0:	mov	r2, #5
   182d4:	bl	1172c <dcgettext@plt>
   182d8:	movw	r1, #8942	; 0x22ee
   182dc:	mov	r6, r0
   182e0:	mov	r0, #4
   182e4:	movt	r1, #2
   182e8:	bl	1d104 <__assert_fail@plt+0xb678>
   182ec:	mov	r3, r0
   182f0:	mov	r0, #0
   182f4:	mov	r1, r5
   182f8:	mov	r2, r6
   182fc:	bl	117e0 <error@plt>
   18300:	bl	118e8 <__errno_location@plt>
   18304:	ldr	r6, [r0]
   18308:	mov	r5, r0
   1830c:	sub	r0, fp, #32
   18310:	bl	1d6a0 <__assert_fail@plt+0xbc14>
   18314:	cmp	r0, #0
   18318:	bne	18334 <__assert_fail@plt+0x68a8>
   1831c:	sub	r0, fp, #32
   18320:	bl	1d6bc <__assert_fail@plt+0xbc30>
   18324:	str	r6, [r5]
   18328:	mov	r0, r4
   1832c:	sub	sp, fp, #24
   18330:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18334:	ldr	r4, [r5]
   18338:	movw	r1, #8960	; 0x2300
   1833c:	mov	r0, #0
   18340:	mov	r2, #5
   18344:	movt	r1, #2
   18348:	bl	1172c <dcgettext@plt>
   1834c:	mov	r2, r0
   18350:	mov	r0, #1
   18354:	mov	r1, r4
   18358:	bl	117e0 <error@plt>
   1835c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18360:	add	fp, sp, #24
   18364:	sub	sp, sp, #128	; 0x80
   18368:	mov	r5, r0
   1836c:	cmp	r1, #0
   18370:	beq	183f0 <__assert_fail@plt+0x6964>
   18374:	movw	r4, #1025	; 0x401
   18378:	cmp	r1, #1024	; 0x400
   1837c:	addls	r4, r1, #1
   18380:	mov	r0, r4
   18384:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   18388:	cmp	r0, #0
   1838c:	beq	1847c <__assert_fail@plt+0x69f0>
   18390:	mov	r6, r0
   18394:	mov	r0, r5
   18398:	mov	r1, r6
   1839c:	mov	r2, r4
   183a0:	bl	1178c <readlink@plt>
   183a4:	cmn	r0, #1
   183a8:	ble	1848c <__assert_fail@plt+0x6a00>
   183ac:	cmp	r0, r4
   183b0:	bcc	184e4 <__assert_fail@plt+0x6a58>
   183b4:	mov	r0, r6
   183b8:	bl	18ea0 <__assert_fail@plt+0x7414>
   183bc:	cmn	r4, #-1073741823	; 0xc0000001
   183c0:	bhi	183cc <__assert_fail@plt+0x6940>
   183c4:	lsl	r4, r4, #1
   183c8:	b	183d8 <__assert_fail@plt+0x694c>
   183cc:	cmn	r4, #-2147483647	; 0x80000001
   183d0:	mvn	r4, #-2147483648	; 0x80000000
   183d4:	bcs	1847c <__assert_fail@plt+0x69f0>
   183d8:	mov	r0, r4
   183dc:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   183e0:	mov	r6, r0
   183e4:	cmp	r0, #0
   183e8:	bne	18394 <__assert_fail@plt+0x6908>
   183ec:	b	1847c <__assert_fail@plt+0x69f0>
   183f0:	mov	r4, #128	; 0x80
   183f4:	mov	r8, sp
   183f8:	mov	r6, #0
   183fc:	cmp	r4, #128	; 0x80
   18400:	mov	r7, r8
   18404:	beq	18438 <__assert_fail@plt+0x69ac>
   18408:	b	18420 <__assert_fail@plt+0x6994>
   1840c:	mov	r4, r0
   18410:	mov	r6, #0
   18414:	cmp	r4, #128	; 0x80
   18418:	mov	r7, r8
   1841c:	beq	18438 <__assert_fail@plt+0x69ac>
   18420:	mov	r0, r4
   18424:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   18428:	mov	r7, r0
   1842c:	cmp	r0, #0
   18430:	mov	r6, r0
   18434:	beq	1847c <__assert_fail@plt+0x69f0>
   18438:	mov	r0, r5
   1843c:	mov	r1, r7
   18440:	mov	r2, r4
   18444:	bl	1178c <readlink@plt>
   18448:	cmp	r0, #0
   1844c:	blt	1848c <__assert_fail@plt+0x6a00>
   18450:	cmp	r0, r4
   18454:	bcc	184a4 <__assert_fail@plt+0x6a18>
   18458:	mov	r0, r6
   1845c:	bl	18ea0 <__assert_fail@plt+0x7414>
   18460:	cmp	r4, #1073741824	; 0x40000000
   18464:	bcs	18470 <__assert_fail@plt+0x69e4>
   18468:	lsl	r0, r4, #1
   1846c:	b	1840c <__assert_fail@plt+0x6980>
   18470:	mvn	r0, #-2147483648	; 0x80000000
   18474:	cmn	r4, #-2147483647	; 0x80000001
   18478:	bcc	1840c <__assert_fail@plt+0x6980>
   1847c:	bl	118e8 <__errno_location@plt>
   18480:	mov	r1, #12
   18484:	str	r1, [r0]
   18488:	b	18494 <__assert_fail@plt+0x6a08>
   1848c:	mov	r0, r6
   18490:	bl	18ea0 <__assert_fail@plt+0x7414>
   18494:	mov	r5, #0
   18498:	mov	r0, r5
   1849c:	sub	sp, fp, #24
   184a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   184a4:	mov	r5, #0
   184a8:	add	r8, r0, #1
   184ac:	cmp	r6, #0
   184b0:	strb	r5, [r7, r0]
   184b4:	beq	18508 <__assert_fail@plt+0x6a7c>
   184b8:	cmp	r8, r4
   184bc:	bcs	184f8 <__assert_fail@plt+0x6a6c>
   184c0:	mov	r0, r6
   184c4:	mov	r1, r8
   184c8:	bl	1eeb4 <__assert_fail@plt+0xd428>
   184cc:	mov	r5, r0
   184d0:	cmp	r0, #0
   184d4:	moveq	r5, r6
   184d8:	mov	r0, r5
   184dc:	sub	sp, fp, #24
   184e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   184e4:	mov	r1, #0
   184e8:	add	r8, r0, #1
   184ec:	strb	r1, [r6, r0]
   184f0:	cmp	r8, r4
   184f4:	bcc	184c0 <__assert_fail@plt+0x6a34>
   184f8:	mov	r5, r6
   184fc:	mov	r0, r5
   18500:	sub	sp, fp, #24
   18504:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18508:	mov	r0, r8
   1850c:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   18510:	cmp	r0, #0
   18514:	beq	18498 <__assert_fail@plt+0x6a0c>
   18518:	mov	r1, r7
   1851c:	mov	r2, r8
   18520:	mov	r4, r0
   18524:	bl	11708 <memcpy@plt>
   18528:	mov	r5, r4
   1852c:	mov	r0, r5
   18530:	sub	sp, fp, #24
   18534:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18538:	mov	r0, #1
   1853c:	b	11b88 <__assert_fail@plt+0xfc>
   18540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18544:	add	fp, sp, #28
   18548:	sub	sp, sp, #12
   1854c:	mov	r4, r3
   18550:	mov	r9, r2
   18554:	mov	r7, r1
   18558:	mov	r8, r0
   1855c:	bl	118ac <strlen@plt>
   18560:	ldr	r6, [r7]
   18564:	cmp	r6, #0
   18568:	beq	18614 <__assert_fail@plt+0x6b88>
   1856c:	mov	r5, r0
   18570:	cmp	r9, #0
   18574:	beq	18624 <__assert_fail@plt+0x6b98>
   18578:	add	r0, r7, #4
   1857c:	mvn	sl, #0
   18580:	mov	r7, #0
   18584:	str	r9, [sp]
   18588:	str	r0, [sp, #8]
   1858c:	mov	r0, #0
   18590:	str	r0, [sp, #4]
   18594:	mov	r0, r9
   18598:	mov	r0, r6
   1859c:	mov	r1, r8
   185a0:	mov	r2, r5
   185a4:	bl	11a50 <strncmp@plt>
   185a8:	cmp	r0, #0
   185ac:	bne	185f8 <__assert_fail@plt+0x6b6c>
   185b0:	mov	r0, r6
   185b4:	bl	118ac <strlen@plt>
   185b8:	cmp	r0, r5
   185bc:	beq	18618 <__assert_fail@plt+0x6b8c>
   185c0:	cmn	sl, #1
   185c4:	beq	185f4 <__assert_fail@plt+0x6b68>
   185c8:	ldr	r0, [sp]
   185cc:	mov	r1, r9
   185d0:	mov	r2, r4
   185d4:	mla	r0, sl, r4, r0
   185d8:	bl	11720 <memcmp@plt>
   185dc:	ldr	r1, [sp, #4]
   185e0:	cmp	r0, #0
   185e4:	movwne	r0, #1
   185e8:	orr	r1, r1, r0
   185ec:	str	r1, [sp, #4]
   185f0:	b	185f8 <__assert_fail@plt+0x6b6c>
   185f4:	mov	sl, r7
   185f8:	ldr	r0, [sp, #8]
   185fc:	add	r9, r9, r4
   18600:	ldr	r6, [r0, r7, lsl #2]
   18604:	add	r7, r7, #1
   18608:	cmp	r6, #0
   1860c:	bne	18598 <__assert_fail@plt+0x6b0c>
   18610:	b	1868c <__assert_fail@plt+0x6c00>
   18614:	mvn	r7, #0
   18618:	mov	r0, r7
   1861c:	sub	sp, fp, #28
   18620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18624:	add	r4, r7, #4
   18628:	mov	r0, #0
   1862c:	mvn	sl, #0
   18630:	mov	r7, #0
   18634:	str	r0, [sp, #4]
   18638:	mov	r0, r6
   1863c:	mov	r1, r8
   18640:	mov	r2, r5
   18644:	bl	11a50 <strncmp@plt>
   18648:	cmp	r0, #0
   1864c:	bne	1867c <__assert_fail@plt+0x6bf0>
   18650:	mov	r0, r6
   18654:	bl	118ac <strlen@plt>
   18658:	cmp	r0, r5
   1865c:	beq	18618 <__assert_fail@plt+0x6b8c>
   18660:	ldr	r1, [sp, #4]
   18664:	cmn	sl, #1
   18668:	add	r0, sl, #1
   1866c:	movwne	r0, #1
   18670:	moveq	sl, r7
   18674:	orr	r1, r1, r0
   18678:	str	r1, [sp, #4]
   1867c:	ldr	r6, [r4, r7, lsl #2]
   18680:	add	r7, r7, #1
   18684:	cmp	r6, #0
   18688:	bne	18638 <__assert_fail@plt+0x6bac>
   1868c:	ldr	r0, [sp, #4]
   18690:	tst	r0, #1
   18694:	mvnne	sl, #1
   18698:	mov	r0, sl
   1869c:	sub	sp, fp, #28
   186a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186a4:	push	{r4, r5, r6, r7, fp, lr}
   186a8:	add	fp, sp, #16
   186ac:	mov	r5, r0
   186b0:	ldr	r0, [r1]
   186b4:	mvn	r4, #0
   186b8:	cmp	r0, #0
   186bc:	beq	186ec <__assert_fail@plt+0x6c60>
   186c0:	add	r7, r1, #4
   186c4:	mov	r6, #0
   186c8:	mov	r1, r5
   186cc:	bl	116b4 <strcmp@plt>
   186d0:	cmp	r0, #0
   186d4:	moveq	r0, r6
   186d8:	popeq	{r4, r5, r6, r7, fp, pc}
   186dc:	ldr	r0, [r7, r6, lsl #2]
   186e0:	add	r6, r6, #1
   186e4:	cmp	r0, #0
   186e8:	bne	186c8 <__assert_fail@plt+0x6c3c>
   186ec:	mov	r0, r4
   186f0:	pop	{r4, r5, r6, r7, fp, pc}
   186f4:	push	{r4, r5, r6, sl, fp, lr}
   186f8:	add	fp, sp, #16
   186fc:	sub	sp, sp, #8
   18700:	mov	r4, r1
   18704:	movw	r1, #9048	; 0x2358
   18708:	mov	r5, r0
   1870c:	movw	r0, #9021	; 0x233d
   18710:	cmn	r2, #1
   18714:	mov	r2, #5
   18718:	movt	r0, #2
   1871c:	movt	r1, #2
   18720:	moveq	r1, r0
   18724:	mov	r0, #0
   18728:	bl	1172c <dcgettext@plt>
   1872c:	mov	r6, r0
   18730:	mov	r0, #0
   18734:	mov	r1, #8
   18738:	mov	r2, r4
   1873c:	bl	1d05c <__assert_fail@plt+0xb5d0>
   18740:	mov	r4, r0
   18744:	mov	r0, #1
   18748:	mov	r1, r5
   1874c:	bl	1d61c <__assert_fail@plt+0xbb90>
   18750:	str	r0, [sp]
   18754:	mov	r0, #0
   18758:	mov	r1, #0
   1875c:	mov	r2, r6
   18760:	mov	r3, r4
   18764:	bl	117e0 <error@plt>
   18768:	sub	sp, fp, #16
   1876c:	pop	{r4, r5, r6, sl, fp, pc}
   18770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18774:	add	fp, sp, #28
   18778:	sub	sp, sp, #4
   1877c:	mov	r5, r1
   18780:	movw	r1, #9077	; 0x2375
   18784:	mov	sl, r2
   18788:	mov	r7, r0
   1878c:	mov	r0, #0
   18790:	mov	r2, #5
   18794:	mov	r8, #0
   18798:	movt	r1, #2
   1879c:	bl	1172c <dcgettext@plt>
   187a0:	movw	r4, #12768	; 0x31e0
   187a4:	movt	r4, #3
   187a8:	ldr	r1, [r4]
   187ac:	bl	11678 <fputs_unlocked@plt>
   187b0:	ldr	r6, [r7]
   187b4:	cmp	r6, #0
   187b8:	beq	18858 <__assert_fail@plt+0x6dcc>
   187bc:	add	r9, r7, #4
   187c0:	mov	r7, #0
   187c4:	str	sl, [sp]
   187c8:	cmp	r8, #0
   187cc:	beq	187e8 <__assert_fail@plt+0x6d5c>
   187d0:	mov	r0, r7
   187d4:	mov	r1, r5
   187d8:	mov	r2, sl
   187dc:	bl	11720 <memcmp@plt>
   187e0:	cmp	r0, #0
   187e4:	beq	18814 <__assert_fail@plt+0x6d88>
   187e8:	ldr	r7, [r4]
   187ec:	mov	r0, r6
   187f0:	bl	1d62c <__assert_fail@plt+0xbba0>
   187f4:	movw	r2, #9098	; 0x238a
   187f8:	mov	r3, r0
   187fc:	mov	r0, r7
   18800:	mov	r1, #1
   18804:	movt	r2, #2
   18808:	bl	1193c <__fprintf_chk@plt>
   1880c:	mov	r7, r5
   18810:	b	18844 <__assert_fail@plt+0x6db8>
   18814:	mov	sl, r9
   18818:	ldr	r9, [r4]
   1881c:	mov	r0, r6
   18820:	bl	1d62c <__assert_fail@plt+0xbba0>
   18824:	mov	r3, r0
   18828:	mov	r0, r9
   1882c:	mov	r9, sl
   18830:	ldr	sl, [sp]
   18834:	movw	r2, #9106	; 0x2392
   18838:	mov	r1, #1
   1883c:	movt	r2, #2
   18840:	bl	1193c <__fprintf_chk@plt>
   18844:	ldr	r6, [r9, -r8, lsl #2]
   18848:	add	r5, r5, sl
   1884c:	sub	r8, r8, #1
   18850:	cmp	r6, #0
   18854:	bne	187c8 <__assert_fail@plt+0x6d3c>
   18858:	ldr	r0, [r4]
   1885c:	ldr	r1, [r0, #20]
   18860:	ldr	r2, [r0, #24]
   18864:	cmp	r1, r2
   18868:	addcc	r2, r1, #1
   1886c:	strcc	r2, [r0, #20]
   18870:	movcc	r0, #10
   18874:	strbcc	r0, [r1]
   18878:	subcc	sp, fp, #28
   1887c:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18880:	mov	r1, #10
   18884:	sub	sp, fp, #28
   18888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1888c:	b	11990 <__overflow@plt>
   18890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18894:	add	fp, sp, #28
   18898:	sub	sp, sp, #12
   1889c:	mov	sl, r0
   188a0:	ldr	r0, [fp, #16]
   188a4:	ldr	r9, [fp, #8]
   188a8:	mov	r5, r3
   188ac:	mov	r8, r2
   188b0:	mov	r6, r1
   188b4:	cmp	r0, #0
   188b8:	beq	188e8 <__assert_fail@plt+0x6e5c>
   188bc:	mov	r0, r6
   188c0:	mov	r1, r8
   188c4:	mov	r2, r5
   188c8:	mov	r3, r9
   188cc:	bl	18540 <__assert_fail@plt+0x6ab4>
   188d0:	mov	r4, r0
   188d4:	cmn	r4, #1
   188d8:	ble	18938 <__assert_fail@plt+0x6eac>
   188dc:	mov	r0, r4
   188e0:	sub	sp, fp, #28
   188e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188e8:	ldr	r0, [r8]
   188ec:	movw	r7, #9021	; 0x233d
   188f0:	str	r5, [sp, #8]
   188f4:	movt	r7, #2
   188f8:	cmp	r0, #0
   188fc:	beq	18950 <__assert_fail@plt+0x6ec4>
   18900:	add	r5, r8, #4
   18904:	mov	r4, #0
   18908:	mov	r1, r6
   1890c:	bl	116b4 <strcmp@plt>
   18910:	cmp	r0, #0
   18914:	beq	1892c <__assert_fail@plt+0x6ea0>
   18918:	ldr	r0, [r5, r4, lsl #2]
   1891c:	add	r4, r4, #1
   18920:	cmp	r0, #0
   18924:	bne	18908 <__assert_fail@plt+0x6e7c>
   18928:	b	18950 <__assert_fail@plt+0x6ec4>
   1892c:	ldr	r5, [sp, #8]
   18930:	cmn	r4, #1
   18934:	bgt	188dc <__assert_fail@plt+0x6e50>
   18938:	movw	r0, #9021	; 0x233d
   1893c:	movw	r7, #9048	; 0x2358
   18940:	str	r5, [sp, #8]
   18944:	movt	r0, #2
   18948:	movt	r7, #2
   1894c:	moveq	r7, r0
   18950:	ldr	r5, [fp, #12]
   18954:	mov	r0, #0
   18958:	mov	r1, r7
   1895c:	mov	r2, #5
   18960:	bl	1172c <dcgettext@plt>
   18964:	mov	r4, r0
   18968:	mov	r0, #0
   1896c:	mov	r1, #8
   18970:	mov	r2, r6
   18974:	bl	1d05c <__assert_fail@plt+0xb5d0>
   18978:	mov	r6, r0
   1897c:	mov	r0, #1
   18980:	mov	r1, sl
   18984:	bl	1d61c <__assert_fail@plt+0xbb90>
   18988:	str	r0, [sp]
   1898c:	mov	r0, #0
   18990:	mov	r1, #0
   18994:	mov	r2, r4
   18998:	mov	r3, r6
   1899c:	bl	117e0 <error@plt>
   189a0:	ldr	r1, [sp, #8]
   189a4:	mov	r0, r8
   189a8:	mov	r2, r9
   189ac:	bl	18770 <__assert_fail@plt+0x6ce4>
   189b0:	blx	r5
   189b4:	mvn	r4, #0
   189b8:	mov	r0, r4
   189bc:	sub	sp, fp, #28
   189c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   189c8:	add	fp, sp, #24
   189cc:	ldr	r6, [r1]
   189d0:	cmp	r6, #0
   189d4:	beq	18a38 <__assert_fail@plt+0x6fac>
   189d8:	mov	r8, r1
   189dc:	mov	r7, r2
   189e0:	mov	r1, r2
   189e4:	mov	r2, r3
   189e8:	mov	r4, r3
   189ec:	mov	r9, r0
   189f0:	bl	11720 <memcmp@plt>
   189f4:	cmp	r0, #0
   189f8:	beq	18a30 <__assert_fail@plt+0x6fa4>
   189fc:	add	r7, r7, r4
   18a00:	add	r5, r8, #4
   18a04:	ldr	r6, [r5]
   18a08:	cmp	r6, #0
   18a0c:	beq	18a38 <__assert_fail@plt+0x6fac>
   18a10:	mov	r0, r9
   18a14:	mov	r1, r7
   18a18:	mov	r2, r4
   18a1c:	bl	11720 <memcmp@plt>
   18a20:	add	r7, r7, r4
   18a24:	add	r5, r5, #4
   18a28:	cmp	r0, #0
   18a2c:	bne	18a04 <__assert_fail@plt+0x6f78>
   18a30:	mov	r0, r6
   18a34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18a38:	mov	r6, #0
   18a3c:	mov	r0, r6
   18a40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18a44:	movw	r1, #12908	; 0x326c
   18a48:	movt	r1, #3
   18a4c:	str	r0, [r1, #4]
   18a50:	bx	lr
   18a54:	movw	r1, #12908	; 0x326c
   18a58:	movt	r1, #3
   18a5c:	strb	r0, [r1]
   18a60:	bx	lr
   18a64:	push	{r4, r5, r6, sl, fp, lr}
   18a68:	add	fp, sp, #16
   18a6c:	sub	sp, sp, #8
   18a70:	movw	r0, #12772	; 0x31e4
   18a74:	movt	r0, #3
   18a78:	ldr	r0, [r0]
   18a7c:	bl	1ff1c <__assert_fail@plt+0xe490>
   18a80:	cmp	r0, #0
   18a84:	beq	18aac <__assert_fail@plt+0x7020>
   18a88:	movw	r5, #12908	; 0x326c
   18a8c:	movt	r5, #3
   18a90:	ldrb	r0, [r5]
   18a94:	cmp	r0, #0
   18a98:	beq	18ad8 <__assert_fail@plt+0x704c>
   18a9c:	bl	118e8 <__errno_location@plt>
   18aa0:	ldr	r0, [r0]
   18aa4:	cmp	r0, #32
   18aa8:	bne	18ad8 <__assert_fail@plt+0x704c>
   18aac:	movw	r0, #12768	; 0x31e0
   18ab0:	movt	r0, #3
   18ab4:	ldr	r0, [r0]
   18ab8:	bl	1ff1c <__assert_fail@plt+0xe490>
   18abc:	cmp	r0, #0
   18ac0:	subeq	sp, fp, #16
   18ac4:	popeq	{r4, r5, r6, sl, fp, pc}
   18ac8:	movw	r0, #12684	; 0x318c
   18acc:	movt	r0, #3
   18ad0:	ldr	r0, [r0]
   18ad4:	bl	116fc <_exit@plt>
   18ad8:	movw	r1, #9111	; 0x2397
   18adc:	mov	r0, #0
   18ae0:	mov	r2, #5
   18ae4:	movt	r1, #2
   18ae8:	bl	1172c <dcgettext@plt>
   18aec:	ldr	r6, [r5, #4]
   18af0:	mov	r4, r0
   18af4:	bl	118e8 <__errno_location@plt>
   18af8:	ldr	r5, [r0]
   18afc:	cmp	r6, #0
   18b00:	bne	18b1c <__assert_fail@plt+0x7090>
   18b04:	movw	r2, #5797	; 0x16a5
   18b08:	mov	r0, #0
   18b0c:	mov	r1, r5
   18b10:	mov	r3, r4
   18b14:	movt	r2, #2
   18b18:	b	18b3c <__assert_fail@plt+0x70b0>
   18b1c:	mov	r0, r6
   18b20:	bl	1d2a4 <__assert_fail@plt+0xb818>
   18b24:	movw	r2, #9123	; 0x23a3
   18b28:	mov	r3, r0
   18b2c:	str	r4, [sp]
   18b30:	mov	r0, #0
   18b34:	mov	r1, r5
   18b38:	movt	r2, #2
   18b3c:	bl	117e0 <error@plt>
   18b40:	movw	r0, #12684	; 0x318c
   18b44:	movt	r0, #3
   18b48:	ldr	r0, [r0]
   18b4c:	bl	116fc <_exit@plt>
   18b50:	push	{fp, lr}
   18b54:	mov	fp, sp
   18b58:	bl	18bb0 <__assert_fail@plt+0x7124>
   18b5c:	cmp	r0, #0
   18b60:	popne	{fp, pc}
   18b64:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   18b68:	push	{r4, r5, r6, sl, fp, lr}
   18b6c:	add	fp, sp, #16
   18b70:	mov	r5, r0
   18b74:	mov	r4, r0
   18b78:	ldrb	r6, [r5], #-1
   18b7c:	bl	1fac0 <__assert_fail@plt+0xe034>
   18b80:	sub	r2, r0, r4
   18b84:	sub	r0, r6, #47	; 0x2f
   18b88:	clz	r0, r0
   18b8c:	lsr	r1, r0, #5
   18b90:	mov	r0, r2
   18b94:	cmp	r2, r1
   18b98:	popls	{r4, r5, r6, sl, fp, pc}
   18b9c:	ldrb	r3, [r5, r0]
   18ba0:	sub	r2, r0, #1
   18ba4:	cmp	r3, #47	; 0x2f
   18ba8:	beq	18b90 <__assert_fail@plt+0x7104>
   18bac:	pop	{r4, r5, r6, sl, fp, pc}
   18bb0:	push	{r4, r5, r6, sl, fp, lr}
   18bb4:	add	fp, sp, #16
   18bb8:	mov	r6, r0
   18bbc:	mov	r4, r0
   18bc0:	ldrb	r5, [r6], #-1
   18bc4:	bl	1fac0 <__assert_fail@plt+0xe034>
   18bc8:	sub	r1, r0, r4
   18bcc:	sub	r0, r5, #47	; 0x2f
   18bd0:	clz	r0, r0
   18bd4:	lsr	r0, r0, #5
   18bd8:	mov	r5, r1
   18bdc:	cmp	r1, r0
   18be0:	bls	18bf4 <__assert_fail@plt+0x7168>
   18be4:	ldrb	r2, [r6, r5]
   18be8:	sub	r1, r5, #1
   18bec:	cmp	r2, #47	; 0x2f
   18bf0:	beq	18bd8 <__assert_fail@plt+0x714c>
   18bf4:	cmp	r5, #0
   18bf8:	mov	r0, r5
   18bfc:	addeq	r0, r0, #1
   18c00:	add	r0, r0, #1
   18c04:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   18c08:	mov	r6, r0
   18c0c:	cmp	r0, #0
   18c10:	beq	18c3c <__assert_fail@plt+0x71b0>
   18c14:	mov	r0, r6
   18c18:	mov	r1, r4
   18c1c:	mov	r2, r5
   18c20:	bl	11708 <memcpy@plt>
   18c24:	cmp	r5, #0
   18c28:	moveq	r0, #46	; 0x2e
   18c2c:	moveq	r5, #1
   18c30:	strbeq	r0, [r6]
   18c34:	mov	r0, #0
   18c38:	strb	r0, [r6, r5]
   18c3c:	mov	r0, r6
   18c40:	pop	{r4, r5, r6, sl, fp, pc}
   18c44:	ldr	r1, [r0, #16]
   18c48:	and	r1, r1, #61440	; 0xf000
   18c4c:	sub	r1, r1, #4096	; 0x1000
   18c50:	lsr	r2, r1, #12
   18c54:	cmp	r2, #11
   18c58:	bhi	18cc4 <__assert_fail@plt+0x7238>
   18c5c:	movw	r1, #8996	; 0x2324
   18c60:	add	r3, pc, #4
   18c64:	movt	r1, #2
   18c68:	ldr	pc, [r3, r2, lsl #2]
   18c6c:	muleq	r1, ip, ip
   18c70:			; <UNDEFINED> instruction: 0x00018cb0
   18c74:	andeq	r8, r1, r4, asr #25
   18c78:	andeq	r8, r1, r4, lsr #25
   18c7c:	andeq	r8, r1, r4, asr #25
   18c80:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18c84:	andeq	r8, r1, r4, asr #25
   18c88:	andeq	r8, r1, r4, lsl sp
   18c8c:	andeq	r8, r1, r4, asr #25
   18c90:	andeq	r8, r1, ip, ror #25
   18c94:	andeq	r8, r1, r4, asr #25
   18c98:	andeq	r8, r1, r0, lsl #26
   18c9c:	movw	r1, #9218	; 0x2402
   18ca0:	movt	r1, #2
   18ca4:	mov	r0, #0
   18ca8:	mov	r2, #5
   18cac:	b	1172c <dcgettext@plt>
   18cb0:	movw	r1, #9195	; 0x23eb
   18cb4:	movt	r1, #2
   18cb8:	mov	r0, #0
   18cbc:	mov	r2, #5
   18cc0:	b	1172c <dcgettext@plt>
   18cc4:	movw	r1, #9230	; 0x240e
   18cc8:	movt	r1, #2
   18ccc:	mov	r0, #0
   18cd0:	mov	r2, #5
   18cd4:	b	1172c <dcgettext@plt>
   18cd8:	movw	r1, #9176	; 0x23d8
   18cdc:	movt	r1, #2
   18ce0:	mov	r0, #0
   18ce4:	mov	r2, #5
   18ce8:	b	1172c <dcgettext@plt>
   18cec:	movw	r1, #9162	; 0x23ca
   18cf0:	movt	r1, #2
   18cf4:	mov	r0, #0
   18cf8:	mov	r2, #5
   18cfc:	b	1172c <dcgettext@plt>
   18d00:	movw	r1, #9223	; 0x2407
   18d04:	movt	r1, #2
   18d08:	mov	r0, #0
   18d0c:	mov	r2, #5
   18d10:	b	1172c <dcgettext@plt>
   18d14:	ldrd	r0, [r0, #48]	; 0x30
   18d18:	orrs	r0, r0, r1
   18d1c:	movw	r1, #9149	; 0x23bd
   18d20:	movw	r0, #9130	; 0x23aa
   18d24:	movt	r1, #2
   18d28:	movt	r0, #2
   18d2c:	moveq	r1, r0
   18d30:	mov	r0, #0
   18d34:	mov	r2, #5
   18d38:	b	1172c <dcgettext@plt>
   18d3c:	and	r2, r0, #61440	; 0xf000
   18d40:	sub	r2, r2, #4096	; 0x1000
   18d44:	lsr	r3, r2, #12
   18d48:	cmp	r3, #11
   18d4c:	bhi	18d9c <__assert_fail@plt+0x7310>
   18d50:	add	r2, pc, #4
   18d54:	mov	ip, #45	; 0x2d
   18d58:	ldr	pc, [r2, r3, lsl #2]
   18d5c:	andeq	r8, r1, ip, lsl #27
   18d60:	muleq	r1, r4, sp
   18d64:	muleq	r1, ip, sp
   18d68:	andeq	r8, r1, r4, lsr #27
   18d6c:	muleq	r1, ip, sp
   18d70:			; <UNDEFINED> instruction: 0x00018dbc
   18d74:	muleq	r1, ip, sp
   18d78:	andeq	r8, r1, r0, asr #27
   18d7c:	muleq	r1, ip, sp
   18d80:	andeq	r8, r1, ip, lsr #27
   18d84:	muleq	r1, ip, sp
   18d88:			; <UNDEFINED> instruction: 0x00018db4
   18d8c:	mov	ip, #112	; 0x70
   18d90:	b	18dc0 <__assert_fail@plt+0x7334>
   18d94:	mov	ip, #99	; 0x63
   18d98:	b	18dc0 <__assert_fail@plt+0x7334>
   18d9c:	mov	ip, #63	; 0x3f
   18da0:	b	18dc0 <__assert_fail@plt+0x7334>
   18da4:	mov	ip, #100	; 0x64
   18da8:	b	18dc0 <__assert_fail@plt+0x7334>
   18dac:	mov	ip, #108	; 0x6c
   18db0:	b	18dc0 <__assert_fail@plt+0x7334>
   18db4:	mov	ip, #115	; 0x73
   18db8:	b	18dc0 <__assert_fail@plt+0x7334>
   18dbc:	mov	ip, #98	; 0x62
   18dc0:	push	{fp, lr}
   18dc4:	mov	fp, sp
   18dc8:	mov	r2, #32
   18dcc:	tst	r0, #256	; 0x100
   18dd0:	mov	r3, #114	; 0x72
   18dd4:	strb	ip, [r1]
   18dd8:	mov	ip, #114	; 0x72
   18ddc:	mov	lr, #45	; 0x2d
   18de0:	strh	r2, [r1, #10]
   18de4:	movweq	r3, #45	; 0x2d
   18de8:	tst	r0, #128	; 0x80
   18dec:	mov	r2, #119	; 0x77
   18df0:	movweq	r2, #45	; 0x2d
   18df4:	strb	r3, [r1, #1]
   18df8:	tst	r0, #32
   18dfc:	mov	r3, #119	; 0x77
   18e00:	strb	r2, [r1, #2]
   18e04:	mov	r2, #114	; 0x72
   18e08:	movweq	r2, #45	; 0x2d
   18e0c:	tst	r0, #16
   18e10:	strb	r2, [r1, #4]
   18e14:	mov	r2, #119	; 0x77
   18e18:	movweq	r2, #45	; 0x2d
   18e1c:	tst	r0, #4
   18e20:	movweq	ip, #45	; 0x2d
   18e24:	tst	r0, #2
   18e28:	strb	r2, [r1, #5]
   18e2c:	movweq	r3, #45	; 0x2d
   18e30:	strb	ip, [r1, #7]
   18e34:	ands	r2, r0, #64	; 0x40
   18e38:	mov	ip, #45	; 0x2d
   18e3c:	strb	r3, [r1, #8]
   18e40:	mov	r3, #83	; 0x53
   18e44:	movwne	lr, #120	; 0x78
   18e48:	mov	r2, #83	; 0x53
   18e4c:	movwne	r3, #115	; 0x73
   18e50:	tst	r0, #2048	; 0x800
   18e54:	moveq	r3, lr
   18e58:	strb	r3, [r1, #3]
   18e5c:	ands	r3, r0, #8
   18e60:	mov	r3, #45	; 0x2d
   18e64:	movwne	r2, #115	; 0x73
   18e68:	movwne	r3, #120	; 0x78
   18e6c:	tst	r0, #1024	; 0x400
   18e70:	moveq	r2, r3
   18e74:	strb	r2, [r1, #6]
   18e78:	ands	r2, r0, #1
   18e7c:	mov	r2, #84	; 0x54
   18e80:	movwne	ip, #120	; 0x78
   18e84:	movwne	r2, #116	; 0x74
   18e88:	tst	r0, #512	; 0x200
   18e8c:	moveq	r2, ip
   18e90:	strb	r2, [r1, #9]
   18e94:	pop	{fp, pc}
   18e98:	ldr	r0, [r0, #16]
   18e9c:	b	18d3c <__assert_fail@plt+0x72b0>
   18ea0:	push	{r4, r5, r6, sl, fp, lr}
   18ea4:	add	fp, sp, #16
   18ea8:	mov	r4, r0
   18eac:	bl	118e8 <__errno_location@plt>
   18eb0:	ldr	r6, [r0]
   18eb4:	mov	r5, r0
   18eb8:	mov	r0, r4
   18ebc:	bl	116f0 <free@plt>
   18ec0:	str	r6, [r5]
   18ec4:	pop	{r4, r5, r6, sl, fp, pc}
   18ec8:	push	{r4, r5, r6, sl, fp, lr}
   18ecc:	add	fp, sp, #16
   18ed0:	mov	r5, r0
   18ed4:	mov	r0, #0
   18ed8:	mov	r4, r1
   18edc:	add	r6, r2, #19
   18ee0:	cmp	r1, #0
   18ee4:	strb	r0, [r2, #20]
   18ee8:	blt	18f38 <__assert_fail@plt+0x74ac>
   18eec:	mov	r0, r5
   18ef0:	mov	r1, r4
   18ef4:	mov	r2, #10
   18ef8:	mov	r3, #0
   18efc:	bl	20730 <__assert_fail@plt+0xeca4>
   18f00:	add	r2, r0, r0, lsl #2
   18f04:	sub	r2, r5, r2, lsl #1
   18f08:	add	r2, r2, #48	; 0x30
   18f0c:	strb	r2, [r6], #-1
   18f10:	adds	r2, r5, #9
   18f14:	mov	r5, r0
   18f18:	adc	r3, r4, #0
   18f1c:	rsbs	r2, r2, #18
   18f20:	mov	r4, r1
   18f24:	rscs	r2, r3, #0
   18f28:	bcc	18eec <__assert_fail@plt+0x7460>
   18f2c:	add	r6, r6, #1
   18f30:	mov	r0, r6
   18f34:	pop	{r4, r5, r6, sl, fp, pc}
   18f38:	mov	r0, r5
   18f3c:	mov	r1, r4
   18f40:	mov	r2, #10
   18f44:	mov	r3, #0
   18f48:	bl	20730 <__assert_fail@plt+0xeca4>
   18f4c:	add	r2, r0, r0, lsl #2
   18f50:	rsb	r2, r5, r2, lsl #1
   18f54:	add	r2, r2, #48	; 0x30
   18f58:	strb	r2, [r6], #-1
   18f5c:	adds	r2, r5, #9
   18f60:	mov	r5, r0
   18f64:	adc	r3, r4, #0
   18f68:	rsbs	r2, r2, #18
   18f6c:	mov	r4, r1
   18f70:	rscs	r2, r3, #0
   18f74:	bcc	18f38 <__assert_fail@plt+0x74ac>
   18f78:	mov	r0, #45	; 0x2d
   18f7c:	strb	r0, [r6]
   18f80:	mov	r0, r6
   18f84:	pop	{r4, r5, r6, sl, fp, pc}
   18f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f8c:	add	fp, sp, #28
   18f90:	sub	sp, sp, #36	; 0x24
   18f94:	movw	r0, #9241	; 0x2419
   18f98:	movw	r1, #9312	; 0x2460
   18f9c:	movt	r0, #2
   18fa0:	movt	r1, #2
   18fa4:	bl	11a08 <fopen64@plt>
   18fa8:	cmp	r0, #0
   18fac:	beq	196ec <__assert_fail@plt+0x7c60>
   18fb0:	mov	sl, r0
   18fb4:	mov	r0, #0
   18fb8:	add	r1, sp, #24
   18fbc:	mov	r2, #10
   18fc0:	str	r0, [sp, #28]
   18fc4:	str	r0, [sp, #24]
   18fc8:	add	r0, sp, #28
   18fcc:	mov	r3, sl
   18fd0:	bl	1169c <__getdelim@plt>
   18fd4:	cmn	r0, #1
   18fd8:	beq	19ad0 <__assert_fail@plt+0x8044>
   18fdc:	movw	r8, #9262	; 0x242e
   18fe0:	add	r0, sp, #32
   18fe4:	add	r9, sp, #12
   18fe8:	add	r6, sp, #20
   18fec:	add	r7, sp, #16
   18ff0:	add	r5, sp, #28
   18ff4:	add	r4, sp, #24
   18ff8:	str	sl, [sp, #4]
   18ffc:	movt	r8, #2
   19000:	str	r0, [sp, #8]
   19004:	b	19178 <__assert_fail@plt+0x76ec>
   19008:	ldr	sl, [sp, #4]
   1900c:	movw	r8, #9262	; 0x242e
   19010:	add	r9, sp, #12
   19014:	add	r6, sp, #20
   19018:	movt	r8, #2
   1901c:	b	196c0 <__assert_fail@plt+0x7c34>
   19020:	ldrb	r0, [r4]
   19024:	cmp	r0, #47	; 0x2f
   19028:	ldrbeq	r0, [r4, #1]
   1902c:	cmpeq	r0, #47	; 0x2f
   19030:	beq	1912c <__assert_fail@plt+0x76a0>
   19034:	movw	r1, #7575	; 0x1d97
   19038:	mov	r0, r6
   1903c:	movt	r1, #2
   19040:	bl	116b4 <strcmp@plt>
   19044:	cmp	r0, #0
   19048:	beq	1968c <__assert_fail@plt+0x7c00>
   1904c:	movw	r1, #7969	; 0x1f21
   19050:	mov	r0, r6
   19054:	movt	r1, #2
   19058:	bl	116b4 <strcmp@plt>
   1905c:	cmp	r0, #0
   19060:	beq	1968c <__assert_fail@plt+0x7c00>
   19064:	movw	r1, #7710	; 0x1e1e
   19068:	mov	r0, r6
   1906c:	movt	r1, #2
   19070:	bl	116b4 <strcmp@plt>
   19074:	cmp	r0, #0
   19078:	beq	1968c <__assert_fail@plt+0x7c00>
   1907c:	movw	r1, #9331	; 0x2473
   19080:	mov	r0, r6
   19084:	movt	r1, #2
   19088:	bl	116b4 <strcmp@plt>
   1908c:	cmp	r0, #0
   19090:	beq	1968c <__assert_fail@plt+0x7c00>
   19094:	movw	r1, #7846	; 0x1ea6
   19098:	mov	r0, r6
   1909c:	movt	r1, #2
   190a0:	bl	116b4 <strcmp@plt>
   190a4:	cmp	r0, #0
   190a8:	beq	1968c <__assert_fail@plt+0x7c00>
   190ac:	movw	r1, #7885	; 0x1ecd
   190b0:	mov	r0, r6
   190b4:	movt	r1, #2
   190b8:	bl	116b4 <strcmp@plt>
   190bc:	cmp	r0, #0
   190c0:	beq	1968c <__assert_fail@plt+0x7c00>
   190c4:	movw	r1, #7930	; 0x1efa
   190c8:	mov	r0, r6
   190cc:	movt	r1, #2
   190d0:	bl	116b4 <strcmp@plt>
   190d4:	cmp	r0, #0
   190d8:	beq	1968c <__assert_fail@plt+0x7c00>
   190dc:	movw	r1, #8100	; 0x1fa4
   190e0:	mov	r0, r6
   190e4:	movt	r1, #2
   190e8:	bl	116b4 <strcmp@plt>
   190ec:	cmp	r0, #0
   190f0:	beq	1968c <__assert_fail@plt+0x7c00>
   190f4:	movw	r1, #8340	; 0x2094
   190f8:	mov	r0, r6
   190fc:	movt	r1, #2
   19100:	bl	116b4 <strcmp@plt>
   19104:	cmp	r0, #0
   19108:	add	r6, sp, #20
   1910c:	beq	19690 <__assert_fail@plt+0x7c04>
   19110:	movw	r0, #9342	; 0x247e
   19114:	mov	r1, r4
   19118:	movt	r0, #2
   1911c:	bl	116b4 <strcmp@plt>
   19120:	clz	r0, r0
   19124:	lsr	r8, r0, #5
   19128:	b	19690 <__assert_fail@plt+0x7c04>
   1912c:	movw	r1, #9320	; 0x2468
   19130:	mov	r0, r6
   19134:	movt	r1, #2
   19138:	bl	116b4 <strcmp@plt>
   1913c:	cmp	r0, #0
   19140:	beq	1968c <__assert_fail@plt+0x7c00>
   19144:	movw	r1, #9326	; 0x246e
   19148:	mov	r0, r6
   1914c:	movt	r1, #2
   19150:	bl	116b4 <strcmp@plt>
   19154:	cmp	r0, #0
   19158:	beq	1968c <__assert_fail@plt+0x7c00>
   1915c:	movw	r1, #7705	; 0x1e19
   19160:	mov	r0, r6
   19164:	movt	r1, #2
   19168:	bl	116b4 <strcmp@plt>
   1916c:	cmp	r0, #0
   19170:	bne	19034 <__assert_fail@plt+0x75a8>
   19174:	b	1968c <__assert_fail@plt+0x7c00>
   19178:	ldr	r0, [sp, #28]
   1917c:	mov	r1, r8
   19180:	mov	r2, r6
   19184:	mov	r3, r7
   19188:	str	r9, [sp]
   1918c:	bl	119cc <sscanf@plt>
   19190:	orr	r0, r0, #1
   19194:	cmp	r0, #3
   19198:	bne	196cc <__assert_fail@plt+0x7c40>
   1919c:	ldr	r0, [sp, #12]
   191a0:	ldr	r1, [sp, #28]
   191a4:	add	r0, r1, r0
   191a8:	mov	r1, #32
   191ac:	mov	r5, r0
   191b0:	bl	118b8 <strchr@plt>
   191b4:	cmp	r0, #0
   191b8:	beq	196bc <__assert_fail@plt+0x7c30>
   191bc:	mov	r6, r0
   191c0:	mov	r4, #0
   191c4:	mov	r1, #32
   191c8:	strb	r4, [r6], #1
   191cc:	mov	r0, r6
   191d0:	bl	118b8 <strchr@plt>
   191d4:	cmp	r0, #0
   191d8:	beq	196bc <__assert_fail@plt+0x7c30>
   191dc:	movw	r1, #9279	; 0x243f
   191e0:	strb	r4, [r0], #1
   191e4:	movt	r1, #2
   191e8:	bl	1ef08 <__assert_fail@plt+0xd47c>
   191ec:	cmp	r0, #0
   191f0:	beq	196bc <__assert_fail@plt+0x7c30>
   191f4:	add	sl, r0, #3
   191f8:	mov	r1, #32
   191fc:	mov	r0, sl
   19200:	bl	118b8 <strchr@plt>
   19204:	cmp	r0, #0
   19208:	beq	19008 <__assert_fail@plt+0x757c>
   1920c:	mov	r9, r0
   19210:	mov	r4, #0
   19214:	mov	r1, #32
   19218:	strb	r4, [r9], #1
   1921c:	mov	r0, r9
   19220:	bl	118b8 <strchr@plt>
   19224:	cmp	r0, #0
   19228:	beq	19008 <__assert_fail@plt+0x757c>
   1922c:	strb	r4, [r0]
   19230:	mov	r0, r9
   19234:	bl	118ac <strlen@plt>
   19238:	adds	r0, r0, #1
   1923c:	mov	r8, r5
   19240:	beq	192c0 <__assert_fail@plt+0x7834>
   19244:	mov	r2, #0
   19248:	mov	r1, r9
   1924c:	ldrb	r3, [r9, r2]
   19250:	add	r7, r2, #4
   19254:	cmp	r7, r0
   19258:	bcs	192b0 <__assert_fail@plt+0x7824>
   1925c:	cmp	r3, #92	; 0x5c
   19260:	bne	192b0 <__assert_fail@plt+0x7824>
   19264:	add	r7, r9, r2
   19268:	ldrb	r5, [r7, #1]
   1926c:	and	r4, r5, #252	; 0xfc
   19270:	cmp	r4, #48	; 0x30
   19274:	bne	192b0 <__assert_fail@plt+0x7824>
   19278:	ldrb	r4, [r7, #2]
   1927c:	and	r7, r4, #248	; 0xf8
   19280:	cmp	r7, #48	; 0x30
   19284:	bne	192b0 <__assert_fail@plt+0x7824>
   19288:	add	ip, r2, #3
   1928c:	ldrb	lr, [r9, ip]
   19290:	and	r7, lr, #248	; 0xf8
   19294:	cmp	r7, #48	; 0x30
   19298:	bne	192b0 <__assert_fail@plt+0x7824>
   1929c:	lsl	r2, r5, #6
   192a0:	add	r2, r2, r4, lsl #3
   192a4:	add	r2, r2, lr
   192a8:	add	r3, r2, #80	; 0x50
   192ac:	mov	r2, ip
   192b0:	add	r2, r2, #1
   192b4:	strb	r3, [r1], #1
   192b8:	cmp	r2, r0
   192bc:	bcc	1924c <__assert_fail@plt+0x77c0>
   192c0:	mov	r0, r6
   192c4:	bl	118ac <strlen@plt>
   192c8:	adds	r0, r0, #1
   192cc:	beq	1934c <__assert_fail@plt+0x78c0>
   192d0:	mov	r2, #0
   192d4:	mov	r1, r6
   192d8:	ldrb	r3, [r6, r2]
   192dc:	add	r7, r2, #4
   192e0:	cmp	r7, r0
   192e4:	bcs	1933c <__assert_fail@plt+0x78b0>
   192e8:	cmp	r3, #92	; 0x5c
   192ec:	bne	1933c <__assert_fail@plt+0x78b0>
   192f0:	add	r7, r6, r2
   192f4:	ldrb	r5, [r7, #1]
   192f8:	and	r4, r5, #252	; 0xfc
   192fc:	cmp	r4, #48	; 0x30
   19300:	bne	1933c <__assert_fail@plt+0x78b0>
   19304:	ldrb	r4, [r7, #2]
   19308:	and	r7, r4, #248	; 0xf8
   1930c:	cmp	r7, #48	; 0x30
   19310:	bne	1933c <__assert_fail@plt+0x78b0>
   19314:	add	ip, r2, #3
   19318:	ldrb	lr, [r6, ip]
   1931c:	and	r7, lr, #248	; 0xf8
   19320:	cmp	r7, #48	; 0x30
   19324:	bne	1933c <__assert_fail@plt+0x78b0>
   19328:	lsl	r2, r5, #6
   1932c:	add	r2, r2, r4, lsl #3
   19330:	add	r2, r2, lr
   19334:	add	r3, r2, #80	; 0x50
   19338:	mov	r2, ip
   1933c:	add	r2, r2, #1
   19340:	strb	r3, [r1], #1
   19344:	cmp	r2, r0
   19348:	bcc	192d8 <__assert_fail@plt+0x784c>
   1934c:	mov	r0, r8
   19350:	bl	118ac <strlen@plt>
   19354:	adds	r0, r0, #1
   19358:	beq	193d8 <__assert_fail@plt+0x794c>
   1935c:	mov	r2, #0
   19360:	mov	r1, r8
   19364:	ldrb	r3, [r8, r2]
   19368:	add	r7, r2, #4
   1936c:	cmp	r7, r0
   19370:	bcs	193c8 <__assert_fail@plt+0x793c>
   19374:	cmp	r3, #92	; 0x5c
   19378:	bne	193c8 <__assert_fail@plt+0x793c>
   1937c:	add	r7, r8, r2
   19380:	ldrb	r5, [r7, #1]
   19384:	and	r4, r5, #252	; 0xfc
   19388:	cmp	r4, #48	; 0x30
   1938c:	bne	193c8 <__assert_fail@plt+0x793c>
   19390:	ldrb	r4, [r7, #2]
   19394:	and	r7, r4, #248	; 0xf8
   19398:	cmp	r7, #48	; 0x30
   1939c:	bne	193c8 <__assert_fail@plt+0x793c>
   193a0:	add	ip, r2, #3
   193a4:	ldrb	lr, [r8, ip]
   193a8:	and	r7, lr, #248	; 0xf8
   193ac:	cmp	r7, #48	; 0x30
   193b0:	bne	193c8 <__assert_fail@plt+0x793c>
   193b4:	lsl	r2, r5, #6
   193b8:	add	r2, r2, r4, lsl #3
   193bc:	add	r2, r2, lr
   193c0:	add	r3, r2, #80	; 0x50
   193c4:	mov	r2, ip
   193c8:	add	r2, r2, #1
   193cc:	strb	r3, [r1], #1
   193d0:	cmp	r2, r0
   193d4:	bcc	19364 <__assert_fail@plt+0x78d8>
   193d8:	mov	r0, sl
   193dc:	bl	118ac <strlen@plt>
   193e0:	adds	r0, r0, #1
   193e4:	beq	19464 <__assert_fail@plt+0x79d8>
   193e8:	mov	r2, #0
   193ec:	mov	r1, sl
   193f0:	ldrb	r3, [sl, r2]
   193f4:	add	r7, r2, #4
   193f8:	cmp	r7, r0
   193fc:	bcs	19454 <__assert_fail@plt+0x79c8>
   19400:	cmp	r3, #92	; 0x5c
   19404:	bne	19454 <__assert_fail@plt+0x79c8>
   19408:	add	r7, sl, r2
   1940c:	ldrb	r5, [r7, #1]
   19410:	and	r4, r5, #252	; 0xfc
   19414:	cmp	r4, #48	; 0x30
   19418:	bne	19454 <__assert_fail@plt+0x79c8>
   1941c:	ldrb	r4, [r7, #2]
   19420:	and	r7, r4, #248	; 0xf8
   19424:	cmp	r7, #48	; 0x30
   19428:	bne	19454 <__assert_fail@plt+0x79c8>
   1942c:	add	ip, r2, #3
   19430:	ldrb	lr, [sl, ip]
   19434:	and	r7, lr, #248	; 0xf8
   19438:	cmp	r7, #48	; 0x30
   1943c:	bne	19454 <__assert_fail@plt+0x79c8>
   19440:	lsl	r2, r5, #6
   19444:	add	r2, r2, r4, lsl #3
   19448:	add	r2, r2, lr
   1944c:	add	r3, r2, #80	; 0x50
   19450:	mov	r2, ip
   19454:	add	r2, r2, #1
   19458:	strb	r3, [r1], #1
   1945c:	cmp	r2, r0
   19460:	bcc	193f0 <__assert_fail@plt+0x7964>
   19464:	mov	r0, #32
   19468:	bl	1e81c <__assert_fail@plt+0xcd90>
   1946c:	mov	r7, r0
   19470:	mov	r0, r9
   19474:	bl	1ed3c <__assert_fail@plt+0xd2b0>
   19478:	str	r0, [r7]
   1947c:	mov	r0, r6
   19480:	bl	1ed3c <__assert_fail@plt+0xd2b0>
   19484:	str	r0, [r7, #4]
   19488:	mov	r0, r8
   1948c:	bl	1ed3c <__assert_fail@plt+0xd2b0>
   19490:	str	r0, [r7, #8]
   19494:	mov	r0, sl
   19498:	bl	1ed3c <__assert_fail@plt+0xd2b0>
   1949c:	str	r0, [r7, #12]
   194a0:	mov	r6, r0
   194a4:	ldr	r2, [sp, #20]
   194a8:	ldrb	r0, [r7, #24]
   194ac:	mov	r3, r2
   194b0:	orr	r4, r0, #4
   194b4:	ldr	r0, [sp, #16]
   194b8:	bfc	r3, #0, #12
   194bc:	strb	r4, [r7, #24]
   194c0:	bic	r1, r0, #255	; 0xff
   194c4:	uxtb	r0, r0
   194c8:	bfi	r0, r2, #8, #12
   194cc:	orr	r3, r3, r1, lsr #20
   194d0:	orr	r0, r0, r1, lsl #12
   194d4:	movw	r1, #7609	; 0x1db9
   194d8:	str	r3, [r7, #20]
   194dc:	str	r0, [r7, #16]
   194e0:	mov	r0, r6
   194e4:	movt	r1, #2
   194e8:	bl	116b4 <strcmp@plt>
   194ec:	cmp	r0, #0
   194f0:	mov	r8, #1
   194f4:	mov	r0, #1
   194f8:	beq	19664 <__assert_fail@plt+0x7bd8>
   194fc:	movw	r1, #8140	; 0x1fcc
   19500:	mov	r0, r6
   19504:	movt	r1, #2
   19508:	bl	116b4 <strcmp@plt>
   1950c:	cmp	r0, #0
   19510:	mov	r0, #1
   19514:	beq	19664 <__assert_fail@plt+0x7bd8>
   19518:	movw	r1, #9283	; 0x2443
   1951c:	mov	r0, r6
   19520:	movt	r1, #2
   19524:	bl	116b4 <strcmp@plt>
   19528:	cmp	r0, #0
   1952c:	mov	r0, #1
   19530:	beq	19664 <__assert_fail@plt+0x7bd8>
   19534:	movw	r1, #7753	; 0x1e49
   19538:	mov	r0, r6
   1953c:	movt	r1, #2
   19540:	bl	116b4 <strcmp@plt>
   19544:	cmp	r0, #0
   19548:	mov	r0, #1
   1954c:	beq	19664 <__assert_fail@plt+0x7bd8>
   19550:	movw	r1, #7768	; 0x1e58
   19554:	mov	r0, r6
   19558:	movt	r1, #2
   1955c:	bl	116b4 <strcmp@plt>
   19560:	cmp	r0, #0
   19564:	mov	r0, #1
   19568:	beq	19664 <__assert_fail@plt+0x7bd8>
   1956c:	movw	r1, #7860	; 0x1eb4
   19570:	mov	r0, r6
   19574:	movt	r1, #2
   19578:	bl	116b4 <strcmp@plt>
   1957c:	cmp	r0, #0
   19580:	mov	r0, #1
   19584:	beq	19664 <__assert_fail@plt+0x7bd8>
   19588:	movw	r1, #9289	; 0x2449
   1958c:	mov	r0, r6
   19590:	movt	r1, #2
   19594:	bl	116b4 <strcmp@plt>
   19598:	cmp	r0, #0
   1959c:	mov	r0, #1
   195a0:	beq	19664 <__assert_fail@plt+0x7bd8>
   195a4:	movw	r1, #8050	; 0x1f72
   195a8:	mov	r0, r6
   195ac:	movt	r1, #2
   195b0:	bl	116b4 <strcmp@plt>
   195b4:	cmp	r0, #0
   195b8:	mov	r0, #1
   195bc:	beq	19664 <__assert_fail@plt+0x7bd8>
   195c0:	movw	r1, #8183	; 0x1ff7
   195c4:	mov	r0, r6
   195c8:	movt	r1, #2
   195cc:	bl	116b4 <strcmp@plt>
   195d0:	cmp	r0, #0
   195d4:	mov	r0, #1
   195d8:	beq	19664 <__assert_fail@plt+0x7bd8>
   195dc:	movw	r1, #8270	; 0x204e
   195e0:	mov	r0, r6
   195e4:	movt	r1, #2
   195e8:	bl	116b4 <strcmp@plt>
   195ec:	cmp	r0, #0
   195f0:	mov	r0, #1
   195f4:	beq	19664 <__assert_fail@plt+0x7bd8>
   195f8:	movw	r1, #8315	; 0x207b
   195fc:	mov	r0, r6
   19600:	movt	r1, #2
   19604:	bl	116b4 <strcmp@plt>
   19608:	cmp	r0, #0
   1960c:	mov	r0, #1
   19610:	beq	19664 <__assert_fail@plt+0x7bd8>
   19614:	movw	r1, #9301	; 0x2455
   19618:	mov	r0, r6
   1961c:	movt	r1, #2
   19620:	bl	116b4 <strcmp@plt>
   19624:	cmp	r0, #0
   19628:	mov	r0, #1
   1962c:	beq	19664 <__assert_fail@plt+0x7bd8>
   19630:	movw	r1, #9308	; 0x245c
   19634:	mov	r0, r6
   19638:	movt	r1, #2
   1963c:	bl	116b4 <strcmp@plt>
   19640:	cmp	r0, #0
   19644:	mov	r0, #1
   19648:	beq	19664 <__assert_fail@plt+0x7bd8>
   1964c:	movw	r1, #9315	; 0x2463
   19650:	mov	r0, r6
   19654:	movt	r1, #2
   19658:	bl	116b4 <strcmp@plt>
   1965c:	clz	r0, r0
   19660:	lsr	r0, r0, #5
   19664:	bic	r1, r4, #1
   19668:	orr	r5, r1, r0
   1966c:	mov	r1, #58	; 0x3a
   19670:	strb	r5, [r7, #24]
   19674:	ldr	r4, [r7]
   19678:	mov	r0, r4
   1967c:	bl	118b8 <strchr@plt>
   19680:	ldr	sl, [sp, #4]
   19684:	cmp	r0, #0
   19688:	beq	19020 <__assert_fail@plt+0x7594>
   1968c:	add	r6, sp, #20
   19690:	and	r0, r5, #253	; 0xfd
   19694:	add	r9, sp, #12
   19698:	orr	r0, r0, r8, lsl #1
   1969c:	movw	r8, #9262	; 0x242e
   196a0:	strb	r0, [r7, #24]
   196a4:	ldr	r0, [sp, #8]
   196a8:	movt	r8, #2
   196ac:	str	r7, [r0]
   196b0:	add	r0, r7, #28
   196b4:	str	r0, [sp, #8]
   196b8:	b	196c0 <__assert_fail@plt+0x7c34>
   196bc:	add	r6, sp, #20
   196c0:	add	r7, sp, #16
   196c4:	add	r5, sp, #28
   196c8:	add	r4, sp, #24
   196cc:	mov	r0, r5
   196d0:	mov	r1, r4
   196d4:	mov	r2, #10
   196d8:	mov	r3, sl
   196dc:	bl	1169c <__getdelim@plt>
   196e0:	cmn	r0, #1
   196e4:	bne	19178 <__assert_fail@plt+0x76ec>
   196e8:	b	19ad8 <__assert_fail@plt+0x804c>
   196ec:	movw	r0, #9349	; 0x2485
   196f0:	movw	r1, #6599	; 0x19c7
   196f4:	movt	r0, #2
   196f8:	movt	r1, #2
   196fc:	bl	11a20 <setmntent@plt>
   19700:	cmp	r0, #0
   19704:	beq	19b98 <__assert_fail@plt+0x810c>
   19708:	mov	r8, r0
   1970c:	bl	117ec <getmntent@plt>
   19710:	cmp	r0, #0
   19714:	beq	19ba8 <__assert_fail@plt+0x811c>
   19718:	mov	r5, r0
   1971c:	add	sl, sp, #32
   19720:	b	19878 <__assert_fail@plt+0x7dec>
   19724:	ldrb	r0, [r5]
   19728:	cmp	r0, #47	; 0x2f
   1972c:	ldrbeq	r0, [r5, #1]
   19730:	cmpeq	r0, #47	; 0x2f
   19734:	beq	1982c <__assert_fail@plt+0x7da0>
   19738:	movw	r1, #7575	; 0x1d97
   1973c:	mov	r0, r7
   19740:	movt	r1, #2
   19744:	bl	116b4 <strcmp@plt>
   19748:	cmp	r0, #0
   1974c:	beq	19a88 <__assert_fail@plt+0x7ffc>
   19750:	movw	r1, #7969	; 0x1f21
   19754:	mov	r0, r7
   19758:	movt	r1, #2
   1975c:	bl	116b4 <strcmp@plt>
   19760:	cmp	r0, #0
   19764:	beq	19a88 <__assert_fail@plt+0x7ffc>
   19768:	movw	r1, #7710	; 0x1e1e
   1976c:	mov	r0, r7
   19770:	movt	r1, #2
   19774:	bl	116b4 <strcmp@plt>
   19778:	cmp	r0, #0
   1977c:	beq	19a88 <__assert_fail@plt+0x7ffc>
   19780:	movw	r1, #9331	; 0x2473
   19784:	mov	r0, r7
   19788:	movt	r1, #2
   1978c:	bl	116b4 <strcmp@plt>
   19790:	cmp	r0, #0
   19794:	beq	19a88 <__assert_fail@plt+0x7ffc>
   19798:	movw	r1, #7846	; 0x1ea6
   1979c:	mov	r0, r7
   197a0:	movt	r1, #2
   197a4:	bl	116b4 <strcmp@plt>
   197a8:	cmp	r0, #0
   197ac:	beq	19a88 <__assert_fail@plt+0x7ffc>
   197b0:	movw	r1, #7885	; 0x1ecd
   197b4:	mov	r0, r7
   197b8:	movt	r1, #2
   197bc:	bl	116b4 <strcmp@plt>
   197c0:	cmp	r0, #0
   197c4:	beq	19a88 <__assert_fail@plt+0x7ffc>
   197c8:	movw	r1, #7930	; 0x1efa
   197cc:	mov	r0, r7
   197d0:	movt	r1, #2
   197d4:	bl	116b4 <strcmp@plt>
   197d8:	cmp	r0, #0
   197dc:	beq	19a88 <__assert_fail@plt+0x7ffc>
   197e0:	movw	r1, #8100	; 0x1fa4
   197e4:	mov	r0, r7
   197e8:	movt	r1, #2
   197ec:	bl	116b4 <strcmp@plt>
   197f0:	cmp	r0, #0
   197f4:	beq	19a88 <__assert_fail@plt+0x7ffc>
   197f8:	movw	r1, #8340	; 0x2094
   197fc:	mov	r0, r7
   19800:	movt	r1, #2
   19804:	bl	116b4 <strcmp@plt>
   19808:	cmp	r0, #0
   1980c:	beq	19a88 <__assert_fail@plt+0x7ffc>
   19810:	movw	r0, #9342	; 0x247e
   19814:	mov	r1, r5
   19818:	movt	r0, #2
   1981c:	bl	116b4 <strcmp@plt>
   19820:	clz	r0, r0
   19824:	lsr	r6, r0, #5
   19828:	b	19a88 <__assert_fail@plt+0x7ffc>
   1982c:	movw	r1, #9320	; 0x2468
   19830:	mov	r0, r7
   19834:	movt	r1, #2
   19838:	bl	116b4 <strcmp@plt>
   1983c:	cmp	r0, #0
   19840:	beq	19a88 <__assert_fail@plt+0x7ffc>
   19844:	movw	r1, #9326	; 0x246e
   19848:	mov	r0, r7
   1984c:	movt	r1, #2
   19850:	bl	116b4 <strcmp@plt>
   19854:	cmp	r0, #0
   19858:	beq	19a88 <__assert_fail@plt+0x7ffc>
   1985c:	movw	r1, #7705	; 0x1e19
   19860:	mov	r0, r7
   19864:	movt	r1, #2
   19868:	bl	116b4 <strcmp@plt>
   1986c:	cmp	r0, #0
   19870:	bne	19738 <__assert_fail@plt+0x7cac>
   19874:	b	19a88 <__assert_fail@plt+0x7ffc>
   19878:	movw	r1, #9359	; 0x248f
   1987c:	mov	r0, r5
   19880:	movt	r1, #2
   19884:	bl	117bc <hasmntopt@plt>
   19888:	str	r0, [sp, #8]
   1988c:	mov	r0, #32
   19890:	bl	1e81c <__assert_fail@plt+0xcd90>
   19894:	mov	r9, r0
   19898:	ldr	r0, [r5]
   1989c:	bl	1ed3c <__assert_fail@plt+0xd2b0>
   198a0:	str	r0, [r9]
   198a4:	ldr	r0, [r5, #4]
   198a8:	bl	1ed3c <__assert_fail@plt+0xd2b0>
   198ac:	str	r0, [r9, #4]
   198b0:	mov	r0, #0
   198b4:	str	r0, [r9, #8]
   198b8:	ldr	r0, [r5, #8]
   198bc:	bl	1ed3c <__assert_fail@plt+0xd2b0>
   198c0:	str	r0, [r9, #12]
   198c4:	mov	r7, r0
   198c8:	movw	r1, #7609	; 0x1db9
   198cc:	ldrb	r0, [r9, #24]
   198d0:	movt	r1, #2
   198d4:	orr	r4, r0, #4
   198d8:	mov	r0, r7
   198dc:	strb	r4, [r9, #24]
   198e0:	bl	116b4 <strcmp@plt>
   198e4:	cmp	r0, #0
   198e8:	mov	r6, #1
   198ec:	mov	r0, #1
   198f0:	beq	19a64 <__assert_fail@plt+0x7fd8>
   198f4:	movw	r1, #8140	; 0x1fcc
   198f8:	mov	r0, r7
   198fc:	movt	r1, #2
   19900:	bl	116b4 <strcmp@plt>
   19904:	cmp	r0, #0
   19908:	mov	r0, #1
   1990c:	beq	19a64 <__assert_fail@plt+0x7fd8>
   19910:	movw	r1, #9283	; 0x2443
   19914:	mov	r0, r7
   19918:	movt	r1, #2
   1991c:	bl	116b4 <strcmp@plt>
   19920:	cmp	r0, #0
   19924:	mov	r0, #1
   19928:	beq	19a64 <__assert_fail@plt+0x7fd8>
   1992c:	movw	r1, #7753	; 0x1e49
   19930:	mov	r0, r7
   19934:	movt	r1, #2
   19938:	bl	116b4 <strcmp@plt>
   1993c:	cmp	r0, #0
   19940:	mov	r0, #1
   19944:	beq	19a64 <__assert_fail@plt+0x7fd8>
   19948:	movw	r1, #7768	; 0x1e58
   1994c:	mov	r0, r7
   19950:	movt	r1, #2
   19954:	bl	116b4 <strcmp@plt>
   19958:	cmp	r0, #0
   1995c:	mov	r0, #1
   19960:	beq	19a64 <__assert_fail@plt+0x7fd8>
   19964:	movw	r1, #7860	; 0x1eb4
   19968:	mov	r0, r7
   1996c:	movt	r1, #2
   19970:	bl	116b4 <strcmp@plt>
   19974:	cmp	r0, #0
   19978:	mov	r0, #1
   1997c:	beq	19a64 <__assert_fail@plt+0x7fd8>
   19980:	movw	r1, #9289	; 0x2449
   19984:	mov	r0, r7
   19988:	movt	r1, #2
   1998c:	bl	116b4 <strcmp@plt>
   19990:	cmp	r0, #0
   19994:	mov	r0, #1
   19998:	beq	19a64 <__assert_fail@plt+0x7fd8>
   1999c:	movw	r1, #8050	; 0x1f72
   199a0:	mov	r0, r7
   199a4:	movt	r1, #2
   199a8:	bl	116b4 <strcmp@plt>
   199ac:	cmp	r0, #0
   199b0:	mov	r0, #1
   199b4:	beq	19a64 <__assert_fail@plt+0x7fd8>
   199b8:	movw	r1, #8183	; 0x1ff7
   199bc:	mov	r0, r7
   199c0:	movt	r1, #2
   199c4:	bl	116b4 <strcmp@plt>
   199c8:	cmp	r0, #0
   199cc:	mov	r0, #1
   199d0:	beq	19a64 <__assert_fail@plt+0x7fd8>
   199d4:	movw	r1, #8270	; 0x204e
   199d8:	mov	r0, r7
   199dc:	movt	r1, #2
   199e0:	bl	116b4 <strcmp@plt>
   199e4:	cmp	r0, #0
   199e8:	mov	r0, #1
   199ec:	beq	19a64 <__assert_fail@plt+0x7fd8>
   199f0:	movw	r1, #8315	; 0x207b
   199f4:	mov	r0, r7
   199f8:	movt	r1, #2
   199fc:	bl	116b4 <strcmp@plt>
   19a00:	cmp	r0, #0
   19a04:	mov	r0, #1
   19a08:	beq	19a64 <__assert_fail@plt+0x7fd8>
   19a0c:	movw	r1, #9301	; 0x2455
   19a10:	mov	r0, r7
   19a14:	movt	r1, #2
   19a18:	bl	116b4 <strcmp@plt>
   19a1c:	cmp	r0, #0
   19a20:	mov	r0, #1
   19a24:	beq	19a64 <__assert_fail@plt+0x7fd8>
   19a28:	movw	r1, #9308	; 0x245c
   19a2c:	mov	r0, r7
   19a30:	movt	r1, #2
   19a34:	bl	116b4 <strcmp@plt>
   19a38:	cmp	r0, #0
   19a3c:	mov	r0, #1
   19a40:	beq	19a64 <__assert_fail@plt+0x7fd8>
   19a44:	movw	r1, #9315	; 0x2463
   19a48:	mov	r0, r7
   19a4c:	movt	r1, #2
   19a50:	bl	116b4 <strcmp@plt>
   19a54:	ldr	r1, [sp, #8]
   19a58:	orr	r0, r1, r0
   19a5c:	clz	r0, r0
   19a60:	lsr	r0, r0, #5
   19a64:	bic	r1, r4, #1
   19a68:	orr	r4, r1, r0
   19a6c:	mov	r1, #58	; 0x3a
   19a70:	strb	r4, [r9, #24]
   19a74:	ldr	r5, [r9]
   19a78:	mov	r0, r5
   19a7c:	bl	118b8 <strchr@plt>
   19a80:	cmp	r0, #0
   19a84:	beq	19724 <__assert_fail@plt+0x7c98>
   19a88:	mvn	r0, #0
   19a8c:	str	r0, [r9, #16]
   19a90:	str	r0, [r9, #20]
   19a94:	and	r0, r4, #253	; 0xfd
   19a98:	orr	r0, r0, r6, lsl #1
   19a9c:	strb	r0, [r9, #24]
   19aa0:	mov	r0, r8
   19aa4:	str	r9, [sl]
   19aa8:	add	sl, r9, #28
   19aac:	bl	117ec <getmntent@plt>
   19ab0:	mov	r5, r0
   19ab4:	cmp	r0, #0
   19ab8:	bne	19878 <__assert_fail@plt+0x7dec>
   19abc:	mov	r0, r8
   19ac0:	bl	11978 <endmntent@plt>
   19ac4:	cmp	r0, #0
   19ac8:	bne	19bbc <__assert_fail@plt+0x8130>
   19acc:	b	19b20 <__assert_fail@plt+0x8094>
   19ad0:	add	r0, sp, #32
   19ad4:	str	r0, [sp, #8]
   19ad8:	ldr	r0, [sp, #28]
   19adc:	bl	18ea0 <__assert_fail@plt+0x7414>
   19ae0:	ldrb	r0, [sl]
   19ae4:	tst	r0, #32
   19ae8:	bne	19b04 <__assert_fail@plt+0x8078>
   19aec:	mov	r0, sl
   19af0:	bl	1ffa0 <__assert_fail@plt+0xe514>
   19af4:	ldr	sl, [sp, #8]
   19af8:	cmn	r0, #1
   19afc:	bne	19bbc <__assert_fail@plt+0x8130>
   19b00:	b	19b20 <__assert_fail@plt+0x8094>
   19b04:	bl	118e8 <__errno_location@plt>
   19b08:	ldr	r6, [r0]
   19b0c:	mov	r5, r0
   19b10:	mov	r0, sl
   19b14:	bl	1ffa0 <__assert_fail@plt+0xe514>
   19b18:	ldr	sl, [sp, #8]
   19b1c:	str	r6, [r5]
   19b20:	bl	118e8 <__errno_location@plt>
   19b24:	mov	r4, #0
   19b28:	ldr	r8, [r0]
   19b2c:	mov	r5, r0
   19b30:	str	r4, [sl]
   19b34:	ldr	r6, [sp, #32]
   19b38:	cmp	r6, #0
   19b3c:	beq	19b88 <__assert_fail@plt+0x80fc>
   19b40:	ldr	r0, [r6]
   19b44:	ldr	r7, [r6, #28]
   19b48:	bl	18ea0 <__assert_fail@plt+0x7414>
   19b4c:	ldr	r0, [r6, #4]
   19b50:	bl	18ea0 <__assert_fail@plt+0x7414>
   19b54:	ldr	r0, [r6, #8]
   19b58:	bl	18ea0 <__assert_fail@plt+0x7414>
   19b5c:	ldrb	r0, [r6, #24]
   19b60:	tst	r0, #4
   19b64:	beq	19b70 <__assert_fail@plt+0x80e4>
   19b68:	ldr	r0, [r6, #12]
   19b6c:	bl	18ea0 <__assert_fail@plt+0x7414>
   19b70:	mov	r0, r6
   19b74:	bl	18ea0 <__assert_fail@plt+0x7414>
   19b78:	cmp	r7, #0
   19b7c:	mov	r6, r7
   19b80:	str	r7, [sp, #32]
   19b84:	bne	19b40 <__assert_fail@plt+0x80b4>
   19b88:	str	r8, [r5]
   19b8c:	mov	r0, r4
   19b90:	sub	sp, fp, #28
   19b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b98:	mov	r4, #0
   19b9c:	mov	r0, r4
   19ba0:	sub	sp, fp, #28
   19ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ba8:	add	sl, sp, #32
   19bac:	mov	r0, r8
   19bb0:	bl	11978 <endmntent@plt>
   19bb4:	cmp	r0, #0
   19bb8:	beq	19b20 <__assert_fail@plt+0x8094>
   19bbc:	mov	r0, #0
   19bc0:	str	r0, [sl]
   19bc4:	ldr	r4, [sp, #32]
   19bc8:	mov	r0, r4
   19bcc:	sub	sp, fp, #28
   19bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bd4:	push	{r4, sl, fp, lr}
   19bd8:	add	fp, sp, #8
   19bdc:	mov	r4, r0
   19be0:	ldr	r0, [r0]
   19be4:	bl	18ea0 <__assert_fail@plt+0x7414>
   19be8:	ldr	r0, [r4, #4]
   19bec:	bl	18ea0 <__assert_fail@plt+0x7414>
   19bf0:	ldr	r0, [r4, #8]
   19bf4:	bl	18ea0 <__assert_fail@plt+0x7414>
   19bf8:	ldrb	r0, [r4, #24]
   19bfc:	tst	r0, #4
   19c00:	beq	19c0c <__assert_fail@plt+0x8180>
   19c04:	ldr	r0, [r4, #12]
   19c08:	bl	18ea0 <__assert_fail@plt+0x7414>
   19c0c:	mov	r0, r4
   19c10:	pop	{r4, sl, fp, lr}
   19c14:	b	18ea0 <__assert_fail@plt+0x7414>
   19c18:	push	{fp, lr}
   19c1c:	mov	fp, sp
   19c20:	sub	sp, sp, #24
   19c24:	mvn	ip, #0
   19c28:	str	ip, [sp, #8]
   19c2c:	mov	ip, #0
   19c30:	str	ip, [sp, #4]
   19c34:	str	ip, [sp]
   19c38:	ldr	ip, [fp, #12]
   19c3c:	str	ip, [sp, #16]
   19c40:	ldr	ip, [fp, #8]
   19c44:	str	ip, [sp, #12]
   19c48:	bl	19c54 <__assert_fail@plt+0x81c8>
   19c4c:	mov	sp, fp
   19c50:	pop	{fp, pc}
   19c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c58:	add	fp, sp, #28
   19c5c:	sub	sp, sp, #132	; 0x84
   19c60:	sub	sp, sp, #1024	; 0x400
   19c64:	mov	r4, r3
   19c68:	mov	sl, r2
   19c6c:	str	r1, [sp, #96]	; 0x60
   19c70:	mov	r5, r0
   19c74:	bl	118e8 <__errno_location@plt>
   19c78:	mov	r2, r4
   19c7c:	ldrb	r3, [sl]
   19c80:	str	r0, [sp, #68]	; 0x44
   19c84:	ldr	r0, [r0]
   19c88:	movw	r6, #5254	; 0x1486
   19c8c:	ldr	r1, [r2, #8]!
   19c90:	movt	r6, #2
   19c94:	str	r0, [sp, #64]	; 0x40
   19c98:	cmp	r1, #0
   19c9c:	mov	r7, r1
   19ca0:	movweq	r7, #12
   19ca4:	cmp	r1, #12
   19ca8:	subgt	r7, r1, #12
   19cac:	ldr	r1, [r2, #32]
   19cb0:	cmp	r1, #0
   19cb4:	movne	r6, r1
   19cb8:	cmp	r3, #0
   19cbc:	beq	1b658 <__assert_fail@plt+0x9bcc>
   19cc0:	sub	r0, fp, #48	; 0x30
   19cc4:	mvn	r1, #13
   19cc8:	ldr	r9, [fp, #16]
   19ccc:	str	r4, [sp, #80]	; 0x50
   19cd0:	sub	r8, r6, #1
   19cd4:	str	r6, [sp, #44]	; 0x2c
   19cd8:	mov	lr, #0
   19cdc:	mov	r6, #-2147483648	; 0x80000000
   19ce0:	mov	ip, r5
   19ce4:	str	r7, [sp, #52]	; 0x34
   19ce8:	str	r2, [sp, #56]	; 0x38
   19cec:	sub	r1, r1, r0
   19cf0:	str	r8, [sp, #24]
   19cf4:	str	r1, [sp, #36]	; 0x24
   19cf8:	add	r1, r0, #13
   19cfc:	add	r0, r0, #14
   19d00:	str	r1, [sp, #28]
   19d04:	add	r1, sp, #104	; 0x68
   19d08:	str	r0, [sp, #72]	; 0x48
   19d0c:	add	r1, r1, #1
   19d10:	str	r1, [sp, #40]	; 0x28
   19d14:	add	r1, r4, #12
   19d18:	movw	r4, #52428	; 0xcccc
   19d1c:	str	r1, [sp, #48]	; 0x30
   19d20:	sub	r1, fp, #53	; 0x35
   19d24:	movt	r4, #3276	; 0xccc
   19d28:	add	r0, r1, #3
   19d2c:	str	r0, [sp, #60]	; 0x3c
   19d30:	add	r0, r1, #2
   19d34:	str	r0, [sp, #76]	; 0x4c
   19d38:	uxtb	r1, r3
   19d3c:	cmp	r1, #37	; 0x25
   19d40:	bne	19d5c <__assert_fail@plt+0x82d0>
   19d44:	ldr	r0, [fp, #8]
   19d48:	mov	r7, #0
   19d4c:	mov	r5, #0
   19d50:	str	sl, [sp, #88]	; 0x58
   19d54:	str	r0, [sp, #100]	; 0x64
   19d58:	b	19e5c <__assert_fail@plt+0x83d0>
   19d5c:	ldr	r0, [sp, #96]	; 0x60
   19d60:	bic	r1, r9, r9, asr #31
   19d64:	cmp	r1, #1
   19d68:	mov	r5, r1
   19d6c:	movls	r5, #1
   19d70:	sub	r2, r0, lr
   19d74:	cmp	r5, r2
   19d78:	bcs	1b68c <__assert_fail@plt+0x9c00>
   19d7c:	cmp	ip, #0
   19d80:	beq	19f10 <__assert_fail@plt+0x8484>
   19d84:	cmp	r1, #2
   19d88:	bcc	19dc4 <__assert_fail@plt+0x8338>
   19d8c:	sub	r4, r1, #1
   19d90:	mov	r0, ip
   19d94:	mov	r1, #32
   19d98:	mov	r6, lr
   19d9c:	mov	r7, ip
   19da0:	mov	r2, r4
   19da4:	bl	11918 <memset@plt>
   19da8:	ldrb	r3, [sl]
   19dac:	mov	ip, r7
   19db0:	mov	lr, r6
   19db4:	mov	r6, #-2147483648	; 0x80000000
   19db8:	add	ip, r7, r4
   19dbc:	movw	r4, #52428	; 0xcccc
   19dc0:	movt	r4, #3276	; 0xccc
   19dc4:	strb	r3, [ip], #1
   19dc8:	add	lr, r5, lr
   19dcc:	ldrb	r3, [sl, #1]!
   19dd0:	mvn	r9, #0
   19dd4:	cmp	r3, #0
   19dd8:	bne	19d38 <__assert_fail@plt+0x82ac>
   19ddc:	b	1b660 <__assert_fail@plt+0x9bd4>
   19de0:	mov	r7, #1
   19de4:	b	19e5c <__assert_fail@plt+0x83d0>
   19de8:	add	r3, pc, #0
   19dec:	ldr	pc, [r3, r2, lsl #2]
   19df0:	andeq	r9, r1, r0, ror #27
   19df4:	andeq	r9, r1, r8, ror lr
   19df8:	andeq	r9, r1, r8, ror lr
   19dfc:	andeq	r9, r1, r8, ror lr
   19e00:	andeq	r9, r1, r8, ror lr
   19e04:	andeq	r9, r1, r8, ror lr
   19e08:	andeq	r9, r1, r8, ror lr
   19e0c:	andeq	r9, r1, r8, ror lr
   19e10:	andeq	r9, r1, r8, lsr #28
   19e14:	andeq	r9, r1, r8, ror lr
   19e18:	andeq	r9, r1, r8, lsr #28
   19e1c:	andeq	r9, r1, r8, ror lr
   19e20:	andeq	r9, r1, r8, ror lr
   19e24:	andeq	r9, r1, r8, lsr #28
   19e28:	add	r1, r1, #1
   19e2c:	add	sl, sl, #1
   19e30:	mov	r5, r0
   19e34:	ldrb	r0, [sl]
   19e38:	sub	r2, r0, #35	; 0x23
   19e3c:	cmp	r2, #13
   19e40:	bls	19de8 <__assert_fail@plt+0x835c>
   19e44:	cmp	r0, #95	; 0x5f
   19e48:	beq	19e28 <__assert_fail@plt+0x839c>
   19e4c:	cmp	r0, #94	; 0x5e
   19e50:	bne	19e78 <__assert_fail@plt+0x83ec>
   19e54:	mov	r0, #1
   19e58:	str	r0, [sp, #100]	; 0x64
   19e5c:	add	r1, sl, #2
   19e60:	add	sl, sl, #1
   19e64:	ldrb	r0, [sl]
   19e68:	sub	r2, r0, #35	; 0x23
   19e6c:	cmp	r2, #13
   19e70:	bls	19de8 <__assert_fail@plt+0x835c>
   19e74:	b	19e44 <__assert_fail@plt+0x83b8>
   19e78:	sub	r2, r0, #48	; 0x30
   19e7c:	cmp	r2, #9
   19e80:	bhi	19ef0 <__assert_fail@plt+0x8464>
   19e84:	mov	r9, #0
   19e88:	cmn	r9, #1
   19e8c:	ble	19e9c <__assert_fail@plt+0x8410>
   19e90:	cmp	r9, r4
   19e94:	bgt	19eac <__assert_fail@plt+0x8420>
   19e98:	b	19ec4 <__assert_fail@plt+0x8438>
   19e9c:	beq	19ec4 <__assert_fail@plt+0x8438>
   19ea0:	sdiv	r2, r6, r9
   19ea4:	cmp	r2, #10
   19ea8:	bge	19ec4 <__assert_fail@plt+0x8438>
   19eac:	mvn	r9, #-2147483648	; 0x80000000
   19eb0:	ldrb	r0, [r1], #1
   19eb4:	sub	r2, r0, #48	; 0x30
   19eb8:	cmp	r2, #10
   19ebc:	bcc	19e88 <__assert_fail@plt+0x83fc>
   19ec0:	b	19eec <__assert_fail@plt+0x8460>
   19ec4:	add	r2, r9, r9, lsl #2
   19ec8:	lsl	r3, r2, #1
   19ecc:	uxtab	r0, r3, r0
   19ed0:	sub	r9, r0, #48	; 0x30
   19ed4:	cmp	r9, r2, lsl #1
   19ed8:	mvnvs	r9, #-2147483648	; 0x80000000
   19edc:	ldrb	r0, [r1], #1
   19ee0:	sub	r2, r0, #48	; 0x30
   19ee4:	cmp	r2, #10
   19ee8:	bcc	19e88 <__assert_fail@plt+0x83fc>
   19eec:	sub	sl, r1, #1
   19ef0:	cmp	r0, #79	; 0x4f
   19ef4:	str	ip, [sp, #92]	; 0x5c
   19ef8:	cmpne	r0, #69	; 0x45
   19efc:	bne	19f2c <__assert_fail@plt+0x84a0>
   19f00:	ldrb	r1, [sl, #1]!
   19f04:	cmp	r1, #122	; 0x7a
   19f08:	bls	19f3c <__assert_fail@plt+0x84b0>
   19f0c:	b	1ab64 <__assert_fail@plt+0x90d8>
   19f10:	mov	ip, #0
   19f14:	add	lr, r5, lr
   19f18:	ldrb	r3, [sl, #1]!
   19f1c:	mvn	r9, #0
   19f20:	cmp	r3, #0
   19f24:	bne	19d38 <__assert_fail@plt+0x82ac>
   19f28:	b	1b660 <__assert_fail@plt+0x9bd4>
   19f2c:	mov	r1, r0
   19f30:	mov	r0, #0
   19f34:	cmp	r1, #122	; 0x7a
   19f38:	bhi	1ab64 <__assert_fail@plt+0x90d8>
   19f3c:	movw	r4, #9382	; 0x24a6
   19f40:	add	r2, pc, #12
   19f44:	mov	r6, #0
   19f48:	mvn	r8, #0
   19f4c:	movt	r4, #2
   19f50:	ldr	pc, [r2, r1, lsl #2]
   19f54:	andeq	sl, r1, ip, lsr #5
   19f58:	andeq	sl, r1, r4, ror #22
   19f5c:	andeq	sl, r1, r4, ror #22
   19f60:	andeq	sl, r1, r4, ror #22
   19f64:	andeq	sl, r1, r4, ror #22
   19f68:	andeq	sl, r1, r4, ror #22
   19f6c:	andeq	sl, r1, r4, ror #22
   19f70:	andeq	sl, r1, r4, ror #22
   19f74:	andeq	sl, r1, r4, ror #22
   19f78:	andeq	sl, r1, r4, ror #22
   19f7c:	andeq	sl, r1, r4, ror #22
   19f80:	andeq	sl, r1, r4, ror #22
   19f84:	andeq	sl, r1, r4, ror #22
   19f88:	andeq	sl, r1, r4, ror #22
   19f8c:	andeq	sl, r1, r4, ror #22
   19f90:	andeq	sl, r1, r4, ror #22
   19f94:	andeq	sl, r1, r4, ror #22
   19f98:	andeq	sl, r1, r4, ror #22
   19f9c:	andeq	sl, r1, r4, ror #22
   19fa0:	andeq	sl, r1, r4, ror #22
   19fa4:	andeq	sl, r1, r4, ror #22
   19fa8:	andeq	sl, r1, r4, ror #22
   19fac:	andeq	sl, r1, r4, ror #22
   19fb0:	andeq	sl, r1, r4, ror #22
   19fb4:	andeq	sl, r1, r4, ror #22
   19fb8:	andeq	sl, r1, r4, ror #22
   19fbc:	andeq	sl, r1, r4, ror #22
   19fc0:	andeq	sl, r1, r4, ror #22
   19fc4:	andeq	sl, r1, r4, ror #22
   19fc8:	andeq	sl, r1, r4, ror #22
   19fcc:	andeq	sl, r1, r4, ror #22
   19fd0:	andeq	sl, r1, r4, ror #22
   19fd4:	andeq	sl, r1, r4, ror #22
   19fd8:	andeq	sl, r1, r4, ror #22
   19fdc:	andeq	sl, r1, r4, ror #22
   19fe0:	andeq	sl, r1, r4, ror #22
   19fe4:	andeq	sl, r1, r4, ror #22
   19fe8:			; <UNDEFINED> instruction: 0x0001a2b8
   19fec:	andeq	sl, r1, r4, ror #22
   19ff0:	andeq	sl, r1, r4, ror #22
   19ff4:	andeq	sl, r1, r4, ror #22
   19ff8:	andeq	sl, r1, r4, ror #22
   19ffc:	andeq	sl, r1, r4, ror #22
   1a000:	andeq	sl, r1, r4, ror #22
   1a004:	andeq	sl, r1, r4, ror #22
   1a008:	andeq	sl, r1, r4, ror #22
   1a00c:	andeq	sl, r1, r4, ror #22
   1a010:	andeq	sl, r1, r4, ror #22
   1a014:	andeq	sl, r1, r4, ror #22
   1a018:	andeq	sl, r1, r4, ror #22
   1a01c:	andeq	sl, r1, r4, ror #22
   1a020:	andeq	sl, r1, r4, ror #22
   1a024:	andeq	sl, r1, r4, ror #22
   1a028:	andeq	sl, r1, r4, ror #22
   1a02c:	andeq	sl, r1, r4, ror #22
   1a030:	andeq	sl, r1, r4, ror #22
   1a034:	andeq	sl, r1, r4, ror #22
   1a038:	andeq	sl, r1, r4, ror #22
   1a03c:	andeq	sl, r1, r4, lsr #6
   1a040:	andeq	sl, r1, r4, ror #22
   1a044:	andeq	sl, r1, r4, ror #22
   1a048:	andeq	sl, r1, r4, ror #22
   1a04c:	andeq	sl, r1, r4, ror #22
   1a050:	andeq	sl, r1, r4, ror #22
   1a054:	andeq	sl, r1, r4, ror #22
   1a058:	andeq	sl, r1, r0, lsr #7
   1a05c:	andeq	sl, r1, r0, asr #7
   1a060:	andeq	sl, r1, r0, ror #7
   1a064:	strdeq	sl, [r1], -r4
   1a068:	andeq	sl, r1, r4, ror #22
   1a06c:	andeq	sl, r1, r8, lsl #8
   1a070:	andeq	sl, r1, r0, asr #2
   1a074:	andeq	sl, r1, r4, lsr r4
   1a078:	andeq	sl, r1, r8, asr #8
   1a07c:	andeq	sl, r1, r4, ror #22
   1a080:	andeq	sl, r1, r4, ror #22
   1a084:	andeq	sl, r1, r4, ror #22
   1a088:	andeq	sl, r1, ip, asr r4
   1a08c:	andeq	sl, r1, r0, ror r4
   1a090:	andeq	sl, r1, r4, ror #22
   1a094:	muleq	r1, r4, r5
   1a098:	andeq	sl, r1, r4, ror #22
   1a09c:	ldrdeq	sl, [r1], -r0
   1a0a0:			; <UNDEFINED> instruction: 0x0001a5b4
   1a0a4:	andeq	sl, r1, r8, asr #11
   1a0a8:	andeq	sl, r1, r8, ror r6
   1a0ac:	andeq	sl, r1, r0, asr #2
   1a0b0:	andeq	sl, r1, r4, lsr #13
   1a0b4:	strdeq	sl, [r1], -r0
   1a0b8:	andeq	sl, r1, r4, lsl #14
   1a0bc:	andeq	sl, r1, r0, asr #14
   1a0c0:	andeq	sl, r1, r4, ror #22
   1a0c4:	andeq	sl, r1, r4, ror #22
   1a0c8:	andeq	sl, r1, r4, ror #22
   1a0cc:	andeq	sl, r1, r4, ror #22
   1a0d0:	andeq	sl, r1, r4, ror #22
   1a0d4:	andeq	sl, r1, r4, ror #22
   1a0d8:			; <UNDEFINED> instruction: 0x0001a7b0
   1a0dc:	muleq	r1, r0, r2
   1a0e0:	ldrdeq	sl, [r1], -r0
   1a0e4:	andeq	sl, r1, r4, ror #15
   1a0e8:	strdeq	sl, [r1], -r8
   1a0ec:	andeq	sl, r1, r4, ror #22
   1a0f0:	andeq	sl, r1, r0, asr #2
   1a0f4:	muleq	r1, r0, r2
   1a0f8:	andeq	sl, r1, r4, ror #22
   1a0fc:	andeq	sl, r1, r8, lsl #16
   1a100:	andeq	sl, r1, r0, lsr #16
   1a104:	andeq	sl, r1, r4, lsr r8
   1a108:	andeq	sl, r1, r8, ror #18
   1a10c:	muleq	r1, r0, r9
   1a110:	andeq	sl, r1, r4, ror #22
   1a114:	muleq	r1, r8, r5
   1a118:	strdeq	sl, [r1], -r0
   1a11c:	andeq	fp, r1, r4, lsr #8
   1a120:	andeq	sl, r1, r0, lsl sl
   1a124:			; <UNDEFINED> instruction: 0x0001aab0
   1a128:	andeq	sl, r1, r0, lsl fp
   1a12c:	andeq	sl, r1, r4, ror #22
   1a130:	andeq	sl, r1, r4, asr #22
   1a134:	andeq	sl, r1, ip, asr fp
   1a138:	andeq	sl, r1, r0, lsr #25
   1a13c:	andeq	sl, r1, r0, asr r3
   1a140:	cmp	r0, #69	; 0x45
   1a144:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a148:	ldr	r2, [sp, #80]	; 0x50
   1a14c:	str	lr, [sp, #84]	; 0x54
   1a150:	movw	ip, #9363	; 0x2493
   1a154:	movt	ip, #37449	; 0x9249
   1a158:	ldr	r6, [r2, #28]
   1a15c:	ldr	r8, [r2, #24]
   1a160:	ldr	lr, [r2, #20]
   1a164:	movw	r2, #382	; 0x17e
   1a168:	add	r2, r6, r2
   1a16c:	cmp	lr, #0
   1a170:	sub	r2, r2, r8
   1a174:	smmla	r4, r2, ip, r2
   1a178:	asr	r7, r4, #2
   1a17c:	add	r4, r7, r4, lsr #31
   1a180:	rsb	r4, r4, r4, lsl #3
   1a184:	sub	r2, r4, r2
   1a188:	add	r2, r6, r2
   1a18c:	add	r4, r2, #3
   1a190:	mvn	r2, #99	; 0x63
   1a194:	movwlt	r2, #300	; 0x12c
   1a198:	cmn	r4, #1
   1a19c:	add	r2, r2, lr
   1a1a0:	ble	1ae2c <__assert_fail@plt+0x93a0>
   1a1a4:	movw	r7, #365	; 0x16d
   1a1a8:	tst	r2, #3
   1a1ac:	bne	1a1f8 <__assert_fail@plt+0x876c>
   1a1b0:	movw	r7, #34079	; 0x851f
   1a1b4:	mov	ip, #100	; 0x64
   1a1b8:	movt	r7, #20971	; 0x51eb
   1a1bc:	smmul	r7, r2, r7
   1a1c0:	asr	r3, r7, #5
   1a1c4:	add	r3, r3, r7, lsr #31
   1a1c8:	mls	ip, r3, ip, r2
   1a1cc:	asr	r3, r7, #7
   1a1d0:	add	r3, r3, r7, lsr #31
   1a1d4:	mov	r7, #400	; 0x190
   1a1d8:	mls	r2, r3, r7, r2
   1a1dc:	movw	r7, #365	; 0x16d
   1a1e0:	cmp	r2, #0
   1a1e4:	movweq	r7, #366	; 0x16e
   1a1e8:	cmp	ip, #0
   1a1ec:	movw	ip, #9363	; 0x2493
   1a1f0:	movt	ip, #37449	; 0x9249
   1a1f4:	movwne	r7, #366	; 0x16e
   1a1f8:	movw	r3, #382	; 0x17e
   1a1fc:	add	r2, r8, r7
   1a200:	add	r3, r6, r3
   1a204:	sub	r2, r3, r2
   1a208:	smmla	r2, r2, ip, r2
   1a20c:	asr	r3, r2, #2
   1a210:	add	r2, r3, r2, lsr #31
   1a214:	movw	r3, #379	; 0x17b
   1a218:	rsb	r2, r2, r2, lsl #3
   1a21c:	add	r2, r2, r8
   1a220:	sub	r2, r2, r3
   1a224:	mov	r3, #1
   1a228:	cmn	r2, #1
   1a22c:	eor	r3, r3, r2, lsr #31
   1a230:	movgt	r4, r2
   1a234:	cmp	r1, #71	; 0x47
   1a238:	beq	1aeb0 <__assert_fail@plt+0x9424>
   1a23c:	cmp	r1, #103	; 0x67
   1a240:	bne	1af04 <__assert_fail@plt+0x9478>
   1a244:	movw	r2, #34079	; 0x851f
   1a248:	mov	ip, #2
   1a24c:	movt	r2, #20971	; 0x51eb
   1a250:	smmul	r7, lr, r2
   1a254:	asr	r6, r7, #5
   1a258:	add	r7, r6, r7, lsr #31
   1a25c:	mov	r6, #100	; 0x64
   1a260:	mls	r7, r7, r6, lr
   1a264:	add	r7, r3, r7
   1a268:	smmul	r2, r7, r2
   1a26c:	asr	r4, r2, #5
   1a270:	add	r2, r4, r2, lsr #31
   1a274:	mls	r4, r2, r6, r7
   1a278:	mov	r2, #0
   1a27c:	cmn	r4, #1
   1a280:	ble	1b14c <__assert_fail@plt+0x96c0>
   1a284:	ldr	lr, [sp, #84]	; 0x54
   1a288:	mov	r3, r4
   1a28c:	b	1b18c <__assert_fail@plt+0x9700>
   1a290:	ldr	r2, [sp, #100]	; 0x64
   1a294:	mov	r6, #0
   1a298:	cmp	r0, #69	; 0x45
   1a29c:	orr	r2, r7, r2
   1a2a0:	str	r2, [sp, #100]	; 0x64
   1a2a4:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a2a8:	b	1b424 <__assert_fail@plt+0x9998>
   1a2ac:	ldr	ip, [sp, #92]	; 0x5c
   1a2b0:	sub	r8, sl, #1
   1a2b4:	b	1ab6c <__assert_fail@plt+0x90e0>
   1a2b8:	ldr	r0, [sp, #88]	; 0x58
   1a2bc:	ldr	ip, [sp, #92]	; 0x5c
   1a2c0:	sub	r8, sl, #1
   1a2c4:	cmp	r8, r0
   1a2c8:	bne	1ab6c <__assert_fail@plt+0x90e0>
   1a2cc:	ldr	r1, [sp, #96]	; 0x60
   1a2d0:	subs	r0, r5, #45	; 0x2d
   1a2d4:	bicne	r0, r9, r9, asr #31
   1a2d8:	cmp	r0, #1
   1a2dc:	mov	r6, r0
   1a2e0:	movls	r6, #1
   1a2e4:	sub	r1, r1, lr
   1a2e8:	cmp	r6, r1
   1a2ec:	bcs	1b68c <__assert_fail@plt+0x9c00>
   1a2f0:	cmp	ip, #0
   1a2f4:	beq	1a670 <__assert_fail@plt+0x8be4>
   1a2f8:	mov	r1, #37	; 0x25
   1a2fc:	cmp	r0, #2
   1a300:	bcc	1b648 <__assert_fail@plt+0x9bbc>
   1a304:	uxtb	r1, r5
   1a308:	sub	r4, r0, #1
   1a30c:	cmp	r1, #48	; 0x30
   1a310:	cmpne	r1, #43	; 0x2b
   1a314:	bne	1b620 <__assert_fail@plt+0x9b94>
   1a318:	mov	r0, ip
   1a31c:	mov	r1, #48	; 0x30
   1a320:	b	1b628 <__assert_fail@plt+0x9b9c>
   1a324:	mov	r6, #1
   1a328:	ldrb	r2, [sl, r6]
   1a32c:	cmp	r2, #58	; 0x3a
   1a330:	bne	1a344 <__assert_fail@plt+0x88b8>
   1a334:	add	r6, r6, #1
   1a338:	ldrb	r2, [sl, r6]
   1a33c:	cmp	r2, #58	; 0x3a
   1a340:	beq	1a334 <__assert_fail@plt+0x88a8>
   1a344:	cmp	r2, #122	; 0x7a
   1a348:	bne	1ab64 <__assert_fail@plt+0x90d8>
   1a34c:	add	sl, sl, r6
   1a350:	ldr	r3, [sp, #80]	; 0x50
   1a354:	ldr	r2, [r3, #32]
   1a358:	cmp	r2, #0
   1a35c:	blt	1aee0 <__assert_fail@plt+0x9454>
   1a360:	str	lr, [sp, #84]	; 0x54
   1a364:	ldr	lr, [r3, #36]	; 0x24
   1a368:	cmp	lr, #0
   1a36c:	blt	1b02c <__assert_fail@plt+0x95a0>
   1a370:	ldr	ip, [sp, #92]	; 0x5c
   1a374:	mov	r2, #0
   1a378:	bne	1b034 <__assert_fail@plt+0x95a8>
   1a37c:	ldr	r2, [sp, #44]	; 0x2c
   1a380:	ldrb	r2, [r2]
   1a384:	sub	r2, r2, #45	; 0x2d
   1a388:	clz	r2, r2
   1a38c:	lsr	r2, r2, #5
   1a390:	cmp	r6, #3
   1a394:	bls	1b03c <__assert_fail@plt+0x95b0>
   1a398:	ldr	lr, [sp, #84]	; 0x54
   1a39c:	b	1ab68 <__assert_fail@plt+0x90dc>
   1a3a0:	cmp	r0, #0
   1a3a4:	bne	1ab64 <__assert_fail@plt+0x90d8>
   1a3a8:	ldr	r1, [sp, #100]	; 0x64
   1a3ac:	mov	r6, #0
   1a3b0:	orr	r1, r7, r1
   1a3b4:	str	r1, [sp, #100]	; 0x64
   1a3b8:	mov	r1, #65	; 0x41
   1a3bc:	b	1b424 <__assert_fail@plt+0x9998>
   1a3c0:	cmp	r0, #69	; 0x45
   1a3c4:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a3c8:	ldr	r1, [sp, #100]	; 0x64
   1a3cc:	mov	r6, #0
   1a3d0:	orr	r1, r7, r1
   1a3d4:	str	r1, [sp, #100]	; 0x64
   1a3d8:	mov	r1, #66	; 0x42
   1a3dc:	b	1b424 <__assert_fail@plt+0x9998>
   1a3e0:	cmp	r0, #69	; 0x45
   1a3e4:	bne	1af20 <__assert_fail@plt+0x9494>
   1a3e8:	mov	r6, #0
   1a3ec:	mov	r1, #67	; 0x43
   1a3f0:	b	1b424 <__assert_fail@plt+0x9998>
   1a3f4:	cmp	r0, #0
   1a3f8:	bne	1ab64 <__assert_fail@plt+0x90d8>
   1a3fc:	movw	r4, #9364	; 0x2494
   1a400:	movt	r4, #2
   1a404:	b	1a5d0 <__assert_fail@plt+0x8b44>
   1a408:	cmp	r0, #0
   1a40c:	bne	1ab64 <__assert_fail@plt+0x90d8>
   1a410:	movw	r4, #9373	; 0x249d
   1a414:	cmp	r5, #0
   1a418:	movt	r4, #2
   1a41c:	bne	1b16c <__assert_fail@plt+0x96e0>
   1a420:	cmp	r9, #0
   1a424:	bge	1b16c <__assert_fail@plt+0x96e0>
   1a428:	mov	r5, #43	; 0x2b
   1a42c:	mov	r8, #4
   1a430:	b	1a5d0 <__assert_fail@plt+0x8b44>
   1a434:	cmp	r0, #69	; 0x45
   1a438:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a43c:	ldr	r2, [sp, #56]	; 0x38
   1a440:	ldr	r3, [r2]
   1a444:	b	1a848 <__assert_fail@plt+0x8dbc>
   1a448:	mov	ip, #2
   1a44c:	cmp	r0, #69	; 0x45
   1a450:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a454:	ldr	r3, [sp, #52]	; 0x34
   1a458:	b	1a84c <__assert_fail@plt+0x8dc0>
   1a45c:	cmp	r0, #69	; 0x45
   1a460:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a464:	ldr	r2, [sp, #80]	; 0x50
   1a468:	ldr	r3, [r2, #4]
   1a46c:	b	1a848 <__assert_fail@plt+0x8dbc>
   1a470:	cmp	r0, #69	; 0x45
   1a474:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a478:	ldr	r0, [fp, #24]
   1a47c:	cmp	r9, #1
   1a480:	mov	r4, #9
   1a484:	mov	r7, #8
   1a488:	movwlt	r9, #9
   1a48c:	cmp	r9, r4
   1a490:	bge	1a4b8 <__assert_fail@plt+0x8a2c>
   1a494:	movw	r1, #26215	; 0x6667
   1a498:	sub	r7, r7, #1
   1a49c:	sub	r4, r4, #1
   1a4a0:	movt	r1, #26214	; 0x6666
   1a4a4:	smmul	r0, r0, r1
   1a4a8:	asr	r1, r0, #2
   1a4ac:	add	r0, r1, r0, lsr #31
   1a4b0:	cmp	r9, r4
   1a4b4:	blt	1a494 <__assert_fail@plt+0x8a08>
   1a4b8:	movw	r1, #26215	; 0x6667
   1a4bc:	cmp	r4, #2
   1a4c0:	movt	r1, #26214	; 0x6666
   1a4c4:	blt	1a4e4 <__assert_fail@plt+0x8a58>
   1a4c8:	smmul	r2, r0, r1
   1a4cc:	asr	r3, r2, #2
   1a4d0:	add	r2, r3, r2, lsr #31
   1a4d4:	add	r2, r2, r2, lsl #2
   1a4d8:	sub	r2, r0, r2, lsl #1
   1a4dc:	cmp	r2, #0
   1a4e0:	beq	1a494 <__assert_fail@plt+0x8a08>
   1a4e4:	cmp	r4, #1
   1a4e8:	mov	r2, r7
   1a4ec:	sub	ip, fp, #48	; 0x30
   1a4f0:	blt	1a528 <__assert_fail@plt+0x8a9c>
   1a4f4:	smmul	r3, r0, r1
   1a4f8:	asr	r6, r3, #2
   1a4fc:	add	r3, r6, r3, lsr #31
   1a500:	add	r6, r3, r3, lsl #2
   1a504:	sub	r0, r0, r6, lsl #1
   1a508:	add	r0, r0, #48	; 0x30
   1a50c:	strb	r0, [ip, r2]
   1a510:	sub	r0, r2, #1
   1a514:	add	r2, r2, #1
   1a518:	cmp	r2, #1
   1a51c:	mov	r2, r0
   1a520:	mov	r0, r3
   1a524:	bgt	1a4f4 <__assert_fail@plt+0x8a68>
   1a528:	ldr	r0, [sp, #96]	; 0x60
   1a52c:	cmp	r5, #0
   1a530:	movweq	r5, #48	; 0x30
   1a534:	sub	r8, r0, lr
   1a538:	cmp	r4, r8
   1a53c:	bcs	1b68c <__assert_fail@plt+0x9c00>
   1a540:	ldr	r6, [sp, #92]	; 0x5c
   1a544:	mov	ip, #0
   1a548:	cmp	r6, #0
   1a54c:	beq	1b244 <__assert_fail@plt+0x97b8>
   1a550:	ldr	r0, [sp, #100]	; 0x64
   1a554:	tst	r0, #1
   1a558:	beq	1b228 <__assert_fail@plt+0x979c>
   1a55c:	cmp	r4, #0
   1a560:	beq	1b240 <__assert_fail@plt+0x97b4>
   1a564:	str	lr, [sp, #84]	; 0x54
   1a568:	bl	11858 <__ctype_toupper_loc@plt>
   1a56c:	ldr	lr, [sp, #84]	; 0x54
   1a570:	sub	r3, fp, #48	; 0x30
   1a574:	ldrb	r1, [r3, r7]
   1a578:	ldr	r2, [r0]
   1a57c:	ldr	r1, [r2, r1, lsl #2]
   1a580:	strb	r1, [r6, r7]
   1a584:	sub	r7, r7, #1
   1a588:	cmn	r7, #1
   1a58c:	bne	1a574 <__assert_fail@plt+0x8ae8>
   1a590:	b	1b240 <__assert_fail@plt+0x97b4>
   1a594:	mov	r6, #1
   1a598:	ldr	r2, [sp, #100]	; 0x64
   1a59c:	eor	r1, r7, #1
   1a5a0:	orr	r6, r7, r6
   1a5a4:	and	r2, r2, r1
   1a5a8:	mov	r1, #112	; 0x70
   1a5ac:	str	r2, [sp, #100]	; 0x64
   1a5b0:	b	1b424 <__assert_fail@plt+0x9998>
   1a5b4:	cmp	r0, #69	; 0x45
   1a5b8:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a5bc:	ldr	r2, [sp, #80]	; 0x50
   1a5c0:	ldr	r3, [r2]
   1a5c4:	b	1a848 <__assert_fail@plt+0x8dbc>
   1a5c8:	movw	r4, #9388	; 0x24ac
   1a5cc:	movt	r4, #2
   1a5d0:	ldr	r0, [sp, #100]	; 0x64
   1a5d4:	mvn	r1, #0
   1a5d8:	mov	r2, r4
   1a5dc:	and	r0, r0, #1
   1a5e0:	str	r0, [sp, #100]	; 0x64
   1a5e4:	stm	sp, {r0, r5, r8}
   1a5e8:	ldr	r0, [fp, #20]
   1a5ec:	str	lr, [sp, #84]	; 0x54
   1a5f0:	ldr	r3, [sp, #80]	; 0x50
   1a5f4:	str	r0, [sp, #12]
   1a5f8:	ldr	r0, [fp, #24]
   1a5fc:	str	r0, [sp, #16]
   1a600:	mov	r0, #0
   1a604:	bl	19c54 <__assert_fail@plt+0x81c8>
   1a608:	mov	r7, r0
   1a60c:	subs	r0, r5, #45	; 0x2d
   1a610:	ldr	lr, [sp, #84]	; 0x54
   1a614:	ldr	r1, [sp, #96]	; 0x60
   1a618:	movne	r0, r9
   1a61c:	cmp	r9, #0
   1a620:	mov	r6, r7
   1a624:	movwlt	r0, #0
   1a628:	cmp	r0, r7
   1a62c:	movhi	r6, r0
   1a630:	sub	r9, r1, lr
   1a634:	cmp	r6, r9
   1a638:	bcs	1b68c <__assert_fail@plt+0x9c00>
   1a63c:	ldr	ip, [sp, #92]	; 0x5c
   1a640:	cmp	ip, #0
   1a644:	beq	1a670 <__assert_fail@plt+0x8be4>
   1a648:	cmp	r0, r7
   1a64c:	bls	1acb4 <__assert_fail@plt+0x9228>
   1a650:	cmp	r5, #48	; 0x30
   1a654:	sub	r2, r0, r7
   1a658:	cmpne	r5, #43	; 0x2b
   1a65c:	str	r2, [sp, #88]	; 0x58
   1a660:	bne	1b0d0 <__assert_fail@plt+0x9644>
   1a664:	mov	r0, ip
   1a668:	mov	r1, #48	; 0x30
   1a66c:	b	1b0d8 <__assert_fail@plt+0x964c>
   1a670:	mov	ip, #0
   1a674:	b	1b128 <__assert_fail@plt+0x969c>
   1a678:	cmp	r0, #69	; 0x45
   1a67c:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a680:	ldr	r3, [sp, #80]	; 0x50
   1a684:	ldr	r2, [r3, #24]
   1a688:	ldr	r3, [r3, #28]
   1a68c:	add	r3, r3, #7
   1a690:	sub	r2, r3, r2
   1a694:	movw	r3, #9363	; 0x2493
   1a698:	movt	r3, #37449	; 0x9249
   1a69c:	smmla	r2, r2, r3, r2
   1a6a0:	b	1a6e4 <__assert_fail@plt+0x8c58>
   1a6a4:	cmp	r0, #69	; 0x45
   1a6a8:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a6ac:	ldr	r3, [sp, #80]	; 0x50
   1a6b0:	movw	r7, #9363	; 0x2493
   1a6b4:	movt	r7, #37449	; 0x9249
   1a6b8:	ldr	r2, [r3, #24]
   1a6bc:	ldr	r3, [r3, #28]
   1a6c0:	add	r2, r2, #6
   1a6c4:	smmla	r6, r2, r7, r2
   1a6c8:	asr	r4, r6, #2
   1a6cc:	add	r6, r4, r6, lsr #31
   1a6d0:	rsb	r6, r6, r6, lsl #3
   1a6d4:	sub	r2, r6, r2
   1a6d8:	add	r2, r3, r2
   1a6dc:	add	r2, r2, #7
   1a6e0:	smmla	r2, r2, r7, r2
   1a6e4:	asr	r3, r2, #2
   1a6e8:	add	r3, r3, r2, lsr #31
   1a6ec:	b	1a848 <__assert_fail@plt+0x8dbc>
   1a6f0:	cmp	r0, #79	; 0x4f
   1a6f4:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a6f8:	mov	r6, #0
   1a6fc:	mov	r1, #88	; 0x58
   1a700:	b	1b424 <__assert_fail@plt+0x9998>
   1a704:	cmp	r0, #69	; 0x45
   1a708:	beq	1b0c4 <__assert_fail@plt+0x9638>
   1a70c:	cmp	r0, #79	; 0x4f
   1a710:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a714:	ldr	r2, [sp, #80]	; 0x50
   1a718:	movw	r7, #63636	; 0xf894
   1a71c:	mov	ip, #4
   1a720:	movt	r7, #65535	; 0xffff
   1a724:	ldr	r3, [r2, #20]
   1a728:	mov	r2, #0
   1a72c:	cmp	r3, r7
   1a730:	movw	r7, #1900	; 0x76c
   1a734:	movwlt	r2, #1
   1a738:	add	r3, r3, r7
   1a73c:	b	1b18c <__assert_fail@plt+0x9700>
   1a740:	ldr	r0, [sp, #44]	; 0x2c
   1a744:	ldr	r8, [sp, #100]	; 0x64
   1a748:	subs	r6, r5, #45	; 0x2d
   1a74c:	str	lr, [sp, #84]	; 0x54
   1a750:	bicne	r6, r9, r9, asr #31
   1a754:	bl	118ac <strlen@plt>
   1a758:	ldr	lr, [sp, #84]	; 0x54
   1a75c:	mov	r9, r0
   1a760:	cmp	r6, r0
   1a764:	mov	r4, r0
   1a768:	ldr	r0, [sp, #96]	; 0x60
   1a76c:	movhi	r4, r6
   1a770:	sub	r0, r0, lr
   1a774:	cmp	r4, r0
   1a778:	bcs	1b68c <__assert_fail@plt+0x9c00>
   1a77c:	ldr	r0, [sp, #92]	; 0x5c
   1a780:	cmp	r0, #0
   1a784:	beq	1afbc <__assert_fail@plt+0x9530>
   1a788:	cmp	r6, r9
   1a78c:	mov	ip, r0
   1a790:	bls	1b2a8 <__assert_fail@plt+0x981c>
   1a794:	uxtb	r1, r5
   1a798:	sub	r2, r6, r9
   1a79c:	cmp	r1, #48	; 0x30
   1a7a0:	cmpne	r1, #43	; 0x2b
   1a7a4:	bne	1b290 <__assert_fail@plt+0x9804>
   1a7a8:	mov	r1, #48	; 0x30
   1a7ac:	b	1b294 <__assert_fail@plt+0x9808>
   1a7b0:	cmp	r0, #0
   1a7b4:	bne	1ab64 <__assert_fail@plt+0x90d8>
   1a7b8:	ldr	r1, [sp, #100]	; 0x64
   1a7bc:	mov	r6, #0
   1a7c0:	orr	r1, r7, r1
   1a7c4:	str	r1, [sp, #100]	; 0x64
   1a7c8:	mov	r1, #97	; 0x61
   1a7cc:	b	1b424 <__assert_fail@plt+0x9998>
   1a7d0:	cmp	r0, #79	; 0x4f
   1a7d4:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a7d8:	mov	r6, #0
   1a7dc:	mov	r1, #99	; 0x63
   1a7e0:	b	1b424 <__assert_fail@plt+0x9998>
   1a7e4:	cmp	r0, #69	; 0x45
   1a7e8:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a7ec:	ldr	r2, [sp, #48]	; 0x30
   1a7f0:	ldr	r3, [r2]
   1a7f4:	b	1a848 <__assert_fail@plt+0x8dbc>
   1a7f8:	ldr	r2, [sp, #48]	; 0x30
   1a7fc:	cmp	r0, #69	; 0x45
   1a800:	bne	1a82c <__assert_fail@plt+0x8da0>
   1a804:	b	1ab64 <__assert_fail@plt+0x90d8>
   1a808:	cmp	r0, #69	; 0x45
   1a80c:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a810:	ldr	r2, [sp, #80]	; 0x50
   1a814:	mov	ip, #3
   1a818:	ldr	r3, [r2, #28]
   1a81c:	b	1a97c <__assert_fail@plt+0x8ef0>
   1a820:	ldr	r2, [sp, #56]	; 0x38
   1a824:	cmp	r0, #69	; 0x45
   1a828:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a82c:	ldr	r3, [r2]
   1a830:	b	1a840 <__assert_fail@plt+0x8db4>
   1a834:	ldr	r3, [sp, #52]	; 0x34
   1a838:	cmp	r0, #69	; 0x45
   1a83c:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a840:	cmp	r5, #0
   1a844:	movweq	r5, #95	; 0x5f
   1a848:	mov	ip, #2
   1a84c:	lsr	r2, r3, #31
   1a850:	cmp	r2, #0
   1a854:	mov	r7, #0
   1a858:	mov	r4, #0
   1a85c:	movwne	r2, #1
   1a860:	cmp	r0, #79	; 0x4f
   1a864:	moveq	r6, #0
   1a868:	cmpeq	r2, #0
   1a86c:	beq	1b424 <__assert_fail@plt+0x9998>
   1a870:	ldr	r8, [sp, #72]	; 0x48
   1a874:	cmp	r2, #0
   1a878:	rsbne	r3, r3, #0
   1a87c:	tst	r7, #1
   1a880:	asr	r7, r7, #1
   1a884:	movne	r0, #58	; 0x3a
   1a888:	strbne	r0, [r8, #-1]!
   1a88c:	movw	r0, #52429	; 0xcccd
   1a890:	cmp	r3, #9
   1a894:	movt	r0, #52428	; 0xcccc
   1a898:	umull	r0, r1, r3, r0
   1a89c:	lsr	r0, r1, #3
   1a8a0:	add	r1, r0, r0, lsl #2
   1a8a4:	sub	r1, r3, r1, lsl #1
   1a8a8:	mov	r3, r0
   1a8ac:	orr	r1, r1, #48	; 0x30
   1a8b0:	strb	r1, [r8, #-1]!
   1a8b4:	bhi	1a87c <__assert_fail@plt+0x8df0>
   1a8b8:	cmp	r7, #0
   1a8bc:	mov	r3, r0
   1a8c0:	bne	1a87c <__assert_fail@plt+0x8df0>
   1a8c4:	cmp	r9, #0
   1a8c8:	ldr	r7, [sp, #92]	; 0x5c
   1a8cc:	str	sl, [sp, #88]	; 0x58
   1a8d0:	movlt	r9, ip
   1a8d4:	ldr	ip, [sp, #100]	; 0x64
   1a8d8:	cmp	r4, #0
   1a8dc:	movwne	r4, #43	; 0x2b
   1a8e0:	cmp	r5, #0
   1a8e4:	movweq	r5, #48	; 0x30
   1a8e8:	ldr	r1, [sp, #72]	; 0x48
   1a8ec:	cmp	r2, #0
   1a8f0:	mov	r0, r9
   1a8f4:	movwne	r4, #45	; 0x2d
   1a8f8:	cmp	r4, #0
   1a8fc:	subne	r0, r0, #1
   1a900:	sub	r3, r1, r8
   1a904:	sub	r6, r0, r3
   1a908:	cmp	r6, #1
   1a90c:	movwlt	r6, #0
   1a910:	subs	sl, r5, #45	; 0x2d
   1a914:	moveq	r6, sl
   1a918:	cmp	r4, #0
   1a91c:	beq	1a960 <__assert_fail@plt+0x8ed4>
   1a920:	cmp	r5, #95	; 0x5f
   1a924:	bne	1accc <__assert_fail@plt+0x9240>
   1a928:	cmp	r7, #0
   1a92c:	beq	1acc0 <__assert_fail@plt+0x9234>
   1a930:	mov	r0, r7
   1a934:	mov	r1, #32
   1a938:	mov	r2, r6
   1a93c:	str	lr, [sp, #84]	; 0x54
   1a940:	str	ip, [sp, #100]	; 0x64
   1a944:	str	r3, [sp, #32]
   1a948:	bl	11918 <memset@plt>
   1a94c:	ldr	r3, [sp, #32]
   1a950:	ldr	ip, [sp, #100]	; 0x64
   1a954:	ldr	lr, [sp, #84]	; 0x54
   1a958:	add	r7, r7, r6
   1a95c:	b	1acc4 <__assert_fail@plt+0x9238>
   1a960:	mov	r6, #-2147483648	; 0x80000000
   1a964:	b	1acf4 <__assert_fail@plt+0x9268>
   1a968:	cmp	r0, #69	; 0x45
   1a96c:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1a970:	ldr	r2, [sp, #80]	; 0x50
   1a974:	mov	ip, #2
   1a978:	ldr	r3, [r2, #16]
   1a97c:	mov	r2, #0
   1a980:	cmn	r3, #1
   1a984:	add	r3, r3, #1
   1a988:	movwlt	r2, #1
   1a98c:	b	1a850 <__assert_fail@plt+0x8dc4>
   1a990:	ldr	r1, [sp, #96]	; 0x60
   1a994:	subs	r0, r5, #45	; 0x2d
   1a998:	bicne	r0, r9, r9, asr #31
   1a99c:	cmp	r0, #1
   1a9a0:	mov	r6, r0
   1a9a4:	movls	r6, #1
   1a9a8:	sub	r1, r1, lr
   1a9ac:	cmp	r6, r1
   1a9b0:	bcs	1b68c <__assert_fail@plt+0x9c00>
   1a9b4:	ldr	ip, [sp, #92]	; 0x5c
   1a9b8:	movw	r4, #52428	; 0xcccc
   1a9bc:	movt	r4, #3276	; 0xccc
   1a9c0:	cmp	ip, #0
   1a9c4:	beq	1ad5c <__assert_fail@plt+0x92d0>
   1a9c8:	cmp	r0, #2
   1a9cc:	bcc	1b3b0 <__assert_fail@plt+0x9924>
   1a9d0:	uxtb	r1, r5
   1a9d4:	sub	r4, r0, #1
   1a9d8:	cmp	r1, #48	; 0x30
   1a9dc:	cmpne	r1, #43	; 0x2b
   1a9e0:	bne	1b384 <__assert_fail@plt+0x98f8>
   1a9e4:	mov	r0, ip
   1a9e8:	mov	r1, #48	; 0x30
   1a9ec:	b	1b38c <__assert_fail@plt+0x9900>
   1a9f0:	ldr	r2, [sp, #80]	; 0x50
   1a9f4:	mov	r3, #11
   1a9f8:	mov	ip, #1
   1a9fc:	ldr	r2, [r2, #16]
   1aa00:	mul	r2, r2, r3
   1aa04:	add	r3, ip, r2, asr #5
   1aa08:	mov	r2, #0
   1aa0c:	b	1a850 <__assert_fail@plt+0x8dc4>
   1aa10:	ldr	r2, [sp, #80]	; 0x50
   1aa14:	mov	r0, #28
   1aa18:	add	r1, sp, #104	; 0x68
   1aa1c:	mov	r6, lr
   1aa20:	mov	r4, r1
   1aa24:	mov	r3, r2
   1aa28:	add	r2, r2, #16
   1aa2c:	vld1.32	{d16-d17}, [r3], r0
   1aa30:	vld1.32	{d18-d19}, [r2]
   1aa34:	add	r2, r1, #16
   1aa38:	vld1.32	{d20-d21}, [r3]
   1aa3c:	vst1.64	{d16-d17}, [r4], r0
   1aa40:	mvn	r0, #0
   1aa44:	vst1.64	{d18-d19}, [r2]
   1aa48:	vst1.32	{d20-d21}, [r4]
   1aa4c:	str	r0, [r4]
   1aa50:	ldr	r0, [fp, #20]
   1aa54:	bl	1ddb0 <__assert_fail@plt+0xc324>
   1aa58:	ldr	r1, [r4]
   1aa5c:	cmp	r1, #0
   1aa60:	blt	1b6a8 <__assert_fail@plt+0x9c1c>
   1aa64:	cmp	r0, #0
   1aa68:	blt	1afc4 <__assert_fail@plt+0x9538>
   1aa6c:	ldr	r4, [sp, #100]	; 0x64
   1aa70:	ldr	r1, [sp, #28]
   1aa74:	mov	r2, r0
   1aa78:	movw	r3, #26215	; 0x6667
   1aa7c:	movt	r3, #26214	; 0x6666
   1aa80:	smmul	r3, r2, r3
   1aa84:	asr	r7, r3, #2
   1aa88:	add	r3, r7, r3, lsr #31
   1aa8c:	add	r7, r3, r3, lsl #2
   1aa90:	sub	r7, r2, r7, lsl #1
   1aa94:	add	r2, r2, #9
   1aa98:	add	r7, r7, #48	; 0x30
   1aa9c:	cmp	r2, #18
   1aaa0:	mov	r2, r3
   1aaa4:	strb	r7, [r1], #-1
   1aaa8:	bhi	1aa78 <__assert_fail@plt+0x8fec>
   1aaac:	b	1b004 <__assert_fail@plt+0x9578>
   1aab0:	ldr	r1, [sp, #96]	; 0x60
   1aab4:	subs	r0, r5, #45	; 0x2d
   1aab8:	bicne	r0, r9, r9, asr #31
   1aabc:	cmp	r0, #1
   1aac0:	mov	r6, r0
   1aac4:	movls	r6, #1
   1aac8:	sub	r1, r1, lr
   1aacc:	cmp	r6, r1
   1aad0:	bcs	1b68c <__assert_fail@plt+0x9c00>
   1aad4:	ldr	ip, [sp, #92]	; 0x5c
   1aad8:	movw	r4, #52428	; 0xcccc
   1aadc:	movt	r4, #3276	; 0xccc
   1aae0:	cmp	ip, #0
   1aae4:	beq	1ad5c <__assert_fail@plt+0x92d0>
   1aae8:	cmp	r0, #2
   1aaec:	bcc	1b3e8 <__assert_fail@plt+0x995c>
   1aaf0:	uxtb	r1, r5
   1aaf4:	sub	r4, r0, #1
   1aaf8:	cmp	r1, #48	; 0x30
   1aafc:	cmpne	r1, #43	; 0x2b
   1ab00:	bne	1b3bc <__assert_fail@plt+0x9930>
   1ab04:	mov	r0, ip
   1ab08:	mov	r1, #48	; 0x30
   1ab0c:	b	1b3c4 <__assert_fail@plt+0x9938>
   1ab10:	ldr	r2, [sp, #80]	; 0x50
   1ab14:	movw	r3, #9363	; 0x2493
   1ab18:	mov	ip, #1
   1ab1c:	movt	r3, #37449	; 0x9249
   1ab20:	ldr	r2, [r2, #24]
   1ab24:	add	r2, r2, #6
   1ab28:	smmla	r3, r2, r3, r2
   1ab2c:	asr	r7, r3, #2
   1ab30:	add	r3, r7, r3, lsr #31
   1ab34:	rsb	r3, r3, r3, lsl #3
   1ab38:	sub	r2, r2, r3
   1ab3c:	add	r3, r2, #1
   1ab40:	b	1a84c <__assert_fail@plt+0x8dc0>
   1ab44:	cmp	r0, #69	; 0x45
   1ab48:	beq	1ab64 <__assert_fail@plt+0x90d8>
   1ab4c:	ldr	r2, [sp, #80]	; 0x50
   1ab50:	mov	ip, #1
   1ab54:	ldr	r3, [r2, #24]
   1ab58:	b	1a84c <__assert_fail@plt+0x8dc0>
   1ab5c:	cmp	r0, #79	; 0x4f
   1ab60:	bne	1af74 <__assert_fail@plt+0x94e8>
   1ab64:	ldr	ip, [sp, #92]	; 0x5c
   1ab68:	mov	r8, sl
   1ab6c:	ldr	r1, [sp, #88]	; 0x58
   1ab70:	subs	r7, r5, #45	; 0x2d
   1ab74:	bicne	r7, r9, r9, asr #31
   1ab78:	sub	r0, r8, r1
   1ab7c:	add	r6, r0, #1
   1ab80:	ldr	r0, [sp, #96]	; 0x60
   1ab84:	cmp	r7, r6
   1ab88:	mov	r4, r6
   1ab8c:	movhi	r4, r7
   1ab90:	sub	r0, r0, lr
   1ab94:	cmp	r4, r0
   1ab98:	bcs	1b68c <__assert_fail@plt+0x9c00>
   1ab9c:	cmp	ip, #0
   1aba0:	beq	1abd4 <__assert_fail@plt+0x9148>
   1aba4:	cmp	r7, r6
   1aba8:	mov	r9, ip
   1abac:	bls	1ac00 <__assert_fail@plt+0x9174>
   1abb0:	uxtb	r0, r5
   1abb4:	mov	sl, lr
   1abb8:	sub	r9, r7, r6
   1abbc:	cmp	r0, #48	; 0x30
   1abc0:	cmpne	r0, #43	; 0x2b
   1abc4:	bne	1abdc <__assert_fail@plt+0x9150>
   1abc8:	mov	r0, ip
   1abcc:	mov	r1, #48	; 0x30
   1abd0:	b	1abe4 <__assert_fail@plt+0x9158>
   1abd4:	mov	ip, #0
   1abd8:	b	1ac78 <__assert_fail@plt+0x91ec>
   1abdc:	mov	r0, ip
   1abe0:	mov	r1, #32
   1abe4:	mov	r2, r9
   1abe8:	mov	r5, ip
   1abec:	bl	11918 <memset@plt>
   1abf0:	ldr	r1, [sp, #88]	; 0x58
   1abf4:	add	r9, r5, r9
   1abf8:	mov	lr, sl
   1abfc:	mov	ip, r5
   1ac00:	ldr	r0, [sp, #100]	; 0x64
   1ac04:	tst	r0, #1
   1ac08:	beq	1ac60 <__assert_fail@plt+0x91d4>
   1ac0c:	cmp	r6, #0
   1ac10:	beq	1ac74 <__assert_fail@plt+0x91e8>
   1ac14:	add	r0, r8, #1
   1ac18:	sub	r5, r1, r8
   1ac1c:	mov	sl, lr
   1ac20:	sub	r0, r0, r1
   1ac24:	cmp	r7, r0
   1ac28:	movhi	r0, r7
   1ac2c:	add	r0, ip, r0
   1ac30:	sub	r7, r0, #1
   1ac34:	bl	11858 <__ctype_toupper_loc@plt>
   1ac38:	ldr	r3, [sp, #88]	; 0x58
   1ac3c:	mov	lr, sl
   1ac40:	ldrb	r1, [r3, -r5]
   1ac44:	ldr	r2, [r0]
   1ac48:	add	r5, r5, #1
   1ac4c:	cmp	r5, #1
   1ac50:	ldr	r1, [r2, r1, lsl #2]
   1ac54:	strb	r1, [r7], #-1
   1ac58:	bne	1ac40 <__assert_fail@plt+0x91b4>
   1ac5c:	b	1ac74 <__assert_fail@plt+0x91e8>
   1ac60:	mov	r0, r9
   1ac64:	mov	r2, r6
   1ac68:	mov	r5, lr
   1ac6c:	bl	11708 <memcpy@plt>
   1ac70:	mov	lr, r5
   1ac74:	add	ip, r9, r6
   1ac78:	add	lr, r4, lr
   1ac7c:	mov	sl, r8
   1ac80:	mov	r6, #-2147483648	; 0x80000000
   1ac84:	movw	r4, #52428	; 0xcccc
   1ac88:	movt	r4, #3276	; 0xccc
   1ac8c:	ldrb	r3, [sl, #1]!
   1ac90:	mvn	r9, #0
   1ac94:	cmp	r3, #0
   1ac98:	bne	19d38 <__assert_fail@plt+0x82ac>
   1ac9c:	b	1b660 <__assert_fail@plt+0x9bd4>
   1aca0:	cmp	r0, #69	; 0x45
   1aca4:	bne	1af80 <__assert_fail@plt+0x94f4>
   1aca8:	mov	r6, #0
   1acac:	mov	r1, #121	; 0x79
   1acb0:	b	1b424 <__assert_fail@plt+0x9998>
   1acb4:	ldr	r3, [sp, #80]	; 0x50
   1acb8:	ldr	r0, [sp, #100]	; 0x64
   1acbc:	b	1b0f4 <__assert_fail@plt+0x9668>
   1acc0:	mov	r7, #0
   1acc4:	sub	r9, r9, r6
   1acc8:	add	lr, r6, lr
   1accc:	ldr	r0, [sp, #96]	; 0x60
   1acd0:	mov	r6, #-2147483648	; 0x80000000
   1acd4:	sub	r0, r0, lr
   1acd8:	cmp	r0, #2
   1acdc:	bcc	1b68c <__assert_fail@plt+0x9c00>
   1ace0:	cmp	r7, #0
   1ace4:	sub	r9, r9, #1
   1ace8:	add	lr, lr, #1
   1acec:	strbne	r4, [r7], #1
   1acf0:	moveq	r7, #0
   1acf4:	ldr	r0, [sp, #96]	; 0x60
   1acf8:	cmp	r5, #45	; 0x2d
   1acfc:	mov	r4, r3
   1ad00:	bicne	sl, r9, r9, asr #31
   1ad04:	cmp	sl, r3
   1ad08:	movhi	r4, sl
   1ad0c:	sub	r0, r0, lr
   1ad10:	cmp	r4, r0
   1ad14:	bcs	1b68c <__assert_fail@plt+0x9c00>
   1ad18:	cmp	r7, #0
   1ad1c:	beq	1ad54 <__assert_fail@plt+0x92c8>
   1ad20:	cmp	sl, r3
   1ad24:	mov	r9, r7
   1ad28:	bls	1ad84 <__assert_fail@plt+0x92f8>
   1ad2c:	cmp	r5, #48	; 0x30
   1ad30:	sub	r6, sl, r3
   1ad34:	str	ip, [sp, #100]	; 0x64
   1ad38:	str	lr, [sp, #84]	; 0x54
   1ad3c:	str	r3, [sp, #32]
   1ad40:	cmpne	r5, #43	; 0x2b
   1ad44:	bne	1ad64 <__assert_fail@plt+0x92d8>
   1ad48:	mov	r0, r7
   1ad4c:	mov	r1, #48	; 0x30
   1ad50:	b	1ad6c <__assert_fail@plt+0x92e0>
   1ad54:	mov	ip, #0
   1ad58:	b	1ae08 <__assert_fail@plt+0x937c>
   1ad5c:	mov	ip, #0
   1ad60:	b	1b130 <__assert_fail@plt+0x96a4>
   1ad64:	mov	r0, r7
   1ad68:	mov	r1, #32
   1ad6c:	mov	r2, r6
   1ad70:	bl	11918 <memset@plt>
   1ad74:	ldr	lr, [sp, #84]	; 0x54
   1ad78:	ldr	ip, [sp, #100]	; 0x64
   1ad7c:	ldr	r3, [sp, #32]
   1ad80:	add	r9, r7, r6
   1ad84:	tst	ip, #1
   1ad88:	beq	1ade0 <__assert_fail@plt+0x9354>
   1ad8c:	cmp	r3, #0
   1ad90:	beq	1ae00 <__assert_fail@plt+0x9374>
   1ad94:	ldr	r0, [sp, #36]	; 0x24
   1ad98:	cmp	sl, r3
   1ad9c:	sub	r6, r8, #1
   1ada0:	movls	sl, r3
   1ada4:	add	r5, r0, r8
   1ada8:	add	r0, r7, sl
   1adac:	mov	r8, lr
   1adb0:	mov	sl, r3
   1adb4:	sub	r7, r0, #1
   1adb8:	bl	11858 <__ctype_toupper_loc@plt>
   1adbc:	mov	r3, sl
   1adc0:	mov	lr, r8
   1adc4:	ldrb	r1, [r6, -r5]
   1adc8:	ldr	r2, [r0]
   1adcc:	adds	r5, r5, #1
   1add0:	ldr	r1, [r2, r1, lsl #2]
   1add4:	strb	r1, [r7], #-1
   1add8:	bne	1adc4 <__assert_fail@plt+0x9338>
   1addc:	b	1ae00 <__assert_fail@plt+0x9374>
   1ade0:	mov	r0, r9
   1ade4:	mov	r1, r8
   1ade8:	mov	r2, r3
   1adec:	mov	r5, lr
   1adf0:	mov	r6, r3
   1adf4:	bl	11708 <memcpy@plt>
   1adf8:	mov	r3, r6
   1adfc:	mov	lr, r5
   1ae00:	add	ip, r9, r3
   1ae04:	mov	r6, #-2147483648	; 0x80000000
   1ae08:	ldr	sl, [sp, #88]	; 0x58
   1ae0c:	add	lr, r4, lr
   1ae10:	movw	r4, #52428	; 0xcccc
   1ae14:	movt	r4, #3276	; 0xccc
   1ae18:	ldrb	r3, [sl, #1]!
   1ae1c:	mvn	r9, #0
   1ae20:	cmp	r3, #0
   1ae24:	bne	19d38 <__assert_fail@plt+0x82ac>
   1ae28:	b	1b660 <__assert_fail@plt+0x9bd4>
   1ae2c:	sub	r2, r2, #1
   1ae30:	movw	r4, #365	; 0x16d
   1ae34:	tst	r2, #3
   1ae38:	bne	1ae7c <__assert_fail@plt+0x93f0>
   1ae3c:	movw	r4, #34079	; 0x851f
   1ae40:	movt	r4, #20971	; 0x51eb
   1ae44:	smmul	r4, r2, r4
   1ae48:	asr	r7, r4, #5
   1ae4c:	add	r3, r7, r4, lsr #31
   1ae50:	mov	r7, #100	; 0x64
   1ae54:	mls	r3, r3, r7, r2
   1ae58:	asr	r7, r4, #7
   1ae5c:	add	r4, r7, r4, lsr #31
   1ae60:	mov	r7, #400	; 0x190
   1ae64:	mls	r2, r4, r7, r2
   1ae68:	movw	r4, #365	; 0x16d
   1ae6c:	cmp	r2, #0
   1ae70:	movweq	r4, #366	; 0x16e
   1ae74:	cmp	r3, #0
   1ae78:	movwne	r4, #366	; 0x16e
   1ae7c:	add	r2, r4, r6
   1ae80:	movw	r4, #382	; 0x17e
   1ae84:	sub	r3, r4, r8
   1ae88:	add	r2, r3, r2
   1ae8c:	smmla	r2, r2, ip, r2
   1ae90:	asr	r4, r2, #2
   1ae94:	add	r2, r4, r2, lsr #31
   1ae98:	rsb	r2, r2, r2, lsl #3
   1ae9c:	sub	r2, r2, r3
   1aea0:	mvn	r3, #0
   1aea4:	add	r4, r2, #3
   1aea8:	cmp	r1, #71	; 0x47
   1aeac:	bne	1a23c <__assert_fail@plt+0x87b0>
   1aeb0:	movw	r2, #63636	; 0xf894
   1aeb4:	mov	ip, #4
   1aeb8:	movt	r2, #65535	; 0xffff
   1aebc:	sub	r7, r2, r3
   1aec0:	add	r3, lr, r3
   1aec4:	mov	r2, #0
   1aec8:	cmp	lr, r7
   1aecc:	ldr	lr, [sp, #84]	; 0x54
   1aed0:	movw	r7, #1900	; 0x76c
   1aed4:	movwlt	r2, #1
   1aed8:	add	r3, r3, r7
   1aedc:	b	1b18c <__assert_fail@plt+0x9700>
   1aee0:	ldr	ip, [sp, #92]	; 0x5c
   1aee4:	movw	r4, #52428	; 0xcccc
   1aee8:	mov	r6, #-2147483648	; 0x80000000
   1aeec:	movt	r4, #3276	; 0xccc
   1aef0:	ldrb	r3, [sl, #1]!
   1aef4:	mvn	r9, #0
   1aef8:	cmp	r3, #0
   1aefc:	bne	19d38 <__assert_fail@plt+0x82ac>
   1af00:	b	1b660 <__assert_fail@plt+0x9bd4>
   1af04:	smmla	r2, r4, ip, r4
   1af08:	ldr	lr, [sp, #84]	; 0x54
   1af0c:	mov	ip, #2
   1af10:	asr	r3, r2, #2
   1af14:	add	r2, r3, r2, lsr #31
   1af18:	add	r3, r2, #1
   1af1c:	b	1a84c <__assert_fail@plt+0x8dc0>
   1af20:	ldr	r2, [sp, #80]	; 0x50
   1af24:	movw	r6, #63636	; 0xf894
   1af28:	mov	r3, #0
   1af2c:	mvn	r4, #98	; 0x62
   1af30:	mov	ip, #2
   1af34:	movt	r6, #65535	; 0xffff
   1af38:	ldr	r7, [r2, #20]
   1af3c:	mov	r2, #0
   1af40:	cmp	r7, r6
   1af44:	movwge	r3, #1
   1af48:	cmp	r7, r6
   1af4c:	and	r3, r3, r7, lsr #31
   1af50:	movwlt	r2, #1
   1af54:	smlabb	r3, r3, r4, r7
   1af58:	movw	r4, #34079	; 0x851f
   1af5c:	movt	r4, #20971	; 0x51eb
   1af60:	smmul	r3, r3, r4
   1af64:	asr	r4, r3, #5
   1af68:	add	r3, r4, r3, lsr #31
   1af6c:	add	r3, r3, #19
   1af70:	b	1b18c <__assert_fail@plt+0x9700>
   1af74:	mov	r6, #0
   1af78:	mov	r1, #120	; 0x78
   1af7c:	b	1b424 <__assert_fail@plt+0x9998>
   1af80:	ldr	r2, [sp, #80]	; 0x50
   1af84:	mov	ip, #2
   1af88:	ldr	r7, [r2, #20]
   1af8c:	movw	r2, #34079	; 0x851f
   1af90:	movt	r2, #20971	; 0x51eb
   1af94:	smmul	r2, r7, r2
   1af98:	asr	r3, r2, #5
   1af9c:	add	r2, r3, r2, lsr #31
   1afa0:	mov	r3, #100	; 0x64
   1afa4:	mls	r6, r2, r3, r7
   1afa8:	mov	r2, #0
   1afac:	cmn	r6, #1
   1afb0:	ble	1b178 <__assert_fail@plt+0x96ec>
   1afb4:	mov	r3, r6
   1afb8:	b	1b18c <__assert_fail@plt+0x9700>
   1afbc:	mov	ip, #0
   1afc0:	b	1b378 <__assert_fail@plt+0x98ec>
   1afc4:	ldr	r4, [sp, #100]	; 0x64
   1afc8:	ldr	r1, [sp, #28]
   1afcc:	mov	r2, r0
   1afd0:	movw	r3, #26215	; 0x6667
   1afd4:	movt	r3, #26214	; 0x6666
   1afd8:	smmul	r3, r2, r3
   1afdc:	asr	r7, r3, #2
   1afe0:	add	r3, r7, r3, lsr #31
   1afe4:	add	r7, r3, r3, lsl #2
   1afe8:	rsb	r7, r2, r7, lsl #1
   1afec:	add	r2, r2, #9
   1aff0:	add	r7, r7, #48	; 0x30
   1aff4:	cmp	r2, #18
   1aff8:	mov	r2, r3
   1affc:	strb	r7, [r1], #-1
   1b000:	bhi	1afd0 <__assert_fail@plt+0x9544>
   1b004:	ldr	r7, [sp, #92]	; 0x5c
   1b008:	cmp	r9, #0
   1b00c:	mov	ip, r4
   1b010:	add	r8, r1, #1
   1b014:	mov	lr, r6
   1b018:	lsr	r2, r0, #31
   1b01c:	mov	r4, #0
   1b020:	str	sl, [sp, #88]	; 0x58
   1b024:	movwlt	r9, #1
   1b028:	b	1a8e0 <__assert_fail@plt+0x8e54>
   1b02c:	ldr	ip, [sp, #92]	; 0x5c
   1b030:	mov	r2, #1
   1b034:	cmp	r6, #3
   1b038:	bhi	1a398 <__assert_fail@plt+0x890c>
   1b03c:	movw	ip, #34953	; 0x8889
   1b040:	movt	ip, #34952	; 0x8888
   1b044:	smmla	r4, lr, ip, lr
   1b048:	asr	r3, r4, #5
   1b04c:	add	r4, r3, r4, lsr #31
   1b050:	smmla	r3, r4, ip, r4
   1b054:	asr	r7, r3, #5
   1b058:	add	r3, r7, r3, lsr #31
   1b05c:	rsb	r3, r3, r3, lsl #4
   1b060:	sub	ip, r4, r3, lsl #2
   1b064:	movw	r3, #46021	; 0xb3c5
   1b068:	rsb	r4, r4, r4, lsl #4
   1b06c:	movt	r3, #37282	; 0x91a2
   1b070:	smmla	r3, lr, r3, lr
   1b074:	asr	r7, r3, #11
   1b078:	add	r3, r7, r3, lsr #31
   1b07c:	sub	r7, lr, r4, lsl #2
   1b080:	add	r4, pc, #0
   1b084:	ldr	pc, [r4, r6, lsl #2]
   1b088:	muleq	r1, r8, r0
   1b08c:	strdeq	fp, [r1], -ip
   1b090:	strdeq	fp, [r1], -r4
   1b094:	andeq	fp, r1, ip, ror #3
   1b098:	mov	r7, #100	; 0x64
   1b09c:	mla	r3, r3, r7, ip
   1b0a0:	mov	ip, #5
   1b0a4:	ldr	lr, [sp, #84]	; 0x54
   1b0a8:	mov	r4, #1
   1b0ac:	mov	r7, #0
   1b0b0:	cmp	r0, #79	; 0x4f
   1b0b4:	moveq	r6, #0
   1b0b8:	cmpeq	r2, #0
   1b0bc:	bne	1a870 <__assert_fail@plt+0x8de4>
   1b0c0:	b	1b424 <__assert_fail@plt+0x9998>
   1b0c4:	mov	r6, #0
   1b0c8:	mov	r1, #89	; 0x59
   1b0cc:	b	1b424 <__assert_fail@plt+0x9998>
   1b0d0:	mov	r0, ip
   1b0d4:	mov	r1, #32
   1b0d8:	ldr	r2, [sp, #88]	; 0x58
   1b0dc:	bl	11918 <memset@plt>
   1b0e0:	ldr	r1, [sp, #88]	; 0x58
   1b0e4:	ldr	ip, [sp, #92]	; 0x5c
   1b0e8:	ldr	r3, [sp, #80]	; 0x50
   1b0ec:	ldr	r0, [sp, #100]	; 0x64
   1b0f0:	add	ip, ip, r1
   1b0f4:	stm	sp, {r0, r5, r8}
   1b0f8:	ldr	r0, [fp, #20]
   1b0fc:	mov	r2, r4
   1b100:	mov	r1, r9
   1b104:	mov	r4, ip
   1b108:	str	r0, [sp, #12]
   1b10c:	ldr	r0, [fp, #24]
   1b110:	str	r0, [sp, #16]
   1b114:	mov	r0, ip
   1b118:	bl	19c54 <__assert_fail@plt+0x81c8>
   1b11c:	ldr	lr, [sp, #84]	; 0x54
   1b120:	mov	ip, r4
   1b124:	add	ip, r4, r7
   1b128:	movw	r4, #52428	; 0xcccc
   1b12c:	movt	r4, #3276	; 0xccc
   1b130:	add	lr, r6, lr
   1b134:	mov	r6, #-2147483648	; 0x80000000
   1b138:	ldrb	r3, [sl, #1]!
   1b13c:	mvn	r9, #0
   1b140:	cmp	r3, #0
   1b144:	bne	19d38 <__assert_fail@plt+0x82ac>
   1b148:	b	1b660 <__assert_fail@plt+0x9bd4>
   1b14c:	movw	r6, #63636	; 0xf894
   1b150:	movt	r6, #65535	; 0xffff
   1b154:	sub	r6, r6, r3
   1b158:	add	r3, r4, #100	; 0x64
   1b15c:	cmp	lr, r6
   1b160:	ldr	lr, [sp, #84]	; 0x54
   1b164:	rsblt	r3, r4, #0
   1b168:	b	1b18c <__assert_fail@plt+0x9700>
   1b16c:	sub	r0, r9, #6
   1b170:	bic	r8, r0, r0, asr #31
   1b174:	b	1a5d0 <__assert_fail@plt+0x8b44>
   1b178:	movw	r4, #63636	; 0xf894
   1b17c:	add	r3, r6, #100	; 0x64
   1b180:	movt	r4, #65535	; 0xffff
   1b184:	cmp	r7, r4
   1b188:	rsblt	r3, r6, #0
   1b18c:	ldr	r4, [fp, #12]
   1b190:	cmp	r5, #0
   1b194:	mov	r7, #0
   1b198:	moveq	r5, r4
   1b19c:	mov	r4, #0
   1b1a0:	cmp	r5, #43	; 0x2b
   1b1a4:	bne	1a860 <__assert_fail@plt+0x8dd4>
   1b1a8:	cmp	ip, r9
   1b1ac:	mov	r4, #0
   1b1b0:	movw	r6, #9999	; 0x270f
   1b1b4:	mov	r8, lr
   1b1b8:	mov	lr, #0
   1b1bc:	movwlt	r4, #1
   1b1c0:	cmp	ip, #2
   1b1c4:	movweq	r6, #99	; 0x63
   1b1c8:	cmp	r6, r3
   1b1cc:	movwcc	lr, #1
   1b1d0:	orr	r4, r4, lr
   1b1d4:	mov	lr, r8
   1b1d8:	cmp	r0, #79	; 0x4f
   1b1dc:	moveq	r6, #0
   1b1e0:	cmpeq	r2, #0
   1b1e4:	bne	1a870 <__assert_fail@plt+0x8de4>
   1b1e8:	b	1b424 <__assert_fail@plt+0x9998>
   1b1ec:	cmp	r7, #0
   1b1f0:	beq	1b3f4 <__assert_fail@plt+0x9968>
   1b1f4:	ldr	lr, [sp, #84]	; 0x54
   1b1f8:	movw	r6, #10000	; 0x2710
   1b1fc:	mov	r4, #1
   1b200:	mla	r3, r3, r6, r7
   1b204:	mov	r7, #100	; 0x64
   1b208:	mla	r3, ip, r7, r3
   1b20c:	mov	ip, #9
   1b210:	mov	r7, #20
   1b214:	cmp	r0, #79	; 0x4f
   1b218:	moveq	r6, #0
   1b21c:	cmpeq	r2, #0
   1b220:	bne	1a870 <__assert_fail@plt+0x8de4>
   1b224:	b	1b424 <__assert_fail@plt+0x9998>
   1b228:	sub	r1, fp, #48	; 0x30
   1b22c:	mov	r0, r6
   1b230:	mov	r2, r4
   1b234:	mov	r7, lr
   1b238:	bl	11708 <memcpy@plt>
   1b23c:	mov	lr, r7
   1b240:	add	ip, r6, r4
   1b244:	cmp	r5, #45	; 0x2d
   1b248:	mov	r7, #0
   1b24c:	mov	r6, #-2147483648	; 0x80000000
   1b250:	subne	r0, r9, r4
   1b254:	bicne	r7, r0, r0, asr #31
   1b258:	sub	r0, r8, r4
   1b25c:	cmp	r7, r0
   1b260:	bcs	1b68c <__assert_fail@plt+0x9c00>
   1b264:	cmp	ip, #0
   1b268:	cmpne	r7, #0
   1b26c:	beq	1b614 <__assert_fail@plt+0x9b88>
   1b270:	uxtb	r0, r5
   1b274:	cmp	r0, #48	; 0x30
   1b278:	cmpne	r0, #43	; 0x2b
   1b27c:	bne	1b5f0 <__assert_fail@plt+0x9b64>
   1b280:	mov	r0, ip
   1b284:	mov	r9, ip
   1b288:	mov	r1, #48	; 0x30
   1b28c:	b	1b5fc <__assert_fail@plt+0x9b70>
   1b290:	mov	r1, #32
   1b294:	mov	r5, r2
   1b298:	bl	11918 <memset@plt>
   1b29c:	ldr	r0, [sp, #92]	; 0x5c
   1b2a0:	ldr	lr, [sp, #84]	; 0x54
   1b2a4:	add	ip, r0, r5
   1b2a8:	tst	r7, #1
   1b2ac:	beq	1b2fc <__assert_fail@plt+0x9870>
   1b2b0:	ldr	r8, [sp, #24]
   1b2b4:	cmp	r9, #0
   1b2b8:	beq	1b374 <__assert_fail@plt+0x98e8>
   1b2bc:	cmp	r6, r9
   1b2c0:	movls	r6, r9
   1b2c4:	add	r0, r0, r6
   1b2c8:	mov	r6, ip
   1b2cc:	sub	r5, r0, #1
   1b2d0:	bl	1184c <__ctype_tolower_loc@plt>
   1b2d4:	ldr	lr, [sp, #84]	; 0x54
   1b2d8:	mov	ip, r6
   1b2dc:	mov	r1, r9
   1b2e0:	ldrb	r2, [r8, r1]
   1b2e4:	ldr	r3, [r0]
   1b2e8:	subs	r1, r1, #1
   1b2ec:	ldr	r2, [r3, r2, lsl #2]
   1b2f0:	strb	r2, [r5], #-1
   1b2f4:	bne	1b2e0 <__assert_fail@plt+0x9854>
   1b2f8:	b	1b374 <__assert_fail@plt+0x98e8>
   1b2fc:	eor	r1, r7, #1
   1b300:	and	r1, r8, r1
   1b304:	tst	r1, #1
   1b308:	beq	1b358 <__assert_fail@plt+0x98cc>
   1b30c:	ldr	r8, [sp, #24]
   1b310:	cmp	r9, #0
   1b314:	beq	1b374 <__assert_fail@plt+0x98e8>
   1b318:	cmp	r6, r9
   1b31c:	movls	r6, r9
   1b320:	add	r0, r0, r6
   1b324:	mov	r6, ip
   1b328:	sub	r5, r0, #1
   1b32c:	bl	11858 <__ctype_toupper_loc@plt>
   1b330:	ldr	lr, [sp, #84]	; 0x54
   1b334:	mov	ip, r6
   1b338:	mov	r1, r9
   1b33c:	ldrb	r2, [r8, r1]
   1b340:	ldr	r3, [r0]
   1b344:	subs	r1, r1, #1
   1b348:	ldr	r2, [r3, r2, lsl #2]
   1b34c:	strb	r2, [r5], #-1
   1b350:	bne	1b33c <__assert_fail@plt+0x98b0>
   1b354:	b	1b374 <__assert_fail@plt+0x98e8>
   1b358:	ldr	r1, [sp, #44]	; 0x2c
   1b35c:	mov	r0, ip
   1b360:	mov	r2, r9
   1b364:	mov	r5, ip
   1b368:	bl	11708 <memcpy@plt>
   1b36c:	ldr	lr, [sp, #84]	; 0x54
   1b370:	mov	ip, r5
   1b374:	add	ip, ip, r9
   1b378:	mov	r6, #-2147483648	; 0x80000000
   1b37c:	add	lr, r4, lr
   1b380:	b	1ac84 <__assert_fail@plt+0x91f8>
   1b384:	mov	r0, ip
   1b388:	mov	r1, #32
   1b38c:	mov	r2, r4
   1b390:	mov	r5, lr
   1b394:	mov	r7, ip
   1b398:	bl	11918 <memset@plt>
   1b39c:	mov	ip, r7
   1b3a0:	mov	lr, r5
   1b3a4:	add	ip, r7, r4
   1b3a8:	movw	r4, #52428	; 0xcccc
   1b3ac:	movt	r4, #3276	; 0xccc
   1b3b0:	mov	r0, #10
   1b3b4:	strb	r0, [ip], #1
   1b3b8:	b	1b130 <__assert_fail@plt+0x96a4>
   1b3bc:	mov	r0, ip
   1b3c0:	mov	r1, #32
   1b3c4:	mov	r2, r4
   1b3c8:	mov	r5, lr
   1b3cc:	mov	r7, ip
   1b3d0:	bl	11918 <memset@plt>
   1b3d4:	mov	ip, r7
   1b3d8:	mov	lr, r5
   1b3dc:	add	ip, r7, r4
   1b3e0:	movw	r4, #52428	; 0xcccc
   1b3e4:	movt	r4, #3276	; 0xccc
   1b3e8:	mov	r0, #9
   1b3ec:	strb	r0, [ip], #1
   1b3f0:	b	1b130 <__assert_fail@plt+0x96a4>
   1b3f4:	cmp	ip, #0
   1b3f8:	beq	1b650 <__assert_fail@plt+0x9bc4>
   1b3fc:	ldr	lr, [sp, #84]	; 0x54
   1b400:	mov	r7, #100	; 0x64
   1b404:	mov	r4, #1
   1b408:	mla	r3, r3, r7, ip
   1b40c:	mov	ip, #6
   1b410:	mov	r7, #4
   1b414:	cmp	r0, #79	; 0x4f
   1b418:	moveq	r6, #0
   1b41c:	cmpeq	r2, #0
   1b420:	bne	1a870 <__assert_fail@plt+0x8de4>
   1b424:	movw	r2, #9504	; 0x2520
   1b428:	cmp	r0, #0
   1b42c:	ldr	r3, [sp, #80]	; 0x50
   1b430:	str	lr, [sp, #84]	; 0x54
   1b434:	strh	r2, [fp, #-53]	; 0xffffffcb
   1b438:	ldr	r2, [sp, #76]	; 0x4c
   1b43c:	strbne	r0, [fp, #-51]	; 0xffffffcd
   1b440:	mov	r0, #0
   1b444:	ldrne	r2, [sp, #60]	; 0x3c
   1b448:	strb	r0, [r2, #1]
   1b44c:	strb	r1, [r2]
   1b450:	add	r0, sp, #104	; 0x68
   1b454:	sub	r2, fp, #53	; 0x35
   1b458:	mov	r1, #1024	; 0x400
   1b45c:	bl	11834 <strftime@plt>
   1b460:	cmp	r0, #0
   1b464:	beq	1b4cc <__assert_fail@plt+0x9a40>
   1b468:	subs	r8, r5, #45	; 0x2d
   1b46c:	sub	r4, r0, #1
   1b470:	ldr	lr, [sp, #84]	; 0x54
   1b474:	ldr	r0, [sp, #96]	; 0x60
   1b478:	movne	r8, r9
   1b47c:	cmp	r9, #0
   1b480:	mov	r7, r4
   1b484:	movwlt	r8, #0
   1b488:	cmp	r8, r4
   1b48c:	movhi	r7, r8
   1b490:	sub	r0, r0, lr
   1b494:	cmp	r7, r0
   1b498:	bcs	1b68c <__assert_fail@plt+0x9c00>
   1b49c:	ldr	r0, [sp, #92]	; 0x5c
   1b4a0:	cmp	r0, #0
   1b4a4:	beq	1b4f4 <__assert_fail@plt+0x9a68>
   1b4a8:	cmp	r8, r4
   1b4ac:	mov	r9, r0
   1b4b0:	bls	1b518 <__assert_fail@plt+0x9a8c>
   1b4b4:	cmp	r5, #48	; 0x30
   1b4b8:	sub	r9, r8, r4
   1b4bc:	cmpne	r5, #43	; 0x2b
   1b4c0:	bne	1b4fc <__assert_fail@plt+0x9a70>
   1b4c4:	mov	r1, #48	; 0x30
   1b4c8:	b	1b500 <__assert_fail@plt+0x9a74>
   1b4cc:	ldr	lr, [sp, #84]	; 0x54
   1b4d0:	ldr	ip, [sp, #92]	; 0x5c
   1b4d4:	movw	r4, #52428	; 0xcccc
   1b4d8:	mov	r6, #-2147483648	; 0x80000000
   1b4dc:	movt	r4, #3276	; 0xccc
   1b4e0:	ldrb	r3, [sl, #1]!
   1b4e4:	mvn	r9, #0
   1b4e8:	cmp	r3, #0
   1b4ec:	bne	19d38 <__assert_fail@plt+0x82ac>
   1b4f0:	b	1b660 <__assert_fail@plt+0x9bd4>
   1b4f4:	mov	ip, #0
   1b4f8:	b	1b5cc <__assert_fail@plt+0x9b40>
   1b4fc:	mov	r1, #32
   1b500:	mov	r2, r9
   1b504:	mov	r5, r0
   1b508:	bl	11918 <memset@plt>
   1b50c:	ldr	lr, [sp, #84]	; 0x54
   1b510:	add	r9, r5, r9
   1b514:	mov	r0, r5
   1b518:	tst	r6, #1
   1b51c:	beq	1b564 <__assert_fail@plt+0x9ad8>
   1b520:	cmp	r4, #0
   1b524:	add	r6, sp, #104	; 0x68
   1b528:	beq	1b5c8 <__assert_fail@plt+0x9b3c>
   1b52c:	cmp	r8, r4
   1b530:	movls	r8, r4
   1b534:	add	r0, r0, r8
   1b538:	sub	r5, r0, #1
   1b53c:	bl	1184c <__ctype_tolower_loc@plt>
   1b540:	ldr	lr, [sp, #84]	; 0x54
   1b544:	mov	r1, r4
   1b548:	ldrb	r2, [r6, r1]
   1b54c:	ldr	r3, [r0]
   1b550:	subs	r1, r1, #1
   1b554:	ldr	r2, [r3, r2, lsl #2]
   1b558:	strb	r2, [r5], #-1
   1b55c:	bne	1b548 <__assert_fail@plt+0x9abc>
   1b560:	b	1b5c8 <__assert_fail@plt+0x9b3c>
   1b564:	ldr	r1, [sp, #100]	; 0x64
   1b568:	add	r6, sp, #104	; 0x68
   1b56c:	tst	r1, #1
   1b570:	beq	1b5b4 <__assert_fail@plt+0x9b28>
   1b574:	cmp	r4, #0
   1b578:	beq	1b5c8 <__assert_fail@plt+0x9b3c>
   1b57c:	cmp	r8, r4
   1b580:	movls	r8, r4
   1b584:	add	r0, r0, r8
   1b588:	sub	r5, r0, #1
   1b58c:	bl	11858 <__ctype_toupper_loc@plt>
   1b590:	ldr	lr, [sp, #84]	; 0x54
   1b594:	mov	r1, r4
   1b598:	ldrb	r2, [r6, r1]
   1b59c:	ldr	r3, [r0]
   1b5a0:	subs	r1, r1, #1
   1b5a4:	ldr	r2, [r3, r2, lsl #2]
   1b5a8:	strb	r2, [r5], #-1
   1b5ac:	bne	1b598 <__assert_fail@plt+0x9b0c>
   1b5b0:	b	1b5c8 <__assert_fail@plt+0x9b3c>
   1b5b4:	ldr	r1, [sp, #40]	; 0x28
   1b5b8:	mov	r0, r9
   1b5bc:	mov	r2, r4
   1b5c0:	bl	11708 <memcpy@plt>
   1b5c4:	ldr	lr, [sp, #84]	; 0x54
   1b5c8:	add	ip, r9, r4
   1b5cc:	movw	r4, #52428	; 0xcccc
   1b5d0:	add	lr, r7, lr
   1b5d4:	mov	r6, #-2147483648	; 0x80000000
   1b5d8:	movt	r4, #3276	; 0xccc
   1b5dc:	ldrb	r3, [sl, #1]!
   1b5e0:	mvn	r9, #0
   1b5e4:	cmp	r3, #0
   1b5e8:	bne	19d38 <__assert_fail@plt+0x82ac>
   1b5ec:	b	1b660 <__assert_fail@plt+0x9bd4>
   1b5f0:	mov	r0, ip
   1b5f4:	mov	r9, ip
   1b5f8:	mov	r1, #32
   1b5fc:	mov	r2, r7
   1b600:	mov	r5, lr
   1b604:	bl	11918 <memset@plt>
   1b608:	mov	lr, r5
   1b60c:	add	ip, r9, r7
   1b610:	mov	r0, r9
   1b614:	add	r0, r7, lr
   1b618:	add	lr, r0, r4
   1b61c:	b	1ac84 <__assert_fail@plt+0x91f8>
   1b620:	mov	r0, ip
   1b624:	mov	r1, #32
   1b628:	mov	r2, r4
   1b62c:	mov	r5, lr
   1b630:	mov	r7, ip
   1b634:	bl	11918 <memset@plt>
   1b638:	ldrb	r1, [sl]
   1b63c:	mov	ip, r7
   1b640:	mov	lr, r5
   1b644:	add	ip, r7, r4
   1b648:	strb	r1, [ip], #1
   1b64c:	b	1b128 <__assert_fail@plt+0x969c>
   1b650:	mov	ip, #3
   1b654:	b	1b0a4 <__assert_fail@plt+0x9618>
   1b658:	mov	lr, #0
   1b65c:	mov	ip, r5
   1b660:	ldr	r0, [sp, #96]	; 0x60
   1b664:	ldr	r1, [sp, #64]	; 0x40
   1b668:	cmp	r0, #0
   1b66c:	cmpne	ip, #0
   1b670:	movne	r0, #0
   1b674:	strbne	r0, [ip]
   1b678:	ldr	r0, [sp, #68]	; 0x44
   1b67c:	str	r1, [r0]
   1b680:	mov	r0, lr
   1b684:	sub	sp, fp, #28
   1b688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b68c:	mov	r0, #34	; 0x22
   1b690:	ldr	r1, [sp, #68]	; 0x44
   1b694:	mov	lr, #0
   1b698:	str	r0, [r1]
   1b69c:	mov	r0, lr
   1b6a0:	sub	sp, fp, #28
   1b6a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6a8:	mov	r0, #75	; 0x4b
   1b6ac:	b	1b690 <__assert_fail@plt+0x9c04>
   1b6b0:	push	{r4, r5, fp, lr}
   1b6b4:	add	fp, sp, #8
   1b6b8:	cmp	r0, #0
   1b6bc:	beq	1b750 <__assert_fail@plt+0x9cc4>
   1b6c0:	mov	r1, #47	; 0x2f
   1b6c4:	mov	r4, r0
   1b6c8:	bl	119a8 <strrchr@plt>
   1b6cc:	cmp	r0, #0
   1b6d0:	mov	r5, r4
   1b6d4:	addne	r5, r0, #1
   1b6d8:	sub	r0, r5, r4
   1b6dc:	cmp	r0, #7
   1b6e0:	blt	1b734 <__assert_fail@plt+0x9ca8>
   1b6e4:	movw	r1, #9453	; 0x24ed
   1b6e8:	sub	r0, r5, #7
   1b6ec:	mov	r2, #7
   1b6f0:	movt	r1, #2
   1b6f4:	bl	11a50 <strncmp@plt>
   1b6f8:	cmp	r0, #0
   1b6fc:	bne	1b734 <__assert_fail@plt+0x9ca8>
   1b700:	movw	r1, #9461	; 0x24f5
   1b704:	mov	r0, r5
   1b708:	mov	r2, #3
   1b70c:	movt	r1, #2
   1b710:	bl	11a50 <strncmp@plt>
   1b714:	cmp	r0, #0
   1b718:	beq	1b724 <__assert_fail@plt+0x9c98>
   1b71c:	mov	r4, r5
   1b720:	b	1b734 <__assert_fail@plt+0x9ca8>
   1b724:	movw	r0, #12752	; 0x31d0
   1b728:	add	r4, r5, #3
   1b72c:	movt	r0, #3
   1b730:	str	r4, [r0]
   1b734:	movw	r0, #12756	; 0x31d4
   1b738:	movt	r0, #3
   1b73c:	str	r4, [r0]
   1b740:	movw	r0, #12916	; 0x3274
   1b744:	movt	r0, #3
   1b748:	str	r4, [r0]
   1b74c:	pop	{r4, r5, fp, pc}
   1b750:	movw	r0, #12768	; 0x31e0
   1b754:	mov	r1, #55	; 0x37
   1b758:	mov	r2, #1
   1b75c:	movt	r0, #3
   1b760:	ldr	r3, [r0]
   1b764:	movw	r0, #9397	; 0x24b5
   1b768:	movt	r0, #2
   1b76c:	bl	11798 <fwrite@plt>
   1b770:	bl	11a5c <abort@plt>
   1b774:	push	{r4, r5, r6, sl, fp, lr}
   1b778:	add	fp, sp, #16
   1b77c:	mov	r4, r0
   1b780:	movw	r0, #12920	; 0x3278
   1b784:	movt	r0, #3
   1b788:	cmp	r4, #0
   1b78c:	moveq	r4, r0
   1b790:	bl	118e8 <__errno_location@plt>
   1b794:	ldr	r6, [r0]
   1b798:	mov	r5, r0
   1b79c:	mov	r0, r4
   1b7a0:	mov	r1, #48	; 0x30
   1b7a4:	bl	1ec7c <__assert_fail@plt+0xd1f0>
   1b7a8:	str	r6, [r5]
   1b7ac:	pop	{r4, r5, r6, sl, fp, pc}
   1b7b0:	movw	r1, #12920	; 0x3278
   1b7b4:	cmp	r0, #0
   1b7b8:	movt	r1, #3
   1b7bc:	movne	r1, r0
   1b7c0:	ldr	r0, [r1]
   1b7c4:	bx	lr
   1b7c8:	movw	r2, #12920	; 0x3278
   1b7cc:	cmp	r0, #0
   1b7d0:	movt	r2, #3
   1b7d4:	movne	r2, r0
   1b7d8:	str	r1, [r2]
   1b7dc:	bx	lr
   1b7e0:	movw	r3, #12920	; 0x3278
   1b7e4:	cmp	r0, #0
   1b7e8:	movt	r3, #3
   1b7ec:	movne	r3, r0
   1b7f0:	ubfx	r0, r1, #5, #3
   1b7f4:	and	r1, r1, #31
   1b7f8:	add	r0, r3, r0, lsl #2
   1b7fc:	ldr	r3, [r0, #8]
   1b800:	eor	r2, r2, r3, lsr r1
   1b804:	and	r2, r2, #1
   1b808:	eor	r2, r3, r2, lsl r1
   1b80c:	str	r2, [r0, #8]
   1b810:	mov	r0, #1
   1b814:	and	r0, r0, r3, lsr r1
   1b818:	bx	lr
   1b81c:	movw	r2, #12920	; 0x3278
   1b820:	cmp	r0, #0
   1b824:	movt	r2, #3
   1b828:	movne	r2, r0
   1b82c:	ldr	r0, [r2, #4]
   1b830:	str	r1, [r2, #4]
   1b834:	bx	lr
   1b838:	movw	r3, #12920	; 0x3278
   1b83c:	cmp	r0, #0
   1b840:	movt	r3, #3
   1b844:	movne	r3, r0
   1b848:	cmp	r1, #0
   1b84c:	mov	r0, #10
   1b850:	cmpne	r2, #0
   1b854:	str	r0, [r3]
   1b858:	bne	1b868 <__assert_fail@plt+0x9ddc>
   1b85c:	push	{fp, lr}
   1b860:	mov	fp, sp
   1b864:	bl	11a5c <abort@plt>
   1b868:	str	r1, [r3, #40]	; 0x28
   1b86c:	str	r2, [r3, #44]	; 0x2c
   1b870:	bx	lr
   1b874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b878:	add	fp, sp, #28
   1b87c:	sub	sp, sp, #20
   1b880:	mov	r7, r0
   1b884:	ldr	r0, [fp, #8]
   1b888:	movw	r5, #12920	; 0x3278
   1b88c:	mov	r8, r3
   1b890:	mov	r9, r2
   1b894:	mov	sl, r1
   1b898:	movt	r5, #3
   1b89c:	cmp	r0, #0
   1b8a0:	movne	r5, r0
   1b8a4:	bl	118e8 <__errno_location@plt>
   1b8a8:	mov	r4, r0
   1b8ac:	ldm	r5, {r0, r1}
   1b8b0:	ldr	r2, [r5, #40]	; 0x28
   1b8b4:	ldr	r3, [r5, #44]	; 0x2c
   1b8b8:	add	r5, r5, #8
   1b8bc:	ldr	r6, [r4]
   1b8c0:	stm	sp, {r0, r1, r5}
   1b8c4:	str	r2, [sp, #12]
   1b8c8:	str	r3, [sp, #16]
   1b8cc:	mov	r0, r7
   1b8d0:	mov	r1, sl
   1b8d4:	mov	r2, r9
   1b8d8:	mov	r3, r8
   1b8dc:	bl	1b8ec <__assert_fail@plt+0x9e60>
   1b8e0:	str	r6, [r4]
   1b8e4:	sub	sp, fp, #28
   1b8e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8f0:	add	fp, sp, #28
   1b8f4:	sub	sp, sp, #156	; 0x9c
   1b8f8:	str	r0, [sp, #76]	; 0x4c
   1b8fc:	ldr	r0, [fp, #12]
   1b900:	mov	r6, r1
   1b904:	str	r3, [sp, #84]	; 0x54
   1b908:	str	r2, [fp, #-84]	; 0xffffffac
   1b90c:	and	r1, r0, #4
   1b910:	str	r1, [sp, #24]
   1b914:	and	r1, r0, #1
   1b918:	str	r1, [sp, #28]
   1b91c:	ubfx	r8, r0, #1, #1
   1b920:	bl	117b0 <__ctype_get_mb_cur_max@plt>
   1b924:	str	r0, [sp, #32]
   1b928:	ldr	r0, [fp, #24]
   1b92c:	ldr	r7, [fp, #8]
   1b930:	mov	r1, #0
   1b934:	mov	r2, #0
   1b938:	mov	r4, #1
   1b93c:	str	r1, [sp, #52]	; 0x34
   1b940:	str	r0, [sp, #72]	; 0x48
   1b944:	ldr	r0, [fp, #20]
   1b948:	str	r0, [sp, #68]	; 0x44
   1b94c:	mov	r0, #0
   1b950:	str	r0, [sp, #48]	; 0x30
   1b954:	mov	r0, #0
   1b958:	str	r0, [sp, #92]	; 0x5c
   1b95c:	mov	r0, #0
   1b960:	str	r0, [fp, #-76]	; 0xffffffb4
   1b964:	mov	r0, #0
   1b968:	cmp	r7, #10
   1b96c:	bhi	1cc54 <__assert_fail@plt+0xb1c8>
   1b970:	add	r1, pc, #28
   1b974:	mov	sl, r6
   1b978:	ldr	r6, [sp, #76]	; 0x4c
   1b97c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b980:	ldr	lr, [sp, #84]	; 0x54
   1b984:	mov	r9, #0
   1b988:	mov	r3, #1
   1b98c:	mov	r5, #0
   1b990:	ldr	pc, [r1, r7, lsl #2]
   1b994:	andeq	fp, r1, r4, ror #20
   1b998:	andeq	fp, r1, r0, lsr #21
   1b99c:	andeq	fp, r1, r4, ror sl
   1b9a0:	andeq	fp, r1, ip, asr sl
   1b9a4:	muleq	r1, r4, sl
   1b9a8:	andeq	fp, r1, r8, asr #21
   1b9ac:	andeq	fp, r1, r4, lsl #21
   1b9b0:	ldrdeq	fp, [r1], -r4
   1b9b4:	andeq	fp, r1, r0, asr #19
   1b9b8:	andeq	fp, r1, r0, asr #19
   1b9bc:	andeq	fp, r1, r8, ror #24
   1b9c0:	mov	r9, r4
   1b9c4:	movw	r4, #9543	; 0x2547
   1b9c8:	mov	r5, r8
   1b9cc:	mov	r8, r2
   1b9d0:	mov	r0, #0
   1b9d4:	mov	r2, #5
   1b9d8:	movt	r4, #2
   1b9dc:	mov	r1, r4
   1b9e0:	bl	1172c <dcgettext@plt>
   1b9e4:	cmp	r0, r4
   1b9e8:	str	r0, [sp, #68]	; 0x44
   1b9ec:	bne	1bb7c <__assert_fail@plt+0xa0f0>
   1b9f0:	bl	20190 <__assert_fail@plt+0xe704>
   1b9f4:	ldrb	r1, [r0]
   1b9f8:	and	r1, r1, #223	; 0xdf
   1b9fc:	cmp	r1, #71	; 0x47
   1ba00:	beq	1bb48 <__assert_fail@plt+0xa0bc>
   1ba04:	cmp	r1, #85	; 0x55
   1ba08:	bne	1bb60 <__assert_fail@plt+0xa0d4>
   1ba0c:	ldrb	r1, [r0, #1]
   1ba10:	and	r1, r1, #223	; 0xdf
   1ba14:	cmp	r1, #84	; 0x54
   1ba18:	bne	1bb60 <__assert_fail@plt+0xa0d4>
   1ba1c:	ldrb	r1, [r0, #2]
   1ba20:	and	r1, r1, #223	; 0xdf
   1ba24:	cmp	r1, #70	; 0x46
   1ba28:	bne	1bb60 <__assert_fail@plt+0xa0d4>
   1ba2c:	ldrb	r1, [r0, #3]
   1ba30:	cmp	r1, #45	; 0x2d
   1ba34:	ldrbeq	r1, [r0, #4]
   1ba38:	cmpeq	r1, #56	; 0x38
   1ba3c:	bne	1bb60 <__assert_fail@plt+0xa0d4>
   1ba40:	ldrb	r0, [r0, #5]
   1ba44:	cmp	r0, #0
   1ba48:	movw	r0, #9545	; 0x2549
   1ba4c:	movt	r0, #2
   1ba50:	str	r0, [sp, #68]	; 0x44
   1ba54:	bne	1bb60 <__assert_fail@plt+0xa0d4>
   1ba58:	b	1bb7c <__assert_fail@plt+0xa0f0>
   1ba5c:	mov	r0, #1
   1ba60:	b	1baa0 <__assert_fail@plt+0xa014>
   1ba64:	mov	r7, #0
   1ba68:	mov	r9, #0
   1ba6c:	mov	r3, r0
   1ba70:	b	1bb40 <__assert_fail@plt+0xa0b4>
   1ba74:	tst	r8, #1
   1ba78:	bne	1baa0 <__assert_fail@plt+0xa014>
   1ba7c:	mov	r3, r0
   1ba80:	b	1baf8 <__assert_fail@plt+0xa06c>
   1ba84:	mov	r0, #1
   1ba88:	mov	r9, #0
   1ba8c:	mov	r7, #5
   1ba90:	b	1badc <__assert_fail@plt+0xa050>
   1ba94:	mov	r3, #1
   1ba98:	tst	r8, #1
   1ba9c:	beq	1baf8 <__assert_fail@plt+0xa06c>
   1baa0:	mov	r1, #1
   1baa4:	mov	r9, #0
   1baa8:	mov	r7, #2
   1baac:	mov	r3, r0
   1bab0:	mov	r5, #1
   1bab4:	str	r1, [fp, #-76]	; 0xffffffb4
   1bab8:	movw	r1, #10525	; 0x291d
   1babc:	movt	r1, #2
   1bac0:	str	r1, [sp, #92]	; 0x5c
   1bac4:	b	1bcd4 <__assert_fail@plt+0xa248>
   1bac8:	mov	r7, #5
   1bacc:	tst	r8, #1
   1bad0:	beq	1bb18 <__assert_fail@plt+0xa08c>
   1bad4:	mov	r0, #1
   1bad8:	mov	r9, #0
   1badc:	str	r0, [fp, #-76]	; 0xffffffb4
   1bae0:	movw	r0, #9541	; 0x2545
   1bae4:	mov	r3, #1
   1bae8:	mov	r5, #1
   1baec:	movt	r0, #2
   1baf0:	str	r0, [sp, #92]	; 0x5c
   1baf4:	b	1bcd4 <__assert_fail@plt+0xa248>
   1baf8:	cmp	sl, #0
   1bafc:	mov	r9, #1
   1bb00:	mov	r7, #2
   1bb04:	movne	r0, #39	; 0x27
   1bb08:	strbne	r0, [r6]
   1bb0c:	movw	r0, #10525	; 0x291d
   1bb10:	movt	r0, #2
   1bb14:	b	1bb34 <__assert_fail@plt+0xa0a8>
   1bb18:	cmp	sl, #0
   1bb1c:	mov	r9, #1
   1bb20:	mov	r3, #1
   1bb24:	movne	r0, #34	; 0x22
   1bb28:	strbne	r0, [r6]
   1bb2c:	movw	r0, #9541	; 0x2545
   1bb30:	movt	r0, #2
   1bb34:	str	r0, [sp, #92]	; 0x5c
   1bb38:	mov	r0, #1
   1bb3c:	str	r0, [fp, #-76]	; 0xffffffb4
   1bb40:	mov	r5, #0
   1bb44:	b	1bcd4 <__assert_fail@plt+0xa248>
   1bb48:	ldrb	r1, [r0, #1]
   1bb4c:	and	r1, r1, #223	; 0xdf
   1bb50:	cmp	r1, #66	; 0x42
   1bb54:	ldrbeq	r1, [r0, #2]
   1bb58:	cmpeq	r1, #49	; 0x31
   1bb5c:	beq	1ca7c <__assert_fail@plt+0xaff0>
   1bb60:	movw	r0, #10525	; 0x291d
   1bb64:	movw	r1, #9541	; 0x2545
   1bb68:	cmp	r7, #9
   1bb6c:	movt	r0, #2
   1bb70:	movt	r1, #2
   1bb74:	moveq	r0, r1
   1bb78:	str	r0, [sp, #68]	; 0x44
   1bb7c:	movw	r4, #10525	; 0x291d
   1bb80:	mov	r0, #0
   1bb84:	mov	r2, #5
   1bb88:	movt	r4, #2
   1bb8c:	mov	r1, r4
   1bb90:	bl	1172c <dcgettext@plt>
   1bb94:	cmp	r0, r4
   1bb98:	str	r0, [sp, #72]	; 0x48
   1bb9c:	beq	1bbac <__assert_fail@plt+0xa120>
   1bba0:	mov	r4, r9
   1bba4:	mov	r2, r8
   1bba8:	b	1bc64 <__assert_fail@plt+0xa1d8>
   1bbac:	bl	20190 <__assert_fail@plt+0xe704>
   1bbb0:	ldrb	r1, [r0]
   1bbb4:	mov	r4, r9
   1bbb8:	and	r1, r1, #223	; 0xdf
   1bbbc:	cmp	r1, #71	; 0x47
   1bbc0:	beq	1bc1c <__assert_fail@plt+0xa190>
   1bbc4:	cmp	r1, #85	; 0x55
   1bbc8:	mov	r2, r8
   1bbcc:	bne	1bc44 <__assert_fail@plt+0xa1b8>
   1bbd0:	ldrb	r1, [r0, #1]
   1bbd4:	and	r1, r1, #223	; 0xdf
   1bbd8:	cmp	r1, #84	; 0x54
   1bbdc:	bne	1bc44 <__assert_fail@plt+0xa1b8>
   1bbe0:	ldrb	r1, [r0, #2]
   1bbe4:	and	r1, r1, #223	; 0xdf
   1bbe8:	cmp	r1, #70	; 0x46
   1bbec:	ldrbeq	r1, [r0, #3]
   1bbf0:	cmpeq	r1, #45	; 0x2d
   1bbf4:	bne	1bc44 <__assert_fail@plt+0xa1b8>
   1bbf8:	ldrb	r1, [r0, #4]
   1bbfc:	cmp	r1, #56	; 0x38
   1bc00:	ldrbeq	r0, [r0, #5]
   1bc04:	cmpeq	r0, #0
   1bc08:	bne	1bc44 <__assert_fail@plt+0xa1b8>
   1bc0c:	movw	r0, #9549	; 0x254d
   1bc10:	movt	r0, #2
   1bc14:	str	r0, [sp, #72]	; 0x48
   1bc18:	b	1bc64 <__assert_fail@plt+0xa1d8>
   1bc1c:	ldrb	r1, [r0, #1]
   1bc20:	mov	r2, r8
   1bc24:	and	r1, r1, #223	; 0xdf
   1bc28:	cmp	r1, #66	; 0x42
   1bc2c:	bne	1bc44 <__assert_fail@plt+0xa1b8>
   1bc30:	ldrb	r1, [r0, #2]
   1bc34:	cmp	r1, #49	; 0x31
   1bc38:	ldrbeq	r1, [r0, #3]
   1bc3c:	cmpeq	r1, #56	; 0x38
   1bc40:	beq	1cac0 <__assert_fail@plt+0xb034>
   1bc44:	movw	r0, #10525	; 0x291d
   1bc48:	cmp	r7, #9
   1bc4c:	movt	r0, #2
   1bc50:	mov	r1, r0
   1bc54:	movw	r0, #9541	; 0x2545
   1bc58:	movt	r0, #2
   1bc5c:	moveq	r1, r0
   1bc60:	str	r1, [sp, #72]	; 0x48
   1bc64:	mov	r8, r5
   1bc68:	mov	r9, #0
   1bc6c:	tst	r8, #1
   1bc70:	mov	r5, r8
   1bc74:	str	r2, [fp, #-48]	; 0xffffffd0
   1bc78:	bne	1bcb0 <__assert_fail@plt+0xa224>
   1bc7c:	ldr	r0, [sp, #68]	; 0x44
   1bc80:	ldrb	r0, [r0]
   1bc84:	cmp	r0, #0
   1bc88:	beq	1bcb0 <__assert_fail@plt+0xa224>
   1bc8c:	ldr	r1, [sp, #68]	; 0x44
   1bc90:	mov	r9, #0
   1bc94:	add	r1, r1, #1
   1bc98:	cmp	r9, sl
   1bc9c:	strbcc	r0, [r6, r9]
   1bca0:	ldrb	r0, [r1, r9]
   1bca4:	add	r9, r9, #1
   1bca8:	cmp	r0, #0
   1bcac:	bne	1bc98 <__assert_fail@plt+0xa20c>
   1bcb0:	ldr	r8, [sp, #72]	; 0x48
   1bcb4:	mov	r0, r8
   1bcb8:	bl	118ac <strlen@plt>
   1bcbc:	ldr	ip, [fp, #-84]	; 0xffffffac
   1bcc0:	ldr	lr, [sp, #84]	; 0x54
   1bcc4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1bcc8:	str	r0, [fp, #-76]	; 0xffffffb4
   1bccc:	str	r8, [sp, #92]	; 0x5c
   1bcd0:	mov	r3, #1
   1bcd4:	ldr	r0, [fp, #16]
   1bcd8:	str	r7, [fp, #-64]	; 0xffffffc0
   1bcdc:	str	r5, [fp, #-72]	; 0xffffffb8
   1bce0:	str	r3, [sp, #80]	; 0x50
   1bce4:	cmp	r0, #0
   1bce8:	movwne	r0, #1
   1bcec:	and	r0, r0, r5
   1bcf0:	str	r0, [fp, #-88]	; 0xffffffa8
   1bcf4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1bcf8:	cmp	r0, #0
   1bcfc:	movwne	r0, #1
   1bd00:	subs	r7, r7, #2
   1bd04:	and	r1, r0, r5
   1bd08:	str	r7, [fp, #-80]	; 0xffffffb0
   1bd0c:	and	r1, r3, r1
   1bd10:	str	r1, [sp, #40]	; 0x28
   1bd14:	clz	r1, r7
   1bd18:	lsr	r1, r1, #5
   1bd1c:	and	r1, r1, r5
   1bd20:	eor	r5, r5, #1
   1bd24:	str	r1, [sp, #36]	; 0x24
   1bd28:	mov	r1, r7
   1bd2c:	str	r5, [sp, #88]	; 0x58
   1bd30:	mov	r7, #0
   1bd34:	movwne	r1, #1
   1bd38:	orr	r5, r1, r5
   1bd3c:	and	r1, r1, r3
   1bd40:	and	r0, r0, r1
   1bd44:	str	r5, [sp, #60]	; 0x3c
   1bd48:	str	r1, [fp, #-68]	; 0xffffffbc
   1bd4c:	str	r0, [fp, #-60]	; 0xffffffc4
   1bd50:	eor	r0, r3, #1
   1bd54:	str	r0, [sp, #44]	; 0x2c
   1bd58:	cmn	lr, #1
   1bd5c:	beq	1bd6c <__assert_fail@plt+0xa2e0>
   1bd60:	cmp	r7, lr
   1bd64:	bne	1bd78 <__assert_fail@plt+0xa2ec>
   1bd68:	b	1c9f0 <__assert_fail@plt+0xaf64>
   1bd6c:	ldrb	r0, [ip, r7]
   1bd70:	cmp	r0, #0
   1bd74:	beq	1c9f8 <__assert_fail@plt+0xaf6c>
   1bd78:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1bd7c:	mov	r8, #0
   1bd80:	str	r4, [fp, #-52]	; 0xffffffcc
   1bd84:	str	r2, [fp, #-48]	; 0xffffffd0
   1bd88:	cmp	r0, #0
   1bd8c:	beq	1bdc0 <__assert_fail@plt+0xa334>
   1bd90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1bd94:	add	r4, r7, r0
   1bd98:	cmp	r0, #2
   1bd9c:	bcc	1bdb8 <__assert_fail@plt+0xa32c>
   1bda0:	cmn	lr, #1
   1bda4:	bne	1bdb8 <__assert_fail@plt+0xa32c>
   1bda8:	mov	r0, ip
   1bdac:	bl	118ac <strlen@plt>
   1bdb0:	ldr	ip, [fp, #-84]	; 0xffffffac
   1bdb4:	mov	lr, r0
   1bdb8:	cmp	r4, lr
   1bdbc:	bls	1bdd8 <__assert_fail@plt+0xa34c>
   1bdc0:	mov	r0, #0
   1bdc4:	str	r0, [fp, #-56]	; 0xffffffc8
   1bdc8:	ldrb	r5, [ip, r7]
   1bdcc:	cmp	r5, #126	; 0x7e
   1bdd0:	bls	1be28 <__assert_fail@plt+0xa39c>
   1bdd4:	b	1c230 <__assert_fail@plt+0xa7a4>
   1bdd8:	ldr	r1, [sp, #92]	; 0x5c
   1bddc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1bde0:	add	r0, ip, r7
   1bde4:	mov	r4, lr
   1bde8:	bl	11720 <memcmp@plt>
   1bdec:	ldr	r2, [sp, #88]	; 0x58
   1bdf0:	cmp	r0, #0
   1bdf4:	mov	r1, r0
   1bdf8:	movwne	r1, #1
   1bdfc:	orr	r1, r1, r2
   1be00:	tst	r1, #1
   1be04:	beq	1cb04 <__assert_fail@plt+0xb078>
   1be08:	ldr	ip, [fp, #-84]	; 0xffffffac
   1be0c:	clz	r0, r0
   1be10:	mov	lr, r4
   1be14:	lsr	r0, r0, #5
   1be18:	str	r0, [fp, #-56]	; 0xffffffc8
   1be1c:	ldrb	r5, [ip, r7]
   1be20:	cmp	r5, #126	; 0x7e
   1be24:	bhi	1c230 <__assert_fail@plt+0xa7a4>
   1be28:	add	r3, pc, #16
   1be2c:	mov	r4, #1
   1be30:	mov	r2, #110	; 0x6e
   1be34:	mov	r0, #97	; 0x61
   1be38:	mov	r1, #0
   1be3c:	ldr	pc, [r3, r5, lsl #2]
   1be40:	andeq	ip, r1, r0, lsl r1
   1be44:	andeq	ip, r1, r0, lsr r2
   1be48:	andeq	ip, r1, r0, lsr r2
   1be4c:	andeq	ip, r1, r0, lsr r2
   1be50:	andeq	ip, r1, r0, lsr r2
   1be54:	andeq	ip, r1, r0, lsr r2
   1be58:	andeq	ip, r1, r0, lsr r2
   1be5c:	andeq	ip, r1, ip, lsl #6
   1be60:	strdeq	ip, [r1], -r0
   1be64:	ldrdeq	ip, [r1], -r8
   1be68:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1be6c:	andeq	ip, r1, ip, lsl #3
   1be70:	ldrdeq	ip, [r1], -r0
   1be74:	strdeq	ip, [r1], -r8
   1be78:	andeq	ip, r1, r0, lsr r2
   1be7c:	andeq	ip, r1, r0, lsr r2
   1be80:	andeq	ip, r1, r0, lsr r2
   1be84:	andeq	ip, r1, r0, lsr r2
   1be88:	andeq	ip, r1, r0, lsr r2
   1be8c:	andeq	ip, r1, r0, lsr r2
   1be90:	andeq	ip, r1, r0, lsr r2
   1be94:	andeq	ip, r1, r0, lsr r2
   1be98:	andeq	ip, r1, r0, lsr r2
   1be9c:	andeq	ip, r1, r0, lsr r2
   1bea0:	andeq	ip, r1, r0, lsr r2
   1bea4:	andeq	ip, r1, r0, lsr r2
   1bea8:	andeq	ip, r1, r0, lsr r2
   1beac:	andeq	ip, r1, r0, lsr r2
   1beb0:	andeq	ip, r1, r0, lsr r2
   1beb4:	andeq	ip, r1, r0, lsr r2
   1beb8:	andeq	ip, r1, r0, lsr r2
   1bebc:	andeq	ip, r1, r0, lsr r2
   1bec0:	andeq	ip, r1, r8, lsl #5
   1bec4:	andeq	ip, r1, ip, lsl #5
   1bec8:	andeq	ip, r1, ip, lsl #5
   1becc:	andeq	ip, r1, ip, asr r0
   1bed0:	andeq	ip, r1, ip, lsl #5
   1bed4:	andeq	ip, r1, ip, lsr r0
   1bed8:	andeq	ip, r1, ip, lsl #5
   1bedc:	muleq	r1, r4, r1
   1bee0:	andeq	ip, r1, ip, lsl #5
   1bee4:	andeq	ip, r1, ip, lsl #5
   1bee8:	andeq	ip, r1, ip, lsl #5
   1beec:	andeq	ip, r1, ip, lsr r0
   1bef0:	andeq	ip, r1, ip, lsr r0
   1bef4:	andeq	ip, r1, ip, lsr r0
   1bef8:	andeq	ip, r1, ip, lsr r0
   1befc:	andeq	ip, r1, ip, lsr r0
   1bf00:	andeq	ip, r1, ip, lsr r0
   1bf04:	andeq	ip, r1, ip, lsr r0
   1bf08:	andeq	ip, r1, ip, lsr r0
   1bf0c:	andeq	ip, r1, ip, lsr r0
   1bf10:	andeq	ip, r1, ip, lsr r0
   1bf14:	andeq	ip, r1, ip, lsr r0
   1bf18:	andeq	ip, r1, ip, lsr r0
   1bf1c:	andeq	ip, r1, ip, lsr r0
   1bf20:	andeq	ip, r1, ip, lsr r0
   1bf24:	andeq	ip, r1, ip, lsr r0
   1bf28:	andeq	ip, r1, ip, lsr r0
   1bf2c:	andeq	ip, r1, ip, lsl #5
   1bf30:	andeq	ip, r1, ip, lsl #5
   1bf34:	andeq	ip, r1, ip, lsl #5
   1bf38:	andeq	ip, r1, ip, lsl #5
   1bf3c:	andeq	ip, r1, r0, asr r1
   1bf40:	andeq	ip, r1, r0, lsr r2
   1bf44:	andeq	ip, r1, ip, lsr r0
   1bf48:	andeq	ip, r1, ip, lsr r0
   1bf4c:	andeq	ip, r1, ip, lsr r0
   1bf50:	andeq	ip, r1, ip, lsr r0
   1bf54:	andeq	ip, r1, ip, lsr r0
   1bf58:	andeq	ip, r1, ip, lsr r0
   1bf5c:	andeq	ip, r1, ip, lsr r0
   1bf60:	andeq	ip, r1, ip, lsr r0
   1bf64:	andeq	ip, r1, ip, lsr r0
   1bf68:	andeq	ip, r1, ip, lsr r0
   1bf6c:	andeq	ip, r1, ip, lsr r0
   1bf70:	andeq	ip, r1, ip, lsr r0
   1bf74:	andeq	ip, r1, ip, lsr r0
   1bf78:	andeq	ip, r1, ip, lsr r0
   1bf7c:	andeq	ip, r1, ip, lsr r0
   1bf80:	andeq	ip, r1, ip, lsr r0
   1bf84:	andeq	ip, r1, ip, lsr r0
   1bf88:	andeq	ip, r1, ip, lsr r0
   1bf8c:	andeq	ip, r1, ip, lsr r0
   1bf90:	andeq	ip, r1, ip, lsr r0
   1bf94:	andeq	ip, r1, ip, lsr r0
   1bf98:	andeq	ip, r1, ip, lsr r0
   1bf9c:	andeq	ip, r1, ip, lsr r0
   1bfa0:	andeq	ip, r1, ip, lsr r0
   1bfa4:	andeq	ip, r1, ip, lsr r0
   1bfa8:	andeq	ip, r1, ip, lsr r0
   1bfac:	andeq	ip, r1, ip, lsl #5
   1bfb0:	muleq	r1, ip, r0
   1bfb4:	andeq	ip, r1, ip, lsr r0
   1bfb8:	andeq	ip, r1, ip, lsl #5
   1bfbc:	andeq	ip, r1, ip, lsr r0
   1bfc0:	andeq	ip, r1, ip, lsl #5
   1bfc4:	andeq	ip, r1, ip, lsr r0
   1bfc8:	andeq	ip, r1, ip, lsr r0
   1bfcc:	andeq	ip, r1, ip, lsr r0
   1bfd0:	andeq	ip, r1, ip, lsr r0
   1bfd4:	andeq	ip, r1, ip, lsr r0
   1bfd8:	andeq	ip, r1, ip, lsr r0
   1bfdc:	andeq	ip, r1, ip, lsr r0
   1bfe0:	andeq	ip, r1, ip, lsr r0
   1bfe4:	andeq	ip, r1, ip, lsr r0
   1bfe8:	andeq	ip, r1, ip, lsr r0
   1bfec:	andeq	ip, r1, ip, lsr r0
   1bff0:	andeq	ip, r1, ip, lsr r0
   1bff4:	andeq	ip, r1, ip, lsr r0
   1bff8:	andeq	ip, r1, ip, lsr r0
   1bffc:	andeq	ip, r1, ip, lsr r0
   1c000:	andeq	ip, r1, ip, lsr r0
   1c004:	andeq	ip, r1, ip, lsr r0
   1c008:	andeq	ip, r1, ip, lsr r0
   1c00c:	andeq	ip, r1, ip, lsr r0
   1c010:	andeq	ip, r1, ip, lsr r0
   1c014:	andeq	ip, r1, ip, lsr r0
   1c018:	andeq	ip, r1, ip, lsr r0
   1c01c:	andeq	ip, r1, ip, lsr r0
   1c020:	andeq	ip, r1, ip, lsr r0
   1c024:	andeq	ip, r1, ip, lsr r0
   1c028:	andeq	ip, r1, ip, lsr r0
   1c02c:	andeq	ip, r1, ip, ror r0
   1c030:	andeq	ip, r1, ip, lsl #5
   1c034:	andeq	ip, r1, ip, ror r0
   1c038:	andeq	ip, r1, ip, asr r0
   1c03c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c040:	cmp	r0, #0
   1c044:	beq	1c320 <__assert_fail@plt+0xa894>
   1c048:	ldr	r0, [fp, #16]
   1c04c:	cmp	r0, #0
   1c050:	mov	r0, r5
   1c054:	bne	1c330 <__assert_fail@plt+0xa8a4>
   1c058:	b	1c350 <__assert_fail@plt+0xa8c4>
   1c05c:	mov	r4, #0
   1c060:	cmp	r7, #0
   1c064:	beq	1c288 <__assert_fail@plt+0xa7fc>
   1c068:	mov	r8, #0
   1c06c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c070:	cmp	r0, #0
   1c074:	bne	1c048 <__assert_fail@plt+0xa5bc>
   1c078:	b	1c320 <__assert_fail@plt+0xa894>
   1c07c:	mov	r4, #0
   1c080:	cmn	lr, #1
   1c084:	beq	1c260 <__assert_fail@plt+0xa7d4>
   1c088:	cmp	r7, #0
   1c08c:	bne	1c068 <__assert_fail@plt+0xa5dc>
   1c090:	cmp	lr, #1
   1c094:	beq	1c288 <__assert_fail@plt+0xa7fc>
   1c098:	b	1c068 <__assert_fail@plt+0xa5dc>
   1c09c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c0a0:	cmp	r0, #2
   1c0a4:	bne	1c2b8 <__assert_fail@plt+0xa82c>
   1c0a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c0ac:	tst	r0, #1
   1c0b0:	bne	1cb18 <__assert_fail@plt+0xb08c>
   1c0b4:	mov	r8, #0
   1c0b8:	mov	r0, #92	; 0x5c
   1c0bc:	mov	r4, #0
   1c0c0:	cmp	r8, #0
   1c0c4:	beq	1c2d8 <__assert_fail@plt+0xa84c>
   1c0c8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c0cc:	b	1c3cc <__assert_fail@plt+0xa940>
   1c0d0:	mov	r0, #102	; 0x66
   1c0d4:	b	1c30c <__assert_fail@plt+0xa880>
   1c0d8:	mov	r2, #116	; 0x74
   1c0dc:	ldr	r0, [sp, #60]	; 0x3c
   1c0e0:	tst	r0, #1
   1c0e4:	mov	r0, r2
   1c0e8:	bne	1c30c <__assert_fail@plt+0xa880>
   1c0ec:	b	1cb18 <__assert_fail@plt+0xb08c>
   1c0f0:	mov	r0, #98	; 0x62
   1c0f4:	b	1c30c <__assert_fail@plt+0xa880>
   1c0f8:	mov	r2, #114	; 0x72
   1c0fc:	ldr	r0, [sp, #60]	; 0x3c
   1c100:	tst	r0, #1
   1c104:	mov	r0, r2
   1c108:	bne	1c30c <__assert_fail@plt+0xa880>
   1c10c:	b	1cb18 <__assert_fail@plt+0xb08c>
   1c110:	ldr	r0, [sp, #80]	; 0x50
   1c114:	tst	r0, #1
   1c118:	beq	1c3f4 <__assert_fail@plt+0xa968>
   1c11c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c120:	tst	r0, #1
   1c124:	bne	1cc40 <__assert_fail@plt+0xb1b4>
   1c128:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c12c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c130:	cmp	r0, #2
   1c134:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1c138:	movwne	r0, #1
   1c13c:	orr	r0, r0, r2
   1c140:	tst	r0, #1
   1c144:	beq	1c6ec <__assert_fail@plt+0xac60>
   1c148:	mov	r0, r9
   1c14c:	b	1c720 <__assert_fail@plt+0xac94>
   1c150:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c154:	mov	r8, #0
   1c158:	mov	r5, #63	; 0x3f
   1c15c:	cmp	r0, #5
   1c160:	beq	1c5a8 <__assert_fail@plt+0xab1c>
   1c164:	cmp	r0, #2
   1c168:	bne	1c658 <__assert_fail@plt+0xabcc>
   1c16c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c170:	tst	r0, #1
   1c174:	bne	1cb18 <__assert_fail@plt+0xb08c>
   1c178:	mov	r4, #0
   1c17c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c180:	cmp	r0, #0
   1c184:	bne	1c048 <__assert_fail@plt+0xa5bc>
   1c188:	b	1c320 <__assert_fail@plt+0xa894>
   1c18c:	mov	r0, #118	; 0x76
   1c190:	b	1c30c <__assert_fail@plt+0xa880>
   1c194:	mov	r0, #1
   1c198:	mov	r5, #39	; 0x27
   1c19c:	str	r0, [sp, #52]	; 0x34
   1c1a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c1a4:	cmp	r0, #2
   1c1a8:	bne	1c21c <__assert_fail@plt+0xa790>
   1c1ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c1b0:	tst	r0, #1
   1c1b4:	bne	1cb18 <__assert_fail@plt+0xb08c>
   1c1b8:	ldr	r2, [sp, #48]	; 0x30
   1c1bc:	clz	r1, sl
   1c1c0:	mov	r8, #0
   1c1c4:	lsr	r1, r1, #5
   1c1c8:	cmp	r2, #0
   1c1cc:	mov	r0, r2
   1c1d0:	movwne	r0, #1
   1c1d4:	orrs	r0, r0, r1
   1c1d8:	moveq	r2, sl
   1c1dc:	moveq	sl, r0
   1c1e0:	cmp	r9, sl
   1c1e4:	str	r2, [sp, #48]	; 0x30
   1c1e8:	movcc	r0, #39	; 0x27
   1c1ec:	strbcc	r0, [r6, r9]
   1c1f0:	add	r0, r9, #1
   1c1f4:	cmp	r0, sl
   1c1f8:	movcc	r1, #92	; 0x5c
   1c1fc:	strbcc	r1, [r6, r0]
   1c200:	add	r0, r9, #2
   1c204:	add	r9, r9, #3
   1c208:	cmp	r0, sl
   1c20c:	movcc	r1, #39	; 0x27
   1c210:	strbcc	r1, [r6, r0]
   1c214:	mov	r0, #0
   1c218:	str	r0, [fp, #-48]	; 0xffffffd0
   1c21c:	mov	r4, #1
   1c220:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c224:	cmp	r0, #0
   1c228:	bne	1c048 <__assert_fail@plt+0xa5bc>
   1c22c:	b	1c320 <__assert_fail@plt+0xa894>
   1c230:	ldr	r0, [sp, #32]
   1c234:	cmp	r0, #1
   1c238:	bne	1c424 <__assert_fail@plt+0xa998>
   1c23c:	str	lr, [sp, #84]	; 0x54
   1c240:	bl	1187c <__ctype_b_loc@plt>
   1c244:	ldr	r0, [r0]
   1c248:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c24c:	mov	r1, #1
   1c250:	add	r0, r0, r5, lsl #1
   1c254:	ldrb	r0, [r0, #1]
   1c258:	ubfx	r4, r0, #6, #1
   1c25c:	b	1c81c <__assert_fail@plt+0xad90>
   1c260:	cmp	r7, #0
   1c264:	ldrbeq	r0, [ip, #1]
   1c268:	cmpeq	r0, #0
   1c26c:	beq	1c288 <__assert_fail@plt+0xa7fc>
   1c270:	mvn	lr, #0
   1c274:	mov	r8, #0
   1c278:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c27c:	cmp	r0, #0
   1c280:	bne	1c048 <__assert_fail@plt+0xa5bc>
   1c284:	b	1c320 <__assert_fail@plt+0xa894>
   1c288:	mov	r1, #1
   1c28c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c290:	cmp	r0, #2
   1c294:	bne	1c2a4 <__assert_fail@plt+0xa818>
   1c298:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c29c:	tst	r0, #1
   1c2a0:	bne	1cb18 <__assert_fail@plt+0xb08c>
   1c2a4:	mov	r4, r1
   1c2a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c2ac:	cmp	r0, #0
   1c2b0:	bne	1c048 <__assert_fail@plt+0xa5bc>
   1c2b4:	b	1c320 <__assert_fail@plt+0xa894>
   1c2b8:	ldr	r1, [sp, #40]	; 0x28
   1c2bc:	mov	r8, #0
   1c2c0:	mov	r0, #92	; 0x5c
   1c2c4:	cmp	r1, #0
   1c2c8:	beq	1c30c <__assert_fail@plt+0xa880>
   1c2cc:	mov	r4, #0
   1c2d0:	cmp	r8, #0
   1c2d4:	bne	1c0c8 <__assert_fail@plt+0xa63c>
   1c2d8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c2dc:	tst	r2, #1
   1c2e0:	beq	1c3cc <__assert_fail@plt+0xa940>
   1c2e4:	cmp	r9, sl
   1c2e8:	movcc	r1, #39	; 0x27
   1c2ec:	strbcc	r1, [r6, r9]
   1c2f0:	add	r1, r9, #1
   1c2f4:	add	r9, r9, #2
   1c2f8:	cmp	r1, sl
   1c2fc:	movcc	r2, #39	; 0x27
   1c300:	strbcc	r2, [r6, r1]
   1c304:	mov	r2, #0
   1c308:	b	1c3cc <__assert_fail@plt+0xa940>
   1c30c:	ldr	r1, [sp, #80]	; 0x50
   1c310:	mov	r4, #0
   1c314:	mov	r8, #0
   1c318:	tst	r1, #1
   1c31c:	bne	1c35c <__assert_fail@plt+0xa8d0>
   1c320:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1c324:	cmp	r0, #0
   1c328:	mov	r0, r5
   1c32c:	beq	1c350 <__assert_fail@plt+0xa8c4>
   1c330:	ldr	r1, [fp, #16]
   1c334:	ubfx	r0, r5, #5, #3
   1c338:	mov	r2, #1
   1c33c:	ldr	r0, [r1, r0, lsl #2]
   1c340:	and	r1, r5, #31
   1c344:	tst	r0, r2, lsl r1
   1c348:	mov	r0, r5
   1c34c:	bne	1c35c <__assert_fail@plt+0xa8d0>
   1c350:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1c354:	cmp	r1, #0
   1c358:	beq	1c7b4 <__assert_fail@plt+0xad28>
   1c35c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1c360:	tst	r1, #1
   1c364:	bne	1caf8 <__assert_fail@plt+0xb06c>
   1c368:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1c36c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c370:	cmp	r1, #2
   1c374:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1c378:	movwne	r1, #1
   1c37c:	orr	r1, r1, r2
   1c380:	tst	r1, #1
   1c384:	bne	1c3bc <__assert_fail@plt+0xa930>
   1c388:	cmp	r9, sl
   1c38c:	movcc	r1, #39	; 0x27
   1c390:	strbcc	r1, [r6, r9]
   1c394:	add	r1, r9, #1
   1c398:	cmp	r1, sl
   1c39c:	movcc	r2, #36	; 0x24
   1c3a0:	strbcc	r2, [r6, r1]
   1c3a4:	add	r1, r9, #2
   1c3a8:	add	r9, r9, #3
   1c3ac:	cmp	r1, sl
   1c3b0:	movcc	r2, #39	; 0x27
   1c3b4:	strbcc	r2, [r6, r1]
   1c3b8:	mov	r2, #1
   1c3bc:	cmp	r9, sl
   1c3c0:	movcc	r1, #92	; 0x5c
   1c3c4:	strbcc	r1, [r6, r9]
   1c3c8:	add	r9, r9, #1
   1c3cc:	cmp	r9, sl
   1c3d0:	add	r7, r7, #1
   1c3d4:	strbcc	r0, [r6, r9]
   1c3d8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1c3dc:	add	r9, r9, #1
   1c3e0:	and	r0, r0, r4
   1c3e4:	mov	r4, r0
   1c3e8:	cmn	lr, #1
   1c3ec:	bne	1bd60 <__assert_fail@plt+0xa2d4>
   1c3f0:	b	1bd6c <__assert_fail@plt+0xa2e0>
   1c3f4:	ldr	r0, [sp, #28]
   1c3f8:	mov	r4, #0
   1c3fc:	mov	r8, #0
   1c400:	mov	r5, #0
   1c404:	cmp	r0, #0
   1c408:	beq	1c320 <__assert_fail@plt+0xa894>
   1c40c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1c410:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c414:	add	r7, r7, #1
   1c418:	cmn	lr, #1
   1c41c:	bne	1bd60 <__assert_fail@plt+0xa2d4>
   1c420:	b	1bd6c <__assert_fail@plt+0xa2e0>
   1c424:	mov	r0, #0
   1c428:	cmn	lr, #1
   1c42c:	str	r0, [fp, #-36]	; 0xffffffdc
   1c430:	str	r0, [fp, #-40]	; 0xffffffd8
   1c434:	bne	1c448 <__assert_fail@plt+0xa9bc>
   1c438:	mov	r0, ip
   1c43c:	bl	118ac <strlen@plt>
   1c440:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c444:	mov	lr, r0
   1c448:	ldr	r0, [sp, #36]	; 0x24
   1c44c:	str	sl, [sp, #56]	; 0x38
   1c450:	str	lr, [sp, #84]	; 0x54
   1c454:	cmp	r0, #0
   1c458:	beq	1c670 <__assert_fail@plt+0xabe4>
   1c45c:	add	r0, ip, r7
   1c460:	mov	r4, #1
   1c464:	mov	r6, #0
   1c468:	sub	sl, fp, #40	; 0x28
   1c46c:	str	r0, [sp, #20]
   1c470:	str	r6, [sp, #64]	; 0x40
   1c474:	add	r6, r6, r7
   1c478:	sub	r0, fp, #44	; 0x2c
   1c47c:	mov	r3, sl
   1c480:	add	r1, ip, r6
   1c484:	sub	r2, lr, r6
   1c488:	bl	201c8 <__assert_fail@plt+0xe73c>
   1c48c:	cmn	r0, #2
   1c490:	beq	1c7cc <__assert_fail@plt+0xad40>
   1c494:	ldr	sl, [sp, #56]	; 0x38
   1c498:	cmn	r0, #1
   1c49c:	beq	1c7c0 <__assert_fail@plt+0xad34>
   1c4a0:	cmp	r0, #0
   1c4a4:	beq	1c7c4 <__assert_fail@plt+0xad38>
   1c4a8:	cmp	r0, #2
   1c4ac:	bcc	1c56c <__assert_fail@plt+0xaae0>
   1c4b0:	ldr	r1, [sp, #64]	; 0x40
   1c4b4:	ldr	r2, [sp, #20]
   1c4b8:	add	r1, r2, r1
   1c4bc:	mov	r2, #1
   1c4c0:	ldrb	r3, [r1, r2]
   1c4c4:	sub	r3, r3, #91	; 0x5b
   1c4c8:	cmp	r3, #33	; 0x21
   1c4cc:	bhi	1c560 <__assert_fail@plt+0xaad4>
   1c4d0:	add	r6, pc, #0
   1c4d4:	ldr	pc, [r6, r3, lsl #2]
   1c4d8:	andeq	ip, r1, r4, lsr #22
   1c4dc:	andeq	ip, r1, r4, lsr #22
   1c4e0:	andeq	ip, r1, r0, ror #10
   1c4e4:	andeq	ip, r1, r4, lsr #22
   1c4e8:	andeq	ip, r1, r0, ror #10
   1c4ec:	andeq	ip, r1, r4, lsr #22
   1c4f0:	andeq	ip, r1, r0, ror #10
   1c4f4:	andeq	ip, r1, r0, ror #10
   1c4f8:	andeq	ip, r1, r0, ror #10
   1c4fc:	andeq	ip, r1, r0, ror #10
   1c500:	andeq	ip, r1, r0, ror #10
   1c504:	andeq	ip, r1, r0, ror #10
   1c508:	andeq	ip, r1, r0, ror #10
   1c50c:	andeq	ip, r1, r0, ror #10
   1c510:	andeq	ip, r1, r0, ror #10
   1c514:	andeq	ip, r1, r0, ror #10
   1c518:	andeq	ip, r1, r0, ror #10
   1c51c:	andeq	ip, r1, r0, ror #10
   1c520:	andeq	ip, r1, r0, ror #10
   1c524:	andeq	ip, r1, r0, ror #10
   1c528:	andeq	ip, r1, r0, ror #10
   1c52c:	andeq	ip, r1, r0, ror #10
   1c530:	andeq	ip, r1, r0, ror #10
   1c534:	andeq	ip, r1, r0, ror #10
   1c538:	andeq	ip, r1, r0, ror #10
   1c53c:	andeq	ip, r1, r0, ror #10
   1c540:	andeq	ip, r1, r0, ror #10
   1c544:	andeq	ip, r1, r0, ror #10
   1c548:	andeq	ip, r1, r0, ror #10
   1c54c:	andeq	ip, r1, r0, ror #10
   1c550:	andeq	ip, r1, r0, ror #10
   1c554:	andeq	ip, r1, r0, ror #10
   1c558:	andeq	ip, r1, r0, ror #10
   1c55c:	andeq	ip, r1, r4, lsr #22
   1c560:	add	r2, r2, #1
   1c564:	cmp	r2, r0
   1c568:	bcc	1c4c0 <__assert_fail@plt+0xaa34>
   1c56c:	ldr	r6, [sp, #64]	; 0x40
   1c570:	add	r6, r0, r6
   1c574:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1c578:	bl	11774 <iswprint@plt>
   1c57c:	cmp	r0, #0
   1c580:	sub	sl, fp, #40	; 0x28
   1c584:	movwne	r0, #1
   1c588:	and	r4, r4, r0
   1c58c:	mov	r0, sl
   1c590:	bl	11714 <mbsinit@plt>
   1c594:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c598:	ldr	lr, [sp, #84]	; 0x54
   1c59c:	cmp	r0, #0
   1c5a0:	beq	1c470 <__assert_fail@plt+0xa9e4>
   1c5a4:	b	1c810 <__assert_fail@plt+0xad84>
   1c5a8:	ldr	r0, [sp, #24]
   1c5ac:	cmp	r0, #0
   1c5b0:	beq	1c658 <__assert_fail@plt+0xabcc>
   1c5b4:	add	r0, r7, #2
   1c5b8:	cmp	r0, lr
   1c5bc:	bcs	1c658 <__assert_fail@plt+0xabcc>
   1c5c0:	add	r1, ip, r7
   1c5c4:	ldrb	r1, [r1, #1]
   1c5c8:	cmp	r1, #63	; 0x3f
   1c5cc:	bne	1c658 <__assert_fail@plt+0xabcc>
   1c5d0:	ldrb	r5, [ip, r0]
   1c5d4:	sub	r1, r5, #33	; 0x21
   1c5d8:	cmp	r1, #29
   1c5dc:	bhi	1c658 <__assert_fail@plt+0xabcc>
   1c5e0:	movw	r3, #20929	; 0x51c1
   1c5e4:	mov	r2, #1
   1c5e8:	movt	r3, #14336	; 0x3800
   1c5ec:	tst	r3, r2, lsl r1
   1c5f0:	beq	1c658 <__assert_fail@plt+0xabcc>
   1c5f4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1c5f8:	tst	r1, #1
   1c5fc:	bne	1cc48 <__assert_fail@plt+0xb1bc>
   1c600:	cmp	r9, sl
   1c604:	mov	r7, r0
   1c608:	mov	r4, #0
   1c60c:	movcc	r1, #63	; 0x3f
   1c610:	strbcc	r1, [r6, r9]
   1c614:	add	r1, r9, #1
   1c618:	cmp	r1, sl
   1c61c:	movcc	r2, #34	; 0x22
   1c620:	strbcc	r2, [r6, r1]
   1c624:	add	r1, r9, #2
   1c628:	cmp	r1, sl
   1c62c:	movcc	r2, #34	; 0x22
   1c630:	strbcc	r2, [r6, r1]
   1c634:	add	r1, r9, #3
   1c638:	add	r9, r9, #4
   1c63c:	cmp	r1, sl
   1c640:	movcc	r2, #63	; 0x3f
   1c644:	strbcc	r2, [r6, r1]
   1c648:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c64c:	cmp	r0, #0
   1c650:	bne	1c048 <__assert_fail@plt+0xa5bc>
   1c654:	b	1c320 <__assert_fail@plt+0xa894>
   1c658:	mov	r5, #63	; 0x3f
   1c65c:	mov	r4, #0
   1c660:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c664:	cmp	r0, #0
   1c668:	bne	1c048 <__assert_fail@plt+0xa5bc>
   1c66c:	b	1c320 <__assert_fail@plt+0xa894>
   1c670:	mov	r4, #1
   1c674:	mov	r6, #0
   1c678:	sub	sl, fp, #40	; 0x28
   1c67c:	str	r6, [sp, #64]	; 0x40
   1c680:	add	r6, r6, r7
   1c684:	sub	r0, fp, #44	; 0x2c
   1c688:	mov	r3, sl
   1c68c:	add	r1, ip, r6
   1c690:	sub	r2, lr, r6
   1c694:	bl	201c8 <__assert_fail@plt+0xe73c>
   1c698:	cmn	r0, #2
   1c69c:	beq	1c7cc <__assert_fail@plt+0xad40>
   1c6a0:	cmn	r0, #1
   1c6a4:	beq	1c7c0 <__assert_fail@plt+0xad34>
   1c6a8:	ldr	r6, [sp, #64]	; 0x40
   1c6ac:	cmp	r0, #0
   1c6b0:	beq	1c80c <__assert_fail@plt+0xad80>
   1c6b4:	add	r6, r0, r6
   1c6b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1c6bc:	bl	11774 <iswprint@plt>
   1c6c0:	cmp	r0, #0
   1c6c4:	sub	sl, fp, #40	; 0x28
   1c6c8:	movwne	r0, #1
   1c6cc:	and	r4, r4, r0
   1c6d0:	mov	r0, sl
   1c6d4:	bl	11714 <mbsinit@plt>
   1c6d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c6dc:	ldr	lr, [sp, #84]	; 0x54
   1c6e0:	cmp	r0, #0
   1c6e4:	beq	1c67c <__assert_fail@plt+0xabf0>
   1c6e8:	b	1c810 <__assert_fail@plt+0xad84>
   1c6ec:	cmp	r9, sl
   1c6f0:	mov	r2, #1
   1c6f4:	movcc	r0, #39	; 0x27
   1c6f8:	strbcc	r0, [r6, r9]
   1c6fc:	add	r0, r9, #1
   1c700:	cmp	r0, sl
   1c704:	movcc	r1, #36	; 0x24
   1c708:	strbcc	r1, [r6, r0]
   1c70c:	add	r0, r9, #2
   1c710:	cmp	r0, sl
   1c714:	movcc	r1, #39	; 0x27
   1c718:	strbcc	r1, [r6, r0]
   1c71c:	add	r0, r9, #3
   1c720:	cmp	r0, sl
   1c724:	add	r9, r0, #1
   1c728:	str	r2, [fp, #-48]	; 0xffffffd0
   1c72c:	movcc	r1, #92	; 0x5c
   1c730:	strbcc	r1, [r6, r0]
   1c734:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1c738:	cmp	r1, #2
   1c73c:	beq	1c79c <__assert_fail@plt+0xad10>
   1c740:	add	r1, r7, #1
   1c744:	mov	r4, #0
   1c748:	mov	r8, #1
   1c74c:	mov	r5, #48	; 0x30
   1c750:	cmp	r1, lr
   1c754:	bcs	1c03c <__assert_fail@plt+0xa5b0>
   1c758:	ldrb	r1, [ip, r1]
   1c75c:	sub	r1, r1, #48	; 0x30
   1c760:	uxtb	r1, r1
   1c764:	cmp	r1, #9
   1c768:	bhi	1c03c <__assert_fail@plt+0xa5b0>
   1c76c:	cmp	r9, sl
   1c770:	movcc	r1, #48	; 0x30
   1c774:	strbcc	r1, [r6, r9]
   1c778:	add	r1, r0, #2
   1c77c:	add	r9, r0, #3
   1c780:	cmp	r1, sl
   1c784:	movcc	r2, #48	; 0x30
   1c788:	strbcc	r2, [r6, r1]
   1c78c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c790:	cmp	r0, #0
   1c794:	bne	1c048 <__assert_fail@plt+0xa5bc>
   1c798:	b	1c320 <__assert_fail@plt+0xa894>
   1c79c:	mov	r0, #48	; 0x30
   1c7a0:	mov	r8, #1
   1c7a4:	mov	r4, #0
   1c7a8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1c7ac:	cmp	r1, #0
   1c7b0:	bne	1c35c <__assert_fail@plt+0xa8d0>
   1c7b4:	cmp	r8, #0
   1c7b8:	beq	1c2d8 <__assert_fail@plt+0xa84c>
   1c7bc:	b	1c0c8 <__assert_fail@plt+0xa63c>
   1c7c0:	mov	r4, #0
   1c7c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c7c8:	b	1c804 <__assert_fail@plt+0xad78>
   1c7cc:	ldr	r1, [sp, #84]	; 0x54
   1c7d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c7d4:	mov	r4, #0
   1c7d8:	cmp	r6, r1
   1c7dc:	bcs	1c804 <__assert_fail@plt+0xad78>
   1c7e0:	ldrb	r0, [ip, r6]
   1c7e4:	cmp	r0, #0
   1c7e8:	beq	1c804 <__assert_fail@plt+0xad78>
   1c7ec:	ldr	r0, [sp, #64]	; 0x40
   1c7f0:	add	r0, r0, #1
   1c7f4:	add	r6, r0, r7
   1c7f8:	str	r0, [sp, #64]	; 0x40
   1c7fc:	cmp	r6, r1
   1c800:	bcc	1c7e0 <__assert_fail@plt+0xad54>
   1c804:	ldr	r6, [sp, #64]	; 0x40
   1c808:	b	1c810 <__assert_fail@plt+0xad84>
   1c80c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c810:	mov	r1, r6
   1c814:	ldr	r6, [sp, #76]	; 0x4c
   1c818:	ldr	sl, [sp, #56]	; 0x38
   1c81c:	ldr	r0, [sp, #44]	; 0x2c
   1c820:	cmp	r1, #1
   1c824:	orr	r2, r4, r0
   1c828:	mov	r0, r1
   1c82c:	bhi	1c84c <__assert_fail@plt+0xadc0>
   1c830:	tst	r2, #1
   1c834:	beq	1c84c <__assert_fail@plt+0xadc0>
   1c838:	ldr	lr, [sp, #84]	; 0x54
   1c83c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c840:	cmp	r0, #0
   1c844:	bne	1c048 <__assert_fail@plt+0xa5bc>
   1c848:	b	1c320 <__assert_fail@plt+0xa894>
   1c84c:	str	r2, [sp, #64]	; 0x40
   1c850:	add	r0, r0, r7
   1c854:	add	r1, r7, #1
   1c858:	ldr	lr, [sp, #84]	; 0x54
   1c85c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1c860:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c864:	mov	r3, #0
   1c868:	str	r0, [sp, #56]	; 0x38
   1c86c:	ldr	r0, [sp, #64]	; 0x40
   1c870:	tst	r0, #1
   1c874:	bne	1c95c <__assert_fail@plt+0xaed0>
   1c878:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c87c:	tst	r0, #1
   1c880:	bne	1cafc <__assert_fail@plt+0xb070>
   1c884:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1c888:	cmp	r7, #2
   1c88c:	movwne	r3, #1
   1c890:	orr	r3, r3, r2
   1c894:	tst	r3, #1
   1c898:	bne	1c8d0 <__assert_fail@plt+0xae44>
   1c89c:	cmp	r9, sl
   1c8a0:	add	r3, r9, #1
   1c8a4:	movcc	r2, #39	; 0x27
   1c8a8:	strbcc	r2, [r6, r9]
   1c8ac:	cmp	r3, sl
   1c8b0:	movcc	r2, #36	; 0x24
   1c8b4:	strbcc	r2, [r6, r3]
   1c8b8:	add	r3, r9, #2
   1c8bc:	add	r9, r9, #3
   1c8c0:	cmp	r3, sl
   1c8c4:	movcc	r2, #39	; 0x27
   1c8c8:	strbcc	r2, [r6, r3]
   1c8cc:	mov	r2, #1
   1c8d0:	cmp	r9, sl
   1c8d4:	mov	r0, r2
   1c8d8:	movcc	r3, #92	; 0x5c
   1c8dc:	strbcc	r3, [r6, r9]
   1c8e0:	add	r3, r9, #1
   1c8e4:	cmp	r3, sl
   1c8e8:	andcc	r7, r5, #192	; 0xc0
   1c8ec:	movcc	r2, #48	; 0x30
   1c8f0:	orrcc	r7, r2, r7, lsr #6
   1c8f4:	strbcc	r7, [r6, r3]
   1c8f8:	add	r3, r9, #2
   1c8fc:	add	r9, r9, #3
   1c900:	cmp	r3, sl
   1c904:	lsrcc	r7, r5, #3
   1c908:	movcc	r2, #6
   1c90c:	bficc	r7, r2, #3, #29
   1c910:	mov	r2, #6
   1c914:	strbcc	r7, [r6, r3]
   1c918:	bfi	r5, r2, #3, #29
   1c91c:	mov	r3, #1
   1c920:	mov	r2, r0
   1c924:	ldr	r0, [sp, #56]	; 0x38
   1c928:	and	r8, r3, #1
   1c92c:	cmp	r0, r1
   1c930:	bhi	1c990 <__assert_fail@plt+0xaf04>
   1c934:	b	1c9d0 <__assert_fail@plt+0xaf44>
   1c938:	cmp	r9, sl
   1c93c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1c940:	strbcc	r5, [r6, r9]
   1c944:	add	r9, r9, #1
   1c948:	ldrb	r5, [ip, r1]
   1c94c:	add	r1, r1, #1
   1c950:	ldr	r0, [sp, #64]	; 0x40
   1c954:	tst	r0, #1
   1c958:	beq	1c878 <__assert_fail@plt+0xadec>
   1c95c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   1c960:	tst	r7, #1
   1c964:	beq	1c978 <__assert_fail@plt+0xaeec>
   1c968:	cmp	r9, sl
   1c96c:	movcc	r7, #92	; 0x5c
   1c970:	strbcc	r7, [r6, r9]
   1c974:	add	r9, r9, #1
   1c978:	mov	r7, #0
   1c97c:	str	r7, [fp, #-56]	; 0xffffffc8
   1c980:	ldr	r0, [sp, #56]	; 0x38
   1c984:	and	r8, r3, #1
   1c988:	cmp	r0, r1
   1c98c:	bls	1c9d0 <__assert_fail@plt+0xaf44>
   1c990:	cmp	r8, #0
   1c994:	mvn	r7, r2
   1c998:	movwne	r8, #1
   1c99c:	orr	r7, r7, r8
   1c9a0:	tst	r7, #1
   1c9a4:	bne	1c938 <__assert_fail@plt+0xaeac>
   1c9a8:	cmp	r9, sl
   1c9ac:	movcc	r7, #39	; 0x27
   1c9b0:	strbcc	r7, [r6, r9]
   1c9b4:	add	r7, r9, #1
   1c9b8:	add	r9, r9, #2
   1c9bc:	cmp	r7, sl
   1c9c0:	movcc	r2, #39	; 0x27
   1c9c4:	strbcc	r2, [r6, r7]
   1c9c8:	mov	r2, #0
   1c9cc:	b	1c938 <__assert_fail@plt+0xaeac>
   1c9d0:	cmp	r8, #0
   1c9d4:	sub	r7, r1, #1
   1c9d8:	mov	r0, r5
   1c9dc:	str	r2, [fp, #-48]	; 0xffffffd0
   1c9e0:	movwne	r8, #1
   1c9e4:	cmp	r8, #0
   1c9e8:	beq	1c2d8 <__assert_fail@plt+0xa84c>
   1c9ec:	b	1c0c8 <__assert_fail@plt+0xa63c>
   1c9f0:	mov	lr, r7
   1c9f4:	b	1c9fc <__assert_fail@plt+0xaf70>
   1c9f8:	mvn	lr, #0
   1c9fc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1ca00:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1ca04:	eor	r0, r7, #2
   1ca08:	orr	r0, r0, r9
   1ca0c:	clz	r0, r0
   1ca10:	lsr	r0, r0, #5
   1ca14:	tst	r1, r0
   1ca18:	bne	1cb18 <__assert_fail@plt+0xb08c>
   1ca1c:	mov	r0, r1
   1ca20:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1ca24:	cmp	r7, #2
   1ca28:	movwne	r1, #1
   1ca2c:	orr	r0, r0, r1
   1ca30:	tst	r0, #1
   1ca34:	ldreq	r0, [sp, #52]	; 0x34
   1ca38:	streq	lr, [sp, #84]	; 0x54
   1ca3c:	eoreq	r0, r0, #1
   1ca40:	tsteq	r0, #1
   1ca44:	bne	1cbdc <__assert_fail@plt+0xb150>
   1ca48:	tst	r4, #1
   1ca4c:	bne	1cb98 <__assert_fail@plt+0xb10c>
   1ca50:	ldr	r6, [sp, #48]	; 0x30
   1ca54:	mov	r8, #0
   1ca58:	cmp	r6, #0
   1ca5c:	beq	1cbd4 <__assert_fail@plt+0xb148>
   1ca60:	ldr	r0, [sp, #80]	; 0x50
   1ca64:	mov	r1, #0
   1ca68:	cmp	sl, #0
   1ca6c:	mov	r4, #0
   1ca70:	str	r1, [fp, #-72]	; 0xffffffb8
   1ca74:	beq	1b968 <__assert_fail@plt+0x9edc>
   1ca78:	b	1cbdc <__assert_fail@plt+0xb150>
   1ca7c:	ldrb	r1, [r0, #3]
   1ca80:	cmp	r1, #56	; 0x38
   1ca84:	ldrbeq	r1, [r0, #4]
   1ca88:	cmpeq	r1, #48	; 0x30
   1ca8c:	bne	1bb60 <__assert_fail@plt+0xa0d4>
   1ca90:	ldrb	r1, [r0, #5]
   1ca94:	cmp	r1, #51	; 0x33
   1ca98:	ldrbeq	r1, [r0, #6]
   1ca9c:	cmpeq	r1, #48	; 0x30
   1caa0:	bne	1bb60 <__assert_fail@plt+0xa0d4>
   1caa4:	ldrb	r0, [r0, #7]
   1caa8:	cmp	r0, #0
   1caac:	movw	r0, #9553	; 0x2551
   1cab0:	movt	r0, #2
   1cab4:	str	r0, [sp, #68]	; 0x44
   1cab8:	bne	1bb60 <__assert_fail@plt+0xa0d4>
   1cabc:	b	1bb7c <__assert_fail@plt+0xa0f0>
   1cac0:	ldrb	r1, [r0, #4]
   1cac4:	cmp	r1, #48	; 0x30
   1cac8:	ldrbeq	r1, [r0, #5]
   1cacc:	cmpeq	r1, #51	; 0x33
   1cad0:	bne	1bc44 <__assert_fail@plt+0xa1b8>
   1cad4:	ldrb	r1, [r0, #6]
   1cad8:	cmp	r1, #48	; 0x30
   1cadc:	ldrbeq	r0, [r0, #7]
   1cae0:	cmpeq	r0, #0
   1cae4:	bne	1bc44 <__assert_fail@plt+0xa1b8>
   1cae8:	movw	r0, #9557	; 0x2555
   1caec:	movt	r0, #2
   1caf0:	str	r0, [sp, #72]	; 0x48
   1caf4:	b	1bc64 <__assert_fail@plt+0xa1d8>
   1caf8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1cafc:	ldr	r2, [sp, #80]	; 0x50
   1cb00:	b	1cb38 <__assert_fail@plt+0xb0ac>
   1cb04:	ldr	ip, [fp, #-84]	; 0xffffffac
   1cb08:	mov	r2, #1
   1cb0c:	mov	lr, r4
   1cb10:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1cb14:	b	1cb38 <__assert_fail@plt+0xb0ac>
   1cb18:	ldr	r2, [sp, #80]	; 0x50
   1cb1c:	mov	r7, #2
   1cb20:	b	1cb38 <__assert_fail@plt+0xb0ac>
   1cb24:	ldr	r6, [sp, #76]	; 0x4c
   1cb28:	ldr	ip, [fp, #-84]	; 0xffffffac
   1cb2c:	ldr	lr, [sp, #84]	; 0x54
   1cb30:	ldr	r2, [sp, #80]	; 0x50
   1cb34:	mov	r7, #2
   1cb38:	mov	r0, #0
   1cb3c:	ldr	r1, [fp, #12]
   1cb40:	tst	r2, #1
   1cb44:	mov	r2, r7
   1cb48:	mov	r3, lr
   1cb4c:	str	r0, [sp, #8]
   1cb50:	ldr	r0, [sp, #68]	; 0x44
   1cb54:	movwne	r2, #4
   1cb58:	cmp	r7, #2
   1cb5c:	movne	r2, r7
   1cb60:	str	r2, [sp]
   1cb64:	mov	r2, ip
   1cb68:	bic	r1, r1, #2
   1cb6c:	str	r0, [sp, #12]
   1cb70:	ldr	r0, [sp, #72]	; 0x48
   1cb74:	str	r1, [sp, #4]
   1cb78:	mov	r1, sl
   1cb7c:	str	r0, [sp, #16]
   1cb80:	mov	r0, r6
   1cb84:	bl	1b8ec <__assert_fail@plt+0x9e60>
   1cb88:	mov	r9, r0
   1cb8c:	mov	r0, r9
   1cb90:	sub	sp, fp, #28
   1cb94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb98:	mov	r0, #5
   1cb9c:	ldr	r1, [sp, #48]	; 0x30
   1cba0:	ldr	r2, [fp, #-84]	; 0xffffffac
   1cba4:	ldr	r3, [sp, #84]	; 0x54
   1cba8:	str	r0, [sp]
   1cbac:	ldr	r0, [fp, #12]
   1cbb0:	str	r0, [sp, #4]
   1cbb4:	ldr	r0, [fp, #16]
   1cbb8:	str	r0, [sp, #8]
   1cbbc:	ldr	r0, [sp, #68]	; 0x44
   1cbc0:	str	r0, [sp, #12]
   1cbc4:	ldr	r0, [sp, #72]	; 0x48
   1cbc8:	str	r0, [sp, #16]
   1cbcc:	ldr	r0, [sp, #76]	; 0x4c
   1cbd0:	b	1cb84 <__assert_fail@plt+0xb0f8>
   1cbd4:	mov	r0, #0
   1cbd8:	str	r0, [fp, #-72]	; 0xffffffb8
   1cbdc:	ldr	r1, [sp, #92]	; 0x5c
   1cbe0:	cmp	r1, #0
   1cbe4:	beq	1cc24 <__assert_fail@plt+0xb198>
   1cbe8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1cbec:	ldr	r2, [sp, #76]	; 0x4c
   1cbf0:	tst	r0, #1
   1cbf4:	bne	1cc28 <__assert_fail@plt+0xb19c>
   1cbf8:	ldrb	r0, [r1]
   1cbfc:	cmp	r0, #0
   1cc00:	beq	1cc28 <__assert_fail@plt+0xb19c>
   1cc04:	add	r1, r1, #1
   1cc08:	cmp	r9, sl
   1cc0c:	strbcc	r0, [r2, r9]
   1cc10:	add	r9, r9, #1
   1cc14:	ldrb	r0, [r1], #1
   1cc18:	cmp	r0, #0
   1cc1c:	bne	1cc08 <__assert_fail@plt+0xb17c>
   1cc20:	b	1cc28 <__assert_fail@plt+0xb19c>
   1cc24:	ldr	r2, [sp, #76]	; 0x4c
   1cc28:	cmp	r9, sl
   1cc2c:	movcc	r0, #0
   1cc30:	strbcc	r0, [r2, r9]
   1cc34:	mov	r0, r9
   1cc38:	sub	sp, fp, #28
   1cc3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc40:	mov	r2, #1
   1cc44:	b	1cb10 <__assert_fail@plt+0xb084>
   1cc48:	ldr	r2, [sp, #80]	; 0x50
   1cc4c:	mov	r7, #5
   1cc50:	b	1cb38 <__assert_fail@plt+0xb0ac>
   1cc54:	bl	11a5c <abort@plt>
   1cc58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc5c:	add	fp, sp, #28
   1cc60:	sub	sp, sp, #28
   1cc64:	movw	r5, #12920	; 0x3278
   1cc68:	cmp	r2, #0
   1cc6c:	mov	r4, r1
   1cc70:	mov	r7, r0
   1cc74:	str	r0, [sp, #20]
   1cc78:	movt	r5, #3
   1cc7c:	movne	r5, r2
   1cc80:	bl	118e8 <__errno_location@plt>
   1cc84:	mov	sl, r0
   1cc88:	ldm	r5, {r0, r1}
   1cc8c:	ldr	r2, [r5, #40]	; 0x28
   1cc90:	ldr	r3, [r5, #44]	; 0x2c
   1cc94:	add	r9, r5, #8
   1cc98:	ldr	r6, [sl]
   1cc9c:	orr	r8, r1, #1
   1cca0:	mov	r1, #0
   1cca4:	str	r6, [sp, #24]
   1cca8:	stm	sp, {r0, r8, r9}
   1ccac:	str	r2, [sp, #12]
   1ccb0:	str	r3, [sp, #16]
   1ccb4:	mov	r0, #0
   1ccb8:	mov	r2, r7
   1ccbc:	mov	r3, r4
   1ccc0:	mov	r6, r4
   1ccc4:	bl	1b8ec <__assert_fail@plt+0x9e60>
   1ccc8:	add	r7, r0, #1
   1cccc:	mov	r0, r7
   1ccd0:	bl	1e84c <__assert_fail@plt+0xcdc0>
   1ccd4:	mov	r4, r0
   1ccd8:	ldr	r0, [r5]
   1ccdc:	ldr	r2, [r5, #44]	; 0x2c
   1cce0:	ldr	r1, [r5, #40]	; 0x28
   1cce4:	mov	r3, r6
   1cce8:	stm	sp, {r0, r8, r9}
   1ccec:	str	r2, [sp, #16]
   1ccf0:	str	r1, [sp, #12]
   1ccf4:	mov	r0, r4
   1ccf8:	mov	r1, r7
   1ccfc:	ldr	r2, [sp, #20]
   1cd00:	bl	1b8ec <__assert_fail@plt+0x9e60>
   1cd04:	ldr	r0, [sp, #24]
   1cd08:	str	r0, [sl]
   1cd0c:	mov	r0, r4
   1cd10:	sub	sp, fp, #28
   1cd14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd1c:	add	fp, sp, #28
   1cd20:	sub	sp, sp, #36	; 0x24
   1cd24:	movw	r8, #12920	; 0x3278
   1cd28:	cmp	r3, #0
   1cd2c:	mov	r4, r2
   1cd30:	str	r2, [sp, #24]
   1cd34:	mov	r5, r1
   1cd38:	mov	r6, r0
   1cd3c:	str	r0, [sp, #20]
   1cd40:	movt	r8, #3
   1cd44:	movne	r8, r3
   1cd48:	bl	118e8 <__errno_location@plt>
   1cd4c:	str	r0, [sp, #28]
   1cd50:	cmp	r4, #0
   1cd54:	add	sl, r8, #8
   1cd58:	ldm	r8, {r3, r9}
   1cd5c:	ldr	r7, [r0]
   1cd60:	ldr	r1, [r8, #40]	; 0x28
   1cd64:	ldr	r2, [r8, #44]	; 0x2c
   1cd68:	mov	r0, #0
   1cd6c:	orreq	r9, r9, #1
   1cd70:	str	r7, [sp, #32]
   1cd74:	mov	r7, r5
   1cd78:	stm	sp, {r3, r9, sl}
   1cd7c:	str	r1, [sp, #12]
   1cd80:	str	r2, [sp, #16]
   1cd84:	mov	r1, #0
   1cd88:	mov	r2, r6
   1cd8c:	mov	r3, r5
   1cd90:	bl	1b8ec <__assert_fail@plt+0x9e60>
   1cd94:	add	r4, r0, #1
   1cd98:	mov	r5, r0
   1cd9c:	mov	r0, r4
   1cda0:	bl	1e84c <__assert_fail@plt+0xcdc0>
   1cda4:	mov	r6, r0
   1cda8:	ldr	r0, [r8]
   1cdac:	ldr	r2, [r8, #44]	; 0x2c
   1cdb0:	ldr	r1, [r8, #40]	; 0x28
   1cdb4:	mov	r3, r7
   1cdb8:	stm	sp, {r0, r9, sl}
   1cdbc:	str	r2, [sp, #16]
   1cdc0:	str	r1, [sp, #12]
   1cdc4:	mov	r0, r6
   1cdc8:	mov	r1, r4
   1cdcc:	ldr	r2, [sp, #20]
   1cdd0:	bl	1b8ec <__assert_fail@plt+0x9e60>
   1cdd4:	ldr	r0, [sp, #24]
   1cdd8:	ldr	r1, [sp, #32]
   1cddc:	ldr	r2, [sp, #28]
   1cde0:	cmp	r0, #0
   1cde4:	str	r1, [r2]
   1cde8:	strne	r5, [r0]
   1cdec:	mov	r0, r6
   1cdf0:	sub	sp, fp, #28
   1cdf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdf8:	push	{r4, r5, r6, r7, fp, lr}
   1cdfc:	add	fp, sp, #16
   1ce00:	movw	r4, #12736	; 0x31c0
   1ce04:	movt	r4, #3
   1ce08:	ldrd	r6, [r4]
   1ce0c:	cmp	r7, #2
   1ce10:	blt	1ce3c <__assert_fail@plt+0xb3b0>
   1ce14:	add	r5, r6, #12
   1ce18:	mov	r7, #0
   1ce1c:	ldr	r0, [r5, r7, lsl #3]
   1ce20:	bl	18ea0 <__assert_fail@plt+0x7414>
   1ce24:	ldr	r1, [r4, #4]
   1ce28:	add	r2, r7, #2
   1ce2c:	add	r0, r7, #1
   1ce30:	mov	r7, r0
   1ce34:	cmp	r2, r1
   1ce38:	blt	1ce1c <__assert_fail@plt+0xb390>
   1ce3c:	ldr	r0, [r6, #4]
   1ce40:	movw	r5, #12968	; 0x32a8
   1ce44:	movt	r5, #3
   1ce48:	cmp	r0, r5
   1ce4c:	beq	1ce60 <__assert_fail@plt+0xb3d4>
   1ce50:	bl	18ea0 <__assert_fail@plt+0x7414>
   1ce54:	mov	r0, #256	; 0x100
   1ce58:	str	r0, [r4, #8]
   1ce5c:	str	r5, [r4, #12]
   1ce60:	add	r5, r4, #8
   1ce64:	cmp	r6, r5
   1ce68:	beq	1ce78 <__assert_fail@plt+0xb3ec>
   1ce6c:	mov	r0, r6
   1ce70:	bl	18ea0 <__assert_fail@plt+0x7414>
   1ce74:	str	r5, [r4]
   1ce78:	mov	r0, #1
   1ce7c:	str	r0, [r4, #4]
   1ce80:	pop	{r4, r5, r6, r7, fp, pc}
   1ce84:	movw	r3, #12920	; 0x3278
   1ce88:	mvn	r2, #0
   1ce8c:	movt	r3, #3
   1ce90:	b	1ce94 <__assert_fail@plt+0xb408>
   1ce94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce98:	add	fp, sp, #28
   1ce9c:	sub	sp, sp, #44	; 0x2c
   1cea0:	mov	r7, r3
   1cea4:	str	r2, [sp, #36]	; 0x24
   1cea8:	str	r1, [sp, #32]
   1ceac:	mov	r5, r0
   1ceb0:	bl	118e8 <__errno_location@plt>
   1ceb4:	cmp	r5, #0
   1ceb8:	blt	1d01c <__assert_fail@plt+0xb590>
   1cebc:	cmn	r5, #-2147483647	; 0x80000001
   1cec0:	beq	1d01c <__assert_fail@plt+0xb590>
   1cec4:	movw	r8, #12736	; 0x31c0
   1cec8:	mov	r4, r0
   1cecc:	movt	r8, #3
   1ced0:	ldr	r6, [r8]
   1ced4:	ldr	r1, [r8, #4]
   1ced8:	ldr	r0, [r0]
   1cedc:	str	r4, [sp, #28]
   1cee0:	cmp	r1, r5
   1cee4:	str	r0, [sp, #24]
   1cee8:	ble	1cef4 <__assert_fail@plt+0xb468>
   1ceec:	mov	sl, r6
   1cef0:	b	1cf58 <__assert_fail@plt+0xb4cc>
   1cef4:	mov	r0, #8
   1cef8:	add	r9, r8, #8
   1cefc:	add	r2, r5, #1
   1cf00:	str	r1, [fp, #-32]	; 0xffffffe0
   1cf04:	mvn	r3, #-2147483648	; 0x80000000
   1cf08:	str	r0, [sp]
   1cf0c:	subs	r0, r6, r9
   1cf10:	sub	r2, r2, r1
   1cf14:	sub	r1, fp, #32
   1cf18:	movne	r0, r6
   1cf1c:	bl	1ea4c <__assert_fail@plt+0xcfc0>
   1cf20:	str	r0, [r8]
   1cf24:	cmp	r6, r9
   1cf28:	mov	sl, r0
   1cf2c:	ldrdeq	r0, [r8, #8]
   1cf30:	stmeq	sl, {r0, r1}
   1cf34:	ldr	r1, [r8, #4]
   1cf38:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1cf3c:	add	r0, sl, r1, lsl #3
   1cf40:	sub	r1, r2, r1
   1cf44:	lsl	r2, r1, #3
   1cf48:	mov	r1, #0
   1cf4c:	bl	11918 <memset@plt>
   1cf50:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1cf54:	str	r0, [r8, #4]
   1cf58:	mov	r9, sl
   1cf5c:	ldr	r6, [r9, r5, lsl #3]!
   1cf60:	ldr	r4, [r9, #4]!
   1cf64:	ldm	r7, {r0, r1}
   1cf68:	ldr	r2, [r7, #40]	; 0x28
   1cf6c:	ldr	r3, [r7, #44]	; 0x2c
   1cf70:	orr	r8, r1, #1
   1cf74:	add	r1, r7, #8
   1cf78:	stm	sp, {r0, r8}
   1cf7c:	add	r0, sp, #8
   1cf80:	str	r1, [sp, #20]
   1cf84:	stm	r0, {r1, r2, r3}
   1cf88:	mov	r0, r4
   1cf8c:	mov	r1, r6
   1cf90:	ldr	r2, [sp, #32]
   1cf94:	ldr	r3, [sp, #36]	; 0x24
   1cf98:	bl	1b8ec <__assert_fail@plt+0x9e60>
   1cf9c:	cmp	r6, r0
   1cfa0:	bhi	1d004 <__assert_fail@plt+0xb578>
   1cfa4:	add	r6, r0, #1
   1cfa8:	movw	r0, #12968	; 0x32a8
   1cfac:	movt	r0, #3
   1cfb0:	str	r6, [sl, r5, lsl #3]
   1cfb4:	cmp	r4, r0
   1cfb8:	beq	1cfc4 <__assert_fail@plt+0xb538>
   1cfbc:	mov	r0, r4
   1cfc0:	bl	18ea0 <__assert_fail@plt+0x7414>
   1cfc4:	mov	r0, r6
   1cfc8:	bl	1e84c <__assert_fail@plt+0xcdc0>
   1cfcc:	str	r0, [r9]
   1cfd0:	mov	r4, r0
   1cfd4:	add	r3, sp, #8
   1cfd8:	ldr	r0, [r7]
   1cfdc:	ldr	r1, [r7, #40]	; 0x28
   1cfe0:	ldr	r2, [r7, #44]	; 0x2c
   1cfe4:	stm	sp, {r0, r8}
   1cfe8:	ldr	r0, [sp, #20]
   1cfec:	stm	r3, {r0, r1, r2}
   1cff0:	mov	r0, r4
   1cff4:	mov	r1, r6
   1cff8:	ldr	r2, [sp, #32]
   1cffc:	ldr	r3, [sp, #36]	; 0x24
   1d000:	bl	1b8ec <__assert_fail@plt+0x9e60>
   1d004:	ldr	r1, [sp, #24]
   1d008:	ldr	r0, [sp, #28]
   1d00c:	str	r1, [r0]
   1d010:	mov	r0, r4
   1d014:	sub	sp, fp, #28
   1d018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d01c:	bl	11a5c <abort@plt>
   1d020:	movw	r3, #12920	; 0x3278
   1d024:	movt	r3, #3
   1d028:	b	1ce94 <__assert_fail@plt+0xb408>
   1d02c:	movw	r3, #12920	; 0x3278
   1d030:	mov	r1, r0
   1d034:	mov	r0, #0
   1d038:	mvn	r2, #0
   1d03c:	movt	r3, #3
   1d040:	b	1ce94 <__assert_fail@plt+0xb408>
   1d044:	movw	r3, #12920	; 0x3278
   1d048:	mov	r2, r1
   1d04c:	mov	r1, r0
   1d050:	mov	r0, #0
   1d054:	movt	r3, #3
   1d058:	b	1ce94 <__assert_fail@plt+0xb408>
   1d05c:	push	{fp, lr}
   1d060:	mov	fp, sp
   1d064:	sub	sp, sp, #48	; 0x30
   1d068:	vmov.i32	q8, #0	; 0x00000000
   1d06c:	mov	ip, #32
   1d070:	mov	r3, sp
   1d074:	mov	lr, r2
   1d078:	cmp	r1, #10
   1d07c:	add	r2, r3, #16
   1d080:	vst1.64	{d16-d17}, [r3], ip
   1d084:	vst1.64	{d16-d17}, [r3]
   1d088:	vst1.64	{d16-d17}, [r2]
   1d08c:	beq	1d0ac <__assert_fail@plt+0xb620>
   1d090:	str	r1, [sp]
   1d094:	mov	r3, sp
   1d098:	mov	r1, lr
   1d09c:	mvn	r2, #0
   1d0a0:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d0a4:	mov	sp, fp
   1d0a8:	pop	{fp, pc}
   1d0ac:	bl	11a5c <abort@plt>
   1d0b0:	push	{r4, sl, fp, lr}
   1d0b4:	add	fp, sp, #8
   1d0b8:	sub	sp, sp, #48	; 0x30
   1d0bc:	mov	ip, r3
   1d0c0:	mov	r3, sp
   1d0c4:	vmov.i32	q8, #0	; 0x00000000
   1d0c8:	mov	lr, #32
   1d0cc:	cmp	r1, #10
   1d0d0:	add	r4, r3, #16
   1d0d4:	vst1.64	{d16-d17}, [r3], lr
   1d0d8:	vst1.64	{d16-d17}, [r3]
   1d0dc:	vst1.64	{d16-d17}, [r4]
   1d0e0:	beq	1d100 <__assert_fail@plt+0xb674>
   1d0e4:	str	r1, [sp]
   1d0e8:	mov	r1, r2
   1d0ec:	mov	r3, sp
   1d0f0:	mov	r2, ip
   1d0f4:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d0f8:	sub	sp, fp, #8
   1d0fc:	pop	{r4, sl, fp, pc}
   1d100:	bl	11a5c <abort@plt>
   1d104:	push	{fp, lr}
   1d108:	mov	fp, sp
   1d10c:	sub	sp, sp, #48	; 0x30
   1d110:	mov	r3, sp
   1d114:	vmov.i32	q8, #0	; 0x00000000
   1d118:	mov	ip, #32
   1d11c:	cmp	r0, #10
   1d120:	add	r2, r3, #16
   1d124:	vst1.64	{d16-d17}, [r3], ip
   1d128:	vst1.64	{d16-d17}, [r3]
   1d12c:	vst1.64	{d16-d17}, [r2]
   1d130:	beq	1d150 <__assert_fail@plt+0xb6c4>
   1d134:	str	r0, [sp]
   1d138:	mov	r3, sp
   1d13c:	mov	r0, #0
   1d140:	mvn	r2, #0
   1d144:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d148:	mov	sp, fp
   1d14c:	pop	{fp, pc}
   1d150:	bl	11a5c <abort@plt>
   1d154:	push	{fp, lr}
   1d158:	mov	fp, sp
   1d15c:	sub	sp, sp, #48	; 0x30
   1d160:	mov	r3, sp
   1d164:	vmov.i32	q8, #0	; 0x00000000
   1d168:	mov	ip, #32
   1d16c:	cmp	r0, #10
   1d170:	add	lr, r3, #16
   1d174:	vst1.64	{d16-d17}, [r3], ip
   1d178:	vst1.64	{d16-d17}, [r3]
   1d17c:	vst1.64	{d16-d17}, [lr]
   1d180:	beq	1d19c <__assert_fail@plt+0xb710>
   1d184:	str	r0, [sp]
   1d188:	mov	r3, sp
   1d18c:	mov	r0, #0
   1d190:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d194:	mov	sp, fp
   1d198:	pop	{fp, pc}
   1d19c:	bl	11a5c <abort@plt>
   1d1a0:	push	{r4, sl, fp, lr}
   1d1a4:	add	fp, sp, #8
   1d1a8:	sub	sp, sp, #48	; 0x30
   1d1ac:	mov	lr, r0
   1d1b0:	movw	r0, #12920	; 0x3278
   1d1b4:	mov	r3, #32
   1d1b8:	mov	ip, r1
   1d1bc:	mov	r4, #1
   1d1c0:	movt	r0, #3
   1d1c4:	add	r1, r0, #16
   1d1c8:	vld1.64	{d16-d17}, [r0], r3
   1d1cc:	mov	r3, sp
   1d1d0:	vld1.64	{d18-d19}, [r1]
   1d1d4:	add	r1, r3, #16
   1d1d8:	vld1.64	{d20-d21}, [r0]
   1d1dc:	add	r0, r3, #32
   1d1e0:	vst1.64	{d18-d19}, [r1]
   1d1e4:	mov	r1, r3
   1d1e8:	vst1.64	{d20-d21}, [r0]
   1d1ec:	mov	r0, #28
   1d1f0:	and	r0, r0, r2, lsr #3
   1d1f4:	and	r2, r2, #31
   1d1f8:	vst1.64	{d16-d17}, [r1], r0
   1d1fc:	ldr	r0, [r1, #8]
   1d200:	bic	r4, r4, r0, lsr r2
   1d204:	eor	r0, r0, r4, lsl r2
   1d208:	mov	r2, ip
   1d20c:	str	r0, [r1, #8]
   1d210:	mov	r0, #0
   1d214:	mov	r1, lr
   1d218:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d21c:	sub	sp, fp, #8
   1d220:	pop	{r4, sl, fp, pc}
   1d224:	push	{fp, lr}
   1d228:	mov	fp, sp
   1d22c:	sub	sp, sp, #48	; 0x30
   1d230:	mov	ip, r0
   1d234:	movw	r0, #12920	; 0x3278
   1d238:	mov	r3, #32
   1d23c:	movt	r0, #3
   1d240:	add	r2, r0, #16
   1d244:	vld1.64	{d16-d17}, [r0], r3
   1d248:	mov	r3, sp
   1d24c:	vld1.64	{d18-d19}, [r2]
   1d250:	add	r2, r3, #16
   1d254:	vld1.64	{d20-d21}, [r0]
   1d258:	add	r0, r3, #32
   1d25c:	vst1.64	{d18-d19}, [r2]
   1d260:	mov	r2, r3
   1d264:	vst1.64	{d20-d21}, [r0]
   1d268:	mov	r0, #28
   1d26c:	and	r0, r0, r1, lsr #3
   1d270:	and	r1, r1, #31
   1d274:	vst1.64	{d16-d17}, [r2], r0
   1d278:	mov	r0, #1
   1d27c:	ldr	lr, [r2, #8]
   1d280:	bic	r0, r0, lr, lsr r1
   1d284:	eor	r0, lr, r0, lsl r1
   1d288:	mov	r1, ip
   1d28c:	str	r0, [r2, #8]
   1d290:	mov	r0, #0
   1d294:	mvn	r2, #0
   1d298:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d29c:	mov	sp, fp
   1d2a0:	pop	{fp, pc}
   1d2a4:	push	{fp, lr}
   1d2a8:	mov	fp, sp
   1d2ac:	sub	sp, sp, #48	; 0x30
   1d2b0:	movw	r2, #12920	; 0x3278
   1d2b4:	mov	r3, #32
   1d2b8:	mov	r1, r0
   1d2bc:	movt	r2, #3
   1d2c0:	add	r0, r2, #16
   1d2c4:	vld1.64	{d16-d17}, [r2], r3
   1d2c8:	mov	r3, sp
   1d2cc:	vld1.64	{d18-d19}, [r0]
   1d2d0:	add	r0, r3, #16
   1d2d4:	vld1.64	{d20-d21}, [r2]
   1d2d8:	mov	r2, r3
   1d2dc:	vst1.64	{d18-d19}, [r0]
   1d2e0:	add	r0, r3, #32
   1d2e4:	vst1.64	{d20-d21}, [r0]
   1d2e8:	mov	r0, #12
   1d2ec:	vst1.64	{d16-d17}, [r2], r0
   1d2f0:	ldr	r0, [r2]
   1d2f4:	orr	r0, r0, #67108864	; 0x4000000
   1d2f8:	str	r0, [r2]
   1d2fc:	mov	r0, #0
   1d300:	mvn	r2, #0
   1d304:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d308:	mov	sp, fp
   1d30c:	pop	{fp, pc}
   1d310:	push	{fp, lr}
   1d314:	mov	fp, sp
   1d318:	sub	sp, sp, #48	; 0x30
   1d31c:	mov	ip, r1
   1d320:	mov	r1, r0
   1d324:	movw	r0, #12920	; 0x3278
   1d328:	mov	r3, #32
   1d32c:	movt	r0, #3
   1d330:	add	r2, r0, #16
   1d334:	vld1.64	{d16-d17}, [r0], r3
   1d338:	mov	r3, sp
   1d33c:	vld1.64	{d18-d19}, [r2]
   1d340:	add	r2, r3, #16
   1d344:	vld1.64	{d20-d21}, [r0]
   1d348:	add	r0, r3, #32
   1d34c:	vst1.64	{d18-d19}, [r2]
   1d350:	mov	r2, r3
   1d354:	vst1.64	{d20-d21}, [r0]
   1d358:	mov	r0, #12
   1d35c:	vst1.64	{d16-d17}, [r2], r0
   1d360:	ldr	r0, [r2]
   1d364:	orr	r0, r0, #67108864	; 0x4000000
   1d368:	str	r0, [r2]
   1d36c:	mov	r0, #0
   1d370:	mov	r2, ip
   1d374:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d378:	mov	sp, fp
   1d37c:	pop	{fp, pc}
   1d380:	push	{r4, sl, fp, lr}
   1d384:	add	fp, sp, #8
   1d388:	sub	sp, sp, #96	; 0x60
   1d38c:	mov	ip, r2
   1d390:	mov	r2, sp
   1d394:	vmov.i32	q8, #0	; 0x00000000
   1d398:	mov	r4, #28
   1d39c:	cmp	r1, #10
   1d3a0:	mov	r3, r2
   1d3a4:	add	lr, r2, #16
   1d3a8:	vst1.64	{d16-d17}, [r3], r4
   1d3ac:	vst1.64	{d16-d17}, [lr]
   1d3b0:	vst1.32	{d16-d17}, [r3]
   1d3b4:	beq	1d404 <__assert_fail@plt+0xb978>
   1d3b8:	vld1.64	{d16-d17}, [r2], r4
   1d3bc:	vld1.64	{d18-d19}, [lr]
   1d3c0:	add	r3, sp, #48	; 0x30
   1d3c4:	add	r4, r3, #4
   1d3c8:	vld1.32	{d20-d21}, [r2]
   1d3cc:	add	r2, r3, #20
   1d3d0:	vst1.32	{d16-d17}, [r4]
   1d3d4:	vst1.32	{d18-d19}, [r2]
   1d3d8:	add	r2, r3, #32
   1d3dc:	vst1.32	{d20-d21}, [r2]
   1d3e0:	str	r1, [sp, #48]	; 0x30
   1d3e4:	mvn	r2, #0
   1d3e8:	ldr	r1, [sp, #60]	; 0x3c
   1d3ec:	orr	r1, r1, #67108864	; 0x4000000
   1d3f0:	str	r1, [sp, #60]	; 0x3c
   1d3f4:	mov	r1, ip
   1d3f8:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d3fc:	sub	sp, fp, #8
   1d400:	pop	{r4, sl, fp, pc}
   1d404:	bl	11a5c <abort@plt>
   1d408:	push	{r4, r5, fp, lr}
   1d40c:	add	fp, sp, #8
   1d410:	sub	sp, sp, #48	; 0x30
   1d414:	mov	ip, r3
   1d418:	movw	r3, #12920	; 0x3278
   1d41c:	mov	lr, #32
   1d420:	cmp	r1, #0
   1d424:	mov	r5, sp
   1d428:	movt	r3, #3
   1d42c:	cmpne	r2, #0
   1d430:	add	r4, r3, #16
   1d434:	vld1.64	{d16-d17}, [r3], lr
   1d438:	vld1.64	{d18-d19}, [r4]
   1d43c:	add	r4, r5, #16
   1d440:	vld1.64	{d20-d21}, [r3]
   1d444:	vst1.64	{d16-d17}, [r5], lr
   1d448:	mov	r3, #10
   1d44c:	vst1.64	{d18-d19}, [r4]
   1d450:	vst1.64	{d20-d21}, [r5]
   1d454:	str	r3, [sp]
   1d458:	bne	1d460 <__assert_fail@plt+0xb9d4>
   1d45c:	bl	11a5c <abort@plt>
   1d460:	str	r2, [sp, #44]	; 0x2c
   1d464:	str	r1, [sp, #40]	; 0x28
   1d468:	mov	r3, sp
   1d46c:	mov	r1, ip
   1d470:	mvn	r2, #0
   1d474:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d478:	sub	sp, fp, #8
   1d47c:	pop	{r4, r5, fp, pc}
   1d480:	push	{r4, r5, fp, lr}
   1d484:	add	fp, sp, #8
   1d488:	sub	sp, sp, #48	; 0x30
   1d48c:	mov	lr, r3
   1d490:	movw	r3, #12920	; 0x3278
   1d494:	mov	ip, #32
   1d498:	cmp	r1, #0
   1d49c:	mov	r5, sp
   1d4a0:	movt	r3, #3
   1d4a4:	cmpne	r2, #0
   1d4a8:	add	r4, r3, #16
   1d4ac:	vld1.64	{d16-d17}, [r3], ip
   1d4b0:	vld1.64	{d18-d19}, [r4]
   1d4b4:	add	r4, r5, #16
   1d4b8:	vld1.64	{d20-d21}, [r3]
   1d4bc:	vst1.64	{d16-d17}, [r5], ip
   1d4c0:	mov	r3, #10
   1d4c4:	vst1.64	{d18-d19}, [r4]
   1d4c8:	vst1.64	{d20-d21}, [r5]
   1d4cc:	str	r3, [sp]
   1d4d0:	bne	1d4d8 <__assert_fail@plt+0xba4c>
   1d4d4:	bl	11a5c <abort@plt>
   1d4d8:	ldr	ip, [fp, #8]
   1d4dc:	str	r2, [sp, #44]	; 0x2c
   1d4e0:	str	r1, [sp, #40]	; 0x28
   1d4e4:	mov	r3, sp
   1d4e8:	mov	r1, lr
   1d4ec:	mov	r2, ip
   1d4f0:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d4f4:	sub	sp, fp, #8
   1d4f8:	pop	{r4, r5, fp, pc}
   1d4fc:	push	{r4, sl, fp, lr}
   1d500:	add	fp, sp, #8
   1d504:	sub	sp, sp, #48	; 0x30
   1d508:	mov	ip, r2
   1d50c:	movw	r2, #12920	; 0x3278
   1d510:	mov	lr, #32
   1d514:	cmp	r0, #0
   1d518:	mov	r4, sp
   1d51c:	movt	r2, #3
   1d520:	cmpne	r1, #0
   1d524:	add	r3, r2, #16
   1d528:	vld1.64	{d16-d17}, [r2], lr
   1d52c:	vld1.64	{d18-d19}, [r3]
   1d530:	add	r3, r4, #16
   1d534:	vld1.64	{d20-d21}, [r2]
   1d538:	vst1.64	{d16-d17}, [r4], lr
   1d53c:	mov	r2, #10
   1d540:	vst1.64	{d18-d19}, [r3]
   1d544:	vst1.64	{d20-d21}, [r4]
   1d548:	str	r2, [sp]
   1d54c:	bne	1d554 <__assert_fail@plt+0xbac8>
   1d550:	bl	11a5c <abort@plt>
   1d554:	str	r1, [sp, #44]	; 0x2c
   1d558:	str	r0, [sp, #40]	; 0x28
   1d55c:	mov	r3, sp
   1d560:	mov	r0, #0
   1d564:	mov	r1, ip
   1d568:	mvn	r2, #0
   1d56c:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d570:	sub	sp, fp, #8
   1d574:	pop	{r4, sl, fp, pc}
   1d578:	push	{r4, r5, fp, lr}
   1d57c:	add	fp, sp, #8
   1d580:	sub	sp, sp, #48	; 0x30
   1d584:	mov	lr, r2
   1d588:	movw	r2, #12920	; 0x3278
   1d58c:	mov	ip, r3
   1d590:	mov	r3, #32
   1d594:	cmp	r0, #0
   1d598:	mov	r5, sp
   1d59c:	movt	r2, #3
   1d5a0:	cmpne	r1, #0
   1d5a4:	add	r4, r2, #16
   1d5a8:	vld1.64	{d16-d17}, [r2], r3
   1d5ac:	vld1.64	{d18-d19}, [r4]
   1d5b0:	add	r4, r5, #16
   1d5b4:	vld1.64	{d20-d21}, [r2]
   1d5b8:	vst1.64	{d16-d17}, [r5], r3
   1d5bc:	mov	r2, #10
   1d5c0:	vst1.64	{d18-d19}, [r4]
   1d5c4:	vst1.64	{d20-d21}, [r5]
   1d5c8:	str	r2, [sp]
   1d5cc:	bne	1d5d4 <__assert_fail@plt+0xbb48>
   1d5d0:	bl	11a5c <abort@plt>
   1d5d4:	str	r1, [sp, #44]	; 0x2c
   1d5d8:	str	r0, [sp, #40]	; 0x28
   1d5dc:	mov	r3, sp
   1d5e0:	mov	r0, #0
   1d5e4:	mov	r1, lr
   1d5e8:	mov	r2, ip
   1d5ec:	bl	1ce94 <__assert_fail@plt+0xb408>
   1d5f0:	sub	sp, fp, #8
   1d5f4:	pop	{r4, r5, fp, pc}
   1d5f8:	movw	r3, #12688	; 0x3190
   1d5fc:	movt	r3, #3
   1d600:	b	1ce94 <__assert_fail@plt+0xb408>
   1d604:	movw	r3, #12688	; 0x3190
   1d608:	mov	r2, r1
   1d60c:	mov	r1, r0
   1d610:	mov	r0, #0
   1d614:	movt	r3, #3
   1d618:	b	1ce94 <__assert_fail@plt+0xb408>
   1d61c:	movw	r3, #12688	; 0x3190
   1d620:	mvn	r2, #0
   1d624:	movt	r3, #3
   1d628:	b	1ce94 <__assert_fail@plt+0xb408>
   1d62c:	movw	r3, #12688	; 0x3190
   1d630:	mov	r1, r0
   1d634:	mov	r0, #0
   1d638:	mvn	r2, #0
   1d63c:	movt	r3, #3
   1d640:	b	1ce94 <__assert_fail@plt+0xb408>
   1d644:	push	{r4, r5, fp, lr}
   1d648:	add	fp, sp, #8
   1d64c:	mov	r4, #0
   1d650:	mov	r5, r0
   1d654:	mov	r1, #524288	; 0x80000
   1d658:	str	r4, [r0, #4]
   1d65c:	movw	r0, #8943	; 0x22ef
   1d660:	movt	r0, #2
   1d664:	bl	2003c <__assert_fail@plt+0xe5b0>
   1d668:	cmn	r0, #1
   1d66c:	str	r0, [r5]
   1d670:	ble	1d67c <__assert_fail@plt+0xbbf0>
   1d674:	mov	r0, r4
   1d678:	pop	{r4, r5, fp, pc}
   1d67c:	mov	r0, #0
   1d680:	mov	r1, #0
   1d684:	mov	r4, #0
   1d688:	bl	11888 <getcwd@plt>
   1d68c:	cmp	r0, #0
   1d690:	str	r0, [r5, #4]
   1d694:	mvneq	r4, #0
   1d698:	mov	r0, r4
   1d69c:	pop	{r4, r5, fp, pc}
   1d6a0:	ldr	r1, [r0]
   1d6a4:	cmp	r1, #0
   1d6a8:	blt	1d6b4 <__assert_fail@plt+0xbc28>
   1d6ac:	mov	r0, r1
   1d6b0:	b	119f0 <fchdir@plt>
   1d6b4:	ldr	r0, [r0, #4]
   1d6b8:	b	1fb58 <__assert_fail@plt+0xe0cc>
   1d6bc:	push	{r4, sl, fp, lr}
   1d6c0:	add	fp, sp, #8
   1d6c4:	mov	r4, r0
   1d6c8:	ldr	r0, [r0]
   1d6cc:	cmp	r0, #0
   1d6d0:	blt	1d6d8 <__assert_fail@plt+0xbc4c>
   1d6d4:	bl	11a68 <close@plt>
   1d6d8:	ldr	r0, [r4, #4]
   1d6dc:	pop	{r4, sl, fp, lr}
   1d6e0:	b	18ea0 <__assert_fail@plt+0x7414>
   1d6e4:	push	{r4, r5, fp, lr}
   1d6e8:	add	fp, sp, #8
   1d6ec:	mov	r4, r1
   1d6f0:	bl	118a0 <getfilecon@plt>
   1d6f4:	cmp	r0, #10
   1d6f8:	beq	1d710 <__assert_fail@plt+0xbc84>
   1d6fc:	cmp	r0, #0
   1d700:	bne	1d754 <__assert_fail@plt+0xbcc8>
   1d704:	bl	118e8 <__errno_location@plt>
   1d708:	mov	r1, #95	; 0x5f
   1d70c:	b	1d74c <__assert_fail@plt+0xbcc0>
   1d710:	ldr	r5, [r4]
   1d714:	movw	r1, #9644	; 0x25ac
   1d718:	movt	r1, #2
   1d71c:	mov	r0, r5
   1d720:	bl	116b4 <strcmp@plt>
   1d724:	mov	r1, r0
   1d728:	mov	r0, #10
   1d72c:	cmp	r1, #0
   1d730:	popne	{r4, r5, fp, pc}
   1d734:	mov	r0, r5
   1d738:	bl	11a14 <freecon@plt>
   1d73c:	mov	r0, #0
   1d740:	str	r0, [r4]
   1d744:	bl	118e8 <__errno_location@plt>
   1d748:	mov	r1, #61	; 0x3d
   1d74c:	str	r1, [r0]
   1d750:	mvn	r0, #0
   1d754:	pop	{r4, r5, fp, pc}
   1d758:	push	{r4, r5, fp, lr}
   1d75c:	add	fp, sp, #8
   1d760:	mov	r4, r1
   1d764:	bl	11810 <lgetfilecon@plt>
   1d768:	cmp	r0, #10
   1d76c:	beq	1d784 <__assert_fail@plt+0xbcf8>
   1d770:	cmp	r0, #0
   1d774:	bne	1d7c8 <__assert_fail@plt+0xbd3c>
   1d778:	bl	118e8 <__errno_location@plt>
   1d77c:	mov	r1, #95	; 0x5f
   1d780:	b	1d7c0 <__assert_fail@plt+0xbd34>
   1d784:	ldr	r5, [r4]
   1d788:	movw	r1, #9644	; 0x25ac
   1d78c:	movt	r1, #2
   1d790:	mov	r0, r5
   1d794:	bl	116b4 <strcmp@plt>
   1d798:	mov	r1, r0
   1d79c:	mov	r0, #10
   1d7a0:	cmp	r1, #0
   1d7a4:	popne	{r4, r5, fp, pc}
   1d7a8:	mov	r0, r5
   1d7ac:	bl	11a14 <freecon@plt>
   1d7b0:	mov	r0, #0
   1d7b4:	str	r0, [r4]
   1d7b8:	bl	118e8 <__errno_location@plt>
   1d7bc:	mov	r1, #61	; 0x3d
   1d7c0:	str	r1, [r0]
   1d7c4:	mvn	r0, #0
   1d7c8:	pop	{r4, r5, fp, pc}
   1d7cc:	push	{r4, r5, fp, lr}
   1d7d0:	add	fp, sp, #8
   1d7d4:	mov	r4, r1
   1d7d8:	bl	11744 <fgetfilecon@plt>
   1d7dc:	cmp	r0, #10
   1d7e0:	beq	1d7f8 <__assert_fail@plt+0xbd6c>
   1d7e4:	cmp	r0, #0
   1d7e8:	bne	1d83c <__assert_fail@plt+0xbdb0>
   1d7ec:	bl	118e8 <__errno_location@plt>
   1d7f0:	mov	r1, #95	; 0x5f
   1d7f4:	b	1d834 <__assert_fail@plt+0xbda8>
   1d7f8:	ldr	r5, [r4]
   1d7fc:	movw	r1, #9644	; 0x25ac
   1d800:	movt	r1, #2
   1d804:	mov	r0, r5
   1d808:	bl	116b4 <strcmp@plt>
   1d80c:	mov	r1, r0
   1d810:	mov	r0, #10
   1d814:	cmp	r1, #0
   1d818:	popne	{r4, r5, fp, pc}
   1d81c:	mov	r0, r5
   1d820:	bl	11a14 <freecon@plt>
   1d824:	mov	r0, #0
   1d828:	str	r0, [r4]
   1d82c:	bl	118e8 <__errno_location@plt>
   1d830:	mov	r1, #61	; 0x3d
   1d834:	str	r1, [r0]
   1d838:	mvn	r0, #0
   1d83c:	pop	{r4, r5, fp, pc}
   1d840:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d844:	add	fp, sp, #24
   1d848:	mov	r4, r0
   1d84c:	cmp	r0, #0
   1d850:	beq	1d884 <__assert_fail@plt+0xbdf8>
   1d854:	mov	r0, r4
   1d858:	bl	118ac <strlen@plt>
   1d85c:	add	r5, r0, #1
   1d860:	cmp	r5, #58	; 0x3a
   1d864:	bls	1d888 <__assert_fail@plt+0xbdfc>
   1d868:	add	r0, r0, #10
   1d86c:	bic	r0, r0, #3
   1d870:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1d874:	mov	r6, r0
   1d878:	cmp	r0, #0
   1d87c:	bne	1d89c <__assert_fail@plt+0xbe10>
   1d880:	b	1d8d4 <__assert_fail@plt+0xbe48>
   1d884:	mov	r5, #0
   1d888:	mov	r0, #64	; 0x40
   1d88c:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1d890:	mov	r6, r0
   1d894:	cmp	r0, #0
   1d898:	beq	1d8d4 <__assert_fail@plt+0xbe48>
   1d89c:	cmp	r4, #0
   1d8a0:	mov	r0, r4
   1d8a4:	mov	r8, #0
   1d8a8:	mov	r7, r6
   1d8ac:	movwne	r0, #1
   1d8b0:	str	r8, [r6]
   1d8b4:	strb	r0, [r6, #4]
   1d8b8:	strb	r8, [r7, #5]!
   1d8bc:	beq	1d8d4 <__assert_fail@plt+0xbe48>
   1d8c0:	mov	r0, r7
   1d8c4:	mov	r1, r4
   1d8c8:	mov	r2, r5
   1d8cc:	bl	11708 <memcpy@plt>
   1d8d0:	strb	r8, [r7, r5]
   1d8d4:	mov	r0, r6
   1d8d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d8dc:	push	{r4, sl, fp, lr}
   1d8e0:	add	fp, sp, #8
   1d8e4:	cmp	r0, #2
   1d8e8:	popcc	{r4, sl, fp, pc}
   1d8ec:	ldr	r4, [r0]
   1d8f0:	bl	18ea0 <__assert_fail@plt+0x7414>
   1d8f4:	cmp	r4, #0
   1d8f8:	mov	r0, r4
   1d8fc:	bne	1d8ec <__assert_fail@plt+0xbe60>
   1d900:	pop	{r4, sl, fp, pc}
   1d904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d908:	add	fp, sp, #28
   1d90c:	sub	sp, sp, #4
   1d910:	mov	r9, r2
   1d914:	mov	r7, r1
   1d918:	cmp	r0, #0
   1d91c:	beq	1d994 <__assert_fail@plt+0xbf08>
   1d920:	mov	r6, r0
   1d924:	movw	r0, #7446	; 0x1d16
   1d928:	movt	r0, #2
   1d92c:	bl	11804 <getenv@plt>
   1d930:	mov	r4, r0
   1d934:	ldrb	r0, [r6, #4]
   1d938:	cmp	r4, #0
   1d93c:	beq	1d9a8 <__assert_fail@plt+0xbf1c>
   1d940:	cmp	r0, #0
   1d944:	beq	1d95c <__assert_fail@plt+0xbed0>
   1d948:	add	r0, r6, #5
   1d94c:	mov	r1, r4
   1d950:	bl	116b4 <strcmp@plt>
   1d954:	cmp	r0, #0
   1d958:	beq	1da6c <__assert_fail@plt+0xbfe0>
   1d95c:	mov	r0, r4
   1d960:	bl	118ac <strlen@plt>
   1d964:	add	sl, r0, #1
   1d968:	mov	r8, #1
   1d96c:	cmp	sl, #58	; 0x3a
   1d970:	bls	1d9b8 <__assert_fail@plt+0xbf2c>
   1d974:	add	r0, r0, #10
   1d978:	bic	r0, r0, #3
   1d97c:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1d980:	cmp	r0, #0
   1d984:	bne	1d9c8 <__assert_fail@plt+0xbf3c>
   1d988:	mov	r0, #0
   1d98c:	sub	sp, fp, #28
   1d990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d994:	mov	r0, r7
   1d998:	mov	r1, r9
   1d99c:	sub	sp, fp, #28
   1d9a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9a4:	b	11690 <gmtime_r@plt>
   1d9a8:	mov	r8, #0
   1d9ac:	cmp	r0, #0
   1d9b0:	mov	sl, #0
   1d9b4:	beq	1da6c <__assert_fail@plt+0xbfe0>
   1d9b8:	mov	r0, #64	; 0x40
   1d9bc:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1d9c0:	cmp	r0, #0
   1d9c4:	beq	1d988 <__assert_fail@plt+0xbefc>
   1d9c8:	mov	r5, r0
   1d9cc:	str	r7, [sp]
   1d9d0:	strb	r8, [r0, #4]
   1d9d4:	mov	r0, #0
   1d9d8:	cmp	r8, #0
   1d9dc:	mov	r7, r5
   1d9e0:	str	r0, [r5]
   1d9e4:	strb	r0, [r7, #5]!
   1d9e8:	beq	1da04 <__assert_fail@plt+0xbf78>
   1d9ec:	mov	r0, r7
   1d9f0:	mov	r1, r4
   1d9f4:	mov	r2, sl
   1d9f8:	mov	r8, #0
   1d9fc:	bl	11708 <memcpy@plt>
   1da00:	strb	r8, [r7, sl]
   1da04:	ldrb	r0, [r6, #4]
   1da08:	cmp	r0, #0
   1da0c:	beq	1da74 <__assert_fail@plt+0xbfe8>
   1da10:	movw	r0, #7446	; 0x1d16
   1da14:	add	r1, r6, #5
   1da18:	mov	r2, #1
   1da1c:	movt	r0, #2
   1da20:	bl	118c4 <setenv@plt>
   1da24:	ldr	r7, [sp]
   1da28:	cmp	r0, #0
   1da2c:	beq	1da8c <__assert_fail@plt+0xc000>
   1da30:	bl	118e8 <__errno_location@plt>
   1da34:	ldr	r6, [r0]
   1da38:	mov	r4, r0
   1da3c:	cmp	r5, #2
   1da40:	bcc	1da5c <__assert_fail@plt+0xbfd0>
   1da44:	ldr	r7, [r5]
   1da48:	mov	r0, r5
   1da4c:	bl	18ea0 <__assert_fail@plt+0x7414>
   1da50:	cmp	r7, #0
   1da54:	mov	r5, r7
   1da58:	bne	1da44 <__assert_fail@plt+0xbfb8>
   1da5c:	str	r6, [r4]
   1da60:	mov	r0, #0
   1da64:	sub	sp, fp, #28
   1da68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da6c:	mov	r5, #1
   1da70:	b	1da90 <__assert_fail@plt+0xc004>
   1da74:	movw	r0, #7446	; 0x1d16
   1da78:	movt	r0, #2
   1da7c:	bl	11a44 <unsetenv@plt>
   1da80:	ldr	r7, [sp]
   1da84:	cmp	r0, #0
   1da88:	bne	1da30 <__assert_fail@plt+0xbfa4>
   1da8c:	bl	11780 <tzset@plt>
   1da90:	mov	r0, r7
   1da94:	mov	r1, r9
   1da98:	bl	11750 <localtime_r@plt>
   1da9c:	cmp	r0, #0
   1daa0:	beq	1db1c <__assert_fail@plt+0xc090>
   1daa4:	mov	r0, r6
   1daa8:	mov	r1, r9
   1daac:	bl	1dc2c <__assert_fail@plt+0xc1a0>
   1dab0:	mov	r6, r0
   1dab4:	cmp	r5, #1
   1dab8:	beq	1db88 <__assert_fail@plt+0xc0fc>
   1dabc:	bl	118e8 <__errno_location@plt>
   1dac0:	mov	r8, r0
   1dac4:	ldr	sl, [r0]
   1dac8:	ldrb	r0, [r5, #4]
   1dacc:	cmp	r0, #0
   1dad0:	beq	1db90 <__assert_fail@plt+0xc104>
   1dad4:	movw	r0, #7446	; 0x1d16
   1dad8:	add	r1, r5, #5
   1dadc:	mov	r2, #1
   1dae0:	movt	r0, #2
   1dae4:	bl	118c4 <setenv@plt>
   1dae8:	cmp	r0, #0
   1daec:	beq	1dba4 <__assert_fail@plt+0xc118>
   1daf0:	ldr	sl, [r8]
   1daf4:	mov	r4, #0
   1daf8:	cmp	r5, #2
   1dafc:	bcc	1dc0c <__assert_fail@plt+0xc180>
   1db00:	ldr	r7, [r5]
   1db04:	mov	r0, r5
   1db08:	bl	18ea0 <__assert_fail@plt+0x7414>
   1db0c:	cmp	r7, #0
   1db10:	mov	r5, r7
   1db14:	bne	1db00 <__assert_fail@plt+0xc074>
   1db18:	b	1dc0c <__assert_fail@plt+0xc180>
   1db1c:	mov	r6, #0
   1db20:	cmp	r5, #1
   1db24:	beq	1db88 <__assert_fail@plt+0xc0fc>
   1db28:	bl	118e8 <__errno_location@plt>
   1db2c:	mov	r8, r0
   1db30:	ldr	sl, [r0]
   1db34:	ldrb	r0, [r5, #4]
   1db38:	cmp	r0, #0
   1db3c:	beq	1dbd0 <__assert_fail@plt+0xc144>
   1db40:	movw	r0, #7446	; 0x1d16
   1db44:	add	r1, r5, #5
   1db48:	mov	r2, #1
   1db4c:	movt	r0, #2
   1db50:	bl	118c4 <setenv@plt>
   1db54:	cmp	r0, #0
   1db58:	beq	1dbe4 <__assert_fail@plt+0xc158>
   1db5c:	ldr	sl, [r8]
   1db60:	mov	r4, #0
   1db64:	cmp	r5, #2
   1db68:	bcc	1dc0c <__assert_fail@plt+0xc180>
   1db6c:	ldr	r7, [r5]
   1db70:	mov	r0, r5
   1db74:	bl	18ea0 <__assert_fail@plt+0x7414>
   1db78:	cmp	r7, #0
   1db7c:	mov	r5, r7
   1db80:	bne	1db6c <__assert_fail@plt+0xc0e0>
   1db84:	b	1dc0c <__assert_fail@plt+0xc180>
   1db88:	mov	r4, #1
   1db8c:	b	1dc10 <__assert_fail@plt+0xc184>
   1db90:	movw	r0, #7446	; 0x1d16
   1db94:	movt	r0, #2
   1db98:	bl	11a44 <unsetenv@plt>
   1db9c:	cmp	r0, #0
   1dba0:	bne	1daf0 <__assert_fail@plt+0xc064>
   1dba4:	bl	11780 <tzset@plt>
   1dba8:	mov	r4, #1
   1dbac:	cmp	r5, #2
   1dbb0:	bcc	1dc0c <__assert_fail@plt+0xc180>
   1dbb4:	ldr	r7, [r5]
   1dbb8:	mov	r0, r5
   1dbbc:	bl	18ea0 <__assert_fail@plt+0x7414>
   1dbc0:	cmp	r7, #0
   1dbc4:	mov	r5, r7
   1dbc8:	bne	1dbb4 <__assert_fail@plt+0xc128>
   1dbcc:	b	1dc0c <__assert_fail@plt+0xc180>
   1dbd0:	movw	r0, #7446	; 0x1d16
   1dbd4:	movt	r0, #2
   1dbd8:	bl	11a44 <unsetenv@plt>
   1dbdc:	cmp	r0, #0
   1dbe0:	bne	1db5c <__assert_fail@plt+0xc0d0>
   1dbe4:	bl	11780 <tzset@plt>
   1dbe8:	mov	r4, #1
   1dbec:	cmp	r5, #2
   1dbf0:	bcc	1dc0c <__assert_fail@plt+0xc180>
   1dbf4:	ldr	r7, [r5]
   1dbf8:	mov	r0, r5
   1dbfc:	bl	18ea0 <__assert_fail@plt+0x7414>
   1dc00:	cmp	r7, #0
   1dc04:	mov	r5, r7
   1dc08:	bne	1dbf4 <__assert_fail@plt+0xc168>
   1dc0c:	str	sl, [r8]
   1dc10:	cmp	r6, #0
   1dc14:	moveq	r9, r6
   1dc18:	cmp	r4, #0
   1dc1c:	moveq	r9, r4
   1dc20:	mov	r0, r9
   1dc24:	sub	sp, fp, #28
   1dc28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc30:	add	fp, sp, #28
   1dc34:	sub	sp, sp, #4
   1dc38:	ldr	r7, [r1, #40]	; 0x28
   1dc3c:	mov	r8, #1
   1dc40:	cmp	r7, #0
   1dc44:	beq	1dce8 <__assert_fail@plt+0xc25c>
   1dc48:	mov	r5, r1
   1dc4c:	mov	r6, r0
   1dc50:	cmp	r7, r1
   1dc54:	bcc	1dc64 <__assert_fail@plt+0xc1d8>
   1dc58:	add	r0, r5, #44	; 0x2c
   1dc5c:	cmp	r7, r0
   1dc60:	bcc	1dce8 <__assert_fail@plt+0xc25c>
   1dc64:	ldrb	r0, [r7]
   1dc68:	cmp	r0, #0
   1dc6c:	beq	1dcdc <__assert_fail@plt+0xc250>
   1dc70:	add	r4, r6, #5
   1dc74:	b	1dc88 <__assert_fail@plt+0xc1fc>
   1dc78:	ldr	r0, [r6]
   1dc7c:	cmp	r0, #0
   1dc80:	addne	r4, r0, #5
   1dc84:	movne	r6, r0
   1dc88:	mov	r0, r4
   1dc8c:	mov	r1, r7
   1dc90:	bl	116b4 <strcmp@plt>
   1dc94:	cmp	r0, #0
   1dc98:	beq	1dd8c <__assert_fail@plt+0xc300>
   1dc9c:	ldrb	r0, [r4]
   1dca0:	cmp	r0, #0
   1dca4:	bne	1dcc0 <__assert_fail@plt+0xc234>
   1dca8:	add	r0, r6, #5
   1dcac:	cmp	r4, r0
   1dcb0:	bne	1dcf4 <__assert_fail@plt+0xc268>
   1dcb4:	ldrb	r0, [r6, #4]
   1dcb8:	cmp	r0, #0
   1dcbc:	beq	1dcf4 <__assert_fail@plt+0xc268>
   1dcc0:	mov	r0, r4
   1dcc4:	bl	118ac <strlen@plt>
   1dcc8:	add	r4, r4, r0
   1dccc:	ldrb	r0, [r4, #1]!
   1dcd0:	cmp	r0, #0
   1dcd4:	bne	1dc88 <__assert_fail@plt+0xc1fc>
   1dcd8:	b	1dc78 <__assert_fail@plt+0xc1ec>
   1dcdc:	movw	r4, #5254	; 0x1486
   1dce0:	movt	r4, #2
   1dce4:	str	r4, [r5, #40]	; 0x28
   1dce8:	mov	r0, r8
   1dcec:	sub	sp, fp, #28
   1dcf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcf4:	add	r0, r6, #64	; 0x40
   1dcf8:	sub	sl, r0, r4
   1dcfc:	mov	r0, r7
   1dd00:	bl	118ac <strlen@plt>
   1dd04:	add	r9, r0, #1
   1dd08:	cmp	r9, sl
   1dd0c:	bge	1dd38 <__assert_fail@plt+0xc2ac>
   1dd10:	mov	r0, r4
   1dd14:	mov	r1, r7
   1dd18:	mov	r2, r9
   1dd1c:	bl	11708 <memcpy@plt>
   1dd20:	mov	r0, #0
   1dd24:	strb	r0, [r4, r9]
   1dd28:	str	r4, [r5, #40]	; 0x28
   1dd2c:	mov	r0, r8
   1dd30:	sub	sp, fp, #28
   1dd34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd38:	add	r0, r0, #10
   1dd3c:	cmp	r9, #59	; 0x3b
   1dd40:	bic	r0, r0, #3
   1dd44:	movwcc	r0, #64	; 0x40
   1dd48:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1dd4c:	cmp	r0, #0
   1dd50:	beq	1dd9c <__assert_fail@plt+0xc310>
   1dd54:	mov	sl, r0
   1dd58:	mov	r0, #0
   1dd5c:	mov	r1, r7
   1dd60:	mov	r2, r9
   1dd64:	str	r0, [sl]
   1dd68:	mov	r0, #1
   1dd6c:	add	r4, sl, #5
   1dd70:	strh	r0, [sl, #4]
   1dd74:	mov	r0, r4
   1dd78:	bl	11708 <memcpy@plt>
   1dd7c:	mov	r0, #0
   1dd80:	strb	r0, [r4, r9]
   1dd84:	str	sl, [r6]
   1dd88:	strb	r0, [sl, #4]
   1dd8c:	str	r4, [r5, #40]	; 0x28
   1dd90:	mov	r0, r8
   1dd94:	sub	sp, fp, #28
   1dd98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd9c:	mov	r8, #0
   1dda0:	str	r8, [r6]
   1dda4:	mov	r0, r8
   1dda8:	sub	sp, fp, #28
   1ddac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ddb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ddb4:	add	fp, sp, #28
   1ddb8:	sub	sp, sp, #52	; 0x34
   1ddbc:	mov	r9, r1
   1ddc0:	cmp	r0, #0
   1ddc4:	beq	1de40 <__assert_fail@plt+0xc3b4>
   1ddc8:	mov	r7, r0
   1ddcc:	movw	r0, #7446	; 0x1d16
   1ddd0:	movt	r0, #2
   1ddd4:	bl	11804 <getenv@plt>
   1ddd8:	mov	r6, r0
   1dddc:	ldrb	r0, [r7, #4]
   1dde0:	cmp	r6, #0
   1dde4:	beq	1de50 <__assert_fail@plt+0xc3c4>
   1dde8:	cmp	r0, #0
   1ddec:	beq	1de04 <__assert_fail@plt+0xc378>
   1ddf0:	add	r0, r7, #5
   1ddf4:	mov	r1, r6
   1ddf8:	bl	116b4 <strcmp@plt>
   1ddfc:	cmp	r0, #0
   1de00:	beq	1df14 <__assert_fail@plt+0xc488>
   1de04:	mov	r0, r6
   1de08:	bl	118ac <strlen@plt>
   1de0c:	add	r8, r0, #1
   1de10:	mov	sl, #1
   1de14:	cmp	r8, #58	; 0x3a
   1de18:	bls	1de60 <__assert_fail@plt+0xc3d4>
   1de1c:	add	r0, r0, #10
   1de20:	bic	r0, r0, #3
   1de24:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1de28:	mvn	r4, #0
   1de2c:	cmp	r0, #0
   1de30:	bne	1de74 <__assert_fail@plt+0xc3e8>
   1de34:	mov	r0, r4
   1de38:	sub	sp, fp, #28
   1de3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de40:	mov	r0, r9
   1de44:	sub	sp, fp, #28
   1de48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de4c:	b	119e4 <timegm@plt>
   1de50:	mov	sl, #0
   1de54:	cmp	r0, #0
   1de58:	mov	r8, #0
   1de5c:	beq	1df14 <__assert_fail@plt+0xc488>
   1de60:	mov	r0, #64	; 0x40
   1de64:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1de68:	mvn	r4, #0
   1de6c:	cmp	r0, #0
   1de70:	beq	1de34 <__assert_fail@plt+0xc3a8>
   1de74:	mov	r5, r0
   1de78:	strb	sl, [r0, #4]
   1de7c:	mov	r0, #0
   1de80:	cmp	sl, #0
   1de84:	mov	r4, r5
   1de88:	str	r0, [r5]
   1de8c:	strb	r0, [r4, #5]!
   1de90:	beq	1deac <__assert_fail@plt+0xc420>
   1de94:	mov	r0, r4
   1de98:	mov	r1, r6
   1de9c:	mov	r2, r8
   1dea0:	mov	sl, #0
   1dea4:	bl	11708 <memcpy@plt>
   1dea8:	strb	sl, [r4, r8]
   1deac:	ldrb	r0, [r7, #4]
   1deb0:	cmp	r0, #0
   1deb4:	beq	1df1c <__assert_fail@plt+0xc490>
   1deb8:	movw	r0, #7446	; 0x1d16
   1debc:	add	r1, r7, #5
   1dec0:	mov	r2, #1
   1dec4:	movt	r0, #2
   1dec8:	bl	118c4 <setenv@plt>
   1decc:	mvn	r4, #0
   1ded0:	cmp	r0, #0
   1ded4:	beq	1df34 <__assert_fail@plt+0xc4a8>
   1ded8:	bl	118e8 <__errno_location@plt>
   1dedc:	ldr	r8, [r0]
   1dee0:	mov	r6, r0
   1dee4:	cmp	r5, #2
   1dee8:	bcc	1df04 <__assert_fail@plt+0xc478>
   1deec:	ldr	r7, [r5]
   1def0:	mov	r0, r5
   1def4:	bl	18ea0 <__assert_fail@plt+0x7414>
   1def8:	cmp	r7, #0
   1defc:	mov	r5, r7
   1df00:	bne	1deec <__assert_fail@plt+0xc460>
   1df04:	str	r8, [r6]
   1df08:	mov	r0, r4
   1df0c:	sub	sp, fp, #28
   1df10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df14:	mov	r5, #1
   1df18:	b	1df38 <__assert_fail@plt+0xc4ac>
   1df1c:	movw	r0, #7446	; 0x1d16
   1df20:	movt	r0, #2
   1df24:	bl	11a44 <unsetenv@plt>
   1df28:	mvn	r4, #0
   1df2c:	cmp	r0, #0
   1df30:	bne	1ded8 <__assert_fail@plt+0xc44c>
   1df34:	bl	11780 <tzset@plt>
   1df38:	mov	r1, #32
   1df3c:	mov	r2, r9
   1df40:	add	r0, sp, #8
   1df44:	vld1.32	{d16-d17}, [r2], r1
   1df48:	mov	r3, r0
   1df4c:	vst1.32	{d16-d17}, [r3], r1
   1df50:	ldr	r1, [r9, #16]
   1df54:	ldr	r6, [r9, #20]
   1df58:	str	r1, [sp, #24]
   1df5c:	mvn	r1, #0
   1df60:	str	r1, [sp, #36]	; 0x24
   1df64:	str	r6, [sp, #28]
   1df68:	ldr	r1, [r2]
   1df6c:	str	r1, [r3]
   1df70:	bl	116d8 <mktime@plt>
   1df74:	ldr	r1, [sp, #36]	; 0x24
   1df78:	cmn	r1, #1
   1df7c:	ble	1e004 <__assert_fail@plt+0xc578>
   1df80:	add	r8, sp, #8
   1df84:	str	r0, [sp, #4]
   1df88:	mov	r0, r7
   1df8c:	mov	r1, r8
   1df90:	bl	1dc2c <__assert_fail@plt+0xc1a0>
   1df94:	mov	sl, r0
   1df98:	cmp	r5, #1
   1df9c:	beq	1e068 <__assert_fail@plt+0xc5dc>
   1dfa0:	bl	118e8 <__errno_location@plt>
   1dfa4:	mov	r7, r0
   1dfa8:	ldr	r4, [r0]
   1dfac:	ldrb	r0, [r5, #4]
   1dfb0:	cmp	r0, #0
   1dfb4:	beq	1e088 <__assert_fail@plt+0xc5fc>
   1dfb8:	movw	r0, #7446	; 0x1d16
   1dfbc:	add	r1, r5, #5
   1dfc0:	mov	r2, #1
   1dfc4:	movt	r0, #2
   1dfc8:	bl	118c4 <setenv@plt>
   1dfcc:	cmp	r0, #0
   1dfd0:	beq	1e09c <__assert_fail@plt+0xc610>
   1dfd4:	ldr	r4, [r7]
   1dfd8:	mov	r6, #0
   1dfdc:	cmp	r5, #2
   1dfe0:	bcc	1e0cc <__assert_fail@plt+0xc640>
   1dfe4:	str	r4, [sp]
   1dfe8:	ldr	r4, [r5]
   1dfec:	mov	r0, r5
   1dff0:	bl	18ea0 <__assert_fail@plt+0x7414>
   1dff4:	cmp	r4, #0
   1dff8:	mov	r5, r4
   1dffc:	bne	1dfe8 <__assert_fail@plt+0xc55c>
   1e000:	b	1e0c8 <__assert_fail@plt+0xc63c>
   1e004:	cmp	r5, #1
   1e008:	beq	1e078 <__assert_fail@plt+0xc5ec>
   1e00c:	bl	118e8 <__errno_location@plt>
   1e010:	mov	r4, r0
   1e014:	ldr	r6, [r0]
   1e018:	ldrb	r0, [r5, #4]
   1e01c:	cmp	r0, #0
   1e020:	beq	1e110 <__assert_fail@plt+0xc684>
   1e024:	movw	r0, #7446	; 0x1d16
   1e028:	add	r1, r5, #5
   1e02c:	mov	r2, #1
   1e030:	movt	r0, #2
   1e034:	bl	118c4 <setenv@plt>
   1e038:	cmp	r0, #0
   1e03c:	beq	1e124 <__assert_fail@plt+0xc698>
   1e040:	ldr	r6, [r4]
   1e044:	cmp	r5, #2
   1e048:	bcc	1e148 <__assert_fail@plt+0xc6bc>
   1e04c:	ldr	r7, [r5]
   1e050:	mov	r0, r5
   1e054:	bl	18ea0 <__assert_fail@plt+0x7414>
   1e058:	cmp	r7, #0
   1e05c:	mov	r5, r7
   1e060:	bne	1e04c <__assert_fail@plt+0xc5c0>
   1e064:	b	1e148 <__assert_fail@plt+0xc6bc>
   1e068:	mov	r6, #1
   1e06c:	and	r0, sl, r6
   1e070:	cmp	r0, #1
   1e074:	beq	1e0dc <__assert_fail@plt+0xc650>
   1e078:	mvn	r4, #0
   1e07c:	mov	r0, r4
   1e080:	sub	sp, fp, #28
   1e084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e088:	movw	r0, #7446	; 0x1d16
   1e08c:	movt	r0, #2
   1e090:	bl	11a44 <unsetenv@plt>
   1e094:	cmp	r0, #0
   1e098:	bne	1dfd4 <__assert_fail@plt+0xc548>
   1e09c:	bl	11780 <tzset@plt>
   1e0a0:	mov	r6, #1
   1e0a4:	cmp	r5, #2
   1e0a8:	bcc	1e0cc <__assert_fail@plt+0xc640>
   1e0ac:	str	r4, [sp]
   1e0b0:	ldr	r4, [r5]
   1e0b4:	mov	r0, r5
   1e0b8:	bl	18ea0 <__assert_fail@plt+0x7414>
   1e0bc:	cmp	r4, #0
   1e0c0:	mov	r5, r4
   1e0c4:	bne	1e0b0 <__assert_fail@plt+0xc624>
   1e0c8:	ldr	r4, [sp]
   1e0cc:	str	r4, [r7]
   1e0d0:	and	r0, sl, r6
   1e0d4:	cmp	r0, #1
   1e0d8:	bne	1e078 <__assert_fail@plt+0xc5ec>
   1e0dc:	mov	r0, #28
   1e0e0:	add	r1, r8, #16
   1e0e4:	ldr	r4, [sp, #4]
   1e0e8:	vld1.32	{d16-d17}, [r8], r0
   1e0ec:	vld1.64	{d18-d19}, [r1]
   1e0f0:	add	r1, r9, #16
   1e0f4:	vld1.32	{d20-d21}, [r8]
   1e0f8:	vst1.32	{d16-d17}, [r9], r0
   1e0fc:	vst1.32	{d18-d19}, [r1]
   1e100:	vst1.32	{d20-d21}, [r9]
   1e104:	mov	r0, r4
   1e108:	sub	sp, fp, #28
   1e10c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e110:	movw	r0, #7446	; 0x1d16
   1e114:	movt	r0, #2
   1e118:	bl	11a44 <unsetenv@plt>
   1e11c:	cmp	r0, #0
   1e120:	bne	1e040 <__assert_fail@plt+0xc5b4>
   1e124:	bl	11780 <tzset@plt>
   1e128:	cmp	r5, #2
   1e12c:	bcc	1e148 <__assert_fail@plt+0xc6bc>
   1e130:	ldr	r7, [r5]
   1e134:	mov	r0, r5
   1e138:	bl	18ea0 <__assert_fail@plt+0x7414>
   1e13c:	cmp	r7, #0
   1e140:	mov	r5, r7
   1e144:	bne	1e130 <__assert_fail@plt+0xc6a4>
   1e148:	str	r6, [r4]
   1e14c:	mvn	r4, #0
   1e150:	mov	r0, r4
   1e154:	sub	sp, fp, #28
   1e158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e15c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e160:	add	fp, sp, #24
   1e164:	sub	sp, sp, #32
   1e168:	ldr	r6, [fp, #12]
   1e16c:	ldr	r7, [fp, #8]
   1e170:	mov	r4, r2
   1e174:	mov	r8, r0
   1e178:	cmp	r1, #0
   1e17c:	beq	1e1a4 <__assert_fail@plt+0xc718>
   1e180:	movw	r2, #9654	; 0x25b6
   1e184:	mov	r5, r1
   1e188:	str	r3, [sp, #4]
   1e18c:	str	r4, [sp]
   1e190:	mov	r0, r8
   1e194:	mov	r1, #1
   1e198:	movt	r2, #2
   1e19c:	mov	r3, r5
   1e1a0:	b	1e1bc <__assert_fail@plt+0xc730>
   1e1a4:	movw	r2, #9666	; 0x25c2
   1e1a8:	str	r3, [sp]
   1e1ac:	mov	r0, r8
   1e1b0:	mov	r1, #1
   1e1b4:	mov	r3, r4
   1e1b8:	movt	r2, #2
   1e1bc:	bl	1193c <__fprintf_chk@plt>
   1e1c0:	movw	r1, #9673	; 0x25c9
   1e1c4:	mov	r0, #0
   1e1c8:	mov	r2, #5
   1e1cc:	movt	r1, #2
   1e1d0:	bl	1172c <dcgettext@plt>
   1e1d4:	movw	r2, #10391	; 0x2897
   1e1d8:	mov	r3, r0
   1e1dc:	movw	r0, #2022	; 0x7e6
   1e1e0:	mov	r1, #1
   1e1e4:	str	r0, [sp]
   1e1e8:	movt	r2, #2
   1e1ec:	mov	r0, r8
   1e1f0:	bl	1193c <__fprintf_chk@plt>
   1e1f4:	movw	r4, #5253	; 0x1485
   1e1f8:	mov	r1, r8
   1e1fc:	movt	r4, #2
   1e200:	mov	r0, r4
   1e204:	bl	11678 <fputs_unlocked@plt>
   1e208:	movw	r1, #9677	; 0x25cd
   1e20c:	mov	r0, #0
   1e210:	mov	r2, #5
   1e214:	movt	r1, #2
   1e218:	bl	1172c <dcgettext@plt>
   1e21c:	movw	r3, #9848	; 0x2678
   1e220:	mov	r2, r0
   1e224:	mov	r0, r8
   1e228:	mov	r1, #1
   1e22c:	movt	r3, #2
   1e230:	bl	1193c <__fprintf_chk@plt>
   1e234:	mov	r0, r4
   1e238:	mov	r1, r8
   1e23c:	bl	11678 <fputs_unlocked@plt>
   1e240:	cmp	r6, #9
   1e244:	bhi	1e280 <__assert_fail@plt+0xc7f4>
   1e248:	add	r0, pc, #0
   1e24c:	ldr	pc, [r0, r6, lsl #2]
   1e250:	andeq	lr, r1, r8, ror r2
   1e254:	andeq	lr, r1, ip, lsl #5
   1e258:			; <UNDEFINED> instruction: 0x0001e2bc
   1e25c:	andeq	lr, r1, r4, ror #5
   1e260:	andeq	lr, r1, ip, lsl #6
   1e264:	andeq	lr, r1, r4, lsr r3
   1e268:	andeq	lr, r1, ip, asr r3
   1e26c:	muleq	r1, r4, r3
   1e270:	andeq	lr, r1, ip, lsr r4
   1e274:	andeq	lr, r1, r4, ror #7
   1e278:	sub	sp, fp, #24
   1e27c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e280:	movw	r1, #10201	; 0x27d9
   1e284:	movt	r1, #2
   1e288:	b	1e3ec <__assert_fail@plt+0xc960>
   1e28c:	movw	r1, #9882	; 0x269a
   1e290:	mov	r0, #0
   1e294:	mov	r2, #5
   1e298:	movt	r1, #2
   1e29c:	bl	1172c <dcgettext@plt>
   1e2a0:	ldr	r3, [r7]
   1e2a4:	mov	r2, r0
   1e2a8:	mov	r0, r8
   1e2ac:	mov	r1, #1
   1e2b0:	sub	sp, fp, #24
   1e2b4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e2b8:	b	1193c <__fprintf_chk@plt>
   1e2bc:	movw	r1, #9898	; 0x26aa
   1e2c0:	mov	r0, #0
   1e2c4:	mov	r2, #5
   1e2c8:	movt	r1, #2
   1e2cc:	bl	1172c <dcgettext@plt>
   1e2d0:	mov	r2, r0
   1e2d4:	ldr	r3, [r7]
   1e2d8:	ldr	r0, [r7, #4]
   1e2dc:	str	r0, [sp]
   1e2e0:	b	1e3d0 <__assert_fail@plt+0xc944>
   1e2e4:	movw	r1, #9921	; 0x26c1
   1e2e8:	mov	r0, #0
   1e2ec:	mov	r2, #5
   1e2f0:	movt	r1, #2
   1e2f4:	bl	1172c <dcgettext@plt>
   1e2f8:	ldr	r3, [r7]
   1e2fc:	mov	r2, r0
   1e300:	ldmib	r7, {r0, r1}
   1e304:	stm	sp, {r0, r1}
   1e308:	b	1e3d0 <__assert_fail@plt+0xc944>
   1e30c:	movw	r1, #9949	; 0x26dd
   1e310:	mov	r0, #0
   1e314:	mov	r2, #5
   1e318:	movt	r1, #2
   1e31c:	bl	1172c <dcgettext@plt>
   1e320:	ldr	r3, [r7]
   1e324:	mov	r2, r0
   1e328:	ldmib	r7, {r0, r1, r7}
   1e32c:	stm	sp, {r0, r1, r7}
   1e330:	b	1e3d0 <__assert_fail@plt+0xc944>
   1e334:	movw	r1, #9981	; 0x26fd
   1e338:	mov	r0, #0
   1e33c:	mov	r2, #5
   1e340:	movt	r1, #2
   1e344:	bl	1172c <dcgettext@plt>
   1e348:	ldr	r3, [r7]
   1e34c:	mov	r2, r0
   1e350:	ldmib	r7, {r0, r1, r6, r7}
   1e354:	stm	sp, {r0, r1, r6, r7}
   1e358:	b	1e3d0 <__assert_fail@plt+0xc944>
   1e35c:	movw	r1, #10017	; 0x2721
   1e360:	mov	r0, #0
   1e364:	mov	r2, #5
   1e368:	movt	r1, #2
   1e36c:	bl	1172c <dcgettext@plt>
   1e370:	ldr	r3, [r7]
   1e374:	mov	r2, r0
   1e378:	ldmib	r7, {r0, r1, r6}
   1e37c:	ldr	r5, [r7, #16]
   1e380:	ldr	r7, [r7, #20]
   1e384:	stm	sp, {r0, r1, r6}
   1e388:	str	r5, [sp, #12]
   1e38c:	str	r7, [sp, #16]
   1e390:	b	1e3d0 <__assert_fail@plt+0xc944>
   1e394:	movw	r1, #10057	; 0x2749
   1e398:	mov	r0, #0
   1e39c:	mov	r2, #5
   1e3a0:	movt	r1, #2
   1e3a4:	bl	1172c <dcgettext@plt>
   1e3a8:	ldr	r3, [r7]
   1e3ac:	mov	r2, r0
   1e3b0:	ldmib	r7, {r0, r1, r6}
   1e3b4:	ldr	r5, [r7, #16]
   1e3b8:	ldr	r4, [r7, #20]
   1e3bc:	ldr	r7, [r7, #24]
   1e3c0:	stm	sp, {r0, r1, r6}
   1e3c4:	str	r5, [sp, #12]
   1e3c8:	str	r4, [sp, #16]
   1e3cc:	str	r7, [sp, #20]
   1e3d0:	mov	r0, r8
   1e3d4:	mov	r1, #1
   1e3d8:	bl	1193c <__fprintf_chk@plt>
   1e3dc:	sub	sp, fp, #24
   1e3e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e3e4:	movw	r1, #10149	; 0x27a5
   1e3e8:	movt	r1, #2
   1e3ec:	mov	r0, #0
   1e3f0:	mov	r2, #5
   1e3f4:	bl	1172c <dcgettext@plt>
   1e3f8:	mov	ip, r0
   1e3fc:	ldr	r3, [r7]
   1e400:	ldr	r0, [r7, #4]
   1e404:	ldr	r1, [r7, #8]
   1e408:	ldr	r6, [r7, #12]
   1e40c:	ldr	r5, [r7, #16]
   1e410:	ldr	r4, [r7, #20]
   1e414:	ldr	r2, [r7, #24]
   1e418:	ldr	lr, [r7, #28]
   1e41c:	ldr	r7, [r7, #32]
   1e420:	stm	sp, {r0, r1, r6}
   1e424:	str	r5, [sp, #12]
   1e428:	str	r4, [sp, #16]
   1e42c:	str	r2, [sp, #20]
   1e430:	str	lr, [sp, #24]
   1e434:	str	r7, [sp, #28]
   1e438:	b	1e480 <__assert_fail@plt+0xc9f4>
   1e43c:	movw	r1, #10101	; 0x2775
   1e440:	mov	r0, #0
   1e444:	mov	r2, #5
   1e448:	movt	r1, #2
   1e44c:	bl	1172c <dcgettext@plt>
   1e450:	mov	ip, r0
   1e454:	ldr	r3, [r7]
   1e458:	ldmib	r7, {r0, r1, r6}
   1e45c:	ldr	r5, [r7, #16]
   1e460:	ldr	r4, [r7, #20]
   1e464:	ldr	r2, [r7, #24]
   1e468:	ldr	r7, [r7, #28]
   1e46c:	stm	sp, {r0, r1, r6}
   1e470:	str	r5, [sp, #12]
   1e474:	str	r4, [sp, #16]
   1e478:	str	r2, [sp, #20]
   1e47c:	str	r7, [sp, #24]
   1e480:	mov	r0, r8
   1e484:	mov	r1, #1
   1e488:	mov	r2, ip
   1e48c:	bl	1193c <__fprintf_chk@plt>
   1e490:	sub	sp, fp, #24
   1e494:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e498:	push	{r4, sl, fp, lr}
   1e49c:	add	fp, sp, #8
   1e4a0:	sub	sp, sp, #8
   1e4a4:	ldr	ip, [fp, #8]
   1e4a8:	mov	lr, #0
   1e4ac:	ldr	r4, [ip, lr, lsl #2]
   1e4b0:	add	lr, lr, #1
   1e4b4:	cmp	r4, #0
   1e4b8:	bne	1e4ac <__assert_fail@plt+0xca20>
   1e4bc:	sub	r4, lr, #1
   1e4c0:	str	ip, [sp]
   1e4c4:	str	r4, [sp, #4]
   1e4c8:	bl	1e15c <__assert_fail@plt+0xc6d0>
   1e4cc:	sub	sp, fp, #8
   1e4d0:	pop	{r4, sl, fp, pc}
   1e4d4:	push	{fp, lr}
   1e4d8:	mov	fp, sp
   1e4dc:	sub	sp, sp, #48	; 0x30
   1e4e0:	ldr	ip, [fp, #8]
   1e4e4:	ldr	lr, [ip]
   1e4e8:	cmp	lr, #0
   1e4ec:	str	lr, [sp, #8]
   1e4f0:	beq	1e58c <__assert_fail@plt+0xcb00>
   1e4f4:	ldr	lr, [ip, #4]
   1e4f8:	cmp	lr, #0
   1e4fc:	str	lr, [sp, #12]
   1e500:	beq	1e594 <__assert_fail@plt+0xcb08>
   1e504:	ldr	lr, [ip, #8]
   1e508:	cmp	lr, #0
   1e50c:	str	lr, [sp, #16]
   1e510:	beq	1e59c <__assert_fail@plt+0xcb10>
   1e514:	ldr	lr, [ip, #12]
   1e518:	cmp	lr, #0
   1e51c:	str	lr, [sp, #20]
   1e520:	beq	1e5a4 <__assert_fail@plt+0xcb18>
   1e524:	ldr	lr, [ip, #16]
   1e528:	cmp	lr, #0
   1e52c:	str	lr, [sp, #24]
   1e530:	beq	1e5ac <__assert_fail@plt+0xcb20>
   1e534:	ldr	lr, [ip, #20]
   1e538:	cmp	lr, #0
   1e53c:	str	lr, [sp, #28]
   1e540:	beq	1e5b4 <__assert_fail@plt+0xcb28>
   1e544:	ldr	lr, [ip, #24]
   1e548:	cmp	lr, #0
   1e54c:	str	lr, [sp, #32]
   1e550:	beq	1e5bc <__assert_fail@plt+0xcb30>
   1e554:	ldr	lr, [ip, #28]
   1e558:	cmp	lr, #0
   1e55c:	str	lr, [sp, #36]	; 0x24
   1e560:	beq	1e5c4 <__assert_fail@plt+0xcb38>
   1e564:	ldr	lr, [ip, #32]
   1e568:	cmp	lr, #0
   1e56c:	str	lr, [sp, #40]	; 0x28
   1e570:	beq	1e5cc <__assert_fail@plt+0xcb40>
   1e574:	ldr	lr, [ip, #36]	; 0x24
   1e578:	mov	ip, #10
   1e57c:	cmp	lr, #0
   1e580:	str	lr, [sp, #44]	; 0x2c
   1e584:	movweq	ip, #9
   1e588:	b	1e5d0 <__assert_fail@plt+0xcb44>
   1e58c:	mov	ip, #0
   1e590:	b	1e5d0 <__assert_fail@plt+0xcb44>
   1e594:	mov	ip, #1
   1e598:	b	1e5d0 <__assert_fail@plt+0xcb44>
   1e59c:	mov	ip, #2
   1e5a0:	b	1e5d0 <__assert_fail@plt+0xcb44>
   1e5a4:	mov	ip, #3
   1e5a8:	b	1e5d0 <__assert_fail@plt+0xcb44>
   1e5ac:	mov	ip, #4
   1e5b0:	b	1e5d0 <__assert_fail@plt+0xcb44>
   1e5b4:	mov	ip, #5
   1e5b8:	b	1e5d0 <__assert_fail@plt+0xcb44>
   1e5bc:	mov	ip, #6
   1e5c0:	b	1e5d0 <__assert_fail@plt+0xcb44>
   1e5c4:	mov	ip, #7
   1e5c8:	b	1e5d0 <__assert_fail@plt+0xcb44>
   1e5cc:	mov	ip, #8
   1e5d0:	add	lr, sp, #8
   1e5d4:	str	ip, [sp, #4]
   1e5d8:	str	lr, [sp]
   1e5dc:	bl	1e15c <__assert_fail@plt+0xc6d0>
   1e5e0:	mov	sp, fp
   1e5e4:	pop	{fp, pc}
   1e5e8:	push	{fp, lr}
   1e5ec:	mov	fp, sp
   1e5f0:	sub	sp, sp, #56	; 0x38
   1e5f4:	add	ip, fp, #8
   1e5f8:	str	ip, [sp, #12]
   1e5fc:	ldr	lr, [fp, #8]
   1e600:	cmp	lr, #0
   1e604:	str	lr, [sp, #16]
   1e608:	beq	1e6a4 <__assert_fail@plt+0xcc18>
   1e60c:	ldr	lr, [ip, #4]
   1e610:	cmp	lr, #0
   1e614:	str	lr, [sp, #20]
   1e618:	beq	1e6ac <__assert_fail@plt+0xcc20>
   1e61c:	ldr	lr, [ip, #8]
   1e620:	cmp	lr, #0
   1e624:	str	lr, [sp, #24]
   1e628:	beq	1e6b4 <__assert_fail@plt+0xcc28>
   1e62c:	ldr	lr, [ip, #12]
   1e630:	cmp	lr, #0
   1e634:	str	lr, [sp, #28]
   1e638:	beq	1e6bc <__assert_fail@plt+0xcc30>
   1e63c:	ldr	lr, [ip, #16]
   1e640:	cmp	lr, #0
   1e644:	str	lr, [sp, #32]
   1e648:	beq	1e6c4 <__assert_fail@plt+0xcc38>
   1e64c:	ldr	lr, [ip, #20]
   1e650:	cmp	lr, #0
   1e654:	str	lr, [sp, #36]	; 0x24
   1e658:	beq	1e6cc <__assert_fail@plt+0xcc40>
   1e65c:	ldr	lr, [ip, #24]
   1e660:	cmp	lr, #0
   1e664:	str	lr, [sp, #40]	; 0x28
   1e668:	beq	1e6d4 <__assert_fail@plt+0xcc48>
   1e66c:	ldr	lr, [ip, #28]
   1e670:	cmp	lr, #0
   1e674:	str	lr, [sp, #44]	; 0x2c
   1e678:	beq	1e6dc <__assert_fail@plt+0xcc50>
   1e67c:	ldr	lr, [ip, #32]
   1e680:	cmp	lr, #0
   1e684:	str	lr, [sp, #48]	; 0x30
   1e688:	beq	1e6e4 <__assert_fail@plt+0xcc58>
   1e68c:	ldr	lr, [ip, #36]	; 0x24
   1e690:	mov	ip, #10
   1e694:	cmp	lr, #0
   1e698:	str	lr, [sp, #52]	; 0x34
   1e69c:	movweq	ip, #9
   1e6a0:	b	1e6e8 <__assert_fail@plt+0xcc5c>
   1e6a4:	mov	ip, #0
   1e6a8:	b	1e6e8 <__assert_fail@plt+0xcc5c>
   1e6ac:	mov	ip, #1
   1e6b0:	b	1e6e8 <__assert_fail@plt+0xcc5c>
   1e6b4:	mov	ip, #2
   1e6b8:	b	1e6e8 <__assert_fail@plt+0xcc5c>
   1e6bc:	mov	ip, #3
   1e6c0:	b	1e6e8 <__assert_fail@plt+0xcc5c>
   1e6c4:	mov	ip, #4
   1e6c8:	b	1e6e8 <__assert_fail@plt+0xcc5c>
   1e6cc:	mov	ip, #5
   1e6d0:	b	1e6e8 <__assert_fail@plt+0xcc5c>
   1e6d4:	mov	ip, #6
   1e6d8:	b	1e6e8 <__assert_fail@plt+0xcc5c>
   1e6dc:	mov	ip, #7
   1e6e0:	b	1e6e8 <__assert_fail@plt+0xcc5c>
   1e6e4:	mov	ip, #8
   1e6e8:	add	lr, sp, #16
   1e6ec:	str	ip, [sp, #4]
   1e6f0:	str	lr, [sp]
   1e6f4:	bl	1e15c <__assert_fail@plt+0xc6d0>
   1e6f8:	mov	sp, fp
   1e6fc:	pop	{fp, pc}
   1e700:	push	{fp, lr}
   1e704:	mov	fp, sp
   1e708:	movw	r0, #12772	; 0x31e4
   1e70c:	movt	r0, #3
   1e710:	ldr	r1, [r0]
   1e714:	movw	r0, #5253	; 0x1485
   1e718:	movt	r0, #2
   1e71c:	bl	11678 <fputs_unlocked@plt>
   1e720:	movw	r1, #10261	; 0x2815
   1e724:	mov	r0, #0
   1e728:	mov	r2, #5
   1e72c:	movt	r1, #2
   1e730:	bl	1172c <dcgettext@plt>
   1e734:	movw	r2, #10281	; 0x2829
   1e738:	mov	r1, r0
   1e73c:	mov	r0, #1
   1e740:	movt	r2, #2
   1e744:	bl	11924 <__printf_chk@plt>
   1e748:	movw	r1, #10303	; 0x283f
   1e74c:	mov	r0, #0
   1e750:	mov	r2, #5
   1e754:	movt	r1, #2
   1e758:	bl	1172c <dcgettext@plt>
   1e75c:	movw	r2, #6103	; 0x17d7
   1e760:	movw	r3, #6344	; 0x18c8
   1e764:	mov	r1, r0
   1e768:	mov	r0, #1
   1e76c:	movt	r2, #2
   1e770:	movt	r3, #2
   1e774:	bl	11924 <__printf_chk@plt>
   1e778:	movw	r1, #10323	; 0x2853
   1e77c:	mov	r0, #0
   1e780:	mov	r2, #5
   1e784:	movt	r1, #2
   1e788:	bl	1172c <dcgettext@plt>
   1e78c:	movw	r2, #10362	; 0x287a
   1e790:	mov	r1, r0
   1e794:	mov	r0, #1
   1e798:	movt	r2, #2
   1e79c:	pop	{fp, lr}
   1e7a0:	b	11924 <__printf_chk@plt>
   1e7a4:	push	{r4, r5, r6, sl, fp, lr}
   1e7a8:	add	fp, sp, #16
   1e7ac:	mov	r4, r2
   1e7b0:	mov	r5, r1
   1e7b4:	mov	r6, r0
   1e7b8:	bl	20228 <__assert_fail@plt+0xe79c>
   1e7bc:	cmp	r0, #0
   1e7c0:	popne	{r4, r5, r6, sl, fp, pc}
   1e7c4:	cmp	r6, #0
   1e7c8:	beq	1e7dc <__assert_fail@plt+0xcd50>
   1e7cc:	cmp	r5, #0
   1e7d0:	cmpne	r4, #0
   1e7d4:	bne	1e7dc <__assert_fail@plt+0xcd50>
   1e7d8:	pop	{r4, r5, r6, sl, fp, pc}
   1e7dc:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1e7e0:	push	{r4, r5, r6, sl, fp, lr}
   1e7e4:	add	fp, sp, #16
   1e7e8:	mov	r4, r2
   1e7ec:	mov	r5, r1
   1e7f0:	mov	r6, r0
   1e7f4:	bl	20228 <__assert_fail@plt+0xe79c>
   1e7f8:	cmp	r0, #0
   1e7fc:	popne	{r4, r5, r6, sl, fp, pc}
   1e800:	cmp	r6, #0
   1e804:	beq	1e818 <__assert_fail@plt+0xcd8c>
   1e808:	cmp	r5, #0
   1e80c:	cmpne	r4, #0
   1e810:	bne	1e818 <__assert_fail@plt+0xcd8c>
   1e814:	pop	{r4, r5, r6, sl, fp, pc}
   1e818:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1e81c:	push	{fp, lr}
   1e820:	mov	fp, sp
   1e824:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1e828:	cmp	r0, #0
   1e82c:	popne	{fp, pc}
   1e830:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1e834:	push	{fp, lr}
   1e838:	mov	fp, sp
   1e83c:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1e840:	cmp	r0, #0
   1e844:	popne	{fp, pc}
   1e848:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1e84c:	push	{fp, lr}
   1e850:	mov	fp, sp
   1e854:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1e858:	cmp	r0, #0
   1e85c:	popne	{fp, pc}
   1e860:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1e864:	push	{r4, r5, fp, lr}
   1e868:	add	fp, sp, #8
   1e86c:	mov	r4, r1
   1e870:	mov	r5, r0
   1e874:	bl	1eeb4 <__assert_fail@plt+0xd428>
   1e878:	cmp	r0, #0
   1e87c:	popne	{r4, r5, fp, pc}
   1e880:	cmp	r5, #0
   1e884:	beq	1e894 <__assert_fail@plt+0xce08>
   1e888:	cmp	r4, #0
   1e88c:	bne	1e894 <__assert_fail@plt+0xce08>
   1e890:	pop	{r4, r5, fp, pc}
   1e894:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1e898:	push	{fp, lr}
   1e89c:	mov	fp, sp
   1e8a0:	cmp	r1, #0
   1e8a4:	orreq	r1, r1, #1
   1e8a8:	bl	1eeb4 <__assert_fail@plt+0xd428>
   1e8ac:	cmp	r0, #0
   1e8b0:	popne	{fp, pc}
   1e8b4:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1e8b8:	push	{fp, lr}
   1e8bc:	mov	fp, sp
   1e8c0:	clz	r3, r2
   1e8c4:	lsr	ip, r3, #5
   1e8c8:	clz	r3, r1
   1e8cc:	lsr	r3, r3, #5
   1e8d0:	orrs	r3, r3, ip
   1e8d4:	movwne	r1, #1
   1e8d8:	movwne	r2, #1
   1e8dc:	bl	20228 <__assert_fail@plt+0xe79c>
   1e8e0:	cmp	r0, #0
   1e8e4:	popne	{fp, pc}
   1e8e8:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1e8ec:	push	{fp, lr}
   1e8f0:	mov	fp, sp
   1e8f4:	mov	r2, r1
   1e8f8:	mov	r1, r0
   1e8fc:	mov	r0, #0
   1e900:	bl	20228 <__assert_fail@plt+0xe79c>
   1e904:	cmp	r0, #0
   1e908:	popne	{fp, pc}
   1e90c:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1e910:	push	{fp, lr}
   1e914:	mov	fp, sp
   1e918:	mov	r2, r1
   1e91c:	mov	r1, r0
   1e920:	clz	r0, r2
   1e924:	clz	r3, r1
   1e928:	lsr	r0, r0, #5
   1e92c:	lsr	r3, r3, #5
   1e930:	orrs	r0, r3, r0
   1e934:	movwne	r1, #1
   1e938:	movwne	r2, #1
   1e93c:	mov	r0, #0
   1e940:	bl	20228 <__assert_fail@plt+0xe79c>
   1e944:	cmp	r0, #0
   1e948:	popne	{fp, pc}
   1e94c:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1e950:	push	{r4, r5, r6, sl, fp, lr}
   1e954:	add	fp, sp, #16
   1e958:	ldr	r5, [r1]
   1e95c:	mov	r4, r1
   1e960:	mov	r6, r0
   1e964:	cmp	r0, #0
   1e968:	beq	1e980 <__assert_fail@plt+0xcef4>
   1e96c:	mov	r0, #1
   1e970:	add	r0, r0, r5, lsr #1
   1e974:	adds	r5, r5, r0
   1e978:	bcc	1e988 <__assert_fail@plt+0xcefc>
   1e97c:	b	1e9c4 <__assert_fail@plt+0xcf38>
   1e980:	cmp	r5, #0
   1e984:	movweq	r5, #64	; 0x40
   1e988:	mov	r0, r6
   1e98c:	mov	r1, r5
   1e990:	mov	r2, #1
   1e994:	bl	20228 <__assert_fail@plt+0xe79c>
   1e998:	cmp	r5, #0
   1e99c:	mov	r1, r5
   1e9a0:	movwne	r1, #1
   1e9a4:	cmp	r0, #0
   1e9a8:	bne	1e9bc <__assert_fail@plt+0xcf30>
   1e9ac:	clz	r2, r6
   1e9b0:	lsr	r2, r2, #5
   1e9b4:	orrs	r1, r2, r1
   1e9b8:	bne	1e9c4 <__assert_fail@plt+0xcf38>
   1e9bc:	str	r5, [r4]
   1e9c0:	pop	{r4, r5, r6, sl, fp, pc}
   1e9c4:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1e9c8:	push	{r4, r5, r6, r7, fp, lr}
   1e9cc:	add	fp, sp, #16
   1e9d0:	ldr	r5, [r1]
   1e9d4:	mov	r6, r2
   1e9d8:	mov	r4, r1
   1e9dc:	mov	r7, r0
   1e9e0:	cmp	r0, #0
   1e9e4:	beq	1e9fc <__assert_fail@plt+0xcf70>
   1e9e8:	mov	r0, #1
   1e9ec:	add	r0, r0, r5, lsr #1
   1e9f0:	adds	r5, r5, r0
   1e9f4:	bcc	1ea14 <__assert_fail@plt+0xcf88>
   1e9f8:	b	1ea48 <__assert_fail@plt+0xcfbc>
   1e9fc:	cmp	r5, #0
   1ea00:	bne	1ea14 <__assert_fail@plt+0xcf88>
   1ea04:	mov	r0, #64	; 0x40
   1ea08:	cmp	r6, #64	; 0x40
   1ea0c:	udiv	r5, r0, r6
   1ea10:	addhi	r5, r5, #1
   1ea14:	mov	r0, r7
   1ea18:	mov	r1, r5
   1ea1c:	mov	r2, r6
   1ea20:	bl	20228 <__assert_fail@plt+0xe79c>
   1ea24:	cmp	r0, #0
   1ea28:	bne	1ea40 <__assert_fail@plt+0xcfb4>
   1ea2c:	cmp	r7, #0
   1ea30:	beq	1ea48 <__assert_fail@plt+0xcfbc>
   1ea34:	cmp	r6, #0
   1ea38:	cmpne	r5, #0
   1ea3c:	bne	1ea48 <__assert_fail@plt+0xcfbc>
   1ea40:	str	r5, [r4]
   1ea44:	pop	{r4, r5, r6, r7, fp, pc}
   1ea48:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1ea4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ea50:	add	fp, sp, #24
   1ea54:	mov	r8, r1
   1ea58:	ldr	r1, [r1]
   1ea5c:	mov	r5, r0
   1ea60:	add	r0, r1, r1, asr #1
   1ea64:	cmp	r0, r1
   1ea68:	mvnvs	r0, #-2147483648	; 0x80000000
   1ea6c:	cmp	r0, r3
   1ea70:	mov	r7, r0
   1ea74:	movgt	r7, r3
   1ea78:	cmn	r3, #1
   1ea7c:	movle	r7, r0
   1ea80:	ldr	r0, [fp, #8]
   1ea84:	cmn	r0, #1
   1ea88:	ble	1eab0 <__assert_fail@plt+0xd024>
   1ea8c:	cmp	r0, #0
   1ea90:	beq	1eb04 <__assert_fail@plt+0xd078>
   1ea94:	cmn	r7, #1
   1ea98:	ble	1ead8 <__assert_fail@plt+0xd04c>
   1ea9c:	mvn	r4, #-2147483648	; 0x80000000
   1eaa0:	udiv	r6, r4, r0
   1eaa4:	cmp	r6, r7
   1eaa8:	bge	1eb04 <__assert_fail@plt+0xd078>
   1eaac:	b	1eb14 <__assert_fail@plt+0xd088>
   1eab0:	cmn	r7, #1
   1eab4:	ble	1eaf4 <__assert_fail@plt+0xd068>
   1eab8:	cmn	r0, #1
   1eabc:	beq	1eb04 <__assert_fail@plt+0xd078>
   1eac0:	mov	r6, #-2147483648	; 0x80000000
   1eac4:	mvn	r4, #-2147483648	; 0x80000000
   1eac8:	sdiv	r6, r6, r0
   1eacc:	cmp	r6, r7
   1ead0:	bge	1eb04 <__assert_fail@plt+0xd078>
   1ead4:	b	1eb14 <__assert_fail@plt+0xd088>
   1ead8:	beq	1eb04 <__assert_fail@plt+0xd078>
   1eadc:	mov	r6, #-2147483648	; 0x80000000
   1eae0:	mvn	r4, #-2147483648	; 0x80000000
   1eae4:	sdiv	r6, r6, r7
   1eae8:	cmp	r6, r0
   1eaec:	bge	1eb04 <__assert_fail@plt+0xd078>
   1eaf0:	b	1eb14 <__assert_fail@plt+0xd088>
   1eaf4:	mvn	r4, #-2147483648	; 0x80000000
   1eaf8:	sdiv	r6, r4, r0
   1eafc:	cmp	r7, r6
   1eb00:	blt	1eb14 <__assert_fail@plt+0xd088>
   1eb04:	mul	r6, r7, r0
   1eb08:	mov	r4, #64	; 0x40
   1eb0c:	cmp	r6, #63	; 0x3f
   1eb10:	bgt	1eb1c <__assert_fail@plt+0xd090>
   1eb14:	sdiv	r7, r4, r0
   1eb18:	mul	r6, r7, r0
   1eb1c:	cmp	r5, #0
   1eb20:	moveq	r4, #0
   1eb24:	streq	r4, [r8]
   1eb28:	sub	r4, r7, r1
   1eb2c:	cmp	r4, r2
   1eb30:	bge	1ebdc <__assert_fail@plt+0xd150>
   1eb34:	add	r7, r1, r2
   1eb38:	mov	r6, #0
   1eb3c:	mov	r2, #0
   1eb40:	cmp	r7, r3
   1eb44:	movwgt	r6, #1
   1eb48:	cmn	r3, #1
   1eb4c:	movwgt	r2, #1
   1eb50:	cmp	r7, r1
   1eb54:	bvs	1ec10 <__assert_fail@plt+0xd184>
   1eb58:	ands	r1, r2, r6
   1eb5c:	bne	1ec10 <__assert_fail@plt+0xd184>
   1eb60:	cmn	r0, #1
   1eb64:	ble	1eb8c <__assert_fail@plt+0xd100>
   1eb68:	cmp	r0, #0
   1eb6c:	beq	1ebd8 <__assert_fail@plt+0xd14c>
   1eb70:	cmn	r7, #1
   1eb74:	ble	1ebb0 <__assert_fail@plt+0xd124>
   1eb78:	mvn	r1, #-2147483648	; 0x80000000
   1eb7c:	udiv	r1, r1, r0
   1eb80:	cmp	r1, r7
   1eb84:	bge	1ebd8 <__assert_fail@plt+0xd14c>
   1eb88:	b	1ec10 <__assert_fail@plt+0xd184>
   1eb8c:	cmn	r7, #1
   1eb90:	ble	1ebc8 <__assert_fail@plt+0xd13c>
   1eb94:	cmn	r0, #1
   1eb98:	beq	1ebd8 <__assert_fail@plt+0xd14c>
   1eb9c:	mov	r1, #-2147483648	; 0x80000000
   1eba0:	sdiv	r1, r1, r0
   1eba4:	cmp	r1, r7
   1eba8:	bge	1ebd8 <__assert_fail@plt+0xd14c>
   1ebac:	b	1ec10 <__assert_fail@plt+0xd184>
   1ebb0:	beq	1ebd8 <__assert_fail@plt+0xd14c>
   1ebb4:	mov	r1, #-2147483648	; 0x80000000
   1ebb8:	sdiv	r1, r1, r7
   1ebbc:	cmp	r1, r0
   1ebc0:	bge	1ebd8 <__assert_fail@plt+0xd14c>
   1ebc4:	b	1ec10 <__assert_fail@plt+0xd184>
   1ebc8:	mvn	r1, #-2147483648	; 0x80000000
   1ebcc:	sdiv	r1, r1, r0
   1ebd0:	cmp	r7, r1
   1ebd4:	blt	1ec10 <__assert_fail@plt+0xd184>
   1ebd8:	mul	r6, r7, r0
   1ebdc:	mov	r0, r5
   1ebe0:	mov	r1, r6
   1ebe4:	bl	1eeb4 <__assert_fail@plt+0xd428>
   1ebe8:	cmp	r6, #0
   1ebec:	movwne	r6, #1
   1ebf0:	cmp	r0, #0
   1ebf4:	bne	1ec08 <__assert_fail@plt+0xd17c>
   1ebf8:	clz	r1, r5
   1ebfc:	lsr	r1, r1, #5
   1ec00:	orrs	r1, r1, r6
   1ec04:	bne	1ec10 <__assert_fail@plt+0xd184>
   1ec08:	str	r7, [r8]
   1ec0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ec10:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1ec14:	push	{fp, lr}
   1ec18:	mov	fp, sp
   1ec1c:	mov	r1, #1
   1ec20:	bl	1ee30 <__assert_fail@plt+0xd3a4>
   1ec24:	cmp	r0, #0
   1ec28:	popne	{fp, pc}
   1ec2c:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1ec30:	push	{fp, lr}
   1ec34:	mov	fp, sp
   1ec38:	bl	1ee30 <__assert_fail@plt+0xd3a4>
   1ec3c:	cmp	r0, #0
   1ec40:	popne	{fp, pc}
   1ec44:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1ec48:	push	{fp, lr}
   1ec4c:	mov	fp, sp
   1ec50:	mov	r1, #1
   1ec54:	bl	1ee30 <__assert_fail@plt+0xd3a4>
   1ec58:	cmp	r0, #0
   1ec5c:	popne	{fp, pc}
   1ec60:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1ec64:	push	{fp, lr}
   1ec68:	mov	fp, sp
   1ec6c:	bl	1ee30 <__assert_fail@plt+0xd3a4>
   1ec70:	cmp	r0, #0
   1ec74:	popne	{fp, pc}
   1ec78:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1ec7c:	push	{r4, r5, r6, sl, fp, lr}
   1ec80:	add	fp, sp, #16
   1ec84:	mov	r5, r0
   1ec88:	mov	r0, r1
   1ec8c:	mov	r4, r1
   1ec90:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1ec94:	cmp	r0, #0
   1ec98:	beq	1ecb4 <__assert_fail@plt+0xd228>
   1ec9c:	mov	r1, r5
   1eca0:	mov	r2, r4
   1eca4:	mov	r6, r0
   1eca8:	bl	11708 <memcpy@plt>
   1ecac:	mov	r0, r6
   1ecb0:	pop	{r4, r5, r6, sl, fp, pc}
   1ecb4:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1ecb8:	push	{r4, r5, r6, sl, fp, lr}
   1ecbc:	add	fp, sp, #16
   1ecc0:	mov	r5, r0
   1ecc4:	mov	r0, r1
   1ecc8:	mov	r4, r1
   1eccc:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1ecd0:	cmp	r0, #0
   1ecd4:	beq	1ecf0 <__assert_fail@plt+0xd264>
   1ecd8:	mov	r1, r5
   1ecdc:	mov	r2, r4
   1ece0:	mov	r6, r0
   1ece4:	bl	11708 <memcpy@plt>
   1ece8:	mov	r0, r6
   1ecec:	pop	{r4, r5, r6, sl, fp, pc}
   1ecf0:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1ecf4:	push	{r4, r5, r6, sl, fp, lr}
   1ecf8:	add	fp, sp, #16
   1ecfc:	mov	r5, r0
   1ed00:	add	r0, r1, #1
   1ed04:	mov	r4, r1
   1ed08:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1ed0c:	cmp	r0, #0
   1ed10:	beq	1ed38 <__assert_fail@plt+0xd2ac>
   1ed14:	mov	r6, r0
   1ed18:	mov	r0, #0
   1ed1c:	mov	r1, r5
   1ed20:	mov	r2, r4
   1ed24:	strb	r0, [r6, r4]
   1ed28:	mov	r0, r6
   1ed2c:	bl	11708 <memcpy@plt>
   1ed30:	mov	r0, r6
   1ed34:	pop	{r4, r5, r6, sl, fp, pc}
   1ed38:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1ed3c:	push	{r4, r5, r6, sl, fp, lr}
   1ed40:	add	fp, sp, #16
   1ed44:	mov	r4, r0
   1ed48:	bl	118ac <strlen@plt>
   1ed4c:	add	r5, r0, #1
   1ed50:	mov	r0, r5
   1ed54:	bl	1ee84 <__assert_fail@plt+0xd3f8>
   1ed58:	cmp	r0, #0
   1ed5c:	beq	1ed78 <__assert_fail@plt+0xd2ec>
   1ed60:	mov	r1, r4
   1ed64:	mov	r2, r5
   1ed68:	mov	r6, r0
   1ed6c:	bl	11708 <memcpy@plt>
   1ed70:	mov	r0, r6
   1ed74:	pop	{r4, r5, r6, sl, fp, pc}
   1ed78:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1ed7c:	push	{fp, lr}
   1ed80:	mov	fp, sp
   1ed84:	movw	r0, #12684	; 0x318c
   1ed88:	movw	r1, #10438	; 0x28c6
   1ed8c:	mov	r2, #5
   1ed90:	movt	r0, #3
   1ed94:	movt	r1, #2
   1ed98:	ldr	r4, [r0]
   1ed9c:	mov	r0, #0
   1eda0:	bl	1172c <dcgettext@plt>
   1eda4:	movw	r2, #5797	; 0x16a5
   1eda8:	mov	r3, r0
   1edac:	mov	r0, r4
   1edb0:	mov	r1, #0
   1edb4:	movt	r2, #2
   1edb8:	bl	117e0 <error@plt>
   1edbc:	bl	11a5c <abort@plt>
   1edc0:	push	{r4, sl, fp, lr}
   1edc4:	add	fp, sp, #8
   1edc8:	mov	r0, #0
   1edcc:	mov	r1, #0
   1edd0:	bl	11888 <getcwd@plt>
   1edd4:	mov	r4, r0
   1edd8:	cmp	r0, #0
   1eddc:	bne	1edf0 <__assert_fail@plt+0xd364>
   1ede0:	bl	118e8 <__errno_location@plt>
   1ede4:	ldr	r0, [r0]
   1ede8:	cmp	r0, #12
   1edec:	beq	1edf8 <__assert_fail@plt+0xd36c>
   1edf0:	mov	r0, r4
   1edf4:	pop	{r4, sl, fp, pc}
   1edf8:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   1edfc:	sub	sp, sp, #12
   1ee00:	push	{fp, lr}
   1ee04:	mov	fp, sp
   1ee08:	sub	sp, sp, #4
   1ee0c:	add	ip, fp, #8
   1ee10:	stm	ip, {r1, r2, r3}
   1ee14:	add	r1, fp, #8
   1ee18:	str	r1, [sp]
   1ee1c:	bl	202a8 <__assert_fail@plt+0xe81c>
   1ee20:	mov	sp, fp
   1ee24:	pop	{fp, lr}
   1ee28:	add	sp, sp, #12
   1ee2c:	bx	lr
   1ee30:	clz	r2, r1
   1ee34:	clz	r3, r0
   1ee38:	lsr	r2, r2, #5
   1ee3c:	lsr	r3, r3, #5
   1ee40:	orrs	r2, r3, r2
   1ee44:	movwne	r1, #1
   1ee48:	movwne	r0, #1
   1ee4c:	cmp	r1, #0
   1ee50:	beq	1ee80 <__assert_fail@plt+0xd3f4>
   1ee54:	mvn	r2, #-2147483648	; 0x80000000
   1ee58:	udiv	r2, r2, r1
   1ee5c:	cmp	r2, r0
   1ee60:	bcs	1ee80 <__assert_fail@plt+0xd3f4>
   1ee64:	push	{fp, lr}
   1ee68:	mov	fp, sp
   1ee6c:	bl	118e8 <__errno_location@plt>
   1ee70:	mov	r1, #12
   1ee74:	str	r1, [r0]
   1ee78:	mov	r0, #0
   1ee7c:	pop	{fp, pc}
   1ee80:	b	1166c <calloc@plt>
   1ee84:	cmp	r0, #0
   1ee88:	movweq	r0, #1
   1ee8c:	cmn	r0, #1
   1ee90:	ble	1ee98 <__assert_fail@plt+0xd40c>
   1ee94:	b	1181c <malloc@plt>
   1ee98:	push	{fp, lr}
   1ee9c:	mov	fp, sp
   1eea0:	bl	118e8 <__errno_location@plt>
   1eea4:	mov	r1, #12
   1eea8:	str	r1, [r0]
   1eeac:	mov	r0, #0
   1eeb0:	pop	{fp, pc}
   1eeb4:	push	{fp, lr}
   1eeb8:	mov	fp, sp
   1eebc:	cmp	r0, #0
   1eec0:	beq	1eedc <__assert_fail@plt+0xd450>
   1eec4:	cmp	r1, #0
   1eec8:	beq	1eee8 <__assert_fail@plt+0xd45c>
   1eecc:	cmn	r1, #1
   1eed0:	ble	1eef4 <__assert_fail@plt+0xd468>
   1eed4:	pop	{fp, lr}
   1eed8:	b	11738 <realloc@plt>
   1eedc:	mov	r0, r1
   1eee0:	pop	{fp, lr}
   1eee4:	b	1ee84 <__assert_fail@plt+0xd3f8>
   1eee8:	bl	18ea0 <__assert_fail@plt+0x7414>
   1eeec:	mov	r0, #0
   1eef0:	pop	{fp, pc}
   1eef4:	bl	118e8 <__errno_location@plt>
   1eef8:	mov	r1, #12
   1eefc:	str	r1, [r0]
   1ef00:	mov	r0, #0
   1ef04:	pop	{fp, pc}
   1ef08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef0c:	add	fp, sp, #28
   1ef10:	sub	sp, sp, #28
   1ef14:	sub	sp, sp, #1024	; 0x400
   1ef18:	ldrb	r3, [r0]
   1ef1c:	mov	r5, r0
   1ef20:	cmp	r3, #0
   1ef24:	beq	1efd0 <__assert_fail@plt+0xd544>
   1ef28:	mov	r0, #1
   1ef2c:	mov	r2, #0
   1ef30:	ldrb	r7, [r1, r2]
   1ef34:	cmp	r7, #0
   1ef38:	uxtbne	r3, r3
   1ef3c:	subne	r3, r3, r7
   1ef40:	clzne	r3, r3
   1ef44:	lsrne	r3, r3, #5
   1ef48:	andne	r0, r0, r3
   1ef4c:	addne	r3, r5, r2
   1ef50:	addne	r2, r2, #1
   1ef54:	ldrbne	r3, [r3, #1]
   1ef58:	cmpne	r3, #0
   1ef5c:	bne	1ef30 <__assert_fail@plt+0xd4a4>
   1ef60:	add	r4, r1, r2
   1ef64:	mov	r6, r5
   1ef68:	ldrb	r2, [r4]
   1ef6c:	cmp	r2, #0
   1ef70:	movwne	r6, #0
   1ef74:	tst	r0, #1
   1ef78:	cmpeq	r2, #0
   1ef7c:	bne	1efe0 <__assert_fail@plt+0xd554>
   1ef80:	sub	r8, r4, r1
   1ef84:	ldrb	r1, [r1]
   1ef88:	add	r0, r5, #1
   1ef8c:	bl	118b8 <strchr@plt>
   1ef90:	mov	r6, r0
   1ef94:	cmp	r8, #1
   1ef98:	cmpne	r6, #0
   1ef9c:	beq	1efe0 <__assert_fail@plt+0xd554>
   1efa0:	add	r0, r5, r8
   1efa4:	sub	r9, r4, r8
   1efa8:	str	r6, [sp, #20]
   1efac:	subs	r5, r0, r6
   1efb0:	movwcc	r5, #1
   1efb4:	cmp	r8, #31
   1efb8:	bhi	1efec <__assert_fail@plt+0xd560>
   1efbc:	cmp	r8, #3
   1efc0:	bcs	1f134 <__assert_fail@plt+0xd6a8>
   1efc4:	sub	r2, r8, #1
   1efc8:	mov	sl, #1
   1efcc:	b	1f774 <__assert_fail@plt+0xdce8>
   1efd0:	ldrb	r0, [r1]
   1efd4:	cmp	r0, #0
   1efd8:	movne	r5, #0
   1efdc:	mov	r6, r5
   1efe0:	mov	r0, r6
   1efe4:	sub	sp, fp, #28
   1efe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efec:	mvn	r1, #0
   1eff0:	mov	r0, #0
   1eff4:	mov	r2, #1
   1eff8:	mov	ip, #1
   1effc:	mov	r3, #1
   1f000:	add	r6, r1, r3
   1f004:	ldrb	r7, [r9, r2]
   1f008:	ldrb	r6, [r9, r6]
   1f00c:	cmp	r7, r6
   1f010:	bcs	1f030 <__assert_fail@plt+0xd5a4>
   1f014:	sub	ip, r2, r1
   1f018:	mov	r3, #1
   1f01c:	mov	r0, r2
   1f020:	add	r2, r3, r0
   1f024:	cmp	r2, r8
   1f028:	bcc	1f000 <__assert_fail@plt+0xd574>
   1f02c:	b	1f088 <__assert_fail@plt+0xd5fc>
   1f030:	bne	1f054 <__assert_fail@plt+0xd5c8>
   1f034:	cmp	r3, ip
   1f038:	bne	1f078 <__assert_fail@plt+0xd5ec>
   1f03c:	add	r0, r0, ip
   1f040:	mov	r3, #1
   1f044:	add	r2, r3, r0
   1f048:	cmp	r2, r8
   1f04c:	bcc	1f000 <__assert_fail@plt+0xd574>
   1f050:	b	1f088 <__assert_fail@plt+0xd5fc>
   1f054:	add	r2, r0, #1
   1f058:	mov	r1, r0
   1f05c:	mov	r3, #1
   1f060:	mov	ip, #1
   1f064:	mov	r0, r2
   1f068:	add	r2, r3, r0
   1f06c:	cmp	r2, r8
   1f070:	bcc	1f000 <__assert_fail@plt+0xd574>
   1f074:	b	1f088 <__assert_fail@plt+0xd5fc>
   1f078:	add	r3, r3, #1
   1f07c:	add	r2, r3, r0
   1f080:	cmp	r2, r8
   1f084:	bcc	1f000 <__assert_fail@plt+0xd574>
   1f088:	cmp	r8, #2
   1f08c:	bcc	1f27c <__assert_fail@plt+0xd7f0>
   1f090:	mvn	lr, #0
   1f094:	mov	r2, #0
   1f098:	mov	r3, #1
   1f09c:	mov	sl, #1
   1f0a0:	mov	r7, #1
   1f0a4:	add	r6, lr, r7
   1f0a8:	ldrb	r0, [r9, r3]
   1f0ac:	ldrb	r6, [r9, r6]
   1f0b0:	cmp	r6, r0
   1f0b4:	bcs	1f0d4 <__assert_fail@plt+0xd648>
   1f0b8:	sub	sl, r3, lr
   1f0bc:	mov	r7, #1
   1f0c0:	mov	r2, r3
   1f0c4:	add	r3, r7, r2
   1f0c8:	cmp	r3, r8
   1f0cc:	bcc	1f0a4 <__assert_fail@plt+0xd618>
   1f0d0:	b	1f284 <__assert_fail@plt+0xd7f8>
   1f0d4:	cmp	r0, r6
   1f0d8:	bne	1f0fc <__assert_fail@plt+0xd670>
   1f0dc:	cmp	r7, sl
   1f0e0:	bne	1f120 <__assert_fail@plt+0xd694>
   1f0e4:	add	r2, r2, sl
   1f0e8:	mov	r7, #1
   1f0ec:	add	r3, r7, r2
   1f0f0:	cmp	r3, r8
   1f0f4:	bcc	1f0a4 <__assert_fail@plt+0xd618>
   1f0f8:	b	1f284 <__assert_fail@plt+0xd7f8>
   1f0fc:	add	r0, r2, #1
   1f100:	mov	lr, r2
   1f104:	mov	r7, #1
   1f108:	mov	sl, #1
   1f10c:	mov	r2, r0
   1f110:	add	r3, r7, r2
   1f114:	cmp	r3, r8
   1f118:	bcc	1f0a4 <__assert_fail@plt+0xd618>
   1f11c:	b	1f284 <__assert_fail@plt+0xd7f8>
   1f120:	add	r7, r7, #1
   1f124:	add	r3, r7, r2
   1f128:	cmp	r3, r8
   1f12c:	bcc	1f0a4 <__assert_fail@plt+0xd618>
   1f130:	b	1f284 <__assert_fail@plt+0xd7f8>
   1f134:	mvn	r1, #0
   1f138:	mov	r0, #0
   1f13c:	mov	r2, #1
   1f140:	mov	ip, #1
   1f144:	mov	r3, #1
   1f148:	add	r6, r1, r3
   1f14c:	ldrb	r7, [r9, r2]
   1f150:	ldrb	r6, [r9, r6]
   1f154:	cmp	r7, r6
   1f158:	bcs	1f178 <__assert_fail@plt+0xd6ec>
   1f15c:	sub	ip, r2, r1
   1f160:	mov	r3, #1
   1f164:	mov	r0, r2
   1f168:	add	r2, r3, r0
   1f16c:	cmp	r2, r8
   1f170:	bcc	1f148 <__assert_fail@plt+0xd6bc>
   1f174:	b	1f1d0 <__assert_fail@plt+0xd744>
   1f178:	bne	1f19c <__assert_fail@plt+0xd710>
   1f17c:	cmp	r3, ip
   1f180:	bne	1f1c0 <__assert_fail@plt+0xd734>
   1f184:	add	r0, r0, ip
   1f188:	mov	r3, #1
   1f18c:	add	r2, r3, r0
   1f190:	cmp	r2, r8
   1f194:	bcc	1f148 <__assert_fail@plt+0xd6bc>
   1f198:	b	1f1d0 <__assert_fail@plt+0xd744>
   1f19c:	add	r2, r0, #1
   1f1a0:	mov	r1, r0
   1f1a4:	mov	r3, #1
   1f1a8:	mov	ip, #1
   1f1ac:	mov	r0, r2
   1f1b0:	add	r2, r3, r0
   1f1b4:	cmp	r2, r8
   1f1b8:	bcc	1f148 <__assert_fail@plt+0xd6bc>
   1f1bc:	b	1f1d0 <__assert_fail@plt+0xd744>
   1f1c0:	add	r3, r3, #1
   1f1c4:	add	r2, r3, r0
   1f1c8:	cmp	r2, r8
   1f1cc:	bcc	1f148 <__assert_fail@plt+0xd6bc>
   1f1d0:	cmp	r8, #2
   1f1d4:	bcc	1f758 <__assert_fail@plt+0xdccc>
   1f1d8:	mvn	r7, #0
   1f1dc:	mov	r2, #0
   1f1e0:	mov	r3, #1
   1f1e4:	mov	sl, #1
   1f1e8:	mov	r6, #1
   1f1ec:	add	r4, r7, r6
   1f1f0:	ldrb	r0, [r9, r3]
   1f1f4:	ldrb	r4, [r9, r4]
   1f1f8:	cmp	r4, r0
   1f1fc:	bcs	1f21c <__assert_fail@plt+0xd790>
   1f200:	sub	sl, r3, r7
   1f204:	mov	r6, #1
   1f208:	mov	r2, r3
   1f20c:	add	r3, r6, r2
   1f210:	cmp	r3, r8
   1f214:	bcc	1f1ec <__assert_fail@plt+0xd760>
   1f218:	b	1f760 <__assert_fail@plt+0xdcd4>
   1f21c:	cmp	r0, r4
   1f220:	bne	1f244 <__assert_fail@plt+0xd7b8>
   1f224:	cmp	r6, sl
   1f228:	bne	1f268 <__assert_fail@plt+0xd7dc>
   1f22c:	add	r2, r2, sl
   1f230:	mov	r6, #1
   1f234:	add	r3, r6, r2
   1f238:	cmp	r3, r8
   1f23c:	bcc	1f1ec <__assert_fail@plt+0xd760>
   1f240:	b	1f760 <__assert_fail@plt+0xdcd4>
   1f244:	add	r0, r2, #1
   1f248:	mov	r7, r2
   1f24c:	mov	r6, #1
   1f250:	mov	sl, #1
   1f254:	mov	r2, r0
   1f258:	add	r3, r6, r2
   1f25c:	cmp	r3, r8
   1f260:	bcc	1f1ec <__assert_fail@plt+0xd760>
   1f264:	b	1f760 <__assert_fail@plt+0xdcd4>
   1f268:	add	r6, r6, #1
   1f26c:	add	r3, r6, r2
   1f270:	cmp	r3, r8
   1f274:	bcc	1f1ec <__assert_fail@plt+0xd760>
   1f278:	b	1f760 <__assert_fail@plt+0xdcd4>
   1f27c:	mov	sl, #1
   1f280:	mvn	lr, #0
   1f284:	add	r6, sp, #24
   1f288:	vdup.32	q8, r8
   1f28c:	add	r2, lr, #1
   1f290:	add	r0, r6, #16
   1f294:	mov	r3, r6
   1f298:	vst1.32	{d16-d17}, [r0]
   1f29c:	add	r0, r6, #32
   1f2a0:	vst1.32	{d16-d17}, [r0]
   1f2a4:	add	r0, r6, #48	; 0x30
   1f2a8:	vst1.32	{d16-d17}, [r0]
   1f2ac:	add	r0, r6, #64	; 0x40
   1f2b0:	vst1.32	{d16-d17}, [r0]
   1f2b4:	add	r0, r6, #80	; 0x50
   1f2b8:	vst1.32	{d16-d17}, [r0]
   1f2bc:	add	r0, r6, #96	; 0x60
   1f2c0:	vst1.32	{d16-d17}, [r0]
   1f2c4:	add	r0, r6, #112	; 0x70
   1f2c8:	vst1.32	{d16-d17}, [r0]
   1f2cc:	add	r0, r6, #128	; 0x80
   1f2d0:	vst1.32	{d16-d17}, [r0]
   1f2d4:	add	r0, r6, #144	; 0x90
   1f2d8:	vst1.32	{d16-d17}, [r0]
   1f2dc:	add	r0, r6, #160	; 0xa0
   1f2e0:	vst1.32	{d16-d17}, [r0]
   1f2e4:	add	r0, r6, #176	; 0xb0
   1f2e8:	vst1.32	{d16-d17}, [r0]
   1f2ec:	add	r0, r6, #192	; 0xc0
   1f2f0:	vst1.32	{d16-d17}, [r0]
   1f2f4:	add	r0, r6, #208	; 0xd0
   1f2f8:	vst1.32	{d16-d17}, [r0]
   1f2fc:	add	r0, r6, #224	; 0xe0
   1f300:	vst1.32	{d16-d17}, [r0]
   1f304:	add	r0, r6, #240	; 0xf0
   1f308:	vst1.32	{d16-d17}, [r0]
   1f30c:	add	r0, r6, #256	; 0x100
   1f310:	vst1.32	{d16-d17}, [r0]
   1f314:	add	r0, r6, #272	; 0x110
   1f318:	vst1.32	{d16-d17}, [r0]
   1f31c:	add	r0, r6, #288	; 0x120
   1f320:	vst1.32	{d16-d17}, [r0]
   1f324:	mov	r0, #1008	; 0x3f0
   1f328:	vst1.32	{d16-d17}, [r3], r0
   1f32c:	add	r0, r6, #320	; 0x140
   1f330:	vst1.32	{d16-d17}, [r0]
   1f334:	add	r0, r6, #304	; 0x130
   1f338:	vst1.32	{d16-d17}, [r0]
   1f33c:	add	r0, r6, #336	; 0x150
   1f340:	vst1.32	{d16-d17}, [r0]
   1f344:	add	r0, r6, #352	; 0x160
   1f348:	vst1.32	{d16-d17}, [r0]
   1f34c:	add	r0, r6, #368	; 0x170
   1f350:	vst1.32	{d16-d17}, [r0]
   1f354:	add	r0, r6, #384	; 0x180
   1f358:	vst1.32	{d16-d17}, [r0]
   1f35c:	add	r0, r6, #400	; 0x190
   1f360:	vst1.32	{d16-d17}, [r0]
   1f364:	add	r0, r6, #416	; 0x1a0
   1f368:	vst1.32	{d16-d17}, [r0]
   1f36c:	add	r0, r6, #432	; 0x1b0
   1f370:	vst1.32	{d16-d17}, [r0]
   1f374:	add	r0, r6, #448	; 0x1c0
   1f378:	vst1.32	{d16-d17}, [r0]
   1f37c:	add	r0, r6, #464	; 0x1d0
   1f380:	vst1.32	{d16-d17}, [r0]
   1f384:	add	r0, r6, #480	; 0x1e0
   1f388:	vst1.32	{d16-d17}, [r0]
   1f38c:	add	r0, r6, #496	; 0x1f0
   1f390:	vst1.32	{d16-d17}, [r0]
   1f394:	add	r0, r6, #512	; 0x200
   1f398:	vst1.32	{d16-d17}, [r0]
   1f39c:	add	r0, r6, #528	; 0x210
   1f3a0:	vst1.32	{d16-d17}, [r0]
   1f3a4:	add	r0, r6, #544	; 0x220
   1f3a8:	vst1.32	{d16-d17}, [r0]
   1f3ac:	add	r0, r6, #560	; 0x230
   1f3b0:	vst1.32	{d16-d17}, [r0]
   1f3b4:	add	r0, r6, #576	; 0x240
   1f3b8:	vst1.32	{d16-d17}, [r0]
   1f3bc:	add	r0, r6, #592	; 0x250
   1f3c0:	vst1.32	{d16-d17}, [r0]
   1f3c4:	add	r0, r6, #624	; 0x270
   1f3c8:	vst1.32	{d16-d17}, [r0]
   1f3cc:	add	r0, r6, #608	; 0x260
   1f3d0:	vst1.32	{d16-d17}, [r0]
   1f3d4:	add	r0, r6, #640	; 0x280
   1f3d8:	vst1.32	{d16-d17}, [r0]
   1f3dc:	add	r0, r6, #656	; 0x290
   1f3e0:	vst1.32	{d16-d17}, [r0]
   1f3e4:	add	r0, r6, #672	; 0x2a0
   1f3e8:	vst1.32	{d16-d17}, [r0]
   1f3ec:	add	r0, r6, #688	; 0x2b0
   1f3f0:	vst1.32	{d16-d17}, [r0]
   1f3f4:	add	r0, r6, #704	; 0x2c0
   1f3f8:	vst1.32	{d16-d17}, [r0]
   1f3fc:	add	r0, r6, #720	; 0x2d0
   1f400:	vst1.32	{d16-d17}, [r0]
   1f404:	add	r0, r6, #736	; 0x2e0
   1f408:	vst1.32	{d16-d17}, [r0]
   1f40c:	add	r0, r6, #752	; 0x2f0
   1f410:	vst1.32	{d16-d17}, [r0]
   1f414:	add	r0, r6, #768	; 0x300
   1f418:	vst1.32	{d16-d17}, [r0]
   1f41c:	add	r0, r6, #784	; 0x310
   1f420:	vst1.32	{d16-d17}, [r0]
   1f424:	add	r0, r6, #800	; 0x320
   1f428:	vst1.32	{d16-d17}, [r0]
   1f42c:	add	r0, r6, #816	; 0x330
   1f430:	vst1.32	{d16-d17}, [r0]
   1f434:	add	r0, r6, #832	; 0x340
   1f438:	vst1.32	{d16-d17}, [r0]
   1f43c:	add	r0, r6, #848	; 0x350
   1f440:	vst1.32	{d16-d17}, [r0]
   1f444:	add	r0, r6, #864	; 0x360
   1f448:	vst1.32	{d16-d17}, [r0]
   1f44c:	add	r0, r6, #880	; 0x370
   1f450:	vst1.32	{d16-d17}, [r0]
   1f454:	add	r0, r6, #896	; 0x380
   1f458:	vst1.32	{d16-d17}, [r0]
   1f45c:	add	r0, r6, #928	; 0x3a0
   1f460:	vst1.32	{d16-d17}, [r0]
   1f464:	add	r0, r6, #912	; 0x390
   1f468:	vst1.32	{d16-d17}, [r0]
   1f46c:	add	r0, r6, #944	; 0x3b0
   1f470:	vst1.32	{d16-d17}, [r0]
   1f474:	add	r0, r6, #960	; 0x3c0
   1f478:	vst1.32	{d16-d17}, [r0]
   1f47c:	add	r0, r6, #976	; 0x3d0
   1f480:	vst1.32	{d16-d17}, [r0]
   1f484:	add	r0, r6, #992	; 0x3e0
   1f488:	vst1.32	{d16-d17}, [r0]
   1f48c:	add	r0, r1, #1
   1f490:	vst1.32	{d16-d17}, [r3]
   1f494:	cmp	r2, r0
   1f498:	movcc	sl, ip
   1f49c:	movcc	r2, r0
   1f4a0:	cmp	r8, #0
   1f4a4:	beq	1f4bc <__assert_fail@plt+0xda30>
   1f4a8:	mov	r0, r8
   1f4ac:	ldrb	r1, [r4, -r0]
   1f4b0:	subs	r0, r0, #1
   1f4b4:	str	r0, [r6, r1, lsl #2]
   1f4b8:	bne	1f4ac <__assert_fail@plt+0xda20>
   1f4bc:	add	r1, r9, sl
   1f4c0:	mov	r0, r9
   1f4c4:	mov	r4, r2
   1f4c8:	bl	11720 <memcmp@plt>
   1f4cc:	cmp	r0, #0
   1f4d0:	str	r4, [sp, #16]
   1f4d4:	beq	1f5fc <__assert_fail@plt+0xdb70>
   1f4d8:	ldr	r0, [sp, #20]
   1f4dc:	sub	r2, r8, r5
   1f4e0:	mov	r1, #0
   1f4e4:	mov	r6, #0
   1f4e8:	add	r0, r0, r5
   1f4ec:	bl	11948 <memchr@plt>
   1f4f0:	sub	r2, r8, r4
   1f4f4:	cmp	r4, r2
   1f4f8:	movcs	r2, r4
   1f4fc:	cmp	r8, #0
   1f500:	beq	1efe0 <__assert_fail@plt+0xd554>
   1f504:	ldr	lr, [sp, #20]
   1f508:	cmp	r0, #0
   1f50c:	str	r2, [sp, #12]
   1f510:	bne	1efe0 <__assert_fail@plt+0xd554>
   1f514:	sub	r5, r8, #1
   1f518:	mov	r1, r4
   1f51c:	cmp	r4, r5
   1f520:	bcs	1f998 <__assert_fail@plt+0xdf0c>
   1f524:	add	r0, lr, r1
   1f528:	add	sl, r9, r1
   1f52c:	mov	ip, #0
   1f530:	mov	r7, r8
   1f534:	str	r0, [sp, #8]
   1f538:	rsb	r0, r1, #1
   1f53c:	str	r0, [sp, #4]
   1f540:	add	r0, lr, r7
   1f544:	add	r3, sp, #24
   1f548:	mov	r4, r7
   1f54c:	ldrb	r2, [r0, #-1]
   1f550:	ldr	r2, [r3, r2, lsl #2]
   1f554:	cmp	r2, #0
   1f558:	beq	1f564 <__assert_fail@plt+0xdad8>
   1f55c:	add	ip, r2, ip
   1f560:	b	1f5c0 <__assert_fail@plt+0xdb34>
   1f564:	ldr	r2, [sp, #8]
   1f568:	add	r3, r2, ip
   1f56c:	mov	r2, #0
   1f570:	ldrb	r7, [r3, r2]
   1f574:	ldrb	r6, [sl, r2]
   1f578:	cmp	r6, r7
   1f57c:	bne	1f5b8 <__assert_fail@plt+0xdb2c>
   1f580:	add	r2, r2, #1
   1f584:	add	r7, r1, r2
   1f588:	cmp	r7, r5
   1f58c:	bcc	1f570 <__assert_fail@plt+0xdae4>
   1f590:	ldr	r3, [sp, #4]
   1f594:	add	r2, lr, ip
   1f598:	cmp	r3, #1
   1f59c:	beq	1fa28 <__assert_fail@plt+0xdf9c>
   1f5a0:	ldrb	r7, [r2, -r3]
   1f5a4:	ldrb	r6, [r9, -r3]
   1f5a8:	add	r3, r3, #1
   1f5ac:	cmp	r6, r7
   1f5b0:	beq	1f598 <__assert_fail@plt+0xdb0c>
   1f5b4:	ldr	r2, [sp, #12]
   1f5b8:	add	r2, ip, r2
   1f5bc:	add	ip, r2, #1
   1f5c0:	mov	r1, r4
   1f5c4:	add	r7, ip, r8
   1f5c8:	mov	r4, ip
   1f5cc:	mov	r6, #0
   1f5d0:	sub	r2, r7, r1
   1f5d4:	mov	r1, #0
   1f5d8:	bl	11948 <memchr@plt>
   1f5dc:	cmp	r7, #0
   1f5e0:	beq	1efe0 <__assert_fail@plt+0xd554>
   1f5e4:	ldr	lr, [sp, #20]
   1f5e8:	ldr	r1, [sp, #16]
   1f5ec:	cmp	r0, #0
   1f5f0:	mov	ip, r4
   1f5f4:	beq	1f540 <__assert_fail@plt+0xdab4>
   1f5f8:	b	1efe0 <__assert_fail@plt+0xd554>
   1f5fc:	ldr	r0, [sp, #20]
   1f600:	sub	r2, r8, r5
   1f604:	mov	r1, #0
   1f608:	mov	r6, #0
   1f60c:	add	r0, r0, r5
   1f610:	bl	11948 <memchr@plt>
   1f614:	cmp	r8, #0
   1f618:	beq	1efe0 <__assert_fail@plt+0xd554>
   1f61c:	ldr	lr, [sp, #20]
   1f620:	ldr	r7, [sp, #16]
   1f624:	cmp	r0, #0
   1f628:	str	sl, [sp, #12]
   1f62c:	bne	1efe0 <__assert_fail@plt+0xd554>
   1f630:	ldr	r0, [sp, #12]
   1f634:	sub	r5, r8, #1
   1f638:	mov	sl, #0
   1f63c:	mov	ip, r8
   1f640:	mov	r1, #0
   1f644:	sub	r0, r8, r0
   1f648:	str	r0, [sp, #8]
   1f64c:	sub	r0, r7, #1
   1f650:	str	r0, [sp, #4]
   1f654:	rsb	r0, r7, #0
   1f658:	str	r0, [sp]
   1f65c:	add	r0, lr, ip
   1f660:	add	r3, sp, #24
   1f664:	ldrb	r2, [r0, #-1]
   1f668:	ldr	r3, [r3, r2, lsl #2]
   1f66c:	cmp	r3, #0
   1f670:	beq	1f698 <__assert_fail@plt+0xdc0c>
   1f674:	ldr	r2, [sp, #12]
   1f678:	ldr	r7, [sp, #8]
   1f67c:	cmp	r3, r2
   1f680:	mov	r2, r3
   1f684:	movcc	r2, r7
   1f688:	cmp	sl, #0
   1f68c:	moveq	r2, r3
   1f690:	mov	sl, #0
   1f694:	b	1f708 <__assert_fail@plt+0xdc7c>
   1f698:	cmp	r7, sl
   1f69c:	mov	r2, r7
   1f6a0:	movcc	r2, sl
   1f6a4:	cmp	r2, r5
   1f6a8:	bcs	1f6cc <__assert_fail@plt+0xdc40>
   1f6ac:	add	r3, lr, r1
   1f6b0:	ldrb	r7, [r3, r2]
   1f6b4:	ldrb	r6, [r9, r2]
   1f6b8:	cmp	r6, r7
   1f6bc:	bne	1f748 <__assert_fail@plt+0xdcbc>
   1f6c0:	add	r2, r2, #1
   1f6c4:	cmp	r2, r5
   1f6c8:	bcc	1f6b0 <__assert_fail@plt+0xdc24>
   1f6cc:	ldr	r2, [sp, #4]
   1f6d0:	add	r6, lr, r1
   1f6d4:	add	r3, r2, #1
   1f6d8:	cmp	sl, r3
   1f6dc:	bcs	1f6f4 <__assert_fail@plt+0xdc68>
   1f6e0:	ldrb	r7, [r6, r2]
   1f6e4:	ldrb	r4, [r9, r2]
   1f6e8:	sub	r2, r2, #1
   1f6ec:	cmp	r4, r7
   1f6f0:	beq	1f6d4 <__assert_fail@plt+0xdc48>
   1f6f4:	add	r2, sl, #1
   1f6f8:	ldr	sl, [sp, #8]
   1f6fc:	cmp	r3, r2
   1f700:	ldr	r2, [sp, #12]
   1f704:	bcc	1efe0 <__assert_fail@plt+0xd554>
   1f708:	add	r1, r2, r1
   1f70c:	mov	r6, #0
   1f710:	add	r7, r1, r8
   1f714:	mov	r4, r1
   1f718:	mov	r1, #0
   1f71c:	sub	r2, r7, ip
   1f720:	bl	11948 <memchr@plt>
   1f724:	cmp	r7, #0
   1f728:	beq	1efe0 <__assert_fail@plt+0xd554>
   1f72c:	mov	ip, r7
   1f730:	ldr	lr, [sp, #20]
   1f734:	ldr	r7, [sp, #16]
   1f738:	cmp	r0, #0
   1f73c:	mov	r1, r4
   1f740:	beq	1f65c <__assert_fail@plt+0xdbd0>
   1f744:	b	1efe0 <__assert_fail@plt+0xd554>
   1f748:	ldr	r3, [sp]
   1f74c:	add	r2, r3, r2
   1f750:	add	r2, r2, #1
   1f754:	b	1f690 <__assert_fail@plt+0xdc04>
   1f758:	mov	sl, #1
   1f75c:	mvn	r7, #0
   1f760:	add	r0, r1, #1
   1f764:	add	r2, r7, #1
   1f768:	cmp	r2, r0
   1f76c:	movcc	sl, ip
   1f770:	movcc	r2, r0
   1f774:	add	r1, r9, sl
   1f778:	mov	r0, r9
   1f77c:	mov	r4, r2
   1f780:	bl	11720 <memcmp@plt>
   1f784:	cmp	r0, #0
   1f788:	str	r4, [sp, #16]
   1f78c:	beq	1f880 <__assert_fail@plt+0xddf4>
   1f790:	ldr	r0, [sp, #20]
   1f794:	sub	r2, r8, r5
   1f798:	mov	r1, #0
   1f79c:	mov	r6, #0
   1f7a0:	add	r0, r0, r5
   1f7a4:	bl	11948 <memchr@plt>
   1f7a8:	sub	r5, r8, r4
   1f7ac:	cmp	r4, r5
   1f7b0:	movcs	r5, r4
   1f7b4:	cmp	r8, #0
   1f7b8:	beq	1efe0 <__assert_fail@plt+0xd554>
   1f7bc:	ldr	ip, [sp, #20]
   1f7c0:	cmp	r0, #0
   1f7c4:	bne	1efe0 <__assert_fail@plt+0xd554>
   1f7c8:	cmp	r8, r4
   1f7cc:	bls	1fa38 <__assert_fail@plt+0xdfac>
   1f7d0:	add	r0, ip, r4
   1f7d4:	add	r7, r9, r4
   1f7d8:	mov	sl, #0
   1f7dc:	mov	r1, r8
   1f7e0:	str	r0, [sp, #12]
   1f7e4:	rsb	r0, r4, #1
   1f7e8:	str	r0, [sp, #8]
   1f7ec:	ldr	r0, [sp, #12]
   1f7f0:	mov	r2, #0
   1f7f4:	add	r0, r0, sl
   1f7f8:	ldrb	r3, [r0, r2]
   1f7fc:	ldrb	r6, [r7, r2]
   1f800:	cmp	r6, r3
   1f804:	bne	1f840 <__assert_fail@plt+0xddb4>
   1f808:	add	r2, r2, #1
   1f80c:	add	r3, r4, r2
   1f810:	cmp	r3, r8
   1f814:	bcc	1f7f8 <__assert_fail@plt+0xdd6c>
   1f818:	ldr	r2, [sp, #8]
   1f81c:	add	r0, ip, sl
   1f820:	cmp	r2, #1
   1f824:	beq	1fab0 <__assert_fail@plt+0xe024>
   1f828:	ldrb	r3, [r0, -r2]
   1f82c:	ldrb	r6, [r9, -r2]
   1f830:	add	r2, r2, #1
   1f834:	cmp	r6, r3
   1f838:	beq	1f820 <__assert_fail@plt+0xdd94>
   1f83c:	mov	r2, r5
   1f840:	add	r2, sl, r2
   1f844:	add	r0, ip, r1
   1f848:	mov	r6, #0
   1f84c:	add	sl, r2, #1
   1f850:	add	r4, sl, r8
   1f854:	sub	r2, r4, r1
   1f858:	mov	r1, #0
   1f85c:	bl	11948 <memchr@plt>
   1f860:	cmp	r0, #0
   1f864:	bne	1efe0 <__assert_fail@plt+0xd554>
   1f868:	cmp	r4, #0
   1f86c:	mov	r1, r4
   1f870:	ldr	ip, [sp, #20]
   1f874:	ldr	r4, [sp, #16]
   1f878:	bne	1f7ec <__assert_fail@plt+0xdd60>
   1f87c:	b	1efe0 <__assert_fail@plt+0xd554>
   1f880:	ldr	r0, [sp, #20]
   1f884:	sub	r2, r8, r5
   1f888:	mov	r1, #0
   1f88c:	mov	r6, #0
   1f890:	add	r0, r0, r5
   1f894:	bl	11948 <memchr@plt>
   1f898:	cmp	r8, #0
   1f89c:	beq	1efe0 <__assert_fail@plt+0xd554>
   1f8a0:	cmp	r0, #0
   1f8a4:	ldr	r4, [sp, #20]
   1f8a8:	ldr	r0, [sp, #16]
   1f8ac:	str	sl, [sp, #12]
   1f8b0:	bne	1efe0 <__assert_fail@plt+0xd554>
   1f8b4:	ldr	r1, [sp, #12]
   1f8b8:	mov	sl, #0
   1f8bc:	mov	r5, #0
   1f8c0:	sub	r1, r8, r1
   1f8c4:	str	r1, [sp, #8]
   1f8c8:	sub	r1, r0, #1
   1f8cc:	str	r1, [sp, #4]
   1f8d0:	rsb	r1, r0, #0
   1f8d4:	str	r1, [sp]
   1f8d8:	mov	r1, r8
   1f8dc:	cmp	r0, sl
   1f8e0:	movcc	r0, sl
   1f8e4:	cmp	r0, r8
   1f8e8:	bcs	1f90c <__assert_fail@plt+0xde80>
   1f8ec:	add	r2, r4, r5
   1f8f0:	ldrb	r3, [r2, r0]
   1f8f4:	ldrb	r7, [r9, r0]
   1f8f8:	cmp	r7, r3
   1f8fc:	bne	1f94c <__assert_fail@plt+0xdec0>
   1f900:	add	r0, r0, #1
   1f904:	cmp	r0, r8
   1f908:	bcc	1f8f0 <__assert_fail@plt+0xde64>
   1f90c:	ldr	r0, [sp, #4]
   1f910:	add	r6, r4, r5
   1f914:	add	r2, r0, #1
   1f918:	cmp	sl, r2
   1f91c:	bcs	1f934 <__assert_fail@plt+0xdea8>
   1f920:	ldrb	r3, [r6, r0]
   1f924:	ldrb	r7, [r9, r0]
   1f928:	sub	r0, r0, #1
   1f92c:	cmp	r7, r3
   1f930:	beq	1f914 <__assert_fail@plt+0xde88>
   1f934:	add	r0, sl, #1
   1f938:	ldr	sl, [sp, #8]
   1f93c:	cmp	r2, r0
   1f940:	ldr	r2, [sp, #12]
   1f944:	bcs	1f95c <__assert_fail@plt+0xded0>
   1f948:	b	1efe0 <__assert_fail@plt+0xd554>
   1f94c:	ldr	r2, [sp]
   1f950:	mov	sl, #0
   1f954:	add	r0, r2, r0
   1f958:	add	r2, r0, #1
   1f95c:	add	r5, r2, r5
   1f960:	add	r0, r4, r1
   1f964:	mov	r6, #0
   1f968:	add	r7, r5, r8
   1f96c:	sub	r2, r7, r1
   1f970:	mov	r1, #0
   1f974:	bl	11948 <memchr@plt>
   1f978:	cmp	r7, #0
   1f97c:	beq	1efe0 <__assert_fail@plt+0xd554>
   1f980:	cmp	r0, #0
   1f984:	ldr	r4, [sp, #20]
   1f988:	ldr	r0, [sp, #16]
   1f98c:	mov	r1, r7
   1f990:	beq	1f8dc <__assert_fail@plt+0xde50>
   1f994:	b	1efe0 <__assert_fail@plt+0xd554>
   1f998:	ldr	r0, [sp, #12]
   1f99c:	rsb	r5, r1, #1
   1f9a0:	mov	ip, #0
   1f9a4:	mov	r1, r8
   1f9a8:	add	sl, r0, #1
   1f9ac:	add	r0, lr, r1
   1f9b0:	add	r3, sp, #24
   1f9b4:	ldrb	r2, [r0, #-1]
   1f9b8:	ldr	r2, [r3, r2, lsl #2]
   1f9bc:	cmp	r2, #0
   1f9c0:	bne	1f9ec <__assert_fail@plt+0xdf60>
   1f9c4:	add	r2, lr, ip
   1f9c8:	mov	r3, r5
   1f9cc:	cmp	r3, #1
   1f9d0:	beq	1fa28 <__assert_fail@plt+0xdf9c>
   1f9d4:	ldrb	r7, [r2, -r3]
   1f9d8:	ldrb	r6, [r9, -r3]
   1f9dc:	add	r3, r3, #1
   1f9e0:	cmp	r6, r7
   1f9e4:	beq	1f9cc <__assert_fail@plt+0xdf40>
   1f9e8:	mov	r2, sl
   1f9ec:	add	ip, r2, ip
   1f9f0:	mov	r6, #0
   1f9f4:	add	r7, ip, r8
   1f9f8:	mov	r4, ip
   1f9fc:	sub	r2, r7, r1
   1fa00:	mov	r1, #0
   1fa04:	bl	11948 <memchr@plt>
   1fa08:	cmp	r7, #0
   1fa0c:	beq	1efe0 <__assert_fail@plt+0xd554>
   1fa10:	ldr	lr, [sp, #20]
   1fa14:	cmp	r0, #0
   1fa18:	mov	r1, r7
   1fa1c:	mov	ip, r4
   1fa20:	beq	1f9ac <__assert_fail@plt+0xdf20>
   1fa24:	b	1efe0 <__assert_fail@plt+0xd554>
   1fa28:	add	r6, lr, ip
   1fa2c:	mov	r0, r6
   1fa30:	sub	sp, fp, #28
   1fa34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa38:	rsb	r4, r4, #1
   1fa3c:	add	r5, r5, #1
   1fa40:	mov	sl, #0
   1fa44:	mov	r7, ip
   1fa48:	mov	r0, r8
   1fa4c:	mov	r1, r4
   1fa50:	cmp	r1, #1
   1fa54:	beq	1fab0 <__assert_fail@plt+0xe024>
   1fa58:	ldrb	r6, [r7, -r1]
   1fa5c:	ldrb	r3, [r9, -r1]
   1fa60:	add	r1, r1, #1
   1fa64:	cmp	r3, r6
   1fa68:	beq	1fa50 <__assert_fail@plt+0xdfc4>
   1fa6c:	add	sl, r5, sl
   1fa70:	add	r0, ip, r0
   1fa74:	mov	r1, #0
   1fa78:	mov	r2, r5
   1fa7c:	str	r4, [sp, #16]
   1fa80:	mov	r6, #0
   1fa84:	add	r4, sl, r8
   1fa88:	bl	11948 <memchr@plt>
   1fa8c:	cmp	r4, #0
   1fa90:	beq	1efe0 <__assert_fail@plt+0xd554>
   1fa94:	cmp	r0, #0
   1fa98:	mov	r0, r4
   1fa9c:	ldr	ip, [sp, #20]
   1faa0:	ldr	r4, [sp, #16]
   1faa4:	add	r7, r7, r5
   1faa8:	beq	1fa4c <__assert_fail@plt+0xdfc0>
   1faac:	b	1efe0 <__assert_fail@plt+0xd554>
   1fab0:	add	r6, ip, sl
   1fab4:	mov	r0, r6
   1fab8:	sub	sp, fp, #28
   1fabc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fac0:	sub	r0, r0, #1
   1fac4:	ldrb	r3, [r0, #1]!
   1fac8:	cmp	r3, #47	; 0x2f
   1facc:	beq	1fac4 <__assert_fail@plt+0xe038>
   1fad0:	mov	r2, #0
   1fad4:	mov	r1, r0
   1fad8:	uxtb	r3, r3
   1fadc:	cmp	r3, #47	; 0x2f
   1fae0:	beq	1fb08 <__assert_fail@plt+0xe07c>
   1fae4:	cmp	r3, #0
   1fae8:	bxeq	lr
   1faec:	tst	r2, #1
   1faf0:	mov	r2, #0
   1faf4:	movne	r0, r1
   1faf8:	ldrb	r3, [r1, #1]!
   1fafc:	uxtb	r3, r3
   1fb00:	cmp	r3, #47	; 0x2f
   1fb04:	bne	1fae4 <__assert_fail@plt+0xe058>
   1fb08:	ldrb	r3, [r1, #1]!
   1fb0c:	mov	r2, #1
   1fb10:	uxtb	r3, r3
   1fb14:	cmp	r3, #47	; 0x2f
   1fb18:	bne	1fae4 <__assert_fail@plt+0xe058>
   1fb1c:	b	1fb08 <__assert_fail@plt+0xe07c>
   1fb20:	push	{r4, sl, fp, lr}
   1fb24:	add	fp, sp, #8
   1fb28:	mov	r4, r0
   1fb2c:	bl	118ac <strlen@plt>
   1fb30:	mov	r1, r0
   1fb34:	sub	r2, r4, #1
   1fb38:	mov	r0, r1
   1fb3c:	cmp	r1, #2
   1fb40:	popcc	{r4, sl, fp, pc}
   1fb44:	ldrb	r3, [r2, r0]
   1fb48:	sub	r1, r0, #1
   1fb4c:	cmp	r3, #47	; 0x2f
   1fb50:	beq	1fb38 <__assert_fail@plt+0xe0ac>
   1fb54:	pop	{r4, sl, fp, pc}
   1fb58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb5c:	add	fp, sp, #28
   1fb60:	sub	sp, sp, #4
   1fb64:	mov	r4, r0
   1fb68:	bl	11768 <chdir@plt>
   1fb6c:	cmp	r0, #0
   1fb70:	beq	1fc40 <__assert_fail@plt+0xe1b4>
   1fb74:	mov	r6, r0
   1fb78:	bl	118e8 <__errno_location@plt>
   1fb7c:	mov	r9, r0
   1fb80:	ldr	r0, [r0]
   1fb84:	cmp	r0, #36	; 0x24
   1fb88:	bne	1fd94 <__assert_fail@plt+0xe308>
   1fb8c:	mov	r0, r4
   1fb90:	bl	118ac <strlen@plt>
   1fb94:	cmp	r0, #0
   1fb98:	beq	1febc <__assert_fail@plt+0xe430>
   1fb9c:	mov	r7, r0
   1fba0:	mov	r0, #0
   1fba4:	cmp	r0, r7, lsr #12
   1fba8:	beq	1fedc <__assert_fail@plt+0xe450>
   1fbac:	movw	r1, #10389	; 0x2895
   1fbb0:	mov	r0, r4
   1fbb4:	movt	r1, #2
   1fbb8:	bl	11a80 <strspn@plt>
   1fbbc:	cmp	r0, #0
   1fbc0:	beq	1fc50 <__assert_fail@plt+0xe1c4>
   1fbc4:	mov	r6, r0
   1fbc8:	cmp	r0, #2
   1fbcc:	bne	1fda0 <__assert_fail@plt+0xe314>
   1fbd0:	add	r0, r4, #3
   1fbd4:	sub	r2, r7, #3
   1fbd8:	mov	r1, #47	; 0x2f
   1fbdc:	mov	r8, #47	; 0x2f
   1fbe0:	bl	11948 <memchr@plt>
   1fbe4:	cmp	r0, #0
   1fbe8:	beq	1fdf8 <__assert_fail@plt+0xe36c>
   1fbec:	mov	r6, r0
   1fbf0:	mov	r0, #0
   1fbf4:	mov	r1, r4
   1fbf8:	mov	r2, #18688	; 0x4900
   1fbfc:	strb	r0, [r6]
   1fc00:	mvn	r0, #99	; 0x63
   1fc04:	bl	118d0 <openat64@plt>
   1fc08:	cmp	r0, #0
   1fc0c:	strb	r8, [r6]
   1fc10:	blt	1fdf0 <__assert_fail@plt+0xe364>
   1fc14:	movw	r1, #10389	; 0x2895
   1fc18:	add	r6, r6, #1
   1fc1c:	mov	r5, r0
   1fc20:	movt	r1, #2
   1fc24:	mov	r0, r6
   1fc28:	bl	11a80 <strspn@plt>
   1fc2c:	add	r6, r6, r0
   1fc30:	ldrb	r0, [r6]
   1fc34:	cmp	r0, #47	; 0x2f
   1fc38:	bne	1fc64 <__assert_fail@plt+0xe1d8>
   1fc3c:	b	1fdd0 <__assert_fail@plt+0xe344>
   1fc40:	mov	r6, #0
   1fc44:	mov	r0, r6
   1fc48:	sub	sp, fp, #28
   1fc4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc50:	mvn	r5, #99	; 0x63
   1fc54:	mov	r6, r4
   1fc58:	ldrb	r0, [r6]
   1fc5c:	cmp	r0, #47	; 0x2f
   1fc60:	beq	1fdd0 <__assert_fail@plt+0xe344>
   1fc64:	add	sl, r4, r7
   1fc68:	cmp	r6, sl
   1fc6c:	bhi	1fefc <__assert_fail@plt+0xe470>
   1fc70:	sub	r0, sl, r6
   1fc74:	str	r9, [sp]
   1fc78:	cmp	r0, #4096	; 0x1000
   1fc7c:	blt	1fd54 <__assert_fail@plt+0xe2c8>
   1fc80:	movw	r9, #10389	; 0x2895
   1fc84:	mov	r8, #0
   1fc88:	movt	r9, #2
   1fc8c:	mov	r0, r6
   1fc90:	mov	r1, #47	; 0x2f
   1fc94:	mov	r2, #4096	; 0x1000
   1fc98:	bl	118dc <memrchr@plt>
   1fc9c:	cmp	r0, #0
   1fca0:	beq	1fe10 <__assert_fail@plt+0xe384>
   1fca4:	mov	r4, r0
   1fca8:	strb	r8, [r0], -r6
   1fcac:	cmp	r0, #4096	; 0x1000
   1fcb0:	bge	1fe7c <__assert_fail@plt+0xe3f0>
   1fcb4:	mov	r0, r5
   1fcb8:	mov	r1, r6
   1fcbc:	mov	r2, #18688	; 0x4900
   1fcc0:	bl	118d0 <openat64@plt>
   1fcc4:	cmp	r0, #0
   1fcc8:	blt	1fe2c <__assert_fail@plt+0xe3a0>
   1fccc:	mov	r7, r0
   1fcd0:	cmp	r5, #0
   1fcd4:	blt	1fce8 <__assert_fail@plt+0xe25c>
   1fcd8:	mov	r0, r5
   1fcdc:	bl	11a68 <close@plt>
   1fce0:	cmp	r0, #0
   1fce4:	bne	1fe9c <__assert_fail@plt+0xe410>
   1fce8:	mov	r0, #47	; 0x2f
   1fcec:	mov	r1, r9
   1fcf0:	strb	r0, [r4], #1
   1fcf4:	mov	r0, r4
   1fcf8:	bl	11a80 <strspn@plt>
   1fcfc:	add	r6, r4, r0
   1fd00:	mov	r5, r7
   1fd04:	sub	r0, sl, r6
   1fd08:	cmp	r0, #4096	; 0x1000
   1fd0c:	bge	1fc8c <__assert_fail@plt+0xe200>
   1fd10:	cmp	r6, sl
   1fd14:	bcs	1fd60 <__assert_fail@plt+0xe2d4>
   1fd18:	mov	r0, r7
   1fd1c:	mov	r1, r6
   1fd20:	mov	r2, #18688	; 0x4900
   1fd24:	bl	118d0 <openat64@plt>
   1fd28:	ldr	r9, [sp]
   1fd2c:	cmp	r0, #0
   1fd30:	blt	1fe68 <__assert_fail@plt+0xe3dc>
   1fd34:	mov	r5, r0
   1fd38:	cmp	r7, #0
   1fd3c:	blt	1fd68 <__assert_fail@plt+0xe2dc>
   1fd40:	mov	r0, r7
   1fd44:	bl	11a68 <close@plt>
   1fd48:	cmp	r0, #0
   1fd4c:	beq	1fd68 <__assert_fail@plt+0xe2dc>
   1fd50:	b	1fe9c <__assert_fail@plt+0xe410>
   1fd54:	mov	r7, r5
   1fd58:	cmp	r6, sl
   1fd5c:	bcc	1fd18 <__assert_fail@plt+0xe28c>
   1fd60:	ldr	r9, [sp]
   1fd64:	mov	r5, r7
   1fd68:	mov	r0, r5
   1fd6c:	bl	119f0 <fchdir@plt>
   1fd70:	cmp	r0, #0
   1fd74:	bne	1fe38 <__assert_fail@plt+0xe3ac>
   1fd78:	mov	r6, #0
   1fd7c:	cmp	r5, #0
   1fd80:	blt	1fd94 <__assert_fail@plt+0xe308>
   1fd84:	mov	r0, r5
   1fd88:	bl	11a68 <close@plt>
   1fd8c:	cmp	r0, #0
   1fd90:	bne	1fe9c <__assert_fail@plt+0xe410>
   1fd94:	mov	r0, r6
   1fd98:	sub	sp, fp, #28
   1fd9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fda0:	movw	r1, #10389	; 0x2895
   1fda4:	mvn	r0, #99	; 0x63
   1fda8:	mov	r2, #18688	; 0x4900
   1fdac:	movt	r1, #2
   1fdb0:	bl	118d0 <openat64@plt>
   1fdb4:	cmp	r0, #0
   1fdb8:	blt	1fdf0 <__assert_fail@plt+0xe364>
   1fdbc:	mov	r5, r0
   1fdc0:	add	r6, r4, r6
   1fdc4:	ldrb	r0, [r6]
   1fdc8:	cmp	r0, #47	; 0x2f
   1fdcc:	bne	1fc64 <__assert_fail@plt+0xe1d8>
   1fdd0:	movw	r0, #10515	; 0x2913
   1fdd4:	movw	r1, #10463	; 0x28df
   1fdd8:	movw	r3, #10480	; 0x28f0
   1fddc:	mov	r2, #162	; 0xa2
   1fde0:	movt	r0, #2
   1fde4:	movt	r1, #2
   1fde8:	movt	r3, #2
   1fdec:	bl	11a8c <__assert_fail@plt>
   1fdf0:	ldr	r4, [r9]
   1fdf4:	b	1fe54 <__assert_fail@plt+0xe3c8>
   1fdf8:	mov	r0, #36	; 0x24
   1fdfc:	str	r0, [r9]
   1fe00:	mvn	r6, #0
   1fe04:	mov	r0, r6
   1fe08:	sub	sp, fp, #28
   1fe0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe10:	ldr	r1, [sp]
   1fe14:	mov	r0, #36	; 0x24
   1fe18:	str	r0, [r1]
   1fe1c:	mvn	r6, #0
   1fe20:	mov	r0, r6
   1fe24:	sub	sp, fp, #28
   1fe28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe2c:	ldr	r9, [sp]
   1fe30:	mov	r0, #47	; 0x2f
   1fe34:	strb	r0, [r4]
   1fe38:	ldr	r4, [r9]
   1fe3c:	cmp	r5, #0
   1fe40:	blt	1fe54 <__assert_fail@plt+0xe3c8>
   1fe44:	mov	r0, r5
   1fe48:	bl	11a68 <close@plt>
   1fe4c:	cmp	r0, #0
   1fe50:	bne	1fe9c <__assert_fail@plt+0xe410>
   1fe54:	str	r4, [r9]
   1fe58:	mvn	r6, #0
   1fe5c:	mov	r0, r6
   1fe60:	sub	sp, fp, #28
   1fe64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe68:	mov	r5, r7
   1fe6c:	ldr	r4, [r9]
   1fe70:	cmp	r5, #0
   1fe74:	bge	1fe44 <__assert_fail@plt+0xe3b8>
   1fe78:	b	1fe54 <__assert_fail@plt+0xe3c8>
   1fe7c:	movw	r0, #10542	; 0x292e
   1fe80:	movw	r1, #10463	; 0x28df
   1fe84:	movw	r3, #10480	; 0x28f0
   1fe88:	mov	r2, #179	; 0xb3
   1fe8c:	movt	r0, #2
   1fe90:	movt	r1, #2
   1fe94:	movt	r3, #2
   1fe98:	bl	11a8c <__assert_fail@plt>
   1fe9c:	movw	r0, #10561	; 0x2941
   1fea0:	movw	r1, #10463	; 0x28df
   1fea4:	movw	r3, #10574	; 0x294e
   1fea8:	mov	r2, #64	; 0x40
   1feac:	movt	r0, #2
   1feb0:	movt	r1, #2
   1feb4:	movt	r3, #2
   1feb8:	bl	11a8c <__assert_fail@plt>
   1febc:	movw	r0, #10455	; 0x28d7
   1fec0:	movw	r1, #10463	; 0x28df
   1fec4:	movw	r3, #10480	; 0x28f0
   1fec8:	mov	r2, #126	; 0x7e
   1fecc:	movt	r0, #2
   1fed0:	movt	r1, #2
   1fed4:	movt	r3, #2
   1fed8:	bl	11a8c <__assert_fail@plt>
   1fedc:	movw	r0, #10503	; 0x2907
   1fee0:	movw	r1, #10463	; 0x28df
   1fee4:	movw	r3, #10480	; 0x28f0
   1fee8:	mov	r2, #127	; 0x7f
   1feec:	movt	r0, #2
   1fef0:	movt	r1, #2
   1fef4:	movt	r3, #2
   1fef8:	bl	11a8c <__assert_fail@plt>
   1fefc:	movw	r0, #10527	; 0x291f
   1ff00:	movw	r1, #10463	; 0x28df
   1ff04:	movw	r3, #10480	; 0x28f0
   1ff08:	mov	r2, #163	; 0xa3
   1ff0c:	movt	r0, #2
   1ff10:	movt	r1, #2
   1ff14:	movt	r3, #2
   1ff18:	bl	11a8c <__assert_fail@plt>
   1ff1c:	push	{r4, r5, r6, sl, fp, lr}
   1ff20:	add	fp, sp, #16
   1ff24:	mov	r4, r0
   1ff28:	bl	117c8 <__fpending@plt>
   1ff2c:	ldr	r6, [r4]
   1ff30:	mov	r5, r0
   1ff34:	mov	r0, r4
   1ff38:	bl	1ffa0 <__assert_fail@plt+0xe514>
   1ff3c:	tst	r6, #32
   1ff40:	bne	1ff78 <__assert_fail@plt+0xe4ec>
   1ff44:	cmp	r0, #0
   1ff48:	mov	r4, r0
   1ff4c:	mvnne	r4, #0
   1ff50:	cmp	r5, #0
   1ff54:	bne	1ff84 <__assert_fail@plt+0xe4f8>
   1ff58:	cmp	r0, #0
   1ff5c:	beq	1ff84 <__assert_fail@plt+0xe4f8>
   1ff60:	bl	118e8 <__errno_location@plt>
   1ff64:	ldr	r0, [r0]
   1ff68:	subs	r4, r0, #9
   1ff6c:	mvnne	r4, #0
   1ff70:	mov	r0, r4
   1ff74:	pop	{r4, r5, r6, sl, fp, pc}
   1ff78:	mvn	r4, #0
   1ff7c:	cmp	r0, #0
   1ff80:	beq	1ff8c <__assert_fail@plt+0xe500>
   1ff84:	mov	r0, r4
   1ff88:	pop	{r4, r5, r6, sl, fp, pc}
   1ff8c:	bl	118e8 <__errno_location@plt>
   1ff90:	mov	r1, #0
   1ff94:	str	r1, [r0]
   1ff98:	mov	r0, r4
   1ff9c:	pop	{r4, r5, r6, sl, fp, pc}
   1ffa0:	push	{r4, r5, r6, sl, fp, lr}
   1ffa4:	add	fp, sp, #16
   1ffa8:	sub	sp, sp, #8
   1ffac:	mov	r4, r0
   1ffb0:	bl	11930 <fileno@plt>
   1ffb4:	cmn	r0, #1
   1ffb8:	ble	2002c <__assert_fail@plt+0xe5a0>
   1ffbc:	mov	r0, r4
   1ffc0:	bl	11840 <__freading@plt>
   1ffc4:	cmp	r0, #0
   1ffc8:	beq	1fff4 <__assert_fail@plt+0xe568>
   1ffcc:	mov	r0, r4
   1ffd0:	bl	11930 <fileno@plt>
   1ffd4:	mov	r1, #1
   1ffd8:	mov	r2, #0
   1ffdc:	mov	r3, #0
   1ffe0:	str	r1, [sp]
   1ffe4:	bl	117a4 <lseek64@plt>
   1ffe8:	and	r0, r0, r1
   1ffec:	cmn	r0, #1
   1fff0:	beq	2002c <__assert_fail@plt+0xe5a0>
   1fff4:	mov	r0, r4
   1fff8:	bl	20084 <__assert_fail@plt+0xe5f8>
   1fffc:	cmp	r0, #0
   20000:	beq	2002c <__assert_fail@plt+0xe5a0>
   20004:	bl	118e8 <__errno_location@plt>
   20008:	ldr	r6, [r0]
   2000c:	mov	r5, r0
   20010:	mov	r0, r4
   20014:	bl	11954 <fclose@plt>
   20018:	cmp	r6, #0
   2001c:	strne	r6, [r5]
   20020:	mvnne	r0, #0
   20024:	sub	sp, fp, #16
   20028:	pop	{r4, r5, r6, sl, fp, pc}
   2002c:	mov	r0, r4
   20030:	sub	sp, fp, #16
   20034:	pop	{r4, r5, r6, sl, fp, lr}
   20038:	b	11954 <fclose@plt>
   2003c:	sub	sp, sp, #8
   20040:	push	{fp, lr}
   20044:	mov	fp, sp
   20048:	sub	sp, sp, #8
   2004c:	str	r2, [fp, #8]
   20050:	mov	r2, #0
   20054:	tst	r1, #64	; 0x40
   20058:	str	r3, [fp, #12]
   2005c:	addne	r2, fp, #8
   20060:	orrne	r2, r2, #4
   20064:	strne	r2, [sp, #4]
   20068:	ldrne	r2, [fp, #8]
   2006c:	bl	117f8 <open64@plt>
   20070:	bl	20264 <__assert_fail@plt+0xe7d8>
   20074:	mov	sp, fp
   20078:	pop	{fp, lr}
   2007c:	add	sp, sp, #8
   20080:	bx	lr
   20084:	push	{r4, sl, fp, lr}
   20088:	add	fp, sp, #8
   2008c:	sub	sp, sp, #8
   20090:	mov	r4, r0
   20094:	cmp	r0, #0
   20098:	beq	200b4 <__assert_fail@plt+0xe628>
   2009c:	mov	r0, r4
   200a0:	bl	11840 <__freading@plt>
   200a4:	cmp	r0, #0
   200a8:	ldrbne	r0, [r4, #1]
   200ac:	tstne	r0, #1
   200b0:	bne	200c4 <__assert_fail@plt+0xe638>
   200b4:	mov	r0, r4
   200b8:	sub	sp, fp, #8
   200bc:	pop	{r4, sl, fp, lr}
   200c0:	b	116e4 <fflush@plt>
   200c4:	mov	r0, #1
   200c8:	mov	r2, #0
   200cc:	mov	r3, #0
   200d0:	str	r0, [sp]
   200d4:	mov	r0, r4
   200d8:	bl	200ec <__assert_fail@plt+0xe660>
   200dc:	mov	r0, r4
   200e0:	sub	sp, fp, #8
   200e4:	pop	{r4, sl, fp, lr}
   200e8:	b	116e4 <fflush@plt>
   200ec:	push	{r4, r5, r6, r7, fp, lr}
   200f0:	add	fp, sp, #16
   200f4:	sub	sp, sp, #8
   200f8:	mov	r4, r0
   200fc:	ldr	r0, [r0, #4]
   20100:	mov	r5, r3
   20104:	mov	r6, r2
   20108:	ldr	r1, [r4, #8]
   2010c:	cmp	r1, r0
   20110:	bne	2012c <__assert_fail@plt+0xe6a0>
   20114:	ldrd	r0, [r4, #16]
   20118:	cmp	r1, r0
   2011c:	bne	2012c <__assert_fail@plt+0xe6a0>
   20120:	ldr	r0, [r4, #36]	; 0x24
   20124:	cmp	r0, #0
   20128:	beq	20144 <__assert_fail@plt+0xe6b8>
   2012c:	mov	r0, r4
   20130:	mov	r2, r6
   20134:	mov	r3, r5
   20138:	sub	sp, fp, #16
   2013c:	pop	{r4, r5, r6, r7, fp, lr}
   20140:	b	11960 <fseeko64@plt>
   20144:	ldr	r7, [fp, #8]
   20148:	mov	r0, r4
   2014c:	bl	11930 <fileno@plt>
   20150:	mov	r2, r6
   20154:	mov	r3, r5
   20158:	str	r7, [sp]
   2015c:	bl	117a4 <lseek64@plt>
   20160:	and	r2, r0, r1
   20164:	cmn	r2, #1
   20168:	mvneq	r0, #0
   2016c:	subeq	sp, fp, #16
   20170:	popeq	{r4, r5, r6, r7, fp, pc}
   20174:	strd	r0, [r4, #80]	; 0x50
   20178:	ldr	r0, [r4]
   2017c:	bic	r0, r0, #16
   20180:	str	r0, [r4]
   20184:	mov	r0, #0
   20188:	sub	sp, fp, #16
   2018c:	pop	{r4, r5, r6, r7, fp, pc}
   20190:	push	{fp, lr}
   20194:	mov	fp, sp
   20198:	mov	r0, #14
   2019c:	bl	119c0 <nl_langinfo@plt>
   201a0:	movw	r1, #5254	; 0x1486
   201a4:	cmp	r0, #0
   201a8:	movt	r1, #2
   201ac:	movne	r1, r0
   201b0:	movw	r0, #10611	; 0x2973
   201b4:	ldrb	r2, [r1]
   201b8:	movt	r0, #2
   201bc:	cmp	r2, #0
   201c0:	movne	r0, r1
   201c4:	pop	{fp, pc}
   201c8:	push	{r4, r5, r6, r7, fp, lr}
   201cc:	add	fp, sp, #16
   201d0:	sub	sp, sp, #8
   201d4:	add	r5, sp, #4
   201d8:	cmp	r0, #0
   201dc:	mov	r7, r2
   201e0:	mov	r4, r1
   201e4:	movne	r5, r0
   201e8:	mov	r0, r5
   201ec:	bl	117d4 <mbrtowc@plt>
   201f0:	mov	r6, r0
   201f4:	cmp	r7, #0
   201f8:	beq	2021c <__assert_fail@plt+0xe790>
   201fc:	cmn	r6, #2
   20200:	bcc	2021c <__assert_fail@plt+0xe790>
   20204:	mov	r0, #0
   20208:	bl	2043c <__assert_fail@plt+0xe9b0>
   2020c:	cmp	r0, #0
   20210:	ldrbeq	r0, [r4]
   20214:	moveq	r6, #1
   20218:	streq	r0, [r5]
   2021c:	mov	r0, r6
   20220:	sub	sp, fp, #16
   20224:	pop	{r4, r5, r6, r7, fp, pc}
   20228:	cmp	r2, #0
   2022c:	beq	2025c <__assert_fail@plt+0xe7d0>
   20230:	mvn	r3, #0
   20234:	udiv	r3, r3, r2
   20238:	cmp	r3, r1
   2023c:	bcs	2025c <__assert_fail@plt+0xe7d0>
   20240:	push	{fp, lr}
   20244:	mov	fp, sp
   20248:	bl	118e8 <__errno_location@plt>
   2024c:	mov	r1, #12
   20250:	str	r1, [r0]
   20254:	mov	r0, #0
   20258:	pop	{fp, pc}
   2025c:	mul	r1, r2, r1
   20260:	b	1eeb4 <__assert_fail@plt+0xd428>
   20264:	push	{r4, r5, r6, r7, fp, lr}
   20268:	add	fp, sp, #16
   2026c:	mov	r4, r0
   20270:	cmp	r0, #2
   20274:	movhi	r0, r4
   20278:	pophi	{r4, r5, r6, r7, fp, pc}
   2027c:	mov	r0, r4
   20280:	bl	20544 <__assert_fail@plt+0xeab8>
   20284:	mov	r5, r0
   20288:	bl	118e8 <__errno_location@plt>
   2028c:	ldr	r7, [r0]
   20290:	mov	r6, r0
   20294:	mov	r0, r4
   20298:	bl	11a68 <close@plt>
   2029c:	mov	r0, r5
   202a0:	str	r7, [r6]
   202a4:	pop	{r4, r5, r6, r7, fp, pc}
   202a8:	push	{fp, lr}
   202ac:	mov	fp, sp
   202b0:	sub	sp, sp, #8
   202b4:	mov	r2, r0
   202b8:	mov	ip, r1
   202bc:	mov	r0, #0
   202c0:	mov	r1, r2
   202c4:	ldrb	r3, [r1, r0, lsl #1]!
   202c8:	cmp	r3, #37	; 0x25
   202cc:	beq	202fc <__assert_fail@plt+0xe870>
   202d0:	cmp	r3, #0
   202d4:	bne	20308 <__assert_fail@plt+0xe87c>
   202d8:	mov	r1, ip
   202dc:	bl	2034c <__assert_fail@plt+0xe8c0>
   202e0:	mov	sp, fp
   202e4:	pop	{fp, pc}
   202e8:	add	r0, r0, #1
   202ec:	mov	r1, r2
   202f0:	ldrb	r3, [r1, r0, lsl #1]!
   202f4:	cmp	r3, #37	; 0x25
   202f8:	bne	202d0 <__assert_fail@plt+0xe844>
   202fc:	ldrb	r1, [r1, #1]
   20300:	cmp	r1, #115	; 0x73
   20304:	beq	202e8 <__assert_fail@plt+0xe85c>
   20308:	add	r0, sp, #4
   2030c:	mov	r1, #1
   20310:	mov	r3, ip
   20314:	bl	1190c <__vasprintf_chk@plt>
   20318:	cmn	r0, #1
   2031c:	ble	2032c <__assert_fail@plt+0xe8a0>
   20320:	ldr	r0, [sp, #4]
   20324:	mov	sp, fp
   20328:	pop	{fp, pc}
   2032c:	bl	118e8 <__errno_location@plt>
   20330:	ldr	r1, [r0]
   20334:	mov	r0, #0
   20338:	cmp	r1, #12
   2033c:	beq	20348 <__assert_fail@plt+0xe8bc>
   20340:	mov	sp, fp
   20344:	pop	{fp, pc}
   20348:	bl	1ed7c <__assert_fail@plt+0xd2f0>
   2034c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20350:	add	fp, sp, #24
   20354:	sub	sp, sp, #8
   20358:	str	r1, [sp, #4]
   2035c:	mov	r4, r0
   20360:	ldr	r0, [sp, #4]
   20364:	cmp	r4, #0
   20368:	str	r0, [sp]
   2036c:	beq	203fc <__assert_fail@plt+0xe970>
   20370:	ldr	r0, [sp]
   20374:	mov	r5, #0
   20378:	mov	r7, r4
   2037c:	add	r6, r0, #4
   20380:	str	r6, [sp]
   20384:	ldr	r0, [r6, #-4]
   20388:	bl	118ac <strlen@plt>
   2038c:	adds	r5, r0, r5
   20390:	add	r6, r6, #4
   20394:	mvncs	r5, #0
   20398:	subs	r7, r7, #1
   2039c:	bne	20380 <__assert_fail@plt+0xe8f4>
   203a0:	cmn	r5, #1
   203a4:	ble	20420 <__assert_fail@plt+0xe994>
   203a8:	add	r0, r5, #1
   203ac:	bl	1e81c <__assert_fail@plt+0xcd90>
   203b0:	mov	r8, r0
   203b4:	mov	r6, r0
   203b8:	cmp	r4, #0
   203bc:	beq	2040c <__assert_fail@plt+0xe980>
   203c0:	ldr	r0, [sp, #4]
   203c4:	add	r1, r0, #4
   203c8:	str	r1, [sp, #4]
   203cc:	ldr	r7, [r0]
   203d0:	mov	r0, r7
   203d4:	bl	118ac <strlen@plt>
   203d8:	mov	r5, r0
   203dc:	mov	r0, r6
   203e0:	mov	r1, r7
   203e4:	mov	r2, r5
   203e8:	bl	11708 <memcpy@plt>
   203ec:	add	r6, r6, r5
   203f0:	subs	r4, r4, #1
   203f4:	bne	203c0 <__assert_fail@plt+0xe934>
   203f8:	b	2040c <__assert_fail@plt+0xe980>
   203fc:	mov	r0, #1
   20400:	bl	1e81c <__assert_fail@plt+0xcd90>
   20404:	mov	r8, r0
   20408:	mov	r6, r0
   2040c:	mov	r0, #0
   20410:	strb	r0, [r6]
   20414:	mov	r0, r8
   20418:	sub	sp, fp, #24
   2041c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20420:	bl	118e8 <__errno_location@plt>
   20424:	mov	r1, #75	; 0x4b
   20428:	mov	r8, #0
   2042c:	str	r1, [r0]
   20430:	mov	r0, r8
   20434:	sub	sp, fp, #24
   20438:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2043c:	push	{r4, sl, fp, lr}
   20440:	add	fp, sp, #8
   20444:	sub	sp, sp, #264	; 0x108
   20448:	add	r1, sp, #7
   2044c:	movw	r2, #257	; 0x101
   20450:	bl	204a0 <__assert_fail@plt+0xea14>
   20454:	mov	r4, #0
   20458:	cmp	r0, #0
   2045c:	bne	20494 <__assert_fail@plt+0xea08>
   20460:	movw	r1, #10617	; 0x2979
   20464:	add	r0, sp, #7
   20468:	movt	r1, #2
   2046c:	bl	116b4 <strcmp@plt>
   20470:	cmp	r0, #0
   20474:	beq	20494 <__assert_fail@plt+0xea08>
   20478:	movw	r1, #10619	; 0x297b
   2047c:	add	r0, sp, #7
   20480:	movt	r1, #2
   20484:	bl	116b4 <strcmp@plt>
   20488:	mov	r4, r0
   2048c:	cmp	r0, #0
   20490:	movwne	r4, #1
   20494:	mov	r0, r4
   20498:	sub	sp, fp, #8
   2049c:	pop	{r4, sl, fp, pc}
   204a0:	push	{r4, r5, r6, r7, fp, lr}
   204a4:	add	fp, sp, #16
   204a8:	mov	r4, r1
   204ac:	mov	r1, #0
   204b0:	mov	r6, r2
   204b4:	bl	1199c <setlocale@plt>
   204b8:	cmp	r0, #0
   204bc:	beq	204ec <__assert_fail@plt+0xea60>
   204c0:	mov	r7, r0
   204c4:	bl	118ac <strlen@plt>
   204c8:	cmp	r0, r6
   204cc:	bcs	2050c <__assert_fail@plt+0xea80>
   204d0:	add	r2, r0, #1
   204d4:	mov	r0, r4
   204d8:	mov	r1, r7
   204dc:	bl	11708 <memcpy@plt>
   204e0:	mov	r5, #0
   204e4:	mov	r0, r5
   204e8:	pop	{r4, r5, r6, r7, fp, pc}
   204ec:	cmp	r6, #0
   204f0:	mov	r5, #22
   204f4:	movne	r0, #0
   204f8:	strbne	r0, [r4]
   204fc:	movne	r0, r5
   20500:	popne	{r4, r5, r6, r7, fp, pc}
   20504:	mov	r0, r5
   20508:	pop	{r4, r5, r6, r7, fp, pc}
   2050c:	mov	r5, #34	; 0x22
   20510:	cmp	r6, #0
   20514:	beq	20534 <__assert_fail@plt+0xeaa8>
   20518:	sub	r6, r6, #1
   2051c:	mov	r0, r4
   20520:	mov	r1, r7
   20524:	mov	r2, r6
   20528:	bl	11708 <memcpy@plt>
   2052c:	mov	r0, #0
   20530:	strb	r0, [r4, r6]
   20534:	mov	r0, r5
   20538:	pop	{r4, r5, r6, r7, fp, pc}
   2053c:	mov	r1, #0
   20540:	b	1199c <setlocale@plt>
   20544:	mov	r1, #0
   20548:	mov	r2, #3
   2054c:	b	20550 <__assert_fail@plt+0xeac4>
   20550:	sub	sp, sp, #8
   20554:	push	{r4, r5, r6, r7, fp, lr}
   20558:	add	fp, sp, #16
   2055c:	sub	sp, sp, #8
   20560:	mov	r5, r0
   20564:	add	r0, fp, #8
   20568:	cmp	r1, #11
   2056c:	str	r3, [fp, #12]
   20570:	str	r2, [fp, #8]
   20574:	str	r0, [sp, #4]
   20578:	bhi	205b4 <__assert_fail@plt+0xeb28>
   2057c:	mov	r0, #1
   20580:	movw	r2, #1300	; 0x514
   20584:	tst	r2, r0, lsl r1
   20588:	bne	20674 <__assert_fail@plt+0xebe8>
   2058c:	movw	r2, #2570	; 0xa0a
   20590:	tst	r2, r0, lsl r1
   20594:	bne	205dc <__assert_fail@plt+0xeb50>
   20598:	cmp	r1, #0
   2059c:	bne	205b4 <__assert_fail@plt+0xeb28>
   205a0:	ldr	r0, [sp, #4]
   205a4:	add	r1, r0, #4
   205a8:	str	r1, [sp, #4]
   205ac:	mov	r1, #0
   205b0:	b	20680 <__assert_fail@plt+0xebf4>
   205b4:	sub	r0, r1, #1024	; 0x400
   205b8:	cmp	r0, #10
   205bc:	bhi	20674 <__assert_fail@plt+0xebe8>
   205c0:	mov	r2, #1
   205c4:	movw	r3, #645	; 0x285
   205c8:	tst	r3, r2, lsl r0
   205cc:	bne	20674 <__assert_fail@plt+0xebe8>
   205d0:	movw	r3, #1282	; 0x502
   205d4:	tst	r3, r2, lsl r0
   205d8:	beq	205e8 <__assert_fail@plt+0xeb5c>
   205dc:	mov	r0, r5
   205e0:	bl	11984 <fcntl64@plt>
   205e4:	b	2068c <__assert_fail@plt+0xec00>
   205e8:	cmp	r0, #6
   205ec:	bne	20674 <__assert_fail@plt+0xebe8>
   205f0:	ldr	r0, [sp, #4]
   205f4:	movw	r7, #13224	; 0x33a8
   205f8:	movt	r7, #3
   205fc:	add	r1, r0, #4
   20600:	str	r1, [sp, #4]
   20604:	ldr	r6, [r0]
   20608:	ldr	r0, [r7]
   2060c:	cmp	r0, #0
   20610:	blt	206b0 <__assert_fail@plt+0xec24>
   20614:	mov	r0, r5
   20618:	movw	r1, #1030	; 0x406
   2061c:	mov	r2, r6
   20620:	bl	11984 <fcntl64@plt>
   20624:	mov	r4, r0
   20628:	cmn	r0, #1
   2062c:	bgt	206a4 <__assert_fail@plt+0xec18>
   20630:	bl	118e8 <__errno_location@plt>
   20634:	ldr	r0, [r0]
   20638:	cmp	r0, #22
   2063c:	bne	206a4 <__assert_fail@plt+0xec18>
   20640:	mov	r0, r5
   20644:	mov	r1, #0
   20648:	mov	r2, r6
   2064c:	bl	11984 <fcntl64@plt>
   20650:	mov	r4, r0
   20654:	cmp	r0, #0
   20658:	blt	20690 <__assert_fail@plt+0xec04>
   2065c:	mvn	r0, #0
   20660:	str	r0, [r7]
   20664:	mov	r0, #1
   20668:	cmp	r0, #0
   2066c:	bne	206dc <__assert_fail@plt+0xec50>
   20670:	b	20690 <__assert_fail@plt+0xec04>
   20674:	ldr	r0, [sp, #4]
   20678:	add	r2, r0, #4
   2067c:	str	r2, [sp, #4]
   20680:	ldr	r2, [r0]
   20684:	mov	r0, r5
   20688:	bl	11984 <fcntl64@plt>
   2068c:	mov	r4, r0
   20690:	mov	r0, r4
   20694:	sub	sp, fp, #16
   20698:	pop	{r4, r5, r6, r7, fp, lr}
   2069c:	add	sp, sp, #8
   206a0:	bx	lr
   206a4:	mov	r0, #1
   206a8:	str	r0, [r7]
   206ac:	b	20690 <__assert_fail@plt+0xec04>
   206b0:	mov	r0, r5
   206b4:	mov	r1, #0
   206b8:	mov	r2, r6
   206bc:	bl	11984 <fcntl64@plt>
   206c0:	mov	r4, r0
   206c4:	ldr	r0, [r7]
   206c8:	add	r0, r0, #1
   206cc:	clz	r0, r0
   206d0:	lsr	r0, r0, #5
   206d4:	cmp	r0, #0
   206d8:	beq	20690 <__assert_fail@plt+0xec04>
   206dc:	cmp	r4, #0
   206e0:	blt	20690 <__assert_fail@plt+0xec04>
   206e4:	mov	r0, r4
   206e8:	mov	r1, #1
   206ec:	bl	11984 <fcntl64@plt>
   206f0:	cmp	r0, #0
   206f4:	blt	20710 <__assert_fail@plt+0xec84>
   206f8:	orr	r2, r0, #1
   206fc:	mov	r0, r4
   20700:	mov	r1, #2
   20704:	bl	11984 <fcntl64@plt>
   20708:	cmn	r0, #1
   2070c:	bne	20690 <__assert_fail@plt+0xec04>
   20710:	bl	118e8 <__errno_location@plt>
   20714:	ldr	r6, [r0]
   20718:	mov	r5, r0
   2071c:	mov	r0, r4
   20720:	bl	11a68 <close@plt>
   20724:	str	r6, [r5]
   20728:	mvn	r4, #0
   2072c:	b	20690 <__assert_fail@plt+0xec04>
   20730:	cmp	r3, #0
   20734:	cmpeq	r2, #0
   20738:	bne	2075c <__assert_fail@plt+0xecd0>
   2073c:	cmp	r1, #0
   20740:	movlt	r1, #-2147483648	; 0x80000000
   20744:	movlt	r0, #0
   20748:	blt	20758 <__assert_fail@plt+0xeccc>
   2074c:	cmpeq	r0, #0
   20750:	mvnne	r1, #-2147483648	; 0x80000000
   20754:	mvnne	r0, #0
   20758:	b	20804 <__assert_fail@plt+0xed78>
   2075c:	sub	sp, sp, #8
   20760:	push	{sp, lr}
   20764:	cmp	r1, #0
   20768:	blt	20788 <__assert_fail@plt+0xecfc>
   2076c:	cmp	r3, #0
   20770:	blt	207bc <__assert_fail@plt+0xed30>
   20774:	bl	20814 <__assert_fail@plt+0xed88>
   20778:	ldr	lr, [sp, #4]
   2077c:	add	sp, sp, #8
   20780:	pop	{r2, r3}
   20784:	bx	lr
   20788:	rsbs	r0, r0, #0
   2078c:	sbc	r1, r1, r1, lsl #1
   20790:	cmp	r3, #0
   20794:	blt	207e0 <__assert_fail@plt+0xed54>
   20798:	bl	20814 <__assert_fail@plt+0xed88>
   2079c:	ldr	lr, [sp, #4]
   207a0:	add	sp, sp, #8
   207a4:	pop	{r2, r3}
   207a8:	rsbs	r0, r0, #0
   207ac:	sbc	r1, r1, r1, lsl #1
   207b0:	rsbs	r2, r2, #0
   207b4:	sbc	r3, r3, r3, lsl #1
   207b8:	bx	lr
   207bc:	rsbs	r2, r2, #0
   207c0:	sbc	r3, r3, r3, lsl #1
   207c4:	bl	20814 <__assert_fail@plt+0xed88>
   207c8:	ldr	lr, [sp, #4]
   207cc:	add	sp, sp, #8
   207d0:	pop	{r2, r3}
   207d4:	rsbs	r0, r0, #0
   207d8:	sbc	r1, r1, r1, lsl #1
   207dc:	bx	lr
   207e0:	rsbs	r2, r2, #0
   207e4:	sbc	r3, r3, r3, lsl #1
   207e8:	bl	20814 <__assert_fail@plt+0xed88>
   207ec:	ldr	lr, [sp, #4]
   207f0:	add	sp, sp, #8
   207f4:	pop	{r2, r3}
   207f8:	rsbs	r2, r2, #0
   207fc:	sbc	r3, r3, r3, lsl #1
   20800:	bx	lr
   20804:	push	{r1, lr}
   20808:	mov	r0, #8
   2080c:	bl	11684 <raise@plt>
   20810:	pop	{r1, pc}
   20814:	cmp	r1, r3
   20818:	cmpeq	r0, r2
   2081c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20820:	mov	r4, r0
   20824:	movcc	r0, #0
   20828:	mov	r5, r1
   2082c:	ldr	lr, [sp, #36]	; 0x24
   20830:	movcc	r1, r0
   20834:	bcc	20930 <__assert_fail@plt+0xeea4>
   20838:	cmp	r3, #0
   2083c:	clzeq	ip, r2
   20840:	clzne	ip, r3
   20844:	addeq	ip, ip, #32
   20848:	cmp	r5, #0
   2084c:	clzeq	r1, r4
   20850:	addeq	r1, r1, #32
   20854:	clzne	r1, r5
   20858:	sub	ip, ip, r1
   2085c:	sub	sl, ip, #32
   20860:	lsl	r9, r3, ip
   20864:	rsb	fp, ip, #32
   20868:	orr	r9, r9, r2, lsl sl
   2086c:	orr	r9, r9, r2, lsr fp
   20870:	lsl	r8, r2, ip
   20874:	cmp	r5, r9
   20878:	cmpeq	r4, r8
   2087c:	movcc	r0, #0
   20880:	movcc	r1, r0
   20884:	bcc	208a0 <__assert_fail@plt+0xee14>
   20888:	mov	r0, #1
   2088c:	subs	r4, r4, r8
   20890:	lsl	r1, r0, sl
   20894:	orr	r1, r1, r0, lsr fp
   20898:	lsl	r0, r0, ip
   2089c:	sbc	r5, r5, r9
   208a0:	cmp	ip, #0
   208a4:	beq	20930 <__assert_fail@plt+0xeea4>
   208a8:	lsr	r6, r8, #1
   208ac:	orr	r6, r6, r9, lsl #31
   208b0:	lsr	r7, r9, #1
   208b4:	mov	r2, ip
   208b8:	b	208dc <__assert_fail@plt+0xee50>
   208bc:	subs	r3, r4, r6
   208c0:	sbc	r8, r5, r7
   208c4:	adds	r3, r3, r3
   208c8:	adc	r8, r8, r8
   208cc:	adds	r4, r3, #1
   208d0:	adc	r5, r8, #0
   208d4:	subs	r2, r2, #1
   208d8:	beq	208f8 <__assert_fail@plt+0xee6c>
   208dc:	cmp	r5, r7
   208e0:	cmpeq	r4, r6
   208e4:	bcs	208bc <__assert_fail@plt+0xee30>
   208e8:	adds	r4, r4, r4
   208ec:	adc	r5, r5, r5
   208f0:	subs	r2, r2, #1
   208f4:	bne	208dc <__assert_fail@plt+0xee50>
   208f8:	lsr	r3, r4, ip
   208fc:	orr	r3, r3, r5, lsl fp
   20900:	lsr	r2, r5, ip
   20904:	orr	r3, r3, r5, lsr sl
   20908:	adds	r0, r0, r4
   2090c:	mov	r4, r3
   20910:	lsl	r3, r2, ip
   20914:	orr	r3, r3, r4, lsl sl
   20918:	lsl	ip, r4, ip
   2091c:	orr	r3, r3, r4, lsr fp
   20920:	adc	r1, r1, r5
   20924:	subs	r0, r0, ip
   20928:	mov	r5, r2
   2092c:	sbc	r1, r1, r3
   20930:	cmp	lr, #0
   20934:	strdne	r4, [lr]
   20938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2093c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20940:	mov	r7, r0
   20944:	ldr	r6, [pc, #72]	; 20994 <__assert_fail@plt+0xef08>
   20948:	ldr	r5, [pc, #72]	; 20998 <__assert_fail@plt+0xef0c>
   2094c:	add	r6, pc, r6
   20950:	add	r5, pc, r5
   20954:	sub	r6, r6, r5
   20958:	mov	r8, r1
   2095c:	mov	r9, r2
   20960:	bl	1164c <calloc@plt-0x20>
   20964:	asrs	r6, r6, #2
   20968:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2096c:	mov	r4, #0
   20970:	add	r4, r4, #1
   20974:	ldr	r3, [r5], #4
   20978:	mov	r2, r9
   2097c:	mov	r1, r8
   20980:	mov	r0, r7
   20984:	blx	r3
   20988:	cmp	r6, r4
   2098c:	bne	20970 <__assert_fail@plt+0xeee4>
   20990:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20994:			; <UNDEFINED> instruction: 0x000125b0
   20998:	andeq	r2, r1, r8, lsr #11
   2099c:	bx	lr
   209a0:	ldr	r3, [pc, #12]	; 209b4 <__assert_fail@plt+0xef28>
   209a4:	mov	r1, #0
   209a8:	add	r3, pc, r3
   209ac:	ldr	r2, [r3]
   209b0:	b	11900 <__cxa_atexit@plt>
   209b4:	andeq	r2, r1, ip, asr #15

Disassembly of section .fini:

000209b8 <.fini>:
   209b8:	push	{r3, lr}
   209bc:	pop	{r3, pc}
