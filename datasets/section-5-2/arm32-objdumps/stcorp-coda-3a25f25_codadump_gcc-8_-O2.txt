
../repos/stcorp-coda-3a25f25/codadump:     file format elf32-littlearm


Disassembly of section .init:

00012184 <.init>:
   12184:	push	{r3, lr}
   12188:	bl	13de8 <_start@@Base+0x3c>
   1218c:	pop	{r3, pc}

Disassembly of section .plt:

00012190 <coda_cursor_get_byte_size@plt-0x14>:
   12190:	push	{lr}		; (str lr, [sp, #-4]!)
   12194:	ldr	lr, [pc, #4]	; 121a0 <coda_cursor_get_byte_size@plt-0x4>
   12198:	add	lr, pc, lr
   1219c:	ldr	pc, [lr, #8]!
   121a0:	andeq	sl, r1, r0, ror #28

000121a4 <coda_cursor_get_byte_size@plt>:
   121a4:	add	ip, pc, #0, 12
   121a8:	add	ip, ip, #106496	; 0x1a000
   121ac:	ldr	pc, [ip, #3680]!	; 0xe60

000121b0 <coda_type_get_special_type_name@plt>:
   121b0:	add	ip, pc, #0, 12
   121b4:	add	ip, ip, #106496	; 0x1a000
   121b8:	ldr	pc, [ip, #3672]!	; 0xe58

000121bc <coda_set_option_use_fast_size_expressions@plt>:
   121bc:	add	ip, pc, #0, 12
   121c0:	add	ip, ip, #106496	; 0x1a000
   121c4:	ldr	pc, [ip, #3664]!	; 0xe50

000121c8 <raise@plt>:
   121c8:	add	ip, pc, #0, 12
   121cc:	add	ip, ip, #106496	; 0x1a000
   121d0:	ldr	pc, [ip, #3656]!	; 0xe48

000121d4 <coda_get_option_bypass_special_types@plt>:
   121d4:	add	ip, pc, #0, 12
   121d8:	add	ip, ip, #106496	; 0x1a000
   121dc:	ldr	pc, [ip, #3648]!	; 0xe40

000121e0 <coda_set_option_perform_boundary_checks@plt>:
   121e0:	add	ip, pc, #0, 12
   121e4:	add	ip, ip, #106496	; 0x1a000
   121e8:	ldr	pc, [ip, #3640]!	; 0xe38

000121ec <strcmp@plt>:
   121ec:	add	ip, pc, #0, 12
   121f0:	add	ip, ip, #106496	; 0x1a000
   121f4:	ldr	pc, [ip, #3632]!	; 0xe30

000121f8 <strtol@plt>:
   121f8:	add	ip, pc, #0, 12
   121fc:	add	ip, ip, #106496	; 0x1a000
   12200:	ldr	pc, [ip, #3624]!	; 0xe28

00012204 <coda_type_get_record_field_hidden_status@plt>:
   12204:	add	ip, pc, #0, 12
   12208:	add	ip, ip, #106496	; 0x1a000
   1220c:	ldr	pc, [ip, #3616]!	; 0xe20

00012210 <printf@plt>:
   12210:	add	ip, pc, #0, 12
   12214:	add	ip, ip, #106496	; 0x1a000
   12218:	ldr	pc, [ip, #3608]!	; 0xe18

0001221c <coda_cursor_get_record_field_available_status@plt>:
   1221c:	add	ip, pc, #0, 12
   12220:	add	ip, ip, #106496	; 0x1a000
   12224:	ldr	pc, [ip, #3600]!	; 0xe10

00012228 <fopen@plt>:
   12228:	add	ip, pc, #0, 12
   1222c:	add	ip, ip, #106496	; 0x1a000
   12230:	ldr	pc, [ip, #3592]!	; 0xe08

00012234 <coda_set_error@plt>:
   12234:	add	ip, pc, #0, 12
   12238:	add	ip, ip, #106496	; 0x1a000
   1223c:	ldr	pc, [ip, #3584]!	; 0xe00

00012240 <coda_open@plt>:
   12240:	add	ip, pc, #0, 12
   12244:	add	ip, ip, #106496	; 0x1a000
   12248:	ldr	pc, [ip, #3576]!	; 0xdf8

0001224c <fflush@plt>:
   1224c:	add	ip, pc, #0, 12
   12250:	add	ip, ip, #106496	; 0x1a000
   12254:	ldr	pc, [ip, #3568]!	; 0xdf0

00012258 <coda_time_double_to_string@plt>:
   12258:	add	ip, pc, #0, 12
   1225c:	add	ip, ip, #106496	; 0x1a000
   12260:	ldr	pc, [ip, #3560]!	; 0xde8

00012264 <coda_cursor_get_num_elements@plt>:
   12264:	add	ip, pc, #0, 12
   12268:	add	ip, ip, #106496	; 0x1a000
   1226c:	ldr	pc, [ip, #3552]!	; 0xde0

00012270 <coda_str64u@plt>:
   12270:	add	ip, pc, #0, 12
   12274:	add	ip, ip, #106496	; 0x1a000
   12278:	ldr	pc, [ip, #3544]!	; 0xdd8

0001227c <free@plt>:
   1227c:	add	ip, pc, #0, 12
   12280:	add	ip, ip, #106496	; 0x1a000
   12284:	ldr	pc, [ip, #3536]!	; 0xdd0

00012288 <coda_set_option_use_mmap@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #106496	; 0x1a000
   12290:	ldr	pc, [ip, #3528]!	; 0xdc8

00012294 <coda_set_definition_path_conditional@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #106496	; 0x1a000
   1229c:	ldr	pc, [ip, #3520]!	; 0xdc0

000122a0 <coda_cursor_read_uint32@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #106496	; 0x1a000
   122a8:	ldr	pc, [ip, #3512]!	; 0xdb8

000122ac <coda_set_option_bypass_special_types@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #106496	; 0x1a000
   122b4:	ldr	pc, [ip, #3504]!	; 0xdb0

000122b8 <coda_type_get_record_field_type@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #106496	; 0x1a000
   122c0:	ldr	pc, [ip, #3496]!	; 0xda8

000122c4 <coda_cursor_get_type@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #106496	; 0x1a000
   122cc:	ldr	pc, [ip, #3488]!	; 0xda0

000122d0 <memcpy@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #106496	; 0x1a000
   122d8:	ldr	pc, [ip, #3480]!	; 0xd98

000122dc <coda_isInf@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #106496	; 0x1a000
   122e4:	ldr	pc, [ip, #3472]!	; 0xd90

000122e8 <coda_type_get_bit_size@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #106496	; 0x1a000
   122f0:	ldr	pc, [ip, #3464]!	; 0xd88

000122f4 <coda_type_get_record_field_available_status@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #106496	; 0x1a000
   122fc:	ldr	pc, [ip, #3456]!	; 0xd80

00012300 <coda_cursor_has_attributes@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #106496	; 0x1a000
   12308:	ldr	pc, [ip, #3448]!	; 0xd78

0001230c <coda_cursor_get_type_class@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #106496	; 0x1a000
   12314:	ldr	pc, [ip, #3440]!	; 0xd70

00012318 <coda_set_definition_path@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #106496	; 0x1a000
   12320:	ldr	pc, [ip, #3432]!	; 0xd68

00012324 <coda_get_product_format@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #106496	; 0x1a000
   1232c:	ldr	pc, [ip, #3424]!	; 0xd60

00012330 <coda_type_get_unit@plt>:
   12330:	add	ip, pc, #0, 12
   12334:	add	ip, ip, #106496	; 0x1a000
   12338:	ldr	pc, [ip, #3416]!	; 0xd58

0001233c <coda_type_get_description@plt>:
   1233c:	add	ip, pc, #0, 12
   12340:	add	ip, ip, #106496	; 0x1a000
   12344:	ldr	pc, [ip, #3408]!	; 0xd50

00012348 <coda_cursor_get_special_type@plt>:
   12348:	add	ip, pc, #0, 12
   1234c:	add	ip, ip, #106496	; 0x1a000
   12350:	ldr	pc, [ip, #3400]!	; 0xd48

00012354 <coda_cursor_goto_first_array_element@plt>:
   12354:	add	ip, pc, #0, 12
   12358:	add	ip, ip, #106496	; 0x1a000
   1235c:	ldr	pc, [ip, #3392]!	; 0xd40

00012360 <fwrite@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #106496	; 0x1a000
   12368:	ldr	pc, [ip, #3384]!	; 0xd38

0001236c <coda_cursor_set_product@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #106496	; 0x1a000
   12374:	ldr	pc, [ip, #3376]!	; 0xd30

00012378 <coda_cursor_goto_first_record_field@plt>:
   12378:	add	ip, pc, #0, 12
   1237c:	add	ip, ip, #106496	; 0x1a000
   12380:	ldr	pc, [ip, #3368]!	; 0xd28

00012384 <coda_cursor_goto_record_field_by_index@plt>:
   12384:	add	ip, pc, #0, 12
   12388:	add	ip, ip, #106496	; 0x1a000
   1238c:	ldr	pc, [ip, #3360]!	; 0xd20

00012390 <coda_done@plt>:
   12390:	add	ip, pc, #0, 12
   12394:	add	ip, ip, #106496	; 0x1a000
   12398:	ldr	pc, [ip, #3352]!	; 0xd18

0001239c <puts@plt>:
   1239c:	add	ip, pc, #0, 12
   123a0:	add	ip, ip, #106496	; 0x1a000
   123a4:	ldr	pc, [ip, #3344]!	; 0xd10

000123a8 <coda_cursor_get_read_type@plt>:
   123a8:	add	ip, pc, #0, 12
   123ac:	add	ip, ip, #106496	; 0x1a000
   123b0:	ldr	pc, [ip, #3336]!	; 0xd08

000123b4 <malloc@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #106496	; 0x1a000
   123bc:	ldr	pc, [ip, #3328]!	; 0xd00

000123c0 <__libc_start_main@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #106496	; 0x1a000
   123c8:	ldr	pc, [ip, #3320]!	; 0xcf8

000123cc <__gmon_start__@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #106496	; 0x1a000
   123d4:	ldr	pc, [ip, #3312]!	; 0xcf0

000123d8 <coda_cursor_read_string@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #106496	; 0x1a000
   123e0:	ldr	pc, [ip, #3304]!	; 0xce8

000123e4 <coda_cursor_goto_parent@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #106496	; 0x1a000
   123ec:	ldr	pc, [ip, #3296]!	; 0xce0

000123f0 <coda_type_get_num_record_fields@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #106496	; 0x1a000
   123f8:	ldr	pc, [ip, #3288]!	; 0xcd8

000123fc <exit@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #106496	; 0x1a000
   12404:	ldr	pc, [ip, #3280]!	; 0xcd0

00012408 <coda_type_get_read_type@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #106496	; 0x1a000
   12410:	ldr	pc, [ip, #3272]!	; 0xcc8

00012414 <coda_cursor_get_string_length@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #106496	; 0x1a000
   1241c:	ldr	pc, [ip, #3264]!	; 0xcc0

00012420 <coda_cursor_read_uint64@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #106496	; 0x1a000
   12428:	ldr	pc, [ip, #3256]!	; 0xcb8

0001242c <coda_cursor_read_double@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #106496	; 0x1a000
   12434:	ldr	pc, [ip, #3248]!	; 0xcb0

00012438 <coda_isNaN@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #106496	; 0x1a000
   12440:	ldr	pc, [ip, #3240]!	; 0xca8

00012444 <fprintf@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #106496	; 0x1a000
   1244c:	ldr	pc, [ip, #3232]!	; 0xca0

00012450 <coda_cursor_goto_next_array_element@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #106496	; 0x1a000
   12458:	ldr	pc, [ip, #3224]!	; 0xc98

0001245c <coda_open_as@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #106496	; 0x1a000
   12464:	ldr	pc, [ip, #3216]!	; 0xc90

00012468 <coda_init@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #106496	; 0x1a000
   12470:	ldr	pc, [ip, #3208]!	; 0xc88

00012474 <coda_set_option_perform_conversions@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #106496	; 0x1a000
   1247c:	ldr	pc, [ip, #3200]!	; 0xc80

00012480 <coda_cursor_goto_attributes@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #106496	; 0x1a000
   12488:	ldr	pc, [ip, #3192]!	; 0xc78

0001248c <coda_cursor_read_char@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #106496	; 0x1a000
   12494:	ldr	pc, [ip, #3184]!	; 0xc70

00012498 <memset@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #106496	; 0x1a000
   124a0:	ldr	pc, [ip, #3176]!	; 0xc68

000124a4 <putchar@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #106496	; 0x1a000
   124ac:	ldr	pc, [ip, #3168]!	; 0xc60

000124b0 <strncpy@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #106496	; 0x1a000
   124b8:	ldr	pc, [ip, #3160]!	; 0xc58

000124bc <coda_type_get_special_type@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #106496	; 0x1a000
   124c4:	ldr	pc, [ip, #3152]!	; 0xc50

000124c8 <coda_type_get_record_union_status@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #106496	; 0x1a000
   124d0:	ldr	pc, [ip, #3144]!	; 0xc48

000124d4 <coda_cursor_read_complex_double_split@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #106496	; 0x1a000
   124dc:	ldr	pc, [ip, #3136]!	; 0xc40

000124e0 <coda_type_get_array_base_type@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #106496	; 0x1a000
   124e8:	ldr	pc, [ip, #3128]!	; 0xc38

000124ec <fclose@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #106496	; 0x1a000
   124f4:	ldr	pc, [ip, #3120]!	; 0xc30

000124f8 <coda_type_get_string_length@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #106496	; 0x1a000
   12500:	ldr	pc, [ip, #3112]!	; 0xc28

00012504 <coda_type_get_native_type_name@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #106496	; 0x1a000
   1250c:	ldr	pc, [ip, #3104]!	; 0xc20

00012510 <coda_cursor_get_array_dim@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #106496	; 0x1a000
   12518:	ldr	pc, [ip, #3096]!	; 0xc18

0001251c <coda_cursor_has_ascii_content@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #106496	; 0x1a000
   12524:	ldr	pc, [ip, #3088]!	; 0xc10

00012528 <coda_close@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #106496	; 0x1a000
   12530:	ldr	pc, [ip, #3080]!	; 0xc08

00012534 <coda_cursor_read_int64@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #106496	; 0x1a000
   1253c:	ldr	pc, [ip, #3072]!	; 0xc00

00012540 <vfprintf@plt>:
   12540:	add	ip, pc, #0, 12
   12544:	add	ip, ip, #106496	; 0x1a000
   12548:	ldr	pc, [ip, #3064]!	; 0xbf8

0001254c <coda_cursor_goto@plt>:
   1254c:	add	ip, pc, #0, 12
   12550:	add	ip, ip, #106496	; 0x1a000
   12554:	ldr	pc, [ip, #3056]!	; 0xbf0

00012558 <coda_type_get_record_field_index_from_name@plt>:
   12558:	add	ip, pc, #0, 12
   1255c:	add	ip, ip, #106496	; 0x1a000
   12560:	ldr	pc, [ip, #3048]!	; 0xbe8

00012564 <coda_cursor_read_complex_double_pair@plt>:
   12564:	add	ip, pc, #0, 12
   12568:	add	ip, ip, #106496	; 0x1a000
   1256c:	ldr	pc, [ip, #3040]!	; 0xbe0

00012570 <coda_cursor_goto_next_record_field@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #106496	; 0x1a000
   12578:	ldr	pc, [ip, #3032]!	; 0xbd8

0001257c <fputc@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #106496	; 0x1a000
   12584:	ldr	pc, [ip, #3024]!	; 0xbd0

00012588 <coda_type_get_array_dim@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #106496	; 0x1a000
   12590:	ldr	pc, [ip, #3016]!	; 0xbc8

00012594 <coda_cursor_get_bit_size@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #106496	; 0x1a000
   1259c:	ldr	pc, [ip, #3008]!	; 0xbc0

000125a0 <coda_errno_to_string@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #106496	; 0x1a000
   125a8:	ldr	pc, [ip, #3000]!	; 0xbb8

000125ac <coda_cursor_use_base_type_of_special_type@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #106496	; 0x1a000
   125b4:	ldr	pc, [ip, #2992]!	; 0xbb0

000125b8 <coda_cursor_get_available_union_field_index@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #106496	; 0x1a000
   125c0:	ldr	pc, [ip, #2984]!	; 0xba8

000125c4 <coda_cursor_read_int32@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #106496	; 0x1a000
   125cc:	ldr	pc, [ip, #2976]!	; 0xba0

000125d0 <coda_cursor_get_file_bit_offset@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #106496	; 0x1a000
   125d8:	ldr	pc, [ip, #2968]!	; 0xb98

000125dc <coda_get_libcoda_version@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #106496	; 0x1a000
   125e4:	ldr	pc, [ip, #2960]!	; 0xb90

000125e8 <coda_get_errno@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #106496	; 0x1a000
   125f0:	ldr	pc, [ip, #2952]!	; 0xb88

000125f4 <coda_type_get_special_base_type@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #106496	; 0x1a000
   125fc:	ldr	pc, [ip, #2944]!	; 0xb80

00012600 <coda_type_get_record_field_name@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #106496	; 0x1a000
   12608:	ldr	pc, [ip, #2936]!	; 0xb78

0001260c <fputs@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #106496	; 0x1a000
   12614:	ldr	pc, [ip, #2928]!	; 0xb70

00012618 <abort@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #106496	; 0x1a000
   12620:	ldr	pc, [ip, #2920]!	; 0xb68

00012624 <coda_cursor_read_bits@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #106496	; 0x1a000
   1262c:	ldr	pc, [ip, #2912]!	; 0xb60

00012630 <coda_str64@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #106496	; 0x1a000
   12638:	ldr	pc, [ip, #2904]!	; 0xb58

0001263c <__assert_fail@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #106496	; 0x1a000
   12644:	ldr	pc, [ip, #2896]!	; 0xb50

00012648 <coda_type_get_class@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #106496	; 0x1a000
   12650:	ldr	pc, [ip, #2888]!	; 0xb48

Disassembly of section .text:

00012654 <main@@Base>:
   12654:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12658:	cmp	r0, #1
   1265c:	strd	r6, [sp, #8]
   12660:	ldr	r6, [pc, #3848]	; 13570 <main@@Base+0xf1c>
   12664:	strd	r8, [sp, #16]
   12668:	strd	sl, [sp, #24]
   1266c:	str	lr, [sp, #32]
   12670:	sub	sp, sp, #68	; 0x44
   12674:	add	r6, pc, r6
   12678:	beq	126a0 <main@@Base+0x4c>
   1267c:	mov	r5, r1
   12680:	ldr	r1, [pc, #3820]	; 13574 <main@@Base+0xf20>
   12684:	mov	r4, r0
   12688:	ldr	r7, [r5, #4]
   1268c:	add	r1, pc, r1
   12690:	mov	r0, r7
   12694:	bl	121ec <strcmp@plt>
   12698:	cmp	r0, #0
   1269c:	bne	126ac <main@@Base+0x58>
   126a0:	bl	1a108 <print_yaml_data@@Base+0x114>
   126a4:	mov	r0, #0
   126a8:	bl	123fc <exit@plt>
   126ac:	ldr	r1, [pc, #3780]	; 13578 <main@@Base+0xf24>
   126b0:	mov	r0, r7
   126b4:	add	r1, pc, r1
   126b8:	bl	121ec <strcmp@plt>
   126bc:	cmp	r0, #0
   126c0:	beq	126a0 <main@@Base+0x4c>
   126c4:	ldr	r1, [pc, #3760]	; 1357c <main@@Base+0xf28>
   126c8:	mov	r0, r7
   126cc:	add	r1, pc, r1
   126d0:	bl	121ec <strcmp@plt>
   126d4:	cmp	r0, #0
   126d8:	beq	1291c <main@@Base+0x2c8>
   126dc:	ldr	r1, [pc, #3740]	; 13580 <main@@Base+0xf2c>
   126e0:	mov	r0, r7
   126e4:	add	r1, pc, r1
   126e8:	bl	121ec <strcmp@plt>
   126ec:	cmp	r0, #0
   126f0:	beq	1291c <main@@Base+0x2c8>
   126f4:	cmp	r4, #2
   126f8:	ble	12724 <main@@Base+0xd0>
   126fc:	ldr	r1, [pc, #3712]	; 13584 <main@@Base+0xf30>
   12700:	mov	r0, r7
   12704:	add	r1, pc, r1
   12708:	bl	121ec <strcmp@plt>
   1270c:	cmp	r0, #0
   12710:	bne	12724 <main@@Base+0xd0>
   12714:	ldr	r0, [r5, #8]
   12718:	mov	r8, #3
   1271c:	bl	12318 <coda_set_definition_path@plt>
   12720:	b	12744 <main@@Base+0xf0>
   12724:	ldr	r2, [pc, #3676]	; 13588 <main@@Base+0xf34>
   12728:	mov	r1, #0
   1272c:	ldr	r0, [r5]
   12730:	add	r2, pc, r2
   12734:	bl	12294 <coda_set_definition_path_conditional@plt>
   12738:	cmp	r0, #0
   1273c:	moveq	r8, #1
   12740:	bne	13d4c <main@@Base+0x16f8>
   12744:	ldr	r1, [pc, #3648]	; 1358c <main@@Base+0xf38>
   12748:	lsl	r7, r8, #2
   1274c:	ldr	sl, [r5, r8, lsl #2]
   12750:	add	r1, pc, r1
   12754:	mov	r0, sl
   12758:	bl	121ec <strcmp@plt>
   1275c:	subs	fp, r0, #0
   12760:	beq	1294c <main@@Base+0x2f8>
   12764:	ldr	r1, [pc, #3620]	; 13590 <main@@Base+0xf3c>
   12768:	mov	r0, sl
   1276c:	add	r1, pc, r1
   12770:	bl	121ec <strcmp@plt>
   12774:	subs	fp, r0, #0
   12778:	beq	12d60 <main@@Base+0x70c>
   1277c:	ldr	r1, [pc, #3600]	; 13594 <main@@Base+0xf40>
   12780:	mov	r0, sl
   12784:	add	r1, pc, r1
   12788:	bl	121ec <strcmp@plt>
   1278c:	subs	r9, r0, #0
   12790:	beq	13170 <main@@Base+0xb1c>
   12794:	ldr	r1, [pc, #3580]	; 13598 <main@@Base+0xf44>
   12798:	mov	r0, sl
   1279c:	add	r1, pc, r1
   127a0:	bl	121ec <strcmp@plt>
   127a4:	subs	r9, r0, #0
   127a8:	beq	13488 <main@@Base+0xe34>
   127ac:	ldr	r1, [pc, #3560]	; 1359c <main@@Base+0xf48>
   127b0:	mov	r0, sl
   127b4:	add	r1, pc, r1
   127b8:	bl	121ec <strcmp@plt>
   127bc:	cmp	r0, #0
   127c0:	str	r0, [sp, #36]	; 0x24
   127c4:	bne	13b74 <main@@Base+0x1520>
   127c8:	ldr	r2, [pc, #3536]	; 135a0 <main@@Base+0xf4c>
   127cc:	add	r7, r7, #4
   127d0:	mov	r1, #5
   127d4:	add	r5, r5, r7
   127d8:	mov	r7, r0
   127dc:	ldr	r3, [pc, #3520]	; 135a4 <main@@Base+0xf50>
   127e0:	add	r8, r8, #1
   127e4:	mov	fp, #1
   127e8:	str	r7, [sp, #28]
   127ec:	sub	r4, r4, r8
   127f0:	str	r7, [sp, #32]
   127f4:	ldr	lr, [r6, r2]
   127f8:	ldr	r0, [pc, #3496]	; 135a8 <main@@Base+0xf54>
   127fc:	ldr	ip, [pc, #3496]	; 135ac <main@@Base+0xf58>
   12800:	str	r1, [lr]
   12804:	ldr	r1, [r6, r3]
   12808:	ldr	r2, [pc, #3488]	; 135b0 <main@@Base+0xf5c>
   1280c:	ldr	r3, [pc, #3488]	; 135b4 <main@@Base+0xf60>
   12810:	str	r7, [r1]
   12814:	str	r1, [sp, #8]
   12818:	ldr	r1, [r6, r0]
   1281c:	ldr	r0, [pc, #3476]	; 135b8 <main@@Base+0xf64>
   12820:	ldr	sl, [pc, #3476]	; 135bc <main@@Base+0xf68>
   12824:	str	r7, [r1]
   12828:	str	r1, [sp, #4]
   1282c:	add	r0, pc, r0
   12830:	ldr	r9, [pc, #3464]	; 135c0 <main@@Base+0xf6c>
   12834:	str	r0, [sp, #12]
   12838:	add	sl, pc, sl
   1283c:	ldr	r1, [r6, ip]
   12840:	add	r9, pc, r9
   12844:	str	r7, [r1]
   12848:	str	r1, [sp, #24]
   1284c:	ldr	r2, [r6, r2]
   12850:	ldr	r1, [r6, r3]
   12854:	str	r6, [sp, #16]
   12858:	ldr	r3, [r2]
   1285c:	str	r1, [sp, #20]
   12860:	str	r3, [r1]
   12864:	b	128f0 <main@@Base+0x29c>
   12868:	mov	r1, r9
   1286c:	mov	r0, r6
   12870:	bl	121ec <strcmp@plt>
   12874:	cmp	r0, #0
   12878:	beq	12914 <main@@Base+0x2c0>
   1287c:	mov	r0, r6
   12880:	ldr	r1, [sp, #12]
   12884:	bl	121ec <strcmp@plt>
   12888:	cmp	r0, #0
   1288c:	beq	12af8 <main@@Base+0x4a4>
   12890:	ldr	r1, [pc, #3372]	; 135c4 <main@@Base+0xf70>
   12894:	mov	r0, r6
   12898:	add	r1, pc, r1
   1289c:	bl	121ec <strcmp@plt>
   128a0:	cmp	r0, #0
   128a4:	beq	12af8 <main@@Base+0x4a4>
   128a8:	ldr	r1, [pc, #3352]	; 135c8 <main@@Base+0xf74>
   128ac:	mov	r0, r6
   128b0:	add	r1, pc, r1
   128b4:	bl	121ec <strcmp@plt>
   128b8:	cmp	r0, #0
   128bc:	bne	12c60 <main@@Base+0x60c>
   128c0:	add	r3, r7, #1
   128c4:	cmp	r4, r3
   128c8:	ble	12b28 <main@@Base+0x4d4>
   128cc:	add	r2, r5, r8
   128d0:	ldr	r2, [r2, #4]
   128d4:	ldrb	r1, [r2]
   128d8:	cmp	r1, #45	; 0x2d
   128dc:	beq	12b28 <main@@Base+0x4d4>
   128e0:	mov	r7, r3
   128e4:	ldr	r3, [sp, #24]
   128e8:	str	r2, [r3]
   128ec:	add	r7, r7, #1
   128f0:	cmp	r4, r7
   128f4:	ble	13098 <main@@Base+0xa44>
   128f8:	ldr	r6, [r5, r7, lsl #2]
   128fc:	mov	r1, sl
   12900:	lsl	r8, r7, #2
   12904:	mov	r0, r6
   12908:	bl	121ec <strcmp@plt>
   1290c:	cmp	r0, #0
   12910:	bne	12868 <main@@Base+0x214>
   12914:	mov	fp, r0
   12918:	b	128ec <main@@Base+0x298>
   1291c:	bl	125dc <coda_get_libcoda_version@plt>
   12920:	mov	r1, r0
   12924:	ldr	r0, [pc, #3232]	; 135cc <main@@Base+0xf78>
   12928:	add	r0, pc, r0
   1292c:	bl	12210 <printf@plt>
   12930:	ldr	r0, [pc, #3224]	; 135d0 <main@@Base+0xf7c>
   12934:	add	r0, pc, r0
   12938:	bl	1239c <puts@plt>
   1293c:	mov	r0, #10
   12940:	bl	124a4 <putchar@plt>
   12944:	mov	r0, #0
   12948:	bl	123fc <exit@plt>
   1294c:	ldr	ip, [pc, #3148]	; 135a0 <main@@Base+0xf4c>
   12950:	mov	r0, #1
   12954:	add	r7, r7, #4
   12958:	add	r8, r8, r0
   1295c:	add	r5, r5, r7
   12960:	ldr	r1, [pc, #3132]	; 135a4 <main@@Base+0xf50>
   12964:	sub	r4, r4, r8
   12968:	cmp	r4, #0
   1296c:	ldr	r2, [pc, #3168]	; 135d4 <main@@Base+0xf80>
   12970:	ldr	ip, [r6, ip]
   12974:	ldr	r7, [pc, #3164]	; 135d8 <main@@Base+0xf84>
   12978:	ldr	lr, [pc, #3164]	; 135dc <main@@Base+0xf88>
   1297c:	str	fp, [ip]
   12980:	ldr	r3, [r6, r1]
   12984:	ldr	ip, [pc, #3156]	; 135e0 <main@@Base+0xf8c>
   12988:	ldr	r1, [pc, #3156]	; 135e4 <main@@Base+0xf90>
   1298c:	str	fp, [r3]
   12990:	str	r3, [sp, #8]
   12994:	str	fp, [r3, #664]	; 0x298
   12998:	ldr	r8, [r6, r2]
   1299c:	ldr	r2, [pc, #3140]	; 135e8 <main@@Base+0xf94>
   129a0:	str	r0, [r8]
   129a4:	ldr	sl, [r6, r7]
   129a8:	str	fp, [sl]
   129ac:	ldr	r3, [r6, lr]
   129b0:	str	fp, [r3]
   129b4:	str	r3, [sp, #36]	; 0x24
   129b8:	ldr	r3, [r6, ip]
   129bc:	str	fp, [r3]
   129c0:	str	r3, [sp, #16]
   129c4:	ldr	r3, [r6, r1]
   129c8:	str	fp, [r3]
   129cc:	str	r3, [sp, #32]
   129d0:	ldr	r3, [r6, r2]
   129d4:	str	fp, [r3]
   129d8:	str	r3, [sp, #40]	; 0x28
   129dc:	ble	13ac8 <main@@Base+0x1474>
   129e0:	ldr	r3, [pc, #3076]	; 135ec <main@@Base+0xf98>
   129e4:	str	r0, [sp, #12]
   129e8:	ldr	r9, [pc, #3072]	; 135f0 <main@@Base+0xf9c>
   129ec:	str	r6, [sp, #20]
   129f0:	ldr	r8, [pc, #3068]	; 135f4 <main@@Base+0xfa0>
   129f4:	add	r3, pc, r3
   129f8:	add	r9, pc, r9
   129fc:	str	r3, [sp, #4]
   12a00:	str	r0, [sp, #24]
   12a04:	add	r8, pc, r8
   12a08:	b	12ac8 <main@@Base+0x474>
   12a0c:	mov	r1, r8
   12a10:	mov	r0, r6
   12a14:	bl	121ec <strcmp@plt>
   12a18:	cmp	r0, #0
   12a1c:	beq	12ae4 <main@@Base+0x490>
   12a20:	mov	r0, r6
   12a24:	ldr	r1, [sp, #4]
   12a28:	bl	121ec <strcmp@plt>
   12a2c:	cmp	r0, #0
   12a30:	beq	12af0 <main@@Base+0x49c>
   12a34:	ldr	r1, [pc, #3004]	; 135f8 <main@@Base+0xfa4>
   12a38:	mov	r0, r6
   12a3c:	add	r1, pc, r1
   12a40:	bl	121ec <strcmp@plt>
   12a44:	cmp	r0, #0
   12a48:	beq	12af0 <main@@Base+0x49c>
   12a4c:	ldr	r1, [pc, #2984]	; 135fc <main@@Base+0xfa8>
   12a50:	mov	r0, r6
   12a54:	add	r1, pc, r1
   12a58:	bl	121ec <strcmp@plt>
   12a5c:	cmp	r0, #0
   12a60:	beq	12a7c <main@@Base+0x428>
   12a64:	ldr	r1, [pc, #2964]	; 13600 <main@@Base+0xfac>
   12a68:	mov	r0, r6
   12a6c:	add	r1, pc, r1
   12a70:	bl	121ec <strcmp@plt>
   12a74:	cmp	r0, #0
   12a78:	bne	12bc0 <main@@Base+0x56c>
   12a7c:	add	r2, fp, #1
   12a80:	cmp	r4, r2
   12a84:	str	r2, [sp, #28]
   12a88:	ble	12bc0 <main@@Base+0x56c>
   12a8c:	add	r7, r5, r7
   12a90:	ldr	r0, [r7, #4]
   12a94:	ldrb	r1, [r0]
   12a98:	cmp	r1, #45	; 0x2d
   12a9c:	beq	12bc0 <main@@Base+0x56c>
   12aa0:	bl	177ac <codadump_filter_create@@Base>
   12aa4:	ldr	r3, [sp, #8]
   12aa8:	cmp	r0, #0
   12aac:	ldr	r2, [sp, #28]
   12ab0:	str	r0, [r3, #664]	; 0x298
   12ab4:	beq	13bdc <main@@Base+0x1588>
   12ab8:	mov	fp, r2
   12abc:	add	fp, fp, #1
   12ac0:	cmp	r4, fp
   12ac4:	ble	12ce0 <main@@Base+0x68c>
   12ac8:	ldr	r6, [r5, fp, lsl #2]
   12acc:	mov	r1, r9
   12ad0:	lsl	r7, fp, #2
   12ad4:	mov	r0, r6
   12ad8:	bl	121ec <strcmp@plt>
   12adc:	cmp	r0, #0
   12ae0:	bne	12a0c <main@@Base+0x3b8>
   12ae4:	mov	r2, #1
   12ae8:	str	r2, [sl]
   12aec:	b	12abc <main@@Base+0x468>
   12af0:	str	r0, [sp, #12]
   12af4:	b	12abc <main@@Base+0x468>
   12af8:	add	r3, r7, #1
   12afc:	cmp	r4, r3
   12b00:	ble	12c48 <main@@Base+0x5f4>
   12b04:	add	r2, r5, r8
   12b08:	ldr	r1, [r2, #4]
   12b0c:	ldrb	r0, [r1]
   12b10:	cmp	r0, #45	; 0x2d
   12b14:	beq	1312c <main@@Base+0xad8>
   12b18:	mov	r7, r3
   12b1c:	ldr	r3, [sp, #4]
   12b20:	str	r1, [r3]
   12b24:	b	128ec <main@@Base+0x298>
   12b28:	ldr	r1, [pc, #2772]	; 13604 <main@@Base+0xfb0>
   12b2c:	mov	r0, r6
   12b30:	add	r1, pc, r1
   12b34:	bl	121ec <strcmp@plt>
   12b38:	subs	r1, r0, #0
   12b3c:	bne	12b9c <main@@Base+0x548>
   12b40:	add	r3, r7, #3
   12b44:	cmp	r4, r3
   12b48:	ble	12b9c <main@@Base+0x548>
   12b4c:	add	r8, r5, r8
   12b50:	ldr	ip, [r8, #4]
   12b54:	ldrb	r2, [ip]
   12b58:	cmp	r2, #45	; 0x2d
   12b5c:	beq	12b9c <main@@Base+0x548>
   12b60:	ldr	lr, [r8, #8]
   12b64:	ldrb	r2, [lr]
   12b68:	cmp	r2, #45	; 0x2d
   12b6c:	beq	12b9c <main@@Base+0x548>
   12b70:	ldr	r0, [r8, #12]
   12b74:	ldrb	r2, [r0]
   12b78:	cmp	r2, #45	; 0x2d
   12b7c:	beq	12b9c <main@@Base+0x548>
   12b80:	mov	r2, #10
   12b84:	mov	r7, r3
   12b88:	str	ip, [sp, #28]
   12b8c:	str	lr, [sp, #32]
   12b90:	bl	121f8 <strtol@plt>
   12b94:	str	r0, [sp, #36]	; 0x24
   12b98:	b	128ec <main@@Base+0x298>
   12b9c:	sub	r3, r4, #1
   12ba0:	cmp	r7, r3
   12ba4:	bne	13d80 <main@@Base+0x172c>
   12ba8:	ldrb	r3, [r6]
   12bac:	cmp	r3, #45	; 0x2d
   12bb0:	beq	13d80 <main@@Base+0x172c>
   12bb4:	ldr	r3, [sp, #8]
   12bb8:	str	r6, [r3]
   12bbc:	b	128ec <main@@Base+0x298>
   12bc0:	ldr	r1, [pc, #2624]	; 13608 <main@@Base+0xfb4>
   12bc4:	mov	r0, r6
   12bc8:	add	r1, pc, r1
   12bcc:	bl	121ec <strcmp@plt>
   12bd0:	cmp	r0, #0
   12bd4:	beq	12cd0 <main@@Base+0x67c>
   12bd8:	ldr	r1, [pc, #2604]	; 1360c <main@@Base+0xfb8>
   12bdc:	mov	r0, r6
   12be0:	add	r1, pc, r1
   12be4:	bl	121ec <strcmp@plt>
   12be8:	cmp	r0, #0
   12bec:	beq	12cd0 <main@@Base+0x67c>
   12bf0:	ldr	r1, [pc, #2584]	; 13610 <main@@Base+0xfbc>
   12bf4:	mov	r0, r6
   12bf8:	add	r1, pc, r1
   12bfc:	bl	121ec <strcmp@plt>
   12c00:	cmp	r0, #0
   12c04:	beq	13478 <main@@Base+0xe24>
   12c08:	ldr	r1, [pc, #2564]	; 13614 <main@@Base+0xfc0>
   12c0c:	mov	r0, r6
   12c10:	add	r1, pc, r1
   12c14:	bl	121ec <strcmp@plt>
   12c18:	cmp	r0, #0
   12c1c:	beq	13478 <main@@Base+0xe24>
   12c20:	ldr	r1, [pc, #2544]	; 13618 <main@@Base+0xfc4>
   12c24:	mov	r0, r6
   12c28:	add	r1, pc, r1
   12c2c:	bl	121ec <strcmp@plt>
   12c30:	cmp	r0, #0
   12c34:	bne	13a20 <main@@Base+0x13cc>
   12c38:	ldr	r3, [sp, #40]	; 0x28
   12c3c:	mov	r2, #1
   12c40:	str	r2, [r3]
   12c44:	b	12abc <main@@Base+0x468>
   12c48:	ldr	r1, [pc, #2508]	; 1361c <main@@Base+0xfc8>
   12c4c:	mov	r0, r6
   12c50:	add	r1, pc, r1
   12c54:	bl	121ec <strcmp@plt>
   12c58:	cmp	r0, #0
   12c5c:	beq	12b28 <main@@Base+0x4d4>
   12c60:	ldr	r1, [pc, #2488]	; 13620 <main@@Base+0xfcc>
   12c64:	mov	r0, r6
   12c68:	add	r1, pc, r1
   12c6c:	bl	121ec <strcmp@plt>
   12c70:	cmp	r0, #0
   12c74:	beq	128c0 <main@@Base+0x26c>
   12c78:	ldr	r1, [pc, #2468]	; 13624 <main@@Base+0xfd0>
   12c7c:	mov	r0, r6
   12c80:	add	r1, pc, r1
   12c84:	bl	121ec <strcmp@plt>
   12c88:	subs	r1, r0, #0
   12c8c:	bne	12b28 <main@@Base+0x4d4>
   12c90:	add	r3, r7, #1
   12c94:	cmp	r4, r3
   12c98:	ble	12b28 <main@@Base+0x4d4>
   12c9c:	add	r2, r5, r8
   12ca0:	ldr	r0, [r2, #4]
   12ca4:	ldrb	r2, [r0]
   12ca8:	cmp	r2, #45	; 0x2d
   12cac:	beq	12b28 <main@@Base+0x4d4>
   12cb0:	mov	r2, #10
   12cb4:	mov	r7, r3
   12cb8:	bl	121f8 <strtol@plt>
   12cbc:	ldr	r3, [pc, #2404]	; 13628 <main@@Base+0xfd4>
   12cc0:	ldr	r2, [sp, #16]
   12cc4:	ldr	r3, [r2, r3]
   12cc8:	str	r0, [r3]
   12ccc:	b	128ec <main@@Base+0x298>
   12cd0:	ldr	r3, [sp, #16]
   12cd4:	mov	r2, #1
   12cd8:	str	r2, [r3]
   12cdc:	b	12abc <main@@Base+0x468>
   12ce0:	ldr	r3, [sp, #8]
   12ce4:	ldr	r6, [sp, #20]
   12ce8:	ldr	r3, [r3]
   12cec:	cmp	r3, #0
   12cf0:	beq	13ac8 <main@@Base+0x1474>
   12cf4:	ldrb	r3, [r3]
   12cf8:	cmp	r3, #0
   12cfc:	beq	13ac8 <main@@Base+0x1474>
   12d00:	bl	12468 <coda_init@plt>
   12d04:	subs	r4, r0, #0
   12d08:	bne	13b8c <main@@Base+0x1538>
   12d0c:	ldr	r3, [sp, #24]
   12d10:	eor	r0, r3, #1
   12d14:	bl	122ac <coda_set_option_bypass_special_types@plt>
   12d18:	mov	r0, r4
   12d1c:	bl	121e0 <coda_set_option_perform_boundary_checks@plt>
   12d20:	ldr	r0, [sp, #12]
   12d24:	bl	12474 <coda_set_option_perform_conversions@plt>
   12d28:	bl	19190 <traverse_info_init@@Base>
   12d2c:	bl	165c4 <dim_info_init@@Base>
   12d30:	bl	1921c <traverse_product@@Base>
   12d34:	bl	165f4 <dim_info_done@@Base>
   12d38:	bl	191c0 <traverse_info_done@@Base>
   12d3c:	bl	12390 <coda_done@plt>
   12d40:	mov	r0, #0
   12d44:	add	sp, sp, #68	; 0x44
   12d48:	ldrd	r4, [sp]
   12d4c:	ldrd	r6, [sp, #8]
   12d50:	ldrd	r8, [sp, #16]
   12d54:	ldrd	sl, [sp, #24]
   12d58:	add	sp, sp, #32
   12d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d60:	ldr	r0, [pc, #2104]	; 135a0 <main@@Base+0xf4c>
   12d64:	mov	r2, #1
   12d68:	add	r7, r7, #4
   12d6c:	add	r8, r8, r2
   12d70:	add	r5, r5, r7
   12d74:	ldr	r1, [pc, #2088]	; 135a4 <main@@Base+0xf50>
   12d78:	sub	r4, r4, r8
   12d7c:	mov	sl, r2
   12d80:	str	r2, [sp, #36]	; 0x24
   12d84:	ldr	lr, [pc, #2076]	; 135a8 <main@@Base+0xf54>
   12d88:	ldr	r0, [r6, r0]
   12d8c:	ldr	ip, [pc, #2200]	; 1362c <main@@Base+0xfd8>
   12d90:	ldr	r9, [pc, #2200]	; 13630 <main@@Base+0xfdc>
   12d94:	str	r2, [r0]
   12d98:	ldr	r3, [r6, r1]
   12d9c:	ldr	r0, [pc, #2060]	; 135b0 <main@@Base+0xf5c>
   12da0:	add	r9, pc, r9
   12da4:	ldr	r1, [pc, #2056]	; 135b4 <main@@Base+0xf60>
   12da8:	str	fp, [r3]
   12dac:	str	r3, [sp, #8]
   12db0:	str	fp, [r3, #664]	; 0x298
   12db4:	ldr	r3, [r6, lr]
   12db8:	ldr	r8, [pc, #2068]	; 135d4 <main@@Base+0xf80>
   12dbc:	ldr	r7, [pc, #2068]	; 135d8 <main@@Base+0xf84>
   12dc0:	str	fp, [r3]
   12dc4:	str	r3, [sp, #4]
   12dc8:	ldr	r3, [r6, ip]
   12dcc:	ldr	lr, [pc, #2144]	; 13634 <main@@Base+0xfe0>
   12dd0:	ldr	ip, [pc, #2144]	; 13638 <main@@Base+0xfe4>
   12dd4:	str	r9, [r3]
   12dd8:	str	r3, [sp, #48]	; 0x30
   12ddc:	ldr	r9, [r6, r0]
   12de0:	ldr	r3, [r6, r1]
   12de4:	ldr	r0, [pc, #2128]	; 1363c <main@@Base+0xfe8>
   12de8:	ldr	r9, [r9]
   12dec:	str	r3, [sp, #20]
   12df0:	ldr	r1, [pc, #2120]	; 13640 <main@@Base+0xfec>
   12df4:	str	r9, [r3]
   12df8:	ldr	r8, [r6, r8]
   12dfc:	ldr	r9, [pc, #2112]	; 13644 <main@@Base+0xff0>
   12e00:	str	r2, [r8]
   12e04:	ldr	r7, [r6, r7]
   12e08:	add	r9, pc, r9
   12e0c:	ldr	r8, [pc, #2100]	; 13648 <main@@Base+0xff4>
   12e10:	str	r2, [r7]
   12e14:	ldr	r2, [pc, #2096]	; 1364c <main@@Base+0xff8>
   12e18:	add	r8, pc, r8
   12e1c:	ldr	r3, [r6, lr]
   12e20:	add	r2, pc, r2
   12e24:	str	fp, [r3]
   12e28:	str	r2, [sp, #12]
   12e2c:	str	r3, [sp, #24]
   12e30:	ldr	r3, [r6, ip]
   12e34:	str	fp, [r3]
   12e38:	str	r3, [sp, #28]
   12e3c:	ldr	r3, [r6, r0]
   12e40:	str	fp, [r3]
   12e44:	str	r3, [sp, #40]	; 0x28
   12e48:	ldr	r3, [r6, r1]
   12e4c:	str	r6, [sp, #32]
   12e50:	str	fp, [r3]
   12e54:	str	r3, [sp, #44]	; 0x2c
   12e58:	b	12ee0 <main@@Base+0x88c>
   12e5c:	mov	r1, r8
   12e60:	mov	r0, r6
   12e64:	bl	121ec <strcmp@plt>
   12e68:	cmp	r0, #0
   12e6c:	beq	12f04 <main@@Base+0x8b0>
   12e70:	mov	r0, r6
   12e74:	ldr	r1, [sp, #12]
   12e78:	bl	121ec <strcmp@plt>
   12e7c:	cmp	r0, #0
   12e80:	beq	12e9c <main@@Base+0x848>
   12e84:	ldr	r1, [pc, #1988]	; 13650 <main@@Base+0xffc>
   12e88:	mov	r0, r6
   12e8c:	add	r1, pc, r1
   12e90:	bl	121ec <strcmp@plt>
   12e94:	cmp	r0, #0
   12e98:	bne	12f0c <main@@Base+0x8b8>
   12e9c:	add	r2, fp, #1
   12ea0:	cmp	r4, r2
   12ea4:	str	r2, [sp, #16]
   12ea8:	ble	12f0c <main@@Base+0x8b8>
   12eac:	add	r1, r5, r7
   12eb0:	ldr	r0, [r1, #4]
   12eb4:	ldrb	r1, [r0]
   12eb8:	cmp	r1, #45	; 0x2d
   12ebc:	beq	12f0c <main@@Base+0x8b8>
   12ec0:	bl	177ac <codadump_filter_create@@Base>
   12ec4:	ldr	r3, [sp, #8]
   12ec8:	cmp	r0, #0
   12ecc:	ldr	r2, [sp, #16]
   12ed0:	str	r0, [r3, #664]	; 0x298
   12ed4:	beq	13bf8 <main@@Base+0x15a4>
   12ed8:	mov	fp, r2
   12edc:	add	fp, fp, #1
   12ee0:	cmp	r4, fp
   12ee4:	ble	12fec <main@@Base+0x998>
   12ee8:	ldr	r6, [r5, fp, lsl #2]
   12eec:	mov	r1, r9
   12ef0:	lsl	r7, fp, #2
   12ef4:	mov	r0, r6
   12ef8:	bl	121ec <strcmp@plt>
   12efc:	cmp	r0, #0
   12f00:	bne	12e5c <main@@Base+0x808>
   12f04:	mov	sl, r0
   12f08:	b	12edc <main@@Base+0x888>
   12f0c:	ldr	r1, [pc, #1856]	; 13654 <main@@Base+0x1000>
   12f10:	mov	r0, r6
   12f14:	add	r1, pc, r1
   12f18:	bl	121ec <strcmp@plt>
   12f1c:	cmp	r0, #0
   12f20:	beq	12fcc <main@@Base+0x978>
   12f24:	ldr	r1, [pc, #1836]	; 13658 <main@@Base+0x1004>
   12f28:	mov	r0, r6
   12f2c:	add	r1, pc, r1
   12f30:	bl	121ec <strcmp@plt>
   12f34:	cmp	r0, #0
   12f38:	beq	12fcc <main@@Base+0x978>
   12f3c:	ldr	r1, [pc, #1816]	; 1365c <main@@Base+0x1008>
   12f40:	mov	r0, r6
   12f44:	add	r1, pc, r1
   12f48:	bl	121ec <strcmp@plt>
   12f4c:	cmp	r0, #0
   12f50:	beq	12fdc <main@@Base+0x988>
   12f54:	ldr	r1, [pc, #1796]	; 13660 <main@@Base+0x100c>
   12f58:	mov	r0, r6
   12f5c:	add	r1, pc, r1
   12f60:	bl	121ec <strcmp@plt>
   12f64:	cmp	r0, #0
   12f68:	beq	12fdc <main@@Base+0x988>
   12f6c:	ldr	r1, [pc, #1776]	; 13664 <main@@Base+0x1010>
   12f70:	mov	r0, r6
   12f74:	add	r1, pc, r1
   12f78:	bl	121ec <strcmp@plt>
   12f7c:	cmp	r0, #0
   12f80:	beq	12f9c <main@@Base+0x948>
   12f84:	ldr	r1, [pc, #1756]	; 13668 <main@@Base+0x1014>
   12f88:	mov	r0, r6
   12f8c:	add	r1, pc, r1
   12f90:	bl	121ec <strcmp@plt>
   12f94:	cmp	r0, #0
   12f98:	bne	13970 <main@@Base+0x131c>
   12f9c:	add	r2, fp, #1
   12fa0:	cmp	r4, r2
   12fa4:	ble	13970 <main@@Base+0x131c>
   12fa8:	add	r1, r5, r7
   12fac:	ldr	r1, [r1, #4]
   12fb0:	ldrb	r0, [r1]
   12fb4:	cmp	r0, #45	; 0x2d
   12fb8:	beq	13970 <main@@Base+0x131c>
   12fbc:	ldr	r3, [sp, #4]
   12fc0:	mov	fp, r2
   12fc4:	str	r1, [r3]
   12fc8:	b	12edc <main@@Base+0x888>
   12fcc:	ldr	r3, [sp, #24]
   12fd0:	mov	r2, #1
   12fd4:	str	r2, [r3]
   12fd8:	b	12edc <main@@Base+0x888>
   12fdc:	ldr	r3, [sp, #28]
   12fe0:	mov	r2, #1
   12fe4:	str	r2, [r3]
   12fe8:	b	12edc <main@@Base+0x888>
   12fec:	ldr	r3, [sp, #8]
   12ff0:	ldr	r6, [sp, #32]
   12ff4:	ldr	r3, [r3]
   12ff8:	cmp	r3, #0
   12ffc:	beq	13c34 <main@@Base+0x15e0>
   13000:	ldrb	r3, [r3]
   13004:	cmp	r3, #0
   13008:	beq	13c34 <main@@Base+0x15e0>
   1300c:	bl	12468 <coda_init@plt>
   13010:	subs	r4, r0, #0
   13014:	bne	13b40 <main@@Base+0x14ec>
   13018:	ldr	r3, [sp, #36]	; 0x24
   1301c:	eor	r0, r3, #1
   13020:	bl	122ac <coda_set_option_bypass_special_types@plt>
   13024:	mov	r0, r4
   13028:	bl	121e0 <coda_set_option_perform_boundary_checks@plt>
   1302c:	mov	r0, sl
   13030:	bl	12474 <coda_set_option_perform_conversions@plt>
   13034:	bl	19190 <traverse_info_init@@Base>
   13038:	bl	165c4 <dim_info_init@@Base>
   1303c:	ldr	r3, [sp, #4]
   13040:	ldr	r0, [r3]
   13044:	cmp	r0, #0
   13048:	beq	13068 <main@@Base+0xa14>
   1304c:	ldr	r1, [pc, #1560]	; 1366c <main@@Base+0x1018>
   13050:	add	r1, pc, r1
   13054:	bl	12228 <fopen@plt>
   13058:	ldr	r3, [sp, #20]
   1305c:	cmp	r0, #0
   13060:	str	r0, [r3]
   13064:	beq	13c4c <main@@Base+0x15f8>
   13068:	bl	1921c <traverse_product@@Base>
   1306c:	ldr	r3, [sp, #4]
   13070:	ldr	r3, [r3]
   13074:	cmp	r3, #0
   13078:	beq	13088 <main@@Base+0xa34>
   1307c:	ldr	r3, [sp, #20]
   13080:	ldr	r0, [r3]
   13084:	bl	124ec <fclose@plt>
   13088:	bl	165f4 <dim_info_done@@Base>
   1308c:	bl	191c0 <traverse_info_done@@Base>
   13090:	bl	12390 <coda_done@plt>
   13094:	b	12d40 <main@@Base+0x6ec>
   13098:	ldr	r3, [sp, #8]
   1309c:	ldr	r6, [sp, #16]
   130a0:	ldr	r3, [r3]
   130a4:	cmp	r3, #0
   130a8:	beq	13d84 <main@@Base+0x1730>
   130ac:	ldrb	r3, [r3]
   130b0:	cmp	r3, #0
   130b4:	beq	13d84 <main@@Base+0x1730>
   130b8:	bl	12468 <coda_init@plt>
   130bc:	cmp	r0, #0
   130c0:	bne	13d18 <main@@Base+0x16c4>
   130c4:	bl	12474 <coda_set_option_perform_conversions@plt>
   130c8:	mov	r0, fp
   130cc:	bl	121bc <coda_set_option_use_fast_size_expressions@plt>
   130d0:	ldr	r3, [sp, #4]
   130d4:	ldr	r0, [r3]
   130d8:	cmp	r0, #0
   130dc:	beq	130fc <main@@Base+0xaa8>
   130e0:	ldr	r1, [pc, #1416]	; 13670 <main@@Base+0x101c>
   130e4:	add	r1, pc, r1
   130e8:	bl	12228 <fopen@plt>
   130ec:	ldr	r3, [sp, #20]
   130f0:	cmp	r0, #0
   130f4:	str	r0, [r3]
   130f8:	beq	13d9c <main@@Base+0x1748>
   130fc:	ldrd	r0, [sp, #28]
   13100:	ldr	r2, [sp, #36]	; 0x24
   13104:	bl	15c90 <print_debug_data@@Base>
   13108:	ldr	r3, [sp, #4]
   1310c:	ldr	r3, [r3]
   13110:	cmp	r3, #0
   13114:	beq	13124 <main@@Base+0xad0>
   13118:	ldr	r3, [sp, #20]
   1311c:	ldr	r0, [r3]
   13120:	bl	124ec <fclose@plt>
   13124:	bl	12390 <coda_done@plt>
   13128:	b	12d40 <main@@Base+0x6ec>
   1312c:	ldr	r1, [pc, #1344]	; 13674 <main@@Base+0x1020>
   13130:	mov	r0, r6
   13134:	str	r3, [sp, #40]	; 0x28
   13138:	str	r2, [sp, #44]	; 0x2c
   1313c:	add	r1, pc, r1
   13140:	bl	121ec <strcmp@plt>
   13144:	cmp	r0, #0
   13148:	beq	12b28 <main@@Base+0x4d4>
   1314c:	ldr	r1, [pc, #1316]	; 13678 <main@@Base+0x1024>
   13150:	mov	r0, r6
   13154:	add	r1, pc, r1
   13158:	bl	121ec <strcmp@plt>
   1315c:	cmp	r0, #0
   13160:	ldr	r3, [sp, #40]	; 0x28
   13164:	ldr	r2, [sp, #44]	; 0x2c
   13168:	beq	128d0 <main@@Base+0x27c>
   1316c:	b	12c78 <main@@Base+0x624>
   13170:	ldr	r1, [pc, #1064]	; 135a0 <main@@Base+0xf4c>
   13174:	mov	r3, #1
   13178:	add	r7, r7, #4
   1317c:	add	r7, r5, r7
   13180:	mov	lr, #3
   13184:	ldr	r2, [pc, #1048]	; 135a4 <main@@Base+0xf50>
   13188:	add	r8, r8, #1
   1318c:	mov	fp, r9
   13190:	str	r3, [sp, #16]
   13194:	sub	r4, r4, r8
   13198:	str	r3, [sp, #36]	; 0x24
   1319c:	ldr	r5, [r6, r1]
   131a0:	ldr	ip, [pc, #1024]	; 135a8 <main@@Base+0xf54>
   131a4:	ldr	r0, [pc, #1024]	; 135ac <main@@Base+0xf58>
   131a8:	str	lr, [r5]
   131ac:	ldr	r3, [r6, r2]
   131b0:	ldr	r2, [pc, #1020]	; 135b4 <main@@Base+0xf60>
   131b4:	ldr	r1, [pc, #1012]	; 135b0 <main@@Base+0xf5c>
   131b8:	str	r9, [r3]
   131bc:	str	r3, [sp, #8]
   131c0:	ldr	r3, [r6, ip]
   131c4:	ldr	ip, [pc, #1200]	; 1367c <main@@Base+0x1028>
   131c8:	ldr	sl, [pc, #1200]	; 13680 <main@@Base+0x102c>
   131cc:	str	r9, [r3]
   131d0:	str	r3, [sp, #4]
   131d4:	add	ip, pc, ip
   131d8:	ldr	r8, [pc, #1188]	; 13684 <main@@Base+0x1030>
   131dc:	str	ip, [sp, #12]
   131e0:	add	sl, pc, sl
   131e4:	ldr	r3, [r6, r0]
   131e8:	ldr	r0, [pc, #1176]	; 13688 <main@@Base+0x1034>
   131ec:	add	r8, pc, r8
   131f0:	str	r9, [r3]
   131f4:	str	r3, [sp, #24]
   131f8:	add	r0, pc, r0
   131fc:	str	r0, [sp, #28]
   13200:	ldr	r0, [pc, #1156]	; 1368c <main@@Base+0x1038>
   13204:	add	r0, pc, r0
   13208:	str	r0, [sp, #32]
   1320c:	ldr	r3, [r6, r2]
   13210:	ldr	r2, [pc, #1144]	; 13690 <main@@Base+0x103c>
   13214:	ldr	r1, [r6, r1]
   13218:	str	r3, [sp, #20]
   1321c:	str	r6, [sp, #40]	; 0x28
   13220:	add	r2, pc, r2
   13224:	str	r2, [sp, #44]	; 0x2c
   13228:	ldr	r2, [r1]
   1322c:	ldr	r1, [pc, #1120]	; 13694 <main@@Base+0x1040>
   13230:	str	r2, [r3]
   13234:	ldr	r3, [pc, #1116]	; 13698 <main@@Base+0x1044>
   13238:	add	r1, pc, r1
   1323c:	str	r1, [sp, #52]	; 0x34
   13240:	ldr	r1, [pc, #1108]	; 1369c <main@@Base+0x1048>
   13244:	add	r3, pc, r3
   13248:	str	r3, [sp, #48]	; 0x30
   1324c:	add	r1, pc, r1
   13250:	str	r1, [sp, #56]	; 0x38
   13254:	b	1331c <main@@Base+0xcc8>
   13258:	mov	r1, r8
   1325c:	mov	r0, r5
   13260:	bl	121ec <strcmp@plt>
   13264:	cmp	r0, #0
   13268:	beq	13340 <main@@Base+0xcec>
   1326c:	mov	r0, r5
   13270:	ldr	r1, [sp, #12]
   13274:	bl	121ec <strcmp@plt>
   13278:	cmp	r0, #0
   1327c:	beq	13348 <main@@Base+0xcf4>
   13280:	mov	r0, r5
   13284:	ldr	r1, [sp, #28]
   13288:	bl	121ec <strcmp@plt>
   1328c:	cmp	r0, #0
   13290:	beq	13348 <main@@Base+0xcf4>
   13294:	mov	r0, r5
   13298:	ldr	r1, [sp, #32]
   1329c:	bl	121ec <strcmp@plt>
   132a0:	cmp	r0, #0
   132a4:	beq	13350 <main@@Base+0xcfc>
   132a8:	mov	r0, r5
   132ac:	ldr	r1, [sp, #48]	; 0x30
   132b0:	bl	121ec <strcmp@plt>
   132b4:	cmp	r0, #0
   132b8:	beq	13350 <main@@Base+0xcfc>
   132bc:	ldr	r1, [pc, #988]	; 136a0 <main@@Base+0x104c>
   132c0:	mov	r0, r5
   132c4:	add	r1, pc, r1
   132c8:	bl	121ec <strcmp@plt>
   132cc:	cmp	r0, #0
   132d0:	beq	132ec <main@@Base+0xc98>
   132d4:	ldr	r1, [pc, #968]	; 136a4 <main@@Base+0x1050>
   132d8:	mov	r0, r5
   132dc:	add	r1, pc, r1
   132e0:	bl	121ec <strcmp@plt>
   132e4:	cmp	r0, #0
   132e8:	bne	13440 <main@@Base+0xdec>
   132ec:	add	r2, fp, #1
   132f0:	cmp	r4, r2
   132f4:	ble	13440 <main@@Base+0xdec>
   132f8:	add	r6, r7, r6
   132fc:	ldr	r1, [r6, #4]
   13300:	ldrb	r0, [r1]
   13304:	cmp	r0, #45	; 0x2d
   13308:	beq	13440 <main@@Base+0xdec>
   1330c:	ldr	r3, [sp, #24]
   13310:	mov	fp, r2
   13314:	str	r1, [r3]
   13318:	add	fp, fp, #1
   1331c:	cmp	r4, fp
   13320:	ble	13380 <main@@Base+0xd2c>
   13324:	ldr	r5, [r7, fp, lsl #2]
   13328:	mov	r1, sl
   1332c:	lsl	r6, fp, #2
   13330:	mov	r0, r5
   13334:	bl	121ec <strcmp@plt>
   13338:	cmp	r0, #0
   1333c:	bne	13258 <main@@Base+0xc04>
   13340:	mov	r9, #1
   13344:	b	13318 <main@@Base+0xcc4>
   13348:	str	r0, [sp, #16]
   1334c:	b	13318 <main@@Base+0xcc4>
   13350:	add	r2, fp, #1
   13354:	cmp	r4, r2
   13358:	ble	13440 <main@@Base+0xdec>
   1335c:	add	r6, r7, r6
   13360:	ldr	r1, [r6, #4]
   13364:	ldrb	r0, [r1]
   13368:	cmp	r0, #45	; 0x2d
   1336c:	beq	13408 <main@@Base+0xdb4>
   13370:	ldr	r3, [sp, #4]
   13374:	mov	fp, r2
   13378:	str	r1, [r3]
   1337c:	b	13318 <main@@Base+0xcc4>
   13380:	ldr	r3, [sp, #8]
   13384:	ldr	r6, [sp, #40]	; 0x28
   13388:	ldr	r3, [r3]
   1338c:	cmp	r3, #0
   13390:	beq	13bc4 <main@@Base+0x1570>
   13394:	ldrb	r3, [r3]
   13398:	cmp	r3, #0
   1339c:	beq	13bc4 <main@@Base+0x1570>
   133a0:	bl	12468 <coda_init@plt>
   133a4:	cmp	r0, #0
   133a8:	bne	13cc4 <main@@Base+0x1670>
   133ac:	ldr	r3, [sp, #36]	; 0x24
   133b0:	eor	r0, r3, #1
   133b4:	bl	122ac <coda_set_option_bypass_special_types@plt>
   133b8:	ldr	r0, [sp, #16]
   133bc:	bl	12474 <coda_set_option_perform_conversions@plt>
   133c0:	ldr	r3, [sp, #4]
   133c4:	ldr	r0, [r3]
   133c8:	cmp	r0, #0
   133cc:	beq	133ec <main@@Base+0xd98>
   133d0:	ldr	r1, [pc, #720]	; 136a8 <main@@Base+0x1054>
   133d4:	add	r1, pc, r1
   133d8:	bl	12228 <fopen@plt>
   133dc:	ldr	r3, [sp, #20]
   133e0:	cmp	r0, #0
   133e4:	str	r0, [r3]
   133e8:	beq	13cf8 <main@@Base+0x16a4>
   133ec:	mov	r0, r9
   133f0:	bl	1841c <print_json_data@@Base>
   133f4:	ldr	r3, [sp, #4]
   133f8:	ldr	r3, [r3]
   133fc:	cmp	r3, #0
   13400:	bne	13118 <main@@Base+0xac4>
   13404:	b	13124 <main@@Base+0xad0>
   13408:	mov	r0, r5
   1340c:	ldr	r1, [sp, #52]	; 0x34
   13410:	str	r2, [sp, #60]	; 0x3c
   13414:	bl	121ec <strcmp@plt>
   13418:	cmp	r0, #0
   1341c:	ldr	r2, [sp, #60]	; 0x3c
   13420:	beq	13440 <main@@Base+0xdec>
   13424:	mov	r0, r5
   13428:	ldr	r1, [sp, #56]	; 0x38
   1342c:	str	r2, [sp, #60]	; 0x3c
   13430:	bl	121ec <strcmp@plt>
   13434:	cmp	r0, #0
   13438:	ldr	r2, [sp, #60]	; 0x3c
   1343c:	beq	132fc <main@@Base+0xca8>
   13440:	mov	r0, r5
   13444:	ldr	r1, [sp, #44]	; 0x2c
   13448:	bl	121ec <strcmp@plt>
   1344c:	cmp	r0, #0
   13450:	beq	13a00 <main@@Base+0x13ac>
   13454:	sub	r2, r4, #1
   13458:	cmp	fp, r2
   1345c:	bne	13bc0 <main@@Base+0x156c>
   13460:	ldrb	r2, [r5]
   13464:	cmp	r2, #45	; 0x2d
   13468:	beq	13bc0 <main@@Base+0x156c>
   1346c:	ldr	r3, [sp, #8]
   13470:	str	r5, [r3]
   13474:	b	13318 <main@@Base+0xcc4>
   13478:	ldr	r3, [sp, #32]
   1347c:	mov	r2, #1
   13480:	str	r2, [r3]
   13484:	b	12abc <main@@Base+0x468>
   13488:	ldr	r1, [pc, #272]	; 135a0 <main@@Base+0xf4c>
   1348c:	mov	r3, #1
   13490:	mov	lr, #4
   13494:	add	r7, r7, lr
   13498:	add	r8, r8, #1
   1349c:	ldr	r2, [pc, #256]	; 135a4 <main@@Base+0xf50>
   134a0:	add	r7, r5, r7
   134a4:	sub	r4, r4, r8
   134a8:	str	r3, [sp, #16]
   134ac:	mov	fp, r9
   134b0:	str	r3, [sp, #36]	; 0x24
   134b4:	ldr	r5, [r6, r1]
   134b8:	ldr	ip, [pc, #232]	; 135a8 <main@@Base+0xf54>
   134bc:	ldr	r0, [pc, #232]	; 135ac <main@@Base+0xf58>
   134c0:	str	lr, [r5]
   134c4:	ldr	r3, [r6, r2]
   134c8:	ldr	r2, [pc, #228]	; 135b4 <main@@Base+0xf60>
   134cc:	ldr	r1, [pc, #220]	; 135b0 <main@@Base+0xf5c>
   134d0:	str	r9, [r3]
   134d4:	str	r3, [sp, #8]
   134d8:	ldr	r3, [r6, ip]
   134dc:	ldr	ip, [pc, #456]	; 136ac <main@@Base+0x1058>
   134e0:	ldr	sl, [pc, #456]	; 136b0 <main@@Base+0x105c>
   134e4:	str	r9, [r3]
   134e8:	str	r3, [sp, #4]
   134ec:	add	ip, pc, ip
   134f0:	ldr	r8, [pc, #444]	; 136b4 <main@@Base+0x1060>
   134f4:	str	ip, [sp, #12]
   134f8:	add	sl, pc, sl
   134fc:	ldr	r3, [r6, r0]
   13500:	ldr	r0, [pc, #432]	; 136b8 <main@@Base+0x1064>
   13504:	add	r8, pc, r8
   13508:	str	r9, [r3]
   1350c:	str	r3, [sp, #24]
   13510:	add	r0, pc, r0
   13514:	str	r0, [sp, #28]
   13518:	ldr	r0, [pc, #412]	; 136bc <main@@Base+0x1068>
   1351c:	add	r0, pc, r0
   13520:	str	r0, [sp, #32]
   13524:	ldr	r3, [r6, r2]
   13528:	ldr	r2, [pc, #400]	; 136c0 <main@@Base+0x106c>
   1352c:	ldr	r1, [r6, r1]
   13530:	str	r3, [sp, #20]
   13534:	str	r6, [sp, #40]	; 0x28
   13538:	add	r2, pc, r2
   1353c:	str	r2, [sp, #44]	; 0x2c
   13540:	ldr	r2, [r1]
   13544:	ldr	r1, [pc, #376]	; 136c4 <main@@Base+0x1070>
   13548:	str	r2, [r3]
   1354c:	ldr	r3, [pc, #372]	; 136c8 <main@@Base+0x1074>
   13550:	add	r1, pc, r1
   13554:	str	r1, [sp, #52]	; 0x34
   13558:	ldr	r1, [pc, #364]	; 136cc <main@@Base+0x1078>
   1355c:	add	r3, pc, r3
   13560:	str	r3, [sp, #48]	; 0x30
   13564:	add	r1, pc, r1
   13568:	str	r1, [sp, #56]	; 0x38
   1356c:	b	13814 <main@@Base+0x11c0>
   13570:	andeq	sl, r1, r4, lsl #19
   13574:	andeq	r9, r0, r8, lsl #24
   13578:	andeq	r9, r0, r4, ror #23
   1357c:	ldrdeq	r9, [r0], -r4
   13580:	andeq	r9, r0, r0, asr #23
   13584:	strdeq	r9, [r0], -r4
   13588:	andeq	r9, r0, ip, asr #23
   1358c:	andeq	r9, r0, r8, asr #23
   13590:	andeq	r9, r0, ip, lsl ip
   13594:	andeq	r9, r0, r4, ror ip
   13598:	andeq	r9, r0, r4, ror ip
   1359c:	andeq	r9, r0, r8, ror #11
   135a0:	ldrdeq	r0, [r0], -r4
   135a4:			; <UNDEFINED> instruction: 0x000001b4
   135a8:	andeq	r0, r0, r4, lsr #3
   135ac:	ldrdeq	r0, [r0], -r8
   135b0:	ldrdeq	r0, [r0], -ip
   135b4:			; <UNDEFINED> instruction: 0x000001bc
   135b8:	andeq	r9, r0, r0, ror fp
   135bc:	andeq	r9, r0, r8, lsl #22
   135c0:	andeq	r9, r0, r8, lsl #12
   135c4:	andeq	r9, r0, r8, lsl #22
   135c8:	andeq	r9, r0, r4, asr fp
   135cc:	andeq	r9, r0, r8, lsl #19
   135d0:	muleq	r0, r4, r9
   135d4:	muleq	r0, ip, r1
   135d8:			; <UNDEFINED> instruction: 0x000001b0
   135dc:	andeq	r0, r0, r0, lsr #3
   135e0:	andeq	r0, r0, r4, asr #3
   135e4:	andeq	r0, r0, ip, lsr #3
   135e8:	andeq	r0, r0, r8, asr #3
   135ec:	andeq	r9, r0, ip, asr #18
   135f0:	andeq	r9, r0, r4, asr #18
   135f4:	muleq	r0, r4, r9
   135f8:			; <UNDEFINED> instruction: 0x000089b0
   135fc:	strdeq	r9, [r0], -r0
   13600:	ldrdeq	r9, [r0], -ip
   13604:	strdeq	r9, [r0], -r4
   13608:			; <UNDEFINED> instruction: 0x000097b8
   1360c:	andeq	r8, r0, r8, ror #17
   13610:	andeq	r9, r0, ip, lsl #15
   13614:	strdeq	r8, [r0], -ip
   13618:	andeq	r8, r0, r4, lsr #18
   1361c:			; <UNDEFINED> instruction: 0x000097b4
   13620:	andeq	r9, r0, r0, lsr #15
   13624:	muleq	r0, r8, r7
   13628:	andeq	r0, r0, r0, ror #3
   1362c:	andeq	r0, r0, r0, asr #3
   13630:	strdeq	r9, [r0], -r0
   13634:	andeq	r0, r0, ip, asr #3
   13638:	andeq	r0, r0, r8, ror #3
   1363c:	andeq	r0, r0, ip, ror #3
   13640:	andeq	r0, r0, r8, lsr #3
   13644:	andeq	r9, r0, r8, lsr r5
   13648:	ldrdeq	r8, [r0], -r4
   1364c:	andeq	r9, r0, r4, lsr #10
   13650:			; <UNDEFINED> instruction: 0x000094bc
   13654:	andeq	r9, r0, r0, lsl #9
   13658:	andeq	r8, r0, r8, ror #16
   1365c:	andeq	r9, r0, r4, asr r4
   13660:	muleq	r0, r4, r8
   13664:	andeq	r9, r0, r8, lsr #8
   13668:	andeq	r9, r0, r4, lsl r4
   1366c:	andeq	r9, r0, r8, ror r3
   13670:	andeq	r9, r0, r4, ror #5
   13674:	andeq	r9, r0, r8, asr #5
   13678:			; <UNDEFINED> instruction: 0x000092b4
   1367c:	andeq	r9, r0, ip, ror #2
   13680:	andeq	r9, r0, r0, lsr #4
   13684:	andeq	r8, r0, r0, asr #17
   13688:	strdeq	r8, [r0], -r4
   1368c:	muleq	r0, r8, r1
   13690:	andeq	r8, r0, ip, lsl #8
   13694:	andeq	r9, r0, ip, asr #3
   13698:	andeq	r9, r0, ip, asr r1
   1369c:			; <UNDEFINED> instruction: 0x000091bc
   136a0:	andeq	r9, r0, r0, asr #2
   136a4:	andeq	r9, r0, ip, lsr #2
   136a8:	strdeq	r8, [r0], -r4
   136ac:	andeq	r8, r0, r4, asr lr
   136b0:	andeq	r8, r0, r8, lsl #30
   136b4:	andeq	r8, r0, r8, lsr #11
   136b8:	ldrdeq	r7, [r0], -ip
   136bc:	andeq	r8, r0, r0, lsl #29
   136c0:	strdeq	r8, [r0], -r4
   136c4:			; <UNDEFINED> instruction: 0x00008eb4
   136c8:	andeq	r8, r0, r4, asr #28
   136cc:	andeq	r8, r0, r4, lsr #29
   136d0:	andeq	r8, r0, r8, asr #24
   136d4:	andeq	r8, r0, r4, lsr ip
   136d8:	strdeq	r8, [r0], -ip
   136dc:	andeq	r8, r0, r4, lsr sl
   136e0:	andeq	r7, r0, ip, lsl pc
   136e4:	andeq	r8, r0, r8, lsl #20
   136e8:	strdeq	r8, [r0], -r4
   136ec:	andeq	r7, r0, r4, ror fp
   136f0:	andeq	r8, r0, ip, lsr #18
   136f4:	andeq	r7, r0, r0, lsr pc
   136f8:	andeq	r7, r0, r8, lsr #23
   136fc:	andeq	r8, r0, r8, asr #16
   13700:	andeq	r7, r0, r0, lsr fp
   13704:	andeq	r8, r0, r4, lsr #14
   13708:	muleq	r0, ip, r7
   1370c:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   13710:	andeq	r8, r0, ip, asr #14
   13714:	andeq	r8, r0, r4, ror #14
   13718:	andeq	r8, r0, r8, asr #14
   1371c:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   13720:	ldrdeq	r8, [r0], -ip
   13724:	andeq	r8, r0, r8, ror r7
   13728:	strdeq	r8, [r0], -r0
   1372c:	andeq	r8, r0, r4, ror #12
   13730:	andeq	r8, r0, r0, lsr #11
   13734:	andeq	r8, r0, ip, asr #13
   13738:			; <UNDEFINED> instruction: 0x000086bc
   1373c:	andeq	r8, r0, ip, asr #10
   13740:	andeq	r8, r0, r8, lsl r5
   13744:	andeq	r8, r0, ip, lsl #11
   13748:	andeq	r8, r0, r8, lsr #12
   1374c:			; <UNDEFINED> instruction: 0x000001b8
   13750:	mov	r1, r8
   13754:	mov	r0, r5
   13758:	bl	121ec <strcmp@plt>
   1375c:	cmp	r0, #0
   13760:	beq	13838 <main@@Base+0x11e4>
   13764:	mov	r0, r5
   13768:	ldr	r1, [sp, #12]
   1376c:	bl	121ec <strcmp@plt>
   13770:	cmp	r0, #0
   13774:	beq	13840 <main@@Base+0x11ec>
   13778:	mov	r0, r5
   1377c:	ldr	r1, [sp, #28]
   13780:	bl	121ec <strcmp@plt>
   13784:	cmp	r0, #0
   13788:	beq	13840 <main@@Base+0x11ec>
   1378c:	mov	r0, r5
   13790:	ldr	r1, [sp, #32]
   13794:	bl	121ec <strcmp@plt>
   13798:	cmp	r0, #0
   1379c:	beq	13848 <main@@Base+0x11f4>
   137a0:	mov	r0, r5
   137a4:	ldr	r1, [sp, #48]	; 0x30
   137a8:	bl	121ec <strcmp@plt>
   137ac:	cmp	r0, #0
   137b0:	beq	13848 <main@@Base+0x11f4>
   137b4:	ldr	r1, [pc, #-236]	; 136d0 <main@@Base+0x107c>
   137b8:	mov	r0, r5
   137bc:	add	r1, pc, r1
   137c0:	bl	121ec <strcmp@plt>
   137c4:	cmp	r0, #0
   137c8:	beq	137e4 <main@@Base+0x1190>
   137cc:	ldr	r1, [pc, #-256]	; 136d4 <main@@Base+0x1080>
   137d0:	mov	r0, r5
   137d4:	add	r1, pc, r1
   137d8:	bl	121ec <strcmp@plt>
   137dc:	cmp	r0, #0
   137e0:	bne	13938 <main@@Base+0x12e4>
   137e4:	add	r2, fp, #1
   137e8:	cmp	r4, r2
   137ec:	ble	13938 <main@@Base+0x12e4>
   137f0:	add	r6, r7, r6
   137f4:	ldr	r1, [r6, #4]
   137f8:	ldrb	r0, [r1]
   137fc:	cmp	r0, #45	; 0x2d
   13800:	beq	13938 <main@@Base+0x12e4>
   13804:	ldr	r3, [sp, #24]
   13808:	mov	fp, r2
   1380c:	str	r1, [r3]
   13810:	add	fp, fp, #1
   13814:	cmp	r4, fp
   13818:	ble	13878 <main@@Base+0x1224>
   1381c:	ldr	r5, [r7, fp, lsl #2]
   13820:	mov	r1, sl
   13824:	lsl	r6, fp, #2
   13828:	mov	r0, r5
   1382c:	bl	121ec <strcmp@plt>
   13830:	cmp	r0, #0
   13834:	bne	13750 <main@@Base+0x10fc>
   13838:	mov	r9, #1
   1383c:	b	13810 <main@@Base+0x11bc>
   13840:	str	r0, [sp, #16]
   13844:	b	13810 <main@@Base+0x11bc>
   13848:	add	r2, fp, #1
   1384c:	cmp	r4, r2
   13850:	ble	13938 <main@@Base+0x12e4>
   13854:	add	r6, r7, r6
   13858:	ldr	r1, [r6, #4]
   1385c:	ldrb	r0, [r1]
   13860:	cmp	r0, #45	; 0x2d
   13864:	beq	13900 <main@@Base+0x12ac>
   13868:	ldr	r3, [sp, #4]
   1386c:	mov	fp, r2
   13870:	str	r1, [r3]
   13874:	b	13810 <main@@Base+0x11bc>
   13878:	ldr	r3, [sp, #8]
   1387c:	ldr	r6, [sp, #40]	; 0x28
   13880:	ldr	r3, [r3]
   13884:	cmp	r3, #0
   13888:	beq	13cac <main@@Base+0x1658>
   1388c:	ldrb	r3, [r3]
   13890:	cmp	r3, #0
   13894:	beq	13cac <main@@Base+0x1658>
   13898:	bl	12468 <coda_init@plt>
   1389c:	cmp	r0, #0
   138a0:	bne	13c74 <main@@Base+0x1620>
   138a4:	ldr	r3, [sp, #36]	; 0x24
   138a8:	eor	r0, r3, #1
   138ac:	bl	122ac <coda_set_option_bypass_special_types@plt>
   138b0:	ldr	r0, [sp, #16]
   138b4:	bl	12474 <coda_set_option_perform_conversions@plt>
   138b8:	ldr	r3, [sp, #4]
   138bc:	ldr	r0, [r3]
   138c0:	cmp	r0, #0
   138c4:	beq	138e4 <main@@Base+0x1290>
   138c8:	ldr	r1, [pc, #-504]	; 136d8 <main@@Base+0x1084>
   138cc:	add	r1, pc, r1
   138d0:	bl	12228 <fopen@plt>
   138d4:	ldr	r3, [sp, #20]
   138d8:	cmp	r0, #0
   138dc:	str	r0, [r3]
   138e0:	beq	13d08 <main@@Base+0x16b4>
   138e4:	mov	r0, r9
   138e8:	bl	19ff4 <print_yaml_data@@Base>
   138ec:	ldr	r3, [sp, #4]
   138f0:	ldr	r3, [r3]
   138f4:	cmp	r3, #0
   138f8:	bne	13118 <main@@Base+0xac4>
   138fc:	b	13124 <main@@Base+0xad0>
   13900:	mov	r0, r5
   13904:	ldr	r1, [sp, #52]	; 0x34
   13908:	str	r2, [sp, #60]	; 0x3c
   1390c:	bl	121ec <strcmp@plt>
   13910:	cmp	r0, #0
   13914:	ldr	r2, [sp, #60]	; 0x3c
   13918:	beq	13938 <main@@Base+0x12e4>
   1391c:	mov	r0, r5
   13920:	ldr	r1, [sp, #56]	; 0x38
   13924:	str	r2, [sp, #60]	; 0x3c
   13928:	bl	121ec <strcmp@plt>
   1392c:	cmp	r0, #0
   13930:	ldr	r2, [sp, #60]	; 0x3c
   13934:	beq	137f4 <main@@Base+0x11a0>
   13938:	mov	r0, r5
   1393c:	ldr	r1, [sp, #44]	; 0x2c
   13940:	bl	121ec <strcmp@plt>
   13944:	cmp	r0, #0
   13948:	beq	13a18 <main@@Base+0x13c4>
   1394c:	sub	r2, r4, #1
   13950:	cmp	fp, r2
   13954:	bne	13ca8 <main@@Base+0x1654>
   13958:	ldrb	r2, [r5]
   1395c:	cmp	r2, #45	; 0x2d
   13960:	beq	13ca8 <main@@Base+0x1654>
   13964:	ldr	r3, [sp, #8]
   13968:	str	r5, [r3]
   1396c:	b	13810 <main@@Base+0x11bc>
   13970:	ldr	r1, [pc, #-668]	; 136dc <main@@Base+0x1088>
   13974:	mov	r0, r6
   13978:	add	r1, pc, r1
   1397c:	bl	121ec <strcmp@plt>
   13980:	cmp	r0, #0
   13984:	beq	13a08 <main@@Base+0x13b4>
   13988:	ldr	r1, [pc, #-688]	; 136e0 <main@@Base+0x108c>
   1398c:	mov	r0, r6
   13990:	add	r1, pc, r1
   13994:	bl	121ec <strcmp@plt>
   13998:	cmp	r0, #0
   1399c:	beq	13a08 <main@@Base+0x13b4>
   139a0:	ldr	r1, [pc, #-708]	; 136e4 <main@@Base+0x1090>
   139a4:	mov	r0, r6
   139a8:	add	r1, pc, r1
   139ac:	bl	121ec <strcmp@plt>
   139b0:	cmp	r0, #0
   139b4:	beq	139d0 <main@@Base+0x137c>
   139b8:	ldr	r1, [pc, #-728]	; 136e8 <main@@Base+0x1094>
   139bc:	mov	r0, r6
   139c0:	add	r1, pc, r1
   139c4:	bl	121ec <strcmp@plt>
   139c8:	cmp	r0, #0
   139cc:	bne	13a4c <main@@Base+0x13f8>
   139d0:	add	r1, fp, #1
   139d4:	cmp	r4, r1
   139d8:	ble	13a4c <main@@Base+0x13f8>
   139dc:	add	r7, r5, r7
   139e0:	ldr	r2, [r7, #4]
   139e4:	ldrb	r0, [r2]
   139e8:	cmp	r0, #45	; 0x2d
   139ec:	beq	13a4c <main@@Base+0x13f8>
   139f0:	ldr	r3, [sp, #48]	; 0x30
   139f4:	mov	fp, r1
   139f8:	str	r2, [r3]
   139fc:	b	12edc <main@@Base+0x888>
   13a00:	str	r0, [sp, #36]	; 0x24
   13a04:	b	13318 <main@@Base+0xcc4>
   13a08:	ldr	r3, [sp, #40]	; 0x28
   13a0c:	mov	r2, #1
   13a10:	str	r2, [r3]
   13a14:	b	12edc <main@@Base+0x888>
   13a18:	str	r0, [sp, #36]	; 0x24
   13a1c:	b	13810 <main@@Base+0x11bc>
   13a20:	ldr	r1, [pc, #-828]	; 136ec <main@@Base+0x1098>
   13a24:	mov	r0, r6
   13a28:	add	r1, pc, r1
   13a2c:	bl	121ec <strcmp@plt>
   13a30:	cmp	r0, #0
   13a34:	bne	13af4 <main@@Base+0x14a0>
   13a38:	ldr	r3, [sp, #36]	; 0x24
   13a3c:	mov	r2, #1
   13a40:	str	r2, [sl]
   13a44:	str	r2, [r3]
   13a48:	b	12abc <main@@Base+0x468>
   13a4c:	ldr	r1, [pc, #-868]	; 136f0 <main@@Base+0x109c>
   13a50:	mov	r0, r6
   13a54:	add	r1, pc, r1
   13a58:	bl	121ec <strcmp@plt>
   13a5c:	cmp	r0, #0
   13a60:	beq	13ab8 <main@@Base+0x1464>
   13a64:	ldr	r1, [pc, #-888]	; 136f4 <main@@Base+0x10a0>
   13a68:	mov	r0, r6
   13a6c:	add	r1, pc, r1
   13a70:	bl	121ec <strcmp@plt>
   13a74:	cmp	r0, #0
   13a78:	beq	13ab8 <main@@Base+0x1464>
   13a7c:	ldr	r1, [pc, #-908]	; 136f8 <main@@Base+0x10a4>
   13a80:	mov	r0, r6
   13a84:	add	r1, pc, r1
   13a88:	bl	121ec <strcmp@plt>
   13a8c:	cmp	r0, #0
   13a90:	beq	13b38 <main@@Base+0x14e4>
   13a94:	sub	r2, r4, #1
   13a98:	cmp	fp, r2
   13a9c:	bne	13c30 <main@@Base+0x15dc>
   13aa0:	ldrb	r2, [r6]
   13aa4:	cmp	r2, #45	; 0x2d
   13aa8:	beq	13c30 <main@@Base+0x15dc>
   13aac:	ldr	r3, [sp, #8]
   13ab0:	str	r6, [r3]
   13ab4:	b	12edc <main@@Base+0x888>
   13ab8:	ldr	r3, [sp, #44]	; 0x2c
   13abc:	mov	r2, #1
   13ac0:	str	r2, [r3]
   13ac4:	b	12edc <main@@Base+0x888>
   13ac8:	ldr	r0, [pc, #-980]	; 136fc <main@@Base+0x10a8>
   13acc:	mov	r2, #25
   13ad0:	mov	r1, #1
   13ad4:	ldr	r3, [pc, #-912]	; 1374c <main@@Base+0x10f8>
   13ad8:	add	r0, pc, r0
   13adc:	ldr	r3, [r6, r3]
   13ae0:	ldr	r3, [r3]
   13ae4:	bl	12360 <fwrite@plt>
   13ae8:	bl	1a108 <print_yaml_data@@Base+0x114>
   13aec:	mov	r0, #1
   13af0:	bl	123fc <exit@plt>
   13af4:	ldr	r1, [pc, #-1020]	; 13700 <main@@Base+0x10ac>
   13af8:	mov	r0, r6
   13afc:	add	r1, pc, r1
   13b00:	bl	121ec <strcmp@plt>
   13b04:	cmp	r0, #0
   13b08:	beq	13b30 <main@@Base+0x14dc>
   13b0c:	sub	r2, r4, #1
   13b10:	cmp	r2, fp
   13b14:	bne	13c14 <main@@Base+0x15c0>
   13b18:	ldrb	r2, [r6]
   13b1c:	cmp	r2, #45	; 0x2d
   13b20:	beq	13c14 <main@@Base+0x15c0>
   13b24:	ldr	r3, [sp, #8]
   13b28:	str	r6, [r3]
   13b2c:	b	12abc <main@@Base+0x468>
   13b30:	str	r0, [sp, #24]
   13b34:	b	12abc <main@@Base+0x468>
   13b38:	str	r0, [sp, #36]	; 0x24
   13b3c:	b	12edc <main@@Base+0x888>
   13b40:	ldr	r3, [pc, #-1020]	; 1374c <main@@Base+0x10f8>
   13b44:	ldr	r3, [r6, r3]
   13b48:	ldr	r4, [r3]
   13b4c:	bl	125e8 <coda_get_errno@plt>
   13b50:	ldr	r0, [r0]
   13b54:	bl	125a0 <coda_errno_to_string@plt>
   13b58:	ldr	r1, [pc, #-1116]	; 13704 <main@@Base+0x10b0>
   13b5c:	mov	r2, r0
   13b60:	mov	r0, r4
   13b64:	add	r1, pc, r1
   13b68:	bl	12444 <fprintf@plt>
   13b6c:	mov	r0, #1
   13b70:	bl	123fc <exit@plt>
   13b74:	ldr	r0, [pc, #-1140]	; 13708 <main@@Base+0x10b4>
   13b78:	mov	r2, #25
   13b7c:	mov	r1, #1
   13b80:	ldr	r3, [pc, #-1084]	; 1374c <main@@Base+0x10f8>
   13b84:	add	r0, pc, r0
   13b88:	b	13adc <main@@Base+0x1488>
   13b8c:	ldr	r3, [pc, #-1096]	; 1374c <main@@Base+0x10f8>
   13b90:	ldr	r3, [r6, r3]
   13b94:	ldr	r4, [r3]
   13b98:	bl	125e8 <coda_get_errno@plt>
   13b9c:	ldr	r0, [r0]
   13ba0:	bl	125a0 <coda_errno_to_string@plt>
   13ba4:	ldr	r1, [pc, #-1184]	; 1370c <main@@Base+0x10b8>
   13ba8:	mov	r2, r0
   13bac:	mov	r0, r4
   13bb0:	add	r1, pc, r1
   13bb4:	bl	12444 <fprintf@plt>
   13bb8:	mov	r0, #1
   13bbc:	bl	123fc <exit@plt>
   13bc0:	ldr	r6, [sp, #40]	; 0x28
   13bc4:	mov	r2, #25
   13bc8:	mov	r1, #1
   13bcc:	ldr	r0, [pc, #-1220]	; 13710 <main@@Base+0x10bc>
   13bd0:	ldr	r3, [pc, #-1164]	; 1374c <main@@Base+0x10f8>
   13bd4:	add	r0, pc, r0
   13bd8:	b	13adc <main@@Base+0x1488>
   13bdc:	ldr	r0, [pc, #-1232]	; 13714 <main@@Base+0x10c0>
   13be0:	mov	r2, #40	; 0x28
   13be4:	mov	r1, #1
   13be8:	ldr	r3, [pc, #-1188]	; 1374c <main@@Base+0x10f8>
   13bec:	ldr	r6, [sp, #20]
   13bf0:	add	r0, pc, r0
   13bf4:	b	13adc <main@@Base+0x1488>
   13bf8:	ldr	r0, [pc, #-1256]	; 13718 <main@@Base+0x10c4>
   13bfc:	mov	r2, #40	; 0x28
   13c00:	mov	r1, #1
   13c04:	ldr	r3, [pc, #-1216]	; 1374c <main@@Base+0x10f8>
   13c08:	ldr	r6, [sp, #32]
   13c0c:	add	r0, pc, r0
   13c10:	b	13adc <main@@Base+0x1488>
   13c14:	ldr	r0, [pc, #-1280]	; 1371c <main@@Base+0x10c8>
   13c18:	mov	r2, #25
   13c1c:	mov	r1, #1
   13c20:	ldr	r3, [pc, #-1244]	; 1374c <main@@Base+0x10f8>
   13c24:	ldr	r6, [sp, #20]
   13c28:	add	r0, pc, r0
   13c2c:	b	13adc <main@@Base+0x1488>
   13c30:	ldr	r6, [sp, #32]
   13c34:	mov	r2, #25
   13c38:	mov	r1, #1
   13c3c:	ldr	r0, [pc, #-1316]	; 13720 <main@@Base+0x10cc>
   13c40:	ldr	r3, [pc, #-1276]	; 1374c <main@@Base+0x10f8>
   13c44:	add	r0, pc, r0
   13c48:	b	13adc <main@@Base+0x1488>
   13c4c:	ldr	r1, [pc, #-1328]	; 13724 <main@@Base+0x10d0>
   13c50:	ldr	r3, [pc, #-1292]	; 1374c <main@@Base+0x10f8>
   13c54:	add	r1, pc, r1
   13c58:	ldr	r3, [r6, r3]
   13c5c:	ldr	r2, [sp, #4]
   13c60:	ldr	r0, [r3]
   13c64:	ldr	r2, [r2]
   13c68:	bl	12444 <fprintf@plt>
   13c6c:	mov	r0, #1
   13c70:	bl	123fc <exit@plt>
   13c74:	ldr	r3, [pc, #-1328]	; 1374c <main@@Base+0x10f8>
   13c78:	ldr	r3, [r6, r3]
   13c7c:	ldr	r4, [r3]
   13c80:	bl	125e8 <coda_get_errno@plt>
   13c84:	ldr	r0, [r0]
   13c88:	bl	125a0 <coda_errno_to_string@plt>
   13c8c:	ldr	r1, [pc, #-1388]	; 13728 <main@@Base+0x10d4>
   13c90:	mov	r2, r0
   13c94:	mov	r0, r4
   13c98:	add	r1, pc, r1
   13c9c:	bl	12444 <fprintf@plt>
   13ca0:	mov	r0, #1
   13ca4:	bl	123fc <exit@plt>
   13ca8:	ldr	r6, [sp, #40]	; 0x28
   13cac:	mov	r2, #25
   13cb0:	mov	r1, #1
   13cb4:	ldr	r0, [pc, #-1424]	; 1372c <main@@Base+0x10d8>
   13cb8:	ldr	r3, [pc, #-1396]	; 1374c <main@@Base+0x10f8>
   13cbc:	add	r0, pc, r0
   13cc0:	b	13adc <main@@Base+0x1488>
   13cc4:	ldr	r3, [pc, #-1408]	; 1374c <main@@Base+0x10f8>
   13cc8:	ldr	r3, [r6, r3]
   13ccc:	ldr	r4, [r3]
   13cd0:	bl	125e8 <coda_get_errno@plt>
   13cd4:	ldr	r0, [r0]
   13cd8:	bl	125a0 <coda_errno_to_string@plt>
   13cdc:	ldr	r1, [pc, #-1460]	; 13730 <main@@Base+0x10dc>
   13ce0:	mov	r2, r0
   13ce4:	mov	r0, r4
   13ce8:	add	r1, pc, r1
   13cec:	bl	12444 <fprintf@plt>
   13cf0:	mov	r0, #1
   13cf4:	bl	123fc <exit@plt>
   13cf8:	ldr	r1, [pc, #-1484]	; 13734 <main@@Base+0x10e0>
   13cfc:	ldr	r3, [pc, #-1464]	; 1374c <main@@Base+0x10f8>
   13d00:	add	r1, pc, r1
   13d04:	b	13c58 <main@@Base+0x1604>
   13d08:	ldr	r1, [pc, #-1496]	; 13738 <main@@Base+0x10e4>
   13d0c:	ldr	r3, [pc, #-1480]	; 1374c <main@@Base+0x10f8>
   13d10:	add	r1, pc, r1
   13d14:	b	13c58 <main@@Base+0x1604>
   13d18:	ldr	r3, [pc, #-1492]	; 1374c <main@@Base+0x10f8>
   13d1c:	ldr	r3, [r6, r3]
   13d20:	ldr	r4, [r3]
   13d24:	bl	125e8 <coda_get_errno@plt>
   13d28:	ldr	r0, [r0]
   13d2c:	bl	125a0 <coda_errno_to_string@plt>
   13d30:	ldr	r1, [pc, #-1532]	; 1373c <main@@Base+0x10e8>
   13d34:	mov	r2, r0
   13d38:	mov	r0, r4
   13d3c:	add	r1, pc, r1
   13d40:	bl	12444 <fprintf@plt>
   13d44:	mov	r0, #1
   13d48:	bl	123fc <exit@plt>
   13d4c:	ldr	r3, [pc, #-1544]	; 1374c <main@@Base+0x10f8>
   13d50:	ldr	r3, [r6, r3]
   13d54:	ldr	r4, [r3]
   13d58:	bl	125e8 <coda_get_errno@plt>
   13d5c:	ldr	r0, [r0]
   13d60:	bl	125a0 <coda_errno_to_string@plt>
   13d64:	ldr	r1, [pc, #-1580]	; 13740 <main@@Base+0x10ec>
   13d68:	mov	r2, r0
   13d6c:	mov	r0, r4
   13d70:	add	r1, pc, r1
   13d74:	bl	12444 <fprintf@plt>
   13d78:	mov	r0, #1
   13d7c:	bl	123fc <exit@plt>
   13d80:	ldr	r6, [sp, #16]
   13d84:	mov	r2, #25
   13d88:	mov	r1, #1
   13d8c:	ldr	r0, [pc, #-1616]	; 13744 <main@@Base+0x10f0>
   13d90:	ldr	r3, [pc, #-1612]	; 1374c <main@@Base+0x10f8>
   13d94:	add	r0, pc, r0
   13d98:	b	13adc <main@@Base+0x1488>
   13d9c:	ldr	r1, [pc, #-1628]	; 13748 <main@@Base+0x10f4>
   13da0:	ldr	r3, [pc, #-1628]	; 1374c <main@@Base+0x10f8>
   13da4:	add	r1, pc, r1
   13da8:	b	13c58 <main@@Base+0x1604>

00013dac <_start@@Base>:
   13dac:	mov	fp, #0
   13db0:	mov	lr, #0
   13db4:	pop	{r1}		; (ldr r1, [sp], #4)
   13db8:	mov	r2, sp
   13dbc:	push	{r2}		; (str r2, [sp, #-4]!)
   13dc0:	push	{r0}		; (str r0, [sp, #-4]!)
   13dc4:	ldr	ip, [pc, #16]	; 13ddc <_start@@Base+0x30>
   13dc8:	push	{ip}		; (str ip, [sp, #-4]!)
   13dcc:	ldr	r0, [pc, #12]	; 13de0 <_start@@Base+0x34>
   13dd0:	ldr	r3, [pc, #12]	; 13de4 <_start@@Base+0x38>
   13dd4:	bl	123c0 <__libc_start_main@plt>
   13dd8:	bl	12618 <abort@plt>
   13ddc:	muleq	r1, r0, sl
   13de0:	andeq	r2, r1, r4, asr r6
   13de4:	andeq	sl, r1, r0, lsr sl
   13de8:	ldr	r3, [pc, #20]	; 13e04 <_start@@Base+0x58>
   13dec:	ldr	r2, [pc, #20]	; 13e08 <_start@@Base+0x5c>
   13df0:	add	r3, pc, r3
   13df4:	ldr	r2, [r3, r2]
   13df8:	cmp	r2, #0
   13dfc:	bxeq	lr
   13e00:	b	123cc <__gmon_start__@plt>
   13e04:	andeq	r9, r1, r8, lsl #4
   13e08:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13e0c:	ldr	r0, [pc, #24]	; 13e2c <_start@@Base+0x80>
   13e10:	ldr	r3, [pc, #24]	; 13e30 <_start@@Base+0x84>
   13e14:	cmp	r3, r0
   13e18:	bxeq	lr
   13e1c:	ldr	r3, [pc, #16]	; 13e34 <_start@@Base+0x88>
   13e20:	cmp	r3, #0
   13e24:	bxeq	lr
   13e28:	bx	r3
   13e2c:	andeq	sp, r2, r4, lsl #4
   13e30:	andeq	sp, r2, r4, lsl #4
   13e34:	andeq	r0, r0, r0
   13e38:	ldr	r0, [pc, #36]	; 13e64 <_start@@Base+0xb8>
   13e3c:	ldr	r1, [pc, #36]	; 13e68 <_start@@Base+0xbc>
   13e40:	sub	r1, r1, r0
   13e44:	asr	r1, r1, #2
   13e48:	add	r1, r1, r1, lsr #31
   13e4c:	asrs	r1, r1, #1
   13e50:	bxeq	lr
   13e54:	ldr	r3, [pc, #16]	; 13e6c <_start@@Base+0xc0>
   13e58:	cmp	r3, #0
   13e5c:	bxeq	lr
   13e60:	bx	r3
   13e64:	andeq	sp, r2, r4, lsl #4
   13e68:	andeq	sp, r2, r4, lsl #4
   13e6c:	andeq	r0, r0, r0
   13e70:	push	{r4, lr}
   13e74:	ldr	r4, [pc, #24]	; 13e94 <_start@@Base+0xe8>
   13e78:	ldrb	r3, [r4]
   13e7c:	cmp	r3, #0
   13e80:	popne	{r4, pc}
   13e84:	bl	13e0c <_start@@Base+0x60>
   13e88:	mov	r3, #1
   13e8c:	strb	r3, [r4]
   13e90:	pop	{r4, pc}
   13e94:	andeq	sp, r2, r8, lsl #4
   13e98:	b	13e38 <_start@@Base+0x8c>
   13e9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ea0:	mov	r5, r1
   13ea4:	strd	r6, [sp, #8]
   13ea8:	add	r7, r1, #2
   13eac:	strd	r8, [sp, #16]
   13eb0:	mov	r9, r3
   13eb4:	strd	sl, [sp, #24]
   13eb8:	mov	sl, r2
   13ebc:	str	lr, [sp, #32]
   13ec0:	sub	sp, sp, #108	; 0x6c
   13ec4:	ldr	fp, [pc, #2956]	; 14a58 <_start@@Base+0xcac>
   13ec8:	add	r1, sp, #52	; 0x34
   13ecc:	str	r0, [sp, #20]
   13ed0:	ldr	r0, [pc, #2948]	; 14a5c <_start@@Base+0xcb0>
   13ed4:	add	fp, pc, fp
   13ed8:	ldr	r6, [fp, r0]
   13edc:	ldr	r0, [r6, r7, lsl #2]
   13ee0:	bl	12648 <coda_type_get_class@plt>
   13ee4:	cmp	r0, #0
   13ee8:	bne	14128 <_start@@Base+0x37c>
   13eec:	ldr	r3, [sp, #52]	; 0x34
   13ef0:	cmp	r3, #0
   13ef4:	beq	13fec <_start@@Base+0x240>
   13ef8:	cmp	r3, #1
   13efc:	bne	14050 <_start@@Base+0x2a4>
   13f00:	lsl	r3, sl, #2
   13f04:	ldr	r1, [pc, #2900]	; 14a60 <_start@@Base+0xcb4>
   13f08:	cmp	sl, #0
   13f0c:	streq	sl, [r6, #844]	; 0x34c
   13f10:	str	r3, [sp, #24]
   13f14:	add	r3, r3, sl
   13f18:	ldr	r2, [sp, #24]
   13f1c:	add	r3, r6, r3, lsl #4
   13f20:	ldr	r1, [fp, r1]
   13f24:	ldr	r3, [r3, #800]	; 0x320
   13f28:	add	r2, r2, sl
   13f2c:	add	r2, r6, r2, lsl #4
   13f30:	ldr	ip, [r1, #104]	; 0x68
   13f34:	ldr	lr, [r2, #804]	; 0x324
   13f38:	str	ip, [sp, #28]
   13f3c:	add	r0, lr, r3
   13f40:	cmp	ip, r0
   13f44:	str	r0, [sp, #32]
   13f48:	bge	14130 <_start@@Base+0x384>
   13f4c:	cmp	lr, #0
   13f50:	addle	r7, sl, #1
   13f54:	ble	14164 <_start@@Base+0x3b8>
   13f58:	ldr	r2, [sp, #24]
   13f5c:	add	r3, r1, r3, lsl #2
   13f60:	add	r0, sp, #72	; 0x48
   13f64:	mov	r4, #1
   13f68:	mov	r8, r5
   13f6c:	str	r6, [sp, #36]	; 0x24
   13f70:	add	ip, r2, sl
   13f74:	mov	r2, #0
   13f78:	lsl	ip, ip, #4
   13f7c:	mov	r7, r2
   13f80:	add	r1, ip, #844	; 0x34c
   13f84:	add	ip, r6, ip
   13f88:	add	r1, r6, r1
   13f8c:	ldr	r5, [r3, #72]	; 0x48
   13f90:	add	r2, r2, #1
   13f94:	add	r3, r3, #4
   13f98:	cmp	r5, #0
   13f9c:	ldrne	r5, [r3, #104]	; 0x68
   13fa0:	ldrne	r6, [ip, #844]	; 0x34c
   13fa4:	ldreq	r5, [r3]
   13fa8:	ldrne	r5, [r5, r6, lsl #2]
   13fac:	cmp	lr, r2
   13fb0:	str	r7, [r1, #4]!
   13fb4:	mul	r4, r5, r4
   13fb8:	str	r5, [r0], #4
   13fbc:	bgt	13f8c <_start@@Base+0x1e0>
   13fc0:	cmp	r4, #0
   13fc4:	mov	r5, r8
   13fc8:	ldr	r6, [sp, #36]	; 0x24
   13fcc:	bne	14258 <_start@@Base+0x4ac>
   13fd0:	add	sp, sp, #108	; 0x6c
   13fd4:	ldrd	r4, [sp]
   13fd8:	ldrd	r6, [sp, #8]
   13fdc:	ldrd	r8, [sp, #16]
   13fe0:	ldrd	sl, [sp, #24]
   13fe4:	add	sp, sp, #32
   13fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   13fec:	add	r4, r9, #872	; 0x368
   13ff0:	add	r2, sp, #72	; 0x48
   13ff4:	add	r3, r6, r4, lsl #2
   13ff8:	add	r0, r6, #144	; 0x90
   13ffc:	ldr	r1, [r3, #4]
   14000:	bl	1221c <coda_cursor_get_record_field_available_status@plt>
   14004:	cmp	r0, #0
   14008:	bne	143b8 <_start@@Base+0x60c>
   1400c:	ldr	r3, [sp, #72]	; 0x48
   14010:	cmp	r3, #0
   14014:	beq	13fd0 <_start@@Base+0x224>
   14018:	add	r4, r6, r4, lsl #2
   1401c:	add	r0, r6, #144	; 0x90
   14020:	ldr	r1, [r4, #4]
   14024:	bl	12384 <coda_cursor_goto_record_field_by_index@plt>
   14028:	cmp	r0, #0
   1402c:	bne	147ac <_start@@Base+0xa00>
   14030:	add	r3, r9, #1
   14034:	mov	r2, sl
   14038:	ldr	r0, [sp, #20]
   1403c:	add	r1, r5, #1
   14040:	bl	13e9c <_start@@Base+0xf0>
   14044:	add	r0, r6, #144	; 0x90
   14048:	bl	123e4 <coda_cursor_goto_parent@plt>
   1404c:	b	13fd0 <_start@@Base+0x224>
   14050:	ldr	r3, [pc, #2572]	; 14a64 <_start@@Base+0xcb8>
   14054:	ldr	r3, [fp, r3]
   14058:	ldr	r3, [r3]
   1405c:	cmp	r3, #0
   14060:	bne	143c8 <_start@@Base+0x61c>
   14064:	add	r1, sp, #56	; 0x38
   14068:	ldr	r0, [r6, r7, lsl #2]
   1406c:	bl	12648 <coda_type_get_class@plt>
   14070:	cmp	r0, #0
   14074:	bne	143c0 <_start@@Base+0x614>
   14078:	ldr	r3, [sp, #56]	; 0x38
   1407c:	cmp	r3, #6
   14080:	addls	pc, pc, r3, lsl #2
   14084:	b	14118 <_start@@Base+0x36c>
   14088:	b	14728 <_start@@Base+0x97c>
   1408c:	b	14728 <_start@@Base+0x97c>
   14090:	b	141f8 <_start@@Base+0x44c>
   14094:	b	141f8 <_start@@Base+0x44c>
   14098:	b	141f8 <_start@@Base+0x44c>
   1409c:	b	141f8 <_start@@Base+0x44c>
   140a0:	b	14184 <_start@@Base+0x3d8>
   140a4:	add	r1, sp, #72	; 0x48
   140a8:	add	r0, r6, #144	; 0x90
   140ac:	bl	12414 <coda_cursor_get_string_length@plt>
   140b0:	cmp	r0, #0
   140b4:	bne	14978 <_start@@Base+0xbcc>
   140b8:	ldr	r0, [sp, #72]	; 0x48
   140bc:	add	r0, r0, #1
   140c0:	bl	123b4 <malloc@plt>
   140c4:	subs	r4, r0, #0
   140c8:	beq	14a08 <_start@@Base+0xc5c>
   140cc:	ldr	r2, [sp, #72]	; 0x48
   140d0:	add	r0, r6, #144	; 0x90
   140d4:	mov	r1, r4
   140d8:	add	r2, r2, #1
   140dc:	bl	123d8 <coda_cursor_read_string@plt>
   140e0:	cmp	r0, #0
   140e4:	bne	14940 <_start@@Base+0xb94>
   140e8:	ldr	r3, [pc, #2424]	; 14a68 <_start@@Base+0xcbc>
   140ec:	ldr	r3, [fp, r3]
   140f0:	ldr	r3, [r3]
   140f4:	cmp	r3, #0
   140f8:	beq	14908 <_start@@Base+0xb5c>
   140fc:	ldr	r1, [pc, #2408]	; 14a6c <_start@@Base+0xcc0>
   14100:	mov	r2, r4
   14104:	ldr	r0, [sp, #20]
   14108:	add	r1, pc, r1
   1410c:	bl	12444 <fprintf@plt>
   14110:	mov	r0, r4
   14114:	bl	1227c <free@plt>
   14118:	mov	r0, #10
   1411c:	ldr	r1, [sp, #20]
   14120:	bl	1257c <fputc@plt>
   14124:	b	13fd0 <_start@@Base+0x224>
   14128:	bl	1a7c8 <handle_coda_error@@Base>
   1412c:	b	13eec <_start@@Base+0x140>
   14130:	ldr	r0, [r6, #3360]	; 0xd20
   14134:	sub	r0, r0, #1
   14138:	cmp	r0, sl
   1413c:	ble	13f4c <_start@@Base+0x1a0>
   14140:	ldr	ip, [r2, #840]	; 0x348
   14144:	add	r7, sl, #1
   14148:	cmp	lr, #0
   1414c:	add	r0, r7, r7, lsl #2
   14150:	ldr	r2, [r2, #844]	; 0x34c
   14154:	add	r0, r6, r0, lsl #4
   14158:	mul	ip, ip, r2
   1415c:	str	ip, [r0, #844]	; 0x34c
   14160:	bgt	13f58 <_start@@Base+0x1ac>
   14164:	add	r0, r6, #144	; 0x90
   14168:	bl	12354 <coda_cursor_goto_first_array_element@plt>
   1416c:	subs	r8, r0, #0
   14170:	moveq	r4, #1
   14174:	beq	14278 <_start@@Base+0x4cc>
   14178:	bl	1a7c8 <handle_coda_error@@Base>
   1417c:	mov	r4, #1
   14180:	b	14274 <_start@@Base+0x4c8>
   14184:	add	r1, sp, #60	; 0x3c
   14188:	ldr	r0, [r6, r7, lsl #2]
   1418c:	bl	124bc <coda_type_get_special_type@plt>
   14190:	cmp	r0, #0
   14194:	bne	1479c <_start@@Base+0x9f0>
   14198:	ldr	r3, [sp, #60]	; 0x3c
   1419c:	cmp	r3, #0
   141a0:	beq	14118 <_start@@Base+0x36c>
   141a4:	cmp	r3, #2
   141a8:	bls	14750 <_start@@Base+0x9a4>
   141ac:	cmp	r3, #3
   141b0:	bne	14118 <_start@@Base+0x36c>
   141b4:	add	r0, r6, #144	; 0x90
   141b8:	add	r1, sp, #72	; 0x48
   141bc:	bl	12564 <coda_cursor_read_complex_double_pair@plt>
   141c0:	cmp	r0, #0
   141c4:	bne	14720 <_start@@Base+0x974>
   141c8:	ldr	r3, [pc, #2208]	; 14a70 <_start@@Base+0xcc4>
   141cc:	ldrd	r4, [sp, #80]	; 0x50
   141d0:	ldr	r1, [pc, #2204]	; 14a74 <_start@@Base+0xcc8>
   141d4:	ldr	r0, [sp, #20]
   141d8:	strd	r4, [sp, #8]
   141dc:	ldr	ip, [fp, r3]
   141e0:	add	r1, pc, r1
   141e4:	ldrd	r2, [sp, #72]	; 0x48
   141e8:	ldr	ip, [ip]
   141ec:	str	ip, [sp]
   141f0:	bl	12444 <fprintf@plt>
   141f4:	b	14118 <_start@@Base+0x36c>
   141f8:	add	r1, sp, #60	; 0x3c
   141fc:	ldr	r0, [r6, r7, lsl #2]
   14200:	bl	12408 <coda_type_get_read_type@plt>
   14204:	cmp	r0, #0
   14208:	bne	147a4 <_start@@Base+0x9f8>
   1420c:	ldr	r3, [sp, #60]	; 0x3c
   14210:	add	r3, r3, #1
   14214:	cmp	r3, #13
   14218:	addls	pc, pc, r3, lsl #2
   1421c:	b	14118 <_start@@Base+0x36c>
   14220:	b	14a38 <_start@@Base+0xc8c>
   14224:	b	146f4 <_start@@Base+0x948>
   14228:	b	146c8 <_start@@Base+0x91c>
   1422c:	b	146f4 <_start@@Base+0x948>
   14230:	b	146c8 <_start@@Base+0x91c>
   14234:	b	146f4 <_start@@Base+0x948>
   14238:	b	146c8 <_start@@Base+0x91c>
   1423c:	b	14694 <_start@@Base+0x8e8>
   14240:	b	14660 <_start@@Base+0x8b4>
   14244:	b	14628 <_start@@Base+0x87c>
   14248:	b	14628 <_start@@Base+0x87c>
   1424c:	b	145e8 <_start@@Base+0x83c>
   14250:	b	140a4 <_start@@Base+0x2f8>
   14254:	b	144cc <_start@@Base+0x720>
   14258:	add	r0, r6, #144	; 0x90
   1425c:	bl	12354 <coda_cursor_goto_first_array_element@plt>
   14260:	cmp	r0, #0
   14264:	bne	14748 <_start@@Base+0x99c>
   14268:	cmp	r4, #0
   1426c:	addgt	r7, sl, #1
   14270:	ble	14044 <_start@@Base+0x298>
   14274:	sub	r8, r4, #1
   14278:	ldr	r3, [sp, #24]
   1427c:	add	r1, r5, #1
   14280:	mov	r5, #0
   14284:	str	sl, [sp, #24]
   14288:	add	r3, r3, sl
   1428c:	mov	sl, r1
   14290:	mov	r2, r3
   14294:	lsl	r3, r3, #2
   14298:	strd	r2, [sp, #40]	; 0x28
   1429c:	add	r3, r6, r2, lsl #4
   142a0:	str	r3, [sp, #36]	; 0x24
   142a4:	mov	r3, r9
   142a8:	mov	r2, r7
   142ac:	ldr	r0, [sp, #20]
   142b0:	mov	r1, sl
   142b4:	bl	13e9c <_start@@Base+0xf0>
   142b8:	cmp	r5, r8
   142bc:	blt	142d0 <_start@@Base+0x524>
   142c0:	add	r5, r5, #1
   142c4:	cmp	r5, r4
   142c8:	blt	142a4 <_start@@Base+0x4f8>
   142cc:	b	14044 <_start@@Base+0x298>
   142d0:	add	r0, r6, #144	; 0x90
   142d4:	bl	12450 <coda_cursor_goto_next_array_element@plt>
   142d8:	cmp	r0, #0
   142dc:	bne	144c4 <_start@@Base+0x718>
   142e0:	ldr	r3, [sp, #28]
   142e4:	ldr	r2, [sp, #32]
   142e8:	cmp	r3, r2
   142ec:	blt	14318 <_start@@Base+0x56c>
   142f0:	ldr	r3, [r6, #3360]	; 0xd20
   142f4:	ldr	r2, [sp, #24]
   142f8:	sub	r3, r3, #1
   142fc:	cmp	r3, r2
   14300:	ble	14318 <_start@@Base+0x56c>
   14304:	add	r3, r7, r7, lsl #2
   14308:	add	r3, r6, r3, lsl #4
   1430c:	ldr	r2, [r3, #844]	; 0x34c
   14310:	add	r2, r2, #1
   14314:	str	r2, [r3, #844]	; 0x34c
   14318:	ldr	r3, [pc, #1860]	; 14a64 <_start@@Base+0xcb8>
   1431c:	ldr	r3, [fp, r3]
   14320:	ldr	r3, [r3]
   14324:	cmp	r3, #0
   14328:	beq	142c0 <_start@@Base+0x514>
   1432c:	ldr	r3, [sp, #36]	; 0x24
   14330:	ldr	r0, [r3, #804]	; 0x324
   14334:	subs	r1, r0, #1
   14338:	bmi	142c0 <_start@@Base+0x514>
   1433c:	ldr	r3, [sp, #40]	; 0x28
   14340:	add	ip, sp, #104	; 0x68
   14344:	add	ip, ip, r1, lsl #2
   14348:	ldr	ip, [ip, #-32]	; 0xffffffe0
   1434c:	add	r3, r1, r3, lsl #2
   14350:	add	r3, r3, #212	; 0xd4
   14354:	ldr	r2, [r6, r3, lsl #2]
   14358:	add	r2, r2, #1
   1435c:	cmp	ip, r2
   14360:	str	r2, [r6, r3, lsl #2]
   14364:	bne	142c0 <_start@@Base+0x514>
   14368:	ldr	r3, [sp, #44]	; 0x2c
   1436c:	mov	lr, #0
   14370:	add	r2, r0, r3
   14374:	add	r3, sp, #104	; 0x68
   14378:	add	r0, r3, r0, lsl #2
   1437c:	add	r2, r2, #211	; 0xd3
   14380:	add	r2, r6, r2, lsl #2
   14384:	sub	r0, r0, #36	; 0x24
   14388:	b	143a4 <_start@@Base+0x5f8>
   1438c:	ldr	r3, [r2, #-4]!
   14390:	ldr	ip, [r0, #-4]!
   14394:	add	r3, r3, #1
   14398:	cmp	r3, ip
   1439c:	str	r3, [r2]
   143a0:	bne	142c0 <_start@@Base+0x514>
   143a4:	sub	r1, r1, #1
   143a8:	str	lr, [r2]
   143ac:	cmn	r1, #1
   143b0:	bne	1438c <_start@@Base+0x5e0>
   143b4:	b	142c0 <_start@@Base+0x514>
   143b8:	bl	1a7c8 <handle_coda_error@@Base>
   143bc:	b	1400c <_start@@Base+0x260>
   143c0:	bl	1a7c8 <handle_coda_error@@Base>
   143c4:	b	14078 <_start@@Base+0x2cc>
   143c8:	ldr	r3, [r6, #136]	; 0x88
   143cc:	cmp	r3, #0
   143d0:	ble	14064 <_start@@Base+0x2b8>
   143d4:	ldr	r2, [pc, #1692]	; 14a78 <_start@@Base+0xccc>
   143d8:	mov	r3, #0
   143dc:	add	r8, r6, #4
   143e0:	mov	sl, r3
   143e4:	str	r3, [sp, #28]
   143e8:	add	r3, sp, #72	; 0x48
   143ec:	str	r3, [sp, #24]
   143f0:	add	r2, pc, r2
   143f4:	str	fp, [sp, #32]
   143f8:	mov	fp, r2
   143fc:	str	r7, [sp, #40]	; 0x28
   14400:	b	14420 <_start@@Base+0x674>
   14404:	ldr	r3, [sp, #72]	; 0x48
   14408:	cmp	r3, #1
   1440c:	beq	14444 <_start@@Base+0x698>
   14410:	ldr	r3, [r6, #136]	; 0x88
   14414:	add	sl, sl, #1
   14418:	cmp	sl, r3
   1441c:	bge	144b8 <_start@@Base+0x70c>
   14420:	ldr	r0, [r8, #4]!
   14424:	ldr	r1, [sp, #24]
   14428:	bl	12648 <coda_type_get_class@plt>
   1442c:	cmp	r0, #0
   14430:	beq	14404 <_start@@Base+0x658>
   14434:	bl	1a7c8 <handle_coda_error@@Base>
   14438:	ldr	r3, [sp, #72]	; 0x48
   1443c:	cmp	r3, #1
   14440:	bne	14410 <_start@@Base+0x664>
   14444:	ldr	r3, [sp, #28]
   14448:	add	r5, r3, r3, lsl #2
   1444c:	lsl	r5, r5, #4
   14450:	add	r7, r6, r5
   14454:	ldr	r3, [r7, #804]	; 0x324
   14458:	cmp	r3, #0
   1445c:	ble	144a8 <_start@@Base+0x6fc>
   14460:	ldr	r3, [pc, #1544]	; 14a70 <_start@@Base+0xcc4>
   14464:	add	r5, r5, #844	; 0x34c
   14468:	mov	r4, #0
   1446c:	add	r5, r6, r5
   14470:	ldr	r2, [sp, #32]
   14474:	ldr	r9, [r2, r3]
   14478:	str	sl, [sp, #36]	; 0x24
   1447c:	ldr	sl, [sp, #20]
   14480:	mov	r1, fp
   14484:	mov	r0, sl
   14488:	ldr	r3, [r9]
   1448c:	add	r4, r4, #1
   14490:	ldr	r2, [r5, #4]!
   14494:	bl	12444 <fprintf@plt>
   14498:	ldr	r3, [r7, #804]	; 0x324
   1449c:	cmp	r4, r3
   144a0:	blt	14480 <_start@@Base+0x6d4>
   144a4:	ldr	sl, [sp, #36]	; 0x24
   144a8:	ldr	r3, [sp, #28]
   144ac:	add	r3, r3, #1
   144b0:	str	r3, [sp, #28]
   144b4:	b	14410 <_start@@Base+0x664>
   144b8:	ldr	fp, [sp, #32]
   144bc:	ldr	r7, [sp, #40]	; 0x28
   144c0:	b	14064 <_start@@Base+0x2b8>
   144c4:	bl	1a7c8 <handle_coda_error@@Base>
   144c8:	b	142e0 <_start@@Base+0x534>
   144cc:	add	r1, sp, #72	; 0x48
   144d0:	add	r0, r6, #144	; 0x90
   144d4:	bl	12594 <coda_cursor_get_bit_size@plt>
   144d8:	cmp	r0, #0
   144dc:	bne	14960 <_start@@Base+0xbb4>
   144e0:	ldr	r7, [sp, #72]	; 0x48
   144e4:	ldr	r8, [sp, #76]	; 0x4c
   144e8:	lsr	r2, r7, #3
   144ec:	ands	r1, r7, #7
   144f0:	movne	r1, #1
   144f4:	orr	r2, r2, r8, lsl #29
   144f8:	asr	r3, r8, #3
   144fc:	adds	r4, r2, r1
   14500:	mov	r0, r4
   14504:	adc	r5, r3, #0
   14508:	bl	123b4 <malloc@plt>
   1450c:	subs	sl, r0, #0
   14510:	beq	149d4 <_start@@Base+0xc28>
   14514:	add	r0, r6, #144	; 0x90
   14518:	mov	r1, sl
   1451c:	stm	sp, {r7, r8}
   14520:	mov	r2, #0
   14524:	mov	r3, #0
   14528:	bl	12624 <coda_cursor_read_bits@plt>
   1452c:	cmp	r0, #0
   14530:	bne	14968 <_start@@Base+0xbbc>
   14534:	cmp	r4, #1
   14538:	sbcs	r3, r5, #0
   1453c:	blt	147b4 <_start@@Base+0xa08>
   14540:	ldr	r8, [pc, #1332]	; 14a7c <_start@@Base+0xcd0>
   14544:	sub	r2, r4, #1
   14548:	sub	r4, sl, #1
   1454c:	add	r5, sl, r2
   14550:	ldr	r9, [pc, #1320]	; 14a80 <_start@@Base+0xcd4>
   14554:	ldr	r7, [pc, #1320]	; 14a84 <_start@@Base+0xcd8>
   14558:	add	r8, pc, r8
   1455c:	ldr	r6, [sp, #20]
   14560:	add	r9, pc, r9
   14564:	add	r7, pc, r7
   14568:	b	145a8 <_start@@Base+0x7fc>
   1456c:	cmp	r2, #12
   14570:	beq	1481c <_start@@Base+0xa70>
   14574:	bcc	14800 <_start@@Base+0xa54>
   14578:	cmp	r2, #13
   1457c:	beq	147e4 <_start@@Base+0xa38>
   14580:	cmp	r2, #92	; 0x5c
   14584:	bne	147c8 <_start@@Base+0xa1c>
   14588:	ldr	r0, [pc, #1272]	; 14a88 <_start@@Base+0xcdc>
   1458c:	mov	r3, r6
   14590:	mov	r2, #2
   14594:	mov	r1, #1
   14598:	add	r0, pc, r0
   1459c:	bl	12360 <fwrite@plt>
   145a0:	cmp	r4, r5
   145a4:	beq	147b4 <_start@@Base+0xa08>
   145a8:	ldrb	r2, [r4, #1]!
   145ac:	cmp	r2, #10
   145b0:	beq	1486c <_start@@Base+0xac0>
   145b4:	bhi	1456c <_start@@Base+0x7c0>
   145b8:	cmp	r2, #8
   145bc:	beq	14850 <_start@@Base+0xaa4>
   145c0:	bhi	14834 <_start@@Base+0xa88>
   145c4:	cmp	r2, #7
   145c8:	bne	147c8 <_start@@Base+0xa1c>
   145cc:	ldr	r0, [pc, #1208]	; 14a8c <_start@@Base+0xce0>
   145d0:	mov	r3, r6
   145d4:	mov	r2, #2
   145d8:	mov	r1, #1
   145dc:	add	r0, pc, r0
   145e0:	bl	12360 <fwrite@plt>
   145e4:	b	145a0 <_start@@Base+0x7f4>
   145e8:	add	r0, r6, #144	; 0x90
   145ec:	add	r1, sp, #72	; 0x48
   145f0:	bl	1248c <coda_cursor_read_char@plt>
   145f4:	cmp	r0, #0
   145f8:	bne	14970 <_start@@Base+0xbc4>
   145fc:	ldr	r3, [pc, #1124]	; 14a68 <_start@@Base+0xcbc>
   14600:	ldrb	r2, [sp, #72]	; 0x48
   14604:	ldr	r3, [fp, r3]
   14608:	ldr	r3, [r3]
   1460c:	cmp	r3, #0
   14610:	beq	148f8 <_start@@Base+0xb4c>
   14614:	ldr	r1, [pc, #1140]	; 14a90 <_start@@Base+0xce4>
   14618:	ldr	r0, [sp, #20]
   1461c:	add	r1, pc, r1
   14620:	bl	12444 <fprintf@plt>
   14624:	b	14118 <_start@@Base+0x36c>
   14628:	add	r0, r6, #144	; 0x90
   1462c:	add	r1, sp, #72	; 0x48
   14630:	bl	1242c <coda_cursor_read_double@plt>
   14634:	cmp	r0, #0
   14638:	bne	14938 <_start@@Base+0xb8c>
   1463c:	ldr	r0, [sp, #20]
   14640:	ldr	r1, [sp, #60]	; 0x3c
   14644:	ldrd	r2, [sp, #72]	; 0x48
   14648:	cmp	r1, #8
   1464c:	beq	14928 <_start@@Base+0xb7c>
   14650:	ldr	r1, [pc, #1084]	; 14a94 <_start@@Base+0xce8>
   14654:	add	r1, pc, r1
   14658:	bl	12444 <fprintf@plt>
   1465c:	b	14118 <_start@@Base+0x36c>
   14660:	add	r0, r6, #144	; 0x90
   14664:	add	r1, sp, #64	; 0x40
   14668:	bl	12420 <coda_cursor_read_uint64@plt>
   1466c:	cmp	r0, #0
   14670:	bne	14980 <_start@@Base+0xbd4>
   14674:	add	r4, sp, #72	; 0x48
   14678:	ldrd	r0, [sp, #64]	; 0x40
   1467c:	mov	r2, r4
   14680:	bl	12270 <coda_str64u@plt>
   14684:	mov	r0, r4
   14688:	ldr	r1, [sp, #20]
   1468c:	bl	1260c <fputs@plt>
   14690:	b	14118 <_start@@Base+0x36c>
   14694:	add	r0, r6, #144	; 0x90
   14698:	add	r1, sp, #64	; 0x40
   1469c:	bl	12534 <coda_cursor_read_int64@plt>
   146a0:	cmp	r0, #0
   146a4:	bne	14950 <_start@@Base+0xba4>
   146a8:	add	r4, sp, #72	; 0x48
   146ac:	ldrd	r0, [sp, #64]	; 0x40
   146b0:	mov	r2, r4
   146b4:	bl	12630 <coda_str64@plt>
   146b8:	mov	r0, r4
   146bc:	ldr	r1, [sp, #20]
   146c0:	bl	1260c <fputs@plt>
   146c4:	b	14118 <_start@@Base+0x36c>
   146c8:	add	r0, r6, #144	; 0x90
   146cc:	add	r1, sp, #72	; 0x48
   146d0:	bl	122a0 <coda_cursor_read_uint32@plt>
   146d4:	cmp	r0, #0
   146d8:	bne	14958 <_start@@Base+0xbac>
   146dc:	ldr	r1, [pc, #948]	; 14a98 <_start@@Base+0xcec>
   146e0:	ldr	r0, [sp, #20]
   146e4:	ldr	r2, [sp, #72]	; 0x48
   146e8:	add	r1, pc, r1
   146ec:	bl	12444 <fprintf@plt>
   146f0:	b	14118 <_start@@Base+0x36c>
   146f4:	add	r0, r6, #144	; 0x90
   146f8:	add	r1, sp, #72	; 0x48
   146fc:	bl	125c4 <coda_cursor_read_int32@plt>
   14700:	cmp	r0, #0
   14704:	bne	14948 <_start@@Base+0xb9c>
   14708:	ldr	r1, [pc, #908]	; 14a9c <_start@@Base+0xcf0>
   1470c:	ldr	r0, [sp, #20]
   14710:	ldr	r2, [sp, #72]	; 0x48
   14714:	add	r1, pc, r1
   14718:	bl	12444 <fprintf@plt>
   1471c:	b	14118 <_start@@Base+0x36c>
   14720:	bl	1a7c8 <handle_coda_error@@Base>
   14724:	b	141c8 <_start@@Base+0x41c>
   14728:	ldr	r3, [pc, #880]	; 14aa0 <_start@@Base+0xcf4>
   1472c:	mov	r2, #368	; 0x170
   14730:	ldr	r1, [pc, #876]	; 14aa4 <_start@@Base+0xcf8>
   14734:	ldr	r0, [pc, #876]	; 14aa8 <_start@@Base+0xcfc>
   14738:	add	r3, pc, r3
   1473c:	add	r1, pc, r1
   14740:	add	r0, pc, r0
   14744:	bl	1263c <__assert_fail@plt>
   14748:	bl	1a7c8 <handle_coda_error@@Base>
   1474c:	b	14268 <_start@@Base+0x4bc>
   14750:	add	r0, r6, #144	; 0x90
   14754:	add	r1, sp, #64	; 0x40
   14758:	bl	1242c <coda_cursor_read_double@plt>
   1475c:	cmp	r0, #0
   14760:	bne	147c0 <_start@@Base+0xa14>
   14764:	ldr	r1, [sp, #60]	; 0x3c
   14768:	ldrd	r2, [sp, #64]	; 0x40
   1476c:	cmp	r1, #2
   14770:	bne	14788 <_start@@Base+0x9dc>
   14774:	ldr	r1, [pc, #816]	; 14aac <_start@@Base+0xd00>
   14778:	ldr	r1, [fp, r1]
   1477c:	ldr	r1, [r1]
   14780:	cmp	r1, #0
   14784:	bne	14884 <_start@@Base+0xad8>
   14788:	ldr	r1, [pc, #800]	; 14ab0 <_start@@Base+0xd04>
   1478c:	ldr	r0, [sp, #20]
   14790:	add	r1, pc, r1
   14794:	bl	12444 <fprintf@plt>
   14798:	b	14118 <_start@@Base+0x36c>
   1479c:	bl	1a7c8 <handle_coda_error@@Base>
   147a0:	b	14198 <_start@@Base+0x3ec>
   147a4:	bl	1a7c8 <handle_coda_error@@Base>
   147a8:	b	1420c <_start@@Base+0x460>
   147ac:	bl	1a7c8 <handle_coda_error@@Base>
   147b0:	b	14030 <_start@@Base+0x284>
   147b4:	mov	r0, sl
   147b8:	bl	1227c <free@plt>
   147bc:	b	14118 <_start@@Base+0x36c>
   147c0:	bl	1a7c8 <handle_coda_error@@Base>
   147c4:	b	14764 <_start@@Base+0x9b8>
   147c8:	sub	r3, r2, #32
   147cc:	cmp	r3, #94	; 0x5e
   147d0:	bhi	14918 <_start@@Base+0xb6c>
   147d4:	mov	r0, r2
   147d8:	mov	r1, r6
   147dc:	bl	1257c <fputc@plt>
   147e0:	b	145a0 <_start@@Base+0x7f4>
   147e4:	ldr	r0, [pc, #712]	; 14ab4 <_start@@Base+0xd08>
   147e8:	mov	r3, r6
   147ec:	mov	r2, #2
   147f0:	mov	r1, #1
   147f4:	add	r0, pc, r0
   147f8:	bl	12360 <fwrite@plt>
   147fc:	b	145a0 <_start@@Base+0x7f4>
   14800:	ldr	r0, [pc, #688]	; 14ab8 <_start@@Base+0xd0c>
   14804:	mov	r3, r6
   14808:	mov	r2, #2
   1480c:	mov	r1, #1
   14810:	add	r0, pc, r0
   14814:	bl	12360 <fwrite@plt>
   14818:	b	145a0 <_start@@Base+0x7f4>
   1481c:	mov	r3, r6
   14820:	mov	r2, #2
   14824:	mov	r1, #1
   14828:	mov	r0, r7
   1482c:	bl	12360 <fwrite@plt>
   14830:	b	145a0 <_start@@Base+0x7f4>
   14834:	ldr	r0, [pc, #640]	; 14abc <_start@@Base+0xd10>
   14838:	mov	r3, r6
   1483c:	mov	r2, #2
   14840:	mov	r1, #1
   14844:	add	r0, pc, r0
   14848:	bl	12360 <fwrite@plt>
   1484c:	b	145a0 <_start@@Base+0x7f4>
   14850:	ldr	r0, [pc, #616]	; 14ac0 <_start@@Base+0xd14>
   14854:	mov	r3, r6
   14858:	mov	r2, #2
   1485c:	mov	r1, #1
   14860:	add	r0, pc, r0
   14864:	bl	12360 <fwrite@plt>
   14868:	b	145a0 <_start@@Base+0x7f4>
   1486c:	mov	r3, r6
   14870:	mov	r2, #2
   14874:	mov	r1, #1
   14878:	mov	r0, r8
   1487c:	bl	12360 <fwrite@plt>
   14880:	b	145a0 <_start@@Base+0x7f4>
   14884:	vmov	d0, r2, r3
   14888:	bl	12438 <coda_isNaN@plt>
   1488c:	cmp	r0, #0
   14890:	beq	14998 <_start@@Base+0xbec>
   14894:	ldr	r1, [pc, #552]	; 14ac4 <_start@@Base+0xd18>
   14898:	add	lr, sp, #72	; 0x48
   1489c:	str	lr, [sp, #24]
   148a0:	add	r1, pc, r1
   148a4:	ldrh	r0, [r1, #24]
   148a8:	ldrd	r2, [r1]
   148ac:	ldrb	ip, [r1, #26]
   148b0:	strd	r2, [sp, #72]	; 0x48
   148b4:	strh	r0, [sp, #96]	; 0x60
   148b8:	ldrd	r2, [r1, #8]
   148bc:	ldrd	r0, [r1, #16]
   148c0:	strd	r2, [sp, #80]	; 0x50
   148c4:	strb	ip, [sp, #98]	; 0x62
   148c8:	strd	r0, [sp, #88]	; 0x58
   148cc:	ldr	r3, [pc, #404]	; 14a68 <_start@@Base+0xcbc>
   148d0:	ldr	r3, [fp, r3]
   148d4:	ldr	r3, [r3]
   148d8:	cmp	r3, #0
   148dc:	beq	14988 <_start@@Base+0xbdc>
   148e0:	ldr	r1, [pc, #480]	; 14ac8 <_start@@Base+0xd1c>
   148e4:	ldr	r0, [sp, #20]
   148e8:	ldr	r2, [sp, #24]
   148ec:	add	r1, pc, r1
   148f0:	bl	12444 <fprintf@plt>
   148f4:	b	14118 <_start@@Base+0x36c>
   148f8:	mov	r0, r2
   148fc:	ldr	r1, [sp, #20]
   14900:	bl	1257c <fputc@plt>
   14904:	b	14118 <_start@@Base+0x36c>
   14908:	mov	r0, r4
   1490c:	ldr	r1, [sp, #20]
   14910:	bl	1260c <fputs@plt>
   14914:	b	14110 <_start@@Base+0x364>
   14918:	mov	r1, r9
   1491c:	mov	r0, r6
   14920:	bl	12444 <fprintf@plt>
   14924:	b	145a0 <_start@@Base+0x7f4>
   14928:	ldr	r1, [pc, #412]	; 14acc <_start@@Base+0xd20>
   1492c:	add	r1, pc, r1
   14930:	bl	12444 <fprintf@plt>
   14934:	b	14118 <_start@@Base+0x36c>
   14938:	bl	1a7c8 <handle_coda_error@@Base>
   1493c:	b	1463c <_start@@Base+0x890>
   14940:	bl	1a7c8 <handle_coda_error@@Base>
   14944:	b	140e8 <_start@@Base+0x33c>
   14948:	bl	1a7c8 <handle_coda_error@@Base>
   1494c:	b	14708 <_start@@Base+0x95c>
   14950:	bl	1a7c8 <handle_coda_error@@Base>
   14954:	b	146a8 <_start@@Base+0x8fc>
   14958:	bl	1a7c8 <handle_coda_error@@Base>
   1495c:	b	146dc <_start@@Base+0x930>
   14960:	bl	1a7c8 <handle_coda_error@@Base>
   14964:	b	144e0 <_start@@Base+0x734>
   14968:	bl	1a7c8 <handle_coda_error@@Base>
   1496c:	b	14534 <_start@@Base+0x788>
   14970:	bl	1a7c8 <handle_coda_error@@Base>
   14974:	b	145fc <_start@@Base+0x850>
   14978:	bl	1a7c8 <handle_coda_error@@Base>
   1497c:	b	140b8 <_start@@Base+0x30c>
   14980:	bl	1a7c8 <handle_coda_error@@Base>
   14984:	b	14674 <_start@@Base+0x8c8>
   14988:	ldr	r1, [sp, #20]
   1498c:	ldr	r0, [sp, #24]
   14990:	bl	1260c <fputs@plt>
   14994:	b	14118 <_start@@Base+0x36c>
   14998:	vldr	d0, [sp, #64]	; 0x40
   1499c:	bl	122dc <coda_isInf@plt>
   149a0:	cmp	r0, #0
   149a4:	bne	14894 <_start@@Base+0xae8>
   149a8:	ldr	r0, [pc, #288]	; 14ad0 <_start@@Base+0xd24>
   149ac:	add	r3, sp, #72	; 0x48
   149b0:	mov	r1, r3
   149b4:	vldr	d0, [sp, #64]	; 0x40
   149b8:	str	r3, [sp, #24]
   149bc:	add	r0, pc, r0
   149c0:	bl	12258 <coda_time_double_to_string@plt>
   149c4:	cmp	r0, #0
   149c8:	beq	148cc <_start@@Base+0xb20>
   149cc:	bl	1a7c8 <handle_coda_error@@Base>
   149d0:	b	148cc <_start@@Base+0xb20>
   149d4:	mov	r1, #163	; 0xa3
   149d8:	ldr	r3, [pc, #244]	; 14ad4 <_start@@Base+0xd28>
   149dc:	mov	r2, r4
   149e0:	mvn	r0, #0
   149e4:	str	r1, [sp]
   149e8:	ldr	r1, [pc, #232]	; 14ad8 <_start@@Base+0xd2c>
   149ec:	add	r3, pc, r3
   149f0:	add	r1, pc, r1
   149f4:	bl	12234 <coda_set_error@plt>
   149f8:	bl	1a7c8 <handle_coda_error@@Base>
   149fc:	ldr	r7, [sp, #72]	; 0x48
   14a00:	ldr	r8, [sp, #76]	; 0x4c
   14a04:	b	14514 <_start@@Base+0x768>
   14a08:	mov	r1, #126	; 0x7e
   14a0c:	ldr	r3, [pc, #200]	; 14adc <_start@@Base+0xd30>
   14a10:	mvn	r0, #0
   14a14:	str	r1, [sp]
   14a18:	ldr	r1, [pc, #192]	; 14ae0 <_start@@Base+0xd34>
   14a1c:	ldr	r2, [sp, #72]	; 0x48
   14a20:	add	r3, pc, r3
   14a24:	add	r1, pc, r1
   14a28:	add	r2, r2, #1
   14a2c:	bl	12234 <coda_set_error@plt>
   14a30:	bl	1a7c8 <handle_coda_error@@Base>
   14a34:	b	140cc <_start@@Base+0x320>
   14a38:	ldr	r3, [pc, #164]	; 14ae4 <_start@@Base+0xd38>
   14a3c:	movw	r2, #294	; 0x126
   14a40:	ldr	r1, [pc, #160]	; 14ae8 <_start@@Base+0xd3c>
   14a44:	ldr	r0, [pc, #160]	; 14aec <_start@@Base+0xd40>
   14a48:	add	r3, pc, r3
   14a4c:	add	r1, pc, r1
   14a50:	add	r0, pc, r0
   14a54:	bl	1263c <__assert_fail@plt>
   14a58:	andeq	r9, r1, r4, lsr #2
   14a5c:			; <UNDEFINED> instruction: 0x000001b4
   14a60:	andeq	r0, r0, r4, ror #3
   14a64:	andeq	r0, r0, ip, asr #3
   14a68:	andeq	r0, r0, ip, ror #3
   14a6c:	andeq	r6, r0, r0, asr sl
   14a70:	andeq	r0, r0, r0, asr #3
   14a74:	ldrdeq	r6, [r0], -r8
   14a78:			; <UNDEFINED> instruction: 0x000066bc
   14a7c:	andeq	r6, r0, r4, lsl r6
   14a80:	andeq	r6, r0, r0, lsr #12
   14a84:	andeq	r6, r0, r0, lsl r6
   14a88:	andeq	r6, r0, r4, ror #11
   14a8c:	andeq	r6, r0, r4, lsl #11
   14a90:	muleq	r0, r8, r4
   14a94:	andeq	r6, r0, r0, asr #10
   14a98:	andeq	r6, r0, r0, lsr #9
   14a9c:	andeq	r6, r0, ip, asr #20
   14aa0:	andeq	r6, r0, r0, ror #6
   14aa4:	andeq	r6, r0, r0, lsl #7
   14aa8:	andeq	r6, r0, r4, asr #15
   14aac:	andeq	r0, r0, r8, lsr #3
   14ab0:	andeq	r6, r0, r4, lsl #8
   14ab4:	andeq	r6, r0, r4, lsl #7
   14ab8:	andeq	r6, r0, r0, ror #6
   14abc:	andeq	r6, r0, r4, lsr #6
   14ac0:	andeq	r6, r0, r4, lsl #6
   14ac4:	andeq	r6, r0, r0, lsr #6
   14ac8:	andeq	r6, r0, ip, ror #4
   14acc:	andeq	r6, r0, r0, ror #4
   14ad0:	andeq	r6, r0, r0, ror #3
   14ad4:	ldrdeq	r6, [r0], -r0
   14ad8:	andeq	r6, r0, r0, lsr r1
   14adc:	muleq	r0, ip, r0
   14ae0:	strdeq	r6, [r0], -ip
   14ae4:	andeq	r6, r0, r0, asr r0
   14ae8:	andeq	r6, r0, r0, ror r0
   14aec:			; <UNDEFINED> instruction: 0x000064b4

00014af0 <export_data_element_to_ascii@@Base>:
   14af0:	ldr	r3, [pc, #228]	; 14bdc <export_data_element_to_ascii@@Base+0xec>
   14af4:	strd	r4, [sp, #-16]!
   14af8:	ldr	r4, [pc, #224]	; 14be0 <export_data_element_to_ascii@@Base+0xf0>
   14afc:	add	r3, pc, r3
   14b00:	ldr	r2, [r3]
   14b04:	add	r4, pc, r4
   14b08:	str	r6, [sp, #8]
   14b0c:	str	lr, [sp, #12]
   14b10:	cmp	r2, #0
   14b14:	beq	14bc4 <export_data_element_to_ascii@@Base+0xd4>
   14b18:	mov	r2, #0
   14b1c:	str	r2, [r3]
   14b20:	ldr	r3, [pc, #188]	; 14be4 <export_data_element_to_ascii@@Base+0xf4>
   14b24:	ldr	r3, [r4, r3]
   14b28:	ldr	r3, [r3]
   14b2c:	cmp	r3, #0
   14b30:	bne	14b9c <export_data_element_to_ascii@@Base+0xac>
   14b34:	ldr	r3, [pc, #172]	; 14be8 <export_data_element_to_ascii@@Base+0xf8>
   14b38:	ldr	r2, [r4, r3]
   14b3c:	ldr	r3, [r2]
   14b40:	cmp	r3, #0
   14b44:	ble	14b60 <export_data_element_to_ascii@@Base+0x70>
   14b48:	add	r3, r3, #37	; 0x25
   14b4c:	lsl	r3, r3, #3
   14b50:	add	r2, r2, r3
   14b54:	ldrd	r2, [r2]
   14b58:	orrs	r3, r2, r3
   14b5c:	beq	14b8c <export_data_element_to_ascii@@Base+0x9c>
   14b60:	ldr	r0, [pc, #132]	; 14bec <export_data_element_to_ascii@@Base+0xfc>
   14b64:	mov	r3, #0
   14b68:	mov	r2, r3
   14b6c:	mov	r1, r3
   14b70:	ldr	r6, [sp, #8]
   14b74:	ldr	lr, [sp, #12]
   14b78:	ldr	r0, [r4, r0]
   14b7c:	ldrd	r4, [sp]
   14b80:	add	sp, sp, #16
   14b84:	ldr	r0, [r0]
   14b88:	b	13e9c <_start@@Base+0xf0>
   14b8c:	ldrd	r4, [sp]
   14b90:	ldr	r6, [sp, #8]
   14b94:	add	sp, sp, #12
   14b98:	pop	{pc}		; (ldr pc, [sp], #4)
   14b9c:	ldr	r3, [pc, #72]	; 14bec <export_data_element_to_ascii@@Base+0xfc>
   14ba0:	mov	r2, #0
   14ba4:	mov	r1, #2
   14ba8:	ldr	r5, [r4, r3]
   14bac:	ldr	r0, [r5]
   14bb0:	bl	18680 <print_full_field_name@@Base>
   14bb4:	mov	r0, #10
   14bb8:	ldr	r1, [r5]
   14bbc:	bl	1257c <fputc@plt>
   14bc0:	b	14b34 <export_data_element_to_ascii@@Base+0x44>
   14bc4:	ldr	r3, [pc, #32]	; 14bec <export_data_element_to_ascii@@Base+0xfc>
   14bc8:	mov	r0, #10
   14bcc:	ldr	r3, [r4, r3]
   14bd0:	ldr	r1, [r3]
   14bd4:	bl	1257c <fputc@plt>
   14bd8:	b	14b20 <export_data_element_to_ascii@@Base+0x30>
   14bdc:	strdeq	r8, [r1], -r4
   14be0:	strdeq	r8, [r1], -r4
   14be4:	andeq	r0, r0, r8, ror #3
   14be8:	andeq	r0, r0, r4, ror #3
   14bec:			; <UNDEFINED> instruction: 0x000001bc
   14bf0:	push	{r0, r1, r2, r3}
   14bf4:	ldr	r3, [pc, #56]	; 14c34 <export_data_element_to_ascii@@Base+0x144>
   14bf8:	push	{lr}		; (str lr, [sp, #-4]!)
   14bfc:	sub	sp, sp, #12
   14c00:	ldr	r0, [pc, #48]	; 14c38 <export_data_element_to_ascii@@Base+0x148>
   14c04:	add	r1, sp, #20
   14c08:	mov	r2, r1
   14c0c:	str	r1, [sp, #4]
   14c10:	add	r3, pc, r3
   14c14:	ldr	r1, [sp, #16]
   14c18:	ldr	r3, [r3, r0]
   14c1c:	ldr	r0, [r3]
   14c20:	bl	12540 <vfprintf@plt>
   14c24:	add	sp, sp, #12
   14c28:	pop	{lr}		; (ldr lr, [sp], #4)
   14c2c:	add	sp, sp, #16
   14c30:	bx	lr
   14c34:	andeq	r8, r1, r8, ror #7
   14c38:			; <UNDEFINED> instruction: 0x000001bc
   14c3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14c40:	subs	r5, r1, #0
   14c44:	strd	r6, [sp, #8]
   14c48:	str	r8, [sp, #16]
   14c4c:	str	lr, [sp, #20]
   14c50:	ble	14ce0 <export_data_element_to_ascii@@Base+0x1f0>
   14c54:	ldr	r6, [pc, #268]	; 14d68 <export_data_element_to_ascii@@Base+0x278>
   14c58:	sub	r4, r0, #1
   14c5c:	add	r5, r4, r5
   14c60:	ldr	r8, [pc, #260]	; 14d6c <export_data_element_to_ascii@@Base+0x27c>
   14c64:	ldr	r7, [pc, #260]	; 14d70 <export_data_element_to_ascii@@Base+0x280>
   14c68:	add	r6, pc, r6
   14c6c:	add	r8, pc, r8
   14c70:	add	r7, pc, r7
   14c74:	b	14ca8 <export_data_element_to_ascii@@Base+0x1b8>
   14c78:	cmp	r1, #12
   14c7c:	beq	14d58 <export_data_element_to_ascii@@Base+0x268>
   14c80:	bcc	14d48 <export_data_element_to_ascii@@Base+0x258>
   14c84:	cmp	r1, #13
   14c88:	beq	14d38 <export_data_element_to_ascii@@Base+0x248>
   14c8c:	cmp	r1, #92	; 0x5c
   14c90:	bne	14d20 <export_data_element_to_ascii@@Base+0x230>
   14c94:	ldr	r0, [pc, #216]	; 14d74 <export_data_element_to_ascii@@Base+0x284>
   14c98:	add	r0, pc, r0
   14c9c:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   14ca0:	cmp	r4, r5
   14ca4:	beq	14ce0 <export_data_element_to_ascii@@Base+0x1f0>
   14ca8:	ldrb	r1, [r4, #1]!
   14cac:	cmp	r1, #10
   14cb0:	beq	14cf4 <export_data_element_to_ascii@@Base+0x204>
   14cb4:	bhi	14c78 <export_data_element_to_ascii@@Base+0x188>
   14cb8:	cmp	r1, #8
   14cbc:	beq	14d10 <export_data_element_to_ascii@@Base+0x220>
   14cc0:	bhi	14d00 <export_data_element_to_ascii@@Base+0x210>
   14cc4:	cmp	r1, #7
   14cc8:	bne	14d20 <export_data_element_to_ascii@@Base+0x230>
   14ccc:	ldr	r0, [pc, #164]	; 14d78 <export_data_element_to_ascii@@Base+0x288>
   14cd0:	add	r0, pc, r0
   14cd4:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   14cd8:	cmp	r4, r5
   14cdc:	bne	14ca8 <export_data_element_to_ascii@@Base+0x1b8>
   14ce0:	ldrd	r4, [sp]
   14ce4:	ldrd	r6, [sp, #8]
   14ce8:	ldr	r8, [sp, #16]
   14cec:	add	sp, sp, #20
   14cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf4:	mov	r0, r6
   14cf8:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   14cfc:	b	14ca0 <export_data_element_to_ascii@@Base+0x1b0>
   14d00:	ldr	r0, [pc, #116]	; 14d7c <export_data_element_to_ascii@@Base+0x28c>
   14d04:	add	r0, pc, r0
   14d08:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   14d0c:	b	14ca0 <export_data_element_to_ascii@@Base+0x1b0>
   14d10:	ldr	r0, [pc, #104]	; 14d80 <export_data_element_to_ascii@@Base+0x290>
   14d14:	add	r0, pc, r0
   14d18:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   14d1c:	b	14ca0 <export_data_element_to_ascii@@Base+0x1b0>
   14d20:	sub	r3, r1, #32
   14d24:	cmp	r3, #94	; 0x5e
   14d28:	movls	r0, r7
   14d2c:	movhi	r0, r8
   14d30:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   14d34:	b	14ca0 <export_data_element_to_ascii@@Base+0x1b0>
   14d38:	ldr	r0, [pc, #68]	; 14d84 <export_data_element_to_ascii@@Base+0x294>
   14d3c:	add	r0, pc, r0
   14d40:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   14d44:	b	14ca0 <export_data_element_to_ascii@@Base+0x1b0>
   14d48:	ldr	r0, [pc, #56]	; 14d88 <export_data_element_to_ascii@@Base+0x298>
   14d4c:	add	r0, pc, r0
   14d50:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   14d54:	b	14ca0 <export_data_element_to_ascii@@Base+0x1b0>
   14d58:	ldr	r0, [pc, #44]	; 14d8c <export_data_element_to_ascii@@Base+0x29c>
   14d5c:	add	r0, pc, r0
   14d60:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   14d64:	b	14ca0 <export_data_element_to_ascii@@Base+0x1b0>
   14d68:	andeq	r5, r0, r4, lsl #30
   14d6c:	andeq	r5, r0, r4, lsl pc
   14d70:	andeq	r5, r0, r0, lsl #31
   14d74:	andeq	r5, r0, r4, ror #29
   14d78:	muleq	r0, r0, lr
   14d7c:	andeq	r5, r0, r4, ror #28
   14d80:	andeq	r5, r0, r0, asr lr
   14d84:	andeq	r5, r0, ip, lsr lr
   14d88:	andeq	r5, r0, r4, lsr #28
   14d8c:	andeq	r5, r0, r8, lsl lr
   14d90:	push	{r0, r1, r2, r3}
   14d94:	ldr	r3, [pc, #172]	; 14e48 <export_data_element_to_ascii@@Base+0x358>
   14d98:	strd	r4, [sp, #-16]!
   14d9c:	ldr	r2, [pc, #168]	; 14e4c <export_data_element_to_ascii@@Base+0x35c>
   14da0:	add	r3, pc, r3
   14da4:	ldr	r4, [r3]
   14da8:	add	r2, pc, r2
   14dac:	str	r6, [sp, #8]
   14db0:	str	lr, [sp, #12]
   14db4:	sub	sp, sp, #8
   14db8:	cmp	r4, #0
   14dbc:	blt	14e28 <export_data_element_to_ascii@@Base+0x338>
   14dc0:	ldr	r3, [pc, #136]	; 14e50 <export_data_element_to_ascii@@Base+0x360>
   14dc4:	ldreq	r5, [r2, r3]
   14dc8:	beq	14df4 <export_data_element_to_ascii@@Base+0x304>
   14dcc:	ldr	r6, [pc, #128]	; 14e54 <export_data_element_to_ascii@@Base+0x364>
   14dd0:	ldr	r5, [r2, r3]
   14dd4:	add	r6, pc, r6
   14dd8:	mov	r2, #2
   14ddc:	mov	r1, #1
   14de0:	ldr	r3, [r5]
   14de4:	mov	r0, r6
   14de8:	bl	12360 <fwrite@plt>
   14dec:	subs	r4, r4, #1
   14df0:	bne	14dd8 <export_data_element_to_ascii@@Base+0x2e8>
   14df4:	ldr	r1, [sp, #24]
   14df8:	add	r3, sp, #28
   14dfc:	mov	r2, r3
   14e00:	ldr	r0, [r5]
   14e04:	str	r3, [sp, #4]
   14e08:	bl	12540 <vfprintf@plt>
   14e0c:	add	sp, sp, #8
   14e10:	ldrd	r4, [sp]
   14e14:	ldr	r6, [sp, #8]
   14e18:	ldr	lr, [sp, #12]
   14e1c:	add	sp, sp, #16
   14e20:	add	sp, sp, #16
   14e24:	bx	lr
   14e28:	ldr	r3, [pc, #40]	; 14e58 <export_data_element_to_ascii@@Base+0x368>
   14e2c:	mov	r2, #44	; 0x2c
   14e30:	ldr	r1, [pc, #36]	; 14e5c <export_data_element_to_ascii@@Base+0x36c>
   14e34:	ldr	r0, [pc, #36]	; 14e60 <export_data_element_to_ascii@@Base+0x370>
   14e38:	add	r3, pc, r3
   14e3c:	add	r1, pc, r1
   14e40:	add	r0, pc, r0
   14e44:	bl	1263c <__assert_fail@plt>
   14e48:	andeq	r8, r1, r4, ror #8
   14e4c:	andeq	r8, r1, r0, asr r2
   14e50:			; <UNDEFINED> instruction: 0x000001bc
   14e54:	andeq	r5, r0, r4, lsl #28
   14e58:	andeq	r5, r0, r4, lsr #27
   14e5c:			; <UNDEFINED> instruction: 0x00005db8
   14e60:	andeq	r5, r0, r8, lsl lr
   14e64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e68:	mov	r5, r1
   14e6c:	mov	r4, r0
   14e70:	strd	r6, [sp, #8]
   14e74:	strd	r8, [sp, #16]
   14e78:	ldr	r9, [pc, #3364]	; 15ba4 <export_data_element_to_ascii@@Base+0x10b4>
   14e7c:	strd	sl, [sp, #24]
   14e80:	str	lr, [sp, #32]
   14e84:	sub	sp, sp, #660	; 0x294
   14e88:	add	r1, sp, #56	; 0x38
   14e8c:	bl	12300 <coda_cursor_has_attributes@plt>
   14e90:	cmp	r0, #0
   14e94:	add	r9, pc, r9
   14e98:	bne	15080 <export_data_element_to_ascii@@Base+0x590>
   14e9c:	ldr	r3, [sp, #56]	; 0x38
   14ea0:	cmp	r3, #0
   14ea4:	bne	1502c <export_data_element_to_ascii@@Base+0x53c>
   14ea8:	add	r1, sp, #52	; 0x34
   14eac:	mov	r0, r4
   14eb0:	bl	1230c <coda_cursor_get_type_class@plt>
   14eb4:	cmp	r0, #0
   14eb8:	bne	15024 <export_data_element_to_ascii@@Base+0x534>
   14ebc:	ldr	r3, [sp, #52]	; 0x34
   14ec0:	cmp	r3, #6
   14ec4:	addls	pc, pc, r3, lsl #2
   14ec8:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   14ecc:	b	14ee8 <export_data_element_to_ascii@@Base+0x3f8>
   14ed0:	b	150dc <export_data_element_to_ascii@@Base+0x5ec>
   14ed4:	b	152fc <export_data_element_to_ascii@@Base+0x80c>
   14ed8:	b	152fc <export_data_element_to_ascii@@Base+0x80c>
   14edc:	b	152fc <export_data_element_to_ascii@@Base+0x80c>
   14ee0:	b	152fc <export_data_element_to_ascii@@Base+0x80c>
   14ee4:	b	15088 <export_data_element_to_ascii@@Base+0x598>
   14ee8:	add	r1, sp, #60	; 0x3c
   14eec:	mov	r0, r4
   14ef0:	bl	12264 <coda_cursor_get_num_elements@plt>
   14ef4:	cmp	r0, #0
   14ef8:	bne	15384 <export_data_element_to_ascii@@Base+0x894>
   14efc:	ldr	r3, [sp, #60]	; 0x3c
   14f00:	cmp	r3, #0
   14f04:	ble	15008 <export_data_element_to_ascii@@Base+0x518>
   14f08:	add	r1, sp, #64	; 0x40
   14f0c:	mov	r0, r4
   14f10:	bl	122c4 <coda_cursor_get_type@plt>
   14f14:	cmp	r0, #0
   14f18:	bne	159ac <export_data_element_to_ascii@@Base+0xebc>
   14f1c:	add	r1, sp, #68	; 0x44
   14f20:	ldr	r0, [sp, #64]	; 0x40
   14f24:	bl	124c8 <coda_type_get_record_union_status@plt>
   14f28:	cmp	r0, #0
   14f2c:	bne	159a4 <export_data_element_to_ascii@@Base+0xeb4>
   14f30:	ldr	sl, [sp, #68]	; 0x44
   14f34:	cmp	sl, #0
   14f38:	beq	15510 <export_data_element_to_ascii@@Base+0xa20>
   14f3c:	add	r1, sp, #72	; 0x48
   14f40:	mov	r0, r4
   14f44:	bl	125b8 <coda_cursor_get_available_union_field_index@plt>
   14f48:	cmp	r0, #0
   14f4c:	bne	15a5c <export_data_element_to_ascii@@Base+0xf6c>
   14f50:	add	r2, sp, #80	; 0x50
   14f54:	ldr	r0, [sp, #64]	; 0x40
   14f58:	ldr	r1, [sp, #72]	; 0x48
   14f5c:	bl	12600 <coda_type_get_record_field_name@plt>
   14f60:	cmp	r0, #0
   14f64:	bne	15a54 <export_data_element_to_ascii@@Base+0xf64>
   14f68:	mov	r0, r4
   14f6c:	ldr	r1, [sp, #72]	; 0x48
   14f70:	bl	12384 <coda_cursor_goto_record_field_by_index@plt>
   14f74:	cmp	r0, #0
   14f78:	bne	15a4c <export_data_element_to_ascii@@Base+0xf5c>
   14f7c:	ldr	r0, [pc, #3108]	; 15ba8 <export_data_element_to_ascii@@Base+0x10b8>
   14f80:	ldr	r1, [sp, #80]	; 0x50
   14f84:	add	r0, pc, r0
   14f88:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   14f8c:	ldr	r3, [pc, #3096]	; 15bac <export_data_element_to_ascii@@Base+0x10bc>
   14f90:	add	r3, pc, r3
   14f94:	ldr	r3, [r3]
   14f98:	cmp	r3, #0
   14f9c:	bne	159d4 <export_data_element_to_ascii@@Base+0xee4>
   14fa0:	ldr	r0, [pc, #3080]	; 15bb0 <export_data_element_to_ascii@@Base+0x10c0>
   14fa4:	add	r0, pc, r0
   14fa8:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   14fac:	ldr	r1, [pc, #3072]	; 15bb4 <export_data_element_to_ascii@@Base+0x10c4>
   14fb0:	ldr	r3, [pc, #3072]	; 15bb8 <export_data_element_to_ascii@@Base+0x10c8>
   14fb4:	add	r1, pc, r1
   14fb8:	ldr	r2, [r1]
   14fbc:	add	r2, r2, #1
   14fc0:	str	r2, [r1]
   14fc4:	ldr	r3, [r9, r3]
   14fc8:	ldr	r3, [r3]
   14fcc:	cmp	r3, r5
   14fd0:	movle	r2, #0
   14fd4:	movgt	r2, #1
   14fd8:	orrs	r3, r2, r3, lsr #31
   14fdc:	beq	15abc <export_data_element_to_ascii@@Base+0xfcc>
   14fe0:	add	r1, r5, #1
   14fe4:	mov	r0, r4
   14fe8:	bl	14e64 <export_data_element_to_ascii@@Base+0x374>
   14fec:	ldr	r2, [pc, #3016]	; 15bbc <export_data_element_to_ascii@@Base+0x10cc>
   14ff0:	mov	r0, r4
   14ff4:	add	r2, pc, r2
   14ff8:	ldr	r3, [r2]
   14ffc:	sub	r3, r3, #1
   15000:	str	r3, [r2]
   15004:	bl	123e4 <coda_cursor_goto_parent@plt>
   15008:	add	sp, sp, #660	; 0x294
   1500c:	ldrd	r4, [sp]
   15010:	ldrd	r6, [sp, #8]
   15014:	ldrd	r8, [sp, #16]
   15018:	ldrd	sl, [sp, #24]
   1501c:	add	sp, sp, #32
   15020:	pop	{pc}		; (ldr pc, [sp], #4)
   15024:	bl	1a7c8 <handle_coda_error@@Base>
   15028:	b	14ebc <export_data_element_to_ascii@@Base+0x3cc>
   1502c:	mov	r0, r4
   15030:	bl	12480 <coda_cursor_goto_attributes@plt>
   15034:	cmp	r0, #0
   15038:	bne	1537c <export_data_element_to_ascii@@Base+0x88c>
   1503c:	ldr	r6, [pc, #2940]	; 15bc0 <export_data_element_to_ascii@@Base+0x10d0>
   15040:	ldr	r0, [pc, #2940]	; 15bc4 <export_data_element_to_ascii@@Base+0x10d4>
   15044:	add	r6, pc, r6
   15048:	add	r0, pc, r0
   1504c:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   15050:	ldr	r3, [r6]
   15054:	mov	r0, r4
   15058:	mov	r1, r5
   1505c:	add	r3, r3, #1
   15060:	str	r3, [r6]
   15064:	bl	14e64 <export_data_element_to_ascii@@Base+0x374>
   15068:	ldr	r3, [r6]
   1506c:	mov	r0, r4
   15070:	sub	r3, r3, #1
   15074:	str	r3, [r6]
   15078:	bl	123e4 <coda_cursor_goto_parent@plt>
   1507c:	b	14ea8 <export_data_element_to_ascii@@Base+0x3b8>
   15080:	bl	1a7c8 <handle_coda_error@@Base>
   15084:	b	14e9c <export_data_element_to_ascii@@Base+0x3ac>
   15088:	add	r1, sp, #80	; 0x50
   1508c:	mov	r0, r4
   15090:	bl	12348 <coda_cursor_get_special_type@plt>
   15094:	cmp	r0, #0
   15098:	bne	153c4 <export_data_element_to_ascii@@Base+0x8d4>
   1509c:	ldr	r0, [sp, #80]	; 0x50
   150a0:	cmp	r0, #0
   150a4:	bne	1538c <export_data_element_to_ascii@@Base+0x89c>
   150a8:	bl	121b0 <coda_type_get_special_type_name@plt>
   150ac:	mov	r1, r0
   150b0:	ldr	r0, [pc, #2832]	; 15bc8 <export_data_element_to_ascii@@Base+0x10d8>
   150b4:	add	r0, pc, r0
   150b8:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   150bc:	ldr	r3, [sp, #80]	; 0x50
   150c0:	cmp	r3, #3
   150c4:	addls	pc, pc, r3, lsl #2
   150c8:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   150cc:	b	154d8 <export_data_element_to_ascii@@Base+0x9e8>
   150d0:	b	154e8 <export_data_element_to_ascii@@Base+0x9f8>
   150d4:	b	15490 <export_data_element_to_ascii@@Base+0x9a0>
   150d8:	b	1545c <export_data_element_to_ascii@@Base+0x96c>
   150dc:	add	r8, sp, #104	; 0x68
   150e0:	add	r1, sp, #68	; 0x44
   150e4:	mov	r2, r8
   150e8:	mov	r0, r4
   150ec:	bl	12510 <coda_cursor_get_array_dim@plt>
   150f0:	cmp	r0, #0
   150f4:	bne	153cc <export_data_element_to_ascii@@Base+0x8dc>
   150f8:	ldr	r3, [sp, #68]	; 0x44
   150fc:	cmp	r3, #0
   15100:	str	r3, [sp, #8]
   15104:	blt	15008 <export_data_element_to_ascii@@Base+0x518>
   15108:	beq	15a84 <export_data_element_to_ascii@@Base+0xf94>
   1510c:	add	fp, r8, r3, lsl #2
   15110:	add	r2, sp, #136	; 0x88
   15114:	mov	r3, r8
   15118:	mov	r7, #1
   1511c:	mov	r0, #0
   15120:	ldr	r1, [r3], #4
   15124:	str	r0, [r2], #4
   15128:	cmp	r3, fp
   1512c:	mul	r7, r1, r7
   15130:	bne	15120 <export_data_element_to_ascii@@Base+0x630>
   15134:	cmp	r7, #0
   15138:	subgt	r3, r7, #1
   1513c:	strgt	r3, [sp, #8]
   15140:	ble	15008 <export_data_element_to_ascii@@Base+0x518>
   15144:	mov	r0, r4
   15148:	bl	12354 <coda_cursor_goto_first_array_element@plt>
   1514c:	cmp	r0, #0
   15150:	bne	159bc <export_data_element_to_ascii@@Base+0xecc>
   15154:	ldr	r2, [pc, #2672]	; 15bcc <export_data_element_to_ascii@@Base+0x10dc>
   15158:	mov	sl, #0
   1515c:	ldr	r3, [pc, #2644]	; 15bb8 <export_data_element_to_ascii@@Base+0x10c8>
   15160:	ldr	fp, [pc, #2664]	; 15bd0 <export_data_element_to_ascii@@Base+0x10e0>
   15164:	add	r2, pc, r2
   15168:	str	r2, [sp, #20]
   1516c:	ldr	r3, [r9, r3]
   15170:	add	fp, pc, fp
   15174:	str	r7, [sp, #24]
   15178:	str	r8, [sp, #28]
   1517c:	mov	r8, r3
   15180:	ldr	r0, [sp, #20]
   15184:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   15188:	ldr	r3, [sp, #68]	; 0x44
   1518c:	cmp	r3, #0
   15190:	ble	151e8 <export_data_element_to_ascii@@Base+0x6f8>
   15194:	ldr	r9, [pc, #2616]	; 15bd4 <export_data_element_to_ascii@@Base+0x10e4>
   15198:	add	r6, sp, #136	; 0x88
   1519c:	mov	r7, #0
   151a0:	add	r9, pc, r9
   151a4:	b	151b4 <export_data_element_to_ascii@@Base+0x6c4>
   151a8:	add	r7, r7, #1
   151ac:	cmp	r7, r3
   151b0:	bge	151e8 <export_data_element_to_ascii@@Base+0x6f8>
   151b4:	mov	r0, r9
   151b8:	ldr	r1, [r6], #4
   151bc:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   151c0:	ldr	r3, [sp, #68]	; 0x44
   151c4:	sub	r2, r3, #1
   151c8:	cmp	r2, r7
   151cc:	ble	151a8 <export_data_element_to_ascii@@Base+0x6b8>
   151d0:	mov	r0, fp
   151d4:	add	r7, r7, #1
   151d8:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   151dc:	ldr	r3, [sp, #68]	; 0x44
   151e0:	cmp	r7, r3
   151e4:	blt	151b4 <export_data_element_to_ascii@@Base+0x6c4>
   151e8:	ldr	r0, [pc, #2536]	; 15bd8 <export_data_element_to_ascii@@Base+0x10e8>
   151ec:	add	r0, pc, r0
   151f0:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   151f4:	ldr	r3, [pc, #2528]	; 15bdc <export_data_element_to_ascii@@Base+0x10ec>
   151f8:	add	r3, pc, r3
   151fc:	ldr	r3, [r3]
   15200:	cmp	r3, #0
   15204:	bne	15850 <export_data_element_to_ascii@@Base+0xd60>
   15208:	ldr	r0, [pc, #2512]	; 15be0 <export_data_element_to_ascii@@Base+0x10f0>
   1520c:	add	r0, pc, r0
   15210:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   15214:	ldr	r2, [pc, #2504]	; 15be4 <export_data_element_to_ascii@@Base+0x10f4>
   15218:	ldr	r1, [r8]
   1521c:	add	r2, pc, r2
   15220:	ldr	r3, [r2]
   15224:	cmp	r1, r5
   15228:	movle	r0, #0
   1522c:	movgt	r0, #1
   15230:	orrs	r1, r0, r1, lsr #31
   15234:	add	r3, r3, #1
   15238:	str	r3, [r2]
   1523c:	beq	15984 <export_data_element_to_ascii@@Base+0xe94>
   15240:	add	r1, r5, #1
   15244:	mov	r0, r4
   15248:	bl	14e64 <export_data_element_to_ascii@@Base+0x374>
   1524c:	ldr	r2, [pc, #2452]	; 15be8 <export_data_element_to_ascii@@Base+0x10f8>
   15250:	ldr	r0, [sp, #68]	; 0x44
   15254:	add	r2, pc, r2
   15258:	ldr	r3, [r2]
   1525c:	subs	r1, r0, #1
   15260:	sub	r3, r3, #1
   15264:	str	r3, [r2]
   15268:	bmi	152d4 <export_data_element_to_ascii@@Base+0x7e4>
   1526c:	add	r3, sp, #656	; 0x290
   15270:	add	r2, r3, r1, lsl #2
   15274:	ldr	ip, [r2, #-552]	; 0xfffffdd8
   15278:	ldr	r3, [r2, #-520]	; 0xfffffdf8
   1527c:	add	r3, r3, #1
   15280:	cmp	ip, r3
   15284:	str	r3, [r2, #-520]	; 0xfffffdf8
   15288:	bne	152d4 <export_data_element_to_ascii@@Base+0x7e4>
   1528c:	ldr	r3, [sp, #28]
   15290:	lsl	r0, r0, #2
   15294:	add	r2, sp, #136	; 0x88
   15298:	mov	lr, #0
   1529c:	sub	r0, r0, #4
   152a0:	add	r2, r2, r0
   152a4:	add	r0, r3, r0
   152a8:	b	152c4 <export_data_element_to_ascii@@Base+0x7d4>
   152ac:	ldr	r3, [r2, #-4]!
   152b0:	ldr	ip, [r0, #-4]!
   152b4:	add	r3, r3, #1
   152b8:	cmp	r3, ip
   152bc:	str	r3, [r2]
   152c0:	bne	152d4 <export_data_element_to_ascii@@Base+0x7e4>
   152c4:	sub	r1, r1, #1
   152c8:	str	lr, [r2]
   152cc:	cmn	r1, #1
   152d0:	bne	152ac <export_data_element_to_ascii@@Base+0x7bc>
   152d4:	ldr	r3, [sp, #8]
   152d8:	cmp	sl, r3
   152dc:	blt	15838 <export_data_element_to_ascii@@Base+0xd48>
   152e0:	ldr	r3, [sp, #24]
   152e4:	add	sl, sl, #1
   152e8:	cmp	sl, r3
   152ec:	blt	15180 <export_data_element_to_ascii@@Base+0x690>
   152f0:	mov	r0, r4
   152f4:	bl	123e4 <coda_cursor_goto_parent@plt>
   152f8:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   152fc:	add	r1, sp, #80	; 0x50
   15300:	mov	r0, r4
   15304:	bl	1251c <coda_cursor_has_ascii_content@plt>
   15308:	cmp	r0, #0
   1530c:	bne	15454 <export_data_element_to_ascii@@Base+0x964>
   15310:	ldr	r3, [sp, #80]	; 0x50
   15314:	cmp	r3, #0
   15318:	bne	153dc <export_data_element_to_ascii@@Base+0x8ec>
   1531c:	add	r1, sp, #72	; 0x48
   15320:	mov	r0, r4
   15324:	bl	123a8 <coda_cursor_get_read_type@plt>
   15328:	cmp	r0, #0
   1532c:	bne	153d4 <export_data_element_to_ascii@@Base+0x8e4>
   15330:	ldr	r3, [sp, #72]	; 0x48
   15334:	add	r3, r3, #1
   15338:	cmp	r3, #13
   1533c:	addls	pc, pc, r3, lsl #2
   15340:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   15344:	b	157c8 <export_data_element_to_ascii@@Base+0xcd8>
   15348:	b	157f8 <export_data_element_to_ascii@@Base+0xd08>
   1534c:	b	157a0 <export_data_element_to_ascii@@Base+0xcb0>
   15350:	b	157f8 <export_data_element_to_ascii@@Base+0xd08>
   15354:	b	157a0 <export_data_element_to_ascii@@Base+0xcb0>
   15358:	b	157f8 <export_data_element_to_ascii@@Base+0xd08>
   1535c:	b	157a0 <export_data_element_to_ascii@@Base+0xcb0>
   15360:	b	15768 <export_data_element_to_ascii@@Base+0xc78>
   15364:	b	15730 <export_data_element_to_ascii@@Base+0xc40>
   15368:	b	156fc <export_data_element_to_ascii@@Base+0xc0c>
   1536c:	b	156fc <export_data_element_to_ascii@@Base+0xc0c>
   15370:	b	157c8 <export_data_element_to_ascii@@Base+0xcd8>
   15374:	b	157c8 <export_data_element_to_ascii@@Base+0xcd8>
   15378:	b	15608 <export_data_element_to_ascii@@Base+0xb18>
   1537c:	bl	1a7c8 <handle_coda_error@@Base>
   15380:	b	1503c <export_data_element_to_ascii@@Base+0x54c>
   15384:	bl	1a7c8 <handle_coda_error@@Base>
   15388:	b	14efc <export_data_element_to_ascii@@Base+0x40c>
   1538c:	add	r6, sp, #136	; 0x88
   15390:	mov	r2, #520	; 0x208
   15394:	mov	r1, r4
   15398:	mov	r0, r6
   1539c:	bl	122d0 <memcpy@plt>
   153a0:	mov	r0, r6
   153a4:	bl	125ac <coda_cursor_use_base_type_of_special_type@plt>
   153a8:	cmp	r0, #0
   153ac:	bne	15830 <export_data_element_to_ascii@@Base+0xd40>
   153b0:	mov	r0, r6
   153b4:	mov	r1, r5
   153b8:	bl	14e64 <export_data_element_to_ascii@@Base+0x374>
   153bc:	ldr	r0, [sp, #80]	; 0x50
   153c0:	b	150a8 <export_data_element_to_ascii@@Base+0x5b8>
   153c4:	bl	1a7c8 <handle_coda_error@@Base>
   153c8:	b	1509c <export_data_element_to_ascii@@Base+0x5ac>
   153cc:	bl	1a7c8 <handle_coda_error@@Base>
   153d0:	b	150f8 <export_data_element_to_ascii@@Base+0x608>
   153d4:	bl	1a7c8 <handle_coda_error@@Base>
   153d8:	b	15330 <export_data_element_to_ascii@@Base+0x840>
   153dc:	add	r1, sp, #136	; 0x88
   153e0:	mov	r0, r4
   153e4:	bl	12414 <coda_cursor_get_string_length@plt>
   153e8:	cmp	r0, #0
   153ec:	bne	15828 <export_data_element_to_ascii@@Base+0xd38>
   153f0:	ldr	r0, [sp, #136]	; 0x88
   153f4:	add	r0, r0, #1
   153f8:	bl	123b4 <malloc@plt>
   153fc:	subs	r5, r0, #0
   15400:	beq	15a8c <export_data_element_to_ascii@@Base+0xf9c>
   15404:	ldr	r2, [sp, #136]	; 0x88
   15408:	mov	r1, r5
   1540c:	mov	r0, r4
   15410:	add	r2, r2, #1
   15414:	bl	123d8 <coda_cursor_read_string@plt>
   15418:	cmp	r0, #0
   1541c:	bne	15820 <export_data_element_to_ascii@@Base+0xd30>
   15420:	ldr	r0, [pc, #1988]	; 15bec <export_data_element_to_ascii@@Base+0x10fc>
   15424:	add	r0, pc, r0
   15428:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   1542c:	mov	r0, r5
   15430:	ldr	r1, [sp, #136]	; 0x88
   15434:	bl	14c3c <export_data_element_to_ascii@@Base+0x14c>
   15438:	ldr	r0, [pc, #1968]	; 15bf0 <export_data_element_to_ascii@@Base+0x1100>
   1543c:	ldr	r1, [sp, #136]	; 0x88
   15440:	add	r0, pc, r0
   15444:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   15448:	mov	r0, r5
   1544c:	bl	1227c <free@plt>
   15450:	b	1531c <export_data_element_to_ascii@@Base+0x82c>
   15454:	bl	1a7c8 <handle_coda_error@@Base>
   15458:	b	15310 <export_data_element_to_ascii@@Base+0x820>
   1545c:	mov	r0, r4
   15460:	add	r2, sp, #136	; 0x88
   15464:	add	r1, sp, #104	; 0x68
   15468:	bl	124d4 <coda_cursor_read_complex_double_split@plt>
   1546c:	cmp	r0, #0
   15470:	bne	15a7c <export_data_element_to_ascii@@Base+0xf8c>
   15474:	ldr	r0, [pc, #1912]	; 15bf4 <export_data_element_to_ascii@@Base+0x1104>
   15478:	ldrd	r2, [sp, #104]	; 0x68
   1547c:	ldrd	r4, [sp, #136]	; 0x88
   15480:	add	r0, pc, r0
   15484:	strd	r4, [sp]
   15488:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   1548c:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   15490:	mov	r0, r4
   15494:	add	r1, sp, #104	; 0x68
   15498:	bl	1242c <coda_cursor_read_double@plt>
   1549c:	cmp	r0, #0
   154a0:	bne	15a74 <export_data_element_to_ascii@@Base+0xf84>
   154a4:	vldr	d0, [sp, #104]	; 0x68
   154a8:	bl	12438 <coda_isNaN@plt>
   154ac:	cmp	r0, #0
   154b0:	bne	154c4 <export_data_element_to_ascii@@Base+0x9d4>
   154b4:	vldr	d0, [sp, #104]	; 0x68
   154b8:	bl	122dc <coda_isInf@plt>
   154bc:	cmp	r0, #0
   154c0:	beq	15b28 <export_data_element_to_ascii@@Base+0x1038>
   154c4:	ldr	r0, [pc, #1836]	; 15bf8 <export_data_element_to_ascii@@Base+0x1108>
   154c8:	ldrd	r2, [sp, #104]	; 0x68
   154cc:	add	r0, pc, r0
   154d0:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   154d4:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   154d8:	ldr	r0, [pc, #1820]	; 15bfc <export_data_element_to_ascii@@Base+0x110c>
   154dc:	add	r0, pc, r0
   154e0:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   154e4:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   154e8:	mov	r0, r4
   154ec:	add	r1, sp, #136	; 0x88
   154f0:	bl	1242c <coda_cursor_read_double@plt>
   154f4:	cmp	r0, #0
   154f8:	bne	15a6c <export_data_element_to_ascii@@Base+0xf7c>
   154fc:	ldr	r0, [pc, #1788]	; 15c00 <export_data_element_to_ascii@@Base+0x1110>
   15500:	ldrd	r2, [sp, #136]	; 0x88
   15504:	add	r0, pc, r0
   15508:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   1550c:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   15510:	mov	r0, r4
   15514:	bl	12378 <coda_cursor_goto_first_record_field@plt>
   15518:	cmp	r0, #0
   1551c:	bne	15a64 <export_data_element_to_ascii@@Base+0xf74>
   15520:	ldr	r3, [sp, #60]	; 0x3c
   15524:	mov	r2, #0
   15528:	str	r2, [sp, #72]	; 0x48
   1552c:	cmp	r3, r2
   15530:	ble	152f0 <export_data_element_to_ascii@@Base+0x800>
   15534:	ldr	r3, [pc, #1660]	; 15bb8 <export_data_element_to_ascii@@Base+0x10c8>
   15538:	add	r8, sp, #80	; 0x50
   1553c:	mov	r1, sl
   15540:	ldr	r7, [pc, #1724]	; 15c04 <export_data_element_to_ascii@@Base+0x1114>
   15544:	ldr	r6, [pc, #1724]	; 15c08 <export_data_element_to_ascii@@Base+0x1118>
   15548:	ldr	fp, [pc, #1724]	; 15c0c <export_data_element_to_ascii@@Base+0x111c>
   1554c:	add	r7, pc, r7
   15550:	ldr	r9, [r9, r3]
   15554:	add	r6, pc, r6
   15558:	add	fp, pc, fp
   1555c:	mov	r2, r8
   15560:	ldr	r0, [sp, #64]	; 0x40
   15564:	bl	12600 <coda_type_get_record_field_name@plt>
   15568:	cmp	r0, #0
   1556c:	bne	1597c <export_data_element_to_ascii@@Base+0xe8c>
   15570:	mov	r0, r7
   15574:	ldr	r1, [sp, #80]	; 0x50
   15578:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   1557c:	ldr	r3, [r6]
   15580:	cmp	r3, #0
   15584:	bne	158d8 <export_data_element_to_ascii@@Base+0xde8>
   15588:	ldr	r0, [pc, #1664]	; 15c10 <export_data_element_to_ascii@@Base+0x1120>
   1558c:	add	r0, pc, r0
   15590:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   15594:	ldr	r2, [pc, #1656]	; 15c14 <export_data_element_to_ascii@@Base+0x1124>
   15598:	ldr	r1, [r9]
   1559c:	add	r2, pc, r2
   155a0:	ldr	r3, [r2]
   155a4:	cmp	r1, r5
   155a8:	movle	r0, #0
   155ac:	movgt	r0, #1
   155b0:	orrs	r1, r0, r1, lsr #31
   155b4:	add	r3, r3, #1
   155b8:	str	r3, [r2]
   155bc:	beq	15994 <export_data_element_to_ascii@@Base+0xea4>
   155c0:	add	r1, r5, #1
   155c4:	mov	r0, r4
   155c8:	bl	14e64 <export_data_element_to_ascii@@Base+0x374>
   155cc:	ldr	r0, [pc, #1604]	; 15c18 <export_data_element_to_ascii@@Base+0x1128>
   155d0:	ldr	r2, [sp, #60]	; 0x3c
   155d4:	ldr	r1, [sp, #72]	; 0x48
   155d8:	add	r0, pc, r0
   155dc:	ldr	r3, [r0]
   155e0:	sub	ip, r2, #1
   155e4:	cmp	ip, r1
   155e8:	sub	r3, r3, #1
   155ec:	str	r3, [r0]
   155f0:	bgt	15960 <export_data_element_to_ascii@@Base+0xe70>
   155f4:	add	r1, r1, #1
   155f8:	cmp	r1, r2
   155fc:	str	r1, [sp, #72]	; 0x48
   15600:	blt	1555c <export_data_element_to_ascii@@Base+0xa6c>
   15604:	b	152f0 <export_data_element_to_ascii@@Base+0x800>
   15608:	add	r1, sp, #104	; 0x68
   1560c:	mov	r0, r4
   15610:	bl	12594 <coda_cursor_get_bit_size@plt>
   15614:	cmp	r0, #0
   15618:	bne	15b20 <export_data_element_to_ascii@@Base+0x1030>
   1561c:	add	r5, sp, #112	; 0x70
   15620:	ldrd	r8, [r5, #-8]
   15624:	lsr	r2, r8, #3
   15628:	ands	r1, r8, #7
   1562c:	movne	r1, #1
   15630:	orr	r2, r2, r9, lsl #29
   15634:	adds	r6, r2, r1
   15638:	mov	r0, r6
   1563c:	bl	123b4 <malloc@plt>
   15640:	subs	sl, r0, #0
   15644:	beq	15b60 <export_data_element_to_ascii@@Base+0x1070>
   15648:	mov	r0, r4
   1564c:	mov	r1, sl
   15650:	strd	r8, [sp]
   15654:	mov	r2, #0
   15658:	mov	r3, #0
   1565c:	bl	12624 <coda_cursor_read_bits@plt>
   15660:	cmp	r0, #0
   15664:	bne	15b18 <export_data_element_to_ascii@@Base+0x1028>
   15668:	ldr	r0, [pc, #1452]	; 15c1c <export_data_element_to_ascii@@Base+0x112c>
   1566c:	add	r4, sp, #136	; 0x88
   15670:	add	r0, pc, r0
   15674:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   15678:	mov	r1, r6
   1567c:	mov	r0, sl
   15680:	bl	14c3c <export_data_element_to_ascii@@Base+0x14c>
   15684:	ldr	r0, [pc, #1428]	; 15c20 <export_data_element_to_ascii@@Base+0x1130>
   15688:	add	r0, pc, r0
   1568c:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   15690:	ldrd	r0, [r5, #-8]
   15694:	mov	r2, r4
   15698:	lsr	r0, r0, #3
   1569c:	orr	r0, r0, r1, lsl #29
   156a0:	asr	r1, r1, #3
   156a4:	bl	12630 <coda_str64@plt>
   156a8:	ldr	r0, [pc, #1396]	; 15c24 <export_data_element_to_ascii@@Base+0x1134>
   156ac:	mov	r1, r4
   156b0:	add	r0, pc, r0
   156b4:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   156b8:	ldr	r1, [r5, #-8]
   156bc:	mov	r3, #0
   156c0:	and	r2, r1, #7
   156c4:	orrs	r3, r2, r3
   156c8:	bne	15b04 <export_data_element_to_ascii@@Base+0x1014>
   156cc:	ldr	r0, [pc, #1364]	; 15c28 <export_data_element_to_ascii@@Base+0x1138>
   156d0:	add	r0, pc, r0
   156d4:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   156d8:	mov	r0, sl
   156dc:	add	sp, sp, #660	; 0x294
   156e0:	ldrd	r4, [sp]
   156e4:	ldrd	r6, [sp, #8]
   156e8:	ldrd	r8, [sp, #16]
   156ec:	ldrd	sl, [sp, #24]
   156f0:	ldr	lr, [sp, #32]
   156f4:	add	sp, sp, #36	; 0x24
   156f8:	b	1227c <free@plt>
   156fc:	mov	r0, r4
   15700:	add	r1, sp, #136	; 0x88
   15704:	bl	1242c <coda_cursor_read_double@plt>
   15708:	cmp	r0, #0
   1570c:	bne	15adc <export_data_element_to_ascii@@Base+0xfec>
   15710:	ldr	r1, [sp, #72]	; 0x48
   15714:	ldrd	r2, [sp, #136]	; 0x88
   15718:	cmp	r1, #8
   1571c:	beq	15acc <export_data_element_to_ascii@@Base+0xfdc>
   15720:	ldr	r0, [pc, #1284]	; 15c2c <export_data_element_to_ascii@@Base+0x113c>
   15724:	add	r0, pc, r0
   15728:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   1572c:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   15730:	mov	r0, r4
   15734:	add	r1, sp, #104	; 0x68
   15738:	bl	12420 <coda_cursor_read_uint64@plt>
   1573c:	cmp	r0, #0
   15740:	bne	15af4 <export_data_element_to_ascii@@Base+0x1004>
   15744:	add	r4, sp, #136	; 0x88
   15748:	ldrd	r0, [sp, #104]	; 0x68
   1574c:	mov	r2, r4
   15750:	bl	12270 <coda_str64u@plt>
   15754:	ldr	r0, [pc, #1236]	; 15c30 <export_data_element_to_ascii@@Base+0x1140>
   15758:	mov	r1, r4
   1575c:	add	r0, pc, r0
   15760:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   15764:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   15768:	mov	r0, r4
   1576c:	add	r1, sp, #104	; 0x68
   15770:	bl	12534 <coda_cursor_read_int64@plt>
   15774:	cmp	r0, #0
   15778:	bne	15afc <export_data_element_to_ascii@@Base+0x100c>
   1577c:	add	r4, sp, #136	; 0x88
   15780:	ldrd	r0, [sp, #104]	; 0x68
   15784:	mov	r2, r4
   15788:	bl	12630 <coda_str64@plt>
   1578c:	ldr	r0, [pc, #1184]	; 15c34 <export_data_element_to_ascii@@Base+0x1144>
   15790:	mov	r1, r4
   15794:	add	r0, pc, r0
   15798:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   1579c:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   157a0:	mov	r0, r4
   157a4:	add	r1, sp, #136	; 0x88
   157a8:	bl	122a0 <coda_cursor_read_uint32@plt>
   157ac:	cmp	r0, #0
   157b0:	bne	15aec <export_data_element_to_ascii@@Base+0xffc>
   157b4:	ldr	r0, [pc, #1148]	; 15c38 <export_data_element_to_ascii@@Base+0x1148>
   157b8:	ldr	r1, [sp, #136]	; 0x88
   157bc:	add	r0, pc, r0
   157c0:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   157c4:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   157c8:	ldr	r3, [sp, #80]	; 0x50
   157cc:	cmp	r3, #0
   157d0:	bne	15008 <export_data_element_to_ascii@@Base+0x518>
   157d4:	ldr	r3, [pc, #1120]	; 15c3c <export_data_element_to_ascii@@Base+0x114c>
   157d8:	mov	r2, #548	; 0x224
   157dc:	ldr	r1, [pc, #1116]	; 15c40 <export_data_element_to_ascii@@Base+0x1150>
   157e0:	ldr	r0, [pc, #1116]	; 15c44 <export_data_element_to_ascii@@Base+0x1154>
   157e4:	add	r3, pc, r3
   157e8:	add	r3, r3, #8
   157ec:	add	r1, pc, r1
   157f0:	add	r0, pc, r0
   157f4:	bl	1263c <__assert_fail@plt>
   157f8:	mov	r0, r4
   157fc:	add	r1, sp, #136	; 0x88
   15800:	bl	125c4 <coda_cursor_read_int32@plt>
   15804:	cmp	r0, #0
   15808:	bne	15ae4 <export_data_element_to_ascii@@Base+0xff4>
   1580c:	ldr	r0, [pc, #1076]	; 15c48 <export_data_element_to_ascii@@Base+0x1158>
   15810:	ldr	r1, [sp, #136]	; 0x88
   15814:	add	r0, pc, r0
   15818:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   1581c:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   15820:	bl	1a7c8 <handle_coda_error@@Base>
   15824:	b	15420 <export_data_element_to_ascii@@Base+0x930>
   15828:	bl	1a7c8 <handle_coda_error@@Base>
   1582c:	b	153f0 <export_data_element_to_ascii@@Base+0x900>
   15830:	bl	1a7c8 <handle_coda_error@@Base>
   15834:	b	153b0 <export_data_element_to_ascii@@Base+0x8c0>
   15838:	mov	r0, r4
   1583c:	bl	12450 <coda_cursor_goto_next_array_element@plt>
   15840:	cmp	r0, #0
   15844:	beq	152e0 <export_data_element_to_ascii@@Base+0x7f0>
   15848:	bl	1a7c8 <handle_coda_error@@Base>
   1584c:	b	152e0 <export_data_element_to_ascii@@Base+0x7f0>
   15850:	add	r1, sp, #72	; 0x48
   15854:	mov	r0, r4
   15858:	bl	125d0 <coda_cursor_get_file_bit_offset@plt>
   1585c:	cmp	r0, #0
   15860:	bne	159b4 <export_data_element_to_ascii@@Base+0xec4>
   15864:	ldrd	r2, [sp, #72]	; 0x48
   15868:	add	r6, sp, #80	; 0x50
   1586c:	cmp	r2, #0
   15870:	sbcs	r1, r3, #0
   15874:	blt	15208 <export_data_element_to_ascii@@Base+0x718>
   15878:	strd	r2, [sp, #32]
   1587c:	lsr	r0, r2, #3
   15880:	mov	r2, r6
   15884:	ldr	r3, [sp, #36]	; 0x24
   15888:	asr	r1, r3, #3
   1588c:	orr	r0, r0, r3, lsl #29
   15890:	bl	12630 <coda_str64@plt>
   15894:	ldr	r0, [pc, #944]	; 15c4c <export_data_element_to_ascii@@Base+0x115c>
   15898:	mov	r1, r6
   1589c:	add	r0, pc, r0
   158a0:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   158a4:	ldr	r1, [r6, #-8]
   158a8:	and	r3, r1, #7
   158ac:	str	r3, [sp, #40]	; 0x28
   158b0:	mov	r3, #0
   158b4:	str	r3, [sp, #44]	; 0x2c
   158b8:	ldrd	r2, [sp, #40]	; 0x28
   158bc:	orrs	r3, r2, r3
   158c0:	beq	15208 <export_data_element_to_ascii@@Base+0x718>
   158c4:	ldr	r0, [pc, #900]	; 15c50 <export_data_element_to_ascii@@Base+0x1160>
   158c8:	and	r1, r1, #7
   158cc:	add	r0, pc, r0
   158d0:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   158d4:	b	15208 <export_data_element_to_ascii@@Base+0x718>
   158d8:	add	r1, sp, #104	; 0x68
   158dc:	mov	r0, r4
   158e0:	bl	125d0 <coda_cursor_get_file_bit_offset@plt>
   158e4:	cmp	r0, #0
   158e8:	bne	159c4 <export_data_element_to_ascii@@Base+0xed4>
   158ec:	ldrd	r2, [sp, #104]	; 0x68
   158f0:	add	sl, sp, #112	; 0x70
   158f4:	cmp	r2, #0
   158f8:	sbcs	r1, r3, #0
   158fc:	blt	15588 <export_data_element_to_ascii@@Base+0xa98>
   15900:	lsr	r0, r2, #3
   15904:	asr	r1, r3, #3
   15908:	orr	r0, r0, r3, lsl #29
   1590c:	add	r3, sp, #136	; 0x88
   15910:	mov	r2, r3
   15914:	str	r3, [sp, #20]
   15918:	bl	12630 <coda_str64@plt>
   1591c:	ldr	r3, [sp, #20]
   15920:	mov	r0, fp
   15924:	mov	r1, r3
   15928:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   1592c:	ldr	r1, [sl, #-8]
   15930:	and	r3, r1, #7
   15934:	str	r3, [sp, #8]
   15938:	mov	r3, #0
   1593c:	str	r3, [sp, #12]
   15940:	ldrd	r2, [sp, #8]
   15944:	orrs	r3, r2, r3
   15948:	beq	15588 <export_data_element_to_ascii@@Base+0xa98>
   1594c:	ldr	r0, [pc, #768]	; 15c54 <export_data_element_to_ascii@@Base+0x1164>
   15950:	and	r1, r1, #7
   15954:	add	r0, pc, r0
   15958:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   1595c:	b	15588 <export_data_element_to_ascii@@Base+0xa98>
   15960:	mov	r0, r4
   15964:	bl	12570 <coda_cursor_goto_next_record_field@plt>
   15968:	cmp	r0, #0
   1596c:	bne	159cc <export_data_element_to_ascii@@Base+0xedc>
   15970:	ldr	r2, [sp, #60]	; 0x3c
   15974:	ldr	r1, [sp, #72]	; 0x48
   15978:	b	155f4 <export_data_element_to_ascii@@Base+0xb04>
   1597c:	bl	1a7c8 <handle_coda_error@@Base>
   15980:	b	15570 <export_data_element_to_ascii@@Base+0xa80>
   15984:	ldr	r0, [pc, #716]	; 15c58 <export_data_element_to_ascii@@Base+0x1168>
   15988:	add	r0, pc, r0
   1598c:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   15990:	b	1524c <export_data_element_to_ascii@@Base+0x75c>
   15994:	ldr	r0, [pc, #704]	; 15c5c <export_data_element_to_ascii@@Base+0x116c>
   15998:	add	r0, pc, r0
   1599c:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   159a0:	b	155cc <export_data_element_to_ascii@@Base+0xadc>
   159a4:	bl	1a7c8 <handle_coda_error@@Base>
   159a8:	b	14f30 <export_data_element_to_ascii@@Base+0x440>
   159ac:	bl	1a7c8 <handle_coda_error@@Base>
   159b0:	b	14f1c <export_data_element_to_ascii@@Base+0x42c>
   159b4:	bl	1a7c8 <handle_coda_error@@Base>
   159b8:	b	15864 <export_data_element_to_ascii@@Base+0xd74>
   159bc:	bl	1a7c8 <handle_coda_error@@Base>
   159c0:	b	15154 <export_data_element_to_ascii@@Base+0x664>
   159c4:	bl	1a7c8 <handle_coda_error@@Base>
   159c8:	b	158ec <export_data_element_to_ascii@@Base+0xdfc>
   159cc:	bl	1a7c8 <handle_coda_error@@Base>
   159d0:	b	15970 <export_data_element_to_ascii@@Base+0xe80>
   159d4:	add	r1, sp, #104	; 0x68
   159d8:	mov	r0, r4
   159dc:	bl	125d0 <coda_cursor_get_file_bit_offset@plt>
   159e0:	cmp	r0, #0
   159e4:	bne	15b58 <export_data_element_to_ascii@@Base+0x1068>
   159e8:	ldrd	r2, [sp, #104]	; 0x68
   159ec:	add	r6, sp, #112	; 0x70
   159f0:	cmp	r2, #0
   159f4:	sbcs	r1, r3, #0
   159f8:	blt	14fa0 <export_data_element_to_ascii@@Base+0x4b0>
   159fc:	lsr	r0, r2, #3
   15a00:	add	r7, sp, #136	; 0x88
   15a04:	asr	r1, r3, #3
   15a08:	mov	r2, r7
   15a0c:	orr	r0, r0, r3, lsl #29
   15a10:	bl	12630 <coda_str64@plt>
   15a14:	ldr	r0, [pc, #580]	; 15c60 <export_data_element_to_ascii@@Base+0x1170>
   15a18:	mov	r1, r7
   15a1c:	add	r0, pc, r0
   15a20:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   15a24:	ldr	r1, [r6, #-8]
   15a28:	mov	r3, #0
   15a2c:	and	r2, r1, #7
   15a30:	orrs	r3, r2, r3
   15a34:	beq	14fa0 <export_data_element_to_ascii@@Base+0x4b0>
   15a38:	ldr	r0, [pc, #548]	; 15c64 <export_data_element_to_ascii@@Base+0x1174>
   15a3c:	mov	r1, r2
   15a40:	add	r0, pc, r0
   15a44:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   15a48:	b	14fa0 <export_data_element_to_ascii@@Base+0x4b0>
   15a4c:	bl	1a7c8 <handle_coda_error@@Base>
   15a50:	b	14f7c <export_data_element_to_ascii@@Base+0x48c>
   15a54:	bl	1a7c8 <handle_coda_error@@Base>
   15a58:	b	14f68 <export_data_element_to_ascii@@Base+0x478>
   15a5c:	bl	1a7c8 <handle_coda_error@@Base>
   15a60:	b	14f50 <export_data_element_to_ascii@@Base+0x460>
   15a64:	bl	1a7c8 <handle_coda_error@@Base>
   15a68:	b	15520 <export_data_element_to_ascii@@Base+0xa30>
   15a6c:	bl	1a7c8 <handle_coda_error@@Base>
   15a70:	b	154fc <export_data_element_to_ascii@@Base+0xa0c>
   15a74:	bl	1a7c8 <handle_coda_error@@Base>
   15a78:	b	154a4 <export_data_element_to_ascii@@Base+0x9b4>
   15a7c:	bl	1a7c8 <handle_coda_error@@Base>
   15a80:	b	15474 <export_data_element_to_ascii@@Base+0x984>
   15a84:	mov	r7, #1
   15a88:	b	15144 <export_data_element_to_ascii@@Base+0x654>
   15a8c:	movw	r1, #410	; 0x19a
   15a90:	ldr	r3, [pc, #464]	; 15c68 <export_data_element_to_ascii@@Base+0x1178>
   15a94:	mvn	r0, #0
   15a98:	str	r1, [sp]
   15a9c:	ldr	r1, [pc, #456]	; 15c6c <export_data_element_to_ascii@@Base+0x117c>
   15aa0:	ldr	r2, [sp, #136]	; 0x88
   15aa4:	add	r3, pc, r3
   15aa8:	add	r1, pc, r1
   15aac:	add	r2, r2, #1
   15ab0:	bl	12234 <coda_set_error@plt>
   15ab4:	bl	1a7c8 <handle_coda_error@@Base>
   15ab8:	b	15404 <export_data_element_to_ascii@@Base+0x914>
   15abc:	ldr	r0, [pc, #428]	; 15c70 <export_data_element_to_ascii@@Base+0x1180>
   15ac0:	add	r0, pc, r0
   15ac4:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   15ac8:	b	14fec <export_data_element_to_ascii@@Base+0x4fc>
   15acc:	ldr	r0, [pc, #416]	; 15c74 <export_data_element_to_ascii@@Base+0x1184>
   15ad0:	add	r0, pc, r0
   15ad4:	bl	14d90 <export_data_element_to_ascii@@Base+0x2a0>
   15ad8:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   15adc:	bl	1a7c8 <handle_coda_error@@Base>
   15ae0:	b	15710 <export_data_element_to_ascii@@Base+0xc20>
   15ae4:	bl	1a7c8 <handle_coda_error@@Base>
   15ae8:	b	1580c <export_data_element_to_ascii@@Base+0xd1c>
   15aec:	bl	1a7c8 <handle_coda_error@@Base>
   15af0:	b	157b4 <export_data_element_to_ascii@@Base+0xcc4>
   15af4:	bl	1a7c8 <handle_coda_error@@Base>
   15af8:	b	15744 <export_data_element_to_ascii@@Base+0xc54>
   15afc:	bl	1a7c8 <handle_coda_error@@Base>
   15b00:	b	1577c <export_data_element_to_ascii@@Base+0xc8c>
   15b04:	ldr	r0, [pc, #364]	; 15c78 <export_data_element_to_ascii@@Base+0x1188>
   15b08:	mov	r1, r2
   15b0c:	add	r0, pc, r0
   15b10:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   15b14:	b	156cc <export_data_element_to_ascii@@Base+0xbdc>
   15b18:	bl	1a7c8 <handle_coda_error@@Base>
   15b1c:	b	15668 <export_data_element_to_ascii@@Base+0xb78>
   15b20:	bl	1a7c8 <handle_coda_error@@Base>
   15b24:	b	1561c <export_data_element_to_ascii@@Base+0xb2c>
   15b28:	ldr	r0, [pc, #332]	; 15c7c <export_data_element_to_ascii@@Base+0x118c>
   15b2c:	add	r4, sp, #136	; 0x88
   15b30:	mov	r1, r4
   15b34:	vldr	d0, [sp, #104]	; 0x68
   15b38:	add	r0, pc, r0
   15b3c:	bl	12258 <coda_time_double_to_string@plt>
   15b40:	cmp	r0, #0
   15b44:	beq	15b90 <export_data_element_to_ascii@@Base+0x10a0>
   15b48:	ldr	r0, [pc, #304]	; 15c80 <export_data_element_to_ascii@@Base+0x1190>
   15b4c:	add	r0, pc, r0
   15b50:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   15b54:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   15b58:	bl	1a7c8 <handle_coda_error@@Base>
   15b5c:	b	159e8 <export_data_element_to_ascii@@Base+0xef8>
   15b60:	movw	r1, #447	; 0x1bf
   15b64:	ldr	r3, [pc, #280]	; 15c84 <export_data_element_to_ascii@@Base+0x1194>
   15b68:	mov	r2, r6
   15b6c:	mvn	r0, #0
   15b70:	str	r1, [sp]
   15b74:	ldr	r1, [pc, #268]	; 15c88 <export_data_element_to_ascii@@Base+0x1198>
   15b78:	add	r3, pc, r3
   15b7c:	add	r1, pc, r1
   15b80:	bl	12234 <coda_set_error@plt>
   15b84:	bl	1a7c8 <handle_coda_error@@Base>
   15b88:	ldrd	r8, [r5, #-8]
   15b8c:	b	15648 <export_data_element_to_ascii@@Base+0xb58>
   15b90:	ldr	r0, [pc, #244]	; 15c8c <export_data_element_to_ascii@@Base+0x119c>
   15b94:	mov	r1, r4
   15b98:	add	r0, pc, r0
   15b9c:	bl	14bf0 <export_data_element_to_ascii@@Base+0x100>
   15ba0:	b	15008 <export_data_element_to_ascii@@Base+0x518>
   15ba4:	andeq	r8, r1, r4, ror #2
   15ba8:	strdeq	r5, [r0], -r0
   15bac:	andeq	r8, r1, r4, ror #4
   15bb0:	andeq	r7, r0, r0, asr r4
   15bb4:	andeq	r8, r1, r0, asr r2
   15bb8:	andeq	r0, r0, r0, ror #3
   15bbc:	andeq	r8, r1, r0, lsl r2
   15bc0:	andeq	r8, r1, r0, asr #3
   15bc4:	andeq	r5, r0, ip, lsl ip
   15bc8:	andeq	r5, r0, r0, asr #24
   15bcc:	andeq	r5, r0, r8, lsr #22
   15bd0:	andeq	r5, r0, r4, lsr #22
   15bd4:	strdeq	r5, [r0], -r0
   15bd8:	andeq	r6, r0, ip, ror #28
   15bdc:	strdeq	r7, [r1], -ip
   15be0:	andeq	r7, r0, r8, ror #3
   15be4:	andeq	r7, r1, r8, ror #31
   15be8:			; <UNDEFINED> instruction: 0x00017fb0
   15bec:	andeq	r5, r0, r0, ror #27
   15bf0:	andeq	r5, r0, r8, asr r8
   15bf4:	andeq	r5, r0, r0, lsr #17
   15bf8:	andeq	r5, r0, r0, lsr r8
   15bfc:	andeq	r6, r0, r8, lsl pc
   15c00:	ldrdeq	r5, [r0], -r4
   15c04:	andeq	r5, r0, r8, lsr #14
   15c08:	andeq	r7, r1, r0, lsr #25
   15c0c:	andeq	r5, r0, r4, lsr #14
   15c10:	andeq	r6, r0, r8, ror #28
   15c14:	andeq	r7, r1, r8, ror #24
   15c18:	andeq	r7, r1, ip, lsr #24
   15c1c:	muleq	r0, r4, fp
   15c20:	andeq	r5, r0, r0, lsr #12
   15c24:	andeq	r5, r0, r4, lsl #12
   15c28:	andeq	r5, r0, r8, ror #11
   15c2c:			; <UNDEFINED> instruction: 0x000055b4
   15c30:	andeq	r5, r0, r0, ror r5
   15c34:	andeq	r5, r0, r8, lsr r5
   15c38:	andeq	r5, r0, r8, lsl #10
   15c3c:	strdeq	r5, [r0], -r8
   15c40:	andeq	r5, r0, r8, lsl #8
   15c44:	strdeq	r5, [r0], -r0
   15c48:	andeq	r5, r0, r8, lsr #9
   15c4c:	andeq	r5, r0, r0, ror #7
   15c50:			; <UNDEFINED> instruction: 0x000053b4
   15c54:	andeq	r5, r0, ip, lsr #6
   15c58:	strdeq	r5, [r0], -ip
   15c5c:	andeq	r5, r0, ip, ror #5
   15c60:	andeq	r5, r0, r0, ror #4
   15c64:	andeq	r5, r0, r0, asr #4
   15c68:	andeq	r5, r0, r0, asr r1
   15c6c:	andeq	r5, r0, r8, ror r0
   15c70:	andeq	r5, r0, r4, asr #3
   15c74:	andeq	r5, r0, r0, lsl #4
   15c78:	andeq	r5, r0, r4, ror r1
   15c7c:	andeq	r5, r0, r4, rrx
   15c80:			; <UNDEFINED> instruction: 0x000051b8
   15c84:	andeq	r5, r0, ip, ror r0
   15c88:	andeq	r4, r0, r4, lsr #31
   15c8c:	andeq	r6, r0, r8, lsr #14

00015c90 <print_debug_data@@Base>:
   15c90:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15c94:	ldr	r4, [pc, #380]	; 15e18 <print_debug_data@@Base+0x188>
   15c98:	strd	r6, [sp, #8]
   15c9c:	subs	r7, r0, #0
   15ca0:	ldr	r3, [pc, #372]	; 15e1c <print_debug_data@@Base+0x18c>
   15ca4:	strd	r8, [sp, #16]
   15ca8:	mov	r8, r1
   15cac:	mov	r9, r2
   15cb0:	str	lr, [sp, #24]
   15cb4:	sub	sp, sp, #540	; 0x21c
   15cb8:	add	r4, pc, r4
   15cbc:	add	r5, sp, #8
   15cc0:	ldr	r6, [r4, r3]
   15cc4:	ldr	r0, [r6]
   15cc8:	beq	15db0 <print_debug_data@@Base+0x120>
   15ccc:	mov	r3, r2
   15cd0:	mov	r2, r1
   15cd4:	str	r5, [sp]
   15cd8:	mov	r1, r7
   15cdc:	bl	1245c <coda_open_as@plt>
   15ce0:	cmp	r0, #0
   15ce4:	bne	15d98 <print_debug_data@@Base+0x108>
   15ce8:	add	r1, sp, #12
   15cec:	ldr	r0, [sp, #8]
   15cf0:	bl	12324 <coda_get_product_format@plt>
   15cf4:	cmp	r0, #0
   15cf8:	bne	15d90 <print_debug_data@@Base+0x100>
   15cfc:	ldr	r2, [pc, #284]	; 15e20 <print_debug_data@@Base+0x190>
   15d00:	add	r5, sp, #16
   15d04:	mov	r0, r5
   15d08:	ldr	r3, [sp, #12]
   15d0c:	ldr	r1, [sp, #8]
   15d10:	add	r2, pc, r2
   15d14:	cmp	r3, #2
   15d18:	movhi	r3, #0
   15d1c:	movls	r3, #1
   15d20:	str	r3, [r2]
   15d24:	bl	1236c <coda_cursor_set_product@plt>
   15d28:	cmp	r0, #0
   15d2c:	bne	15d88 <print_debug_data@@Base+0xf8>
   15d30:	ldr	r3, [pc, #236]	; 15e24 <print_debug_data@@Base+0x194>
   15d34:	ldr	r3, [r4, r3]
   15d38:	ldr	r1, [r3]
   15d3c:	cmp	r1, #0
   15d40:	beq	15d54 <print_debug_data@@Base+0xc4>
   15d44:	mov	r0, r5
   15d48:	bl	1254c <coda_cursor_goto@plt>
   15d4c:	cmp	r0, #0
   15d50:	bne	15dbc <print_debug_data@@Base+0x12c>
   15d54:	mov	r0, #0
   15d58:	bl	121e0 <coda_set_option_perform_boundary_checks@plt>
   15d5c:	mov	r0, r5
   15d60:	mov	r1, #0
   15d64:	bl	14e64 <export_data_element_to_ascii@@Base+0x374>
   15d68:	ldr	r0, [sp, #8]
   15d6c:	bl	12528 <coda_close@plt>
   15d70:	add	sp, sp, #540	; 0x21c
   15d74:	ldrd	r4, [sp]
   15d78:	ldrd	r6, [sp, #8]
   15d7c:	ldrd	r8, [sp, #16]
   15d80:	add	sp, sp, #24
   15d84:	pop	{pc}		; (ldr pc, [sp], #4)
   15d88:	bl	1a7c8 <handle_coda_error@@Base>
   15d8c:	b	15d30 <print_debug_data@@Base+0xa0>
   15d90:	bl	1a7c8 <handle_coda_error@@Base>
   15d94:	b	15cfc <print_debug_data@@Base+0x6c>
   15d98:	bl	125e8 <coda_get_errno@plt>
   15d9c:	ldr	r3, [r0]
   15da0:	cmn	r3, #21
   15da4:	beq	15dc4 <print_debug_data@@Base+0x134>
   15da8:	bl	1a7c8 <handle_coda_error@@Base>
   15dac:	b	15ce8 <print_debug_data@@Base+0x58>
   15db0:	mov	r1, r5
   15db4:	bl	12240 <coda_open@plt>
   15db8:	b	15ce0 <print_debug_data@@Base+0x50>
   15dbc:	bl	1a7c8 <handle_coda_error@@Base>
   15dc0:	b	15d54 <print_debug_data@@Base+0xc4>
   15dc4:	mov	r0, #0
   15dc8:	bl	12288 <coda_set_option_use_mmap@plt>
   15dcc:	cmp	r7, #0
   15dd0:	beq	15e04 <print_debug_data@@Base+0x174>
   15dd4:	mov	r3, r9
   15dd8:	mov	r2, r8
   15ddc:	ldr	r0, [r6]
   15de0:	mov	r1, r7
   15de4:	str	r5, [sp]
   15de8:	bl	1245c <coda_open_as@plt>
   15dec:	mov	r5, r0
   15df0:	mov	r0, #1
   15df4:	bl	12288 <coda_set_option_use_mmap@plt>
   15df8:	cmp	r5, #0
   15dfc:	bne	15da8 <print_debug_data@@Base+0x118>
   15e00:	b	15ce8 <print_debug_data@@Base+0x58>
   15e04:	mov	r1, r5
   15e08:	ldr	r0, [r6]
   15e0c:	bl	12240 <coda_open@plt>
   15e10:	mov	r5, r0
   15e14:	b	15df0 <print_debug_data@@Base+0x160>
   15e18:	andeq	r7, r1, r0, asr #6
   15e1c:			; <UNDEFINED> instruction: 0x000001b4
   15e20:	andeq	r7, r1, r4, ror #9
   15e24:	ldrdeq	r0, [r0], -r8
   15e28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e2c:	mov	r5, r1
   15e30:	ldr	r3, [pc, #652]	; 160c4 <print_debug_data@@Base+0x434>
   15e34:	strd	sl, [sp, #24]
   15e38:	ldr	sl, [pc, #648]	; 160c8 <print_debug_data@@Base+0x438>
   15e3c:	strd	r6, [sp, #8]
   15e40:	mov	r7, r2
   15e44:	strd	r8, [sp, #16]
   15e48:	mov	r8, r0
   15e4c:	str	lr, [sp, #32]
   15e50:	sub	sp, sp, #12
   15e54:	mov	r1, sp
   15e58:	add	sl, pc, sl
   15e5c:	ldr	r6, [sl, r3]
   15e60:	add	r0, r6, #144	; 0x90
   15e64:	bl	1230c <coda_cursor_get_type_class@plt>
   15e68:	cmp	r0, #0
   15e6c:	bne	15fcc <print_debug_data@@Base+0x33c>
   15e70:	ldr	r3, [sp]
   15e74:	cmp	r3, #0
   15e78:	beq	15f48 <print_debug_data@@Base+0x2b8>
   15e7c:	cmp	r3, #1
   15e80:	bne	16084 <print_debug_data@@Base+0x3f4>
   15e84:	ldr	r2, [r6, #3360]	; 0xd20
   15e88:	lsl	ip, r5, #2
   15e8c:	add	r3, ip, r5
   15e90:	add	r3, r6, r3, lsl #4
   15e94:	cmp	r2, r5
   15e98:	ldr	r3, [r3, #800]	; 0x320
   15e9c:	ble	160a4 <print_debug_data@@Base+0x414>
   15ea0:	add	ip, ip, r5
   15ea4:	cmp	r5, #0
   15ea8:	add	ip, r6, ip, lsl #4
   15eac:	streq	r5, [r6, #844]	; 0x34c
   15eb0:	add	r5, r5, #1
   15eb4:	ldr	r1, [ip, #804]	; 0x324
   15eb8:	lsl	r9, r5, #2
   15ebc:	ldr	lr, [ip, #840]	; 0x348
   15ec0:	add	r0, r9, r5
   15ec4:	add	r0, r6, r0, lsl #4
   15ec8:	ldr	r2, [ip, #844]	; 0x34c
   15ecc:	mul	lr, lr, r2
   15ed0:	add	r2, r3, r1
   15ed4:	cmp	r2, r3
   15ed8:	str	lr, [r0, #844]	; 0x34c
   15edc:	ble	15fd4 <print_debug_data@@Base+0x344>
   15ee0:	ldr	r1, [pc, #484]	; 160cc <print_debug_data@@Base+0x43c>
   15ee4:	mov	r4, #1
   15ee8:	ldr	r1, [sl, r1]
   15eec:	add	r3, r1, r3, lsl #2
   15ef0:	add	r1, r1, r2, lsl #2
   15ef4:	ldr	r2, [r3, #72]	; 0x48
   15ef8:	add	r3, r3, #4
   15efc:	cmp	r2, #0
   15f00:	ldrne	r2, [r3, #104]	; 0x68
   15f04:	ldrne	r0, [ip, #844]	; 0x34c
   15f08:	ldreq	r2, [r3]
   15f0c:	ldrne	r2, [r2, r0, lsl #2]
   15f10:	cmp	r3, r1
   15f14:	mul	r4, r2, r4
   15f18:	bne	15ef4 <print_debug_data@@Base+0x264>
   15f1c:	cmp	r4, #0
   15f20:	bgt	15fd8 <print_debug_data@@Base+0x348>
   15f24:	mov	sl, #0
   15f28:	mov	r0, sl
   15f2c:	add	sp, sp, #12
   15f30:	ldrd	r4, [sp]
   15f34:	ldrd	r6, [sp, #8]
   15f38:	ldrd	r8, [sp, #16]
   15f3c:	ldrd	sl, [sp, #24]
   15f40:	add	sp, sp, #32
   15f44:	pop	{pc}		; (ldr pc, [sp], #4)
   15f48:	add	r4, r7, #872	; 0x368
   15f4c:	add	r2, sp, #4
   15f50:	add	r3, r6, r4, lsl #2
   15f54:	add	r0, r6, #144	; 0x90
   15f58:	ldr	r1, [r3, #4]
   15f5c:	bl	1221c <coda_cursor_get_record_field_available_status@plt>
   15f60:	cmp	r0, #0
   15f64:	bne	1605c <print_debug_data@@Base+0x3cc>
   15f68:	ldr	r3, [sp, #4]
   15f6c:	cmp	r3, #0
   15f70:	beq	15f24 <print_debug_data@@Base+0x294>
   15f74:	ldr	r3, [r6, #3748]	; 0xea4
   15f78:	sub	r3, r3, #1
   15f7c:	cmp	r3, r7
   15f80:	beq	15fc4 <print_debug_data@@Base+0x334>
   15f84:	add	r4, r6, r4, lsl #2
   15f88:	add	r0, r6, #144	; 0x90
   15f8c:	ldr	r1, [r4, #4]
   15f90:	bl	12384 <coda_cursor_goto_record_field_by_index@plt>
   15f94:	cmp	r0, #0
   15f98:	bne	1607c <print_debug_data@@Base+0x3ec>
   15f9c:	add	r2, r7, #1
   15fa0:	mov	r1, r5
   15fa4:	add	r0, r8, #1
   15fa8:	bl	15e28 <print_debug_data@@Base+0x198>
   15fac:	str	r0, [sp, #4]
   15fb0:	add	r0, r6, #144	; 0x90
   15fb4:	bl	123e4 <coda_cursor_goto_parent@plt>
   15fb8:	ldr	r3, [sp, #4]
   15fbc:	cmp	r3, #0
   15fc0:	beq	15f24 <print_debug_data@@Base+0x294>
   15fc4:	mov	sl, #1
   15fc8:	b	15f28 <print_debug_data@@Base+0x298>
   15fcc:	bl	1a7c8 <handle_coda_error@@Base>
   15fd0:	b	15e70 <print_debug_data@@Base+0x1e0>
   15fd4:	mov	r4, #1
   15fd8:	add	r0, r6, #144	; 0x90
   15fdc:	bl	12354 <coda_cursor_goto_first_array_element@plt>
   15fe0:	cmp	r0, #0
   15fe4:	bne	16054 <print_debug_data@@Base+0x3c4>
   15fe8:	add	r9, r9, r5
   15fec:	add	r8, r8, #1
   15ff0:	add	r9, r6, r9, lsl #4
   15ff4:	mov	fp, #0
   15ff8:	mov	r2, r7
   15ffc:	mov	r1, r5
   16000:	mov	r0, r8
   16004:	bl	15e28 <print_debug_data@@Base+0x198>
   16008:	subs	sl, r0, #0
   1600c:	bne	1606c <print_debug_data@@Base+0x3dc>
   16010:	sub	r3, r4, #1
   16014:	cmp	r3, fp
   16018:	bgt	16034 <print_debug_data@@Base+0x3a4>
   1601c:	add	fp, fp, #1
   16020:	cmp	r4, fp
   16024:	bgt	15ff8 <print_debug_data@@Base+0x368>
   16028:	add	r0, r6, #144	; 0x90
   1602c:	bl	123e4 <coda_cursor_goto_parent@plt>
   16030:	b	15f28 <print_debug_data@@Base+0x298>
   16034:	add	r0, r6, #144	; 0x90
   16038:	bl	12450 <coda_cursor_goto_next_array_element@plt>
   1603c:	cmp	r0, #0
   16040:	bne	16064 <print_debug_data@@Base+0x3d4>
   16044:	ldr	r3, [r9, #844]	; 0x34c
   16048:	add	r3, r3, #1
   1604c:	str	r3, [r9, #844]	; 0x34c
   16050:	b	1601c <print_debug_data@@Base+0x38c>
   16054:	bl	1a7c8 <handle_coda_error@@Base>
   16058:	b	15fe8 <print_debug_data@@Base+0x358>
   1605c:	bl	1a7c8 <handle_coda_error@@Base>
   16060:	b	15f68 <print_debug_data@@Base+0x2d8>
   16064:	bl	1a7c8 <handle_coda_error@@Base>
   16068:	b	16044 <print_debug_data@@Base+0x3b4>
   1606c:	add	r0, r6, #144	; 0x90
   16070:	mov	sl, #1
   16074:	bl	123e4 <coda_cursor_goto_parent@plt>
   16078:	b	15f28 <print_debug_data@@Base+0x298>
   1607c:	bl	1a7c8 <handle_coda_error@@Base>
   16080:	b	15f9c <print_debug_data@@Base+0x30c>
   16084:	ldr	r3, [pc, #68]	; 160d0 <print_debug_data@@Base+0x440>
   16088:	movw	r2, #729	; 0x2d9
   1608c:	ldr	r1, [pc, #64]	; 160d4 <print_debug_data@@Base+0x444>
   16090:	ldr	r0, [pc, #64]	; 160d8 <print_debug_data@@Base+0x448>
   16094:	add	r3, pc, r3
   16098:	add	r1, pc, r1
   1609c:	add	r0, pc, r0
   160a0:	bl	1263c <__assert_fail@plt>
   160a4:	ldr	r3, [pc, #48]	; 160dc <print_debug_data@@Base+0x44c>
   160a8:	movw	r2, #638	; 0x27e
   160ac:	ldr	r1, [pc, #44]	; 160e0 <print_debug_data@@Base+0x450>
   160b0:	ldr	r0, [pc, #44]	; 160e4 <print_debug_data@@Base+0x454>
   160b4:	add	r3, pc, r3
   160b8:	add	r1, pc, r1
   160bc:	add	r0, pc, r0
   160c0:	bl	1263c <__assert_fail@plt>
   160c4:			; <UNDEFINED> instruction: 0x000001b4
   160c8:	andeq	r7, r1, r0, lsr #3
   160cc:	andeq	r0, r0, r4, ror #3
   160d0:	muleq	r0, r8, ip
   160d4:	andeq	r4, r0, r8, lsl #26
   160d8:	andeq	r4, r0, r8, ror #28
   160dc:	andeq	r4, r0, r8, ror ip
   160e0:	andeq	r4, r0, r8, ror #25
   160e4:	andeq	r4, r0, r4, asr #26
   160e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   160ec:	strd	r6, [sp, #8]
   160f0:	mov	r6, r1
   160f4:	ldr	r7, [pc, #1176]	; 16594 <print_debug_data@@Base+0x904>
   160f8:	strd	r8, [sp, #16]
   160fc:	mov	r9, r0
   16100:	mov	r8, r2
   16104:	ldr	r3, [pc, #1164]	; 16598 <print_debug_data@@Base+0x908>
   16108:	strd	sl, [sp, #24]
   1610c:	str	lr, [sp, #32]
   16110:	sub	sp, sp, #44	; 0x2c
   16114:	add	r7, pc, r7
   16118:	mov	r1, sp
   1611c:	ldr	r5, [r7, r3]
   16120:	add	r0, r5, #144	; 0x90
   16124:	bl	1230c <coda_cursor_get_type_class@plt>
   16128:	cmp	r0, #0
   1612c:	bne	163a8 <print_debug_data@@Base+0x718>
   16130:	ldr	r3, [sp]
   16134:	cmp	r3, #5
   16138:	addls	pc, pc, r3, lsl #2
   1613c:	b	16504 <print_debug_data@@Base+0x874>
   16140:	b	16304 <print_debug_data@@Base+0x674>
   16144:	b	16210 <print_debug_data@@Base+0x580>
   16148:	b	16504 <print_debug_data@@Base+0x874>
   1614c:	b	16504 <print_debug_data@@Base+0x874>
   16150:	b	16158 <print_debug_data@@Base+0x4c8>
   16154:	b	16158 <print_debug_data@@Base+0x4c8>
   16158:	ldr	r2, [r5, #3360]	; 0xd20
   1615c:	cmp	r2, r6
   16160:	bne	1654c <print_debug_data@@Base+0x8bc>
   16164:	cmp	r3, #4
   16168:	beq	163d8 <print_debug_data@@Base+0x748>
   1616c:	add	r1, sp, #8
   16170:	add	r0, r5, #144	; 0x90
   16174:	bl	121a4 <coda_cursor_get_byte_size@plt>
   16178:	cmp	r0, #0
   1617c:	bne	163b0 <print_debug_data@@Base+0x720>
   16180:	ldrd	r2, [sp, #8]
   16184:	mov	ip, r2
   16188:	ldr	r1, [pc, #1036]	; 1659c <print_debug_data@@Base+0x90c>
   1618c:	add	r6, r6, r6, lsl #2
   16190:	add	r5, r5, r6, lsl #4
   16194:	ldr	r0, [r5, #800]	; 0x320
   16198:	ldr	r1, [r7, r1]
   1619c:	ldr	r5, [r5, #844]	; 0x34c
   161a0:	add	r4, r1, r0, lsl #2
   161a4:	mov	lr, r4
   161a8:	ldr	r4, [r4, #108]	; 0x6c
   161ac:	str	ip, [r4, r5, lsl #2]
   161b0:	ldr	r4, [lr, #4]
   161b4:	cmn	r4, #1
   161b8:	moveq	r1, lr
   161bc:	streq	ip, [lr, #4]
   161c0:	streq	ip, [r1, #36]	; 0x24
   161c4:	beq	161f4 <print_debug_data@@Base+0x564>
   161c8:	add	r0, r0, #8
   161cc:	asr	r5, r4, #31
   161d0:	cmp	r4, r2
   161d4:	add	r1, r1, r0, lsl #2
   161d8:	sbcs	r4, r5, r3
   161dc:	ldr	r4, [r1, #4]
   161e0:	strlt	ip, [lr, #4]
   161e4:	asr	r5, r4, #31
   161e8:	cmp	r2, r4
   161ec:	sbcs	r3, r3, r5
   161f0:	strlt	ip, [r1, #4]
   161f4:	add	sp, sp, #44	; 0x2c
   161f8:	ldrd	r4, [sp]
   161fc:	ldrd	r6, [sp, #8]
   16200:	ldrd	r8, [sp, #16]
   16204:	ldrd	sl, [sp, #24]
   16208:	add	sp, sp, #32
   1620c:	pop	{pc}		; (ldr pc, [sp], #4)
   16210:	ldr	r2, [r5, #3360]	; 0xd20
   16214:	lsl	sl, r6, #2
   16218:	add	r3, sl, r6
   1621c:	add	r3, r5, r3, lsl #4
   16220:	cmp	r2, r6
   16224:	ldr	r4, [r3, #800]	; 0x320
   16228:	beq	1643c <print_debug_data@@Base+0x7ac>
   1622c:	add	r0, sl, r6
   16230:	cmp	r6, #0
   16234:	add	r0, r5, r0, lsl #4
   16238:	streq	r6, [r5, #844]	; 0x34c
   1623c:	add	r6, r6, #1
   16240:	ldr	r1, [r0, #804]	; 0x324
   16244:	lsl	fp, r6, #2
   16248:	ldr	ip, [r0, #840]	; 0x348
   1624c:	add	r3, fp, r6
   16250:	add	r3, r5, r3, lsl #4
   16254:	ldr	r2, [r0, #844]	; 0x34c
   16258:	mul	ip, ip, r2
   1625c:	add	r2, r4, r1
   16260:	cmp	r4, r2
   16264:	str	ip, [r3, #844]	; 0x34c
   16268:	bge	16540 <print_debug_data@@Base+0x8b0>
   1626c:	ldr	r3, [pc, #808]	; 1659c <print_debug_data@@Base+0x90c>
   16270:	mov	sl, #1
   16274:	ldr	r1, [r7, r3]
   16278:	add	r3, r1, r4, lsl #2
   1627c:	add	r1, r1, r2, lsl #2
   16280:	ldr	r2, [r3, #72]	; 0x48
   16284:	add	r3, r3, #4
   16288:	cmp	r2, #0
   1628c:	ldrne	r2, [r3, #104]	; 0x68
   16290:	ldrne	ip, [r0, #844]	; 0x34c
   16294:	ldreq	r2, [r3]
   16298:	ldrne	r2, [r2, ip, lsl #2]
   1629c:	cmp	r3, r1
   162a0:	mul	sl, r2, sl
   162a4:	bne	16280 <print_debug_data@@Base+0x5f0>
   162a8:	cmp	sl, #0
   162ac:	subgt	r7, sl, #1
   162b0:	ble	161f4 <print_debug_data@@Base+0x564>
   162b4:	add	r0, r5, #144	; 0x90
   162b8:	bl	12354 <coda_cursor_goto_first_array_element@plt>
   162bc:	cmp	r0, #0
   162c0:	bne	16530 <print_debug_data@@Base+0x8a0>
   162c4:	add	fp, fp, r6
   162c8:	add	r9, r9, #1
   162cc:	add	fp, r5, fp, lsl #4
   162d0:	mov	r4, #0
   162d4:	mov	r2, r8
   162d8:	mov	r1, r6
   162dc:	mov	r0, r9
   162e0:	bl	160e8 <print_debug_data@@Base+0x458>
   162e4:	cmp	r4, r7
   162e8:	blt	163b8 <print_debug_data@@Base+0x728>
   162ec:	add	r4, r4, #1
   162f0:	cmp	sl, r4
   162f4:	bgt	162d4 <print_debug_data@@Base+0x644>
   162f8:	add	r0, r5, #144	; 0x90
   162fc:	bl	123e4 <coda_cursor_goto_parent@plt>
   16300:	b	161f4 <print_debug_data@@Base+0x564>
   16304:	add	r4, r8, #872	; 0x368
   16308:	add	r2, sp, #8
   1630c:	add	r3, r5, r4, lsl #2
   16310:	add	r0, r5, #144	; 0x90
   16314:	ldr	r1, [r3, #4]
   16318:	bl	1221c <coda_cursor_get_record_field_available_status@plt>
   1631c:	cmp	r0, #0
   16320:	bne	16434 <print_debug_data@@Base+0x7a4>
   16324:	ldr	r3, [sp, #8]
   16328:	cmp	r3, #0
   1632c:	bne	16400 <print_debug_data@@Base+0x770>
   16330:	ldr	r2, [r5, #3360]	; 0xd20
   16334:	add	r2, r2, r2, lsl #2
   16338:	lsl	r2, r2, #4
   1633c:	add	r0, r5, r2
   16340:	ldr	lr, [r0, #800]	; 0x320
   16344:	ldr	r1, [r0, #804]	; 0x324
   16348:	cmp	r1, #0
   1634c:	ble	161f4 <print_debug_data@@Base+0x564>
   16350:	ldr	r1, [pc, #580]	; 1659c <print_debug_data@@Base+0x90c>
   16354:	add	r2, r2, #804	; 0x324
   16358:	mov	ip, r3
   1635c:	add	r5, r5, r2
   16360:	ldr	r2, [r7, r1]
   16364:	add	r2, r2, lr, lsl #2
   16368:	ldr	r1, [r5, #4]!
   1636c:	cmn	r1, #1
   16370:	bne	16390 <print_debug_data@@Base+0x700>
   16374:	ldr	r1, [r2, #108]	; 0x6c
   16378:	ldr	lr, [r0, #844]	; 0x34c
   1637c:	str	ip, [r1, lr, lsl #2]
   16380:	ldr	r1, [r2, #4]
   16384:	str	ip, [r2, #36]	; 0x24
   16388:	cmn	r1, #1
   1638c:	streq	ip, [r2, #4]
   16390:	ldr	r1, [r0, #804]	; 0x324
   16394:	add	r3, r3, #1
   16398:	add	r2, r2, #4
   1639c:	cmp	r1, r3
   163a0:	bgt	16368 <print_debug_data@@Base+0x6d8>
   163a4:	b	161f4 <print_debug_data@@Base+0x564>
   163a8:	bl	1a7c8 <handle_coda_error@@Base>
   163ac:	b	16130 <print_debug_data@@Base+0x4a0>
   163b0:	bl	1a7c8 <handle_coda_error@@Base>
   163b4:	b	16180 <print_debug_data@@Base+0x4f0>
   163b8:	add	r0, r5, #144	; 0x90
   163bc:	bl	12450 <coda_cursor_goto_next_array_element@plt>
   163c0:	cmp	r0, #0
   163c4:	bne	164f4 <print_debug_data@@Base+0x864>
   163c8:	ldr	r3, [fp, #844]	; 0x34c
   163cc:	add	r3, r3, #1
   163d0:	str	r3, [fp, #844]	; 0x34c
   163d4:	b	162ec <print_debug_data@@Base+0x65c>
   163d8:	add	r1, sp, #4
   163dc:	add	r0, r5, #144	; 0x90
   163e0:	bl	12414 <coda_cursor_get_string_length@plt>
   163e4:	cmp	r0, #0
   163e8:	bne	16528 <print_debug_data@@Base+0x898>
   163ec:	ldr	ip, [sp, #4]
   163f0:	asr	r3, ip, #31
   163f4:	mov	r2, ip
   163f8:	strd	r2, [sp, #8]
   163fc:	b	16188 <print_debug_data@@Base+0x4f8>
   16400:	add	r4, r5, r4, lsl #2
   16404:	add	r0, r5, #144	; 0x90
   16408:	ldr	r1, [r4, #4]
   1640c:	bl	12384 <coda_cursor_goto_record_field_by_index@plt>
   16410:	cmp	r0, #0
   16414:	bne	16538 <print_debug_data@@Base+0x8a8>
   16418:	add	r0, r9, #1
   1641c:	add	r2, r8, #1
   16420:	mov	r1, r6
   16424:	bl	160e8 <print_debug_data@@Base+0x458>
   16428:	add	r0, r5, #144	; 0x90
   1642c:	bl	123e4 <coda_cursor_goto_parent@plt>
   16430:	b	161f4 <print_debug_data@@Base+0x564>
   16434:	bl	1a7c8 <handle_coda_error@@Base>
   16438:	b	16324 <print_debug_data@@Base+0x694>
   1643c:	add	r8, sp, #8
   16440:	add	r1, sp, #4
   16444:	mov	r2, r8
   16448:	add	r0, r5, #144	; 0x90
   1644c:	bl	12510 <coda_cursor_get_array_dim@plt>
   16450:	cmp	r0, #0
   16454:	bne	164fc <print_debug_data@@Base+0x86c>
   16458:	add	r6, sl, r6
   1645c:	ldr	r2, [sp, #4]
   16460:	lsl	r6, r6, #4
   16464:	add	ip, r5, r6
   16468:	ldr	r3, [ip, #804]	; 0x324
   1646c:	cmp	r3, r2
   16470:	bne	16570 <print_debug_data@@Base+0x8e0>
   16474:	cmp	r3, #0
   16478:	ble	161f4 <print_debug_data@@Base+0x564>
   1647c:	ldr	r3, [pc, #280]	; 1659c <print_debug_data@@Base+0x90c>
   16480:	add	r6, r6, #804	; 0x324
   16484:	mov	r2, #0
   16488:	add	r5, r5, r6
   1648c:	ldr	r3, [r7, r3]
   16490:	add	r3, r3, r4, lsl #2
   16494:	b	164ac <print_debug_data@@Base+0x81c>
   16498:	ldr	r1, [ip, #804]	; 0x324
   1649c:	add	r2, r2, #1
   164a0:	add	r3, r3, #4
   164a4:	cmp	r1, r2
   164a8:	ble	161f4 <print_debug_data@@Base+0x564>
   164ac:	ldr	r1, [r5, #4]!
   164b0:	cmn	r1, #1
   164b4:	bne	16498 <print_debug_data@@Base+0x808>
   164b8:	ldr	r1, [r8, r2, lsl #2]
   164bc:	ldr	r0, [r3, #108]	; 0x6c
   164c0:	ldr	lr, [ip, #844]	; 0x34c
   164c4:	str	r1, [r0, lr, lsl #2]
   164c8:	ldr	r0, [r3, #4]
   164cc:	cmn	r0, #1
   164d0:	streq	r1, [r3, #4]
   164d4:	streq	r1, [r3, #36]	; 0x24
   164d8:	beq	16498 <print_debug_data@@Base+0x808>
   164dc:	cmp	r1, r0
   164e0:	ldr	r0, [r3, #36]	; 0x24
   164e4:	strgt	r1, [r3, #4]
   164e8:	cmp	r1, r0
   164ec:	strlt	r1, [r3, #36]	; 0x24
   164f0:	b	16498 <print_debug_data@@Base+0x808>
   164f4:	bl	1a7c8 <handle_coda_error@@Base>
   164f8:	b	163c8 <print_debug_data@@Base+0x738>
   164fc:	bl	1a7c8 <handle_coda_error@@Base>
   16500:	b	16458 <print_debug_data@@Base+0x7c8>
   16504:	ldr	r3, [pc, #148]	; 165a0 <print_debug_data@@Base+0x910>
   16508:	movw	r2, #294	; 0x126
   1650c:	ldr	r1, [pc, #144]	; 165a4 <print_debug_data@@Base+0x914>
   16510:	ldr	r0, [pc, #144]	; 165a8 <print_debug_data@@Base+0x918>
   16514:	add	r3, pc, r3
   16518:	add	r3, r3, #36	; 0x24
   1651c:	add	r1, pc, r1
   16520:	add	r0, pc, r0
   16524:	bl	1263c <__assert_fail@plt>
   16528:	bl	1a7c8 <handle_coda_error@@Base>
   1652c:	b	163ec <print_debug_data@@Base+0x75c>
   16530:	bl	1a7c8 <handle_coda_error@@Base>
   16534:	b	162c4 <print_debug_data@@Base+0x634>
   16538:	bl	1a7c8 <handle_coda_error@@Base>
   1653c:	b	16418 <print_debug_data@@Base+0x788>
   16540:	mov	r7, #0
   16544:	mov	sl, #1
   16548:	b	162b4 <print_debug_data@@Base+0x624>
   1654c:	ldr	r3, [pc, #88]	; 165ac <print_debug_data@@Base+0x91c>
   16550:	mov	r2, #252	; 0xfc
   16554:	ldr	r1, [pc, #84]	; 165b0 <print_debug_data@@Base+0x920>
   16558:	ldr	r0, [pc, #84]	; 165b4 <print_debug_data@@Base+0x924>
   1655c:	add	r3, pc, r3
   16560:	add	r3, r3, #36	; 0x24
   16564:	add	r1, pc, r1
   16568:	add	r0, pc, r0
   1656c:	bl	1263c <__assert_fail@plt>
   16570:	ldr	r3, [pc, #64]	; 165b8 <print_debug_data@@Base+0x928>
   16574:	mov	r2, #125	; 0x7d
   16578:	ldr	r1, [pc, #60]	; 165bc <print_debug_data@@Base+0x92c>
   1657c:	ldr	r0, [pc, #60]	; 165c0 <print_debug_data@@Base+0x930>
   16580:	add	r3, pc, r3
   16584:	add	r3, r3, #36	; 0x24
   16588:	add	r1, pc, r1
   1658c:	add	r0, pc, r0
   16590:	bl	1263c <__assert_fail@plt>
   16594:	andeq	r6, r1, r4, ror #29
   16598:			; <UNDEFINED> instruction: 0x000001b4
   1659c:	andeq	r0, r0, r4, ror #3
   165a0:	andeq	r4, r0, r8, lsl r8
   165a4:	andeq	r4, r0, r4, lsl #17
   165a8:	andeq	r4, r0, r4, ror #19
   165ac:	ldrdeq	r4, [r0], -r0
   165b0:	andeq	r4, r0, ip, lsr r8
   165b4:	andeq	r4, r0, r4, ror #17
   165b8:	andeq	r4, r0, ip, lsr #15
   165bc:	andeq	r4, r0, r8, lsl r8
   165c0:	muleq	r0, ip, r8

000165c4 <dim_info_init@@Base>:
   165c4:	ldr	r3, [pc, #32]	; 165ec <dim_info_init@@Base+0x28>
   165c8:	mov	r2, #0
   165cc:	mvn	r1, #0
   165d0:	ldr	r0, [pc, #24]	; 165f0 <dim_info_init@@Base+0x2c>
   165d4:	add	r3, pc, r3
   165d8:	ldr	r3, [r3, r0]
   165dc:	str	r2, [r3]
   165e0:	str	r2, [r3, #68]	; 0x44
   165e4:	str	r1, [r3, #104]	; 0x68
   165e8:	bx	lr
   165ec:	andeq	r6, r1, r4, lsr #20
   165f0:	andeq	r0, r0, r4, ror #3

000165f4 <dim_info_done@@Base>:
   165f4:	bx	lr

000165f8 <print_all_distinct_dims@@Base>:
   165f8:	ldr	r3, [pc, #560]	; 16830 <print_all_distinct_dims@@Base+0x238>
   165fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16600:	ldr	r2, [pc, #556]	; 16834 <print_all_distinct_dims@@Base+0x23c>
   16604:	strd	r6, [sp, #8]
   16608:	strd	r8, [sp, #16]
   1660c:	add	r3, pc, r3
   16610:	strd	sl, [sp, #24]
   16614:	str	lr, [sp, #32]
   16618:	sub	sp, sp, #12
   1661c:	ldr	r5, [r3, r2]
   16620:	ldr	r3, [r5]
   16624:	cmp	r3, r0
   16628:	ble	1680c <print_all_distinct_dims@@Base+0x214>
   1662c:	add	r3, r0, #18
   16630:	mov	r9, r0
   16634:	ldr	r3, [r5, r3, lsl #2]
   16638:	cmp	r3, #0
   1663c:	bne	1665c <print_all_distinct_dims@@Base+0x64>
   16640:	add	sp, sp, #12
   16644:	ldrd	r4, [sp]
   16648:	ldrd	r6, [sp, #8]
   1664c:	ldrd	r8, [sp, #16]
   16650:	ldrd	sl, [sp, #24]
   16654:	add	sp, sp, #32
   16658:	pop	{pc}		; (ldr pc, [sp], #4)
   1665c:	lsl	r7, r0, #2
   16660:	add	r8, r5, r7
   16664:	ldr	r4, [r8, #4]
   16668:	add	r4, r4, #1
   1666c:	lsl	r4, r4, #2
   16670:	mov	r0, r4
   16674:	bl	123b4 <malloc@plt>
   16678:	subs	r6, r0, #0
   1667c:	beq	167d4 <print_all_distinct_dims@@Base+0x1dc>
   16680:	mov	r1, #0
   16684:	mov	r2, r4
   16688:	mov	r0, r6
   1668c:	bl	12498 <memset@plt>
   16690:	add	r3, r5, r9, lsl #2
   16694:	ldr	r3, [r3, #140]	; 0x8c
   16698:	add	r3, r5, r3, lsl #3
   1669c:	ldrd	r0, [r3, #232]	; 0xe8
   166a0:	cmp	r0, #1
   166a4:	sbcs	r3, r1, #0
   166a8:	blt	166d8 <print_all_distinct_dims@@Base+0xe0>
   166ac:	add	r3, r5, r9, lsl #2
   166b0:	ldr	r3, [r3, #108]	; 0x6c
   166b4:	add	r0, r3, r0, lsl #2
   166b8:	ldr	r2, [r3], #4
   166bc:	cmp	r2, #0
   166c0:	blt	166d0 <print_all_distinct_dims@@Base+0xd8>
   166c4:	ldr	r1, [r6, r2, lsl #2]
   166c8:	add	r1, r1, #1
   166cc:	str	r1, [r6, r2, lsl #2]
   166d0:	cmp	r0, r3
   166d4:	bne	166b8 <print_all_distinct_dims@@Base+0xc0>
   166d8:	ldr	r0, [pc, #344]	; 16838 <print_all_distinct_dims@@Base+0x240>
   166dc:	add	r1, r9, #1
   166e0:	add	r9, r9, #8
   166e4:	add	fp, r5, r7
   166e8:	add	r0, pc, r0
   166ec:	bl	12210 <printf@plt>
   166f0:	add	r3, r5, r9, lsl #2
   166f4:	ldr	r1, [fp, #4]
   166f8:	ldr	r4, [r3, #4]
   166fc:	cmp	r4, r1
   16700:	bge	16738 <print_all_distinct_dims@@Base+0x140>
   16704:	ldr	sl, [pc, #304]	; 1683c <print_all_distinct_dims@@Base+0x244>
   16708:	add	r8, r6, r4, lsl #2
   1670c:	add	sl, pc, sl
   16710:	ldr	r3, [r8], #4
   16714:	cmp	r3, #0
   16718:	ble	16728 <print_all_distinct_dims@@Base+0x130>
   1671c:	mov	r1, r4
   16720:	mov	r0, sl
   16724:	bl	12210 <printf@plt>
   16728:	ldr	r1, [fp, #4]
   1672c:	add	r4, r4, #1
   16730:	cmp	r1, r4
   16734:	bgt	16710 <print_all_distinct_dims@@Base+0x118>
   16738:	ldr	r0, [pc, #256]	; 16840 <print_all_distinct_dims@@Base+0x248>
   1673c:	add	r9, r5, r9, lsl #2
   16740:	add	r5, r5, r7
   16744:	add	r0, pc, r0
   16748:	bl	12210 <printf@plt>
   1674c:	ldr	r0, [pc, #240]	; 16844 <print_all_distinct_dims@@Base+0x24c>
   16750:	add	r0, pc, r0
   16754:	bl	12210 <printf@plt>
   16758:	ldr	r3, [r5, #4]
   1675c:	ldr	r4, [r9, #4]
   16760:	cmp	r4, r3
   16764:	bge	16798 <print_all_distinct_dims@@Base+0x1a0>
   16768:	ldr	r8, [pc, #216]	; 16848 <print_all_distinct_dims@@Base+0x250>
   1676c:	add	r7, r6, r4, lsl #2
   16770:	add	r8, pc, r8
   16774:	ldr	r1, [r7], #4
   16778:	cmp	r1, #0
   1677c:	ble	16788 <print_all_distinct_dims@@Base+0x190>
   16780:	mov	r0, r8
   16784:	bl	12210 <printf@plt>
   16788:	ldr	r3, [r5, #4]
   1678c:	add	r4, r4, #1
   16790:	cmp	r3, r4
   16794:	bgt	16774 <print_all_distinct_dims@@Base+0x17c>
   16798:	ldr	r0, [pc, #172]	; 1684c <print_all_distinct_dims@@Base+0x254>
   1679c:	ldr	r1, [r6, r3, lsl #2]
   167a0:	add	r0, pc, r0
   167a4:	bl	12210 <printf@plt>
   167a8:	mov	r0, #10
   167ac:	bl	124a4 <putchar@plt>
   167b0:	mov	r0, r6
   167b4:	add	sp, sp, #12
   167b8:	ldrd	r4, [sp]
   167bc:	ldrd	r6, [sp, #8]
   167c0:	ldrd	r8, [sp, #16]
   167c4:	ldrd	sl, [sp, #24]
   167c8:	ldr	lr, [sp, #32]
   167cc:	add	sp, sp, #36	; 0x24
   167d0:	b	1227c <free@plt>
   167d4:	mov	r1, #61	; 0x3d
   167d8:	ldr	r3, [pc, #112]	; 16850 <print_all_distinct_dims@@Base+0x258>
   167dc:	mov	r2, r4
   167e0:	mvn	r0, #0
   167e4:	str	r1, [sp]
   167e8:	ldr	r1, [pc, #100]	; 16854 <print_all_distinct_dims@@Base+0x25c>
   167ec:	add	r3, pc, r3
   167f0:	add	r1, pc, r1
   167f4:	bl	12234 <coda_set_error@plt>
   167f8:	bl	1a7c8 <handle_coda_error@@Base>
   167fc:	ldr	r4, [r8, #4]
   16800:	add	r4, r4, #1
   16804:	lsl	r4, r4, #2
   16808:	b	16680 <print_all_distinct_dims@@Base+0x88>
   1680c:	ldr	r3, [pc, #68]	; 16858 <print_all_distinct_dims@@Base+0x260>
   16810:	mov	r2, #50	; 0x32
   16814:	ldr	r1, [pc, #64]	; 1685c <print_all_distinct_dims@@Base+0x264>
   16818:	ldr	r0, [pc, #64]	; 16860 <print_all_distinct_dims@@Base+0x268>
   1681c:	add	r3, pc, r3
   16820:	add	r3, r3, #60	; 0x3c
   16824:	add	r1, pc, r1
   16828:	add	r0, pc, r0
   1682c:	bl	1263c <__assert_fail@plt>
   16830:	andeq	r6, r1, ip, ror #19
   16834:	andeq	r0, r0, r4, ror #3
   16838:	andeq	r4, r0, r8, lsr #15
   1683c:	muleq	r0, r0, r7
   16840:	andeq	r4, r0, ip, asr r7
   16844:	andeq	r4, r0, r4, asr r7
   16848:	andeq	r4, r0, ip, lsr #14
   1684c:	andeq	r4, r0, r0, lsl #14
   16850:			; <UNDEFINED> instruction: 0x000045b4
   16854:	andeq	r4, r0, r0, lsr r3
   16858:	andeq	r4, r0, r0, lsl r5
   1685c:	andeq	r4, r0, ip, ror r5
   16860:	andeq	r4, r0, ip, asr #12

00016864 <dim_enter_array@@Base>:
   16864:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16868:	ldr	r5, [pc, #2368]	; 171b0 <dim_enter_array@@Base+0x94c>
   1686c:	strd	r6, [sp, #8]
   16870:	ldr	r3, [pc, #2364]	; 171b4 <dim_enter_array@@Base+0x950>
   16874:	strd	r8, [sp, #16]
   16878:	strd	sl, [sp, #24]
   1687c:	add	r5, pc, r5
   16880:	str	lr, [sp, #32]
   16884:	sub	sp, sp, #100	; 0x64
   16888:	add	r1, sp, #56	; 0x38
   1688c:	ldr	r2, [r5, r3]
   16890:	ldr	r3, [r2, #136]	; 0x88
   16894:	str	r2, [sp, #8]
   16898:	ldr	r0, [r2, #3360]	; 0xd20
   1689c:	add	r3, r3, #2
   168a0:	str	r0, [sp, #12]
   168a4:	ldr	r0, [r2, r3, lsl #2]
   168a8:	bl	12648 <coda_type_get_class@plt>
   168ac:	cmp	r0, #0
   168b0:	bne	16f88 <dim_enter_array@@Base+0x724>
   168b4:	ldr	r3, [sp, #56]	; 0x38
   168b8:	sub	r3, r3, #1
   168bc:	cmp	r3, #5
   168c0:	addls	pc, pc, r3, lsl #2
   168c4:	b	17144 <dim_enter_array@@Base+0x8e0>
   168c8:	b	16bd8 <dim_enter_array@@Base+0x374>
   168cc:	b	17144 <dim_enter_array@@Base+0x8e0>
   168d0:	b	17144 <dim_enter_array@@Base+0x8e0>
   168d4:	b	16ba0 <dim_enter_array@@Base+0x33c>
   168d8:	b	16b2c <dim_enter_array@@Base+0x2c8>
   168dc:	b	168e0 <dim_enter_array@@Base+0x7c>
   168e0:	ldr	r2, [sp, #8]
   168e4:	add	r1, sp, #64	; 0x40
   168e8:	ldr	r3, [r2, #136]	; 0x88
   168ec:	add	r3, r3, #2
   168f0:	ldr	r0, [r2, r3, lsl #2]
   168f4:	bl	124bc <coda_type_get_special_type@plt>
   168f8:	cmp	r0, #0
   168fc:	bne	170c0 <dim_enter_array@@Base+0x85c>
   16900:	ldr	r3, [sp, #64]	; 0x40
   16904:	cmp	r3, #3
   16908:	bne	1718c <dim_enter_array@@Base+0x928>
   1690c:	ldr	r0, [sp, #12]
   16910:	mov	r1, #1
   16914:	mov	r2, #2
   16918:	lsl	r3, r0, #2
   1691c:	str	r3, [sp, #24]
   16920:	add	r3, r3, r0
   16924:	ldr	r0, [sp, #8]
   16928:	add	r3, r0, r3, lsl #4
   1692c:	str	r1, [r3, #804]	; 0x324
   16930:	str	r2, [r3, #808]	; 0x328
   16934:	ldr	r3, [pc, #2172]	; 171b8 <dim_enter_array@@Base+0x954>
   16938:	ldr	r3, [r5, r3]
   1693c:	ldr	r3, [r3]
   16940:	cmp	r3, #0
   16944:	beq	16f64 <dim_enter_array@@Base+0x700>
   16948:	ldr	r1, [sp, #12]
   1694c:	ldr	r3, [sp, #24]
   16950:	ldr	r2, [pc, #2148]	; 171bc <dim_enter_array@@Base+0x958>
   16954:	add	r3, r3, r1
   16958:	ldr	r1, [sp, #8]
   1695c:	ldr	sl, [r5, r2]
   16960:	add	r3, r1, r3, lsl #4
   16964:	ldr	fp, [sl]
   16968:	ldr	r1, [r3, #804]	; 0x324
   1696c:	str	fp, [r3, #800]	; 0x320
   16970:	add	r0, r1, fp
   16974:	cmp	r0, #8
   16978:	mov	ip, r0
   1697c:	bgt	17168 <dim_enter_array@@Base+0x904>
   16980:	cmp	fp, #0
   16984:	str	r0, [sl]
   16988:	ble	17014 <dim_enter_array@@Base+0x7b0>
   1698c:	add	r3, fp, #37	; 0x25
   16990:	add	r2, sl, fp, lsl #3
   16994:	lsl	r3, r3, #3
   16998:	ldrd	r4, [r2, #232]	; 0xe8
   1699c:	ldrd	r2, [r3, sl]
   169a0:	strd	r4, [sp, #16]
   169a4:	cmp	r2, #1
   169a8:	strd	r2, [sp, #40]	; 0x28
   169ac:	sbcs	r3, r3, #0
   169b0:	blt	17078 <dim_enter_array@@Base+0x814>
   169b4:	cmp	r1, #0
   169b8:	ble	1709c <dim_enter_array@@Base+0x838>
   169bc:	ldr	r2, [sp, #12]
   169c0:	add	r4, fp, #1
   169c4:	mov	r5, #0
   169c8:	lsl	r4, r4, #2
   169cc:	mov	lr, r5
   169d0:	ldr	r3, [sp, #24]
   169d4:	add	ip, sl, ip, lsl #2
   169d8:	add	r9, r3, r2
   169dc:	ldr	r3, [sp, #8]
   169e0:	add	r9, r3, r9, lsl #4
   169e4:	sub	r3, r4, #4
   169e8:	add	r9, r9, #804	; 0x324
   169ec:	str	r3, [sp, #32]
   169f0:	add	r3, sl, r3
   169f4:	mov	r1, r9
   169f8:	ldr	r2, [r1, #4]!
   169fc:	cmn	r2, #1
   16a00:	str	r2, [r3, #4]!
   16a04:	moveq	r5, #1
   16a08:	cmp	r3, ip
   16a0c:	str	lr, [r3, #68]	; 0x44
   16a10:	bne	169f8 <dim_enter_array@@Base+0x194>
   16a14:	cmp	r5, #0
   16a18:	streq	r5, [sp, #28]
   16a1c:	beq	16c58 <dim_enter_array@@Base+0x3f4>
   16a20:	ldr	r3, [pc, #1944]	; 171c0 <dim_enter_array@@Base+0x95c>
   16a24:	add	r4, r4, #104	; 0x68
   16a28:	mov	r8, r9
   16a2c:	add	r4, sl, r4
   16a30:	mov	r6, #0
   16a34:	ldr	r2, [sp, #12]
   16a38:	add	r3, pc, r3
   16a3c:	str	r3, [sp, #48]	; 0x30
   16a40:	ldr	r3, [sp, #24]
   16a44:	add	r7, r3, r2
   16a48:	ldr	r3, [sp, #8]
   16a4c:	add	r7, r3, r7, lsl #4
   16a50:	ldr	r3, [pc, #1900]	; 171c4 <dim_enter_array@@Base+0x960>
   16a54:	add	r3, pc, r3
   16a58:	str	r3, [sp, #52]	; 0x34
   16a5c:	ldr	r3, [sp, #16]
   16a60:	lsl	r3, r3, #2
   16a64:	str	r3, [sp, #28]
   16a68:	ldr	r3, [r8, #4]!
   16a6c:	cmn	r3, #1
   16a70:	movne	r3, #0
   16a74:	strne	r3, [r4]
   16a78:	strne	r3, [r4, #32]
   16a7c:	beq	17028 <dim_enter_array@@Base+0x7c4>
   16a80:	ldr	r2, [r7, #804]	; 0x324
   16a84:	add	r6, r6, #1
   16a88:	add	r4, r4, #4
   16a8c:	add	r3, r7, #804	; 0x324
   16a90:	cmp	r2, r6
   16a94:	bgt	16a68 <dim_enter_array@@Base+0x204>
   16a98:	mov	r4, #0
   16a9c:	str	r3, [sp, #28]
   16aa0:	mov	r2, r4
   16aa4:	mov	r1, r4
   16aa8:	mov	r0, r4
   16aac:	str	r4, [r7, #844]	; 0x34c
   16ab0:	bl	160e8 <print_debug_data@@Base+0x458>
   16ab4:	ldr	r3, [sp, #28]
   16ab8:	ldr	r3, [r3]
   16abc:	cmp	r3, r4
   16ac0:	ble	16c50 <dim_enter_array@@Base+0x3ec>
   16ac4:	ldr	r2, [sp, #12]
   16ac8:	mov	r8, #1
   16acc:	str	r4, [sp, #28]
   16ad0:	ldr	r3, [sp, #24]
   16ad4:	add	r7, r3, r2
   16ad8:	ldr	r3, [sp, #8]
   16adc:	add	r7, r3, r7, lsl #4
   16ae0:	ldr	r3, [sp, #32]
   16ae4:	add	r6, sl, r3
   16ae8:	mov	r3, r4
   16aec:	b	16b04 <dim_enter_array@@Base+0x2a0>
   16af0:	ldr	r2, [r7, #804]	; 0x324
   16af4:	add	r4, r4, #1
   16af8:	add	r6, r6, #4
   16afc:	cmp	r2, r4
   16b00:	ble	16f90 <dim_enter_array@@Base+0x72c>
   16b04:	ldr	r2, [r9, #4]!
   16b08:	cmn	r2, #1
   16b0c:	bne	16af0 <dim_enter_array@@Base+0x28c>
   16b10:	ldr	r0, [r6, #4]
   16b14:	ldr	r2, [r6, #36]	; 0x24
   16b18:	cmp	r0, r2
   16b1c:	beq	170c8 <dim_enter_array@@Base+0x864>
   16b20:	str	r5, [sp, #28]
   16b24:	str	r8, [r6, #72]	; 0x48
   16b28:	b	16af0 <dim_enter_array@@Base+0x28c>
   16b2c:	ldr	r2, [sp, #8]
   16b30:	add	r1, sp, #64	; 0x40
   16b34:	ldr	r3, [r2, #136]	; 0x88
   16b38:	add	r3, r3, #2
   16b3c:	ldr	r0, [r2, r3, lsl #2]
   16b40:	bl	122e8 <coda_type_get_bit_size@plt>
   16b44:	cmp	r0, #0
   16b48:	bne	170b8 <dim_enter_array@@Base+0x854>
   16b4c:	ldr	r1, [sp, #12]
   16b50:	mov	r2, #1
   16b54:	ldrd	r6, [sp, #64]	; 0x40
   16b58:	lsl	r3, r1, #2
   16b5c:	cmp	r6, #0
   16b60:	str	r3, [sp, #24]
   16b64:	add	r3, r3, r1
   16b68:	ldr	r1, [sp, #8]
   16b6c:	add	r3, r1, r3, lsl #4
   16b70:	sbcs	r1, r7, #0
   16b74:	str	r2, [r3, #804]	; 0x324
   16b78:	mvnlt	r2, #0
   16b7c:	strlt	r2, [r3, #808]	; 0x328
   16b80:	blt	16934 <dim_enter_array@@Base+0xd0>
   16b84:	lsr	r2, r6, #3
   16b88:	and	r0, r6, #7
   16b8c:	orr	r2, r2, r7, lsl #29
   16b90:	cmp	r0, #0
   16b94:	addne	r2, r2, #1
   16b98:	str	r2, [r3, #808]	; 0x328
   16b9c:	b	16934 <dim_enter_array@@Base+0xd0>
   16ba0:	ldr	r2, [sp, #8]
   16ba4:	add	r1, sp, #64	; 0x40
   16ba8:	ldr	r3, [r2, #136]	; 0x88
   16bac:	add	r3, r3, #2
   16bb0:	ldr	r0, [r2, r3, lsl #2]
   16bb4:	bl	124f8 <coda_type_get_string_length@plt>
   16bb8:	cmp	r0, #0
   16bbc:	bne	170b0 <dim_enter_array@@Base+0x84c>
   16bc0:	ldr	r0, [sp, #12]
   16bc4:	mov	r1, #1
   16bc8:	ldr	r2, [sp, #64]	; 0x40
   16bcc:	lsl	r3, r0, #2
   16bd0:	str	r3, [sp, #24]
   16bd4:	b	16920 <dim_enter_array@@Base+0xbc>
   16bd8:	ldr	r0, [sp, #8]
   16bdc:	add	r4, sp, #64	; 0x40
   16be0:	add	r1, sp, #60	; 0x3c
   16be4:	mov	r2, r4
   16be8:	ldr	r3, [r0, #136]	; 0x88
   16bec:	add	r3, r3, #2
   16bf0:	ldr	r0, [r0, r3, lsl #2]
   16bf4:	bl	12588 <coda_type_get_array_dim@plt>
   16bf8:	cmp	r0, #0
   16bfc:	bne	170a8 <dim_enter_array@@Base+0x844>
   16c00:	ldr	r1, [sp, #8]
   16c04:	ldr	r2, [sp, #12]
   16c08:	ldr	r0, [sp, #60]	; 0x3c
   16c0c:	lsl	r3, r2, #2
   16c10:	cmp	r0, #0
   16c14:	str	r3, [sp, #24]
   16c18:	add	r3, r3, r2
   16c1c:	lsl	r3, r3, #4
   16c20:	add	r2, r1, r3
   16c24:	str	r0, [r2, #804]	; 0x324
   16c28:	ble	16934 <dim_enter_array@@Base+0xd0>
   16c2c:	add	r3, r3, #804	; 0x324
   16c30:	add	r0, r4, r0, lsl #2
   16c34:	mov	r2, r4
   16c38:	add	r3, r1, r3
   16c3c:	ldr	r1, [r2], #4
   16c40:	cmp	r2, r0
   16c44:	str	r1, [r3, #4]!
   16c48:	bne	16c3c <dim_enter_array@@Base+0x3d8>
   16c4c:	b	16934 <dim_enter_array@@Base+0xd0>
   16c50:	ldr	r0, [sl]
   16c54:	str	r4, [sp, #28]
   16c58:	mov	ip, #0
   16c5c:	mvn	lr, #0
   16c60:	cmp	r0, ip
   16c64:	str	ip, [sl, #68]	; 0x44
   16c68:	str	lr, [sl, #104]	; 0x68
   16c6c:	ble	16cac <dim_enter_array@@Base+0x448>
   16c70:	mov	r4, ip
   16c74:	mov	r3, ip
   16c78:	add	r2, sl, #68	; 0x44
   16c7c:	ldr	r1, [r2, #4]!
   16c80:	cmp	r1, #0
   16c84:	beq	16c94 <dim_enter_array@@Base+0x430>
   16c88:	mov	ip, #1
   16c8c:	mov	lr, r3
   16c90:	mov	r4, ip
   16c94:	add	r3, r3, #1
   16c98:	cmp	r0, r3
   16c9c:	bne	16c7c <dim_enter_array@@Base+0x418>
   16ca0:	cmp	ip, #0
   16ca4:	strne	r4, [sl, #68]	; 0x44
   16ca8:	strne	lr, [sl, #104]	; 0x68
   16cac:	ldr	r2, [sp, #12]
   16cb0:	mov	ip, #1
   16cb4:	ldr	r3, [sp, #24]
   16cb8:	add	r3, r3, r2
   16cbc:	ldr	r2, [sp, #8]
   16cc0:	add	r3, r2, r3, lsl #4
   16cc4:	ldr	r6, [r3, #804]	; 0x324
   16cc8:	str	ip, [r3, #840]	; 0x348
   16ccc:	cmp	r6, #0
   16cd0:	ble	170e4 <dim_enter_array@@Base+0x880>
   16cd4:	add	r3, fp, #29
   16cd8:	add	lr, sl, fp, lsl #2
   16cdc:	add	r8, fp, #30
   16ce0:	lsl	r2, r3, #3
   16ce4:	mov	r3, #0
   16ce8:	str	fp, [sp, #32]
   16cec:	add	r8, sl, r8, lsl #3
   16cf0:	mov	r7, lr
   16cf4:	str	sl, [sp, #36]	; 0x24
   16cf8:	str	r2, [sp, #48]	; 0x30
   16cfc:	add	r2, sl, r2
   16d00:	ldrd	sl, [sp, #16]
   16d04:	b	16d34 <dim_enter_array@@Base+0x4d0>
   16d08:	ldr	r0, [r7, #4]
   16d0c:	add	r3, r3, #1
   16d10:	add	r2, r2, #8
   16d14:	cmp	r3, r6
   16d18:	mul	r9, r0, fp
   16d1c:	asr	r5, r0, #31
   16d20:	umull	r0, r1, r0, sl
   16d24:	mla	r9, sl, r5, r9
   16d28:	add	r1, r9, r1
   16d2c:	strd	r0, [r8]
   16d30:	beq	16d74 <dim_enter_array@@Base+0x510>
   16d34:	ldr	r9, [lr, #4]!
   16d38:	cmp	r3, #0
   16d3c:	mul	ip, r9, ip
   16d40:	beq	16d08 <dim_enter_array@@Base+0x4a4>
   16d44:	ldr	r0, [r2]
   16d48:	asr	r5, r9, #31
   16d4c:	add	r3, r3, #1
   16d50:	cmp	r3, r6
   16d54:	add	r2, r2, #8
   16d58:	mul	r4, r5, r0
   16d5c:	ldr	r5, [r2, #-4]
   16d60:	umull	r0, r1, r0, r9
   16d64:	mla	r9, r9, r5, r4
   16d68:	add	r1, r9, r1
   16d6c:	strd	r0, [r2]
   16d70:	bne	16d34 <dim_enter_array@@Base+0x4d0>
   16d74:	ldr	r1, [sp, #12]
   16d78:	ldr	r2, [sp, #24]
   16d7c:	ldr	fp, [sp, #32]
   16d80:	ldr	sl, [sp, #36]	; 0x24
   16d84:	add	r2, r2, r1
   16d88:	ldr	r1, [sp, #28]
   16d8c:	cmp	r1, #0
   16d90:	ldr	r1, [sp, #8]
   16d94:	add	r2, r1, r2, lsl #4
   16d98:	str	ip, [r2, #840]	; 0x348
   16d9c:	beq	16f98 <dim_enter_array@@Base+0x734>
   16da0:	ldr	r2, [sp, #48]	; 0x30
   16da4:	add	r3, r6, fp
   16da8:	add	r0, sl, #296	; 0x128
   16dac:	add	r0, r0, r3, lsl #3
   16db0:	mov	r3, #0
   16db4:	add	r1, r2, #64	; 0x40
   16db8:	mov	r2, #0
   16dbc:	add	r1, sl, r1
   16dc0:	strd	r2, [r1, #8]!
   16dc4:	cmp	r1, r0
   16dc8:	bne	16dc0 <dim_enter_array@@Base+0x55c>
   16dcc:	ldrd	r4, [sp, #16]
   16dd0:	cmp	r4, #1
   16dd4:	sbcs	r3, r5, #0
   16dd8:	blt	16e6c <dim_enter_array@@Base+0x608>
   16ddc:	add	r7, sl, fp, lsl #3
   16de0:	add	r3, r6, fp
   16de4:	add	r0, sl, #296	; 0x128
   16de8:	add	r0, r0, r3, lsl #3
   16dec:	mov	r8, r4
   16df0:	mov	lr, #0
   16df4:	add	r9, sl, fp, lsl #2
   16df8:	add	r7, r7, #296	; 0x128
   16dfc:	cmp	r6, #0
   16e00:	ble	16e60 <dim_enter_array@@Base+0x5fc>
   16e04:	lsl	ip, lr, #2
   16e08:	mov	r2, r7
   16e0c:	mov	r3, r9
   16e10:	mov	r1, #1
   16e14:	str	r6, [sp, #16]
   16e18:	str	r7, [sp, #28]
   16e1c:	ldr	r4, [r3, #72]	; 0x48
   16e20:	add	r3, r3, #4
   16e24:	cmp	r4, #0
   16e28:	ldrne	r4, [r3, #104]	; 0x68
   16e2c:	ldreq	r4, [r3]
   16e30:	ldrne	r4, [r4, ip]
   16e34:	mul	r1, r4, r1
   16e38:	ldrd	r4, [r2, #8]!
   16e3c:	adds	r6, r4, r1
   16e40:	adc	r7, r5, r1, asr #31
   16e44:	mov	r4, r6
   16e48:	cmp	r0, r2
   16e4c:	mov	r5, r7
   16e50:	strd	r4, [r2]
   16e54:	bne	16e1c <dim_enter_array@@Base+0x5b8>
   16e58:	ldr	r6, [sp, #16]
   16e5c:	ldr	r7, [sp, #28]
   16e60:	add	lr, lr, #1
   16e64:	cmp	lr, r8
   16e68:	bne	16dfc <dim_enter_array@@Base+0x598>
   16e6c:	ldr	r2, [sp, #12]
   16e70:	ldr	r3, [sp, #24]
   16e74:	add	r3, r3, r2
   16e78:	ldr	r2, [sp, #8]
   16e7c:	add	r3, r2, r3, lsl #4
   16e80:	ldr	r2, [r3, #804]	; 0x324
   16e84:	add	r3, r2, fp
   16e88:	add	r3, r3, #37	; 0x25
   16e8c:	lsl	r3, r3, #3
   16e90:	ldrd	r0, [sl, r3]
   16e94:	cmp	r0, #1
   16e98:	sbcs	r3, r1, #0
   16e9c:	blt	16f48 <dim_enter_array@@Base+0x6e4>
   16ea0:	ldr	r3, [sl]
   16ea4:	cmp	r2, #1
   16ea8:	ldr	r0, [sl, r3, lsl #2]
   16eac:	add	r3, sl, r3, lsl #3
   16eb0:	asr	r1, r0, #31
   16eb4:	strd	r0, [r3, #168]	; 0xa8
   16eb8:	ble	16f00 <dim_enter_array@@Base+0x69c>
   16ebc:	sub	r6, fp, #-1073741823	; 0xc0000001
   16ec0:	add	r0, fp, #21
   16ec4:	add	lr, sl, fp, lsl #2
   16ec8:	add	r6, r6, r2
   16ecc:	add	r0, r0, r2
   16ed0:	add	r6, sl, r6, lsl #2
   16ed4:	add	r0, sl, r0, lsl #3
   16ed8:	ldr	r2, [r6], #-4
   16edc:	ldm	r0, {r1, ip}
   16ee0:	asr	r5, r2, #31
   16ee4:	cmp	lr, r6
   16ee8:	mul	ip, r2, ip
   16eec:	umull	r2, r3, r2, r1
   16ef0:	mla	r1, r1, r5, ip
   16ef4:	add	r3, r1, r3
   16ef8:	strd	r2, [r0, #-8]!
   16efc:	bne	16ed8 <dim_enter_array@@Base+0x674>
   16f00:	cmp	fp, #0
   16f04:	ble	16f48 <dim_enter_array@@Base+0x6e4>
   16f08:	add	fp, fp, #22
   16f0c:	add	r4, sl, #176	; 0xb0
   16f10:	add	sl, sl, fp, lsl #3
   16f14:	mov	lr, sl
   16f18:	sub	sl, sl, #8
   16f1c:	ldr	r2, [sl]
   16f20:	cmp	r4, sl
   16f24:	ldr	ip, [lr]
   16f28:	ldr	r0, [lr, #4]
   16f2c:	ldr	r1, [sl, #4]
   16f30:	mul	r0, r2, r0
   16f34:	umull	r2, r3, r2, ip
   16f38:	mla	r1, ip, r1, r0
   16f3c:	add	r3, r1, r3
   16f40:	strd	r2, [sl]
   16f44:	bne	16f18 <dim_enter_array@@Base+0x6b4>
   16f48:	add	sp, sp, #100	; 0x64
   16f4c:	ldrd	r4, [sp]
   16f50:	ldrd	r6, [sp, #8]
   16f54:	ldrd	r8, [sp, #16]
   16f58:	ldrd	sl, [sp, #24]
   16f5c:	add	sp, sp, #32
   16f60:	pop	{pc}		; (ldr pc, [sp], #4)
   16f64:	ldrd	r0, [sp, #8]
   16f68:	ldr	r2, [sp, #24]
   16f6c:	add	r2, r2, r1
   16f70:	mvn	r1, #0
   16f74:	add	r2, r0, r2, lsl #4
   16f78:	str	r1, [r2, #800]	; 0x320
   16f7c:	str	r3, [r2, #840]	; 0x348
   16f80:	str	r3, [r2, #844]	; 0x34c
   16f84:	b	16f48 <dim_enter_array@@Base+0x6e4>
   16f88:	bl	1a7c8 <handle_coda_error@@Base>
   16f8c:	b	168b4 <dim_enter_array@@Base+0x50>
   16f90:	ldr	r0, [sl]
   16f94:	b	16c58 <dim_enter_array@@Base+0x3f4>
   16f98:	add	r1, sl, fp, lsl #2
   16f9c:	ldrd	r6, [sp, #40]	; 0x28
   16fa0:	add	r2, fp, #38	; 0x26
   16fa4:	lsl	r2, r2, #3
   16fa8:	cmp	r3, #1
   16fac:	ldr	r0, [r1, #4]
   16fb0:	add	ip, sl, r2
   16fb4:	mul	lr, r0, r7
   16fb8:	asr	r5, r0, #31
   16fbc:	umull	r0, r1, r0, r6
   16fc0:	mla	lr, r6, r5, lr
   16fc4:	add	r1, lr, r1
   16fc8:	strd	r0, [sl, r2]
   16fcc:	beq	16e6c <dim_enter_array@@Base+0x608>
   16fd0:	add	r3, r3, fp
   16fd4:	add	r5, sl, #296	; 0x128
   16fd8:	add	r4, fp, #2
   16fdc:	add	r5, r5, r3, lsl #3
   16fe0:	add	r4, sl, r4, lsl #2
   16fe4:	ldr	r2, [r4], #4
   16fe8:	ldr	r1, [ip]
   16fec:	ldr	r0, [ip, #4]
   16ff0:	asr	r7, r2, #31
   16ff4:	mul	r0, r2, r0
   16ff8:	umull	r2, r3, r2, r1
   16ffc:	mla	r1, r1, r7, r0
   17000:	add	r3, r1, r3
   17004:	strd	r2, [ip, #8]!
   17008:	cmp	ip, r5
   1700c:	bne	16fe4 <dim_enter_array@@Base+0x780>
   17010:	b	16e6c <dim_enter_array@@Base+0x608>
   17014:	mov	r2, #1
   17018:	mov	r3, #0
   1701c:	strd	r2, [sp, #16]
   17020:	strd	r2, [sp, #40]	; 0x28
   17024:	b	169b4 <dim_enter_array@@Base+0x150>
   17028:	str	fp, [r4, #32]
   1702c:	ldr	r0, [sp, #28]
   17030:	str	r3, [sp, #36]	; 0x24
   17034:	bl	123b4 <malloc@plt>
   17038:	cmp	r0, #0
   1703c:	str	r0, [r4]
   17040:	ldr	r3, [sp, #36]	; 0x24
   17044:	beq	17120 <dim_enter_array@@Base+0x8bc>
   17048:	ldrd	r2, [sp, #16]
   1704c:	cmp	r2, #1
   17050:	sbcs	r3, r3, #0
   17054:	blt	16a80 <dim_enter_array@@Base+0x21c>
   17058:	ldr	r3, [r4]
   1705c:	mvn	r1, #0
   17060:	ldr	r2, [sp, #28]
   17064:	add	r2, r2, r3
   17068:	str	r1, [r3], #4
   1706c:	cmp	r3, r2
   17070:	bne	17068 <dim_enter_array@@Base+0x804>
   17074:	b	16a80 <dim_enter_array@@Base+0x21c>
   17078:	cmp	r1, #0
   1707c:	ble	1709c <dim_enter_array@@Base+0x838>
   17080:	add	r3, sl, fp, lsl #2
   17084:	mov	r2, #0
   17088:	add	r1, sl, r0, lsl #2
   1708c:	str	r2, [r3, #4]!
   17090:	cmp	r3, r1
   17094:	str	r2, [r3, #68]	; 0x44
   17098:	bne	1708c <dim_enter_array@@Base+0x828>
   1709c:	mov	r3, #0
   170a0:	str	r3, [sp, #28]
   170a4:	b	16c58 <dim_enter_array@@Base+0x3f4>
   170a8:	bl	1a7c8 <handle_coda_error@@Base>
   170ac:	b	16c00 <dim_enter_array@@Base+0x39c>
   170b0:	bl	1a7c8 <handle_coda_error@@Base>
   170b4:	b	16bc0 <dim_enter_array@@Base+0x35c>
   170b8:	bl	1a7c8 <handle_coda_error@@Base>
   170bc:	b	16b4c <dim_enter_array@@Base+0x2e8>
   170c0:	bl	1a7c8 <handle_coda_error@@Base>
   170c4:	b	16900 <dim_enter_array@@Base+0x9c>
   170c8:	str	r3, [r6, #72]	; 0x48
   170cc:	ldr	r0, [r6, #108]	; 0x6c
   170d0:	bl	1227c <free@plt>
   170d4:	mov	r3, #0
   170d8:	str	r3, [r6, #108]	; 0x6c
   170dc:	str	r3, [r6, #140]	; 0x8c
   170e0:	b	16af0 <dim_enter_array@@Base+0x28c>
   170e4:	ldr	r3, [sp, #28]
   170e8:	cmp	r3, #0
   170ec:	bne	16dcc <dim_enter_array@@Base+0x568>
   170f0:	add	r3, sl, fp, lsl #2
   170f4:	ldrd	r4, [sp, #40]	; 0x28
   170f8:	add	ip, fp, #38	; 0x26
   170fc:	lsl	ip, ip, #3
   17100:	ldr	r0, [r3, #4]
   17104:	mul	lr, r0, r5
   17108:	asr	r3, r0, #31
   1710c:	umull	r0, r1, r0, r4
   17110:	mla	r3, r4, r3, lr
   17114:	add	r1, r3, r1
   17118:	strd	r0, [sl, ip]
   1711c:	b	16e6c <dim_enter_array@@Base+0x608>
   17120:	mov	r1, #456	; 0x1c8
   17124:	mov	r0, r3
   17128:	ldr	r2, [sp, #28]
   1712c:	str	r1, [sp]
   17130:	ldr	r3, [sp, #48]	; 0x30
   17134:	ldr	r1, [sp, #52]	; 0x34
   17138:	bl	12234 <coda_set_error@plt>
   1713c:	bl	1a7c8 <handle_coda_error@@Base>
   17140:	b	17048 <dim_enter_array@@Base+0x7e4>
   17144:	ldr	r3, [pc, #124]	; 171c8 <dim_enter_array@@Base+0x964>
   17148:	movw	r2, #386	; 0x182
   1714c:	ldr	r1, [pc, #120]	; 171cc <dim_enter_array@@Base+0x968>
   17150:	ldr	r0, [pc, #120]	; 171d0 <dim_enter_array@@Base+0x96c>
   17154:	add	r3, pc, r3
   17158:	add	r3, r3, #84	; 0x54
   1715c:	add	r1, pc, r1
   17160:	add	r0, pc, r0
   17164:	bl	1263c <__assert_fail@plt>
   17168:	ldr	r3, [pc, #100]	; 171d4 <dim_enter_array@@Base+0x970>
   1716c:	movw	r2, #402	; 0x192
   17170:	ldr	r1, [pc, #96]	; 171d8 <dim_enter_array@@Base+0x974>
   17174:	ldr	r0, [pc, #96]	; 171dc <dim_enter_array@@Base+0x978>
   17178:	add	r3, pc, r3
   1717c:	add	r3, r3, #84	; 0x54
   17180:	add	r1, pc, r1
   17184:	add	r0, pc, r0
   17188:	bl	1263c <__assert_fail@plt>
   1718c:	ldr	r3, [pc, #76]	; 171e0 <dim_enter_array@@Base+0x97c>
   17190:	movw	r2, #349	; 0x15d
   17194:	ldr	r1, [pc, #72]	; 171e4 <dim_enter_array@@Base+0x980>
   17198:	ldr	r0, [pc, #72]	; 171e8 <dim_enter_array@@Base+0x984>
   1719c:	add	r3, pc, r3
   171a0:	add	r3, r3, #84	; 0x54
   171a4:	add	r1, pc, r1
   171a8:	add	r0, pc, r0
   171ac:	bl	1263c <__assert_fail@plt>
   171b0:	andeq	r6, r1, ip, ror r7
   171b4:			; <UNDEFINED> instruction: 0x000001b4
   171b8:			; <UNDEFINED> instruction: 0x000001b0
   171bc:	andeq	r0, r0, r4, ror #3
   171c0:	andeq	r4, r0, r8, ror #6
   171c4:	andeq	r4, r0, ip, asr #1
   171c8:	ldrdeq	r3, [r0], -r8
   171cc:	andeq	r3, r0, r4, asr #24
   171d0:	andeq	r3, r0, r4, lsr #27
   171d4:			; <UNDEFINED> instruction: 0x00003bb4
   171d8:	andeq	r3, r0, r0, lsr #24
   171dc:	andeq	r3, r0, r8, lsr #26
   171e0:	muleq	r0, r0, fp
   171e4:	strdeq	r3, [r0], -ip
   171e8:	andeq	r3, r0, ip, asr sp

000171ec <dim_leave_array@@Base>:
   171ec:	ldr	r0, [pc, #368]	; 17364 <dim_leave_array@@Base+0x178>
   171f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   171f4:	ldr	r3, [pc, #364]	; 17368 <dim_leave_array@@Base+0x17c>
   171f8:	strd	r6, [sp, #8]
   171fc:	str	r8, [sp, #16]
   17200:	add	r0, pc, r0
   17204:	str	lr, [sp, #20]
   17208:	ldr	r8, [r0, r3]
   1720c:	ldr	r3, [r8, #3360]	; 0xd20
   17210:	cmp	r3, #0
   17214:	blt	17340 <dim_leave_array@@Base+0x154>
   17218:	ldr	r1, [pc, #332]	; 1736c <dim_leave_array@@Base+0x180>
   1721c:	add	r3, r3, r3, lsl #2
   17220:	add	r8, r8, r3, lsl #4
   17224:	ldr	r6, [r8, #800]	; 0x320
   17228:	ldr	r4, [r0, r1]
   1722c:	ldr	r2, [r8, #804]	; 0x324
   17230:	ldr	lr, [r4]
   17234:	cmp	r2, #0
   17238:	sub	lr, lr, r2
   1723c:	str	lr, [r4]
   17240:	ble	1728c <dim_leave_array@@Base+0xa0>
   17244:	add	r7, r4, r6, lsl #2
   17248:	mov	r5, #0
   1724c:	add	r7, r7, #68	; 0x44
   17250:	b	17264 <dim_leave_array@@Base+0x78>
   17254:	ldr	r2, [r8, #804]	; 0x324
   17258:	add	r5, r5, #1
   1725c:	cmp	r2, r5
   17260:	ble	17288 <dim_leave_array@@Base+0x9c>
   17264:	ldr	r3, [r7, #4]!
   17268:	cmp	r3, #0
   1726c:	beq	17254 <dim_leave_array@@Base+0x68>
   17270:	ldr	r0, [r7, #36]	; 0x24
   17274:	add	r5, r5, #1
   17278:	bl	1227c <free@plt>
   1727c:	ldr	r2, [r8, #804]	; 0x324
   17280:	cmp	r2, r5
   17284:	bgt	17264 <dim_leave_array@@Base+0x78>
   17288:	ldr	lr, [r4]
   1728c:	mov	ip, #0
   17290:	mvn	r5, #0
   17294:	cmp	lr, ip
   17298:	str	ip, [r4, #68]	; 0x44
   1729c:	str	r5, [r4, #104]	; 0x68
   172a0:	ble	172e0 <dim_leave_array@@Base+0xf4>
   172a4:	mov	r7, ip
   172a8:	mov	r3, ip
   172ac:	add	r1, r4, #68	; 0x44
   172b0:	ldr	r0, [r1, #4]!
   172b4:	cmp	r0, #0
   172b8:	beq	172c8 <dim_leave_array@@Base+0xdc>
   172bc:	mov	ip, #1
   172c0:	mov	r5, r3
   172c4:	mov	r7, ip
   172c8:	add	r3, r3, #1
   172cc:	cmp	r3, lr
   172d0:	bne	172b0 <dim_leave_array@@Base+0xc4>
   172d4:	cmp	ip, #0
   172d8:	strne	r7, [r4, #68]	; 0x44
   172dc:	strne	r5, [r4, #104]	; 0x68
   172e0:	add	r2, r2, r6
   172e4:	add	r2, r2, #37	; 0x25
   172e8:	lsl	r2, r2, #3
   172ec:	ldrd	r2, [r2, r4]
   172f0:	cmp	r2, #1
   172f4:	sbcs	r3, r3, #0
   172f8:	blt	1732c <dim_leave_array@@Base+0x140>
   172fc:	cmp	r6, #0
   17300:	ble	1732c <dim_leave_array@@Base+0x140>
   17304:	add	r6, r6, #22
   17308:	add	r7, r4, #176	; 0xb0
   1730c:	add	r4, r4, r6, lsl #3
   17310:	mov	r5, r4
   17314:	ldrd	r0, [r4, #-8]!
   17318:	ldrd	r2, [r5]
   1731c:	bl	1a824 <handle_coda_error@@Base+0x5c>
   17320:	cmp	r7, r4
   17324:	strd	r0, [r4]
   17328:	bne	17314 <dim_leave_array@@Base+0x128>
   1732c:	ldrd	r4, [sp]
   17330:	ldrd	r6, [sp, #8]
   17334:	ldr	r8, [sp, #16]
   17338:	add	sp, sp, #20
   1733c:	pop	{pc}		; (ldr pc, [sp], #4)
   17340:	ldr	r3, [pc, #40]	; 17370 <dim_leave_array@@Base+0x184>
   17344:	movw	r2, #579	; 0x243
   17348:	ldr	r1, [pc, #36]	; 17374 <dim_leave_array@@Base+0x188>
   1734c:	ldr	r0, [pc, #36]	; 17378 <dim_leave_array@@Base+0x18c>
   17350:	add	r3, pc, r3
   17354:	add	r3, r3, #100	; 0x64
   17358:	add	r1, pc, r1
   1735c:	add	r0, pc, r0
   17360:	bl	1263c <__assert_fail@plt>
   17364:	strdeq	r5, [r1], -r8
   17368:			; <UNDEFINED> instruction: 0x000001b4
   1736c:	andeq	r0, r0, r4, ror #3
   17370:	ldrdeq	r3, [r0], -ip
   17374:	andeq	r3, r0, r8, asr #20
   17378:	andeq	r3, r0, ip, lsl #23

0001737c <dim_record_field_available@@Base>:
   1737c:	mov	r2, #0
   17380:	mov	r1, r2
   17384:	mov	r0, r2
   17388:	b	15e28 <print_debug_data@@Base+0x198>

0001738c <codadump_filter_remove@@Base>:
   1738c:	str	r4, [sp, #-8]!
   17390:	subs	r4, r0, #0
   17394:	str	lr, [sp, #4]
   17398:	beq	17410 <codadump_filter_remove@@Base+0x84>
   1739c:	ldr	r0, [r4]
   173a0:	cmp	r0, #0
   173a4:	beq	17404 <codadump_filter_remove@@Base+0x78>
   173a8:	ldr	r3, [r0, #8]
   173ac:	cmp	r3, #0
   173b0:	beq	173c0 <codadump_filter_remove@@Base+0x34>
   173b4:	add	r0, r0, #8
   173b8:	bl	1738c <codadump_filter_remove@@Base>
   173bc:	ldr	r0, [r4]
   173c0:	ldr	r3, [r0, #4]
   173c4:	cmp	r3, #0
   173c8:	beq	173d8 <codadump_filter_remove@@Base+0x4c>
   173cc:	add	r0, r0, #4
   173d0:	bl	1738c <codadump_filter_remove@@Base>
   173d4:	ldr	r0, [r4]
   173d8:	ldr	r3, [r0]
   173dc:	cmp	r3, #0
   173e0:	beq	173f8 <codadump_filter_remove@@Base+0x6c>
   173e4:	mov	r0, r3
   173e8:	bl	1227c <free@plt>
   173ec:	ldr	r0, [r4]
   173f0:	mov	r3, #0
   173f4:	str	r3, [r0]
   173f8:	bl	1227c <free@plt>
   173fc:	mov	r3, #0
   17400:	str	r3, [r4]
   17404:	ldr	r4, [sp]
   17408:	add	sp, sp, #4
   1740c:	pop	{pc}		; (ldr pc, [sp], #4)
   17410:	ldr	r3, [pc, #24]	; 17430 <codadump_filter_remove@@Base+0xa4>
   17414:	mov	r2, #192	; 0xc0
   17418:	ldr	r1, [pc, #20]	; 17434 <codadump_filter_remove@@Base+0xa8>
   1741c:	ldr	r0, [pc, #20]	; 17438 <codadump_filter_remove@@Base+0xac>
   17420:	add	r3, pc, r3
   17424:	add	r1, pc, r1
   17428:	add	r0, pc, r0
   1742c:	bl	1263c <__assert_fail@plt>
   17430:	andeq	r3, r0, r8, ror #21
   17434:	andeq	r3, r0, ip, ror #22
   17438:	andeq	r3, r0, ip, asr #23
   1743c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17440:	subs	r4, r0, #0
   17444:	strd	r6, [sp, #8]
   17448:	strd	r8, [sp, #16]
   1744c:	strd	sl, [sp, #24]
   17450:	str	lr, [sp, #32]
   17454:	sub	sp, sp, #12
   17458:	beq	176b4 <codadump_filter_remove@@Base+0x328>
   1745c:	cmp	r1, #0
   17460:	mov	r6, r1
   17464:	beq	17690 <codadump_filter_remove@@Base+0x304>
   17468:	ldrb	r3, [r4]
   1746c:	mov	r7, r2
   17470:	sub	r2, r3, #9
   17474:	cmp	r3, #32
   17478:	cmpne	r2, #1
   1747c:	bhi	17494 <codadump_filter_remove@@Base+0x108>
   17480:	ldrb	r3, [r4, #1]!
   17484:	sub	r2, r3, #9
   17488:	cmp	r3, #32
   1748c:	cmpne	r2, #1
   17490:	bls	17480 <codadump_filter_remove@@Base+0xf4>
   17494:	subs	r2, r3, #59	; 0x3b
   17498:	and	r1, r3, #253	; 0xfd
   1749c:	movne	r2, #1
   174a0:	cmp	r3, #0
   174a4:	movne	r3, r2
   174a8:	moveq	r3, #0
   174ac:	cmp	r1, #44	; 0x2c
   174b0:	moveq	r3, #0
   174b4:	andne	r3, r3, #1
   174b8:	cmp	r3, #0
   174bc:	beq	175c4 <codadump_filter_remove@@Base+0x238>
   174c0:	add	r1, r4, #1
   174c4:	mov	r9, #0
   174c8:	b	174d0 <codadump_filter_remove@@Base+0x144>
   174cc:	mov	r9, r5
   174d0:	ldrb	r3, [r1]
   174d4:	mov	r8, r1
   174d8:	add	r5, r9, #1
   174dc:	add	r1, r1, #1
   174e0:	cmp	r3, #59	; 0x3b
   174e4:	cmpne	r3, #0
   174e8:	and	r3, r3, #253	; 0xfd
   174ec:	movne	r2, #1
   174f0:	moveq	r2, #0
   174f4:	cmp	r3, #44	; 0x2c
   174f8:	moveq	r3, #0
   174fc:	andne	r3, r2, #1
   17500:	cmp	r3, #0
   17504:	bne	174cc <codadump_filter_remove@@Base+0x140>
   17508:	mov	r0, #12
   1750c:	bl	123b4 <malloc@plt>
   17510:	cmp	r0, #0
   17514:	mov	fp, r0
   17518:	str	r0, [r6]
   1751c:	beq	17660 <codadump_filter_remove@@Base+0x2d4>
   17520:	add	sl, r9, #2
   17524:	mov	r0, sl
   17528:	bl	123b4 <malloc@plt>
   1752c:	cmp	r0, #0
   17530:	str	r0, [fp]
   17534:	beq	175e4 <codadump_filter_remove@@Base+0x258>
   17538:	mov	r2, r5
   1753c:	mov	r1, r4
   17540:	bl	124b0 <strncpy@plt>
   17544:	ldr	r2, [r6]
   17548:	mov	r3, #0
   1754c:	str	r3, [r2, #4]
   17550:	ldr	r2, [r6]
   17554:	str	r3, [r2, #8]
   17558:	ldr	r3, [r6]
   1755c:	ldr	ip, [r3]
   17560:	ldrb	r3, [ip, r9]
   17564:	sub	r2, r3, #9
   17568:	cmp	r3, #32
   1756c:	cmpne	r2, #1
   17570:	bhi	17598 <codadump_filter_remove@@Base+0x20c>
   17574:	sub	r3, r9, #1
   17578:	rsb	r0, ip, #1
   1757c:	add	r3, ip, r3
   17580:	add	r5, r0, r3
   17584:	ldrb	r2, [r3], #-1
   17588:	sub	r1, r2, #9
   1758c:	cmp	r2, #32
   17590:	cmpne	r1, #1
   17594:	bls	17580 <codadump_filter_remove@@Base+0x1f4>
   17598:	mov	r3, #0
   1759c:	strb	r3, [ip, r5]
   175a0:	ldrb	r3, [r8]
   175a4:	cmp	r3, #46	; 0x2e
   175a8:	beq	17618 <codadump_filter_remove@@Base+0x28c>
   175ac:	cmp	r3, #44	; 0x2c
   175b0:	cmpne	r3, #59	; 0x3b
   175b4:	addeq	r4, r4, sl
   175b8:	strne	r8, [r7]
   175bc:	streq	r4, [r7]
   175c0:	b	175c8 <codadump_filter_remove@@Base+0x23c>
   175c4:	str	r3, [r6]
   175c8:	add	sp, sp, #12
   175cc:	ldrd	r4, [sp]
   175d0:	ldrd	r6, [sp, #8]
   175d4:	ldrd	r8, [sp, #16]
   175d8:	ldrd	sl, [sp, #24]
   175dc:	add	sp, sp, #32
   175e0:	pop	{pc}		; (ldr pc, [sp], #4)
   175e4:	mov	r1, #76	; 0x4c
   175e8:	ldr	r3, [pc, #232]	; 176d8 <codadump_filter_remove@@Base+0x34c>
   175ec:	mvn	r0, #0
   175f0:	mov	r2, sl
   175f4:	str	r1, [sp]
   175f8:	ldr	r1, [pc, #220]	; 176dc <codadump_filter_remove@@Base+0x350>
   175fc:	add	r3, pc, r3
   17600:	add	r1, pc, r1
   17604:	bl	12234 <coda_set_error@plt>
   17608:	bl	1a7c8 <handle_coda_error@@Base>
   1760c:	ldr	r3, [r6]
   17610:	ldr	r0, [r3]
   17614:	b	17538 <codadump_filter_remove@@Base+0x1ac>
   17618:	ldr	r1, [r6]
   1761c:	mov	r2, r7
   17620:	add	r0, r4, sl
   17624:	add	r1, r1, #4
   17628:	bl	1743c <codadump_filter_remove@@Base+0xb0>
   1762c:	ldr	r3, [r6]
   17630:	ldr	r3, [r3, #4]
   17634:	cmp	r3, #0
   17638:	bne	175c8 <codadump_filter_remove@@Base+0x23c>
   1763c:	mov	r0, r6
   17640:	add	sp, sp, #12
   17644:	ldrd	r4, [sp]
   17648:	ldrd	r6, [sp, #8]
   1764c:	ldrd	r8, [sp, #16]
   17650:	ldrd	sl, [sp, #24]
   17654:	ldr	lr, [sp, #32]
   17658:	add	sp, sp, #36	; 0x24
   1765c:	b	1738c <codadump_filter_remove@@Base>
   17660:	mov	r1, #69	; 0x45
   17664:	ldr	r3, [pc, #116]	; 176e0 <codadump_filter_remove@@Base+0x354>
   17668:	mov	r2, #12
   1766c:	mvn	r0, #0
   17670:	str	r1, [sp]
   17674:	ldr	r1, [pc, #104]	; 176e4 <codadump_filter_remove@@Base+0x358>
   17678:	add	r3, pc, r3
   1767c:	add	r1, pc, r1
   17680:	bl	12234 <coda_set_error@plt>
   17684:	bl	1a7c8 <handle_coda_error@@Base>
   17688:	ldr	fp, [r6]
   1768c:	b	17520 <codadump_filter_remove@@Base+0x194>
   17690:	ldr	r3, [pc, #80]	; 176e8 <codadump_filter_remove@@Base+0x35c>
   17694:	mov	r2, #45	; 0x2d
   17698:	ldr	r1, [pc, #76]	; 176ec <codadump_filter_remove@@Base+0x360>
   1769c:	ldr	r0, [pc, #76]	; 176f0 <codadump_filter_remove@@Base+0x364>
   176a0:	add	r3, pc, r3
   176a4:	add	r3, r3, #24
   176a8:	add	r1, pc, r1
   176ac:	add	r0, pc, r0
   176b0:	bl	1263c <__assert_fail@plt>
   176b4:	ldr	r3, [pc, #56]	; 176f4 <codadump_filter_remove@@Base+0x368>
   176b8:	mov	r2, #44	; 0x2c
   176bc:	ldr	r1, [pc, #52]	; 176f8 <codadump_filter_remove@@Base+0x36c>
   176c0:	ldr	r0, [pc, #52]	; 176fc <codadump_filter_remove@@Base+0x370>
   176c4:	add	r3, pc, r3
   176c8:	add	r3, r3, #24
   176cc:	add	r1, pc, r1
   176d0:	add	r0, pc, r0
   176d4:	bl	1263c <__assert_fail@plt>
   176d8:	muleq	r0, r4, r9
   176dc:	andeq	r3, r0, r8, lsl sl
   176e0:	andeq	r3, r0, r8, lsl r9
   176e4:	andeq	r3, r0, r4, lsr #9
   176e8:	andeq	r3, r0, r8, ror #16
   176ec:	andeq	r3, r0, r8, ror #17
   176f0:	andeq	r3, r0, r8, asr #18
   176f4:	andeq	r3, r0, r4, asr #16
   176f8:	andeq	r3, r0, r4, asr #17
   176fc:	andeq	r3, r0, r4, lsr r9
   17700:	strd	r4, [sp, #-16]!
   17704:	subs	r5, r1, #0
   17708:	str	r6, [sp, #8]
   1770c:	str	lr, [sp, #12]
   17710:	sub	sp, sp, #8
   17714:	str	r1, [sp, #4]
   17718:	beq	1775c <codadump_filter_remove@@Base+0x3d0>
   1771c:	ldr	r4, [r0]
   17720:	cmp	r4, #0
   17724:	streq	r5, [r0]
   17728:	beq	1775c <codadump_filter_remove@@Base+0x3d0>
   1772c:	ldr	r0, [r4]
   17730:	ldr	r1, [r5]
   17734:	bl	121ec <strcmp@plt>
   17738:	subs	r6, r0, #0
   1773c:	beq	17770 <codadump_filter_remove@@Base+0x3e4>
   17740:	ldr	r3, [r4, #8]
   17744:	cmp	r3, #0
   17748:	streq	r5, [r4, #8]
   1774c:	beq	1775c <codadump_filter_remove@@Base+0x3d0>
   17750:	mov	r1, r5
   17754:	add	r0, r4, #8
   17758:	bl	17700 <codadump_filter_remove@@Base+0x374>
   1775c:	add	sp, sp, #8
   17760:	ldrd	r4, [sp]
   17764:	ldr	r6, [sp, #8]
   17768:	add	sp, sp, #12
   1776c:	pop	{pc}		; (ldr pc, [sp], #4)
   17770:	ldr	r3, [r4, #4]
   17774:	cmp	r3, #0
   17778:	beq	17798 <codadump_filter_remove@@Base+0x40c>
   1777c:	ldr	r1, [r5, #4]
   17780:	add	r0, r4, #4
   17784:	cmp	r1, #0
   17788:	beq	177a4 <codadump_filter_remove@@Base+0x418>
   1778c:	bl	17700 <codadump_filter_remove@@Base+0x374>
   17790:	ldr	r3, [sp, #4]
   17794:	str	r6, [r3, #4]
   17798:	add	r0, sp, #4
   1779c:	bl	1738c <codadump_filter_remove@@Base>
   177a0:	b	1775c <codadump_filter_remove@@Base+0x3d0>
   177a4:	bl	1738c <codadump_filter_remove@@Base>
   177a8:	b	17798 <codadump_filter_remove@@Base+0x40c>

000177ac <codadump_filter_create@@Base>:
   177ac:	mov	r3, #0
   177b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   177b4:	strd	r6, [sp, #8]
   177b8:	cmp	r0, r3
   177bc:	str	lr, [sp, #16]
   177c0:	sub	sp, sp, #20
   177c4:	str	r3, [sp, #4]
   177c8:	str	r3, [sp, #8]
   177cc:	str	r0, [sp, #12]
   177d0:	beq	17830 <codadump_filter_create@@Base+0x84>
   177d4:	ldrb	r2, [r0]
   177d8:	cmp	r2, r3
   177dc:	beq	1784c <codadump_filter_create@@Base+0xa0>
   177e0:	mov	r4, r3
   177e4:	add	r7, sp, #12
   177e8:	add	r6, sp, #8
   177ec:	add	r5, sp, #4
   177f0:	b	1780c <codadump_filter_create@@Base+0x60>
   177f4:	bl	17700 <codadump_filter_remove@@Base+0x374>
   177f8:	ldr	r0, [sp, #12]
   177fc:	str	r4, [sp, #8]
   17800:	ldrb	r3, [r0]
   17804:	cmp	r3, #0
   17808:	beq	17844 <codadump_filter_create@@Base+0x98>
   1780c:	mov	r1, r6
   17810:	mov	r2, r7
   17814:	bl	1743c <codadump_filter_remove@@Base+0xb0>
   17818:	ldr	r3, [sp, #8]
   1781c:	mov	r0, r5
   17820:	subs	r1, r3, #0
   17824:	bne	177f4 <codadump_filter_create@@Base+0x48>
   17828:	bl	1738c <codadump_filter_remove@@Base>
   1782c:	ldr	r0, [sp, #4]
   17830:	add	sp, sp, #20
   17834:	ldrd	r4, [sp]
   17838:	ldrd	r6, [sp, #8]
   1783c:	add	sp, sp, #16
   17840:	pop	{pc}		; (ldr pc, [sp], #4)
   17844:	ldr	r0, [sp, #4]
   17848:	b	17830 <codadump_filter_create@@Base+0x84>
   1784c:	mov	r0, r2
   17850:	b	17830 <codadump_filter_create@@Base+0x84>

00017854 <codadump_filter_get_fieldname@@Base>:
   17854:	cmp	r0, #0
   17858:	beq	17864 <codadump_filter_get_fieldname@@Base+0x10>
   1785c:	ldr	r0, [r0]
   17860:	bx	lr
   17864:	ldr	r3, [pc, #36]	; 17890 <codadump_filter_get_fieldname@@Base+0x3c>
   17868:	mov	r2, #216	; 0xd8
   1786c:	str	r4, [sp, #-8]!
   17870:	ldr	r1, [pc, #28]	; 17894 <codadump_filter_get_fieldname@@Base+0x40>
   17874:	str	lr, [sp, #4]
   17878:	ldr	r0, [pc, #24]	; 17898 <codadump_filter_get_fieldname@@Base+0x44>
   1787c:	add	r3, pc, r3
   17880:	add	r3, r3, #40	; 0x28
   17884:	add	r1, pc, r1
   17888:	add	r0, pc, r0
   1788c:	bl	1263c <__assert_fail@plt>
   17890:	andeq	r3, r0, ip, lsl #13
   17894:	andeq	r3, r0, ip, lsl #14
   17898:	andeq	r3, r0, ip, ror #14

0001789c <codadump_filter_get_subfilter@@Base>:
   1789c:	cmp	r0, #0
   178a0:	beq	178ac <codadump_filter_get_subfilter@@Base+0x10>
   178a4:	ldr	r0, [r0, #4]
   178a8:	bx	lr
   178ac:	ldr	r3, [pc, #36]	; 178d8 <codadump_filter_get_subfilter@@Base+0x3c>
   178b0:	mov	r2, #223	; 0xdf
   178b4:	str	r4, [sp, #-8]!
   178b8:	ldr	r1, [pc, #28]	; 178dc <codadump_filter_get_subfilter@@Base+0x40>
   178bc:	str	lr, [sp, #4]
   178c0:	ldr	r0, [pc, #24]	; 178e0 <codadump_filter_get_subfilter@@Base+0x44>
   178c4:	add	r3, pc, r3
   178c8:	add	r3, r3, #72	; 0x48
   178cc:	add	r1, pc, r1
   178d0:	add	r0, pc, r0
   178d4:	bl	1263c <__assert_fail@plt>
   178d8:	andeq	r3, r0, r4, asr #12
   178dc:	andeq	r3, r0, r4, asr #13
   178e0:	andeq	r3, r0, r4, lsr #14

000178e4 <codadump_filter_get_next_filter@@Base>:
   178e4:	cmp	r0, #0
   178e8:	beq	178f4 <codadump_filter_get_next_filter@@Base+0x10>
   178ec:	ldr	r0, [r0, #8]
   178f0:	bx	lr
   178f4:	ldr	r3, [pc, #36]	; 17920 <codadump_filter_get_next_filter@@Base+0x3c>
   178f8:	mov	r2, #230	; 0xe6
   178fc:	str	r4, [sp, #-8]!
   17900:	ldr	r1, [pc, #28]	; 17924 <codadump_filter_get_next_filter@@Base+0x40>
   17904:	str	lr, [sp, #4]
   17908:	ldr	r0, [pc, #24]	; 17928 <codadump_filter_get_next_filter@@Base+0x44>
   1790c:	add	r3, pc, r3
   17910:	add	r3, r3, #104	; 0x68
   17914:	add	r1, pc, r1
   17918:	add	r0, pc, r0
   1791c:	bl	1263c <__assert_fail@plt>
   17920:	strdeq	r3, [r0], -ip
   17924:	andeq	r3, r0, ip, ror r6
   17928:	ldrdeq	r3, [r0], -ip
   1792c:	push	{r0, r1, r2, r3}
   17930:	ldr	r3, [pc, #56]	; 17970 <codadump_filter_get_next_filter@@Base+0x8c>
   17934:	push	{lr}		; (str lr, [sp, #-4]!)
   17938:	sub	sp, sp, #12
   1793c:	ldr	r0, [pc, #48]	; 17974 <codadump_filter_get_next_filter@@Base+0x90>
   17940:	add	r1, sp, #20
   17944:	mov	r2, r1
   17948:	str	r1, [sp, #4]
   1794c:	add	r3, pc, r3
   17950:	ldr	r1, [sp, #16]
   17954:	ldr	r3, [r3, r0]
   17958:	ldr	r0, [r3]
   1795c:	bl	12540 <vfprintf@plt>
   17960:	add	sp, sp, #12
   17964:	pop	{lr}		; (ldr lr, [sp], #4)
   17968:	add	sp, sp, #16
   1796c:	bx	lr
   17970:	andeq	r5, r1, ip, lsr #13
   17974:			; <UNDEFINED> instruction: 0x000001bc
   17978:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1797c:	subs	r5, r1, #0
   17980:	strd	r6, [sp, #8]
   17984:	str	r8, [sp, #16]
   17988:	str	lr, [sp, #20]
   1798c:	ble	17a24 <codadump_filter_get_next_filter@@Base+0x140>
   17990:	ldr	r6, [pc, #252]	; 17a94 <codadump_filter_get_next_filter@@Base+0x1b0>
   17994:	sub	r4, r0, #1
   17998:	add	r5, r4, r5
   1799c:	ldr	r8, [pc, #244]	; 17a98 <codadump_filter_get_next_filter@@Base+0x1b4>
   179a0:	ldr	r7, [pc, #244]	; 17a9c <codadump_filter_get_next_filter@@Base+0x1b8>
   179a4:	add	r6, pc, r6
   179a8:	add	r8, pc, r8
   179ac:	add	r7, pc, r7
   179b0:	b	179e8 <codadump_filter_get_next_filter@@Base+0x104>
   179b4:	cmp	r1, #9
   179b8:	beq	17a84 <codadump_filter_get_next_filter@@Base+0x1a0>
   179bc:	cmp	r1, #10
   179c0:	beq	17a74 <codadump_filter_get_next_filter@@Base+0x190>
   179c4:	cmp	r1, #8
   179c8:	beq	17a64 <codadump_filter_get_next_filter@@Base+0x180>
   179cc:	sub	r3, r1, #32
   179d0:	cmp	r3, #94	; 0x5e
   179d4:	movls	r0, r7
   179d8:	movhi	r0, r8
   179dc:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   179e0:	cmp	r4, r5
   179e4:	beq	17a24 <codadump_filter_get_next_filter@@Base+0x140>
   179e8:	ldrb	r1, [r4, #1]!
   179ec:	cmp	r1, #12
   179f0:	beq	17a38 <codadump_filter_get_next_filter@@Base+0x154>
   179f4:	bls	179b4 <codadump_filter_get_next_filter@@Base+0xd0>
   179f8:	cmp	r1, #34	; 0x22
   179fc:	beq	17a54 <codadump_filter_get_next_filter@@Base+0x170>
   17a00:	cmp	r1, #92	; 0x5c
   17a04:	beq	17a44 <codadump_filter_get_next_filter@@Base+0x160>
   17a08:	cmp	r1, #13
   17a0c:	bne	179cc <codadump_filter_get_next_filter@@Base+0xe8>
   17a10:	ldr	r0, [pc, #136]	; 17aa0 <codadump_filter_get_next_filter@@Base+0x1bc>
   17a14:	add	r0, pc, r0
   17a18:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17a1c:	cmp	r4, r5
   17a20:	bne	179e8 <codadump_filter_get_next_filter@@Base+0x104>
   17a24:	ldrd	r4, [sp]
   17a28:	ldrd	r6, [sp, #8]
   17a2c:	ldr	r8, [sp, #16]
   17a30:	add	sp, sp, #20
   17a34:	pop	{pc}		; (ldr pc, [sp], #4)
   17a38:	mov	r0, r6
   17a3c:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17a40:	b	179e0 <codadump_filter_get_next_filter@@Base+0xfc>
   17a44:	ldr	r0, [pc, #88]	; 17aa4 <codadump_filter_get_next_filter@@Base+0x1c0>
   17a48:	add	r0, pc, r0
   17a4c:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17a50:	b	179e0 <codadump_filter_get_next_filter@@Base+0xfc>
   17a54:	ldr	r0, [pc, #76]	; 17aa8 <codadump_filter_get_next_filter@@Base+0x1c4>
   17a58:	add	r0, pc, r0
   17a5c:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17a60:	b	179e0 <codadump_filter_get_next_filter@@Base+0xfc>
   17a64:	ldr	r0, [pc, #64]	; 17aac <codadump_filter_get_next_filter@@Base+0x1c8>
   17a68:	add	r0, pc, r0
   17a6c:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17a70:	b	179e0 <codadump_filter_get_next_filter@@Base+0xfc>
   17a74:	ldr	r0, [pc, #52]	; 17ab0 <codadump_filter_get_next_filter@@Base+0x1cc>
   17a78:	add	r0, pc, r0
   17a7c:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17a80:	b	179e0 <codadump_filter_get_next_filter@@Base+0xfc>
   17a84:	ldr	r0, [pc, #40]	; 17ab4 <codadump_filter_get_next_filter@@Base+0x1d0>
   17a88:	add	r0, pc, r0
   17a8c:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17a90:	b	179e0 <codadump_filter_get_next_filter@@Base+0xfc>
   17a94:	ldrdeq	r3, [r0], -r0
   17a98:	andeq	r3, r0, r8, lsr #13
   17a9c:	andeq	r3, r0, r4, asr #4
   17aa0:	andeq	r3, r0, r4, ror #2
   17aa4:	andeq	r3, r0, r4, lsr r1
   17aa8:	strdeq	r3, [r0], -r4
   17aac:	strdeq	r3, [r0], -ip
   17ab0:	strdeq	r3, [r0], -r4
   17ab4:	andeq	r3, r0, r0, ror #1
   17ab8:	ldr	r3, [pc, #2264]	; 18398 <codadump_filter_get_next_filter@@Base+0xab4>
   17abc:	mov	r2, #0
   17ac0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17ac4:	mov	r4, r0
   17ac8:	add	r3, pc, r3
   17acc:	ldr	r3, [r3]
   17ad0:	strd	r6, [sp, #8]
   17ad4:	strd	r8, [sp, #16]
   17ad8:	str	sl, [sp, #24]
   17adc:	str	lr, [sp, #28]
   17ae0:	sub	sp, sp, #72	; 0x48
   17ae4:	cmp	r3, r2
   17ae8:	str	r2, [sp, #12]
   17aec:	bne	17bd4 <codadump_filter_get_next_filter@@Base+0x2f0>
   17af0:	add	r1, sp, #8
   17af4:	mov	r0, r4
   17af8:	bl	1230c <coda_cursor_get_type_class@plt>
   17afc:	cmp	r0, #0
   17b00:	bne	17bcc <codadump_filter_get_next_filter@@Base+0x2e8>
   17b04:	ldr	r3, [sp, #8]
   17b08:	cmp	r3, #6
   17b0c:	addls	pc, pc, r3, lsl #2
   17b10:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   17b14:	b	17c70 <codadump_filter_get_next_filter@@Base+0x38c>
   17b18:	b	17cac <codadump_filter_get_next_filter@@Base+0x3c8>
   17b1c:	b	17d1c <codadump_filter_get_next_filter@@Base+0x438>
   17b20:	b	17d1c <codadump_filter_get_next_filter@@Base+0x438>
   17b24:	b	17d1c <codadump_filter_get_next_filter@@Base+0x438>
   17b28:	b	17d1c <codadump_filter_get_next_filter@@Base+0x438>
   17b2c:	b	17c3c <codadump_filter_get_next_filter@@Base+0x358>
   17b30:	add	r1, sp, #40	; 0x28
   17b34:	mov	r0, r4
   17b38:	bl	12414 <coda_cursor_get_string_length@plt>
   17b3c:	cmp	r0, #0
   17b40:	bne	18308 <codadump_filter_get_next_filter@@Base+0xa24>
   17b44:	ldr	r0, [sp, #40]	; 0x28
   17b48:	add	r0, r0, #1
   17b4c:	bl	123b4 <malloc@plt>
   17b50:	subs	r5, r0, #0
   17b54:	beq	18320 <codadump_filter_get_next_filter@@Base+0xa3c>
   17b58:	ldr	r2, [sp, #40]	; 0x28
   17b5c:	mov	r0, r4
   17b60:	mov	r1, r5
   17b64:	add	r2, r2, #1
   17b68:	bl	123d8 <coda_cursor_read_string@plt>
   17b6c:	cmp	r0, #0
   17b70:	bne	18310 <codadump_filter_get_next_filter@@Base+0xa2c>
   17b74:	ldr	r4, [pc, #2080]	; 1839c <codadump_filter_get_next_filter@@Base+0xab8>
   17b78:	add	r4, pc, r4
   17b7c:	mov	r0, r4
   17b80:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17b84:	mov	r0, r5
   17b88:	ldr	r1, [sp, #40]	; 0x28
   17b8c:	bl	17978 <codadump_filter_get_next_filter@@Base+0x94>
   17b90:	mov	r0, r4
   17b94:	ldr	r1, [sp, #40]	; 0x28
   17b98:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17b9c:	mov	r0, r5
   17ba0:	bl	1227c <free@plt>
   17ba4:	ldr	r3, [sp, #12]
   17ba8:	cmp	r3, #0
   17bac:	bne	17c2c <codadump_filter_get_next_filter@@Base+0x348>
   17bb0:	add	sp, sp, #72	; 0x48
   17bb4:	ldrd	r4, [sp]
   17bb8:	ldrd	r6, [sp, #8]
   17bbc:	ldrd	r8, [sp, #16]
   17bc0:	ldr	sl, [sp, #24]
   17bc4:	add	sp, sp, #28
   17bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bcc:	bl	1a7c8 <handle_coda_error@@Base>
   17bd0:	b	17b04 <codadump_filter_get_next_filter@@Base+0x220>
   17bd4:	add	r1, sp, #12
   17bd8:	bl	12300 <coda_cursor_has_attributes@plt>
   17bdc:	cmp	r0, #0
   17be0:	bne	17d7c <codadump_filter_get_next_filter@@Base+0x498>
   17be4:	ldr	r3, [sp, #12]
   17be8:	cmp	r3, #0
   17bec:	beq	17af0 <codadump_filter_get_next_filter@@Base+0x20c>
   17bf0:	ldr	r0, [pc, #1960]	; 183a0 <codadump_filter_get_next_filter@@Base+0xabc>
   17bf4:	add	r0, pc, r0
   17bf8:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17bfc:	mov	r0, r4
   17c00:	bl	12480 <coda_cursor_goto_attributes@plt>
   17c04:	cmp	r0, #0
   17c08:	bne	1821c <codadump_filter_get_next_filter@@Base+0x938>
   17c0c:	mov	r0, r4
   17c10:	bl	17ab8 <codadump_filter_get_next_filter@@Base+0x1d4>
   17c14:	mov	r0, r4
   17c18:	bl	123e4 <coda_cursor_goto_parent@plt>
   17c1c:	ldr	r0, [pc, #1920]	; 183a4 <codadump_filter_get_next_filter@@Base+0xac0>
   17c20:	add	r0, pc, r0
   17c24:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17c28:	b	17af0 <codadump_filter_get_next_filter@@Base+0x20c>
   17c2c:	ldr	r0, [pc, #1908]	; 183a8 <codadump_filter_get_next_filter@@Base+0xac4>
   17c30:	add	r0, pc, r0
   17c34:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17c38:	b	17bb0 <codadump_filter_get_next_filter@@Base+0x2cc>
   17c3c:	add	r1, sp, #28
   17c40:	mov	r0, r4
   17c44:	bl	12348 <coda_cursor_get_special_type@plt>
   17c48:	cmp	r0, #0
   17c4c:	bne	17e84 <codadump_filter_get_next_filter@@Base+0x5a0>
   17c50:	ldr	r3, [sp, #28]
   17c54:	cmp	r3, #3
   17c58:	addls	pc, pc, r3, lsl #2
   17c5c:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   17c60:	b	17f48 <codadump_filter_get_next_filter@@Base+0x664>
   17c64:	b	17f20 <codadump_filter_get_next_filter@@Base+0x63c>
   17c68:	b	17ed8 <codadump_filter_get_next_filter@@Base+0x5f4>
   17c6c:	b	17ea4 <codadump_filter_get_next_filter@@Base+0x5c0>
   17c70:	ldr	r0, [pc, #1844]	; 183ac <codadump_filter_get_next_filter@@Base+0xac8>
   17c74:	add	r0, pc, r0
   17c78:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17c7c:	add	r1, sp, #16
   17c80:	mov	r0, r4
   17c84:	bl	12264 <coda_cursor_get_num_elements@plt>
   17c88:	cmp	r0, #0
   17c8c:	bne	17e8c <codadump_filter_get_next_filter@@Base+0x5a8>
   17c90:	ldr	r3, [sp, #16]
   17c94:	cmp	r3, #0
   17c98:	bgt	17d84 <codadump_filter_get_next_filter@@Base+0x4a0>
   17c9c:	ldr	r0, [pc, #1804]	; 183b0 <codadump_filter_get_next_filter@@Base+0xacc>
   17ca0:	add	r0, pc, r0
   17ca4:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17ca8:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   17cac:	ldr	r0, [pc, #1792]	; 183b4 <codadump_filter_get_next_filter@@Base+0xad0>
   17cb0:	add	r5, sp, #40	; 0x28
   17cb4:	add	r0, pc, r0
   17cb8:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17cbc:	mov	r2, r5
   17cc0:	add	r1, sp, #32
   17cc4:	mov	r0, r4
   17cc8:	bl	12510 <coda_cursor_get_array_dim@plt>
   17ccc:	cmp	r0, #0
   17cd0:	bne	17e9c <codadump_filter_get_next_filter@@Base+0x5b8>
   17cd4:	ldr	r6, [sp, #32]
   17cd8:	cmp	r6, #0
   17cdc:	blt	17d0c <codadump_filter_get_next_filter@@Base+0x428>
   17ce0:	beq	18190 <codadump_filter_get_next_filter@@Base+0x8ac>
   17ce4:	mov	r2, r5
   17ce8:	mov	r5, #1
   17cec:	add	r1, r2, r6, lsl #2
   17cf0:	ldr	r3, [r2], #4
   17cf4:	cmp	r1, r2
   17cf8:	mul	r5, r3, r5
   17cfc:	bne	17cf0 <codadump_filter_get_next_filter@@Base+0x40c>
   17d00:	cmp	r5, #0
   17d04:	subgt	r6, r5, #1
   17d08:	bgt	18194 <codadump_filter_get_next_filter@@Base+0x8b0>
   17d0c:	ldr	r0, [pc, #1700]	; 183b8 <codadump_filter_get_next_filter@@Base+0xad4>
   17d10:	add	r0, pc, r0
   17d14:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17d18:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   17d1c:	add	r1, sp, #28
   17d20:	mov	r0, r4
   17d24:	bl	123a8 <coda_cursor_get_read_type@plt>
   17d28:	cmp	r0, #0
   17d2c:	bne	17e94 <codadump_filter_get_next_filter@@Base+0x5b0>
   17d30:	ldr	r3, [sp, #28]
   17d34:	add	r3, r3, #1
   17d38:	cmp	r3, #13
   17d3c:	addls	pc, pc, r3, lsl #2
   17d40:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   17d44:	b	18158 <codadump_filter_get_next_filter@@Base+0x874>
   17d48:	b	18168 <codadump_filter_get_next_filter@@Base+0x884>
   17d4c:	b	180fc <codadump_filter_get_next_filter@@Base+0x818>
   17d50:	b	18168 <codadump_filter_get_next_filter@@Base+0x884>
   17d54:	b	180fc <codadump_filter_get_next_filter@@Base+0x818>
   17d58:	b	18168 <codadump_filter_get_next_filter@@Base+0x884>
   17d5c:	b	180fc <codadump_filter_get_next_filter@@Base+0x818>
   17d60:	b	180c4 <codadump_filter_get_next_filter@@Base+0x7e0>
   17d64:	b	1808c <codadump_filter_get_next_filter@@Base+0x7a8>
   17d68:	b	18124 <codadump_filter_get_next_filter@@Base+0x840>
   17d6c:	b	18124 <codadump_filter_get_next_filter@@Base+0x840>
   17d70:	b	1804c <codadump_filter_get_next_filter@@Base+0x768>
   17d74:	b	17b30 <codadump_filter_get_next_filter@@Base+0x24c>
   17d78:	b	17fbc <codadump_filter_get_next_filter@@Base+0x6d8>
   17d7c:	bl	1a7c8 <handle_coda_error@@Base>
   17d80:	b	17be4 <codadump_filter_get_next_filter@@Base+0x300>
   17d84:	add	r1, sp, #20
   17d88:	mov	r0, r4
   17d8c:	bl	122c4 <coda_cursor_get_type@plt>
   17d90:	cmp	r0, #0
   17d94:	bne	1822c <codadump_filter_get_next_filter@@Base+0x948>
   17d98:	add	r1, sp, #24
   17d9c:	ldr	r0, [sp, #20]
   17da0:	bl	124c8 <coda_type_get_record_union_status@plt>
   17da4:	cmp	r0, #0
   17da8:	bne	18224 <codadump_filter_get_next_filter@@Base+0x940>
   17dac:	ldr	r6, [sp, #24]
   17db0:	cmp	r6, #0
   17db4:	bne	17f58 <codadump_filter_get_next_filter@@Base+0x674>
   17db8:	mov	r0, r4
   17dbc:	bl	12378 <coda_cursor_goto_first_record_field@plt>
   17dc0:	cmp	r0, #0
   17dc4:	bne	18268 <codadump_filter_get_next_filter@@Base+0x984>
   17dc8:	ldr	r3, [sp, #16]
   17dcc:	mov	r2, #0
   17dd0:	str	r2, [sp, #28]
   17dd4:	cmp	r3, r2
   17dd8:	ble	17e78 <codadump_filter_get_next_filter@@Base+0x594>
   17ddc:	ldr	r9, [pc, #1496]	; 183bc <codadump_filter_get_next_filter@@Base+0xad8>
   17de0:	mov	r7, #1
   17de4:	add	r5, sp, #40	; 0x28
   17de8:	add	r8, sp, #32
   17dec:	ldr	sl, [pc, #1484]	; 183c0 <codadump_filter_get_next_filter@@Base+0xadc>
   17df0:	add	r9, pc, r9
   17df4:	add	sl, pc, sl
   17df8:	mov	r1, r6
   17dfc:	mov	r2, r5
   17e00:	ldr	r0, [sp, #20]
   17e04:	bl	12204 <coda_type_get_record_field_hidden_status@plt>
   17e08:	cmp	r0, #0
   17e0c:	bne	18214 <codadump_filter_get_next_filter@@Base+0x930>
   17e10:	ldr	r3, [sp, #40]	; 0x28
   17e14:	cmp	r3, #0
   17e18:	bne	17e54 <codadump_filter_get_next_filter@@Base+0x570>
   17e1c:	cmp	r7, #0
   17e20:	beq	1823c <codadump_filter_get_next_filter@@Base+0x958>
   17e24:	mov	r2, r8
   17e28:	ldr	r0, [sp, #20]
   17e2c:	ldr	r1, [sp, #28]
   17e30:	bl	12600 <coda_type_get_record_field_name@plt>
   17e34:	cmp	r0, #0
   17e38:	bne	18234 <codadump_filter_get_next_filter@@Base+0x950>
   17e3c:	mov	r0, r9
   17e40:	ldr	r1, [sp, #32]
   17e44:	mov	r7, #0
   17e48:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17e4c:	mov	r0, r4
   17e50:	bl	17ab8 <codadump_filter_get_next_filter@@Base+0x1d4>
   17e54:	ldr	r3, [sp, #16]
   17e58:	ldr	r6, [sp, #28]
   17e5c:	sub	r2, r3, #1
   17e60:	cmp	r2, r6
   17e64:	bgt	181f8 <codadump_filter_get_next_filter@@Base+0x914>
   17e68:	add	r6, r6, #1
   17e6c:	cmp	r6, r3
   17e70:	str	r6, [sp, #28]
   17e74:	blt	17df8 <codadump_filter_get_next_filter@@Base+0x514>
   17e78:	mov	r0, r4
   17e7c:	bl	123e4 <coda_cursor_goto_parent@plt>
   17e80:	b	17c9c <codadump_filter_get_next_filter@@Base+0x3b8>
   17e84:	bl	1a7c8 <handle_coda_error@@Base>
   17e88:	b	17c50 <codadump_filter_get_next_filter@@Base+0x36c>
   17e8c:	bl	1a7c8 <handle_coda_error@@Base>
   17e90:	b	17c90 <codadump_filter_get_next_filter@@Base+0x3ac>
   17e94:	bl	1a7c8 <handle_coda_error@@Base>
   17e98:	b	17d30 <codadump_filter_get_next_filter@@Base+0x44c>
   17e9c:	bl	1a7c8 <handle_coda_error@@Base>
   17ea0:	b	17cd4 <codadump_filter_get_next_filter@@Base+0x3f0>
   17ea4:	mov	r0, r4
   17ea8:	add	r2, sp, #40	; 0x28
   17eac:	add	r1, sp, #32
   17eb0:	bl	124d4 <coda_cursor_read_complex_double_split@plt>
   17eb4:	cmp	r0, #0
   17eb8:	bne	18278 <codadump_filter_get_next_filter@@Base+0x994>
   17ebc:	ldr	r0, [pc, #1280]	; 183c4 <codadump_filter_get_next_filter@@Base+0xae0>
   17ec0:	ldrd	r2, [sp, #32]
   17ec4:	ldrd	r4, [sp, #40]	; 0x28
   17ec8:	add	r0, pc, r0
   17ecc:	strd	r4, [sp]
   17ed0:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17ed4:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   17ed8:	mov	r0, r4
   17edc:	add	r1, sp, #32
   17ee0:	bl	1242c <coda_cursor_read_double@plt>
   17ee4:	cmp	r0, #0
   17ee8:	bne	18280 <codadump_filter_get_next_filter@@Base+0x99c>
   17eec:	vldr	d0, [sp, #32]
   17ef0:	bl	12438 <coda_isNaN@plt>
   17ef4:	cmp	r0, #0
   17ef8:	bne	17f0c <codadump_filter_get_next_filter@@Base+0x628>
   17efc:	vldr	d0, [sp, #32]
   17f00:	bl	122dc <coda_isInf@plt>
   17f04:	cmp	r0, #0
   17f08:	beq	182d0 <codadump_filter_get_next_filter@@Base+0x9ec>
   17f0c:	ldr	r0, [pc, #1204]	; 183c8 <codadump_filter_get_next_filter@@Base+0xae4>
   17f10:	ldrd	r2, [sp, #32]
   17f14:	add	r0, pc, r0
   17f18:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17f1c:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   17f20:	mov	r0, r4
   17f24:	add	r1, sp, #40	; 0x28
   17f28:	bl	1242c <coda_cursor_read_double@plt>
   17f2c:	cmp	r0, #0
   17f30:	bne	18288 <codadump_filter_get_next_filter@@Base+0x9a4>
   17f34:	ldr	r0, [pc, #1168]	; 183cc <codadump_filter_get_next_filter@@Base+0xae8>
   17f38:	ldrd	r2, [sp, #40]	; 0x28
   17f3c:	add	r0, pc, r0
   17f40:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17f44:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   17f48:	ldr	r0, [pc, #1152]	; 183d0 <codadump_filter_get_next_filter@@Base+0xaec>
   17f4c:	add	r0, pc, r0
   17f50:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17f54:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   17f58:	add	r1, sp, #28
   17f5c:	mov	r0, r4
   17f60:	bl	125b8 <coda_cursor_get_available_union_field_index@plt>
   17f64:	cmp	r0, #0
   17f68:	bne	18260 <codadump_filter_get_next_filter@@Base+0x97c>
   17f6c:	add	r2, sp, #40	; 0x28
   17f70:	ldr	r0, [sp, #20]
   17f74:	ldr	r1, [sp, #28]
   17f78:	bl	12600 <coda_type_get_record_field_name@plt>
   17f7c:	cmp	r0, #0
   17f80:	bne	18258 <codadump_filter_get_next_filter@@Base+0x974>
   17f84:	mov	r0, r4
   17f88:	ldr	r1, [sp, #28]
   17f8c:	bl	12384 <coda_cursor_goto_record_field_by_index@plt>
   17f90:	cmp	r0, #0
   17f94:	bne	18270 <codadump_filter_get_next_filter@@Base+0x98c>
   17f98:	ldr	r0, [pc, #1076]	; 183d4 <codadump_filter_get_next_filter@@Base+0xaf0>
   17f9c:	ldr	r1, [sp, #40]	; 0x28
   17fa0:	add	r0, pc, r0
   17fa4:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   17fa8:	mov	r0, r4
   17fac:	bl	17ab8 <codadump_filter_get_next_filter@@Base+0x1d4>
   17fb0:	mov	r0, r4
   17fb4:	bl	123e4 <coda_cursor_goto_parent@plt>
   17fb8:	b	17c9c <codadump_filter_get_next_filter@@Base+0x3b8>
   17fbc:	add	r1, sp, #40	; 0x28
   17fc0:	mov	r0, r4
   17fc4:	bl	12594 <coda_cursor_get_bit_size@plt>
   17fc8:	cmp	r0, #0
   17fcc:	bne	182a8 <codadump_filter_get_next_filter@@Base+0x9c4>
   17fd0:	ldr	r5, [sp, #40]	; 0x28
   17fd4:	ldr	r8, [sp, #44]	; 0x2c
   17fd8:	lsr	r2, r5, #3
   17fdc:	ands	r1, r5, #7
   17fe0:	movne	r1, #1
   17fe4:	orr	r2, r2, r8, lsl #29
   17fe8:	adds	r6, r2, r1
   17fec:	mov	r0, r6
   17ff0:	bl	123b4 <malloc@plt>
   17ff4:	subs	r9, r0, #0
   17ff8:	beq	18350 <codadump_filter_get_next_filter@@Base+0xa6c>
   17ffc:	mov	r0, r4
   18000:	mov	r1, r9
   18004:	stm	sp, {r5, r8}
   18008:	mov	r2, #0
   1800c:	mov	r3, #0
   18010:	bl	12624 <coda_cursor_read_bits@plt>
   18014:	cmp	r0, #0
   18018:	bne	18300 <codadump_filter_get_next_filter@@Base+0xa1c>
   1801c:	ldr	r4, [pc, #948]	; 183d8 <codadump_filter_get_next_filter@@Base+0xaf4>
   18020:	add	r4, pc, r4
   18024:	mov	r0, r4
   18028:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   1802c:	mov	r1, r6
   18030:	mov	r0, r9
   18034:	bl	17978 <codadump_filter_get_next_filter@@Base+0x94>
   18038:	mov	r0, r4
   1803c:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   18040:	mov	r0, r9
   18044:	bl	1227c <free@plt>
   18048:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   1804c:	add	r5, sp, #40	; 0x28
   18050:	mov	r0, r4
   18054:	mov	r1, r5
   18058:	bl	1248c <coda_cursor_read_char@plt>
   1805c:	cmp	r0, #0
   18060:	bne	182b0 <codadump_filter_get_next_filter@@Base+0x9cc>
   18064:	ldr	r4, [pc, #880]	; 183dc <codadump_filter_get_next_filter@@Base+0xaf8>
   18068:	add	r4, pc, r4
   1806c:	mov	r0, r4
   18070:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   18074:	mov	r0, r5
   18078:	mov	r1, #1
   1807c:	bl	17978 <codadump_filter_get_next_filter@@Base+0x94>
   18080:	mov	r0, r4
   18084:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   18088:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   1808c:	mov	r0, r4
   18090:	add	r1, sp, #32
   18094:	bl	12420 <coda_cursor_read_uint64@plt>
   18098:	cmp	r0, #0
   1809c:	bne	182b8 <codadump_filter_get_next_filter@@Base+0x9d4>
   180a0:	add	r4, sp, #40	; 0x28
   180a4:	ldrd	r0, [sp, #32]
   180a8:	mov	r2, r4
   180ac:	bl	12270 <coda_str64u@plt>
   180b0:	ldr	r0, [pc, #808]	; 183e0 <codadump_filter_get_next_filter@@Base+0xafc>
   180b4:	mov	r1, r4
   180b8:	add	r0, pc, r0
   180bc:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   180c0:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   180c4:	mov	r0, r4
   180c8:	add	r1, sp, #32
   180cc:	bl	12534 <coda_cursor_read_int64@plt>
   180d0:	cmp	r0, #0
   180d4:	bne	182c0 <codadump_filter_get_next_filter@@Base+0x9dc>
   180d8:	add	r4, sp, #40	; 0x28
   180dc:	ldrd	r0, [sp, #32]
   180e0:	mov	r2, r4
   180e4:	bl	12630 <coda_str64@plt>
   180e8:	ldr	r0, [pc, #756]	; 183e4 <codadump_filter_get_next_filter@@Base+0xb00>
   180ec:	mov	r1, r4
   180f0:	add	r0, pc, r0
   180f4:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   180f8:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   180fc:	mov	r0, r4
   18100:	add	r1, sp, #40	; 0x28
   18104:	bl	122a0 <coda_cursor_read_uint32@plt>
   18108:	cmp	r0, #0
   1810c:	bne	18318 <codadump_filter_get_next_filter@@Base+0xa34>
   18110:	ldr	r0, [pc, #720]	; 183e8 <codadump_filter_get_next_filter@@Base+0xb04>
   18114:	ldr	r1, [sp, #40]	; 0x28
   18118:	add	r0, pc, r0
   1811c:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   18120:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   18124:	mov	r0, r4
   18128:	add	r1, sp, #40	; 0x28
   1812c:	bl	1242c <coda_cursor_read_double@plt>
   18130:	cmp	r0, #0
   18134:	bne	182a0 <codadump_filter_get_next_filter@@Base+0x9bc>
   18138:	ldr	r1, [sp, #28]
   1813c:	ldrd	r2, [sp, #40]	; 0x28
   18140:	cmp	r1, #8
   18144:	beq	18290 <codadump_filter_get_next_filter@@Base+0x9ac>
   18148:	ldr	r0, [pc, #668]	; 183ec <codadump_filter_get_next_filter@@Base+0xb08>
   1814c:	add	r0, pc, r0
   18150:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   18154:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   18158:	ldr	r0, [pc, #656]	; 183f0 <codadump_filter_get_next_filter@@Base+0xb0c>
   1815c:	add	r0, pc, r0
   18160:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   18164:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   18168:	mov	r0, r4
   1816c:	add	r1, sp, #40	; 0x28
   18170:	bl	125c4 <coda_cursor_read_int32@plt>
   18174:	cmp	r0, #0
   18178:	bne	182c8 <codadump_filter_get_next_filter@@Base+0x9e4>
   1817c:	ldr	r0, [pc, #624]	; 183f4 <codadump_filter_get_next_filter@@Base+0xb10>
   18180:	ldr	r1, [sp, #40]	; 0x28
   18184:	add	r0, pc, r0
   18188:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   1818c:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   18190:	mov	r5, #1
   18194:	mov	r0, r4
   18198:	bl	12354 <coda_cursor_goto_first_array_element@plt>
   1819c:	cmp	r0, #0
   181a0:	bne	18248 <codadump_filter_get_next_filter@@Base+0x964>
   181a4:	ldr	r8, [pc, #588]	; 183f8 <codadump_filter_get_next_filter@@Base+0xb14>
   181a8:	mov	r7, #0
   181ac:	add	r8, pc, r8
   181b0:	mov	r0, r4
   181b4:	bl	17ab8 <codadump_filter_get_next_filter@@Base+0x1d4>
   181b8:	cmp	r7, r6
   181bc:	mov	r0, r8
   181c0:	add	r7, r7, #1
   181c4:	blt	181dc <codadump_filter_get_next_filter@@Base+0x8f8>
   181c8:	cmp	r5, r7
   181cc:	bgt	181b0 <codadump_filter_get_next_filter@@Base+0x8cc>
   181d0:	mov	r0, r4
   181d4:	bl	123e4 <coda_cursor_goto_parent@plt>
   181d8:	b	17d0c <codadump_filter_get_next_filter@@Base+0x428>
   181dc:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   181e0:	mov	r0, r4
   181e4:	bl	12450 <coda_cursor_goto_next_array_element@plt>
   181e8:	cmp	r0, #0
   181ec:	beq	181c8 <codadump_filter_get_next_filter@@Base+0x8e4>
   181f0:	bl	1a7c8 <handle_coda_error@@Base>
   181f4:	b	181c8 <codadump_filter_get_next_filter@@Base+0x8e4>
   181f8:	mov	r0, r4
   181fc:	bl	12570 <coda_cursor_goto_next_record_field@plt>
   18200:	cmp	r0, #0
   18204:	bne	18250 <codadump_filter_get_next_filter@@Base+0x96c>
   18208:	ldr	r3, [sp, #16]
   1820c:	ldr	r6, [sp, #28]
   18210:	b	17e68 <codadump_filter_get_next_filter@@Base+0x584>
   18214:	bl	1a7c8 <handle_coda_error@@Base>
   18218:	b	17e10 <codadump_filter_get_next_filter@@Base+0x52c>
   1821c:	bl	1a7c8 <handle_coda_error@@Base>
   18220:	b	17c0c <codadump_filter_get_next_filter@@Base+0x328>
   18224:	bl	1a7c8 <handle_coda_error@@Base>
   18228:	b	17dac <codadump_filter_get_next_filter@@Base+0x4c8>
   1822c:	bl	1a7c8 <handle_coda_error@@Base>
   18230:	b	17d98 <codadump_filter_get_next_filter@@Base+0x4b4>
   18234:	bl	1a7c8 <handle_coda_error@@Base>
   18238:	b	17e3c <codadump_filter_get_next_filter@@Base+0x558>
   1823c:	mov	r0, sl
   18240:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   18244:	b	17e24 <codadump_filter_get_next_filter@@Base+0x540>
   18248:	bl	1a7c8 <handle_coda_error@@Base>
   1824c:	b	181a4 <codadump_filter_get_next_filter@@Base+0x8c0>
   18250:	bl	1a7c8 <handle_coda_error@@Base>
   18254:	b	18208 <codadump_filter_get_next_filter@@Base+0x924>
   18258:	bl	1a7c8 <handle_coda_error@@Base>
   1825c:	b	17f84 <codadump_filter_get_next_filter@@Base+0x6a0>
   18260:	bl	1a7c8 <handle_coda_error@@Base>
   18264:	b	17f6c <codadump_filter_get_next_filter@@Base+0x688>
   18268:	bl	1a7c8 <handle_coda_error@@Base>
   1826c:	b	17dc8 <codadump_filter_get_next_filter@@Base+0x4e4>
   18270:	bl	1a7c8 <handle_coda_error@@Base>
   18274:	b	17f98 <codadump_filter_get_next_filter@@Base+0x6b4>
   18278:	bl	1a7c8 <handle_coda_error@@Base>
   1827c:	b	17ebc <codadump_filter_get_next_filter@@Base+0x5d8>
   18280:	bl	1a7c8 <handle_coda_error@@Base>
   18284:	b	17eec <codadump_filter_get_next_filter@@Base+0x608>
   18288:	bl	1a7c8 <handle_coda_error@@Base>
   1828c:	b	17f34 <codadump_filter_get_next_filter@@Base+0x650>
   18290:	ldr	r0, [pc, #356]	; 183fc <codadump_filter_get_next_filter@@Base+0xb18>
   18294:	add	r0, pc, r0
   18298:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   1829c:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   182a0:	bl	1a7c8 <handle_coda_error@@Base>
   182a4:	b	18138 <codadump_filter_get_next_filter@@Base+0x854>
   182a8:	bl	1a7c8 <handle_coda_error@@Base>
   182ac:	b	17fd0 <codadump_filter_get_next_filter@@Base+0x6ec>
   182b0:	bl	1a7c8 <handle_coda_error@@Base>
   182b4:	b	18064 <codadump_filter_get_next_filter@@Base+0x780>
   182b8:	bl	1a7c8 <handle_coda_error@@Base>
   182bc:	b	180a0 <codadump_filter_get_next_filter@@Base+0x7bc>
   182c0:	bl	1a7c8 <handle_coda_error@@Base>
   182c4:	b	180d8 <codadump_filter_get_next_filter@@Base+0x7f4>
   182c8:	bl	1a7c8 <handle_coda_error@@Base>
   182cc:	b	1817c <codadump_filter_get_next_filter@@Base+0x898>
   182d0:	ldr	r0, [pc, #296]	; 18400 <codadump_filter_get_next_filter@@Base+0xb1c>
   182d4:	add	r4, sp, #40	; 0x28
   182d8:	mov	r1, r4
   182dc:	vldr	d0, [sp, #32]
   182e0:	add	r0, pc, r0
   182e4:	bl	12258 <coda_time_double_to_string@plt>
   182e8:	cmp	r0, #0
   182ec:	beq	18384 <codadump_filter_get_next_filter@@Base+0xaa0>
   182f0:	ldr	r0, [pc, #268]	; 18404 <codadump_filter_get_next_filter@@Base+0xb20>
   182f4:	add	r0, pc, r0
   182f8:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   182fc:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   18300:	bl	1a7c8 <handle_coda_error@@Base>
   18304:	b	1801c <codadump_filter_get_next_filter@@Base+0x738>
   18308:	bl	1a7c8 <handle_coda_error@@Base>
   1830c:	b	17b44 <codadump_filter_get_next_filter@@Base+0x260>
   18310:	bl	1a7c8 <handle_coda_error@@Base>
   18314:	b	17b74 <codadump_filter_get_next_filter@@Base+0x290>
   18318:	bl	1a7c8 <handle_coda_error@@Base>
   1831c:	b	18110 <codadump_filter_get_next_filter@@Base+0x82c>
   18320:	movw	r1, #303	; 0x12f
   18324:	ldr	r3, [pc, #220]	; 18408 <codadump_filter_get_next_filter@@Base+0xb24>
   18328:	mvn	r0, #0
   1832c:	str	r1, [sp]
   18330:	ldr	r1, [pc, #212]	; 1840c <codadump_filter_get_next_filter@@Base+0xb28>
   18334:	ldr	r2, [sp, #40]	; 0x28
   18338:	add	r3, pc, r3
   1833c:	add	r1, pc, r1
   18340:	add	r2, r2, #1
   18344:	bl	12234 <coda_set_error@plt>
   18348:	bl	1a7c8 <handle_coda_error@@Base>
   1834c:	b	17b58 <codadump_filter_get_next_filter@@Base+0x274>
   18350:	movw	r1, #334	; 0x14e
   18354:	ldr	r3, [pc, #180]	; 18410 <codadump_filter_get_next_filter@@Base+0xb2c>
   18358:	mov	r2, r6
   1835c:	mvn	r0, #0
   18360:	str	r1, [sp]
   18364:	ldr	r1, [pc, #168]	; 18414 <codadump_filter_get_next_filter@@Base+0xb30>
   18368:	add	r3, pc, r3
   1836c:	add	r1, pc, r1
   18370:	bl	12234 <coda_set_error@plt>
   18374:	bl	1a7c8 <handle_coda_error@@Base>
   18378:	ldr	r5, [sp, #40]	; 0x28
   1837c:	ldr	r8, [sp, #44]	; 0x2c
   18380:	b	17ffc <codadump_filter_get_next_filter@@Base+0x718>
   18384:	ldr	r0, [pc, #140]	; 18418 <codadump_filter_get_next_filter@@Base+0xb34>
   18388:	mov	r1, r4
   1838c:	add	r0, pc, r0
   18390:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   18394:	b	17ba4 <codadump_filter_get_next_filter@@Base+0x2c0>
   18398:	andeq	r5, r1, r0, asr #14
   1839c:	andeq	r3, r0, ip, lsl #13
   183a0:	andeq	r3, r0, r4, ror #8
   183a4:	andeq	r3, r0, r4, asr #8
   183a8:	andeq	r3, r0, ip, asr #8
   183ac:	strdeq	r3, [r0], -ip
   183b0:	ldrdeq	r3, [r0], -ip
   183b4:	andeq	r3, r0, ip, asr #7
   183b8:	andeq	r3, r0, ip, ror #9
   183bc:	andeq	r3, r0, r4, lsl #5
   183c0:	andeq	r2, r0, r0, lsr #29
   183c4:	andeq	r3, r0, r4, ror #4
   183c8:	andeq	r2, r0, r0, lsl #25
   183cc:	andeq	r2, r0, r8, asr ip
   183d0:	muleq	r0, ip, r1
   183d4:	ldrdeq	r3, [r0], -r4
   183d8:	andeq	r3, r0, r4, ror #3
   183dc:	muleq	r0, ip, r1
   183e0:	strdeq	r2, [r0], -ip
   183e4:	andeq	r2, r0, r4, asr #23
   183e8:	andeq	r2, r0, r0, ror sl
   183ec:	andeq	r2, r0, r8, asr #20
   183f0:	andeq	r2, r0, ip, lsl #31
   183f4:	ldrdeq	r2, [r0], -ip
   183f8:	andeq	r2, r0, r8, ror #21
   183fc:	strdeq	r2, [r0], -r8
   18400:	andeq	r2, r0, r0, lsl lr
   18404:	andeq	r2, r0, ip, lsl lr
   18408:	andeq	r2, r0, ip, asr #26
   1840c:	andeq	r2, r0, r4, ror #15
   18410:	andeq	r2, r0, ip, lsl sp
   18414:			; <UNDEFINED> instruction: 0x000027b4
   18418:	andeq	r2, r0, ip, asr #15

0001841c <print_json_data@@Base>:
   1841c:	ldr	r2, [pc, #260]	; 18528 <print_json_data@@Base+0x10c>
   18420:	strd	r4, [sp, #-16]!
   18424:	ldr	r4, [pc, #256]	; 1852c <print_json_data@@Base+0x110>
   18428:	str	r6, [sp, #8]
   1842c:	ldr	r3, [pc, #252]	; 18530 <print_json_data@@Base+0x114>
   18430:	add	r2, pc, r2
   18434:	str	lr, [sp, #12]
   18438:	sub	sp, sp, #528	; 0x210
   1843c:	add	r6, sp, #4
   18440:	add	r4, pc, r4
   18444:	str	r0, [r2]
   18448:	mov	r1, r6
   1844c:	ldr	r5, [r4, r3]
   18450:	ldr	r0, [r5]
   18454:	bl	12240 <coda_open@plt>
   18458:	cmp	r0, #0
   1845c:	bne	184dc <print_json_data@@Base+0xc0>
   18460:	add	r5, sp, #8
   18464:	ldr	r1, [sp, #4]
   18468:	mov	r0, r5
   1846c:	bl	1236c <coda_cursor_set_product@plt>
   18470:	cmp	r0, #0
   18474:	bne	184d4 <print_json_data@@Base+0xb8>
   18478:	ldr	r3, [pc, #180]	; 18534 <print_json_data@@Base+0x118>
   1847c:	ldr	r3, [r4, r3]
   18480:	ldr	r1, [r3]
   18484:	cmp	r1, #0
   18488:	beq	1849c <print_json_data@@Base+0x80>
   1848c:	mov	r0, r5
   18490:	bl	1254c <coda_cursor_goto@plt>
   18494:	cmp	r0, #0
   18498:	bne	184f4 <print_json_data@@Base+0xd8>
   1849c:	mov	r0, #0
   184a0:	bl	121e0 <coda_set_option_perform_boundary_checks@plt>
   184a4:	mov	r0, r5
   184a8:	bl	17ab8 <codadump_filter_get_next_filter@@Base+0x1d4>
   184ac:	ldr	r0, [pc, #132]	; 18538 <print_json_data@@Base+0x11c>
   184b0:	add	r0, pc, r0
   184b4:	bl	1792c <codadump_filter_get_next_filter@@Base+0x48>
   184b8:	ldr	r0, [sp, #4]
   184bc:	bl	12528 <coda_close@plt>
   184c0:	add	sp, sp, #528	; 0x210
   184c4:	ldrd	r4, [sp]
   184c8:	ldr	r6, [sp, #8]
   184cc:	add	sp, sp, #12
   184d0:	pop	{pc}		; (ldr pc, [sp], #4)
   184d4:	bl	1a7c8 <handle_coda_error@@Base>
   184d8:	b	18478 <print_json_data@@Base+0x5c>
   184dc:	bl	125e8 <coda_get_errno@plt>
   184e0:	ldr	r3, [r0]
   184e4:	cmn	r3, #21
   184e8:	beq	184fc <print_json_data@@Base+0xe0>
   184ec:	bl	1a7c8 <handle_coda_error@@Base>
   184f0:	b	18460 <print_json_data@@Base+0x44>
   184f4:	bl	1a7c8 <handle_coda_error@@Base>
   184f8:	b	1849c <print_json_data@@Base+0x80>
   184fc:	mov	r0, #0
   18500:	bl	12288 <coda_set_option_use_mmap@plt>
   18504:	mov	r1, r6
   18508:	ldr	r0, [r5]
   1850c:	bl	12240 <coda_open@plt>
   18510:	mov	r5, r0
   18514:	mov	r0, #1
   18518:	bl	12288 <coda_set_option_use_mmap@plt>
   1851c:	cmp	r5, #0
   18520:	bne	184ec <print_json_data@@Base+0xd0>
   18524:	b	18460 <print_json_data@@Base+0x44>
   18528:	ldrdeq	r4, [r1], -r8
   1852c:			; <UNDEFINED> instruction: 0x00014bb8
   18530:			; <UNDEFINED> instruction: 0x000001b4
   18534:	ldrdeq	r0, [r0], -r8
   18538:	andeq	r3, r0, r4, asr #30
   1853c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18540:	add	r1, r1, r1, lsl #2
   18544:	ldr	r3, [pc, #280]	; 18664 <print_json_data@@Base+0x248>
   18548:	strd	r8, [sp, #16]
   1854c:	lsl	r1, r1, #4
   18550:	ldr	r8, [pc, #272]	; 18668 <print_json_data@@Base+0x24c>
   18554:	strd	r6, [sp, #8]
   18558:	str	sl, [sp, #24]
   1855c:	str	lr, [sp, #28]
   18560:	add	r8, pc, r8
   18564:	ldr	r9, [r8, r3]
   18568:	add	r6, r9, r1
   1856c:	ldr	r3, [r6, #804]	; 0x324
   18570:	cmp	r3, #0
   18574:	ble	185f0 <print_json_data@@Base+0x1d4>
   18578:	ldr	r3, [pc, #236]	; 1866c <print_json_data@@Base+0x250>
   1857c:	add	r1, r1, #808	; 0x328
   18580:	mov	r5, r0
   18584:	add	r9, r9, r1
   18588:	mov	r4, #0
   1858c:	ldr	r1, [pc, #220]	; 18670 <print_json_data@@Base+0x254>
   18590:	ldr	r7, [r8, r3]
   18594:	ldr	r3, [r7]
   18598:	cmp	r3, #0
   1859c:	beq	1861c <print_json_data@@Base+0x200>
   185a0:	ldr	r2, [r6, #800]	; 0x320
   185a4:	mov	r0, r5
   185a8:	ldr	r3, [r8, r1]
   185ac:	ldr	r1, [pc, #192]	; 18674 <print_json_data@@Base+0x258>
   185b0:	add	r2, r4, r2
   185b4:	add	ip, r2, #18
   185b8:	ldr	ip, [r3, ip, lsl #2]
   185bc:	add	lr, r3, r2, lsl #2
   185c0:	add	r1, pc, r1
   185c4:	ldr	r3, [lr, #4]
   185c8:	cmp	ip, #0
   185cc:	beq	18640 <print_json_data@@Base+0x224>
   185d0:	ldr	r2, [lr, #36]	; 0x24
   185d4:	bl	12444 <fprintf@plt>
   185d8:	ldr	r3, [r6, #804]	; 0x324
   185dc:	add	r4, r4, #1
   185e0:	mov	r1, r5
   185e4:	mov	r0, #44	; 0x2c
   185e8:	cmp	r4, r3
   185ec:	blt	18608 <print_json_data@@Base+0x1ec>
   185f0:	ldrd	r4, [sp]
   185f4:	ldrd	r6, [sp, #8]
   185f8:	ldrd	r8, [sp, #16]
   185fc:	ldr	sl, [sp, #24]
   18600:	add	sp, sp, #28
   18604:	pop	{pc}		; (ldr pc, [sp], #4)
   18608:	bl	1257c <fputc@plt>
   1860c:	ldr	r3, [r7]
   18610:	ldr	r1, [pc, #88]	; 18670 <print_json_data@@Base+0x254>
   18614:	cmp	r3, #0
   18618:	bne	185a0 <print_json_data@@Base+0x184>
   1861c:	ldr	r3, [r9, r4, lsl #2]
   18620:	mov	r0, r5
   18624:	ldr	r1, [pc, #76]	; 18678 <print_json_data@@Base+0x25c>
   18628:	cmn	r3, #1
   1862c:	mov	r2, r3
   18630:	add	r1, pc, r1
   18634:	beq	18654 <print_json_data@@Base+0x238>
   18638:	bl	12444 <fprintf@plt>
   1863c:	b	185d8 <print_json_data@@Base+0x1bc>
   18640:	ldr	r1, [pc, #52]	; 1867c <print_json_data@@Base+0x260>
   18644:	mov	r2, r3
   18648:	add	r1, pc, r1
   1864c:	bl	12444 <fprintf@plt>
   18650:	b	185d8 <print_json_data@@Base+0x1bc>
   18654:	mov	r1, r5
   18658:	mov	r0, #63	; 0x3f
   1865c:	bl	1257c <fputc@plt>
   18660:	b	185d8 <print_json_data@@Base+0x1bc>
   18664:			; <UNDEFINED> instruction: 0x000001b4
   18668:	muleq	r1, r8, sl
   1866c:			; <UNDEFINED> instruction: 0x000001b0
   18670:	andeq	r0, r0, r4, ror #3
   18674:	muleq	r0, ip, fp
   18678:	andeq	r2, r0, r0, lsr fp
   1867c:	andeq	r2, r0, r8, lsl fp

00018680 <print_full_field_name@@Base>:
   18680:	ldr	r3, [pc, #808]	; 189b0 <print_full_field_name@@Base+0x330>
   18684:	cmp	r1, #1
   18688:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1868c:	mov	r5, r0
   18690:	strd	r6, [sp, #8]
   18694:	strd	r8, [sp, #16]
   18698:	strd	sl, [sp, #24]
   1869c:	mov	fp, r2
   186a0:	add	r3, pc, r3
   186a4:	str	lr, [sp, #32]
   186a8:	sub	sp, sp, #20
   186ac:	beq	18824 <print_full_field_name@@Base+0x1a4>
   186b0:	ldr	r2, [pc, #764]	; 189b4 <print_full_field_name@@Base+0x334>
   186b4:	mov	r8, r1
   186b8:	ldr	r4, [r3, r2]
   186bc:	ldr	r3, [r4, #3748]	; 0xea4
   186c0:	cmp	r3, #0
   186c4:	ble	186fc <print_full_field_name@@Base+0x7c>
   186c8:	add	r7, r4, #3616	; 0xe20
   186cc:	mov	r6, #0
   186d0:	b	186d8 <print_full_field_name@@Base+0x58>
   186d4:	bl	1257c <fputc@plt>
   186d8:	mov	r1, r5
   186dc:	ldr	r0, [r7, #4]!
   186e0:	add	r6, r6, #1
   186e4:	bl	1260c <fputs@plt>
   186e8:	ldr	r3, [r4, #3748]	; 0xea4
   186ec:	mov	r1, r5
   186f0:	mov	r0, #46	; 0x2e
   186f4:	cmp	r3, r6
   186f8:	bgt	186d4 <print_full_field_name@@Base+0x54>
   186fc:	cmp	r8, #2
   18700:	beq	18720 <print_full_field_name@@Base+0xa0>
   18704:	add	sp, sp, #20
   18708:	ldrd	r4, [sp]
   1870c:	ldrd	r6, [sp, #8]
   18710:	ldrd	r8, [sp, #16]
   18714:	ldrd	sl, [sp, #24]
   18718:	add	sp, sp, #32
   1871c:	pop	{pc}		; (ldr pc, [sp], #4)
   18720:	ldr	r3, [r4, #136]	; 0x88
   18724:	cmp	r3, #0
   18728:	ble	1898c <print_full_field_name@@Base+0x30c>
   1872c:	ldr	sl, [pc, #644]	; 189b8 <print_full_field_name@@Base+0x338>
   18730:	mov	r8, #0
   18734:	add	r7, r4, #4
   18738:	mov	r6, r8
   1873c:	add	r9, sp, #12
   18740:	add	sl, pc, sl
   18744:	b	18758 <print_full_field_name@@Base+0xd8>
   18748:	ldr	r3, [r4, #136]	; 0x88
   1874c:	add	r6, r6, #1
   18750:	cmp	r3, r6
   18754:	ble	187d4 <print_full_field_name@@Base+0x154>
   18758:	mov	r1, r9
   1875c:	ldr	r0, [r7, #4]!
   18760:	bl	12648 <coda_type_get_class@plt>
   18764:	cmp	r0, #0
   18768:	bne	18954 <print_full_field_name@@Base+0x2d4>
   1876c:	ldr	ip, [sp, #12]
   18770:	cmp	ip, #1
   18774:	bne	18748 <print_full_field_name@@Base+0xc8>
   18778:	add	r3, r8, r8, lsl #2
   1877c:	add	r3, r4, r3, lsl #4
   18780:	ldr	r2, [r3, #804]	; 0x324
   18784:	cmp	r2, #0
   18788:	ble	18748 <print_full_field_name@@Base+0xc8>
   1878c:	ldr	lr, [r3, #800]	; 0x320
   18790:	mov	r1, r5
   18794:	mov	r0, #44	; 0x2c
   18798:	mov	r2, #2
   1879c:	mov	r3, r5
   187a0:	cmp	lr, #0
   187a4:	bne	18968 <print_full_field_name@@Base+0x2e8>
   187a8:	mov	r1, ip
   187ac:	mov	r0, sl
   187b0:	bl	12360 <fwrite@plt>
   187b4:	mov	r1, r8
   187b8:	mov	r0, r5
   187bc:	bl	1853c <print_json_data@@Base+0x120>
   187c0:	ldr	r3, [r4, #136]	; 0x88
   187c4:	add	r6, r6, #1
   187c8:	add	r8, r8, #1
   187cc:	cmp	r3, r6
   187d0:	bgt	18758 <print_full_field_name@@Base+0xd8>
   187d4:	cmp	fp, #0
   187d8:	beq	1895c <print_full_field_name@@Base+0x2dc>
   187dc:	ldr	r3, [r4, #3360]	; 0xd20
   187e0:	cmp	r3, r8
   187e4:	ble	1895c <print_full_field_name@@Base+0x2dc>
   187e8:	add	r3, r8, r8, lsl #2
   187ec:	add	r4, r4, r3, lsl #4
   187f0:	ldr	r3, [r4, #800]	; 0x320
   187f4:	cmp	r3, #0
   187f8:	beq	18970 <print_full_field_name@@Base+0x2f0>
   187fc:	mov	r1, r5
   18800:	mov	r0, #44	; 0x2c
   18804:	bl	1257c <fputc@plt>
   18808:	mov	r1, r8
   1880c:	mov	r0, r5
   18810:	bl	1853c <print_json_data@@Base+0x120>
   18814:	mov	r1, r5
   18818:	mov	r0, #93	; 0x5d
   1881c:	bl	1257c <fputc@plt>
   18820:	b	18704 <print_full_field_name@@Base+0x84>
   18824:	ldr	r2, [pc, #392]	; 189b4 <print_full_field_name@@Base+0x334>
   18828:	ldr	r4, [r3, r2]
   1882c:	ldr	r3, [r4, #136]	; 0x88
   18830:	cmp	r3, #0
   18834:	ble	189a8 <print_full_field_name@@Base+0x328>
   18838:	ldr	r3, [pc, #380]	; 189bc <print_full_field_name@@Base+0x33c>
   1883c:	mov	r8, #0
   18840:	add	r7, r4, #4
   18844:	mov	sl, r8
   18848:	mov	r6, r8
   1884c:	add	r9, sp, #12
   18850:	add	r3, pc, r3
   18854:	str	r3, [sp, #4]
   18858:	b	188b8 <print_full_field_name@@Base+0x238>
   1885c:	cmp	r3, #1
   18860:	bne	188a8 <print_full_field_name@@Base+0x228>
   18864:	cmp	r6, #0
   18868:	beq	18944 <print_full_field_name@@Base+0x2c4>
   1886c:	add	r3, r8, r8, lsl #2
   18870:	add	r3, r4, r3, lsl #4
   18874:	ldr	r3, [r3, #804]	; 0x324
   18878:	cmp	r3, #0
   1887c:	ble	188a4 <print_full_field_name@@Base+0x224>
   18880:	mov	r1, r5
   18884:	mov	r0, #91	; 0x5b
   18888:	bl	1257c <fputc@plt>
   1888c:	mov	r1, r8
   18890:	mov	r0, r5
   18894:	bl	1853c <print_json_data@@Base+0x120>
   18898:	mov	r1, r5
   1889c:	mov	r0, #93	; 0x5d
   188a0:	bl	1257c <fputc@plt>
   188a4:	add	r8, r8, #1
   188a8:	ldr	r3, [r4, #136]	; 0x88
   188ac:	add	r6, r6, #1
   188b0:	cmp	r3, r6
   188b4:	ble	18900 <print_full_field_name@@Base+0x280>
   188b8:	mov	r1, r9
   188bc:	ldr	r0, [r7, #4]!
   188c0:	bl	12648 <coda_type_get_class@plt>
   188c4:	cmp	r0, #0
   188c8:	bne	1893c <print_full_field_name@@Base+0x2bc>
   188cc:	ldr	r3, [sp, #12]
   188d0:	cmp	r3, #0
   188d4:	bne	1885c <print_full_field_name@@Base+0x1dc>
   188d8:	add	r3, r4, sl, lsl #2
   188dc:	mov	r0, r5
   188e0:	ldr	r1, [sp, #4]
   188e4:	add	r6, r6, #1
   188e8:	add	sl, sl, #1
   188ec:	ldr	r2, [r3, #3620]	; 0xe24
   188f0:	bl	12444 <fprintf@plt>
   188f4:	ldr	r3, [r4, #136]	; 0x88
   188f8:	cmp	r3, r6
   188fc:	bgt	188b8 <print_full_field_name@@Base+0x238>
   18900:	cmp	fp, #0
   18904:	beq	18704 <print_full_field_name@@Base+0x84>
   18908:	ldr	r3, [r4, #3360]	; 0xd20
   1890c:	cmp	r3, r8
   18910:	ble	18704 <print_full_field_name@@Base+0x84>
   18914:	mov	r1, r5
   18918:	mov	r0, #91	; 0x5b
   1891c:	bl	1257c <fputc@plt>
   18920:	mov	r1, r8
   18924:	mov	r0, r5
   18928:	bl	1853c <print_json_data@@Base+0x120>
   1892c:	mov	r1, r5
   18930:	mov	r0, #93	; 0x5d
   18934:	bl	1257c <fputc@plt>
   18938:	b	18704 <print_full_field_name@@Base+0x84>
   1893c:	bl	1a7c8 <handle_coda_error@@Base>
   18940:	b	188cc <print_full_field_name@@Base+0x24c>
   18944:	mov	r1, r5
   18948:	mov	r0, #47	; 0x2f
   1894c:	bl	1257c <fputc@plt>
   18950:	b	1886c <print_full_field_name@@Base+0x1ec>
   18954:	bl	1a7c8 <handle_coda_error@@Base>
   18958:	b	1876c <print_full_field_name@@Base+0xec>
   1895c:	cmp	r8, #0
   18960:	beq	18704 <print_full_field_name@@Base+0x84>
   18964:	b	18814 <print_full_field_name@@Base+0x194>
   18968:	bl	1257c <fputc@plt>
   1896c:	b	187b4 <print_full_field_name@@Base+0x134>
   18970:	ldr	r0, [pc, #72]	; 189c0 <print_full_field_name@@Base+0x340>
   18974:	mov	r3, r5
   18978:	mov	r2, #2
   1897c:	mov	r1, #1
   18980:	add	r0, pc, r0
   18984:	bl	12360 <fwrite@plt>
   18988:	b	18808 <print_full_field_name@@Base+0x188>
   1898c:	cmp	fp, #0
   18990:	beq	18704 <print_full_field_name@@Base+0x84>
   18994:	ldr	r3, [r4, #3360]	; 0xd20
   18998:	cmp	r3, #0
   1899c:	ble	18704 <print_full_field_name@@Base+0x84>
   189a0:	mov	r8, #0
   189a4:	b	187e8 <print_full_field_name@@Base+0x168>
   189a8:	mov	r8, #0
   189ac:	b	18900 <print_full_field_name@@Base+0x280>
   189b0:	andeq	r4, r1, r8, asr r9
   189b4:			; <UNDEFINED> instruction: 0x000001b4
   189b8:	andeq	r2, r0, r8, lsr #20
   189bc:	andeq	r2, r0, r4, lsl r9
   189c0:	andeq	r2, r0, r8, ror #15
   189c4:	strd	r4, [sp, #-16]!
   189c8:	ldr	r4, [pc, #652]	; 18c5c <print_full_field_name@@Base+0x5dc>
   189cc:	str	r6, [sp, #8]
   189d0:	ldr	r3, [pc, #648]	; 18c60 <print_full_field_name@@Base+0x5e0>
   189d4:	str	lr, [sp, #12]
   189d8:	sub	sp, sp, #8
   189dc:	add	r4, pc, r4
   189e0:	ldr	r3, [r4, r3]
   189e4:	ldr	r2, [r3]
   189e8:	cmp	r2, #0
   189ec:	beq	18a0c <print_full_field_name@@Base+0x38c>
   189f0:	cmp	r2, #1
   189f4:	beq	18aac <print_full_field_name@@Base+0x42c>
   189f8:	add	sp, sp, #8
   189fc:	ldrd	r4, [sp]
   18a00:	ldr	r6, [sp, #8]
   18a04:	add	sp, sp, #12
   18a08:	pop	{pc}		; (ldr pc, [sp], #4)
   18a0c:	ldr	r3, [pc, #592]	; 18c64 <print_full_field_name@@Base+0x5e4>
   18a10:	mov	r1, #1
   18a14:	ldr	r5, [r4, r3]
   18a18:	ldr	r0, [r5]
   18a1c:	bl	18680 <print_full_field_name@@Base>
   18a20:	ldr	r3, [pc, #576]	; 18c68 <print_full_field_name@@Base+0x5e8>
   18a24:	ldr	r3, [r4, r3]
   18a28:	ldr	r3, [r3]
   18a2c:	cmp	r3, #0
   18a30:	bne	18ab4 <print_full_field_name@@Base+0x434>
   18a34:	ldr	r3, [pc, #560]	; 18c6c <print_full_field_name@@Base+0x5ec>
   18a38:	ldr	r3, [r4, r3]
   18a3c:	ldr	r3, [r3]
   18a40:	cmp	r3, #0
   18a44:	bne	18ba0 <print_full_field_name@@Base+0x520>
   18a48:	ldr	r3, [pc, #544]	; 18c70 <print_full_field_name@@Base+0x5f0>
   18a4c:	ldr	r3, [r4, r3]
   18a50:	ldr	r3, [r3]
   18a54:	cmp	r3, #0
   18a58:	bne	18b54 <print_full_field_name@@Base+0x4d4>
   18a5c:	mov	r0, #10
   18a60:	bl	124a4 <putchar@plt>
   18a64:	ldr	r3, [pc, #520]	; 18c74 <print_full_field_name@@Base+0x5f4>
   18a68:	ldr	r3, [r4, r3]
   18a6c:	ldr	r3, [r3]
   18a70:	cmp	r3, #0
   18a74:	beq	189f8 <print_full_field_name@@Base+0x378>
   18a78:	ldr	r3, [pc, #504]	; 18c78 <print_full_field_name@@Base+0x5f8>
   18a7c:	ldr	r5, [r4, r3]
   18a80:	ldr	r3, [r5]
   18a84:	cmp	r3, #0
   18a88:	ble	189f8 <print_full_field_name@@Base+0x378>
   18a8c:	mov	r4, #0
   18a90:	mov	r0, r4
   18a94:	add	r4, r4, #1
   18a98:	bl	165f8 <print_all_distinct_dims@@Base>
   18a9c:	ldr	r3, [r5]
   18aa0:	cmp	r4, r3
   18aa4:	blt	18a90 <print_full_field_name@@Base+0x410>
   18aa8:	b	189f8 <print_full_field_name@@Base+0x378>
   18aac:	bl	14af0 <export_data_element_to_ascii@@Base>
   18ab0:	b	189f8 <print_full_field_name@@Base+0x378>
   18ab4:	ldr	r3, [pc, #448]	; 18c7c <print_full_field_name@@Base+0x5fc>
   18ab8:	mov	r1, sp
   18abc:	ldr	r6, [r4, r3]
   18ac0:	ldr	r3, [r6, #136]	; 0x88
   18ac4:	add	r3, r3, #2
   18ac8:	ldr	r0, [r6, r3, lsl #2]
   18acc:	bl	12648 <coda_type_get_class@plt>
   18ad0:	cmp	r0, #0
   18ad4:	bne	18c24 <print_full_field_name@@Base+0x5a4>
   18ad8:	ldr	r2, [sp]
   18adc:	add	r1, sp, #4
   18ae0:	ldr	r3, [r6, #136]	; 0x88
   18ae4:	cmp	r2, #6
   18ae8:	add	r3, r3, #2
   18aec:	ldr	r0, [r6, r3, lsl #2]
   18af0:	beq	18bf4 <print_full_field_name@@Base+0x574>
   18af4:	bl	12408 <coda_type_get_read_type@plt>
   18af8:	cmp	r0, #0
   18afc:	bne	18bec <print_full_field_name@@Base+0x56c>
   18b00:	ldr	r0, [sp, #4]
   18b04:	bl	12504 <coda_type_get_native_type_name@plt>
   18b08:	mov	r1, r0
   18b0c:	ldr	r0, [pc, #364]	; 18c80 <print_full_field_name@@Base+0x600>
   18b10:	add	r0, pc, r0
   18b14:	bl	12210 <printf@plt>
   18b18:	ldr	r3, [sp, #4]
   18b1c:	sub	r3, r3, #11
   18b20:	cmp	r3, #1
   18b24:	bhi	18a34 <print_full_field_name@@Base+0x3b4>
   18b28:	mov	r0, #40	; 0x28
   18b2c:	bl	124a4 <putchar@plt>
   18b30:	ldr	r1, [r6, #3360]	; 0xd20
   18b34:	cmp	r1, #0
   18b38:	ble	18c3c <print_full_field_name@@Base+0x5bc>
   18b3c:	sub	r1, r1, #1
   18b40:	ldr	r0, [r5]
   18b44:	bl	1853c <print_json_data@@Base+0x120>
   18b48:	mov	r0, #41	; 0x29
   18b4c:	bl	124a4 <putchar@plt>
   18b50:	b	18a34 <print_full_field_name@@Base+0x3b4>
   18b54:	ldr	r3, [pc, #288]	; 18c7c <print_full_field_name@@Base+0x5fc>
   18b58:	add	r1, sp, #4
   18b5c:	ldr	r2, [r4, r3]
   18b60:	ldr	r3, [r2, #136]	; 0x88
   18b64:	add	r3, r3, #2
   18b68:	ldr	r0, [r2, r3, lsl #2]
   18b6c:	bl	1233c <coda_type_get_description@plt>
   18b70:	cmp	r0, #0
   18b74:	bne	18c2c <print_full_field_name@@Base+0x5ac>
   18b78:	ldr	r1, [sp, #4]
   18b7c:	cmp	r1, #0
   18b80:	beq	18a5c <print_full_field_name@@Base+0x3dc>
   18b84:	ldrb	r3, [r1]
   18b88:	cmp	r3, #0
   18b8c:	beq	18a5c <print_full_field_name@@Base+0x3dc>
   18b90:	ldr	r0, [pc, #236]	; 18c84 <print_full_field_name@@Base+0x604>
   18b94:	add	r0, pc, r0
   18b98:	bl	12210 <printf@plt>
   18b9c:	b	18a5c <print_full_field_name@@Base+0x3dc>
   18ba0:	ldr	r3, [pc, #212]	; 18c7c <print_full_field_name@@Base+0x5fc>
   18ba4:	add	r1, sp, #4
   18ba8:	ldr	r2, [r4, r3]
   18bac:	ldr	r3, [r2, #136]	; 0x88
   18bb0:	add	r3, r3, #2
   18bb4:	ldr	r0, [r2, r3, lsl #2]
   18bb8:	bl	12330 <coda_type_get_unit@plt>
   18bbc:	cmp	r0, #0
   18bc0:	bne	18c1c <print_full_field_name@@Base+0x59c>
   18bc4:	ldr	r1, [sp, #4]
   18bc8:	cmp	r1, #0
   18bcc:	beq	18a48 <print_full_field_name@@Base+0x3c8>
   18bd0:	ldrb	r3, [r1]
   18bd4:	cmp	r3, #0
   18bd8:	beq	18a48 <print_full_field_name@@Base+0x3c8>
   18bdc:	ldr	r0, [pc, #164]	; 18c88 <print_full_field_name@@Base+0x608>
   18be0:	add	r0, pc, r0
   18be4:	bl	12210 <printf@plt>
   18be8:	b	18a48 <print_full_field_name@@Base+0x3c8>
   18bec:	bl	1a7c8 <handle_coda_error@@Base>
   18bf0:	b	18b00 <print_full_field_name@@Base+0x480>
   18bf4:	bl	124bc <coda_type_get_special_type@plt>
   18bf8:	cmp	r0, #0
   18bfc:	bne	18c34 <print_full_field_name@@Base+0x5b4>
   18c00:	ldr	r0, [sp, #4]
   18c04:	bl	121b0 <coda_type_get_special_type_name@plt>
   18c08:	mov	r1, r0
   18c0c:	ldr	r0, [pc, #120]	; 18c8c <print_full_field_name@@Base+0x60c>
   18c10:	add	r0, pc, r0
   18c14:	bl	12210 <printf@plt>
   18c18:	b	18a34 <print_full_field_name@@Base+0x3b4>
   18c1c:	bl	1a7c8 <handle_coda_error@@Base>
   18c20:	b	18bc4 <print_full_field_name@@Base+0x544>
   18c24:	bl	1a7c8 <handle_coda_error@@Base>
   18c28:	b	18ad8 <print_full_field_name@@Base+0x458>
   18c2c:	bl	1a7c8 <handle_coda_error@@Base>
   18c30:	b	18b78 <print_full_field_name@@Base+0x4f8>
   18c34:	bl	1a7c8 <handle_coda_error@@Base>
   18c38:	b	18c00 <print_full_field_name@@Base+0x580>
   18c3c:	ldr	r3, [pc, #76]	; 18c90 <print_full_field_name@@Base+0x610>
   18c40:	mov	r2, #238	; 0xee
   18c44:	ldr	r1, [pc, #72]	; 18c94 <print_full_field_name@@Base+0x614>
   18c48:	ldr	r0, [pc, #72]	; 18c98 <print_full_field_name@@Base+0x618>
   18c4c:	add	r3, pc, r3
   18c50:	add	r1, pc, r1
   18c54:	add	r0, pc, r0
   18c58:	bl	1263c <__assert_fail@plt>
   18c5c:	andeq	r4, r1, ip, lsl r6
   18c60:	ldrdeq	r0, [r0], -r4
   18c64:	ldrdeq	r0, [r0], -ip
   18c68:	andeq	r0, r0, r4, asr #3
   18c6c:	andeq	r0, r0, ip, lsr #3
   18c70:	andeq	r0, r0, r8, asr #3
   18c74:	andeq	r0, r0, r0, lsr #3
   18c78:	andeq	r0, r0, r4, ror #3
   18c7c:			; <UNDEFINED> instruction: 0x000001b4
   18c80:	andeq	r2, r0, ip, asr r6
   18c84:	andeq	r2, r0, ip, ror #12
   18c88:	andeq	r2, r0, r8, lsl r6
   18c8c:	andeq	r2, r0, ip, asr r5
   18c90:	andeq	r2, r0, ip, ror #9
   18c94:	andeq	r2, r0, r0, lsr #10
   18c98:	andeq	r2, r0, r4, lsl #11
   18c9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18ca0:	strd	r6, [sp, #8]
   18ca4:	ldr	r6, [pc, #872]	; 19014 <print_full_field_name@@Base+0x994>
   18ca8:	str	r8, [sp, #16]
   18cac:	ldr	r3, [pc, #868]	; 19018 <print_full_field_name@@Base+0x998>
   18cb0:	str	lr, [sp, #20]
   18cb4:	sub	sp, sp, #16
   18cb8:	add	r1, sp, #4
   18cbc:	add	r6, pc, r6
   18cc0:	ldr	r4, [r6, r3]
   18cc4:	ldr	r3, [r4, #136]	; 0x88
   18cc8:	add	r3, r3, #2
   18ccc:	ldr	r0, [r4, r3, lsl #2]
   18cd0:	bl	12648 <coda_type_get_class@plt>
   18cd4:	cmp	r0, #0
   18cd8:	bne	18f1c <print_full_field_name@@Base+0x89c>
   18cdc:	ldr	r3, [sp, #4]
   18ce0:	cmp	r3, #6
   18ce4:	addls	pc, pc, r3, lsl #2
   18ce8:	b	18e20 <print_full_field_name@@Base+0x7a0>
   18cec:	b	18d08 <print_full_field_name@@Base+0x688>
   18cf0:	b	18eb4 <print_full_field_name@@Base+0x834>
   18cf4:	b	18e80 <print_full_field_name@@Base+0x800>
   18cf8:	b	18e80 <print_full_field_name@@Base+0x800>
   18cfc:	b	18e80 <print_full_field_name@@Base+0x800>
   18d00:	b	18e80 <print_full_field_name@@Base+0x800>
   18d04:	b	18e38 <print_full_field_name@@Base+0x7b8>
   18d08:	ldr	r3, [r4, #136]	; 0x88
   18d0c:	cmp	r3, #30
   18d10:	bgt	18e20 <print_full_field_name@@Base+0x7a0>
   18d14:	ldr	r2, [r4, #3748]	; 0xea4
   18d18:	add	r3, r3, #2
   18d1c:	add	r1, sp, #8
   18d20:	ldr	r0, [r4, r3, lsl #2]
   18d24:	add	r3, r2, #1
   18d28:	str	r3, [r4, #3748]	; 0xea4
   18d2c:	bl	123f0 <coda_type_get_num_record_fields@plt>
   18d30:	cmp	r0, #0
   18d34:	beq	18d3c <print_full_field_name@@Base+0x6bc>
   18d38:	bl	1a7c8 <handle_coda_error@@Base>
   18d3c:	ldr	r3, [r4, #136]	; 0x88
   18d40:	ldr	r2, [r4, #796]	; 0x31c
   18d44:	add	r2, r2, #166	; 0xa6
   18d48:	ldr	r8, [r4, r2, lsl #2]
   18d4c:	add	r2, r3, #1
   18d50:	str	r2, [r4, #136]	; 0x88
   18d54:	cmp	r8, #0
   18d58:	beq	18f84 <print_full_field_name@@Base+0x904>
   18d5c:	mov	r0, r8
   18d60:	add	r7, sp, #12
   18d64:	bl	17854 <codadump_filter_get_fieldname@@Base>
   18d68:	subs	r5, r0, #0
   18d6c:	beq	18fcc <print_full_field_name@@Base+0x94c>
   18d70:	ldr	r3, [r4, #136]	; 0x88
   18d74:	mov	r2, r7
   18d78:	mov	r1, r5
   18d7c:	add	r3, r3, #1
   18d80:	ldr	r0, [r4, r3, lsl #2]
   18d84:	bl	12558 <coda_type_get_record_field_index_from_name@plt>
   18d88:	cmp	r0, #0
   18d8c:	beq	18da4 <print_full_field_name@@Base+0x724>
   18d90:	bl	125e8 <coda_get_errno@plt>
   18d94:	ldr	r3, [r0]
   18d98:	cmn	r3, #102	; 0x66
   18d9c:	beq	18ff0 <print_full_field_name@@Base+0x970>
   18da0:	bl	1a7c8 <handle_coda_error@@Base>
   18da4:	ldr	r5, [r4, #796]	; 0x31c
   18da8:	add	r3, r5, #166	; 0xa6
   18dac:	add	r5, r5, #167	; 0xa7
   18db0:	ldr	r0, [r4, r3, lsl #2]
   18db4:	bl	1789c <codadump_filter_get_subfilter@@Base>
   18db8:	ldr	r3, [r4, #796]	; 0x31c
   18dbc:	mov	r1, #1
   18dc0:	str	r0, [r4, r5, lsl #2]
   18dc4:	ldr	r0, [sp, #12]
   18dc8:	add	r3, r3, r1
   18dcc:	str	r3, [r4, #796]	; 0x31c
   18dd0:	bl	19030 <print_full_field_name@@Base+0x9b0>
   18dd4:	ldr	r5, [r4, #796]	; 0x31c
   18dd8:	sub	r3, r5, #1
   18ddc:	add	r5, r5, #165	; 0xa5
   18de0:	ldr	r0, [r4, r5, lsl #2]
   18de4:	str	r3, [r4, #796]	; 0x31c
   18de8:	bl	178e4 <codadump_filter_get_next_filter@@Base>
   18dec:	ldr	r3, [r4, #796]	; 0x31c
   18df0:	str	r0, [r4, r5, lsl #2]
   18df4:	add	r3, r3, #166	; 0xa6
   18df8:	ldr	r0, [r4, r3, lsl #2]
   18dfc:	cmp	r0, #0
   18e00:	bne	18d64 <print_full_field_name@@Base+0x6e4>
   18e04:	ldr	r2, [r4, #136]	; 0x88
   18e08:	str	r8, [r4, r3, lsl #2]
   18e0c:	sub	r3, r2, #1
   18e10:	ldr	r2, [r4, #3748]	; 0xea4
   18e14:	str	r3, [r4, #136]	; 0x88
   18e18:	sub	r3, r2, #1
   18e1c:	str	r3, [r4, #3748]	; 0xea4
   18e20:	add	sp, sp, #16
   18e24:	ldrd	r4, [sp]
   18e28:	ldrd	r6, [sp, #8]
   18e2c:	ldr	r8, [sp, #16]
   18e30:	add	sp, sp, #20
   18e34:	pop	{pc}		; (ldr pc, [sp], #4)
   18e38:	bl	121d4 <coda_get_option_bypass_special_types@plt>
   18e3c:	cmp	r0, #0
   18e40:	ldr	r3, [r4, #136]	; 0x88
   18e44:	bne	18f4c <print_full_field_name@@Base+0x8cc>
   18e48:	add	r3, r3, #2
   18e4c:	add	r1, sp, #12
   18e50:	ldr	r0, [r4, r3, lsl #2]
   18e54:	bl	124bc <coda_type_get_special_type@plt>
   18e58:	cmp	r0, #0
   18e5c:	bne	18fc4 <print_full_field_name@@Base+0x944>
   18e60:	ldr	r3, [sp, #12]
   18e64:	cmp	r3, #3
   18e68:	addls	pc, pc, r3, lsl #2
   18e6c:	b	18e20 <print_full_field_name@@Base+0x7a0>
   18e70:	b	18e20 <print_full_field_name@@Base+0x7a0>
   18e74:	b	18eac <print_full_field_name@@Base+0x82c>
   18e78:	b	18eac <print_full_field_name@@Base+0x82c>
   18e7c:	b	18f24 <print_full_field_name@@Base+0x8a4>
   18e80:	ldr	r3, [r4, #136]	; 0x88
   18e84:	add	r1, sp, #12
   18e88:	add	r3, r3, #2
   18e8c:	ldr	r0, [r4, r3, lsl #2]
   18e90:	bl	12408 <coda_type_get_read_type@plt>
   18e94:	cmp	r0, #0
   18e98:	bne	18f6c <print_full_field_name@@Base+0x8ec>
   18e9c:	ldr	r3, [sp, #12]
   18ea0:	sub	r3, r3, #11
   18ea4:	cmp	r3, #1
   18ea8:	bls	18f24 <print_full_field_name@@Base+0x8a4>
   18eac:	bl	189c4 <print_full_field_name@@Base+0x344>
   18eb0:	b	18e20 <print_full_field_name@@Base+0x7a0>
   18eb4:	ldr	r3, [r4, #136]	; 0x88
   18eb8:	cmp	r3, #30
   18ebc:	bgt	18e20 <print_full_field_name@@Base+0x7a0>
   18ec0:	bl	16864 <dim_enter_array@@Base>
   18ec4:	ldr	r3, [r4, #136]	; 0x88
   18ec8:	ldr	r2, [r4, #3360]	; 0xd20
   18ecc:	add	ip, r3, #1
   18ed0:	add	r1, r3, #3
   18ed4:	add	r3, r3, #2
   18ed8:	add	r1, r4, r1, lsl #2
   18edc:	add	r2, r2, #1
   18ee0:	ldr	r0, [r4, r3, lsl #2]
   18ee4:	str	ip, [r4, #136]	; 0x88
   18ee8:	str	r2, [r4, #3360]	; 0xd20
   18eec:	bl	124e0 <coda_type_get_array_base_type@plt>
   18ef0:	cmp	r0, #0
   18ef4:	bne	18f7c <print_full_field_name@@Base+0x8fc>
   18ef8:	bl	18c9c <print_full_field_name@@Base+0x61c>
   18efc:	ldr	r2, [r4, #136]	; 0x88
   18f00:	ldr	r3, [r4, #3360]	; 0xd20
   18f04:	sub	r2, r2, #1
   18f08:	sub	r3, r3, #1
   18f0c:	str	r2, [r4, #136]	; 0x88
   18f10:	str	r3, [r4, #3360]	; 0xd20
   18f14:	bl	171ec <dim_leave_array@@Base>
   18f18:	b	18e20 <print_full_field_name@@Base+0x7a0>
   18f1c:	bl	1a7c8 <handle_coda_error@@Base>
   18f20:	b	18cdc <print_full_field_name@@Base+0x65c>
   18f24:	bl	16864 <dim_enter_array@@Base>
   18f28:	ldr	r3, [r4, #3360]	; 0xd20
   18f2c:	add	r3, r3, #1
   18f30:	str	r3, [r4, #3360]	; 0xd20
   18f34:	bl	189c4 <print_full_field_name@@Base+0x344>
   18f38:	ldr	r3, [r4, #3360]	; 0xd20
   18f3c:	sub	r3, r3, #1
   18f40:	str	r3, [r4, #3360]	; 0xd20
   18f44:	bl	171ec <dim_leave_array@@Base>
   18f48:	b	18e20 <print_full_field_name@@Base+0x7a0>
   18f4c:	add	r3, r3, #2
   18f50:	add	r1, r4, r3, lsl #2
   18f54:	ldr	r0, [r4, r3, lsl #2]
   18f58:	bl	125f4 <coda_type_get_special_base_type@plt>
   18f5c:	cmp	r0, #0
   18f60:	bne	18f74 <print_full_field_name@@Base+0x8f4>
   18f64:	bl	18c9c <print_full_field_name@@Base+0x61c>
   18f68:	b	18e20 <print_full_field_name@@Base+0x7a0>
   18f6c:	bl	1a7c8 <handle_coda_error@@Base>
   18f70:	b	18e9c <print_full_field_name@@Base+0x81c>
   18f74:	bl	1a7c8 <handle_coda_error@@Base>
   18f78:	b	18f64 <print_full_field_name@@Base+0x8e4>
   18f7c:	bl	1a7c8 <handle_coda_error@@Base>
   18f80:	b	18ef8 <print_full_field_name@@Base+0x878>
   18f84:	ldr	r2, [sp, #8]
   18f88:	str	r8, [sp, #12]
   18f8c:	cmp	r2, #0
   18f90:	ble	18e10 <print_full_field_name@@Base+0x790>
   18f94:	mov	r0, r8
   18f98:	mov	r1, #0
   18f9c:	bl	19030 <print_full_field_name@@Base+0x9b0>
   18fa0:	ldr	r3, [sp, #8]
   18fa4:	ldr	r0, [sp, #12]
   18fa8:	add	r0, r0, #1
   18fac:	cmp	r0, r3
   18fb0:	str	r0, [sp, #12]
   18fb4:	blt	18f98 <print_full_field_name@@Base+0x918>
   18fb8:	ldr	r3, [r4, #136]	; 0x88
   18fbc:	sub	r3, r3, #1
   18fc0:	b	18e10 <print_full_field_name@@Base+0x790>
   18fc4:	bl	1a7c8 <handle_coda_error@@Base>
   18fc8:	b	18e60 <print_full_field_name@@Base+0x7e0>
   18fcc:	ldr	r3, [pc, #72]	; 1901c <print_full_field_name@@Base+0x99c>
   18fd0:	movw	r2, #393	; 0x189
   18fd4:	ldr	r1, [pc, #68]	; 19020 <print_full_field_name@@Base+0x9a0>
   18fd8:	ldr	r0, [pc, #68]	; 19024 <print_full_field_name@@Base+0x9a4>
   18fdc:	add	r3, pc, r3
   18fe0:	add	r3, r3, #20
   18fe4:	add	r1, pc, r1
   18fe8:	add	r0, pc, r0
   18fec:	bl	1263c <__assert_fail@plt>
   18ff0:	ldr	r3, [pc, #48]	; 19028 <print_full_field_name@@Base+0x9a8>
   18ff4:	mov	r2, r5
   18ff8:	ldr	r1, [pc, #44]	; 1902c <print_full_field_name@@Base+0x9ac>
   18ffc:	ldr	r3, [r6, r3]
   19000:	add	r1, pc, r1
   19004:	ldr	r0, [r3]
   19008:	bl	12444 <fprintf@plt>
   1900c:	mov	r0, #1
   19010:	bl	123fc <exit@plt>
   19014:	andeq	r4, r1, ip, lsr r3
   19018:			; <UNDEFINED> instruction: 0x000001b4
   1901c:	andeq	r2, r0, ip, asr r1
   19020:	andeq	r2, r0, ip, lsl #3
   19024:	andeq	r2, r0, r0, lsr #4
   19028:			; <UNDEFINED> instruction: 0x000001b8
   1902c:	andeq	r2, r0, r8, lsl r2
   19030:	strd	r4, [sp, #-20]!	; 0xffffffec
   19034:	mov	r5, r0
   19038:	strd	r6, [sp, #8]
   1903c:	mov	r6, r1
   19040:	mov	r1, r0
   19044:	ldr	r7, [pc, #312]	; 19184 <print_full_field_name@@Base+0xb04>
   19048:	str	lr, [sp, #16]
   1904c:	sub	sp, sp, #12
   19050:	ldr	r3, [pc, #304]	; 19188 <print_full_field_name@@Base+0xb08>
   19054:	mov	r2, sp
   19058:	add	r7, pc, r7
   1905c:	ldr	r4, [r7, r3]
   19060:	ldr	r0, [r4, #136]	; 0x88
   19064:	ldr	r3, [r4, #3748]	; 0xea4
   19068:	add	r0, r0, #1
   1906c:	ldr	r0, [r4, r0, lsl #2]
   19070:	add	r3, r4, r3, lsl #2
   19074:	str	r5, [r3, #3488]	; 0xda0
   19078:	bl	12204 <coda_type_get_record_field_hidden_status@plt>
   1907c:	cmp	r0, #0
   19080:	bne	19150 <print_full_field_name@@Base+0xad0>
   19084:	ldr	r1, [sp]
   19088:	eor	r6, r6, #1
   1908c:	cmp	r1, #0
   19090:	andne	r1, r6, #1
   19094:	moveq	r1, #0
   19098:	cmp	r1, #0
   1909c:	bne	19104 <print_full_field_name@@Base+0xa84>
   190a0:	ldr	r2, [pc, #228]	; 1918c <print_full_field_name@@Base+0xb0c>
   190a4:	ldr	r3, [r4, #136]	; 0x88
   190a8:	ldr	r2, [r7, r2]
   190ac:	add	r3, r3, #1
   190b0:	ldr	r0, [r4, r3, lsl #2]
   190b4:	ldr	r3, [r2]
   190b8:	cmp	r3, #0
   190bc:	bne	19118 <print_full_field_name@@Base+0xa98>
   190c0:	ldr	r2, [r4, #3748]	; 0xea4
   190c4:	mov	r1, r5
   190c8:	add	r2, r2, #904	; 0x388
   190cc:	add	r2, r4, r2, lsl #2
   190d0:	bl	12600 <coda_type_get_record_field_name@plt>
   190d4:	cmp	r0, #0
   190d8:	bne	19160 <print_full_field_name@@Base+0xae0>
   190dc:	ldr	r3, [r4, #136]	; 0x88
   190e0:	mov	r1, r5
   190e4:	add	r2, r3, #2
   190e8:	add	r3, r3, #1
   190ec:	add	r2, r4, r2, lsl #2
   190f0:	ldr	r0, [r4, r3, lsl #2]
   190f4:	bl	122b8 <coda_type_get_record_field_type@plt>
   190f8:	cmp	r0, #0
   190fc:	bne	19158 <print_full_field_name@@Base+0xad8>
   19100:	bl	18c9c <print_full_field_name@@Base+0x61c>
   19104:	add	sp, sp, #12
   19108:	ldrd	r4, [sp]
   1910c:	ldrd	r6, [sp, #8]
   19110:	add	sp, sp, #16
   19114:	pop	{pc}		; (ldr pc, [sp], #4)
   19118:	add	r2, sp, #4
   1911c:	mov	r1, r5
   19120:	bl	122f4 <coda_type_get_record_field_available_status@plt>
   19124:	cmp	r0, #0
   19128:	bne	19168 <print_full_field_name@@Base+0xae8>
   1912c:	ldr	r2, [sp, #4]
   19130:	cmn	r2, #1
   19134:	beq	19170 <print_full_field_name@@Base+0xaf0>
   19138:	ldr	r3, [r4, #136]	; 0x88
   1913c:	add	r1, r3, #1
   19140:	add	r3, r4, r3, lsl #2
   19144:	ldr	r0, [r4, r1, lsl #2]
   19148:	str	r2, [r3, #3360]	; 0xd20
   1914c:	b	190c0 <print_full_field_name@@Base+0xa40>
   19150:	bl	1a7c8 <handle_coda_error@@Base>
   19154:	b	19084 <print_full_field_name@@Base+0xa04>
   19158:	bl	1a7c8 <handle_coda_error@@Base>
   1915c:	b	19100 <print_full_field_name@@Base+0xa80>
   19160:	bl	1a7c8 <handle_coda_error@@Base>
   19164:	b	190dc <print_full_field_name@@Base+0xa5c>
   19168:	bl	1a7c8 <handle_coda_error@@Base>
   1916c:	b	1912c <print_full_field_name@@Base+0xaac>
   19170:	bl	1737c <dim_record_field_available@@Base>
   19174:	cmp	r0, #0
   19178:	beq	19104 <print_full_field_name@@Base+0xa84>
   1917c:	ldr	r2, [sp, #4]
   19180:	b	19138 <print_full_field_name@@Base+0xab8>
   19184:	andeq	r3, r1, r0, lsr #31
   19188:			; <UNDEFINED> instruction: 0x000001b4
   1918c:			; <UNDEFINED> instruction: 0x000001b0

00019190 <traverse_info_init@@Base>:
   19190:	ldr	r3, [pc, #32]	; 191b8 <traverse_info_init@@Base+0x28>
   19194:	mov	r2, #0
   19198:	ldr	r1, [pc, #28]	; 191bc <traverse_info_init@@Base+0x2c>
   1919c:	add	r3, pc, r3
   191a0:	ldr	r3, [r3, r1]
   191a4:	str	r2, [r3, #4]
   191a8:	str	r2, [r3, #136]	; 0x88
   191ac:	str	r2, [r3, #3360]	; 0xd20
   191b0:	str	r2, [r3, #3748]	; 0xea4
   191b4:	bx	lr
   191b8:	andeq	r3, r1, ip, asr lr
   191bc:			; <UNDEFINED> instruction: 0x000001b4

000191c0 <traverse_info_done@@Base>:
   191c0:	ldr	r3, [pc, #76]	; 19214 <traverse_info_done@@Base+0x54>
   191c4:	str	r4, [sp, #-8]!
   191c8:	ldr	r2, [pc, #72]	; 19218 <traverse_info_done@@Base+0x58>
   191cc:	str	lr, [sp, #4]
   191d0:	add	r3, pc, r3
   191d4:	ldr	r4, [r3, r2]
   191d8:	ldr	r0, [r4, #4]
   191dc:	cmp	r0, #0
   191e0:	beq	191e8 <traverse_info_done@@Base+0x28>
   191e4:	bl	12528 <coda_close@plt>
   191e8:	ldr	r3, [r4, #664]	; 0x298
   191ec:	cmp	r3, #0
   191f0:	beq	19208 <traverse_info_done@@Base+0x48>
   191f4:	add	r0, r4, #664	; 0x298
   191f8:	ldr	r4, [sp]
   191fc:	ldr	lr, [sp, #4]
   19200:	add	sp, sp, #8
   19204:	b	1738c <codadump_filter_remove@@Base>
   19208:	ldr	r4, [sp]
   1920c:	add	sp, sp, #4
   19210:	pop	{pc}		; (ldr pc, [sp], #4)
   19214:	andeq	r3, r1, r8, lsr #28
   19218:			; <UNDEFINED> instruction: 0x000001b4

0001921c <traverse_product@@Base>:
   1921c:	ldr	r3, [pc, #212]	; 192f8 <traverse_product@@Base+0xdc>
   19220:	strd	r4, [sp, #-16]!
   19224:	ldr	r2, [pc, #208]	; 192fc <traverse_product@@Base+0xe0>
   19228:	str	r6, [sp, #8]
   1922c:	str	lr, [sp, #12]
   19230:	add	r3, pc, r3
   19234:	ldr	r4, [r3, r2]
   19238:	mov	r5, r4
   1923c:	ldr	r0, [r5], #4
   19240:	mov	r1, r5
   19244:	bl	12240 <coda_open@plt>
   19248:	cmp	r0, #0
   1924c:	bne	192a4 <traverse_product@@Base+0x88>
   19250:	add	r0, r4, #144	; 0x90
   19254:	ldr	r1, [r4, #4]
   19258:	bl	1236c <coda_cursor_set_product@plt>
   1925c:	cmp	r0, #0
   19260:	bne	192c4 <traverse_product@@Base+0xa8>
   19264:	ldr	r1, [r4, #136]	; 0x88
   19268:	add	r0, r4, #144	; 0x90
   1926c:	add	r1, r1, #2
   19270:	add	r1, r4, r1, lsl #2
   19274:	bl	122c4 <coda_cursor_get_type@plt>
   19278:	cmp	r0, #0
   1927c:	bne	192bc <traverse_product@@Base+0xa0>
   19280:	bl	18c9c <print_full_field_name@@Base+0x61c>
   19284:	ldr	r0, [r4, #4]
   19288:	bl	12528 <coda_close@plt>
   1928c:	mov	r3, #0
   19290:	ldr	r6, [sp, #8]
   19294:	str	r3, [r4, #4]
   19298:	ldrd	r4, [sp]
   1929c:	add	sp, sp, #12
   192a0:	pop	{pc}		; (ldr pc, [sp], #4)
   192a4:	bl	125e8 <coda_get_errno@plt>
   192a8:	ldr	r3, [r0]
   192ac:	cmn	r3, #21
   192b0:	beq	192cc <traverse_product@@Base+0xb0>
   192b4:	bl	1a7c8 <handle_coda_error@@Base>
   192b8:	b	19250 <traverse_product@@Base+0x34>
   192bc:	bl	1a7c8 <handle_coda_error@@Base>
   192c0:	b	19280 <traverse_product@@Base+0x64>
   192c4:	bl	1a7c8 <handle_coda_error@@Base>
   192c8:	b	19264 <traverse_product@@Base+0x48>
   192cc:	mov	r0, #0
   192d0:	bl	12288 <coda_set_option_use_mmap@plt>
   192d4:	mov	r1, r5
   192d8:	ldr	r0, [r4]
   192dc:	bl	12240 <coda_open@plt>
   192e0:	mov	r5, r0
   192e4:	mov	r0, #1
   192e8:	bl	12288 <coda_set_option_use_mmap@plt>
   192ec:	cmp	r5, #0
   192f0:	bne	192b4 <traverse_product@@Base+0x98>
   192f4:	b	19250 <traverse_product@@Base+0x34>
   192f8:	andeq	r3, r1, r8, asr #27
   192fc:			; <UNDEFINED> instruction: 0x000001b4
   19300:	push	{r0, r1, r2, r3}
   19304:	ldr	r3, [pc, #56]	; 19344 <traverse_product@@Base+0x128>
   19308:	push	{lr}		; (str lr, [sp, #-4]!)
   1930c:	sub	sp, sp, #12
   19310:	ldr	r0, [pc, #48]	; 19348 <traverse_product@@Base+0x12c>
   19314:	add	r1, sp, #20
   19318:	mov	r2, r1
   1931c:	str	r1, [sp, #4]
   19320:	add	r3, pc, r3
   19324:	ldr	r1, [sp, #16]
   19328:	ldr	r3, [r3, r0]
   1932c:	ldr	r0, [r3]
   19330:	bl	12540 <vfprintf@plt>
   19334:	add	sp, sp, #12
   19338:	pop	{lr}		; (ldr lr, [sp], #4)
   1933c:	add	sp, sp, #16
   19340:	bx	lr
   19344:	ldrdeq	r3, [r1], -r8
   19348:			; <UNDEFINED> instruction: 0x000001bc
   1934c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19350:	subs	r5, r1, #0
   19354:	strd	r6, [sp, #8]
   19358:	str	r8, [sp, #16]
   1935c:	str	lr, [sp, #20]
   19360:	ble	193f8 <traverse_product@@Base+0x1dc>
   19364:	ldr	r6, [pc, #252]	; 19468 <traverse_product@@Base+0x24c>
   19368:	sub	r4, r0, #1
   1936c:	add	r5, r4, r5
   19370:	ldr	r8, [pc, #244]	; 1946c <traverse_product@@Base+0x250>
   19374:	ldr	r7, [pc, #244]	; 19470 <traverse_product@@Base+0x254>
   19378:	add	r6, pc, r6
   1937c:	add	r8, pc, r8
   19380:	add	r7, pc, r7
   19384:	b	193bc <traverse_product@@Base+0x1a0>
   19388:	cmp	r1, #9
   1938c:	beq	19458 <traverse_product@@Base+0x23c>
   19390:	cmp	r1, #10
   19394:	beq	19448 <traverse_product@@Base+0x22c>
   19398:	cmp	r1, #8
   1939c:	beq	19438 <traverse_product@@Base+0x21c>
   193a0:	sub	r3, r1, #32
   193a4:	cmp	r3, #94	; 0x5e
   193a8:	movls	r0, r7
   193ac:	movhi	r0, r8
   193b0:	bl	19300 <traverse_product@@Base+0xe4>
   193b4:	cmp	r4, r5
   193b8:	beq	193f8 <traverse_product@@Base+0x1dc>
   193bc:	ldrb	r1, [r4, #1]!
   193c0:	cmp	r1, #12
   193c4:	beq	1940c <traverse_product@@Base+0x1f0>
   193c8:	bls	19388 <traverse_product@@Base+0x16c>
   193cc:	cmp	r1, #34	; 0x22
   193d0:	beq	19428 <traverse_product@@Base+0x20c>
   193d4:	cmp	r1, #92	; 0x5c
   193d8:	beq	19418 <traverse_product@@Base+0x1fc>
   193dc:	cmp	r1, #13
   193e0:	bne	193a0 <traverse_product@@Base+0x184>
   193e4:	ldr	r0, [pc, #136]	; 19474 <traverse_product@@Base+0x258>
   193e8:	add	r0, pc, r0
   193ec:	bl	19300 <traverse_product@@Base+0xe4>
   193f0:	cmp	r4, r5
   193f4:	bne	193bc <traverse_product@@Base+0x1a0>
   193f8:	ldrd	r4, [sp]
   193fc:	ldrd	r6, [sp, #8]
   19400:	ldr	r8, [sp, #16]
   19404:	add	sp, sp, #20
   19408:	pop	{pc}		; (ldr pc, [sp], #4)
   1940c:	mov	r0, r6
   19410:	bl	19300 <traverse_product@@Base+0xe4>
   19414:	b	193b4 <traverse_product@@Base+0x198>
   19418:	ldr	r0, [pc, #88]	; 19478 <traverse_product@@Base+0x25c>
   1941c:	add	r0, pc, r0
   19420:	bl	19300 <traverse_product@@Base+0xe4>
   19424:	b	193b4 <traverse_product@@Base+0x198>
   19428:	ldr	r0, [pc, #76]	; 1947c <traverse_product@@Base+0x260>
   1942c:	add	r0, pc, r0
   19430:	bl	19300 <traverse_product@@Base+0xe4>
   19434:	b	193b4 <traverse_product@@Base+0x198>
   19438:	ldr	r0, [pc, #64]	; 19480 <traverse_product@@Base+0x264>
   1943c:	add	r0, pc, r0
   19440:	bl	19300 <traverse_product@@Base+0xe4>
   19444:	b	193b4 <traverse_product@@Base+0x198>
   19448:	ldr	r0, [pc, #52]	; 19484 <traverse_product@@Base+0x268>
   1944c:	add	r0, pc, r0
   19450:	bl	19300 <traverse_product@@Base+0xe4>
   19454:	b	193b4 <traverse_product@@Base+0x198>
   19458:	ldr	r0, [pc, #40]	; 19488 <traverse_product@@Base+0x26c>
   1945c:	add	r0, pc, r0
   19460:	bl	19300 <traverse_product@@Base+0xe4>
   19464:	b	193b4 <traverse_product@@Base+0x198>
   19468:	strdeq	r1, [r0], -ip
   1946c:	ldrdeq	r1, [r0], -r4
   19470:	andeq	r1, r0, r0, ror r8
   19474:	muleq	r0, r0, r7
   19478:	andeq	r1, r0, r0, ror #14
   1947c:	andeq	r1, r0, r0, lsr #24
   19480:	andeq	r1, r0, r8, lsr #14
   19484:	andeq	r1, r0, r0, lsr #14
   19488:	andeq	r1, r0, ip, lsl #14
   1948c:	ldr	r3, [pc, #128]	; 19514 <traverse_product@@Base+0x2f8>
   19490:	strd	r4, [sp, #-16]!
   19494:	ldr	r2, [pc, #124]	; 19518 <traverse_product@@Base+0x2fc>
   19498:	add	r3, pc, r3
   1949c:	ldr	r4, [r3]
   194a0:	add	r2, pc, r2
   194a4:	str	r6, [sp, #8]
   194a8:	str	lr, [sp, #12]
   194ac:	cmp	r4, #0
   194b0:	blt	194f4 <traverse_product@@Base+0x2d8>
   194b4:	beq	194e4 <traverse_product@@Base+0x2c8>
   194b8:	ldr	r3, [pc, #92]	; 1951c <traverse_product@@Base+0x300>
   194bc:	ldr	r6, [pc, #92]	; 19520 <traverse_product@@Base+0x304>
   194c0:	ldr	r5, [r2, r3]
   194c4:	add	r6, pc, r6
   194c8:	mov	r2, #2
   194cc:	mov	r1, #1
   194d0:	ldr	r3, [r5]
   194d4:	mov	r0, r6
   194d8:	bl	12360 <fwrite@plt>
   194dc:	subs	r4, r4, #1
   194e0:	bne	194c8 <traverse_product@@Base+0x2ac>
   194e4:	ldrd	r4, [sp]
   194e8:	ldr	r6, [sp, #8]
   194ec:	add	sp, sp, #12
   194f0:	pop	{pc}		; (ldr pc, [sp], #4)
   194f4:	ldr	r3, [pc, #40]	; 19524 <traverse_product@@Base+0x308>
   194f8:	mov	r2, #44	; 0x2c
   194fc:	ldr	r1, [pc, #36]	; 19528 <traverse_product@@Base+0x30c>
   19500:	ldr	r0, [pc, #36]	; 1952c <traverse_product@@Base+0x310>
   19504:	add	r3, pc, r3
   19508:	add	r1, pc, r1
   1950c:	add	r0, pc, r0
   19510:	bl	1263c <__assert_fail@plt>
   19514:	andeq	r3, r1, r4, ror sp
   19518:	andeq	r3, r1, r8, asr fp
   1951c:			; <UNDEFINED> instruction: 0x000001bc
   19520:	andeq	r1, r0, r4, lsl r7
   19524:	andeq	r1, r0, r8, asr #26
   19528:	andeq	r1, r0, ip, asr #26
   1952c:	andeq	r1, r0, ip, asr #14
   19530:	push	{r0, r1, r2, r3}
   19534:	str	r4, [sp, #-8]!
   19538:	ldr	r4, [pc, #68]	; 19584 <traverse_product@@Base+0x368>
   1953c:	str	lr, [sp, #4]
   19540:	sub	sp, sp, #8
   19544:	bl	1948c <traverse_product@@Base+0x270>
   19548:	ldr	r3, [pc, #56]	; 19588 <traverse_product@@Base+0x36c>
   1954c:	add	r1, sp, #20
   19550:	mov	r2, r1
   19554:	add	r4, pc, r4
   19558:	str	r1, [sp, #4]
   1955c:	ldr	r1, [sp, #16]
   19560:	ldr	r3, [r4, r3]
   19564:	ldr	r0, [r3]
   19568:	bl	12540 <vfprintf@plt>
   1956c:	add	sp, sp, #8
   19570:	ldr	r4, [sp]
   19574:	ldr	lr, [sp, #4]
   19578:	add	sp, sp, #8
   1957c:	add	sp, sp, #16
   19580:	bx	lr
   19584:	andeq	r3, r1, r4, lsr #21
   19588:			; <UNDEFINED> instruction: 0x000001bc
   1958c:	ldr	r3, [pc, #2496]	; 19f54 <traverse_product@@Base+0xd38>
   19590:	mov	r2, #0
   19594:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19598:	mov	r4, r0
   1959c:	add	r3, pc, r3
   195a0:	ldr	r3, [r3, #4]
   195a4:	strd	r6, [sp, #8]
   195a8:	mov	r7, r1
   195ac:	strd	r8, [sp, #16]
   195b0:	strd	sl, [sp, #24]
   195b4:	str	lr, [sp, #32]
   195b8:	sub	sp, sp, #76	; 0x4c
   195bc:	cmp	r3, r2
   195c0:	str	r2, [sp, #12]
   195c4:	bne	19920 <traverse_product@@Base+0x704>
   195c8:	add	r1, sp, #8
   195cc:	mov	r0, r4
   195d0:	bl	1230c <coda_cursor_get_type_class@plt>
   195d4:	cmp	r0, #0
   195d8:	bne	19918 <traverse_product@@Base+0x6fc>
   195dc:	ldr	r3, [sp, #8]
   195e0:	cmp	r3, #6
   195e4:	addls	pc, pc, r3, lsl #2
   195e8:	b	1967c <traverse_product@@Base+0x460>
   195ec:	b	1982c <traverse_product@@Base+0x610>
   195f0:	b	1974c <traverse_product@@Base+0x530>
   195f4:	b	196ec <traverse_product@@Base+0x4d0>
   195f8:	b	196ec <traverse_product@@Base+0x4d0>
   195fc:	b	196ec <traverse_product@@Base+0x4d0>
   19600:	b	196ec <traverse_product@@Base+0x4d0>
   19604:	b	196b8 <traverse_product@@Base+0x49c>
   19608:	add	r1, sp, #40	; 0x28
   1960c:	mov	r0, r4
   19610:	bl	12414 <coda_cursor_get_string_length@plt>
   19614:	cmp	r0, #0
   19618:	bne	19e9c <traverse_product@@Base+0xc80>
   1961c:	ldr	r0, [sp, #40]	; 0x28
   19620:	add	r0, r0, #1
   19624:	bl	123b4 <malloc@plt>
   19628:	subs	r5, r0, #0
   1962c:	beq	19f10 <traverse_product@@Base+0xcf4>
   19630:	ldr	r2, [sp, #40]	; 0x28
   19634:	mov	r0, r4
   19638:	mov	r1, r5
   1963c:	add	r2, r2, #1
   19640:	bl	123d8 <coda_cursor_read_string@plt>
   19644:	cmp	r0, #0
   19648:	bne	19eac <traverse_product@@Base+0xc90>
   1964c:	ldr	r0, [pc, #2308]	; 19f58 <traverse_product@@Base+0xd3c>
   19650:	add	r0, pc, r0
   19654:	bl	19300 <traverse_product@@Base+0xe4>
   19658:	mov	r0, r5
   1965c:	ldr	r1, [sp, #40]	; 0x28
   19660:	bl	1934c <traverse_product@@Base+0x130>
   19664:	ldr	r0, [pc, #2288]	; 19f5c <traverse_product@@Base+0xd40>
   19668:	ldr	r1, [sp, #40]	; 0x28
   1966c:	add	r0, pc, r0
   19670:	bl	19300 <traverse_product@@Base+0xe4>
   19674:	mov	r0, r5
   19678:	bl	1227c <free@plt>
   1967c:	ldr	r3, [sp, #12]
   19680:	cmp	r3, #0
   19684:	beq	1969c <traverse_product@@Base+0x480>
   19688:	ldr	r2, [pc, #2256]	; 19f60 <traverse_product@@Base+0xd44>
   1968c:	add	r2, pc, r2
   19690:	ldr	r3, [r2]
   19694:	sub	r3, r3, #1
   19698:	str	r3, [r2]
   1969c:	add	sp, sp, #76	; 0x4c
   196a0:	ldrd	r4, [sp]
   196a4:	ldrd	r6, [sp, #8]
   196a8:	ldrd	r8, [sp, #16]
   196ac:	ldrd	sl, [sp, #24]
   196b0:	add	sp, sp, #32
   196b4:	pop	{pc}		; (ldr pc, [sp], #4)
   196b8:	add	r1, sp, #28
   196bc:	mov	r0, r4
   196c0:	bl	12348 <coda_cursor_get_special_type@plt>
   196c4:	cmp	r0, #0
   196c8:	bne	199c8 <traverse_product@@Base+0x7ac>
   196cc:	ldr	r3, [sp, #28]
   196d0:	cmp	r3, #3
   196d4:	addls	pc, pc, r3, lsl #2
   196d8:	b	1967c <traverse_product@@Base+0x460>
   196dc:	b	19bc0 <traverse_product@@Base+0x9a4>
   196e0:	b	19bd0 <traverse_product@@Base+0x9b4>
   196e4:	b	19b44 <traverse_product@@Base+0x928>
   196e8:	b	19b8c <traverse_product@@Base+0x970>
   196ec:	add	r1, sp, #28
   196f0:	mov	r0, r4
   196f4:	bl	123a8 <coda_cursor_get_read_type@plt>
   196f8:	cmp	r0, #0
   196fc:	bne	199c0 <traverse_product@@Base+0x7a4>
   19700:	ldr	r3, [sp, #28]
   19704:	add	r3, r3, #1
   19708:	cmp	r3, #13
   1970c:	addls	pc, pc, r3, lsl #2
   19710:	b	1967c <traverse_product@@Base+0x460>
   19714:	b	19de4 <traverse_product@@Base+0xbc8>
   19718:	b	19d88 <traverse_product@@Base+0xb6c>
   1971c:	b	19cb0 <traverse_product@@Base+0xa94>
   19720:	b	19d88 <traverse_product@@Base+0xb6c>
   19724:	b	19cb0 <traverse_product@@Base+0xa94>
   19728:	b	19d88 <traverse_product@@Base+0xb6c>
   1972c:	b	19cb0 <traverse_product@@Base+0xa94>
   19730:	b	19cd8 <traverse_product@@Base+0xabc>
   19734:	b	19d10 <traverse_product@@Base+0xaf4>
   19738:	b	19db0 <traverse_product@@Base+0xb94>
   1973c:	b	19db0 <traverse_product@@Base+0xb94>
   19740:	b	19d48 <traverse_product@@Base+0xb2c>
   19744:	b	19608 <traverse_product@@Base+0x3ec>
   19748:	b	19c20 <traverse_product@@Base+0xa04>
   1974c:	add	r5, sp, #40	; 0x28
   19750:	add	r1, sp, #32
   19754:	mov	r2, r5
   19758:	mov	r0, r4
   1975c:	bl	12510 <coda_cursor_get_array_dim@plt>
   19760:	cmp	r0, #0
   19764:	bne	199b8 <traverse_product@@Base+0x79c>
   19768:	ldr	r6, [sp, #32]
   1976c:	cmp	r6, #0
   19770:	blt	199d0 <traverse_product@@Base+0x7b4>
   19774:	beq	19e2c <traverse_product@@Base+0xc10>
   19778:	mov	r2, r5
   1977c:	mov	r5, #1
   19780:	add	r1, r2, r6, lsl #2
   19784:	ldr	r3, [r2], #4
   19788:	cmp	r2, r1
   1978c:	mul	r5, r3, r5
   19790:	bne	19784 <traverse_product@@Base+0x568>
   19794:	cmp	r5, #0
   19798:	subgt	r6, r5, #1
   1979c:	ble	199d0 <traverse_product@@Base+0x7b4>
   197a0:	ldr	r0, [pc, #1980]	; 19f64 <traverse_product@@Base+0xd48>
   197a4:	add	r0, pc, r0
   197a8:	bl	19300 <traverse_product@@Base+0xe4>
   197ac:	mov	r0, r4
   197b0:	bl	12354 <coda_cursor_goto_first_array_element@plt>
   197b4:	cmp	r0, #0
   197b8:	bne	19e14 <traverse_product@@Base+0xbf8>
   197bc:	ldr	r9, [pc, #1956]	; 19f68 <traverse_product@@Base+0xd4c>
   197c0:	mov	r8, #0
   197c4:	ldr	r7, [pc, #1952]	; 19f6c <traverse_product@@Base+0xd50>
   197c8:	add	r9, pc, r9
   197cc:	add	r7, pc, r7
   197d0:	mov	r0, r9
   197d4:	bl	19530 <traverse_product@@Base+0x314>
   197d8:	ldr	r3, [r7]
   197dc:	mov	r0, r4
   197e0:	mov	r1, #0
   197e4:	add	r3, r3, #1
   197e8:	str	r3, [r7]
   197ec:	bl	1958c <traverse_product@@Base+0x370>
   197f0:	ldr	r3, [r7]
   197f4:	cmp	r8, r6
   197f8:	mov	r0, r4
   197fc:	add	r8, r8, #1
   19800:	sub	r3, r3, #1
   19804:	str	r3, [r7]
   19808:	blt	199fc <traverse_product@@Base+0x7e0>
   1980c:	cmp	r5, r8
   19810:	bgt	197d0 <traverse_product@@Base+0x5b4>
   19814:	mov	r0, r4
   19818:	bl	123e4 <coda_cursor_goto_parent@plt>
   1981c:	ldr	r3, [sp, #12]
   19820:	cmp	r3, #0
   19824:	beq	1969c <traverse_product@@Base+0x480>
   19828:	b	19688 <traverse_product@@Base+0x46c>
   1982c:	add	r1, sp, #16
   19830:	mov	r0, r4
   19834:	bl	12264 <coda_cursor_get_num_elements@plt>
   19838:	cmp	r0, #0
   1983c:	bne	199b0 <traverse_product@@Base+0x794>
   19840:	ldr	r3, [sp, #16]
   19844:	cmp	r3, #0
   19848:	ble	199ec <traverse_product@@Base+0x7d0>
   1984c:	cmp	r7, #0
   19850:	bne	19e04 <traverse_product@@Base+0xbe8>
   19854:	add	r1, sp, #20
   19858:	mov	r0, r4
   1985c:	bl	122c4 <coda_cursor_get_type@plt>
   19860:	cmp	r0, #0
   19864:	bne	19dfc <traverse_product@@Base+0xbe0>
   19868:	add	r1, sp, #24
   1986c:	ldr	r0, [sp, #20]
   19870:	bl	124c8 <coda_type_get_record_union_status@plt>
   19874:	cmp	r0, #0
   19878:	bne	19df4 <traverse_product@@Base+0xbd8>
   1987c:	ldr	r6, [sp, #24]
   19880:	cmp	r6, #0
   19884:	beq	19a18 <traverse_product@@Base+0x7fc>
   19888:	add	r1, sp, #28
   1988c:	mov	r0, r4
   19890:	bl	125b8 <coda_cursor_get_available_union_field_index@plt>
   19894:	cmp	r0, #0
   19898:	bne	19c18 <traverse_product@@Base+0x9fc>
   1989c:	add	r2, sp, #40	; 0x28
   198a0:	ldr	r0, [sp, #20]
   198a4:	ldr	r1, [sp, #28]
   198a8:	bl	12600 <coda_type_get_record_field_name@plt>
   198ac:	cmp	r0, #0
   198b0:	bne	19c10 <traverse_product@@Base+0x9f4>
   198b4:	mov	r0, r4
   198b8:	ldr	r1, [sp, #28]
   198bc:	bl	12384 <coda_cursor_goto_record_field_by_index@plt>
   198c0:	cmp	r0, #0
   198c4:	bne	19c08 <traverse_product@@Base+0x9ec>
   198c8:	cmp	r7, #0
   198cc:	bne	19bf8 <traverse_product@@Base+0x9dc>
   198d0:	ldr	r5, [pc, #1688]	; 19f70 <traverse_product@@Base+0xd54>
   198d4:	ldr	r0, [pc, #1688]	; 19f74 <traverse_product@@Base+0xd58>
   198d8:	ldr	r1, [sp, #40]	; 0x28
   198dc:	add	r5, pc, r5
   198e0:	add	r0, pc, r0
   198e4:	bl	19300 <traverse_product@@Base+0xe4>
   198e8:	ldr	r3, [r5]
   198ec:	mov	r1, #1
   198f0:	mov	r0, r4
   198f4:	add	r3, r3, r1
   198f8:	str	r3, [r5]
   198fc:	bl	1958c <traverse_product@@Base+0x370>
   19900:	ldr	r3, [r5]
   19904:	mov	r0, r4
   19908:	sub	r3, r3, #1
   1990c:	str	r3, [r5]
   19910:	bl	123e4 <coda_cursor_goto_parent@plt>
   19914:	b	1967c <traverse_product@@Base+0x460>
   19918:	bl	1a7c8 <handle_coda_error@@Base>
   1991c:	b	195dc <traverse_product@@Base+0x3c0>
   19920:	add	r1, sp, #12
   19924:	bl	12300 <coda_cursor_has_attributes@plt>
   19928:	cmp	r0, #0
   1992c:	bne	19a10 <traverse_product@@Base+0x7f4>
   19930:	ldr	r3, [sp, #12]
   19934:	cmp	r3, #0
   19938:	beq	195c8 <traverse_product@@Base+0x3ac>
   1993c:	cmp	r7, #0
   19940:	bne	19b30 <traverse_product@@Base+0x914>
   19944:	ldr	r0, [pc, #1580]	; 19f78 <traverse_product@@Base+0xd5c>
   19948:	add	r0, pc, r0
   1994c:	bl	19300 <traverse_product@@Base+0xe4>
   19950:	mov	r0, r4
   19954:	bl	12480 <coda_cursor_goto_attributes@plt>
   19958:	cmp	r0, #0
   1995c:	bne	19b28 <traverse_product@@Base+0x90c>
   19960:	ldr	r5, [pc, #1556]	; 19f7c <traverse_product@@Base+0xd60>
   19964:	mov	r1, #1
   19968:	mov	r0, r4
   1996c:	add	r5, pc, r5
   19970:	ldr	r3, [r5]
   19974:	add	r3, r3, r1
   19978:	str	r3, [r5]
   1997c:	bl	1958c <traverse_product@@Base+0x370>
   19980:	ldr	r3, [r5]
   19984:	mov	r0, r4
   19988:	sub	r3, r3, #1
   1998c:	str	r3, [r5]
   19990:	bl	123e4 <coda_cursor_goto_parent@plt>
   19994:	ldr	r0, [pc, #1508]	; 19f80 <traverse_product@@Base+0xd64>
   19998:	add	r0, pc, r0
   1999c:	bl	19530 <traverse_product@@Base+0x314>
   199a0:	ldr	r3, [r5]
   199a4:	add	r3, r3, #1
   199a8:	str	r3, [r5]
   199ac:	b	195c8 <traverse_product@@Base+0x3ac>
   199b0:	bl	1a7c8 <handle_coda_error@@Base>
   199b4:	b	19840 <traverse_product@@Base+0x624>
   199b8:	bl	1a7c8 <handle_coda_error@@Base>
   199bc:	b	19768 <traverse_product@@Base+0x54c>
   199c0:	bl	1a7c8 <handle_coda_error@@Base>
   199c4:	b	19700 <traverse_product@@Base+0x4e4>
   199c8:	bl	1a7c8 <handle_coda_error@@Base>
   199cc:	b	196cc <traverse_product@@Base+0x4b0>
   199d0:	ldr	r0, [pc, #1452]	; 19f84 <traverse_product@@Base+0xd68>
   199d4:	add	r0, pc, r0
   199d8:	bl	19300 <traverse_product@@Base+0xe4>
   199dc:	ldr	r3, [sp, #12]
   199e0:	cmp	r3, #0
   199e4:	beq	1969c <traverse_product@@Base+0x480>
   199e8:	b	19688 <traverse_product@@Base+0x46c>
   199ec:	ldr	r0, [pc, #1428]	; 19f88 <traverse_product@@Base+0xd6c>
   199f0:	add	r0, pc, r0
   199f4:	bl	19300 <traverse_product@@Base+0xe4>
   199f8:	b	1967c <traverse_product@@Base+0x460>
   199fc:	bl	12450 <coda_cursor_goto_next_array_element@plt>
   19a00:	cmp	r0, #0
   19a04:	beq	1980c <traverse_product@@Base+0x5f0>
   19a08:	bl	1a7c8 <handle_coda_error@@Base>
   19a0c:	b	1980c <traverse_product@@Base+0x5f0>
   19a10:	bl	1a7c8 <handle_coda_error@@Base>
   19a14:	b	19930 <traverse_product@@Base+0x714>
   19a18:	mov	r0, r4
   19a1c:	bl	12378 <coda_cursor_goto_first_record_field@plt>
   19a20:	cmp	r0, #0
   19a24:	bne	19c00 <traverse_product@@Base+0x9e4>
   19a28:	ldr	r3, [sp, #16]
   19a2c:	mov	r2, #0
   19a30:	str	r2, [sp, #28]
   19a34:	cmp	r3, r2
   19a38:	ble	19814 <traverse_product@@Base+0x5f8>
   19a3c:	ldr	fp, [pc, #1352]	; 19f8c <traverse_product@@Base+0xd70>
   19a40:	mov	r9, #1
   19a44:	add	r5, sp, #40	; 0x28
   19a48:	add	sl, sp, #32
   19a4c:	ldr	r8, [pc, #1340]	; 19f90 <traverse_product@@Base+0xd74>
   19a50:	add	fp, pc, fp
   19a54:	add	r8, pc, r8
   19a58:	mov	r1, r6
   19a5c:	mov	r2, r5
   19a60:	ldr	r0, [sp, #20]
   19a64:	bl	12204 <coda_type_get_record_field_hidden_status@plt>
   19a68:	cmp	r0, #0
   19a6c:	bne	19aa4 <traverse_product@@Base+0x888>
   19a70:	ldr	r1, [sp, #28]
   19a74:	ldr	r3, [sp, #40]	; 0x28
   19a78:	cmp	r3, #0
   19a7c:	beq	19ac8 <traverse_product@@Base+0x8ac>
   19a80:	ldr	r3, [sp, #16]
   19a84:	sub	r2, r3, #1
   19a88:	cmp	r2, r1
   19a8c:	bgt	19aac <traverse_product@@Base+0x890>
   19a90:	add	r6, r1, #1
   19a94:	cmp	r6, r3
   19a98:	str	r6, [sp, #28]
   19a9c:	blt	19a58 <traverse_product@@Base+0x83c>
   19aa0:	b	19814 <traverse_product@@Base+0x5f8>
   19aa4:	bl	1a7c8 <handle_coda_error@@Base>
   19aa8:	b	19a70 <traverse_product@@Base+0x854>
   19aac:	mov	r0, r4
   19ab0:	bl	12570 <coda_cursor_goto_next_record_field@plt>
   19ab4:	cmp	r0, #0
   19ab8:	bne	19e24 <traverse_product@@Base+0xc08>
   19abc:	ldr	r3, [sp, #16]
   19ac0:	ldr	r1, [sp, #28]
   19ac4:	b	19a90 <traverse_product@@Base+0x874>
   19ac8:	mov	r2, sl
   19acc:	ldr	r0, [sp, #20]
   19ad0:	bl	12600 <coda_type_get_record_field_name@plt>
   19ad4:	cmp	r0, #0
   19ad8:	bne	19e1c <traverse_product@@Base+0xc00>
   19adc:	eor	r9, r9, #1
   19ae0:	orrs	r3, r9, r7
   19ae4:	beq	19aec <traverse_product@@Base+0x8d0>
   19ae8:	bl	1948c <traverse_product@@Base+0x270>
   19aec:	mov	r0, fp
   19af0:	ldr	r1, [sp, #32]
   19af4:	mov	r9, #0
   19af8:	bl	19300 <traverse_product@@Base+0xe4>
   19afc:	ldr	r3, [r8]
   19b00:	mov	r1, #1
   19b04:	mov	r0, r4
   19b08:	add	r3, r3, r1
   19b0c:	str	r3, [r8]
   19b10:	bl	1958c <traverse_product@@Base+0x370>
   19b14:	ldr	r3, [r8]
   19b18:	ldr	r1, [sp, #28]
   19b1c:	sub	r3, r3, #1
   19b20:	str	r3, [r8]
   19b24:	b	19a80 <traverse_product@@Base+0x864>
   19b28:	bl	1a7c8 <handle_coda_error@@Base>
   19b2c:	b	19960 <traverse_product@@Base+0x744>
   19b30:	ldr	r0, [pc, #1116]	; 19f94 <traverse_product@@Base+0xd78>
   19b34:	add	r0, pc, r0
   19b38:	bl	19300 <traverse_product@@Base+0xe4>
   19b3c:	bl	1948c <traverse_product@@Base+0x270>
   19b40:	b	19944 <traverse_product@@Base+0x728>
   19b44:	mov	r0, r4
   19b48:	add	r1, sp, #32
   19b4c:	bl	1242c <coda_cursor_read_double@plt>
   19b50:	cmp	r0, #0
   19b54:	bne	19e3c <traverse_product@@Base+0xc20>
   19b58:	vldr	d0, [sp, #32]
   19b5c:	bl	12438 <coda_isNaN@plt>
   19b60:	cmp	r0, #0
   19b64:	bne	19b78 <traverse_product@@Base+0x95c>
   19b68:	vldr	d0, [sp, #32]
   19b6c:	bl	122dc <coda_isInf@plt>
   19b70:	cmp	r0, #0
   19b74:	beq	19e64 <traverse_product@@Base+0xc48>
   19b78:	ldr	r0, [pc, #1048]	; 19f98 <traverse_product@@Base+0xd7c>
   19b7c:	ldrd	r2, [sp, #32]
   19b80:	add	r0, pc, r0
   19b84:	bl	19300 <traverse_product@@Base+0xe4>
   19b88:	b	1967c <traverse_product@@Base+0x460>
   19b8c:	mov	r0, r4
   19b90:	add	r2, sp, #40	; 0x28
   19b94:	add	r1, sp, #32
   19b98:	bl	124d4 <coda_cursor_read_complex_double_split@plt>
   19b9c:	cmp	r0, #0
   19ba0:	bne	19e44 <traverse_product@@Base+0xc28>
   19ba4:	ldr	r0, [pc, #1008]	; 19f9c <traverse_product@@Base+0xd80>
   19ba8:	ldrd	r2, [sp, #32]
   19bac:	ldrd	r4, [sp, #40]	; 0x28
   19bb0:	add	r0, pc, r0
   19bb4:	strd	r4, [sp]
   19bb8:	bl	19300 <traverse_product@@Base+0xe4>
   19bbc:	b	1967c <traverse_product@@Base+0x460>
   19bc0:	ldr	r0, [pc, #984]	; 19fa0 <traverse_product@@Base+0xd84>
   19bc4:	add	r0, pc, r0
   19bc8:	bl	19300 <traverse_product@@Base+0xe4>
   19bcc:	b	1967c <traverse_product@@Base+0x460>
   19bd0:	mov	r0, r4
   19bd4:	add	r1, sp, #40	; 0x28
   19bd8:	bl	1242c <coda_cursor_read_double@plt>
   19bdc:	cmp	r0, #0
   19be0:	bne	19e34 <traverse_product@@Base+0xc18>
   19be4:	ldr	r0, [pc, #952]	; 19fa4 <traverse_product@@Base+0xd88>
   19be8:	ldrd	r2, [sp, #40]	; 0x28
   19bec:	add	r0, pc, r0
   19bf0:	bl	19300 <traverse_product@@Base+0xe4>
   19bf4:	b	1967c <traverse_product@@Base+0x460>
   19bf8:	bl	1948c <traverse_product@@Base+0x270>
   19bfc:	b	198d0 <traverse_product@@Base+0x6b4>
   19c00:	bl	1a7c8 <handle_coda_error@@Base>
   19c04:	b	19a28 <traverse_product@@Base+0x80c>
   19c08:	bl	1a7c8 <handle_coda_error@@Base>
   19c0c:	b	198c8 <traverse_product@@Base+0x6ac>
   19c10:	bl	1a7c8 <handle_coda_error@@Base>
   19c14:	b	198b4 <traverse_product@@Base+0x698>
   19c18:	bl	1a7c8 <handle_coda_error@@Base>
   19c1c:	b	1989c <traverse_product@@Base+0x680>
   19c20:	add	r1, sp, #40	; 0x28
   19c24:	mov	r0, r4
   19c28:	bl	12594 <coda_cursor_get_bit_size@plt>
   19c2c:	cmp	r0, #0
   19c30:	bne	19ec4 <traverse_product@@Base+0xca8>
   19c34:	ldr	r5, [sp, #40]	; 0x28
   19c38:	ldr	r8, [sp, #44]	; 0x2c
   19c3c:	lsr	r2, r5, #3
   19c40:	ands	r1, r5, #7
   19c44:	movne	r1, #1
   19c48:	orr	r2, r2, r8, lsl #29
   19c4c:	adds	r6, r2, r1
   19c50:	mov	r0, r6
   19c54:	bl	123b4 <malloc@plt>
   19c58:	subs	r9, r0, #0
   19c5c:	beq	19edc <traverse_product@@Base+0xcc0>
   19c60:	mov	r0, r4
   19c64:	mov	r1, r9
   19c68:	stm	sp, {r5, r8}
   19c6c:	mov	r2, #0
   19c70:	mov	r3, #0
   19c74:	bl	12624 <coda_cursor_read_bits@plt>
   19c78:	cmp	r0, #0
   19c7c:	bne	19ea4 <traverse_product@@Base+0xc88>
   19c80:	ldr	r0, [pc, #800]	; 19fa8 <traverse_product@@Base+0xd8c>
   19c84:	add	r0, pc, r0
   19c88:	bl	19300 <traverse_product@@Base+0xe4>
   19c8c:	mov	r1, r6
   19c90:	mov	r0, r9
   19c94:	bl	1934c <traverse_product@@Base+0x130>
   19c98:	ldr	r0, [pc, #780]	; 19fac <traverse_product@@Base+0xd90>
   19c9c:	add	r0, pc, r0
   19ca0:	bl	19300 <traverse_product@@Base+0xe4>
   19ca4:	mov	r0, r9
   19ca8:	bl	1227c <free@plt>
   19cac:	b	1967c <traverse_product@@Base+0x460>
   19cb0:	mov	r0, r4
   19cb4:	add	r1, sp, #40	; 0x28
   19cb8:	bl	122a0 <coda_cursor_read_uint32@plt>
   19cbc:	cmp	r0, #0
   19cc0:	bne	19ecc <traverse_product@@Base+0xcb0>
   19cc4:	ldr	r0, [pc, #740]	; 19fb0 <traverse_product@@Base+0xd94>
   19cc8:	ldr	r1, [sp, #40]	; 0x28
   19ccc:	add	r0, pc, r0
   19cd0:	bl	19300 <traverse_product@@Base+0xe4>
   19cd4:	b	1967c <traverse_product@@Base+0x460>
   19cd8:	mov	r0, r4
   19cdc:	add	r1, sp, #32
   19ce0:	bl	12534 <coda_cursor_read_int64@plt>
   19ce4:	cmp	r0, #0
   19ce8:	bne	19ed4 <traverse_product@@Base+0xcb8>
   19cec:	add	r4, sp, #40	; 0x28
   19cf0:	ldrd	r0, [sp, #32]
   19cf4:	mov	r2, r4
   19cf8:	bl	12630 <coda_str64@plt>
   19cfc:	ldr	r0, [pc, #688]	; 19fb4 <traverse_product@@Base+0xd98>
   19d00:	mov	r1, r4
   19d04:	add	r0, pc, r0
   19d08:	bl	19300 <traverse_product@@Base+0xe4>
   19d0c:	b	1967c <traverse_product@@Base+0x460>
   19d10:	mov	r0, r4
   19d14:	add	r1, sp, #32
   19d18:	bl	12420 <coda_cursor_read_uint64@plt>
   19d1c:	cmp	r0, #0
   19d20:	bne	19eb4 <traverse_product@@Base+0xc98>
   19d24:	add	r4, sp, #40	; 0x28
   19d28:	ldrd	r0, [sp, #32]
   19d2c:	mov	r2, r4
   19d30:	bl	12270 <coda_str64u@plt>
   19d34:	ldr	r0, [pc, #636]	; 19fb8 <traverse_product@@Base+0xd9c>
   19d38:	mov	r1, r4
   19d3c:	add	r0, pc, r0
   19d40:	bl	19300 <traverse_product@@Base+0xe4>
   19d44:	b	1967c <traverse_product@@Base+0x460>
   19d48:	add	r5, sp, #40	; 0x28
   19d4c:	mov	r0, r4
   19d50:	mov	r1, r5
   19d54:	bl	1248c <coda_cursor_read_char@plt>
   19d58:	cmp	r0, #0
   19d5c:	bne	19e94 <traverse_product@@Base+0xc78>
   19d60:	ldr	r0, [pc, #596]	; 19fbc <traverse_product@@Base+0xda0>
   19d64:	add	r0, pc, r0
   19d68:	bl	19300 <traverse_product@@Base+0xe4>
   19d6c:	mov	r0, r5
   19d70:	mov	r1, #1
   19d74:	bl	1934c <traverse_product@@Base+0x130>
   19d78:	ldr	r0, [pc, #576]	; 19fc0 <traverse_product@@Base+0xda4>
   19d7c:	add	r0, pc, r0
   19d80:	bl	19300 <traverse_product@@Base+0xe4>
   19d84:	b	1967c <traverse_product@@Base+0x460>
   19d88:	mov	r0, r4
   19d8c:	add	r1, sp, #40	; 0x28
   19d90:	bl	125c4 <coda_cursor_read_int32@plt>
   19d94:	cmp	r0, #0
   19d98:	bne	19ebc <traverse_product@@Base+0xca0>
   19d9c:	ldr	r0, [pc, #544]	; 19fc4 <traverse_product@@Base+0xda8>
   19da0:	ldr	r1, [sp, #40]	; 0x28
   19da4:	add	r0, pc, r0
   19da8:	bl	19300 <traverse_product@@Base+0xe4>
   19dac:	b	1967c <traverse_product@@Base+0x460>
   19db0:	mov	r0, r4
   19db4:	add	r1, sp, #40	; 0x28
   19db8:	bl	1242c <coda_cursor_read_double@plt>
   19dbc:	cmp	r0, #0
   19dc0:	bne	19e5c <traverse_product@@Base+0xc40>
   19dc4:	ldr	r1, [sp, #28]
   19dc8:	ldrd	r2, [sp, #40]	; 0x28
   19dcc:	cmp	r1, #8
   19dd0:	beq	19e4c <traverse_product@@Base+0xc30>
   19dd4:	ldr	r0, [pc, #492]	; 19fc8 <traverse_product@@Base+0xdac>
   19dd8:	add	r0, pc, r0
   19ddc:	bl	19300 <traverse_product@@Base+0xe4>
   19de0:	b	1967c <traverse_product@@Base+0x460>
   19de4:	ldr	r0, [pc, #480]	; 19fcc <traverse_product@@Base+0xdb0>
   19de8:	add	r0, pc, r0
   19dec:	bl	19300 <traverse_product@@Base+0xe4>
   19df0:	b	1967c <traverse_product@@Base+0x460>
   19df4:	bl	1a7c8 <handle_coda_error@@Base>
   19df8:	b	1987c <traverse_product@@Base+0x660>
   19dfc:	bl	1a7c8 <handle_coda_error@@Base>
   19e00:	b	19868 <traverse_product@@Base+0x64c>
   19e04:	ldr	r0, [pc, #452]	; 19fd0 <traverse_product@@Base+0xdb4>
   19e08:	add	r0, pc, r0
   19e0c:	bl	19300 <traverse_product@@Base+0xe4>
   19e10:	b	19854 <traverse_product@@Base+0x638>
   19e14:	bl	1a7c8 <handle_coda_error@@Base>
   19e18:	b	197bc <traverse_product@@Base+0x5a0>
   19e1c:	bl	1a7c8 <handle_coda_error@@Base>
   19e20:	b	19adc <traverse_product@@Base+0x8c0>
   19e24:	bl	1a7c8 <handle_coda_error@@Base>
   19e28:	b	19abc <traverse_product@@Base+0x8a0>
   19e2c:	mov	r5, #1
   19e30:	b	197a0 <traverse_product@@Base+0x584>
   19e34:	bl	1a7c8 <handle_coda_error@@Base>
   19e38:	b	19be4 <traverse_product@@Base+0x9c8>
   19e3c:	bl	1a7c8 <handle_coda_error@@Base>
   19e40:	b	19b58 <traverse_product@@Base+0x93c>
   19e44:	bl	1a7c8 <handle_coda_error@@Base>
   19e48:	b	19ba4 <traverse_product@@Base+0x988>
   19e4c:	ldr	r0, [pc, #384]	; 19fd4 <traverse_product@@Base+0xdb8>
   19e50:	add	r0, pc, r0
   19e54:	bl	19300 <traverse_product@@Base+0xe4>
   19e58:	b	1967c <traverse_product@@Base+0x460>
   19e5c:	bl	1a7c8 <handle_coda_error@@Base>
   19e60:	b	19dc4 <traverse_product@@Base+0xba8>
   19e64:	ldr	r0, [pc, #364]	; 19fd8 <traverse_product@@Base+0xdbc>
   19e68:	add	r4, sp, #40	; 0x28
   19e6c:	mov	r1, r4
   19e70:	vldr	d0, [sp, #32]
   19e74:	add	r0, pc, r0
   19e78:	bl	12258 <coda_time_double_to_string@plt>
   19e7c:	cmp	r0, #0
   19e80:	beq	19f40 <traverse_product@@Base+0xd24>
   19e84:	ldr	r0, [pc, #336]	; 19fdc <traverse_product@@Base+0xdc0>
   19e88:	add	r0, pc, r0
   19e8c:	bl	19300 <traverse_product@@Base+0xe4>
   19e90:	b	1967c <traverse_product@@Base+0x460>
   19e94:	bl	1a7c8 <handle_coda_error@@Base>
   19e98:	b	19d60 <traverse_product@@Base+0xb44>
   19e9c:	bl	1a7c8 <handle_coda_error@@Base>
   19ea0:	b	1961c <traverse_product@@Base+0x400>
   19ea4:	bl	1a7c8 <handle_coda_error@@Base>
   19ea8:	b	19c80 <traverse_product@@Base+0xa64>
   19eac:	bl	1a7c8 <handle_coda_error@@Base>
   19eb0:	b	1964c <traverse_product@@Base+0x430>
   19eb4:	bl	1a7c8 <handle_coda_error@@Base>
   19eb8:	b	19d24 <traverse_product@@Base+0xb08>
   19ebc:	bl	1a7c8 <handle_coda_error@@Base>
   19ec0:	b	19d9c <traverse_product@@Base+0xb80>
   19ec4:	bl	1a7c8 <handle_coda_error@@Base>
   19ec8:	b	19c34 <traverse_product@@Base+0xa18>
   19ecc:	bl	1a7c8 <handle_coda_error@@Base>
   19ed0:	b	19cc4 <traverse_product@@Base+0xaa8>
   19ed4:	bl	1a7c8 <handle_coda_error@@Base>
   19ed8:	b	19cec <traverse_product@@Base+0xad0>
   19edc:	mov	r1, #392	; 0x188
   19ee0:	ldr	r3, [pc, #248]	; 19fe0 <traverse_product@@Base+0xdc4>
   19ee4:	mov	r2, r6
   19ee8:	mvn	r0, #0
   19eec:	str	r1, [sp]
   19ef0:	ldr	r1, [pc, #236]	; 19fe4 <traverse_product@@Base+0xdc8>
   19ef4:	add	r3, pc, r3
   19ef8:	add	r1, pc, r1
   19efc:	bl	12234 <coda_set_error@plt>
   19f00:	bl	1a7c8 <handle_coda_error@@Base>
   19f04:	ldr	r5, [sp, #40]	; 0x28
   19f08:	ldr	r8, [sp, #44]	; 0x2c
   19f0c:	b	19c60 <traverse_product@@Base+0xa44>
   19f10:	movw	r1, #361	; 0x169
   19f14:	ldr	r3, [pc, #204]	; 19fe8 <traverse_product@@Base+0xdcc>
   19f18:	mvn	r0, #0
   19f1c:	str	r1, [sp]
   19f20:	ldr	r1, [pc, #196]	; 19fec <traverse_product@@Base+0xdd0>
   19f24:	ldr	r2, [sp, #40]	; 0x28
   19f28:	add	r3, pc, r3
   19f2c:	add	r1, pc, r1
   19f30:	add	r2, r2, #1
   19f34:	bl	12234 <coda_set_error@plt>
   19f38:	bl	1a7c8 <handle_coda_error@@Base>
   19f3c:	b	19630 <traverse_product@@Base+0x414>
   19f40:	ldr	r0, [pc, #168]	; 19ff0 <traverse_product@@Base+0xdd4>
   19f44:	mov	r1, r4
   19f48:	add	r0, pc, r0
   19f4c:	bl	19300 <traverse_product@@Base+0xe4>
   19f50:	b	1967c <traverse_product@@Base+0x460>
   19f54:	andeq	r3, r1, r0, ror ip
   19f58:			; <UNDEFINED> instruction: 0x00001bb4
   19f5c:	andeq	r1, r0, r0, ror ip
   19f60:	andeq	r3, r1, r0, lsl #23
   19f64:	andeq	r2, r0, r0, asr ip
   19f68:	andeq	r1, r0, ip, lsl #22
   19f6c:	andeq	r3, r1, r0, asr #20
   19f70:	andeq	r3, r1, r0, lsr r9
   19f74:	andeq	r1, r0, r8, ror #19
   19f78:	andeq	r1, r0, r0, ror r9
   19f7c:	andeq	r3, r1, r0, lsr #17
   19f80:	andeq	r1, r0, r8, lsr #18
   19f84:	andeq	r1, r0, r4, lsl #18
   19f88:	andeq	r1, r0, r0, ror #17
   19f8c:	andeq	r1, r0, r8, ror r8
   19f90:			; <UNDEFINED> instruction: 0x000137b8
   19f94:	andeq	r2, r0, r0, asr #17
   19f98:	andeq	r1, r0, r8, asr r1
   19f9c:	andeq	r1, r0, r8, lsr r7
   19fa0:	andeq	r1, r0, ip, lsl r7
   19fa4:	andeq	r1, r0, ip, ror #1
   19fa8:	andeq	r1, r0, r0, lsl #11
   19fac:	andeq	r1, r0, r0, asr #12
   19fb0:	strdeq	r0, [r0], -r8
   19fb4:	andeq	r0, r0, r8, asr #31
   19fb8:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   19fbc:	andeq	r1, r0, r0, lsr #9
   19fc0:	andeq	r1, r0, r0, ror #10
   19fc4:	andeq	r0, r0, r8, lsl pc
   19fc8:	andeq	r0, r0, r0, lsl #30
   19fcc:	strdeq	r1, [r0], -r8
   19fd0:	andeq	r2, r0, ip, ror #11
   19fd4:	andeq	r0, r0, r0, lsl #29
   19fd8:	andeq	r1, r0, ip, ror r2
   19fdc:	andeq	r1, r0, r8, lsl #5
   19fe0:	andeq	r1, r0, r0, ror #6
   19fe4:	andeq	r0, r0, r8, lsr #24
   19fe8:	andeq	r1, r0, ip, lsr #6
   19fec:	strdeq	r0, [r0], -r4
   19ff0:	andeq	r0, r0, r4, lsl #27

00019ff4 <print_yaml_data@@Base>:
   19ff4:	ldr	r2, [pc, #252]	; 1a0f8 <print_yaml_data@@Base+0x104>
   19ff8:	strd	r4, [sp, #-16]!
   19ffc:	ldr	r4, [pc, #248]	; 1a0fc <print_yaml_data@@Base+0x108>
   1a000:	str	r6, [sp, #8]
   1a004:	ldr	r3, [pc, #244]	; 1a100 <print_yaml_data@@Base+0x10c>
   1a008:	add	r2, pc, r2
   1a00c:	str	lr, [sp, #12]
   1a010:	sub	sp, sp, #528	; 0x210
   1a014:	add	r6, sp, #4
   1a018:	add	r4, pc, r4
   1a01c:	str	r0, [r2, #4]
   1a020:	mov	r1, r6
   1a024:	ldr	r5, [r4, r3]
   1a028:	ldr	r0, [r5]
   1a02c:	bl	12240 <coda_open@plt>
   1a030:	cmp	r0, #0
   1a034:	bne	1a0ac <print_yaml_data@@Base+0xb8>
   1a038:	add	r5, sp, #8
   1a03c:	ldr	r1, [sp, #4]
   1a040:	mov	r0, r5
   1a044:	bl	1236c <coda_cursor_set_product@plt>
   1a048:	cmp	r0, #0
   1a04c:	bne	1a0a4 <print_yaml_data@@Base+0xb0>
   1a050:	ldr	r3, [pc, #172]	; 1a104 <print_yaml_data@@Base+0x110>
   1a054:	ldr	r3, [r4, r3]
   1a058:	ldr	r1, [r3]
   1a05c:	cmp	r1, #0
   1a060:	beq	1a074 <print_yaml_data@@Base+0x80>
   1a064:	mov	r0, r5
   1a068:	bl	1254c <coda_cursor_goto@plt>
   1a06c:	cmp	r0, #0
   1a070:	bne	1a0c4 <print_yaml_data@@Base+0xd0>
   1a074:	mov	r0, #0
   1a078:	bl	121e0 <coda_set_option_perform_boundary_checks@plt>
   1a07c:	mov	r0, r5
   1a080:	mov	r1, #0
   1a084:	bl	1958c <traverse_product@@Base+0x370>
   1a088:	ldr	r0, [sp, #4]
   1a08c:	bl	12528 <coda_close@plt>
   1a090:	add	sp, sp, #528	; 0x210
   1a094:	ldrd	r4, [sp]
   1a098:	ldr	r6, [sp, #8]
   1a09c:	add	sp, sp, #12
   1a0a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0a4:	bl	1a7c8 <handle_coda_error@@Base>
   1a0a8:	b	1a050 <print_yaml_data@@Base+0x5c>
   1a0ac:	bl	125e8 <coda_get_errno@plt>
   1a0b0:	ldr	r3, [r0]
   1a0b4:	cmn	r3, #21
   1a0b8:	beq	1a0cc <print_yaml_data@@Base+0xd8>
   1a0bc:	bl	1a7c8 <handle_coda_error@@Base>
   1a0c0:	b	1a038 <print_yaml_data@@Base+0x44>
   1a0c4:	bl	1a7c8 <handle_coda_error@@Base>
   1a0c8:	b	1a074 <print_yaml_data@@Base+0x80>
   1a0cc:	mov	r0, #0
   1a0d0:	bl	12288 <coda_set_option_use_mmap@plt>
   1a0d4:	mov	r1, r6
   1a0d8:	ldr	r0, [r5]
   1a0dc:	bl	12240 <coda_open@plt>
   1a0e0:	mov	r5, r0
   1a0e4:	mov	r0, #1
   1a0e8:	bl	12288 <coda_set_option_use_mmap@plt>
   1a0ec:	cmp	r5, #0
   1a0f0:	bne	1a0bc <print_yaml_data@@Base+0xc8>
   1a0f4:	b	1a038 <print_yaml_data@@Base+0x44>
   1a0f8:	andeq	r3, r1, r4, lsl #4
   1a0fc:	andeq	r2, r1, r0, ror #31
   1a100:			; <UNDEFINED> instruction: 0x000001b4
   1a104:	ldrdeq	r0, [r0], -r8
   1a108:	ldr	r0, [pc, #1420]	; 1a69c <print_yaml_data@@Base+0x6a8>
   1a10c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a110:	strd	r6, [sp, #8]
   1a114:	strd	r8, [sp, #16]
   1a118:	strd	sl, [sp, #24]
   1a11c:	add	r0, pc, r0
   1a120:	str	lr, [sp, #32]
   1a124:	sub	sp, sp, #28
   1a128:	bl	1239c <puts@plt>
   1a12c:	ldr	r0, [pc, #1388]	; 1a6a0 <print_yaml_data@@Base+0x6ac>
   1a130:	ldr	r4, [pc, #1388]	; 1a6a4 <print_yaml_data@@Base+0x6b0>
   1a134:	ldr	r9, [pc, #1388]	; 1a6a8 <print_yaml_data@@Base+0x6b4>
   1a138:	add	r0, pc, r0
   1a13c:	bl	1239c <puts@plt>
   1a140:	ldr	r0, [pc, #1380]	; 1a6ac <print_yaml_data@@Base+0x6b8>
   1a144:	add	r4, pc, r4
   1a148:	ldr	r8, [pc, #1376]	; 1a6b0 <print_yaml_data@@Base+0x6bc>
   1a14c:	add	r9, pc, r9
   1a150:	ldr	sl, [pc, #1372]	; 1a6b4 <print_yaml_data@@Base+0x6c0>
   1a154:	add	r0, pc, r0
   1a158:	bl	1239c <puts@plt>
   1a15c:	mov	r3, r4
   1a160:	mov	r0, r4
   1a164:	ldr	fp, [pc, #1356]	; 1a6b8 <print_yaml_data@@Base+0x6c4>
   1a168:	add	r8, pc, r8
   1a16c:	str	r3, [sp, #20]
   1a170:	add	sl, pc, sl
   1a174:	bl	1239c <puts@plt>
   1a178:	ldr	r0, [pc, #1340]	; 1a6bc <print_yaml_data@@Base+0x6c8>
   1a17c:	add	fp, pc, fp
   1a180:	ldr	r7, [pc, #1336]	; 1a6c0 <print_yaml_data@@Base+0x6cc>
   1a184:	ldr	r4, [pc, #1336]	; 1a6c4 <print_yaml_data@@Base+0x6d0>
   1a188:	add	r0, pc, r0
   1a18c:	bl	1239c <puts@plt>
   1a190:	ldr	r0, [pc, #1328]	; 1a6c8 <print_yaml_data@@Base+0x6d4>
   1a194:	add	r7, pc, r7
   1a198:	add	r4, pc, r4
   1a19c:	ldr	r6, [pc, #1320]	; 1a6cc <print_yaml_data@@Base+0x6d8>
   1a1a0:	ldr	r5, [pc, #1320]	; 1a6d0 <print_yaml_data@@Base+0x6dc>
   1a1a4:	add	r0, pc, r0
   1a1a8:	bl	1239c <puts@plt>
   1a1ac:	mov	r0, r9
   1a1b0:	add	r6, pc, r6
   1a1b4:	bl	1239c <puts@plt>
   1a1b8:	mov	r0, r8
   1a1bc:	add	r5, pc, r5
   1a1c0:	bl	1239c <puts@plt>
   1a1c4:	ldr	r2, [pc, #1288]	; 1a6d4 <print_yaml_data@@Base+0x6e0>
   1a1c8:	mov	r0, sl
   1a1cc:	add	r2, pc, r2
   1a1d0:	str	r2, [sp, #8]
   1a1d4:	bl	1239c <puts@plt>
   1a1d8:	mov	r0, fp
   1a1dc:	bl	1239c <puts@plt>
   1a1e0:	ldr	r0, [pc, #1264]	; 1a6d8 <print_yaml_data@@Base+0x6e4>
   1a1e4:	add	r0, pc, r0
   1a1e8:	bl	1239c <puts@plt>
   1a1ec:	ldr	r0, [pc, #1256]	; 1a6dc <print_yaml_data@@Base+0x6e8>
   1a1f0:	add	r0, pc, r0
   1a1f4:	bl	1239c <puts@plt>
   1a1f8:	ldr	r0, [pc, #1248]	; 1a6e0 <print_yaml_data@@Base+0x6ec>
   1a1fc:	add	r0, pc, r0
   1a200:	bl	1239c <puts@plt>
   1a204:	ldr	r0, [pc, #1240]	; 1a6e4 <print_yaml_data@@Base+0x6f0>
   1a208:	add	r0, pc, r0
   1a20c:	bl	1239c <puts@plt>
   1a210:	ldr	r0, [pc, #1232]	; 1a6e8 <print_yaml_data@@Base+0x6f4>
   1a214:	add	r0, pc, r0
   1a218:	bl	1239c <puts@plt>
   1a21c:	ldr	r0, [pc, #1224]	; 1a6ec <print_yaml_data@@Base+0x6f8>
   1a220:	add	r0, pc, r0
   1a224:	bl	1239c <puts@plt>
   1a228:	ldr	r0, [pc, #1216]	; 1a6f0 <print_yaml_data@@Base+0x6fc>
   1a22c:	add	r0, pc, r0
   1a230:	bl	1239c <puts@plt>
   1a234:	ldr	r0, [pc, #1208]	; 1a6f4 <print_yaml_data@@Base+0x700>
   1a238:	add	r0, pc, r0
   1a23c:	bl	1239c <puts@plt>
   1a240:	ldr	r0, [pc, #1200]	; 1a6f8 <print_yaml_data@@Base+0x704>
   1a244:	add	r0, pc, r0
   1a248:	bl	1239c <puts@plt>
   1a24c:	mov	r0, r7
   1a250:	bl	1239c <puts@plt>
   1a254:	mov	r0, r4
   1a258:	str	r4, [sp, #4]
   1a25c:	bl	1239c <puts@plt>
   1a260:	ldr	r1, [pc, #1172]	; 1a6fc <print_yaml_data@@Base+0x708>
   1a264:	ldr	r2, [sp, #8]
   1a268:	ldr	r4, [pc, #1168]	; 1a700 <print_yaml_data@@Base+0x70c>
   1a26c:	add	r1, pc, r1
   1a270:	mov	r0, r2
   1a274:	str	r1, [sp, #16]
   1a278:	bl	1239c <puts@plt>
   1a27c:	ldr	r2, [pc, #1152]	; 1a704 <print_yaml_data@@Base+0x710>
   1a280:	mov	r0, r6
   1a284:	add	r4, pc, r4
   1a288:	add	r2, pc, r2
   1a28c:	str	r2, [sp, #12]
   1a290:	bl	1239c <puts@plt>
   1a294:	mov	r0, #10
   1a298:	bl	124a4 <putchar@plt>
   1a29c:	ldr	r0, [pc, #1124]	; 1a708 <print_yaml_data@@Base+0x714>
   1a2a0:	add	r0, pc, r0
   1a2a4:	bl	1239c <puts@plt>
   1a2a8:	ldr	r0, [pc, #1116]	; 1a70c <print_yaml_data@@Base+0x718>
   1a2ac:	add	r0, pc, r0
   1a2b0:	bl	1239c <puts@plt>
   1a2b4:	ldr	r3, [sp, #20]
   1a2b8:	mov	r0, r3
   1a2bc:	bl	1239c <puts@plt>
   1a2c0:	mov	r0, r9
   1a2c4:	bl	1239c <puts@plt>
   1a2c8:	mov	r0, r8
   1a2cc:	bl	1239c <puts@plt>
   1a2d0:	mov	r0, sl
   1a2d4:	ldr	sl, [pc, #1076]	; 1a710 <print_yaml_data@@Base+0x71c>
   1a2d8:	bl	1239c <puts@plt>
   1a2dc:	mov	r0, fp
   1a2e0:	ldr	fp, [pc, #1068]	; 1a714 <print_yaml_data@@Base+0x720>
   1a2e4:	bl	1239c <puts@plt>
   1a2e8:	ldr	r0, [pc, #1064]	; 1a718 <print_yaml_data@@Base+0x724>
   1a2ec:	add	sl, pc, sl
   1a2f0:	add	fp, pc, fp
   1a2f4:	add	r0, pc, r0
   1a2f8:	bl	1239c <puts@plt>
   1a2fc:	ldr	r0, [pc, #1048]	; 1a71c <print_yaml_data@@Base+0x728>
   1a300:	add	r0, pc, r0
   1a304:	bl	1239c <puts@plt>
   1a308:	ldr	r0, [pc, #1040]	; 1a720 <print_yaml_data@@Base+0x72c>
   1a30c:	add	r0, pc, r0
   1a310:	bl	1239c <puts@plt>
   1a314:	ldr	r0, [pc, #1032]	; 1a724 <print_yaml_data@@Base+0x730>
   1a318:	add	r0, pc, r0
   1a31c:	bl	1239c <puts@plt>
   1a320:	mov	r0, r5
   1a324:	bl	1239c <puts@plt>
   1a328:	mov	r0, r4
   1a32c:	bl	1239c <puts@plt>
   1a330:	ldr	r0, [pc, #1008]	; 1a728 <print_yaml_data@@Base+0x734>
   1a334:	add	r0, pc, r0
   1a338:	bl	1239c <puts@plt>
   1a33c:	ldr	r0, [pc, #1000]	; 1a72c <print_yaml_data@@Base+0x738>
   1a340:	add	r0, pc, r0
   1a344:	bl	1239c <puts@plt>
   1a348:	ldr	r0, [pc, #992]	; 1a730 <print_yaml_data@@Base+0x73c>
   1a34c:	add	r0, pc, r0
   1a350:	bl	1239c <puts@plt>
   1a354:	ldr	r0, [pc, #984]	; 1a734 <print_yaml_data@@Base+0x740>
   1a358:	add	r0, pc, r0
   1a35c:	bl	1239c <puts@plt>
   1a360:	ldr	r0, [pc, #976]	; 1a738 <print_yaml_data@@Base+0x744>
   1a364:	add	r0, pc, r0
   1a368:	bl	1239c <puts@plt>
   1a36c:	ldr	r0, [pc, #968]	; 1a73c <print_yaml_data@@Base+0x748>
   1a370:	add	r0, pc, r0
   1a374:	bl	1239c <puts@plt>
   1a378:	mov	r0, r7
   1a37c:	bl	1239c <puts@plt>
   1a380:	ldr	r0, [sp, #4]
   1a384:	bl	1239c <puts@plt>
   1a388:	ldr	r0, [sp, #8]
   1a38c:	bl	1239c <puts@plt>
   1a390:	mov	r0, r6
   1a394:	bl	1239c <puts@plt>
   1a398:	mov	r0, #10
   1a39c:	bl	124a4 <putchar@plt>
   1a3a0:	ldr	r0, [pc, #920]	; 1a740 <print_yaml_data@@Base+0x74c>
   1a3a4:	add	r0, pc, r0
   1a3a8:	bl	1239c <puts@plt>
   1a3ac:	ldr	r0, [pc, #912]	; 1a744 <print_yaml_data@@Base+0x750>
   1a3b0:	add	r0, pc, r0
   1a3b4:	bl	1239c <puts@plt>
   1a3b8:	ldr	r0, [pc, #904]	; 1a748 <print_yaml_data@@Base+0x754>
   1a3bc:	add	r0, pc, r0
   1a3c0:	bl	1239c <puts@plt>
   1a3c4:	ldr	r1, [sp, #16]
   1a3c8:	mov	r0, r1
   1a3cc:	str	r1, [sp, #20]
   1a3d0:	bl	1239c <puts@plt>
   1a3d4:	ldr	r2, [sp, #12]
   1a3d8:	mov	r0, r2
   1a3dc:	str	r2, [sp, #16]
   1a3e0:	bl	1239c <puts@plt>
   1a3e4:	ldr	r0, [pc, #864]	; 1a74c <print_yaml_data@@Base+0x758>
   1a3e8:	add	r0, pc, r0
   1a3ec:	bl	1239c <puts@plt>
   1a3f0:	mov	r0, r9
   1a3f4:	bl	1239c <puts@plt>
   1a3f8:	mov	r0, r8
   1a3fc:	bl	1239c <puts@plt>
   1a400:	mov	r0, r5
   1a404:	bl	1239c <puts@plt>
   1a408:	mov	r0, r4
   1a40c:	bl	1239c <puts@plt>
   1a410:	ldr	r3, [pc, #824]	; 1a750 <print_yaml_data@@Base+0x75c>
   1a414:	add	r3, pc, r3
   1a418:	mov	r0, r3
   1a41c:	str	r3, [sp, #12]
   1a420:	bl	1239c <puts@plt>
   1a424:	mov	r0, fp
   1a428:	bl	1239c <puts@plt>
   1a42c:	mov	r0, sl
   1a430:	bl	1239c <puts@plt>
   1a434:	mov	r0, r7
   1a438:	bl	1239c <puts@plt>
   1a43c:	ldr	r0, [sp, #4]
   1a440:	bl	1239c <puts@plt>
   1a444:	ldr	r0, [sp, #8]
   1a448:	bl	1239c <puts@plt>
   1a44c:	mov	r0, r6
   1a450:	bl	1239c <puts@plt>
   1a454:	mov	r0, #10
   1a458:	bl	124a4 <putchar@plt>
   1a45c:	ldr	r0, [pc, #752]	; 1a754 <print_yaml_data@@Base+0x760>
   1a460:	add	r0, pc, r0
   1a464:	bl	1239c <puts@plt>
   1a468:	ldr	r0, [pc, #744]	; 1a758 <print_yaml_data@@Base+0x764>
   1a46c:	add	r0, pc, r0
   1a470:	bl	1239c <puts@plt>
   1a474:	ldr	r0, [pc, #736]	; 1a75c <print_yaml_data@@Base+0x768>
   1a478:	add	r0, pc, r0
   1a47c:	bl	1239c <puts@plt>
   1a480:	ldr	r1, [sp, #20]
   1a484:	mov	r0, r1
   1a488:	bl	1239c <puts@plt>
   1a48c:	ldr	r2, [sp, #16]
   1a490:	mov	r0, r2
   1a494:	bl	1239c <puts@plt>
   1a498:	ldr	r0, [pc, #704]	; 1a760 <print_yaml_data@@Base+0x76c>
   1a49c:	add	r0, pc, r0
   1a4a0:	bl	1239c <puts@plt>
   1a4a4:	ldr	r0, [pc, #696]	; 1a764 <print_yaml_data@@Base+0x770>
   1a4a8:	add	r0, pc, r0
   1a4ac:	bl	1239c <puts@plt>
   1a4b0:	mov	r0, r9
   1a4b4:	bl	1239c <puts@plt>
   1a4b8:	mov	r0, r8
   1a4bc:	bl	1239c <puts@plt>
   1a4c0:	mov	r0, r5
   1a4c4:	bl	1239c <puts@plt>
   1a4c8:	mov	r0, r4
   1a4cc:	bl	1239c <puts@plt>
   1a4d0:	ldr	r3, [sp, #12]
   1a4d4:	mov	r0, r3
   1a4d8:	bl	1239c <puts@plt>
   1a4dc:	mov	r0, fp
   1a4e0:	bl	1239c <puts@plt>
   1a4e4:	mov	r0, sl
   1a4e8:	bl	1239c <puts@plt>
   1a4ec:	mov	r0, r7
   1a4f0:	bl	1239c <puts@plt>
   1a4f4:	ldr	r0, [sp, #4]
   1a4f8:	bl	1239c <puts@plt>
   1a4fc:	ldr	r0, [sp, #8]
   1a500:	bl	1239c <puts@plt>
   1a504:	mov	r0, r6
   1a508:	bl	1239c <puts@plt>
   1a50c:	mov	r0, #10
   1a510:	bl	124a4 <putchar@plt>
   1a514:	ldr	r0, [pc, #588]	; 1a768 <print_yaml_data@@Base+0x774>
   1a518:	add	r0, pc, r0
   1a51c:	bl	1239c <puts@plt>
   1a520:	ldr	r0, [pc, #580]	; 1a76c <print_yaml_data@@Base+0x778>
   1a524:	add	r0, pc, r0
   1a528:	bl	1239c <puts@plt>
   1a52c:	ldr	r0, [pc, #572]	; 1a770 <print_yaml_data@@Base+0x77c>
   1a530:	add	r0, pc, r0
   1a534:	bl	1239c <puts@plt>
   1a538:	ldr	r0, [pc, #564]	; 1a774 <print_yaml_data@@Base+0x780>
   1a53c:	add	r0, pc, r0
   1a540:	bl	1239c <puts@plt>
   1a544:	ldr	r0, [pc, #556]	; 1a778 <print_yaml_data@@Base+0x784>
   1a548:	add	r0, pc, r0
   1a54c:	bl	1239c <puts@plt>
   1a550:	ldr	r0, [pc, #548]	; 1a77c <print_yaml_data@@Base+0x788>
   1a554:	add	r0, pc, r0
   1a558:	bl	1239c <puts@plt>
   1a55c:	ldr	r0, [pc, #540]	; 1a780 <print_yaml_data@@Base+0x78c>
   1a560:	add	r0, pc, r0
   1a564:	bl	1239c <puts@plt>
   1a568:	mov	r0, r5
   1a56c:	bl	1239c <puts@plt>
   1a570:	mov	r0, r4
   1a574:	bl	1239c <puts@plt>
   1a578:	ldr	r3, [sp, #12]
   1a57c:	mov	r0, r3
   1a580:	bl	1239c <puts@plt>
   1a584:	mov	r0, fp
   1a588:	bl	1239c <puts@plt>
   1a58c:	mov	r0, sl
   1a590:	bl	1239c <puts@plt>
   1a594:	ldr	r0, [pc, #488]	; 1a784 <print_yaml_data@@Base+0x790>
   1a598:	add	r0, pc, r0
   1a59c:	bl	1239c <puts@plt>
   1a5a0:	ldr	r0, [pc, #480]	; 1a788 <print_yaml_data@@Base+0x794>
   1a5a4:	add	r0, pc, r0
   1a5a8:	bl	1239c <puts@plt>
   1a5ac:	ldr	r0, [pc, #472]	; 1a78c <print_yaml_data@@Base+0x798>
   1a5b0:	add	r0, pc, r0
   1a5b4:	bl	1239c <puts@plt>
   1a5b8:	ldr	r0, [pc, #464]	; 1a790 <print_yaml_data@@Base+0x79c>
   1a5bc:	add	r0, pc, r0
   1a5c0:	bl	1239c <puts@plt>
   1a5c4:	ldr	r0, [pc, #456]	; 1a794 <print_yaml_data@@Base+0x7a0>
   1a5c8:	add	r0, pc, r0
   1a5cc:	bl	1239c <puts@plt>
   1a5d0:	ldr	r0, [pc, #448]	; 1a798 <print_yaml_data@@Base+0x7a4>
   1a5d4:	add	r0, pc, r0
   1a5d8:	bl	1239c <puts@plt>
   1a5dc:	mov	r0, #10
   1a5e0:	bl	124a4 <putchar@plt>
   1a5e4:	ldr	r0, [pc, #432]	; 1a79c <print_yaml_data@@Base+0x7a8>
   1a5e8:	add	r0, pc, r0
   1a5ec:	bl	1239c <puts@plt>
   1a5f0:	ldr	r0, [pc, #424]	; 1a7a0 <print_yaml_data@@Base+0x7ac>
   1a5f4:	add	r0, pc, r0
   1a5f8:	bl	1239c <puts@plt>
   1a5fc:	mov	r0, #10
   1a600:	bl	124a4 <putchar@plt>
   1a604:	ldr	r0, [pc, #408]	; 1a7a4 <print_yaml_data@@Base+0x7b0>
   1a608:	add	r0, pc, r0
   1a60c:	bl	1239c <puts@plt>
   1a610:	ldr	r0, [pc, #400]	; 1a7a8 <print_yaml_data@@Base+0x7b4>
   1a614:	add	r0, pc, r0
   1a618:	bl	1239c <puts@plt>
   1a61c:	mov	r0, #10
   1a620:	bl	124a4 <putchar@plt>
   1a624:	ldr	r0, [pc, #384]	; 1a7ac <print_yaml_data@@Base+0x7b8>
   1a628:	add	r0, pc, r0
   1a62c:	bl	1239c <puts@plt>
   1a630:	ldr	r0, [pc, #376]	; 1a7b0 <print_yaml_data@@Base+0x7bc>
   1a634:	add	r0, pc, r0
   1a638:	bl	1239c <puts@plt>
   1a63c:	ldr	r0, [pc, #368]	; 1a7b4 <print_yaml_data@@Base+0x7c0>
   1a640:	add	r0, pc, r0
   1a644:	bl	1239c <puts@plt>
   1a648:	ldr	r0, [pc, #360]	; 1a7b8 <print_yaml_data@@Base+0x7c4>
   1a64c:	add	r0, pc, r0
   1a650:	bl	1239c <puts@plt>
   1a654:	ldr	r0, [pc, #352]	; 1a7bc <print_yaml_data@@Base+0x7c8>
   1a658:	add	r0, pc, r0
   1a65c:	bl	1239c <puts@plt>
   1a660:	ldr	r0, [pc, #344]	; 1a7c0 <print_yaml_data@@Base+0x7cc>
   1a664:	add	r0, pc, r0
   1a668:	bl	1239c <puts@plt>
   1a66c:	ldr	r0, [pc, #336]	; 1a7c4 <print_yaml_data@@Base+0x7d0>
   1a670:	add	r0, pc, r0
   1a674:	bl	1239c <puts@plt>
   1a678:	mov	r0, #10
   1a67c:	add	sp, sp, #28
   1a680:	ldrd	r4, [sp]
   1a684:	ldrd	r6, [sp, #8]
   1a688:	ldrd	r8, [sp, #16]
   1a68c:	ldrd	sl, [sp, #24]
   1a690:	ldr	lr, [sp, #32]
   1a694:	add	sp, sp, #36	; 0x24
   1a698:	b	124a4 <putchar@plt>
   1a69c:	ldrdeq	r1, [r0], -r8
   1a6a0:	andeq	r1, r0, r4, asr #3
   1a6a4:	andeq	r1, r0, ip, lsr #4
   1a6a8:	muleq	r0, r0, r2
   1a6ac:	strdeq	r1, [r0], -r0
   1a6b0:	muleq	r0, ip, r2
   1a6b4:	ldrdeq	r1, [r0], -r0
   1a6b8:	strdeq	r1, [r0], -r4
   1a6bc:	andeq	r1, r0, r0, lsl #4
   1a6c0:	andeq	r1, r0, ip, lsl #9
   1a6c4:	andeq	r1, r0, r8, lsr #9
   1a6c8:	andeq	r1, r0, r0, lsl #4
   1a6cc:	andeq	r1, r0, r0, lsr r5
   1a6d0:	andeq	r1, r0, r8, lsl #13
   1a6d4:	andeq	r1, r0, r4, asr #9
   1a6d8:	ldrdeq	r1, [r0], -r4
   1a6dc:	andeq	r1, r0, r0, ror #5
   1a6e0:	andeq	r1, r0, r0, lsl #6
   1a6e4:	andeq	r1, r0, ip, lsl #6
   1a6e8:	andeq	r1, r0, ip, lsr #6
   1a6ec:	andeq	r1, r0, ip, lsr r3
   1a6f0:	andeq	r1, r0, r4, ror #6
   1a6f4:	andeq	r1, r0, r4, ror r3
   1a6f8:			; <UNDEFINED> instruction: 0x000013b0
   1a6fc:	andeq	r1, r0, r0, lsr r8
   1a700:	andeq	r1, r0, r4, ror #11
   1a704:	andeq	r1, r0, r4, lsr r8
   1a708:	andeq	r1, r0, r0, ror #8
   1a70c:	muleq	r0, ip, r4
   1a710:	andeq	r1, r0, ip, asr #17
   1a714:	andeq	r1, r0, r0, lsl #17
   1a718:	muleq	r0, r0, r4
   1a71c:	muleq	r0, ip, r4
   1a720:	ldrdeq	r1, [r0], -r4
   1a724:	andeq	r1, r0, r0, ror #9
   1a728:	andeq	r1, r0, r8, ror #10
   1a72c:	andeq	r1, r0, ip, ror r5
   1a730:			; <UNDEFINED> instruction: 0x000015bc
   1a734:	andeq	r1, r0, r8, ror #11
   1a738:	andeq	r1, r0, r8, lsr #12
   1a73c:	andeq	r1, r0, r0, asr #12
   1a740:	andeq	r1, r0, ip, asr r6
   1a744:	muleq	r0, r8, r6
   1a748:	andeq	r1, r0, r8, asr #13
   1a74c:	andeq	r1, r0, ip, lsl r7
   1a750:	andeq	r1, r0, ip, lsr r7
   1a754:	andeq	r1, r0, r8, lsr #15
   1a758:	andeq	r1, r0, r4, ror #15
   1a75c:	andeq	r1, r0, r4, lsl r8
   1a760:	andeq	r1, r0, r8, lsl #16
   1a764:	andeq	r1, r0, r8, asr #16
   1a768:	strdeq	r1, [r0], -r8
   1a76c:	andeq	r1, r0, r4, lsr r8
   1a770:	andeq	r1, r0, r4, ror r8
   1a774:			; <UNDEFINED> instruction: 0x000018b4
   1a778:	ldrdeq	r1, [r0], -r8
   1a77c:	andeq	r1, r0, r4, ror #17
   1a780:	andeq	r1, r0, r8, lsl #18
   1a784:	andeq	r1, r0, r8, lsl #18
   1a788:	andeq	r1, r0, ip, lsl r9
   1a78c:	andeq	r1, r0, r0, ror #18
   1a790:	andeq	r1, r0, r0, lsr #19
   1a794:	ldrdeq	r1, [r0], -r4
   1a798:	andeq	r1, r0, r8, lsl sl
   1a79c:	andeq	r1, r0, ip, lsr sl
   1a7a0:	andeq	r1, r0, r8, asr #20
   1a7a4:	andeq	r1, r0, r4, asr sl
   1a7a8:	andeq	r1, r0, r4, ror #20
   1a7ac:	andeq	r1, r0, r4, lsl #21
   1a7b0:	andeq	r1, r0, r8, asr #21
   1a7b4:	andeq	r1, r0, r8, lsl #22
   1a7b8:	andeq	r1, r0, r8, lsr #22
   1a7bc:	andeq	r1, r0, r8, ror #22
   1a7c0:	andeq	r1, r0, r4, lsr #23
   1a7c4:	ldrdeq	r1, [r0], -r8

0001a7c8 <handle_coda_error@@Base>:
   1a7c8:	ldr	r3, [pc, #72]	; 1a818 <handle_coda_error@@Base+0x50>
   1a7cc:	strd	r4, [sp, #-16]!
   1a7d0:	ldr	r2, [pc, #68]	; 1a81c <handle_coda_error@@Base+0x54>
   1a7d4:	str	r6, [sp, #8]
   1a7d8:	str	lr, [sp, #12]
   1a7dc:	add	r3, pc, r3
   1a7e0:	ldr	r4, [r3, r2]
   1a7e4:	ldr	r5, [r4]
   1a7e8:	bl	125e8 <coda_get_errno@plt>
   1a7ec:	ldr	r0, [r0]
   1a7f0:	bl	125a0 <coda_errno_to_string@plt>
   1a7f4:	ldr	r1, [pc, #36]	; 1a820 <handle_coda_error@@Base+0x58>
   1a7f8:	mov	r2, r0
   1a7fc:	mov	r0, r5
   1a800:	add	r1, pc, r1
   1a804:	bl	12444 <fprintf@plt>
   1a808:	ldr	r0, [r4]
   1a80c:	bl	1224c <fflush@plt>
   1a810:	mov	r0, #1
   1a814:	bl	123fc <exit@plt>
   1a818:	andeq	r2, r1, ip, lsl r8
   1a81c:			; <UNDEFINED> instruction: 0x000001b8
   1a820:	andeq	r1, r0, r8, lsl #21
   1a824:	cmp	r3, #0
   1a828:	cmpeq	r2, #0
   1a82c:	bne	1a850 <handle_coda_error@@Base+0x88>
   1a830:	cmp	r1, #0
   1a834:	movlt	r1, #-2147483648	; 0x80000000
   1a838:	movlt	r0, #0
   1a83c:	blt	1a84c <handle_coda_error@@Base+0x84>
   1a840:	cmpeq	r0, #0
   1a844:	mvnne	r1, #-2147483648	; 0x80000000
   1a848:	mvnne	r0, #0
   1a84c:	b	1a8f8 <handle_coda_error@@Base+0x130>
   1a850:	sub	sp, sp, #8
   1a854:	push	{sp, lr}
   1a858:	cmp	r1, #0
   1a85c:	blt	1a87c <handle_coda_error@@Base+0xb4>
   1a860:	cmp	r3, #0
   1a864:	blt	1a8b0 <handle_coda_error@@Base+0xe8>
   1a868:	bl	1a908 <handle_coda_error@@Base+0x140>
   1a86c:	ldr	lr, [sp, #4]
   1a870:	add	sp, sp, #8
   1a874:	pop	{r2, r3}
   1a878:	bx	lr
   1a87c:	rsbs	r0, r0, #0
   1a880:	sbc	r1, r1, r1, lsl #1
   1a884:	cmp	r3, #0
   1a888:	blt	1a8d4 <handle_coda_error@@Base+0x10c>
   1a88c:	bl	1a908 <handle_coda_error@@Base+0x140>
   1a890:	ldr	lr, [sp, #4]
   1a894:	add	sp, sp, #8
   1a898:	pop	{r2, r3}
   1a89c:	rsbs	r0, r0, #0
   1a8a0:	sbc	r1, r1, r1, lsl #1
   1a8a4:	rsbs	r2, r2, #0
   1a8a8:	sbc	r3, r3, r3, lsl #1
   1a8ac:	bx	lr
   1a8b0:	rsbs	r2, r2, #0
   1a8b4:	sbc	r3, r3, r3, lsl #1
   1a8b8:	bl	1a908 <handle_coda_error@@Base+0x140>
   1a8bc:	ldr	lr, [sp, #4]
   1a8c0:	add	sp, sp, #8
   1a8c4:	pop	{r2, r3}
   1a8c8:	rsbs	r0, r0, #0
   1a8cc:	sbc	r1, r1, r1, lsl #1
   1a8d0:	bx	lr
   1a8d4:	rsbs	r2, r2, #0
   1a8d8:	sbc	r3, r3, r3, lsl #1
   1a8dc:	bl	1a908 <handle_coda_error@@Base+0x140>
   1a8e0:	ldr	lr, [sp, #4]
   1a8e4:	add	sp, sp, #8
   1a8e8:	pop	{r2, r3}
   1a8ec:	rsbs	r2, r2, #0
   1a8f0:	sbc	r3, r3, r3, lsl #1
   1a8f4:	bx	lr
   1a8f8:	push	{r1, lr}
   1a8fc:	mov	r0, #8
   1a900:	bl	121c8 <raise@plt>
   1a904:	pop	{r1, pc}
   1a908:	cmp	r1, r3
   1a90c:	cmpeq	r0, r2
   1a910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a914:	mov	r4, r0
   1a918:	movcc	r0, #0
   1a91c:	mov	r5, r1
   1a920:	ldr	lr, [sp, #36]	; 0x24
   1a924:	movcc	r1, r0
   1a928:	bcc	1aa24 <handle_coda_error@@Base+0x25c>
   1a92c:	cmp	r3, #0
   1a930:	clzeq	ip, r2
   1a934:	clzne	ip, r3
   1a938:	addeq	ip, ip, #32
   1a93c:	cmp	r5, #0
   1a940:	clzeq	r1, r4
   1a944:	addeq	r1, r1, #32
   1a948:	clzne	r1, r5
   1a94c:	sub	ip, ip, r1
   1a950:	sub	sl, ip, #32
   1a954:	lsl	r9, r3, ip
   1a958:	rsb	fp, ip, #32
   1a95c:	orr	r9, r9, r2, lsl sl
   1a960:	orr	r9, r9, r2, lsr fp
   1a964:	lsl	r8, r2, ip
   1a968:	cmp	r5, r9
   1a96c:	cmpeq	r4, r8
   1a970:	movcc	r0, #0
   1a974:	movcc	r1, r0
   1a978:	bcc	1a994 <handle_coda_error@@Base+0x1cc>
   1a97c:	mov	r0, #1
   1a980:	subs	r4, r4, r8
   1a984:	lsl	r1, r0, sl
   1a988:	orr	r1, r1, r0, lsr fp
   1a98c:	lsl	r0, r0, ip
   1a990:	sbc	r5, r5, r9
   1a994:	cmp	ip, #0
   1a998:	beq	1aa24 <handle_coda_error@@Base+0x25c>
   1a99c:	lsr	r6, r8, #1
   1a9a0:	orr	r6, r6, r9, lsl #31
   1a9a4:	lsr	r7, r9, #1
   1a9a8:	mov	r2, ip
   1a9ac:	b	1a9d0 <handle_coda_error@@Base+0x208>
   1a9b0:	subs	r3, r4, r6
   1a9b4:	sbc	r8, r5, r7
   1a9b8:	adds	r3, r3, r3
   1a9bc:	adc	r8, r8, r8
   1a9c0:	adds	r4, r3, #1
   1a9c4:	adc	r5, r8, #0
   1a9c8:	subs	r2, r2, #1
   1a9cc:	beq	1a9ec <handle_coda_error@@Base+0x224>
   1a9d0:	cmp	r5, r7
   1a9d4:	cmpeq	r4, r6
   1a9d8:	bcs	1a9b0 <handle_coda_error@@Base+0x1e8>
   1a9dc:	adds	r4, r4, r4
   1a9e0:	adc	r5, r5, r5
   1a9e4:	subs	r2, r2, #1
   1a9e8:	bne	1a9d0 <handle_coda_error@@Base+0x208>
   1a9ec:	lsr	r3, r4, ip
   1a9f0:	orr	r3, r3, r5, lsl fp
   1a9f4:	lsr	r2, r5, ip
   1a9f8:	orr	r3, r3, r5, lsr sl
   1a9fc:	adds	r0, r0, r4
   1aa00:	mov	r4, r3
   1aa04:	lsl	r3, r2, ip
   1aa08:	orr	r3, r3, r4, lsl sl
   1aa0c:	lsl	ip, r4, ip
   1aa10:	orr	r3, r3, r4, lsr fp
   1aa14:	adc	r1, r1, r5
   1aa18:	subs	r0, r0, ip
   1aa1c:	mov	r5, r2
   1aa20:	sbc	r1, r1, r3
   1aa24:	cmp	lr, #0
   1aa28:	strdne	r4, [lr]
   1aa2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001aa30 <__libc_csu_init@@Base>:
   1aa30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aa34:	mov	r7, r0
   1aa38:	ldr	r6, [pc, #72]	; 1aa88 <__libc_csu_init@@Base+0x58>
   1aa3c:	ldr	r5, [pc, #72]	; 1aa8c <__libc_csu_init@@Base+0x5c>
   1aa40:	add	r6, pc, r6
   1aa44:	add	r5, pc, r5
   1aa48:	sub	r6, r6, r5
   1aa4c:	mov	r8, r1
   1aa50:	mov	r9, r2
   1aa54:	bl	12184 <coda_cursor_get_byte_size@plt-0x20>
   1aa58:	asrs	r6, r6, #2
   1aa5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa60:	mov	r4, #0
   1aa64:	add	r4, r4, #1
   1aa68:	ldr	r3, [r5], #4
   1aa6c:	mov	r2, r9
   1aa70:	mov	r1, r8
   1aa74:	mov	r0, r7
   1aa78:	blx	r3
   1aa7c:	cmp	r6, r4
   1aa80:	bne	1aa64 <__libc_csu_init@@Base+0x34>
   1aa84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa88:			; <UNDEFINED> instruction: 0x000124b4
   1aa8c:	andeq	r2, r1, ip, lsr #9

0001aa90 <__libc_csu_fini@@Base>:
   1aa90:	bx	lr

Disassembly of section .fini:

0001aa94 <.fini>:
   1aa94:	push	{r3, lr}
   1aa98:	pop	{r3, pc}
