
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

00010b44 <.init>:
   10b44:	push	{r3, lr}
   10b48:	bl	10d6c <__assert_fail@plt+0x4c>
   10b4c:	pop	{r3, pc}

Disassembly of section .plt:

00010b50 <calloc@plt-0x14>:
   10b50:	push	{lr}		; (str lr, [sp, #-4]!)
   10b54:	ldr	lr, [pc, #4]	; 10b60 <calloc@plt-0x4>
   10b58:	add	lr, pc, lr
   10b5c:	ldr	pc, [lr, #8]!
   10b60:	andeq	r7, r1, r0, lsr #9

00010b64 <calloc@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #94208	; 0x17000
   10b6c:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b70 <strcmp@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #94208	; 0x17000
   10b78:	ldr	pc, [ip, #1176]!	; 0x498

00010b7c <strtol@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #94208	; 0x17000
   10b84:	ldr	pc, [ip, #1168]!	; 0x490

00010b88 <printf@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #94208	; 0x17000
   10b90:	ldr	pc, [ip, #1160]!	; 0x488

00010b94 <fopen@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #94208	; 0x17000
   10b9c:	ldr	pc, [ip, #1152]!	; 0x480

00010ba0 <free@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #94208	; 0x17000
   10ba8:	ldr	pc, [ip, #1144]!	; 0x478

00010bac <utf8proc_get_property@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #94208	; 0x17000
   10bb4:	ldr	pc, [ip, #1136]!	; 0x470

00010bb8 <fgets@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #94208	; 0x17000
   10bc0:	ldr	pc, [ip, #1128]!	; 0x468

00010bc4 <utf8proc_encode_char@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #94208	; 0x17000
   10bcc:	ldr	pc, [ip, #1120]!	; 0x460

00010bd0 <strdup@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #94208	; 0x17000
   10bd8:	ldr	pc, [ip, #1112]!	; 0x458

00010bdc <rewind@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #94208	; 0x17000
   10be4:	ldr	pc, [ip, #1104]!	; 0x450

00010be8 <unlink@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #94208	; 0x17000
   10bf0:	ldr	pc, [ip, #1096]!	; 0x448

00010bf4 <utf8proc_tolower@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #94208	; 0x17000
   10bfc:	ldr	pc, [ip, #1088]!	; 0x440

00010c00 <__xstat@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #94208	; 0x17000
   10c08:	ldr	pc, [ip, #1080]!	; 0x438

00010c0c <fwrite@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #94208	; 0x17000
   10c14:	ldr	pc, [ip, #1072]!	; 0x430

00010c18 <fread@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #94208	; 0x17000
   10c20:	ldr	pc, [ip, #1064]!	; 0x428

00010c24 <utf8proc_iterate@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #94208	; 0x17000
   10c2c:	ldr	pc, [ip, #1056]!	; 0x420

00010c30 <malloc@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #94208	; 0x17000
   10c38:	ldr	pc, [ip, #1048]!	; 0x418

00010c3c <__libc_start_main@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #94208	; 0x17000
   10c44:	ldr	pc, [ip, #1040]!	; 0x410

00010c48 <__sysv_signal@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #94208	; 0x17000
   10c50:	ldr	pc, [ip, #1032]!	; 0x408

00010c54 <__gmon_start__@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #94208	; 0x17000
   10c5c:	ldr	pc, [ip, #1024]!	; 0x400

00010c60 <getpid@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #94208	; 0x17000
   10c68:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c6c <exit@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #94208	; 0x17000
   10c74:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c78 <bcmp@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #94208	; 0x17000
   10c80:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c84 <utf8proc_category@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #94208	; 0x17000
   10c8c:	ldr	pc, [ip, #992]!	; 0x3e0

00010c90 <strlen@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #94208	; 0x17000
   10c98:	ldr	pc, [ip, #984]!	; 0x3d8

00010c9c <fprintf@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #94208	; 0x17000
   10ca4:	ldr	pc, [ip, #976]!	; 0x3d0

00010ca8 <__isoc99_sscanf@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #94208	; 0x17000
   10cb0:	ldr	pc, [ip, #968]!	; 0x3c8

00010cb4 <fclose@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #94208	; 0x17000
   10cbc:	ldr	pc, [ip, #960]!	; 0x3c0

00010cc0 <utf8proc_NFC@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #94208	; 0x17000
   10cc8:	ldr	pc, [ip, #952]!	; 0x3b8

00010ccc <fputc@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #94208	; 0x17000
   10cd4:	ldr	pc, [ip, #944]!	; 0x3b0

00010cd8 <sprintf@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #936]!	; 0x3a8

00010ce4 <utf8proc_errmsg@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #928]!	; 0x3a0

00010cf0 <fputs@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #920]!	; 0x398

00010cfc <strncmp@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #912]!	; 0x390

00010d08 <abort@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #904]!	; 0x388

00010d14 <getc@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #896]!	; 0x380

00010d20 <__assert_fail@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #94208	; 0x17000
   10d28:	ldr	pc, [ip, #888]!	; 0x378

Disassembly of section .text:

00010d30 <error@@Base-0x1fb8>:
   10d30:	mov	fp, #0
   10d34:	mov	lr, #0
   10d38:	pop	{r1}		; (ldr r1, [sp], #4)
   10d3c:	mov	r2, sp
   10d40:	push	{r2}		; (str r2, [sp, #-4]!)
   10d44:	push	{r0}		; (str r0, [sp, #-4]!)
   10d48:	ldr	ip, [pc, #16]	; 10d60 <__assert_fail@plt+0x40>
   10d4c:	push	{ip}		; (str ip, [sp, #-4]!)
   10d50:	ldr	r0, [pc, #12]	; 10d64 <__assert_fail@plt+0x44>
   10d54:	ldr	r3, [pc, #12]	; 10d68 <__assert_fail@plt+0x48>
   10d58:	bl	10c3c <__libc_start_main@plt>
   10d5c:	bl	10d08 <abort@plt>
   10d60:	andeq	r3, r1, r8, asr #20
   10d64:	andeq	r1, r1, r0, asr r0
   10d68:	andeq	r3, r1, r8, ror #19
   10d6c:	ldr	r3, [pc, #20]	; 10d88 <__assert_fail@plt+0x68>
   10d70:	ldr	r2, [pc, #20]	; 10d8c <__assert_fail@plt+0x6c>
   10d74:	add	r3, pc, r3
   10d78:	ldr	r2, [r3, r2]
   10d7c:	cmp	r2, #0
   10d80:	bxeq	lr
   10d84:	b	10c54 <__gmon_start__@plt>
   10d88:	andeq	r7, r1, r4, lsl #5
   10d8c:	andeq	r0, r0, r4, lsr #1
   10d90:	ldr	r0, [pc, #24]	; 10db0 <__assert_fail@plt+0x90>
   10d94:	ldr	r3, [pc, #24]	; 10db4 <__assert_fail@plt+0x94>
   10d98:	cmp	r3, r0
   10d9c:	bxeq	lr
   10da0:	ldr	r3, [pc, #16]	; 10db8 <__assert_fail@plt+0x98>
   10da4:	cmp	r3, #0
   10da8:	bxeq	lr
   10dac:	bx	r3
   10db0:	andeq	r8, r2, r4, asr #1
   10db4:	andeq	r8, r2, r4, asr #1
   10db8:	andeq	r0, r0, r0
   10dbc:	ldr	r0, [pc, #36]	; 10de8 <__assert_fail@plt+0xc8>
   10dc0:	ldr	r1, [pc, #36]	; 10dec <__assert_fail@plt+0xcc>
   10dc4:	sub	r1, r1, r0
   10dc8:	asr	r1, r1, #2
   10dcc:	add	r1, r1, r1, lsr #31
   10dd0:	asrs	r1, r1, #1
   10dd4:	bxeq	lr
   10dd8:	ldr	r3, [pc, #16]	; 10df0 <__assert_fail@plt+0xd0>
   10ddc:	cmp	r3, #0
   10de0:	bxeq	lr
   10de4:	bx	r3
   10de8:	andeq	r8, r2, r4, asr #1
   10dec:	andeq	r8, r2, r4, asr #1
   10df0:	andeq	r0, r0, r0
   10df4:	push	{r4, lr}
   10df8:	ldr	r4, [pc, #24]	; 10e18 <__assert_fail@plt+0xf8>
   10dfc:	ldrb	r3, [r4]
   10e00:	cmp	r3, #0
   10e04:	popne	{r4, pc}
   10e08:	bl	10d90 <__assert_fail@plt+0x70>
   10e0c:	mov	r3, #1
   10e10:	strb	r3, [r4]
   10e14:	pop	{r4, pc}
   10e18:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   10e1c:	b	10dbc <__assert_fail@plt+0x9c>
   10e20:	push	{fp, lr}
   10e24:	mov	fp, sp
   10e28:	bl	11cc8 <__assert_fail@plt+0xfa8>
   10e2c:	cmp	r0, #0
   10e30:	popeq	{fp, pc}
   10e34:	movw	r2, #33104	; 0x8150
   10e38:	ldr	r1, [r0, #12]
   10e3c:	ldr	r0, [r0, #16]
   10e40:	movt	r2, #2
   10e44:	ldr	r3, [r2]
   10e48:	sub	r1, r3, r1
   10e4c:	str	r1, [r2]
   10e50:	movw	r1, #50244	; 0xc444
   10e54:	movt	r1, #2
   10e58:	ldr	r2, [r1]
   10e5c:	sub	r0, r2, r0
   10e60:	str	r0, [r1]
   10e64:	pop	{fp, pc}
   10e68:	movw	r0, #50244	; 0xc444
   10e6c:	movw	r1, #33104	; 0x8150
   10e70:	movw	r3, #32988	; 0x80dc
   10e74:	vldr	d16, [pc, #76]	; 10ec8 <__assert_fail@plt+0x1a8>
   10e78:	movt	r0, #2
   10e7c:	movt	r1, #2
   10e80:	movt	r3, #2
   10e84:	ldr	r2, [r1]
   10e88:	ldr	r0, [r0]
   10e8c:	ldr	r1, [r3]
   10e90:	sub	r0, r2, r0
   10e94:	vmov	s2, r2
   10e98:	vmov	s0, r0
   10e9c:	add	r0, r1, #1
   10ea0:	vcvt.f64.s32	d17, s0
   10ea4:	vcvt.f64.s32	d18, s2
   10ea8:	str	r0, [r3]
   10eac:	movw	r0, #14936	; 0x3a58
   10eb0:	movt	r0, #1
   10eb4:	vmul.f64	d16, d17, d16
   10eb8:	vdiv.f64	d16, d16, d18
   10ebc:	vmov	r2, r3, d16
   10ec0:	b	10b88 <printf@plt>
   10ec4:	nop	{0}
   10ec8:	andeq	r0, r0, r0
   10ecc:	subsmi	r0, r9, r0
   10ed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ed4:	add	fp, sp, #28
   10ed8:	sub	sp, sp, #4
   10edc:	vpush	{d8}
   10ee0:	movw	r5, #33140	; 0x8174
   10ee4:	movw	r7, #33104	; 0x8150
   10ee8:	movw	r6, #50244	; 0xc444
   10eec:	movt	r5, #2
   10ef0:	movt	r7, #2
   10ef4:	movt	r6, #2
   10ef8:	ldm	r5, {r0, r1}
   10efc:	str	r1, [r6]
   10f00:	cmp	r0, #0
   10f04:	str	r0, [r7]
   10f08:	beq	1103c <__assert_fail@plt+0x31c>
   10f0c:	sub	r2, r0, r1
   10f10:	movw	r9, #32988	; 0x80dc
   10f14:	vldr	d8, [pc, #300]	; 11048 <__assert_fail@plt+0x328>
   10f18:	vmov	s2, r0
   10f1c:	vmov	s0, r2
   10f20:	movt	r9, #2
   10f24:	ldr	r1, [r9]
   10f28:	vcvt.f64.s32	d16, s0
   10f2c:	vcvt.f64.s32	d17, s2
   10f30:	add	r0, r1, #1
   10f34:	str	r0, [r9]
   10f38:	movw	r0, #14936	; 0x3a58
   10f3c:	movt	r0, #1
   10f40:	vmul.f64	d16, d16, d8
   10f44:	vdiv.f64	d16, d16, d17
   10f48:	vmov	r2, r3, d16
   10f4c:	bl	10b88 <printf@plt>
   10f50:	movw	r0, #33124	; 0x8164
   10f54:	movt	r0, #2
   10f58:	ldr	r4, [r0]
   10f5c:	cmp	r4, #0
   10f60:	beq	1103c <__assert_fail@plt+0x31c>
   10f64:	movw	r8, #14936	; 0x3a58
   10f68:	movw	r0, #9048	; 0x2358
   10f6c:	add	sl, r5, #992	; 0x3e0
   10f70:	movt	r8, #1
   10f74:	add	r5, r5, r0
   10f78:	ldr	r1, [r4, #8]
   10f7c:	mov	r0, sl
   10f80:	bl	11cc8 <__assert_fail@plt+0xfa8>
   10f84:	cmp	r0, #0
   10f88:	beq	10fac <__assert_fail@plt+0x28c>
   10f8c:	ldr	r1, [r0, #12]
   10f90:	ldr	r2, [r7]
   10f94:	ldr	r0, [r0, #16]
   10f98:	sub	r1, r2, r1
   10f9c:	str	r1, [r7]
   10fa0:	ldr	r1, [r6]
   10fa4:	sub	r0, r1, r0
   10fa8:	str	r0, [r6]
   10fac:	ldr	r1, [r4, #8]
   10fb0:	mov	r0, r5
   10fb4:	bl	11cc8 <__assert_fail@plt+0xfa8>
   10fb8:	cmp	r0, #0
   10fbc:	beq	10fec <__assert_fail@plt+0x2cc>
   10fc0:	ldr	r1, [r0, #12]
   10fc4:	ldr	r2, [r0, #16]
   10fc8:	ldr	r0, [r7]
   10fcc:	sub	r0, r0, r1
   10fd0:	ldr	r1, [r6]
   10fd4:	str	r0, [r7]
   10fd8:	sub	r1, r1, r2
   10fdc:	str	r1, [r6]
   10fe0:	cmp	r0, #0
   10fe4:	bne	10ff8 <__assert_fail@plt+0x2d8>
   10fe8:	b	1103c <__assert_fail@plt+0x31c>
   10fec:	ldr	r0, [r7]
   10ff0:	cmp	r0, #0
   10ff4:	beq	1103c <__assert_fail@plt+0x31c>
   10ff8:	ldr	r1, [r6]
   10ffc:	vmov	s2, r0
   11000:	sub	r2, r0, r1
   11004:	ldr	r1, [r9]
   11008:	vmov	s0, r2
   1100c:	add	r0, r1, #1
   11010:	vcvt.f64.s32	d16, s0
   11014:	vcvt.f64.s32	d17, s2
   11018:	str	r0, [r9]
   1101c:	mov	r0, r8
   11020:	vmul.f64	d16, d16, d8
   11024:	vdiv.f64	d16, d16, d17
   11028:	vmov	r2, r3, d16
   1102c:	bl	10b88 <printf@plt>
   11030:	ldr	r4, [r4, #4]
   11034:	cmp	r4, #0
   11038:	bne	10f78 <__assert_fail@plt+0x258>
   1103c:	vpop	{d8}
   11040:	add	sp, sp, #4
   11044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11048:	andeq	r0, r0, r0
   1104c:	subsmi	r0, r9, r0
   11050:	push	{fp, lr}
   11054:	mov	fp, sp
   11058:	sub	sp, sp, #8
   1105c:	movw	r2, #14948	; 0x3a64
   11060:	str	r0, [sp, #4]
   11064:	add	r0, sp, #4
   11068:	mov	r3, #0
   1106c:	mov	r4, r1
   11070:	movt	r2, #1
   11074:	bl	129d0 <__assert_fail@plt+0x1cb0>
   11078:	ldr	r0, [sp, #4]
   1107c:	cmp	r0, #2
   11080:	bne	110c8 <__assert_fail@plt+0x3a8>
   11084:	movw	r5, #33108	; 0x8154
   11088:	ldr	r1, [r4]
   1108c:	movw	r2, #32944	; 0x80b0
   11090:	movt	r5, #2
   11094:	movt	r2, #2
   11098:	mov	r0, r5
   1109c:	bl	12ef8 <error@@Base+0x210>
   110a0:	movw	r0, #33124	; 0x8164
   110a4:	mov	r1, r5
   110a8:	movt	r0, #2
   110ac:	bl	11f48 <__assert_fail@plt+0x1228>
   110b0:	ldr	r1, [r4, #4]
   110b4:	movw	r0, #33140	; 0x8174
   110b8:	movt	r0, #2
   110bc:	bl	11158 <__assert_fail@plt+0x438>
   110c0:	bl	10ed0 <__assert_fail@plt+0x1b0>
   110c4:	bl	12ca8 <__assert_fail@plt+0x1f88>
   110c8:	movw	r0, #14984	; 0x3a88
   110cc:	movt	r0, #1
   110d0:	bl	12ce8 <error@@Base>
   110d4:	andeq	r0, r0, r0
   110d8:	ldm	r0, {r3, ip}
   110dc:	add	r2, ip, r2
   110e0:	add	r1, r3, r1
   110e4:	stm	r0, {r1, r2}
   110e8:	bx	lr
   110ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   110f0:	add	fp, sp, #24
   110f4:	mov	r8, r3
   110f8:	mov	r5, r2
   110fc:	mov	r4, r1
   11100:	mov	r6, r0
   11104:	bl	11cc8 <__assert_fail@plt+0xfa8>
   11108:	mov	r7, r0
   1110c:	cmp	r0, #0
   11110:	bne	1113c <__assert_fail@plt+0x41c>
   11114:	mov	r0, #1
   11118:	mov	r1, #20
   1111c:	bl	127b0 <__assert_fail@plt+0x1a90>
   11120:	mov	r7, r0
   11124:	mov	r0, r4
   11128:	bl	10bd0 <strdup@plt>
   1112c:	str	r0, [r7, #8]
   11130:	mov	r0, r6
   11134:	mov	r1, r7
   11138:	bl	11d58 <__assert_fail@plt+0x1038>
   1113c:	ldr	r0, [r7, #12]
   11140:	ldr	r1, [r7, #16]
   11144:	add	r0, r0, r5
   11148:	add	r1, r1, r8
   1114c:	str	r0, [r7, #12]
   11150:	str	r1, [r7, #16]
   11154:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11158:	push	{r4, r5, r6, r7, fp, lr}
   1115c:	add	fp, sp, #16
   11160:	sub	sp, sp, #8
   11164:	mov	r6, r1
   11168:	movw	r1, #28869	; 0x70c5
   1116c:	mov	r5, r0
   11170:	movt	r1, #1
   11174:	mov	r0, r6
   11178:	bl	12854 <__assert_fail@plt+0x1b34>
   1117c:	mov	r4, r0
   11180:	movw	r0, #32992	; 0x80e0
   11184:	mov	r1, #99	; 0x63
   11188:	movt	r0, #2
   1118c:	mov	r2, r4
   11190:	bl	10bb8 <fgets@plt>
   11194:	cmp	r0, #0
   11198:	beq	11338 <__assert_fail@plt+0x618>
   1119c:	movw	r0, #32992	; 0x80e0
   111a0:	movw	r1, #15008	; 0x3aa0
   111a4:	mov	r2, #45	; 0x2d
   111a8:	movt	r0, #2
   111ac:	movt	r1, #1
   111b0:	bl	10c78 <bcmp@plt>
   111b4:	cmp	r0, #0
   111b8:	bne	11338 <__assert_fail@plt+0x618>
   111bc:	movw	r0, #32992	; 0x80e0
   111c0:	mov	r1, #99	; 0x63
   111c4:	mov	r2, r4
   111c8:	movt	r0, #2
   111cc:	bl	10bb8 <fgets@plt>
   111d0:	cmp	r0, #0
   111d4:	beq	11338 <__assert_fail@plt+0x618>
   111d8:	movw	r0, #32992	; 0x80e0
   111dc:	movw	r1, #28799	; 0x707f
   111e0:	mov	r2, #48	; 0x30
   111e4:	movt	r0, #2
   111e8:	movt	r1, #1
   111ec:	bl	10c78 <bcmp@plt>
   111f0:	cmp	r0, #0
   111f4:	bne	11338 <__assert_fail@plt+0x618>
   111f8:	movw	r0, #32992	; 0x80e0
   111fc:	mov	r1, #99	; 0x63
   11200:	mov	r2, r4
   11204:	movt	r0, #2
   11208:	bl	10bb8 <fgets@plt>
   1120c:	cmp	r0, #0
   11210:	beq	11338 <__assert_fail@plt+0x618>
   11214:	movw	r0, #32992	; 0x80e0
   11218:	movw	r1, #15189	; 0x3b55
   1121c:	add	r2, sp, #4
   11220:	movt	r0, #2
   11224:	movt	r1, #1
   11228:	bl	10ca8 <__isoc99_sscanf@plt>
   1122c:	cmp	r0, #1
   11230:	bne	11338 <__assert_fail@plt+0x618>
   11234:	movw	r0, #32992	; 0x80e0
   11238:	mov	r1, #99	; 0x63
   1123c:	mov	r2, r4
   11240:	movt	r0, #2
   11244:	bl	10bb8 <fgets@plt>
   11248:	cmp	r0, #0
   1124c:	beq	11338 <__assert_fail@plt+0x618>
   11250:	movw	r0, #32992	; 0x80e0
   11254:	movw	r1, #15189	; 0x3b55
   11258:	mov	r2, sp
   1125c:	movt	r0, #2
   11260:	movt	r1, #1
   11264:	bl	10ca8 <__isoc99_sscanf@plt>
   11268:	cmp	r0, #1
   1126c:	bne	11338 <__assert_fail@plt+0x618>
   11270:	movw	r0, #32992	; 0x80e0
   11274:	mov	r1, #99	; 0x63
   11278:	mov	r2, r4
   1127c:	movt	r0, #2
   11280:	bl	10bb8 <fgets@plt>
   11284:	cmp	r0, #0
   11288:	beq	11338 <__assert_fail@plt+0x618>
   1128c:	movw	r0, #32992	; 0x80e0
   11290:	mov	r1, #99	; 0x63
   11294:	mov	r2, r4
   11298:	movt	r0, #2
   1129c:	bl	10bb8 <fgets@plt>
   112a0:	cmp	r0, #0
   112a4:	beq	11338 <__assert_fail@plt+0x618>
   112a8:	ldr	r2, [sp, #4]
   112ac:	ldm	r5, {r0, r1}
   112b0:	add	r0, r0, r2
   112b4:	ldr	r2, [sp]
   112b8:	add	r1, r1, r2
   112bc:	stm	r5, {r0, r1}
   112c0:	add	r1, r5, #8
   112c4:	mov	r0, r4
   112c8:	bl	11354 <__assert_fail@plt+0x634>
   112cc:	mov	r7, r0
   112d0:	add	r1, r5, #416	; 0x1a0
   112d4:	mov	r0, r4
   112d8:	bl	11354 <__assert_fail@plt+0x634>
   112dc:	mov	r6, r0
   112e0:	add	r1, r5, #824	; 0x338
   112e4:	mov	r0, r4
   112e8:	bl	11354 <__assert_fail@plt+0x634>
   112ec:	ldr	r0, [sp, #4]
   112f0:	cmp	r0, #1
   112f4:	blt	11328 <__assert_fail@plt+0x608>
   112f8:	add	r1, r5, #920	; 0x398
   112fc:	mov	r0, r4
   11300:	bl	11354 <__assert_fail@plt+0x634>
   11304:	cmp	r7, #1
   11308:	addge	r1, r5, #992	; 0x3e0
   1130c:	movge	r0, r4
   11310:	blge	11480 <__assert_fail@plt+0x760>
   11314:	cmp	r6, #1
   11318:	movwge	r0, #9048	; 0x2358
   1131c:	addge	r1, r5, r0
   11320:	movge	r0, r4
   11324:	blge	11480 <__assert_fail@plt+0x760>
   11328:	mov	r0, r4
   1132c:	bl	128cc <__assert_fail@plt+0x1bac>
   11330:	sub	sp, fp, #16
   11334:	pop	{r4, r5, r6, r7, fp, pc}
   11338:	movw	r0, #15056	; 0x3ad0
   1133c:	movw	r1, #15074	; 0x3ae2
   11340:	cmp	r6, #0
   11344:	movt	r0, #1
   11348:	movt	r1, #1
   1134c:	movne	r1, r6
   11350:	bl	12d28 <error@@Base+0x40>
   11354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11358:	add	fp, sp, #28
   1135c:	sub	sp, sp, #12
   11360:	mov	r5, r0
   11364:	movw	r0, #32992	; 0x80e0
   11368:	mov	r4, r1
   1136c:	mov	r1, #99	; 0x63
   11370:	movt	r0, #2
   11374:	mov	r2, r5
   11378:	bl	10bb8 <fgets@plt>
   1137c:	mov	r6, #0
   11380:	cmp	r0, #0
   11384:	beq	11474 <__assert_fail@plt+0x754>
   11388:	movw	r0, #32992	; 0x80e0
   1138c:	mov	r1, #99	; 0x63
   11390:	mov	r2, r5
   11394:	movt	r0, #2
   11398:	bl	10bb8 <fgets@plt>
   1139c:	cmp	r0, #0
   113a0:	beq	11474 <__assert_fail@plt+0x754>
   113a4:	movw	r7, #32992	; 0x80e0
   113a8:	mov	r1, #99	; 0x63
   113ac:	mov	r2, r5
   113b0:	movt	r7, #2
   113b4:	mov	r0, r7
   113b8:	bl	10bb8 <fgets@plt>
   113bc:	cmp	r0, #0
   113c0:	beq	11474 <__assert_fail@plt+0x754>
   113c4:	mov	r6, #0
   113c8:	add	r9, sp, #8
   113cc:	add	sl, sp, #4
   113d0:	add	r8, r7, #29
   113d4:	b	11434 <__assert_fail@plt+0x714>
   113d8:	movw	r1, #15177	; 0x3b49
   113dc:	mov	r0, r8
   113e0:	mov	r2, #8
   113e4:	movt	r1, #1
   113e8:	bl	10c78 <bcmp@plt>
   113ec:	ldr	r1, [sp, #8]
   113f0:	cmp	r0, #0
   113f4:	movwne	r0, #11
   113f8:	moveq	r6, r1
   113fc:	mov	r2, r4
   11400:	ldr	r0, [r2, r0, lsl #3]!
   11404:	add	r0, r0, r1
   11408:	ldr	r1, [sp, #4]
   1140c:	str	r0, [r2]
   11410:	ldr	r0, [r2, #4]
   11414:	add	r0, r0, r1
   11418:	mov	r1, #99	; 0x63
   1141c:	str	r0, [r2, #4]
   11420:	mov	r0, r7
   11424:	mov	r2, r5
   11428:	bl	10bb8 <fgets@plt>
   1142c:	cmp	r0, #0
   11430:	beq	11474 <__assert_fail@plt+0x754>
   11434:	movw	r1, #15185	; 0x3b51
   11438:	mov	r0, r7
   1143c:	mov	r2, r9
   11440:	mov	r3, sl
   11444:	movt	r1, #1
   11448:	bl	10ca8 <__isoc99_sscanf@plt>
   1144c:	cmp	r0, #2
   11450:	bne	11474 <__assert_fail@plt+0x754>
   11454:	mov	r0, r8
   11458:	mov	r1, #0
   1145c:	mov	r2, #10
   11460:	bl	10b7c <strtol@plt>
   11464:	cmp	r0, #0
   11468:	beq	113d8 <__assert_fail@plt+0x6b8>
   1146c:	ldr	r1, [sp, #8]
   11470:	b	113fc <__assert_fail@plt+0x6dc>
   11474:	mov	r0, r6
   11478:	sub	sp, fp, #28
   1147c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11484:	add	fp, sp, #28
   11488:	sub	sp, sp, #12
   1148c:	mov	r5, r0
   11490:	movw	r0, #32992	; 0x80e0
   11494:	mov	r4, r1
   11498:	mov	r1, #99	; 0x63
   1149c:	movt	r0, #2
   114a0:	mov	r2, r5
   114a4:	bl	10bb8 <fgets@plt>
   114a8:	cmp	r0, #0
   114ac:	beq	115a4 <__assert_fail@plt+0x884>
   114b0:	movw	r0, #32992	; 0x80e0
   114b4:	mov	r1, #99	; 0x63
   114b8:	mov	r2, r5
   114bc:	movt	r0, #2
   114c0:	bl	10bb8 <fgets@plt>
   114c4:	cmp	r0, #0
   114c8:	beq	115a4 <__assert_fail@plt+0x884>
   114cc:	movw	r6, #32992	; 0x80e0
   114d0:	mov	r1, #99	; 0x63
   114d4:	mov	r2, r5
   114d8:	movt	r6, #2
   114dc:	mov	r0, r6
   114e0:	bl	10bb8 <fgets@plt>
   114e4:	cmp	r0, #0
   114e8:	beq	115a4 <__assert_fail@plt+0x884>
   114ec:	add	r7, r6, #29
   114f0:	b	11524 <__assert_fail@plt+0x804>
   114f4:	ldr	r0, [r8, #12]
   114f8:	ldr	r1, [r8, #16]
   114fc:	mov	r2, r5
   11500:	add	r0, r0, r9
   11504:	add	r1, r1, sl
   11508:	str	r0, [r8, #12]
   1150c:	str	r1, [r8, #16]
   11510:	mov	r0, r6
   11514:	mov	r1, #99	; 0x63
   11518:	bl	10bb8 <fgets@plt>
   1151c:	cmp	r0, #0
   11520:	beq	115a4 <__assert_fail@plt+0x884>
   11524:	movw	r1, #15185	; 0x3b51
   11528:	mov	r0, r6
   1152c:	add	r2, sp, #8
   11530:	add	r3, sp, #4
   11534:	movt	r1, #1
   11538:	bl	10ca8 <__isoc99_sscanf@plt>
   1153c:	cmp	r0, #2
   11540:	bne	115a4 <__assert_fail@plt+0x884>
   11544:	mov	r0, r6
   11548:	bl	10c90 <strlen@plt>
   1154c:	ldr	r9, [sp, #8]
   11550:	ldr	sl, [sp, #4]
   11554:	add	r0, r0, r6
   11558:	mov	r1, #0
   1155c:	strb	r1, [r0, #-1]
   11560:	mov	r0, r4
   11564:	mov	r1, r7
   11568:	bl	11cc8 <__assert_fail@plt+0xfa8>
   1156c:	mov	r8, r0
   11570:	cmp	r0, #0
   11574:	bne	114f4 <__assert_fail@plt+0x7d4>
   11578:	mov	r0, #1
   1157c:	mov	r1, #20
   11580:	bl	127b0 <__assert_fail@plt+0x1a90>
   11584:	mov	r8, r0
   11588:	mov	r0, r7
   1158c:	bl	10bd0 <strdup@plt>
   11590:	str	r0, [r8, #8]
   11594:	mov	r0, r4
   11598:	mov	r1, r8
   1159c:	bl	11d58 <__assert_fail@plt+0x1038>
   115a0:	b	114f4 <__assert_fail@plt+0x7d4>
   115a4:	sub	sp, fp, #28
   115a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115ac:	nop	{0}
   115b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   115b4:	add	fp, sp, #24
   115b8:	sub	sp, sp, #8
   115bc:	mov	r2, r1
   115c0:	movw	r1, #15080	; 0x3ae8
   115c4:	mov	r5, r0
   115c8:	movt	r1, #1
   115cc:	mov	r0, r2
   115d0:	bl	12854 <__assert_fail@plt+0x1b34>
   115d4:	movw	r1, #15082	; 0x3aea
   115d8:	movw	r2, #15008	; 0x3aa0
   115dc:	movw	r3, #28799	; 0x707f
   115e0:	mov	r4, r0
   115e4:	movt	r1, #1
   115e8:	movt	r2, #1
   115ec:	movt	r3, #1
   115f0:	bl	10c9c <fprintf@plt>
   115f4:	ldr	r2, [r5]
   115f8:	movw	r1, #15087	; 0x3aef
   115fc:	mov	r0, r4
   11600:	movt	r1, #1
   11604:	bl	10c9c <fprintf@plt>
   11608:	ldr	r2, [r5, #4]
   1160c:	movw	r1, #15101	; 0x3afd
   11610:	mov	r0, r4
   11614:	movt	r1, #1
   11618:	bl	10c9c <fprintf@plt>
   1161c:	ldr	r0, [r5]
   11620:	cmp	r0, #0
   11624:	beq	11664 <__assert_fail@plt+0x944>
   11628:	ldr	r1, [r5, #4]
   1162c:	vldr	d16, [pc, #332]	; 11780 <__assert_fail@plt+0xa60>
   11630:	vmov	s2, r0
   11634:	sub	r1, r0, r1
   11638:	mov	r0, r4
   1163c:	vmov	s0, r1
   11640:	movw	r1, #15202	; 0x3b62
   11644:	movt	r1, #1
   11648:	vcvt.f64.s32	d17, s0
   1164c:	vcvt.f64.s32	d18, s2
   11650:	vmul.f64	d16, d17, d16
   11654:	vdiv.f64	d16, d16, d18
   11658:	vmov	r2, r3, d16
   1165c:	bl	10c9c <fprintf@plt>
   11660:	b	1167c <__assert_fail@plt+0x95c>
   11664:	movw	r0, #15193	; 0x3b59
   11668:	mov	r1, #8
   1166c:	mov	r2, #1
   11670:	mov	r3, r4
   11674:	movt	r0, #1
   11678:	bl	10c0c <fwrite@plt>
   1167c:	movw	r0, #15123	; 0x3b13
   11680:	mov	r1, #12
   11684:	mov	r2, #1
   11688:	mov	r3, r4
   1168c:	mov	r7, #1
   11690:	movt	r0, #1
   11694:	bl	10c0c <fwrite@plt>
   11698:	movw	r3, #15136	; 0x3b20
   1169c:	mov	r8, #0
   116a0:	add	r1, r5, #8
   116a4:	mov	r0, r4
   116a8:	mov	r2, #50	; 0x32
   116ac:	str	r7, [sp, #4]
   116b0:	movt	r3, #1
   116b4:	str	r8, [sp]
   116b8:	bl	11788 <__assert_fail@plt+0xa68>
   116bc:	movw	r3, #15155	; 0x3b33
   116c0:	add	r6, r5, #416	; 0x1a0
   116c4:	mov	r0, r4
   116c8:	mov	r2, #50	; 0x32
   116cc:	str	r8, [sp]
   116d0:	str	r7, [sp, #4]
   116d4:	movt	r3, #1
   116d8:	mov	r1, r6
   116dc:	bl	11788 <__assert_fail@plt+0xa68>
   116e0:	movw	r3, #15146	; 0x3b2a
   116e4:	add	r1, r5, #824	; 0x338
   116e8:	mov	r0, r4
   116ec:	mov	r2, #10
   116f0:	str	r7, [sp]
   116f4:	str	r7, [sp, #4]
   116f8:	movt	r3, #1
   116fc:	bl	11788 <__assert_fail@plt+0xa68>
   11700:	ldr	r0, [r5]
   11704:	cmp	r0, #1
   11708:	blt	11770 <__assert_fail@plt+0xa50>
   1170c:	movw	r3, #15169	; 0x3b41
   11710:	add	r1, r5, #920	; 0x398
   11714:	mov	r0, r4
   11718:	mov	r2, #8
   1171c:	str	r8, [sp]
   11720:	str	r8, [sp, #4]
   11724:	movt	r3, #1
   11728:	bl	11788 <__assert_fail@plt+0xa68>
   1172c:	ldr	r0, [r5, #8]
   11730:	cmp	r0, #1
   11734:	blt	1174c <__assert_fail@plt+0xa2c>
   11738:	movw	r2, #15136	; 0x3b20
   1173c:	add	r1, r5, #992	; 0x3e0
   11740:	mov	r0, r4
   11744:	movt	r2, #1
   11748:	bl	11af8 <__assert_fail@plt+0xdd8>
   1174c:	ldr	r0, [r6]
   11750:	cmp	r0, #1
   11754:	blt	11770 <__assert_fail@plt+0xa50>
   11758:	movw	r2, #15155	; 0x3b33
   1175c:	movw	r0, #9048	; 0x2358
   11760:	movt	r2, #1
   11764:	add	r1, r5, r0
   11768:	mov	r0, r4
   1176c:	bl	11af8 <__assert_fail@plt+0xdd8>
   11770:	mov	r0, r4
   11774:	sub	sp, fp, #24
   11778:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1177c:	b	128cc <__assert_fail@plt+0x1bac>
   11780:	andeq	r0, r0, r0
   11784:	subsmi	r0, r9, r0
   11788:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1178c:	add	fp, sp, #28
   11790:	sub	sp, sp, #4
   11794:	vpush	{d8}
   11798:	sub	sp, sp, #8
   1179c:	mov	r5, r1
   117a0:	movw	r1, #15208	; 0x3b68
   117a4:	mov	r8, r2
   117a8:	mov	r2, r3
   117ac:	mov	r4, r0
   117b0:	movt	r1, #1
   117b4:	bl	10c9c <fprintf@plt>
   117b8:	movw	r0, #15256	; 0x3b98
   117bc:	mov	r1, #26
   117c0:	mov	r2, #1
   117c4:	mov	r3, r4
   117c8:	mov	r7, #1
   117cc:	movt	r0, #1
   117d0:	bl	10c0c <fwrite@plt>
   117d4:	movw	r0, #15283	; 0x3bb3
   117d8:	mov	r1, #3
   117dc:	mov	r2, #1
   117e0:	mov	r3, r4
   117e4:	movt	r0, #1
   117e8:	bl	10c0c <fwrite@plt>
   117ec:	ldrb	r1, [fp, #8]
   117f0:	movw	r0, #15213	; 0x3b6d
   117f4:	movw	r2, #15220	; 0x3b74
   117f8:	movt	r0, #1
   117fc:	movt	r2, #1
   11800:	cmp	r1, #0
   11804:	str	r1, [sp]
   11808:	movw	r1, #15209	; 0x3b69
   1180c:	movt	r1, #1
   11810:	movne	r2, r0
   11814:	mov	r0, r4
   11818:	bl	10c9c <fprintf@plt>
   1181c:	ldr	r1, [fp, #12]
   11820:	lsl	r0, r8, #16
   11824:	sxth	r6, r8
   11828:	cmp	r0, #65536	; 0x10000
   1182c:	str	r1, [sp, #4]
   11830:	blt	1192c <__assert_fail@plt+0xc0c>
   11834:	vldr	d8, [pc, #692]	; 11af0 <__assert_fail@plt+0xdd0>
   11838:	movw	sl, #15227	; 0x3b7b
   1183c:	mov	r8, #1
   11840:	movt	sl, #1
   11844:	mov	r0, r5
   11848:	ldr	r2, [r0, r7, lsl #3]!
   1184c:	cmp	r2, #1
   11850:	bge	118b8 <__assert_fail@plt+0xb98>
   11854:	b	11898 <__assert_fail@plt+0xb78>
   11858:	movw	r0, #15256	; 0x3b98
   1185c:	mov	r1, #26
   11860:	movt	r0, #1
   11864:	mov	r2, #1
   11868:	mov	r3, r4
   1186c:	bl	10c0c <fwrite@plt>
   11870:	movw	r0, #15283	; 0x3bb3
   11874:	mov	r1, #3
   11878:	mov	r2, #1
   1187c:	mov	r3, r4
   11880:	movt	r0, #1
   11884:	bl	10c0c <fwrite@plt>
   11888:	mov	r0, r4
   1188c:	mov	r1, sl
   11890:	mov	r2, r7
   11894:	bl	10c9c <fprintf@plt>
   11898:	add	r8, r8, #1
   1189c:	sxth	r7, r8
   118a0:	cmp	r6, r7
   118a4:	blt	1192c <__assert_fail@plt+0xc0c>
   118a8:	mov	r0, r5
   118ac:	ldr	r2, [r0, r7, lsl #3]!
   118b0:	cmp	r2, #1
   118b4:	blt	11898 <__assert_fail@plt+0xb78>
   118b8:	cmp	r0, #0
   118bc:	beq	11858 <__assert_fail@plt+0xb38>
   118c0:	add	r9, r5, r7, lsl #3
   118c4:	movw	r1, #15245	; 0x3b8d
   118c8:	mov	r0, r4
   118cc:	movt	r1, #1
   118d0:	ldr	r3, [r9, #4]!
   118d4:	bl	10c9c <fprintf@plt>
   118d8:	ldr	r0, [r5, r7, lsl #3]
   118dc:	cmp	r0, #0
   118e0:	beq	1191c <__assert_fail@plt+0xbfc>
   118e4:	ldr	r1, [r9]
   118e8:	vmov	s2, r0
   118ec:	sub	r1, r0, r1
   118f0:	mov	r0, r4
   118f4:	vmov	s0, r1
   118f8:	movw	r1, #15202	; 0x3b62
   118fc:	movt	r1, #1
   11900:	vcvt.f64.s32	d16, s0
   11904:	vcvt.f64.s32	d17, s2
   11908:	vmul.f64	d16, d16, d8
   1190c:	vdiv.f64	d16, d16, d17
   11910:	vmov	r2, r3, d16
   11914:	bl	10c9c <fprintf@plt>
   11918:	b	11870 <__assert_fail@plt+0xb50>
   1191c:	movw	r0, #15193	; 0x3b59
   11920:	mov	r1, #8
   11924:	movt	r0, #1
   11928:	b	11864 <__assert_fail@plt+0xb44>
   1192c:	ldr	r0, [sp]
   11930:	cmp	r0, #0
   11934:	beq	11a08 <__assert_fail@plt+0xce8>
   11938:	add	r7, r6, #1
   1193c:	mov	r0, r5
   11940:	ldr	r2, [r0, r7, lsl #3]!
   11944:	cmp	r2, #1
   11948:	blt	11a08 <__assert_fail@plt+0xce8>
   1194c:	cmp	r0, #0
   11950:	beq	119b4 <__assert_fail@plt+0xc94>
   11954:	add	r8, r5, r7, lsl #3
   11958:	movw	r1, #15245	; 0x3b8d
   1195c:	mov	r0, r4
   11960:	movt	r1, #1
   11964:	ldr	r3, [r8, #4]!
   11968:	bl	10c9c <fprintf@plt>
   1196c:	ldr	r0, [r5, r7, lsl #3]
   11970:	cmp	r0, #0
   11974:	beq	119c4 <__assert_fail@plt+0xca4>
   11978:	ldr	r1, [r8]
   1197c:	vldr	d16, [pc, #364]	; 11af0 <__assert_fail@plt+0xdd0>
   11980:	vmov	s2, r0
   11984:	sub	r1, r0, r1
   11988:	mov	r0, r4
   1198c:	vmov	s0, r1
   11990:	movw	r1, #15202	; 0x3b62
   11994:	movt	r1, #1
   11998:	vcvt.f64.s32	d17, s0
   1199c:	vcvt.f64.s32	d18, s2
   119a0:	vmul.f64	d16, d17, d16
   119a4:	vdiv.f64	d16, d16, d18
   119a8:	vmov	r2, r3, d16
   119ac:	bl	10c9c <fprintf@plt>
   119b0:	b	119dc <__assert_fail@plt+0xcbc>
   119b4:	movw	r0, #15256	; 0x3b98
   119b8:	mov	r1, #26
   119bc:	movt	r0, #1
   119c0:	b	119d0 <__assert_fail@plt+0xcb0>
   119c4:	movw	r0, #15193	; 0x3b59
   119c8:	mov	r1, #8
   119cc:	movt	r0, #1
   119d0:	mov	r2, #1
   119d4:	mov	r3, r4
   119d8:	bl	10c0c <fwrite@plt>
   119dc:	movw	r0, #15283	; 0x3bb3
   119e0:	mov	r1, #3
   119e4:	mov	r2, #1
   119e8:	mov	r3, r4
   119ec:	movt	r0, #1
   119f0:	bl	10c0c <fwrite@plt>
   119f4:	movw	r1, #15236	; 0x3b84
   119f8:	mov	r0, r4
   119fc:	mov	r2, r6
   11a00:	movt	r1, #1
   11a04:	bl	10c9c <fprintf@plt>
   11a08:	ldr	r0, [sp, #4]
   11a0c:	tst	r0, #255	; 0xff
   11a10:	beq	11a78 <__assert_fail@plt+0xd58>
   11a14:	cmp	r5, #0
   11a18:	beq	11a88 <__assert_fail@plt+0xd68>
   11a1c:	movw	r1, #15245	; 0x3b8d
   11a20:	ldm	r5, {r2, r3}
   11a24:	mov	r0, r4
   11a28:	movt	r1, #1
   11a2c:	bl	10c9c <fprintf@plt>
   11a30:	ldr	r0, [r5]
   11a34:	cmp	r0, #0
   11a38:	beq	11a98 <__assert_fail@plt+0xd78>
   11a3c:	ldr	r1, [r5, #4]
   11a40:	vldr	d16, [pc, #168]	; 11af0 <__assert_fail@plt+0xdd0>
   11a44:	vmov	s2, r0
   11a48:	sub	r1, r0, r1
   11a4c:	mov	r0, r4
   11a50:	vmov	s0, r1
   11a54:	movw	r1, #15202	; 0x3b62
   11a58:	movt	r1, #1
   11a5c:	vcvt.f64.s32	d17, s0
   11a60:	vcvt.f64.s32	d18, s2
   11a64:	vmul.f64	d16, d17, d16
   11a68:	vdiv.f64	d16, d16, d18
   11a6c:	vmov	r2, r3, d16
   11a70:	bl	10c9c <fprintf@plt>
   11a74:	b	11ab0 <__assert_fail@plt+0xd90>
   11a78:	sub	sp, fp, #40	; 0x28
   11a7c:	vpop	{d8}
   11a80:	add	sp, sp, #4
   11a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a88:	movw	r0, #15256	; 0x3b98
   11a8c:	mov	r1, #26
   11a90:	movt	r0, #1
   11a94:	b	11aa4 <__assert_fail@plt+0xd84>
   11a98:	movw	r0, #15193	; 0x3b59
   11a9c:	mov	r1, #8
   11aa0:	movt	r0, #1
   11aa4:	mov	r2, #1
   11aa8:	mov	r3, r4
   11aac:	bl	10c0c <fwrite@plt>
   11ab0:	movw	r0, #15283	; 0x3bb3
   11ab4:	mov	r1, #3
   11ab8:	mov	r2, #1
   11abc:	mov	r3, r4
   11ac0:	movt	r0, #1
   11ac4:	bl	10c0c <fwrite@plt>
   11ac8:	movw	r0, #15177	; 0x3b49
   11acc:	mov	r1, #7
   11ad0:	mov	r2, #1
   11ad4:	mov	r3, r4
   11ad8:	movt	r0, #1
   11adc:	sub	sp, fp, #40	; 0x28
   11ae0:	vpop	{d8}
   11ae4:	add	sp, sp, #4
   11ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11aec:	b	10c0c <fwrite@plt>
   11af0:	andeq	r0, r0, r0
   11af4:	subsmi	r0, r9, r0
   11af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11afc:	add	fp, sp, #28
   11b00:	sub	sp, sp, #4
   11b04:	vpush	{d8}
   11b08:	mov	r5, r0
   11b0c:	mov	r0, r1
   11b10:	mov	r6, r2
   11b14:	mov	r4, r1
   11b18:	bl	11e68 <__assert_fail@plt+0x1148>
   11b1c:	movw	r0, #8048	; 0x1f70
   11b20:	movw	r2, #7296	; 0x1c80
   11b24:	ldr	r1, [r4, r0]!
   11b28:	movt	r2, #1
   11b2c:	ldr	r0, [r4, #4]
   11b30:	bl	138b0 <error@@Base+0xbc8>
   11b34:	movw	r1, #15208	; 0x3b68
   11b38:	mov	r0, r5
   11b3c:	mov	r2, r6
   11b40:	movt	r1, #1
   11b44:	bl	10c9c <fprintf@plt>
   11b48:	movw	r0, #15256	; 0x3b98
   11b4c:	mov	r1, #26
   11b50:	mov	r2, #1
   11b54:	mov	r3, r5
   11b58:	movt	r0, #1
   11b5c:	bl	10c0c <fwrite@plt>
   11b60:	movw	r0, #15283	; 0x3bb3
   11b64:	mov	r1, #3
   11b68:	mov	r2, #1
   11b6c:	mov	r3, r5
   11b70:	movt	r0, #1
   11b74:	bl	10c0c <fwrite@plt>
   11b78:	mov	r0, #10
   11b7c:	mov	r1, r5
   11b80:	bl	10ccc <fputc@plt>
   11b84:	ldr	r0, [r4, #4]
   11b88:	cmp	r0, #1
   11b8c:	blt	11c68 <__assert_fail@plt+0xf48>
   11b90:	vldr	d8, [pc, #224]	; 11c78 <__assert_fail@plt+0xf58>
   11b94:	movw	r9, #15245	; 0x3b8d
   11b98:	movw	r7, #15283	; 0x3bb3
   11b9c:	movw	r6, #15209	; 0x3b69
   11ba0:	mov	r8, #0
   11ba4:	movt	r9, #1
   11ba8:	movt	r7, #1
   11bac:	movt	r6, #1
   11bb0:	b	11c24 <__assert_fail@plt+0xf04>
   11bb4:	ldr	r1, [sl, #16]
   11bb8:	vmov	s2, r0
   11bbc:	sub	r1, r0, r1
   11bc0:	mov	r0, r5
   11bc4:	vmov	s0, r1
   11bc8:	movw	r1, #15202	; 0x3b62
   11bcc:	movt	r1, #1
   11bd0:	vcvt.f64.s32	d16, s0
   11bd4:	vcvt.f64.s32	d17, s2
   11bd8:	vmul.f64	d16, d16, d8
   11bdc:	vdiv.f64	d16, d16, d17
   11be0:	vmov	r2, r3, d16
   11be4:	bl	10c9c <fprintf@plt>
   11be8:	mov	r0, r7
   11bec:	mov	r1, #3
   11bf0:	mov	r2, #1
   11bf4:	mov	r3, r5
   11bf8:	bl	10c0c <fwrite@plt>
   11bfc:	ldr	r0, [r4]
   11c00:	mov	r1, r6
   11c04:	ldr	r0, [r0, r8, lsl #2]
   11c08:	ldr	r2, [r0, #8]
   11c0c:	mov	r0, r5
   11c10:	bl	10c9c <fprintf@plt>
   11c14:	ldr	r0, [r4, #4]
   11c18:	add	r8, r8, #1
   11c1c:	cmp	r8, r0
   11c20:	bge	11c68 <__assert_fail@plt+0xf48>
   11c24:	ldr	r0, [r4]
   11c28:	mov	r1, r9
   11c2c:	ldr	sl, [r0, r8, lsl #2]
   11c30:	mov	r0, r5
   11c34:	ldr	r2, [sl, #12]
   11c38:	ldr	r3, [sl, #16]
   11c3c:	bl	10c9c <fprintf@plt>
   11c40:	ldr	r0, [sl, #12]
   11c44:	cmp	r0, #0
   11c48:	bne	11bb4 <__assert_fail@plt+0xe94>
   11c4c:	movw	r0, #15193	; 0x3b59
   11c50:	mov	r1, #8
   11c54:	mov	r2, #1
   11c58:	mov	r3, r5
   11c5c:	movt	r0, #1
   11c60:	bl	10c0c <fwrite@plt>
   11c64:	b	11be8 <__assert_fail@plt+0xec8>
   11c68:	vpop	{d8}
   11c6c:	add	sp, sp, #4
   11c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c74:	nop	{0}
   11c78:	andeq	r0, r0, r0
   11c7c:	subsmi	r0, r9, r0
   11c80:	ldr	r1, [r1, #8]
   11c84:	ldr	r0, [r0, #8]
   11c88:	b	127d0 <__assert_fail@plt+0x1ab0>
   11c8c:	push	{r4, r5, r6, sl, fp, lr}
   11c90:	add	fp, sp, #16
   11c94:	mov	r4, r0
   11c98:	movw	r0, #8048	; 0x1f70
   11c9c:	movw	r6, #503	; 0x1f7
   11ca0:	add	r5, r4, r0
   11ca4:	mov	r0, r4
   11ca8:	bl	135ec <error@@Base+0x904>
   11cac:	subs	r6, r6, #1
   11cb0:	add	r4, r4, #16
   11cb4:	bne	11ca4 <__assert_fail@plt+0xf84>
   11cb8:	mov	r0, #0
   11cbc:	str	r0, [r5]
   11cc0:	str	r0, [r5, #4]
   11cc4:	pop	{r4, r5, r6, sl, fp, pc}
   11cc8:	push	{r4, r5, r6, sl, fp, lr}
   11ccc:	add	fp, sp, #16
   11cd0:	mov	r5, r1
   11cd4:	ldrb	r1, [r1]
   11cd8:	mov	r4, #0
   11cdc:	mov	r2, #0
   11ce0:	cmp	r1, #0
   11ce4:	beq	11d18 <__assert_fail@plt+0xff8>
   11ce8:	add	r3, r5, #1
   11cec:	mov	r2, #0
   11cf0:	uxtab	r2, r2, r1
   11cf4:	ldrb	r1, [r3], #1
   11cf8:	cmp	r1, #0
   11cfc:	bne	11cf0 <__assert_fail@plt+0xfd0>
   11d00:	movw	r1, #20065	; 0x4e61
   11d04:	movt	r1, #33354	; 0x824a
   11d08:	umull	r1, r3, r2, r1
   11d0c:	lsr	r1, r3, #8
   11d10:	movw	r3, #503	; 0x1f7
   11d14:	mls	r2, r1, r3, r2
   11d18:	ldr	r6, [r0, r2, lsl #4]
   11d1c:	cmp	r6, #0
   11d20:	beq	11d44 <__assert_fail@plt+0x1024>
   11d24:	ldr	r1, [r6, #8]
   11d28:	mov	r0, r5
   11d2c:	bl	10b70 <strcmp@plt>
   11d30:	cmp	r0, #0
   11d34:	beq	11d4c <__assert_fail@plt+0x102c>
   11d38:	ldr	r6, [r6, #4]
   11d3c:	cmp	r6, #0
   11d40:	bne	11d24 <__assert_fail@plt+0x1004>
   11d44:	mov	r0, r4
   11d48:	pop	{r4, r5, r6, sl, fp, pc}
   11d4c:	mov	r4, r6
   11d50:	mov	r0, r4
   11d54:	pop	{r4, r5, r6, sl, fp, pc}
   11d58:	push	{r4, r5, fp, lr}
   11d5c:	add	fp, sp, #8
   11d60:	movw	r2, #8048	; 0x1f70
   11d64:	add	r5, r0, r2
   11d68:	ldr	r2, [r1, #8]
   11d6c:	ldrb	r3, [r2]
   11d70:	cmp	r3, #0
   11d74:	beq	11dac <__assert_fail@plt+0x108c>
   11d78:	add	r4, r2, #1
   11d7c:	mov	r2, #0
   11d80:	uxtab	r2, r2, r3
   11d84:	ldrb	r3, [r4], #1
   11d88:	cmp	r3, #0
   11d8c:	bne	11d80 <__assert_fail@plt+0x1060>
   11d90:	movw	r3, #20065	; 0x4e61
   11d94:	movt	r3, #33354	; 0x824a
   11d98:	umull	r3, r4, r2, r3
   11d9c:	lsr	r3, r4, #8
   11da0:	movw	r4, #503	; 0x1f7
   11da4:	mls	r2, r3, r4, r2
   11da8:	b	11db0 <__assert_fail@plt+0x1090>
   11dac:	mov	r2, #0
   11db0:	add	r0, r0, r2, lsl #4
   11db4:	bl	135f8 <error@@Base+0x910>
   11db8:	ldr	r0, [r5]
   11dbc:	cmp	r0, #0
   11dc0:	beq	11dd0 <__assert_fail@plt+0x10b0>
   11dc4:	bl	10ba0 <free@plt>
   11dc8:	mov	r0, #0
   11dcc:	str	r0, [r5]
   11dd0:	ldr	r0, [r5, #4]
   11dd4:	add	r0, r0, #1
   11dd8:	str	r0, [r5, #4]
   11ddc:	pop	{r4, r5, fp, pc}
   11de0:	push	{r4, r5, fp, lr}
   11de4:	add	fp, sp, #8
   11de8:	movw	r2, #8048	; 0x1f70
   11dec:	add	r5, r0, r2
   11df0:	ldr	r2, [r1, #8]
   11df4:	ldrb	r3, [r2]
   11df8:	cmp	r3, #0
   11dfc:	beq	11e34 <__assert_fail@plt+0x1114>
   11e00:	add	r4, r2, #1
   11e04:	mov	r2, #0
   11e08:	uxtab	r2, r2, r3
   11e0c:	ldrb	r3, [r4], #1
   11e10:	cmp	r3, #0
   11e14:	bne	11e08 <__assert_fail@plt+0x10e8>
   11e18:	movw	r3, #20065	; 0x4e61
   11e1c:	movt	r3, #33354	; 0x824a
   11e20:	umull	r3, r4, r2, r3
   11e24:	lsr	r3, r4, #8
   11e28:	movw	r4, #503	; 0x1f7
   11e2c:	mls	r2, r3, r4, r2
   11e30:	b	11e38 <__assert_fail@plt+0x1118>
   11e34:	mov	r2, #0
   11e38:	add	r0, r0, r2, lsl #4
   11e3c:	bl	13740 <error@@Base+0xa58>
   11e40:	ldr	r0, [r5]
   11e44:	cmp	r0, #0
   11e48:	beq	11e58 <__assert_fail@plt+0x1138>
   11e4c:	bl	10ba0 <free@plt>
   11e50:	mov	r0, #0
   11e54:	str	r0, [r5]
   11e58:	ldr	r0, [r5, #4]
   11e5c:	sub	r0, r0, #1
   11e60:	str	r0, [r5, #4]
   11e64:	pop	{r4, r5, fp, pc}
   11e68:	push	{r4, r5, fp, lr}
   11e6c:	add	fp, sp, #8
   11e70:	mov	r4, r0
   11e74:	movw	r0, #8048	; 0x1f70
   11e78:	mov	r5, r4
   11e7c:	ldr	r0, [r5, r0]!
   11e80:	cmp	r0, #0
   11e84:	bne	11eec <__assert_fail@plt+0x11cc>
   11e88:	ldr	r0, [r5, #4]
   11e8c:	cmp	r0, #0
   11e90:	popeq	{r4, r5, fp, pc}
   11e94:	mov	r1, #4
   11e98:	bl	127b0 <__assert_fail@plt+0x1a90>
   11e9c:	str	r0, [r5]
   11ea0:	mov	r0, #0
   11ea4:	movw	ip, #503	; 0x1f7
   11ea8:	mov	r2, #0
   11eac:	ldr	r3, [r4, r2, lsl #4]
   11eb0:	cmp	r3, #0
   11eb4:	bne	11ed0 <__assert_fail@plt+0x11b0>
   11eb8:	add	r2, r2, #1
   11ebc:	cmp	r2, ip
   11ec0:	beq	11eec <__assert_fail@plt+0x11cc>
   11ec4:	ldr	r3, [r4, r2, lsl #4]
   11ec8:	cmp	r3, #0
   11ecc:	beq	11eb8 <__assert_fail@plt+0x1198>
   11ed0:	ldr	r1, [r5]
   11ed4:	str	r3, [r1, r0, lsl #2]
   11ed8:	add	r0, r0, #1
   11edc:	ldr	r3, [r3, #4]
   11ee0:	cmp	r3, #0
   11ee4:	bne	11ed0 <__assert_fail@plt+0x11b0>
   11ee8:	b	11eb8 <__assert_fail@plt+0x1198>
   11eec:	pop	{r4, r5, fp, pc}
   11ef0:	push	{r4, r5, r6, r7, fp, lr}
   11ef4:	add	fp, sp, #16
   11ef8:	mov	r5, r0
   11efc:	movw	r0, #8048	; 0x1f70
   11f00:	mov	r4, r1
   11f04:	movw	r7, #503	; 0x1f7
   11f08:	add	r6, r5, r0
   11f0c:	mov	r0, r5
   11f10:	mov	r1, r4
   11f14:	bl	13814 <error@@Base+0xb2c>
   11f18:	subs	r7, r7, #1
   11f1c:	add	r5, r5, #16
   11f20:	bne	11f0c <__assert_fail@plt+0x11ec>
   11f24:	ldr	r0, [r6]
   11f28:	cmp	r0, #0
   11f2c:	beq	11f3c <__assert_fail@plt+0x121c>
   11f30:	bl	10ba0 <free@plt>
   11f34:	mov	r0, #0
   11f38:	str	r0, [r6]
   11f3c:	mov	r0, #0
   11f40:	str	r0, [r6, #4]
   11f44:	pop	{r4, r5, r6, r7, fp, pc}
   11f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f4c:	add	fp, sp, #28
   11f50:	sub	sp, sp, #28
   11f54:	ldr	r8, [r1]
   11f58:	str	r0, [sp, #4]
   11f5c:	cmp	r8, #0
   11f60:	str	r8, [sp, #16]
   11f64:	beq	12728 <__assert_fail@plt+0x1a08>
   11f68:	movw	sl, #15288	; 0x3bb8
   11f6c:	add	r9, sp, #12
   11f70:	movt	sl, #1
   11f74:	mov	r0, #17
   11f78:	mov	r1, r8
   11f7c:	mov	r7, r9
   11f80:	mov	ip, r0
   11f84:	mov	lr, #18
   11f88:	cmp	r7, #0
   11f8c:	beq	120f8 <__assert_fail@plt+0x13d8>
   11f90:	mov	r7, r1
   11f94:	ldr	r0, [r7, #12]
   11f98:	mov	r2, #0
   11f9c:	movw	r1, #1092	; 0x444
   11fa0:	sub	r3, r1, r2
   11fa4:	add	r3, r2, r3, lsr #1
   11fa8:	add	r4, r3, r3, lsl #1
   11fac:	ldr	r5, [sl, r4, lsl #2]
   11fb0:	cmp	r5, r0
   11fb4:	bls	11fc8 <__assert_fail@plt+0x12a8>
   11fb8:	sub	r1, r3, #1
   11fbc:	cmp	r1, r2
   11fc0:	bcs	11fa0 <__assert_fail@plt+0x1280>
   11fc4:	b	12014 <__assert_fail@plt+0x12f4>
   11fc8:	add	r2, sl, r4, lsl #2
   11fcc:	ldr	r4, [r2, #4]
   11fd0:	cmp	r4, r0
   11fd4:	bcs	11fe8 <__assert_fail@plt+0x12c8>
   11fd8:	add	r2, r3, #1
   11fdc:	cmp	r1, r2
   11fe0:	bcs	11fa0 <__assert_fail@plt+0x1280>
   11fe4:	b	12014 <__assert_fail@plt+0x12f4>
   11fe8:	ldr	r1, [r2, #8]
   11fec:	orr	r1, r1, #2
   11ff0:	cmp	r1, #6
   11ff4:	bne	12014 <__assert_fail@plt+0x12f4>
   11ff8:	ldr	r7, [r7, #4]
   11ffc:	cmp	r7, #0
   12000:	bne	11f94 <__assert_fail@plt+0x1274>
   12004:	mov	r2, #18
   12008:	mov	r9, #18
   1200c:	mov	r7, #0
   12010:	b	12104 <__assert_fail@plt+0x13e4>
   12014:	cmp	r7, #0
   12018:	beq	120f8 <__assert_fail@plt+0x13d8>
   1201c:	mov	r2, #0
   12020:	movw	r1, #1092	; 0x444
   12024:	sub	r3, r1, r2
   12028:	add	r3, r2, r3, lsr #1
   1202c:	add	r4, r3, r3, lsl #1
   12030:	ldr	r5, [sl, r4, lsl #2]
   12034:	cmp	r5, r0
   12038:	bls	1204c <__assert_fail@plt+0x132c>
   1203c:	sub	r1, r3, #1
   12040:	cmp	r1, r2
   12044:	bcs	12024 <__assert_fail@plt+0x1304>
   12048:	b	12068 <__assert_fail@plt+0x1348>
   1204c:	add	r2, sl, r4, lsl #2
   12050:	ldr	r4, [r2, #4]
   12054:	cmp	r4, r0
   12058:	bcs	1245c <__assert_fail@plt+0x173c>
   1205c:	add	r2, r3, #1
   12060:	cmp	r1, r2
   12064:	bcs	12024 <__assert_fail@plt+0x1304>
   12068:	mov	r9, #0
   1206c:	ldr	r6, [r7, #4]
   12070:	cmp	r6, #0
   12074:	beq	1246c <__assert_fail@plt+0x174c>
   12078:	mov	r2, r6
   1207c:	str	r7, [sp, #8]
   12080:	ldr	r0, [r2, #12]
   12084:	mov	r4, #0
   12088:	movw	r3, #1092	; 0x444
   1208c:	sub	r7, r3, r4
   12090:	add	r7, r4, r7, lsr #1
   12094:	add	r5, r7, r7, lsl #1
   12098:	ldr	r1, [sl, r5, lsl #2]
   1209c:	cmp	r1, r0
   120a0:	bls	120b4 <__assert_fail@plt+0x1394>
   120a4:	sub	r3, r7, #1
   120a8:	cmp	r3, r4
   120ac:	bcs	1208c <__assert_fail@plt+0x136c>
   120b0:	b	1216c <__assert_fail@plt+0x144c>
   120b4:	add	r5, sl, r5, lsl #2
   120b8:	ldr	r1, [r5, #4]
   120bc:	cmp	r1, r0
   120c0:	bcs	120d4 <__assert_fail@plt+0x13b4>
   120c4:	add	r4, r7, #1
   120c8:	cmp	r3, r4
   120cc:	bcs	1208c <__assert_fail@plt+0x136c>
   120d0:	b	1216c <__assert_fail@plt+0x144c>
   120d4:	ldr	r1, [r5, #8]
   120d8:	orr	r1, r1, #2
   120dc:	cmp	r1, #6
   120e0:	bne	1216c <__assert_fail@plt+0x144c>
   120e4:	ldr	r2, [r2, #4]
   120e8:	cmp	r2, #0
   120ec:	bne	12080 <__assert_fail@plt+0x1360>
   120f0:	mov	r2, #18
   120f4:	b	122bc <__assert_fail@plt+0x159c>
   120f8:	mov	r7, #0
   120fc:	mov	r2, #18
   12100:	mov	r9, #18
   12104:	sub	r0, r2, #1
   12108:	cmp	r0, #3
   1210c:	subcs	r0, r9, #1
   12110:	cmpcs	r0, #3
   12114:	bcc	12578 <__assert_fail@plt+0x1858>
   12118:	orr	r4, r2, #1
   1211c:	orr	r6, r9, #1
   12120:	cmp	r4, #9
   12124:	cmpeq	r6, #9
   12128:	beq	1229c <__assert_fail@plt+0x157c>
   1212c:	cmp	r6, #9
   12130:	bne	121c8 <__assert_fail@plt+0x14a8>
   12134:	cmp	r2, #13
   12138:	bhi	121c8 <__assert_fail@plt+0x14a8>
   1213c:	mov	r0, #1
   12140:	mov	r1, #13312	; 0x3400
   12144:	tst	r1, r0, lsl r2
   12148:	beq	121c8 <__assert_fail@plt+0x14a8>
   1214c:	orr	r0, lr, #1
   12150:	cmp	r0, #9
   12154:	bne	121c8 <__assert_fail@plt+0x14a8>
   12158:	mov	r0, r9
   1215c:	ldr	r1, [r7, #4]
   12160:	cmp	r1, #0
   12164:	bne	11f80 <__assert_fail@plt+0x1260>
   12168:	b	12578 <__assert_fail@plt+0x1858>
   1216c:	cmp	r2, #0
   12170:	beq	122b8 <__assert_fail@plt+0x1598>
   12174:	mov	r3, #0
   12178:	movw	r2, #1092	; 0x444
   1217c:	sub	r1, r2, r3
   12180:	add	r7, r3, r1, lsr #1
   12184:	add	r5, r7, r7, lsl #1
   12188:	ldr	r1, [sl, r5, lsl #2]
   1218c:	cmp	r1, r0
   12190:	bls	121a4 <__assert_fail@plt+0x1484>
   12194:	sub	r2, r7, #1
   12198:	cmp	r2, r3
   1219c:	bcs	1217c <__assert_fail@plt+0x145c>
   121a0:	b	122b0 <__assert_fail@plt+0x1590>
   121a4:	add	r3, sl, r5, lsl #2
   121a8:	ldr	r1, [r3, #4]
   121ac:	cmp	r1, r0
   121b0:	bcs	12488 <__assert_fail@plt+0x1768>
   121b4:	add	r3, r7, #1
   121b8:	cmp	r2, r3
   121bc:	bcs	1217c <__assert_fail@plt+0x145c>
   121c0:	mov	r2, #0
   121c4:	b	122bc <__assert_fail@plt+0x159c>
   121c8:	orr	r0, ip, #1
   121cc:	cmp	r0, #9
   121d0:	bne	12208 <__assert_fail@plt+0x14e8>
   121d4:	cmp	r9, #13
   121d8:	bhi	12208 <__assert_fail@plt+0x14e8>
   121dc:	mov	r0, #1
   121e0:	mov	r1, #13312	; 0x3400
   121e4:	tst	r1, r0, lsl r9
   121e8:	beq	12208 <__assert_fail@plt+0x14e8>
   121ec:	cmp	r4, #9
   121f0:	bne	12208 <__assert_fail@plt+0x14e8>
   121f4:	mov	r0, r9
   121f8:	ldr	r1, [r7, #4]
   121fc:	cmp	r1, #0
   12200:	bne	11f80 <__assert_fail@plt+0x1260>
   12204:	b	12578 <__assert_fail@plt+0x1858>
   12208:	cmp	r2, #10
   1220c:	mov	r0, #8
   12210:	cmpeq	r9, #8
   12214:	beq	12430 <__assert_fail@plt+0x1710>
   12218:	cmp	lr, #8
   1221c:	cmpeq	r2, #11
   12220:	beq	12440 <__assert_fail@plt+0x1720>
   12224:	cmp	r2, #8
   12228:	cmpeq	ip, #8
   1222c:	beq	1244c <__assert_fail@plt+0x172c>
   12230:	cmp	r2, #15
   12234:	mov	r0, #15
   12238:	cmpeq	r9, #15
   1223c:	beq	12430 <__assert_fail@plt+0x1710>
   12240:	cmp	r2, #15
   12244:	cmpeq	r6, #9
   12248:	beq	12474 <__assert_fail@plt+0x1754>
   1224c:	cmp	r9, #15
   12250:	cmpeq	r4, #9
   12254:	beq	12430 <__assert_fail@plt+0x1710>
   12258:	cmp	ip, #15
   1225c:	cmpeq	r2, #15
   12260:	beq	124f0 <__assert_fail@plt+0x17d0>
   12264:	cmp	r9, #15
   12268:	bne	12490 <__assert_fail@plt+0x1770>
   1226c:	cmp	lr, #15
   12270:	bne	124a0 <__assert_fail@plt+0x1780>
   12274:	orr	r3, r2, #2
   12278:	sub	r1, r2, #10
   1227c:	sub	r3, r3, #14
   12280:	clz	r1, r1
   12284:	clz	r3, r3
   12288:	lsr	r1, r1, #5
   1228c:	lsr	r3, r3, #5
   12290:	orrs	r1, r1, r3
   12294:	bne	12430 <__assert_fail@plt+0x1710>
   12298:	b	124a0 <__assert_fail@plt+0x1780>
   1229c:	mov	r0, r9
   122a0:	ldr	r1, [r7, #4]
   122a4:	cmp	r1, #0
   122a8:	bne	11f80 <__assert_fail@plt+0x1260>
   122ac:	b	12578 <__assert_fail@plt+0x1858>
   122b0:	mov	r2, #0
   122b4:	b	122bc <__assert_fail@plt+0x159c>
   122b8:	mov	r2, #18
   122bc:	ldr	r0, [r6, #12]
   122c0:	mov	r4, #0
   122c4:	movw	r3, #1092	; 0x444
   122c8:	sub	r1, r3, r4
   122cc:	add	r7, r4, r1, lsr #1
   122d0:	add	r5, r7, r7, lsl #1
   122d4:	ldr	r1, [sl, r5, lsl #2]
   122d8:	cmp	r1, r0
   122dc:	bls	122f0 <__assert_fail@plt+0x15d0>
   122e0:	sub	r3, r7, #1
   122e4:	cmp	r3, r4
   122e8:	bcs	122c8 <__assert_fail@plt+0x15a8>
   122ec:	b	1233c <__assert_fail@plt+0x161c>
   122f0:	add	r5, sl, r5, lsl #2
   122f4:	ldr	r1, [r5, #4]
   122f8:	cmp	r1, r0
   122fc:	bcs	12310 <__assert_fail@plt+0x15f0>
   12300:	add	r4, r7, #1
   12304:	cmp	r3, r4
   12308:	bcs	122c8 <__assert_fail@plt+0x15a8>
   1230c:	b	1233c <__assert_fail@plt+0x161c>
   12310:	ldr	r0, [r5, #8]
   12314:	orr	r0, r0, #2
   12318:	cmp	r0, #6
   1231c:	bne	1233c <__assert_fail@plt+0x161c>
   12320:	ldr	r6, [r6, #4]
   12324:	cmp	r6, #0
   12328:	bne	122bc <__assert_fail@plt+0x159c>
   1232c:	mov	lr, #18
   12330:	cmp	r9, #1
   12334:	beq	12420 <__assert_fail@plt+0x1700>
   12338:	b	12534 <__assert_fail@plt+0x1814>
   1233c:	mov	lr, #18
   12340:	cmp	r6, #0
   12344:	beq	12418 <__assert_fail@plt+0x16f8>
   12348:	ldr	r6, [r6, #4]
   1234c:	cmp	r6, #0
   12350:	beq	12418 <__assert_fail@plt+0x16f8>
   12354:	ldr	r0, [r6, #12]
   12358:	mov	r3, #0
   1235c:	movw	r4, #1092	; 0x444
   12360:	sub	r1, r4, r3
   12364:	add	r7, r3, r1, lsr #1
   12368:	add	r5, r7, r7, lsl #1
   1236c:	ldr	r1, [sl, r5, lsl #2]
   12370:	cmp	r1, r0
   12374:	bls	12388 <__assert_fail@plt+0x1668>
   12378:	sub	r4, r7, #1
   1237c:	cmp	r4, r3
   12380:	bcs	12360 <__assert_fail@plt+0x1640>
   12384:	b	123b8 <__assert_fail@plt+0x1698>
   12388:	add	r3, sl, r5, lsl #2
   1238c:	ldr	r1, [r3, #4]
   12390:	cmp	r1, r0
   12394:	bcs	123a8 <__assert_fail@plt+0x1688>
   12398:	add	r3, r7, #1
   1239c:	cmp	r4, r3
   123a0:	bcs	12360 <__assert_fail@plt+0x1640>
   123a4:	b	123b8 <__assert_fail@plt+0x1698>
   123a8:	ldr	r1, [r3, #8]
   123ac:	orr	r1, r1, #2
   123b0:	cmp	r1, #6
   123b4:	beq	12348 <__assert_fail@plt+0x1628>
   123b8:	cmp	r6, #0
   123bc:	beq	12418 <__assert_fail@plt+0x16f8>
   123c0:	mov	r4, #0
   123c4:	movw	r6, #1092	; 0x444
   123c8:	sub	r1, r6, r4
   123cc:	add	r3, r4, r1, lsr #1
   123d0:	add	r7, r3, r3, lsl #1
   123d4:	ldr	r1, [sl, r7, lsl #2]
   123d8:	cmp	r1, r0
   123dc:	bls	123f0 <__assert_fail@plt+0x16d0>
   123e0:	sub	r6, r3, #1
   123e4:	cmp	r6, r4
   123e8:	bcs	123c8 <__assert_fail@plt+0x16a8>
   123ec:	b	12414 <__assert_fail@plt+0x16f4>
   123f0:	add	r7, sl, r7, lsl #2
   123f4:	ldr	r1, [r7, #4]
   123f8:	cmp	r1, r0
   123fc:	bcs	12528 <__assert_fail@plt+0x1808>
   12400:	add	r4, r3, #1
   12404:	mov	lr, #0
   12408:	cmp	r6, r4
   1240c:	bcs	123c8 <__assert_fail@plt+0x16a8>
   12410:	b	12418 <__assert_fail@plt+0x16f8>
   12414:	mov	lr, #0
   12418:	cmp	r9, #1
   1241c:	bne	12534 <__assert_fail@plt+0x1814>
   12420:	ldr	r7, [sp, #8]
   12424:	mov	r0, #1
   12428:	cmp	r2, #2
   1242c:	bne	12104 <__assert_fail@plt+0x13e4>
   12430:	ldr	r1, [r7, #4]
   12434:	cmp	r1, #0
   12438:	bne	11f80 <__assert_fail@plt+0x1260>
   1243c:	b	12578 <__assert_fail@plt+0x1858>
   12440:	cmp	r9, #8
   12444:	beq	12430 <__assert_fail@plt+0x1710>
   12448:	b	12224 <__assert_fail@plt+0x1504>
   1244c:	mov	r0, #11
   12450:	cmp	r9, #11
   12454:	beq	12430 <__assert_fail@plt+0x1710>
   12458:	b	12230 <__assert_fail@plt+0x1510>
   1245c:	ldr	r9, [r2, #8]
   12460:	ldr	r6, [r7, #4]
   12464:	cmp	r6, #0
   12468:	bne	12078 <__assert_fail@plt+0x1358>
   1246c:	mov	r2, #18
   12470:	b	12104 <__assert_fail@plt+0x13e4>
   12474:	mov	r0, r9
   12478:	ldr	r1, [r7, #4]
   1247c:	cmp	r1, #0
   12480:	bne	11f80 <__assert_fail@plt+0x1260>
   12484:	b	12578 <__assert_fail@plt+0x1858>
   12488:	ldr	r2, [r3, #8]
   1248c:	b	122bc <__assert_fail@plt+0x159c>
   12490:	cmp	r2, #7
   12494:	moveq	r0, #7
   12498:	cmpeq	r9, #7
   1249c:	beq	12430 <__assert_fail@plt+0x1710>
   124a0:	cmp	r2, #16
   124a4:	bne	1253c <__assert_fail@plt+0x181c>
   124a8:	orr	r1, r9, #8
   124ac:	sub	r0, r6, #9
   124b0:	sub	r1, r1, #15
   124b4:	clz	r0, r0
   124b8:	clz	r1, r1
   124bc:	lsr	r0, r0, #5
   124c0:	lsr	r1, r1, #5
   124c4:	orr	r0, r1, r0
   124c8:	sub	r1, r9, #16
   124cc:	clz	r1, r1
   124d0:	lsr	r1, r1, #5
   124d4:	orrs	r0, r1, r0
   124d8:	beq	1253c <__assert_fail@plt+0x181c>
   124dc:	mov	r0, r9
   124e0:	ldr	r1, [r7, #4]
   124e4:	cmp	r1, #0
   124e8:	bne	11f80 <__assert_fail@plt+0x1260>
   124ec:	b	12578 <__assert_fail@plt+0x1858>
   124f0:	orr	r3, r9, #2
   124f4:	sub	r1, r9, #10
   124f8:	sub	r3, r3, #14
   124fc:	clz	r1, r1
   12500:	clz	r3, r3
   12504:	lsr	r1, r1, #5
   12508:	lsr	r3, r3, #5
   1250c:	orrs	r1, r1, r3
   12510:	beq	12264 <__assert_fail@plt+0x1544>
   12514:	mov	r0, r9
   12518:	ldr	r1, [r7, #4]
   1251c:	cmp	r1, #0
   12520:	bne	11f80 <__assert_fail@plt+0x1260>
   12524:	b	12578 <__assert_fail@plt+0x1858>
   12528:	ldr	lr, [r7, #8]
   1252c:	cmp	r9, #1
   12530:	beq	12420 <__assert_fail@plt+0x1700>
   12534:	ldr	r7, [sp, #8]
   12538:	b	12104 <__assert_fail@plt+0x13e4>
   1253c:	cmp	r9, #16
   12540:	bne	12568 <__assert_fail@plt+0x1848>
   12544:	cmp	r2, #16
   12548:	bhi	12578 <__assert_fail@plt+0x1858>
   1254c:	movw	r3, #33664	; 0x8380
   12550:	mov	r1, #1
   12554:	mov	r0, #16
   12558:	movt	r3, #1
   1255c:	tst	r3, r1, lsl r2
   12560:	bne	12430 <__assert_fail@plt+0x1710>
   12564:	b	12578 <__assert_fail@plt+0x1858>
   12568:	cmp	r2, #5
   1256c:	moveq	r0, #5
   12570:	cmpeq	r9, #5
   12574:	beq	12430 <__assert_fail@plt+0x1710>
   12578:	cmp	r7, #0
   1257c:	add	r9, sp, #12
   12580:	beq	12728 <__assert_fail@plt+0x1a08>
   12584:	ldr	r1, [r7, #4]
   12588:	cmp	r1, #0
   1258c:	beq	1261c <__assert_fail@plt+0x18fc>
   12590:	mov	r0, r1
   12594:	ldr	r1, [r1, #12]
   12598:	mov	r4, r7
   1259c:	mov	r3, #0
   125a0:	movw	r2, #1092	; 0x444
   125a4:	sub	r7, r2, r3
   125a8:	add	r7, r3, r7, lsr #1
   125ac:	add	r6, r7, r7, lsl #1
   125b0:	ldr	r5, [sl, r6, lsl #2]
   125b4:	cmp	r5, r1
   125b8:	bls	125cc <__assert_fail@plt+0x18ac>
   125bc:	sub	r2, r7, #1
   125c0:	cmp	r2, r3
   125c4:	bcs	125a4 <__assert_fail@plt+0x1884>
   125c8:	b	12610 <__assert_fail@plt+0x18f0>
   125cc:	add	r3, sl, r6, lsl #2
   125d0:	ldr	r6, [r3, #4]
   125d4:	cmp	r6, r1
   125d8:	bcs	125ec <__assert_fail@plt+0x18cc>
   125dc:	add	r3, r7, #1
   125e0:	cmp	r2, r3
   125e4:	bcs	125a4 <__assert_fail@plt+0x1884>
   125e8:	b	12610 <__assert_fail@plt+0x18f0>
   125ec:	ldr	r1, [r3, #8]
   125f0:	orr	r1, r1, #2
   125f4:	cmp	r1, #6
   125f8:	bne	12610 <__assert_fail@plt+0x18f0>
   125fc:	ldr	r1, [r0, #4]
   12600:	mov	r7, r0
   12604:	cmp	r1, #0
   12608:	bne	12590 <__assert_fail@plt+0x1870>
   1260c:	b	12620 <__assert_fail@plt+0x1900>
   12610:	cmp	r4, #0
   12614:	bne	12624 <__assert_fail@plt+0x1904>
   12618:	b	12728 <__assert_fail@plt+0x1a08>
   1261c:	mov	r0, r7
   12620:	mov	r4, r0
   12624:	ldr	r0, [r8, #12]
   12628:	bl	10bac <utf8proc_get_property@plt>
   1262c:	ldrsh	r0, [r0]
   12630:	sub	r1, r0, #1
   12634:	cmp	r1, #12
   12638:	bcs	1271c <__assert_fail@plt+0x19fc>
   1263c:	mov	r5, r4
   12640:	ldr	r4, [r4, #4]
   12644:	cmp	r8, r4
   12648:	beq	126b8 <__assert_fail@plt+0x1998>
   1264c:	mov	r6, #0
   12650:	mov	r7, r8
   12654:	cmp	r7, #0
   12658:	beq	12730 <__assert_fail@plt+0x1a10>
   1265c:	ldr	r0, [r7, #12]
   12660:	mov	r1, r9
   12664:	bl	10bc4 <utf8proc_encode_char@plt>
   12668:	cmp	r0, #0
   1266c:	beq	12750 <__assert_fail@plt+0x1a30>
   12670:	ldr	r7, [r7, #4]
   12674:	add	r6, r0, r6
   12678:	cmp	r7, r4
   1267c:	bne	12654 <__assert_fail@plt+0x1934>
   12680:	add	r0, r6, #1
   12684:	bl	10c30 <malloc@plt>
   12688:	mov	r6, r0
   1268c:	mov	r9, #0
   12690:	cmp	r8, #0
   12694:	beq	12770 <__assert_fail@plt+0x1a50>
   12698:	ldr	r0, [r8, #12]
   1269c:	add	r1, r6, r9
   126a0:	bl	10bc4 <utf8proc_encode_char@plt>
   126a4:	ldr	r8, [r8, #4]
   126a8:	add	r9, r0, r9
   126ac:	cmp	r8, r4
   126b0:	bne	12690 <__assert_fail@plt+0x1970>
   126b4:	b	126c8 <__assert_fail@plt+0x19a8>
   126b8:	mov	r0, #1
   126bc:	bl	10c30 <malloc@plt>
   126c0:	mov	r6, r0
   126c4:	mov	r9, #0
   126c8:	mov	r0, #0
   126cc:	mov	r1, #12
   126d0:	strb	r0, [r6, r9]
   126d4:	mov	r0, #1
   126d8:	bl	127b0 <__assert_fail@plt+0x1a90>
   126dc:	mov	r7, r0
   126e0:	mov	r0, r6
   126e4:	bl	10cc0 <utf8proc_NFC@plt>
   126e8:	str	r0, [r7, #8]
   126ec:	ldr	r0, [sp, #4]
   126f0:	mov	r1, r7
   126f4:	bl	13648 <error@@Base+0x960>
   126f8:	mov	r0, r6
   126fc:	bl	10ba0 <free@plt>
   12700:	add	r9, sp, #12
   12704:	mov	r4, r5
   12708:	ldr	r8, [r4, #4]
   1270c:	cmp	r8, #0
   12710:	str	r8, [sp, #16]
   12714:	bne	11f74 <__assert_fail@plt+0x1254>
   12718:	b	12728 <__assert_fail@plt+0x1a08>
   1271c:	cmp	r0, #29
   12720:	beq	1263c <__assert_fail@plt+0x191c>
   12724:	b	12708 <__assert_fail@plt+0x19e8>
   12728:	sub	sp, fp, #28
   1272c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12730:	movw	r0, #28411	; 0x6efb
   12734:	movw	r1, #28404	; 0x6ef4
   12738:	movw	r3, #28427	; 0x6f0b
   1273c:	mov	r2, #249	; 0xf9
   12740:	movt	r0, #1
   12744:	movt	r1, #1
   12748:	movt	r3, #1
   1274c:	bl	10d20 <__assert_fail@plt>
   12750:	movw	r0, #28453	; 0x6f25
   12754:	movw	r1, #28404	; 0x6ef4
   12758:	movw	r3, #28427	; 0x6f0b
   1275c:	mov	r2, #253	; 0xfd
   12760:	movt	r0, #1
   12764:	movt	r1, #1
   12768:	movt	r3, #1
   1276c:	bl	10d20 <__assert_fail@plt>
   12770:	movw	r0, #28411	; 0x6efb
   12774:	movw	r1, #28404	; 0x6ef4
   12778:	movw	r3, #28472	; 0x6f38
   1277c:	movw	r2, #269	; 0x10d
   12780:	movt	r0, #1
   12784:	movt	r1, #1
   12788:	movt	r3, #1
   1278c:	bl	10d20 <__assert_fail@plt>
   12790:	push	{r4, sl, fp, lr}
   12794:	add	fp, sp, #8
   12798:	mov	r4, r0
   1279c:	ldr	r0, [r0, #8]
   127a0:	bl	10ba0 <free@plt>
   127a4:	mov	r0, r4
   127a8:	pop	{r4, sl, fp, lr}
   127ac:	b	10ba0 <free@plt>
   127b0:	push	{fp, lr}
   127b4:	mov	fp, sp
   127b8:	bl	10b64 <calloc@plt>
   127bc:	cmp	r0, #0
   127c0:	popne	{fp, pc}
   127c4:	movw	r0, #28496	; 0x6f50
   127c8:	movt	r0, #1
   127cc:	bl	12ce8 <error@@Base>
   127d0:	push	{r4, r5, r6, sl, fp, lr}
   127d4:	add	fp, sp, #16
   127d8:	ldrb	r3, [r0]
   127dc:	ldrb	ip, [r1]
   127e0:	mov	r2, r0
   127e4:	mov	r0, #0
   127e8:	cmp	r3, #0
   127ec:	beq	1282c <__assert_fail@plt+0x1b0c>
   127f0:	add	r6, r2, #1
   127f4:	add	lr, r1, #1
   127f8:	mov	r2, #0
   127fc:	uxtb	r4, ip
   12800:	uxtb	r5, r3
   12804:	cmp	r5, r4
   12808:	bne	1283c <__assert_fail@plt+0x1b1c>
   1280c:	ldrb	r3, [r6, r2]
   12810:	ldrb	ip, [lr, r2]
   12814:	add	r2, r2, #1
   12818:	cmp	r3, #0
   1281c:	bne	127fc <__assert_fail@plt+0x1adc>
   12820:	cmp	ip, #0
   12824:	bne	12838 <__assert_fail@plt+0x1b18>
   12828:	pop	{r4, r5, r6, sl, fp, pc}
   1282c:	mov	r2, #0
   12830:	cmp	ip, #0
   12834:	beq	12828 <__assert_fail@plt+0x1b08>
   12838:	mov	r3, #0
   1283c:	ldrb	r1, [r1, r2]
   12840:	uxtb	r2, r3
   12844:	mov	r0, #1
   12848:	cmp	r2, r1
   1284c:	mvncc	r0, #0
   12850:	pop	{r4, r5, r6, sl, fp, pc}
   12854:	push	{r4, r5, fp, lr}
   12858:	add	fp, sp, #8
   1285c:	mov	r5, r1
   12860:	cmp	r0, #0
   12864:	beq	12898 <__assert_fail@plt+0x1b78>
   12868:	mov	r1, r5
   1286c:	mov	r4, r0
   12870:	bl	10b94 <fopen@plt>
   12874:	cmp	r0, #0
   12878:	popne	{r4, r5, fp, pc}
   1287c:	ldrb	r0, [r5]
   12880:	cmp	r0, #119	; 0x77
   12884:	bne	128bc <__assert_fail@plt+0x1b9c>
   12888:	movw	r0, #28522	; 0x6f6a
   1288c:	mov	r1, r4
   12890:	movt	r0, #1
   12894:	bl	12d28 <error@@Base+0x40>
   12898:	ldrb	r0, [r5]
   1289c:	movw	r1, #32976	; 0x80d0
   128a0:	movw	r2, #32980	; 0x80d4
   128a4:	movt	r1, #2
   128a8:	movt	r2, #2
   128ac:	cmp	r0, #114	; 0x72
   128b0:	moveq	r2, r1
   128b4:	ldr	r0, [r2]
   128b8:	pop	{r4, r5, fp, pc}
   128bc:	movw	r0, #28544	; 0x6f80
   128c0:	mov	r1, r4
   128c4:	movt	r0, #1
   128c8:	bl	12d28 <error@@Base+0x40>
   128cc:	movw	r1, #32976	; 0x80d0
   128d0:	movt	r1, #2
   128d4:	ldr	r1, [r1]
   128d8:	cmp	r1, r0
   128dc:	bxeq	lr
   128e0:	movw	r1, #32980	; 0x80d4
   128e4:	movt	r1, #2
   128e8:	ldr	r1, [r1]
   128ec:	cmp	r1, r0
   128f0:	beq	128f8 <__assert_fail@plt+0x1bd8>
   128f4:	b	10cb4 <fclose@plt>
   128f8:	bx	lr
   128fc:	push	{fp, lr}
   12900:	mov	fp, sp
   12904:	sub	sp, sp, #88	; 0x58
   12908:	mov	r1, r0
   1290c:	mov	r2, sp
   12910:	mov	r0, #3
   12914:	bl	10c00 <__xstat@plt>
   12918:	clz	r0, r0
   1291c:	lsr	r0, r0, #5
   12920:	mov	sp, fp
   12924:	pop	{fp, pc}
   12928:	push	{r4, r5, fp, lr}
   1292c:	add	fp, sp, #8
   12930:	sub	sp, sp, #104	; 0x68
   12934:	movw	r0, #33092	; 0x8144
   12938:	movt	r0, #2
   1293c:	ldrh	r1, [r0]
   12940:	add	r5, r1, #1
   12944:	strh	r5, [r0]
   12948:	movw	r0, #50252	; 0xc44c
   1294c:	movt	r0, #2
   12950:	ldr	r4, [r0]
   12954:	bl	10c60 <getpid@plt>
   12958:	movw	r1, #28585	; 0x6fa9
   1295c:	mov	r3, r0
   12960:	sxth	r0, r5
   12964:	add	r5, sp, #4
   12968:	mov	r2, r4
   1296c:	movt	r1, #1
   12970:	str	r0, [sp]
   12974:	mov	r0, r5
   12978:	bl	10cd8 <sprintf@plt>
   1297c:	mov	r0, r5
   12980:	bl	10bd0 <strdup@plt>
   12984:	mov	r4, r0
   12988:	bl	10be8 <unlink@plt>
   1298c:	mov	r0, r4
   12990:	sub	sp, fp, #8
   12994:	pop	{r4, r5, fp, pc}
   12998:	push	{r4, sl, fp, lr}
   1299c:	add	fp, sp, #8
   129a0:	mov	r4, r0
   129a4:	bl	10c90 <strlen@plt>
   129a8:	sub	r0, r0, #1
   129ac:	sxth	r0, r0
   129b0:	cmp	r0, #0
   129b4:	bmi	129c4 <__assert_fail@plt+0x1ca4>
   129b8:	ldrb	r1, [r4, r0]
   129bc:	cmp	r1, #47	; 0x2f
   129c0:	bne	129a8 <__assert_fail@plt+0x1c88>
   129c4:	add	r0, r0, r4
   129c8:	add	r0, r0, #1
   129cc:	pop	{r4, sl, fp, pc}
   129d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d4:	add	fp, sp, #28
   129d8:	sub	sp, sp, #12
   129dc:	ldr	r4, [r1]
   129e0:	str	r0, [sp, #8]
   129e4:	mov	r7, r3
   129e8:	str	r2, [sp]
   129ec:	str	r1, [sp, #4]
   129f0:	mov	r0, r4
   129f4:	bl	10c90 <strlen@plt>
   129f8:	sub	r0, r0, #1
   129fc:	sxth	r0, r0
   12a00:	cmp	r0, #0
   12a04:	bmi	12a14 <__assert_fail@plt+0x1cf4>
   12a08:	ldrb	r1, [r4, r0]
   12a0c:	cmp	r1, #47	; 0x2f
   12a10:	bne	129f8 <__assert_fail@plt+0x1cd8>
   12a14:	add	r0, r0, r4
   12a18:	movw	r1, #50252	; 0xc44c
   12a1c:	movw	r4, #11696	; 0x2db0
   12a20:	movt	r1, #2
   12a24:	movt	r4, #1
   12a28:	add	r0, r0, #1
   12a2c:	str	r0, [r1]
   12a30:	mov	r0, #2
   12a34:	mov	r1, r4
   12a38:	bl	10c48 <__sysv_signal@plt>
   12a3c:	mov	r0, #15
   12a40:	mov	r1, r4
   12a44:	bl	10c48 <__sysv_signal@plt>
   12a48:	ldr	r0, [sp, #8]
   12a4c:	ldr	r6, [r0]
   12a50:	cmp	r6, #1
   12a54:	bne	12a6c <__assert_fail@plt+0x1d4c>
   12a58:	movw	r0, #32956	; 0x80bc
   12a5c:	movt	r0, #2
   12a60:	ldrb	r0, [r0]
   12a64:	cmp	r0, #0
   12a68:	bne	12c6c <__assert_fail@plt+0x1f4c>
   12a6c:	ldr	ip, [sp, #4]
   12a70:	mov	r8, #0
   12a74:	cmp	r6, #2
   12a78:	blt	12c74 <__assert_fail@plt+0x1f54>
   12a7c:	cmp	r7, #0
   12a80:	beq	12bf4 <__assert_fail@plt+0x1ed4>
   12a84:	mov	r8, #0
   12a88:	mov	r5, #1
   12a8c:	mov	r9, #1
   12a90:	ldr	r4, [ip, r5, lsl #2]
   12a94:	ldrb	r0, [r4]
   12a98:	cmp	r0, #45	; 0x2d
   12a9c:	beq	12acc <__assert_fail@plt+0x1dac>
   12aa0:	sxth	r0, r8
   12aa4:	add	r8, r8, #1
   12aa8:	str	r4, [ip, r0, lsl #2]
   12aac:	add	r9, r9, #1
   12ab0:	sxth	r5, r9
   12ab4:	cmp	r6, r5
   12ab8:	ble	12c74 <__assert_fail@plt+0x1f54>
   12abc:	ldr	r4, [ip, r5, lsl #2]
   12ac0:	ldrb	r0, [r4]
   12ac4:	cmp	r0, #45	; 0x2d
   12ac8:	bne	12aa0 <__assert_fail@plt+0x1d80>
   12acc:	ldrb	sl, [r4, #1]
   12ad0:	cmp	sl, #0
   12ad4:	beq	12aa0 <__assert_fail@plt+0x1d80>
   12ad8:	mov	r0, r4
   12adc:	bl	10c90 <strlen@plt>
   12ae0:	mov	r2, r0
   12ae4:	movw	r0, #28614	; 0x6fc6
   12ae8:	mov	r1, r4
   12aec:	movt	r0, #1
   12af0:	bl	10cfc <strncmp@plt>
   12af4:	cmp	r0, #0
   12af8:	beq	12c6c <__assert_fail@plt+0x1f4c>
   12afc:	ldr	ip, [sp, #4]
   12b00:	add	r1, r5, #1
   12b04:	ldrb	r2, [r7]
   12b08:	mov	r0, #0
   12b0c:	cmp	r1, r6
   12b10:	ldrlt	r0, [ip, r1, lsl #2]
   12b14:	cmp	r2, #0
   12b18:	beq	12c88 <__assert_fail@plt+0x1f68>
   12b1c:	mov	r1, #0
   12b20:	cmp	sl, r2
   12b24:	beq	12b4c <__assert_fail@plt+0x1e2c>
   12b28:	mov	r2, #1
   12b2c:	sxth	r1, r2
   12b30:	add	r3, r1, r1, lsl #1
   12b34:	ldrb	r3, [r7, r3, lsl #2]
   12b38:	cmp	r3, #0
   12b3c:	beq	12c88 <__assert_fail@plt+0x1f68>
   12b40:	add	r2, r2, #1
   12b44:	cmp	sl, r3
   12b48:	bne	12b2c <__assert_fail@plt+0x1e0c>
   12b4c:	add	r1, r1, r1, lsl #1
   12b50:	add	r3, r7, r1, lsl #2
   12b54:	ldr	r1, [r3, #4]
   12b58:	cmp	r1, #0
   12b5c:	beq	12bac <__assert_fail@plt+0x1e8c>
   12b60:	mov	r2, r4
   12b64:	cmp	r0, #0
   12b68:	ldrb	r5, [r2, #2]!
   12b6c:	cmpeq	r5, #0
   12b70:	beq	12bac <__assert_fail@plt+0x1e8c>
   12b74:	ldr	r3, [r1]
   12b78:	cmp	r3, #0
   12b7c:	bne	12c98 <__assert_fail@plt+0x1f78>
   12b80:	cmp	r5, #0
   12b84:	movne	r0, r2
   12b88:	str	r0, [r1]
   12b8c:	ldrb	r0, [r2]
   12b90:	cmp	r0, #0
   12b94:	addeq	r9, r9, #1
   12b98:	add	r9, r9, #1
   12b9c:	sxth	r5, r9
   12ba0:	cmp	r6, r5
   12ba4:	bgt	12abc <__assert_fail@plt+0x1d9c>
   12ba8:	b	12c74 <__assert_fail@plt+0x1f54>
   12bac:	ldr	r0, [r3, #8]
   12bb0:	cmp	r0, #0
   12bb4:	beq	12c88 <__assert_fail@plt+0x1f68>
   12bb8:	ldrb	r1, [r4, #2]
   12bbc:	cmp	r1, #0
   12bc0:	bne	12c88 <__assert_fail@plt+0x1f68>
   12bc4:	ldrb	r1, [r0]
   12bc8:	cmp	r1, #0
   12bcc:	bne	12c98 <__assert_fail@plt+0x1f78>
   12bd0:	mov	r1, #1
   12bd4:	strb	r1, [r0]
   12bd8:	ldr	r0, [sp, #8]
   12bdc:	ldr	r6, [r0]
   12be0:	add	r9, r9, #1
   12be4:	sxth	r5, r9
   12be8:	cmp	r6, r5
   12bec:	bgt	12abc <__assert_fail@plt+0x1d9c>
   12bf0:	b	12c74 <__assert_fail@plt+0x1f54>
   12bf4:	mov	r1, #1
   12bf8:	mov	r8, #0
   12bfc:	mov	r0, #1
   12c00:	ldr	r4, [ip, r1, lsl #2]
   12c04:	ldrb	r1, [r4]
   12c08:	cmp	r1, #45	; 0x2d
   12c0c:	beq	12c3c <__assert_fail@plt+0x1f1c>
   12c10:	sxth	r1, r8
   12c14:	add	r0, r0, #1
   12c18:	add	r8, r8, #1
   12c1c:	str	r4, [ip, r1, lsl #2]
   12c20:	sxth	r1, r0
   12c24:	cmp	r6, r1
   12c28:	ble	12c74 <__assert_fail@plt+0x1f54>
   12c2c:	ldr	r4, [ip, r1, lsl #2]
   12c30:	ldrb	r1, [r4]
   12c34:	cmp	r1, #45	; 0x2d
   12c38:	bne	12c10 <__assert_fail@plt+0x1ef0>
   12c3c:	ldrb	r1, [r4, #1]
   12c40:	cmp	r1, #0
   12c44:	beq	12c10 <__assert_fail@plt+0x1ef0>
   12c48:	mov	r0, r4
   12c4c:	bl	10c90 <strlen@plt>
   12c50:	mov	r2, r0
   12c54:	movw	r0, #28614	; 0x6fc6
   12c58:	mov	r1, r4
   12c5c:	movt	r0, #1
   12c60:	bl	10cfc <strncmp@plt>
   12c64:	cmp	r0, #0
   12c68:	bne	12c88 <__assert_fail@plt+0x1f68>
   12c6c:	ldr	r0, [sp]
   12c70:	bl	12de0 <error@@Base+0xf8>
   12c74:	ldr	r1, [sp, #8]
   12c78:	sxth	r0, r8
   12c7c:	str	r0, [r1]
   12c80:	sub	sp, fp, #28
   12c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c88:	movw	r0, #28635	; 0x6fdb
   12c8c:	mov	r1, r4
   12c90:	movt	r0, #1
   12c94:	bl	12d28 <error@@Base+0x40>
   12c98:	movw	r0, #28650	; 0x6fea
   12c9c:	mov	r1, r4
   12ca0:	movt	r0, #1
   12ca4:	bl	12d28 <error@@Base+0x40>
   12ca8:	push	{fp, lr}
   12cac:	mov	fp, sp
   12cb0:	mov	r0, #0
   12cb4:	bl	12cb8 <__assert_fail@plt+0x1f98>
   12cb8:	push	{fp, lr}
   12cbc:	mov	fp, sp
   12cc0:	mov	r4, r0
   12cc4:	movw	r0, #50256	; 0xc450
   12cc8:	movt	r0, #2
   12ccc:	ldr	r0, [r0]
   12cd0:	cmp	r0, #0
   12cd4:	beq	12cdc <__assert_fail@plt+0x1fbc>
   12cd8:	blx	r0
   12cdc:	bl	12e30 <error@@Base+0x148>
   12ce0:	mov	r0, r4
   12ce4:	bl	10c6c <exit@plt>

00012ce8 <error@@Base>:
   12ce8:	push	{fp, lr}
   12cec:	mov	fp, sp
   12cf0:	mov	r3, r0
   12cf4:	movw	r0, #50252	; 0xc44c
   12cf8:	movw	r1, #28564	; 0x6f94
   12cfc:	movt	r0, #2
   12d00:	movt	r1, #1
   12d04:	ldr	r2, [r0]
   12d08:	movw	r0, #32968	; 0x80c8
   12d0c:	movt	r0, #2
   12d10:	ldr	r0, [r0]
   12d14:	bl	10c9c <fprintf@plt>
   12d18:	movw	r0, #32960	; 0x80c0
   12d1c:	movt	r0, #2
   12d20:	ldr	r0, [r0]
   12d24:	bl	12cb8 <__assert_fail@plt+0x1f98>
   12d28:	push	{fp, lr}
   12d2c:	mov	fp, sp
   12d30:	sub	sp, sp, #8
   12d34:	mov	r3, r0
   12d38:	movw	r0, #50252	; 0xc44c
   12d3c:	str	r1, [sp]
   12d40:	movw	r1, #28572	; 0x6f9c
   12d44:	movt	r0, #2
   12d48:	movt	r1, #1
   12d4c:	ldr	r2, [r0]
   12d50:	movw	r0, #32968	; 0x80c8
   12d54:	movt	r0, #2
   12d58:	ldr	r0, [r0]
   12d5c:	bl	10c9c <fprintf@plt>
   12d60:	movw	r0, #32960	; 0x80c0
   12d64:	movt	r0, #2
   12d68:	ldr	r0, [r0]
   12d6c:	bl	12cb8 <__assert_fail@plt+0x1f98>
   12d70:	push	{fp, lr}
   12d74:	mov	fp, sp
   12d78:	sub	sp, sp, #8
   12d7c:	mov	r3, r0
   12d80:	movw	r0, #50252	; 0xc44c
   12d84:	str	r1, [sp]
   12d88:	movw	r1, #28572	; 0x6f9c
   12d8c:	movt	r0, #2
   12d90:	movt	r1, #1
   12d94:	ldr	r2, [r0]
   12d98:	movw	r0, #32968	; 0x80c8
   12d9c:	movt	r0, #2
   12da0:	ldr	r0, [r0]
   12da4:	bl	10c9c <fprintf@plt>
   12da8:	mov	sp, fp
   12dac:	pop	{fp, pc}
   12db0:	push	{fp, lr}
   12db4:	mov	fp, sp
   12db8:	movw	r0, #33094	; 0x8146
   12dbc:	movt	r0, #2
   12dc0:	ldrb	r1, [r0]
   12dc4:	cmp	r1, #1
   12dc8:	popeq	{fp, pc}
   12dcc:	mov	r1, #1
   12dd0:	strb	r1, [r0]
   12dd4:	movw	r0, #28599	; 0x6fb7
   12dd8:	movt	r0, #1
   12ddc:	bl	12ce8 <error@@Base>
   12de0:	push	{fp, lr}
   12de4:	mov	fp, sp
   12de8:	mov	r3, r0
   12dec:	movw	r0, #50248	; 0xc448
   12df0:	movt	r0, #2
   12df4:	ldr	r0, [r0]
   12df8:	cmp	r0, #0
   12dfc:	bne	12e28 <error@@Base+0x140>
   12e00:	movw	r0, #50252	; 0xc44c
   12e04:	movw	r1, #28620	; 0x6fcc
   12e08:	movt	r0, #2
   12e0c:	movt	r1, #1
   12e10:	ldr	r2, [r0]
   12e14:	movw	r0, #32968	; 0x80c8
   12e18:	movt	r0, #2
   12e1c:	ldr	r0, [r0]
   12e20:	bl	10c9c <fprintf@plt>
   12e24:	bl	12ca8 <__assert_fail@plt+0x1f88>
   12e28:	blx	r0
   12e2c:	bl	12ca8 <__assert_fail@plt+0x1f88>
   12e30:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12e34:	add	fp, sp, #24
   12e38:	sub	sp, sp, #104	; 0x68
   12e3c:	movw	r8, #33092	; 0x8144
   12e40:	movt	r8, #2
   12e44:	ldrsh	r0, [r8]
   12e48:	cmp	r0, #1
   12e4c:	blt	12eb8 <error@@Base+0x1d0>
   12e50:	movw	r9, #50252	; 0xc44c
   12e54:	movw	r5, #28585	; 0x6fa9
   12e58:	mov	r7, #1
   12e5c:	add	r4, sp, #4
   12e60:	movt	r9, #2
   12e64:	movt	r5, #1
   12e68:	ldr	r6, [r9]
   12e6c:	bl	10c60 <getpid@plt>
   12e70:	mov	r3, r0
   12e74:	sxth	r0, r7
   12e78:	mov	r1, r5
   12e7c:	mov	r2, r6
   12e80:	str	r0, [sp]
   12e84:	mov	r0, r4
   12e88:	bl	10cd8 <sprintf@plt>
   12e8c:	mov	r0, r4
   12e90:	bl	10bd0 <strdup@plt>
   12e94:	mov	r6, r0
   12e98:	bl	10be8 <unlink@plt>
   12e9c:	mov	r0, r6
   12ea0:	bl	10ba0 <free@plt>
   12ea4:	add	r0, r7, #1
   12ea8:	sxth	r7, r0
   12eac:	ldrsh	r0, [r8]
   12eb0:	cmp	r7, r0
   12eb4:	ble	12e68 <error@@Base+0x180>
   12eb8:	sub	sp, fp, #24
   12ebc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12ec0:	push	{r4, r5, r6, sl, fp, lr}
   12ec4:	add	fp, sp, #16
   12ec8:	mov	r5, r1
   12ecc:	mov	r6, r0
   12ed0:	mov	r0, #1
   12ed4:	mov	r1, #16
   12ed8:	mov	r4, r2
   12edc:	bl	127b0 <__assert_fail@plt+0x1a90>
   12ee0:	str	r4, [r0, #12]
   12ee4:	mov	r1, r0
   12ee8:	strb	r5, [r0, #8]
   12eec:	mov	r0, r6
   12ef0:	pop	{r4, r5, r6, sl, fp, lr}
   12ef4:	b	13648 <error@@Base+0x960>
   12ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12efc:	add	fp, sp, #28
   12f00:	sub	sp, sp, #124	; 0x7c
   12f04:	mov	r5, r2
   12f08:	mov	r2, r1
   12f0c:	cmp	r1, #0
   12f10:	str	r0, [sp, #16]
   12f14:	bne	12f24 <error@@Base+0x23c>
   12f18:	ldrb	r0, [r5]
   12f1c:	cmp	r0, #0
   12f20:	bne	1331c <error@@Base+0x634>
   12f24:	ldr	r0, [sp, #16]
   12f28:	movw	r1, #28869	; 0x70c5
   12f2c:	movt	r1, #1
   12f30:	ldr	r0, [r0, #4]
   12f34:	str	r0, [sp, #4]
   12f38:	mov	r0, r2
   12f3c:	bl	12854 <__assert_fail@plt+0x1b34>
   12f40:	mov	r6, r0
   12f44:	ldrb	r0, [r5]
   12f48:	cmp	r0, #0
   12f4c:	beq	12f94 <error@@Base+0x2ac>
   12f50:	add	r0, sp, #20
   12f54:	mov	r1, #99	; 0x63
   12f58:	mov	r2, r6
   12f5c:	bl	10bb8 <fgets@plt>
   12f60:	cmp	r0, #0
   12f64:	beq	12f84 <error@@Base+0x29c>
   12f68:	movw	r1, #28735	; 0x703f
   12f6c:	add	r0, sp, #20
   12f70:	mov	r2, #51	; 0x33
   12f74:	movt	r1, #1
   12f78:	bl	10c78 <bcmp@plt>
   12f7c:	cmp	r0, #0
   12f80:	beq	132a8 <error@@Base+0x5c0>
   12f84:	mov	r0, r6
   12f88:	bl	10bdc <rewind@plt>
   12f8c:	mov	r7, #0
   12f90:	strb	r7, [r5, #11]
   12f94:	ldr	r8, [r5, #4]
   12f98:	ldrb	r4, [r5, #1]
   12f9c:	mov	r0, r6
   12fa0:	str	r5, [sp, #8]
   12fa4:	cmp	r8, #0
   12fa8:	movweq	r8, #94	; 0x5e
   12fac:	bl	10d14 <getc@plt>
   12fb0:	cmn	r0, #1
   12fb4:	beq	13118 <error@@Base+0x430>
   12fb8:	add	r1, sp, #20
   12fbc:	cmp	r4, #0
   12fc0:	add	r1, r1, #1
   12fc4:	str	r1, [sp, #12]
   12fc8:	beq	1307c <error@@Base+0x394>
   12fcc:	mov	sl, #0
   12fd0:	sub	r7, fp, #32
   12fd4:	b	12fec <error@@Base+0x304>
   12fd8:	mov	r0, r6
   12fdc:	bl	10d14 <getc@plt>
   12fe0:	cmn	r0, #1
   12fe4:	mov	sl, r4
   12fe8:	beq	13118 <error@@Base+0x430>
   12fec:	movw	r1, #32256	; 0x7e00
   12ff0:	movt	r1, #2
   12ff4:	add	r1, r1, r0
   12ff8:	ldrsb	r9, [r1]
   12ffc:	cmp	r9, #1
   13000:	blt	132fc <error@@Base+0x614>
   13004:	strb	r0, [sp, #20]
   13008:	beq	1302c <error@@Base+0x344>
   1300c:	ldr	r0, [sp, #12]
   13010:	sub	r4, r9, #1
   13014:	mov	r1, #1
   13018:	mov	r3, r6
   1301c:	mov	r2, r4
   13020:	bl	10c18 <fread@plt>
   13024:	cmp	r0, r4
   13028:	bne	13310 <error@@Base+0x628>
   1302c:	add	r0, sp, #20
   13030:	mov	r1, #4
   13034:	mov	r2, r7
   13038:	bl	10c24 <utf8proc_iterate@plt>
   1303c:	cmp	r0, r9
   13040:	bne	13308 <error@@Base+0x620>
   13044:	ldr	r5, [fp, #-32]	; 0xffffffe0
   13048:	mov	r4, #1
   1304c:	cmp	r5, r8
   13050:	beq	12fd8 <error@@Base+0x2f0>
   13054:	mov	r0, #1
   13058:	mov	r1, #16
   1305c:	bl	127b0 <__assert_fail@plt+0x1a90>
   13060:	str	r5, [r0, #12]
   13064:	mov	r1, r0
   13068:	strb	sl, [r0, #8]
   1306c:	ldr	r0, [sp, #16]
   13070:	bl	13648 <error@@Base+0x960>
   13074:	mov	r4, #0
   13078:	b	12fd8 <error@@Base+0x2f0>
   1307c:	movw	r8, #32256	; 0x7e00
   13080:	add	r9, sp, #20
   13084:	sub	sl, fp, #32
   13088:	mov	r5, #0
   1308c:	movt	r8, #2
   13090:	add	r1, r8, r0
   13094:	ldrsb	r7, [r1]
   13098:	cmp	r7, #0
   1309c:	ble	132fc <error@@Base+0x614>
   130a0:	cmp	r7, #1
   130a4:	strb	r0, [sp, #20]
   130a8:	beq	130cc <error@@Base+0x3e4>
   130ac:	ldr	r0, [sp, #12]
   130b0:	sub	r4, r7, #1
   130b4:	mov	r1, #1
   130b8:	mov	r3, r6
   130bc:	mov	r2, r4
   130c0:	bl	10c18 <fread@plt>
   130c4:	cmp	r0, r4
   130c8:	bne	13310 <error@@Base+0x628>
   130cc:	mov	r0, r9
   130d0:	mov	r1, #4
   130d4:	mov	r2, sl
   130d8:	bl	10c24 <utf8proc_iterate@plt>
   130dc:	cmp	r0, r7
   130e0:	bne	13308 <error@@Base+0x620>
   130e4:	ldr	r4, [fp, #-32]	; 0xffffffe0
   130e8:	mov	r0, #1
   130ec:	mov	r1, #16
   130f0:	bl	127b0 <__assert_fail@plt+0x1a90>
   130f4:	str	r4, [r0, #12]
   130f8:	mov	r1, r0
   130fc:	strb	r5, [r0, #8]
   13100:	ldr	r0, [sp, #16]
   13104:	bl	13648 <error@@Base+0x960>
   13108:	mov	r0, r6
   1310c:	bl	10d14 <getc@plt>
   13110:	cmn	r0, #1
   13114:	bne	13090 <error@@Base+0x3a8>
   13118:	mov	r0, r6
   1311c:	bl	128cc <__assert_fail@plt+0x1bac>
   13120:	ldr	r8, [sp, #8]
   13124:	ldr	r9, [sp, #4]
   13128:	ldrb	r0, [r8, #9]
   1312c:	cmp	r0, #0
   13130:	beq	13264 <error@@Base+0x57c>
   13134:	cmp	r9, #0
   13138:	ldr	r0, [sp, #16]
   1313c:	addne	r0, r9, #4
   13140:	ldr	r6, [r0]
   13144:	cmp	r6, #0
   13148:	beq	13264 <error@@Base+0x57c>
   1314c:	mov	r4, #32
   13150:	mov	r7, r6
   13154:	b	13168 <error@@Base+0x480>
   13158:	str	r4, [r7, #12]
   1315c:	ldr	r7, [r7, #4]
   13160:	cmp	r7, #0
   13164:	beq	131c0 <error@@Base+0x4d8>
   13168:	ldr	r5, [r7, #12]
   1316c:	mov	r0, r5
   13170:	bl	10bac <utf8proc_get_property@plt>
   13174:	cmp	r5, #10
   13178:	ble	13194 <error@@Base+0x4ac>
   1317c:	sub	r1, r5, #11
   13180:	cmp	r1, #3
   13184:	bcc	13158 <error@@Base+0x470>
   13188:	cmp	r5, #160	; 0xa0
   1318c:	beq	13158 <error@@Base+0x470>
   13190:	b	131a4 <error@@Base+0x4bc>
   13194:	cmp	r5, #9
   13198:	beq	13158 <error@@Base+0x470>
   1319c:	cmp	r5, #10
   131a0:	beq	1315c <error@@Base+0x474>
   131a4:	ldrsh	r0, [r0]
   131a8:	sub	r0, r0, #23
   131ac:	cmp	r0, #2
   131b0:	strls	r4, [r7, #12]
   131b4:	ldr	r7, [r7, #4]
   131b8:	cmp	r7, #0
   131bc:	bne	13168 <error@@Base+0x480>
   131c0:	mov	r4, #0
   131c4:	ldr	r1, [r6, #12]
   131c8:	ldr	r5, [r6, #4]
   131cc:	cmp	r1, #32
   131d0:	bne	13210 <error@@Base+0x528>
   131d4:	tst	r4, #255	; 0xff
   131d8:	cmpne	r5, #0
   131dc:	bne	13238 <error@@Base+0x550>
   131e0:	ldr	r0, [sp, #16]
   131e4:	mov	r1, r6
   131e8:	bl	13740 <error@@Base+0xa58>
   131ec:	mov	r0, r6
   131f0:	bl	10ba0 <free@plt>
   131f4:	cmp	r5, #0
   131f8:	mov	r6, r5
   131fc:	beq	13264 <error@@Base+0x57c>
   13200:	ldr	r1, [r6, #12]
   13204:	ldr	r5, [r6, #4]
   13208:	cmp	r1, #32
   1320c:	beq	131d4 <error@@Base+0x4ec>
   13210:	subs	r0, r1, #10
   13214:	movwne	r0, #1
   13218:	tst	r4, #255	; 0xff
   1321c:	cmpeq	r1, #10
   13220:	beq	131e0 <error@@Base+0x4f8>
   13224:	mov	r4, r0
   13228:	cmp	r5, #0
   1322c:	mov	r6, r5
   13230:	bne	13200 <error@@Base+0x518>
   13234:	b	13264 <error@@Base+0x57c>
   13238:	ldr	r1, [r5, #12]
   1323c:	cmp	r1, #10
   13240:	beq	131e0 <error@@Base+0x4f8>
   13244:	mov	r0, #1
   13248:	cmp	r1, #32
   1324c:	bne	13224 <error@@Base+0x53c>
   13250:	ldrb	r0, [r6, #8]
   13254:	ldrb	r1, [r5, #8]
   13258:	orr	r0, r1, r0
   1325c:	strb	r0, [r5, #8]
   13260:	b	131e0 <error@@Base+0x4f8>
   13264:	ldrb	r0, [r8, #10]
   13268:	cmp	r0, #0
   1326c:	beq	132a0 <error@@Base+0x5b8>
   13270:	cmp	r9, #0
   13274:	ldr	r0, [sp, #16]
   13278:	addne	r0, r9, #4
   1327c:	ldr	r4, [r0]
   13280:	cmp	r4, #0
   13284:	beq	132a0 <error@@Base+0x5b8>
   13288:	ldr	r0, [r4, #12]
   1328c:	bl	10bf4 <utf8proc_tolower@plt>
   13290:	str	r0, [r4, #12]
   13294:	ldr	r4, [r4, #4]
   13298:	cmp	r4, #0
   1329c:	bne	13288 <error@@Base+0x5a0>
   132a0:	sub	sp, fp, #28
   132a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132a8:	movw	r8, #28791	; 0x7077
   132ac:	mov	r4, #0
   132b0:	add	r9, sp, #20
   132b4:	mov	r7, #1
   132b8:	movt	r8, #1
   132bc:	mov	r0, r9
   132c0:	mov	r1, #99	; 0x63
   132c4:	mov	r2, r6
   132c8:	bl	10bb8 <fgets@plt>
   132cc:	cmp	r0, #0
   132d0:	beq	12f90 <error@@Base+0x2a8>
   132d4:	mov	r0, r9
   132d8:	mov	r1, r8
   132dc:	mov	r2, #56	; 0x38
   132e0:	bl	10c78 <bcmp@plt>
   132e4:	cmp	r0, #0
   132e8:	addeq	r4, r4, #1
   132ec:	uxth	r0, r4
   132f0:	cmp	r0, #2
   132f4:	bcc	132bc <error@@Base+0x5d4>
   132f8:	b	12f90 <error@@Base+0x2a8>
   132fc:	movw	r0, #28847	; 0x70af
   13300:	movt	r0, #1
   13304:	bl	12ce8 <error@@Base>
   13308:	bl	10ce4 <utf8proc_errmsg@plt>
   1330c:	bl	12ce8 <error@@Base>
   13310:	movw	r0, #28871	; 0x70c7
   13314:	movt	r0, #1
   13318:	bl	12ce8 <error@@Base>
   1331c:	movw	r0, #28667	; 0x6ffb
   13320:	movw	r1, #28683	; 0x700b
   13324:	movt	r0, #1
   13328:	movt	r1, #1
   1332c:	bl	12d28 <error@@Base+0x40>
   13330:	push	{fp, lr}
   13334:	mov	fp, sp
   13338:	bl	10bc4 <utf8proc_encode_char@plt>
   1333c:	cmp	r0, #0
   13340:	sxtbgt	r0, r0
   13344:	popgt	{fp, pc}
   13348:	movw	r0, #28693	; 0x7015
   1334c:	movt	r0, #1
   13350:	bl	12ce8 <error@@Base>
   13354:	push	{r4, r5, r6, r7, fp, lr}
   13358:	add	fp, sp, #16
   1335c:	mov	r6, r3
   13360:	mov	r4, r2
   13364:	mov	r5, r1
   13368:	tst	r0, #255	; 0xff
   1336c:	beq	133b4 <error@@Base+0x6cc>
   13370:	mov	r0, #94	; 0x5e
   13374:	mov	r1, r4
   13378:	bl	10bc4 <utf8proc_encode_char@plt>
   1337c:	cmp	r0, #0
   13380:	ble	1342c <error@@Base+0x744>
   13384:	sxtb	r7, r0
   13388:	cmp	r5, #10
   1338c:	bne	133c0 <error@@Base+0x6d8>
   13390:	movw	r0, #28583	; 0x6fa7
   13394:	movw	r1, #28716	; 0x702c
   13398:	tst	r6, #255	; 0xff
   1339c:	movt	r0, #1
   133a0:	movt	r1, #1
   133a4:	moveq	r1, r0
   133a8:	add	r0, r4, r7
   133ac:	pop	{r4, r5, r6, r7, fp, lr}
   133b0:	b	10cd8 <sprintf@plt>
   133b4:	mov	r7, #0
   133b8:	cmp	r5, #10
   133bc:	beq	13390 <error@@Base+0x6a8>
   133c0:	mov	r0, r5
   133c4:	bl	10bac <utf8proc_get_property@plt>
   133c8:	cmp	r5, #32
   133cc:	beq	133e0 <error@@Base+0x6f8>
   133d0:	ldrsh	r0, [r0]
   133d4:	sub	r1, r0, #1
   133d8:	cmp	r1, #22
   133dc:	bcs	13438 <error@@Base+0x750>
   133e0:	mov	r0, r5
   133e4:	bl	10c84 <utf8proc_category@plt>
   133e8:	sub	r0, r0, #6
   133ec:	cmp	r0, #2
   133f0:	bhi	1340c <error@@Base+0x724>
   133f4:	add	r1, r4, r7
   133f8:	movw	r0, #9676	; 0x25cc
   133fc:	bl	10bc4 <utf8proc_encode_char@plt>
   13400:	cmp	r0, #0
   13404:	ble	1342c <error@@Base+0x744>
   13408:	sxtab	r7, r7, r0
   1340c:	add	r1, r4, r7
   13410:	mov	r0, r5
   13414:	bl	10bc4 <utf8proc_encode_char@plt>
   13418:	cmp	r0, #0
   1341c:	sxtabgt	r0, r7, r0
   13420:	movgt	r1, #0
   13424:	strbgt	r1, [r4, r0]
   13428:	popgt	{r4, r5, r6, r7, fp, pc}
   1342c:	movw	r0, #28693	; 0x7015
   13430:	movt	r0, #1
   13434:	bl	12ce8 <error@@Base>
   13438:	cmp	r0, #29
   1343c:	beq	133e0 <error@@Base+0x6f8>
   13440:	add	r0, r4, r7
   13444:	cmp	r5, #255	; 0xff
   13448:	bhi	13460 <error@@Base+0x778>
   1344c:	movw	r1, #28721	; 0x7031
   13450:	movt	r1, #1
   13454:	mov	r2, r5
   13458:	pop	{r4, r5, r6, r7, fp, lr}
   1345c:	b	10cd8 <sprintf@plt>
   13460:	movw	r1, #28728	; 0x7038
   13464:	movt	r1, #1
   13468:	mov	r2, r5
   1346c:	pop	{r4, r5, r6, r7, fp, lr}
   13470:	b	10cd8 <sprintf@plt>
   13474:	push	{r4, r5, r6, r7, fp, lr}
   13478:	add	fp, sp, #16
   1347c:	sub	sp, sp, #16
   13480:	mov	r6, r2
   13484:	mov	r2, r1
   13488:	movw	r1, #15080	; 0x3ae8
   1348c:	mov	r5, r0
   13490:	movt	r1, #1
   13494:	mov	r0, r2
   13498:	bl	12854 <__assert_fail@plt+0x1b34>
   1349c:	mov	r4, r0
   134a0:	cmp	r6, #0
   134a4:	beq	134f8 <error@@Base+0x810>
   134a8:	movw	r0, #28735	; 0x703f
   134ac:	mov	r1, #55	; 0x37
   134b0:	mov	r2, #1
   134b4:	mov	r3, r4
   134b8:	movt	r0, #1
   134bc:	bl	10c0c <fwrite@plt>
   134c0:	movw	r7, #28791	; 0x7077
   134c4:	mov	r1, #55	; 0x37
   134c8:	mov	r2, #1
   134cc:	mov	r3, r4
   134d0:	movt	r7, #1
   134d4:	mov	r0, r7
   134d8:	bl	10c0c <fwrite@plt>
   134dc:	mov	r0, r4
   134e0:	blx	r6
   134e4:	mov	r0, r7
   134e8:	mov	r1, #55	; 0x37
   134ec:	mov	r2, #1
   134f0:	mov	r3, r4
   134f4:	bl	10c0c <fwrite@plt>
   134f8:	ldr	r6, [r5]
   134fc:	cmp	r6, #0
   13500:	beq	13534 <error@@Base+0x84c>
   13504:	add	r5, sp, #7
   13508:	ldr	r1, [r6, #12]
   1350c:	ldrb	r0, [r6, #8]
   13510:	mov	r2, r5
   13514:	mov	r3, #0
   13518:	bl	13354 <error@@Base+0x66c>
   1351c:	mov	r0, r5
   13520:	mov	r1, r4
   13524:	bl	10cf0 <fputs@plt>
   13528:	ldr	r6, [r6, #4]
   1352c:	cmp	r6, #0
   13530:	bne	13508 <error@@Base+0x820>
   13534:	mov	r0, r4
   13538:	bl	128cc <__assert_fail@plt+0x1bac>
   1353c:	sub	sp, fp, #16
   13540:	pop	{r4, r5, r6, r7, fp, pc}
   13544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13548:	add	fp, sp, #28
   1354c:	sub	sp, sp, #4
   13550:	mov	r9, #0
   13554:	mov	sl, r0
   13558:	str	r9, [sp]
   1355c:	ldrb	r0, [r1]
   13560:	cmp	r0, #0
   13564:	beq	135cc <error@@Base+0x8e4>
   13568:	mov	r4, r1
   1356c:	mov	r8, sp
   13570:	mov	r7, #1
   13574:	mov	r0, r4
   13578:	mvn	r1, #0
   1357c:	mov	r2, r8
   13580:	bl	10c24 <utf8proc_iterate@plt>
   13584:	cmp	r0, #1
   13588:	blt	135dc <error@@Base+0x8f4>
   1358c:	ldr	r5, [sp]
   13590:	mov	r6, r0
   13594:	mov	r0, #1
   13598:	mov	r1, #16
   1359c:	bl	127b0 <__assert_fail@plt+0x1a90>
   135a0:	str	r5, [r0, #12]
   135a4:	mov	r1, r0
   135a8:	strb	r9, [r0, #8]
   135ac:	mov	r0, sl
   135b0:	bl	13648 <error@@Base+0x960>
   135b4:	ldrb	r0, [r4, r6]!
   135b8:	cmp	r0, #0
   135bc:	bne	13574 <error@@Base+0x88c>
   135c0:	mov	r0, r7
   135c4:	sub	sp, fp, #28
   135c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135cc:	mov	r7, #1
   135d0:	mov	r0, r7
   135d4:	sub	sp, fp, #28
   135d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135dc:	mov	r7, #0
   135e0:	mov	r0, r7
   135e4:	sub	sp, fp, #28
   135e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135ec:	vmov.i32	q8, #0	; 0x00000000
   135f0:	vst1.32	{d16-d17}, [r0]
   135f4:	bx	lr
   135f8:	push	{r4, r5, fp, lr}
   135fc:	add	fp, sp, #8
   13600:	mov	r4, r0
   13604:	ldr	r0, [r0]
   13608:	mov	r5, #0
   1360c:	str	r5, [r1]
   13610:	cmp	r0, #0
   13614:	str	r0, [r1, #4]
   13618:	str	r1, [r4]
   1361c:	addeq	r0, r4, #4
   13620:	str	r1, [r0]
   13624:	ldr	r0, [r4, #8]
   13628:	cmp	r0, #0
   1362c:	beq	13638 <error@@Base+0x950>
   13630:	bl	10ba0 <free@plt>
   13634:	str	r5, [r4, #8]
   13638:	ldr	r0, [r4, #12]
   1363c:	add	r0, r0, #1
   13640:	str	r0, [r4, #12]
   13644:	pop	{r4, r5, fp, pc}
   13648:	push	{r4, r5, fp, lr}
   1364c:	add	fp, sp, #8
   13650:	mov	r4, r0
   13654:	ldr	r0, [r0, #4]
   13658:	mov	r5, #0
   1365c:	mov	r2, r4
   13660:	cmp	r0, #0
   13664:	stm	r1, {r0, r5}
   13668:	addne	r2, r0, #4
   1366c:	str	r1, [r2]
   13670:	str	r1, [r4, #4]
   13674:	ldr	r0, [r4, #8]
   13678:	cmp	r0, #0
   1367c:	beq	13688 <error@@Base+0x9a0>
   13680:	bl	10ba0 <free@plt>
   13684:	str	r5, [r4, #8]
   13688:	ldr	r0, [r4, #12]
   1368c:	add	r0, r0, #1
   13690:	str	r0, [r4, #12]
   13694:	pop	{r4, r5, fp, pc}
   13698:	push	{r4, sl, fp, lr}
   1369c:	add	fp, sp, #8
   136a0:	mov	r4, r0
   136a4:	ldr	r0, [r2]
   136a8:	mov	r3, r4
   136ac:	cmp	r0, #0
   136b0:	stm	r1, {r0, r2}
   136b4:	addne	r3, r0, #4
   136b8:	str	r1, [r3]
   136bc:	str	r1, [r2]
   136c0:	ldr	r0, [r4, #8]
   136c4:	cmp	r0, #0
   136c8:	beq	136d8 <error@@Base+0x9f0>
   136cc:	bl	10ba0 <free@plt>
   136d0:	mov	r0, #0
   136d4:	str	r0, [r4, #8]
   136d8:	ldr	r0, [r4, #12]
   136dc:	add	r0, r0, #1
   136e0:	str	r0, [r4, #12]
   136e4:	pop	{r4, sl, fp, pc}
   136e8:	push	{r4, sl, fp, lr}
   136ec:	add	fp, sp, #8
   136f0:	mov	r4, r0
   136f4:	mov	r0, r1
   136f8:	cmp	r1, #0
   136fc:	ldr	r3, [r0, #4]!
   13700:	moveq	r0, r4
   13704:	stm	r2, {r1, r3}
   13708:	str	r2, [r0]
   1370c:	cmp	r3, #0
   13710:	addeq	r3, r4, #4
   13714:	str	r2, [r3]
   13718:	ldr	r0, [r4, #8]
   1371c:	cmp	r0, #0
   13720:	beq	13730 <error@@Base+0xa48>
   13724:	bl	10ba0 <free@plt>
   13728:	mov	r0, #0
   1372c:	str	r0, [r4, #8]
   13730:	ldr	r0, [r4, #12]
   13734:	add	r0, r0, #1
   13738:	str	r0, [r4, #12]
   1373c:	pop	{r4, sl, fp, pc}
   13740:	push	{r4, r5, fp, lr}
   13744:	add	fp, sp, #8
   13748:	mov	r4, r0
   1374c:	ldm	r1, {r0, r2}
   13750:	cmp	r0, #0
   13754:	beq	13764 <error@@Base+0xa7c>
   13758:	str	r2, [r0, #4]
   1375c:	ldr	r2, [r1, #4]
   13760:	b	13768 <error@@Base+0xa80>
   13764:	str	r2, [r4]
   13768:	cmp	r2, #0
   1376c:	mov	r5, #0
   13770:	addeq	r2, r4, #4
   13774:	str	r0, [r2]
   13778:	str	r5, [r1]
   1377c:	str	r5, [r1, #4]
   13780:	ldr	r0, [r4, #8]
   13784:	cmp	r0, #0
   13788:	beq	13794 <error@@Base+0xaac>
   1378c:	bl	10ba0 <free@plt>
   13790:	str	r5, [r4, #8]
   13794:	ldr	r0, [r4, #12]
   13798:	sub	r0, r0, #1
   1379c:	str	r0, [r4, #12]
   137a0:	pop	{r4, r5, fp, pc}
   137a4:	push	{r4, sl, fp, lr}
   137a8:	add	fp, sp, #8
   137ac:	mov	r4, r0
   137b0:	ldr	r0, [r0, #8]
   137b4:	cmp	r0, #0
   137b8:	beq	137c0 <error@@Base+0xad8>
   137bc:	pop	{r4, sl, fp, pc}
   137c0:	ldr	r0, [r4, #12]
   137c4:	cmp	r0, #0
   137c8:	beq	137bc <error@@Base+0xad4>
   137cc:	mov	r1, #4
   137d0:	bl	127b0 <__assert_fail@plt+0x1a90>
   137d4:	str	r0, [r4, #8]
   137d8:	ldr	r1, [r4]
   137dc:	cmp	r1, #0
   137e0:	beq	137bc <error@@Base+0xad4>
   137e4:	str	r1, [r0]
   137e8:	ldr	r0, [r1, #4]
   137ec:	cmp	r0, #0
   137f0:	popeq	{r4, sl, fp, pc}
   137f4:	mov	r1, #4
   137f8:	ldr	r2, [r4, #8]
   137fc:	str	r0, [r2, r1]
   13800:	add	r1, r1, #4
   13804:	ldr	r0, [r0, #4]
   13808:	cmp	r0, #0
   1380c:	bne	137f8 <error@@Base+0xb10>
   13810:	b	137bc <error@@Base+0xad4>
   13814:	push	{r4, r5, r6, r7, fp, lr}
   13818:	add	fp, sp, #16
   1381c:	ldr	r6, [r0]
   13820:	cmp	r6, #0
   13824:	beq	138ac <error@@Base+0xbc4>
   13828:	mov	r4, r1
   1382c:	mov	r5, r0
   13830:	mov	r7, #0
   13834:	ldm	r6, {r0, r1}
   13838:	cmp	r0, #0
   1383c:	bne	13870 <error@@Base+0xb88>
   13840:	b	1387c <error@@Base+0xb94>
   13844:	ldr	r0, [r5, #12]
   13848:	sub	r0, r0, #1
   1384c:	str	r0, [r5, #12]
   13850:	mov	r0, r6
   13854:	blx	r4
   13858:	ldr	r6, [r5]
   1385c:	cmp	r6, #0
   13860:	beq	138ac <error@@Base+0xbc4>
   13864:	ldm	r6, {r0, r1}
   13868:	cmp	r0, #0
   1386c:	beq	1387c <error@@Base+0xb94>
   13870:	str	r1, [r0, #4]
   13874:	ldr	r1, [r6, #4]
   13878:	b	13880 <error@@Base+0xb98>
   1387c:	str	r1, [r5]
   13880:	cmp	r1, #0
   13884:	addeq	r1, r5, #4
   13888:	str	r0, [r1]
   1388c:	str	r7, [r6]
   13890:	str	r7, [r6, #4]
   13894:	ldr	r0, [r5, #8]
   13898:	cmp	r0, #0
   1389c:	beq	13844 <error@@Base+0xb5c>
   138a0:	bl	10ba0 <free@plt>
   138a4:	str	r7, [r5, #8]
   138a8:	b	13844 <error@@Base+0xb5c>
   138ac:	pop	{r4, r5, r6, r7, fp, pc}
   138b0:	cmp	r0, #2
   138b4:	bxlt	lr
   138b8:	movw	r3, #33096	; 0x8148
   138bc:	movt	r3, #2
   138c0:	stm	r3, {r1, r2}
   138c4:	sub	r1, r0, #1
   138c8:	mov	r0, #0
   138cc:	b	138d0 <error@@Base+0xbe8>
   138d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   138d4:	add	fp, sp, #24
   138d8:	movw	r7, #33096	; 0x8148
   138dc:	mov	r8, r1
   138e0:	mov	r9, r0
   138e4:	movt	r7, #2
   138e8:	b	13914 <error@@Base+0xc2c>
   138ec:	mov	r4, r5
   138f0:	ldr	r0, [r7]
   138f4:	sub	r1, r5, #1
   138f8:	str	r6, [r0, r5, lsl #2]
   138fc:	cmp	r1, r9
   13900:	movgt	r0, r9
   13904:	blgt	138d0 <error@@Base+0xbe8>
   13908:	add	r9, r4, #1
   1390c:	cmp	r9, r8
   13910:	bge	139e4 <error@@Base+0xcfc>
   13914:	ldr	r0, [r7]
   13918:	cmp	r9, r8
   1391c:	mov	r5, r8
   13920:	mov	r4, r9
   13924:	ldr	r6, [r0, r9, lsl #2]
   13928:	bge	138f4 <error@@Base+0xc0c>
   1392c:	mov	r4, r9
   13930:	mov	r5, r8
   13934:	cmp	r4, r5
   13938:	blt	13950 <error@@Base+0xc68>
   1393c:	b	13974 <error@@Base+0xc8c>
   13940:	cmp	r4, r5
   13944:	bge	138f0 <error@@Base+0xc08>
   13948:	cmp	r4, r5
   1394c:	bge	13974 <error@@Base+0xc8c>
   13950:	ldm	r7, {r0, r2}
   13954:	ldr	r1, [r0, r5, lsl #2]
   13958:	mov	r0, r6
   1395c:	blx	r2
   13960:	cmn	r0, #1
   13964:	bgt	13974 <error@@Base+0xc8c>
   13968:	sub	r5, r5, #1
   1396c:	cmp	r4, r5
   13970:	blt	13950 <error@@Base+0xc68>
   13974:	cmp	r4, r5
   13978:	bne	13988 <error@@Base+0xca0>
   1397c:	cmp	r4, r5
   13980:	blt	139a0 <error@@Base+0xcb8>
   13984:	b	139c8 <error@@Base+0xce0>
   13988:	ldr	r0, [r7]
   1398c:	ldr	r1, [r0, r5, lsl #2]
   13990:	str	r1, [r0, r4, lsl #2]
   13994:	add	r4, r4, #1
   13998:	cmp	r4, r5
   1399c:	bge	139c8 <error@@Base+0xce0>
   139a0:	ldm	r7, {r0, r2}
   139a4:	ldr	r1, [r0, r4, lsl #2]
   139a8:	mov	r0, r6
   139ac:	blx	r2
   139b0:	cmp	r0, #1
   139b4:	blt	139c8 <error@@Base+0xce0>
   139b8:	add	r4, r4, #1
   139bc:	cmp	r5, r4
   139c0:	bne	139a0 <error@@Base+0xcb8>
   139c4:	b	138ec <error@@Base+0xc04>
   139c8:	cmp	r4, r5
   139cc:	beq	13940 <error@@Base+0xc58>
   139d0:	ldr	r0, [r7]
   139d4:	ldr	r1, [r0, r4, lsl #2]
   139d8:	str	r1, [r0, r5, lsl #2]
   139dc:	sub	r5, r5, #1
   139e0:	b	13940 <error@@Base+0xc58>
   139e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   139e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   139ec:	mov	r7, r0
   139f0:	ldr	r6, [pc, #72]	; 13a40 <error@@Base+0xd58>
   139f4:	ldr	r5, [pc, #72]	; 13a44 <error@@Base+0xd5c>
   139f8:	add	r6, pc, r6
   139fc:	add	r5, pc, r5
   13a00:	sub	r6, r6, r5
   13a04:	mov	r8, r1
   13a08:	mov	r9, r2
   13a0c:	bl	10b44 <calloc@plt-0x20>
   13a10:	asrs	r6, r6, #2
   13a14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a18:	mov	r4, #0
   13a1c:	add	r4, r4, #1
   13a20:	ldr	r3, [r5], #4
   13a24:	mov	r2, r9
   13a28:	mov	r1, r8
   13a2c:	mov	r0, r7
   13a30:	blx	r3
   13a34:	cmp	r6, r4
   13a38:	bne	13a1c <error@@Base+0xd34>
   13a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a40:	strdeq	r4, [r1], -ip
   13a44:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13a48:	bx	lr

Disassembly of section .fini:

00013a4c <.fini>:
   13a4c:	push	{r3, lr}
   13a50:	pop	{r3, pc}
