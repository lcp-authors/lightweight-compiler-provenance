
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010c24 <.init>:
   10c24:	push	{r3, lr}
   10c28:	bl	10e90 <__assert_fail@plt+0x48>
   10c2c:	pop	{r3, pc}

Disassembly of section .plt:

00010c30 <calloc@plt-0x14>:
   10c30:	push	{lr}		; (str lr, [sp, #-4]!)
   10c34:	ldr	lr, [pc, #4]	; 10c40 <calloc@plt-0x4>
   10c38:	add	lr, pc, lr
   10c3c:	ldr	pc, [lr, #8]!
   10c40:	andeq	r5, r1, r0, asr #7

00010c44 <calloc@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #86016	; 0x15000
   10c4c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c50 <fputs_unlocked@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #86016	; 0x15000
   10c58:	ldr	pc, [ip, #952]!	; 0x3b8

00010c5c <strcmp@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #86016	; 0x15000
   10c64:	ldr	pc, [ip, #944]!	; 0x3b0

00010c68 <fflush@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #86016	; 0x15000
   10c70:	ldr	pc, [ip, #936]!	; 0x3a8

00010c74 <free@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #86016	; 0x15000
   10c7c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c80 <_exit@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #86016	; 0x15000
   10c88:	ldr	pc, [ip, #920]!	; 0x398

00010c8c <memcpy@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #86016	; 0x15000
   10c94:	ldr	pc, [ip, #912]!	; 0x390

00010c98 <mbsinit@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #86016	; 0x15000
   10ca0:	ldr	pc, [ip, #904]!	; 0x388

00010ca4 <dcgettext@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #86016	; 0x15000
   10cac:	ldr	pc, [ip, #896]!	; 0x380

00010cb0 <realloc@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #86016	; 0x15000
   10cb8:	ldr	pc, [ip, #888]!	; 0x378

00010cbc <textdomain@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #86016	; 0x15000
   10cc4:	ldr	pc, [ip, #880]!	; 0x370

00010cc8 <iswprint@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #86016	; 0x15000
   10cd0:	ldr	pc, [ip, #872]!	; 0x368

00010cd4 <fwrite@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #864]!	; 0x360

00010ce0 <lseek64@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #856]!	; 0x358

00010cec <__ctype_get_mb_cur_max@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #848]!	; 0x350

00010cf8 <__fpending@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #840]!	; 0x348

00010d04 <ferror_unlocked@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #832]!	; 0x340

00010d10 <mbrtowc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #824]!	; 0x338

00010d1c <error@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #816]!	; 0x330

00010d28 <getenv@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #808]!	; 0x328

00010d34 <malloc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #800]!	; 0x320

00010d40 <__libc_start_main@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #792]!	; 0x318

00010d4c <__freading@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #784]!	; 0x310

00010d58 <__gmon_start__@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #776]!	; 0x308

00010d64 <__ctype_b_loc@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #768]!	; 0x300

00010d70 <exit@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #760]!	; 0x2f8

00010d7c <bcmp@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #752]!	; 0x2f0

00010d88 <strlen@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #744]!	; 0x2e8

00010d94 <__errno_location@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #736]!	; 0x2e0

00010da0 <__cxa_atexit@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #728]!	; 0x2d8

00010dac <memset@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #720]!	; 0x2d0

00010db8 <__printf_chk@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc4 <fileno@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd0 <__fprintf_chk@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #696]!	; 0x2b8

00010ddc <fclose@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #688]!	; 0x2b0

00010de8 <fseeko64@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #680]!	; 0x2a8

00010df4 <setlocale@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #672]!	; 0x2a0

00010e00 <strrchr@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #664]!	; 0x298

00010e0c <nl_langinfo@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #656]!	; 0x290

00010e18 <bindtextdomain@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #648]!	; 0x288

00010e24 <strncmp@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #640]!	; 0x280

00010e30 <abort@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #632]!	; 0x278

00010e3c <putchar_unlocked@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #624]!	; 0x270

00010e48 <__assert_fail@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #616]!	; 0x268

Disassembly of section .text:

00010e54 <.text>:
   10e54:	mov	fp, #0
   10e58:	mov	lr, #0
   10e5c:	pop	{r1}		; (ldr r1, [sp], #4)
   10e60:	mov	r2, sp
   10e64:	push	{r2}		; (str r2, [sp, #-4]!)
   10e68:	push	{r0}		; (str r0, [sp, #-4]!)
   10e6c:	ldr	ip, [pc, #16]	; 10e84 <__assert_fail@plt+0x3c>
   10e70:	push	{ip}		; (str ip, [sp, #-4]!)
   10e74:	ldr	r0, [pc, #12]	; 10e88 <__assert_fail@plt+0x40>
   10e78:	ldr	r3, [pc, #12]	; 10e8c <__assert_fail@plt+0x44>
   10e7c:	bl	10d40 <__libc_start_main@plt>
   10e80:	bl	10e30 <abort@plt>
   10e84:	andeq	r4, r1, r8, lsl #14
   10e88:	andeq	r1, r1, r8, asr #4
   10e8c:	andeq	r4, r1, r8, lsr #13
   10e90:	ldr	r3, [pc, #20]	; 10eac <__assert_fail@plt+0x64>
   10e94:	ldr	r2, [pc, #20]	; 10eb0 <__assert_fail@plt+0x68>
   10e98:	add	r3, pc, r3
   10e9c:	ldr	r2, [r3, r2]
   10ea0:	cmp	r2, #0
   10ea4:	bxeq	lr
   10ea8:	b	10d58 <__gmon_start__@plt>
   10eac:	andeq	r5, r1, r0, ror #2
   10eb0:	strheq	r0, [r0], -ip
   10eb4:	ldr	r0, [pc, #24]	; 10ed4 <__assert_fail@plt+0x8c>
   10eb8:	ldr	r3, [pc, #24]	; 10ed8 <__assert_fail@plt+0x90>
   10ebc:	cmp	r3, r0
   10ec0:	bxeq	lr
   10ec4:	ldr	r3, [pc, #16]	; 10edc <__assert_fail@plt+0x94>
   10ec8:	cmp	r3, #0
   10ecc:	bxeq	lr
   10ed0:	bx	r3
   10ed4:	andeq	r6, r2, r0, lsl r1
   10ed8:	andeq	r6, r2, r0, lsl r1
   10edc:	andeq	r0, r0, r0
   10ee0:	ldr	r0, [pc, #36]	; 10f0c <__assert_fail@plt+0xc4>
   10ee4:	ldr	r1, [pc, #36]	; 10f10 <__assert_fail@plt+0xc8>
   10ee8:	sub	r1, r1, r0
   10eec:	asr	r1, r1, #2
   10ef0:	add	r1, r1, r1, lsr #31
   10ef4:	asrs	r1, r1, #1
   10ef8:	bxeq	lr
   10efc:	ldr	r3, [pc, #16]	; 10f14 <__assert_fail@plt+0xcc>
   10f00:	cmp	r3, #0
   10f04:	bxeq	lr
   10f08:	bx	r3
   10f0c:	andeq	r6, r2, r0, lsl r1
   10f10:	andeq	r6, r2, r0, lsl r1
   10f14:	andeq	r0, r0, r0
   10f18:	push	{r4, lr}
   10f1c:	ldr	r4, [pc, #24]	; 10f3c <__assert_fail@plt+0xf4>
   10f20:	ldrb	r3, [r4]
   10f24:	cmp	r3, #0
   10f28:	popne	{r4, pc}
   10f2c:	bl	10eb4 <__assert_fail@plt+0x6c>
   10f30:	mov	r3, #1
   10f34:	strb	r3, [r4]
   10f38:	pop	{r4, pc}
   10f3c:	andeq	r6, r2, r0, lsr #2
   10f40:	b	10ee0 <__assert_fail@plt+0x98>
   10f44:	push	{fp, lr}
   10f48:	mov	fp, sp
   10f4c:	cmp	r0, #0
   10f50:	bne	110a0 <__assert_fail@plt+0x258>
   10f54:	movw	r1, #18278	; 0x4766
   10f58:	movt	r1, #1
   10f5c:	mov	r0, #0
   10f60:	mov	r2, #5
   10f64:	bl	10ca4 <dcgettext@plt>
   10f68:	mov	r1, r0
   10f6c:	movw	r0, #24876	; 0x612c
   10f70:	movt	r0, #2
   10f74:	ldr	r2, [r0]
   10f78:	mov	r0, #1
   10f7c:	mov	r3, r2
   10f80:	bl	10db8 <__printf_chk@plt>
   10f84:	movw	r1, #18341	; 0x47a5
   10f88:	movt	r1, #1
   10f8c:	mov	r0, #0
   10f90:	mov	r2, #5
   10f94:	bl	10ca4 <dcgettext@plt>
   10f98:	movw	r4, #24860	; 0x611c
   10f9c:	movt	r4, #2
   10fa0:	ldr	r1, [r4]
   10fa4:	bl	10c50 <fputs_unlocked@plt>
   10fa8:	movw	r1, #18434	; 0x4802
   10fac:	movt	r1, #1
   10fb0:	mov	r0, #0
   10fb4:	mov	r2, #5
   10fb8:	bl	10ca4 <dcgettext@plt>
   10fbc:	ldr	r1, [r4]
   10fc0:	bl	10c50 <fputs_unlocked@plt>
   10fc4:	movw	r1, #18566	; 0x4886
   10fc8:	movt	r1, #1
   10fcc:	mov	r0, #0
   10fd0:	mov	r2, #5
   10fd4:	bl	10ca4 <dcgettext@plt>
   10fd8:	ldr	r1, [r4]
   10fdc:	bl	10c50 <fputs_unlocked@plt>
   10fe0:	movw	r1, #18611	; 0x48b3
   10fe4:	movt	r1, #1
   10fe8:	mov	r0, #0
   10fec:	mov	r2, #5
   10ff0:	bl	10ca4 <dcgettext@plt>
   10ff4:	ldr	r1, [r4]
   10ff8:	bl	10c50 <fputs_unlocked@plt>
   10ffc:	movw	r1, #18665	; 0x48e9
   11000:	movt	r1, #1
   11004:	mov	r0, #0
   11008:	mov	r2, #5
   1100c:	bl	10ca4 <dcgettext@plt>
   11010:	ldr	r1, [r4]
   11014:	bl	10c50 <fputs_unlocked@plt>
   11018:	movw	r1, #18728	; 0x4928
   1101c:	movt	r1, #1
   11020:	mov	r0, #0
   11024:	mov	r2, #5
   11028:	bl	10ca4 <dcgettext@plt>
   1102c:	ldr	r1, [r4]
   11030:	bl	10c50 <fputs_unlocked@plt>
   11034:	movw	r1, #18957	; 0x4a0d
   11038:	movt	r1, #1
   1103c:	mov	r0, #0
   11040:	mov	r2, #5
   11044:	bl	10ca4 <dcgettext@plt>
   11048:	ldr	r1, [r4]
   1104c:	bl	10c50 <fputs_unlocked@plt>
   11050:	movw	r1, #19067	; 0x4a7b
   11054:	movt	r1, #1
   11058:	mov	r0, #0
   1105c:	mov	r2, #5
   11060:	bl	10ca4 <dcgettext@plt>
   11064:	mov	r1, r0
   11068:	movw	r2, #19258	; 0x4b3a
   1106c:	movt	r2, #1
   11070:	mov	r0, #1
   11074:	bl	10db8 <__printf_chk@plt>
   11078:	movw	r1, #19263	; 0x4b3f
   1107c:	movt	r1, #1
   11080:	mov	r0, #0
   11084:	mov	r2, #5
   11088:	bl	10ca4 <dcgettext@plt>
   1108c:	ldr	r1, [r4]
   11090:	bl	10c50 <fputs_unlocked@plt>
   11094:	bl	110c0 <__assert_fail@plt+0x278>
   11098:	mov	r0, #0
   1109c:	bl	10d70 <exit@plt>
   110a0:	movw	r0, #18228	; 0x4734
   110a4:	movt	r0, #1
   110a8:	movw	r1, #18251	; 0x474b
   110ac:	movt	r1, #1
   110b0:	movw	r3, #18262	; 0x4756
   110b4:	movt	r3, #1
   110b8:	mov	r2, #40	; 0x28
   110bc:	bl	10e48 <__assert_fail@plt>
   110c0:	push	{r4, r5, r6, sl, fp, lr}
   110c4:	add	fp, sp, #16
   110c8:	sub	sp, sp, #56	; 0x38
   110cc:	movw	r0, #19776	; 0x4d40
   110d0:	movt	r0, #1
   110d4:	add	r1, r0, #32
   110d8:	mov	r2, #48	; 0x30
   110dc:	vld1.64	{d16-d17}, [r1]
   110e0:	mov	r6, sp
   110e4:	add	r1, r6, #32
   110e8:	add	r3, r0, #16
   110ec:	vld1.64	{d18-d19}, [r0], r2
   110f0:	vld1.64	{d20-d21}, [r3]
   110f4:	vldr	d22, [r0]
   110f8:	vst1.64	{d16-d17}, [r1]
   110fc:	add	r0, r6, #16
   11100:	vst1.64	{d20-d21}, [r0]
   11104:	mov	r0, r6
   11108:	vst1.64	{d18-d19}, [r0], r2
   1110c:	vstr	d22, [r0]
   11110:	ldr	r1, [sp]
   11114:	cmp	r1, #0
   11118:	movw	r4, #19258	; 0x4b3a
   1111c:	movt	r4, #1
   11120:	beq	11148 <__assert_fail@plt+0x300>
   11124:	mov	r6, sp
   11128:	movw	r5, #19258	; 0x4b3a
   1112c:	movt	r5, #1
   11130:	mov	r0, r5
   11134:	bl	10c5c <strcmp@plt>
   11138:	cmp	r0, #0
   1113c:	ldrne	r1, [r6, #8]!
   11140:	cmpne	r1, #0
   11144:	bne	11130 <__assert_fail@plt+0x2e8>
   11148:	ldr	r5, [r6, #4]
   1114c:	movw	r1, #19558	; 0x4c66
   11150:	movt	r1, #1
   11154:	mov	r0, #0
   11158:	mov	r2, #5
   1115c:	bl	10ca4 <dcgettext@plt>
   11160:	mov	r1, r0
   11164:	movw	r2, #19428	; 0x4be4
   11168:	movt	r2, #1
   1116c:	movw	r3, #19581	; 0x4c7d
   11170:	movt	r3, #1
   11174:	mov	r0, #1
   11178:	bl	10db8 <__printf_chk@plt>
   1117c:	cmp	r5, #0
   11180:	moveq	r5, r4
   11184:	mov	r0, #5
   11188:	mov	r1, #0
   1118c:	bl	10df4 <setlocale@plt>
   11190:	cmp	r0, #0
   11194:	beq	111d4 <__assert_fail@plt+0x38c>
   11198:	movw	r1, #19621	; 0x4ca5
   1119c:	movt	r1, #1
   111a0:	mov	r2, #3
   111a4:	bl	10e24 <strncmp@plt>
   111a8:	cmp	r0, #0
   111ac:	beq	111d4 <__assert_fail@plt+0x38c>
   111b0:	movw	r1, #19625	; 0x4ca9
   111b4:	movt	r1, #1
   111b8:	mov	r0, #0
   111bc:	mov	r2, #5
   111c0:	bl	10ca4 <dcgettext@plt>
   111c4:	movw	r1, #24860	; 0x611c
   111c8:	movt	r1, #2
   111cc:	ldr	r1, [r1]
   111d0:	bl	10c50 <fputs_unlocked@plt>
   111d4:	movw	r1, #19696	; 0x4cf0
   111d8:	movt	r1, #1
   111dc:	mov	r0, #0
   111e0:	mov	r2, #5
   111e4:	bl	10ca4 <dcgettext@plt>
   111e8:	mov	r1, r0
   111ec:	movw	r2, #19581	; 0x4c7d
   111f0:	movt	r2, #1
   111f4:	mov	r0, #1
   111f8:	mov	r3, r4
   111fc:	bl	10db8 <__printf_chk@plt>
   11200:	movw	r0, #19491	; 0x4c23
   11204:	movt	r0, #1
   11208:	movw	r6, #18727	; 0x4927
   1120c:	movt	r6, #1
   11210:	cmp	r5, r4
   11214:	moveq	r6, r0
   11218:	movw	r1, #19723	; 0x4d0b
   1121c:	movt	r1, #1
   11220:	mov	r0, #0
   11224:	mov	r2, #5
   11228:	bl	10ca4 <dcgettext@plt>
   1122c:	mov	r1, r0
   11230:	mov	r0, #1
   11234:	mov	r2, r5
   11238:	mov	r3, r6
   1123c:	sub	sp, fp, #16
   11240:	pop	{r4, r5, r6, sl, fp, lr}
   11244:	b	10db8 <__printf_chk@plt>
   11248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1124c:	add	fp, sp, #28
   11250:	sub	sp, sp, #20
   11254:	mov	r5, r1
   11258:	mov	r6, r0
   1125c:	movw	r0, #19368	; 0x4ba8
   11260:	movt	r0, #1
   11264:	bl	10d28 <getenv@plt>
   11268:	mov	sl, r0
   1126c:	cmp	r0, #0
   11270:	beq	1129c <__assert_fail@plt+0x454>
   11274:	mov	r4, #0
   11278:	cmp	r6, #2
   1127c:	blt	112a0 <__assert_fail@plt+0x458>
   11280:	ldr	r0, [r5, #4]
   11284:	movw	r1, #19384	; 0x4bb8
   11288:	movt	r1, #1
   1128c:	bl	10c5c <strcmp@plt>
   11290:	clz	r0, r0
   11294:	lsr	r4, r0, #5
   11298:	b	112a0 <__assert_fail@plt+0x458>
   1129c:	mov	r4, #1
   112a0:	ldr	r0, [r5]
   112a4:	bl	11978 <__assert_fail@plt+0xb30>
   112a8:	movw	r1, #18727	; 0x4927
   112ac:	movt	r1, #1
   112b0:	mov	r0, #6
   112b4:	bl	10df4 <setlocale@plt>
   112b8:	movw	r7, #19432	; 0x4be8
   112bc:	movt	r7, #1
   112c0:	movw	r1, #19387	; 0x4bbb
   112c4:	movt	r1, #1
   112c8:	mov	r0, r7
   112cc:	bl	10e18 <bindtextdomain@plt>
   112d0:	mov	r0, r7
   112d4:	bl	10cbc <textdomain@plt>
   112d8:	movw	r0, #6288	; 0x1890
   112dc:	movt	r0, #1
   112e0:	bl	1470c <__assert_fail@plt+0x38c4>
   112e4:	cmp	r6, #2
   112e8:	bne	11328 <__assert_fail@plt+0x4e0>
   112ec:	cmp	r4, #0
   112f0:	beq	11328 <__assert_fail@plt+0x4e0>
   112f4:	ldr	r7, [r5, #4]
   112f8:	movw	r1, #19411	; 0x4bd3
   112fc:	movt	r1, #1
   11300:	mov	r0, r7
   11304:	bl	10c5c <strcmp@plt>
   11308:	cmp	r0, #0
   1130c:	beq	11784 <__assert_fail@plt+0x93c>
   11310:	movw	r1, #19418	; 0x4bda
   11314:	movt	r1, #1
   11318:	mov	r0, r7
   1131c:	bl	10c5c <strcmp@plt>
   11320:	cmp	r0, #0
   11324:	beq	1172c <__assert_fail@plt+0x8e4>
   11328:	sub	r8, r6, #1
   1132c:	mov	r3, #0
   11330:	cmp	r8, #1
   11334:	mov	r0, #0
   11338:	movwlt	r0, #1
   1133c:	eor	r1, r4, #1
   11340:	orrs	r0, r1, r0
   11344:	add	r9, r5, #4
   11348:	mov	r6, #1
   1134c:	bne	11428 <__assert_fail@plt+0x5e0>
   11350:	ldr	r2, [r9]
   11354:	ldrb	r0, [r2]
   11358:	cmp	r0, #45	; 0x2d
   1135c:	bne	11428 <__assert_fail@plt+0x5e0>
   11360:	mov	r1, #0
   11364:	mov	r0, #1
   11368:	add	r3, r2, #1
   1136c:	mov	r7, #0
   11370:	b	11384 <__assert_fail@plt+0x53c>
   11374:	cmp	r6, #110	; 0x6e
   11378:	cmpne	r6, #101	; 0x65
   1137c:	bne	11420 <__assert_fail@plt+0x5d8>
   11380:	sub	r7, r7, #1
   11384:	ldrb	r6, [r3, -r7]
   11388:	cmp	r6, #100	; 0x64
   1138c:	bgt	11374 <__assert_fail@plt+0x52c>
   11390:	cmp	r6, #69	; 0x45
   11394:	beq	11380 <__assert_fail@plt+0x538>
   11398:	cmp	r6, #0
   1139c:	bne	11420 <__assert_fail@plt+0x5d8>
   113a0:	cmp	r7, #0
   113a4:	beq	11420 <__assert_fail@plt+0x5d8>
   113a8:	ldrb	r3, [r3]
   113ac:	cmp	r3, #0
   113b0:	beq	113f4 <__assert_fail@plt+0x5ac>
   113b4:	add	r2, r2, #2
   113b8:	b	113cc <__assert_fail@plt+0x584>
   113bc:	mov	r0, #0
   113c0:	ldrb	r3, [r2], #1
   113c4:	cmp	r3, #0
   113c8:	beq	113f4 <__assert_fail@plt+0x5ac>
   113cc:	uxtb	r3, r3
   113d0:	cmp	r3, #69	; 0x45
   113d4:	beq	113ec <__assert_fail@plt+0x5a4>
   113d8:	cmp	r3, #110	; 0x6e
   113dc:	beq	113bc <__assert_fail@plt+0x574>
   113e0:	cmp	r3, #101	; 0x65
   113e4:	moveq	r1, #1
   113e8:	b	113c0 <__assert_fail@plt+0x578>
   113ec:	mov	r1, #0
   113f0:	b	113c0 <__assert_fail@plt+0x578>
   113f4:	and	r3, r1, #1
   113f8:	and	r6, r0, #1
   113fc:	add	r9, r9, #4
   11400:	sub	r8, r8, #1
   11404:	cmp	r8, #0
   11408:	ble	11428 <__assert_fail@plt+0x5e0>
   1140c:	ldr	r2, [r9]
   11410:	ldrb	r7, [r2]
   11414:	cmp	r7, #45	; 0x2d
   11418:	beq	11368 <__assert_fail@plt+0x520>
   1141c:	b	11428 <__assert_fail@plt+0x5e0>
   11420:	and	r3, r1, #1
   11424:	and	r6, r0, #1
   11428:	str	r6, [sp, #16]
   1142c:	cmp	sl, #0
   11430:	cmpeq	r3, #0
   11434:	beq	116c8 <__assert_fail@plt+0x880>
   11438:	cmp	r8, #1
   1143c:	blt	11714 <__assert_fail@plt+0x8cc>
   11440:	ldr	r7, [r9]
   11444:	b	11458 <__assert_fail@plt+0x610>
   11448:	cmp	r4, #0
   1144c:	beq	116ac <__assert_fail@plt+0x864>
   11450:	uxtb	r0, r4
   11454:	bl	10e3c <putchar_unlocked@plt>
   11458:	mov	r6, r7
   1145c:	ldrb	r4, [r7], #1
   11460:	cmp	r4, #92	; 0x5c
   11464:	bne	11448 <__assert_fail@plt+0x600>
   11468:	ldrb	r4, [r7]
   1146c:	cmp	r4, #0
   11470:	beq	115e8 <__assert_fail@plt+0x7a0>
   11474:	add	r7, r6, #2
   11478:	sub	r0, r4, #48	; 0x30
   1147c:	cmp	r0, #72	; 0x48
   11480:	bhi	11664 <__assert_fail@plt+0x81c>
   11484:	add	r1, pc, #0
   11488:	ldr	pc, [r1, r0, lsl #2]
   1148c:	andeq	r1, r1, r8, lsl r6
   11490:			; <UNDEFINED> instruction: 0x000115b0
   11494:			; <UNDEFINED> instruction: 0x000115b0
   11498:			; <UNDEFINED> instruction: 0x000115b0
   1149c:			; <UNDEFINED> instruction: 0x000115b0
   114a0:			; <UNDEFINED> instruction: 0x000115b0
   114a4:			; <UNDEFINED> instruction: 0x000115b0
   114a8:			; <UNDEFINED> instruction: 0x000115b0
   114ac:	andeq	r1, r1, r4, ror #12
   114b0:	andeq	r1, r1, r4, ror #12
   114b4:	andeq	r1, r1, r4, ror #12
   114b8:	andeq	r1, r1, r4, ror #12
   114bc:	andeq	r1, r1, r4, ror #12
   114c0:	andeq	r1, r1, r4, ror #12
   114c4:	andeq	r1, r1, r4, ror #12
   114c8:	andeq	r1, r1, r4, ror #12
   114cc:	andeq	r1, r1, r4, ror #12
   114d0:	andeq	r1, r1, r4, ror #12
   114d4:	andeq	r1, r1, r4, ror #12
   114d8:	andeq	r1, r1, r4, ror #12
   114dc:	andeq	r1, r1, r4, ror #12
   114e0:	andeq	r1, r1, r4, ror #12
   114e4:	andeq	r1, r1, r4, ror #12
   114e8:	andeq	r1, r1, r4, ror #12
   114ec:	andeq	r1, r1, r4, ror #12
   114f0:	andeq	r1, r1, r4, ror #12
   114f4:	andeq	r1, r1, r4, ror #12
   114f8:	andeq	r1, r1, r4, ror #12
   114fc:	andeq	r1, r1, r4, ror #12
   11500:	andeq	r1, r1, r4, ror #12
   11504:	andeq	r1, r1, r4, ror #12
   11508:	andeq	r1, r1, r4, ror #12
   1150c:	andeq	r1, r1, r4, ror #12
   11510:	andeq	r1, r1, r4, ror #12
   11514:	andeq	r1, r1, r4, ror #12
   11518:	andeq	r1, r1, r4, ror #12
   1151c:	andeq	r1, r1, r4, ror #12
   11520:	andeq	r1, r1, r4, ror #12
   11524:	andeq	r1, r1, r4, ror #12
   11528:	andeq	r1, r1, r4, ror #12
   1152c:	andeq	r1, r1, r4, ror #12
   11530:	andeq	r1, r1, r4, ror #12
   11534:	andeq	r1, r1, r4, ror #12
   11538:	andeq	r1, r1, r4, ror #12
   1153c:	andeq	r1, r1, r0, asr r4
   11540:	andeq	r1, r1, r4, ror #12
   11544:	andeq	r1, r1, r4, ror #12
   11548:	andeq	r1, r1, r4, ror #12
   1154c:	andeq	r1, r1, r4, ror #12
   11550:	andeq	r1, r1, r0, asr #12
   11554:	andeq	r1, r1, r8, lsl #12
   11558:	andeq	r1, r1, r8, ror r7
   1155c:	andeq	r1, r1, r4, ror #12
   11560:	andeq	r1, r1, r0, lsl #12
   11564:	strdeq	r1, [r1], -r8
   11568:	andeq	r1, r1, r4, ror #12
   1156c:	andeq	r1, r1, r4, ror #12
   11570:	andeq	r1, r1, r4, ror #12
   11574:	andeq	r1, r1, r4, ror #12
   11578:	andeq	r1, r1, r4, ror #12
   1157c:	andeq	r1, r1, r4, ror #12
   11580:	andeq	r1, r1, r4, ror #12
   11584:	strdeq	r1, [r1], -r0
   11588:	andeq	r1, r1, r4, ror #12
   1158c:	andeq	r1, r1, r4, ror #12
   11590:	andeq	r1, r1, r4, ror #12
   11594:	andeq	r1, r1, r0, ror r6
   11598:	andeq	r1, r1, r4, ror #12
   1159c:	andeq	r1, r1, r8, lsr r6
   115a0:	andeq	r1, r1, r4, ror #12
   115a4:	andeq	r1, r1, r0, lsl r6
   115a8:	andeq	r1, r1, r4, ror #12
   115ac:	andeq	r1, r1, r8, asr #12
   115b0:	sub	r4, r4, #48	; 0x30
   115b4:	ldrb	r0, [r7]
   115b8:	and	r1, r0, #248	; 0xf8
   115bc:	cmp	r1, #48	; 0x30
   115c0:	addeq	r0, r0, r4, lsl #3
   115c4:	subeq	r4, r0, #48	; 0x30
   115c8:	addeq	r7, r7, #1
   115cc:	ldrb	r0, [r7]
   115d0:	and	r1, r0, #248	; 0xf8
   115d4:	cmp	r1, #48	; 0x30
   115d8:	addeq	r0, r0, r4, lsl #3
   115dc:	subeq	r4, r0, #48	; 0x30
   115e0:	addeq	r7, r7, #1
   115e4:	b	11450 <__assert_fail@plt+0x608>
   115e8:	mov	r4, #92	; 0x5c
   115ec:	b	11450 <__assert_fail@plt+0x608>
   115f0:	mov	r4, #10
   115f4:	b	11450 <__assert_fail@plt+0x608>
   115f8:	mov	r4, #12
   115fc:	b	11450 <__assert_fail@plt+0x608>
   11600:	mov	r4, #27
   11604:	b	11450 <__assert_fail@plt+0x608>
   11608:	mov	r4, #8
   1160c:	b	11450 <__assert_fail@plt+0x608>
   11610:	mov	r4, #11
   11614:	b	11450 <__assert_fail@plt+0x608>
   11618:	ldrb	r0, [r7]
   1161c:	and	r1, r0, #248	; 0xf8
   11620:	mov	r4, #0
   11624:	cmp	r1, #48	; 0x30
   11628:	bne	11450 <__assert_fail@plt+0x608>
   1162c:	add	r7, r6, #3
   11630:	mov	r4, r0
   11634:	b	115b0 <__assert_fail@plt+0x768>
   11638:	mov	r4, #9
   1163c:	b	11450 <__assert_fail@plt+0x608>
   11640:	mov	r4, #7
   11644:	b	11450 <__assert_fail@plt+0x608>
   11648:	ldrb	r5, [r7]
   1164c:	bl	10d64 <__ctype_b_loc@plt>
   11650:	ldr	sl, [r0]
   11654:	add	r0, sl, r5, lsl #1
   11658:	ldrb	r0, [r0, #1]
   1165c:	tst	r0, #16
   11660:	bne	11678 <__assert_fail@plt+0x830>
   11664:	mov	r0, #92	; 0x5c
   11668:	bl	10e3c <putchar_unlocked@plt>
   1166c:	b	11450 <__assert_fail@plt+0x608>
   11670:	mov	r4, #13
   11674:	b	11450 <__assert_fail@plt+0x608>
   11678:	mov	r0, r5
   1167c:	bl	1178c <__assert_fail@plt+0x944>
   11680:	mov	r4, r0
   11684:	mov	r7, r6
   11688:	ldrb	r0, [r7, #3]!
   1168c:	add	r1, sl, r0, lsl #1
   11690:	ldrb	r1, [r1, #1]
   11694:	tst	r1, #16
   11698:	beq	11450 <__assert_fail@plt+0x608>
   1169c:	bl	1178c <__assert_fail@plt+0x944>
   116a0:	add	r4, r0, r4, lsl #4
   116a4:	add	r7, r6, #4
   116a8:	b	11450 <__assert_fail@plt+0x608>
   116ac:	sub	r8, r8, #1
   116b0:	cmp	r8, #1
   116b4:	blt	11714 <__assert_fail@plt+0x8cc>
   116b8:	mov	r0, #32
   116bc:	bl	10e3c <putchar_unlocked@plt>
   116c0:	add	r9, r9, #4
   116c4:	b	11440 <__assert_fail@plt+0x5f8>
   116c8:	cmp	r8, #1
   116cc:	blt	11714 <__assert_fail@plt+0x8cc>
   116d0:	movw	r4, #24860	; 0x611c
   116d4:	movt	r4, #2
   116d8:	ldr	r1, [r4]
   116dc:	ldr	r0, [r9]
   116e0:	bl	10c50 <fputs_unlocked@plt>
   116e4:	sub	r5, r8, #1
   116e8:	cmp	r5, #1
   116ec:	blt	11714 <__assert_fail@plt+0x8cc>
   116f0:	add	r6, r9, #4
   116f4:	mov	r0, #32
   116f8:	bl	10e3c <putchar_unlocked@plt>
   116fc:	ldr	r0, [r6], #4
   11700:	ldr	r1, [r4]
   11704:	bl	10c50 <fputs_unlocked@plt>
   11708:	sub	r5, r5, #1
   1170c:	cmp	r5, #0
   11710:	bgt	116f4 <__assert_fail@plt+0x8ac>
   11714:	ldr	r0, [sp, #16]
   11718:	cmp	r0, #0
   1171c:	beq	11778 <__assert_fail@plt+0x930>
   11720:	mov	r0, #10
   11724:	bl	10e3c <putchar_unlocked@plt>
   11728:	b	11778 <__assert_fail@plt+0x930>
   1172c:	movw	r0, #24776	; 0x60c8
   11730:	movt	r0, #2
   11734:	ldr	r3, [r0]
   11738:	movw	r0, #24860	; 0x611c
   1173c:	movt	r0, #2
   11740:	ldr	r0, [r0]
   11744:	mov	r1, #0
   11748:	movw	r2, #19452	; 0x4bfc
   1174c:	movt	r2, #1
   11750:	movw	r7, #19442	; 0x4bf2
   11754:	movt	r7, #1
   11758:	str	r7, [sp]
   1175c:	str	r2, [sp, #4]
   11760:	str	r1, [sp, #8]
   11764:	movw	r1, #19258	; 0x4b3a
   11768:	movt	r1, #1
   1176c:	movw	r2, #19428	; 0x4be4
   11770:	movt	r2, #1
   11774:	bl	13944 <__assert_fail@plt+0x2afc>
   11778:	mov	r0, #0
   1177c:	sub	sp, fp, #28
   11780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11784:	mov	r0, #0
   11788:	bl	10f44 <__assert_fail@plt+0xfc>
   1178c:	mov	r1, r0
   11790:	sub	r2, r0, #65	; 0x41
   11794:	cmp	r2, #37	; 0x25
   11798:	bhi	11868 <__assert_fail@plt+0xa20>
   1179c:	mov	r0, #10
   117a0:	add	r3, pc, #0
   117a4:	ldr	pc, [r3, r2, lsl #2]
   117a8:	andeq	r1, r1, r4, ror #16
   117ac:	andeq	r1, r1, r0, asr #16
   117b0:	andeq	r1, r1, r8, asr #16
   117b4:	andeq	r1, r1, r0, asr r8
   117b8:	andeq	r1, r1, r8, asr r8
   117bc:	andeq	r1, r1, r0, ror #16
   117c0:	andeq	r1, r1, r8, ror #16
   117c4:	andeq	r1, r1, r8, ror #16
   117c8:	andeq	r1, r1, r8, ror #16
   117cc:	andeq	r1, r1, r8, ror #16
   117d0:	andeq	r1, r1, r8, ror #16
   117d4:	andeq	r1, r1, r8, ror #16
   117d8:	andeq	r1, r1, r8, ror #16
   117dc:	andeq	r1, r1, r8, ror #16
   117e0:	andeq	r1, r1, r8, ror #16
   117e4:	andeq	r1, r1, r8, ror #16
   117e8:	andeq	r1, r1, r8, ror #16
   117ec:	andeq	r1, r1, r8, ror #16
   117f0:	andeq	r1, r1, r8, ror #16
   117f4:	andeq	r1, r1, r8, ror #16
   117f8:	andeq	r1, r1, r8, ror #16
   117fc:	andeq	r1, r1, r8, ror #16
   11800:	andeq	r1, r1, r8, ror #16
   11804:	andeq	r1, r1, r8, ror #16
   11808:	andeq	r1, r1, r8, ror #16
   1180c:	andeq	r1, r1, r8, ror #16
   11810:	andeq	r1, r1, r8, ror #16
   11814:	andeq	r1, r1, r8, ror #16
   11818:	andeq	r1, r1, r8, ror #16
   1181c:	andeq	r1, r1, r8, ror #16
   11820:	andeq	r1, r1, r8, ror #16
   11824:	andeq	r1, r1, r8, ror #16
   11828:	andeq	r1, r1, r4, ror #16
   1182c:	andeq	r1, r1, r0, asr #16
   11830:	andeq	r1, r1, r8, asr #16
   11834:	andeq	r1, r1, r0, asr r8
   11838:	andeq	r1, r1, r8, asr r8
   1183c:	andeq	r1, r1, r0, ror #16
   11840:	mov	r0, #11
   11844:	bx	lr
   11848:	mov	r0, #12
   1184c:	bx	lr
   11850:	mov	r0, #13
   11854:	bx	lr
   11858:	mov	r0, #14
   1185c:	bx	lr
   11860:	mov	r0, #15
   11864:	bx	lr
   11868:	sub	r0, r1, #48	; 0x30
   1186c:	bx	lr
   11870:	movw	r1, #24868	; 0x6124
   11874:	movt	r1, #2
   11878:	str	r0, [r1]
   1187c:	bx	lr
   11880:	movw	r1, #24872	; 0x6128
   11884:	movt	r1, #2
   11888:	strb	r0, [r1]
   1188c:	bx	lr
   11890:	push	{r4, r5, r6, sl, fp, lr}
   11894:	add	fp, sp, #16
   11898:	sub	sp, sp, #8
   1189c:	movw	r0, #24860	; 0x611c
   118a0:	movt	r0, #2
   118a4:	ldr	r0, [r0]
   118a8:	bl	14214 <__assert_fail@plt+0x33cc>
   118ac:	cmp	r0, #0
   118b0:	beq	118d8 <__assert_fail@plt+0xa90>
   118b4:	movw	r0, #24872	; 0x6128
   118b8:	movt	r0, #2
   118bc:	ldrb	r0, [r0]
   118c0:	cmp	r0, #0
   118c4:	beq	118f8 <__assert_fail@plt+0xab0>
   118c8:	bl	10d94 <__errno_location@plt>
   118cc:	ldr	r0, [r0]
   118d0:	cmp	r0, #32
   118d4:	bne	118f8 <__assert_fail@plt+0xab0>
   118d8:	movw	r0, #24856	; 0x6118
   118dc:	movt	r0, #2
   118e0:	ldr	r0, [r0]
   118e4:	bl	14214 <__assert_fail@plt+0x33cc>
   118e8:	cmp	r0, #0
   118ec:	subeq	sp, fp, #16
   118f0:	popeq	{r4, r5, r6, sl, fp, pc}
   118f4:	b	11968 <__assert_fail@plt+0xb20>
   118f8:	movw	r1, #19847	; 0x4d87
   118fc:	movt	r1, #1
   11900:	mov	r0, #0
   11904:	mov	r2, #5
   11908:	bl	10ca4 <dcgettext@plt>
   1190c:	mov	r4, r0
   11910:	movw	r0, #24868	; 0x6124
   11914:	movt	r0, #2
   11918:	ldr	r6, [r0]
   1191c:	bl	10d94 <__errno_location@plt>
   11920:	ldr	r5, [r0]
   11924:	cmp	r6, #0
   11928:	bne	11944 <__assert_fail@plt+0xafc>
   1192c:	movw	r2, #19863	; 0x4d97
   11930:	movt	r2, #1
   11934:	mov	r0, #0
   11938:	mov	r1, r5
   1193c:	mov	r3, r4
   11940:	b	11964 <__assert_fail@plt+0xb1c>
   11944:	mov	r0, r6
   11948:	bl	1301c <__assert_fail@plt+0x21d4>
   1194c:	mov	r3, r0
   11950:	str	r4, [sp]
   11954:	movw	r2, #19859	; 0x4d93
   11958:	movt	r2, #1
   1195c:	mov	r0, #0
   11960:	mov	r1, r5
   11964:	bl	10d1c <error@plt>
   11968:	movw	r0, #24780	; 0x60cc
   1196c:	movt	r0, #2
   11970:	ldr	r0, [r0]
   11974:	bl	10c80 <_exit@plt>
   11978:	push	{r4, r5, fp, lr}
   1197c:	add	fp, sp, #8
   11980:	cmp	r0, #0
   11984:	beq	11a18 <__assert_fail@plt+0xbd0>
   11988:	mov	r4, r0
   1198c:	mov	r1, #47	; 0x2f
   11990:	bl	10e00 <strrchr@plt>
   11994:	cmp	r0, #0
   11998:	mov	r5, r4
   1199c:	addne	r5, r0, #1
   119a0:	sub	r0, r5, r4
   119a4:	cmp	r0, #7
   119a8:	blt	119fc <__assert_fail@plt+0xbb4>
   119ac:	sub	r0, r5, #7
   119b0:	movw	r1, #19922	; 0x4dd2
   119b4:	movt	r1, #1
   119b8:	mov	r2, #7
   119bc:	bl	10e24 <strncmp@plt>
   119c0:	cmp	r0, #0
   119c4:	bne	119fc <__assert_fail@plt+0xbb4>
   119c8:	movw	r1, #19930	; 0x4dda
   119cc:	movt	r1, #1
   119d0:	mov	r0, r5
   119d4:	mov	r2, #3
   119d8:	bl	10e24 <strncmp@plt>
   119dc:	cmp	r0, #0
   119e0:	beq	119ec <__assert_fail@plt+0xba4>
   119e4:	mov	r4, r5
   119e8:	b	119fc <__assert_fail@plt+0xbb4>
   119ec:	add	r4, r5, #3
   119f0:	movw	r0, #24848	; 0x6110
   119f4:	movt	r0, #2
   119f8:	str	r4, [r0]
   119fc:	movw	r0, #24852	; 0x6114
   11a00:	movt	r0, #2
   11a04:	str	r4, [r0]
   11a08:	movw	r0, #24876	; 0x612c
   11a0c:	movt	r0, #2
   11a10:	str	r4, [r0]
   11a14:	pop	{r4, r5, fp, pc}
   11a18:	movw	r0, #24856	; 0x6118
   11a1c:	movt	r0, #2
   11a20:	ldr	r3, [r0]
   11a24:	movw	r0, #19866	; 0x4d9a
   11a28:	movt	r0, #1
   11a2c:	mov	r1, #55	; 0x37
   11a30:	mov	r2, #1
   11a34:	bl	10cd4 <fwrite@plt>
   11a38:	bl	10e30 <abort@plt>
   11a3c:	push	{r4, r5, r6, sl, fp, lr}
   11a40:	add	fp, sp, #16
   11a44:	mov	r4, r0
   11a48:	movw	r0, #24880	; 0x6130
   11a4c:	movt	r0, #2
   11a50:	cmp	r4, #0
   11a54:	moveq	r4, r0
   11a58:	bl	10d94 <__errno_location@plt>
   11a5c:	mov	r5, r0
   11a60:	ldr	r6, [r0]
   11a64:	mov	r0, r4
   11a68:	mov	r1, #48	; 0x30
   11a6c:	bl	13d34 <__assert_fail@plt+0x2eec>
   11a70:	str	r6, [r5]
   11a74:	pop	{r4, r5, r6, sl, fp, pc}
   11a78:	movw	r1, #24880	; 0x6130
   11a7c:	movt	r1, #2
   11a80:	cmp	r0, #0
   11a84:	movne	r1, r0
   11a88:	ldr	r0, [r1]
   11a8c:	bx	lr
   11a90:	movw	r2, #24880	; 0x6130
   11a94:	movt	r2, #2
   11a98:	cmp	r0, #0
   11a9c:	movne	r2, r0
   11aa0:	str	r1, [r2]
   11aa4:	bx	lr
   11aa8:	movw	r3, #24880	; 0x6130
   11aac:	movt	r3, #2
   11ab0:	cmp	r0, #0
   11ab4:	movne	r3, r0
   11ab8:	ubfx	r0, r1, #5, #3
   11abc:	add	ip, r3, r0, lsl #2
   11ac0:	ldr	r3, [ip, #8]
   11ac4:	and	r1, r1, #31
   11ac8:	mov	r0, #1
   11acc:	and	r0, r0, r3, lsr r1
   11ad0:	and	r2, r2, #1
   11ad4:	eor	r2, r0, r2
   11ad8:	eor	r1, r3, r2, lsl r1
   11adc:	str	r1, [ip, #8]
   11ae0:	bx	lr
   11ae4:	movw	r2, #24880	; 0x6130
   11ae8:	movt	r2, #2
   11aec:	cmp	r0, #0
   11af0:	movne	r2, r0
   11af4:	ldr	r0, [r2, #4]
   11af8:	str	r1, [r2, #4]
   11afc:	bx	lr
   11b00:	push	{fp, lr}
   11b04:	mov	fp, sp
   11b08:	movw	r3, #24880	; 0x6130
   11b0c:	movt	r3, #2
   11b10:	cmp	r0, #0
   11b14:	movne	r3, r0
   11b18:	mov	r0, #10
   11b1c:	str	r0, [r3]
   11b20:	cmp	r1, #0
   11b24:	cmpne	r2, #0
   11b28:	bne	11b30 <__assert_fail@plt+0xce8>
   11b2c:	bl	10e30 <abort@plt>
   11b30:	str	r1, [r3, #40]	; 0x28
   11b34:	str	r2, [r3, #44]	; 0x2c
   11b38:	pop	{fp, pc}
   11b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b40:	add	fp, sp, #28
   11b44:	sub	sp, sp, #20
   11b48:	mov	r8, r3
   11b4c:	mov	r9, r2
   11b50:	mov	sl, r1
   11b54:	mov	r7, r0
   11b58:	ldr	r0, [fp, #8]
   11b5c:	movw	r5, #24880	; 0x6130
   11b60:	movt	r5, #2
   11b64:	cmp	r0, #0
   11b68:	movne	r5, r0
   11b6c:	bl	10d94 <__errno_location@plt>
   11b70:	mov	r4, r0
   11b74:	ldm	r5, {r0, r1}
   11b78:	ldr	r2, [r5, #40]	; 0x28
   11b7c:	ldr	r3, [r5, #44]	; 0x2c
   11b80:	ldr	r6, [r4]
   11b84:	add	r5, r5, #8
   11b88:	stm	sp, {r0, r1, r5}
   11b8c:	str	r2, [sp, #12]
   11b90:	str	r3, [sp, #16]
   11b94:	mov	r0, r7
   11b98:	mov	r1, sl
   11b9c:	mov	r2, r9
   11ba0:	mov	r3, r8
   11ba4:	bl	11bb4 <__assert_fail@plt+0xd6c>
   11ba8:	str	r6, [r4]
   11bac:	sub	sp, fp, #28
   11bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bb8:	add	fp, sp, #28
   11bbc:	sub	sp, sp, #156	; 0x9c
   11bc0:	mov	r9, r3
   11bc4:	mov	r7, r1
   11bc8:	mov	r6, r0
   11bcc:	str	r2, [fp, #-80]	; 0xffffffb0
   11bd0:	add	r0, r2, #1
   11bd4:	str	r0, [sp, #76]	; 0x4c
   11bd8:	ldr	r0, [fp, #12]
   11bdc:	and	r1, r0, #1
   11be0:	str	r1, [sp, #40]	; 0x28
   11be4:	and	r1, r0, #4
   11be8:	str	r1, [sp, #36]	; 0x24
   11bec:	ubfx	r4, r0, #1, #1
   11bf0:	bl	10cec <__ctype_get_mb_cur_max@plt>
   11bf4:	str	r0, [sp, #44]	; 0x2c
   11bf8:	ldr	r0, [fp, #24]
   11bfc:	str	r0, [sp, #88]	; 0x58
   11c00:	ldr	r0, [fp, #20]
   11c04:	str	r0, [sp, #80]	; 0x50
   11c08:	ldr	r1, [fp, #8]
   11c0c:	mov	r0, #0
   11c10:	str	r0, [sp, #84]	; 0x54
   11c14:	mov	r0, #0
   11c18:	str	r0, [fp, #-84]	; 0xffffffac
   11c1c:	mov	r0, #0
   11c20:	str	r0, [fp, #-72]	; 0xffffffb8
   11c24:	mov	r0, #0
   11c28:	mov	r2, #0
   11c2c:	str	r2, [fp, #-56]	; 0xffffffc8
   11c30:	mov	r2, #0
   11c34:	str	r2, [sp, #64]	; 0x40
   11c38:	mov	r2, #1
   11c3c:	str	r2, [fp, #-48]	; 0xffffffd0
   11c40:	cmp	r1, #10
   11c44:	bhi	12b70 <__assert_fail@plt+0x1d28>
   11c48:	mov	sl, r7
   11c4c:	mov	r7, r1
   11c50:	add	r1, pc, #24
   11c54:	mov	r8, #0
   11c58:	mov	r2, #1
   11c5c:	mov	r3, #0
   11c60:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11c64:	mov	lr, r9
   11c68:	mov	r5, r6
   11c6c:	ldr	pc, [r1, r7, lsl #2]
   11c70:	andeq	r1, r1, r4, asr #26
   11c74:	andeq	r1, r1, r4, lsl #27
   11c78:	andeq	r1, r1, r4, asr sp
   11c7c:	andeq	r1, r1, ip, lsr sp
   11c80:	andeq	r1, r1, r8, ror sp
   11c84:	ldrdeq	r1, [r1], -r8
   11c88:	andeq	r1, r1, r4, ror #26
   11c8c:	andeq	r1, r1, r4, lsr lr
   11c90:	muleq	r1, ip, ip
   11c94:	muleq	r1, ip, ip
   11c98:	andeq	r1, r1, r8, asr #25
   11c9c:	movw	r0, #20012	; 0x4e2c
   11ca0:	movt	r0, #1
   11ca4:	mov	r1, r7
   11ca8:	bl	13178 <__assert_fail@plt+0x2330>
   11cac:	str	r0, [sp, #80]	; 0x50
   11cb0:	movw	r0, #20014	; 0x4e2e
   11cb4:	movt	r0, #1
   11cb8:	mov	r1, r7
   11cbc:	bl	13178 <__assert_fail@plt+0x2330>
   11cc0:	mov	r5, r6
   11cc4:	str	r0, [sp, #88]	; 0x58
   11cc8:	mov	r8, #0
   11ccc:	tst	r4, #1
   11cd0:	str	r7, [fp, #-64]	; 0xffffffc0
   11cd4:	bne	11d0c <__assert_fail@plt+0xec4>
   11cd8:	ldr	r0, [sp, #80]	; 0x50
   11cdc:	ldrb	r0, [r0]
   11ce0:	cmp	r0, #0
   11ce4:	beq	11d0c <__assert_fail@plt+0xec4>
   11ce8:	ldr	r1, [sp, #80]	; 0x50
   11cec:	add	r1, r1, #1
   11cf0:	mov	r8, #0
   11cf4:	cmp	r8, sl
   11cf8:	strbcc	r0, [r5, r8]
   11cfc:	ldrb	r0, [r1, r8]
   11d00:	add	r8, r8, #1
   11d04:	cmp	r0, #0
   11d08:	bne	11cf4 <__assert_fail@plt+0xeac>
   11d0c:	ldr	r7, [sp, #88]	; 0x58
   11d10:	mov	r0, r7
   11d14:	bl	10d88 <strlen@plt>
   11d18:	mov	r5, r6
   11d1c:	str	r0, [fp, #-72]	; 0xffffffb8
   11d20:	str	r7, [fp, #-84]	; 0xffffffac
   11d24:	mov	r2, #1
   11d28:	mov	r3, r4
   11d2c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11d30:	mov	lr, r9
   11d34:	ldr	r7, [fp, #-64]	; 0xffffffc0
   11d38:	b	11e34 <__assert_fail@plt+0xfec>
   11d3c:	mov	r0, #1
   11d40:	b	11d84 <__assert_fail@plt+0xf3c>
   11d44:	mov	r7, #0
   11d48:	mov	r8, #0
   11d4c:	mov	r2, r0
   11d50:	b	11e30 <__assert_fail@plt+0xfe8>
   11d54:	tst	r4, #1
   11d58:	bne	11d84 <__assert_fail@plt+0xf3c>
   11d5c:	mov	r2, r0
   11d60:	b	11dac <__assert_fail@plt+0xf64>
   11d64:	mov	r0, #1
   11d68:	str	r0, [fp, #-72]	; 0xffffffb8
   11d6c:	mov	r8, #0
   11d70:	mov	r7, #5
   11d74:	b	11df0 <__assert_fail@plt+0xfa8>
   11d78:	mov	r2, #1
   11d7c:	tst	r4, #1
   11d80:	beq	11dac <__assert_fail@plt+0xf64>
   11d84:	mov	r1, #1
   11d88:	str	r1, [fp, #-72]	; 0xffffffb8
   11d8c:	mov	r8, #0
   11d90:	mov	r7, #2
   11d94:	movw	r1, #20014	; 0x4e2e
   11d98:	movt	r1, #1
   11d9c:	str	r1, [fp, #-84]	; 0xffffffac
   11da0:	mov	r2, r0
   11da4:	mov	r3, #1
   11da8:	b	11e34 <__assert_fail@plt+0xfec>
   11dac:	mov	r8, #1
   11db0:	mov	r7, #2
   11db4:	cmp	sl, #0
   11db8:	movne	r0, #39	; 0x27
   11dbc:	strbne	r0, [r5]
   11dc0:	movw	r0, #20014	; 0x4e2e
   11dc4:	movt	r0, #1
   11dc8:	str	r0, [fp, #-84]	; 0xffffffac
   11dcc:	mov	r0, #1
   11dd0:	str	r0, [fp, #-72]	; 0xffffffb8
   11dd4:	b	11e30 <__assert_fail@plt+0xfe8>
   11dd8:	mov	r7, #5
   11ddc:	tst	r4, #1
   11de0:	beq	11e08 <__assert_fail@plt+0xfc0>
   11de4:	mov	r0, #1
   11de8:	str	r0, [fp, #-72]	; 0xffffffb8
   11dec:	mov	r8, #0
   11df0:	movw	r0, #20010	; 0x4e2a
   11df4:	movt	r0, #1
   11df8:	str	r0, [fp, #-84]	; 0xffffffac
   11dfc:	mov	r2, #1
   11e00:	mov	r3, #1
   11e04:	b	11e34 <__assert_fail@plt+0xfec>
   11e08:	cmp	sl, #0
   11e0c:	movne	r0, #34	; 0x22
   11e10:	strbne	r0, [r5]
   11e14:	mov	r8, #1
   11e18:	movw	r0, #20010	; 0x4e2a
   11e1c:	movt	r0, #1
   11e20:	str	r0, [fp, #-84]	; 0xffffffac
   11e24:	mov	r0, #1
   11e28:	str	r0, [fp, #-72]	; 0xffffffb8
   11e2c:	mov	r2, #1
   11e30:	mov	r3, #0
   11e34:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11e38:	cmp	r0, #0
   11e3c:	movwne	r0, #1
   11e40:	and	r1, r0, r3
   11e44:	and	r1, r2, r1
   11e48:	str	r1, [sp, #56]	; 0x38
   11e4c:	sub	r1, r7, #2
   11e50:	clz	r1, r1
   11e54:	lsr	r1, r1, #5
   11e58:	and	r1, r1, r3
   11e5c:	str	r1, [sp, #68]	; 0x44
   11e60:	str	r7, [fp, #-64]	; 0xffffffc0
   11e64:	subs	r1, r7, #2
   11e68:	movwne	r1, #1
   11e6c:	eor	r4, r3, #1
   11e70:	str	r4, [fp, #-88]	; 0xffffffa8
   11e74:	orr	r4, r1, r4
   11e78:	str	r4, [sp, #72]	; 0x48
   11e7c:	and	r1, r1, r2
   11e80:	and	r0, r0, r1
   11e84:	str	r0, [fp, #-60]	; 0xffffffc4
   11e88:	str	r3, [fp, #-76]	; 0xffffffb4
   11e8c:	orr	r0, r1, r3
   11e90:	eor	r0, r0, #1
   11e94:	ldr	r1, [fp, #16]
   11e98:	clz	r1, r1
   11e9c:	lsr	r1, r1, #5
   11ea0:	orr	r0, r1, r0
   11ea4:	str	r0, [fp, #-68]	; 0xffffffbc
   11ea8:	str	r2, [sp, #92]	; 0x5c
   11eac:	eor	r0, r2, #1
   11eb0:	str	r0, [sp, #60]	; 0x3c
   11eb4:	mov	r7, #0
   11eb8:	cmn	lr, #1
   11ebc:	beq	11ecc <__assert_fail@plt+0x1084>
   11ec0:	cmp	r7, lr
   11ec4:	bne	11ed8 <__assert_fail@plt+0x1090>
   11ec8:	b	129e4 <__assert_fail@plt+0x1b9c>
   11ecc:	ldrb	r0, [ip, r7]
   11ed0:	cmp	r0, #0
   11ed4:	beq	129e4 <__assert_fail@plt+0x1b9c>
   11ed8:	mov	r9, #0
   11edc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11ee0:	cmp	r0, #0
   11ee4:	beq	11f18 <__assert_fail@plt+0x10d0>
   11ee8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11eec:	add	r4, r7, r0
   11ef0:	cmp	r0, #2
   11ef4:	bcc	11f10 <__assert_fail@plt+0x10c8>
   11ef8:	cmn	lr, #1
   11efc:	bne	11f10 <__assert_fail@plt+0x10c8>
   11f00:	mov	r0, ip
   11f04:	bl	10d88 <strlen@plt>
   11f08:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11f0c:	mov	lr, r0
   11f10:	cmp	r4, lr
   11f14:	bls	11f24 <__assert_fail@plt+0x10dc>
   11f18:	mov	r0, #0
   11f1c:	str	r0, [fp, #-52]	; 0xffffffcc
   11f20:	b	11f68 <__assert_fail@plt+0x1120>
   11f24:	mov	r4, lr
   11f28:	add	r0, ip, r7
   11f2c:	ldr	r1, [fp, #-84]	; 0xffffffac
   11f30:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11f34:	bl	10d7c <bcmp@plt>
   11f38:	cmp	r0, #0
   11f3c:	mov	r1, r0
   11f40:	movwne	r1, #1
   11f44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   11f48:	orr	r1, r1, r2
   11f4c:	tst	r1, #1
   11f50:	beq	12ab8 <__assert_fail@plt+0x1c70>
   11f54:	clz	r0, r0
   11f58:	lsr	r0, r0, #5
   11f5c:	str	r0, [fp, #-52]	; 0xffffffcc
   11f60:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11f64:	mov	lr, r4
   11f68:	ldrb	r4, [ip, r7]
   11f6c:	cmp	r4, #126	; 0x7e
   11f70:	bhi	124a0 <__assert_fail@plt+0x1658>
   11f74:	mov	r6, #1
   11f78:	mov	r2, #110	; 0x6e
   11f7c:	mov	r0, #97	; 0x61
   11f80:	add	r3, pc, #4
   11f84:	mov	r1, #0
   11f88:	ldr	pc, [r3, r4, lsl #2]
   11f8c:	andeq	r2, r1, r0, lsl #6
   11f90:	andeq	r2, r1, r0, lsr #9
   11f94:	andeq	r2, r1, r0, lsr #9
   11f98:	andeq	r2, r1, r0, lsr #9
   11f9c:	andeq	r2, r1, r0, lsr #9
   11fa0:	andeq	r2, r1, r0, lsr #9
   11fa4:	andeq	r2, r1, r0, lsr #9
   11fa8:	andeq	r2, r1, r4, ror r5
   11fac:	andeq	r2, r1, r0, ror #5
   11fb0:	ldrdeq	r2, [r1], -r8
   11fb4:	andeq	r2, r1, ip, ror #5
   11fb8:	andeq	r2, r1, r8, lsl #8
   11fbc:	ldrdeq	r2, [r1], -r0
   11fc0:	andeq	r2, r1, r8, ror #5
   11fc4:	andeq	r2, r1, r0, lsr #9
   11fc8:	andeq	r2, r1, r0, lsr #9
   11fcc:	andeq	r2, r1, r0, lsr #9
   11fd0:	andeq	r2, r1, r0, lsr #9
   11fd4:	andeq	r2, r1, r0, lsr #9
   11fd8:	andeq	r2, r1, r0, lsr #9
   11fdc:	andeq	r2, r1, r0, lsr #9
   11fe0:	andeq	r2, r1, r0, lsr #9
   11fe4:	andeq	r2, r1, r0, lsr #9
   11fe8:	andeq	r2, r1, r0, lsr #9
   11fec:	andeq	r2, r1, r0, lsr #9
   11ff0:	andeq	r2, r1, r0, lsr #9
   11ff4:	andeq	r2, r1, r0, lsr #9
   11ff8:	andeq	r2, r1, r0, lsr #9
   11ffc:	andeq	r2, r1, r0, lsr #9
   12000:	andeq	r2, r1, r0, lsr #9
   12004:	andeq	r2, r1, r0, lsr #9
   12008:	andeq	r2, r1, r0, lsr #9
   1200c:	andeq	r2, r1, r4, lsl #5
   12010:	andeq	r2, r1, r8, lsl #5
   12014:	andeq	r2, r1, r8, lsl #5
   12018:	andeq	r2, r1, r0, ror r2
   1201c:	andeq	r2, r1, r8, lsl #5
   12020:	andeq	r2, r1, r8, lsl #3
   12024:	andeq	r2, r1, r8, lsl #5
   12028:	andeq	r2, r1, r0, lsl r4
   1202c:	andeq	r2, r1, r8, lsl #5
   12030:	andeq	r2, r1, r8, lsl #5
   12034:	andeq	r2, r1, r8, lsl #5
   12038:	andeq	r2, r1, r8, lsl #3
   1203c:	andeq	r2, r1, r8, lsl #3
   12040:	andeq	r2, r1, r8, lsl #3
   12044:	andeq	r2, r1, r8, lsl #3
   12048:	andeq	r2, r1, r8, lsl #3
   1204c:	andeq	r2, r1, r8, lsl #3
   12050:	andeq	r2, r1, r8, lsl #3
   12054:	andeq	r2, r1, r8, lsl #3
   12058:	andeq	r2, r1, r8, lsl #3
   1205c:	andeq	r2, r1, r8, lsl #3
   12060:	andeq	r2, r1, r8, lsl #3
   12064:	andeq	r2, r1, r8, lsl #3
   12068:	andeq	r2, r1, r8, lsl #3
   1206c:	andeq	r2, r1, r8, lsl #3
   12070:	andeq	r2, r1, r8, lsl #3
   12074:	andeq	r2, r1, r8, lsl #3
   12078:	andeq	r2, r1, r8, lsl #5
   1207c:	andeq	r2, r1, r8, lsl #5
   12080:	andeq	r2, r1, r8, lsl #5
   12084:	andeq	r2, r1, r8, lsl #5
   12088:	ldrdeq	r2, [r1], -r8
   1208c:	andeq	r2, r1, r0, lsr #9
   12090:	andeq	r2, r1, r8, lsl #3
   12094:	andeq	r2, r1, r8, lsl #3
   12098:	andeq	r2, r1, r8, lsl #3
   1209c:	andeq	r2, r1, r8, lsl #3
   120a0:	andeq	r2, r1, r8, lsl #3
   120a4:	andeq	r2, r1, r8, lsl #3
   120a8:	andeq	r2, r1, r8, lsl #3
   120ac:	andeq	r2, r1, r8, lsl #3
   120b0:	andeq	r2, r1, r8, lsl #3
   120b4:	andeq	r2, r1, r8, lsl #3
   120b8:	andeq	r2, r1, r8, lsl #3
   120bc:	andeq	r2, r1, r8, lsl #3
   120c0:	andeq	r2, r1, r8, lsl #3
   120c4:	andeq	r2, r1, r8, lsl #3
   120c8:	andeq	r2, r1, r8, lsl #3
   120cc:	andeq	r2, r1, r8, lsl #3
   120d0:	andeq	r2, r1, r8, lsl #3
   120d4:	andeq	r2, r1, r8, lsl #3
   120d8:	andeq	r2, r1, r8, lsl #3
   120dc:	andeq	r2, r1, r8, lsl #3
   120e0:	andeq	r2, r1, r8, lsl #3
   120e4:	andeq	r2, r1, r8, lsl #3
   120e8:	andeq	r2, r1, r8, lsl #3
   120ec:	andeq	r2, r1, r8, lsl #3
   120f0:	andeq	r2, r1, r8, lsl #3
   120f4:	andeq	r2, r1, r8, lsl #3
   120f8:	andeq	r2, r1, r8, lsl #5
   120fc:			; <UNDEFINED> instruction: 0x000122b0
   12100:	andeq	r2, r1, r8, lsl #3
   12104:	andeq	r2, r1, r8, lsl #5
   12108:	andeq	r2, r1, r8, lsl #3
   1210c:	andeq	r2, r1, r8, lsl #5
   12110:	andeq	r2, r1, r8, lsl #3
   12114:	andeq	r2, r1, r8, lsl #3
   12118:	andeq	r2, r1, r8, lsl #3
   1211c:	andeq	r2, r1, r8, lsl #3
   12120:	andeq	r2, r1, r8, lsl #3
   12124:	andeq	r2, r1, r8, lsl #3
   12128:	andeq	r2, r1, r8, lsl #3
   1212c:	andeq	r2, r1, r8, lsl #3
   12130:	andeq	r2, r1, r8, lsl #3
   12134:	andeq	r2, r1, r8, lsl #3
   12138:	andeq	r2, r1, r8, lsl #3
   1213c:	andeq	r2, r1, r8, lsl #3
   12140:	andeq	r2, r1, r8, lsl #3
   12144:	andeq	r2, r1, r8, lsl #3
   12148:	andeq	r2, r1, r8, lsl #3
   1214c:	andeq	r2, r1, r8, lsl #3
   12150:	andeq	r2, r1, r8, lsl #3
   12154:	andeq	r2, r1, r8, lsl #3
   12158:	andeq	r2, r1, r8, lsl #3
   1215c:	andeq	r2, r1, r8, lsl #3
   12160:	andeq	r2, r1, r8, lsl #3
   12164:	andeq	r2, r1, r8, lsl #3
   12168:	andeq	r2, r1, r8, lsl #3
   1216c:	andeq	r2, r1, r8, lsl #3
   12170:	andeq	r2, r1, r8, lsl #3
   12174:	andeq	r2, r1, r8, lsl #3
   12178:	andeq	r2, r1, r4, asr #4
   1217c:	andeq	r2, r1, r8, lsl #5
   12180:	andeq	r2, r1, r4, asr #4
   12184:	andeq	r2, r1, r0, ror r2
   12188:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1218c:	tst	r0, #1
   12190:	bne	121bc <__assert_fail@plt+0x1374>
   12194:	ubfx	r0, r4, #5, #3
   12198:	ldr	r1, [fp, #16]
   1219c:	ldr	r0, [r1, r0, lsl #2]
   121a0:	and	r1, r4, #31
   121a4:	mov	r2, #1
   121a8:	tst	r0, r2, lsl r1
   121ac:	beq	121bc <__assert_fail@plt+0x1374>
   121b0:	mov	r0, r4
   121b4:	mov	r1, r6
   121b8:	b	121d0 <__assert_fail@plt+0x1388>
   121bc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   121c0:	cmp	r0, #0
   121c4:	mov	r0, r4
   121c8:	mov	r1, r6
   121cc:	beq	12508 <__assert_fail@plt+0x16c0>
   121d0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   121d4:	tst	r2, #1
   121d8:	bne	12acc <__assert_fail@plt+0x1c84>
   121dc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   121e0:	subs	r2, r2, #2
   121e4:	movwne	r2, #1
   121e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   121ec:	orr	r2, r2, r3
   121f0:	tst	r2, #1
   121f4:	bne	12230 <__assert_fail@plt+0x13e8>
   121f8:	cmp	r8, sl
   121fc:	movcc	r2, #39	; 0x27
   12200:	strbcc	r2, [r5, r8]
   12204:	add	r2, r8, #1
   12208:	cmp	r2, sl
   1220c:	movcc	r3, #36	; 0x24
   12210:	strbcc	r3, [r5, r2]
   12214:	add	r2, r8, #2
   12218:	cmp	r2, sl
   1221c:	movcc	r3, #39	; 0x27
   12220:	strbcc	r3, [r5, r2]
   12224:	add	r8, r8, #3
   12228:	mov	r2, #1
   1222c:	str	r2, [fp, #-56]	; 0xffffffc8
   12230:	cmp	r8, sl
   12234:	movcc	r2, #92	; 0x5c
   12238:	strbcc	r2, [r5, r8]
   1223c:	add	r8, r8, #1
   12240:	b	1254c <__assert_fail@plt+0x1704>
   12244:	cmp	lr, #1
   12248:	beq	12270 <__assert_fail@plt+0x1428>
   1224c:	mov	r6, #0
   12250:	cmn	lr, #1
   12254:	bne	1227c <__assert_fail@plt+0x1434>
   12258:	ldrb	r0, [ip, #1]
   1225c:	cmp	r0, #0
   12260:	beq	12270 <__assert_fail@plt+0x1428>
   12264:	mvn	lr, #0
   12268:	mov	r9, #0
   1226c:	b	12188 <__assert_fail@plt+0x1340>
   12270:	mov	r6, #0
   12274:	cmp	r7, #0
   12278:	beq	12284 <__assert_fail@plt+0x143c>
   1227c:	mov	r9, #0
   12280:	b	12188 <__assert_fail@plt+0x1340>
   12284:	mov	r1, #1
   12288:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1228c:	cmp	r0, #2
   12290:	bne	122a8 <__assert_fail@plt+0x1460>
   12294:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12298:	tst	r0, #1
   1229c:	mov	r6, r1
   122a0:	beq	12188 <__assert_fail@plt+0x1340>
   122a4:	b	12acc <__assert_fail@plt+0x1c84>
   122a8:	mov	r6, r1
   122ac:	b	12188 <__assert_fail@plt+0x1340>
   122b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   122b4:	cmp	r0, #2
   122b8:	bne	124ec <__assert_fail@plt+0x16a4>
   122bc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122c0:	tst	r0, #1
   122c4:	bne	12acc <__assert_fail@plt+0x1c84>
   122c8:	mov	r9, #0
   122cc:	b	12500 <__assert_fail@plt+0x16b8>
   122d0:	mov	r0, #102	; 0x66
   122d4:	b	12574 <__assert_fail@plt+0x172c>
   122d8:	mov	r2, #116	; 0x74
   122dc:	b	122ec <__assert_fail@plt+0x14a4>
   122e0:	mov	r0, #98	; 0x62
   122e4:	b	12574 <__assert_fail@plt+0x172c>
   122e8:	mov	r2, #114	; 0x72
   122ec:	ldr	r0, [sp, #72]	; 0x48
   122f0:	tst	r0, #1
   122f4:	mov	r0, r2
   122f8:	bne	12574 <__assert_fail@plt+0x172c>
   122fc:	b	12acc <__assert_fail@plt+0x1c84>
   12300:	ldr	r0, [sp, #92]	; 0x5c
   12304:	tst	r0, #1
   12308:	beq	12590 <__assert_fail@plt+0x1748>
   1230c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12310:	tst	r0, #1
   12314:	bne	12acc <__assert_fail@plt+0x1c84>
   12318:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1231c:	subs	r0, r0, #2
   12320:	movwne	r0, #1
   12324:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12328:	orr	r0, r0, r1
   1232c:	tst	r0, #1
   12330:	bne	1236c <__assert_fail@plt+0x1524>
   12334:	cmp	r8, sl
   12338:	movcc	r0, #39	; 0x27
   1233c:	strbcc	r0, [r5, r8]
   12340:	add	r0, r8, #1
   12344:	cmp	r0, sl
   12348:	movcc	r1, #36	; 0x24
   1234c:	strbcc	r1, [r5, r0]
   12350:	add	r0, r8, #2
   12354:	cmp	r0, sl
   12358:	movcc	r1, #39	; 0x27
   1235c:	strbcc	r1, [r5, r0]
   12360:	add	r8, r8, #3
   12364:	mov	r0, #1
   12368:	str	r0, [fp, #-56]	; 0xffffffc8
   1236c:	cmp	r8, sl
   12370:	movcc	r0, #92	; 0x5c
   12374:	strbcc	r0, [r5, r8]
   12378:	add	r0, r8, #1
   1237c:	mov	r6, #0
   12380:	mov	r9, #1
   12384:	mov	r4, #48	; 0x30
   12388:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1238c:	cmp	r1, #2
   12390:	beq	12754 <__assert_fail@plt+0x190c>
   12394:	add	r1, r7, #1
   12398:	cmp	r1, lr
   1239c:	bcs	12754 <__assert_fail@plt+0x190c>
   123a0:	ldrb	r1, [ip, r1]
   123a4:	sub	r1, r1, #48	; 0x30
   123a8:	uxtb	r1, r1
   123ac:	cmp	r1, #9
   123b0:	bhi	12754 <__assert_fail@plt+0x190c>
   123b4:	cmp	r0, sl
   123b8:	movcc	r1, #48	; 0x30
   123bc:	strbcc	r1, [r5, r0]
   123c0:	add	r0, r8, #2
   123c4:	cmp	r0, sl
   123c8:	movcc	r1, #48	; 0x30
   123cc:	strbcc	r1, [r5, r0]
   123d0:	add	r8, r8, #3
   123d4:	b	12188 <__assert_fail@plt+0x1340>
   123d8:	mov	r9, #0
   123dc:	mov	r4, #63	; 0x3f
   123e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   123e4:	cmp	r0, #5
   123e8:	beq	1275c <__assert_fail@plt+0x1914>
   123ec:	cmp	r0, #2
   123f0:	bne	12804 <__assert_fail@plt+0x19bc>
   123f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   123f8:	tst	r0, #1
   123fc:	mov	r6, #0
   12400:	beq	12188 <__assert_fail@plt+0x1340>
   12404:	b	12acc <__assert_fail@plt+0x1c84>
   12408:	mov	r0, #118	; 0x76
   1240c:	b	12574 <__assert_fail@plt+0x172c>
   12410:	mov	r4, #39	; 0x27
   12414:	mov	r0, #1
   12418:	str	r0, [sp, #64]	; 0x40
   1241c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12420:	cmp	r0, #2
   12424:	bne	125ac <__assert_fail@plt+0x1764>
   12428:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1242c:	tst	r0, #1
   12430:	bne	12acc <__assert_fail@plt+0x1c84>
   12434:	ldr	r2, [sp, #84]	; 0x54
   12438:	cmp	r2, #0
   1243c:	mov	r0, r2
   12440:	movwne	r0, #1
   12444:	clz	r1, sl
   12448:	lsr	r1, r1, #5
   1244c:	orrs	r0, r0, r1
   12450:	moveq	r2, sl
   12454:	str	r2, [sp, #84]	; 0x54
   12458:	moveq	sl, r0
   1245c:	cmp	r8, sl
   12460:	movcc	r0, #39	; 0x27
   12464:	strbcc	r0, [r5, r8]
   12468:	add	r0, r8, #1
   1246c:	cmp	r0, sl
   12470:	movcc	r1, #92	; 0x5c
   12474:	strbcc	r1, [r5, r0]
   12478:	add	r0, r8, #2
   1247c:	cmp	r0, sl
   12480:	movcc	r1, #39	; 0x27
   12484:	strbcc	r1, [r5, r0]
   12488:	add	r8, r8, #3
   1248c:	mov	r0, #0
   12490:	str	r0, [fp, #-56]	; 0xffffffc8
   12494:	mov	r9, #0
   12498:	mov	r6, #1
   1249c:	b	12188 <__assert_fail@plt+0x1340>
   124a0:	ldr	r0, [sp, #44]	; 0x2c
   124a4:	cmp	r0, #1
   124a8:	bne	125b4 <__assert_fail@plt+0x176c>
   124ac:	str	lr, [sp, #32]
   124b0:	bl	10d64 <__ctype_b_loc@plt>
   124b4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   124b8:	ldr	r0, [r0]
   124bc:	add	r0, r0, r4, lsl #1
   124c0:	ldrb	r0, [r0, #1]
   124c4:	ubfx	r6, r0, #6, #1
   124c8:	mov	r2, #1
   124cc:	ldr	r0, [sp, #60]	; 0x3c
   124d0:	orr	r1, r6, r0
   124d4:	cmp	r2, #1
   124d8:	bhi	1280c <__assert_fail@plt+0x19c4>
   124dc:	tst	r1, #1
   124e0:	beq	1280c <__assert_fail@plt+0x19c4>
   124e4:	ldr	lr, [sp, #32]
   124e8:	b	12188 <__assert_fail@plt+0x1340>
   124ec:	mov	r9, #0
   124f0:	mov	r0, #92	; 0x5c
   124f4:	ldr	r1, [sp, #56]	; 0x38
   124f8:	cmp	r1, #0
   124fc:	beq	12574 <__assert_fail@plt+0x172c>
   12500:	mov	r4, #92	; 0x5c
   12504:	mov	r6, #0
   12508:	cmp	r9, #0
   1250c:	bne	12544 <__assert_fail@plt+0x16fc>
   12510:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12514:	tst	r0, #1
   12518:	beq	12544 <__assert_fail@plt+0x16fc>
   1251c:	cmp	r8, sl
   12520:	movcc	r0, #39	; 0x27
   12524:	strbcc	r0, [r5, r8]
   12528:	add	r0, r8, #1
   1252c:	cmp	r0, sl
   12530:	movcc	r1, #39	; 0x27
   12534:	strbcc	r1, [r5, r0]
   12538:	add	r8, r8, #2
   1253c:	mov	r0, #0
   12540:	str	r0, [fp, #-56]	; 0xffffffc8
   12544:	mov	r1, r6
   12548:	mov	r0, r4
   1254c:	cmp	r8, sl
   12550:	strbcc	r0, [r5, r8]
   12554:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12558:	and	r0, r0, r1
   1255c:	str	r0, [fp, #-48]	; 0xffffffd0
   12560:	add	r8, r8, #1
   12564:	add	r7, r7, #1
   12568:	cmn	lr, #1
   1256c:	bne	11ec0 <__assert_fail@plt+0x1078>
   12570:	b	11ecc <__assert_fail@plt+0x1084>
   12574:	mov	r9, #0
   12578:	ldr	r1, [sp, #92]	; 0x5c
   1257c:	tst	r1, #1
   12580:	mov	r6, #0
   12584:	mov	r1, #0
   12588:	beq	12188 <__assert_fail@plt+0x1340>
   1258c:	b	121d0 <__assert_fail@plt+0x1388>
   12590:	mov	r4, #0
   12594:	ldr	r0, [sp, #40]	; 0x28
   12598:	cmp	r0, #0
   1259c:	mov	r9, #0
   125a0:	mov	r6, #0
   125a4:	beq	12188 <__assert_fail@plt+0x1340>
   125a8:	b	12564 <__assert_fail@plt+0x171c>
   125ac:	mov	r6, #1
   125b0:	b	12188 <__assert_fail@plt+0x1340>
   125b4:	mov	r0, #0
   125b8:	str	r0, [fp, #-36]	; 0xffffffdc
   125bc:	str	r0, [fp, #-40]	; 0xffffffd8
   125c0:	cmn	lr, #1
   125c4:	bne	125d8 <__assert_fail@plt+0x1790>
   125c8:	mov	r0, ip
   125cc:	bl	10d88 <strlen@plt>
   125d0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   125d4:	mov	lr, r0
   125d8:	ldr	r0, [sp, #76]	; 0x4c
   125dc:	add	r0, r0, r7
   125e0:	str	r0, [sp, #24]
   125e4:	mov	r6, #1
   125e8:	mov	r2, #0
   125ec:	sub	r0, fp, #40	; 0x28
   125f0:	mov	r3, r0
   125f4:	str	r5, [sp, #28]
   125f8:	str	lr, [sp, #32]
   125fc:	b	12640 <__assert_fail@plt+0x17f8>
   12600:	ldr	r5, [sp, #52]	; 0x34
   12604:	add	r5, r0, r5
   12608:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1260c:	bl	10cc8 <iswprint@plt>
   12610:	cmp	r0, #0
   12614:	movwne	r0, #1
   12618:	and	r6, r6, r0
   1261c:	sub	r0, fp, #40	; 0x28
   12620:	bl	10c98 <mbsinit@plt>
   12624:	sub	r3, fp, #40	; 0x28
   12628:	mov	r2, r5
   1262c:	ldr	lr, [sp, #32]
   12630:	cmp	r0, #0
   12634:	ldr	r5, [sp, #28]
   12638:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1263c:	bne	124cc <__assert_fail@plt+0x1684>
   12640:	str	r2, [sp, #52]	; 0x34
   12644:	add	r0, r2, r7
   12648:	add	r1, ip, r0
   1264c:	str	r0, [sp, #48]	; 0x30
   12650:	sub	r2, lr, r0
   12654:	sub	r0, fp, #44	; 0x2c
   12658:	bl	144f8 <__assert_fail@plt+0x36b0>
   1265c:	cmp	r0, #0
   12660:	beq	129d8 <__assert_fail@plt+0x1b90>
   12664:	cmn	r0, #1
   12668:	beq	12994 <__assert_fail@plt+0x1b4c>
   1266c:	cmn	r0, #2
   12670:	ldr	lr, [sp, #32]
   12674:	beq	1299c <__assert_fail@plt+0x1b54>
   12678:	cmp	r0, #2
   1267c:	mov	r1, #0
   12680:	movwcc	r1, #1
   12684:	ldr	r2, [sp, #68]	; 0x44
   12688:	eor	r2, r2, #1
   1268c:	orrs	r1, r2, r1
   12690:	bne	12600 <__assert_fail@plt+0x17b8>
   12694:	ldr	r1, [sp, #52]	; 0x34
   12698:	ldr	r2, [sp, #24]
   1269c:	add	r1, r2, r1
   126a0:	sub	r2, r0, #1
   126a4:	b	126b4 <__assert_fail@plt+0x186c>
   126a8:	add	r1, r1, #1
   126ac:	subs	r2, r2, #1
   126b0:	beq	12600 <__assert_fail@plt+0x17b8>
   126b4:	ldrb	r3, [r1]
   126b8:	sub	r3, r3, #91	; 0x5b
   126bc:	cmp	r3, #33	; 0x21
   126c0:	bhi	126a8 <__assert_fail@plt+0x1860>
   126c4:	add	r5, pc, #0
   126c8:	ldr	pc, [r5, r3, lsl #2]
   126cc:	andeq	r2, r1, r4, asr #21
   126d0:	andeq	r2, r1, r4, asr #21
   126d4:	andeq	r2, r1, r8, lsr #13
   126d8:	andeq	r2, r1, r4, asr #21
   126dc:	andeq	r2, r1, r8, lsr #13
   126e0:	andeq	r2, r1, r4, asr #21
   126e4:	andeq	r2, r1, r8, lsr #13
   126e8:	andeq	r2, r1, r8, lsr #13
   126ec:	andeq	r2, r1, r8, lsr #13
   126f0:	andeq	r2, r1, r8, lsr #13
   126f4:	andeq	r2, r1, r8, lsr #13
   126f8:	andeq	r2, r1, r8, lsr #13
   126fc:	andeq	r2, r1, r8, lsr #13
   12700:	andeq	r2, r1, r8, lsr #13
   12704:	andeq	r2, r1, r8, lsr #13
   12708:	andeq	r2, r1, r8, lsr #13
   1270c:	andeq	r2, r1, r8, lsr #13
   12710:	andeq	r2, r1, r8, lsr #13
   12714:	andeq	r2, r1, r8, lsr #13
   12718:	andeq	r2, r1, r8, lsr #13
   1271c:	andeq	r2, r1, r8, lsr #13
   12720:	andeq	r2, r1, r8, lsr #13
   12724:	andeq	r2, r1, r8, lsr #13
   12728:	andeq	r2, r1, r8, lsr #13
   1272c:	andeq	r2, r1, r8, lsr #13
   12730:	andeq	r2, r1, r8, lsr #13
   12734:	andeq	r2, r1, r8, lsr #13
   12738:	andeq	r2, r1, r8, lsr #13
   1273c:	andeq	r2, r1, r8, lsr #13
   12740:	andeq	r2, r1, r8, lsr #13
   12744:	andeq	r2, r1, r8, lsr #13
   12748:	andeq	r2, r1, r8, lsr #13
   1274c:	andeq	r2, r1, r8, lsr #13
   12750:	andeq	r2, r1, r4, asr #21
   12754:	mov	r8, r0
   12758:	b	12188 <__assert_fail@plt+0x1340>
   1275c:	ldr	r0, [sp, #36]	; 0x24
   12760:	cmp	r0, #0
   12764:	beq	12804 <__assert_fail@plt+0x19bc>
   12768:	add	r0, r7, #2
   1276c:	cmp	r0, lr
   12770:	bcs	12804 <__assert_fail@plt+0x19bc>
   12774:	add	r1, r7, ip
   12778:	ldrb	r1, [r1, #1]
   1277c:	cmp	r1, #63	; 0x3f
   12780:	bne	12804 <__assert_fail@plt+0x19bc>
   12784:	ldrb	r1, [ip, r0]
   12788:	sub	r2, r1, #33	; 0x21
   1278c:	cmp	r2, #29
   12790:	bhi	12804 <__assert_fail@plt+0x19bc>
   12794:	mov	r3, #1
   12798:	movw	r6, #20929	; 0x51c1
   1279c:	movt	r6, #14336	; 0x3800
   127a0:	tst	r6, r3, lsl r2
   127a4:	beq	12804 <__assert_fail@plt+0x19bc>
   127a8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   127ac:	tst	r2, #1
   127b0:	bne	12acc <__assert_fail@plt+0x1c84>
   127b4:	cmp	r8, sl
   127b8:	movcc	r2, #63	; 0x3f
   127bc:	strbcc	r2, [r5, r8]
   127c0:	add	r2, r8, #1
   127c4:	cmp	r2, sl
   127c8:	movcc	r3, #34	; 0x22
   127cc:	strbcc	r3, [r5, r2]
   127d0:	add	r2, r8, #2
   127d4:	cmp	r2, sl
   127d8:	movcc	r3, #34	; 0x22
   127dc:	strbcc	r3, [r5, r2]
   127e0:	add	r2, r8, #3
   127e4:	cmp	r2, sl
   127e8:	movcc	r3, #63	; 0x3f
   127ec:	strbcc	r3, [r5, r2]
   127f0:	add	r8, r8, #4
   127f4:	mov	r7, r0
   127f8:	mov	r4, r1
   127fc:	mov	r6, #0
   12800:	b	12188 <__assert_fail@plt+0x1340>
   12804:	mov	r6, #0
   12808:	b	12188 <__assert_fail@plt+0x1340>
   1280c:	add	r0, r2, r7
   12810:	str	r0, [sp, #52]	; 0x34
   12814:	mov	r2, #0
   12818:	ldr	lr, [sp, #32]
   1281c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12820:	str	r1, [sp, #48]	; 0x30
   12824:	tst	r1, #1
   12828:	bne	12904 <__assert_fail@plt+0x1abc>
   1282c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12830:	tst	r1, #1
   12834:	bne	12acc <__assert_fail@plt+0x1c84>
   12838:	mov	r3, r0
   1283c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12840:	subs	r1, r0, #2
   12844:	movwne	r1, #1
   12848:	orr	r1, r1, r3
   1284c:	tst	r1, #1
   12850:	bne	12888 <__assert_fail@plt+0x1a40>
   12854:	cmp	r8, sl
   12858:	movcc	r0, #39	; 0x27
   1285c:	strbcc	r0, [r5, r8]
   12860:	add	r2, r8, #1
   12864:	cmp	r2, sl
   12868:	movcc	r0, #36	; 0x24
   1286c:	strbcc	r0, [r5, r2]
   12870:	add	r2, r8, #2
   12874:	cmp	r2, sl
   12878:	movcc	r0, #39	; 0x27
   1287c:	strbcc	r0, [r5, r2]
   12880:	add	r8, r8, #3
   12884:	mov	r3, #1
   12888:	cmp	r8, sl
   1288c:	movcc	r1, #92	; 0x5c
   12890:	strbcc	r1, [r5, r8]
   12894:	add	r2, r8, #1
   12898:	cmp	r2, sl
   1289c:	bcs	128b0 <__assert_fail@plt+0x1a68>
   128a0:	uxtb	r1, r4
   128a4:	mov	r0, #48	; 0x30
   128a8:	orr	r1, r0, r1, lsr #6
   128ac:	strb	r1, [r5, r2]
   128b0:	add	r2, r8, #2
   128b4:	cmp	r2, sl
   128b8:	lsrcc	r1, r4, #3
   128bc:	movcc	r0, #6
   128c0:	bficc	r1, r0, #3, #29
   128c4:	strbcc	r1, [r5, r2]
   128c8:	mov	r0, #6
   128cc:	bfi	r4, r0, #3, #29
   128d0:	add	r8, r8, #3
   128d4:	mov	r2, #1
   128d8:	mov	r0, r3
   128dc:	b	12928 <__assert_fail@plt+0x1ae0>
   128e0:	cmp	r8, sl
   128e4:	strbcc	r4, [r5, r8]
   128e8:	ldr	r1, [sp, #76]	; 0x4c
   128ec:	ldrb	r4, [r1, r7]
   128f0:	add	r8, r8, #1
   128f4:	mov	r7, r3
   128f8:	ldr	r1, [sp, #48]	; 0x30
   128fc:	tst	r1, #1
   12900:	beq	1282c <__assert_fail@plt+0x19e4>
   12904:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12908:	tst	r1, #1
   1290c:	beq	12920 <__assert_fail@plt+0x1ad8>
   12910:	cmp	r8, sl
   12914:	movcc	r1, #92	; 0x5c
   12918:	strbcc	r1, [r5, r8]
   1291c:	add	r8, r8, #1
   12920:	mov	r1, #0
   12924:	str	r1, [fp, #-52]	; 0xffffffcc
   12928:	and	r9, r2, #1
   1292c:	add	r3, r7, #1
   12930:	ldr	r1, [sp, #52]	; 0x34
   12934:	cmp	r1, r3
   12938:	bls	1297c <__assert_fail@plt+0x1b34>
   1293c:	cmp	r9, #0
   12940:	movwne	r9, #1
   12944:	mvn	r1, r0
   12948:	orr	r1, r1, r9
   1294c:	tst	r1, #1
   12950:	bne	128e0 <__assert_fail@plt+0x1a98>
   12954:	cmp	r8, sl
   12958:	movcc	r1, #39	; 0x27
   1295c:	strbcc	r1, [r5, r8]
   12960:	add	r1, r8, #1
   12964:	cmp	r1, sl
   12968:	movcc	r0, #39	; 0x27
   1296c:	strbcc	r0, [r5, r1]
   12970:	add	r8, r8, #2
   12974:	mov	r0, #0
   12978:	b	128e0 <__assert_fail@plt+0x1a98>
   1297c:	str	r0, [fp, #-56]	; 0xffffffc8
   12980:	cmp	r9, #0
   12984:	movwne	r9, #1
   12988:	cmp	r9, #0
   1298c:	beq	12510 <__assert_fail@plt+0x16c8>
   12990:	b	12544 <__assert_fail@plt+0x16fc>
   12994:	mov	r6, #0
   12998:	b	129d8 <__assert_fail@plt+0x1b90>
   1299c:	mov	r6, #0
   129a0:	ldr	r0, [sp, #48]	; 0x30
   129a4:	cmp	r0, lr
   129a8:	bcs	129d8 <__assert_fail@plt+0x1b90>
   129ac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   129b0:	add	r0, ip, r7
   129b4:	ldr	r2, [sp, #52]	; 0x34
   129b8:	ldrb	r1, [r0, r2]
   129bc:	cmp	r1, #0
   129c0:	beq	124cc <__assert_fail@plt+0x1684>
   129c4:	add	r2, r2, #1
   129c8:	add	r1, r7, r2
   129cc:	cmp	r1, lr
   129d0:	bcc	129b8 <__assert_fail@plt+0x1b70>
   129d4:	b	124cc <__assert_fail@plt+0x1684>
   129d8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   129dc:	ldr	r2, [sp, #52]	; 0x34
   129e0:	b	124cc <__assert_fail@plt+0x1684>
   129e4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   129e8:	eor	r0, r1, #2
   129ec:	orr	r0, r0, r8
   129f0:	clz	r0, r0
   129f4:	lsr	r0, r0, #5
   129f8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   129fc:	tst	r3, r0
   12a00:	bne	12acc <__assert_fail@plt+0x1c84>
   12a04:	mov	r6, r5
   12a08:	subs	r0, r1, #2
   12a0c:	movwne	r0, #1
   12a10:	orr	r0, r3, r0
   12a14:	tst	r0, #1
   12a18:	ldr	r2, [sp, #92]	; 0x5c
   12a1c:	ldreq	r0, [sp, #64]	; 0x40
   12a20:	eoreq	r0, r0, #1
   12a24:	tsteq	r0, #1
   12a28:	bne	12a68 <__assert_fail@plt+0x1c20>
   12a2c:	mov	r9, lr
   12a30:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12a34:	tst	r0, #1
   12a38:	bne	12b34 <__assert_fail@plt+0x1cec>
   12a3c:	ldr	r0, [sp, #84]	; 0x54
   12a40:	cmp	r0, #0
   12a44:	beq	12a68 <__assert_fail@plt+0x1c20>
   12a48:	mov	r0, #0
   12a4c:	str	r0, [fp, #-48]	; 0xffffffd0
   12a50:	mov	r1, #2
   12a54:	cmp	sl, #0
   12a58:	mov	r0, r2
   12a5c:	mov	r4, r3
   12a60:	ldr	r7, [sp, #84]	; 0x54
   12a64:	beq	11c40 <__assert_fail@plt+0xdf8>
   12a68:	ldr	r1, [fp, #-84]	; 0xffffffac
   12a6c:	clz	r0, r1
   12a70:	lsr	r0, r0, #5
   12a74:	orr	r0, r0, r3
   12a78:	tst	r0, #1
   12a7c:	bne	12aa8 <__assert_fail@plt+0x1c60>
   12a80:	ldrb	r0, [r1]
   12a84:	cmp	r0, #0
   12a88:	beq	12aa8 <__assert_fail@plt+0x1c60>
   12a8c:	add	r1, r1, #1
   12a90:	cmp	r8, sl
   12a94:	strbcc	r0, [r6, r8]
   12a98:	add	r8, r8, #1
   12a9c:	ldrb	r0, [r1], #1
   12aa0:	cmp	r0, #0
   12aa4:	bne	12a90 <__assert_fail@plt+0x1c48>
   12aa8:	cmp	r8, sl
   12aac:	movcc	r0, #0
   12ab0:	strbcc	r0, [r6, r8]
   12ab4:	b	12b28 <__assert_fail@plt+0x1ce0>
   12ab8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12abc:	mov	lr, r4
   12ac0:	b	12acc <__assert_fail@plt+0x1c84>
   12ac4:	ldr	r5, [sp, #28]
   12ac8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12acc:	mov	r0, #0
   12ad0:	ldr	r1, [fp, #12]
   12ad4:	bic	r1, r1, #2
   12ad8:	mov	r2, #2
   12adc:	ldr	r3, [sp, #92]	; 0x5c
   12ae0:	tst	r3, #1
   12ae4:	movwne	r2, #4
   12ae8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12aec:	cmp	r3, #2
   12af0:	movne	r2, r3
   12af4:	str	r2, [sp]
   12af8:	str	r1, [sp, #4]
   12afc:	str	r0, [sp, #8]
   12b00:	ldr	r0, [sp, #80]	; 0x50
   12b04:	str	r0, [sp, #12]
   12b08:	ldr	r0, [sp, #88]	; 0x58
   12b0c:	str	r0, [sp, #16]
   12b10:	mov	r0, r5
   12b14:	mov	r1, sl
   12b18:	mov	r2, ip
   12b1c:	mov	r3, lr
   12b20:	bl	11bb4 <__assert_fail@plt+0xd6c>
   12b24:	mov	r8, r0
   12b28:	mov	r0, r8
   12b2c:	sub	sp, fp, #28
   12b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b34:	mov	r0, #5
   12b38:	str	r0, [sp]
   12b3c:	ldr	r0, [fp, #12]
   12b40:	str	r0, [sp, #4]
   12b44:	ldr	r0, [fp, #16]
   12b48:	str	r0, [sp, #8]
   12b4c:	ldr	r0, [sp, #80]	; 0x50
   12b50:	str	r0, [sp, #12]
   12b54:	ldr	r0, [sp, #88]	; 0x58
   12b58:	str	r0, [sp, #16]
   12b5c:	mov	r0, r6
   12b60:	ldr	r1, [sp, #84]	; 0x54
   12b64:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12b68:	mov	r3, r9
   12b6c:	b	12b20 <__assert_fail@plt+0x1cd8>
   12b70:	bl	10e30 <abort@plt>
   12b74:	mov	r3, r2
   12b78:	mov	r2, #0
   12b7c:	b	12b80 <__assert_fail@plt+0x1d38>
   12b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b84:	add	fp, sp, #28
   12b88:	sub	sp, sp, #36	; 0x24
   12b8c:	mov	r4, r2
   12b90:	str	r2, [sp, #24]
   12b94:	mov	r5, r1
   12b98:	mov	r6, r0
   12b9c:	str	r0, [sp, #20]
   12ba0:	movw	r8, #24880	; 0x6130
   12ba4:	movt	r8, #2
   12ba8:	cmp	r3, #0
   12bac:	movne	r8, r3
   12bb0:	bl	10d94 <__errno_location@plt>
   12bb4:	str	r0, [sp, #28]
   12bb8:	ldm	r8, {r3, r9}
   12bbc:	ldr	r1, [r8, #40]	; 0x28
   12bc0:	ldr	r2, [r8, #44]	; 0x2c
   12bc4:	ldr	r7, [r0]
   12bc8:	str	r7, [sp, #32]
   12bcc:	add	sl, r8, #8
   12bd0:	cmp	r4, #0
   12bd4:	orreq	r9, r9, #1
   12bd8:	stm	sp, {r3, r9, sl}
   12bdc:	str	r1, [sp, #12]
   12be0:	str	r2, [sp, #16]
   12be4:	mov	r0, #0
   12be8:	mov	r1, #0
   12bec:	mov	r2, r6
   12bf0:	mov	r3, r5
   12bf4:	mov	r7, r5
   12bf8:	bl	11bb4 <__assert_fail@plt+0xd6c>
   12bfc:	mov	r5, r0
   12c00:	add	r4, r0, #1
   12c04:	mov	r0, r4
   12c08:	bl	13a88 <__assert_fail@plt+0x2c40>
   12c0c:	mov	r6, r0
   12c10:	ldr	r0, [r8]
   12c14:	ldr	r1, [r8, #40]	; 0x28
   12c18:	ldr	r2, [r8, #44]	; 0x2c
   12c1c:	stm	sp, {r0, r9, sl}
   12c20:	str	r1, [sp, #12]
   12c24:	str	r2, [sp, #16]
   12c28:	mov	r0, r6
   12c2c:	mov	r1, r4
   12c30:	ldr	r2, [sp, #20]
   12c34:	mov	r3, r7
   12c38:	bl	11bb4 <__assert_fail@plt+0xd6c>
   12c3c:	ldr	r0, [sp, #24]
   12c40:	ldr	r1, [sp, #32]
   12c44:	ldr	r2, [sp, #28]
   12c48:	str	r1, [r2]
   12c4c:	cmp	r0, #0
   12c50:	strne	r5, [r0]
   12c54:	mov	r0, r6
   12c58:	sub	sp, fp, #28
   12c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12c64:	add	fp, sp, #24
   12c68:	movw	r8, #24784	; 0x60d0
   12c6c:	movt	r8, #2
   12c70:	ldr	r4, [r8]
   12c74:	movw	r5, #24788	; 0x60d4
   12c78:	movt	r5, #2
   12c7c:	ldr	r0, [r5]
   12c80:	cmp	r0, #2
   12c84:	blt	12cb0 <__assert_fail@plt+0x1e68>
   12c88:	add	r7, r4, #12
   12c8c:	mov	r6, #0
   12c90:	ldr	r0, [r7, r6, lsl #3]
   12c94:	bl	143a0 <__assert_fail@plt+0x3558>
   12c98:	add	r0, r6, #1
   12c9c:	ldr	r1, [r5]
   12ca0:	add	r2, r6, #2
   12ca4:	cmp	r2, r1
   12ca8:	mov	r6, r0
   12cac:	blt	12c90 <__assert_fail@plt+0x1e48>
   12cb0:	ldr	r0, [r4, #4]
   12cb4:	movw	r9, #24928	; 0x6160
   12cb8:	movt	r9, #2
   12cbc:	cmp	r0, r9
   12cc0:	movw	r7, #24792	; 0x60d8
   12cc4:	movt	r7, #2
   12cc8:	beq	12cd8 <__assert_fail@plt+0x1e90>
   12ccc:	bl	143a0 <__assert_fail@plt+0x3558>
   12cd0:	mov	r0, #256	; 0x100
   12cd4:	stm	r7, {r0, r9}
   12cd8:	cmp	r4, r7
   12cdc:	beq	12cec <__assert_fail@plt+0x1ea4>
   12ce0:	mov	r0, r4
   12ce4:	bl	143a0 <__assert_fail@plt+0x3558>
   12ce8:	str	r7, [r8]
   12cec:	mov	r0, #1
   12cf0:	str	r0, [r5]
   12cf4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12cf8:	movw	r3, #24880	; 0x6130
   12cfc:	movt	r3, #2
   12d00:	mvn	r2, #0
   12d04:	b	12d08 <__assert_fail@plt+0x1ec0>
   12d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d0c:	add	fp, sp, #28
   12d10:	sub	sp, sp, #44	; 0x2c
   12d14:	mov	r7, r3
   12d18:	str	r2, [sp, #36]	; 0x24
   12d1c:	str	r1, [sp, #32]
   12d20:	mov	r5, r0
   12d24:	bl	10d94 <__errno_location@plt>
   12d28:	cmp	r5, #0
   12d2c:	bmi	12e9c <__assert_fail@plt+0x2054>
   12d30:	cmn	r5, #-2147483647	; 0x80000001
   12d34:	beq	12e9c <__assert_fail@plt+0x2054>
   12d38:	movw	r4, #24784	; 0x60d0
   12d3c:	movt	r4, #2
   12d40:	ldr	r6, [r4]
   12d44:	str	r0, [sp, #28]
   12d48:	ldr	r0, [r0]
   12d4c:	str	r0, [sp, #24]
   12d50:	movw	r8, #24788	; 0x60d4
   12d54:	movt	r8, #2
   12d58:	ldr	r1, [r8]
   12d5c:	cmp	r1, r5
   12d60:	ble	12d6c <__assert_fail@plt+0x1f24>
   12d64:	mov	sl, r6
   12d68:	b	12dd8 <__assert_fail@plt+0x1f90>
   12d6c:	str	r1, [fp, #-32]	; 0xffffffe0
   12d70:	mov	r0, #8
   12d74:	str	r0, [sp]
   12d78:	movw	r9, #24792	; 0x60d8
   12d7c:	movt	r9, #2
   12d80:	subs	r0, r6, r9
   12d84:	movne	r0, r6
   12d88:	sub	r1, r5, r1
   12d8c:	add	r2, r1, #1
   12d90:	sub	r1, fp, #32
   12d94:	mvn	r3, #-2147483648	; 0x80000000
   12d98:	bl	13b64 <__assert_fail@plt+0x2d1c>
   12d9c:	mov	sl, r0
   12da0:	str	r0, [r4]
   12da4:	cmp	r6, r9
   12da8:	bne	12db4 <__assert_fail@plt+0x1f6c>
   12dac:	ldrd	r0, [r9]
   12db0:	stm	sl, {r0, r1}
   12db4:	ldr	r1, [r8]
   12db8:	add	r0, sl, r1, lsl #3
   12dbc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12dc0:	sub	r1, r2, r1
   12dc4:	lsl	r2, r1, #3
   12dc8:	mov	r1, #0
   12dcc:	bl	10dac <memset@plt>
   12dd0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12dd4:	str	r0, [r8]
   12dd8:	mov	r9, sl
   12ddc:	ldr	r6, [r9, r5, lsl #3]!
   12de0:	ldr	r4, [r9, #4]!
   12de4:	ldm	r7, {r0, r1}
   12de8:	ldr	r2, [r7, #40]	; 0x28
   12dec:	ldr	r3, [r7, #44]	; 0x2c
   12df0:	orr	r8, r1, #1
   12df4:	add	r1, r7, #8
   12df8:	stm	sp, {r0, r8}
   12dfc:	str	r1, [sp, #20]
   12e00:	add	r0, sp, #8
   12e04:	stm	r0, {r1, r2, r3}
   12e08:	mov	r0, r4
   12e0c:	mov	r1, r6
   12e10:	ldr	r2, [sp, #32]
   12e14:	ldr	r3, [sp, #36]	; 0x24
   12e18:	bl	11bb4 <__assert_fail@plt+0xd6c>
   12e1c:	cmp	r6, r0
   12e20:	bhi	12e84 <__assert_fail@plt+0x203c>
   12e24:	add	r6, r0, #1
   12e28:	str	r6, [sl, r5, lsl #3]
   12e2c:	movw	r0, #24928	; 0x6160
   12e30:	movt	r0, #2
   12e34:	cmp	r4, r0
   12e38:	beq	12e44 <__assert_fail@plt+0x1ffc>
   12e3c:	mov	r0, r4
   12e40:	bl	143a0 <__assert_fail@plt+0x3558>
   12e44:	mov	r0, r6
   12e48:	bl	13a88 <__assert_fail@plt+0x2c40>
   12e4c:	mov	r4, r0
   12e50:	str	r0, [r9]
   12e54:	ldr	r0, [r7]
   12e58:	ldr	r1, [r7, #40]	; 0x28
   12e5c:	ldr	r2, [r7, #44]	; 0x2c
   12e60:	stm	sp, {r0, r8}
   12e64:	ldr	r0, [sp, #20]
   12e68:	add	r3, sp, #8
   12e6c:	stm	r3, {r0, r1, r2}
   12e70:	mov	r0, r4
   12e74:	mov	r1, r6
   12e78:	ldr	r2, [sp, #32]
   12e7c:	ldr	r3, [sp, #36]	; 0x24
   12e80:	bl	11bb4 <__assert_fail@plt+0xd6c>
   12e84:	ldr	r0, [sp, #28]
   12e88:	ldr	r1, [sp, #24]
   12e8c:	str	r1, [r0]
   12e90:	mov	r0, r4
   12e94:	sub	sp, fp, #28
   12e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e9c:	bl	10e30 <abort@plt>
   12ea0:	movw	r3, #24880	; 0x6130
   12ea4:	movt	r3, #2
   12ea8:	b	12d08 <__assert_fail@plt+0x1ec0>
   12eac:	mov	r1, r0
   12eb0:	mov	r0, #0
   12eb4:	b	12cf8 <__assert_fail@plt+0x1eb0>
   12eb8:	mov	r2, r1
   12ebc:	mov	r1, r0
   12ec0:	mov	r0, #0
   12ec4:	b	12ea0 <__assert_fail@plt+0x2058>
   12ec8:	push	{r4, r5, r6, sl, fp, lr}
   12ecc:	add	fp, sp, #16
   12ed0:	sub	sp, sp, #48	; 0x30
   12ed4:	mov	r4, r2
   12ed8:	mov	r5, r0
   12edc:	mov	r6, sp
   12ee0:	mov	r0, r6
   12ee4:	bl	12f04 <__assert_fail@plt+0x20bc>
   12ee8:	mov	r0, r5
   12eec:	mov	r1, r4
   12ef0:	mvn	r2, #0
   12ef4:	mov	r3, r6
   12ef8:	bl	12d08 <__assert_fail@plt+0x1ec0>
   12efc:	sub	sp, fp, #16
   12f00:	pop	{r4, r5, r6, sl, fp, pc}
   12f04:	push	{fp, lr}
   12f08:	mov	fp, sp
   12f0c:	vmov.i32	q8, #0	; 0x00000000
   12f10:	mov	r2, #32
   12f14:	mov	r3, r0
   12f18:	vst1.32	{d16-d17}, [r3], r2
   12f1c:	vst1.32	{d16-d17}, [r3]
   12f20:	add	r2, r0, #16
   12f24:	vst1.32	{d16-d17}, [r2]
   12f28:	cmp	r1, #10
   12f2c:	strne	r1, [r0]
   12f30:	popne	{fp, pc}
   12f34:	bl	10e30 <abort@plt>
   12f38:	push	{r4, r5, r6, r7, fp, lr}
   12f3c:	add	fp, sp, #16
   12f40:	sub	sp, sp, #48	; 0x30
   12f44:	mov	r4, r3
   12f48:	mov	r5, r2
   12f4c:	mov	r6, r0
   12f50:	mov	r7, sp
   12f54:	mov	r0, r7
   12f58:	bl	12f04 <__assert_fail@plt+0x20bc>
   12f5c:	mov	r0, r6
   12f60:	mov	r1, r5
   12f64:	mov	r2, r4
   12f68:	mov	r3, r7
   12f6c:	bl	12d08 <__assert_fail@plt+0x1ec0>
   12f70:	sub	sp, fp, #16
   12f74:	pop	{r4, r5, r6, r7, fp, pc}
   12f78:	mov	r2, r1
   12f7c:	mov	r1, r0
   12f80:	mov	r0, #0
   12f84:	b	12ec8 <__assert_fail@plt+0x2080>
   12f88:	mov	r3, r2
   12f8c:	mov	r2, r1
   12f90:	mov	r1, r0
   12f94:	mov	r0, #0
   12f98:	b	12f38 <__assert_fail@plt+0x20f0>
   12f9c:	push	{r4, r5, r6, sl, fp, lr}
   12fa0:	add	fp, sp, #16
   12fa4:	sub	sp, sp, #48	; 0x30
   12fa8:	mov	r4, r1
   12fac:	mov	r5, r0
   12fb0:	movw	r0, #24880	; 0x6130
   12fb4:	movt	r0, #2
   12fb8:	add	r1, r0, #16
   12fbc:	mov	r3, #32
   12fc0:	vld1.64	{d16-d17}, [r0], r3
   12fc4:	vld1.64	{d18-d19}, [r1]
   12fc8:	mov	r6, sp
   12fcc:	add	r1, r6, #16
   12fd0:	vld1.64	{d20-d21}, [r0]
   12fd4:	vst1.64	{d18-d19}, [r1]
   12fd8:	mov	r0, r6
   12fdc:	vst1.64	{d16-d17}, [r0], r3
   12fe0:	vst1.64	{d20-d21}, [r0]
   12fe4:	mov	r0, r6
   12fe8:	mov	r1, r2
   12fec:	mov	r2, #1
   12ff0:	bl	11aa8 <__assert_fail@plt+0xc60>
   12ff4:	mov	r0, #0
   12ff8:	mov	r1, r5
   12ffc:	mov	r2, r4
   13000:	mov	r3, r6
   13004:	bl	12d08 <__assert_fail@plt+0x1ec0>
   13008:	sub	sp, fp, #16
   1300c:	pop	{r4, r5, r6, sl, fp, pc}
   13010:	mov	r2, r1
   13014:	mvn	r1, #0
   13018:	b	12f9c <__assert_fail@plt+0x2154>
   1301c:	mov	r1, #58	; 0x3a
   13020:	b	13010 <__assert_fail@plt+0x21c8>
   13024:	mov	r2, #58	; 0x3a
   13028:	b	12f9c <__assert_fail@plt+0x2154>
   1302c:	push	{r4, r5, r6, sl, fp, lr}
   13030:	add	fp, sp, #16
   13034:	sub	sp, sp, #48	; 0x30
   13038:	mov	r4, r2
   1303c:	mov	r5, r0
   13040:	mov	r6, sp
   13044:	mov	r0, r6
   13048:	bl	12f04 <__assert_fail@plt+0x20bc>
   1304c:	mov	r0, r6
   13050:	mov	r1, #58	; 0x3a
   13054:	mov	r2, #1
   13058:	bl	11aa8 <__assert_fail@plt+0xc60>
   1305c:	mov	r0, r5
   13060:	mov	r1, r4
   13064:	mvn	r2, #0
   13068:	mov	r3, r6
   1306c:	bl	12d08 <__assert_fail@plt+0x1ec0>
   13070:	sub	sp, fp, #16
   13074:	pop	{r4, r5, r6, sl, fp, pc}
   13078:	push	{fp, lr}
   1307c:	mov	fp, sp
   13080:	sub	sp, sp, #8
   13084:	mvn	ip, #0
   13088:	str	ip, [sp]
   1308c:	bl	13098 <__assert_fail@plt+0x2250>
   13090:	mov	sp, fp
   13094:	pop	{fp, pc}
   13098:	push	{r4, r5, r6, r7, fp, lr}
   1309c:	add	fp, sp, #16
   130a0:	sub	sp, sp, #48	; 0x30
   130a4:	mov	r7, r3
   130a8:	mov	r5, r0
   130ac:	movw	r0, #24880	; 0x6130
   130b0:	movt	r0, #2
   130b4:	add	r3, r0, #16
   130b8:	mov	r4, #32
   130bc:	vld1.64	{d16-d17}, [r0], r4
   130c0:	vld1.64	{d18-d19}, [r3]
   130c4:	mov	r6, sp
   130c8:	add	r3, r6, #16
   130cc:	vld1.64	{d20-d21}, [r0]
   130d0:	vst1.64	{d18-d19}, [r3]
   130d4:	mov	r0, r6
   130d8:	vst1.64	{d16-d17}, [r0], r4
   130dc:	vst1.64	{d20-d21}, [r0]
   130e0:	mov	r0, r6
   130e4:	bl	11b00 <__assert_fail@plt+0xcb8>
   130e8:	ldr	r2, [fp, #8]
   130ec:	mov	r0, r5
   130f0:	mov	r1, r7
   130f4:	mov	r3, r6
   130f8:	bl	12d08 <__assert_fail@plt+0x1ec0>
   130fc:	sub	sp, fp, #16
   13100:	pop	{r4, r5, r6, r7, fp, pc}
   13104:	mov	r3, r2
   13108:	mov	r2, r1
   1310c:	mov	r1, r0
   13110:	mov	r0, #0
   13114:	b	13078 <__assert_fail@plt+0x2230>
   13118:	push	{fp, lr}
   1311c:	mov	fp, sp
   13120:	sub	sp, sp, #8
   13124:	mov	ip, r2
   13128:	mov	r2, r1
   1312c:	mov	r1, r0
   13130:	str	r3, [sp]
   13134:	mov	r0, #0
   13138:	mov	r3, ip
   1313c:	bl	13098 <__assert_fail@plt+0x2250>
   13140:	mov	sp, fp
   13144:	pop	{fp, pc}
   13148:	movw	r3, #24800	; 0x60e0
   1314c:	movt	r3, #2
   13150:	b	12d08 <__assert_fail@plt+0x1ec0>
   13154:	mov	r2, r1
   13158:	mov	r1, r0
   1315c:	mov	r0, #0
   13160:	b	13148 <__assert_fail@plt+0x2300>
   13164:	mvn	r2, #0
   13168:	b	13148 <__assert_fail@plt+0x2300>
   1316c:	mov	r1, r0
   13170:	mov	r0, #0
   13174:	b	13164 <__assert_fail@plt+0x231c>
   13178:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1317c:	add	fp, sp, #24
   13180:	sub	sp, sp, #16
   13184:	mov	r4, r1
   13188:	mov	r5, r0
   1318c:	mov	r7, #0
   13190:	mov	r0, #0
   13194:	mov	r1, r5
   13198:	mov	r2, #5
   1319c:	bl	10ca4 <dcgettext@plt>
   131a0:	cmp	r0, r5
   131a4:	beq	131b0 <__assert_fail@plt+0x2368>
   131a8:	sub	sp, fp, #24
   131ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131b0:	bl	144c0 <__assert_fail@plt+0x3678>
   131b4:	mov	r6, r0
   131b8:	mov	r8, #56	; 0x38
   131bc:	mov	r0, #45	; 0x2d
   131c0:	stm	sp, {r0, r8}
   131c4:	str	r7, [sp, #8]
   131c8:	str	r7, [sp, #12]
   131cc:	mov	r0, r6
   131d0:	mov	r1, #85	; 0x55
   131d4:	mov	r2, #84	; 0x54
   131d8:	mov	r3, #70	; 0x46
   131dc:	bl	13274 <__assert_fail@plt+0x242c>
   131e0:	cmp	r0, #0
   131e4:	beq	13200 <__assert_fail@plt+0x23b8>
   131e8:	ldrb	r1, [r5]
   131ec:	movw	r2, #20016	; 0x4e30
   131f0:	movt	r2, #1
   131f4:	movw	r0, #20020	; 0x4e34
   131f8:	movt	r0, #1
   131fc:	b	13244 <__assert_fail@plt+0x23fc>
   13200:	mov	r0, #48	; 0x30
   13204:	mov	r1, #51	; 0x33
   13208:	str	r8, [sp]
   1320c:	stmib	sp, {r0, r1}
   13210:	str	r0, [sp, #12]
   13214:	mov	r0, r6
   13218:	mov	r1, #71	; 0x47
   1321c:	mov	r2, #66	; 0x42
   13220:	mov	r3, #49	; 0x31
   13224:	bl	13274 <__assert_fail@plt+0x242c>
   13228:	cmp	r0, #0
   1322c:	beq	13254 <__assert_fail@plt+0x240c>
   13230:	ldrb	r1, [r5]
   13234:	movw	r2, #20024	; 0x4e38
   13238:	movt	r2, #1
   1323c:	movw	r0, #20028	; 0x4e3c
   13240:	movt	r0, #1
   13244:	cmp	r1, #96	; 0x60
   13248:	moveq	r0, r2
   1324c:	sub	sp, fp, #24
   13250:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13254:	movw	r1, #20010	; 0x4e2a
   13258:	movt	r1, #1
   1325c:	movw	r0, #20014	; 0x4e2e
   13260:	movt	r0, #1
   13264:	cmp	r4, #9
   13268:	moveq	r0, r1
   1326c:	sub	sp, fp, #24
   13270:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13274:	push	{r4, r5, r6, r7, fp, lr}
   13278:	add	fp, sp, #16
   1327c:	sub	sp, sp, #16
   13280:	mov	r4, r3
   13284:	mov	r5, r2
   13288:	mov	r7, r1
   1328c:	mov	r6, r0
   13290:	mov	r0, r1
   13294:	bl	141a4 <__assert_fail@plt+0x335c>
   13298:	ldrb	r1, [r6]
   1329c:	cmp	r0, #0
   132a0:	andne	r1, r1, #223	; 0xdf
   132a4:	mov	r0, #0
   132a8:	cmp	r1, r7
   132ac:	bne	132e4 <__assert_fail@plt+0x249c>
   132b0:	cmp	r7, #0
   132b4:	beq	132ec <__assert_fail@plt+0x24a4>
   132b8:	ldr	r0, [fp, #20]
   132bc:	ldr	r1, [fp, #16]
   132c0:	ldr	r2, [fp, #12]
   132c4:	ldr	r3, [fp, #8]
   132c8:	str	r2, [sp]
   132cc:	str	r1, [sp, #4]
   132d0:	str	r0, [sp, #8]
   132d4:	mov	r0, r6
   132d8:	mov	r1, r5
   132dc:	mov	r2, r4
   132e0:	bl	132f8 <__assert_fail@plt+0x24b0>
   132e4:	sub	sp, fp, #16
   132e8:	pop	{r4, r5, r6, r7, fp, pc}
   132ec:	mov	r0, #1
   132f0:	sub	sp, fp, #16
   132f4:	pop	{r4, r5, r6, r7, fp, pc}
   132f8:	push	{r4, r5, r6, r7, fp, lr}
   132fc:	add	fp, sp, #16
   13300:	sub	sp, sp, #8
   13304:	mov	r4, r3
   13308:	mov	r5, r2
   1330c:	mov	r7, r1
   13310:	mov	r6, r0
   13314:	mov	r0, r1
   13318:	bl	141a4 <__assert_fail@plt+0x335c>
   1331c:	ldrb	r1, [r6, #1]
   13320:	cmp	r0, #0
   13324:	andne	r1, r1, #223	; 0xdf
   13328:	mov	r0, #0
   1332c:	cmp	r1, r7
   13330:	bne	13360 <__assert_fail@plt+0x2518>
   13334:	cmp	r7, #0
   13338:	beq	13368 <__assert_fail@plt+0x2520>
   1333c:	ldr	r0, [fp, #16]
   13340:	ldr	r1, [fp, #12]
   13344:	ldr	r3, [fp, #8]
   13348:	str	r1, [sp]
   1334c:	str	r0, [sp, #4]
   13350:	mov	r0, r6
   13354:	mov	r1, r5
   13358:	mov	r2, r4
   1335c:	bl	13374 <__assert_fail@plt+0x252c>
   13360:	sub	sp, fp, #16
   13364:	pop	{r4, r5, r6, r7, fp, pc}
   13368:	mov	r0, #1
   1336c:	sub	sp, fp, #16
   13370:	pop	{r4, r5, r6, r7, fp, pc}
   13374:	push	{r4, r5, r6, r7, fp, lr}
   13378:	add	fp, sp, #16
   1337c:	sub	sp, sp, #8
   13380:	mov	r4, r3
   13384:	mov	r5, r2
   13388:	mov	r7, r1
   1338c:	mov	r6, r0
   13390:	mov	r0, r1
   13394:	bl	141a4 <__assert_fail@plt+0x335c>
   13398:	ldrb	r1, [r6, #2]
   1339c:	cmp	r0, #0
   133a0:	andne	r1, r1, #223	; 0xdf
   133a4:	mov	r0, #0
   133a8:	cmp	r1, r7
   133ac:	bne	133d4 <__assert_fail@plt+0x258c>
   133b0:	cmp	r7, #0
   133b4:	beq	133dc <__assert_fail@plt+0x2594>
   133b8:	ldr	r0, [fp, #12]
   133bc:	ldr	r3, [fp, #8]
   133c0:	str	r0, [sp]
   133c4:	mov	r0, r6
   133c8:	mov	r1, r5
   133cc:	mov	r2, r4
   133d0:	bl	133e8 <__assert_fail@plt+0x25a0>
   133d4:	sub	sp, fp, #16
   133d8:	pop	{r4, r5, r6, r7, fp, pc}
   133dc:	mov	r0, #1
   133e0:	sub	sp, fp, #16
   133e4:	pop	{r4, r5, r6, r7, fp, pc}
   133e8:	push	{r4, r5, r6, r7, fp, lr}
   133ec:	add	fp, sp, #16
   133f0:	mov	r4, r3
   133f4:	mov	r5, r2
   133f8:	mov	r7, r1
   133fc:	mov	r6, r0
   13400:	mov	r0, r1
   13404:	bl	141a4 <__assert_fail@plt+0x335c>
   13408:	ldrb	r1, [r6, #3]
   1340c:	ldr	r3, [fp, #8]
   13410:	cmp	r0, #0
   13414:	andne	r1, r1, #223	; 0xdf
   13418:	mov	r0, #0
   1341c:	cmp	r1, r7
   13420:	bne	13444 <__assert_fail@plt+0x25fc>
   13424:	cmp	r7, #0
   13428:	beq	13440 <__assert_fail@plt+0x25f8>
   1342c:	mov	r0, r6
   13430:	mov	r1, r5
   13434:	mov	r2, r4
   13438:	pop	{r4, r5, r6, r7, fp, lr}
   1343c:	b	13448 <__assert_fail@plt+0x2600>
   13440:	mov	r0, #1
   13444:	pop	{r4, r5, r6, r7, fp, pc}
   13448:	push	{r4, r5, r6, r7, fp, lr}
   1344c:	add	fp, sp, #16
   13450:	mov	r4, r3
   13454:	mov	r5, r2
   13458:	mov	r7, r1
   1345c:	mov	r6, r0
   13460:	mov	r0, r1
   13464:	bl	141a4 <__assert_fail@plt+0x335c>
   13468:	ldrb	r1, [r6, #4]
   1346c:	cmp	r0, #0
   13470:	andne	r1, r1, #223	; 0xdf
   13474:	mov	r0, #0
   13478:	cmp	r1, r7
   1347c:	bne	134a0 <__assert_fail@plt+0x2658>
   13480:	cmp	r7, #0
   13484:	beq	1349c <__assert_fail@plt+0x2654>
   13488:	mov	r0, r6
   1348c:	mov	r1, r5
   13490:	mov	r2, r4
   13494:	pop	{r4, r5, r6, r7, fp, lr}
   13498:	b	134a4 <__assert_fail@plt+0x265c>
   1349c:	mov	r0, #1
   134a0:	pop	{r4, r5, r6, r7, fp, pc}
   134a4:	push	{r4, r5, r6, sl, fp, lr}
   134a8:	add	fp, sp, #16
   134ac:	mov	r4, r2
   134b0:	mov	r6, r1
   134b4:	mov	r5, r0
   134b8:	mov	r0, r1
   134bc:	bl	141a4 <__assert_fail@plt+0x335c>
   134c0:	ldrb	r1, [r5, #5]
   134c4:	cmp	r0, #0
   134c8:	andne	r1, r1, #223	; 0xdf
   134cc:	mov	r0, #0
   134d0:	cmp	r1, r6
   134d4:	bne	134f4 <__assert_fail@plt+0x26ac>
   134d8:	cmp	r6, #0
   134dc:	beq	134f0 <__assert_fail@plt+0x26a8>
   134e0:	mov	r0, r5
   134e4:	mov	r1, r4
   134e8:	pop	{r4, r5, r6, sl, fp, lr}
   134ec:	b	134f8 <__assert_fail@plt+0x26b0>
   134f0:	mov	r0, #1
   134f4:	pop	{r4, r5, r6, sl, fp, pc}
   134f8:	push	{r4, r5, fp, lr}
   134fc:	add	fp, sp, #8
   13500:	mov	r5, r1
   13504:	mov	r4, r0
   13508:	mov	r0, r1
   1350c:	bl	141a4 <__assert_fail@plt+0x335c>
   13510:	ldrb	r1, [r4, #6]
   13514:	cmp	r0, #0
   13518:	andne	r1, r1, #223	; 0xdf
   1351c:	mov	r0, #0
   13520:	cmp	r1, r5
   13524:	popne	{r4, r5, fp, pc}
   13528:	cmp	r5, #0
   1352c:	beq	1353c <__assert_fail@plt+0x26f4>
   13530:	mov	r0, r4
   13534:	pop	{r4, r5, fp, lr}
   13538:	b	13544 <__assert_fail@plt+0x26fc>
   1353c:	mov	r0, #1
   13540:	pop	{r4, r5, fp, pc}
   13544:	push	{r4, sl, fp, lr}
   13548:	add	fp, sp, #8
   1354c:	mov	r4, r0
   13550:	mov	r0, #0
   13554:	bl	141a4 <__assert_fail@plt+0x335c>
   13558:	ldrb	r1, [r4, #7]
   1355c:	cmp	r0, #0
   13560:	beq	13574 <__assert_fail@plt+0x272c>
   13564:	tst	r1, #223	; 0xdf
   13568:	bne	1357c <__assert_fail@plt+0x2734>
   1356c:	mov	r0, #1
   13570:	pop	{r4, sl, fp, pc}
   13574:	cmp	r1, #0
   13578:	beq	1356c <__assert_fail@plt+0x2724>
   1357c:	mov	r0, #0
   13580:	pop	{r4, sl, fp, pc}
   13584:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13588:	add	fp, sp, #24
   1358c:	sub	sp, sp, #32
   13590:	mov	r4, r2
   13594:	mov	r8, r0
   13598:	ldr	r6, [fp, #12]
   1359c:	ldr	r7, [fp, #8]
   135a0:	cmp	r1, #0
   135a4:	beq	135cc <__assert_fail@plt+0x2784>
   135a8:	mov	r5, r1
   135ac:	str	r4, [sp]
   135b0:	str	r3, [sp, #4]
   135b4:	movw	r2, #20116	; 0x4e94
   135b8:	movt	r2, #1
   135bc:	mov	r0, r8
   135c0:	mov	r1, #1
   135c4:	mov	r3, r5
   135c8:	b	135e4 <__assert_fail@plt+0x279c>
   135cc:	str	r3, [sp]
   135d0:	movw	r2, #20128	; 0x4ea0
   135d4:	movt	r2, #1
   135d8:	mov	r0, r8
   135dc:	mov	r1, #1
   135e0:	mov	r3, r4
   135e4:	bl	10dd0 <__fprintf_chk@plt>
   135e8:	movw	r1, #20135	; 0x4ea7
   135ec:	movt	r1, #1
   135f0:	mov	r0, #0
   135f4:	mov	r2, #5
   135f8:	bl	10ca4 <dcgettext@plt>
   135fc:	mov	r3, r0
   13600:	movw	r0, #2022	; 0x7e6
   13604:	str	r0, [sp]
   13608:	movw	r2, #20853	; 0x5175
   1360c:	movt	r2, #1
   13610:	mov	r0, r8
   13614:	mov	r1, #1
   13618:	bl	10dd0 <__fprintf_chk@plt>
   1361c:	movw	r4, #18726	; 0x4926
   13620:	movt	r4, #1
   13624:	mov	r0, r4
   13628:	mov	r1, r8
   1362c:	bl	10c50 <fputs_unlocked@plt>
   13630:	movw	r1, #20139	; 0x4eab
   13634:	movt	r1, #1
   13638:	mov	r0, #0
   1363c:	mov	r2, #5
   13640:	bl	10ca4 <dcgettext@plt>
   13644:	mov	r2, r0
   13648:	movw	r3, #20310	; 0x4f56
   1364c:	movt	r3, #1
   13650:	mov	r0, r8
   13654:	mov	r1, #1
   13658:	bl	10dd0 <__fprintf_chk@plt>
   1365c:	mov	r0, r4
   13660:	mov	r1, r8
   13664:	bl	10c50 <fputs_unlocked@plt>
   13668:	cmp	r6, #9
   1366c:	bhi	136a8 <__assert_fail@plt+0x2860>
   13670:	add	r0, pc, #0
   13674:	ldr	pc, [r0, r6, lsl #2]
   13678:	andeq	r3, r1, r0, lsr #13
   1367c:			; <UNDEFINED> instruction: 0x000136b4
   13680:	andeq	r3, r1, r4, ror #13
   13684:	andeq	r3, r1, ip, lsl #14
   13688:	andeq	r3, r1, r4, lsr r7
   1368c:	andeq	r3, r1, ip, asr r7
   13690:	andeq	r3, r1, r4, lsl #15
   13694:			; <UNDEFINED> instruction: 0x000137bc
   13698:	andeq	r3, r1, ip, asr r8
   1369c:	andeq	r3, r1, r4, lsl #16
   136a0:	sub	sp, fp, #24
   136a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136a8:	movw	r1, #20663	; 0x50b7
   136ac:	movt	r1, #1
   136b0:	b	1380c <__assert_fail@plt+0x29c4>
   136b4:	movw	r1, #20344	; 0x4f78
   136b8:	movt	r1, #1
   136bc:	mov	r0, #0
   136c0:	mov	r2, #5
   136c4:	bl	10ca4 <dcgettext@plt>
   136c8:	mov	r2, r0
   136cc:	ldr	r3, [r7]
   136d0:	mov	r0, r8
   136d4:	mov	r1, #1
   136d8:	sub	sp, fp, #24
   136dc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   136e0:	b	10dd0 <__fprintf_chk@plt>
   136e4:	movw	r1, #20360	; 0x4f88
   136e8:	movt	r1, #1
   136ec:	mov	r0, #0
   136f0:	mov	r2, #5
   136f4:	bl	10ca4 <dcgettext@plt>
   136f8:	mov	r2, r0
   136fc:	ldr	r3, [r7]
   13700:	ldr	r0, [r7, #4]
   13704:	str	r0, [sp]
   13708:	b	137f8 <__assert_fail@plt+0x29b0>
   1370c:	movw	r1, #20383	; 0x4f9f
   13710:	movt	r1, #1
   13714:	mov	r0, #0
   13718:	mov	r2, #5
   1371c:	bl	10ca4 <dcgettext@plt>
   13720:	mov	r2, r0
   13724:	ldr	r3, [r7]
   13728:	ldmib	r7, {r0, r1}
   1372c:	stm	sp, {r0, r1}
   13730:	b	137f8 <__assert_fail@plt+0x29b0>
   13734:	movw	r1, #20411	; 0x4fbb
   13738:	movt	r1, #1
   1373c:	mov	r0, #0
   13740:	mov	r2, #5
   13744:	bl	10ca4 <dcgettext@plt>
   13748:	mov	r2, r0
   1374c:	ldr	r3, [r7]
   13750:	ldmib	r7, {r0, r1, r7}
   13754:	stm	sp, {r0, r1, r7}
   13758:	b	137f8 <__assert_fail@plt+0x29b0>
   1375c:	movw	r1, #20443	; 0x4fdb
   13760:	movt	r1, #1
   13764:	mov	r0, #0
   13768:	mov	r2, #5
   1376c:	bl	10ca4 <dcgettext@plt>
   13770:	mov	r2, r0
   13774:	ldr	r3, [r7]
   13778:	ldmib	r7, {r0, r1, r6, r7}
   1377c:	stm	sp, {r0, r1, r6, r7}
   13780:	b	137f8 <__assert_fail@plt+0x29b0>
   13784:	movw	r1, #20479	; 0x4fff
   13788:	movt	r1, #1
   1378c:	mov	r0, #0
   13790:	mov	r2, #5
   13794:	bl	10ca4 <dcgettext@plt>
   13798:	mov	r2, r0
   1379c:	ldr	r3, [r7]
   137a0:	ldmib	r7, {r0, r1, r6}
   137a4:	ldr	r5, [r7, #16]
   137a8:	ldr	r7, [r7, #20]
   137ac:	stm	sp, {r0, r1, r6}
   137b0:	str	r5, [sp, #12]
   137b4:	str	r7, [sp, #16]
   137b8:	b	137f8 <__assert_fail@plt+0x29b0>
   137bc:	movw	r1, #20519	; 0x5027
   137c0:	movt	r1, #1
   137c4:	mov	r0, #0
   137c8:	mov	r2, #5
   137cc:	bl	10ca4 <dcgettext@plt>
   137d0:	mov	r2, r0
   137d4:	ldr	r3, [r7]
   137d8:	ldmib	r7, {r0, r1, r6}
   137dc:	ldr	r5, [r7, #16]
   137e0:	ldr	r4, [r7, #20]
   137e4:	ldr	r7, [r7, #24]
   137e8:	stm	sp, {r0, r1, r6}
   137ec:	str	r5, [sp, #12]
   137f0:	str	r4, [sp, #16]
   137f4:	str	r7, [sp, #20]
   137f8:	mov	r0, r8
   137fc:	mov	r1, #1
   13800:	b	138ac <__assert_fail@plt+0x2a64>
   13804:	movw	r1, #20611	; 0x5083
   13808:	movt	r1, #1
   1380c:	mov	r0, #0
   13810:	mov	r2, #5
   13814:	bl	10ca4 <dcgettext@plt>
   13818:	mov	ip, r0
   1381c:	ldr	r3, [r7]
   13820:	ldr	r0, [r7, #4]
   13824:	ldr	r1, [r7, #8]
   13828:	ldr	r6, [r7, #12]
   1382c:	ldr	r5, [r7, #16]
   13830:	ldr	r4, [r7, #20]
   13834:	ldr	r2, [r7, #24]
   13838:	ldr	lr, [r7, #28]
   1383c:	ldr	r7, [r7, #32]
   13840:	stm	sp, {r0, r1, r6}
   13844:	str	r5, [sp, #12]
   13848:	str	r4, [sp, #16]
   1384c:	str	r2, [sp, #20]
   13850:	str	lr, [sp, #24]
   13854:	str	r7, [sp, #28]
   13858:	b	138a0 <__assert_fail@plt+0x2a58>
   1385c:	movw	r1, #20563	; 0x5053
   13860:	movt	r1, #1
   13864:	mov	r0, #0
   13868:	mov	r2, #5
   1386c:	bl	10ca4 <dcgettext@plt>
   13870:	mov	ip, r0
   13874:	ldr	r3, [r7]
   13878:	ldmib	r7, {r0, r1, r6}
   1387c:	ldr	r5, [r7, #16]
   13880:	ldr	r4, [r7, #20]
   13884:	ldr	r2, [r7, #24]
   13888:	ldr	r7, [r7, #28]
   1388c:	stm	sp, {r0, r1, r6}
   13890:	str	r5, [sp, #12]
   13894:	str	r4, [sp, #16]
   13898:	str	r2, [sp, #20]
   1389c:	str	r7, [sp, #24]
   138a0:	mov	r0, r8
   138a4:	mov	r1, #1
   138a8:	mov	r2, ip
   138ac:	bl	10dd0 <__fprintf_chk@plt>
   138b0:	sub	sp, fp, #24
   138b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138b8:	push	{r4, sl, fp, lr}
   138bc:	add	fp, sp, #8
   138c0:	sub	sp, sp, #8
   138c4:	mov	lr, #0
   138c8:	ldr	ip, [fp, #8]
   138cc:	ldr	r4, [ip, lr, lsl #2]
   138d0:	add	lr, lr, #1
   138d4:	cmp	r4, #0
   138d8:	bne	138cc <__assert_fail@plt+0x2a84>
   138dc:	sub	r4, lr, #1
   138e0:	str	ip, [sp]
   138e4:	str	r4, [sp, #4]
   138e8:	bl	13584 <__assert_fail@plt+0x273c>
   138ec:	sub	sp, fp, #8
   138f0:	pop	{r4, sl, fp, pc}
   138f4:	push	{r4, r5, fp, lr}
   138f8:	add	fp, sp, #8
   138fc:	sub	sp, sp, #48	; 0x30
   13900:	mov	ip, #0
   13904:	ldr	r4, [fp, #8]
   13908:	add	lr, sp, #8
   1390c:	ldr	r5, [r4]
   13910:	str	r5, [lr, ip, lsl #2]
   13914:	cmp	r5, #0
   13918:	beq	13930 <__assert_fail@plt+0x2ae8>
   1391c:	add	ip, ip, #1
   13920:	add	r4, r4, #4
   13924:	cmp	ip, #10
   13928:	bne	1390c <__assert_fail@plt+0x2ac4>
   1392c:	mov	ip, #10
   13930:	str	lr, [sp]
   13934:	str	ip, [sp, #4]
   13938:	bl	13584 <__assert_fail@plt+0x273c>
   1393c:	sub	sp, fp, #8
   13940:	pop	{r4, r5, fp, pc}
   13944:	push	{fp, lr}
   13948:	mov	fp, sp
   1394c:	sub	sp, sp, #8
   13950:	add	ip, fp, #8
   13954:	str	ip, [sp, #4]
   13958:	str	ip, [sp]
   1395c:	bl	138f4 <__assert_fail@plt+0x2aac>
   13960:	mov	sp, fp
   13964:	pop	{fp, pc}
   13968:	push	{fp, lr}
   1396c:	mov	fp, sp
   13970:	movw	r0, #24860	; 0x611c
   13974:	movt	r0, #2
   13978:	ldr	r1, [r0]
   1397c:	movw	r0, #18726	; 0x4926
   13980:	movt	r0, #1
   13984:	bl	10c50 <fputs_unlocked@plt>
   13988:	movw	r1, #20723	; 0x50f3
   1398c:	movt	r1, #1
   13990:	mov	r0, #0
   13994:	mov	r2, #5
   13998:	bl	10ca4 <dcgettext@plt>
   1399c:	mov	r1, r0
   139a0:	movw	r2, #20743	; 0x5107
   139a4:	movt	r2, #1
   139a8:	mov	r0, #1
   139ac:	bl	10db8 <__printf_chk@plt>
   139b0:	movw	r1, #20765	; 0x511d
   139b4:	movt	r1, #1
   139b8:	mov	r0, #0
   139bc:	mov	r2, #5
   139c0:	bl	10ca4 <dcgettext@plt>
   139c4:	mov	r1, r0
   139c8:	movw	r2, #19428	; 0x4be4
   139cc:	movt	r2, #1
   139d0:	movw	r3, #19581	; 0x4c7d
   139d4:	movt	r3, #1
   139d8:	mov	r0, #1
   139dc:	bl	10db8 <__printf_chk@plt>
   139e0:	movw	r1, #20785	; 0x5131
   139e4:	movt	r1, #1
   139e8:	mov	r0, #0
   139ec:	mov	r2, #5
   139f0:	bl	10ca4 <dcgettext@plt>
   139f4:	mov	r1, r0
   139f8:	movw	r2, #20824	; 0x5158
   139fc:	movt	r2, #1
   13a00:	mov	r0, #1
   13a04:	pop	{fp, lr}
   13a08:	b	10db8 <__printf_chk@plt>
   13a0c:	b	13a10 <__assert_fail@plt+0x2bc8>
   13a10:	push	{r4, r5, r6, sl, fp, lr}
   13a14:	add	fp, sp, #16
   13a18:	mov	r4, r2
   13a1c:	mov	r5, r1
   13a20:	mov	r6, r0
   13a24:	bl	1455c <__assert_fail@plt+0x3714>
   13a28:	cmp	r0, #0
   13a2c:	popne	{r4, r5, r6, sl, fp, pc}
   13a30:	cmp	r6, #0
   13a34:	beq	13a48 <__assert_fail@plt+0x2c00>
   13a38:	cmp	r5, #0
   13a3c:	cmpne	r4, #0
   13a40:	bne	13a48 <__assert_fail@plt+0x2c00>
   13a44:	pop	{r4, r5, r6, sl, fp, pc}
   13a48:	bl	13dd4 <__assert_fail@plt+0x2f8c>
   13a4c:	push	{fp, lr}
   13a50:	mov	fp, sp
   13a54:	bl	13e6c <__assert_fail@plt+0x3024>
   13a58:	pop	{fp, lr}
   13a5c:	b	13a60 <__assert_fail@plt+0x2c18>
   13a60:	cmp	r0, #0
   13a64:	bxne	lr
   13a68:	push	{fp, lr}
   13a6c:	mov	fp, sp
   13a70:	bl	13dd4 <__assert_fail@plt+0x2f8c>
   13a74:	push	{fp, lr}
   13a78:	mov	fp, sp
   13a7c:	bl	1448c <__assert_fail@plt+0x3644>
   13a80:	pop	{fp, lr}
   13a84:	b	13a60 <__assert_fail@plt+0x2c18>
   13a88:	b	13a4c <__assert_fail@plt+0x2c04>
   13a8c:	push	{r4, r5, fp, lr}
   13a90:	add	fp, sp, #8
   13a94:	mov	r4, r1
   13a98:	mov	r5, r0
   13a9c:	bl	13e9c <__assert_fail@plt+0x3054>
   13aa0:	cmp	r0, #0
   13aa4:	popne	{r4, r5, fp, pc}
   13aa8:	cmp	r5, #0
   13aac:	beq	13abc <__assert_fail@plt+0x2c74>
   13ab0:	cmp	r4, #0
   13ab4:	bne	13abc <__assert_fail@plt+0x2c74>
   13ab8:	pop	{r4, r5, fp, pc}
   13abc:	bl	13dd4 <__assert_fail@plt+0x2f8c>
   13ac0:	push	{fp, lr}
   13ac4:	mov	fp, sp
   13ac8:	bl	14490 <__assert_fail@plt+0x3648>
   13acc:	pop	{fp, lr}
   13ad0:	b	13a60 <__assert_fail@plt+0x2c18>
   13ad4:	push	{fp, lr}
   13ad8:	mov	fp, sp
   13adc:	bl	144a0 <__assert_fail@plt+0x3658>
   13ae0:	pop	{fp, lr}
   13ae4:	b	13a60 <__assert_fail@plt+0x2c18>
   13ae8:	mov	r2, r1
   13aec:	mov	r1, r0
   13af0:	mov	r0, #0
   13af4:	b	13a10 <__assert_fail@plt+0x2bc8>
   13af8:	mov	r2, r1
   13afc:	mov	r1, r0
   13b00:	mov	r0, #0
   13b04:	b	13ad4 <__assert_fail@plt+0x2c8c>
   13b08:	mov	r2, #1
   13b0c:	b	13b10 <__assert_fail@plt+0x2cc8>
   13b10:	push	{r4, r5, fp, lr}
   13b14:	add	fp, sp, #8
   13b18:	mov	r4, r1
   13b1c:	ldr	r5, [r1]
   13b20:	cmp	r0, #0
   13b24:	beq	13b3c <__assert_fail@plt+0x2cf4>
   13b28:	mov	r1, #1
   13b2c:	add	r1, r1, r5, lsr #1
   13b30:	adds	r5, r5, r1
   13b34:	bcc	13b54 <__assert_fail@plt+0x2d0c>
   13b38:	bl	13dd4 <__assert_fail@plt+0x2f8c>
   13b3c:	cmp	r5, #0
   13b40:	bne	13b54 <__assert_fail@plt+0x2d0c>
   13b44:	mov	r1, #64	; 0x40
   13b48:	udiv	r5, r1, r2
   13b4c:	cmp	r2, #64	; 0x40
   13b50:	addhi	r5, r5, #1
   13b54:	mov	r1, r5
   13b58:	bl	13a10 <__assert_fail@plt+0x2bc8>
   13b5c:	str	r5, [r4]
   13b60:	pop	{r4, r5, fp, pc}
   13b64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b68:	add	fp, sp, #24
   13b6c:	mov	r8, r1
   13b70:	ldr	r6, [r1]
   13b74:	add	r1, r6, r6, asr #1
   13b78:	cmp	r1, r6
   13b7c:	mvnvs	r1, #-2147483648	; 0x80000000
   13b80:	cmp	r1, r3
   13b84:	mov	r5, r1
   13b88:	movgt	r5, r3
   13b8c:	cmn	r3, #1
   13b90:	movle	r5, r1
   13b94:	ldr	r4, [fp, #8]
   13b98:	cmn	r4, #1
   13b9c:	ble	13bc4 <__assert_fail@plt+0x2d7c>
   13ba0:	cmp	r4, #0
   13ba4:	beq	13c18 <__assert_fail@plt+0x2dd0>
   13ba8:	cmn	r5, #1
   13bac:	ble	13bec <__assert_fail@plt+0x2da4>
   13bb0:	mvn	r7, #-2147483648	; 0x80000000
   13bb4:	udiv	r1, r7, r4
   13bb8:	cmp	r1, r5
   13bbc:	bge	13c18 <__assert_fail@plt+0x2dd0>
   13bc0:	b	13c28 <__assert_fail@plt+0x2de0>
   13bc4:	cmn	r5, #1
   13bc8:	ble	13c08 <__assert_fail@plt+0x2dc0>
   13bcc:	cmn	r4, #1
   13bd0:	beq	13c18 <__assert_fail@plt+0x2dd0>
   13bd4:	mov	r1, #-2147483648	; 0x80000000
   13bd8:	sdiv	r1, r1, r4
   13bdc:	mvn	r7, #-2147483648	; 0x80000000
   13be0:	cmp	r1, r5
   13be4:	bge	13c18 <__assert_fail@plt+0x2dd0>
   13be8:	b	13c28 <__assert_fail@plt+0x2de0>
   13bec:	beq	13c18 <__assert_fail@plt+0x2dd0>
   13bf0:	mov	r1, #-2147483648	; 0x80000000
   13bf4:	sdiv	r1, r1, r5
   13bf8:	mvn	r7, #-2147483648	; 0x80000000
   13bfc:	cmp	r1, r4
   13c00:	bge	13c18 <__assert_fail@plt+0x2dd0>
   13c04:	b	13c28 <__assert_fail@plt+0x2de0>
   13c08:	mvn	r7, #-2147483648	; 0x80000000
   13c0c:	sdiv	r1, r7, r4
   13c10:	cmp	r5, r1
   13c14:	blt	13c28 <__assert_fail@plt+0x2de0>
   13c18:	mul	r1, r5, r4
   13c1c:	mov	r7, #64	; 0x40
   13c20:	cmp	r1, #63	; 0x3f
   13c24:	bgt	13c30 <__assert_fail@plt+0x2de8>
   13c28:	sdiv	r5, r7, r4
   13c2c:	mul	r1, r5, r4
   13c30:	cmp	r0, #0
   13c34:	moveq	r7, #0
   13c38:	streq	r7, [r8]
   13c3c:	sub	r7, r5, r6
   13c40:	cmp	r7, r2
   13c44:	bge	13cf0 <__assert_fail@plt+0x2ea8>
   13c48:	add	r5, r6, r2
   13c4c:	mov	r1, #0
   13c50:	cmp	r5, r3
   13c54:	mov	r2, #0
   13c58:	movwgt	r2, #1
   13c5c:	cmn	r3, #1
   13c60:	movwgt	r1, #1
   13c64:	cmp	r5, r6
   13c68:	bvs	13cd8 <__assert_fail@plt+0x2e90>
   13c6c:	ands	r1, r1, r2
   13c70:	bne	13cd8 <__assert_fail@plt+0x2e90>
   13c74:	cmn	r4, #1
   13c78:	ble	13ca0 <__assert_fail@plt+0x2e58>
   13c7c:	cmp	r4, #0
   13c80:	beq	13cec <__assert_fail@plt+0x2ea4>
   13c84:	cmn	r5, #1
   13c88:	ble	13cc4 <__assert_fail@plt+0x2e7c>
   13c8c:	mvn	r1, #-2147483648	; 0x80000000
   13c90:	udiv	r1, r1, r4
   13c94:	cmp	r1, r5
   13c98:	bge	13cec <__assert_fail@plt+0x2ea4>
   13c9c:	b	13cd8 <__assert_fail@plt+0x2e90>
   13ca0:	cmn	r5, #1
   13ca4:	ble	13cdc <__assert_fail@plt+0x2e94>
   13ca8:	cmn	r4, #1
   13cac:	beq	13cec <__assert_fail@plt+0x2ea4>
   13cb0:	mov	r1, #-2147483648	; 0x80000000
   13cb4:	sdiv	r1, r1, r4
   13cb8:	cmp	r1, r5
   13cbc:	bge	13cec <__assert_fail@plt+0x2ea4>
   13cc0:	b	13cd8 <__assert_fail@plt+0x2e90>
   13cc4:	beq	13cec <__assert_fail@plt+0x2ea4>
   13cc8:	mov	r1, #-2147483648	; 0x80000000
   13ccc:	sdiv	r1, r1, r5
   13cd0:	cmp	r1, r4
   13cd4:	bge	13cec <__assert_fail@plt+0x2ea4>
   13cd8:	bl	13dd4 <__assert_fail@plt+0x2f8c>
   13cdc:	mvn	r1, #-2147483648	; 0x80000000
   13ce0:	sdiv	r1, r1, r4
   13ce4:	cmp	r5, r1
   13ce8:	blt	13cd8 <__assert_fail@plt+0x2e90>
   13cec:	mul	r1, r5, r4
   13cf0:	bl	13a8c <__assert_fail@plt+0x2c44>
   13cf4:	str	r5, [r8]
   13cf8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13cfc:	mov	r1, #1
   13d00:	b	13d04 <__assert_fail@plt+0x2ebc>
   13d04:	push	{fp, lr}
   13d08:	mov	fp, sp
   13d0c:	bl	13e18 <__assert_fail@plt+0x2fd0>
   13d10:	pop	{fp, lr}
   13d14:	b	13a60 <__assert_fail@plt+0x2c18>
   13d18:	mov	r1, #1
   13d1c:	b	13d20 <__assert_fail@plt+0x2ed8>
   13d20:	push	{fp, lr}
   13d24:	mov	fp, sp
   13d28:	bl	1449c <__assert_fail@plt+0x3654>
   13d2c:	pop	{fp, lr}
   13d30:	b	13a60 <__assert_fail@plt+0x2c18>
   13d34:	push	{r4, r5, fp, lr}
   13d38:	add	fp, sp, #8
   13d3c:	mov	r4, r1
   13d40:	mov	r5, r0
   13d44:	mov	r0, r1
   13d48:	bl	13a4c <__assert_fail@plt+0x2c04>
   13d4c:	mov	r1, r5
   13d50:	mov	r2, r4
   13d54:	pop	{r4, r5, fp, lr}
   13d58:	b	10c8c <memcpy@plt>
   13d5c:	push	{r4, r5, fp, lr}
   13d60:	add	fp, sp, #8
   13d64:	mov	r4, r1
   13d68:	mov	r5, r0
   13d6c:	mov	r0, r1
   13d70:	bl	13a74 <__assert_fail@plt+0x2c2c>
   13d74:	mov	r1, r5
   13d78:	mov	r2, r4
   13d7c:	pop	{r4, r5, fp, lr}
   13d80:	b	10c8c <memcpy@plt>
   13d84:	push	{r4, r5, fp, lr}
   13d88:	add	fp, sp, #8
   13d8c:	mov	r4, r1
   13d90:	mov	r5, r0
   13d94:	add	r0, r1, #1
   13d98:	bl	13a74 <__assert_fail@plt+0x2c2c>
   13d9c:	mov	r1, #0
   13da0:	strb	r1, [r0, r4]
   13da4:	mov	r1, r5
   13da8:	mov	r2, r4
   13dac:	pop	{r4, r5, fp, lr}
   13db0:	b	10c8c <memcpy@plt>
   13db4:	push	{r4, sl, fp, lr}
   13db8:	add	fp, sp, #8
   13dbc:	mov	r4, r0
   13dc0:	bl	10d88 <strlen@plt>
   13dc4:	add	r1, r0, #1
   13dc8:	mov	r0, r4
   13dcc:	pop	{r4, sl, fp, lr}
   13dd0:	b	13d34 <__assert_fail@plt+0x2eec>
   13dd4:	push	{fp, lr}
   13dd8:	mov	fp, sp
   13ddc:	movw	r0, #24780	; 0x60cc
   13de0:	movt	r0, #2
   13de4:	ldr	r4, [r0]
   13de8:	movw	r1, #20900	; 0x51a4
   13dec:	movt	r1, #1
   13df0:	mov	r0, #0
   13df4:	mov	r2, #5
   13df8:	bl	10ca4 <dcgettext@plt>
   13dfc:	mov	r3, r0
   13e00:	movw	r2, #19863	; 0x4d97
   13e04:	movt	r2, #1
   13e08:	mov	r0, r4
   13e0c:	mov	r1, #0
   13e10:	bl	10d1c <error@plt>
   13e14:	bl	10e30 <abort@plt>
   13e18:	clz	r2, r1
   13e1c:	lsr	r2, r2, #5
   13e20:	clz	r3, r0
   13e24:	lsr	r3, r3, #5
   13e28:	orrs	r2, r3, r2
   13e2c:	movwne	r1, #1
   13e30:	movwne	r0, #1
   13e34:	cmp	r1, #0
   13e38:	beq	13e68 <__assert_fail@plt+0x3020>
   13e3c:	mvn	r2, #-2147483648	; 0x80000000
   13e40:	udiv	r2, r2, r1
   13e44:	cmp	r2, r0
   13e48:	bcs	13e68 <__assert_fail@plt+0x3020>
   13e4c:	push	{fp, lr}
   13e50:	mov	fp, sp
   13e54:	bl	10d94 <__errno_location@plt>
   13e58:	mov	r1, #12
   13e5c:	str	r1, [r0]
   13e60:	mov	r0, #0
   13e64:	pop	{fp, pc}
   13e68:	b	10c44 <calloc@plt>
   13e6c:	cmp	r0, #0
   13e70:	movweq	r0, #1
   13e74:	cmn	r0, #1
   13e78:	ble	13e80 <__assert_fail@plt+0x3038>
   13e7c:	b	10d34 <malloc@plt>
   13e80:	push	{fp, lr}
   13e84:	mov	fp, sp
   13e88:	bl	10d94 <__errno_location@plt>
   13e8c:	mov	r1, #12
   13e90:	str	r1, [r0]
   13e94:	mov	r0, #0
   13e98:	pop	{fp, pc}
   13e9c:	push	{fp, lr}
   13ea0:	mov	fp, sp
   13ea4:	cmp	r0, #0
   13ea8:	beq	13ec4 <__assert_fail@plt+0x307c>
   13eac:	cmp	r1, #0
   13eb0:	beq	13ed0 <__assert_fail@plt+0x3088>
   13eb4:	cmn	r1, #1
   13eb8:	ble	13edc <__assert_fail@plt+0x3094>
   13ebc:	pop	{fp, lr}
   13ec0:	b	10cb0 <realloc@plt>
   13ec4:	mov	r0, r1
   13ec8:	pop	{fp, lr}
   13ecc:	b	13e6c <__assert_fail@plt+0x3024>
   13ed0:	bl	143a0 <__assert_fail@plt+0x3558>
   13ed4:	mov	r0, #0
   13ed8:	pop	{fp, pc}
   13edc:	bl	10d94 <__errno_location@plt>
   13ee0:	mov	r1, #12
   13ee4:	str	r1, [r0]
   13ee8:	mov	r0, #0
   13eec:	pop	{fp, pc}
   13ef0:	mov	r1, r0
   13ef4:	sub	r2, r0, #65	; 0x41
   13ef8:	mov	r0, #1
   13efc:	cmp	r2, #26
   13f00:	subcs	r2, r1, #97	; 0x61
   13f04:	cmpcs	r2, #26
   13f08:	bcs	13f10 <__assert_fail@plt+0x30c8>
   13f0c:	bx	lr
   13f10:	sub	r1, r1, #48	; 0x30
   13f14:	cmp	r1, #10
   13f18:	movcs	r0, #0
   13f1c:	bx	lr
   13f20:	mov	r1, r0
   13f24:	sub	r2, r0, #65	; 0x41
   13f28:	mov	r0, #1
   13f2c:	cmp	r2, #26
   13f30:	subcs	r1, r1, #97	; 0x61
   13f34:	cmpcs	r1, #26
   13f38:	movcs	r0, #0
   13f3c:	bx	lr
   13f40:	mov	r1, #0
   13f44:	cmp	r0, #128	; 0x80
   13f48:	movwcc	r1, #1
   13f4c:	mov	r0, r1
   13f50:	bx	lr
   13f54:	sub	r1, r0, #9
   13f58:	clz	r1, r1
   13f5c:	lsr	r1, r1, #5
   13f60:	sub	r0, r0, #32
   13f64:	clz	r0, r0
   13f68:	lsr	r0, r0, #5
   13f6c:	orr	r0, r0, r1
   13f70:	bx	lr
   13f74:	mov	r1, r0
   13f78:	mov	r0, #1
   13f7c:	cmp	r1, #32
   13f80:	bxcc	lr
   13f84:	cmp	r1, #127	; 0x7f
   13f88:	movne	r0, #0
   13f8c:	bx	lr
   13f90:	sub	r1, r0, #48	; 0x30
   13f94:	mov	r0, #0
   13f98:	cmp	r1, #10
   13f9c:	movwcc	r0, #1
   13fa0:	bx	lr
   13fa4:	sub	r1, r0, #33	; 0x21
   13fa8:	mov	r0, #0
   13fac:	cmp	r1, #94	; 0x5e
   13fb0:	movwcc	r0, #1
   13fb4:	bx	lr
   13fb8:	sub	r1, r0, #97	; 0x61
   13fbc:	mov	r0, #0
   13fc0:	cmp	r1, #26
   13fc4:	movwcc	r0, #1
   13fc8:	bx	lr
   13fcc:	sub	r1, r0, #32
   13fd0:	mov	r0, #0
   13fd4:	cmp	r1, #95	; 0x5f
   13fd8:	movwcc	r0, #1
   13fdc:	bx	lr
   13fe0:	sub	r1, r0, #33	; 0x21
   13fe4:	cmp	r1, #93	; 0x5d
   13fe8:	bhi	14174 <__assert_fail@plt+0x332c>
   13fec:	mov	r0, #1
   13ff0:	add	r2, pc, #0
   13ff4:	ldr	pc, [r2, r1, lsl #2]
   13ff8:	andeq	r4, r1, r0, ror r1
   13ffc:	andeq	r4, r1, r0, ror r1
   14000:	andeq	r4, r1, r0, ror r1
   14004:	andeq	r4, r1, r0, ror r1
   14008:	andeq	r4, r1, r0, ror r1
   1400c:	andeq	r4, r1, r0, ror r1
   14010:	andeq	r4, r1, r0, ror r1
   14014:	andeq	r4, r1, r0, ror r1
   14018:	andeq	r4, r1, r0, ror r1
   1401c:	andeq	r4, r1, r0, ror r1
   14020:	andeq	r4, r1, r0, ror r1
   14024:	andeq	r4, r1, r0, ror r1
   14028:	andeq	r4, r1, r0, ror r1
   1402c:	andeq	r4, r1, r0, ror r1
   14030:	andeq	r4, r1, r0, ror r1
   14034:	andeq	r4, r1, r4, ror r1
   14038:	andeq	r4, r1, r4, ror r1
   1403c:	andeq	r4, r1, r4, ror r1
   14040:	andeq	r4, r1, r4, ror r1
   14044:	andeq	r4, r1, r4, ror r1
   14048:	andeq	r4, r1, r4, ror r1
   1404c:	andeq	r4, r1, r4, ror r1
   14050:	andeq	r4, r1, r4, ror r1
   14054:	andeq	r4, r1, r4, ror r1
   14058:	andeq	r4, r1, r4, ror r1
   1405c:	andeq	r4, r1, r0, ror r1
   14060:	andeq	r4, r1, r0, ror r1
   14064:	andeq	r4, r1, r0, ror r1
   14068:	andeq	r4, r1, r0, ror r1
   1406c:	andeq	r4, r1, r0, ror r1
   14070:	andeq	r4, r1, r0, ror r1
   14074:	andeq	r4, r1, r0, ror r1
   14078:	andeq	r4, r1, r4, ror r1
   1407c:	andeq	r4, r1, r4, ror r1
   14080:	andeq	r4, r1, r4, ror r1
   14084:	andeq	r4, r1, r4, ror r1
   14088:	andeq	r4, r1, r4, ror r1
   1408c:	andeq	r4, r1, r4, ror r1
   14090:	andeq	r4, r1, r4, ror r1
   14094:	andeq	r4, r1, r4, ror r1
   14098:	andeq	r4, r1, r4, ror r1
   1409c:	andeq	r4, r1, r4, ror r1
   140a0:	andeq	r4, r1, r4, ror r1
   140a4:	andeq	r4, r1, r4, ror r1
   140a8:	andeq	r4, r1, r4, ror r1
   140ac:	andeq	r4, r1, r4, ror r1
   140b0:	andeq	r4, r1, r4, ror r1
   140b4:	andeq	r4, r1, r4, ror r1
   140b8:	andeq	r4, r1, r4, ror r1
   140bc:	andeq	r4, r1, r4, ror r1
   140c0:	andeq	r4, r1, r4, ror r1
   140c4:	andeq	r4, r1, r4, ror r1
   140c8:	andeq	r4, r1, r4, ror r1
   140cc:	andeq	r4, r1, r4, ror r1
   140d0:	andeq	r4, r1, r4, ror r1
   140d4:	andeq	r4, r1, r4, ror r1
   140d8:	andeq	r4, r1, r4, ror r1
   140dc:	andeq	r4, r1, r4, ror r1
   140e0:	andeq	r4, r1, r0, ror r1
   140e4:	andeq	r4, r1, r0, ror r1
   140e8:	andeq	r4, r1, r0, ror r1
   140ec:	andeq	r4, r1, r0, ror r1
   140f0:	andeq	r4, r1, r0, ror r1
   140f4:	andeq	r4, r1, r0, ror r1
   140f8:	andeq	r4, r1, r4, ror r1
   140fc:	andeq	r4, r1, r4, ror r1
   14100:	andeq	r4, r1, r4, ror r1
   14104:	andeq	r4, r1, r4, ror r1
   14108:	andeq	r4, r1, r4, ror r1
   1410c:	andeq	r4, r1, r4, ror r1
   14110:	andeq	r4, r1, r4, ror r1
   14114:	andeq	r4, r1, r4, ror r1
   14118:	andeq	r4, r1, r4, ror r1
   1411c:	andeq	r4, r1, r4, ror r1
   14120:	andeq	r4, r1, r4, ror r1
   14124:	andeq	r4, r1, r4, ror r1
   14128:	andeq	r4, r1, r4, ror r1
   1412c:	andeq	r4, r1, r4, ror r1
   14130:	andeq	r4, r1, r4, ror r1
   14134:	andeq	r4, r1, r4, ror r1
   14138:	andeq	r4, r1, r4, ror r1
   1413c:	andeq	r4, r1, r4, ror r1
   14140:	andeq	r4, r1, r4, ror r1
   14144:	andeq	r4, r1, r4, ror r1
   14148:	andeq	r4, r1, r4, ror r1
   1414c:	andeq	r4, r1, r4, ror r1
   14150:	andeq	r4, r1, r4, ror r1
   14154:	andeq	r4, r1, r4, ror r1
   14158:	andeq	r4, r1, r4, ror r1
   1415c:	andeq	r4, r1, r4, ror r1
   14160:	andeq	r4, r1, r0, ror r1
   14164:	andeq	r4, r1, r0, ror r1
   14168:	andeq	r4, r1, r0, ror r1
   1416c:	andeq	r4, r1, r0, ror r1
   14170:	bx	lr
   14174:	mov	r0, #0
   14178:	bx	lr
   1417c:	sub	r0, r0, #9
   14180:	cmp	r0, #23
   14184:	movhi	r0, #0
   14188:	bxhi	lr
   1418c:	bic	r0, r0, #-16777216	; 0xff000000
   14190:	movw	r1, #31
   14194:	movt	r1, #128	; 0x80
   14198:	mov	r2, #1
   1419c:	and	r0, r2, r1, lsr r0
   141a0:	bx	lr
   141a4:	sub	r1, r0, #65	; 0x41
   141a8:	mov	r0, #0
   141ac:	cmp	r1, #26
   141b0:	movwcc	r0, #1
   141b4:	bx	lr
   141b8:	mov	r1, r0
   141bc:	sub	r2, r0, #48	; 0x30
   141c0:	mov	r0, #1
   141c4:	cmp	r2, #22
   141c8:	bhi	141e0 <__assert_fail@plt+0x3398>
   141cc:	mov	ip, #1
   141d0:	movw	r3, #1023	; 0x3ff
   141d4:	movt	r3, #126	; 0x7e
   141d8:	tst	r3, ip, lsl r2
   141dc:	bxne	lr
   141e0:	sub	r1, r1, #97	; 0x61
   141e4:	cmp	r1, #6
   141e8:	movcs	r0, #0
   141ec:	bxcs	lr
   141f0:	bx	lr
   141f4:	sub	r1, r0, #65	; 0x41
   141f8:	cmp	r1, #26
   141fc:	addcc	r0, r0, #32
   14200:	bx	lr
   14204:	sub	r1, r0, #97	; 0x61
   14208:	cmp	r1, #26
   1420c:	subcc	r0, r0, #32
   14210:	bx	lr
   14214:	push	{r4, r5, r6, sl, fp, lr}
   14218:	add	fp, sp, #16
   1421c:	mov	r4, r0
   14220:	bl	10cf8 <__fpending@plt>
   14224:	mov	r5, r0
   14228:	mov	r0, r4
   1422c:	bl	10d04 <ferror_unlocked@plt>
   14230:	mov	r6, r0
   14234:	mov	r0, r4
   14238:	bl	14298 <__assert_fail@plt+0x3450>
   1423c:	cmp	r6, #0
   14240:	beq	14264 <__assert_fail@plt+0x341c>
   14244:	mvn	r4, #0
   14248:	cmp	r0, #0
   1424c:	bne	14290 <__assert_fail@plt+0x3448>
   14250:	bl	10d94 <__errno_location@plt>
   14254:	mov	r1, #0
   14258:	str	r1, [r0]
   1425c:	mov	r0, r4
   14260:	pop	{r4, r5, r6, sl, fp, pc}
   14264:	cmp	r0, #0
   14268:	mov	r4, r0
   1426c:	mvnne	r4, #0
   14270:	cmp	r5, #0
   14274:	bne	14290 <__assert_fail@plt+0x3448>
   14278:	cmp	r0, #0
   1427c:	beq	14290 <__assert_fail@plt+0x3448>
   14280:	bl	10d94 <__errno_location@plt>
   14284:	ldr	r0, [r0]
   14288:	subs	r4, r0, #9
   1428c:	mvnne	r4, #0
   14290:	mov	r0, r4
   14294:	pop	{r4, r5, r6, sl, fp, pc}
   14298:	push	{r4, r5, fp, lr}
   1429c:	add	fp, sp, #8
   142a0:	sub	sp, sp, #8
   142a4:	mov	r4, r0
   142a8:	bl	10dc4 <fileno@plt>
   142ac:	cmn	r0, #1
   142b0:	ble	14328 <__assert_fail@plt+0x34e0>
   142b4:	mov	r0, r4
   142b8:	bl	10d4c <__freading@plt>
   142bc:	cmp	r0, #0
   142c0:	beq	142ec <__assert_fail@plt+0x34a4>
   142c4:	mov	r0, r4
   142c8:	bl	10dc4 <fileno@plt>
   142cc:	mov	r1, #1
   142d0:	str	r1, [sp]
   142d4:	mov	r2, #0
   142d8:	mov	r3, #0
   142dc:	bl	10ce0 <lseek64@plt>
   142e0:	and	r0, r0, r1
   142e4:	cmn	r0, #1
   142e8:	beq	14328 <__assert_fail@plt+0x34e0>
   142ec:	mov	r0, r4
   142f0:	bl	14338 <__assert_fail@plt+0x34f0>
   142f4:	cmp	r0, #0
   142f8:	beq	14328 <__assert_fail@plt+0x34e0>
   142fc:	bl	10d94 <__errno_location@plt>
   14300:	ldr	r5, [r0]
   14304:	mov	r0, r4
   14308:	bl	10ddc <fclose@plt>
   1430c:	cmp	r5, #0
   14310:	beq	14320 <__assert_fail@plt+0x34d8>
   14314:	bl	10d94 <__errno_location@plt>
   14318:	str	r5, [r0]
   1431c:	mvn	r0, #0
   14320:	sub	sp, fp, #8
   14324:	pop	{r4, r5, fp, pc}
   14328:	mov	r0, r4
   1432c:	sub	sp, fp, #8
   14330:	pop	{r4, r5, fp, lr}
   14334:	b	10ddc <fclose@plt>
   14338:	push	{r4, sl, fp, lr}
   1433c:	add	fp, sp, #8
   14340:	mov	r4, r0
   14344:	cmp	r0, #0
   14348:	beq	14360 <__assert_fail@plt+0x3518>
   1434c:	mov	r0, r4
   14350:	bl	10d4c <__freading@plt>
   14354:	cmp	r0, #0
   14358:	movne	r0, r4
   1435c:	blne	1436c <__assert_fail@plt+0x3524>
   14360:	mov	r0, r4
   14364:	pop	{r4, sl, fp, lr}
   14368:	b	10c68 <fflush@plt>
   1436c:	push	{fp, lr}
   14370:	mov	fp, sp
   14374:	sub	sp, sp, #8
   14378:	ldrb	r1, [r0, #1]
   1437c:	tst	r1, #1
   14380:	beq	14398 <__assert_fail@plt+0x3550>
   14384:	mov	r1, #1
   14388:	str	r1, [sp]
   1438c:	mov	r2, #0
   14390:	mov	r3, #0
   14394:	bl	143c8 <__assert_fail@plt+0x3580>
   14398:	mov	sp, fp
   1439c:	pop	{fp, pc}
   143a0:	push	{r4, r5, r6, sl, fp, lr}
   143a4:	add	fp, sp, #16
   143a8:	mov	r4, r0
   143ac:	bl	10d94 <__errno_location@plt>
   143b0:	mov	r5, r0
   143b4:	ldr	r6, [r0]
   143b8:	mov	r0, r4
   143bc:	bl	10c74 <free@plt>
   143c0:	str	r6, [r5]
   143c4:	pop	{r4, r5, r6, sl, fp, pc}
   143c8:	push	{r4, r5, r6, r7, fp, lr}
   143cc:	add	fp, sp, #16
   143d0:	sub	sp, sp, #8
   143d4:	mov	r5, r3
   143d8:	mov	r6, r2
   143dc:	mov	r4, r0
   143e0:	ldr	r0, [r0, #4]
   143e4:	ldr	r1, [r4, #8]
   143e8:	cmp	r1, r0
   143ec:	bne	14408 <__assert_fail@plt+0x35c0>
   143f0:	ldrd	r0, [r4, #16]
   143f4:	cmp	r1, r0
   143f8:	bne	14408 <__assert_fail@plt+0x35c0>
   143fc:	ldr	r0, [r4, #36]	; 0x24
   14400:	cmp	r0, #0
   14404:	beq	14420 <__assert_fail@plt+0x35d8>
   14408:	mov	r0, r4
   1440c:	mov	r2, r6
   14410:	mov	r3, r5
   14414:	sub	sp, fp, #16
   14418:	pop	{r4, r5, r6, r7, fp, lr}
   1441c:	b	10de8 <fseeko64@plt>
   14420:	ldr	r7, [fp, #8]
   14424:	mov	r0, r4
   14428:	bl	10dc4 <fileno@plt>
   1442c:	str	r7, [sp]
   14430:	mov	r2, r6
   14434:	mov	r3, r5
   14438:	bl	10ce0 <lseek64@plt>
   1443c:	and	r2, r0, r1
   14440:	cmn	r2, #1
   14444:	beq	14464 <__assert_fail@plt+0x361c>
   14448:	strd	r0, [r4, #80]	; 0x50
   1444c:	ldr	r0, [r4]
   14450:	bic	r0, r0, #16
   14454:	str	r0, [r4]
   14458:	mov	r0, #0
   1445c:	sub	sp, fp, #16
   14460:	pop	{r4, r5, r6, r7, fp, pc}
   14464:	mvn	r0, #0
   14468:	sub	sp, fp, #16
   1446c:	pop	{r4, r5, r6, r7, fp, pc}
   14470:	push	{fp, lr}
   14474:	mov	fp, sp
   14478:	bl	10d94 <__errno_location@plt>
   1447c:	mov	r1, #12
   14480:	str	r1, [r0]
   14484:	mov	r0, #0
   14488:	pop	{fp, pc}
   1448c:	b	13e6c <__assert_fail@plt+0x3024>
   14490:	cmp	r1, #0
   14494:	orreq	r1, r1, #1
   14498:	b	13e9c <__assert_fail@plt+0x3054>
   1449c:	b	13e18 <__assert_fail@plt+0x2fd0>
   144a0:	clz	r3, r2
   144a4:	lsr	ip, r3, #5
   144a8:	clz	r3, r1
   144ac:	lsr	r3, r3, #5
   144b0:	orrs	r3, r3, ip
   144b4:	movwne	r1, #1
   144b8:	movwne	r2, #1
   144bc:	b	1455c <__assert_fail@plt+0x3714>
   144c0:	push	{fp, lr}
   144c4:	mov	fp, sp
   144c8:	mov	r0, #14
   144cc:	bl	10e0c <nl_langinfo@plt>
   144d0:	movw	r1, #18727	; 0x4927
   144d4:	movt	r1, #1
   144d8:	cmp	r0, #0
   144dc:	movne	r1, r0
   144e0:	ldrb	r2, [r1]
   144e4:	movw	r0, #20917	; 0x51b5
   144e8:	movt	r0, #1
   144ec:	cmp	r2, #0
   144f0:	movne	r0, r1
   144f4:	pop	{fp, pc}
   144f8:	push	{r4, r5, r6, r7, fp, lr}
   144fc:	add	fp, sp, #16
   14500:	sub	sp, sp, #8
   14504:	mov	r7, r2
   14508:	mov	r4, r1
   1450c:	add	r5, sp, #4
   14510:	cmp	r0, #0
   14514:	movne	r5, r0
   14518:	mov	r0, r5
   1451c:	bl	10d10 <mbrtowc@plt>
   14520:	mov	r6, r0
   14524:	cmp	r7, #0
   14528:	beq	14550 <__assert_fail@plt+0x3708>
   1452c:	cmn	r6, #2
   14530:	bcc	14550 <__assert_fail@plt+0x3708>
   14534:	mov	r0, #0
   14538:	bl	14598 <__assert_fail@plt+0x3750>
   1453c:	cmp	r0, #0
   14540:	bne	14550 <__assert_fail@plt+0x3708>
   14544:	ldrb	r0, [r4]
   14548:	str	r0, [r5]
   1454c:	mov	r6, #1
   14550:	mov	r0, r6
   14554:	sub	sp, fp, #16
   14558:	pop	{r4, r5, r6, r7, fp, pc}
   1455c:	cmp	r2, #0
   14560:	beq	14590 <__assert_fail@plt+0x3748>
   14564:	mvn	r3, #0
   14568:	udiv	r3, r3, r2
   1456c:	cmp	r3, r1
   14570:	bcs	14590 <__assert_fail@plt+0x3748>
   14574:	push	{fp, lr}
   14578:	mov	fp, sp
   1457c:	bl	10d94 <__errno_location@plt>
   14580:	mov	r1, #12
   14584:	str	r1, [r0]
   14588:	mov	r0, #0
   1458c:	pop	{fp, pc}
   14590:	mul	r1, r2, r1
   14594:	b	13e9c <__assert_fail@plt+0x3054>
   14598:	push	{r4, sl, fp, lr}
   1459c:	add	fp, sp, #8
   145a0:	sub	sp, sp, #264	; 0x108
   145a4:	add	r1, sp, #7
   145a8:	movw	r2, #257	; 0x101
   145ac:	bl	14604 <__assert_fail@plt+0x37bc>
   145b0:	mov	r4, #0
   145b4:	cmp	r0, #0
   145b8:	bne	145f8 <__assert_fail@plt+0x37b0>
   145bc:	add	r0, sp, #7
   145c0:	movw	r1, #20923	; 0x51bb
   145c4:	movt	r1, #1
   145c8:	mov	r2, #2
   145cc:	bl	10d7c <bcmp@plt>
   145d0:	cmp	r0, #0
   145d4:	beq	145f8 <__assert_fail@plt+0x37b0>
   145d8:	add	r0, sp, #7
   145dc:	movw	r1, #20925	; 0x51bd
   145e0:	movt	r1, #1
   145e4:	mov	r2, #6
   145e8:	bl	10d7c <bcmp@plt>
   145ec:	mov	r4, r0
   145f0:	cmp	r0, #0
   145f4:	movwne	r4, #1
   145f8:	mov	r0, r4
   145fc:	sub	sp, fp, #8
   14600:	pop	{r4, sl, fp, pc}
   14604:	b	14608 <__assert_fail@plt+0x37c0>
   14608:	push	{r4, r5, r6, r7, fp, lr}
   1460c:	add	fp, sp, #16
   14610:	mov	r6, r2
   14614:	mov	r4, r1
   14618:	bl	146a0 <__assert_fail@plt+0x3858>
   1461c:	cmp	r0, #0
   14620:	beq	14650 <__assert_fail@plt+0x3808>
   14624:	mov	r7, r0
   14628:	bl	10d88 <strlen@plt>
   1462c:	cmp	r0, r6
   14630:	bcs	1466c <__assert_fail@plt+0x3824>
   14634:	add	r2, r0, #1
   14638:	mov	r0, r4
   1463c:	mov	r1, r7
   14640:	bl	10c8c <memcpy@plt>
   14644:	mov	r5, #0
   14648:	mov	r0, r5
   1464c:	pop	{r4, r5, r6, r7, fp, pc}
   14650:	mov	r5, #22
   14654:	cmp	r6, #0
   14658:	beq	14694 <__assert_fail@plt+0x384c>
   1465c:	mov	r0, #0
   14660:	strb	r0, [r4]
   14664:	mov	r0, r5
   14668:	pop	{r4, r5, r6, r7, fp, pc}
   1466c:	mov	r5, #34	; 0x22
   14670:	cmp	r6, #0
   14674:	beq	14694 <__assert_fail@plt+0x384c>
   14678:	sub	r6, r6, #1
   1467c:	mov	r0, r4
   14680:	mov	r1, r7
   14684:	mov	r2, r6
   14688:	bl	10c8c <memcpy@plt>
   1468c:	mov	r0, #0
   14690:	strb	r0, [r4, r6]
   14694:	mov	r0, r5
   14698:	pop	{r4, r5, r6, r7, fp, pc}
   1469c:	b	146a0 <__assert_fail@plt+0x3858>
   146a0:	mov	r1, #0
   146a4:	b	10df4 <setlocale@plt>
   146a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   146ac:	mov	r7, r0
   146b0:	ldr	r6, [pc, #72]	; 14700 <__assert_fail@plt+0x38b8>
   146b4:	ldr	r5, [pc, #72]	; 14704 <__assert_fail@plt+0x38bc>
   146b8:	add	r6, pc, r6
   146bc:	add	r5, pc, r5
   146c0:	sub	r6, r6, r5
   146c4:	mov	r8, r1
   146c8:	mov	r9, r2
   146cc:	bl	10c24 <calloc@plt-0x20>
   146d0:	asrs	r6, r6, #2
   146d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   146d8:	mov	r4, #0
   146dc:	add	r4, r4, #1
   146e0:	ldr	r3, [r5], #4
   146e4:	mov	r2, r9
   146e8:	mov	r1, r8
   146ec:	mov	r0, r7
   146f0:	blx	r3
   146f4:	cmp	r6, r4
   146f8:	bne	146dc <__assert_fail@plt+0x3894>
   146fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14700:	andeq	r1, r1, ip, asr #16
   14704:	andeq	r1, r1, r4, asr #16
   14708:	bx	lr
   1470c:	ldr	r3, [pc, #12]	; 14720 <__assert_fail@plt+0x38d8>
   14710:	mov	r1, #0
   14714:	add	r3, pc, r3
   14718:	ldr	r2, [r3]
   1471c:	b	10da0 <__cxa_atexit@plt>
   14720:	andeq	r1, r1, r8, lsr #19

Disassembly of section .fini:

00014724 <.fini>:
   14724:	push	{r3, lr}
   14728:	pop	{r3, pc}
