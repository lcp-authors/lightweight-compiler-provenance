
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010e08 <.init>:
   10e08:	push	{r3, lr}
   10e0c:	bl	110d4 <__assert_fail@plt+0x48>
   10e10:	pop	{r3, pc}

Disassembly of section .plt:

00010e14 <calloc@plt-0x14>:
   10e14:	push	{lr}		; (str lr, [sp, #-4]!)
   10e18:	ldr	lr, [pc, #4]	; 10e24 <calloc@plt-0x4>
   10e1c:	add	lr, pc, lr
   10e20:	ldr	pc, [lr, #8]!
   10e24:	ldrdeq	r6, [r1], -ip

00010e28 <calloc@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #476]!	; 0x1dc

00010e34 <fputs_unlocked@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #468]!	; 0x1d4

00010e40 <raise@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #460]!	; 0x1cc

00010e4c <strcmp@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #452]!	; 0x1c4

00010e58 <posix_fadvise64@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #444]!	; 0x1bc

00010e64 <fflush@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #436]!	; 0x1b4

00010e70 <memmove@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #428]!	; 0x1ac

00010e7c <free@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #420]!	; 0x1a4

00010e88 <_exit@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #412]!	; 0x19c

00010e94 <memcpy@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #404]!	; 0x194

00010ea0 <__strtoull_internal@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #396]!	; 0x18c

00010eac <mbsinit@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #388]!	; 0x184

00010eb8 <fwrite_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #380]!	; 0x17c

00010ec4 <dcgettext@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #372]!	; 0x174

00010ed0 <realloc@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #364]!	; 0x16c

00010edc <textdomain@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #356]!	; 0x164

00010ee8 <iswprint@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #348]!	; 0x15c

00010ef4 <fwrite@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #340]!	; 0x154

00010f00 <lseek64@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #332]!	; 0x14c

00010f0c <__ctype_get_mb_cur_max@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #324]!	; 0x144

00010f18 <__fpending@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #316]!	; 0x13c

00010f24 <mbrtowc@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #308]!	; 0x134

00010f30 <error@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #300]!	; 0x12c

00010f3c <malloc@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #292]!	; 0x124

00010f48 <__libc_start_main@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #284]!	; 0x11c

00010f54 <__freading@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #276]!	; 0x114

00010f60 <__gmon_start__@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #268]!	; 0x10c

00010f6c <getopt_long@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #260]!	; 0x104

00010f78 <__ctype_b_loc@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #252]!	; 0xfc

00010f84 <exit@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #244]!	; 0xf4

00010f90 <bcmp@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #236]!	; 0xec

00010f9c <strlen@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #228]!	; 0xe4

00010fa8 <strchr@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #220]!	; 0xdc

00010fb4 <__errno_location@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #212]!	; 0xd4

00010fc0 <__cxa_atexit@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #204]!	; 0xcc

00010fcc <memset@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #196]!	; 0xc4

00010fd8 <__printf_chk@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #188]!	; 0xbc

00010fe4 <fileno@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #180]!	; 0xb4

00010ff0 <__fprintf_chk@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #172]!	; 0xac

00010ffc <fclose@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #164]!	; 0xa4

00011008 <fseeko64@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #156]!	; 0x9c

00011014 <__uflow@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #148]!	; 0x94

00011020 <__overflow@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #90112	; 0x16000
   11028:	ldr	pc, [ip, #140]!	; 0x8c

0001102c <setlocale@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #90112	; 0x16000
   11034:	ldr	pc, [ip, #132]!	; 0x84

00011038 <strrchr@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #90112	; 0x16000
   11040:	ldr	pc, [ip, #124]!	; 0x7c

00011044 <nl_langinfo@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #90112	; 0x16000
   1104c:	ldr	pc, [ip, #116]!	; 0x74

00011050 <clearerr_unlocked@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #108]!	; 0x6c

0001105c <fopen64@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #100]!	; 0x64

00011068 <bindtextdomain@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #92]!	; 0x5c

00011074 <strncmp@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #90112	; 0x16000
   1107c:	ldr	pc, [ip, #84]!	; 0x54

00011080 <abort@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #76]!	; 0x4c

0001108c <__assert_fail@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #68]!	; 0x44

Disassembly of section .text:

00011098 <.text>:
   11098:	mov	fp, #0
   1109c:	mov	lr, #0
   110a0:	pop	{r1}		; (ldr r1, [sp], #4)
   110a4:	mov	r2, sp
   110a8:	push	{r2}		; (str r2, [sp, #-4]!)
   110ac:	push	{r0}		; (str r0, [sp, #-4]!)
   110b0:	ldr	ip, [pc, #16]	; 110c8 <__assert_fail@plt+0x3c>
   110b4:	push	{ip}		; (str ip, [sp, #-4]!)
   110b8:	ldr	r0, [pc, #12]	; 110cc <__assert_fail@plt+0x40>
   110bc:	ldr	r3, [pc, #12]	; 110d0 <__assert_fail@plt+0x44>
   110c0:	bl	10f48 <__libc_start_main@plt>
   110c4:	bl	11080 <abort@plt>
   110c8:	andeq	r5, r1, r8, ror #25
   110cc:	andeq	r1, r1, r0, lsr #8
   110d0:	andeq	r5, r1, r8, lsl #25
   110d4:	ldr	r3, [pc, #20]	; 110f0 <__assert_fail@plt+0x64>
   110d8:	ldr	r2, [pc, #20]	; 110f4 <__assert_fail@plt+0x68>
   110dc:	add	r3, pc, r3
   110e0:	ldr	r2, [r3, r2]
   110e4:	cmp	r2, #0
   110e8:	bxeq	lr
   110ec:	b	10f60 <__gmon_start__@plt>
   110f0:	andeq	r5, r1, ip, lsl pc
   110f4:	ldrdeq	r0, [r0], -ip
   110f8:	ldr	r0, [pc, #24]	; 11118 <__assert_fail@plt+0x8c>
   110fc:	ldr	r3, [pc, #24]	; 1111c <__assert_fail@plt+0x90>
   11100:	cmp	r3, r0
   11104:	bxeq	lr
   11108:	ldr	r3, [pc, #16]	; 11120 <__assert_fail@plt+0x94>
   1110c:	cmp	r3, #0
   11110:	bxeq	lr
   11114:	bx	r3
   11118:	andeq	r7, r2, r0, lsr r1
   1111c:	andeq	r7, r2, r0, lsr r1
   11120:	andeq	r0, r0, r0
   11124:	ldr	r0, [pc, #36]	; 11150 <__assert_fail@plt+0xc4>
   11128:	ldr	r1, [pc, #36]	; 11154 <__assert_fail@plt+0xc8>
   1112c:	sub	r1, r1, r0
   11130:	asr	r1, r1, #2
   11134:	add	r1, r1, r1, lsr #31
   11138:	asrs	r1, r1, #1
   1113c:	bxeq	lr
   11140:	ldr	r3, [pc, #16]	; 11158 <__assert_fail@plt+0xcc>
   11144:	cmp	r3, #0
   11148:	bxeq	lr
   1114c:	bx	r3
   11150:	andeq	r7, r2, r0, lsr r1
   11154:	andeq	r7, r2, r0, lsr r1
   11158:	andeq	r0, r0, r0
   1115c:	push	{r4, lr}
   11160:	ldr	r4, [pc, #24]	; 11180 <__assert_fail@plt+0xf4>
   11164:	ldrb	r3, [r4]
   11168:	cmp	r3, #0
   1116c:	popne	{r4, pc}
   11170:	bl	110f8 <__assert_fail@plt+0x6c>
   11174:	mov	r3, #1
   11178:	strb	r3, [r4]
   1117c:	pop	{r4, pc}
   11180:	andeq	r7, r2, r4, asr r1
   11184:	b	11124 <__assert_fail@plt+0x98>
   11188:	push	{fp, lr}
   1118c:	mov	fp, sp
   11190:	sub	sp, sp, #56	; 0x38
   11194:	mov	r4, r0
   11198:	cmp	r0, #0
   1119c:	bne	113dc <__assert_fail@plt+0x350>
   111a0:	movw	r1, #23867	; 0x5d3b
   111a4:	mov	r0, #0
   111a8:	mov	r2, #5
   111ac:	movt	r1, #1
   111b0:	bl	10ec4 <dcgettext@plt>
   111b4:	mov	r1, r0
   111b8:	movw	r0, #29036	; 0x716c
   111bc:	movt	r0, #2
   111c0:	ldr	r2, [r0]
   111c4:	mov	r0, #1
   111c8:	bl	10fd8 <__printf_chk@plt>
   111cc:	movw	r1, #23900	; 0x5d5c
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	movt	r1, #1
   111dc:	bl	10ec4 <dcgettext@plt>
   111e0:	movw	r7, #29004	; 0x714c
   111e4:	movt	r7, #2
   111e8:	ldr	r1, [r7]
   111ec:	bl	10e34 <fputs_unlocked@plt>
   111f0:	movw	r1, #24291	; 0x5ee3
   111f4:	mov	r0, #0
   111f8:	mov	r2, #5
   111fc:	movt	r1, #1
   11200:	bl	10ec4 <dcgettext@plt>
   11204:	ldr	r1, [r7]
   11208:	bl	10e34 <fputs_unlocked@plt>
   1120c:	movw	r1, #24347	; 0x5f1b
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	movt	r1, #1
   1121c:	bl	10ec4 <dcgettext@plt>
   11220:	ldr	r1, [r7]
   11224:	bl	10e34 <fputs_unlocked@plt>
   11228:	movw	r1, #23960	; 0x5d98
   1122c:	mov	r0, #0
   11230:	mov	r2, #5
   11234:	movt	r1, #1
   11238:	bl	10ec4 <dcgettext@plt>
   1123c:	ldr	r1, [r7]
   11240:	bl	10e34 <fputs_unlocked@plt>
   11244:	movw	r1, #24107	; 0x5e2b
   11248:	mov	r0, #0
   1124c:	mov	r2, #5
   11250:	movt	r1, #1
   11254:	bl	10ec4 <dcgettext@plt>
   11258:	ldr	r1, [r7]
   1125c:	bl	10e34 <fputs_unlocked@plt>
   11260:	movw	r1, #24152	; 0x5e58
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10ec4 <dcgettext@plt>
   11274:	ldr	r1, [r7]
   11278:	bl	10e34 <fputs_unlocked@plt>
   1127c:	movw	r0, #24904	; 0x6148
   11280:	mov	r2, #48	; 0x30
   11284:	mov	r6, sp
   11288:	movw	r5, #24206	; 0x5e8e
   1128c:	movt	r0, #1
   11290:	movt	r5, #1
   11294:	add	r1, r0, #32
   11298:	add	r3, r0, #16
   1129c:	vld1.64	{d18-d19}, [r0], r2
   112a0:	vld1.64	{d16-d17}, [r1]
   112a4:	vld1.64	{d20-d21}, [r3]
   112a8:	vldr	d22, [r0]
   112ac:	add	r1, r6, #32
   112b0:	add	r0, r6, #16
   112b4:	vst1.64	{d16-d17}, [r1]
   112b8:	movw	r1, #24422	; 0x5f66
   112bc:	vst1.64	{d20-d21}, [r0]
   112c0:	mov	r0, r6
   112c4:	movt	r1, #1
   112c8:	vst1.64	{d18-d19}, [r0], r2
   112cc:	vstr	d22, [r0]
   112d0:	mov	r0, r5
   112d4:	bl	10e4c <strcmp@plt>
   112d8:	cmp	r0, #0
   112dc:	ldrne	r1, [r6, #8]!
   112e0:	cmpne	r1, #0
   112e4:	bne	112d0 <__assert_fail@plt+0x244>
   112e8:	movw	r1, #24517	; 0x5fc5
   112ec:	ldr	r6, [r6, #4]
   112f0:	mov	r0, #0
   112f4:	mov	r2, #5
   112f8:	movt	r1, #1
   112fc:	bl	10ec4 <dcgettext@plt>
   11300:	movw	r2, #24261	; 0x5ec5
   11304:	movw	r3, #24540	; 0x5fdc
   11308:	mov	r1, r0
   1130c:	mov	r0, #1
   11310:	movt	r2, #1
   11314:	movt	r3, #1
   11318:	bl	10fd8 <__printf_chk@plt>
   1131c:	cmp	r6, #0
   11320:	mov	r0, #5
   11324:	mov	r1, #0
   11328:	moveq	r6, r5
   1132c:	bl	1102c <setlocale@plt>
   11330:	cmp	r0, #0
   11334:	beq	1136c <__assert_fail@plt+0x2e0>
   11338:	movw	r1, #24580	; 0x6004
   1133c:	mov	r2, #3
   11340:	movt	r1, #1
   11344:	bl	11074 <strncmp@plt>
   11348:	cmp	r0, #0
   1134c:	beq	1136c <__assert_fail@plt+0x2e0>
   11350:	movw	r1, #24584	; 0x6008
   11354:	mov	r0, #0
   11358:	mov	r2, #5
   1135c:	movt	r1, #1
   11360:	bl	10ec4 <dcgettext@plt>
   11364:	ldr	r1, [r7]
   11368:	bl	10e34 <fputs_unlocked@plt>
   1136c:	movw	r1, #24655	; 0x604f
   11370:	mov	r0, #0
   11374:	mov	r2, #5
   11378:	movt	r1, #1
   1137c:	bl	10ec4 <dcgettext@plt>
   11380:	movw	r2, #24540	; 0x5fdc
   11384:	mov	r1, r0
   11388:	mov	r0, #1
   1138c:	mov	r3, r5
   11390:	movt	r2, #1
   11394:	bl	10fd8 <__printf_chk@plt>
   11398:	movw	r1, #24682	; 0x606a
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10ec4 <dcgettext@plt>
   113ac:	mov	r1, r0
   113b0:	movw	r0, #24450	; 0x5f82
   113b4:	movw	r3, #24732	; 0x609c
   113b8:	cmp	r6, r5
   113bc:	mov	r2, r6
   113c0:	movt	r0, #1
   113c4:	movt	r3, #1
   113c8:	moveq	r3, r0
   113cc:	mov	r0, #1
   113d0:	bl	10fd8 <__printf_chk@plt>
   113d4:	mov	r0, r4
   113d8:	bl	10f84 <exit@plt>
   113dc:	movw	r0, #28992	; 0x7140
   113e0:	movw	r1, #23828	; 0x5d14
   113e4:	mov	r2, #5
   113e8:	movt	r0, #2
   113ec:	movt	r1, #1
   113f0:	ldr	r5, [r0]
   113f4:	mov	r0, #0
   113f8:	bl	10ec4 <dcgettext@plt>
   113fc:	mov	r2, r0
   11400:	movw	r0, #29036	; 0x716c
   11404:	mov	r1, #1
   11408:	movt	r0, #2
   1140c:	ldr	r3, [r0]
   11410:	mov	r0, r5
   11414:	bl	10ff0 <__fprintf_chk@plt>
   11418:	mov	r0, r4
   1141c:	bl	10f84 <exit@plt>
   11420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11424:	add	fp, sp, #28
   11428:	sub	sp, sp, #28
   1142c:	mov	r4, r0
   11430:	ldr	r0, [r1]
   11434:	mov	r5, r1
   11438:	bl	11de0 <__assert_fail@plt+0xd54>
   1143c:	movw	r1, #24732	; 0x609c
   11440:	mov	r0, #6
   11444:	movt	r1, #1
   11448:	bl	1102c <setlocale@plt>
   1144c:	movw	r6, #24265	; 0x5ec9
   11450:	movw	r1, #24211	; 0x5e93
   11454:	movt	r6, #1
   11458:	movt	r1, #1
   1145c:	mov	r0, r6
   11460:	bl	11068 <bindtextdomain@plt>
   11464:	mov	r0, r6
   11468:	bl	10edc <textdomain@plt>
   1146c:	movw	r0, #6932	; 0x1b14
   11470:	movt	r0, #1
   11474:	bl	15cec <__assert_fail@plt+0x4c60>
   11478:	movw	r0, #29016	; 0x7158
   1147c:	movw	r2, #24768	; 0x60c0
   11480:	movw	r3, #24804	; 0x60e4
   11484:	mov	r8, #0
   11488:	mov	r1, r5
   1148c:	movt	r0, #2
   11490:	movt	r2, #1
   11494:	movt	r3, #1
   11498:	str	r8, [sp]
   1149c:	strb	r8, [r0, #2]
   114a0:	strh	r8, [r0]
   114a4:	mov	r0, r4
   114a8:	bl	10f6c <getopt_long@plt>
   114ac:	mov	r7, #80	; 0x50
   114b0:	cmn	r0, #1
   114b4:	beq	115c4 <__assert_fail@plt+0x538>
   114b8:	movw	r9, #29008	; 0x7150
   114bc:	movw	sl, #24768	; 0x60c0
   114c0:	movw	r6, #24804	; 0x60e4
   114c4:	movt	r9, #2
   114c8:	movt	sl, #1
   114cc:	movt	r6, #1
   114d0:	sub	r1, r0, #48	; 0x30
   114d4:	cmp	r1, #10
   114d8:	bcc	11560 <__assert_fail@plt+0x4d4>
   114dc:	b	11574 <__assert_fail@plt+0x4e8>
   114e0:	add	r7, sp, #26
   114e4:	strb	r8, [sp, #27]
   114e8:	strb	r0, [sp, #26]
   114ec:	str	r7, [r9]
   114f0:	movw	r1, #24235	; 0x5eab
   114f4:	mov	r0, #0
   114f8:	mov	r2, #5
   114fc:	movt	r1, #1
   11500:	bl	10ec4 <dcgettext@plt>
   11504:	mvn	r1, #9
   11508:	mov	r2, #1
   1150c:	mov	r3, #0
   11510:	stm	sp, {r1, r8}
   11514:	movw	r1, #24732	; 0x609c
   11518:	str	r0, [sp, #12]
   1151c:	mov	r0, r7
   11520:	str	r8, [sp, #16]
   11524:	movt	r1, #1
   11528:	str	r1, [sp, #8]
   1152c:	bl	14af0 <__assert_fail@plt+0x3a64>
   11530:	mov	r7, r0
   11534:	mov	r0, r4
   11538:	mov	r1, r5
   1153c:	mov	r2, sl
   11540:	mov	r3, r6
   11544:	str	r8, [sp]
   11548:	bl	10f6c <getopt_long@plt>
   1154c:	cmn	r0, #1
   11550:	beq	115c4 <__assert_fail@plt+0x538>
   11554:	sub	r1, r0, #48	; 0x30
   11558:	cmp	r1, #10
   1155c:	bcs	11574 <__assert_fail@plt+0x4e8>
   11560:	ldr	r1, [r9]
   11564:	cmp	r1, #0
   11568:	beq	114e0 <__assert_fail@plt+0x454>
   1156c:	sub	r7, r1, #1
   11570:	b	114ec <__assert_fail@plt+0x460>
   11574:	cmp	r0, #114	; 0x72
   11578:	ble	11594 <__assert_fail@plt+0x508>
   1157c:	cmp	r0, #115	; 0x73
   11580:	beq	115b0 <__assert_fail@plt+0x524>
   11584:	cmp	r0, #119	; 0x77
   11588:	bne	116b4 <__assert_fail@plt+0x628>
   1158c:	ldr	r7, [r9]
   11590:	b	114f0 <__assert_fail@plt+0x464>
   11594:	cmp	r0, #98	; 0x62
   11598:	bne	11654 <__assert_fail@plt+0x5c8>
   1159c:	movw	r0, #29016	; 0x7158
   115a0:	mov	r1, #1
   115a4:	movt	r0, #2
   115a8:	strb	r1, [r0, #1]
   115ac:	b	11534 <__assert_fail@plt+0x4a8>
   115b0:	movw	r0, #29016	; 0x7158
   115b4:	mov	r1, #1
   115b8:	movt	r0, #2
   115bc:	strb	r1, [r0, #2]
   115c0:	b	11534 <__assert_fail@plt+0x4a8>
   115c4:	movw	r0, #28984	; 0x7138
   115c8:	movt	r0, #2
   115cc:	ldr	r0, [r0]
   115d0:	cmp	r0, r4
   115d4:	bne	115f0 <__assert_fail@plt+0x564>
   115d8:	movw	r0, #25060	; 0x61e4
   115dc:	mov	r1, r7
   115e0:	movt	r0, #1
   115e4:	bl	116d4 <__assert_fail@plt+0x648>
   115e8:	mov	r6, r0
   115ec:	b	1161c <__assert_fail@plt+0x590>
   115f0:	mov	r6, #1
   115f4:	bge	1161c <__assert_fail@plt+0x590>
   115f8:	add	r5, r5, r0, lsl #2
   115fc:	sub	r4, r4, r0
   11600:	mov	r6, #1
   11604:	ldr	r0, [r5], #4
   11608:	mov	r1, r7
   1160c:	bl	116d4 <__assert_fail@plt+0x648>
   11610:	and	r6, r6, r0
   11614:	subs	r4, r4, #1
   11618:	bne	11604 <__assert_fail@plt+0x578>
   1161c:	movw	r0, #29016	; 0x7158
   11620:	movt	r0, #2
   11624:	ldrb	r0, [r0]
   11628:	cmp	r0, #1
   1162c:	bne	11648 <__assert_fail@plt+0x5bc>
   11630:	movw	r0, #29000	; 0x7148
   11634:	movt	r0, #2
   11638:	ldr	r0, [r0]
   1163c:	bl	11c40 <__assert_fail@plt+0xbb4>
   11640:	cmn	r0, #1
   11644:	beq	116bc <__assert_fail@plt+0x630>
   11648:	eor	r0, r6, #1
   1164c:	sub	sp, fp, #28
   11650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11654:	cmn	r0, #3
   11658:	beq	1166c <__assert_fail@plt+0x5e0>
   1165c:	cmn	r0, #2
   11660:	bne	116b4 <__assert_fail@plt+0x628>
   11664:	mov	r0, #0
   11668:	bl	11188 <__assert_fail@plt+0xfc>
   1166c:	movw	r0, #28904	; 0x70e8
   11670:	movw	r2, #24275	; 0x5ed3
   11674:	mov	r1, #0
   11678:	movt	r0, #2
   1167c:	movt	r2, #1
   11680:	str	r1, [sp, #4]
   11684:	movw	r1, #24206	; 0x5e8e
   11688:	movt	r1, #1
   1168c:	ldr	r3, [r0]
   11690:	movw	r0, #29004	; 0x714c
   11694:	str	r2, [sp]
   11698:	movw	r2, #24261	; 0x5ec5
   1169c:	movt	r0, #2
   116a0:	movt	r2, #1
   116a4:	ldr	r0, [r0]
   116a8:	bl	14248 <__assert_fail@plt+0x31bc>
   116ac:	mov	r0, #0
   116b0:	bl	10f84 <exit@plt>
   116b4:	mov	r0, #1
   116b8:	bl	11188 <__assert_fail@plt+0xfc>
   116bc:	bl	10fb4 <__errno_location@plt>
   116c0:	ldr	r1, [r0]
   116c4:	movw	r2, #25060	; 0x61e4
   116c8:	mov	r0, #1
   116cc:	movt	r2, #1
   116d0:	bl	10f30 <error@plt>
   116d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116d8:	add	fp, sp, #28
   116dc:	sub	sp, sp, #20
   116e0:	str	r1, [sp, #16]
   116e4:	movw	r1, #25060	; 0x61e4
   116e8:	mov	r6, r0
   116ec:	movt	r1, #1
   116f0:	bl	10e4c <strcmp@plt>
   116f4:	movw	r8, #29016	; 0x7158
   116f8:	cmp	r0, #0
   116fc:	movt	r8, #2
   11700:	beq	11a74 <__assert_fail@plt+0x9e8>
   11704:	movw	r1, #24985	; 0x6199
   11708:	mov	r0, r6
   1170c:	movt	r1, #1
   11710:	bl	1105c <fopen64@plt>
   11714:	cmp	r0, #0
   11718:	beq	11a90 <__assert_fail@plt+0xa04>
   1171c:	mov	r1, #2
   11720:	str	r6, [sp, #4]
   11724:	str	r0, [sp, #8]
   11728:	bl	11c04 <__assert_fail@plt+0xb78>
   1172c:	b	11754 <__assert_fail@plt+0x6c8>
   11730:	ldr	r0, [r8, #4]
   11734:	mov	r1, #10
   11738:	mov	r2, r5
   1173c:	strb	r1, [r0, r4]
   11740:	movw	r1, #29004	; 0x714c
   11744:	movt	r1, #2
   11748:	ldr	r3, [r1]
   1174c:	mov	r1, #1
   11750:	bl	10eb8 <fwrite_unlocked@plt>
   11754:	mov	r4, #0
   11758:	mov	r6, #0
   1175c:	ldr	r0, [sp, #8]
   11760:	ldr	r2, [r0, #4]
   11764:	ldr	r1, [r0, #8]
   11768:	cmp	r2, r1
   1176c:	bcs	119e8 <__assert_fail@plt+0x95c>
   11770:	add	r1, r2, #1
   11774:	str	r1, [r0, #4]
   11778:	ldrb	r0, [r2]
   1177c:	str	r0, [sp, #12]
   11780:	ldr	r0, [r8, #8]
   11784:	add	r5, r4, #1
   11788:	cmp	r5, r0
   1178c:	bcc	117a0 <__assert_fail@plt+0x714>
   11790:	ldr	r0, [r8, #4]
   11794:	add	r1, r8, #8
   11798:	bl	145b0 <__assert_fail@plt+0x3524>
   1179c:	str	r0, [r8, #4]
   117a0:	ldr	r0, [sp, #12]
   117a4:	cmp	r0, #10
   117a8:	beq	11730 <__assert_fail@plt+0x6a4>
   117ac:	ldrb	r0, [r8, #1]
   117b0:	cmp	r0, #0
   117b4:	bne	117d8 <__assert_fail@plt+0x74c>
   117b8:	ldr	r0, [sp, #12]
   117bc:	uxtb	r0, r0
   117c0:	cmp	r0, #8
   117c4:	beq	11980 <__assert_fail@plt+0x8f4>
   117c8:	cmp	r0, #9
   117cc:	beq	11998 <__assert_fail@plt+0x90c>
   117d0:	cmp	r0, #13
   117d4:	beq	119d0 <__assert_fail@plt+0x944>
   117d8:	add	r6, r6, #1
   117dc:	ldr	r0, [sp, #16]
   117e0:	cmp	r6, r0
   117e4:	bls	119d4 <__assert_fail@plt+0x948>
   117e8:	ldrb	r0, [r8, #2]
   117ec:	ldr	r9, [r8, #4]
   117f0:	cmp	r0, #1
   117f4:	bne	118c0 <__assert_fail@plt+0x834>
   117f8:	add	r0, r9, r4
   117fc:	mov	sl, #0
   11800:	sub	r5, r0, #1
   11804:	adds	r0, r4, sl
   11808:	beq	118c0 <__assert_fail@plt+0x834>
   1180c:	mov	r7, sl
   11810:	bl	10f78 <__ctype_b_loc@plt>
   11814:	ldrb	r1, [r5, sl]
   11818:	ldr	r0, [r0]
   1181c:	sub	sl, sl, #1
   11820:	ldrb	r0, [r0, r1, lsl #1]
   11824:	tst	r0, #1
   11828:	beq	11804 <__assert_fail@plt+0x778>
   1182c:	movw	r5, #29004	; 0x714c
   11830:	add	r0, r4, sl
   11834:	mov	r1, #1
   11838:	movt	r5, #2
   1183c:	add	r2, r0, #1
   11840:	mov	r0, r9
   11844:	ldr	r3, [r5]
   11848:	bl	10eb8 <fwrite_unlocked@plt>
   1184c:	ldr	r0, [r5]
   11850:	ldr	r1, [r0, #20]
   11854:	ldr	r2, [r0, #24]
   11858:	cmp	r1, r2
   1185c:	bcs	119b4 <__assert_fail@plt+0x928>
   11860:	add	r2, r1, #1
   11864:	str	r2, [r0, #20]
   11868:	mov	r0, #10
   1186c:	strb	r0, [r1]
   11870:	ldr	r5, [r8, #4]
   11874:	mvn	r9, sl
   11878:	mov	r2, r9
   1187c:	add	r0, r5, r4
   11880:	add	r0, r0, sl
   11884:	add	r1, r0, #1
   11888:	mov	r0, r5
   1188c:	bl	10e70 <memmove@plt>
   11890:	mov	r4, #0
   11894:	cmn	sl, #1
   11898:	mov	r6, #0
   1189c:	beq	117ac <__assert_fail@plt+0x720>
   118a0:	ldrb	r0, [r8, #1]
   118a4:	mov	r4, r9
   118a8:	mov	r6, r9
   118ac:	cmp	r0, #0
   118b0:	bne	117ac <__assert_fail@plt+0x720>
   118b4:	mov	r0, #0
   118b8:	mov	r6, #0
   118bc:	b	11914 <__assert_fail@plt+0x888>
   118c0:	cmp	r4, #0
   118c4:	beq	119c0 <__assert_fail@plt+0x934>
   118c8:	mov	r0, #10
   118cc:	add	r2, r4, #1
   118d0:	mov	r1, #1
   118d4:	strb	r0, [r9, r4]
   118d8:	movw	r0, #29004	; 0x714c
   118dc:	movt	r0, #2
   118e0:	ldr	r3, [r0]
   118e4:	mov	r0, r9
   118e8:	bl	10eb8 <fwrite_unlocked@plt>
   118ec:	mov	r4, #0
   118f0:	mov	r6, #0
   118f4:	ldrb	r0, [r8, #1]
   118f8:	cmp	r0, #0
   118fc:	beq	117b8 <__assert_fail@plt+0x72c>
   11900:	b	117d8 <__assert_fail@plt+0x74c>
   11904:	add	r6, r1, #1
   11908:	sub	r0, r0, #1
   1190c:	cmp	r7, r0
   11910:	beq	1196c <__assert_fail@plt+0x8e0>
   11914:	ldrb	r2, [r5, -r0]
   11918:	mov	r1, r6
   1191c:	mov	r6, #0
   11920:	cmp	r2, #13
   11924:	beq	11908 <__assert_fail@plt+0x87c>
   11928:	cmp	r2, #9
   1192c:	beq	11954 <__assert_fail@plt+0x8c8>
   11930:	cmp	r2, #8
   11934:	bne	11904 <__assert_fail@plt+0x878>
   11938:	cmp	r1, #0
   1193c:	subne	r1, r1, #1
   11940:	mov	r6, r1
   11944:	sub	r0, r0, #1
   11948:	cmp	r7, r0
   1194c:	bne	11914 <__assert_fail@plt+0x888>
   11950:	b	1196c <__assert_fail@plt+0x8e0>
   11954:	and	r2, r1, #7
   11958:	sub	r1, r1, r2
   1195c:	add	r6, r1, #8
   11960:	sub	r0, r0, #1
   11964:	cmp	r7, r0
   11968:	bne	11914 <__assert_fail@plt+0x888>
   1196c:	mov	r4, r9
   11970:	ldrb	r0, [r8, #1]
   11974:	cmp	r0, #0
   11978:	beq	117b8 <__assert_fail@plt+0x72c>
   1197c:	b	117d8 <__assert_fail@plt+0x74c>
   11980:	cmp	r6, #0
   11984:	subne	r6, r6, #1
   11988:	ldr	r0, [sp, #16]
   1198c:	cmp	r6, r0
   11990:	bhi	117e8 <__assert_fail@plt+0x75c>
   11994:	b	119d4 <__assert_fail@plt+0x948>
   11998:	and	r0, r6, #7
   1199c:	sub	r0, r6, r0
   119a0:	add	r6, r0, #8
   119a4:	ldr	r0, [sp, #16]
   119a8:	cmp	r6, r0
   119ac:	bhi	117e8 <__assert_fail@plt+0x75c>
   119b0:	b	119d4 <__assert_fail@plt+0x948>
   119b4:	mov	r1, #10
   119b8:	bl	11020 <__overflow@plt>
   119bc:	b	11870 <__assert_fail@plt+0x7e4>
   119c0:	ldr	r0, [sp, #12]
   119c4:	mov	r4, #1
   119c8:	strb	r0, [r9]
   119cc:	b	1175c <__assert_fail@plt+0x6d0>
   119d0:	mov	r6, #0
   119d4:	ldr	r0, [r8, #4]
   119d8:	ldr	r1, [sp, #12]
   119dc:	strb	r1, [r0, r4]
   119e0:	add	r4, r4, #1
   119e4:	b	1175c <__assert_fail@plt+0x6d0>
   119e8:	bl	11014 <__uflow@plt>
   119ec:	cmn	r0, #1
   119f0:	bne	1177c <__assert_fail@plt+0x6f0>
   119f4:	bl	10fb4 <__errno_location@plt>
   119f8:	mov	r5, r0
   119fc:	ldr	r6, [r0]
   11a00:	ldr	r0, [sp, #8]
   11a04:	cmp	r4, #0
   11a08:	ldrb	r0, [r0]
   11a0c:	lsl	r7, r0, #26
   11a10:	beq	11a30 <__assert_fail@plt+0x9a4>
   11a14:	movw	r0, #29004	; 0x714c
   11a18:	mov	r1, #1
   11a1c:	mov	r2, r4
   11a20:	movt	r0, #2
   11a24:	ldr	r3, [r0]
   11a28:	ldr	r0, [r8, #4]
   11a2c:	bl	10eb8 <fwrite_unlocked@plt>
   11a30:	and	r4, r6, r7, asr #31
   11a34:	ldr	r6, [sp, #4]
   11a38:	movw	r1, #25060	; 0x61e4
   11a3c:	movt	r1, #1
   11a40:	mov	r0, r6
   11a44:	bl	10e4c <strcmp@plt>
   11a48:	cmp	r0, #0
   11a4c:	beq	11a9c <__assert_fail@plt+0xa10>
   11a50:	ldr	r0, [sp, #8]
   11a54:	bl	11c40 <__assert_fail@plt+0xbb4>
   11a58:	cmp	r4, #0
   11a5c:	bne	11a68 <__assert_fail@plt+0x9dc>
   11a60:	cmp	r0, #0
   11a64:	ldrne	r4, [r5]
   11a68:	cmp	r4, #0
   11a6c:	bne	11aac <__assert_fail@plt+0xa20>
   11a70:	b	11ae4 <__assert_fail@plt+0xa58>
   11a74:	mov	r0, #1
   11a78:	strb	r0, [r8]
   11a7c:	movw	r0, #29000	; 0x7148
   11a80:	movt	r0, #2
   11a84:	ldr	r0, [r0]
   11a88:	cmp	r0, #0
   11a8c:	bne	1171c <__assert_fail@plt+0x690>
   11a90:	bl	10fb4 <__errno_location@plt>
   11a94:	ldr	r4, [r0]
   11a98:	b	11aac <__assert_fail@plt+0xa20>
   11a9c:	ldr	r0, [sp, #8]
   11aa0:	bl	11050 <clearerr_unlocked@plt>
   11aa4:	cmp	r4, #0
   11aa8:	beq	11ae4 <__assert_fail@plt+0xa58>
   11aac:	mov	r0, #0
   11ab0:	mov	r1, #3
   11ab4:	mov	r2, r6
   11ab8:	mov	r5, #0
   11abc:	bl	13af8 <__assert_fail@plt+0x2a6c>
   11ac0:	movw	r2, #24991	; 0x619f
   11ac4:	mov	r3, r0
   11ac8:	mov	r0, #0
   11acc:	mov	r1, r4
   11ad0:	movt	r2, #1
   11ad4:	bl	10f30 <error@plt>
   11ad8:	mov	r0, r5
   11adc:	sub	sp, fp, #28
   11ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ae4:	mov	r5, #1
   11ae8:	mov	r0, r5
   11aec:	sub	sp, fp, #28
   11af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11af4:	movw	r1, #29028	; 0x7164
   11af8:	movt	r1, #2
   11afc:	str	r0, [r1, #4]
   11b00:	bx	lr
   11b04:	movw	r1, #29028	; 0x7164
   11b08:	movt	r1, #2
   11b0c:	strb	r0, [r1]
   11b10:	bx	lr
   11b14:	push	{r4, r5, r6, sl, fp, lr}
   11b18:	add	fp, sp, #16
   11b1c:	sub	sp, sp, #8
   11b20:	movw	r0, #29004	; 0x714c
   11b24:	movt	r0, #2
   11b28:	ldr	r0, [r0]
   11b2c:	bl	15884 <__assert_fail@plt+0x47f8>
   11b30:	cmp	r0, #0
   11b34:	beq	11b5c <__assert_fail@plt+0xad0>
   11b38:	movw	r5, #29028	; 0x7164
   11b3c:	movt	r5, #2
   11b40:	ldrb	r0, [r5]
   11b44:	cmp	r0, #0
   11b48:	beq	11b88 <__assert_fail@plt+0xafc>
   11b4c:	bl	10fb4 <__errno_location@plt>
   11b50:	ldr	r0, [r0]
   11b54:	cmp	r0, #32
   11b58:	bne	11b88 <__assert_fail@plt+0xafc>
   11b5c:	movw	r0, #28992	; 0x7140
   11b60:	movt	r0, #2
   11b64:	ldr	r0, [r0]
   11b68:	bl	15884 <__assert_fail@plt+0x47f8>
   11b6c:	cmp	r0, #0
   11b70:	subeq	sp, fp, #16
   11b74:	popeq	{r4, r5, r6, sl, fp, pc}
   11b78:	movw	r0, #28908	; 0x70ec
   11b7c:	movt	r0, #2
   11b80:	ldr	r0, [r0]
   11b84:	bl	10e88 <_exit@plt>
   11b88:	movw	r1, #24975	; 0x618f
   11b8c:	mov	r0, #0
   11b90:	mov	r2, #5
   11b94:	movt	r1, #1
   11b98:	bl	10ec4 <dcgettext@plt>
   11b9c:	ldr	r6, [r5, #4]
   11ba0:	mov	r4, r0
   11ba4:	bl	10fb4 <__errno_location@plt>
   11ba8:	ldr	r5, [r0]
   11bac:	cmp	r6, #0
   11bb0:	bne	11bcc <__assert_fail@plt+0xb40>
   11bb4:	movw	r2, #24991	; 0x619f
   11bb8:	mov	r0, #0
   11bbc:	mov	r1, r5
   11bc0:	mov	r3, r4
   11bc4:	movt	r2, #1
   11bc8:	b	11bec <__assert_fail@plt+0xb60>
   11bcc:	mov	r0, r6
   11bd0:	bl	13a1c <__assert_fail@plt+0x2990>
   11bd4:	movw	r2, #24987	; 0x619b
   11bd8:	mov	r3, r0
   11bdc:	str	r4, [sp]
   11be0:	mov	r0, #0
   11be4:	mov	r1, r5
   11be8:	movt	r2, #1
   11bec:	bl	10f30 <error@plt>
   11bf0:	movw	r0, #28908	; 0x70ec
   11bf4:	movt	r0, #2
   11bf8:	ldr	r0, [r0]
   11bfc:	bl	10e88 <_exit@plt>
   11c00:	b	10e58 <posix_fadvise64@plt>
   11c04:	cmp	r0, #0
   11c08:	bxeq	lr
   11c0c:	push	{r4, sl, fp, lr}
   11c10:	add	fp, sp, #8
   11c14:	sub	sp, sp, #16
   11c18:	mov	r4, r1
   11c1c:	bl	10fe4 <fileno@plt>
   11c20:	mov	r1, #0
   11c24:	mov	r2, #0
   11c28:	mov	r3, #0
   11c2c:	str	r1, [sp]
   11c30:	stmib	sp, {r1, r4}
   11c34:	bl	10e58 <posix_fadvise64@plt>
   11c38:	sub	sp, fp, #8
   11c3c:	pop	{r4, sl, fp, pc}
   11c40:	push	{r4, r5, r6, sl, fp, lr}
   11c44:	add	fp, sp, #16
   11c48:	sub	sp, sp, #8
   11c4c:	mov	r4, r0
   11c50:	bl	10fe4 <fileno@plt>
   11c54:	cmn	r0, #1
   11c58:	ble	11ccc <__assert_fail@plt+0xc40>
   11c5c:	mov	r0, r4
   11c60:	bl	10f54 <__freading@plt>
   11c64:	cmp	r0, #0
   11c68:	beq	11c94 <__assert_fail@plt+0xc08>
   11c6c:	mov	r0, r4
   11c70:	bl	10fe4 <fileno@plt>
   11c74:	mov	r1, #1
   11c78:	mov	r2, #0
   11c7c:	mov	r3, #0
   11c80:	str	r1, [sp]
   11c84:	bl	10f00 <lseek64@plt>
   11c88:	and	r0, r0, r1
   11c8c:	cmn	r0, #1
   11c90:	beq	11ccc <__assert_fail@plt+0xc40>
   11c94:	mov	r0, r4
   11c98:	bl	11cdc <__assert_fail@plt+0xc50>
   11c9c:	cmp	r0, #0
   11ca0:	beq	11ccc <__assert_fail@plt+0xc40>
   11ca4:	bl	10fb4 <__errno_location@plt>
   11ca8:	ldr	r6, [r0]
   11cac:	mov	r5, r0
   11cb0:	mov	r0, r4
   11cb4:	bl	10ffc <fclose@plt>
   11cb8:	cmp	r6, #0
   11cbc:	strne	r6, [r5]
   11cc0:	mvnne	r0, #0
   11cc4:	sub	sp, fp, #16
   11cc8:	pop	{r4, r5, r6, sl, fp, pc}
   11ccc:	mov	r0, r4
   11cd0:	sub	sp, fp, #16
   11cd4:	pop	{r4, r5, r6, sl, fp, lr}
   11cd8:	b	10ffc <fclose@plt>
   11cdc:	push	{r4, sl, fp, lr}
   11ce0:	add	fp, sp, #8
   11ce4:	sub	sp, sp, #8
   11ce8:	mov	r4, r0
   11cec:	cmp	r0, #0
   11cf0:	beq	11d28 <__assert_fail@plt+0xc9c>
   11cf4:	mov	r0, r4
   11cf8:	bl	10f54 <__freading@plt>
   11cfc:	cmp	r0, #0
   11d00:	beq	11d28 <__assert_fail@plt+0xc9c>
   11d04:	ldrb	r0, [r4, #1]
   11d08:	tst	r0, #1
   11d0c:	beq	11d28 <__assert_fail@plt+0xc9c>
   11d10:	mov	r0, #1
   11d14:	mov	r2, #0
   11d18:	mov	r3, #0
   11d1c:	str	r0, [sp]
   11d20:	mov	r0, r4
   11d24:	bl	11d38 <__assert_fail@plt+0xcac>
   11d28:	mov	r0, r4
   11d2c:	sub	sp, fp, #8
   11d30:	pop	{r4, sl, fp, lr}
   11d34:	b	10e64 <fflush@plt>
   11d38:	push	{r4, r5, r6, r7, fp, lr}
   11d3c:	add	fp, sp, #16
   11d40:	sub	sp, sp, #8
   11d44:	mov	r4, r0
   11d48:	ldr	r0, [r0, #4]
   11d4c:	mov	r5, r3
   11d50:	mov	r6, r2
   11d54:	ldr	r1, [r4, #8]
   11d58:	cmp	r1, r0
   11d5c:	bne	11d78 <__assert_fail@plt+0xcec>
   11d60:	ldrd	r0, [r4, #16]
   11d64:	cmp	r1, r0
   11d68:	bne	11d78 <__assert_fail@plt+0xcec>
   11d6c:	ldr	r0, [r4, #36]	; 0x24
   11d70:	cmp	r0, #0
   11d74:	beq	11d90 <__assert_fail@plt+0xd04>
   11d78:	mov	r0, r4
   11d7c:	mov	r2, r6
   11d80:	mov	r3, r5
   11d84:	sub	sp, fp, #16
   11d88:	pop	{r4, r5, r6, r7, fp, lr}
   11d8c:	b	11008 <fseeko64@plt>
   11d90:	ldr	r7, [fp, #8]
   11d94:	mov	r0, r4
   11d98:	bl	10fe4 <fileno@plt>
   11d9c:	mov	r2, r6
   11da0:	mov	r3, r5
   11da4:	str	r7, [sp]
   11da8:	bl	10f00 <lseek64@plt>
   11dac:	and	r2, r0, r1
   11db0:	cmn	r2, #1
   11db4:	beq	11dd4 <__assert_fail@plt+0xd48>
   11db8:	strd	r0, [r4, #80]	; 0x50
   11dbc:	ldr	r0, [r4]
   11dc0:	bic	r0, r0, #16
   11dc4:	str	r0, [r4]
   11dc8:	mov	r0, #0
   11dcc:	sub	sp, fp, #16
   11dd0:	pop	{r4, r5, r6, r7, fp, pc}
   11dd4:	mvn	r0, #0
   11dd8:	sub	sp, fp, #16
   11ddc:	pop	{r4, r5, r6, r7, fp, pc}
   11de0:	push	{r4, r5, fp, lr}
   11de4:	add	fp, sp, #8
   11de8:	cmp	r0, #0
   11dec:	beq	11e80 <__assert_fail@plt+0xdf4>
   11df0:	mov	r1, #47	; 0x2f
   11df4:	mov	r4, r0
   11df8:	bl	11038 <strrchr@plt>
   11dfc:	cmp	r0, #0
   11e00:	mov	r5, r4
   11e04:	addne	r5, r0, #1
   11e08:	sub	r0, r5, r4
   11e0c:	cmp	r0, #7
   11e10:	blt	11e64 <__assert_fail@plt+0xdd8>
   11e14:	movw	r1, #25050	; 0x61da
   11e18:	sub	r0, r5, #7
   11e1c:	mov	r2, #7
   11e20:	movt	r1, #1
   11e24:	bl	11074 <strncmp@plt>
   11e28:	cmp	r0, #0
   11e2c:	bne	11e64 <__assert_fail@plt+0xdd8>
   11e30:	movw	r1, #25058	; 0x61e2
   11e34:	mov	r0, r5
   11e38:	mov	r2, #3
   11e3c:	movt	r1, #1
   11e40:	bl	11074 <strncmp@plt>
   11e44:	cmp	r0, #0
   11e48:	beq	11e54 <__assert_fail@plt+0xdc8>
   11e4c:	mov	r4, r5
   11e50:	b	11e64 <__assert_fail@plt+0xdd8>
   11e54:	movw	r0, #28976	; 0x7130
   11e58:	add	r4, r5, #3
   11e5c:	movt	r0, #2
   11e60:	str	r4, [r0]
   11e64:	movw	r0, #28980	; 0x7134
   11e68:	movt	r0, #2
   11e6c:	str	r4, [r0]
   11e70:	movw	r0, #29036	; 0x716c
   11e74:	movt	r0, #2
   11e78:	str	r4, [r0]
   11e7c:	pop	{r4, r5, fp, pc}
   11e80:	movw	r0, #28992	; 0x7140
   11e84:	mov	r1, #55	; 0x37
   11e88:	mov	r2, #1
   11e8c:	movt	r0, #2
   11e90:	ldr	r3, [r0]
   11e94:	movw	r0, #24994	; 0x61a2
   11e98:	movt	r0, #1
   11e9c:	bl	10ef4 <fwrite@plt>
   11ea0:	bl	11080 <abort@plt>
   11ea4:	push	{r4, r5, r6, sl, fp, lr}
   11ea8:	add	fp, sp, #16
   11eac:	mov	r4, r0
   11eb0:	movw	r0, #29040	; 0x7170
   11eb4:	movt	r0, #2
   11eb8:	cmp	r4, #0
   11ebc:	moveq	r4, r0
   11ec0:	bl	10fb4 <__errno_location@plt>
   11ec4:	ldr	r6, [r0]
   11ec8:	mov	r5, r0
   11ecc:	mov	r0, r4
   11ed0:	mov	r1, #48	; 0x30
   11ed4:	bl	148dc <__assert_fail@plt+0x3850>
   11ed8:	str	r6, [r5]
   11edc:	pop	{r4, r5, r6, sl, fp, pc}
   11ee0:	movw	r1, #29040	; 0x7170
   11ee4:	cmp	r0, #0
   11ee8:	movt	r1, #2
   11eec:	movne	r1, r0
   11ef0:	ldr	r0, [r1]
   11ef4:	bx	lr
   11ef8:	movw	r2, #29040	; 0x7170
   11efc:	cmp	r0, #0
   11f00:	movt	r2, #2
   11f04:	movne	r2, r0
   11f08:	str	r1, [r2]
   11f0c:	bx	lr
   11f10:	movw	r3, #29040	; 0x7170
   11f14:	cmp	r0, #0
   11f18:	and	r2, r2, #1
   11f1c:	movt	r3, #2
   11f20:	movne	r3, r0
   11f24:	ubfx	r0, r1, #5, #3
   11f28:	and	r1, r1, #31
   11f2c:	add	ip, r3, r0, lsl #2
   11f30:	mov	r0, #1
   11f34:	ldr	r3, [ip, #8]
   11f38:	and	r0, r0, r3, lsr r1
   11f3c:	eor	r2, r0, r2
   11f40:	eor	r1, r3, r2, lsl r1
   11f44:	str	r1, [ip, #8]
   11f48:	bx	lr
   11f4c:	movw	r2, #29040	; 0x7170
   11f50:	cmp	r0, #0
   11f54:	movt	r2, #2
   11f58:	movne	r2, r0
   11f5c:	ldr	r0, [r2, #4]
   11f60:	str	r1, [r2, #4]
   11f64:	bx	lr
   11f68:	push	{fp, lr}
   11f6c:	mov	fp, sp
   11f70:	movw	r3, #29040	; 0x7170
   11f74:	cmp	r0, #0
   11f78:	movt	r3, #2
   11f7c:	movne	r3, r0
   11f80:	cmp	r1, #0
   11f84:	mov	r0, #10
   11f88:	cmpne	r2, #0
   11f8c:	str	r0, [r3]
   11f90:	bne	11f98 <__assert_fail@plt+0xf0c>
   11f94:	bl	11080 <abort@plt>
   11f98:	str	r1, [r3, #40]	; 0x28
   11f9c:	str	r2, [r3, #44]	; 0x2c
   11fa0:	pop	{fp, pc}
   11fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fa8:	add	fp, sp, #28
   11fac:	sub	sp, sp, #20
   11fb0:	mov	r7, r0
   11fb4:	ldr	r0, [fp, #8]
   11fb8:	movw	r5, #29040	; 0x7170
   11fbc:	mov	r8, r3
   11fc0:	mov	r9, r2
   11fc4:	mov	sl, r1
   11fc8:	movt	r5, #2
   11fcc:	cmp	r0, #0
   11fd0:	movne	r5, r0
   11fd4:	bl	10fb4 <__errno_location@plt>
   11fd8:	ldr	r2, [r5, #40]	; 0x28
   11fdc:	ldr	r3, [r5, #44]	; 0x2c
   11fe0:	mov	r4, r0
   11fe4:	ldm	r5, {r0, r1}
   11fe8:	add	r5, r5, #8
   11fec:	ldr	r6, [r4]
   11ff0:	stm	sp, {r0, r1, r5}
   11ff4:	mov	r0, r7
   11ff8:	mov	r1, sl
   11ffc:	str	r2, [sp, #12]
   12000:	str	r3, [sp, #16]
   12004:	mov	r2, r9
   12008:	mov	r3, r8
   1200c:	bl	1201c <__assert_fail@plt+0xf90>
   12010:	str	r6, [r4]
   12014:	sub	sp, fp, #28
   12018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1201c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12020:	add	fp, sp, #28
   12024:	sub	sp, sp, #156	; 0x9c
   12028:	str	r0, [fp, #-84]	; 0xffffffac
   1202c:	add	r0, r2, #1
   12030:	mov	r6, r1
   12034:	mov	r7, r3
   12038:	str	r2, [fp, #-80]	; 0xffffffb0
   1203c:	str	r0, [sp, #80]	; 0x50
   12040:	ldr	r0, [fp, #12]
   12044:	and	r1, r0, #1
   12048:	str	r1, [sp, #36]	; 0x24
   1204c:	and	r1, r0, #4
   12050:	str	r1, [sp, #32]
   12054:	ubfx	r8, r0, #1, #1
   12058:	bl	10f0c <__ctype_get_mb_cur_max@plt>
   1205c:	str	r0, [sp, #40]	; 0x28
   12060:	ldr	r0, [fp, #24]
   12064:	ldr	r4, [fp, #8]
   12068:	mov	r1, #0
   1206c:	str	r1, [fp, #-52]	; 0xffffffcc
   12070:	mov	r1, #0
   12074:	str	r1, [sp, #60]	; 0x3c
   12078:	mov	r1, #1
   1207c:	str	r1, [sp, #84]	; 0x54
   12080:	str	r0, [sp, #76]	; 0x4c
   12084:	ldr	r0, [fp, #20]
   12088:	str	r0, [sp, #72]	; 0x48
   1208c:	mov	r0, #0
   12090:	str	r0, [sp, #56]	; 0x38
   12094:	mov	r0, #0
   12098:	str	r0, [fp, #-88]	; 0xffffffa8
   1209c:	mov	r0, #0
   120a0:	str	r0, [fp, #-72]	; 0xffffffb8
   120a4:	mov	r0, #0
   120a8:	cmp	r4, #10
   120ac:	bhi	133c8 <__assert_fail@plt+0x233c>
   120b0:	add	r1, pc, #24
   120b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   120b8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   120bc:	mov	r5, r6
   120c0:	mov	r9, #0
   120c4:	mov	r2, #1
   120c8:	mov	r3, #0
   120cc:	ldr	pc, [r1, r4, lsl #2]
   120d0:	muleq	r1, r8, r1
   120d4:	ldrdeq	r2, [r1], -r4
   120d8:	andeq	r2, r1, r8, lsr #3
   120dc:	muleq	r1, r0, r1
   120e0:	andeq	r2, r1, r8, asr #3
   120e4:	andeq	r2, r1, ip, lsr #4
   120e8:			; <UNDEFINED> instruction: 0x000121b8
   120ec:	andeq	r2, r1, r4, lsr #9
   120f0:	strdeq	r2, [r1], -ip
   120f4:	strdeq	r2, [r1], -ip
   120f8:	andeq	r2, r1, r4, lsr r3
   120fc:	movw	r6, #25140	; 0x6234
   12100:	mov	r0, #0
   12104:	mov	r2, #5
   12108:	movt	r6, #1
   1210c:	mov	r1, r6
   12110:	bl	10ec4 <dcgettext@plt>
   12114:	cmp	r0, r6
   12118:	str	r0, [sp, #72]	; 0x48
   1211c:	bne	1230c <__assert_fail@plt+0x1280>
   12120:	bl	15930 <__assert_fail@plt+0x48a4>
   12124:	ldrb	r1, [r0]
   12128:	and	r1, r1, #223	; 0xdf
   1212c:	cmp	r1, #71	; 0x47
   12130:	beq	1228c <__assert_fail@plt+0x1200>
   12134:	cmp	r1, #85	; 0x55
   12138:	bne	122f0 <__assert_fail@plt+0x1264>
   1213c:	ldrb	r1, [r0, #1]
   12140:	and	r1, r1, #223	; 0xdf
   12144:	cmp	r1, #84	; 0x54
   12148:	bne	122f0 <__assert_fail@plt+0x1264>
   1214c:	ldrb	r1, [r0, #2]
   12150:	and	r1, r1, #223	; 0xdf
   12154:	cmp	r1, #70	; 0x46
   12158:	bne	122f0 <__assert_fail@plt+0x1264>
   1215c:	ldrb	r1, [r0, #3]
   12160:	cmp	r1, #45	; 0x2d
   12164:	bne	122f0 <__assert_fail@plt+0x1264>
   12168:	ldrb	r1, [r0, #4]
   1216c:	cmp	r1, #56	; 0x38
   12170:	bne	122f0 <__assert_fail@plt+0x1264>
   12174:	ldrb	r0, [r0, #5]
   12178:	cmp	r0, #0
   1217c:	movw	r0, #25144	; 0x6238
   12180:	movt	r0, #1
   12184:	str	r0, [sp, #72]	; 0x48
   12188:	bne	122f0 <__assert_fail@plt+0x1264>
   1218c:	b	1230c <__assert_fail@plt+0x1280>
   12190:	mov	r0, #1
   12194:	b	121d4 <__assert_fail@plt+0x1148>
   12198:	mov	r4, #0
   1219c:	mov	r9, #0
   121a0:	mov	r2, r0
   121a4:	b	12224 <__assert_fail@plt+0x1198>
   121a8:	tst	r8, #1
   121ac:	bne	121d4 <__assert_fail@plt+0x1148>
   121b0:	mov	r2, r0
   121b4:	b	121fc <__assert_fail@plt+0x1170>
   121b8:	mov	r0, #1
   121bc:	mov	r9, #0
   121c0:	mov	r4, #5
   121c4:	b	12240 <__assert_fail@plt+0x11b4>
   121c8:	mov	r2, #1
   121cc:	tst	r8, #1
   121d0:	beq	121fc <__assert_fail@plt+0x1170>
   121d4:	mov	r1, #1
   121d8:	mov	r9, #0
   121dc:	mov	r4, #2
   121e0:	mov	r2, r0
   121e4:	mov	r3, #1
   121e8:	str	r1, [fp, #-72]	; 0xffffffb8
   121ec:	movw	r1, #25142	; 0x6236
   121f0:	movt	r1, #1
   121f4:	str	r1, [fp, #-88]	; 0xffffffa8
   121f8:	b	124a4 <__assert_fail@plt+0x1418>
   121fc:	cmp	r5, #0
   12200:	mov	r9, #1
   12204:	mov	r4, #2
   12208:	movne	r0, #39	; 0x27
   1220c:	strbne	r0, [ip]
   12210:	movw	r0, #25142	; 0x6236
   12214:	movt	r0, #1
   12218:	str	r0, [fp, #-88]	; 0xffffffa8
   1221c:	mov	r0, #1
   12220:	str	r0, [fp, #-72]	; 0xffffffb8
   12224:	mov	r3, #0
   12228:	b	124a4 <__assert_fail@plt+0x1418>
   1222c:	mov	r4, #5
   12230:	tst	r8, #1
   12234:	beq	1225c <__assert_fail@plt+0x11d0>
   12238:	mov	r0, #1
   1223c:	mov	r9, #0
   12240:	str	r0, [fp, #-72]	; 0xffffffb8
   12244:	movw	r0, #25138	; 0x6232
   12248:	mov	r2, #1
   1224c:	mov	r3, #1
   12250:	movt	r0, #1
   12254:	str	r0, [fp, #-88]	; 0xffffffa8
   12258:	b	124a4 <__assert_fail@plt+0x1418>
   1225c:	cmp	r5, #0
   12260:	mov	r3, #0
   12264:	mov	r9, #1
   12268:	mov	r2, #1
   1226c:	movne	r0, #34	; 0x22
   12270:	strbne	r0, [ip]
   12274:	movw	r0, #25138	; 0x6232
   12278:	movt	r0, #1
   1227c:	str	r0, [fp, #-88]	; 0xffffffa8
   12280:	mov	r0, #1
   12284:	str	r0, [fp, #-72]	; 0xffffffb8
   12288:	b	124a4 <__assert_fail@plt+0x1418>
   1228c:	ldrb	r1, [r0, #1]
   12290:	and	r1, r1, #223	; 0xdf
   12294:	cmp	r1, #66	; 0x42
   12298:	bne	122f0 <__assert_fail@plt+0x1264>
   1229c:	ldrb	r1, [r0, #2]
   122a0:	cmp	r1, #49	; 0x31
   122a4:	bne	122f0 <__assert_fail@plt+0x1264>
   122a8:	ldrb	r1, [r0, #3]
   122ac:	cmp	r1, #56	; 0x38
   122b0:	bne	122f0 <__assert_fail@plt+0x1264>
   122b4:	ldrb	r1, [r0, #4]
   122b8:	cmp	r1, #48	; 0x30
   122bc:	bne	122f0 <__assert_fail@plt+0x1264>
   122c0:	ldrb	r1, [r0, #5]
   122c4:	cmp	r1, #51	; 0x33
   122c8:	bne	122f0 <__assert_fail@plt+0x1264>
   122cc:	ldrb	r1, [r0, #6]
   122d0:	cmp	r1, #48	; 0x30
   122d4:	bne	122f0 <__assert_fail@plt+0x1264>
   122d8:	ldrb	r0, [r0, #7]
   122dc:	cmp	r0, #0
   122e0:	movw	r0, #25152	; 0x6240
   122e4:	movt	r0, #1
   122e8:	str	r0, [sp, #72]	; 0x48
   122ec:	beq	1230c <__assert_fail@plt+0x1280>
   122f0:	movw	r1, #25138	; 0x6232
   122f4:	movw	r0, #25142	; 0x6236
   122f8:	cmp	r4, #9
   122fc:	movt	r1, #1
   12300:	movt	r0, #1
   12304:	moveq	r0, r1
   12308:	str	r0, [sp, #72]	; 0x48
   1230c:	movw	r6, #25142	; 0x6236
   12310:	mov	r0, #0
   12314:	mov	r2, #5
   12318:	movt	r6, #1
   1231c:	mov	r1, r6
   12320:	bl	10ec4 <dcgettext@plt>
   12324:	cmp	r0, r6
   12328:	str	r0, [sp, #76]	; 0x4c
   1232c:	beq	12378 <__assert_fail@plt+0x12ec>
   12330:	ldr	ip, [fp, #-84]	; 0xffffffac
   12334:	mov	r9, #0
   12338:	tst	r8, #1
   1233c:	bne	12480 <__assert_fail@plt+0x13f4>
   12340:	ldr	r0, [sp, #72]	; 0x48
   12344:	ldrb	r0, [r0]
   12348:	cmp	r0, #0
   1234c:	beq	12480 <__assert_fail@plt+0x13f4>
   12350:	ldr	r1, [sp, #72]	; 0x48
   12354:	mov	r9, #0
   12358:	add	r1, r1, #1
   1235c:	cmp	r9, r5
   12360:	strbcc	r0, [ip, r9]
   12364:	ldrb	r0, [r1, r9]
   12368:	add	r9, r9, #1
   1236c:	cmp	r0, #0
   12370:	bne	1235c <__assert_fail@plt+0x12d0>
   12374:	b	12480 <__assert_fail@plt+0x13f4>
   12378:	bl	15930 <__assert_fail@plt+0x48a4>
   1237c:	ldrb	r1, [r0]
   12380:	and	r1, r1, #223	; 0xdf
   12384:	cmp	r1, #71	; 0x47
   12388:	beq	123f8 <__assert_fail@plt+0x136c>
   1238c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12390:	cmp	r1, #85	; 0x55
   12394:	bne	12454 <__assert_fail@plt+0x13c8>
   12398:	ldrb	r1, [r0, #1]
   1239c:	and	r1, r1, #223	; 0xdf
   123a0:	cmp	r1, #84	; 0x54
   123a4:	bne	12454 <__assert_fail@plt+0x13c8>
   123a8:	ldrb	r1, [r0, #2]
   123ac:	and	r1, r1, #223	; 0xdf
   123b0:	cmp	r1, #70	; 0x46
   123b4:	bne	12454 <__assert_fail@plt+0x13c8>
   123b8:	ldrb	r1, [r0, #3]
   123bc:	cmp	r1, #45	; 0x2d
   123c0:	bne	12454 <__assert_fail@plt+0x13c8>
   123c4:	ldrb	r1, [r0, #4]
   123c8:	cmp	r1, #56	; 0x38
   123cc:	bne	12454 <__assert_fail@plt+0x13c8>
   123d0:	ldrb	r0, [r0, #5]
   123d4:	cmp	r0, #0
   123d8:	bne	12454 <__assert_fail@plt+0x13c8>
   123dc:	movw	r0, #25148	; 0x623c
   123e0:	movt	r0, #1
   123e4:	str	r0, [sp, #76]	; 0x4c
   123e8:	mov	r9, #0
   123ec:	tst	r8, #1
   123f0:	beq	12340 <__assert_fail@plt+0x12b4>
   123f4:	b	12480 <__assert_fail@plt+0x13f4>
   123f8:	ldrb	r1, [r0, #1]
   123fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12400:	and	r1, r1, #223	; 0xdf
   12404:	cmp	r1, #66	; 0x42
   12408:	bne	12454 <__assert_fail@plt+0x13c8>
   1240c:	ldrb	r1, [r0, #2]
   12410:	cmp	r1, #49	; 0x31
   12414:	bne	12454 <__assert_fail@plt+0x13c8>
   12418:	ldrb	r1, [r0, #3]
   1241c:	cmp	r1, #56	; 0x38
   12420:	bne	12454 <__assert_fail@plt+0x13c8>
   12424:	ldrb	r1, [r0, #4]
   12428:	cmp	r1, #48	; 0x30
   1242c:	bne	12454 <__assert_fail@plt+0x13c8>
   12430:	ldrb	r1, [r0, #5]
   12434:	cmp	r1, #51	; 0x33
   12438:	bne	12454 <__assert_fail@plt+0x13c8>
   1243c:	ldrb	r1, [r0, #6]
   12440:	cmp	r1, #48	; 0x30
   12444:	bne	12454 <__assert_fail@plt+0x13c8>
   12448:	ldrb	r0, [r0, #7]
   1244c:	cmp	r0, #0
   12450:	beq	13268 <__assert_fail@plt+0x21dc>
   12454:	movw	r0, #25142	; 0x6236
   12458:	cmp	r4, #9
   1245c:	movt	r0, #1
   12460:	mov	r1, r0
   12464:	movw	r0, #25138	; 0x6232
   12468:	movt	r0, #1
   1246c:	moveq	r1, r0
   12470:	str	r1, [sp, #76]	; 0x4c
   12474:	mov	r9, #0
   12478:	tst	r8, #1
   1247c:	beq	12340 <__assert_fail@plt+0x12b4>
   12480:	ldr	r6, [sp, #76]	; 0x4c
   12484:	mov	r0, r6
   12488:	bl	10f9c <strlen@plt>
   1248c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12490:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12494:	str	r0, [fp, #-72]	; 0xffffffb8
   12498:	str	r6, [fp, #-88]	; 0xffffffa8
   1249c:	mov	r2, #1
   124a0:	mov	r3, r8
   124a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   124a8:	str	r4, [fp, #-64]	; 0xffffffc0
   124ac:	mov	sl, #0
   124b0:	str	r3, [fp, #-76]	; 0xffffffb4
   124b4:	str	r2, [sp, #88]	; 0x58
   124b8:	cmp	r0, #0
   124bc:	movwne	r0, #1
   124c0:	and	r1, r0, r3
   124c4:	and	r1, r2, r1
   124c8:	str	r1, [sp, #48]	; 0x30
   124cc:	sub	r1, r4, #2
   124d0:	clz	r1, r1
   124d4:	lsr	r1, r1, #5
   124d8:	and	r1, r1, r3
   124dc:	str	r1, [sp, #44]	; 0x2c
   124e0:	subs	r1, r4, #2
   124e4:	eor	r4, r3, #1
   124e8:	movwne	r1, #1
   124ec:	str	r4, [sp, #92]	; 0x5c
   124f0:	orr	r4, r1, r4
   124f4:	and	r1, r1, r2
   124f8:	and	r0, r0, r1
   124fc:	str	r4, [sp, #64]	; 0x40
   12500:	ldr	r4, [sp, #84]	; 0x54
   12504:	str	r0, [fp, #-60]	; 0xffffffc4
   12508:	orr	r0, r1, r3
   1250c:	ldr	r1, [fp, #16]
   12510:	eor	r0, r0, #1
   12514:	clz	r1, r1
   12518:	lsr	r1, r1, #5
   1251c:	orr	r0, r1, r0
   12520:	str	r0, [fp, #-68]	; 0xffffffbc
   12524:	eor	r0, r2, #1
   12528:	str	r0, [sp, #52]	; 0x34
   1252c:	cmn	r7, #1
   12530:	beq	12540 <__assert_fail@plt+0x14b4>
   12534:	cmp	sl, r7
   12538:	bne	1254c <__assert_fail@plt+0x14c0>
   1253c:	b	131e0 <__assert_fail@plt+0x2154>
   12540:	ldrb	r0, [lr, sl]
   12544:	cmp	r0, #0
   12548:	beq	131e8 <__assert_fail@plt+0x215c>
   1254c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12550:	cmp	r0, #0
   12554:	beq	125b4 <__assert_fail@plt+0x1528>
   12558:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1255c:	mov	r6, r5
   12560:	add	r5, sl, r0
   12564:	cmp	r0, #2
   12568:	bcc	125d4 <__assert_fail@plt+0x1548>
   1256c:	mov	r0, #0
   12570:	cmn	r7, #1
   12574:	str	r0, [fp, #-56]	; 0xffffffc8
   12578:	bne	12590 <__assert_fail@plt+0x1504>
   1257c:	mov	r0, lr
   12580:	bl	10f9c <strlen@plt>
   12584:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12588:	ldr	ip, [fp, #-84]	; 0xffffffac
   1258c:	mov	r7, r0
   12590:	cmp	r5, r7
   12594:	bls	125e4 <__assert_fail@plt+0x1558>
   12598:	mov	r0, #0
   1259c:	mov	r5, r6
   125a0:	str	r0, [fp, #-48]	; 0xffffffd0
   125a4:	ldrb	r6, [lr, sl]
   125a8:	cmp	r6, #126	; 0x7e
   125ac:	bls	12634 <__assert_fail@plt+0x15a8>
   125b0:	b	12b90 <__assert_fail@plt+0x1b04>
   125b4:	mov	r0, #0
   125b8:	str	r0, [fp, #-56]	; 0xffffffc8
   125bc:	mov	r0, #0
   125c0:	str	r0, [fp, #-48]	; 0xffffffd0
   125c4:	ldrb	r6, [lr, sl]
   125c8:	cmp	r6, #126	; 0x7e
   125cc:	bls	12634 <__assert_fail@plt+0x15a8>
   125d0:	b	12b90 <__assert_fail@plt+0x1b04>
   125d4:	mov	r0, #0
   125d8:	str	r0, [fp, #-56]	; 0xffffffc8
   125dc:	cmp	r5, r7
   125e0:	bhi	12598 <__assert_fail@plt+0x150c>
   125e4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   125e8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   125ec:	add	r0, lr, sl
   125f0:	bl	10f90 <bcmp@plt>
   125f4:	ldr	r2, [sp, #92]	; 0x5c
   125f8:	cmp	r0, #0
   125fc:	mov	r1, r0
   12600:	mov	r5, r6
   12604:	movwne	r1, #1
   12608:	orr	r1, r1, r2
   1260c:	tst	r1, #1
   12610:	beq	132a8 <__assert_fail@plt+0x221c>
   12614:	ldr	ip, [fp, #-84]	; 0xffffffac
   12618:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1261c:	clz	r0, r0
   12620:	lsr	r0, r0, #5
   12624:	str	r0, [fp, #-48]	; 0xffffffd0
   12628:	ldrb	r6, [lr, sl]
   1262c:	cmp	r6, #126	; 0x7e
   12630:	bhi	12b90 <__assert_fail@plt+0x1b04>
   12634:	add	r3, pc, #16
   12638:	mov	r8, #1
   1263c:	mov	r2, #110	; 0x6e
   12640:	mov	r0, #97	; 0x61
   12644:	mov	r1, #0
   12648:	ldr	pc, [r3, r6, lsl #2]
   1264c:	andeq	r2, r1, r8, asr #18
   12650:	muleq	r1, r0, fp
   12654:	muleq	r1, r0, fp
   12658:	muleq	r1, r0, fp
   1265c:	muleq	r1, r0, fp
   12660:	muleq	r1, r0, fp
   12664:	muleq	r1, r0, fp
   12668:	andeq	r2, r1, r4, asr #24
   1266c:	andeq	r2, r1, r8, lsr #18
   12670:	andeq	r2, r1, r0, lsr #18
   12674:	andeq	r2, r1, r4, lsr r9
   12678:	andeq	r2, r1, r4, ror #20
   1267c:	andeq	r2, r1, r8, lsl r9
   12680:	andeq	r2, r1, r0, lsr r9
   12684:	muleq	r1, r0, fp
   12688:	muleq	r1, r0, fp
   1268c:	muleq	r1, r0, fp
   12690:	muleq	r1, r0, fp
   12694:	muleq	r1, r0, fp
   12698:	muleq	r1, r0, fp
   1269c:	muleq	r1, r0, fp
   126a0:	muleq	r1, r0, fp
   126a4:	muleq	r1, r0, fp
   126a8:	muleq	r1, r0, fp
   126ac:	muleq	r1, r0, fp
   126b0:	muleq	r1, r0, fp
   126b4:	muleq	r1, r0, fp
   126b8:	muleq	r1, r0, fp
   126bc:	muleq	r1, r0, fp
   126c0:	muleq	r1, r0, fp
   126c4:	muleq	r1, r0, fp
   126c8:	muleq	r1, r0, fp
   126cc:			; <UNDEFINED> instruction: 0x000128bc
   126d0:	andeq	r2, r1, r0, asr #17
   126d4:	andeq	r2, r1, r0, asr #17
   126d8:			; <UNDEFINED> instruction: 0x000128b0
   126dc:	andeq	r2, r1, r0, asr #17
   126e0:	andeq	r2, r1, r8, asr #16
   126e4:	andeq	r2, r1, r0, asr #17
   126e8:	andeq	r2, r1, ip, ror #20
   126ec:	andeq	r2, r1, r0, asr #17
   126f0:	andeq	r2, r1, r0, asr #17
   126f4:	andeq	r2, r1, r0, asr #17
   126f8:	andeq	r2, r1, r8, asr #16
   126fc:	andeq	r2, r1, r8, asr #16
   12700:	andeq	r2, r1, r8, asr #16
   12704:	andeq	r2, r1, r8, asr #16
   12708:	andeq	r2, r1, r8, asr #16
   1270c:	andeq	r2, r1, r8, asr #16
   12710:	andeq	r2, r1, r8, asr #16
   12714:	andeq	r2, r1, r8, asr #16
   12718:	andeq	r2, r1, r8, asr #16
   1271c:	andeq	r2, r1, r8, asr #16
   12720:	andeq	r2, r1, r8, asr #16
   12724:	andeq	r2, r1, r8, asr #16
   12728:	andeq	r2, r1, r8, asr #16
   1272c:	andeq	r2, r1, r8, asr #16
   12730:	andeq	r2, r1, r8, asr #16
   12734:	andeq	r2, r1, r8, asr #16
   12738:	andeq	r2, r1, r0, asr #17
   1273c:	andeq	r2, r1, r0, asr #17
   12740:	andeq	r2, r1, r0, asr #17
   12744:	andeq	r2, r1, r0, asr #17
   12748:	andeq	r2, r1, r0, lsr sl
   1274c:	muleq	r1, r0, fp
   12750:	andeq	r2, r1, r8, asr #16
   12754:	andeq	r2, r1, r8, asr #16
   12758:	andeq	r2, r1, r8, asr #16
   1275c:	andeq	r2, r1, r8, asr #16
   12760:	andeq	r2, r1, r8, asr #16
   12764:	andeq	r2, r1, r8, asr #16
   12768:	andeq	r2, r1, r8, asr #16
   1276c:	andeq	r2, r1, r8, asr #16
   12770:	andeq	r2, r1, r8, asr #16
   12774:	andeq	r2, r1, r8, asr #16
   12778:	andeq	r2, r1, r8, asr #16
   1277c:	andeq	r2, r1, r8, asr #16
   12780:	andeq	r2, r1, r8, asr #16
   12784:	andeq	r2, r1, r8, asr #16
   12788:	andeq	r2, r1, r8, asr #16
   1278c:	andeq	r2, r1, r8, asr #16
   12790:	andeq	r2, r1, r8, asr #16
   12794:	andeq	r2, r1, r8, asr #16
   12798:	andeq	r2, r1, r8, asr #16
   1279c:	andeq	r2, r1, r8, asr #16
   127a0:	andeq	r2, r1, r8, asr #16
   127a4:	andeq	r2, r1, r8, asr #16
   127a8:	andeq	r2, r1, r8, asr #16
   127ac:	andeq	r2, r1, r8, asr #16
   127b0:	andeq	r2, r1, r8, asr #16
   127b4:	andeq	r2, r1, r8, asr #16
   127b8:	andeq	r2, r1, r0, asr #17
   127bc:	strdeq	r2, [r1], -r4
   127c0:	andeq	r2, r1, r8, asr #16
   127c4:	andeq	r2, r1, r0, asr #17
   127c8:	andeq	r2, r1, r8, asr #16
   127cc:	andeq	r2, r1, r0, asr #17
   127d0:	andeq	r2, r1, r8, asr #16
   127d4:	andeq	r2, r1, r8, asr #16
   127d8:	andeq	r2, r1, r8, asr #16
   127dc:	andeq	r2, r1, r8, asr #16
   127e0:	andeq	r2, r1, r8, asr #16
   127e4:	andeq	r2, r1, r8, asr #16
   127e8:	andeq	r2, r1, r8, asr #16
   127ec:	andeq	r2, r1, r8, asr #16
   127f0:	andeq	r2, r1, r8, asr #16
   127f4:	andeq	r2, r1, r8, asr #16
   127f8:	andeq	r2, r1, r8, asr #16
   127fc:	andeq	r2, r1, r8, asr #16
   12800:	andeq	r2, r1, r8, asr #16
   12804:	andeq	r2, r1, r8, asr #16
   12808:	andeq	r2, r1, r8, asr #16
   1280c:	andeq	r2, r1, r8, asr #16
   12810:	andeq	r2, r1, r8, asr #16
   12814:	andeq	r2, r1, r8, asr #16
   12818:	andeq	r2, r1, r8, asr #16
   1281c:	andeq	r2, r1, r8, asr #16
   12820:	andeq	r2, r1, r8, asr #16
   12824:	andeq	r2, r1, r8, asr #16
   12828:	andeq	r2, r1, r8, asr #16
   1282c:	andeq	r2, r1, r8, asr #16
   12830:	andeq	r2, r1, r8, asr #16
   12834:	andeq	r2, r1, r8, asr #16
   12838:	andeq	r2, r1, r8, lsl #17
   1283c:	andeq	r2, r1, r0, asr #17
   12840:	andeq	r2, r1, r8, lsl #17
   12844:			; <UNDEFINED> instruction: 0x000128b0
   12848:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1284c:	tst	r0, #1
   12850:	bne	12b08 <__assert_fail@plt+0x1a7c>
   12854:	ldr	r1, [fp, #16]
   12858:	ubfx	r0, r6, #5, #3
   1285c:	mov	r2, #1
   12860:	ldr	r0, [r1, r0, lsl #2]
   12864:	and	r1, r6, #31
   12868:	tst	r0, r2, lsl r1
   1286c:	beq	12b08 <__assert_fail@plt+0x1a7c>
   12870:	mov	r0, r6
   12874:	mov	r1, r8
   12878:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1287c:	tst	r2, #1
   12880:	beq	12b28 <__assert_fail@plt+0x1a9c>
   12884:	b	13284 <__assert_fail@plt+0x21f8>
   12888:	cmp	r7, #1
   1288c:	beq	128b0 <__assert_fail@plt+0x1824>
   12890:	mov	r8, #0
   12894:	cmn	r7, #1
   12898:	bne	12af4 <__assert_fail@plt+0x1a68>
   1289c:	ldrb	r0, [lr, #1]
   128a0:	cmp	r0, #0
   128a4:	beq	128b0 <__assert_fail@plt+0x1824>
   128a8:	mvn	r7, #0
   128ac:	b	12af4 <__assert_fail@plt+0x1a68>
   128b0:	mov	r8, #0
   128b4:	cmp	sl, #0
   128b8:	bne	12af4 <__assert_fail@plt+0x1a68>
   128bc:	mov	r1, #1
   128c0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   128c4:	cmp	r0, #2
   128c8:	bne	128e0 <__assert_fail@plt+0x1854>
   128cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   128d0:	mov	r8, r1
   128d4:	tst	r0, #1
   128d8:	beq	12848 <__assert_fail@plt+0x17bc>
   128dc:	b	13284 <__assert_fail@plt+0x21f8>
   128e0:	mov	r8, r1
   128e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   128e8:	tst	r0, #1
   128ec:	beq	12854 <__assert_fail@plt+0x17c8>
   128f0:	b	12b08 <__assert_fail@plt+0x1a7c>
   128f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   128f8:	cmp	r0, #2
   128fc:	bne	12bbc <__assert_fail@plt+0x1b30>
   12900:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12904:	tst	r0, #1
   12908:	bne	13284 <__assert_fail@plt+0x21f8>
   1290c:	mov	r0, #0
   12910:	str	r0, [fp, #-56]	; 0xffffffc8
   12914:	b	12bd4 <__assert_fail@plt+0x1b48>
   12918:	mov	r0, #102	; 0x66
   1291c:	b	12c44 <__assert_fail@plt+0x1bb8>
   12920:	mov	r2, #116	; 0x74
   12924:	b	12934 <__assert_fail@plt+0x18a8>
   12928:	mov	r0, #98	; 0x62
   1292c:	b	12c44 <__assert_fail@plt+0x1bb8>
   12930:	mov	r2, #114	; 0x72
   12934:	ldr	r0, [sp, #64]	; 0x40
   12938:	tst	r0, #1
   1293c:	mov	r0, r2
   12940:	bne	12c44 <__assert_fail@plt+0x1bb8>
   12944:	b	13284 <__assert_fail@plt+0x21f8>
   12948:	ldr	r0, [sp, #88]	; 0x58
   1294c:	tst	r0, #1
   12950:	beq	12c64 <__assert_fail@plt+0x1bd8>
   12954:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12958:	tst	r0, #1
   1295c:	bne	133c0 <__assert_fail@plt+0x2334>
   12960:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12964:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12968:	subs	r0, r0, #2
   1296c:	movwne	r0, #1
   12970:	orr	r0, r0, r1
   12974:	tst	r0, #1
   12978:	bne	129b4 <__assert_fail@plt+0x1928>
   1297c:	cmp	r9, r5
   12980:	movcc	r0, #39	; 0x27
   12984:	strbcc	r0, [ip, r9]
   12988:	add	r0, r9, #1
   1298c:	cmp	r0, r5
   12990:	movcc	r1, #36	; 0x24
   12994:	strbcc	r1, [ip, r0]
   12998:	add	r0, r9, #2
   1299c:	add	r9, r9, #3
   129a0:	cmp	r0, r5
   129a4:	movcc	r1, #39	; 0x27
   129a8:	strbcc	r1, [ip, r0]
   129ac:	mov	r0, #1
   129b0:	str	r0, [fp, #-52]	; 0xffffffcc
   129b4:	mov	r1, #1
   129b8:	cmp	r9, r5
   129bc:	mov	r8, #0
   129c0:	mov	r6, #48	; 0x30
   129c4:	str	r1, [fp, #-56]	; 0xffffffc8
   129c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   129cc:	movcc	r0, #92	; 0x5c
   129d0:	strbcc	r0, [ip, r9]
   129d4:	add	r0, r9, #1
   129d8:	cmp	r1, #2
   129dc:	beq	12e30 <__assert_fail@plt+0x1da4>
   129e0:	add	r1, sl, #1
   129e4:	cmp	r1, r7
   129e8:	bcs	12e30 <__assert_fail@plt+0x1da4>
   129ec:	ldrb	r1, [lr, r1]
   129f0:	sub	r1, r1, #48	; 0x30
   129f4:	uxtb	r1, r1
   129f8:	cmp	r1, #9
   129fc:	bhi	12e30 <__assert_fail@plt+0x1da4>
   12a00:	cmp	r0, r5
   12a04:	movcc	r1, #48	; 0x30
   12a08:	strbcc	r1, [ip, r0]
   12a0c:	add	r0, r9, #2
   12a10:	add	r9, r9, #3
   12a14:	cmp	r0, r5
   12a18:	movcc	r1, #48	; 0x30
   12a1c:	strbcc	r1, [ip, r0]
   12a20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12a24:	tst	r0, #1
   12a28:	beq	12854 <__assert_fail@plt+0x17c8>
   12a2c:	b	12b08 <__assert_fail@plt+0x1a7c>
   12a30:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a34:	mov	r6, #63	; 0x3f
   12a38:	cmp	r0, #5
   12a3c:	beq	12e44 <__assert_fail@plt+0x1db8>
   12a40:	mov	r1, #0
   12a44:	cmp	r0, #2
   12a48:	str	r1, [fp, #-56]	; 0xffffffc8
   12a4c:	bne	12f0c <__assert_fail@plt+0x1e80>
   12a50:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a54:	mov	r8, #0
   12a58:	tst	r0, #1
   12a5c:	beq	12848 <__assert_fail@plt+0x17bc>
   12a60:	b	13284 <__assert_fail@plt+0x21f8>
   12a64:	mov	r0, #118	; 0x76
   12a68:	b	12c44 <__assert_fail@plt+0x1bb8>
   12a6c:	mov	r0, #1
   12a70:	mov	r6, #39	; 0x27
   12a74:	str	r0, [sp, #60]	; 0x3c
   12a78:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a7c:	cmp	r0, #2
   12a80:	bne	12c84 <__assert_fail@plt+0x1bf8>
   12a84:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a88:	tst	r0, #1
   12a8c:	bne	13284 <__assert_fail@plt+0x21f8>
   12a90:	ldr	r2, [sp, #56]	; 0x38
   12a94:	clz	r1, r5
   12a98:	mov	r8, #1
   12a9c:	lsr	r1, r1, #5
   12aa0:	cmp	r2, #0
   12aa4:	mov	r0, r2
   12aa8:	movwne	r0, #1
   12aac:	orrs	r0, r0, r1
   12ab0:	moveq	r2, r5
   12ab4:	moveq	r5, r0
   12ab8:	cmp	r9, r5
   12abc:	str	r2, [sp, #56]	; 0x38
   12ac0:	movcc	r0, #39	; 0x27
   12ac4:	strbcc	r0, [ip, r9]
   12ac8:	add	r0, r9, #1
   12acc:	cmp	r0, r5
   12ad0:	movcc	r1, #92	; 0x5c
   12ad4:	strbcc	r1, [ip, r0]
   12ad8:	add	r0, r9, #2
   12adc:	add	r9, r9, #3
   12ae0:	cmp	r0, r5
   12ae4:	movcc	r1, #39	; 0x27
   12ae8:	strbcc	r1, [ip, r0]
   12aec:	mov	r0, #0
   12af0:	str	r0, [fp, #-52]	; 0xffffffcc
   12af4:	mov	r0, #0
   12af8:	str	r0, [fp, #-56]	; 0xffffffc8
   12afc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b00:	tst	r0, #1
   12b04:	beq	12854 <__assert_fail@plt+0x17c8>
   12b08:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12b0c:	mov	r1, r8
   12b10:	cmp	r0, #0
   12b14:	mov	r0, r6
   12b18:	beq	12bdc <__assert_fail@plt+0x1b50>
   12b1c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12b20:	tst	r2, #1
   12b24:	bne	13284 <__assert_fail@plt+0x21f8>
   12b28:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12b2c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12b30:	subs	r2, r2, #2
   12b34:	movwne	r2, #1
   12b38:	orr	r2, r2, r3
   12b3c:	tst	r2, #1
   12b40:	bne	12b7c <__assert_fail@plt+0x1af0>
   12b44:	cmp	r9, r5
   12b48:	movcc	r2, #39	; 0x27
   12b4c:	strbcc	r2, [ip, r9]
   12b50:	add	r2, r9, #1
   12b54:	cmp	r2, r5
   12b58:	movcc	r3, #36	; 0x24
   12b5c:	strbcc	r3, [ip, r2]
   12b60:	add	r2, r9, #2
   12b64:	add	r9, r9, #3
   12b68:	cmp	r2, r5
   12b6c:	movcc	r3, #39	; 0x27
   12b70:	strbcc	r3, [ip, r2]
   12b74:	mov	r2, #1
   12b78:	str	r2, [fp, #-52]	; 0xffffffcc
   12b7c:	cmp	r9, r5
   12b80:	movcc	r2, #92	; 0x5c
   12b84:	strbcc	r2, [ip, r9]
   12b88:	add	r9, r9, #1
   12b8c:	b	12c24 <__assert_fail@plt+0x1b98>
   12b90:	ldr	r0, [sp, #40]	; 0x28
   12b94:	cmp	r0, #1
   12b98:	bne	12c98 <__assert_fail@plt+0x1c0c>
   12b9c:	bl	10f78 <__ctype_b_loc@plt>
   12ba0:	ldr	r0, [r0]
   12ba4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12ba8:	mov	r1, #1
   12bac:	add	r0, r0, r6, lsl #1
   12bb0:	ldrb	r0, [r0, #1]
   12bb4:	ubfx	r8, r0, #6, #1
   12bb8:	b	12ff0 <__assert_fail@plt+0x1f64>
   12bbc:	ldr	r1, [sp, #48]	; 0x30
   12bc0:	mov	r0, #0
   12bc4:	str	r0, [fp, #-56]	; 0xffffffc8
   12bc8:	mov	r0, #92	; 0x5c
   12bcc:	cmp	r1, #0
   12bd0:	beq	12c44 <__assert_fail@plt+0x1bb8>
   12bd4:	mov	r6, #92	; 0x5c
   12bd8:	mov	r8, #0
   12bdc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12be0:	cmp	r0, #0
   12be4:	bne	12c1c <__assert_fail@plt+0x1b90>
   12be8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12bec:	tst	r0, #1
   12bf0:	beq	12c1c <__assert_fail@plt+0x1b90>
   12bf4:	cmp	r9, r5
   12bf8:	movcc	r0, #39	; 0x27
   12bfc:	strbcc	r0, [ip, r9]
   12c00:	add	r0, r9, #1
   12c04:	add	r9, r9, #2
   12c08:	cmp	r0, r5
   12c0c:	movcc	r1, #39	; 0x27
   12c10:	strbcc	r1, [ip, r0]
   12c14:	mov	r0, #0
   12c18:	str	r0, [fp, #-52]	; 0xffffffcc
   12c1c:	mov	r1, r8
   12c20:	mov	r0, r6
   12c24:	cmp	r9, r5
   12c28:	and	r4, r4, r1
   12c2c:	strbcc	r0, [ip, r9]
   12c30:	add	r9, r9, #1
   12c34:	add	sl, sl, #1
   12c38:	cmn	r7, #1
   12c3c:	bne	12534 <__assert_fail@plt+0x14a8>
   12c40:	b	12540 <__assert_fail@plt+0x14b4>
   12c44:	mov	r1, #0
   12c48:	mov	r8, #0
   12c4c:	str	r1, [fp, #-56]	; 0xffffffc8
   12c50:	ldr	r1, [sp, #88]	; 0x58
   12c54:	tst	r1, #1
   12c58:	mov	r1, #0
   12c5c:	beq	12848 <__assert_fail@plt+0x17bc>
   12c60:	b	12b1c <__assert_fail@plt+0x1a90>
   12c64:	ldr	r0, [sp, #36]	; 0x24
   12c68:	mov	r6, #0
   12c6c:	mov	r8, #0
   12c70:	cmp	r0, #0
   12c74:	mov	r0, #0
   12c78:	str	r0, [fp, #-56]	; 0xffffffc8
   12c7c:	bne	12c34 <__assert_fail@plt+0x1ba8>
   12c80:	b	12848 <__assert_fail@plt+0x17bc>
   12c84:	mov	r8, #1
   12c88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c8c:	tst	r0, #1
   12c90:	beq	12854 <__assert_fail@plt+0x17c8>
   12c94:	b	12b08 <__assert_fail@plt+0x1a7c>
   12c98:	mov	r0, #0
   12c9c:	cmn	r7, #1
   12ca0:	str	r0, [fp, #-36]	; 0xffffffdc
   12ca4:	str	r0, [fp, #-40]	; 0xffffffd8
   12ca8:	bne	12cbc <__assert_fail@plt+0x1c30>
   12cac:	mov	r0, lr
   12cb0:	bl	10f9c <strlen@plt>
   12cb4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12cb8:	mov	r7, r0
   12cbc:	ldr	r0, [sp, #44]	; 0x2c
   12cc0:	str	r4, [sp, #84]	; 0x54
   12cc4:	str	r5, [sp, #28]
   12cc8:	cmp	r0, #0
   12ccc:	beq	12f20 <__assert_fail@plt+0x1e94>
   12cd0:	ldr	r0, [sp, #80]	; 0x50
   12cd4:	mov	r8, #1
   12cd8:	mov	r5, #0
   12cdc:	add	r0, r0, sl
   12ce0:	str	r0, [sp, #24]
   12ce4:	sub	r0, fp, #40	; 0x28
   12ce8:	mov	r3, r0
   12cec:	b	12d28 <__assert_fail@plt+0x1c9c>
   12cf0:	ldr	r5, [sp, #68]	; 0x44
   12cf4:	add	r5, r0, r5
   12cf8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12cfc:	bl	10ee8 <iswprint@plt>
   12d00:	cmp	r0, #0
   12d04:	sub	r4, fp, #40	; 0x28
   12d08:	movwne	r0, #1
   12d0c:	and	r8, r8, r0
   12d10:	mov	r0, r4
   12d14:	bl	10eac <mbsinit@plt>
   12d18:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12d1c:	mov	r3, r4
   12d20:	cmp	r0, #0
   12d24:	bne	12fe4 <__assert_fail@plt+0x1f58>
   12d28:	str	r5, [sp, #68]	; 0x44
   12d2c:	add	r5, r5, sl
   12d30:	sub	r0, fp, #44	; 0x2c
   12d34:	add	r1, lr, r5
   12d38:	sub	r2, r7, r5
   12d3c:	bl	15968 <__assert_fail@plt+0x48dc>
   12d40:	cmn	r0, #2
   12d44:	beq	12fa4 <__assert_fail@plt+0x1f18>
   12d48:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d4c:	cmn	r0, #1
   12d50:	beq	12f98 <__assert_fail@plt+0x1f0c>
   12d54:	cmp	r0, #0
   12d58:	beq	12f9c <__assert_fail@plt+0x1f10>
   12d5c:	cmp	r0, #2
   12d60:	bcc	12cf0 <__assert_fail@plt+0x1c64>
   12d64:	ldr	r1, [sp, #68]	; 0x44
   12d68:	ldr	r2, [sp, #24]
   12d6c:	add	r1, r2, r1
   12d70:	sub	r2, r0, #1
   12d74:	ldrb	r3, [r1]
   12d78:	sub	r3, r3, #91	; 0x5b
   12d7c:	cmp	r3, #33	; 0x21
   12d80:	bls	12da0 <__assert_fail@plt+0x1d14>
   12d84:	add	r1, r1, #1
   12d88:	subs	r2, r2, #1
   12d8c:	beq	12cf0 <__assert_fail@plt+0x1c64>
   12d90:	ldrb	r3, [r1]
   12d94:	sub	r3, r3, #91	; 0x5b
   12d98:	cmp	r3, #33	; 0x21
   12d9c:	bhi	12d84 <__assert_fail@plt+0x1cf8>
   12da0:	add	r5, pc, #0
   12da4:	ldr	pc, [r5, r3, lsl #2]
   12da8:			; <UNDEFINED> instruction: 0x000132bc
   12dac:			; <UNDEFINED> instruction: 0x000132bc
   12db0:	andeq	r2, r1, r4, lsl #27
   12db4:			; <UNDEFINED> instruction: 0x000132bc
   12db8:	andeq	r2, r1, r4, lsl #27
   12dbc:			; <UNDEFINED> instruction: 0x000132bc
   12dc0:	andeq	r2, r1, r4, lsl #27
   12dc4:	andeq	r2, r1, r4, lsl #27
   12dc8:	andeq	r2, r1, r4, lsl #27
   12dcc:	andeq	r2, r1, r4, lsl #27
   12dd0:	andeq	r2, r1, r4, lsl #27
   12dd4:	andeq	r2, r1, r4, lsl #27
   12dd8:	andeq	r2, r1, r4, lsl #27
   12ddc:	andeq	r2, r1, r4, lsl #27
   12de0:	andeq	r2, r1, r4, lsl #27
   12de4:	andeq	r2, r1, r4, lsl #27
   12de8:	andeq	r2, r1, r4, lsl #27
   12dec:	andeq	r2, r1, r4, lsl #27
   12df0:	andeq	r2, r1, r4, lsl #27
   12df4:	andeq	r2, r1, r4, lsl #27
   12df8:	andeq	r2, r1, r4, lsl #27
   12dfc:	andeq	r2, r1, r4, lsl #27
   12e00:	andeq	r2, r1, r4, lsl #27
   12e04:	andeq	r2, r1, r4, lsl #27
   12e08:	andeq	r2, r1, r4, lsl #27
   12e0c:	andeq	r2, r1, r4, lsl #27
   12e10:	andeq	r2, r1, r4, lsl #27
   12e14:	andeq	r2, r1, r4, lsl #27
   12e18:	andeq	r2, r1, r4, lsl #27
   12e1c:	andeq	r2, r1, r4, lsl #27
   12e20:	andeq	r2, r1, r4, lsl #27
   12e24:	andeq	r2, r1, r4, lsl #27
   12e28:	andeq	r2, r1, r4, lsl #27
   12e2c:			; <UNDEFINED> instruction: 0x000132bc
   12e30:	mov	r9, r0
   12e34:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e38:	tst	r0, #1
   12e3c:	beq	12854 <__assert_fail@plt+0x17c8>
   12e40:	b	12b08 <__assert_fail@plt+0x1a7c>
   12e44:	mov	r0, #0
   12e48:	str	r0, [fp, #-56]	; 0xffffffc8
   12e4c:	ldr	r0, [sp, #32]
   12e50:	cmp	r0, #0
   12e54:	beq	12f0c <__assert_fail@plt+0x1e80>
   12e58:	add	r0, sl, #2
   12e5c:	mov	r1, r7
   12e60:	cmp	r0, r7
   12e64:	bcs	12f0c <__assert_fail@plt+0x1e80>
   12e68:	add	r1, sl, lr
   12e6c:	ldrb	r1, [r1, #1]
   12e70:	cmp	r1, #63	; 0x3f
   12e74:	bne	12f0c <__assert_fail@plt+0x1e80>
   12e78:	ldrb	r8, [lr, r0]
   12e7c:	sub	r2, r8, #33	; 0x21
   12e80:	cmp	r2, #29
   12e84:	bhi	12f0c <__assert_fail@plt+0x1e80>
   12e88:	mov	r1, r4
   12e8c:	movw	r4, #20929	; 0x51c1
   12e90:	mov	r3, #1
   12e94:	movt	r4, #14336	; 0x3800
   12e98:	tst	r4, r3, lsl r2
   12e9c:	beq	131c8 <__assert_fail@plt+0x213c>
   12ea0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12ea4:	tst	r2, #1
   12ea8:	bne	13284 <__assert_fail@plt+0x21f8>
   12eac:	cmp	r9, r5
   12eb0:	mov	r6, r8
   12eb4:	mov	r4, r1
   12eb8:	mov	sl, r0
   12ebc:	mov	r8, #0
   12ec0:	movcc	r2, #63	; 0x3f
   12ec4:	strbcc	r2, [ip, r9]
   12ec8:	add	r2, r9, #1
   12ecc:	cmp	r2, r5
   12ed0:	movcc	r3, #34	; 0x22
   12ed4:	strbcc	r3, [ip, r2]
   12ed8:	add	r2, r9, #2
   12edc:	cmp	r2, r5
   12ee0:	movcc	r3, #34	; 0x22
   12ee4:	strbcc	r3, [ip, r2]
   12ee8:	add	r2, r9, #3
   12eec:	add	r9, r9, #4
   12ef0:	cmp	r2, r5
   12ef4:	movcc	r3, #63	; 0x3f
   12ef8:	strbcc	r3, [ip, r2]
   12efc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f00:	tst	r0, #1
   12f04:	beq	12854 <__assert_fail@plt+0x17c8>
   12f08:	b	12b08 <__assert_fail@plt+0x1a7c>
   12f0c:	mov	r8, #0
   12f10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f14:	tst	r0, #1
   12f18:	beq	12854 <__assert_fail@plt+0x17c8>
   12f1c:	b	12b08 <__assert_fail@plt+0x1a7c>
   12f20:	mov	r8, #1
   12f24:	mov	r5, #0
   12f28:	sub	r4, fp, #40	; 0x28
   12f2c:	str	r5, [sp, #68]	; 0x44
   12f30:	add	r5, r5, sl
   12f34:	sub	r0, fp, #44	; 0x2c
   12f38:	mov	r3, r4
   12f3c:	add	r1, lr, r5
   12f40:	sub	r2, r7, r5
   12f44:	bl	15968 <__assert_fail@plt+0x48dc>
   12f48:	cmn	r0, #2
   12f4c:	beq	12fa4 <__assert_fail@plt+0x1f18>
   12f50:	cmn	r0, #1
   12f54:	beq	12f98 <__assert_fail@plt+0x1f0c>
   12f58:	ldr	r5, [sp, #68]	; 0x44
   12f5c:	cmp	r0, #0
   12f60:	beq	12fe0 <__assert_fail@plt+0x1f54>
   12f64:	add	r5, r0, r5
   12f68:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12f6c:	bl	10ee8 <iswprint@plt>
   12f70:	cmp	r0, #0
   12f74:	sub	r4, fp, #40	; 0x28
   12f78:	movwne	r0, #1
   12f7c:	and	r8, r8, r0
   12f80:	mov	r0, r4
   12f84:	bl	10eac <mbsinit@plt>
   12f88:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12f8c:	cmp	r0, #0
   12f90:	beq	12f2c <__assert_fail@plt+0x1ea0>
   12f94:	b	12fe4 <__assert_fail@plt+0x1f58>
   12f98:	mov	r8, #0
   12f9c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12fa0:	b	12fd8 <__assert_fail@plt+0x1f4c>
   12fa4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12fa8:	mov	r8, #0
   12fac:	cmp	r5, r7
   12fb0:	bcs	12fd8 <__assert_fail@plt+0x1f4c>
   12fb4:	ldrb	r0, [lr, r5]
   12fb8:	cmp	r0, #0
   12fbc:	beq	12fd8 <__assert_fail@plt+0x1f4c>
   12fc0:	ldr	r0, [sp, #68]	; 0x44
   12fc4:	add	r0, r0, #1
   12fc8:	add	r5, r0, sl
   12fcc:	str	r0, [sp, #68]	; 0x44
   12fd0:	cmp	r5, r7
   12fd4:	bcc	12fb4 <__assert_fail@plt+0x1f28>
   12fd8:	ldr	r5, [sp, #68]	; 0x44
   12fdc:	b	12fe4 <__assert_fail@plt+0x1f58>
   12fe0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12fe4:	mov	r1, r5
   12fe8:	ldr	r5, [sp, #28]
   12fec:	ldr	r4, [sp, #84]	; 0x54
   12ff0:	ldr	r0, [sp, #52]	; 0x34
   12ff4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ff8:	cmp	r1, #1
   12ffc:	orr	r2, r8, r0
   13000:	mov	r0, r1
   13004:	bhi	13010 <__assert_fail@plt+0x1f84>
   13008:	tst	r2, #1
   1300c:	bne	12848 <__assert_fail@plt+0x17bc>
   13010:	add	r0, r0, sl
   13014:	str	r2, [sp, #84]	; 0x54
   13018:	str	r0, [fp, #-56]	; 0xffffffc8
   1301c:	mov	r0, #0
   13020:	tst	r2, #1
   13024:	bne	13104 <__assert_fail@plt+0x2078>
   13028:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1302c:	tst	r1, #1
   13030:	bne	13284 <__assert_fail@plt+0x21f8>
   13034:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13038:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1303c:	subs	r2, r1, #2
   13040:	movwne	r2, #1
   13044:	orr	r2, r2, r0
   13048:	tst	r2, #1
   1304c:	bne	13088 <__assert_fail@plt+0x1ffc>
   13050:	cmp	r9, r5
   13054:	add	r2, r9, #1
   13058:	mov	r0, #1
   1305c:	movcc	r1, #39	; 0x27
   13060:	str	r0, [fp, #-52]	; 0xffffffcc
   13064:	strbcc	r1, [ip, r9]
   13068:	cmp	r2, r5
   1306c:	movcc	r1, #36	; 0x24
   13070:	strbcc	r1, [ip, r2]
   13074:	add	r2, r9, #2
   13078:	add	r9, r9, #3
   1307c:	cmp	r2, r5
   13080:	movcc	r1, #39	; 0x27
   13084:	strbcc	r1, [ip, r2]
   13088:	cmp	r9, r5
   1308c:	add	r2, r9, #1
   13090:	movcc	r1, #92	; 0x5c
   13094:	strbcc	r1, [ip, r9]
   13098:	cmp	r2, r5
   1309c:	bcs	130b0 <__assert_fail@plt+0x2024>
   130a0:	uxtb	r3, r6
   130a4:	mov	r1, #48	; 0x30
   130a8:	orr	r3, r1, r3, lsr #6
   130ac:	strb	r3, [ip, r2]
   130b0:	add	r2, r9, #2
   130b4:	add	r9, r9, #3
   130b8:	cmp	r2, r5
   130bc:	lsrcc	r3, r6, #3
   130c0:	movcc	r1, #6
   130c4:	bficc	r3, r1, #3, #29
   130c8:	mov	r1, #6
   130cc:	bfi	r6, r1, #3, #29
   130d0:	strbcc	r3, [ip, r2]
   130d4:	mov	r2, #1
   130d8:	b	13138 <__assert_fail@plt+0x20ac>
   130dc:	ldr	r1, [sp, #80]	; 0x50
   130e0:	cmp	r9, r2
   130e4:	mov	r5, r2
   130e8:	ldr	r2, [sp, #84]	; 0x54
   130ec:	strbcc	r6, [ip, r9]
   130f0:	add	r9, r9, #1
   130f4:	ldrb	r6, [r1, sl]
   130f8:	mov	sl, r3
   130fc:	tst	r2, #1
   13100:	beq	13028 <__assert_fail@plt+0x1f9c>
   13104:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13108:	tst	r1, #1
   1310c:	beq	1312c <__assert_fail@plt+0x20a0>
   13110:	cmp	r9, r5
   13114:	mov	r2, r0
   13118:	movcc	r1, #92	; 0x5c
   1311c:	strbcc	r1, [ip, r9]
   13120:	add	r9, r9, #1
   13124:	mov	r1, #0
   13128:	b	13134 <__assert_fail@plt+0x20a8>
   1312c:	mov	r1, #0
   13130:	mov	r2, r0
   13134:	str	r1, [fp, #-48]	; 0xffffffd0
   13138:	mov	r0, r2
   1313c:	and	r1, r2, #1
   13140:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13144:	add	r3, sl, #1
   13148:	cmp	r2, r3
   1314c:	bls	131ac <__assert_fail@plt+0x2120>
   13150:	mov	r2, r5
   13154:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13158:	cmp	r1, #0
   1315c:	movwne	r1, #1
   13160:	mvn	r5, r5
   13164:	orr	r5, r5, r1
   13168:	tst	r5, #1
   1316c:	bne	130dc <__assert_fail@plt+0x2050>
   13170:	cmp	r9, r2
   13174:	movcc	r5, r4
   13178:	movcc	r4, #39	; 0x27
   1317c:	strbcc	r4, [ip, r9]
   13180:	movcc	r4, r5
   13184:	add	r5, r9, #1
   13188:	add	r9, r9, #2
   1318c:	cmp	r5, r2
   13190:	movcc	r1, r4
   13194:	movcc	r4, #39	; 0x27
   13198:	strbcc	r4, [ip, r5]
   1319c:	movcc	r4, r1
   131a0:	mov	r1, #0
   131a4:	str	r1, [fp, #-52]	; 0xffffffcc
   131a8:	b	130dc <__assert_fail@plt+0x2050>
   131ac:	cmp	r1, #0
   131b0:	movwne	r1, #1
   131b4:	str	r1, [fp, #-56]	; 0xffffffc8
   131b8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   131bc:	cmp	r0, #0
   131c0:	beq	12be8 <__assert_fail@plt+0x1b5c>
   131c4:	b	12c1c <__assert_fail@plt+0x1b90>
   131c8:	mov	r8, #0
   131cc:	mov	r4, r1
   131d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   131d4:	tst	r0, #1
   131d8:	beq	12854 <__assert_fail@plt+0x17c8>
   131dc:	b	12b08 <__assert_fail@plt+0x1a7c>
   131e0:	mov	r7, sl
   131e4:	b	131ec <__assert_fail@plt+0x2160>
   131e8:	mvn	r7, #0
   131ec:	ldr	r1, [fp, #-64]	; 0xffffffc0
   131f0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   131f4:	ldr	r2, [sp, #88]	; 0x58
   131f8:	eor	r0, r1, #2
   131fc:	orr	r0, r0, r9
   13200:	clz	r0, r0
   13204:	lsr	r0, r0, #5
   13208:	tst	r3, r0
   1320c:	bne	13284 <__assert_fail@plt+0x21f8>
   13210:	subs	r0, r1, #2
   13214:	movwne	r0, #1
   13218:	orr	r0, r3, r0
   1321c:	tst	r0, #1
   13220:	ldreq	r0, [sp, #60]	; 0x3c
   13224:	eoreq	r0, r0, #1
   13228:	tsteq	r0, #1
   1322c:	bne	13360 <__assert_fail@plt+0x22d4>
   13230:	tst	r4, #1
   13234:	bne	13324 <__assert_fail@plt+0x2298>
   13238:	ldr	r6, [sp, #56]	; 0x38
   1323c:	mov	r8, #0
   13240:	cmp	r6, #0
   13244:	beq	1335c <__assert_fail@plt+0x22d0>
   13248:	mov	r1, #0
   1324c:	mov	r4, #2
   13250:	cmp	r5, #0
   13254:	mov	r0, r2
   13258:	mov	r3, #0
   1325c:	str	r1, [sp, #84]	; 0x54
   13260:	beq	120a8 <__assert_fail@plt+0x101c>
   13264:	b	13360 <__assert_fail@plt+0x22d4>
   13268:	movw	r0, #25156	; 0x6244
   1326c:	movt	r0, #1
   13270:	str	r0, [sp, #76]	; 0x4c
   13274:	mov	r9, #0
   13278:	tst	r8, #1
   1327c:	beq	12340 <__assert_fail@plt+0x12b4>
   13280:	b	12480 <__assert_fail@plt+0x13f4>
   13284:	ldr	r1, [sp, #88]	; 0x58
   13288:	mov	r0, #2
   1328c:	tst	r1, #1
   13290:	movwne	r0, #4
   13294:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13298:	ldr	r1, [fp, #12]
   1329c:	cmp	r2, #2
   132a0:	moveq	r2, r0
   132a4:	b	132dc <__assert_fail@plt+0x2250>
   132a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   132ac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   132b0:	ldr	r1, [fp, #12]
   132b4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   132b8:	b	132dc <__assert_fail@plt+0x2250>
   132bc:	ldr	r1, [sp, #88]	; 0x58
   132c0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   132c4:	ldr	r5, [sp, #28]
   132c8:	mov	r0, #2
   132cc:	tst	r1, #1
   132d0:	ldr	r1, [fp, #12]
   132d4:	movwne	r0, #4
   132d8:	mov	r2, r0
   132dc:	mov	r0, #0
   132e0:	bic	r1, r1, #2
   132e4:	str	r2, [sp]
   132e8:	mov	r2, lr
   132ec:	str	r0, [sp, #8]
   132f0:	ldr	r0, [sp, #72]	; 0x48
   132f4:	str	r1, [sp, #4]
   132f8:	mov	r1, r5
   132fc:	str	r0, [sp, #12]
   13300:	ldr	r0, [sp, #76]	; 0x4c
   13304:	str	r0, [sp, #16]
   13308:	mov	r0, ip
   1330c:	mov	r3, r7
   13310:	bl	1201c <__assert_fail@plt+0xf90>
   13314:	mov	r9, r0
   13318:	mov	r0, r9
   1331c:	sub	sp, fp, #28
   13320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13324:	mov	r0, #5
   13328:	ldr	r1, [sp, #56]	; 0x38
   1332c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13330:	str	r0, [sp]
   13334:	ldr	r0, [fp, #12]
   13338:	str	r0, [sp, #4]
   1333c:	ldr	r0, [fp, #16]
   13340:	str	r0, [sp, #8]
   13344:	ldr	r0, [sp, #72]	; 0x48
   13348:	str	r0, [sp, #12]
   1334c:	ldr	r0, [sp, #76]	; 0x4c
   13350:	str	r0, [sp, #16]
   13354:	ldr	r0, [fp, #-84]	; 0xffffffac
   13358:	b	1330c <__assert_fail@plt+0x2280>
   1335c:	mov	r3, #0
   13360:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13364:	cmp	r1, #0
   13368:	beq	133a4 <__assert_fail@plt+0x2318>
   1336c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13370:	tst	r3, #1
   13374:	bne	133a8 <__assert_fail@plt+0x231c>
   13378:	ldrb	r0, [r1]
   1337c:	cmp	r0, #0
   13380:	beq	133a8 <__assert_fail@plt+0x231c>
   13384:	add	r1, r1, #1
   13388:	cmp	r9, r5
   1338c:	strbcc	r0, [r2, r9]
   13390:	add	r9, r9, #1
   13394:	ldrb	r0, [r1], #1
   13398:	cmp	r0, #0
   1339c:	bne	13388 <__assert_fail@plt+0x22fc>
   133a0:	b	133a8 <__assert_fail@plt+0x231c>
   133a4:	ldr	r2, [fp, #-84]	; 0xffffffac
   133a8:	cmp	r9, r5
   133ac:	movcc	r0, #0
   133b0:	strbcc	r0, [r2, r9]
   133b4:	mov	r0, r9
   133b8:	sub	sp, fp, #28
   133bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133c0:	mov	r0, #4
   133c4:	b	13294 <__assert_fail@plt+0x2208>
   133c8:	bl	11080 <abort@plt>
   133cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133d0:	add	fp, sp, #28
   133d4:	sub	sp, sp, #28
   133d8:	movw	r5, #29040	; 0x7170
   133dc:	cmp	r2, #0
   133e0:	mov	r4, r1
   133e4:	mov	r7, r0
   133e8:	str	r0, [sp, #20]
   133ec:	movt	r5, #2
   133f0:	movne	r5, r2
   133f4:	bl	10fb4 <__errno_location@plt>
   133f8:	mov	sl, r0
   133fc:	ldr	r2, [r5, #40]	; 0x28
   13400:	ldr	r3, [r5, #44]	; 0x2c
   13404:	ldm	r5, {r0, r1}
   13408:	orr	r8, r1, #1
   1340c:	add	r9, r5, #8
   13410:	mov	r1, #0
   13414:	ldr	r6, [sl]
   13418:	stm	sp, {r0, r8, r9}
   1341c:	mov	r0, #0
   13420:	str	r2, [sp, #12]
   13424:	str	r3, [sp, #16]
   13428:	mov	r2, r7
   1342c:	mov	r3, r4
   13430:	str	r6, [sp, #24]
   13434:	mov	r6, r4
   13438:	bl	1201c <__assert_fail@plt+0xf90>
   1343c:	add	r7, r0, #1
   13440:	mov	r0, r7
   13444:	bl	144ac <__assert_fail@plt+0x3420>
   13448:	mov	r4, r0
   1344c:	ldr	r0, [r5]
   13450:	ldr	r2, [r5, #44]	; 0x2c
   13454:	ldr	r1, [r5, #40]	; 0x28
   13458:	mov	r3, r6
   1345c:	stm	sp, {r0, r8, r9}
   13460:	str	r2, [sp, #16]
   13464:	ldr	r2, [sp, #20]
   13468:	str	r1, [sp, #12]
   1346c:	mov	r0, r4
   13470:	mov	r1, r7
   13474:	bl	1201c <__assert_fail@plt+0xf90>
   13478:	ldr	r0, [sp, #24]
   1347c:	str	r0, [sl]
   13480:	mov	r0, r4
   13484:	sub	sp, fp, #28
   13488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1348c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13490:	add	fp, sp, #28
   13494:	sub	sp, sp, #36	; 0x24
   13498:	movw	r8, #29040	; 0x7170
   1349c:	cmp	r3, #0
   134a0:	mov	r4, r2
   134a4:	str	r2, [sp, #24]
   134a8:	mov	r5, r1
   134ac:	mov	r6, r0
   134b0:	str	r0, [sp, #20]
   134b4:	movt	r8, #2
   134b8:	movne	r8, r3
   134bc:	bl	10fb4 <__errno_location@plt>
   134c0:	str	r0, [sp, #28]
   134c4:	ldr	r1, [r8, #40]	; 0x28
   134c8:	ldr	r2, [r8, #44]	; 0x2c
   134cc:	ldr	r7, [r0]
   134d0:	cmp	r4, #0
   134d4:	add	sl, r8, #8
   134d8:	mov	r0, #0
   134dc:	ldm	r8, {r3, r9}
   134e0:	orreq	r9, r9, #1
   134e4:	stm	sp, {r3, r9, sl}
   134e8:	str	r1, [sp, #12]
   134ec:	str	r2, [sp, #16]
   134f0:	mov	r1, #0
   134f4:	mov	r2, r6
   134f8:	mov	r3, r5
   134fc:	str	r7, [sp, #32]
   13500:	mov	r7, r5
   13504:	bl	1201c <__assert_fail@plt+0xf90>
   13508:	add	r4, r0, #1
   1350c:	mov	r5, r0
   13510:	mov	r0, r4
   13514:	bl	144ac <__assert_fail@plt+0x3420>
   13518:	mov	r6, r0
   1351c:	ldr	r0, [r8]
   13520:	ldr	r2, [r8, #44]	; 0x2c
   13524:	ldr	r1, [r8, #40]	; 0x28
   13528:	mov	r3, r7
   1352c:	stm	sp, {r0, r9, sl}
   13530:	str	r2, [sp, #16]
   13534:	ldr	r2, [sp, #20]
   13538:	str	r1, [sp, #12]
   1353c:	mov	r0, r6
   13540:	mov	r1, r4
   13544:	bl	1201c <__assert_fail@plt+0xf90>
   13548:	ldr	r0, [sp, #24]
   1354c:	ldr	r1, [sp, #32]
   13550:	ldr	r2, [sp, #28]
   13554:	cmp	r0, #0
   13558:	str	r1, [r2]
   1355c:	strne	r5, [r0]
   13560:	mov	r0, r6
   13564:	sub	sp, fp, #28
   13568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1356c:	push	{r4, r5, r6, r7, fp, lr}
   13570:	add	fp, sp, #16
   13574:	movw	r4, #28960	; 0x7120
   13578:	movt	r4, #2
   1357c:	ldrd	r6, [r4]
   13580:	cmp	r7, #2
   13584:	blt	135b0 <__assert_fail@plt+0x2524>
   13588:	add	r5, r6, #12
   1358c:	mov	r7, #0
   13590:	ldr	r0, [r5, r7, lsl #3]
   13594:	bl	15908 <__assert_fail@plt+0x487c>
   13598:	ldr	r1, [r4, #4]
   1359c:	add	r2, r7, #2
   135a0:	add	r0, r7, #1
   135a4:	mov	r7, r0
   135a8:	cmp	r2, r1
   135ac:	blt	13590 <__assert_fail@plt+0x2504>
   135b0:	ldr	r0, [r6, #4]
   135b4:	movw	r5, #29088	; 0x71a0
   135b8:	movt	r5, #2
   135bc:	cmp	r0, r5
   135c0:	beq	135d4 <__assert_fail@plt+0x2548>
   135c4:	bl	15908 <__assert_fail@plt+0x487c>
   135c8:	mov	r0, #256	; 0x100
   135cc:	str	r0, [r4, #8]
   135d0:	str	r5, [r4, #12]
   135d4:	add	r5, r4, #8
   135d8:	cmp	r6, r5
   135dc:	beq	135ec <__assert_fail@plt+0x2560>
   135e0:	mov	r0, r6
   135e4:	bl	15908 <__assert_fail@plt+0x487c>
   135e8:	str	r5, [r4]
   135ec:	mov	r0, #1
   135f0:	str	r0, [r4, #4]
   135f4:	pop	{r4, r5, r6, r7, fp, pc}
   135f8:	movw	r3, #29040	; 0x7170
   135fc:	mvn	r2, #0
   13600:	movt	r3, #2
   13604:	b	13608 <__assert_fail@plt+0x257c>
   13608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1360c:	add	fp, sp, #28
   13610:	sub	sp, sp, #44	; 0x2c
   13614:	mov	r7, r3
   13618:	str	r2, [sp, #36]	; 0x24
   1361c:	str	r1, [sp, #32]
   13620:	mov	r5, r0
   13624:	bl	10fb4 <__errno_location@plt>
   13628:	cmp	r5, #0
   1362c:	bmi	13794 <__assert_fail@plt+0x2708>
   13630:	cmn	r5, #-2147483647	; 0x80000001
   13634:	beq	13794 <__assert_fail@plt+0x2708>
   13638:	movw	r8, #28960	; 0x7120
   1363c:	mov	r4, r0
   13640:	ldr	r0, [r0]
   13644:	movt	r8, #2
   13648:	str	r4, [sp, #28]
   1364c:	ldr	r1, [r8, #4]
   13650:	ldr	r6, [r8]
   13654:	str	r0, [sp, #24]
   13658:	cmp	r1, r5
   1365c:	ble	13668 <__assert_fail@plt+0x25dc>
   13660:	mov	sl, r6
   13664:	b	136d0 <__assert_fail@plt+0x2644>
   13668:	mov	r0, #8
   1366c:	add	r9, r8, #8
   13670:	str	r1, [fp, #-32]	; 0xffffffe0
   13674:	sub	r1, r5, r1
   13678:	mvn	r3, #-2147483648	; 0x80000000
   1367c:	str	r0, [sp]
   13680:	subs	r0, r6, r9
   13684:	add	r2, r1, #1
   13688:	sub	r1, fp, #32
   1368c:	movne	r0, r6
   13690:	bl	146ac <__assert_fail@plt+0x3620>
   13694:	mov	sl, r0
   13698:	cmp	r6, r9
   1369c:	str	r0, [r8]
   136a0:	bne	136ac <__assert_fail@plt+0x2620>
   136a4:	ldrd	r0, [r8, #8]
   136a8:	stm	sl, {r0, r1}
   136ac:	ldr	r1, [r8, #4]
   136b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   136b4:	add	r0, sl, r1, lsl #3
   136b8:	sub	r1, r2, r1
   136bc:	lsl	r2, r1, #3
   136c0:	mov	r1, #0
   136c4:	bl	10fcc <memset@plt>
   136c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   136cc:	str	r0, [r8, #4]
   136d0:	mov	r9, sl
   136d4:	ldm	r7, {r0, r1}
   136d8:	orr	r8, r1, #1
   136dc:	add	r1, r7, #8
   136e0:	ldr	r2, [r7, #40]	; 0x28
   136e4:	ldr	r3, [r7, #44]	; 0x2c
   136e8:	ldr	r6, [r9, r5, lsl #3]!
   136ec:	str	r1, [sp, #20]
   136f0:	ldr	r4, [r9, #4]!
   136f4:	stm	sp, {r0, r8}
   136f8:	add	r0, sp, #8
   136fc:	stm	r0, {r1, r2, r3}
   13700:	ldr	r2, [sp, #32]
   13704:	ldr	r3, [sp, #36]	; 0x24
   13708:	mov	r1, r6
   1370c:	mov	r0, r4
   13710:	bl	1201c <__assert_fail@plt+0xf90>
   13714:	cmp	r6, r0
   13718:	bhi	1377c <__assert_fail@plt+0x26f0>
   1371c:	add	r6, r0, #1
   13720:	movw	r0, #29088	; 0x71a0
   13724:	movt	r0, #2
   13728:	str	r6, [sl, r5, lsl #3]
   1372c:	cmp	r4, r0
   13730:	beq	1373c <__assert_fail@plt+0x26b0>
   13734:	mov	r0, r4
   13738:	bl	15908 <__assert_fail@plt+0x487c>
   1373c:	mov	r0, r6
   13740:	bl	144ac <__assert_fail@plt+0x3420>
   13744:	str	r0, [r9]
   13748:	mov	r4, r0
   1374c:	add	r3, sp, #8
   13750:	ldr	r0, [r7]
   13754:	ldr	r1, [r7, #40]	; 0x28
   13758:	ldr	r2, [r7, #44]	; 0x2c
   1375c:	stm	sp, {r0, r8}
   13760:	ldr	r0, [sp, #20]
   13764:	stm	r3, {r0, r1, r2}
   13768:	ldr	r2, [sp, #32]
   1376c:	ldr	r3, [sp, #36]	; 0x24
   13770:	mov	r0, r4
   13774:	mov	r1, r6
   13778:	bl	1201c <__assert_fail@plt+0xf90>
   1377c:	ldr	r1, [sp, #24]
   13780:	ldr	r0, [sp, #28]
   13784:	str	r1, [r0]
   13788:	mov	r0, r4
   1378c:	sub	sp, fp, #28
   13790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13794:	bl	11080 <abort@plt>
   13798:	movw	r3, #29040	; 0x7170
   1379c:	movt	r3, #2
   137a0:	b	13608 <__assert_fail@plt+0x257c>
   137a4:	movw	r3, #29040	; 0x7170
   137a8:	mov	r1, r0
   137ac:	mov	r0, #0
   137b0:	mvn	r2, #0
   137b4:	movt	r3, #2
   137b8:	b	13608 <__assert_fail@plt+0x257c>
   137bc:	movw	r3, #29040	; 0x7170
   137c0:	mov	r2, r1
   137c4:	mov	r1, r0
   137c8:	mov	r0, #0
   137cc:	movt	r3, #2
   137d0:	b	13608 <__assert_fail@plt+0x257c>
   137d4:	push	{fp, lr}
   137d8:	mov	fp, sp
   137dc:	sub	sp, sp, #48	; 0x30
   137e0:	vmov.i32	q8, #0	; 0x00000000
   137e4:	mov	ip, #32
   137e8:	mov	r3, sp
   137ec:	mov	lr, r2
   137f0:	cmp	r1, #10
   137f4:	add	r2, r3, #16
   137f8:	vst1.64	{d16-d17}, [r3], ip
   137fc:	vst1.64	{d16-d17}, [r2]
   13800:	vst1.64	{d16-d17}, [r3]
   13804:	beq	13824 <__assert_fail@plt+0x2798>
   13808:	str	r1, [sp]
   1380c:	mov	r3, sp
   13810:	mov	r1, lr
   13814:	mvn	r2, #0
   13818:	bl	13608 <__assert_fail@plt+0x257c>
   1381c:	mov	sp, fp
   13820:	pop	{fp, pc}
   13824:	bl	11080 <abort@plt>
   13828:	push	{r4, sl, fp, lr}
   1382c:	add	fp, sp, #8
   13830:	sub	sp, sp, #48	; 0x30
   13834:	vmov.i32	q8, #0	; 0x00000000
   13838:	mov	ip, r3
   1383c:	mov	r3, sp
   13840:	mov	lr, #32
   13844:	cmp	r1, #10
   13848:	add	r4, r3, #16
   1384c:	vst1.64	{d16-d17}, [r3], lr
   13850:	vst1.64	{d16-d17}, [r4]
   13854:	vst1.64	{d16-d17}, [r3]
   13858:	beq	13878 <__assert_fail@plt+0x27ec>
   1385c:	str	r1, [sp]
   13860:	mov	r1, r2
   13864:	mov	r3, sp
   13868:	mov	r2, ip
   1386c:	bl	13608 <__assert_fail@plt+0x257c>
   13870:	sub	sp, fp, #8
   13874:	pop	{r4, sl, fp, pc}
   13878:	bl	11080 <abort@plt>
   1387c:	push	{fp, lr}
   13880:	mov	fp, sp
   13884:	sub	sp, sp, #48	; 0x30
   13888:	vmov.i32	q8, #0	; 0x00000000
   1388c:	mov	r3, sp
   13890:	mov	ip, #32
   13894:	cmp	r0, #10
   13898:	add	r2, r3, #16
   1389c:	vst1.64	{d16-d17}, [r3], ip
   138a0:	vst1.64	{d16-d17}, [r2]
   138a4:	vst1.64	{d16-d17}, [r3]
   138a8:	beq	138c8 <__assert_fail@plt+0x283c>
   138ac:	str	r0, [sp]
   138b0:	mov	r3, sp
   138b4:	mov	r0, #0
   138b8:	mvn	r2, #0
   138bc:	bl	13608 <__assert_fail@plt+0x257c>
   138c0:	mov	sp, fp
   138c4:	pop	{fp, pc}
   138c8:	bl	11080 <abort@plt>
   138cc:	push	{fp, lr}
   138d0:	mov	fp, sp
   138d4:	sub	sp, sp, #48	; 0x30
   138d8:	vmov.i32	q8, #0	; 0x00000000
   138dc:	mov	r3, sp
   138e0:	mov	ip, #32
   138e4:	cmp	r0, #10
   138e8:	add	lr, r3, #16
   138ec:	vst1.64	{d16-d17}, [r3], ip
   138f0:	vst1.64	{d16-d17}, [lr]
   138f4:	vst1.64	{d16-d17}, [r3]
   138f8:	beq	13914 <__assert_fail@plt+0x2888>
   138fc:	str	r0, [sp]
   13900:	mov	r3, sp
   13904:	mov	r0, #0
   13908:	bl	13608 <__assert_fail@plt+0x257c>
   1390c:	mov	sp, fp
   13910:	pop	{fp, pc}
   13914:	bl	11080 <abort@plt>
   13918:	push	{r4, sl, fp, lr}
   1391c:	add	fp, sp, #8
   13920:	sub	sp, sp, #48	; 0x30
   13924:	mov	lr, r0
   13928:	movw	r0, #29040	; 0x7170
   1392c:	mov	ip, r1
   13930:	mov	r1, #32
   13934:	mov	r4, #1
   13938:	movt	r0, #2
   1393c:	add	r3, r0, #16
   13940:	vld1.64	{d16-d17}, [r0], r1
   13944:	vld1.64	{d20-d21}, [r0]
   13948:	vld1.64	{d18-d19}, [r3]
   1394c:	mov	r3, sp
   13950:	add	r0, r3, #32
   13954:	add	r1, r3, #16
   13958:	vst1.64	{d20-d21}, [r0]
   1395c:	mov	r0, #28
   13960:	vst1.64	{d18-d19}, [r1]
   13964:	mov	r1, r3
   13968:	and	r0, r0, r2, lsr #3
   1396c:	and	r2, r2, #31
   13970:	vst1.64	{d16-d17}, [r1], r0
   13974:	ldr	r0, [r1, #8]
   13978:	bic	r4, r4, r0, lsr r2
   1397c:	eor	r0, r0, r4, lsl r2
   13980:	mov	r2, ip
   13984:	str	r0, [r1, #8]
   13988:	mov	r0, #0
   1398c:	mov	r1, lr
   13990:	bl	13608 <__assert_fail@plt+0x257c>
   13994:	sub	sp, fp, #8
   13998:	pop	{r4, sl, fp, pc}
   1399c:	push	{fp, lr}
   139a0:	mov	fp, sp
   139a4:	sub	sp, sp, #48	; 0x30
   139a8:	mov	ip, r0
   139ac:	movw	r0, #29040	; 0x7170
   139b0:	mov	r2, #32
   139b4:	movt	r0, #2
   139b8:	add	r3, r0, #16
   139bc:	vld1.64	{d16-d17}, [r0], r2
   139c0:	vld1.64	{d20-d21}, [r0]
   139c4:	vld1.64	{d18-d19}, [r3]
   139c8:	mov	r3, sp
   139cc:	add	r0, r3, #32
   139d0:	add	r2, r3, #16
   139d4:	vst1.64	{d20-d21}, [r0]
   139d8:	mov	r0, #28
   139dc:	vst1.64	{d18-d19}, [r2]
   139e0:	mov	r2, r3
   139e4:	and	r0, r0, r1, lsr #3
   139e8:	and	r1, r1, #31
   139ec:	vst1.64	{d16-d17}, [r2], r0
   139f0:	mov	r0, #1
   139f4:	ldr	lr, [r2, #8]
   139f8:	bic	r0, r0, lr, lsr r1
   139fc:	eor	r0, lr, r0, lsl r1
   13a00:	mov	r1, ip
   13a04:	str	r0, [r2, #8]
   13a08:	mov	r0, #0
   13a0c:	mvn	r2, #0
   13a10:	bl	13608 <__assert_fail@plt+0x257c>
   13a14:	mov	sp, fp
   13a18:	pop	{fp, pc}
   13a1c:	push	{fp, lr}
   13a20:	mov	fp, sp
   13a24:	sub	sp, sp, #48	; 0x30
   13a28:	mov	r1, r0
   13a2c:	movw	r0, #29040	; 0x7170
   13a30:	mov	r3, #32
   13a34:	movt	r0, #2
   13a38:	add	r2, r0, #16
   13a3c:	vld1.64	{d16-d17}, [r0], r3
   13a40:	mov	r3, sp
   13a44:	vld1.64	{d18-d19}, [r2]
   13a48:	vld1.64	{d20-d21}, [r0]
   13a4c:	add	r2, r3, #16
   13a50:	add	r0, r3, #32
   13a54:	vst1.64	{d18-d19}, [r2]
   13a58:	vst1.64	{d20-d21}, [r0]
   13a5c:	mov	r0, #12
   13a60:	mov	r2, r3
   13a64:	vst1.64	{d16-d17}, [r2], r0
   13a68:	ldr	r0, [r2]
   13a6c:	orr	r0, r0, #67108864	; 0x4000000
   13a70:	str	r0, [r2]
   13a74:	mov	r0, #0
   13a78:	mvn	r2, #0
   13a7c:	bl	13608 <__assert_fail@plt+0x257c>
   13a80:	mov	sp, fp
   13a84:	pop	{fp, pc}
   13a88:	push	{fp, lr}
   13a8c:	mov	fp, sp
   13a90:	sub	sp, sp, #48	; 0x30
   13a94:	mov	ip, r1
   13a98:	mov	r1, r0
   13a9c:	movw	r0, #29040	; 0x7170
   13aa0:	mov	r2, #32
   13aa4:	movt	r0, #2
   13aa8:	add	r3, r0, #16
   13aac:	vld1.64	{d16-d17}, [r0], r2
   13ab0:	vld1.64	{d18-d19}, [r3]
   13ab4:	vld1.64	{d20-d21}, [r0]
   13ab8:	mov	r3, sp
   13abc:	add	r2, r3, #16
   13ac0:	add	r0, r3, #32
   13ac4:	vst1.64	{d18-d19}, [r2]
   13ac8:	vst1.64	{d20-d21}, [r0]
   13acc:	mov	r0, #12
   13ad0:	mov	r2, r3
   13ad4:	vst1.64	{d16-d17}, [r2], r0
   13ad8:	ldr	r0, [r2]
   13adc:	orr	r0, r0, #67108864	; 0x4000000
   13ae0:	str	r0, [r2]
   13ae4:	mov	r0, #0
   13ae8:	mov	r2, ip
   13aec:	bl	13608 <__assert_fail@plt+0x257c>
   13af0:	mov	sp, fp
   13af4:	pop	{fp, pc}
   13af8:	push	{r4, sl, fp, lr}
   13afc:	add	fp, sp, #8
   13b00:	sub	sp, sp, #96	; 0x60
   13b04:	vmov.i32	q8, #0	; 0x00000000
   13b08:	mov	ip, r2
   13b0c:	mov	r2, sp
   13b10:	mov	r4, #28
   13b14:	cmp	r1, #10
   13b18:	mov	r3, r2
   13b1c:	add	lr, r2, #16
   13b20:	vst1.64	{d16-d17}, [r3], r4
   13b24:	vst1.64	{d16-d17}, [lr]
   13b28:	vst1.32	{d16-d17}, [r3]
   13b2c:	beq	13b7c <__assert_fail@plt+0x2af0>
   13b30:	vld1.64	{d16-d17}, [r2], r4
   13b34:	vld1.64	{d18-d19}, [lr]
   13b38:	add	r3, sp, #48	; 0x30
   13b3c:	vld1.32	{d20-d21}, [r2]
   13b40:	add	r2, r3, #20
   13b44:	add	r4, r3, #4
   13b48:	vst1.32	{d18-d19}, [r2]
   13b4c:	add	r2, r3, #32
   13b50:	vst1.32	{d16-d17}, [r4]
   13b54:	vst1.32	{d20-d21}, [r2]
   13b58:	str	r1, [sp, #48]	; 0x30
   13b5c:	mvn	r2, #0
   13b60:	ldr	r1, [sp, #60]	; 0x3c
   13b64:	orr	r1, r1, #67108864	; 0x4000000
   13b68:	str	r1, [sp, #60]	; 0x3c
   13b6c:	mov	r1, ip
   13b70:	bl	13608 <__assert_fail@plt+0x257c>
   13b74:	sub	sp, fp, #8
   13b78:	pop	{r4, sl, fp, pc}
   13b7c:	bl	11080 <abort@plt>
   13b80:	push	{r4, r5, r6, sl, fp, lr}
   13b84:	add	fp, sp, #16
   13b88:	sub	sp, sp, #48	; 0x30
   13b8c:	mov	ip, r3
   13b90:	movw	r3, #29040	; 0x7170
   13b94:	mov	r6, #32
   13b98:	cmp	r1, #0
   13b9c:	mov	r4, sp
   13ba0:	movt	r3, #2
   13ba4:	cmpne	r2, #0
   13ba8:	add	r5, r4, #16
   13bac:	add	lr, r3, #16
   13bb0:	vld1.64	{d16-d17}, [r3], r6
   13bb4:	vld1.64	{d18-d19}, [lr]
   13bb8:	vld1.64	{d20-d21}, [r3]
   13bbc:	mov	r3, #10
   13bc0:	vst1.64	{d16-d17}, [r4], r6
   13bc4:	vst1.64	{d18-d19}, [r5]
   13bc8:	vst1.64	{d20-d21}, [r4]
   13bcc:	str	r3, [sp]
   13bd0:	bne	13bd8 <__assert_fail@plt+0x2b4c>
   13bd4:	bl	11080 <abort@plt>
   13bd8:	str	r2, [sp, #44]	; 0x2c
   13bdc:	str	r1, [sp, #40]	; 0x28
   13be0:	mov	r3, sp
   13be4:	mov	r1, ip
   13be8:	mvn	r2, #0
   13bec:	bl	13608 <__assert_fail@plt+0x257c>
   13bf0:	sub	sp, fp, #16
   13bf4:	pop	{r4, r5, r6, sl, fp, pc}
   13bf8:	push	{r4, r5, r6, sl, fp, lr}
   13bfc:	add	fp, sp, #16
   13c00:	sub	sp, sp, #48	; 0x30
   13c04:	mov	lr, r3
   13c08:	movw	r3, #29040	; 0x7170
   13c0c:	mov	r6, #32
   13c10:	cmp	r1, #0
   13c14:	mov	r4, sp
   13c18:	movt	r3, #2
   13c1c:	cmpne	r2, #0
   13c20:	add	r5, r4, #16
   13c24:	add	ip, r3, #16
   13c28:	vld1.64	{d16-d17}, [r3], r6
   13c2c:	vld1.64	{d18-d19}, [ip]
   13c30:	vld1.64	{d20-d21}, [r3]
   13c34:	mov	r3, #10
   13c38:	vst1.64	{d16-d17}, [r4], r6
   13c3c:	vst1.64	{d18-d19}, [r5]
   13c40:	vst1.64	{d20-d21}, [r4]
   13c44:	str	r3, [sp]
   13c48:	bne	13c50 <__assert_fail@plt+0x2bc4>
   13c4c:	bl	11080 <abort@plt>
   13c50:	ldr	ip, [fp, #8]
   13c54:	str	r2, [sp, #44]	; 0x2c
   13c58:	str	r1, [sp, #40]	; 0x28
   13c5c:	mov	r3, sp
   13c60:	mov	r1, lr
   13c64:	mov	r2, ip
   13c68:	bl	13608 <__assert_fail@plt+0x257c>
   13c6c:	sub	sp, fp, #16
   13c70:	pop	{r4, r5, r6, sl, fp, pc}
   13c74:	push	{r4, sl, fp, lr}
   13c78:	add	fp, sp, #8
   13c7c:	sub	sp, sp, #48	; 0x30
   13c80:	movw	r3, #29040	; 0x7170
   13c84:	mov	lr, #32
   13c88:	mov	ip, r2
   13c8c:	cmp	r0, #0
   13c90:	movt	r3, #2
   13c94:	cmpne	r1, #0
   13c98:	add	r2, r3, #16
   13c9c:	vld1.64	{d16-d17}, [r3], lr
   13ca0:	vld1.64	{d20-d21}, [r3]
   13ca4:	vld1.64	{d18-d19}, [r2]
   13ca8:	mov	r2, sp
   13cac:	add	r4, r2, #16
   13cb0:	vst1.64	{d16-d17}, [r2], lr
   13cb4:	vst1.64	{d20-d21}, [r2]
   13cb8:	mov	r2, #10
   13cbc:	vst1.64	{d18-d19}, [r4]
   13cc0:	str	r2, [sp]
   13cc4:	bne	13ccc <__assert_fail@plt+0x2c40>
   13cc8:	bl	11080 <abort@plt>
   13ccc:	str	r1, [sp, #44]	; 0x2c
   13cd0:	str	r0, [sp, #40]	; 0x28
   13cd4:	mov	r3, sp
   13cd8:	mov	r0, #0
   13cdc:	mov	r1, ip
   13ce0:	mvn	r2, #0
   13ce4:	bl	13608 <__assert_fail@plt+0x257c>
   13ce8:	sub	sp, fp, #8
   13cec:	pop	{r4, sl, fp, pc}
   13cf0:	push	{r4, r5, fp, lr}
   13cf4:	add	fp, sp, #8
   13cf8:	sub	sp, sp, #48	; 0x30
   13cfc:	mov	ip, r3
   13d00:	movw	r3, #29040	; 0x7170
   13d04:	mov	r4, #32
   13d08:	mov	lr, r2
   13d0c:	cmp	r0, #0
   13d10:	movt	r3, #2
   13d14:	cmpne	r1, #0
   13d18:	add	r2, r3, #16
   13d1c:	vld1.64	{d16-d17}, [r3], r4
   13d20:	vld1.64	{d20-d21}, [r3]
   13d24:	vld1.64	{d18-d19}, [r2]
   13d28:	mov	r2, sp
   13d2c:	add	r5, r2, #16
   13d30:	vst1.64	{d16-d17}, [r2], r4
   13d34:	vst1.64	{d20-d21}, [r2]
   13d38:	mov	r2, #10
   13d3c:	vst1.64	{d18-d19}, [r5]
   13d40:	str	r2, [sp]
   13d44:	bne	13d4c <__assert_fail@plt+0x2cc0>
   13d48:	bl	11080 <abort@plt>
   13d4c:	str	r1, [sp, #44]	; 0x2c
   13d50:	str	r0, [sp, #40]	; 0x28
   13d54:	mov	r3, sp
   13d58:	mov	r0, #0
   13d5c:	mov	r1, lr
   13d60:	mov	r2, ip
   13d64:	bl	13608 <__assert_fail@plt+0x257c>
   13d68:	sub	sp, fp, #8
   13d6c:	pop	{r4, r5, fp, pc}
   13d70:	movw	r3, #28912	; 0x70f0
   13d74:	movt	r3, #2
   13d78:	b	13608 <__assert_fail@plt+0x257c>
   13d7c:	movw	r3, #28912	; 0x70f0
   13d80:	mov	r2, r1
   13d84:	mov	r1, r0
   13d88:	mov	r0, #0
   13d8c:	movt	r3, #2
   13d90:	b	13608 <__assert_fail@plt+0x257c>
   13d94:	movw	r3, #28912	; 0x70f0
   13d98:	mvn	r2, #0
   13d9c:	movt	r3, #2
   13da0:	b	13608 <__assert_fail@plt+0x257c>
   13da4:	movw	r3, #28912	; 0x70f0
   13da8:	mov	r1, r0
   13dac:	mov	r0, #0
   13db0:	mvn	r2, #0
   13db4:	movt	r3, #2
   13db8:	b	13608 <__assert_fail@plt+0x257c>
   13dbc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13dc0:	add	fp, sp, #24
   13dc4:	sub	sp, sp, #32
   13dc8:	ldr	r6, [fp, #12]
   13dcc:	ldr	r7, [fp, #8]
   13dd0:	mov	r4, r2
   13dd4:	mov	r8, r0
   13dd8:	cmp	r1, #0
   13ddc:	beq	13e04 <__assert_fail@plt+0x2d78>
   13de0:	movw	r2, #25244	; 0x629c
   13de4:	mov	r5, r1
   13de8:	str	r3, [sp, #4]
   13dec:	str	r4, [sp]
   13df0:	mov	r0, r8
   13df4:	mov	r1, #1
   13df8:	movt	r2, #1
   13dfc:	mov	r3, r5
   13e00:	b	13e1c <__assert_fail@plt+0x2d90>
   13e04:	movw	r2, #25256	; 0x62a8
   13e08:	str	r3, [sp]
   13e0c:	mov	r0, r8
   13e10:	mov	r1, #1
   13e14:	mov	r3, r4
   13e18:	movt	r2, #1
   13e1c:	bl	10ff0 <__fprintf_chk@plt>
   13e20:	movw	r1, #25263	; 0x62af
   13e24:	mov	r0, #0
   13e28:	mov	r2, #5
   13e2c:	movt	r1, #1
   13e30:	bl	10ec4 <dcgettext@plt>
   13e34:	movw	r2, #25981	; 0x657d
   13e38:	mov	r3, r0
   13e3c:	movw	r0, #2022	; 0x7e6
   13e40:	mov	r1, #1
   13e44:	movt	r2, #1
   13e48:	str	r0, [sp]
   13e4c:	mov	r0, r8
   13e50:	bl	10ff0 <__fprintf_chk@plt>
   13e54:	movw	r4, #24731	; 0x609b
   13e58:	mov	r1, r8
   13e5c:	movt	r4, #1
   13e60:	mov	r0, r4
   13e64:	bl	10e34 <fputs_unlocked@plt>
   13e68:	movw	r1, #25267	; 0x62b3
   13e6c:	mov	r0, #0
   13e70:	mov	r2, #5
   13e74:	movt	r1, #1
   13e78:	bl	10ec4 <dcgettext@plt>
   13e7c:	movw	r3, #25438	; 0x635e
   13e80:	mov	r2, r0
   13e84:	mov	r0, r8
   13e88:	mov	r1, #1
   13e8c:	movt	r3, #1
   13e90:	bl	10ff0 <__fprintf_chk@plt>
   13e94:	mov	r0, r4
   13e98:	mov	r1, r8
   13e9c:	bl	10e34 <fputs_unlocked@plt>
   13ea0:	cmp	r6, #9
   13ea4:	bhi	13ee0 <__assert_fail@plt+0x2e54>
   13ea8:	add	r0, pc, #0
   13eac:	ldr	pc, [r0, r6, lsl #2]
   13eb0:	ldrdeq	r3, [r1], -r8
   13eb4:	andeq	r3, r1, ip, ror #29
   13eb8:	andeq	r3, r1, ip, lsl pc
   13ebc:	andeq	r3, r1, r4, asr #30
   13ec0:	andeq	r3, r1, ip, ror #30
   13ec4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13ec8:			; <UNDEFINED> instruction: 0x00013fbc
   13ecc:	strdeq	r3, [r1], -r4
   13ed0:	muleq	r1, ip, r0
   13ed4:	andeq	r4, r1, r4, asr #32
   13ed8:	sub	sp, fp, #24
   13edc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ee0:	movw	r1, #25791	; 0x64bf
   13ee4:	movt	r1, #1
   13ee8:	b	1404c <__assert_fail@plt+0x2fc0>
   13eec:	movw	r1, #25472	; 0x6380
   13ef0:	mov	r0, #0
   13ef4:	mov	r2, #5
   13ef8:	movt	r1, #1
   13efc:	bl	10ec4 <dcgettext@plt>
   13f00:	ldr	r3, [r7]
   13f04:	mov	r2, r0
   13f08:	mov	r0, r8
   13f0c:	mov	r1, #1
   13f10:	sub	sp, fp, #24
   13f14:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f18:	b	10ff0 <__fprintf_chk@plt>
   13f1c:	movw	r1, #25488	; 0x6390
   13f20:	mov	r0, #0
   13f24:	mov	r2, #5
   13f28:	movt	r1, #1
   13f2c:	bl	10ec4 <dcgettext@plt>
   13f30:	mov	r2, r0
   13f34:	ldr	r3, [r7]
   13f38:	ldr	r0, [r7, #4]
   13f3c:	str	r0, [sp]
   13f40:	b	14030 <__assert_fail@plt+0x2fa4>
   13f44:	movw	r1, #25511	; 0x63a7
   13f48:	mov	r0, #0
   13f4c:	mov	r2, #5
   13f50:	movt	r1, #1
   13f54:	bl	10ec4 <dcgettext@plt>
   13f58:	mov	r2, r0
   13f5c:	ldr	r3, [r7]
   13f60:	ldmib	r7, {r0, r1}
   13f64:	stm	sp, {r0, r1}
   13f68:	b	14030 <__assert_fail@plt+0x2fa4>
   13f6c:	movw	r1, #25539	; 0x63c3
   13f70:	mov	r0, #0
   13f74:	mov	r2, #5
   13f78:	movt	r1, #1
   13f7c:	bl	10ec4 <dcgettext@plt>
   13f80:	ldr	r3, [r7]
   13f84:	mov	r2, r0
   13f88:	ldmib	r7, {r0, r1, r7}
   13f8c:	stm	sp, {r0, r1, r7}
   13f90:	b	14030 <__assert_fail@plt+0x2fa4>
   13f94:	movw	r1, #25571	; 0x63e3
   13f98:	mov	r0, #0
   13f9c:	mov	r2, #5
   13fa0:	movt	r1, #1
   13fa4:	bl	10ec4 <dcgettext@plt>
   13fa8:	ldr	r3, [r7]
   13fac:	mov	r2, r0
   13fb0:	ldmib	r7, {r0, r1, r6, r7}
   13fb4:	stm	sp, {r0, r1, r6, r7}
   13fb8:	b	14030 <__assert_fail@plt+0x2fa4>
   13fbc:	movw	r1, #25607	; 0x6407
   13fc0:	mov	r0, #0
   13fc4:	mov	r2, #5
   13fc8:	movt	r1, #1
   13fcc:	bl	10ec4 <dcgettext@plt>
   13fd0:	mov	r2, r0
   13fd4:	ldr	r3, [r7]
   13fd8:	ldmib	r7, {r0, r1, r6}
   13fdc:	ldr	r5, [r7, #16]
   13fe0:	ldr	r7, [r7, #20]
   13fe4:	stm	sp, {r0, r1, r6}
   13fe8:	str	r5, [sp, #12]
   13fec:	str	r7, [sp, #16]
   13ff0:	b	14030 <__assert_fail@plt+0x2fa4>
   13ff4:	movw	r1, #25647	; 0x642f
   13ff8:	mov	r0, #0
   13ffc:	mov	r2, #5
   14000:	movt	r1, #1
   14004:	bl	10ec4 <dcgettext@plt>
   14008:	mov	r2, r0
   1400c:	ldr	r3, [r7]
   14010:	ldmib	r7, {r0, r1, r6}
   14014:	ldr	r5, [r7, #16]
   14018:	ldr	r4, [r7, #20]
   1401c:	ldr	r7, [r7, #24]
   14020:	stm	sp, {r0, r1, r6}
   14024:	str	r5, [sp, #12]
   14028:	str	r4, [sp, #16]
   1402c:	str	r7, [sp, #20]
   14030:	mov	r0, r8
   14034:	mov	r1, #1
   14038:	bl	10ff0 <__fprintf_chk@plt>
   1403c:	sub	sp, fp, #24
   14040:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14044:	movw	r1, #25739	; 0x648b
   14048:	movt	r1, #1
   1404c:	mov	r0, #0
   14050:	mov	r2, #5
   14054:	bl	10ec4 <dcgettext@plt>
   14058:	mov	ip, r0
   1405c:	ldr	r3, [r7]
   14060:	ldr	r0, [r7, #4]
   14064:	ldr	r1, [r7, #8]
   14068:	ldr	r6, [r7, #12]
   1406c:	ldr	r5, [r7, #16]
   14070:	ldr	r4, [r7, #20]
   14074:	ldr	r2, [r7, #24]
   14078:	ldr	lr, [r7, #28]
   1407c:	ldr	r7, [r7, #32]
   14080:	stm	sp, {r0, r1, r6}
   14084:	str	r5, [sp, #12]
   14088:	str	r4, [sp, #16]
   1408c:	str	r2, [sp, #20]
   14090:	str	lr, [sp, #24]
   14094:	str	r7, [sp, #28]
   14098:	b	140e0 <__assert_fail@plt+0x3054>
   1409c:	movw	r1, #25691	; 0x645b
   140a0:	mov	r0, #0
   140a4:	mov	r2, #5
   140a8:	movt	r1, #1
   140ac:	bl	10ec4 <dcgettext@plt>
   140b0:	mov	ip, r0
   140b4:	ldr	r3, [r7]
   140b8:	ldmib	r7, {r0, r1, r6}
   140bc:	ldr	r5, [r7, #16]
   140c0:	ldr	r4, [r7, #20]
   140c4:	ldr	r2, [r7, #24]
   140c8:	ldr	r7, [r7, #28]
   140cc:	stm	sp, {r0, r1, r6}
   140d0:	str	r5, [sp, #12]
   140d4:	str	r4, [sp, #16]
   140d8:	str	r2, [sp, #20]
   140dc:	str	r7, [sp, #24]
   140e0:	mov	r0, r8
   140e4:	mov	r1, #1
   140e8:	mov	r2, ip
   140ec:	bl	10ff0 <__fprintf_chk@plt>
   140f0:	sub	sp, fp, #24
   140f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140f8:	push	{r4, sl, fp, lr}
   140fc:	add	fp, sp, #8
   14100:	sub	sp, sp, #8
   14104:	ldr	ip, [fp, #8]
   14108:	mov	lr, #0
   1410c:	ldr	r4, [ip, lr, lsl #2]
   14110:	add	lr, lr, #1
   14114:	cmp	r4, #0
   14118:	bne	1410c <__assert_fail@plt+0x3080>
   1411c:	sub	r4, lr, #1
   14120:	str	ip, [sp]
   14124:	str	r4, [sp, #4]
   14128:	bl	13dbc <__assert_fail@plt+0x2d30>
   1412c:	sub	sp, fp, #8
   14130:	pop	{r4, sl, fp, pc}
   14134:	push	{fp, lr}
   14138:	mov	fp, sp
   1413c:	sub	sp, sp, #48	; 0x30
   14140:	ldr	ip, [fp, #8]
   14144:	ldr	lr, [ip]
   14148:	cmp	lr, #0
   1414c:	str	lr, [sp, #8]
   14150:	beq	141ec <__assert_fail@plt+0x3160>
   14154:	ldr	lr, [ip, #4]
   14158:	cmp	lr, #0
   1415c:	str	lr, [sp, #12]
   14160:	beq	141f4 <__assert_fail@plt+0x3168>
   14164:	ldr	lr, [ip, #8]
   14168:	cmp	lr, #0
   1416c:	str	lr, [sp, #16]
   14170:	beq	141fc <__assert_fail@plt+0x3170>
   14174:	ldr	lr, [ip, #12]
   14178:	cmp	lr, #0
   1417c:	str	lr, [sp, #20]
   14180:	beq	14204 <__assert_fail@plt+0x3178>
   14184:	ldr	lr, [ip, #16]
   14188:	cmp	lr, #0
   1418c:	str	lr, [sp, #24]
   14190:	beq	1420c <__assert_fail@plt+0x3180>
   14194:	ldr	lr, [ip, #20]
   14198:	cmp	lr, #0
   1419c:	str	lr, [sp, #28]
   141a0:	beq	14214 <__assert_fail@plt+0x3188>
   141a4:	ldr	lr, [ip, #24]
   141a8:	cmp	lr, #0
   141ac:	str	lr, [sp, #32]
   141b0:	beq	1421c <__assert_fail@plt+0x3190>
   141b4:	ldr	lr, [ip, #28]
   141b8:	cmp	lr, #0
   141bc:	str	lr, [sp, #36]	; 0x24
   141c0:	beq	14224 <__assert_fail@plt+0x3198>
   141c4:	ldr	lr, [ip, #32]
   141c8:	cmp	lr, #0
   141cc:	str	lr, [sp, #40]	; 0x28
   141d0:	beq	1422c <__assert_fail@plt+0x31a0>
   141d4:	ldr	lr, [ip, #36]	; 0x24
   141d8:	mov	ip, #10
   141dc:	cmp	lr, #0
   141e0:	str	lr, [sp, #44]	; 0x2c
   141e4:	movweq	ip, #9
   141e8:	b	14230 <__assert_fail@plt+0x31a4>
   141ec:	mov	ip, #0
   141f0:	b	14230 <__assert_fail@plt+0x31a4>
   141f4:	mov	ip, #1
   141f8:	b	14230 <__assert_fail@plt+0x31a4>
   141fc:	mov	ip, #2
   14200:	b	14230 <__assert_fail@plt+0x31a4>
   14204:	mov	ip, #3
   14208:	b	14230 <__assert_fail@plt+0x31a4>
   1420c:	mov	ip, #4
   14210:	b	14230 <__assert_fail@plt+0x31a4>
   14214:	mov	ip, #5
   14218:	b	14230 <__assert_fail@plt+0x31a4>
   1421c:	mov	ip, #6
   14220:	b	14230 <__assert_fail@plt+0x31a4>
   14224:	mov	ip, #7
   14228:	b	14230 <__assert_fail@plt+0x31a4>
   1422c:	mov	ip, #8
   14230:	add	lr, sp, #8
   14234:	str	ip, [sp, #4]
   14238:	str	lr, [sp]
   1423c:	bl	13dbc <__assert_fail@plt+0x2d30>
   14240:	mov	sp, fp
   14244:	pop	{fp, pc}
   14248:	push	{fp, lr}
   1424c:	mov	fp, sp
   14250:	sub	sp, sp, #56	; 0x38
   14254:	add	ip, fp, #8
   14258:	str	ip, [sp, #12]
   1425c:	ldr	lr, [fp, #8]
   14260:	cmp	lr, #0
   14264:	str	lr, [sp, #16]
   14268:	beq	14304 <__assert_fail@plt+0x3278>
   1426c:	ldr	lr, [ip, #4]
   14270:	cmp	lr, #0
   14274:	str	lr, [sp, #20]
   14278:	beq	1430c <__assert_fail@plt+0x3280>
   1427c:	ldr	lr, [ip, #8]
   14280:	cmp	lr, #0
   14284:	str	lr, [sp, #24]
   14288:	beq	14314 <__assert_fail@plt+0x3288>
   1428c:	ldr	lr, [ip, #12]
   14290:	cmp	lr, #0
   14294:	str	lr, [sp, #28]
   14298:	beq	1431c <__assert_fail@plt+0x3290>
   1429c:	ldr	lr, [ip, #16]
   142a0:	cmp	lr, #0
   142a4:	str	lr, [sp, #32]
   142a8:	beq	14324 <__assert_fail@plt+0x3298>
   142ac:	ldr	lr, [ip, #20]
   142b0:	cmp	lr, #0
   142b4:	str	lr, [sp, #36]	; 0x24
   142b8:	beq	1432c <__assert_fail@plt+0x32a0>
   142bc:	ldr	lr, [ip, #24]
   142c0:	cmp	lr, #0
   142c4:	str	lr, [sp, #40]	; 0x28
   142c8:	beq	14334 <__assert_fail@plt+0x32a8>
   142cc:	ldr	lr, [ip, #28]
   142d0:	cmp	lr, #0
   142d4:	str	lr, [sp, #44]	; 0x2c
   142d8:	beq	1433c <__assert_fail@plt+0x32b0>
   142dc:	ldr	lr, [ip, #32]
   142e0:	cmp	lr, #0
   142e4:	str	lr, [sp, #48]	; 0x30
   142e8:	beq	14344 <__assert_fail@plt+0x32b8>
   142ec:	ldr	lr, [ip, #36]	; 0x24
   142f0:	mov	ip, #10
   142f4:	cmp	lr, #0
   142f8:	str	lr, [sp, #52]	; 0x34
   142fc:	movweq	ip, #9
   14300:	b	14348 <__assert_fail@plt+0x32bc>
   14304:	mov	ip, #0
   14308:	b	14348 <__assert_fail@plt+0x32bc>
   1430c:	mov	ip, #1
   14310:	b	14348 <__assert_fail@plt+0x32bc>
   14314:	mov	ip, #2
   14318:	b	14348 <__assert_fail@plt+0x32bc>
   1431c:	mov	ip, #3
   14320:	b	14348 <__assert_fail@plt+0x32bc>
   14324:	mov	ip, #4
   14328:	b	14348 <__assert_fail@plt+0x32bc>
   1432c:	mov	ip, #5
   14330:	b	14348 <__assert_fail@plt+0x32bc>
   14334:	mov	ip, #6
   14338:	b	14348 <__assert_fail@plt+0x32bc>
   1433c:	mov	ip, #7
   14340:	b	14348 <__assert_fail@plt+0x32bc>
   14344:	mov	ip, #8
   14348:	add	lr, sp, #16
   1434c:	str	ip, [sp, #4]
   14350:	str	lr, [sp]
   14354:	bl	13dbc <__assert_fail@plt+0x2d30>
   14358:	mov	sp, fp
   1435c:	pop	{fp, pc}
   14360:	push	{fp, lr}
   14364:	mov	fp, sp
   14368:	movw	r0, #29004	; 0x714c
   1436c:	movt	r0, #2
   14370:	ldr	r1, [r0]
   14374:	movw	r0, #24731	; 0x609b
   14378:	movt	r0, #1
   1437c:	bl	10e34 <fputs_unlocked@plt>
   14380:	movw	r1, #25851	; 0x64fb
   14384:	mov	r0, #0
   14388:	mov	r2, #5
   1438c:	movt	r1, #1
   14390:	bl	10ec4 <dcgettext@plt>
   14394:	movw	r2, #25871	; 0x650f
   14398:	mov	r1, r0
   1439c:	mov	r0, #1
   143a0:	movt	r2, #1
   143a4:	bl	10fd8 <__printf_chk@plt>
   143a8:	movw	r1, #25893	; 0x6525
   143ac:	mov	r0, #0
   143b0:	mov	r2, #5
   143b4:	movt	r1, #1
   143b8:	bl	10ec4 <dcgettext@plt>
   143bc:	movw	r2, #24261	; 0x5ec5
   143c0:	movw	r3, #24540	; 0x5fdc
   143c4:	mov	r1, r0
   143c8:	mov	r0, #1
   143cc:	movt	r2, #1
   143d0:	movt	r3, #1
   143d4:	bl	10fd8 <__printf_chk@plt>
   143d8:	movw	r1, #25913	; 0x6539
   143dc:	mov	r0, #0
   143e0:	mov	r2, #5
   143e4:	movt	r1, #1
   143e8:	bl	10ec4 <dcgettext@plt>
   143ec:	movw	r2, #25952	; 0x6560
   143f0:	mov	r1, r0
   143f4:	mov	r0, #1
   143f8:	movt	r2, #1
   143fc:	pop	{fp, lr}
   14400:	b	10fd8 <__printf_chk@plt>
   14404:	push	{r4, r5, r6, sl, fp, lr}
   14408:	add	fp, sp, #16
   1440c:	mov	r4, r2
   14410:	mov	r5, r1
   14414:	mov	r6, r0
   14418:	bl	159cc <__assert_fail@plt+0x4940>
   1441c:	cmp	r0, #0
   14420:	popne	{r4, r5, r6, sl, fp, pc}
   14424:	cmp	r6, #0
   14428:	beq	1443c <__assert_fail@plt+0x33b0>
   1442c:	cmp	r5, #0
   14430:	cmpne	r4, #0
   14434:	bne	1443c <__assert_fail@plt+0x33b0>
   14438:	pop	{r4, r5, r6, sl, fp, pc}
   1443c:	bl	149b8 <__assert_fail@plt+0x392c>
   14440:	push	{r4, r5, r6, sl, fp, lr}
   14444:	add	fp, sp, #16
   14448:	mov	r4, r2
   1444c:	mov	r5, r1
   14450:	mov	r6, r0
   14454:	bl	159cc <__assert_fail@plt+0x4940>
   14458:	cmp	r0, #0
   1445c:	popne	{r4, r5, r6, sl, fp, pc}
   14460:	cmp	r6, #0
   14464:	beq	14478 <__assert_fail@plt+0x33ec>
   14468:	cmp	r5, #0
   1446c:	cmpne	r4, #0
   14470:	bne	14478 <__assert_fail@plt+0x33ec>
   14474:	pop	{r4, r5, r6, sl, fp, pc}
   14478:	bl	149b8 <__assert_fail@plt+0x392c>
   1447c:	push	{fp, lr}
   14480:	mov	fp, sp
   14484:	bl	15800 <__assert_fail@plt+0x4774>
   14488:	cmp	r0, #0
   1448c:	popne	{fp, pc}
   14490:	bl	149b8 <__assert_fail@plt+0x392c>
   14494:	push	{fp, lr}
   14498:	mov	fp, sp
   1449c:	bl	15800 <__assert_fail@plt+0x4774>
   144a0:	cmp	r0, #0
   144a4:	popne	{fp, pc}
   144a8:	bl	149b8 <__assert_fail@plt+0x392c>
   144ac:	push	{fp, lr}
   144b0:	mov	fp, sp
   144b4:	bl	15800 <__assert_fail@plt+0x4774>
   144b8:	cmp	r0, #0
   144bc:	popne	{fp, pc}
   144c0:	bl	149b8 <__assert_fail@plt+0x392c>
   144c4:	push	{r4, r5, fp, lr}
   144c8:	add	fp, sp, #8
   144cc:	mov	r4, r1
   144d0:	mov	r5, r0
   144d4:	bl	15830 <__assert_fail@plt+0x47a4>
   144d8:	cmp	r0, #0
   144dc:	popne	{r4, r5, fp, pc}
   144e0:	cmp	r5, #0
   144e4:	beq	144f4 <__assert_fail@plt+0x3468>
   144e8:	cmp	r4, #0
   144ec:	bne	144f4 <__assert_fail@plt+0x3468>
   144f0:	pop	{r4, r5, fp, pc}
   144f4:	bl	149b8 <__assert_fail@plt+0x392c>
   144f8:	push	{fp, lr}
   144fc:	mov	fp, sp
   14500:	cmp	r1, #0
   14504:	orreq	r1, r1, #1
   14508:	bl	15830 <__assert_fail@plt+0x47a4>
   1450c:	cmp	r0, #0
   14510:	popne	{fp, pc}
   14514:	bl	149b8 <__assert_fail@plt+0x392c>
   14518:	push	{fp, lr}
   1451c:	mov	fp, sp
   14520:	clz	r3, r2
   14524:	lsr	ip, r3, #5
   14528:	clz	r3, r1
   1452c:	lsr	r3, r3, #5
   14530:	orrs	r3, r3, ip
   14534:	movwne	r1, #1
   14538:	movwne	r2, #1
   1453c:	bl	159cc <__assert_fail@plt+0x4940>
   14540:	cmp	r0, #0
   14544:	popne	{fp, pc}
   14548:	bl	149b8 <__assert_fail@plt+0x392c>
   1454c:	push	{fp, lr}
   14550:	mov	fp, sp
   14554:	mov	r2, r1
   14558:	mov	r1, r0
   1455c:	mov	r0, #0
   14560:	bl	159cc <__assert_fail@plt+0x4940>
   14564:	cmp	r0, #0
   14568:	popne	{fp, pc}
   1456c:	bl	149b8 <__assert_fail@plt+0x392c>
   14570:	push	{fp, lr}
   14574:	mov	fp, sp
   14578:	mov	r2, r1
   1457c:	mov	r1, r0
   14580:	clz	r0, r2
   14584:	clz	r3, r1
   14588:	lsr	r0, r0, #5
   1458c:	lsr	r3, r3, #5
   14590:	orrs	r0, r3, r0
   14594:	mov	r0, #0
   14598:	movwne	r1, #1
   1459c:	movwne	r2, #1
   145a0:	bl	159cc <__assert_fail@plt+0x4940>
   145a4:	cmp	r0, #0
   145a8:	popne	{fp, pc}
   145ac:	bl	149b8 <__assert_fail@plt+0x392c>
   145b0:	push	{r4, r5, r6, sl, fp, lr}
   145b4:	add	fp, sp, #16
   145b8:	ldr	r5, [r1]
   145bc:	mov	r4, r1
   145c0:	mov	r6, r0
   145c4:	cmp	r0, #0
   145c8:	beq	145e0 <__assert_fail@plt+0x3554>
   145cc:	mov	r0, #1
   145d0:	add	r0, r0, r5, lsr #1
   145d4:	adds	r5, r5, r0
   145d8:	bcc	145e8 <__assert_fail@plt+0x355c>
   145dc:	b	14624 <__assert_fail@plt+0x3598>
   145e0:	cmp	r5, #0
   145e4:	movweq	r5, #64	; 0x40
   145e8:	mov	r0, r6
   145ec:	mov	r1, r5
   145f0:	mov	r2, #1
   145f4:	bl	159cc <__assert_fail@plt+0x4940>
   145f8:	cmp	r5, #0
   145fc:	mov	r1, r5
   14600:	movwne	r1, #1
   14604:	cmp	r0, #0
   14608:	bne	1461c <__assert_fail@plt+0x3590>
   1460c:	clz	r2, r6
   14610:	lsr	r2, r2, #5
   14614:	orrs	r1, r2, r1
   14618:	bne	14624 <__assert_fail@plt+0x3598>
   1461c:	str	r5, [r4]
   14620:	pop	{r4, r5, r6, sl, fp, pc}
   14624:	bl	149b8 <__assert_fail@plt+0x392c>
   14628:	push	{r4, r5, r6, r7, fp, lr}
   1462c:	add	fp, sp, #16
   14630:	ldr	r5, [r1]
   14634:	mov	r6, r2
   14638:	mov	r4, r1
   1463c:	mov	r7, r0
   14640:	cmp	r0, #0
   14644:	beq	1465c <__assert_fail@plt+0x35d0>
   14648:	mov	r0, #1
   1464c:	add	r0, r0, r5, lsr #1
   14650:	adds	r5, r5, r0
   14654:	bcc	14674 <__assert_fail@plt+0x35e8>
   14658:	b	146a8 <__assert_fail@plt+0x361c>
   1465c:	cmp	r5, #0
   14660:	bne	14674 <__assert_fail@plt+0x35e8>
   14664:	mov	r0, #64	; 0x40
   14668:	cmp	r6, #64	; 0x40
   1466c:	udiv	r5, r0, r6
   14670:	addhi	r5, r5, #1
   14674:	mov	r0, r7
   14678:	mov	r1, r5
   1467c:	mov	r2, r6
   14680:	bl	159cc <__assert_fail@plt+0x4940>
   14684:	cmp	r0, #0
   14688:	bne	146a0 <__assert_fail@plt+0x3614>
   1468c:	cmp	r7, #0
   14690:	beq	146a8 <__assert_fail@plt+0x361c>
   14694:	cmp	r6, #0
   14698:	cmpne	r5, #0
   1469c:	bne	146a8 <__assert_fail@plt+0x361c>
   146a0:	str	r5, [r4]
   146a4:	pop	{r4, r5, r6, r7, fp, pc}
   146a8:	bl	149b8 <__assert_fail@plt+0x392c>
   146ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   146b0:	add	fp, sp, #24
   146b4:	mov	r8, r1
   146b8:	ldr	r1, [r1]
   146bc:	mov	r5, r0
   146c0:	add	r0, r1, r1, asr #1
   146c4:	cmp	r0, r1
   146c8:	mvnvs	r0, #-2147483648	; 0x80000000
   146cc:	cmp	r0, r3
   146d0:	mov	r7, r0
   146d4:	movgt	r7, r3
   146d8:	cmn	r3, #1
   146dc:	movle	r7, r0
   146e0:	ldr	r0, [fp, #8]
   146e4:	cmn	r0, #1
   146e8:	ble	14710 <__assert_fail@plt+0x3684>
   146ec:	cmp	r0, #0
   146f0:	beq	14764 <__assert_fail@plt+0x36d8>
   146f4:	cmn	r7, #1
   146f8:	ble	14738 <__assert_fail@plt+0x36ac>
   146fc:	mvn	r4, #-2147483648	; 0x80000000
   14700:	udiv	r6, r4, r0
   14704:	cmp	r6, r7
   14708:	bge	14764 <__assert_fail@plt+0x36d8>
   1470c:	b	14774 <__assert_fail@plt+0x36e8>
   14710:	cmn	r7, #1
   14714:	ble	14754 <__assert_fail@plt+0x36c8>
   14718:	cmn	r0, #1
   1471c:	beq	14764 <__assert_fail@plt+0x36d8>
   14720:	mov	r6, #-2147483648	; 0x80000000
   14724:	mvn	r4, #-2147483648	; 0x80000000
   14728:	sdiv	r6, r6, r0
   1472c:	cmp	r6, r7
   14730:	bge	14764 <__assert_fail@plt+0x36d8>
   14734:	b	14774 <__assert_fail@plt+0x36e8>
   14738:	beq	14764 <__assert_fail@plt+0x36d8>
   1473c:	mov	r6, #-2147483648	; 0x80000000
   14740:	mvn	r4, #-2147483648	; 0x80000000
   14744:	sdiv	r6, r6, r7
   14748:	cmp	r6, r0
   1474c:	bge	14764 <__assert_fail@plt+0x36d8>
   14750:	b	14774 <__assert_fail@plt+0x36e8>
   14754:	mvn	r4, #-2147483648	; 0x80000000
   14758:	sdiv	r6, r4, r0
   1475c:	cmp	r7, r6
   14760:	blt	14774 <__assert_fail@plt+0x36e8>
   14764:	mul	r6, r7, r0
   14768:	mov	r4, #64	; 0x40
   1476c:	cmp	r6, #63	; 0x3f
   14770:	bgt	1477c <__assert_fail@plt+0x36f0>
   14774:	sdiv	r7, r4, r0
   14778:	mul	r6, r7, r0
   1477c:	cmp	r5, #0
   14780:	moveq	r4, #0
   14784:	streq	r4, [r8]
   14788:	sub	r4, r7, r1
   1478c:	cmp	r4, r2
   14790:	bge	1483c <__assert_fail@plt+0x37b0>
   14794:	add	r7, r1, r2
   14798:	mov	r6, #0
   1479c:	mov	r2, #0
   147a0:	cmp	r7, r3
   147a4:	movwgt	r6, #1
   147a8:	cmn	r3, #1
   147ac:	movwgt	r2, #1
   147b0:	cmp	r7, r1
   147b4:	bvs	14870 <__assert_fail@plt+0x37e4>
   147b8:	ands	r1, r2, r6
   147bc:	bne	14870 <__assert_fail@plt+0x37e4>
   147c0:	cmn	r0, #1
   147c4:	ble	147ec <__assert_fail@plt+0x3760>
   147c8:	cmp	r0, #0
   147cc:	beq	14838 <__assert_fail@plt+0x37ac>
   147d0:	cmn	r7, #1
   147d4:	ble	14810 <__assert_fail@plt+0x3784>
   147d8:	mvn	r1, #-2147483648	; 0x80000000
   147dc:	udiv	r1, r1, r0
   147e0:	cmp	r1, r7
   147e4:	bge	14838 <__assert_fail@plt+0x37ac>
   147e8:	b	14870 <__assert_fail@plt+0x37e4>
   147ec:	cmn	r7, #1
   147f0:	ble	14828 <__assert_fail@plt+0x379c>
   147f4:	cmn	r0, #1
   147f8:	beq	14838 <__assert_fail@plt+0x37ac>
   147fc:	mov	r1, #-2147483648	; 0x80000000
   14800:	sdiv	r1, r1, r0
   14804:	cmp	r1, r7
   14808:	bge	14838 <__assert_fail@plt+0x37ac>
   1480c:	b	14870 <__assert_fail@plt+0x37e4>
   14810:	beq	14838 <__assert_fail@plt+0x37ac>
   14814:	mov	r1, #-2147483648	; 0x80000000
   14818:	sdiv	r1, r1, r7
   1481c:	cmp	r1, r0
   14820:	bge	14838 <__assert_fail@plt+0x37ac>
   14824:	b	14870 <__assert_fail@plt+0x37e4>
   14828:	mvn	r1, #-2147483648	; 0x80000000
   1482c:	sdiv	r1, r1, r0
   14830:	cmp	r7, r1
   14834:	blt	14870 <__assert_fail@plt+0x37e4>
   14838:	mul	r6, r7, r0
   1483c:	mov	r0, r5
   14840:	mov	r1, r6
   14844:	bl	15830 <__assert_fail@plt+0x47a4>
   14848:	cmp	r6, #0
   1484c:	movwne	r6, #1
   14850:	cmp	r0, #0
   14854:	bne	14868 <__assert_fail@plt+0x37dc>
   14858:	clz	r1, r5
   1485c:	lsr	r1, r1, #5
   14860:	orrs	r1, r1, r6
   14864:	bne	14870 <__assert_fail@plt+0x37e4>
   14868:	str	r7, [r8]
   1486c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14870:	bl	149b8 <__assert_fail@plt+0x392c>
   14874:	push	{fp, lr}
   14878:	mov	fp, sp
   1487c:	mov	r1, #1
   14880:	bl	157ac <__assert_fail@plt+0x4720>
   14884:	cmp	r0, #0
   14888:	popne	{fp, pc}
   1488c:	bl	149b8 <__assert_fail@plt+0x392c>
   14890:	push	{fp, lr}
   14894:	mov	fp, sp
   14898:	bl	157ac <__assert_fail@plt+0x4720>
   1489c:	cmp	r0, #0
   148a0:	popne	{fp, pc}
   148a4:	bl	149b8 <__assert_fail@plt+0x392c>
   148a8:	push	{fp, lr}
   148ac:	mov	fp, sp
   148b0:	mov	r1, #1
   148b4:	bl	157ac <__assert_fail@plt+0x4720>
   148b8:	cmp	r0, #0
   148bc:	popne	{fp, pc}
   148c0:	bl	149b8 <__assert_fail@plt+0x392c>
   148c4:	push	{fp, lr}
   148c8:	mov	fp, sp
   148cc:	bl	157ac <__assert_fail@plt+0x4720>
   148d0:	cmp	r0, #0
   148d4:	popne	{fp, pc}
   148d8:	bl	149b8 <__assert_fail@plt+0x392c>
   148dc:	push	{r4, r5, fp, lr}
   148e0:	add	fp, sp, #8
   148e4:	mov	r5, r0
   148e8:	mov	r0, r1
   148ec:	mov	r4, r1
   148f0:	bl	15800 <__assert_fail@plt+0x4774>
   148f4:	cmp	r0, #0
   148f8:	beq	1490c <__assert_fail@plt+0x3880>
   148fc:	mov	r1, r5
   14900:	mov	r2, r4
   14904:	pop	{r4, r5, fp, lr}
   14908:	b	10e94 <memcpy@plt>
   1490c:	bl	149b8 <__assert_fail@plt+0x392c>
   14910:	push	{r4, r5, fp, lr}
   14914:	add	fp, sp, #8
   14918:	mov	r5, r0
   1491c:	mov	r0, r1
   14920:	mov	r4, r1
   14924:	bl	15800 <__assert_fail@plt+0x4774>
   14928:	cmp	r0, #0
   1492c:	beq	14940 <__assert_fail@plt+0x38b4>
   14930:	mov	r1, r5
   14934:	mov	r2, r4
   14938:	pop	{r4, r5, fp, lr}
   1493c:	b	10e94 <memcpy@plt>
   14940:	bl	149b8 <__assert_fail@plt+0x392c>
   14944:	push	{r4, r5, fp, lr}
   14948:	add	fp, sp, #8
   1494c:	mov	r5, r0
   14950:	add	r0, r1, #1
   14954:	mov	r4, r1
   14958:	bl	15800 <__assert_fail@plt+0x4774>
   1495c:	cmp	r0, #0
   14960:	beq	1497c <__assert_fail@plt+0x38f0>
   14964:	mov	r1, #0
   14968:	mov	r2, r4
   1496c:	strb	r1, [r0, r4]
   14970:	mov	r1, r5
   14974:	pop	{r4, r5, fp, lr}
   14978:	b	10e94 <memcpy@plt>
   1497c:	bl	149b8 <__assert_fail@plt+0x392c>
   14980:	push	{r4, r5, fp, lr}
   14984:	add	fp, sp, #8
   14988:	mov	r4, r0
   1498c:	bl	10f9c <strlen@plt>
   14990:	add	r5, r0, #1
   14994:	mov	r0, r5
   14998:	bl	15800 <__assert_fail@plt+0x4774>
   1499c:	cmp	r0, #0
   149a0:	beq	149b4 <__assert_fail@plt+0x3928>
   149a4:	mov	r1, r4
   149a8:	mov	r2, r5
   149ac:	pop	{r4, r5, fp, lr}
   149b0:	b	10e94 <memcpy@plt>
   149b4:	bl	149b8 <__assert_fail@plt+0x392c>
   149b8:	push	{fp, lr}
   149bc:	mov	fp, sp
   149c0:	movw	r0, #28908	; 0x70ec
   149c4:	movw	r1, #26028	; 0x65ac
   149c8:	mov	r2, #5
   149cc:	movt	r0, #2
   149d0:	movt	r1, #1
   149d4:	ldr	r4, [r0]
   149d8:	mov	r0, #0
   149dc:	bl	10ec4 <dcgettext@plt>
   149e0:	movw	r2, #24991	; 0x619f
   149e4:	mov	r3, r0
   149e8:	mov	r0, r4
   149ec:	mov	r1, #0
   149f0:	movt	r2, #1
   149f4:	bl	10f30 <error@plt>
   149f8:	bl	11080 <abort@plt>
   149fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a00:	add	fp, sp, #24
   14a04:	sub	sp, sp, #16
   14a08:	mov	r8, r0
   14a0c:	ldr	r0, [fp, #16]
   14a10:	mov	r5, r3
   14a14:	mov	r6, r2
   14a18:	mov	r2, r1
   14a1c:	add	r3, sp, #8
   14a20:	mov	r1, #0
   14a24:	str	r0, [sp]
   14a28:	mov	r0, r8
   14a2c:	bl	14af8 <__assert_fail@plt+0x3a6c>
   14a30:	cmp	r0, #0
   14a34:	bne	14ac0 <__assert_fail@plt+0x3a34>
   14a38:	ldr	r4, [sp, #8]
   14a3c:	ldr	r7, [sp, #12]
   14a40:	subs	r0, r4, r6
   14a44:	sbcs	r0, r7, r5
   14a48:	bcc	14a6c <__assert_fail@plt+0x39e0>
   14a4c:	ldr	r1, [fp, #8]
   14a50:	ldr	r0, [fp, #12]
   14a54:	subs	r1, r1, r4
   14a58:	sbcs	r0, r0, r7
   14a5c:	movcs	r0, r4
   14a60:	movcs	r1, r7
   14a64:	subcs	sp, fp, #24
   14a68:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a6c:	bl	10fb4 <__errno_location@plt>
   14a70:	subs	r1, r4, #1073741824	; 0x40000000
   14a74:	sbcs	r1, r7, #0
   14a78:	movcc	r1, #34	; 0x22
   14a7c:	movcs	r1, #75	; 0x4b
   14a80:	str	r1, [r0]
   14a84:	ldr	r6, [r0]
   14a88:	ldr	r4, [fp, #24]
   14a8c:	ldr	r5, [fp, #20]
   14a90:	mov	r0, r8
   14a94:	bl	13da4 <__assert_fail@plt+0x2d18>
   14a98:	subs	r1, r6, #22
   14a9c:	movw	r2, #24987	; 0x619b
   14aa0:	str	r0, [sp]
   14aa4:	mov	r3, r5
   14aa8:	movne	r1, r6
   14aac:	cmp	r4, #0
   14ab0:	movt	r2, #1
   14ab4:	movweq	r4, #1
   14ab8:	mov	r0, r4
   14abc:	bl	10f30 <error@plt>
   14ac0:	cmp	r0, #1
   14ac4:	beq	14adc <__assert_fail@plt+0x3a50>
   14ac8:	cmp	r0, #3
   14acc:	bne	14ae8 <__assert_fail@plt+0x3a5c>
   14ad0:	bl	10fb4 <__errno_location@plt>
   14ad4:	mov	r1, #0
   14ad8:	b	14a80 <__assert_fail@plt+0x39f4>
   14adc:	bl	10fb4 <__errno_location@plt>
   14ae0:	mov	r1, #75	; 0x4b
   14ae4:	b	14a80 <__assert_fail@plt+0x39f4>
   14ae8:	bl	10fb4 <__errno_location@plt>
   14aec:	b	14a84 <__assert_fail@plt+0x39f8>
   14af0:	mov	r1, #10
   14af4:	b	149fc <__assert_fail@plt+0x3970>
   14af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14afc:	add	fp, sp, #28
   14b00:	sub	sp, sp, #44	; 0x2c
   14b04:	cmp	r2, #37	; 0x25
   14b08:	bcs	1578c <__assert_fail@plt+0x4700>
   14b0c:	ldr	sl, [fp, #8]
   14b10:	mov	r6, r2
   14b14:	mov	r7, r1
   14b18:	mov	r4, r0
   14b1c:	str	r3, [sp, #36]	; 0x24
   14b20:	bl	10fb4 <__errno_location@plt>
   14b24:	mov	r5, r0
   14b28:	mov	r0, #0
   14b2c:	str	r0, [r5]
   14b30:	bl	10f78 <__ctype_b_loc@plt>
   14b34:	ldr	r1, [r0]
   14b38:	mov	r2, r4
   14b3c:	ldrb	r0, [r2], #1
   14b40:	add	r3, r1, r0, lsl #1
   14b44:	ldrb	r3, [r3, #1]
   14b48:	tst	r3, #32
   14b4c:	bne	14b3c <__assert_fail@plt+0x3ab0>
   14b50:	cmp	r7, #0
   14b54:	sub	r9, fp, #32
   14b58:	mov	r8, #4
   14b5c:	movne	r9, r7
   14b60:	cmp	r0, #45	; 0x2d
   14b64:	beq	14f24 <__assert_fail@plt+0x3e98>
   14b68:	mov	r0, r4
   14b6c:	mov	r1, r9
   14b70:	mov	r2, r6
   14b74:	mov	r3, #0
   14b78:	bl	10ea0 <__strtoull_internal@plt>
   14b7c:	mov	r7, r1
   14b80:	ldr	r1, [r9]
   14b84:	cmp	r1, r4
   14b88:	beq	14bc0 <__assert_fail@plt+0x3b34>
   14b8c:	mov	r6, r0
   14b90:	ldr	r0, [r5]
   14b94:	cmp	r0, #0
   14b98:	beq	14edc <__assert_fail@plt+0x3e50>
   14b9c:	cmp	r0, #34	; 0x22
   14ba0:	bne	14f24 <__assert_fail@plt+0x3e98>
   14ba4:	mov	r8, #1
   14ba8:	cmp	sl, #0
   14bac:	beq	15778 <__assert_fail@plt+0x46ec>
   14bb0:	ldrb	r4, [r1]
   14bb4:	cmp	r4, #0
   14bb8:	bne	14c04 <__assert_fail@plt+0x3b78>
   14bbc:	b	15778 <__assert_fail@plt+0x46ec>
   14bc0:	cmp	sl, #0
   14bc4:	beq	14f24 <__assert_fail@plt+0x3e98>
   14bc8:	mov	r5, r1
   14bcc:	ldrb	r1, [r4]
   14bd0:	cmp	r1, #0
   14bd4:	beq	14f24 <__assert_fail@plt+0x3e98>
   14bd8:	mov	r0, sl
   14bdc:	bl	10fa8 <strchr@plt>
   14be0:	cmp	r0, #0
   14be4:	beq	14f24 <__assert_fail@plt+0x3e98>
   14be8:	mov	r1, r5
   14bec:	mov	r8, #0
   14bf0:	mov	r6, #1
   14bf4:	mov	r7, #0
   14bf8:	ldrb	r4, [r1]
   14bfc:	cmp	r4, #0
   14c00:	beq	15778 <__assert_fail@plt+0x46ec>
   14c04:	str	r1, [sp, #32]
   14c08:	mov	r0, sl
   14c0c:	mov	r1, r4
   14c10:	bl	10fa8 <strchr@plt>
   14c14:	cmp	r0, #0
   14c18:	beq	14f18 <__assert_fail@plt+0x3e8c>
   14c1c:	sub	r0, r4, #69	; 0x45
   14c20:	mov	r1, #1
   14c24:	mov	r3, #0
   14c28:	mov	r5, #1024	; 0x400
   14c2c:	cmp	r0, #47	; 0x2f
   14c30:	str	r1, [sp, #28]
   14c34:	bhi	14d38 <__assert_fail@plt+0x3cac>
   14c38:	add	r1, pc, #0
   14c3c:	ldr	pc, [r1, r0, lsl #2]
   14c40:	andeq	r4, r1, r0, lsl #26
   14c44:	andeq	r4, r1, r8, lsr sp
   14c48:	andeq	r4, r1, r0, lsl #26
   14c4c:	andeq	r4, r1, r8, lsr sp
   14c50:	andeq	r4, r1, r8, lsr sp
   14c54:	andeq	r4, r1, r8, lsr sp
   14c58:	andeq	r4, r1, r0, lsl #26
   14c5c:	andeq	r4, r1, r8, lsr sp
   14c60:	andeq	r4, r1, r0, lsl #26
   14c64:	andeq	r4, r1, r8, lsr sp
   14c68:	andeq	r4, r1, r8, lsr sp
   14c6c:	andeq	r4, r1, r0, lsl #26
   14c70:	andeq	r4, r1, r8, lsr sp
   14c74:	andeq	r4, r1, r8, lsr sp
   14c78:	andeq	r4, r1, r8, lsr sp
   14c7c:	andeq	r4, r1, r0, lsl #26
   14c80:	andeq	r4, r1, r8, lsr sp
   14c84:	andeq	r4, r1, r8, lsr sp
   14c88:	andeq	r4, r1, r8, lsr sp
   14c8c:	andeq	r4, r1, r8, lsr sp
   14c90:	andeq	r4, r1, r0, lsl #26
   14c94:	andeq	r4, r1, r0, lsl #26
   14c98:	andeq	r4, r1, r8, lsr sp
   14c9c:	andeq	r4, r1, r8, lsr sp
   14ca0:	andeq	r4, r1, r8, lsr sp
   14ca4:	andeq	r4, r1, r8, lsr sp
   14ca8:	andeq	r4, r1, r8, lsr sp
   14cac:	andeq	r4, r1, r8, lsr sp
   14cb0:	andeq	r4, r1, r8, lsr sp
   14cb4:	andeq	r4, r1, r8, lsr sp
   14cb8:	andeq	r4, r1, r8, lsr sp
   14cbc:	andeq	r4, r1, r8, lsr sp
   14cc0:	andeq	r4, r1, r8, lsr sp
   14cc4:	andeq	r4, r1, r8, lsr sp
   14cc8:	andeq	r4, r1, r0, lsl #26
   14ccc:	andeq	r4, r1, r8, lsr sp
   14cd0:	andeq	r4, r1, r8, lsr sp
   14cd4:	andeq	r4, r1, r8, lsr sp
   14cd8:	andeq	r4, r1, r0, lsl #26
   14cdc:	andeq	r4, r1, r8, lsr sp
   14ce0:	andeq	r4, r1, r0, lsl #26
   14ce4:	andeq	r4, r1, r8, lsr sp
   14ce8:	andeq	r4, r1, r8, lsr sp
   14cec:	andeq	r4, r1, r8, lsr sp
   14cf0:	andeq	r4, r1, r8, lsr sp
   14cf4:	andeq	r4, r1, r8, lsr sp
   14cf8:	andeq	r4, r1, r8, lsr sp
   14cfc:	andeq	r4, r1, r0, lsl #26
   14d00:	mov	r0, sl
   14d04:	mov	r1, #48	; 0x30
   14d08:	bl	10fa8 <strchr@plt>
   14d0c:	cmp	r0, #0
   14d10:	beq	14d34 <__assert_fail@plt+0x3ca8>
   14d14:	ldr	r1, [sp, #32]
   14d18:	ldrb	r0, [r1, #1]
   14d1c:	cmp	r0, #66	; 0x42
   14d20:	cmpne	r0, #68	; 0x44
   14d24:	bne	14eec <__assert_fail@plt+0x3e60>
   14d28:	mov	r5, #1000	; 0x3e8
   14d2c:	mov	r0, #2
   14d30:	str	r0, [sp, #28]
   14d34:	mov	r3, #0
   14d38:	sub	r0, r4, #66	; 0x42
   14d3c:	cmp	r0, #53	; 0x35
   14d40:	bhi	14f18 <__assert_fail@plt+0x3e8c>
   14d44:	add	r1, pc, #0
   14d48:	ldr	pc, [r1, r0, lsl #2]
   14d4c:	andeq	r5, r1, r8, lsl #5
   14d50:	andeq	r4, r1, r8, lsl pc
   14d54:	andeq	r4, r1, r8, lsl pc
   14d58:			; <UNDEFINED> instruction: 0x000152b0
   14d5c:	andeq	r4, r1, r8, lsl pc
   14d60:	andeq	r4, r1, r4, lsr #28
   14d64:	andeq	r4, r1, r8, lsl pc
   14d68:	andeq	r4, r1, r8, lsl pc
   14d6c:	andeq	r4, r1, r8, lsl pc
   14d70:	andeq	r4, r1, r0, lsr pc
   14d74:	andeq	r4, r1, r8, lsl pc
   14d78:	andeq	r4, r1, r8, ror pc
   14d7c:	andeq	r4, r1, r8, lsl pc
   14d80:	andeq	r4, r1, r8, lsl pc
   14d84:	andeq	r5, r1, r4, lsl #8
   14d88:	andeq	r4, r1, r8, lsl pc
   14d8c:	andeq	r4, r1, r8, lsl pc
   14d90:	andeq	r4, r1, r8, lsl pc
   14d94:	andeq	r5, r1, r4
   14d98:	andeq	r4, r1, r8, lsl pc
   14d9c:	andeq	r4, r1, r8, lsl pc
   14da0:	andeq	r4, r1, r8, lsl pc
   14da4:	andeq	r4, r1, r8, lsl pc
   14da8:	andeq	r5, r1, ip, lsr #10
   14dac:	andeq	r5, r1, ip, ror #1
   14db0:	andeq	r4, r1, r8, lsl pc
   14db4:	andeq	r4, r1, r8, lsl pc
   14db8:	andeq	r4, r1, r8, lsl pc
   14dbc:	andeq	r4, r1, r8, lsl pc
   14dc0:	andeq	r4, r1, r8, lsl pc
   14dc4:	andeq	r4, r1, r8, lsl pc
   14dc8:	andeq	r4, r1, r8, lsl pc
   14dcc:	andeq	r5, r1, r0, lsl #14
   14dd0:	andeq	r5, r1, r8, asr r7
   14dd4:	andeq	r4, r1, r8, lsl pc
   14dd8:	andeq	r4, r1, r8, lsl pc
   14ddc:	andeq	r4, r1, r8, lsl pc
   14de0:	andeq	r4, r1, r4, lsr #28
   14de4:	andeq	r4, r1, r8, lsl pc
   14de8:	andeq	r4, r1, r8, lsl pc
   14dec:	andeq	r4, r1, r8, lsl pc
   14df0:	andeq	r4, r1, r0, lsr pc
   14df4:	andeq	r4, r1, r8, lsl pc
   14df8:	andeq	r4, r1, r8, ror pc
   14dfc:	andeq	r4, r1, r8, lsl pc
   14e00:	andeq	r4, r1, r8, lsl pc
   14e04:	andeq	r4, r1, r8, lsl pc
   14e08:	andeq	r4, r1, r8, lsl pc
   14e0c:	andeq	r4, r1, r8, lsl pc
   14e10:	andeq	r4, r1, r8, lsl pc
   14e14:	andeq	r5, r1, r4
   14e18:	andeq	r4, r1, r8, lsl pc
   14e1c:	andeq	r4, r1, r8, lsl pc
   14e20:	andeq	r5, r1, r4, lsr r7
   14e24:	mvn	r0, #0
   14e28:	mvn	r1, #0
   14e2c:	mov	r2, r5
   14e30:	mov	sl, r3
   14e34:	bl	15b14 <__assert_fail@plt+0x4a88>
   14e38:	subs	r3, r0, r6
   14e3c:	umull	r4, r2, r6, r5
   14e40:	mov	lr, #0
   14e44:	str	r1, [sp, #20]
   14e48:	sbcs	r3, r1, r7
   14e4c:	movwcc	lr, #1
   14e50:	mla	ip, r6, sl, r2
   14e54:	mov	r2, r1
   14e58:	mov	r2, #0
   14e5c:	cmp	lr, #0
   14e60:	mla	r7, r7, r5, ip
   14e64:	mvnne	r4, #0
   14e68:	mvnne	r7, #0
   14e6c:	subs	r6, r0, r4
   14e70:	sbcs	r6, r1, r7
   14e74:	umull	r3, r6, r4, r5
   14e78:	movwcc	r2, #1
   14e7c:	cmp	r2, #0
   14e80:	mvnne	r3, #0
   14e84:	cmp	r2, #0
   14e88:	str	r6, [sp, #16]
   14e8c:	umull	r6, ip, r3, r5
   14e90:	mla	r1, r3, sl, ip
   14e94:	ldr	ip, [sp, #16]
   14e98:	str	r1, [sp, #12]
   14e9c:	mla	r4, r4, sl, ip
   14ea0:	mla	r4, r7, r5, r4
   14ea4:	mvnne	r4, #0
   14ea8:	subs	r0, r0, r3
   14eac:	ldr	r0, [sp, #20]
   14eb0:	ldr	r7, [sp, #12]
   14eb4:	sbcs	r0, r0, r4
   14eb8:	mov	r0, #0
   14ebc:	mla	r7, r4, r5, r7
   14ec0:	movwcc	r0, #1
   14ec4:	cmp	r0, #0
   14ec8:	mov	r1, r0
   14ecc:	orr	r0, lr, r2
   14ed0:	mvnne	r7, #0
   14ed4:	mvnne	r6, #0
   14ed8:	b	15524 <__assert_fail@plt+0x4498>
   14edc:	mov	r8, r0
   14ee0:	cmp	sl, #0
   14ee4:	bne	14bb0 <__assert_fail@plt+0x3b24>
   14ee8:	b	15778 <__assert_fail@plt+0x46ec>
   14eec:	cmp	r0, #105	; 0x69
   14ef0:	mov	r3, #0
   14ef4:	bne	14d38 <__assert_fail@plt+0x3cac>
   14ef8:	ldrb	r0, [r1, #2]
   14efc:	mov	r1, #1
   14f00:	cmp	r0, #66	; 0x42
   14f04:	movweq	r1, #3
   14f08:	str	r1, [sp, #28]
   14f0c:	sub	r0, r4, #66	; 0x42
   14f10:	cmp	r0, #53	; 0x35
   14f14:	bls	14d44 <__assert_fail@plt+0x3cb8>
   14f18:	ldr	r0, [sp, #36]	; 0x24
   14f1c:	orr	r8, r8, #2
   14f20:	strd	r6, [r0]
   14f24:	mov	r0, r8
   14f28:	sub	sp, fp, #28
   14f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f30:	mvn	r0, #0
   14f34:	mvn	r1, #0
   14f38:	mov	r2, r5
   14f3c:	mov	r4, r3
   14f40:	bl	15b14 <__assert_fail@plt+0x4a88>
   14f44:	subs	r0, r0, r6
   14f48:	mov	r2, #0
   14f4c:	sbcs	r0, r1, r7
   14f50:	umull	r0, r1, r6, r5
   14f54:	movwcc	r2, #1
   14f58:	cmp	r2, #0
   14f5c:	mla	r1, r6, r4, r1
   14f60:	mov	r3, r2
   14f64:	mvnne	r0, #0
   14f68:	mla	r7, r7, r5, r1
   14f6c:	mvnne	r7, #0
   14f70:	mov	r6, r0
   14f74:	b	15758 <__assert_fail@plt+0x46cc>
   14f78:	mvn	r0, #0
   14f7c:	mvn	r1, #0
   14f80:	mov	r2, r5
   14f84:	str	r3, [sp, #24]
   14f88:	bl	15b14 <__assert_fail@plt+0x4a88>
   14f8c:	subs	r3, r0, r6
   14f90:	mov	ip, r0
   14f94:	umull	r4, r0, r6, r5
   14f98:	mov	sl, #0
   14f9c:	sbcs	r3, r1, r7
   14fa0:	mov	r3, #0
   14fa4:	movwcc	r3, #1
   14fa8:	cmp	r3, #0
   14fac:	str	r0, [sp, #20]
   14fb0:	ldr	r0, [sp, #24]
   14fb4:	mvnne	r4, #0
   14fb8:	cmp	r3, #0
   14fbc:	umull	lr, r2, r4, r5
   14fc0:	mla	r2, r4, r0, r2
   14fc4:	str	r2, [sp, #16]
   14fc8:	ldr	r2, [sp, #20]
   14fcc:	mla	r6, r6, r0, r2
   14fd0:	ldr	r0, [sp, #16]
   14fd4:	mla	r6, r7, r5, r6
   14fd8:	mvnne	r6, #0
   14fdc:	mla	r7, r6, r5, r0
   14fe0:	subs	r0, ip, r4
   14fe4:	sbcs	r0, r1, r6
   14fe8:	movwcc	sl, #1
   14fec:	cmp	sl, #0
   14ff0:	orr	r3, r3, sl
   14ff4:	mvnne	lr, #0
   14ff8:	mvnne	r7, #0
   14ffc:	mov	r6, lr
   15000:	b	15758 <__assert_fail@plt+0x46cc>
   15004:	mvn	r0, #0
   15008:	mvn	r1, #0
   1500c:	mov	r2, r5
   15010:	mov	sl, r3
   15014:	bl	15b14 <__assert_fail@plt+0x4a88>
   15018:	subs	r3, r0, r6
   1501c:	mov	ip, r1
   15020:	umull	r2, lr, r6, r5
   15024:	str	r0, [sp, #20]
   15028:	sbcs	r3, r1, r7
   1502c:	mov	r1, #0
   15030:	str	ip, [sp, #16]
   15034:	movwcc	r1, #1
   15038:	mla	r6, r6, sl, lr
   1503c:	mov	lr, #0
   15040:	cmp	r1, #0
   15044:	mla	r7, r7, r5, r6
   15048:	mvnne	r2, #0
   1504c:	cmp	r1, #0
   15050:	umull	r3, r4, r2, r5
   15054:	mvnne	r7, #0
   15058:	mla	r4, r2, sl, r4
   1505c:	subs	r2, r0, r2
   15060:	sbcs	r2, ip, r7
   15064:	mla	r4, r7, r5, r4
   15068:	mov	r2, #0
   1506c:	movwcc	lr, #1
   15070:	cmp	lr, #0
   15074:	mvnne	r3, #0
   15078:	mvnne	r4, #0
   1507c:	subs	r7, r0, r3
   15080:	mov	r0, r5
   15084:	sbcs	r7, ip, r4
   15088:	umull	r5, r7, r3, r5
   1508c:	movwcc	r2, #1
   15090:	cmp	r2, #0
   15094:	mla	r3, r3, sl, r7
   15098:	mvnne	r5, #0
   1509c:	cmp	r2, #0
   150a0:	mla	r3, r4, r0, r3
   150a4:	umull	r6, ip, r5, r0
   150a8:	mvnne	r3, #0
   150ac:	mla	ip, r5, sl, ip
   150b0:	mla	r7, r3, r0, ip
   150b4:	ldr	r0, [sp, #20]
   150b8:	subs	r0, r0, r5
   150bc:	ldr	r0, [sp, #16]
   150c0:	sbcs	r0, r0, r3
   150c4:	mov	r0, #0
   150c8:	movwcc	r0, #1
   150cc:	cmp	r0, #0
   150d0:	mov	r3, r0
   150d4:	orr	r0, r1, lr
   150d8:	orr	r0, r0, r2
   150dc:	mvnne	r7, #0
   150e0:	mvnne	r6, #0
   150e4:	orr	r3, r0, r3
   150e8:	b	15758 <__assert_fail@plt+0x46cc>
   150ec:	mvn	r0, #0
   150f0:	mvn	r1, #0
   150f4:	mov	r2, r5
   150f8:	mov	r4, r3
   150fc:	str	r3, [sp, #24]
   15100:	bl	15b14 <__assert_fail@plt+0x4a88>
   15104:	umull	r3, r2, r6, r5
   15108:	mla	r2, r6, r4, r2
   1510c:	subs	r6, r0, r6
   15110:	sbcs	r6, r1, r7
   15114:	mov	r6, #0
   15118:	mla	r2, r7, r5, r2
   1511c:	mov	r7, #0
   15120:	movwcc	r6, #1
   15124:	cmp	r6, #0
   15128:	str	r6, [sp, #20]
   1512c:	mvnne	r3, #0
   15130:	mvnne	r2, #0
   15134:	subs	r4, r0, r3
   15138:	umull	r6, ip, r3, r5
   1513c:	sbcs	r4, r1, r2
   15140:	ldr	r4, [sp, #24]
   15144:	movwcc	r7, #1
   15148:	cmp	r7, #0
   1514c:	mov	lr, r7
   15150:	str	r7, [sp, #16]
   15154:	mvnne	r6, #0
   15158:	cmp	lr, #0
   1515c:	mov	lr, #0
   15160:	umull	sl, r7, r6, r5
   15164:	mla	r3, r3, r4, ip
   15168:	mla	r2, r2, r5, r3
   1516c:	mvnne	r2, #0
   15170:	subs	r3, r0, r6
   15174:	mla	r7, r6, r4, r7
   15178:	mov	r4, r0
   1517c:	mov	r0, #0
   15180:	mla	r7, r2, r5, r7
   15184:	sbcs	r2, r1, r2
   15188:	mov	r3, r4
   1518c:	movwcc	r0, #1
   15190:	str	r3, [sp, #4]
   15194:	cmp	r0, #0
   15198:	str	r0, [sp, #12]
   1519c:	mov	r0, r1
   151a0:	mvnne	sl, #0
   151a4:	mvnne	r7, #0
   151a8:	str	r0, [sp, #8]
   151ac:	subs	r2, r4, sl
   151b0:	ldr	r4, [sp, #24]
   151b4:	sbcs	r2, r1, r7
   151b8:	umull	r6, r2, sl, r5
   151bc:	movwcc	lr, #1
   151c0:	cmp	lr, #0
   151c4:	mvnne	r6, #0
   151c8:	mla	r2, sl, r4, r2
   151cc:	cmp	lr, #0
   151d0:	umull	r1, ip, r6, r5
   151d4:	mla	r2, r7, r5, r2
   151d8:	mvnne	r2, #0
   151dc:	mla	ip, r6, r4, ip
   151e0:	subs	r6, r3, r6
   151e4:	mla	r7, r2, r5, ip
   151e8:	sbcs	r2, r0, r2
   151ec:	mov	ip, #0
   151f0:	mov	r2, #0
   151f4:	movwcc	ip, #1
   151f8:	cmp	ip, #0
   151fc:	mvnne	r1, #0
   15200:	mvnne	r7, #0
   15204:	subs	r6, r3, r1
   15208:	ldr	r3, [sp, #24]
   1520c:	sbcs	r6, r0, r7
   15210:	umull	r0, sl, r1, r5
   15214:	movwcc	r2, #1
   15218:	cmp	r2, #0
   1521c:	mvnne	r0, #0
   15220:	mla	r1, r1, r3, sl
   15224:	cmp	r2, #0
   15228:	umull	r6, r4, r0, r5
   1522c:	mla	r1, r7, r5, r1
   15230:	mvnne	r1, #0
   15234:	mla	r4, r0, r3, r4
   15238:	ldr	r3, [sp, #4]
   1523c:	mla	r7, r1, r5, r4
   15240:	ldr	r5, [sp, #16]
   15244:	subs	r0, r3, r0
   15248:	ldr	r0, [sp, #8]
   1524c:	sbcs	r0, r0, r1
   15250:	mov	r0, #0
   15254:	movwcc	r0, #1
   15258:	cmp	r0, #0
   1525c:	mov	r1, r0
   15260:	ldr	r0, [sp, #20]
   15264:	mvnne	r7, #0
   15268:	mvnne	r6, #0
   1526c:	orr	r0, r0, r5
   15270:	ldr	r5, [sp, #12]
   15274:	orr	r0, r0, r5
   15278:	orr	r0, r0, lr
   1527c:	orr	r0, r0, ip
   15280:	orr	r0, r0, r2
   15284:	b	156f4 <__assert_fail@plt+0x4668>
   15288:	mov	r1, #0
   1528c:	lsl	r2, r7, #10
   15290:	lsl	r0, r6, #10
   15294:	lsr	r3, r7, #22
   15298:	cmp	r1, r7, lsr #22
   1529c:	orr	r2, r2, r6, lsr #22
   152a0:	mvnne	r0, #0
   152a4:	movwne	r3, #1
   152a8:	cmp	r1, r7, lsr #22
   152ac:	b	15724 <__assert_fail@plt+0x4698>
   152b0:	mvn	r0, #0
   152b4:	mvn	r1, #0
   152b8:	mov	r2, r5
   152bc:	mov	sl, r3
   152c0:	bl	15b14 <__assert_fail@plt+0x4a88>
   152c4:	subs	r2, r0, r6
   152c8:	mov	ip, r0
   152cc:	mov	r0, #0
   152d0:	sbcs	r2, r1, r7
   152d4:	umull	r4, r2, r6, r5
   152d8:	movwcc	r0, #1
   152dc:	cmp	r0, #0
   152e0:	mla	r2, r6, sl, r2
   152e4:	str	r0, [sp, #20]
   152e8:	mvnne	r4, #0
   152ec:	cmp	r0, #0
   152f0:	mla	r2, r7, r5, r2
   152f4:	mov	r0, #0
   152f8:	umull	lr, r3, r4, r5
   152fc:	mvnne	r2, #0
   15300:	mla	r3, r4, sl, r3
   15304:	mla	r6, r2, r5, r3
   15308:	subs	r3, ip, r4
   1530c:	mov	r3, r1
   15310:	sbcs	r2, r1, r2
   15314:	str	r3, [sp, #8]
   15318:	movwcc	r0, #1
   1531c:	cmp	r0, #0
   15320:	str	r0, [sp, #16]
   15324:	mov	r0, ip
   15328:	mvnne	lr, #0
   1532c:	mvnne	r6, #0
   15330:	str	r0, [sp, #12]
   15334:	subs	r2, ip, lr
   15338:	umull	r7, r4, lr, r5
   1533c:	sbcs	r2, r1, r6
   15340:	mov	r2, #0
   15344:	movwcc	r2, #1
   15348:	mla	r4, lr, sl, r4
   1534c:	cmp	r2, #0
   15350:	mla	r6, r6, r5, r4
   15354:	mov	r4, #0
   15358:	mvnne	r7, #0
   1535c:	cmp	r2, #0
   15360:	umull	r1, ip, r7, r5
   15364:	mvnne	r6, #0
   15368:	mla	ip, r7, sl, ip
   1536c:	subs	r7, r0, r7
   15370:	sbcs	r7, r3, r6
   15374:	mla	lr, r6, r5, ip
   15378:	mov	ip, #0
   1537c:	movwcc	ip, #1
   15380:	cmp	ip, #0
   15384:	mvnne	r1, #0
   15388:	mvnne	lr, #0
   1538c:	subs	r7, r0, r1
   15390:	sbcs	r7, r3, lr
   15394:	umull	r0, r7, r1, r5
   15398:	movwcc	r4, #1
   1539c:	cmp	r4, #0
   153a0:	mla	r1, r1, sl, r7
   153a4:	mvnne	r0, #0
   153a8:	cmp	r4, #0
   153ac:	mla	r1, lr, r5, r1
   153b0:	umull	r6, r3, r0, r5
   153b4:	mvnne	r1, #0
   153b8:	mla	r3, r0, sl, r3
   153bc:	mla	r7, r1, r5, r3
   153c0:	ldr	r3, [sp, #12]
   153c4:	subs	r0, r3, r0
   153c8:	ldr	r0, [sp, #8]
   153cc:	ldr	r3, [sp, #16]
   153d0:	sbcs	r0, r0, r1
   153d4:	mov	r0, #0
   153d8:	movwcc	r0, #1
   153dc:	cmp	r0, #0
   153e0:	mov	r1, r0
   153e4:	ldr	r0, [sp, #20]
   153e8:	mvnne	r7, #0
   153ec:	mvnne	r6, #0
   153f0:	orr	r0, r0, r3
   153f4:	orr	r0, r0, r2
   153f8:	orr	r0, r0, ip
   153fc:	orr	r0, r0, r4
   15400:	b	15524 <__assert_fail@plt+0x4498>
   15404:	mvn	r0, #0
   15408:	mvn	r1, #0
   1540c:	mov	r2, r5
   15410:	mov	sl, r3
   15414:	bl	15b14 <__assert_fail@plt+0x4a88>
   15418:	umull	r3, r2, r6, r5
   1541c:	mov	lr, r1
   15420:	mov	r1, r0
   15424:	mla	r2, r6, sl, r2
   15428:	subs	r6, r0, r6
   1542c:	mov	r0, #0
   15430:	sbcs	r6, lr, r7
   15434:	mla	r2, r7, r5, r2
   15438:	movwcc	r0, #1
   1543c:	cmp	r0, #0
   15440:	str	r0, [sp, #20]
   15444:	mov	r0, r1
   15448:	mvnne	r3, #0
   1544c:	mvnne	r2, #0
   15450:	str	r0, [sp, #16]
   15454:	subs	r4, r1, r3
   15458:	umull	r7, ip, r3, r5
   1545c:	sbcs	r4, lr, r2
   15460:	mov	r4, #0
   15464:	movwcc	r4, #1
   15468:	mla	r3, r3, sl, ip
   1546c:	mov	ip, #0
   15470:	cmp	r4, #0
   15474:	mla	r2, r2, r5, r3
   15478:	mvnne	r7, #0
   1547c:	cmp	r4, #0
   15480:	umull	r1, r6, r7, r5
   15484:	mvnne	r2, #0
   15488:	mla	r6, r7, sl, r6
   1548c:	mla	r3, r2, r5, r6
   15490:	subs	r6, r0, r7
   15494:	sbcs	r2, lr, r2
   15498:	mov	r2, #0
   1549c:	movwcc	ip, #1
   154a0:	cmp	ip, #0
   154a4:	mvnne	r1, #0
   154a8:	mvnne	r3, #0
   154ac:	subs	r6, r0, r1
   154b0:	sbcs	r6, lr, r3
   154b4:	umull	r0, r6, r1, r5
   154b8:	movwcc	r2, #1
   154bc:	cmp	r2, #0
   154c0:	mvnne	r0, #0
   154c4:	cmp	r2, #0
   154c8:	str	r6, [sp, #12]
   154cc:	umull	r6, r7, r0, r5
   154d0:	mla	r7, r0, sl, r7
   154d4:	str	r7, [sp, #8]
   154d8:	ldr	r7, [sp, #12]
   154dc:	mla	r1, r1, sl, r7
   154e0:	mla	r1, r3, r5, r1
   154e4:	ldr	r3, [sp, #8]
   154e8:	mvnne	r1, #0
   154ec:	mla	r7, r1, r5, r3
   154f0:	ldr	r3, [sp, #16]
   154f4:	subs	r0, r3, r0
   154f8:	sbcs	r0, lr, r1
   154fc:	mov	r0, #0
   15500:	movwcc	r0, #1
   15504:	cmp	r0, #0
   15508:	mov	r1, r0
   1550c:	ldr	r0, [sp, #20]
   15510:	mvnne	r7, #0
   15514:	mvnne	r6, #0
   15518:	orr	r0, r0, r4
   1551c:	orr	r0, r0, ip
   15520:	orr	r0, r0, r2
   15524:	orr	r3, r0, r1
   15528:	b	15758 <__assert_fail@plt+0x46cc>
   1552c:	mvn	r0, #0
   15530:	mvn	r1, #0
   15534:	mov	r2, r5
   15538:	mov	sl, r3
   1553c:	bl	15b14 <__assert_fail@plt+0x4a88>
   15540:	mov	ip, r1
   15544:	subs	r1, r0, r6
   15548:	umull	r3, lr, r6, r5
   1554c:	mov	r2, r5
   15550:	sbcs	r1, ip, r7
   15554:	mov	r1, #0
   15558:	str	ip, [sp, #4]
   1555c:	movwcc	r1, #1
   15560:	mla	r6, r6, sl, lr
   15564:	cmp	r1, #0
   15568:	mla	r7, r7, r2, r6
   1556c:	str	r1, [sp, #20]
   15570:	mvnne	r3, #0
   15574:	cmp	r1, #0
   15578:	mov	r1, r0
   1557c:	umull	r4, r5, r3, r5
   15580:	mvnne	r7, #0
   15584:	mov	lr, r1
   15588:	mla	r5, r3, sl, r5
   1558c:	subs	r3, r0, r3
   15590:	sbcs	r0, ip, r7
   15594:	mov	r0, #0
   15598:	mla	r5, r7, r2, r5
   1559c:	movwcc	r0, #1
   155a0:	cmp	r0, #0
   155a4:	str	r0, [sp, #16]
   155a8:	mvnne	r4, #0
   155ac:	mvnne	r5, #0
   155b0:	subs	r0, r1, r4
   155b4:	mov	r1, #0
   155b8:	sbcs	r0, ip, r5
   155bc:	umull	r3, r0, r4, r2
   155c0:	movwcc	r1, #1
   155c4:	cmp	r1, #0
   155c8:	mla	r0, r4, sl, r0
   155cc:	mov	r4, lr
   155d0:	str	r1, [sp, #12]
   155d4:	mvnne	r3, #0
   155d8:	cmp	r1, #0
   155dc:	mla	r0, r5, r2, r0
   155e0:	str	r4, [sp]
   155e4:	umull	r7, r6, r3, r2
   155e8:	mvnne	r0, #0
   155ec:	mla	r6, r3, sl, r6
   155f0:	subs	r3, lr, r3
   155f4:	mov	r3, #0
   155f8:	mla	r5, r0, r2, r6
   155fc:	sbcs	r0, ip, r0
   15600:	mov	r0, #0
   15604:	movwcc	r0, #1
   15608:	cmp	r0, #0
   1560c:	str	r0, [sp, #8]
   15610:	mvnne	r7, #0
   15614:	mvnne	r5, #0
   15618:	subs	r0, lr, r7
   1561c:	sbcs	r0, ip, r5
   15620:	umull	r6, r0, r7, r2
   15624:	movwcc	r3, #1
   15628:	cmp	r3, #0
   1562c:	mla	r7, r7, sl, r0
   15630:	mov	r0, ip
   15634:	mvnne	r6, #0
   15638:	cmp	r3, #0
   1563c:	mla	r7, r5, r2, r7
   15640:	mov	r5, #0
   15644:	umull	r1, lr, r6, r2
   15648:	mvnne	r7, #0
   1564c:	mla	lr, r6, sl, lr
   15650:	subs	r6, r4, r6
   15654:	mla	lr, r7, r2, lr
   15658:	sbcs	r7, ip, r7
   1565c:	mov	ip, #0
   15660:	movwcc	ip, #1
   15664:	cmp	ip, #0
   15668:	mvnne	r1, #0
   1566c:	mvnne	lr, #0
   15670:	subs	r7, r4, r1
   15674:	sbcs	r7, r0, lr
   15678:	umull	r0, r7, r1, r2
   1567c:	movwcc	r5, #1
   15680:	cmp	r5, #0
   15684:	mla	r1, r1, sl, r7
   15688:	mvnne	r0, #0
   1568c:	cmp	r5, #0
   15690:	mla	r1, lr, r2, r1
   15694:	umull	r6, r4, r0, r2
   15698:	mvnne	r1, #0
   1569c:	mla	r4, r0, sl, r4
   156a0:	mla	r7, r1, r2, r4
   156a4:	ldr	r2, [sp]
   156a8:	subs	r0, r2, r0
   156ac:	ldr	r0, [sp, #4]
   156b0:	ldr	r2, [sp, #16]
   156b4:	sbcs	r0, r0, r1
   156b8:	mov	r0, #0
   156bc:	movwcc	r0, #1
   156c0:	cmp	r0, #0
   156c4:	mov	r1, r0
   156c8:	ldr	r0, [sp, #20]
   156cc:	mvnne	r7, #0
   156d0:	mvnne	r6, #0
   156d4:	orr	r0, r0, r2
   156d8:	ldr	r2, [sp, #12]
   156dc:	orr	r0, r0, r2
   156e0:	ldr	r2, [sp, #8]
   156e4:	orr	r0, r0, r2
   156e8:	orr	r0, r0, r3
   156ec:	orr	r0, r0, ip
   156f0:	orr	r0, r0, r5
   156f4:	orr	r0, r0, r1
   156f8:	and	r3, r0, #1
   156fc:	b	15758 <__assert_fail@plt+0x46cc>
   15700:	mov	r1, #0
   15704:	lsl	r2, r7, #9
   15708:	lsl	r0, r6, #9
   1570c:	lsr	r3, r7, #23
   15710:	cmp	r1, r7, lsr #23
   15714:	orr	r2, r2, r6, lsr #23
   15718:	mvnne	r0, #0
   1571c:	movwne	r3, #1
   15720:	cmp	r1, r7, lsr #23
   15724:	mvnne	r2, #0
   15728:	mov	r6, r0
   1572c:	mov	r7, r2
   15730:	b	15758 <__assert_fail@plt+0x46cc>
   15734:	lsl	r1, r7, #1
   15738:	cmp	r7, #0
   1573c:	lsl	r0, r6, #1
   15740:	lsr	r3, r7, #31
   15744:	orr	r1, r1, r6, lsr #31
   15748:	mvnmi	r0, #0
   1574c:	mvnmi	r1, #0
   15750:	mov	r6, r0
   15754:	mov	r7, r1
   15758:	ldr	r1, [sp, #32]
   1575c:	ldr	r2, [sp, #28]
   15760:	orr	r8, r3, r8
   15764:	add	r0, r1, r2
   15768:	str	r0, [r9]
   1576c:	ldrb	r0, [r1, r2]
   15770:	cmp	r0, #0
   15774:	orrne	r8, r8, #2
   15778:	ldr	r0, [sp, #36]	; 0x24
   1577c:	strd	r6, [r0]
   15780:	mov	r0, r8
   15784:	sub	sp, fp, #28
   15788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1578c:	movw	r0, #26045	; 0x65bd
   15790:	movw	r1, #26083	; 0x65e3
   15794:	movw	r3, #26099	; 0x65f3
   15798:	mov	r2, #85	; 0x55
   1579c:	movt	r0, #1
   157a0:	movt	r1, #1
   157a4:	movt	r3, #1
   157a8:	bl	1108c <__assert_fail@plt>
   157ac:	clz	r2, r1
   157b0:	clz	r3, r0
   157b4:	lsr	r2, r2, #5
   157b8:	lsr	r3, r3, #5
   157bc:	orrs	r2, r3, r2
   157c0:	movwne	r1, #1
   157c4:	movwne	r0, #1
   157c8:	cmp	r1, #0
   157cc:	beq	157fc <__assert_fail@plt+0x4770>
   157d0:	mvn	r2, #-2147483648	; 0x80000000
   157d4:	udiv	r2, r2, r1
   157d8:	cmp	r2, r0
   157dc:	bcs	157fc <__assert_fail@plt+0x4770>
   157e0:	push	{fp, lr}
   157e4:	mov	fp, sp
   157e8:	bl	10fb4 <__errno_location@plt>
   157ec:	mov	r1, #12
   157f0:	str	r1, [r0]
   157f4:	mov	r0, #0
   157f8:	pop	{fp, pc}
   157fc:	b	10e28 <calloc@plt>
   15800:	cmp	r0, #0
   15804:	movweq	r0, #1
   15808:	cmn	r0, #1
   1580c:	ble	15814 <__assert_fail@plt+0x4788>
   15810:	b	10f3c <malloc@plt>
   15814:	push	{fp, lr}
   15818:	mov	fp, sp
   1581c:	bl	10fb4 <__errno_location@plt>
   15820:	mov	r1, #12
   15824:	str	r1, [r0]
   15828:	mov	r0, #0
   1582c:	pop	{fp, pc}
   15830:	push	{fp, lr}
   15834:	mov	fp, sp
   15838:	cmp	r0, #0
   1583c:	beq	15858 <__assert_fail@plt+0x47cc>
   15840:	cmp	r1, #0
   15844:	beq	15864 <__assert_fail@plt+0x47d8>
   15848:	cmn	r1, #1
   1584c:	ble	15870 <__assert_fail@plt+0x47e4>
   15850:	pop	{fp, lr}
   15854:	b	10ed0 <realloc@plt>
   15858:	mov	r0, r1
   1585c:	pop	{fp, lr}
   15860:	b	15800 <__assert_fail@plt+0x4774>
   15864:	bl	15908 <__assert_fail@plt+0x487c>
   15868:	mov	r0, #0
   1586c:	pop	{fp, pc}
   15870:	bl	10fb4 <__errno_location@plt>
   15874:	mov	r1, #12
   15878:	str	r1, [r0]
   1587c:	mov	r0, #0
   15880:	pop	{fp, pc}
   15884:	push	{r4, r5, r6, sl, fp, lr}
   15888:	add	fp, sp, #16
   1588c:	mov	r4, r0
   15890:	bl	10f18 <__fpending@plt>
   15894:	ldr	r6, [r4]
   15898:	mov	r5, r0
   1589c:	mov	r0, r4
   158a0:	bl	11c40 <__assert_fail@plt+0xbb4>
   158a4:	tst	r6, #32
   158a8:	bne	158e0 <__assert_fail@plt+0x4854>
   158ac:	cmp	r0, #0
   158b0:	mov	r4, r0
   158b4:	mvnne	r4, #0
   158b8:	cmp	r5, #0
   158bc:	bne	158ec <__assert_fail@plt+0x4860>
   158c0:	cmp	r0, #0
   158c4:	beq	158ec <__assert_fail@plt+0x4860>
   158c8:	bl	10fb4 <__errno_location@plt>
   158cc:	ldr	r0, [r0]
   158d0:	subs	r4, r0, #9
   158d4:	mvnne	r4, #0
   158d8:	mov	r0, r4
   158dc:	pop	{r4, r5, r6, sl, fp, pc}
   158e0:	mvn	r4, #0
   158e4:	cmp	r0, #0
   158e8:	beq	158f4 <__assert_fail@plt+0x4868>
   158ec:	mov	r0, r4
   158f0:	pop	{r4, r5, r6, sl, fp, pc}
   158f4:	bl	10fb4 <__errno_location@plt>
   158f8:	mov	r1, #0
   158fc:	str	r1, [r0]
   15900:	mov	r0, r4
   15904:	pop	{r4, r5, r6, sl, fp, pc}
   15908:	push	{r4, r5, r6, sl, fp, lr}
   1590c:	add	fp, sp, #16
   15910:	mov	r4, r0
   15914:	bl	10fb4 <__errno_location@plt>
   15918:	ldr	r6, [r0]
   1591c:	mov	r5, r0
   15920:	mov	r0, r4
   15924:	bl	10e7c <free@plt>
   15928:	str	r6, [r5]
   1592c:	pop	{r4, r5, r6, sl, fp, pc}
   15930:	push	{fp, lr}
   15934:	mov	fp, sp
   15938:	mov	r0, #14
   1593c:	bl	11044 <nl_langinfo@plt>
   15940:	movw	r1, #24732	; 0x609c
   15944:	cmp	r0, #0
   15948:	movt	r1, #1
   1594c:	movne	r1, r0
   15950:	movw	r0, #26178	; 0x6642
   15954:	ldrb	r2, [r1]
   15958:	movt	r0, #1
   1595c:	cmp	r2, #0
   15960:	movne	r0, r1
   15964:	pop	{fp, pc}
   15968:	push	{r4, r5, r6, r7, fp, lr}
   1596c:	add	fp, sp, #16
   15970:	sub	sp, sp, #8
   15974:	cmp	r0, #0
   15978:	add	r5, sp, #4
   1597c:	mov	r7, r2
   15980:	mov	r4, r1
   15984:	movne	r5, r0
   15988:	mov	r0, r5
   1598c:	bl	10f24 <mbrtowc@plt>
   15990:	mov	r6, r0
   15994:	cmp	r7, #0
   15998:	beq	159c0 <__assert_fail@plt+0x4934>
   1599c:	cmn	r6, #2
   159a0:	bcc	159c0 <__assert_fail@plt+0x4934>
   159a4:	mov	r0, #0
   159a8:	bl	15a08 <__assert_fail@plt+0x497c>
   159ac:	cmp	r0, #0
   159b0:	bne	159c0 <__assert_fail@plt+0x4934>
   159b4:	ldrb	r0, [r4]
   159b8:	mov	r6, #1
   159bc:	str	r0, [r5]
   159c0:	mov	r0, r6
   159c4:	sub	sp, fp, #16
   159c8:	pop	{r4, r5, r6, r7, fp, pc}
   159cc:	cmp	r2, #0
   159d0:	beq	15a00 <__assert_fail@plt+0x4974>
   159d4:	mvn	r3, #0
   159d8:	udiv	r3, r3, r2
   159dc:	cmp	r3, r1
   159e0:	bcs	15a00 <__assert_fail@plt+0x4974>
   159e4:	push	{fp, lr}
   159e8:	mov	fp, sp
   159ec:	bl	10fb4 <__errno_location@plt>
   159f0:	mov	r1, #12
   159f4:	str	r1, [r0]
   159f8:	mov	r0, #0
   159fc:	pop	{fp, pc}
   15a00:	mul	r1, r2, r1
   15a04:	b	15830 <__assert_fail@plt+0x47a4>
   15a08:	push	{r4, sl, fp, lr}
   15a0c:	add	fp, sp, #8
   15a10:	sub	sp, sp, #264	; 0x108
   15a14:	add	r1, sp, #7
   15a18:	movw	r2, #257	; 0x101
   15a1c:	bl	15a74 <__assert_fail@plt+0x49e8>
   15a20:	mov	r4, #0
   15a24:	cmp	r0, #0
   15a28:	bne	15a68 <__assert_fail@plt+0x49dc>
   15a2c:	movw	r1, #26184	; 0x6648
   15a30:	add	r0, sp, #7
   15a34:	mov	r2, #2
   15a38:	movt	r1, #1
   15a3c:	bl	10f90 <bcmp@plt>
   15a40:	cmp	r0, #0
   15a44:	beq	15a68 <__assert_fail@plt+0x49dc>
   15a48:	movw	r1, #26186	; 0x664a
   15a4c:	add	r0, sp, #7
   15a50:	mov	r2, #6
   15a54:	movt	r1, #1
   15a58:	bl	10f90 <bcmp@plt>
   15a5c:	cmp	r0, #0
   15a60:	mov	r4, r0
   15a64:	movwne	r4, #1
   15a68:	mov	r0, r4
   15a6c:	sub	sp, fp, #8
   15a70:	pop	{r4, sl, fp, pc}
   15a74:	push	{r4, r5, r6, r7, fp, lr}
   15a78:	add	fp, sp, #16
   15a7c:	mov	r4, r1
   15a80:	mov	r1, #0
   15a84:	mov	r6, r2
   15a88:	bl	1102c <setlocale@plt>
   15a8c:	cmp	r0, #0
   15a90:	beq	15ac0 <__assert_fail@plt+0x4a34>
   15a94:	mov	r7, r0
   15a98:	bl	10f9c <strlen@plt>
   15a9c:	cmp	r0, r6
   15aa0:	bcs	15adc <__assert_fail@plt+0x4a50>
   15aa4:	add	r2, r0, #1
   15aa8:	mov	r0, r4
   15aac:	mov	r1, r7
   15ab0:	bl	10e94 <memcpy@plt>
   15ab4:	mov	r5, #0
   15ab8:	mov	r0, r5
   15abc:	pop	{r4, r5, r6, r7, fp, pc}
   15ac0:	mov	r5, #22
   15ac4:	cmp	r6, #0
   15ac8:	beq	15b04 <__assert_fail@plt+0x4a78>
   15acc:	mov	r0, #0
   15ad0:	strb	r0, [r4]
   15ad4:	mov	r0, r5
   15ad8:	pop	{r4, r5, r6, r7, fp, pc}
   15adc:	mov	r5, #34	; 0x22
   15ae0:	cmp	r6, #0
   15ae4:	beq	15b04 <__assert_fail@plt+0x4a78>
   15ae8:	sub	r6, r6, #1
   15aec:	mov	r0, r4
   15af0:	mov	r1, r7
   15af4:	mov	r2, r6
   15af8:	bl	10e94 <memcpy@plt>
   15afc:	mov	r0, #0
   15b00:	strb	r0, [r4, r6]
   15b04:	mov	r0, r5
   15b08:	pop	{r4, r5, r6, r7, fp, pc}
   15b0c:	mov	r1, #0
   15b10:	b	1102c <setlocale@plt>
   15b14:	cmp	r3, #0
   15b18:	cmpeq	r2, #0
   15b1c:	bne	15b34 <__assert_fail@plt+0x4aa8>
   15b20:	cmp	r1, #0
   15b24:	cmpeq	r0, #0
   15b28:	mvnne	r1, #0
   15b2c:	mvnne	r0, #0
   15b30:	b	15b50 <__assert_fail@plt+0x4ac4>
   15b34:	sub	sp, sp, #8
   15b38:	push	{sp, lr}
   15b3c:	bl	15b60 <__assert_fail@plt+0x4ad4>
   15b40:	ldr	lr, [sp, #4]
   15b44:	add	sp, sp, #8
   15b48:	pop	{r2, r3}
   15b4c:	bx	lr
   15b50:	push	{r1, lr}
   15b54:	mov	r0, #8
   15b58:	bl	10e40 <raise@plt>
   15b5c:	pop	{r1, pc}
   15b60:	cmp	r1, r3
   15b64:	cmpeq	r0, r2
   15b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b6c:	mov	r4, r0
   15b70:	movcc	r0, #0
   15b74:	mov	r5, r1
   15b78:	ldr	lr, [sp, #36]	; 0x24
   15b7c:	movcc	r1, r0
   15b80:	bcc	15c7c <__assert_fail@plt+0x4bf0>
   15b84:	cmp	r3, #0
   15b88:	clzeq	ip, r2
   15b8c:	clzne	ip, r3
   15b90:	addeq	ip, ip, #32
   15b94:	cmp	r5, #0
   15b98:	clzeq	r1, r4
   15b9c:	addeq	r1, r1, #32
   15ba0:	clzne	r1, r5
   15ba4:	sub	ip, ip, r1
   15ba8:	sub	sl, ip, #32
   15bac:	lsl	r9, r3, ip
   15bb0:	rsb	fp, ip, #32
   15bb4:	orr	r9, r9, r2, lsl sl
   15bb8:	orr	r9, r9, r2, lsr fp
   15bbc:	lsl	r8, r2, ip
   15bc0:	cmp	r5, r9
   15bc4:	cmpeq	r4, r8
   15bc8:	movcc	r0, #0
   15bcc:	movcc	r1, r0
   15bd0:	bcc	15bec <__assert_fail@plt+0x4b60>
   15bd4:	mov	r0, #1
   15bd8:	subs	r4, r4, r8
   15bdc:	lsl	r1, r0, sl
   15be0:	orr	r1, r1, r0, lsr fp
   15be4:	lsl	r0, r0, ip
   15be8:	sbc	r5, r5, r9
   15bec:	cmp	ip, #0
   15bf0:	beq	15c7c <__assert_fail@plt+0x4bf0>
   15bf4:	lsr	r6, r8, #1
   15bf8:	orr	r6, r6, r9, lsl #31
   15bfc:	lsr	r7, r9, #1
   15c00:	mov	r2, ip
   15c04:	b	15c28 <__assert_fail@plt+0x4b9c>
   15c08:	subs	r3, r4, r6
   15c0c:	sbc	r8, r5, r7
   15c10:	adds	r3, r3, r3
   15c14:	adc	r8, r8, r8
   15c18:	adds	r4, r3, #1
   15c1c:	adc	r5, r8, #0
   15c20:	subs	r2, r2, #1
   15c24:	beq	15c44 <__assert_fail@plt+0x4bb8>
   15c28:	cmp	r5, r7
   15c2c:	cmpeq	r4, r6
   15c30:	bcs	15c08 <__assert_fail@plt+0x4b7c>
   15c34:	adds	r4, r4, r4
   15c38:	adc	r5, r5, r5
   15c3c:	subs	r2, r2, #1
   15c40:	bne	15c28 <__assert_fail@plt+0x4b9c>
   15c44:	lsr	r3, r4, ip
   15c48:	orr	r3, r3, r5, lsl fp
   15c4c:	lsr	r2, r5, ip
   15c50:	orr	r3, r3, r5, lsr sl
   15c54:	adds	r0, r0, r4
   15c58:	mov	r4, r3
   15c5c:	lsl	r3, r2, ip
   15c60:	orr	r3, r3, r4, lsl sl
   15c64:	lsl	ip, r4, ip
   15c68:	orr	r3, r3, r4, lsr fp
   15c6c:	adc	r1, r1, r5
   15c70:	subs	r0, r0, ip
   15c74:	mov	r5, r2
   15c78:	sbc	r1, r1, r3
   15c7c:	cmp	lr, #0
   15c80:	strdne	r4, [lr]
   15c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c8c:	mov	r7, r0
   15c90:	ldr	r6, [pc, #72]	; 15ce0 <__assert_fail@plt+0x4c54>
   15c94:	ldr	r5, [pc, #72]	; 15ce4 <__assert_fail@plt+0x4c58>
   15c98:	add	r6, pc, r6
   15c9c:	add	r5, pc, r5
   15ca0:	sub	r6, r6, r5
   15ca4:	mov	r8, r1
   15ca8:	mov	r9, r2
   15cac:	bl	10e08 <calloc@plt-0x20>
   15cb0:	asrs	r6, r6, #2
   15cb4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15cb8:	mov	r4, #0
   15cbc:	add	r4, r4, #1
   15cc0:	ldr	r3, [r5], #4
   15cc4:	mov	r2, r9
   15cc8:	mov	r1, r8
   15ccc:	mov	r0, r7
   15cd0:	blx	r3
   15cd4:	cmp	r6, r4
   15cd8:	bne	15cbc <__assert_fail@plt+0x4c30>
   15cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ce0:	andeq	r1, r1, ip, ror #4
   15ce4:	andeq	r1, r1, r4, ror #4
   15ce8:	bx	lr
   15cec:	ldr	r3, [pc, #12]	; 15d00 <__assert_fail@plt+0x4c74>
   15cf0:	mov	r1, #0
   15cf4:	add	r3, pc, r3
   15cf8:	ldr	r2, [r3]
   15cfc:	b	10fc0 <__cxa_atexit@plt>
   15d00:	andeq	r1, r1, r8, ror #7

Disassembly of section .fini:

00015d04 <.fini>:
   15d04:	push	{r3, lr}
   15d08:	pop	{r3, pc}
