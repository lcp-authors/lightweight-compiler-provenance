
../repos/coreutils/src/df:     file format elf32-littlearm


Disassembly of section .init:

000114c4 <.init>:
   114c4:	push	{r3, lr}
   114c8:	bl	1193c <__assert_fail@plt+0x50>
   114cc:	pop	{r3, pc}

Disassembly of section .plt:

000114d0 <calloc@plt-0x14>:
   114d0:	push	{lr}		; (str lr, [sp, #-4]!)
   114d4:	ldr	lr, [pc, #4]	; 114e0 <calloc@plt-0x4>
   114d8:	add	lr, pc, lr
   114dc:	ldr	pc, [lr, #8]!
   114e0:	andeq	r0, r2, r0, lsr #22

000114e4 <calloc@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #32, 20	; 0x20000
   114ec:	ldr	pc, [ip, #2848]!	; 0xb20

000114f0 <fputs_unlocked@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #32, 20	; 0x20000
   114f8:	ldr	pc, [ip, #2840]!	; 0xb18

000114fc <raise@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #32, 20	; 0x20000
   11504:	ldr	pc, [ip, #2832]!	; 0xb10

00011508 <strverscmp@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #32, 20	; 0x20000
   11510:	ldr	pc, [ip, #2824]!	; 0xb08

00011514 <__getdelim@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #32, 20	; 0x20000
   1151c:	ldr	pc, [ip, #2816]!	; 0xb00

00011520 <strcmp@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #32, 20	; 0x20000
   11528:	ldr	pc, [ip, #2808]!	; 0xaf8

0001152c <fflush@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #32, 20	; 0x20000
   11534:	ldr	pc, [ip, #2800]!	; 0xaf0

00011538 <wcwidth@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #32, 20	; 0x20000
   11540:	ldr	pc, [ip, #2792]!	; 0xae8

00011544 <memmove@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #32, 20	; 0x20000
   1154c:	ldr	pc, [ip, #2784]!	; 0xae0

00011550 <free@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #32, 20	; 0x20000
   11558:	ldr	pc, [ip, #2776]!	; 0xad8

0001155c <faccessat@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #32, 20	; 0x20000
   11564:	ldr	pc, [ip, #2768]!	; 0xad0

00011568 <_exit@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #32, 20	; 0x20000
   11570:	ldr	pc, [ip, #2760]!	; 0xac8

00011574 <memcpy@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #32, 20	; 0x20000
   1157c:	ldr	pc, [ip, #2752]!	; 0xac0

00011580 <__strtoull_internal@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #32, 20	; 0x20000
   11588:	ldr	pc, [ip, #2744]!	; 0xab8

0001158c <mbsinit@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #32, 20	; 0x20000
   11594:	ldr	pc, [ip, #2736]!	; 0xab0

00011598 <memcmp@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #32, 20	; 0x20000
   115a0:	ldr	pc, [ip, #2728]!	; 0xaa8

000115a4 <uname@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #32, 20	; 0x20000
   115ac:	ldr	pc, [ip, #2720]!	; 0xaa0

000115b0 <dcgettext@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #32, 20	; 0x20000
   115b8:	ldr	pc, [ip, #2712]!	; 0xa98

000115bc <strdup@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #32, 20	; 0x20000
   115c4:	ldr	pc, [ip, #2704]!	; 0xa90

000115c8 <realloc@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #32, 20	; 0x20000
   115d0:	ldr	pc, [ip, #2696]!	; 0xa88

000115d4 <textdomain@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #32, 20	; 0x20000
   115dc:	ldr	pc, [ip, #2688]!	; 0xa80

000115e0 <iswcntrl@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #32, 20	; 0x20000
   115e8:	ldr	pc, [ip, #2680]!	; 0xa78

000115ec <rawmemchr@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #32, 20	; 0x20000
   115f4:	ldr	pc, [ip, #2672]!	; 0xa70

000115f8 <chdir@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #32, 20	; 0x20000
   11600:	ldr	pc, [ip, #2664]!	; 0xa68

00011604 <iswprint@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #32, 20	; 0x20000
   1160c:	ldr	pc, [ip, #2656]!	; 0xa60

00011610 <__fxstat64@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #32, 20	; 0x20000
   11618:	ldr	pc, [ip, #2648]!	; 0xa58

0001161c <readlink@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #32, 20	; 0x20000
   11624:	ldr	pc, [ip, #2640]!	; 0xa50

00011628 <fwrite@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #32, 20	; 0x20000
   11630:	ldr	pc, [ip, #2632]!	; 0xa48

00011634 <lseek64@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #32, 20	; 0x20000
   1163c:	ldr	pc, [ip, #2624]!	; 0xa40

00011640 <__ctype_get_mb_cur_max@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #32, 20	; 0x20000
   11648:	ldr	pc, [ip, #2616]!	; 0xa38

0001164c <hasmntopt@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #32, 20	; 0x20000
   11654:	ldr	pc, [ip, #2608]!	; 0xa30

00011658 <__fpending@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #32, 20	; 0x20000
   11660:	ldr	pc, [ip, #2600]!	; 0xa28

00011664 <mbrtowc@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #32, 20	; 0x20000
   1166c:	ldr	pc, [ip, #2592]!	; 0xa20

00011670 <wcstombs@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #32, 20	; 0x20000
   11678:	ldr	pc, [ip, #2584]!	; 0xa18

0001167c <error@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #32, 20	; 0x20000
   11684:	ldr	pc, [ip, #2576]!	; 0xa10

00011688 <getmntent@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #32, 20	; 0x20000
   11690:	ldr	pc, [ip, #2568]!	; 0xa08

00011694 <open64@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #32, 20	; 0x20000
   1169c:	ldr	pc, [ip, #2560]!	; 0xa00

000116a0 <__asprintf_chk@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #32, 20	; 0x20000
   116a8:	ldr	pc, [ip, #2552]!	; 0x9f8

000116ac <getenv@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #32, 20	; 0x20000
   116b4:	ldr	pc, [ip, #2544]!	; 0x9f0

000116b8 <malloc@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #32, 20	; 0x20000
   116c0:	ldr	pc, [ip, #2536]!	; 0x9e8

000116c4 <__libc_start_main@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #32, 20	; 0x20000
   116cc:	ldr	pc, [ip, #2528]!	; 0x9e0

000116d0 <__freading@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #32, 20	; 0x20000
   116d8:	ldr	pc, [ip, #2520]!	; 0x9d8

000116dc <__gmon_start__@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #32, 20	; 0x20000
   116e4:	ldr	pc, [ip, #2512]!	; 0x9d0

000116e8 <getopt_long@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #32, 20	; 0x20000
   116f0:	ldr	pc, [ip, #2504]!	; 0x9c8

000116f4 <__ctype_b_loc@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #32, 20	; 0x20000
   116fc:	ldr	pc, [ip, #2496]!	; 0x9c0

00011700 <getcwd@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #32, 20	; 0x20000
   11708:	ldr	pc, [ip, #2488]!	; 0x9b8

0001170c <exit@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #32, 20	; 0x20000
   11714:	ldr	pc, [ip, #2480]!	; 0x9b0

00011718 <strlen@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #32, 20	; 0x20000
   11720:	ldr	pc, [ip, #2472]!	; 0x9a8

00011724 <strchr@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #32, 20	; 0x20000
   1172c:	ldr	pc, [ip, #2464]!	; 0x9a0

00011730 <openat64@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #32, 20	; 0x20000
   11738:	ldr	pc, [ip, #2456]!	; 0x998

0001173c <memrchr@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #32, 20	; 0x20000
   11744:	ldr	pc, [ip, #2448]!	; 0x990

00011748 <__errno_location@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #32, 20	; 0x20000
   11750:	ldr	pc, [ip, #2440]!	; 0x988

00011754 <__sprintf_chk@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #32, 20	; 0x20000
   1175c:	ldr	pc, [ip, #2432]!	; 0x980

00011760 <__cxa_atexit@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #32, 20	; 0x20000
   11768:	ldr	pc, [ip, #2424]!	; 0x978

0001176c <memset@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #32, 20	; 0x20000
   11774:	ldr	pc, [ip, #2416]!	; 0x970

00011778 <__printf_chk@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #32, 20	; 0x20000
   11780:	ldr	pc, [ip, #2408]!	; 0x968

00011784 <statvfs64@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #32, 20	; 0x20000
   1178c:	ldr	pc, [ip, #2400]!	; 0x960

00011790 <fileno@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #32, 20	; 0x20000
   11798:	ldr	pc, [ip, #2392]!	; 0x958

0001179c <__fprintf_chk@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #32, 20	; 0x20000
   117a4:	ldr	pc, [ip, #2384]!	; 0x950

000117a8 <memchr@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #32, 20	; 0x20000
   117b0:	ldr	pc, [ip, #2376]!	; 0x948

000117b4 <fclose@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #32, 20	; 0x20000
   117bc:	ldr	pc, [ip, #2368]!	; 0x940

000117c0 <fseeko64@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #32, 20	; 0x20000
   117c8:	ldr	pc, [ip, #2360]!	; 0x938

000117cc <endmntent@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #32, 20	; 0x20000
   117d4:	ldr	pc, [ip, #2352]!	; 0x930

000117d8 <fcntl64@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #32, 20	; 0x20000
   117e0:	ldr	pc, [ip, #2344]!	; 0x928

000117e4 <__overflow@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #32, 20	; 0x20000
   117ec:	ldr	pc, [ip, #2336]!	; 0x920

000117f0 <setlocale@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #32, 20	; 0x20000
   117f8:	ldr	pc, [ip, #2328]!	; 0x918

000117fc <wcswidth@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #32, 20	; 0x20000
   11804:	ldr	pc, [ip, #2320]!	; 0x910

00011808 <strrchr@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #32, 20	; 0x20000
   11810:	ldr	pc, [ip, #2312]!	; 0x908

00011814 <statfs64@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #32, 20	; 0x20000
   1181c:	ldr	pc, [ip, #2304]!	; 0x900

00011820 <nl_langinfo@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #32, 20	; 0x20000
   11828:	ldr	pc, [ip, #2296]!	; 0x8f8

0001182c <sscanf@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #32, 20	; 0x20000
   11834:	ldr	pc, [ip, #2288]!	; 0x8f0

00011838 <localeconv@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #32, 20	; 0x20000
   11840:	ldr	pc, [ip, #2280]!	; 0x8e8

00011844 <mbstowcs@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #32, 20	; 0x20000
   1184c:	ldr	pc, [ip, #2272]!	; 0x8e0

00011850 <fchdir@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #32, 20	; 0x20000
   11858:	ldr	pc, [ip, #2264]!	; 0x8d8

0001185c <canonicalize_file_name@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #32, 20	; 0x20000
   11864:	ldr	pc, [ip, #2256]!	; 0x8d0

00011868 <fopen64@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #32, 20	; 0x20000
   11870:	ldr	pc, [ip, #2248]!	; 0x8c8

00011874 <setmntent@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #32, 20	; 0x20000
   1187c:	ldr	pc, [ip, #2240]!	; 0x8c0

00011880 <bindtextdomain@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #32, 20	; 0x20000
   11888:	ldr	pc, [ip, #2232]!	; 0x8b8

0001188c <sync@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #32, 20	; 0x20000
   11894:	ldr	pc, [ip, #2224]!	; 0x8b0

00011898 <__xstat64@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #32, 20	; 0x20000
   118a0:	ldr	pc, [ip, #2216]!	; 0x8a8

000118a4 <isatty@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #32, 20	; 0x20000
   118ac:	ldr	pc, [ip, #2208]!	; 0x8a0

000118b0 <strncmp@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #32, 20	; 0x20000
   118b8:	ldr	pc, [ip, #2200]!	; 0x898

000118bc <abort@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #32, 20	; 0x20000
   118c4:	ldr	pc, [ip, #2192]!	; 0x890

000118c8 <close@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #32, 20	; 0x20000
   118d0:	ldr	pc, [ip, #2184]!	; 0x888

000118d4 <strspn@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #32, 20	; 0x20000
   118dc:	ldr	pc, [ip, #2176]!	; 0x880

000118e0 <__mempcpy_chk@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #32, 20	; 0x20000
   118e8:	ldr	pc, [ip, #2168]!	; 0x878

000118ec <__assert_fail@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #32, 20	; 0x20000
   118f4:	ldr	pc, [ip, #2160]!	; 0x870

Disassembly of section .text:

00011900 <.text>:
   11900:	mov	fp, #0
   11904:	mov	lr, #0
   11908:	pop	{r1}		; (ldr r1, [sp], #4)
   1190c:	mov	r2, sp
   11910:	push	{r2}		; (str r2, [sp, #-4]!)
   11914:	push	{r0}		; (str r0, [sp, #-4]!)
   11918:	ldr	ip, [pc, #16]	; 11930 <__assert_fail@plt+0x44>
   1191c:	push	{ip}		; (str ip, [sp, #-4]!)
   11920:	ldr	r0, [pc, #12]	; 11934 <__assert_fail@plt+0x48>
   11924:	ldr	r3, [pc, #12]	; 11938 <__assert_fail@plt+0x4c>
   11928:	bl	116c4 <__libc_start_main@plt>
   1192c:	bl	118bc <abort@plt>
   11930:	strdeq	pc, [r1], -r0
   11934:	andeq	r1, r1, ip, lsr sp
   11938:	muleq	r1, r0, r7
   1193c:	ldr	r3, [pc, #20]	; 11958 <__assert_fail@plt+0x6c>
   11940:	ldr	r2, [pc, #20]	; 1195c <__assert_fail@plt+0x70>
   11944:	add	r3, pc, r3
   11948:	ldr	r2, [r3, r2]
   1194c:	cmp	r2, #0
   11950:	bxeq	lr
   11954:	b	116dc <__gmon_start__@plt>
   11958:			; <UNDEFINED> instruction: 0x000206b4
   1195c:	andeq	r0, r0, r8, ror #2
   11960:	ldr	r0, [pc, #24]	; 11980 <__assert_fail@plt+0x94>
   11964:	ldr	r3, [pc, #24]	; 11984 <__assert_fail@plt+0x98>
   11968:	cmp	r3, r0
   1196c:	bxeq	lr
   11970:	ldr	r3, [pc, #16]	; 11988 <__assert_fail@plt+0x9c>
   11974:	cmp	r3, #0
   11978:	bxeq	lr
   1197c:	bx	r3
   11980:	andeq	r2, r3, ip, lsl r3
   11984:	andeq	r2, r3, ip, lsl r3
   11988:	andeq	r0, r0, r0
   1198c:	ldr	r0, [pc, #36]	; 119b8 <__assert_fail@plt+0xcc>
   11990:	ldr	r1, [pc, #36]	; 119bc <__assert_fail@plt+0xd0>
   11994:	sub	r1, r1, r0
   11998:	asr	r1, r1, #2
   1199c:	add	r1, r1, r1, lsr #31
   119a0:	asrs	r1, r1, #1
   119a4:	bxeq	lr
   119a8:	ldr	r3, [pc, #16]	; 119c0 <__assert_fail@plt+0xd4>
   119ac:	cmp	r3, #0
   119b0:	bxeq	lr
   119b4:	bx	r3
   119b8:	andeq	r2, r3, ip, lsl r3
   119bc:	andeq	r2, r3, ip, lsl r3
   119c0:	andeq	r0, r0, r0
   119c4:	push	{r4, lr}
   119c8:	ldr	r4, [pc, #24]	; 119e8 <__assert_fail@plt+0xfc>
   119cc:	ldrb	r3, [r4]
   119d0:	cmp	r3, #0
   119d4:	popne	{r4, pc}
   119d8:	bl	11960 <__assert_fail@plt+0x74>
   119dc:	mov	r3, #1
   119e0:	strb	r3, [r4]
   119e4:	pop	{r4, pc}
   119e8:	andeq	r2, r3, ip, lsr r3
   119ec:	b	1198c <__assert_fail@plt+0xa0>
   119f0:	push	{fp, lr}
   119f4:	mov	fp, sp
   119f8:	sub	sp, sp, #56	; 0x38
   119fc:	mov	r4, r0
   11a00:	cmp	r0, #0
   11a04:	bne	11cf8 <__assert_fail@plt+0x40c>
   11a08:	movw	r1, #63555	; 0xf843
   11a0c:	mov	r0, #0
   11a10:	mov	r2, #5
   11a14:	movt	r1, #1
   11a18:	bl	115b0 <dcgettext@plt>
   11a1c:	mov	r1, r0
   11a20:	movw	r0, #9144	; 0x23b8
   11a24:	movt	r0, #3
   11a28:	ldr	r2, [r0]
   11a2c:	mov	r0, #1
   11a30:	bl	11778 <__printf_chk@plt>
   11a34:	movw	r1, #63588	; 0xf864
   11a38:	mov	r0, #0
   11a3c:	mov	r2, #5
   11a40:	movt	r1, #1
   11a44:	bl	115b0 <dcgettext@plt>
   11a48:	movw	r7, #9012	; 0x2334
   11a4c:	movt	r7, #3
   11a50:	ldr	r1, [r7]
   11a54:	bl	114f0 <fputs_unlocked@plt>
   11a58:	movw	r1, #83	; 0x53
   11a5c:	mov	r0, #0
   11a60:	mov	r2, #5
   11a64:	movt	r1, #2
   11a68:	bl	115b0 <dcgettext@plt>
   11a6c:	ldr	r1, [r7]
   11a70:	bl	114f0 <fputs_unlocked@plt>
   11a74:	movw	r1, #63688	; 0xf8c8
   11a78:	mov	r0, #0
   11a7c:	mov	r2, #5
   11a80:	movt	r1, #1
   11a84:	bl	115b0 <dcgettext@plt>
   11a88:	ldr	r1, [r7]
   11a8c:	bl	114f0 <fputs_unlocked@plt>
   11a90:	movw	r1, #64098	; 0xfa62
   11a94:	mov	r0, #0
   11a98:	mov	r2, #5
   11a9c:	movt	r1, #1
   11aa0:	bl	115b0 <dcgettext@plt>
   11aa4:	ldr	r1, [r7]
   11aa8:	bl	114f0 <fputs_unlocked@plt>
   11aac:	movw	r1, #64353	; 0xfb61
   11ab0:	mov	r0, #0
   11ab4:	mov	r2, #5
   11ab8:	movt	r1, #1
   11abc:	bl	115b0 <dcgettext@plt>
   11ac0:	ldr	r1, [r7]
   11ac4:	bl	114f0 <fputs_unlocked@plt>
   11ac8:	movw	r1, #64619	; 0xfc6b
   11acc:	mov	r0, #0
   11ad0:	mov	r2, #5
   11ad4:	movt	r1, #1
   11ad8:	bl	115b0 <dcgettext@plt>
   11adc:	ldr	r1, [r7]
   11ae0:	bl	114f0 <fputs_unlocked@plt>
   11ae4:	movw	r1, #64748	; 0xfcec
   11ae8:	mov	r0, #0
   11aec:	mov	r2, #5
   11af0:	movt	r1, #1
   11af4:	bl	115b0 <dcgettext@plt>
   11af8:	ldr	r1, [r7]
   11afc:	bl	114f0 <fputs_unlocked@plt>
   11b00:	movw	r1, #64972	; 0xfdcc
   11b04:	mov	r0, #0
   11b08:	mov	r2, #5
   11b0c:	movt	r1, #1
   11b10:	bl	115b0 <dcgettext@plt>
   11b14:	ldr	r1, [r7]
   11b18:	bl	114f0 <fputs_unlocked@plt>
   11b1c:	movw	r1, #65017	; 0xfdf9
   11b20:	mov	r0, #0
   11b24:	mov	r2, #5
   11b28:	movt	r1, #1
   11b2c:	bl	115b0 <dcgettext@plt>
   11b30:	ldr	r1, [r7]
   11b34:	bl	114f0 <fputs_unlocked@plt>
   11b38:	movw	r1, #158	; 0x9e
   11b3c:	mov	r0, #0
   11b40:	mov	r2, #5
   11b44:	movt	r1, #2
   11b48:	bl	115b0 <dcgettext@plt>
   11b4c:	movw	r2, #65071	; 0xfe2f
   11b50:	mov	r1, r0
   11b54:	mov	r0, #1
   11b58:	movt	r2, #1
   11b5c:	bl	11778 <__printf_chk@plt>
   11b60:	movw	r1, #381	; 0x17d
   11b64:	mov	r0, #0
   11b68:	mov	r2, #5
   11b6c:	movt	r1, #2
   11b70:	bl	115b0 <dcgettext@plt>
   11b74:	ldr	r1, [r7]
   11b78:	bl	114f0 <fputs_unlocked@plt>
   11b7c:	movw	r1, #65074	; 0xfe32
   11b80:	mov	r0, #0
   11b84:	mov	r2, #5
   11b88:	movt	r1, #1
   11b8c:	bl	115b0 <dcgettext@plt>
   11b90:	ldr	r1, [r7]
   11b94:	bl	114f0 <fputs_unlocked@plt>
   11b98:	movw	r0, #2000	; 0x7d0
   11b9c:	mov	r2, #48	; 0x30
   11ba0:	mov	r6, sp
   11ba4:	movw	r5, #65294	; 0xff0e
   11ba8:	movt	r0, #2
   11bac:	movt	r5, #1
   11bb0:	add	r1, r0, #32
   11bb4:	add	r3, r0, #16
   11bb8:	vld1.64	{d18-d19}, [r0], r2
   11bbc:	vld1.64	{d16-d17}, [r1]
   11bc0:	vld1.64	{d20-d21}, [r3]
   11bc4:	add	r1, r6, #32
   11bc8:	vldr	d22, [r0]
   11bcc:	add	r0, r6, #16
   11bd0:	vst1.64	{d16-d17}, [r1]
   11bd4:	movw	r1, #593	; 0x251
   11bd8:	vst1.64	{d20-d21}, [r0]
   11bdc:	mov	r0, r6
   11be0:	vst1.64	{d18-d19}, [r0], r2
   11be4:	movt	r1, #2
   11be8:	vstr	d22, [r0]
   11bec:	mov	r0, r5
   11bf0:	bl	11520 <strcmp@plt>
   11bf4:	cmp	r0, #0
   11bf8:	ldrne	r1, [r6, #8]!
   11bfc:	cmpne	r1, #0
   11c00:	bne	11bec <__assert_fail@plt+0x300>
   11c04:	ldr	r6, [r6, #4]
   11c08:	movw	r1, #688	; 0x2b0
   11c0c:	mov	r0, #0
   11c10:	mov	r2, #5
   11c14:	movt	r1, #2
   11c18:	bl	115b0 <dcgettext@plt>
   11c1c:	movw	r2, #65399	; 0xff77
   11c20:	movw	r3, #711	; 0x2c7
   11c24:	mov	r1, r0
   11c28:	mov	r0, #1
   11c2c:	movt	r2, #1
   11c30:	movt	r3, #2
   11c34:	bl	11778 <__printf_chk@plt>
   11c38:	cmp	r6, #0
   11c3c:	mov	r0, #5
   11c40:	mov	r1, #0
   11c44:	moveq	r6, r5
   11c48:	bl	117f0 <setlocale@plt>
   11c4c:	cmp	r0, #0
   11c50:	beq	11c88 <__assert_fail@plt+0x39c>
   11c54:	movw	r1, #751	; 0x2ef
   11c58:	mov	r2, #3
   11c5c:	movt	r1, #2
   11c60:	bl	118b0 <strncmp@plt>
   11c64:	cmp	r0, #0
   11c68:	beq	11c88 <__assert_fail@plt+0x39c>
   11c6c:	movw	r1, #755	; 0x2f3
   11c70:	mov	r0, #0
   11c74:	mov	r2, #5
   11c78:	movt	r1, #2
   11c7c:	bl	115b0 <dcgettext@plt>
   11c80:	ldr	r1, [r7]
   11c84:	bl	114f0 <fputs_unlocked@plt>
   11c88:	movw	r1, #826	; 0x33a
   11c8c:	mov	r0, #0
   11c90:	mov	r2, #5
   11c94:	movt	r1, #2
   11c98:	bl	115b0 <dcgettext@plt>
   11c9c:	movw	r2, #711	; 0x2c7
   11ca0:	mov	r1, r0
   11ca4:	mov	r0, #1
   11ca8:	mov	r3, r5
   11cac:	movt	r2, #2
   11cb0:	bl	11778 <__printf_chk@plt>
   11cb4:	movw	r1, #853	; 0x355
   11cb8:	mov	r0, #0
   11cbc:	mov	r2, #5
   11cc0:	movt	r1, #2
   11cc4:	bl	115b0 <dcgettext@plt>
   11cc8:	movw	r3, #903	; 0x387
   11ccc:	mov	r1, r0
   11cd0:	movw	r0, #621	; 0x26d
   11cd4:	cmp	r6, r5
   11cd8:	mov	r2, r6
   11cdc:	movt	r0, #2
   11ce0:	movt	r3, #2
   11ce4:	moveq	r3, r0
   11ce8:	mov	r0, #1
   11cec:	bl	11778 <__printf_chk@plt>
   11cf0:	mov	r0, r4
   11cf4:	bl	1170c <exit@plt>
   11cf8:	movw	r0, #9008	; 0x2330
   11cfc:	movw	r1, #63516	; 0xf81c
   11d00:	mov	r2, #5
   11d04:	movt	r0, #3
   11d08:	movt	r1, #1
   11d0c:	ldr	r5, [r0]
   11d10:	mov	r0, #0
   11d14:	bl	115b0 <dcgettext@plt>
   11d18:	mov	r2, r0
   11d1c:	movw	r0, #9144	; 0x23b8
   11d20:	mov	r1, #1
   11d24:	movt	r0, #3
   11d28:	ldr	r3, [r0]
   11d2c:	mov	r0, r5
   11d30:	bl	1179c <__fprintf_chk@plt>
   11d34:	mov	r0, r4
   11d38:	bl	1170c <exit@plt>
   11d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d40:	add	fp, sp, #28
   11d44:	sub	sp, sp, #748	; 0x2ec
   11d48:	str	r0, [sp, #52]	; 0x34
   11d4c:	ldr	r0, [r1]
   11d50:	str	r1, [sp, #44]	; 0x2c
   11d54:	bl	199e4 <__assert_fail@plt+0x80f8>
   11d58:	movw	r1, #903	; 0x387
   11d5c:	mov	r0, #6
   11d60:	movt	r1, #2
   11d64:	str	r1, [sp, #48]	; 0x30
   11d68:	bl	117f0 <setlocale@plt>
   11d6c:	movw	r4, #65403	; 0xff7b
   11d70:	movw	r1, #65297	; 0xff11
   11d74:	movt	r4, #1
   11d78:	movt	r1, #1
   11d7c:	mov	r0, r4
   11d80:	bl	11880 <bindtextdomain@plt>
   11d84:	mov	r0, r4
   11d88:	bl	115d4 <textdomain@plt>
   11d8c:	movw	r0, #23944	; 0x5d88
   11d90:	movt	r0, #1
   11d94:	bl	1f7f4 <__assert_fail@plt+0xdf08>
   11d98:	movw	r5, #9024	; 0x2340
   11d9c:	movw	r1, #65321	; 0xff29
   11da0:	mov	r7, #0
   11da4:	mov	sl, #1
   11da8:	mvn	r4, #0
   11dac:	mov	r0, #0
   11db0:	mov	r2, #5
   11db4:	movt	r5, #3
   11db8:	movt	r1, #1
   11dbc:	str	sl, [r5, #56]	; 0x38
   11dc0:	str	r7, [r5, #60]	; 0x3c
   11dc4:	str	r7, [r5, #8]
   11dc8:	str	r7, [r5, #12]
   11dcc:	str	r4, [r5, #16]
   11dd0:	str	r7, [r5]
   11dd4:	strh	r7, [r5, #4]
   11dd8:	bl	115b0 <dcgettext@plt>
   11ddc:	movw	r8, #65362	; 0xff52
   11de0:	movw	r9, #1728	; 0x6c0
   11de4:	str	r0, [sp, #40]	; 0x28
   11de8:	add	r0, r5, #16
   11dec:	add	r6, sp, #64	; 0x40
   11df0:	str	r0, [sp, #60]	; 0x3c
   11df4:	add	r0, r5, #48	; 0x30
   11df8:	movt	r8, #1
   11dfc:	movt	r9, #2
   11e00:	mov	r5, #0
   11e04:	str	r0, [sp, #56]	; 0x38
   11e08:	b	11e44 <__assert_fail@plt+0x558>
   11e0c:	movw	r0, #9016	; 0x2338
   11e10:	movt	r0, #3
   11e14:	ldr	sl, [r0]
   11e18:	mov	r0, #8
   11e1c:	bl	1c264 <__assert_fail@plt+0xa978>
   11e20:	movw	r1, #9024	; 0x2340
   11e24:	str	sl, [r0]
   11e28:	mvn	r4, #0
   11e2c:	mov	sl, #1
   11e30:	movt	r1, #3
   11e34:	mov	r2, r1
   11e38:	ldr	r1, [r1, #8]
   11e3c:	str	r0, [r2, #8]
   11e40:	str	r1, [r0, #4]
   11e44:	ldr	r0, [sp, #52]	; 0x34
   11e48:	ldr	r1, [sp, #44]	; 0x2c
   11e4c:	mov	r2, r8
   11e50:	mov	r3, r9
   11e54:	str	r4, [sp, #64]	; 0x40
   11e58:	str	r6, [sp]
   11e5c:	bl	116e8 <getopt_long@plt>
   11e60:	add	r1, r0, #3
   11e64:	cmp	r1, #123	; 0x7b
   11e68:	bhi	12090 <__assert_fail@plt+0x7a4>
   11e6c:	movw	r2, #9024	; 0x2340
   11e70:	add	r0, pc, #4
   11e74:	movt	r2, #3
   11e78:	ldr	pc, [r0, r1, lsl #2]
   11e7c:	strdeq	r3, [r1], -r0
   11e80:	andeq	r3, r1, ip, asr #26
   11e84:	strdeq	r2, [r1], -r8
   11e88:	andeq	r3, r1, r4, ror #25
   11e8c:	andeq	r3, r1, r4, ror #25
   11e90:	andeq	r3, r1, r4, ror #25
   11e94:	andeq	r3, r1, r4, ror #25
   11e98:	andeq	r3, r1, r4, ror #25
   11e9c:	andeq	r3, r1, r4, ror #25
   11ea0:	andeq	r3, r1, r4, ror #25
   11ea4:	andeq	r3, r1, r4, ror #25
   11ea8:	andeq	r3, r1, r4, ror #25
   11eac:	andeq	r3, r1, r4, ror #25
   11eb0:	andeq	r3, r1, r4, ror #25
   11eb4:	andeq	r3, r1, r4, ror #25
   11eb8:	andeq	r3, r1, r4, ror #25
   11ebc:	andeq	r3, r1, r4, ror #25
   11ec0:	andeq	r3, r1, r4, ror #25
   11ec4:	andeq	r3, r1, r4, ror #25
   11ec8:	andeq	r3, r1, r4, ror #25
   11ecc:	andeq	r3, r1, r4, ror #25
   11ed0:	andeq	r3, r1, r4, ror #25
   11ed4:	andeq	r3, r1, r4, ror #25
   11ed8:	andeq	r3, r1, r4, ror #25
   11edc:	andeq	r3, r1, r4, ror #25
   11ee0:	andeq	r3, r1, r4, ror #25
   11ee4:	andeq	r3, r1, r4, ror #25
   11ee8:	andeq	r3, r1, r4, ror #25
   11eec:	andeq	r3, r1, r4, ror #25
   11ef0:	andeq	r3, r1, r4, ror #25
   11ef4:	andeq	r3, r1, r4, ror #25
   11ef8:	andeq	r3, r1, r4, ror #25
   11efc:	andeq	r3, r1, r4, ror #25
   11f00:	andeq	r3, r1, r4, ror #25
   11f04:	andeq	r3, r1, r4, ror #25
   11f08:	andeq	r3, r1, r4, ror #25
   11f0c:	andeq	r3, r1, r4, ror #25
   11f10:	andeq	r3, r1, r4, ror #25
   11f14:	andeq	r3, r1, r4, ror #25
   11f18:	andeq	r3, r1, r4, ror #25
   11f1c:	andeq	r3, r1, r4, ror #25
   11f20:	andeq	r3, r1, r4, ror #25
   11f24:	andeq	r3, r1, r4, ror #25
   11f28:	andeq	r3, r1, r4, ror #25
   11f2c:	andeq	r3, r1, r4, ror #25
   11f30:	andeq	r3, r1, r4, ror #25
   11f34:	andeq	r3, r1, r4, ror #25
   11f38:	andeq	r3, r1, r4, ror #25
   11f3c:	andeq	r3, r1, r4, ror #25
   11f40:	andeq	r3, r1, r4, ror #25
   11f44:	andeq	r3, r1, r4, ror #25
   11f48:	andeq	r3, r1, r4, ror #25
   11f4c:	andeq	r3, r1, r4, ror #25
   11f50:	andeq	r3, r1, r4, ror #25
   11f54:	andeq	r3, r1, r4, ror #25
   11f58:	andeq	r3, r1, r4, ror #25
   11f5c:	andeq	r3, r1, r4, ror #25
   11f60:	andeq	r3, r1, r4, ror #25
   11f64:	andeq	r3, r1, r4, ror #25
   11f68:	andeq	r3, r1, r4, ror #25
   11f6c:	andeq	r3, r1, r4, ror #25
   11f70:	andeq	r3, r1, r4, ror #25
   11f74:	andeq	r3, r1, r4, ror #25
   11f78:	andeq	r3, r1, r4, ror #25
   11f7c:	andeq	r3, r1, r4, ror #25
   11f80:	andeq	r3, r1, r4, ror #25
   11f84:	andeq	r3, r1, r4, ror #25
   11f88:	andeq	r3, r1, r4, ror #25
   11f8c:	andeq	r3, r1, r4, ror #25
   11f90:	andeq	r2, r1, ip, rrx
   11f94:	andeq	r3, r1, r4, ror #25
   11f98:	andeq	r3, r1, r4, ror #25
   11f9c:	andeq	r3, r1, r4, ror #25
   11fa0:	andeq	r1, r1, ip, lsl #28
   11fa4:	andeq	r3, r1, r4, ror #25
   11fa8:	andeq	r2, r1, r4, lsl r1
   11fac:	andeq	r3, r1, r4, ror #25
   11fb0:	andeq	r3, r1, r4, ror #25
   11fb4:	andeq	r3, r1, r4, ror #25
   11fb8:	andeq	r3, r1, r4, ror #25
   11fbc:	andeq	r3, r1, r4, ror #25
   11fc0:	andeq	r3, r1, r4, ror #25
   11fc4:	andeq	r3, r1, r4, ror #25
   11fc8:			; <UNDEFINED> instruction: 0x000121bc
   11fcc:	andeq	r3, r1, r4, ror #25
   11fd0:	andeq	r3, r1, r4, ror #25
   11fd4:	andeq	r3, r1, r4, ror #25
   11fd8:	andeq	r2, r1, ip, ror r1
   11fdc:	andeq	r3, r1, r4, ror #25
   11fe0:	andeq	r3, r1, r4, ror #25
   11fe4:	andeq	r3, r1, r4, ror #25
   11fe8:	andeq	r3, r1, r4, ror #25
   11fec:	andeq	r3, r1, r4, ror #25
   11ff0:	andeq	r3, r1, r4, ror #25
   11ff4:	andeq	r3, r1, r4, ror #25
   11ff8:	andeq	r3, r1, r4, ror #25
   11ffc:	andeq	r3, r1, r4, ror #25
   12000:	andeq	r3, r1, r4, ror #25
   12004:	andeq	r3, r1, r4, ror #25
   12008:	andeq	r3, r1, r4, ror #25
   1200c:	muleq	r1, r0, r1
   12010:	andeq	r3, r1, r4, ror #25
   12014:	andeq	r3, r1, r4, ror #25
   12018:	andeq	r3, r1, r4, ror #25
   1201c:	andeq	r3, r1, r4, ror #25
   12020:	andeq	r3, r1, r4, ror #25
   12024:	andeq	r3, r1, r4, ror #25
   12028:	ldrdeq	r2, [r1], -r0
   1202c:	andeq	r2, r1, r0, lsr #3
   12030:	andeq	r3, r1, r4, ror #25
   12034:	andeq	r2, r1, r4, asr #1
   12038:			; <UNDEFINED> instruction: 0x000121b4
   1203c:	andeq	r2, r1, r4, ror #3
   12040:	andeq	r3, r1, r4, ror #25
   12044:	andeq	r3, r1, r4, ror #25
   12048:	andeq	r3, r1, r4, ror #25
   1204c:	andeq	r3, r1, r4, ror #25
   12050:	andeq	r3, r1, r4, ror #25
   12054:	andeq	r3, r1, r4, ror #25
   12058:	andeq	r1, r1, ip, lsl #28
   1205c:	andeq	r3, r1, r4, ror #25
   12060:	andeq	r1, r1, r4, asr #28
   12064:	andeq	r3, r1, r4, ror #25
   12068:	andeq	r2, r1, ip, asr #1
   1206c:	movw	r0, #9016	; 0x2338
   12070:	ldr	r1, [sp, #60]	; 0x3c
   12074:	ldr	r2, [sp, #56]	; 0x38
   12078:	movt	r0, #3
   1207c:	ldr	r0, [r0]
   12080:	bl	17fa8 <__assert_fail@plt+0x66bc>
   12084:	cmp	r0, #0
   12088:	beq	11e44 <__assert_fail@plt+0x558>
   1208c:	b	13dc8 <__assert_fail@plt+0x24dc>
   12090:	movw	r2, #9024	; 0x2340
   12094:	sub	r0, r0, #256	; 0x100
   12098:	cmp	r0, #3
   1209c:	movt	r2, #3
   120a0:	bhi	13ce4 <__assert_fail@plt+0x23f8>
   120a4:	add	r1, pc, #0
   120a8:	ldr	pc, [r1, r0, lsl #2]
   120ac:	strheq	r2, [r1], -ip
   120b0:	muleq	r1, r8, r1
   120b4:	andeq	r2, r1, ip, lsl #2
   120b8:	andeq	r2, r1, r8, lsr #2
   120bc:	strb	r7, [r2, #7]
   120c0:	b	11e44 <__assert_fail@plt+0x558>
   120c4:	mov	r0, #1024	; 0x400
   120c8:	b	121e8 <__assert_fail@plt+0x8fc>
   120cc:	movw	r0, #9016	; 0x2338
   120d0:	mov	r7, r5
   120d4:	movt	r0, #3
   120d8:	ldr	r5, [r0]
   120dc:	mov	r0, #8
   120e0:	bl	1c264 <__assert_fail@plt+0xa978>
   120e4:	movw	r1, #9024	; 0x2340
   120e8:	str	r5, [r0]
   120ec:	mov	r5, r7
   120f0:	mov	r7, #0
   120f4:	movt	r1, #3
   120f8:	mov	r2, r1
   120fc:	ldr	r1, [r1, #12]
   12100:	str	r0, [r2, #12]
   12104:	str	r1, [r0, #4]
   12108:	b	11e44 <__assert_fail@plt+0x558>
   1210c:	strb	sl, [r2, #5]
   12110:	b	11e44 <__assert_fail@plt+0x558>
   12114:	mov	r0, #144	; 0x90
   12118:	str	sl, [r2, #48]	; 0x30
   1211c:	str	r7, [r2, #52]	; 0x34
   12120:	str	r0, [r2, #16]
   12124:	b	11e44 <__assert_fail@plt+0x558>
   12128:	ldr	r0, [r2, #20]
   1212c:	cmp	r0, #1
   12130:	beq	13d88 <__assert_fail@plt+0x249c>
   12134:	cmp	r0, #0
   12138:	mvn	r1, r5
   1213c:	movwne	r0, #1
   12140:	orr	r0, r1, r0
   12144:	tst	r0, #1
   12148:	beq	13d9c <__assert_fail@plt+0x24b0>
   1214c:	ldrb	r0, [r2, #2]
   12150:	cmp	r0, #1
   12154:	beq	13d74 <__assert_fail@plt+0x2488>
   12158:	mov	r0, #4
   1215c:	str	r0, [r2, #20]
   12160:	movw	r0, #9016	; 0x2338
   12164:	movt	r0, #3
   12168:	ldr	r0, [r0]
   1216c:	cmp	r0, #0
   12170:	beq	11e44 <__assert_fail@plt+0x558>
   12174:	bl	13e10 <__assert_fail@plt+0x2524>
   12178:	b	11e44 <__assert_fail@plt+0x558>
   1217c:	ldr	r0, [r2, #20]
   12180:	cmp	r0, #4
   12184:	beq	13d74 <__assert_fail@plt+0x2488>
   12188:	strb	sl, [r2, #2]
   1218c:	b	11e44 <__assert_fail@plt+0x558>
   12190:	strb	sl, [r2]
   12194:	b	11e44 <__assert_fail@plt+0x558>
   12198:	strb	sl, [r2, #7]
   1219c:	b	11e44 <__assert_fail@plt+0x558>
   121a0:	ldr	r0, [r2, #20]
   121a4:	cmp	r0, #4
   121a8:	beq	13d88 <__assert_fail@plt+0x249c>
   121ac:	str	sl, [r2, #20]
   121b0:	b	11e44 <__assert_fail@plt+0x558>
   121b4:	strb	sl, [r2, #6]
   121b8:	b	11e44 <__assert_fail@plt+0x558>
   121bc:	ldr	r0, [r2, #20]
   121c0:	mov	r5, #1
   121c4:	cmp	r0, #4
   121c8:	bne	11e44 <__assert_fail@plt+0x558>
   121cc:	b	13d9c <__assert_fail@plt+0x24b0>
   121d0:	mov	r0, #176	; 0xb0
   121d4:	str	sl, [r2, #48]	; 0x30
   121d8:	str	r7, [r2, #52]	; 0x34
   121dc:	str	r0, [r2, #16]
   121e0:	b	11e44 <__assert_fail@plt+0x558>
   121e4:	mov	r0, #1048576	; 0x100000
   121e8:	str	r0, [r2, #48]	; 0x30
   121ec:	str	r7, [r2, #52]	; 0x34
   121f0:	str	r7, [r2, #16]
   121f4:	b	11e44 <__assert_fail@plt+0x558>
   121f8:	ldr	r0, [r2, #16]
   121fc:	cmn	r0, #1
   12200:	beq	124c8 <__assert_fail@plt+0xbdc>
   12204:	ldr	r0, [r2, #20]
   12208:	cmp	r0, #1
   1220c:	cmpne	r0, #4
   12210:	bne	12514 <__assert_fail@plt+0xc28>
   12214:	ldr	r6, [r2, #8]
   12218:	cmp	r6, #0
   1221c:	beq	122b4 <__assert_fail@plt+0x9c8>
   12220:	movw	r8, #65489	; 0xffd1
   12224:	mov	r7, #0
   12228:	movt	r8, #1
   1222c:	ldr	r4, [r2, #12]
   12230:	cmp	r4, #0
   12234:	beq	1229c <__assert_fail@plt+0x9b0>
   12238:	ldr	r5, [r6]
   1223c:	ldr	r1, [r4]
   12240:	mov	r0, r5
   12244:	bl	11520 <strcmp@plt>
   12248:	cmp	r0, #0
   1224c:	beq	12260 <__assert_fail@plt+0x974>
   12250:	ldr	r4, [r4, #4]
   12254:	cmp	r4, #0
   12258:	bne	1223c <__assert_fail@plt+0x950>
   1225c:	b	12294 <__assert_fail@plt+0x9a8>
   12260:	mov	r0, #0
   12264:	mov	r1, r8
   12268:	mov	r2, #5
   1226c:	bl	115b0 <dcgettext@plt>
   12270:	mov	r5, r0
   12274:	ldr	r0, [r6]
   12278:	bl	1b960 <__assert_fail@plt+0xa074>
   1227c:	mov	r3, r0
   12280:	mov	r0, #0
   12284:	mov	r1, #0
   12288:	mov	r2, r5
   1228c:	bl	1167c <error@plt>
   12290:	mov	r7, #1
   12294:	movw	r2, #9024	; 0x2340
   12298:	movt	r2, #3
   1229c:	ldr	r6, [r6, #4]
   122a0:	cmp	r6, #0
   122a4:	bne	1222c <__assert_fail@plt+0x940>
   122a8:	mov	r0, #1
   122ac:	tst	r7, #1
   122b0:	bne	13cdc <__assert_fail@plt+0x23f0>
   122b4:	movw	r0, #9000	; 0x2328
   122b8:	mov	r1, #0
   122bc:	movt	r0, #3
   122c0:	str	r1, [sp, #24]
   122c4:	ldr	r1, [sp, #52]	; 0x34
   122c8:	ldr	r0, [r0]
   122cc:	cmp	r0, r1
   122d0:	bge	12434 <__assert_fail@plt+0xb48>
   122d4:	ldr	r5, [sp, #52]	; 0x34
   122d8:	mov	r1, #104	; 0x68
   122dc:	mov	r4, #104	; 0x68
   122e0:	sub	r0, r5, r0
   122e4:	bl	1c334 <__assert_fail@plt+0xaa48>
   122e8:	str	r0, [sp, #24]
   122ec:	movw	r0, #9000	; 0x2328
   122f0:	movw	r2, #9024	; 0x2340
   122f4:	movt	r0, #3
   122f8:	movt	r2, #3
   122fc:	ldr	r8, [r0]
   12300:	cmp	r8, r5
   12304:	bge	12434 <__assert_fail@plt+0xb48>
   12308:	ldr	r0, [sp, #24]
   1230c:	mla	r9, r8, r4, r0
   12310:	ldr	r0, [sp, #44]	; 0x2c
   12314:	add	r4, r0, r8, lsl #2
   12318:	ldr	r0, [sp, #52]	; 0x34
   1231c:	sub	r0, r0, #1
   12320:	sub	sl, r0, r8
   12324:	b	12340 <__assert_fail@plt+0xa54>
   12328:	movw	r0, #9000	; 0x2328
   1232c:	sub	sl, sl, #1
   12330:	add	r9, r9, #104	; 0x68
   12334:	add	r4, r4, #4
   12338:	movt	r0, #3
   1233c:	ldr	r8, [r0]
   12340:	ldr	r7, [r4]
   12344:	mov	r1, #2304	; 0x900
   12348:	mov	r0, r7
   1234c:	bl	11694 <open64@plt>
   12350:	cmn	r0, #1
   12354:	ble	12384 <__assert_fail@plt+0xa98>
   12358:	mov	r6, r0
   1235c:	mvn	r0, #103	; 0x67
   12360:	mla	r2, r8, r0, r9
   12364:	mov	r0, #3
   12368:	mov	r1, r6
   1236c:	bl	11610 <__fxstat64@plt>
   12370:	cmp	r0, #0
   12374:	beq	123d0 <__assert_fail@plt+0xae4>
   12378:	bl	11748 <__errno_location@plt>
   1237c:	ldr	r5, [r0]
   12380:	b	123d4 <__assert_fail@plt+0xae8>
   12384:	bl	11748 <__errno_location@plt>
   12388:	ldr	r5, [r0]
   1238c:	cmp	r5, #2
   12390:	cmpne	r5, #20
   12394:	beq	123ec <__assert_fail@plt+0xb00>
   12398:	mov	r6, r0
   1239c:	mvn	r0, #103	; 0x67
   123a0:	mov	r1, r7
   123a4:	mla	r2, r8, r0, r9
   123a8:	mov	r0, #3
   123ac:	bl	11898 <__xstat64@plt>
   123b0:	movw	r2, #9024	; 0x2340
   123b4:	cmp	r0, #0
   123b8:	movt	r2, #3
   123bc:	beq	1242c <__assert_fail@plt+0xb40>
   123c0:	ldr	r5, [r6]
   123c4:	cmp	r5, #0
   123c8:	bne	123ec <__assert_fail@plt+0xb00>
   123cc:	b	1242c <__assert_fail@plt+0xb40>
   123d0:	mov	r5, #0
   123d4:	mov	r0, r6
   123d8:	bl	118c8 <close@plt>
   123dc:	movw	r2, #9024	; 0x2340
   123e0:	movt	r2, #3
   123e4:	cmp	r5, #0
   123e8:	beq	1242c <__assert_fail@plt+0xb40>
   123ec:	ldr	r2, [r4]
   123f0:	mov	r0, #0
   123f4:	mov	r1, #3
   123f8:	bl	1b6b4 <__assert_fail@plt+0x9dc8>
   123fc:	movw	r2, #4076	; 0xfec
   12400:	mov	r3, r0
   12404:	mov	r0, #0
   12408:	mov	r1, r5
   1240c:	movt	r2, #2
   12410:	bl	1167c <error@plt>
   12414:	movw	r2, #9024	; 0x2340
   12418:	mov	r0, #1
   1241c:	movt	r2, #3
   12420:	strb	r0, [r2, #4]
   12424:	mov	r0, #0
   12428:	str	r0, [r4]
   1242c:	cmp	sl, #0
   12430:	bne	12328 <__assert_fail@plt+0xa3c>
   12434:	ldrd	r0, [r2, #8]
   12438:	orrs	r0, r0, r1
   1243c:	mov	r0, #1
   12440:	bne	12468 <__assert_fail@plt+0xb7c>
   12444:	ldrb	r0, [r2, #2]
   12448:	ldrb	r1, [r2, #6]
   1244c:	movw	r2, #8568	; 0x2178
   12450:	movt	r2, #3
   12454:	ldrb	r2, [r2, #52]	; 0x34
   12458:	cmp	r2, #0
   1245c:	movwne	r2, #1
   12460:	orr	r0, r0, r2
   12464:	orr	r0, r1, r0
   12468:	and	r0, r0, #1
   1246c:	bl	18d54 <__assert_fail@plt+0x7468>
   12470:	movw	r2, #9024	; 0x2340
   12474:	cmp	r0, #0
   12478:	movt	r2, #3
   1247c:	str	r0, [r2, #24]
   12480:	beq	12540 <__assert_fail@plt+0xc54>
   12484:	ldrb	r0, [r2, #7]
   12488:	cmp	r0, #1
   1248c:	bne	125ec <__assert_fail@plt+0xd00>
   12490:	bl	1188c <sync@plt>
   12494:	movw	r2, #9024	; 0x2340
   12498:	movt	r2, #3
   1249c:	ldr	r0, [r2, #20]
   124a0:	cmp	r0, #4
   124a4:	bls	125f8 <__assert_fail@plt+0xd0c>
   124a8:	movw	r0, #1340	; 0x53c
   124ac:	movw	r1, #1115	; 0x45b
   124b0:	movw	r3, #1363	; 0x553
   124b4:	movw	r2, #565	; 0x235
   124b8:	movt	r0, #2
   124bc:	movt	r1, #2
   124c0:	movt	r3, #2
   124c4:	bl	118ec <__assert_fail@plt>
   124c8:	tst	r5, #1
   124cc:	beq	12764 <__assert_fail@plt+0xe78>
   124d0:	movw	r0, #65459	; 0xffb3
   124d4:	mov	r6, r5
   124d8:	mov	r5, #0
   124dc:	movt	r0, #1
   124e0:	str	r5, [r2, #16]
   124e4:	bl	116ac <getenv@plt>
   124e8:	movw	r2, #9024	; 0x2340
   124ec:	mov	r4, #512	; 0x200
   124f0:	cmp	r0, #0
   124f4:	movt	r2, #3
   124f8:	movweq	r4, #1024	; 0x400
   124fc:	strd	r4, [r2, #48]	; 0x30
   12500:	mov	r5, r6
   12504:	ldr	r0, [r2, #20]
   12508:	cmp	r0, #1
   1250c:	cmpne	r0, #4
   12510:	beq	12214 <__assert_fail@plt+0x928>
   12514:	ldrb	r0, [r2, #16]
   12518:	tst	r0, #16
   1251c:	bne	1373c <__assert_fail@plt+0x1e50>
   12520:	tst	r5, #1
   12524:	beq	12214 <__assert_fail@plt+0x928>
   12528:	mov	r0, #3
   1252c:	str	r0, [r2, #20]
   12530:	ldr	r6, [r2, #8]
   12534:	cmp	r6, #0
   12538:	bne	12220 <__assert_fail@plt+0x934>
   1253c:	b	122b4 <__assert_fail@plt+0x9c8>
   12540:	movw	r0, #9000	; 0x2328
   12544:	ldr	r1, [sp, #52]	; 0x34
   12548:	mov	r4, #1
   1254c:	movt	r0, #3
   12550:	ldr	r0, [r0]
   12554:	cmp	r0, r1
   12558:	bge	125a0 <__assert_fail@plt+0xcb4>
   1255c:	ldrb	r0, [r2]
   12560:	cmp	r0, #0
   12564:	ldrbeq	r0, [r2, #6]
   12568:	cmpeq	r0, #0
   1256c:	bne	125a0 <__assert_fail@plt+0xcb4>
   12570:	ldr	r0, [r2, #8]
   12574:	cmp	r0, #0
   12578:	ldreq	r0, [r2, #12]
   1257c:	cmpeq	r0, #0
   12580:	bne	125a0 <__assert_fail@plt+0xcb4>
   12584:	movw	r1, #0
   12588:	mov	r0, #0
   1258c:	mov	r2, #5
   12590:	mov	r4, #0
   12594:	movt	r1, #2
   12598:	bl	115b0 <dcgettext@plt>
   1259c:	str	r0, [sp, #48]	; 0x30
   125a0:	bl	11748 <__errno_location@plt>
   125a4:	ldr	r5, [r0]
   125a8:	movw	r1, #15
   125ac:	mov	r0, #0
   125b0:	mov	r2, #5
   125b4:	movt	r1, #2
   125b8:	bl	115b0 <dcgettext@plt>
   125bc:	ldr	r3, [sp, #48]	; 0x30
   125c0:	movw	r2, #10
   125c4:	str	r0, [sp]
   125c8:	mov	r0, r4
   125cc:	mov	r1, r5
   125d0:	movt	r2, #2
   125d4:	bl	1167c <error@plt>
   125d8:	movw	r2, #9024	; 0x2340
   125dc:	movt	r2, #3
   125e0:	ldrb	r0, [r2, #7]
   125e4:	cmp	r0, #1
   125e8:	beq	12490 <__assert_fail@plt+0xba4>
   125ec:	ldr	r0, [r2, #20]
   125f0:	cmp	r0, #4
   125f4:	bhi	124a8 <__assert_fail@plt+0xbbc>
   125f8:	add	r1, pc, #0
   125fc:	ldr	pc, [r1, r0, lsl #2]
   12600:	andeq	r2, r1, r4, lsl r6
   12604:	andeq	r2, r1, r4, lsl #22
   12608:			; <UNDEFINED> instruction: 0x000127bc
   1260c:	andeq	r2, r1, r4, ror #18
   12610:	muleq	r1, r8, r7
   12614:	ldr	r1, [r2, #28]
   12618:	ldr	r0, [r2, #32]
   1261c:	add	r1, r1, #1
   12620:	str	r1, [r2, #28]
   12624:	mov	r2, #4
   12628:	bl	1c228 <__assert_fail@plt+0xa93c>
   1262c:	movw	r7, #9024	; 0x2340
   12630:	movw	r4, #8568	; 0x2178
   12634:	movt	r7, #3
   12638:	movt	r4, #3
   1263c:	str	r0, [r7, #32]
   12640:	ldr	r1, [r7, #28]
   12644:	add	r2, r0, r1, lsl #2
   12648:	str	r4, [r2, #-4]
   1264c:	ldrb	r2, [r4, #24]
   12650:	cmp	r2, #0
   12654:	bne	13d54 <__assert_fail@plt+0x2468>
   12658:	mov	r2, #1
   1265c:	strb	r2, [r4, #24]
   12660:	ldrb	r2, [r7, #2]
   12664:	cmp	r2, #1
   12668:	bne	126ac <__assert_fail@plt+0xdc0>
   1266c:	add	r1, r1, #1
   12670:	mov	r2, #4
   12674:	str	r1, [r7, #28]
   12678:	bl	1c228 <__assert_fail@plt+0xa93c>
   1267c:	movw	r7, #9024	; 0x2340
   12680:	add	r3, r4, #28
   12684:	movt	r7, #3
   12688:	str	r0, [r7, #32]
   1268c:	ldr	r1, [r7, #28]
   12690:	add	r2, r0, r1, lsl #2
   12694:	str	r3, [r2, #-4]
   12698:	ldrb	r2, [r4, #52]	; 0x34
   1269c:	cmp	r2, #0
   126a0:	bne	13d54 <__assert_fail@plt+0x2468>
   126a4:	mov	r2, #1
   126a8:	strb	r2, [r4, #52]	; 0x34
   126ac:	add	r1, r1, #1
   126b0:	mov	r2, #4
   126b4:	str	r1, [r7, #28]
   126b8:	bl	1c228 <__assert_fail@plt+0xa93c>
   126bc:	movw	r7, #9024	; 0x2340
   126c0:	add	r3, r4, #56	; 0x38
   126c4:	movt	r7, #3
   126c8:	str	r0, [r7, #32]
   126cc:	ldr	r1, [r7, #28]
   126d0:	add	r2, r0, r1, lsl #2
   126d4:	str	r3, [r2, #-4]
   126d8:	ldrb	r2, [r4, #80]	; 0x50
   126dc:	cmp	r2, #0
   126e0:	bne	13d54 <__assert_fail@plt+0x2468>
   126e4:	mov	r5, #1
   126e8:	add	r1, r1, #1
   126ec:	mov	r2, #4
   126f0:	strb	r5, [r4, #80]	; 0x50
   126f4:	str	r1, [r7, #28]
   126f8:	bl	1c228 <__assert_fail@plt+0xa93c>
   126fc:	movw	r7, #9024	; 0x2340
   12700:	add	r3, r4, #84	; 0x54
   12704:	movt	r7, #3
   12708:	str	r0, [r7, #32]
   1270c:	ldr	r1, [r7, #28]
   12710:	add	r2, r0, r1, lsl #2
   12714:	str	r3, [r2, #-4]
   12718:	ldrb	r2, [r4, #108]	; 0x6c
   1271c:	cmp	r2, #0
   12720:	bne	13d54 <__assert_fail@plt+0x2468>
   12724:	add	r1, r1, #1
   12728:	mov	r2, #4
   1272c:	strb	r5, [r4, #108]	; 0x6c
   12730:	str	r1, [r7, #28]
   12734:	bl	1c228 <__assert_fail@plt+0xa93c>
   12738:	movw	r7, #9024	; 0x2340
   1273c:	add	r3, r4, #112	; 0x70
   12740:	movt	r7, #3
   12744:	str	r0, [r7, #32]
   12748:	ldr	r1, [r7, #28]
   1274c:	add	r2, r0, r1, lsl #2
   12750:	str	r3, [r2, #-4]
   12754:	ldrb	r2, [r4, #136]	; 0x88
   12758:	cmp	r2, #0
   1275c:	beq	12920 <__assert_fail@plt+0x1034>
   12760:	b	13d54 <__assert_fail@plt+0x2468>
   12764:	movw	r0, #65475	; 0xffc3
   12768:	movt	r0, #1
   1276c:	bl	116ac <getenv@plt>
   12770:	ldr	r1, [sp, #60]	; 0x3c
   12774:	ldr	r2, [sp, #56]	; 0x38
   12778:	bl	17fa8 <__assert_fail@plt+0x66bc>
   1277c:	movw	r2, #9024	; 0x2340
   12780:	movt	r2, #3
   12784:	ldr	r0, [r2, #20]
   12788:	cmp	r0, #1
   1278c:	cmpne	r0, #4
   12790:	beq	12214 <__assert_fail@plt+0x928>
   12794:	b	12514 <__assert_fail@plt+0xc28>
   12798:	ldr	r0, [r2, #28]
   1279c:	cmp	r0, #0
   127a0:	bne	12cd4 <__assert_fail@plt+0x13e8>
   127a4:	movw	r0, #1389	; 0x56d
   127a8:	movt	r0, #2
   127ac:	bl	13e10 <__assert_fail@plt+0x2524>
   127b0:	movw	r2, #9024	; 0x2340
   127b4:	movt	r2, #3
   127b8:	b	12cd4 <__assert_fail@plt+0x13e8>
   127bc:	ldr	r1, [r2, #28]
   127c0:	ldr	r0, [r2, #32]
   127c4:	add	r1, r1, #1
   127c8:	str	r1, [r2, #28]
   127cc:	mov	r2, #4
   127d0:	bl	1c228 <__assert_fail@plt+0xa93c>
   127d4:	movw	r7, #9024	; 0x2340
   127d8:	movw	r4, #8568	; 0x2178
   127dc:	movt	r7, #3
   127e0:	movt	r4, #3
   127e4:	str	r0, [r7, #32]
   127e8:	ldr	r1, [r7, #28]
   127ec:	add	r2, r0, r1, lsl #2
   127f0:	str	r4, [r2, #-4]
   127f4:	ldrb	r2, [r4, #24]
   127f8:	cmp	r2, #0
   127fc:	bne	13d54 <__assert_fail@plt+0x2468>
   12800:	mov	r2, #1
   12804:	strb	r2, [r4, #24]
   12808:	ldrb	r2, [r7, #2]
   1280c:	cmp	r2, #1
   12810:	bne	12854 <__assert_fail@plt+0xf68>
   12814:	add	r1, r1, #1
   12818:	mov	r2, #4
   1281c:	str	r1, [r7, #28]
   12820:	bl	1c228 <__assert_fail@plt+0xa93c>
   12824:	movw	r7, #9024	; 0x2340
   12828:	add	r3, r4, #28
   1282c:	movt	r7, #3
   12830:	str	r0, [r7, #32]
   12834:	ldr	r1, [r7, #28]
   12838:	add	r2, r0, r1, lsl #2
   1283c:	str	r3, [r2, #-4]
   12840:	ldrb	r2, [r4, #52]	; 0x34
   12844:	cmp	r2, #0
   12848:	bne	13d54 <__assert_fail@plt+0x2468>
   1284c:	mov	r2, #1
   12850:	strb	r2, [r4, #52]	; 0x34
   12854:	add	r1, r1, #1
   12858:	mov	r2, #4
   1285c:	str	r1, [r7, #28]
   12860:	bl	1c228 <__assert_fail@plt+0xa93c>
   12864:	movw	r7, #9024	; 0x2340
   12868:	add	r3, r4, #56	; 0x38
   1286c:	movt	r7, #3
   12870:	str	r0, [r7, #32]
   12874:	ldr	r1, [r7, #28]
   12878:	add	r2, r0, r1, lsl #2
   1287c:	str	r3, [r2, #-4]
   12880:	movw	r2, #1087	; 0x43f
   12884:	movt	r2, #2
   12888:	str	r2, [r4, #68]	; 0x44
   1288c:	ldrb	r2, [r4, #80]	; 0x50
   12890:	cmp	r2, #0
   12894:	bne	13d54 <__assert_fail@plt+0x2468>
   12898:	mov	r5, #1
   1289c:	add	r1, r1, #1
   128a0:	mov	r2, #4
   128a4:	strb	r5, [r4, #80]	; 0x50
   128a8:	str	r1, [r7, #28]
   128ac:	bl	1c228 <__assert_fail@plt+0xa93c>
   128b0:	movw	r7, #9024	; 0x2340
   128b4:	add	r3, r4, #84	; 0x54
   128b8:	movt	r7, #3
   128bc:	str	r0, [r7, #32]
   128c0:	ldr	r1, [r7, #28]
   128c4:	add	r2, r0, r1, lsl #2
   128c8:	str	r3, [r2, #-4]
   128cc:	ldrb	r2, [r4, #108]	; 0x6c
   128d0:	cmp	r2, #0
   128d4:	bne	13d54 <__assert_fail@plt+0x2468>
   128d8:	add	r1, r1, #1
   128dc:	mov	r2, #4
   128e0:	strb	r5, [r4, #108]	; 0x6c
   128e4:	str	r1, [r7, #28]
   128e8:	bl	1c228 <__assert_fail@plt+0xa93c>
   128ec:	movw	r7, #9024	; 0x2340
   128f0:	add	r3, r4, #112	; 0x70
   128f4:	movt	r7, #3
   128f8:	str	r0, [r7, #32]
   128fc:	ldr	r1, [r7, #28]
   12900:	add	r2, r0, r1, lsl #2
   12904:	str	r3, [r2, #-4]
   12908:	movw	r2, #1092	; 0x444
   1290c:	movt	r2, #2
   12910:	str	r2, [r4, #124]	; 0x7c
   12914:	ldrb	r2, [r4, #136]	; 0x88
   12918:	cmp	r2, #0
   1291c:	bne	13d54 <__assert_fail@plt+0x2468>
   12920:	mov	r5, #1
   12924:	add	r1, r1, #1
   12928:	mov	r2, #4
   1292c:	strb	r5, [r4, #136]	; 0x88
   12930:	str	r1, [r7, #28]
   12934:	bl	1c228 <__assert_fail@plt+0xa93c>
   12938:	movw	r7, #9024	; 0x2340
   1293c:	add	r3, r4, #140	; 0x8c
   12940:	movt	r7, #3
   12944:	str	r0, [r7, #32]
   12948:	ldr	r1, [r7, #28]
   1294c:	add	r2, r0, r1, lsl #2
   12950:	str	r3, [r2, #-4]
   12954:	ldrb	r2, [r4, #164]	; 0xa4
   12958:	cmp	r2, #0
   1295c:	beq	12afc <__assert_fail@plt+0x1210>
   12960:	b	13d54 <__assert_fail@plt+0x2468>
   12964:	ldr	r1, [r2, #28]
   12968:	ldr	r0, [r2, #32]
   1296c:	add	r1, r1, #1
   12970:	str	r1, [r2, #28]
   12974:	mov	r2, #4
   12978:	bl	1c228 <__assert_fail@plt+0xa93c>
   1297c:	movw	r7, #9024	; 0x2340
   12980:	movw	r4, #8568	; 0x2178
   12984:	movt	r7, #3
   12988:	movt	r4, #3
   1298c:	str	r0, [r7, #32]
   12990:	ldr	r1, [r7, #28]
   12994:	add	r2, r0, r1, lsl #2
   12998:	str	r4, [r2, #-4]
   1299c:	ldrb	r2, [r4, #24]
   129a0:	cmp	r2, #0
   129a4:	bne	13d54 <__assert_fail@plt+0x2468>
   129a8:	mov	r2, #1
   129ac:	strb	r2, [r4, #24]
   129b0:	ldrb	r2, [r7, #2]
   129b4:	cmp	r2, #1
   129b8:	bne	129fc <__assert_fail@plt+0x1110>
   129bc:	add	r1, r1, #1
   129c0:	mov	r2, #4
   129c4:	str	r1, [r7, #28]
   129c8:	bl	1c228 <__assert_fail@plt+0xa93c>
   129cc:	movw	r7, #9024	; 0x2340
   129d0:	add	r3, r4, #28
   129d4:	movt	r7, #3
   129d8:	str	r0, [r7, #32]
   129dc:	ldr	r1, [r7, #28]
   129e0:	add	r2, r0, r1, lsl #2
   129e4:	str	r3, [r2, #-4]
   129e8:	ldrb	r2, [r4, #52]	; 0x34
   129ec:	cmp	r2, #0
   129f0:	bne	13d54 <__assert_fail@plt+0x2468>
   129f4:	mov	r2, #1
   129f8:	strb	r2, [r4, #52]	; 0x34
   129fc:	add	r1, r1, #1
   12a00:	mov	r2, #4
   12a04:	str	r1, [r7, #28]
   12a08:	bl	1c228 <__assert_fail@plt+0xa93c>
   12a0c:	movw	r7, #9024	; 0x2340
   12a10:	add	r3, r4, #56	; 0x38
   12a14:	movt	r7, #3
   12a18:	str	r0, [r7, #32]
   12a1c:	ldr	r1, [r7, #28]
   12a20:	add	r2, r0, r1, lsl #2
   12a24:	str	r3, [r2, #-4]
   12a28:	ldrb	r2, [r4, #80]	; 0x50
   12a2c:	cmp	r2, #0
   12a30:	bne	13d54 <__assert_fail@plt+0x2468>
   12a34:	mov	r5, #1
   12a38:	add	r1, r1, #1
   12a3c:	mov	r2, #4
   12a40:	strb	r5, [r4, #80]	; 0x50
   12a44:	str	r1, [r7, #28]
   12a48:	bl	1c228 <__assert_fail@plt+0xa93c>
   12a4c:	movw	r7, #9024	; 0x2340
   12a50:	add	r3, r4, #84	; 0x54
   12a54:	movt	r7, #3
   12a58:	str	r0, [r7, #32]
   12a5c:	ldr	r1, [r7, #28]
   12a60:	add	r2, r0, r1, lsl #2
   12a64:	str	r3, [r2, #-4]
   12a68:	ldrb	r2, [r4, #108]	; 0x6c
   12a6c:	cmp	r2, #0
   12a70:	bne	13d54 <__assert_fail@plt+0x2468>
   12a74:	add	r1, r1, #1
   12a78:	mov	r2, #4
   12a7c:	strb	r5, [r4, #108]	; 0x6c
   12a80:	str	r1, [r7, #28]
   12a84:	bl	1c228 <__assert_fail@plt+0xa93c>
   12a88:	movw	r7, #9024	; 0x2340
   12a8c:	add	r3, r4, #112	; 0x70
   12a90:	movt	r7, #3
   12a94:	str	r0, [r7, #32]
   12a98:	ldr	r1, [r7, #28]
   12a9c:	add	r2, r0, r1, lsl #2
   12aa0:	str	r3, [r2, #-4]
   12aa4:	ldrb	r2, [r4, #136]	; 0x88
   12aa8:	cmp	r2, #0
   12aac:	bne	13d54 <__assert_fail@plt+0x2468>
   12ab0:	mov	r5, #1
   12ab4:	add	r1, r1, #1
   12ab8:	mov	r2, #4
   12abc:	strb	r5, [r4, #136]	; 0x88
   12ac0:	str	r1, [r7, #28]
   12ac4:	bl	1c228 <__assert_fail@plt+0xa93c>
   12ac8:	movw	r7, #9024	; 0x2340
   12acc:	add	r3, r4, #140	; 0x8c
   12ad0:	movt	r7, #3
   12ad4:	str	r0, [r7, #32]
   12ad8:	ldr	r1, [r7, #28]
   12adc:	add	r2, r0, r1, lsl #2
   12ae0:	str	r3, [r2, #-4]
   12ae4:	movw	r2, #1331	; 0x533
   12ae8:	movt	r2, #2
   12aec:	str	r2, [r4, #152]	; 0x98
   12af0:	ldrb	r2, [r4, #164]	; 0xa4
   12af4:	cmp	r2, #0
   12af8:	bne	13d54 <__assert_fail@plt+0x2468>
   12afc:	strb	r5, [r4, #164]	; 0xa4
   12b00:	b	12c94 <__assert_fail@plt+0x13a8>
   12b04:	ldr	r1, [r2, #28]
   12b08:	ldr	r0, [r2, #32]
   12b0c:	add	r1, r1, #1
   12b10:	str	r1, [r2, #28]
   12b14:	mov	r2, #4
   12b18:	bl	1c228 <__assert_fail@plt+0xa93c>
   12b1c:	movw	r7, #9024	; 0x2340
   12b20:	movw	r4, #8568	; 0x2178
   12b24:	movt	r7, #3
   12b28:	movt	r4, #3
   12b2c:	str	r0, [r7, #32]
   12b30:	ldr	r1, [r7, #28]
   12b34:	add	r2, r0, r1, lsl #2
   12b38:	str	r4, [r2, #-4]
   12b3c:	ldrb	r2, [r4, #24]
   12b40:	cmp	r2, #0
   12b44:	bne	13d54 <__assert_fail@plt+0x2468>
   12b48:	mov	r2, #1
   12b4c:	strb	r2, [r4, #24]
   12b50:	ldrb	r2, [r7, #2]
   12b54:	cmp	r2, #1
   12b58:	bne	12b9c <__assert_fail@plt+0x12b0>
   12b5c:	add	r1, r1, #1
   12b60:	mov	r2, #4
   12b64:	str	r1, [r7, #28]
   12b68:	bl	1c228 <__assert_fail@plt+0xa93c>
   12b6c:	movw	r7, #9024	; 0x2340
   12b70:	add	r3, r4, #28
   12b74:	movt	r7, #3
   12b78:	str	r0, [r7, #32]
   12b7c:	ldr	r1, [r7, #28]
   12b80:	add	r2, r0, r1, lsl #2
   12b84:	str	r3, [r2, #-4]
   12b88:	ldrb	r2, [r4, #52]	; 0x34
   12b8c:	cmp	r2, #0
   12b90:	bne	13d54 <__assert_fail@plt+0x2468>
   12b94:	mov	r2, #1
   12b98:	strb	r2, [r4, #52]	; 0x34
   12b9c:	add	r1, r1, #1
   12ba0:	mov	r2, #4
   12ba4:	str	r1, [r7, #28]
   12ba8:	bl	1c228 <__assert_fail@plt+0xa93c>
   12bac:	movw	r7, #9024	; 0x2340
   12bb0:	add	r3, r4, #168	; 0xa8
   12bb4:	movt	r7, #3
   12bb8:	str	r0, [r7, #32]
   12bbc:	ldr	r1, [r7, #28]
   12bc0:	add	r2, r0, r1, lsl #2
   12bc4:	str	r3, [r2, #-4]
   12bc8:	ldrb	r2, [r4, #192]	; 0xc0
   12bcc:	cmp	r2, #0
   12bd0:	bne	13d54 <__assert_fail@plt+0x2468>
   12bd4:	mov	r5, #1
   12bd8:	add	r1, r1, #1
   12bdc:	mov	r2, #4
   12be0:	strb	r5, [r4, #192]	; 0xc0
   12be4:	str	r1, [r7, #28]
   12be8:	bl	1c228 <__assert_fail@plt+0xa93c>
   12bec:	movw	r7, #9024	; 0x2340
   12bf0:	add	r3, r4, #196	; 0xc4
   12bf4:	movt	r7, #3
   12bf8:	str	r0, [r7, #32]
   12bfc:	ldr	r1, [r7, #28]
   12c00:	add	r2, r0, r1, lsl #2
   12c04:	str	r3, [r2, #-4]
   12c08:	ldrb	r2, [r4, #220]	; 0xdc
   12c0c:	cmp	r2, #0
   12c10:	bne	13d54 <__assert_fail@plt+0x2468>
   12c14:	add	r1, r1, #1
   12c18:	mov	r2, #4
   12c1c:	strb	r5, [r4, #220]	; 0xdc
   12c20:	str	r1, [r7, #28]
   12c24:	bl	1c228 <__assert_fail@plt+0xa93c>
   12c28:	movw	r7, #9024	; 0x2340
   12c2c:	add	r3, r4, #224	; 0xe0
   12c30:	movt	r7, #3
   12c34:	str	r0, [r7, #32]
   12c38:	ldr	r1, [r7, #28]
   12c3c:	add	r2, r0, r1, lsl #2
   12c40:	str	r3, [r2, #-4]
   12c44:	ldrb	r2, [r4, #248]	; 0xf8
   12c48:	cmp	r2, #0
   12c4c:	bne	13d54 <__assert_fail@plt+0x2468>
   12c50:	mov	r5, #1
   12c54:	add	r1, r1, #1
   12c58:	mov	r2, #4
   12c5c:	strb	r5, [r4, #248]	; 0xf8
   12c60:	str	r1, [r7, #28]
   12c64:	bl	1c228 <__assert_fail@plt+0xa93c>
   12c68:	movw	r7, #9024	; 0x2340
   12c6c:	add	r3, r4, #252	; 0xfc
   12c70:	movt	r7, #3
   12c74:	str	r0, [r7, #32]
   12c78:	ldr	r1, [r7, #28]
   12c7c:	add	r2, r0, r1, lsl #2
   12c80:	str	r3, [r2, #-4]
   12c84:	ldrb	r2, [r4, #276]	; 0x114
   12c88:	cmp	r2, #0
   12c8c:	bne	13d54 <__assert_fail@plt+0x2468>
   12c90:	strb	r5, [r4, #276]	; 0x114
   12c94:	add	r1, r1, #1
   12c98:	mov	r2, #4
   12c9c:	str	r1, [r7, #28]
   12ca0:	bl	1c228 <__assert_fail@plt+0xa93c>
   12ca4:	movw	r2, #9024	; 0x2340
   12ca8:	movt	r2, #3
   12cac:	str	r0, [r2, #32]
   12cb0:	ldr	r1, [r2, #28]
   12cb4:	add	r0, r0, r1, lsl #2
   12cb8:	add	r1, r4, #280	; 0x118
   12cbc:	str	r1, [r0, #-4]
   12cc0:	ldrb	r0, [r4, #304]	; 0x130
   12cc4:	cmp	r0, #0
   12cc8:	bne	13d54 <__assert_fail@plt+0x2468>
   12ccc:	mov	r0, #1
   12cd0:	strb	r0, [r4, #304]	; 0x130
   12cd4:	ldr	r1, [r2, #40]	; 0x28
   12cd8:	ldr	r0, [r2, #36]	; 0x24
   12cdc:	add	r1, r1, #1
   12ce0:	str	r1, [r2, #40]	; 0x28
   12ce4:	mov	r2, #4
   12ce8:	bl	1c228 <__assert_fail@plt+0xa93c>
   12cec:	movw	r1, #9024	; 0x2340
   12cf0:	movt	r1, #3
   12cf4:	str	r0, [r1, #36]	; 0x24
   12cf8:	movw	r0, #9024	; 0x2340
   12cfc:	mov	r1, #4
   12d00:	movt	r0, #3
   12d04:	ldr	r0, [r0, #28]
   12d08:	bl	1c334 <__assert_fail@plt+0xaa48>
   12d0c:	movw	r7, #9024	; 0x2340
   12d10:	movt	r7, #3
   12d14:	ldr	r1, [r7, #36]	; 0x24
   12d18:	ldr	r2, [r7, #40]	; 0x28
   12d1c:	add	r1, r1, r2, lsl #2
   12d20:	str	r0, [r1, #-4]
   12d24:	ldr	r0, [r7, #28]
   12d28:	cmp	r0, #0
   12d2c:	beq	12fe0 <__assert_fail@plt+0x16f4>
   12d30:	ldr	r1, [r7, #32]
   12d34:	movw	r6, #8904	; 0x22c8
   12d38:	movw	r4, #20224	; 0x4f00
   12d3c:	mov	sl, #0
   12d40:	mov	r8, #1000	; 0x3e8
   12d44:	mov	r9, #0
   12d48:	movt	r6, #3
   12d4c:	movt	r4, #1
   12d50:	str	sl, [fp, #-56]	; 0xffffffc8
   12d54:	mov	r2, #5
   12d58:	ldr	r0, [r1, r9, lsl #2]
   12d5c:	ldr	r1, [r0, #12]
   12d60:	mov	r0, #0
   12d64:	bl	115b0 <dcgettext@plt>
   12d68:	movw	r1, #9024	; 0x2340
   12d6c:	mov	r5, r0
   12d70:	movt	r1, #3
   12d74:	ldr	r0, [r1, #32]
   12d78:	ldr	r0, [r0, r9, lsl #2]
   12d7c:	ldr	r0, [r0]
   12d80:	cmp	r0, #2
   12d84:	bne	12fc4 <__assert_fail@plt+0x16d8>
   12d88:	ldr	r0, [r1, #20]
   12d8c:	cmp	r0, #4
   12d90:	beq	12df4 <__assert_fail@plt+0x1508>
   12d94:	cmp	r0, #3
   12d98:	beq	12dac <__assert_fail@plt+0x14c0>
   12d9c:	cmp	r0, #0
   12da0:	bne	12fc4 <__assert_fail@plt+0x16d8>
   12da4:	ldr	r0, [r1, #16]
   12da8:	b	12e00 <__assert_fail@plt+0x1514>
   12dac:	ldrd	r0, [r1, #48]	; 0x30
   12db0:	add	r2, sp, #64	; 0x40
   12db4:	bl	18170 <__assert_fail@plt+0x6884>
   12db8:	movw	r1, #1464	; 0x5b8
   12dbc:	mov	r4, r0
   12dc0:	mov	r0, #0
   12dc4:	mov	r2, #5
   12dc8:	movt	r1, #2
   12dcc:	bl	115b0 <dcgettext@plt>
   12dd0:	mov	r2, r0
   12dd4:	sub	r0, fp, #56	; 0x38
   12dd8:	mov	r1, #1
   12ddc:	mov	r3, r4
   12de0:	str	r5, [sp]
   12de4:	bl	116a0 <__asprintf_chk@plt>
   12de8:	cmn	r0, #1
   12dec:	streq	sl, [fp, #-56]	; 0xffffffc8
   12df0:	b	12f24 <__assert_fail@plt+0x1638>
   12df4:	ldr	r0, [r1, #16]
   12df8:	tst	r0, #16
   12dfc:	bne	12fc4 <__assert_fail@plt+0x16d8>
   12e00:	str	r0, [sp, #56]	; 0x38
   12e04:	ldr	r5, [r1, #48]	; 0x30
   12e08:	ldr	r4, [r1, #52]	; 0x34
   12e0c:	mov	sl, r5
   12e10:	mov	r7, r4
   12e14:	str	r5, [sp, #48]	; 0x30
   12e18:	str	r4, [sp, #60]	; 0x3c
   12e1c:	mov	r0, r5
   12e20:	mov	r1, r4
   12e24:	mov	r2, #1000	; 0x3e8
   12e28:	mov	r3, #0
   12e2c:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   12e30:	umull	r2, r3, r0, r8
   12e34:	subs	r2, r5, r2
   12e38:	mla	r3, r1, r8, r3
   12e3c:	lsr	r5, sl, #10
   12e40:	sbc	r6, r4, r3
   12e44:	mov	r3, sl
   12e48:	orr	sl, r5, r7, lsl #22
   12e4c:	lsr	r7, r7, #10
   12e50:	mov	r5, r0
   12e54:	bfc	r3, #10, #22
   12e58:	orr	r4, r2, r3
   12e5c:	orrs	r4, r4, r6
   12e60:	mov	r4, r1
   12e64:	beq	12e1c <__assert_fail@plt+0x1530>
   12e68:	mov	r0, #1
   12e6c:	mov	r1, #184	; 0xb8
   12e70:	mov	sl, #0
   12e74:	str	r0, [sp]
   12e78:	str	r0, [sp, #8]
   12e7c:	orrs	r0, r2, r6
   12e80:	ldr	r2, [sp, #56]	; 0x38
   12e84:	str	sl, [sp, #4]
   12e88:	str	sl, [sp, #12]
   12e8c:	movweq	r1, #152	; 0x98
   12e90:	cmp	r3, #0
   12e94:	movne	r1, #152	; 0x98
   12e98:	and	r2, r2, #292	; 0x124
   12e9c:	orr	r1, r1, r2
   12ea0:	mov	r2, r1
   12ea4:	andne	r2, r2, #412	; 0x19c
   12ea8:	cmp	r0, #0
   12eac:	mov	r0, #256	; 0x100
   12eb0:	movne	r2, r1
   12eb4:	ldr	r1, [sp, #60]	; 0x3c
   12eb8:	bic	r0, r0, r2, lsl #3
   12ebc:	orr	r3, r0, r2
   12ec0:	ldr	r0, [sp, #48]	; 0x30
   12ec4:	add	r2, sp, #64	; 0x40
   12ec8:	bl	175f8 <__assert_fail@plt+0x5d0c>
   12ecc:	movw	r1, #1241	; 0x4d9
   12ed0:	mov	r4, r0
   12ed4:	mov	r0, #0
   12ed8:	mov	r2, #5
   12edc:	movt	r1, #2
   12ee0:	bl	115b0 <dcgettext@plt>
   12ee4:	movw	r1, #1464	; 0x5b8
   12ee8:	mov	r5, r0
   12eec:	mov	r0, #0
   12ef0:	mov	r2, #5
   12ef4:	movt	r1, #2
   12ef8:	bl	115b0 <dcgettext@plt>
   12efc:	mov	r2, r0
   12f00:	sub	r0, fp, #56	; 0x38
   12f04:	mov	r1, #1
   12f08:	mov	r3, r4
   12f0c:	str	r5, [sp]
   12f10:	bl	116a0 <__asprintf_chk@plt>
   12f14:	movw	r6, #8904	; 0x22c8
   12f18:	cmn	r0, #1
   12f1c:	streq	sl, [fp, #-56]	; 0xffffffc8
   12f20:	movt	r6, #3
   12f24:	ldr	r5, [fp, #-56]	; 0xffffffc8
   12f28:	movw	r4, #20224	; 0x4f00
   12f2c:	movt	r4, #1
   12f30:	cmp	r5, #0
   12f34:	beq	13cec <__assert_fail@plt+0x2400>
   12f38:	ldr	r0, [r6]
   12f3c:	cmn	r0, #1
   12f40:	bgt	12f50 <__assert_fail@plt+0x1664>
   12f44:	mov	r0, #1
   12f48:	bl	118a4 <isatty@plt>
   12f4c:	str	r0, [r6]
   12f50:	movw	r1, #20032	; 0x4e40
   12f54:	cmp	r0, #0
   12f58:	mov	r0, r5
   12f5c:	movt	r1, #1
   12f60:	moveq	r1, r4
   12f64:	blx	r1
   12f68:	movw	r0, #9024	; 0x2340
   12f6c:	movt	r0, #3
   12f70:	mov	r7, r0
   12f74:	ldr	r0, [r0, #36]	; 0x24
   12f78:	ldr	r1, [r7, #40]	; 0x28
   12f7c:	add	r0, r0, r1, lsl #2
   12f80:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12f84:	ldr	r0, [r0, #-4]
   12f88:	str	r1, [r0, r9, lsl #2]
   12f8c:	mov	r1, #0
   12f90:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12f94:	bl	186a8 <__assert_fail@plt+0x6dbc>
   12f98:	ldr	r1, [r7, #32]
   12f9c:	ldr	r2, [r1, r9, lsl #2]
   12fa0:	add	r9, r9, #1
   12fa4:	ldr	r3, [r2, #16]
   12fa8:	cmp	r3, r0
   12fac:	movhi	r0, r3
   12fb0:	str	r0, [r2, #16]
   12fb4:	ldr	r0, [r7, #28]
   12fb8:	cmp	r9, r0
   12fbc:	bcc	12d50 <__assert_fail@plt+0x1464>
   12fc0:	b	12fe0 <__assert_fail@plt+0x16f4>
   12fc4:	mov	r0, r5
   12fc8:	bl	115bc <strdup@plt>
   12fcc:	mov	r5, r0
   12fd0:	str	r0, [fp, #-56]	; 0xffffffc8
   12fd4:	cmp	r5, #0
   12fd8:	bne	12f38 <__assert_fail@plt+0x164c>
   12fdc:	b	13cec <__assert_fail@plt+0x2400>
   12fe0:	ldr	r0, [sp, #24]
   12fe4:	cmp	r0, #0
   12fe8:	beq	136c4 <__assert_fail@plt+0x1dd8>
   12fec:	mov	r0, #1
   12ff0:	strb	r0, [r7, #1]
   12ff4:	movw	r0, #9000	; 0x2328
   12ff8:	movt	r0, #3
   12ffc:	ldr	r8, [r0]
   13000:	ldr	r0, [sp, #52]	; 0x34
   13004:	cmp	r8, r0
   13008:	bge	13b1c <__assert_fail@plt+0x2230>
   1300c:	b	13040 <__assert_fail@plt+0x1754>
   13010:	mov	r0, sl
   13014:	bl	16030 <__assert_fail@plt+0x4744>
   13018:	ldr	r8, [sp, #32]
   1301c:	b	134a8 <__assert_fail@plt+0x1bbc>
   13020:	mov	r0, r6
   13024:	bl	16030 <__assert_fail@plt+0x4744>
   13028:	mov	r0, r5
   1302c:	bl	16030 <__assert_fail@plt+0x4744>
   13030:	ldr	r0, [sp, #20]
   13034:	bl	16030 <__assert_fail@plt+0x4744>
   13038:	ldr	r8, [sp, #32]
   1303c:	b	1329c <__assert_fail@plt+0x19b0>
   13040:	ldr	r0, [sp, #44]	; 0x2c
   13044:	ldr	r5, [r0, r8, lsl #2]
   13048:	cmp	r5, #0
   1304c:	beq	136b0 <__assert_fail@plt+0x1dc4>
   13050:	movw	r0, #9000	; 0x2328
   13054:	ldr	r1, [sp, #24]
   13058:	mov	r2, #104	; 0x68
   1305c:	str	r5, [sp, #36]	; 0x24
   13060:	movt	r0, #3
   13064:	ldr	r0, [r0]
   13068:	sub	r0, r8, r0
   1306c:	mla	r0, r0, r2, r1
   13070:	str	r0, [sp, #60]	; 0x3c
   13074:	ldr	r0, [r0, #16]
   13078:	and	r0, r0, #45056	; 0xb000
   1307c:	orr	r0, r0, #16384	; 0x4000
   13080:	cmp	r0, #24576	; 0x6000
   13084:	bne	13350 <__assert_fail@plt+0x1a64>
   13088:	mov	r0, r5
   1308c:	str	r8, [sp, #32]
   13090:	bl	1185c <canonicalize_file_name@plt>
   13094:	mov	r1, r0
   13098:	cmp	r0, #0
   1309c:	mov	r8, r5
   130a0:	beq	130b4 <__assert_fail@plt+0x17c8>
   130a4:	ldrb	r0, [r1]
   130a8:	mov	r8, r1
   130ac:	cmp	r0, #47	; 0x2f
   130b0:	movne	r8, r5
   130b4:	movw	r0, #9024	; 0x2340
   130b8:	movt	r0, #3
   130bc:	ldr	r9, [r0, #24]
   130c0:	cmp	r9, #0
   130c4:	beq	132e4 <__assert_fail@plt+0x19f8>
   130c8:	mov	r0, #0
   130cc:	str	r1, [sp, #20]
   130d0:	str	r0, [sp, #28]
   130d4:	mvn	r0, #0
   130d8:	str	r0, [sp, #48]	; 0x30
   130dc:	mov	r0, #0
   130e0:	str	r0, [sp, #56]	; 0x38
   130e4:	mov	r0, #0
   130e8:	str	r0, [sp, #40]	; 0x28
   130ec:	b	130f8 <__assert_fail@plt+0x180c>
   130f0:	mov	r7, r0
   130f4:	b	131e8 <__assert_fail@plt+0x18fc>
   130f8:	ldr	r7, [r9]
   130fc:	mov	r0, r7
   13100:	bl	1185c <canonicalize_file_name@plt>
   13104:	mov	r5, r0
   13108:	cmp	r0, #0
   1310c:	beq	1311c <__assert_fail@plt+0x1830>
   13110:	ldrb	r0, [r5]
   13114:	cmp	r0, #47	; 0x2f
   13118:	moveq	r7, r5
   1311c:	mov	r0, r8
   13120:	mov	r1, r7
   13124:	bl	11520 <strcmp@plt>
   13128:	cmp	r0, #0
   1312c:	bne	13270 <__assert_fail@plt+0x1984>
   13130:	movw	r0, #9024	; 0x2340
   13134:	ldr	sl, [r9, #4]
   13138:	movt	r0, #3
   1313c:	ldr	r6, [r0, #24]
   13140:	cmp	r6, #0
   13144:	beq	131d8 <__assert_fail@plt+0x18ec>
   13148:	mov	r4, #0
   1314c:	ldr	r0, [r6, #4]
   13150:	mov	r1, sl
   13154:	bl	11520 <strcmp@plt>
   13158:	cmp	r0, #0
   1315c:	moveq	r4, r6
   13160:	ldr	r6, [r6, #28]
   13164:	cmp	r6, #0
   13168:	bne	1314c <__assert_fail@plt+0x1860>
   1316c:	cmp	r4, #0
   13170:	beq	131d8 <__assert_fail@plt+0x18ec>
   13174:	ldr	r0, [r4]
   13178:	bl	1185c <canonicalize_file_name@plt>
   1317c:	mov	r6, r0
   13180:	cmp	r0, #0
   13184:	beq	13194 <__assert_fail@plt+0x18a8>
   13188:	ldrb	r0, [r6]
   1318c:	cmp	r0, #47	; 0x2f
   13190:	beq	131a8 <__assert_fail@plt+0x18bc>
   13194:	mov	r0, r6
   13198:	bl	16030 <__assert_fail@plt+0x4744>
   1319c:	ldr	r0, [r4]
   131a0:	bl	1c784 <__assert_fail@plt+0xae98>
   131a4:	mov	r6, r0
   131a8:	mov	r0, r6
   131ac:	mov	r1, r7
   131b0:	bl	11520 <strcmp@plt>
   131b4:	ldr	sl, [r9, #4]
   131b8:	mov	r4, r0
   131bc:	mov	r0, sl
   131c0:	bl	11718 <strlen@plt>
   131c4:	cmp	r4, #0
   131c8:	beq	130f0 <__assert_fail@plt+0x1804>
   131cc:	mov	r0, #1
   131d0:	str	r0, [sp, #40]	; 0x28
   131d4:	b	13268 <__assert_fail@plt+0x197c>
   131d8:	mov	r0, sl
   131dc:	bl	11718 <strlen@plt>
   131e0:	mov	r7, r0
   131e4:	mov	r6, #0
   131e8:	mov	r0, #0
   131ec:	str	r0, [sp, #40]	; 0x28
   131f0:	ldr	r0, [sp, #48]	; 0x30
   131f4:	cmp	r7, r0
   131f8:	bcc	1320c <__assert_fail@plt+0x1920>
   131fc:	ldr	r0, [sp, #56]	; 0x38
   13200:	eor	r0, r0, #1
   13204:	tst	r0, #1
   13208:	beq	13268 <__assert_fail@plt+0x197c>
   1320c:	ldr	r0, [sp, #48]	; 0x30
   13210:	mov	r4, #0
   13214:	mov	r1, sl
   13218:	add	r2, sp, #64	; 0x40
   1321c:	cmp	r7, r0
   13220:	mov	r0, #3
   13224:	movwcc	r4, #1
   13228:	bl	11898 <__xstat64@plt>
   1322c:	ldr	r2, [sp, #56]	; 0x38
   13230:	clz	r1, r0
   13234:	cmp	r0, #0
   13238:	lsr	r1, r1, #5
   1323c:	orr	r2, r2, r1
   13240:	str	r2, [sp, #56]	; 0x38
   13244:	beq	13258 <__assert_fail@plt+0x196c>
   13248:	ldr	r0, [sp, #56]	; 0x38
   1324c:	eor	r0, r0, #1
   13250:	ands	r0, r4, r0
   13254:	beq	13268 <__assert_fail@plt+0x197c>
   13258:	cmp	r7, #1
   1325c:	str	r9, [sp, #28]
   13260:	str	r7, [sp, #48]	; 0x30
   13264:	beq	13020 <__assert_fail@plt+0x1734>
   13268:	mov	r0, r6
   1326c:	bl	16030 <__assert_fail@plt+0x4744>
   13270:	mov	r0, r5
   13274:	bl	16030 <__assert_fail@plt+0x4744>
   13278:	ldr	r9, [r9, #28]
   1327c:	cmp	r9, #0
   13280:	bne	130f8 <__assert_fail@plt+0x180c>
   13284:	ldr	r0, [sp, #20]
   13288:	bl	16030 <__assert_fail@plt+0x4744>
   1328c:	ldr	r9, [sp, #28]
   13290:	ldr	r8, [sp, #32]
   13294:	cmp	r9, #0
   13298:	beq	132f4 <__assert_fail@plt+0x1a08>
   1329c:	ldr	r2, [sp, #36]	; 0x24
   132a0:	ldrb	r0, [r9, #24]
   132a4:	ldr	r4, [r9]
   132a8:	ldr	r3, [r9, #4]
   132ac:	ldr	r1, [r9, #12]
   132b0:	mov	r7, #0
   132b4:	str	r7, [sp, #16]
   132b8:	str	r7, [sp, #12]
   132bc:	str	r1, [sp]
   132c0:	ubfx	r1, r0, #1, #1
   132c4:	and	r0, r0, #1
   132c8:	str	r1, [sp, #8]
   132cc:	str	r0, [sp, #4]
   132d0:	mov	r1, r3
   132d4:	mov	r0, r4
   132d8:	mov	r3, #0
   132dc:	bl	14160 <__assert_fail@plt+0x2874>
   132e0:	b	136a8 <__assert_fail@plt+0x1dbc>
   132e4:	mov	r0, r1
   132e8:	bl	16030 <__assert_fail@plt+0x4744>
   132ec:	ldr	r8, [sp, #32]
   132f0:	b	13350 <__assert_fail@plt+0x1a64>
   132f4:	ldr	r0, [sp, #40]	; 0x28
   132f8:	ldr	r5, [sp, #36]	; 0x24
   132fc:	tst	r0, #1
   13300:	beq	13350 <__assert_fail@plt+0x1a64>
   13304:	movw	r1, #1470	; 0x5be
   13308:	mov	r0, #0
   1330c:	mov	r2, #5
   13310:	movt	r1, #2
   13314:	bl	115b0 <dcgettext@plt>
   13318:	mov	r4, r0
   1331c:	mov	r0, #4
   13320:	mov	r1, r5
   13324:	bl	1b438 <__assert_fail@plt+0x9b4c>
   13328:	mov	r3, r0
   1332c:	mov	r0, #0
   13330:	mov	r1, #0
   13334:	mov	r2, r4
   13338:	bl	1167c <error@plt>
   1333c:	movw	r7, #9024	; 0x2340
   13340:	mov	r0, #1
   13344:	movt	r7, #3
   13348:	strb	r0, [r7, #4]
   1334c:	b	136b0 <__assert_fail@plt+0x1dc4>
   13350:	mov	r0, r5
   13354:	bl	1185c <canonicalize_file_name@plt>
   13358:	mov	sl, r0
   1335c:	cmp	r0, #0
   13360:	beq	134a0 <__assert_fail@plt+0x1bb4>
   13364:	ldrb	r0, [sl]
   13368:	cmp	r0, #47	; 0x2f
   1336c:	bne	134a0 <__assert_fail@plt+0x1bb4>
   13370:	mov	r0, sl
   13374:	str	r8, [sp, #32]
   13378:	bl	11718 <strlen@plt>
   1337c:	mov	r8, r0
   13380:	movw	r0, #9024	; 0x2340
   13384:	movt	r0, #3
   13388:	ldr	r6, [r0, #24]
   1338c:	cmp	r6, #0
   13390:	beq	13010 <__assert_fail@plt+0x1724>
   13394:	mov	r9, #0
   13398:	mov	r5, #0
   1339c:	ldr	r0, [r6, #12]
   133a0:	movw	r1, #1519	; 0x5ef
   133a4:	movt	r1, #2
   133a8:	bl	11520 <strcmp@plt>
   133ac:	cmp	r0, #0
   133b0:	beq	133f0 <__assert_fail@plt+0x1b04>
   133b4:	cmp	r9, #0
   133b8:	beq	133d4 <__assert_fail@plt+0x1ae8>
   133bc:	ldrb	r0, [r9, #24]
   133c0:	tst	r0, #1
   133c4:	bne	133d4 <__assert_fail@plt+0x1ae8>
   133c8:	ldrb	r0, [r6, #24]
   133cc:	tst	r0, #1
   133d0:	bne	133f0 <__assert_fail@plt+0x1b04>
   133d4:	ldr	r4, [r6, #4]
   133d8:	mov	r0, r4
   133dc:	bl	11718 <strlen@plt>
   133e0:	cmp	r5, r0
   133e4:	movls	r7, r0
   133e8:	cmpls	r0, r8
   133ec:	bls	13400 <__assert_fail@plt+0x1b14>
   133f0:	ldr	r6, [r6, #28]
   133f4:	cmp	r6, #0
   133f8:	bne	1339c <__assert_fail@plt+0x1ab0>
   133fc:	b	13444 <__assert_fail@plt+0x1b58>
   13400:	cmp	r7, #1
   13404:	beq	13430 <__assert_fail@plt+0x1b44>
   13408:	cmp	r7, r8
   1340c:	ldrbne	r0, [sl, r7]
   13410:	cmpne	r0, #47	; 0x2f
   13414:	bne	133f0 <__assert_fail@plt+0x1b04>
   13418:	mov	r0, r4
   1341c:	mov	r1, sl
   13420:	mov	r2, r7
   13424:	bl	118b0 <strncmp@plt>
   13428:	cmp	r0, #0
   1342c:	bne	133f0 <__assert_fail@plt+0x1b04>
   13430:	mov	r5, r7
   13434:	mov	r9, r6
   13438:	ldr	r6, [r6, #28]
   1343c:	cmp	r6, #0
   13440:	bne	1339c <__assert_fail@plt+0x1ab0>
   13444:	mov	r0, sl
   13448:	bl	16030 <__assert_fail@plt+0x4744>
   1344c:	ldr	r8, [sp, #32]
   13450:	ldr	r5, [sp, #36]	; 0x24
   13454:	cmp	r9, #0
   13458:	mvn	sl, #0
   1345c:	mvn	r6, #1
   13460:	beq	134b0 <__assert_fail@plt+0x1bc4>
   13464:	ldr	r1, [r9, #4]
   13468:	mov	r0, #3
   1346c:	add	r2, sp, #64	; 0x40
   13470:	bl	11898 <__xstat64@plt>
   13474:	cmp	r0, #0
   13478:	bne	134b0 <__assert_fail@plt+0x1bc4>
   1347c:	ldr	r0, [sp, #60]	; 0x3c
   13480:	ldr	r2, [sp, #64]	; 0x40
   13484:	ldr	r3, [sp, #68]	; 0x44
   13488:	ldrd	r0, [r0]
   1348c:	eor	r1, r3, r1
   13490:	eor	r0, r2, r0
   13494:	orrs	r0, r0, r1
   13498:	bne	134b0 <__assert_fail@plt+0x1bc4>
   1349c:	b	13618 <__assert_fail@plt+0x1d2c>
   134a0:	mov	r0, sl
   134a4:	bl	16030 <__assert_fail@plt+0x4744>
   134a8:	mvn	sl, #0
   134ac:	mvn	r6, #1
   134b0:	movw	r0, #9024	; 0x2340
   134b4:	movt	r0, #3
   134b8:	ldr	r4, [r0, #24]
   134bc:	cmp	r4, #0
   134c0:	beq	1365c <__assert_fail@plt+0x1d70>
   134c4:	mov	r9, #0
   134c8:	mov	r7, r4
   134cc:	adds	r1, r6, #1
   134d0:	mov	r5, r9
   134d4:	ldr	r0, [r7, #16]!
   134d8:	adc	r3, sl, #0
   134dc:	eor	r2, r0, r1
   134e0:	ldr	r1, [r7, #4]
   134e4:	eor	r3, r1, r3
   134e8:	orrs	r2, r2, r3
   134ec:	bne	13570 <__assert_fail@plt+0x1c84>
   134f0:	ldr	r1, [r4, #4]
   134f4:	mov	r0, #3
   134f8:	add	r2, sp, #64	; 0x40
   134fc:	bl	11898 <__xstat64@plt>
   13500:	cmp	r0, #0
   13504:	beq	13564 <__assert_fail@plt+0x1c78>
   13508:	bl	11748 <__errno_location@plt>
   1350c:	ldr	r0, [r0]
   13510:	mvn	r1, #0
   13514:	cmp	r0, #5
   13518:	mvn	r0, #1
   1351c:	bne	1356c <__assert_fail@plt+0x1c80>
   13520:	ldr	r2, [r4, #4]
   13524:	mov	r0, #0
   13528:	mov	r1, #3
   1352c:	bl	1b6b4 <__assert_fail@plt+0x9dc8>
   13530:	movw	r2, #4076	; 0xfec
   13534:	mov	r3, r0
   13538:	mov	r0, #0
   1353c:	mov	r1, #5
   13540:	movt	r2, #2
   13544:	bl	1167c <error@plt>
   13548:	movw	r0, #9024	; 0x2340
   1354c:	mov	r1, #1
   13550:	movt	r0, #3
   13554:	strb	r1, [r0, #4]
   13558:	mvn	r0, #1
   1355c:	mvn	r1, #0
   13560:	b	1356c <__assert_fail@plt+0x1c80>
   13564:	ldr	r0, [sp, #64]	; 0x40
   13568:	ldr	r1, [sp, #68]	; 0x44
   1356c:	strd	r0, [r7]
   13570:	ldr	r2, [sp, #60]	; 0x3c
   13574:	ldrd	r2, [r2]
   13578:	eor	r1, r3, r1
   1357c:	eor	r0, r2, r0
   13580:	orrs	r0, r0, r1
   13584:	bne	135fc <__assert_fail@plt+0x1d10>
   13588:	ldr	r0, [r4, #12]
   1358c:	movw	r1, #1519	; 0x5ef
   13590:	movt	r1, #2
   13594:	bl	11520 <strcmp@plt>
   13598:	cmp	r0, #0
   1359c:	beq	135fc <__assert_fail@plt+0x1d10>
   135a0:	cmp	r5, #0
   135a4:	beq	135c0 <__assert_fail@plt+0x1cd4>
   135a8:	ldrb	r0, [r5, #24]
   135ac:	tst	r0, #1
   135b0:	bne	135c0 <__assert_fail@plt+0x1cd4>
   135b4:	ldrb	r0, [r4, #24]
   135b8:	tst	r0, #1
   135bc:	bne	135fc <__assert_fail@plt+0x1d10>
   135c0:	ldr	r1, [r4, #4]
   135c4:	mov	r0, #3
   135c8:	add	r2, sp, #64	; 0x40
   135cc:	bl	11898 <__xstat64@plt>
   135d0:	cmp	r0, #0
   135d4:	bne	135f8 <__assert_fail@plt+0x1d0c>
   135d8:	ldrd	r0, [r7]
   135dc:	ldr	r2, [sp, #64]	; 0x40
   135e0:	ldr	r3, [sp, #68]	; 0x44
   135e4:	mov	r9, r4
   135e8:	eor	r1, r3, r1
   135ec:	eor	r0, r2, r0
   135f0:	orrs	r0, r0, r1
   135f4:	beq	13600 <__assert_fail@plt+0x1d14>
   135f8:	stm	r7, {r6, sl}
   135fc:	mov	r9, r5
   13600:	ldr	r4, [r4, #28]
   13604:	cmp	r4, #0
   13608:	bne	134c8 <__assert_fail@plt+0x1bdc>
   1360c:	ldr	r5, [sp, #36]	; 0x24
   13610:	cmp	r9, #0
   13614:	beq	1365c <__assert_fail@plt+0x1d70>
   13618:	ldrb	r0, [r9, #24]
   1361c:	ldr	r1, [r9, #12]
   13620:	ldrd	r2, [r9]
   13624:	mov	r7, #0
   13628:	str	r7, [sp, #16]
   1362c:	str	r7, [sp, #12]
   13630:	str	r1, [sp]
   13634:	ubfx	r1, r0, #1, #1
   13638:	and	r0, r0, #1
   1363c:	str	r1, [sp, #8]
   13640:	str	r0, [sp, #4]
   13644:	mov	r0, r2
   13648:	mov	r1, r3
   1364c:	mov	r2, r5
   13650:	mov	r3, r5
   13654:	bl	14160 <__assert_fail@plt+0x2874>
   13658:	b	136a8 <__assert_fail@plt+0x1dbc>
   1365c:	ldr	r1, [sp, #60]	; 0x3c
   13660:	mov	r0, r5
   13664:	bl	14f80 <__assert_fail@plt+0x3694>
   13668:	cmp	r0, #0
   1366c:	beq	136a8 <__assert_fail@plt+0x1dbc>
   13670:	mov	r4, r0
   13674:	mov	r0, #0
   13678:	mov	r2, r5
   1367c:	mov	r3, #0
   13680:	str	r0, [sp]
   13684:	str	r0, [sp, #4]
   13688:	str	r0, [sp, #8]
   1368c:	str	r0, [sp, #12]
   13690:	str	r0, [sp, #16]
   13694:	mov	r0, #0
   13698:	mov	r1, r4
   1369c:	bl	14160 <__assert_fail@plt+0x2874>
   136a0:	mov	r0, r4
   136a4:	bl	16030 <__assert_fail@plt+0x4744>
   136a8:	movw	r7, #9024	; 0x2340
   136ac:	movt	r7, #3
   136b0:	ldr	r0, [sp, #52]	; 0x34
   136b4:	add	r8, r8, #1
   136b8:	cmp	r8, r0
   136bc:	bne	13040 <__assert_fail@plt+0x1754>
   136c0:	b	13b1c <__assert_fail@plt+0x2230>
   136c4:	ldrb	r0, [r7]
   136c8:	ldr	r1, [r7, #24]
   136cc:	str	r0, [sp, #60]	; 0x3c
   136d0:	mov	r0, #0
   136d4:	cmp	r1, #0
   136d8:	beq	136ec <__assert_fail@plt+0x1e00>
   136dc:	ldr	r1, [r1, #28]
   136e0:	add	r0, r0, #1
   136e4:	cmp	r1, #0
   136e8:	bne	136dc <__assert_fail@plt+0x1df0>
   136ec:	movw	r1, #20348	; 0x4f7c
   136f0:	movw	r2, #20284	; 0x4f3c
   136f4:	movw	r3, #20316	; 0x4f5c
   136f8:	mov	sl, #0
   136fc:	movt	r1, #1
   13700:	movt	r2, #1
   13704:	movt	r3, #1
   13708:	str	r1, [sp]
   1370c:	mov	r1, #0
   13710:	bl	16610 <__assert_fail@plt+0x4d24>
   13714:	movw	r7, #9024	; 0x2340
   13718:	cmp	r0, #0
   1371c:	movt	r7, #3
   13720:	str	r0, [r7, #44]	; 0x2c
   13724:	beq	13cec <__assert_fail@plt+0x2400>
   13728:	ldr	r8, [r7, #24]
   1372c:	cmp	r8, #0
   13730:	beq	13a68 <__assert_fail@plt+0x217c>
   13734:	mov	sl, #0
   13738:	b	13898 <__assert_fail@plt+0x1fac>
   1373c:	mov	r0, #2
   13740:	str	r0, [r2, #20]
   13744:	ldr	r6, [r2, #8]
   13748:	cmp	r6, #0
   1374c:	bne	12220 <__assert_fail@plt+0x934>
   13750:	b	122b4 <__assert_fail@plt+0x9c8>
   13754:	movw	r1, #9024	; 0x2340
   13758:	movt	r1, #3
   1375c:	ldrb	r0, [r1, #5]
   13760:	cmp	r0, #0
   13764:	bne	1377c <__assert_fail@plt+0x1e90>
   13768:	ldrb	r0, [r8, #24]
   1376c:	tst	r0, #2
   13770:	ldrbne	r0, [r5, #24]
   13774:	tstne	r0, #2
   13778:	bne	13880 <__assert_fail@plt+0x1f94>
   1377c:	ldr	r6, [r8]
   13780:	mov	r1, #47	; 0x2f
   13784:	mov	r0, r6
   13788:	bl	11724 <strchr@plt>
   1378c:	cmp	r0, #0
   13790:	beq	137d8 <__assert_fail@plt+0x1eec>
   13794:	ldr	r0, [sp, #56]	; 0x38
   13798:	ldr	r1, [sp, #52]	; 0x34
   1379c:	str	r7, [sp, #56]	; 0x38
   137a0:	cmp	r0, r1
   137a4:	mov	r0, #0
   137a8:	mov	r1, #47	; 0x2f
   137ac:	movwls	r0, #1
   137b0:	orr	r7, r4, r0
   137b4:	ldr	r4, [r5]
   137b8:	mov	r0, r4
   137bc:	bl	11724 <strchr@plt>
   137c0:	cmp	r7, #1
   137c4:	ldr	r7, [sp, #56]	; 0x38
   137c8:	bne	1382c <__assert_fail@plt+0x1f40>
   137cc:	cmp	r0, #0
   137d0:	bne	137fc <__assert_fail@plt+0x1f10>
   137d4:	b	1382c <__assert_fail@plt+0x1f40>
   137d8:	ldr	r0, [sp, #56]	; 0x38
   137dc:	ldr	r1, [sp, #52]	; 0x34
   137e0:	cmp	r0, r1
   137e4:	mov	r0, #0
   137e8:	movwls	r0, #1
   137ec:	orr	r0, r4, r0
   137f0:	cmp	r0, #1
   137f4:	bne	13848 <__assert_fail@plt+0x1f5c>
   137f8:	ldr	r4, [r5]
   137fc:	mov	r0, r4
   13800:	mov	r1, r6
   13804:	bl	11520 <strcmp@plt>
   13808:	cmp	r0, #0
   1380c:	mov	r0, r8
   13810:	beq	13858 <__assert_fail@plt+0x1f6c>
   13814:	ldr	r1, [sp, #48]	; 0x30
   13818:	mov	r0, r9
   1381c:	bl	11520 <strcmp@plt>
   13820:	cmp	r0, #0
   13824:	mov	r0, r8
   13828:	bne	13858 <__assert_fail@plt+0x1f6c>
   1382c:	str	r8, [r7, #8]
   13830:	mov	r0, r5
   13834:	ldr	r1, [sp, #60]	; 0x3c
   13838:	ldr	r8, [r8, #28]
   1383c:	cmp	r1, #0
   13840:	beq	13868 <__assert_fail@plt+0x1f7c>
   13844:	b	13a58 <__assert_fail@plt+0x216c>
   13848:	cmp	r5, #0
   1384c:	mov	r0, r5
   13850:	str	r8, [r7, #8]
   13854:	beq	13a18 <__assert_fail@plt+0x212c>
   13858:	ldr	r1, [sp, #60]	; 0x3c
   1385c:	ldr	r8, [r8, #28]
   13860:	cmp	r1, #0
   13864:	bne	13a58 <__assert_fail@plt+0x216c>
   13868:	bl	199a0 <__assert_fail@plt+0x80b4>
   1386c:	movw	r7, #9024	; 0x2340
   13870:	cmp	r8, #0
   13874:	movt	r7, #3
   13878:	bne	13898 <__assert_fail@plt+0x1fac>
   1387c:	b	13a68 <__assert_fail@plt+0x217c>
   13880:	ldr	r1, [r8]
   13884:	ldr	r0, [r5]
   13888:	bl	11520 <strcmp@plt>
   1388c:	cmp	r0, #0
   13890:	bne	13a18 <__assert_fail@plt+0x212c>
   13894:	b	1377c <__assert_fail@plt+0x1e90>
   13898:	ldrb	r0, [r8, #24]
   1389c:	tst	r0, #2
   138a0:	ldrbne	r1, [r7, #6]
   138a4:	cmpne	r1, #0
   138a8:	bne	13a0c <__assert_fail@plt+0x2120>
   138ac:	tst	r0, #1
   138b0:	beq	138cc <__assert_fail@plt+0x1fe0>
   138b4:	ldrb	r0, [r7]
   138b8:	cmp	r0, #0
   138bc:	bne	138cc <__assert_fail@plt+0x1fe0>
   138c0:	ldrb	r0, [r7, #1]
   138c4:	cmp	r0, #1
   138c8:	bne	13a0c <__assert_fail@plt+0x2120>
   138cc:	ldr	r4, [r8, #12]
   138d0:	cmp	r4, #0
   138d4:	ldrne	r5, [r7, #8]
   138d8:	cmpne	r5, #0
   138dc:	bne	139e4 <__assert_fail@plt+0x20f8>
   138e0:	cmp	r4, #0
   138e4:	beq	13914 <__assert_fail@plt+0x2028>
   138e8:	ldr	r5, [r7, #12]
   138ec:	cmp	r5, #0
   138f0:	beq	13914 <__assert_fail@plt+0x2028>
   138f4:	ldr	r1, [r5]
   138f8:	mov	r0, r4
   138fc:	bl	11520 <strcmp@plt>
   13900:	cmp	r0, #0
   13904:	beq	13a0c <__assert_fail@plt+0x2120>
   13908:	ldr	r5, [r5, #4]
   1390c:	cmp	r5, #0
   13910:	bne	138f4 <__assert_fail@plt+0x2008>
   13914:	ldr	r1, [r8, #4]
   13918:	mov	r0, #3
   1391c:	add	r2, sp, #64	; 0x40
   13920:	bl	11898 <__xstat64@plt>
   13924:	movw	r1, #9024	; 0x2340
   13928:	cmn	r0, #1
   1392c:	movt	r1, #3
   13930:	beq	13a0c <__assert_fail@plt+0x2120>
   13934:	ldr	r0, [r1, #44]	; 0x2c
   13938:	cmp	r0, #0
   1393c:	beq	13a18 <__assert_fail@plt+0x212c>
   13940:	ldr	r1, [sp, #64]	; 0x40
   13944:	ldr	r2, [sp, #68]	; 0x44
   13948:	str	r1, [fp, #-56]	; 0xffffffc8
   1394c:	sub	r1, fp, #56	; 0x38
   13950:	str	r2, [fp, #-52]	; 0xffffffcc
   13954:	bl	16348 <__assert_fail@plt+0x4a5c>
   13958:	cmp	r0, #0
   1395c:	ldrne	r7, [r0, #16]
   13960:	cmpne	r7, #0
   13964:	beq	13a18 <__assert_fail@plt+0x212c>
   13968:	ldr	r5, [r7, #8]
   1396c:	ldr	r0, [r5, #4]
   13970:	str	r0, [sp, #48]	; 0x30
   13974:	bl	11718 <strlen@plt>
   13978:	ldr	r9, [r8, #4]
   1397c:	str	r0, [sp, #56]	; 0x38
   13980:	mov	r0, r9
   13984:	bl	11718 <strlen@plt>
   13988:	str	r0, [sp, #52]	; 0x34
   1398c:	ldr	r0, [r5, #8]
   13990:	mov	r4, #0
   13994:	cmp	r0, #0
   13998:	beq	13754 <__assert_fail@plt+0x1e68>
   1399c:	ldr	r6, [r8, #8]
   139a0:	movw	r1, #9024	; 0x2340
   139a4:	movt	r1, #3
   139a8:	cmp	r6, #0
   139ac:	beq	139d4 <__assert_fail@plt+0x20e8>
   139b0:	bl	11718 <strlen@plt>
   139b4:	mov	r4, r0
   139b8:	mov	r0, r6
   139bc:	bl	11718 <strlen@plt>
   139c0:	movw	r1, #9024	; 0x2340
   139c4:	cmp	r4, r0
   139c8:	mov	r4, #0
   139cc:	movt	r1, #3
   139d0:	movwcc	r4, #1
   139d4:	ldrb	r0, [r1, #5]
   139d8:	cmp	r0, #0
   139dc:	beq	13768 <__assert_fail@plt+0x1e7c>
   139e0:	b	1377c <__assert_fail@plt+0x1e90>
   139e4:	ldr	r1, [r5]
   139e8:	mov	r0, r4
   139ec:	bl	11520 <strcmp@plt>
   139f0:	movw	r7, #9024	; 0x2340
   139f4:	cmp	r0, #0
   139f8:	movt	r7, #3
   139fc:	beq	138e0 <__assert_fail@plt+0x1ff4>
   13a00:	ldr	r5, [r5, #4]
   13a04:	cmp	r5, #0
   13a08:	bne	139e4 <__assert_fail@plt+0x20f8>
   13a0c:	ldrd	r0, [r8, #16]
   13a10:	str	r1, [sp, #68]	; 0x44
   13a14:	str	r0, [sp, #64]	; 0x40
   13a18:	mov	r0, #24
   13a1c:	bl	1c264 <__assert_fail@plt+0xa978>
   13a20:	mov	r4, r0
   13a24:	ldr	r0, [sp, #64]	; 0x40
   13a28:	ldr	r1, [sp, #68]	; 0x44
   13a2c:	stm	r4, {r0, r1, r8, sl}
   13a30:	movw	r0, #9024	; 0x2340
   13a34:	mov	r1, r4
   13a38:	movt	r0, #3
   13a3c:	ldr	r0, [r0, #44]	; 0x2c
   13a40:	bl	17248 <__assert_fail@plt+0x595c>
   13a44:	cmp	r0, #0
   13a48:	beq	13cec <__assert_fail@plt+0x2400>
   13a4c:	str	r4, [r0, #16]
   13a50:	mov	sl, r4
   13a54:	ldr	r8, [r8, #28]
   13a58:	movw	r7, #9024	; 0x2340
   13a5c:	cmp	r8, #0
   13a60:	movt	r7, #3
   13a64:	bne	13898 <__assert_fail@plt+0x1fac>
   13a68:	ldr	r0, [sp, #60]	; 0x3c
   13a6c:	cmp	r0, #0
   13a70:	bne	13ab8 <__assert_fail@plt+0x21cc>
   13a74:	mov	r0, #0
   13a78:	cmp	sl, #0
   13a7c:	str	r0, [r7, #24]
   13a80:	beq	13aa0 <__assert_fail@plt+0x21b4>
   13a84:	ldr	r1, [sl, #8]
   13a88:	str	r0, [r1, #28]
   13a8c:	mov	r0, r1
   13a90:	ldr	sl, [sl, #12]
   13a94:	cmp	sl, #0
   13a98:	bne	13a84 <__assert_fail@plt+0x2198>
   13a9c:	str	r1, [r7, #24]
   13aa0:	ldr	r0, [r7, #44]	; 0x2c
   13aa4:	bl	1692c <__assert_fail@plt+0x5040>
   13aa8:	movw	r7, #9024	; 0x2340
   13aac:	mov	r0, #0
   13ab0:	movt	r7, #3
   13ab4:	str	r0, [r7, #44]	; 0x2c
   13ab8:	ldr	r4, [r7, #24]
   13abc:	cmp	r4, #0
   13ac0:	beq	13b1c <__assert_fail@plt+0x2230>
   13ac4:	movw	r7, #9024	; 0x2340
   13ac8:	mov	r5, #1
   13acc:	mov	r6, #0
   13ad0:	movt	r7, #3
   13ad4:	ldrb	r0, [r4, #24]
   13ad8:	ldr	r1, [r4, #12]
   13adc:	ldrd	r2, [r4]
   13ae0:	str	r5, [sp, #16]
   13ae4:	str	r6, [sp, #12]
   13ae8:	str	r1, [sp]
   13aec:	ubfx	r1, r0, #1, #1
   13af0:	and	r0, r0, #1
   13af4:	str	r1, [sp, #8]
   13af8:	str	r0, [sp, #4]
   13afc:	mov	r0, r2
   13b00:	mov	r1, r3
   13b04:	mov	r2, #0
   13b08:	mov	r3, #0
   13b0c:	bl	14160 <__assert_fail@plt+0x2874>
   13b10:	ldr	r4, [r4, #28]
   13b14:	cmp	r4, #0
   13b18:	bne	13ad4 <__assert_fail@plt+0x21e8>
   13b1c:	ldrb	r0, [r7, #3]
   13b20:	cmp	r0, #1
   13b24:	bne	13ccc <__assert_fail@plt+0x23e0>
   13b28:	ldrb	r0, [r7, #5]
   13b2c:	cmp	r0, #1
   13b30:	bne	13b88 <__assert_fail@plt+0x229c>
   13b34:	movw	r0, #8568	; 0x2178
   13b38:	add	r1, r7, #56	; 0x38
   13b3c:	mov	r3, #0
   13b40:	movt	r0, #3
   13b44:	str	r1, [sp, #12]
   13b48:	movw	r1, #3742	; 0xe9e
   13b4c:	ldrb	r2, [r0, #24]
   13b50:	mov	r0, #0
   13b54:	movt	r1, #2
   13b58:	str	r0, [sp]
   13b5c:	str	r0, [sp, #4]
   13b60:	str	r0, [sp, #8]
   13b64:	str	r0, [sp, #16]
   13b68:	movw	r0, #1259	; 0x4eb
   13b6c:	movt	r0, #2
   13b70:	cmp	r2, #0
   13b74:	mov	r2, #0
   13b78:	moveq	r1, r0
   13b7c:	bl	14160 <__assert_fail@plt+0x2874>
   13b80:	movw	r7, #9024	; 0x2340
   13b84:	movt	r7, #3
   13b88:	ldr	r0, [r7, #40]	; 0x28
   13b8c:	cmp	r0, #0
   13b90:	beq	13cd8 <__assert_fail@plt+0x23ec>
   13b94:	movw	r8, #9012	; 0x2334
   13b98:	mov	r6, #0
   13b9c:	add	sl, sp, #64	; 0x40
   13ba0:	mov	r9, #32
   13ba4:	movt	r8, #3
   13ba8:	ldr	r1, [r7, #28]
   13bac:	cmp	r1, #0
   13bb0:	beq	13c70 <__assert_fail@plt+0x2384>
   13bb4:	mov	r4, #0
   13bb8:	b	13bd4 <__assert_fail@plt+0x22e8>
   13bbc:	mov	r1, #32
   13bc0:	bl	117e4 <__overflow@plt>
   13bc4:	movw	r7, #9024	; 0x2340
   13bc8:	movt	r7, #3
   13bcc:	ldr	r1, [r7, #28]
   13bd0:	b	13c08 <__assert_fail@plt+0x231c>
   13bd4:	ldr	r0, [r7, #36]	; 0x24
   13bd8:	cmp	r4, #0
   13bdc:	ldr	r0, [r0, r6, lsl #2]
   13be0:	ldr	r5, [r0, r4, lsl #2]
   13be4:	beq	13c08 <__assert_fail@plt+0x231c>
   13be8:	ldr	r0, [r8]
   13bec:	ldr	r2, [r0, #20]
   13bf0:	ldr	r3, [r0, #24]
   13bf4:	cmp	r2, r3
   13bf8:	bcs	13bbc <__assert_fail@plt+0x22d0>
   13bfc:	add	r3, r2, #1
   13c00:	str	r3, [r0, #20]
   13c04:	strb	r9, [r2]
   13c08:	ldr	r0, [r7, #32]
   13c0c:	ldr	r0, [r0, r4, lsl #2]
   13c10:	ldr	r3, [r0, #16]
   13c14:	ldr	r2, [r0, #20]
   13c18:	sub	r0, r1, #1
   13c1c:	mov	r1, sl
   13c20:	sub	r0, r4, r0
   13c24:	clz	r0, r0
   13c28:	lsr	r0, r0, #5
   13c2c:	str	r3, [sp, #64]	; 0x40
   13c30:	lsl	r3, r0, #3
   13c34:	mov	r0, r5
   13c38:	bl	18608 <__assert_fail@plt+0x6d1c>
   13c3c:	cmp	r0, #0
   13c40:	mov	r5, r0
   13c44:	ldr	r1, [r8]
   13c48:	ldreq	r0, [r7, #36]	; 0x24
   13c4c:	ldreq	r0, [r0, r6, lsl #2]
   13c50:	ldreq	r0, [r0, r4, lsl #2]
   13c54:	bl	114f0 <fputs_unlocked@plt>
   13c58:	mov	r0, r5
   13c5c:	bl	16030 <__assert_fail@plt+0x4744>
   13c60:	ldr	r1, [r7, #28]
   13c64:	add	r4, r4, #1
   13c68:	cmp	r4, r1
   13c6c:	bcc	13bd4 <__assert_fail@plt+0x22e8>
   13c70:	ldr	r0, [r8]
   13c74:	ldr	r1, [r0, #20]
   13c78:	ldr	r2, [r0, #24]
   13c7c:	cmp	r1, r2
   13c80:	bcs	13ca8 <__assert_fail@plt+0x23bc>
   13c84:	add	r2, r1, #1
   13c88:	str	r2, [r0, #20]
   13c8c:	mov	r0, #10
   13c90:	strb	r0, [r1]
   13c94:	ldr	r0, [r7, #40]	; 0x28
   13c98:	add	r6, r6, #1
   13c9c:	cmp	r6, r0
   13ca0:	bcc	13ba8 <__assert_fail@plt+0x22bc>
   13ca4:	b	13cd8 <__assert_fail@plt+0x23ec>
   13ca8:	mov	r1, #10
   13cac:	bl	117e4 <__overflow@plt>
   13cb0:	movw	r7, #9024	; 0x2340
   13cb4:	movt	r7, #3
   13cb8:	ldr	r0, [r7, #40]	; 0x28
   13cbc:	add	r6, r6, #1
   13cc0:	cmp	r6, r0
   13cc4:	bcc	13ba8 <__assert_fail@plt+0x22bc>
   13cc8:	b	13cd8 <__assert_fail@plt+0x23ec>
   13ccc:	ldrb	r0, [r7, #4]
   13cd0:	cmp	r0, #0
   13cd4:	beq	13dec <__assert_fail@plt+0x2500>
   13cd8:	ldrb	r0, [r7, #4]
   13cdc:	sub	sp, fp, #28
   13ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ce4:	mov	r0, #1
   13ce8:	bl	119f0 <__assert_fail@plt+0x104>
   13cec:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   13cf0:	movw	r0, #8908	; 0x22cc
   13cf4:	movw	r2, #65447	; 0xffa7
   13cf8:	movw	r7, #65431	; 0xff97
   13cfc:	movw	r6, #65413	; 0xff85
   13d00:	mov	r1, #0
   13d04:	movt	r0, #3
   13d08:	movt	r2, #1
   13d0c:	movt	r7, #1
   13d10:	movt	r6, #1
   13d14:	ldr	r3, [r0]
   13d18:	movw	r0, #9012	; 0x2334
   13d1c:	movt	r0, #3
   13d20:	ldr	r0, [r0]
   13d24:	stm	sp, {r6, r7}
   13d28:	str	r2, [sp, #8]
   13d2c:	movw	r2, #65399	; 0xff77
   13d30:	str	r1, [sp, #12]
   13d34:	movw	r1, #65294	; 0xff0e
   13d38:	movt	r1, #1
   13d3c:	movt	r2, #1
   13d40:	bl	1c030 <__assert_fail@plt+0xa744>
   13d44:	mov	r0, #0
   13d48:	bl	1170c <exit@plt>
   13d4c:	mov	r0, #0
   13d50:	bl	119f0 <__assert_fail@plt+0x104>
   13d54:	movw	r0, #1161	; 0x489
   13d58:	movw	r1, #1115	; 0x45b
   13d5c:	movw	r3, #1175	; 0x497
   13d60:	movw	r2, #425	; 0x1a9
   13d64:	movt	r0, #2
   13d68:	movt	r1, #2
   13d6c:	movt	r3, #2
   13d70:	bl	118ec <__assert_fail@plt>
   13d74:	movw	r0, #65384	; 0xff68
   13d78:	movw	r3, #65393	; 0xff71
   13d7c:	movt	r0, #1
   13d80:	movt	r3, #1
   13d84:	b	13dac <__assert_fail@plt+0x24c0>
   13d88:	movw	r0, #65384	; 0xff68
   13d8c:	movw	r3, #65381	; 0xff65
   13d90:	movt	r0, #1
   13d94:	movt	r3, #1
   13d98:	b	13dac <__assert_fail@plt+0x24c0>
   13d9c:	movw	r0, #65384	; 0xff68
   13da0:	movw	r3, #65396	; 0xff74
   13da4:	movt	r0, #1
   13da8:	movt	r3, #1
   13dac:	str	r0, [sp]
   13db0:	ldr	r2, [sp, #40]	; 0x28
   13db4:	mov	r0, #0
   13db8:	mov	r1, #0
   13dbc:	bl	1167c <error@plt>
   13dc0:	mov	r0, #1
   13dc4:	bl	119f0 <__assert_fail@plt+0x104>
   13dc8:	movw	r1, #9016	; 0x2338
   13dcc:	movw	r3, #1728	; 0x6c0
   13dd0:	movt	r1, #3
   13dd4:	movt	r3, #2
   13dd8:	ldr	r2, [r1]
   13ddc:	ldr	r1, [sp, #64]	; 0x40
   13de0:	str	r2, [sp]
   13de4:	mov	r2, #66	; 0x42
   13de8:	bl	1c844 <__assert_fail@plt+0xaf58>
   13dec:	movw	r1, #57	; 0x39
   13df0:	mov	r0, #0
   13df4:	mov	r2, #5
   13df8:	movt	r1, #2
   13dfc:	bl	115b0 <dcgettext@plt>
   13e00:	mov	r2, r0
   13e04:	mov	r0, #1
   13e08:	mov	r1, #0
   13e0c:	bl	1167c <error@plt>
   13e10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e14:	add	fp, sp, #28
   13e18:	sub	sp, sp, #12
   13e1c:	bl	1c784 <__assert_fail@plt+0xae98>
   13e20:	movw	r6, #8568	; 0x2178
   13e24:	movw	r4, #9024	; 0x2340
   13e28:	mov	r8, r0
   13e2c:	mov	r7, #1
   13e30:	movw	r9, #4075	; 0xfeb
   13e34:	movt	r6, #3
   13e38:	movt	r4, #3
   13e3c:	add	r1, r6, #56	; 0x38
   13e40:	stmib	sp, {r0, r1}
   13e44:	mov	r0, r8
   13e48:	mov	r1, #44	; 0x2c
   13e4c:	mov	r5, r8
   13e50:	bl	11724 <strchr@plt>
   13e54:	cmp	r0, #0
   13e58:	mov	r8, #0
   13e5c:	movne	r1, #0
   13e60:	strbne	r1, [r0], #1
   13e64:	mov	r1, r5
   13e68:	movne	r8, r0
   13e6c:	ldr	r0, [r6, #4]
   13e70:	bl	11520 <strcmp@plt>
   13e74:	cmp	r0, #0
   13e78:	beq	13f60 <__assert_fail@plt+0x2674>
   13e7c:	ldr	r0, [r6, #32]
   13e80:	mov	r1, r5
   13e84:	bl	11520 <strcmp@plt>
   13e88:	cmp	r0, #0
   13e8c:	beq	13f68 <__assert_fail@plt+0x267c>
   13e90:	ldr	r0, [r6, #60]	; 0x3c
   13e94:	mov	r1, r5
   13e98:	bl	11520 <strcmp@plt>
   13e9c:	cmp	r0, #0
   13ea0:	beq	13f70 <__assert_fail@plt+0x2684>
   13ea4:	ldr	r0, [r6, #88]	; 0x58
   13ea8:	mov	r1, r5
   13eac:	bl	11520 <strcmp@plt>
   13eb0:	cmp	r0, #0
   13eb4:	beq	13f78 <__assert_fail@plt+0x268c>
   13eb8:	ldr	r0, [r6, #116]	; 0x74
   13ebc:	mov	r1, r5
   13ec0:	bl	11520 <strcmp@plt>
   13ec4:	cmp	r0, #0
   13ec8:	beq	13f80 <__assert_fail@plt+0x2694>
   13ecc:	ldr	r0, [r6, #144]	; 0x90
   13ed0:	mov	r1, r5
   13ed4:	bl	11520 <strcmp@plt>
   13ed8:	cmp	r0, #0
   13edc:	beq	13f88 <__assert_fail@plt+0x269c>
   13ee0:	ldr	r0, [r6, #172]	; 0xac
   13ee4:	mov	r1, r5
   13ee8:	bl	11520 <strcmp@plt>
   13eec:	cmp	r0, #0
   13ef0:	beq	13f90 <__assert_fail@plt+0x26a4>
   13ef4:	ldr	r0, [r6, #200]	; 0xc8
   13ef8:	mov	r1, r5
   13efc:	bl	11520 <strcmp@plt>
   13f00:	cmp	r0, #0
   13f04:	beq	13f98 <__assert_fail@plt+0x26ac>
   13f08:	ldr	r0, [r6, #228]	; 0xe4
   13f0c:	mov	r1, r5
   13f10:	bl	11520 <strcmp@plt>
   13f14:	cmp	r0, #0
   13f18:	beq	13fa0 <__assert_fail@plt+0x26b4>
   13f1c:	ldr	r0, [r6, #256]	; 0x100
   13f20:	mov	r1, r5
   13f24:	bl	11520 <strcmp@plt>
   13f28:	cmp	r0, #0
   13f2c:	beq	13fa8 <__assert_fail@plt+0x26bc>
   13f30:	ldr	r0, [r6, #284]	; 0x11c
   13f34:	mov	r1, r5
   13f38:	bl	11520 <strcmp@plt>
   13f3c:	cmp	r0, #0
   13f40:	beq	13fb0 <__assert_fail@plt+0x26c4>
   13f44:	ldr	r0, [r6, #312]	; 0x138
   13f48:	mov	r1, r5
   13f4c:	bl	11520 <strcmp@plt>
   13f50:	mov	r1, #11
   13f54:	cmp	r0, #0
   13f58:	beq	13fb4 <__assert_fail@plt+0x26c8>
   13f5c:	b	14140 <__assert_fail@plt+0x2854>
   13f60:	mov	r1, #0
   13f64:	b	13fb4 <__assert_fail@plt+0x26c8>
   13f68:	mov	r1, #1
   13f6c:	b	13fb4 <__assert_fail@plt+0x26c8>
   13f70:	mov	r1, #2
   13f74:	b	13fb4 <__assert_fail@plt+0x26c8>
   13f78:	mov	r1, #3
   13f7c:	b	13fb4 <__assert_fail@plt+0x26c8>
   13f80:	mov	r1, #4
   13f84:	b	13fb4 <__assert_fail@plt+0x26c8>
   13f88:	mov	r1, #5
   13f8c:	b	13fb4 <__assert_fail@plt+0x26c8>
   13f90:	mov	r1, #6
   13f94:	b	13fb4 <__assert_fail@plt+0x26c8>
   13f98:	mov	r1, #7
   13f9c:	b	13fb4 <__assert_fail@plt+0x26c8>
   13fa0:	mov	r1, #8
   13fa4:	b	13fb4 <__assert_fail@plt+0x26c8>
   13fa8:	mov	r1, #9
   13fac:	b	13fb4 <__assert_fail@plt+0x26c8>
   13fb0:	mov	r1, #10
   13fb4:	rsb	r0, r1, r1, lsl #3
   13fb8:	add	sl, r6, r0, lsl #2
   13fbc:	mov	r5, sl
   13fc0:	ldrb	r0, [r5, #24]!
   13fc4:	cmp	r0, #0
   13fc8:	bne	140e4 <__assert_fail@plt+0x27f8>
   13fcc:	cmp	r1, #11
   13fd0:	bhi	14120 <__assert_fail@plt+0x2834>
   13fd4:	tst	r9, r7, lsl r1
   13fd8:	beq	14020 <__assert_fail@plt+0x2734>
   13fdc:	ldr	r1, [r4, #28]
   13fe0:	ldr	r0, [r4, #32]
   13fe4:	mov	r2, #4
   13fe8:	add	r1, r1, #1
   13fec:	str	r1, [r4, #28]
   13ff0:	bl	1c228 <__assert_fail@plt+0xa93c>
   13ff4:	str	r0, [r4, #32]
   13ff8:	ldr	r1, [r4, #28]
   13ffc:	add	r0, r0, r1, lsl #2
   14000:	str	sl, [r0, #-4]
   14004:	ldrb	r0, [r5]
   14008:	cmp	r0, #0
   1400c:	bne	140b4 <__assert_fail@plt+0x27c8>
   14010:	cmp	r8, #0
   14014:	strb	r7, [r5]
   14018:	bne	13e44 <__assert_fail@plt+0x2558>
   1401c:	b	140d4 <__assert_fail@plt+0x27e8>
   14020:	cmp	r1, #2
   14024:	bne	14070 <__assert_fail@plt+0x2784>
   14028:	ldr	r1, [r4, #28]
   1402c:	ldr	r0, [r4, #32]
   14030:	mov	r2, #4
   14034:	add	r1, r1, #1
   14038:	str	r1, [r4, #28]
   1403c:	bl	1c228 <__assert_fail@plt+0xa93c>
   14040:	str	r0, [r4, #32]
   14044:	ldr	r1, [r4, #28]
   14048:	add	r0, r0, r1, lsl #2
   1404c:	ldr	r1, [sp, #8]
   14050:	str	r1, [r0, #-4]
   14054:	movw	r0, #1087	; 0x43f
   14058:	movt	r0, #2
   1405c:	str	r0, [r6, #68]	; 0x44
   14060:	ldrb	r0, [r5]
   14064:	cmp	r0, #0
   14068:	beq	14010 <__assert_fail@plt+0x2724>
   1406c:	b	140b4 <__assert_fail@plt+0x27c8>
   14070:	ldr	r1, [r4, #28]
   14074:	ldr	r0, [r4, #32]
   14078:	mov	r2, #4
   1407c:	add	r1, r1, #1
   14080:	str	r1, [r4, #28]
   14084:	bl	1c228 <__assert_fail@plt+0xa93c>
   14088:	str	r0, [r4, #32]
   1408c:	ldr	r1, [r4, #28]
   14090:	add	r0, r0, r1, lsl #2
   14094:	add	r1, r6, #112	; 0x70
   14098:	str	r1, [r0, #-4]
   1409c:	movw	r0, #1092	; 0x444
   140a0:	movt	r0, #2
   140a4:	str	r0, [r6, #124]	; 0x7c
   140a8:	ldrb	r0, [r5]
   140ac:	cmp	r0, #0
   140b0:	beq	14010 <__assert_fail@plt+0x2724>
   140b4:	movw	r0, #1161	; 0x489
   140b8:	movw	r1, #1115	; 0x45b
   140bc:	movw	r3, #1175	; 0x497
   140c0:	movw	r2, #425	; 0x1a9
   140c4:	movt	r0, #2
   140c8:	movt	r1, #2
   140cc:	movt	r3, #2
   140d0:	bl	118ec <__assert_fail@plt>
   140d4:	ldr	r0, [sp, #4]
   140d8:	sub	sp, fp, #28
   140dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140e0:	b	16030 <__assert_fail@plt+0x4744>
   140e4:	movw	r1, #1041	; 0x411
   140e8:	mov	r0, #0
   140ec:	mov	r2, #5
   140f0:	movt	r1, #2
   140f4:	bl	115b0 <dcgettext@plt>
   140f8:	mov	r4, r0
   140fc:	ldr	r0, [sl, #4]
   14100:	bl	1b960 <__assert_fail@plt+0xa074>
   14104:	mov	r3, r0
   14108:	mov	r0, #0
   1410c:	mov	r1, #0
   14110:	mov	r2, r4
   14114:	bl	1167c <error@plt>
   14118:	mov	r0, #1
   1411c:	bl	119f0 <__assert_fail@plt+0x104>
   14120:	movw	r0, #1098	; 0x44a
   14124:	movw	r1, #1115	; 0x45b
   14128:	movw	r3, #1124	; 0x464
   1412c:	mov	r2, #496	; 0x1f0
   14130:	movt	r0, #2
   14134:	movt	r1, #2
   14138:	movt	r3, #2
   1413c:	bl	118ec <__assert_fail@plt>
   14140:	movw	r1, #1007	; 0x3ef
   14144:	mov	r0, #0
   14148:	mov	r2, #5
   1414c:	movt	r1, #2
   14150:	bl	115b0 <dcgettext@plt>
   14154:	mov	r4, r0
   14158:	mov	r0, r5
   1415c:	b	14100 <__assert_fail@plt+0x2814>
   14160:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14164:	add	fp, sp, #28
   14168:	sub	sp, sp, #4
   1416c:	vpush	{d8-d12}
   14170:	sub	sp, sp, #920	; 0x398
   14174:	ldr	sl, [fp, #16]
   14178:	mov	r7, r3
   1417c:	mov	r8, r2
   14180:	mov	r6, r1
   14184:	mov	r5, r0
   14188:	cmp	sl, #0
   1418c:	beq	141a4 <__assert_fail@plt+0x28b8>
   14190:	movw	r0, #9024	; 0x2340
   14194:	movt	r0, #3
   14198:	ldrb	r0, [r0, #6]
   1419c:	cmp	r0, #0
   141a0:	bne	14d20 <__assert_fail@plt+0x3434>
   141a4:	ldr	r0, [fp, #12]
   141a8:	cmp	r0, #0
   141ac:	beq	141d0 <__assert_fail@plt+0x28e4>
   141b0:	movw	r0, #9024	; 0x2340
   141b4:	movt	r0, #3
   141b8:	ldrb	r1, [r0]
   141bc:	cmp	r1, #0
   141c0:	bne	141d0 <__assert_fail@plt+0x28e4>
   141c4:	ldrb	r0, [r0, #1]
   141c8:	cmp	r0, #1
   141cc:	bne	14d20 <__assert_fail@plt+0x3434>
   141d0:	ldr	r9, [fp, #8]
   141d4:	cmp	r9, #0
   141d8:	movwne	r0, #9024	; 0x2340
   141dc:	movtne	r0, #3
   141e0:	ldrne	r4, [r0, #8]
   141e4:	cmpne	r4, #0
   141e8:	bne	1425c <__assert_fail@plt+0x2970>
   141ec:	cmp	r9, #0
   141f0:	beq	14228 <__assert_fail@plt+0x293c>
   141f4:	movw	r0, #9024	; 0x2340
   141f8:	movt	r0, #3
   141fc:	ldr	r4, [r0, #12]
   14200:	cmp	r4, #0
   14204:	beq	14228 <__assert_fail@plt+0x293c>
   14208:	ldr	r1, [r4]
   1420c:	mov	r0, r9
   14210:	bl	11520 <strcmp@plt>
   14214:	cmp	r0, #0
   14218:	beq	14d20 <__assert_fail@plt+0x3434>
   1421c:	ldr	r4, [r4, #4]
   14220:	cmp	r4, #0
   14224:	bne	14208 <__assert_fail@plt+0x291c>
   14228:	ldr	r3, [fp, #24]
   1422c:	ldr	r0, [fp, #20]
   14230:	cmp	r6, #0
   14234:	beq	14280 <__assert_fail@plt+0x2994>
   14238:	cmp	r0, #0
   1423c:	bne	14280 <__assert_fail@plt+0x2994>
   14240:	ldrb	r0, [r6]
   14244:	cmp	r0, #47	; 0x2f
   14248:	bne	14d20 <__assert_fail@plt+0x3434>
   1424c:	cmp	r7, #0
   14250:	moveq	r7, r6
   14254:	mov	r4, r7
   14258:	b	142dc <__assert_fail@plt+0x29f0>
   1425c:	ldr	r1, [r4]
   14260:	mov	r0, r9
   14264:	bl	11520 <strcmp@plt>
   14268:	cmp	r0, #0
   1426c:	beq	141ec <__assert_fail@plt+0x2900>
   14270:	ldr	r4, [r4, #4]
   14274:	cmp	r4, #0
   14278:	bne	1425c <__assert_fail@plt+0x2970>
   1427c:	b	14d20 <__assert_fail@plt+0x3434>
   14280:	cmp	r6, #0
   14284:	mov	r4, r5
   14288:	movne	r4, r6
   1428c:	cmp	r7, #0
   14290:	movne	r4, r7
   14294:	cmp	r0, #0
   14298:	beq	142dc <__assert_fail@plt+0x29f0>
   1429c:	mov	r4, #48	; 0x30
   142a0:	add	r1, r0, #32
   142a4:	add	r7, r0, #16
   142a8:	sub	r2, fp, #136	; 0x88
   142ac:	vld1.64	{d16-d17}, [r0], r4
   142b0:	vld1.64	{d18-d19}, [r1]
   142b4:	vld1.64	{d20-d21}, [r7]
   142b8:	add	r1, r2, #32
   142bc:	vldr	d22, [r0]
   142c0:	add	r0, r2, #16
   142c4:	vst1.64	{d16-d17}, [r2], r4
   142c8:	vst1.64	{d18-d19}, [r1]
   142cc:	vst1.64	{d20-d21}, [r0]
   142d0:	vstr	d22, [r2]
   142d4:	mov	r2, #1
   142d8:	b	14410 <__assert_fail@plt+0x2b24>
   142dc:	sub	r2, fp, #136	; 0x88
   142e0:	mov	r0, r4
   142e4:	mov	r1, r5
   142e8:	bl	16058 <__assert_fail@plt+0x476c>
   142ec:	cmp	r0, #0
   142f0:	beq	143cc <__assert_fail@plt+0x2ae0>
   142f4:	bl	11748 <__errno_location@plt>
   142f8:	ldr	r3, [fp, #24]
   142fc:	cmp	r3, #0
   14300:	beq	14380 <__assert_fail@plt+0x2a94>
   14304:	ldr	r1, [r0]
   14308:	cmp	r1, #13
   1430c:	cmpne	r1, #2
   14310:	bne	14380 <__assert_fail@plt+0x2a94>
   14314:	movw	r4, #9024	; 0x2340
   14318:	movt	r4, #3
   1431c:	ldrb	r0, [r4]
   14320:	cmp	r0, #1
   14324:	bne	14d20 <__assert_fail@plt+0x3434>
   14328:	mvn	r0, #0
   1432c:	movw	r9, #3742	; 0xe9e
   14330:	mov	r2, #0
   14334:	str	r0, [fp, #-108]	; 0xffffff94
   14338:	str	r0, [fp, #-112]	; 0xffffff90
   1433c:	str	r0, [fp, #-116]	; 0xffffff8c
   14340:	str	r0, [fp, #-120]	; 0xffffff88
   14344:	str	r0, [fp, #-124]	; 0xffffff84
   14348:	str	r0, [fp, #-128]	; 0xffffff80
   1434c:	str	r0, [fp, #-132]	; 0xffffff7c
   14350:	str	r0, [fp, #-136]	; 0xffffff78
   14354:	strb	r2, [fp, #-104]	; 0xffffff98
   14358:	str	r0, [fp, #-84]	; 0xffffffac
   1435c:	str	r0, [fp, #-88]	; 0xffffffa8
   14360:	str	r0, [fp, #-92]	; 0xffffffa4
   14364:	str	r0, [fp, #-96]	; 0xffffffa0
   14368:	movt	r9, #2
   1436c:	ldr	r0, [fp, #-128]	; 0xffffff80
   14370:	ldr	r1, [fp, #-124]	; 0xffffff84
   14374:	orrs	r0, r0, r1
   14378:	bne	14440 <__assert_fail@plt+0x2b54>
   1437c:	b	14428 <__assert_fail@plt+0x2b3c>
   14380:	ldr	r5, [r0]
   14384:	mov	r0, #0
   14388:	mov	r1, #3
   1438c:	mov	r2, r4
   14390:	bl	1b6b4 <__assert_fail@plt+0x9dc8>
   14394:	movw	r2, #4076	; 0xfec
   14398:	mov	r3, r0
   1439c:	mov	r0, #0
   143a0:	mov	r1, r5
   143a4:	movt	r2, #2
   143a8:	bl	1167c <error@plt>
   143ac:	movw	r1, #9024	; 0x2340
   143b0:	mov	r0, #1
   143b4:	movt	r1, #3
   143b8:	strb	r0, [r1, #4]
   143bc:	sub	sp, fp, #72	; 0x48
   143c0:	vpop	{d8-d12}
   143c4:	add	sp, sp, #4
   143c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143cc:	ldr	r3, [fp, #24]
   143d0:	mov	r2, #0
   143d4:	cmp	r3, #0
   143d8:	beq	14410 <__assert_fail@plt+0x2b24>
   143dc:	movw	r0, #9024	; 0x2340
   143e0:	movt	r0, #3
   143e4:	ldrb	r0, [r0]
   143e8:	cmp	r0, #1
   143ec:	bne	14410 <__assert_fail@plt+0x2b24>
   143f0:	add	r2, sp, #72	; 0x48
   143f4:	mov	r0, #3
   143f8:	mov	r1, r4
   143fc:	bl	11898 <__xstat64@plt>
   14400:	cmp	r0, #0
   14404:	beq	14d30 <__assert_fail@plt+0x3444>
   14408:	ldr	r3, [fp, #24]
   1440c:	mov	r2, #0
   14410:	movw	r4, #9024	; 0x2340
   14414:	movt	r4, #3
   14418:	ldr	r0, [fp, #-128]	; 0xffffff80
   1441c:	ldr	r1, [fp, #-124]	; 0xffffff84
   14420:	orrs	r0, r0, r1
   14424:	bne	14440 <__assert_fail@plt+0x2b54>
   14428:	ldrb	r0, [r4]
   1442c:	cmp	r0, #0
   14430:	bne	14440 <__assert_fail@plt+0x2b54>
   14434:	ldrb	r0, [r4, #1]
   14438:	cmp	r0, #1
   1443c:	bne	14d20 <__assert_fail@plt+0x3434>
   14440:	cmp	r2, #0
   14444:	str	r2, [sp, #52]	; 0x34
   14448:	mov	r2, #4
   1444c:	mov	r7, r3
   14450:	sub	sl, fp, #136	; 0x88
   14454:	moveq	r0, #1
   14458:	strbeq	r0, [r4, #3]
   1445c:	ldr	r1, [r4, #40]	; 0x28
   14460:	ldr	r0, [r4, #36]	; 0x24
   14464:	add	r1, r1, #1
   14468:	str	r1, [r4, #40]	; 0x28
   1446c:	bl	1c228 <__assert_fail@plt+0xa93c>
   14470:	str	r0, [r4, #36]	; 0x24
   14474:	mov	r1, #4
   14478:	ldr	r0, [r4, #28]
   1447c:	bl	1c334 <__assert_fail@plt+0xaa48>
   14480:	ldr	r1, [r4, #36]	; 0x24
   14484:	ldr	r2, [r4, #40]	; 0x28
   14488:	cmp	r8, #0
   1448c:	add	r1, r1, r2, lsl #2
   14490:	str	r0, [r1, #-4]
   14494:	movw	r0, #3742	; 0xe9e
   14498:	movt	r0, #2
   1449c:	moveq	r8, r0
   144a0:	cmp	r5, #0
   144a4:	moveq	r5, r0
   144a8:	mov	r0, r5
   144ac:	bl	1c784 <__assert_fail@plt+0xae98>
   144b0:	mov	r4, r0
   144b4:	cmp	r7, #0
   144b8:	beq	1450c <__assert_fail@plt+0x2c20>
   144bc:	mov	r0, r4
   144c0:	bl	11718 <strlen@plt>
   144c4:	cmp	r0, #37	; 0x25
   144c8:	bcc	1450c <__assert_fail@plt+0x2c20>
   144cc:	add	r0, r4, r0
   144d0:	movw	r1, #1697	; 0x6a1
   144d4:	sub	r0, r0, #36	; 0x24
   144d8:	movt	r1, #2
   144dc:	bl	118d4 <strspn@plt>
   144e0:	cmp	r0, #36	; 0x24
   144e4:	bne	1450c <__assert_fail@plt+0x2c20>
   144e8:	mov	r0, r4
   144ec:	mov	r1, #0
   144f0:	bl	1559c <__assert_fail@plt+0x3cb0>
   144f4:	cmp	r0, #0
   144f8:	str	r0, [sp, #64]	; 0x40
   144fc:	beq	1450c <__assert_fail@plt+0x2c20>
   14500:	mov	r0, r4
   14504:	bl	16030 <__assert_fail@plt+0x4744>
   14508:	b	14510 <__assert_fail@plt+0x2c24>
   1450c:	str	r4, [sp, #64]	; 0x40
   14510:	str	r6, [sp, #60]	; 0x3c
   14514:	str	r8, [sp, #56]	; 0x38
   14518:	add	r1, pc, #992	; 0x3e0
   1451c:	sub	r2, fp, #264	; 0x108
   14520:	mvn	lr, #1
   14524:	add	r0, sl, #8
   14528:	mov	sl, #0
   1452c:	ldr	r6, [fp, #-96]	; 0xffffffa0
   14530:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14534:	cmp	r9, #0
   14538:	ldr	ip, [fp, #-88]	; 0xffffffa8
   1453c:	ldr	r5, [fp, #-84]	; 0xffffffac
   14540:	vld1.64	{d16-d17}, [r1 :128]
   14544:	mov	r1, #56	; 0x38
   14548:	vst1.64	{d16-d17}, [r2], r1
   1454c:	add	r1, lr, #1
   14550:	strb	sl, [r2]
   14554:	str	r1, [fp, #-216]	; 0xffffff28
   14558:	movw	r1, #3742	; 0xe9e
   1455c:	mvn	r2, #0
   14560:	movt	r1, #2
   14564:	str	r2, [fp, #-212]	; 0xffffff2c
   14568:	strb	sl, [fp, #-232]	; 0xffffff18
   1456c:	str	r3, [fp, #-244]	; 0xffffff0c
   14570:	str	r6, [fp, #-248]	; 0xffffff08
   14574:	str	r5, [fp, #-220]	; 0xffffff24
   14578:	str	ip, [fp, #-224]	; 0xffffff20
   1457c:	str	r5, [fp, #-236]	; 0xffffff14
   14580:	str	ip, [fp, #-240]	; 0xffffff10
   14584:	moveq	r9, r1
   14588:	mvn	r1, #2
   1458c:	subs	r1, r1, r6
   14590:	sbcs	r1, r2, r3
   14594:	bcc	145c4 <__assert_fail@plt+0x2cd8>
   14598:	subs	r1, ip, lr
   1459c:	sbcs	r1, r5, r2
   145a0:	bcs	145c4 <__assert_fail@plt+0x2cd8>
   145a4:	sub	r1, fp, #264	; 0x108
   145a8:	subs	r4, r6, ip
   145ac:	add	r1, r1, #48	; 0x30
   145b0:	sbcs	r7, r3, r5
   145b4:	stm	r1, {r4, r7}
   145b8:	mov	r1, #0
   145bc:	movwcc	r1, #1
   145c0:	strb	r1, [fp, #-208]	; 0xffffff30
   145c4:	ldr	r1, [fp, #-136]	; 0xffffff78
   145c8:	str	r6, [sp, #48]	; 0x30
   145cc:	ldr	r6, [fp, #-132]	; 0xffffff7c
   145d0:	str	r3, [sp, #24]
   145d4:	ldr	r7, [fp, #-120]	; 0xffffff88
   145d8:	ldr	r3, [fp, #-116]	; 0xffffff8c
   145dc:	str	r1, [sp, #44]	; 0x2c
   145e0:	str	r1, [fp, #-200]	; 0xffffff38
   145e4:	movw	r1, #9024	; 0x2340
   145e8:	str	r6, [sp, #40]	; 0x28
   145ec:	str	r6, [fp, #-196]	; 0xffffff3c
   145f0:	mov	r4, r6
   145f4:	mov	r6, r7
   145f8:	adds	r7, lr, #1
   145fc:	movt	r1, #3
   14600:	adc	r4, r2, #0
   14604:	ldr	r8, [r1, #48]	; 0x30
   14608:	ldr	r1, [r1, #52]	; 0x34
   1460c:	ldr	lr, [fp, #-112]	; 0xffffff90
   14610:	str	r8, [fp, #-192]	; 0xffffff40
   14614:	ldr	r8, [fp, #-108]	; 0xffffff94
   14618:	str	r1, [fp, #-188]	; 0xffffff44
   1461c:	str	r4, [fp, #-148]	; 0xffffff6c
   14620:	mvn	r4, #1
   14624:	ldrd	r0, [r0]
   14628:	str	r7, [fp, #-152]	; 0xffffff68
   1462c:	strb	sl, [fp, #-144]	; 0xffffff70
   14630:	mov	r7, r3
   14634:	str	r3, [fp, #-156]	; 0xffffff64
   14638:	str	r6, [fp, #-160]	; 0xffffff60
   1463c:	str	lr, [fp, #-176]	; 0xffffff50
   14640:	subs	r4, lr, r4
   14644:	sbcs	r4, r8, r2
   14648:	mov	r3, r8
   1464c:	str	r8, [fp, #-172]	; 0xffffff54
   14650:	str	r8, [sp, #36]	; 0x24
   14654:	ldrb	r4, [fp, #-104]	; 0xffffff98
   14658:	movwcc	sl, #1
   1465c:	mvn	r3, #1
   14660:	cmp	r4, #0
   14664:	movwne	r4, #1
   14668:	and	r4, sl, r4
   1466c:	strb	r4, [fp, #-168]	; 0xffffff58
   14670:	str	r4, [sp, #20]
   14674:	subs	r4, r0, r3
   14678:	str	r1, [fp, #-180]	; 0xffffff4c
   1467c:	str	r0, [fp, #-184]	; 0xffffff48
   14680:	sbcs	r4, r1, r2
   14684:	bcs	146b4 <__assert_fail@plt+0x2dc8>
   14688:	subs	r4, r6, r3
   1468c:	sbcs	r4, r7, r2
   14690:	bcs	146b4 <__assert_fail@plt+0x2dc8>
   14694:	sub	r2, fp, #200	; 0xc8
   14698:	add	r4, r2, #48	; 0x30
   1469c:	subs	r2, r0, r6
   146a0:	sbcs	r3, r1, r7
   146a4:	strd	r2, [r4]
   146a8:	mov	r2, #0
   146ac:	movwcc	r2, #1
   146b0:	strb	r2, [fp, #-144]	; 0xffffff70
   146b4:	str	r6, [sp, #32]
   146b8:	movw	r6, #9024	; 0x2340
   146bc:	ldr	r3, [sp, #52]	; 0x34
   146c0:	str	r7, [sp, #28]
   146c4:	ldr	r7, [sp, #48]	; 0x30
   146c8:	movw	sl, #3742	; 0xe9e
   146cc:	movt	r6, #3
   146d0:	movt	sl, #2
   146d4:	ldrb	r2, [r6, #5]
   146d8:	mvn	r2, r2
   146dc:	orr	r2, r3, r2
   146e0:	tst	r2, #1
   146e4:	bne	14884 <__assert_fail@plt+0x2f98>
   146e8:	ldr	r3, [sp, #24]
   146ec:	mvn	r2, #1
   146f0:	subs	r2, r7, r2
   146f4:	mvn	r2, #0
   146f8:	sbcs	r2, r3, r2
   146fc:	bcs	14714 <__assert_fail@plt+0x2e28>
   14700:	mov	r4, r3
   14704:	ldrd	r2, [r6, #96]	; 0x60
   14708:	adds	r2, r2, r7
   1470c:	adc	r3, r3, r4
   14710:	strd	r2, [r6, #96]	; 0x60
   14714:	mvn	r2, #1
   14718:	subs	r2, ip, r2
   1471c:	mvn	r2, #0
   14720:	sbcs	r2, r5, r2
   14724:	bcs	14738 <__assert_fail@plt+0x2e4c>
   14728:	ldrd	r2, [r6, #104]	; 0x68
   1472c:	adds	r2, r2, ip
   14730:	adc	r3, r3, r5
   14734:	strd	r2, [r6, #104]	; 0x68
   14738:	mvn	r2, #1
   1473c:	subs	r2, r0, r2
   14740:	mvn	r2, #0
   14744:	sbcs	r2, r1, r2
   14748:	bcs	14774 <__assert_fail@plt+0x2e88>
   1474c:	ldr	r5, [sp, #44]	; 0x2c
   14750:	ldr	r4, [r6, #64]	; 0x40
   14754:	ldr	ip, [r6, #68]	; 0x44
   14758:	umull	r2, r3, r0, r5
   1475c:	adds	r2, r4, r2
   14760:	ldr	r4, [sp, #40]	; 0x28
   14764:	mla	r0, r0, r4, r3
   14768:	mla	r0, r1, r5, r0
   1476c:	adc	r3, ip, r0
   14770:	strd	r2, [r6, #64]	; 0x40
   14774:	ldr	r4, [sp, #32]
   14778:	ldr	r7, [sp, #28]
   1477c:	mvn	r0, #1
   14780:	subs	r0, r4, r0
   14784:	mvn	r0, #0
   14788:	sbcs	r0, r7, r0
   1478c:	bcs	147b4 <__assert_fail@plt+0x2ec8>
   14790:	ldr	r5, [sp, #44]	; 0x2c
   14794:	ldrd	r2, [r6, #72]	; 0x48
   14798:	umull	r0, r1, r4, r5
   1479c:	adds	r0, r2, r0
   147a0:	ldr	r2, [sp, #40]	; 0x28
   147a4:	mla	r1, r4, r2, r1
   147a8:	mla	r1, r7, r5, r1
   147ac:	adc	r1, r3, r1
   147b0:	strd	r0, [r6, #72]	; 0x48
   147b4:	ldr	r1, [sp, #36]	; 0x24
   147b8:	mvn	r0, #1
   147bc:	subs	r0, lr, r0
   147c0:	mvn	r0, #0
   147c4:	sbcs	r0, r1, r0
   147c8:	bcs	14884 <__assert_fail@plt+0x2f98>
   147cc:	ldr	r1, [sp, #44]	; 0x2c
   147d0:	ldr	r2, [sp, #40]	; 0x28
   147d4:	umull	r3, r0, lr, r1
   147d8:	mla	r0, lr, r2, r0
   147dc:	ldr	r2, [sp, #36]	; 0x24
   147e0:	mla	r2, r2, r1, r0
   147e4:	ldrb	r1, [r6, #88]	; 0x58
   147e8:	ldr	r0, [sp, #20]
   147ec:	cmp	r1, r0
   147f0:	bne	14804 <__assert_fail@plt+0x2f18>
   147f4:	ldrd	r0, [r6, #80]	; 0x50
   147f8:	adds	r0, r0, r3
   147fc:	adc	r1, r1, r2
   14800:	b	14880 <__assert_fail@plt+0x2f94>
   14804:	ldr	r4, [r6, #80]	; 0x50
   14808:	ldr	ip, [r6, #84]	; 0x54
   1480c:	cmp	r1, #0
   14810:	beq	14824 <__assert_fail@plt+0x2f38>
   14814:	rsbs	r4, r4, #0
   14818:	rsc	ip, ip, #0
   1481c:	str	r4, [r6, #80]	; 0x50
   14820:	str	ip, [r6, #84]	; 0x54
   14824:	rsbs	r5, r3, #0
   14828:	rsc	r7, r2, #0
   1482c:	cmp	r0, #0
   14830:	moveq	r5, r3
   14834:	moveq	r7, r2
   14838:	subs	r2, r5, r4
   1483c:	sbcs	r2, r7, ip
   14840:	bcs	1485c <__assert_fail@plt+0x2f70>
   14844:	subs	r2, r4, r5
   14848:	sbc	r3, ip, r7
   1484c:	strd	r2, [r6, #80]	; 0x50
   14850:	cmp	r1, #0
   14854:	bne	14878 <__assert_fail@plt+0x2f8c>
   14858:	b	14884 <__assert_fail@plt+0x2f98>
   1485c:	subs	r2, r5, r4
   14860:	mov	r1, r0
   14864:	strb	r0, [r6, #88]	; 0x58
   14868:	sbc	r3, r7, ip
   1486c:	strd	r2, [r6, #80]	; 0x50
   14870:	cmp	r1, #0
   14874:	beq	14884 <__assert_fail@plt+0x2f98>
   14878:	rsbs	r0, r2, #0
   1487c:	rsc	r1, r3, #0
   14880:	strd	r0, [r6, #80]	; 0x50
   14884:	ldr	r0, [r6, #28]
   14888:	cmp	r0, #0
   1488c:	beq	14d18 <__assert_fail@plt+0x342c>
   14890:	ldr	r1, [r6, #32]
   14894:	vldr	d8, [pc, #164]	; 14940 <__assert_fail@plt+0x3054>
   14898:	movw	r5, #8904	; 0x22c8
   1489c:	mov	r8, #0
   148a0:	vmov.i32	d9, #0	; 0x00000000
   148a4:	vmov.f64	d10, #112	; 0x3f800000  1.0
   148a8:	vmov.f64	d11, #240	; 0xbf800000 -1.0
   148ac:	movt	r5, #3
   148b0:	ldr	r0, [r1, r8, lsl #2]
   148b4:	sub	r4, fp, #200	; 0xc8
   148b8:	ldr	r1, [r0, #8]
   148bc:	cmp	r1, #0
   148c0:	beq	148ec <__assert_fail@plt+0x3000>
   148c4:	cmp	r1, #2
   148c8:	beq	148e8 <__assert_fail@plt+0x2ffc>
   148cc:	cmp	r1, #1
   148d0:	bne	14df4 <__assert_fail@plt+0x3508>
   148d4:	sub	r4, fp, #264	; 0x108
   148d8:	ldr	r0, [r0]
   148dc:	cmp	r0, #11
   148e0:	bls	148f8 <__assert_fail@plt+0x300c>
   148e4:	b	14e14 <__assert_fail@plt+0x3528>
   148e8:	mov	r4, #0
   148ec:	ldr	r0, [r0]
   148f0:	cmp	r0, #11
   148f4:	bhi	14e14 <__assert_fail@plt+0x3528>
   148f8:	add	r1, pc, #16
   148fc:	ldr	pc, [r1, r0, lsl #2]
   14900:	andeq	r0, r0, r1
   14904:	andeq	r0, r0, r0
   14908:	andeq	r0, r0, r1
   1490c:	andeq	r0, r0, r0
   14910:	andeq	r4, r1, r8, asr #21
   14914:	ldrdeq	r4, [r1], -r0
   14918:	andeq	r4, r1, r8, asr #18
   1491c:			; <UNDEFINED> instruction: 0x000149b4
   14920:	muleq	r1, ip, r9
   14924:	andeq	r4, r1, ip, asr #20
   14928:	andeq	r4, r1, r8, asr #18
   1492c:			; <UNDEFINED> instruction: 0x000149b4
   14930:	muleq	r1, ip, r9
   14934:	andeq	r4, r1, ip, asr #20
   14938:			; <UNDEFINED> instruction: 0x00014ab8
   1493c:	andeq	r4, r1, r0, asr #21
   14940:	andeq	r0, r0, r0
   14944:	subsmi	r0, r9, r0
   14948:	ldr	r2, [r4, #16]
   1494c:	ldr	r1, [r4, #20]
   14950:	mvn	r0, #1
   14954:	subs	r0, r2, r0
   14958:	mvn	r0, #0
   1495c:	sbcs	r0, r1, r0
   14960:	mov	r0, sl
   14964:	bcs	14ad4 <__assert_fail@plt+0x31e8>
   14968:	ldr	r3, [r6, #16]
   1496c:	ldm	r4, {r0, r7}
   14970:	ldr	r5, [r4, #8]
   14974:	ldr	r4, [r4, #12]
   14978:	stm	sp, {r0, r7}
   1497c:	str	r5, [sp, #8]
   14980:	movw	r5, #8904	; 0x22c8
   14984:	mov	r0, r2
   14988:	add	r2, sp, #72	; 0x48
   1498c:	str	r4, [sp, #12]
   14990:	movt	r5, #3
   14994:	bl	175f8 <__assert_fail@plt+0x5d0c>
   14998:	b	14ad4 <__assert_fail@plt+0x31e8>
   1499c:	ldr	r2, [r4, #24]
   149a0:	ldr	r7, [r4, #28]
   149a4:	ldrb	r5, [r4, #32]
   149a8:	cmp	r5, #0
   149ac:	beq	149c8 <__assert_fail@plt+0x30dc>
   149b0:	b	149e0 <__assert_fail@plt+0x30f4>
   149b4:	ldr	r2, [r4, #48]	; 0x30
   149b8:	ldr	r7, [r4, #52]	; 0x34
   149bc:	ldrb	r5, [r4, #56]	; 0x38
   149c0:	cmp	r5, #0
   149c4:	bne	149e0 <__assert_fail@plt+0x30f4>
   149c8:	mvn	r0, #1
   149cc:	subs	r0, r2, r0
   149d0:	mvn	r0, #0
   149d4:	sbcs	r0, r7, r0
   149d8:	mov	r0, sl
   149dc:	bcs	14a28 <__assert_fail@plt+0x313c>
   149e0:	ldr	r0, [r4]
   149e4:	ldr	r1, [r4, #4]
   149e8:	ldr	ip, [r4, #8]
   149ec:	ldr	r3, [r6, #16]
   149f0:	ldr	r4, [r4, #12]
   149f4:	stm	sp, {r0, r1, ip}
   149f8:	rsbs	r0, r2, #0
   149fc:	str	r4, [sp, #12]
   14a00:	rsc	r1, r7, #0
   14a04:	cmp	r5, #0
   14a08:	moveq	r0, r2
   14a0c:	add	r2, sp, #72	; 0x48
   14a10:	moveq	r1, r7
   14a14:	add	r2, r2, r5
   14a18:	bl	175f8 <__assert_fail@plt+0x5d0c>
   14a1c:	cmp	r5, #0
   14a20:	movne	r1, #45	; 0x2d
   14a24:	strbne	r1, [r0, #-1]!
   14a28:	bl	1c784 <__assert_fail@plt+0xae98>
   14a2c:	movw	r5, #8904	; 0x22c8
   14a30:	mov	r4, r0
   14a34:	str	r0, [sp, #68]	; 0x44
   14a38:	movt	r5, #3
   14a3c:	ldr	r0, [r5]
   14a40:	cmn	r0, #1
   14a44:	bgt	14c60 <__assert_fail@plt+0x3374>
   14a48:	b	14aec <__assert_fail@plt+0x3200>
   14a4c:	ldrd	r0, [r4, #48]	; 0x30
   14a50:	mvn	r7, #1
   14a54:	mvn	r3, #0
   14a58:	subs	r2, r0, r7
   14a5c:	sbcs	r2, r1, r3
   14a60:	bcs	14c24 <__assert_fail@plt+0x3338>
   14a64:	ldr	sl, [r4, #24]
   14a68:	ldr	r5, [r4, #28]
   14a6c:	subs	r2, sl, r7
   14a70:	sbcs	r2, r5, r3
   14a74:	bcs	14c24 <__assert_fail@plt+0x3338>
   14a78:	ldrb	r2, [r4, #56]	; 0x38
   14a7c:	cmp	r2, #0
   14a80:	beq	14afc <__assert_fail@plt+0x3210>
   14a84:	rsbs	r0, r0, #0
   14a88:	rsc	r1, r1, #0
   14a8c:	bl	1f564 <__assert_fail@plt+0xdc78>
   14a90:	eor	r1, r1, #-2147483648	; 0x80000000
   14a94:	vmov	d12, r0, r1
   14a98:	ldrb	r0, [r4, #32]
   14a9c:	cmp	r0, #0
   14aa0:	beq	14bb8 <__assert_fail@plt+0x32cc>
   14aa4:	rsbs	r0, sl, #0
   14aa8:	rsc	r1, r5, #0
   14aac:	bl	1f564 <__assert_fail@plt+0xdc78>
   14ab0:	eor	r1, r1, #-2147483648	; 0x80000000
   14ab4:	b	14bc4 <__assert_fail@plt+0x32d8>
   14ab8:	ldr	r0, [sp, #60]	; 0x3c
   14abc:	b	14ad4 <__assert_fail@plt+0x31e8>
   14ac0:	ldr	r0, [sp, #56]	; 0x38
   14ac4:	b	14ad4 <__assert_fail@plt+0x31e8>
   14ac8:	ldr	r0, [sp, #64]	; 0x40
   14acc:	b	14ad4 <__assert_fail@plt+0x31e8>
   14ad0:	mov	r0, r9
   14ad4:	bl	1c784 <__assert_fail@plt+0xae98>
   14ad8:	mov	r4, r0
   14adc:	str	r0, [sp, #68]	; 0x44
   14ae0:	ldr	r0, [r5]
   14ae4:	cmn	r0, #1
   14ae8:	bgt	14c60 <__assert_fail@plt+0x3374>
   14aec:	mov	r0, #1
   14af0:	bl	118a4 <isatty@plt>
   14af4:	str	r0, [r5]
   14af8:	b	14c60 <__assert_fail@plt+0x3374>
   14afc:	movw	r2, #36700	; 0x8f5c
   14b00:	movt	r2, #62914	; 0xf5c2
   14b04:	subs	r2, r2, r0
   14b08:	movw	r2, #23592	; 0x5c28
   14b0c:	movt	r2, #655	; 0x28f
   14b10:	sbcs	r2, r2, r1
   14b14:	bcc	14ba4 <__assert_fail@plt+0x32b8>
   14b18:	adds	r2, sl, r0
   14b1c:	adc	r6, r5, r1
   14b20:	orrs	r3, r2, r6
   14b24:	beq	14ba4 <__assert_fail@plt+0x32b8>
   14b28:	subs	r3, r2, r0
   14b2c:	mov	r7, #0
   14b30:	sbcs	r3, r6, r1
   14b34:	ldrb	r3, [r4, #32]
   14b38:	movwcc	r7, #1
   14b3c:	cmp	r7, r3
   14b40:	bne	14ba4 <__assert_fail@plt+0x32b8>
   14b44:	mov	r3, #100	; 0x64
   14b48:	mov	r4, r2
   14b4c:	umull	r5, r0, r0, r3
   14b50:	mla	r7, r1, r3, r0
   14b54:	mov	r0, r5
   14b58:	mov	r3, r6
   14b5c:	mov	r1, r7
   14b60:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   14b64:	umull	r2, r3, r0, r4
   14b68:	adds	ip, r0, #1
   14b6c:	mla	r3, r0, r6, r3
   14b70:	adc	r6, r1, #0
   14b74:	subs	r2, r5, r2
   14b78:	mla	r3, r1, r4, r3
   14b7c:	sbc	r3, r7, r3
   14b80:	orrs	r2, r2, r3
   14b84:	movne	r1, r6
   14b88:	movne	r0, ip
   14b8c:	bl	1f564 <__assert_fail@plt+0xdc78>
   14b90:	vmov	d16, r0, r1
   14b94:	vcmpe.f64	d16, #0.0
   14b98:	vmrs	APSR_nzcv, fpscr
   14b9c:	blt	14c24 <__assert_fail@plt+0x3338>
   14ba0:	b	14cd0 <__assert_fail@plt+0x33e4>
   14ba4:	bl	1f564 <__assert_fail@plt+0xdc78>
   14ba8:	vmov	d12, r0, r1
   14bac:	ldrb	r0, [r4, #32]
   14bb0:	cmp	r0, #0
   14bb4:	bne	14aa4 <__assert_fail@plt+0x31b8>
   14bb8:	mov	r0, sl
   14bbc:	mov	r1, r5
   14bc0:	bl	1f564 <__assert_fail@plt+0xdc78>
   14bc4:	vmov	d16, r0, r1
   14bc8:	vadd.f64	d16, d12, d16
   14bcc:	vcmp.f64	d16, #0.0
   14bd0:	vmrs	APSR_nzcv, fpscr
   14bd4:	beq	14c24 <__assert_fail@plt+0x3338>
   14bd8:	vmul.f64	d17, d12, d8
   14bdc:	vdiv.f64	d16, d17, d16
   14be0:	vcvt.s32.f64	s0, d16
   14be4:	vcvt.f64.s32	d17, s0
   14be8:	vcmpe.f64	d16, d17
   14bec:	vadd.f64	d19, d17, d10
   14bf0:	vmrs	APSR_nzcv, fpscr
   14bf4:	vcmpe.f64	d19, d16
   14bf8:	vselgt.f64	d18, d10, d9
   14bfc:	vmrs	APSR_nzcv, fpscr
   14c00:	vadd.f64	d18, d17, d18
   14c04:	vadd.f64	d17, d17, d11
   14c08:	vcmpe.f64	d16, d17
   14c0c:	vselge.f64	d18, d18, d16
   14c10:	vmrs	APSR_nzcv, fpscr
   14c14:	vselgt.f64	d16, d18, d16
   14c18:	vcmpe.f64	d16, #0.0
   14c1c:	vmrs	APSR_nzcv, fpscr
   14c20:	bge	14cd0 <__assert_fail@plt+0x33e4>
   14c24:	movw	sl, #3742	; 0xe9e
   14c28:	movt	sl, #2
   14c2c:	mov	r0, sl
   14c30:	bl	115bc <strdup@plt>
   14c34:	movw	r6, #9024	; 0x2340
   14c38:	mov	r4, r0
   14c3c:	str	r0, [sp, #68]	; 0x44
   14c40:	movt	r6, #3
   14c44:	movw	r5, #8904	; 0x22c8
   14c48:	cmp	r4, #0
   14c4c:	movt	r5, #3
   14c50:	beq	14d14 <__assert_fail@plt+0x3428>
   14c54:	ldr	r0, [r5]
   14c58:	cmn	r0, #1
   14c5c:	ble	14aec <__assert_fail@plt+0x3200>
   14c60:	movw	r1, #20032	; 0x4e40
   14c64:	cmp	r0, #0
   14c68:	movw	r0, #20224	; 0x4f00
   14c6c:	movt	r1, #1
   14c70:	movt	r0, #1
   14c74:	moveq	r1, r0
   14c78:	mov	r0, r4
   14c7c:	blx	r1
   14c80:	ldr	r0, [sp, #68]	; 0x44
   14c84:	mov	r1, #0
   14c88:	bl	186a8 <__assert_fail@plt+0x6dbc>
   14c8c:	ldr	r1, [r6, #32]
   14c90:	ldr	r2, [r1, r8, lsl #2]
   14c94:	ldr	r3, [r2, #16]
   14c98:	cmp	r3, r0
   14c9c:	movhi	r0, r3
   14ca0:	str	r0, [r2, #16]
   14ca4:	ldr	r0, [r6, #36]	; 0x24
   14ca8:	ldr	r2, [r6, #40]	; 0x28
   14cac:	add	r0, r0, r2, lsl #2
   14cb0:	ldr	r2, [sp, #68]	; 0x44
   14cb4:	ldr	r0, [r0, #-4]
   14cb8:	str	r2, [r0, r8, lsl #2]
   14cbc:	add	r8, r8, #1
   14cc0:	ldr	r0, [r6, #28]
   14cc4:	cmp	r8, r0
   14cc8:	bcc	148b0 <__assert_fail@plt+0x2fc4>
   14ccc:	b	14d18 <__assert_fail@plt+0x342c>
   14cd0:	movw	r2, #1671	; 0x687
   14cd4:	add	r0, sp, #68	; 0x44
   14cd8:	mov	r1, #1
   14cdc:	vstr	d16, [sp]
   14ce0:	movt	r2, #2
   14ce4:	bl	116a0 <__asprintf_chk@plt>
   14ce8:	cmn	r0, #1
   14cec:	beq	14e34 <__assert_fail@plt+0x3548>
   14cf0:	ldr	r4, [sp, #68]	; 0x44
   14cf4:	movw	r6, #9024	; 0x2340
   14cf8:	movw	sl, #3742	; 0xe9e
   14cfc:	movt	r6, #3
   14d00:	movt	sl, #2
   14d04:	movw	r5, #8904	; 0x22c8
   14d08:	cmp	r4, #0
   14d0c:	movt	r5, #3
   14d10:	bne	14c54 <__assert_fail@plt+0x3368>
   14d14:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   14d18:	ldr	r0, [sp, #64]	; 0x40
   14d1c:	bl	16030 <__assert_fail@plt+0x4744>
   14d20:	sub	sp, fp, #72	; 0x48
   14d24:	vpop	{d8-d12}
   14d28:	add	sp, sp, #4
   14d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d30:	movw	r0, #9024	; 0x2340
   14d34:	movt	r0, #3
   14d38:	ldr	r0, [r0, #44]	; 0x2c
   14d3c:	cmp	r0, #0
   14d40:	beq	14408 <__assert_fail@plt+0x2b1c>
   14d44:	ldr	r1, [sp, #72]	; 0x48
   14d48:	ldr	r2, [sp, #76]	; 0x4c
   14d4c:	str	r1, [fp, #-200]	; 0xffffff38
   14d50:	sub	r1, fp, #200	; 0xc8
   14d54:	str	r2, [fp, #-196]	; 0xffffff3c
   14d58:	bl	16348 <__assert_fail@plt+0x4a5c>
   14d5c:	cmp	r0, #0
   14d60:	beq	14408 <__assert_fail@plt+0x2b1c>
   14d64:	ldr	r0, [r0, #16]
   14d68:	ldr	r3, [fp, #24]
   14d6c:	mov	r2, #0
   14d70:	cmp	r0, #0
   14d74:	ldrne	r4, [r0, #8]
   14d78:	cmpne	r4, #0
   14d7c:	beq	14410 <__assert_fail@plt+0x2b24>
   14d80:	ldr	r0, [r4]
   14d84:	mov	r1, r5
   14d88:	bl	11520 <strcmp@plt>
   14d8c:	cmp	r0, #0
   14d90:	beq	14408 <__assert_fail@plt+0x2b1c>
   14d94:	ldrb	r0, [r4, #24]
   14d98:	ldr	r3, [fp, #24]
   14d9c:	mov	r2, #0
   14da0:	tst	r0, #2
   14da4:	cmpne	sl, #0
   14da8:	bne	14410 <__assert_fail@plt+0x2b24>
   14dac:	movw	r9, #3742	; 0xe9e
   14db0:	mvn	r0, #0
   14db4:	mov	r1, #0
   14db8:	movt	r9, #2
   14dbc:	str	r0, [fp, #-108]	; 0xffffff94
   14dc0:	str	r0, [fp, #-112]	; 0xffffff90
   14dc4:	str	r0, [fp, #-116]	; 0xffffff8c
   14dc8:	str	r0, [fp, #-120]	; 0xffffff88
   14dcc:	str	r0, [fp, #-124]	; 0xffffff84
   14dd0:	str	r0, [fp, #-128]	; 0xffffff80
   14dd4:	str	r0, [fp, #-132]	; 0xffffff7c
   14dd8:	str	r0, [fp, #-136]	; 0xffffff78
   14ddc:	strb	r1, [fp, #-104]	; 0xffffff98
   14de0:	str	r0, [fp, #-84]	; 0xffffffac
   14de4:	str	r0, [fp, #-88]	; 0xffffffa8
   14de8:	str	r0, [fp, #-92]	; 0xffffffa4
   14dec:	str	r0, [fp, #-96]	; 0xffffffa0
   14df0:	b	14410 <__assert_fail@plt+0x2b24>
   14df4:	movw	r0, #1524	; 0x5f4
   14df8:	movw	r1, #1115	; 0x45b
   14dfc:	movw	r3, #1542	; 0x606
   14e00:	movw	r2, #1158	; 0x486
   14e04:	movt	r0, #2
   14e08:	movt	r1, #2
   14e0c:	movt	r3, #2
   14e10:	bl	118ec <__assert_fail@plt>
   14e14:	movw	r0, #1678	; 0x68e
   14e18:	movw	r1, #1115	; 0x45b
   14e1c:	movw	r3, #1542	; 0x606
   14e20:	movw	r2, #1260	; 0x4ec
   14e24:	movt	r0, #2
   14e28:	movt	r1, #2
   14e2c:	movt	r3, #2
   14e30:	bl	118ec <__assert_fail@plt>
   14e34:	mov	r0, #0
   14e38:	str	r0, [sp, #68]	; 0x44
   14e3c:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   14e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e44:	add	fp, sp, #28
   14e48:	sub	sp, sp, #20
   14e4c:	mov	r4, r0
   14e50:	bl	11718 <strlen@plt>
   14e54:	mov	sl, #0
   14e58:	cmp	r0, #0
   14e5c:	str	sl, [sp, #12]
   14e60:	str	sl, [sp, #8]
   14e64:	beq	14ef4 <__assert_fail@plt+0x3608>
   14e68:	add	r8, r4, r0
   14e6c:	add	r9, sp, #8
   14e70:	mov	r7, r4
   14e74:	sub	r6, r8, r7
   14e78:	add	r0, sp, #4
   14e7c:	mov	r1, r7
   14e80:	mov	r3, r9
   14e84:	mov	r2, r6
   14e88:	bl	181cc <__assert_fail@plt+0x68e0>
   14e8c:	mov	r5, r0
   14e90:	mov	r0, #1
   14e94:	cmp	r5, r6
   14e98:	bhi	14eb0 <__assert_fail@plt+0x35c4>
   14e9c:	ldr	r0, [sp, #4]
   14ea0:	bl	115e0 <iswcntrl@plt>
   14ea4:	cmp	r0, #0
   14ea8:	beq	14ed0 <__assert_fail@plt+0x35e4>
   14eac:	mov	r0, r5
   14eb0:	mov	r1, #63	; 0x3f
   14eb4:	strb	r1, [r4], #1
   14eb8:	str	sl, [sp, #12]
   14ebc:	str	sl, [sp, #8]
   14ec0:	add	r7, r7, r0
   14ec4:	cmp	r7, r8
   14ec8:	bne	14e74 <__assert_fail@plt+0x3588>
   14ecc:	b	14ef4 <__assert_fail@plt+0x3608>
   14ed0:	mov	r0, r4
   14ed4:	mov	r1, r7
   14ed8:	mov	r2, r5
   14edc:	bl	11544 <memmove@plt>
   14ee0:	add	r4, r4, r5
   14ee4:	mov	r0, r5
   14ee8:	add	r7, r7, r0
   14eec:	cmp	r7, r8
   14ef0:	bne	14e74 <__assert_fail@plt+0x3588>
   14ef4:	strb	sl, [r4]
   14ef8:	sub	sp, fp, #28
   14efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f00:	push	{r4, r5, fp, lr}
   14f04:	add	fp, sp, #8
   14f08:	ldrb	r1, [r0]
   14f0c:	cmp	r1, #0
   14f10:	popeq	{r4, r5, fp, pc}
   14f14:	add	r4, r0, #1
   14f18:	mov	r5, #63	; 0x3f
   14f1c:	uxtb	r0, r1
   14f20:	bl	152fc <__assert_fail@plt+0x3a10>
   14f24:	cmp	r0, #0
   14f28:	strbne	r5, [r4, #-1]
   14f2c:	ldrb	r1, [r4], #1
   14f30:	cmp	r1, #0
   14f34:	bne	14f1c <__assert_fail@plt+0x3630>
   14f38:	pop	{r4, r5, fp, pc}
   14f3c:	push	{fp, lr}
   14f40:	mov	fp, sp
   14f44:	mov	r2, r1
   14f48:	ldrd	r0, [r0]
   14f4c:	mov	r3, #0
   14f50:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   14f54:	mov	r0, r2
   14f58:	pop	{fp, pc}
   14f5c:	ldrd	r2, [r1]
   14f60:	ldrd	r0, [r0]
   14f64:	eor	r1, r1, r3
   14f68:	eor	r0, r0, r2
   14f6c:	orr	r0, r0, r1
   14f70:	clz	r0, r0
   14f74:	lsr	r0, r0, #5
   14f78:	bx	lr
   14f7c:	b	16030 <__assert_fail@plt+0x4744>
   14f80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f84:	add	fp, sp, #24
   14f88:	sub	sp, sp, #216	; 0xd8
   14f8c:	mov	r5, r0
   14f90:	sub	r0, fp, #32
   14f94:	mov	r4, r1
   14f98:	bl	1b978 <__assert_fail@plt+0xa08c>
   14f9c:	cmp	r0, #0
   14fa0:	beq	14fe0 <__assert_fail@plt+0x36f4>
   14fa4:	bl	11748 <__errno_location@plt>
   14fa8:	ldr	r5, [r0]
   14fac:	movw	r1, #2056	; 0x808
   14fb0:	mov	r0, #0
   14fb4:	mov	r2, #5
   14fb8:	mov	r4, #0
   14fbc:	movt	r1, #2
   14fc0:	bl	115b0 <dcgettext@plt>
   14fc4:	mov	r2, r0
   14fc8:	mov	r0, #0
   14fcc:	mov	r1, r5
   14fd0:	bl	1167c <error@plt>
   14fd4:	mov	r0, r4
   14fd8:	sub	sp, fp, #24
   14fdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fe0:	ldr	r0, [r4, #16]
   14fe4:	and	r0, r0, #61440	; 0xf000
   14fe8:	cmp	r0, #16384	; 0x4000
   14fec:	bne	15014 <__assert_fail@plt+0x3728>
   14ff0:	sub	r0, fp, #136	; 0x88
   14ff4:	mov	r1, r4
   14ff8:	mov	r2, #104	; 0x68
   14ffc:	bl	11574 <memcpy@plt>
   15000:	mov	r0, r5
   15004:	bl	115f8 <chdir@plt>
   15008:	cmn	r0, #1
   1500c:	bgt	15078 <__assert_fail@plt+0x378c>
   15010:	b	15134 <__assert_fail@plt+0x3848>
   15014:	mov	r0, r5
   15018:	bl	15e74 <__assert_fail@plt+0x4588>
   1501c:	mov	r4, r0
   15020:	bl	11718 <strlen@plt>
   15024:	add	r1, r0, #8
   15028:	bic	r1, r1, #7
   1502c:	sub	r5, sp, r1
   15030:	mov	sp, r5
   15034:	add	r2, r0, #1
   15038:	mov	r0, r5
   1503c:	mov	r1, r4
   15040:	bl	11574 <memcpy@plt>
   15044:	mov	r0, r4
   15048:	bl	16030 <__assert_fail@plt+0x4744>
   1504c:	mov	r0, r5
   15050:	bl	115f8 <chdir@plt>
   15054:	cmn	r0, #1
   15058:	ble	15134 <__assert_fail@plt+0x3848>
   1505c:	movw	r1, #2155	; 0x86b
   15060:	sub	r2, fp, #136	; 0x88
   15064:	mov	r0, #3
   15068:	movt	r1, #2
   1506c:	bl	11898 <__xstat64@plt>
   15070:	cmn	r0, #1
   15074:	ble	15190 <__assert_fail@plt+0x38a4>
   15078:	movw	r1, #2154	; 0x86a
   1507c:	sub	r4, fp, #240	; 0xf0
   15080:	mov	r0, #3
   15084:	movt	r1, #2
   15088:	mov	r2, r4
   1508c:	bl	11898 <__xstat64@plt>
   15090:	cmp	r0, #0
   15094:	blt	1511c <__assert_fail@plt+0x3830>
   15098:	movw	r6, #2154	; 0x86a
   1509c:	sub	r8, fp, #136	; 0x88
   150a0:	add	r5, r4, #96	; 0x60
   150a4:	add	r7, r8, #96	; 0x60
   150a8:	movt	r6, #2
   150ac:	ldr	r0, [fp, #-136]	; 0xffffff78
   150b0:	ldr	r2, [fp, #-240]	; 0xffffff10
   150b4:	ldr	r1, [fp, #-132]	; 0xffffff7c
   150b8:	ldr	r3, [fp, #-236]	; 0xffffff14
   150bc:	eor	r1, r3, r1
   150c0:	eor	r0, r2, r0
   150c4:	orrs	r0, r0, r1
   150c8:	bne	15184 <__assert_fail@plt+0x3898>
   150cc:	ldrd	r0, [r7]
   150d0:	ldrd	r2, [r5]
   150d4:	eor	r1, r3, r1
   150d8:	eor	r0, r2, r0
   150dc:	orrs	r0, r0, r1
   150e0:	beq	15184 <__assert_fail@plt+0x3898>
   150e4:	mov	r0, r6
   150e8:	bl	115f8 <chdir@plt>
   150ec:	cmn	r0, #1
   150f0:	ble	151d4 <__assert_fail@plt+0x38e8>
   150f4:	mov	r0, r8
   150f8:	mov	r1, r4
   150fc:	mov	r2, #104	; 0x68
   15100:	bl	11574 <memcpy@plt>
   15104:	mov	r0, #3
   15108:	mov	r1, r6
   1510c:	mov	r2, r4
   15110:	bl	11898 <__xstat64@plt>
   15114:	cmp	r0, #0
   15118:	bge	150ac <__assert_fail@plt+0x37c0>
   1511c:	bl	11748 <__errno_location@plt>
   15120:	ldr	r5, [r0]
   15124:	movw	r1, #2157	; 0x86d
   15128:	mov	r4, #0
   1512c:	movt	r1, #2
   15130:	b	151e8 <__assert_fail@plt+0x38fc>
   15134:	bl	11748 <__errno_location@plt>
   15138:	ldr	r6, [r0]
   1513c:	movw	r1, #2085	; 0x825
   15140:	mov	r0, #0
   15144:	mov	r2, #5
   15148:	mov	r4, #0
   1514c:	movt	r1, #2
   15150:	bl	115b0 <dcgettext@plt>
   15154:	mov	r7, r0
   15158:	mov	r0, #4
   1515c:	mov	r1, r5
   15160:	bl	1b438 <__assert_fail@plt+0x9b4c>
   15164:	mov	r3, r0
   15168:	mov	r0, #0
   1516c:	mov	r1, r6
   15170:	mov	r2, r7
   15174:	bl	1167c <error@plt>
   15178:	mov	r0, r4
   1517c:	sub	sp, fp, #24
   15180:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15184:	bl	1c808 <__assert_fail@plt+0xaf1c>
   15188:	mov	r4, r0
   1518c:	b	1521c <__assert_fail@plt+0x3930>
   15190:	bl	11748 <__errno_location@plt>
   15194:	ldr	r6, [r0]
   15198:	movw	r1, #2115	; 0x843
   1519c:	mov	r0, #0
   151a0:	mov	r2, #5
   151a4:	mov	r4, #0
   151a8:	movt	r1, #2
   151ac:	bl	115b0 <dcgettext@plt>
   151b0:	mov	r7, r0
   151b4:	mov	r0, #4
   151b8:	mov	r1, r5
   151bc:	bl	1b438 <__assert_fail@plt+0x9b4c>
   151c0:	mov	r3, r0
   151c4:	mov	r0, #0
   151c8:	mov	r1, r6
   151cc:	mov	r2, r7
   151d0:	b	15218 <__assert_fail@plt+0x392c>
   151d4:	bl	11748 <__errno_location@plt>
   151d8:	ldr	r5, [r0]
   151dc:	movw	r1, #2085	; 0x825
   151e0:	mov	r4, #0
   151e4:	movt	r1, #2
   151e8:	mov	r0, #0
   151ec:	mov	r2, #5
   151f0:	bl	115b0 <dcgettext@plt>
   151f4:	movw	r1, #2154	; 0x86a
   151f8:	mov	r6, r0
   151fc:	mov	r0, #4
   15200:	movt	r1, #2
   15204:	bl	1b438 <__assert_fail@plt+0x9b4c>
   15208:	mov	r3, r0
   1520c:	mov	r0, #0
   15210:	mov	r1, r5
   15214:	mov	r2, r6
   15218:	bl	1167c <error@plt>
   1521c:	bl	11748 <__errno_location@plt>
   15220:	ldr	r6, [r0]
   15224:	mov	r5, r0
   15228:	sub	r0, fp, #32
   1522c:	bl	1b9d4 <__assert_fail@plt+0xa0e8>
   15230:	cmp	r0, #0
   15234:	bne	15250 <__assert_fail@plt+0x3964>
   15238:	sub	r0, fp, #32
   1523c:	bl	1b9f0 <__assert_fail@plt+0xa104>
   15240:	str	r6, [r5]
   15244:	mov	r0, r4
   15248:	sub	sp, fp, #24
   1524c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15250:	ldr	r4, [r5]
   15254:	movw	r1, #2172	; 0x87c
   15258:	mov	r0, #0
   1525c:	mov	r2, #5
   15260:	movt	r1, #2
   15264:	bl	115b0 <dcgettext@plt>
   15268:	mov	r2, r0
   1526c:	mov	r0, #1
   15270:	mov	r1, r4
   15274:	bl	1167c <error@plt>
   15278:	sub	r2, r0, #65	; 0x41
   1527c:	mov	r1, r0
   15280:	mov	r0, #1
   15284:	cmp	r2, #26
   15288:	subcs	r2, r1, #97	; 0x61
   1528c:	cmpcs	r2, #26
   15290:	bcs	15298 <__assert_fail@plt+0x39ac>
   15294:	bx	lr
   15298:	sub	r1, r1, #48	; 0x30
   1529c:	cmp	r1, #10
   152a0:	movcs	r0, #0
   152a4:	bx	lr
   152a8:	sub	r2, r0, #65	; 0x41
   152ac:	mov	r1, r0
   152b0:	mov	r0, #1
   152b4:	cmp	r2, #26
   152b8:	subcs	r1, r1, #97	; 0x61
   152bc:	cmpcs	r1, #26
   152c0:	movcs	r0, #0
   152c4:	bx	lr
   152c8:	mov	r1, #0
   152cc:	cmp	r0, #128	; 0x80
   152d0:	movwcc	r1, #1
   152d4:	mov	r0, r1
   152d8:	bx	lr
   152dc:	sub	r1, r0, #9
   152e0:	sub	r0, r0, #32
   152e4:	clz	r1, r1
   152e8:	clz	r0, r0
   152ec:	lsr	r1, r1, #5
   152f0:	lsr	r0, r0, #5
   152f4:	orr	r0, r0, r1
   152f8:	bx	lr
   152fc:	mov	r1, r0
   15300:	mov	r0, #1
   15304:	cmp	r1, #32
   15308:	bxcc	lr
   1530c:	cmp	r1, #127	; 0x7f
   15310:	movne	r0, #0
   15314:	bx	lr
   15318:	sub	r1, r0, #48	; 0x30
   1531c:	mov	r0, #0
   15320:	cmp	r1, #10
   15324:	movwcc	r0, #1
   15328:	bx	lr
   1532c:	sub	r1, r0, #33	; 0x21
   15330:	mov	r0, #0
   15334:	cmp	r1, #94	; 0x5e
   15338:	movwcc	r0, #1
   1533c:	bx	lr
   15340:	sub	r1, r0, #97	; 0x61
   15344:	mov	r0, #0
   15348:	cmp	r1, #26
   1534c:	movwcc	r0, #1
   15350:	bx	lr
   15354:	sub	r1, r0, #32
   15358:	mov	r0, #0
   1535c:	cmp	r1, #95	; 0x5f
   15360:	movwcc	r0, #1
   15364:	bx	lr
   15368:	sub	r1, r0, #33	; 0x21
   1536c:	cmp	r1, #93	; 0x5d
   15370:	bhi	154fc <__assert_fail@plt+0x3c10>
   15374:	add	r2, pc, #4
   15378:	mov	r0, #1
   1537c:	ldr	pc, [r2, r1, lsl #2]
   15380:	strdeq	r5, [r1], -r8
   15384:	strdeq	r5, [r1], -r8
   15388:	strdeq	r5, [r1], -r8
   1538c:	strdeq	r5, [r1], -r8
   15390:	strdeq	r5, [r1], -r8
   15394:	strdeq	r5, [r1], -r8
   15398:	strdeq	r5, [r1], -r8
   1539c:	strdeq	r5, [r1], -r8
   153a0:	strdeq	r5, [r1], -r8
   153a4:	strdeq	r5, [r1], -r8
   153a8:	strdeq	r5, [r1], -r8
   153ac:	strdeq	r5, [r1], -r8
   153b0:	strdeq	r5, [r1], -r8
   153b4:	strdeq	r5, [r1], -r8
   153b8:	strdeq	r5, [r1], -r8
   153bc:	strdeq	r5, [r1], -ip
   153c0:	strdeq	r5, [r1], -ip
   153c4:	strdeq	r5, [r1], -ip
   153c8:	strdeq	r5, [r1], -ip
   153cc:	strdeq	r5, [r1], -ip
   153d0:	strdeq	r5, [r1], -ip
   153d4:	strdeq	r5, [r1], -ip
   153d8:	strdeq	r5, [r1], -ip
   153dc:	strdeq	r5, [r1], -ip
   153e0:	strdeq	r5, [r1], -ip
   153e4:	strdeq	r5, [r1], -r8
   153e8:	strdeq	r5, [r1], -r8
   153ec:	strdeq	r5, [r1], -r8
   153f0:	strdeq	r5, [r1], -r8
   153f4:	strdeq	r5, [r1], -r8
   153f8:	strdeq	r5, [r1], -r8
   153fc:	strdeq	r5, [r1], -r8
   15400:	strdeq	r5, [r1], -ip
   15404:	strdeq	r5, [r1], -ip
   15408:	strdeq	r5, [r1], -ip
   1540c:	strdeq	r5, [r1], -ip
   15410:	strdeq	r5, [r1], -ip
   15414:	strdeq	r5, [r1], -ip
   15418:	strdeq	r5, [r1], -ip
   1541c:	strdeq	r5, [r1], -ip
   15420:	strdeq	r5, [r1], -ip
   15424:	strdeq	r5, [r1], -ip
   15428:	strdeq	r5, [r1], -ip
   1542c:	strdeq	r5, [r1], -ip
   15430:	strdeq	r5, [r1], -ip
   15434:	strdeq	r5, [r1], -ip
   15438:	strdeq	r5, [r1], -ip
   1543c:	strdeq	r5, [r1], -ip
   15440:	strdeq	r5, [r1], -ip
   15444:	strdeq	r5, [r1], -ip
   15448:	strdeq	r5, [r1], -ip
   1544c:	strdeq	r5, [r1], -ip
   15450:	strdeq	r5, [r1], -ip
   15454:	strdeq	r5, [r1], -ip
   15458:	strdeq	r5, [r1], -ip
   1545c:	strdeq	r5, [r1], -ip
   15460:	strdeq	r5, [r1], -ip
   15464:	strdeq	r5, [r1], -ip
   15468:	strdeq	r5, [r1], -r8
   1546c:	strdeq	r5, [r1], -r8
   15470:	strdeq	r5, [r1], -r8
   15474:	strdeq	r5, [r1], -r8
   15478:	strdeq	r5, [r1], -r8
   1547c:	strdeq	r5, [r1], -r8
   15480:	strdeq	r5, [r1], -ip
   15484:	strdeq	r5, [r1], -ip
   15488:	strdeq	r5, [r1], -ip
   1548c:	strdeq	r5, [r1], -ip
   15490:	strdeq	r5, [r1], -ip
   15494:	strdeq	r5, [r1], -ip
   15498:	strdeq	r5, [r1], -ip
   1549c:	strdeq	r5, [r1], -ip
   154a0:	strdeq	r5, [r1], -ip
   154a4:	strdeq	r5, [r1], -ip
   154a8:	strdeq	r5, [r1], -ip
   154ac:	strdeq	r5, [r1], -ip
   154b0:	strdeq	r5, [r1], -ip
   154b4:	strdeq	r5, [r1], -ip
   154b8:	strdeq	r5, [r1], -ip
   154bc:	strdeq	r5, [r1], -ip
   154c0:	strdeq	r5, [r1], -ip
   154c4:	strdeq	r5, [r1], -ip
   154c8:	strdeq	r5, [r1], -ip
   154cc:	strdeq	r5, [r1], -ip
   154d0:	strdeq	r5, [r1], -ip
   154d4:	strdeq	r5, [r1], -ip
   154d8:	strdeq	r5, [r1], -ip
   154dc:	strdeq	r5, [r1], -ip
   154e0:	strdeq	r5, [r1], -ip
   154e4:	strdeq	r5, [r1], -ip
   154e8:	strdeq	r5, [r1], -r8
   154ec:	strdeq	r5, [r1], -r8
   154f0:	strdeq	r5, [r1], -r8
   154f4:	strdeq	r5, [r1], -r8
   154f8:	bx	lr
   154fc:	mov	r0, #0
   15500:	bx	lr
   15504:	sub	r0, r0, #9
   15508:	cmp	r0, #23
   1550c:	movhi	r0, #0
   15510:	bxhi	lr
   15514:	movw	r1, #31
   15518:	bic	r0, r0, #-16777216	; 0xff000000
   1551c:	mov	r2, #1
   15520:	movt	r1, #128	; 0x80
   15524:	and	r0, r2, r1, lsr r0
   15528:	bx	lr
   1552c:	sub	r1, r0, #65	; 0x41
   15530:	mov	r0, #0
   15534:	cmp	r1, #26
   15538:	movwcc	r0, #1
   1553c:	bx	lr
   15540:	sub	r2, r0, #48	; 0x30
   15544:	mov	r1, r0
   15548:	mov	r0, #1
   1554c:	cmp	r2, #22
   15550:	bhi	15568 <__assert_fail@plt+0x3c7c>
   15554:	movw	r3, #1023	; 0x3ff
   15558:	mov	ip, #1
   1555c:	movt	r3, #126	; 0x7e
   15560:	tst	r3, ip, lsl r2
   15564:	bxne	lr
   15568:	sub	r1, r1, #97	; 0x61
   1556c:	cmp	r1, #6
   15570:	movcs	r0, #0
   15574:	bxcs	lr
   15578:	bx	lr
   1557c:	sub	r1, r0, #65	; 0x41
   15580:	cmp	r1, #26
   15584:	addcc	r0, r0, #32
   15588:	bx	lr
   1558c:	sub	r1, r0, #97	; 0x61
   15590:	cmp	r1, #26
   15594:	subcc	r0, r0, #32
   15598:	bx	lr
   1559c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155a0:	add	fp, sp, #28
   155a4:	sub	sp, sp, #180	; 0xb4
   155a8:	sub	sp, sp, #3072	; 0xc00
   155ac:	mov	r8, r0
   155b0:	and	r7, r1, #3
   155b4:	sub	r0, r1, #1
   155b8:	tst	r0, r7
   155bc:	beq	155dc <__assert_fail@plt+0x3cf0>
   155c0:	bl	11748 <__errno_location@plt>
   155c4:	mov	r1, #22
   155c8:	mov	r4, #0
   155cc:	str	r1, [r0]
   155d0:	mov	r0, r4
   155d4:	sub	sp, fp, #28
   155d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155dc:	cmp	r8, #0
   155e0:	beq	155c0 <__assert_fail@plt+0x3cd4>
   155e4:	ldrb	r0, [r8]
   155e8:	cmp	r0, #0
   155ec:	beq	15bf4 <__assert_fail@plt+0x4308>
   155f0:	sub	lr, fp, #1024	; 0x400
   155f4:	mov	r4, r1
   155f8:	mov	r1, #1024	; 0x400
   155fc:	cmp	r0, #47	; 0x2f
   15600:	sub	r2, lr, #40	; 0x28
   15604:	str	r1, [fp, #-1060]	; 0xfffffbdc
   15608:	add	r2, r2, #8
   1560c:	str	r2, [sp, #12]
   15610:	str	r2, [fp, #-1064]	; 0xfffffbd8
   15614:	add	r2, sp, #1184	; 0x4a0
   15618:	add	r2, r2, #8
   1561c:	str	r2, [sp, #1184]	; 0x4a0
   15620:	str	r2, [sp, #16]
   15624:	add	r2, sp, #48	; 0x30
   15628:	str	r1, [sp, #1188]	; 0x4a4
   1562c:	add	r5, r2, #8
   15630:	mov	r0, r5
   15634:	str	r5, [sp, #48]	; 0x30
   15638:	str	r1, [sp, #52]	; 0x34
   1563c:	str	r5, [sp, #8]
   15640:	bne	15c00 <__assert_fail@plt+0x4314>
   15644:	mov	r1, r8
   15648:	mov	r2, #0
   1564c:	mov	r3, #1024	; 0x400
   15650:	bl	118e0 <__mempcpy_chk@plt>
   15654:	mov	r6, r0
   15658:	mov	r0, #47	; 0x2f
   1565c:	strb	r0, [r6], #1
   15660:	ldrb	r0, [r8]
   15664:	cmp	r0, #0
   15668:	beq	15c2c <__assert_fail@plt+0x4340>
   1566c:	and	r1, r4, #4
   15670:	add	r9, sp, #48	; 0x30
   15674:	str	r7, [sp, #32]
   15678:	str	r1, [sp, #40]	; 0x28
   1567c:	mov	r1, #0
   15680:	str	r1, [sp, #24]
   15684:	mov	r1, #0
   15688:	str	r1, [sp, #36]	; 0x24
   1568c:	mov	r1, #0
   15690:	str	r1, [sp, #20]
   15694:	uxtb	r1, r0
   15698:	cmp	r1, #47	; 0x2f
   1569c:	bne	156ac <__assert_fail@plt+0x3dc0>
   156a0:	ldrb	r0, [r8, #1]!
   156a4:	cmp	r0, #47	; 0x2f
   156a8:	beq	156a0 <__assert_fail@plt+0x3db4>
   156ac:	mov	r1, r0
   156b0:	mov	sl, r8
   156b4:	uxtb	r1, r1
   156b8:	cmp	r1, #0
   156bc:	cmpne	r1, #47	; 0x2f
   156c0:	beq	156d8 <__assert_fail@plt+0x3dec>
   156c4:	ldrb	r1, [sl, #1]!
   156c8:	uxtb	r1, r1
   156cc:	cmp	r1, #0
   156d0:	cmpne	r1, #47	; 0x2f
   156d4:	bne	156c4 <__assert_fail@plt+0x3dd8>
   156d8:	sub	r2, sl, r8
   156dc:	cmp	r2, #1
   156e0:	beq	1574c <__assert_fail@plt+0x3e60>
   156e4:	cmp	r2, #2
   156e8:	beq	156f8 <__assert_fail@plt+0x3e0c>
   156ec:	cmp	r2, #0
   156f0:	bne	1576c <__assert_fail@plt+0x3e80>
   156f4:	b	15c34 <__assert_fail@plt+0x4348>
   156f8:	uxtb	r0, r0
   156fc:	cmp	r0, #46	; 0x2e
   15700:	ldrbeq	r0, [r8, #1]
   15704:	cmpeq	r0, #46	; 0x2e
   15708:	bne	1576c <__assert_fail@plt+0x3e80>
   1570c:	add	r0, r5, #1
   15710:	cmp	r6, r0
   15714:	bls	15bb8 <__assert_fail@plt+0x42cc>
   15718:	sub	r0, r6, #1
   1571c:	mov	r6, r0
   15720:	cmp	r0, r5
   15724:	bls	15bcc <__assert_fail@plt+0x42e0>
   15728:	mov	r0, r6
   1572c:	ldrb	r1, [r0, #-1]!
   15730:	cmp	r1, #47	; 0x2f
   15734:	bne	1571c <__assert_fail@plt+0x3e30>
   15738:	mov	r8, sl
   1573c:	ldrb	r0, [r8]
   15740:	cmp	r0, #0
   15744:	bne	15694 <__assert_fail@plt+0x3da8>
   15748:	b	15c34 <__assert_fail@plt+0x4348>
   1574c:	uxtb	r0, r0
   15750:	cmp	r0, #46	; 0x2e
   15754:	bne	1576c <__assert_fail@plt+0x3e80>
   15758:	mov	r8, sl
   1575c:	ldrb	r0, [r8]
   15760:	cmp	r0, #0
   15764:	bne	15694 <__assert_fail@plt+0x3da8>
   15768:	b	15c34 <__assert_fail@plt+0x4348>
   1576c:	ldrb	r0, [r6, #-1]
   15770:	add	r4, r2, #2
   15774:	str	r2, [sp, #44]	; 0x2c
   15778:	cmp	r0, #47	; 0x2f
   1577c:	movne	r0, #47	; 0x2f
   15780:	strbne	r0, [r6], #1
   15784:	ldr	r0, [sp, #52]	; 0x34
   15788:	add	r0, r5, r0
   1578c:	sub	r0, r0, r6
   15790:	cmp	r0, r4
   15794:	bcs	157cc <__assert_fail@plt+0x3ee0>
   15798:	mov	r0, r9
   1579c:	bl	1baf0 <__assert_fail@plt+0xa204>
   157a0:	cmp	r0, #0
   157a4:	beq	15d44 <__assert_fail@plt+0x4458>
   157a8:	sub	r0, r6, r5
   157ac:	ldr	r5, [sp, #48]	; 0x30
   157b0:	ldr	r1, [sp, #52]	; 0x34
   157b4:	add	r6, r5, r0
   157b8:	add	r0, r5, r1
   157bc:	sub	r0, r0, r6
   157c0:	cmp	r0, r4
   157c4:	bcc	15798 <__assert_fail@plt+0x3eac>
   157c8:	ldr	r2, [sp, #44]	; 0x2c
   157cc:	mov	r0, r6
   157d0:	mov	r1, r8
   157d4:	mvn	r3, #0
   157d8:	bl	118e0 <__mempcpy_chk@plt>
   157dc:	mov	r6, r0
   157e0:	mov	r0, #0
   157e4:	strb	r0, [r6]
   157e8:	ldr	r0, [sp, #40]	; 0x28
   157ec:	cmp	r0, #0
   157f0:	bne	15854 <__assert_fail@plt+0x3f68>
   157f4:	ldr	r0, [sp, #1188]	; 0x4a4
   157f8:	ldr	r7, [sp, #1184]	; 0x4a0
   157fc:	sub	r9, r0, #1
   15800:	mov	r0, r5
   15804:	mov	r1, r7
   15808:	mov	r2, r9
   1580c:	bl	1161c <readlink@plt>
   15810:	cmp	r0, r9
   15814:	blt	1582c <__assert_fail@plt+0x3f40>
   15818:	add	r0, sp, #1184	; 0x4a0
   1581c:	bl	1ba80 <__assert_fail@plt+0xa194>
   15820:	cmp	r0, #0
   15824:	bne	157f4 <__assert_fail@plt+0x3f08>
   15828:	b	15d44 <__assert_fail@plt+0x4458>
   1582c:	mov	r4, r0
   15830:	cmp	r0, #0
   15834:	add	r9, sp, #48	; 0x30
   15838:	blt	15854 <__assert_fail@plt+0x3f68>
   1583c:	ldr	r0, [sp, #24]
   15840:	cmp	r0, #19
   15844:	bgt	15904 <__assert_fail@plt+0x4018>
   15848:	add	r0, r0, #1
   1584c:	str	r0, [sp, #24]
   15850:	b	15a90 <__assert_fail@plt+0x41a4>
   15854:	ldr	r7, [sp, #32]
   15858:	cmp	r7, #2
   1585c:	bne	15874 <__assert_fail@plt+0x3f88>
   15860:	mov	r8, sl
   15864:	ldrb	r0, [r8]
   15868:	cmp	r0, #0
   1586c:	bne	15694 <__assert_fail@plt+0x3da8>
   15870:	b	15c34 <__assert_fail@plt+0x4348>
   15874:	ldrb	r0, [sl]
   15878:	cmp	r0, #47	; 0x2f
   1587c:	bne	159d4 <__assert_fail@plt+0x40e8>
   15880:	mov	r2, sl
   15884:	mov	r1, r2
   15888:	ldrb	r3, [r2, #1]!
   1588c:	cmp	r3, #47	; 0x2f
   15890:	beq	15884 <__assert_fail@plt+0x3f98>
   15894:	cmp	r3, #46	; 0x2e
   15898:	bne	159cc <__assert_fail@plt+0x40e0>
   1589c:	add	r2, r1, #2
   158a0:	ldrb	r3, [r2]
   158a4:	cmp	r3, #47	; 0x2f
   158a8:	beq	15884 <__assert_fail@plt+0x3f98>
   158ac:	cmp	r3, #0
   158b0:	beq	158cc <__assert_fail@plt+0x3fe0>
   158b4:	cmp	r3, #46	; 0x2e
   158b8:	bne	159d4 <__assert_fail@plt+0x40e8>
   158bc:	ldrb	r1, [r1, #3]
   158c0:	cmp	r1, #47	; 0x2f
   158c4:	cmpne	r1, #0
   158c8:	bne	159d4 <__assert_fail@plt+0x40e8>
   158cc:	mov	r0, #47	; 0x2f
   158d0:	mov	r1, r5
   158d4:	mov	r2, #0
   158d8:	mov	r3, #512	; 0x200
   158dc:	strh	r0, [r6]
   158e0:	mvn	r0, #99	; 0x63
   158e4:	bl	1155c <faccessat@plt>
   158e8:	cmp	r0, #0
   158ec:	bne	15a3c <__assert_fail@plt+0x4150>
   158f0:	mov	r8, sl
   158f4:	ldrb	r0, [r8]
   158f8:	cmp	r0, #0
   158fc:	bne	15694 <__assert_fail@plt+0x3da8>
   15900:	b	15c34 <__assert_fail@plt+0x4348>
   15904:	ldrb	r0, [r8]
   15908:	cmp	r0, #0
   1590c:	beq	15a90 <__assert_fail@plt+0x41a4>
   15910:	ldr	r9, [sp, #44]	; 0x2c
   15914:	mov	r0, #0
   15918:	add	lr, sp, #1024	; 0x400
   1591c:	mov	r1, r5
   15920:	add	r2, lr, #56	; 0x38
   15924:	strb	r0, [r6, -r9]
   15928:	ldrb	r0, [r5]
   1592c:	cmp	r0, #0
   15930:	movw	r0, #2155	; 0x86b
   15934:	movt	r0, #2
   15938:	moveq	r1, r0
   1593c:	mov	r0, #3
   15940:	bl	11898 <__xstat64@plt>
   15944:	cmp	r0, #0
   15948:	bne	15d54 <__assert_fail@plt+0x4468>
   1594c:	rsb	r0, r9, #0
   15950:	ldr	r9, [sp, #20]
   15954:	ldrb	r1, [r8]
   15958:	cmp	r9, #0
   1595c:	strb	r1, [r6, r0]
   15960:	bne	15998 <__assert_fail@plt+0x40ac>
   15964:	movw	r0, #30164	; 0x75d4
   15968:	movw	r2, #30020	; 0x7544
   1596c:	movw	r3, #30076	; 0x757c
   15970:	mov	r1, #0
   15974:	movt	r0, #1
   15978:	movt	r2, #1
   1597c:	movt	r3, #1
   15980:	str	r0, [sp]
   15984:	mov	r0, #7
   15988:	bl	16610 <__assert_fail@plt+0x4d24>
   1598c:	mov	r9, r0
   15990:	cmp	r0, #0
   15994:	beq	15d44 <__assert_fail@plt+0x4458>
   15998:	add	lr, sp, #1024	; 0x400
   1599c:	mov	r0, r9
   159a0:	mov	r1, r8
   159a4:	add	r2, lr, #56	; 0x38
   159a8:	bl	15fe4 <__assert_fail@plt+0x46f8>
   159ac:	cmp	r0, #0
   159b0:	str	r9, [sp, #20]
   159b4:	beq	15a7c <__assert_fail@plt+0x4190>
   159b8:	ldr	r7, [sp, #32]
   159bc:	cmp	r7, #2
   159c0:	bne	15d48 <__assert_fail@plt+0x445c>
   159c4:	mov	r8, sl
   159c8:	b	15b5c <__assert_fail@plt+0x4270>
   159cc:	cmp	r3, #0
   159d0:	beq	158cc <__assert_fail@plt+0x3fe0>
   159d4:	ldr	r1, [sp, #40]	; 0x28
   159d8:	cmp	r1, #0
   159dc:	beq	159fc <__assert_fail@plt+0x4110>
   159e0:	cmp	r0, #0
   159e4:	beq	15a20 <__assert_fail@plt+0x4134>
   159e8:	mov	r8, sl
   159ec:	ldrb	r0, [r8]
   159f0:	cmp	r0, #0
   159f4:	bne	15694 <__assert_fail@plt+0x3da8>
   159f8:	b	15c34 <__assert_fail@plt+0x4348>
   159fc:	bl	11748 <__errno_location@plt>
   15a00:	ldr	r0, [r0]
   15a04:	cmp	r0, #22
   15a08:	bne	15a3c <__assert_fail@plt+0x4150>
   15a0c:	mov	r8, sl
   15a10:	ldrb	r0, [r8]
   15a14:	cmp	r0, #0
   15a18:	bne	15694 <__assert_fail@plt+0x3da8>
   15a1c:	b	15c34 <__assert_fail@plt+0x4348>
   15a20:	mvn	r0, #99	; 0x63
   15a24:	mov	r1, r5
   15a28:	mov	r2, #0
   15a2c:	mov	r3, #512	; 0x200
   15a30:	bl	1155c <faccessat@plt>
   15a34:	cmp	r0, #0
   15a38:	beq	15be0 <__assert_fail@plt+0x42f4>
   15a3c:	mov	r4, #1
   15a40:	cmp	r7, #1
   15a44:	bne	15c54 <__assert_fail@plt+0x4368>
   15a48:	bl	11748 <__errno_location@plt>
   15a4c:	ldr	r0, [r0]
   15a50:	cmp	r0, #2
   15a54:	bne	15c54 <__assert_fail@plt+0x4368>
   15a58:	movw	r1, #3675	; 0xe5b
   15a5c:	mov	r0, sl
   15a60:	movt	r1, #2
   15a64:	bl	118d4 <strspn@plt>
   15a68:	ldrb	r0, [sl, r0]
   15a6c:	mov	r8, sl
   15a70:	cmp	r0, #0
   15a74:	beq	15ba8 <__assert_fail@plt+0x42bc>
   15a78:	b	15c54 <__assert_fail@plt+0x4368>
   15a7c:	add	lr, sp, #1024	; 0x400
   15a80:	mov	r0, r9
   15a84:	mov	r1, r8
   15a88:	add	r2, lr, #56	; 0x38
   15a8c:	bl	15f68 <__assert_fail@plt+0x467c>
   15a90:	mov	r0, #0
   15a94:	strb	r0, [r7, r4]
   15a98:	ldr	r0, [sp, #36]	; 0x24
   15a9c:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   15aa0:	tst	r0, #1
   15aa4:	ldr	r0, [sp, #28]
   15aa8:	subne	r0, sl, r8
   15aac:	str	r0, [sp, #28]
   15ab0:	mov	r0, sl
   15ab4:	bl	11718 <strlen@plt>
   15ab8:	adds	r9, r0, r4
   15abc:	str	r0, [sp, #44]	; 0x2c
   15ac0:	bcs	15d44 <__assert_fail@plt+0x4458>
   15ac4:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   15ac8:	cmp	r0, r9
   15acc:	bhi	15af4 <__assert_fail@plt+0x4208>
   15ad0:	sub	lr, fp, #1024	; 0x400
   15ad4:	sub	r0, lr, #40	; 0x28
   15ad8:	bl	1baf0 <__assert_fail@plt+0xa204>
   15adc:	cmp	r0, #0
   15ae0:	beq	15d44 <__assert_fail@plt+0x4458>
   15ae4:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   15ae8:	cmp	r0, r9
   15aec:	bls	15ad0 <__assert_fail@plt+0x41e4>
   15af0:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   15af4:	ldr	r0, [sp, #36]	; 0x24
   15af8:	ldr	r1, [sp, #44]	; 0x2c
   15afc:	tst	r0, #1
   15b00:	ldr	r0, [sp, #28]
   15b04:	add	r2, r1, #1
   15b08:	addne	sl, r8, r0
   15b0c:	add	r0, r8, r4
   15b10:	mov	r1, sl
   15b14:	bl	11544 <memmove@plt>
   15b18:	mov	r0, r8
   15b1c:	mov	r1, r7
   15b20:	mov	r2, r4
   15b24:	bl	11574 <memcpy@plt>
   15b28:	ldrb	r0, [r7]
   15b2c:	cmp	r0, #47	; 0x2f
   15b30:	bne	15b70 <__assert_fail@plt+0x4284>
   15b34:	mov	r0, r5
   15b38:	mov	r1, r7
   15b3c:	mov	r2, #0
   15b40:	mvn	r3, #0
   15b44:	bl	118e0 <__mempcpy_chk@plt>
   15b48:	mov	r6, r0
   15b4c:	mov	r0, #47	; 0x2f
   15b50:	strb	r0, [r6], #1
   15b54:	mov	r0, #1
   15b58:	str	r0, [sp, #36]	; 0x24
   15b5c:	add	r9, sp, #48	; 0x30
   15b60:	ldrb	r0, [r8]
   15b64:	cmp	r0, #0
   15b68:	bne	15694 <__assert_fail@plt+0x3da8>
   15b6c:	b	15c34 <__assert_fail@plt+0x4348>
   15b70:	add	r0, r5, #1
   15b74:	mov	r1, #1
   15b78:	add	r9, sp, #48	; 0x30
   15b7c:	cmp	r6, r0
   15b80:	str	r1, [sp, #36]	; 0x24
   15b84:	bls	15ba8 <__assert_fail@plt+0x42bc>
   15b88:	sub	r0, r6, #1
   15b8c:	mov	r6, r0
   15b90:	cmp	r0, r5
   15b94:	bls	15ba8 <__assert_fail@plt+0x42bc>
   15b98:	mov	r0, r6
   15b9c:	ldrb	r1, [r0, #-1]!
   15ba0:	cmp	r1, #47	; 0x2f
   15ba4:	bne	15b8c <__assert_fail@plt+0x42a0>
   15ba8:	ldrb	r0, [r8]
   15bac:	cmp	r0, #0
   15bb0:	bne	15694 <__assert_fail@plt+0x3da8>
   15bb4:	b	15c34 <__assert_fail@plt+0x4348>
   15bb8:	mov	r8, sl
   15bbc:	ldrb	r0, [r8]
   15bc0:	cmp	r0, #0
   15bc4:	bne	15694 <__assert_fail@plt+0x3da8>
   15bc8:	b	15c34 <__assert_fail@plt+0x4348>
   15bcc:	mov	r8, sl
   15bd0:	ldrb	r0, [r8]
   15bd4:	cmp	r0, #0
   15bd8:	bne	15694 <__assert_fail@plt+0x3da8>
   15bdc:	b	15c34 <__assert_fail@plt+0x4348>
   15be0:	mov	r8, sl
   15be4:	ldrb	r0, [r8]
   15be8:	cmp	r0, #0
   15bec:	bne	15694 <__assert_fail@plt+0x3da8>
   15bf0:	b	15c34 <__assert_fail@plt+0x4348>
   15bf4:	bl	11748 <__errno_location@plt>
   15bf8:	mov	r1, #2
   15bfc:	b	155c8 <__assert_fail@plt+0x3cdc>
   15c00:	mov	r1, #1024	; 0x400
   15c04:	bl	11700 <getcwd@plt>
   15c08:	cmp	r0, #0
   15c0c:	beq	15c78 <__assert_fail@plt+0x438c>
   15c10:	mov	r0, r5
   15c14:	mov	r1, #0
   15c18:	bl	115ec <rawmemchr@plt>
   15c1c:	mov	r6, r0
   15c20:	ldrb	r0, [r8]
   15c24:	cmp	r0, #0
   15c28:	bne	1566c <__assert_fail@plt+0x3d80>
   15c2c:	mov	r0, #0
   15c30:	str	r0, [sp, #20]
   15c34:	add	r0, r5, #1
   15c38:	cmp	r6, r0
   15c3c:	bls	15c50 <__assert_fail@plt+0x4364>
   15c40:	mov	r0, r6
   15c44:	ldrb	r1, [r0, #-1]!
   15c48:	cmp	r1, #47	; 0x2f
   15c4c:	moveq	r6, r0
   15c50:	mov	r4, #0
   15c54:	ldr	r0, [sp, #20]
   15c58:	cmp	r0, #0
   15c5c:	beq	15cd0 <__assert_fail@plt+0x43e4>
   15c60:	bl	1692c <__assert_fail@plt+0x5040>
   15c64:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   15c68:	ldr	r1, [sp, #12]
   15c6c:	cmp	r0, r1
   15c70:	bne	15ce0 <__assert_fail@plt+0x43f4>
   15c74:	b	15ce4 <__assert_fail@plt+0x43f8>
   15c78:	bl	11748 <__errno_location@plt>
   15c7c:	ldr	r5, [sp, #8]
   15c80:	mov	r6, r0
   15c84:	add	r9, sp, #48	; 0x30
   15c88:	ldr	r0, [r6]
   15c8c:	cmp	r0, #34	; 0x22
   15c90:	bne	15cc0 <__assert_fail@plt+0x43d4>
   15c94:	mov	r0, r9
   15c98:	bl	1ba80 <__assert_fail@plt+0xa194>
   15c9c:	cmp	r0, #0
   15ca0:	beq	15d44 <__assert_fail@plt+0x4458>
   15ca4:	ldr	r5, [sp, #48]	; 0x30
   15ca8:	ldr	r1, [sp, #52]	; 0x34
   15cac:	mov	r0, r5
   15cb0:	bl	11700 <getcwd@plt>
   15cb4:	cmp	r0, #0
   15cb8:	beq	15c88 <__assert_fail@plt+0x439c>
   15cbc:	b	15c10 <__assert_fail@plt+0x4324>
   15cc0:	cmp	r0, #12
   15cc4:	beq	15d44 <__assert_fail@plt+0x4458>
   15cc8:	mov	r4, #1
   15ccc:	mov	r6, r5
   15cd0:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   15cd4:	ldr	r1, [sp, #12]
   15cd8:	cmp	r0, r1
   15cdc:	beq	15ce4 <__assert_fail@plt+0x43f8>
   15ce0:	bl	16030 <__assert_fail@plt+0x4744>
   15ce4:	ldr	r0, [sp, #1184]	; 0x4a0
   15ce8:	ldr	r1, [sp, #16]
   15cec:	cmp	r0, r1
   15cf0:	beq	15cf8 <__assert_fail@plt+0x440c>
   15cf4:	bl	16030 <__assert_fail@plt+0x4744>
   15cf8:	cmp	r4, #0
   15cfc:	beq	15d24 <__assert_fail@plt+0x4438>
   15d00:	ldr	r0, [sp, #48]	; 0x30
   15d04:	ldr	r1, [sp, #8]
   15d08:	mov	r4, #0
   15d0c:	cmp	r0, r1
   15d10:	beq	155d0 <__assert_fail@plt+0x3ce4>
   15d14:	bl	16030 <__assert_fail@plt+0x4744>
   15d18:	mov	r0, r4
   15d1c:	sub	sp, fp, #28
   15d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d24:	mov	r0, #0
   15d28:	strb	r0, [r6], #1
   15d2c:	add	r0, sp, #48	; 0x30
   15d30:	sub	r1, r6, r5
   15d34:	bl	1ba18 <__assert_fail@plt+0xa12c>
   15d38:	mov	r4, r0
   15d3c:	cmp	r0, #0
   15d40:	bne	155d0 <__assert_fail@plt+0x3ce4>
   15d44:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   15d48:	bl	11748 <__errno_location@plt>
   15d4c:	mov	r1, #40	; 0x28
   15d50:	str	r1, [r0]
   15d54:	mov	r4, #1
   15d58:	ldr	r0, [sp, #20]
   15d5c:	cmp	r0, #0
   15d60:	bne	15c60 <__assert_fail@plt+0x4374>
   15d64:	b	15cd0 <__assert_fail@plt+0x43e4>
   15d68:	movw	r1, #9136	; 0x23b0
   15d6c:	movt	r1, #3
   15d70:	str	r0, [r1, #4]
   15d74:	bx	lr
   15d78:	movw	r1, #9136	; 0x23b0
   15d7c:	movt	r1, #3
   15d80:	strb	r0, [r1]
   15d84:	bx	lr
   15d88:	push	{r4, r5, r6, sl, fp, lr}
   15d8c:	add	fp, sp, #16
   15d90:	sub	sp, sp, #8
   15d94:	movw	r0, #9012	; 0x2334
   15d98:	movt	r0, #3
   15d9c:	ldr	r0, [r0]
   15da0:	bl	1ebb4 <__assert_fail@plt+0xd2c8>
   15da4:	cmp	r0, #0
   15da8:	beq	15dd0 <__assert_fail@plt+0x44e4>
   15dac:	movw	r5, #9136	; 0x23b0
   15db0:	movt	r5, #3
   15db4:	ldrb	r0, [r5]
   15db8:	cmp	r0, #0
   15dbc:	beq	15dfc <__assert_fail@plt+0x4510>
   15dc0:	bl	11748 <__errno_location@plt>
   15dc4:	ldr	r0, [r0]
   15dc8:	cmp	r0, #32
   15dcc:	bne	15dfc <__assert_fail@plt+0x4510>
   15dd0:	movw	r0, #9008	; 0x2330
   15dd4:	movt	r0, #3
   15dd8:	ldr	r0, [r0]
   15ddc:	bl	1ebb4 <__assert_fail@plt+0xd2c8>
   15de0:	cmp	r0, #0
   15de4:	subeq	sp, fp, #16
   15de8:	popeq	{r4, r5, r6, sl, fp, pc}
   15dec:	movw	r0, #8912	; 0x22d0
   15df0:	movt	r0, #3
   15df4:	ldr	r0, [r0]
   15df8:	bl	11568 <_exit@plt>
   15dfc:	movw	r1, #2233	; 0x8b9
   15e00:	mov	r0, #0
   15e04:	mov	r2, #5
   15e08:	movt	r1, #2
   15e0c:	bl	115b0 <dcgettext@plt>
   15e10:	ldr	r6, [r5, #4]
   15e14:	mov	r4, r0
   15e18:	bl	11748 <__errno_location@plt>
   15e1c:	ldr	r5, [r0]
   15e20:	cmp	r6, #0
   15e24:	bne	15e40 <__assert_fail@plt+0x4554>
   15e28:	movw	r2, #4076	; 0xfec
   15e2c:	mov	r0, #0
   15e30:	mov	r1, r5
   15e34:	mov	r3, r4
   15e38:	movt	r2, #2
   15e3c:	b	15e60 <__assert_fail@plt+0x4574>
   15e40:	mov	r0, r6
   15e44:	bl	1b5d8 <__assert_fail@plt+0x9cec>
   15e48:	movw	r2, #2245	; 0x8c5
   15e4c:	mov	r3, r0
   15e50:	str	r4, [sp]
   15e54:	mov	r0, #0
   15e58:	mov	r1, r5
   15e5c:	movt	r2, #2
   15e60:	bl	1167c <error@plt>
   15e64:	movw	r0, #8912	; 0x22d0
   15e68:	movt	r0, #3
   15e6c:	ldr	r0, [r0]
   15e70:	bl	11568 <_exit@plt>
   15e74:	push	{fp, lr}
   15e78:	mov	fp, sp
   15e7c:	bl	15ed4 <__assert_fail@plt+0x45e8>
   15e80:	cmp	r0, #0
   15e84:	popne	{fp, pc}
   15e88:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   15e8c:	push	{r4, r5, r6, sl, fp, lr}
   15e90:	add	fp, sp, #16
   15e94:	mov	r5, r0
   15e98:	mov	r4, r0
   15e9c:	ldrb	r6, [r5], #-1
   15ea0:	bl	1e758 <__assert_fail@plt+0xce6c>
   15ea4:	sub	r2, r0, r4
   15ea8:	sub	r0, r6, #47	; 0x2f
   15eac:	clz	r0, r0
   15eb0:	lsr	r1, r0, #5
   15eb4:	mov	r0, r2
   15eb8:	cmp	r2, r1
   15ebc:	popls	{r4, r5, r6, sl, fp, pc}
   15ec0:	ldrb	r3, [r5, r0]
   15ec4:	sub	r2, r0, #1
   15ec8:	cmp	r3, #47	; 0x2f
   15ecc:	beq	15eb4 <__assert_fail@plt+0x45c8>
   15ed0:	pop	{r4, r5, r6, sl, fp, pc}
   15ed4:	push	{r4, r5, r6, sl, fp, lr}
   15ed8:	add	fp, sp, #16
   15edc:	mov	r6, r0
   15ee0:	mov	r4, r0
   15ee4:	ldrb	r5, [r6], #-1
   15ee8:	bl	1e758 <__assert_fail@plt+0xce6c>
   15eec:	sub	r1, r0, r4
   15ef0:	sub	r0, r5, #47	; 0x2f
   15ef4:	clz	r0, r0
   15ef8:	lsr	r0, r0, #5
   15efc:	mov	r5, r1
   15f00:	cmp	r1, r0
   15f04:	bls	15f18 <__assert_fail@plt+0x462c>
   15f08:	ldrb	r2, [r6, r5]
   15f0c:	sub	r1, r5, #1
   15f10:	cmp	r2, #47	; 0x2f
   15f14:	beq	15efc <__assert_fail@plt+0x4610>
   15f18:	cmp	r5, #0
   15f1c:	mov	r0, r5
   15f20:	addeq	r0, r0, #1
   15f24:	add	r0, r0, #1
   15f28:	bl	1d610 <__assert_fail@plt+0xbd24>
   15f2c:	mov	r6, r0
   15f30:	cmp	r0, #0
   15f34:	beq	15f60 <__assert_fail@plt+0x4674>
   15f38:	mov	r0, r6
   15f3c:	mov	r1, r4
   15f40:	mov	r2, r5
   15f44:	bl	11574 <memcpy@plt>
   15f48:	cmp	r5, #0
   15f4c:	moveq	r0, #46	; 0x2e
   15f50:	moveq	r5, #1
   15f54:	strbeq	r0, [r6]
   15f58:	mov	r0, #0
   15f5c:	strb	r0, [r6, r5]
   15f60:	mov	r0, r6
   15f64:	pop	{r4, r5, r6, sl, fp, pc}
   15f68:	push	{r4, r5, r6, r7, fp, lr}
   15f6c:	add	fp, sp, #16
   15f70:	cmp	r0, #0
   15f74:	popeq	{r4, r5, r6, r7, fp, pc}
   15f78:	mov	r5, r0
   15f7c:	mov	r0, #24
   15f80:	mov	r6, r2
   15f84:	mov	r7, r1
   15f88:	bl	1c264 <__assert_fail@plt+0xa978>
   15f8c:	mov	r4, r0
   15f90:	mov	r0, r7
   15f94:	bl	1c784 <__assert_fail@plt+0xae98>
   15f98:	str	r0, [r4]
   15f9c:	ldrd	r0, [r6, #96]	; 0x60
   15fa0:	str	r1, [r4, #12]
   15fa4:	str	r0, [r4, #8]
   15fa8:	ldrd	r0, [r6]
   15fac:	str	r1, [r4, #20]
   15fb0:	str	r0, [r4, #16]
   15fb4:	mov	r0, r5
   15fb8:	mov	r1, r4
   15fbc:	bl	17248 <__assert_fail@plt+0x595c>
   15fc0:	cmp	r0, #0
   15fc4:	beq	15fe0 <__assert_fail@plt+0x46f4>
   15fc8:	cmp	r0, r4
   15fcc:	beq	15fdc <__assert_fail@plt+0x46f0>
   15fd0:	mov	r0, r4
   15fd4:	pop	{r4, r5, r6, r7, fp, lr}
   15fd8:	b	175d4 <__assert_fail@plt+0x5ce8>
   15fdc:	pop	{r4, r5, r6, r7, fp, pc}
   15fe0:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   15fe4:	cmp	r0, #0
   15fe8:	moveq	r0, #0
   15fec:	bxeq	lr
   15ff0:	push	{r4, r5, fp, lr}
   15ff4:	add	fp, sp, #8
   15ff8:	sub	sp, sp, #24
   15ffc:	str	r1, [sp]
   16000:	mov	r1, sp
   16004:	ldrd	r4, [r2, #96]	; 0x60
   16008:	str	r5, [sp, #12]
   1600c:	str	r4, [sp, #8]
   16010:	ldrd	r2, [r2]
   16014:	str	r3, [sp, #20]
   16018:	str	r2, [sp, #16]
   1601c:	bl	16348 <__assert_fail@plt+0x4a5c>
   16020:	cmp	r0, #0
   16024:	movwne	r0, #1
   16028:	sub	sp, fp, #8
   1602c:	pop	{r4, r5, fp, pc}
   16030:	push	{r4, r5, r6, sl, fp, lr}
   16034:	add	fp, sp, #16
   16038:	mov	r4, r0
   1603c:	bl	11748 <__errno_location@plt>
   16040:	ldr	r6, [r0]
   16044:	mov	r5, r0
   16048:	mov	r0, r4
   1604c:	bl	11550 <free@plt>
   16050:	str	r6, [r5]
   16054:	pop	{r4, r5, r6, sl, fp, pc}
   16058:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1605c:	add	fp, sp, #24
   16060:	sub	sp, sp, #392	; 0x188
   16064:	movw	r7, #8916	; 0x22d4
   16068:	mov	r4, r2
   1606c:	mov	r5, r0
   16070:	movt	r7, #3
   16074:	ldr	r1, [r7]
   16078:	cmn	r1, #1
   1607c:	ble	160c0 <__assert_fail@plt+0x47d4>
   16080:	mov	r6, sp
   16084:	mov	r0, r5
   16088:	cmp	r1, #0
   1608c:	beq	16104 <__assert_fail@plt+0x4818>
   16090:	mov	r1, r6
   16094:	bl	11784 <statvfs64@plt>
   16098:	cmp	r0, #0
   1609c:	blt	16160 <__assert_fail@plt+0x4874>
   160a0:	ldm	sp, {r0, r1}
   160a4:	cmp	r1, #0
   160a8:	movne	r0, r1
   160ac:	cmn	r0, #1
   160b0:	mov	r1, r0
   160b4:	movwne	r1, #0
   160b8:	movne	r0, r0
   160bc:	b	1611c <__assert_fail@plt+0x4830>
   160c0:	mov	r6, sp
   160c4:	mov	r0, r6
   160c8:	bl	115a4 <uname@plt>
   160cc:	mov	r1, #0
   160d0:	cmp	r0, #0
   160d4:	bne	160f0 <__assert_fail@plt+0x4804>
   160d8:	movw	r1, #2252	; 0x8cc
   160dc:	add	r0, r6, #130	; 0x82
   160e0:	movt	r1, #2
   160e4:	bl	11508 <strverscmp@plt>
   160e8:	mov	r1, #1
   160ec:	eor	r1, r1, r0, lsr #31
   160f0:	str	r1, [r7]
   160f4:	mov	r6, sp
   160f8:	mov	r0, r5
   160fc:	cmp	r1, #0
   16100:	bne	16090 <__assert_fail@plt+0x47a4>
   16104:	mov	r1, r6
   16108:	bl	11814 <statfs64@plt>
   1610c:	cmp	r0, #0
   16110:	blt	16160 <__assert_fail@plt+0x4874>
   16114:	ldr	r0, [sp, #60]	; 0x3c
   16118:	asr	r1, r0, #31
   1611c:	strd	r0, [r4]
   16120:	add	r0, r6, #8
   16124:	vld1.64	{d16-d17}, [r0]
   16128:	add	r0, r4, #8
   1612c:	vst1.64	{d16-d17}, [r0]
   16130:	ldr	r0, [sp, #24]
   16134:	ldr	r1, [sp, #28]
   16138:	strd	r0, [r4, #24]
   1613c:	lsr	r0, r1, #31
   16140:	strb	r0, [r4, #32]
   16144:	add	r0, r6, #32
   16148:	vld1.64	{d16-d17}, [r0]
   1614c:	add	r0, r4, #40	; 0x28
   16150:	vst1.64	{d16-d17}, [r0]
   16154:	mov	r0, #0
   16158:	sub	sp, fp, #24
   1615c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16160:	mvn	r0, #0
   16164:	sub	sp, fp, #24
   16168:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1616c:	andeq	r0, r0, r0
   16170:	ldr	r0, [r0, #8]
   16174:	bx	lr
   16178:	ldr	r0, [r0, #12]
   1617c:	bx	lr
   16180:	ldr	r0, [r0, #16]
   16184:	bx	lr
   16188:	ldm	r0, {r2, ip}
   1618c:	mov	r0, #0
   16190:	cmp	r2, ip
   16194:	bxcs	lr
   16198:	mov	r0, #0
   1619c:	ldr	r1, [r2]
   161a0:	cmp	r1, #0
   161a4:	beq	161c8 <__assert_fail@plt+0x48dc>
   161a8:	mov	r3, #0
   161ac:	mov	r1, r2
   161b0:	ldr	r1, [r1, #4]
   161b4:	add	r3, r3, #1
   161b8:	cmp	r1, #0
   161bc:	bne	161b0 <__assert_fail@plt+0x48c4>
   161c0:	cmp	r3, r0
   161c4:	movhi	r0, r3
   161c8:	add	r2, r2, #8
   161cc:	cmp	r2, ip
   161d0:	bcc	1619c <__assert_fail@plt+0x48b0>
   161d4:	bx	lr
   161d8:	push	{fp, lr}
   161dc:	mov	fp, sp
   161e0:	ldm	r0, {r3, ip}
   161e4:	mov	lr, #0
   161e8:	mov	r1, #0
   161ec:	cmp	r3, ip
   161f0:	bcs	1622c <__assert_fail@plt+0x4940>
   161f4:	mov	r1, #0
   161f8:	mov	lr, #0
   161fc:	ldr	r2, [r3]
   16200:	cmp	r2, #0
   16204:	beq	16220 <__assert_fail@plt+0x4934>
   16208:	mov	r2, r3
   1620c:	ldr	r2, [r2, #4]
   16210:	add	r1, r1, #1
   16214:	cmp	r2, #0
   16218:	bne	1620c <__assert_fail@plt+0x4920>
   1621c:	add	lr, lr, #1
   16220:	add	r3, r3, #8
   16224:	cmp	r3, ip
   16228:	bcc	161fc <__assert_fail@plt+0x4910>
   1622c:	ldr	r2, [r0, #12]
   16230:	cmp	lr, r2
   16234:	bne	1624c <__assert_fail@plt+0x4960>
   16238:	ldr	r2, [r0, #16]
   1623c:	mov	r0, #1
   16240:	cmp	r1, r2
   16244:	movne	r0, #0
   16248:	pop	{fp, pc}
   1624c:	mov	r0, #0
   16250:	pop	{fp, pc}
   16254:	nop	{0}
   16258:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1625c:	add	fp, sp, #24
   16260:	sub	sp, sp, #8
   16264:	ldr	r6, [r0]
   16268:	ldmib	r0, {r2, r7, r8}
   1626c:	ldr	r3, [r0, #16]
   16270:	mov	r4, r1
   16274:	mov	r5, #0
   16278:	cmp	r6, r2
   1627c:	bcs	162bc <__assert_fail@plt+0x49d0>
   16280:	mov	r5, #0
   16284:	ldr	r0, [r6]
   16288:	cmp	r0, #0
   1628c:	beq	162b0 <__assert_fail@plt+0x49c4>
   16290:	mov	r0, #0
   16294:	mov	r1, r6
   16298:	ldr	r1, [r1, #4]
   1629c:	add	r0, r0, #1
   162a0:	cmp	r1, #0
   162a4:	bne	16298 <__assert_fail@plt+0x49ac>
   162a8:	cmp	r0, r5
   162ac:	movhi	r5, r0
   162b0:	add	r6, r6, #8
   162b4:	cmp	r6, r2
   162b8:	bcc	16284 <__assert_fail@plt+0x4998>
   162bc:	movw	r2, #2259	; 0x8d3
   162c0:	mov	r0, r4
   162c4:	mov	r1, #1
   162c8:	movt	r2, #2
   162cc:	bl	1179c <__fprintf_chk@plt>
   162d0:	movw	r2, #2283	; 0x8eb
   162d4:	mov	r0, r4
   162d8:	mov	r1, #1
   162dc:	mov	r3, r7
   162e0:	movt	r2, #2
   162e4:	bl	1179c <__fprintf_chk@plt>
   162e8:	vldr	d16, [pc, #80]	; 16340 <__assert_fail@plt+0x4a54>
   162ec:	vmov	s0, r8
   162f0:	movw	r2, #2307	; 0x903
   162f4:	mov	r0, r4
   162f8:	mov	r1, #1
   162fc:	mov	r3, r8
   16300:	vcvt.f64.u32	d17, s0
   16304:	vmov	s0, r7
   16308:	movt	r2, #2
   1630c:	vcvt.f64.u32	d18, s0
   16310:	vmul.f64	d16, d17, d16
   16314:	vdiv.f64	d16, d16, d18
   16318:	vstr	d16, [sp]
   1631c:	bl	1179c <__fprintf_chk@plt>
   16320:	movw	r2, #2340	; 0x924
   16324:	mov	r0, r4
   16328:	mov	r1, #1
   1632c:	mov	r3, r5
   16330:	movt	r2, #2
   16334:	sub	sp, fp, #24
   16338:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1633c:	b	1179c <__fprintf_chk@plt>
   16340:	andeq	r0, r0, r0
   16344:	subsmi	r0, r9, r0
   16348:	push	{r4, r5, r6, r7, fp, lr}
   1634c:	add	fp, sp, #16
   16350:	mov	r4, r1
   16354:	ldr	r1, [r0, #8]
   16358:	ldr	r2, [r0, #24]
   1635c:	mov	r5, r0
   16360:	mov	r0, r4
   16364:	blx	r2
   16368:	ldr	r1, [r5, #8]
   1636c:	cmp	r0, r1
   16370:	bcs	163dc <__assert_fail@plt+0x4af0>
   16374:	ldr	r7, [r5]
   16378:	mov	r6, #0
   1637c:	ldr	r1, [r7, r0, lsl #3]!
   16380:	cmp	r1, #0
   16384:	cmpne	r7, #0
   16388:	bne	16398 <__assert_fail@plt+0x4aac>
   1638c:	mov	r0, r6
   16390:	pop	{r4, r5, r6, r7, fp, pc}
   16394:	ldr	r1, [r7]
   16398:	cmp	r1, r4
   1639c:	beq	163c4 <__assert_fail@plt+0x4ad8>
   163a0:	ldr	r2, [r5, #28]
   163a4:	mov	r0, r4
   163a8:	blx	r2
   163ac:	cmp	r0, #0
   163b0:	bne	163d0 <__assert_fail@plt+0x4ae4>
   163b4:	ldr	r7, [r7, #4]
   163b8:	cmp	r7, #0
   163bc:	bne	16394 <__assert_fail@plt+0x4aa8>
   163c0:	b	1638c <__assert_fail@plt+0x4aa0>
   163c4:	mov	r6, r4
   163c8:	mov	r0, r6
   163cc:	pop	{r4, r5, r6, r7, fp, pc}
   163d0:	ldr	r6, [r7]
   163d4:	mov	r0, r6
   163d8:	pop	{r4, r5, r6, r7, fp, pc}
   163dc:	bl	118bc <abort@plt>
   163e0:	ldr	r1, [r0, #16]
   163e4:	cmp	r1, #0
   163e8:	moveq	r0, #0
   163ec:	bxeq	lr
   163f0:	ldm	r0, {r1, r2}
   163f4:	cmp	r1, r2
   163f8:	bcs	16410 <__assert_fail@plt+0x4b24>
   163fc:	ldr	r0, [r1], #8
   16400:	cmp	r0, #0
   16404:	bxne	lr
   16408:	cmp	r1, r2
   1640c:	bcc	163fc <__assert_fail@plt+0x4b10>
   16410:	push	{fp, lr}
   16414:	mov	fp, sp
   16418:	bl	118bc <abort@plt>
   1641c:	push	{r4, r5, fp, lr}
   16420:	add	fp, sp, #8
   16424:	mov	r5, r1
   16428:	ldr	r1, [r0, #8]
   1642c:	ldr	r2, [r0, #24]
   16430:	mov	r4, r0
   16434:	mov	r0, r5
   16438:	blx	r2
   1643c:	ldr	r1, [r4, #8]
   16440:	cmp	r0, r1
   16444:	bcs	164a0 <__assert_fail@plt+0x4bb4>
   16448:	ldr	r1, [r4]
   1644c:	add	r2, r1, r0, lsl #3
   16450:	ldr	r3, [r2]
   16454:	ldr	r2, [r2, #4]
   16458:	cmp	r3, r5
   1645c:	beq	1646c <__assert_fail@plt+0x4b80>
   16460:	cmp	r2, #0
   16464:	bne	16450 <__assert_fail@plt+0x4b64>
   16468:	b	16478 <__assert_fail@plt+0x4b8c>
   1646c:	cmp	r2, #0
   16470:	ldrne	r0, [r2]
   16474:	popne	{r4, r5, fp, pc}
   16478:	ldr	r2, [r4, #4]
   1647c:	add	r0, r1, r0, lsl #3
   16480:	add	r1, r0, #8
   16484:	cmp	r1, r2
   16488:	movcs	r0, #0
   1648c:	popcs	{r4, r5, fp, pc}
   16490:	ldr	r0, [r1], #8
   16494:	cmp	r0, #0
   16498:	popne	{r4, r5, fp, pc}
   1649c:	b	16484 <__assert_fail@plt+0x4b98>
   164a0:	bl	118bc <abort@plt>
   164a4:	push	{r4, r5, fp, lr}
   164a8:	add	fp, sp, #8
   164ac:	ldm	r0, {r5, lr}
   164b0:	mov	ip, r0
   164b4:	mov	r0, #0
   164b8:	cmp	r5, lr
   164bc:	bcs	16518 <__assert_fail@plt+0x4c2c>
   164c0:	mov	r0, #0
   164c4:	ldr	r3, [r5]
   164c8:	cmp	r3, #0
   164cc:	cmpne	r5, #0
   164d0:	bne	164e4 <__assert_fail@plt+0x4bf8>
   164d4:	add	r5, r5, #8
   164d8:	cmp	r5, lr
   164dc:	bcc	164c4 <__assert_fail@plt+0x4bd8>
   164e0:	b	16518 <__assert_fail@plt+0x4c2c>
   164e4:	mov	r3, r5
   164e8:	cmp	r0, r2
   164ec:	popcs	{r4, r5, fp, pc}
   164f0:	ldr	r4, [r3]
   164f4:	str	r4, [r1, r0, lsl #2]
   164f8:	add	r0, r0, #1
   164fc:	ldr	r3, [r3, #4]
   16500:	cmp	r3, #0
   16504:	bne	164e8 <__assert_fail@plt+0x4bfc>
   16508:	ldr	lr, [ip, #4]
   1650c:	add	r5, r5, #8
   16510:	cmp	r5, lr
   16514:	bcc	164c4 <__assert_fail@plt+0x4bd8>
   16518:	pop	{r4, r5, fp, pc}
   1651c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16520:	add	fp, sp, #24
   16524:	mov	r5, r1
   16528:	ldr	r4, [r0]
   1652c:	ldr	r1, [r0, #4]
   16530:	mov	r6, #0
   16534:	cmp	r4, r1
   16538:	bcs	165b4 <__assert_fail@plt+0x4cc8>
   1653c:	mov	r9, r2
   16540:	mov	r8, r0
   16544:	mov	r6, #0
   16548:	ldr	r0, [r4]
   1654c:	cmp	r0, #0
   16550:	cmpne	r4, #0
   16554:	bne	16568 <__assert_fail@plt+0x4c7c>
   16558:	add	r4, r4, #8
   1655c:	cmp	r4, r1
   16560:	bcc	16548 <__assert_fail@plt+0x4c5c>
   16564:	b	165b4 <__assert_fail@plt+0x4cc8>
   16568:	mov	r1, r9
   1656c:	blx	r5
   16570:	cmp	r0, #0
   16574:	beq	165b4 <__assert_fail@plt+0x4cc8>
   16578:	mov	r7, r4
   1657c:	ldr	r7, [r7, #4]
   16580:	add	r6, r6, #1
   16584:	cmp	r7, #0
   16588:	beq	165a4 <__assert_fail@plt+0x4cb8>
   1658c:	ldr	r0, [r7]
   16590:	mov	r1, r9
   16594:	blx	r5
   16598:	cmp	r0, #0
   1659c:	bne	1657c <__assert_fail@plt+0x4c90>
   165a0:	b	165b4 <__assert_fail@plt+0x4cc8>
   165a4:	ldr	r1, [r8, #4]
   165a8:	add	r4, r4, #8
   165ac:	cmp	r4, r1
   165b0:	bcc	16548 <__assert_fail@plt+0x4c5c>
   165b4:	mov	r0, r6
   165b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   165bc:	ldrb	r2, [r0]
   165c0:	cmp	r2, #0
   165c4:	moveq	r0, #0
   165c8:	bxeq	lr
   165cc:	add	r3, r0, #1
   165d0:	mov	r0, #0
   165d4:	rsb	r0, r0, r0, lsl #5
   165d8:	uxtab	r0, r0, r2
   165dc:	udiv	r2, r0, r1
   165e0:	mls	r0, r2, r1, r0
   165e4:	ldrb	r2, [r3], #1
   165e8:	cmp	r2, #0
   165ec:	bne	165d4 <__assert_fail@plt+0x4ce8>
   165f0:	bx	lr
   165f4:	movw	r1, #2368	; 0x940
   165f8:	movt	r1, #2
   165fc:	vld1.32	{d16-d17}, [r1]!
   16600:	ldr	r1, [r1]
   16604:	vst1.32	{d16-d17}, [r0]!
   16608:	str	r1, [r0]
   1660c:	bx	lr
   16610:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16614:	add	fp, sp, #24
   16618:	movw	r9, #26716	; 0x685c
   1661c:	movw	r5, #26696	; 0x6848
   16620:	cmp	r3, #0
   16624:	mov	r6, r0
   16628:	mov	r0, #40	; 0x28
   1662c:	mov	r7, r1
   16630:	movt	r9, #1
   16634:	movt	r5, #1
   16638:	movne	r9, r3
   1663c:	cmp	r2, #0
   16640:	movne	r5, r2
   16644:	bl	1d610 <__assert_fail@plt+0xbd24>
   16648:	mov	r8, #0
   1664c:	cmp	r0, #0
   16650:	beq	16830 <__assert_fail@plt+0x4f44>
   16654:	mov	r4, r0
   16658:	cmp	r7, #0
   1665c:	beq	1670c <__assert_fail@plt+0x4e20>
   16660:	movw	r0, #2368	; 0x940
   16664:	str	r7, [r4, #20]
   16668:	movt	r0, #2
   1666c:	cmp	r7, r0
   16670:	beq	16718 <__assert_fail@plt+0x4e2c>
   16674:	vldr	s2, [pc, #444]	; 16838 <__assert_fail@plt+0x4f4c>
   16678:	vldr	s0, [r7, #8]
   1667c:	vcmpe.f32	s0, s2
   16680:	vmrs	APSR_nzcv, fpscr
   16684:	ble	166f0 <__assert_fail@plt+0x4e04>
   16688:	vldr	s4, [pc, #428]	; 1683c <__assert_fail@plt+0x4f50>
   1668c:	vcmpe.f32	s0, s4
   16690:	vmrs	APSR_nzcv, fpscr
   16694:	bpl	166f0 <__assert_fail@plt+0x4e04>
   16698:	vldr	s4, [pc, #416]	; 16840 <__assert_fail@plt+0x4f54>
   1669c:	vldr	s6, [r7, #12]
   166a0:	vcmpe.f32	s6, s4
   166a4:	vmrs	APSR_nzcv, fpscr
   166a8:	ble	166f0 <__assert_fail@plt+0x4e04>
   166ac:	vldr	s4, [r7]
   166b0:	vcmpe.f32	s4, #0.0
   166b4:	vmrs	APSR_nzcv, fpscr
   166b8:	blt	166f0 <__assert_fail@plt+0x4e04>
   166bc:	vadd.f32	s2, s4, s2
   166c0:	vcmpe.f32	s2, s0
   166c4:	vmrs	APSR_nzcv, fpscr
   166c8:	bpl	166f0 <__assert_fail@plt+0x4e04>
   166cc:	vldr	s0, [r7, #4]
   166d0:	vmov.f32	s4, #112	; 0x3f800000  1.0
   166d4:	vcmpe.f32	s0, s4
   166d8:	vmrs	APSR_nzcv, fpscr
   166dc:	bhi	166f0 <__assert_fail@plt+0x4e04>
   166e0:	vcmpe.f32	s2, s0
   166e4:	mov	r0, r7
   166e8:	vmrs	APSR_nzcv, fpscr
   166ec:	bmi	16718 <__assert_fail@plt+0x4e2c>
   166f0:	movw	r0, #2368	; 0x940
   166f4:	movt	r0, #2
   166f8:	str	r0, [r4, #20]
   166fc:	mov	r0, r4
   16700:	bl	16030 <__assert_fail@plt+0x4744>
   16704:	mov	r0, r8
   16708:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1670c:	movw	r0, #2368	; 0x940
   16710:	movt	r0, #2
   16714:	str	r0, [r4, #20]
   16718:	ldrb	r1, [r0, #16]
   1671c:	cmp	r1, #0
   16720:	bne	1674c <__assert_fail@plt+0x4e60>
   16724:	vldr	s0, [r0, #8]
   16728:	vldr	s4, [pc, #276]	; 16844 <__assert_fail@plt+0x4f58>
   1672c:	vmov	s2, r6
   16730:	vcvt.f32.u32	s2, s2
   16734:	vdiv.f32	s2, s2, s0
   16738:	vcmpe.f32	s2, s4
   1673c:	vcvt.u32.f32	s0, s2
   16740:	vmrs	APSR_nzcv, fpscr
   16744:	bge	167cc <__assert_fail@plt+0x4ee0>
   16748:	vmov	r6, s0
   1674c:	cmp	r6, #10
   16750:	movls	r6, #10
   16754:	orr	r0, r6, #1
   16758:	cmn	r0, #1
   1675c:	beq	167cc <__assert_fail@plt+0x4ee0>
   16760:	ldr	r6, [fp, #8]
   16764:	mov	r1, #3
   16768:	cmp	r0, #10
   1676c:	bcc	167a4 <__assert_fail@plt+0x4eb8>
   16770:	mov	r1, #3
   16774:	mov	r3, #9
   16778:	mov	r2, #12
   1677c:	udiv	r7, r0, r1
   16780:	mls	r7, r7, r1, r0
   16784:	cmp	r7, #0
   16788:	beq	167a4 <__assert_fail@plt+0x4eb8>
   1678c:	add	r3, r3, r2
   16790:	add	r2, r2, #8
   16794:	add	r1, r1, #2
   16798:	add	r3, r3, #4
   1679c:	cmp	r3, r0
   167a0:	bcc	1677c <__assert_fail@plt+0x4e90>
   167a4:	udiv	r2, r0, r1
   167a8:	mls	r1, r2, r1, r0
   167ac:	cmp	r1, #0
   167b0:	bne	167c4 <__assert_fail@plt+0x4ed8>
   167b4:	add	r0, r0, #2
   167b8:	cmn	r0, #1
   167bc:	bne	16764 <__assert_fail@plt+0x4e78>
   167c0:	b	167cc <__assert_fail@plt+0x4ee0>
   167c4:	cmp	r0, #536870912	; 0x20000000
   167c8:	bcc	167e4 <__assert_fail@plt+0x4ef8>
   167cc:	mov	r0, #0
   167d0:	str	r0, [r4, #8]
   167d4:	mov	r0, r4
   167d8:	bl	16030 <__assert_fail@plt+0x4744>
   167dc:	mov	r0, r8
   167e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   167e4:	cmp	r0, #0
   167e8:	str	r0, [r4, #8]
   167ec:	beq	167d4 <__assert_fail@plt+0x4ee8>
   167f0:	mov	r1, #8
   167f4:	bl	1d5bc <__assert_fail@plt+0xbcd0>
   167f8:	cmp	r0, #0
   167fc:	str	r0, [r4]
   16800:	beq	167d4 <__assert_fail@plt+0x4ee8>
   16804:	mov	r1, #0
   16808:	mov	r8, r4
   1680c:	str	r1, [r4, #12]
   16810:	str	r1, [r4, #16]
   16814:	str	r5, [r4, #24]
   16818:	str	r9, [r4, #28]
   1681c:	str	r6, [r4, #32]
   16820:	str	r1, [r4, #36]	; 0x24
   16824:	ldr	r1, [r4, #8]
   16828:	add	r0, r0, r1, lsl #3
   1682c:	str	r0, [r4, #4]
   16830:	mov	r0, r8
   16834:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16838:	stclcc	12, cr12, [ip, #820]	; 0x334
   1683c:	svccc	0x00666666
   16840:	svccc	0x008ccccd
   16844:	svcmi	0x00800000
   16848:	ror	r2, r0, #3
   1684c:	udiv	r2, r2, r1
   16850:	mul	r1, r2, r1
   16854:	rsb	r0, r1, r0, ror #3
   16858:	bx	lr
   1685c:	sub	r0, r0, r1
   16860:	clz	r0, r0
   16864:	lsr	r0, r0, #5
   16868:	bx	lr
   1686c:	push	{r4, r5, r6, r7, fp, lr}
   16870:	add	fp, sp, #16
   16874:	mov	r4, r0
   16878:	ldr	r5, [r0]
   1687c:	ldr	r0, [r0, #4]
   16880:	cmp	r5, r0
   16884:	bcs	1691c <__assert_fail@plt+0x5030>
   16888:	mov	r6, #0
   1688c:	ldr	r1, [r5]
   16890:	cmp	r1, #0
   16894:	beq	16910 <__assert_fail@plt+0x5024>
   16898:	ldr	r1, [r4, #32]
   1689c:	ldr	r7, [r5, #4]
   168a0:	cmp	r1, #0
   168a4:	mov	r0, r1
   168a8:	movwne	r0, #1
   168ac:	cmp	r7, #0
   168b0:	beq	168f4 <__assert_fail@plt+0x5008>
   168b4:	tst	r0, #1
   168b8:	beq	168c8 <__assert_fail@plt+0x4fdc>
   168bc:	ldr	r0, [r7]
   168c0:	blx	r1
   168c4:	ldr	r1, [r4, #32]
   168c8:	str	r6, [r7]
   168cc:	cmp	r1, #0
   168d0:	ldr	r0, [r4, #36]	; 0x24
   168d4:	ldr	r2, [r7, #4]
   168d8:	str	r0, [r7, #4]
   168dc:	mov	r0, r1
   168e0:	str	r7, [r4, #36]	; 0x24
   168e4:	mov	r7, r2
   168e8:	movwne	r0, #1
   168ec:	cmp	r2, #0
   168f0:	bne	168b4 <__assert_fail@plt+0x4fc8>
   168f4:	cmp	r0, #0
   168f8:	beq	16904 <__assert_fail@plt+0x5018>
   168fc:	ldr	r0, [r5]
   16900:	blx	r1
   16904:	str	r6, [r5]
   16908:	str	r6, [r5, #4]
   1690c:	ldr	r0, [r4, #4]
   16910:	add	r5, r5, #8
   16914:	cmp	r5, r0
   16918:	bcc	1688c <__assert_fail@plt+0x4fa0>
   1691c:	mov	r0, #0
   16920:	str	r0, [r4, #12]
   16924:	str	r0, [r4, #16]
   16928:	pop	{r4, r5, r6, r7, fp, pc}
   1692c:	push	{r4, r5, r6, sl, fp, lr}
   16930:	add	fp, sp, #16
   16934:	mov	r4, r0
   16938:	ldr	r0, [r0, #32]
   1693c:	cmp	r0, #0
   16940:	ldrne	r0, [r4, #16]
   16944:	cmpne	r0, #0
   16948:	beq	169b0 <__assert_fail@plt+0x50c4>
   1694c:	ldr	r5, [r4]
   16950:	ldr	r1, [r4, #4]
   16954:	cmp	r5, r1
   16958:	bcc	1696c <__assert_fail@plt+0x5080>
   1695c:	b	169b0 <__assert_fail@plt+0x50c4>
   16960:	add	r5, r5, #8
   16964:	cmp	r5, r1
   16968:	bcs	169b0 <__assert_fail@plt+0x50c4>
   1696c:	ldr	r0, [r5]
   16970:	cmp	r0, #0
   16974:	cmpne	r5, #0
   16978:	beq	16960 <__assert_fail@plt+0x5074>
   1697c:	ldr	r1, [r4, #32]
   16980:	blx	r1
   16984:	ldr	r6, [r5, #4]
   16988:	cmp	r6, #0
   1698c:	beq	169a8 <__assert_fail@plt+0x50bc>
   16990:	ldr	r1, [r4, #32]
   16994:	ldr	r0, [r6]
   16998:	blx	r1
   1699c:	ldr	r6, [r6, #4]
   169a0:	cmp	r6, #0
   169a4:	bne	16990 <__assert_fail@plt+0x50a4>
   169a8:	ldr	r1, [r4, #4]
   169ac:	b	16960 <__assert_fail@plt+0x5074>
   169b0:	ldr	r5, [r4]
   169b4:	ldr	r1, [r4, #4]
   169b8:	cmp	r5, r1
   169bc:	bcc	169d0 <__assert_fail@plt+0x50e4>
   169c0:	b	169f8 <__assert_fail@plt+0x510c>
   169c4:	add	r5, r5, #8
   169c8:	cmp	r5, r1
   169cc:	bcs	169f8 <__assert_fail@plt+0x510c>
   169d0:	ldr	r0, [r5, #4]
   169d4:	cmp	r0, #0
   169d8:	beq	169c4 <__assert_fail@plt+0x50d8>
   169dc:	ldr	r6, [r0, #4]
   169e0:	bl	16030 <__assert_fail@plt+0x4744>
   169e4:	cmp	r6, #0
   169e8:	mov	r0, r6
   169ec:	bne	169dc <__assert_fail@plt+0x50f0>
   169f0:	ldr	r1, [r4, #4]
   169f4:	b	169c4 <__assert_fail@plt+0x50d8>
   169f8:	ldr	r0, [r4, #36]	; 0x24
   169fc:	cmp	r0, #0
   16a00:	beq	16a18 <__assert_fail@plt+0x512c>
   16a04:	ldr	r5, [r0, #4]
   16a08:	bl	16030 <__assert_fail@plt+0x4744>
   16a0c:	cmp	r5, #0
   16a10:	mov	r0, r5
   16a14:	bne	16a04 <__assert_fail@plt+0x5118>
   16a18:	ldr	r0, [r4]
   16a1c:	bl	16030 <__assert_fail@plt+0x4744>
   16a20:	mov	r0, r4
   16a24:	pop	{r4, r5, r6, sl, fp, lr}
   16a28:	b	16030 <__assert_fail@plt+0x4744>
   16a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a30:	add	fp, sp, #28
   16a34:	sub	sp, sp, #44	; 0x2c
   16a38:	mov	r7, r0
   16a3c:	mov	r4, r0
   16a40:	ldr	r0, [r7, #20]!
   16a44:	ldrb	r2, [r0, #16]
   16a48:	cmp	r2, #0
   16a4c:	bne	16a7c <__assert_fail@plt+0x5190>
   16a50:	vldr	s0, [r0, #8]
   16a54:	vldr	s4, [pc, #576]	; 16c9c <__assert_fail@plt+0x53b0>
   16a58:	vmov	s2, r1
   16a5c:	mov	r5, #0
   16a60:	vcvt.f32.u32	s2, s2
   16a64:	vdiv.f32	s2, s2, s0
   16a68:	vcmpe.f32	s2, s4
   16a6c:	vcvt.u32.f32	s0, s2
   16a70:	vmrs	APSR_nzcv, fpscr
   16a74:	bge	16ba0 <__assert_fail@plt+0x52b4>
   16a78:	vmov	r1, s0
   16a7c:	cmp	r1, #10
   16a80:	mov	r5, #0
   16a84:	movls	r1, #10
   16a88:	orr	r6, r1, #1
   16a8c:	cmn	r6, #1
   16a90:	bne	16aa4 <__assert_fail@plt+0x51b8>
   16a94:	b	16ba0 <__assert_fail@plt+0x52b4>
   16a98:	add	r6, r6, #2
   16a9c:	cmn	r6, #1
   16aa0:	beq	16ba0 <__assert_fail@plt+0x52b4>
   16aa4:	mov	r0, #3
   16aa8:	cmp	r6, #10
   16aac:	bcc	16ae4 <__assert_fail@plt+0x51f8>
   16ab0:	mov	r0, #3
   16ab4:	mov	r2, #9
   16ab8:	mov	r1, #12
   16abc:	udiv	r3, r6, r0
   16ac0:	mls	r3, r3, r0, r6
   16ac4:	cmp	r3, #0
   16ac8:	beq	16ae4 <__assert_fail@plt+0x51f8>
   16acc:	add	r2, r2, r1
   16ad0:	add	r1, r1, #8
   16ad4:	add	r0, r0, #2
   16ad8:	add	r2, r2, #4
   16adc:	cmp	r2, r6
   16ae0:	bcc	16abc <__assert_fail@plt+0x51d0>
   16ae4:	udiv	r1, r6, r0
   16ae8:	mls	r0, r1, r0, r6
   16aec:	cmp	r0, #0
   16af0:	beq	16a98 <__assert_fail@plt+0x51ac>
   16af4:	sub	r0, r6, #1
   16af8:	cmn	r0, #-536870910	; 0xe0000002
   16afc:	bhi	16ba0 <__assert_fail@plt+0x52b4>
   16b00:	ldr	r0, [r4, #8]
   16b04:	cmp	r6, r0
   16b08:	bne	16b1c <__assert_fail@plt+0x5230>
   16b0c:	mov	r5, #1
   16b10:	mov	r0, r5
   16b14:	sub	sp, fp, #28
   16b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b1c:	mov	r0, r6
   16b20:	mov	r1, #8
   16b24:	bl	1d5bc <__assert_fail@plt+0xbcd0>
   16b28:	cmp	r0, #0
   16b2c:	str	r0, [sp, #4]
   16b30:	beq	16ba0 <__assert_fail@plt+0x52b4>
   16b34:	mov	r1, #0
   16b38:	add	r0, r0, r6, lsl #3
   16b3c:	str	r6, [sp, #12]
   16b40:	add	r5, sp, #4
   16b44:	mov	sl, r4
   16b48:	mov	r2, #0
   16b4c:	str	r1, [sp, #16]
   16b50:	str	r1, [sp, #20]
   16b54:	str	r0, [sp, #8]
   16b58:	add	r0, r5, #20
   16b5c:	mov	r1, r4
   16b60:	vld1.32	{d16-d17}, [r7]
   16b64:	vst1.32	{d16-d17}, [r0]
   16b68:	ldr	r0, [sl, #36]!	; 0x24
   16b6c:	str	r0, [sp, #40]	; 0x28
   16b70:	mov	r0, r5
   16b74:	bl	16ca0 <__assert_fail@plt+0x53b4>
   16b78:	cmp	r0, #0
   16b7c:	beq	16bac <__assert_fail@plt+0x52c0>
   16b80:	ldr	r0, [r4]
   16b84:	bl	16030 <__assert_fail@plt+0x4744>
   16b88:	mov	r0, #36	; 0x24
   16b8c:	vld1.32	{d16-d17}, [r5], r0
   16b90:	vst1.32	{d16-d17}, [r4], r0
   16b94:	ldr	r0, [r5]
   16b98:	mov	r5, #1
   16b9c:	str	r0, [r4]
   16ba0:	mov	r0, r5
   16ba4:	sub	sp, fp, #28
   16ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bac:	ldr	r0, [sp, #40]	; 0x28
   16bb0:	str	r0, [sl]
   16bb4:	ldr	r0, [sp, #8]
   16bb8:	ldr	r8, [sp, #4]
   16bbc:	cmp	r8, r0
   16bc0:	str	r0, [sp]
   16bc4:	bcs	16c68 <__assert_fail@plt+0x537c>
   16bc8:	mov	r9, #0
   16bcc:	ldr	r0, [r8]
   16bd0:	cmp	r0, #0
   16bd4:	beq	16c58 <__assert_fail@plt+0x536c>
   16bd8:	ldr	r6, [r8, #4]
   16bdc:	cmp	r6, #0
   16be0:	beq	16c54 <__assert_fail@plt+0x5368>
   16be4:	ldr	r1, [r4, #8]
   16be8:	ldr	r5, [r6]
   16bec:	ldr	r2, [r4, #24]
   16bf0:	mov	r0, r5
   16bf4:	blx	r2
   16bf8:	ldr	r1, [r4, #8]
   16bfc:	cmp	r0, r1
   16c00:	bcs	16c98 <__assert_fail@plt+0x53ac>
   16c04:	ldr	r3, [r4]
   16c08:	ldr	r2, [r6, #4]
   16c0c:	ldr	r7, [r3, r0, lsl #3]
   16c10:	cmp	r7, #0
   16c14:	beq	16c24 <__assert_fail@plt+0x5338>
   16c18:	add	r0, r3, r0, lsl #3
   16c1c:	add	r0, r0, #4
   16c20:	b	16c3c <__assert_fail@plt+0x5350>
   16c24:	str	r5, [r3, r0, lsl #3]
   16c28:	ldr	r0, [r4, #12]
   16c2c:	add	r0, r0, #1
   16c30:	str	r0, [r4, #12]
   16c34:	mov	r0, sl
   16c38:	str	r9, [r6]
   16c3c:	ldr	r3, [r0]
   16c40:	cmp	r2, #0
   16c44:	str	r3, [r6, #4]
   16c48:	str	r6, [r0]
   16c4c:	mov	r6, r2
   16c50:	bne	16be8 <__assert_fail@plt+0x52fc>
   16c54:	str	r9, [r8, #4]
   16c58:	ldr	r0, [sp]
   16c5c:	add	r8, r8, #8
   16c60:	cmp	r8, r0
   16c64:	bcc	16bcc <__assert_fail@plt+0x52e0>
   16c68:	add	r1, sp, #4
   16c6c:	mov	r0, r4
   16c70:	mov	r2, #0
   16c74:	mov	r5, #0
   16c78:	bl	16ca0 <__assert_fail@plt+0x53b4>
   16c7c:	cmp	r0, #0
   16c80:	beq	16c98 <__assert_fail@plt+0x53ac>
   16c84:	ldr	r0, [sp, #4]
   16c88:	bl	16030 <__assert_fail@plt+0x4744>
   16c8c:	mov	r0, r5
   16c90:	sub	sp, fp, #28
   16c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c98:	bl	118bc <abort@plt>
   16c9c:	svcmi	0x00800000
   16ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ca4:	add	fp, sp, #28
   16ca8:	sub	sp, sp, #4
   16cac:	ldr	r8, [r1]
   16cb0:	ldr	r3, [r1, #4]
   16cb4:	mov	r6, r0
   16cb8:	mov	r0, #1
   16cbc:	str	r1, [sp]
   16cc0:	cmp	r8, r3
   16cc4:	bcs	16ec4 <__assert_fail@plt+0x55d8>
   16cc8:	add	r9, r6, #36	; 0x24
   16ccc:	cmp	r2, #0
   16cd0:	beq	16d7c <__assert_fail@plt+0x5490>
   16cd4:	mov	sl, #0
   16cd8:	ldr	r1, [r8]
   16cdc:	cmp	r1, #0
   16ce0:	beq	16d6c <__assert_fail@plt+0x5480>
   16ce4:	ldr	r7, [r8, #4]
   16ce8:	cmp	r7, #0
   16cec:	beq	16d68 <__assert_fail@plt+0x547c>
   16cf0:	ldr	r1, [r6, #8]
   16cf4:	ldr	r4, [r7]
   16cf8:	ldr	r2, [r6, #24]
   16cfc:	mov	r0, r4
   16d00:	blx	r2
   16d04:	ldr	r1, [r6, #8]
   16d08:	cmp	r0, r1
   16d0c:	bcs	16ed8 <__assert_fail@plt+0x55ec>
   16d10:	ldr	r3, [r6]
   16d14:	ldr	r2, [r7, #4]
   16d18:	ldr	r5, [r3, r0, lsl #3]
   16d1c:	cmp	r5, #0
   16d20:	beq	16d30 <__assert_fail@plt+0x5444>
   16d24:	add	r0, r3, r0, lsl #3
   16d28:	add	r0, r0, #4
   16d2c:	b	16d48 <__assert_fail@plt+0x545c>
   16d30:	str	r4, [r3, r0, lsl #3]
   16d34:	ldr	r0, [r6, #12]
   16d38:	add	r0, r0, #1
   16d3c:	str	r0, [r6, #12]
   16d40:	mov	r0, r9
   16d44:	str	sl, [r7]
   16d48:	ldr	r3, [r0]
   16d4c:	cmp	r2, #0
   16d50:	str	r3, [r7, #4]
   16d54:	str	r7, [r0]
   16d58:	mov	r7, r2
   16d5c:	bne	16cf4 <__assert_fail@plt+0x5408>
   16d60:	ldr	r0, [sp]
   16d64:	ldr	r3, [r0, #4]
   16d68:	str	sl, [r8, #4]
   16d6c:	add	r8, r8, #8
   16d70:	cmp	r8, r3
   16d74:	bcc	16cd8 <__assert_fail@plt+0x53ec>
   16d78:	b	16ec0 <__assert_fail@plt+0x55d4>
   16d7c:	mov	r5, #0
   16d80:	ldr	sl, [r8]
   16d84:	cmp	sl, #0
   16d88:	beq	16eb4 <__assert_fail@plt+0x55c8>
   16d8c:	ldr	r7, [r8, #4]
   16d90:	ldr	r1, [r6, #8]
   16d94:	cmp	r7, #0
   16d98:	beq	16e14 <__assert_fail@plt+0x5528>
   16d9c:	mov	sl, #0
   16da0:	ldr	r4, [r7]
   16da4:	ldr	r2, [r6, #24]
   16da8:	mov	r0, r4
   16dac:	blx	r2
   16db0:	ldr	r1, [r6, #8]
   16db4:	cmp	r0, r1
   16db8:	bcs	16ed8 <__assert_fail@plt+0x55ec>
   16dbc:	ldr	r3, [r6]
   16dc0:	ldr	r2, [r7, #4]
   16dc4:	ldr	r5, [r3, r0, lsl #3]
   16dc8:	cmp	r5, #0
   16dcc:	beq	16ddc <__assert_fail@plt+0x54f0>
   16dd0:	add	r0, r3, r0, lsl #3
   16dd4:	add	r0, r0, #4
   16dd8:	b	16df4 <__assert_fail@plt+0x5508>
   16ddc:	str	r4, [r3, r0, lsl #3]
   16de0:	ldr	r0, [r6, #12]
   16de4:	add	r0, r0, #1
   16de8:	str	r0, [r6, #12]
   16dec:	mov	r0, r9
   16df0:	str	sl, [r7]
   16df4:	ldr	r3, [r0]
   16df8:	cmp	r2, #0
   16dfc:	str	r3, [r7, #4]
   16e00:	str	r7, [r0]
   16e04:	mov	r7, r2
   16e08:	bne	16da0 <__assert_fail@plt+0x54b4>
   16e0c:	ldr	sl, [r8]
   16e10:	mov	r5, #0
   16e14:	str	r5, [r8, #4]
   16e18:	mov	r0, sl
   16e1c:	ldr	r2, [r6, #24]
   16e20:	blx	r2
   16e24:	mov	r4, r0
   16e28:	ldr	r0, [r6, #8]
   16e2c:	cmp	r4, r0
   16e30:	bcs	16ed8 <__assert_fail@plt+0x55ec>
   16e34:	ldr	r7, [r6]
   16e38:	ldr	r0, [r7, r4, lsl #3]
   16e3c:	cmp	r0, #0
   16e40:	beq	16e60 <__assert_fail@plt+0x5574>
   16e44:	ldr	r0, [r9]
   16e48:	cmp	r0, #0
   16e4c:	beq	16e74 <__assert_fail@plt+0x5588>
   16e50:	mov	r1, r0
   16e54:	ldr	r2, [r1, #4]!
   16e58:	str	r2, [r9]
   16e5c:	b	16e88 <__assert_fail@plt+0x559c>
   16e60:	str	sl, [r7, r4, lsl #3]
   16e64:	ldr	r0, [r6, #12]
   16e68:	add	r0, r0, #1
   16e6c:	str	r0, [r6, #12]
   16e70:	b	16e9c <__assert_fail@plt+0x55b0>
   16e74:	mov	r0, #8
   16e78:	bl	1d610 <__assert_fail@plt+0xbd24>
   16e7c:	cmp	r0, #0
   16e80:	beq	16ecc <__assert_fail@plt+0x55e0>
   16e84:	add	r1, r0, #4
   16e88:	str	sl, [r0]
   16e8c:	add	r2, r7, r4, lsl #3
   16e90:	ldr	r3, [r2, #4]
   16e94:	str	r3, [r1]
   16e98:	str	r0, [r2, #4]
   16e9c:	ldr	r0, [sp]
   16ea0:	str	r5, [r8]
   16ea4:	ldr	r1, [r0, #12]
   16ea8:	ldr	r3, [r0, #4]
   16eac:	sub	r1, r1, #1
   16eb0:	str	r1, [r0, #12]
   16eb4:	add	r8, r8, #8
   16eb8:	cmp	r8, r3
   16ebc:	bcc	16d80 <__assert_fail@plt+0x5494>
   16ec0:	mov	r0, #1
   16ec4:	sub	sp, fp, #28
   16ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ecc:	mov	r0, #0
   16ed0:	sub	sp, fp, #28
   16ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ed8:	bl	118bc <abort@plt>
   16edc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ee0:	add	fp, sp, #28
   16ee4:	sub	sp, sp, #4
   16ee8:	cmp	r1, #0
   16eec:	beq	17230 <__assert_fail@plt+0x5944>
   16ef0:	mov	r8, r2
   16ef4:	mov	sl, r1
   16ef8:	ldr	r1, [r0, #8]
   16efc:	ldr	r2, [r0, #24]
   16f00:	mov	r4, r0
   16f04:	mov	r0, sl
   16f08:	blx	r2
   16f0c:	mov	r7, r0
   16f10:	ldr	r0, [r4, #8]
   16f14:	cmp	r7, r0
   16f18:	bcs	17230 <__assert_fail@plt+0x5944>
   16f1c:	ldr	r5, [r4]
   16f20:	mov	r9, r5
   16f24:	ldr	r1, [r9, r7, lsl #3]!
   16f28:	cmp	r1, #0
   16f2c:	beq	16fc0 <__assert_fail@plt+0x56d4>
   16f30:	cmp	r1, sl
   16f34:	beq	16f60 <__assert_fail@plt+0x5674>
   16f38:	ldr	r2, [r4, #28]
   16f3c:	mov	r0, sl
   16f40:	blx	r2
   16f44:	cmp	r0, #0
   16f48:	mov	r6, r9
   16f4c:	beq	16f7c <__assert_fail@plt+0x5690>
   16f50:	ldr	r0, [r6]
   16f54:	cmp	r0, #0
   16f58:	bne	16f64 <__assert_fail@plt+0x5678>
   16f5c:	b	16fc0 <__assert_fail@plt+0x56d4>
   16f60:	mov	r0, sl
   16f64:	cmp	r8, #0
   16f68:	mov	r7, #0
   16f6c:	strne	r0, [r8]
   16f70:	mov	r0, r7
   16f74:	sub	sp, fp, #28
   16f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f7c:	add	r6, r5, r7, lsl #3
   16f80:	ldr	r0, [r6, #4]!
   16f84:	cmp	r0, #0
   16f88:	beq	16fc0 <__assert_fail@plt+0x56d4>
   16f8c:	ldr	r1, [r0]
   16f90:	cmp	r1, sl
   16f94:	beq	16fb4 <__assert_fail@plt+0x56c8>
   16f98:	ldr	r2, [r4, #28]
   16f9c:	mov	r0, sl
   16fa0:	blx	r2
   16fa4:	ldr	r6, [r6]
   16fa8:	cmp	r0, #0
   16fac:	beq	16f80 <__assert_fail@plt+0x5694>
   16fb0:	b	16f50 <__assert_fail@plt+0x5664>
   16fb4:	mov	r0, sl
   16fb8:	cmp	r0, #0
   16fbc:	bne	16f64 <__assert_fail@plt+0x5678>
   16fc0:	vldr	s0, [r4, #8]
   16fc4:	vldr	s2, [r4, #12]
   16fc8:	ldr	r0, [r4, #20]
   16fcc:	vcvt.f32.u32	s0, s0
   16fd0:	vcvt.f32.u32	s4, s2
   16fd4:	vldr	s2, [r0, #8]
   16fd8:	vmul.f32	s6, s2, s0
   16fdc:	vcmpe.f32	s6, s4
   16fe0:	vmrs	APSR_nzcv, fpscr
   16fe4:	bpl	17148 <__assert_fail@plt+0x585c>
   16fe8:	movw	r1, #2368	; 0x940
   16fec:	movt	r1, #2
   16ff0:	cmp	r0, r1
   16ff4:	beq	17090 <__assert_fail@plt+0x57a4>
   16ff8:	vldr	s6, [pc, #564]	; 17234 <__assert_fail@plt+0x5948>
   16ffc:	vcmpe.f32	s2, s6
   17000:	vmrs	APSR_nzcv, fpscr
   17004:	ble	1706c <__assert_fail@plt+0x5780>
   17008:	vldr	s8, [pc, #552]	; 17238 <__assert_fail@plt+0x594c>
   1700c:	vcmpe.f32	s2, s8
   17010:	vmrs	APSR_nzcv, fpscr
   17014:	bpl	1706c <__assert_fail@plt+0x5780>
   17018:	vldr	s8, [pc, #540]	; 1723c <__assert_fail@plt+0x5950>
   1701c:	vldr	s10, [r0, #12]
   17020:	vcmpe.f32	s10, s8
   17024:	vmrs	APSR_nzcv, fpscr
   17028:	ble	1706c <__assert_fail@plt+0x5780>
   1702c:	vldr	s8, [r0]
   17030:	vcmpe.f32	s8, #0.0
   17034:	vmrs	APSR_nzcv, fpscr
   17038:	blt	1706c <__assert_fail@plt+0x5780>
   1703c:	vadd.f32	s6, s8, s6
   17040:	vcmpe.f32	s6, s2
   17044:	vmrs	APSR_nzcv, fpscr
   17048:	bpl	1706c <__assert_fail@plt+0x5780>
   1704c:	vldr	s8, [r0, #4]
   17050:	vmov.f32	s10, #112	; 0x3f800000  1.0
   17054:	vcmpe.f32	s8, s10
   17058:	vmrs	APSR_nzcv, fpscr
   1705c:	bhi	1706c <__assert_fail@plt+0x5780>
   17060:	vcmpe.f32	s6, s8
   17064:	vmrs	APSR_nzcv, fpscr
   17068:	bmi	1707c <__assert_fail@plt+0x5790>
   1706c:	vldr	s2, [pc, #460]	; 17240 <__assert_fail@plt+0x5954>
   17070:	movw	r0, #2368	; 0x940
   17074:	movt	r0, #2
   17078:	str	r0, [r4, #20]
   1707c:	vmul.f32	s6, s2, s0
   17080:	vcmpe.f32	s6, s4
   17084:	vmrs	APSR_nzcv, fpscr
   17088:	bmi	170a4 <__assert_fail@plt+0x57b8>
   1708c:	b	17148 <__assert_fail@plt+0x585c>
   17090:	mov	r0, r1
   17094:	vmul.f32	s6, s2, s0
   17098:	vcmpe.f32	s6, s4
   1709c:	vmrs	APSR_nzcv, fpscr
   170a0:	bpl	17148 <__assert_fail@plt+0x585c>
   170a4:	vldr	s4, [r0, #12]
   170a8:	ldrb	r0, [r0, #16]
   170ac:	mvn	r7, #0
   170b0:	vmul.f32	s0, s4, s0
   170b4:	vldr	s4, [pc, #392]	; 17244 <__assert_fail@plt+0x5958>
   170b8:	cmp	r0, #0
   170bc:	vmul.f32	s2, s2, s0
   170c0:	vseleq.f32	s0, s2, s0
   170c4:	vcmpe.f32	s0, s4
   170c8:	vmrs	APSR_nzcv, fpscr
   170cc:	bge	171c4 <__assert_fail@plt+0x58d8>
   170d0:	vcvt.u32.f32	s0, s0
   170d4:	mov	r0, r4
   170d8:	vmov	r1, s0
   170dc:	bl	16a2c <__assert_fail@plt+0x5140>
   170e0:	cmp	r0, #0
   170e4:	beq	171c4 <__assert_fail@plt+0x58d8>
   170e8:	ldr	r1, [r4, #8]
   170ec:	ldr	r2, [r4, #24]
   170f0:	mov	r0, sl
   170f4:	blx	r2
   170f8:	mov	r7, r0
   170fc:	ldr	r0, [r4, #8]
   17100:	cmp	r7, r0
   17104:	bcs	17230 <__assert_fail@plt+0x5944>
   17108:	ldr	r5, [r4]
   1710c:	mov	r9, r5
   17110:	ldr	r1, [r9, r7, lsl #3]!
   17114:	cmp	r1, #0
   17118:	beq	17170 <__assert_fail@plt+0x5884>
   1711c:	cmp	r1, sl
   17120:	mov	r0, sl
   17124:	beq	17140 <__assert_fail@plt+0x5854>
   17128:	ldr	r2, [r4, #28]
   1712c:	mov	r0, sl
   17130:	blx	r2
   17134:	cmp	r0, #0
   17138:	beq	171e0 <__assert_fail@plt+0x58f4>
   1713c:	ldr	r0, [r9]
   17140:	cmp	r0, #0
   17144:	bne	17230 <__assert_fail@plt+0x5944>
   17148:	ldr	r0, [r9]
   1714c:	cmp	r0, #0
   17150:	beq	17170 <__assert_fail@plt+0x5884>
   17154:	ldr	r0, [r4, #36]	; 0x24
   17158:	cmp	r0, #0
   1715c:	beq	17190 <__assert_fail@plt+0x58a4>
   17160:	mov	r1, r0
   17164:	ldr	r2, [r1, #4]!
   17168:	str	r2, [r4, #36]	; 0x24
   1716c:	b	171a4 <__assert_fail@plt+0x58b8>
   17170:	str	sl, [r9]
   17174:	ldr	r0, [r4, #12]
   17178:	ldr	r1, [r4, #16]
   1717c:	add	r0, r0, #1
   17180:	add	r1, r1, #1
   17184:	str	r0, [r4, #12]
   17188:	str	r1, [r4, #16]
   1718c:	b	171c0 <__assert_fail@plt+0x58d4>
   17190:	mov	r0, #8
   17194:	bl	1d610 <__assert_fail@plt+0xbd24>
   17198:	cmp	r0, #0
   1719c:	beq	171d0 <__assert_fail@plt+0x58e4>
   171a0:	add	r1, r0, #4
   171a4:	str	sl, [r0]
   171a8:	ldr	r2, [r9, #4]
   171ac:	str	r2, [r1]
   171b0:	str	r0, [r9, #4]
   171b4:	ldr	r0, [r4, #16]
   171b8:	add	r0, r0, #1
   171bc:	str	r0, [r4, #16]
   171c0:	mov	r7, #1
   171c4:	mov	r0, r7
   171c8:	sub	sp, fp, #28
   171cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171d0:	mvn	r7, #0
   171d4:	mov	r0, r7
   171d8:	sub	sp, fp, #28
   171dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171e0:	add	r6, r5, r7, lsl #3
   171e4:	ldr	r0, [r6, #4]!
   171e8:	cmp	r0, #0
   171ec:	beq	17148 <__assert_fail@plt+0x585c>
   171f0:	ldr	r1, [r0]
   171f4:	cmp	r1, sl
   171f8:	beq	17224 <__assert_fail@plt+0x5938>
   171fc:	ldr	r2, [r4, #28]
   17200:	mov	r0, sl
   17204:	blx	r2
   17208:	ldr	r6, [r6]
   1720c:	cmp	r0, #0
   17210:	beq	171e4 <__assert_fail@plt+0x58f8>
   17214:	ldr	r0, [r6]
   17218:	cmp	r0, #0
   1721c:	beq	17148 <__assert_fail@plt+0x585c>
   17220:	b	17230 <__assert_fail@plt+0x5944>
   17224:	mov	r0, sl
   17228:	cmp	r0, #0
   1722c:	beq	17148 <__assert_fail@plt+0x585c>
   17230:	bl	118bc <abort@plt>
   17234:	stclcc	12, cr12, [ip, #820]	; 0x334
   17238:	svccc	0x00666666
   1723c:	svccc	0x008ccccd
   17240:	svccc	0x004ccccd
   17244:	svcmi	0x00800000
   17248:	push	{r4, sl, fp, lr}
   1724c:	add	fp, sp, #8
   17250:	sub	sp, sp, #8
   17254:	add	r2, sp, #4
   17258:	mov	r4, r1
   1725c:	bl	16edc <__assert_fail@plt+0x55f0>
   17260:	cmn	r0, #1
   17264:	beq	17280 <__assert_fail@plt+0x5994>
   17268:	ldr	r1, [sp, #4]
   1726c:	cmp	r0, #0
   17270:	moveq	r4, r1
   17274:	mov	r0, r4
   17278:	sub	sp, fp, #8
   1727c:	pop	{r4, sl, fp, pc}
   17280:	mov	r4, #0
   17284:	mov	r0, r4
   17288:	sub	sp, fp, #8
   1728c:	pop	{r4, sl, fp, pc}
   17290:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17294:	add	fp, sp, #24
   17298:	mov	r9, r1
   1729c:	ldr	r1, [r0, #8]
   172a0:	ldr	r2, [r0, #24]
   172a4:	mov	r5, r0
   172a8:	mov	r0, r9
   172ac:	blx	r2
   172b0:	mov	r7, r0
   172b4:	ldr	r0, [r5, #8]
   172b8:	cmp	r7, r0
   172bc:	bcs	1752c <__assert_fail@plt+0x5c40>
   172c0:	ldr	r6, [r5]
   172c4:	mov	r8, #0
   172c8:	mov	r4, r6
   172cc:	ldr	r1, [r4, r7, lsl #3]!
   172d0:	cmp	r1, #0
   172d4:	beq	17388 <__assert_fail@plt+0x5a9c>
   172d8:	cmp	r1, r9
   172dc:	beq	172f8 <__assert_fail@plt+0x5a0c>
   172e0:	ldr	r2, [r5, #28]
   172e4:	mov	r0, r9
   172e8:	blx	r2
   172ec:	cmp	r0, #0
   172f0:	beq	17330 <__assert_fail@plt+0x5a44>
   172f4:	ldr	r9, [r4]
   172f8:	add	r0, r6, r7, lsl #3
   172fc:	ldr	r0, [r0, #4]
   17300:	cmp	r0, #0
   17304:	beq	17378 <__assert_fail@plt+0x5a8c>
   17308:	ldm	r0, {r1, r2}
   1730c:	stm	r4, {r1, r2}
   17310:	mov	r1, #0
   17314:	str	r1, [r0]
   17318:	ldr	r1, [r5, #36]	; 0x24
   1731c:	str	r1, [r0, #4]
   17320:	str	r0, [r5, #36]	; 0x24
   17324:	cmp	r9, #0
   17328:	bne	173c0 <__assert_fail@plt+0x5ad4>
   1732c:	b	17388 <__assert_fail@plt+0x5a9c>
   17330:	add	r7, r6, r7, lsl #3
   17334:	ldr	r0, [r7, #4]!
   17338:	cmp	r0, #0
   1733c:	beq	17388 <__assert_fail@plt+0x5a9c>
   17340:	ldr	r1, [r0]
   17344:	cmp	r1, r9
   17348:	beq	17390 <__assert_fail@plt+0x5aa4>
   1734c:	ldr	r2, [r5, #28]
   17350:	mov	r0, r9
   17354:	blx	r2
   17358:	ldr	r1, [r7]
   1735c:	cmp	r0, #0
   17360:	bne	17398 <__assert_fail@plt+0x5aac>
   17364:	ldr	r0, [r1, #4]!
   17368:	cmp	r0, #0
   1736c:	mov	r7, r1
   17370:	bne	17340 <__assert_fail@plt+0x5a54>
   17374:	b	17388 <__assert_fail@plt+0x5a9c>
   17378:	mov	r0, #0
   1737c:	str	r0, [r4]
   17380:	cmp	r9, #0
   17384:	bne	173c0 <__assert_fail@plt+0x5ad4>
   17388:	mov	r0, r8
   1738c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17390:	mov	r1, r0
   17394:	b	1739c <__assert_fail@plt+0x5ab0>
   17398:	ldr	r9, [r1]
   1739c:	ldr	r0, [r1, #4]
   173a0:	str	r0, [r7]
   173a4:	mov	r0, #0
   173a8:	str	r0, [r1]
   173ac:	ldr	r0, [r5, #36]	; 0x24
   173b0:	str	r0, [r1, #4]
   173b4:	str	r1, [r5, #36]	; 0x24
   173b8:	cmp	r9, #0
   173bc:	beq	17388 <__assert_fail@plt+0x5a9c>
   173c0:	ldr	r0, [r5, #16]
   173c4:	sub	r0, r0, #1
   173c8:	str	r0, [r5, #16]
   173cc:	ldr	r0, [r4]
   173d0:	cmp	r0, #0
   173d4:	bne	174ec <__assert_fail@plt+0x5c00>
   173d8:	ldr	r0, [r5, #12]
   173dc:	vldr	s0, [r5, #8]
   173e0:	sub	r1, r0, #1
   173e4:	str	r1, [r5, #12]
   173e8:	vmov	s2, r1
   173ec:	ldr	r0, [r5, #20]
   173f0:	vcvt.f32.u32	s0, s0
   173f4:	vcvt.f32.u32	s2, s2
   173f8:	vldr	s4, [r0]
   173fc:	vmul.f32	s6, s4, s0
   17400:	vcmpe.f32	s6, s2
   17404:	vmrs	APSR_nzcv, fpscr
   17408:	ble	174ec <__assert_fail@plt+0x5c00>
   1740c:	movw	r1, #2368	; 0x940
   17410:	movt	r1, #2
   17414:	cmp	r0, r1
   17418:	beq	17480 <__assert_fail@plt+0x5b94>
   1741c:	vldr	s8, [pc, #268]	; 17530 <__assert_fail@plt+0x5c44>
   17420:	vldr	s6, [r0, #8]
   17424:	vcmpe.f32	s6, s8
   17428:	vmrs	APSR_nzcv, fpscr
   1742c:	ble	1745c <__assert_fail@plt+0x5b70>
   17430:	vldr	s10, [pc, #252]	; 17534 <__assert_fail@plt+0x5c48>
   17434:	vcmpe.f32	s6, s10
   17438:	vmrs	APSR_nzcv, fpscr
   1743c:	bpl	1745c <__assert_fail@plt+0x5b70>
   17440:	vcmpe.f32	s4, #0.0
   17444:	vmrs	APSR_nzcv, fpscr
   17448:	vldrge	s10, [r0, #12]
   1744c:	vldrge	s12, [pc, #228]	; 17538 <__assert_fail@plt+0x5c4c>
   17450:	vcmpege.f32	s10, s12
   17454:	vmrsge	APSR_nzcv, fpscr
   17458:	bgt	174f8 <__assert_fail@plt+0x5c0c>
   1745c:	vldr	s4, [pc, #216]	; 1753c <__assert_fail@plt+0x5c50>
   17460:	movw	r0, #2368	; 0x940
   17464:	movt	r0, #2
   17468:	str	r0, [r5, #20]
   1746c:	vmul.f32	s4, s4, s0
   17470:	vcmpe.f32	s4, s2
   17474:	vmrs	APSR_nzcv, fpscr
   17478:	bgt	17494 <__assert_fail@plt+0x5ba8>
   1747c:	b	174ec <__assert_fail@plt+0x5c00>
   17480:	mov	r0, r1
   17484:	vmul.f32	s4, s4, s0
   17488:	vcmpe.f32	s4, s2
   1748c:	vmrs	APSR_nzcv, fpscr
   17490:	ble	174ec <__assert_fail@plt+0x5c00>
   17494:	ldrb	r1, [r0, #16]
   17498:	vldr	s2, [r0, #4]
   1749c:	cmp	r1, #0
   174a0:	vmul.f32	s0, s2, s0
   174a4:	vldreq	s2, [r0, #8]
   174a8:	mov	r0, r5
   174ac:	vmuleq.f32	s0, s0, s2
   174b0:	vcvt.u32.f32	s0, s0
   174b4:	vmov	r1, s0
   174b8:	bl	16a2c <__assert_fail@plt+0x5140>
   174bc:	cmp	r0, #0
   174c0:	bne	174ec <__assert_fail@plt+0x5c00>
   174c4:	ldr	r0, [r5, #36]	; 0x24
   174c8:	cmp	r0, #0
   174cc:	beq	174e4 <__assert_fail@plt+0x5bf8>
   174d0:	ldr	r4, [r0, #4]
   174d4:	bl	16030 <__assert_fail@plt+0x4744>
   174d8:	cmp	r4, #0
   174dc:	mov	r0, r4
   174e0:	bne	174d0 <__assert_fail@plt+0x5be4>
   174e4:	mov	r0, #0
   174e8:	str	r0, [r5, #36]	; 0x24
   174ec:	mov	r8, r9
   174f0:	mov	r0, r8
   174f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   174f8:	vadd.f32	s8, s4, s8
   174fc:	vcmpe.f32	s8, s6
   17500:	vmrs	APSR_nzcv, fpscr
   17504:	bpl	1745c <__assert_fail@plt+0x5b70>
   17508:	vldr	s6, [r0, #4]
   1750c:	vmov.f32	s10, #112	; 0x3f800000  1.0
   17510:	vcmpe.f32	s6, s10
   17514:	vmrs	APSR_nzcv, fpscr
   17518:	bhi	1745c <__assert_fail@plt+0x5b70>
   1751c:	vcmpe.f32	s8, s6
   17520:	vmrs	APSR_nzcv, fpscr
   17524:	bmi	17484 <__assert_fail@plt+0x5b98>
   17528:	b	1745c <__assert_fail@plt+0x5b70>
   1752c:	bl	118bc <abort@plt>
   17530:	stclcc	12, cr12, [ip, #820]	; 0x334
   17534:	svccc	0x00666666
   17538:	svccc	0x008ccccd
   1753c:	andeq	r0, r0, r0
   17540:	b	17290 <__assert_fail@plt+0x59a4>
   17544:	push	{r4, r5, fp, lr}
   17548:	add	fp, sp, #8
   1754c:	mov	r5, r0
   17550:	ldr	r0, [r0]
   17554:	mov	r4, r1
   17558:	bl	1ee8c <__assert_fail@plt+0xd5a0>
   1755c:	ldrd	r2, [r5, #8]
   17560:	eor	r0, r2, r0
   17564:	mov	r1, r3
   17568:	mov	r2, r4
   1756c:	mov	r3, #0
   17570:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   17574:	mov	r0, r2
   17578:	pop	{r4, r5, fp, pc}
   1757c:	push	{r4, r5, r6, r7, fp, lr}
   17580:	add	fp, sp, #16
   17584:	ldrd	r2, [r1, #8]
   17588:	ldrd	r4, [r0, #8]
   1758c:	eor	r3, r5, r3
   17590:	eor	r2, r4, r2
   17594:	orrs	r2, r2, r3
   17598:	mov	r2, #0
   1759c:	bne	175cc <__assert_fail@plt+0x5ce0>
   175a0:	ldrd	r4, [r1, #16]
   175a4:	ldrd	r6, [r0, #16]
   175a8:	eor	r3, r7, r5
   175ac:	eor	r7, r6, r4
   175b0:	orrs	r3, r7, r3
   175b4:	bne	175cc <__assert_fail@plt+0x5ce0>
   175b8:	ldr	r1, [r1]
   175bc:	ldr	r0, [r0]
   175c0:	bl	11520 <strcmp@plt>
   175c4:	clz	r0, r0
   175c8:	lsr	r2, r0, #5
   175cc:	mov	r0, r2
   175d0:	pop	{r4, r5, r6, r7, fp, pc}
   175d4:	push	{r4, sl, fp, lr}
   175d8:	add	fp, sp, #8
   175dc:	mov	r4, r0
   175e0:	ldr	r0, [r0]
   175e4:	bl	16030 <__assert_fail@plt+0x4744>
   175e8:	mov	r0, r4
   175ec:	pop	{r4, sl, fp, lr}
   175f0:	b	16030 <__assert_fail@plt+0x4744>
   175f4:	andeq	r0, r0, r0
   175f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175fc:	add	fp, sp, #28
   17600:	sub	sp, sp, #4
   17604:	vpush	{d8-d9}
   17608:	sub	sp, sp, #104	; 0x68
   1760c:	mov	r7, r3
   17610:	mov	r6, r2
   17614:	mov	r9, r1
   17618:	str	r0, [sp, #44]	; 0x2c
   1761c:	bl	11838 <localeconv@plt>
   17620:	ldr	r5, [r0]
   17624:	mov	r4, r0
   17628:	mov	r0, r5
   1762c:	bl	11718 <strlen@plt>
   17630:	movw	r2, #2155	; 0x86b
   17634:	sub	r1, r0, #1
   17638:	cmp	r1, #16
   1763c:	movt	r2, #2
   17640:	movcc	r2, r5
   17644:	ldr	r5, [r4, #4]
   17648:	ldr	r4, [r4, #8]
   1764c:	movcs	r0, #1
   17650:	str	r0, [sp, #16]
   17654:	str	r2, [sp, #12]
   17658:	mov	r0, r5
   1765c:	bl	11718 <strlen@plt>
   17660:	movw	r3, #903	; 0x387
   17664:	cmp	r0, #17
   17668:	movw	r0, #647	; 0x287
   1766c:	ldr	r2, [fp, #16]
   17670:	ldr	sl, [fp, #8]
   17674:	ldr	r8, [fp, #12]
   17678:	str	r6, [sp, #28]
   1767c:	str	r7, [sp, #36]	; 0x24
   17680:	str	r4, [sp, #20]
   17684:	movt	r3, #2
   17688:	add	r1, r6, r0
   1768c:	movcc	r3, r5
   17690:	ands	r0, r7, #32
   17694:	ldr	r5, [fp, #20]
   17698:	str	r1, [sp, #32]
   1769c:	str	r0, [sp, #24]
   176a0:	mov	r0, #1000	; 0x3e8
   176a4:	str	r3, [sp, #52]	; 0x34
   176a8:	movwne	r0, #1024	; 0x400
   176ac:	str	r0, [sp, #40]	; 0x28
   176b0:	and	r0, r7, #3
   176b4:	str	r0, [sp, #48]	; 0x30
   176b8:	subs	r0, sl, r2
   176bc:	sbcs	r0, r8, r5
   176c0:	bcs	177b4 <__assert_fail@plt+0x5ec8>
   176c4:	orrs	r0, sl, r8
   176c8:	mov	r4, r9
   176cc:	beq	1789c <__assert_fail@plt+0x5fb0>
   176d0:	ldr	r5, [fp, #20]
   176d4:	mov	r0, r2
   176d8:	mov	r2, sl
   176dc:	mov	r3, r8
   176e0:	mov	r1, r5
   176e4:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   176e8:	ldr	r2, [fp, #16]
   176ec:	mov	r6, r0
   176f0:	mov	r3, r1
   176f4:	umull	r0, r1, r0, sl
   176f8:	mla	r1, r6, r8, r1
   176fc:	mla	r1, r3, sl, r1
   17700:	subs	r0, r2, r0
   17704:	sbc	r1, r5, r1
   17708:	orrs	r0, r0, r1
   1770c:	bne	1789c <__assert_fail@plt+0x5fb0>
   17710:	ldr	r5, [sp, #44]	; 0x2c
   17714:	mov	r1, r4
   17718:	mov	r2, r6
   1771c:	mov	r8, r3
   17720:	mov	r0, r5
   17724:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   17728:	mov	r7, r0
   1772c:	mov	r9, r1
   17730:	umull	r0, r1, r0, r6
   17734:	mov	r2, #10
   17738:	mov	r3, r8
   1773c:	mla	r1, r7, r8, r1
   17740:	subs	r0, r5, r0
   17744:	mla	r1, r9, r6, r1
   17748:	umull	sl, r0, r0, r2
   1774c:	mov	r2, r6
   17750:	sbc	r1, r4, r1
   17754:	add	r1, r1, r1, lsl #2
   17758:	add	r5, r0, r1, lsl #1
   1775c:	mov	r0, sl
   17760:	mov	r1, r5
   17764:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   17768:	mov	r4, r0
   1776c:	umull	r0, r2, r0, r6
   17770:	mla	r2, r4, r8, r2
   17774:	subs	r0, sl, r0
   17778:	mla	r1, r1, r6, r2
   1777c:	mov	r2, #2
   17780:	sbc	r1, r5, r1
   17784:	subs	r3, r6, r0, lsl #1
   17788:	lsl	r1, r1, #1
   1778c:	orr	r1, r1, r0, lsr #31
   17790:	sbcs	r3, r8, r1
   17794:	orr	r5, r1, r0, lsl #1
   17798:	movwcc	r2, #3
   1779c:	cmp	r5, #0
   177a0:	movwne	r5, #1
   177a4:	rsbs	r0, r6, r0, lsl #1
   177a8:	sbcs	r0, r1, r8
   177ac:	movcs	r5, r2
   177b0:	b	1782c <__assert_fail@plt+0x5f40>
   177b4:	mov	r0, sl
   177b8:	mov	r1, r8
   177bc:	mov	r3, r5
   177c0:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   177c4:	ldr	r2, [fp, #16]
   177c8:	mov	r6, r0
   177cc:	mov	r3, r1
   177d0:	mov	r4, r9
   177d4:	umull	r0, r1, r0, r2
   177d8:	mla	r1, r6, r5, r1
   177dc:	subs	r0, sl, r0
   177e0:	mla	r1, r3, r2, r1
   177e4:	sbc	r1, r8, r1
   177e8:	orrs	r0, r0, r1
   177ec:	bne	1789c <__assert_fail@plt+0x5fb0>
   177f0:	ldr	r5, [sp, #44]	; 0x2c
   177f4:	mov	r2, r6
   177f8:	umull	r7, r0, r6, r5
   177fc:	mla	r0, r6, r4, r0
   17800:	mla	r9, r3, r5, r0
   17804:	mov	r0, r7
   17808:	mov	r1, r9
   1780c:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   17810:	ldr	r2, [fp, #16]
   17814:	eor	r1, r1, r4
   17818:	eor	r0, r0, r5
   1781c:	orrs	r0, r0, r1
   17820:	bne	1789c <__assert_fail@plt+0x5fb0>
   17824:	mov	r5, #0
   17828:	mov	r4, #0
   1782c:	ldr	r0, [sp, #36]	; 0x24
   17830:	ldr	r2, [sp, #40]	; 0x28
   17834:	mvn	r6, #0
   17838:	ands	r8, r0, #16
   1783c:	beq	17850 <__assert_fail@plt+0x5f64>
   17840:	subs	r0, r7, r2
   17844:	mov	r6, #0
   17848:	sbcs	r0, r9, #0
   1784c:	bcs	17b98 <__assert_fail@plt+0x62ac>
   17850:	ldr	r0, [sp, #32]
   17854:	mov	sl, r7
   17858:	str	r0, [sp, #44]	; 0x2c
   1785c:	ldr	r0, [sp, #48]	; 0x30
   17860:	cmp	r0, #0
   17864:	beq	17ce4 <__assert_fail@plt+0x63f8>
   17868:	cmp	r0, #1
   1786c:	bne	17b8c <__assert_fail@plt+0x62a0>
   17870:	rsbs	r1, r5, #0
   17874:	mov	r0, #0
   17878:	and	r3, sl, #1
   1787c:	ldr	r5, [sp, #44]	; 0x2c
   17880:	sbc	r0, r0, #0
   17884:	eor	r1, r3, r1
   17888:	orrs	r0, r1, r0
   1788c:	addne	r4, r4, #1
   17890:	cmp	r4, #5
   17894:	bgt	17cf4 <__assert_fail@plt+0x6408>
   17898:	b	17d48 <__assert_fail@plt+0x645c>
   1789c:	ldr	r9, [fp, #20]
   178a0:	mov	r0, r2
   178a4:	mov	r1, r9
   178a8:	bl	1f564 <__assert_fail@plt+0xdc78>
   178ac:	vmov	d8, r0, r1
   178b0:	ldr	r0, [sp, #44]	; 0x2c
   178b4:	mov	r1, r4
   178b8:	bl	1f564 <__assert_fail@plt+0xdc78>
   178bc:	mov	r6, r0
   178c0:	mov	r7, r1
   178c4:	mov	r0, sl
   178c8:	mov	r1, r8
   178cc:	bl	1f564 <__assert_fail@plt+0xdc78>
   178d0:	vmov	d17, r6, r7
   178d4:	ldr	r7, [sp, #36]	; 0x24
   178d8:	vmov	d16, r0, r1
   178dc:	vdiv.f64	d16, d16, d8
   178e0:	vmul.f64	d8, d16, d17
   178e4:	tst	r7, #16
   178e8:	bne	1795c <__assert_fail@plt+0x6070>
   178ec:	ldr	r0, [sp, #48]	; 0x30
   178f0:	ldr	sl, [sp, #28]
   178f4:	cmp	r0, #1
   178f8:	beq	17ae4 <__assert_fail@plt+0x61f8>
   178fc:	vldr	d16, [pc, #964]	; 17cc8 <__assert_fail@plt+0x63dc>
   17900:	ldr	r8, [sp, #32]
   17904:	vcmpe.f64	d8, d16
   17908:	vmrs	APSR_nzcv, fpscr
   1790c:	bpl	17ae8 <__assert_fail@plt+0x61fc>
   17910:	mov	r6, r0
   17914:	vmov	r0, r1, d8
   17918:	bl	1f628 <__assert_fail@plt+0xdd3c>
   1791c:	mov	r4, r0
   17920:	mov	r5, r1
   17924:	bl	1f564 <__assert_fail@plt+0xdc78>
   17928:	vmov	d16, r0, r1
   1792c:	clz	r0, r6
   17930:	mov	r2, #0
   17934:	vcmp.f64	d8, d16
   17938:	lsr	r0, r0, #5
   1793c:	vmrs	APSR_nzcv, fpscr
   17940:	movwne	r2, #1
   17944:	and	r0, r0, r2
   17948:	adds	r0, r0, r4
   1794c:	adc	r1, r5, #0
   17950:	bl	1f564 <__assert_fail@plt+0xdc78>
   17954:	vmov	d8, r0, r1
   17958:	b	17ae8 <__assert_fail@plt+0x61fc>
   1795c:	ldr	r0, [sp, #40]	; 0x28
   17960:	vmov.f64	d16, #112	; 0x3f800000  1.0
   17964:	mov	r6, #0
   17968:	vmov	s0, r0
   1796c:	vcvt.f64.u32	d17, s0
   17970:	ldr	sl, [sp, #28]
   17974:	add	r6, r6, #1
   17978:	vmul.f64	d16, d16, d17
   1797c:	cmp	r6, #7
   17980:	vmulls.f64	d18, d16, d17
   17984:	vcmpels.f64	d18, d8
   17988:	vmrsls	APSR_nzcv, fpscr
   1798c:	bls	17974 <__assert_fail@plt+0x6088>
   17990:	ldr	r0, [sp, #48]	; 0x30
   17994:	ldr	r8, [sp, #32]
   17998:	ldr	r5, [sp, #16]
   1799c:	vdiv.f64	d8, d8, d16
   179a0:	vmov.f64	d16, d8
   179a4:	cmp	r0, #1
   179a8:	beq	17a0c <__assert_fail@plt+0x6120>
   179ac:	vldr	d16, [pc, #788]	; 17cc8 <__assert_fail@plt+0x63dc>
   179b0:	vcmpe.f64	d8, d16
   179b4:	vmov.f64	d16, d8
   179b8:	vmrs	APSR_nzcv, fpscr
   179bc:	bpl	17a0c <__assert_fail@plt+0x6120>
   179c0:	vmov	r0, r1, d8
   179c4:	bl	1f628 <__assert_fail@plt+0xdd3c>
   179c8:	mov	r4, r0
   179cc:	mov	r5, r1
   179d0:	bl	1f564 <__assert_fail@plt+0xdc78>
   179d4:	vmov	d16, r0, r1
   179d8:	ldr	r0, [sp, #48]	; 0x30
   179dc:	mov	r2, #0
   179e0:	vcmp.f64	d8, d16
   179e4:	vmrs	APSR_nzcv, fpscr
   179e8:	movwne	r2, #1
   179ec:	clz	r0, r0
   179f0:	lsr	r0, r0, #5
   179f4:	and	r0, r0, r2
   179f8:	adds	r0, r0, r4
   179fc:	adc	r1, r5, #0
   17a00:	ldr	r5, [sp, #16]
   17a04:	bl	1f564 <__assert_fail@plt+0xdc78>
   17a08:	vmov	d16, r0, r1
   17a0c:	movw	r3, #2394	; 0x95a
   17a10:	mov	r0, sl
   17a14:	mov	r1, #1
   17a18:	mvn	r2, #0
   17a1c:	vstr	d16, [sp]
   17a20:	movt	r3, #2
   17a24:	bl	11754 <__sprintf_chk@plt>
   17a28:	ldr	r1, [sp, #24]
   17a2c:	mov	r0, #3
   17a30:	cmp	r1, #0
   17a34:	movwne	r0, #2
   17a38:	add	r4, r0, r5
   17a3c:	mov	r0, sl
   17a40:	bl	11718 <strlen@plt>
   17a44:	cmp	r4, r0
   17a48:	bcc	17a6c <__assert_fail@plt+0x6180>
   17a4c:	mov	r2, r0
   17a50:	add	r5, r5, #1
   17a54:	tst	r7, #8
   17a58:	beq	17b18 <__assert_fail@plt+0x622c>
   17a5c:	add	r0, sl, r2
   17a60:	ldrb	r0, [r0, #-1]
   17a64:	cmp	r0, #48	; 0x30
   17a68:	bne	17b18 <__assert_fail@plt+0x622c>
   17a6c:	ldr	r0, [sp, #48]	; 0x30
   17a70:	vmov.f64	d9, #36	; 0x41200000  10.0
   17a74:	vmul.f64	d8, d8, d9
   17a78:	cmp	r0, #1
   17a7c:	beq	17ad8 <__assert_fail@plt+0x61ec>
   17a80:	vldr	d16, [pc, #576]	; 17cc8 <__assert_fail@plt+0x63dc>
   17a84:	vcmpe.f64	d8, d16
   17a88:	vmrs	APSR_nzcv, fpscr
   17a8c:	bpl	17ad8 <__assert_fail@plt+0x61ec>
   17a90:	vmov	r0, r1, d8
   17a94:	bl	1f628 <__assert_fail@plt+0xdd3c>
   17a98:	mov	r4, r0
   17a9c:	mov	r5, r1
   17aa0:	bl	1f564 <__assert_fail@plt+0xdc78>
   17aa4:	vmov	d16, r0, r1
   17aa8:	ldr	r0, [sp, #48]	; 0x30
   17aac:	mov	r2, #0
   17ab0:	vcmp.f64	d8, d16
   17ab4:	vmrs	APSR_nzcv, fpscr
   17ab8:	movwne	r2, #1
   17abc:	clz	r0, r0
   17ac0:	lsr	r0, r0, #5
   17ac4:	and	r0, r0, r2
   17ac8:	adds	r0, r0, r4
   17acc:	adc	r1, r5, #0
   17ad0:	bl	1f564 <__assert_fail@plt+0xdc78>
   17ad4:	vmov	d8, r0, r1
   17ad8:	vdiv.f64	d16, d8, d9
   17adc:	vstr	d16, [sp]
   17ae0:	b	17af0 <__assert_fail@plt+0x6204>
   17ae4:	ldr	r8, [sp, #32]
   17ae8:	mvn	r6, #0
   17aec:	vstr	d8, [sp]
   17af0:	movw	r3, #2388	; 0x954
   17af4:	mov	r0, sl
   17af8:	mov	r1, #1
   17afc:	mvn	r2, #0
   17b00:	movt	r3, #2
   17b04:	bl	11754 <__sprintf_chk@plt>
   17b08:	mov	r0, sl
   17b0c:	bl	11718 <strlen@plt>
   17b10:	mov	r2, r0
   17b14:	mov	r5, #0
   17b18:	sub	r4, r8, r2
   17b1c:	mov	r1, sl
   17b20:	mov	r0, r4
   17b24:	bl	11544 <memmove@plt>
   17b28:	sub	r5, r8, r5
   17b2c:	tst	r7, #4
   17b30:	bne	17d9c <__assert_fail@plt+0x64b0>
   17b34:	ldr	r3, [sp, #40]	; 0x28
   17b38:	ldr	r5, [fp, #16]
   17b3c:	tst	r7, #128	; 0x80
   17b40:	beq	17eb8 <__assert_fail@plt+0x65cc>
   17b44:	cmn	r6, #1
   17b48:	bgt	17c58 <__assert_fail@plt+0x636c>
   17b4c:	subs	r0, r5, #2
   17b50:	mov	r6, #0
   17b54:	sbcs	r0, r9, #0
   17b58:	bcc	17c58 <__assert_fail@plt+0x636c>
   17b5c:	mov	r0, #0
   17b60:	mov	r1, #1
   17b64:	mov	r6, #0
   17b68:	cmp	r6, #7
   17b6c:	beq	17c54 <__assert_fail@plt+0x6368>
   17b70:	umull	r1, r2, r1, r3
   17b74:	add	r6, r6, #1
   17b78:	mla	r0, r0, r3, r2
   17b7c:	subs	r2, r1, r5
   17b80:	sbcs	r2, r0, r9
   17b84:	bcc	17b68 <__assert_fail@plt+0x627c>
   17b88:	b	17c58 <__assert_fail@plt+0x636c>
   17b8c:	ldr	r8, [sp, #32]
   17b90:	ldr	r5, [sp, #44]	; 0x2c
   17b94:	b	17d4c <__assert_fail@plt+0x6460>
   17b98:	mov	r6, #0
   17b9c:	mov	r0, r7
   17ba0:	mov	r1, r9
   17ba4:	mov	r3, #0
   17ba8:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   17bac:	ldr	r2, [sp, #40]	; 0x28
   17bb0:	mov	sl, r0
   17bb4:	mov	r9, r1
   17bb8:	mls	r0, r0, r2, r7
   17bbc:	add	r0, r0, r0, lsl #2
   17bc0:	add	r0, r4, r0, lsl #1
   17bc4:	udiv	r4, r0, r2
   17bc8:	mls	r0, r4, r2, r0
   17bcc:	lsl	r0, r0, #1
   17bd0:	add	r0, r0, r5, lsr #1
   17bd4:	cmp	r0, r2
   17bd8:	bcs	17bfc <__assert_fail@plt+0x6310>
   17bdc:	add	r1, r0, r5
   17be0:	cmn	r0, r5
   17be4:	movwne	r1, #1
   17be8:	mov	r5, r1
   17bec:	add	r6, r6, #1
   17bf0:	cmp	r6, #7
   17bf4:	bls	17c18 <__assert_fail@plt+0x632c>
   17bf8:	b	17c28 <__assert_fail@plt+0x633c>
   17bfc:	add	r0, r0, r5
   17c00:	mov	r5, #2
   17c04:	cmp	r2, r0
   17c08:	movwcc	r5, #3
   17c0c:	add	r6, r6, #1
   17c10:	cmp	r6, #7
   17c14:	bhi	17c28 <__assert_fail@plt+0x633c>
   17c18:	subs	r0, sl, r2
   17c1c:	mov	r7, sl
   17c20:	sbcs	r0, r9, #0
   17c24:	bcs	17b9c <__assert_fail@plt+0x62b0>
   17c28:	rsbs	r0, sl, #9
   17c2c:	rscs	r0, r9, #0
   17c30:	bcc	17cd0 <__assert_fail@plt+0x63e4>
   17c34:	ldr	r0, [sp, #48]	; 0x30
   17c38:	cmp	r0, #1
   17c3c:	bne	17ed4 <__assert_fail@plt+0x65e8>
   17c40:	and	r0, r4, #1
   17c44:	add	r0, r5, r0
   17c48:	cmp	r0, #2
   17c4c:	bhi	17ee4 <__assert_fail@plt+0x65f8>
   17c50:	b	17f18 <__assert_fail@plt+0x662c>
   17c54:	mov	r6, #8
   17c58:	and	r0, r7, #256	; 0x100
   17c5c:	tst	r7, #64	; 0x40
   17c60:	orrsne	r1, r6, r0
   17c64:	movne	r1, #32
   17c68:	addne	r8, sl, #648	; 0x288
   17c6c:	strbne	r1, [sl, #647]	; 0x287
   17c70:	cmp	r6, #0
   17c74:	beq	17c9c <__assert_fail@plt+0x63b0>
   17c78:	ldr	r1, [sp, #24]
   17c7c:	cmp	r1, #0
   17c80:	moveq	r1, #107	; 0x6b
   17c84:	cmpeq	r6, #1
   17c88:	beq	17c98 <__assert_fail@plt+0x63ac>
   17c8c:	movw	r1, #2428	; 0x97c
   17c90:	movt	r1, #2
   17c94:	ldrb	r1, [r1, r6]
   17c98:	strb	r1, [r8], #1
   17c9c:	cmp	r0, #0
   17ca0:	beq	17eb8 <__assert_fail@plt+0x65cc>
   17ca4:	ldr	r0, [sp, #24]
   17ca8:	cmp	r0, #0
   17cac:	cmpne	r6, #0
   17cb0:	movne	r0, #105	; 0x69
   17cb4:	strbne	r0, [r8], #1
   17cb8:	mov	r0, #66	; 0x42
   17cbc:	strb	r0, [r8], #1
   17cc0:	b	17eb8 <__assert_fail@plt+0x65cc>
   17cc4:	nop	{0}
   17cc8:	andeq	r0, r0, r0
   17ccc:	mvnsmi	r0, #0
   17cd0:	ldr	r0, [sp, #32]
   17cd4:	str	r0, [sp, #44]	; 0x2c
   17cd8:	ldr	r0, [sp, #48]	; 0x30
   17cdc:	cmp	r0, #0
   17ce0:	bne	17868 <__assert_fail@plt+0x5f7c>
   17ce4:	add	r0, r4, r5
   17ce8:	ldr	r5, [sp, #44]	; 0x2c
   17cec:	cmp	r0, #1
   17cf0:	blt	17d48 <__assert_fail@plt+0x645c>
   17cf4:	adds	sl, sl, #1
   17cf8:	adc	r9, r9, #0
   17cfc:	cmp	r6, #7
   17d00:	bgt	17d48 <__assert_fail@plt+0x645c>
   17d04:	cmp	r8, #0
   17d08:	beq	17d48 <__assert_fail@plt+0x645c>
   17d0c:	eor	r0, sl, r2
   17d10:	orrs	r0, r0, r9
   17d14:	ldreq	r0, [sp, #36]	; 0x24
   17d18:	addeq	r6, r6, #1
   17d1c:	moveq	r9, #0
   17d20:	moveq	sl, #1
   17d24:	tsteq	r0, #8
   17d28:	bne	17d48 <__assert_fail@plt+0x645c>
   17d2c:	ldr	r2, [sp, #16]
   17d30:	mov	r0, #48	; 0x30
   17d34:	ldr	r1, [sp, #12]
   17d38:	strb	r0, [r5, #-1]!
   17d3c:	sub	r5, r5, r2
   17d40:	mov	r0, r5
   17d44:	bl	11574 <memcpy@plt>
   17d48:	ldr	r8, [sp, #32]
   17d4c:	mov	r4, r5
   17d50:	mov	r0, sl
   17d54:	mov	r1, r9
   17d58:	mov	r2, #10
   17d5c:	mov	r3, #0
   17d60:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   17d64:	add	r2, r0, r0, lsl #2
   17d68:	sub	r2, sl, r2, lsl #1
   17d6c:	orr	r2, r2, #48	; 0x30
   17d70:	strb	r2, [r4, #-1]!
   17d74:	rsbs	r2, sl, #9
   17d78:	mov	sl, r0
   17d7c:	rscs	r2, r9, #0
   17d80:	mov	r9, r1
   17d84:	bcc	17d50 <__assert_fail@plt+0x6464>
   17d88:	ldr	r7, [sp, #36]	; 0x24
   17d8c:	ldr	r9, [fp, #20]
   17d90:	ldr	sl, [sp, #28]
   17d94:	tst	r7, #4
   17d98:	beq	17b34 <__assert_fail@plt+0x6248>
   17d9c:	ldr	r0, [sp, #52]	; 0x34
   17da0:	mov	r7, r5
   17da4:	str	r6, [sp, #16]
   17da8:	sub	r5, r5, r4
   17dac:	bl	11718 <strlen@plt>
   17db0:	add	r8, sp, #56	; 0x38
   17db4:	str	r0, [sp, #48]	; 0x30
   17db8:	mov	r1, r4
   17dbc:	mov	r2, r5
   17dc0:	mov	r0, r8
   17dc4:	bl	11574 <memcpy@plt>
   17dc8:	ldr	r0, [sp, #20]
   17dcc:	ldrb	r6, [r0]
   17dd0:	cmp	r6, #255	; 0xff
   17dd4:	mov	r9, r6
   17dd8:	moveq	r9, r5
   17ddc:	cmp	r6, #0
   17de0:	mvneq	r9, #0
   17de4:	cmp	r9, r5
   17de8:	movhi	r9, r5
   17dec:	sub	r4, r7, r9
   17df0:	sub	r7, r5, r9
   17df4:	mov	r2, r9
   17df8:	add	r1, r8, r7
   17dfc:	mov	r0, r4
   17e00:	bl	11574 <memcpy@plt>
   17e04:	cmp	r7, #0
   17e08:	beq	17e94 <__assert_fail@plt+0x65a8>
   17e0c:	clz	r0, r6
   17e10:	ldr	r8, [sp, #20]
   17e14:	lsr	sl, r0, #5
   17e18:	ldr	r0, [sp, #48]	; 0x30
   17e1c:	rsb	r0, r0, #0
   17e20:	str	r0, [sp, #44]	; 0x2c
   17e24:	ldr	r0, [sp, #44]	; 0x2c
   17e28:	ldr	r1, [sp, #52]	; 0x34
   17e2c:	ldr	r2, [sp, #48]	; 0x30
   17e30:	add	r4, r4, r0
   17e34:	mov	r0, r4
   17e38:	bl	11574 <memcpy@plt>
   17e3c:	tst	sl, #1
   17e40:	add	r0, sp, #56	; 0x38
   17e44:	addeq	r8, r8, #1
   17e48:	ldrb	r6, [r8]
   17e4c:	cmp	r6, #255	; 0xff
   17e50:	mov	r5, r6
   17e54:	moveq	r5, r7
   17e58:	cmp	r6, #0
   17e5c:	moveq	r5, r9
   17e60:	cmp	r7, r5
   17e64:	movcc	r5, r7
   17e68:	sub	r7, r7, r5
   17e6c:	sub	r4, r4, r5
   17e70:	mov	r2, r5
   17e74:	add	r1, r0, r7
   17e78:	mov	r0, r4
   17e7c:	bl	11574 <memcpy@plt>
   17e80:	clz	r0, r6
   17e84:	cmp	r7, #0
   17e88:	mov	r9, r5
   17e8c:	lsr	sl, r0, #5
   17e90:	bne	17e24 <__assert_fail@plt+0x6538>
   17e94:	ldr	r8, [sp, #32]
   17e98:	ldr	sl, [sp, #28]
   17e9c:	ldr	r7, [sp, #36]	; 0x24
   17ea0:	ldr	r3, [sp, #40]	; 0x28
   17ea4:	ldr	r9, [fp, #20]
   17ea8:	ldr	r5, [fp, #16]
   17eac:	ldr	r6, [sp, #16]
   17eb0:	tst	r7, #128	; 0x80
   17eb4:	bne	17b44 <__assert_fail@plt+0x6258>
   17eb8:	mov	r0, #0
   17ebc:	strb	r0, [r8]
   17ec0:	mov	r0, r4
   17ec4:	sub	sp, fp, #48	; 0x30
   17ec8:	vpop	{d8-d9}
   17ecc:	add	sp, sp, #4
   17ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ed4:	cmp	r0, #0
   17ed8:	bne	17f18 <__assert_fail@plt+0x662c>
   17edc:	cmp	r5, #0
   17ee0:	beq	17f18 <__assert_fail@plt+0x662c>
   17ee4:	adds	r0, sl, #1
   17ee8:	add	r4, r4, #1
   17eec:	mov	r5, #0
   17ef0:	adc	r1, r9, #0
   17ef4:	cmp	r4, #10
   17ef8:	bne	17f18 <__assert_fail@plt+0x662c>
   17efc:	rsbs	r3, r0, #9
   17f00:	mov	r4, #0
   17f04:	mov	sl, r0
   17f08:	mov	r9, r1
   17f0c:	mov	r5, #0
   17f10:	rscs	r3, r1, #0
   17f14:	bcc	17f84 <__assert_fail@plt+0x6698>
   17f18:	ldr	r0, [sp, #36]	; 0x24
   17f1c:	tst	r0, #8
   17f20:	beq	17f48 <__assert_fail@plt+0x665c>
   17f24:	cmp	r4, #0
   17f28:	bne	17f48 <__assert_fail@plt+0x665c>
   17f2c:	ldr	r0, [sp, #32]
   17f30:	str	r0, [sp, #44]	; 0x2c
   17f34:	mov	r4, #0
   17f38:	ldr	r0, [sp, #48]	; 0x30
   17f3c:	cmp	r0, #0
   17f40:	bne	17868 <__assert_fail@plt+0x5f7c>
   17f44:	b	17ce4 <__assert_fail@plt+0x63f8>
   17f48:	ldr	r1, [sp, #28]
   17f4c:	ldr	r2, [sp, #16]
   17f50:	add	r0, r4, #48	; 0x30
   17f54:	strb	r0, [r1, #646]!	; 0x286
   17f58:	sub	r0, r1, r2
   17f5c:	ldr	r1, [sp, #12]
   17f60:	str	r0, [sp, #44]	; 0x2c
   17f64:	bl	11574 <memcpy@plt>
   17f68:	ldr	r2, [sp, #40]	; 0x28
   17f6c:	mov	r5, #0
   17f70:	mov	r4, #0
   17f74:	ldr	r0, [sp, #48]	; 0x30
   17f78:	cmp	r0, #0
   17f7c:	bne	17868 <__assert_fail@plt+0x5f7c>
   17f80:	b	17ce4 <__assert_fail@plt+0x63f8>
   17f84:	ldr	r0, [sp, #32]
   17f88:	mov	r5, #0
   17f8c:	mov	sl, #10
   17f90:	mov	r9, #0
   17f94:	str	r0, [sp, #44]	; 0x2c
   17f98:	ldr	r0, [sp, #48]	; 0x30
   17f9c:	cmp	r0, #0
   17fa0:	bne	17868 <__assert_fail@plt+0x5f7c>
   17fa4:	b	17ce4 <__assert_fail@plt+0x63f8>
   17fa8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17fac:	add	fp, sp, #24
   17fb0:	sub	sp, sp, #8
   17fb4:	mov	r4, r2
   17fb8:	mov	r8, r1
   17fbc:	cmp	r0, #0
   17fc0:	bne	17fec <__assert_fail@plt+0x6700>
   17fc4:	movw	r0, #65478	; 0xffc6
   17fc8:	movt	r0, #1
   17fcc:	bl	116ac <getenv@plt>
   17fd0:	cmp	r0, #0
   17fd4:	bne	17fec <__assert_fail@plt+0x6700>
   17fd8:	movw	r0, #2400	; 0x960
   17fdc:	movt	r0, #2
   17fe0:	bl	116ac <getenv@plt>
   17fe4:	cmp	r0, #0
   17fe8:	beq	18118 <__assert_fail@plt+0x682c>
   17fec:	mov	r6, r0
   17ff0:	movw	r7, #2452	; 0x994
   17ff4:	movw	r1, #2440	; 0x988
   17ff8:	mov	r3, #4
   17ffc:	ldrb	r5, [r6], #1
   18000:	movt	r7, #2
   18004:	movt	r1, #2
   18008:	mov	r2, r7
   1800c:	cmp	r5, #39	; 0x27
   18010:	movne	r6, r0
   18014:	mov	r0, r6
   18018:	bl	1e254 <__assert_fail@plt+0xc968>
   1801c:	sub	r1, r5, #39	; 0x27
   18020:	cmp	r0, #0
   18024:	clz	r1, r1
   18028:	lsr	r1, r1, #5
   1802c:	lsl	r5, r1, #2
   18030:	blt	18068 <__assert_fail@plt+0x677c>
   18034:	ldr	r0, [r7, r0, lsl #2]
   18038:	mov	r2, #1
   1803c:	mov	r1, #0
   18040:	str	r2, [r4]
   18044:	str	r1, [r4, #4]
   18048:	orr	r1, r0, r5
   1804c:	mov	r0, #0
   18050:	str	r1, [r8]
   18054:	ldrd	r2, [r4]
   18058:	orrs	r1, r2, r3
   1805c:	beq	180a4 <__assert_fail@plt+0x67b8>
   18060:	sub	sp, fp, #24
   18064:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18068:	movw	r0, #2410	; 0x96a
   1806c:	add	r1, sp, #4
   18070:	mov	r2, #0
   18074:	mov	r3, r4
   18078:	mov	r7, #0
   1807c:	movt	r0, #2
   18080:	str	r0, [sp]
   18084:	mov	r0, r6
   18088:	bl	1c908 <__assert_fail@plt+0xb01c>
   1808c:	cmp	r0, #0
   18090:	beq	180d4 <__assert_fail@plt+0x67e8>
   18094:	str	r7, [r8]
   18098:	ldrd	r2, [r4]
   1809c:	orrs	r1, r2, r3
   180a0:	bne	18060 <__assert_fail@plt+0x6774>
   180a4:	movw	r0, #65459	; 0xffb3
   180a8:	movt	r0, #1
   180ac:	bl	116ac <getenv@plt>
   180b0:	cmp	r0, #0
   180b4:	mov	r2, #512	; 0x200
   180b8:	mov	r0, #4
   180bc:	mov	r1, #0
   180c0:	movweq	r2, #1024	; 0x400
   180c4:	str	r2, [r4]
   180c8:	str	r1, [r4, #4]
   180cc:	sub	sp, fp, #24
   180d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   180d4:	ldrb	r0, [r6]
   180d8:	sub	r0, r0, #48	; 0x30
   180dc:	uxtb	r0, r0
   180e0:	cmp	r0, #10
   180e4:	bcc	18110 <__assert_fail@plt+0x6824>
   180e8:	ldr	r0, [sp, #4]
   180ec:	cmp	r0, r6
   180f0:	beq	18140 <__assert_fail@plt+0x6854>
   180f4:	ldrb	r2, [r6, #1]
   180f8:	add	r1, r6, #1
   180fc:	mov	r6, r1
   18100:	sub	r2, r2, #48	; 0x30
   18104:	uxtb	r2, r2
   18108:	cmp	r2, #10
   1810c:	bcs	180ec <__assert_fail@plt+0x6800>
   18110:	mov	r1, r5
   18114:	b	1804c <__assert_fail@plt+0x6760>
   18118:	movw	r0, #65459	; 0xffb3
   1811c:	movt	r0, #1
   18120:	bl	116ac <getenv@plt>
   18124:	mov	r2, #512	; 0x200
   18128:	cmp	r0, #0
   1812c:	mov	r1, #0
   18130:	movweq	r2, #1024	; 0x400
   18134:	str	r2, [r4]
   18138:	str	r1, [r4, #4]
   1813c:	b	1804c <__assert_fail@plt+0x6760>
   18140:	ldrb	r2, [r0, #-1]
   18144:	orr	r1, r5, #384	; 0x180
   18148:	cmp	r2, #66	; 0x42
   1814c:	mov	r2, r1
   18150:	orrne	r2, r5, #128	; 0x80
   18154:	bne	18168 <__assert_fail@plt+0x687c>
   18158:	ldrb	r0, [r0, #-2]
   1815c:	cmp	r0, #105	; 0x69
   18160:	orreq	r1, r2, #32
   18164:	b	1804c <__assert_fail@plt+0x6760>
   18168:	orr	r1, r2, #32
   1816c:	b	1804c <__assert_fail@plt+0x6760>
   18170:	push	{r4, r5, r6, sl, fp, lr}
   18174:	add	fp, sp, #16
   18178:	mov	r5, r0
   1817c:	mov	r0, #0
   18180:	mov	r4, r1
   18184:	add	r6, r2, #19
   18188:	strb	r0, [r2, #20]
   1818c:	mov	r0, r5
   18190:	mov	r1, r4
   18194:	mov	r2, #10
   18198:	mov	r3, #0
   1819c:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   181a0:	add	r2, r0, r0, lsl #2
   181a4:	sub	r2, r5, r2, lsl #1
   181a8:	orr	r2, r2, #48	; 0x30
   181ac:	strb	r2, [r6], #-1
   181b0:	rsbs	r2, r5, #9
   181b4:	mov	r5, r0
   181b8:	rscs	r2, r4, #0
   181bc:	mov	r4, r1
   181c0:	bcc	1818c <__assert_fail@plt+0x68a0>
   181c4:	add	r0, r6, #1
   181c8:	pop	{r4, r5, r6, sl, fp, pc}
   181cc:	push	{r4, r5, r6, r7, fp, lr}
   181d0:	add	fp, sp, #16
   181d4:	sub	sp, sp, #8
   181d8:	add	r5, sp, #4
   181dc:	cmp	r0, #0
   181e0:	mov	r7, r2
   181e4:	mov	r4, r1
   181e8:	movne	r5, r0
   181ec:	mov	r0, r5
   181f0:	bl	11664 <mbrtowc@plt>
   181f4:	mov	r6, r0
   181f8:	cmp	r7, #0
   181fc:	beq	18220 <__assert_fail@plt+0x6934>
   18200:	cmn	r6, #2
   18204:	bcc	18220 <__assert_fail@plt+0x6934>
   18208:	mov	r0, #0
   1820c:	bl	1ee28 <__assert_fail@plt+0xd53c>
   18210:	cmp	r0, #0
   18214:	ldrbeq	r0, [r4]
   18218:	moveq	r6, #1
   1821c:	streq	r0, [r5]
   18220:	mov	r0, r6
   18224:	sub	sp, fp, #16
   18228:	pop	{r4, r5, r6, r7, fp, pc}
   1822c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18230:	add	fp, sp, #28
   18234:	sub	sp, sp, #20
   18238:	mov	r5, r3
   1823c:	str	r2, [sp, #12]
   18240:	str	r1, [sp, #16]
   18244:	mov	r4, r0
   18248:	bl	11718 <strlen@plt>
   1824c:	ldr	r3, [fp, #12]
   18250:	mov	r8, r0
   18254:	mov	sl, #0
   18258:	tst	r3, #2
   1825c:	bne	18330 <__assert_fail@plt+0x6a44>
   18260:	bl	11640 <__ctype_get_mb_cur_max@plt>
   18264:	mov	r6, #0
   18268:	cmp	r0, #2
   1826c:	bcc	18340 <__assert_fail@plt+0x6a54>
   18270:	mov	r0, #0
   18274:	mov	r1, r4
   18278:	mov	r2, #0
   1827c:	bl	11844 <mbstowcs@plt>
   18280:	cmn	r0, #1
   18284:	beq	184dc <__assert_fail@plt+0x6bf0>
   18288:	add	r9, r0, #1
   1828c:	mov	r7, r0
   18290:	lsl	r0, r9, #2
   18294:	bl	1d610 <__assert_fail@plt+0xbd24>
   18298:	cmp	r0, #0
   1829c:	beq	184d8 <__assert_fail@plt+0x6bec>
   182a0:	mov	r1, r4
   182a4:	mov	r2, r9
   182a8:	mov	r6, r0
   182ac:	bl	11844 <mbstowcs@plt>
   182b0:	cmp	r0, #0
   182b4:	beq	184fc <__assert_fail@plt+0x6c10>
   182b8:	str	r4, [sp, #4]
   182bc:	mov	r4, #0
   182c0:	mov	r1, r6
   182c4:	str	r6, [sp]
   182c8:	str	r4, [r6, r7, lsl #2]
   182cc:	ldr	r0, [r6]
   182d0:	cmp	r0, #0
   182d4:	beq	1850c <__assert_fail@plt+0x6c20>
   182d8:	add	r6, r1, #4
   182dc:	movw	r7, #65533	; 0xfffd
   182e0:	bl	11604 <iswprint@plt>
   182e4:	cmp	r0, #0
   182e8:	streq	r7, [r6, #-4]
   182ec:	moveq	r4, #1
   182f0:	ldr	r0, [r6], #4
   182f4:	cmp	r0, #0
   182f8:	bne	182e0 <__assert_fail@plt+0x69f4>
   182fc:	ldr	r6, [sp]
   18300:	mov	r1, r9
   18304:	mov	r0, r6
   18308:	bl	117fc <wcswidth@plt>
   1830c:	mov	r7, r0
   18310:	tst	r4, #1
   18314:	beq	1851c <__assert_fail@plt+0x6c30>
   18318:	mov	r0, #0
   1831c:	mov	r1, r6
   18320:	mov	r2, #0
   18324:	bl	11670 <wcstombs@plt>
   18328:	ldr	r4, [sp, #4]
   1832c:	b	18534 <__assert_fail@plt+0x6c48>
   18330:	mov	r6, #0
   18334:	mov	r2, #0
   18338:	mov	r7, r8
   1833c:	b	1834c <__assert_fail@plt+0x6a60>
   18340:	mov	r2, #0
   18344:	mov	r7, r8
   18348:	ldr	r3, [fp, #12]
   1834c:	ldr	r0, [r5]
   18350:	str	r4, [sp, #4]
   18354:	ldr	r4, [fp, #8]
   18358:	mov	r1, r7
   1835c:	str	r6, [sp, #8]
   18360:	cmp	r7, r0
   18364:	movhi	r1, r0
   18368:	movhi	r8, r0
   1836c:	cmp	r0, r7
   18370:	subhi	sl, r0, r1
   18374:	cmp	r4, #0
   18378:	str	r1, [r5]
   1837c:	beq	18394 <__assert_fail@plt+0x6aa8>
   18380:	cmp	r4, #1
   18384:	bne	1839c <__assert_fail@plt+0x6ab0>
   18388:	mov	r9, #0
   1838c:	mov	r4, sl
   18390:	b	183a8 <__assert_fail@plt+0x6abc>
   18394:	mov	r9, sl
   18398:	b	183a8 <__assert_fail@plt+0x6abc>
   1839c:	and	r0, sl, #1
   183a0:	lsr	r9, sl, #1
   183a4:	add	r4, r0, sl, lsr #1
   183a8:	ldr	r5, [sp, #12]
   183ac:	ldr	r1, [sp, #16]
   183b0:	tst	r3, #8
   183b4:	mov	r6, #0
   183b8:	mov	r7, #0
   183bc:	moveq	r6, r9
   183c0:	tst	r3, #4
   183c4:	moveq	r7, r4
   183c8:	cmp	r5, #0
   183cc:	beq	184b0 <__assert_fail@plt+0x6bc4>
   183d0:	add	r0, r1, r5
   183d4:	str	r2, [sp]
   183d8:	sub	sl, r0, #1
   183dc:	cmp	sl, r1
   183e0:	bls	1842c <__assert_fail@plt+0x6b40>
   183e4:	cmp	r7, #0
   183e8:	mov	r0, r1
   183ec:	beq	18430 <__assert_fail@plt+0x6b44>
   183f0:	sub	r0, r1, sl
   183f4:	rsb	r1, r7, #0
   183f8:	cmp	r0, r1
   183fc:	movcc	r0, r1
   18400:	mov	r1, #32
   18404:	rsb	r2, r0, #0
   18408:	ldr	r0, [sp, #16]
   1840c:	bl	1176c <memset@plt>
   18410:	rsb	r0, r4, #0
   18414:	rsb	r1, r5, #1
   18418:	cmp	r1, r0
   1841c:	movcc	r1, r0
   18420:	ldr	r0, [sp, #16]
   18424:	sub	r0, r0, r1
   18428:	b	18430 <__assert_fail@plt+0x6b44>
   1842c:	mov	r0, r1
   18430:	ldr	r1, [sp, #4]
   18434:	sub	r2, sl, r0
   18438:	mov	r5, #0
   1843c:	mvn	r3, #0
   18440:	cmp	r8, r2
   18444:	strb	r5, [r0]
   18448:	movcc	r2, r8
   1844c:	bl	118e0 <__mempcpy_chk@plt>
   18450:	mov	r4, r0
   18454:	cmp	r6, #0
   18458:	beq	184a8 <__assert_fail@plt+0x6bbc>
   1845c:	cmp	r4, sl
   18460:	bcs	184a8 <__assert_fail@plt+0x6bbc>
   18464:	sub	r0, r4, sl
   18468:	rsb	r1, r6, #0
   1846c:	cmp	r0, r1
   18470:	movcc	r0, r1
   18474:	mov	r1, #32
   18478:	rsb	r2, r0, #0
   1847c:	mov	r0, r4
   18480:	bl	1176c <memset@plt>
   18484:	ldr	r0, [sp, #16]
   18488:	ldr	r1, [sp, #12]
   1848c:	rsb	r0, r0, #1
   18490:	sub	r0, r0, r1
   18494:	rsb	r1, r9, #0
   18498:	add	r0, r4, r0
   1849c:	cmp	r1, r0
   184a0:	movhi	r0, r1
   184a4:	sub	r4, r4, r0
   184a8:	ldr	r2, [sp]
   184ac:	strb	r5, [r4]
   184b0:	add	r0, r7, r8
   184b4:	add	r9, r0, r6
   184b8:	ldr	r6, [sp, #8]
   184bc:	mov	r0, r2
   184c0:	bl	16030 <__assert_fail@plt+0x4744>
   184c4:	mov	r0, r6
   184c8:	bl	16030 <__assert_fail@plt+0x4744>
   184cc:	mov	r0, r9
   184d0:	sub	sp, fp, #28
   184d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184d8:	mov	r6, #0
   184dc:	ldr	r3, [fp, #12]
   184e0:	mvn	r9, #0
   184e4:	mov	r2, #0
   184e8:	mov	r7, r8
   184ec:	mov	r0, #0
   184f0:	tst	r3, #1
   184f4:	bne	1834c <__assert_fail@plt+0x6a60>
   184f8:	b	184c0 <__assert_fail@plt+0x6bd4>
   184fc:	mov	r2, r6
   18500:	mov	r7, r8
   18504:	mov	r6, #0
   18508:	b	18348 <__assert_fail@plt+0x6a5c>
   1850c:	mov	r0, r1
   18510:	mov	r1, r9
   18514:	bl	117fc <wcswidth@plt>
   18518:	mov	r7, r0
   1851c:	ldr	r0, [r5]
   18520:	ldr	r4, [sp, #4]
   18524:	mov	r6, #0
   18528:	cmp	r7, r0
   1852c:	mov	r0, r8
   18530:	bls	185a0 <__assert_fail@plt+0x6cb4>
   18534:	add	r6, r0, #1
   18538:	mov	r0, r6
   1853c:	bl	1d610 <__assert_fail@plt+0xbd24>
   18540:	cmp	r0, #0
   18544:	beq	185a8 <__assert_fail@plt+0x6cbc>
   18548:	ldr	r1, [sp]
   1854c:	str	r0, [sp, #8]
   18550:	str	r6, [sp, #4]
   18554:	ldr	r0, [r1]
   18558:	cmp	r0, #0
   1855c:	beq	185c8 <__assert_fail@plt+0x6cdc>
   18560:	ldr	r4, [r5]
   18564:	mov	r8, #0
   18568:	movw	r9, #65533	; 0xfffd
   1856c:	mov	r6, r1
   18570:	bl	11538 <wcwidth@plt>
   18574:	cmn	r0, #1
   18578:	moveq	r0, #1
   1857c:	streq	r9, [r6]
   18580:	add	r7, r0, r8
   18584:	cmp	r7, r4
   18588:	bhi	185d4 <__assert_fail@plt+0x6ce8>
   1858c:	ldr	r0, [r6, #4]!
   18590:	mov	r8, r7
   18594:	cmp	r0, #0
   18598:	bne	18570 <__assert_fail@plt+0x6c84>
   1859c:	b	185d8 <__assert_fail@plt+0x6cec>
   185a0:	ldr	r2, [sp]
   185a4:	b	18348 <__assert_fail@plt+0x6a5c>
   185a8:	ldr	r3, [fp, #12]
   185ac:	ldr	r2, [sp]
   185b0:	mov	r6, #0
   185b4:	mvn	r9, #0
   185b8:	tst	r3, #1
   185bc:	mov	r0, r2
   185c0:	bne	1834c <__assert_fail@plt+0x6a60>
   185c4:	b	184c0 <__assert_fail@plt+0x6bd4>
   185c8:	mov	r6, r1
   185cc:	mov	r7, #0
   185d0:	b	185d8 <__assert_fail@plt+0x6cec>
   185d4:	mov	r7, r8
   185d8:	mov	r0, #0
   185dc:	ldr	r4, [sp]
   185e0:	ldr	r2, [sp, #4]
   185e4:	str	r0, [r6]
   185e8:	ldr	r6, [sp, #8]
   185ec:	mov	r1, r4
   185f0:	mov	r0, r6
   185f4:	bl	11670 <wcstombs@plt>
   185f8:	mov	r2, r4
   185fc:	mov	r8, r0
   18600:	mov	r4, r6
   18604:	b	18348 <__assert_fail@plt+0x6a5c>
   18608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1860c:	add	fp, sp, #28
   18610:	sub	sp, sp, #12
   18614:	ldr	r8, [r1]
   18618:	mov	sl, r0
   1861c:	mov	r9, r2
   18620:	mov	r6, r1
   18624:	mov	r7, #0
   18628:	str	r3, [sp, #8]
   1862c:	mov	r0, r8
   18630:	mov	r5, r8
   18634:	cmp	r0, r5
   18638:	bcc	1869c <__assert_fail@plt+0x6db0>
   1863c:	add	r5, r0, #1
   18640:	mov	r0, r7
   18644:	mov	r1, r5
   18648:	bl	1d640 <__assert_fail@plt+0xbd54>
   1864c:	cmp	r0, #0
   18650:	beq	18690 <__assert_fail@plt+0x6da4>
   18654:	mov	r4, r0
   18658:	ldr	r0, [sp, #8]
   1865c:	str	r8, [r6]
   18660:	mov	r2, r5
   18664:	mov	r3, r6
   18668:	str	r9, [sp]
   1866c:	mov	r1, r4
   18670:	str	r0, [sp, #4]
   18674:	mov	r0, sl
   18678:	bl	1822c <__assert_fail@plt+0x6940>
   1867c:	cmn	r0, #1
   18680:	mov	r7, r4
   18684:	bne	18634 <__assert_fail@plt+0x6d48>
   18688:	mov	r0, r4
   1868c:	b	18694 <__assert_fail@plt+0x6da8>
   18690:	mov	r0, r7
   18694:	bl	16030 <__assert_fail@plt+0x4744>
   18698:	mov	r7, #0
   1869c:	mov	r0, r7
   186a0:	sub	sp, fp, #28
   186a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186a8:	push	{r4, r5, fp, lr}
   186ac:	add	fp, sp, #8
   186b0:	mov	r4, r1
   186b4:	mov	r5, r0
   186b8:	bl	11718 <strlen@plt>
   186bc:	mov	r1, r0
   186c0:	mov	r0, r5
   186c4:	mov	r2, r4
   186c8:	pop	{r4, r5, fp, lr}
   186cc:	b	186d0 <__assert_fail@plt+0x6de4>
   186d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186d4:	add	fp, sp, #28
   186d8:	sub	sp, sp, #20
   186dc:	mov	r4, r2
   186e0:	mov	r6, r1
   186e4:	mov	r5, r0
   186e8:	add	r7, r0, r1
   186ec:	bl	11640 <__ctype_get_mb_cur_max@plt>
   186f0:	cmp	r0, #1
   186f4:	bls	189dc <__assert_fail@plt+0x70f0>
   186f8:	cmp	r6, #1
   186fc:	blt	18a94 <__assert_fail@plt+0x71a8>
   18700:	and	sl, r4, #1
   18704:	mov	r3, #0
   18708:	add	r8, sp, #4
   1870c:	add	r9, sp, #8
   18710:	tst	r4, #2
   18714:	eor	r2, sl, #1
   18718:	bne	18aa4 <__assert_fail@plt+0x71b8>
   1871c:	mov	r4, #0
   18720:	ldrb	r0, [r5]
   18724:	sub	r0, r0, #32
   18728:	cmp	r0, #94	; 0x5e
   1872c:	bhi	188c8 <__assert_fail@plt+0x6fdc>
   18730:	add	r1, pc, #0
   18734:	ldr	pc, [r1, r0, lsl #2]
   18738:			; <UNDEFINED> instruction: 0x000188b4
   1873c:			; <UNDEFINED> instruction: 0x000188b4
   18740:			; <UNDEFINED> instruction: 0x000188b4
   18744:			; <UNDEFINED> instruction: 0x000188b4
   18748:	andeq	r8, r1, r8, asr #17
   1874c:			; <UNDEFINED> instruction: 0x000188b4
   18750:			; <UNDEFINED> instruction: 0x000188b4
   18754:			; <UNDEFINED> instruction: 0x000188b4
   18758:			; <UNDEFINED> instruction: 0x000188b4
   1875c:			; <UNDEFINED> instruction: 0x000188b4
   18760:			; <UNDEFINED> instruction: 0x000188b4
   18764:			; <UNDEFINED> instruction: 0x000188b4
   18768:			; <UNDEFINED> instruction: 0x000188b4
   1876c:			; <UNDEFINED> instruction: 0x000188b4
   18770:			; <UNDEFINED> instruction: 0x000188b4
   18774:			; <UNDEFINED> instruction: 0x000188b4
   18778:			; <UNDEFINED> instruction: 0x000188b4
   1877c:			; <UNDEFINED> instruction: 0x000188b4
   18780:			; <UNDEFINED> instruction: 0x000188b4
   18784:			; <UNDEFINED> instruction: 0x000188b4
   18788:			; <UNDEFINED> instruction: 0x000188b4
   1878c:			; <UNDEFINED> instruction: 0x000188b4
   18790:			; <UNDEFINED> instruction: 0x000188b4
   18794:			; <UNDEFINED> instruction: 0x000188b4
   18798:			; <UNDEFINED> instruction: 0x000188b4
   1879c:			; <UNDEFINED> instruction: 0x000188b4
   187a0:			; <UNDEFINED> instruction: 0x000188b4
   187a4:			; <UNDEFINED> instruction: 0x000188b4
   187a8:			; <UNDEFINED> instruction: 0x000188b4
   187ac:			; <UNDEFINED> instruction: 0x000188b4
   187b0:			; <UNDEFINED> instruction: 0x000188b4
   187b4:			; <UNDEFINED> instruction: 0x000188b4
   187b8:	andeq	r8, r1, r8, asr #17
   187bc:			; <UNDEFINED> instruction: 0x000188b4
   187c0:			; <UNDEFINED> instruction: 0x000188b4
   187c4:			; <UNDEFINED> instruction: 0x000188b4
   187c8:			; <UNDEFINED> instruction: 0x000188b4
   187cc:			; <UNDEFINED> instruction: 0x000188b4
   187d0:			; <UNDEFINED> instruction: 0x000188b4
   187d4:			; <UNDEFINED> instruction: 0x000188b4
   187d8:			; <UNDEFINED> instruction: 0x000188b4
   187dc:			; <UNDEFINED> instruction: 0x000188b4
   187e0:			; <UNDEFINED> instruction: 0x000188b4
   187e4:			; <UNDEFINED> instruction: 0x000188b4
   187e8:			; <UNDEFINED> instruction: 0x000188b4
   187ec:			; <UNDEFINED> instruction: 0x000188b4
   187f0:			; <UNDEFINED> instruction: 0x000188b4
   187f4:			; <UNDEFINED> instruction: 0x000188b4
   187f8:			; <UNDEFINED> instruction: 0x000188b4
   187fc:			; <UNDEFINED> instruction: 0x000188b4
   18800:			; <UNDEFINED> instruction: 0x000188b4
   18804:			; <UNDEFINED> instruction: 0x000188b4
   18808:			; <UNDEFINED> instruction: 0x000188b4
   1880c:			; <UNDEFINED> instruction: 0x000188b4
   18810:			; <UNDEFINED> instruction: 0x000188b4
   18814:			; <UNDEFINED> instruction: 0x000188b4
   18818:			; <UNDEFINED> instruction: 0x000188b4
   1881c:			; <UNDEFINED> instruction: 0x000188b4
   18820:			; <UNDEFINED> instruction: 0x000188b4
   18824:			; <UNDEFINED> instruction: 0x000188b4
   18828:			; <UNDEFINED> instruction: 0x000188b4
   1882c:			; <UNDEFINED> instruction: 0x000188b4
   18830:			; <UNDEFINED> instruction: 0x000188b4
   18834:			; <UNDEFINED> instruction: 0x000188b4
   18838:	andeq	r8, r1, r8, asr #17
   1883c:			; <UNDEFINED> instruction: 0x000188b4
   18840:			; <UNDEFINED> instruction: 0x000188b4
   18844:			; <UNDEFINED> instruction: 0x000188b4
   18848:			; <UNDEFINED> instruction: 0x000188b4
   1884c:			; <UNDEFINED> instruction: 0x000188b4
   18850:			; <UNDEFINED> instruction: 0x000188b4
   18854:			; <UNDEFINED> instruction: 0x000188b4
   18858:			; <UNDEFINED> instruction: 0x000188b4
   1885c:			; <UNDEFINED> instruction: 0x000188b4
   18860:			; <UNDEFINED> instruction: 0x000188b4
   18864:			; <UNDEFINED> instruction: 0x000188b4
   18868:			; <UNDEFINED> instruction: 0x000188b4
   1886c:			; <UNDEFINED> instruction: 0x000188b4
   18870:			; <UNDEFINED> instruction: 0x000188b4
   18874:			; <UNDEFINED> instruction: 0x000188b4
   18878:			; <UNDEFINED> instruction: 0x000188b4
   1887c:			; <UNDEFINED> instruction: 0x000188b4
   18880:			; <UNDEFINED> instruction: 0x000188b4
   18884:			; <UNDEFINED> instruction: 0x000188b4
   18888:			; <UNDEFINED> instruction: 0x000188b4
   1888c:			; <UNDEFINED> instruction: 0x000188b4
   18890:			; <UNDEFINED> instruction: 0x000188b4
   18894:			; <UNDEFINED> instruction: 0x000188b4
   18898:			; <UNDEFINED> instruction: 0x000188b4
   1889c:			; <UNDEFINED> instruction: 0x000188b4
   188a0:			; <UNDEFINED> instruction: 0x000188b4
   188a4:			; <UNDEFINED> instruction: 0x000188b4
   188a8:			; <UNDEFINED> instruction: 0x000188b4
   188ac:			; <UNDEFINED> instruction: 0x000188b4
   188b0:			; <UNDEFINED> instruction: 0x000188b4
   188b4:	add	r4, r4, #1
   188b8:	add	r5, r5, #1
   188bc:	cmp	r5, r7
   188c0:	bcc	18720 <__assert_fail@plt+0x6e34>
   188c4:	b	18d48 <__assert_fail@plt+0x745c>
   188c8:	str	r2, [sp]
   188cc:	str	r3, [sp, #12]
   188d0:	str	r3, [sp, #8]
   188d4:	sub	r2, r7, r5
   188d8:	mov	r0, r8
   188dc:	mov	r1, r5
   188e0:	mov	r3, r9
   188e4:	mov	r6, r5
   188e8:	bl	181cc <__assert_fail@plt+0x68e0>
   188ec:	cmp	r0, #0
   188f0:	beq	18930 <__assert_fail@plt+0x7044>
   188f4:	mov	r5, r0
   188f8:	cmn	r0, #2
   188fc:	beq	18980 <__assert_fail@plt+0x7094>
   18900:	cmn	r5, #1
   18904:	beq	1899c <__assert_fail@plt+0x70b0>
   18908:	ldr	r0, [sp, #4]
   1890c:	bl	11538 <wcwidth@plt>
   18910:	cmn	r0, #1
   18914:	ble	18944 <__assert_fail@plt+0x7058>
   18918:	mvn	r1, #-2147483648	; 0x80000000
   1891c:	sub	r1, r1, r4
   18920:	cmp	r0, r1
   18924:	bgt	18978 <__assert_fail@plt+0x708c>
   18928:	add	r4, r0, r4
   1892c:	b	18960 <__assert_fail@plt+0x7074>
   18930:	mov	r5, #1
   18934:	ldr	r0, [sp, #4]
   18938:	bl	11538 <wcwidth@plt>
   1893c:	cmn	r0, #1
   18940:	bgt	18918 <__assert_fail@plt+0x702c>
   18944:	ldr	r0, [sp, #4]
   18948:	bl	115e0 <iswcntrl@plt>
   1894c:	cmp	r0, #0
   18950:	bne	18960 <__assert_fail@plt+0x7074>
   18954:	cmn	r4, #-2147483647	; 0x80000001
   18958:	beq	18978 <__assert_fail@plt+0x708c>
   1895c:	add	r4, r4, #1
   18960:	mov	r0, r9
   18964:	add	r5, r6, r5
   18968:	bl	1158c <mbsinit@plt>
   1896c:	cmp	r0, #0
   18970:	beq	188d4 <__assert_fail@plt+0x6fe8>
   18974:	b	189b0 <__assert_fail@plt+0x70c4>
   18978:	mov	r0, #7
   1897c:	b	189c4 <__assert_fail@plt+0x70d8>
   18980:	ldr	r0, [sp]
   18984:	cmp	sl, #0
   18988:	mov	r5, r7
   1898c:	add	r4, r4, r0
   18990:	mov	r0, #1
   18994:	beq	189b0 <__assert_fail@plt+0x70c4>
   18998:	b	189c4 <__assert_fail@plt+0x70d8>
   1899c:	mov	r0, #1
   189a0:	cmp	sl, #0
   189a4:	bne	189c4 <__assert_fail@plt+0x70d8>
   189a8:	add	r4, r4, #1
   189ac:	add	r5, r6, #1
   189b0:	ldr	r2, [sp]
   189b4:	mov	r3, #0
   189b8:	cmp	r5, r7
   189bc:	bcc	18720 <__assert_fail@plt+0x6e34>
   189c0:	b	18d48 <__assert_fail@plt+0x745c>
   189c4:	ldr	r2, [sp]
   189c8:	cmp	r0, #0
   189cc:	mov	r5, r6
   189d0:	mov	r3, #0
   189d4:	beq	188bc <__assert_fail@plt+0x6fd0>
   189d8:	b	18a30 <__assert_fail@plt+0x7144>
   189dc:	tst	r4, #2
   189e0:	bne	18a38 <__assert_fail@plt+0x714c>
   189e4:	mov	r4, #0
   189e8:	cmp	r5, r7
   189ec:	bcs	18d48 <__assert_fail@plt+0x745c>
   189f0:	ldrb	r6, [r5], #1
   189f4:	bl	116f4 <__ctype_b_loc@plt>
   189f8:	ldr	r0, [r0]
   189fc:	add	r0, r0, r6, lsl #1
   18a00:	ldrh	r1, [r0]
   18a04:	tst	r1, #16384	; 0x4000
   18a08:	bne	18a18 <__assert_fail@plt+0x712c>
   18a0c:	mov	r0, #0
   18a10:	tst	r1, #2
   18a14:	bne	18a28 <__assert_fail@plt+0x713c>
   18a18:	cmn	r4, #-2147483647	; 0x80000001
   18a1c:	mov	r0, #0
   18a20:	mvneq	r0, #0
   18a24:	addne	r4, r4, #1
   18a28:	ands	r0, r0, #7
   18a2c:	beq	189e8 <__assert_fail@plt+0x70fc>
   18a30:	mvn	r4, #0
   18a34:	b	18a80 <__assert_fail@plt+0x7194>
   18a38:	mov	r6, #0
   18a3c:	cmp	r5, r7
   18a40:	bcs	18d44 <__assert_fail@plt+0x7458>
   18a44:	ldrb	r4, [r5]
   18a48:	bl	116f4 <__ctype_b_loc@plt>
   18a4c:	ldr	r0, [r0]
   18a50:	add	r0, r0, r4, lsl #1
   18a54:	mvn	r4, #0
   18a58:	ldrb	r0, [r0, #1]
   18a5c:	tst	r0, #64	; 0x40
   18a60:	beq	18d48 <__assert_fail@plt+0x745c>
   18a64:	cmn	r6, #-2147483647	; 0x80000001
   18a68:	mov	r0, #0
   18a6c:	add	r5, r5, #1
   18a70:	movweq	r0, #7
   18a74:	addne	r6, r6, #1
   18a78:	cmp	r0, #0
   18a7c:	beq	18a3c <__assert_fail@plt+0x7150>
   18a80:	cmp	r0, #7
   18a84:	mvneq	r4, #-2147483648	; 0x80000000
   18a88:	mov	r0, r4
   18a8c:	sub	sp, fp, #28
   18a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a94:	mov	r4, #0
   18a98:	mov	r0, r4
   18a9c:	sub	sp, fp, #28
   18aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18aa4:	mov	r4, #0
   18aa8:	ldrb	r0, [r5]
   18aac:	sub	r0, r0, #32
   18ab0:	cmp	r0, #94	; 0x5e
   18ab4:	bhi	18c50 <__assert_fail@plt+0x7364>
   18ab8:	add	r1, pc, #0
   18abc:	ldr	pc, [r1, r0, lsl #2]
   18ac0:	andeq	r8, r1, ip, lsr ip
   18ac4:	andeq	r8, r1, ip, lsr ip
   18ac8:	andeq	r8, r1, ip, lsr ip
   18acc:	andeq	r8, r1, ip, lsr ip
   18ad0:	andeq	r8, r1, r0, asr ip
   18ad4:	andeq	r8, r1, ip, lsr ip
   18ad8:	andeq	r8, r1, ip, lsr ip
   18adc:	andeq	r8, r1, ip, lsr ip
   18ae0:	andeq	r8, r1, ip, lsr ip
   18ae4:	andeq	r8, r1, ip, lsr ip
   18ae8:	andeq	r8, r1, ip, lsr ip
   18aec:	andeq	r8, r1, ip, lsr ip
   18af0:	andeq	r8, r1, ip, lsr ip
   18af4:	andeq	r8, r1, ip, lsr ip
   18af8:	andeq	r8, r1, ip, lsr ip
   18afc:	andeq	r8, r1, ip, lsr ip
   18b00:	andeq	r8, r1, ip, lsr ip
   18b04:	andeq	r8, r1, ip, lsr ip
   18b08:	andeq	r8, r1, ip, lsr ip
   18b0c:	andeq	r8, r1, ip, lsr ip
   18b10:	andeq	r8, r1, ip, lsr ip
   18b14:	andeq	r8, r1, ip, lsr ip
   18b18:	andeq	r8, r1, ip, lsr ip
   18b1c:	andeq	r8, r1, ip, lsr ip
   18b20:	andeq	r8, r1, ip, lsr ip
   18b24:	andeq	r8, r1, ip, lsr ip
   18b28:	andeq	r8, r1, ip, lsr ip
   18b2c:	andeq	r8, r1, ip, lsr ip
   18b30:	andeq	r8, r1, ip, lsr ip
   18b34:	andeq	r8, r1, ip, lsr ip
   18b38:	andeq	r8, r1, ip, lsr ip
   18b3c:	andeq	r8, r1, ip, lsr ip
   18b40:	andeq	r8, r1, r0, asr ip
   18b44:	andeq	r8, r1, ip, lsr ip
   18b48:	andeq	r8, r1, ip, lsr ip
   18b4c:	andeq	r8, r1, ip, lsr ip
   18b50:	andeq	r8, r1, ip, lsr ip
   18b54:	andeq	r8, r1, ip, lsr ip
   18b58:	andeq	r8, r1, ip, lsr ip
   18b5c:	andeq	r8, r1, ip, lsr ip
   18b60:	andeq	r8, r1, ip, lsr ip
   18b64:	andeq	r8, r1, ip, lsr ip
   18b68:	andeq	r8, r1, ip, lsr ip
   18b6c:	andeq	r8, r1, ip, lsr ip
   18b70:	andeq	r8, r1, ip, lsr ip
   18b74:	andeq	r8, r1, ip, lsr ip
   18b78:	andeq	r8, r1, ip, lsr ip
   18b7c:	andeq	r8, r1, ip, lsr ip
   18b80:	andeq	r8, r1, ip, lsr ip
   18b84:	andeq	r8, r1, ip, lsr ip
   18b88:	andeq	r8, r1, ip, lsr ip
   18b8c:	andeq	r8, r1, ip, lsr ip
   18b90:	andeq	r8, r1, ip, lsr ip
   18b94:	andeq	r8, r1, ip, lsr ip
   18b98:	andeq	r8, r1, ip, lsr ip
   18b9c:	andeq	r8, r1, ip, lsr ip
   18ba0:	andeq	r8, r1, ip, lsr ip
   18ba4:	andeq	r8, r1, ip, lsr ip
   18ba8:	andeq	r8, r1, ip, lsr ip
   18bac:	andeq	r8, r1, ip, lsr ip
   18bb0:	andeq	r8, r1, ip, lsr ip
   18bb4:	andeq	r8, r1, ip, lsr ip
   18bb8:	andeq	r8, r1, ip, lsr ip
   18bbc:	andeq	r8, r1, ip, lsr ip
   18bc0:	andeq	r8, r1, r0, asr ip
   18bc4:	andeq	r8, r1, ip, lsr ip
   18bc8:	andeq	r8, r1, ip, lsr ip
   18bcc:	andeq	r8, r1, ip, lsr ip
   18bd0:	andeq	r8, r1, ip, lsr ip
   18bd4:	andeq	r8, r1, ip, lsr ip
   18bd8:	andeq	r8, r1, ip, lsr ip
   18bdc:	andeq	r8, r1, ip, lsr ip
   18be0:	andeq	r8, r1, ip, lsr ip
   18be4:	andeq	r8, r1, ip, lsr ip
   18be8:	andeq	r8, r1, ip, lsr ip
   18bec:	andeq	r8, r1, ip, lsr ip
   18bf0:	andeq	r8, r1, ip, lsr ip
   18bf4:	andeq	r8, r1, ip, lsr ip
   18bf8:	andeq	r8, r1, ip, lsr ip
   18bfc:	andeq	r8, r1, ip, lsr ip
   18c00:	andeq	r8, r1, ip, lsr ip
   18c04:	andeq	r8, r1, ip, lsr ip
   18c08:	andeq	r8, r1, ip, lsr ip
   18c0c:	andeq	r8, r1, ip, lsr ip
   18c10:	andeq	r8, r1, ip, lsr ip
   18c14:	andeq	r8, r1, ip, lsr ip
   18c18:	andeq	r8, r1, ip, lsr ip
   18c1c:	andeq	r8, r1, ip, lsr ip
   18c20:	andeq	r8, r1, ip, lsr ip
   18c24:	andeq	r8, r1, ip, lsr ip
   18c28:	andeq	r8, r1, ip, lsr ip
   18c2c:	andeq	r8, r1, ip, lsr ip
   18c30:	andeq	r8, r1, ip, lsr ip
   18c34:	andeq	r8, r1, ip, lsr ip
   18c38:	andeq	r8, r1, ip, lsr ip
   18c3c:	add	r4, r4, #1
   18c40:	add	r5, r5, #1
   18c44:	cmp	r5, r7
   18c48:	bcc	18aa8 <__assert_fail@plt+0x71bc>
   18c4c:	b	18d48 <__assert_fail@plt+0x745c>
   18c50:	mov	r6, r5
   18c54:	str	r2, [sp]
   18c58:	str	r3, [sp, #12]
   18c5c:	str	r3, [sp, #8]
   18c60:	sub	r2, r7, r6
   18c64:	mov	r0, r8
   18c68:	mov	r1, r6
   18c6c:	mov	r3, r9
   18c70:	bl	181cc <__assert_fail@plt+0x68e0>
   18c74:	cmp	r0, #0
   18c78:	beq	18c94 <__assert_fail@plt+0x73a8>
   18c7c:	mov	r5, r0
   18c80:	cmn	r0, #2
   18c84:	beq	18ce8 <__assert_fail@plt+0x73fc>
   18c88:	cmn	r5, #1
   18c8c:	bne	18c98 <__assert_fail@plt+0x73ac>
   18c90:	b	18d04 <__assert_fail@plt+0x7418>
   18c94:	mov	r5, #1
   18c98:	ldr	r0, [sp, #4]
   18c9c:	bl	11538 <wcwidth@plt>
   18ca0:	cmp	r0, #0
   18ca4:	blt	18cd8 <__assert_fail@plt+0x73ec>
   18ca8:	mvn	r1, #-2147483648	; 0x80000000
   18cac:	sub	r1, r1, r4
   18cb0:	cmp	r0, r1
   18cb4:	bgt	18ce0 <__assert_fail@plt+0x73f4>
   18cb8:	add	r4, r0, r4
   18cbc:	mov	r0, r9
   18cc0:	add	r6, r6, r5
   18cc4:	bl	1158c <mbsinit@plt>
   18cc8:	cmp	r0, #0
   18ccc:	mov	r5, r6
   18cd0:	beq	18c60 <__assert_fail@plt+0x7374>
   18cd4:	b	18d18 <__assert_fail@plt+0x742c>
   18cd8:	mov	r0, #1
   18cdc:	b	18d2c <__assert_fail@plt+0x7440>
   18ce0:	mov	r0, #7
   18ce4:	b	18d2c <__assert_fail@plt+0x7440>
   18ce8:	ldr	r0, [sp]
   18cec:	cmp	sl, #0
   18cf0:	mov	r5, r7
   18cf4:	add	r4, r4, r0
   18cf8:	mov	r0, #1
   18cfc:	bne	18d2c <__assert_fail@plt+0x7440>
   18d00:	b	18d18 <__assert_fail@plt+0x742c>
   18d04:	mov	r0, #1
   18d08:	cmp	sl, #0
   18d0c:	bne	18d2c <__assert_fail@plt+0x7440>
   18d10:	add	r4, r4, #1
   18d14:	add	r5, r6, #1
   18d18:	ldr	r2, [sp]
   18d1c:	mov	r3, #0
   18d20:	cmp	r5, r7
   18d24:	bcc	18aa8 <__assert_fail@plt+0x71bc>
   18d28:	b	18d48 <__assert_fail@plt+0x745c>
   18d2c:	ldr	r2, [sp]
   18d30:	cmp	r0, #0
   18d34:	mov	r5, r6
   18d38:	mov	r3, #0
   18d3c:	beq	18c44 <__assert_fail@plt+0x7358>
   18d40:	b	18a30 <__assert_fail@plt+0x7144>
   18d44:	mov	r4, r6
   18d48:	mov	r0, r4
   18d4c:	sub	sp, fp, #28
   18d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d58:	add	fp, sp, #28
   18d5c:	sub	sp, sp, #36	; 0x24
   18d60:	movw	r0, #2460	; 0x99c
   18d64:	movw	r1, #2596	; 0xa24
   18d68:	movt	r0, #2
   18d6c:	movt	r1, #2
   18d70:	bl	11868 <fopen64@plt>
   18d74:	cmp	r0, #0
   18d78:	beq	194b8 <__assert_fail@plt+0x7bcc>
   18d7c:	mov	sl, r0
   18d80:	mov	r0, #0
   18d84:	add	r1, sp, #24
   18d88:	mov	r2, #10
   18d8c:	str	r0, [sp, #28]
   18d90:	str	r0, [sp, #24]
   18d94:	add	r0, sp, #28
   18d98:	mov	r3, sl
   18d9c:	bl	11514 <__getdelim@plt>
   18da0:	cmn	r0, #1
   18da4:	beq	1989c <__assert_fail@plt+0x7fb0>
   18da8:	movw	r8, #2481	; 0x9b1
   18dac:	add	r0, sp, #32
   18db0:	add	r9, sp, #12
   18db4:	add	r6, sp, #20
   18db8:	add	r7, sp, #16
   18dbc:	add	r5, sp, #28
   18dc0:	add	r4, sp, #24
   18dc4:	str	sl, [sp, #4]
   18dc8:	movt	r8, #2
   18dcc:	str	r0, [sp, #8]
   18dd0:	b	18f44 <__assert_fail@plt+0x7658>
   18dd4:	ldr	sl, [sp, #4]
   18dd8:	movw	r8, #2481	; 0x9b1
   18ddc:	add	r9, sp, #12
   18de0:	add	r6, sp, #20
   18de4:	movt	r8, #2
   18de8:	b	1948c <__assert_fail@plt+0x7ba0>
   18dec:	ldrb	r0, [r4]
   18df0:	cmp	r0, #47	; 0x2f
   18df4:	ldrbeq	r0, [r4, #1]
   18df8:	cmpeq	r0, #47	; 0x2f
   18dfc:	beq	18ef8 <__assert_fail@plt+0x760c>
   18e00:	movw	r1, #2620	; 0xa3c
   18e04:	mov	r0, r6
   18e08:	movt	r1, #2
   18e0c:	bl	11520 <strcmp@plt>
   18e10:	cmp	r0, #0
   18e14:	beq	19458 <__assert_fail@plt+0x7b6c>
   18e18:	movw	r1, #2625	; 0xa41
   18e1c:	mov	r0, r6
   18e20:	movt	r1, #2
   18e24:	bl	11520 <strcmp@plt>
   18e28:	cmp	r0, #0
   18e2c:	beq	19458 <__assert_fail@plt+0x7b6c>
   18e30:	movw	r1, #2629	; 0xa45
   18e34:	mov	r0, r6
   18e38:	movt	r1, #2
   18e3c:	bl	11520 <strcmp@plt>
   18e40:	cmp	r0, #0
   18e44:	beq	19458 <__assert_fail@plt+0x7b6c>
   18e48:	movw	r1, #2634	; 0xa4a
   18e4c:	mov	r0, r6
   18e50:	movt	r1, #2
   18e54:	bl	11520 <strcmp@plt>
   18e58:	cmp	r0, #0
   18e5c:	beq	19458 <__assert_fail@plt+0x7b6c>
   18e60:	movw	r1, #2645	; 0xa55
   18e64:	mov	r0, r6
   18e68:	movt	r1, #2
   18e6c:	bl	11520 <strcmp@plt>
   18e70:	cmp	r0, #0
   18e74:	beq	19458 <__assert_fail@plt+0x7b6c>
   18e78:	movw	r1, #2651	; 0xa5b
   18e7c:	mov	r0, r6
   18e80:	movt	r1, #2
   18e84:	bl	11520 <strcmp@plt>
   18e88:	cmp	r0, #0
   18e8c:	beq	19458 <__assert_fail@plt+0x7b6c>
   18e90:	movw	r1, #2656	; 0xa60
   18e94:	mov	r0, r6
   18e98:	movt	r1, #2
   18e9c:	bl	11520 <strcmp@plt>
   18ea0:	cmp	r0, #0
   18ea4:	beq	19458 <__assert_fail@plt+0x7b6c>
   18ea8:	movw	r1, #2662	; 0xa66
   18eac:	mov	r0, r6
   18eb0:	movt	r1, #2
   18eb4:	bl	11520 <strcmp@plt>
   18eb8:	cmp	r0, #0
   18ebc:	beq	19458 <__assert_fail@plt+0x7b6c>
   18ec0:	movw	r1, #2668	; 0xa6c
   18ec4:	mov	r0, r6
   18ec8:	movt	r1, #2
   18ecc:	bl	11520 <strcmp@plt>
   18ed0:	cmp	r0, #0
   18ed4:	add	r6, sp, #20
   18ed8:	beq	1945c <__assert_fail@plt+0x7b70>
   18edc:	movw	r0, #2673	; 0xa71
   18ee0:	mov	r1, r4
   18ee4:	movt	r0, #2
   18ee8:	bl	11520 <strcmp@plt>
   18eec:	clz	r0, r0
   18ef0:	lsr	r8, r0, #5
   18ef4:	b	1945c <__assert_fail@plt+0x7b70>
   18ef8:	movw	r1, #2604	; 0xa2c
   18efc:	mov	r0, r6
   18f00:	movt	r1, #2
   18f04:	bl	11520 <strcmp@plt>
   18f08:	cmp	r0, #0
   18f0c:	beq	19458 <__assert_fail@plt+0x7b6c>
   18f10:	movw	r1, #2610	; 0xa32
   18f14:	mov	r0, r6
   18f18:	movt	r1, #2
   18f1c:	bl	11520 <strcmp@plt>
   18f20:	cmp	r0, #0
   18f24:	beq	19458 <__assert_fail@plt+0x7b6c>
   18f28:	movw	r1, #2615	; 0xa37
   18f2c:	mov	r0, r6
   18f30:	movt	r1, #2
   18f34:	bl	11520 <strcmp@plt>
   18f38:	cmp	r0, #0
   18f3c:	bne	18e00 <__assert_fail@plt+0x7514>
   18f40:	b	19458 <__assert_fail@plt+0x7b6c>
   18f44:	ldr	r0, [sp, #28]
   18f48:	mov	r1, r8
   18f4c:	mov	r2, r6
   18f50:	mov	r3, r7
   18f54:	str	r9, [sp]
   18f58:	bl	1182c <sscanf@plt>
   18f5c:	orr	r0, r0, #1
   18f60:	cmp	r0, #3
   18f64:	bne	19498 <__assert_fail@plt+0x7bac>
   18f68:	ldr	r0, [sp, #12]
   18f6c:	ldr	r1, [sp, #28]
   18f70:	add	r0, r1, r0
   18f74:	mov	r1, #32
   18f78:	mov	r5, r0
   18f7c:	bl	11724 <strchr@plt>
   18f80:	cmp	r0, #0
   18f84:	beq	19488 <__assert_fail@plt+0x7b9c>
   18f88:	mov	r6, r0
   18f8c:	mov	r4, #0
   18f90:	mov	r1, #32
   18f94:	strb	r4, [r6], #1
   18f98:	mov	r0, r6
   18f9c:	bl	11724 <strchr@plt>
   18fa0:	cmp	r0, #0
   18fa4:	beq	19488 <__assert_fail@plt+0x7b9c>
   18fa8:	movw	r1, #2498	; 0x9c2
   18fac:	strb	r4, [r0], #1
   18fb0:	movt	r1, #2
   18fb4:	bl	1d694 <__assert_fail@plt+0xbda8>
   18fb8:	cmp	r0, #0
   18fbc:	beq	19488 <__assert_fail@plt+0x7b9c>
   18fc0:	add	sl, r0, #3
   18fc4:	mov	r1, #32
   18fc8:	mov	r0, sl
   18fcc:	bl	11724 <strchr@plt>
   18fd0:	cmp	r0, #0
   18fd4:	beq	18dd4 <__assert_fail@plt+0x74e8>
   18fd8:	mov	r9, r0
   18fdc:	mov	r4, #0
   18fe0:	mov	r1, #32
   18fe4:	strb	r4, [r9], #1
   18fe8:	mov	r0, r9
   18fec:	bl	11724 <strchr@plt>
   18ff0:	cmp	r0, #0
   18ff4:	beq	18dd4 <__assert_fail@plt+0x74e8>
   18ff8:	strb	r4, [r0]
   18ffc:	mov	r0, r9
   19000:	bl	11718 <strlen@plt>
   19004:	adds	r0, r0, #1
   19008:	mov	r8, r5
   1900c:	beq	1908c <__assert_fail@plt+0x77a0>
   19010:	mov	r2, #0
   19014:	mov	r1, r9
   19018:	ldrb	r3, [r9, r2]
   1901c:	add	r7, r2, #4
   19020:	cmp	r7, r0
   19024:	bcs	1907c <__assert_fail@plt+0x7790>
   19028:	cmp	r3, #92	; 0x5c
   1902c:	bne	1907c <__assert_fail@plt+0x7790>
   19030:	add	r7, r9, r2
   19034:	ldrb	r5, [r7, #1]
   19038:	and	r4, r5, #252	; 0xfc
   1903c:	cmp	r4, #48	; 0x30
   19040:	bne	1907c <__assert_fail@plt+0x7790>
   19044:	ldrb	r4, [r7, #2]
   19048:	and	r7, r4, #248	; 0xf8
   1904c:	cmp	r7, #48	; 0x30
   19050:	bne	1907c <__assert_fail@plt+0x7790>
   19054:	add	ip, r2, #3
   19058:	ldrb	lr, [r9, ip]
   1905c:	and	r7, lr, #248	; 0xf8
   19060:	cmp	r7, #48	; 0x30
   19064:	bne	1907c <__assert_fail@plt+0x7790>
   19068:	lsl	r2, r5, #6
   1906c:	add	r2, r2, r4, lsl #3
   19070:	add	r2, r2, lr
   19074:	add	r3, r2, #80	; 0x50
   19078:	mov	r2, ip
   1907c:	add	r2, r2, #1
   19080:	strb	r3, [r1], #1
   19084:	cmp	r2, r0
   19088:	bcc	19018 <__assert_fail@plt+0x772c>
   1908c:	mov	r0, r6
   19090:	bl	11718 <strlen@plt>
   19094:	adds	r0, r0, #1
   19098:	beq	19118 <__assert_fail@plt+0x782c>
   1909c:	mov	r2, #0
   190a0:	mov	r1, r6
   190a4:	ldrb	r3, [r6, r2]
   190a8:	add	r7, r2, #4
   190ac:	cmp	r7, r0
   190b0:	bcs	19108 <__assert_fail@plt+0x781c>
   190b4:	cmp	r3, #92	; 0x5c
   190b8:	bne	19108 <__assert_fail@plt+0x781c>
   190bc:	add	r7, r6, r2
   190c0:	ldrb	r5, [r7, #1]
   190c4:	and	r4, r5, #252	; 0xfc
   190c8:	cmp	r4, #48	; 0x30
   190cc:	bne	19108 <__assert_fail@plt+0x781c>
   190d0:	ldrb	r4, [r7, #2]
   190d4:	and	r7, r4, #248	; 0xf8
   190d8:	cmp	r7, #48	; 0x30
   190dc:	bne	19108 <__assert_fail@plt+0x781c>
   190e0:	add	ip, r2, #3
   190e4:	ldrb	lr, [r6, ip]
   190e8:	and	r7, lr, #248	; 0xf8
   190ec:	cmp	r7, #48	; 0x30
   190f0:	bne	19108 <__assert_fail@plt+0x781c>
   190f4:	lsl	r2, r5, #6
   190f8:	add	r2, r2, r4, lsl #3
   190fc:	add	r2, r2, lr
   19100:	add	r3, r2, #80	; 0x50
   19104:	mov	r2, ip
   19108:	add	r2, r2, #1
   1910c:	strb	r3, [r1], #1
   19110:	cmp	r2, r0
   19114:	bcc	190a4 <__assert_fail@plt+0x77b8>
   19118:	mov	r0, r8
   1911c:	bl	11718 <strlen@plt>
   19120:	adds	r0, r0, #1
   19124:	beq	191a4 <__assert_fail@plt+0x78b8>
   19128:	mov	r2, #0
   1912c:	mov	r1, r8
   19130:	ldrb	r3, [r8, r2]
   19134:	add	r7, r2, #4
   19138:	cmp	r7, r0
   1913c:	bcs	19194 <__assert_fail@plt+0x78a8>
   19140:	cmp	r3, #92	; 0x5c
   19144:	bne	19194 <__assert_fail@plt+0x78a8>
   19148:	add	r7, r8, r2
   1914c:	ldrb	r5, [r7, #1]
   19150:	and	r4, r5, #252	; 0xfc
   19154:	cmp	r4, #48	; 0x30
   19158:	bne	19194 <__assert_fail@plt+0x78a8>
   1915c:	ldrb	r4, [r7, #2]
   19160:	and	r7, r4, #248	; 0xf8
   19164:	cmp	r7, #48	; 0x30
   19168:	bne	19194 <__assert_fail@plt+0x78a8>
   1916c:	add	ip, r2, #3
   19170:	ldrb	lr, [r8, ip]
   19174:	and	r7, lr, #248	; 0xf8
   19178:	cmp	r7, #48	; 0x30
   1917c:	bne	19194 <__assert_fail@plt+0x78a8>
   19180:	lsl	r2, r5, #6
   19184:	add	r2, r2, r4, lsl #3
   19188:	add	r2, r2, lr
   1918c:	add	r3, r2, #80	; 0x50
   19190:	mov	r2, ip
   19194:	add	r2, r2, #1
   19198:	strb	r3, [r1], #1
   1919c:	cmp	r2, r0
   191a0:	bcc	19130 <__assert_fail@plt+0x7844>
   191a4:	mov	r0, sl
   191a8:	bl	11718 <strlen@plt>
   191ac:	adds	r0, r0, #1
   191b0:	beq	19230 <__assert_fail@plt+0x7944>
   191b4:	mov	r2, #0
   191b8:	mov	r1, sl
   191bc:	ldrb	r3, [sl, r2]
   191c0:	add	r7, r2, #4
   191c4:	cmp	r7, r0
   191c8:	bcs	19220 <__assert_fail@plt+0x7934>
   191cc:	cmp	r3, #92	; 0x5c
   191d0:	bne	19220 <__assert_fail@plt+0x7934>
   191d4:	add	r7, sl, r2
   191d8:	ldrb	r5, [r7, #1]
   191dc:	and	r4, r5, #252	; 0xfc
   191e0:	cmp	r4, #48	; 0x30
   191e4:	bne	19220 <__assert_fail@plt+0x7934>
   191e8:	ldrb	r4, [r7, #2]
   191ec:	and	r7, r4, #248	; 0xf8
   191f0:	cmp	r7, #48	; 0x30
   191f4:	bne	19220 <__assert_fail@plt+0x7934>
   191f8:	add	ip, r2, #3
   191fc:	ldrb	lr, [sl, ip]
   19200:	and	r7, lr, #248	; 0xf8
   19204:	cmp	r7, #48	; 0x30
   19208:	bne	19220 <__assert_fail@plt+0x7934>
   1920c:	lsl	r2, r5, #6
   19210:	add	r2, r2, r4, lsl #3
   19214:	add	r2, r2, lr
   19218:	add	r3, r2, #80	; 0x50
   1921c:	mov	r2, ip
   19220:	add	r2, r2, #1
   19224:	strb	r3, [r1], #1
   19228:	cmp	r2, r0
   1922c:	bcc	191bc <__assert_fail@plt+0x78d0>
   19230:	mov	r0, #32
   19234:	bl	1c264 <__assert_fail@plt+0xa978>
   19238:	mov	r7, r0
   1923c:	mov	r0, r9
   19240:	bl	1c784 <__assert_fail@plt+0xae98>
   19244:	str	r0, [r7]
   19248:	mov	r0, r6
   1924c:	bl	1c784 <__assert_fail@plt+0xae98>
   19250:	str	r0, [r7, #4]
   19254:	mov	r0, r8
   19258:	bl	1c784 <__assert_fail@plt+0xae98>
   1925c:	str	r0, [r7, #8]
   19260:	mov	r0, sl
   19264:	bl	1c784 <__assert_fail@plt+0xae98>
   19268:	str	r0, [r7, #12]
   1926c:	mov	r6, r0
   19270:	ldr	r2, [sp, #20]
   19274:	ldrb	r0, [r7, #24]
   19278:	mov	r3, r2
   1927c:	orr	r4, r0, #4
   19280:	ldr	r0, [sp, #16]
   19284:	bfc	r3, #0, #12
   19288:	strb	r4, [r7, #24]
   1928c:	bic	r1, r0, #255	; 0xff
   19290:	uxtb	r0, r0
   19294:	bfi	r0, r2, #8, #12
   19298:	orr	r3, r3, r1, lsr #20
   1929c:	orr	r0, r0, r1, lsl #12
   192a0:	movw	r1, #2502	; 0x9c6
   192a4:	str	r3, [r7, #20]
   192a8:	str	r0, [r7, #16]
   192ac:	mov	r0, r6
   192b0:	movt	r1, #2
   192b4:	bl	11520 <strcmp@plt>
   192b8:	cmp	r0, #0
   192bc:	mov	r8, #1
   192c0:	mov	r0, #1
   192c4:	beq	19430 <__assert_fail@plt+0x7b44>
   192c8:	movw	r1, #2509	; 0x9cd
   192cc:	mov	r0, r6
   192d0:	movt	r1, #2
   192d4:	bl	11520 <strcmp@plt>
   192d8:	cmp	r0, #0
   192dc:	mov	r0, #1
   192e0:	beq	19430 <__assert_fail@plt+0x7b44>
   192e4:	movw	r1, #2514	; 0x9d2
   192e8:	mov	r0, r6
   192ec:	movt	r1, #2
   192f0:	bl	11520 <strcmp@plt>
   192f4:	cmp	r0, #0
   192f8:	mov	r0, #1
   192fc:	beq	19430 <__assert_fail@plt+0x7b44>
   19300:	movw	r1, #2520	; 0x9d8
   19304:	mov	r0, r6
   19308:	movt	r1, #2
   1930c:	bl	11520 <strcmp@plt>
   19310:	cmp	r0, #0
   19314:	mov	r0, #1
   19318:	beq	19430 <__assert_fail@plt+0x7b44>
   1931c:	movw	r1, #2528	; 0x9e0
   19320:	mov	r0, r6
   19324:	movt	r1, #2
   19328:	bl	11520 <strcmp@plt>
   1932c:	cmp	r0, #0
   19330:	mov	r0, #1
   19334:	beq	19430 <__assert_fail@plt+0x7b44>
   19338:	movw	r1, #2535	; 0x9e7
   1933c:	mov	r0, r6
   19340:	movt	r1, #2
   19344:	bl	11520 <strcmp@plt>
   19348:	cmp	r0, #0
   1934c:	mov	r0, #1
   19350:	beq	19430 <__assert_fail@plt+0x7b44>
   19354:	movw	r1, #2543	; 0x9ef
   19358:	mov	r0, r6
   1935c:	movt	r1, #2
   19360:	bl	11520 <strcmp@plt>
   19364:	cmp	r0, #0
   19368:	mov	r0, #1
   1936c:	beq	19430 <__assert_fail@plt+0x7b44>
   19370:	movw	r1, #2555	; 0x9fb
   19374:	mov	r0, r6
   19378:	movt	r1, #2
   1937c:	bl	11520 <strcmp@plt>
   19380:	cmp	r0, #0
   19384:	mov	r0, #1
   19388:	beq	19430 <__assert_fail@plt+0x7b44>
   1938c:	movw	r1, #2562	; 0xa02
   19390:	mov	r0, r6
   19394:	movt	r1, #2
   19398:	bl	11520 <strcmp@plt>
   1939c:	cmp	r0, #0
   193a0:	mov	r0, #1
   193a4:	beq	19430 <__assert_fail@plt+0x7b44>
   193a8:	movw	r1, #2573	; 0xa0d
   193ac:	mov	r0, r6
   193b0:	movt	r1, #2
   193b4:	bl	11520 <strcmp@plt>
   193b8:	cmp	r0, #0
   193bc:	mov	r0, #1
   193c0:	beq	19430 <__assert_fail@plt+0x7b44>
   193c4:	movw	r1, #2579	; 0xa13
   193c8:	mov	r0, r6
   193cc:	movt	r1, #2
   193d0:	bl	11520 <strcmp@plt>
   193d4:	cmp	r0, #0
   193d8:	mov	r0, #1
   193dc:	beq	19430 <__assert_fail@plt+0x7b44>
   193e0:	movw	r1, #2585	; 0xa19
   193e4:	mov	r0, r6
   193e8:	movt	r1, #2
   193ec:	bl	11520 <strcmp@plt>
   193f0:	cmp	r0, #0
   193f4:	mov	r0, #1
   193f8:	beq	19430 <__assert_fail@plt+0x7b44>
   193fc:	movw	r1, #2592	; 0xa20
   19400:	mov	r0, r6
   19404:	movt	r1, #2
   19408:	bl	11520 <strcmp@plt>
   1940c:	cmp	r0, #0
   19410:	mov	r0, #1
   19414:	beq	19430 <__assert_fail@plt+0x7b44>
   19418:	movw	r1, #2599	; 0xa27
   1941c:	mov	r0, r6
   19420:	movt	r1, #2
   19424:	bl	11520 <strcmp@plt>
   19428:	clz	r0, r0
   1942c:	lsr	r0, r0, #5
   19430:	bic	r1, r4, #1
   19434:	orr	r5, r1, r0
   19438:	mov	r1, #58	; 0x3a
   1943c:	strb	r5, [r7, #24]
   19440:	ldr	r4, [r7]
   19444:	mov	r0, r4
   19448:	bl	11724 <strchr@plt>
   1944c:	ldr	sl, [sp, #4]
   19450:	cmp	r0, #0
   19454:	beq	18dec <__assert_fail@plt+0x7500>
   19458:	add	r6, sp, #20
   1945c:	and	r0, r5, #253	; 0xfd
   19460:	add	r9, sp, #12
   19464:	orr	r0, r0, r8, lsl #1
   19468:	movw	r8, #2481	; 0x9b1
   1946c:	strb	r0, [r7, #24]
   19470:	ldr	r0, [sp, #8]
   19474:	movt	r8, #2
   19478:	str	r7, [r0]
   1947c:	add	r0, r7, #28
   19480:	str	r0, [sp, #8]
   19484:	b	1948c <__assert_fail@plt+0x7ba0>
   19488:	add	r6, sp, #20
   1948c:	add	r7, sp, #16
   19490:	add	r5, sp, #28
   19494:	add	r4, sp, #24
   19498:	mov	r0, r5
   1949c:	mov	r1, r4
   194a0:	mov	r2, #10
   194a4:	mov	r3, sl
   194a8:	bl	11514 <__getdelim@plt>
   194ac:	cmn	r0, #1
   194b0:	bne	18f44 <__assert_fail@plt+0x7658>
   194b4:	b	198a4 <__assert_fail@plt+0x7fb8>
   194b8:	movw	r0, #2680	; 0xa78
   194bc:	movw	r1, #2243	; 0x8c3
   194c0:	movt	r0, #2
   194c4:	movt	r1, #2
   194c8:	bl	11874 <setmntent@plt>
   194cc:	cmp	r0, #0
   194d0:	beq	19964 <__assert_fail@plt+0x8078>
   194d4:	mov	r8, r0
   194d8:	bl	11688 <getmntent@plt>
   194dc:	cmp	r0, #0
   194e0:	beq	19974 <__assert_fail@plt+0x8088>
   194e4:	mov	r5, r0
   194e8:	add	sl, sp, #32
   194ec:	b	19644 <__assert_fail@plt+0x7d58>
   194f0:	ldrb	r0, [r5]
   194f4:	cmp	r0, #47	; 0x2f
   194f8:	ldrbeq	r0, [r5, #1]
   194fc:	cmpeq	r0, #47	; 0x2f
   19500:	beq	195f8 <__assert_fail@plt+0x7d0c>
   19504:	movw	r1, #2620	; 0xa3c
   19508:	mov	r0, r7
   1950c:	movt	r1, #2
   19510:	bl	11520 <strcmp@plt>
   19514:	cmp	r0, #0
   19518:	beq	19854 <__assert_fail@plt+0x7f68>
   1951c:	movw	r1, #2625	; 0xa41
   19520:	mov	r0, r7
   19524:	movt	r1, #2
   19528:	bl	11520 <strcmp@plt>
   1952c:	cmp	r0, #0
   19530:	beq	19854 <__assert_fail@plt+0x7f68>
   19534:	movw	r1, #2629	; 0xa45
   19538:	mov	r0, r7
   1953c:	movt	r1, #2
   19540:	bl	11520 <strcmp@plt>
   19544:	cmp	r0, #0
   19548:	beq	19854 <__assert_fail@plt+0x7f68>
   1954c:	movw	r1, #2634	; 0xa4a
   19550:	mov	r0, r7
   19554:	movt	r1, #2
   19558:	bl	11520 <strcmp@plt>
   1955c:	cmp	r0, #0
   19560:	beq	19854 <__assert_fail@plt+0x7f68>
   19564:	movw	r1, #2645	; 0xa55
   19568:	mov	r0, r7
   1956c:	movt	r1, #2
   19570:	bl	11520 <strcmp@plt>
   19574:	cmp	r0, #0
   19578:	beq	19854 <__assert_fail@plt+0x7f68>
   1957c:	movw	r1, #2651	; 0xa5b
   19580:	mov	r0, r7
   19584:	movt	r1, #2
   19588:	bl	11520 <strcmp@plt>
   1958c:	cmp	r0, #0
   19590:	beq	19854 <__assert_fail@plt+0x7f68>
   19594:	movw	r1, #2656	; 0xa60
   19598:	mov	r0, r7
   1959c:	movt	r1, #2
   195a0:	bl	11520 <strcmp@plt>
   195a4:	cmp	r0, #0
   195a8:	beq	19854 <__assert_fail@plt+0x7f68>
   195ac:	movw	r1, #2662	; 0xa66
   195b0:	mov	r0, r7
   195b4:	movt	r1, #2
   195b8:	bl	11520 <strcmp@plt>
   195bc:	cmp	r0, #0
   195c0:	beq	19854 <__assert_fail@plt+0x7f68>
   195c4:	movw	r1, #2668	; 0xa6c
   195c8:	mov	r0, r7
   195cc:	movt	r1, #2
   195d0:	bl	11520 <strcmp@plt>
   195d4:	cmp	r0, #0
   195d8:	beq	19854 <__assert_fail@plt+0x7f68>
   195dc:	movw	r0, #2673	; 0xa71
   195e0:	mov	r1, r5
   195e4:	movt	r0, #2
   195e8:	bl	11520 <strcmp@plt>
   195ec:	clz	r0, r0
   195f0:	lsr	r6, r0, #5
   195f4:	b	19854 <__assert_fail@plt+0x7f68>
   195f8:	movw	r1, #2604	; 0xa2c
   195fc:	mov	r0, r7
   19600:	movt	r1, #2
   19604:	bl	11520 <strcmp@plt>
   19608:	cmp	r0, #0
   1960c:	beq	19854 <__assert_fail@plt+0x7f68>
   19610:	movw	r1, #2610	; 0xa32
   19614:	mov	r0, r7
   19618:	movt	r1, #2
   1961c:	bl	11520 <strcmp@plt>
   19620:	cmp	r0, #0
   19624:	beq	19854 <__assert_fail@plt+0x7f68>
   19628:	movw	r1, #2615	; 0xa37
   1962c:	mov	r0, r7
   19630:	movt	r1, #2
   19634:	bl	11520 <strcmp@plt>
   19638:	cmp	r0, #0
   1963c:	bne	19504 <__assert_fail@plt+0x7c18>
   19640:	b	19854 <__assert_fail@plt+0x7f68>
   19644:	movw	r1, #2690	; 0xa82
   19648:	mov	r0, r5
   1964c:	movt	r1, #2
   19650:	bl	1164c <hasmntopt@plt>
   19654:	str	r0, [sp, #8]
   19658:	mov	r0, #32
   1965c:	bl	1c264 <__assert_fail@plt+0xa978>
   19660:	mov	r9, r0
   19664:	ldr	r0, [r5]
   19668:	bl	1c784 <__assert_fail@plt+0xae98>
   1966c:	str	r0, [r9]
   19670:	ldr	r0, [r5, #4]
   19674:	bl	1c784 <__assert_fail@plt+0xae98>
   19678:	str	r0, [r9, #4]
   1967c:	mov	r0, #0
   19680:	str	r0, [r9, #8]
   19684:	ldr	r0, [r5, #8]
   19688:	bl	1c784 <__assert_fail@plt+0xae98>
   1968c:	str	r0, [r9, #12]
   19690:	mov	r7, r0
   19694:	movw	r1, #2502	; 0x9c6
   19698:	ldrb	r0, [r9, #24]
   1969c:	movt	r1, #2
   196a0:	orr	r4, r0, #4
   196a4:	mov	r0, r7
   196a8:	strb	r4, [r9, #24]
   196ac:	bl	11520 <strcmp@plt>
   196b0:	cmp	r0, #0
   196b4:	mov	r6, #1
   196b8:	mov	r0, #1
   196bc:	beq	19830 <__assert_fail@plt+0x7f44>
   196c0:	movw	r1, #2509	; 0x9cd
   196c4:	mov	r0, r7
   196c8:	movt	r1, #2
   196cc:	bl	11520 <strcmp@plt>
   196d0:	cmp	r0, #0
   196d4:	mov	r0, #1
   196d8:	beq	19830 <__assert_fail@plt+0x7f44>
   196dc:	movw	r1, #2514	; 0x9d2
   196e0:	mov	r0, r7
   196e4:	movt	r1, #2
   196e8:	bl	11520 <strcmp@plt>
   196ec:	cmp	r0, #0
   196f0:	mov	r0, #1
   196f4:	beq	19830 <__assert_fail@plt+0x7f44>
   196f8:	movw	r1, #2520	; 0x9d8
   196fc:	mov	r0, r7
   19700:	movt	r1, #2
   19704:	bl	11520 <strcmp@plt>
   19708:	cmp	r0, #0
   1970c:	mov	r0, #1
   19710:	beq	19830 <__assert_fail@plt+0x7f44>
   19714:	movw	r1, #2528	; 0x9e0
   19718:	mov	r0, r7
   1971c:	movt	r1, #2
   19720:	bl	11520 <strcmp@plt>
   19724:	cmp	r0, #0
   19728:	mov	r0, #1
   1972c:	beq	19830 <__assert_fail@plt+0x7f44>
   19730:	movw	r1, #2535	; 0x9e7
   19734:	mov	r0, r7
   19738:	movt	r1, #2
   1973c:	bl	11520 <strcmp@plt>
   19740:	cmp	r0, #0
   19744:	mov	r0, #1
   19748:	beq	19830 <__assert_fail@plt+0x7f44>
   1974c:	movw	r1, #2543	; 0x9ef
   19750:	mov	r0, r7
   19754:	movt	r1, #2
   19758:	bl	11520 <strcmp@plt>
   1975c:	cmp	r0, #0
   19760:	mov	r0, #1
   19764:	beq	19830 <__assert_fail@plt+0x7f44>
   19768:	movw	r1, #2555	; 0x9fb
   1976c:	mov	r0, r7
   19770:	movt	r1, #2
   19774:	bl	11520 <strcmp@plt>
   19778:	cmp	r0, #0
   1977c:	mov	r0, #1
   19780:	beq	19830 <__assert_fail@plt+0x7f44>
   19784:	movw	r1, #2562	; 0xa02
   19788:	mov	r0, r7
   1978c:	movt	r1, #2
   19790:	bl	11520 <strcmp@plt>
   19794:	cmp	r0, #0
   19798:	mov	r0, #1
   1979c:	beq	19830 <__assert_fail@plt+0x7f44>
   197a0:	movw	r1, #2573	; 0xa0d
   197a4:	mov	r0, r7
   197a8:	movt	r1, #2
   197ac:	bl	11520 <strcmp@plt>
   197b0:	cmp	r0, #0
   197b4:	mov	r0, #1
   197b8:	beq	19830 <__assert_fail@plt+0x7f44>
   197bc:	movw	r1, #2579	; 0xa13
   197c0:	mov	r0, r7
   197c4:	movt	r1, #2
   197c8:	bl	11520 <strcmp@plt>
   197cc:	cmp	r0, #0
   197d0:	mov	r0, #1
   197d4:	beq	19830 <__assert_fail@plt+0x7f44>
   197d8:	movw	r1, #2585	; 0xa19
   197dc:	mov	r0, r7
   197e0:	movt	r1, #2
   197e4:	bl	11520 <strcmp@plt>
   197e8:	cmp	r0, #0
   197ec:	mov	r0, #1
   197f0:	beq	19830 <__assert_fail@plt+0x7f44>
   197f4:	movw	r1, #2592	; 0xa20
   197f8:	mov	r0, r7
   197fc:	movt	r1, #2
   19800:	bl	11520 <strcmp@plt>
   19804:	cmp	r0, #0
   19808:	mov	r0, #1
   1980c:	beq	19830 <__assert_fail@plt+0x7f44>
   19810:	movw	r1, #2599	; 0xa27
   19814:	mov	r0, r7
   19818:	movt	r1, #2
   1981c:	bl	11520 <strcmp@plt>
   19820:	ldr	r1, [sp, #8]
   19824:	orr	r0, r1, r0
   19828:	clz	r0, r0
   1982c:	lsr	r0, r0, #5
   19830:	bic	r1, r4, #1
   19834:	orr	r4, r1, r0
   19838:	mov	r1, #58	; 0x3a
   1983c:	strb	r4, [r9, #24]
   19840:	ldr	r5, [r9]
   19844:	mov	r0, r5
   19848:	bl	11724 <strchr@plt>
   1984c:	cmp	r0, #0
   19850:	beq	194f0 <__assert_fail@plt+0x7c04>
   19854:	mvn	r0, #0
   19858:	str	r0, [r9, #16]
   1985c:	str	r0, [r9, #20]
   19860:	and	r0, r4, #253	; 0xfd
   19864:	orr	r0, r0, r6, lsl #1
   19868:	strb	r0, [r9, #24]
   1986c:	mov	r0, r8
   19870:	str	r9, [sl]
   19874:	add	sl, r9, #28
   19878:	bl	11688 <getmntent@plt>
   1987c:	mov	r5, r0
   19880:	cmp	r0, #0
   19884:	bne	19644 <__assert_fail@plt+0x7d58>
   19888:	mov	r0, r8
   1988c:	bl	117cc <endmntent@plt>
   19890:	cmp	r0, #0
   19894:	bne	19988 <__assert_fail@plt+0x809c>
   19898:	b	198ec <__assert_fail@plt+0x8000>
   1989c:	add	r0, sp, #32
   198a0:	str	r0, [sp, #8]
   198a4:	ldr	r0, [sp, #28]
   198a8:	bl	16030 <__assert_fail@plt+0x4744>
   198ac:	ldrb	r0, [sl]
   198b0:	tst	r0, #32
   198b4:	bne	198d0 <__assert_fail@plt+0x7fe4>
   198b8:	mov	r0, sl
   198bc:	bl	1ec38 <__assert_fail@plt+0xd34c>
   198c0:	ldr	sl, [sp, #8]
   198c4:	cmn	r0, #1
   198c8:	bne	19988 <__assert_fail@plt+0x809c>
   198cc:	b	198ec <__assert_fail@plt+0x8000>
   198d0:	bl	11748 <__errno_location@plt>
   198d4:	ldr	r6, [r0]
   198d8:	mov	r5, r0
   198dc:	mov	r0, sl
   198e0:	bl	1ec38 <__assert_fail@plt+0xd34c>
   198e4:	ldr	sl, [sp, #8]
   198e8:	str	r6, [r5]
   198ec:	bl	11748 <__errno_location@plt>
   198f0:	mov	r4, #0
   198f4:	ldr	r8, [r0]
   198f8:	mov	r5, r0
   198fc:	str	r4, [sl]
   19900:	ldr	r6, [sp, #32]
   19904:	cmp	r6, #0
   19908:	beq	19954 <__assert_fail@plt+0x8068>
   1990c:	ldr	r0, [r6]
   19910:	ldr	r7, [r6, #28]
   19914:	bl	16030 <__assert_fail@plt+0x4744>
   19918:	ldr	r0, [r6, #4]
   1991c:	bl	16030 <__assert_fail@plt+0x4744>
   19920:	ldr	r0, [r6, #8]
   19924:	bl	16030 <__assert_fail@plt+0x4744>
   19928:	ldrb	r0, [r6, #24]
   1992c:	tst	r0, #4
   19930:	beq	1993c <__assert_fail@plt+0x8050>
   19934:	ldr	r0, [r6, #12]
   19938:	bl	16030 <__assert_fail@plt+0x4744>
   1993c:	mov	r0, r6
   19940:	bl	16030 <__assert_fail@plt+0x4744>
   19944:	cmp	r7, #0
   19948:	mov	r6, r7
   1994c:	str	r7, [sp, #32]
   19950:	bne	1990c <__assert_fail@plt+0x8020>
   19954:	str	r8, [r5]
   19958:	mov	r0, r4
   1995c:	sub	sp, fp, #28
   19960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19964:	mov	r4, #0
   19968:	mov	r0, r4
   1996c:	sub	sp, fp, #28
   19970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19974:	add	sl, sp, #32
   19978:	mov	r0, r8
   1997c:	bl	117cc <endmntent@plt>
   19980:	cmp	r0, #0
   19984:	beq	198ec <__assert_fail@plt+0x8000>
   19988:	mov	r0, #0
   1998c:	str	r0, [sl]
   19990:	ldr	r4, [sp, #32]
   19994:	mov	r0, r4
   19998:	sub	sp, fp, #28
   1999c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199a0:	push	{r4, sl, fp, lr}
   199a4:	add	fp, sp, #8
   199a8:	mov	r4, r0
   199ac:	ldr	r0, [r0]
   199b0:	bl	16030 <__assert_fail@plt+0x4744>
   199b4:	ldr	r0, [r4, #4]
   199b8:	bl	16030 <__assert_fail@plt+0x4744>
   199bc:	ldr	r0, [r4, #8]
   199c0:	bl	16030 <__assert_fail@plt+0x4744>
   199c4:	ldrb	r0, [r4, #24]
   199c8:	tst	r0, #4
   199cc:	beq	199d8 <__assert_fail@plt+0x80ec>
   199d0:	ldr	r0, [r4, #12]
   199d4:	bl	16030 <__assert_fail@plt+0x4744>
   199d8:	mov	r0, r4
   199dc:	pop	{r4, sl, fp, lr}
   199e0:	b	16030 <__assert_fail@plt+0x4744>
   199e4:	push	{r4, r5, fp, lr}
   199e8:	add	fp, sp, #8
   199ec:	cmp	r0, #0
   199f0:	beq	19a84 <__assert_fail@plt+0x8198>
   199f4:	mov	r1, #47	; 0x2f
   199f8:	mov	r4, r0
   199fc:	bl	11808 <strrchr@plt>
   19a00:	cmp	r0, #0
   19a04:	mov	r5, r4
   19a08:	addne	r5, r0, #1
   19a0c:	sub	r0, r5, r4
   19a10:	cmp	r0, #7
   19a14:	blt	19a68 <__assert_fail@plt+0x817c>
   19a18:	movw	r1, #2751	; 0xabf
   19a1c:	sub	r0, r5, #7
   19a20:	mov	r2, #7
   19a24:	movt	r1, #2
   19a28:	bl	118b0 <strncmp@plt>
   19a2c:	cmp	r0, #0
   19a30:	bne	19a68 <__assert_fail@plt+0x817c>
   19a34:	movw	r1, #2759	; 0xac7
   19a38:	mov	r0, r5
   19a3c:	mov	r2, #3
   19a40:	movt	r1, #2
   19a44:	bl	118b0 <strncmp@plt>
   19a48:	cmp	r0, #0
   19a4c:	beq	19a58 <__assert_fail@plt+0x816c>
   19a50:	mov	r4, r5
   19a54:	b	19a68 <__assert_fail@plt+0x817c>
   19a58:	movw	r0, #8992	; 0x2320
   19a5c:	add	r4, r5, #3
   19a60:	movt	r0, #3
   19a64:	str	r4, [r0]
   19a68:	movw	r0, #8996	; 0x2324
   19a6c:	movt	r0, #3
   19a70:	str	r4, [r0]
   19a74:	movw	r0, #9144	; 0x23b8
   19a78:	movt	r0, #3
   19a7c:	str	r4, [r0]
   19a80:	pop	{r4, r5, fp, pc}
   19a84:	movw	r0, #9008	; 0x2330
   19a88:	mov	r1, #55	; 0x37
   19a8c:	mov	r2, #1
   19a90:	movt	r0, #3
   19a94:	ldr	r3, [r0]
   19a98:	movw	r0, #2695	; 0xa87
   19a9c:	movt	r0, #2
   19aa0:	bl	11628 <fwrite@plt>
   19aa4:	bl	118bc <abort@plt>
   19aa8:	push	{r4, r5, r6, sl, fp, lr}
   19aac:	add	fp, sp, #16
   19ab0:	mov	r4, r0
   19ab4:	movw	r0, #9152	; 0x23c0
   19ab8:	movt	r0, #3
   19abc:	cmp	r4, #0
   19ac0:	moveq	r4, r0
   19ac4:	bl	11748 <__errno_location@plt>
   19ac8:	ldr	r6, [r0]
   19acc:	mov	r5, r0
   19ad0:	mov	r0, r4
   19ad4:	mov	r1, #48	; 0x30
   19ad8:	bl	1c6c4 <__assert_fail@plt+0xadd8>
   19adc:	str	r6, [r5]
   19ae0:	pop	{r4, r5, r6, sl, fp, pc}
   19ae4:	movw	r1, #9152	; 0x23c0
   19ae8:	cmp	r0, #0
   19aec:	movt	r1, #3
   19af0:	movne	r1, r0
   19af4:	ldr	r0, [r1]
   19af8:	bx	lr
   19afc:	movw	r2, #9152	; 0x23c0
   19b00:	cmp	r0, #0
   19b04:	movt	r2, #3
   19b08:	movne	r2, r0
   19b0c:	str	r1, [r2]
   19b10:	bx	lr
   19b14:	movw	r3, #9152	; 0x23c0
   19b18:	cmp	r0, #0
   19b1c:	movt	r3, #3
   19b20:	movne	r3, r0
   19b24:	ubfx	r0, r1, #5, #3
   19b28:	and	r1, r1, #31
   19b2c:	add	r0, r3, r0, lsl #2
   19b30:	ldr	r3, [r0, #8]
   19b34:	eor	r2, r2, r3, lsr r1
   19b38:	and	r2, r2, #1
   19b3c:	eor	r2, r3, r2, lsl r1
   19b40:	str	r2, [r0, #8]
   19b44:	mov	r0, #1
   19b48:	and	r0, r0, r3, lsr r1
   19b4c:	bx	lr
   19b50:	movw	r2, #9152	; 0x23c0
   19b54:	cmp	r0, #0
   19b58:	movt	r2, #3
   19b5c:	movne	r2, r0
   19b60:	ldr	r0, [r2, #4]
   19b64:	str	r1, [r2, #4]
   19b68:	bx	lr
   19b6c:	movw	r3, #9152	; 0x23c0
   19b70:	cmp	r0, #0
   19b74:	movt	r3, #3
   19b78:	movne	r3, r0
   19b7c:	cmp	r1, #0
   19b80:	mov	r0, #10
   19b84:	cmpne	r2, #0
   19b88:	str	r0, [r3]
   19b8c:	bne	19b9c <__assert_fail@plt+0x82b0>
   19b90:	push	{fp, lr}
   19b94:	mov	fp, sp
   19b98:	bl	118bc <abort@plt>
   19b9c:	str	r1, [r3, #40]	; 0x28
   19ba0:	str	r2, [r3, #44]	; 0x2c
   19ba4:	bx	lr
   19ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bac:	add	fp, sp, #28
   19bb0:	sub	sp, sp, #20
   19bb4:	mov	r7, r0
   19bb8:	ldr	r0, [fp, #8]
   19bbc:	movw	r5, #9152	; 0x23c0
   19bc0:	mov	r8, r3
   19bc4:	mov	r9, r2
   19bc8:	mov	sl, r1
   19bcc:	movt	r5, #3
   19bd0:	cmp	r0, #0
   19bd4:	movne	r5, r0
   19bd8:	bl	11748 <__errno_location@plt>
   19bdc:	mov	r4, r0
   19be0:	ldm	r5, {r0, r1}
   19be4:	ldr	r2, [r5, #40]	; 0x28
   19be8:	ldr	r3, [r5, #44]	; 0x2c
   19bec:	add	r5, r5, #8
   19bf0:	ldr	r6, [r4]
   19bf4:	stm	sp, {r0, r1, r5}
   19bf8:	str	r2, [sp, #12]
   19bfc:	str	r3, [sp, #16]
   19c00:	mov	r0, r7
   19c04:	mov	r1, sl
   19c08:	mov	r2, r9
   19c0c:	mov	r3, r8
   19c10:	bl	19c20 <__assert_fail@plt+0x8334>
   19c14:	str	r6, [r4]
   19c18:	sub	sp, fp, #28
   19c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c24:	add	fp, sp, #28
   19c28:	sub	sp, sp, #156	; 0x9c
   19c2c:	str	r0, [sp, #76]	; 0x4c
   19c30:	ldr	r0, [fp, #12]
   19c34:	mov	r6, r1
   19c38:	str	r3, [sp, #84]	; 0x54
   19c3c:	str	r2, [fp, #-84]	; 0xffffffac
   19c40:	and	r1, r0, #4
   19c44:	str	r1, [sp, #24]
   19c48:	and	r1, r0, #1
   19c4c:	str	r1, [sp, #28]
   19c50:	ubfx	r8, r0, #1, #1
   19c54:	bl	11640 <__ctype_get_mb_cur_max@plt>
   19c58:	str	r0, [sp, #32]
   19c5c:	ldr	r0, [fp, #24]
   19c60:	ldr	r7, [fp, #8]
   19c64:	mov	r1, #0
   19c68:	mov	r2, #0
   19c6c:	mov	r4, #1
   19c70:	str	r1, [sp, #52]	; 0x34
   19c74:	str	r0, [sp, #72]	; 0x48
   19c78:	ldr	r0, [fp, #20]
   19c7c:	str	r0, [sp, #68]	; 0x44
   19c80:	mov	r0, #0
   19c84:	str	r0, [sp, #48]	; 0x30
   19c88:	mov	r0, #0
   19c8c:	str	r0, [sp, #92]	; 0x5c
   19c90:	mov	r0, #0
   19c94:	str	r0, [fp, #-76]	; 0xffffffb4
   19c98:	mov	r0, #0
   19c9c:	cmp	r7, #10
   19ca0:	bhi	1af88 <__assert_fail@plt+0x969c>
   19ca4:	add	r1, pc, #28
   19ca8:	mov	sl, r6
   19cac:	ldr	r6, [sp, #76]	; 0x4c
   19cb0:	ldr	ip, [fp, #-84]	; 0xffffffac
   19cb4:	ldr	lr, [sp, #84]	; 0x54
   19cb8:	mov	r9, #0
   19cbc:	mov	r3, #1
   19cc0:	mov	r5, #0
   19cc4:	ldr	pc, [r1, r7, lsl #2]
   19cc8:	muleq	r1, r8, sp
   19ccc:	ldrdeq	r9, [r1], -r4
   19cd0:	andeq	r9, r1, r8, lsr #27
   19cd4:	muleq	r1, r0, sp
   19cd8:	andeq	r9, r1, r8, asr #27
   19cdc:	strdeq	r9, [r1], -ip
   19ce0:			; <UNDEFINED> instruction: 0x00019db8
   19ce4:	andeq	sl, r1, r8
   19ce8:	strdeq	r9, [r1], -r4
   19cec:	strdeq	r9, [r1], -r4
   19cf0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   19cf4:	mov	r9, r4
   19cf8:	movw	r4, #2839	; 0xb17
   19cfc:	mov	r5, r8
   19d00:	mov	r8, r2
   19d04:	mov	r0, #0
   19d08:	mov	r2, #5
   19d0c:	movt	r4, #2
   19d10:	mov	r1, r4
   19d14:	bl	115b0 <dcgettext@plt>
   19d18:	cmp	r0, r4
   19d1c:	str	r0, [sp, #68]	; 0x44
   19d20:	bne	19eb0 <__assert_fail@plt+0x85c4>
   19d24:	bl	1eed0 <__assert_fail@plt+0xd5e4>
   19d28:	ldrb	r1, [r0]
   19d2c:	and	r1, r1, #223	; 0xdf
   19d30:	cmp	r1, #71	; 0x47
   19d34:	beq	19e7c <__assert_fail@plt+0x8590>
   19d38:	cmp	r1, #85	; 0x55
   19d3c:	bne	19e94 <__assert_fail@plt+0x85a8>
   19d40:	ldrb	r1, [r0, #1]
   19d44:	and	r1, r1, #223	; 0xdf
   19d48:	cmp	r1, #84	; 0x54
   19d4c:	bne	19e94 <__assert_fail@plt+0x85a8>
   19d50:	ldrb	r1, [r0, #2]
   19d54:	and	r1, r1, #223	; 0xdf
   19d58:	cmp	r1, #70	; 0x46
   19d5c:	bne	19e94 <__assert_fail@plt+0x85a8>
   19d60:	ldrb	r1, [r0, #3]
   19d64:	cmp	r1, #45	; 0x2d
   19d68:	ldrbeq	r1, [r0, #4]
   19d6c:	cmpeq	r1, #56	; 0x38
   19d70:	bne	19e94 <__assert_fail@plt+0x85a8>
   19d74:	ldrb	r0, [r0, #5]
   19d78:	cmp	r0, #0
   19d7c:	movw	r0, #2841	; 0xb19
   19d80:	movt	r0, #2
   19d84:	str	r0, [sp, #68]	; 0x44
   19d88:	bne	19e94 <__assert_fail@plt+0x85a8>
   19d8c:	b	19eb0 <__assert_fail@plt+0x85c4>
   19d90:	mov	r0, #1
   19d94:	b	19dd4 <__assert_fail@plt+0x84e8>
   19d98:	mov	r7, #0
   19d9c:	mov	r9, #0
   19da0:	mov	r3, r0
   19da4:	b	19e74 <__assert_fail@plt+0x8588>
   19da8:	tst	r8, #1
   19dac:	bne	19dd4 <__assert_fail@plt+0x84e8>
   19db0:	mov	r3, r0
   19db4:	b	19e2c <__assert_fail@plt+0x8540>
   19db8:	mov	r0, #1
   19dbc:	mov	r9, #0
   19dc0:	mov	r7, #5
   19dc4:	b	19e10 <__assert_fail@plt+0x8524>
   19dc8:	mov	r3, #1
   19dcc:	tst	r8, #1
   19dd0:	beq	19e2c <__assert_fail@plt+0x8540>
   19dd4:	mov	r1, #1
   19dd8:	mov	r9, #0
   19ddc:	mov	r7, #2
   19de0:	mov	r3, r0
   19de4:	mov	r5, #1
   19de8:	str	r1, [fp, #-76]	; 0xffffffb4
   19dec:	movw	r1, #4149	; 0x1035
   19df0:	movt	r1, #2
   19df4:	str	r1, [sp, #92]	; 0x5c
   19df8:	b	1a008 <__assert_fail@plt+0x871c>
   19dfc:	mov	r7, #5
   19e00:	tst	r8, #1
   19e04:	beq	19e4c <__assert_fail@plt+0x8560>
   19e08:	mov	r0, #1
   19e0c:	mov	r9, #0
   19e10:	str	r0, [fp, #-76]	; 0xffffffb4
   19e14:	movw	r0, #1173	; 0x495
   19e18:	mov	r3, #1
   19e1c:	mov	r5, #1
   19e20:	movt	r0, #2
   19e24:	str	r0, [sp, #92]	; 0x5c
   19e28:	b	1a008 <__assert_fail@plt+0x871c>
   19e2c:	cmp	sl, #0
   19e30:	mov	r9, #1
   19e34:	mov	r7, #2
   19e38:	movne	r0, #39	; 0x27
   19e3c:	strbne	r0, [r6]
   19e40:	movw	r0, #4149	; 0x1035
   19e44:	movt	r0, #2
   19e48:	b	19e68 <__assert_fail@plt+0x857c>
   19e4c:	cmp	sl, #0
   19e50:	mov	r9, #1
   19e54:	mov	r3, #1
   19e58:	movne	r0, #34	; 0x22
   19e5c:	strbne	r0, [r6]
   19e60:	movw	r0, #1173	; 0x495
   19e64:	movt	r0, #2
   19e68:	str	r0, [sp, #92]	; 0x5c
   19e6c:	mov	r0, #1
   19e70:	str	r0, [fp, #-76]	; 0xffffffb4
   19e74:	mov	r5, #0
   19e78:	b	1a008 <__assert_fail@plt+0x871c>
   19e7c:	ldrb	r1, [r0, #1]
   19e80:	and	r1, r1, #223	; 0xdf
   19e84:	cmp	r1, #66	; 0x42
   19e88:	ldrbeq	r1, [r0, #2]
   19e8c:	cmpeq	r1, #49	; 0x31
   19e90:	beq	1adb0 <__assert_fail@plt+0x94c4>
   19e94:	movw	r0, #4149	; 0x1035
   19e98:	movw	r1, #1173	; 0x495
   19e9c:	cmp	r7, #9
   19ea0:	movt	r0, #2
   19ea4:	movt	r1, #2
   19ea8:	moveq	r0, r1
   19eac:	str	r0, [sp, #68]	; 0x44
   19eb0:	movw	r4, #4149	; 0x1035
   19eb4:	mov	r0, #0
   19eb8:	mov	r2, #5
   19ebc:	movt	r4, #2
   19ec0:	mov	r1, r4
   19ec4:	bl	115b0 <dcgettext@plt>
   19ec8:	cmp	r0, r4
   19ecc:	str	r0, [sp, #72]	; 0x48
   19ed0:	beq	19ee0 <__assert_fail@plt+0x85f4>
   19ed4:	mov	r4, r9
   19ed8:	mov	r2, r8
   19edc:	b	19f98 <__assert_fail@plt+0x86ac>
   19ee0:	bl	1eed0 <__assert_fail@plt+0xd5e4>
   19ee4:	ldrb	r1, [r0]
   19ee8:	mov	r4, r9
   19eec:	and	r1, r1, #223	; 0xdf
   19ef0:	cmp	r1, #71	; 0x47
   19ef4:	beq	19f50 <__assert_fail@plt+0x8664>
   19ef8:	cmp	r1, #85	; 0x55
   19efc:	mov	r2, r8
   19f00:	bne	19f78 <__assert_fail@plt+0x868c>
   19f04:	ldrb	r1, [r0, #1]
   19f08:	and	r1, r1, #223	; 0xdf
   19f0c:	cmp	r1, #84	; 0x54
   19f10:	bne	19f78 <__assert_fail@plt+0x868c>
   19f14:	ldrb	r1, [r0, #2]
   19f18:	and	r1, r1, #223	; 0xdf
   19f1c:	cmp	r1, #70	; 0x46
   19f20:	ldrbeq	r1, [r0, #3]
   19f24:	cmpeq	r1, #45	; 0x2d
   19f28:	bne	19f78 <__assert_fail@plt+0x868c>
   19f2c:	ldrb	r1, [r0, #4]
   19f30:	cmp	r1, #56	; 0x38
   19f34:	ldrbeq	r0, [r0, #5]
   19f38:	cmpeq	r0, #0
   19f3c:	bne	19f78 <__assert_fail@plt+0x868c>
   19f40:	movw	r0, #2845	; 0xb1d
   19f44:	movt	r0, #2
   19f48:	str	r0, [sp, #72]	; 0x48
   19f4c:	b	19f98 <__assert_fail@plt+0x86ac>
   19f50:	ldrb	r1, [r0, #1]
   19f54:	mov	r2, r8
   19f58:	and	r1, r1, #223	; 0xdf
   19f5c:	cmp	r1, #66	; 0x42
   19f60:	bne	19f78 <__assert_fail@plt+0x868c>
   19f64:	ldrb	r1, [r0, #2]
   19f68:	cmp	r1, #49	; 0x31
   19f6c:	ldrbeq	r1, [r0, #3]
   19f70:	cmpeq	r1, #56	; 0x38
   19f74:	beq	1adf4 <__assert_fail@plt+0x9508>
   19f78:	movw	r0, #4149	; 0x1035
   19f7c:	cmp	r7, #9
   19f80:	movt	r0, #2
   19f84:	mov	r1, r0
   19f88:	movw	r0, #1173	; 0x495
   19f8c:	movt	r0, #2
   19f90:	moveq	r1, r0
   19f94:	str	r1, [sp, #72]	; 0x48
   19f98:	mov	r8, r5
   19f9c:	mov	r9, #0
   19fa0:	tst	r8, #1
   19fa4:	mov	r5, r8
   19fa8:	str	r2, [fp, #-48]	; 0xffffffd0
   19fac:	bne	19fe4 <__assert_fail@plt+0x86f8>
   19fb0:	ldr	r0, [sp, #68]	; 0x44
   19fb4:	ldrb	r0, [r0]
   19fb8:	cmp	r0, #0
   19fbc:	beq	19fe4 <__assert_fail@plt+0x86f8>
   19fc0:	ldr	r1, [sp, #68]	; 0x44
   19fc4:	mov	r9, #0
   19fc8:	add	r1, r1, #1
   19fcc:	cmp	r9, sl
   19fd0:	strbcc	r0, [r6, r9]
   19fd4:	ldrb	r0, [r1, r9]
   19fd8:	add	r9, r9, #1
   19fdc:	cmp	r0, #0
   19fe0:	bne	19fcc <__assert_fail@plt+0x86e0>
   19fe4:	ldr	r8, [sp, #72]	; 0x48
   19fe8:	mov	r0, r8
   19fec:	bl	11718 <strlen@plt>
   19ff0:	ldr	ip, [fp, #-84]	; 0xffffffac
   19ff4:	ldr	lr, [sp, #84]	; 0x54
   19ff8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19ffc:	str	r0, [fp, #-76]	; 0xffffffb4
   1a000:	str	r8, [sp, #92]	; 0x5c
   1a004:	mov	r3, #1
   1a008:	ldr	r0, [fp, #16]
   1a00c:	str	r7, [fp, #-64]	; 0xffffffc0
   1a010:	str	r5, [fp, #-72]	; 0xffffffb8
   1a014:	str	r3, [sp, #80]	; 0x50
   1a018:	cmp	r0, #0
   1a01c:	movwne	r0, #1
   1a020:	and	r0, r0, r5
   1a024:	str	r0, [fp, #-88]	; 0xffffffa8
   1a028:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a02c:	cmp	r0, #0
   1a030:	movwne	r0, #1
   1a034:	subs	r7, r7, #2
   1a038:	and	r1, r0, r5
   1a03c:	str	r7, [fp, #-80]	; 0xffffffb0
   1a040:	and	r1, r3, r1
   1a044:	str	r1, [sp, #40]	; 0x28
   1a048:	clz	r1, r7
   1a04c:	lsr	r1, r1, #5
   1a050:	and	r1, r1, r5
   1a054:	eor	r5, r5, #1
   1a058:	str	r1, [sp, #36]	; 0x24
   1a05c:	mov	r1, r7
   1a060:	str	r5, [sp, #88]	; 0x58
   1a064:	mov	r7, #0
   1a068:	movwne	r1, #1
   1a06c:	orr	r5, r1, r5
   1a070:	and	r1, r1, r3
   1a074:	and	r0, r0, r1
   1a078:	str	r5, [sp, #60]	; 0x3c
   1a07c:	str	r1, [fp, #-68]	; 0xffffffbc
   1a080:	str	r0, [fp, #-60]	; 0xffffffc4
   1a084:	eor	r0, r3, #1
   1a088:	str	r0, [sp, #44]	; 0x2c
   1a08c:	cmn	lr, #1
   1a090:	beq	1a0a0 <__assert_fail@plt+0x87b4>
   1a094:	cmp	r7, lr
   1a098:	bne	1a0ac <__assert_fail@plt+0x87c0>
   1a09c:	b	1ad24 <__assert_fail@plt+0x9438>
   1a0a0:	ldrb	r0, [ip, r7]
   1a0a4:	cmp	r0, #0
   1a0a8:	beq	1ad2c <__assert_fail@plt+0x9440>
   1a0ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1a0b0:	mov	r8, #0
   1a0b4:	str	r4, [fp, #-52]	; 0xffffffcc
   1a0b8:	str	r2, [fp, #-48]	; 0xffffffd0
   1a0bc:	cmp	r0, #0
   1a0c0:	beq	1a0f4 <__assert_fail@plt+0x8808>
   1a0c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1a0c8:	add	r4, r7, r0
   1a0cc:	cmp	r0, #2
   1a0d0:	bcc	1a0ec <__assert_fail@plt+0x8800>
   1a0d4:	cmn	lr, #1
   1a0d8:	bne	1a0ec <__assert_fail@plt+0x8800>
   1a0dc:	mov	r0, ip
   1a0e0:	bl	11718 <strlen@plt>
   1a0e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a0e8:	mov	lr, r0
   1a0ec:	cmp	r4, lr
   1a0f0:	bls	1a10c <__assert_fail@plt+0x8820>
   1a0f4:	mov	r0, #0
   1a0f8:	str	r0, [fp, #-56]	; 0xffffffc8
   1a0fc:	ldrb	r5, [ip, r7]
   1a100:	cmp	r5, #126	; 0x7e
   1a104:	bls	1a15c <__assert_fail@plt+0x8870>
   1a108:	b	1a564 <__assert_fail@plt+0x8c78>
   1a10c:	ldr	r1, [sp, #92]	; 0x5c
   1a110:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1a114:	add	r0, ip, r7
   1a118:	mov	r4, lr
   1a11c:	bl	11598 <memcmp@plt>
   1a120:	ldr	r2, [sp, #88]	; 0x58
   1a124:	cmp	r0, #0
   1a128:	mov	r1, r0
   1a12c:	movwne	r1, #1
   1a130:	orr	r1, r1, r2
   1a134:	tst	r1, #1
   1a138:	beq	1ae38 <__assert_fail@plt+0x954c>
   1a13c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a140:	clz	r0, r0
   1a144:	mov	lr, r4
   1a148:	lsr	r0, r0, #5
   1a14c:	str	r0, [fp, #-56]	; 0xffffffc8
   1a150:	ldrb	r5, [ip, r7]
   1a154:	cmp	r5, #126	; 0x7e
   1a158:	bhi	1a564 <__assert_fail@plt+0x8c78>
   1a15c:	add	r3, pc, #16
   1a160:	mov	r4, #1
   1a164:	mov	r2, #110	; 0x6e
   1a168:	mov	r0, #97	; 0x61
   1a16c:	mov	r1, #0
   1a170:	ldr	pc, [r3, r5, lsl #2]
   1a174:	andeq	sl, r1, r4, asr #8
   1a178:	andeq	sl, r1, r4, ror #10
   1a17c:	andeq	sl, r1, r4, ror #10
   1a180:	andeq	sl, r1, r4, ror #10
   1a184:	andeq	sl, r1, r4, ror #10
   1a188:	andeq	sl, r1, r4, ror #10
   1a18c:	andeq	sl, r1, r4, ror #10
   1a190:	andeq	sl, r1, r0, asr #12
   1a194:	andeq	sl, r1, r4, lsr #8
   1a198:	andeq	sl, r1, ip, lsl #8
   1a19c:	andeq	sl, r1, r0, lsr r4
   1a1a0:	andeq	sl, r1, r0, asr #9
   1a1a4:	andeq	sl, r1, r4, lsl #8
   1a1a8:	andeq	sl, r1, ip, lsr #8
   1a1ac:	andeq	sl, r1, r4, ror #10
   1a1b0:	andeq	sl, r1, r4, ror #10
   1a1b4:	andeq	sl, r1, r4, ror #10
   1a1b8:	andeq	sl, r1, r4, ror #10
   1a1bc:	andeq	sl, r1, r4, ror #10
   1a1c0:	andeq	sl, r1, r4, ror #10
   1a1c4:	andeq	sl, r1, r4, ror #10
   1a1c8:	andeq	sl, r1, r4, ror #10
   1a1cc:	andeq	sl, r1, r4, ror #10
   1a1d0:	andeq	sl, r1, r4, ror #10
   1a1d4:	andeq	sl, r1, r4, ror #10
   1a1d8:	andeq	sl, r1, r4, ror #10
   1a1dc:	andeq	sl, r1, r4, ror #10
   1a1e0:	andeq	sl, r1, r4, ror #10
   1a1e4:	andeq	sl, r1, r4, ror #10
   1a1e8:	andeq	sl, r1, r4, ror #10
   1a1ec:	andeq	sl, r1, r4, ror #10
   1a1f0:	andeq	sl, r1, r4, ror #10
   1a1f4:			; <UNDEFINED> instruction: 0x0001a5bc
   1a1f8:	andeq	sl, r1, r0, asr #11
   1a1fc:	andeq	sl, r1, r0, asr #11
   1a200:	muleq	r1, r0, r3
   1a204:	andeq	sl, r1, r0, asr #11
   1a208:	andeq	sl, r1, r0, ror r3
   1a20c:	andeq	sl, r1, r0, asr #11
   1a210:	andeq	sl, r1, r8, asr #9
   1a214:	andeq	sl, r1, r0, asr #11
   1a218:	andeq	sl, r1, r0, asr #11
   1a21c:	andeq	sl, r1, r0, asr #11
   1a220:	andeq	sl, r1, r0, ror r3
   1a224:	andeq	sl, r1, r0, ror r3
   1a228:	andeq	sl, r1, r0, ror r3
   1a22c:	andeq	sl, r1, r0, ror r3
   1a230:	andeq	sl, r1, r0, ror r3
   1a234:	andeq	sl, r1, r0, ror r3
   1a238:	andeq	sl, r1, r0, ror r3
   1a23c:	andeq	sl, r1, r0, ror r3
   1a240:	andeq	sl, r1, r0, ror r3
   1a244:	andeq	sl, r1, r0, ror r3
   1a248:	andeq	sl, r1, r0, ror r3
   1a24c:	andeq	sl, r1, r0, ror r3
   1a250:	andeq	sl, r1, r0, ror r3
   1a254:	andeq	sl, r1, r0, ror r3
   1a258:	andeq	sl, r1, r0, ror r3
   1a25c:	andeq	sl, r1, r0, ror r3
   1a260:	andeq	sl, r1, r0, asr #11
   1a264:	andeq	sl, r1, r0, asr #11
   1a268:	andeq	sl, r1, r0, asr #11
   1a26c:	andeq	sl, r1, r0, asr #11
   1a270:	andeq	sl, r1, r4, lsl #9
   1a274:	andeq	sl, r1, r4, ror #10
   1a278:	andeq	sl, r1, r0, ror r3
   1a27c:	andeq	sl, r1, r0, ror r3
   1a280:	andeq	sl, r1, r0, ror r3
   1a284:	andeq	sl, r1, r0, ror r3
   1a288:	andeq	sl, r1, r0, ror r3
   1a28c:	andeq	sl, r1, r0, ror r3
   1a290:	andeq	sl, r1, r0, ror r3
   1a294:	andeq	sl, r1, r0, ror r3
   1a298:	andeq	sl, r1, r0, ror r3
   1a29c:	andeq	sl, r1, r0, ror r3
   1a2a0:	andeq	sl, r1, r0, ror r3
   1a2a4:	andeq	sl, r1, r0, ror r3
   1a2a8:	andeq	sl, r1, r0, ror r3
   1a2ac:	andeq	sl, r1, r0, ror r3
   1a2b0:	andeq	sl, r1, r0, ror r3
   1a2b4:	andeq	sl, r1, r0, ror r3
   1a2b8:	andeq	sl, r1, r0, ror r3
   1a2bc:	andeq	sl, r1, r0, ror r3
   1a2c0:	andeq	sl, r1, r0, ror r3
   1a2c4:	andeq	sl, r1, r0, ror r3
   1a2c8:	andeq	sl, r1, r0, ror r3
   1a2cc:	andeq	sl, r1, r0, ror r3
   1a2d0:	andeq	sl, r1, r0, ror r3
   1a2d4:	andeq	sl, r1, r0, ror r3
   1a2d8:	andeq	sl, r1, r0, ror r3
   1a2dc:	andeq	sl, r1, r0, ror r3
   1a2e0:	andeq	sl, r1, r0, asr #11
   1a2e4:	ldrdeq	sl, [r1], -r0
   1a2e8:	andeq	sl, r1, r0, ror r3
   1a2ec:	andeq	sl, r1, r0, asr #11
   1a2f0:	andeq	sl, r1, r0, ror r3
   1a2f4:	andeq	sl, r1, r0, asr #11
   1a2f8:	andeq	sl, r1, r0, ror r3
   1a2fc:	andeq	sl, r1, r0, ror r3
   1a300:	andeq	sl, r1, r0, ror r3
   1a304:	andeq	sl, r1, r0, ror r3
   1a308:	andeq	sl, r1, r0, ror r3
   1a30c:	andeq	sl, r1, r0, ror r3
   1a310:	andeq	sl, r1, r0, ror r3
   1a314:	andeq	sl, r1, r0, ror r3
   1a318:	andeq	sl, r1, r0, ror r3
   1a31c:	andeq	sl, r1, r0, ror r3
   1a320:	andeq	sl, r1, r0, ror r3
   1a324:	andeq	sl, r1, r0, ror r3
   1a328:	andeq	sl, r1, r0, ror r3
   1a32c:	andeq	sl, r1, r0, ror r3
   1a330:	andeq	sl, r1, r0, ror r3
   1a334:	andeq	sl, r1, r0, ror r3
   1a338:	andeq	sl, r1, r0, ror r3
   1a33c:	andeq	sl, r1, r0, ror r3
   1a340:	andeq	sl, r1, r0, ror r3
   1a344:	andeq	sl, r1, r0, ror r3
   1a348:	andeq	sl, r1, r0, ror r3
   1a34c:	andeq	sl, r1, r0, ror r3
   1a350:	andeq	sl, r1, r0, ror r3
   1a354:	andeq	sl, r1, r0, ror r3
   1a358:	andeq	sl, r1, r0, ror r3
   1a35c:	andeq	sl, r1, r0, ror r3
   1a360:			; <UNDEFINED> instruction: 0x0001a3b0
   1a364:	andeq	sl, r1, r0, asr #11
   1a368:			; <UNDEFINED> instruction: 0x0001a3b0
   1a36c:	muleq	r1, r0, r3
   1a370:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a374:	cmp	r0, #0
   1a378:	beq	1a654 <__assert_fail@plt+0x8d68>
   1a37c:	ldr	r0, [fp, #16]
   1a380:	cmp	r0, #0
   1a384:	mov	r0, r5
   1a388:	bne	1a664 <__assert_fail@plt+0x8d78>
   1a38c:	b	1a684 <__assert_fail@plt+0x8d98>
   1a390:	mov	r4, #0
   1a394:	cmp	r7, #0
   1a398:	beq	1a5bc <__assert_fail@plt+0x8cd0>
   1a39c:	mov	r8, #0
   1a3a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a3a4:	cmp	r0, #0
   1a3a8:	bne	1a37c <__assert_fail@plt+0x8a90>
   1a3ac:	b	1a654 <__assert_fail@plt+0x8d68>
   1a3b0:	mov	r4, #0
   1a3b4:	cmn	lr, #1
   1a3b8:	beq	1a594 <__assert_fail@plt+0x8ca8>
   1a3bc:	cmp	r7, #0
   1a3c0:	bne	1a39c <__assert_fail@plt+0x8ab0>
   1a3c4:	cmp	lr, #1
   1a3c8:	beq	1a5bc <__assert_fail@plt+0x8cd0>
   1a3cc:	b	1a39c <__assert_fail@plt+0x8ab0>
   1a3d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1a3d4:	cmp	r0, #2
   1a3d8:	bne	1a5ec <__assert_fail@plt+0x8d00>
   1a3dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1a3e0:	tst	r0, #1
   1a3e4:	bne	1ae4c <__assert_fail@plt+0x9560>
   1a3e8:	mov	r8, #0
   1a3ec:	mov	r0, #92	; 0x5c
   1a3f0:	mov	r4, #0
   1a3f4:	cmp	r8, #0
   1a3f8:	beq	1a60c <__assert_fail@plt+0x8d20>
   1a3fc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a400:	b	1a700 <__assert_fail@plt+0x8e14>
   1a404:	mov	r0, #102	; 0x66
   1a408:	b	1a640 <__assert_fail@plt+0x8d54>
   1a40c:	mov	r2, #116	; 0x74
   1a410:	ldr	r0, [sp, #60]	; 0x3c
   1a414:	tst	r0, #1
   1a418:	mov	r0, r2
   1a41c:	bne	1a640 <__assert_fail@plt+0x8d54>
   1a420:	b	1ae4c <__assert_fail@plt+0x9560>
   1a424:	mov	r0, #98	; 0x62
   1a428:	b	1a640 <__assert_fail@plt+0x8d54>
   1a42c:	mov	r2, #114	; 0x72
   1a430:	ldr	r0, [sp, #60]	; 0x3c
   1a434:	tst	r0, #1
   1a438:	mov	r0, r2
   1a43c:	bne	1a640 <__assert_fail@plt+0x8d54>
   1a440:	b	1ae4c <__assert_fail@plt+0x9560>
   1a444:	ldr	r0, [sp, #80]	; 0x50
   1a448:	tst	r0, #1
   1a44c:	beq	1a728 <__assert_fail@plt+0x8e3c>
   1a450:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1a454:	tst	r0, #1
   1a458:	bne	1af74 <__assert_fail@plt+0x9688>
   1a45c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1a460:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a464:	cmp	r0, #2
   1a468:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1a46c:	movwne	r0, #1
   1a470:	orr	r0, r0, r2
   1a474:	tst	r0, #1
   1a478:	beq	1aa20 <__assert_fail@plt+0x9134>
   1a47c:	mov	r0, r9
   1a480:	b	1aa54 <__assert_fail@plt+0x9168>
   1a484:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1a488:	mov	r8, #0
   1a48c:	mov	r5, #63	; 0x3f
   1a490:	cmp	r0, #5
   1a494:	beq	1a8dc <__assert_fail@plt+0x8ff0>
   1a498:	cmp	r0, #2
   1a49c:	bne	1a98c <__assert_fail@plt+0x90a0>
   1a4a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1a4a4:	tst	r0, #1
   1a4a8:	bne	1ae4c <__assert_fail@plt+0x9560>
   1a4ac:	mov	r4, #0
   1a4b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a4b4:	cmp	r0, #0
   1a4b8:	bne	1a37c <__assert_fail@plt+0x8a90>
   1a4bc:	b	1a654 <__assert_fail@plt+0x8d68>
   1a4c0:	mov	r0, #118	; 0x76
   1a4c4:	b	1a640 <__assert_fail@plt+0x8d54>
   1a4c8:	mov	r0, #1
   1a4cc:	mov	r5, #39	; 0x27
   1a4d0:	str	r0, [sp, #52]	; 0x34
   1a4d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1a4d8:	cmp	r0, #2
   1a4dc:	bne	1a550 <__assert_fail@plt+0x8c64>
   1a4e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1a4e4:	tst	r0, #1
   1a4e8:	bne	1ae4c <__assert_fail@plt+0x9560>
   1a4ec:	ldr	r2, [sp, #48]	; 0x30
   1a4f0:	clz	r1, sl
   1a4f4:	mov	r8, #0
   1a4f8:	lsr	r1, r1, #5
   1a4fc:	cmp	r2, #0
   1a500:	mov	r0, r2
   1a504:	movwne	r0, #1
   1a508:	orrs	r0, r0, r1
   1a50c:	moveq	r2, sl
   1a510:	moveq	sl, r0
   1a514:	cmp	r9, sl
   1a518:	str	r2, [sp, #48]	; 0x30
   1a51c:	movcc	r0, #39	; 0x27
   1a520:	strbcc	r0, [r6, r9]
   1a524:	add	r0, r9, #1
   1a528:	cmp	r0, sl
   1a52c:	movcc	r1, #92	; 0x5c
   1a530:	strbcc	r1, [r6, r0]
   1a534:	add	r0, r9, #2
   1a538:	add	r9, r9, #3
   1a53c:	cmp	r0, sl
   1a540:	movcc	r1, #39	; 0x27
   1a544:	strbcc	r1, [r6, r0]
   1a548:	mov	r0, #0
   1a54c:	str	r0, [fp, #-48]	; 0xffffffd0
   1a550:	mov	r4, #1
   1a554:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a558:	cmp	r0, #0
   1a55c:	bne	1a37c <__assert_fail@plt+0x8a90>
   1a560:	b	1a654 <__assert_fail@plt+0x8d68>
   1a564:	ldr	r0, [sp, #32]
   1a568:	cmp	r0, #1
   1a56c:	bne	1a758 <__assert_fail@plt+0x8e6c>
   1a570:	str	lr, [sp, #84]	; 0x54
   1a574:	bl	116f4 <__ctype_b_loc@plt>
   1a578:	ldr	r0, [r0]
   1a57c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a580:	mov	r1, #1
   1a584:	add	r0, r0, r5, lsl #1
   1a588:	ldrb	r0, [r0, #1]
   1a58c:	ubfx	r4, r0, #6, #1
   1a590:	b	1ab50 <__assert_fail@plt+0x9264>
   1a594:	cmp	r7, #0
   1a598:	ldrbeq	r0, [ip, #1]
   1a59c:	cmpeq	r0, #0
   1a5a0:	beq	1a5bc <__assert_fail@plt+0x8cd0>
   1a5a4:	mvn	lr, #0
   1a5a8:	mov	r8, #0
   1a5ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a5b0:	cmp	r0, #0
   1a5b4:	bne	1a37c <__assert_fail@plt+0x8a90>
   1a5b8:	b	1a654 <__assert_fail@plt+0x8d68>
   1a5bc:	mov	r1, #1
   1a5c0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1a5c4:	cmp	r0, #2
   1a5c8:	bne	1a5d8 <__assert_fail@plt+0x8cec>
   1a5cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1a5d0:	tst	r0, #1
   1a5d4:	bne	1ae4c <__assert_fail@plt+0x9560>
   1a5d8:	mov	r4, r1
   1a5dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a5e0:	cmp	r0, #0
   1a5e4:	bne	1a37c <__assert_fail@plt+0x8a90>
   1a5e8:	b	1a654 <__assert_fail@plt+0x8d68>
   1a5ec:	ldr	r1, [sp, #40]	; 0x28
   1a5f0:	mov	r8, #0
   1a5f4:	mov	r0, #92	; 0x5c
   1a5f8:	cmp	r1, #0
   1a5fc:	beq	1a640 <__assert_fail@plt+0x8d54>
   1a600:	mov	r4, #0
   1a604:	cmp	r8, #0
   1a608:	bne	1a3fc <__assert_fail@plt+0x8b10>
   1a60c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a610:	tst	r2, #1
   1a614:	beq	1a700 <__assert_fail@plt+0x8e14>
   1a618:	cmp	r9, sl
   1a61c:	movcc	r1, #39	; 0x27
   1a620:	strbcc	r1, [r6, r9]
   1a624:	add	r1, r9, #1
   1a628:	add	r9, r9, #2
   1a62c:	cmp	r1, sl
   1a630:	movcc	r2, #39	; 0x27
   1a634:	strbcc	r2, [r6, r1]
   1a638:	mov	r2, #0
   1a63c:	b	1a700 <__assert_fail@plt+0x8e14>
   1a640:	ldr	r1, [sp, #80]	; 0x50
   1a644:	mov	r4, #0
   1a648:	mov	r8, #0
   1a64c:	tst	r1, #1
   1a650:	bne	1a690 <__assert_fail@plt+0x8da4>
   1a654:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1a658:	cmp	r0, #0
   1a65c:	mov	r0, r5
   1a660:	beq	1a684 <__assert_fail@plt+0x8d98>
   1a664:	ldr	r1, [fp, #16]
   1a668:	ubfx	r0, r5, #5, #3
   1a66c:	mov	r2, #1
   1a670:	ldr	r0, [r1, r0, lsl #2]
   1a674:	and	r1, r5, #31
   1a678:	tst	r0, r2, lsl r1
   1a67c:	mov	r0, r5
   1a680:	bne	1a690 <__assert_fail@plt+0x8da4>
   1a684:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1a688:	cmp	r1, #0
   1a68c:	beq	1aae8 <__assert_fail@plt+0x91fc>
   1a690:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1a694:	tst	r1, #1
   1a698:	bne	1ae2c <__assert_fail@plt+0x9540>
   1a69c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a6a0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a6a4:	cmp	r1, #2
   1a6a8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1a6ac:	movwne	r1, #1
   1a6b0:	orr	r1, r1, r2
   1a6b4:	tst	r1, #1
   1a6b8:	bne	1a6f0 <__assert_fail@plt+0x8e04>
   1a6bc:	cmp	r9, sl
   1a6c0:	movcc	r1, #39	; 0x27
   1a6c4:	strbcc	r1, [r6, r9]
   1a6c8:	add	r1, r9, #1
   1a6cc:	cmp	r1, sl
   1a6d0:	movcc	r2, #36	; 0x24
   1a6d4:	strbcc	r2, [r6, r1]
   1a6d8:	add	r1, r9, #2
   1a6dc:	add	r9, r9, #3
   1a6e0:	cmp	r1, sl
   1a6e4:	movcc	r2, #39	; 0x27
   1a6e8:	strbcc	r2, [r6, r1]
   1a6ec:	mov	r2, #1
   1a6f0:	cmp	r9, sl
   1a6f4:	movcc	r1, #92	; 0x5c
   1a6f8:	strbcc	r1, [r6, r9]
   1a6fc:	add	r9, r9, #1
   1a700:	cmp	r9, sl
   1a704:	add	r7, r7, #1
   1a708:	strbcc	r0, [r6, r9]
   1a70c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1a710:	add	r9, r9, #1
   1a714:	and	r0, r0, r4
   1a718:	mov	r4, r0
   1a71c:	cmn	lr, #1
   1a720:	bne	1a094 <__assert_fail@plt+0x87a8>
   1a724:	b	1a0a0 <__assert_fail@plt+0x87b4>
   1a728:	ldr	r0, [sp, #28]
   1a72c:	mov	r4, #0
   1a730:	mov	r8, #0
   1a734:	mov	r5, #0
   1a738:	cmp	r0, #0
   1a73c:	beq	1a654 <__assert_fail@plt+0x8d68>
   1a740:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1a744:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a748:	add	r7, r7, #1
   1a74c:	cmn	lr, #1
   1a750:	bne	1a094 <__assert_fail@plt+0x87a8>
   1a754:	b	1a0a0 <__assert_fail@plt+0x87b4>
   1a758:	mov	r0, #0
   1a75c:	cmn	lr, #1
   1a760:	str	r0, [fp, #-36]	; 0xffffffdc
   1a764:	str	r0, [fp, #-40]	; 0xffffffd8
   1a768:	bne	1a77c <__assert_fail@plt+0x8e90>
   1a76c:	mov	r0, ip
   1a770:	bl	11718 <strlen@plt>
   1a774:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a778:	mov	lr, r0
   1a77c:	ldr	r0, [sp, #36]	; 0x24
   1a780:	str	sl, [sp, #56]	; 0x38
   1a784:	str	lr, [sp, #84]	; 0x54
   1a788:	cmp	r0, #0
   1a78c:	beq	1a9a4 <__assert_fail@plt+0x90b8>
   1a790:	add	r0, ip, r7
   1a794:	mov	r4, #1
   1a798:	mov	r6, #0
   1a79c:	sub	sl, fp, #40	; 0x28
   1a7a0:	str	r0, [sp, #20]
   1a7a4:	str	r6, [sp, #64]	; 0x40
   1a7a8:	add	r6, r6, r7
   1a7ac:	sub	r0, fp, #44	; 0x2c
   1a7b0:	mov	r3, sl
   1a7b4:	add	r1, ip, r6
   1a7b8:	sub	r2, lr, r6
   1a7bc:	bl	181cc <__assert_fail@plt+0x68e0>
   1a7c0:	cmn	r0, #2
   1a7c4:	beq	1ab00 <__assert_fail@plt+0x9214>
   1a7c8:	ldr	sl, [sp, #56]	; 0x38
   1a7cc:	cmn	r0, #1
   1a7d0:	beq	1aaf4 <__assert_fail@plt+0x9208>
   1a7d4:	cmp	r0, #0
   1a7d8:	beq	1aaf8 <__assert_fail@plt+0x920c>
   1a7dc:	cmp	r0, #2
   1a7e0:	bcc	1a8a0 <__assert_fail@plt+0x8fb4>
   1a7e4:	ldr	r1, [sp, #64]	; 0x40
   1a7e8:	ldr	r2, [sp, #20]
   1a7ec:	add	r1, r2, r1
   1a7f0:	mov	r2, #1
   1a7f4:	ldrb	r3, [r1, r2]
   1a7f8:	sub	r3, r3, #91	; 0x5b
   1a7fc:	cmp	r3, #33	; 0x21
   1a800:	bhi	1a894 <__assert_fail@plt+0x8fa8>
   1a804:	add	r6, pc, #0
   1a808:	ldr	pc, [r6, r3, lsl #2]
   1a80c:	andeq	sl, r1, r8, asr lr
   1a810:	andeq	sl, r1, r8, asr lr
   1a814:	muleq	r1, r4, r8
   1a818:	andeq	sl, r1, r8, asr lr
   1a81c:	muleq	r1, r4, r8
   1a820:	andeq	sl, r1, r8, asr lr
   1a824:	muleq	r1, r4, r8
   1a828:	muleq	r1, r4, r8
   1a82c:	muleq	r1, r4, r8
   1a830:	muleq	r1, r4, r8
   1a834:	muleq	r1, r4, r8
   1a838:	muleq	r1, r4, r8
   1a83c:	muleq	r1, r4, r8
   1a840:	muleq	r1, r4, r8
   1a844:	muleq	r1, r4, r8
   1a848:	muleq	r1, r4, r8
   1a84c:	muleq	r1, r4, r8
   1a850:	muleq	r1, r4, r8
   1a854:	muleq	r1, r4, r8
   1a858:	muleq	r1, r4, r8
   1a85c:	muleq	r1, r4, r8
   1a860:	muleq	r1, r4, r8
   1a864:	muleq	r1, r4, r8
   1a868:	muleq	r1, r4, r8
   1a86c:	muleq	r1, r4, r8
   1a870:	muleq	r1, r4, r8
   1a874:	muleq	r1, r4, r8
   1a878:	muleq	r1, r4, r8
   1a87c:	muleq	r1, r4, r8
   1a880:	muleq	r1, r4, r8
   1a884:	muleq	r1, r4, r8
   1a888:	muleq	r1, r4, r8
   1a88c:	muleq	r1, r4, r8
   1a890:	andeq	sl, r1, r8, asr lr
   1a894:	add	r2, r2, #1
   1a898:	cmp	r2, r0
   1a89c:	bcc	1a7f4 <__assert_fail@plt+0x8f08>
   1a8a0:	ldr	r6, [sp, #64]	; 0x40
   1a8a4:	add	r6, r0, r6
   1a8a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a8ac:	bl	11604 <iswprint@plt>
   1a8b0:	cmp	r0, #0
   1a8b4:	sub	sl, fp, #40	; 0x28
   1a8b8:	movwne	r0, #1
   1a8bc:	and	r4, r4, r0
   1a8c0:	mov	r0, sl
   1a8c4:	bl	1158c <mbsinit@plt>
   1a8c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a8cc:	ldr	lr, [sp, #84]	; 0x54
   1a8d0:	cmp	r0, #0
   1a8d4:	beq	1a7a4 <__assert_fail@plt+0x8eb8>
   1a8d8:	b	1ab44 <__assert_fail@plt+0x9258>
   1a8dc:	ldr	r0, [sp, #24]
   1a8e0:	cmp	r0, #0
   1a8e4:	beq	1a98c <__assert_fail@plt+0x90a0>
   1a8e8:	add	r0, r7, #2
   1a8ec:	cmp	r0, lr
   1a8f0:	bcs	1a98c <__assert_fail@plt+0x90a0>
   1a8f4:	add	r1, ip, r7
   1a8f8:	ldrb	r1, [r1, #1]
   1a8fc:	cmp	r1, #63	; 0x3f
   1a900:	bne	1a98c <__assert_fail@plt+0x90a0>
   1a904:	ldrb	r5, [ip, r0]
   1a908:	sub	r1, r5, #33	; 0x21
   1a90c:	cmp	r1, #29
   1a910:	bhi	1a98c <__assert_fail@plt+0x90a0>
   1a914:	movw	r3, #20929	; 0x51c1
   1a918:	mov	r2, #1
   1a91c:	movt	r3, #14336	; 0x3800
   1a920:	tst	r3, r2, lsl r1
   1a924:	beq	1a98c <__assert_fail@plt+0x90a0>
   1a928:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1a92c:	tst	r1, #1
   1a930:	bne	1af7c <__assert_fail@plt+0x9690>
   1a934:	cmp	r9, sl
   1a938:	mov	r7, r0
   1a93c:	mov	r4, #0
   1a940:	movcc	r1, #63	; 0x3f
   1a944:	strbcc	r1, [r6, r9]
   1a948:	add	r1, r9, #1
   1a94c:	cmp	r1, sl
   1a950:	movcc	r2, #34	; 0x22
   1a954:	strbcc	r2, [r6, r1]
   1a958:	add	r1, r9, #2
   1a95c:	cmp	r1, sl
   1a960:	movcc	r2, #34	; 0x22
   1a964:	strbcc	r2, [r6, r1]
   1a968:	add	r1, r9, #3
   1a96c:	add	r9, r9, #4
   1a970:	cmp	r1, sl
   1a974:	movcc	r2, #63	; 0x3f
   1a978:	strbcc	r2, [r6, r1]
   1a97c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a980:	cmp	r0, #0
   1a984:	bne	1a37c <__assert_fail@plt+0x8a90>
   1a988:	b	1a654 <__assert_fail@plt+0x8d68>
   1a98c:	mov	r5, #63	; 0x3f
   1a990:	mov	r4, #0
   1a994:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a998:	cmp	r0, #0
   1a99c:	bne	1a37c <__assert_fail@plt+0x8a90>
   1a9a0:	b	1a654 <__assert_fail@plt+0x8d68>
   1a9a4:	mov	r4, #1
   1a9a8:	mov	r6, #0
   1a9ac:	sub	sl, fp, #40	; 0x28
   1a9b0:	str	r6, [sp, #64]	; 0x40
   1a9b4:	add	r6, r6, r7
   1a9b8:	sub	r0, fp, #44	; 0x2c
   1a9bc:	mov	r3, sl
   1a9c0:	add	r1, ip, r6
   1a9c4:	sub	r2, lr, r6
   1a9c8:	bl	181cc <__assert_fail@plt+0x68e0>
   1a9cc:	cmn	r0, #2
   1a9d0:	beq	1ab00 <__assert_fail@plt+0x9214>
   1a9d4:	cmn	r0, #1
   1a9d8:	beq	1aaf4 <__assert_fail@plt+0x9208>
   1a9dc:	ldr	r6, [sp, #64]	; 0x40
   1a9e0:	cmp	r0, #0
   1a9e4:	beq	1ab40 <__assert_fail@plt+0x9254>
   1a9e8:	add	r6, r0, r6
   1a9ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a9f0:	bl	11604 <iswprint@plt>
   1a9f4:	cmp	r0, #0
   1a9f8:	sub	sl, fp, #40	; 0x28
   1a9fc:	movwne	r0, #1
   1aa00:	and	r4, r4, r0
   1aa04:	mov	r0, sl
   1aa08:	bl	1158c <mbsinit@plt>
   1aa0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1aa10:	ldr	lr, [sp, #84]	; 0x54
   1aa14:	cmp	r0, #0
   1aa18:	beq	1a9b0 <__assert_fail@plt+0x90c4>
   1aa1c:	b	1ab44 <__assert_fail@plt+0x9258>
   1aa20:	cmp	r9, sl
   1aa24:	mov	r2, #1
   1aa28:	movcc	r0, #39	; 0x27
   1aa2c:	strbcc	r0, [r6, r9]
   1aa30:	add	r0, r9, #1
   1aa34:	cmp	r0, sl
   1aa38:	movcc	r1, #36	; 0x24
   1aa3c:	strbcc	r1, [r6, r0]
   1aa40:	add	r0, r9, #2
   1aa44:	cmp	r0, sl
   1aa48:	movcc	r1, #39	; 0x27
   1aa4c:	strbcc	r1, [r6, r0]
   1aa50:	add	r0, r9, #3
   1aa54:	cmp	r0, sl
   1aa58:	add	r9, r0, #1
   1aa5c:	str	r2, [fp, #-48]	; 0xffffffd0
   1aa60:	movcc	r1, #92	; 0x5c
   1aa64:	strbcc	r1, [r6, r0]
   1aa68:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1aa6c:	cmp	r1, #2
   1aa70:	beq	1aad0 <__assert_fail@plt+0x91e4>
   1aa74:	add	r1, r7, #1
   1aa78:	mov	r4, #0
   1aa7c:	mov	r8, #1
   1aa80:	mov	r5, #48	; 0x30
   1aa84:	cmp	r1, lr
   1aa88:	bcs	1a370 <__assert_fail@plt+0x8a84>
   1aa8c:	ldrb	r1, [ip, r1]
   1aa90:	sub	r1, r1, #48	; 0x30
   1aa94:	uxtb	r1, r1
   1aa98:	cmp	r1, #9
   1aa9c:	bhi	1a370 <__assert_fail@plt+0x8a84>
   1aaa0:	cmp	r9, sl
   1aaa4:	movcc	r1, #48	; 0x30
   1aaa8:	strbcc	r1, [r6, r9]
   1aaac:	add	r1, r0, #2
   1aab0:	add	r9, r0, #3
   1aab4:	cmp	r1, sl
   1aab8:	movcc	r2, #48	; 0x30
   1aabc:	strbcc	r2, [r6, r1]
   1aac0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1aac4:	cmp	r0, #0
   1aac8:	bne	1a37c <__assert_fail@plt+0x8a90>
   1aacc:	b	1a654 <__assert_fail@plt+0x8d68>
   1aad0:	mov	r0, #48	; 0x30
   1aad4:	mov	r8, #1
   1aad8:	mov	r4, #0
   1aadc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1aae0:	cmp	r1, #0
   1aae4:	bne	1a690 <__assert_fail@plt+0x8da4>
   1aae8:	cmp	r8, #0
   1aaec:	beq	1a60c <__assert_fail@plt+0x8d20>
   1aaf0:	b	1a3fc <__assert_fail@plt+0x8b10>
   1aaf4:	mov	r4, #0
   1aaf8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1aafc:	b	1ab38 <__assert_fail@plt+0x924c>
   1ab00:	ldr	r1, [sp, #84]	; 0x54
   1ab04:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ab08:	mov	r4, #0
   1ab0c:	cmp	r6, r1
   1ab10:	bcs	1ab38 <__assert_fail@plt+0x924c>
   1ab14:	ldrb	r0, [ip, r6]
   1ab18:	cmp	r0, #0
   1ab1c:	beq	1ab38 <__assert_fail@plt+0x924c>
   1ab20:	ldr	r0, [sp, #64]	; 0x40
   1ab24:	add	r0, r0, #1
   1ab28:	add	r6, r0, r7
   1ab2c:	str	r0, [sp, #64]	; 0x40
   1ab30:	cmp	r6, r1
   1ab34:	bcc	1ab14 <__assert_fail@plt+0x9228>
   1ab38:	ldr	r6, [sp, #64]	; 0x40
   1ab3c:	b	1ab44 <__assert_fail@plt+0x9258>
   1ab40:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ab44:	mov	r1, r6
   1ab48:	ldr	r6, [sp, #76]	; 0x4c
   1ab4c:	ldr	sl, [sp, #56]	; 0x38
   1ab50:	ldr	r0, [sp, #44]	; 0x2c
   1ab54:	cmp	r1, #1
   1ab58:	orr	r2, r4, r0
   1ab5c:	mov	r0, r1
   1ab60:	bhi	1ab80 <__assert_fail@plt+0x9294>
   1ab64:	tst	r2, #1
   1ab68:	beq	1ab80 <__assert_fail@plt+0x9294>
   1ab6c:	ldr	lr, [sp, #84]	; 0x54
   1ab70:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ab74:	cmp	r0, #0
   1ab78:	bne	1a37c <__assert_fail@plt+0x8a90>
   1ab7c:	b	1a654 <__assert_fail@plt+0x8d68>
   1ab80:	str	r2, [sp, #64]	; 0x40
   1ab84:	add	r0, r0, r7
   1ab88:	add	r1, r7, #1
   1ab8c:	ldr	lr, [sp, #84]	; 0x54
   1ab90:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1ab94:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1ab98:	mov	r3, #0
   1ab9c:	str	r0, [sp, #56]	; 0x38
   1aba0:	ldr	r0, [sp, #64]	; 0x40
   1aba4:	tst	r0, #1
   1aba8:	bne	1ac90 <__assert_fail@plt+0x93a4>
   1abac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1abb0:	tst	r0, #1
   1abb4:	bne	1ae30 <__assert_fail@plt+0x9544>
   1abb8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1abbc:	cmp	r7, #2
   1abc0:	movwne	r3, #1
   1abc4:	orr	r3, r3, r2
   1abc8:	tst	r3, #1
   1abcc:	bne	1ac04 <__assert_fail@plt+0x9318>
   1abd0:	cmp	r9, sl
   1abd4:	add	r3, r9, #1
   1abd8:	movcc	r2, #39	; 0x27
   1abdc:	strbcc	r2, [r6, r9]
   1abe0:	cmp	r3, sl
   1abe4:	movcc	r2, #36	; 0x24
   1abe8:	strbcc	r2, [r6, r3]
   1abec:	add	r3, r9, #2
   1abf0:	add	r9, r9, #3
   1abf4:	cmp	r3, sl
   1abf8:	movcc	r2, #39	; 0x27
   1abfc:	strbcc	r2, [r6, r3]
   1ac00:	mov	r2, #1
   1ac04:	cmp	r9, sl
   1ac08:	mov	r0, r2
   1ac0c:	movcc	r3, #92	; 0x5c
   1ac10:	strbcc	r3, [r6, r9]
   1ac14:	add	r3, r9, #1
   1ac18:	cmp	r3, sl
   1ac1c:	andcc	r7, r5, #192	; 0xc0
   1ac20:	movcc	r2, #48	; 0x30
   1ac24:	orrcc	r7, r2, r7, lsr #6
   1ac28:	strbcc	r7, [r6, r3]
   1ac2c:	add	r3, r9, #2
   1ac30:	add	r9, r9, #3
   1ac34:	cmp	r3, sl
   1ac38:	lsrcc	r7, r5, #3
   1ac3c:	movcc	r2, #6
   1ac40:	bficc	r7, r2, #3, #29
   1ac44:	mov	r2, #6
   1ac48:	strbcc	r7, [r6, r3]
   1ac4c:	bfi	r5, r2, #3, #29
   1ac50:	mov	r3, #1
   1ac54:	mov	r2, r0
   1ac58:	ldr	r0, [sp, #56]	; 0x38
   1ac5c:	and	r8, r3, #1
   1ac60:	cmp	r0, r1
   1ac64:	bhi	1acc4 <__assert_fail@plt+0x93d8>
   1ac68:	b	1ad04 <__assert_fail@plt+0x9418>
   1ac6c:	cmp	r9, sl
   1ac70:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1ac74:	strbcc	r5, [r6, r9]
   1ac78:	add	r9, r9, #1
   1ac7c:	ldrb	r5, [ip, r1]
   1ac80:	add	r1, r1, #1
   1ac84:	ldr	r0, [sp, #64]	; 0x40
   1ac88:	tst	r0, #1
   1ac8c:	beq	1abac <__assert_fail@plt+0x92c0>
   1ac90:	ldr	r7, [fp, #-56]	; 0xffffffc8
   1ac94:	tst	r7, #1
   1ac98:	beq	1acac <__assert_fail@plt+0x93c0>
   1ac9c:	cmp	r9, sl
   1aca0:	movcc	r7, #92	; 0x5c
   1aca4:	strbcc	r7, [r6, r9]
   1aca8:	add	r9, r9, #1
   1acac:	mov	r7, #0
   1acb0:	str	r7, [fp, #-56]	; 0xffffffc8
   1acb4:	ldr	r0, [sp, #56]	; 0x38
   1acb8:	and	r8, r3, #1
   1acbc:	cmp	r0, r1
   1acc0:	bls	1ad04 <__assert_fail@plt+0x9418>
   1acc4:	cmp	r8, #0
   1acc8:	mvn	r7, r2
   1accc:	movwne	r8, #1
   1acd0:	orr	r7, r7, r8
   1acd4:	tst	r7, #1
   1acd8:	bne	1ac6c <__assert_fail@plt+0x9380>
   1acdc:	cmp	r9, sl
   1ace0:	movcc	r7, #39	; 0x27
   1ace4:	strbcc	r7, [r6, r9]
   1ace8:	add	r7, r9, #1
   1acec:	add	r9, r9, #2
   1acf0:	cmp	r7, sl
   1acf4:	movcc	r2, #39	; 0x27
   1acf8:	strbcc	r2, [r6, r7]
   1acfc:	mov	r2, #0
   1ad00:	b	1ac6c <__assert_fail@plt+0x9380>
   1ad04:	cmp	r8, #0
   1ad08:	sub	r7, r1, #1
   1ad0c:	mov	r0, r5
   1ad10:	str	r2, [fp, #-48]	; 0xffffffd0
   1ad14:	movwne	r8, #1
   1ad18:	cmp	r8, #0
   1ad1c:	beq	1a60c <__assert_fail@plt+0x8d20>
   1ad20:	b	1a3fc <__assert_fail@plt+0x8b10>
   1ad24:	mov	lr, r7
   1ad28:	b	1ad30 <__assert_fail@plt+0x9444>
   1ad2c:	mvn	lr, #0
   1ad30:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1ad34:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1ad38:	eor	r0, r7, #2
   1ad3c:	orr	r0, r0, r9
   1ad40:	clz	r0, r0
   1ad44:	lsr	r0, r0, #5
   1ad48:	tst	r1, r0
   1ad4c:	bne	1ae4c <__assert_fail@plt+0x9560>
   1ad50:	mov	r0, r1
   1ad54:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1ad58:	cmp	r7, #2
   1ad5c:	movwne	r1, #1
   1ad60:	orr	r0, r0, r1
   1ad64:	tst	r0, #1
   1ad68:	ldreq	r0, [sp, #52]	; 0x34
   1ad6c:	streq	lr, [sp, #84]	; 0x54
   1ad70:	eoreq	r0, r0, #1
   1ad74:	tsteq	r0, #1
   1ad78:	bne	1af10 <__assert_fail@plt+0x9624>
   1ad7c:	tst	r4, #1
   1ad80:	bne	1aecc <__assert_fail@plt+0x95e0>
   1ad84:	ldr	r6, [sp, #48]	; 0x30
   1ad88:	mov	r8, #0
   1ad8c:	cmp	r6, #0
   1ad90:	beq	1af08 <__assert_fail@plt+0x961c>
   1ad94:	ldr	r0, [sp, #80]	; 0x50
   1ad98:	mov	r1, #0
   1ad9c:	cmp	sl, #0
   1ada0:	mov	r4, #0
   1ada4:	str	r1, [fp, #-72]	; 0xffffffb8
   1ada8:	beq	19c9c <__assert_fail@plt+0x83b0>
   1adac:	b	1af10 <__assert_fail@plt+0x9624>
   1adb0:	ldrb	r1, [r0, #3]
   1adb4:	cmp	r1, #56	; 0x38
   1adb8:	ldrbeq	r1, [r0, #4]
   1adbc:	cmpeq	r1, #48	; 0x30
   1adc0:	bne	19e94 <__assert_fail@plt+0x85a8>
   1adc4:	ldrb	r1, [r0, #5]
   1adc8:	cmp	r1, #51	; 0x33
   1adcc:	ldrbeq	r1, [r0, #6]
   1add0:	cmpeq	r1, #48	; 0x30
   1add4:	bne	19e94 <__assert_fail@plt+0x85a8>
   1add8:	ldrb	r0, [r0, #7]
   1addc:	cmp	r0, #0
   1ade0:	movw	r0, #2849	; 0xb21
   1ade4:	movt	r0, #2
   1ade8:	str	r0, [sp, #68]	; 0x44
   1adec:	bne	19e94 <__assert_fail@plt+0x85a8>
   1adf0:	b	19eb0 <__assert_fail@plt+0x85c4>
   1adf4:	ldrb	r1, [r0, #4]
   1adf8:	cmp	r1, #48	; 0x30
   1adfc:	ldrbeq	r1, [r0, #5]
   1ae00:	cmpeq	r1, #51	; 0x33
   1ae04:	bne	19f78 <__assert_fail@plt+0x868c>
   1ae08:	ldrb	r1, [r0, #6]
   1ae0c:	cmp	r1, #48	; 0x30
   1ae10:	ldrbeq	r0, [r0, #7]
   1ae14:	cmpeq	r0, #0
   1ae18:	bne	19f78 <__assert_fail@plt+0x868c>
   1ae1c:	movw	r0, #2853	; 0xb25
   1ae20:	movt	r0, #2
   1ae24:	str	r0, [sp, #72]	; 0x48
   1ae28:	b	19f98 <__assert_fail@plt+0x86ac>
   1ae2c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1ae30:	ldr	r2, [sp, #80]	; 0x50
   1ae34:	b	1ae6c <__assert_fail@plt+0x9580>
   1ae38:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ae3c:	mov	r2, #1
   1ae40:	mov	lr, r4
   1ae44:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1ae48:	b	1ae6c <__assert_fail@plt+0x9580>
   1ae4c:	ldr	r2, [sp, #80]	; 0x50
   1ae50:	mov	r7, #2
   1ae54:	b	1ae6c <__assert_fail@plt+0x9580>
   1ae58:	ldr	r6, [sp, #76]	; 0x4c
   1ae5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ae60:	ldr	lr, [sp, #84]	; 0x54
   1ae64:	ldr	r2, [sp, #80]	; 0x50
   1ae68:	mov	r7, #2
   1ae6c:	mov	r0, #0
   1ae70:	ldr	r1, [fp, #12]
   1ae74:	tst	r2, #1
   1ae78:	mov	r2, r7
   1ae7c:	mov	r3, lr
   1ae80:	str	r0, [sp, #8]
   1ae84:	ldr	r0, [sp, #68]	; 0x44
   1ae88:	movwne	r2, #4
   1ae8c:	cmp	r7, #2
   1ae90:	movne	r2, r7
   1ae94:	str	r2, [sp]
   1ae98:	mov	r2, ip
   1ae9c:	bic	r1, r1, #2
   1aea0:	str	r0, [sp, #12]
   1aea4:	ldr	r0, [sp, #72]	; 0x48
   1aea8:	str	r1, [sp, #4]
   1aeac:	mov	r1, sl
   1aeb0:	str	r0, [sp, #16]
   1aeb4:	mov	r0, r6
   1aeb8:	bl	19c20 <__assert_fail@plt+0x8334>
   1aebc:	mov	r9, r0
   1aec0:	mov	r0, r9
   1aec4:	sub	sp, fp, #28
   1aec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aecc:	mov	r0, #5
   1aed0:	ldr	r1, [sp, #48]	; 0x30
   1aed4:	ldr	r2, [fp, #-84]	; 0xffffffac
   1aed8:	ldr	r3, [sp, #84]	; 0x54
   1aedc:	str	r0, [sp]
   1aee0:	ldr	r0, [fp, #12]
   1aee4:	str	r0, [sp, #4]
   1aee8:	ldr	r0, [fp, #16]
   1aeec:	str	r0, [sp, #8]
   1aef0:	ldr	r0, [sp, #68]	; 0x44
   1aef4:	str	r0, [sp, #12]
   1aef8:	ldr	r0, [sp, #72]	; 0x48
   1aefc:	str	r0, [sp, #16]
   1af00:	ldr	r0, [sp, #76]	; 0x4c
   1af04:	b	1aeb8 <__assert_fail@plt+0x95cc>
   1af08:	mov	r0, #0
   1af0c:	str	r0, [fp, #-72]	; 0xffffffb8
   1af10:	ldr	r1, [sp, #92]	; 0x5c
   1af14:	cmp	r1, #0
   1af18:	beq	1af58 <__assert_fail@plt+0x966c>
   1af1c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1af20:	ldr	r2, [sp, #76]	; 0x4c
   1af24:	tst	r0, #1
   1af28:	bne	1af5c <__assert_fail@plt+0x9670>
   1af2c:	ldrb	r0, [r1]
   1af30:	cmp	r0, #0
   1af34:	beq	1af5c <__assert_fail@plt+0x9670>
   1af38:	add	r1, r1, #1
   1af3c:	cmp	r9, sl
   1af40:	strbcc	r0, [r2, r9]
   1af44:	add	r9, r9, #1
   1af48:	ldrb	r0, [r1], #1
   1af4c:	cmp	r0, #0
   1af50:	bne	1af3c <__assert_fail@plt+0x9650>
   1af54:	b	1af5c <__assert_fail@plt+0x9670>
   1af58:	ldr	r2, [sp, #76]	; 0x4c
   1af5c:	cmp	r9, sl
   1af60:	movcc	r0, #0
   1af64:	strbcc	r0, [r2, r9]
   1af68:	mov	r0, r9
   1af6c:	sub	sp, fp, #28
   1af70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af74:	mov	r2, #1
   1af78:	b	1ae44 <__assert_fail@plt+0x9558>
   1af7c:	ldr	r2, [sp, #80]	; 0x50
   1af80:	mov	r7, #5
   1af84:	b	1ae6c <__assert_fail@plt+0x9580>
   1af88:	bl	118bc <abort@plt>
   1af8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af90:	add	fp, sp, #28
   1af94:	sub	sp, sp, #28
   1af98:	movw	r5, #9152	; 0x23c0
   1af9c:	cmp	r2, #0
   1afa0:	mov	r4, r1
   1afa4:	mov	r7, r0
   1afa8:	str	r0, [sp, #20]
   1afac:	movt	r5, #3
   1afb0:	movne	r5, r2
   1afb4:	bl	11748 <__errno_location@plt>
   1afb8:	mov	sl, r0
   1afbc:	ldm	r5, {r0, r1}
   1afc0:	ldr	r2, [r5, #40]	; 0x28
   1afc4:	ldr	r3, [r5, #44]	; 0x2c
   1afc8:	add	r9, r5, #8
   1afcc:	ldr	r6, [sl]
   1afd0:	orr	r8, r1, #1
   1afd4:	mov	r1, #0
   1afd8:	str	r6, [sp, #24]
   1afdc:	stm	sp, {r0, r8, r9}
   1afe0:	str	r2, [sp, #12]
   1afe4:	str	r3, [sp, #16]
   1afe8:	mov	r0, #0
   1afec:	mov	r2, r7
   1aff0:	mov	r3, r4
   1aff4:	mov	r6, r4
   1aff8:	bl	19c20 <__assert_fail@plt+0x8334>
   1affc:	add	r7, r0, #1
   1b000:	mov	r0, r7
   1b004:	bl	1c294 <__assert_fail@plt+0xa9a8>
   1b008:	mov	r4, r0
   1b00c:	ldr	r0, [r5]
   1b010:	ldr	r2, [r5, #44]	; 0x2c
   1b014:	ldr	r1, [r5, #40]	; 0x28
   1b018:	mov	r3, r6
   1b01c:	stm	sp, {r0, r8, r9}
   1b020:	str	r2, [sp, #16]
   1b024:	str	r1, [sp, #12]
   1b028:	mov	r0, r4
   1b02c:	mov	r1, r7
   1b030:	ldr	r2, [sp, #20]
   1b034:	bl	19c20 <__assert_fail@plt+0x8334>
   1b038:	ldr	r0, [sp, #24]
   1b03c:	str	r0, [sl]
   1b040:	mov	r0, r4
   1b044:	sub	sp, fp, #28
   1b048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b04c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b050:	add	fp, sp, #28
   1b054:	sub	sp, sp, #36	; 0x24
   1b058:	movw	r8, #9152	; 0x23c0
   1b05c:	cmp	r3, #0
   1b060:	mov	r4, r2
   1b064:	str	r2, [sp, #24]
   1b068:	mov	r5, r1
   1b06c:	mov	r6, r0
   1b070:	str	r0, [sp, #20]
   1b074:	movt	r8, #3
   1b078:	movne	r8, r3
   1b07c:	bl	11748 <__errno_location@plt>
   1b080:	str	r0, [sp, #28]
   1b084:	cmp	r4, #0
   1b088:	add	sl, r8, #8
   1b08c:	ldm	r8, {r3, r9}
   1b090:	ldr	r7, [r0]
   1b094:	ldr	r1, [r8, #40]	; 0x28
   1b098:	ldr	r2, [r8, #44]	; 0x2c
   1b09c:	mov	r0, #0
   1b0a0:	orreq	r9, r9, #1
   1b0a4:	str	r7, [sp, #32]
   1b0a8:	mov	r7, r5
   1b0ac:	stm	sp, {r3, r9, sl}
   1b0b0:	str	r1, [sp, #12]
   1b0b4:	str	r2, [sp, #16]
   1b0b8:	mov	r1, #0
   1b0bc:	mov	r2, r6
   1b0c0:	mov	r3, r5
   1b0c4:	bl	19c20 <__assert_fail@plt+0x8334>
   1b0c8:	add	r4, r0, #1
   1b0cc:	mov	r5, r0
   1b0d0:	mov	r0, r4
   1b0d4:	bl	1c294 <__assert_fail@plt+0xa9a8>
   1b0d8:	mov	r6, r0
   1b0dc:	ldr	r0, [r8]
   1b0e0:	ldr	r2, [r8, #44]	; 0x2c
   1b0e4:	ldr	r1, [r8, #40]	; 0x28
   1b0e8:	mov	r3, r7
   1b0ec:	stm	sp, {r0, r9, sl}
   1b0f0:	str	r2, [sp, #16]
   1b0f4:	str	r1, [sp, #12]
   1b0f8:	mov	r0, r6
   1b0fc:	mov	r1, r4
   1b100:	ldr	r2, [sp, #20]
   1b104:	bl	19c20 <__assert_fail@plt+0x8334>
   1b108:	ldr	r0, [sp, #24]
   1b10c:	ldr	r1, [sp, #32]
   1b110:	ldr	r2, [sp, #28]
   1b114:	cmp	r0, #0
   1b118:	str	r1, [r2]
   1b11c:	strne	r5, [r0]
   1b120:	mov	r0, r6
   1b124:	sub	sp, fp, #28
   1b128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b12c:	push	{r4, r5, r6, r7, fp, lr}
   1b130:	add	fp, sp, #16
   1b134:	movw	r4, #8968	; 0x2308
   1b138:	movt	r4, #3
   1b13c:	ldrd	r6, [r4]
   1b140:	cmp	r7, #2
   1b144:	blt	1b170 <__assert_fail@plt+0x9884>
   1b148:	add	r5, r6, #12
   1b14c:	mov	r7, #0
   1b150:	ldr	r0, [r5, r7, lsl #3]
   1b154:	bl	16030 <__assert_fail@plt+0x4744>
   1b158:	ldr	r1, [r4, #4]
   1b15c:	add	r2, r7, #2
   1b160:	add	r0, r7, #1
   1b164:	mov	r7, r0
   1b168:	cmp	r2, r1
   1b16c:	blt	1b150 <__assert_fail@plt+0x9864>
   1b170:	ldr	r0, [r6, #4]
   1b174:	movw	r5, #9200	; 0x23f0
   1b178:	movt	r5, #3
   1b17c:	cmp	r0, r5
   1b180:	beq	1b194 <__assert_fail@plt+0x98a8>
   1b184:	bl	16030 <__assert_fail@plt+0x4744>
   1b188:	mov	r0, #256	; 0x100
   1b18c:	str	r0, [r4, #8]
   1b190:	str	r5, [r4, #12]
   1b194:	add	r5, r4, #8
   1b198:	cmp	r6, r5
   1b19c:	beq	1b1ac <__assert_fail@plt+0x98c0>
   1b1a0:	mov	r0, r6
   1b1a4:	bl	16030 <__assert_fail@plt+0x4744>
   1b1a8:	str	r5, [r4]
   1b1ac:	mov	r0, #1
   1b1b0:	str	r0, [r4, #4]
   1b1b4:	pop	{r4, r5, r6, r7, fp, pc}
   1b1b8:	movw	r3, #9152	; 0x23c0
   1b1bc:	mvn	r2, #0
   1b1c0:	movt	r3, #3
   1b1c4:	b	1b1c8 <__assert_fail@plt+0x98dc>
   1b1c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1cc:	add	fp, sp, #28
   1b1d0:	sub	sp, sp, #44	; 0x2c
   1b1d4:	mov	r7, r3
   1b1d8:	str	r2, [sp, #36]	; 0x24
   1b1dc:	str	r1, [sp, #32]
   1b1e0:	mov	r5, r0
   1b1e4:	bl	11748 <__errno_location@plt>
   1b1e8:	cmp	r5, #0
   1b1ec:	blt	1b350 <__assert_fail@plt+0x9a64>
   1b1f0:	cmn	r5, #-2147483647	; 0x80000001
   1b1f4:	beq	1b350 <__assert_fail@plt+0x9a64>
   1b1f8:	movw	r8, #8968	; 0x2308
   1b1fc:	mov	r4, r0
   1b200:	movt	r8, #3
   1b204:	ldr	r6, [r8]
   1b208:	ldr	r1, [r8, #4]
   1b20c:	ldr	r0, [r0]
   1b210:	str	r4, [sp, #28]
   1b214:	cmp	r1, r5
   1b218:	str	r0, [sp, #24]
   1b21c:	ble	1b228 <__assert_fail@plt+0x993c>
   1b220:	mov	sl, r6
   1b224:	b	1b28c <__assert_fail@plt+0x99a0>
   1b228:	mov	r0, #8
   1b22c:	add	r9, r8, #8
   1b230:	add	r2, r5, #1
   1b234:	str	r1, [fp, #-32]	; 0xffffffe0
   1b238:	mvn	r3, #-2147483648	; 0x80000000
   1b23c:	str	r0, [sp]
   1b240:	subs	r0, r6, r9
   1b244:	sub	r2, r2, r1
   1b248:	sub	r1, fp, #32
   1b24c:	movne	r0, r6
   1b250:	bl	1c494 <__assert_fail@plt+0xaba8>
   1b254:	str	r0, [r8]
   1b258:	cmp	r6, r9
   1b25c:	mov	sl, r0
   1b260:	ldrdeq	r0, [r8, #8]
   1b264:	stmeq	sl, {r0, r1}
   1b268:	ldr	r1, [r8, #4]
   1b26c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b270:	add	r0, sl, r1, lsl #3
   1b274:	sub	r1, r2, r1
   1b278:	lsl	r2, r1, #3
   1b27c:	mov	r1, #0
   1b280:	bl	1176c <memset@plt>
   1b284:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b288:	str	r0, [r8, #4]
   1b28c:	mov	r9, sl
   1b290:	ldr	r6, [r9, r5, lsl #3]!
   1b294:	ldr	r4, [r9, #4]!
   1b298:	ldm	r7, {r0, r1}
   1b29c:	ldr	r2, [r7, #40]	; 0x28
   1b2a0:	ldr	r3, [r7, #44]	; 0x2c
   1b2a4:	orr	r8, r1, #1
   1b2a8:	add	r1, r7, #8
   1b2ac:	stm	sp, {r0, r8}
   1b2b0:	add	r0, sp, #8
   1b2b4:	str	r1, [sp, #20]
   1b2b8:	stm	r0, {r1, r2, r3}
   1b2bc:	mov	r0, r4
   1b2c0:	mov	r1, r6
   1b2c4:	ldr	r2, [sp, #32]
   1b2c8:	ldr	r3, [sp, #36]	; 0x24
   1b2cc:	bl	19c20 <__assert_fail@plt+0x8334>
   1b2d0:	cmp	r6, r0
   1b2d4:	bhi	1b338 <__assert_fail@plt+0x9a4c>
   1b2d8:	add	r6, r0, #1
   1b2dc:	movw	r0, #9200	; 0x23f0
   1b2e0:	movt	r0, #3
   1b2e4:	str	r6, [sl, r5, lsl #3]
   1b2e8:	cmp	r4, r0
   1b2ec:	beq	1b2f8 <__assert_fail@plt+0x9a0c>
   1b2f0:	mov	r0, r4
   1b2f4:	bl	16030 <__assert_fail@plt+0x4744>
   1b2f8:	mov	r0, r6
   1b2fc:	bl	1c294 <__assert_fail@plt+0xa9a8>
   1b300:	str	r0, [r9]
   1b304:	mov	r4, r0
   1b308:	add	r3, sp, #8
   1b30c:	ldr	r0, [r7]
   1b310:	ldr	r1, [r7, #40]	; 0x28
   1b314:	ldr	r2, [r7, #44]	; 0x2c
   1b318:	stm	sp, {r0, r8}
   1b31c:	ldr	r0, [sp, #20]
   1b320:	stm	r3, {r0, r1, r2}
   1b324:	mov	r0, r4
   1b328:	mov	r1, r6
   1b32c:	ldr	r2, [sp, #32]
   1b330:	ldr	r3, [sp, #36]	; 0x24
   1b334:	bl	19c20 <__assert_fail@plt+0x8334>
   1b338:	ldr	r1, [sp, #24]
   1b33c:	ldr	r0, [sp, #28]
   1b340:	str	r1, [r0]
   1b344:	mov	r0, r4
   1b348:	sub	sp, fp, #28
   1b34c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b350:	bl	118bc <abort@plt>
   1b354:	movw	r3, #9152	; 0x23c0
   1b358:	movt	r3, #3
   1b35c:	b	1b1c8 <__assert_fail@plt+0x98dc>
   1b360:	movw	r3, #9152	; 0x23c0
   1b364:	mov	r1, r0
   1b368:	mov	r0, #0
   1b36c:	mvn	r2, #0
   1b370:	movt	r3, #3
   1b374:	b	1b1c8 <__assert_fail@plt+0x98dc>
   1b378:	movw	r3, #9152	; 0x23c0
   1b37c:	mov	r2, r1
   1b380:	mov	r1, r0
   1b384:	mov	r0, #0
   1b388:	movt	r3, #3
   1b38c:	b	1b1c8 <__assert_fail@plt+0x98dc>
   1b390:	push	{fp, lr}
   1b394:	mov	fp, sp
   1b398:	sub	sp, sp, #48	; 0x30
   1b39c:	vmov.i32	q8, #0	; 0x00000000
   1b3a0:	mov	ip, #32
   1b3a4:	mov	r3, sp
   1b3a8:	mov	lr, r2
   1b3ac:	cmp	r1, #10
   1b3b0:	add	r2, r3, #16
   1b3b4:	vst1.64	{d16-d17}, [r3], ip
   1b3b8:	vst1.64	{d16-d17}, [r3]
   1b3bc:	vst1.64	{d16-d17}, [r2]
   1b3c0:	beq	1b3e0 <__assert_fail@plt+0x9af4>
   1b3c4:	str	r1, [sp]
   1b3c8:	mov	r3, sp
   1b3cc:	mov	r1, lr
   1b3d0:	mvn	r2, #0
   1b3d4:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b3d8:	mov	sp, fp
   1b3dc:	pop	{fp, pc}
   1b3e0:	bl	118bc <abort@plt>
   1b3e4:	push	{r4, sl, fp, lr}
   1b3e8:	add	fp, sp, #8
   1b3ec:	sub	sp, sp, #48	; 0x30
   1b3f0:	mov	ip, r3
   1b3f4:	mov	r3, sp
   1b3f8:	vmov.i32	q8, #0	; 0x00000000
   1b3fc:	mov	lr, #32
   1b400:	cmp	r1, #10
   1b404:	add	r4, r3, #16
   1b408:	vst1.64	{d16-d17}, [r3], lr
   1b40c:	vst1.64	{d16-d17}, [r3]
   1b410:	vst1.64	{d16-d17}, [r4]
   1b414:	beq	1b434 <__assert_fail@plt+0x9b48>
   1b418:	str	r1, [sp]
   1b41c:	mov	r1, r2
   1b420:	mov	r3, sp
   1b424:	mov	r2, ip
   1b428:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b42c:	sub	sp, fp, #8
   1b430:	pop	{r4, sl, fp, pc}
   1b434:	bl	118bc <abort@plt>
   1b438:	push	{fp, lr}
   1b43c:	mov	fp, sp
   1b440:	sub	sp, sp, #48	; 0x30
   1b444:	mov	r3, sp
   1b448:	vmov.i32	q8, #0	; 0x00000000
   1b44c:	mov	ip, #32
   1b450:	cmp	r0, #10
   1b454:	add	r2, r3, #16
   1b458:	vst1.64	{d16-d17}, [r3], ip
   1b45c:	vst1.64	{d16-d17}, [r3]
   1b460:	vst1.64	{d16-d17}, [r2]
   1b464:	beq	1b484 <__assert_fail@plt+0x9b98>
   1b468:	str	r0, [sp]
   1b46c:	mov	r3, sp
   1b470:	mov	r0, #0
   1b474:	mvn	r2, #0
   1b478:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b47c:	mov	sp, fp
   1b480:	pop	{fp, pc}
   1b484:	bl	118bc <abort@plt>
   1b488:	push	{fp, lr}
   1b48c:	mov	fp, sp
   1b490:	sub	sp, sp, #48	; 0x30
   1b494:	mov	r3, sp
   1b498:	vmov.i32	q8, #0	; 0x00000000
   1b49c:	mov	ip, #32
   1b4a0:	cmp	r0, #10
   1b4a4:	add	lr, r3, #16
   1b4a8:	vst1.64	{d16-d17}, [r3], ip
   1b4ac:	vst1.64	{d16-d17}, [r3]
   1b4b0:	vst1.64	{d16-d17}, [lr]
   1b4b4:	beq	1b4d0 <__assert_fail@plt+0x9be4>
   1b4b8:	str	r0, [sp]
   1b4bc:	mov	r3, sp
   1b4c0:	mov	r0, #0
   1b4c4:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b4c8:	mov	sp, fp
   1b4cc:	pop	{fp, pc}
   1b4d0:	bl	118bc <abort@plt>
   1b4d4:	push	{r4, sl, fp, lr}
   1b4d8:	add	fp, sp, #8
   1b4dc:	sub	sp, sp, #48	; 0x30
   1b4e0:	mov	lr, r0
   1b4e4:	movw	r0, #9152	; 0x23c0
   1b4e8:	mov	r3, #32
   1b4ec:	mov	ip, r1
   1b4f0:	mov	r4, #1
   1b4f4:	movt	r0, #3
   1b4f8:	add	r1, r0, #16
   1b4fc:	vld1.64	{d16-d17}, [r0], r3
   1b500:	mov	r3, sp
   1b504:	vld1.64	{d18-d19}, [r1]
   1b508:	add	r1, r3, #16
   1b50c:	vld1.64	{d20-d21}, [r0]
   1b510:	add	r0, r3, #32
   1b514:	vst1.64	{d18-d19}, [r1]
   1b518:	mov	r1, r3
   1b51c:	vst1.64	{d20-d21}, [r0]
   1b520:	mov	r0, #28
   1b524:	and	r0, r0, r2, lsr #3
   1b528:	and	r2, r2, #31
   1b52c:	vst1.64	{d16-d17}, [r1], r0
   1b530:	ldr	r0, [r1, #8]
   1b534:	bic	r4, r4, r0, lsr r2
   1b538:	eor	r0, r0, r4, lsl r2
   1b53c:	mov	r2, ip
   1b540:	str	r0, [r1, #8]
   1b544:	mov	r0, #0
   1b548:	mov	r1, lr
   1b54c:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b550:	sub	sp, fp, #8
   1b554:	pop	{r4, sl, fp, pc}
   1b558:	push	{fp, lr}
   1b55c:	mov	fp, sp
   1b560:	sub	sp, sp, #48	; 0x30
   1b564:	mov	ip, r0
   1b568:	movw	r0, #9152	; 0x23c0
   1b56c:	mov	r3, #32
   1b570:	movt	r0, #3
   1b574:	add	r2, r0, #16
   1b578:	vld1.64	{d16-d17}, [r0], r3
   1b57c:	mov	r3, sp
   1b580:	vld1.64	{d18-d19}, [r2]
   1b584:	add	r2, r3, #16
   1b588:	vld1.64	{d20-d21}, [r0]
   1b58c:	add	r0, r3, #32
   1b590:	vst1.64	{d18-d19}, [r2]
   1b594:	mov	r2, r3
   1b598:	vst1.64	{d20-d21}, [r0]
   1b59c:	mov	r0, #28
   1b5a0:	and	r0, r0, r1, lsr #3
   1b5a4:	and	r1, r1, #31
   1b5a8:	vst1.64	{d16-d17}, [r2], r0
   1b5ac:	mov	r0, #1
   1b5b0:	ldr	lr, [r2, #8]
   1b5b4:	bic	r0, r0, lr, lsr r1
   1b5b8:	eor	r0, lr, r0, lsl r1
   1b5bc:	mov	r1, ip
   1b5c0:	str	r0, [r2, #8]
   1b5c4:	mov	r0, #0
   1b5c8:	mvn	r2, #0
   1b5cc:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b5d0:	mov	sp, fp
   1b5d4:	pop	{fp, pc}
   1b5d8:	push	{fp, lr}
   1b5dc:	mov	fp, sp
   1b5e0:	sub	sp, sp, #48	; 0x30
   1b5e4:	movw	r2, #9152	; 0x23c0
   1b5e8:	mov	r3, #32
   1b5ec:	mov	r1, r0
   1b5f0:	movt	r2, #3
   1b5f4:	add	r0, r2, #16
   1b5f8:	vld1.64	{d16-d17}, [r2], r3
   1b5fc:	mov	r3, sp
   1b600:	vld1.64	{d18-d19}, [r0]
   1b604:	add	r0, r3, #16
   1b608:	vld1.64	{d20-d21}, [r2]
   1b60c:	mov	r2, r3
   1b610:	vst1.64	{d18-d19}, [r0]
   1b614:	add	r0, r3, #32
   1b618:	vst1.64	{d20-d21}, [r0]
   1b61c:	mov	r0, #12
   1b620:	vst1.64	{d16-d17}, [r2], r0
   1b624:	ldr	r0, [r2]
   1b628:	orr	r0, r0, #67108864	; 0x4000000
   1b62c:	str	r0, [r2]
   1b630:	mov	r0, #0
   1b634:	mvn	r2, #0
   1b638:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b63c:	mov	sp, fp
   1b640:	pop	{fp, pc}
   1b644:	push	{fp, lr}
   1b648:	mov	fp, sp
   1b64c:	sub	sp, sp, #48	; 0x30
   1b650:	mov	ip, r1
   1b654:	mov	r1, r0
   1b658:	movw	r0, #9152	; 0x23c0
   1b65c:	mov	r3, #32
   1b660:	movt	r0, #3
   1b664:	add	r2, r0, #16
   1b668:	vld1.64	{d16-d17}, [r0], r3
   1b66c:	mov	r3, sp
   1b670:	vld1.64	{d18-d19}, [r2]
   1b674:	add	r2, r3, #16
   1b678:	vld1.64	{d20-d21}, [r0]
   1b67c:	add	r0, r3, #32
   1b680:	vst1.64	{d18-d19}, [r2]
   1b684:	mov	r2, r3
   1b688:	vst1.64	{d20-d21}, [r0]
   1b68c:	mov	r0, #12
   1b690:	vst1.64	{d16-d17}, [r2], r0
   1b694:	ldr	r0, [r2]
   1b698:	orr	r0, r0, #67108864	; 0x4000000
   1b69c:	str	r0, [r2]
   1b6a0:	mov	r0, #0
   1b6a4:	mov	r2, ip
   1b6a8:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b6ac:	mov	sp, fp
   1b6b0:	pop	{fp, pc}
   1b6b4:	push	{r4, sl, fp, lr}
   1b6b8:	add	fp, sp, #8
   1b6bc:	sub	sp, sp, #96	; 0x60
   1b6c0:	mov	ip, r2
   1b6c4:	mov	r2, sp
   1b6c8:	vmov.i32	q8, #0	; 0x00000000
   1b6cc:	mov	r4, #28
   1b6d0:	cmp	r1, #10
   1b6d4:	mov	r3, r2
   1b6d8:	add	lr, r2, #16
   1b6dc:	vst1.64	{d16-d17}, [r3], r4
   1b6e0:	vst1.64	{d16-d17}, [lr]
   1b6e4:	vst1.32	{d16-d17}, [r3]
   1b6e8:	beq	1b738 <__assert_fail@plt+0x9e4c>
   1b6ec:	vld1.64	{d16-d17}, [r2], r4
   1b6f0:	vld1.64	{d18-d19}, [lr]
   1b6f4:	add	r3, sp, #48	; 0x30
   1b6f8:	add	r4, r3, #4
   1b6fc:	vld1.32	{d20-d21}, [r2]
   1b700:	add	r2, r3, #20
   1b704:	vst1.32	{d16-d17}, [r4]
   1b708:	vst1.32	{d18-d19}, [r2]
   1b70c:	add	r2, r3, #32
   1b710:	vst1.32	{d20-d21}, [r2]
   1b714:	str	r1, [sp, #48]	; 0x30
   1b718:	mvn	r2, #0
   1b71c:	ldr	r1, [sp, #60]	; 0x3c
   1b720:	orr	r1, r1, #67108864	; 0x4000000
   1b724:	str	r1, [sp, #60]	; 0x3c
   1b728:	mov	r1, ip
   1b72c:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b730:	sub	sp, fp, #8
   1b734:	pop	{r4, sl, fp, pc}
   1b738:	bl	118bc <abort@plt>
   1b73c:	push	{r4, r5, fp, lr}
   1b740:	add	fp, sp, #8
   1b744:	sub	sp, sp, #48	; 0x30
   1b748:	mov	ip, r3
   1b74c:	movw	r3, #9152	; 0x23c0
   1b750:	mov	lr, #32
   1b754:	cmp	r1, #0
   1b758:	mov	r5, sp
   1b75c:	movt	r3, #3
   1b760:	cmpne	r2, #0
   1b764:	add	r4, r3, #16
   1b768:	vld1.64	{d16-d17}, [r3], lr
   1b76c:	vld1.64	{d18-d19}, [r4]
   1b770:	add	r4, r5, #16
   1b774:	vld1.64	{d20-d21}, [r3]
   1b778:	vst1.64	{d16-d17}, [r5], lr
   1b77c:	mov	r3, #10
   1b780:	vst1.64	{d18-d19}, [r4]
   1b784:	vst1.64	{d20-d21}, [r5]
   1b788:	str	r3, [sp]
   1b78c:	bne	1b794 <__assert_fail@plt+0x9ea8>
   1b790:	bl	118bc <abort@plt>
   1b794:	str	r2, [sp, #44]	; 0x2c
   1b798:	str	r1, [sp, #40]	; 0x28
   1b79c:	mov	r3, sp
   1b7a0:	mov	r1, ip
   1b7a4:	mvn	r2, #0
   1b7a8:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b7ac:	sub	sp, fp, #8
   1b7b0:	pop	{r4, r5, fp, pc}
   1b7b4:	push	{r4, r5, fp, lr}
   1b7b8:	add	fp, sp, #8
   1b7bc:	sub	sp, sp, #48	; 0x30
   1b7c0:	mov	lr, r3
   1b7c4:	movw	r3, #9152	; 0x23c0
   1b7c8:	mov	ip, #32
   1b7cc:	cmp	r1, #0
   1b7d0:	mov	r5, sp
   1b7d4:	movt	r3, #3
   1b7d8:	cmpne	r2, #0
   1b7dc:	add	r4, r3, #16
   1b7e0:	vld1.64	{d16-d17}, [r3], ip
   1b7e4:	vld1.64	{d18-d19}, [r4]
   1b7e8:	add	r4, r5, #16
   1b7ec:	vld1.64	{d20-d21}, [r3]
   1b7f0:	vst1.64	{d16-d17}, [r5], ip
   1b7f4:	mov	r3, #10
   1b7f8:	vst1.64	{d18-d19}, [r4]
   1b7fc:	vst1.64	{d20-d21}, [r5]
   1b800:	str	r3, [sp]
   1b804:	bne	1b80c <__assert_fail@plt+0x9f20>
   1b808:	bl	118bc <abort@plt>
   1b80c:	ldr	ip, [fp, #8]
   1b810:	str	r2, [sp, #44]	; 0x2c
   1b814:	str	r1, [sp, #40]	; 0x28
   1b818:	mov	r3, sp
   1b81c:	mov	r1, lr
   1b820:	mov	r2, ip
   1b824:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b828:	sub	sp, fp, #8
   1b82c:	pop	{r4, r5, fp, pc}
   1b830:	push	{r4, sl, fp, lr}
   1b834:	add	fp, sp, #8
   1b838:	sub	sp, sp, #48	; 0x30
   1b83c:	mov	ip, r2
   1b840:	movw	r2, #9152	; 0x23c0
   1b844:	mov	lr, #32
   1b848:	cmp	r0, #0
   1b84c:	mov	r4, sp
   1b850:	movt	r2, #3
   1b854:	cmpne	r1, #0
   1b858:	add	r3, r2, #16
   1b85c:	vld1.64	{d16-d17}, [r2], lr
   1b860:	vld1.64	{d18-d19}, [r3]
   1b864:	add	r3, r4, #16
   1b868:	vld1.64	{d20-d21}, [r2]
   1b86c:	vst1.64	{d16-d17}, [r4], lr
   1b870:	mov	r2, #10
   1b874:	vst1.64	{d18-d19}, [r3]
   1b878:	vst1.64	{d20-d21}, [r4]
   1b87c:	str	r2, [sp]
   1b880:	bne	1b888 <__assert_fail@plt+0x9f9c>
   1b884:	bl	118bc <abort@plt>
   1b888:	str	r1, [sp, #44]	; 0x2c
   1b88c:	str	r0, [sp, #40]	; 0x28
   1b890:	mov	r3, sp
   1b894:	mov	r0, #0
   1b898:	mov	r1, ip
   1b89c:	mvn	r2, #0
   1b8a0:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b8a4:	sub	sp, fp, #8
   1b8a8:	pop	{r4, sl, fp, pc}
   1b8ac:	push	{r4, r5, fp, lr}
   1b8b0:	add	fp, sp, #8
   1b8b4:	sub	sp, sp, #48	; 0x30
   1b8b8:	mov	lr, r2
   1b8bc:	movw	r2, #9152	; 0x23c0
   1b8c0:	mov	ip, r3
   1b8c4:	mov	r3, #32
   1b8c8:	cmp	r0, #0
   1b8cc:	mov	r5, sp
   1b8d0:	movt	r2, #3
   1b8d4:	cmpne	r1, #0
   1b8d8:	add	r4, r2, #16
   1b8dc:	vld1.64	{d16-d17}, [r2], r3
   1b8e0:	vld1.64	{d18-d19}, [r4]
   1b8e4:	add	r4, r5, #16
   1b8e8:	vld1.64	{d20-d21}, [r2]
   1b8ec:	vst1.64	{d16-d17}, [r5], r3
   1b8f0:	mov	r2, #10
   1b8f4:	vst1.64	{d18-d19}, [r4]
   1b8f8:	vst1.64	{d20-d21}, [r5]
   1b8fc:	str	r2, [sp]
   1b900:	bne	1b908 <__assert_fail@plt+0xa01c>
   1b904:	bl	118bc <abort@plt>
   1b908:	str	r1, [sp, #44]	; 0x2c
   1b90c:	str	r0, [sp, #40]	; 0x28
   1b910:	mov	r3, sp
   1b914:	mov	r0, #0
   1b918:	mov	r1, lr
   1b91c:	mov	r2, ip
   1b920:	bl	1b1c8 <__assert_fail@plt+0x98dc>
   1b924:	sub	sp, fp, #8
   1b928:	pop	{r4, r5, fp, pc}
   1b92c:	movw	r3, #8920	; 0x22d8
   1b930:	movt	r3, #3
   1b934:	b	1b1c8 <__assert_fail@plt+0x98dc>
   1b938:	movw	r3, #8920	; 0x22d8
   1b93c:	mov	r2, r1
   1b940:	mov	r1, r0
   1b944:	mov	r0, #0
   1b948:	movt	r3, #3
   1b94c:	b	1b1c8 <__assert_fail@plt+0x98dc>
   1b950:	movw	r3, #8920	; 0x22d8
   1b954:	mvn	r2, #0
   1b958:	movt	r3, #3
   1b95c:	b	1b1c8 <__assert_fail@plt+0x98dc>
   1b960:	movw	r3, #8920	; 0x22d8
   1b964:	mov	r1, r0
   1b968:	mov	r0, #0
   1b96c:	mvn	r2, #0
   1b970:	movt	r3, #3
   1b974:	b	1b1c8 <__assert_fail@plt+0x98dc>
   1b978:	push	{r4, r5, fp, lr}
   1b97c:	add	fp, sp, #8
   1b980:	mov	r4, #0
   1b984:	mov	r5, r0
   1b988:	mov	r1, #524288	; 0x80000
   1b98c:	str	r4, [r0, #4]
   1b990:	movw	r0, #2155	; 0x86b
   1b994:	movt	r0, #2
   1b998:	bl	1ecd4 <__assert_fail@plt+0xd3e8>
   1b99c:	cmn	r0, #1
   1b9a0:	str	r0, [r5]
   1b9a4:	ble	1b9b0 <__assert_fail@plt+0xa0c4>
   1b9a8:	mov	r0, r4
   1b9ac:	pop	{r4, r5, fp, pc}
   1b9b0:	mov	r0, #0
   1b9b4:	mov	r1, #0
   1b9b8:	mov	r4, #0
   1b9bc:	bl	11700 <getcwd@plt>
   1b9c0:	cmp	r0, #0
   1b9c4:	str	r0, [r5, #4]
   1b9c8:	mvneq	r4, #0
   1b9cc:	mov	r0, r4
   1b9d0:	pop	{r4, r5, fp, pc}
   1b9d4:	ldr	r1, [r0]
   1b9d8:	cmp	r1, #0
   1b9dc:	blt	1b9e8 <__assert_fail@plt+0xa0fc>
   1b9e0:	mov	r0, r1
   1b9e4:	b	11850 <fchdir@plt>
   1b9e8:	ldr	r0, [r0, #4]
   1b9ec:	b	1e7f0 <__assert_fail@plt+0xcf04>
   1b9f0:	push	{r4, sl, fp, lr}
   1b9f4:	add	fp, sp, #8
   1b9f8:	mov	r4, r0
   1b9fc:	ldr	r0, [r0]
   1ba00:	cmp	r0, #0
   1ba04:	blt	1ba0c <__assert_fail@plt+0xa120>
   1ba08:	bl	118c8 <close@plt>
   1ba0c:	ldr	r0, [r4, #4]
   1ba10:	pop	{r4, sl, fp, lr}
   1ba14:	b	16030 <__assert_fail@plt+0x4744>
   1ba18:	push	{r4, r5, r6, sl, fp, lr}
   1ba1c:	add	fp, sp, #16
   1ba20:	ldr	r4, [r0], #8
   1ba24:	mov	r5, r1
   1ba28:	cmp	r4, r0
   1ba2c:	beq	1ba50 <__assert_fail@plt+0xa164>
   1ba30:	mov	r0, r4
   1ba34:	mov	r1, r5
   1ba38:	bl	1d640 <__assert_fail@plt+0xbd54>
   1ba3c:	mov	r6, r0
   1ba40:	cmp	r0, #0
   1ba44:	moveq	r6, r4
   1ba48:	mov	r0, r6
   1ba4c:	pop	{r4, r5, r6, sl, fp, pc}
   1ba50:	mov	r0, r5
   1ba54:	bl	1d610 <__assert_fail@plt+0xbd24>
   1ba58:	cmp	r0, #0
   1ba5c:	moveq	r6, #0
   1ba60:	moveq	r0, r6
   1ba64:	popeq	{r4, r5, r6, sl, fp, pc}
   1ba68:	mov	r1, r4
   1ba6c:	mov	r2, r5
   1ba70:	mov	r6, r0
   1ba74:	bl	11574 <memcpy@plt>
   1ba78:	mov	r0, r6
   1ba7c:	pop	{r4, r5, r6, sl, fp, pc}
   1ba80:	push	{r4, r5, r6, sl, fp, lr}
   1ba84:	add	fp, sp, #16
   1ba88:	mov	r4, r0
   1ba8c:	add	r6, r0, #8
   1ba90:	ldrd	r0, [r0]
   1ba94:	lsl	r5, r1, #1
   1ba98:	cmp	r0, r6
   1ba9c:	beq	1baa8 <__assert_fail@plt+0xa1bc>
   1baa0:	bl	16030 <__assert_fail@plt+0x4744>
   1baa4:	ldr	r1, [r4, #4]
   1baa8:	cmp	r5, r1
   1baac:	bcc	1bad0 <__assert_fail@plt+0xa1e4>
   1bab0:	mov	r0, r5
   1bab4:	bl	1d610 <__assert_fail@plt+0xbd24>
   1bab8:	cmp	r0, #0
   1babc:	strne	r0, [r4]
   1bac0:	movne	r0, #1
   1bac4:	strne	r5, [r4, #4]
   1bac8:	popne	{r4, r5, r6, sl, fp, pc}
   1bacc:	b	1badc <__assert_fail@plt+0xa1f0>
   1bad0:	bl	11748 <__errno_location@plt>
   1bad4:	mov	r1, #12
   1bad8:	str	r1, [r0]
   1badc:	mov	r0, #0
   1bae0:	mov	r5, #1024	; 0x400
   1bae4:	str	r6, [r4]
   1bae8:	str	r5, [r4, #4]
   1baec:	pop	{r4, r5, r6, sl, fp, pc}
   1baf0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1baf4:	add	fp, sp, #24
   1baf8:	ldrd	r8, [r0]
   1bafc:	add	r7, r0, #8
   1bb00:	mov	r4, r0
   1bb04:	lsl	r5, r9, #1
   1bb08:	cmp	r8, r7
   1bb0c:	beq	1bb40 <__assert_fail@plt+0xa254>
   1bb10:	cmp	r5, r9
   1bb14:	bcc	1bb74 <__assert_fail@plt+0xa288>
   1bb18:	mov	r0, r8
   1bb1c:	mov	r1, r5
   1bb20:	bl	1d640 <__assert_fail@plt+0xbd54>
   1bb24:	mov	r6, r0
   1bb28:	cmp	r0, #0
   1bb2c:	beq	1bb84 <__assert_fail@plt+0xa298>
   1bb30:	mov	r0, #1
   1bb34:	str	r6, [r4]
   1bb38:	str	r5, [r4, #4]
   1bb3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bb40:	mov	r0, r5
   1bb44:	bl	1d610 <__assert_fail@plt+0xbd24>
   1bb48:	cmp	r0, #0
   1bb4c:	moveq	r0, #0
   1bb50:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bb54:	ldr	r2, [r4, #4]
   1bb58:	mov	r1, r8
   1bb5c:	mov	r6, r0
   1bb60:	bl	11574 <memcpy@plt>
   1bb64:	mov	r0, #1
   1bb68:	str	r6, [r4]
   1bb6c:	str	r5, [r4, #4]
   1bb70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bb74:	bl	11748 <__errno_location@plt>
   1bb78:	mov	r1, #12
   1bb7c:	str	r1, [r0]
   1bb80:	b	1bb88 <__assert_fail@plt+0xa29c>
   1bb84:	ldr	r8, [r4]
   1bb88:	mov	r0, r8
   1bb8c:	bl	16030 <__assert_fail@plt+0x4744>
   1bb90:	mov	r0, #0
   1bb94:	mov	r5, #1024	; 0x400
   1bb98:	str	r7, [r4]
   1bb9c:	str	r5, [r4, #4]
   1bba0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bba4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bba8:	add	fp, sp, #24
   1bbac:	sub	sp, sp, #32
   1bbb0:	ldr	r6, [fp, #12]
   1bbb4:	ldr	r7, [fp, #8]
   1bbb8:	mov	r4, r2
   1bbbc:	mov	r8, r0
   1bbc0:	cmp	r1, #0
   1bbc4:	beq	1bbec <__assert_fail@plt+0xa300>
   1bbc8:	movw	r2, #2940	; 0xb7c
   1bbcc:	mov	r5, r1
   1bbd0:	str	r3, [sp, #4]
   1bbd4:	str	r4, [sp]
   1bbd8:	mov	r0, r8
   1bbdc:	mov	r1, #1
   1bbe0:	movt	r2, #2
   1bbe4:	mov	r3, r5
   1bbe8:	b	1bc04 <__assert_fail@plt+0xa318>
   1bbec:	movw	r2, #2952	; 0xb88
   1bbf0:	str	r3, [sp]
   1bbf4:	mov	r0, r8
   1bbf8:	mov	r1, #1
   1bbfc:	mov	r3, r4
   1bc00:	movt	r2, #2
   1bc04:	bl	1179c <__fprintf_chk@plt>
   1bc08:	movw	r1, #2959	; 0xb8f
   1bc0c:	mov	r0, #0
   1bc10:	mov	r2, #5
   1bc14:	movt	r1, #2
   1bc18:	bl	115b0 <dcgettext@plt>
   1bc1c:	movw	r2, #3677	; 0xe5d
   1bc20:	mov	r3, r0
   1bc24:	movw	r0, #2022	; 0x7e6
   1bc28:	mov	r1, #1
   1bc2c:	str	r0, [sp]
   1bc30:	movt	r2, #2
   1bc34:	mov	r0, r8
   1bc38:	bl	1179c <__fprintf_chk@plt>
   1bc3c:	movw	r4, #902	; 0x386
   1bc40:	mov	r1, r8
   1bc44:	movt	r4, #2
   1bc48:	mov	r0, r4
   1bc4c:	bl	114f0 <fputs_unlocked@plt>
   1bc50:	movw	r1, #2963	; 0xb93
   1bc54:	mov	r0, #0
   1bc58:	mov	r2, #5
   1bc5c:	movt	r1, #2
   1bc60:	bl	115b0 <dcgettext@plt>
   1bc64:	movw	r3, #3134	; 0xc3e
   1bc68:	mov	r2, r0
   1bc6c:	mov	r0, r8
   1bc70:	mov	r1, #1
   1bc74:	movt	r3, #2
   1bc78:	bl	1179c <__fprintf_chk@plt>
   1bc7c:	mov	r0, r4
   1bc80:	mov	r1, r8
   1bc84:	bl	114f0 <fputs_unlocked@plt>
   1bc88:	cmp	r6, #9
   1bc8c:	bhi	1bcc8 <__assert_fail@plt+0xa3dc>
   1bc90:	add	r0, pc, #0
   1bc94:	ldr	pc, [r0, r6, lsl #2]
   1bc98:	andeq	fp, r1, r0, asr #25
   1bc9c:	ldrdeq	fp, [r1], -r4
   1bca0:	andeq	fp, r1, r4, lsl #26
   1bca4:	andeq	fp, r1, ip, lsr #26
   1bca8:	andeq	fp, r1, r4, asr sp
   1bcac:	andeq	fp, r1, ip, ror sp
   1bcb0:	andeq	fp, r1, r4, lsr #27
   1bcb4:	ldrdeq	fp, [r1], -ip
   1bcb8:	andeq	fp, r1, r4, lsl #29
   1bcbc:	andeq	fp, r1, ip, lsr #28
   1bcc0:	sub	sp, fp, #24
   1bcc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bcc8:	movw	r1, #3487	; 0xd9f
   1bccc:	movt	r1, #2
   1bcd0:	b	1be34 <__assert_fail@plt+0xa548>
   1bcd4:	movw	r1, #3168	; 0xc60
   1bcd8:	mov	r0, #0
   1bcdc:	mov	r2, #5
   1bce0:	movt	r1, #2
   1bce4:	bl	115b0 <dcgettext@plt>
   1bce8:	ldr	r3, [r7]
   1bcec:	mov	r2, r0
   1bcf0:	mov	r0, r8
   1bcf4:	mov	r1, #1
   1bcf8:	sub	sp, fp, #24
   1bcfc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bd00:	b	1179c <__fprintf_chk@plt>
   1bd04:	movw	r1, #3184	; 0xc70
   1bd08:	mov	r0, #0
   1bd0c:	mov	r2, #5
   1bd10:	movt	r1, #2
   1bd14:	bl	115b0 <dcgettext@plt>
   1bd18:	mov	r2, r0
   1bd1c:	ldr	r3, [r7]
   1bd20:	ldr	r0, [r7, #4]
   1bd24:	str	r0, [sp]
   1bd28:	b	1be18 <__assert_fail@plt+0xa52c>
   1bd2c:	movw	r1, #3207	; 0xc87
   1bd30:	mov	r0, #0
   1bd34:	mov	r2, #5
   1bd38:	movt	r1, #2
   1bd3c:	bl	115b0 <dcgettext@plt>
   1bd40:	ldr	r3, [r7]
   1bd44:	mov	r2, r0
   1bd48:	ldmib	r7, {r0, r1}
   1bd4c:	stm	sp, {r0, r1}
   1bd50:	b	1be18 <__assert_fail@plt+0xa52c>
   1bd54:	movw	r1, #3235	; 0xca3
   1bd58:	mov	r0, #0
   1bd5c:	mov	r2, #5
   1bd60:	movt	r1, #2
   1bd64:	bl	115b0 <dcgettext@plt>
   1bd68:	ldr	r3, [r7]
   1bd6c:	mov	r2, r0
   1bd70:	ldmib	r7, {r0, r1, r7}
   1bd74:	stm	sp, {r0, r1, r7}
   1bd78:	b	1be18 <__assert_fail@plt+0xa52c>
   1bd7c:	movw	r1, #3267	; 0xcc3
   1bd80:	mov	r0, #0
   1bd84:	mov	r2, #5
   1bd88:	movt	r1, #2
   1bd8c:	bl	115b0 <dcgettext@plt>
   1bd90:	ldr	r3, [r7]
   1bd94:	mov	r2, r0
   1bd98:	ldmib	r7, {r0, r1, r6, r7}
   1bd9c:	stm	sp, {r0, r1, r6, r7}
   1bda0:	b	1be18 <__assert_fail@plt+0xa52c>
   1bda4:	movw	r1, #3303	; 0xce7
   1bda8:	mov	r0, #0
   1bdac:	mov	r2, #5
   1bdb0:	movt	r1, #2
   1bdb4:	bl	115b0 <dcgettext@plt>
   1bdb8:	ldr	r3, [r7]
   1bdbc:	mov	r2, r0
   1bdc0:	ldmib	r7, {r0, r1, r6}
   1bdc4:	ldr	r5, [r7, #16]
   1bdc8:	ldr	r7, [r7, #20]
   1bdcc:	stm	sp, {r0, r1, r6}
   1bdd0:	str	r5, [sp, #12]
   1bdd4:	str	r7, [sp, #16]
   1bdd8:	b	1be18 <__assert_fail@plt+0xa52c>
   1bddc:	movw	r1, #3343	; 0xd0f
   1bde0:	mov	r0, #0
   1bde4:	mov	r2, #5
   1bde8:	movt	r1, #2
   1bdec:	bl	115b0 <dcgettext@plt>
   1bdf0:	ldr	r3, [r7]
   1bdf4:	mov	r2, r0
   1bdf8:	ldmib	r7, {r0, r1, r6}
   1bdfc:	ldr	r5, [r7, #16]
   1be00:	ldr	r4, [r7, #20]
   1be04:	ldr	r7, [r7, #24]
   1be08:	stm	sp, {r0, r1, r6}
   1be0c:	str	r5, [sp, #12]
   1be10:	str	r4, [sp, #16]
   1be14:	str	r7, [sp, #20]
   1be18:	mov	r0, r8
   1be1c:	mov	r1, #1
   1be20:	bl	1179c <__fprintf_chk@plt>
   1be24:	sub	sp, fp, #24
   1be28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1be2c:	movw	r1, #3435	; 0xd6b
   1be30:	movt	r1, #2
   1be34:	mov	r0, #0
   1be38:	mov	r2, #5
   1be3c:	bl	115b0 <dcgettext@plt>
   1be40:	mov	ip, r0
   1be44:	ldr	r3, [r7]
   1be48:	ldr	r0, [r7, #4]
   1be4c:	ldr	r1, [r7, #8]
   1be50:	ldr	r6, [r7, #12]
   1be54:	ldr	r5, [r7, #16]
   1be58:	ldr	r4, [r7, #20]
   1be5c:	ldr	r2, [r7, #24]
   1be60:	ldr	lr, [r7, #28]
   1be64:	ldr	r7, [r7, #32]
   1be68:	stm	sp, {r0, r1, r6}
   1be6c:	str	r5, [sp, #12]
   1be70:	str	r4, [sp, #16]
   1be74:	str	r2, [sp, #20]
   1be78:	str	lr, [sp, #24]
   1be7c:	str	r7, [sp, #28]
   1be80:	b	1bec8 <__assert_fail@plt+0xa5dc>
   1be84:	movw	r1, #3387	; 0xd3b
   1be88:	mov	r0, #0
   1be8c:	mov	r2, #5
   1be90:	movt	r1, #2
   1be94:	bl	115b0 <dcgettext@plt>
   1be98:	mov	ip, r0
   1be9c:	ldr	r3, [r7]
   1bea0:	ldmib	r7, {r0, r1, r6}
   1bea4:	ldr	r5, [r7, #16]
   1bea8:	ldr	r4, [r7, #20]
   1beac:	ldr	r2, [r7, #24]
   1beb0:	ldr	r7, [r7, #28]
   1beb4:	stm	sp, {r0, r1, r6}
   1beb8:	str	r5, [sp, #12]
   1bebc:	str	r4, [sp, #16]
   1bec0:	str	r2, [sp, #20]
   1bec4:	str	r7, [sp, #24]
   1bec8:	mov	r0, r8
   1becc:	mov	r1, #1
   1bed0:	mov	r2, ip
   1bed4:	bl	1179c <__fprintf_chk@plt>
   1bed8:	sub	sp, fp, #24
   1bedc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bee0:	push	{r4, sl, fp, lr}
   1bee4:	add	fp, sp, #8
   1bee8:	sub	sp, sp, #8
   1beec:	ldr	ip, [fp, #8]
   1bef0:	mov	lr, #0
   1bef4:	ldr	r4, [ip, lr, lsl #2]
   1bef8:	add	lr, lr, #1
   1befc:	cmp	r4, #0
   1bf00:	bne	1bef4 <__assert_fail@plt+0xa608>
   1bf04:	sub	r4, lr, #1
   1bf08:	str	ip, [sp]
   1bf0c:	str	r4, [sp, #4]
   1bf10:	bl	1bba4 <__assert_fail@plt+0xa2b8>
   1bf14:	sub	sp, fp, #8
   1bf18:	pop	{r4, sl, fp, pc}
   1bf1c:	push	{fp, lr}
   1bf20:	mov	fp, sp
   1bf24:	sub	sp, sp, #48	; 0x30
   1bf28:	ldr	ip, [fp, #8]
   1bf2c:	ldr	lr, [ip]
   1bf30:	cmp	lr, #0
   1bf34:	str	lr, [sp, #8]
   1bf38:	beq	1bfd4 <__assert_fail@plt+0xa6e8>
   1bf3c:	ldr	lr, [ip, #4]
   1bf40:	cmp	lr, #0
   1bf44:	str	lr, [sp, #12]
   1bf48:	beq	1bfdc <__assert_fail@plt+0xa6f0>
   1bf4c:	ldr	lr, [ip, #8]
   1bf50:	cmp	lr, #0
   1bf54:	str	lr, [sp, #16]
   1bf58:	beq	1bfe4 <__assert_fail@plt+0xa6f8>
   1bf5c:	ldr	lr, [ip, #12]
   1bf60:	cmp	lr, #0
   1bf64:	str	lr, [sp, #20]
   1bf68:	beq	1bfec <__assert_fail@plt+0xa700>
   1bf6c:	ldr	lr, [ip, #16]
   1bf70:	cmp	lr, #0
   1bf74:	str	lr, [sp, #24]
   1bf78:	beq	1bff4 <__assert_fail@plt+0xa708>
   1bf7c:	ldr	lr, [ip, #20]
   1bf80:	cmp	lr, #0
   1bf84:	str	lr, [sp, #28]
   1bf88:	beq	1bffc <__assert_fail@plt+0xa710>
   1bf8c:	ldr	lr, [ip, #24]
   1bf90:	cmp	lr, #0
   1bf94:	str	lr, [sp, #32]
   1bf98:	beq	1c004 <__assert_fail@plt+0xa718>
   1bf9c:	ldr	lr, [ip, #28]
   1bfa0:	cmp	lr, #0
   1bfa4:	str	lr, [sp, #36]	; 0x24
   1bfa8:	beq	1c00c <__assert_fail@plt+0xa720>
   1bfac:	ldr	lr, [ip, #32]
   1bfb0:	cmp	lr, #0
   1bfb4:	str	lr, [sp, #40]	; 0x28
   1bfb8:	beq	1c014 <__assert_fail@plt+0xa728>
   1bfbc:	ldr	lr, [ip, #36]	; 0x24
   1bfc0:	mov	ip, #10
   1bfc4:	cmp	lr, #0
   1bfc8:	str	lr, [sp, #44]	; 0x2c
   1bfcc:	movweq	ip, #9
   1bfd0:	b	1c018 <__assert_fail@plt+0xa72c>
   1bfd4:	mov	ip, #0
   1bfd8:	b	1c018 <__assert_fail@plt+0xa72c>
   1bfdc:	mov	ip, #1
   1bfe0:	b	1c018 <__assert_fail@plt+0xa72c>
   1bfe4:	mov	ip, #2
   1bfe8:	b	1c018 <__assert_fail@plt+0xa72c>
   1bfec:	mov	ip, #3
   1bff0:	b	1c018 <__assert_fail@plt+0xa72c>
   1bff4:	mov	ip, #4
   1bff8:	b	1c018 <__assert_fail@plt+0xa72c>
   1bffc:	mov	ip, #5
   1c000:	b	1c018 <__assert_fail@plt+0xa72c>
   1c004:	mov	ip, #6
   1c008:	b	1c018 <__assert_fail@plt+0xa72c>
   1c00c:	mov	ip, #7
   1c010:	b	1c018 <__assert_fail@plt+0xa72c>
   1c014:	mov	ip, #8
   1c018:	add	lr, sp, #8
   1c01c:	str	ip, [sp, #4]
   1c020:	str	lr, [sp]
   1c024:	bl	1bba4 <__assert_fail@plt+0xa2b8>
   1c028:	mov	sp, fp
   1c02c:	pop	{fp, pc}
   1c030:	push	{fp, lr}
   1c034:	mov	fp, sp
   1c038:	sub	sp, sp, #56	; 0x38
   1c03c:	add	ip, fp, #8
   1c040:	str	ip, [sp, #12]
   1c044:	ldr	lr, [fp, #8]
   1c048:	cmp	lr, #0
   1c04c:	str	lr, [sp, #16]
   1c050:	beq	1c0ec <__assert_fail@plt+0xa800>
   1c054:	ldr	lr, [ip, #4]
   1c058:	cmp	lr, #0
   1c05c:	str	lr, [sp, #20]
   1c060:	beq	1c0f4 <__assert_fail@plt+0xa808>
   1c064:	ldr	lr, [ip, #8]
   1c068:	cmp	lr, #0
   1c06c:	str	lr, [sp, #24]
   1c070:	beq	1c0fc <__assert_fail@plt+0xa810>
   1c074:	ldr	lr, [ip, #12]
   1c078:	cmp	lr, #0
   1c07c:	str	lr, [sp, #28]
   1c080:	beq	1c104 <__assert_fail@plt+0xa818>
   1c084:	ldr	lr, [ip, #16]
   1c088:	cmp	lr, #0
   1c08c:	str	lr, [sp, #32]
   1c090:	beq	1c10c <__assert_fail@plt+0xa820>
   1c094:	ldr	lr, [ip, #20]
   1c098:	cmp	lr, #0
   1c09c:	str	lr, [sp, #36]	; 0x24
   1c0a0:	beq	1c114 <__assert_fail@plt+0xa828>
   1c0a4:	ldr	lr, [ip, #24]
   1c0a8:	cmp	lr, #0
   1c0ac:	str	lr, [sp, #40]	; 0x28
   1c0b0:	beq	1c11c <__assert_fail@plt+0xa830>
   1c0b4:	ldr	lr, [ip, #28]
   1c0b8:	cmp	lr, #0
   1c0bc:	str	lr, [sp, #44]	; 0x2c
   1c0c0:	beq	1c124 <__assert_fail@plt+0xa838>
   1c0c4:	ldr	lr, [ip, #32]
   1c0c8:	cmp	lr, #0
   1c0cc:	str	lr, [sp, #48]	; 0x30
   1c0d0:	beq	1c12c <__assert_fail@plt+0xa840>
   1c0d4:	ldr	lr, [ip, #36]	; 0x24
   1c0d8:	mov	ip, #10
   1c0dc:	cmp	lr, #0
   1c0e0:	str	lr, [sp, #52]	; 0x34
   1c0e4:	movweq	ip, #9
   1c0e8:	b	1c130 <__assert_fail@plt+0xa844>
   1c0ec:	mov	ip, #0
   1c0f0:	b	1c130 <__assert_fail@plt+0xa844>
   1c0f4:	mov	ip, #1
   1c0f8:	b	1c130 <__assert_fail@plt+0xa844>
   1c0fc:	mov	ip, #2
   1c100:	b	1c130 <__assert_fail@plt+0xa844>
   1c104:	mov	ip, #3
   1c108:	b	1c130 <__assert_fail@plt+0xa844>
   1c10c:	mov	ip, #4
   1c110:	b	1c130 <__assert_fail@plt+0xa844>
   1c114:	mov	ip, #5
   1c118:	b	1c130 <__assert_fail@plt+0xa844>
   1c11c:	mov	ip, #6
   1c120:	b	1c130 <__assert_fail@plt+0xa844>
   1c124:	mov	ip, #7
   1c128:	b	1c130 <__assert_fail@plt+0xa844>
   1c12c:	mov	ip, #8
   1c130:	add	lr, sp, #16
   1c134:	str	ip, [sp, #4]
   1c138:	str	lr, [sp]
   1c13c:	bl	1bba4 <__assert_fail@plt+0xa2b8>
   1c140:	mov	sp, fp
   1c144:	pop	{fp, pc}
   1c148:	push	{fp, lr}
   1c14c:	mov	fp, sp
   1c150:	movw	r0, #9012	; 0x2334
   1c154:	movt	r0, #3
   1c158:	ldr	r1, [r0]
   1c15c:	movw	r0, #902	; 0x386
   1c160:	movt	r0, #2
   1c164:	bl	114f0 <fputs_unlocked@plt>
   1c168:	movw	r1, #3547	; 0xddb
   1c16c:	mov	r0, #0
   1c170:	mov	r2, #5
   1c174:	movt	r1, #2
   1c178:	bl	115b0 <dcgettext@plt>
   1c17c:	movw	r2, #3567	; 0xdef
   1c180:	mov	r1, r0
   1c184:	mov	r0, #1
   1c188:	movt	r2, #2
   1c18c:	bl	11778 <__printf_chk@plt>
   1c190:	movw	r1, #3589	; 0xe05
   1c194:	mov	r0, #0
   1c198:	mov	r2, #5
   1c19c:	movt	r1, #2
   1c1a0:	bl	115b0 <dcgettext@plt>
   1c1a4:	movw	r2, #65399	; 0xff77
   1c1a8:	movw	r3, #711	; 0x2c7
   1c1ac:	mov	r1, r0
   1c1b0:	mov	r0, #1
   1c1b4:	movt	r2, #1
   1c1b8:	movt	r3, #2
   1c1bc:	bl	11778 <__printf_chk@plt>
   1c1c0:	movw	r1, #3609	; 0xe19
   1c1c4:	mov	r0, #0
   1c1c8:	mov	r2, #5
   1c1cc:	movt	r1, #2
   1c1d0:	bl	115b0 <dcgettext@plt>
   1c1d4:	movw	r2, #3648	; 0xe40
   1c1d8:	mov	r1, r0
   1c1dc:	mov	r0, #1
   1c1e0:	movt	r2, #2
   1c1e4:	pop	{fp, lr}
   1c1e8:	b	11778 <__printf_chk@plt>
   1c1ec:	push	{r4, r5, r6, sl, fp, lr}
   1c1f0:	add	fp, sp, #16
   1c1f4:	mov	r4, r2
   1c1f8:	mov	r5, r1
   1c1fc:	mov	r6, r0
   1c200:	bl	1ef08 <__assert_fail@plt+0xd61c>
   1c204:	cmp	r0, #0
   1c208:	popne	{r4, r5, r6, sl, fp, pc}
   1c20c:	cmp	r6, #0
   1c210:	beq	1c224 <__assert_fail@plt+0xa938>
   1c214:	cmp	r5, #0
   1c218:	cmpne	r4, #0
   1c21c:	bne	1c224 <__assert_fail@plt+0xa938>
   1c220:	pop	{r4, r5, r6, sl, fp, pc}
   1c224:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c228:	push	{r4, r5, r6, sl, fp, lr}
   1c22c:	add	fp, sp, #16
   1c230:	mov	r4, r2
   1c234:	mov	r5, r1
   1c238:	mov	r6, r0
   1c23c:	bl	1ef08 <__assert_fail@plt+0xd61c>
   1c240:	cmp	r0, #0
   1c244:	popne	{r4, r5, r6, sl, fp, pc}
   1c248:	cmp	r6, #0
   1c24c:	beq	1c260 <__assert_fail@plt+0xa974>
   1c250:	cmp	r5, #0
   1c254:	cmpne	r4, #0
   1c258:	bne	1c260 <__assert_fail@plt+0xa974>
   1c25c:	pop	{r4, r5, r6, sl, fp, pc}
   1c260:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c264:	push	{fp, lr}
   1c268:	mov	fp, sp
   1c26c:	bl	1d610 <__assert_fail@plt+0xbd24>
   1c270:	cmp	r0, #0
   1c274:	popne	{fp, pc}
   1c278:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c27c:	push	{fp, lr}
   1c280:	mov	fp, sp
   1c284:	bl	1d610 <__assert_fail@plt+0xbd24>
   1c288:	cmp	r0, #0
   1c28c:	popne	{fp, pc}
   1c290:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c294:	push	{fp, lr}
   1c298:	mov	fp, sp
   1c29c:	bl	1d610 <__assert_fail@plt+0xbd24>
   1c2a0:	cmp	r0, #0
   1c2a4:	popne	{fp, pc}
   1c2a8:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c2ac:	push	{r4, r5, fp, lr}
   1c2b0:	add	fp, sp, #8
   1c2b4:	mov	r4, r1
   1c2b8:	mov	r5, r0
   1c2bc:	bl	1d640 <__assert_fail@plt+0xbd54>
   1c2c0:	cmp	r0, #0
   1c2c4:	popne	{r4, r5, fp, pc}
   1c2c8:	cmp	r5, #0
   1c2cc:	beq	1c2dc <__assert_fail@plt+0xa9f0>
   1c2d0:	cmp	r4, #0
   1c2d4:	bne	1c2dc <__assert_fail@plt+0xa9f0>
   1c2d8:	pop	{r4, r5, fp, pc}
   1c2dc:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c2e0:	push	{fp, lr}
   1c2e4:	mov	fp, sp
   1c2e8:	cmp	r1, #0
   1c2ec:	orreq	r1, r1, #1
   1c2f0:	bl	1d640 <__assert_fail@plt+0xbd54>
   1c2f4:	cmp	r0, #0
   1c2f8:	popne	{fp, pc}
   1c2fc:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c300:	push	{fp, lr}
   1c304:	mov	fp, sp
   1c308:	clz	r3, r2
   1c30c:	lsr	ip, r3, #5
   1c310:	clz	r3, r1
   1c314:	lsr	r3, r3, #5
   1c318:	orrs	r3, r3, ip
   1c31c:	movwne	r1, #1
   1c320:	movwne	r2, #1
   1c324:	bl	1ef08 <__assert_fail@plt+0xd61c>
   1c328:	cmp	r0, #0
   1c32c:	popne	{fp, pc}
   1c330:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c334:	push	{fp, lr}
   1c338:	mov	fp, sp
   1c33c:	mov	r2, r1
   1c340:	mov	r1, r0
   1c344:	mov	r0, #0
   1c348:	bl	1ef08 <__assert_fail@plt+0xd61c>
   1c34c:	cmp	r0, #0
   1c350:	popne	{fp, pc}
   1c354:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c358:	push	{fp, lr}
   1c35c:	mov	fp, sp
   1c360:	mov	r2, r1
   1c364:	mov	r1, r0
   1c368:	clz	r0, r2
   1c36c:	clz	r3, r1
   1c370:	lsr	r0, r0, #5
   1c374:	lsr	r3, r3, #5
   1c378:	orrs	r0, r3, r0
   1c37c:	movwne	r1, #1
   1c380:	movwne	r2, #1
   1c384:	mov	r0, #0
   1c388:	bl	1ef08 <__assert_fail@plt+0xd61c>
   1c38c:	cmp	r0, #0
   1c390:	popne	{fp, pc}
   1c394:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c398:	push	{r4, r5, r6, sl, fp, lr}
   1c39c:	add	fp, sp, #16
   1c3a0:	ldr	r5, [r1]
   1c3a4:	mov	r4, r1
   1c3a8:	mov	r6, r0
   1c3ac:	cmp	r0, #0
   1c3b0:	beq	1c3c8 <__assert_fail@plt+0xaadc>
   1c3b4:	mov	r0, #1
   1c3b8:	add	r0, r0, r5, lsr #1
   1c3bc:	adds	r5, r5, r0
   1c3c0:	bcc	1c3d0 <__assert_fail@plt+0xaae4>
   1c3c4:	b	1c40c <__assert_fail@plt+0xab20>
   1c3c8:	cmp	r5, #0
   1c3cc:	movweq	r5, #64	; 0x40
   1c3d0:	mov	r0, r6
   1c3d4:	mov	r1, r5
   1c3d8:	mov	r2, #1
   1c3dc:	bl	1ef08 <__assert_fail@plt+0xd61c>
   1c3e0:	cmp	r5, #0
   1c3e4:	mov	r1, r5
   1c3e8:	movwne	r1, #1
   1c3ec:	cmp	r0, #0
   1c3f0:	bne	1c404 <__assert_fail@plt+0xab18>
   1c3f4:	clz	r2, r6
   1c3f8:	lsr	r2, r2, #5
   1c3fc:	orrs	r1, r2, r1
   1c400:	bne	1c40c <__assert_fail@plt+0xab20>
   1c404:	str	r5, [r4]
   1c408:	pop	{r4, r5, r6, sl, fp, pc}
   1c40c:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c410:	push	{r4, r5, r6, r7, fp, lr}
   1c414:	add	fp, sp, #16
   1c418:	ldr	r5, [r1]
   1c41c:	mov	r6, r2
   1c420:	mov	r4, r1
   1c424:	mov	r7, r0
   1c428:	cmp	r0, #0
   1c42c:	beq	1c444 <__assert_fail@plt+0xab58>
   1c430:	mov	r0, #1
   1c434:	add	r0, r0, r5, lsr #1
   1c438:	adds	r5, r5, r0
   1c43c:	bcc	1c45c <__assert_fail@plt+0xab70>
   1c440:	b	1c490 <__assert_fail@plt+0xaba4>
   1c444:	cmp	r5, #0
   1c448:	bne	1c45c <__assert_fail@plt+0xab70>
   1c44c:	mov	r0, #64	; 0x40
   1c450:	cmp	r6, #64	; 0x40
   1c454:	udiv	r5, r0, r6
   1c458:	addhi	r5, r5, #1
   1c45c:	mov	r0, r7
   1c460:	mov	r1, r5
   1c464:	mov	r2, r6
   1c468:	bl	1ef08 <__assert_fail@plt+0xd61c>
   1c46c:	cmp	r0, #0
   1c470:	bne	1c488 <__assert_fail@plt+0xab9c>
   1c474:	cmp	r7, #0
   1c478:	beq	1c490 <__assert_fail@plt+0xaba4>
   1c47c:	cmp	r6, #0
   1c480:	cmpne	r5, #0
   1c484:	bne	1c490 <__assert_fail@plt+0xaba4>
   1c488:	str	r5, [r4]
   1c48c:	pop	{r4, r5, r6, r7, fp, pc}
   1c490:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c494:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c498:	add	fp, sp, #24
   1c49c:	mov	r8, r1
   1c4a0:	ldr	r1, [r1]
   1c4a4:	mov	r5, r0
   1c4a8:	add	r0, r1, r1, asr #1
   1c4ac:	cmp	r0, r1
   1c4b0:	mvnvs	r0, #-2147483648	; 0x80000000
   1c4b4:	cmp	r0, r3
   1c4b8:	mov	r7, r0
   1c4bc:	movgt	r7, r3
   1c4c0:	cmn	r3, #1
   1c4c4:	movle	r7, r0
   1c4c8:	ldr	r0, [fp, #8]
   1c4cc:	cmn	r0, #1
   1c4d0:	ble	1c4f8 <__assert_fail@plt+0xac0c>
   1c4d4:	cmp	r0, #0
   1c4d8:	beq	1c54c <__assert_fail@plt+0xac60>
   1c4dc:	cmn	r7, #1
   1c4e0:	ble	1c520 <__assert_fail@plt+0xac34>
   1c4e4:	mvn	r4, #-2147483648	; 0x80000000
   1c4e8:	udiv	r6, r4, r0
   1c4ec:	cmp	r6, r7
   1c4f0:	bge	1c54c <__assert_fail@plt+0xac60>
   1c4f4:	b	1c55c <__assert_fail@plt+0xac70>
   1c4f8:	cmn	r7, #1
   1c4fc:	ble	1c53c <__assert_fail@plt+0xac50>
   1c500:	cmn	r0, #1
   1c504:	beq	1c54c <__assert_fail@plt+0xac60>
   1c508:	mov	r6, #-2147483648	; 0x80000000
   1c50c:	mvn	r4, #-2147483648	; 0x80000000
   1c510:	sdiv	r6, r6, r0
   1c514:	cmp	r6, r7
   1c518:	bge	1c54c <__assert_fail@plt+0xac60>
   1c51c:	b	1c55c <__assert_fail@plt+0xac70>
   1c520:	beq	1c54c <__assert_fail@plt+0xac60>
   1c524:	mov	r6, #-2147483648	; 0x80000000
   1c528:	mvn	r4, #-2147483648	; 0x80000000
   1c52c:	sdiv	r6, r6, r7
   1c530:	cmp	r6, r0
   1c534:	bge	1c54c <__assert_fail@plt+0xac60>
   1c538:	b	1c55c <__assert_fail@plt+0xac70>
   1c53c:	mvn	r4, #-2147483648	; 0x80000000
   1c540:	sdiv	r6, r4, r0
   1c544:	cmp	r7, r6
   1c548:	blt	1c55c <__assert_fail@plt+0xac70>
   1c54c:	mul	r6, r7, r0
   1c550:	mov	r4, #64	; 0x40
   1c554:	cmp	r6, #63	; 0x3f
   1c558:	bgt	1c564 <__assert_fail@plt+0xac78>
   1c55c:	sdiv	r7, r4, r0
   1c560:	mul	r6, r7, r0
   1c564:	cmp	r5, #0
   1c568:	moveq	r4, #0
   1c56c:	streq	r4, [r8]
   1c570:	sub	r4, r7, r1
   1c574:	cmp	r4, r2
   1c578:	bge	1c624 <__assert_fail@plt+0xad38>
   1c57c:	add	r7, r1, r2
   1c580:	mov	r6, #0
   1c584:	mov	r2, #0
   1c588:	cmp	r7, r3
   1c58c:	movwgt	r6, #1
   1c590:	cmn	r3, #1
   1c594:	movwgt	r2, #1
   1c598:	cmp	r7, r1
   1c59c:	bvs	1c658 <__assert_fail@plt+0xad6c>
   1c5a0:	ands	r1, r2, r6
   1c5a4:	bne	1c658 <__assert_fail@plt+0xad6c>
   1c5a8:	cmn	r0, #1
   1c5ac:	ble	1c5d4 <__assert_fail@plt+0xace8>
   1c5b0:	cmp	r0, #0
   1c5b4:	beq	1c620 <__assert_fail@plt+0xad34>
   1c5b8:	cmn	r7, #1
   1c5bc:	ble	1c5f8 <__assert_fail@plt+0xad0c>
   1c5c0:	mvn	r1, #-2147483648	; 0x80000000
   1c5c4:	udiv	r1, r1, r0
   1c5c8:	cmp	r1, r7
   1c5cc:	bge	1c620 <__assert_fail@plt+0xad34>
   1c5d0:	b	1c658 <__assert_fail@plt+0xad6c>
   1c5d4:	cmn	r7, #1
   1c5d8:	ble	1c610 <__assert_fail@plt+0xad24>
   1c5dc:	cmn	r0, #1
   1c5e0:	beq	1c620 <__assert_fail@plt+0xad34>
   1c5e4:	mov	r1, #-2147483648	; 0x80000000
   1c5e8:	sdiv	r1, r1, r0
   1c5ec:	cmp	r1, r7
   1c5f0:	bge	1c620 <__assert_fail@plt+0xad34>
   1c5f4:	b	1c658 <__assert_fail@plt+0xad6c>
   1c5f8:	beq	1c620 <__assert_fail@plt+0xad34>
   1c5fc:	mov	r1, #-2147483648	; 0x80000000
   1c600:	sdiv	r1, r1, r7
   1c604:	cmp	r1, r0
   1c608:	bge	1c620 <__assert_fail@plt+0xad34>
   1c60c:	b	1c658 <__assert_fail@plt+0xad6c>
   1c610:	mvn	r1, #-2147483648	; 0x80000000
   1c614:	sdiv	r1, r1, r0
   1c618:	cmp	r7, r1
   1c61c:	blt	1c658 <__assert_fail@plt+0xad6c>
   1c620:	mul	r6, r7, r0
   1c624:	mov	r0, r5
   1c628:	mov	r1, r6
   1c62c:	bl	1d640 <__assert_fail@plt+0xbd54>
   1c630:	cmp	r6, #0
   1c634:	movwne	r6, #1
   1c638:	cmp	r0, #0
   1c63c:	bne	1c650 <__assert_fail@plt+0xad64>
   1c640:	clz	r1, r5
   1c644:	lsr	r1, r1, #5
   1c648:	orrs	r1, r1, r6
   1c64c:	bne	1c658 <__assert_fail@plt+0xad6c>
   1c650:	str	r7, [r8]
   1c654:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c658:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c65c:	push	{fp, lr}
   1c660:	mov	fp, sp
   1c664:	mov	r1, #1
   1c668:	bl	1d5bc <__assert_fail@plt+0xbcd0>
   1c66c:	cmp	r0, #0
   1c670:	popne	{fp, pc}
   1c674:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c678:	push	{fp, lr}
   1c67c:	mov	fp, sp
   1c680:	bl	1d5bc <__assert_fail@plt+0xbcd0>
   1c684:	cmp	r0, #0
   1c688:	popne	{fp, pc}
   1c68c:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c690:	push	{fp, lr}
   1c694:	mov	fp, sp
   1c698:	mov	r1, #1
   1c69c:	bl	1d5bc <__assert_fail@plt+0xbcd0>
   1c6a0:	cmp	r0, #0
   1c6a4:	popne	{fp, pc}
   1c6a8:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c6ac:	push	{fp, lr}
   1c6b0:	mov	fp, sp
   1c6b4:	bl	1d5bc <__assert_fail@plt+0xbcd0>
   1c6b8:	cmp	r0, #0
   1c6bc:	popne	{fp, pc}
   1c6c0:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c6c4:	push	{r4, r5, r6, sl, fp, lr}
   1c6c8:	add	fp, sp, #16
   1c6cc:	mov	r5, r0
   1c6d0:	mov	r0, r1
   1c6d4:	mov	r4, r1
   1c6d8:	bl	1d610 <__assert_fail@plt+0xbd24>
   1c6dc:	cmp	r0, #0
   1c6e0:	beq	1c6fc <__assert_fail@plt+0xae10>
   1c6e4:	mov	r1, r5
   1c6e8:	mov	r2, r4
   1c6ec:	mov	r6, r0
   1c6f0:	bl	11574 <memcpy@plt>
   1c6f4:	mov	r0, r6
   1c6f8:	pop	{r4, r5, r6, sl, fp, pc}
   1c6fc:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c700:	push	{r4, r5, r6, sl, fp, lr}
   1c704:	add	fp, sp, #16
   1c708:	mov	r5, r0
   1c70c:	mov	r0, r1
   1c710:	mov	r4, r1
   1c714:	bl	1d610 <__assert_fail@plt+0xbd24>
   1c718:	cmp	r0, #0
   1c71c:	beq	1c738 <__assert_fail@plt+0xae4c>
   1c720:	mov	r1, r5
   1c724:	mov	r2, r4
   1c728:	mov	r6, r0
   1c72c:	bl	11574 <memcpy@plt>
   1c730:	mov	r0, r6
   1c734:	pop	{r4, r5, r6, sl, fp, pc}
   1c738:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c73c:	push	{r4, r5, r6, sl, fp, lr}
   1c740:	add	fp, sp, #16
   1c744:	mov	r5, r0
   1c748:	add	r0, r1, #1
   1c74c:	mov	r4, r1
   1c750:	bl	1d610 <__assert_fail@plt+0xbd24>
   1c754:	cmp	r0, #0
   1c758:	beq	1c780 <__assert_fail@plt+0xae94>
   1c75c:	mov	r6, r0
   1c760:	mov	r0, #0
   1c764:	mov	r1, r5
   1c768:	mov	r2, r4
   1c76c:	strb	r0, [r6, r4]
   1c770:	mov	r0, r6
   1c774:	bl	11574 <memcpy@plt>
   1c778:	mov	r0, r6
   1c77c:	pop	{r4, r5, r6, sl, fp, pc}
   1c780:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c784:	push	{r4, r5, r6, sl, fp, lr}
   1c788:	add	fp, sp, #16
   1c78c:	mov	r4, r0
   1c790:	bl	11718 <strlen@plt>
   1c794:	add	r5, r0, #1
   1c798:	mov	r0, r5
   1c79c:	bl	1d610 <__assert_fail@plt+0xbd24>
   1c7a0:	cmp	r0, #0
   1c7a4:	beq	1c7c0 <__assert_fail@plt+0xaed4>
   1c7a8:	mov	r1, r4
   1c7ac:	mov	r2, r5
   1c7b0:	mov	r6, r0
   1c7b4:	bl	11574 <memcpy@plt>
   1c7b8:	mov	r0, r6
   1c7bc:	pop	{r4, r5, r6, sl, fp, pc}
   1c7c0:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c7c4:	push	{fp, lr}
   1c7c8:	mov	fp, sp
   1c7cc:	movw	r0, #8912	; 0x22d0
   1c7d0:	movw	r1, #3724	; 0xe8c
   1c7d4:	mov	r2, #5
   1c7d8:	movt	r0, #3
   1c7dc:	movt	r1, #2
   1c7e0:	ldr	r4, [r0]
   1c7e4:	mov	r0, #0
   1c7e8:	bl	115b0 <dcgettext@plt>
   1c7ec:	movw	r2, #4076	; 0xfec
   1c7f0:	mov	r3, r0
   1c7f4:	mov	r0, r4
   1c7f8:	mov	r1, #0
   1c7fc:	movt	r2, #2
   1c800:	bl	1167c <error@plt>
   1c804:	bl	118bc <abort@plt>
   1c808:	push	{r4, sl, fp, lr}
   1c80c:	add	fp, sp, #8
   1c810:	mov	r0, #0
   1c814:	mov	r1, #0
   1c818:	bl	11700 <getcwd@plt>
   1c81c:	mov	r4, r0
   1c820:	cmp	r0, #0
   1c824:	bne	1c838 <__assert_fail@plt+0xaf4c>
   1c828:	bl	11748 <__errno_location@plt>
   1c82c:	ldr	r0, [r0]
   1c830:	cmp	r0, #12
   1c834:	beq	1c840 <__assert_fail@plt+0xaf54>
   1c838:	mov	r0, r4
   1c83c:	pop	{r4, sl, fp, pc}
   1c840:	bl	1c7c4 <__assert_fail@plt+0xaed8>
   1c844:	push	{fp, lr}
   1c848:	mov	fp, sp
   1c84c:	sub	sp, sp, #8
   1c850:	movw	ip, #8912	; 0x22d0
   1c854:	movt	ip, #3
   1c858:	ldr	ip, [ip]
   1c85c:	str	ip, [sp, #4]
   1c860:	ldr	ip, [fp, #8]
   1c864:	str	ip, [sp]
   1c868:	bl	1c870 <__assert_fail@plt+0xaf84>
   1c86c:	bl	118bc <abort@plt>
   1c870:	push	{r4, r5, r6, r7, fp, lr}
   1c874:	add	fp, sp, #16
   1c878:	sub	sp, sp, #16
   1c87c:	sub	r0, r0, #1
   1c880:	cmp	r0, #4
   1c884:	bcs	1c904 <__assert_fail@plt+0xb018>
   1c888:	mov	r5, r1
   1c88c:	movw	r1, #3840	; 0xf00
   1c890:	ldr	r4, [fp, #12]
   1c894:	ldr	r6, [fp, #8]
   1c898:	movt	r1, #2
   1c89c:	cmn	r5, #1
   1c8a0:	ldr	r1, [r1, r0, lsl #2]
   1c8a4:	ble	1c8b8 <__assert_fail@plt+0xafcc>
   1c8a8:	ldr	r7, [r3, r5, lsl #4]
   1c8ac:	movw	r5, #3741	; 0xe9d
   1c8b0:	movt	r5, #2
   1c8b4:	b	1c8d4 <__assert_fail@plt+0xafe8>
   1c8b8:	mov	r0, #0
   1c8bc:	add	r7, sp, #14
   1c8c0:	strb	r0, [sp, #15]
   1c8c4:	movw	r0, #3741	; 0xe9d
   1c8c8:	strb	r2, [sp, #14]
   1c8cc:	movt	r0, #2
   1c8d0:	sub	r5, r0, r5
   1c8d4:	mov	r0, #0
   1c8d8:	mov	r2, #5
   1c8dc:	bl	115b0 <dcgettext@plt>
   1c8e0:	mov	r2, r0
   1c8e4:	mov	r0, r4
   1c8e8:	mov	r1, #0
   1c8ec:	mov	r3, r5
   1c8f0:	str	r7, [sp]
   1c8f4:	str	r6, [sp, #4]
   1c8f8:	bl	1167c <error@plt>
   1c8fc:	sub	sp, fp, #16
   1c900:	pop	{r4, r5, r6, r7, fp, pc}
   1c904:	bl	118bc <abort@plt>
   1c908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c90c:	add	fp, sp, #28
   1c910:	sub	sp, sp, #44	; 0x2c
   1c914:	cmp	r2, #37	; 0x25
   1c918:	bcs	1d59c <__assert_fail@plt+0xbcb0>
   1c91c:	ldr	sl, [fp, #8]
   1c920:	mov	r6, r2
   1c924:	mov	r7, r1
   1c928:	mov	r4, r0
   1c92c:	str	r3, [sp, #36]	; 0x24
   1c930:	bl	11748 <__errno_location@plt>
   1c934:	mov	r5, r0
   1c938:	mov	r0, #0
   1c93c:	str	r0, [r5]
   1c940:	bl	116f4 <__ctype_b_loc@plt>
   1c944:	ldr	r1, [r0]
   1c948:	mov	r2, r4
   1c94c:	ldrb	r0, [r2], #1
   1c950:	add	r3, r1, r0, lsl #1
   1c954:	ldrb	r3, [r3, #1]
   1c958:	tst	r3, #32
   1c95c:	bne	1c94c <__assert_fail@plt+0xb060>
   1c960:	sub	r9, fp, #32
   1c964:	cmp	r7, #0
   1c968:	mov	r8, #4
   1c96c:	movne	r9, r7
   1c970:	cmp	r0, #45	; 0x2d
   1c974:	beq	1cd34 <__assert_fail@plt+0xb448>
   1c978:	mov	r0, r4
   1c97c:	mov	r1, r9
   1c980:	mov	r2, r6
   1c984:	mov	r3, #0
   1c988:	bl	11580 <__strtoull_internal@plt>
   1c98c:	mov	r7, r1
   1c990:	ldr	r1, [r9]
   1c994:	cmp	r1, r4
   1c998:	beq	1c9d0 <__assert_fail@plt+0xb0e4>
   1c99c:	mov	r6, r0
   1c9a0:	ldr	r0, [r5]
   1c9a4:	cmp	r0, #0
   1c9a8:	beq	1ccec <__assert_fail@plt+0xb400>
   1c9ac:	cmp	r0, #34	; 0x22
   1c9b0:	bne	1cd34 <__assert_fail@plt+0xb448>
   1c9b4:	mov	r8, #1
   1c9b8:	cmp	sl, #0
   1c9bc:	beq	1d588 <__assert_fail@plt+0xbc9c>
   1c9c0:	ldrb	r4, [r1]
   1c9c4:	cmp	r4, #0
   1c9c8:	bne	1ca14 <__assert_fail@plt+0xb128>
   1c9cc:	b	1d588 <__assert_fail@plt+0xbc9c>
   1c9d0:	cmp	sl, #0
   1c9d4:	beq	1cd34 <__assert_fail@plt+0xb448>
   1c9d8:	mov	r5, r1
   1c9dc:	ldrb	r1, [r4]
   1c9e0:	cmp	r1, #0
   1c9e4:	beq	1cd34 <__assert_fail@plt+0xb448>
   1c9e8:	mov	r0, sl
   1c9ec:	bl	11724 <strchr@plt>
   1c9f0:	cmp	r0, #0
   1c9f4:	beq	1cd34 <__assert_fail@plt+0xb448>
   1c9f8:	mov	r1, r5
   1c9fc:	mov	r8, #0
   1ca00:	mov	r6, #1
   1ca04:	mov	r7, #0
   1ca08:	ldrb	r4, [r1]
   1ca0c:	cmp	r4, #0
   1ca10:	beq	1d588 <__assert_fail@plt+0xbc9c>
   1ca14:	str	r1, [sp, #32]
   1ca18:	mov	r0, sl
   1ca1c:	mov	r1, r4
   1ca20:	bl	11724 <strchr@plt>
   1ca24:	cmp	r0, #0
   1ca28:	beq	1cd28 <__assert_fail@plt+0xb43c>
   1ca2c:	sub	r0, r4, #69	; 0x45
   1ca30:	mov	r1, #1
   1ca34:	mov	r3, #0
   1ca38:	mov	r5, #1024	; 0x400
   1ca3c:	cmp	r0, #47	; 0x2f
   1ca40:	str	r1, [sp, #28]
   1ca44:	bhi	1cb48 <__assert_fail@plt+0xb25c>
   1ca48:	add	r1, pc, #0
   1ca4c:	ldr	pc, [r1, r0, lsl #2]
   1ca50:	andeq	ip, r1, r0, lsl fp
   1ca54:	andeq	ip, r1, r8, asr #22
   1ca58:	andeq	ip, r1, r0, lsl fp
   1ca5c:	andeq	ip, r1, r8, asr #22
   1ca60:	andeq	ip, r1, r8, asr #22
   1ca64:	andeq	ip, r1, r8, asr #22
   1ca68:	andeq	ip, r1, r0, lsl fp
   1ca6c:	andeq	ip, r1, r8, asr #22
   1ca70:	andeq	ip, r1, r0, lsl fp
   1ca74:	andeq	ip, r1, r8, asr #22
   1ca78:	andeq	ip, r1, r8, asr #22
   1ca7c:	andeq	ip, r1, r0, lsl fp
   1ca80:	andeq	ip, r1, r8, asr #22
   1ca84:	andeq	ip, r1, r8, asr #22
   1ca88:	andeq	ip, r1, r8, asr #22
   1ca8c:	andeq	ip, r1, r0, lsl fp
   1ca90:	andeq	ip, r1, r8, asr #22
   1ca94:	andeq	ip, r1, r8, asr #22
   1ca98:	andeq	ip, r1, r8, asr #22
   1ca9c:	andeq	ip, r1, r8, asr #22
   1caa0:	andeq	ip, r1, r0, lsl fp
   1caa4:	andeq	ip, r1, r0, lsl fp
   1caa8:	andeq	ip, r1, r8, asr #22
   1caac:	andeq	ip, r1, r8, asr #22
   1cab0:	andeq	ip, r1, r8, asr #22
   1cab4:	andeq	ip, r1, r8, asr #22
   1cab8:	andeq	ip, r1, r8, asr #22
   1cabc:	andeq	ip, r1, r8, asr #22
   1cac0:	andeq	ip, r1, r8, asr #22
   1cac4:	andeq	ip, r1, r8, asr #22
   1cac8:	andeq	ip, r1, r8, asr #22
   1cacc:	andeq	ip, r1, r8, asr #22
   1cad0:	andeq	ip, r1, r8, asr #22
   1cad4:	andeq	ip, r1, r8, asr #22
   1cad8:	andeq	ip, r1, r0, lsl fp
   1cadc:	andeq	ip, r1, r8, asr #22
   1cae0:	andeq	ip, r1, r8, asr #22
   1cae4:	andeq	ip, r1, r8, asr #22
   1cae8:	andeq	ip, r1, r0, lsl fp
   1caec:	andeq	ip, r1, r8, asr #22
   1caf0:	andeq	ip, r1, r0, lsl fp
   1caf4:	andeq	ip, r1, r8, asr #22
   1caf8:	andeq	ip, r1, r8, asr #22
   1cafc:	andeq	ip, r1, r8, asr #22
   1cb00:	andeq	ip, r1, r8, asr #22
   1cb04:	andeq	ip, r1, r8, asr #22
   1cb08:	andeq	ip, r1, r8, asr #22
   1cb0c:	andeq	ip, r1, r0, lsl fp
   1cb10:	mov	r0, sl
   1cb14:	mov	r1, #48	; 0x30
   1cb18:	bl	11724 <strchr@plt>
   1cb1c:	cmp	r0, #0
   1cb20:	beq	1cb44 <__assert_fail@plt+0xb258>
   1cb24:	ldr	r1, [sp, #32]
   1cb28:	ldrb	r0, [r1, #1]
   1cb2c:	cmp	r0, #66	; 0x42
   1cb30:	cmpne	r0, #68	; 0x44
   1cb34:	bne	1ccfc <__assert_fail@plt+0xb410>
   1cb38:	mov	r5, #1000	; 0x3e8
   1cb3c:	mov	r0, #2
   1cb40:	str	r0, [sp, #28]
   1cb44:	mov	r3, #0
   1cb48:	sub	r0, r4, #66	; 0x42
   1cb4c:	cmp	r0, #53	; 0x35
   1cb50:	bhi	1cd28 <__assert_fail@plt+0xb43c>
   1cb54:	add	r1, pc, #0
   1cb58:	ldr	pc, [r1, r0, lsl #2]
   1cb5c:	muleq	r1, r8, r0
   1cb60:	andeq	ip, r1, r8, lsr #26
   1cb64:	andeq	ip, r1, r8, lsr #26
   1cb68:	andeq	sp, r1, r0, asr #1
   1cb6c:	andeq	ip, r1, r8, lsr #26
   1cb70:	andeq	ip, r1, r4, lsr ip
   1cb74:	andeq	ip, r1, r8, lsr #26
   1cb78:	andeq	ip, r1, r8, lsr #26
   1cb7c:	andeq	ip, r1, r8, lsr #26
   1cb80:	andeq	ip, r1, r0, asr #26
   1cb84:	andeq	ip, r1, r8, lsr #26
   1cb88:	andeq	ip, r1, r8, lsl #27
   1cb8c:	andeq	ip, r1, r8, lsr #26
   1cb90:	andeq	ip, r1, r8, lsr #26
   1cb94:	andeq	sp, r1, r4, lsl r2
   1cb98:	andeq	ip, r1, r8, lsr #26
   1cb9c:	andeq	ip, r1, r8, lsr #26
   1cba0:	andeq	ip, r1, r8, lsr #26
   1cba4:	andeq	ip, r1, r4, lsl lr
   1cba8:	andeq	ip, r1, r8, lsr #26
   1cbac:	andeq	ip, r1, r8, lsr #26
   1cbb0:	andeq	ip, r1, r8, lsr #26
   1cbb4:	andeq	ip, r1, r8, lsr #26
   1cbb8:	andeq	sp, r1, ip, lsr r3
   1cbbc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cbc0:	andeq	ip, r1, r8, lsr #26
   1cbc4:	andeq	ip, r1, r8, lsr #26
   1cbc8:	andeq	ip, r1, r8, lsr #26
   1cbcc:	andeq	ip, r1, r8, lsr #26
   1cbd0:	andeq	ip, r1, r8, lsr #26
   1cbd4:	andeq	ip, r1, r8, lsr #26
   1cbd8:	andeq	ip, r1, r8, lsr #26
   1cbdc:	andeq	sp, r1, r0, lsl r5
   1cbe0:	andeq	sp, r1, r8, ror #10
   1cbe4:	andeq	ip, r1, r8, lsr #26
   1cbe8:	andeq	ip, r1, r8, lsr #26
   1cbec:	andeq	ip, r1, r8, lsr #26
   1cbf0:	andeq	ip, r1, r4, lsr ip
   1cbf4:	andeq	ip, r1, r8, lsr #26
   1cbf8:	andeq	ip, r1, r8, lsr #26
   1cbfc:	andeq	ip, r1, r8, lsr #26
   1cc00:	andeq	ip, r1, r0, asr #26
   1cc04:	andeq	ip, r1, r8, lsr #26
   1cc08:	andeq	ip, r1, r8, lsl #27
   1cc0c:	andeq	ip, r1, r8, lsr #26
   1cc10:	andeq	ip, r1, r8, lsr #26
   1cc14:	andeq	ip, r1, r8, lsr #26
   1cc18:	andeq	ip, r1, r8, lsr #26
   1cc1c:	andeq	ip, r1, r8, lsr #26
   1cc20:	andeq	ip, r1, r8, lsr #26
   1cc24:	andeq	ip, r1, r4, lsl lr
   1cc28:	andeq	ip, r1, r8, lsr #26
   1cc2c:	andeq	ip, r1, r8, lsr #26
   1cc30:	andeq	sp, r1, r4, asr #10
   1cc34:	mvn	r0, #0
   1cc38:	mvn	r1, #0
   1cc3c:	mov	r2, r5
   1cc40:	mov	sl, r3
   1cc44:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   1cc48:	subs	r3, r0, r6
   1cc4c:	mov	lr, #0
   1cc50:	umull	r4, r2, r6, r5
   1cc54:	str	r1, [sp, #20]
   1cc58:	sbcs	r3, r1, r7
   1cc5c:	mla	ip, r6, sl, r2
   1cc60:	mov	r2, r1
   1cc64:	movwcc	lr, #1
   1cc68:	mla	r7, r7, r5, ip
   1cc6c:	mov	r2, #0
   1cc70:	cmp	lr, #0
   1cc74:	mvnne	r4, #0
   1cc78:	mvnne	r7, #0
   1cc7c:	subs	r6, r0, r4
   1cc80:	sbcs	r6, r1, r7
   1cc84:	movwcc	r2, #1
   1cc88:	umull	r3, r6, r4, r5
   1cc8c:	cmp	r2, #0
   1cc90:	str	r6, [sp, #16]
   1cc94:	mvnne	r3, #0
   1cc98:	cmp	r2, #0
   1cc9c:	umull	r6, ip, r3, r5
   1cca0:	mla	r1, r3, sl, ip
   1cca4:	ldr	ip, [sp, #16]
   1cca8:	str	r1, [sp, #12]
   1ccac:	mla	r4, r4, sl, ip
   1ccb0:	mla	r4, r7, r5, r4
   1ccb4:	ldr	r7, [sp, #12]
   1ccb8:	mvnne	r4, #0
   1ccbc:	subs	r0, r0, r3
   1ccc0:	ldr	r0, [sp, #20]
   1ccc4:	mla	r7, r4, r5, r7
   1ccc8:	sbcs	r0, r0, r4
   1cccc:	mov	r0, #0
   1ccd0:	movwcc	r0, #1
   1ccd4:	cmp	r0, #0
   1ccd8:	mov	r1, r0
   1ccdc:	orr	r0, lr, r2
   1cce0:	mvnne	r7, #0
   1cce4:	mvnne	r6, #0
   1cce8:	b	1d334 <__assert_fail@plt+0xba48>
   1ccec:	mov	r8, r0
   1ccf0:	cmp	sl, #0
   1ccf4:	bne	1c9c0 <__assert_fail@plt+0xb0d4>
   1ccf8:	b	1d588 <__assert_fail@plt+0xbc9c>
   1ccfc:	cmp	r0, #105	; 0x69
   1cd00:	mov	r3, #0
   1cd04:	bne	1cb48 <__assert_fail@plt+0xb25c>
   1cd08:	ldrb	r0, [r1, #2]
   1cd0c:	mov	r1, #1
   1cd10:	cmp	r0, #66	; 0x42
   1cd14:	movweq	r1, #3
   1cd18:	str	r1, [sp, #28]
   1cd1c:	sub	r0, r4, #66	; 0x42
   1cd20:	cmp	r0, #53	; 0x35
   1cd24:	bls	1cb54 <__assert_fail@plt+0xb268>
   1cd28:	ldr	r0, [sp, #36]	; 0x24
   1cd2c:	orr	r8, r8, #2
   1cd30:	strd	r6, [r0]
   1cd34:	mov	r0, r8
   1cd38:	sub	sp, fp, #28
   1cd3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd40:	mvn	r0, #0
   1cd44:	mvn	r1, #0
   1cd48:	mov	r2, r5
   1cd4c:	mov	r4, r3
   1cd50:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   1cd54:	subs	r0, r0, r6
   1cd58:	mov	r2, #0
   1cd5c:	sbcs	r0, r1, r7
   1cd60:	movwcc	r2, #1
   1cd64:	umull	r0, r1, r6, r5
   1cd68:	mla	r1, r6, r4, r1
   1cd6c:	cmp	r2, #0
   1cd70:	mov	r3, r2
   1cd74:	mla	r7, r7, r5, r1
   1cd78:	mvnne	r0, #0
   1cd7c:	mvnne	r7, #0
   1cd80:	mov	r6, r0
   1cd84:	b	1d568 <__assert_fail@plt+0xbc7c>
   1cd88:	mvn	r0, #0
   1cd8c:	mvn	r1, #0
   1cd90:	mov	r2, r5
   1cd94:	str	r3, [sp, #24]
   1cd98:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   1cd9c:	subs	r3, r0, r6
   1cda0:	mov	ip, r0
   1cda4:	umull	r4, r0, r6, r5
   1cda8:	mov	sl, #0
   1cdac:	sbcs	r3, r1, r7
   1cdb0:	str	r0, [sp, #20]
   1cdb4:	ldr	r0, [sp, #24]
   1cdb8:	mov	r3, #0
   1cdbc:	movwcc	r3, #1
   1cdc0:	cmp	r3, #0
   1cdc4:	mvnne	r4, #0
   1cdc8:	cmp	r3, #0
   1cdcc:	umull	lr, r2, r4, r5
   1cdd0:	mla	r2, r4, r0, r2
   1cdd4:	str	r2, [sp, #16]
   1cdd8:	ldr	r2, [sp, #20]
   1cddc:	mla	r6, r6, r0, r2
   1cde0:	ldr	r0, [sp, #16]
   1cde4:	mla	r6, r7, r5, r6
   1cde8:	mvnne	r6, #0
   1cdec:	mla	r7, r6, r5, r0
   1cdf0:	subs	r0, ip, r4
   1cdf4:	sbcs	r0, r1, r6
   1cdf8:	movwcc	sl, #1
   1cdfc:	cmp	sl, #0
   1ce00:	orr	r3, r3, sl
   1ce04:	mvnne	lr, #0
   1ce08:	mvnne	r7, #0
   1ce0c:	mov	r6, lr
   1ce10:	b	1d568 <__assert_fail@plt+0xbc7c>
   1ce14:	mvn	r0, #0
   1ce18:	mvn	r1, #0
   1ce1c:	mov	r2, r5
   1ce20:	mov	sl, r3
   1ce24:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   1ce28:	subs	r3, r0, r6
   1ce2c:	mov	ip, r1
   1ce30:	umull	r2, lr, r6, r5
   1ce34:	str	r0, [sp, #20]
   1ce38:	sbcs	r3, r1, r7
   1ce3c:	mov	r1, #0
   1ce40:	mla	r6, r6, sl, lr
   1ce44:	mov	lr, #0
   1ce48:	str	ip, [sp, #16]
   1ce4c:	movwcc	r1, #1
   1ce50:	mla	r7, r7, r5, r6
   1ce54:	cmp	r1, #0
   1ce58:	mvnne	r2, #0
   1ce5c:	cmp	r1, #0
   1ce60:	umull	r3, r4, r2, r5
   1ce64:	mvnne	r7, #0
   1ce68:	mla	r4, r2, sl, r4
   1ce6c:	subs	r2, r0, r2
   1ce70:	sbcs	r2, ip, r7
   1ce74:	mla	r4, r7, r5, r4
   1ce78:	movwcc	lr, #1
   1ce7c:	mov	r2, #0
   1ce80:	cmp	lr, #0
   1ce84:	mvnne	r3, #0
   1ce88:	mvnne	r4, #0
   1ce8c:	subs	r7, r0, r3
   1ce90:	mov	r0, r5
   1ce94:	sbcs	r7, ip, r4
   1ce98:	movwcc	r2, #1
   1ce9c:	umull	r5, r7, r3, r5
   1cea0:	cmp	r2, #0
   1cea4:	mla	r3, r3, sl, r7
   1cea8:	mvnne	r5, #0
   1ceac:	mla	r3, r4, r0, r3
   1ceb0:	cmp	r2, #0
   1ceb4:	umull	r6, ip, r5, r0
   1ceb8:	mvnne	r3, #0
   1cebc:	mla	ip, r5, sl, ip
   1cec0:	mla	r7, r3, r0, ip
   1cec4:	ldr	r0, [sp, #20]
   1cec8:	subs	r0, r0, r5
   1cecc:	ldr	r0, [sp, #16]
   1ced0:	sbcs	r0, r0, r3
   1ced4:	mov	r0, #0
   1ced8:	movwcc	r0, #1
   1cedc:	cmp	r0, #0
   1cee0:	mov	r3, r0
   1cee4:	orr	r0, r1, lr
   1cee8:	orr	r0, r0, r2
   1ceec:	mvnne	r7, #0
   1cef0:	mvnne	r6, #0
   1cef4:	orr	r3, r0, r3
   1cef8:	b	1d568 <__assert_fail@plt+0xbc7c>
   1cefc:	mvn	r0, #0
   1cf00:	mvn	r1, #0
   1cf04:	mov	r2, r5
   1cf08:	mov	r4, r3
   1cf0c:	str	r3, [sp, #24]
   1cf10:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   1cf14:	umull	r3, r2, r6, r5
   1cf18:	mla	r2, r6, r4, r2
   1cf1c:	subs	r6, r0, r6
   1cf20:	sbcs	r6, r1, r7
   1cf24:	mla	r2, r7, r5, r2
   1cf28:	mov	r7, #0
   1cf2c:	mov	r6, #0
   1cf30:	movwcc	r6, #1
   1cf34:	cmp	r6, #0
   1cf38:	str	r6, [sp, #20]
   1cf3c:	mvnne	r3, #0
   1cf40:	mvnne	r2, #0
   1cf44:	subs	r4, r0, r3
   1cf48:	umull	r6, ip, r3, r5
   1cf4c:	sbcs	r4, r1, r2
   1cf50:	ldr	r4, [sp, #24]
   1cf54:	movwcc	r7, #1
   1cf58:	cmp	r7, #0
   1cf5c:	mov	lr, r7
   1cf60:	str	r7, [sp, #16]
   1cf64:	mvnne	r6, #0
   1cf68:	cmp	lr, #0
   1cf6c:	mov	lr, #0
   1cf70:	umull	sl, r7, r6, r5
   1cf74:	mla	r3, r3, r4, ip
   1cf78:	mla	r7, r6, r4, r7
   1cf7c:	mov	r4, r0
   1cf80:	mla	r2, r2, r5, r3
   1cf84:	mvnne	r2, #0
   1cf88:	subs	r3, r0, r6
   1cf8c:	mov	r0, #0
   1cf90:	mla	r7, r2, r5, r7
   1cf94:	sbcs	r2, r1, r2
   1cf98:	mov	r3, r4
   1cf9c:	movwcc	r0, #1
   1cfa0:	str	r3, [sp, #4]
   1cfa4:	cmp	r0, #0
   1cfa8:	str	r0, [sp, #12]
   1cfac:	mov	r0, r1
   1cfb0:	mvnne	sl, #0
   1cfb4:	mvnne	r7, #0
   1cfb8:	str	r0, [sp, #8]
   1cfbc:	subs	r2, r4, sl
   1cfc0:	ldr	r4, [sp, #24]
   1cfc4:	sbcs	r2, r1, r7
   1cfc8:	movwcc	lr, #1
   1cfcc:	umull	r6, r2, sl, r5
   1cfd0:	cmp	lr, #0
   1cfd4:	mvnne	r6, #0
   1cfd8:	mla	r2, sl, r4, r2
   1cfdc:	cmp	lr, #0
   1cfe0:	umull	r1, ip, r6, r5
   1cfe4:	mla	r2, r7, r5, r2
   1cfe8:	mla	ip, r6, r4, ip
   1cfec:	mvnne	r2, #0
   1cff0:	subs	r6, r3, r6
   1cff4:	mla	r7, r2, r5, ip
   1cff8:	sbcs	r2, r0, r2
   1cffc:	mov	ip, #0
   1d000:	movwcc	ip, #1
   1d004:	mov	r2, #0
   1d008:	cmp	ip, #0
   1d00c:	mvnne	r1, #0
   1d010:	mvnne	r7, #0
   1d014:	subs	r6, r3, r1
   1d018:	ldr	r3, [sp, #24]
   1d01c:	sbcs	r6, r0, r7
   1d020:	umull	r0, sl, r1, r5
   1d024:	movwcc	r2, #1
   1d028:	cmp	r2, #0
   1d02c:	mvnne	r0, #0
   1d030:	mla	r1, r1, r3, sl
   1d034:	cmp	r2, #0
   1d038:	umull	r6, r4, r0, r5
   1d03c:	mla	r1, r7, r5, r1
   1d040:	mla	r4, r0, r3, r4
   1d044:	ldr	r3, [sp, #4]
   1d048:	mvnne	r1, #0
   1d04c:	mla	r7, r1, r5, r4
   1d050:	ldr	r5, [sp, #16]
   1d054:	subs	r0, r3, r0
   1d058:	ldr	r0, [sp, #8]
   1d05c:	sbcs	r0, r0, r1
   1d060:	mov	r0, #0
   1d064:	movwcc	r0, #1
   1d068:	cmp	r0, #0
   1d06c:	mov	r1, r0
   1d070:	ldr	r0, [sp, #20]
   1d074:	mvnne	r7, #0
   1d078:	mvnne	r6, #0
   1d07c:	orr	r0, r0, r5
   1d080:	ldr	r5, [sp, #12]
   1d084:	orr	r0, r0, r5
   1d088:	orr	r0, r0, lr
   1d08c:	orr	r0, r0, ip
   1d090:	orr	r0, r0, r2
   1d094:	b	1d504 <__assert_fail@plt+0xbc18>
   1d098:	mov	r1, #0
   1d09c:	lsl	r2, r7, #10
   1d0a0:	lsl	r0, r6, #10
   1d0a4:	lsr	r3, r7, #22
   1d0a8:	cmp	r1, r7, lsr #22
   1d0ac:	orr	r2, r2, r6, lsr #22
   1d0b0:	mvnne	r0, #0
   1d0b4:	movwne	r3, #1
   1d0b8:	cmp	r1, r7, lsr #22
   1d0bc:	b	1d534 <__assert_fail@plt+0xbc48>
   1d0c0:	mvn	r0, #0
   1d0c4:	mvn	r1, #0
   1d0c8:	mov	r2, r5
   1d0cc:	mov	sl, r3
   1d0d0:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   1d0d4:	subs	r2, r0, r6
   1d0d8:	mov	ip, r0
   1d0dc:	mov	r0, #0
   1d0e0:	sbcs	r2, r1, r7
   1d0e4:	movwcc	r0, #1
   1d0e8:	umull	r4, r2, r6, r5
   1d0ec:	cmp	r0, #0
   1d0f0:	mla	r2, r6, sl, r2
   1d0f4:	str	r0, [sp, #20]
   1d0f8:	mvnne	r4, #0
   1d0fc:	cmp	r0, #0
   1d100:	mla	r2, r7, r5, r2
   1d104:	mov	r0, #0
   1d108:	umull	lr, r3, r4, r5
   1d10c:	mvnne	r2, #0
   1d110:	mla	r3, r4, sl, r3
   1d114:	mla	r6, r2, r5, r3
   1d118:	subs	r3, ip, r4
   1d11c:	sbcs	r2, r1, r2
   1d120:	mov	r3, r1
   1d124:	movwcc	r0, #1
   1d128:	str	r3, [sp, #8]
   1d12c:	cmp	r0, #0
   1d130:	str	r0, [sp, #16]
   1d134:	mov	r0, ip
   1d138:	mvnne	lr, #0
   1d13c:	mvnne	r6, #0
   1d140:	str	r0, [sp, #12]
   1d144:	subs	r2, ip, lr
   1d148:	umull	r7, r4, lr, r5
   1d14c:	sbcs	r2, r1, r6
   1d150:	mla	r4, lr, sl, r4
   1d154:	mov	r2, #0
   1d158:	mla	r6, r6, r5, r4
   1d15c:	mov	r4, #0
   1d160:	movwcc	r2, #1
   1d164:	cmp	r2, #0
   1d168:	mvnne	r7, #0
   1d16c:	cmp	r2, #0
   1d170:	umull	r1, ip, r7, r5
   1d174:	mvnne	r6, #0
   1d178:	mla	ip, r7, sl, ip
   1d17c:	subs	r7, r0, r7
   1d180:	mla	lr, r6, r5, ip
   1d184:	sbcs	r7, r3, r6
   1d188:	mov	ip, #0
   1d18c:	movwcc	ip, #1
   1d190:	cmp	ip, #0
   1d194:	mvnne	r1, #0
   1d198:	mvnne	lr, #0
   1d19c:	subs	r7, r0, r1
   1d1a0:	sbcs	r7, r3, lr
   1d1a4:	movwcc	r4, #1
   1d1a8:	umull	r0, r7, r1, r5
   1d1ac:	cmp	r4, #0
   1d1b0:	mla	r1, r1, sl, r7
   1d1b4:	mvnne	r0, #0
   1d1b8:	mla	r1, lr, r5, r1
   1d1bc:	cmp	r4, #0
   1d1c0:	umull	r6, r3, r0, r5
   1d1c4:	mvnne	r1, #0
   1d1c8:	mla	r3, r0, sl, r3
   1d1cc:	mla	r7, r1, r5, r3
   1d1d0:	ldr	r3, [sp, #12]
   1d1d4:	subs	r0, r3, r0
   1d1d8:	ldr	r3, [sp, #16]
   1d1dc:	ldr	r0, [sp, #8]
   1d1e0:	sbcs	r0, r0, r1
   1d1e4:	mov	r0, #0
   1d1e8:	movwcc	r0, #1
   1d1ec:	cmp	r0, #0
   1d1f0:	mov	r1, r0
   1d1f4:	ldr	r0, [sp, #20]
   1d1f8:	mvnne	r7, #0
   1d1fc:	mvnne	r6, #0
   1d200:	orr	r0, r0, r3
   1d204:	orr	r0, r0, r2
   1d208:	orr	r0, r0, ip
   1d20c:	orr	r0, r0, r4
   1d210:	b	1d334 <__assert_fail@plt+0xba48>
   1d214:	mvn	r0, #0
   1d218:	mvn	r1, #0
   1d21c:	mov	r2, r5
   1d220:	mov	sl, r3
   1d224:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   1d228:	umull	r3, r2, r6, r5
   1d22c:	mov	lr, r1
   1d230:	mov	r1, r0
   1d234:	mla	r2, r6, sl, r2
   1d238:	subs	r6, r0, r6
   1d23c:	mov	r0, #0
   1d240:	sbcs	r6, lr, r7
   1d244:	mla	r2, r7, r5, r2
   1d248:	movwcc	r0, #1
   1d24c:	cmp	r0, #0
   1d250:	str	r0, [sp, #20]
   1d254:	mov	r0, r1
   1d258:	mvnne	r3, #0
   1d25c:	mvnne	r2, #0
   1d260:	str	r0, [sp, #16]
   1d264:	subs	r4, r1, r3
   1d268:	umull	r7, ip, r3, r5
   1d26c:	sbcs	r4, lr, r2
   1d270:	mla	r3, r3, sl, ip
   1d274:	mov	ip, #0
   1d278:	mov	r4, #0
   1d27c:	mla	r2, r2, r5, r3
   1d280:	movwcc	r4, #1
   1d284:	cmp	r4, #0
   1d288:	mvnne	r7, #0
   1d28c:	cmp	r4, #0
   1d290:	umull	r1, r6, r7, r5
   1d294:	mvnne	r2, #0
   1d298:	mla	r6, r7, sl, r6
   1d29c:	mla	r3, r2, r5, r6
   1d2a0:	subs	r6, r0, r7
   1d2a4:	sbcs	r2, lr, r2
   1d2a8:	movwcc	ip, #1
   1d2ac:	mov	r2, #0
   1d2b0:	cmp	ip, #0
   1d2b4:	mvnne	r1, #0
   1d2b8:	mvnne	r3, #0
   1d2bc:	subs	r6, r0, r1
   1d2c0:	sbcs	r6, lr, r3
   1d2c4:	movwcc	r2, #1
   1d2c8:	umull	r0, r6, r1, r5
   1d2cc:	cmp	r2, #0
   1d2d0:	str	r6, [sp, #12]
   1d2d4:	mvnne	r0, #0
   1d2d8:	cmp	r2, #0
   1d2dc:	umull	r6, r7, r0, r5
   1d2e0:	mla	r7, r0, sl, r7
   1d2e4:	str	r7, [sp, #8]
   1d2e8:	ldr	r7, [sp, #12]
   1d2ec:	mla	r1, r1, sl, r7
   1d2f0:	mla	r1, r3, r5, r1
   1d2f4:	ldr	r3, [sp, #8]
   1d2f8:	mvnne	r1, #0
   1d2fc:	mla	r7, r1, r5, r3
   1d300:	ldr	r3, [sp, #16]
   1d304:	subs	r0, r3, r0
   1d308:	sbcs	r0, lr, r1
   1d30c:	mov	r0, #0
   1d310:	movwcc	r0, #1
   1d314:	cmp	r0, #0
   1d318:	mov	r1, r0
   1d31c:	ldr	r0, [sp, #20]
   1d320:	mvnne	r7, #0
   1d324:	mvnne	r6, #0
   1d328:	orr	r0, r0, r4
   1d32c:	orr	r0, r0, ip
   1d330:	orr	r0, r0, r2
   1d334:	orr	r3, r0, r1
   1d338:	b	1d568 <__assert_fail@plt+0xbc7c>
   1d33c:	mvn	r0, #0
   1d340:	mvn	r1, #0
   1d344:	mov	r2, r5
   1d348:	mov	sl, r3
   1d34c:	bl	1f5d8 <__assert_fail@plt+0xdcec>
   1d350:	mov	ip, r1
   1d354:	subs	r1, r0, r6
   1d358:	umull	r3, lr, r6, r5
   1d35c:	mov	r2, r5
   1d360:	sbcs	r1, ip, r7
   1d364:	mla	r6, r6, sl, lr
   1d368:	str	ip, [sp, #4]
   1d36c:	mov	r1, #0
   1d370:	mla	r7, r7, r2, r6
   1d374:	movwcc	r1, #1
   1d378:	cmp	r1, #0
   1d37c:	str	r1, [sp, #20]
   1d380:	mvnne	r3, #0
   1d384:	cmp	r1, #0
   1d388:	mov	r1, r0
   1d38c:	umull	r4, r5, r3, r5
   1d390:	mvnne	r7, #0
   1d394:	mov	lr, r1
   1d398:	mla	r5, r3, sl, r5
   1d39c:	subs	r3, r0, r3
   1d3a0:	sbcs	r0, ip, r7
   1d3a4:	mla	r5, r7, r2, r5
   1d3a8:	mov	r0, #0
   1d3ac:	movwcc	r0, #1
   1d3b0:	cmp	r0, #0
   1d3b4:	str	r0, [sp, #16]
   1d3b8:	mvnne	r4, #0
   1d3bc:	mvnne	r5, #0
   1d3c0:	subs	r0, r1, r4
   1d3c4:	mov	r1, #0
   1d3c8:	sbcs	r0, ip, r5
   1d3cc:	movwcc	r1, #1
   1d3d0:	umull	r3, r0, r4, r2
   1d3d4:	cmp	r1, #0
   1d3d8:	mla	r0, r4, sl, r0
   1d3dc:	mov	r4, lr
   1d3e0:	str	r1, [sp, #12]
   1d3e4:	mvnne	r3, #0
   1d3e8:	mla	r0, r5, r2, r0
   1d3ec:	cmp	r1, #0
   1d3f0:	str	r4, [sp]
   1d3f4:	umull	r7, r6, r3, r2
   1d3f8:	mvnne	r0, #0
   1d3fc:	mla	r6, r3, sl, r6
   1d400:	subs	r3, lr, r3
   1d404:	mla	r5, r0, r2, r6
   1d408:	sbcs	r0, ip, r0
   1d40c:	mov	r3, #0
   1d410:	mov	r0, #0
   1d414:	movwcc	r0, #1
   1d418:	cmp	r0, #0
   1d41c:	str	r0, [sp, #8]
   1d420:	mvnne	r7, #0
   1d424:	mvnne	r5, #0
   1d428:	subs	r0, lr, r7
   1d42c:	sbcs	r0, ip, r5
   1d430:	movwcc	r3, #1
   1d434:	umull	r6, r0, r7, r2
   1d438:	cmp	r3, #0
   1d43c:	mla	r7, r7, sl, r0
   1d440:	mov	r0, ip
   1d444:	mvnne	r6, #0
   1d448:	mla	r7, r5, r2, r7
   1d44c:	cmp	r3, #0
   1d450:	mov	r5, #0
   1d454:	umull	r1, lr, r6, r2
   1d458:	mvnne	r7, #0
   1d45c:	mla	lr, r6, sl, lr
   1d460:	subs	r6, r4, r6
   1d464:	mla	lr, r7, r2, lr
   1d468:	sbcs	r7, ip, r7
   1d46c:	mov	ip, #0
   1d470:	movwcc	ip, #1
   1d474:	cmp	ip, #0
   1d478:	mvnne	r1, #0
   1d47c:	mvnne	lr, #0
   1d480:	subs	r7, r4, r1
   1d484:	sbcs	r7, r0, lr
   1d488:	movwcc	r5, #1
   1d48c:	umull	r0, r7, r1, r2
   1d490:	cmp	r5, #0
   1d494:	mla	r1, r1, sl, r7
   1d498:	mvnne	r0, #0
   1d49c:	mla	r1, lr, r2, r1
   1d4a0:	cmp	r5, #0
   1d4a4:	umull	r6, r4, r0, r2
   1d4a8:	mvnne	r1, #0
   1d4ac:	mla	r4, r0, sl, r4
   1d4b0:	mla	r7, r1, r2, r4
   1d4b4:	ldr	r2, [sp]
   1d4b8:	subs	r0, r2, r0
   1d4bc:	ldr	r2, [sp, #16]
   1d4c0:	ldr	r0, [sp, #4]
   1d4c4:	sbcs	r0, r0, r1
   1d4c8:	mov	r0, #0
   1d4cc:	movwcc	r0, #1
   1d4d0:	cmp	r0, #0
   1d4d4:	mov	r1, r0
   1d4d8:	ldr	r0, [sp, #20]
   1d4dc:	mvnne	r7, #0
   1d4e0:	mvnne	r6, #0
   1d4e4:	orr	r0, r0, r2
   1d4e8:	ldr	r2, [sp, #12]
   1d4ec:	orr	r0, r0, r2
   1d4f0:	ldr	r2, [sp, #8]
   1d4f4:	orr	r0, r0, r2
   1d4f8:	orr	r0, r0, r3
   1d4fc:	orr	r0, r0, ip
   1d500:	orr	r0, r0, r5
   1d504:	orr	r0, r0, r1
   1d508:	and	r3, r0, #1
   1d50c:	b	1d568 <__assert_fail@plt+0xbc7c>
   1d510:	mov	r1, #0
   1d514:	lsl	r2, r7, #9
   1d518:	lsl	r0, r6, #9
   1d51c:	lsr	r3, r7, #23
   1d520:	cmp	r1, r7, lsr #23
   1d524:	orr	r2, r2, r6, lsr #23
   1d528:	mvnne	r0, #0
   1d52c:	movwne	r3, #1
   1d530:	cmp	r1, r7, lsr #23
   1d534:	mvnne	r2, #0
   1d538:	mov	r6, r0
   1d53c:	mov	r7, r2
   1d540:	b	1d568 <__assert_fail@plt+0xbc7c>
   1d544:	lsl	r1, r7, #1
   1d548:	lsl	r0, r6, #1
   1d54c:	cmp	r7, #0
   1d550:	lsr	r3, r7, #31
   1d554:	orr	r1, r1, r6, lsr #31
   1d558:	mvnlt	r0, #0
   1d55c:	mvnlt	r1, #0
   1d560:	mov	r6, r0
   1d564:	mov	r7, r1
   1d568:	ldr	r1, [sp, #32]
   1d56c:	ldr	r2, [sp, #28]
   1d570:	orr	r8, r3, r8
   1d574:	add	r0, r1, r2
   1d578:	str	r0, [r9]
   1d57c:	ldrb	r0, [r1, r2]
   1d580:	cmp	r0, #0
   1d584:	orrne	r8, r8, #2
   1d588:	ldr	r0, [sp, #36]	; 0x24
   1d58c:	strd	r6, [r0]
   1d590:	mov	r0, r8
   1d594:	sub	sp, fp, #28
   1d598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d59c:	movw	r0, #3856	; 0xf10
   1d5a0:	movw	r1, #3894	; 0xf36
   1d5a4:	movw	r3, #3910	; 0xf46
   1d5a8:	mov	r2, #85	; 0x55
   1d5ac:	movt	r0, #2
   1d5b0:	movt	r1, #2
   1d5b4:	movt	r3, #2
   1d5b8:	bl	118ec <__assert_fail@plt>
   1d5bc:	clz	r2, r1
   1d5c0:	clz	r3, r0
   1d5c4:	lsr	r2, r2, #5
   1d5c8:	lsr	r3, r3, #5
   1d5cc:	orrs	r2, r3, r2
   1d5d0:	movwne	r1, #1
   1d5d4:	movwne	r0, #1
   1d5d8:	cmp	r1, #0
   1d5dc:	beq	1d60c <__assert_fail@plt+0xbd20>
   1d5e0:	mvn	r2, #-2147483648	; 0x80000000
   1d5e4:	udiv	r2, r2, r1
   1d5e8:	cmp	r2, r0
   1d5ec:	bcs	1d60c <__assert_fail@plt+0xbd20>
   1d5f0:	push	{fp, lr}
   1d5f4:	mov	fp, sp
   1d5f8:	bl	11748 <__errno_location@plt>
   1d5fc:	mov	r1, #12
   1d600:	str	r1, [r0]
   1d604:	mov	r0, #0
   1d608:	pop	{fp, pc}
   1d60c:	b	114e4 <calloc@plt>
   1d610:	cmp	r0, #0
   1d614:	movweq	r0, #1
   1d618:	cmn	r0, #1
   1d61c:	ble	1d624 <__assert_fail@plt+0xbd38>
   1d620:	b	116b8 <malloc@plt>
   1d624:	push	{fp, lr}
   1d628:	mov	fp, sp
   1d62c:	bl	11748 <__errno_location@plt>
   1d630:	mov	r1, #12
   1d634:	str	r1, [r0]
   1d638:	mov	r0, #0
   1d63c:	pop	{fp, pc}
   1d640:	push	{fp, lr}
   1d644:	mov	fp, sp
   1d648:	cmp	r0, #0
   1d64c:	beq	1d668 <__assert_fail@plt+0xbd7c>
   1d650:	cmp	r1, #0
   1d654:	beq	1d674 <__assert_fail@plt+0xbd88>
   1d658:	cmn	r1, #1
   1d65c:	ble	1d680 <__assert_fail@plt+0xbd94>
   1d660:	pop	{fp, lr}
   1d664:	b	115c8 <realloc@plt>
   1d668:	mov	r0, r1
   1d66c:	pop	{fp, lr}
   1d670:	b	1d610 <__assert_fail@plt+0xbd24>
   1d674:	bl	16030 <__assert_fail@plt+0x4744>
   1d678:	mov	r0, #0
   1d67c:	pop	{fp, pc}
   1d680:	bl	11748 <__errno_location@plt>
   1d684:	mov	r1, #12
   1d688:	str	r1, [r0]
   1d68c:	mov	r0, #0
   1d690:	pop	{fp, pc}
   1d694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d698:	add	fp, sp, #28
   1d69c:	sub	sp, sp, #28
   1d6a0:	sub	sp, sp, #1024	; 0x400
   1d6a4:	ldrb	r3, [r0]
   1d6a8:	mov	r5, r0
   1d6ac:	cmp	r3, #0
   1d6b0:	beq	1d75c <__assert_fail@plt+0xbe70>
   1d6b4:	mov	r0, #1
   1d6b8:	mov	r2, #0
   1d6bc:	ldrb	r7, [r1, r2]
   1d6c0:	cmp	r7, #0
   1d6c4:	uxtbne	r3, r3
   1d6c8:	subne	r3, r3, r7
   1d6cc:	clzne	r3, r3
   1d6d0:	lsrne	r3, r3, #5
   1d6d4:	andne	r0, r0, r3
   1d6d8:	addne	r3, r5, r2
   1d6dc:	addne	r2, r2, #1
   1d6e0:	ldrbne	r3, [r3, #1]
   1d6e4:	cmpne	r3, #0
   1d6e8:	bne	1d6bc <__assert_fail@plt+0xbdd0>
   1d6ec:	add	r4, r1, r2
   1d6f0:	mov	r6, r5
   1d6f4:	ldrb	r2, [r4]
   1d6f8:	cmp	r2, #0
   1d6fc:	movwne	r6, #0
   1d700:	tst	r0, #1
   1d704:	cmpeq	r2, #0
   1d708:	bne	1d76c <__assert_fail@plt+0xbe80>
   1d70c:	sub	r8, r4, r1
   1d710:	ldrb	r1, [r1]
   1d714:	add	r0, r5, #1
   1d718:	bl	11724 <strchr@plt>
   1d71c:	mov	r6, r0
   1d720:	cmp	r8, #1
   1d724:	cmpne	r6, #0
   1d728:	beq	1d76c <__assert_fail@plt+0xbe80>
   1d72c:	add	r0, r5, r8
   1d730:	sub	r9, r4, r8
   1d734:	str	r6, [sp, #20]
   1d738:	subs	r5, r0, r6
   1d73c:	movwcc	r5, #1
   1d740:	cmp	r8, #31
   1d744:	bhi	1d778 <__assert_fail@plt+0xbe8c>
   1d748:	cmp	r8, #3
   1d74c:	bcs	1d8c0 <__assert_fail@plt+0xbfd4>
   1d750:	sub	r2, r8, #1
   1d754:	mov	sl, #1
   1d758:	b	1df00 <__assert_fail@plt+0xc614>
   1d75c:	ldrb	r0, [r1]
   1d760:	cmp	r0, #0
   1d764:	movne	r5, #0
   1d768:	mov	r6, r5
   1d76c:	mov	r0, r6
   1d770:	sub	sp, fp, #28
   1d774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d778:	mvn	r1, #0
   1d77c:	mov	r0, #0
   1d780:	mov	r2, #1
   1d784:	mov	ip, #1
   1d788:	mov	r3, #1
   1d78c:	add	r6, r1, r3
   1d790:	ldrb	r7, [r9, r2]
   1d794:	ldrb	r6, [r9, r6]
   1d798:	cmp	r7, r6
   1d79c:	bcs	1d7bc <__assert_fail@plt+0xbed0>
   1d7a0:	sub	ip, r2, r1
   1d7a4:	mov	r3, #1
   1d7a8:	mov	r0, r2
   1d7ac:	add	r2, r3, r0
   1d7b0:	cmp	r2, r8
   1d7b4:	bcc	1d78c <__assert_fail@plt+0xbea0>
   1d7b8:	b	1d814 <__assert_fail@plt+0xbf28>
   1d7bc:	bne	1d7e0 <__assert_fail@plt+0xbef4>
   1d7c0:	cmp	r3, ip
   1d7c4:	bne	1d804 <__assert_fail@plt+0xbf18>
   1d7c8:	add	r0, r0, ip
   1d7cc:	mov	r3, #1
   1d7d0:	add	r2, r3, r0
   1d7d4:	cmp	r2, r8
   1d7d8:	bcc	1d78c <__assert_fail@plt+0xbea0>
   1d7dc:	b	1d814 <__assert_fail@plt+0xbf28>
   1d7e0:	add	r2, r0, #1
   1d7e4:	mov	r1, r0
   1d7e8:	mov	r3, #1
   1d7ec:	mov	ip, #1
   1d7f0:	mov	r0, r2
   1d7f4:	add	r2, r3, r0
   1d7f8:	cmp	r2, r8
   1d7fc:	bcc	1d78c <__assert_fail@plt+0xbea0>
   1d800:	b	1d814 <__assert_fail@plt+0xbf28>
   1d804:	add	r3, r3, #1
   1d808:	add	r2, r3, r0
   1d80c:	cmp	r2, r8
   1d810:	bcc	1d78c <__assert_fail@plt+0xbea0>
   1d814:	cmp	r8, #2
   1d818:	bcc	1da08 <__assert_fail@plt+0xc11c>
   1d81c:	mvn	lr, #0
   1d820:	mov	r2, #0
   1d824:	mov	r3, #1
   1d828:	mov	sl, #1
   1d82c:	mov	r7, #1
   1d830:	add	r6, lr, r7
   1d834:	ldrb	r0, [r9, r3]
   1d838:	ldrb	r6, [r9, r6]
   1d83c:	cmp	r6, r0
   1d840:	bcs	1d860 <__assert_fail@plt+0xbf74>
   1d844:	sub	sl, r3, lr
   1d848:	mov	r7, #1
   1d84c:	mov	r2, r3
   1d850:	add	r3, r7, r2
   1d854:	cmp	r3, r8
   1d858:	bcc	1d830 <__assert_fail@plt+0xbf44>
   1d85c:	b	1da10 <__assert_fail@plt+0xc124>
   1d860:	cmp	r0, r6
   1d864:	bne	1d888 <__assert_fail@plt+0xbf9c>
   1d868:	cmp	r7, sl
   1d86c:	bne	1d8ac <__assert_fail@plt+0xbfc0>
   1d870:	add	r2, r2, sl
   1d874:	mov	r7, #1
   1d878:	add	r3, r7, r2
   1d87c:	cmp	r3, r8
   1d880:	bcc	1d830 <__assert_fail@plt+0xbf44>
   1d884:	b	1da10 <__assert_fail@plt+0xc124>
   1d888:	add	r0, r2, #1
   1d88c:	mov	lr, r2
   1d890:	mov	r7, #1
   1d894:	mov	sl, #1
   1d898:	mov	r2, r0
   1d89c:	add	r3, r7, r2
   1d8a0:	cmp	r3, r8
   1d8a4:	bcc	1d830 <__assert_fail@plt+0xbf44>
   1d8a8:	b	1da10 <__assert_fail@plt+0xc124>
   1d8ac:	add	r7, r7, #1
   1d8b0:	add	r3, r7, r2
   1d8b4:	cmp	r3, r8
   1d8b8:	bcc	1d830 <__assert_fail@plt+0xbf44>
   1d8bc:	b	1da10 <__assert_fail@plt+0xc124>
   1d8c0:	mvn	r1, #0
   1d8c4:	mov	r0, #0
   1d8c8:	mov	r2, #1
   1d8cc:	mov	ip, #1
   1d8d0:	mov	r3, #1
   1d8d4:	add	r6, r1, r3
   1d8d8:	ldrb	r7, [r9, r2]
   1d8dc:	ldrb	r6, [r9, r6]
   1d8e0:	cmp	r7, r6
   1d8e4:	bcs	1d904 <__assert_fail@plt+0xc018>
   1d8e8:	sub	ip, r2, r1
   1d8ec:	mov	r3, #1
   1d8f0:	mov	r0, r2
   1d8f4:	add	r2, r3, r0
   1d8f8:	cmp	r2, r8
   1d8fc:	bcc	1d8d4 <__assert_fail@plt+0xbfe8>
   1d900:	b	1d95c <__assert_fail@plt+0xc070>
   1d904:	bne	1d928 <__assert_fail@plt+0xc03c>
   1d908:	cmp	r3, ip
   1d90c:	bne	1d94c <__assert_fail@plt+0xc060>
   1d910:	add	r0, r0, ip
   1d914:	mov	r3, #1
   1d918:	add	r2, r3, r0
   1d91c:	cmp	r2, r8
   1d920:	bcc	1d8d4 <__assert_fail@plt+0xbfe8>
   1d924:	b	1d95c <__assert_fail@plt+0xc070>
   1d928:	add	r2, r0, #1
   1d92c:	mov	r1, r0
   1d930:	mov	r3, #1
   1d934:	mov	ip, #1
   1d938:	mov	r0, r2
   1d93c:	add	r2, r3, r0
   1d940:	cmp	r2, r8
   1d944:	bcc	1d8d4 <__assert_fail@plt+0xbfe8>
   1d948:	b	1d95c <__assert_fail@plt+0xc070>
   1d94c:	add	r3, r3, #1
   1d950:	add	r2, r3, r0
   1d954:	cmp	r2, r8
   1d958:	bcc	1d8d4 <__assert_fail@plt+0xbfe8>
   1d95c:	cmp	r8, #2
   1d960:	bcc	1dee4 <__assert_fail@plt+0xc5f8>
   1d964:	mvn	r7, #0
   1d968:	mov	r2, #0
   1d96c:	mov	r3, #1
   1d970:	mov	sl, #1
   1d974:	mov	r6, #1
   1d978:	add	r4, r7, r6
   1d97c:	ldrb	r0, [r9, r3]
   1d980:	ldrb	r4, [r9, r4]
   1d984:	cmp	r4, r0
   1d988:	bcs	1d9a8 <__assert_fail@plt+0xc0bc>
   1d98c:	sub	sl, r3, r7
   1d990:	mov	r6, #1
   1d994:	mov	r2, r3
   1d998:	add	r3, r6, r2
   1d99c:	cmp	r3, r8
   1d9a0:	bcc	1d978 <__assert_fail@plt+0xc08c>
   1d9a4:	b	1deec <__assert_fail@plt+0xc600>
   1d9a8:	cmp	r0, r4
   1d9ac:	bne	1d9d0 <__assert_fail@plt+0xc0e4>
   1d9b0:	cmp	r6, sl
   1d9b4:	bne	1d9f4 <__assert_fail@plt+0xc108>
   1d9b8:	add	r2, r2, sl
   1d9bc:	mov	r6, #1
   1d9c0:	add	r3, r6, r2
   1d9c4:	cmp	r3, r8
   1d9c8:	bcc	1d978 <__assert_fail@plt+0xc08c>
   1d9cc:	b	1deec <__assert_fail@plt+0xc600>
   1d9d0:	add	r0, r2, #1
   1d9d4:	mov	r7, r2
   1d9d8:	mov	r6, #1
   1d9dc:	mov	sl, #1
   1d9e0:	mov	r2, r0
   1d9e4:	add	r3, r6, r2
   1d9e8:	cmp	r3, r8
   1d9ec:	bcc	1d978 <__assert_fail@plt+0xc08c>
   1d9f0:	b	1deec <__assert_fail@plt+0xc600>
   1d9f4:	add	r6, r6, #1
   1d9f8:	add	r3, r6, r2
   1d9fc:	cmp	r3, r8
   1da00:	bcc	1d978 <__assert_fail@plt+0xc08c>
   1da04:	b	1deec <__assert_fail@plt+0xc600>
   1da08:	mov	sl, #1
   1da0c:	mvn	lr, #0
   1da10:	add	r6, sp, #24
   1da14:	vdup.32	q8, r8
   1da18:	add	r2, lr, #1
   1da1c:	add	r0, r6, #16
   1da20:	mov	r3, r6
   1da24:	vst1.32	{d16-d17}, [r0]
   1da28:	add	r0, r6, #32
   1da2c:	vst1.32	{d16-d17}, [r0]
   1da30:	add	r0, r6, #48	; 0x30
   1da34:	vst1.32	{d16-d17}, [r0]
   1da38:	add	r0, r6, #64	; 0x40
   1da3c:	vst1.32	{d16-d17}, [r0]
   1da40:	add	r0, r6, #80	; 0x50
   1da44:	vst1.32	{d16-d17}, [r0]
   1da48:	add	r0, r6, #96	; 0x60
   1da4c:	vst1.32	{d16-d17}, [r0]
   1da50:	add	r0, r6, #112	; 0x70
   1da54:	vst1.32	{d16-d17}, [r0]
   1da58:	add	r0, r6, #128	; 0x80
   1da5c:	vst1.32	{d16-d17}, [r0]
   1da60:	add	r0, r6, #144	; 0x90
   1da64:	vst1.32	{d16-d17}, [r0]
   1da68:	add	r0, r6, #160	; 0xa0
   1da6c:	vst1.32	{d16-d17}, [r0]
   1da70:	add	r0, r6, #176	; 0xb0
   1da74:	vst1.32	{d16-d17}, [r0]
   1da78:	add	r0, r6, #192	; 0xc0
   1da7c:	vst1.32	{d16-d17}, [r0]
   1da80:	add	r0, r6, #208	; 0xd0
   1da84:	vst1.32	{d16-d17}, [r0]
   1da88:	add	r0, r6, #224	; 0xe0
   1da8c:	vst1.32	{d16-d17}, [r0]
   1da90:	add	r0, r6, #240	; 0xf0
   1da94:	vst1.32	{d16-d17}, [r0]
   1da98:	add	r0, r6, #256	; 0x100
   1da9c:	vst1.32	{d16-d17}, [r0]
   1daa0:	add	r0, r6, #272	; 0x110
   1daa4:	vst1.32	{d16-d17}, [r0]
   1daa8:	add	r0, r6, #288	; 0x120
   1daac:	vst1.32	{d16-d17}, [r0]
   1dab0:	mov	r0, #1008	; 0x3f0
   1dab4:	vst1.32	{d16-d17}, [r3], r0
   1dab8:	add	r0, r6, #320	; 0x140
   1dabc:	vst1.32	{d16-d17}, [r0]
   1dac0:	add	r0, r6, #304	; 0x130
   1dac4:	vst1.32	{d16-d17}, [r0]
   1dac8:	add	r0, r6, #336	; 0x150
   1dacc:	vst1.32	{d16-d17}, [r0]
   1dad0:	add	r0, r6, #352	; 0x160
   1dad4:	vst1.32	{d16-d17}, [r0]
   1dad8:	add	r0, r6, #368	; 0x170
   1dadc:	vst1.32	{d16-d17}, [r0]
   1dae0:	add	r0, r6, #384	; 0x180
   1dae4:	vst1.32	{d16-d17}, [r0]
   1dae8:	add	r0, r6, #400	; 0x190
   1daec:	vst1.32	{d16-d17}, [r0]
   1daf0:	add	r0, r6, #416	; 0x1a0
   1daf4:	vst1.32	{d16-d17}, [r0]
   1daf8:	add	r0, r6, #432	; 0x1b0
   1dafc:	vst1.32	{d16-d17}, [r0]
   1db00:	add	r0, r6, #448	; 0x1c0
   1db04:	vst1.32	{d16-d17}, [r0]
   1db08:	add	r0, r6, #464	; 0x1d0
   1db0c:	vst1.32	{d16-d17}, [r0]
   1db10:	add	r0, r6, #480	; 0x1e0
   1db14:	vst1.32	{d16-d17}, [r0]
   1db18:	add	r0, r6, #496	; 0x1f0
   1db1c:	vst1.32	{d16-d17}, [r0]
   1db20:	add	r0, r6, #512	; 0x200
   1db24:	vst1.32	{d16-d17}, [r0]
   1db28:	add	r0, r6, #528	; 0x210
   1db2c:	vst1.32	{d16-d17}, [r0]
   1db30:	add	r0, r6, #544	; 0x220
   1db34:	vst1.32	{d16-d17}, [r0]
   1db38:	add	r0, r6, #560	; 0x230
   1db3c:	vst1.32	{d16-d17}, [r0]
   1db40:	add	r0, r6, #576	; 0x240
   1db44:	vst1.32	{d16-d17}, [r0]
   1db48:	add	r0, r6, #592	; 0x250
   1db4c:	vst1.32	{d16-d17}, [r0]
   1db50:	add	r0, r6, #624	; 0x270
   1db54:	vst1.32	{d16-d17}, [r0]
   1db58:	add	r0, r6, #608	; 0x260
   1db5c:	vst1.32	{d16-d17}, [r0]
   1db60:	add	r0, r6, #640	; 0x280
   1db64:	vst1.32	{d16-d17}, [r0]
   1db68:	add	r0, r6, #656	; 0x290
   1db6c:	vst1.32	{d16-d17}, [r0]
   1db70:	add	r0, r6, #672	; 0x2a0
   1db74:	vst1.32	{d16-d17}, [r0]
   1db78:	add	r0, r6, #688	; 0x2b0
   1db7c:	vst1.32	{d16-d17}, [r0]
   1db80:	add	r0, r6, #704	; 0x2c0
   1db84:	vst1.32	{d16-d17}, [r0]
   1db88:	add	r0, r6, #720	; 0x2d0
   1db8c:	vst1.32	{d16-d17}, [r0]
   1db90:	add	r0, r6, #736	; 0x2e0
   1db94:	vst1.32	{d16-d17}, [r0]
   1db98:	add	r0, r6, #752	; 0x2f0
   1db9c:	vst1.32	{d16-d17}, [r0]
   1dba0:	add	r0, r6, #768	; 0x300
   1dba4:	vst1.32	{d16-d17}, [r0]
   1dba8:	add	r0, r6, #784	; 0x310
   1dbac:	vst1.32	{d16-d17}, [r0]
   1dbb0:	add	r0, r6, #800	; 0x320
   1dbb4:	vst1.32	{d16-d17}, [r0]
   1dbb8:	add	r0, r6, #816	; 0x330
   1dbbc:	vst1.32	{d16-d17}, [r0]
   1dbc0:	add	r0, r6, #832	; 0x340
   1dbc4:	vst1.32	{d16-d17}, [r0]
   1dbc8:	add	r0, r6, #848	; 0x350
   1dbcc:	vst1.32	{d16-d17}, [r0]
   1dbd0:	add	r0, r6, #864	; 0x360
   1dbd4:	vst1.32	{d16-d17}, [r0]
   1dbd8:	add	r0, r6, #880	; 0x370
   1dbdc:	vst1.32	{d16-d17}, [r0]
   1dbe0:	add	r0, r6, #896	; 0x380
   1dbe4:	vst1.32	{d16-d17}, [r0]
   1dbe8:	add	r0, r6, #928	; 0x3a0
   1dbec:	vst1.32	{d16-d17}, [r0]
   1dbf0:	add	r0, r6, #912	; 0x390
   1dbf4:	vst1.32	{d16-d17}, [r0]
   1dbf8:	add	r0, r6, #944	; 0x3b0
   1dbfc:	vst1.32	{d16-d17}, [r0]
   1dc00:	add	r0, r6, #960	; 0x3c0
   1dc04:	vst1.32	{d16-d17}, [r0]
   1dc08:	add	r0, r6, #976	; 0x3d0
   1dc0c:	vst1.32	{d16-d17}, [r0]
   1dc10:	add	r0, r6, #992	; 0x3e0
   1dc14:	vst1.32	{d16-d17}, [r0]
   1dc18:	add	r0, r1, #1
   1dc1c:	vst1.32	{d16-d17}, [r3]
   1dc20:	cmp	r2, r0
   1dc24:	movcc	sl, ip
   1dc28:	movcc	r2, r0
   1dc2c:	cmp	r8, #0
   1dc30:	beq	1dc48 <__assert_fail@plt+0xc35c>
   1dc34:	mov	r0, r8
   1dc38:	ldrb	r1, [r4, -r0]
   1dc3c:	subs	r0, r0, #1
   1dc40:	str	r0, [r6, r1, lsl #2]
   1dc44:	bne	1dc38 <__assert_fail@plt+0xc34c>
   1dc48:	add	r1, r9, sl
   1dc4c:	mov	r0, r9
   1dc50:	mov	r4, r2
   1dc54:	bl	11598 <memcmp@plt>
   1dc58:	cmp	r0, #0
   1dc5c:	str	r4, [sp, #16]
   1dc60:	beq	1dd88 <__assert_fail@plt+0xc49c>
   1dc64:	ldr	r0, [sp, #20]
   1dc68:	sub	r2, r8, r5
   1dc6c:	mov	r1, #0
   1dc70:	mov	r6, #0
   1dc74:	add	r0, r0, r5
   1dc78:	bl	117a8 <memchr@plt>
   1dc7c:	sub	r2, r8, r4
   1dc80:	cmp	r4, r2
   1dc84:	movcs	r2, r4
   1dc88:	cmp	r8, #0
   1dc8c:	beq	1d76c <__assert_fail@plt+0xbe80>
   1dc90:	ldr	lr, [sp, #20]
   1dc94:	cmp	r0, #0
   1dc98:	str	r2, [sp, #12]
   1dc9c:	bne	1d76c <__assert_fail@plt+0xbe80>
   1dca0:	sub	r5, r8, #1
   1dca4:	mov	r1, r4
   1dca8:	cmp	r4, r5
   1dcac:	bcs	1e124 <__assert_fail@plt+0xc838>
   1dcb0:	add	r0, lr, r1
   1dcb4:	add	sl, r9, r1
   1dcb8:	mov	ip, #0
   1dcbc:	mov	r7, r8
   1dcc0:	str	r0, [sp, #8]
   1dcc4:	rsb	r0, r1, #1
   1dcc8:	str	r0, [sp, #4]
   1dccc:	add	r0, lr, r7
   1dcd0:	add	r3, sp, #24
   1dcd4:	mov	r4, r7
   1dcd8:	ldrb	r2, [r0, #-1]
   1dcdc:	ldr	r2, [r3, r2, lsl #2]
   1dce0:	cmp	r2, #0
   1dce4:	beq	1dcf0 <__assert_fail@plt+0xc404>
   1dce8:	add	ip, r2, ip
   1dcec:	b	1dd4c <__assert_fail@plt+0xc460>
   1dcf0:	ldr	r2, [sp, #8]
   1dcf4:	add	r3, r2, ip
   1dcf8:	mov	r2, #0
   1dcfc:	ldrb	r7, [r3, r2]
   1dd00:	ldrb	r6, [sl, r2]
   1dd04:	cmp	r6, r7
   1dd08:	bne	1dd44 <__assert_fail@plt+0xc458>
   1dd0c:	add	r2, r2, #1
   1dd10:	add	r7, r1, r2
   1dd14:	cmp	r7, r5
   1dd18:	bcc	1dcfc <__assert_fail@plt+0xc410>
   1dd1c:	ldr	r3, [sp, #4]
   1dd20:	add	r2, lr, ip
   1dd24:	cmp	r3, #1
   1dd28:	beq	1e1b4 <__assert_fail@plt+0xc8c8>
   1dd2c:	ldrb	r7, [r2, -r3]
   1dd30:	ldrb	r6, [r9, -r3]
   1dd34:	add	r3, r3, #1
   1dd38:	cmp	r6, r7
   1dd3c:	beq	1dd24 <__assert_fail@plt+0xc438>
   1dd40:	ldr	r2, [sp, #12]
   1dd44:	add	r2, ip, r2
   1dd48:	add	ip, r2, #1
   1dd4c:	mov	r1, r4
   1dd50:	add	r7, ip, r8
   1dd54:	mov	r4, ip
   1dd58:	mov	r6, #0
   1dd5c:	sub	r2, r7, r1
   1dd60:	mov	r1, #0
   1dd64:	bl	117a8 <memchr@plt>
   1dd68:	cmp	r7, #0
   1dd6c:	beq	1d76c <__assert_fail@plt+0xbe80>
   1dd70:	ldr	lr, [sp, #20]
   1dd74:	ldr	r1, [sp, #16]
   1dd78:	cmp	r0, #0
   1dd7c:	mov	ip, r4
   1dd80:	beq	1dccc <__assert_fail@plt+0xc3e0>
   1dd84:	b	1d76c <__assert_fail@plt+0xbe80>
   1dd88:	ldr	r0, [sp, #20]
   1dd8c:	sub	r2, r8, r5
   1dd90:	mov	r1, #0
   1dd94:	mov	r6, #0
   1dd98:	add	r0, r0, r5
   1dd9c:	bl	117a8 <memchr@plt>
   1dda0:	cmp	r8, #0
   1dda4:	beq	1d76c <__assert_fail@plt+0xbe80>
   1dda8:	ldr	lr, [sp, #20]
   1ddac:	ldr	r7, [sp, #16]
   1ddb0:	cmp	r0, #0
   1ddb4:	str	sl, [sp, #12]
   1ddb8:	bne	1d76c <__assert_fail@plt+0xbe80>
   1ddbc:	ldr	r0, [sp, #12]
   1ddc0:	sub	r5, r8, #1
   1ddc4:	mov	sl, #0
   1ddc8:	mov	ip, r8
   1ddcc:	mov	r1, #0
   1ddd0:	sub	r0, r8, r0
   1ddd4:	str	r0, [sp, #8]
   1ddd8:	sub	r0, r7, #1
   1dddc:	str	r0, [sp, #4]
   1dde0:	rsb	r0, r7, #0
   1dde4:	str	r0, [sp]
   1dde8:	add	r0, lr, ip
   1ddec:	add	r3, sp, #24
   1ddf0:	ldrb	r2, [r0, #-1]
   1ddf4:	ldr	r3, [r3, r2, lsl #2]
   1ddf8:	cmp	r3, #0
   1ddfc:	beq	1de24 <__assert_fail@plt+0xc538>
   1de00:	ldr	r2, [sp, #12]
   1de04:	ldr	r7, [sp, #8]
   1de08:	cmp	r3, r2
   1de0c:	mov	r2, r3
   1de10:	movcc	r2, r7
   1de14:	cmp	sl, #0
   1de18:	moveq	r2, r3
   1de1c:	mov	sl, #0
   1de20:	b	1de94 <__assert_fail@plt+0xc5a8>
   1de24:	cmp	r7, sl
   1de28:	mov	r2, r7
   1de2c:	movcc	r2, sl
   1de30:	cmp	r2, r5
   1de34:	bcs	1de58 <__assert_fail@plt+0xc56c>
   1de38:	add	r3, lr, r1
   1de3c:	ldrb	r7, [r3, r2]
   1de40:	ldrb	r6, [r9, r2]
   1de44:	cmp	r6, r7
   1de48:	bne	1ded4 <__assert_fail@plt+0xc5e8>
   1de4c:	add	r2, r2, #1
   1de50:	cmp	r2, r5
   1de54:	bcc	1de3c <__assert_fail@plt+0xc550>
   1de58:	ldr	r2, [sp, #4]
   1de5c:	add	r6, lr, r1
   1de60:	add	r3, r2, #1
   1de64:	cmp	sl, r3
   1de68:	bcs	1de80 <__assert_fail@plt+0xc594>
   1de6c:	ldrb	r7, [r6, r2]
   1de70:	ldrb	r4, [r9, r2]
   1de74:	sub	r2, r2, #1
   1de78:	cmp	r4, r7
   1de7c:	beq	1de60 <__assert_fail@plt+0xc574>
   1de80:	add	r2, sl, #1
   1de84:	ldr	sl, [sp, #8]
   1de88:	cmp	r3, r2
   1de8c:	ldr	r2, [sp, #12]
   1de90:	bcc	1d76c <__assert_fail@plt+0xbe80>
   1de94:	add	r1, r2, r1
   1de98:	mov	r6, #0
   1de9c:	add	r7, r1, r8
   1dea0:	mov	r4, r1
   1dea4:	mov	r1, #0
   1dea8:	sub	r2, r7, ip
   1deac:	bl	117a8 <memchr@plt>
   1deb0:	cmp	r7, #0
   1deb4:	beq	1d76c <__assert_fail@plt+0xbe80>
   1deb8:	mov	ip, r7
   1debc:	ldr	lr, [sp, #20]
   1dec0:	ldr	r7, [sp, #16]
   1dec4:	cmp	r0, #0
   1dec8:	mov	r1, r4
   1decc:	beq	1dde8 <__assert_fail@plt+0xc4fc>
   1ded0:	b	1d76c <__assert_fail@plt+0xbe80>
   1ded4:	ldr	r3, [sp]
   1ded8:	add	r2, r3, r2
   1dedc:	add	r2, r2, #1
   1dee0:	b	1de1c <__assert_fail@plt+0xc530>
   1dee4:	mov	sl, #1
   1dee8:	mvn	r7, #0
   1deec:	add	r0, r1, #1
   1def0:	add	r2, r7, #1
   1def4:	cmp	r2, r0
   1def8:	movcc	sl, ip
   1defc:	movcc	r2, r0
   1df00:	add	r1, r9, sl
   1df04:	mov	r0, r9
   1df08:	mov	r4, r2
   1df0c:	bl	11598 <memcmp@plt>
   1df10:	cmp	r0, #0
   1df14:	str	r4, [sp, #16]
   1df18:	beq	1e00c <__assert_fail@plt+0xc720>
   1df1c:	ldr	r0, [sp, #20]
   1df20:	sub	r2, r8, r5
   1df24:	mov	r1, #0
   1df28:	mov	r6, #0
   1df2c:	add	r0, r0, r5
   1df30:	bl	117a8 <memchr@plt>
   1df34:	sub	r5, r8, r4
   1df38:	cmp	r4, r5
   1df3c:	movcs	r5, r4
   1df40:	cmp	r8, #0
   1df44:	beq	1d76c <__assert_fail@plt+0xbe80>
   1df48:	ldr	ip, [sp, #20]
   1df4c:	cmp	r0, #0
   1df50:	bne	1d76c <__assert_fail@plt+0xbe80>
   1df54:	cmp	r8, r4
   1df58:	bls	1e1c4 <__assert_fail@plt+0xc8d8>
   1df5c:	add	r0, ip, r4
   1df60:	add	r7, r9, r4
   1df64:	mov	sl, #0
   1df68:	mov	r1, r8
   1df6c:	str	r0, [sp, #12]
   1df70:	rsb	r0, r4, #1
   1df74:	str	r0, [sp, #8]
   1df78:	ldr	r0, [sp, #12]
   1df7c:	mov	r2, #0
   1df80:	add	r0, r0, sl
   1df84:	ldrb	r3, [r0, r2]
   1df88:	ldrb	r6, [r7, r2]
   1df8c:	cmp	r6, r3
   1df90:	bne	1dfcc <__assert_fail@plt+0xc6e0>
   1df94:	add	r2, r2, #1
   1df98:	add	r3, r4, r2
   1df9c:	cmp	r3, r8
   1dfa0:	bcc	1df84 <__assert_fail@plt+0xc698>
   1dfa4:	ldr	r2, [sp, #8]
   1dfa8:	add	r0, ip, sl
   1dfac:	cmp	r2, #1
   1dfb0:	beq	1e23c <__assert_fail@plt+0xc950>
   1dfb4:	ldrb	r3, [r0, -r2]
   1dfb8:	ldrb	r6, [r9, -r2]
   1dfbc:	add	r2, r2, #1
   1dfc0:	cmp	r6, r3
   1dfc4:	beq	1dfac <__assert_fail@plt+0xc6c0>
   1dfc8:	mov	r2, r5
   1dfcc:	add	r2, sl, r2
   1dfd0:	add	r0, ip, r1
   1dfd4:	mov	r6, #0
   1dfd8:	add	sl, r2, #1
   1dfdc:	add	r4, sl, r8
   1dfe0:	sub	r2, r4, r1
   1dfe4:	mov	r1, #0
   1dfe8:	bl	117a8 <memchr@plt>
   1dfec:	cmp	r0, #0
   1dff0:	bne	1d76c <__assert_fail@plt+0xbe80>
   1dff4:	cmp	r4, #0
   1dff8:	mov	r1, r4
   1dffc:	ldr	ip, [sp, #20]
   1e000:	ldr	r4, [sp, #16]
   1e004:	bne	1df78 <__assert_fail@plt+0xc68c>
   1e008:	b	1d76c <__assert_fail@plt+0xbe80>
   1e00c:	ldr	r0, [sp, #20]
   1e010:	sub	r2, r8, r5
   1e014:	mov	r1, #0
   1e018:	mov	r6, #0
   1e01c:	add	r0, r0, r5
   1e020:	bl	117a8 <memchr@plt>
   1e024:	cmp	r8, #0
   1e028:	beq	1d76c <__assert_fail@plt+0xbe80>
   1e02c:	cmp	r0, #0
   1e030:	ldr	r4, [sp, #20]
   1e034:	ldr	r0, [sp, #16]
   1e038:	str	sl, [sp, #12]
   1e03c:	bne	1d76c <__assert_fail@plt+0xbe80>
   1e040:	ldr	r1, [sp, #12]
   1e044:	mov	sl, #0
   1e048:	mov	r5, #0
   1e04c:	sub	r1, r8, r1
   1e050:	str	r1, [sp, #8]
   1e054:	sub	r1, r0, #1
   1e058:	str	r1, [sp, #4]
   1e05c:	rsb	r1, r0, #0
   1e060:	str	r1, [sp]
   1e064:	mov	r1, r8
   1e068:	cmp	r0, sl
   1e06c:	movcc	r0, sl
   1e070:	cmp	r0, r8
   1e074:	bcs	1e098 <__assert_fail@plt+0xc7ac>
   1e078:	add	r2, r4, r5
   1e07c:	ldrb	r3, [r2, r0]
   1e080:	ldrb	r7, [r9, r0]
   1e084:	cmp	r7, r3
   1e088:	bne	1e0d8 <__assert_fail@plt+0xc7ec>
   1e08c:	add	r0, r0, #1
   1e090:	cmp	r0, r8
   1e094:	bcc	1e07c <__assert_fail@plt+0xc790>
   1e098:	ldr	r0, [sp, #4]
   1e09c:	add	r6, r4, r5
   1e0a0:	add	r2, r0, #1
   1e0a4:	cmp	sl, r2
   1e0a8:	bcs	1e0c0 <__assert_fail@plt+0xc7d4>
   1e0ac:	ldrb	r3, [r6, r0]
   1e0b0:	ldrb	r7, [r9, r0]
   1e0b4:	sub	r0, r0, #1
   1e0b8:	cmp	r7, r3
   1e0bc:	beq	1e0a0 <__assert_fail@plt+0xc7b4>
   1e0c0:	add	r0, sl, #1
   1e0c4:	ldr	sl, [sp, #8]
   1e0c8:	cmp	r2, r0
   1e0cc:	ldr	r2, [sp, #12]
   1e0d0:	bcs	1e0e8 <__assert_fail@plt+0xc7fc>
   1e0d4:	b	1d76c <__assert_fail@plt+0xbe80>
   1e0d8:	ldr	r2, [sp]
   1e0dc:	mov	sl, #0
   1e0e0:	add	r0, r2, r0
   1e0e4:	add	r2, r0, #1
   1e0e8:	add	r5, r2, r5
   1e0ec:	add	r0, r4, r1
   1e0f0:	mov	r6, #0
   1e0f4:	add	r7, r5, r8
   1e0f8:	sub	r2, r7, r1
   1e0fc:	mov	r1, #0
   1e100:	bl	117a8 <memchr@plt>
   1e104:	cmp	r7, #0
   1e108:	beq	1d76c <__assert_fail@plt+0xbe80>
   1e10c:	cmp	r0, #0
   1e110:	ldr	r4, [sp, #20]
   1e114:	ldr	r0, [sp, #16]
   1e118:	mov	r1, r7
   1e11c:	beq	1e068 <__assert_fail@plt+0xc77c>
   1e120:	b	1d76c <__assert_fail@plt+0xbe80>
   1e124:	ldr	r0, [sp, #12]
   1e128:	rsb	r5, r1, #1
   1e12c:	mov	ip, #0
   1e130:	mov	r1, r8
   1e134:	add	sl, r0, #1
   1e138:	add	r0, lr, r1
   1e13c:	add	r3, sp, #24
   1e140:	ldrb	r2, [r0, #-1]
   1e144:	ldr	r2, [r3, r2, lsl #2]
   1e148:	cmp	r2, #0
   1e14c:	bne	1e178 <__assert_fail@plt+0xc88c>
   1e150:	add	r2, lr, ip
   1e154:	mov	r3, r5
   1e158:	cmp	r3, #1
   1e15c:	beq	1e1b4 <__assert_fail@plt+0xc8c8>
   1e160:	ldrb	r7, [r2, -r3]
   1e164:	ldrb	r6, [r9, -r3]
   1e168:	add	r3, r3, #1
   1e16c:	cmp	r6, r7
   1e170:	beq	1e158 <__assert_fail@plt+0xc86c>
   1e174:	mov	r2, sl
   1e178:	add	ip, r2, ip
   1e17c:	mov	r6, #0
   1e180:	add	r7, ip, r8
   1e184:	mov	r4, ip
   1e188:	sub	r2, r7, r1
   1e18c:	mov	r1, #0
   1e190:	bl	117a8 <memchr@plt>
   1e194:	cmp	r7, #0
   1e198:	beq	1d76c <__assert_fail@plt+0xbe80>
   1e19c:	ldr	lr, [sp, #20]
   1e1a0:	cmp	r0, #0
   1e1a4:	mov	r1, r7
   1e1a8:	mov	ip, r4
   1e1ac:	beq	1e138 <__assert_fail@plt+0xc84c>
   1e1b0:	b	1d76c <__assert_fail@plt+0xbe80>
   1e1b4:	add	r6, lr, ip
   1e1b8:	mov	r0, r6
   1e1bc:	sub	sp, fp, #28
   1e1c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1c4:	rsb	r4, r4, #1
   1e1c8:	add	r5, r5, #1
   1e1cc:	mov	sl, #0
   1e1d0:	mov	r7, ip
   1e1d4:	mov	r0, r8
   1e1d8:	mov	r1, r4
   1e1dc:	cmp	r1, #1
   1e1e0:	beq	1e23c <__assert_fail@plt+0xc950>
   1e1e4:	ldrb	r6, [r7, -r1]
   1e1e8:	ldrb	r3, [r9, -r1]
   1e1ec:	add	r1, r1, #1
   1e1f0:	cmp	r3, r6
   1e1f4:	beq	1e1dc <__assert_fail@plt+0xc8f0>
   1e1f8:	add	sl, r5, sl
   1e1fc:	add	r0, ip, r0
   1e200:	mov	r1, #0
   1e204:	mov	r2, r5
   1e208:	str	r4, [sp, #16]
   1e20c:	mov	r6, #0
   1e210:	add	r4, sl, r8
   1e214:	bl	117a8 <memchr@plt>
   1e218:	cmp	r4, #0
   1e21c:	beq	1d76c <__assert_fail@plt+0xbe80>
   1e220:	cmp	r0, #0
   1e224:	mov	r0, r4
   1e228:	ldr	ip, [sp, #20]
   1e22c:	ldr	r4, [sp, #16]
   1e230:	add	r7, r7, r5
   1e234:	beq	1e1d8 <__assert_fail@plt+0xc8ec>
   1e238:	b	1d76c <__assert_fail@plt+0xbe80>
   1e23c:	add	r6, ip, sl
   1e240:	mov	r0, r6
   1e244:	sub	sp, fp, #28
   1e248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e24c:	mov	r0, #1
   1e250:	b	119f0 <__assert_fail@plt+0x104>
   1e254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e258:	add	fp, sp, #28
   1e25c:	sub	sp, sp, #12
   1e260:	mov	r4, r3
   1e264:	mov	r9, r2
   1e268:	mov	r7, r1
   1e26c:	mov	r8, r0
   1e270:	bl	11718 <strlen@plt>
   1e274:	ldr	r6, [r7]
   1e278:	cmp	r6, #0
   1e27c:	beq	1e328 <__assert_fail@plt+0xca3c>
   1e280:	mov	r5, r0
   1e284:	cmp	r9, #0
   1e288:	beq	1e338 <__assert_fail@plt+0xca4c>
   1e28c:	add	r0, r7, #4
   1e290:	mvn	sl, #0
   1e294:	mov	r7, #0
   1e298:	str	r9, [sp]
   1e29c:	str	r0, [sp, #8]
   1e2a0:	mov	r0, #0
   1e2a4:	str	r0, [sp, #4]
   1e2a8:	mov	r0, r9
   1e2ac:	mov	r0, r6
   1e2b0:	mov	r1, r8
   1e2b4:	mov	r2, r5
   1e2b8:	bl	118b0 <strncmp@plt>
   1e2bc:	cmp	r0, #0
   1e2c0:	bne	1e30c <__assert_fail@plt+0xca20>
   1e2c4:	mov	r0, r6
   1e2c8:	bl	11718 <strlen@plt>
   1e2cc:	cmp	r0, r5
   1e2d0:	beq	1e32c <__assert_fail@plt+0xca40>
   1e2d4:	cmn	sl, #1
   1e2d8:	beq	1e308 <__assert_fail@plt+0xca1c>
   1e2dc:	ldr	r0, [sp]
   1e2e0:	mov	r1, r9
   1e2e4:	mov	r2, r4
   1e2e8:	mla	r0, sl, r4, r0
   1e2ec:	bl	11598 <memcmp@plt>
   1e2f0:	ldr	r1, [sp, #4]
   1e2f4:	cmp	r0, #0
   1e2f8:	movwne	r0, #1
   1e2fc:	orr	r1, r1, r0
   1e300:	str	r1, [sp, #4]
   1e304:	b	1e30c <__assert_fail@plt+0xca20>
   1e308:	mov	sl, r7
   1e30c:	ldr	r0, [sp, #8]
   1e310:	add	r9, r9, r4
   1e314:	ldr	r6, [r0, r7, lsl #2]
   1e318:	add	r7, r7, #1
   1e31c:	cmp	r6, #0
   1e320:	bne	1e2ac <__assert_fail@plt+0xc9c0>
   1e324:	b	1e3a0 <__assert_fail@plt+0xcab4>
   1e328:	mvn	r7, #0
   1e32c:	mov	r0, r7
   1e330:	sub	sp, fp, #28
   1e334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e338:	add	r4, r7, #4
   1e33c:	mov	r0, #0
   1e340:	mvn	sl, #0
   1e344:	mov	r7, #0
   1e348:	str	r0, [sp, #4]
   1e34c:	mov	r0, r6
   1e350:	mov	r1, r8
   1e354:	mov	r2, r5
   1e358:	bl	118b0 <strncmp@plt>
   1e35c:	cmp	r0, #0
   1e360:	bne	1e390 <__assert_fail@plt+0xcaa4>
   1e364:	mov	r0, r6
   1e368:	bl	11718 <strlen@plt>
   1e36c:	cmp	r0, r5
   1e370:	beq	1e32c <__assert_fail@plt+0xca40>
   1e374:	ldr	r1, [sp, #4]
   1e378:	cmn	sl, #1
   1e37c:	add	r0, sl, #1
   1e380:	movwne	r0, #1
   1e384:	moveq	sl, r7
   1e388:	orr	r1, r1, r0
   1e38c:	str	r1, [sp, #4]
   1e390:	ldr	r6, [r4, r7, lsl #2]
   1e394:	add	r7, r7, #1
   1e398:	cmp	r6, #0
   1e39c:	bne	1e34c <__assert_fail@plt+0xca60>
   1e3a0:	ldr	r0, [sp, #4]
   1e3a4:	tst	r0, #1
   1e3a8:	mvnne	sl, #1
   1e3ac:	mov	r0, sl
   1e3b0:	sub	sp, fp, #28
   1e3b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3b8:	push	{r4, r5, r6, r7, fp, lr}
   1e3bc:	add	fp, sp, #16
   1e3c0:	mov	r5, r0
   1e3c4:	ldr	r0, [r1]
   1e3c8:	mvn	r4, #0
   1e3cc:	cmp	r0, #0
   1e3d0:	beq	1e400 <__assert_fail@plt+0xcb14>
   1e3d4:	add	r7, r1, #4
   1e3d8:	mov	r6, #0
   1e3dc:	mov	r1, r5
   1e3e0:	bl	11520 <strcmp@plt>
   1e3e4:	cmp	r0, #0
   1e3e8:	moveq	r0, r6
   1e3ec:	popeq	{r4, r5, r6, r7, fp, pc}
   1e3f0:	ldr	r0, [r7, r6, lsl #2]
   1e3f4:	add	r6, r6, #1
   1e3f8:	cmp	r0, #0
   1e3fc:	bne	1e3dc <__assert_fail@plt+0xcaf0>
   1e400:	mov	r0, r4
   1e404:	pop	{r4, r5, r6, r7, fp, pc}
   1e408:	push	{r4, r5, r6, sl, fp, lr}
   1e40c:	add	fp, sp, #16
   1e410:	sub	sp, sp, #8
   1e414:	mov	r4, r1
   1e418:	movw	r1, #4016	; 0xfb0
   1e41c:	mov	r5, r0
   1e420:	movw	r0, #3989	; 0xf95
   1e424:	cmn	r2, #1
   1e428:	mov	r2, #5
   1e42c:	movt	r0, #2
   1e430:	movt	r1, #2
   1e434:	moveq	r1, r0
   1e438:	mov	r0, #0
   1e43c:	bl	115b0 <dcgettext@plt>
   1e440:	mov	r6, r0
   1e444:	mov	r0, #0
   1e448:	mov	r1, #8
   1e44c:	mov	r2, r4
   1e450:	bl	1b390 <__assert_fail@plt+0x9aa4>
   1e454:	mov	r4, r0
   1e458:	mov	r0, #1
   1e45c:	mov	r1, r5
   1e460:	bl	1b950 <__assert_fail@plt+0xa064>
   1e464:	str	r0, [sp]
   1e468:	mov	r0, #0
   1e46c:	mov	r1, #0
   1e470:	mov	r2, r6
   1e474:	mov	r3, r4
   1e478:	bl	1167c <error@plt>
   1e47c:	sub	sp, fp, #16
   1e480:	pop	{r4, r5, r6, sl, fp, pc}
   1e484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e488:	add	fp, sp, #28
   1e48c:	sub	sp, sp, #4
   1e490:	mov	r5, r1
   1e494:	movw	r1, #4045	; 0xfcd
   1e498:	mov	sl, r2
   1e49c:	mov	r7, r0
   1e4a0:	mov	r0, #0
   1e4a4:	mov	r2, #5
   1e4a8:	mov	r8, #0
   1e4ac:	movt	r1, #2
   1e4b0:	bl	115b0 <dcgettext@plt>
   1e4b4:	movw	r4, #9008	; 0x2330
   1e4b8:	movt	r4, #3
   1e4bc:	ldr	r1, [r4]
   1e4c0:	bl	114f0 <fputs_unlocked@plt>
   1e4c4:	ldr	r6, [r7]
   1e4c8:	cmp	r6, #0
   1e4cc:	beq	1e56c <__assert_fail@plt+0xcc80>
   1e4d0:	add	r9, r7, #4
   1e4d4:	mov	r7, #0
   1e4d8:	str	sl, [sp]
   1e4dc:	cmp	r8, #0
   1e4e0:	beq	1e4fc <__assert_fail@plt+0xcc10>
   1e4e4:	mov	r0, r7
   1e4e8:	mov	r1, r5
   1e4ec:	mov	r2, sl
   1e4f0:	bl	11598 <memcmp@plt>
   1e4f4:	cmp	r0, #0
   1e4f8:	beq	1e528 <__assert_fail@plt+0xcc3c>
   1e4fc:	ldr	r7, [r4]
   1e500:	mov	r0, r6
   1e504:	bl	1b960 <__assert_fail@plt+0xa074>
   1e508:	movw	r2, #4066	; 0xfe2
   1e50c:	mov	r3, r0
   1e510:	mov	r0, r7
   1e514:	mov	r1, #1
   1e518:	movt	r2, #2
   1e51c:	bl	1179c <__fprintf_chk@plt>
   1e520:	mov	r7, r5
   1e524:	b	1e558 <__assert_fail@plt+0xcc6c>
   1e528:	mov	sl, r9
   1e52c:	ldr	r9, [r4]
   1e530:	mov	r0, r6
   1e534:	bl	1b960 <__assert_fail@plt+0xa074>
   1e538:	mov	r3, r0
   1e53c:	mov	r0, r9
   1e540:	mov	r9, sl
   1e544:	ldr	sl, [sp]
   1e548:	movw	r2, #4074	; 0xfea
   1e54c:	mov	r1, #1
   1e550:	movt	r2, #2
   1e554:	bl	1179c <__fprintf_chk@plt>
   1e558:	ldr	r6, [r9, -r8, lsl #2]
   1e55c:	add	r5, r5, sl
   1e560:	sub	r8, r8, #1
   1e564:	cmp	r6, #0
   1e568:	bne	1e4dc <__assert_fail@plt+0xcbf0>
   1e56c:	ldr	r0, [r4]
   1e570:	ldr	r1, [r0, #20]
   1e574:	ldr	r2, [r0, #24]
   1e578:	cmp	r1, r2
   1e57c:	addcc	r2, r1, #1
   1e580:	strcc	r2, [r0, #20]
   1e584:	movcc	r0, #10
   1e588:	strbcc	r0, [r1]
   1e58c:	subcc	sp, fp, #28
   1e590:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e594:	mov	r1, #10
   1e598:	sub	sp, fp, #28
   1e59c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5a0:	b	117e4 <__overflow@plt>
   1e5a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5a8:	add	fp, sp, #28
   1e5ac:	sub	sp, sp, #12
   1e5b0:	mov	sl, r0
   1e5b4:	ldr	r0, [fp, #16]
   1e5b8:	ldr	r9, [fp, #8]
   1e5bc:	mov	r5, r3
   1e5c0:	mov	r8, r2
   1e5c4:	mov	r6, r1
   1e5c8:	cmp	r0, #0
   1e5cc:	beq	1e5fc <__assert_fail@plt+0xcd10>
   1e5d0:	mov	r0, r6
   1e5d4:	mov	r1, r8
   1e5d8:	mov	r2, r5
   1e5dc:	mov	r3, r9
   1e5e0:	bl	1e254 <__assert_fail@plt+0xc968>
   1e5e4:	mov	r4, r0
   1e5e8:	cmn	r4, #1
   1e5ec:	ble	1e64c <__assert_fail@plt+0xcd60>
   1e5f0:	mov	r0, r4
   1e5f4:	sub	sp, fp, #28
   1e5f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5fc:	ldr	r0, [r8]
   1e600:	movw	r7, #3989	; 0xf95
   1e604:	str	r5, [sp, #8]
   1e608:	movt	r7, #2
   1e60c:	cmp	r0, #0
   1e610:	beq	1e664 <__assert_fail@plt+0xcd78>
   1e614:	add	r5, r8, #4
   1e618:	mov	r4, #0
   1e61c:	mov	r1, r6
   1e620:	bl	11520 <strcmp@plt>
   1e624:	cmp	r0, #0
   1e628:	beq	1e640 <__assert_fail@plt+0xcd54>
   1e62c:	ldr	r0, [r5, r4, lsl #2]
   1e630:	add	r4, r4, #1
   1e634:	cmp	r0, #0
   1e638:	bne	1e61c <__assert_fail@plt+0xcd30>
   1e63c:	b	1e664 <__assert_fail@plt+0xcd78>
   1e640:	ldr	r5, [sp, #8]
   1e644:	cmn	r4, #1
   1e648:	bgt	1e5f0 <__assert_fail@plt+0xcd04>
   1e64c:	movw	r0, #3989	; 0xf95
   1e650:	movw	r7, #4016	; 0xfb0
   1e654:	str	r5, [sp, #8]
   1e658:	movt	r0, #2
   1e65c:	movt	r7, #2
   1e660:	moveq	r7, r0
   1e664:	ldr	r5, [fp, #12]
   1e668:	mov	r0, #0
   1e66c:	mov	r1, r7
   1e670:	mov	r2, #5
   1e674:	bl	115b0 <dcgettext@plt>
   1e678:	mov	r4, r0
   1e67c:	mov	r0, #0
   1e680:	mov	r1, #8
   1e684:	mov	r2, r6
   1e688:	bl	1b390 <__assert_fail@plt+0x9aa4>
   1e68c:	mov	r6, r0
   1e690:	mov	r0, #1
   1e694:	mov	r1, sl
   1e698:	bl	1b950 <__assert_fail@plt+0xa064>
   1e69c:	str	r0, [sp]
   1e6a0:	mov	r0, #0
   1e6a4:	mov	r1, #0
   1e6a8:	mov	r2, r4
   1e6ac:	mov	r3, r6
   1e6b0:	bl	1167c <error@plt>
   1e6b4:	ldr	r1, [sp, #8]
   1e6b8:	mov	r0, r8
   1e6bc:	mov	r2, r9
   1e6c0:	bl	1e484 <__assert_fail@plt+0xcb98>
   1e6c4:	blx	r5
   1e6c8:	mvn	r4, #0
   1e6cc:	mov	r0, r4
   1e6d0:	sub	sp, fp, #28
   1e6d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e6dc:	add	fp, sp, #24
   1e6e0:	ldr	r6, [r1]
   1e6e4:	cmp	r6, #0
   1e6e8:	beq	1e74c <__assert_fail@plt+0xce60>
   1e6ec:	mov	r8, r1
   1e6f0:	mov	r7, r2
   1e6f4:	mov	r1, r2
   1e6f8:	mov	r2, r3
   1e6fc:	mov	r4, r3
   1e700:	mov	r9, r0
   1e704:	bl	11598 <memcmp@plt>
   1e708:	cmp	r0, #0
   1e70c:	beq	1e744 <__assert_fail@plt+0xce58>
   1e710:	add	r7, r7, r4
   1e714:	add	r5, r8, #4
   1e718:	ldr	r6, [r5]
   1e71c:	cmp	r6, #0
   1e720:	beq	1e74c <__assert_fail@plt+0xce60>
   1e724:	mov	r0, r9
   1e728:	mov	r1, r7
   1e72c:	mov	r2, r4
   1e730:	bl	11598 <memcmp@plt>
   1e734:	add	r7, r7, r4
   1e738:	add	r5, r5, #4
   1e73c:	cmp	r0, #0
   1e740:	bne	1e718 <__assert_fail@plt+0xce2c>
   1e744:	mov	r0, r6
   1e748:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e74c:	mov	r6, #0
   1e750:	mov	r0, r6
   1e754:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e758:	sub	r0, r0, #1
   1e75c:	ldrb	r3, [r0, #1]!
   1e760:	cmp	r3, #47	; 0x2f
   1e764:	beq	1e75c <__assert_fail@plt+0xce70>
   1e768:	mov	r2, #0
   1e76c:	mov	r1, r0
   1e770:	uxtb	r3, r3
   1e774:	cmp	r3, #47	; 0x2f
   1e778:	beq	1e7a0 <__assert_fail@plt+0xceb4>
   1e77c:	cmp	r3, #0
   1e780:	bxeq	lr
   1e784:	tst	r2, #1
   1e788:	mov	r2, #0
   1e78c:	movne	r0, r1
   1e790:	ldrb	r3, [r1, #1]!
   1e794:	uxtb	r3, r3
   1e798:	cmp	r3, #47	; 0x2f
   1e79c:	bne	1e77c <__assert_fail@plt+0xce90>
   1e7a0:	ldrb	r3, [r1, #1]!
   1e7a4:	mov	r2, #1
   1e7a8:	uxtb	r3, r3
   1e7ac:	cmp	r3, #47	; 0x2f
   1e7b0:	bne	1e77c <__assert_fail@plt+0xce90>
   1e7b4:	b	1e7a0 <__assert_fail@plt+0xceb4>
   1e7b8:	push	{r4, sl, fp, lr}
   1e7bc:	add	fp, sp, #8
   1e7c0:	mov	r4, r0
   1e7c4:	bl	11718 <strlen@plt>
   1e7c8:	mov	r1, r0
   1e7cc:	sub	r2, r4, #1
   1e7d0:	mov	r0, r1
   1e7d4:	cmp	r1, #2
   1e7d8:	popcc	{r4, sl, fp, pc}
   1e7dc:	ldrb	r3, [r2, r0]
   1e7e0:	sub	r1, r0, #1
   1e7e4:	cmp	r3, #47	; 0x2f
   1e7e8:	beq	1e7d0 <__assert_fail@plt+0xcee4>
   1e7ec:	pop	{r4, sl, fp, pc}
   1e7f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7f4:	add	fp, sp, #28
   1e7f8:	sub	sp, sp, #4
   1e7fc:	mov	r4, r0
   1e800:	bl	115f8 <chdir@plt>
   1e804:	cmp	r0, #0
   1e808:	beq	1e8d8 <__assert_fail@plt+0xcfec>
   1e80c:	mov	r6, r0
   1e810:	bl	11748 <__errno_location@plt>
   1e814:	mov	r9, r0
   1e818:	ldr	r0, [r0]
   1e81c:	cmp	r0, #36	; 0x24
   1e820:	bne	1ea2c <__assert_fail@plt+0xd140>
   1e824:	mov	r0, r4
   1e828:	bl	11718 <strlen@plt>
   1e82c:	cmp	r0, #0
   1e830:	beq	1eb54 <__assert_fail@plt+0xd268>
   1e834:	mov	r7, r0
   1e838:	mov	r0, #0
   1e83c:	cmp	r0, r7, lsr #12
   1e840:	beq	1eb74 <__assert_fail@plt+0xd288>
   1e844:	movw	r1, #3675	; 0xe5b
   1e848:	mov	r0, r4
   1e84c:	movt	r1, #2
   1e850:	bl	118d4 <strspn@plt>
   1e854:	cmp	r0, #0
   1e858:	beq	1e8e8 <__assert_fail@plt+0xcffc>
   1e85c:	mov	r6, r0
   1e860:	cmp	r0, #2
   1e864:	bne	1ea38 <__assert_fail@plt+0xd14c>
   1e868:	add	r0, r4, #3
   1e86c:	sub	r2, r7, #3
   1e870:	mov	r1, #47	; 0x2f
   1e874:	mov	r8, #47	; 0x2f
   1e878:	bl	117a8 <memchr@plt>
   1e87c:	cmp	r0, #0
   1e880:	beq	1ea90 <__assert_fail@plt+0xd1a4>
   1e884:	mov	r6, r0
   1e888:	mov	r0, #0
   1e88c:	mov	r1, r4
   1e890:	mov	r2, #18688	; 0x4900
   1e894:	strb	r0, [r6]
   1e898:	mvn	r0, #99	; 0x63
   1e89c:	bl	11730 <openat64@plt>
   1e8a0:	cmp	r0, #0
   1e8a4:	strb	r8, [r6]
   1e8a8:	blt	1ea88 <__assert_fail@plt+0xd19c>
   1e8ac:	movw	r1, #3675	; 0xe5b
   1e8b0:	add	r6, r6, #1
   1e8b4:	mov	r5, r0
   1e8b8:	movt	r1, #2
   1e8bc:	mov	r0, r6
   1e8c0:	bl	118d4 <strspn@plt>
   1e8c4:	add	r6, r6, r0
   1e8c8:	ldrb	r0, [r6]
   1e8cc:	cmp	r0, #47	; 0x2f
   1e8d0:	bne	1e8fc <__assert_fail@plt+0xd010>
   1e8d4:	b	1ea68 <__assert_fail@plt+0xd17c>
   1e8d8:	mov	r6, #0
   1e8dc:	mov	r0, r6
   1e8e0:	sub	sp, fp, #28
   1e8e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8e8:	mvn	r5, #99	; 0x63
   1e8ec:	mov	r6, r4
   1e8f0:	ldrb	r0, [r6]
   1e8f4:	cmp	r0, #47	; 0x2f
   1e8f8:	beq	1ea68 <__assert_fail@plt+0xd17c>
   1e8fc:	add	sl, r4, r7
   1e900:	cmp	r6, sl
   1e904:	bhi	1eb94 <__assert_fail@plt+0xd2a8>
   1e908:	sub	r0, sl, r6
   1e90c:	str	r9, [sp]
   1e910:	cmp	r0, #4096	; 0x1000
   1e914:	blt	1e9ec <__assert_fail@plt+0xd100>
   1e918:	movw	r9, #3675	; 0xe5b
   1e91c:	mov	r8, #0
   1e920:	movt	r9, #2
   1e924:	mov	r0, r6
   1e928:	mov	r1, #47	; 0x2f
   1e92c:	mov	r2, #4096	; 0x1000
   1e930:	bl	1173c <memrchr@plt>
   1e934:	cmp	r0, #0
   1e938:	beq	1eaa8 <__assert_fail@plt+0xd1bc>
   1e93c:	mov	r4, r0
   1e940:	strb	r8, [r0], -r6
   1e944:	cmp	r0, #4096	; 0x1000
   1e948:	bge	1eb14 <__assert_fail@plt+0xd228>
   1e94c:	mov	r0, r5
   1e950:	mov	r1, r6
   1e954:	mov	r2, #18688	; 0x4900
   1e958:	bl	11730 <openat64@plt>
   1e95c:	cmp	r0, #0
   1e960:	blt	1eac4 <__assert_fail@plt+0xd1d8>
   1e964:	mov	r7, r0
   1e968:	cmp	r5, #0
   1e96c:	blt	1e980 <__assert_fail@plt+0xd094>
   1e970:	mov	r0, r5
   1e974:	bl	118c8 <close@plt>
   1e978:	cmp	r0, #0
   1e97c:	bne	1eb34 <__assert_fail@plt+0xd248>
   1e980:	mov	r0, #47	; 0x2f
   1e984:	mov	r1, r9
   1e988:	strb	r0, [r4], #1
   1e98c:	mov	r0, r4
   1e990:	bl	118d4 <strspn@plt>
   1e994:	add	r6, r4, r0
   1e998:	mov	r5, r7
   1e99c:	sub	r0, sl, r6
   1e9a0:	cmp	r0, #4096	; 0x1000
   1e9a4:	bge	1e924 <__assert_fail@plt+0xd038>
   1e9a8:	cmp	r6, sl
   1e9ac:	bcs	1e9f8 <__assert_fail@plt+0xd10c>
   1e9b0:	mov	r0, r7
   1e9b4:	mov	r1, r6
   1e9b8:	mov	r2, #18688	; 0x4900
   1e9bc:	bl	11730 <openat64@plt>
   1e9c0:	ldr	r9, [sp]
   1e9c4:	cmp	r0, #0
   1e9c8:	blt	1eb00 <__assert_fail@plt+0xd214>
   1e9cc:	mov	r5, r0
   1e9d0:	cmp	r7, #0
   1e9d4:	blt	1ea00 <__assert_fail@plt+0xd114>
   1e9d8:	mov	r0, r7
   1e9dc:	bl	118c8 <close@plt>
   1e9e0:	cmp	r0, #0
   1e9e4:	beq	1ea00 <__assert_fail@plt+0xd114>
   1e9e8:	b	1eb34 <__assert_fail@plt+0xd248>
   1e9ec:	mov	r7, r5
   1e9f0:	cmp	r6, sl
   1e9f4:	bcc	1e9b0 <__assert_fail@plt+0xd0c4>
   1e9f8:	ldr	r9, [sp]
   1e9fc:	mov	r5, r7
   1ea00:	mov	r0, r5
   1ea04:	bl	11850 <fchdir@plt>
   1ea08:	cmp	r0, #0
   1ea0c:	bne	1ead0 <__assert_fail@plt+0xd1e4>
   1ea10:	mov	r6, #0
   1ea14:	cmp	r5, #0
   1ea18:	blt	1ea2c <__assert_fail@plt+0xd140>
   1ea1c:	mov	r0, r5
   1ea20:	bl	118c8 <close@plt>
   1ea24:	cmp	r0, #0
   1ea28:	bne	1eb34 <__assert_fail@plt+0xd248>
   1ea2c:	mov	r0, r6
   1ea30:	sub	sp, fp, #28
   1ea34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea38:	movw	r1, #3675	; 0xe5b
   1ea3c:	mvn	r0, #99	; 0x63
   1ea40:	mov	r2, #18688	; 0x4900
   1ea44:	movt	r1, #2
   1ea48:	bl	11730 <openat64@plt>
   1ea4c:	cmp	r0, #0
   1ea50:	blt	1ea88 <__assert_fail@plt+0xd19c>
   1ea54:	mov	r5, r0
   1ea58:	add	r6, r4, r6
   1ea5c:	ldrb	r0, [r6]
   1ea60:	cmp	r0, #47	; 0x2f
   1ea64:	bne	1e8fc <__assert_fail@plt+0xd010>
   1ea68:	movw	r0, #4139	; 0x102b
   1ea6c:	movw	r1, #4087	; 0xff7
   1ea70:	movw	r3, #4104	; 0x1008
   1ea74:	mov	r2, #162	; 0xa2
   1ea78:	movt	r0, #2
   1ea7c:	movt	r1, #2
   1ea80:	movt	r3, #2
   1ea84:	bl	118ec <__assert_fail@plt>
   1ea88:	ldr	r4, [r9]
   1ea8c:	b	1eaec <__assert_fail@plt+0xd200>
   1ea90:	mov	r0, #36	; 0x24
   1ea94:	str	r0, [r9]
   1ea98:	mvn	r6, #0
   1ea9c:	mov	r0, r6
   1eaa0:	sub	sp, fp, #28
   1eaa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eaa8:	ldr	r1, [sp]
   1eaac:	mov	r0, #36	; 0x24
   1eab0:	str	r0, [r1]
   1eab4:	mvn	r6, #0
   1eab8:	mov	r0, r6
   1eabc:	sub	sp, fp, #28
   1eac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eac4:	ldr	r9, [sp]
   1eac8:	mov	r0, #47	; 0x2f
   1eacc:	strb	r0, [r4]
   1ead0:	ldr	r4, [r9]
   1ead4:	cmp	r5, #0
   1ead8:	blt	1eaec <__assert_fail@plt+0xd200>
   1eadc:	mov	r0, r5
   1eae0:	bl	118c8 <close@plt>
   1eae4:	cmp	r0, #0
   1eae8:	bne	1eb34 <__assert_fail@plt+0xd248>
   1eaec:	str	r4, [r9]
   1eaf0:	mvn	r6, #0
   1eaf4:	mov	r0, r6
   1eaf8:	sub	sp, fp, #28
   1eafc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb00:	mov	r5, r7
   1eb04:	ldr	r4, [r9]
   1eb08:	cmp	r5, #0
   1eb0c:	bge	1eadc <__assert_fail@plt+0xd1f0>
   1eb10:	b	1eaec <__assert_fail@plt+0xd200>
   1eb14:	movw	r0, #4166	; 0x1046
   1eb18:	movw	r1, #4087	; 0xff7
   1eb1c:	movw	r3, #4104	; 0x1008
   1eb20:	mov	r2, #179	; 0xb3
   1eb24:	movt	r0, #2
   1eb28:	movt	r1, #2
   1eb2c:	movt	r3, #2
   1eb30:	bl	118ec <__assert_fail@plt>
   1eb34:	movw	r0, #4185	; 0x1059
   1eb38:	movw	r1, #4087	; 0xff7
   1eb3c:	movw	r3, #4198	; 0x1066
   1eb40:	mov	r2, #64	; 0x40
   1eb44:	movt	r0, #2
   1eb48:	movt	r1, #2
   1eb4c:	movt	r3, #2
   1eb50:	bl	118ec <__assert_fail@plt>
   1eb54:	movw	r0, #4079	; 0xfef
   1eb58:	movw	r1, #4087	; 0xff7
   1eb5c:	movw	r3, #4104	; 0x1008
   1eb60:	mov	r2, #126	; 0x7e
   1eb64:	movt	r0, #2
   1eb68:	movt	r1, #2
   1eb6c:	movt	r3, #2
   1eb70:	bl	118ec <__assert_fail@plt>
   1eb74:	movw	r0, #4127	; 0x101f
   1eb78:	movw	r1, #4087	; 0xff7
   1eb7c:	movw	r3, #4104	; 0x1008
   1eb80:	mov	r2, #127	; 0x7f
   1eb84:	movt	r0, #2
   1eb88:	movt	r1, #2
   1eb8c:	movt	r3, #2
   1eb90:	bl	118ec <__assert_fail@plt>
   1eb94:	movw	r0, #4151	; 0x1037
   1eb98:	movw	r1, #4087	; 0xff7
   1eb9c:	movw	r3, #4104	; 0x1008
   1eba0:	mov	r2, #163	; 0xa3
   1eba4:	movt	r0, #2
   1eba8:	movt	r1, #2
   1ebac:	movt	r3, #2
   1ebb0:	bl	118ec <__assert_fail@plt>
   1ebb4:	push	{r4, r5, r6, sl, fp, lr}
   1ebb8:	add	fp, sp, #16
   1ebbc:	mov	r4, r0
   1ebc0:	bl	11658 <__fpending@plt>
   1ebc4:	ldr	r6, [r4]
   1ebc8:	mov	r5, r0
   1ebcc:	mov	r0, r4
   1ebd0:	bl	1ec38 <__assert_fail@plt+0xd34c>
   1ebd4:	tst	r6, #32
   1ebd8:	bne	1ec10 <__assert_fail@plt+0xd324>
   1ebdc:	cmp	r0, #0
   1ebe0:	mov	r4, r0
   1ebe4:	mvnne	r4, #0
   1ebe8:	cmp	r5, #0
   1ebec:	bne	1ec1c <__assert_fail@plt+0xd330>
   1ebf0:	cmp	r0, #0
   1ebf4:	beq	1ec1c <__assert_fail@plt+0xd330>
   1ebf8:	bl	11748 <__errno_location@plt>
   1ebfc:	ldr	r0, [r0]
   1ec00:	subs	r4, r0, #9
   1ec04:	mvnne	r4, #0
   1ec08:	mov	r0, r4
   1ec0c:	pop	{r4, r5, r6, sl, fp, pc}
   1ec10:	mvn	r4, #0
   1ec14:	cmp	r0, #0
   1ec18:	beq	1ec24 <__assert_fail@plt+0xd338>
   1ec1c:	mov	r0, r4
   1ec20:	pop	{r4, r5, r6, sl, fp, pc}
   1ec24:	bl	11748 <__errno_location@plt>
   1ec28:	mov	r1, #0
   1ec2c:	str	r1, [r0]
   1ec30:	mov	r0, r4
   1ec34:	pop	{r4, r5, r6, sl, fp, pc}
   1ec38:	push	{r4, r5, r6, sl, fp, lr}
   1ec3c:	add	fp, sp, #16
   1ec40:	sub	sp, sp, #8
   1ec44:	mov	r4, r0
   1ec48:	bl	11790 <fileno@plt>
   1ec4c:	cmn	r0, #1
   1ec50:	ble	1ecc4 <__assert_fail@plt+0xd3d8>
   1ec54:	mov	r0, r4
   1ec58:	bl	116d0 <__freading@plt>
   1ec5c:	cmp	r0, #0
   1ec60:	beq	1ec8c <__assert_fail@plt+0xd3a0>
   1ec64:	mov	r0, r4
   1ec68:	bl	11790 <fileno@plt>
   1ec6c:	mov	r1, #1
   1ec70:	mov	r2, #0
   1ec74:	mov	r3, #0
   1ec78:	str	r1, [sp]
   1ec7c:	bl	11634 <lseek64@plt>
   1ec80:	and	r0, r0, r1
   1ec84:	cmn	r0, #1
   1ec88:	beq	1ecc4 <__assert_fail@plt+0xd3d8>
   1ec8c:	mov	r0, r4
   1ec90:	bl	1ed1c <__assert_fail@plt+0xd430>
   1ec94:	cmp	r0, #0
   1ec98:	beq	1ecc4 <__assert_fail@plt+0xd3d8>
   1ec9c:	bl	11748 <__errno_location@plt>
   1eca0:	ldr	r6, [r0]
   1eca4:	mov	r5, r0
   1eca8:	mov	r0, r4
   1ecac:	bl	117b4 <fclose@plt>
   1ecb0:	cmp	r6, #0
   1ecb4:	strne	r6, [r5]
   1ecb8:	mvnne	r0, #0
   1ecbc:	sub	sp, fp, #16
   1ecc0:	pop	{r4, r5, r6, sl, fp, pc}
   1ecc4:	mov	r0, r4
   1ecc8:	sub	sp, fp, #16
   1eccc:	pop	{r4, r5, r6, sl, fp, lr}
   1ecd0:	b	117b4 <fclose@plt>
   1ecd4:	sub	sp, sp, #8
   1ecd8:	push	{fp, lr}
   1ecdc:	mov	fp, sp
   1ece0:	sub	sp, sp, #8
   1ece4:	str	r2, [fp, #8]
   1ece8:	mov	r2, #0
   1ecec:	tst	r1, #64	; 0x40
   1ecf0:	str	r3, [fp, #12]
   1ecf4:	addne	r2, fp, #8
   1ecf8:	orrne	r2, r2, #4
   1ecfc:	strne	r2, [sp, #4]
   1ed00:	ldrne	r2, [fp, #8]
   1ed04:	bl	11694 <open64@plt>
   1ed08:	bl	1efe8 <__assert_fail@plt+0xd6fc>
   1ed0c:	mov	sp, fp
   1ed10:	pop	{fp, lr}
   1ed14:	add	sp, sp, #8
   1ed18:	bx	lr
   1ed1c:	push	{r4, sl, fp, lr}
   1ed20:	add	fp, sp, #8
   1ed24:	sub	sp, sp, #8
   1ed28:	mov	r4, r0
   1ed2c:	cmp	r0, #0
   1ed30:	beq	1ed4c <__assert_fail@plt+0xd460>
   1ed34:	mov	r0, r4
   1ed38:	bl	116d0 <__freading@plt>
   1ed3c:	cmp	r0, #0
   1ed40:	ldrbne	r0, [r4, #1]
   1ed44:	tstne	r0, #1
   1ed48:	bne	1ed5c <__assert_fail@plt+0xd470>
   1ed4c:	mov	r0, r4
   1ed50:	sub	sp, fp, #8
   1ed54:	pop	{r4, sl, fp, lr}
   1ed58:	b	1152c <fflush@plt>
   1ed5c:	mov	r0, #1
   1ed60:	mov	r2, #0
   1ed64:	mov	r3, #0
   1ed68:	str	r0, [sp]
   1ed6c:	mov	r0, r4
   1ed70:	bl	1ed84 <__assert_fail@plt+0xd498>
   1ed74:	mov	r0, r4
   1ed78:	sub	sp, fp, #8
   1ed7c:	pop	{r4, sl, fp, lr}
   1ed80:	b	1152c <fflush@plt>
   1ed84:	push	{r4, r5, r6, r7, fp, lr}
   1ed88:	add	fp, sp, #16
   1ed8c:	sub	sp, sp, #8
   1ed90:	mov	r4, r0
   1ed94:	ldr	r0, [r0, #4]
   1ed98:	mov	r5, r3
   1ed9c:	mov	r6, r2
   1eda0:	ldr	r1, [r4, #8]
   1eda4:	cmp	r1, r0
   1eda8:	bne	1edc4 <__assert_fail@plt+0xd4d8>
   1edac:	ldrd	r0, [r4, #16]
   1edb0:	cmp	r1, r0
   1edb4:	bne	1edc4 <__assert_fail@plt+0xd4d8>
   1edb8:	ldr	r0, [r4, #36]	; 0x24
   1edbc:	cmp	r0, #0
   1edc0:	beq	1eddc <__assert_fail@plt+0xd4f0>
   1edc4:	mov	r0, r4
   1edc8:	mov	r2, r6
   1edcc:	mov	r3, r5
   1edd0:	sub	sp, fp, #16
   1edd4:	pop	{r4, r5, r6, r7, fp, lr}
   1edd8:	b	117c0 <fseeko64@plt>
   1eddc:	ldr	r7, [fp, #8]
   1ede0:	mov	r0, r4
   1ede4:	bl	11790 <fileno@plt>
   1ede8:	mov	r2, r6
   1edec:	mov	r3, r5
   1edf0:	str	r7, [sp]
   1edf4:	bl	11634 <lseek64@plt>
   1edf8:	and	r2, r0, r1
   1edfc:	cmn	r2, #1
   1ee00:	mvneq	r0, #0
   1ee04:	subeq	sp, fp, #16
   1ee08:	popeq	{r4, r5, r6, r7, fp, pc}
   1ee0c:	strd	r0, [r4, #80]	; 0x50
   1ee10:	ldr	r0, [r4]
   1ee14:	bic	r0, r0, #16
   1ee18:	str	r0, [r4]
   1ee1c:	mov	r0, #0
   1ee20:	sub	sp, fp, #16
   1ee24:	pop	{r4, r5, r6, r7, fp, pc}
   1ee28:	push	{r4, sl, fp, lr}
   1ee2c:	add	fp, sp, #8
   1ee30:	sub	sp, sp, #264	; 0x108
   1ee34:	add	r1, sp, #7
   1ee38:	movw	r2, #257	; 0x101
   1ee3c:	bl	1ef44 <__assert_fail@plt+0xd658>
   1ee40:	mov	r4, #0
   1ee44:	cmp	r0, #0
   1ee48:	bne	1ee80 <__assert_fail@plt+0xd594>
   1ee4c:	movw	r1, #4235	; 0x108b
   1ee50:	add	r0, sp, #7
   1ee54:	movt	r1, #2
   1ee58:	bl	11520 <strcmp@plt>
   1ee5c:	cmp	r0, #0
   1ee60:	beq	1ee80 <__assert_fail@plt+0xd594>
   1ee64:	movw	r1, #4237	; 0x108d
   1ee68:	add	r0, sp, #7
   1ee6c:	movt	r1, #2
   1ee70:	bl	11520 <strcmp@plt>
   1ee74:	mov	r4, r0
   1ee78:	cmp	r0, #0
   1ee7c:	movwne	r4, #1
   1ee80:	mov	r0, r4
   1ee84:	sub	sp, fp, #8
   1ee88:	pop	{r4, sl, fp, pc}
   1ee8c:	ldrb	r2, [r0]
   1ee90:	cmp	r2, #0
   1ee94:	beq	1eec0 <__assert_fail@plt+0xd5d4>
   1ee98:	add	r3, r0, #1
   1ee9c:	mov	r0, #0
   1eea0:	ror	r0, r0, #23
   1eea4:	uxtab	r0, r0, r2
   1eea8:	ldrb	r2, [r3], #1
   1eeac:	cmp	r2, #0
   1eeb0:	bne	1eea0 <__assert_fail@plt+0xd5b4>
   1eeb4:	udiv	r2, r0, r1
   1eeb8:	mls	r0, r2, r1, r0
   1eebc:	bx	lr
   1eec0:	mov	r0, #0
   1eec4:	udiv	r2, r0, r1
   1eec8:	mls	r0, r2, r1, r0
   1eecc:	bx	lr
   1eed0:	push	{fp, lr}
   1eed4:	mov	fp, sp
   1eed8:	mov	r0, #14
   1eedc:	bl	11820 <nl_langinfo@plt>
   1eee0:	movw	r1, #903	; 0x387
   1eee4:	cmp	r0, #0
   1eee8:	movt	r1, #2
   1eeec:	movne	r1, r0
   1eef0:	movw	r0, #4243	; 0x1093
   1eef4:	ldrb	r2, [r1]
   1eef8:	movt	r0, #2
   1eefc:	cmp	r2, #0
   1ef00:	movne	r0, r1
   1ef04:	pop	{fp, pc}
   1ef08:	cmp	r2, #0
   1ef0c:	beq	1ef3c <__assert_fail@plt+0xd650>
   1ef10:	mvn	r3, #0
   1ef14:	udiv	r3, r3, r2
   1ef18:	cmp	r3, r1
   1ef1c:	bcs	1ef3c <__assert_fail@plt+0xd650>
   1ef20:	push	{fp, lr}
   1ef24:	mov	fp, sp
   1ef28:	bl	11748 <__errno_location@plt>
   1ef2c:	mov	r1, #12
   1ef30:	str	r1, [r0]
   1ef34:	mov	r0, #0
   1ef38:	pop	{fp, pc}
   1ef3c:	mul	r1, r2, r1
   1ef40:	b	1d640 <__assert_fail@plt+0xbd54>
   1ef44:	push	{r4, r5, r6, r7, fp, lr}
   1ef48:	add	fp, sp, #16
   1ef4c:	mov	r4, r1
   1ef50:	mov	r1, #0
   1ef54:	mov	r6, r2
   1ef58:	bl	117f0 <setlocale@plt>
   1ef5c:	cmp	r0, #0
   1ef60:	beq	1ef90 <__assert_fail@plt+0xd6a4>
   1ef64:	mov	r7, r0
   1ef68:	bl	11718 <strlen@plt>
   1ef6c:	cmp	r0, r6
   1ef70:	bcs	1efb0 <__assert_fail@plt+0xd6c4>
   1ef74:	add	r2, r0, #1
   1ef78:	mov	r0, r4
   1ef7c:	mov	r1, r7
   1ef80:	bl	11574 <memcpy@plt>
   1ef84:	mov	r5, #0
   1ef88:	mov	r0, r5
   1ef8c:	pop	{r4, r5, r6, r7, fp, pc}
   1ef90:	cmp	r6, #0
   1ef94:	mov	r5, #22
   1ef98:	movne	r0, #0
   1ef9c:	strbne	r0, [r4]
   1efa0:	movne	r0, r5
   1efa4:	popne	{r4, r5, r6, r7, fp, pc}
   1efa8:	mov	r0, r5
   1efac:	pop	{r4, r5, r6, r7, fp, pc}
   1efb0:	mov	r5, #34	; 0x22
   1efb4:	cmp	r6, #0
   1efb8:	beq	1efd8 <__assert_fail@plt+0xd6ec>
   1efbc:	sub	r6, r6, #1
   1efc0:	mov	r0, r4
   1efc4:	mov	r1, r7
   1efc8:	mov	r2, r6
   1efcc:	bl	11574 <memcpy@plt>
   1efd0:	mov	r0, #0
   1efd4:	strb	r0, [r4, r6]
   1efd8:	mov	r0, r5
   1efdc:	pop	{r4, r5, r6, r7, fp, pc}
   1efe0:	mov	r1, #0
   1efe4:	b	117f0 <setlocale@plt>
   1efe8:	push	{r4, r5, r6, r7, fp, lr}
   1efec:	add	fp, sp, #16
   1eff0:	mov	r4, r0
   1eff4:	cmp	r0, #2
   1eff8:	movhi	r0, r4
   1effc:	pophi	{r4, r5, r6, r7, fp, pc}
   1f000:	mov	r0, r4
   1f004:	bl	1f02c <__assert_fail@plt+0xd740>
   1f008:	mov	r5, r0
   1f00c:	bl	11748 <__errno_location@plt>
   1f010:	ldr	r7, [r0]
   1f014:	mov	r6, r0
   1f018:	mov	r0, r4
   1f01c:	bl	118c8 <close@plt>
   1f020:	mov	r0, r5
   1f024:	str	r7, [r6]
   1f028:	pop	{r4, r5, r6, r7, fp, pc}
   1f02c:	mov	r1, #0
   1f030:	mov	r2, #3
   1f034:	b	1f038 <__assert_fail@plt+0xd74c>
   1f038:	sub	sp, sp, #8
   1f03c:	push	{r4, r5, r6, r7, fp, lr}
   1f040:	add	fp, sp, #16
   1f044:	sub	sp, sp, #8
   1f048:	mov	r5, r0
   1f04c:	add	r0, fp, #8
   1f050:	cmp	r1, #11
   1f054:	str	r3, [fp, #12]
   1f058:	str	r2, [fp, #8]
   1f05c:	str	r0, [sp, #4]
   1f060:	bhi	1f09c <__assert_fail@plt+0xd7b0>
   1f064:	mov	r0, #1
   1f068:	movw	r2, #1300	; 0x514
   1f06c:	tst	r2, r0, lsl r1
   1f070:	bne	1f15c <__assert_fail@plt+0xd870>
   1f074:	movw	r2, #2570	; 0xa0a
   1f078:	tst	r2, r0, lsl r1
   1f07c:	bne	1f0c4 <__assert_fail@plt+0xd7d8>
   1f080:	cmp	r1, #0
   1f084:	bne	1f09c <__assert_fail@plt+0xd7b0>
   1f088:	ldr	r0, [sp, #4]
   1f08c:	add	r1, r0, #4
   1f090:	str	r1, [sp, #4]
   1f094:	mov	r1, #0
   1f098:	b	1f168 <__assert_fail@plt+0xd87c>
   1f09c:	sub	r0, r1, #1024	; 0x400
   1f0a0:	cmp	r0, #10
   1f0a4:	bhi	1f15c <__assert_fail@plt+0xd870>
   1f0a8:	mov	r2, #1
   1f0ac:	movw	r3, #645	; 0x285
   1f0b0:	tst	r3, r2, lsl r0
   1f0b4:	bne	1f15c <__assert_fail@plt+0xd870>
   1f0b8:	movw	r3, #1282	; 0x502
   1f0bc:	tst	r3, r2, lsl r0
   1f0c0:	beq	1f0d0 <__assert_fail@plt+0xd7e4>
   1f0c4:	mov	r0, r5
   1f0c8:	bl	117d8 <fcntl64@plt>
   1f0cc:	b	1f174 <__assert_fail@plt+0xd888>
   1f0d0:	cmp	r0, #6
   1f0d4:	bne	1f15c <__assert_fail@plt+0xd870>
   1f0d8:	ldr	r0, [sp, #4]
   1f0dc:	movw	r7, #9456	; 0x24f0
   1f0e0:	movt	r7, #3
   1f0e4:	add	r1, r0, #4
   1f0e8:	str	r1, [sp, #4]
   1f0ec:	ldr	r6, [r0]
   1f0f0:	ldr	r0, [r7]
   1f0f4:	cmp	r0, #0
   1f0f8:	blt	1f198 <__assert_fail@plt+0xd8ac>
   1f0fc:	mov	r0, r5
   1f100:	movw	r1, #1030	; 0x406
   1f104:	mov	r2, r6
   1f108:	bl	117d8 <fcntl64@plt>
   1f10c:	mov	r4, r0
   1f110:	cmn	r0, #1
   1f114:	bgt	1f18c <__assert_fail@plt+0xd8a0>
   1f118:	bl	11748 <__errno_location@plt>
   1f11c:	ldr	r0, [r0]
   1f120:	cmp	r0, #22
   1f124:	bne	1f18c <__assert_fail@plt+0xd8a0>
   1f128:	mov	r0, r5
   1f12c:	mov	r1, #0
   1f130:	mov	r2, r6
   1f134:	bl	117d8 <fcntl64@plt>
   1f138:	mov	r4, r0
   1f13c:	cmp	r0, #0
   1f140:	blt	1f178 <__assert_fail@plt+0xd88c>
   1f144:	mvn	r0, #0
   1f148:	str	r0, [r7]
   1f14c:	mov	r0, #1
   1f150:	cmp	r0, #0
   1f154:	bne	1f1c4 <__assert_fail@plt+0xd8d8>
   1f158:	b	1f178 <__assert_fail@plt+0xd88c>
   1f15c:	ldr	r0, [sp, #4]
   1f160:	add	r2, r0, #4
   1f164:	str	r2, [sp, #4]
   1f168:	ldr	r2, [r0]
   1f16c:	mov	r0, r5
   1f170:	bl	117d8 <fcntl64@plt>
   1f174:	mov	r4, r0
   1f178:	mov	r0, r4
   1f17c:	sub	sp, fp, #16
   1f180:	pop	{r4, r5, r6, r7, fp, lr}
   1f184:	add	sp, sp, #8
   1f188:	bx	lr
   1f18c:	mov	r0, #1
   1f190:	str	r0, [r7]
   1f194:	b	1f178 <__assert_fail@plt+0xd88c>
   1f198:	mov	r0, r5
   1f19c:	mov	r1, #0
   1f1a0:	mov	r2, r6
   1f1a4:	bl	117d8 <fcntl64@plt>
   1f1a8:	mov	r4, r0
   1f1ac:	ldr	r0, [r7]
   1f1b0:	add	r0, r0, #1
   1f1b4:	clz	r0, r0
   1f1b8:	lsr	r0, r0, #5
   1f1bc:	cmp	r0, #0
   1f1c0:	beq	1f178 <__assert_fail@plt+0xd88c>
   1f1c4:	cmp	r4, #0
   1f1c8:	blt	1f178 <__assert_fail@plt+0xd88c>
   1f1cc:	mov	r0, r4
   1f1d0:	mov	r1, #1
   1f1d4:	bl	117d8 <fcntl64@plt>
   1f1d8:	cmp	r0, #0
   1f1dc:	blt	1f1f8 <__assert_fail@plt+0xd90c>
   1f1e0:	orr	r2, r0, #1
   1f1e4:	mov	r0, r4
   1f1e8:	mov	r1, #2
   1f1ec:	bl	117d8 <fcntl64@plt>
   1f1f0:	cmn	r0, #1
   1f1f4:	bne	1f178 <__assert_fail@plt+0xd88c>
   1f1f8:	bl	11748 <__errno_location@plt>
   1f1fc:	ldr	r6, [r0]
   1f200:	mov	r5, r0
   1f204:	mov	r0, r4
   1f208:	bl	118c8 <close@plt>
   1f20c:	str	r6, [r5]
   1f210:	mvn	r4, #0
   1f214:	b	1f178 <__assert_fail@plt+0xd88c>
   1f218:	eor	r1, r1, #-2147483648	; 0x80000000
   1f21c:	b	1f224 <__assert_fail@plt+0xd938>
   1f220:	eor	r3, r3, #-2147483648	; 0x80000000
   1f224:	push	{r4, r5, lr}
   1f228:	lsl	r4, r1, #1
   1f22c:	lsl	r5, r3, #1
   1f230:	teq	r4, r5
   1f234:	teqeq	r0, r2
   1f238:	orrsne	ip, r4, r0
   1f23c:	orrsne	ip, r5, r2
   1f240:	mvnsne	ip, r4, asr #21
   1f244:	mvnsne	ip, r5, asr #21
   1f248:	beq	1f434 <__assert_fail@plt+0xdb48>
   1f24c:	lsr	r4, r4, #21
   1f250:	rsbs	r5, r4, r5, lsr #21
   1f254:	rsblt	r5, r5, #0
   1f258:	ble	1f278 <__assert_fail@plt+0xd98c>
   1f25c:	add	r4, r4, r5
   1f260:	eor	r2, r0, r2
   1f264:	eor	r3, r1, r3
   1f268:	eor	r0, r2, r0
   1f26c:	eor	r1, r3, r1
   1f270:	eor	r2, r0, r2
   1f274:	eor	r3, r1, r3
   1f278:	cmp	r5, #54	; 0x36
   1f27c:	pophi	{r4, r5, pc}
   1f280:	tst	r1, #-2147483648	; 0x80000000
   1f284:	lsl	r1, r1, #12
   1f288:	mov	ip, #1048576	; 0x100000
   1f28c:	orr	r1, ip, r1, lsr #12
   1f290:	beq	1f29c <__assert_fail@plt+0xd9b0>
   1f294:	rsbs	r0, r0, #0
   1f298:	rsc	r1, r1, #0
   1f29c:	tst	r3, #-2147483648	; 0x80000000
   1f2a0:	lsl	r3, r3, #12
   1f2a4:	orr	r3, ip, r3, lsr #12
   1f2a8:	beq	1f2b4 <__assert_fail@plt+0xd9c8>
   1f2ac:	rsbs	r2, r2, #0
   1f2b0:	rsc	r3, r3, #0
   1f2b4:	teq	r4, r5
   1f2b8:	beq	1f41c <__assert_fail@plt+0xdb30>
   1f2bc:	sub	r4, r4, #1
   1f2c0:	rsbs	lr, r5, #32
   1f2c4:	blt	1f2e0 <__assert_fail@plt+0xd9f4>
   1f2c8:	lsl	ip, r2, lr
   1f2cc:	adds	r0, r0, r2, lsr r5
   1f2d0:	adc	r1, r1, #0
   1f2d4:	adds	r0, r0, r3, lsl lr
   1f2d8:	adcs	r1, r1, r3, asr r5
   1f2dc:	b	1f2fc <__assert_fail@plt+0xda10>
   1f2e0:	sub	r5, r5, #32
   1f2e4:	add	lr, lr, #32
   1f2e8:	cmp	r2, #1
   1f2ec:	lsl	ip, r3, lr
   1f2f0:	orrcs	ip, ip, #2
   1f2f4:	adds	r0, r0, r3, asr r5
   1f2f8:	adcs	r1, r1, r3, asr #31
   1f2fc:	and	r5, r1, #-2147483648	; 0x80000000
   1f300:	bpl	1f310 <__assert_fail@plt+0xda24>
   1f304:	rsbs	ip, ip, #0
   1f308:	rscs	r0, r0, #0
   1f30c:	rsc	r1, r1, #0
   1f310:	cmp	r1, #1048576	; 0x100000
   1f314:	bcc	1f354 <__assert_fail@plt+0xda68>
   1f318:	cmp	r1, #2097152	; 0x200000
   1f31c:	bcc	1f33c <__assert_fail@plt+0xda50>
   1f320:	lsrs	r1, r1, #1
   1f324:	rrxs	r0, r0
   1f328:	rrx	ip, ip
   1f32c:	add	r4, r4, #1
   1f330:	lsl	r2, r4, #21
   1f334:	cmn	r2, #4194304	; 0x400000
   1f338:	bcs	1f494 <__assert_fail@plt+0xdba8>
   1f33c:	cmp	ip, #-2147483648	; 0x80000000
   1f340:	lsrseq	ip, r0, #1
   1f344:	adcs	r0, r0, #0
   1f348:	adc	r1, r1, r4, lsl #20
   1f34c:	orr	r1, r1, r5
   1f350:	pop	{r4, r5, pc}
   1f354:	lsls	ip, ip, #1
   1f358:	adcs	r0, r0, r0
   1f35c:	adc	r1, r1, r1
   1f360:	tst	r1, #1048576	; 0x100000
   1f364:	sub	r4, r4, #1
   1f368:	bne	1f33c <__assert_fail@plt+0xda50>
   1f36c:	teq	r1, #0
   1f370:	moveq	r1, r0
   1f374:	moveq	r0, #0
   1f378:	clz	r3, r1
   1f37c:	addeq	r3, r3, #32
   1f380:	sub	r3, r3, #11
   1f384:	subs	r2, r3, #32
   1f388:	bge	1f3ac <__assert_fail@plt+0xdac0>
   1f38c:	adds	r2, r2, #12
   1f390:	ble	1f3a8 <__assert_fail@plt+0xdabc>
   1f394:	add	ip, r2, #20
   1f398:	rsb	r2, r2, #12
   1f39c:	lsl	r0, r1, ip
   1f3a0:	lsr	r1, r1, r2
   1f3a4:	b	1f3bc <__assert_fail@plt+0xdad0>
   1f3a8:	add	r2, r2, #20
   1f3ac:	rsble	ip, r2, #32
   1f3b0:	lsl	r1, r1, r2
   1f3b4:	orrle	r1, r1, r0, lsr ip
   1f3b8:	lslle	r0, r0, r2
   1f3bc:	subs	r4, r4, r3
   1f3c0:	addge	r1, r1, r4, lsl #20
   1f3c4:	orrge	r1, r1, r5
   1f3c8:	popge	{r4, r5, pc}
   1f3cc:	mvn	r4, r4
   1f3d0:	subs	r4, r4, #31
   1f3d4:	bge	1f410 <__assert_fail@plt+0xdb24>
   1f3d8:	adds	r4, r4, #12
   1f3dc:	bgt	1f3f8 <__assert_fail@plt+0xdb0c>
   1f3e0:	add	r4, r4, #20
   1f3e4:	rsb	r2, r4, #32
   1f3e8:	lsr	r0, r0, r4
   1f3ec:	orr	r0, r0, r1, lsl r2
   1f3f0:	orr	r1, r5, r1, lsr r4
   1f3f4:	pop	{r4, r5, pc}
   1f3f8:	rsb	r4, r4, #12
   1f3fc:	rsb	r2, r4, #32
   1f400:	lsr	r0, r0, r2
   1f404:	orr	r0, r0, r1, lsl r4
   1f408:	mov	r1, r5
   1f40c:	pop	{r4, r5, pc}
   1f410:	lsr	r0, r1, r4
   1f414:	mov	r1, r5
   1f418:	pop	{r4, r5, pc}
   1f41c:	teq	r4, #0
   1f420:	eor	r3, r3, #1048576	; 0x100000
   1f424:	eoreq	r1, r1, #1048576	; 0x100000
   1f428:	addeq	r4, r4, #1
   1f42c:	subne	r5, r5, #1
   1f430:	b	1f2bc <__assert_fail@plt+0xd9d0>
   1f434:	mvns	ip, r4, asr #21
   1f438:	mvnsne	ip, r5, asr #21
   1f43c:	beq	1f4a4 <__assert_fail@plt+0xdbb8>
   1f440:	teq	r4, r5
   1f444:	teqeq	r0, r2
   1f448:	beq	1f45c <__assert_fail@plt+0xdb70>
   1f44c:	orrs	ip, r4, r0
   1f450:	moveq	r1, r3
   1f454:	moveq	r0, r2
   1f458:	pop	{r4, r5, pc}
   1f45c:	teq	r1, r3
   1f460:	movne	r1, #0
   1f464:	movne	r0, #0
   1f468:	popne	{r4, r5, pc}
   1f46c:	lsrs	ip, r4, #21
   1f470:	bne	1f484 <__assert_fail@plt+0xdb98>
   1f474:	lsls	r0, r0, #1
   1f478:	adcs	r1, r1, r1
   1f47c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1f480:	pop	{r4, r5, pc}
   1f484:	adds	r4, r4, #4194304	; 0x400000
   1f488:	addcc	r1, r1, #1048576	; 0x100000
   1f48c:	popcc	{r4, r5, pc}
   1f490:	and	r5, r1, #-2147483648	; 0x80000000
   1f494:	orr	r1, r5, #2130706432	; 0x7f000000
   1f498:	orr	r1, r1, #15728640	; 0xf00000
   1f49c:	mov	r0, #0
   1f4a0:	pop	{r4, r5, pc}
   1f4a4:	mvns	ip, r4, asr #21
   1f4a8:	movne	r1, r3
   1f4ac:	movne	r0, r2
   1f4b0:	mvnseq	ip, r5, asr #21
   1f4b4:	movne	r3, r1
   1f4b8:	movne	r2, r0
   1f4bc:	orrs	r4, r0, r1, lsl #12
   1f4c0:	orrseq	r5, r2, r3, lsl #12
   1f4c4:	teqeq	r1, r3
   1f4c8:	orrne	r1, r1, #524288	; 0x80000
   1f4cc:	pop	{r4, r5, pc}
   1f4d0:	teq	r0, #0
   1f4d4:	moveq	r1, #0
   1f4d8:	bxeq	lr
   1f4dc:	push	{r4, r5, lr}
   1f4e0:	mov	r4, #1024	; 0x400
   1f4e4:	add	r4, r4, #50	; 0x32
   1f4e8:	mov	r5, #0
   1f4ec:	mov	r1, #0
   1f4f0:	b	1f36c <__assert_fail@plt+0xda80>
   1f4f4:	teq	r0, #0
   1f4f8:	moveq	r1, #0
   1f4fc:	bxeq	lr
   1f500:	push	{r4, r5, lr}
   1f504:	mov	r4, #1024	; 0x400
   1f508:	add	r4, r4, #50	; 0x32
   1f50c:	ands	r5, r0, #-2147483648	; 0x80000000
   1f510:	rsbmi	r0, r0, #0
   1f514:	mov	r1, #0
   1f518:	b	1f36c <__assert_fail@plt+0xda80>
   1f51c:	lsls	r2, r0, #1
   1f520:	asr	r1, r2, #3
   1f524:	rrx	r1, r1
   1f528:	lsl	r0, r2, #28
   1f52c:	andsne	r3, r2, #-16777216	; 0xff000000
   1f530:	teqne	r3, #-16777216	; 0xff000000
   1f534:	eorne	r1, r1, #939524096	; 0x38000000
   1f538:	bxne	lr
   1f53c:	bics	r2, r2, #-16777216	; 0xff000000
   1f540:	bxeq	lr
   1f544:	teq	r3, #-16777216	; 0xff000000
   1f548:	orreq	r1, r1, #524288	; 0x80000
   1f54c:	bxeq	lr
   1f550:	push	{r4, r5, lr}
   1f554:	mov	r4, #896	; 0x380
   1f558:	and	r5, r1, #-2147483648	; 0x80000000
   1f55c:	bic	r1, r1, #-2147483648	; 0x80000000
   1f560:	b	1f36c <__assert_fail@plt+0xda80>
   1f564:	orrs	r2, r0, r1
   1f568:	bxeq	lr
   1f56c:	push	{r4, r5, lr}
   1f570:	mov	r5, #0
   1f574:	b	1f594 <__assert_fail@plt+0xdca8>
   1f578:	orrs	r2, r0, r1
   1f57c:	bxeq	lr
   1f580:	push	{r4, r5, lr}
   1f584:	ands	r5, r1, #-2147483648	; 0x80000000
   1f588:	bpl	1f594 <__assert_fail@plt+0xdca8>
   1f58c:	rsbs	r0, r0, #0
   1f590:	rsc	r1, r1, #0
   1f594:	mov	r4, #1024	; 0x400
   1f598:	add	r4, r4, #50	; 0x32
   1f59c:	lsrs	ip, r1, #22
   1f5a0:	beq	1f310 <__assert_fail@plt+0xda24>
   1f5a4:	mov	r2, #3
   1f5a8:	lsrs	ip, ip, #3
   1f5ac:	addne	r2, r2, #3
   1f5b0:	lsrs	ip, ip, #3
   1f5b4:	addne	r2, r2, #3
   1f5b8:	add	r2, r2, ip, lsr #3
   1f5bc:	rsb	r3, r2, #32
   1f5c0:	lsl	ip, r0, r3
   1f5c4:	lsr	r0, r0, r2
   1f5c8:	orr	r0, r0, r1, lsl r3
   1f5cc:	lsr	r1, r1, r2
   1f5d0:	add	r4, r4, r2
   1f5d4:	b	1f310 <__assert_fail@plt+0xda24>
   1f5d8:	cmp	r3, #0
   1f5dc:	cmpeq	r2, #0
   1f5e0:	bne	1f5f8 <__assert_fail@plt+0xdd0c>
   1f5e4:	cmp	r1, #0
   1f5e8:	cmpeq	r0, #0
   1f5ec:	mvnne	r1, #0
   1f5f0:	mvnne	r0, #0
   1f5f4:	b	1f614 <__assert_fail@plt+0xdd28>
   1f5f8:	sub	sp, sp, #8
   1f5fc:	push	{sp, lr}
   1f600:	bl	1f668 <__assert_fail@plt+0xdd7c>
   1f604:	ldr	lr, [sp, #4]
   1f608:	add	sp, sp, #8
   1f60c:	pop	{r2, r3}
   1f610:	bx	lr
   1f614:	push	{r1, lr}
   1f618:	mov	r0, #8
   1f61c:	bl	114fc <raise@plt>
   1f620:	pop	{r1, pc}
   1f624:	andeq	r0, r0, r0
   1f628:	vmov	d6, r0, r1
   1f62c:	vldr	d7, [pc, #36]	; 1f658 <__assert_fail@plt+0xdd6c>
   1f630:	vldr	d5, [pc, #40]	; 1f660 <__assert_fail@plt+0xdd74>
   1f634:	vmul.f64	d7, d6, d7
   1f638:	vcvt.u32.f64	s14, d7
   1f63c:	vcvt.f64.u32	d4, s14
   1f640:	vmov	r1, s14
   1f644:	vmls.f64	d6, d4, d5
   1f648:	vcvt.u32.f64	s15, d6
   1f64c:	vmov	r0, s15
   1f650:	bx	lr
   1f654:	nop			; (mov r0, r0)
   1f658:	andeq	r0, r0, r0
   1f65c:	ldclcc	0, cr0, [r0]
   1f660:	andeq	r0, r0, r0
   1f664:	mvnsmi	r0, r0
   1f668:	cmp	r1, r3
   1f66c:	cmpeq	r0, r2
   1f670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f674:	mov	r4, r0
   1f678:	movcc	r0, #0
   1f67c:	mov	r5, r1
   1f680:	ldr	lr, [sp, #36]	; 0x24
   1f684:	movcc	r1, r0
   1f688:	bcc	1f784 <__assert_fail@plt+0xde98>
   1f68c:	cmp	r3, #0
   1f690:	clzeq	ip, r2
   1f694:	clzne	ip, r3
   1f698:	addeq	ip, ip, #32
   1f69c:	cmp	r5, #0
   1f6a0:	clzeq	r1, r4
   1f6a4:	addeq	r1, r1, #32
   1f6a8:	clzne	r1, r5
   1f6ac:	sub	ip, ip, r1
   1f6b0:	sub	sl, ip, #32
   1f6b4:	lsl	r9, r3, ip
   1f6b8:	rsb	fp, ip, #32
   1f6bc:	orr	r9, r9, r2, lsl sl
   1f6c0:	orr	r9, r9, r2, lsr fp
   1f6c4:	lsl	r8, r2, ip
   1f6c8:	cmp	r5, r9
   1f6cc:	cmpeq	r4, r8
   1f6d0:	movcc	r0, #0
   1f6d4:	movcc	r1, r0
   1f6d8:	bcc	1f6f4 <__assert_fail@plt+0xde08>
   1f6dc:	mov	r0, #1
   1f6e0:	subs	r4, r4, r8
   1f6e4:	lsl	r1, r0, sl
   1f6e8:	orr	r1, r1, r0, lsr fp
   1f6ec:	lsl	r0, r0, ip
   1f6f0:	sbc	r5, r5, r9
   1f6f4:	cmp	ip, #0
   1f6f8:	beq	1f784 <__assert_fail@plt+0xde98>
   1f6fc:	lsr	r6, r8, #1
   1f700:	orr	r6, r6, r9, lsl #31
   1f704:	lsr	r7, r9, #1
   1f708:	mov	r2, ip
   1f70c:	b	1f730 <__assert_fail@plt+0xde44>
   1f710:	subs	r3, r4, r6
   1f714:	sbc	r8, r5, r7
   1f718:	adds	r3, r3, r3
   1f71c:	adc	r8, r8, r8
   1f720:	adds	r4, r3, #1
   1f724:	adc	r5, r8, #0
   1f728:	subs	r2, r2, #1
   1f72c:	beq	1f74c <__assert_fail@plt+0xde60>
   1f730:	cmp	r5, r7
   1f734:	cmpeq	r4, r6
   1f738:	bcs	1f710 <__assert_fail@plt+0xde24>
   1f73c:	adds	r4, r4, r4
   1f740:	adc	r5, r5, r5
   1f744:	subs	r2, r2, #1
   1f748:	bne	1f730 <__assert_fail@plt+0xde44>
   1f74c:	lsr	r3, r4, ip
   1f750:	orr	r3, r3, r5, lsl fp
   1f754:	lsr	r2, r5, ip
   1f758:	orr	r3, r3, r5, lsr sl
   1f75c:	adds	r0, r0, r4
   1f760:	mov	r4, r3
   1f764:	lsl	r3, r2, ip
   1f768:	orr	r3, r3, r4, lsl sl
   1f76c:	lsl	ip, r4, ip
   1f770:	orr	r3, r3, r4, lsr fp
   1f774:	adc	r1, r1, r5
   1f778:	subs	r0, r0, ip
   1f77c:	mov	r5, r2
   1f780:	sbc	r1, r1, r3
   1f784:	cmp	lr, #0
   1f788:	strdne	r4, [lr]
   1f78c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f790:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f794:	mov	r7, r0
   1f798:	ldr	r6, [pc, #72]	; 1f7e8 <__assert_fail@plt+0xdefc>
   1f79c:	ldr	r5, [pc, #72]	; 1f7ec <__assert_fail@plt+0xdf00>
   1f7a0:	add	r6, pc, r6
   1f7a4:	add	r5, pc, r5
   1f7a8:	sub	r6, r6, r5
   1f7ac:	mov	r8, r1
   1f7b0:	mov	r9, r2
   1f7b4:	bl	114c4 <calloc@plt-0x20>
   1f7b8:	asrs	r6, r6, #2
   1f7bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f7c0:	mov	r4, #0
   1f7c4:	add	r4, r4, #1
   1f7c8:	ldr	r3, [r5], #4
   1f7cc:	mov	r2, r9
   1f7d0:	mov	r1, r8
   1f7d4:	mov	r0, r7
   1f7d8:	blx	r3
   1f7dc:	cmp	r6, r4
   1f7e0:	bne	1f7c4 <__assert_fail@plt+0xded8>
   1f7e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f7e8:	andeq	r2, r1, r4, ror #14
   1f7ec:	andeq	r2, r1, ip, asr r7
   1f7f0:	bx	lr
   1f7f4:	ldr	r3, [pc, #12]	; 1f808 <__assert_fail@plt+0xdf1c>
   1f7f8:	mov	r1, #0
   1f7fc:	add	r3, pc, r3
   1f800:	ldr	r2, [r3]
   1f804:	b	11760 <__cxa_atexit@plt>
   1f808:	andeq	r2, r1, r0, ror r9

Disassembly of section .fini:

0001f80c <.fini>:
   1f80c:	push	{r3, lr}
   1f810:	pop	{r3, pc}
