
../repos/coreutils/src/tail:     file format elf32-littlearm


Disassembly of section .init:

00011268 <.init>:
   11268:	push	{r3, lr}
   1126c:	bl	11634 <__assert_fail@plt+0x4c>
   11270:	pop	{r3, pc}

Disassembly of section .plt:

00011274 <fstatfs64@plt-0x14>:
   11274:	push	{lr}		; (str lr, [sp, #-4]!)
   11278:	ldr	lr, [pc, #4]	; 11284 <fstatfs64@plt-0x4>
   1127c:	add	lr, pc, lr
   11280:	ldr	pc, [lr, #8]!
   11284:	andeq	sp, r1, ip, ror sp

00011288 <fstatfs64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #118784	; 0x1d000
   11290:	ldr	pc, [ip, #3452]!	; 0xd7c

00011294 <calloc@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #118784	; 0x1d000
   1129c:	ldr	pc, [ip, #3444]!	; 0xd74

000112a0 <fputs_unlocked@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #118784	; 0x1d000
   112a8:	ldr	pc, [ip, #3436]!	; 0xd6c

000112ac <raise@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #118784	; 0x1d000
   112b4:	ldr	pc, [ip, #3428]!	; 0xd64

000112b8 <strcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #118784	; 0x1d000
   112c0:	ldr	pc, [ip, #3420]!	; 0xd5c

000112c4 <strtol@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #118784	; 0x1d000
   112cc:	ldr	pc, [ip, #3412]!	; 0xd54

000112d0 <pause@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #118784	; 0x1d000
   112d8:	ldr	pc, [ip, #3404]!	; 0xd4c

000112dc <read@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #118784	; 0x1d000
   112e4:	ldr	pc, [ip, #3396]!	; 0xd44

000112e8 <fflush@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #118784	; 0x1d000
   112f0:	ldr	pc, [ip, #3388]!	; 0xd3c

000112f4 <free@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #118784	; 0x1d000
   112fc:	ldr	pc, [ip, #3380]!	; 0xd34

00011300 <nanosleep@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #118784	; 0x1d000
   11308:	ldr	pc, [ip, #3372]!	; 0xd2c

0001130c <_exit@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #118784	; 0x1d000
   11314:	ldr	pc, [ip, #3364]!	; 0xd24

00011318 <memcpy@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #118784	; 0x1d000
   11320:	ldr	pc, [ip, #3356]!	; 0xd1c

00011324 <__strtoull_internal@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #118784	; 0x1d000
   1132c:	ldr	pc, [ip, #3348]!	; 0xd14

00011330 <mbsinit@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #118784	; 0x1d000
   11338:	ldr	pc, [ip, #3340]!	; 0xd0c

0001133c <fwrite_unlocked@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #118784	; 0x1d000
   11344:	ldr	pc, [ip, #3332]!	; 0xd04

00011348 <dcgettext@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #118784	; 0x1d000
   11350:	ldr	pc, [ip, #3324]!	; 0xcfc

00011354 <realloc@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #118784	; 0x1d000
   1135c:	ldr	pc, [ip, #3316]!	; 0xcf4

00011360 <textdomain@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #118784	; 0x1d000
   11368:	ldr	pc, [ip, #3308]!	; 0xcec

0001136c <rawmemchr@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #118784	; 0x1d000
   11374:	ldr	pc, [ip, #3300]!	; 0xce4

00011378 <fflush_unlocked@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #118784	; 0x1d000
   11380:	ldr	pc, [ip, #3292]!	; 0xcdc

00011384 <iswprint@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #118784	; 0x1d000
   1138c:	ldr	pc, [ip, #3284]!	; 0xcd4

00011390 <poll@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #118784	; 0x1d000
   11398:	ldr	pc, [ip, #3276]!	; 0xccc

0001139c <__fxstat64@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #118784	; 0x1d000
   113a4:	ldr	pc, [ip, #3268]!	; 0xcc4

000113a8 <fwrite@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #118784	; 0x1d000
   113b0:	ldr	pc, [ip, #3260]!	; 0xcbc

000113b4 <lseek64@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #118784	; 0x1d000
   113bc:	ldr	pc, [ip, #3252]!	; 0xcb4

000113c0 <__ctype_get_mb_cur_max@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #118784	; 0x1d000
   113c8:	ldr	pc, [ip, #3244]!	; 0xcac

000113cc <__fpending@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #118784	; 0x1d000
   113d4:	ldr	pc, [ip, #3236]!	; 0xca4

000113d8 <mbrtowc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #118784	; 0x1d000
   113e0:	ldr	pc, [ip, #3228]!	; 0xc9c

000113e4 <error@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #118784	; 0x1d000
   113ec:	ldr	pc, [ip, #3220]!	; 0xc94

000113f0 <open64@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #118784	; 0x1d000
   113f8:	ldr	pc, [ip, #3212]!	; 0xc8c

000113fc <getenv@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #118784	; 0x1d000
   11404:	ldr	pc, [ip, #3204]!	; 0xc84

00011408 <malloc@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #118784	; 0x1d000
   11410:	ldr	pc, [ip, #3196]!	; 0xc7c

00011414 <__libc_start_main@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #118784	; 0x1d000
   1141c:	ldr	pc, [ip, #3188]!	; 0xc74

00011420 <__freading@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #118784	; 0x1d000
   11428:	ldr	pc, [ip, #3180]!	; 0xc6c

0001142c <__gmon_start__@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #118784	; 0x1d000
   11434:	ldr	pc, [ip, #3172]!	; 0xc64

00011438 <getopt_long@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #118784	; 0x1d000
   11440:	ldr	pc, [ip, #3164]!	; 0xc5c

00011444 <kill@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #118784	; 0x1d000
   1144c:	ldr	pc, [ip, #3156]!	; 0xc54

00011450 <__ctype_b_loc@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #118784	; 0x1d000
   11458:	ldr	pc, [ip, #3148]!	; 0xc4c

0001145c <exit@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #118784	; 0x1d000
   11464:	ldr	pc, [ip, #3140]!	; 0xc44

00011468 <bcmp@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #118784	; 0x1d000
   11470:	ldr	pc, [ip, #3132]!	; 0xc3c

00011474 <strlen@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #118784	; 0x1d000
   1147c:	ldr	pc, [ip, #3124]!	; 0xc34

00011480 <inotify_init@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #118784	; 0x1d000
   11488:	ldr	pc, [ip, #3116]!	; 0xc2c

0001148c <strchr@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #118784	; 0x1d000
   11494:	ldr	pc, [ip, #3108]!	; 0xc24

00011498 <memrchr@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #118784	; 0x1d000
   114a0:	ldr	pc, [ip, #3100]!	; 0xc1c

000114a4 <inotify_add_watch@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #118784	; 0x1d000
   114ac:	ldr	pc, [ip, #3092]!	; 0xc14

000114b0 <__errno_location@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #118784	; 0x1d000
   114b8:	ldr	pc, [ip, #3084]!	; 0xc0c

000114bc <__cxa_atexit@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #118784	; 0x1d000
   114c4:	ldr	pc, [ip, #3076]!	; 0xc04

000114c8 <memset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #118784	; 0x1d000
   114d0:	ldr	pc, [ip, #3068]!	; 0xbfc

000114d4 <__printf_chk@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #118784	; 0x1d000
   114dc:	ldr	pc, [ip, #3060]!	; 0xbf4

000114e0 <strtod@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #118784	; 0x1d000
   114e8:	ldr	pc, [ip, #3052]!	; 0xbec

000114ec <fileno@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #118784	; 0x1d000
   114f4:	ldr	pc, [ip, #3044]!	; 0xbe4

000114f8 <__fprintf_chk@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #118784	; 0x1d000
   11500:	ldr	pc, [ip, #3036]!	; 0xbdc

00011504 <memchr@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #118784	; 0x1d000
   1150c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011510 <fclose@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #118784	; 0x1d000
   11518:	ldr	pc, [ip, #3020]!	; 0xbcc

0001151c <fseeko64@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #118784	; 0x1d000
   11524:	ldr	pc, [ip, #3012]!	; 0xbc4

00011528 <strtod_l@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #118784	; 0x1d000
   11530:	ldr	pc, [ip, #3004]!	; 0xbbc

00011534 <fcntl64@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #118784	; 0x1d000
   1153c:	ldr	pc, [ip, #2996]!	; 0xbb4

00011540 <__overflow@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #118784	; 0x1d000
   11548:	ldr	pc, [ip, #2988]!	; 0xbac

0001154c <setlocale@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #118784	; 0x1d000
   11554:	ldr	pc, [ip, #2980]!	; 0xba4

00011558 <strrchr@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #118784	; 0x1d000
   11560:	ldr	pc, [ip, #2972]!	; 0xb9c

00011564 <nl_langinfo@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #118784	; 0x1d000
   1156c:	ldr	pc, [ip, #2964]!	; 0xb94

00011570 <newlocale@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #118784	; 0x1d000
   11578:	ldr	pc, [ip, #2956]!	; 0xb8c

0001157c <clearerr_unlocked@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #118784	; 0x1d000
   11584:	ldr	pc, [ip, #2948]!	; 0xb84

00011588 <bindtextdomain@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #118784	; 0x1d000
   11590:	ldr	pc, [ip, #2940]!	; 0xb7c

00011594 <__xstat64@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #118784	; 0x1d000
   1159c:	ldr	pc, [ip, #2932]!	; 0xb74

000115a0 <isatty@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #118784	; 0x1d000
   115a8:	ldr	pc, [ip, #2924]!	; 0xb6c

000115ac <inotify_rm_watch@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #118784	; 0x1d000
   115b4:	ldr	pc, [ip, #2916]!	; 0xb64

000115b8 <strncmp@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #118784	; 0x1d000
   115c0:	ldr	pc, [ip, #2908]!	; 0xb5c

000115c4 <abort@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #118784	; 0x1d000
   115cc:	ldr	pc, [ip, #2900]!	; 0xb54

000115d0 <close@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #118784	; 0x1d000
   115d8:	ldr	pc, [ip, #2892]!	; 0xb4c

000115dc <__lxstat64@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #118784	; 0x1d000
   115e4:	ldr	pc, [ip, #2884]!	; 0xb44

000115e8 <__assert_fail@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #118784	; 0x1d000
   115f0:	ldr	pc, [ip, #2876]!	; 0xb3c

Disassembly of section .text:

000115f8 <.text>:
   115f8:	mov	fp, #0
   115fc:	mov	lr, #0
   11600:	pop	{r1}		; (ldr r1, [sp], #4)
   11604:	mov	r2, sp
   11608:	push	{r2}		; (str r2, [sp, #-4]!)
   1160c:	push	{r0}		; (str r0, [sp, #-4]!)
   11610:	ldr	ip, [pc, #16]	; 11628 <__assert_fail@plt+0x40>
   11614:	push	{ip}		; (str ip, [sp, #-4]!)
   11618:	ldr	r0, [pc, #12]	; 1162c <__assert_fail@plt+0x44>
   1161c:	ldr	r3, [pc, #12]	; 11630 <__assert_fail@plt+0x48>
   11620:	bl	11414 <__libc_start_main@plt>
   11624:	bl	115c4 <abort@plt>
   11628:	muleq	r1, r0, r0
   1162c:	andeq	r1, r1, r8, asr sl
   11630:	andeq	sp, r1, r0, lsr r0
   11634:	ldr	r3, [pc, #20]	; 11650 <__assert_fail@plt+0x68>
   11638:	ldr	r2, [pc, #20]	; 11654 <__assert_fail@plt+0x6c>
   1163c:	add	r3, pc, r3
   11640:	ldr	r2, [r3, r2]
   11644:	cmp	r2, #0
   11648:	bxeq	lr
   1164c:	b	1142c <__gmon_start__@plt>
   11650:			; <UNDEFINED> instruction: 0x0001d9bc
   11654:	andeq	r0, r0, r0, lsr r1
   11658:	ldr	r0, [pc, #24]	; 11678 <__assert_fail@plt+0x90>
   1165c:	ldr	r3, [pc, #24]	; 1167c <__assert_fail@plt+0x94>
   11660:	cmp	r3, r0
   11664:	bxeq	lr
   11668:	ldr	r3, [pc, #16]	; 11680 <__assert_fail@plt+0x98>
   1166c:	cmp	r3, #0
   11670:	bxeq	lr
   11674:	bx	r3
   11678:	andeq	pc, r2, r0, lsr #3
   1167c:	andeq	pc, r2, r0, lsr #3
   11680:	andeq	r0, r0, r0
   11684:	ldr	r0, [pc, #36]	; 116b0 <__assert_fail@plt+0xc8>
   11688:	ldr	r1, [pc, #36]	; 116b4 <__assert_fail@plt+0xcc>
   1168c:	sub	r1, r1, r0
   11690:	asr	r1, r1, #2
   11694:	add	r1, r1, r1, lsr #31
   11698:	asrs	r1, r1, #1
   1169c:	bxeq	lr
   116a0:	ldr	r3, [pc, #16]	; 116b8 <__assert_fail@plt+0xd0>
   116a4:	cmp	r3, #0
   116a8:	bxeq	lr
   116ac:	bx	r3
   116b0:	andeq	pc, r2, r0, lsr #3
   116b4:	andeq	pc, r2, r0, lsr #3
   116b8:	andeq	r0, r0, r0
   116bc:	push	{r4, lr}
   116c0:	ldr	r4, [pc, #24]	; 116e0 <__assert_fail@plt+0xf8>
   116c4:	ldrb	r3, [r4]
   116c8:	cmp	r3, #0
   116cc:	popne	{r4, pc}
   116d0:	bl	11658 <__assert_fail@plt+0x70>
   116d4:	mov	r3, #1
   116d8:	strb	r3, [r4]
   116dc:	pop	{r4, pc}
   116e0:			; <UNDEFINED> instruction: 0x0002f1bc
   116e4:	b	11684 <__assert_fail@plt+0x9c>
   116e8:	push	{fp, lr}
   116ec:	mov	fp, sp
   116f0:	sub	sp, sp, #56	; 0x38
   116f4:	mov	r4, r0
   116f8:	cmp	r0, #0
   116fc:	bne	11a14 <__assert_fail@plt+0x42c>
   11700:	movw	r1, #53475	; 0xd0e3
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	movt	r1, #1
   11710:	bl	11348 <dcgettext@plt>
   11714:	mov	r1, r0
   11718:	movw	r0, #61916	; 0xf1dc
   1171c:	movt	r0, #2
   11720:	ldr	r2, [r0]
   11724:	mov	r0, #1
   11728:	bl	114d4 <__printf_chk@plt>
   1172c:	movw	r1, #53508	; 0xd104
   11730:	mov	r0, #0
   11734:	mov	r2, #5
   11738:	movt	r1, #1
   1173c:	bl	11348 <dcgettext@plt>
   11740:	mov	r1, r0
   11744:	mov	r0, #1
   11748:	mov	r2, #10
   1174c:	bl	114d4 <__printf_chk@plt>
   11750:	movw	r1, #56121	; 0xdb39
   11754:	mov	r0, #0
   11758:	mov	r2, #5
   1175c:	movt	r1, #1
   11760:	bl	11348 <dcgettext@plt>
   11764:	movw	r7, #61876	; 0xf1b4
   11768:	movt	r7, #2
   1176c:	ldr	r1, [r7]
   11770:	bl	112a0 <fputs_unlocked@plt>
   11774:	movw	r1, #56177	; 0xdb71
   11778:	mov	r0, #0
   1177c:	mov	r2, #5
   11780:	movt	r1, #1
   11784:	bl	11348 <dcgettext@plt>
   11788:	ldr	r1, [r7]
   1178c:	bl	112a0 <fputs_unlocked@plt>
   11790:	movw	r1, #53640	; 0xd188
   11794:	mov	r0, #0
   11798:	mov	r2, #5
   1179c:	movt	r1, #1
   117a0:	bl	11348 <dcgettext@plt>
   117a4:	ldr	r1, [r7]
   117a8:	bl	112a0 <fputs_unlocked@plt>
   117ac:	movw	r1, #53785	; 0xd219
   117b0:	mov	r0, #0
   117b4:	mov	r2, #5
   117b8:	movt	r1, #1
   117bc:	bl	11348 <dcgettext@plt>
   117c0:	ldr	r1, [r7]
   117c4:	bl	112a0 <fputs_unlocked@plt>
   117c8:	movw	r1, #54019	; 0xd303
   117cc:	mov	r0, #0
   117d0:	mov	r2, #5
   117d4:	movt	r1, #1
   117d8:	bl	11348 <dcgettext@plt>
   117dc:	mov	r1, r0
   117e0:	mov	r0, #1
   117e4:	mov	r2, #10
   117e8:	mov	r3, #5
   117ec:	bl	114d4 <__printf_chk@plt>
   117f0:	movw	r1, #54573	; 0xd52d
   117f4:	mov	r0, #0
   117f8:	mov	r2, #5
   117fc:	movt	r1, #1
   11800:	bl	11348 <dcgettext@plt>
   11804:	ldr	r1, [r7]
   11808:	bl	112a0 <fputs_unlocked@plt>
   1180c:	movw	r1, #54789	; 0xd605
   11810:	mov	r0, #0
   11814:	mov	r2, #5
   11818:	movt	r1, #1
   1181c:	bl	11348 <dcgettext@plt>
   11820:	ldr	r1, [r7]
   11824:	bl	112a0 <fputs_unlocked@plt>
   11828:	movw	r1, #55120	; 0xd750
   1182c:	mov	r0, #0
   11830:	mov	r2, #5
   11834:	movt	r1, #1
   11838:	bl	11348 <dcgettext@plt>
   1183c:	ldr	r1, [r7]
   11840:	bl	112a0 <fputs_unlocked@plt>
   11844:	movw	r1, #55183	; 0xd78f
   11848:	mov	r0, #0
   1184c:	mov	r2, #5
   11850:	movt	r1, #1
   11854:	bl	11348 <dcgettext@plt>
   11858:	ldr	r1, [r7]
   1185c:	bl	112a0 <fputs_unlocked@plt>
   11860:	movw	r1, #55228	; 0xd7bc
   11864:	mov	r0, #0
   11868:	mov	r2, #5
   1186c:	movt	r1, #1
   11870:	bl	11348 <dcgettext@plt>
   11874:	ldr	r1, [r7]
   11878:	bl	112a0 <fputs_unlocked@plt>
   1187c:	movw	r1, #55282	; 0xd7f2
   11880:	mov	r0, #0
   11884:	mov	r2, #5
   11888:	movt	r1, #1
   1188c:	bl	11348 <dcgettext@plt>
   11890:	ldr	r1, [r7]
   11894:	bl	112a0 <fputs_unlocked@plt>
   11898:	movw	r1, #55495	; 0xd8c7
   1189c:	mov	r0, #0
   118a0:	mov	r2, #5
   118a4:	movt	r1, #1
   118a8:	bl	11348 <dcgettext@plt>
   118ac:	ldr	r1, [r7]
   118b0:	bl	112a0 <fputs_unlocked@plt>
   118b4:	movw	r0, #58312	; 0xe3c8
   118b8:	mov	r2, #48	; 0x30
   118bc:	mov	r6, sp
   118c0:	movw	r5, #55932	; 0xda7c
   118c4:	movt	r0, #1
   118c8:	movt	r5, #1
   118cc:	add	r1, r0, #32
   118d0:	add	r3, r0, #16
   118d4:	vld1.64	{d18-d19}, [r0], r2
   118d8:	vld1.64	{d16-d17}, [r1]
   118dc:	vld1.64	{d20-d21}, [r3]
   118e0:	vldr	d22, [r0]
   118e4:	add	r1, r6, #32
   118e8:	add	r0, r6, #16
   118ec:	vst1.64	{d16-d17}, [r1]
   118f0:	movw	r1, #56252	; 0xdbbc
   118f4:	vst1.64	{d20-d21}, [r0]
   118f8:	mov	r0, r6
   118fc:	movt	r1, #1
   11900:	vst1.64	{d18-d19}, [r0], r2
   11904:	vstr	d22, [r0]
   11908:	mov	r0, r5
   1190c:	bl	112b8 <strcmp@plt>
   11910:	cmp	r0, #0
   11914:	ldrne	r1, [r6, #8]!
   11918:	cmpne	r1, #0
   1191c:	bne	11908 <__assert_fail@plt+0x320>
   11920:	movw	r1, #56347	; 0xdc1b
   11924:	ldr	r6, [r6, #4]
   11928:	mov	r0, #0
   1192c:	mov	r2, #5
   11930:	movt	r1, #1
   11934:	bl	11348 <dcgettext@plt>
   11938:	movw	r2, #56370	; 0xdc32
   1193c:	movw	r3, #56384	; 0xdc40
   11940:	mov	r1, r0
   11944:	mov	r0, #1
   11948:	movt	r2, #1
   1194c:	movt	r3, #1
   11950:	bl	114d4 <__printf_chk@plt>
   11954:	cmp	r6, #0
   11958:	mov	r0, #5
   1195c:	mov	r1, #0
   11960:	moveq	r6, r5
   11964:	bl	1154c <setlocale@plt>
   11968:	cmp	r0, #0
   1196c:	beq	119a4 <__assert_fail@plt+0x3bc>
   11970:	movw	r1, #56424	; 0xdc68
   11974:	mov	r2, #3
   11978:	movt	r1, #1
   1197c:	bl	115b8 <strncmp@plt>
   11980:	cmp	r0, #0
   11984:	beq	119a4 <__assert_fail@plt+0x3bc>
   11988:	movw	r1, #56428	; 0xdc6c
   1198c:	mov	r0, #0
   11990:	mov	r2, #5
   11994:	movt	r1, #1
   11998:	bl	11348 <dcgettext@plt>
   1199c:	ldr	r1, [r7]
   119a0:	bl	112a0 <fputs_unlocked@plt>
   119a4:	movw	r1, #56499	; 0xdcb3
   119a8:	mov	r0, #0
   119ac:	mov	r2, #5
   119b0:	movt	r1, #1
   119b4:	bl	11348 <dcgettext@plt>
   119b8:	movw	r2, #56384	; 0xdc40
   119bc:	mov	r1, r0
   119c0:	mov	r0, #1
   119c4:	mov	r3, r5
   119c8:	movt	r2, #1
   119cc:	bl	114d4 <__printf_chk@plt>
   119d0:	movw	r1, #56526	; 0xdcce
   119d4:	mov	r0, #0
   119d8:	mov	r2, #5
   119dc:	movt	r1, #1
   119e0:	bl	11348 <dcgettext@plt>
   119e4:	mov	r1, r0
   119e8:	movw	r0, #56280	; 0xdbd8
   119ec:	movw	r3, #55494	; 0xd8c6
   119f0:	cmp	r6, r5
   119f4:	mov	r2, r6
   119f8:	movt	r0, #1
   119fc:	movt	r3, #1
   11a00:	moveq	r3, r0
   11a04:	mov	r0, #1
   11a08:	bl	114d4 <__printf_chk@plt>
   11a0c:	mov	r0, r4
   11a10:	bl	1145c <exit@plt>
   11a14:	movw	r0, #61872	; 0xf1b0
   11a18:	movw	r1, #53436	; 0xd0bc
   11a1c:	mov	r2, #5
   11a20:	movt	r0, #2
   11a24:	movt	r1, #1
   11a28:	ldr	r5, [r0]
   11a2c:	mov	r0, #0
   11a30:	bl	11348 <dcgettext@plt>
   11a34:	mov	r2, r0
   11a38:	movw	r0, #61916	; 0xf1dc
   11a3c:	mov	r1, #1
   11a40:	movt	r0, #2
   11a44:	ldr	r3, [r0]
   11a48:	mov	r0, r5
   11a4c:	bl	114f8 <__fprintf_chk@plt>
   11a50:	mov	r0, r4
   11a54:	bl	1145c <exit@plt>
   11a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a5c:	add	fp, sp, #28
   11a60:	sub	sp, sp, #4
   11a64:	vpush	{d8-d11}
   11a68:	sub	sp, sp, #232	; 0xe8
   11a6c:	sub	sp, sp, #8192	; 0x2000
   11a70:	mov	r5, r0
   11a74:	mov	r7, #0
   11a78:	mov	r0, #10
   11a7c:	mov	r4, r1
   11a80:	str	r7, [sp, #116]	; 0x74
   11a84:	str	r0, [sp, #112]	; 0x70
   11a88:	ldr	r0, [r1]
   11a8c:	bl	18bcc <__assert_fail@plt+0x75e4>
   11a90:	movw	r1, #55494	; 0xd8c6
   11a94:	mov	r0, #6
   11a98:	movt	r1, #1
   11a9c:	bl	1154c <setlocale@plt>
   11aa0:	movw	r6, #56374	; 0xdc36
   11aa4:	movw	r1, #55937	; 0xda81
   11aa8:	movt	r6, #1
   11aac:	movt	r1, #1
   11ab0:	mov	r0, r6
   11ab4:	bl	11588 <bindtextdomain@plt>
   11ab8:	mov	r0, r6
   11abc:	bl	11360 <textdomain@plt>
   11ac0:	movw	r0, #29264	; 0x7250
   11ac4:	movt	r0, #1
   11ac8:	bl	1d094 <__assert_fail@plt+0xbaac>
   11acc:	movw	r1, #61888	; 0xf1c0
   11ad0:	mov	r0, #1
   11ad4:	cmp	r5, #2
   11ad8:	movt	r1, #2
   11adc:	strb	r0, [r1, #5]
   11ae0:	mov	r0, #256	; 0x100
   11ae4:	strh	r7, [r1, #3]
   11ae8:	strb	r7, [r1, #2]
   11aec:	strh	r0, [r1]
   11af0:	beq	11b48 <__assert_fail@plt+0x560>
   11af4:	cmp	r5, #3
   11af8:	bne	11b1c <__assert_fail@plt+0x534>
   11afc:	ldr	r0, [r4, #8]
   11b00:	ldrb	r1, [r0]
   11b04:	cmp	r1, #45	; 0x2d
   11b08:	bne	11b48 <__assert_fail@plt+0x560>
   11b0c:	ldrb	r1, [r0, #1]
   11b10:	cmp	r1, #0
   11b14:	bne	11b30 <__assert_fail@plt+0x548>
   11b18:	b	11b48 <__assert_fail@plt+0x560>
   11b1c:	sub	r0, r5, #3
   11b20:	mov	r6, #0
   11b24:	cmp	r0, #1
   11b28:	bhi	11ce0 <__assert_fail@plt+0x6f8>
   11b2c:	ldr	r0, [r4, #8]
   11b30:	movw	r1, #56577	; 0xdd01
   11b34:	movt	r1, #1
   11b38:	bl	112b8 <strcmp@plt>
   11b3c:	mov	r6, #0
   11b40:	cmp	r0, #0
   11b44:	bne	11ce0 <__assert_fail@plt+0x6f8>
   11b48:	bl	18b70 <__assert_fail@plt+0x7588>
   11b4c:	ldr	r2, [r4, #4]
   11b50:	mov	r1, r0
   11b54:	mov	r0, r2
   11b58:	ldrb	r3, [r0], #1
   11b5c:	cmp	r3, #45	; 0x2d
   11b60:	beq	11b88 <__assert_fail@plt+0x5a0>
   11b64:	cmp	r3, #43	; 0x2b
   11b68:	bne	11c0c <__assert_fail@plt+0x624>
   11b6c:	sub	r1, r1, #3504	; 0xdb0
   11b70:	mov	r8, #1
   11b74:	mov	r6, #0
   11b78:	sub	r1, r1, #196608	; 0x30000
   11b7c:	cmp	r1, #696	; 0x2b8
   11b80:	bhi	11bc0 <__assert_fail@plt+0x5d8>
   11b84:	b	11ce0 <__assert_fail@plt+0x6f8>
   11b88:	movw	r3, #3504	; 0xdb0
   11b8c:	mov	r8, #0
   11b90:	movt	r3, #3
   11b94:	cmp	r1, r3
   11b98:	blt	11bc0 <__assert_fail@plt+0x5d8>
   11b9c:	mov	r1, r0
   11ba0:	mov	r6, #0
   11ba4:	ldrb	r3, [r1], #1
   11ba8:	cmp	r3, #99	; 0x63
   11bac:	movne	r1, r0
   11bb0:	ldrb	r1, [r1]
   11bb4:	cmp	r1, #0
   11bb8:	beq	11ce0 <__assert_fail@plt+0x6f8>
   11bbc:	mov	r8, #0
   11bc0:	mov	r1, #0
   11bc4:	sub	r3, r2, r1
   11bc8:	sub	r1, r1, #1
   11bcc:	ldrb	r7, [r3, #1]
   11bd0:	sub	r3, r7, #48	; 0x30
   11bd4:	cmp	r3, #10
   11bd8:	bcc	11bc4 <__assert_fail@plt+0x5dc>
   11bdc:	cmp	r7, #98	; 0x62
   11be0:	beq	11c14 <__assert_fail@plt+0x62c>
   11be4:	mov	r3, #10
   11be8:	cmp	r7, #99	; 0x63
   11bec:	beq	11c18 <__assert_fail@plt+0x630>
   11bf0:	mov	r9, #1
   11bf4:	cmp	r7, #108	; 0x6c
   11bf8:	beq	11c1c <__assert_fail@plt+0x634>
   11bfc:	sub	r2, r2, r1
   11c00:	mov	r3, #10
   11c04:	mov	r9, #1
   11c08:	b	11c24 <__assert_fail@plt+0x63c>
   11c0c:	mov	r6, #0
   11c10:	b	11ce0 <__assert_fail@plt+0x6f8>
   11c14:	mov	r3, #5120	; 0x1400
   11c18:	mov	r9, #0
   11c1c:	sub	r2, r2, r1
   11c20:	ldrb	r7, [r2, #1]!
   11c24:	cmp	r7, #102	; 0x66
   11c28:	mov	r6, #0
   11c2c:	addeq	r2, r2, #1
   11c30:	ldrb	r2, [r2]
   11c34:	cmp	r2, #0
   11c38:	bne	11ce0 <__assert_fail@plt+0x6f8>
   11c3c:	cmn	r1, #1
   11c40:	beq	11cb0 <__assert_fail@plt+0x6c8>
   11c44:	movw	r1, #56580	; 0xdd04
   11c48:	add	r3, sp, #112	; 0x70
   11c4c:	mov	r2, #10
   11c50:	movt	r1, #1
   11c54:	str	r1, [sp]
   11c58:	mov	r1, #0
   11c5c:	bl	1bafc <__assert_fail@plt+0xa514>
   11c60:	mvn	r1, #2
   11c64:	tst	r0, r1
   11c68:	beq	11cbc <__assert_fail@plt+0x6d4>
   11c6c:	bl	114b0 <__errno_location@plt>
   11c70:	movw	r1, #56589	; 0xdd0d
   11c74:	ldr	r5, [r0]
   11c78:	mov	r0, #0
   11c7c:	mov	r2, #5
   11c80:	movt	r1, #1
   11c84:	bl	11348 <dcgettext@plt>
   11c88:	mov	r6, r0
   11c8c:	ldr	r0, [r4, #4]
   11c90:	bl	1ab90 <__assert_fail@plt+0x95a8>
   11c94:	movw	r2, #56582	; 0xdd06
   11c98:	str	r0, [sp]
   11c9c:	mov	r0, #1
   11ca0:	mov	r1, r5
   11ca4:	mov	r3, r6
   11ca8:	movt	r2, #1
   11cac:	bl	113e4 <error@plt>
   11cb0:	mov	r0, #0
   11cb4:	str	r3, [sp, #112]	; 0x70
   11cb8:	str	r0, [sp, #116]	; 0x74
   11cbc:	sub	r0, r7, #102	; 0x66
   11cc0:	movw	r1, #61888	; 0xf1c0
   11cc4:	mov	r6, #1
   11cc8:	clz	r0, r0
   11ccc:	movt	r1, #2
   11cd0:	lsr	r0, r0, #5
   11cd4:	strb	r0, [r1, #4]
   11cd8:	strb	r9, [r1, #1]
   11cdc:	strb	r8, [r1, #3]
   11ce0:	add	r0, sp, #120	; 0x78
   11ce4:	sub	r9, r5, r6
   11ce8:	add	r7, r4, r6, lsl #2
   11cec:	movw	r6, #56604	; 0xdd1c
   11cf0:	movw	r4, #61880	; 0xf1b8
   11cf4:	vmov.f64	d8, #112	; 0x3f800000  1.0
   11cf8:	mov	r5, #0
   11cfc:	add	r1, r0, #80	; 0x50
   11d00:	movt	r6, #1
   11d04:	movt	r4, #2
   11d08:	str	r9, [sp, #108]	; 0x6c
   11d0c:	str	r1, [sp, #44]	; 0x2c
   11d10:	add	r1, r0, #96	; 0x60
   11d14:	add	r0, r0, #48	; 0x30
   11d18:	str	r0, [sp, #32]
   11d1c:	mov	r0, #0
   11d20:	str	r1, [sp, #36]	; 0x24
   11d24:	b	11da8 <__assert_fail@plt+0x7c0>
   11d28:	add	r9, r9, #1
   11d2c:	str	r9, [r4]
   11d30:	movw	r0, #56639	; 0xdd3f
   11d34:	movw	r1, #56663	; 0xdd57
   11d38:	cmp	r8, #110	; 0x6e
   11d3c:	mov	r2, #5
   11d40:	movt	r0, #1
   11d44:	movt	r1, #1
   11d48:	moveq	r1, r0
   11d4c:	mov	r0, #0
   11d50:	bl	11348 <dcgettext@plt>
   11d54:	mvn	r1, #0
   11d58:	str	r0, [sp, #12]
   11d5c:	mov	r0, #0
   11d60:	mov	r2, #0
   11d64:	mov	r3, #0
   11d68:	mov	r5, #0
   11d6c:	str	r1, [sp]
   11d70:	str	r1, [sp, #4]
   11d74:	movw	r1, #56626	; 0xdd32
   11d78:	str	r0, [sp, #16]
   11d7c:	mov	r0, r9
   11d80:	movt	r1, #1
   11d84:	str	r1, [sp, #8]
   11d88:	bl	1b988 <__assert_fail@plt+0xa3a0>
   11d8c:	ldr	r9, [sp, #108]	; 0x6c
   11d90:	mov	r7, r6
   11d94:	movw	r6, #56604	; 0xdd1c
   11d98:	str	r0, [sp, #112]	; 0x70
   11d9c:	str	r1, [sp, #116]	; 0x74
   11da0:	mov	r0, sl
   11da4:	movt	r6, #1
   11da8:	movw	r3, #58368	; 0xe400
   11dac:	mov	sl, r0
   11db0:	mov	r0, r9
   11db4:	mov	r1, r7
   11db8:	mov	r2, r6
   11dbc:	str	r5, [sp]
   11dc0:	movt	r3, #1
   11dc4:	bl	11438 <getopt_long@plt>
   11dc8:	add	r1, r0, #3
   11dcc:	cmp	r1, #264	; 0x108
   11dd0:	bhi	15194 <__assert_fail@plt+0x3bac>
   11dd4:	add	r2, pc, #8
   11dd8:	mov	r8, r0
   11ddc:	mov	r0, #2
   11de0:	ldr	pc, [r2, r1, lsl #2]
   11de4:	muleq	r1, ip, r1
   11de8:	andeq	r5, r1, r0, lsl #4
   11dec:	andeq	r2, r1, r8, ror #8
   11df0:	muleq	r1, r4, r1
   11df4:	muleq	r1, r4, r1
   11df8:	muleq	r1, r4, r1
   11dfc:	muleq	r1, r4, r1
   11e00:	muleq	r1, r4, r1
   11e04:	muleq	r1, r4, r1
   11e08:	muleq	r1, r4, r1
   11e0c:	muleq	r1, r4, r1
   11e10:	muleq	r1, r4, r1
   11e14:	muleq	r1, r4, r1
   11e18:	muleq	r1, r4, r1
   11e1c:	muleq	r1, r4, r1
   11e20:	muleq	r1, r4, r1
   11e24:	muleq	r1, r4, r1
   11e28:	muleq	r1, r4, r1
   11e2c:	muleq	r1, r4, r1
   11e30:	muleq	r1, r4, r1
   11e34:	muleq	r1, r4, r1
   11e38:	muleq	r1, r4, r1
   11e3c:	muleq	r1, r4, r1
   11e40:	muleq	r1, r4, r1
   11e44:	muleq	r1, r4, r1
   11e48:	muleq	r1, r4, r1
   11e4c:	muleq	r1, r4, r1
   11e50:	muleq	r1, r4, r1
   11e54:	muleq	r1, r4, r1
   11e58:	muleq	r1, r4, r1
   11e5c:	muleq	r1, r4, r1
   11e60:	muleq	r1, r4, r1
   11e64:	muleq	r1, r4, r1
   11e68:	muleq	r1, r4, r1
   11e6c:	muleq	r1, r4, r1
   11e70:	muleq	r1, r4, r1
   11e74:	muleq	r1, r4, r1
   11e78:	muleq	r1, r4, r1
   11e7c:	muleq	r1, r4, r1
   11e80:	muleq	r1, r4, r1
   11e84:	muleq	r1, r4, r1
   11e88:	muleq	r1, r4, r1
   11e8c:	muleq	r1, r4, r1
   11e90:	muleq	r1, r4, r1
   11e94:	muleq	r1, r4, r1
   11e98:	muleq	r1, r4, r1
   11e9c:	muleq	r1, r4, r1
   11ea0:	muleq	r1, r4, r1
   11ea4:	muleq	r1, r4, r1
   11ea8:	muleq	r1, r4, r1
   11eac:	muleq	r1, r4, r1
   11eb0:	andeq	r5, r1, ip, ror #2
   11eb4:	andeq	r5, r1, ip, ror #2
   11eb8:	andeq	r5, r1, ip, ror #2
   11ebc:	andeq	r5, r1, ip, ror #2
   11ec0:	andeq	r5, r1, ip, ror #2
   11ec4:	andeq	r5, r1, ip, ror #2
   11ec8:	andeq	r5, r1, ip, ror #2
   11ecc:	andeq	r5, r1, ip, ror #2
   11ed0:	andeq	r5, r1, ip, ror #2
   11ed4:	andeq	r5, r1, ip, ror #2
   11ed8:	muleq	r1, r4, r1
   11edc:	muleq	r1, r4, r1
   11ee0:	muleq	r1, r4, r1
   11ee4:	muleq	r1, r4, r1
   11ee8:	muleq	r1, r4, r1
   11eec:	muleq	r1, r4, r1
   11ef0:	muleq	r1, r4, r1
   11ef4:	muleq	r1, r4, r1
   11ef8:	muleq	r1, r4, r1
   11efc:	muleq	r1, r4, r1
   11f00:	muleq	r1, r4, r1
   11f04:	muleq	r1, r4, r1
   11f08:	andeq	r2, r1, r4, ror #7
   11f0c:	muleq	r1, r4, r1
   11f10:	muleq	r1, r4, r1
   11f14:	muleq	r1, r4, r1
   11f18:	muleq	r1, r4, r1
   11f1c:	muleq	r1, r4, r1
   11f20:	muleq	r1, r4, r1
   11f24:	muleq	r1, r4, r1
   11f28:	muleq	r1, r4, r1
   11f2c:	muleq	r1, r4, r1
   11f30:	muleq	r1, r4, r1
   11f34:	muleq	r1, r4, r1
   11f38:	muleq	r1, r4, r1
   11f3c:	muleq	r1, r4, r1
   11f40:	muleq	r1, r4, r1
   11f44:	muleq	r1, r4, r1
   11f48:	muleq	r1, r4, r1
   11f4c:	muleq	r1, r4, r1
   11f50:	muleq	r1, r4, r1
   11f54:	muleq	r1, r4, r1
   11f58:	muleq	r1, r4, r1
   11f5c:	muleq	r1, r4, r1
   11f60:	muleq	r1, r4, r1
   11f64:	muleq	r1, r4, r1
   11f68:	muleq	r1, r4, r1
   11f6c:	muleq	r1, r4, r1
   11f70:	muleq	r1, r4, r1
   11f74:	muleq	r1, r4, r1
   11f78:	muleq	r1, r4, r1
   11f7c:	andeq	r2, r1, r8, lsl #4
   11f80:	muleq	r1, r4, r1
   11f84:	muleq	r1, r4, r1
   11f88:	andeq	r2, r1, r4, asr r2
   11f8c:	muleq	r1, r4, r1
   11f90:	muleq	r1, r4, r1
   11f94:	muleq	r1, r4, r1
   11f98:	muleq	r1, r4, r1
   11f9c:	muleq	r1, r4, r1
   11fa0:	muleq	r1, r4, r1
   11fa4:	muleq	r1, r4, r1
   11fa8:	andeq	r2, r1, r8, lsl #4
   11fac:	muleq	r1, r4, r1
   11fb0:	muleq	r1, r4, r1
   11fb4:	andeq	r1, r1, r8, lsr #27
   11fb8:	muleq	r1, r4, r1
   11fbc:	andeq	r2, r1, ip, lsr #7
   11fc0:	muleq	r1, r4, r1
   11fc4:	muleq	r1, r4, r1
   11fc8:	andeq	r2, r1, r0, lsr r4
   11fcc:	muleq	r1, r4, r1
   11fd0:	muleq	r1, r4, r1
   11fd4:	muleq	r1, r4, r1
   11fd8:	andeq	r2, r1, r4, lsl #8
   11fdc:	muleq	r1, r4, r1
   11fe0:	muleq	r1, r4, r1
   11fe4:	muleq	r1, r4, r1
   11fe8:	muleq	r1, r4, r1
   11fec:	muleq	r1, r4, r1
   11ff0:	muleq	r1, r4, r1
   11ff4:	muleq	r1, r4, r1
   11ff8:	muleq	r1, r4, r1
   11ffc:	muleq	r1, r4, r1
   12000:	muleq	r1, r4, r1
   12004:	muleq	r1, r4, r1
   12008:	muleq	r1, r4, r1
   1200c:	muleq	r1, r4, r1
   12010:	muleq	r1, r4, r1
   12014:	muleq	r1, r4, r1
   12018:	muleq	r1, r4, r1
   1201c:	muleq	r1, r4, r1
   12020:	muleq	r1, r4, r1
   12024:	muleq	r1, r4, r1
   12028:	muleq	r1, r4, r1
   1202c:	muleq	r1, r4, r1
   12030:	muleq	r1, r4, r1
   12034:	muleq	r1, r4, r1
   12038:	muleq	r1, r4, r1
   1203c:	muleq	r1, r4, r1
   12040:	muleq	r1, r4, r1
   12044:	muleq	r1, r4, r1
   12048:	muleq	r1, r4, r1
   1204c:	muleq	r1, r4, r1
   12050:	muleq	r1, r4, r1
   12054:	muleq	r1, r4, r1
   12058:	muleq	r1, r4, r1
   1205c:	muleq	r1, r4, r1
   12060:	muleq	r1, r4, r1
   12064:	muleq	r1, r4, r1
   12068:	muleq	r1, r4, r1
   1206c:	muleq	r1, r4, r1
   12070:	muleq	r1, r4, r1
   12074:	muleq	r1, r4, r1
   12078:	muleq	r1, r4, r1
   1207c:	muleq	r1, r4, r1
   12080:	muleq	r1, r4, r1
   12084:	muleq	r1, r4, r1
   12088:	muleq	r1, r4, r1
   1208c:	muleq	r1, r4, r1
   12090:	muleq	r1, r4, r1
   12094:	muleq	r1, r4, r1
   12098:	muleq	r1, r4, r1
   1209c:	muleq	r1, r4, r1
   120a0:	muleq	r1, r4, r1
   120a4:	muleq	r1, r4, r1
   120a8:	muleq	r1, r4, r1
   120ac:	muleq	r1, r4, r1
   120b0:	muleq	r1, r4, r1
   120b4:	muleq	r1, r4, r1
   120b8:	muleq	r1, r4, r1
   120bc:	muleq	r1, r4, r1
   120c0:	muleq	r1, r4, r1
   120c4:	muleq	r1, r4, r1
   120c8:	muleq	r1, r4, r1
   120cc:	muleq	r1, r4, r1
   120d0:	muleq	r1, r4, r1
   120d4:	muleq	r1, r4, r1
   120d8:	muleq	r1, r4, r1
   120dc:	muleq	r1, r4, r1
   120e0:	muleq	r1, r4, r1
   120e4:	muleq	r1, r4, r1
   120e8:	muleq	r1, r4, r1
   120ec:	muleq	r1, r4, r1
   120f0:	muleq	r1, r4, r1
   120f4:	muleq	r1, r4, r1
   120f8:	muleq	r1, r4, r1
   120fc:	muleq	r1, r4, r1
   12100:	muleq	r1, r4, r1
   12104:	muleq	r1, r4, r1
   12108:	muleq	r1, r4, r1
   1210c:	muleq	r1, r4, r1
   12110:	muleq	r1, r4, r1
   12114:	muleq	r1, r4, r1
   12118:	muleq	r1, r4, r1
   1211c:	muleq	r1, r4, r1
   12120:	muleq	r1, r4, r1
   12124:	muleq	r1, r4, r1
   12128:	muleq	r1, r4, r1
   1212c:	muleq	r1, r4, r1
   12130:	muleq	r1, r4, r1
   12134:	muleq	r1, r4, r1
   12138:	muleq	r1, r4, r1
   1213c:	muleq	r1, r4, r1
   12140:	muleq	r1, r4, r1
   12144:	muleq	r1, r4, r1
   12148:	muleq	r1, r4, r1
   1214c:	muleq	r1, r4, r1
   12150:	muleq	r1, r4, r1
   12154:	muleq	r1, r4, r1
   12158:	muleq	r1, r4, r1
   1215c:	muleq	r1, r4, r1
   12160:	muleq	r1, r4, r1
   12164:	muleq	r1, r4, r1
   12168:	muleq	r1, r4, r1
   1216c:	muleq	r1, r4, r1
   12170:	muleq	r1, r4, r1
   12174:	muleq	r1, r4, r1
   12178:	muleq	r1, r4, r1
   1217c:	muleq	r1, r4, r1
   12180:	muleq	r1, r4, r1
   12184:	muleq	r1, r4, r1
   12188:	muleq	r1, r4, r1
   1218c:	muleq	r1, r4, r1
   12190:	muleq	r1, r4, r1
   12194:	muleq	r1, r4, r1
   12198:	muleq	r1, r4, r1
   1219c:	muleq	r1, r4, r1
   121a0:	muleq	r1, r4, r1
   121a4:	muleq	r1, r4, r1
   121a8:	muleq	r1, r4, r1
   121ac:	muleq	r1, r4, r1
   121b0:	muleq	r1, r4, r1
   121b4:	muleq	r1, r4, r1
   121b8:	muleq	r1, r4, r1
   121bc:	muleq	r1, r4, r1
   121c0:	muleq	r1, r4, r1
   121c4:	muleq	r1, r4, r1
   121c8:	muleq	r1, r4, r1
   121cc:	muleq	r1, r4, r1
   121d0:	muleq	r1, r4, r1
   121d4:	muleq	r1, r4, r1
   121d8:	muleq	r1, r4, r1
   121dc:	muleq	r1, r4, r1
   121e0:	muleq	r1, r4, r1
   121e4:	muleq	r1, r4, r1
   121e8:	muleq	r1, r4, r1
   121ec:	muleq	r1, r4, r1
   121f0:	andeq	r2, r1, r8, lsl r4
   121f4:	andeq	r2, r1, r8, asr #6
   121f8:	ldrdeq	r2, [r1], -r0
   121fc:	andeq	r2, r1, r0, lsr r3
   12200:	andeq	r2, r1, r4, asr r2
   12204:	andeq	r2, r1, r8, lsr r4
   12208:	sub	r0, r8, #110	; 0x6e
   1220c:	movw	r1, #61888	; 0xf1c0
   12210:	ldr	r9, [r4]
   12214:	mov	r6, r7
   12218:	mov	r7, r4
   1221c:	clz	r0, r0
   12220:	movt	r1, #2
   12224:	lsr	r0, r0, #5
   12228:	strb	r0, [r1, #1]
   1222c:	ldrb	r0, [r9]
   12230:	cmp	r0, #45	; 0x2d
   12234:	beq	11d28 <__assert_fail@plt+0x740>
   12238:	cmp	r0, #43	; 0x2b
   1223c:	bne	11d30 <__assert_fail@plt+0x748>
   12240:	movw	r0, #61888	; 0xf1c0
   12244:	mov	r1, #1
   12248:	movt	r0, #2
   1224c:	strb	r1, [r0, #3]
   12250:	b	11d30 <__assert_fail@plt+0x748>
   12254:	ldr	r1, [r4]
   12258:	movw	r0, #61888	; 0xf1c0
   1225c:	mov	r2, #1
   12260:	movt	r0, #2
   12264:	strb	r2, [r0, #4]
   12268:	cmp	r1, #0
   1226c:	beq	12450 <__assert_fail@plt+0xe68>
   12270:	movw	r0, #61780	; 0xf154
   12274:	mov	r3, #4
   12278:	mov	r8, r7
   1227c:	mov	r7, r4
   12280:	movw	r4, #58624	; 0xe500
   12284:	movt	r0, #2
   12288:	str	r3, [sp]
   1228c:	movt	r4, #1
   12290:	ldr	r0, [r0]
   12294:	mov	r3, r4
   12298:	stmib	sp, {r0, r2}
   1229c:	movw	r0, #56687	; 0xdd6f
   122a0:	movw	r2, #58632	; 0xe508
   122a4:	movt	r0, #1
   122a8:	movt	r2, #1
   122ac:	bl	16f60 <__assert_fail@plt+0x5978>
   122b0:	ldr	r0, [r4, r0, lsl #2]
   122b4:	movw	r1, #61760	; 0xf140
   122b8:	mov	r4, r7
   122bc:	mov	r7, r8
   122c0:	movt	r1, #2
   122c4:	str	r0, [r1]
   122c8:	mov	r0, sl
   122cc:	b	11da8 <__assert_fail@plt+0x7c0>
   122d0:	movw	r1, #56752	; 0xddb0
   122d4:	ldr	r6, [r4]
   122d8:	mov	r0, #0
   122dc:	mov	r2, #5
   122e0:	movt	r1, #1
   122e4:	bl	11348 <dcgettext@plt>
   122e8:	mvn	r1, #-2147483648	; 0x80000000
   122ec:	mov	r2, #0
   122f0:	mov	r3, #0
   122f4:	stm	sp, {r1, r5}
   122f8:	movw	r1, #55494	; 0xd8c6
   122fc:	str	r0, [sp, #12]
   12300:	mov	r0, r6
   12304:	movw	r6, #56604	; 0xdd1c
   12308:	str	r5, [sp, #16]
   1230c:	movt	r1, #1
   12310:	movt	r6, #1
   12314:	str	r1, [sp, #8]
   12318:	bl	1b988 <__assert_fail@plt+0xa3a0>
   1231c:	movw	r1, #61888	; 0xf1c0
   12320:	movt	r1, #2
   12324:	str	r0, [r1, #12]
   12328:	mov	r0, sl
   1232c:	b	11da8 <__assert_fail@plt+0x7c0>
   12330:	movw	r0, #61888	; 0xf1c0
   12334:	mov	r1, #1
   12338:	movt	r0, #2
   1233c:	strb	r1, [r0, #9]
   12340:	mov	r0, sl
   12344:	b	11da8 <__assert_fail@plt+0x7c0>
   12348:	movw	r1, #56696	; 0xdd78
   1234c:	ldr	r6, [r4]
   12350:	mov	r0, #0
   12354:	mov	r2, #5
   12358:	movt	r1, #1
   1235c:	bl	11348 <dcgettext@plt>
   12360:	mvn	r1, #0
   12364:	str	r0, [sp, #12]
   12368:	mov	r0, r6
   1236c:	movw	r6, #56604	; 0xdd1c
   12370:	mov	r2, #0
   12374:	mov	r3, #0
   12378:	str	r5, [sp, #16]
   1237c:	str	r1, [sp]
   12380:	str	r1, [sp, #4]
   12384:	movw	r1, #55494	; 0xd8c6
   12388:	movt	r6, #1
   1238c:	movt	r1, #1
   12390:	str	r1, [sp, #8]
   12394:	bl	1b988 <__assert_fail@plt+0xa3a0>
   12398:	movw	r2, #61760	; 0xf140
   1239c:	movt	r2, #2
   123a0:	strd	r0, [r2, #8]
   123a4:	mov	r0, sl
   123a8:	b	11da8 <__assert_fail@plt+0x7c0>
   123ac:	ldr	r0, [r4]
   123b0:	movw	r3, #29100	; 0x71ac
   123b4:	mov	r1, #0
   123b8:	add	r2, sp, #120	; 0x78
   123bc:	movt	r3, #1
   123c0:	bl	1ba58 <__assert_fail@plt+0xa470>
   123c4:	cmp	r0, #0
   123c8:	beq	15208 <__assert_fail@plt+0x3c20>
   123cc:	vldr	d8, [sp, #120]	; 0x78
   123d0:	vcmpe.f64	d8, #0.0
   123d4:	vmrs	APSR_nzcv, fpscr
   123d8:	blt	15208 <__assert_fail@plt+0x3c20>
   123dc:	mov	r0, sl
   123e0:	b	11da8 <__assert_fail@plt+0x7c0>
   123e4:	movw	r0, #61760	; 0xf140
   123e8:	mov	r1, #1
   123ec:	movt	r0, #2
   123f0:	str	r1, [r0]
   123f4:	movw	r0, #61888	; 0xf1c0
   123f8:	movt	r0, #2
   123fc:	strb	r1, [r0, #4]
   12400:	b	12424 <__assert_fail@plt+0xe3c>
   12404:	movw	r0, #61888	; 0xf1c0
   12408:	movt	r0, #2
   1240c:	strb	r5, [r0, #5]
   12410:	mov	r0, sl
   12414:	b	11da8 <__assert_fail@plt+0x7c0>
   12418:	movw	r0, #61888	; 0xf1c0
   1241c:	mov	r1, #1
   12420:	movt	r0, #2
   12424:	strb	r1, [r0, #8]
   12428:	mov	r0, sl
   1242c:	b	11da8 <__assert_fail@plt+0x7c0>
   12430:	mov	r0, #1
   12434:	b	11da8 <__assert_fail@plt+0x7c0>
   12438:	movw	r0, #61888	; 0xf1c0
   1243c:	mov	r1, #1
   12440:	movt	r0, #2
   12444:	strb	r1, [r0, #7]
   12448:	mov	r0, sl
   1244c:	b	11da8 <__assert_fail@plt+0x7c0>
   12450:	movw	r0, #61760	; 0xf140
   12454:	mov	r1, #2
   12458:	movt	r0, #2
   1245c:	str	r1, [r0]
   12460:	mov	r0, sl
   12464:	b	11da8 <__assert_fail@plt+0x7c0>
   12468:	movw	r8, #61888	; 0xf1c0
   1246c:	movt	r8, #2
   12470:	ldrb	r0, [r8, #8]
   12474:	cmp	r0, #1
   12478:	bne	124d4 <__assert_fail@plt+0xeec>
   1247c:	ldrb	r0, [r8, #4]
   12480:	cmp	r0, #0
   12484:	beq	124a8 <__assert_fail@plt+0xec0>
   12488:	movw	r0, #61760	; 0xf140
   1248c:	movt	r0, #2
   12490:	ldr	r0, [r0]
   12494:	cmp	r0, #2
   12498:	bne	124d4 <__assert_fail@plt+0xeec>
   1249c:	movw	r1, #56952	; 0xde78
   124a0:	movt	r1, #1
   124a4:	b	124b8 <__assert_fail@plt+0xed0>
   124a8:	movw	r1, #56888	; 0xde38
   124ac:	mov	r0, #0
   124b0:	strb	r0, [r8, #8]
   124b4:	movt	r1, #1
   124b8:	mov	r0, #0
   124bc:	mov	r2, #5
   124c0:	bl	11348 <dcgettext@plt>
   124c4:	mov	r2, r0
   124c8:	mov	r0, #0
   124cc:	mov	r1, #0
   124d0:	bl	113e4 <error@plt>
   124d4:	ldr	r0, [r8, #12]
   124d8:	cmp	r0, #0
   124dc:	beq	12514 <__assert_fail@plt+0xf2c>
   124e0:	ldrb	r1, [r8, #4]
   124e4:	cmp	r1, #0
   124e8:	bne	12514 <__assert_fail@plt+0xf2c>
   124ec:	movw	r1, #57005	; 0xdead
   124f0:	mov	r0, #0
   124f4:	mov	r2, #5
   124f8:	movt	r1, #1
   124fc:	bl	11348 <dcgettext@plt>
   12500:	mov	r2, r0
   12504:	mov	r0, #0
   12508:	mov	r1, #0
   1250c:	bl	113e4 <error@plt>
   12510:	b	12568 <__assert_fail@plt+0xf80>
   12514:	cmp	r0, #0
   12518:	beq	12568 <__assert_fail@plt+0xf80>
   1251c:	mov	r1, #0
   12520:	bl	11444 <kill@plt>
   12524:	cmp	r0, #0
   12528:	beq	12568 <__assert_fail@plt+0xf80>
   1252c:	bl	114b0 <__errno_location@plt>
   12530:	ldr	r0, [r0]
   12534:	cmp	r0, #38	; 0x26
   12538:	bne	12568 <__assert_fail@plt+0xf80>
   1253c:	movw	r1, #57067	; 0xdeeb
   12540:	mov	r0, #0
   12544:	mov	r2, #5
   12548:	mov	r6, #0
   1254c:	movt	r1, #1
   12550:	bl	11348 <dcgettext@plt>
   12554:	mov	r2, r0
   12558:	mov	r0, #0
   1255c:	mov	r1, #0
   12560:	bl	113e4 <error@plt>
   12564:	str	r6, [r8, #12]
   12568:	ldrb	r2, [r8, #3]
   1256c:	ldr	r3, [sp, #112]	; 0x70
   12570:	ldr	r5, [sp, #116]	; 0x74
   12574:	cmp	r2, #0
   12578:	orrsne	r0, r3, r5
   1257c:	beq	12590 <__assert_fail@plt+0xfa8>
   12580:	subs	r3, r3, #1
   12584:	sbc	r5, r5, #0
   12588:	str	r3, [sp, #112]	; 0x70
   1258c:	str	r5, [sp, #116]	; 0x74
   12590:	movw	r0, #61864	; 0xf1a8
   12594:	movw	r6, #58304	; 0xe3c0
   12598:	mov	r1, #1
   1259c:	movt	r0, #2
   125a0:	movt	r6, #1
   125a4:	ldr	r0, [r0]
   125a8:	cmp	r9, r0
   125ac:	subgt	r1, r9, r0
   125b0:	addgt	r6, r7, r0, lsl #2
   125b4:	cmp	r1, #0
   125b8:	str	r1, [sp, #72]	; 0x48
   125bc:	beq	126d8 <__assert_fail@plt+0x10f0>
   125c0:	ldr	r9, [sp, #72]	; 0x48
   125c4:	movw	r4, #56578	; 0xdd02
   125c8:	str	r5, [sp, #104]	; 0x68
   125cc:	mov	r7, r2
   125d0:	mov	r5, #0
   125d4:	mov	r8, #0
   125d8:	str	r3, [sp, #108]	; 0x6c
   125dc:	movt	r4, #1
   125e0:	ldr	r0, [r6, r8, lsl #2]
   125e4:	mov	r1, r4
   125e8:	bl	112b8 <strcmp@plt>
   125ec:	clz	r0, r0
   125f0:	add	r8, r8, #1
   125f4:	lsr	r0, r0, #5
   125f8:	cmp	r9, r8
   125fc:	orr	r5, r5, r0
   12600:	bne	125e0 <__assert_fail@plt+0xff8>
   12604:	movw	r0, #61760	; 0xf140
   12608:	mvn	r2, r5
   1260c:	movt	r0, #2
   12610:	ldr	r1, [r0]
   12614:	subs	r0, r1, #1
   12618:	movwne	r0, #1
   1261c:	orr	r0, r2, r0
   12620:	tst	r0, #1
   12624:	beq	15278 <__assert_fail@plt+0x3c90>
   12628:	movw	r8, #61888	; 0xf1c0
   1262c:	movt	r8, #2
   12630:	ldrb	r0, [r8, #4]
   12634:	cmp	r0, #0
   12638:	beq	126e8 <__assert_fail@plt+0x1100>
   1263c:	eor	r2, r5, #1
   12640:	ldr	r3, [sp, #108]	; 0x6c
   12644:	ldr	r5, [sp, #104]	; 0x68
   12648:	tst	r2, #1
   1264c:	mov	r2, r7
   12650:	bne	126b4 <__assert_fail@plt+0x10cc>
   12654:	ldr	r0, [sp, #72]	; 0x48
   12658:	cmp	r0, #1
   1265c:	bne	12670 <__assert_fail@plt+0x1088>
   12660:	cmp	r1, #2
   12664:	ldreq	r0, [r8, #12]
   12668:	cmpeq	r0, #0
   1266c:	beq	13e78 <__assert_fail@plt+0x2890>
   12670:	mov	r0, #0
   12674:	bl	115a0 <isatty@plt>
   12678:	cmp	r0, #0
   1267c:	beq	126a4 <__assert_fail@plt+0x10bc>
   12680:	movw	r1, #55986	; 0xdab2
   12684:	mov	r0, #0
   12688:	mov	r2, #5
   1268c:	movt	r1, #1
   12690:	bl	11348 <dcgettext@plt>
   12694:	mov	r2, r0
   12698:	mov	r0, #0
   1269c:	mov	r1, #0
   126a0:	bl	113e4 <error@plt>
   126a4:	ldrb	r2, [r8, #3]
   126a8:	ldrb	r0, [r8, #4]
   126ac:	ldr	r3, [sp, #112]	; 0x70
   126b0:	ldr	r5, [sp, #116]	; 0x74
   126b4:	orrs	r1, r3, r5
   126b8:	bne	126fc <__assert_fail@plt+0x1114>
   126bc:	orrs	r0, r2, r0
   126c0:	mov	r0, #0
   126c4:	bne	126fc <__assert_fail@plt+0x1114>
   126c8:	sub	sp, fp, #64	; 0x40
   126cc:	vpop	{d8-d11}
   126d0:	add	sp, sp, #4
   126d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126d8:	ldrb	r0, [r8, #4]
   126dc:	orrs	r1, r3, r5
   126e0:	beq	126bc <__assert_fail@plt+0x10d4>
   126e4:	b	126fc <__assert_fail@plt+0x1114>
   126e8:	ldr	r3, [sp, #108]	; 0x6c
   126ec:	ldr	r5, [sp, #104]	; 0x68
   126f0:	mov	r2, r7
   126f4:	orrs	r1, r3, r5
   126f8:	beq	126bc <__assert_fail@plt+0x10d4>
   126fc:	ldr	r4, [sp, #72]	; 0x48
   12700:	mov	r1, #80	; 0x50
   12704:	mov	r0, r4
   12708:	bl	1b3e4 <__assert_fail@plt+0x9dfc>
   1270c:	cmp	r4, #0
   12710:	str	r0, [sp, #40]	; 0x28
   12714:	beq	12780 <__assert_fail@plt+0x1198>
   12718:	ldr	r2, [sp, #72]	; 0x48
   1271c:	mov	r1, #0
   12720:	and	r0, r2, #1
   12724:	cmp	r2, #1
   12728:	beq	12768 <__assert_fail@plt+0x1180>
   1272c:	ldr	r1, [sp, #72]	; 0x48
   12730:	add	r7, r6, #4
   12734:	sub	r2, r1, r0
   12738:	ldr	r1, [sp, #40]	; 0x28
   1273c:	add	r3, r1, #80	; 0x50
   12740:	mov	r1, #0
   12744:	ldr	r5, [r7, #-4]
   12748:	ldr	r4, [r7]
   1274c:	add	r1, r1, #2
   12750:	add	r7, r7, #8
   12754:	cmp	r2, r1
   12758:	str	r5, [r3, #-80]	; 0xffffffb0
   1275c:	str	r4, [r3]
   12760:	add	r3, r3, #160	; 0xa0
   12764:	bne	12744 <__assert_fail@plt+0x115c>
   12768:	cmp	r0, #0
   1276c:	beq	12780 <__assert_fail@plt+0x1198>
   12770:	ldr	r0, [r6, r1, lsl #2]
   12774:	ldr	r2, [sp, #40]	; 0x28
   12778:	add	r1, r1, r1, lsl #2
   1277c:	str	r0, [r2, r1, lsl #4]
   12780:	ldr	r7, [sp, #72]	; 0x48
   12784:	cmp	sl, #1
   12788:	beq	1279c <__assert_fail@plt+0x11b4>
   1278c:	cmp	sl, #0
   12790:	bne	127a4 <__assert_fail@plt+0x11bc>
   12794:	cmp	r7, #2
   12798:	bcc	127a4 <__assert_fail@plt+0x11bc>
   1279c:	mov	r0, #1
   127a0:	strb	r0, [r8, #2]
   127a4:	cmp	r7, #0
   127a8:	beq	13d48 <__assert_fail@plt+0x2760>
   127ac:	ldr	sl, [sp, #40]	; 0x28
   127b0:	sub	r0, fp, #176	; 0xb0
   127b4:	vmov.i32	q5, #0	; 0x00000000
   127b8:	mov	r6, #1
   127bc:	add	r0, r0, #48	; 0x30
   127c0:	str	r0, [sp, #24]
   127c4:	mov	r0, #0
   127c8:	b	12810 <__assert_fail@plt+0x1228>
   127cc:	mov	r0, #4
   127d0:	mov	r1, r6
   127d4:	bl	1a668 <__assert_fail@plt+0x9080>
   127d8:	mov	r3, r0
   127dc:	mov	r0, #0
   127e0:	mov	r1, r4
   127e4:	mov	r2, r5
   127e8:	mov	r6, #0
   127ec:	bl	113e4 <error@plt>
   127f0:	ldr	r0, [sp, #84]	; 0x54
   127f4:	ldr	r7, [sp, #72]	; 0x48
   127f8:	and	r0, r0, r6
   127fc:	mov	r6, r0
   12800:	ldr	r0, [sp, #80]	; 0x50
   12804:	add	r0, r0, #1
   12808:	cmp	r0, r7
   1280c:	beq	13d40 <__assert_fail@plt+0x2758>
   12810:	add	r5, r0, r0, lsl #2
   12814:	str	r0, [sp, #80]	; 0x50
   12818:	mov	r0, sl
   1281c:	movw	r9, #56578	; 0xdd02
   12820:	movt	r9, #1
   12824:	ldr	r4, [r0, r5, lsl #4]!
   12828:	mov	r1, r9
   1282c:	str	r0, [sp, #96]	; 0x60
   12830:	ldr	r0, [sp, #112]	; 0x70
   12834:	str	r0, [sp, #108]	; 0x6c
   12838:	ldr	r0, [sp, #116]	; 0x74
   1283c:	str	r0, [sp, #104]	; 0x68
   12840:	mov	r0, r4
   12844:	bl	112b8 <strcmp@plt>
   12848:	cmp	r0, #0
   1284c:	str	r0, [sp, #64]	; 0x40
   12850:	beq	12868 <__assert_fail@plt+0x1280>
   12854:	mov	r0, r4
   12858:	mov	r1, #0
   1285c:	bl	175f8 <__assert_fail@plt+0x6010>
   12860:	mov	r2, r0
   12864:	b	12874 <__assert_fail@plt+0x128c>
   12868:	mov	r0, #1
   1286c:	mov	r2, #0
   12870:	strb	r0, [r8]
   12874:	ldrb	r4, [r8, #8]
   12878:	mvn	r0, #0
   1287c:	add	r5, sl, r5, lsl #4
   12880:	str	r6, [sp, #84]	; 0x54
   12884:	subs	r0, r2, r0
   12888:	movwne	r0, #1
   1288c:	cmn	r2, #1
   12890:	mvn	r1, r4
   12894:	orr	r0, r1, r0
   12898:	mov	r1, r5
   1289c:	and	r0, r0, #1
   128a0:	strb	r0, [r1, #46]!	; 0x2e
   128a4:	beq	12a48 <__assert_fail@plt+0x1460>
   128a8:	ldrb	r0, [r8, #2]
   128ac:	str	r1, [sp, #48]	; 0x30
   128b0:	str	r2, [sp, #100]	; 0x64
   128b4:	cmp	r0, #1
   128b8:	bne	12928 <__assert_fail@plt+0x1340>
   128bc:	ldr	r0, [sp, #96]	; 0x60
   128c0:	mov	r1, r9
   128c4:	ldr	r4, [r0]
   128c8:	mov	r0, r4
   128cc:	bl	112b8 <strcmp@plt>
   128d0:	cmp	r0, #0
   128d4:	bne	128f0 <__assert_fail@plt+0x1308>
   128d8:	movw	r1, #57375	; 0xe01f
   128dc:	mov	r0, #0
   128e0:	mov	r2, #5
   128e4:	movt	r1, #1
   128e8:	bl	11348 <dcgettext@plt>
   128ec:	mov	r4, r0
   128f0:	ldrb	r0, [r8, #10]
   128f4:	movw	r1, #57390	; 0xe02e
   128f8:	movw	r2, #55494	; 0xd8c6
   128fc:	mov	r3, r4
   12900:	movt	r1, #1
   12904:	movt	r2, #1
   12908:	cmp	r0, #0
   1290c:	movw	r0, #55493	; 0xd8c5
   12910:	movt	r0, #1
   12914:	movne	r2, r0
   12918:	mov	r0, #1
   1291c:	bl	114d4 <__printf_chk@plt>
   12920:	mov	r0, #1
   12924:	strb	r0, [r8, #10]
   12928:	ldr	r0, [sp, #96]	; 0x60
   1292c:	mov	r1, r9
   12930:	ldr	r7, [r0]
   12934:	mov	r0, r7
   12938:	bl	112b8 <strcmp@plt>
   1293c:	cmp	r0, #0
   12940:	bne	1295c <__assert_fail@plt+0x1374>
   12944:	movw	r1, #57375	; 0xe01f
   12948:	mov	r0, #0
   1294c:	mov	r2, #5
   12950:	movt	r1, #1
   12954:	bl	11348 <dcgettext@plt>
   12958:	mov	r7, r0
   1295c:	ldrb	r0, [r8, #1]
   12960:	str	r5, [sp, #68]	; 0x44
   12964:	cmp	r0, #0
   12968:	mov	r0, #3
   1296c:	beq	12a80 <__assert_fail@plt+0x1498>
   12970:	ldr	r1, [sp, #100]	; 0x64
   12974:	sub	r2, fp, #176	; 0xb0
   12978:	bl	1139c <__fxstat64@plt>
   1297c:	cmp	r0, #0
   12980:	bne	12a94 <__assert_fail@plt+0x14ac>
   12984:	ldrb	r0, [r8, #3]
   12988:	cmp	r0, #0
   1298c:	beq	12f40 <__assert_fail@plt+0x1958>
   12990:	ldr	r0, [sp, #108]	; 0x6c
   12994:	ldr	r1, [sp, #104]	; 0x68
   12998:	mov	r9, #0
   1299c:	mov	r4, #0
   129a0:	orrs	r0, r0, r1
   129a4:	beq	1314c <__assert_fail@plt+0x1b64>
   129a8:	ldr	r0, [sp, #100]	; 0x64
   129ac:	add	r1, sp, #120	; 0x78
   129b0:	mov	r2, #8192	; 0x2000
   129b4:	bl	1aba8 <__assert_fail@plt+0x95c0>
   129b8:	cmp	r0, #0
   129bc:	beq	13a8c <__assert_fail@plt+0x24a4>
   129c0:	ldr	r2, [sp, #108]	; 0x6c
   129c4:	ldr	r3, [sp, #104]	; 0x68
   129c8:	cmn	r0, #1
   129cc:	beq	13a98 <__assert_fail@plt+0x24b0>
   129d0:	adds	r9, r9, r0
   129d4:	mov	r6, sl
   129d8:	add	r1, sp, #120	; 0x78
   129dc:	adc	r4, r4, #0
   129e0:	add	r5, r1, r0
   129e4:	mov	r0, r1
   129e8:	mov	sl, r4
   129ec:	ldrb	r4, [r8, #5]
   129f0:	cmp	r4, #0
   129f4:	movwne	r4, #10
   129f8:	str	r2, [sp, #108]	; 0x6c
   129fc:	sub	r2, r5, r0
   12a00:	mov	r1, r4
   12a04:	str	r3, [sp, #104]	; 0x68
   12a08:	bl	11504 <memchr@plt>
   12a0c:	cmp	r0, #0
   12a10:	beq	12a34 <__assert_fail@plt+0x144c>
   12a14:	ldr	r2, [sp, #108]	; 0x6c
   12a18:	ldr	r3, [sp, #104]	; 0x68
   12a1c:	add	r0, r0, #1
   12a20:	subs	r2, r2, #1
   12a24:	sbc	r3, r3, #0
   12a28:	orrs	r1, r2, r3
   12a2c:	bne	129f8 <__assert_fail@plt+0x1410>
   12a30:	b	130b0 <__assert_fail@plt+0x1ac8>
   12a34:	ldr	r5, [sp, #68]	; 0x44
   12a38:	ldr	r0, [sp, #100]	; 0x64
   12a3c:	mov	r4, sl
   12a40:	mov	sl, r6
   12a44:	b	129ac <__assert_fail@plt+0x13c4>
   12a48:	ldrb	r0, [r8, #4]
   12a4c:	cmp	r0, #0
   12a50:	beq	12c88 <__assert_fail@plt+0x16a0>
   12a54:	mvn	r0, #0
   12a58:	mov	r6, r5
   12a5c:	str	r0, [r5, #48]	; 0x30
   12a60:	add	r5, r5, #24
   12a64:	bl	114b0 <__errno_location@plt>
   12a68:	ldr	r1, [r0]
   12a6c:	eor	r2, r4, #1
   12a70:	vst1.64	{d10-d11}, [r5]
   12a74:	strb	r2, [r6, #44]	; 0x2c
   12a78:	str	r1, [r6, #52]	; 0x34
   12a7c:	b	12c8c <__assert_fail@plt+0x16a4>
   12a80:	ldr	r1, [sp, #100]	; 0x64
   12a84:	sub	r2, fp, #176	; 0xb0
   12a88:	bl	1139c <__fxstat64@plt>
   12a8c:	cmp	r0, #0
   12a90:	beq	12e80 <__assert_fail@plt+0x1898>
   12a94:	bl	114b0 <__errno_location@plt>
   12a98:	movw	r1, #57404	; 0xe03c
   12a9c:	ldr	r4, [r0]
   12aa0:	mov	r0, #0
   12aa4:	mov	r2, #5
   12aa8:	movt	r1, #1
   12aac:	str	r0, [sp, #92]	; 0x5c
   12ab0:	mov	r0, #0
   12ab4:	bl	11348 <dcgettext@plt>
   12ab8:	mov	r5, r0
   12abc:	mov	r0, #4
   12ac0:	mov	r1, r7
   12ac4:	bl	1a668 <__assert_fail@plt+0x9080>
   12ac8:	mov	r2, r5
   12acc:	ldr	r5, [sp, #68]	; 0x44
   12ad0:	mov	r3, r0
   12ad4:	mov	r0, #0
   12ad8:	mov	r1, r4
   12adc:	bl	113e4 <error@plt>
   12ae0:	mov	r4, #0
   12ae4:	mov	r6, #0
   12ae8:	ldrb	r0, [r8, #4]
   12aec:	cmp	r0, #0
   12af0:	beq	13a00 <__assert_fail@plt+0x2418>
   12af4:	ldr	r1, [sp, #100]	; 0x64
   12af8:	eor	r0, r6, #1
   12afc:	mov	r7, r4
   12b00:	mov	r4, r5
   12b04:	add	r2, sp, #120	; 0x78
   12b08:	rsb	r0, r0, #0
   12b0c:	str	r0, [r4, #52]!	; 0x34
   12b10:	mov	r0, #3
   12b14:	bl	1139c <__fxstat64@plt>
   12b18:	cmn	r0, #1
   12b1c:	ble	12c04 <__assert_fail@plt+0x161c>
   12b20:	ldr	r0, [sp, #136]	; 0x88
   12b24:	and	r1, r0, #61440	; 0xf000
   12b28:	cmp	r1, #32768	; 0x8000
   12b2c:	bge	12ce0 <__assert_fail@plt+0x16f8>
   12b30:	cmp	r1, #4096	; 0x1000
   12b34:	cmpne	r1, #8192	; 0x2000
   12b38:	beq	12ce8 <__assert_fail@plt+0x1700>
   12b3c:	ldr	r1, [sp, #48]	; 0x30
   12b40:	mvn	r0, #0
   12b44:	mov	r6, r5
   12b48:	mov	r2, #5
   12b4c:	str	r0, [r4]
   12b50:	mov	r0, #0
   12b54:	strb	r0, [r1]
   12b58:	ldrb	r0, [r8, #8]
   12b5c:	mov	r1, #1
   12b60:	bic	r0, r1, r0
   12b64:	movw	r1, #57305	; 0xdfd9
   12b68:	movt	r1, #1
   12b6c:	strb	r0, [r6, #44]!	; 0x2c
   12b70:	mov	r0, #0
   12b74:	bl	11348 <dcgettext@plt>
   12b78:	mov	r4, r0
   12b7c:	ldr	r0, [sp, #96]	; 0x60
   12b80:	mov	r1, r9
   12b84:	ldr	r5, [r0]
   12b88:	mov	r0, r5
   12b8c:	bl	112b8 <strcmp@plt>
   12b90:	cmp	r0, #0
   12b94:	bne	12bb0 <__assert_fail@plt+0x15c8>
   12b98:	movw	r1, #57375	; 0xe01f
   12b9c:	mov	r0, #0
   12ba0:	mov	r2, #5
   12ba4:	movt	r1, #1
   12ba8:	bl	11348 <dcgettext@plt>
   12bac:	mov	r5, r0
   12bb0:	mov	r0, #0
   12bb4:	mov	r1, #3
   12bb8:	mov	r2, r5
   12bbc:	bl	1a8e4 <__assert_fail@plt+0x92fc>
   12bc0:	mov	r5, r0
   12bc4:	ldrb	r0, [r6]
   12bc8:	cmp	r0, #0
   12bcc:	movw	r0, #55494	; 0xd8c6
   12bd0:	movt	r0, #1
   12bd4:	beq	12bec <__assert_fail@plt+0x1604>
   12bd8:	movw	r1, #57350	; 0xe006
   12bdc:	mov	r0, #0
   12be0:	mov	r2, #5
   12be4:	movt	r1, #1
   12be8:	bl	11348 <dcgettext@plt>
   12bec:	str	r0, [sp]
   12bf0:	mov	r0, #0
   12bf4:	mov	r1, #0
   12bf8:	mov	r2, r4
   12bfc:	mov	r3, r5
   12c00:	b	12c7c <__assert_fail@plt+0x1694>
   12c04:	bl	114b0 <__errno_location@plt>
   12c08:	ldr	r1, [r0]
   12c0c:	mov	r2, #5
   12c10:	str	r1, [r4]
   12c14:	movw	r1, #57288	; 0xdfc8
   12c18:	ldr	r4, [r0]
   12c1c:	movt	r1, #1
   12c20:	mov	r0, #0
   12c24:	bl	11348 <dcgettext@plt>
   12c28:	mov	r5, r0
   12c2c:	ldr	r0, [sp, #96]	; 0x60
   12c30:	mov	r1, r9
   12c34:	ldr	r6, [r0]
   12c38:	mov	r0, r6
   12c3c:	bl	112b8 <strcmp@plt>
   12c40:	cmp	r0, #0
   12c44:	bne	12c60 <__assert_fail@plt+0x1678>
   12c48:	movw	r1, #57375	; 0xe01f
   12c4c:	mov	r0, #0
   12c50:	mov	r2, #5
   12c54:	movt	r1, #1
   12c58:	bl	11348 <dcgettext@plt>
   12c5c:	mov	r6, r0
   12c60:	mov	r0, #4
   12c64:	mov	r1, r6
   12c68:	bl	1a668 <__assert_fail@plt+0x9080>
   12c6c:	mov	r3, r0
   12c70:	mov	r0, #0
   12c74:	mov	r1, r4
   12c78:	mov	r2, r5
   12c7c:	bl	113e4 <error@plt>
   12c80:	ldr	r5, [sp, #68]	; 0x44
   12c84:	b	12dac <__assert_fail@plt+0x17c4>
   12c88:	bl	114b0 <__errno_location@plt>
   12c8c:	ldr	r4, [r0]
   12c90:	movw	r1, #57261	; 0xdfad
   12c94:	mov	r0, #0
   12c98:	movt	r1, #1
   12c9c:	mov	r2, #5
   12ca0:	bl	11348 <dcgettext@plt>
   12ca4:	mov	r5, r0
   12ca8:	ldr	r0, [sp, #96]	; 0x60
   12cac:	mov	r1, r9
   12cb0:	ldr	r6, [r0]
   12cb4:	mov	r0, r6
   12cb8:	bl	112b8 <strcmp@plt>
   12cbc:	cmp	r0, #0
   12cc0:	bne	127cc <__assert_fail@plt+0x11e4>
   12cc4:	movw	r1, #57375	; 0xe01f
   12cc8:	mov	r0, #0
   12ccc:	mov	r2, #5
   12cd0:	movt	r1, #1
   12cd4:	bl	11348 <dcgettext@plt>
   12cd8:	mov	r6, r0
   12cdc:	b	127cc <__assert_fail@plt+0x11e4>
   12ce0:	cmpne	r1, #49152	; 0xc000
   12ce4:	bne	12b3c <__assert_fail@plt+0x1554>
   12ce8:	cmp	r6, #0
   12cec:	beq	12dac <__assert_fail@plt+0x17c4>
   12cf0:	ldr	r1, [sp, #92]	; 0x5c
   12cf4:	ldr	r6, [sp, #100]	; 0x64
   12cf8:	str	r7, [r5, #12]
   12cfc:	mov	r7, #0
   12d00:	str	r1, [r5, #8]
   12d04:	ldr	r1, [sp, #44]	; 0x2c
   12d08:	str	r6, [r5, #48]	; 0x30
   12d0c:	ldrd	r2, [r1]
   12d10:	ldr	r1, [sp, #120]	; 0x78
   12d14:	str	r2, [r5, #16]
   12d18:	str	r3, [r5, #20]
   12d1c:	ldr	r2, [sp, #124]	; 0x7c
   12d20:	str	r1, [r5, #24]
   12d24:	ldr	r1, [sp, #36]	; 0x24
   12d28:	str	r2, [r5, #28]
   12d2c:	ldrd	r2, [r1]
   12d30:	ldr	r1, [sp, #64]	; 0x40
   12d34:	str	r7, [r5, #72]	; 0x48
   12d38:	str	r7, [r5, #76]	; 0x4c
   12d3c:	cmp	r1, #0
   12d40:	mov	r1, #1
   12d44:	mvneq	r1, #0
   12d48:	str	r1, [r5, #56]	; 0x38
   12d4c:	str	r0, [r5, #40]	; 0x28
   12d50:	ldr	r0, [sp, #96]	; 0x60
   12d54:	strb	r7, [r5, #44]	; 0x2c
   12d58:	str	r3, [r5, #36]	; 0x24
   12d5c:	str	r2, [r5, #32]
   12d60:	movw	r1, #56578	; 0xdd02
   12d64:	movt	r1, #1
   12d68:	ldr	r4, [r0]
   12d6c:	mov	r0, r4
   12d70:	bl	112b8 <strcmp@plt>
   12d74:	cmp	r0, #0
   12d78:	bne	12d94 <__assert_fail@plt+0x17ac>
   12d7c:	movw	r1, #57375	; 0xe01f
   12d80:	mov	r0, #0
   12d84:	mov	r2, #5
   12d88:	movt	r1, #1
   12d8c:	bl	11348 <dcgettext@plt>
   12d90:	mov	r4, r0
   12d94:	mov	r0, r6
   12d98:	mov	r1, r4
   12d9c:	bl	15384 <__assert_fail@plt+0x3d9c>
   12da0:	strb	r0, [r5, #45]	; 0x2d
   12da4:	mov	r6, #1
   12da8:	b	127f0 <__assert_fail@plt+0x1208>
   12dac:	ldrb	r0, [r8, #8]
   12db0:	mov	r1, #1
   12db4:	bic	r0, r1, r0
   12db8:	mov	r1, r9
   12dbc:	strb	r0, [r5, #44]	; 0x2c
   12dc0:	ldr	r0, [sp, #96]	; 0x60
   12dc4:	ldr	r4, [r0]
   12dc8:	mov	r0, r4
   12dcc:	bl	112b8 <strcmp@plt>
   12dd0:	cmp	r0, #0
   12dd4:	beq	12e48 <__assert_fail@plt+0x1860>
   12dd8:	ldr	r0, [sp, #100]	; 0x64
   12ddc:	add	r1, r0, #1
   12de0:	cmp	r1, #2
   12de4:	bcc	12e70 <__assert_fail@plt+0x1888>
   12de8:	bl	115d0 <close@plt>
   12dec:	ldr	r1, [sp, #100]	; 0x64
   12df0:	cmp	r0, #0
   12df4:	beq	12e70 <__assert_fail@plt+0x1888>
   12df8:	mov	r7, r1
   12dfc:	bl	114b0 <__errno_location@plt>
   12e00:	movw	r1, #57546	; 0xe0ca
   12e04:	ldr	r5, [r0]
   12e08:	mov	r0, #0
   12e0c:	mov	r2, #5
   12e10:	movt	r1, #1
   12e14:	bl	11348 <dcgettext@plt>
   12e18:	mov	r6, r0
   12e1c:	mov	r0, #4
   12e20:	mov	r1, r4
   12e24:	bl	1a668 <__assert_fail@plt+0x9080>
   12e28:	mov	r1, r5
   12e2c:	ldr	r5, [sp, #68]	; 0x44
   12e30:	mov	r3, r0
   12e34:	mov	r0, #0
   12e38:	mov	r2, r6
   12e3c:	str	r7, [sp]
   12e40:	bl	113e4 <error@plt>
   12e44:	b	12e70 <__assert_fail@plt+0x1888>
   12e48:	movw	r1, #57375	; 0xe01f
   12e4c:	mov	r0, #0
   12e50:	mov	r2, #5
   12e54:	movt	r1, #1
   12e58:	bl	11348 <dcgettext@plt>
   12e5c:	mov	r4, r0
   12e60:	ldr	r0, [sp, #100]	; 0x64
   12e64:	add	r1, r0, #1
   12e68:	cmp	r1, #2
   12e6c:	bcs	12de8 <__assert_fail@plt+0x1800>
   12e70:	mvn	r0, #0
   12e74:	mov	r6, #0
   12e78:	str	r0, [r5, #48]	; 0x30
   12e7c:	b	127f0 <__assert_fail@plt+0x1208>
   12e80:	ldr	r2, [sp, #108]	; 0x6c
   12e84:	ldr	r3, [sp, #104]	; 0x68
   12e88:	mvn	r1, #0
   12e8c:	ldrb	r4, [r8, #9]
   12e90:	subs	r0, r1, r2
   12e94:	eor	r4, r4, #1
   12e98:	sbcs	r0, r1, r3
   12e9c:	ldrb	r1, [r8, #3]
   12ea0:	mov	r0, #0
   12ea4:	movwlt	r0, #1
   12ea8:	and	r0, r0, r4
   12eac:	cmp	r1, #0
   12eb0:	beq	1317c <__assert_fail@plt+0x1b94>
   12eb4:	cmp	r0, #0
   12eb8:	beq	130d0 <__assert_fail@plt+0x1ae8>
   12ebc:	ldr	r0, [fp, #-160]	; 0xffffff60
   12ec0:	ldr	ip, [sp, #100]	; 0x64
   12ec4:	and	r0, r0, #61440	; 0xf000
   12ec8:	cmp	r0, #32768	; 0x8000
   12ecc:	bne	12efc <__assert_fail@plt+0x1914>
   12ed0:	mov	r0, #1
   12ed4:	stm	sp, {r0, r7}
   12ed8:	mov	r0, ip
   12edc:	bl	15eac <__assert_fail@plt+0x48c4>
   12ee0:	ldr	r3, [sp, #104]	; 0x68
   12ee4:	ldr	r2, [sp, #108]	; 0x6c
   12ee8:	ldr	ip, [sp, #100]	; 0x64
   12eec:	mvn	r4, #0
   12ef0:	subs	r0, r4, r0
   12ef4:	sbcs	r0, r4, r1
   12ef8:	blt	12f2c <__assert_fail@plt+0x1944>
   12efc:	mov	r0, #1
   12f00:	str	r0, [sp]
   12f04:	mov	r0, ip
   12f08:	bl	113b4 <lseek64@plt>
   12f0c:	ldr	r3, [sp, #104]	; 0x68
   12f10:	ldr	r2, [sp, #108]	; 0x6c
   12f14:	mvn	r4, #0
   12f18:	eor	r1, r1, r4
   12f1c:	eor	r0, r0, r4
   12f20:	orrs	r0, r0, r1
   12f24:	beq	130d0 <__assert_fail@plt+0x1ae8>
   12f28:	ldr	ip, [sp, #100]	; 0x64
   12f2c:	mov	r4, r2
   12f30:	mov	r9, r3
   12f34:	mvn	r1, #0
   12f38:	mvn	r6, #0
   12f3c:	b	139c4 <__assert_fail@plt+0x23dc>
   12f40:	ldrb	r0, [r8, #9]
   12f44:	str	r7, [sp, #28]
   12f48:	cmp	r0, #0
   12f4c:	bne	135cc <__assert_fail@plt+0x1fe4>
   12f50:	ldr	r0, [fp, #-160]	; 0xffffff60
   12f54:	and	r0, r0, #61440	; 0xf000
   12f58:	cmp	r0, #32768	; 0x8000
   12f5c:	bne	135cc <__assert_fail@plt+0x1fe4>
   12f60:	mov	r0, #1
   12f64:	mov	r2, #0
   12f68:	mov	r3, #0
   12f6c:	str	r0, [sp]
   12f70:	ldr	r0, [sp, #100]	; 0x64
   12f74:	bl	113b4 <lseek64@plt>
   12f78:	mov	r4, r0
   12f7c:	mvn	r2, #0
   12f80:	eor	r0, r1, r2
   12f84:	eor	r2, r4, r2
   12f88:	orrs	r0, r2, r0
   12f8c:	beq	135cc <__assert_fail@plt+0x1fe4>
   12f90:	mov	r0, #2
   12f94:	mov	r2, #0
   12f98:	mov	r3, #0
   12f9c:	str	r1, [sp, #76]	; 0x4c
   12fa0:	str	r0, [sp]
   12fa4:	ldr	r0, [sp, #100]	; 0x64
   12fa8:	bl	113b4 <lseek64@plt>
   12fac:	ldr	r3, [sp, #76]	; 0x4c
   12fb0:	mov	lr, r0
   12fb4:	subs	r0, r4, r0
   12fb8:	sbcs	r0, r3, r1
   12fbc:	bge	135b8 <__assert_fail@plt+0x1fd0>
   12fc0:	mov	ip, r1
   12fc4:	orrs	r0, lr, r1
   12fc8:	mov	r6, #1
   12fcc:	beq	13af0 <__assert_fail@plt+0x2508>
   12fd0:	ldr	r0, [sp, #108]	; 0x6c
   12fd4:	ldr	r1, [sp, #104]	; 0x68
   12fd8:	mov	r7, r9
   12fdc:	orrs	r0, r0, r1
   12fe0:	beq	13b0c <__assert_fail@plt+0x2524>
   12fe4:	mov	r0, #0
   12fe8:	str	r4, [sp, #60]	; 0x3c
   12fec:	str	ip, [sp, #56]	; 0x38
   12ff0:	mov	r9, lr
   12ff4:	str	r0, [sp]
   12ff8:	ldr	r0, [sp, #28]
   12ffc:	str	r0, [sp, #4]
   13000:	subs	r0, lr, r4
   13004:	ldr	r4, [sp, #100]	; 0x64
   13008:	sbc	r1, ip, r3
   1300c:	asr	r1, r1, #31
   13010:	add	r1, r0, r1, lsr #19
   13014:	bfc	r1, #0, #13
   13018:	subs	r5, r0, r1
   1301c:	mov	r0, r4
   13020:	movweq	r5, #8192	; 0x2000
   13024:	subs	r8, lr, r5
   13028:	sbc	sl, ip, #0
   1302c:	mov	r2, r8
   13030:	mov	r3, sl
   13034:	bl	15eac <__assert_fail@plt+0x48c4>
   13038:	mov	r0, r4
   1303c:	add	r1, sp, #120	; 0x78
   13040:	mov	r2, r5
   13044:	bl	1aba8 <__assert_fail@plt+0x95c0>
   13048:	cmn	r0, #1
   1304c:	beq	13b14 <__assert_fail@plt+0x252c>
   13050:	mov	r4, r0
   13054:	adds	lr, r8, r0
   13058:	mov	r2, r8
   1305c:	str	r9, [sp, #52]	; 0x34
   13060:	adc	r0, sl, #0
   13064:	cmp	r4, #0
   13068:	str	r0, [sp, #88]	; 0x58
   1306c:	beq	13b6c <__assert_fail@plt+0x2584>
   13070:	movw	r1, #61888	; 0xf1c0
   13074:	ldr	r7, [sp, #108]	; 0x6c
   13078:	add	r0, sp, #120	; 0x78
   1307c:	ldr	r3, [sp, #104]	; 0x68
   13080:	movt	r1, #2
   13084:	add	r0, r4, r0
   13088:	ldrb	r0, [r0, #-1]
   1308c:	ldrb	r1, [r1, #5]
   13090:	subs	r8, r7, #1
   13094:	sbc	r9, r3, #0
   13098:	cmp	r1, #0
   1309c:	movwne	r1, #10
   130a0:	cmp	r1, r0
   130a4:	moveq	r9, r3
   130a8:	moveq	r8, r7
   130ac:	b	13b74 <__assert_fail@plt+0x258c>
   130b0:	cmp	r0, r5
   130b4:	subcc	r1, r5, r0
   130b8:	blcc	15f54 <__assert_fail@plt+0x496c>
   130bc:	ldr	r5, [sp, #68]	; 0x44
   130c0:	ldr	r2, [sp, #100]	; 0x64
   130c4:	mov	r4, sl
   130c8:	mov	sl, r6
   130cc:	b	13150 <__assert_fail@plt+0x1b68>
   130d0:	ldr	ip, [sp, #100]	; 0x64
   130d4:	orrs	r0, r2, r3
   130d8:	mov	r0, #0
   130dc:	beq	131bc <__assert_fail@plt+0x1bd4>
   130e0:	mov	r9, #0
   130e4:	str	r0, [sp, #92]	; 0x5c
   130e8:	mov	sl, r2
   130ec:	mov	r0, ip
   130f0:	add	r1, sp, #120	; 0x78
   130f4:	mov	r2, #8192	; 0x2000
   130f8:	mov	r4, r3
   130fc:	bl	1aba8 <__assert_fail@plt+0x95c0>
   13100:	cmp	r0, #0
   13104:	beq	13a80 <__assert_fail@plt+0x2498>
   13108:	cmn	r0, #1
   1310c:	beq	13a34 <__assert_fail@plt+0x244c>
   13110:	ldr	r1, [sp, #92]	; 0x5c
   13114:	mov	r2, sl
   13118:	adds	r1, r1, r0
   1311c:	str	r1, [sp, #92]	; 0x5c
   13120:	adc	r9, r9, #0
   13124:	subs	r1, sl, r0
   13128:	sbcs	r1, r4, #0
   1312c:	bcc	131c8 <__assert_fail@plt+0x1be0>
   13130:	ldr	ip, [sp, #100]	; 0x64
   13134:	subs	r2, r2, r0
   13138:	mov	r3, r4
   1313c:	sbc	r3, r4, #0
   13140:	orrs	r0, r2, r3
   13144:	bne	130e8 <__assert_fail@plt+0x1b00>
   13148:	b	131e0 <__assert_fail@plt+0x1bf8>
   1314c:	ldr	r2, [sp, #100]	; 0x64
   13150:	mvn	r0, #0
   13154:	mov	r1, r7
   13158:	str	r0, [sp]
   1315c:	str	r0, [sp, #4]
   13160:	mov	r0, #0
   13164:	bl	15c24 <__assert_fail@plt+0x463c>
   13168:	adds	r9, r0, r9
   1316c:	mov	r6, #1
   13170:	str	r9, [sp, #92]	; 0x5c
   13174:	adc	r4, r1, r4
   13178:	b	139ec <__assert_fail@plt+0x2404>
   1317c:	cmp	r0, #0
   13180:	mvn	r4, #0
   13184:	mvn	r5, #0
   13188:	mvn	ip, #0
   1318c:	mvn	lr, #0
   13190:	beq	1323c <__assert_fail@plt+0x1c54>
   13194:	ldr	r0, [fp, #-160]	; 0xffffff60
   13198:	and	r0, r0, #53248	; 0xd000
   1319c:	orr	r0, r0, #8192	; 0x2000
   131a0:	cmp	r0, #40960	; 0xa000
   131a4:	bne	131f4 <__assert_fail@plt+0x1c0c>
   131a8:	ldr	r0, [sp, #24]
   131ac:	mvn	ip, #0
   131b0:	mvn	lr, #0
   131b4:	ldrd	r4, [r0]
   131b8:	b	1323c <__assert_fail@plt+0x1c54>
   131bc:	str	r0, [sp, #92]	; 0x5c
   131c0:	mov	r9, #0
   131c4:	b	131e0 <__assert_fail@plt+0x1bf8>
   131c8:	add	r1, sp, #120	; 0x78
   131cc:	add	r3, r1, r2
   131d0:	sub	r1, r0, r2
   131d4:	mov	r0, r3
   131d8:	bl	15f54 <__assert_fail@plt+0x496c>
   131dc:	ldr	ip, [sp, #100]	; 0x64
   131e0:	ldr	r4, [sp, #92]	; 0x5c
   131e4:	ldr	sl, [sp, #40]	; 0x28
   131e8:	mvn	r1, #0
   131ec:	mvn	r6, #0
   131f0:	b	139c4 <__assert_fail@plt+0x23dc>
   131f4:	ldr	r4, [sp, #108]	; 0x6c
   131f8:	mov	r0, #2
   131fc:	ldr	r5, [sp, #104]	; 0x68
   13200:	str	r0, [sp]
   13204:	ldr	r0, [sp, #100]	; 0x64
   13208:	rsbs	r2, r4, #0
   1320c:	rsc	r3, r5, #0
   13210:	bl	113b4 <lseek64@plt>
   13214:	adds	r4, r0, r4
   13218:	mvn	r2, #0
   1321c:	mov	lr, r1
   13220:	mov	ip, r0
   13224:	adc	r5, r1, r5
   13228:	eor	r3, r1, r2
   1322c:	eor	r1, r0, r2
   13230:	orrs	r0, r1, r3
   13234:	moveq	r5, r2
   13238:	moveq	r4, r2
   1323c:	ldr	r0, [fp, #-120]	; 0xffffff88
   13240:	mov	r3, #0
   13244:	subs	r1, r0, #536870913	; 0x20000001
   13248:	rscs	r1, r3, r0, asr #31
   1324c:	mov	r1, #0
   13250:	movwcc	r1, #1
   13254:	rsbs	r2, r0, #0
   13258:	sbcs	r2, r3, r0, asr #31
   1325c:	mov	r2, #0
   13260:	movwlt	r2, #1
   13264:	ands	r1, r2, r1
   13268:	asrne	r1, r0, #31
   1326c:	moveq	r0, #512	; 0x200
   13270:	subs	r0, r0, r4
   13274:	sbcs	r0, r1, r5
   13278:	bge	13320 <__assert_fail@plt+0x1d38>
   1327c:	mvn	r3, #0
   13280:	mov	r0, ip
   13284:	mov	r1, lr
   13288:	eor	r2, ip, r3
   1328c:	eor	r3, lr, r3
   13290:	orrs	r2, r2, r3
   13294:	bne	132b0 <__assert_fail@plt+0x1cc8>
   13298:	mov	r0, #1
   1329c:	mov	r2, #0
   132a0:	mov	r3, #0
   132a4:	stm	sp, {r0, r7}
   132a8:	ldr	r0, [sp, #100]	; 0x64
   132ac:	bl	15eac <__assert_fail@plt+0x48c4>
   132b0:	subs	r6, r4, r0
   132b4:	mov	lr, r7
   132b8:	mov	r3, r0
   132bc:	mov	r9, r1
   132c0:	sbc	r7, r5, r1
   132c4:	subs	r2, r0, r4
   132c8:	sbcs	r2, r1, r5
   132cc:	bge	139ac <__assert_fail@plt+0x23c4>
   132d0:	ldr	r1, [sp, #108]	; 0x6c
   132d4:	ldr	ip, [sp, #100]	; 0x64
   132d8:	subs	r0, r1, r6
   132dc:	ldr	r6, [sp, #104]	; 0x68
   132e0:	sbcs	r0, r6, r7
   132e4:	bcs	139a4 <__assert_fail@plt+0x23bc>
   132e8:	subs	r4, r4, r1
   132ec:	mov	r0, #0
   132f0:	mov	r7, lr
   132f4:	str	lr, [sp, #4]
   132f8:	sbc	r9, r5, r6
   132fc:	str	r0, [sp]
   13300:	mov	r0, ip
   13304:	mov	r2, r4
   13308:	mov	r3, r9
   1330c:	bl	15eac <__assert_fail@plt+0x48c4>
   13310:	ldr	r1, [sp, #108]	; 0x6c
   13314:	ldr	ip, [sp, #100]	; 0x64
   13318:	ldr	r5, [sp, #68]	; 0x44
   1331c:	b	139c4 <__assert_fail@plt+0x23dc>
   13320:	movw	r0, #8200	; 0x2008
   13324:	str	r7, [sp, #28]
   13328:	bl	1b314 <__assert_fail@plt+0x9d2c>
   1332c:	mov	r4, #0
   13330:	mov	r1, #8192	; 0x2000
   13334:	mov	sl, r0
   13338:	str	r4, [r0, r1]!
   1333c:	str	r4, [r0, #4]
   13340:	movw	r0, #8200	; 0x2008
   13344:	bl	1b314 <__assert_fail@plt+0x9d2c>
   13348:	mov	r8, r0
   1334c:	ldr	r0, [sp, #100]	; 0x64
   13350:	mov	r2, #8192	; 0x2000
   13354:	mov	r1, r8
   13358:	bl	1aba8 <__assert_fail@plt+0x95c0>
   1335c:	mov	r6, r0
   13360:	add	r0, r0, #1
   13364:	cmp	r0, #2
   13368:	bcs	1337c <__assert_fail@plt+0x1d94>
   1336c:	mov	r0, #0
   13370:	mov	r5, #0
   13374:	str	r0, [sp, #88]	; 0x58
   13378:	b	1347c <__assert_fail@plt+0x1e94>
   1337c:	mov	r0, #0
   13380:	mov	r4, #0
   13384:	mov	r5, #0
   13388:	mov	r3, sl
   1338c:	str	r0, [sp, #88]	; 0x58
   13390:	b	133ec <__assert_fail@plt+0x1e04>
   13394:	add	r0, r3, r0
   13398:	mov	r1, r8
   1339c:	mov	r2, r6
   133a0:	str	r3, [sp, #92]	; 0x5c
   133a4:	bl	11318 <memcpy@plt>
   133a8:	ldr	r0, [r7]
   133ac:	ldr	r1, [r4]
   133b0:	add	r0, r1, r0
   133b4:	str	r0, [r4]
   133b8:	ldr	r0, [sp, #100]	; 0x64
   133bc:	movw	r7, #56578	; 0xdd02
   133c0:	mov	r1, r8
   133c4:	mov	r2, #8192	; 0x2000
   133c8:	mov	r4, r9
   133cc:	movt	r7, #1
   133d0:	bl	1aba8 <__assert_fail@plt+0x95c0>
   133d4:	ldr	r3, [sp, #92]	; 0x5c
   133d8:	mov	r6, r0
   133dc:	add	r0, r0, #1
   133e0:	mov	r9, r7
   133e4:	cmp	r0, #1
   133e8:	bls	1347c <__assert_fail@plt+0x1e94>
   133ec:	mov	r7, r8
   133f0:	mov	r0, #8192	; 0x2000
   133f4:	adds	r4, r4, r6
   133f8:	mov	r2, #0
   133fc:	add	r5, r5, r6
   13400:	str	r6, [r7, r0]!
   13404:	mov	r9, r4
   13408:	mov	r4, r3
   1340c:	ldr	r1, [sp, #88]	; 0x58
   13410:	str	r2, [r7, #4]
   13414:	ldr	r0, [r4, r0]!
   13418:	adc	r1, r1, #0
   1341c:	str	r1, [sp, #88]	; 0x58
   13420:	add	r1, r0, r6
   13424:	cmp	r2, r1, lsr #13
   13428:	beq	13394 <__assert_fail@plt+0x1dac>
   1342c:	add	r0, sl, #8192	; 0x2000
   13430:	str	r8, [r4, #4]
   13434:	ldr	r2, [sp, #108]	; 0x6c
   13438:	ldr	r1, [r0]
   1343c:	sub	r1, r5, r1
   13440:	subs	r2, r2, r1
   13444:	ldr	r2, [sp, #104]	; 0x68
   13448:	sbcs	r2, r2, #0
   1344c:	bcs	13468 <__assert_fail@plt+0x1e80>
   13450:	ldr	r0, [r0, #4]
   13454:	str	r8, [sp, #92]	; 0x5c
   13458:	mov	r8, sl
   1345c:	mov	r5, r1
   13460:	mov	sl, r0
   13464:	b	133b8 <__assert_fail@plt+0x1dd0>
   13468:	movw	r0, #8200	; 0x2008
   1346c:	bl	1b314 <__assert_fail@plt+0x9d2c>
   13470:	str	r8, [sp, #92]	; 0x5c
   13474:	mov	r8, r0
   13478:	b	133b8 <__assert_fail@plt+0x1dd0>
   1347c:	mov	r0, r8
   13480:	str	r4, [sp, #92]	; 0x5c
   13484:	bl	17634 <__assert_fail@plt+0x604c>
   13488:	cmn	r6, #1
   1348c:	beq	13538 <__assert_fail@plt+0x1f50>
   13490:	mov	r3, #8192	; 0x2000
   13494:	ldr	r7, [sp, #108]	; 0x6c
   13498:	ldr	r4, [sp, #104]	; 0x68
   1349c:	mov	r6, sl
   134a0:	movw	r8, #8196	; 0x2004
   134a4:	ldr	r1, [sl, r3]
   134a8:	sub	r0, r5, r1
   134ac:	subs	r2, r7, r0
   134b0:	sbcs	r2, r4, #0
   134b4:	bcs	134d4 <__assert_fail@plt+0x1eec>
   134b8:	ldr	r6, [r6, r8]
   134bc:	mov	r5, r0
   134c0:	ldr	r1, [r6, r3]
   134c4:	sub	r0, r0, r1
   134c8:	subs	r2, r7, r0
   134cc:	sbcs	r2, r4, #0
   134d0:	bcc	134b8 <__assert_fail@plt+0x1ed0>
   134d4:	subs	r0, r7, r5
   134d8:	mov	r2, #0
   134dc:	sbcs	r0, r4, #0
   134e0:	movwcc	r2, #1
   134e4:	cmp	r2, #0
   134e8:	subne	r2, r5, r7
   134ec:	add	r0, r6, r2
   134f0:	sub	r1, r1, r2
   134f4:	bl	15f54 <__assert_fail@plt+0x496c>
   134f8:	ldr	r0, [r6, r8]
   134fc:	movw	r8, #61888	; 0xf1c0
   13500:	mov	r6, #1
   13504:	movt	r8, #2
   13508:	cmp	r0, #0
   1350c:	beq	1352c <__assert_fail@plt+0x1f44>
   13510:	mov	r5, #8192	; 0x2000
   13514:	mov	r4, r0
   13518:	ldr	r1, [r4, r5]!
   1351c:	bl	15f54 <__assert_fail@plt+0x496c>
   13520:	ldr	r0, [r4, #4]
   13524:	cmp	r0, #0
   13528:	bne	13514 <__assert_fail@plt+0x1f2c>
   1352c:	cmp	sl, #0
   13530:	bne	13594 <__assert_fail@plt+0x1fac>
   13534:	b	135b0 <__assert_fail@plt+0x1fc8>
   13538:	bl	114b0 <__errno_location@plt>
   1353c:	movw	r1, #57288	; 0xdfc8
   13540:	ldr	r5, [r0]
   13544:	mov	r0, #0
   13548:	mov	r2, #5
   1354c:	mov	r6, #0
   13550:	movt	r1, #1
   13554:	bl	11348 <dcgettext@plt>
   13558:	ldr	r1, [sp, #28]
   1355c:	mov	r7, r0
   13560:	mov	r0, #4
   13564:	bl	1a668 <__assert_fail@plt+0x9080>
   13568:	movw	r9, #56578	; 0xdd02
   1356c:	mov	r3, r0
   13570:	mov	r0, #0
   13574:	mov	r1, r5
   13578:	mov	r2, r7
   1357c:	movt	r9, #1
   13580:	bl	113e4 <error@plt>
   13584:	movw	r8, #61888	; 0xf1c0
   13588:	movt	r8, #2
   1358c:	cmp	sl, #0
   13590:	beq	135b0 <__assert_fail@plt+0x1fc8>
   13594:	movw	r5, #8196	; 0x2004
   13598:	ldr	r4, [sl, r5]
   1359c:	mov	r0, sl
   135a0:	bl	17634 <__assert_fail@plt+0x604c>
   135a4:	cmp	r4, #0
   135a8:	mov	sl, r4
   135ac:	bne	13598 <__assert_fail@plt+0x1fb0>
   135b0:	ldr	sl, [sp, #40]	; 0x28
   135b4:	b	1398c <__assert_fail@plt+0x23a4>
   135b8:	mov	r0, #0
   135bc:	mov	r2, r4
   135c0:	stm	sp, {r0, r7}
   135c4:	ldr	r0, [sp, #100]	; 0x64
   135c8:	bl	15eac <__assert_fail@plt+0x48c4>
   135cc:	movw	r0, #8204	; 0x200c
   135d0:	bl	1b314 <__assert_fail@plt+0x9d2c>
   135d4:	mov	r2, #0
   135d8:	mov	r1, #8192	; 0x2000
   135dc:	mov	r7, r0
   135e0:	str	r2, [r0, r1]!
   135e4:	str	r2, [r0, #4]
   135e8:	str	r2, [r0, #8]
   135ec:	movw	r0, #8204	; 0x200c
   135f0:	bl	1b314 <__assert_fail@plt+0x9d2c>
   135f4:	mov	r9, r0
   135f8:	ldr	r0, [sp, #100]	; 0x64
   135fc:	mov	r2, #8192	; 0x2000
   13600:	mov	r1, r9
   13604:	bl	1aba8 <__assert_fail@plt+0x95c0>
   13608:	mov	r6, r0
   1360c:	add	r0, r0, #1
   13610:	cmp	r0, #2
   13614:	bcs	13638 <__assert_fail@plt+0x2050>
   13618:	mov	r0, #0
   1361c:	str	r7, [sp, #52]	; 0x34
   13620:	str	r0, [sp, #92]	; 0x5c
   13624:	mov	r0, #0
   13628:	str	r0, [sp, #88]	; 0x58
   1362c:	mov	r0, #0
   13630:	str	r0, [sp, #76]	; 0x4c
   13634:	b	137c4 <__assert_fail@plt+0x21dc>
   13638:	mov	r0, #0
   1363c:	str	r7, [sp, #52]	; 0x34
   13640:	str	r0, [sp, #92]	; 0x5c
   13644:	mov	r0, #0
   13648:	str	r0, [sp, #88]	; 0x58
   1364c:	mov	r0, #0
   13650:	str	r0, [sp, #76]	; 0x4c
   13654:	b	136bc <__assert_fail@plt+0x20d4>
   13658:	ldr	r5, [sp, #60]	; 0x3c
   1365c:	ldr	r9, [sp, #56]	; 0x38
   13660:	mov	r2, r6
   13664:	str	r3, [sp, #76]	; 0x4c
   13668:	add	r0, r5, r0
   1366c:	mov	r1, r9
   13670:	bl	11318 <memcpy@plt>
   13674:	ldr	r0, [r4]
   13678:	ldm	r7, {r1, r2}
   1367c:	movw	r8, #61888	; 0xf1c0
   13680:	movt	r8, #2
   13684:	add	r0, r1, r0
   13688:	str	r0, [r7]
   1368c:	ldr	r0, [r4, #4]
   13690:	add	r0, r2, r0
   13694:	str	r0, [r7, #4]
   13698:	mov	r7, r5
   1369c:	ldr	r0, [sp, #100]	; 0x64
   136a0:	mov	r1, r9
   136a4:	mov	r2, #8192	; 0x2000
   136a8:	bl	1aba8 <__assert_fail@plt+0x95c0>
   136ac:	mov	r6, r0
   136b0:	add	r0, r0, #1
   136b4:	cmp	r0, #1
   136b8:	bls	137c4 <__assert_fail@plt+0x21dc>
   136bc:	mov	r4, r9
   136c0:	mov	r0, #8192	; 0x2000
   136c4:	mov	r5, r9
   136c8:	add	sl, r9, r6
   136cc:	str	r6, [r4, r0]!
   136d0:	mov	r0, #0
   136d4:	str	r0, [r4, #4]
   136d8:	str	r0, [r4, #8]
   136dc:	ldr	r0, [sp, #92]	; 0x5c
   136e0:	adds	r0, r0, r6
   136e4:	str	r0, [sp, #92]	; 0x5c
   136e8:	ldr	r0, [sp, #88]	; 0x58
   136ec:	adc	r0, r0, #0
   136f0:	str	r0, [sp, #88]	; 0x58
   136f4:	mov	r0, r9
   136f8:	ldrb	r9, [r8, #5]
   136fc:	sub	r2, sl, r0
   13700:	str	r0, [sp, #56]	; 0x38
   13704:	cmp	r9, #0
   13708:	movwne	r9, #10
   1370c:	mov	r1, r9
   13710:	bl	11504 <memchr@plt>
   13714:	str	r7, [sp, #60]	; 0x3c
   13718:	add	r7, r7, #8192	; 0x2000
   1371c:	cmp	r0, #0
   13720:	mov	r8, #0
   13724:	beq	1374c <__assert_fail@plt+0x2164>
   13728:	mov	r8, #0
   1372c:	add	r0, r0, #1
   13730:	add	r8, r8, #1
   13734:	mov	r1, r9
   13738:	sub	r2, sl, r0
   1373c:	str	r8, [r4, #4]
   13740:	bl	11504 <memchr@plt>
   13744:	cmp	r0, #0
   13748:	bne	1372c <__assert_fail@plt+0x2144>
   1374c:	ldr	r0, [r7]
   13750:	ldr	r3, [sp, #76]	; 0x4c
   13754:	mov	r2, #0
   13758:	add	r1, r0, r6
   1375c:	add	r3, r8, r3
   13760:	cmp	r2, r1, lsr #13
   13764:	beq	13658 <__assert_fail@plt+0x2070>
   13768:	ldr	r9, [sp, #52]	; 0x34
   1376c:	movw	r0, #8196	; 0x2004
   13770:	str	r5, [r7, #8]
   13774:	ldr	r2, [sp, #108]	; 0x6c
   13778:	movw	r8, #61888	; 0xf1c0
   1377c:	movt	r8, #2
   13780:	add	r0, r9, r0
   13784:	ldr	r1, [r0]
   13788:	sub	r1, r3, r1
   1378c:	subs	r2, r2, r1
   13790:	ldr	r2, [sp, #104]	; 0x68
   13794:	sbcs	r2, r2, #0
   13798:	bcs	137b0 <__assert_fail@plt+0x21c8>
   1379c:	ldr	r0, [r0, #4]
   137a0:	str	r1, [sp, #76]	; 0x4c
   137a4:	mov	r7, r5
   137a8:	str	r0, [sp, #52]	; 0x34
   137ac:	b	1369c <__assert_fail@plt+0x20b4>
   137b0:	movw	r0, #8204	; 0x200c
   137b4:	str	r3, [sp, #76]	; 0x4c
   137b8:	bl	1b314 <__assert_fail@plt+0x9d2c>
   137bc:	mov	r9, r0
   137c0:	b	13698 <__assert_fail@plt+0x20b0>
   137c4:	mov	r0, r9
   137c8:	bl	17634 <__assert_fail@plt+0x604c>
   137cc:	cmn	r6, #1
   137d0:	beq	13834 <__assert_fail@plt+0x224c>
   137d4:	ldr	ip, [sp, #108]	; 0x6c
   137d8:	ldr	r4, [sp, #104]	; 0x68
   137dc:	ldr	sl, [sp, #40]	; 0x28
   137e0:	mov	r6, #1
   137e4:	orrs	r0, ip, r4
   137e8:	beq	1395c <__assert_fail@plt+0x2374>
   137ec:	add	r0, r7, #8192	; 0x2000
   137f0:	ldr	r2, [sp, #52]	; 0x34
   137f4:	movw	r9, #56578	; 0xdd02
   137f8:	ldr	r1, [r0]
   137fc:	movt	r9, #1
   13800:	cmp	r1, #0
   13804:	beq	13968 <__assert_fail@plt+0x2380>
   13808:	ldrb	r8, [r8, #5]
   1380c:	add	r1, r1, r7
   13810:	ldrb	r1, [r1, #-1]
   13814:	cmp	r8, #0
   13818:	movwne	r8, #10
   1381c:	cmp	r8, r1
   13820:	bne	13880 <__assert_fail@plt+0x2298>
   13824:	ldr	r5, [sp, #76]	; 0x4c
   13828:	movw	r3, #8200	; 0x2008
   1382c:	movw	r7, #8196	; 0x2004
   13830:	b	1389c <__assert_fail@plt+0x22b4>
   13834:	bl	114b0 <__errno_location@plt>
   13838:	movw	r1, #57288	; 0xdfc8
   1383c:	ldr	r4, [r0]
   13840:	mov	r0, #0
   13844:	mov	r2, #5
   13848:	mov	r6, #0
   1384c:	movt	r1, #1
   13850:	bl	11348 <dcgettext@plt>
   13854:	ldr	r1, [sp, #28]
   13858:	mov	r7, r0
   1385c:	mov	r0, #4
   13860:	bl	1a668 <__assert_fail@plt+0x9080>
   13864:	mov	r3, r0
   13868:	mov	r0, #0
   1386c:	mov	r1, r4
   13870:	mov	r2, r7
   13874:	bl	113e4 <error@plt>
   13878:	ldr	sl, [sp, #40]	; 0x28
   1387c:	b	1395c <__assert_fail@plt+0x2374>
   13880:	ldr	r1, [r0, #4]
   13884:	ldr	r5, [sp, #76]	; 0x4c
   13888:	movw	r3, #8200	; 0x2008
   1388c:	movw	r7, #8196	; 0x2004
   13890:	add	r1, r1, #1
   13894:	add	r5, r5, #1
   13898:	str	r1, [r0, #4]
   1389c:	ldr	r0, [r2, r7]
   138a0:	sub	r1, r5, r0
   138a4:	subs	r0, ip, r1
   138a8:	sbcs	r0, r4, #0
   138ac:	mov	r0, r2
   138b0:	bcs	138d4 <__assert_fail@plt+0x22ec>
   138b4:	mov	r0, r2
   138b8:	ldr	r0, [r0, r3]
   138bc:	mov	r5, r1
   138c0:	ldr	r1, [r0, r7]
   138c4:	sub	r1, r5, r1
   138c8:	subs	r2, ip, r1
   138cc:	sbcs	r2, r4, #0
   138d0:	bcc	138b8 <__assert_fail@plt+0x22d0>
   138d4:	mov	r9, r0
   138d8:	mov	r1, #8192	; 0x2000
   138dc:	ldr	r1, [r9, r1]!
   138e0:	add	r1, r0, r1
   138e4:	str	r1, [sp, #76]	; 0x4c
   138e8:	subs	r1, ip, r5
   138ec:	sbcs	r1, r4, #0
   138f0:	bcs	13914 <__assert_fail@plt+0x232c>
   138f4:	subs	r1, r5, ip
   138f8:	beq	13914 <__assert_fail@plt+0x232c>
   138fc:	sub	r7, ip, r5
   13900:	mov	r1, r8
   13904:	bl	1136c <rawmemchr@plt>
   13908:	add	r0, r0, #1
   1390c:	adds	r7, r7, #1
   13910:	bcc	13900 <__assert_fail@plt+0x2318>
   13914:	ldr	r1, [sp, #76]	; 0x4c
   13918:	sub	r1, r1, r0
   1391c:	bl	15f54 <__assert_fail@plt+0x496c>
   13920:	ldr	r0, [r9, #8]
   13924:	movw	r8, #61888	; 0xf1c0
   13928:	movt	r8, #2
   1392c:	cmp	r0, #0
   13930:	beq	1395c <__assert_fail@plt+0x2374>
   13934:	movw	r9, #56578	; 0xdd02
   13938:	mov	r5, #8192	; 0x2000
   1393c:	movt	r9, #1
   13940:	mov	r4, r0
   13944:	ldr	r1, [r4, r5]!
   13948:	bl	15f54 <__assert_fail@plt+0x496c>
   1394c:	ldr	r0, [r4, #8]
   13950:	cmp	r0, #0
   13954:	bne	13940 <__assert_fail@plt+0x2358>
   13958:	b	13964 <__assert_fail@plt+0x237c>
   1395c:	movw	r9, #56578	; 0xdd02
   13960:	movt	r9, #1
   13964:	ldr	r2, [sp, #52]	; 0x34
   13968:	cmp	r2, #0
   1396c:	beq	1398c <__assert_fail@plt+0x23a4>
   13970:	movw	r5, #8200	; 0x2008
   13974:	ldr	r4, [r2, r5]
   13978:	mov	r0, r2
   1397c:	bl	17634 <__assert_fail@plt+0x604c>
   13980:	cmp	r4, #0
   13984:	mov	r2, r4
   13988:	bne	13974 <__assert_fail@plt+0x238c>
   1398c:	ldr	r5, [sp, #68]	; 0x44
   13990:	ldr	r4, [sp, #88]	; 0x58
   13994:	ldrb	r0, [r8, #4]
   13998:	cmp	r0, #0
   1399c:	bne	12af4 <__assert_fail@plt+0x150c>
   139a0:	b	13a00 <__assert_fail@plt+0x2418>
   139a4:	ldr	r5, [sp, #68]	; 0x44
   139a8:	b	139bc <__assert_fail@plt+0x23d4>
   139ac:	ldr	r5, [sp, #68]	; 0x44
   139b0:	ldr	ip, [sp, #100]	; 0x64
   139b4:	ldr	r1, [sp, #108]	; 0x6c
   139b8:	ldr	r6, [sp, #104]	; 0x68
   139bc:	mov	r4, r3
   139c0:	mov	r7, lr
   139c4:	stm	sp, {r1, r6}
   139c8:	mov	r0, #0
   139cc:	mov	r1, r7
   139d0:	mov	r2, ip
   139d4:	bl	15c24 <__assert_fail@plt+0x463c>
   139d8:	adds	r4, r0, r4
   139dc:	mov	r6, #1
   139e0:	adc	r9, r1, r9
   139e4:	str	r4, [sp, #92]	; 0x5c
   139e8:	mov	r4, r9
   139ec:	movw	r9, #56578	; 0xdd02
   139f0:	movt	r9, #1
   139f4:	ldrb	r0, [r8, #4]
   139f8:	cmp	r0, #0
   139fc:	bne	12af4 <__assert_fail@plt+0x150c>
   13a00:	ldr	r0, [sp, #64]	; 0x40
   13a04:	cmp	r0, #0
   13a08:	ldr	r0, [sp, #100]	; 0x64
   13a0c:	beq	127f0 <__assert_fail@plt+0x1208>
   13a10:	bl	115d0 <close@plt>
   13a14:	cmp	r0, #0
   13a18:	beq	127f0 <__assert_fail@plt+0x1208>
   13a1c:	bl	114b0 <__errno_location@plt>
   13a20:	ldr	r4, [r0]
   13a24:	movw	r1, #57288	; 0xdfc8
   13a28:	mov	r0, #0
   13a2c:	movt	r1, #1
   13a30:	b	12c9c <__assert_fail@plt+0x16b4>
   13a34:	bl	114b0 <__errno_location@plt>
   13a38:	movw	r1, #57288	; 0xdfc8
   13a3c:	ldr	r4, [r0]
   13a40:	mov	r0, #0
   13a44:	mov	r2, #5
   13a48:	mov	r6, #0
   13a4c:	movt	r1, #1
   13a50:	bl	11348 <dcgettext@plt>
   13a54:	mov	r5, r0
   13a58:	mov	r0, #4
   13a5c:	mov	r1, r7
   13a60:	bl	1a668 <__assert_fail@plt+0x9080>
   13a64:	mov	r2, r5
   13a68:	ldr	r5, [sp, #68]	; 0x44
   13a6c:	mov	r3, r0
   13a70:	mov	r0, #0
   13a74:	mov	r1, r4
   13a78:	bl	113e4 <error@plt>
   13a7c:	b	13a84 <__assert_fail@plt+0x249c>
   13a80:	mov	r6, #1
   13a84:	ldr	sl, [sp, #40]	; 0x28
   13a88:	b	139e8 <__assert_fail@plt+0x2400>
   13a8c:	str	r9, [sp, #92]	; 0x5c
   13a90:	mov	r6, #1
   13a94:	b	139ec <__assert_fail@plt+0x2404>
   13a98:	str	r9, [sp, #92]	; 0x5c
   13a9c:	bl	114b0 <__errno_location@plt>
   13aa0:	movw	r1, #57288	; 0xdfc8
   13aa4:	mov	r9, r4
   13aa8:	ldr	r4, [r0]
   13aac:	mov	r0, #0
   13ab0:	mov	r2, #5
   13ab4:	mov	r6, #0
   13ab8:	movt	r1, #1
   13abc:	bl	11348 <dcgettext@plt>
   13ac0:	mov	r5, r0
   13ac4:	mov	r0, #4
   13ac8:	mov	r1, r7
   13acc:	bl	1a668 <__assert_fail@plt+0x9080>
   13ad0:	mov	r3, r0
   13ad4:	mov	r1, r4
   13ad8:	mov	r0, #0
   13adc:	mov	r2, r5
   13ae0:	mov	r4, r9
   13ae4:	bl	113e4 <error@plt>
   13ae8:	ldr	r5, [sp, #68]	; 0x44
   13aec:	b	139ec <__assert_fail@plt+0x2404>
   13af0:	mov	r0, #0
   13af4:	mov	r4, #0
   13af8:	str	r0, [sp, #92]	; 0x5c
   13afc:	ldrb	r0, [r8, #4]
   13b00:	cmp	r0, #0
   13b04:	bne	12af4 <__assert_fail@plt+0x150c>
   13b08:	b	13a00 <__assert_fail@plt+0x2418>
   13b0c:	str	ip, [sp, #88]	; 0x58
   13b10:	b	13cc4 <__assert_fail@plt+0x26dc>
   13b14:	ldr	r0, [sp, #56]	; 0x38
   13b18:	str	r9, [sp, #92]	; 0x5c
   13b1c:	str	r0, [sp, #88]	; 0x58
   13b20:	bl	114b0 <__errno_location@plt>
   13b24:	movw	r1, #57288	; 0xdfc8
   13b28:	ldr	r4, [r0]
   13b2c:	mov	r0, #0
   13b30:	mov	r2, #5
   13b34:	mov	r6, #0
   13b38:	movt	r1, #1
   13b3c:	bl	11348 <dcgettext@plt>
   13b40:	ldr	r1, [sp, #28]
   13b44:	mov	r5, r0
   13b48:	mov	r0, #4
   13b4c:	bl	1a668 <__assert_fail@plt+0x9080>
   13b50:	mov	r2, r5
   13b54:	ldr	r5, [sp, #68]	; 0x44
   13b58:	mov	r3, r0
   13b5c:	mov	r0, #0
   13b60:	mov	r1, r4
   13b64:	bl	113e4 <error@plt>
   13b68:	b	13cc8 <__assert_fail@plt+0x26e0>
   13b6c:	ldr	r8, [sp, #108]	; 0x6c
   13b70:	ldr	r9, [sp, #104]	; 0x68
   13b74:	movw	r0, #61888	; 0xf1c0
   13b78:	str	r2, [sp, #108]	; 0x6c
   13b7c:	mov	r2, r4
   13b80:	str	lr, [sp, #92]	; 0x5c
   13b84:	movt	r0, #2
   13b88:	ldrb	r7, [r0, #5]
   13b8c:	cmp	r7, #0
   13b90:	movwne	r7, #10
   13b94:	cmp	r2, #0
   13b98:	add	r5, sp, #120	; 0x78
   13b9c:	beq	13bd4 <__assert_fail@plt+0x25ec>
   13ba0:	mov	r0, r5
   13ba4:	mov	r1, r7
   13ba8:	bl	11498 <memrchr@plt>
   13bac:	cmp	r0, #0
   13bb0:	beq	13bd4 <__assert_fail@plt+0x25ec>
   13bb4:	subs	r1, r8, #1
   13bb8:	sub	r2, r0, r5
   13bbc:	sbc	r3, r9, #0
   13bc0:	orrs	r5, r8, r9
   13bc4:	mov	r8, r1
   13bc8:	mov	r9, r3
   13bcc:	bne	13b94 <__assert_fail@plt+0x25ac>
   13bd0:	b	13c64 <__assert_fail@plt+0x267c>
   13bd4:	ldr	r7, [sp, #76]	; 0x4c
   13bd8:	ldr	r3, [sp, #60]	; 0x3c
   13bdc:	ldr	r4, [sp, #108]	; 0x6c
   13be0:	eor	r0, r4, r3
   13be4:	eor	r1, sl, r7
   13be8:	orrs	r0, r0, r1
   13bec:	beq	13cec <__assert_fail@plt+0x2704>
   13bf0:	mov	r0, #0
   13bf4:	ldr	r5, [sp, #100]	; 0x64
   13bf8:	subs	r4, r4, #8192	; 0x2000
   13bfc:	str	r0, [sp]
   13c00:	ldr	r0, [sp, #28]
   13c04:	sbc	sl, sl, #0
   13c08:	mov	r2, r4
   13c0c:	mov	r3, sl
   13c10:	str	r0, [sp, #4]
   13c14:	mov	r0, r5
   13c18:	bl	15eac <__assert_fail@plt+0x48c4>
   13c1c:	mov	r0, r5
   13c20:	add	r1, sp, #120	; 0x78
   13c24:	mov	r2, #8192	; 0x2000
   13c28:	bl	1aba8 <__assert_fail@plt+0x95c0>
   13c2c:	ldr	r5, [sp, #68]	; 0x44
   13c30:	movw	r7, #56578	; 0xdd02
   13c34:	cmn	r0, #1
   13c38:	movt	r7, #1
   13c3c:	beq	13b20 <__assert_fail@plt+0x2538>
   13c40:	mov	r1, r0
   13c44:	adds	lr, r4, r0
   13c48:	mov	r2, r4
   13c4c:	adc	r0, sl, #0
   13c50:	cmp	r1, #0
   13c54:	mov	r4, r1
   13c58:	str	r0, [sp, #88]	; 0x58
   13c5c:	bne	13b74 <__assert_fail@plt+0x258c>
   13c60:	b	13cc4 <__assert_fail@plt+0x26dc>
   13c64:	mvn	r1, r2
   13c68:	add	r0, r0, #1
   13c6c:	add	r1, r4, r1
   13c70:	bl	15f54 <__assert_fail@plt+0x496c>
   13c74:	ldr	r0, [sp, #52]	; 0x34
   13c78:	ldr	r1, [sp, #56]	; 0x38
   13c7c:	ldr	r2, [sp, #108]	; 0x6c
   13c80:	subs	r0, r0, r4
   13c84:	sbc	r1, r1, #0
   13c88:	subs	r0, r0, r2
   13c8c:	ldr	r2, [sp, #100]	; 0x64
   13c90:	sbc	r1, r1, sl
   13c94:	stm	sp, {r0, r1}
   13c98:	ldr	r1, [sp, #28]
   13c9c:	mov	r0, #0
   13ca0:	bl	15c24 <__assert_fail@plt+0x463c>
   13ca4:	ldr	lr, [sp, #92]	; 0x5c
   13ca8:	adds	lr, r0, lr
   13cac:	ldr	r0, [sp, #88]	; 0x58
   13cb0:	adc	r0, r1, r0
   13cb4:	ldr	r5, [sp, #68]	; 0x44
   13cb8:	movw	r7, #56578	; 0xdd02
   13cbc:	str	r0, [sp, #88]	; 0x58
   13cc0:	movt	r7, #1
   13cc4:	str	lr, [sp, #92]	; 0x5c
   13cc8:	ldr	sl, [sp, #40]	; 0x28
   13ccc:	ldr	r4, [sp, #88]	; 0x58
   13cd0:	movw	r8, #61888	; 0xf1c0
   13cd4:	mov	r9, r7
   13cd8:	movt	r8, #2
   13cdc:	ldrb	r0, [r8, #4]
   13ce0:	cmp	r0, #0
   13ce4:	bne	12af4 <__assert_fail@plt+0x150c>
   13ce8:	b	13a00 <__assert_fail@plt+0x2418>
   13cec:	ldr	r4, [sp, #100]	; 0x64
   13cf0:	ldr	r5, [sp, #28]
   13cf4:	mov	r0, #0
   13cf8:	mov	r8, r3
   13cfc:	mov	r2, r3
   13d00:	mov	r3, r7
   13d04:	str	r0, [sp]
   13d08:	mov	r0, r4
   13d0c:	str	r5, [sp, #4]
   13d10:	bl	15eac <__assert_fail@plt+0x48c4>
   13d14:	ldr	r0, [sp, #52]	; 0x34
   13d18:	mov	r1, r5
   13d1c:	mov	r2, r4
   13d20:	str	r0, [sp]
   13d24:	ldr	r0, [sp, #56]	; 0x38
   13d28:	str	r0, [sp, #4]
   13d2c:	mov	r0, #0
   13d30:	bl	15c24 <__assert_fail@plt+0x463c>
   13d34:	adds	lr, r0, r8
   13d38:	adc	r0, r1, r7
   13d3c:	b	13cb4 <__assert_fail@plt+0x26cc>
   13d40:	eor	r0, r6, #1
   13d44:	b	13d50 <__assert_fail@plt+0x2768>
   13d48:	ldr	sl, [sp, #40]	; 0x28
   13d4c:	mov	r0, #0
   13d50:	str	r0, [sp, #84]	; 0x54
   13d54:	ldrb	r0, [r8, #4]
   13d58:	cmp	r0, #0
   13d5c:	cmpne	r7, #0
   13d60:	beq	14620 <__assert_fail@plt+0x3038>
   13d64:	movw	r4, #56578	; 0xdd02
   13d68:	add	r6, sl, #48	; 0x30
   13d6c:	mov	r5, #0
   13d70:	mov	r8, #1
   13d74:	mvn	r9, #0
   13d78:	movt	r4, #1
   13d7c:	b	13d90 <__assert_fail@plt+0x27a8>
   13d80:	add	r5, r5, #1
   13d84:	subs	r7, r7, #1
   13d88:	add	r6, r6, #80	; 0x50
   13d8c:	beq	13de0 <__assert_fail@plt+0x27f8>
   13d90:	ldr	r0, [r6, #-48]	; 0xffffffd0
   13d94:	mov	r1, r4
   13d98:	bl	112b8 <strcmp@plt>
   13d9c:	cmp	r0, #0
   13da0:	bne	13d80 <__assert_fail@plt+0x2798>
   13da4:	ldrb	r0, [r6, #-4]
   13da8:	cmp	r0, #0
   13dac:	bne	13d80 <__assert_fail@plt+0x2798>
   13db0:	ldr	r0, [r6]
   13db4:	cmp	r0, #0
   13db8:	bmi	13d80 <__assert_fail@plt+0x2798>
   13dbc:	ldr	r0, [r6, #-8]
   13dc0:	and	r0, r0, #61440	; 0xf000
   13dc4:	cmp	r0, #4096	; 0x1000
   13dc8:	bne	13d80 <__assert_fail@plt+0x2798>
   13dcc:	strb	r8, [r6, #-4]
   13dd0:	str	r9, [r6]
   13dd4:	subs	r7, r7, #1
   13dd8:	add	r6, r6, #80	; 0x50
   13ddc:	bne	13d90 <__assert_fail@plt+0x27a8>
   13de0:	movw	r8, #61888	; 0xf1c0
   13de4:	cmp	r5, #0
   13de8:	movt	r8, #2
   13dec:	beq	14620 <__assert_fail@plt+0x3038>
   13df0:	sub	r2, fp, #176	; 0xb0
   13df4:	mov	r0, #3
   13df8:	mov	r1, #1
   13dfc:	bl	1139c <__fxstat64@plt>
   13e00:	cmn	r0, #1
   13e04:	ble	152f8 <__assert_fail@plt+0x3d10>
   13e08:	ldr	r0, [fp, #-160]	; 0xffffff60
   13e0c:	and	r0, r0, #61440	; 0xf000
   13e10:	sub	r0, r0, #4096	; 0x1000
   13e14:	clz	r0, r0
   13e18:	lsr	r0, r0, #5
   13e1c:	strb	r0, [r8, #6]
   13e20:	ldrb	r0, [r8, #7]
   13e24:	cmp	r0, #0
   13e28:	bne	13fd0 <__assert_fail@plt+0x29e8>
   13e2c:	ldr	r6, [sp, #72]	; 0x48
   13e30:	movw	r4, #56578	; 0xdd02
   13e34:	add	r5, sl, #44	; 0x2c
   13e38:	movt	r4, #1
   13e3c:	ldrb	r0, [r5]
   13e40:	cmp	r0, #0
   13e44:	beq	13e60 <__assert_fail@plt+0x2878>
   13e48:	subs	r6, r6, #1
   13e4c:	add	r5, r5, #80	; 0x50
   13e50:	beq	13ea4 <__assert_fail@plt+0x28bc>
   13e54:	ldrb	r0, [r5]
   13e58:	cmp	r0, #0
   13e5c:	bne	13e48 <__assert_fail@plt+0x2860>
   13e60:	ldr	r0, [r5, #-44]	; 0xffffffd4
   13e64:	mov	r1, r4
   13e68:	bl	112b8 <strcmp@plt>
   13e6c:	cmp	r0, #0
   13e70:	bne	13e48 <__assert_fail@plt+0x2860>
   13e74:	b	13fc8 <__assert_fail@plt+0x29e0>
   13e78:	add	r2, sp, #120	; 0x78
   13e7c:	mov	r0, #3
   13e80:	mov	r1, #0
   13e84:	bl	1139c <__fxstat64@plt>
   13e88:	cmp	r0, #0
   13e8c:	bne	12670 <__assert_fail@plt+0x1088>
   13e90:	ldr	r0, [sp, #136]	; 0x88
   13e94:	and	r0, r0, #61440	; 0xf000
   13e98:	cmp	r0, #32768	; 0x8000
   13e9c:	beq	12670 <__assert_fail@plt+0x1088>
   13ea0:	b	126a4 <__assert_fail@plt+0x10bc>
   13ea4:	ldr	r1, [sp, #72]	; 0x48
   13ea8:	add	r0, sl, #45	; 0x2d
   13eac:	ldr	r2, [r0, #3]
   13eb0:	cmp	r2, #0
   13eb4:	bpl	13ed0 <__assert_fail@plt+0x28e8>
   13eb8:	subs	r1, r1, #1
   13ebc:	add	r0, r0, #80	; 0x50
   13ec0:	beq	13ee0 <__assert_fail@plt+0x28f8>
   13ec4:	ldr	r2, [r0, #3]
   13ec8:	cmp	r2, #0
   13ecc:	bmi	13eb8 <__assert_fail@plt+0x28d0>
   13ed0:	ldrb	r2, [r0]
   13ed4:	cmp	r2, #0
   13ed8:	beq	13eb8 <__assert_fail@plt+0x28d0>
   13edc:	b	13fc8 <__assert_fail@plt+0x29e0>
   13ee0:	ldr	r1, [sp, #72]	; 0x48
   13ee4:	add	r0, sl, #45	; 0x2d
   13ee8:	ldr	r2, [r0, #3]
   13eec:	cmp	r2, #0
   13ef0:	bpl	13f0c <__assert_fail@plt+0x2924>
   13ef4:	subs	r1, r1, #1
   13ef8:	add	r0, r0, #80	; 0x50
   13efc:	beq	13fc8 <__assert_fail@plt+0x29e0>
   13f00:	ldr	r2, [r0, #3]
   13f04:	cmp	r2, #0
   13f08:	bmi	13ef4 <__assert_fail@plt+0x290c>
   13f0c:	ldrb	r2, [r0]
   13f10:	cmp	r2, #0
   13f14:	bne	13ef4 <__assert_fail@plt+0x290c>
   13f18:	ldr	r5, [sp, #72]	; 0x48
   13f1c:	add	r6, sp, #120	; 0x78
   13f20:	mov	r4, sl
   13f24:	b	13f34 <__assert_fail@plt+0x294c>
   13f28:	add	r4, r4, #80	; 0x50
   13f2c:	subs	r5, r5, #1
   13f30:	beq	13f60 <__assert_fail@plt+0x2978>
   13f34:	ldr	r1, [r4]
   13f38:	mov	r0, #3
   13f3c:	mov	r2, r6
   13f40:	bl	115dc <__lxstat64@plt>
   13f44:	cmp	r0, #0
   13f48:	bne	13f28 <__assert_fail@plt+0x2940>
   13f4c:	ldr	r0, [sp, #136]	; 0x88
   13f50:	and	r0, r0, #61440	; 0xf000
   13f54:	cmp	r0, #40960	; 0xa000
   13f58:	bne	13f28 <__assert_fail@plt+0x2940>
   13f5c:	b	13fc8 <__assert_fail@plt+0x29e0>
   13f60:	ldr	r1, [sp, #72]	; 0x48
   13f64:	add	r0, sl, #40	; 0x28
   13f68:	ldr	r2, [r0, #8]
   13f6c:	cmp	r2, #0
   13f70:	bpl	13f8c <__assert_fail@plt+0x29a4>
   13f74:	subs	r1, r1, #1
   13f78:	add	r0, r0, #80	; 0x50
   13f7c:	beq	13fa4 <__assert_fail@plt+0x29bc>
   13f80:	ldr	r2, [r0, #8]
   13f84:	cmp	r2, #0
   13f88:	bmi	13f74 <__assert_fail@plt+0x298c>
   13f8c:	ldr	r2, [r0]
   13f90:	and	r2, r2, #61440	; 0xf000
   13f94:	cmp	r2, #32768	; 0x8000
   13f98:	cmpne	r2, #4096	; 0x1000
   13f9c:	beq	13f74 <__assert_fail@plt+0x298c>
   13fa0:	b	13fc8 <__assert_fail@plt+0x29e0>
   13fa4:	movw	r0, #61760	; 0xf140
   13fa8:	ldr	r1, [sp, #84]	; 0x54
   13fac:	movt	r0, #2
   13fb0:	ldr	r0, [r0]
   13fb4:	eor	r1, r1, #1
   13fb8:	subs	r0, r0, #2
   13fbc:	movwne	r0, #1
   13fc0:	orrs	r0, r0, r1
   13fc4:	bne	14690 <__assert_fail@plt+0x30a8>
   13fc8:	mov	r0, #1
   13fcc:	strb	r0, [r8, #7]
   13fd0:	ldr	r6, [sp, #72]	; 0x48
   13fd4:	mov	r0, #1
   13fd8:	strb	r0, [r8, #7]
   13fdc:	cmp	r6, #1
   13fe0:	bne	14000 <__assert_fail@plt+0x2a18>
   13fe4:	ldr	r0, [r8, #12]
   13fe8:	cmp	r0, #0
   13fec:	movweq	r0, #61760	; 0xf140
   13ff0:	movteq	r0, #2
   13ff4:	ldreq	r0, [r0]
   13ff8:	cmpeq	r0, #2
   13ffc:	beq	14650 <__assert_fail@plt+0x3068>
   14000:	sub	r0, r6, #1
   14004:	str	r0, [sp, #92]	; 0x5c
   14008:	mov	r0, #2048	; 0x800
   1400c:	str	r0, [sp, #96]	; 0x60
   14010:	mov	r0, #0
   14014:	str	r0, [sp, #108]	; 0x6c
   14018:	add	r0, sl, #44	; 0x2c
   1401c:	str	r0, [sp, #76]	; 0x4c
   14020:	add	r0, sl, #48	; 0x30
   14024:	str	r0, [sp, #68]	; 0x44
   14028:	add	r0, sl, #72	; 0x48
   1402c:	str	r0, [sp, #80]	; 0x50
   14030:	mov	r0, #0
   14034:	str	r0, [sp, #88]	; 0x58
   14038:	b	14060 <__assert_fail@plt+0x2a78>
   1403c:	vmov.f64	d0, d8
   14040:	bl	1b990 <__assert_fail@plt+0xa3a8>
   14044:	cmp	r0, #0
   14048:	bne	152e4 <__assert_fail@plt+0x3cfc>
   1404c:	mov	r0, #0
   14050:	mov	r4, #1
   14054:	str	r0, [sp, #88]	; 0x58
   14058:	tst	r4, #1
   1405c:	beq	14620 <__assert_fail@plt+0x3038>
   14060:	ldr	r7, [sp, #80]	; 0x50
   14064:	mov	sl, #0
   14068:	mov	r0, #0
   1406c:	str	r0, [sp, #104]	; 0x68
   14070:	ldrb	r0, [r7, #-28]	; 0xffffffe4
   14074:	cmp	r0, #0
   14078:	bne	1408c <__assert_fail@plt+0x2aa4>
   1407c:	b	140a8 <__assert_fail@plt+0x2ac0>
   14080:	ldr	r1, [sp, #108]	; 0x6c
   14084:	mov	r0, r9
   14088:	bl	16000 <__assert_fail@plt+0x4a18>
   1408c:	add	sl, sl, #1
   14090:	add	r7, r7, #80	; 0x50
   14094:	cmp	r6, sl
   14098:	beq	144c4 <__assert_fail@plt+0x2edc>
   1409c:	ldrb	r0, [r7, #-28]	; 0xffffffe4
   140a0:	cmp	r0, #0
   140a4:	bne	1408c <__assert_fail@plt+0x2aa4>
   140a8:	ldr	r4, [r7, #-24]	; 0xffffffe8
   140ac:	sub	r9, r7, #72	; 0x48
   140b0:	cmn	r4, #1
   140b4:	ble	14080 <__assert_fail@plt+0x2a98>
   140b8:	ldr	r5, [r7, #-72]	; 0xffffffb8
   140bc:	movw	r1, #56578	; 0xdd02
   140c0:	movt	r1, #1
   140c4:	mov	r0, r5
   140c8:	bl	112b8 <strcmp@plt>
   140cc:	cmp	r0, #0
   140d0:	bne	140ec <__assert_fail@plt+0x2b04>
   140d4:	movw	r1, #57375	; 0xe01f
   140d8:	mov	r0, #0
   140dc:	mov	r2, #5
   140e0:	movt	r1, #1
   140e4:	bl	11348 <dcgettext@plt>
   140e8:	mov	r5, r0
   140ec:	ldr	r0, [r7, #-32]	; 0xffffffe0
   140f0:	ldr	r1, [sp, #108]	; 0x6c
   140f4:	str	r0, [sp, #100]	; 0x64
   140f8:	ldr	r0, [r7, #-16]
   140fc:	cmp	r0, r1
   14100:	mov	r0, r1
   14104:	beq	14148 <__assert_fail@plt+0x2b60>
   14108:	mov	r0, r4
   1410c:	mov	r1, #3
   14110:	bl	17418 <__assert_fail@plt+0x5e30>
   14114:	cmp	r0, #0
   14118:	bmi	141f4 <__assert_fail@plt+0x2c0c>
   1411c:	ldr	r1, [sp, #96]	; 0x60
   14120:	orr	r2, r0, r1
   14124:	cmp	r2, r0
   14128:	beq	14140 <__assert_fail@plt+0x2b58>
   1412c:	mov	r0, r4
   14130:	mov	r1, #4
   14134:	bl	17418 <__assert_fail@plt+0x5e30>
   14138:	cmn	r0, #1
   1413c:	beq	141f4 <__assert_fail@plt+0x2c0c>
   14140:	ldr	r0, [sp, #108]	; 0x6c
   14144:	str	r0, [r7, #-16]
   14148:	cmp	r0, #0
   1414c:	beq	14228 <__assert_fail@plt+0x2c40>
   14150:	ldr	r2, [r7, #-16]
   14154:	mvn	r1, #0
   14158:	subs	r0, r1, #1
   1415c:	sbc	r1, r1, #0
   14160:	cmp	r2, #0
   14164:	bne	141a8 <__assert_fail@plt+0x2bc0>
   14168:	ldr	r0, [sp, #100]	; 0x64
   1416c:	mvn	r1, #0
   14170:	and	r0, r0, #61440	; 0xf000
   14174:	cmp	r0, #32768	; 0x8000
   14178:	mvn	r0, #0
   1417c:	bne	141a8 <__assert_fail@plt+0x2bc0>
   14180:	ldrb	r0, [r7, #-27]	; 0xffffffe5
   14184:	mvn	r1, #0
   14188:	cmp	r0, #0
   1418c:	mvn	r0, #0
   14190:	beq	141a8 <__assert_fail@plt+0x2bc0>
   14194:	ldr	r2, [sp, #32]
   14198:	ldrd	r0, [r7, #-64]	; 0xffffffc0
   1419c:	ldrd	r2, [r2]
   141a0:	subs	r0, r2, r0
   141a4:	sbc	r1, r3, r1
   141a8:	stm	sp, {r0, r1}
   141ac:	mov	r0, #0
   141b0:	mov	r1, r5
   141b4:	mov	r2, r4
   141b8:	bl	15c24 <__assert_fail@plt+0x463c>
   141bc:	ldrd	r2, [r7, #-64]	; 0xffffffc0
   141c0:	adds	r2, r2, r0
   141c4:	adc	r3, r3, r1
   141c8:	orrs	r0, r0, r1
   141cc:	ldr	r1, [sp, #104]	; 0x68
   141d0:	movwne	r0, #1
   141d4:	strd	r2, [r7, #-64]	; 0xffffffc0
   141d8:	orr	r1, r1, r0
   141dc:	str	r1, [sp, #104]	; 0x68
   141e0:	add	sl, sl, #1
   141e4:	add	r7, r7, #80	; 0x50
   141e8:	cmp	r6, sl
   141ec:	bne	1409c <__assert_fail@plt+0x2ab4>
   141f0:	b	144c4 <__assert_fail@plt+0x2edc>
   141f4:	ldr	r6, [r7, #-32]	; 0xffffffe0
   141f8:	bl	114b0 <__errno_location@plt>
   141fc:	ldr	r8, [r0]
   14200:	and	r0, r6, #61440	; 0xf000
   14204:	cmp	r0, #32768	; 0x8000
   14208:	cmpeq	r8, #1
   1420c:	bne	1523c <__assert_fail@plt+0x3c54>
   14210:	ldr	r0, [r7, #-16]
   14214:	ldr	r6, [sp, #72]	; 0x48
   14218:	movw	r8, #61888	; 0xf1c0
   1421c:	movt	r8, #2
   14220:	cmp	r0, #0
   14224:	bne	14150 <__assert_fail@plt+0x2b68>
   14228:	mov	r0, #3
   1422c:	mov	r1, r4
   14230:	add	r2, sp, #120	; 0x78
   14234:	bl	1139c <__fxstat64@plt>
   14238:	cmp	r0, #0
   1423c:	beq	142a0 <__assert_fail@plt+0x2cb8>
   14240:	mvn	r0, #0
   14244:	str	r0, [r7, #-24]	; 0xffffffe8
   14248:	bl	114b0 <__errno_location@plt>
   1424c:	ldr	r1, [r0]
   14250:	mov	r2, r5
   14254:	str	r1, [r7, #-20]	; 0xffffffec
   14258:	mov	r1, #3
   1425c:	ldr	r6, [r0]
   14260:	mov	r0, #0
   14264:	bl	1a8e4 <__assert_fail@plt+0x92fc>
   14268:	movw	r2, #58758	; 0xe586
   1426c:	mov	r1, r6
   14270:	ldr	r6, [sp, #72]	; 0x48
   14274:	mov	r3, r0
   14278:	mov	r0, #0
   1427c:	movt	r2, #1
   14280:	bl	113e4 <error@plt>
   14284:	mov	r0, r4
   14288:	bl	115d0 <close@plt>
   1428c:	add	sl, sl, #1
   14290:	add	r7, r7, #80	; 0x50
   14294:	cmp	r6, sl
   14298:	bne	1409c <__assert_fail@plt+0x2ab4>
   1429c:	b	144c4 <__assert_fail@plt+0x2edc>
   142a0:	ldr	r1, [r7, #-32]	; 0xffffffe0
   142a4:	ldr	r0, [sp, #136]	; 0x88
   142a8:	cmp	r1, r0
   142ac:	bne	14388 <__assert_fail@plt+0x2da0>
   142b0:	and	r1, r1, #61440	; 0xf000
   142b4:	cmp	r1, #32768	; 0x8000
   142b8:	bne	142e0 <__assert_fail@plt+0x2cf8>
   142bc:	ldr	r1, [sp, #32]
   142c0:	ldr	r6, [r7, #-64]	; 0xffffffc0
   142c4:	ldrd	r2, [r1]
   142c8:	ldr	r1, [r7, #-60]	; 0xffffffc4
   142cc:	eor	r2, r6, r2
   142d0:	ldr	r6, [sp, #72]	; 0x48
   142d4:	eor	r1, r1, r3
   142d8:	orrs	r1, r2, r1
   142dc:	bne	14388 <__assert_fail@plt+0x2da0>
   142e0:	ldr	r1, [sp, #44]	; 0x2c
   142e4:	ldr	r6, [r7, #-56]	; 0xffffffc8
   142e8:	ldrd	r2, [r1]
   142ec:	ldr	r1, [r7, #-52]	; 0xffffffcc
   142f0:	cmp	r6, r2
   142f4:	mov	r2, #0
   142f8:	ldr	r6, [sp, #72]	; 0x48
   142fc:	movwgt	r2, #1
   14300:	sublt	r2, r2, #1
   14304:	cmp	r1, r3
   14308:	mov	r1, #0
   1430c:	movwgt	r1, #1
   14310:	sublt	r1, r1, #1
   14314:	cmn	r1, r2, lsl #1
   14318:	bne	14388 <__assert_fail@plt+0x2da0>
   1431c:	movw	r6, #61760	; 0xf140
   14320:	ldrd	r2, [r7]
   14324:	movt	r6, #2
   14328:	ldrd	r0, [r6, #8]
   1432c:	adds	r4, r2, #1
   14330:	adc	r5, r3, #0
   14334:	strd	r4, [r7]
   14338:	subs	r0, r2, r0
   1433c:	sbcs	r0, r3, r1
   14340:	bcc	144b0 <__assert_fail@plt+0x2ec8>
   14344:	ldr	r0, [r6]
   14348:	cmp	r0, #1
   1434c:	bne	14498 <__assert_fail@plt+0x2eb0>
   14350:	ldr	r1, [r7, #-16]
   14354:	mov	r0, r9
   14358:	cmp	r1, #0
   1435c:	movwne	r1, #1
   14360:	bl	16000 <__assert_fail@plt+0x4a18>
   14364:	ldr	r6, [sp, #72]	; 0x48
   14368:	mov	r0, #0
   1436c:	str	r0, [r7]
   14370:	str	r0, [r7, #4]
   14374:	add	sl, sl, #1
   14378:	add	r7, r7, #80	; 0x50
   1437c:	cmp	r6, sl
   14380:	bne	1409c <__assert_fail@plt+0x2ab4>
   14384:	b	144c4 <__assert_fail@plt+0x2edc>
   14388:	ldr	r1, [sp, #44]	; 0x2c
   1438c:	ldrd	r2, [r1]
   14390:	mov	r1, #0
   14394:	str	r1, [r7]
   14398:	str	r1, [r7, #4]
   1439c:	str	r0, [r7, #-32]	; 0xffffffe0
   143a0:	ldr	r0, [sp, #100]	; 0x64
   143a4:	strd	r2, [r7, #-56]	; 0xffffffc8
   143a8:	and	r0, r0, #61440	; 0xf000
   143ac:	cmp	r0, #32768	; 0x8000
   143b0:	bne	1443c <__assert_fail@plt+0x2e54>
   143b4:	ldr	r2, [sp, #32]
   143b8:	mov	r9, r7
   143bc:	ldr	r0, [r9, #-64]!	; 0xffffffc0
   143c0:	ldr	r1, [r9, #4]
   143c4:	ldrd	r2, [r2]
   143c8:	subs	r0, r2, r0
   143cc:	sbcs	r0, r3, r1
   143d0:	bge	1443c <__assert_fail@plt+0x2e54>
   143d4:	movw	r1, #58221	; 0xe36d
   143d8:	mov	r0, #0
   143dc:	mov	r2, #5
   143e0:	movt	r1, #1
   143e4:	bl	11348 <dcgettext@plt>
   143e8:	mov	r8, r0
   143ec:	mov	r0, #0
   143f0:	mov	r1, #3
   143f4:	mov	r2, r5
   143f8:	bl	1a8e4 <__assert_fail@plt+0x92fc>
   143fc:	mov	r3, r0
   14400:	mov	r2, r8
   14404:	movw	r8, #61888	; 0xf1c0
   14408:	mov	r0, #0
   1440c:	mov	r1, #0
   14410:	movt	r8, #2
   14414:	bl	113e4 <error@plt>
   14418:	mov	r0, #0
   1441c:	mov	r2, #0
   14420:	mov	r3, #0
   14424:	stm	sp, {r0, r5}
   14428:	mov	r0, r4
   1442c:	bl	15eac <__assert_fail@plt+0x48c4>
   14430:	mov	r0, #0
   14434:	str	r0, [r9]
   14438:	str	r0, [r9, #4]
   1443c:	ldr	r0, [sp, #92]	; 0x5c
   14440:	cmp	sl, r0
   14444:	beq	14150 <__assert_fail@plt+0x2b68>
   14448:	ldrb	r0, [r8, #2]
   1444c:	str	sl, [sp, #92]	; 0x5c
   14450:	cmp	r0, #1
   14454:	bne	14150 <__assert_fail@plt+0x2b68>
   14458:	ldrb	r0, [r8, #10]
   1445c:	movw	r1, #57390	; 0xe02e
   14460:	movw	r2, #55494	; 0xd8c6
   14464:	mov	r3, r5
   14468:	movt	r1, #1
   1446c:	movt	r2, #1
   14470:	cmp	r0, #0
   14474:	movw	r0, #55493	; 0xd8c5
   14478:	movt	r0, #1
   1447c:	movne	r2, r0
   14480:	mov	r0, #1
   14484:	bl	114d4 <__printf_chk@plt>
   14488:	mov	r0, #1
   1448c:	str	sl, [sp, #92]	; 0x5c
   14490:	strb	r0, [r8, #10]
   14494:	b	14150 <__assert_fail@plt+0x2b68>
   14498:	ldr	r6, [sp, #72]	; 0x48
   1449c:	add	sl, sl, #1
   144a0:	add	r7, r7, #80	; 0x50
   144a4:	cmp	r6, sl
   144a8:	bne	1409c <__assert_fail@plt+0x2ab4>
   144ac:	b	144c4 <__assert_fail@plt+0x2edc>
   144b0:	ldr	r6, [sp, #72]	; 0x48
   144b4:	add	sl, sl, #1
   144b8:	add	r7, r7, #80	; 0x50
   144bc:	cmp	r6, sl
   144c0:	bne	1409c <__assert_fail@plt+0x2ab4>
   144c4:	ldrb	r0, [r8, #8]
   144c8:	ldr	r4, [sp, #104]	; 0x68
   144cc:	cmp	r0, #1
   144d0:	bne	144e8 <__assert_fail@plt+0x2f00>
   144d4:	movw	r1, #61760	; 0xf140
   144d8:	movt	r1, #2
   144dc:	ldr	r1, [r1]
   144e0:	cmp	r1, #1
   144e4:	beq	14544 <__assert_fail@plt+0x2f5c>
   144e8:	cmp	r0, #0
   144ec:	ldr	r2, [sp, #68]	; 0x44
   144f0:	ldr	r0, [sp, #76]	; 0x4c
   144f4:	mov	r3, r6
   144f8:	mov	r1, r6
   144fc:	beq	14528 <__assert_fail@plt+0x2f40>
   14500:	ldr	r2, [r0, #4]
   14504:	cmn	r2, #1
   14508:	bgt	14544 <__assert_fail@plt+0x2f5c>
   1450c:	ldrb	r2, [r0]
   14510:	cmp	r2, #0
   14514:	beq	14544 <__assert_fail@plt+0x2f5c>
   14518:	add	r0, r0, #80	; 0x50
   1451c:	subs	r1, r1, #1
   14520:	bne	14500 <__assert_fail@plt+0x2f18>
   14524:	b	145fc <__assert_fail@plt+0x3014>
   14528:	ldr	r0, [r2]
   1452c:	cmn	r0, #1
   14530:	bgt	14544 <__assert_fail@plt+0x2f5c>
   14534:	add	r2, r2, #80	; 0x50
   14538:	subs	r3, r3, #1
   1453c:	bne	14528 <__assert_fail@plt+0x2f40>
   14540:	b	145fc <__assert_fail@plt+0x3014>
   14544:	ldr	r1, [sp, #108]	; 0x6c
   14548:	mvn	r0, r4
   1454c:	orr	r0, r1, r0
   14550:	tst	r0, #1
   14554:	beq	14570 <__assert_fail@plt+0x2f88>
   14558:	movw	r0, #61876	; 0xf1b4
   1455c:	movt	r0, #2
   14560:	ldr	r0, [r0]
   14564:	bl	11378 <fflush_unlocked@plt>
   14568:	cmp	r0, #0
   1456c:	bne	152cc <__assert_fail@plt+0x3ce4>
   14570:	ldrb	r0, [r8, #6]
   14574:	cmp	r0, #0
   14578:	beq	145b0 <__assert_fail@plt+0x2fc8>
   1457c:	mov	r0, #8
   14580:	mov	r1, #1
   14584:	mov	r2, #0
   14588:	strh	r0, [sp, #124]	; 0x7c
   1458c:	mov	r0, #1
   14590:	str	r0, [sp, #120]	; 0x78
   14594:	add	r0, sp, #120	; 0x78
   14598:	bl	11390 <poll@plt>
   1459c:	cmp	r0, #0
   145a0:	bmi	145b0 <__assert_fail@plt+0x2fc8>
   145a4:	ldrb	r0, [sp, #126]	; 0x7e
   145a8:	tst	r0, #8
   145ac:	bne	152e0 <__assert_fail@plt+0x3cf8>
   145b0:	ldr	r0, [sp, #88]	; 0x58
   145b4:	orr	r0, r0, r4
   145b8:	tst	r0, #1
   145bc:	bne	14058 <__assert_fail@plt+0x2a70>
   145c0:	ldr	r0, [r8, #12]
   145c4:	cmp	r0, #0
   145c8:	beq	1403c <__assert_fail@plt+0x2a54>
   145cc:	mov	r1, #0
   145d0:	bl	11444 <kill@plt>
   145d4:	cmp	r0, #0
   145d8:	beq	1403c <__assert_fail@plt+0x2a54>
   145dc:	bl	114b0 <__errno_location@plt>
   145e0:	ldr	r0, [r0]
   145e4:	mov	r4, #1
   145e8:	cmp	r0, #1
   145ec:	mov	r0, #1
   145f0:	str	r0, [sp, #88]	; 0x58
   145f4:	beq	1403c <__assert_fail@plt+0x2a54>
   145f8:	b	14058 <__assert_fail@plt+0x2a70>
   145fc:	movw	r1, #57728	; 0xe180
   14600:	mov	r0, #0
   14604:	mov	r2, #5
   14608:	movt	r1, #1
   1460c:	bl	11348 <dcgettext@plt>
   14610:	mov	r2, r0
   14614:	mov	r0, #0
   14618:	mov	r1, #0
   1461c:	bl	113e4 <error@plt>
   14620:	ldrb	r0, [r8]
   14624:	cmp	r0, #1
   14628:	bne	1463c <__assert_fail@plt+0x3054>
   1462c:	mov	r0, #0
   14630:	bl	115d0 <close@plt>
   14634:	cmn	r0, #1
   14638:	ble	152b4 <__assert_fail@plt+0x3ccc>
   1463c:	ldr	r0, [sp, #84]	; 0x54
   14640:	sub	sp, fp, #64	; 0x40
   14644:	vpop	{d8-d11}
   14648:	add	sp, sp, #4
   1464c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14650:	ldr	r0, [sl, #48]	; 0x30
   14654:	cmn	r0, #1
   14658:	beq	14000 <__assert_fail@plt+0x2a18>
   1465c:	ldr	r0, [sl, #40]	; 0x28
   14660:	and	r0, r0, #61440	; 0xf000
   14664:	subs	r1, r0, #32768	; 0x8000
   14668:	sub	r0, r0, #32768	; 0x8000
   1466c:	clz	r0, r0
   14670:	movwne	r1, #1
   14674:	lsr	r0, r0, #5
   14678:	str	r1, [sp, #108]	; 0x6c
   1467c:	lsl	r0, r0, #11
   14680:	str	r0, [sp, #96]	; 0x60
   14684:	mov	r0, #0
   14688:	str	r0, [sp, #92]	; 0x5c
   1468c:	b	14018 <__assert_fail@plt+0x2a30>
   14690:	ldrb	r0, [r8, #7]
   14694:	cmp	r0, #0
   14698:	bne	13fd0 <__assert_fail@plt+0x29e8>
   1469c:	bl	11480 <inotify_init@plt>
   146a0:	cmn	r0, #1
   146a4:	ble	14a30 <__assert_fail@plt+0x3448>
   146a8:	mov	r4, r0
   146ac:	movw	r0, #61876	; 0xf1b4
   146b0:	movt	r0, #2
   146b4:	ldr	r0, [r0]
   146b8:	bl	11378 <fflush_unlocked@plt>
   146bc:	cmp	r0, #0
   146c0:	bne	152cc <__assert_fail@plt+0x3ce4>
   146c4:	ldr	r9, [sp, #72]	; 0x48
   146c8:	movw	r2, #24536	; 0x5fd8
   146cc:	movw	r3, #24552	; 0x5fe8
   146d0:	mov	r0, #0
   146d4:	mov	r1, #0
   146d8:	str	r4, [sp, #108]	; 0x6c
   146dc:	movt	r2, #1
   146e0:	movt	r3, #1
   146e4:	str	r0, [sp]
   146e8:	mov	r0, r9
   146ec:	bl	17b54 <__assert_fail@plt+0x656c>
   146f0:	str	r0, [sp, #100]	; 0x64
   146f4:	cmp	r0, #0
   146f8:	movw	r0, #61760	; 0xf140
   146fc:	movt	r0, #2
   14700:	beq	1532c <__assert_fail@plt+0x3d44>
   14704:	ldr	r0, [r0]
   14708:	mov	r1, #2
   1470c:	add	r8, sl, #68	; 0x44
   14710:	mov	r7, #0
   14714:	cmp	r0, #1
   14718:	mov	r0, #0
   1471c:	movweq	r1, #3078	; 0xc06
   14720:	str	r0, [sp, #92]	; 0x5c
   14724:	mov	r0, #0
   14728:	str	r1, [sp, #104]	; 0x68
   1472c:	str	r0, [sp, #96]	; 0x60
   14730:	ldrb	r0, [r8, #-24]	; 0xffffffe8
   14734:	cmp	r0, #0
   14738:	bne	14778 <__assert_fail@plt+0x3190>
   1473c:	b	14790 <__assert_fail@plt+0x31a8>
   14740:	ldr	r0, [sp, #108]	; 0x6c
   14744:	ldr	r2, [sp, #104]	; 0x68
   14748:	mov	r1, r5
   1474c:	bl	114a4 <inotify_add_watch@plt>
   14750:	cmn	r0, #1
   14754:	str	r0, [r8, #-8]
   14758:	ble	14828 <__assert_fail@plt+0x3240>
   1475c:	ldr	r0, [sp, #100]	; 0x64
   14760:	sub	r1, r8, #68	; 0x44
   14764:	bl	187b0 <__assert_fail@plt+0x71c8>
   14768:	mov	r1, #1
   1476c:	cmp	r0, #0
   14770:	str	r1, [sp, #92]	; 0x5c
   14774:	beq	1532c <__assert_fail@plt+0x3d44>
   14778:	subs	r9, r9, #1
   1477c:	add	r8, r8, #80	; 0x50
   14780:	beq	148a8 <__assert_fail@plt+0x32c0>
   14784:	ldrb	r0, [r8, #-24]	; 0xffffffe8
   14788:	cmp	r0, #0
   1478c:	bne	14778 <__assert_fail@plt+0x3190>
   14790:	ldr	r5, [r8, #-68]	; 0xffffffbc
   14794:	mov	r0, r5
   14798:	bl	11474 <strlen@plt>
   1479c:	cmp	r7, r0
   147a0:	mvn	r1, #0
   147a4:	movcc	r7, r0
   147a8:	movw	r0, #61760	; 0xf140
   147ac:	str	r1, [r8, #-8]
   147b0:	movt	r0, #2
   147b4:	ldr	r0, [r0]
   147b8:	cmp	r0, #1
   147bc:	bne	14740 <__assert_fail@plt+0x3158>
   147c0:	mov	r0, r5
   147c4:	bl	1733c <__assert_fail@plt+0x5d54>
   147c8:	ldrb	sl, [r5, r0]
   147cc:	mov	r4, r0
   147d0:	mov	r0, r5
   147d4:	bl	17114 <__assert_fail@plt+0x5b2c>
   147d8:	sub	r0, r0, r5
   147dc:	movw	r1, #57630	; 0xe11e
   147e0:	cmp	r4, #0
   147e4:	movw	r2, #1924	; 0x784
   147e8:	str	r0, [r8]
   147ec:	mov	r0, #0
   147f0:	movt	r1, #1
   147f4:	strb	r0, [r5, r4]
   147f8:	ldr	r0, [sp, #108]	; 0x6c
   147fc:	ldrne	r1, [r8, #-68]	; 0xffffffbc
   14800:	bl	114a4 <inotify_add_watch@plt>
   14804:	str	r0, [r8, #-4]
   14808:	ldr	r0, [r8, #-68]	; 0xffffffbc
   1480c:	strb	sl, [r0, r4]
   14810:	ldr	r0, [r8, #-4]
   14814:	cmp	r0, #0
   14818:	bmi	15080 <__assert_fail@plt+0x3a98>
   1481c:	ldr	r5, [r8, #-68]	; 0xffffffbc
   14820:	ldr	sl, [sp, #40]	; 0x28
   14824:	b	14740 <__assert_fail@plt+0x3158>
   14828:	ldr	r0, [r8, #-20]	; 0xffffffec
   1482c:	mvn	r1, #0
   14830:	subs	r5, r0, r1
   14834:	movwne	r5, #1
   14838:	bl	114b0 <__errno_location@plt>
   1483c:	ldr	r4, [r0]
   14840:	orr	r0, r4, #16
   14844:	cmp	r0, #28
   14848:	beq	15094 <__assert_fail@plt+0x3aac>
   1484c:	ldr	r0, [sp, #96]	; 0x60
   14850:	orr	r0, r0, r5
   14854:	str	r0, [sp, #96]	; 0x60
   14858:	ldr	r0, [r8, #-16]
   1485c:	cmp	r4, r0
   14860:	beq	14778 <__assert_fail@plt+0x3190>
   14864:	movw	r1, #57696	; 0xe160
   14868:	mov	r0, #0
   1486c:	mov	r2, #5
   14870:	movt	r1, #1
   14874:	bl	11348 <dcgettext@plt>
   14878:	ldr	r1, [r8, #-68]	; 0xffffffbc
   1487c:	mov	r5, r0
   14880:	mov	r0, #4
   14884:	bl	1a668 <__assert_fail@plt+0x9080>
   14888:	mov	r3, r0
   1488c:	mov	r0, #0
   14890:	mov	r1, r4
   14894:	mov	r2, r5
   14898:	bl	113e4 <error@plt>
   1489c:	subs	r9, r9, #1
   148a0:	add	r8, r8, #80	; 0x50
   148a4:	bne	14784 <__assert_fail@plt+0x319c>
   148a8:	movw	r0, #61760	; 0xf140
   148ac:	movw	r8, #61888	; 0xf1c0
   148b0:	movt	r0, #2
   148b4:	movt	r8, #2
   148b8:	ldr	r0, [r0]
   148bc:	cmp	r0, #2
   148c0:	ldreq	r1, [sp, #96]	; 0x60
   148c4:	eoreq	r1, r1, #1
   148c8:	tsteq	r1, #1
   148cc:	beq	150fc <__assert_fail@plt+0x3b14>
   148d0:	ldr	r1, [sp, #92]	; 0x5c
   148d4:	subs	r0, r0, #2
   148d8:	movwne	r0, #1
   148dc:	orr	r0, r0, r1
   148e0:	tst	r0, #1
   148e4:	beq	15368 <__assert_fail@plt+0x3d80>
   148e8:	ldr	r5, [sp, #72]	; 0x48
   148ec:	add	r8, r6, #96	; 0x60
   148f0:	sub	r9, fp, #72	; 0x48
   148f4:	mov	r4, sl
   148f8:	add	r0, r5, r5, lsl #2
   148fc:	add	r0, sl, r0, lsl #4
   14900:	sub	r0, r0, #80	; 0x50
   14904:	str	r0, [fp, #-72]	; 0xffffffb8
   14908:	ldrb	r0, [r4, #44]	; 0x2c
   1490c:	cmp	r0, #0
   14910:	bne	14930 <__assert_fail@plt+0x3348>
   14914:	b	14948 <__assert_fail@plt+0x3360>
   14918:	mov	r0, r4
   1491c:	mov	r1, #0
   14920:	bl	16000 <__assert_fail@plt+0x4a18>
   14924:	mov	r0, r4
   14928:	mov	r1, r9
   1492c:	bl	16948 <__assert_fail@plt+0x5360>
   14930:	subs	r5, r5, #1
   14934:	add	r4, r4, #80	; 0x50
   14938:	beq	14a38 <__assert_fail@plt+0x3450>
   1493c:	ldrb	r0, [r4, #44]	; 0x2c
   14940:	cmp	r0, #0
   14944:	bne	14930 <__assert_fail@plt+0x3348>
   14948:	movw	r0, #61760	; 0xf140
   1494c:	movt	r0, #2
   14950:	ldr	r0, [r0]
   14954:	cmp	r0, #1
   14958:	beq	14918 <__assert_fail@plt+0x3330>
   1495c:	ldr	r0, [r4, #48]	; 0x30
   14960:	cmn	r0, #1
   14964:	beq	14924 <__assert_fail@plt+0x333c>
   14968:	ldr	r1, [r4]
   1496c:	mov	r0, #3
   14970:	mov	r2, r6
   14974:	bl	11594 <__xstat64@plt>
   14978:	cmp	r0, #0
   1497c:	bne	14924 <__assert_fail@plt+0x333c>
   14980:	ldrd	r0, [r4, #24]
   14984:	ldr	r2, [sp, #120]	; 0x78
   14988:	ldr	r3, [sp, #124]	; 0x7c
   1498c:	eor	r1, r1, r3
   14990:	eor	r0, r0, r2
   14994:	orrs	r0, r0, r1
   14998:	ldrdeq	r0, [r8]
   1499c:	ldrdeq	r2, [r4, #32]
   149a0:	eoreq	r1, r3, r1
   149a4:	eoreq	r0, r2, r0
   149a8:	orrseq	r0, r0, r1
   149ac:	beq	14924 <__assert_fail@plt+0x333c>
   149b0:	bl	114b0 <__errno_location@plt>
   149b4:	movw	r1, #57712	; 0xe170
   149b8:	ldr	r5, [r0]
   149bc:	mov	r0, #0
   149c0:	mov	r2, #5
   149c4:	movt	r1, #1
   149c8:	bl	11348 <dcgettext@plt>
   149cc:	ldr	r4, [r4]
   149d0:	movw	r1, #56578	; 0xdd02
   149d4:	mov	r6, r0
   149d8:	movt	r1, #1
   149dc:	mov	r0, r4
   149e0:	bl	112b8 <strcmp@plt>
   149e4:	cmp	r0, #0
   149e8:	bne	14a04 <__assert_fail@plt+0x341c>
   149ec:	movw	r1, #57375	; 0xe01f
   149f0:	mov	r0, #0
   149f4:	mov	r2, #5
   149f8:	movt	r1, #1
   149fc:	bl	11348 <dcgettext@plt>
   14a00:	mov	r4, r0
   14a04:	mov	r0, #4
   14a08:	mov	r1, r4
   14a0c:	bl	1a668 <__assert_fail@plt+0x9080>
   14a10:	mov	r3, r0
   14a14:	mov	r0, #0
   14a18:	mov	r1, r5
   14a1c:	mov	r2, r6
   14a20:	bl	113e4 <error@plt>
   14a24:	movw	r8, #61888	; 0xf1c0
   14a28:	movt	r8, #2
   14a2c:	b	15078 <__assert_fail@plt+0x3a90>
   14a30:	bl	114b0 <__errno_location@plt>
   14a34:	b	15118 <__assert_fail@plt+0x3b30>
   14a38:	vldr	d16, [pc, #576]	; 14c80 <__assert_fail@plt+0x3698>
   14a3c:	add	r0, r7, #17
   14a40:	vmul.f64	d16, d8, d16
   14a44:	vcvt.s32.f64	s0, d16
   14a48:	vcvt.f64.s32	d17, s0
   14a4c:	vmov	r9, s0
   14a50:	str	r0, [sp, #68]	; 0x44
   14a54:	vcmpe.f64	d16, d17
   14a58:	vmrs	APSR_nzcv, fpscr
   14a5c:	addgt	r9, r9, #1
   14a60:	bl	1b314 <__assert_fail@plt+0x9d2c>
   14a64:	vldr	d9, [pc, #540]	; 14c88 <__assert_fail@plt+0x36a0>
   14a68:	str	r0, [sp, #80]	; 0x50
   14a6c:	add	r0, sl, #64	; 0x40
   14a70:	mov	sl, #1
   14a74:	mov	r6, #0
   14a78:	str	r9, [sp, #76]	; 0x4c
   14a7c:	str	r0, [sp, #64]	; 0x40
   14a80:	mov	r0, #3
   14a84:	str	r0, [sp, #60]	; 0x3c
   14a88:	movw	r8, #61888	; 0xf1c0
   14a8c:	mov	r0, #0
   14a90:	mov	r5, #0
   14a94:	movt	r8, #2
   14a98:	str	r0, [sp, #92]	; 0x5c
   14a9c:	b	14ab0 <__assert_fail@plt+0x34c8>
   14aa0:	ldr	r9, [sp, #76]	; 0x4c
   14aa4:	ldr	r5, [sp, #88]	; 0x58
   14aa8:	movw	r8, #61888	; 0xf1c0
   14aac:	movt	r8, #2
   14ab0:	movw	r0, #61760	; 0xf140
   14ab4:	movt	r0, #2
   14ab8:	ldr	r0, [r0]
   14abc:	cmp	r0, #1
   14ac0:	bne	14ae0 <__assert_fail@plt+0x34f8>
   14ac4:	ldrb	r0, [r8, #8]
   14ac8:	cmp	r0, #0
   14acc:	bne	14ae0 <__assert_fail@plt+0x34f8>
   14ad0:	ldr	r0, [sp, #100]	; 0x64
   14ad4:	bl	17670 <__assert_fail@plt+0x6088>
   14ad8:	cmp	r0, #0
   14adc:	beq	15330 <__assert_fail@plt+0x3d48>
   14ae0:	ldr	r4, [sp, #92]	; 0x5c
   14ae4:	cmp	r5, r4
   14ae8:	bls	14af4 <__assert_fail@plt+0x350c>
   14aec:	str	r5, [sp, #88]	; 0x58
   14af0:	b	14ccc <__assert_fail@plt+0x36e4>
   14af4:	ldr	r5, [sp, #108]	; 0x6c
   14af8:	vcmpe.f64	d8, #0.0
   14afc:	mov	r7, #0
   14b00:	vmrs	APSR_nzcv, fpscr
   14b04:	bls	14b4c <__assert_fail@plt+0x3564>
   14b08:	vcmpe.f64	d8, d9
   14b0c:	vmrs	APSR_nzcv, fpscr
   14b10:	bpl	14c3c <__assert_fail@plt+0x3654>
   14b14:	b	14bc0 <__assert_fail@plt+0x35d8>
   14b18:	mvn	r4, #0
   14b1c:	ldrb	r0, [r8, #6]
   14b20:	mov	r2, r4
   14b24:	str	sl, [sp, #128]	; 0x80
   14b28:	strh	sl, [sp, #124]	; 0x7c
   14b2c:	str	r5, [sp, #120]	; 0x78
   14b30:	str	r7, [sp, #132]	; 0x84
   14b34:	add	r0, r0, #1
   14b38:	uxtb	r1, r0
   14b3c:	add	r0, sp, #120	; 0x78
   14b40:	bl	11390 <poll@plt>
   14b44:	cmp	r0, #0
   14b48:	bne	14c90 <__assert_fail@plt+0x36a8>
   14b4c:	ldr	r0, [r8, #12]
   14b50:	cmp	r0, #0
   14b54:	beq	14b18 <__assert_fail@plt+0x3530>
   14b58:	tst	r6, #1
   14b5c:	bne	15324 <__assert_fail@plt+0x3d3c>
   14b60:	mov	r1, #0
   14b64:	mov	r4, #0
   14b68:	bl	11444 <kill@plt>
   14b6c:	cmp	r0, #0
   14b70:	beq	14b88 <__assert_fail@plt+0x35a0>
   14b74:	bl	114b0 <__errno_location@plt>
   14b78:	ldr	r0, [r0]
   14b7c:	subs	r6, r0, #1
   14b80:	movwne	r6, #1
   14b84:	b	14b1c <__assert_fail@plt+0x3534>
   14b88:	mov	r6, #0
   14b8c:	b	14b1c <__assert_fail@plt+0x3534>
   14b90:	mvn	r2, #0
   14b94:	ldrb	r0, [r8, #6]
   14b98:	str	sl, [sp, #128]	; 0x80
   14b9c:	strh	sl, [sp, #124]	; 0x7c
   14ba0:	str	r5, [sp, #120]	; 0x78
   14ba4:	str	r7, [sp, #132]	; 0x84
   14ba8:	add	r0, r0, #1
   14bac:	uxtb	r1, r0
   14bb0:	add	r0, sp, #120	; 0x78
   14bb4:	bl	11390 <poll@plt>
   14bb8:	cmp	r0, #0
   14bbc:	bne	14c90 <__assert_fail@plt+0x36a8>
   14bc0:	ldr	r0, [r8, #12]
   14bc4:	cmp	r0, #0
   14bc8:	beq	14b90 <__assert_fail@plt+0x35a8>
   14bcc:	tst	r6, #1
   14bd0:	bne	15324 <__assert_fail@plt+0x3d3c>
   14bd4:	mov	r1, #0
   14bd8:	mov	r6, #0
   14bdc:	bl	11444 <kill@plt>
   14be0:	cmp	r0, #0
   14be4:	mov	r2, r9
   14be8:	beq	14b94 <__assert_fail@plt+0x35ac>
   14bec:	bl	114b0 <__errno_location@plt>
   14bf0:	ldr	r0, [r0]
   14bf4:	mov	r2, r9
   14bf8:	cmp	r0, #1
   14bfc:	movwne	r2, #0
   14c00:	subs	r6, r0, #1
   14c04:	movwne	r6, #1
   14c08:	b	14b94 <__assert_fail@plt+0x35ac>
   14c0c:	mvn	r2, #0
   14c10:	ldrb	r0, [r8, #6]
   14c14:	str	sl, [sp, #128]	; 0x80
   14c18:	strh	sl, [sp, #124]	; 0x7c
   14c1c:	str	r5, [sp, #120]	; 0x78
   14c20:	str	r7, [sp, #132]	; 0x84
   14c24:	add	r0, r0, #1
   14c28:	uxtb	r1, r0
   14c2c:	add	r0, sp, #120	; 0x78
   14c30:	bl	11390 <poll@plt>
   14c34:	cmp	r0, #0
   14c38:	bne	14c90 <__assert_fail@plt+0x36a8>
   14c3c:	ldr	r0, [r8, #12]
   14c40:	cmp	r0, #0
   14c44:	beq	14c0c <__assert_fail@plt+0x3624>
   14c48:	tst	r6, #1
   14c4c:	bne	15324 <__assert_fail@plt+0x3d3c>
   14c50:	mov	r1, #0
   14c54:	mov	r6, #0
   14c58:	bl	11444 <kill@plt>
   14c5c:	cmp	r0, #0
   14c60:	beq	14c74 <__assert_fail@plt+0x368c>
   14c64:	bl	114b0 <__errno_location@plt>
   14c68:	ldr	r0, [r0]
   14c6c:	subs	r6, r0, #1
   14c70:	movwne	r6, #1
   14c74:	eor	r0, r6, #1
   14c78:	rsb	r2, r0, #0
   14c7c:	b	14c10 <__assert_fail@plt+0x3628>
   14c80:	andeq	r0, r0, r0
   14c84:	addmi	r4, pc, r0
   14c88:	andeq	r0, r0, r0
   14c8c:	cmpmi	r0, sp, asr #4
   14c90:	cmn	r0, #1
   14c94:	ble	15354 <__assert_fail@plt+0x3d6c>
   14c98:	ldrh	r0, [sp, #134]	; 0x86
   14c9c:	cmp	r0, #0
   14ca0:	bne	152e0 <__assert_fail@plt+0x3cf8>
   14ca4:	ldr	r1, [sp, #80]	; 0x50
   14ca8:	ldr	r2, [sp, #68]	; 0x44
   14cac:	mov	r0, r5
   14cb0:	bl	1aba8 <__assert_fail@plt+0x95c0>
   14cb4:	cmp	r0, #0
   14cb8:	beq	14ffc <__assert_fail@plt+0x3a14>
   14cbc:	cmn	r0, #1
   14cc0:	beq	1500c <__assert_fail@plt+0x3a24>
   14cc4:	mov	r4, #0
   14cc8:	str	r0, [sp, #88]	; 0x58
   14ccc:	ldr	r0, [sp, #80]	; 0x50
   14cd0:	add	r0, r0, r4
   14cd4:	ldr	r7, [r0, #4]
   14cd8:	str	r0, [sp, #96]	; 0x60
   14cdc:	ldr	r0, [r0, #12]
   14ce0:	cmp	r0, #0
   14ce4:	bne	14d18 <__assert_fail@plt+0x3730>
   14ce8:	ands	r1, r7, #1024	; 0x400
   14cec:	beq	14d18 <__assert_fail@plt+0x3730>
   14cf0:	ldr	r1, [sp, #96]	; 0x60
   14cf4:	ldr	r2, [sp, #64]	; 0x40
   14cf8:	ldr	r3, [sp, #72]	; 0x48
   14cfc:	ldr	r1, [r1]
   14d00:	ldr	r5, [r2]
   14d04:	cmp	r1, r5
   14d08:	beq	15054 <__assert_fail@plt+0x3a6c>
   14d0c:	add	r2, r2, #80	; 0x50
   14d10:	subs	r3, r3, #1
   14d14:	bne	14d00 <__assert_fail@plt+0x3718>
   14d18:	add	r1, r4, r0
   14d1c:	cmp	r0, #0
   14d20:	add	r1, r1, #16
   14d24:	str	r1, [sp, #92]	; 0x5c
   14d28:	beq	14ec0 <__assert_fail@plt+0x38d8>
   14d2c:	ldr	r5, [sp, #96]	; 0x60
   14d30:	ldr	r4, [sp, #40]	; 0x28
   14d34:	ldr	r8, [sp, #72]	; 0x48
   14d38:	ldr	r9, [r5], #16
   14d3c:	ldr	r0, [r4, #64]	; 0x40
   14d40:	cmp	r0, r9
   14d44:	beq	14d60 <__assert_fail@plt+0x3778>
   14d48:	add	r4, r4, #80	; 0x50
   14d4c:	subs	r8, r8, #1
   14d50:	beq	14aa0 <__assert_fail@plt+0x34b8>
   14d54:	ldr	r0, [r4, #64]	; 0x40
   14d58:	cmp	r0, r9
   14d5c:	bne	14d48 <__assert_fail@plt+0x3760>
   14d60:	ldr	r0, [r4]
   14d64:	ldr	r1, [r4, #68]	; 0x44
   14d68:	add	r1, r0, r1
   14d6c:	mov	r0, r5
   14d70:	bl	112b8 <strcmp@plt>
   14d74:	cmp	r0, #0
   14d78:	bne	14d48 <__assert_fail@plt+0x3760>
   14d7c:	ldr	r9, [sp, #76]	; 0x4c
   14d80:	ldr	r5, [sp, #88]	; 0x58
   14d84:	cmp	r8, #0
   14d88:	movw	r8, #61888	; 0xf1c0
   14d8c:	movt	r8, #2
   14d90:	beq	14ab0 <__assert_fail@plt+0x34c8>
   14d94:	tst	r7, #512	; 0x200
   14d98:	bne	14e98 <__assert_fail@plt+0x38b0>
   14d9c:	ldr	r1, [r4]
   14da0:	ldr	r0, [sp, #108]	; 0x6c
   14da4:	ldr	r2, [sp, #104]	; 0x68
   14da8:	bl	114a4 <inotify_add_watch@plt>
   14dac:	mov	r5, r0
   14db0:	cmn	r0, #1
   14db4:	bgt	14e04 <__assert_fail@plt+0x381c>
   14db8:	bl	114b0 <__errno_location@plt>
   14dbc:	ldr	r7, [r0]
   14dc0:	orr	r0, r7, #16
   14dc4:	cmp	r0, #28
   14dc8:	beq	15144 <__assert_fail@plt+0x3b5c>
   14dcc:	movw	r1, #57696	; 0xe160
   14dd0:	mov	r0, #0
   14dd4:	mov	r2, #5
   14dd8:	movt	r1, #1
   14ddc:	bl	11348 <dcgettext@plt>
   14de0:	ldr	r1, [r4]
   14de4:	mov	r8, r0
   14de8:	mov	r0, #4
   14dec:	bl	1a668 <__assert_fail@plt+0x9080>
   14df0:	mov	r3, r0
   14df4:	mov	r0, #0
   14df8:	mov	r1, r7
   14dfc:	mov	r2, r8
   14e00:	bl	113e4 <error@plt>
   14e04:	ldr	r1, [r4, #60]	; 0x3c
   14e08:	ldr	r9, [sp, #76]	; 0x4c
   14e0c:	movw	r8, #61888	; 0xf1c0
   14e10:	movt	r8, #2
   14e14:	cmp	r1, #0
   14e18:	bmi	14e24 <__assert_fail@plt+0x383c>
   14e1c:	cmp	r5, r1
   14e20:	beq	14e98 <__assert_fail@plt+0x38b0>
   14e24:	cmp	r1, #0
   14e28:	bmi	14e40 <__assert_fail@plt+0x3858>
   14e2c:	ldr	r0, [sp, #108]	; 0x6c
   14e30:	bl	115ac <inotify_rm_watch@plt>
   14e34:	ldr	r0, [sp, #100]	; 0x64
   14e38:	mov	r1, r4
   14e3c:	bl	187f8 <__assert_fail@plt+0x7210>
   14e40:	str	r5, [r4, #60]	; 0x3c
   14e44:	cmn	r5, #1
   14e48:	ldr	r9, [sp, #76]	; 0x4c
   14e4c:	ldr	r5, [sp, #88]	; 0x58
   14e50:	movw	r8, #61888	; 0xf1c0
   14e54:	movt	r8, #2
   14e58:	beq	14ab0 <__assert_fail@plt+0x34c8>
   14e5c:	ldr	r0, [sp, #100]	; 0x64
   14e60:	mov	r1, r4
   14e64:	bl	187f8 <__assert_fail@plt+0x7210>
   14e68:	cmp	r0, #0
   14e6c:	movne	r5, r0
   14e70:	cmpne	r0, r4
   14e74:	bne	14f3c <__assert_fail@plt+0x3954>
   14e78:	ldr	r0, [sp, #100]	; 0x64
   14e7c:	mov	r1, r4
   14e80:	bl	187b0 <__assert_fail@plt+0x71c8>
   14e84:	ldr	r9, [sp, #76]	; 0x4c
   14e88:	movw	r8, #61888	; 0xf1c0
   14e8c:	cmp	r0, #0
   14e90:	movt	r8, #2
   14e94:	beq	1532c <__assert_fail@plt+0x3d44>
   14e98:	movw	r0, #61760	; 0xf140
   14e9c:	ldr	r5, [sp, #88]	; 0x58
   14ea0:	movt	r0, #2
   14ea4:	ldr	r0, [r0]
   14ea8:	cmp	r0, #1
   14eac:	bne	14ee8 <__assert_fail@plt+0x3900>
   14eb0:	mov	r0, r4
   14eb4:	mov	r1, #0
   14eb8:	bl	16000 <__assert_fail@plt+0x4a18>
   14ebc:	b	14ee8 <__assert_fail@plt+0x3900>
   14ec0:	ldr	r0, [sp, #96]	; 0x60
   14ec4:	add	r1, sp, #120	; 0x78
   14ec8:	ldr	r0, [r0]
   14ecc:	str	r0, [sp, #180]	; 0xb4
   14ed0:	ldr	r0, [sp, #100]	; 0x64
   14ed4:	bl	17880 <__assert_fail@plt+0x6298>
   14ed8:	ldr	r5, [sp, #88]	; 0x58
   14edc:	mov	r4, r0
   14ee0:	cmp	r0, #0
   14ee4:	beq	14ab0 <__assert_fail@plt+0x34c8>
   14ee8:	ldr	r0, [sp, #96]	; 0x60
   14eec:	movw	r1, #3588	; 0xe04
   14ef0:	ldr	r0, [r0, #4]
   14ef4:	tst	r0, r1
   14ef8:	beq	14f2c <__assert_fail@plt+0x3944>
   14efc:	tst	r0, #1024	; 0x400
   14f00:	beq	14f1c <__assert_fail@plt+0x3934>
   14f04:	ldr	r1, [r4, #60]	; 0x3c
   14f08:	ldr	r0, [sp, #108]	; 0x6c
   14f0c:	bl	115ac <inotify_rm_watch@plt>
   14f10:	ldr	r0, [sp, #100]	; 0x64
   14f14:	mov	r1, r4
   14f18:	bl	187f8 <__assert_fail@plt+0x7210>
   14f1c:	mov	r0, r4
   14f20:	mov	r1, #0
   14f24:	bl	16000 <__assert_fail@plt+0x4a18>
   14f28:	b	14ab0 <__assert_fail@plt+0x34c8>
   14f2c:	mov	r0, r4
   14f30:	sub	r1, fp, #72	; 0x48
   14f34:	bl	16948 <__assert_fail@plt+0x5360>
   14f38:	b	14ab0 <__assert_fail@plt+0x34c8>
   14f3c:	movw	r0, #61760	; 0xf140
   14f40:	movt	r0, #2
   14f44:	ldr	r0, [r0]
   14f48:	cmp	r0, #1
   14f4c:	moveq	r0, r5
   14f50:	moveq	r1, #0
   14f54:	bleq	16000 <__assert_fail@plt+0x4a18>
   14f58:	mvn	r0, #0
   14f5c:	movw	r1, #56578	; 0xdd02
   14f60:	str	r0, [r5, #60]	; 0x3c
   14f64:	movt	r1, #1
   14f68:	ldr	r7, [r5]
   14f6c:	ldr	r8, [r5, #48]	; 0x30
   14f70:	mov	r0, r7
   14f74:	bl	112b8 <strcmp@plt>
   14f78:	cmp	r0, #0
   14f7c:	bne	14f98 <__assert_fail@plt+0x39b0>
   14f80:	movw	r1, #57375	; 0xe01f
   14f84:	mov	r0, #0
   14f88:	mov	r2, #5
   14f8c:	movt	r1, #1
   14f90:	bl	11348 <dcgettext@plt>
   14f94:	mov	r7, r0
   14f98:	add	r0, r8, #1
   14f9c:	cmp	r0, #2
   14fa0:	bcc	14e78 <__assert_fail@plt+0x3890>
   14fa4:	mov	r0, r8
   14fa8:	bl	115d0 <close@plt>
   14fac:	cmp	r0, #0
   14fb0:	beq	14e78 <__assert_fail@plt+0x3890>
   14fb4:	bl	114b0 <__errno_location@plt>
   14fb8:	movw	r1, #57546	; 0xe0ca
   14fbc:	ldr	r9, [r0]
   14fc0:	mov	r0, #0
   14fc4:	mov	r2, #5
   14fc8:	movt	r1, #1
   14fcc:	bl	11348 <dcgettext@plt>
   14fd0:	mov	r5, r0
   14fd4:	mov	r0, #4
   14fd8:	mov	r1, r7
   14fdc:	bl	1a668 <__assert_fail@plt+0x9080>
   14fe0:	mov	r3, r0
   14fe4:	mov	r0, #0
   14fe8:	mov	r1, r9
   14fec:	mov	r2, r5
   14ff0:	str	r8, [sp]
   14ff4:	bl	113e4 <error@plt>
   14ff8:	b	14e78 <__assert_fail@plt+0x3890>
   14ffc:	ldr	r0, [sp, #60]	; 0x3c
   15000:	cmp	r0, #0
   15004:	bne	15028 <__assert_fail@plt+0x3a40>
   15008:	b	15370 <__assert_fail@plt+0x3d88>
   1500c:	bl	114b0 <__errno_location@plt>
   15010:	ldr	r4, [r0]
   15014:	ldr	r0, [sp, #60]	; 0x3c
   15018:	cmp	r0, #0
   1501c:	beq	15378 <__assert_fail@plt+0x3d90>
   15020:	cmp	r4, #22
   15024:	bne	15378 <__assert_fail@plt+0x3d90>
   15028:	ldr	r1, [sp, #68]	; 0x44
   1502c:	ldr	r0, [sp, #80]	; 0x50
   15030:	lsl	r1, r1, #1
   15034:	str	r1, [sp, #68]	; 0x44
   15038:	bl	1b35c <__assert_fail@plt+0x9d74>
   1503c:	str	r0, [sp, #80]	; 0x50
   15040:	ldr	r0, [sp, #60]	; 0x3c
   15044:	ldr	r9, [sp, #76]	; 0x4c
   15048:	sub	r0, r0, #1
   1504c:	str	r0, [sp, #60]	; 0x3c
   15050:	b	14a88 <__assert_fail@plt+0x34a0>
   15054:	movw	r1, #57819	; 0xe1db
   15058:	mov	r0, #0
   1505c:	mov	r2, #5
   15060:	movt	r1, #1
   15064:	bl	11348 <dcgettext@plt>
   15068:	mov	r2, r0
   1506c:	mov	r0, #0
   15070:	mov	r1, #0
   15074:	bl	113e4 <error@plt>
   15078:	ldr	sl, [sp, #40]	; 0x28
   1507c:	b	150fc <__assert_fail@plt+0x3b14>
   15080:	bl	114b0 <__errno_location@plt>
   15084:	ldr	r4, [r0]
   15088:	ldr	sl, [sp, #40]	; 0x28
   1508c:	cmp	r4, #28
   15090:	bne	150bc <__assert_fail@plt+0x3ad4>
   15094:	movw	r1, #57668	; 0xe144
   15098:	mov	r0, #0
   1509c:	mov	r2, #5
   150a0:	movt	r1, #1
   150a4:	bl	11348 <dcgettext@plt>
   150a8:	mov	r2, r0
   150ac:	mov	r0, #0
   150b0:	mov	r1, #0
   150b4:	bl	113e4 <error@plt>
   150b8:	b	150f4 <__assert_fail@plt+0x3b0c>
   150bc:	movw	r1, #57632	; 0xe120
   150c0:	mov	r0, #0
   150c4:	mov	r2, #5
   150c8:	movt	r1, #1
   150cc:	bl	11348 <dcgettext@plt>
   150d0:	ldr	r1, [r8, #-68]	; 0xffffffbc
   150d4:	mov	r5, r0
   150d8:	mov	r0, #4
   150dc:	bl	1a668 <__assert_fail@plt+0x9080>
   150e0:	mov	r3, r0
   150e4:	mov	r0, #0
   150e8:	mov	r1, r4
   150ec:	mov	r2, r5
   150f0:	bl	113e4 <error@plt>
   150f4:	movw	r8, #61888	; 0xf1c0
   150f8:	movt	r8, #2
   150fc:	ldr	r0, [sp, #100]	; 0x64
   15100:	bl	17e70 <__assert_fail@plt+0x6888>
   15104:	ldr	r0, [sp, #108]	; 0x6c
   15108:	bl	115d0 <close@plt>
   1510c:	bl	114b0 <__errno_location@plt>
   15110:	mov	r1, #0
   15114:	str	r1, [r0]
   15118:	movw	r1, #56076	; 0xdb0c
   1511c:	ldr	r4, [r0]
   15120:	mov	r0, #0
   15124:	mov	r2, #5
   15128:	movt	r1, #1
   1512c:	bl	11348 <dcgettext@plt>
   15130:	mov	r2, r0
   15134:	mov	r0, #0
   15138:	mov	r1, r4
   1513c:	bl	113e4 <error@plt>
   15140:	b	13fd0 <__assert_fail@plt+0x29e8>
   15144:	movw	r1, #57668	; 0xe144
   15148:	mov	r0, #0
   1514c:	mov	r2, #5
   15150:	movt	r1, #1
   15154:	bl	11348 <dcgettext@plt>
   15158:	mov	r2, r0
   1515c:	mov	r0, #0
   15160:	mov	r1, #0
   15164:	bl	113e4 <error@plt>
   15168:	b	14a24 <__assert_fail@plt+0x343c>
   1516c:	movw	r1, #56851	; 0xde13
   15170:	mov	r0, #0
   15174:	mov	r2, #5
   15178:	movt	r1, #1
   1517c:	bl	11348 <dcgettext@plt>
   15180:	mov	r2, r0
   15184:	mov	r0, #1
   15188:	mov	r1, #0
   1518c:	mov	r3, r8
   15190:	bl	113e4 <error@plt>
   15194:	mov	r0, #1
   15198:	bl	116e8 <__assert_fail@plt+0x100>
   1519c:	movw	r0, #61776	; 0xf150
   151a0:	movw	r2, #56838	; 0xde06
   151a4:	movw	r5, #56794	; 0xddda
   151a8:	movw	r7, #56821	; 0xddf5
   151ac:	movw	r6, #56805	; 0xdde5
   151b0:	mov	r1, #0
   151b4:	movt	r0, #2
   151b8:	movt	r2, #1
   151bc:	movt	r5, #1
   151c0:	movt	r7, #1
   151c4:	movt	r6, #1
   151c8:	ldr	r3, [r0]
   151cc:	movw	r0, #61876	; 0xf1b4
   151d0:	stm	sp, {r5, r6, r7}
   151d4:	str	r2, [sp, #12]
   151d8:	movw	r2, #56370	; 0xdc32
   151dc:	str	r1, [sp, #16]
   151e0:	movw	r1, #55932	; 0xda7c
   151e4:	movt	r0, #2
   151e8:	movt	r1, #1
   151ec:	movt	r2, #1
   151f0:	ldr	r0, [r0]
   151f4:	bl	1b0e0 <__assert_fail@plt+0x9af8>
   151f8:	mov	r0, #0
   151fc:	bl	1145c <exit@plt>
   15200:	mov	r0, #0
   15204:	bl	116e8 <__assert_fail@plt+0x100>
   15208:	movw	r1, #56764	; 0xddbc
   1520c:	mov	r0, #0
   15210:	mov	r2, #5
   15214:	movt	r1, #1
   15218:	bl	11348 <dcgettext@plt>
   1521c:	mov	r5, r0
   15220:	ldr	r0, [r4]
   15224:	bl	1ab90 <__assert_fail@plt+0x95a8>
   15228:	mov	r3, r0
   1522c:	mov	r0, #1
   15230:	mov	r1, #0
   15234:	mov	r2, r5
   15238:	bl	113e4 <error@plt>
   1523c:	movw	r1, #58240	; 0xe380
   15240:	mov	r0, #0
   15244:	mov	r2, #5
   15248:	movt	r1, #1
   1524c:	bl	11348 <dcgettext@plt>
   15250:	mov	r4, r0
   15254:	mov	r0, #0
   15258:	mov	r1, #3
   1525c:	mov	r2, r5
   15260:	bl	1a8e4 <__assert_fail@plt+0x92fc>
   15264:	mov	r3, r0
   15268:	mov	r0, #1
   1526c:	mov	r1, r8
   15270:	mov	r2, r4
   15274:	bl	113e4 <error@plt>
   15278:	movw	r1, #55961	; 0xda99
   1527c:	mov	r0, #0
   15280:	mov	r2, #5
   15284:	movt	r1, #1
   15288:	bl	11348 <dcgettext@plt>
   1528c:	movw	r1, #56578	; 0xdd02
   15290:	mov	r4, r0
   15294:	mov	r0, #4
   15298:	movt	r1, #1
   1529c:	bl	1a668 <__assert_fail@plt+0x9080>
   152a0:	mov	r3, r0
   152a4:	mov	r0, #1
   152a8:	mov	r1, #0
   152ac:	mov	r2, r4
   152b0:	bl	113e4 <error@plt>
   152b4:	bl	114b0 <__errno_location@plt>
   152b8:	ldr	r1, [r0]
   152bc:	movw	r2, #56578	; 0xdd02
   152c0:	mov	r0, #1
   152c4:	movt	r2, #1
   152c8:	bl	113e4 <error@plt>
   152cc:	bl	114b0 <__errno_location@plt>
   152d0:	ldr	r4, [r0]
   152d4:	movw	r1, #56064	; 0xdb00
   152d8:	movt	r1, #1
   152dc:	b	15308 <__assert_fail@plt+0x3d20>
   152e0:	bl	16bbc <__assert_fail@plt+0x55d4>
   152e4:	bl	114b0 <__errno_location@plt>
   152e8:	ldr	r4, [r0]
   152ec:	movw	r1, #58275	; 0xe3a3
   152f0:	movt	r1, #1
   152f4:	b	15308 <__assert_fail@plt+0x3d20>
   152f8:	bl	114b0 <__errno_location@plt>
   152fc:	ldr	r4, [r0]
   15300:	movw	r1, #56048	; 0xdaf0
   15304:	movt	r1, #1
   15308:	mov	r0, #0
   1530c:	mov	r2, #5
   15310:	bl	11348 <dcgettext@plt>
   15314:	mov	r2, r0
   15318:	mov	r0, #1
   1531c:	mov	r1, r4
   15320:	bl	113e4 <error@plt>
   15324:	mov	r0, #0
   15328:	bl	1145c <exit@plt>
   1532c:	bl	1b850 <__assert_fail@plt+0xa268>
   15330:	movw	r1, #57728	; 0xe180
   15334:	mov	r0, #0
   15338:	mov	r2, #5
   1533c:	movt	r1, #1
   15340:	bl	11348 <dcgettext@plt>
   15344:	mov	r2, r0
   15348:	mov	r0, #1
   1534c:	mov	r1, #0
   15350:	bl	113e4 <error@plt>
   15354:	bl	114b0 <__errno_location@plt>
   15358:	ldr	r4, [r0]
   1535c:	movw	r1, #57747	; 0xe193
   15360:	movt	r1, #1
   15364:	b	15308 <__assert_fail@plt+0x3d20>
   15368:	mov	r0, #1
   1536c:	bl	1145c <exit@plt>
   15370:	bl	114b0 <__errno_location@plt>
   15374:	ldr	r4, [r0]
   15378:	movw	r1, #57791	; 0xe1bf
   1537c:	movt	r1, #1
   15380:	b	15308 <__assert_fail@plt+0x3d20>
   15384:	push	{r4, r5, r6, r7, fp, lr}
   15388:	add	fp, sp, #16
   1538c:	sub	sp, sp, #88	; 0x58
   15390:	mov	r5, r1
   15394:	mov	r1, sp
   15398:	bl	11288 <fstatfs64@plt>
   1539c:	cmp	r0, #0
   153a0:	beq	153fc <__assert_fail@plt+0x3e14>
   153a4:	bl	114b0 <__errno_location@plt>
   153a8:	ldr	r6, [r0]
   153ac:	mov	r4, #1
   153b0:	cmp	r6, #38	; 0x26
   153b4:	beq	15c08 <__assert_fail@plt+0x4620>
   153b8:	movw	r1, #57565	; 0xe0dd
   153bc:	mov	r0, #0
   153c0:	mov	r2, #5
   153c4:	movt	r1, #1
   153c8:	bl	11348 <dcgettext@plt>
   153cc:	mov	r7, r0
   153d0:	mov	r0, #4
   153d4:	mov	r1, r5
   153d8:	bl	1a668 <__assert_fail@plt+0x9080>
   153dc:	mov	r3, r0
   153e0:	mov	r0, #0
   153e4:	mov	r1, r6
   153e8:	mov	r2, r7
   153ec:	bl	113e4 <error@plt>
   153f0:	mov	r0, r4
   153f4:	sub	sp, fp, #16
   153f8:	pop	{r4, r5, r6, r7, fp, pc}
   153fc:	ldr	r0, [sp]
   15400:	movw	r1, #63411	; 0xf7b3
   15404:	mov	r4, #0
   15408:	movt	r1, #303	; 0x12f
   1540c:	cmp	r0, r1
   15410:	ble	15474 <__assert_fail@plt+0x3e8c>
   15414:	movw	r1, #12620	; 0x314c
   15418:	movt	r1, #21318	; 0x5346
   1541c:	cmp	r0, r1
   15420:	bgt	154e0 <__assert_fail@plt+0x3ef8>
   15424:	movw	r1, #15684	; 0x3d44
   15428:	movt	r1, #10445	; 0x28cd
   1542c:	cmp	r0, r1
   15430:	bgt	1558c <__assert_fail@plt+0x3fa4>
   15434:	movw	r1, #30803	; 0x7853
   15438:	movt	r1, #4400	; 0x1130
   1543c:	cmp	r0, r1
   15440:	bgt	156c0 <__assert_fail@plt+0x40d8>
   15444:	movw	r1, #22560	; 0x5820
   15448:	movt	r1, #1893	; 0x765
   1544c:	cmp	r0, r1
   15450:	bgt	1589c <__assert_fail@plt+0x42b4>
   15454:	movw	r1, #2124	; 0x84c
   15458:	movt	r1, #65232	; 0xfed0
   1545c:	add	r0, r0, r1
   15460:	cmp	r0, #4
   15464:	movcs	r4, #1
   15468:	mov	r0, r4
   1546c:	sub	sp, fp, #16
   15470:	pop	{r4, r5, r6, r7, fp, pc}
   15474:	movw	r1, #16963	; 0x4243
   15478:	cmp	r0, r1
   1547c:	bgt	15544 <__assert_fail@plt+0x3f5c>
   15480:	movw	r1, #390	; 0x186
   15484:	cmp	r0, r1
   15488:	bgt	155e0 <__assert_fail@plt+0x3ff8>
   1548c:	movw	r1, #33251	; 0x81e3
   15490:	movt	r1, #56926	; 0xde5e
   15494:	cmp	r0, r1
   15498:	bgt	15704 <__assert_fail@plt+0x411c>
   1549c:	movw	r1, #6515	; 0x1973
   154a0:	movt	r1, #43962	; 0xabba
   154a4:	cmp	r0, r1
   154a8:	ble	158cc <__assert_fail@plt+0x42e4>
   154ac:	movw	r1, #33127	; 0x8167
   154b0:	movt	r1, #51582	; 0xc97e
   154b4:	cmp	r0, r1
   154b8:	bgt	15b44 <__assert_fail@plt+0x455c>
   154bc:	movw	r1, #6516	; 0x1974
   154c0:	movt	r1, #43962	; 0xabba
   154c4:	cmp	r0, r1
   154c8:	beq	15c08 <__assert_fail@plt+0x4620>
   154cc:	movw	r1, #5520	; 0x1590
   154d0:	movt	r1, #51031	; 0xc757
   154d4:	cmp	r0, r1
   154d8:	beq	15c08 <__assert_fail@plt+0x4620>
   154dc:	b	15c14 <__assert_fail@plt+0x462c>
   154e0:	movw	r1, #25967	; 0x656f
   154e4:	movt	r1, #25189	; 0x6265
   154e8:	cmp	r0, r1
   154ec:	bgt	1562c <__assert_fail@plt+0x4044>
   154f0:	movw	r1, #22568	; 0x5828
   154f4:	movt	r1, #22569	; 0x5829
   154f8:	cmp	r0, r1
   154fc:	ble	15740 <__assert_fail@plt+0x4158>
   15500:	movw	r1, #18002	; 0x4652
   15504:	movt	r1, #23119	; 0x5a4f
   15508:	cmp	r0, r1
   1550c:	ble	158fc <__assert_fail@plt+0x4314>
   15510:	movw	r1, #26475	; 0x676b
   15514:	movt	r1, #24933	; 0x6165
   15518:	cmp	r0, r1
   1551c:	bgt	15b68 <__assert_fail@plt+0x4580>
   15520:	movw	r1, #18003	; 0x4653
   15524:	movt	r1, #23119	; 0x5a4f
   15528:	cmp	r0, r1
   1552c:	beq	15c08 <__assert_fail@plt+0x4620>
   15530:	movw	r1, #11765	; 0x2df5
   15534:	movt	r1, #24010	; 0x5dca
   15538:	cmp	r0, r1
   1553c:	beq	15c08 <__assert_fail@plt+0x4620>
   15540:	b	15c14 <__assert_fail@plt+0x462c>
   15544:	movw	r1, #44532	; 0xadf4
   15548:	cmp	r0, r1
   1554c:	bgt	15680 <__assert_fail@plt+0x4098>
   15550:	movw	r1, #29300	; 0x7274
   15554:	cmp	r0, r1
   15558:	bgt	15780 <__assert_fail@plt+0x4198>
   1555c:	movw	r1, #19779	; 0x4d43
   15560:	cmp	r0, r1
   15564:	bgt	1592c <__assert_fail@plt+0x4344>
   15568:	movw	r1, #16964	; 0x4244
   1556c:	cmp	r0, r1
   15570:	movwne	r1, #18475	; 0x482b
   15574:	cmpne	r0, r1
   15578:	beq	15c08 <__assert_fail@plt+0x4620>
   1557c:	movw	r1, #18520	; 0x4858
   15580:	cmp	r0, r1
   15584:	beq	15c08 <__assert_fail@plt+0x4620>
   15588:	b	15c14 <__assert_fail@plt+0x462c>
   1558c:	movw	r1, #23890	; 0x5d52
   15590:	movt	r1, #17217	; 0x4341
   15594:	cmp	r0, r1
   15598:	ble	157b0 <__assert_fail@plt+0x41c8>
   1559c:	movw	r1, #17484	; 0x444c
   155a0:	movt	r1, #17741	; 0x454d
   155a4:	cmp	r0, r1
   155a8:	ble	15950 <__assert_fail@plt+0x4368>
   155ac:	movw	r1, #18802	; 0x4972
   155b0:	movt	r1, #21093	; 0x5265
   155b4:	cmp	r0, r1
   155b8:	bgt	15b8c <__assert_fail@plt+0x45a4>
   155bc:	movw	r1, #17485	; 0x444d
   155c0:	movt	r1, #17741	; 0x454d
   155c4:	cmp	r0, r1
   155c8:	beq	15c08 <__assert_fail@plt+0x4620>
   155cc:	movw	r1, #18003	; 0x4653
   155d0:	movt	r1, #17752	; 0x4558
   155d4:	cmp	r0, r1
   155d8:	beq	15c08 <__assert_fail@plt+0x4620>
   155dc:	b	15c14 <__assert_fail@plt+0x462c>
   155e0:	movw	r1, #9319	; 0x2467
   155e4:	cmp	r0, r1
   155e8:	bgt	157f0 <__assert_fail@plt+0x4208>
   155ec:	movw	r1, #4978	; 0x1372
   155f0:	cmp	r0, r1
   155f4:	ble	15b2c <__assert_fail@plt+0x4544>
   155f8:	movw	r1, #4979	; 0x1373
   155fc:	sub	r1, r0, r1
   15600:	cmp	r1, #28
   15604:	bhi	1561c <__assert_fail@plt+0x4034>
   15608:	movw	r3, #5121	; 0x1401
   1560c:	mov	r2, #1
   15610:	movt	r3, #4096	; 0x1000
   15614:	tst	r3, r2, lsl r1
   15618:	bne	15c08 <__assert_fail@plt+0x4620>
   1561c:	movw	r1, #7377	; 0x1cd1
   15620:	cmp	r0, r1
   15624:	beq	15c08 <__assert_fail@plt+0x4620>
   15628:	b	15c14 <__assert_fail@plt+0x462c>
   1562c:	movw	r1, #4385	; 0x1121
   15630:	movt	r1, #26649	; 0x6819
   15634:	cmp	r0, r1
   15638:	ble	1581c <__assert_fail@plt+0x4234>
   1563c:	movw	r1, #26226	; 0x6672
   15640:	movt	r1, #29539	; 0x7363
   15644:	cmp	r0, r1
   15648:	ble	15980 <__assert_fail@plt+0x4398>
   1564c:	movw	r1, #29304	; 0x7278
   15650:	movt	r1, #29554	; 0x7372
   15654:	cmp	r0, r1
   15658:	bgt	15bb0 <__assert_fail@plt+0x45c8>
   1565c:	movw	r1, #26227	; 0x6673
   15660:	movt	r1, #29539	; 0x7363
   15664:	cmp	r0, r1
   15668:	beq	15c08 <__assert_fail@plt+0x4620>
   1566c:	movw	r1, #29544	; 0x7368
   15670:	movt	r1, #29553	; 0x7371
   15674:	cmp	r0, r1
   15678:	beq	15c08 <__assert_fail@plt+0x4620>
   1567c:	b	15c14 <__assert_fail@plt+0x462c>
   15680:	movw	r1, #57578	; 0xe0ea
   15684:	movt	r1, #39	; 0x27
   15688:	cmp	r0, r1
   1568c:	bgt	1585c <__assert_fail@plt+0x4274>
   15690:	movw	r1, #61266	; 0xef52
   15694:	cmp	r0, r1
   15698:	bgt	159b0 <__assert_fail@plt+0x43c8>
   1569c:	movw	r1, #44533	; 0xadf5
   156a0:	cmp	r0, r1
   156a4:	movwne	r1, #44543	; 0xadff
   156a8:	cmpne	r0, r1
   156ac:	beq	15c08 <__assert_fail@plt+0x4620>
   156b0:	movw	r1, #61265	; 0xef51
   156b4:	cmp	r0, r1
   156b8:	beq	15c08 <__assert_fail@plt+0x4620>
   156bc:	b	15c14 <__assert_fail@plt+0x462c>
   156c0:	movw	r1, #513	; 0x201
   156c4:	movt	r1, #6528	; 0x1980
   156c8:	cmp	r0, r1
   156cc:	ble	159d8 <__assert_fail@plt+0x43f0>
   156d0:	movw	r1, #47791	; 0xbaaf
   156d4:	movt	r1, #8209	; 0x2011
   156d8:	cmp	r0, r1
   156dc:	bgt	15bd4 <__assert_fail@plt+0x45ec>
   156e0:	movw	r1, #514	; 0x202
   156e4:	movt	r1, #6528	; 0x1980
   156e8:	cmp	r0, r1
   156ec:	beq	15c08 <__assert_fail@plt+0x4620>
   156f0:	movw	r1, #64206	; 0xface
   156f4:	movt	r1, #7085	; 0x1bad
   156f8:	cmp	r0, r1
   156fc:	beq	15c08 <__assert_fail@plt+0x4620>
   15700:	b	15c14 <__assert_fail@plt+0x462c>
   15704:	movw	r1, #65419	; 0xff8b
   15708:	movt	r1, #63868	; 0xf97c
   1570c:	cmp	r0, r1
   15710:	ble	15a08 <__assert_fail@plt+0x4420>
   15714:	cmp	r0, #46	; 0x2e
   15718:	bgt	15bf8 <__assert_fail@plt+0x4610>
   1571c:	movw	r1, #65420	; 0xff8c
   15720:	movt	r1, #63868	; 0xf97c
   15724:	cmp	r0, r1
   15728:	beq	15c08 <__assert_fail@plt+0x4620>
   1572c:	movw	r1, #59465	; 0xe849
   15730:	movt	r1, #63893	; 0xf995
   15734:	cmp	r0, r1
   15738:	beq	15c08 <__assert_fail@plt+0x4620>
   1573c:	b	15c14 <__assert_fail@plt+0x462c>
   15740:	movw	r1, #17226	; 0x434a
   15744:	movt	r1, #21327	; 0x534f
   15748:	cmp	r0, r1
   1574c:	bgt	15a38 <__assert_fail@plt+0x4450>
   15750:	movw	r1, #12621	; 0x314d
   15754:	movt	r1, #21318	; 0x5346
   15758:	cmp	r0, r1
   1575c:	movwne	r1, #18502	; 0x4846
   15760:	movtne	r1, #21318	; 0x5346
   15764:	cmpne	r0, r1
   15768:	beq	15c08 <__assert_fail@plt+0x4620>
   1576c:	movw	r1, #21582	; 0x544e
   15770:	movt	r1, #21318	; 0x5346
   15774:	cmp	r0, r1
   15778:	beq	15c08 <__assert_fail@plt+0x4620>
   1577c:	b	15c14 <__assert_fail@plt+0x462c>
   15780:	movw	r1, #40863	; 0x9f9f
   15784:	cmp	r0, r1
   15788:	bgt	15a68 <__assert_fail@plt+0x4480>
   1578c:	movw	r1, #29301	; 0x7275
   15790:	cmp	r0, r1
   15794:	movwne	r1, #29366	; 0x72b6
   15798:	cmpne	r0, r1
   1579c:	beq	15c08 <__assert_fail@plt+0x4620>
   157a0:	movw	r1, #38496	; 0x9660
   157a4:	cmp	r0, r1
   157a8:	beq	15c08 <__assert_fail@plt+0x4620>
   157ac:	b	15c14 <__assert_fail@plt+0x462c>
   157b0:	movw	r1, #17993	; 0x4649
   157b4:	movt	r1, #12627	; 0x3153
   157b8:	cmp	r0, r1
   157bc:	bgt	15a7c <__assert_fail@plt+0x4494>
   157c0:	movw	r1, #15685	; 0x3d45
   157c4:	movt	r1, #10445	; 0x28cd
   157c8:	cmp	r0, r1
   157cc:	movwne	r1, #7658	; 0x1dea
   157d0:	movtne	r1, #11181	; 0x2bad
   157d4:	cmpne	r0, r1
   157d8:	beq	15c08 <__assert_fail@plt+0x4620>
   157dc:	movw	r1, #12225	; 0x2fc1
   157e0:	movt	r1, #12225	; 0x2fc1
   157e4:	cmp	r0, r1
   157e8:	beq	15c08 <__assert_fail@plt+0x4620>
   157ec:	b	15c14 <__assert_fail@plt+0x462c>
   157f0:	cmp	r0, #16384	; 0x4000
   157f4:	bge	15aac <__assert_fail@plt+0x44c4>
   157f8:	movw	r1, #9320	; 0x2468
   157fc:	cmp	r0, r1
   15800:	movwne	r1, #9336	; 0x2478
   15804:	cmpne	r0, r1
   15808:	beq	15c08 <__assert_fail@plt+0x4620>
   1580c:	movw	r1, #13364	; 0x3434
   15810:	cmp	r0, r1
   15814:	beq	15c08 <__assert_fail@plt+0x4620>
   15818:	b	15c14 <__assert_fail@plt+0x462c>
   1581c:	movw	r1, #26399	; 0x671f
   15820:	movt	r1, #25698	; 0x6462
   15824:	cmp	r0, r1
   15828:	bgt	15acc <__assert_fail@plt+0x44e4>
   1582c:	movw	r1, #25968	; 0x6570
   15830:	movt	r1, #25189	; 0x6265
   15834:	cmp	r0, r1
   15838:	movwne	r1, #25970	; 0x6572
   1583c:	movtne	r1, #25189	; 0x6265
   15840:	cmpne	r0, r1
   15844:	beq	15c08 <__assert_fail@plt+0x4620>
   15848:	movw	r1, #29296	; 0x7270
   1584c:	movt	r1, #25447	; 0x6367
   15850:	cmp	r0, r1
   15854:	beq	15c08 <__assert_fail@plt+0x4620>
   15858:	b	15c14 <__assert_fail@plt+0x462c>
   1585c:	movw	r1, #6547	; 0x1993
   15860:	movt	r1, #258	; 0x102
   15864:	cmp	r0, r1
   15868:	bgt	15afc <__assert_fail@plt+0x4514>
   1586c:	movw	r1, #57579	; 0xe0eb
   15870:	movt	r1, #39	; 0x27
   15874:	cmp	r0, r1
   15878:	movwne	r1, #19027	; 0x4a53
   1587c:	movtne	r1, #65	; 0x41
   15880:	cmpne	r0, r1
   15884:	beq	15c08 <__assert_fail@plt+0x4620>
   15888:	movw	r1, #65518	; 0xffee
   1588c:	movt	r1, #192	; 0xc0
   15890:	cmp	r0, r1
   15894:	beq	15c08 <__assert_fail@plt+0x4620>
   15898:	b	15c14 <__assert_fail@plt+0x462c>
   1589c:	movw	r1, #22561	; 0x5821
   158a0:	movt	r1, #1893	; 0x765
   158a4:	cmp	r0, r1
   158a8:	movwne	r1, #6452	; 0x1934
   158ac:	movtne	r1, #2308	; 0x904
   158b0:	cmpne	r0, r1
   158b4:	beq	15c08 <__assert_fail@plt+0x4620>
   158b8:	movw	r1, #7658	; 0x1dea
   158bc:	movt	r1, #2989	; 0xbad
   158c0:	cmp	r0, r1
   158c4:	beq	15c08 <__assert_fail@plt+0x4620>
   158c8:	b	15c14 <__assert_fail@plt+0x462c>
   158cc:	movw	r1, #22774	; 0x58f6
   158d0:	movt	r1, #34180	; 0x8584
   158d4:	cmp	r0, r1
   158d8:	movwne	r1, #26686	; 0x683e
   158dc:	movtne	r1, #37155	; 0x9123
   158e0:	cmpne	r0, r1
   158e4:	beq	15c08 <__assert_fail@plt+0x4620>
   158e8:	movw	r1, #22774	; 0x58f6
   158ec:	movt	r1, #38276	; 0x9584
   158f0:	cmp	r0, r1
   158f4:	beq	15c08 <__assert_fail@plt+0x4620>
   158f8:	b	15c14 <__assert_fail@plt+0x462c>
   158fc:	movw	r1, #22569	; 0x5829
   15900:	movt	r1, #22569	; 0x5829
   15904:	cmp	r0, r1
   15908:	movwne	r1, #21314	; 0x5342
   1590c:	movtne	r1, #22598	; 0x5846
   15910:	cmpne	r0, r1
   15914:	beq	15c08 <__assert_fail@plt+0x4620>
   15918:	movw	r1, #27120	; 0x69f0
   1591c:	movt	r1, #23100	; 0x5a3c
   15920:	cmp	r0, r1
   15924:	beq	15c08 <__assert_fail@plt+0x4620>
   15928:	b	15c14 <__assert_fail@plt+0x462c>
   1592c:	movw	r1, #19780	; 0x4d44
   15930:	cmp	r0, r1
   15934:	movwne	r1, #19802	; 0x4d5a
   15938:	cmpne	r0, r1
   1593c:	beq	15c08 <__assert_fail@plt+0x4620>
   15940:	movw	r1, #24053	; 0x5df5
   15944:	cmp	r0, r1
   15948:	beq	15c08 <__assert_fail@plt+0x4620>
   1594c:	b	15c14 <__assert_fail@plt+0x462c>
   15950:	movw	r1, #23891	; 0x5d53
   15954:	movt	r1, #17217	; 0x4341
   15958:	cmp	r0, r1
   1595c:	movwne	r1, #16706	; 0x4142
   15960:	movtne	r1, #17485	; 0x444d
   15964:	cmpne	r0, r1
   15968:	beq	15c08 <__assert_fail@plt+0x4620>
   1596c:	movw	r1, #52520	; 0xcd28
   15970:	movt	r1, #17725	; 0x453d
   15974:	cmp	r0, r1
   15978:	beq	15c08 <__assert_fail@plt+0x4620>
   1597c:	b	15c14 <__assert_fail@plt+0x462c>
   15980:	movw	r1, #4386	; 0x1122
   15984:	movt	r1, #26649	; 0x6819
   15988:	cmp	r0, r1
   1598c:	movwne	r1, #28528	; 0x6f70
   15990:	movtne	r1, #27759	; 0x6c6f
   15994:	cmpne	r0, r1
   15998:	beq	15c08 <__assert_fail@plt+0x4620>
   1599c:	movw	r1, #26227	; 0x6673
   159a0:	movt	r1, #28275	; 0x6e73
   159a4:	cmp	r0, r1
   159a8:	beq	15c08 <__assert_fail@plt+0x4620>
   159ac:	b	15c14 <__assert_fail@plt+0x462c>
   159b0:	movw	r1, #61267	; 0xef53
   159b4:	cmp	r0, r1
   159b8:	movwne	r1, #61791	; 0xf15f
   159bc:	cmpne	r0, r1
   159c0:	beq	15c08 <__assert_fail@plt+0x4620>
   159c4:	movw	r1, #6484	; 0x1954
   159c8:	movt	r1, #1
   159cc:	cmp	r0, r1
   159d0:	beq	15c08 <__assert_fail@plt+0x4620>
   159d4:	b	15c14 <__assert_fail@plt+0x462c>
   159d8:	movw	r1, #30804	; 0x7854
   159dc:	movt	r1, #4400	; 0x1130
   159e0:	cmp	r0, r1
   159e4:	movwne	r1, #4966	; 0x1366
   159e8:	movtne	r1, #4966	; 0x1366
   159ec:	cmpne	r0, r1
   159f0:	beq	15c08 <__assert_fail@plt+0x4620>
   159f4:	movw	r1, #13126	; 0x3346
   159f8:	movt	r1, #5377	; 0x1501
   159fc:	cmp	r0, r1
   15a00:	beq	15c08 <__assert_fail@plt+0x4620>
   15a04:	b	15c14 <__assert_fail@plt+0x462c>
   15a08:	movw	r1, #33252	; 0x81e4
   15a0c:	movt	r1, #56926	; 0xde5e
   15a10:	cmp	r0, r1
   15a14:	movwne	r1, #57826	; 0xe1e2
   15a18:	movtne	r1, #57589	; 0xe0f5
   15a1c:	cmpne	r0, r1
   15a20:	beq	15c08 <__assert_fail@plt+0x4620>
   15a24:	movw	r1, #8208	; 0x2010
   15a28:	movt	r1, #62197	; 0xf2f5
   15a2c:	cmp	r0, r1
   15a30:	beq	15c08 <__assert_fail@plt+0x4620>
   15a34:	b	15c14 <__assert_fail@plt+0x462c>
   15a38:	movw	r1, #17227	; 0x434b
   15a3c:	movt	r1, #21327	; 0x534f
   15a40:	cmp	r0, r1
   15a44:	movwne	r1, #256	; 0x100
   15a48:	movtne	r1, #21529	; 0x5419
   15a4c:	cmpne	r0, r1
   15a50:	beq	15c08 <__assert_fail@plt+0x4620>
   15a54:	movw	r1, #18003	; 0x4653
   15a58:	movt	r1, #22106	; 0x565a
   15a5c:	cmp	r0, r1
   15a60:	beq	15c08 <__assert_fail@plt+0x4620>
   15a64:	b	15c14 <__assert_fail@plt+0x462c>
   15a68:	movw	r1, #40864	; 0x9fa0
   15a6c:	sub	r0, r0, r1
   15a70:	cmp	r0, #3
   15a74:	bcc	15c08 <__assert_fail@plt+0x4620>
   15a78:	b	15c14 <__assert_fail@plt+0x462c>
   15a7c:	movw	r1, #17994	; 0x464a
   15a80:	movt	r1, #12627	; 0x3153
   15a84:	cmp	r0, r1
   15a88:	movwne	r1, #21297	; 0x5331
   15a8c:	movtne	r1, #16966	; 0x4246
   15a90:	cmpne	r0, r1
   15a94:	beq	15c08 <__assert_fail@plt+0x4620>
   15a98:	movw	r1, #20045	; 0x4e4d
   15a9c:	movt	r1, #16969	; 0x4249
   15aa0:	cmp	r0, r1
   15aa4:	beq	15c08 <__assert_fail@plt+0x4620>
   15aa8:	b	15c14 <__assert_fail@plt+0x462c>
   15aac:	sub	r0, r0, #16384	; 0x4000
   15ab0:	cmp	r0, #6
   15ab4:	bhi	15c14 <__assert_fail@plt+0x462c>
   15ab8:	mov	r1, #1
   15abc:	mov	r2, #81	; 0x51
   15ac0:	tst	r2, r1, lsl r0
   15ac4:	bne	15c08 <__assert_fail@plt+0x4620>
   15ac8:	b	15c14 <__assert_fail@plt+0x462c>
   15acc:	movw	r1, #26400	; 0x6720
   15ad0:	movt	r1, #25698	; 0x6462
   15ad4:	cmp	r0, r1
   15ad8:	movwne	r1, #24952	; 0x6178
   15adc:	movtne	r1, #25700	; 0x6464
   15ae0:	cmpne	r0, r1
   15ae4:	beq	15c08 <__assert_fail@plt+0x4620>
   15ae8:	movw	r1, #26985	; 0x6969
   15aec:	movt	r1, #26457	; 0x6759
   15af0:	cmp	r0, r1
   15af4:	beq	15c08 <__assert_fail@plt+0x4620>
   15af8:	b	15c14 <__assert_fail@plt+0x462c>
   15afc:	movw	r1, #6548	; 0x1994
   15b00:	movt	r1, #258	; 0x102
   15b04:	cmp	r0, r1
   15b08:	movwne	r1, #6551	; 0x1997
   15b0c:	movtne	r1, #258	; 0x102
   15b10:	cmpne	r0, r1
   15b14:	beq	15c08 <__assert_fail@plt+0x4620>
   15b18:	movw	r1, #53613	; 0xd16d
   15b1c:	movt	r1, #303	; 0x12f
   15b20:	cmp	r0, r1
   15b24:	beq	15c08 <__assert_fail@plt+0x4620>
   15b28:	b	15c14 <__assert_fail@plt+0x462c>
   15b2c:	movw	r1, #391	; 0x187
   15b30:	cmp	r0, r1
   15b34:	beq	15c08 <__assert_fail@plt+0x4620>
   15b38:	cmp	r0, #1984	; 0x7c0
   15b3c:	beq	15c08 <__assert_fail@plt+0x4620>
   15b40:	b	15c14 <__assert_fail@plt+0x462c>
   15b44:	movw	r1, #33128	; 0x8168
   15b48:	movt	r1, #51582	; 0xc97e
   15b4c:	cmp	r0, r1
   15b50:	beq	15c08 <__assert_fail@plt+0x4620>
   15b54:	movw	r1, #18961	; 0x4a11
   15b58:	movt	r1, #51966	; 0xcafe
   15b5c:	cmp	r0, r1
   15b60:	beq	15c08 <__assert_fail@plt+0x4620>
   15b64:	b	15c14 <__assert_fail@plt+0x462c>
   15b68:	movw	r1, #26476	; 0x676c
   15b6c:	movt	r1, #24933	; 0x6165
   15b70:	cmp	r0, r1
   15b74:	beq	15c08 <__assert_fail@plt+0x4620>
   15b78:	movw	r1, #25974	; 0x6576
   15b7c:	movt	r1, #25188	; 0x6264
   15b80:	cmp	r0, r1
   15b84:	beq	15c08 <__assert_fail@plt+0x4620>
   15b88:	b	15c14 <__assert_fail@plt+0x462c>
   15b8c:	movw	r1, #18803	; 0x4973
   15b90:	movt	r1, #21093	; 0x5265
   15b94:	cmp	r0, r1
   15b98:	beq	15c08 <__assert_fail@plt+0x4620>
   15b9c:	movw	r1, #17229	; 0x434d
   15ba0:	movt	r1, #21317	; 0x5345
   15ba4:	cmp	r0, r1
   15ba8:	beq	15c08 <__assert_fail@plt+0x4620>
   15bac:	b	15c14 <__assert_fail@plt+0x462c>
   15bb0:	movw	r1, #29305	; 0x7279
   15bb4:	movt	r1, #29554	; 0x7372
   15bb8:	cmp	r0, r1
   15bbc:	beq	15c08 <__assert_fail@plt+0x4620>
   15bc0:	movw	r1, #24931	; 0x6163
   15bc4:	movt	r1, #29810	; 0x7472
   15bc8:	cmp	r0, r1
   15bcc:	beq	15c08 <__assert_fail@plt+0x4620>
   15bd0:	b	15c14 <__assert_fail@plt+0x462c>
   15bd4:	movw	r1, #47792	; 0xbab0
   15bd8:	movt	r1, #8209	; 0x2011
   15bdc:	cmp	r0, r1
   15be0:	beq	15c08 <__assert_fail@plt+0x4620>
   15be4:	movw	r1, #6405	; 0x1905
   15be8:	movt	r1, #9221	; 0x2405
   15bec:	cmp	r0, r1
   15bf0:	beq	15c08 <__assert_fail@plt+0x4620>
   15bf4:	b	15c14 <__assert_fail@plt+0x462c>
   15bf8:	cmp	r0, #47	; 0x2f
   15bfc:	beq	15c08 <__assert_fail@plt+0x4620>
   15c00:	cmp	r0, #51	; 0x33
   15c04:	bne	15c14 <__assert_fail@plt+0x462c>
   15c08:	mov	r0, r4
   15c0c:	sub	sp, fp, #16
   15c10:	pop	{r4, r5, r6, r7, fp, pc}
   15c14:	mov	r4, #1
   15c18:	mov	r0, r4
   15c1c:	sub	sp, fp, #16
   15c20:	pop	{r4, r5, r6, r7, fp, pc}
   15c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c28:	add	fp, sp, #28
   15c2c:	sub	sp, sp, #12
   15c30:	sub	sp, sp, #8192	; 0x2000
   15c34:	ldr	r4, [fp, #8]
   15c38:	ldr	r8, [fp, #12]
   15c3c:	mov	r9, r0
   15c40:	mvn	r0, #1
   15c44:	str	r1, [sp, #4]
   15c48:	mov	sl, r2
   15c4c:	eor	r0, r4, r0
   15c50:	mvn	r1, r8
   15c54:	orrs	r0, r0, r1
   15c58:	beq	15d00 <__assert_fail@plt+0x4718>
   15c5c:	and	r0, r4, r8
   15c60:	mov	r5, #0
   15c64:	cmn	r0, #1
   15c68:	bne	15d3c <__assert_fail@plt+0x4754>
   15c6c:	movw	r4, #61888	; 0xf1c0
   15c70:	add	r7, sp, #8
   15c74:	mov	r6, #0
   15c78:	movt	r4, #2
   15c7c:	b	15c98 <__assert_fail@plt+0x46b0>
   15c80:	mov	r0, r7
   15c84:	mov	r1, r8
   15c88:	bl	15f54 <__assert_fail@plt+0x496c>
   15c8c:	adds	r5, r5, r8
   15c90:	mov	r9, #0
   15c94:	adc	r6, r6, #0
   15c98:	mov	r0, sl
   15c9c:	mov	r1, r7
   15ca0:	mov	r2, #8192	; 0x2000
   15ca4:	bl	1aba8 <__assert_fail@plt+0x95c0>
   15ca8:	cmn	r0, #1
   15cac:	beq	15df0 <__assert_fail@plt+0x4808>
   15cb0:	mov	r8, r0
   15cb4:	cmp	r0, #0
   15cb8:	beq	15e00 <__assert_fail@plt+0x4818>
   15cbc:	tst	r9, #1
   15cc0:	beq	15c80 <__assert_fail@plt+0x4698>
   15cc4:	ldrb	r0, [r4, #10]
   15cc8:	ldr	r3, [sp, #4]
   15ccc:	movw	r1, #57390	; 0xe02e
   15cd0:	movw	r2, #55494	; 0xd8c6
   15cd4:	movt	r1, #1
   15cd8:	movt	r2, #1
   15cdc:	cmp	r0, #0
   15ce0:	movw	r0, #55493	; 0xd8c5
   15ce4:	movt	r0, #1
   15ce8:	movne	r2, r0
   15cec:	mov	r0, #1
   15cf0:	bl	114d4 <__printf_chk@plt>
   15cf4:	mov	r0, #1
   15cf8:	strb	r0, [r4, #10]
   15cfc:	b	15c80 <__assert_fail@plt+0x4698>
   15d00:	add	r1, sp, #8
   15d04:	mov	r0, sl
   15d08:	mov	r2, #8192	; 0x2000
   15d0c:	bl	1aba8 <__assert_fail@plt+0x95c0>
   15d10:	mov	r6, #0
   15d14:	cmn	r0, #1
   15d18:	beq	15dec <__assert_fail@plt+0x4804>
   15d1c:	mov	r5, r0
   15d20:	cmp	r0, #0
   15d24:	bne	15e10 <__assert_fail@plt+0x4828>
   15d28:	mov	r5, #0
   15d2c:	mov	r0, r5
   15d30:	mov	r1, r6
   15d34:	sub	sp, fp, #28
   15d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d3c:	mov	r6, #0
   15d40:	subs	r0, r4, #8192	; 0x2000
   15d44:	mov	r2, r4
   15d48:	add	r1, sp, #8
   15d4c:	sbcs	r0, r8, #0
   15d50:	mov	r0, sl
   15d54:	movcs	r2, #8192	; 0x2000
   15d58:	bl	1aba8 <__assert_fail@plt+0x95c0>
   15d5c:	cmp	r0, #0
   15d60:	beq	15e00 <__assert_fail@plt+0x4818>
   15d64:	mov	r7, r0
   15d68:	cmn	r0, #1
   15d6c:	beq	15df0 <__assert_fail@plt+0x4808>
   15d70:	tst	r9, #1
   15d74:	beq	15dbc <__assert_fail@plt+0x47d4>
   15d78:	movw	r0, #61888	; 0xf1c0
   15d7c:	ldr	r3, [sp, #4]
   15d80:	movw	r1, #57390	; 0xe02e
   15d84:	movw	r2, #55494	; 0xd8c6
   15d88:	movt	r0, #2
   15d8c:	movt	r1, #1
   15d90:	movt	r2, #1
   15d94:	mov	r9, r0
   15d98:	ldrb	r0, [r0, #10]
   15d9c:	cmp	r0, #0
   15da0:	movw	r0, #55493	; 0xd8c5
   15da4:	movt	r0, #1
   15da8:	movne	r2, r0
   15dac:	mov	r0, #1
   15db0:	bl	114d4 <__printf_chk@plt>
   15db4:	mov	r0, #1
   15db8:	strb	r0, [r9, #10]
   15dbc:	add	r0, sp, #8
   15dc0:	mov	r1, r7
   15dc4:	bl	15f54 <__assert_fail@plt+0x496c>
   15dc8:	subs	r4, r4, r7
   15dcc:	sbc	r8, r8, #0
   15dd0:	adds	r5, r5, r7
   15dd4:	orr	r0, r4, r8
   15dd8:	adc	r6, r6, #0
   15ddc:	cmp	r0, #0
   15de0:	beq	15e00 <__assert_fail@plt+0x4818>
   15de4:	mov	r9, #0
   15de8:	b	15d40 <__assert_fail@plt+0x4758>
   15dec:	mov	r5, #0
   15df0:	bl	114b0 <__errno_location@plt>
   15df4:	ldr	r4, [r0]
   15df8:	cmp	r4, #11
   15dfc:	bne	15e74 <__assert_fail@plt+0x488c>
   15e00:	mov	r0, r5
   15e04:	mov	r1, r6
   15e08:	sub	sp, fp, #28
   15e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e10:	cmp	r9, #0
   15e14:	beq	15e58 <__assert_fail@plt+0x4870>
   15e18:	movw	r4, #61888	; 0xf1c0
   15e1c:	movw	r1, #55493	; 0xd8c5
   15e20:	movw	r2, #55494	; 0xd8c6
   15e24:	ldr	r3, [sp, #4]
   15e28:	mov	r7, #1
   15e2c:	movt	r4, #2
   15e30:	movt	r1, #1
   15e34:	movt	r2, #1
   15e38:	ldrb	r0, [r4, #10]
   15e3c:	cmp	r0, #0
   15e40:	mov	r0, #1
   15e44:	movne	r2, r1
   15e48:	movw	r1, #57390	; 0xe02e
   15e4c:	movt	r1, #1
   15e50:	bl	114d4 <__printf_chk@plt>
   15e54:	strb	r7, [r4, #10]
   15e58:	add	r0, sp, #8
   15e5c:	mov	r1, r5
   15e60:	bl	15f54 <__assert_fail@plt+0x496c>
   15e64:	mov	r0, r5
   15e68:	mov	r1, r6
   15e6c:	sub	sp, fp, #28
   15e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e74:	movw	r1, #57288	; 0xdfc8
   15e78:	mov	r0, #0
   15e7c:	mov	r2, #5
   15e80:	movt	r1, #1
   15e84:	bl	11348 <dcgettext@plt>
   15e88:	ldr	r1, [sp, #4]
   15e8c:	mov	r5, r0
   15e90:	mov	r0, #4
   15e94:	bl	1a668 <__assert_fail@plt+0x9080>
   15e98:	mov	r3, r0
   15e9c:	mov	r0, #1
   15ea0:	mov	r1, r4
   15ea4:	mov	r2, r5
   15ea8:	bl	113e4 <error@plt>
   15eac:	push	{r4, r5, r6, r7, fp, lr}
   15eb0:	add	fp, sp, #16
   15eb4:	sub	sp, sp, #32
   15eb8:	ldr	r6, [fp, #8]
   15ebc:	mov	r4, r3
   15ec0:	mov	r5, r2
   15ec4:	str	r6, [sp]
   15ec8:	bl	113b4 <lseek64@plt>
   15ecc:	cmp	r1, #0
   15ed0:	subpl	sp, fp, #16
   15ed4:	poppl	{r4, r5, r6, r7, fp, pc}
   15ed8:	add	r2, sp, #11
   15edc:	mov	r0, r5
   15ee0:	mov	r1, r4
   15ee4:	bl	18ab0 <__assert_fail@plt+0x74c8>
   15ee8:	cmp	r6, #3
   15eec:	bcs	15f50 <__assert_fail@plt+0x4968>
   15ef0:	mov	r4, r0
   15ef4:	movw	r0, #58644	; 0xe514
   15ef8:	ldr	r5, [fp, #12]
   15efc:	movt	r0, #1
   15f00:	ldr	r6, [r0, r6, lsl #2]
   15f04:	bl	114b0 <__errno_location@plt>
   15f08:	ldr	r7, [r0]
   15f0c:	mov	r0, #0
   15f10:	mov	r1, r6
   15f14:	mov	r2, #5
   15f18:	bl	11348 <dcgettext@plt>
   15f1c:	mov	r6, r0
   15f20:	mov	r0, #0
   15f24:	mov	r1, #3
   15f28:	mov	r2, r5
   15f2c:	bl	1a8e4 <__assert_fail@plt+0x92fc>
   15f30:	mov	r3, r0
   15f34:	mov	r0, #0
   15f38:	mov	r1, r7
   15f3c:	mov	r2, r6
   15f40:	str	r4, [sp]
   15f44:	bl	113e4 <error@plt>
   15f48:	mov	r0, #1
   15f4c:	bl	1145c <exit@plt>
   15f50:	bl	115c4 <abort@plt>
   15f54:	push	{r4, r5, fp, lr}
   15f58:	add	fp, sp, #8
   15f5c:	cmp	r1, #0
   15f60:	popeq	{r4, r5, fp, pc}
   15f64:	movw	r5, #61876	; 0xf1b4
   15f68:	mov	r4, r1
   15f6c:	mov	r1, #1
   15f70:	movt	r5, #2
   15f74:	mov	r2, r4
   15f78:	ldr	r3, [r5]
   15f7c:	bl	1133c <fwrite_unlocked@plt>
   15f80:	cmp	r0, r4
   15f84:	bcc	15f8c <__assert_fail@plt+0x49a4>
   15f88:	pop	{r4, r5, fp, pc}
   15f8c:	ldr	r0, [r5]
   15f90:	bl	1157c <clearerr_unlocked@plt>
   15f94:	bl	114b0 <__errno_location@plt>
   15f98:	movw	r1, #57420	; 0xe04c
   15f9c:	ldr	r4, [r0]
   15fa0:	mov	r0, #0
   15fa4:	mov	r2, #5
   15fa8:	movt	r1, #1
   15fac:	bl	11348 <dcgettext@plt>
   15fb0:	movw	r1, #56048	; 0xdaf0
   15fb4:	mov	r5, r0
   15fb8:	mov	r0, #4
   15fbc:	movt	r1, #1
   15fc0:	bl	1a668 <__assert_fail@plt+0x9080>
   15fc4:	mov	r3, r0
   15fc8:	mov	r0, #1
   15fcc:	mov	r1, r4
   15fd0:	mov	r2, r5
   15fd4:	bl	113e4 <error@plt>
   15fd8:	ldr	r0, [r0, #60]	; 0x3c
   15fdc:	udiv	r2, r0, r1
   15fe0:	mls	r0, r2, r1, r0
   15fe4:	bx	lr
   15fe8:	ldr	r1, [r1, #60]	; 0x3c
   15fec:	ldr	r0, [r0, #60]	; 0x3c
   15ff0:	sub	r0, r0, r1
   15ff4:	clz	r0, r0
   15ff8:	lsr	r0, r0, #5
   15ffc:	bx	lr
   16000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16004:	add	fp, sp, #28
   16008:	sub	sp, sp, #140	; 0x8c
   1600c:	ldr	r5, [r0]
   16010:	mov	r6, r1
   16014:	movw	r1, #56578	; 0xdd02
   16018:	mov	r4, r0
   1601c:	movt	r1, #1
   16020:	mov	r0, r5
   16024:	bl	112b8 <strcmp@plt>
   16028:	ldr	r7, [r4, #52]	; 0x34
   1602c:	ldrb	sl, [r4, #46]	; 0x2e
   16030:	mov	r8, r0
   16034:	cmp	r0, #0
   16038:	beq	1605c <__assert_fail@plt+0x4a74>
   1603c:	cmp	r6, #0
   16040:	mov	r1, #2048	; 0x800
   16044:	mov	r0, r5
   16048:	movwne	r1, #0
   1604c:	bl	175f8 <__assert_fail@plt+0x6010>
   16050:	mov	r9, r0
   16054:	ldr	r0, [r4, #52]	; 0x34
   16058:	b	16064 <__assert_fail@plt+0x4a7c>
   1605c:	mov	r9, #0
   16060:	mov	r0, r7
   16064:	ldr	r1, [r4, #48]	; 0x30
   16068:	clz	r0, r0
   1606c:	lsr	r0, r0, #5
   16070:	add	r1, r1, #1
   16074:	clz	r1, r1
   16078:	lsr	r1, r1, #5
   1607c:	teq	r1, r0
   16080:	beq	16908 <__assert_fail@plt+0x5320>
   16084:	movw	r5, #61888	; 0xf1c0
   16088:	mvn	r0, #0
   1608c:	movt	r5, #2
   16090:	subs	r0, r9, r0
   16094:	movwne	r0, #1
   16098:	ldrb	r1, [r5, #8]
   1609c:	mvn	r1, r1
   160a0:	orr	r0, r0, r1
   160a4:	and	r0, r0, #1
   160a8:	strb	r0, [r4, #46]	; 0x2e
   160ac:	ldrb	r0, [r5, #7]
   160b0:	cmp	r0, #0
   160b4:	bne	1615c <__assert_fail@plt+0x4b74>
   160b8:	ldr	r1, [r4]
   160bc:	add	r2, sp, #32
   160c0:	mov	r0, #3
   160c4:	bl	115dc <__lxstat64@plt>
   160c8:	cmp	r0, #0
   160cc:	bne	1615c <__assert_fail@plt+0x4b74>
   160d0:	ldr	r0, [sp, #48]	; 0x30
   160d4:	and	r0, r0, #61440	; 0xf000
   160d8:	cmp	r0, #40960	; 0xa000
   160dc:	bne	1615c <__assert_fail@plt+0x4b74>
   160e0:	movw	r1, #57925	; 0xe245
   160e4:	mov	r0, #1
   160e8:	mov	r2, #5
   160ec:	strb	r0, [r4, #44]	; 0x2c
   160f0:	mvn	r0, #0
   160f4:	movt	r1, #1
   160f8:	str	r0, [r4, #52]	; 0x34
   160fc:	mov	r0, #0
   16100:	bl	11348 <dcgettext@plt>
   16104:	ldr	r7, [r4]
   16108:	movw	r1, #56578	; 0xdd02
   1610c:	mov	r6, r0
   16110:	movt	r1, #1
   16114:	mov	r0, r7
   16118:	bl	112b8 <strcmp@plt>
   1611c:	cmp	r0, #0
   16120:	bne	1613c <__assert_fail@plt+0x4b54>
   16124:	movw	r1, #57375	; 0xe01f
   16128:	mov	r0, #0
   1612c:	mov	r2, #5
   16130:	movt	r1, #1
   16134:	bl	11348 <dcgettext@plt>
   16138:	mov	r7, r0
   1613c:	mov	r0, #4
   16140:	mov	r1, r7
   16144:	bl	1a668 <__assert_fail@plt+0x9080>
   16148:	mov	r3, r0
   1614c:	mov	r0, #0
   16150:	mov	r1, #0
   16154:	mov	r2, r6
   16158:	b	1679c <__assert_fail@plt+0x51b4>
   1615c:	cmn	r9, #1
   16160:	beq	1625c <__assert_fail@plt+0x4c74>
   16164:	add	r2, sp, #32
   16168:	mov	r0, #3
   1616c:	mov	r1, r9
   16170:	bl	1139c <__fxstat64@plt>
   16174:	cmn	r0, #1
   16178:	ble	1625c <__assert_fail@plt+0x4c74>
   1617c:	ldr	r0, [sp, #48]	; 0x30
   16180:	and	r0, r0, #61440	; 0xf000
   16184:	cmp	r0, #32768	; 0x8000
   16188:	bge	16350 <__assert_fail@plt+0x4d68>
   1618c:	cmp	r0, #4096	; 0x1000
   16190:	cmpne	r0, #8192	; 0x2000
   16194:	beq	16358 <__assert_fail@plt+0x4d70>
   16198:	mov	r0, #0
   1619c:	strb	r0, [r4, #46]	; 0x2e
   161a0:	mvn	r0, #0
   161a4:	str	r0, [r4, #52]	; 0x34
   161a8:	movw	r0, #61760	; 0xf140
   161ac:	movt	r0, #2
   161b0:	ldrb	r1, [r5, #8]
   161b4:	ldr	r0, [r0]
   161b8:	mvn	r1, r1
   161bc:	subs	r0, r0, #1
   161c0:	movwne	r0, #1
   161c4:	cmn	r7, #1
   161c8:	orr	r0, r1, r0
   161cc:	cmpeq	sl, #0
   161d0:	and	r0, r0, #1
   161d4:	strb	r0, [r4, #44]	; 0x2c
   161d8:	beq	167a0 <__assert_fail@plt+0x51b8>
   161dc:	movw	r1, #58006	; 0xe296
   161e0:	mov	r0, #0
   161e4:	mov	r2, #5
   161e8:	movt	r1, #1
   161ec:	bl	11348 <dcgettext@plt>
   161f0:	ldr	r7, [r4]
   161f4:	movw	r1, #56578	; 0xdd02
   161f8:	mov	r6, r0
   161fc:	movt	r1, #1
   16200:	mov	r0, r7
   16204:	bl	112b8 <strcmp@plt>
   16208:	cmp	r0, #0
   1620c:	bne	16228 <__assert_fail@plt+0x4c40>
   16210:	movw	r1, #57375	; 0xe01f
   16214:	mov	r0, #0
   16218:	mov	r2, #5
   1621c:	movt	r1, #1
   16220:	bl	11348 <dcgettext@plt>
   16224:	mov	r7, r0
   16228:	mov	r0, #4
   1622c:	mov	r1, r7
   16230:	bl	1a668 <__assert_fail@plt+0x9080>
   16234:	mov	r7, r0
   16238:	ldrb	r0, [r4, #44]	; 0x2c
   1623c:	cmp	r0, #0
   16240:	beq	16780 <__assert_fail@plt+0x5198>
   16244:	movw	r1, #57350	; 0xe006
   16248:	mov	r0, #0
   1624c:	mov	r2, #5
   16250:	movt	r1, #1
   16254:	bl	11348 <dcgettext@plt>
   16258:	b	16788 <__assert_fail@plt+0x51a0>
   1625c:	bl	114b0 <__errno_location@plt>
   16260:	ldr	r6, [r0]
   16264:	str	r6, [r4, #52]	; 0x34
   16268:	ldrb	r1, [r4, #46]	; 0x2e
   1626c:	cmp	r1, #0
   16270:	beq	162dc <__assert_fail@plt+0x4cf4>
   16274:	ldr	r6, [r0]
   16278:	cmp	r7, r6
   1627c:	beq	167a0 <__assert_fail@plt+0x51b8>
   16280:	ldr	r7, [r4]
   16284:	movw	r1, #56578	; 0xdd02
   16288:	movt	r1, #1
   1628c:	mov	r0, r7
   16290:	bl	112b8 <strcmp@plt>
   16294:	cmp	r0, #0
   16298:	bne	162b4 <__assert_fail@plt+0x4ccc>
   1629c:	movw	r1, #57375	; 0xe01f
   162a0:	mov	r0, #0
   162a4:	mov	r2, #5
   162a8:	movt	r1, #1
   162ac:	bl	11348 <dcgettext@plt>
   162b0:	mov	r7, r0
   162b4:	mov	r0, #0
   162b8:	mov	r1, #3
   162bc:	mov	r2, r7
   162c0:	bl	1a8e4 <__assert_fail@plt+0x92fc>
   162c4:	movw	r2, #58758	; 0xe586
   162c8:	mov	r3, r0
   162cc:	mov	r0, #0
   162d0:	mov	r1, r6
   162d4:	movt	r2, #1
   162d8:	b	1679c <__assert_fail@plt+0x51b4>
   162dc:	cmp	sl, #0
   162e0:	beq	167a0 <__assert_fail@plt+0x51b8>
   162e4:	movw	r1, #57979	; 0xe27b
   162e8:	mov	r0, #0
   162ec:	mov	r2, #5
   162f0:	movt	r1, #1
   162f4:	bl	11348 <dcgettext@plt>
   162f8:	ldr	r7, [r4]
   162fc:	movw	r1, #56578	; 0xdd02
   16300:	mov	r8, r0
   16304:	movt	r1, #1
   16308:	mov	r0, r7
   1630c:	bl	112b8 <strcmp@plt>
   16310:	cmp	r0, #0
   16314:	bne	16330 <__assert_fail@plt+0x4d48>
   16318:	movw	r1, #57375	; 0xe01f
   1631c:	mov	r0, #0
   16320:	mov	r2, #5
   16324:	movt	r1, #1
   16328:	bl	11348 <dcgettext@plt>
   1632c:	mov	r7, r0
   16330:	mov	r0, #4
   16334:	mov	r1, r7
   16338:	bl	1a668 <__assert_fail@plt+0x9080>
   1633c:	mov	r3, r0
   16340:	mov	r0, #0
   16344:	mov	r1, r6
   16348:	mov	r2, r8
   1634c:	b	1679c <__assert_fail@plt+0x51b4>
   16350:	cmpne	r0, #49152	; 0xc000
   16354:	bne	16198 <__assert_fail@plt+0x4bb0>
   16358:	str	r6, [sp, #28]
   1635c:	ldr	r6, [r4]
   16360:	movw	r1, #56578	; 0xdd02
   16364:	movt	r1, #1
   16368:	mov	r0, r6
   1636c:	bl	112b8 <strcmp@plt>
   16370:	cmp	r0, #0
   16374:	bne	16390 <__assert_fail@plt+0x4da8>
   16378:	movw	r1, #57375	; 0xe01f
   1637c:	mov	r0, #0
   16380:	mov	r2, #5
   16384:	movt	r1, #1
   16388:	bl	11348 <dcgettext@plt>
   1638c:	mov	r6, r0
   16390:	mov	r0, r9
   16394:	mov	r1, r6
   16398:	bl	15384 <__assert_fail@plt+0x3d9c>
   1639c:	cmp	r0, #0
   163a0:	strb	r0, [r4, #45]	; 0x2d
   163a4:	beq	163b4 <__assert_fail@plt+0x4dcc>
   163a8:	ldrb	r0, [r5, #7]
   163ac:	cmp	r0, #0
   163b0:	beq	165ec <__assert_fail@plt+0x5004>
   163b4:	mov	r0, #0
   163b8:	add	r5, sp, #32
   163bc:	mvn	r1, #2
   163c0:	add	r6, r4, #24
   163c4:	add	r2, r4, #32
   163c8:	str	r0, [r4, #52]	; 0x34
   163cc:	add	sl, r5, #96	; 0x60
   163d0:	tst	r7, r1
   163d4:	str	r6, [sp, #24]
   163d8:	str	r2, [sp, #20]
   163dc:	ldr	r0, [r4, #48]	; 0x30
   163e0:	beq	16514 <__assert_fail@plt+0x4f2c>
   163e4:	cmn	r0, #1
   163e8:	bne	16928 <__assert_fail@plt+0x5340>
   163ec:	movw	r1, #58117	; 0xe305
   163f0:	movt	r1, #1
   163f4:	mov	r0, #0
   163f8:	mov	r2, #5
   163fc:	bl	11348 <dcgettext@plt>
   16400:	ldr	r6, [r4]
   16404:	movw	r1, #56578	; 0xdd02
   16408:	mov	r7, r0
   1640c:	movt	r1, #1
   16410:	mov	r0, r6
   16414:	bl	112b8 <strcmp@plt>
   16418:	cmp	r0, #0
   1641c:	bne	16438 <__assert_fail@plt+0x4e50>
   16420:	movw	r1, #57375	; 0xe01f
   16424:	mov	r0, #0
   16428:	mov	r2, #5
   1642c:	movt	r1, #1
   16430:	bl	11348 <dcgettext@plt>
   16434:	mov	r6, r0
   16438:	mov	r0, #4
   1643c:	mov	r1, r6
   16440:	bl	1a668 <__assert_fail@plt+0x9080>
   16444:	mov	r3, r0
   16448:	mov	r0, #0
   1644c:	mov	r1, #0
   16450:	mov	r2, r7
   16454:	bl	113e4 <error@plt>
   16458:	add	r1, r4, #8
   1645c:	mov	r6, #0
   16460:	str	r9, [r4, #48]	; 0x30
   16464:	add	r0, r5, #80	; 0x50
   16468:	add	r2, r4, #16
   1646c:	cmp	r8, #0
   16470:	add	r3, r4, #72	; 0x48
   16474:	str	r6, [r1]
   16478:	str	r6, [r1, #4]
   1647c:	ldrd	r0, [r0]
   16480:	strd	r0, [r2]
   16484:	ldr	r0, [sp, #32]
   16488:	ldr	r1, [sp, #36]	; 0x24
   1648c:	ldr	r2, [sp, #24]
   16490:	strd	r0, [r2]
   16494:	ldrd	r0, [sl]
   16498:	ldr	r2, [sp, #20]
   1649c:	strd	r0, [r2]
   164a0:	movw	r1, #56578	; 0xdd02
   164a4:	ldr	r0, [sp, #48]	; 0x30
   164a8:	ldr	sl, [sp, #28]
   164ac:	mvneq	sl, #0
   164b0:	movt	r1, #1
   164b4:	str	sl, [r4, #56]	; 0x38
   164b8:	str	r0, [r4, #40]	; 0x28
   164bc:	str	r6, [r3]
   164c0:	str	r6, [r3, #4]
   164c4:	strb	r6, [r4, #44]	; 0x2c
   164c8:	ldr	r4, [r4]
   164cc:	mov	r0, r4
   164d0:	bl	112b8 <strcmp@plt>
   164d4:	cmp	r0, #0
   164d8:	bne	164f4 <__assert_fail@plt+0x4f0c>
   164dc:	movw	r1, #57375	; 0xe01f
   164e0:	mov	r0, #0
   164e4:	mov	r2, #5
   164e8:	movt	r1, #1
   164ec:	bl	11348 <dcgettext@plt>
   164f0:	mov	r4, r0
   164f4:	mov	r0, r9
   164f8:	mov	r2, #0
   164fc:	mov	r3, #0
   16500:	str	r6, [sp]
   16504:	str	r4, [sp, #4]
   16508:	bl	15eac <__assert_fail@plt+0x48c4>
   1650c:	sub	sp, fp, #28
   16510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16514:	cmn	r0, #1
   16518:	beq	16774 <__assert_fail@plt+0x518c>
   1651c:	ldr	r7, [sl]
   16520:	ldr	r1, [sl, #4]
   16524:	ldm	r2, {r0, r3}
   16528:	eor	r1, r3, r1
   1652c:	eor	r0, r0, r7
   16530:	orrs	r0, r0, r1
   16534:	bne	1666c <__assert_fail@plt+0x5084>
   16538:	ldrd	r0, [r6]
   1653c:	ldr	r7, [sp, #32]
   16540:	ldr	r3, [sp, #36]	; 0x24
   16544:	eor	r1, r1, r3
   16548:	eor	r0, r0, r7
   1654c:	orrs	r0, r0, r1
   16550:	bne	1666c <__assert_fail@plt+0x5084>
   16554:	ldr	r4, [r4]
   16558:	movw	r1, #56578	; 0xdd02
   1655c:	movt	r1, #1
   16560:	mov	r0, r4
   16564:	bl	112b8 <strcmp@plt>
   16568:	cmp	r0, #0
   1656c:	bne	16588 <__assert_fail@plt+0x4fa0>
   16570:	movw	r1, #57375	; 0xe01f
   16574:	mov	r0, #0
   16578:	mov	r2, #5
   1657c:	movt	r1, #1
   16580:	bl	11348 <dcgettext@plt>
   16584:	mov	r4, r0
   16588:	cmp	r9, #0
   1658c:	beq	165e4 <__assert_fail@plt+0x4ffc>
   16590:	mov	r0, r9
   16594:	bl	115d0 <close@plt>
   16598:	cmp	r0, #0
   1659c:	beq	165e4 <__assert_fail@plt+0x4ffc>
   165a0:	bl	114b0 <__errno_location@plt>
   165a4:	movw	r1, #57546	; 0xe0ca
   165a8:	ldr	r5, [r0]
   165ac:	mov	r0, #0
   165b0:	mov	r2, #5
   165b4:	movt	r1, #1
   165b8:	bl	11348 <dcgettext@plt>
   165bc:	mov	r6, r0
   165c0:	mov	r0, #4
   165c4:	mov	r1, r4
   165c8:	bl	1a668 <__assert_fail@plt+0x9080>
   165cc:	mov	r3, r0
   165d0:	mov	r0, #0
   165d4:	mov	r1, r5
   165d8:	mov	r2, r6
   165dc:	str	r9, [sp]
   165e0:	bl	113e4 <error@plt>
   165e4:	sub	sp, fp, #28
   165e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165ec:	movw	r1, #58053	; 0xe2c5
   165f0:	mvn	r0, #0
   165f4:	mov	r2, #5
   165f8:	movt	r1, #1
   165fc:	str	r0, [r4, #52]	; 0x34
   16600:	mov	r0, #0
   16604:	bl	11348 <dcgettext@plt>
   16608:	ldr	r7, [r4]
   1660c:	movw	r1, #56578	; 0xdd02
   16610:	mov	r6, r0
   16614:	movt	r1, #1
   16618:	mov	r0, r7
   1661c:	bl	112b8 <strcmp@plt>
   16620:	cmp	r0, #0
   16624:	bne	16640 <__assert_fail@plt+0x5058>
   16628:	movw	r1, #57375	; 0xe01f
   1662c:	mov	r0, #0
   16630:	mov	r2, #5
   16634:	movt	r1, #1
   16638:	bl	11348 <dcgettext@plt>
   1663c:	mov	r7, r0
   16640:	mov	r0, #4
   16644:	mov	r1, r7
   16648:	bl	1a668 <__assert_fail@plt+0x9080>
   1664c:	mov	r3, r0
   16650:	mov	r0, #0
   16654:	mov	r1, #0
   16658:	mov	r2, r6
   1665c:	bl	113e4 <error@plt>
   16660:	movw	r0, #257	; 0x101
   16664:	strh	r0, [r4, #44]	; 0x2c
   16668:	b	167a0 <__assert_fail@plt+0x51b8>
   1666c:	movw	r1, #58179	; 0xe343
   16670:	mov	r0, #0
   16674:	mov	r2, #5
   16678:	movt	r1, #1
   1667c:	bl	11348 <dcgettext@plt>
   16680:	ldr	r6, [r4]
   16684:	movw	r1, #56578	; 0xdd02
   16688:	mov	r7, r0
   1668c:	movt	r1, #1
   16690:	mov	r0, r6
   16694:	bl	112b8 <strcmp@plt>
   16698:	cmp	r0, #0
   1669c:	bne	166b8 <__assert_fail@plt+0x50d0>
   166a0:	movw	r1, #57375	; 0xe01f
   166a4:	mov	r0, #0
   166a8:	mov	r2, #5
   166ac:	movt	r1, #1
   166b0:	bl	11348 <dcgettext@plt>
   166b4:	mov	r6, r0
   166b8:	mov	r0, #4
   166bc:	mov	r1, r6
   166c0:	bl	1a668 <__assert_fail@plt+0x9080>
   166c4:	mov	r3, r0
   166c8:	mov	r0, #0
   166cc:	mov	r1, #0
   166d0:	mov	r2, r7
   166d4:	bl	113e4 <error@plt>
   166d8:	ldr	r6, [r4]
   166dc:	movw	r1, #56578	; 0xdd02
   166e0:	ldr	r7, [r4, #48]	; 0x30
   166e4:	movt	r1, #1
   166e8:	mov	r0, r6
   166ec:	bl	112b8 <strcmp@plt>
   166f0:	cmp	r0, #0
   166f4:	bne	16710 <__assert_fail@plt+0x5128>
   166f8:	movw	r1, #57375	; 0xe01f
   166fc:	mov	r0, #0
   16700:	mov	r2, #5
   16704:	movt	r1, #1
   16708:	bl	11348 <dcgettext@plt>
   1670c:	mov	r6, r0
   16710:	add	r0, r7, #1
   16714:	cmp	r0, #2
   16718:	bcc	16458 <__assert_fail@plt+0x4e70>
   1671c:	mov	r0, r7
   16720:	bl	115d0 <close@plt>
   16724:	cmp	r0, #0
   16728:	beq	16458 <__assert_fail@plt+0x4e70>
   1672c:	bl	114b0 <__errno_location@plt>
   16730:	ldr	r0, [r0]
   16734:	movw	r1, #57546	; 0xe0ca
   16738:	mov	r2, #5
   1673c:	movt	r1, #1
   16740:	str	r0, [sp, #16]
   16744:	mov	r0, #0
   16748:	bl	11348 <dcgettext@plt>
   1674c:	str	r0, [sp, #12]
   16750:	mov	r0, #4
   16754:	mov	r1, r6
   16758:	bl	1a668 <__assert_fail@plt+0x9080>
   1675c:	ldr	r1, [sp, #16]
   16760:	ldr	r2, [sp, #12]
   16764:	mov	r3, r0
   16768:	str	r7, [sp]
   1676c:	mov	r0, #0
   16770:	b	16454 <__assert_fail@plt+0x4e6c>
   16774:	movw	r1, #58142	; 0xe31e
   16778:	movt	r1, #1
   1677c:	b	163f4 <__assert_fail@plt+0x4e0c>
   16780:	movw	r0, #55494	; 0xd8c6
   16784:	movt	r0, #1
   16788:	str	r0, [sp]
   1678c:	mov	r0, #0
   16790:	mov	r1, #0
   16794:	mov	r2, r6
   16798:	mov	r3, r7
   1679c:	bl	113e4 <error@plt>
   167a0:	ldr	r6, [r4]
   167a4:	movw	r1, #56578	; 0xdd02
   167a8:	movt	r1, #1
   167ac:	mov	r0, r6
   167b0:	bl	112b8 <strcmp@plt>
   167b4:	cmp	r0, #0
   167b8:	beq	16820 <__assert_fail@plt+0x5238>
   167bc:	add	r0, r9, #1
   167c0:	cmp	r0, #2
   167c4:	bcc	16844 <__assert_fail@plt+0x525c>
   167c8:	mov	r0, r9
   167cc:	bl	115d0 <close@plt>
   167d0:	cmp	r0, #0
   167d4:	beq	16844 <__assert_fail@plt+0x525c>
   167d8:	bl	114b0 <__errno_location@plt>
   167dc:	movw	r1, #57546	; 0xe0ca
   167e0:	ldr	r7, [r0]
   167e4:	mov	r0, #0
   167e8:	mov	r2, #5
   167ec:	movt	r1, #1
   167f0:	bl	11348 <dcgettext@plt>
   167f4:	mov	r5, r0
   167f8:	mov	r0, #4
   167fc:	mov	r1, r6
   16800:	bl	1a668 <__assert_fail@plt+0x9080>
   16804:	mov	r3, r0
   16808:	mov	r0, #0
   1680c:	mov	r1, r7
   16810:	mov	r2, r5
   16814:	str	r9, [sp]
   16818:	bl	113e4 <error@plt>
   1681c:	b	16844 <__assert_fail@plt+0x525c>
   16820:	movw	r1, #57375	; 0xe01f
   16824:	mov	r0, #0
   16828:	mov	r2, #5
   1682c:	movt	r1, #1
   16830:	bl	11348 <dcgettext@plt>
   16834:	mov	r6, r0
   16838:	add	r0, r9, #1
   1683c:	cmp	r0, #2
   16840:	bcs	167c8 <__assert_fail@plt+0x51e0>
   16844:	ldr	r6, [r4]
   16848:	movw	r1, #56578	; 0xdd02
   1684c:	ldr	r5, [r4, #48]	; 0x30
   16850:	movt	r1, #1
   16854:	mov	r0, r6
   16858:	bl	112b8 <strcmp@plt>
   1685c:	cmp	r0, #0
   16860:	beq	168d4 <__assert_fail@plt+0x52ec>
   16864:	add	r0, r5, #1
   16868:	cmp	r0, #2
   1686c:	bcc	168f8 <__assert_fail@plt+0x5310>
   16870:	mov	r0, r5
   16874:	bl	115d0 <close@plt>
   16878:	cmp	r0, #0
   1687c:	beq	168f8 <__assert_fail@plt+0x5310>
   16880:	bl	114b0 <__errno_location@plt>
   16884:	movw	r1, #57546	; 0xe0ca
   16888:	ldr	r8, [r0]
   1688c:	mov	r0, #0
   16890:	mov	r2, #5
   16894:	movt	r1, #1
   16898:	bl	11348 <dcgettext@plt>
   1689c:	mov	r7, r0
   168a0:	mov	r0, #4
   168a4:	mov	r1, r6
   168a8:	bl	1a668 <__assert_fail@plt+0x9080>
   168ac:	mov	r3, r0
   168b0:	mov	r0, #0
   168b4:	mov	r1, r8
   168b8:	mov	r2, r7
   168bc:	str	r5, [sp]
   168c0:	bl	113e4 <error@plt>
   168c4:	mvn	r0, #0
   168c8:	str	r0, [r4, #48]	; 0x30
   168cc:	sub	sp, fp, #28
   168d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168d4:	movw	r1, #57375	; 0xe01f
   168d8:	mov	r0, #0
   168dc:	mov	r2, #5
   168e0:	movt	r1, #1
   168e4:	bl	11348 <dcgettext@plt>
   168e8:	mov	r6, r0
   168ec:	add	r0, r5, #1
   168f0:	cmp	r0, #2
   168f4:	bcs	16870 <__assert_fail@plt+0x5288>
   168f8:	mvn	r0, #0
   168fc:	str	r0, [r4, #48]	; 0x30
   16900:	sub	sp, fp, #28
   16904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16908:	movw	r0, #57865	; 0xe209
   1690c:	movw	r1, #57619	; 0xe113
   16910:	movw	r3, #57885	; 0xe21d
   16914:	movw	r2, #994	; 0x3e2
   16918:	movt	r0, #1
   1691c:	movt	r1, #1
   16920:	movt	r3, #1
   16924:	bl	115e8 <__assert_fail@plt>
   16928:	movw	r0, #58105	; 0xe2f9
   1692c:	movw	r1, #57619	; 0xe113
   16930:	movw	r3, #57885	; 0xe21d
   16934:	movw	r2, #1071	; 0x42f
   16938:	movt	r0, #1
   1693c:	movt	r1, #1
   16940:	movt	r3, #1
   16944:	bl	115e8 <__assert_fail@plt>
   16948:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1694c:	add	fp, sp, #24
   16950:	sub	sp, sp, #112	; 0x70
   16954:	ldr	r7, [r0, #48]	; 0x30
   16958:	cmn	r7, #1
   1695c:	beq	16b88 <__assert_fail@plt+0x55a0>
   16960:	ldr	r5, [r0]
   16964:	mov	r6, r1
   16968:	movw	r1, #56578	; 0xdd02
   1696c:	mov	r4, r0
   16970:	movt	r1, #1
   16974:	mov	r0, r5
   16978:	bl	112b8 <strcmp@plt>
   1697c:	cmp	r0, #0
   16980:	bne	169a0 <__assert_fail@plt+0x53b8>
   16984:	movw	r1, #57375	; 0xe01f
   16988:	mov	r0, #0
   1698c:	mov	r2, #5
   16990:	movt	r1, #1
   16994:	bl	11348 <dcgettext@plt>
   16998:	ldr	r7, [r4, #48]	; 0x30
   1699c:	mov	r5, r0
   169a0:	add	r2, sp, #8
   169a4:	mov	r0, #3
   169a8:	mov	r1, r7
   169ac:	bl	1139c <__fxstat64@plt>
   169b0:	cmp	r0, #0
   169b4:	beq	16a38 <__assert_fail@plt+0x5450>
   169b8:	bl	114b0 <__errno_location@plt>
   169bc:	mov	r7, r0
   169c0:	ldr	r0, [r0]
   169c4:	str	r0, [r4, #52]	; 0x34
   169c8:	ldr	r6, [r4, #48]	; 0x30
   169cc:	add	r0, r6, #1
   169d0:	cmp	r0, #2
   169d4:	bcc	16a28 <__assert_fail@plt+0x5440>
   169d8:	mov	r0, r6
   169dc:	bl	115d0 <close@plt>
   169e0:	cmp	r0, #0
   169e4:	beq	16a28 <__assert_fail@plt+0x5440>
   169e8:	movw	r1, #57546	; 0xe0ca
   169ec:	ldr	r8, [r7]
   169f0:	mov	r0, #0
   169f4:	mov	r2, #5
   169f8:	movt	r1, #1
   169fc:	bl	11348 <dcgettext@plt>
   16a00:	mov	r7, r0
   16a04:	mov	r0, #4
   16a08:	mov	r1, r5
   16a0c:	bl	1a668 <__assert_fail@plt+0x9080>
   16a10:	mov	r3, r0
   16a14:	mov	r0, #0
   16a18:	mov	r1, r8
   16a1c:	mov	r2, r7
   16a20:	str	r6, [sp]
   16a24:	bl	113e4 <error@plt>
   16a28:	mvn	r0, #0
   16a2c:	str	r0, [r4, #48]	; 0x30
   16a30:	sub	sp, fp, #24
   16a34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16a38:	ldr	r0, [r4, #40]	; 0x28
   16a3c:	and	r0, r0, #61440	; 0xf000
   16a40:	cmp	r0, #32768	; 0x8000
   16a44:	bne	16b18 <__assert_fail@plt+0x5530>
   16a48:	add	ip, sp, #8
   16a4c:	mov	r7, r4
   16a50:	add	r3, ip, #48	; 0x30
   16a54:	ldr	r1, [r7, #8]!
   16a58:	ldr	r8, [r3]
   16a5c:	ldr	r2, [r7, #4]
   16a60:	ldr	r3, [r3, #4]
   16a64:	subs	r0, r8, r1
   16a68:	sbcs	r0, r3, r2
   16a6c:	bge	16ad4 <__assert_fail@plt+0x54ec>
   16a70:	movw	r1, #58221	; 0xe36d
   16a74:	mov	r0, #0
   16a78:	mov	r2, #5
   16a7c:	mov	r9, #0
   16a80:	movt	r1, #1
   16a84:	bl	11348 <dcgettext@plt>
   16a88:	mov	r8, r0
   16a8c:	mov	r0, #0
   16a90:	mov	r1, #3
   16a94:	mov	r2, r5
   16a98:	bl	1a8e4 <__assert_fail@plt+0x92fc>
   16a9c:	mov	r3, r0
   16aa0:	mov	r0, #0
   16aa4:	mov	r1, #0
   16aa8:	mov	r2, r8
   16aac:	bl	113e4 <error@plt>
   16ab0:	ldr	r0, [r4, #48]	; 0x30
   16ab4:	mov	r2, #0
   16ab8:	mov	r3, #0
   16abc:	str	r9, [sp]
   16ac0:	str	r5, [sp, #4]
   16ac4:	bl	15eac <__assert_fail@plt+0x48c4>
   16ac8:	str	r9, [r7]
   16acc:	str	r9, [r7, #4]
   16ad0:	b	16b18 <__assert_fail@plt+0x5530>
   16ad4:	eor	r0, r8, r1
   16ad8:	eor	r1, r3, r2
   16adc:	orrs	r0, r0, r1
   16ae0:	bne	16b18 <__assert_fail@plt+0x5530>
   16ae4:	add	r0, ip, #80	; 0x50
   16ae8:	ldrd	r2, [r4, #16]
   16aec:	mov	r7, #0
   16af0:	ldrd	r0, [r0]
   16af4:	cmp	r2, r0
   16af8:	mov	r0, #0
   16afc:	movwgt	r0, #1
   16b00:	sublt	r0, r0, #1
   16b04:	cmp	r3, r1
   16b08:	movwgt	r7, #1
   16b0c:	sublt	r7, r7, #1
   16b10:	cmn	r7, r0, lsl #1
   16b14:	beq	16b88 <__assert_fail@plt+0x55a0>
   16b18:	movw	r0, #61888	; 0xf1c0
   16b1c:	movt	r0, #2
   16b20:	ldrb	r1, [r0, #2]
   16b24:	mov	r0, #0
   16b28:	cmp	r1, #1
   16b2c:	bne	16b3c <__assert_fail@plt+0x5554>
   16b30:	ldr	r0, [r6]
   16b34:	subs	r0, r0, r4
   16b38:	movwne	r0, #1
   16b3c:	ldr	r2, [r4, #48]	; 0x30
   16b40:	mvn	r1, #0
   16b44:	str	r1, [sp]
   16b48:	str	r1, [sp, #4]
   16b4c:	mov	r1, r5
   16b50:	bl	15c24 <__assert_fail@plt+0x463c>
   16b54:	ldrd	r2, [r4, #8]
   16b58:	adds	r2, r2, r0
   16b5c:	adc	r3, r3, r1
   16b60:	orrs	r0, r0, r1
   16b64:	strd	r2, [r4, #8]
   16b68:	beq	16b88 <__assert_fail@plt+0x55a0>
   16b6c:	movw	r0, #61876	; 0xf1b4
   16b70:	str	r4, [r6]
   16b74:	movt	r0, #2
   16b78:	ldr	r0, [r0]
   16b7c:	bl	11378 <fflush_unlocked@plt>
   16b80:	cmp	r0, #0
   16b84:	bne	16b90 <__assert_fail@plt+0x55a8>
   16b88:	sub	sp, fp, #24
   16b8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16b90:	bl	114b0 <__errno_location@plt>
   16b94:	movw	r1, #56064	; 0xdb00
   16b98:	ldr	r4, [r0]
   16b9c:	mov	r0, #0
   16ba0:	mov	r2, #5
   16ba4:	movt	r1, #1
   16ba8:	bl	11348 <dcgettext@plt>
   16bac:	mov	r2, r0
   16bb0:	mov	r0, #1
   16bb4:	mov	r1, r4
   16bb8:	bl	113e4 <error@plt>
   16bbc:	push	{fp, lr}
   16bc0:	mov	fp, sp
   16bc4:	mov	r0, #13
   16bc8:	bl	112ac <raise@plt>
   16bcc:	mov	r0, #1
   16bd0:	bl	1145c <exit@plt>
   16bd4:	mov	r0, #1
   16bd8:	b	116e8 <__assert_fail@plt+0x100>
   16bdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16be0:	add	fp, sp, #28
   16be4:	sub	sp, sp, #12
   16be8:	mov	r4, r3
   16bec:	mov	r9, r2
   16bf0:	mov	r7, r1
   16bf4:	mov	r8, r0
   16bf8:	bl	11474 <strlen@plt>
   16bfc:	ldr	r6, [r7]
   16c00:	cmp	r6, #0
   16c04:	beq	16cb0 <__assert_fail@plt+0x56c8>
   16c08:	mov	r5, r0
   16c0c:	cmp	r9, #0
   16c10:	beq	16cc0 <__assert_fail@plt+0x56d8>
   16c14:	add	r0, r7, #4
   16c18:	mvn	sl, #0
   16c1c:	mov	r7, #0
   16c20:	str	r9, [sp]
   16c24:	str	r0, [sp, #8]
   16c28:	mov	r0, #0
   16c2c:	str	r0, [sp, #4]
   16c30:	mov	r0, r9
   16c34:	b	16c78 <__assert_fail@plt+0x5690>
   16c38:	ldr	r0, [sp]
   16c3c:	mov	r1, r9
   16c40:	mov	r2, r4
   16c44:	mla	r0, sl, r4, r0
   16c48:	bl	11468 <bcmp@plt>
   16c4c:	ldr	r1, [sp, #4]
   16c50:	cmp	r0, #0
   16c54:	movwne	r0, #1
   16c58:	orr	r1, r1, r0
   16c5c:	str	r1, [sp, #4]
   16c60:	ldr	r0, [sp, #8]
   16c64:	add	r9, r9, r4
   16c68:	ldr	r6, [r0, r7, lsl #2]
   16c6c:	add	r7, r7, #1
   16c70:	cmp	r6, #0
   16c74:	beq	16d34 <__assert_fail@plt+0x574c>
   16c78:	mov	r0, r6
   16c7c:	mov	r1, r8
   16c80:	mov	r2, r5
   16c84:	bl	115b8 <strncmp@plt>
   16c88:	cmp	r0, #0
   16c8c:	bne	16c60 <__assert_fail@plt+0x5678>
   16c90:	mov	r0, r6
   16c94:	bl	11474 <strlen@plt>
   16c98:	cmp	r0, r5
   16c9c:	beq	16cb4 <__assert_fail@plt+0x56cc>
   16ca0:	cmn	sl, #1
   16ca4:	bne	16c38 <__assert_fail@plt+0x5650>
   16ca8:	mov	sl, r7
   16cac:	b	16c60 <__assert_fail@plt+0x5678>
   16cb0:	mvn	r7, #0
   16cb4:	mov	r0, r7
   16cb8:	sub	sp, fp, #28
   16cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cc0:	add	r4, r7, #4
   16cc4:	mov	r0, #0
   16cc8:	mvn	r9, #0
   16ccc:	mvn	sl, #0
   16cd0:	mov	r7, #0
   16cd4:	str	r0, [sp, #4]
   16cd8:	b	16d08 <__assert_fail@plt+0x5720>
   16cdc:	ldr	r1, [sp, #4]
   16ce0:	subs	r0, sl, r9
   16ce4:	movwne	r0, #1
   16ce8:	cmn	sl, #1
   16cec:	moveq	sl, r7
   16cf0:	orr	r1, r1, r0
   16cf4:	str	r1, [sp, #4]
   16cf8:	ldr	r6, [r4, r7, lsl #2]
   16cfc:	add	r7, r7, #1
   16d00:	cmp	r6, #0
   16d04:	beq	16d34 <__assert_fail@plt+0x574c>
   16d08:	mov	r0, r6
   16d0c:	mov	r1, r8
   16d10:	mov	r2, r5
   16d14:	bl	115b8 <strncmp@plt>
   16d18:	cmp	r0, #0
   16d1c:	bne	16cf8 <__assert_fail@plt+0x5710>
   16d20:	mov	r0, r6
   16d24:	bl	11474 <strlen@plt>
   16d28:	cmp	r0, r5
   16d2c:	bne	16cdc <__assert_fail@plt+0x56f4>
   16d30:	b	16cb4 <__assert_fail@plt+0x56cc>
   16d34:	ldr	r0, [sp, #4]
   16d38:	tst	r0, #1
   16d3c:	mvnne	sl, #1
   16d40:	mov	r0, sl
   16d44:	sub	sp, fp, #28
   16d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d4c:	push	{r4, r5, r6, r7, fp, lr}
   16d50:	add	fp, sp, #16
   16d54:	mov	r5, r0
   16d58:	ldr	r0, [r1]
   16d5c:	mvn	r4, #0
   16d60:	cmp	r0, #0
   16d64:	beq	16d90 <__assert_fail@plt+0x57a8>
   16d68:	add	r7, r1, #4
   16d6c:	mov	r6, #0
   16d70:	mov	r1, r5
   16d74:	bl	112b8 <strcmp@plt>
   16d78:	cmp	r0, #0
   16d7c:	beq	16d98 <__assert_fail@plt+0x57b0>
   16d80:	ldr	r0, [r7, r6, lsl #2]
   16d84:	add	r6, r6, #1
   16d88:	cmp	r0, #0
   16d8c:	bne	16d70 <__assert_fail@plt+0x5788>
   16d90:	mov	r0, r4
   16d94:	pop	{r4, r5, r6, r7, fp, pc}
   16d98:	mov	r0, r6
   16d9c:	pop	{r4, r5, r6, r7, fp, pc}
   16da0:	push	{r4, r5, r6, sl, fp, lr}
   16da4:	add	fp, sp, #16
   16da8:	sub	sp, sp, #8
   16dac:	mov	r5, r0
   16db0:	movw	r0, #58671	; 0xe52f
   16db4:	mov	r4, r1
   16db8:	movw	r1, #58698	; 0xe54a
   16dbc:	cmn	r2, #1
   16dc0:	mov	r2, #5
   16dc4:	movt	r0, #1
   16dc8:	movt	r1, #1
   16dcc:	moveq	r1, r0
   16dd0:	mov	r0, #0
   16dd4:	bl	11348 <dcgettext@plt>
   16dd8:	mov	r6, r0
   16ddc:	mov	r0, #0
   16de0:	mov	r1, #8
   16de4:	mov	r2, r4
   16de8:	bl	1a5c0 <__assert_fail@plt+0x8fd8>
   16dec:	mov	r4, r0
   16df0:	mov	r0, #1
   16df4:	mov	r1, r5
   16df8:	bl	1ab80 <__assert_fail@plt+0x9598>
   16dfc:	str	r0, [sp]
   16e00:	mov	r0, #0
   16e04:	mov	r1, #0
   16e08:	mov	r2, r6
   16e0c:	mov	r3, r4
   16e10:	bl	113e4 <error@plt>
   16e14:	sub	sp, fp, #16
   16e18:	pop	{r4, r5, r6, sl, fp, pc}
   16e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e20:	add	fp, sp, #28
   16e24:	sub	sp, sp, #4
   16e28:	mov	sl, r1
   16e2c:	movw	r1, #58727	; 0xe567
   16e30:	mov	r4, r2
   16e34:	mov	r6, r0
   16e38:	mov	r0, #0
   16e3c:	mov	r2, #5
   16e40:	mov	r8, #0
   16e44:	movt	r1, #1
   16e48:	bl	11348 <dcgettext@plt>
   16e4c:	movw	r1, #61872	; 0xf1b0
   16e50:	movt	r1, #2
   16e54:	ldr	r1, [r1]
   16e58:	bl	112a0 <fputs_unlocked@plt>
   16e5c:	ldr	r7, [r6]
   16e60:	cmp	r7, #0
   16e64:	beq	16f20 <__assert_fail@plt+0x5938>
   16e68:	add	r0, r6, #4
   16e6c:	mov	r9, #0
   16e70:	mov	r6, #0
   16e74:	str	r0, [sp]
   16e78:	cmp	r9, #0
   16e7c:	bne	16ed4 <__assert_fail@plt+0x58ec>
   16e80:	mov	r5, #0
   16e84:	movw	r0, #61872	; 0xf1b0
   16e88:	movt	r0, #2
   16e8c:	ldr	r6, [r0]
   16e90:	mov	r0, r7
   16e94:	bl	1ab90 <__assert_fail@plt+0x95a8>
   16e98:	movw	r2, #58748	; 0xe57c
   16e9c:	mov	r3, r0
   16ea0:	mov	r0, r6
   16ea4:	mov	r1, #1
   16ea8:	movt	r2, #1
   16eac:	bl	114f8 <__fprintf_chk@plt>
   16eb0:	add	r6, sl, r5
   16eb4:	ldr	r0, [sp]
   16eb8:	add	r8, r8, r4
   16ebc:	ldr	r7, [r0, -r9, lsl #2]
   16ec0:	sub	r9, r9, #1
   16ec4:	cmp	r7, #0
   16ec8:	beq	16f20 <__assert_fail@plt+0x5938>
   16ecc:	cmp	r9, #0
   16ed0:	beq	16e80 <__assert_fail@plt+0x5898>
   16ed4:	add	r1, sl, r8
   16ed8:	mov	r0, r6
   16edc:	mov	r2, r4
   16ee0:	bl	11468 <bcmp@plt>
   16ee4:	cmp	r0, #0
   16ee8:	mov	r5, r8
   16eec:	bne	16e84 <__assert_fail@plt+0x589c>
   16ef0:	movw	r0, #61872	; 0xf1b0
   16ef4:	movt	r0, #2
   16ef8:	ldr	r5, [r0]
   16efc:	mov	r0, r7
   16f00:	bl	1ab90 <__assert_fail@plt+0x95a8>
   16f04:	movw	r2, #58756	; 0xe584
   16f08:	mov	r3, r0
   16f0c:	mov	r0, r5
   16f10:	mov	r1, #1
   16f14:	movt	r2, #1
   16f18:	bl	114f8 <__fprintf_chk@plt>
   16f1c:	b	16eb4 <__assert_fail@plt+0x58cc>
   16f20:	movw	r0, #61872	; 0xf1b0
   16f24:	movt	r0, #2
   16f28:	ldr	r0, [r0]
   16f2c:	ldr	r1, [r0, #20]
   16f30:	ldr	r2, [r0, #24]
   16f34:	cmp	r1, r2
   16f38:	addcc	r2, r1, #1
   16f3c:	strcc	r2, [r0, #20]
   16f40:	movcc	r0, #10
   16f44:	strbcc	r0, [r1]
   16f48:	subcc	sp, fp, #28
   16f4c:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f50:	mov	r1, #10
   16f54:	sub	sp, fp, #28
   16f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f5c:	b	11540 <__overflow@plt>
   16f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f64:	add	fp, sp, #28
   16f68:	sub	sp, sp, #12
   16f6c:	mov	sl, r0
   16f70:	ldr	r0, [fp, #16]
   16f74:	ldr	r9, [fp, #8]
   16f78:	mov	r5, r3
   16f7c:	mov	r8, r2
   16f80:	mov	r6, r1
   16f84:	cmp	r0, #0
   16f88:	beq	16fb8 <__assert_fail@plt+0x59d0>
   16f8c:	mov	r0, r6
   16f90:	mov	r1, r8
   16f94:	mov	r2, r5
   16f98:	mov	r3, r9
   16f9c:	bl	16bdc <__assert_fail@plt+0x55f4>
   16fa0:	mov	r4, r0
   16fa4:	cmn	r4, #1
   16fa8:	ble	17008 <__assert_fail@plt+0x5a20>
   16fac:	mov	r0, r4
   16fb0:	sub	sp, fp, #28
   16fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fb8:	ldr	r0, [r8]
   16fbc:	movw	r7, #58671	; 0xe52f
   16fc0:	str	r5, [sp, #8]
   16fc4:	movt	r7, #1
   16fc8:	cmp	r0, #0
   16fcc:	beq	17020 <__assert_fail@plt+0x5a38>
   16fd0:	add	r5, r8, #4
   16fd4:	mov	r4, #0
   16fd8:	mov	r1, r6
   16fdc:	bl	112b8 <strcmp@plt>
   16fe0:	cmp	r0, #0
   16fe4:	beq	16ffc <__assert_fail@plt+0x5a14>
   16fe8:	ldr	r0, [r5, r4, lsl #2]
   16fec:	add	r4, r4, #1
   16ff0:	cmp	r0, #0
   16ff4:	bne	16fd8 <__assert_fail@plt+0x59f0>
   16ff8:	b	17020 <__assert_fail@plt+0x5a38>
   16ffc:	ldr	r5, [sp, #8]
   17000:	cmn	r4, #1
   17004:	bgt	16fac <__assert_fail@plt+0x59c4>
   17008:	movw	r0, #58671	; 0xe52f
   1700c:	movw	r7, #58698	; 0xe54a
   17010:	str	r5, [sp, #8]
   17014:	movt	r0, #1
   17018:	movt	r7, #1
   1701c:	moveq	r7, r0
   17020:	ldr	r5, [fp, #12]
   17024:	mov	r0, #0
   17028:	mov	r1, r7
   1702c:	mov	r2, #5
   17030:	bl	11348 <dcgettext@plt>
   17034:	mov	r4, r0
   17038:	mov	r0, #0
   1703c:	mov	r1, #8
   17040:	mov	r2, r6
   17044:	bl	1a5c0 <__assert_fail@plt+0x8fd8>
   17048:	mov	r6, r0
   1704c:	mov	r0, #1
   17050:	mov	r1, sl
   17054:	bl	1ab80 <__assert_fail@plt+0x9598>
   17058:	str	r0, [sp]
   1705c:	mov	r0, #0
   17060:	mov	r1, #0
   17064:	mov	r2, r4
   17068:	mov	r3, r6
   1706c:	bl	113e4 <error@plt>
   17070:	ldr	r1, [sp, #8]
   17074:	mov	r0, r8
   17078:	mov	r2, r9
   1707c:	bl	16e1c <__assert_fail@plt+0x5834>
   17080:	blx	r5
   17084:	mvn	r4, #0
   17088:	mov	r0, r4
   1708c:	sub	sp, fp, #28
   17090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17094:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17098:	add	fp, sp, #24
   1709c:	ldr	r6, [r1]
   170a0:	cmp	r6, #0
   170a4:	beq	17108 <__assert_fail@plt+0x5b20>
   170a8:	mov	r8, r1
   170ac:	mov	r7, r2
   170b0:	mov	r1, r2
   170b4:	mov	r2, r3
   170b8:	mov	r4, r3
   170bc:	mov	r9, r0
   170c0:	bl	11468 <bcmp@plt>
   170c4:	cmp	r0, #0
   170c8:	beq	17100 <__assert_fail@plt+0x5b18>
   170cc:	add	r7, r7, r4
   170d0:	add	r5, r8, #4
   170d4:	ldr	r6, [r5]
   170d8:	cmp	r6, #0
   170dc:	beq	17108 <__assert_fail@plt+0x5b20>
   170e0:	mov	r0, r9
   170e4:	mov	r1, r7
   170e8:	mov	r2, r4
   170ec:	bl	11468 <bcmp@plt>
   170f0:	add	r7, r7, r4
   170f4:	add	r5, r5, #4
   170f8:	cmp	r0, #0
   170fc:	bne	170d4 <__assert_fail@plt+0x5aec>
   17100:	mov	r0, r6
   17104:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17108:	mov	r6, #0
   1710c:	mov	r0, r6
   17110:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17114:	sub	r0, r0, #1
   17118:	ldrb	r3, [r0, #1]!
   1711c:	cmp	r3, #47	; 0x2f
   17120:	beq	17118 <__assert_fail@plt+0x5b30>
   17124:	mov	r2, #0
   17128:	mov	r1, r0
   1712c:	uxtb	r3, r3
   17130:	cmp	r3, #47	; 0x2f
   17134:	bne	1714c <__assert_fail@plt+0x5b64>
   17138:	ldrb	r3, [r1, #1]!
   1713c:	mov	r2, #1
   17140:	uxtb	r3, r3
   17144:	cmp	r3, #47	; 0x2f
   17148:	beq	17138 <__assert_fail@plt+0x5b50>
   1714c:	cmp	r3, #0
   17150:	bxeq	lr
   17154:	tst	r2, #1
   17158:	mov	r2, #0
   1715c:	movne	r0, r1
   17160:	ldrb	r3, [r1, #1]!
   17164:	uxtb	r3, r3
   17168:	cmp	r3, #47	; 0x2f
   1716c:	bne	1714c <__assert_fail@plt+0x5b64>
   17170:	b	17138 <__assert_fail@plt+0x5b50>
   17174:	push	{r4, sl, fp, lr}
   17178:	add	fp, sp, #8
   1717c:	mov	r4, r0
   17180:	bl	11474 <strlen@plt>
   17184:	mov	r1, r0
   17188:	sub	r2, r4, #1
   1718c:	mov	r0, r1
   17190:	cmp	r1, #2
   17194:	bcc	171a8 <__assert_fail@plt+0x5bc0>
   17198:	ldrb	r3, [r2, r0]
   1719c:	sub	r1, r0, #1
   171a0:	cmp	r3, #47	; 0x2f
   171a4:	beq	1718c <__assert_fail@plt+0x5ba4>
   171a8:	pop	{r4, sl, fp, pc}
   171ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   171b0:	add	fp, sp, #24
   171b4:	vpush	{d8}
   171b8:	sub	sp, sp, #8
   171bc:	mov	r4, r1
   171c0:	add	r1, sp, #4
   171c4:	mov	r5, r0
   171c8:	bl	114e0 <strtod@plt>
   171cc:	ldr	r7, [sp, #4]
   171d0:	vmov.f64	d8, d0
   171d4:	ldrb	r0, [r7]
   171d8:	cmp	r0, #0
   171dc:	beq	17218 <__assert_fail@plt+0x5c30>
   171e0:	bl	114b0 <__errno_location@plt>
   171e4:	ldr	r8, [r0]
   171e8:	mov	r6, r0
   171ec:	mov	r1, sp
   171f0:	mov	r0, r5
   171f4:	bl	1c888 <__assert_fail@plt+0xb2a0>
   171f8:	ldr	r0, [sp]
   171fc:	cmp	r7, r0
   17200:	bcs	17214 <__assert_fail@plt+0x5c2c>
   17204:	str	r0, [sp, #4]
   17208:	mov	r7, r0
   1720c:	vmov.f64	d8, d0
   17210:	b	17218 <__assert_fail@plt+0x5c30>
   17214:	str	r8, [r6]
   17218:	cmp	r4, #0
   1721c:	vmov.f64	d0, d8
   17220:	strne	r7, [r4]
   17224:	sub	sp, fp, #32
   17228:	vpop	{d8}
   1722c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17230:	movw	r1, #61904	; 0xf1d0
   17234:	movt	r1, #2
   17238:	str	r0, [r1, #4]
   1723c:	bx	lr
   17240:	movw	r1, #61904	; 0xf1d0
   17244:	movt	r1, #2
   17248:	strb	r0, [r1]
   1724c:	bx	lr
   17250:	push	{r4, r5, r6, sl, fp, lr}
   17254:	add	fp, sp, #16
   17258:	sub	sp, sp, #8
   1725c:	movw	r0, #61876	; 0xf1b4
   17260:	movt	r0, #2
   17264:	ldr	r0, [r0]
   17268:	bl	1c8fc <__assert_fail@plt+0xb314>
   1726c:	cmp	r0, #0
   17270:	beq	17298 <__assert_fail@plt+0x5cb0>
   17274:	movw	r5, #61904	; 0xf1d0
   17278:	movt	r5, #2
   1727c:	ldrb	r0, [r5]
   17280:	cmp	r0, #0
   17284:	beq	172c4 <__assert_fail@plt+0x5cdc>
   17288:	bl	114b0 <__errno_location@plt>
   1728c:	ldr	r0, [r0]
   17290:	cmp	r0, #32
   17294:	bne	172c4 <__assert_fail@plt+0x5cdc>
   17298:	movw	r0, #61872	; 0xf1b0
   1729c:	movt	r0, #2
   172a0:	ldr	r0, [r0]
   172a4:	bl	1c8fc <__assert_fail@plt+0xb314>
   172a8:	cmp	r0, #0
   172ac:	subeq	sp, fp, #16
   172b0:	popeq	{r4, r5, r6, sl, fp, pc}
   172b4:	movw	r0, #61784	; 0xf158
   172b8:	movt	r0, #2
   172bc:	ldr	r0, [r0]
   172c0:	bl	1130c <_exit@plt>
   172c4:	movw	r1, #56064	; 0xdb00
   172c8:	mov	r0, #0
   172cc:	mov	r2, #5
   172d0:	movt	r1, #1
   172d4:	bl	11348 <dcgettext@plt>
   172d8:	ldr	r6, [r5, #4]
   172dc:	mov	r4, r0
   172e0:	bl	114b0 <__errno_location@plt>
   172e4:	ldr	r5, [r0]
   172e8:	cmp	r6, #0
   172ec:	bne	17308 <__assert_fail@plt+0x5d20>
   172f0:	movw	r2, #58758	; 0xe586
   172f4:	mov	r0, #0
   172f8:	mov	r1, r5
   172fc:	mov	r3, r4
   17300:	movt	r2, #1
   17304:	b	17328 <__assert_fail@plt+0x5d40>
   17308:	mov	r0, r6
   1730c:	bl	1a808 <__assert_fail@plt+0x9220>
   17310:	movw	r2, #56582	; 0xdd06
   17314:	mov	r3, r0
   17318:	str	r4, [sp]
   1731c:	mov	r0, #0
   17320:	mov	r1, r5
   17324:	movt	r2, #1
   17328:	bl	113e4 <error@plt>
   1732c:	movw	r0, #61784	; 0xf158
   17330:	movt	r0, #2
   17334:	ldr	r0, [r0]
   17338:	bl	1130c <_exit@plt>
   1733c:	push	{r4, r5, r6, sl, fp, lr}
   17340:	add	fp, sp, #16
   17344:	mov	r5, r0
   17348:	mov	r4, r0
   1734c:	ldrb	r6, [r5], #-1
   17350:	bl	17114 <__assert_fail@plt+0x5b2c>
   17354:	sub	r2, r0, r4
   17358:	sub	r0, r6, #47	; 0x2f
   1735c:	clz	r0, r0
   17360:	lsr	r1, r0, #5
   17364:	mov	r0, r2
   17368:	cmp	r2, r1
   1736c:	bls	17380 <__assert_fail@plt+0x5d98>
   17370:	ldrb	r3, [r5, r0]
   17374:	sub	r2, r0, #1
   17378:	cmp	r3, #47	; 0x2f
   1737c:	beq	17364 <__assert_fail@plt+0x5d7c>
   17380:	pop	{r4, r5, r6, sl, fp, pc}
   17384:	push	{r4, r5, r6, sl, fp, lr}
   17388:	add	fp, sp, #16
   1738c:	mov	r6, r0
   17390:	mov	r4, r0
   17394:	ldrb	r5, [r6], #-1
   17398:	bl	17114 <__assert_fail@plt+0x5b2c>
   1739c:	sub	r1, r0, r4
   173a0:	sub	r0, r5, #47	; 0x2f
   173a4:	clz	r0, r0
   173a8:	lsr	r0, r0, #5
   173ac:	mov	r5, r1
   173b0:	cmp	r1, r0
   173b4:	bls	173c8 <__assert_fail@plt+0x5de0>
   173b8:	ldrb	r2, [r6, r5]
   173bc:	sub	r1, r5, #1
   173c0:	cmp	r2, #47	; 0x2f
   173c4:	beq	173ac <__assert_fail@plt+0x5dc4>
   173c8:	cmp	r5, #0
   173cc:	mov	r0, r5
   173d0:	addeq	r0, r0, #1
   173d4:	add	r0, r0, #1
   173d8:	bl	1c804 <__assert_fail@plt+0xb21c>
   173dc:	mov	r6, r0
   173e0:	cmp	r0, #0
   173e4:	beq	17410 <__assert_fail@plt+0x5e28>
   173e8:	mov	r0, r6
   173ec:	mov	r1, r4
   173f0:	mov	r2, r5
   173f4:	bl	11318 <memcpy@plt>
   173f8:	cmp	r5, #0
   173fc:	moveq	r0, #46	; 0x2e
   17400:	moveq	r5, #1
   17404:	strbeq	r0, [r6]
   17408:	mov	r0, #0
   1740c:	strb	r0, [r6, r5]
   17410:	mov	r0, r6
   17414:	pop	{r4, r5, r6, sl, fp, pc}
   17418:	sub	sp, sp, #8
   1741c:	push	{r4, r5, r6, r7, fp, lr}
   17420:	add	fp, sp, #16
   17424:	sub	sp, sp, #8
   17428:	mov	r5, r0
   1742c:	add	r0, fp, #8
   17430:	cmp	r1, #11
   17434:	str	r2, [fp, #8]
   17438:	str	r3, [fp, #12]
   1743c:	str	r0, [sp, #4]
   17440:	bhi	1747c <__assert_fail@plt+0x5e94>
   17444:	mov	r0, #1
   17448:	movw	r2, #1300	; 0x514
   1744c:	tst	r2, r0, lsl r1
   17450:	bne	1753c <__assert_fail@plt+0x5f54>
   17454:	movw	r2, #2570	; 0xa0a
   17458:	tst	r2, r0, lsl r1
   1745c:	bne	174a4 <__assert_fail@plt+0x5ebc>
   17460:	cmp	r1, #0
   17464:	bne	1747c <__assert_fail@plt+0x5e94>
   17468:	ldr	r0, [sp, #4]
   1746c:	add	r1, r0, #4
   17470:	str	r1, [sp, #4]
   17474:	mov	r1, #0
   17478:	b	17548 <__assert_fail@plt+0x5f60>
   1747c:	sub	r0, r1, #1024	; 0x400
   17480:	cmp	r0, #10
   17484:	bhi	1753c <__assert_fail@plt+0x5f54>
   17488:	mov	r2, #1
   1748c:	movw	r3, #645	; 0x285
   17490:	tst	r3, r2, lsl r0
   17494:	bne	1753c <__assert_fail@plt+0x5f54>
   17498:	movw	r3, #1282	; 0x502
   1749c:	tst	r3, r2, lsl r0
   174a0:	beq	174b0 <__assert_fail@plt+0x5ec8>
   174a4:	mov	r0, r5
   174a8:	bl	11534 <fcntl64@plt>
   174ac:	b	17554 <__assert_fail@plt+0x5f6c>
   174b0:	cmp	r0, #6
   174b4:	bne	1753c <__assert_fail@plt+0x5f54>
   174b8:	ldr	r0, [sp, #4]
   174bc:	movw	r7, #61912	; 0xf1d8
   174c0:	movt	r7, #2
   174c4:	add	r1, r0, #4
   174c8:	str	r1, [sp, #4]
   174cc:	ldr	r6, [r0]
   174d0:	ldr	r0, [r7]
   174d4:	cmp	r0, #0
   174d8:	bmi	17578 <__assert_fail@plt+0x5f90>
   174dc:	mov	r0, r5
   174e0:	movw	r1, #1030	; 0x406
   174e4:	mov	r2, r6
   174e8:	bl	11534 <fcntl64@plt>
   174ec:	mov	r4, r0
   174f0:	cmn	r0, #1
   174f4:	bgt	1756c <__assert_fail@plt+0x5f84>
   174f8:	bl	114b0 <__errno_location@plt>
   174fc:	ldr	r0, [r0]
   17500:	cmp	r0, #22
   17504:	bne	1756c <__assert_fail@plt+0x5f84>
   17508:	mov	r0, r5
   1750c:	mov	r1, #0
   17510:	mov	r2, r6
   17514:	bl	11534 <fcntl64@plt>
   17518:	mov	r4, r0
   1751c:	cmp	r0, #0
   17520:	bmi	17558 <__assert_fail@plt+0x5f70>
   17524:	mvn	r0, #0
   17528:	str	r0, [r7]
   1752c:	mov	r0, #1
   17530:	cmp	r0, #0
   17534:	bne	175a4 <__assert_fail@plt+0x5fbc>
   17538:	b	17558 <__assert_fail@plt+0x5f70>
   1753c:	ldr	r0, [sp, #4]
   17540:	add	r2, r0, #4
   17544:	str	r2, [sp, #4]
   17548:	ldr	r2, [r0]
   1754c:	mov	r0, r5
   17550:	bl	11534 <fcntl64@plt>
   17554:	mov	r4, r0
   17558:	mov	r0, r4
   1755c:	sub	sp, fp, #16
   17560:	pop	{r4, r5, r6, r7, fp, lr}
   17564:	add	sp, sp, #8
   17568:	bx	lr
   1756c:	mov	r0, #1
   17570:	str	r0, [r7]
   17574:	b	17558 <__assert_fail@plt+0x5f70>
   17578:	mov	r0, r5
   1757c:	mov	r1, #0
   17580:	mov	r2, r6
   17584:	bl	11534 <fcntl64@plt>
   17588:	mov	r4, r0
   1758c:	ldr	r0, [r7]
   17590:	add	r0, r0, #1
   17594:	clz	r0, r0
   17598:	lsr	r0, r0, #5
   1759c:	cmp	r0, #0
   175a0:	beq	17558 <__assert_fail@plt+0x5f70>
   175a4:	cmp	r4, #0
   175a8:	bmi	17558 <__assert_fail@plt+0x5f70>
   175ac:	mov	r0, r4
   175b0:	mov	r1, #1
   175b4:	bl	11534 <fcntl64@plt>
   175b8:	cmp	r0, #0
   175bc:	bmi	175d8 <__assert_fail@plt+0x5ff0>
   175c0:	orr	r2, r0, #1
   175c4:	mov	r0, r4
   175c8:	mov	r1, #2
   175cc:	bl	11534 <fcntl64@plt>
   175d0:	cmn	r0, #1
   175d4:	bne	17558 <__assert_fail@plt+0x5f70>
   175d8:	bl	114b0 <__errno_location@plt>
   175dc:	ldr	r6, [r0]
   175e0:	mov	r5, r0
   175e4:	mov	r0, r4
   175e8:	bl	115d0 <close@plt>
   175ec:	str	r6, [r5]
   175f0:	mvn	r4, #0
   175f4:	b	17558 <__assert_fail@plt+0x5f70>
   175f8:	sub	sp, sp, #8
   175fc:	push	{fp, lr}
   17600:	mov	fp, sp
   17604:	sub	sp, sp, #8
   17608:	str	r2, [fp, #8]
   1760c:	str	r3, [fp, #12]
   17610:	tst	r1, #64	; 0x40
   17614:	mov	r2, #0
   17618:	ldrne	r2, [fp, #8]
   1761c:	bl	113f0 <open64@plt>
   17620:	bl	1ac0c <__assert_fail@plt+0x9624>
   17624:	mov	sp, fp
   17628:	pop	{fp, lr}
   1762c:	add	sp, sp, #8
   17630:	bx	lr
   17634:	push	{r4, r5, r6, sl, fp, lr}
   17638:	add	fp, sp, #16
   1763c:	mov	r4, r0
   17640:	bl	114b0 <__errno_location@plt>
   17644:	ldr	r6, [r0]
   17648:	mov	r5, r0
   1764c:	mov	r0, r4
   17650:	bl	112f4 <free@plt>
   17654:	str	r6, [r5]
   17658:	pop	{r4, r5, r6, sl, fp, pc}
   1765c:	andeq	r0, r0, r0
   17660:	ldr	r0, [r0, #8]
   17664:	bx	lr
   17668:	ldr	r0, [r0, #12]
   1766c:	bx	lr
   17670:	ldr	r0, [r0, #16]
   17674:	bx	lr
   17678:	ldm	r0, {r2, ip}
   1767c:	mov	r0, #0
   17680:	cmp	r2, ip
   17684:	bxcs	lr
   17688:	mov	r0, #0
   1768c:	ldr	r1, [r2]
   17690:	cmp	r1, #0
   17694:	bne	176b0 <__assert_fail@plt+0x60c8>
   17698:	add	r2, r2, #8
   1769c:	cmp	r2, ip
   176a0:	bcs	176dc <__assert_fail@plt+0x60f4>
   176a4:	ldr	r1, [r2]
   176a8:	cmp	r1, #0
   176ac:	beq	17698 <__assert_fail@plt+0x60b0>
   176b0:	mov	r3, #0
   176b4:	mov	r1, r2
   176b8:	ldr	r1, [r1, #4]
   176bc:	add	r3, r3, #1
   176c0:	cmp	r1, #0
   176c4:	bne	176b8 <__assert_fail@plt+0x60d0>
   176c8:	cmp	r3, r0
   176cc:	movhi	r0, r3
   176d0:	add	r2, r2, #8
   176d4:	cmp	r2, ip
   176d8:	bcc	176a4 <__assert_fail@plt+0x60bc>
   176dc:	bx	lr
   176e0:	push	{fp, lr}
   176e4:	mov	fp, sp
   176e8:	ldm	r0, {r3, ip}
   176ec:	mov	lr, #0
   176f0:	mov	r1, #0
   176f4:	cmp	r3, ip
   176f8:	bcs	1774c <__assert_fail@plt+0x6164>
   176fc:	mov	r1, #0
   17700:	mov	lr, #0
   17704:	ldr	r2, [r3]
   17708:	cmp	r2, #0
   1770c:	bne	17728 <__assert_fail@plt+0x6140>
   17710:	add	r3, r3, #8
   17714:	cmp	r3, ip
   17718:	bcs	1774c <__assert_fail@plt+0x6164>
   1771c:	ldr	r2, [r3]
   17720:	cmp	r2, #0
   17724:	beq	17710 <__assert_fail@plt+0x6128>
   17728:	mov	r2, r3
   1772c:	ldr	r2, [r2, #4]
   17730:	add	r1, r1, #1
   17734:	cmp	r2, #0
   17738:	bne	1772c <__assert_fail@plt+0x6144>
   1773c:	add	lr, lr, #1
   17740:	add	r3, r3, #8
   17744:	cmp	r3, ip
   17748:	bcc	1771c <__assert_fail@plt+0x6134>
   1774c:	ldr	r2, [r0, #12]
   17750:	cmp	lr, r2
   17754:	bne	1776c <__assert_fail@plt+0x6184>
   17758:	ldr	r2, [r0, #16]
   1775c:	mov	r0, #1
   17760:	cmp	r1, r2
   17764:	movne	r0, #0
   17768:	pop	{fp, pc}
   1776c:	mov	r0, #0
   17770:	pop	{fp, pc}
   17774:	nop	{0}
   17778:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1777c:	add	fp, sp, #24
   17780:	sub	sp, sp, #8
   17784:	ldr	r6, [r0]
   17788:	ldmib	r0, {r2, r7, r8}
   1778c:	ldr	r3, [r0, #16]
   17790:	mov	r4, r1
   17794:	mov	r5, #0
   17798:	cmp	r6, r2
   1779c:	bcs	177f4 <__assert_fail@plt+0x620c>
   177a0:	mov	r5, #0
   177a4:	ldr	r0, [r6]
   177a8:	cmp	r0, #0
   177ac:	bne	177c8 <__assert_fail@plt+0x61e0>
   177b0:	add	r6, r6, #8
   177b4:	cmp	r6, r2
   177b8:	bcs	177f4 <__assert_fail@plt+0x620c>
   177bc:	ldr	r0, [r6]
   177c0:	cmp	r0, #0
   177c4:	beq	177b0 <__assert_fail@plt+0x61c8>
   177c8:	mov	r0, #0
   177cc:	mov	r1, r6
   177d0:	ldr	r1, [r1, #4]
   177d4:	add	r0, r0, #1
   177d8:	cmp	r1, #0
   177dc:	bne	177d0 <__assert_fail@plt+0x61e8>
   177e0:	cmp	r0, r5
   177e4:	movhi	r5, r0
   177e8:	add	r6, r6, #8
   177ec:	cmp	r6, r2
   177f0:	bcc	177bc <__assert_fail@plt+0x61d4>
   177f4:	movw	r2, #58761	; 0xe589
   177f8:	mov	r0, r4
   177fc:	mov	r1, #1
   17800:	movt	r2, #1
   17804:	bl	114f8 <__fprintf_chk@plt>
   17808:	movw	r2, #58785	; 0xe5a1
   1780c:	mov	r0, r4
   17810:	mov	r1, #1
   17814:	mov	r3, r7
   17818:	movt	r2, #1
   1781c:	bl	114f8 <__fprintf_chk@plt>
   17820:	vmov	s0, r8
   17824:	vldr	d16, [pc, #76]	; 17878 <__assert_fail@plt+0x6290>
   17828:	movw	r2, #58809	; 0xe5b9
   1782c:	mov	r0, r4
   17830:	mov	r1, #1
   17834:	mov	r3, r8
   17838:	movt	r2, #1
   1783c:	vcvt.f64.u32	d17, s0
   17840:	vmov	s0, r7
   17844:	vcvt.f64.u32	d18, s0
   17848:	vmul.f64	d16, d17, d16
   1784c:	vdiv.f64	d16, d16, d18
   17850:	vstr	d16, [sp]
   17854:	bl	114f8 <__fprintf_chk@plt>
   17858:	movw	r2, #58842	; 0xe5da
   1785c:	mov	r0, r4
   17860:	mov	r1, #1
   17864:	mov	r3, r5
   17868:	movt	r2, #1
   1786c:	sub	sp, fp, #24
   17870:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17874:	b	114f8 <__fprintf_chk@plt>
   17878:	andeq	r0, r0, r0
   1787c:	subsmi	r0, r9, r0
   17880:	push	{r4, r5, r6, r7, fp, lr}
   17884:	add	fp, sp, #16
   17888:	mov	r4, r1
   1788c:	ldr	r1, [r0, #8]
   17890:	ldr	r2, [r0, #24]
   17894:	mov	r5, r0
   17898:	mov	r0, r4
   1789c:	blx	r2
   178a0:	ldr	r1, [r5, #8]
   178a4:	cmp	r0, r1
   178a8:	bcs	17910 <__assert_fail@plt+0x6328>
   178ac:	ldr	r7, [r5]
   178b0:	mov	r6, #0
   178b4:	ldr	r1, [r7, r0, lsl #3]!
   178b8:	cmp	r1, #0
   178bc:	cmpne	r7, #0
   178c0:	bne	178f0 <__assert_fail@plt+0x6308>
   178c4:	mov	r0, r6
   178c8:	pop	{r4, r5, r6, r7, fp, pc}
   178cc:	ldr	r2, [r5, #28]
   178d0:	mov	r0, r4
   178d4:	blx	r2
   178d8:	cmp	r0, #0
   178dc:	bne	17904 <__assert_fail@plt+0x631c>
   178e0:	ldr	r7, [r7, #4]
   178e4:	cmp	r7, #0
   178e8:	beq	178c4 <__assert_fail@plt+0x62dc>
   178ec:	ldr	r1, [r7]
   178f0:	cmp	r1, r4
   178f4:	bne	178cc <__assert_fail@plt+0x62e4>
   178f8:	mov	r6, r4
   178fc:	mov	r0, r6
   17900:	pop	{r4, r5, r6, r7, fp, pc}
   17904:	ldr	r6, [r7]
   17908:	mov	r0, r6
   1790c:	pop	{r4, r5, r6, r7, fp, pc}
   17910:	bl	115c4 <abort@plt>
   17914:	push	{fp, lr}
   17918:	mov	fp, sp
   1791c:	ldr	r1, [r0, #16]
   17920:	cmp	r1, #0
   17924:	beq	17944 <__assert_fail@plt+0x635c>
   17928:	ldm	r0, {r1, r2}
   1792c:	cmp	r1, r2
   17930:	bcs	1794c <__assert_fail@plt+0x6364>
   17934:	ldr	r0, [r1], #8
   17938:	cmp	r0, #0
   1793c:	beq	1792c <__assert_fail@plt+0x6344>
   17940:	pop	{fp, pc}
   17944:	mov	r0, #0
   17948:	pop	{fp, pc}
   1794c:	bl	115c4 <abort@plt>
   17950:	push	{r4, r5, fp, lr}
   17954:	add	fp, sp, #8
   17958:	mov	r5, r1
   1795c:	ldr	r1, [r0, #8]
   17960:	ldr	r2, [r0, #24]
   17964:	mov	r4, r0
   17968:	mov	r0, r5
   1796c:	blx	r2
   17970:	ldr	r1, [r4, #8]
   17974:	cmp	r0, r1
   17978:	bcs	179dc <__assert_fail@plt+0x63f4>
   1797c:	ldr	r1, [r4]
   17980:	add	r2, r1, r0, lsl #3
   17984:	ldr	r3, [r2]
   17988:	ldr	r2, [r2, #4]
   1798c:	cmp	r3, r5
   17990:	beq	179a0 <__assert_fail@plt+0x63b8>
   17994:	cmp	r2, #0
   17998:	bne	17984 <__assert_fail@plt+0x639c>
   1799c:	b	179b0 <__assert_fail@plt+0x63c8>
   179a0:	cmp	r2, #0
   179a4:	beq	179b0 <__assert_fail@plt+0x63c8>
   179a8:	ldr	r0, [r2]
   179ac:	pop	{r4, r5, fp, pc}
   179b0:	ldr	r2, [r4, #4]
   179b4:	add	r0, r1, r0, lsl #3
   179b8:	add	r1, r0, #8
   179bc:	cmp	r1, r2
   179c0:	bcs	179d4 <__assert_fail@plt+0x63ec>
   179c4:	ldr	r0, [r1], #8
   179c8:	cmp	r0, #0
   179cc:	beq	179bc <__assert_fail@plt+0x63d4>
   179d0:	pop	{r4, r5, fp, pc}
   179d4:	mov	r0, #0
   179d8:	pop	{r4, r5, fp, pc}
   179dc:	bl	115c4 <abort@plt>
   179e0:	push	{r4, r5, fp, lr}
   179e4:	add	fp, sp, #8
   179e8:	ldm	r0, {r5, lr}
   179ec:	mov	ip, r0
   179f0:	mov	r0, #0
   179f4:	cmp	r5, lr
   179f8:	popcs	{r4, r5, fp, pc}
   179fc:	mov	r0, #0
   17a00:	ldr	r3, [r5]
   17a04:	cmp	r3, #0
   17a08:	cmpne	r5, #0
   17a0c:	beq	17a18 <__assert_fail@plt+0x6430>
   17a10:	b	17a34 <__assert_fail@plt+0x644c>
   17a14:	ldr	lr, [ip, #4]
   17a18:	add	r5, r5, #8
   17a1c:	cmp	r5, lr
   17a20:	bcs	17a5c <__assert_fail@plt+0x6474>
   17a24:	ldr	r3, [r5]
   17a28:	cmp	r3, #0
   17a2c:	cmpne	r5, #0
   17a30:	beq	17a18 <__assert_fail@plt+0x6430>
   17a34:	mov	r3, r5
   17a38:	cmp	r0, r2
   17a3c:	bcs	17a5c <__assert_fail@plt+0x6474>
   17a40:	ldr	r4, [r3]
   17a44:	str	r4, [r1, r0, lsl #2]
   17a48:	add	r0, r0, #1
   17a4c:	ldr	r3, [r3, #4]
   17a50:	cmp	r3, #0
   17a54:	bne	17a38 <__assert_fail@plt+0x6450>
   17a58:	b	17a14 <__assert_fail@plt+0x642c>
   17a5c:	pop	{r4, r5, fp, pc}
   17a60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17a64:	add	fp, sp, #24
   17a68:	mov	r5, r1
   17a6c:	ldr	r4, [r0]
   17a70:	ldr	r1, [r0, #4]
   17a74:	mov	r6, #0
   17a78:	cmp	r4, r1
   17a7c:	bcs	17af8 <__assert_fail@plt+0x6510>
   17a80:	mov	r9, r2
   17a84:	mov	r8, r0
   17a88:	mov	r6, #0
   17a8c:	ldr	r0, [r4]
   17a90:	cmp	r0, #0
   17a94:	cmpne	r4, #0
   17a98:	beq	17aa4 <__assert_fail@plt+0x64bc>
   17a9c:	b	17ac0 <__assert_fail@plt+0x64d8>
   17aa0:	ldr	r1, [r8, #4]
   17aa4:	add	r4, r4, #8
   17aa8:	cmp	r4, r1
   17aac:	bcs	17af8 <__assert_fail@plt+0x6510>
   17ab0:	ldr	r0, [r4]
   17ab4:	cmp	r0, #0
   17ab8:	cmpne	r4, #0
   17abc:	beq	17aa4 <__assert_fail@plt+0x64bc>
   17ac0:	mov	r1, r9
   17ac4:	blx	r5
   17ac8:	cmp	r0, #0
   17acc:	beq	17af8 <__assert_fail@plt+0x6510>
   17ad0:	mov	r7, r4
   17ad4:	ldr	r7, [r7, #4]
   17ad8:	add	r6, r6, #1
   17adc:	cmp	r7, #0
   17ae0:	beq	17aa0 <__assert_fail@plt+0x64b8>
   17ae4:	ldr	r0, [r7]
   17ae8:	mov	r1, r9
   17aec:	blx	r5
   17af0:	cmp	r0, #0
   17af4:	bne	17ad4 <__assert_fail@plt+0x64ec>
   17af8:	mov	r0, r6
   17afc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b00:	ldrb	r2, [r0]
   17b04:	cmp	r2, #0
   17b08:	moveq	r0, #0
   17b0c:	bxeq	lr
   17b10:	add	r3, r0, #1
   17b14:	mov	r0, #0
   17b18:	rsb	r0, r0, r0, lsl #5
   17b1c:	uxtab	r0, r0, r2
   17b20:	udiv	r2, r0, r1
   17b24:	mls	r0, r2, r1, r0
   17b28:	ldrb	r2, [r3], #1
   17b2c:	cmp	r2, #0
   17b30:	bne	17b18 <__assert_fail@plt+0x6530>
   17b34:	bx	lr
   17b38:	movw	r1, #58872	; 0xe5f8
   17b3c:	movt	r1, #1
   17b40:	vld1.32	{d16-d17}, [r1]!
   17b44:	ldr	r1, [r1]
   17b48:	vst1.32	{d16-d17}, [r0]!
   17b4c:	str	r1, [r0]
   17b50:	bx	lr
   17b54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17b58:	add	fp, sp, #24
   17b5c:	movw	r9, #32136	; 0x7d88
   17b60:	cmp	r3, #0
   17b64:	movw	r5, #32116	; 0x7d74
   17b68:	mov	r6, r0
   17b6c:	mov	r0, #40	; 0x28
   17b70:	mov	r7, r1
   17b74:	movt	r9, #1
   17b78:	movne	r9, r3
   17b7c:	cmp	r2, #0
   17b80:	movt	r5, #1
   17b84:	movne	r5, r2
   17b88:	bl	1c804 <__assert_fail@plt+0xb21c>
   17b8c:	mov	r8, #0
   17b90:	cmp	r0, #0
   17b94:	beq	17d5c <__assert_fail@plt+0x6774>
   17b98:	mov	r4, r0
   17b9c:	movw	r0, #58872	; 0xe5f8
   17ba0:	cmp	r7, #0
   17ba4:	movt	r0, #1
   17ba8:	moveq	r7, r0
   17bac:	cmp	r7, r0
   17bb0:	str	r7, [r4, #20]
   17bb4:	beq	17c30 <__assert_fail@plt+0x6648>
   17bb8:	vldr	s2, [pc, #420]	; 17d64 <__assert_fail@plt+0x677c>
   17bbc:	vldr	s0, [r7, #8]
   17bc0:	vcmpe.f32	s0, s2
   17bc4:	vmrs	APSR_nzcv, fpscr
   17bc8:	ble	17cdc <__assert_fail@plt+0x66f4>
   17bcc:	vldr	s4, [pc, #404]	; 17d68 <__assert_fail@plt+0x6780>
   17bd0:	vcmpe.f32	s0, s4
   17bd4:	vmrs	APSR_nzcv, fpscr
   17bd8:	bpl	17cdc <__assert_fail@plt+0x66f4>
   17bdc:	vldr	s4, [pc, #392]	; 17d6c <__assert_fail@plt+0x6784>
   17be0:	vldr	s6, [r7, #12]
   17be4:	vcmpe.f32	s6, s4
   17be8:	vmrs	APSR_nzcv, fpscr
   17bec:	ble	17cdc <__assert_fail@plt+0x66f4>
   17bf0:	vldr	s4, [r7]
   17bf4:	vcmpe.f32	s4, #0.0
   17bf8:	vmrs	APSR_nzcv, fpscr
   17bfc:	blt	17cdc <__assert_fail@plt+0x66f4>
   17c00:	vadd.f32	s2, s4, s2
   17c04:	vcmpe.f32	s2, s0
   17c08:	vmrs	APSR_nzcv, fpscr
   17c0c:	bpl	17cdc <__assert_fail@plt+0x66f4>
   17c10:	vldr	s0, [r7, #4]
   17c14:	vmov.f32	s4, #112	; 0x3f800000  1.0
   17c18:	vcmpe.f32	s0, s4
   17c1c:	vmrs	APSR_nzcv, fpscr
   17c20:	bhi	17cdc <__assert_fail@plt+0x66f4>
   17c24:	vcmpe.f32	s2, s0
   17c28:	vmrs	APSR_nzcv, fpscr
   17c2c:	bpl	17cdc <__assert_fail@plt+0x66f4>
   17c30:	ldrb	r0, [r7, #16]
   17c34:	cmp	r0, #0
   17c38:	bne	17c64 <__assert_fail@plt+0x667c>
   17c3c:	vmov	s2, r6
   17c40:	vldr	s0, [r7, #8]
   17c44:	vldr	s4, [pc, #292]	; 17d70 <__assert_fail@plt+0x6788>
   17c48:	vcvt.f32.u32	s2, s2
   17c4c:	vdiv.f32	s2, s2, s0
   17c50:	vcvt.u32.f32	s0, s2
   17c54:	vcmpe.f32	s2, s4
   17c58:	vmrs	APSR_nzcv, fpscr
   17c5c:	bge	17cf8 <__assert_fail@plt+0x6710>
   17c60:	vmov	r6, s0
   17c64:	cmp	r6, #10
   17c68:	movls	r6, #10
   17c6c:	orr	r0, r6, #1
   17c70:	cmn	r0, #1
   17c74:	beq	17cf8 <__assert_fail@plt+0x6710>
   17c78:	ldr	r6, [fp, #8]
   17c7c:	mov	r1, #3
   17c80:	cmp	r0, #10
   17c84:	bcc	17cbc <__assert_fail@plt+0x66d4>
   17c88:	mov	r1, #3
   17c8c:	mov	r3, #9
   17c90:	mov	r2, #12
   17c94:	udiv	r7, r0, r1
   17c98:	mls	r7, r7, r1, r0
   17c9c:	cmp	r7, #0
   17ca0:	beq	17cbc <__assert_fail@plt+0x66d4>
   17ca4:	add	r3, r3, r2
   17ca8:	add	r2, r2, #8
   17cac:	add	r1, r1, #2
   17cb0:	add	r3, r3, #4
   17cb4:	cmp	r3, r0
   17cb8:	bcc	17c94 <__assert_fail@plt+0x66ac>
   17cbc:	udiv	r2, r0, r1
   17cc0:	mls	r1, r2, r1, r0
   17cc4:	cmp	r1, #0
   17cc8:	bne	17cf0 <__assert_fail@plt+0x6708>
   17ccc:	add	r0, r0, #2
   17cd0:	cmn	r0, #1
   17cd4:	bne	17c7c <__assert_fail@plt+0x6694>
   17cd8:	b	17cf8 <__assert_fail@plt+0x6710>
   17cdc:	str	r0, [r4, #20]
   17ce0:	mov	r0, r4
   17ce4:	bl	17634 <__assert_fail@plt+0x604c>
   17ce8:	mov	r0, r8
   17cec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17cf0:	cmp	r0, #536870912	; 0x20000000
   17cf4:	bcc	17d10 <__assert_fail@plt+0x6728>
   17cf8:	mov	r0, #0
   17cfc:	str	r0, [r4, #8]
   17d00:	mov	r0, r4
   17d04:	bl	17634 <__assert_fail@plt+0x604c>
   17d08:	mov	r0, r8
   17d0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17d10:	cmp	r0, #0
   17d14:	str	r0, [r4, #8]
   17d18:	beq	17d00 <__assert_fail@plt+0x6718>
   17d1c:	mov	r1, #8
   17d20:	bl	1c7b0 <__assert_fail@plt+0xb1c8>
   17d24:	cmp	r0, #0
   17d28:	str	r0, [r4]
   17d2c:	beq	17d00 <__assert_fail@plt+0x6718>
   17d30:	mov	r1, #0
   17d34:	str	r5, [r4, #24]
   17d38:	str	r9, [r4, #28]
   17d3c:	str	r6, [r4, #32]
   17d40:	mov	r8, r4
   17d44:	str	r1, [r4, #36]	; 0x24
   17d48:	str	r1, [r4, #12]
   17d4c:	str	r1, [r4, #16]
   17d50:	ldr	r1, [r4, #8]
   17d54:	add	r0, r0, r1, lsl #3
   17d58:	str	r0, [r4, #4]
   17d5c:	mov	r0, r8
   17d60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17d64:	stclcc	12, cr12, [ip, #820]	; 0x334
   17d68:	svccc	0x00666666
   17d6c:	svccc	0x008ccccd
   17d70:	svcmi	0x00800000
   17d74:	ror	r2, r0, #3
   17d78:	udiv	r2, r2, r1
   17d7c:	mul	r1, r2, r1
   17d80:	rsb	r0, r1, r0, ror #3
   17d84:	bx	lr
   17d88:	sub	r0, r0, r1
   17d8c:	clz	r0, r0
   17d90:	lsr	r0, r0, #5
   17d94:	bx	lr
   17d98:	push	{r4, r5, r6, r7, fp, lr}
   17d9c:	add	fp, sp, #16
   17da0:	mov	r4, r0
   17da4:	ldr	r5, [r0]
   17da8:	ldr	r0, [r0, #4]
   17dac:	cmp	r5, r0
   17db0:	bcs	17e60 <__assert_fail@plt+0x6878>
   17db4:	mov	r6, #0
   17db8:	ldr	r1, [r5]
   17dbc:	cmp	r1, #0
   17dc0:	bne	17dec <__assert_fail@plt+0x6804>
   17dc4:	b	17dd4 <__assert_fail@plt+0x67ec>
   17dc8:	str	r6, [r5]
   17dcc:	str	r6, [r5, #4]
   17dd0:	ldr	r0, [r4, #4]
   17dd4:	add	r5, r5, #8
   17dd8:	cmp	r5, r0
   17ddc:	bcs	17e60 <__assert_fail@plt+0x6878>
   17de0:	ldr	r1, [r5]
   17de4:	cmp	r1, #0
   17de8:	beq	17dd4 <__assert_fail@plt+0x67ec>
   17dec:	ldr	r1, [r4, #32]
   17df0:	ldr	r7, [r5, #4]
   17df4:	cmp	r1, #0
   17df8:	mov	r0, r1
   17dfc:	movwne	r0, #1
   17e00:	cmp	r7, #0
   17e04:	bne	17e48 <__assert_fail@plt+0x6860>
   17e08:	cmp	r0, #0
   17e0c:	beq	17dc8 <__assert_fail@plt+0x67e0>
   17e10:	ldr	r0, [r5]
   17e14:	blx	r1
   17e18:	b	17dc8 <__assert_fail@plt+0x67e0>
   17e1c:	str	r6, [r7]
   17e20:	cmp	r1, #0
   17e24:	ldr	r2, [r7, #4]
   17e28:	ldr	r0, [r4, #36]	; 0x24
   17e2c:	str	r0, [r7, #4]
   17e30:	mov	r0, r1
   17e34:	str	r7, [r4, #36]	; 0x24
   17e38:	movwne	r0, #1
   17e3c:	cmp	r2, #0
   17e40:	mov	r7, r2
   17e44:	beq	17e08 <__assert_fail@plt+0x6820>
   17e48:	tst	r0, #1
   17e4c:	beq	17e1c <__assert_fail@plt+0x6834>
   17e50:	ldr	r0, [r7]
   17e54:	blx	r1
   17e58:	ldr	r1, [r4, #32]
   17e5c:	b	17e1c <__assert_fail@plt+0x6834>
   17e60:	mov	r0, #0
   17e64:	str	r0, [r4, #12]
   17e68:	str	r0, [r4, #16]
   17e6c:	pop	{r4, r5, r6, r7, fp, pc}
   17e70:	push	{r4, r5, r6, sl, fp, lr}
   17e74:	add	fp, sp, #16
   17e78:	mov	r4, r0
   17e7c:	ldr	r0, [r0, #32]
   17e80:	cmp	r0, #0
   17e84:	beq	17ef8 <__assert_fail@plt+0x6910>
   17e88:	ldr	r0, [r4, #16]
   17e8c:	cmp	r0, #0
   17e90:	beq	17ef8 <__assert_fail@plt+0x6910>
   17e94:	ldr	r5, [r4]
   17e98:	ldr	r1, [r4, #4]
   17e9c:	cmp	r5, r1
   17ea0:	bcc	17eb8 <__assert_fail@plt+0x68d0>
   17ea4:	b	17ef8 <__assert_fail@plt+0x6910>
   17ea8:	ldr	r1, [r4, #4]
   17eac:	add	r5, r5, #8
   17eb0:	cmp	r5, r1
   17eb4:	bcs	17ef8 <__assert_fail@plt+0x6910>
   17eb8:	ldr	r0, [r5]
   17ebc:	cmp	r0, #0
   17ec0:	cmpne	r5, #0
   17ec4:	beq	17eac <__assert_fail@plt+0x68c4>
   17ec8:	ldr	r1, [r4, #32]
   17ecc:	blx	r1
   17ed0:	ldr	r6, [r5, #4]
   17ed4:	cmp	r6, #0
   17ed8:	beq	17ea8 <__assert_fail@plt+0x68c0>
   17edc:	ldr	r1, [r4, #32]
   17ee0:	ldr	r0, [r6]
   17ee4:	blx	r1
   17ee8:	ldr	r6, [r6, #4]
   17eec:	cmp	r6, #0
   17ef0:	bne	17edc <__assert_fail@plt+0x68f4>
   17ef4:	b	17ea8 <__assert_fail@plt+0x68c0>
   17ef8:	ldr	r5, [r4]
   17efc:	ldr	r1, [r4, #4]
   17f00:	cmp	r5, r1
   17f04:	bcc	17f18 <__assert_fail@plt+0x6930>
   17f08:	b	17f40 <__assert_fail@plt+0x6958>
   17f0c:	add	r5, r5, #8
   17f10:	cmp	r5, r1
   17f14:	bcs	17f40 <__assert_fail@plt+0x6958>
   17f18:	ldr	r0, [r5, #4]
   17f1c:	cmp	r0, #0
   17f20:	beq	17f0c <__assert_fail@plt+0x6924>
   17f24:	ldr	r6, [r0, #4]
   17f28:	bl	17634 <__assert_fail@plt+0x604c>
   17f2c:	cmp	r6, #0
   17f30:	mov	r0, r6
   17f34:	bne	17f24 <__assert_fail@plt+0x693c>
   17f38:	ldr	r1, [r4, #4]
   17f3c:	b	17f0c <__assert_fail@plt+0x6924>
   17f40:	ldr	r0, [r4, #36]	; 0x24
   17f44:	cmp	r0, #0
   17f48:	beq	17f60 <__assert_fail@plt+0x6978>
   17f4c:	ldr	r5, [r0, #4]
   17f50:	bl	17634 <__assert_fail@plt+0x604c>
   17f54:	cmp	r5, #0
   17f58:	mov	r0, r5
   17f5c:	bne	17f4c <__assert_fail@plt+0x6964>
   17f60:	ldr	r0, [r4]
   17f64:	bl	17634 <__assert_fail@plt+0x604c>
   17f68:	mov	r0, r4
   17f6c:	pop	{r4, r5, r6, sl, fp, lr}
   17f70:	b	17634 <__assert_fail@plt+0x604c>
   17f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f78:	add	fp, sp, #28
   17f7c:	sub	sp, sp, #44	; 0x2c
   17f80:	mov	r7, r0
   17f84:	mov	r4, r0
   17f88:	ldr	r0, [r7, #20]!
   17f8c:	ldrb	r2, [r0, #16]
   17f90:	cmp	r2, #0
   17f94:	bne	17fc4 <__assert_fail@plt+0x69dc>
   17f98:	vmov	s2, r1
   17f9c:	vldr	s0, [r0, #8]
   17fa0:	vldr	s4, [pc, #592]	; 181f8 <__assert_fail@plt+0x6c10>
   17fa4:	mov	r5, #0
   17fa8:	vcvt.f32.u32	s2, s2
   17fac:	vdiv.f32	s2, s2, s0
   17fb0:	vcvt.u32.f32	s0, s2
   17fb4:	vcmpe.f32	s2, s4
   17fb8:	vmrs	APSR_nzcv, fpscr
   17fbc:	bge	180e8 <__assert_fail@plt+0x6b00>
   17fc0:	vmov	r1, s0
   17fc4:	cmp	r1, #10
   17fc8:	mov	r5, #0
   17fcc:	movls	r1, #10
   17fd0:	orr	r6, r1, #1
   17fd4:	cmn	r6, #1
   17fd8:	beq	180e8 <__assert_fail@plt+0x6b00>
   17fdc:	mov	r0, #3
   17fe0:	cmp	r6, #10
   17fe4:	bcc	1801c <__assert_fail@plt+0x6a34>
   17fe8:	mov	r0, #3
   17fec:	mov	r2, #9
   17ff0:	mov	r1, #12
   17ff4:	udiv	r3, r6, r0
   17ff8:	mls	r3, r3, r0, r6
   17ffc:	cmp	r3, #0
   18000:	beq	1801c <__assert_fail@plt+0x6a34>
   18004:	add	r2, r2, r1
   18008:	add	r1, r1, #8
   1800c:	add	r0, r0, #2
   18010:	add	r2, r2, #4
   18014:	cmp	r2, r6
   18018:	bcc	17ff4 <__assert_fail@plt+0x6a0c>
   1801c:	udiv	r1, r6, r0
   18020:	mls	r0, r1, r0, r6
   18024:	cmp	r0, #0
   18028:	bne	1803c <__assert_fail@plt+0x6a54>
   1802c:	add	r6, r6, #2
   18030:	cmn	r6, #1
   18034:	bne	17fdc <__assert_fail@plt+0x69f4>
   18038:	b	180e8 <__assert_fail@plt+0x6b00>
   1803c:	sub	r0, r6, #1
   18040:	cmn	r0, #-536870910	; 0xe0000002
   18044:	bhi	180e8 <__assert_fail@plt+0x6b00>
   18048:	ldr	r0, [r4, #8]
   1804c:	cmp	r6, r0
   18050:	bne	18064 <__assert_fail@plt+0x6a7c>
   18054:	mov	r5, #1
   18058:	mov	r0, r5
   1805c:	sub	sp, fp, #28
   18060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18064:	mov	r0, r6
   18068:	mov	r1, #8
   1806c:	bl	1c7b0 <__assert_fail@plt+0xb1c8>
   18070:	cmp	r0, #0
   18074:	str	r0, [sp, #4]
   18078:	beq	180e8 <__assert_fail@plt+0x6b00>
   1807c:	add	r0, r0, r6, lsl #3
   18080:	mov	r1, #0
   18084:	add	r5, sp, #4
   18088:	mov	sl, r4
   1808c:	mov	r2, #0
   18090:	str	r1, [sp, #20]
   18094:	str	r1, [sp, #16]
   18098:	str	r6, [sp, #12]
   1809c:	mov	r1, r4
   180a0:	str	r0, [sp, #8]
   180a4:	add	r0, r5, #20
   180a8:	vld1.32	{d16-d17}, [r7]
   180ac:	vst1.32	{d16-d17}, [r0]
   180b0:	ldr	r0, [sl, #36]!	; 0x24
   180b4:	str	r0, [sp, #40]	; 0x28
   180b8:	mov	r0, r5
   180bc:	bl	181fc <__assert_fail@plt+0x6c14>
   180c0:	cmp	r0, #0
   180c4:	beq	180f4 <__assert_fail@plt+0x6b0c>
   180c8:	ldr	r0, [r4]
   180cc:	bl	17634 <__assert_fail@plt+0x604c>
   180d0:	mov	r0, #36	; 0x24
   180d4:	vld1.32	{d16-d17}, [r5], r0
   180d8:	vst1.32	{d16-d17}, [r4], r0
   180dc:	ldr	r0, [r5]
   180e0:	mov	r5, #1
   180e4:	str	r0, [r4]
   180e8:	mov	r0, r5
   180ec:	sub	sp, fp, #28
   180f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180f4:	ldr	r0, [sp, #40]	; 0x28
   180f8:	str	r0, [sl]
   180fc:	ldr	r0, [sp, #8]
   18100:	ldr	r8, [sp, #4]
   18104:	cmp	r8, r0
   18108:	str	r0, [sp]
   1810c:	bcs	181c4 <__assert_fail@plt+0x6bdc>
   18110:	mov	r9, #0
   18114:	ldr	r0, [r8]
   18118:	cmp	r0, #0
   1811c:	bne	18144 <__assert_fail@plt+0x6b5c>
   18120:	b	18128 <__assert_fail@plt+0x6b40>
   18124:	str	r9, [r8, #4]
   18128:	ldr	r0, [sp]
   1812c:	add	r8, r8, #8
   18130:	cmp	r8, r0
   18134:	bcs	181c4 <__assert_fail@plt+0x6bdc>
   18138:	ldr	r0, [r8]
   1813c:	cmp	r0, #0
   18140:	beq	18128 <__assert_fail@plt+0x6b40>
   18144:	ldr	r6, [r8, #4]
   18148:	cmp	r6, #0
   1814c:	beq	18124 <__assert_fail@plt+0x6b3c>
   18150:	ldr	r1, [r4, #8]
   18154:	b	18178 <__assert_fail@plt+0x6b90>
   18158:	add	r0, r3, r0, lsl #3
   1815c:	add	r0, r0, #4
   18160:	ldr	r3, [r0]
   18164:	cmp	r2, #0
   18168:	str	r3, [r6, #4]
   1816c:	str	r6, [r0]
   18170:	mov	r6, r2
   18174:	beq	18124 <__assert_fail@plt+0x6b3c>
   18178:	ldr	r5, [r6]
   1817c:	ldr	r2, [r4, #24]
   18180:	mov	r0, r5
   18184:	blx	r2
   18188:	ldr	r1, [r4, #8]
   1818c:	cmp	r0, r1
   18190:	bcs	181f4 <__assert_fail@plt+0x6c0c>
   18194:	ldr	r3, [r4]
   18198:	ldr	r2, [r6, #4]
   1819c:	ldr	r7, [r3, r0, lsl #3]
   181a0:	cmp	r7, #0
   181a4:	bne	18158 <__assert_fail@plt+0x6b70>
   181a8:	str	r5, [r3, r0, lsl #3]
   181ac:	ldr	r0, [r4, #12]
   181b0:	add	r0, r0, #1
   181b4:	str	r0, [r4, #12]
   181b8:	mov	r0, sl
   181bc:	str	r9, [r6]
   181c0:	b	18160 <__assert_fail@plt+0x6b78>
   181c4:	add	r1, sp, #4
   181c8:	mov	r0, r4
   181cc:	mov	r2, #0
   181d0:	mov	r5, #0
   181d4:	bl	181fc <__assert_fail@plt+0x6c14>
   181d8:	cmp	r0, #0
   181dc:	beq	181f4 <__assert_fail@plt+0x6c0c>
   181e0:	ldr	r0, [sp, #4]
   181e4:	bl	17634 <__assert_fail@plt+0x604c>
   181e8:	mov	r0, r5
   181ec:	sub	sp, fp, #28
   181f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181f4:	bl	115c4 <abort@plt>
   181f8:	svcmi	0x00800000
   181fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18200:	add	fp, sp, #28
   18204:	sub	sp, sp, #4
   18208:	ldr	r8, [r1]
   1820c:	ldr	r3, [r1, #4]
   18210:	mov	r6, r0
   18214:	mov	r0, #1
   18218:	str	r1, [sp]
   1821c:	cmp	r8, r3
   18220:	bcs	18434 <__assert_fail@plt+0x6e4c>
   18224:	add	sl, r6, #36	; 0x24
   18228:	cmp	r2, #0
   1822c:	beq	182e8 <__assert_fail@plt+0x6d00>
   18230:	mov	r9, #0
   18234:	ldr	r1, [r8]
   18238:	cmp	r1, #0
   1823c:	bne	18268 <__assert_fail@plt+0x6c80>
   18240:	b	18250 <__assert_fail@plt+0x6c68>
   18244:	ldr	r0, [sp]
   18248:	ldr	r3, [r0, #4]
   1824c:	str	r9, [r8, #4]
   18250:	add	r8, r8, #8
   18254:	cmp	r8, r3
   18258:	bcs	18430 <__assert_fail@plt+0x6e48>
   1825c:	ldr	r1, [r8]
   18260:	cmp	r1, #0
   18264:	beq	18250 <__assert_fail@plt+0x6c68>
   18268:	ldr	r7, [r8, #4]
   1826c:	cmp	r7, #0
   18270:	beq	1824c <__assert_fail@plt+0x6c64>
   18274:	ldr	r1, [r6, #8]
   18278:	b	182ac <__assert_fail@plt+0x6cc4>
   1827c:	str	r4, [r3, r0, lsl #3]
   18280:	ldr	r0, [r6, #12]
   18284:	add	r0, r0, #1
   18288:	str	r0, [r6, #12]
   1828c:	mov	r0, sl
   18290:	str	r9, [r7]
   18294:	ldr	r3, [r0]
   18298:	cmp	r2, #0
   1829c:	str	r3, [r7, #4]
   182a0:	str	r7, [r0]
   182a4:	mov	r7, r2
   182a8:	beq	18244 <__assert_fail@plt+0x6c5c>
   182ac:	ldr	r4, [r7]
   182b0:	ldr	r2, [r6, #24]
   182b4:	mov	r0, r4
   182b8:	blx	r2
   182bc:	ldr	r1, [r6, #8]
   182c0:	cmp	r0, r1
   182c4:	bcs	18448 <__assert_fail@plt+0x6e60>
   182c8:	ldr	r3, [r6]
   182cc:	ldr	r2, [r7, #4]
   182d0:	ldr	r5, [r3, r0, lsl #3]
   182d4:	cmp	r5, #0
   182d8:	beq	1827c <__assert_fail@plt+0x6c94>
   182dc:	add	r0, r3, r0, lsl #3
   182e0:	add	r0, r0, #4
   182e4:	b	18294 <__assert_fail@plt+0x6cac>
   182e8:	mov	r5, #0
   182ec:	ldr	r7, [r8]
   182f0:	cmp	r7, #0
   182f4:	bne	1833c <__assert_fail@plt+0x6d54>
   182f8:	b	18324 <__assert_fail@plt+0x6d3c>
   182fc:	str	r7, [r9, r4, lsl #3]
   18300:	ldr	r0, [r6, #12]
   18304:	add	r0, r0, #1
   18308:	str	r0, [r6, #12]
   1830c:	ldr	r0, [sp]
   18310:	str	r5, [r8]
   18314:	ldr	r1, [r0, #12]
   18318:	ldr	r3, [r0, #4]
   1831c:	sub	r1, r1, #1
   18320:	str	r1, [r0, #12]
   18324:	add	r8, r8, #8
   18328:	cmp	r8, r3
   1832c:	bcs	18430 <__assert_fail@plt+0x6e48>
   18330:	ldr	r7, [r8]
   18334:	cmp	r7, #0
   18338:	beq	18324 <__assert_fail@plt+0x6d3c>
   1833c:	ldr	r9, [r8, #4]
   18340:	ldr	r1, [r6, #8]
   18344:	cmp	r9, #0
   18348:	bne	18370 <__assert_fail@plt+0x6d88>
   1834c:	b	183c0 <__assert_fail@plt+0x6dd8>
   18350:	add	r0, r3, r0, lsl #3
   18354:	add	r0, r0, #4
   18358:	ldr	r3, [r0]
   1835c:	cmp	r2, #0
   18360:	str	r3, [r9, #4]
   18364:	str	r9, [r0]
   18368:	mov	r9, r2
   1836c:	beq	183bc <__assert_fail@plt+0x6dd4>
   18370:	ldr	r4, [r9]
   18374:	ldr	r2, [r6, #24]
   18378:	mov	r0, r4
   1837c:	blx	r2
   18380:	ldr	r1, [r6, #8]
   18384:	cmp	r0, r1
   18388:	bcs	18448 <__assert_fail@plt+0x6e60>
   1838c:	ldr	r3, [r6]
   18390:	ldr	r2, [r9, #4]
   18394:	ldr	r7, [r3, r0, lsl #3]
   18398:	cmp	r7, #0
   1839c:	bne	18350 <__assert_fail@plt+0x6d68>
   183a0:	str	r4, [r3, r0, lsl #3]
   183a4:	ldr	r0, [r6, #12]
   183a8:	add	r0, r0, #1
   183ac:	str	r0, [r6, #12]
   183b0:	mov	r0, sl
   183b4:	str	r5, [r9]
   183b8:	b	18358 <__assert_fail@plt+0x6d70>
   183bc:	ldr	r7, [r8]
   183c0:	str	r5, [r8, #4]
   183c4:	mov	r0, r7
   183c8:	ldr	r2, [r6, #24]
   183cc:	blx	r2
   183d0:	mov	r4, r0
   183d4:	ldr	r0, [r6, #8]
   183d8:	cmp	r4, r0
   183dc:	bcs	18448 <__assert_fail@plt+0x6e60>
   183e0:	ldr	r9, [r6]
   183e4:	ldr	r0, [r9, r4, lsl #3]
   183e8:	cmp	r0, #0
   183ec:	beq	182fc <__assert_fail@plt+0x6d14>
   183f0:	ldr	r0, [sl]
   183f4:	cmp	r0, #0
   183f8:	beq	18408 <__assert_fail@plt+0x6e20>
   183fc:	ldr	r1, [r0, #4]
   18400:	str	r1, [sl]
   18404:	b	18418 <__assert_fail@plt+0x6e30>
   18408:	mov	r0, #8
   1840c:	bl	1c804 <__assert_fail@plt+0xb21c>
   18410:	cmp	r0, #0
   18414:	beq	1843c <__assert_fail@plt+0x6e54>
   18418:	add	r1, r9, r4, lsl #3
   1841c:	str	r7, [r0]
   18420:	ldr	r2, [r1, #4]
   18424:	str	r2, [r0, #4]
   18428:	str	r0, [r1, #4]
   1842c:	b	1830c <__assert_fail@plt+0x6d24>
   18430:	mov	r0, #1
   18434:	sub	sp, fp, #28
   18438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1843c:	mov	r0, #0
   18440:	sub	sp, fp, #28
   18444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18448:	bl	115c4 <abort@plt>
   1844c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18450:	add	fp, sp, #28
   18454:	sub	sp, sp, #4
   18458:	cmp	r1, #0
   1845c:	beq	18798 <__assert_fail@plt+0x71b0>
   18460:	mov	r8, r2
   18464:	mov	sl, r1
   18468:	ldr	r1, [r0, #8]
   1846c:	ldr	r2, [r0, #24]
   18470:	mov	r4, r0
   18474:	mov	r0, sl
   18478:	blx	r2
   1847c:	mov	r7, r0
   18480:	ldr	r0, [r4, #8]
   18484:	cmp	r7, r0
   18488:	bcs	18798 <__assert_fail@plt+0x71b0>
   1848c:	ldr	r5, [r4]
   18490:	mov	r9, r5
   18494:	ldr	r1, [r9, r7, lsl #3]!
   18498:	cmp	r1, #0
   1849c:	beq	18530 <__assert_fail@plt+0x6f48>
   184a0:	cmp	r1, sl
   184a4:	beq	184d0 <__assert_fail@plt+0x6ee8>
   184a8:	ldr	r2, [r4, #28]
   184ac:	mov	r0, sl
   184b0:	blx	r2
   184b4:	cmp	r0, #0
   184b8:	mov	r6, r9
   184bc:	beq	184ec <__assert_fail@plt+0x6f04>
   184c0:	ldr	r0, [r6]
   184c4:	cmp	r0, #0
   184c8:	bne	184d4 <__assert_fail@plt+0x6eec>
   184cc:	b	18530 <__assert_fail@plt+0x6f48>
   184d0:	mov	r0, sl
   184d4:	cmp	r8, #0
   184d8:	mov	r7, #0
   184dc:	strne	r0, [r8]
   184e0:	mov	r0, r7
   184e4:	sub	sp, fp, #28
   184e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184ec:	add	r6, r5, r7, lsl #3
   184f0:	ldr	r0, [r6, #4]!
   184f4:	cmp	r0, #0
   184f8:	beq	18530 <__assert_fail@plt+0x6f48>
   184fc:	ldr	r1, [r0]
   18500:	cmp	r1, sl
   18504:	beq	18524 <__assert_fail@plt+0x6f3c>
   18508:	ldr	r2, [r4, #28]
   1850c:	mov	r0, sl
   18510:	blx	r2
   18514:	ldr	r6, [r6]
   18518:	cmp	r0, #0
   1851c:	beq	184f0 <__assert_fail@plt+0x6f08>
   18520:	b	184c0 <__assert_fail@plt+0x6ed8>
   18524:	mov	r0, sl
   18528:	cmp	r0, #0
   1852c:	bne	184d4 <__assert_fail@plt+0x6eec>
   18530:	vldr	s0, [r4, #8]
   18534:	vldr	s2, [r4, #12]
   18538:	ldr	r0, [r4, #20]
   1853c:	vcvt.f32.u32	s0, s0
   18540:	vcvt.f32.u32	s4, s2
   18544:	vldr	s2, [r0, #8]
   18548:	vmul.f32	s6, s2, s0
   1854c:	vcmpe.f32	s6, s4
   18550:	vmrs	APSR_nzcv, fpscr
   18554:	bpl	186b8 <__assert_fail@plt+0x70d0>
   18558:	movw	r1, #58872	; 0xe5f8
   1855c:	movt	r1, #1
   18560:	cmp	r0, r1
   18564:	beq	18600 <__assert_fail@plt+0x7018>
   18568:	vldr	s6, [pc, #556]	; 1879c <__assert_fail@plt+0x71b4>
   1856c:	vcmpe.f32	s2, s6
   18570:	vmrs	APSR_nzcv, fpscr
   18574:	ble	185dc <__assert_fail@plt+0x6ff4>
   18578:	vldr	s8, [pc, #544]	; 187a0 <__assert_fail@plt+0x71b8>
   1857c:	vcmpe.f32	s2, s8
   18580:	vmrs	APSR_nzcv, fpscr
   18584:	bpl	185dc <__assert_fail@plt+0x6ff4>
   18588:	vldr	s8, [pc, #532]	; 187a4 <__assert_fail@plt+0x71bc>
   1858c:	vldr	s10, [r0, #12]
   18590:	vcmpe.f32	s10, s8
   18594:	vmrs	APSR_nzcv, fpscr
   18598:	ble	185dc <__assert_fail@plt+0x6ff4>
   1859c:	vldr	s8, [r0]
   185a0:	vcmpe.f32	s8, #0.0
   185a4:	vmrs	APSR_nzcv, fpscr
   185a8:	blt	185dc <__assert_fail@plt+0x6ff4>
   185ac:	vadd.f32	s6, s8, s6
   185b0:	vcmpe.f32	s6, s2
   185b4:	vmrs	APSR_nzcv, fpscr
   185b8:	bpl	185dc <__assert_fail@plt+0x6ff4>
   185bc:	vldr	s8, [r0, #4]
   185c0:	vmov.f32	s10, #112	; 0x3f800000  1.0
   185c4:	vcmpe.f32	s8, s10
   185c8:	vmrs	APSR_nzcv, fpscr
   185cc:	bhi	185dc <__assert_fail@plt+0x6ff4>
   185d0:	vcmpe.f32	s6, s8
   185d4:	vmrs	APSR_nzcv, fpscr
   185d8:	bmi	185ec <__assert_fail@plt+0x7004>
   185dc:	vldr	s2, [pc, #452]	; 187a8 <__assert_fail@plt+0x71c0>
   185e0:	movw	r0, #58872	; 0xe5f8
   185e4:	movt	r0, #1
   185e8:	str	r0, [r4, #20]
   185ec:	vmul.f32	s6, s2, s0
   185f0:	vcmpe.f32	s6, s4
   185f4:	vmrs	APSR_nzcv, fpscr
   185f8:	bmi	18614 <__assert_fail@plt+0x702c>
   185fc:	b	186b8 <__assert_fail@plt+0x70d0>
   18600:	mov	r0, r1
   18604:	vmul.f32	s6, s2, s0
   18608:	vcmpe.f32	s6, s4
   1860c:	vmrs	APSR_nzcv, fpscr
   18610:	bpl	186b8 <__assert_fail@plt+0x70d0>
   18614:	vldr	s4, [r0, #12]
   18618:	ldrb	r0, [r0, #16]
   1861c:	mvn	r7, #0
   18620:	cmp	r0, #0
   18624:	vmul.f32	s0, s4, s0
   18628:	vldr	s4, [pc, #380]	; 187ac <__assert_fail@plt+0x71c4>
   1862c:	vmul.f32	s2, s2, s0
   18630:	vseleq.f32	s0, s2, s0
   18634:	vcmpe.f32	s0, s4
   18638:	vmrs	APSR_nzcv, fpscr
   1863c:	bge	1872c <__assert_fail@plt+0x7144>
   18640:	vcvt.u32.f32	s0, s0
   18644:	mov	r0, r4
   18648:	vmov	r1, s0
   1864c:	bl	17f74 <__assert_fail@plt+0x698c>
   18650:	cmp	r0, #0
   18654:	beq	1872c <__assert_fail@plt+0x7144>
   18658:	ldr	r1, [r4, #8]
   1865c:	ldr	r2, [r4, #24]
   18660:	mov	r0, sl
   18664:	blx	r2
   18668:	mov	r7, r0
   1866c:	ldr	r0, [r4, #8]
   18670:	cmp	r7, r0
   18674:	bcs	18798 <__assert_fail@plt+0x71b0>
   18678:	ldr	r5, [r4]
   1867c:	mov	r9, r5
   18680:	ldr	r1, [r9, r7, lsl #3]!
   18684:	cmp	r1, #0
   18688:	beq	186b8 <__assert_fail@plt+0x70d0>
   1868c:	cmp	r1, sl
   18690:	mov	r0, sl
   18694:	beq	186b0 <__assert_fail@plt+0x70c8>
   18698:	ldr	r2, [r4, #28]
   1869c:	mov	r0, sl
   186a0:	blx	r2
   186a4:	cmp	r0, #0
   186a8:	beq	18748 <__assert_fail@plt+0x7160>
   186ac:	ldr	r0, [r9]
   186b0:	cmp	r0, #0
   186b4:	bne	18798 <__assert_fail@plt+0x71b0>
   186b8:	ldr	r0, [r9]
   186bc:	cmp	r0, #0
   186c0:	beq	186dc <__assert_fail@plt+0x70f4>
   186c4:	ldr	r0, [r4, #36]	; 0x24
   186c8:	cmp	r0, #0
   186cc:	beq	186fc <__assert_fail@plt+0x7114>
   186d0:	ldr	r1, [r0, #4]
   186d4:	str	r1, [r4, #36]	; 0x24
   186d8:	b	1870c <__assert_fail@plt+0x7124>
   186dc:	str	sl, [r9]
   186e0:	ldr	r0, [r4, #12]
   186e4:	ldr	r1, [r4, #16]
   186e8:	add	r0, r0, #1
   186ec:	add	r1, r1, #1
   186f0:	str	r0, [r4, #12]
   186f4:	str	r1, [r4, #16]
   186f8:	b	18728 <__assert_fail@plt+0x7140>
   186fc:	mov	r0, #8
   18700:	bl	1c804 <__assert_fail@plt+0xb21c>
   18704:	cmp	r0, #0
   18708:	beq	18738 <__assert_fail@plt+0x7150>
   1870c:	str	sl, [r0]
   18710:	ldr	r1, [r9, #4]
   18714:	str	r1, [r0, #4]
   18718:	str	r0, [r9, #4]
   1871c:	ldr	r0, [r4, #16]
   18720:	add	r0, r0, #1
   18724:	str	r0, [r4, #16]
   18728:	mov	r7, #1
   1872c:	mov	r0, r7
   18730:	sub	sp, fp, #28
   18734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18738:	mvn	r7, #0
   1873c:	mov	r0, r7
   18740:	sub	sp, fp, #28
   18744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18748:	add	r6, r5, r7, lsl #3
   1874c:	ldr	r0, [r6, #4]!
   18750:	cmp	r0, #0
   18754:	beq	186b8 <__assert_fail@plt+0x70d0>
   18758:	ldr	r1, [r0]
   1875c:	cmp	r1, sl
   18760:	beq	1878c <__assert_fail@plt+0x71a4>
   18764:	ldr	r2, [r4, #28]
   18768:	mov	r0, sl
   1876c:	blx	r2
   18770:	ldr	r6, [r6]
   18774:	cmp	r0, #0
   18778:	beq	1874c <__assert_fail@plt+0x7164>
   1877c:	ldr	r0, [r6]
   18780:	cmp	r0, #0
   18784:	beq	186b8 <__assert_fail@plt+0x70d0>
   18788:	b	18798 <__assert_fail@plt+0x71b0>
   1878c:	mov	r0, sl
   18790:	cmp	r0, #0
   18794:	beq	186b8 <__assert_fail@plt+0x70d0>
   18798:	bl	115c4 <abort@plt>
   1879c:	stclcc	12, cr12, [ip, #820]	; 0x334
   187a0:	svccc	0x00666666
   187a4:	svccc	0x008ccccd
   187a8:	svccc	0x004ccccd
   187ac:	svcmi	0x00800000
   187b0:	push	{r4, sl, fp, lr}
   187b4:	add	fp, sp, #8
   187b8:	sub	sp, sp, #8
   187bc:	add	r2, sp, #4
   187c0:	mov	r4, r1
   187c4:	bl	1844c <__assert_fail@plt+0x6e64>
   187c8:	cmn	r0, #1
   187cc:	beq	187e8 <__assert_fail@plt+0x7200>
   187d0:	ldr	r1, [sp, #4]
   187d4:	cmp	r0, #0
   187d8:	moveq	r4, r1
   187dc:	mov	r0, r4
   187e0:	sub	sp, fp, #8
   187e4:	pop	{r4, sl, fp, pc}
   187e8:	mov	r4, #0
   187ec:	mov	r0, r4
   187f0:	sub	sp, fp, #8
   187f4:	pop	{r4, sl, fp, pc}
   187f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   187fc:	add	fp, sp, #24
   18800:	mov	r9, r1
   18804:	ldr	r1, [r0, #8]
   18808:	ldr	r2, [r0, #24]
   1880c:	mov	r5, r0
   18810:	mov	r0, r9
   18814:	blx	r2
   18818:	mov	r7, r0
   1881c:	ldr	r0, [r5, #8]
   18820:	cmp	r7, r0
   18824:	bcs	18a98 <__assert_fail@plt+0x74b0>
   18828:	ldr	r6, [r5]
   1882c:	mov	r8, #0
   18830:	mov	r4, r6
   18834:	ldr	r1, [r4, r7, lsl #3]!
   18838:	cmp	r1, #0
   1883c:	beq	188f0 <__assert_fail@plt+0x7308>
   18840:	cmp	r1, r9
   18844:	beq	18860 <__assert_fail@plt+0x7278>
   18848:	ldr	r2, [r5, #28]
   1884c:	mov	r0, r9
   18850:	blx	r2
   18854:	cmp	r0, #0
   18858:	beq	18898 <__assert_fail@plt+0x72b0>
   1885c:	ldr	r9, [r4]
   18860:	add	r0, r6, r7, lsl #3
   18864:	ldr	r0, [r0, #4]
   18868:	cmp	r0, #0
   1886c:	beq	188e0 <__assert_fail@plt+0x72f8>
   18870:	ldm	r0, {r1, r2}
   18874:	stm	r4, {r1, r2}
   18878:	mov	r1, #0
   1887c:	str	r1, [r0]
   18880:	ldr	r1, [r5, #36]	; 0x24
   18884:	str	r1, [r0, #4]
   18888:	str	r0, [r5, #36]	; 0x24
   1888c:	cmp	r9, #0
   18890:	bne	18928 <__assert_fail@plt+0x7340>
   18894:	b	188f0 <__assert_fail@plt+0x7308>
   18898:	add	r7, r6, r7, lsl #3
   1889c:	ldr	r0, [r7, #4]!
   188a0:	cmp	r0, #0
   188a4:	beq	188f0 <__assert_fail@plt+0x7308>
   188a8:	ldr	r1, [r0]
   188ac:	cmp	r1, r9
   188b0:	beq	188f8 <__assert_fail@plt+0x7310>
   188b4:	ldr	r2, [r5, #28]
   188b8:	mov	r0, r9
   188bc:	blx	r2
   188c0:	ldr	r1, [r7]
   188c4:	cmp	r0, #0
   188c8:	bne	18900 <__assert_fail@plt+0x7318>
   188cc:	ldr	r0, [r1, #4]!
   188d0:	mov	r7, r1
   188d4:	cmp	r0, #0
   188d8:	bne	188a8 <__assert_fail@plt+0x72c0>
   188dc:	b	188f0 <__assert_fail@plt+0x7308>
   188e0:	mov	r0, #0
   188e4:	str	r0, [r4]
   188e8:	cmp	r9, #0
   188ec:	bne	18928 <__assert_fail@plt+0x7340>
   188f0:	mov	r0, r8
   188f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   188f8:	mov	r1, r0
   188fc:	b	18904 <__assert_fail@plt+0x731c>
   18900:	ldr	r9, [r1]
   18904:	ldr	r0, [r1, #4]
   18908:	str	r0, [r7]
   1890c:	mov	r0, #0
   18910:	str	r0, [r1]
   18914:	ldr	r0, [r5, #36]	; 0x24
   18918:	str	r0, [r1, #4]
   1891c:	str	r1, [r5, #36]	; 0x24
   18920:	cmp	r9, #0
   18924:	beq	188f0 <__assert_fail@plt+0x7308>
   18928:	ldr	r0, [r5, #16]
   1892c:	sub	r0, r0, #1
   18930:	str	r0, [r5, #16]
   18934:	ldr	r0, [r4]
   18938:	cmp	r0, #0
   1893c:	bne	18a8c <__assert_fail@plt+0x74a4>
   18940:	ldr	r0, [r5, #12]
   18944:	vldr	s0, [r5, #8]
   18948:	sub	r1, r0, #1
   1894c:	str	r1, [r5, #12]
   18950:	vmov	s2, r1
   18954:	ldr	r0, [r5, #20]
   18958:	vcvt.f32.u32	s0, s0
   1895c:	vcvt.f32.u32	s2, s2
   18960:	vldr	s4, [r0]
   18964:	vmul.f32	s6, s4, s0
   18968:	vcmpe.f32	s6, s2
   1896c:	vmrs	APSR_nzcv, fpscr
   18970:	ble	18a8c <__assert_fail@plt+0x74a4>
   18974:	movw	r1, #58872	; 0xe5f8
   18978:	movt	r1, #1
   1897c:	cmp	r0, r1
   18980:	beq	18a1c <__assert_fail@plt+0x7434>
   18984:	vldr	s8, [pc, #272]	; 18a9c <__assert_fail@plt+0x74b4>
   18988:	vldr	s6, [r0, #8]
   1898c:	vcmpe.f32	s6, s8
   18990:	vmrs	APSR_nzcv, fpscr
   18994:	ble	189f8 <__assert_fail@plt+0x7410>
   18998:	vldr	s10, [pc, #256]	; 18aa0 <__assert_fail@plt+0x74b8>
   1899c:	vcmpe.f32	s6, s10
   189a0:	vmrs	APSR_nzcv, fpscr
   189a4:	bpl	189f8 <__assert_fail@plt+0x7410>
   189a8:	vcmpe.f32	s4, #0.0
   189ac:	vmrs	APSR_nzcv, fpscr
   189b0:	blt	189f8 <__assert_fail@plt+0x7410>
   189b4:	vldr	s10, [r0, #12]
   189b8:	vldr	s12, [pc, #228]	; 18aa4 <__assert_fail@plt+0x74bc>
   189bc:	vcmpe.f32	s10, s12
   189c0:	vmrs	APSR_nzcv, fpscr
   189c4:	ble	189f8 <__assert_fail@plt+0x7410>
   189c8:	vadd.f32	s8, s4, s8
   189cc:	vcmpe.f32	s8, s6
   189d0:	vmrs	APSR_nzcv, fpscr
   189d4:	bpl	189f8 <__assert_fail@plt+0x7410>
   189d8:	vldr	s6, [r0, #4]
   189dc:	vmov.f32	s10, #112	; 0x3f800000  1.0
   189e0:	vcmpe.f32	s6, s10
   189e4:	vmrs	APSR_nzcv, fpscr
   189e8:	bhi	189f8 <__assert_fail@plt+0x7410>
   189ec:	vcmpe.f32	s8, s6
   189f0:	vmrs	APSR_nzcv, fpscr
   189f4:	bmi	18a08 <__assert_fail@plt+0x7420>
   189f8:	vldr	s4, [pc, #168]	; 18aa8 <__assert_fail@plt+0x74c0>
   189fc:	movw	r0, #58872	; 0xe5f8
   18a00:	movt	r0, #1
   18a04:	str	r0, [r5, #20]
   18a08:	vmul.f32	s4, s4, s0
   18a0c:	vcmpe.f32	s4, s2
   18a10:	vmrs	APSR_nzcv, fpscr
   18a14:	bgt	18a30 <__assert_fail@plt+0x7448>
   18a18:	b	18a8c <__assert_fail@plt+0x74a4>
   18a1c:	mov	r0, r1
   18a20:	vmul.f32	s4, s4, s0
   18a24:	vcmpe.f32	s4, s2
   18a28:	vmrs	APSR_nzcv, fpscr
   18a2c:	ble	18a8c <__assert_fail@plt+0x74a4>
   18a30:	vldr	s2, [r0, #4]
   18a34:	ldrb	r1, [r0, #16]
   18a38:	cmp	r1, #0
   18a3c:	vmul.f32	s0, s2, s0
   18a40:	bne	18a4c <__assert_fail@plt+0x7464>
   18a44:	vldr	s2, [r0, #8]
   18a48:	vmul.f32	s0, s0, s2
   18a4c:	vcvt.u32.f32	s0, s0
   18a50:	mov	r0, r5
   18a54:	vmov	r1, s0
   18a58:	bl	17f74 <__assert_fail@plt+0x698c>
   18a5c:	cmp	r0, #0
   18a60:	bne	18a8c <__assert_fail@plt+0x74a4>
   18a64:	ldr	r0, [r5, #36]	; 0x24
   18a68:	cmp	r0, #0
   18a6c:	beq	18a84 <__assert_fail@plt+0x749c>
   18a70:	ldr	r4, [r0, #4]
   18a74:	bl	17634 <__assert_fail@plt+0x604c>
   18a78:	cmp	r4, #0
   18a7c:	mov	r0, r4
   18a80:	bne	18a70 <__assert_fail@plt+0x7488>
   18a84:	mov	r0, #0
   18a88:	str	r0, [r5, #36]	; 0x24
   18a8c:	mov	r8, r9
   18a90:	mov	r0, r8
   18a94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18a98:	bl	115c4 <abort@plt>
   18a9c:	stclcc	12, cr12, [ip, #820]	; 0x334
   18aa0:	svccc	0x00666666
   18aa4:	svccc	0x008ccccd
   18aa8:	andeq	r0, r0, r0
   18aac:	b	187f8 <__assert_fail@plt+0x7210>
   18ab0:	push	{r4, r5, r6, sl, fp, lr}
   18ab4:	add	fp, sp, #16
   18ab8:	mov	r5, r0
   18abc:	mov	r0, #0
   18ac0:	mov	r4, r1
   18ac4:	add	r6, r2, #19
   18ac8:	cmp	r1, #0
   18acc:	strb	r0, [r2, #20]
   18ad0:	bmi	18b20 <__assert_fail@plt+0x7538>
   18ad4:	mov	r0, r5
   18ad8:	mov	r1, r4
   18adc:	mov	r2, #10
   18ae0:	mov	r3, #0
   18ae4:	bl	1cde8 <__assert_fail@plt+0xb800>
   18ae8:	add	r2, r0, r0, lsl #2
   18aec:	sub	r2, r5, r2, lsl #1
   18af0:	add	r2, r2, #48	; 0x30
   18af4:	strb	r2, [r6], #-1
   18af8:	adds	r2, r5, #9
   18afc:	mov	r5, r0
   18b00:	adc	r3, r4, #0
   18b04:	rsbs	r2, r2, #18
   18b08:	mov	r4, r1
   18b0c:	rscs	r2, r3, #0
   18b10:	bcc	18ad4 <__assert_fail@plt+0x74ec>
   18b14:	add	r6, r6, #1
   18b18:	mov	r0, r6
   18b1c:	pop	{r4, r5, r6, sl, fp, pc}
   18b20:	mov	r0, r5
   18b24:	mov	r1, r4
   18b28:	mov	r2, #10
   18b2c:	mov	r3, #0
   18b30:	bl	1cde8 <__assert_fail@plt+0xb800>
   18b34:	add	r2, r0, r0, lsl #2
   18b38:	rsb	r2, r5, r2, lsl #1
   18b3c:	add	r2, r2, #48	; 0x30
   18b40:	strb	r2, [r6], #-1
   18b44:	adds	r2, r5, #9
   18b48:	mov	r5, r0
   18b4c:	adc	r3, r4, #0
   18b50:	rsbs	r2, r2, #18
   18b54:	mov	r4, r1
   18b58:	rscs	r2, r3, #0
   18b5c:	bcc	18b20 <__assert_fail@plt+0x7538>
   18b60:	mov	r0, #45	; 0x2d
   18b64:	strb	r0, [r6]
   18b68:	mov	r0, r6
   18b6c:	pop	{r4, r5, r6, sl, fp, pc}
   18b70:	push	{r4, sl, fp, lr}
   18b74:	add	fp, sp, #8
   18b78:	sub	sp, sp, #8
   18b7c:	movw	r0, #58892	; 0xe60c
   18b80:	movt	r0, #1
   18b84:	bl	113fc <getenv@plt>
   18b88:	movw	r4, #4201	; 0x1069
   18b8c:	cmp	r0, #0
   18b90:	movt	r4, #3
   18b94:	beq	18bc0 <__assert_fail@plt+0x75d8>
   18b98:	ldrb	r1, [r0]
   18b9c:	cmp	r1, #0
   18ba0:	beq	18bc0 <__assert_fail@plt+0x75d8>
   18ba4:	add	r1, sp, #4
   18ba8:	mov	r2, #10
   18bac:	bl	112c4 <strtol@plt>
   18bb0:	ldr	r1, [sp, #4]
   18bb4:	ldrb	r1, [r1]
   18bb8:	cmp	r1, #0
   18bbc:	moveq	r4, r0
   18bc0:	mov	r0, r4
   18bc4:	sub	sp, fp, #8
   18bc8:	pop	{r4, sl, fp, pc}
   18bcc:	push	{r4, r5, fp, lr}
   18bd0:	add	fp, sp, #8
   18bd4:	cmp	r0, #0
   18bd8:	beq	18c6c <__assert_fail@plt+0x7684>
   18bdc:	mov	r1, #47	; 0x2f
   18be0:	mov	r4, r0
   18be4:	bl	11558 <strrchr@plt>
   18be8:	cmp	r0, #0
   18bec:	mov	r5, r4
   18bf0:	addne	r5, r0, #1
   18bf4:	sub	r0, r5, r4
   18bf8:	cmp	r0, #7
   18bfc:	blt	18c50 <__assert_fail@plt+0x7668>
   18c00:	movw	r1, #58964	; 0xe654
   18c04:	sub	r0, r5, #7
   18c08:	mov	r2, #7
   18c0c:	movt	r1, #1
   18c10:	bl	115b8 <strncmp@plt>
   18c14:	cmp	r0, #0
   18c18:	bne	18c50 <__assert_fail@plt+0x7668>
   18c1c:	movw	r1, #58972	; 0xe65c
   18c20:	mov	r0, r5
   18c24:	mov	r2, #3
   18c28:	movt	r1, #1
   18c2c:	bl	115b8 <strncmp@plt>
   18c30:	cmp	r0, #0
   18c34:	beq	18c40 <__assert_fail@plt+0x7658>
   18c38:	mov	r4, r5
   18c3c:	b	18c50 <__assert_fail@plt+0x7668>
   18c40:	movw	r0, #61856	; 0xf1a0
   18c44:	add	r4, r5, #3
   18c48:	movt	r0, #2
   18c4c:	str	r4, [r0]
   18c50:	movw	r0, #61860	; 0xf1a4
   18c54:	movt	r0, #2
   18c58:	str	r4, [r0]
   18c5c:	movw	r0, #61916	; 0xf1dc
   18c60:	movt	r0, #2
   18c64:	str	r4, [r0]
   18c68:	pop	{r4, r5, fp, pc}
   18c6c:	movw	r0, #61872	; 0xf1b0
   18c70:	mov	r1, #55	; 0x37
   18c74:	mov	r2, #1
   18c78:	movt	r0, #2
   18c7c:	ldr	r3, [r0]
   18c80:	movw	r0, #58908	; 0xe61c
   18c84:	movt	r0, #1
   18c88:	bl	113a8 <fwrite@plt>
   18c8c:	bl	115c4 <abort@plt>
   18c90:	push	{r4, r5, r6, sl, fp, lr}
   18c94:	add	fp, sp, #16
   18c98:	mov	r4, r0
   18c9c:	movw	r0, #61920	; 0xf1e0
   18ca0:	movt	r0, #2
   18ca4:	cmp	r4, #0
   18ca8:	moveq	r4, r0
   18cac:	bl	114b0 <__errno_location@plt>
   18cb0:	ldr	r6, [r0]
   18cb4:	mov	r5, r0
   18cb8:	mov	r0, r4
   18cbc:	mov	r1, #48	; 0x30
   18cc0:	bl	1b774 <__assert_fail@plt+0xa18c>
   18cc4:	str	r6, [r5]
   18cc8:	pop	{r4, r5, r6, sl, fp, pc}
   18ccc:	movw	r1, #61920	; 0xf1e0
   18cd0:	cmp	r0, #0
   18cd4:	movt	r1, #2
   18cd8:	movne	r1, r0
   18cdc:	ldr	r0, [r1]
   18ce0:	bx	lr
   18ce4:	movw	r2, #61920	; 0xf1e0
   18ce8:	cmp	r0, #0
   18cec:	movt	r2, #2
   18cf0:	movne	r2, r0
   18cf4:	str	r1, [r2]
   18cf8:	bx	lr
   18cfc:	movw	r3, #61920	; 0xf1e0
   18d00:	cmp	r0, #0
   18d04:	and	r2, r2, #1
   18d08:	movt	r3, #2
   18d0c:	movne	r3, r0
   18d10:	ubfx	r0, r1, #5, #3
   18d14:	and	r1, r1, #31
   18d18:	add	ip, r3, r0, lsl #2
   18d1c:	mov	r0, #1
   18d20:	ldr	r3, [ip, #8]
   18d24:	and	r0, r0, r3, lsr r1
   18d28:	eor	r2, r0, r2
   18d2c:	eor	r1, r3, r2, lsl r1
   18d30:	str	r1, [ip, #8]
   18d34:	bx	lr
   18d38:	movw	r2, #61920	; 0xf1e0
   18d3c:	cmp	r0, #0
   18d40:	movt	r2, #2
   18d44:	movne	r2, r0
   18d48:	ldr	r0, [r2, #4]
   18d4c:	str	r1, [r2, #4]
   18d50:	bx	lr
   18d54:	push	{fp, lr}
   18d58:	mov	fp, sp
   18d5c:	movw	r3, #61920	; 0xf1e0
   18d60:	cmp	r0, #0
   18d64:	movt	r3, #2
   18d68:	movne	r3, r0
   18d6c:	cmp	r1, #0
   18d70:	mov	r0, #10
   18d74:	cmpne	r2, #0
   18d78:	str	r0, [r3]
   18d7c:	bne	18d84 <__assert_fail@plt+0x779c>
   18d80:	bl	115c4 <abort@plt>
   18d84:	str	r1, [r3, #40]	; 0x28
   18d88:	str	r2, [r3, #44]	; 0x2c
   18d8c:	pop	{fp, pc}
   18d90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d94:	add	fp, sp, #28
   18d98:	sub	sp, sp, #20
   18d9c:	mov	r7, r0
   18da0:	ldr	r0, [fp, #8]
   18da4:	movw	r5, #61920	; 0xf1e0
   18da8:	mov	r8, r3
   18dac:	mov	r9, r2
   18db0:	mov	sl, r1
   18db4:	movt	r5, #2
   18db8:	cmp	r0, #0
   18dbc:	movne	r5, r0
   18dc0:	bl	114b0 <__errno_location@plt>
   18dc4:	ldr	r2, [r5, #40]	; 0x28
   18dc8:	ldr	r3, [r5, #44]	; 0x2c
   18dcc:	mov	r4, r0
   18dd0:	ldm	r5, {r0, r1}
   18dd4:	add	r5, r5, #8
   18dd8:	ldr	r6, [r4]
   18ddc:	stm	sp, {r0, r1, r5}
   18de0:	mov	r0, r7
   18de4:	mov	r1, sl
   18de8:	str	r2, [sp, #12]
   18dec:	str	r3, [sp, #16]
   18df0:	mov	r2, r9
   18df4:	mov	r3, r8
   18df8:	bl	18e08 <__assert_fail@plt+0x7820>
   18dfc:	str	r6, [r4]
   18e00:	sub	sp, fp, #28
   18e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e0c:	add	fp, sp, #28
   18e10:	sub	sp, sp, #156	; 0x9c
   18e14:	str	r0, [fp, #-84]	; 0xffffffac
   18e18:	add	r0, r2, #1
   18e1c:	mov	r6, r1
   18e20:	mov	r7, r3
   18e24:	str	r2, [fp, #-80]	; 0xffffffb0
   18e28:	str	r0, [sp, #80]	; 0x50
   18e2c:	ldr	r0, [fp, #12]
   18e30:	and	r1, r0, #1
   18e34:	str	r1, [sp, #36]	; 0x24
   18e38:	and	r1, r0, #4
   18e3c:	str	r1, [sp, #32]
   18e40:	ubfx	r8, r0, #1, #1
   18e44:	bl	113c0 <__ctype_get_mb_cur_max@plt>
   18e48:	str	r0, [sp, #40]	; 0x28
   18e4c:	ldr	r0, [fp, #24]
   18e50:	ldr	r4, [fp, #8]
   18e54:	mov	r1, #0
   18e58:	str	r1, [fp, #-52]	; 0xffffffcc
   18e5c:	mov	r1, #0
   18e60:	str	r1, [sp, #60]	; 0x3c
   18e64:	mov	r1, #1
   18e68:	str	r1, [sp, #84]	; 0x54
   18e6c:	str	r0, [sp, #76]	; 0x4c
   18e70:	ldr	r0, [fp, #20]
   18e74:	str	r0, [sp, #72]	; 0x48
   18e78:	mov	r0, #0
   18e7c:	str	r0, [sp, #56]	; 0x38
   18e80:	mov	r0, #0
   18e84:	str	r0, [fp, #-88]	; 0xffffffa8
   18e88:	mov	r0, #0
   18e8c:	str	r0, [fp, #-72]	; 0xffffffb8
   18e90:	mov	r0, #0
   18e94:	cmp	r4, #10
   18e98:	bhi	1a1b4 <__assert_fail@plt+0x8bcc>
   18e9c:	add	r1, pc, #24
   18ea0:	ldr	ip, [fp, #-84]	; 0xffffffac
   18ea4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18ea8:	mov	r5, r6
   18eac:	mov	r9, #0
   18eb0:	mov	r2, #1
   18eb4:	mov	r3, #0
   18eb8:	ldr	pc, [r1, r4, lsl #2]
   18ebc:	andeq	r8, r1, r4, lsl #31
   18ec0:	andeq	r8, r1, r0, asr #31
   18ec4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   18ec8:	andeq	r8, r1, ip, ror pc
   18ecc:			; <UNDEFINED> instruction: 0x00018fb4
   18ed0:	andeq	r9, r1, r8, lsl r0
   18ed4:	andeq	r8, r1, r4, lsr #31
   18ed8:	muleq	r1, r0, r2
   18edc:	andeq	r8, r1, r8, ror #29
   18ee0:	andeq	r8, r1, r8, ror #29
   18ee4:	andeq	r9, r1, r0, lsr #2
   18ee8:	movw	r6, #59054	; 0xe6ae
   18eec:	mov	r0, #0
   18ef0:	mov	r2, #5
   18ef4:	movt	r6, #1
   18ef8:	mov	r1, r6
   18efc:	bl	11348 <dcgettext@plt>
   18f00:	cmp	r0, r6
   18f04:	str	r0, [sp, #72]	; 0x48
   18f08:	bne	190f8 <__assert_fail@plt+0x7b10>
   18f0c:	bl	1cbf8 <__assert_fail@plt+0xb610>
   18f10:	ldrb	r1, [r0]
   18f14:	and	r1, r1, #223	; 0xdf
   18f18:	cmp	r1, #71	; 0x47
   18f1c:	beq	19078 <__assert_fail@plt+0x7a90>
   18f20:	cmp	r1, #85	; 0x55
   18f24:	bne	190dc <__assert_fail@plt+0x7af4>
   18f28:	ldrb	r1, [r0, #1]
   18f2c:	and	r1, r1, #223	; 0xdf
   18f30:	cmp	r1, #84	; 0x54
   18f34:	bne	190dc <__assert_fail@plt+0x7af4>
   18f38:	ldrb	r1, [r0, #2]
   18f3c:	and	r1, r1, #223	; 0xdf
   18f40:	cmp	r1, #70	; 0x46
   18f44:	bne	190dc <__assert_fail@plt+0x7af4>
   18f48:	ldrb	r1, [r0, #3]
   18f4c:	cmp	r1, #45	; 0x2d
   18f50:	bne	190dc <__assert_fail@plt+0x7af4>
   18f54:	ldrb	r1, [r0, #4]
   18f58:	cmp	r1, #56	; 0x38
   18f5c:	bne	190dc <__assert_fail@plt+0x7af4>
   18f60:	ldrb	r0, [r0, #5]
   18f64:	cmp	r0, #0
   18f68:	movw	r0, #59058	; 0xe6b2
   18f6c:	movt	r0, #1
   18f70:	str	r0, [sp, #72]	; 0x48
   18f74:	bne	190dc <__assert_fail@plt+0x7af4>
   18f78:	b	190f8 <__assert_fail@plt+0x7b10>
   18f7c:	mov	r0, #1
   18f80:	b	18fc0 <__assert_fail@plt+0x79d8>
   18f84:	mov	r4, #0
   18f88:	mov	r9, #0
   18f8c:	mov	r2, r0
   18f90:	b	19010 <__assert_fail@plt+0x7a28>
   18f94:	tst	r8, #1
   18f98:	bne	18fc0 <__assert_fail@plt+0x79d8>
   18f9c:	mov	r2, r0
   18fa0:	b	18fe8 <__assert_fail@plt+0x7a00>
   18fa4:	mov	r0, #1
   18fa8:	mov	r9, #0
   18fac:	mov	r4, #5
   18fb0:	b	1902c <__assert_fail@plt+0x7a44>
   18fb4:	mov	r2, #1
   18fb8:	tst	r8, #1
   18fbc:	beq	18fe8 <__assert_fail@plt+0x7a00>
   18fc0:	mov	r1, #1
   18fc4:	mov	r9, #0
   18fc8:	mov	r4, #2
   18fcc:	mov	r2, r0
   18fd0:	mov	r3, #1
   18fd4:	str	r1, [fp, #-72]	; 0xffffffb8
   18fd8:	movw	r1, #59056	; 0xe6b0
   18fdc:	movt	r1, #1
   18fe0:	str	r1, [fp, #-88]	; 0xffffffa8
   18fe4:	b	19290 <__assert_fail@plt+0x7ca8>
   18fe8:	cmp	r5, #0
   18fec:	mov	r9, #1
   18ff0:	mov	r4, #2
   18ff4:	movne	r0, #39	; 0x27
   18ff8:	strbne	r0, [ip]
   18ffc:	movw	r0, #59056	; 0xe6b0
   19000:	movt	r0, #1
   19004:	str	r0, [fp, #-88]	; 0xffffffa8
   19008:	mov	r0, #1
   1900c:	str	r0, [fp, #-72]	; 0xffffffb8
   19010:	mov	r3, #0
   19014:	b	19290 <__assert_fail@plt+0x7ca8>
   19018:	mov	r4, #5
   1901c:	tst	r8, #1
   19020:	beq	19048 <__assert_fail@plt+0x7a60>
   19024:	mov	r0, #1
   19028:	mov	r9, #0
   1902c:	str	r0, [fp, #-72]	; 0xffffffb8
   19030:	movw	r0, #59052	; 0xe6ac
   19034:	mov	r2, #1
   19038:	mov	r3, #1
   1903c:	movt	r0, #1
   19040:	str	r0, [fp, #-88]	; 0xffffffa8
   19044:	b	19290 <__assert_fail@plt+0x7ca8>
   19048:	cmp	r5, #0
   1904c:	mov	r3, #0
   19050:	mov	r9, #1
   19054:	mov	r2, #1
   19058:	movne	r0, #34	; 0x22
   1905c:	strbne	r0, [ip]
   19060:	movw	r0, #59052	; 0xe6ac
   19064:	movt	r0, #1
   19068:	str	r0, [fp, #-88]	; 0xffffffa8
   1906c:	mov	r0, #1
   19070:	str	r0, [fp, #-72]	; 0xffffffb8
   19074:	b	19290 <__assert_fail@plt+0x7ca8>
   19078:	ldrb	r1, [r0, #1]
   1907c:	and	r1, r1, #223	; 0xdf
   19080:	cmp	r1, #66	; 0x42
   19084:	bne	190dc <__assert_fail@plt+0x7af4>
   19088:	ldrb	r1, [r0, #2]
   1908c:	cmp	r1, #49	; 0x31
   19090:	bne	190dc <__assert_fail@plt+0x7af4>
   19094:	ldrb	r1, [r0, #3]
   19098:	cmp	r1, #56	; 0x38
   1909c:	bne	190dc <__assert_fail@plt+0x7af4>
   190a0:	ldrb	r1, [r0, #4]
   190a4:	cmp	r1, #48	; 0x30
   190a8:	bne	190dc <__assert_fail@plt+0x7af4>
   190ac:	ldrb	r1, [r0, #5]
   190b0:	cmp	r1, #51	; 0x33
   190b4:	bne	190dc <__assert_fail@plt+0x7af4>
   190b8:	ldrb	r1, [r0, #6]
   190bc:	cmp	r1, #48	; 0x30
   190c0:	bne	190dc <__assert_fail@plt+0x7af4>
   190c4:	ldrb	r0, [r0, #7]
   190c8:	cmp	r0, #0
   190cc:	movw	r0, #59066	; 0xe6ba
   190d0:	movt	r0, #1
   190d4:	str	r0, [sp, #72]	; 0x48
   190d8:	beq	190f8 <__assert_fail@plt+0x7b10>
   190dc:	movw	r1, #59052	; 0xe6ac
   190e0:	movw	r0, #59056	; 0xe6b0
   190e4:	cmp	r4, #9
   190e8:	movt	r1, #1
   190ec:	movt	r0, #1
   190f0:	moveq	r0, r1
   190f4:	str	r0, [sp, #72]	; 0x48
   190f8:	movw	r6, #59056	; 0xe6b0
   190fc:	mov	r0, #0
   19100:	mov	r2, #5
   19104:	movt	r6, #1
   19108:	mov	r1, r6
   1910c:	bl	11348 <dcgettext@plt>
   19110:	cmp	r0, r6
   19114:	str	r0, [sp, #76]	; 0x4c
   19118:	beq	19164 <__assert_fail@plt+0x7b7c>
   1911c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19120:	mov	r9, #0
   19124:	tst	r8, #1
   19128:	bne	1926c <__assert_fail@plt+0x7c84>
   1912c:	ldr	r0, [sp, #72]	; 0x48
   19130:	ldrb	r0, [r0]
   19134:	cmp	r0, #0
   19138:	beq	1926c <__assert_fail@plt+0x7c84>
   1913c:	ldr	r1, [sp, #72]	; 0x48
   19140:	mov	r9, #0
   19144:	add	r1, r1, #1
   19148:	cmp	r9, r5
   1914c:	strbcc	r0, [ip, r9]
   19150:	ldrb	r0, [r1, r9]
   19154:	add	r9, r9, #1
   19158:	cmp	r0, #0
   1915c:	bne	19148 <__assert_fail@plt+0x7b60>
   19160:	b	1926c <__assert_fail@plt+0x7c84>
   19164:	bl	1cbf8 <__assert_fail@plt+0xb610>
   19168:	ldrb	r1, [r0]
   1916c:	and	r1, r1, #223	; 0xdf
   19170:	cmp	r1, #71	; 0x47
   19174:	beq	191e4 <__assert_fail@plt+0x7bfc>
   19178:	ldr	ip, [fp, #-84]	; 0xffffffac
   1917c:	cmp	r1, #85	; 0x55
   19180:	bne	19240 <__assert_fail@plt+0x7c58>
   19184:	ldrb	r1, [r0, #1]
   19188:	and	r1, r1, #223	; 0xdf
   1918c:	cmp	r1, #84	; 0x54
   19190:	bne	19240 <__assert_fail@plt+0x7c58>
   19194:	ldrb	r1, [r0, #2]
   19198:	and	r1, r1, #223	; 0xdf
   1919c:	cmp	r1, #70	; 0x46
   191a0:	bne	19240 <__assert_fail@plt+0x7c58>
   191a4:	ldrb	r1, [r0, #3]
   191a8:	cmp	r1, #45	; 0x2d
   191ac:	bne	19240 <__assert_fail@plt+0x7c58>
   191b0:	ldrb	r1, [r0, #4]
   191b4:	cmp	r1, #56	; 0x38
   191b8:	bne	19240 <__assert_fail@plt+0x7c58>
   191bc:	ldrb	r0, [r0, #5]
   191c0:	cmp	r0, #0
   191c4:	bne	19240 <__assert_fail@plt+0x7c58>
   191c8:	movw	r0, #59062	; 0xe6b6
   191cc:	movt	r0, #1
   191d0:	str	r0, [sp, #76]	; 0x4c
   191d4:	mov	r9, #0
   191d8:	tst	r8, #1
   191dc:	beq	1912c <__assert_fail@plt+0x7b44>
   191e0:	b	1926c <__assert_fail@plt+0x7c84>
   191e4:	ldrb	r1, [r0, #1]
   191e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   191ec:	and	r1, r1, #223	; 0xdf
   191f0:	cmp	r1, #66	; 0x42
   191f4:	bne	19240 <__assert_fail@plt+0x7c58>
   191f8:	ldrb	r1, [r0, #2]
   191fc:	cmp	r1, #49	; 0x31
   19200:	bne	19240 <__assert_fail@plt+0x7c58>
   19204:	ldrb	r1, [r0, #3]
   19208:	cmp	r1, #56	; 0x38
   1920c:	bne	19240 <__assert_fail@plt+0x7c58>
   19210:	ldrb	r1, [r0, #4]
   19214:	cmp	r1, #48	; 0x30
   19218:	bne	19240 <__assert_fail@plt+0x7c58>
   1921c:	ldrb	r1, [r0, #5]
   19220:	cmp	r1, #51	; 0x33
   19224:	bne	19240 <__assert_fail@plt+0x7c58>
   19228:	ldrb	r1, [r0, #6]
   1922c:	cmp	r1, #48	; 0x30
   19230:	bne	19240 <__assert_fail@plt+0x7c58>
   19234:	ldrb	r0, [r0, #7]
   19238:	cmp	r0, #0
   1923c:	beq	1a054 <__assert_fail@plt+0x8a6c>
   19240:	movw	r0, #59056	; 0xe6b0
   19244:	cmp	r4, #9
   19248:	movt	r0, #1
   1924c:	mov	r1, r0
   19250:	movw	r0, #59052	; 0xe6ac
   19254:	movt	r0, #1
   19258:	moveq	r1, r0
   1925c:	str	r1, [sp, #76]	; 0x4c
   19260:	mov	r9, #0
   19264:	tst	r8, #1
   19268:	beq	1912c <__assert_fail@plt+0x7b44>
   1926c:	ldr	r6, [sp, #76]	; 0x4c
   19270:	mov	r0, r6
   19274:	bl	11474 <strlen@plt>
   19278:	ldr	ip, [fp, #-84]	; 0xffffffac
   1927c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19280:	str	r0, [fp, #-72]	; 0xffffffb8
   19284:	str	r6, [fp, #-88]	; 0xffffffa8
   19288:	mov	r2, #1
   1928c:	mov	r3, r8
   19290:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19294:	str	r4, [fp, #-64]	; 0xffffffc0
   19298:	mov	sl, #0
   1929c:	str	r3, [fp, #-76]	; 0xffffffb4
   192a0:	str	r2, [sp, #88]	; 0x58
   192a4:	cmp	r0, #0
   192a8:	movwne	r0, #1
   192ac:	and	r1, r0, r3
   192b0:	and	r1, r2, r1
   192b4:	str	r1, [sp, #48]	; 0x30
   192b8:	sub	r1, r4, #2
   192bc:	clz	r1, r1
   192c0:	lsr	r1, r1, #5
   192c4:	and	r1, r1, r3
   192c8:	str	r1, [sp, #44]	; 0x2c
   192cc:	subs	r1, r4, #2
   192d0:	eor	r4, r3, #1
   192d4:	movwne	r1, #1
   192d8:	str	r4, [sp, #92]	; 0x5c
   192dc:	orr	r4, r1, r4
   192e0:	and	r1, r1, r2
   192e4:	and	r0, r0, r1
   192e8:	str	r4, [sp, #64]	; 0x40
   192ec:	ldr	r4, [sp, #84]	; 0x54
   192f0:	str	r0, [fp, #-60]	; 0xffffffc4
   192f4:	orr	r0, r1, r3
   192f8:	ldr	r1, [fp, #16]
   192fc:	eor	r0, r0, #1
   19300:	clz	r1, r1
   19304:	lsr	r1, r1, #5
   19308:	orr	r0, r1, r0
   1930c:	str	r0, [fp, #-68]	; 0xffffffbc
   19310:	eor	r0, r2, #1
   19314:	str	r0, [sp, #52]	; 0x34
   19318:	cmn	r7, #1
   1931c:	beq	1932c <__assert_fail@plt+0x7d44>
   19320:	cmp	sl, r7
   19324:	bne	19338 <__assert_fail@plt+0x7d50>
   19328:	b	19fcc <__assert_fail@plt+0x89e4>
   1932c:	ldrb	r0, [lr, sl]
   19330:	cmp	r0, #0
   19334:	beq	19fd4 <__assert_fail@plt+0x89ec>
   19338:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1933c:	cmp	r0, #0
   19340:	beq	193a0 <__assert_fail@plt+0x7db8>
   19344:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19348:	mov	r6, r5
   1934c:	add	r5, sl, r0
   19350:	cmp	r0, #2
   19354:	bcc	193c0 <__assert_fail@plt+0x7dd8>
   19358:	mov	r0, #0
   1935c:	cmn	r7, #1
   19360:	str	r0, [fp, #-56]	; 0xffffffc8
   19364:	bne	1937c <__assert_fail@plt+0x7d94>
   19368:	mov	r0, lr
   1936c:	bl	11474 <strlen@plt>
   19370:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19374:	ldr	ip, [fp, #-84]	; 0xffffffac
   19378:	mov	r7, r0
   1937c:	cmp	r5, r7
   19380:	bls	193d0 <__assert_fail@plt+0x7de8>
   19384:	mov	r0, #0
   19388:	mov	r5, r6
   1938c:	str	r0, [fp, #-48]	; 0xffffffd0
   19390:	ldrb	r6, [lr, sl]
   19394:	cmp	r6, #126	; 0x7e
   19398:	bls	19420 <__assert_fail@plt+0x7e38>
   1939c:	b	1997c <__assert_fail@plt+0x8394>
   193a0:	mov	r0, #0
   193a4:	str	r0, [fp, #-56]	; 0xffffffc8
   193a8:	mov	r0, #0
   193ac:	str	r0, [fp, #-48]	; 0xffffffd0
   193b0:	ldrb	r6, [lr, sl]
   193b4:	cmp	r6, #126	; 0x7e
   193b8:	bls	19420 <__assert_fail@plt+0x7e38>
   193bc:	b	1997c <__assert_fail@plt+0x8394>
   193c0:	mov	r0, #0
   193c4:	str	r0, [fp, #-56]	; 0xffffffc8
   193c8:	cmp	r5, r7
   193cc:	bhi	19384 <__assert_fail@plt+0x7d9c>
   193d0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   193d4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   193d8:	add	r0, lr, sl
   193dc:	bl	11468 <bcmp@plt>
   193e0:	ldr	r2, [sp, #92]	; 0x5c
   193e4:	cmp	r0, #0
   193e8:	mov	r1, r0
   193ec:	mov	r5, r6
   193f0:	movwne	r1, #1
   193f4:	orr	r1, r1, r2
   193f8:	tst	r1, #1
   193fc:	beq	1a094 <__assert_fail@plt+0x8aac>
   19400:	ldr	ip, [fp, #-84]	; 0xffffffac
   19404:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19408:	clz	r0, r0
   1940c:	lsr	r0, r0, #5
   19410:	str	r0, [fp, #-48]	; 0xffffffd0
   19414:	ldrb	r6, [lr, sl]
   19418:	cmp	r6, #126	; 0x7e
   1941c:	bhi	1997c <__assert_fail@plt+0x8394>
   19420:	add	r3, pc, #16
   19424:	mov	r8, #1
   19428:	mov	r2, #110	; 0x6e
   1942c:	mov	r0, #97	; 0x61
   19430:	mov	r1, #0
   19434:	ldr	pc, [r3, r6, lsl #2]
   19438:	andeq	r9, r1, r4, lsr r7
   1943c:	andeq	r9, r1, ip, ror r9
   19440:	andeq	r9, r1, ip, ror r9
   19444:	andeq	r9, r1, ip, ror r9
   19448:	andeq	r9, r1, ip, ror r9
   1944c:	andeq	r9, r1, ip, ror r9
   19450:	andeq	r9, r1, ip, ror r9
   19454:	andeq	r9, r1, r0, lsr sl
   19458:	andeq	r9, r1, r4, lsl r7
   1945c:	andeq	r9, r1, ip, lsl #14
   19460:	andeq	r9, r1, r0, lsr #14
   19464:	andeq	r9, r1, r0, asr r8
   19468:	andeq	r9, r1, r4, lsl #14
   1946c:	andeq	r9, r1, ip, lsl r7
   19470:	andeq	r9, r1, ip, ror r9
   19474:	andeq	r9, r1, ip, ror r9
   19478:	andeq	r9, r1, ip, ror r9
   1947c:	andeq	r9, r1, ip, ror r9
   19480:	andeq	r9, r1, ip, ror r9
   19484:	andeq	r9, r1, ip, ror r9
   19488:	andeq	r9, r1, ip, ror r9
   1948c:	andeq	r9, r1, ip, ror r9
   19490:	andeq	r9, r1, ip, ror r9
   19494:	andeq	r9, r1, ip, ror r9
   19498:	andeq	r9, r1, ip, ror r9
   1949c:	andeq	r9, r1, ip, ror r9
   194a0:	andeq	r9, r1, ip, ror r9
   194a4:	andeq	r9, r1, ip, ror r9
   194a8:	andeq	r9, r1, ip, ror r9
   194ac:	andeq	r9, r1, ip, ror r9
   194b0:	andeq	r9, r1, ip, ror r9
   194b4:	andeq	r9, r1, ip, ror r9
   194b8:	andeq	r9, r1, r8, lsr #13
   194bc:	andeq	r9, r1, ip, lsr #13
   194c0:	andeq	r9, r1, ip, lsr #13
   194c4:	muleq	r1, ip, r6
   194c8:	andeq	r9, r1, ip, lsr #13
   194cc:	andeq	r9, r1, r4, lsr r6
   194d0:	andeq	r9, r1, ip, lsr #13
   194d4:	andeq	r9, r1, r8, asr r8
   194d8:	andeq	r9, r1, ip, lsr #13
   194dc:	andeq	r9, r1, ip, lsr #13
   194e0:	andeq	r9, r1, ip, lsr #13
   194e4:	andeq	r9, r1, r4, lsr r6
   194e8:	andeq	r9, r1, r4, lsr r6
   194ec:	andeq	r9, r1, r4, lsr r6
   194f0:	andeq	r9, r1, r4, lsr r6
   194f4:	andeq	r9, r1, r4, lsr r6
   194f8:	andeq	r9, r1, r4, lsr r6
   194fc:	andeq	r9, r1, r4, lsr r6
   19500:	andeq	r9, r1, r4, lsr r6
   19504:	andeq	r9, r1, r4, lsr r6
   19508:	andeq	r9, r1, r4, lsr r6
   1950c:	andeq	r9, r1, r4, lsr r6
   19510:	andeq	r9, r1, r4, lsr r6
   19514:	andeq	r9, r1, r4, lsr r6
   19518:	andeq	r9, r1, r4, lsr r6
   1951c:	andeq	r9, r1, r4, lsr r6
   19520:	andeq	r9, r1, r4, lsr r6
   19524:	andeq	r9, r1, ip, lsr #13
   19528:	andeq	r9, r1, ip, lsr #13
   1952c:	andeq	r9, r1, ip, lsr #13
   19530:	andeq	r9, r1, ip, lsr #13
   19534:	andeq	r9, r1, ip, lsl r8
   19538:	andeq	r9, r1, ip, ror r9
   1953c:	andeq	r9, r1, r4, lsr r6
   19540:	andeq	r9, r1, r4, lsr r6
   19544:	andeq	r9, r1, r4, lsr r6
   19548:	andeq	r9, r1, r4, lsr r6
   1954c:	andeq	r9, r1, r4, lsr r6
   19550:	andeq	r9, r1, r4, lsr r6
   19554:	andeq	r9, r1, r4, lsr r6
   19558:	andeq	r9, r1, r4, lsr r6
   1955c:	andeq	r9, r1, r4, lsr r6
   19560:	andeq	r9, r1, r4, lsr r6
   19564:	andeq	r9, r1, r4, lsr r6
   19568:	andeq	r9, r1, r4, lsr r6
   1956c:	andeq	r9, r1, r4, lsr r6
   19570:	andeq	r9, r1, r4, lsr r6
   19574:	andeq	r9, r1, r4, lsr r6
   19578:	andeq	r9, r1, r4, lsr r6
   1957c:	andeq	r9, r1, r4, lsr r6
   19580:	andeq	r9, r1, r4, lsr r6
   19584:	andeq	r9, r1, r4, lsr r6
   19588:	andeq	r9, r1, r4, lsr r6
   1958c:	andeq	r9, r1, r4, lsr r6
   19590:	andeq	r9, r1, r4, lsr r6
   19594:	andeq	r9, r1, r4, lsr r6
   19598:	andeq	r9, r1, r4, lsr r6
   1959c:	andeq	r9, r1, r4, lsr r6
   195a0:	andeq	r9, r1, r4, lsr r6
   195a4:	andeq	r9, r1, ip, lsr #13
   195a8:	andeq	r9, r1, r0, ror #13
   195ac:	andeq	r9, r1, r4, lsr r6
   195b0:	andeq	r9, r1, ip, lsr #13
   195b4:	andeq	r9, r1, r4, lsr r6
   195b8:	andeq	r9, r1, ip, lsr #13
   195bc:	andeq	r9, r1, r4, lsr r6
   195c0:	andeq	r9, r1, r4, lsr r6
   195c4:	andeq	r9, r1, r4, lsr r6
   195c8:	andeq	r9, r1, r4, lsr r6
   195cc:	andeq	r9, r1, r4, lsr r6
   195d0:	andeq	r9, r1, r4, lsr r6
   195d4:	andeq	r9, r1, r4, lsr r6
   195d8:	andeq	r9, r1, r4, lsr r6
   195dc:	andeq	r9, r1, r4, lsr r6
   195e0:	andeq	r9, r1, r4, lsr r6
   195e4:	andeq	r9, r1, r4, lsr r6
   195e8:	andeq	r9, r1, r4, lsr r6
   195ec:	andeq	r9, r1, r4, lsr r6
   195f0:	andeq	r9, r1, r4, lsr r6
   195f4:	andeq	r9, r1, r4, lsr r6
   195f8:	andeq	r9, r1, r4, lsr r6
   195fc:	andeq	r9, r1, r4, lsr r6
   19600:	andeq	r9, r1, r4, lsr r6
   19604:	andeq	r9, r1, r4, lsr r6
   19608:	andeq	r9, r1, r4, lsr r6
   1960c:	andeq	r9, r1, r4, lsr r6
   19610:	andeq	r9, r1, r4, lsr r6
   19614:	andeq	r9, r1, r4, lsr r6
   19618:	andeq	r9, r1, r4, lsr r6
   1961c:	andeq	r9, r1, r4, lsr r6
   19620:	andeq	r9, r1, r4, lsr r6
   19624:	andeq	r9, r1, r4, ror r6
   19628:	andeq	r9, r1, ip, lsr #13
   1962c:	andeq	r9, r1, r4, ror r6
   19630:	muleq	r1, ip, r6
   19634:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19638:	tst	r0, #1
   1963c:	bne	198f4 <__assert_fail@plt+0x830c>
   19640:	ldr	r1, [fp, #16]
   19644:	ubfx	r0, r6, #5, #3
   19648:	mov	r2, #1
   1964c:	ldr	r0, [r1, r0, lsl #2]
   19650:	and	r1, r6, #31
   19654:	tst	r0, r2, lsl r1
   19658:	beq	198f4 <__assert_fail@plt+0x830c>
   1965c:	mov	r0, r6
   19660:	mov	r1, r8
   19664:	ldr	r2, [fp, #-76]	; 0xffffffb4
   19668:	tst	r2, #1
   1966c:	beq	19914 <__assert_fail@plt+0x832c>
   19670:	b	1a070 <__assert_fail@plt+0x8a88>
   19674:	cmp	r7, #1
   19678:	beq	1969c <__assert_fail@plt+0x80b4>
   1967c:	mov	r8, #0
   19680:	cmn	r7, #1
   19684:	bne	198e0 <__assert_fail@plt+0x82f8>
   19688:	ldrb	r0, [lr, #1]
   1968c:	cmp	r0, #0
   19690:	beq	1969c <__assert_fail@plt+0x80b4>
   19694:	mvn	r7, #0
   19698:	b	198e0 <__assert_fail@plt+0x82f8>
   1969c:	mov	r8, #0
   196a0:	cmp	sl, #0
   196a4:	bne	198e0 <__assert_fail@plt+0x82f8>
   196a8:	mov	r1, #1
   196ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   196b0:	cmp	r0, #2
   196b4:	bne	196cc <__assert_fail@plt+0x80e4>
   196b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   196bc:	mov	r8, r1
   196c0:	tst	r0, #1
   196c4:	beq	19634 <__assert_fail@plt+0x804c>
   196c8:	b	1a070 <__assert_fail@plt+0x8a88>
   196cc:	mov	r8, r1
   196d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   196d4:	tst	r0, #1
   196d8:	beq	19640 <__assert_fail@plt+0x8058>
   196dc:	b	198f4 <__assert_fail@plt+0x830c>
   196e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   196e4:	cmp	r0, #2
   196e8:	bne	199a8 <__assert_fail@plt+0x83c0>
   196ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   196f0:	tst	r0, #1
   196f4:	bne	1a070 <__assert_fail@plt+0x8a88>
   196f8:	mov	r0, #0
   196fc:	str	r0, [fp, #-56]	; 0xffffffc8
   19700:	b	199c0 <__assert_fail@plt+0x83d8>
   19704:	mov	r0, #102	; 0x66
   19708:	b	19a30 <__assert_fail@plt+0x8448>
   1970c:	mov	r2, #116	; 0x74
   19710:	b	19720 <__assert_fail@plt+0x8138>
   19714:	mov	r0, #98	; 0x62
   19718:	b	19a30 <__assert_fail@plt+0x8448>
   1971c:	mov	r2, #114	; 0x72
   19720:	ldr	r0, [sp, #64]	; 0x40
   19724:	tst	r0, #1
   19728:	mov	r0, r2
   1972c:	bne	19a30 <__assert_fail@plt+0x8448>
   19730:	b	1a070 <__assert_fail@plt+0x8a88>
   19734:	ldr	r0, [sp, #88]	; 0x58
   19738:	tst	r0, #1
   1973c:	beq	19a50 <__assert_fail@plt+0x8468>
   19740:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19744:	tst	r0, #1
   19748:	bne	1a1ac <__assert_fail@plt+0x8bc4>
   1974c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19750:	ldr	r1, [fp, #-52]	; 0xffffffcc
   19754:	subs	r0, r0, #2
   19758:	movwne	r0, #1
   1975c:	orr	r0, r0, r1
   19760:	tst	r0, #1
   19764:	bne	197a0 <__assert_fail@plt+0x81b8>
   19768:	cmp	r9, r5
   1976c:	movcc	r0, #39	; 0x27
   19770:	strbcc	r0, [ip, r9]
   19774:	add	r0, r9, #1
   19778:	cmp	r0, r5
   1977c:	movcc	r1, #36	; 0x24
   19780:	strbcc	r1, [ip, r0]
   19784:	add	r0, r9, #2
   19788:	add	r9, r9, #3
   1978c:	cmp	r0, r5
   19790:	movcc	r1, #39	; 0x27
   19794:	strbcc	r1, [ip, r0]
   19798:	mov	r0, #1
   1979c:	str	r0, [fp, #-52]	; 0xffffffcc
   197a0:	mov	r1, #1
   197a4:	cmp	r9, r5
   197a8:	mov	r8, #0
   197ac:	mov	r6, #48	; 0x30
   197b0:	str	r1, [fp, #-56]	; 0xffffffc8
   197b4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   197b8:	movcc	r0, #92	; 0x5c
   197bc:	strbcc	r0, [ip, r9]
   197c0:	add	r0, r9, #1
   197c4:	cmp	r1, #2
   197c8:	beq	19c1c <__assert_fail@plt+0x8634>
   197cc:	add	r1, sl, #1
   197d0:	cmp	r1, r7
   197d4:	bcs	19c1c <__assert_fail@plt+0x8634>
   197d8:	ldrb	r1, [lr, r1]
   197dc:	sub	r1, r1, #48	; 0x30
   197e0:	uxtb	r1, r1
   197e4:	cmp	r1, #9
   197e8:	bhi	19c1c <__assert_fail@plt+0x8634>
   197ec:	cmp	r0, r5
   197f0:	movcc	r1, #48	; 0x30
   197f4:	strbcc	r1, [ip, r0]
   197f8:	add	r0, r9, #2
   197fc:	add	r9, r9, #3
   19800:	cmp	r0, r5
   19804:	movcc	r1, #48	; 0x30
   19808:	strbcc	r1, [ip, r0]
   1980c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19810:	tst	r0, #1
   19814:	beq	19640 <__assert_fail@plt+0x8058>
   19818:	b	198f4 <__assert_fail@plt+0x830c>
   1981c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19820:	mov	r6, #63	; 0x3f
   19824:	cmp	r0, #5
   19828:	beq	19c30 <__assert_fail@plt+0x8648>
   1982c:	mov	r1, #0
   19830:	cmp	r0, #2
   19834:	str	r1, [fp, #-56]	; 0xffffffc8
   19838:	bne	19cf8 <__assert_fail@plt+0x8710>
   1983c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19840:	mov	r8, #0
   19844:	tst	r0, #1
   19848:	beq	19634 <__assert_fail@plt+0x804c>
   1984c:	b	1a070 <__assert_fail@plt+0x8a88>
   19850:	mov	r0, #118	; 0x76
   19854:	b	19a30 <__assert_fail@plt+0x8448>
   19858:	mov	r0, #1
   1985c:	mov	r6, #39	; 0x27
   19860:	str	r0, [sp, #60]	; 0x3c
   19864:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19868:	cmp	r0, #2
   1986c:	bne	19a70 <__assert_fail@plt+0x8488>
   19870:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19874:	tst	r0, #1
   19878:	bne	1a070 <__assert_fail@plt+0x8a88>
   1987c:	ldr	r2, [sp, #56]	; 0x38
   19880:	clz	r1, r5
   19884:	mov	r8, #1
   19888:	lsr	r1, r1, #5
   1988c:	cmp	r2, #0
   19890:	mov	r0, r2
   19894:	movwne	r0, #1
   19898:	orrs	r0, r0, r1
   1989c:	moveq	r2, r5
   198a0:	moveq	r5, r0
   198a4:	cmp	r9, r5
   198a8:	str	r2, [sp, #56]	; 0x38
   198ac:	movcc	r0, #39	; 0x27
   198b0:	strbcc	r0, [ip, r9]
   198b4:	add	r0, r9, #1
   198b8:	cmp	r0, r5
   198bc:	movcc	r1, #92	; 0x5c
   198c0:	strbcc	r1, [ip, r0]
   198c4:	add	r0, r9, #2
   198c8:	add	r9, r9, #3
   198cc:	cmp	r0, r5
   198d0:	movcc	r1, #39	; 0x27
   198d4:	strbcc	r1, [ip, r0]
   198d8:	mov	r0, #0
   198dc:	str	r0, [fp, #-52]	; 0xffffffcc
   198e0:	mov	r0, #0
   198e4:	str	r0, [fp, #-56]	; 0xffffffc8
   198e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   198ec:	tst	r0, #1
   198f0:	beq	19640 <__assert_fail@plt+0x8058>
   198f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   198f8:	mov	r1, r8
   198fc:	cmp	r0, #0
   19900:	mov	r0, r6
   19904:	beq	199c8 <__assert_fail@plt+0x83e0>
   19908:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1990c:	tst	r2, #1
   19910:	bne	1a070 <__assert_fail@plt+0x8a88>
   19914:	ldr	r2, [fp, #-64]	; 0xffffffc0
   19918:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1991c:	subs	r2, r2, #2
   19920:	movwne	r2, #1
   19924:	orr	r2, r2, r3
   19928:	tst	r2, #1
   1992c:	bne	19968 <__assert_fail@plt+0x8380>
   19930:	cmp	r9, r5
   19934:	movcc	r2, #39	; 0x27
   19938:	strbcc	r2, [ip, r9]
   1993c:	add	r2, r9, #1
   19940:	cmp	r2, r5
   19944:	movcc	r3, #36	; 0x24
   19948:	strbcc	r3, [ip, r2]
   1994c:	add	r2, r9, #2
   19950:	add	r9, r9, #3
   19954:	cmp	r2, r5
   19958:	movcc	r3, #39	; 0x27
   1995c:	strbcc	r3, [ip, r2]
   19960:	mov	r2, #1
   19964:	str	r2, [fp, #-52]	; 0xffffffcc
   19968:	cmp	r9, r5
   1996c:	movcc	r2, #92	; 0x5c
   19970:	strbcc	r2, [ip, r9]
   19974:	add	r9, r9, #1
   19978:	b	19a10 <__assert_fail@plt+0x8428>
   1997c:	ldr	r0, [sp, #40]	; 0x28
   19980:	cmp	r0, #1
   19984:	bne	19a84 <__assert_fail@plt+0x849c>
   19988:	bl	11450 <__ctype_b_loc@plt>
   1998c:	ldr	r0, [r0]
   19990:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19994:	mov	r1, #1
   19998:	add	r0, r0, r6, lsl #1
   1999c:	ldrb	r0, [r0, #1]
   199a0:	ubfx	r8, r0, #6, #1
   199a4:	b	19ddc <__assert_fail@plt+0x87f4>
   199a8:	ldr	r1, [sp, #48]	; 0x30
   199ac:	mov	r0, #0
   199b0:	str	r0, [fp, #-56]	; 0xffffffc8
   199b4:	mov	r0, #92	; 0x5c
   199b8:	cmp	r1, #0
   199bc:	beq	19a30 <__assert_fail@plt+0x8448>
   199c0:	mov	r6, #92	; 0x5c
   199c4:	mov	r8, #0
   199c8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   199cc:	cmp	r0, #0
   199d0:	bne	19a08 <__assert_fail@plt+0x8420>
   199d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   199d8:	tst	r0, #1
   199dc:	beq	19a08 <__assert_fail@plt+0x8420>
   199e0:	cmp	r9, r5
   199e4:	movcc	r0, #39	; 0x27
   199e8:	strbcc	r0, [ip, r9]
   199ec:	add	r0, r9, #1
   199f0:	add	r9, r9, #2
   199f4:	cmp	r0, r5
   199f8:	movcc	r1, #39	; 0x27
   199fc:	strbcc	r1, [ip, r0]
   19a00:	mov	r0, #0
   19a04:	str	r0, [fp, #-52]	; 0xffffffcc
   19a08:	mov	r1, r8
   19a0c:	mov	r0, r6
   19a10:	cmp	r9, r5
   19a14:	and	r4, r4, r1
   19a18:	strbcc	r0, [ip, r9]
   19a1c:	add	r9, r9, #1
   19a20:	add	sl, sl, #1
   19a24:	cmn	r7, #1
   19a28:	bne	19320 <__assert_fail@plt+0x7d38>
   19a2c:	b	1932c <__assert_fail@plt+0x7d44>
   19a30:	mov	r1, #0
   19a34:	mov	r8, #0
   19a38:	str	r1, [fp, #-56]	; 0xffffffc8
   19a3c:	ldr	r1, [sp, #88]	; 0x58
   19a40:	tst	r1, #1
   19a44:	mov	r1, #0
   19a48:	beq	19634 <__assert_fail@plt+0x804c>
   19a4c:	b	19908 <__assert_fail@plt+0x8320>
   19a50:	ldr	r0, [sp, #36]	; 0x24
   19a54:	mov	r6, #0
   19a58:	mov	r8, #0
   19a5c:	cmp	r0, #0
   19a60:	mov	r0, #0
   19a64:	str	r0, [fp, #-56]	; 0xffffffc8
   19a68:	bne	19a20 <__assert_fail@plt+0x8438>
   19a6c:	b	19634 <__assert_fail@plt+0x804c>
   19a70:	mov	r8, #1
   19a74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19a78:	tst	r0, #1
   19a7c:	beq	19640 <__assert_fail@plt+0x8058>
   19a80:	b	198f4 <__assert_fail@plt+0x830c>
   19a84:	mov	r0, #0
   19a88:	cmn	r7, #1
   19a8c:	str	r0, [fp, #-36]	; 0xffffffdc
   19a90:	str	r0, [fp, #-40]	; 0xffffffd8
   19a94:	bne	19aa8 <__assert_fail@plt+0x84c0>
   19a98:	mov	r0, lr
   19a9c:	bl	11474 <strlen@plt>
   19aa0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19aa4:	mov	r7, r0
   19aa8:	ldr	r0, [sp, #44]	; 0x2c
   19aac:	str	r4, [sp, #84]	; 0x54
   19ab0:	str	r5, [sp, #28]
   19ab4:	cmp	r0, #0
   19ab8:	beq	19d0c <__assert_fail@plt+0x8724>
   19abc:	ldr	r0, [sp, #80]	; 0x50
   19ac0:	mov	r8, #1
   19ac4:	mov	r5, #0
   19ac8:	add	r0, r0, sl
   19acc:	str	r0, [sp, #24]
   19ad0:	sub	r0, fp, #40	; 0x28
   19ad4:	mov	r3, r0
   19ad8:	b	19b14 <__assert_fail@plt+0x852c>
   19adc:	ldr	r5, [sp, #68]	; 0x44
   19ae0:	add	r5, r0, r5
   19ae4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19ae8:	bl	11384 <iswprint@plt>
   19aec:	cmp	r0, #0
   19af0:	sub	r4, fp, #40	; 0x28
   19af4:	movwne	r0, #1
   19af8:	and	r8, r8, r0
   19afc:	mov	r0, r4
   19b00:	bl	11330 <mbsinit@plt>
   19b04:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19b08:	mov	r3, r4
   19b0c:	cmp	r0, #0
   19b10:	bne	19dd0 <__assert_fail@plt+0x87e8>
   19b14:	str	r5, [sp, #68]	; 0x44
   19b18:	add	r5, r5, sl
   19b1c:	sub	r0, fp, #44	; 0x2c
   19b20:	add	r1, lr, r5
   19b24:	sub	r2, r7, r5
   19b28:	bl	1cc30 <__assert_fail@plt+0xb648>
   19b2c:	cmn	r0, #2
   19b30:	beq	19d90 <__assert_fail@plt+0x87a8>
   19b34:	ldr	ip, [fp, #-84]	; 0xffffffac
   19b38:	cmn	r0, #1
   19b3c:	beq	19d84 <__assert_fail@plt+0x879c>
   19b40:	cmp	r0, #0
   19b44:	beq	19d88 <__assert_fail@plt+0x87a0>
   19b48:	cmp	r0, #2
   19b4c:	bcc	19adc <__assert_fail@plt+0x84f4>
   19b50:	ldr	r1, [sp, #68]	; 0x44
   19b54:	ldr	r2, [sp, #24]
   19b58:	add	r1, r2, r1
   19b5c:	sub	r2, r0, #1
   19b60:	ldrb	r3, [r1]
   19b64:	sub	r3, r3, #91	; 0x5b
   19b68:	cmp	r3, #33	; 0x21
   19b6c:	bls	19b8c <__assert_fail@plt+0x85a4>
   19b70:	add	r1, r1, #1
   19b74:	subs	r2, r2, #1
   19b78:	beq	19adc <__assert_fail@plt+0x84f4>
   19b7c:	ldrb	r3, [r1]
   19b80:	sub	r3, r3, #91	; 0x5b
   19b84:	cmp	r3, #33	; 0x21
   19b88:	bhi	19b70 <__assert_fail@plt+0x8588>
   19b8c:	add	r5, pc, #0
   19b90:	ldr	pc, [r5, r3, lsl #2]
   19b94:	andeq	sl, r1, r8, lsr #1
   19b98:	andeq	sl, r1, r8, lsr #1
   19b9c:	andeq	r9, r1, r0, ror fp
   19ba0:	andeq	sl, r1, r8, lsr #1
   19ba4:	andeq	r9, r1, r0, ror fp
   19ba8:	andeq	sl, r1, r8, lsr #1
   19bac:	andeq	r9, r1, r0, ror fp
   19bb0:	andeq	r9, r1, r0, ror fp
   19bb4:	andeq	r9, r1, r0, ror fp
   19bb8:	andeq	r9, r1, r0, ror fp
   19bbc:	andeq	r9, r1, r0, ror fp
   19bc0:	andeq	r9, r1, r0, ror fp
   19bc4:	andeq	r9, r1, r0, ror fp
   19bc8:	andeq	r9, r1, r0, ror fp
   19bcc:	andeq	r9, r1, r0, ror fp
   19bd0:	andeq	r9, r1, r0, ror fp
   19bd4:	andeq	r9, r1, r0, ror fp
   19bd8:	andeq	r9, r1, r0, ror fp
   19bdc:	andeq	r9, r1, r0, ror fp
   19be0:	andeq	r9, r1, r0, ror fp
   19be4:	andeq	r9, r1, r0, ror fp
   19be8:	andeq	r9, r1, r0, ror fp
   19bec:	andeq	r9, r1, r0, ror fp
   19bf0:	andeq	r9, r1, r0, ror fp
   19bf4:	andeq	r9, r1, r0, ror fp
   19bf8:	andeq	r9, r1, r0, ror fp
   19bfc:	andeq	r9, r1, r0, ror fp
   19c00:	andeq	r9, r1, r0, ror fp
   19c04:	andeq	r9, r1, r0, ror fp
   19c08:	andeq	r9, r1, r0, ror fp
   19c0c:	andeq	r9, r1, r0, ror fp
   19c10:	andeq	r9, r1, r0, ror fp
   19c14:	andeq	r9, r1, r0, ror fp
   19c18:	andeq	sl, r1, r8, lsr #1
   19c1c:	mov	r9, r0
   19c20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19c24:	tst	r0, #1
   19c28:	beq	19640 <__assert_fail@plt+0x8058>
   19c2c:	b	198f4 <__assert_fail@plt+0x830c>
   19c30:	mov	r0, #0
   19c34:	str	r0, [fp, #-56]	; 0xffffffc8
   19c38:	ldr	r0, [sp, #32]
   19c3c:	cmp	r0, #0
   19c40:	beq	19cf8 <__assert_fail@plt+0x8710>
   19c44:	add	r0, sl, #2
   19c48:	mov	r1, r7
   19c4c:	cmp	r0, r7
   19c50:	bcs	19cf8 <__assert_fail@plt+0x8710>
   19c54:	add	r1, sl, lr
   19c58:	ldrb	r1, [r1, #1]
   19c5c:	cmp	r1, #63	; 0x3f
   19c60:	bne	19cf8 <__assert_fail@plt+0x8710>
   19c64:	ldrb	r8, [lr, r0]
   19c68:	sub	r2, r8, #33	; 0x21
   19c6c:	cmp	r2, #29
   19c70:	bhi	19cf8 <__assert_fail@plt+0x8710>
   19c74:	mov	r1, r4
   19c78:	movw	r4, #20929	; 0x51c1
   19c7c:	mov	r3, #1
   19c80:	movt	r4, #14336	; 0x3800
   19c84:	tst	r4, r3, lsl r2
   19c88:	beq	19fb4 <__assert_fail@plt+0x89cc>
   19c8c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   19c90:	tst	r2, #1
   19c94:	bne	1a070 <__assert_fail@plt+0x8a88>
   19c98:	cmp	r9, r5
   19c9c:	mov	r6, r8
   19ca0:	mov	r4, r1
   19ca4:	mov	sl, r0
   19ca8:	mov	r8, #0
   19cac:	movcc	r2, #63	; 0x3f
   19cb0:	strbcc	r2, [ip, r9]
   19cb4:	add	r2, r9, #1
   19cb8:	cmp	r2, r5
   19cbc:	movcc	r3, #34	; 0x22
   19cc0:	strbcc	r3, [ip, r2]
   19cc4:	add	r2, r9, #2
   19cc8:	cmp	r2, r5
   19ccc:	movcc	r3, #34	; 0x22
   19cd0:	strbcc	r3, [ip, r2]
   19cd4:	add	r2, r9, #3
   19cd8:	add	r9, r9, #4
   19cdc:	cmp	r2, r5
   19ce0:	movcc	r3, #63	; 0x3f
   19ce4:	strbcc	r3, [ip, r2]
   19ce8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19cec:	tst	r0, #1
   19cf0:	beq	19640 <__assert_fail@plt+0x8058>
   19cf4:	b	198f4 <__assert_fail@plt+0x830c>
   19cf8:	mov	r8, #0
   19cfc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19d00:	tst	r0, #1
   19d04:	beq	19640 <__assert_fail@plt+0x8058>
   19d08:	b	198f4 <__assert_fail@plt+0x830c>
   19d0c:	mov	r8, #1
   19d10:	mov	r5, #0
   19d14:	sub	r4, fp, #40	; 0x28
   19d18:	str	r5, [sp, #68]	; 0x44
   19d1c:	add	r5, r5, sl
   19d20:	sub	r0, fp, #44	; 0x2c
   19d24:	mov	r3, r4
   19d28:	add	r1, lr, r5
   19d2c:	sub	r2, r7, r5
   19d30:	bl	1cc30 <__assert_fail@plt+0xb648>
   19d34:	cmn	r0, #2
   19d38:	beq	19d90 <__assert_fail@plt+0x87a8>
   19d3c:	cmn	r0, #1
   19d40:	beq	19d84 <__assert_fail@plt+0x879c>
   19d44:	ldr	r5, [sp, #68]	; 0x44
   19d48:	cmp	r0, #0
   19d4c:	beq	19dcc <__assert_fail@plt+0x87e4>
   19d50:	add	r5, r0, r5
   19d54:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19d58:	bl	11384 <iswprint@plt>
   19d5c:	cmp	r0, #0
   19d60:	sub	r4, fp, #40	; 0x28
   19d64:	movwne	r0, #1
   19d68:	and	r8, r8, r0
   19d6c:	mov	r0, r4
   19d70:	bl	11330 <mbsinit@plt>
   19d74:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19d78:	cmp	r0, #0
   19d7c:	beq	19d18 <__assert_fail@plt+0x8730>
   19d80:	b	19dd0 <__assert_fail@plt+0x87e8>
   19d84:	mov	r8, #0
   19d88:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19d8c:	b	19dc4 <__assert_fail@plt+0x87dc>
   19d90:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19d94:	mov	r8, #0
   19d98:	cmp	r5, r7
   19d9c:	bcs	19dc4 <__assert_fail@plt+0x87dc>
   19da0:	ldrb	r0, [lr, r5]
   19da4:	cmp	r0, #0
   19da8:	beq	19dc4 <__assert_fail@plt+0x87dc>
   19dac:	ldr	r0, [sp, #68]	; 0x44
   19db0:	add	r0, r0, #1
   19db4:	add	r5, r0, sl
   19db8:	str	r0, [sp, #68]	; 0x44
   19dbc:	cmp	r5, r7
   19dc0:	bcc	19da0 <__assert_fail@plt+0x87b8>
   19dc4:	ldr	r5, [sp, #68]	; 0x44
   19dc8:	b	19dd0 <__assert_fail@plt+0x87e8>
   19dcc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   19dd0:	mov	r1, r5
   19dd4:	ldr	r5, [sp, #28]
   19dd8:	ldr	r4, [sp, #84]	; 0x54
   19ddc:	ldr	r0, [sp, #52]	; 0x34
   19de0:	ldr	ip, [fp, #-84]	; 0xffffffac
   19de4:	cmp	r1, #1
   19de8:	orr	r2, r8, r0
   19dec:	mov	r0, r1
   19df0:	bhi	19dfc <__assert_fail@plt+0x8814>
   19df4:	tst	r2, #1
   19df8:	bne	19634 <__assert_fail@plt+0x804c>
   19dfc:	add	r0, r0, sl
   19e00:	str	r2, [sp, #84]	; 0x54
   19e04:	str	r0, [fp, #-56]	; 0xffffffc8
   19e08:	mov	r0, #0
   19e0c:	tst	r2, #1
   19e10:	bne	19ef0 <__assert_fail@plt+0x8908>
   19e14:	ldr	r1, [fp, #-76]	; 0xffffffb4
   19e18:	tst	r1, #1
   19e1c:	bne	1a070 <__assert_fail@plt+0x8a88>
   19e20:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19e24:	ldr	r0, [fp, #-52]	; 0xffffffcc
   19e28:	subs	r2, r1, #2
   19e2c:	movwne	r2, #1
   19e30:	orr	r2, r2, r0
   19e34:	tst	r2, #1
   19e38:	bne	19e74 <__assert_fail@plt+0x888c>
   19e3c:	cmp	r9, r5
   19e40:	add	r2, r9, #1
   19e44:	mov	r0, #1
   19e48:	movcc	r1, #39	; 0x27
   19e4c:	str	r0, [fp, #-52]	; 0xffffffcc
   19e50:	strbcc	r1, [ip, r9]
   19e54:	cmp	r2, r5
   19e58:	movcc	r1, #36	; 0x24
   19e5c:	strbcc	r1, [ip, r2]
   19e60:	add	r2, r9, #2
   19e64:	add	r9, r9, #3
   19e68:	cmp	r2, r5
   19e6c:	movcc	r1, #39	; 0x27
   19e70:	strbcc	r1, [ip, r2]
   19e74:	cmp	r9, r5
   19e78:	add	r2, r9, #1
   19e7c:	movcc	r1, #92	; 0x5c
   19e80:	strbcc	r1, [ip, r9]
   19e84:	cmp	r2, r5
   19e88:	bcs	19e9c <__assert_fail@plt+0x88b4>
   19e8c:	uxtb	r3, r6
   19e90:	mov	r1, #48	; 0x30
   19e94:	orr	r3, r1, r3, lsr #6
   19e98:	strb	r3, [ip, r2]
   19e9c:	add	r2, r9, #2
   19ea0:	add	r9, r9, #3
   19ea4:	cmp	r2, r5
   19ea8:	lsrcc	r3, r6, #3
   19eac:	movcc	r1, #6
   19eb0:	bficc	r3, r1, #3, #29
   19eb4:	mov	r1, #6
   19eb8:	bfi	r6, r1, #3, #29
   19ebc:	strbcc	r3, [ip, r2]
   19ec0:	mov	r2, #1
   19ec4:	b	19f24 <__assert_fail@plt+0x893c>
   19ec8:	ldr	r1, [sp, #80]	; 0x50
   19ecc:	cmp	r9, r2
   19ed0:	mov	r5, r2
   19ed4:	ldr	r2, [sp, #84]	; 0x54
   19ed8:	strbcc	r6, [ip, r9]
   19edc:	add	r9, r9, #1
   19ee0:	ldrb	r6, [r1, sl]
   19ee4:	mov	sl, r3
   19ee8:	tst	r2, #1
   19eec:	beq	19e14 <__assert_fail@plt+0x882c>
   19ef0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   19ef4:	tst	r1, #1
   19ef8:	beq	19f18 <__assert_fail@plt+0x8930>
   19efc:	cmp	r9, r5
   19f00:	mov	r2, r0
   19f04:	movcc	r1, #92	; 0x5c
   19f08:	strbcc	r1, [ip, r9]
   19f0c:	add	r9, r9, #1
   19f10:	mov	r1, #0
   19f14:	b	19f20 <__assert_fail@plt+0x8938>
   19f18:	mov	r1, #0
   19f1c:	mov	r2, r0
   19f20:	str	r1, [fp, #-48]	; 0xffffffd0
   19f24:	mov	r0, r2
   19f28:	and	r1, r2, #1
   19f2c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   19f30:	add	r3, sl, #1
   19f34:	cmp	r2, r3
   19f38:	bls	19f98 <__assert_fail@plt+0x89b0>
   19f3c:	mov	r2, r5
   19f40:	ldr	r5, [fp, #-52]	; 0xffffffcc
   19f44:	cmp	r1, #0
   19f48:	movwne	r1, #1
   19f4c:	mvn	r5, r5
   19f50:	orr	r5, r5, r1
   19f54:	tst	r5, #1
   19f58:	bne	19ec8 <__assert_fail@plt+0x88e0>
   19f5c:	cmp	r9, r2
   19f60:	movcc	r5, r4
   19f64:	movcc	r4, #39	; 0x27
   19f68:	strbcc	r4, [ip, r9]
   19f6c:	movcc	r4, r5
   19f70:	add	r5, r9, #1
   19f74:	add	r9, r9, #2
   19f78:	cmp	r5, r2
   19f7c:	movcc	r1, r4
   19f80:	movcc	r4, #39	; 0x27
   19f84:	strbcc	r4, [ip, r5]
   19f88:	movcc	r4, r1
   19f8c:	mov	r1, #0
   19f90:	str	r1, [fp, #-52]	; 0xffffffcc
   19f94:	b	19ec8 <__assert_fail@plt+0x88e0>
   19f98:	cmp	r1, #0
   19f9c:	movwne	r1, #1
   19fa0:	str	r1, [fp, #-56]	; 0xffffffc8
   19fa4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   19fa8:	cmp	r0, #0
   19fac:	beq	199d4 <__assert_fail@plt+0x83ec>
   19fb0:	b	19a08 <__assert_fail@plt+0x8420>
   19fb4:	mov	r8, #0
   19fb8:	mov	r4, r1
   19fbc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19fc0:	tst	r0, #1
   19fc4:	beq	19640 <__assert_fail@plt+0x8058>
   19fc8:	b	198f4 <__assert_fail@plt+0x830c>
   19fcc:	mov	r7, sl
   19fd0:	b	19fd8 <__assert_fail@plt+0x89f0>
   19fd4:	mvn	r7, #0
   19fd8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19fdc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   19fe0:	ldr	r2, [sp, #88]	; 0x58
   19fe4:	eor	r0, r1, #2
   19fe8:	orr	r0, r0, r9
   19fec:	clz	r0, r0
   19ff0:	lsr	r0, r0, #5
   19ff4:	tst	r3, r0
   19ff8:	bne	1a070 <__assert_fail@plt+0x8a88>
   19ffc:	subs	r0, r1, #2
   1a000:	movwne	r0, #1
   1a004:	orr	r0, r3, r0
   1a008:	tst	r0, #1
   1a00c:	ldreq	r0, [sp, #60]	; 0x3c
   1a010:	eoreq	r0, r0, #1
   1a014:	tsteq	r0, #1
   1a018:	bne	1a14c <__assert_fail@plt+0x8b64>
   1a01c:	tst	r4, #1
   1a020:	bne	1a110 <__assert_fail@plt+0x8b28>
   1a024:	ldr	r6, [sp, #56]	; 0x38
   1a028:	mov	r8, #0
   1a02c:	cmp	r6, #0
   1a030:	beq	1a148 <__assert_fail@plt+0x8b60>
   1a034:	mov	r1, #0
   1a038:	mov	r4, #2
   1a03c:	cmp	r5, #0
   1a040:	mov	r0, r2
   1a044:	mov	r3, #0
   1a048:	str	r1, [sp, #84]	; 0x54
   1a04c:	beq	18e94 <__assert_fail@plt+0x78ac>
   1a050:	b	1a14c <__assert_fail@plt+0x8b64>
   1a054:	movw	r0, #59070	; 0xe6be
   1a058:	movt	r0, #1
   1a05c:	str	r0, [sp, #76]	; 0x4c
   1a060:	mov	r9, #0
   1a064:	tst	r8, #1
   1a068:	beq	1912c <__assert_fail@plt+0x7b44>
   1a06c:	b	1926c <__assert_fail@plt+0x7c84>
   1a070:	ldr	r1, [sp, #88]	; 0x58
   1a074:	mov	r0, #2
   1a078:	tst	r1, #1
   1a07c:	movwne	r0, #4
   1a080:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1a084:	ldr	r1, [fp, #12]
   1a088:	cmp	r2, #2
   1a08c:	moveq	r2, r0
   1a090:	b	1a0c8 <__assert_fail@plt+0x8ae0>
   1a094:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a098:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a09c:	ldr	r1, [fp, #12]
   1a0a0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1a0a4:	b	1a0c8 <__assert_fail@plt+0x8ae0>
   1a0a8:	ldr	r1, [sp, #88]	; 0x58
   1a0ac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a0b0:	ldr	r5, [sp, #28]
   1a0b4:	mov	r0, #2
   1a0b8:	tst	r1, #1
   1a0bc:	ldr	r1, [fp, #12]
   1a0c0:	movwne	r0, #4
   1a0c4:	mov	r2, r0
   1a0c8:	mov	r0, #0
   1a0cc:	bic	r1, r1, #2
   1a0d0:	str	r2, [sp]
   1a0d4:	mov	r2, lr
   1a0d8:	str	r0, [sp, #8]
   1a0dc:	ldr	r0, [sp, #72]	; 0x48
   1a0e0:	str	r1, [sp, #4]
   1a0e4:	mov	r1, r5
   1a0e8:	str	r0, [sp, #12]
   1a0ec:	ldr	r0, [sp, #76]	; 0x4c
   1a0f0:	str	r0, [sp, #16]
   1a0f4:	mov	r0, ip
   1a0f8:	mov	r3, r7
   1a0fc:	bl	18e08 <__assert_fail@plt+0x7820>
   1a100:	mov	r9, r0
   1a104:	mov	r0, r9
   1a108:	sub	sp, fp, #28
   1a10c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a110:	mov	r0, #5
   1a114:	ldr	r1, [sp, #56]	; 0x38
   1a118:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1a11c:	str	r0, [sp]
   1a120:	ldr	r0, [fp, #12]
   1a124:	str	r0, [sp, #4]
   1a128:	ldr	r0, [fp, #16]
   1a12c:	str	r0, [sp, #8]
   1a130:	ldr	r0, [sp, #72]	; 0x48
   1a134:	str	r0, [sp, #12]
   1a138:	ldr	r0, [sp, #76]	; 0x4c
   1a13c:	str	r0, [sp, #16]
   1a140:	ldr	r0, [fp, #-84]	; 0xffffffac
   1a144:	b	1a0f8 <__assert_fail@plt+0x8b10>
   1a148:	mov	r3, #0
   1a14c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1a150:	cmp	r1, #0
   1a154:	beq	1a190 <__assert_fail@plt+0x8ba8>
   1a158:	ldr	r2, [fp, #-84]	; 0xffffffac
   1a15c:	tst	r3, #1
   1a160:	bne	1a194 <__assert_fail@plt+0x8bac>
   1a164:	ldrb	r0, [r1]
   1a168:	cmp	r0, #0
   1a16c:	beq	1a194 <__assert_fail@plt+0x8bac>
   1a170:	add	r1, r1, #1
   1a174:	cmp	r9, r5
   1a178:	strbcc	r0, [r2, r9]
   1a17c:	add	r9, r9, #1
   1a180:	ldrb	r0, [r1], #1
   1a184:	cmp	r0, #0
   1a188:	bne	1a174 <__assert_fail@plt+0x8b8c>
   1a18c:	b	1a194 <__assert_fail@plt+0x8bac>
   1a190:	ldr	r2, [fp, #-84]	; 0xffffffac
   1a194:	cmp	r9, r5
   1a198:	movcc	r0, #0
   1a19c:	strbcc	r0, [r2, r9]
   1a1a0:	mov	r0, r9
   1a1a4:	sub	sp, fp, #28
   1a1a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1ac:	mov	r0, #4
   1a1b0:	b	1a080 <__assert_fail@plt+0x8a98>
   1a1b4:	bl	115c4 <abort@plt>
   1a1b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1bc:	add	fp, sp, #28
   1a1c0:	sub	sp, sp, #28
   1a1c4:	movw	r5, #61920	; 0xf1e0
   1a1c8:	cmp	r2, #0
   1a1cc:	mov	r4, r1
   1a1d0:	mov	r7, r0
   1a1d4:	str	r0, [sp, #20]
   1a1d8:	movt	r5, #2
   1a1dc:	movne	r5, r2
   1a1e0:	bl	114b0 <__errno_location@plt>
   1a1e4:	mov	sl, r0
   1a1e8:	ldr	r2, [r5, #40]	; 0x28
   1a1ec:	ldr	r3, [r5, #44]	; 0x2c
   1a1f0:	ldm	r5, {r0, r1}
   1a1f4:	orr	r8, r1, #1
   1a1f8:	add	r9, r5, #8
   1a1fc:	mov	r1, #0
   1a200:	ldr	r6, [sl]
   1a204:	stm	sp, {r0, r8, r9}
   1a208:	mov	r0, #0
   1a20c:	str	r2, [sp, #12]
   1a210:	str	r3, [sp, #16]
   1a214:	mov	r2, r7
   1a218:	mov	r3, r4
   1a21c:	str	r6, [sp, #24]
   1a220:	mov	r6, r4
   1a224:	bl	18e08 <__assert_fail@plt+0x7820>
   1a228:	add	r7, r0, #1
   1a22c:	mov	r0, r7
   1a230:	bl	1b344 <__assert_fail@plt+0x9d5c>
   1a234:	mov	r4, r0
   1a238:	ldr	r0, [r5]
   1a23c:	ldr	r2, [r5, #44]	; 0x2c
   1a240:	ldr	r1, [r5, #40]	; 0x28
   1a244:	mov	r3, r6
   1a248:	stm	sp, {r0, r8, r9}
   1a24c:	str	r2, [sp, #16]
   1a250:	ldr	r2, [sp, #20]
   1a254:	str	r1, [sp, #12]
   1a258:	mov	r0, r4
   1a25c:	mov	r1, r7
   1a260:	bl	18e08 <__assert_fail@plt+0x7820>
   1a264:	ldr	r0, [sp, #24]
   1a268:	str	r0, [sl]
   1a26c:	mov	r0, r4
   1a270:	sub	sp, fp, #28
   1a274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a27c:	add	fp, sp, #28
   1a280:	sub	sp, sp, #36	; 0x24
   1a284:	movw	r8, #61920	; 0xf1e0
   1a288:	cmp	r3, #0
   1a28c:	mov	r4, r2
   1a290:	str	r2, [sp, #24]
   1a294:	mov	r5, r1
   1a298:	mov	r6, r0
   1a29c:	str	r0, [sp, #20]
   1a2a0:	movt	r8, #2
   1a2a4:	movne	r8, r3
   1a2a8:	bl	114b0 <__errno_location@plt>
   1a2ac:	str	r0, [sp, #28]
   1a2b0:	ldr	r1, [r8, #40]	; 0x28
   1a2b4:	ldr	r2, [r8, #44]	; 0x2c
   1a2b8:	ldr	r7, [r0]
   1a2bc:	cmp	r4, #0
   1a2c0:	add	sl, r8, #8
   1a2c4:	mov	r0, #0
   1a2c8:	ldm	r8, {r3, r9}
   1a2cc:	orreq	r9, r9, #1
   1a2d0:	stm	sp, {r3, r9, sl}
   1a2d4:	str	r1, [sp, #12]
   1a2d8:	str	r2, [sp, #16]
   1a2dc:	mov	r1, #0
   1a2e0:	mov	r2, r6
   1a2e4:	mov	r3, r5
   1a2e8:	str	r7, [sp, #32]
   1a2ec:	mov	r7, r5
   1a2f0:	bl	18e08 <__assert_fail@plt+0x7820>
   1a2f4:	add	r4, r0, #1
   1a2f8:	mov	r5, r0
   1a2fc:	mov	r0, r4
   1a300:	bl	1b344 <__assert_fail@plt+0x9d5c>
   1a304:	mov	r6, r0
   1a308:	ldr	r0, [r8]
   1a30c:	ldr	r2, [r8, #44]	; 0x2c
   1a310:	ldr	r1, [r8, #40]	; 0x28
   1a314:	mov	r3, r7
   1a318:	stm	sp, {r0, r9, sl}
   1a31c:	str	r2, [sp, #16]
   1a320:	ldr	r2, [sp, #20]
   1a324:	str	r1, [sp, #12]
   1a328:	mov	r0, r6
   1a32c:	mov	r1, r4
   1a330:	bl	18e08 <__assert_fail@plt+0x7820>
   1a334:	ldr	r0, [sp, #24]
   1a338:	ldr	r1, [sp, #32]
   1a33c:	ldr	r2, [sp, #28]
   1a340:	cmp	r0, #0
   1a344:	str	r1, [r2]
   1a348:	strne	r5, [r0]
   1a34c:	mov	r0, r6
   1a350:	sub	sp, fp, #28
   1a354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a358:	push	{r4, r5, r6, r7, fp, lr}
   1a35c:	add	fp, sp, #16
   1a360:	movw	r4, #61840	; 0xf190
   1a364:	movt	r4, #2
   1a368:	ldrd	r6, [r4]
   1a36c:	cmp	r7, #2
   1a370:	blt	1a39c <__assert_fail@plt+0x8db4>
   1a374:	add	r5, r6, #12
   1a378:	mov	r7, #0
   1a37c:	ldr	r0, [r5, r7, lsl #3]
   1a380:	bl	17634 <__assert_fail@plt+0x604c>
   1a384:	ldr	r1, [r4, #4]
   1a388:	add	r2, r7, #2
   1a38c:	add	r0, r7, #1
   1a390:	mov	r7, r0
   1a394:	cmp	r2, r1
   1a398:	blt	1a37c <__assert_fail@plt+0x8d94>
   1a39c:	ldr	r0, [r6, #4]
   1a3a0:	movw	r5, #61968	; 0xf210
   1a3a4:	movt	r5, #2
   1a3a8:	cmp	r0, r5
   1a3ac:	beq	1a3c0 <__assert_fail@plt+0x8dd8>
   1a3b0:	bl	17634 <__assert_fail@plt+0x604c>
   1a3b4:	mov	r0, #256	; 0x100
   1a3b8:	str	r0, [r4, #8]
   1a3bc:	str	r5, [r4, #12]
   1a3c0:	add	r5, r4, #8
   1a3c4:	cmp	r6, r5
   1a3c8:	beq	1a3d8 <__assert_fail@plt+0x8df0>
   1a3cc:	mov	r0, r6
   1a3d0:	bl	17634 <__assert_fail@plt+0x604c>
   1a3d4:	str	r5, [r4]
   1a3d8:	mov	r0, #1
   1a3dc:	str	r0, [r4, #4]
   1a3e0:	pop	{r4, r5, r6, r7, fp, pc}
   1a3e4:	movw	r3, #61920	; 0xf1e0
   1a3e8:	mvn	r2, #0
   1a3ec:	movt	r3, #2
   1a3f0:	b	1a3f4 <__assert_fail@plt+0x8e0c>
   1a3f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3f8:	add	fp, sp, #28
   1a3fc:	sub	sp, sp, #44	; 0x2c
   1a400:	mov	r7, r3
   1a404:	str	r2, [sp, #36]	; 0x24
   1a408:	str	r1, [sp, #32]
   1a40c:	mov	r5, r0
   1a410:	bl	114b0 <__errno_location@plt>
   1a414:	cmp	r5, #0
   1a418:	bmi	1a580 <__assert_fail@plt+0x8f98>
   1a41c:	cmn	r5, #-2147483647	; 0x80000001
   1a420:	beq	1a580 <__assert_fail@plt+0x8f98>
   1a424:	movw	r8, #61840	; 0xf190
   1a428:	mov	r4, r0
   1a42c:	ldr	r0, [r0]
   1a430:	movt	r8, #2
   1a434:	str	r4, [sp, #28]
   1a438:	ldr	r1, [r8, #4]
   1a43c:	ldr	r6, [r8]
   1a440:	str	r0, [sp, #24]
   1a444:	cmp	r1, r5
   1a448:	ble	1a454 <__assert_fail@plt+0x8e6c>
   1a44c:	mov	sl, r6
   1a450:	b	1a4bc <__assert_fail@plt+0x8ed4>
   1a454:	mov	r0, #8
   1a458:	add	r9, r8, #8
   1a45c:	str	r1, [fp, #-32]	; 0xffffffe0
   1a460:	sub	r1, r5, r1
   1a464:	mvn	r3, #-2147483648	; 0x80000000
   1a468:	str	r0, [sp]
   1a46c:	subs	r0, r6, r9
   1a470:	add	r2, r1, #1
   1a474:	sub	r1, fp, #32
   1a478:	movne	r0, r6
   1a47c:	bl	1b544 <__assert_fail@plt+0x9f5c>
   1a480:	mov	sl, r0
   1a484:	cmp	r6, r9
   1a488:	str	r0, [r8]
   1a48c:	bne	1a498 <__assert_fail@plt+0x8eb0>
   1a490:	ldrd	r0, [r8, #8]
   1a494:	stm	sl, {r0, r1}
   1a498:	ldr	r1, [r8, #4]
   1a49c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a4a0:	add	r0, sl, r1, lsl #3
   1a4a4:	sub	r1, r2, r1
   1a4a8:	lsl	r2, r1, #3
   1a4ac:	mov	r1, #0
   1a4b0:	bl	114c8 <memset@plt>
   1a4b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a4b8:	str	r0, [r8, #4]
   1a4bc:	mov	r9, sl
   1a4c0:	ldm	r7, {r0, r1}
   1a4c4:	orr	r8, r1, #1
   1a4c8:	add	r1, r7, #8
   1a4cc:	ldr	r2, [r7, #40]	; 0x28
   1a4d0:	ldr	r3, [r7, #44]	; 0x2c
   1a4d4:	ldr	r6, [r9, r5, lsl #3]!
   1a4d8:	str	r1, [sp, #20]
   1a4dc:	ldr	r4, [r9, #4]!
   1a4e0:	stm	sp, {r0, r8}
   1a4e4:	add	r0, sp, #8
   1a4e8:	stm	r0, {r1, r2, r3}
   1a4ec:	ldr	r2, [sp, #32]
   1a4f0:	ldr	r3, [sp, #36]	; 0x24
   1a4f4:	mov	r1, r6
   1a4f8:	mov	r0, r4
   1a4fc:	bl	18e08 <__assert_fail@plt+0x7820>
   1a500:	cmp	r6, r0
   1a504:	bhi	1a568 <__assert_fail@plt+0x8f80>
   1a508:	add	r6, r0, #1
   1a50c:	movw	r0, #61968	; 0xf210
   1a510:	movt	r0, #2
   1a514:	str	r6, [sl, r5, lsl #3]
   1a518:	cmp	r4, r0
   1a51c:	beq	1a528 <__assert_fail@plt+0x8f40>
   1a520:	mov	r0, r4
   1a524:	bl	17634 <__assert_fail@plt+0x604c>
   1a528:	mov	r0, r6
   1a52c:	bl	1b344 <__assert_fail@plt+0x9d5c>
   1a530:	str	r0, [r9]
   1a534:	mov	r4, r0
   1a538:	add	r3, sp, #8
   1a53c:	ldr	r0, [r7]
   1a540:	ldr	r1, [r7, #40]	; 0x28
   1a544:	ldr	r2, [r7, #44]	; 0x2c
   1a548:	stm	sp, {r0, r8}
   1a54c:	ldr	r0, [sp, #20]
   1a550:	stm	r3, {r0, r1, r2}
   1a554:	ldr	r2, [sp, #32]
   1a558:	ldr	r3, [sp, #36]	; 0x24
   1a55c:	mov	r0, r4
   1a560:	mov	r1, r6
   1a564:	bl	18e08 <__assert_fail@plt+0x7820>
   1a568:	ldr	r1, [sp, #24]
   1a56c:	ldr	r0, [sp, #28]
   1a570:	str	r1, [r0]
   1a574:	mov	r0, r4
   1a578:	sub	sp, fp, #28
   1a57c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a580:	bl	115c4 <abort@plt>
   1a584:	movw	r3, #61920	; 0xf1e0
   1a588:	movt	r3, #2
   1a58c:	b	1a3f4 <__assert_fail@plt+0x8e0c>
   1a590:	movw	r3, #61920	; 0xf1e0
   1a594:	mov	r1, r0
   1a598:	mov	r0, #0
   1a59c:	mvn	r2, #0
   1a5a0:	movt	r3, #2
   1a5a4:	b	1a3f4 <__assert_fail@plt+0x8e0c>
   1a5a8:	movw	r3, #61920	; 0xf1e0
   1a5ac:	mov	r2, r1
   1a5b0:	mov	r1, r0
   1a5b4:	mov	r0, #0
   1a5b8:	movt	r3, #2
   1a5bc:	b	1a3f4 <__assert_fail@plt+0x8e0c>
   1a5c0:	push	{fp, lr}
   1a5c4:	mov	fp, sp
   1a5c8:	sub	sp, sp, #48	; 0x30
   1a5cc:	vmov.i32	q8, #0	; 0x00000000
   1a5d0:	mov	ip, #32
   1a5d4:	mov	r3, sp
   1a5d8:	mov	lr, r2
   1a5dc:	cmp	r1, #10
   1a5e0:	add	r2, r3, #16
   1a5e4:	vst1.64	{d16-d17}, [r3], ip
   1a5e8:	vst1.64	{d16-d17}, [r2]
   1a5ec:	vst1.64	{d16-d17}, [r3]
   1a5f0:	beq	1a610 <__assert_fail@plt+0x9028>
   1a5f4:	str	r1, [sp]
   1a5f8:	mov	r3, sp
   1a5fc:	mov	r1, lr
   1a600:	mvn	r2, #0
   1a604:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1a608:	mov	sp, fp
   1a60c:	pop	{fp, pc}
   1a610:	bl	115c4 <abort@plt>
   1a614:	push	{r4, sl, fp, lr}
   1a618:	add	fp, sp, #8
   1a61c:	sub	sp, sp, #48	; 0x30
   1a620:	vmov.i32	q8, #0	; 0x00000000
   1a624:	mov	ip, r3
   1a628:	mov	r3, sp
   1a62c:	mov	lr, #32
   1a630:	cmp	r1, #10
   1a634:	add	r4, r3, #16
   1a638:	vst1.64	{d16-d17}, [r3], lr
   1a63c:	vst1.64	{d16-d17}, [r4]
   1a640:	vst1.64	{d16-d17}, [r3]
   1a644:	beq	1a664 <__assert_fail@plt+0x907c>
   1a648:	str	r1, [sp]
   1a64c:	mov	r1, r2
   1a650:	mov	r3, sp
   1a654:	mov	r2, ip
   1a658:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1a65c:	sub	sp, fp, #8
   1a660:	pop	{r4, sl, fp, pc}
   1a664:	bl	115c4 <abort@plt>
   1a668:	push	{fp, lr}
   1a66c:	mov	fp, sp
   1a670:	sub	sp, sp, #48	; 0x30
   1a674:	vmov.i32	q8, #0	; 0x00000000
   1a678:	mov	r3, sp
   1a67c:	mov	ip, #32
   1a680:	cmp	r0, #10
   1a684:	add	r2, r3, #16
   1a688:	vst1.64	{d16-d17}, [r3], ip
   1a68c:	vst1.64	{d16-d17}, [r2]
   1a690:	vst1.64	{d16-d17}, [r3]
   1a694:	beq	1a6b4 <__assert_fail@plt+0x90cc>
   1a698:	str	r0, [sp]
   1a69c:	mov	r3, sp
   1a6a0:	mov	r0, #0
   1a6a4:	mvn	r2, #0
   1a6a8:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1a6ac:	mov	sp, fp
   1a6b0:	pop	{fp, pc}
   1a6b4:	bl	115c4 <abort@plt>
   1a6b8:	push	{fp, lr}
   1a6bc:	mov	fp, sp
   1a6c0:	sub	sp, sp, #48	; 0x30
   1a6c4:	vmov.i32	q8, #0	; 0x00000000
   1a6c8:	mov	r3, sp
   1a6cc:	mov	ip, #32
   1a6d0:	cmp	r0, #10
   1a6d4:	add	lr, r3, #16
   1a6d8:	vst1.64	{d16-d17}, [r3], ip
   1a6dc:	vst1.64	{d16-d17}, [lr]
   1a6e0:	vst1.64	{d16-d17}, [r3]
   1a6e4:	beq	1a700 <__assert_fail@plt+0x9118>
   1a6e8:	str	r0, [sp]
   1a6ec:	mov	r3, sp
   1a6f0:	mov	r0, #0
   1a6f4:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1a6f8:	mov	sp, fp
   1a6fc:	pop	{fp, pc}
   1a700:	bl	115c4 <abort@plt>
   1a704:	push	{r4, sl, fp, lr}
   1a708:	add	fp, sp, #8
   1a70c:	sub	sp, sp, #48	; 0x30
   1a710:	mov	lr, r0
   1a714:	movw	r0, #61920	; 0xf1e0
   1a718:	mov	ip, r1
   1a71c:	mov	r1, #32
   1a720:	mov	r4, #1
   1a724:	movt	r0, #2
   1a728:	add	r3, r0, #16
   1a72c:	vld1.64	{d16-d17}, [r0], r1
   1a730:	vld1.64	{d20-d21}, [r0]
   1a734:	vld1.64	{d18-d19}, [r3]
   1a738:	mov	r3, sp
   1a73c:	add	r0, r3, #32
   1a740:	add	r1, r3, #16
   1a744:	vst1.64	{d20-d21}, [r0]
   1a748:	mov	r0, #28
   1a74c:	vst1.64	{d18-d19}, [r1]
   1a750:	mov	r1, r3
   1a754:	and	r0, r0, r2, lsr #3
   1a758:	and	r2, r2, #31
   1a75c:	vst1.64	{d16-d17}, [r1], r0
   1a760:	ldr	r0, [r1, #8]
   1a764:	bic	r4, r4, r0, lsr r2
   1a768:	eor	r0, r0, r4, lsl r2
   1a76c:	mov	r2, ip
   1a770:	str	r0, [r1, #8]
   1a774:	mov	r0, #0
   1a778:	mov	r1, lr
   1a77c:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1a780:	sub	sp, fp, #8
   1a784:	pop	{r4, sl, fp, pc}
   1a788:	push	{fp, lr}
   1a78c:	mov	fp, sp
   1a790:	sub	sp, sp, #48	; 0x30
   1a794:	mov	ip, r0
   1a798:	movw	r0, #61920	; 0xf1e0
   1a79c:	mov	r2, #32
   1a7a0:	movt	r0, #2
   1a7a4:	add	r3, r0, #16
   1a7a8:	vld1.64	{d16-d17}, [r0], r2
   1a7ac:	vld1.64	{d20-d21}, [r0]
   1a7b0:	vld1.64	{d18-d19}, [r3]
   1a7b4:	mov	r3, sp
   1a7b8:	add	r0, r3, #32
   1a7bc:	add	r2, r3, #16
   1a7c0:	vst1.64	{d20-d21}, [r0]
   1a7c4:	mov	r0, #28
   1a7c8:	vst1.64	{d18-d19}, [r2]
   1a7cc:	mov	r2, r3
   1a7d0:	and	r0, r0, r1, lsr #3
   1a7d4:	and	r1, r1, #31
   1a7d8:	vst1.64	{d16-d17}, [r2], r0
   1a7dc:	mov	r0, #1
   1a7e0:	ldr	lr, [r2, #8]
   1a7e4:	bic	r0, r0, lr, lsr r1
   1a7e8:	eor	r0, lr, r0, lsl r1
   1a7ec:	mov	r1, ip
   1a7f0:	str	r0, [r2, #8]
   1a7f4:	mov	r0, #0
   1a7f8:	mvn	r2, #0
   1a7fc:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1a800:	mov	sp, fp
   1a804:	pop	{fp, pc}
   1a808:	push	{fp, lr}
   1a80c:	mov	fp, sp
   1a810:	sub	sp, sp, #48	; 0x30
   1a814:	mov	r1, r0
   1a818:	movw	r0, #61920	; 0xf1e0
   1a81c:	mov	r3, #32
   1a820:	movt	r0, #2
   1a824:	add	r2, r0, #16
   1a828:	vld1.64	{d16-d17}, [r0], r3
   1a82c:	mov	r3, sp
   1a830:	vld1.64	{d18-d19}, [r2]
   1a834:	vld1.64	{d20-d21}, [r0]
   1a838:	add	r2, r3, #16
   1a83c:	add	r0, r3, #32
   1a840:	vst1.64	{d18-d19}, [r2]
   1a844:	vst1.64	{d20-d21}, [r0]
   1a848:	mov	r0, #12
   1a84c:	mov	r2, r3
   1a850:	vst1.64	{d16-d17}, [r2], r0
   1a854:	ldr	r0, [r2]
   1a858:	orr	r0, r0, #67108864	; 0x4000000
   1a85c:	str	r0, [r2]
   1a860:	mov	r0, #0
   1a864:	mvn	r2, #0
   1a868:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1a86c:	mov	sp, fp
   1a870:	pop	{fp, pc}
   1a874:	push	{fp, lr}
   1a878:	mov	fp, sp
   1a87c:	sub	sp, sp, #48	; 0x30
   1a880:	mov	ip, r1
   1a884:	mov	r1, r0
   1a888:	movw	r0, #61920	; 0xf1e0
   1a88c:	mov	r2, #32
   1a890:	movt	r0, #2
   1a894:	add	r3, r0, #16
   1a898:	vld1.64	{d16-d17}, [r0], r2
   1a89c:	vld1.64	{d18-d19}, [r3]
   1a8a0:	vld1.64	{d20-d21}, [r0]
   1a8a4:	mov	r3, sp
   1a8a8:	add	r2, r3, #16
   1a8ac:	add	r0, r3, #32
   1a8b0:	vst1.64	{d18-d19}, [r2]
   1a8b4:	vst1.64	{d20-d21}, [r0]
   1a8b8:	mov	r0, #12
   1a8bc:	mov	r2, r3
   1a8c0:	vst1.64	{d16-d17}, [r2], r0
   1a8c4:	ldr	r0, [r2]
   1a8c8:	orr	r0, r0, #67108864	; 0x4000000
   1a8cc:	str	r0, [r2]
   1a8d0:	mov	r0, #0
   1a8d4:	mov	r2, ip
   1a8d8:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1a8dc:	mov	sp, fp
   1a8e0:	pop	{fp, pc}
   1a8e4:	push	{r4, sl, fp, lr}
   1a8e8:	add	fp, sp, #8
   1a8ec:	sub	sp, sp, #96	; 0x60
   1a8f0:	vmov.i32	q8, #0	; 0x00000000
   1a8f4:	mov	ip, r2
   1a8f8:	mov	r2, sp
   1a8fc:	mov	r4, #28
   1a900:	cmp	r1, #10
   1a904:	mov	r3, r2
   1a908:	add	lr, r2, #16
   1a90c:	vst1.64	{d16-d17}, [r3], r4
   1a910:	vst1.64	{d16-d17}, [lr]
   1a914:	vst1.32	{d16-d17}, [r3]
   1a918:	beq	1a968 <__assert_fail@plt+0x9380>
   1a91c:	vld1.64	{d16-d17}, [r2], r4
   1a920:	vld1.64	{d18-d19}, [lr]
   1a924:	add	r3, sp, #48	; 0x30
   1a928:	vld1.32	{d20-d21}, [r2]
   1a92c:	add	r2, r3, #20
   1a930:	add	r4, r3, #4
   1a934:	vst1.32	{d18-d19}, [r2]
   1a938:	add	r2, r3, #32
   1a93c:	vst1.32	{d16-d17}, [r4]
   1a940:	vst1.32	{d20-d21}, [r2]
   1a944:	str	r1, [sp, #48]	; 0x30
   1a948:	mvn	r2, #0
   1a94c:	ldr	r1, [sp, #60]	; 0x3c
   1a950:	orr	r1, r1, #67108864	; 0x4000000
   1a954:	str	r1, [sp, #60]	; 0x3c
   1a958:	mov	r1, ip
   1a95c:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1a960:	sub	sp, fp, #8
   1a964:	pop	{r4, sl, fp, pc}
   1a968:	bl	115c4 <abort@plt>
   1a96c:	push	{r4, r5, r6, sl, fp, lr}
   1a970:	add	fp, sp, #16
   1a974:	sub	sp, sp, #48	; 0x30
   1a978:	mov	ip, r3
   1a97c:	movw	r3, #61920	; 0xf1e0
   1a980:	mov	r6, #32
   1a984:	cmp	r1, #0
   1a988:	mov	r4, sp
   1a98c:	movt	r3, #2
   1a990:	cmpne	r2, #0
   1a994:	add	r5, r4, #16
   1a998:	add	lr, r3, #16
   1a99c:	vld1.64	{d16-d17}, [r3], r6
   1a9a0:	vld1.64	{d18-d19}, [lr]
   1a9a4:	vld1.64	{d20-d21}, [r3]
   1a9a8:	mov	r3, #10
   1a9ac:	vst1.64	{d16-d17}, [r4], r6
   1a9b0:	vst1.64	{d18-d19}, [r5]
   1a9b4:	vst1.64	{d20-d21}, [r4]
   1a9b8:	str	r3, [sp]
   1a9bc:	bne	1a9c4 <__assert_fail@plt+0x93dc>
   1a9c0:	bl	115c4 <abort@plt>
   1a9c4:	str	r2, [sp, #44]	; 0x2c
   1a9c8:	str	r1, [sp, #40]	; 0x28
   1a9cc:	mov	r3, sp
   1a9d0:	mov	r1, ip
   1a9d4:	mvn	r2, #0
   1a9d8:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1a9dc:	sub	sp, fp, #16
   1a9e0:	pop	{r4, r5, r6, sl, fp, pc}
   1a9e4:	push	{r4, r5, r6, sl, fp, lr}
   1a9e8:	add	fp, sp, #16
   1a9ec:	sub	sp, sp, #48	; 0x30
   1a9f0:	mov	lr, r3
   1a9f4:	movw	r3, #61920	; 0xf1e0
   1a9f8:	mov	r6, #32
   1a9fc:	cmp	r1, #0
   1aa00:	mov	r4, sp
   1aa04:	movt	r3, #2
   1aa08:	cmpne	r2, #0
   1aa0c:	add	r5, r4, #16
   1aa10:	add	ip, r3, #16
   1aa14:	vld1.64	{d16-d17}, [r3], r6
   1aa18:	vld1.64	{d18-d19}, [ip]
   1aa1c:	vld1.64	{d20-d21}, [r3]
   1aa20:	mov	r3, #10
   1aa24:	vst1.64	{d16-d17}, [r4], r6
   1aa28:	vst1.64	{d18-d19}, [r5]
   1aa2c:	vst1.64	{d20-d21}, [r4]
   1aa30:	str	r3, [sp]
   1aa34:	bne	1aa3c <__assert_fail@plt+0x9454>
   1aa38:	bl	115c4 <abort@plt>
   1aa3c:	ldr	ip, [fp, #8]
   1aa40:	str	r2, [sp, #44]	; 0x2c
   1aa44:	str	r1, [sp, #40]	; 0x28
   1aa48:	mov	r3, sp
   1aa4c:	mov	r1, lr
   1aa50:	mov	r2, ip
   1aa54:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1aa58:	sub	sp, fp, #16
   1aa5c:	pop	{r4, r5, r6, sl, fp, pc}
   1aa60:	push	{r4, sl, fp, lr}
   1aa64:	add	fp, sp, #8
   1aa68:	sub	sp, sp, #48	; 0x30
   1aa6c:	movw	r3, #61920	; 0xf1e0
   1aa70:	mov	lr, #32
   1aa74:	mov	ip, r2
   1aa78:	cmp	r0, #0
   1aa7c:	movt	r3, #2
   1aa80:	cmpne	r1, #0
   1aa84:	add	r2, r3, #16
   1aa88:	vld1.64	{d16-d17}, [r3], lr
   1aa8c:	vld1.64	{d20-d21}, [r3]
   1aa90:	vld1.64	{d18-d19}, [r2]
   1aa94:	mov	r2, sp
   1aa98:	add	r4, r2, #16
   1aa9c:	vst1.64	{d16-d17}, [r2], lr
   1aaa0:	vst1.64	{d20-d21}, [r2]
   1aaa4:	mov	r2, #10
   1aaa8:	vst1.64	{d18-d19}, [r4]
   1aaac:	str	r2, [sp]
   1aab0:	bne	1aab8 <__assert_fail@plt+0x94d0>
   1aab4:	bl	115c4 <abort@plt>
   1aab8:	str	r1, [sp, #44]	; 0x2c
   1aabc:	str	r0, [sp, #40]	; 0x28
   1aac0:	mov	r3, sp
   1aac4:	mov	r0, #0
   1aac8:	mov	r1, ip
   1aacc:	mvn	r2, #0
   1aad0:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1aad4:	sub	sp, fp, #8
   1aad8:	pop	{r4, sl, fp, pc}
   1aadc:	push	{r4, r5, fp, lr}
   1aae0:	add	fp, sp, #8
   1aae4:	sub	sp, sp, #48	; 0x30
   1aae8:	mov	ip, r3
   1aaec:	movw	r3, #61920	; 0xf1e0
   1aaf0:	mov	r4, #32
   1aaf4:	mov	lr, r2
   1aaf8:	cmp	r0, #0
   1aafc:	movt	r3, #2
   1ab00:	cmpne	r1, #0
   1ab04:	add	r2, r3, #16
   1ab08:	vld1.64	{d16-d17}, [r3], r4
   1ab0c:	vld1.64	{d20-d21}, [r3]
   1ab10:	vld1.64	{d18-d19}, [r2]
   1ab14:	mov	r2, sp
   1ab18:	add	r5, r2, #16
   1ab1c:	vst1.64	{d16-d17}, [r2], r4
   1ab20:	vst1.64	{d20-d21}, [r2]
   1ab24:	mov	r2, #10
   1ab28:	vst1.64	{d18-d19}, [r5]
   1ab2c:	str	r2, [sp]
   1ab30:	bne	1ab38 <__assert_fail@plt+0x9550>
   1ab34:	bl	115c4 <abort@plt>
   1ab38:	str	r1, [sp, #44]	; 0x2c
   1ab3c:	str	r0, [sp, #40]	; 0x28
   1ab40:	mov	r3, sp
   1ab44:	mov	r0, #0
   1ab48:	mov	r1, lr
   1ab4c:	mov	r2, ip
   1ab50:	bl	1a3f4 <__assert_fail@plt+0x8e0c>
   1ab54:	sub	sp, fp, #8
   1ab58:	pop	{r4, r5, fp, pc}
   1ab5c:	movw	r3, #61792	; 0xf160
   1ab60:	movt	r3, #2
   1ab64:	b	1a3f4 <__assert_fail@plt+0x8e0c>
   1ab68:	movw	r3, #61792	; 0xf160
   1ab6c:	mov	r2, r1
   1ab70:	mov	r1, r0
   1ab74:	mov	r0, #0
   1ab78:	movt	r3, #2
   1ab7c:	b	1a3f4 <__assert_fail@plt+0x8e0c>
   1ab80:	movw	r3, #61792	; 0xf160
   1ab84:	mvn	r2, #0
   1ab88:	movt	r3, #2
   1ab8c:	b	1a3f4 <__assert_fail@plt+0x8e0c>
   1ab90:	movw	r3, #61792	; 0xf160
   1ab94:	mov	r1, r0
   1ab98:	mov	r0, #0
   1ab9c:	mvn	r2, #0
   1aba0:	movt	r3, #2
   1aba4:	b	1a3f4 <__assert_fail@plt+0x8e0c>
   1aba8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1abac:	add	fp, sp, #24
   1abb0:	movw	r8, #0
   1abb4:	mov	r6, r2
   1abb8:	mov	r4, r1
   1abbc:	mov	r5, r0
   1abc0:	movt	r8, #32752	; 0x7ff0
   1abc4:	mov	r0, r5
   1abc8:	mov	r1, r4
   1abcc:	mov	r2, r6
   1abd0:	bl	112dc <read@plt>
   1abd4:	mov	r7, r0
   1abd8:	cmn	r0, #1
   1abdc:	bgt	1ac04 <__assert_fail@plt+0x961c>
   1abe0:	bl	114b0 <__errno_location@plt>
   1abe4:	ldr	r0, [r0]
   1abe8:	cmp	r0, #4
   1abec:	beq	1abc4 <__assert_fail@plt+0x95dc>
   1abf0:	cmp	r6, r8
   1abf4:	bls	1ac04 <__assert_fail@plt+0x961c>
   1abf8:	cmp	r0, #22
   1abfc:	mov	r6, r8
   1ac00:	beq	1abc4 <__assert_fail@plt+0x95dc>
   1ac04:	mov	r0, r7
   1ac08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ac0c:	push	{r4, r5, r6, r7, fp, lr}
   1ac10:	add	fp, sp, #16
   1ac14:	mov	r4, r0
   1ac18:	cmp	r0, #2
   1ac1c:	bhi	1ac4c <__assert_fail@plt+0x9664>
   1ac20:	mov	r0, r4
   1ac24:	bl	1ccd0 <__assert_fail@plt+0xb6e8>
   1ac28:	mov	r5, r0
   1ac2c:	bl	114b0 <__errno_location@plt>
   1ac30:	ldr	r7, [r0]
   1ac34:	mov	r6, r0
   1ac38:	mov	r0, r4
   1ac3c:	bl	115d0 <close@plt>
   1ac40:	mov	r0, r5
   1ac44:	str	r7, [r6]
   1ac48:	pop	{r4, r5, r6, r7, fp, pc}
   1ac4c:	mov	r0, r4
   1ac50:	pop	{r4, r5, r6, r7, fp, pc}
   1ac54:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ac58:	add	fp, sp, #24
   1ac5c:	sub	sp, sp, #32
   1ac60:	ldr	r6, [fp, #12]
   1ac64:	ldr	r7, [fp, #8]
   1ac68:	mov	r4, r2
   1ac6c:	mov	r8, r0
   1ac70:	cmp	r1, #0
   1ac74:	beq	1ac9c <__assert_fail@plt+0x96b4>
   1ac78:	movw	r2, #59160	; 0xe718
   1ac7c:	mov	r5, r1
   1ac80:	str	r3, [sp, #4]
   1ac84:	str	r4, [sp]
   1ac88:	mov	r0, r8
   1ac8c:	mov	r1, #1
   1ac90:	movt	r2, #1
   1ac94:	mov	r3, r5
   1ac98:	b	1acb4 <__assert_fail@plt+0x96cc>
   1ac9c:	movw	r2, #59172	; 0xe724
   1aca0:	str	r3, [sp]
   1aca4:	mov	r0, r8
   1aca8:	mov	r1, #1
   1acac:	mov	r3, r4
   1acb0:	movt	r2, #1
   1acb4:	bl	114f8 <__fprintf_chk@plt>
   1acb8:	movw	r1, #59179	; 0xe72b
   1acbc:	mov	r0, #0
   1acc0:	mov	r2, #5
   1acc4:	movt	r1, #1
   1acc8:	bl	11348 <dcgettext@plt>
   1accc:	movw	r2, #59897	; 0xe9f9
   1acd0:	mov	r3, r0
   1acd4:	movw	r0, #2022	; 0x7e6
   1acd8:	mov	r1, #1
   1acdc:	movt	r2, #1
   1ace0:	str	r0, [sp]
   1ace4:	mov	r0, r8
   1ace8:	bl	114f8 <__fprintf_chk@plt>
   1acec:	movw	r4, #55493	; 0xd8c5
   1acf0:	mov	r1, r8
   1acf4:	movt	r4, #1
   1acf8:	mov	r0, r4
   1acfc:	bl	112a0 <fputs_unlocked@plt>
   1ad00:	movw	r1, #59183	; 0xe72f
   1ad04:	mov	r0, #0
   1ad08:	mov	r2, #5
   1ad0c:	movt	r1, #1
   1ad10:	bl	11348 <dcgettext@plt>
   1ad14:	movw	r3, #59354	; 0xe7da
   1ad18:	mov	r2, r0
   1ad1c:	mov	r0, r8
   1ad20:	mov	r1, #1
   1ad24:	movt	r3, #1
   1ad28:	bl	114f8 <__fprintf_chk@plt>
   1ad2c:	mov	r0, r4
   1ad30:	mov	r1, r8
   1ad34:	bl	112a0 <fputs_unlocked@plt>
   1ad38:	cmp	r6, #9
   1ad3c:	bhi	1ad78 <__assert_fail@plt+0x9790>
   1ad40:	add	r0, pc, #0
   1ad44:	ldr	pc, [r0, r6, lsl #2]
   1ad48:	andeq	sl, r1, r0, ror sp
   1ad4c:	andeq	sl, r1, r4, lsl #27
   1ad50:			; <UNDEFINED> instruction: 0x0001adb4
   1ad54:	ldrdeq	sl, [r1], -ip
   1ad58:	andeq	sl, r1, r4, lsl #28
   1ad5c:	andeq	sl, r1, ip, lsr #28
   1ad60:	andeq	sl, r1, r4, asr lr
   1ad64:	andeq	sl, r1, ip, lsl #29
   1ad68:	andeq	sl, r1, r4, lsr pc
   1ad6c:	ldrdeq	sl, [r1], -ip
   1ad70:	sub	sp, fp, #24
   1ad74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ad78:	movw	r1, #59707	; 0xe93b
   1ad7c:	movt	r1, #1
   1ad80:	b	1aee4 <__assert_fail@plt+0x98fc>
   1ad84:	movw	r1, #59388	; 0xe7fc
   1ad88:	mov	r0, #0
   1ad8c:	mov	r2, #5
   1ad90:	movt	r1, #1
   1ad94:	bl	11348 <dcgettext@plt>
   1ad98:	ldr	r3, [r7]
   1ad9c:	mov	r2, r0
   1ada0:	mov	r0, r8
   1ada4:	mov	r1, #1
   1ada8:	sub	sp, fp, #24
   1adac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1adb0:	b	114f8 <__fprintf_chk@plt>
   1adb4:	movw	r1, #59404	; 0xe80c
   1adb8:	mov	r0, #0
   1adbc:	mov	r2, #5
   1adc0:	movt	r1, #1
   1adc4:	bl	11348 <dcgettext@plt>
   1adc8:	mov	r2, r0
   1adcc:	ldr	r3, [r7]
   1add0:	ldr	r0, [r7, #4]
   1add4:	str	r0, [sp]
   1add8:	b	1aec8 <__assert_fail@plt+0x98e0>
   1addc:	movw	r1, #59427	; 0xe823
   1ade0:	mov	r0, #0
   1ade4:	mov	r2, #5
   1ade8:	movt	r1, #1
   1adec:	bl	11348 <dcgettext@plt>
   1adf0:	mov	r2, r0
   1adf4:	ldr	r3, [r7]
   1adf8:	ldmib	r7, {r0, r1}
   1adfc:	stm	sp, {r0, r1}
   1ae00:	b	1aec8 <__assert_fail@plt+0x98e0>
   1ae04:	movw	r1, #59455	; 0xe83f
   1ae08:	mov	r0, #0
   1ae0c:	mov	r2, #5
   1ae10:	movt	r1, #1
   1ae14:	bl	11348 <dcgettext@plt>
   1ae18:	ldr	r3, [r7]
   1ae1c:	mov	r2, r0
   1ae20:	ldmib	r7, {r0, r1, r7}
   1ae24:	stm	sp, {r0, r1, r7}
   1ae28:	b	1aec8 <__assert_fail@plt+0x98e0>
   1ae2c:	movw	r1, #59487	; 0xe85f
   1ae30:	mov	r0, #0
   1ae34:	mov	r2, #5
   1ae38:	movt	r1, #1
   1ae3c:	bl	11348 <dcgettext@plt>
   1ae40:	ldr	r3, [r7]
   1ae44:	mov	r2, r0
   1ae48:	ldmib	r7, {r0, r1, r6, r7}
   1ae4c:	stm	sp, {r0, r1, r6, r7}
   1ae50:	b	1aec8 <__assert_fail@plt+0x98e0>
   1ae54:	movw	r1, #59523	; 0xe883
   1ae58:	mov	r0, #0
   1ae5c:	mov	r2, #5
   1ae60:	movt	r1, #1
   1ae64:	bl	11348 <dcgettext@plt>
   1ae68:	mov	r2, r0
   1ae6c:	ldr	r3, [r7]
   1ae70:	ldmib	r7, {r0, r1, r6}
   1ae74:	ldr	r5, [r7, #16]
   1ae78:	ldr	r7, [r7, #20]
   1ae7c:	stm	sp, {r0, r1, r6}
   1ae80:	str	r5, [sp, #12]
   1ae84:	str	r7, [sp, #16]
   1ae88:	b	1aec8 <__assert_fail@plt+0x98e0>
   1ae8c:	movw	r1, #59563	; 0xe8ab
   1ae90:	mov	r0, #0
   1ae94:	mov	r2, #5
   1ae98:	movt	r1, #1
   1ae9c:	bl	11348 <dcgettext@plt>
   1aea0:	mov	r2, r0
   1aea4:	ldr	r3, [r7]
   1aea8:	ldmib	r7, {r0, r1, r6}
   1aeac:	ldr	r5, [r7, #16]
   1aeb0:	ldr	r4, [r7, #20]
   1aeb4:	ldr	r7, [r7, #24]
   1aeb8:	stm	sp, {r0, r1, r6}
   1aebc:	str	r5, [sp, #12]
   1aec0:	str	r4, [sp, #16]
   1aec4:	str	r7, [sp, #20]
   1aec8:	mov	r0, r8
   1aecc:	mov	r1, #1
   1aed0:	bl	114f8 <__fprintf_chk@plt>
   1aed4:	sub	sp, fp, #24
   1aed8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aedc:	movw	r1, #59655	; 0xe907
   1aee0:	movt	r1, #1
   1aee4:	mov	r0, #0
   1aee8:	mov	r2, #5
   1aeec:	bl	11348 <dcgettext@plt>
   1aef0:	mov	ip, r0
   1aef4:	ldr	r3, [r7]
   1aef8:	ldr	r0, [r7, #4]
   1aefc:	ldr	r1, [r7, #8]
   1af00:	ldr	r6, [r7, #12]
   1af04:	ldr	r5, [r7, #16]
   1af08:	ldr	r4, [r7, #20]
   1af0c:	ldr	r2, [r7, #24]
   1af10:	ldr	lr, [r7, #28]
   1af14:	ldr	r7, [r7, #32]
   1af18:	stm	sp, {r0, r1, r6}
   1af1c:	str	r5, [sp, #12]
   1af20:	str	r4, [sp, #16]
   1af24:	str	r2, [sp, #20]
   1af28:	str	lr, [sp, #24]
   1af2c:	str	r7, [sp, #28]
   1af30:	b	1af78 <__assert_fail@plt+0x9990>
   1af34:	movw	r1, #59607	; 0xe8d7
   1af38:	mov	r0, #0
   1af3c:	mov	r2, #5
   1af40:	movt	r1, #1
   1af44:	bl	11348 <dcgettext@plt>
   1af48:	mov	ip, r0
   1af4c:	ldr	r3, [r7]
   1af50:	ldmib	r7, {r0, r1, r6}
   1af54:	ldr	r5, [r7, #16]
   1af58:	ldr	r4, [r7, #20]
   1af5c:	ldr	r2, [r7, #24]
   1af60:	ldr	r7, [r7, #28]
   1af64:	stm	sp, {r0, r1, r6}
   1af68:	str	r5, [sp, #12]
   1af6c:	str	r4, [sp, #16]
   1af70:	str	r2, [sp, #20]
   1af74:	str	r7, [sp, #24]
   1af78:	mov	r0, r8
   1af7c:	mov	r1, #1
   1af80:	mov	r2, ip
   1af84:	bl	114f8 <__fprintf_chk@plt>
   1af88:	sub	sp, fp, #24
   1af8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1af90:	push	{r4, sl, fp, lr}
   1af94:	add	fp, sp, #8
   1af98:	sub	sp, sp, #8
   1af9c:	ldr	ip, [fp, #8]
   1afa0:	mov	lr, #0
   1afa4:	ldr	r4, [ip, lr, lsl #2]
   1afa8:	add	lr, lr, #1
   1afac:	cmp	r4, #0
   1afb0:	bne	1afa4 <__assert_fail@plt+0x99bc>
   1afb4:	sub	r4, lr, #1
   1afb8:	str	ip, [sp]
   1afbc:	str	r4, [sp, #4]
   1afc0:	bl	1ac54 <__assert_fail@plt+0x966c>
   1afc4:	sub	sp, fp, #8
   1afc8:	pop	{r4, sl, fp, pc}
   1afcc:	push	{fp, lr}
   1afd0:	mov	fp, sp
   1afd4:	sub	sp, sp, #48	; 0x30
   1afd8:	ldr	ip, [fp, #8]
   1afdc:	ldr	lr, [ip]
   1afe0:	cmp	lr, #0
   1afe4:	str	lr, [sp, #8]
   1afe8:	beq	1b084 <__assert_fail@plt+0x9a9c>
   1afec:	ldr	lr, [ip, #4]
   1aff0:	cmp	lr, #0
   1aff4:	str	lr, [sp, #12]
   1aff8:	beq	1b08c <__assert_fail@plt+0x9aa4>
   1affc:	ldr	lr, [ip, #8]
   1b000:	cmp	lr, #0
   1b004:	str	lr, [sp, #16]
   1b008:	beq	1b094 <__assert_fail@plt+0x9aac>
   1b00c:	ldr	lr, [ip, #12]
   1b010:	cmp	lr, #0
   1b014:	str	lr, [sp, #20]
   1b018:	beq	1b09c <__assert_fail@plt+0x9ab4>
   1b01c:	ldr	lr, [ip, #16]
   1b020:	cmp	lr, #0
   1b024:	str	lr, [sp, #24]
   1b028:	beq	1b0a4 <__assert_fail@plt+0x9abc>
   1b02c:	ldr	lr, [ip, #20]
   1b030:	cmp	lr, #0
   1b034:	str	lr, [sp, #28]
   1b038:	beq	1b0ac <__assert_fail@plt+0x9ac4>
   1b03c:	ldr	lr, [ip, #24]
   1b040:	cmp	lr, #0
   1b044:	str	lr, [sp, #32]
   1b048:	beq	1b0b4 <__assert_fail@plt+0x9acc>
   1b04c:	ldr	lr, [ip, #28]
   1b050:	cmp	lr, #0
   1b054:	str	lr, [sp, #36]	; 0x24
   1b058:	beq	1b0bc <__assert_fail@plt+0x9ad4>
   1b05c:	ldr	lr, [ip, #32]
   1b060:	cmp	lr, #0
   1b064:	str	lr, [sp, #40]	; 0x28
   1b068:	beq	1b0c4 <__assert_fail@plt+0x9adc>
   1b06c:	ldr	lr, [ip, #36]	; 0x24
   1b070:	mov	ip, #10
   1b074:	cmp	lr, #0
   1b078:	str	lr, [sp, #44]	; 0x2c
   1b07c:	movweq	ip, #9
   1b080:	b	1b0c8 <__assert_fail@plt+0x9ae0>
   1b084:	mov	ip, #0
   1b088:	b	1b0c8 <__assert_fail@plt+0x9ae0>
   1b08c:	mov	ip, #1
   1b090:	b	1b0c8 <__assert_fail@plt+0x9ae0>
   1b094:	mov	ip, #2
   1b098:	b	1b0c8 <__assert_fail@plt+0x9ae0>
   1b09c:	mov	ip, #3
   1b0a0:	b	1b0c8 <__assert_fail@plt+0x9ae0>
   1b0a4:	mov	ip, #4
   1b0a8:	b	1b0c8 <__assert_fail@plt+0x9ae0>
   1b0ac:	mov	ip, #5
   1b0b0:	b	1b0c8 <__assert_fail@plt+0x9ae0>
   1b0b4:	mov	ip, #6
   1b0b8:	b	1b0c8 <__assert_fail@plt+0x9ae0>
   1b0bc:	mov	ip, #7
   1b0c0:	b	1b0c8 <__assert_fail@plt+0x9ae0>
   1b0c4:	mov	ip, #8
   1b0c8:	add	lr, sp, #8
   1b0cc:	str	ip, [sp, #4]
   1b0d0:	str	lr, [sp]
   1b0d4:	bl	1ac54 <__assert_fail@plt+0x966c>
   1b0d8:	mov	sp, fp
   1b0dc:	pop	{fp, pc}
   1b0e0:	push	{fp, lr}
   1b0e4:	mov	fp, sp
   1b0e8:	sub	sp, sp, #56	; 0x38
   1b0ec:	add	ip, fp, #8
   1b0f0:	str	ip, [sp, #12]
   1b0f4:	ldr	lr, [fp, #8]
   1b0f8:	cmp	lr, #0
   1b0fc:	str	lr, [sp, #16]
   1b100:	beq	1b19c <__assert_fail@plt+0x9bb4>
   1b104:	ldr	lr, [ip, #4]
   1b108:	cmp	lr, #0
   1b10c:	str	lr, [sp, #20]
   1b110:	beq	1b1a4 <__assert_fail@plt+0x9bbc>
   1b114:	ldr	lr, [ip, #8]
   1b118:	cmp	lr, #0
   1b11c:	str	lr, [sp, #24]
   1b120:	beq	1b1ac <__assert_fail@plt+0x9bc4>
   1b124:	ldr	lr, [ip, #12]
   1b128:	cmp	lr, #0
   1b12c:	str	lr, [sp, #28]
   1b130:	beq	1b1b4 <__assert_fail@plt+0x9bcc>
   1b134:	ldr	lr, [ip, #16]
   1b138:	cmp	lr, #0
   1b13c:	str	lr, [sp, #32]
   1b140:	beq	1b1bc <__assert_fail@plt+0x9bd4>
   1b144:	ldr	lr, [ip, #20]
   1b148:	cmp	lr, #0
   1b14c:	str	lr, [sp, #36]	; 0x24
   1b150:	beq	1b1c4 <__assert_fail@plt+0x9bdc>
   1b154:	ldr	lr, [ip, #24]
   1b158:	cmp	lr, #0
   1b15c:	str	lr, [sp, #40]	; 0x28
   1b160:	beq	1b1cc <__assert_fail@plt+0x9be4>
   1b164:	ldr	lr, [ip, #28]
   1b168:	cmp	lr, #0
   1b16c:	str	lr, [sp, #44]	; 0x2c
   1b170:	beq	1b1d4 <__assert_fail@plt+0x9bec>
   1b174:	ldr	lr, [ip, #32]
   1b178:	cmp	lr, #0
   1b17c:	str	lr, [sp, #48]	; 0x30
   1b180:	beq	1b1dc <__assert_fail@plt+0x9bf4>
   1b184:	ldr	lr, [ip, #36]	; 0x24
   1b188:	mov	ip, #10
   1b18c:	cmp	lr, #0
   1b190:	str	lr, [sp, #52]	; 0x34
   1b194:	movweq	ip, #9
   1b198:	b	1b1e0 <__assert_fail@plt+0x9bf8>
   1b19c:	mov	ip, #0
   1b1a0:	b	1b1e0 <__assert_fail@plt+0x9bf8>
   1b1a4:	mov	ip, #1
   1b1a8:	b	1b1e0 <__assert_fail@plt+0x9bf8>
   1b1ac:	mov	ip, #2
   1b1b0:	b	1b1e0 <__assert_fail@plt+0x9bf8>
   1b1b4:	mov	ip, #3
   1b1b8:	b	1b1e0 <__assert_fail@plt+0x9bf8>
   1b1bc:	mov	ip, #4
   1b1c0:	b	1b1e0 <__assert_fail@plt+0x9bf8>
   1b1c4:	mov	ip, #5
   1b1c8:	b	1b1e0 <__assert_fail@plt+0x9bf8>
   1b1cc:	mov	ip, #6
   1b1d0:	b	1b1e0 <__assert_fail@plt+0x9bf8>
   1b1d4:	mov	ip, #7
   1b1d8:	b	1b1e0 <__assert_fail@plt+0x9bf8>
   1b1dc:	mov	ip, #8
   1b1e0:	add	lr, sp, #16
   1b1e4:	str	ip, [sp, #4]
   1b1e8:	str	lr, [sp]
   1b1ec:	bl	1ac54 <__assert_fail@plt+0x966c>
   1b1f0:	mov	sp, fp
   1b1f4:	pop	{fp, pc}
   1b1f8:	push	{fp, lr}
   1b1fc:	mov	fp, sp
   1b200:	movw	r0, #61876	; 0xf1b4
   1b204:	movt	r0, #2
   1b208:	ldr	r1, [r0]
   1b20c:	movw	r0, #55493	; 0xd8c5
   1b210:	movt	r0, #1
   1b214:	bl	112a0 <fputs_unlocked@plt>
   1b218:	movw	r1, #59767	; 0xe977
   1b21c:	mov	r0, #0
   1b220:	mov	r2, #5
   1b224:	movt	r1, #1
   1b228:	bl	11348 <dcgettext@plt>
   1b22c:	movw	r2, #59787	; 0xe98b
   1b230:	mov	r1, r0
   1b234:	mov	r0, #1
   1b238:	movt	r2, #1
   1b23c:	bl	114d4 <__printf_chk@plt>
   1b240:	movw	r1, #59809	; 0xe9a1
   1b244:	mov	r0, #0
   1b248:	mov	r2, #5
   1b24c:	movt	r1, #1
   1b250:	bl	11348 <dcgettext@plt>
   1b254:	movw	r2, #56370	; 0xdc32
   1b258:	movw	r3, #56384	; 0xdc40
   1b25c:	mov	r1, r0
   1b260:	mov	r0, #1
   1b264:	movt	r2, #1
   1b268:	movt	r3, #1
   1b26c:	bl	114d4 <__printf_chk@plt>
   1b270:	movw	r1, #59829	; 0xe9b5
   1b274:	mov	r0, #0
   1b278:	mov	r2, #5
   1b27c:	movt	r1, #1
   1b280:	bl	11348 <dcgettext@plt>
   1b284:	movw	r2, #59868	; 0xe9dc
   1b288:	mov	r1, r0
   1b28c:	mov	r0, #1
   1b290:	movt	r2, #1
   1b294:	pop	{fp, lr}
   1b298:	b	114d4 <__printf_chk@plt>
   1b29c:	push	{r4, r5, r6, sl, fp, lr}
   1b2a0:	add	fp, sp, #16
   1b2a4:	mov	r4, r2
   1b2a8:	mov	r5, r1
   1b2ac:	mov	r6, r0
   1b2b0:	bl	1cc94 <__assert_fail@plt+0xb6ac>
   1b2b4:	cmp	r0, #0
   1b2b8:	popne	{r4, r5, r6, sl, fp, pc}
   1b2bc:	cmp	r6, #0
   1b2c0:	beq	1b2d4 <__assert_fail@plt+0x9cec>
   1b2c4:	cmp	r5, #0
   1b2c8:	cmpne	r4, #0
   1b2cc:	bne	1b2d4 <__assert_fail@plt+0x9cec>
   1b2d0:	pop	{r4, r5, r6, sl, fp, pc}
   1b2d4:	bl	1b850 <__assert_fail@plt+0xa268>
   1b2d8:	push	{r4, r5, r6, sl, fp, lr}
   1b2dc:	add	fp, sp, #16
   1b2e0:	mov	r4, r2
   1b2e4:	mov	r5, r1
   1b2e8:	mov	r6, r0
   1b2ec:	bl	1cc94 <__assert_fail@plt+0xb6ac>
   1b2f0:	cmp	r0, #0
   1b2f4:	popne	{r4, r5, r6, sl, fp, pc}
   1b2f8:	cmp	r6, #0
   1b2fc:	beq	1b310 <__assert_fail@plt+0x9d28>
   1b300:	cmp	r5, #0
   1b304:	cmpne	r4, #0
   1b308:	bne	1b310 <__assert_fail@plt+0x9d28>
   1b30c:	pop	{r4, r5, r6, sl, fp, pc}
   1b310:	bl	1b850 <__assert_fail@plt+0xa268>
   1b314:	push	{fp, lr}
   1b318:	mov	fp, sp
   1b31c:	bl	1c804 <__assert_fail@plt+0xb21c>
   1b320:	cmp	r0, #0
   1b324:	popne	{fp, pc}
   1b328:	bl	1b850 <__assert_fail@plt+0xa268>
   1b32c:	push	{fp, lr}
   1b330:	mov	fp, sp
   1b334:	bl	1c804 <__assert_fail@plt+0xb21c>
   1b338:	cmp	r0, #0
   1b33c:	popne	{fp, pc}
   1b340:	bl	1b850 <__assert_fail@plt+0xa268>
   1b344:	push	{fp, lr}
   1b348:	mov	fp, sp
   1b34c:	bl	1c804 <__assert_fail@plt+0xb21c>
   1b350:	cmp	r0, #0
   1b354:	popne	{fp, pc}
   1b358:	bl	1b850 <__assert_fail@plt+0xa268>
   1b35c:	push	{r4, r5, fp, lr}
   1b360:	add	fp, sp, #8
   1b364:	mov	r4, r1
   1b368:	mov	r5, r0
   1b36c:	bl	1c834 <__assert_fail@plt+0xb24c>
   1b370:	cmp	r0, #0
   1b374:	popne	{r4, r5, fp, pc}
   1b378:	cmp	r5, #0
   1b37c:	beq	1b38c <__assert_fail@plt+0x9da4>
   1b380:	cmp	r4, #0
   1b384:	bne	1b38c <__assert_fail@plt+0x9da4>
   1b388:	pop	{r4, r5, fp, pc}
   1b38c:	bl	1b850 <__assert_fail@plt+0xa268>
   1b390:	push	{fp, lr}
   1b394:	mov	fp, sp
   1b398:	cmp	r1, #0
   1b39c:	orreq	r1, r1, #1
   1b3a0:	bl	1c834 <__assert_fail@plt+0xb24c>
   1b3a4:	cmp	r0, #0
   1b3a8:	popne	{fp, pc}
   1b3ac:	bl	1b850 <__assert_fail@plt+0xa268>
   1b3b0:	push	{fp, lr}
   1b3b4:	mov	fp, sp
   1b3b8:	clz	r3, r2
   1b3bc:	lsr	ip, r3, #5
   1b3c0:	clz	r3, r1
   1b3c4:	lsr	r3, r3, #5
   1b3c8:	orrs	r3, r3, ip
   1b3cc:	movwne	r1, #1
   1b3d0:	movwne	r2, #1
   1b3d4:	bl	1cc94 <__assert_fail@plt+0xb6ac>
   1b3d8:	cmp	r0, #0
   1b3dc:	popne	{fp, pc}
   1b3e0:	bl	1b850 <__assert_fail@plt+0xa268>
   1b3e4:	push	{fp, lr}
   1b3e8:	mov	fp, sp
   1b3ec:	mov	r2, r1
   1b3f0:	mov	r1, r0
   1b3f4:	mov	r0, #0
   1b3f8:	bl	1cc94 <__assert_fail@plt+0xb6ac>
   1b3fc:	cmp	r0, #0
   1b400:	popne	{fp, pc}
   1b404:	bl	1b850 <__assert_fail@plt+0xa268>
   1b408:	push	{fp, lr}
   1b40c:	mov	fp, sp
   1b410:	mov	r2, r1
   1b414:	mov	r1, r0
   1b418:	clz	r0, r2
   1b41c:	clz	r3, r1
   1b420:	lsr	r0, r0, #5
   1b424:	lsr	r3, r3, #5
   1b428:	orrs	r0, r3, r0
   1b42c:	mov	r0, #0
   1b430:	movwne	r1, #1
   1b434:	movwne	r2, #1
   1b438:	bl	1cc94 <__assert_fail@plt+0xb6ac>
   1b43c:	cmp	r0, #0
   1b440:	popne	{fp, pc}
   1b444:	bl	1b850 <__assert_fail@plt+0xa268>
   1b448:	push	{r4, r5, r6, sl, fp, lr}
   1b44c:	add	fp, sp, #16
   1b450:	ldr	r5, [r1]
   1b454:	mov	r4, r1
   1b458:	mov	r6, r0
   1b45c:	cmp	r0, #0
   1b460:	beq	1b478 <__assert_fail@plt+0x9e90>
   1b464:	mov	r0, #1
   1b468:	add	r0, r0, r5, lsr #1
   1b46c:	adds	r5, r5, r0
   1b470:	bcc	1b480 <__assert_fail@plt+0x9e98>
   1b474:	b	1b4bc <__assert_fail@plt+0x9ed4>
   1b478:	cmp	r5, #0
   1b47c:	movweq	r5, #64	; 0x40
   1b480:	mov	r0, r6
   1b484:	mov	r1, r5
   1b488:	mov	r2, #1
   1b48c:	bl	1cc94 <__assert_fail@plt+0xb6ac>
   1b490:	cmp	r5, #0
   1b494:	mov	r1, r5
   1b498:	movwne	r1, #1
   1b49c:	cmp	r0, #0
   1b4a0:	bne	1b4b4 <__assert_fail@plt+0x9ecc>
   1b4a4:	clz	r2, r6
   1b4a8:	lsr	r2, r2, #5
   1b4ac:	orrs	r1, r2, r1
   1b4b0:	bne	1b4bc <__assert_fail@plt+0x9ed4>
   1b4b4:	str	r5, [r4]
   1b4b8:	pop	{r4, r5, r6, sl, fp, pc}
   1b4bc:	bl	1b850 <__assert_fail@plt+0xa268>
   1b4c0:	push	{r4, r5, r6, r7, fp, lr}
   1b4c4:	add	fp, sp, #16
   1b4c8:	ldr	r5, [r1]
   1b4cc:	mov	r6, r2
   1b4d0:	mov	r4, r1
   1b4d4:	mov	r7, r0
   1b4d8:	cmp	r0, #0
   1b4dc:	beq	1b4f4 <__assert_fail@plt+0x9f0c>
   1b4e0:	mov	r0, #1
   1b4e4:	add	r0, r0, r5, lsr #1
   1b4e8:	adds	r5, r5, r0
   1b4ec:	bcc	1b50c <__assert_fail@plt+0x9f24>
   1b4f0:	b	1b540 <__assert_fail@plt+0x9f58>
   1b4f4:	cmp	r5, #0
   1b4f8:	bne	1b50c <__assert_fail@plt+0x9f24>
   1b4fc:	mov	r0, #64	; 0x40
   1b500:	cmp	r6, #64	; 0x40
   1b504:	udiv	r5, r0, r6
   1b508:	addhi	r5, r5, #1
   1b50c:	mov	r0, r7
   1b510:	mov	r1, r5
   1b514:	mov	r2, r6
   1b518:	bl	1cc94 <__assert_fail@plt+0xb6ac>
   1b51c:	cmp	r0, #0
   1b520:	bne	1b538 <__assert_fail@plt+0x9f50>
   1b524:	cmp	r7, #0
   1b528:	beq	1b540 <__assert_fail@plt+0x9f58>
   1b52c:	cmp	r6, #0
   1b530:	cmpne	r5, #0
   1b534:	bne	1b540 <__assert_fail@plt+0x9f58>
   1b538:	str	r5, [r4]
   1b53c:	pop	{r4, r5, r6, r7, fp, pc}
   1b540:	bl	1b850 <__assert_fail@plt+0xa268>
   1b544:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b548:	add	fp, sp, #24
   1b54c:	mov	r8, r1
   1b550:	ldr	r1, [r1]
   1b554:	mov	r5, r0
   1b558:	add	r0, r1, r1, asr #1
   1b55c:	cmp	r0, r1
   1b560:	mvnvs	r0, #-2147483648	; 0x80000000
   1b564:	cmp	r0, r3
   1b568:	mov	r7, r0
   1b56c:	movgt	r7, r3
   1b570:	cmn	r3, #1
   1b574:	movle	r7, r0
   1b578:	ldr	r0, [fp, #8]
   1b57c:	cmn	r0, #1
   1b580:	ble	1b5a8 <__assert_fail@plt+0x9fc0>
   1b584:	cmp	r0, #0
   1b588:	beq	1b5fc <__assert_fail@plt+0xa014>
   1b58c:	cmn	r7, #1
   1b590:	ble	1b5d0 <__assert_fail@plt+0x9fe8>
   1b594:	mvn	r4, #-2147483648	; 0x80000000
   1b598:	udiv	r6, r4, r0
   1b59c:	cmp	r6, r7
   1b5a0:	bge	1b5fc <__assert_fail@plt+0xa014>
   1b5a4:	b	1b60c <__assert_fail@plt+0xa024>
   1b5a8:	cmn	r7, #1
   1b5ac:	ble	1b5ec <__assert_fail@plt+0xa004>
   1b5b0:	cmn	r0, #1
   1b5b4:	beq	1b5fc <__assert_fail@plt+0xa014>
   1b5b8:	mov	r6, #-2147483648	; 0x80000000
   1b5bc:	mvn	r4, #-2147483648	; 0x80000000
   1b5c0:	sdiv	r6, r6, r0
   1b5c4:	cmp	r6, r7
   1b5c8:	bge	1b5fc <__assert_fail@plt+0xa014>
   1b5cc:	b	1b60c <__assert_fail@plt+0xa024>
   1b5d0:	beq	1b5fc <__assert_fail@plt+0xa014>
   1b5d4:	mov	r6, #-2147483648	; 0x80000000
   1b5d8:	mvn	r4, #-2147483648	; 0x80000000
   1b5dc:	sdiv	r6, r6, r7
   1b5e0:	cmp	r6, r0
   1b5e4:	bge	1b5fc <__assert_fail@plt+0xa014>
   1b5e8:	b	1b60c <__assert_fail@plt+0xa024>
   1b5ec:	mvn	r4, #-2147483648	; 0x80000000
   1b5f0:	sdiv	r6, r4, r0
   1b5f4:	cmp	r7, r6
   1b5f8:	blt	1b60c <__assert_fail@plt+0xa024>
   1b5fc:	mul	r6, r7, r0
   1b600:	mov	r4, #64	; 0x40
   1b604:	cmp	r6, #63	; 0x3f
   1b608:	bgt	1b614 <__assert_fail@plt+0xa02c>
   1b60c:	sdiv	r7, r4, r0
   1b610:	mul	r6, r7, r0
   1b614:	cmp	r5, #0
   1b618:	moveq	r4, #0
   1b61c:	streq	r4, [r8]
   1b620:	sub	r4, r7, r1
   1b624:	cmp	r4, r2
   1b628:	bge	1b6d4 <__assert_fail@plt+0xa0ec>
   1b62c:	add	r7, r1, r2
   1b630:	mov	r6, #0
   1b634:	mov	r2, #0
   1b638:	cmp	r7, r3
   1b63c:	movwgt	r6, #1
   1b640:	cmn	r3, #1
   1b644:	movwgt	r2, #1
   1b648:	cmp	r7, r1
   1b64c:	bvs	1b708 <__assert_fail@plt+0xa120>
   1b650:	ands	r1, r2, r6
   1b654:	bne	1b708 <__assert_fail@plt+0xa120>
   1b658:	cmn	r0, #1
   1b65c:	ble	1b684 <__assert_fail@plt+0xa09c>
   1b660:	cmp	r0, #0
   1b664:	beq	1b6d0 <__assert_fail@plt+0xa0e8>
   1b668:	cmn	r7, #1
   1b66c:	ble	1b6a8 <__assert_fail@plt+0xa0c0>
   1b670:	mvn	r1, #-2147483648	; 0x80000000
   1b674:	udiv	r1, r1, r0
   1b678:	cmp	r1, r7
   1b67c:	bge	1b6d0 <__assert_fail@plt+0xa0e8>
   1b680:	b	1b708 <__assert_fail@plt+0xa120>
   1b684:	cmn	r7, #1
   1b688:	ble	1b6c0 <__assert_fail@plt+0xa0d8>
   1b68c:	cmn	r0, #1
   1b690:	beq	1b6d0 <__assert_fail@plt+0xa0e8>
   1b694:	mov	r1, #-2147483648	; 0x80000000
   1b698:	sdiv	r1, r1, r0
   1b69c:	cmp	r1, r7
   1b6a0:	bge	1b6d0 <__assert_fail@plt+0xa0e8>
   1b6a4:	b	1b708 <__assert_fail@plt+0xa120>
   1b6a8:	beq	1b6d0 <__assert_fail@plt+0xa0e8>
   1b6ac:	mov	r1, #-2147483648	; 0x80000000
   1b6b0:	sdiv	r1, r1, r7
   1b6b4:	cmp	r1, r0
   1b6b8:	bge	1b6d0 <__assert_fail@plt+0xa0e8>
   1b6bc:	b	1b708 <__assert_fail@plt+0xa120>
   1b6c0:	mvn	r1, #-2147483648	; 0x80000000
   1b6c4:	sdiv	r1, r1, r0
   1b6c8:	cmp	r7, r1
   1b6cc:	blt	1b708 <__assert_fail@plt+0xa120>
   1b6d0:	mul	r6, r7, r0
   1b6d4:	mov	r0, r5
   1b6d8:	mov	r1, r6
   1b6dc:	bl	1c834 <__assert_fail@plt+0xb24c>
   1b6e0:	cmp	r6, #0
   1b6e4:	movwne	r6, #1
   1b6e8:	cmp	r0, #0
   1b6ec:	bne	1b700 <__assert_fail@plt+0xa118>
   1b6f0:	clz	r1, r5
   1b6f4:	lsr	r1, r1, #5
   1b6f8:	orrs	r1, r1, r6
   1b6fc:	bne	1b708 <__assert_fail@plt+0xa120>
   1b700:	str	r7, [r8]
   1b704:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b708:	bl	1b850 <__assert_fail@plt+0xa268>
   1b70c:	push	{fp, lr}
   1b710:	mov	fp, sp
   1b714:	mov	r1, #1
   1b718:	bl	1c7b0 <__assert_fail@plt+0xb1c8>
   1b71c:	cmp	r0, #0
   1b720:	popne	{fp, pc}
   1b724:	bl	1b850 <__assert_fail@plt+0xa268>
   1b728:	push	{fp, lr}
   1b72c:	mov	fp, sp
   1b730:	bl	1c7b0 <__assert_fail@plt+0xb1c8>
   1b734:	cmp	r0, #0
   1b738:	popne	{fp, pc}
   1b73c:	bl	1b850 <__assert_fail@plt+0xa268>
   1b740:	push	{fp, lr}
   1b744:	mov	fp, sp
   1b748:	mov	r1, #1
   1b74c:	bl	1c7b0 <__assert_fail@plt+0xb1c8>
   1b750:	cmp	r0, #0
   1b754:	popne	{fp, pc}
   1b758:	bl	1b850 <__assert_fail@plt+0xa268>
   1b75c:	push	{fp, lr}
   1b760:	mov	fp, sp
   1b764:	bl	1c7b0 <__assert_fail@plt+0xb1c8>
   1b768:	cmp	r0, #0
   1b76c:	popne	{fp, pc}
   1b770:	bl	1b850 <__assert_fail@plt+0xa268>
   1b774:	push	{r4, r5, fp, lr}
   1b778:	add	fp, sp, #8
   1b77c:	mov	r5, r0
   1b780:	mov	r0, r1
   1b784:	mov	r4, r1
   1b788:	bl	1c804 <__assert_fail@plt+0xb21c>
   1b78c:	cmp	r0, #0
   1b790:	beq	1b7a4 <__assert_fail@plt+0xa1bc>
   1b794:	mov	r1, r5
   1b798:	mov	r2, r4
   1b79c:	pop	{r4, r5, fp, lr}
   1b7a0:	b	11318 <memcpy@plt>
   1b7a4:	bl	1b850 <__assert_fail@plt+0xa268>
   1b7a8:	push	{r4, r5, fp, lr}
   1b7ac:	add	fp, sp, #8
   1b7b0:	mov	r5, r0
   1b7b4:	mov	r0, r1
   1b7b8:	mov	r4, r1
   1b7bc:	bl	1c804 <__assert_fail@plt+0xb21c>
   1b7c0:	cmp	r0, #0
   1b7c4:	beq	1b7d8 <__assert_fail@plt+0xa1f0>
   1b7c8:	mov	r1, r5
   1b7cc:	mov	r2, r4
   1b7d0:	pop	{r4, r5, fp, lr}
   1b7d4:	b	11318 <memcpy@plt>
   1b7d8:	bl	1b850 <__assert_fail@plt+0xa268>
   1b7dc:	push	{r4, r5, fp, lr}
   1b7e0:	add	fp, sp, #8
   1b7e4:	mov	r5, r0
   1b7e8:	add	r0, r1, #1
   1b7ec:	mov	r4, r1
   1b7f0:	bl	1c804 <__assert_fail@plt+0xb21c>
   1b7f4:	cmp	r0, #0
   1b7f8:	beq	1b814 <__assert_fail@plt+0xa22c>
   1b7fc:	mov	r1, #0
   1b800:	mov	r2, r4
   1b804:	strb	r1, [r0, r4]
   1b808:	mov	r1, r5
   1b80c:	pop	{r4, r5, fp, lr}
   1b810:	b	11318 <memcpy@plt>
   1b814:	bl	1b850 <__assert_fail@plt+0xa268>
   1b818:	push	{r4, r5, fp, lr}
   1b81c:	add	fp, sp, #8
   1b820:	mov	r4, r0
   1b824:	bl	11474 <strlen@plt>
   1b828:	add	r5, r0, #1
   1b82c:	mov	r0, r5
   1b830:	bl	1c804 <__assert_fail@plt+0xb21c>
   1b834:	cmp	r0, #0
   1b838:	beq	1b84c <__assert_fail@plt+0xa264>
   1b83c:	mov	r1, r4
   1b840:	mov	r2, r5
   1b844:	pop	{r4, r5, fp, lr}
   1b848:	b	11318 <memcpy@plt>
   1b84c:	bl	1b850 <__assert_fail@plt+0xa268>
   1b850:	push	{fp, lr}
   1b854:	mov	fp, sp
   1b858:	movw	r0, #61784	; 0xf158
   1b85c:	movw	r1, #59944	; 0xea28
   1b860:	mov	r2, #5
   1b864:	movt	r0, #2
   1b868:	movt	r1, #1
   1b86c:	ldr	r4, [r0]
   1b870:	mov	r0, #0
   1b874:	bl	11348 <dcgettext@plt>
   1b878:	movw	r2, #58758	; 0xe586
   1b87c:	mov	r3, r0
   1b880:	mov	r0, r4
   1b884:	mov	r1, #0
   1b888:	movt	r2, #1
   1b88c:	bl	113e4 <error@plt>
   1b890:	bl	115c4 <abort@plt>
   1b894:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b898:	add	fp, sp, #24
   1b89c:	sub	sp, sp, #16
   1b8a0:	mov	r8, r0
   1b8a4:	ldr	r0, [fp, #16]
   1b8a8:	mov	r5, r3
   1b8ac:	mov	r6, r2
   1b8b0:	mov	r2, r1
   1b8b4:	add	r3, sp, #8
   1b8b8:	mov	r1, #0
   1b8bc:	str	r0, [sp]
   1b8c0:	mov	r0, r8
   1b8c4:	bl	1bafc <__assert_fail@plt+0xa514>
   1b8c8:	cmp	r0, #0
   1b8cc:	bne	1b958 <__assert_fail@plt+0xa370>
   1b8d0:	ldr	r4, [sp, #8]
   1b8d4:	ldr	r7, [sp, #12]
   1b8d8:	subs	r0, r4, r6
   1b8dc:	sbcs	r0, r7, r5
   1b8e0:	bcc	1b904 <__assert_fail@plt+0xa31c>
   1b8e4:	ldr	r1, [fp, #8]
   1b8e8:	ldr	r0, [fp, #12]
   1b8ec:	subs	r1, r1, r4
   1b8f0:	sbcs	r0, r0, r7
   1b8f4:	movcs	r0, r4
   1b8f8:	movcs	r1, r7
   1b8fc:	subcs	sp, fp, #24
   1b900:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b904:	bl	114b0 <__errno_location@plt>
   1b908:	subs	r1, r4, #1073741824	; 0x40000000
   1b90c:	sbcs	r1, r7, #0
   1b910:	movcc	r1, #34	; 0x22
   1b914:	movcs	r1, #75	; 0x4b
   1b918:	str	r1, [r0]
   1b91c:	ldr	r6, [r0]
   1b920:	ldr	r4, [fp, #24]
   1b924:	ldr	r5, [fp, #20]
   1b928:	mov	r0, r8
   1b92c:	bl	1ab90 <__assert_fail@plt+0x95a8>
   1b930:	subs	r1, r6, #22
   1b934:	movw	r2, #56582	; 0xdd06
   1b938:	str	r0, [sp]
   1b93c:	mov	r3, r5
   1b940:	movne	r1, r6
   1b944:	cmp	r4, #0
   1b948:	movt	r2, #1
   1b94c:	movweq	r4, #1
   1b950:	mov	r0, r4
   1b954:	bl	113e4 <error@plt>
   1b958:	cmp	r0, #1
   1b95c:	beq	1b974 <__assert_fail@plt+0xa38c>
   1b960:	cmp	r0, #3
   1b964:	bne	1b980 <__assert_fail@plt+0xa398>
   1b968:	bl	114b0 <__errno_location@plt>
   1b96c:	mov	r1, #0
   1b970:	b	1b918 <__assert_fail@plt+0xa330>
   1b974:	bl	114b0 <__errno_location@plt>
   1b978:	mov	r1, #75	; 0x4b
   1b97c:	b	1b918 <__assert_fail@plt+0xa330>
   1b980:	bl	114b0 <__errno_location@plt>
   1b984:	b	1b91c <__assert_fail@plt+0xa334>
   1b988:	mov	r1, #10
   1b98c:	b	1b894 <__assert_fail@plt+0xa2ac>
   1b990:	push	{r4, r5, r6, sl, fp, lr}
   1b994:	add	fp, sp, #16
   1b998:	vpush	{d8}
   1b99c:	sub	sp, sp, #8
   1b9a0:	vldr	d16, [pc, #168]	; 1ba50 <__assert_fail@plt+0xa468>
   1b9a4:	vmov.f64	d8, d0
   1b9a8:	vcmpe.f64	d0, d16
   1b9ac:	vmrs	APSR_nzcv, fpscr
   1b9b0:	blt	1b9c8 <__assert_fail@plt+0xa3e0>
   1b9b4:	bl	112d0 <pause@plt>
   1b9b8:	bl	114b0 <__errno_location@plt>
   1b9bc:	ldr	r0, [r0]
   1b9c0:	cmp	r0, #4
   1b9c4:	beq	1b9b4 <__assert_fail@plt+0xa3cc>
   1b9c8:	vmov.f64	d0, d8
   1b9cc:	mov	r6, sp
   1b9d0:	mov	r0, r6
   1b9d4:	bl	1c980 <__assert_fail@plt+0xb398>
   1b9d8:	bl	114b0 <__errno_location@plt>
   1b9dc:	mov	r5, #0
   1b9e0:	mov	r4, r0
   1b9e4:	mov	r1, r6
   1b9e8:	str	r5, [r0]
   1b9ec:	mov	r0, r6
   1b9f0:	bl	11300 <nanosleep@plt>
   1b9f4:	cmp	r0, #0
   1b9f8:	beq	1ba2c <__assert_fail@plt+0xa444>
   1b9fc:	mov	r6, sp
   1ba00:	mov	r5, #0
   1ba04:	ldr	r0, [r4]
   1ba08:	orr	r0, r0, #4
   1ba0c:	cmp	r0, #4
   1ba10:	bne	1ba3c <__assert_fail@plt+0xa454>
   1ba14:	mov	r0, r6
   1ba18:	mov	r1, r6
   1ba1c:	str	r5, [r4]
   1ba20:	bl	11300 <nanosleep@plt>
   1ba24:	cmp	r0, #0
   1ba28:	bne	1ba04 <__assert_fail@plt+0xa41c>
   1ba2c:	mov	r0, r5
   1ba30:	sub	sp, fp, #24
   1ba34:	vpop	{d8}
   1ba38:	pop	{r4, r5, r6, sl, fp, pc}
   1ba3c:	mvn	r5, #0
   1ba40:	mov	r0, r5
   1ba44:	sub	sp, fp, #24
   1ba48:	vpop	{d8}
   1ba4c:	pop	{r4, r5, r6, sl, fp, pc}
   1ba50:	andeq	r0, r0, r0
   1ba54:	mvnmi	r0, r0
   1ba58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ba5c:	add	fp, sp, #24
   1ba60:	sub	sp, sp, #8
   1ba64:	mov	r4, r3
   1ba68:	mov	r8, r2
   1ba6c:	mov	r9, r1
   1ba70:	mov	r5, r0
   1ba74:	bl	114b0 <__errno_location@plt>
   1ba78:	mov	r6, #0
   1ba7c:	mov	r7, r0
   1ba80:	add	r1, sp, #4
   1ba84:	str	r6, [r0]
   1ba88:	mov	r0, r5
   1ba8c:	blx	r4
   1ba90:	ldr	r0, [sp, #4]
   1ba94:	cmp	r0, r5
   1ba98:	beq	1bae4 <__assert_fail@plt+0xa4fc>
   1ba9c:	cmp	r9, #0
   1baa0:	beq	1bac0 <__assert_fail@plt+0xa4d8>
   1baa4:	vcmp.f64	d0, #0.0
   1baa8:	vmrs	APSR_nzcv, fpscr
   1baac:	beq	1bae0 <__assert_fail@plt+0xa4f8>
   1bab0:	ldr	r1, [r7]
   1bab4:	subs	r6, r1, #34	; 0x22
   1bab8:	movwne	r6, #1
   1babc:	b	1bae4 <__assert_fail@plt+0xa4fc>
   1bac0:	ldrb	r1, [r0]
   1bac4:	mov	r6, #0
   1bac8:	cmp	r1, #0
   1bacc:	beq	1baa4 <__assert_fail@plt+0xa4bc>
   1bad0:	vstr	d0, [r8]
   1bad4:	mov	r0, r6
   1bad8:	sub	sp, fp, #24
   1badc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bae0:	mov	r6, #1
   1bae4:	cmp	r9, #0
   1bae8:	strne	r0, [r9]
   1baec:	vstr	d0, [r8]
   1baf0:	mov	r0, r6
   1baf4:	sub	sp, fp, #24
   1baf8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bafc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb00:	add	fp, sp, #28
   1bb04:	sub	sp, sp, #44	; 0x2c
   1bb08:	cmp	r2, #37	; 0x25
   1bb0c:	bcs	1c790 <__assert_fail@plt+0xb1a8>
   1bb10:	ldr	sl, [fp, #8]
   1bb14:	mov	r6, r2
   1bb18:	mov	r7, r1
   1bb1c:	mov	r4, r0
   1bb20:	str	r3, [sp, #36]	; 0x24
   1bb24:	bl	114b0 <__errno_location@plt>
   1bb28:	mov	r5, r0
   1bb2c:	mov	r0, #0
   1bb30:	str	r0, [r5]
   1bb34:	bl	11450 <__ctype_b_loc@plt>
   1bb38:	ldr	r1, [r0]
   1bb3c:	mov	r2, r4
   1bb40:	ldrb	r0, [r2], #1
   1bb44:	add	r3, r1, r0, lsl #1
   1bb48:	ldrb	r3, [r3, #1]
   1bb4c:	tst	r3, #32
   1bb50:	bne	1bb40 <__assert_fail@plt+0xa558>
   1bb54:	cmp	r7, #0
   1bb58:	sub	r9, fp, #32
   1bb5c:	mov	r8, #4
   1bb60:	movne	r9, r7
   1bb64:	cmp	r0, #45	; 0x2d
   1bb68:	beq	1bf28 <__assert_fail@plt+0xa940>
   1bb6c:	mov	r0, r4
   1bb70:	mov	r1, r9
   1bb74:	mov	r2, r6
   1bb78:	mov	r3, #0
   1bb7c:	bl	11324 <__strtoull_internal@plt>
   1bb80:	mov	r7, r1
   1bb84:	ldr	r1, [r9]
   1bb88:	cmp	r1, r4
   1bb8c:	beq	1bbc4 <__assert_fail@plt+0xa5dc>
   1bb90:	mov	r6, r0
   1bb94:	ldr	r0, [r5]
   1bb98:	cmp	r0, #0
   1bb9c:	beq	1bee0 <__assert_fail@plt+0xa8f8>
   1bba0:	cmp	r0, #34	; 0x22
   1bba4:	bne	1bf28 <__assert_fail@plt+0xa940>
   1bba8:	mov	r8, #1
   1bbac:	cmp	sl, #0
   1bbb0:	beq	1c77c <__assert_fail@plt+0xb194>
   1bbb4:	ldrb	r4, [r1]
   1bbb8:	cmp	r4, #0
   1bbbc:	bne	1bc08 <__assert_fail@plt+0xa620>
   1bbc0:	b	1c77c <__assert_fail@plt+0xb194>
   1bbc4:	cmp	sl, #0
   1bbc8:	beq	1bf28 <__assert_fail@plt+0xa940>
   1bbcc:	mov	r5, r1
   1bbd0:	ldrb	r1, [r4]
   1bbd4:	cmp	r1, #0
   1bbd8:	beq	1bf28 <__assert_fail@plt+0xa940>
   1bbdc:	mov	r0, sl
   1bbe0:	bl	1148c <strchr@plt>
   1bbe4:	cmp	r0, #0
   1bbe8:	beq	1bf28 <__assert_fail@plt+0xa940>
   1bbec:	mov	r1, r5
   1bbf0:	mov	r8, #0
   1bbf4:	mov	r6, #1
   1bbf8:	mov	r7, #0
   1bbfc:	ldrb	r4, [r1]
   1bc00:	cmp	r4, #0
   1bc04:	beq	1c77c <__assert_fail@plt+0xb194>
   1bc08:	str	r1, [sp, #32]
   1bc0c:	mov	r0, sl
   1bc10:	mov	r1, r4
   1bc14:	bl	1148c <strchr@plt>
   1bc18:	cmp	r0, #0
   1bc1c:	beq	1bf1c <__assert_fail@plt+0xa934>
   1bc20:	sub	r0, r4, #69	; 0x45
   1bc24:	mov	r1, #1
   1bc28:	mov	r3, #0
   1bc2c:	mov	r5, #1024	; 0x400
   1bc30:	cmp	r0, #47	; 0x2f
   1bc34:	str	r1, [sp, #28]
   1bc38:	bhi	1bd3c <__assert_fail@plt+0xa754>
   1bc3c:	add	r1, pc, #0
   1bc40:	ldr	pc, [r1, r0, lsl #2]
   1bc44:	andeq	fp, r1, r4, lsl #26
   1bc48:	andeq	fp, r1, ip, lsr sp
   1bc4c:	andeq	fp, r1, r4, lsl #26
   1bc50:	andeq	fp, r1, ip, lsr sp
   1bc54:	andeq	fp, r1, ip, lsr sp
   1bc58:	andeq	fp, r1, ip, lsr sp
   1bc5c:	andeq	fp, r1, r4, lsl #26
   1bc60:	andeq	fp, r1, ip, lsr sp
   1bc64:	andeq	fp, r1, r4, lsl #26
   1bc68:	andeq	fp, r1, ip, lsr sp
   1bc6c:	andeq	fp, r1, ip, lsr sp
   1bc70:	andeq	fp, r1, r4, lsl #26
   1bc74:	andeq	fp, r1, ip, lsr sp
   1bc78:	andeq	fp, r1, ip, lsr sp
   1bc7c:	andeq	fp, r1, ip, lsr sp
   1bc80:	andeq	fp, r1, r4, lsl #26
   1bc84:	andeq	fp, r1, ip, lsr sp
   1bc88:	andeq	fp, r1, ip, lsr sp
   1bc8c:	andeq	fp, r1, ip, lsr sp
   1bc90:	andeq	fp, r1, ip, lsr sp
   1bc94:	andeq	fp, r1, r4, lsl #26
   1bc98:	andeq	fp, r1, r4, lsl #26
   1bc9c:	andeq	fp, r1, ip, lsr sp
   1bca0:	andeq	fp, r1, ip, lsr sp
   1bca4:	andeq	fp, r1, ip, lsr sp
   1bca8:	andeq	fp, r1, ip, lsr sp
   1bcac:	andeq	fp, r1, ip, lsr sp
   1bcb0:	andeq	fp, r1, ip, lsr sp
   1bcb4:	andeq	fp, r1, ip, lsr sp
   1bcb8:	andeq	fp, r1, ip, lsr sp
   1bcbc:	andeq	fp, r1, ip, lsr sp
   1bcc0:	andeq	fp, r1, ip, lsr sp
   1bcc4:	andeq	fp, r1, ip, lsr sp
   1bcc8:	andeq	fp, r1, ip, lsr sp
   1bccc:	andeq	fp, r1, r4, lsl #26
   1bcd0:	andeq	fp, r1, ip, lsr sp
   1bcd4:	andeq	fp, r1, ip, lsr sp
   1bcd8:	andeq	fp, r1, ip, lsr sp
   1bcdc:	andeq	fp, r1, r4, lsl #26
   1bce0:	andeq	fp, r1, ip, lsr sp
   1bce4:	andeq	fp, r1, r4, lsl #26
   1bce8:	andeq	fp, r1, ip, lsr sp
   1bcec:	andeq	fp, r1, ip, lsr sp
   1bcf0:	andeq	fp, r1, ip, lsr sp
   1bcf4:	andeq	fp, r1, ip, lsr sp
   1bcf8:	andeq	fp, r1, ip, lsr sp
   1bcfc:	andeq	fp, r1, ip, lsr sp
   1bd00:	andeq	fp, r1, r4, lsl #26
   1bd04:	mov	r0, sl
   1bd08:	mov	r1, #48	; 0x30
   1bd0c:	bl	1148c <strchr@plt>
   1bd10:	cmp	r0, #0
   1bd14:	beq	1bd38 <__assert_fail@plt+0xa750>
   1bd18:	ldr	r1, [sp, #32]
   1bd1c:	ldrb	r0, [r1, #1]
   1bd20:	cmp	r0, #66	; 0x42
   1bd24:	cmpne	r0, #68	; 0x44
   1bd28:	bne	1bef0 <__assert_fail@plt+0xa908>
   1bd2c:	mov	r5, #1000	; 0x3e8
   1bd30:	mov	r0, #2
   1bd34:	str	r0, [sp, #28]
   1bd38:	mov	r3, #0
   1bd3c:	sub	r0, r4, #66	; 0x42
   1bd40:	cmp	r0, #53	; 0x35
   1bd44:	bhi	1bf1c <__assert_fail@plt+0xa934>
   1bd48:	add	r1, pc, #0
   1bd4c:	ldr	pc, [r1, r0, lsl #2]
   1bd50:	andeq	ip, r1, ip, lsl #5
   1bd54:	andeq	fp, r1, ip, lsl pc
   1bd58:	andeq	fp, r1, ip, lsl pc
   1bd5c:			; <UNDEFINED> instruction: 0x0001c2b4
   1bd60:	andeq	fp, r1, ip, lsl pc
   1bd64:	andeq	fp, r1, r8, lsr #28
   1bd68:	andeq	fp, r1, ip, lsl pc
   1bd6c:	andeq	fp, r1, ip, lsl pc
   1bd70:	andeq	fp, r1, ip, lsl pc
   1bd74:	andeq	fp, r1, r4, lsr pc
   1bd78:	andeq	fp, r1, ip, lsl pc
   1bd7c:	andeq	fp, r1, ip, ror pc
   1bd80:	andeq	fp, r1, ip, lsl pc
   1bd84:	andeq	fp, r1, ip, lsl pc
   1bd88:	andeq	ip, r1, r8, lsl #8
   1bd8c:	andeq	fp, r1, ip, lsl pc
   1bd90:	andeq	fp, r1, ip, lsl pc
   1bd94:	andeq	fp, r1, ip, lsl pc
   1bd98:	andeq	ip, r1, r8
   1bd9c:	andeq	fp, r1, ip, lsl pc
   1bda0:	andeq	fp, r1, ip, lsl pc
   1bda4:	andeq	fp, r1, ip, lsl pc
   1bda8:	andeq	fp, r1, ip, lsl pc
   1bdac:	andeq	ip, r1, r0, lsr r5
   1bdb0:	strdeq	ip, [r1], -r0
   1bdb4:	andeq	fp, r1, ip, lsl pc
   1bdb8:	andeq	fp, r1, ip, lsl pc
   1bdbc:	andeq	fp, r1, ip, lsl pc
   1bdc0:	andeq	fp, r1, ip, lsl pc
   1bdc4:	andeq	fp, r1, ip, lsl pc
   1bdc8:	andeq	fp, r1, ip, lsl pc
   1bdcc:	andeq	fp, r1, ip, lsl pc
   1bdd0:	andeq	ip, r1, r4, lsl #14
   1bdd4:	andeq	ip, r1, ip, asr r7
   1bdd8:	andeq	fp, r1, ip, lsl pc
   1bddc:	andeq	fp, r1, ip, lsl pc
   1bde0:	andeq	fp, r1, ip, lsl pc
   1bde4:	andeq	fp, r1, r8, lsr #28
   1bde8:	andeq	fp, r1, ip, lsl pc
   1bdec:	andeq	fp, r1, ip, lsl pc
   1bdf0:	andeq	fp, r1, ip, lsl pc
   1bdf4:	andeq	fp, r1, r4, lsr pc
   1bdf8:	andeq	fp, r1, ip, lsl pc
   1bdfc:	andeq	fp, r1, ip, ror pc
   1be00:	andeq	fp, r1, ip, lsl pc
   1be04:	andeq	fp, r1, ip, lsl pc
   1be08:	andeq	fp, r1, ip, lsl pc
   1be0c:	andeq	fp, r1, ip, lsl pc
   1be10:	andeq	fp, r1, ip, lsl pc
   1be14:	andeq	fp, r1, ip, lsl pc
   1be18:	andeq	ip, r1, r8
   1be1c:	andeq	fp, r1, ip, lsl pc
   1be20:	andeq	fp, r1, ip, lsl pc
   1be24:	andeq	ip, r1, r8, lsr r7
   1be28:	mvn	r0, #0
   1be2c:	mvn	r1, #0
   1be30:	mov	r2, r5
   1be34:	mov	sl, r3
   1be38:	bl	1cebc <__assert_fail@plt+0xb8d4>
   1be3c:	subs	r3, r0, r6
   1be40:	umull	r4, r2, r6, r5
   1be44:	mov	lr, #0
   1be48:	str	r1, [sp, #20]
   1be4c:	sbcs	r3, r1, r7
   1be50:	movwcc	lr, #1
   1be54:	mla	ip, r6, sl, r2
   1be58:	mov	r2, r1
   1be5c:	mov	r2, #0
   1be60:	cmp	lr, #0
   1be64:	mla	r7, r7, r5, ip
   1be68:	mvnne	r4, #0
   1be6c:	mvnne	r7, #0
   1be70:	subs	r6, r0, r4
   1be74:	sbcs	r6, r1, r7
   1be78:	umull	r3, r6, r4, r5
   1be7c:	movwcc	r2, #1
   1be80:	cmp	r2, #0
   1be84:	mvnne	r3, #0
   1be88:	cmp	r2, #0
   1be8c:	str	r6, [sp, #16]
   1be90:	umull	r6, ip, r3, r5
   1be94:	mla	r1, r3, sl, ip
   1be98:	ldr	ip, [sp, #16]
   1be9c:	str	r1, [sp, #12]
   1bea0:	mla	r4, r4, sl, ip
   1bea4:	mla	r4, r7, r5, r4
   1bea8:	mvnne	r4, #0
   1beac:	subs	r0, r0, r3
   1beb0:	ldr	r0, [sp, #20]
   1beb4:	ldr	r7, [sp, #12]
   1beb8:	sbcs	r0, r0, r4
   1bebc:	mov	r0, #0
   1bec0:	mla	r7, r4, r5, r7
   1bec4:	movwcc	r0, #1
   1bec8:	cmp	r0, #0
   1becc:	mov	r1, r0
   1bed0:	orr	r0, lr, r2
   1bed4:	mvnne	r7, #0
   1bed8:	mvnne	r6, #0
   1bedc:	b	1c528 <__assert_fail@plt+0xaf40>
   1bee0:	mov	r8, r0
   1bee4:	cmp	sl, #0
   1bee8:	bne	1bbb4 <__assert_fail@plt+0xa5cc>
   1beec:	b	1c77c <__assert_fail@plt+0xb194>
   1bef0:	cmp	r0, #105	; 0x69
   1bef4:	mov	r3, #0
   1bef8:	bne	1bd3c <__assert_fail@plt+0xa754>
   1befc:	ldrb	r0, [r1, #2]
   1bf00:	mov	r1, #1
   1bf04:	cmp	r0, #66	; 0x42
   1bf08:	movweq	r1, #3
   1bf0c:	str	r1, [sp, #28]
   1bf10:	sub	r0, r4, #66	; 0x42
   1bf14:	cmp	r0, #53	; 0x35
   1bf18:	bls	1bd48 <__assert_fail@plt+0xa760>
   1bf1c:	ldr	r0, [sp, #36]	; 0x24
   1bf20:	orr	r8, r8, #2
   1bf24:	strd	r6, [r0]
   1bf28:	mov	r0, r8
   1bf2c:	sub	sp, fp, #28
   1bf30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf34:	mvn	r0, #0
   1bf38:	mvn	r1, #0
   1bf3c:	mov	r2, r5
   1bf40:	mov	r4, r3
   1bf44:	bl	1cebc <__assert_fail@plt+0xb8d4>
   1bf48:	subs	r0, r0, r6
   1bf4c:	mov	r2, #0
   1bf50:	sbcs	r0, r1, r7
   1bf54:	umull	r0, r1, r6, r5
   1bf58:	movwcc	r2, #1
   1bf5c:	cmp	r2, #0
   1bf60:	mla	r1, r6, r4, r1
   1bf64:	mov	r3, r2
   1bf68:	mvnne	r0, #0
   1bf6c:	mla	r7, r7, r5, r1
   1bf70:	mvnne	r7, #0
   1bf74:	mov	r6, r0
   1bf78:	b	1c75c <__assert_fail@plt+0xb174>
   1bf7c:	mvn	r0, #0
   1bf80:	mvn	r1, #0
   1bf84:	mov	r2, r5
   1bf88:	str	r3, [sp, #24]
   1bf8c:	bl	1cebc <__assert_fail@plt+0xb8d4>
   1bf90:	subs	r3, r0, r6
   1bf94:	mov	ip, r0
   1bf98:	umull	r4, r0, r6, r5
   1bf9c:	mov	sl, #0
   1bfa0:	sbcs	r3, r1, r7
   1bfa4:	mov	r3, #0
   1bfa8:	movwcc	r3, #1
   1bfac:	cmp	r3, #0
   1bfb0:	str	r0, [sp, #20]
   1bfb4:	ldr	r0, [sp, #24]
   1bfb8:	mvnne	r4, #0
   1bfbc:	cmp	r3, #0
   1bfc0:	umull	lr, r2, r4, r5
   1bfc4:	mla	r2, r4, r0, r2
   1bfc8:	str	r2, [sp, #16]
   1bfcc:	ldr	r2, [sp, #20]
   1bfd0:	mla	r6, r6, r0, r2
   1bfd4:	ldr	r0, [sp, #16]
   1bfd8:	mla	r6, r7, r5, r6
   1bfdc:	mvnne	r6, #0
   1bfe0:	mla	r7, r6, r5, r0
   1bfe4:	subs	r0, ip, r4
   1bfe8:	sbcs	r0, r1, r6
   1bfec:	movwcc	sl, #1
   1bff0:	cmp	sl, #0
   1bff4:	orr	r3, r3, sl
   1bff8:	mvnne	lr, #0
   1bffc:	mvnne	r7, #0
   1c000:	mov	r6, lr
   1c004:	b	1c75c <__assert_fail@plt+0xb174>
   1c008:	mvn	r0, #0
   1c00c:	mvn	r1, #0
   1c010:	mov	r2, r5
   1c014:	mov	sl, r3
   1c018:	bl	1cebc <__assert_fail@plt+0xb8d4>
   1c01c:	subs	r3, r0, r6
   1c020:	mov	ip, r1
   1c024:	umull	r2, lr, r6, r5
   1c028:	str	r0, [sp, #20]
   1c02c:	sbcs	r3, r1, r7
   1c030:	mov	r1, #0
   1c034:	str	ip, [sp, #16]
   1c038:	movwcc	r1, #1
   1c03c:	mla	r6, r6, sl, lr
   1c040:	mov	lr, #0
   1c044:	cmp	r1, #0
   1c048:	mla	r7, r7, r5, r6
   1c04c:	mvnne	r2, #0
   1c050:	cmp	r1, #0
   1c054:	umull	r3, r4, r2, r5
   1c058:	mvnne	r7, #0
   1c05c:	mla	r4, r2, sl, r4
   1c060:	subs	r2, r0, r2
   1c064:	sbcs	r2, ip, r7
   1c068:	mla	r4, r7, r5, r4
   1c06c:	mov	r2, #0
   1c070:	movwcc	lr, #1
   1c074:	cmp	lr, #0
   1c078:	mvnne	r3, #0
   1c07c:	mvnne	r4, #0
   1c080:	subs	r7, r0, r3
   1c084:	mov	r0, r5
   1c088:	sbcs	r7, ip, r4
   1c08c:	umull	r5, r7, r3, r5
   1c090:	movwcc	r2, #1
   1c094:	cmp	r2, #0
   1c098:	mla	r3, r3, sl, r7
   1c09c:	mvnne	r5, #0
   1c0a0:	cmp	r2, #0
   1c0a4:	mla	r3, r4, r0, r3
   1c0a8:	umull	r6, ip, r5, r0
   1c0ac:	mvnne	r3, #0
   1c0b0:	mla	ip, r5, sl, ip
   1c0b4:	mla	r7, r3, r0, ip
   1c0b8:	ldr	r0, [sp, #20]
   1c0bc:	subs	r0, r0, r5
   1c0c0:	ldr	r0, [sp, #16]
   1c0c4:	sbcs	r0, r0, r3
   1c0c8:	mov	r0, #0
   1c0cc:	movwcc	r0, #1
   1c0d0:	cmp	r0, #0
   1c0d4:	mov	r3, r0
   1c0d8:	orr	r0, r1, lr
   1c0dc:	orr	r0, r0, r2
   1c0e0:	mvnne	r7, #0
   1c0e4:	mvnne	r6, #0
   1c0e8:	orr	r3, r0, r3
   1c0ec:	b	1c75c <__assert_fail@plt+0xb174>
   1c0f0:	mvn	r0, #0
   1c0f4:	mvn	r1, #0
   1c0f8:	mov	r2, r5
   1c0fc:	mov	r4, r3
   1c100:	str	r3, [sp, #24]
   1c104:	bl	1cebc <__assert_fail@plt+0xb8d4>
   1c108:	umull	r3, r2, r6, r5
   1c10c:	mla	r2, r6, r4, r2
   1c110:	subs	r6, r0, r6
   1c114:	sbcs	r6, r1, r7
   1c118:	mov	r6, #0
   1c11c:	mla	r2, r7, r5, r2
   1c120:	mov	r7, #0
   1c124:	movwcc	r6, #1
   1c128:	cmp	r6, #0
   1c12c:	str	r6, [sp, #20]
   1c130:	mvnne	r3, #0
   1c134:	mvnne	r2, #0
   1c138:	subs	r4, r0, r3
   1c13c:	umull	r6, ip, r3, r5
   1c140:	sbcs	r4, r1, r2
   1c144:	ldr	r4, [sp, #24]
   1c148:	movwcc	r7, #1
   1c14c:	cmp	r7, #0
   1c150:	mov	lr, r7
   1c154:	str	r7, [sp, #16]
   1c158:	mvnne	r6, #0
   1c15c:	cmp	lr, #0
   1c160:	mov	lr, #0
   1c164:	umull	sl, r7, r6, r5
   1c168:	mla	r3, r3, r4, ip
   1c16c:	mla	r2, r2, r5, r3
   1c170:	mvnne	r2, #0
   1c174:	subs	r3, r0, r6
   1c178:	mla	r7, r6, r4, r7
   1c17c:	mov	r4, r0
   1c180:	mov	r0, #0
   1c184:	mla	r7, r2, r5, r7
   1c188:	sbcs	r2, r1, r2
   1c18c:	mov	r3, r4
   1c190:	movwcc	r0, #1
   1c194:	str	r3, [sp, #4]
   1c198:	cmp	r0, #0
   1c19c:	str	r0, [sp, #12]
   1c1a0:	mov	r0, r1
   1c1a4:	mvnne	sl, #0
   1c1a8:	mvnne	r7, #0
   1c1ac:	str	r0, [sp, #8]
   1c1b0:	subs	r2, r4, sl
   1c1b4:	ldr	r4, [sp, #24]
   1c1b8:	sbcs	r2, r1, r7
   1c1bc:	umull	r6, r2, sl, r5
   1c1c0:	movwcc	lr, #1
   1c1c4:	cmp	lr, #0
   1c1c8:	mvnne	r6, #0
   1c1cc:	mla	r2, sl, r4, r2
   1c1d0:	cmp	lr, #0
   1c1d4:	umull	r1, ip, r6, r5
   1c1d8:	mla	r2, r7, r5, r2
   1c1dc:	mvnne	r2, #0
   1c1e0:	mla	ip, r6, r4, ip
   1c1e4:	subs	r6, r3, r6
   1c1e8:	mla	r7, r2, r5, ip
   1c1ec:	sbcs	r2, r0, r2
   1c1f0:	mov	ip, #0
   1c1f4:	mov	r2, #0
   1c1f8:	movwcc	ip, #1
   1c1fc:	cmp	ip, #0
   1c200:	mvnne	r1, #0
   1c204:	mvnne	r7, #0
   1c208:	subs	r6, r3, r1
   1c20c:	ldr	r3, [sp, #24]
   1c210:	sbcs	r6, r0, r7
   1c214:	umull	r0, sl, r1, r5
   1c218:	movwcc	r2, #1
   1c21c:	cmp	r2, #0
   1c220:	mvnne	r0, #0
   1c224:	mla	r1, r1, r3, sl
   1c228:	cmp	r2, #0
   1c22c:	umull	r6, r4, r0, r5
   1c230:	mla	r1, r7, r5, r1
   1c234:	mvnne	r1, #0
   1c238:	mla	r4, r0, r3, r4
   1c23c:	ldr	r3, [sp, #4]
   1c240:	mla	r7, r1, r5, r4
   1c244:	ldr	r5, [sp, #16]
   1c248:	subs	r0, r3, r0
   1c24c:	ldr	r0, [sp, #8]
   1c250:	sbcs	r0, r0, r1
   1c254:	mov	r0, #0
   1c258:	movwcc	r0, #1
   1c25c:	cmp	r0, #0
   1c260:	mov	r1, r0
   1c264:	ldr	r0, [sp, #20]
   1c268:	mvnne	r7, #0
   1c26c:	mvnne	r6, #0
   1c270:	orr	r0, r0, r5
   1c274:	ldr	r5, [sp, #12]
   1c278:	orr	r0, r0, r5
   1c27c:	orr	r0, r0, lr
   1c280:	orr	r0, r0, ip
   1c284:	orr	r0, r0, r2
   1c288:	b	1c6f8 <__assert_fail@plt+0xb110>
   1c28c:	mov	r1, #0
   1c290:	lsl	r2, r7, #10
   1c294:	lsl	r0, r6, #10
   1c298:	lsr	r3, r7, #22
   1c29c:	cmp	r1, r7, lsr #22
   1c2a0:	orr	r2, r2, r6, lsr #22
   1c2a4:	mvnne	r0, #0
   1c2a8:	movwne	r3, #1
   1c2ac:	cmp	r1, r7, lsr #22
   1c2b0:	b	1c728 <__assert_fail@plt+0xb140>
   1c2b4:	mvn	r0, #0
   1c2b8:	mvn	r1, #0
   1c2bc:	mov	r2, r5
   1c2c0:	mov	sl, r3
   1c2c4:	bl	1cebc <__assert_fail@plt+0xb8d4>
   1c2c8:	subs	r2, r0, r6
   1c2cc:	mov	ip, r0
   1c2d0:	mov	r0, #0
   1c2d4:	sbcs	r2, r1, r7
   1c2d8:	umull	r4, r2, r6, r5
   1c2dc:	movwcc	r0, #1
   1c2e0:	cmp	r0, #0
   1c2e4:	mla	r2, r6, sl, r2
   1c2e8:	str	r0, [sp, #20]
   1c2ec:	mvnne	r4, #0
   1c2f0:	cmp	r0, #0
   1c2f4:	mla	r2, r7, r5, r2
   1c2f8:	mov	r0, #0
   1c2fc:	umull	lr, r3, r4, r5
   1c300:	mvnne	r2, #0
   1c304:	mla	r3, r4, sl, r3
   1c308:	mla	r6, r2, r5, r3
   1c30c:	subs	r3, ip, r4
   1c310:	mov	r3, r1
   1c314:	sbcs	r2, r1, r2
   1c318:	str	r3, [sp, #8]
   1c31c:	movwcc	r0, #1
   1c320:	cmp	r0, #0
   1c324:	str	r0, [sp, #16]
   1c328:	mov	r0, ip
   1c32c:	mvnne	lr, #0
   1c330:	mvnne	r6, #0
   1c334:	str	r0, [sp, #12]
   1c338:	subs	r2, ip, lr
   1c33c:	umull	r7, r4, lr, r5
   1c340:	sbcs	r2, r1, r6
   1c344:	mov	r2, #0
   1c348:	movwcc	r2, #1
   1c34c:	mla	r4, lr, sl, r4
   1c350:	cmp	r2, #0
   1c354:	mla	r6, r6, r5, r4
   1c358:	mov	r4, #0
   1c35c:	mvnne	r7, #0
   1c360:	cmp	r2, #0
   1c364:	umull	r1, ip, r7, r5
   1c368:	mvnne	r6, #0
   1c36c:	mla	ip, r7, sl, ip
   1c370:	subs	r7, r0, r7
   1c374:	sbcs	r7, r3, r6
   1c378:	mla	lr, r6, r5, ip
   1c37c:	mov	ip, #0
   1c380:	movwcc	ip, #1
   1c384:	cmp	ip, #0
   1c388:	mvnne	r1, #0
   1c38c:	mvnne	lr, #0
   1c390:	subs	r7, r0, r1
   1c394:	sbcs	r7, r3, lr
   1c398:	umull	r0, r7, r1, r5
   1c39c:	movwcc	r4, #1
   1c3a0:	cmp	r4, #0
   1c3a4:	mla	r1, r1, sl, r7
   1c3a8:	mvnne	r0, #0
   1c3ac:	cmp	r4, #0
   1c3b0:	mla	r1, lr, r5, r1
   1c3b4:	umull	r6, r3, r0, r5
   1c3b8:	mvnne	r1, #0
   1c3bc:	mla	r3, r0, sl, r3
   1c3c0:	mla	r7, r1, r5, r3
   1c3c4:	ldr	r3, [sp, #12]
   1c3c8:	subs	r0, r3, r0
   1c3cc:	ldr	r0, [sp, #8]
   1c3d0:	ldr	r3, [sp, #16]
   1c3d4:	sbcs	r0, r0, r1
   1c3d8:	mov	r0, #0
   1c3dc:	movwcc	r0, #1
   1c3e0:	cmp	r0, #0
   1c3e4:	mov	r1, r0
   1c3e8:	ldr	r0, [sp, #20]
   1c3ec:	mvnne	r7, #0
   1c3f0:	mvnne	r6, #0
   1c3f4:	orr	r0, r0, r3
   1c3f8:	orr	r0, r0, r2
   1c3fc:	orr	r0, r0, ip
   1c400:	orr	r0, r0, r4
   1c404:	b	1c528 <__assert_fail@plt+0xaf40>
   1c408:	mvn	r0, #0
   1c40c:	mvn	r1, #0
   1c410:	mov	r2, r5
   1c414:	mov	sl, r3
   1c418:	bl	1cebc <__assert_fail@plt+0xb8d4>
   1c41c:	umull	r3, r2, r6, r5
   1c420:	mov	lr, r1
   1c424:	mov	r1, r0
   1c428:	mla	r2, r6, sl, r2
   1c42c:	subs	r6, r0, r6
   1c430:	mov	r0, #0
   1c434:	sbcs	r6, lr, r7
   1c438:	mla	r2, r7, r5, r2
   1c43c:	movwcc	r0, #1
   1c440:	cmp	r0, #0
   1c444:	str	r0, [sp, #20]
   1c448:	mov	r0, r1
   1c44c:	mvnne	r3, #0
   1c450:	mvnne	r2, #0
   1c454:	str	r0, [sp, #16]
   1c458:	subs	r4, r1, r3
   1c45c:	umull	r7, ip, r3, r5
   1c460:	sbcs	r4, lr, r2
   1c464:	mov	r4, #0
   1c468:	movwcc	r4, #1
   1c46c:	mla	r3, r3, sl, ip
   1c470:	mov	ip, #0
   1c474:	cmp	r4, #0
   1c478:	mla	r2, r2, r5, r3
   1c47c:	mvnne	r7, #0
   1c480:	cmp	r4, #0
   1c484:	umull	r1, r6, r7, r5
   1c488:	mvnne	r2, #0
   1c48c:	mla	r6, r7, sl, r6
   1c490:	mla	r3, r2, r5, r6
   1c494:	subs	r6, r0, r7
   1c498:	sbcs	r2, lr, r2
   1c49c:	mov	r2, #0
   1c4a0:	movwcc	ip, #1
   1c4a4:	cmp	ip, #0
   1c4a8:	mvnne	r1, #0
   1c4ac:	mvnne	r3, #0
   1c4b0:	subs	r6, r0, r1
   1c4b4:	sbcs	r6, lr, r3
   1c4b8:	umull	r0, r6, r1, r5
   1c4bc:	movwcc	r2, #1
   1c4c0:	cmp	r2, #0
   1c4c4:	mvnne	r0, #0
   1c4c8:	cmp	r2, #0
   1c4cc:	str	r6, [sp, #12]
   1c4d0:	umull	r6, r7, r0, r5
   1c4d4:	mla	r7, r0, sl, r7
   1c4d8:	str	r7, [sp, #8]
   1c4dc:	ldr	r7, [sp, #12]
   1c4e0:	mla	r1, r1, sl, r7
   1c4e4:	mla	r1, r3, r5, r1
   1c4e8:	ldr	r3, [sp, #8]
   1c4ec:	mvnne	r1, #0
   1c4f0:	mla	r7, r1, r5, r3
   1c4f4:	ldr	r3, [sp, #16]
   1c4f8:	subs	r0, r3, r0
   1c4fc:	sbcs	r0, lr, r1
   1c500:	mov	r0, #0
   1c504:	movwcc	r0, #1
   1c508:	cmp	r0, #0
   1c50c:	mov	r1, r0
   1c510:	ldr	r0, [sp, #20]
   1c514:	mvnne	r7, #0
   1c518:	mvnne	r6, #0
   1c51c:	orr	r0, r0, r4
   1c520:	orr	r0, r0, ip
   1c524:	orr	r0, r0, r2
   1c528:	orr	r3, r0, r1
   1c52c:	b	1c75c <__assert_fail@plt+0xb174>
   1c530:	mvn	r0, #0
   1c534:	mvn	r1, #0
   1c538:	mov	r2, r5
   1c53c:	mov	sl, r3
   1c540:	bl	1cebc <__assert_fail@plt+0xb8d4>
   1c544:	mov	ip, r1
   1c548:	subs	r1, r0, r6
   1c54c:	umull	r3, lr, r6, r5
   1c550:	mov	r2, r5
   1c554:	sbcs	r1, ip, r7
   1c558:	mov	r1, #0
   1c55c:	str	ip, [sp, #4]
   1c560:	movwcc	r1, #1
   1c564:	mla	r6, r6, sl, lr
   1c568:	cmp	r1, #0
   1c56c:	mla	r7, r7, r2, r6
   1c570:	str	r1, [sp, #20]
   1c574:	mvnne	r3, #0
   1c578:	cmp	r1, #0
   1c57c:	mov	r1, r0
   1c580:	umull	r4, r5, r3, r5
   1c584:	mvnne	r7, #0
   1c588:	mov	lr, r1
   1c58c:	mla	r5, r3, sl, r5
   1c590:	subs	r3, r0, r3
   1c594:	sbcs	r0, ip, r7
   1c598:	mov	r0, #0
   1c59c:	mla	r5, r7, r2, r5
   1c5a0:	movwcc	r0, #1
   1c5a4:	cmp	r0, #0
   1c5a8:	str	r0, [sp, #16]
   1c5ac:	mvnne	r4, #0
   1c5b0:	mvnne	r5, #0
   1c5b4:	subs	r0, r1, r4
   1c5b8:	mov	r1, #0
   1c5bc:	sbcs	r0, ip, r5
   1c5c0:	umull	r3, r0, r4, r2
   1c5c4:	movwcc	r1, #1
   1c5c8:	cmp	r1, #0
   1c5cc:	mla	r0, r4, sl, r0
   1c5d0:	mov	r4, lr
   1c5d4:	str	r1, [sp, #12]
   1c5d8:	mvnne	r3, #0
   1c5dc:	cmp	r1, #0
   1c5e0:	mla	r0, r5, r2, r0
   1c5e4:	str	r4, [sp]
   1c5e8:	umull	r7, r6, r3, r2
   1c5ec:	mvnne	r0, #0
   1c5f0:	mla	r6, r3, sl, r6
   1c5f4:	subs	r3, lr, r3
   1c5f8:	mov	r3, #0
   1c5fc:	mla	r5, r0, r2, r6
   1c600:	sbcs	r0, ip, r0
   1c604:	mov	r0, #0
   1c608:	movwcc	r0, #1
   1c60c:	cmp	r0, #0
   1c610:	str	r0, [sp, #8]
   1c614:	mvnne	r7, #0
   1c618:	mvnne	r5, #0
   1c61c:	subs	r0, lr, r7
   1c620:	sbcs	r0, ip, r5
   1c624:	umull	r6, r0, r7, r2
   1c628:	movwcc	r3, #1
   1c62c:	cmp	r3, #0
   1c630:	mla	r7, r7, sl, r0
   1c634:	mov	r0, ip
   1c638:	mvnne	r6, #0
   1c63c:	cmp	r3, #0
   1c640:	mla	r7, r5, r2, r7
   1c644:	mov	r5, #0
   1c648:	umull	r1, lr, r6, r2
   1c64c:	mvnne	r7, #0
   1c650:	mla	lr, r6, sl, lr
   1c654:	subs	r6, r4, r6
   1c658:	mla	lr, r7, r2, lr
   1c65c:	sbcs	r7, ip, r7
   1c660:	mov	ip, #0
   1c664:	movwcc	ip, #1
   1c668:	cmp	ip, #0
   1c66c:	mvnne	r1, #0
   1c670:	mvnne	lr, #0
   1c674:	subs	r7, r4, r1
   1c678:	sbcs	r7, r0, lr
   1c67c:	umull	r0, r7, r1, r2
   1c680:	movwcc	r5, #1
   1c684:	cmp	r5, #0
   1c688:	mla	r1, r1, sl, r7
   1c68c:	mvnne	r0, #0
   1c690:	cmp	r5, #0
   1c694:	mla	r1, lr, r2, r1
   1c698:	umull	r6, r4, r0, r2
   1c69c:	mvnne	r1, #0
   1c6a0:	mla	r4, r0, sl, r4
   1c6a4:	mla	r7, r1, r2, r4
   1c6a8:	ldr	r2, [sp]
   1c6ac:	subs	r0, r2, r0
   1c6b0:	ldr	r0, [sp, #4]
   1c6b4:	ldr	r2, [sp, #16]
   1c6b8:	sbcs	r0, r0, r1
   1c6bc:	mov	r0, #0
   1c6c0:	movwcc	r0, #1
   1c6c4:	cmp	r0, #0
   1c6c8:	mov	r1, r0
   1c6cc:	ldr	r0, [sp, #20]
   1c6d0:	mvnne	r7, #0
   1c6d4:	mvnne	r6, #0
   1c6d8:	orr	r0, r0, r2
   1c6dc:	ldr	r2, [sp, #12]
   1c6e0:	orr	r0, r0, r2
   1c6e4:	ldr	r2, [sp, #8]
   1c6e8:	orr	r0, r0, r2
   1c6ec:	orr	r0, r0, r3
   1c6f0:	orr	r0, r0, ip
   1c6f4:	orr	r0, r0, r5
   1c6f8:	orr	r0, r0, r1
   1c6fc:	and	r3, r0, #1
   1c700:	b	1c75c <__assert_fail@plt+0xb174>
   1c704:	mov	r1, #0
   1c708:	lsl	r2, r7, #9
   1c70c:	lsl	r0, r6, #9
   1c710:	lsr	r3, r7, #23
   1c714:	cmp	r1, r7, lsr #23
   1c718:	orr	r2, r2, r6, lsr #23
   1c71c:	mvnne	r0, #0
   1c720:	movwne	r3, #1
   1c724:	cmp	r1, r7, lsr #23
   1c728:	mvnne	r2, #0
   1c72c:	mov	r6, r0
   1c730:	mov	r7, r2
   1c734:	b	1c75c <__assert_fail@plt+0xb174>
   1c738:	lsl	r1, r7, #1
   1c73c:	cmp	r7, #0
   1c740:	lsl	r0, r6, #1
   1c744:	lsr	r3, r7, #31
   1c748:	orr	r1, r1, r6, lsr #31
   1c74c:	mvnmi	r0, #0
   1c750:	mvnmi	r1, #0
   1c754:	mov	r6, r0
   1c758:	mov	r7, r1
   1c75c:	ldr	r1, [sp, #32]
   1c760:	ldr	r2, [sp, #28]
   1c764:	orr	r8, r3, r8
   1c768:	add	r0, r1, r2
   1c76c:	str	r0, [r9]
   1c770:	ldrb	r0, [r1, r2]
   1c774:	cmp	r0, #0
   1c778:	orrne	r8, r8, #2
   1c77c:	ldr	r0, [sp, #36]	; 0x24
   1c780:	strd	r6, [r0]
   1c784:	mov	r0, r8
   1c788:	sub	sp, fp, #28
   1c78c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c790:	movw	r0, #59961	; 0xea39
   1c794:	movw	r1, #59999	; 0xea5f
   1c798:	movw	r3, #60015	; 0xea6f
   1c79c:	mov	r2, #85	; 0x55
   1c7a0:	movt	r0, #1
   1c7a4:	movt	r1, #1
   1c7a8:	movt	r3, #1
   1c7ac:	bl	115e8 <__assert_fail@plt>
   1c7b0:	clz	r2, r1
   1c7b4:	clz	r3, r0
   1c7b8:	lsr	r2, r2, #5
   1c7bc:	lsr	r3, r3, #5
   1c7c0:	orrs	r2, r3, r2
   1c7c4:	movwne	r1, #1
   1c7c8:	movwne	r0, #1
   1c7cc:	cmp	r1, #0
   1c7d0:	beq	1c800 <__assert_fail@plt+0xb218>
   1c7d4:	mvn	r2, #-2147483648	; 0x80000000
   1c7d8:	udiv	r2, r2, r1
   1c7dc:	cmp	r2, r0
   1c7e0:	bcs	1c800 <__assert_fail@plt+0xb218>
   1c7e4:	push	{fp, lr}
   1c7e8:	mov	fp, sp
   1c7ec:	bl	114b0 <__errno_location@plt>
   1c7f0:	mov	r1, #12
   1c7f4:	str	r1, [r0]
   1c7f8:	mov	r0, #0
   1c7fc:	pop	{fp, pc}
   1c800:	b	11294 <calloc@plt>
   1c804:	cmp	r0, #0
   1c808:	movweq	r0, #1
   1c80c:	cmn	r0, #1
   1c810:	ble	1c818 <__assert_fail@plt+0xb230>
   1c814:	b	11408 <malloc@plt>
   1c818:	push	{fp, lr}
   1c81c:	mov	fp, sp
   1c820:	bl	114b0 <__errno_location@plt>
   1c824:	mov	r1, #12
   1c828:	str	r1, [r0]
   1c82c:	mov	r0, #0
   1c830:	pop	{fp, pc}
   1c834:	push	{fp, lr}
   1c838:	mov	fp, sp
   1c83c:	cmp	r0, #0
   1c840:	beq	1c85c <__assert_fail@plt+0xb274>
   1c844:	cmp	r1, #0
   1c848:	beq	1c868 <__assert_fail@plt+0xb280>
   1c84c:	cmn	r1, #1
   1c850:	ble	1c874 <__assert_fail@plt+0xb28c>
   1c854:	pop	{fp, lr}
   1c858:	b	11354 <realloc@plt>
   1c85c:	mov	r0, r1
   1c860:	pop	{fp, lr}
   1c864:	b	1c804 <__assert_fail@plt+0xb21c>
   1c868:	bl	17634 <__assert_fail@plt+0x604c>
   1c86c:	mov	r0, #0
   1c870:	pop	{fp, pc}
   1c874:	bl	114b0 <__errno_location@plt>
   1c878:	mov	r1, #12
   1c87c:	str	r1, [r0]
   1c880:	mov	r0, #0
   1c884:	pop	{fp, pc}
   1c888:	push	{r4, r5, r6, sl, fp, lr}
   1c88c:	add	fp, sp, #16
   1c890:	movw	r6, #62224	; 0xf310
   1c894:	mov	r5, r0
   1c898:	mov	r4, r1
   1c89c:	movt	r6, #2
   1c8a0:	ldr	r0, [r6]
   1c8a4:	cmp	r0, #0
   1c8a8:	beq	1c8c8 <__assert_fail@plt+0xb2e0>
   1c8ac:	ldr	r2, [r6]
   1c8b0:	cmp	r2, #0
   1c8b4:	beq	1c8ec <__assert_fail@plt+0xb304>
   1c8b8:	mov	r0, r5
   1c8bc:	mov	r1, r4
   1c8c0:	pop	{r4, r5, r6, sl, fp, lr}
   1c8c4:	b	11528 <strtod_l@plt>
   1c8c8:	movw	r1, #60094	; 0xeabe
   1c8cc:	movw	r0, #8127	; 0x1fbf
   1c8d0:	mov	r2, #0
   1c8d4:	movt	r1, #1
   1c8d8:	bl	11570 <newlocale@plt>
   1c8dc:	str	r0, [r6]
   1c8e0:	ldr	r2, [r6]
   1c8e4:	cmp	r2, #0
   1c8e8:	bne	1c8b8 <__assert_fail@plt+0xb2d0>
   1c8ec:	vmov.i32	d0, #0	; 0x00000000
   1c8f0:	cmp	r4, #0
   1c8f4:	strne	r5, [r4]
   1c8f8:	pop	{r4, r5, r6, sl, fp, pc}
   1c8fc:	push	{r4, r5, r6, sl, fp, lr}
   1c900:	add	fp, sp, #16
   1c904:	mov	r4, r0
   1c908:	bl	113cc <__fpending@plt>
   1c90c:	ldr	r6, [r4]
   1c910:	mov	r5, r0
   1c914:	mov	r0, r4
   1c918:	bl	1ca58 <__assert_fail@plt+0xb470>
   1c91c:	tst	r6, #32
   1c920:	bne	1c958 <__assert_fail@plt+0xb370>
   1c924:	cmp	r0, #0
   1c928:	mov	r4, r0
   1c92c:	mvnne	r4, #0
   1c930:	cmp	r5, #0
   1c934:	bne	1c964 <__assert_fail@plt+0xb37c>
   1c938:	cmp	r0, #0
   1c93c:	beq	1c964 <__assert_fail@plt+0xb37c>
   1c940:	bl	114b0 <__errno_location@plt>
   1c944:	ldr	r0, [r0]
   1c948:	subs	r4, r0, #9
   1c94c:	mvnne	r4, #0
   1c950:	mov	r0, r4
   1c954:	pop	{r4, r5, r6, sl, fp, pc}
   1c958:	mvn	r4, #0
   1c95c:	cmp	r0, #0
   1c960:	beq	1c96c <__assert_fail@plt+0xb384>
   1c964:	mov	r0, r4
   1c968:	pop	{r4, r5, r6, sl, fp, pc}
   1c96c:	bl	114b0 <__errno_location@plt>
   1c970:	mov	r1, #0
   1c974:	str	r1, [r0]
   1c978:	mov	r0, r4
   1c97c:	pop	{r4, r5, r6, sl, fp, pc}
   1c980:	push	{fp, lr}
   1c984:	mov	fp, sp
   1c988:	vldr	d16, [pc, #176]	; 1ca40 <__assert_fail@plt+0xb458>
   1c98c:	vcmpe.f64	d0, d16
   1c990:	vmrs	APSR_nzcv, fpscr
   1c994:	ble	1ca14 <__assert_fail@plt+0xb42c>
   1c998:	vldr	d16, [pc, #168]	; 1ca48 <__assert_fail@plt+0xb460>
   1c99c:	movw	ip, #51712	; 0xca00
   1c9a0:	movt	ip, #15258	; 0x3b9a
   1c9a4:	vcmpe.f64	d0, d16
   1c9a8:	vmrs	APSR_nzcv, fpscr
   1c9ac:	bpl	1ca28 <__assert_fail@plt+0xb440>
   1c9b0:	vcvt.s32.f64	s2, d0
   1c9b4:	vldr	d16, [pc, #148]	; 1ca50 <__assert_fail@plt+0xb468>
   1c9b8:	movw	r1, #12193	; 0x2fa1
   1c9bc:	movt	r1, #17592	; 0x44b8
   1c9c0:	vcvt.f64.s32	d17, s2
   1c9c4:	vmov	lr, s2
   1c9c8:	vsub.f64	d17, d0, d17
   1c9cc:	vmul.f64	d16, d17, d16
   1c9d0:	vcvt.s32.f64	s0, d16
   1c9d4:	vcvt.f64.s32	d17, s0
   1c9d8:	vmov	r2, s0
   1c9dc:	vcmpe.f64	d16, d17
   1c9e0:	vmrs	APSR_nzcv, fpscr
   1c9e4:	addgt	r2, r2, #1
   1c9e8:	smmul	r1, r2, r1
   1c9ec:	asr	r3, r1, #28
   1c9f0:	add	r1, r3, r1, lsr #31
   1c9f4:	mls	r2, r1, ip, r2
   1c9f8:	add	r1, r1, lr
   1c9fc:	add	r3, r1, r2, asr #31
   1ca00:	cmp	r2, #0
   1ca04:	addmi	r2, r2, ip
   1ca08:	str	r3, [r0]
   1ca0c:	str	r2, [r0, #4]
   1ca10:	pop	{fp, pc}
   1ca14:	mov	r2, #0
   1ca18:	mov	r3, #-2147483648	; 0x80000000
   1ca1c:	str	r3, [r0]
   1ca20:	str	r2, [r0, #4]
   1ca24:	pop	{fp, pc}
   1ca28:	sub	r2, ip, #1
   1ca2c:	mvn	r3, #-2147483648	; 0x80000000
   1ca30:	str	r3, [r0]
   1ca34:	str	r2, [r0, #4]
   1ca38:	pop	{fp, pc}
   1ca3c:	nop	{0}
   1ca40:	andeq	r0, r0, r0
   1ca44:	mvngt	r0, r0
   1ca48:	andeq	r0, r0, r0
   1ca4c:	mvnmi	r0, r0
   1ca50:	andeq	r0, r0, r0
   1ca54:	bicmi	ip, sp, r5, ror #26
   1ca58:	push	{r4, r5, r6, sl, fp, lr}
   1ca5c:	add	fp, sp, #16
   1ca60:	sub	sp, sp, #8
   1ca64:	mov	r4, r0
   1ca68:	bl	114ec <fileno@plt>
   1ca6c:	cmn	r0, #1
   1ca70:	ble	1cae4 <__assert_fail@plt+0xb4fc>
   1ca74:	mov	r0, r4
   1ca78:	bl	11420 <__freading@plt>
   1ca7c:	cmp	r0, #0
   1ca80:	beq	1caac <__assert_fail@plt+0xb4c4>
   1ca84:	mov	r0, r4
   1ca88:	bl	114ec <fileno@plt>
   1ca8c:	mov	r1, #1
   1ca90:	mov	r2, #0
   1ca94:	mov	r3, #0
   1ca98:	str	r1, [sp]
   1ca9c:	bl	113b4 <lseek64@plt>
   1caa0:	and	r0, r0, r1
   1caa4:	cmn	r0, #1
   1caa8:	beq	1cae4 <__assert_fail@plt+0xb4fc>
   1caac:	mov	r0, r4
   1cab0:	bl	1caf4 <__assert_fail@plt+0xb50c>
   1cab4:	cmp	r0, #0
   1cab8:	beq	1cae4 <__assert_fail@plt+0xb4fc>
   1cabc:	bl	114b0 <__errno_location@plt>
   1cac0:	ldr	r6, [r0]
   1cac4:	mov	r5, r0
   1cac8:	mov	r0, r4
   1cacc:	bl	11510 <fclose@plt>
   1cad0:	cmp	r6, #0
   1cad4:	strne	r6, [r5]
   1cad8:	mvnne	r0, #0
   1cadc:	sub	sp, fp, #16
   1cae0:	pop	{r4, r5, r6, sl, fp, pc}
   1cae4:	mov	r0, r4
   1cae8:	sub	sp, fp, #16
   1caec:	pop	{r4, r5, r6, sl, fp, lr}
   1caf0:	b	11510 <fclose@plt>
   1caf4:	push	{r4, sl, fp, lr}
   1caf8:	add	fp, sp, #8
   1cafc:	sub	sp, sp, #8
   1cb00:	mov	r4, r0
   1cb04:	cmp	r0, #0
   1cb08:	beq	1cb40 <__assert_fail@plt+0xb558>
   1cb0c:	mov	r0, r4
   1cb10:	bl	11420 <__freading@plt>
   1cb14:	cmp	r0, #0
   1cb18:	beq	1cb40 <__assert_fail@plt+0xb558>
   1cb1c:	ldrb	r0, [r4, #1]
   1cb20:	tst	r0, #1
   1cb24:	beq	1cb40 <__assert_fail@plt+0xb558>
   1cb28:	mov	r0, #1
   1cb2c:	mov	r2, #0
   1cb30:	mov	r3, #0
   1cb34:	str	r0, [sp]
   1cb38:	mov	r0, r4
   1cb3c:	bl	1cb50 <__assert_fail@plt+0xb568>
   1cb40:	mov	r0, r4
   1cb44:	sub	sp, fp, #8
   1cb48:	pop	{r4, sl, fp, lr}
   1cb4c:	b	112e8 <fflush@plt>
   1cb50:	push	{r4, r5, r6, r7, fp, lr}
   1cb54:	add	fp, sp, #16
   1cb58:	sub	sp, sp, #8
   1cb5c:	mov	r4, r0
   1cb60:	ldr	r0, [r0, #4]
   1cb64:	mov	r5, r3
   1cb68:	mov	r6, r2
   1cb6c:	ldr	r1, [r4, #8]
   1cb70:	cmp	r1, r0
   1cb74:	bne	1cb90 <__assert_fail@plt+0xb5a8>
   1cb78:	ldrd	r0, [r4, #16]
   1cb7c:	cmp	r1, r0
   1cb80:	bne	1cb90 <__assert_fail@plt+0xb5a8>
   1cb84:	ldr	r0, [r4, #36]	; 0x24
   1cb88:	cmp	r0, #0
   1cb8c:	beq	1cba8 <__assert_fail@plt+0xb5c0>
   1cb90:	mov	r0, r4
   1cb94:	mov	r2, r6
   1cb98:	mov	r3, r5
   1cb9c:	sub	sp, fp, #16
   1cba0:	pop	{r4, r5, r6, r7, fp, lr}
   1cba4:	b	1151c <fseeko64@plt>
   1cba8:	ldr	r7, [fp, #8]
   1cbac:	mov	r0, r4
   1cbb0:	bl	114ec <fileno@plt>
   1cbb4:	mov	r2, r6
   1cbb8:	mov	r3, r5
   1cbbc:	str	r7, [sp]
   1cbc0:	bl	113b4 <lseek64@plt>
   1cbc4:	and	r2, r0, r1
   1cbc8:	cmn	r2, #1
   1cbcc:	beq	1cbec <__assert_fail@plt+0xb604>
   1cbd0:	strd	r0, [r4, #80]	; 0x50
   1cbd4:	ldr	r0, [r4]
   1cbd8:	bic	r0, r0, #16
   1cbdc:	str	r0, [r4]
   1cbe0:	mov	r0, #0
   1cbe4:	sub	sp, fp, #16
   1cbe8:	pop	{r4, r5, r6, r7, fp, pc}
   1cbec:	mvn	r0, #0
   1cbf0:	sub	sp, fp, #16
   1cbf4:	pop	{r4, r5, r6, r7, fp, pc}
   1cbf8:	push	{fp, lr}
   1cbfc:	mov	fp, sp
   1cc00:	mov	r0, #14
   1cc04:	bl	11564 <nl_langinfo@plt>
   1cc08:	movw	r1, #55494	; 0xd8c6
   1cc0c:	cmp	r0, #0
   1cc10:	movt	r1, #1
   1cc14:	movne	r1, r0
   1cc18:	movw	r0, #60096	; 0xeac0
   1cc1c:	ldrb	r2, [r1]
   1cc20:	movt	r0, #1
   1cc24:	cmp	r2, #0
   1cc28:	movne	r0, r1
   1cc2c:	pop	{fp, pc}
   1cc30:	push	{r4, r5, r6, r7, fp, lr}
   1cc34:	add	fp, sp, #16
   1cc38:	sub	sp, sp, #8
   1cc3c:	cmp	r0, #0
   1cc40:	add	r5, sp, #4
   1cc44:	mov	r7, r2
   1cc48:	mov	r4, r1
   1cc4c:	movne	r5, r0
   1cc50:	mov	r0, r5
   1cc54:	bl	113d8 <mbrtowc@plt>
   1cc58:	mov	r6, r0
   1cc5c:	cmp	r7, #0
   1cc60:	beq	1cc88 <__assert_fail@plt+0xb6a0>
   1cc64:	cmn	r6, #2
   1cc68:	bcc	1cc88 <__assert_fail@plt+0xb6a0>
   1cc6c:	mov	r0, #0
   1cc70:	bl	1ccdc <__assert_fail@plt+0xb6f4>
   1cc74:	cmp	r0, #0
   1cc78:	bne	1cc88 <__assert_fail@plt+0xb6a0>
   1cc7c:	ldrb	r0, [r4]
   1cc80:	mov	r6, #1
   1cc84:	str	r0, [r5]
   1cc88:	mov	r0, r6
   1cc8c:	sub	sp, fp, #16
   1cc90:	pop	{r4, r5, r6, r7, fp, pc}
   1cc94:	cmp	r2, #0
   1cc98:	beq	1ccc8 <__assert_fail@plt+0xb6e0>
   1cc9c:	mvn	r3, #0
   1cca0:	udiv	r3, r3, r2
   1cca4:	cmp	r3, r1
   1cca8:	bcs	1ccc8 <__assert_fail@plt+0xb6e0>
   1ccac:	push	{fp, lr}
   1ccb0:	mov	fp, sp
   1ccb4:	bl	114b0 <__errno_location@plt>
   1ccb8:	mov	r1, #12
   1ccbc:	str	r1, [r0]
   1ccc0:	mov	r0, #0
   1ccc4:	pop	{fp, pc}
   1ccc8:	mul	r1, r2, r1
   1cccc:	b	1c834 <__assert_fail@plt+0xb24c>
   1ccd0:	mov	r1, #0
   1ccd4:	mov	r2, #3
   1ccd8:	b	17418 <__assert_fail@plt+0x5e30>
   1ccdc:	push	{r4, sl, fp, lr}
   1cce0:	add	fp, sp, #8
   1cce4:	sub	sp, sp, #264	; 0x108
   1cce8:	add	r1, sp, #7
   1ccec:	movw	r2, #257	; 0x101
   1ccf0:	bl	1cd48 <__assert_fail@plt+0xb760>
   1ccf4:	mov	r4, #0
   1ccf8:	cmp	r0, #0
   1ccfc:	bne	1cd3c <__assert_fail@plt+0xb754>
   1cd00:	movw	r1, #60094	; 0xeabe
   1cd04:	add	r0, sp, #7
   1cd08:	mov	r2, #2
   1cd0c:	movt	r1, #1
   1cd10:	bl	11468 <bcmp@plt>
   1cd14:	cmp	r0, #0
   1cd18:	beq	1cd3c <__assert_fail@plt+0xb754>
   1cd1c:	movw	r1, #60102	; 0xeac6
   1cd20:	add	r0, sp, #7
   1cd24:	mov	r2, #6
   1cd28:	movt	r1, #1
   1cd2c:	bl	11468 <bcmp@plt>
   1cd30:	cmp	r0, #0
   1cd34:	mov	r4, r0
   1cd38:	movwne	r4, #1
   1cd3c:	mov	r0, r4
   1cd40:	sub	sp, fp, #8
   1cd44:	pop	{r4, sl, fp, pc}
   1cd48:	push	{r4, r5, r6, r7, fp, lr}
   1cd4c:	add	fp, sp, #16
   1cd50:	mov	r4, r1
   1cd54:	mov	r1, #0
   1cd58:	mov	r6, r2
   1cd5c:	bl	1154c <setlocale@plt>
   1cd60:	cmp	r0, #0
   1cd64:	beq	1cd94 <__assert_fail@plt+0xb7ac>
   1cd68:	mov	r7, r0
   1cd6c:	bl	11474 <strlen@plt>
   1cd70:	cmp	r0, r6
   1cd74:	bcs	1cdb0 <__assert_fail@plt+0xb7c8>
   1cd78:	add	r2, r0, #1
   1cd7c:	mov	r0, r4
   1cd80:	mov	r1, r7
   1cd84:	bl	11318 <memcpy@plt>
   1cd88:	mov	r5, #0
   1cd8c:	mov	r0, r5
   1cd90:	pop	{r4, r5, r6, r7, fp, pc}
   1cd94:	mov	r5, #22
   1cd98:	cmp	r6, #0
   1cd9c:	beq	1cdd8 <__assert_fail@plt+0xb7f0>
   1cda0:	mov	r0, #0
   1cda4:	strb	r0, [r4]
   1cda8:	mov	r0, r5
   1cdac:	pop	{r4, r5, r6, r7, fp, pc}
   1cdb0:	mov	r5, #34	; 0x22
   1cdb4:	cmp	r6, #0
   1cdb8:	beq	1cdd8 <__assert_fail@plt+0xb7f0>
   1cdbc:	sub	r6, r6, #1
   1cdc0:	mov	r0, r4
   1cdc4:	mov	r1, r7
   1cdc8:	mov	r2, r6
   1cdcc:	bl	11318 <memcpy@plt>
   1cdd0:	mov	r0, #0
   1cdd4:	strb	r0, [r4, r6]
   1cdd8:	mov	r0, r5
   1cddc:	pop	{r4, r5, r6, r7, fp, pc}
   1cde0:	mov	r1, #0
   1cde4:	b	1154c <setlocale@plt>
   1cde8:	cmp	r3, #0
   1cdec:	cmpeq	r2, #0
   1cdf0:	bne	1ce14 <__assert_fail@plt+0xb82c>
   1cdf4:	cmp	r1, #0
   1cdf8:	movlt	r1, #-2147483648	; 0x80000000
   1cdfc:	movlt	r0, #0
   1ce00:	blt	1ce10 <__assert_fail@plt+0xb828>
   1ce04:	cmpeq	r0, #0
   1ce08:	mvnne	r1, #-2147483648	; 0x80000000
   1ce0c:	mvnne	r0, #0
   1ce10:	b	1cef8 <__assert_fail@plt+0xb910>
   1ce14:	sub	sp, sp, #8
   1ce18:	push	{sp, lr}
   1ce1c:	cmp	r1, #0
   1ce20:	blt	1ce40 <__assert_fail@plt+0xb858>
   1ce24:	cmp	r3, #0
   1ce28:	blt	1ce74 <__assert_fail@plt+0xb88c>
   1ce2c:	bl	1cf08 <__assert_fail@plt+0xb920>
   1ce30:	ldr	lr, [sp, #4]
   1ce34:	add	sp, sp, #8
   1ce38:	pop	{r2, r3}
   1ce3c:	bx	lr
   1ce40:	rsbs	r0, r0, #0
   1ce44:	sbc	r1, r1, r1, lsl #1
   1ce48:	cmp	r3, #0
   1ce4c:	blt	1ce98 <__assert_fail@plt+0xb8b0>
   1ce50:	bl	1cf08 <__assert_fail@plt+0xb920>
   1ce54:	ldr	lr, [sp, #4]
   1ce58:	add	sp, sp, #8
   1ce5c:	pop	{r2, r3}
   1ce60:	rsbs	r0, r0, #0
   1ce64:	sbc	r1, r1, r1, lsl #1
   1ce68:	rsbs	r2, r2, #0
   1ce6c:	sbc	r3, r3, r3, lsl #1
   1ce70:	bx	lr
   1ce74:	rsbs	r2, r2, #0
   1ce78:	sbc	r3, r3, r3, lsl #1
   1ce7c:	bl	1cf08 <__assert_fail@plt+0xb920>
   1ce80:	ldr	lr, [sp, #4]
   1ce84:	add	sp, sp, #8
   1ce88:	pop	{r2, r3}
   1ce8c:	rsbs	r0, r0, #0
   1ce90:	sbc	r1, r1, r1, lsl #1
   1ce94:	bx	lr
   1ce98:	rsbs	r2, r2, #0
   1ce9c:	sbc	r3, r3, r3, lsl #1
   1cea0:	bl	1cf08 <__assert_fail@plt+0xb920>
   1cea4:	ldr	lr, [sp, #4]
   1cea8:	add	sp, sp, #8
   1ceac:	pop	{r2, r3}
   1ceb0:	rsbs	r2, r2, #0
   1ceb4:	sbc	r3, r3, r3, lsl #1
   1ceb8:	bx	lr
   1cebc:	cmp	r3, #0
   1cec0:	cmpeq	r2, #0
   1cec4:	bne	1cedc <__assert_fail@plt+0xb8f4>
   1cec8:	cmp	r1, #0
   1cecc:	cmpeq	r0, #0
   1ced0:	mvnne	r1, #0
   1ced4:	mvnne	r0, #0
   1ced8:	b	1cef8 <__assert_fail@plt+0xb910>
   1cedc:	sub	sp, sp, #8
   1cee0:	push	{sp, lr}
   1cee4:	bl	1cf08 <__assert_fail@plt+0xb920>
   1cee8:	ldr	lr, [sp, #4]
   1ceec:	add	sp, sp, #8
   1cef0:	pop	{r2, r3}
   1cef4:	bx	lr
   1cef8:	push	{r1, lr}
   1cefc:	mov	r0, #8
   1cf00:	bl	112ac <raise@plt>
   1cf04:	pop	{r1, pc}
   1cf08:	cmp	r1, r3
   1cf0c:	cmpeq	r0, r2
   1cf10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf14:	mov	r4, r0
   1cf18:	movcc	r0, #0
   1cf1c:	mov	r5, r1
   1cf20:	ldr	lr, [sp, #36]	; 0x24
   1cf24:	movcc	r1, r0
   1cf28:	bcc	1d024 <__assert_fail@plt+0xba3c>
   1cf2c:	cmp	r3, #0
   1cf30:	clzeq	ip, r2
   1cf34:	clzne	ip, r3
   1cf38:	addeq	ip, ip, #32
   1cf3c:	cmp	r5, #0
   1cf40:	clzeq	r1, r4
   1cf44:	addeq	r1, r1, #32
   1cf48:	clzne	r1, r5
   1cf4c:	sub	ip, ip, r1
   1cf50:	sub	sl, ip, #32
   1cf54:	lsl	r9, r3, ip
   1cf58:	rsb	fp, ip, #32
   1cf5c:	orr	r9, r9, r2, lsl sl
   1cf60:	orr	r9, r9, r2, lsr fp
   1cf64:	lsl	r8, r2, ip
   1cf68:	cmp	r5, r9
   1cf6c:	cmpeq	r4, r8
   1cf70:	movcc	r0, #0
   1cf74:	movcc	r1, r0
   1cf78:	bcc	1cf94 <__assert_fail@plt+0xb9ac>
   1cf7c:	mov	r0, #1
   1cf80:	subs	r4, r4, r8
   1cf84:	lsl	r1, r0, sl
   1cf88:	orr	r1, r1, r0, lsr fp
   1cf8c:	lsl	r0, r0, ip
   1cf90:	sbc	r5, r5, r9
   1cf94:	cmp	ip, #0
   1cf98:	beq	1d024 <__assert_fail@plt+0xba3c>
   1cf9c:	lsr	r6, r8, #1
   1cfa0:	orr	r6, r6, r9, lsl #31
   1cfa4:	lsr	r7, r9, #1
   1cfa8:	mov	r2, ip
   1cfac:	b	1cfd0 <__assert_fail@plt+0xb9e8>
   1cfb0:	subs	r3, r4, r6
   1cfb4:	sbc	r8, r5, r7
   1cfb8:	adds	r3, r3, r3
   1cfbc:	adc	r8, r8, r8
   1cfc0:	adds	r4, r3, #1
   1cfc4:	adc	r5, r8, #0
   1cfc8:	subs	r2, r2, #1
   1cfcc:	beq	1cfec <__assert_fail@plt+0xba04>
   1cfd0:	cmp	r5, r7
   1cfd4:	cmpeq	r4, r6
   1cfd8:	bcs	1cfb0 <__assert_fail@plt+0xb9c8>
   1cfdc:	adds	r4, r4, r4
   1cfe0:	adc	r5, r5, r5
   1cfe4:	subs	r2, r2, #1
   1cfe8:	bne	1cfd0 <__assert_fail@plt+0xb9e8>
   1cfec:	lsr	r3, r4, ip
   1cff0:	orr	r3, r3, r5, lsl fp
   1cff4:	lsr	r2, r5, ip
   1cff8:	orr	r3, r3, r5, lsr sl
   1cffc:	adds	r0, r0, r4
   1d000:	mov	r4, r3
   1d004:	lsl	r3, r2, ip
   1d008:	orr	r3, r3, r4, lsl sl
   1d00c:	lsl	ip, r4, ip
   1d010:	orr	r3, r3, r4, lsr fp
   1d014:	adc	r1, r1, r5
   1d018:	subs	r0, r0, ip
   1d01c:	mov	r5, r2
   1d020:	sbc	r1, r1, r3
   1d024:	cmp	lr, #0
   1d028:	strdne	r4, [lr]
   1d02c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d030:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d034:	mov	r7, r0
   1d038:	ldr	r6, [pc, #72]	; 1d088 <__assert_fail@plt+0xbaa0>
   1d03c:	ldr	r5, [pc, #72]	; 1d08c <__assert_fail@plt+0xbaa4>
   1d040:	add	r6, pc, r6
   1d044:	add	r5, pc, r5
   1d048:	sub	r6, r6, r5
   1d04c:	mov	r8, r1
   1d050:	mov	r9, r2
   1d054:	bl	11268 <fstatfs64@plt-0x20>
   1d058:	asrs	r6, r6, #2
   1d05c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d060:	mov	r4, #0
   1d064:	add	r4, r4, #1
   1d068:	ldr	r3, [r5], #4
   1d06c:	mov	r2, r9
   1d070:	mov	r1, r8
   1d074:	mov	r0, r7
   1d078:	blx	r3
   1d07c:	cmp	r6, r4
   1d080:	bne	1d064 <__assert_fail@plt+0xba7c>
   1d084:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d088:	andeq	r1, r1, r4, asr #29
   1d08c:			; <UNDEFINED> instruction: 0x00011ebc
   1d090:	bx	lr
   1d094:	ldr	r3, [pc, #12]	; 1d0a8 <__assert_fail@plt+0xbac0>
   1d098:	mov	r1, #0
   1d09c:	add	r3, pc, r3
   1d0a0:	ldr	r2, [r3]
   1d0a4:	b	114bc <__cxa_atexit@plt>
   1d0a8:	muleq	r1, r8, r0

Disassembly of section .fini:

0001d0ac <.fini>:
   1d0ac:	push	{r3, lr}
   1d0b0:	pop	{r3, pc}
