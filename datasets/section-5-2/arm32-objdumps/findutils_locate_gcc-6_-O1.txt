
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000114d0 <.init>:
   114d0:	push	{r3, lr}
   114d4:	bl	119ec <__assert_fail@plt+0x4c>
   114d8:	pop	{r3, pc}

Disassembly of section .plt:

000114dc <pthread_mutex_unlock@plt-0x14>:
   114dc:	push	{lr}		; (str lr, [sp, #-4]!)
   114e0:	ldr	lr, [pc, #4]	; 114ec <pthread_mutex_unlock@plt-0x4>
   114e4:	add	lr, pc, lr
   114e8:	ldr	pc, [lr, #8]!
   114ec:	andeq	fp, r2, r4, lsl fp

000114f0 <pthread_mutex_unlock@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #176128	; 0x2b000
   114f8:	ldr	pc, [ip, #2836]!	; 0xb14

000114fc <fdopen@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #176128	; 0x2b000
   11504:	ldr	pc, [ip, #2828]!	; 0xb0c

00011508 <calloc@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #176128	; 0x2b000
   11510:	ldr	pc, [ip, #2820]!	; 0xb04

00011514 <wctype@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #176128	; 0x2b000
   1151c:	ldr	pc, [ip, #2812]!	; 0xafc

00011520 <raise@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #176128	; 0x2b000
   11528:	ldr	pc, [ip, #2804]!	; 0xaf4

0001152c <wcrtomb@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #176128	; 0x2b000
   11534:	ldr	pc, [ip, #2796]!	; 0xaec

00011538 <iswctype@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #176128	; 0x2b000
   11540:	ldr	pc, [ip, #2788]!	; 0xae4

00011544 <strcmp@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #176128	; 0x2b000
   1154c:	ldr	pc, [ip, #2780]!	; 0xadc

00011550 <printf@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #176128	; 0x2b000
   11558:	ldr	pc, [ip, #2772]!	; 0xad4

0001155c <pthread_mutex_destroy@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #176128	; 0x2b000
   11564:	ldr	pc, [ip, #2764]!	; 0xacc

00011568 <fflush@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #176128	; 0x2b000
   11570:	ldr	pc, [ip, #2756]!	; 0xac4

00011574 <wcwidth@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #176128	; 0x2b000
   1157c:	ldr	pc, [ip, #2748]!	; 0xabc

00011580 <getuid@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #176128	; 0x2b000
   11588:	ldr	pc, [ip, #2740]!	; 0xab4

0001158c <memmove@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #176128	; 0x2b000
   11594:	ldr	pc, [ip, #2732]!	; 0xaac

00011598 <free@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #176128	; 0x2b000
   115a0:	ldr	pc, [ip, #2724]!	; 0xaa4

000115a4 <pthread_mutex_lock@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #176128	; 0x2b000
   115ac:	ldr	pc, [ip, #2716]!	; 0xa9c

000115b0 <ferror@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #176128	; 0x2b000
   115b8:	ldr	pc, [ip, #2708]!	; 0xa94

000115bc <strndup@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #176128	; 0x2b000
   115c4:	ldr	pc, [ip, #2700]!	; 0xa8c

000115c8 <_exit@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #176128	; 0x2b000
   115d0:	ldr	pc, [ip, #2692]!	; 0xa84

000115d4 <memcpy@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #176128	; 0x2b000
   115dc:	ldr	pc, [ip, #2684]!	; 0xa7c

000115e0 <pthread_mutex_init@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #176128	; 0x2b000
   115e8:	ldr	pc, [ip, #2676]!	; 0xa74

000115ec <__strtoull_internal@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #176128	; 0x2b000
   115f4:	ldr	pc, [ip, #2668]!	; 0xa6c

000115f8 <towlower@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #176128	; 0x2b000
   11600:	ldr	pc, [ip, #2660]!	; 0xa64

00011604 <mbsinit@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #176128	; 0x2b000
   1160c:	ldr	pc, [ip, #2652]!	; 0xa5c

00011610 <time@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #176128	; 0x2b000
   11618:	ldr	pc, [ip, #2644]!	; 0xa54

0001161c <memcmp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #176128	; 0x2b000
   11624:	ldr	pc, [ip, #2636]!	; 0xa4c

00011628 <dcgettext@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #176128	; 0x2b000
   11630:	ldr	pc, [ip, #2628]!	; 0xa44

00011634 <realloc@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #176128	; 0x2b000
   1163c:	ldr	pc, [ip, #2620]!	; 0xa3c

00011640 <textdomain@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #176128	; 0x2b000
   11648:	ldr	pc, [ip, #2612]!	; 0xa34

0001164c <iswcntrl@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #176128	; 0x2b000
   11654:	ldr	pc, [ip, #2604]!	; 0xa2c

00011658 <geteuid@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #176128	; 0x2b000
   11660:	ldr	pc, [ip, #2596]!	; 0xa24

00011664 <iswprint@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #176128	; 0x2b000
   1166c:	ldr	pc, [ip, #2588]!	; 0xa1c

00011670 <setgroups@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #176128	; 0x2b000
   11678:	ldr	pc, [ip, #2580]!	; 0xa14

0001167c <__fxstat64@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #176128	; 0x2b000
   11684:	ldr	pc, [ip, #2572]!	; 0xa0c

00011688 <fwrite@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #176128	; 0x2b000
   11690:	ldr	pc, [ip, #2564]!	; 0xa04

00011694 <lseek64@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #176128	; 0x2b000
   1169c:	ldr	pc, [ip, #2556]!	; 0x9fc

000116a0 <__ctype_get_mb_cur_max@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #176128	; 0x2b000
   116a8:	ldr	pc, [ip, #2548]!	; 0x9f4

000116ac <fread@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #176128	; 0x2b000
   116b4:	ldr	pc, [ip, #2540]!	; 0x9ec

000116b8 <__fpending@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #176128	; 0x2b000
   116c0:	ldr	pc, [ip, #2532]!	; 0x9e4

000116c4 <mbrtowc@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #176128	; 0x2b000
   116cc:	ldr	pc, [ip, #2524]!	; 0x9dc

000116d0 <error@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #176128	; 0x2b000
   116d8:	ldr	pc, [ip, #2516]!	; 0x9d4

000116dc <fnmatch@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #176128	; 0x2b000
   116e4:	ldr	pc, [ip, #2508]!	; 0x9cc

000116e8 <open64@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #176128	; 0x2b000
   116f0:	ldr	pc, [ip, #2500]!	; 0x9c4

000116f4 <getenv@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #176128	; 0x2b000
   116fc:	ldr	pc, [ip, #2492]!	; 0x9bc

00011700 <setgid@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #176128	; 0x2b000
   11708:	ldr	pc, [ip, #2484]!	; 0x9b4

0001170c <malloc@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #176128	; 0x2b000
   11714:	ldr	pc, [ip, #2476]!	; 0x9ac

00011718 <__libc_start_main@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #176128	; 0x2b000
   11720:	ldr	pc, [ip, #2468]!	; 0x9a4

00011724 <strftime@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #176128	; 0x2b000
   1172c:	ldr	pc, [ip, #2460]!	; 0x99c

00011730 <__freading@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #176128	; 0x2b000
   11738:	ldr	pc, [ip, #2452]!	; 0x994

0001173c <localtime@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #176128	; 0x2b000
   11744:	ldr	pc, [ip, #2444]!	; 0x98c

00011748 <__ctype_tolower_loc@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #176128	; 0x2b000
   11750:	ldr	pc, [ip, #2436]!	; 0x984

00011754 <__ctype_toupper_loc@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #176128	; 0x2b000
   1175c:	ldr	pc, [ip, #2428]!	; 0x97c

00011760 <__gmon_start__@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #176128	; 0x2b000
   11768:	ldr	pc, [ip, #2420]!	; 0x974

0001176c <getopt_long@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #176128	; 0x2b000
   11774:	ldr	pc, [ip, #2412]!	; 0x96c

00011778 <__ctype_b_loc@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #176128	; 0x2b000
   11780:	ldr	pc, [ip, #2404]!	; 0x964

00011784 <exit@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #176128	; 0x2b000
   1178c:	ldr	pc, [ip, #2396]!	; 0x95c

00011790 <feof@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #176128	; 0x2b000
   11798:	ldr	pc, [ip, #2388]!	; 0x954

0001179c <strtoul@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #176128	; 0x2b000
   117a4:	ldr	pc, [ip, #2380]!	; 0x94c

000117a8 <strlen@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #176128	; 0x2b000
   117b0:	ldr	pc, [ip, #2372]!	; 0x944

000117b4 <strchr@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #176128	; 0x2b000
   117bc:	ldr	pc, [ip, #2364]!	; 0x93c

000117c0 <fprintf@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #176128	; 0x2b000
   117c8:	ldr	pc, [ip, #2356]!	; 0x934

000117cc <ungetc@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #176128	; 0x2b000
   117d4:	ldr	pc, [ip, #2348]!	; 0x92c

000117d8 <__errno_location@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #176128	; 0x2b000
   117e0:	ldr	pc, [ip, #2340]!	; 0x924

000117e4 <iswalnum@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #176128	; 0x2b000
   117ec:	ldr	pc, [ip, #2332]!	; 0x91c

000117f0 <strncasecmp@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #176128	; 0x2b000
   117f8:	ldr	pc, [ip, #2324]!	; 0x914

000117fc <__cxa_atexit@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #176128	; 0x2b000
   11804:	ldr	pc, [ip, #2316]!	; 0x90c

00011808 <getgid@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #176128	; 0x2b000
   11810:	ldr	pc, [ip, #2308]!	; 0x904

00011814 <memset@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #176128	; 0x2b000
   1181c:	ldr	pc, [ip, #2300]!	; 0x8fc

00011820 <putchar@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #176128	; 0x2b000
   11828:	ldr	pc, [ip, #2292]!	; 0x8f4

0001182c <btowc@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #176128	; 0x2b000
   11834:	ldr	pc, [ip, #2284]!	; 0x8ec

00011838 <fgetc@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #176128	; 0x2b000
   11840:	ldr	pc, [ip, #2276]!	; 0x8e4

00011844 <fileno@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #176128	; 0x2b000
   1184c:	ldr	pc, [ip, #2268]!	; 0x8dc

00011850 <difftime@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #176128	; 0x2b000
   11858:	ldr	pc, [ip, #2260]!	; 0x8d4

0001185c <memchr@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #176128	; 0x2b000
   11864:	ldr	pc, [ip, #2252]!	; 0x8cc

00011868 <fclose@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #176128	; 0x2b000
   11870:	ldr	pc, [ip, #2244]!	; 0x8c4

00011874 <strnlen@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #176128	; 0x2b000
   1187c:	ldr	pc, [ip, #2236]!	; 0x8bc

00011880 <fseeko64@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #176128	; 0x2b000
   11888:	ldr	pc, [ip, #2228]!	; 0x8b4

0001188c <fcntl64@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #176128	; 0x2b000
   11894:	ldr	pc, [ip, #2220]!	; 0x8ac

00011898 <setlocale@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #176128	; 0x2b000
   118a0:	ldr	pc, [ip, #2212]!	; 0x8a4

000118a4 <strrchr@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #176128	; 0x2b000
   118ac:	ldr	pc, [ip, #2204]!	; 0x89c

000118b0 <nl_langinfo@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #176128	; 0x2b000
   118b8:	ldr	pc, [ip, #2196]!	; 0x894

000118bc <fputc@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #176128	; 0x2b000
   118c4:	ldr	pc, [ip, #2188]!	; 0x88c

000118c8 <setuid@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #176128	; 0x2b000
   118d0:	ldr	pc, [ip, #2180]!	; 0x884

000118d4 <localeconv@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #176128	; 0x2b000
   118dc:	ldr	pc, [ip, #2172]!	; 0x87c

000118e0 <clearerr@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #176128	; 0x2b000
   118e8:	ldr	pc, [ip, #2164]!	; 0x874

000118ec <sprintf@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #176128	; 0x2b000
   118f4:	ldr	pc, [ip, #2156]!	; 0x86c

000118f8 <putc@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #176128	; 0x2b000
   11900:	ldr	pc, [ip, #2148]!	; 0x864

00011904 <strpbrk@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #176128	; 0x2b000
   1190c:	ldr	pc, [ip, #2140]!	; 0x85c

00011910 <bindtextdomain@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #176128	; 0x2b000
   11918:	ldr	pc, [ip, #2132]!	; 0x854

0001191c <getdelim@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #176128	; 0x2b000
   11924:	ldr	pc, [ip, #2124]!	; 0x84c

00011928 <__xstat64@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #176128	; 0x2b000
   11930:	ldr	pc, [ip, #2116]!	; 0x844

00011934 <isatty@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #176128	; 0x2b000
   1193c:	ldr	pc, [ip, #2108]!	; 0x83c

00011940 <towupper@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #176128	; 0x2b000
   11948:	ldr	pc, [ip, #2100]!	; 0x834

0001194c <fputs@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #176128	; 0x2b000
   11954:	ldr	pc, [ip, #2092]!	; 0x82c

00011958 <strncmp@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #176128	; 0x2b000
   11960:	ldr	pc, [ip, #2084]!	; 0x824

00011964 <abort@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #176128	; 0x2b000
   1196c:	ldr	pc, [ip, #2076]!	; 0x81c

00011970 <getc@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #176128	; 0x2b000
   11978:	ldr	pc, [ip, #2068]!	; 0x814

0001197c <close@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #176128	; 0x2b000
   11984:	ldr	pc, [ip, #2060]!	; 0x80c

00011988 <__lxstat64@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #176128	; 0x2b000
   11990:	ldr	pc, [ip, #2052]!	; 0x804

00011994 <dcngettext@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #176128	; 0x2b000
   1199c:	ldr	pc, [ip, #2044]!	; 0x7fc

000119a0 <__assert_fail@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #176128	; 0x2b000
   119a8:	ldr	pc, [ip, #2036]!	; 0x7f4

Disassembly of section .text:

000119b0 <.text>:
   119b0:	mov	fp, #0
   119b4:	mov	lr, #0
   119b8:	pop	{r1}		; (ldr r1, [sp], #4)
   119bc:	mov	r2, sp
   119c0:	push	{r2}		; (str r2, [sp, #-4]!)
   119c4:	push	{r0}		; (str r0, [sp, #-4]!)
   119c8:	ldr	ip, [pc, #16]	; 119e0 <__assert_fail@plt+0x40>
   119cc:	push	{ip}		; (str ip, [sp, #-4]!)
   119d0:	ldr	r0, [pc, #12]	; 119e4 <__assert_fail@plt+0x44>
   119d4:	ldr	r3, [pc, #12]	; 119e8 <__assert_fail@plt+0x48>
   119d8:	bl	11718 <__libc_start_main@plt>
   119dc:	bl	11964 <abort@plt>
   119e0:	andeq	fp, r2, r8, asr #6
   119e4:	andeq	r3, r1, r4, lsr #3
   119e8:	andeq	fp, r2, r8, ror #5
   119ec:	ldr	r3, [pc, #20]	; 11a08 <__assert_fail@plt+0x68>
   119f0:	ldr	r2, [pc, #20]	; 11a0c <__assert_fail@plt+0x6c>
   119f4:	add	r3, pc, r3
   119f8:	ldr	r2, [r3, r2]
   119fc:	cmp	r2, #0
   11a00:	bxeq	lr
   11a04:	b	11760 <__gmon_start__@plt>
   11a08:	andeq	fp, r2, r4, lsl #12
   11a0c:	andeq	r0, r0, r0, lsr #3
   11a10:	ldr	r3, [pc, #28]	; 11a34 <__assert_fail@plt+0x94>
   11a14:	ldr	r0, [pc, #28]	; 11a38 <__assert_fail@plt+0x98>
   11a18:	sub	r3, r3, r0
   11a1c:	cmp	r3, #6
   11a20:	bxls	lr
   11a24:	ldr	r3, [pc, #16]	; 11a3c <__assert_fail@plt+0x9c>
   11a28:	cmp	r3, #0
   11a2c:	bxeq	lr
   11a30:	bx	r3
   11a34:	andeq	sp, r3, r7, lsl #4
   11a38:	andeq	sp, r3, r4, lsl #4
   11a3c:	andeq	r0, r0, r0
   11a40:	ldr	r1, [pc, #36]	; 11a6c <__assert_fail@plt+0xcc>
   11a44:	ldr	r0, [pc, #36]	; 11a70 <__assert_fail@plt+0xd0>
   11a48:	sub	r1, r1, r0
   11a4c:	asr	r1, r1, #2
   11a50:	add	r1, r1, r1, lsr #31
   11a54:	asrs	r1, r1, #1
   11a58:	bxeq	lr
   11a5c:	ldr	r3, [pc, #16]	; 11a74 <__assert_fail@plt+0xd4>
   11a60:	cmp	r3, #0
   11a64:	bxeq	lr
   11a68:	bx	r3
   11a6c:	andeq	sp, r3, r4, lsl #4
   11a70:	andeq	sp, r3, r4, lsl #4
   11a74:	andeq	r0, r0, r0
   11a78:	push	{r4, lr}
   11a7c:	ldr	r4, [pc, #24]	; 11a9c <__assert_fail@plt+0xfc>
   11a80:	ldrb	r3, [r4]
   11a84:	cmp	r3, #0
   11a88:	popne	{r4, pc}
   11a8c:	bl	11a10 <__assert_fail@plt+0x70>
   11a90:	mov	r3, #1
   11a94:	strb	r3, [r4]
   11a98:	pop	{r4, pc}
   11a9c:	andeq	sp, r3, r4, lsr #4
   11aa0:	ldr	r0, [pc, #40]	; 11ad0 <__assert_fail@plt+0x130>
   11aa4:	ldr	r3, [r0]
   11aa8:	cmp	r3, #0
   11aac:	bne	11ab4 <__assert_fail@plt+0x114>
   11ab0:	b	11a40 <__assert_fail@plt+0xa0>
   11ab4:	ldr	r3, [pc, #24]	; 11ad4 <__assert_fail@plt+0x134>
   11ab8:	cmp	r3, #0
   11abc:	beq	11ab0 <__assert_fail@plt+0x110>
   11ac0:	push	{r4, lr}
   11ac4:	blx	r3
   11ac8:	pop	{r4, lr}
   11acc:	b	11a40 <__assert_fail@plt+0xa0>
   11ad0:	andeq	ip, r3, r4, lsl pc
   11ad4:	andeq	r0, r0, r0
   11ad8:	push	{r4, r5, r6, lr}
   11adc:	ldr	r3, [pc, #72]	; 11b2c <__assert_fail@plt+0x18c>
   11ae0:	ldr	r4, [r3]
   11ae4:	cmp	r4, #0
   11ae8:	beq	11b24 <__assert_fail@plt+0x184>
   11aec:	mov	r5, r0
   11af0:	ldr	r3, [r4]
   11af4:	ldr	r1, [r4, #4]
   11af8:	mov	r0, r5
   11afc:	blx	r3
   11b00:	ldr	r4, [r4, #8]
   11b04:	ands	r3, r0, #3
   11b08:	movne	r3, #1
   11b0c:	cmp	r4, #0
   11b10:	moveq	r3, #0
   11b14:	andne	r3, r3, #1
   11b18:	cmp	r3, #0
   11b1c:	bne	11af0 <__assert_fail@plt+0x150>
   11b20:	pop	{r4, r5, r6, pc}
   11b24:	mov	r0, #3
   11b28:	pop	{r4, r5, r6, pc}
   11b2c:	andeq	sp, r3, r8, lsr #4
   11b30:	push	{r4, r5, r6, lr}
   11b34:	ldr	r3, [pc, #160]	; 11bdc <__assert_fail@plt+0x23c>
   11b38:	ldr	r4, [r3]
   11b3c:	ldr	r6, [r3, #4]
   11b40:	cmp	r4, r6
   11b44:	beq	11bc4 <__assert_fail@plt+0x224>
   11b48:	mov	r5, r0
   11b4c:	ldr	r3, [r4]
   11b50:	ldr	r1, [r4, #4]
   11b54:	mov	r0, r5
   11b58:	blx	r3
   11b5c:	ldr	r4, [r4, #8]
   11b60:	and	r3, r0, #5
   11b64:	cmp	r6, r4
   11b68:	cmpne	r3, #0
   11b6c:	bne	11b4c <__assert_fail@plt+0x1ac>
   11b70:	cmp	r0, #1
   11b74:	beq	11bcc <__assert_fail@plt+0x22c>
   11b78:	tst	r0, #12
   11b7c:	popne	{r4, r5, r6, pc}
   11b80:	ldr	r3, [pc, #84]	; 11bdc <__assert_fail@plt+0x23c>
   11b84:	ldr	r4, [r3, #4]
   11b88:	cmp	r4, #0
   11b8c:	beq	11bd4 <__assert_fail@plt+0x234>
   11b90:	ldr	r3, [r4]
   11b94:	ldr	r1, [r4, #4]
   11b98:	mov	r0, r5
   11b9c:	blx	r3
   11ba0:	ldr	r4, [r4, #8]
   11ba4:	cmp	r4, #0
   11ba8:	moveq	r3, #0
   11bac:	andne	r3, r0, #1
   11bb0:	cmp	r3, #0
   11bb4:	bne	11b90 <__assert_fail@plt+0x1f0>
   11bb8:	cmp	r0, #1
   11bbc:	moveq	r0, #2
   11bc0:	pop	{r4, r5, r6, pc}
   11bc4:	mov	r0, #5
   11bc8:	pop	{r4, r5, r6, pc}
   11bcc:	mov	r0, #4
   11bd0:	pop	{r4, r5, r6, pc}
   11bd4:	mov	r0, #2
   11bd8:	pop	{r4, r5, r6, pc}
   11bdc:	andeq	sp, r3, r8, lsr #4
   11be0:	push	{r4, r5, r6, lr}
   11be4:	mov	r5, r0
   11be8:	ldr	r3, [pc, #160]	; 11c90 <__assert_fail@plt+0x2f0>
   11bec:	ldr	r4, [r3]
   11bf0:	ldr	r6, [r3, #4]
   11bf4:	cmp	r4, r6
   11bf8:	beq	11c3c <__assert_fail@plt+0x29c>
   11bfc:	ldr	r3, [r4]
   11c00:	ldr	r1, [r4, #4]
   11c04:	mov	r0, r5
   11c08:	blx	r3
   11c0c:	ldr	r4, [r4, #8]
   11c10:	ands	r3, r0, #3
   11c14:	movne	r3, #1
   11c18:	cmp	r6, r4
   11c1c:	moveq	r3, #0
   11c20:	andne	r3, r3, #1
   11c24:	cmp	r3, #0
   11c28:	bne	11bfc <__assert_fail@plt+0x25c>
   11c2c:	cmp	r0, #1
   11c30:	beq	11c80 <__assert_fail@plt+0x2e0>
   11c34:	tst	r0, #12
   11c38:	popne	{r4, r5, r6, pc}
   11c3c:	ldr	r3, [pc, #76]	; 11c90 <__assert_fail@plt+0x2f0>
   11c40:	ldr	r4, [r3, #4]
   11c44:	cmp	r4, #0
   11c48:	beq	11c88 <__assert_fail@plt+0x2e8>
   11c4c:	ldr	r3, [r4]
   11c50:	ldr	r1, [r4, #4]
   11c54:	mov	r0, r5
   11c58:	blx	r3
   11c5c:	ldr	r4, [r4, #8]
   11c60:	cmp	r4, #0
   11c64:	moveq	r3, #0
   11c68:	andne	r3, r0, #1
   11c6c:	cmp	r3, #0
   11c70:	bne	11c4c <__assert_fail@plt+0x2ac>
   11c74:	cmp	r0, #1
   11c78:	moveq	r0, #2
   11c7c:	pop	{r4, r5, r6, pc}
   11c80:	mov	r0, #4
   11c84:	pop	{r4, r5, r6, pc}
   11c88:	mov	r0, #2
   11c8c:	pop	{r4, r5, r6, pc}
   11c90:	andeq	sp, r3, r8, lsr #4
   11c94:	ldrd	r2, [r1, #8]
   11c98:	adds	r2, r2, #1
   11c9c:	adc	r3, r3, #0
   11ca0:	strd	r2, [r1, #8]
   11ca4:	ldrd	r0, [r1]
   11ca8:	cmp	r3, r1
   11cac:	cmpeq	r2, r0
   11cb0:	movcs	r0, #8
   11cb4:	movcc	r0, #1
   11cb8:	bx	lr
   11cbc:	ldrd	r2, [r1, #8]
   11cc0:	adds	r2, r2, #1
   11cc4:	adc	r3, r3, #0
   11cc8:	strd	r2, [r1, #8]
   11ccc:	mov	r0, #1
   11cd0:	bx	lr
   11cd4:	push	{r4, lr}
   11cd8:	mov	r1, #131072	; 0x20000
   11cdc:	bl	149c8 <__assert_fail@plt+0x3028>
   11ce0:	subs	r4, r0, #0
   11ce4:	blt	11d00 <__assert_fail@plt+0x360>
   11ce8:	mov	r2, #1
   11cec:	mov	r1, #2
   11cf0:	mov	r0, r4
   11cf4:	bl	1b598 <__assert_fail@plt+0x9bf8>
   11cf8:	cmp	r0, #0
   11cfc:	bne	11d08 <__assert_fail@plt+0x368>
   11d00:	mov	r0, r4
   11d04:	pop	{r4, pc}
   11d08:	mov	r0, r4
   11d0c:	bl	1197c <close@plt>
   11d10:	mvn	r4, #0
   11d14:	b	11d00 <__assert_fail@plt+0x360>
   11d18:	push	{r4, lr}
   11d1c:	ldr	r3, [pc, #8]	; 11d2c <__assert_fail@plt+0x38c>
   11d20:	ldr	r0, [r3, #8]
   11d24:	bl	1b854 <__assert_fail@plt+0x9eb4>
   11d28:	pop	{r4, pc}
   11d2c:	andeq	sp, r3, r8, lsr #4
   11d30:	push	{r4, lr}
   11d34:	subs	r4, r0, #0
   11d38:	beq	11d70 <__assert_fail@plt+0x3d0>
   11d3c:	ldr	r3, [pc, #108]	; 11db0 <__assert_fail@plt+0x410>
   11d40:	ldr	r5, [r3]
   11d44:	mov	r2, #5
   11d48:	ldr	r1, [pc, #100]	; 11db4 <__assert_fail@plt+0x414>
   11d4c:	mov	r0, #0
   11d50:	bl	11628 <dcgettext@plt>
   11d54:	ldr	r3, [pc, #92]	; 11db8 <__assert_fail@plt+0x418>
   11d58:	ldr	r2, [r3]
   11d5c:	mov	r1, r0
   11d60:	mov	r0, r5
   11d64:	bl	117c0 <fprintf@plt>
   11d68:	mov	r0, r4
   11d6c:	bl	11784 <exit@plt>
   11d70:	ldr	r4, [pc, #68]	; 11dbc <__assert_fail@plt+0x41c>
   11d74:	ldr	r6, [r4]
   11d78:	mov	r2, #5
   11d7c:	ldr	r1, [pc, #60]	; 11dc0 <__assert_fail@plt+0x420>
   11d80:	mov	r0, #0
   11d84:	bl	11628 <dcgettext@plt>
   11d88:	ldr	r5, [pc, #40]	; 11db8 <__assert_fail@plt+0x418>
   11d8c:	ldr	r2, [r5]
   11d90:	mov	r1, r0
   11d94:	mov	r0, r6
   11d98:	bl	117c0 <fprintf@plt>
   11d9c:	ldr	r1, [r5]
   11da0:	ldr	r0, [r4]
   11da4:	bl	1478c <__assert_fail@plt+0x2dec>
   11da8:	mov	r0, #0
   11dac:	bl	11784 <exit@plt>
   11db0:	andeq	sp, r3, r8, lsl r2
   11db4:	andeq	fp, r2, r0, asr #11
   11db8:	andeq	sp, r3, r0, lsr #5
   11dbc:	andeq	sp, r3, ip, lsl r2
   11dc0:	andeq	fp, r2, r8, ror #11
   11dc4:	push	{r4, r5, r6, lr}
   11dc8:	mov	r5, r0
   11dcc:	mov	r4, r1
   11dd0:	mov	r0, #12
   11dd4:	bl	1a8f0 <__assert_fail@plt+0x8f50>
   11dd8:	str	r5, [r0]
   11ddc:	str	r4, [r0, #4]
   11de0:	mov	r3, #0
   11de4:	str	r3, [r0, #8]
   11de8:	ldr	r3, [pc, #28]	; 11e0c <__assert_fail@plt+0x46c>
   11dec:	ldr	r3, [r3, #12]
   11df0:	cmp	r3, #0
   11df4:	ldreq	r3, [pc, #16]	; 11e0c <__assert_fail@plt+0x46c>
   11df8:	streq	r0, [r3]
   11dfc:	strne	r0, [r3, #8]
   11e00:	ldrne	r3, [pc, #4]	; 11e0c <__assert_fail@plt+0x46c>
   11e04:	str	r0, [r3, #12]
   11e08:	pop	{r4, r5, r6, pc}
   11e0c:	andeq	sp, r3, r8, lsr #4
   11e10:	push	{r4, lr}
   11e14:	ldr	r4, [pc, #32]	; 11e3c <__assert_fail@plt+0x49c>
   11e18:	ldr	r1, [r4]
   11e1c:	ldr	r0, [r0, #12]
   11e20:	bl	1194c <fputs@plt>
   11e24:	ldr	r1, [r4]
   11e28:	ldr	r3, [pc, #16]	; 11e40 <__assert_fail@plt+0x4a0>
   11e2c:	ldr	r0, [r3]
   11e30:	bl	118f8 <putc@plt>
   11e34:	mov	r0, #1
   11e38:	pop	{r4, pc}
   11e3c:	andeq	sp, r3, ip, lsl r2
   11e40:	andeq	sp, r3, ip, lsr #3
   11e44:	push	{r4, lr}
   11e48:	sub	sp, sp, #8
   11e4c:	ldr	r3, [pc, #56]	; 11e8c <__assert_fail@plt+0x4ec>
   11e50:	ldrb	r2, [r3, #16]
   11e54:	ldr	r1, [r3, #8]
   11e58:	ldr	r4, [pc, #48]	; 11e90 <__assert_fail@plt+0x4f0>
   11e5c:	ldr	r3, [r0, #12]
   11e60:	str	r3, [sp]
   11e64:	ldr	r3, [pc, #40]	; 11e94 <__assert_fail@plt+0x4f4>
   11e68:	ldr	r0, [r4]
   11e6c:	bl	1424c <__assert_fail@plt+0x28ac>
   11e70:	ldr	r1, [r4]
   11e74:	ldr	r3, [pc, #28]	; 11e98 <__assert_fail@plt+0x4f8>
   11e78:	ldr	r0, [r3]
   11e7c:	bl	118f8 <putc@plt>
   11e80:	mov	r0, #1
   11e84:	add	sp, sp, #8
   11e88:	pop	{r4, pc}
   11e8c:	andeq	sp, r3, r8, lsr #4
   11e90:	andeq	sp, r3, ip, lsl r2
   11e94:	andeq	ip, r2, r8, lsr #9
   11e98:	andeq	sp, r3, ip, lsr #3
   11e9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11ea0:	mov	r4, r0
   11ea4:	mov	r8, r1
   11ea8:	ldr	r0, [r0, #12]
   11eac:	bl	117a8 <strlen@plt>
   11eb0:	ldrd	r2, [r8, #8]
   11eb4:	adds	r2, r2, #1
   11eb8:	adc	r3, r3, #0
   11ebc:	strd	r2, [r8, #8]
   11ec0:	ldrd	r2, [r8, #16]
   11ec4:	adds	r6, r2, r0
   11ec8:	adc	r7, r3, #0
   11ecc:	mov	r0, r6
   11ed0:	mov	r1, r7
   11ed4:	strd	r0, [r8, #16]
   11ed8:	ldr	r5, [r4, #12]
   11edc:	ldrb	r4, [r5]
   11ee0:	cmp	r4, #0
   11ee4:	beq	11f94 <__assert_fail@plt+0x5f4>
   11ee8:	mov	r9, #0
   11eec:	mov	r7, r9
   11ef0:	mov	r6, r9
   11ef4:	mov	sl, #1
   11ef8:	b	11f10 <__assert_fail@plt+0x570>
   11efc:	mov	r9, sl
   11f00:	mov	r7, sl
   11f04:	ldrb	r4, [r5, #1]!
   11f08:	cmp	r4, #0
   11f0c:	beq	11f44 <__assert_fail@plt+0x5a4>
   11f10:	sxtb	r3, r4
   11f14:	cmp	r3, #0
   11f18:	movlt	r6, #1
   11f1c:	cmp	r4, #10
   11f20:	beq	11efc <__assert_fail@plt+0x55c>
   11f24:	bl	11778 <__ctype_b_loc@plt>
   11f28:	ldr	r3, [r0]
   11f2c:	lsl	r4, r4, #1
   11f30:	ldrh	r3, [r3, r4]
   11f34:	and	r3, r3, #8192	; 0x2000
   11f38:	cmp	r3, #0
   11f3c:	movne	r7, #1
   11f40:	b	11f04 <__assert_fail@plt+0x564>
   11f44:	cmp	r6, #0
   11f48:	beq	11f5c <__assert_fail@plt+0x5bc>
   11f4c:	ldrd	r2, [r8, #40]	; 0x28
   11f50:	adds	r2, r2, #1
   11f54:	adc	r3, r3, #0
   11f58:	strd	r2, [r8, #40]	; 0x28
   11f5c:	cmp	r7, #0
   11f60:	beq	11f74 <__assert_fail@plt+0x5d4>
   11f64:	ldrd	r2, [r8, #24]
   11f68:	adds	r2, r2, #1
   11f6c:	adc	r3, r3, #0
   11f70:	strd	r2, [r8, #24]
   11f74:	cmp	r9, #0
   11f78:	beq	11f8c <__assert_fail@plt+0x5ec>
   11f7c:	ldrd	r2, [r8, #32]
   11f80:	adds	r2, r2, #1
   11f84:	adc	r3, r3, #0
   11f88:	strd	r2, [r8, #32]
   11f8c:	mov	r0, #1
   11f90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f94:	mov	r9, #0
   11f98:	b	11f74 <__assert_fail@plt+0x5d4>
   11f9c:	push	{lr}		; (str lr, [sp, #-4]!)
   11fa0:	sub	sp, sp, #108	; 0x6c
   11fa4:	mov	r2, sp
   11fa8:	ldr	r1, [r0, #12]
   11fac:	mov	r0, #3
   11fb0:	bl	11988 <__lxstat64@plt>
   11fb4:	cmp	r0, #0
   11fb8:	movne	r0, #4
   11fbc:	moveq	r0, #1
   11fc0:	add	sp, sp, #108	; 0x6c
   11fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   11fc8:	push	{lr}		; (str lr, [sp, #-4]!)
   11fcc:	sub	sp, sp, #108	; 0x6c
   11fd0:	mov	r2, sp
   11fd4:	ldr	r1, [r0, #12]
   11fd8:	mov	r0, #3
   11fdc:	bl	11988 <__lxstat64@plt>
   11fe0:	cmp	r0, #0
   11fe4:	moveq	r0, #4
   11fe8:	movne	r0, #1
   11fec:	add	sp, sp, #108	; 0x6c
   11ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ff4:	push	{lr}		; (str lr, [sp, #-4]!)
   11ff8:	sub	sp, sp, #108	; 0x6c
   11ffc:	mov	r2, sp
   12000:	ldr	r1, [r0, #12]
   12004:	mov	r0, #3
   12008:	bl	11928 <__xstat64@plt>
   1200c:	cmp	r0, #0
   12010:	movne	r0, #4
   12014:	moveq	r0, #1
   12018:	add	sp, sp, #108	; 0x6c
   1201c:	pop	{pc}		; (ldr pc, [sp], #4)
   12020:	push	{lr}		; (str lr, [sp, #-4]!)
   12024:	sub	sp, sp, #108	; 0x6c
   12028:	mov	r2, sp
   1202c:	ldr	r1, [r0, #12]
   12030:	mov	r0, #3
   12034:	bl	11928 <__xstat64@plt>
   12038:	cmp	r0, #0
   1203c:	moveq	r0, #4
   12040:	movne	r0, #1
   12044:	add	sp, sp, #108	; 0x6c
   12048:	pop	{pc}		; (ldr pc, [sp], #4)
   1204c:	push	{r4, lr}
   12050:	ldr	r0, [r0, #20]
   12054:	bl	17ac4 <__assert_fail@plt+0x6124>
   12058:	cmp	r0, #0
   1205c:	movne	r0, #2
   12060:	moveq	r0, #4
   12064:	pop	{r4, pc}
   12068:	push	{r4, lr}
   1206c:	ldr	r0, [r0, #20]
   12070:	bl	1600c <__assert_fail@plt+0x466c>
   12074:	cmp	r0, #0
   12078:	movne	r0, #2
   1207c:	moveq	r0, #4
   12080:	pop	{r4, pc}
   12084:	push	{r4, r5, r6, lr}
   12088:	mov	r4, r0
   1208c:	mov	r5, r1
   12090:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   12094:	cmp	r0, #1
   12098:	bne	120b8 <__assert_fail@plt+0x718>
   1209c:	mov	r1, r5
   120a0:	ldr	r0, [r4, #20]
   120a4:	bl	29f08 <__assert_fail@plt+0x18568>
   120a8:	cmp	r0, #0
   120ac:	movne	r0, #2
   120b0:	moveq	r0, #4
   120b4:	pop	{r4, r5, r6, pc}
   120b8:	ldr	r3, [pc, #12]	; 120cc <__assert_fail@plt+0x72c>
   120bc:	ldr	r2, [pc, #12]	; 120d0 <__assert_fail@plt+0x730>
   120c0:	ldr	r1, [pc, #12]	; 120d4 <__assert_fail@plt+0x734>
   120c4:	ldr	r0, [pc, #12]	; 120d8 <__assert_fail@plt+0x738>
   120c8:	bl	119a0 <__assert_fail@plt>
   120cc:	andeq	fp, r2, r0, ror r3
   120d0:			; <UNDEFINED> instruction: 0x000002b2
   120d4:	andeq	fp, r2, r8, lsl #15
   120d8:	muleq	r2, r4, r7
   120dc:	push	{r4, r5, r6, lr}
   120e0:	mov	r4, r0
   120e4:	mov	r5, r1
   120e8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   120ec:	cmp	r0, #1
   120f0:	bne	12110 <__assert_fail@plt+0x770>
   120f4:	mov	r1, r5
   120f8:	ldr	r0, [r4, #20]
   120fc:	bl	29550 <__assert_fail@plt+0x17bb0>
   12100:	cmp	r0, #0
   12104:	movne	r0, #2
   12108:	moveq	r0, #4
   1210c:	pop	{r4, r5, r6, pc}
   12110:	ldr	r3, [pc, #12]	; 12124 <__assert_fail@plt+0x784>
   12114:	ldr	r2, [pc, #12]	; 12128 <__assert_fail@plt+0x788>
   12118:	ldr	r1, [pc, #12]	; 1212c <__assert_fail@plt+0x78c>
   1211c:	ldr	r0, [pc, #12]	; 12130 <__assert_fail@plt+0x790>
   12120:	bl	119a0 <__assert_fail@plt>
   12124:	muleq	r2, r8, r3
   12128:	andeq	r0, r0, sl, asr #5
   1212c:	andeq	fp, r2, r8, lsl #15
   12130:	muleq	r2, r4, r7
   12134:	push	{r4, lr}
   12138:	mov	r3, r1
   1213c:	mov	r2, #0
   12140:	ldr	r1, [r0, #20]
   12144:	mov	r0, r3
   12148:	bl	116dc <fnmatch@plt>
   1214c:	cmp	r0, #0
   12150:	movne	r0, #4
   12154:	moveq	r0, #2
   12158:	pop	{r4, pc}
   1215c:	push	{r4, lr}
   12160:	mov	r3, r1
   12164:	mov	r2, #16
   12168:	ldr	r1, [r0, #20]
   1216c:	mov	r0, r3
   12170:	bl	116dc <fnmatch@plt>
   12174:	cmp	r0, #0
   12178:	movne	r0, #4
   1217c:	moveq	r0, #2
   12180:	pop	{r4, pc}
   12184:	push	{r4, r5, lr}
   12188:	sub	sp, sp, #12
   1218c:	mov	r5, r1
   12190:	ldr	r4, [r0, #20]
   12194:	mov	r0, r4
   12198:	bl	117a8 <strlen@plt>
   1219c:	mov	r2, r0
   121a0:	mov	r3, #0
   121a4:	str	r3, [sp, #4]
   121a8:	str	r0, [sp]
   121ac:	mov	r1, r4
   121b0:	mov	r0, r5
   121b4:	bl	28cc8 <__assert_fail@plt+0x17328>
   121b8:	cmp	r0, #0
   121bc:	movlt	r0, #4
   121c0:	movge	r0, #2
   121c4:	add	sp, sp, #12
   121c8:	pop	{r4, r5, pc}
   121cc:	push	{r4, lr}
   121d0:	mov	r4, r0
   121d4:	ldr	r0, [r0, #12]
   121d8:	bl	147f4 <__assert_fail@plt+0x2e54>
   121dc:	str	r0, [r4, #20]
   121e0:	mov	r0, #1
   121e4:	pop	{r4, pc}
   121e8:	push	{r4, r5, r6, r7, lr}
   121ec:	sub	sp, sp, #12
   121f0:	mov	r4, r0
   121f4:	ldr	r3, [r0]
   121f8:	cmp	r3, #128	; 0x80
   121fc:	beq	122c0 <__assert_fail@plt+0x920>
   12200:	cmp	r3, #127	; 0x7f
   12204:	subgt	r3, r3, #256	; 0x100
   12208:	ldr	r2, [r0, #4]
   1220c:	add	r3, r2, r3
   12210:	str	r3, [r0, #4]
   12214:	ldr	r6, [r4, #4]
   12218:	ldr	r3, [r4, #8]
   1221c:	cmp	r6, r3
   12220:	movle	r3, #0
   12224:	movgt	r3, #1
   12228:	orrs	r3, r3, r6, lsr #31
   1222c:	bne	122f4 <__assert_fail@plt+0x954>
   12230:	mov	r2, #0
   12234:	str	r2, [sp]
   12238:	add	r1, sp, #8
   1223c:	str	r2, [r1, #-4]!
   12240:	ldr	r3, [r4, #24]
   12244:	mov	r0, sp
   12248:	bl	1191c <getdelim@plt>
   1224c:	subs	r5, r0, #0
   12250:	blt	12418 <__assert_fail@plt+0xa78>
   12254:	ldr	r3, [sp]
   12258:	cmp	r3, #0
   1225c:	beq	1232c <__assert_fail@plt+0x98c>
   12260:	add	r7, r6, r5
   12264:	add	r7, r7, #1
   12268:	ldr	r3, [r4, #16]
   1226c:	cmp	r7, r3
   12270:	bls	12290 <__assert_fail@plt+0x8f0>
   12274:	mov	r1, r7
   12278:	ldr	r0, [r4, #12]
   1227c:	bl	1b9dc <__assert_fail@plt+0xa03c>
   12280:	cmp	r0, #0
   12284:	beq	12418 <__assert_fail@plt+0xa78>
   12288:	str	r7, [r4, #16]
   1228c:	str	r0, [r4, #12]
   12290:	ldr	r0, [r4, #12]
   12294:	add	r2, r5, #1
   12298:	ldr	r1, [sp]
   1229c:	add	r0, r0, r6
   122a0:	bl	115d4 <memcpy@plt>
   122a4:	ldr	r0, [sp]
   122a8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   122ac:	cmp	r5, #0
   122b0:	movle	r0, #8
   122b4:	bgt	12340 <__assert_fail@plt+0x9a0>
   122b8:	add	sp, sp, #12
   122bc:	pop	{r4, r5, r6, r7, pc}
   122c0:	ldr	r6, [r0, #24]
   122c4:	mov	r0, r6
   122c8:	bl	11838 <fgetc@plt>
   122cc:	sxtb	r0, r0
   122d0:	lsl	r5, r0, #8
   122d4:	mov	r0, r6
   122d8:	bl	11838 <fgetc@plt>
   122dc:	uxtb	r0, r0
   122e0:	orr	r5, r5, r0
   122e4:	ldr	r0, [r4, #4]
   122e8:	add	r5, r0, r5
   122ec:	str	r5, [r4, #4]
   122f0:	b	12214 <__assert_fail@plt+0x874>
   122f4:	mov	r2, #5
   122f8:	ldr	r1, [pc, #288]	; 12420 <__assert_fail@plt+0xa80>
   122fc:	mov	r0, #0
   12300:	bl	11628 <dcgettext@plt>
   12304:	mov	r5, r0
   12308:	ldr	r2, [r4, #28]
   1230c:	mov	r1, #8
   12310:	mov	r0, #0
   12314:	bl	1a0cc <__assert_fail@plt+0x872c>
   12318:	mov	r3, r0
   1231c:	mov	r2, r5
   12320:	mov	r1, #0
   12324:	mov	r0, #1
   12328:	bl	116d0 <error@plt>
   1232c:	ldr	r3, [pc, #240]	; 12424 <__assert_fail@plt+0xa84>
   12330:	mov	r2, #245	; 0xf5
   12334:	ldr	r1, [pc, #236]	; 12428 <__assert_fail@plt+0xa88>
   12338:	ldr	r0, [pc, #236]	; 1242c <__assert_fail@plt+0xa8c>
   1233c:	bl	119a0 <__assert_fail@plt>
   12340:	ldr	r0, [r4, #24]
   12344:	bl	11970 <getc@plt>
   12348:	str	r0, [r4]
   1234c:	ldr	r3, [r4, #4]
   12350:	add	r5, r5, r3
   12354:	sub	r5, r5, #1
   12358:	str	r5, [r4, #8]
   1235c:	cmp	r5, #0
   12360:	ble	123b4 <__assert_fail@plt+0xa14>
   12364:	ldr	r2, [r4, #12]
   12368:	ldr	r3, [r4, #8]
   1236c:	sub	r3, r3, #1
   12370:	add	r1, r2, r3
   12374:	ldrb	r3, [r2, r3]
   12378:	cmp	r3, #0
   1237c:	beq	123f0 <__assert_fail@plt+0xa50>
   12380:	ldrb	r3, [r1, #1]
   12384:	cmp	r3, #0
   12388:	bne	12404 <__assert_fail@plt+0xa64>
   1238c:	ldrb	r3, [r1, #2]
   12390:	cmp	r3, #0
   12394:	streq	r2, [r4, #20]
   12398:	moveq	r0, #1
   1239c:	beq	122b8 <__assert_fail@plt+0x918>
   123a0:	ldr	r3, [pc, #136]	; 12430 <__assert_fail@plt+0xa90>
   123a4:	ldr	r2, [pc, #136]	; 12434 <__assert_fail@plt+0xa94>
   123a8:	ldr	r1, [pc, #120]	; 12428 <__assert_fail@plt+0xa88>
   123ac:	ldr	r0, [pc, #132]	; 12438 <__assert_fail@plt+0xa98>
   123b0:	bl	119a0 <__assert_fail@plt>
   123b4:	mov	r2, #5
   123b8:	ldr	r1, [pc, #96]	; 12420 <__assert_fail@plt+0xa80>
   123bc:	mov	r0, #0
   123c0:	bl	11628 <dcgettext@plt>
   123c4:	mov	r5, r0
   123c8:	ldr	r2, [r4, #28]
   123cc:	mov	r1, #8
   123d0:	mov	r0, #0
   123d4:	bl	1a0cc <__assert_fail@plt+0x872c>
   123d8:	mov	r3, r0
   123dc:	mov	r2, r5
   123e0:	mov	r1, #0
   123e4:	mov	r0, #1
   123e8:	bl	116d0 <error@plt>
   123ec:	b	12364 <__assert_fail@plt+0x9c4>
   123f0:	ldr	r3, [pc, #56]	; 12430 <__assert_fail@plt+0xa90>
   123f4:	mov	r2, #568	; 0x238
   123f8:	ldr	r1, [pc, #40]	; 12428 <__assert_fail@plt+0xa88>
   123fc:	ldr	r0, [pc, #56]	; 1243c <__assert_fail@plt+0xa9c>
   12400:	bl	119a0 <__assert_fail@plt>
   12404:	ldr	r3, [pc, #36]	; 12430 <__assert_fail@plt+0xa90>
   12408:	ldr	r2, [pc, #48]	; 12440 <__assert_fail@plt+0xaa0>
   1240c:	ldr	r1, [pc, #20]	; 12428 <__assert_fail@plt+0xa88>
   12410:	ldr	r0, [pc, #44]	; 12444 <__assert_fail@plt+0xaa4>
   12414:	bl	119a0 <__assert_fail@plt>
   12418:	mov	r0, #8
   1241c:	b	122b8 <__assert_fail@plt+0x918>
   12420:	andeq	fp, r2, r4, lsr #15
   12424:	andeq	fp, r2, r0, asr #7
   12428:	andeq	fp, r2, r8, lsl #15
   1242c:	ldrdeq	fp, [r2], -r0
   12430:	ldrdeq	fp, [r2], -r0
   12434:	andeq	r0, r0, sl, lsr r2
   12438:	strdeq	fp, [r2], -ip
   1243c:	ldrdeq	fp, [r2], -ip
   12440:	andeq	r0, r0, r9, lsr r2
   12444:	andeq	fp, r2, ip, ror #15
   12448:	push	{r4, lr}
   1244c:	mov	r4, r0
   12450:	mvn	r3, r1
   12454:	cmp	r3, r2
   12458:	bcc	12488 <__assert_fail@plt+0xae8>
   1245c:	add	r2, r1, r2
   12460:	ldr	r3, [r0, #16]
   12464:	cmp	r3, r2
   12468:	popcs	{r4, pc}
   1246c:	mov	r1, r0
   12470:	str	r2, [r1, #16]!
   12474:	mov	r2, #1
   12478:	ldr	r0, [r0, #12]
   1247c:	bl	1aa18 <__assert_fail@plt+0x9078>
   12480:	str	r0, [r4, #12]
   12484:	pop	{r4, pc}
   12488:	mov	r2, #5
   1248c:	ldr	r1, [pc, #24]	; 124ac <__assert_fail@plt+0xb0c>
   12490:	mov	r0, #0
   12494:	bl	11628 <dcgettext@plt>
   12498:	ldr	r3, [r4, #28]
   1249c:	mov	r2, r0
   124a0:	mov	r1, #0
   124a4:	mov	r0, #1
   124a8:	bl	116d0 <error@plt>
   124ac:	andeq	fp, r2, ip, lsl #16
   124b0:	ldr	r3, [r0]
   124b4:	cmn	r3, #1
   124b8:	beq	12634 <__assert_fail@plt+0xc94>
   124bc:	push	{r4, r5, r6, r7, r8, lr}
   124c0:	mov	r4, r0
   124c4:	cmp	r3, #30
   124c8:	beq	124f4 <__assert_fail@plt+0xb54>
   124cc:	sub	r3, r3, #14
   124d0:	ldr	r2, [r0, #4]
   124d4:	add	r3, r3, r2
   124d8:	str	r3, [r0, #4]
   124dc:	cmp	r3, #0
   124e0:	blt	12568 <__assert_fail@plt+0xbc8>
   124e4:	ldr	r5, [r4, #4]
   124e8:	mov	r7, #2
   124ec:	mov	r6, #1
   124f0:	b	125c4 <__assert_fail@plt+0xc24>
   124f4:	ldr	r3, [r0, #4]
   124f8:	sub	r2, r3, #14
   124fc:	str	r2, [r0, #4]
   12500:	rsb	r5, r3, #14
   12504:	cmp	r2, #0
   12508:	ldrge	r3, [r0, #8]
   1250c:	subge	r2, r3, r2
   12510:	ldrlt	r2, [r0, #8]
   12514:	add	r3, r0, #32
   12518:	ldr	r1, [r0, #28]
   1251c:	ldr	r0, [r0, #24]
   12520:	bl	1405c <__assert_fail@plt+0x26bc>
   12524:	cmp	r5, r0
   12528:	bgt	12554 <__assert_fail@plt+0xbb4>
   1252c:	ldr	r3, [r4, #4]
   12530:	add	r0, r0, r3
   12534:	str	r0, [r4, #4]
   12538:	cmp	r0, #0
   1253c:	bge	124e4 <__assert_fail@plt+0xb44>
   12540:	ldr	r3, [pc, #244]	; 1263c <__assert_fail@plt+0xc9c>
   12544:	mov	r2, #480	; 0x1e0
   12548:	ldr	r1, [pc, #240]	; 12640 <__assert_fail@plt+0xca0>
   1254c:	ldr	r0, [pc, #240]	; 12644 <__assert_fail@plt+0xca4>
   12550:	bl	119a0 <__assert_fail@plt>
   12554:	ldr	r3, [pc, #224]	; 1263c <__assert_fail@plt+0xc9c>
   12558:	ldr	r2, [pc, #232]	; 12648 <__assert_fail@plt+0xca8>
   1255c:	ldr	r1, [pc, #220]	; 12640 <__assert_fail@plt+0xca0>
   12560:	ldr	r0, [pc, #228]	; 1264c <__assert_fail@plt+0xcac>
   12564:	bl	119a0 <__assert_fail@plt>
   12568:	ldr	r3, [pc, #204]	; 1263c <__assert_fail@plt+0xc9c>
   1256c:	ldr	r2, [pc, #220]	; 12650 <__assert_fail@plt+0xcb0>
   12570:	ldr	r1, [pc, #200]	; 12640 <__assert_fail@plt+0xca0>
   12574:	ldr	r0, [pc, #200]	; 12644 <__assert_fail@plt+0xca4>
   12578:	bl	119a0 <__assert_fail@plt>
   1257c:	mov	r2, r7
   12580:	mov	r1, r5
   12584:	mov	r0, r4
   12588:	bl	12448 <__assert_fail@plt+0xaa8>
   1258c:	ldr	r3, [r4]
   12590:	and	r3, r3, #127	; 0x7f
   12594:	mov	r2, r4
   12598:	str	r3, [r2], r3
   1259c:	add	r3, r5, #1
   125a0:	ldrb	r1, [r2, #36]	; 0x24
   125a4:	ldr	r2, [r4, #12]
   125a8:	strb	r1, [r2, r5]
   125ac:	ldr	r2, [r4]
   125b0:	add	r2, r4, r2
   125b4:	ldrb	r1, [r2, #164]	; 0xa4
   125b8:	ldr	r2, [r4, #12]
   125bc:	strb	r1, [r2, r3]
   125c0:	add	r5, r5, #2
   125c4:	ldr	r0, [r4, #24]
   125c8:	bl	11970 <getc@plt>
   125cc:	str	r0, [r4]
   125d0:	cmp	r0, #30
   125d4:	ble	12604 <__assert_fail@plt+0xc64>
   125d8:	cmp	r0, #127	; 0x7f
   125dc:	bgt	1257c <__assert_fail@plt+0xbdc>
   125e0:	mov	r2, r6
   125e4:	mov	r1, r5
   125e8:	mov	r0, r4
   125ec:	bl	12448 <__assert_fail@plt+0xaa8>
   125f0:	ldr	r3, [r4, #12]
   125f4:	ldr	r2, [r4]
   125f8:	strb	r2, [r3, r5]
   125fc:	add	r5, r5, #1
   12600:	b	125c4 <__assert_fail@plt+0xc24>
   12604:	mov	r2, #1
   12608:	mov	r1, r5
   1260c:	mov	r0, r4
   12610:	bl	12448 <__assert_fail@plt+0xaa8>
   12614:	ldr	r3, [r4, #12]
   12618:	mov	r2, #0
   1261c:	strb	r2, [r3, r5]
   12620:	str	r5, [r4, #8]
   12624:	ldr	r3, [r4, #12]
   12628:	str	r3, [r4, #20]
   1262c:	mov	r0, #1
   12630:	pop	{r4, r5, r6, r7, r8, pc}
   12634:	mov	r0, #8
   12638:	bx	lr
   1263c:	andeq	fp, r2, r8, ror #7
   12640:	andeq	fp, r2, r8, lsl #15
   12644:	andeq	fp, r2, r4, ror #16
   12648:	ldrdeq	r0, [r0], -lr
   1264c:	andeq	fp, r2, r4, asr r8
   12650:	andeq	r0, r0, r5, ror #3
   12654:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12658:	sub	sp, sp, #2944	; 0xb80
   1265c:	sub	sp, sp, #4
   12660:	mov	r8, r0
   12664:	mov	r7, r1
   12668:	mov	r6, r2
   1266c:	ldr	r2, [sp, #2984]	; 0xba8
   12670:	str	r2, [sp, #20]
   12674:	ldr	r2, [sp, #2988]	; 0xbac
   12678:	str	r2, [sp, #24]
   1267c:	ldr	r9, [sp, #3024]	; 0xbd0
   12680:	ldr	r2, [pc, #2584]	; 130a0 <__assert_fail@plt+0x1700>
   12684:	ldr	r2, [r2, #20]
   12688:	str	r2, [sp, #16]
   1268c:	ldr	r2, [sp, #2996]	; 0xbb4
   12690:	cmp	r2, #0
   12694:	ldrne	r2, [sp, #3028]	; 0xbd4
   12698:	orrne	r2, r2, #4194304	; 0x400000
   1269c:	strne	r2, [sp, #3028]	; 0xbd4
   126a0:	mov	r2, #0
   126a4:	str	r2, [sp, #2684]	; 0xa7c
   126a8:	str	r2, [sp, #2656]	; 0xa60
   126ac:	str	r2, [sp, #2660]	; 0xa64
   126b0:	str	r6, [sp, #2680]	; 0xa78
   126b4:	str	r3, [sp, #2676]	; 0xa74
   126b8:	ldr	r3, [pc, #2528]	; 130a0 <__assert_fail@plt+0x1700>
   126bc:	str	r2, [r3]
   126c0:	str	r2, [r3, #12]
   126c4:	str	r2, [r3, #4]
   126c8:	strb	r2, [r3, #24]
   126cc:	mov	r0, #128	; 0x80
   126d0:	str	r0, [sp, #2668]	; 0xa6c
   126d4:	bl	1a8f0 <__assert_fail@plt+0x8f50>
   126d8:	str	r0, [sp, #2664]	; 0xa68
   126dc:	ldr	r3, [sp, #2676]	; 0xa74
   126e0:	mov	r2, #2
   126e4:	mov	r1, #1
   126e8:	bl	116ac <fread@plt>
   126ec:	mov	r4, r0
   126f0:	cmp	r0, #2
   126f4:	bhi	127c0 <__assert_fail@plt+0xe20>
   126f8:	cmp	r0, #1
   126fc:	bls	12f9c <__assert_fail@plt+0x15fc>
   12700:	ldr	r5, [sp, #2664]	; 0xa68
   12704:	ldrb	r3, [r5, #1]
   12708:	cmp	r3, #0
   1270c:	bne	12f9c <__assert_fail@plt+0x15fc>
   12710:	bl	11778 <__ctype_b_loc@plt>
   12714:	ldrb	r3, [r5]
   12718:	ldr	r1, [r0]
   1271c:	lsl	r2, r3, #1
   12720:	ldrh	r2, [r1, r2]
   12724:	tst	r2, #2048	; 0x800
   12728:	beq	12f9c <__assert_fail@plt+0x15fc>
   1272c:	sub	r4, r3, #48	; 0x30
   12730:	cmp	r4, #1
   12734:	ble	13010 <__assert_fail@plt+0x1670>
   12738:	ldr	r7, [sp, #2680]	; 0xa78
   1273c:	mov	r2, #5
   12740:	ldr	r1, [pc, #2396]	; 130a4 <__assert_fail@plt+0x1704>
   12744:	mov	r0, #0
   12748:	bl	11628 <dcgettext@plt>
   1274c:	mov	r6, r0
   12750:	mov	r2, r7
   12754:	mov	r1, #8
   12758:	mov	r0, #0
   1275c:	bl	1a0cc <__assert_fail@plt+0x872c>
   12760:	ldrb	r3, [r5, #1]
   12764:	str	r3, [sp]
   12768:	mov	r3, r0
   1276c:	mov	r2, r6
   12770:	mov	r1, #0
   12774:	mov	r0, r1
   12778:	bl	116d0 <error@plt>
   1277c:	mov	r2, #5
   12780:	ldr	r1, [pc, #2336]	; 130a8 <__assert_fail@plt+0x1708>
   12784:	mov	r0, #0
   12788:	bl	11628 <dcgettext@plt>
   1278c:	mov	r5, r0
   12790:	ldr	r2, [sp, #2680]	; 0xa78
   12794:	mov	r1, #8
   12798:	mov	r0, #0
   1279c:	bl	1a0cc <__assert_fail@plt+0x872c>
   127a0:	str	r4, [sp]
   127a4:	mov	r3, r0
   127a8:	mov	r2, r5
   127ac:	mov	r1, #0
   127b0:	mov	r0, r1
   127b4:	bl	116d0 <error@plt>
   127b8:	mov	r0, #0
   127bc:	b	12b64 <__assert_fail@plt+0x11c4>
   127c0:	ldr	r3, [pc, #2276]	; 130ac <__assert_fail@plt+0x170c>
   127c4:	ldr	r2, [pc, #2276]	; 130b0 <__assert_fail@plt+0x1710>
   127c8:	ldr	r1, [pc, #2276]	; 130b4 <__assert_fail@plt+0x1714>
   127cc:	ldr	r0, [pc, #2276]	; 130b8 <__assert_fail@plt+0x1718>
   127d0:	bl	119a0 <__assert_fail@plt>
   127d4:	mov	r2, #5
   127d8:	ldr	r1, [pc, #2268]	; 130bc <__assert_fail@plt+0x171c>
   127dc:	mov	r0, #0
   127e0:	bl	11628 <dcgettext@plt>
   127e4:	mov	r2, r0
   127e8:	mov	r1, #0
   127ec:	mov	r0, r1
   127f0:	bl	116d0 <error@plt>
   127f4:	mov	r0, #0
   127f8:	b	12b64 <__assert_fail@plt+0x11c4>
   127fc:	mov	r2, #5
   12800:	ldr	r1, [pc, #2232]	; 130c0 <__assert_fail@plt+0x1720>
   12804:	mov	r0, #0
   12808:	bl	11628 <dcgettext@plt>
   1280c:	mov	r4, r0
   12810:	ldr	r2, [sp, #2680]	; 0xa78
   12814:	mov	r1, #8
   12818:	mov	r0, #0
   1281c:	bl	1a0cc <__assert_fail@plt+0x872c>
   12820:	mov	r3, r0
   12824:	mov	r2, r4
   12828:	mov	r1, #0
   1282c:	mov	r0, r1
   12830:	bl	116d0 <error@plt>
   12834:	mov	r3, #1
   12838:	str	r3, [sp, #16]
   1283c:	b	1304c <__assert_fail@plt+0x16ac>
   12840:	mov	r2, #0
   12844:	mov	r1, #256	; 0x100
   12848:	add	r0, sp, #2640	; 0xa50
   1284c:	add	r0, r0, #12
   12850:	bl	12448 <__assert_fail@plt+0xaa8>
   12854:	cmp	r4, #255	; 0xff
   12858:	ble	128b8 <__assert_fail@plt+0xf18>
   1285c:	add	r2, sp, #2672	; 0xa70
   12860:	add	r2, r2, #15
   12864:	ldr	r3, [sp, #2664]	; 0xa68
   12868:	add	r3, r3, #1
   1286c:	add	ip, sp, #2800	; 0xaf0
   12870:	add	ip, ip, #15
   12874:	mov	r1, ip
   12878:	ldrb	r0, [r3, #-1]
   1287c:	strb	r0, [r2, #1]!
   12880:	ldrb	r0, [r3], #2
   12884:	strb	r0, [r1, #1]!
   12888:	cmp	r2, ip
   1288c:	bne	12878 <__assert_fail@plt+0xed8>
   12890:	mov	r1, #0
   12894:	ldr	r0, [pc, #2088]	; 130c4 <__assert_fail@plt+0x1724>
   12898:	bl	11dc4 <__assert_fail@plt+0x424>
   1289c:	ldr	r3, [pc, #2084]	; 130c8 <__assert_fail@plt+0x1728>
   128a0:	str	r3, [sp, #36]	; 0x24
   128a4:	mov	r3, #0
   128a8:	str	r3, [sp, #28]
   128ac:	mov	r3, #1
   128b0:	str	r3, [sp, #32]
   128b4:	b	13070 <__assert_fail@plt+0x16d0>
   128b8:	ldr	r3, [sp, #2676]	; 0xa74
   128bc:	rsb	r2, r4, #256	; 0x100
   128c0:	mov	r1, #1
   128c4:	ldr	r0, [sp, #2664]	; 0xa68
   128c8:	add	r0, r0, r4
   128cc:	bl	116ac <fread@plt>
   128d0:	add	r4, r0, r4
   128d4:	cmp	r4, #256	; 0x100
   128d8:	beq	1285c <__assert_fail@plt+0xebc>
   128dc:	mov	r2, #5
   128e0:	ldr	r1, [pc, #2020]	; 130cc <__assert_fail@plt+0x172c>
   128e4:	mov	r0, #0
   128e8:	bl	11628 <dcgettext@plt>
   128ec:	mov	r4, r0
   128f0:	mov	r2, r6
   128f4:	mov	r1, #8
   128f8:	mov	r0, #0
   128fc:	bl	1a0cc <__assert_fail@plt+0x872c>
   12900:	mov	r3, r0
   12904:	mov	r2, r4
   12908:	mov	r1, #0
   1290c:	mov	r0, #1
   12910:	bl	116d0 <error@plt>
   12914:	mov	r1, #0
   12918:	ldr	r0, [pc, #1968]	; 130d0 <__assert_fail@plt+0x1730>
   1291c:	bl	11dc4 <__assert_fail@plt+0x424>
   12920:	b	1307c <__assert_fail@plt+0x16dc>
   12924:	mov	r0, #32
   12928:	bl	1a8f0 <__assert_fail@plt+0x8f50>
   1292c:	mov	r6, r0
   12930:	mov	r2, #32
   12934:	mov	r1, #0
   12938:	bl	11814 <memset@plt>
   1293c:	ldr	r0, [sp, #3028]	; 0xbd4
   12940:	bl	28420 <__assert_fail@plt+0x16a80>
   12944:	mov	r0, #100	; 0x64
   12948:	str	r0, [r6, #4]
   1294c:	bl	1a8f0 <__assert_fail@plt+0x8f50>
   12950:	str	r0, [r6]
   12954:	mov	r3, #0
   12958:	str	r3, [r6, #16]
   1295c:	ldr	r2, [sp, #3028]	; 0xbd4
   12960:	str	r2, [r6, #12]
   12964:	str	r3, [r6, #20]
   12968:	mov	r0, r5
   1296c:	bl	117a8 <strlen@plt>
   12970:	mov	r2, r6
   12974:	mov	r1, r0
   12978:	mov	r0, r5
   1297c:	bl	283a8 <__assert_fail@plt+0x16a08>
   12980:	cmp	r0, #0
   12984:	bne	129e0 <__assert_fail@plt+0x1040>
   12988:	mov	r1, r6
   1298c:	ldr	r0, [pc, #1856]	; 130d4 <__assert_fail@plt+0x1734>
   12990:	bl	11dc4 <__assert_fail@plt+0x424>
   12994:	add	r4, r4, #1
   12998:	cmp	r8, r4
   1299c:	beq	12a24 <__assert_fail@plt+0x1084>
   129a0:	strb	sl, [fp, #24]
   129a4:	ldr	r5, [r7, #4]!
   129a8:	cmp	r9, #0
   129ac:	bne	12924 <__assert_fail@plt+0xf84>
   129b0:	ldr	r1, [pc, #1824]	; 130d8 <__assert_fail@plt+0x1738>
   129b4:	mov	r0, r5
   129b8:	bl	11904 <strpbrk@plt>
   129bc:	cmp	r0, #0
   129c0:	beq	129f4 <__assert_fail@plt+0x1054>
   129c4:	ldr	r3, [sp, #2996]	; 0xbb4
   129c8:	cmp	r3, #0
   129cc:	mov	r1, r5
   129d0:	ldrne	r0, [pc, #1796]	; 130dc <__assert_fail@plt+0x173c>
   129d4:	ldreq	r0, [pc, #1796]	; 130e0 <__assert_fail@plt+0x1740>
   129d8:	bl	11dc4 <__assert_fail@plt+0x424>
   129dc:	b	12994 <__assert_fail@plt+0xff4>
   129e0:	mov	r3, r0
   129e4:	ldr	r2, [pc, #1784]	; 130e4 <__assert_fail@plt+0x1744>
   129e8:	mov	r1, #0
   129ec:	mov	r0, #1
   129f0:	bl	116d0 <error@plt>
   129f4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   129f8:	cmp	r0, #1
   129fc:	ldreq	r0, [pc, #1764]	; 130e8 <__assert_fail@plt+0x1748>
   12a00:	ldreq	r3, [pc, #1764]	; 130ec <__assert_fail@plt+0x174c>
   12a04:	ldrne	r0, [pc, #1764]	; 130f0 <__assert_fail@plt+0x1750>
   12a08:	ldrne	r3, [pc, #1764]	; 130f4 <__assert_fail@plt+0x1754>
   12a0c:	ldr	r2, [sp, #2996]	; 0xbb4
   12a10:	cmp	r2, #0
   12a14:	moveq	r0, r3
   12a18:	mov	r1, r5
   12a1c:	bl	11dc4 <__assert_fail@plt+0x424>
   12a20:	b	12994 <__assert_fail@plt+0xff4>
   12a24:	ldr	r3, [pc, #1652]	; 130a0 <__assert_fail@plt+0x1700>
   12a28:	ldr	r4, [r3, #12]
   12a2c:	ldr	r3, [sp, #16]
   12a30:	cmp	r3, #1
   12a34:	beq	12b70 <__assert_fail@plt+0x11d0>
   12a38:	cmp	r3, #2
   12a3c:	beq	12b9c <__assert_fail@plt+0x11fc>
   12a40:	ldr	r3, [sp, #3016]	; 0xbc8
   12a44:	cmp	r3, #0
   12a48:	bne	12bc8 <__assert_fail@plt+0x1228>
   12a4c:	ldr	r3, [sp, #3000]	; 0xbb8
   12a50:	cmp	r3, #0
   12a54:	beq	12a74 <__assert_fail@plt+0x10d4>
   12a58:	ldr	r3, [pc, #1600]	; 130a0 <__assert_fail@plt+0x1700>
   12a5c:	ldrb	r3, [r3, #80]	; 0x50
   12a60:	cmp	r3, #0
   12a64:	mov	r1, #0
   12a68:	ldrne	r0, [pc, #1672]	; 130f8 <__assert_fail@plt+0x1758>
   12a6c:	ldreq	r0, [pc, #1672]	; 130fc <__assert_fail@plt+0x175c>
   12a70:	bl	11dc4 <__assert_fail@plt+0x424>
   12a74:	ldr	r3, [sp, #3008]	; 0xbc0
   12a78:	cmp	r3, #0
   12a7c:	ldr	r1, [sp, #3012]	; 0xbc4
   12a80:	ldrne	r0, [pc, #1656]	; 13100 <__assert_fail@plt+0x1760>
   12a84:	ldreq	r0, [pc, #1656]	; 13104 <__assert_fail@plt+0x1764>
   12a88:	bl	11dc4 <__assert_fail@plt+0x424>
   12a8c:	cmp	r8, #1
   12a90:	ble	12bd8 <__assert_fail@plt+0x1238>
   12a94:	ldr	r2, [r4, #8]
   12a98:	ldr	r3, [pc, #1536]	; 130a0 <__assert_fail@plt+0x1700>
   12a9c:	str	r2, [r3, #4]
   12aa0:	ldr	r3, [sp, #3020]	; 0xbcc
   12aa4:	cmp	r3, #0
   12aa8:	ldrne	r2, [pc, #1624]	; 13108 <__assert_fail@plt+0x1768>
   12aac:	ldreq	r2, [pc, #1624]	; 1310c <__assert_fail@plt+0x176c>
   12ab0:	ldr	r3, [pc, #1512]	; 130a0 <__assert_fail@plt+0x1700>
   12ab4:	str	r2, [r3, #84]	; 0x54
   12ab8:	ldr	r3, [sp, #3016]	; 0xbc8
   12abc:	cmp	r3, #0
   12ac0:	bne	12be8 <__assert_fail@plt+0x1248>
   12ac4:	ldr	r0, [sp, #2676]	; 0xa74
   12ac8:	bl	11970 <getc@plt>
   12acc:	str	r0, [sp, #2652]	; 0xa5c
   12ad0:	ldr	r3, [sp, #28]
   12ad4:	cmp	r3, #0
   12ad8:	cmnne	r0, #1
   12adc:	beq	12af0 <__assert_fail@plt+0x1150>
   12ae0:	ldr	r1, [sp, #2676]	; 0xa74
   12ae4:	bl	117cc <ungetc@plt>
   12ae8:	mov	r3, #0
   12aec:	str	r3, [sp, #2652]	; 0xa5c
   12af0:	ldr	r4, [pc, #1448]	; 130a0 <__assert_fail@plt+0x1700>
   12af4:	ldr	r3, [sp, #2652]	; 0xa5c
   12af8:	cmn	r3, #1
   12afc:	beq	12b18 <__assert_fail@plt+0x1178>
   12b00:	add	r0, sp, #2640	; 0xa50
   12b04:	add	r0, r0, #12
   12b08:	ldr	r3, [r4, #84]	; 0x54
   12b0c:	blx	r3
   12b10:	cmp	r0, #8
   12b14:	bne	12af4 <__assert_fail@plt+0x1154>
   12b18:	ldr	r3, [sp, #3016]	; 0xbc8
   12b1c:	cmp	r3, #0
   12b20:	beq	12b4c <__assert_fail@plt+0x11ac>
   12b24:	ldr	r3, [sp, #32]
   12b28:	cmp	r3, #0
   12b2c:	bne	12c08 <__assert_fail@plt+0x1268>
   12b30:	ldr	r3, [sp, #20]
   12b34:	ldr	r2, [sp, #24]
   12b38:	orr	r3, r3, r2
   12b3c:	ldr	r2, [sp, #2992]	; 0xbb0
   12b40:	cmp	r3, #0
   12b44:	cmpeq	r2, #0
   12b48:	bne	12c90 <__assert_fail@plt+0x12f0>
   12b4c:	ldr	r0, [sp, #2676]	; 0xa74
   12b50:	bl	115b0 <ferror@plt>
   12b54:	cmp	r0, #0
   12b58:	bne	12f68 <__assert_fail@plt+0x15c8>
   12b5c:	ldr	r3, [sp, #3012]	; 0xbc4
   12b60:	ldr	r0, [r3, #8]
   12b64:	add	sp, sp, #2944	; 0xb80
   12b68:	add	sp, sp, #4
   12b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b70:	mov	r2, #1
   12b74:	ldr	r3, [pc, #1316]	; 130a0 <__assert_fail@plt+0x1700>
   12b78:	strb	r2, [r3, #24]
   12b7c:	ldr	r3, [pc, #1420]	; 13110 <__assert_fail@plt+0x1770>
   12b80:	ldr	r3, [r3, #4]
   12b84:	cmp	r3, #0
   12b88:	mov	r1, #0
   12b8c:	ldrne	r0, [pc, #1408]	; 13114 <__assert_fail@plt+0x1774>
   12b90:	ldreq	r0, [pc, #1408]	; 13118 <__assert_fail@plt+0x1778>
   12b94:	bl	11dc4 <__assert_fail@plt+0x424>
   12b98:	b	12a40 <__assert_fail@plt+0x10a0>
   12b9c:	mov	r2, #1
   12ba0:	ldr	r3, [pc, #1272]	; 130a0 <__assert_fail@plt+0x1700>
   12ba4:	strb	r2, [r3, #24]
   12ba8:	ldr	r3, [pc, #1376]	; 13110 <__assert_fail@plt+0x1770>
   12bac:	ldr	r3, [r3, #4]
   12bb0:	cmp	r3, #0
   12bb4:	mov	r1, #0
   12bb8:	ldrne	r0, [pc, #1372]	; 1311c <__assert_fail@plt+0x177c>
   12bbc:	ldreq	r0, [pc, #1372]	; 13120 <__assert_fail@plt+0x1780>
   12bc0:	bl	11dc4 <__assert_fail@plt+0x424>
   12bc4:	b	12a40 <__assert_fail@plt+0x10a0>
   12bc8:	ldr	r1, [pc, #1364]	; 13124 <__assert_fail@plt+0x1784>
   12bcc:	ldr	r0, [pc, #1364]	; 13128 <__assert_fail@plt+0x1788>
   12bd0:	bl	11dc4 <__assert_fail@plt+0x424>
   12bd4:	b	12a4c <__assert_fail@plt+0x10ac>
   12bd8:	ldr	r2, [pc, #1356]	; 1312c <__assert_fail@plt+0x178c>
   12bdc:	ldr	r3, [pc, #1212]	; 130a0 <__assert_fail@plt+0x1700>
   12be0:	str	r2, [r3, #84]	; 0x54
   12be4:	b	12ab8 <__assert_fail@plt+0x1118>
   12be8:	mov	r2, #5
   12bec:	ldr	r1, [pc, #1340]	; 13130 <__assert_fail@plt+0x1790>
   12bf0:	mov	r0, #0
   12bf4:	bl	11628 <dcgettext@plt>
   12bf8:	ldr	r2, [sp, #36]	; 0x24
   12bfc:	ldr	r1, [sp, #2680]	; 0xa78
   12c00:	bl	11550 <printf@plt>
   12c04:	b	12ac4 <__assert_fail@plt+0x1124>
   12c08:	mov	r4, #0
   12c0c:	mov	r6, #1
   12c10:	mov	r2, #5
   12c14:	ldr	r1, [pc, #1304]	; 13134 <__assert_fail@plt+0x1794>
   12c18:	mov	r0, r4
   12c1c:	bl	11628 <dcgettext@plt>
   12c20:	mov	r5, r0
   12c24:	mov	r2, #5
   12c28:	ldr	r1, [pc, #1288]	; 13138 <__assert_fail@plt+0x1798>
   12c2c:	mov	r0, r4
   12c30:	bl	11628 <dcgettext@plt>
   12c34:	ldr	r3, [sp, #2684]	; 0xa7c
   12c38:	cmp	r3, r6
   12c3c:	beq	12c60 <__assert_fail@plt+0x12c0>
   12c40:	cmp	r3, #2
   12c44:	beq	12c78 <__assert_fail@plt+0x12d8>
   12c48:	mov	r2, #5
   12c4c:	ldr	r1, [pc, #1256]	; 1313c <__assert_fail@plt+0x179c>
   12c50:	mov	r0, #0
   12c54:	bl	11628 <dcgettext@plt>
   12c58:	bl	11550 <printf@plt>
   12c5c:	b	12b30 <__assert_fail@plt+0x1190>
   12c60:	cmp	r6, r4
   12c64:	movne	r1, r5
   12c68:	moveq	r1, r0
   12c6c:	ldr	r0, [pc, #1136]	; 130e4 <__assert_fail@plt+0x1744>
   12c70:	bl	11550 <printf@plt>
   12c74:	b	12b30 <__assert_fail@plt+0x1190>
   12c78:	cmp	r6, #0
   12c7c:	movne	r1, r0
   12c80:	moveq	r1, r5
   12c84:	ldr	r0, [pc, #1112]	; 130e4 <__assert_fail@plt+0x1744>
   12c88:	bl	11550 <printf@plt>
   12c8c:	b	12b30 <__assert_fail@plt+0x1190>
   12c90:	cmp	r2, #0
   12c94:	beq	12d24 <__assert_fail@plt+0x1384>
   12c98:	mov	r0, r2
   12c9c:	bl	1173c <localtime@plt>
   12ca0:	subs	r4, r0, #0
   12ca4:	beq	12d24 <__assert_fail@plt+0x1384>
   12ca8:	mov	r3, r4
   12cac:	ldr	r2, [pc, #1164]	; 13140 <__assert_fail@plt+0x17a0>
   12cb0:	mov	r1, #20
   12cb4:	add	r0, sp, #2000	; 0x7d0
   12cb8:	bl	11724 <strftime@plt>
   12cbc:	cmp	r0, #19
   12cc0:	bne	12eb4 <__assert_fail@plt+0x1514>
   12cc4:	ldrb	r3, [sp, #2019]	; 0x7e3
   12cc8:	cmp	r3, #0
   12ccc:	bne	12ec8 <__assert_fail@plt+0x1528>
   12cd0:	ldrb	r3, [sp, #2018]	; 0x7e2
   12cd4:	cmp	r3, #0
   12cd8:	beq	12edc <__assert_fail@plt+0x153c>
   12cdc:	mov	r2, #5
   12ce0:	ldr	r1, [pc, #1116]	; 13144 <__assert_fail@plt+0x17a4>
   12ce4:	mov	r0, #0
   12ce8:	bl	11628 <dcgettext@plt>
   12cec:	ldr	r3, [sp, #2992]	; 0xbb0
   12cf0:	ldr	r2, [r3, #4]
   12cf4:	add	r1, sp, #2000	; 0x7d0
   12cf8:	bl	11550 <printf@plt>
   12cfc:	mov	r3, r4
   12d00:	ldr	r2, [pc, #1088]	; 13148 <__assert_fail@plt+0x17a8>
   12d04:	mov	r1, #20
   12d08:	add	r0, sp, #2000	; 0x7d0
   12d0c:	bl	11724 <strftime@plt>
   12d10:	cmp	r0, #5
   12d14:	bne	12ef0 <__assert_fail@plt+0x1550>
   12d18:	add	r1, sp, #2000	; 0x7d0
   12d1c:	ldr	r0, [pc, #1064]	; 1314c <__assert_fail@plt+0x17ac>
   12d20:	bl	11550 <printf@plt>
   12d24:	mov	r3, #5
   12d28:	str	r3, [sp]
   12d2c:	ldr	r5, [sp, #20]
   12d30:	mov	r3, r5
   12d34:	ldr	r2, [pc, #1044]	; 13150 <__assert_fail@plt+0x17b0>
   12d38:	ldr	r1, [pc, #1044]	; 13154 <__assert_fail@plt+0x17b4>
   12d3c:	mov	r0, #0
   12d40:	bl	11994 <dcngettext@plt>
   12d44:	mov	r4, r0
   12d48:	mov	r2, #1
   12d4c:	mov	r3, #0
   12d50:	strd	r2, [sp, #8]
   12d54:	strd	r2, [sp]
   12d58:	mov	r3, #0
   12d5c:	add	r2, sp, #44	; 0x2c
   12d60:	mov	r0, r5
   12d64:	mov	r1, #0
   12d68:	bl	14a98 <__assert_fail@plt+0x30f8>
   12d6c:	mov	r1, r0
   12d70:	mov	r0, r4
   12d74:	bl	11550 <printf@plt>
   12d78:	ldr	r3, [pc, #800]	; 130a0 <__assert_fail@plt+0x1700>
   12d7c:	ldrb	r3, [r3, #24]
   12d80:	cmp	r3, #0
   12d84:	mov	r2, #5
   12d88:	ldrne	r1, [pc, #968]	; 13158 <__assert_fail@plt+0x17b8>
   12d8c:	ldreq	r1, [pc, #968]	; 1315c <__assert_fail@plt+0x17bc>
   12d90:	mov	r0, #0
   12d94:	bl	11628 <dcgettext@plt>
   12d98:	mov	r7, r0
   12d9c:	add	r3, sp, #44	; 0x2c
   12da0:	str	r3, [sp, #16]
   12da4:	ldr	r6, [pc, #756]	; 130a0 <__assert_fail@plt+0x1700>
   12da8:	mov	r4, #1
   12dac:	mov	r5, #0
   12db0:	strd	r4, [sp, #8]
   12db4:	strd	r4, [sp]
   12db8:	mov	r3, #0
   12dbc:	ldr	r2, [sp, #16]
   12dc0:	ldrd	r0, [r6, #40]	; 0x28
   12dc4:	bl	14a98 <__assert_fail@plt+0x30f8>
   12dc8:	mov	r1, r0
   12dcc:	mov	r0, r7
   12dd0:	bl	11550 <printf@plt>
   12dd4:	mov	r2, #5
   12dd8:	ldr	r1, [pc, #896]	; 13160 <__assert_fail@plt+0x17c0>
   12ddc:	mov	r0, #0
   12de0:	bl	11628 <dcgettext@plt>
   12de4:	mov	r7, r0
   12de8:	strd	r4, [sp, #8]
   12dec:	strd	r4, [sp]
   12df0:	mov	r3, #0
   12df4:	ldr	r2, [sp, #16]
   12df8:	ldrd	r0, [r6, #48]	; 0x30
   12dfc:	bl	14a98 <__assert_fail@plt+0x30f8>
   12e00:	mov	r9, r0
   12e04:	strd	r4, [sp, #8]
   12e08:	strd	r4, [sp]
   12e0c:	mov	r3, #0
   12e10:	add	r2, sp, #696	; 0x2b8
   12e14:	ldrd	r0, [r6, #56]	; 0x38
   12e18:	bl	14a98 <__assert_fail@plt+0x30f8>
   12e1c:	mov	sl, r0
   12e20:	strd	r4, [sp, #8]
   12e24:	strd	r4, [sp]
   12e28:	mov	r3, #0
   12e2c:	add	r2, sp, #1360	; 0x550
   12e30:	sub	r2, r2, #12
   12e34:	ldrd	r0, [r6, #64]	; 0x40
   12e38:	bl	14a98 <__assert_fail@plt+0x30f8>
   12e3c:	mov	fp, r0
   12e40:	ldrd	r0, [r6, #72]	; 0x48
   12e44:	strd	r4, [sp, #8]
   12e48:	strd	r4, [sp]
   12e4c:	mov	r3, #0
   12e50:	add	r2, sp, #2000	; 0x7d0
   12e54:	bl	14a98 <__assert_fail@plt+0x30f8>
   12e58:	str	r0, [sp]
   12e5c:	mov	r3, fp
   12e60:	mov	r2, sl
   12e64:	mov	r1, r9
   12e68:	mov	r0, r7
   12e6c:	bl	11550 <printf@plt>
   12e70:	cmp	r8, #0
   12e74:	bne	12ea8 <__assert_fail@plt+0x1508>
   12e78:	ldrb	r3, [r6, #24]
   12e7c:	cmp	r3, #0
   12e80:	bne	12f04 <__assert_fail@plt+0x1564>
   12e84:	ldr	r3, [pc, #532]	; 130a0 <__assert_fail@plt+0x1700>
   12e88:	ldrd	r2, [r3, #48]	; 0x30
   12e8c:	orrs	r3, r2, r3
   12e90:	bne	12f1c <__assert_fail@plt+0x157c>
   12e94:	mov	r2, #5
   12e98:	ldr	r1, [pc, #708]	; 13164 <__assert_fail@plt+0x17c4>
   12e9c:	mov	r0, #0
   12ea0:	bl	11628 <dcgettext@plt>
   12ea4:	bl	11550 <printf@plt>
   12ea8:	mov	r0, #10
   12eac:	bl	11820 <putchar@plt>
   12eb0:	b	12b4c <__assert_fail@plt+0x11ac>
   12eb4:	ldr	r3, [pc, #684]	; 13168 <__assert_fail@plt+0x17c8>
   12eb8:	ldr	r2, [pc, #684]	; 1316c <__assert_fail@plt+0x17cc>
   12ebc:	ldr	r1, [pc, #496]	; 130b4 <__assert_fail@plt+0x1714>
   12ec0:	ldr	r0, [pc, #680]	; 13170 <__assert_fail@plt+0x17d0>
   12ec4:	bl	119a0 <__assert_fail@plt>
   12ec8:	ldr	r3, [pc, #664]	; 13168 <__assert_fail@plt+0x17c8>
   12ecc:	ldr	r2, [pc, #672]	; 13174 <__assert_fail@plt+0x17d4>
   12ed0:	ldr	r1, [pc, #476]	; 130b4 <__assert_fail@plt+0x1714>
   12ed4:	ldr	r0, [pc, #668]	; 13178 <__assert_fail@plt+0x17d8>
   12ed8:	bl	119a0 <__assert_fail@plt>
   12edc:	ldr	r3, [pc, #644]	; 13168 <__assert_fail@plt+0x17c8>
   12ee0:	ldr	r2, [pc, #660]	; 1317c <__assert_fail@plt+0x17dc>
   12ee4:	ldr	r1, [pc, #456]	; 130b4 <__assert_fail@plt+0x1714>
   12ee8:	ldr	r0, [pc, #656]	; 13180 <__assert_fail@plt+0x17e0>
   12eec:	bl	119a0 <__assert_fail@plt>
   12ef0:	ldr	r3, [pc, #624]	; 13168 <__assert_fail@plt+0x17c8>
   12ef4:	ldr	r2, [pc, #648]	; 13184 <__assert_fail@plt+0x17e4>
   12ef8:	ldr	r1, [pc, #436]	; 130b4 <__assert_fail@plt+0x1714>
   12efc:	ldr	r0, [pc, #644]	; 13188 <__assert_fail@plt+0x17e8>
   12f00:	bl	119a0 <__assert_fail@plt>
   12f04:	mov	r2, #5
   12f08:	ldr	r1, [pc, #636]	; 1318c <__assert_fail@plt+0x17ec>
   12f0c:	mov	r0, #0
   12f10:	bl	11628 <dcgettext@plt>
   12f14:	bl	11550 <printf@plt>
   12f18:	b	12ea8 <__assert_fail@plt+0x1508>
   12f1c:	mov	r2, #5
   12f20:	ldr	r1, [pc, #616]	; 13190 <__assert_fail@plt+0x17f0>
   12f24:	mov	r0, #0
   12f28:	bl	11628 <dcgettext@plt>
   12f2c:	mov	r4, r0
   12f30:	ldr	r3, [pc, #360]	; 130a0 <__assert_fail@plt+0x1700>
   12f34:	ldrd	r0, [r3, #48]	; 0x30
   12f38:	bl	2b0b4 <__assert_fail@plt+0x19714>
   12f3c:	vmov	d6, r0, r1
   12f40:	vldr	s15, [sp, #20]
   12f44:	vcvt.f64.u32	d7, s15
   12f48:	vsub.f64	d7, d6, d7
   12f4c:	vldr	d5, [pc, #324]	; 13098 <__assert_fail@plt+0x16f8>
   12f50:	vmul.f64	d7, d7, d5
   12f54:	vdiv.f64	d5, d7, d6
   12f58:	vmov	r2, r3, d5
   12f5c:	mov	r0, r4
   12f60:	bl	11550 <printf@plt>
   12f64:	b	12ea8 <__assert_fail@plt+0x1508>
   12f68:	bl	117d8 <__errno_location@plt>
   12f6c:	ldr	r4, [r0]
   12f70:	ldr	r2, [sp, #2680]	; 0xa78
   12f74:	mov	r1, #8
   12f78:	mov	r0, #0
   12f7c:	bl	1a0cc <__assert_fail@plt+0x872c>
   12f80:	mov	r3, r0
   12f84:	ldr	r2, [pc, #344]	; 130e4 <__assert_fail@plt+0x1744>
   12f88:	mov	r1, r4
   12f8c:	mov	r0, #0
   12f90:	bl	116d0 <error@plt>
   12f94:	mov	r0, #0
   12f98:	b	12b64 <__assert_fail@plt+0x11c4>
   12f9c:	mov	r2, #0
   12fa0:	mov	r1, #10
   12fa4:	add	r0, sp, #2640	; 0xa50
   12fa8:	add	r0, r0, #12
   12fac:	bl	12448 <__assert_fail@plt+0xaa8>
   12fb0:	ldr	r3, [sp, #2676]	; 0xa74
   12fb4:	rsb	r2, r4, #10
   12fb8:	mov	r1, #1
   12fbc:	ldr	r0, [sp, #2664]	; 0xa68
   12fc0:	add	r0, r0, r4
   12fc4:	bl	116ac <fread@plt>
   12fc8:	add	r4, r4, r0
   12fcc:	cmp	r4, #9
   12fd0:	bls	12840 <__assert_fail@plt+0xea0>
   12fd4:	mov	r2, #10
   12fd8:	ldr	r1, [pc, #436]	; 13194 <__assert_fail@plt+0x17f4>
   12fdc:	ldr	r0, [sp, #2664]	; 0xa68
   12fe0:	bl	1161c <memcmp@plt>
   12fe4:	subs	r3, r0, #0
   12fe8:	mov	r5, r3
   12fec:	str	r3, [sp, #32]
   12ff0:	bne	12840 <__assert_fail@plt+0xea0>
   12ff4:	mov	r1, #0
   12ff8:	ldr	r0, [pc, #408]	; 13198 <__assert_fail@plt+0x17f8>
   12ffc:	bl	11dc4 <__assert_fail@plt+0x424>
   13000:	str	r5, [sp, #28]
   13004:	ldr	r3, [pc, #400]	; 1319c <__assert_fail@plt+0x17fc>
   13008:	str	r3, [sp, #36]	; 0x24
   1300c:	b	13070 <__assert_fail@plt+0x16d0>
   13010:	cmp	r4, #0
   13014:	ble	1304c <__assert_fail@plt+0x16ac>
   13018:	ldr	r3, [pc, #128]	; 130a0 <__assert_fail@plt+0x1700>
   1301c:	ldr	r3, [r3, #20]
   13020:	cmp	r3, #2
   13024:	beq	127d4 <__assert_fail@plt+0xe34>
   13028:	ldr	r3, [sp, #16]
   1302c:	cmp	r3, #1
   13030:	beq	1304c <__assert_fail@plt+0x16ac>
   13034:	ldr	r3, [sp, #3000]	; 0xbb8
   13038:	ldr	r2, [sp, #3016]	; 0xbc8
   1303c:	orrs	r3, r3, r2
   13040:	moveq	r3, #1
   13044:	streq	r3, [sp, #16]
   13048:	bne	127fc <__assert_fail@plt+0xe5c>
   1304c:	mov	r1, #0
   13050:	ldr	r0, [pc, #320]	; 13198 <__assert_fail@plt+0x17f8>
   13054:	bl	11dc4 <__assert_fail@plt+0x424>
   13058:	ldr	r3, [pc, #320]	; 131a0 <__assert_fail@plt+0x1800>
   1305c:	str	r3, [sp, #36]	; 0x24
   13060:	mov	r3, #1
   13064:	str	r3, [sp, #28]
   13068:	mov	r3, #0
   1306c:	str	r3, [sp, #32]
   13070:	ldr	r3, [sp, #3004]	; 0xbbc
   13074:	cmp	r3, #0
   13078:	bne	12914 <__assert_fail@plt+0xf74>
   1307c:	cmp	r8, #0
   13080:	ble	12a24 <__assert_fail@plt+0x1084>
   13084:	sub	r7, r7, #4
   13088:	mov	r4, #0
   1308c:	ldr	fp, [pc, #12]	; 130a0 <__assert_fail@plt+0x1700>
   13090:	mov	sl, #1
   13094:	b	129a0 <__assert_fail@plt+0x1000>
   13098:	andeq	r0, r0, r0
   1309c:	subsmi	r0, r9, r0
   130a0:	andeq	sp, r3, r8, lsr #4
   130a4:	andeq	fp, r2, r4, lsr #17
   130a8:	andeq	fp, r2, r0, lsr r9
   130ac:	strdeq	fp, [r2], -ip
   130b0:	andeq	r0, r0, r7, lsr #7
   130b4:	andeq	fp, r2, r8, lsl #15
   130b8:	muleq	r2, r8, r8
   130bc:	andeq	fp, r2, ip, ror r9
   130c0:	andeq	fp, r2, r8, lsr #20
   130c4:			; <UNDEFINED> instruction: 0x000124b0
   130c8:	muleq	r2, r4, r8
   130cc:	andeq	fp, r2, r0, ror #20
   130d0:	andeq	r2, r1, ip, asr #3
   130d4:	andeq	r2, r1, r4, lsl #3
   130d8:	muleq	r2, r8, sl
   130dc:	andeq	r2, r1, ip, asr r1
   130e0:	andeq	r2, r1, r4, lsr r1
   130e4:	andeq	ip, r2, r8, lsr #9
   130e8:	ldrdeq	r2, [r1], -ip
   130ec:	andeq	r2, r1, r4, lsl #1
   130f0:	andeq	r2, r1, r8, rrx
   130f4:	andeq	r2, r1, ip, asr #32
   130f8:	andeq	r1, r1, r4, asr #28
   130fc:	andeq	r1, r1, r0, lsl lr
   13100:	muleq	r1, r4, ip
   13104:			; <UNDEFINED> instruction: 0x00011cbc
   13108:	andeq	r1, r1, r0, ror #23
   1310c:	andeq	r1, r1, r0, lsr fp
   13110:	andeq	sp, r3, ip, lsr #3
   13114:	strdeq	r1, [r1], -r4
   13118:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1311c:	andeq	r2, r1, r0, lsr #32
   13120:	andeq	r1, r1, r8, asr #31
   13124:	andeq	sp, r3, r8, asr #4
   13128:	muleq	r1, ip, lr
   1312c:	ldrdeq	r1, [r1], -r8
   13130:	andeq	fp, r2, r0, lsr #21
   13134:	andeq	fp, r2, r4, asr #21
   13138:	strdeq	fp, [r2], -ip
   1313c:	andeq	fp, r2, r0, lsr fp
   13140:	andeq	fp, r2, ip, ror #22
   13144:	ldrdeq	fp, [r2], -ip
   13148:	andeq	fp, r2, r4, lsl #24
   1314c:	andeq	fp, r2, r8, lsl ip
   13150:	andeq	fp, r2, r0, lsr #24
   13154:	andeq	fp, r2, r0, asr #24
   13158:	andeq	fp, r2, r0, ror #24
   1315c:	andeq	fp, r2, r8, ror ip
   13160:	andeq	fp, r2, ip, lsl #25
   13164:	andeq	fp, r2, r8, asr #27
   13168:	andeq	fp, r2, r4, lsr #8
   1316c:	andeq	r0, r0, sp, asr #6
   13170:	andeq	fp, r2, r0, lsl #23
   13174:	andeq	r0, r0, lr, asr #6
   13178:	muleq	r2, ip, fp
   1317c:	andeq	r0, r0, pc, asr #6
   13180:			; <UNDEFINED> instruction: 0x0002bbbc
   13184:	andeq	r0, r0, r3, asr r3
   13188:	andeq	fp, r2, r8, lsl #24
   1318c:	andeq	fp, r2, r0, asr #26
   13190:	muleq	r2, r8, sp
   13194:	andeq	fp, r2, r8, lsl r4
   13198:	andeq	r2, r1, r8, ror #3
   1319c:	andeq	fp, r2, r4, lsl #17
   131a0:	andeq	fp, r2, ip, ror r8
   131a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131a8:	vpush	{d8-d9}
   131ac:	sub	sp, sp, #260	; 0x104
   131b0:	str	r0, [sp, #48]	; 0x30
   131b4:	mov	r7, r1
   131b8:	add	r3, sp, #152	; 0x98
   131bc:	ldr	r2, [pc, #3188]	; 13e38 <__assert_fail@plt+0x2498>
   131c0:	ldm	r2, {r0, r1, r2}
   131c4:	stm	r3, {r0, r1, r2}
   131c8:	cmp	r0, #0
   131cc:	beq	136ac <__assert_fail@plt+0x1d0c>
   131d0:	mov	r4, r0
   131d4:	add	r5, sp, #156	; 0x9c
   131d8:	mov	r0, r4
   131dc:	bl	11cd4 <__assert_fail@plt+0x334>
   131e0:	cmp	r0, #0
   131e4:	bge	131fc <__assert_fail@plt+0x185c>
   131e8:	ldr	r4, [r5], #4
   131ec:	cmp	r4, #0
   131f0:	bne	131d8 <__assert_fail@plt+0x1838>
   131f4:	mvn	fp, #0
   131f8:	b	13208 <__assert_fail@plt+0x1868>
   131fc:	mov	fp, r0
   13200:	ldr	r3, [pc, #3252]	; 13ebc <__assert_fail@plt+0x251c>
   13204:	str	r4, [r3, #88]	; 0x58
   13208:	bl	11658 <geteuid@plt>
   1320c:	mov	r5, r0
   13210:	bl	11580 <getuid@plt>
   13214:	mov	r4, r0
   13218:	bl	11808 <getgid@plt>
   1321c:	mov	r6, r0
   13220:	cmp	r5, #0
   13224:	beq	136b4 <__assert_fail@plt+0x1d14>
   13228:	cmp	r4, #0
   1322c:	cmpne	r5, r4
   13230:	bne	1370c <__assert_fail@plt+0x1d6c>
   13234:	bl	117d8 <__errno_location@plt>
   13238:	str	r0, [sp, #88]	; 0x58
   1323c:	mov	r3, #0
   13240:	str	r3, [r0]
   13244:	mov	r0, r6
   13248:	bl	11700 <setgid@plt>
   1324c:	cmp	r0, #0
   13250:	bne	13770 <__assert_fail@plt+0x1dd0>
   13254:	ldr	r0, [r7]
   13258:	cmp	r0, #0
   1325c:	beq	13788 <__assert_fail@plt+0x1de8>
   13260:	bl	1881c <__assert_fail@plt+0x6e7c>
   13264:	ldr	r1, [pc, #3024]	; 13e3c <__assert_fail@plt+0x249c>
   13268:	mov	r0, #6
   1326c:	bl	11898 <setlocale@plt>
   13270:	ldr	r4, [pc, #3016]	; 13e40 <__assert_fail@plt+0x24a0>
   13274:	ldr	r1, [pc, #3016]	; 13e44 <__assert_fail@plt+0x24a4>
   13278:	mov	r0, r4
   1327c:	bl	11910 <bindtextdomain@plt>
   13280:	mov	r0, r4
   13284:	bl	11640 <textdomain@plt>
   13288:	mov	r0, #0
   1328c:	bl	19d70 <__assert_fail@plt+0x83d0>
   13290:	ldr	r3, [pc, #3108]	; 13ebc <__assert_fail@plt+0x251c>
   13294:	str	r0, [r3, #8]
   13298:	ldr	r0, [pc, #2984]	; 13e48 <__assert_fail@plt+0x24a8>
   1329c:	bl	2b34c <__assert_fail@plt+0x199ac>
   132a0:	cmp	r0, #0
   132a4:	bne	13794 <__assert_fail@plt+0x1df4>
   132a8:	ldr	r0, [pc, #2972]	; 13e4c <__assert_fail@plt+0x24ac>
   132ac:	bl	2b34c <__assert_fail@plt+0x199ac>
   132b0:	subs	r3, r0, #0
   132b4:	str	r3, [sp, #56]	; 0x38
   132b8:	bne	13794 <__assert_fail@plt+0x1df4>
   132bc:	ldr	r4, [pc, #3064]	; 13ebc <__assert_fail@plt+0x251c>
   132c0:	mov	r2, #0
   132c4:	mov	r3, #0
   132c8:	strd	r2, [r4, #96]	; 0x60
   132cc:	strd	r2, [r4, #104]	; 0x68
   132d0:	mov	r3, #1
   132d4:	strb	r3, [r4, #80]	; 0x50
   132d8:	ldr	r0, [pc, #2928]	; 13e50 <__assert_fail@plt+0x24b0>
   132dc:	bl	116f4 <getenv@plt>
   132e0:	mov	r9, r0
   132e4:	mov	r3, #0
   132e8:	str	r3, [r4, #20]
   132ec:	ldr	r3, [sp, #56]	; 0x38
   132f0:	str	r3, [sp, #68]	; 0x44
   132f4:	str	r3, [sp, #60]	; 0x3c
   132f8:	str	r3, [sp, #76]	; 0x4c
   132fc:	str	r3, [sp, #72]	; 0x48
   13300:	mov	r8, r3
   13304:	str	r3, [sp, #52]	; 0x34
   13308:	str	r3, [sp, #92]	; 0x5c
   1330c:	str	r3, [sp, #64]	; 0x40
   13310:	str	r3, [sp, #80]	; 0x50
   13314:	ldr	r4, [pc, #2872]	; 13e54 <__assert_fail@plt+0x24b4>
   13318:	ldr	r6, [pc, #2872]	; 13e58 <__assert_fail@plt+0x24b8>
   1331c:	ldr	r5, [pc, #2968]	; 13ebc <__assert_fail@plt+0x251c>
   13320:	add	r3, r5, #96	; 0x60
   13324:	str	r3, [sp, #96]	; 0x60
   13328:	add	r3, sp, #256	; 0x100
   1332c:	mvn	r2, #0
   13330:	str	r2, [r3, #-112]!	; 0xffffff90
   13334:	str	r3, [sp]
   13338:	mov	r3, r4
   1333c:	ldr	r2, [pc, #2840]	; 13e5c <__assert_fail@plt+0x24bc>
   13340:	mov	r1, r7
   13344:	ldr	r0, [sp, #48]	; 0x30
   13348:	bl	1176c <getopt_long@plt>
   1334c:	cmn	r0, #1
   13350:	beq	13a18 <__assert_fail@plt+0x2078>
   13354:	sub	r0, r0, #48	; 0x30
   13358:	cmp	r0, #209	; 0xd1
   1335c:	ldrls	pc, [pc, r0, lsl #2]
   13360:	b	13a04 <__assert_fail@plt+0x2064>
   13364:	andeq	r3, r1, r8, asr #15
   13368:	andeq	r3, r1, r4, lsl #20
   1336c:	andeq	r3, r1, r4, lsl #20
   13370:	andeq	r3, r1, r4, lsl #20
   13374:	andeq	r3, r1, r4, lsl #20
   13378:	andeq	r3, r1, r4, lsl #20
   1337c:	andeq	r3, r1, r4, lsl #20
   13380:	andeq	r3, r1, r4, lsl #20
   13384:	andeq	r3, r1, r4, lsl #20
   13388:	andeq	r3, r1, r4, lsl #20
   1338c:	andeq	r3, r1, r4, lsl #20
   13390:	andeq	r3, r1, r4, lsl #20
   13394:	andeq	r3, r1, r4, lsl #20
   13398:	andeq	r3, r1, r4, lsl #20
   1339c:	andeq	r3, r1, r4, lsl #20
   133a0:	andeq	r3, r1, r4, lsl #20
   133a4:	andeq	r3, r1, r4, lsl #20
   133a8:			; <UNDEFINED> instruction: 0x000137bc
   133ac:	andeq	r3, r1, r4, lsl #20
   133b0:	andeq	r3, r1, r4, lsl #20
   133b4:	andeq	r3, r1, r4, lsl #20
   133b8:	andeq	r3, r1, r4, lsl r8
   133bc:	andeq	r3, r1, r4, lsl #20
   133c0:	andeq	r3, r1, r4, lsl #20
   133c4:	andeq	r3, r1, ip, lsr #19
   133c8:	andeq	r3, r1, r4, lsl #20
   133cc:	andeq	r3, r1, r4, lsl #20
   133d0:	andeq	r3, r1, r4, lsl #20
   133d4:	muleq	r1, ip, r9
   133d8:	andeq	r3, r1, r4, lsl #20
   133dc:	andeq	r3, r1, r4, lsl #20
   133e0:	andeq	r3, r1, r4, lsl #20
   133e4:	andeq	r3, r1, ip, lsr #19
   133e8:	andeq	r3, r1, r4, lsl #20
   133ec:	andeq	r3, r1, r4, lsl #20
   133f0:	muleq	r1, r0, r9
   133f4:	andeq	r3, r1, r4, lsl #20
   133f8:	andeq	r3, r1, r4, lsl #20
   133fc:	andeq	r3, r1, r4, lsl #20
   13400:	andeq	r3, r1, r4, lsl #20
   13404:	andeq	r3, r1, r4, lsl #20
   13408:	andeq	r3, r1, r4, lsl #20
   1340c:	andeq	r3, r1, r4, lsl #20
   13410:	andeq	r3, r1, r4, lsl #20
   13414:	andeq	r3, r1, r4, lsl #20
   13418:	andeq	r3, r1, r4, lsl #20
   1341c:	andeq	r3, r1, r4, lsl #20
   13420:	andeq	r3, r1, r4, lsl #20
   13424:	andeq	r3, r1, r4, lsl #20
   13428:	andeq	r3, r1, r4, lsl #20
   1342c:	andeq	r3, r1, ip, lsl #20
   13430:	ldrdeq	r3, [r1], -ip
   13434:	andeq	r3, r1, r8, ror #15
   13438:	andeq	r3, r1, r8, lsl #16
   1343c:	andeq	r3, r1, r4, lsl #20
   13440:	andeq	r3, r1, r4, lsl #20
   13444:	andeq	r3, r1, ip, lsr #16
   13448:	andeq	r3, r1, r0, lsr #16
   1344c:	andeq	r3, r1, r4, lsl #20
   13450:	andeq	r3, r1, r4, lsl #20
   13454:			; <UNDEFINED> instruction: 0x000139bc
   13458:	andeq	r3, r1, r8, lsr #6
   1345c:	andeq	r3, r1, r4, lsl #20
   13460:	andeq	r3, r1, r4, lsl #20
   13464:	andeq	r3, r1, r4, asr #18
   13468:	andeq	r3, r1, r4, lsl #20
   1346c:	andeq	r3, r1, r4, ror r9
   13470:	andeq	r3, r1, r8, lsr #6
   13474:	andeq	r3, r1, r4, lsl #20
   13478:	andeq	r3, r1, r4, lsl #20
   1347c:	andeq	r3, r1, r0, asr r9
   13480:	andeq	r3, r1, r8, ror #18
   13484:	andeq	r3, r1, r4, lsl #20
   13488:	andeq	r3, r1, r4, lsl #20
   1348c:	andeq	r3, r1, r4, lsl #20
   13490:	andeq	r3, r1, r4, lsl #20
   13494:	andeq	r3, r1, r4, lsl #20
   13498:	andeq	r3, r1, r4, lsl #20
   1349c:	andeq	r3, r1, r4, lsl #20
   134a0:	andeq	r3, r1, r4, lsl #20
   134a4:	andeq	r3, r1, r4, lsl #20
   134a8:	andeq	r3, r1, r4, lsl #20
   134ac:	andeq	r3, r1, r4, lsl #20
   134b0:	andeq	r3, r1, r4, lsl #20
   134b4:	andeq	r3, r1, r4, lsl #20
   134b8:	andeq	r3, r1, r4, lsl #20
   134bc:	andeq	r3, r1, r4, lsl #20
   134c0:	andeq	r3, r1, r4, lsl #20
   134c4:	andeq	r3, r1, r4, lsl #20
   134c8:	andeq	r3, r1, r4, lsl #20
   134cc:	andeq	r3, r1, r4, lsl #20
   134d0:	andeq	r3, r1, r4, lsl #20
   134d4:	andeq	r3, r1, r4, lsl #20
   134d8:	andeq	r3, r1, r4, lsl #20
   134dc:	andeq	r3, r1, r4, lsl #20
   134e0:	andeq	r3, r1, r4, lsl #20
   134e4:	andeq	r3, r1, r4, lsl #20
   134e8:	andeq	r3, r1, r4, lsl #20
   134ec:	andeq	r3, r1, r4, lsl #20
   134f0:	andeq	r3, r1, r4, lsl #20
   134f4:	andeq	r3, r1, r4, lsl #20
   134f8:	andeq	r3, r1, r4, lsl #20
   134fc:	andeq	r3, r1, r4, lsl #20
   13500:	andeq	r3, r1, r4, lsl #20
   13504:	andeq	r3, r1, r4, lsl #20
   13508:	andeq	r3, r1, r4, lsl #20
   1350c:	andeq	r3, r1, r4, lsl #20
   13510:	andeq	r3, r1, r4, lsl #20
   13514:	andeq	r3, r1, r4, lsl #20
   13518:	andeq	r3, r1, r4, lsl #20
   1351c:	andeq	r3, r1, r4, lsl #20
   13520:	andeq	r3, r1, r4, lsl #20
   13524:	andeq	r3, r1, r4, lsl #20
   13528:	andeq	r3, r1, r4, lsl #20
   1352c:	andeq	r3, r1, r4, lsl #20
   13530:	andeq	r3, r1, r4, lsl #20
   13534:	andeq	r3, r1, r4, lsl #20
   13538:	andeq	r3, r1, r4, lsl #20
   1353c:	andeq	r3, r1, r4, lsl #20
   13540:	andeq	r3, r1, r4, lsl #20
   13544:	andeq	r3, r1, r4, lsl #20
   13548:	andeq	r3, r1, r4, lsl #20
   1354c:	andeq	r3, r1, r4, lsl #20
   13550:	andeq	r3, r1, r4, lsl #20
   13554:	andeq	r3, r1, r4, lsl #20
   13558:	andeq	r3, r1, r4, lsl #20
   1355c:	andeq	r3, r1, r4, lsl #20
   13560:	andeq	r3, r1, r4, lsl #20
   13564:	andeq	r3, r1, r4, lsl #20
   13568:	andeq	r3, r1, r4, lsl #20
   1356c:	andeq	r3, r1, r4, lsl #20
   13570:	andeq	r3, r1, r4, lsl #20
   13574:	andeq	r3, r1, r4, lsl #20
   13578:	andeq	r3, r1, r4, lsl #20
   1357c:	andeq	r3, r1, r4, lsl #20
   13580:	andeq	r3, r1, r4, lsl #20
   13584:	andeq	r3, r1, r4, lsl #20
   13588:	andeq	r3, r1, r4, lsl #20
   1358c:	andeq	r3, r1, r4, lsl #20
   13590:	andeq	r3, r1, r4, lsl #20
   13594:	andeq	r3, r1, r4, lsl #20
   13598:	andeq	r3, r1, r4, lsl #20
   1359c:	andeq	r3, r1, r4, lsl #20
   135a0:	andeq	r3, r1, r4, lsl #20
   135a4:	andeq	r3, r1, r4, lsl #20
   135a8:	andeq	r3, r1, r4, lsl #20
   135ac:	andeq	r3, r1, r4, lsl #20
   135b0:	andeq	r3, r1, r4, lsl #20
   135b4:	andeq	r3, r1, r4, lsl #20
   135b8:	andeq	r3, r1, r4, lsl #20
   135bc:	andeq	r3, r1, r4, lsl #20
   135c0:	andeq	r3, r1, r4, lsl #20
   135c4:	andeq	r3, r1, r4, lsl #20
   135c8:	andeq	r3, r1, r4, lsl #20
   135cc:	andeq	r3, r1, r4, lsl #20
   135d0:	andeq	r3, r1, r4, lsl #20
   135d4:	andeq	r3, r1, r4, lsl #20
   135d8:	andeq	r3, r1, r4, lsl #20
   135dc:	andeq	r3, r1, r4, lsl #20
   135e0:	andeq	r3, r1, r4, lsl #20
   135e4:	andeq	r3, r1, r4, lsl #20
   135e8:	andeq	r3, r1, r4, lsl #20
   135ec:	andeq	r3, r1, r4, lsl #20
   135f0:	andeq	r3, r1, r4, lsl #20
   135f4:	andeq	r3, r1, r4, lsl #20
   135f8:	andeq	r3, r1, r4, lsl #20
   135fc:	andeq	r3, r1, r4, lsl #20
   13600:	andeq	r3, r1, r4, lsl #20
   13604:	andeq	r3, r1, r4, lsl #20
   13608:	andeq	r3, r1, r4, lsl #20
   1360c:	andeq	r3, r1, r4, lsl #20
   13610:	andeq	r3, r1, r4, lsl #20
   13614:	andeq	r3, r1, r4, lsl #20
   13618:	andeq	r3, r1, r4, lsl #20
   1361c:	andeq	r3, r1, r4, lsl #20
   13620:	andeq	r3, r1, r4, lsl #20
   13624:	andeq	r3, r1, r4, lsl #20
   13628:	andeq	r3, r1, r4, lsl #20
   1362c:	andeq	r3, r1, r4, lsl #20
   13630:	andeq	r3, r1, r4, lsl #20
   13634:	andeq	r3, r1, r4, lsl #20
   13638:	andeq	r3, r1, r4, lsl #20
   1363c:	andeq	r3, r1, r4, lsl #20
   13640:	andeq	r3, r1, r4, lsl #20
   13644:	andeq	r3, r1, r4, lsl #20
   13648:	andeq	r3, r1, r4, lsl #20
   1364c:	andeq	r3, r1, r4, lsl #20
   13650:	andeq	r3, r1, r4, lsl #20
   13654:	andeq	r3, r1, r4, lsl #20
   13658:	andeq	r3, r1, r4, lsl #20
   1365c:	andeq	r3, r1, r4, lsl #20
   13660:	andeq	r3, r1, r4, lsl #20
   13664:	andeq	r3, r1, r4, lsl #20
   13668:	andeq	r3, r1, r4, lsl #20
   1366c:	andeq	r3, r1, r4, lsl #20
   13670:	andeq	r3, r1, r4, lsl #20
   13674:	andeq	r3, r1, r4, lsl #20
   13678:	andeq	r3, r1, r4, lsl #20
   1367c:	andeq	r3, r1, r4, lsl #20
   13680:	andeq	r3, r1, r4, lsl #20
   13684:	andeq	r3, r1, r4, lsl #20
   13688:	andeq	r3, r1, r4, lsl #20
   1368c:	andeq	r3, r1, r4, lsl #20
   13690:	andeq	r3, r1, r4, lsl #20
   13694:	andeq	r3, r1, r4, lsl #20
   13698:	andeq	r3, r1, r4, lsl #20
   1369c:	andeq	r3, r1, r4, lsl #20
   136a0:	andeq	r3, r1, r4, lsl #20
   136a4:	andeq	r3, r1, r0, lsl #19
   136a8:	andeq	r3, r1, r4, lsr r8
   136ac:	mvn	fp, #0
   136b0:	b	13208 <__assert_fail@plt+0x1868>
   136b4:	add	r1, sp, #256	; 0x100
   136b8:	str	r0, [r1, #-104]!	; 0xffffff98
   136bc:	mov	r0, #1
   136c0:	bl	11670 <setgroups@plt>
   136c4:	cmp	r0, #0
   136c8:	beq	13228 <__assert_fail@plt+0x1888>
   136cc:	mov	r2, #5
   136d0:	ldr	r1, [pc, #1928]	; 13e60 <__assert_fail@plt+0x24c0>
   136d4:	mov	r0, #0
   136d8:	bl	11628 <dcgettext@plt>
   136dc:	mov	r5, r0
   136e0:	bl	117d8 <__errno_location@plt>
   136e4:	ldr	r4, [r0]
   136e8:	mov	r2, r5
   136ec:	mov	r1, #8
   136f0:	mov	r0, #0
   136f4:	bl	1a0cc <__assert_fail@plt+0x872c>
   136f8:	mov	r3, r0
   136fc:	ldr	r2, [pc, #1972]	; 13eb8 <__assert_fail@plt+0x2518>
   13700:	mov	r1, r4
   13704:	mov	r0, #1
   13708:	bl	116d0 <error@plt>
   1370c:	bl	117d8 <__errno_location@plt>
   13710:	mov	r4, r0
   13714:	mov	r3, #0
   13718:	str	r3, [r0]
   1371c:	bl	11580 <getuid@plt>
   13720:	bl	118c8 <setuid@plt>
   13724:	cmp	r0, #0
   13728:	bne	13758 <__assert_fail@plt+0x1db8>
   1372c:	mov	r0, #0
   13730:	bl	118c8 <setuid@plt>
   13734:	cmp	r0, #0
   13738:	bne	13234 <__assert_fail@plt+0x1894>
   1373c:	mov	r2, #5
   13740:	ldr	r1, [pc, #1820]	; 13e64 <__assert_fail@plt+0x24c4>
   13744:	bl	11628 <dcgettext@plt>
   13748:	mov	r5, r0
   1374c:	mov	r3, #0
   13750:	str	r3, [r4]
   13754:	b	136e0 <__assert_fail@plt+0x1d40>
   13758:	mov	r2, #5
   1375c:	ldr	r1, [pc, #1796]	; 13e68 <__assert_fail@plt+0x24c8>
   13760:	mov	r0, #0
   13764:	bl	11628 <dcgettext@plt>
   13768:	mov	r5, r0
   1376c:	b	136e0 <__assert_fail@plt+0x1d40>
   13770:	mov	r2, #5
   13774:	ldr	r1, [pc, #1776]	; 13e6c <__assert_fail@plt+0x24cc>
   13778:	mov	r0, #0
   1377c:	bl	11628 <dcgettext@plt>
   13780:	mov	r5, r0
   13784:	b	136e0 <__assert_fail@plt+0x1d40>
   13788:	ldr	r0, [pc, #1760]	; 13e70 <__assert_fail@plt+0x24d0>
   1378c:	bl	1881c <__assert_fail@plt+0x6e7c>
   13790:	b	13264 <__assert_fail@plt+0x18c4>
   13794:	ldr	r3, [sp, #88]	; 0x58
   13798:	ldr	r4, [r3]
   1379c:	mov	r2, #5
   137a0:	ldr	r1, [pc, #1740]	; 13e74 <__assert_fail@plt+0x24d4>
   137a4:	mov	r0, #0
   137a8:	bl	11628 <dcgettext@plt>
   137ac:	mov	r2, r0
   137b0:	mov	r1, r4
   137b4:	mov	r0, #1
   137b8:	bl	116d0 <error@plt>
   137bc:	mov	r3, #1
   137c0:	str	r3, [sp, #68]	; 0x44
   137c4:	b	13328 <__assert_fail@plt+0x1988>
   137c8:	mov	r3, #0
   137cc:	ldr	r2, [pc, #1756]	; 13eb0 <__assert_fail@plt+0x2510>
   137d0:	str	r3, [r2]
   137d4:	strb	r3, [r5, #80]	; 0x50
   137d8:	b	13328 <__assert_fail@plt+0x1988>
   137dc:	mov	r3, #1
   137e0:	str	r3, [sp, #92]	; 0x5c
   137e4:	b	13328 <__assert_fail@plt+0x1988>
   137e8:	ldr	r9, [r6]
   137ec:	cmp	r9, #0
   137f0:	bne	13328 <__assert_fail@plt+0x1988>
   137f4:	ldr	r3, [pc, #1660]	; 13e78 <__assert_fail@plt+0x24d8>
   137f8:	ldr	r2, [pc, #1660]	; 13e7c <__assert_fail@plt+0x24dc>
   137fc:	ldr	r1, [pc, #1660]	; 13e80 <__assert_fail@plt+0x24e0>
   13800:	ldr	r0, [pc, #1660]	; 13e84 <__assert_fail@plt+0x24e4>
   13804:	bl	119a0 <__assert_fail@plt>
   13808:	mov	r3, #1
   1380c:	str	r3, [r5, #20]
   13810:	b	13328 <__assert_fail@plt+0x1988>
   13814:	mov	r3, #2
   13818:	str	r3, [r5, #20]
   1381c:	b	13328 <__assert_fail@plt+0x1988>
   13820:	mov	r3, #1
   13824:	str	r3, [sp, #80]	; 0x50
   13828:	b	13328 <__assert_fail@plt+0x1988>
   1382c:	mov	r0, #0
   13830:	bl	11d30 <__assert_fail@plt+0x390>
   13834:	ldr	sl, [r6]
   13838:	ldrb	r3, [sl]
   1383c:	cmp	r3, #0
   13840:	beq	1389c <__assert_fail@plt+0x1efc>
   13844:	mov	r3, #0
   13848:	ldr	r2, [sp, #88]	; 0x58
   1384c:	str	r3, [r2]
   13850:	mov	r2, #10
   13854:	add	r1, sp, #152	; 0x98
   13858:	mov	r0, sl
   1385c:	bl	1179c <strtoul@plt>
   13860:	cmn	r0, #1
   13864:	beq	138bc <__assert_fail@plt+0x1f1c>
   13868:	cmp	r0, #0
   1386c:	bne	13880 <__assert_fail@plt+0x1ee0>
   13870:	ldr	r3, [sp, #88]	; 0x58
   13874:	ldr	r3, [r3]
   13878:	cmp	r3, #22
   1387c:	beq	138cc <__assert_fail@plt+0x1f2c>
   13880:	ldr	r3, [sp, #152]	; 0x98
   13884:	ldrb	r3, [r3]
   13888:	cmp	r3, #0
   1388c:	bne	1390c <__assert_fail@plt+0x1f6c>
   13890:	ldr	r3, [pc, #1560]	; 13eb0 <__assert_fail@plt+0x2510>
   13894:	str	r0, [r3, #8]
   13898:	b	13328 <__assert_fail@plt+0x1988>
   1389c:	mov	r2, #5
   138a0:	ldr	r1, [pc, #1504]	; 13e88 <__assert_fail@plt+0x24e8>
   138a4:	mov	r0, #0
   138a8:	bl	11628 <dcgettext@plt>
   138ac:	mov	r2, r0
   138b0:	mov	r1, #0
   138b4:	mov	r0, #1
   138b8:	bl	116d0 <error@plt>
   138bc:	ldr	r3, [sp, #88]	; 0x58
   138c0:	ldr	r3, [r3]
   138c4:	cmp	r3, #34	; 0x22
   138c8:	bne	13880 <__assert_fail@plt+0x1ee0>
   138cc:	ldr	r3, [sp, #88]	; 0x58
   138d0:	ldr	r4, [r3]
   138d4:	mov	r2, #5
   138d8:	ldr	r1, [pc, #1452]	; 13e8c <__assert_fail@plt+0x24ec>
   138dc:	mov	r0, #0
   138e0:	bl	11628 <dcgettext@plt>
   138e4:	mov	r5, r0
   138e8:	mov	r2, sl
   138ec:	mov	r1, #8
   138f0:	mov	r0, #0
   138f4:	bl	1a0cc <__assert_fail@plt+0x872c>
   138f8:	mov	r3, r0
   138fc:	mov	r2, r5
   13900:	mov	r1, r4
   13904:	mov	r0, #1
   13908:	bl	116d0 <error@plt>
   1390c:	mov	r2, #5
   13910:	ldr	r1, [pc, #1396]	; 13e8c <__assert_fail@plt+0x24ec>
   13914:	mov	r0, #0
   13918:	bl	11628 <dcgettext@plt>
   1391c:	mov	r4, r0
   13920:	mov	r2, sl
   13924:	mov	r1, #8
   13928:	mov	r0, #0
   1392c:	bl	1a0cc <__assert_fail@plt+0x872c>
   13930:	mov	r3, r0
   13934:	mov	r2, r4
   13938:	mov	r1, #0
   1393c:	mov	r0, #1
   13940:	bl	116d0 <error@plt>
   13944:	mov	r3, #1
   13948:	str	r3, [sp, #64]	; 0x40
   1394c:	b	13328 <__assert_fail@plt+0x1988>
   13950:	ldr	r0, [pc, #1304]	; 13e70 <__assert_fail@plt+0x24d0>
   13954:	bl	141a0 <__assert_fail@plt+0x2800>
   13958:	ldr	r0, [sp, #56]	; 0x38
   1395c:	add	sp, sp, #260	; 0x104
   13960:	vpop	{d8-d9}
   13964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13968:	ldr	r3, [sp, #56]	; 0x38
   1396c:	str	r3, [sp, #52]	; 0x34
   13970:	b	13328 <__assert_fail@plt+0x1988>
   13974:	mov	r3, #1
   13978:	str	r3, [sp, #72]	; 0x48
   1397c:	b	13328 <__assert_fail@plt+0x1988>
   13980:	ldr	r0, [r6]
   13984:	bl	144ec <__assert_fail@plt+0x2b4c>
   13988:	str	r0, [sp, #76]	; 0x4c
   1398c:	b	13328 <__assert_fail@plt+0x1988>
   13990:	mov	r3, #1
   13994:	str	r3, [sp, #60]	; 0x3c
   13998:	b	13328 <__assert_fail@plt+0x1988>
   1399c:	mov	r2, #1
   139a0:	ldr	r3, [pc, #1288]	; 13eb0 <__assert_fail@plt+0x2510>
   139a4:	str	r2, [r3, #4]
   139a8:	b	13328 <__assert_fail@plt+0x1988>
   139ac:	mov	r2, #0
   139b0:	ldr	r3, [pc, #1272]	; 13eb0 <__assert_fail@plt+0x2510>
   139b4:	str	r2, [r3, #4]
   139b8:	b	13328 <__assert_fail@plt+0x1988>
   139bc:	ldr	r0, [r6]
   139c0:	str	r0, [sp, #152]	; 0x98
   139c4:	mov	r3, #0
   139c8:	str	r3, [sp]
   139cc:	ldr	r3, [sp, #96]	; 0x60
   139d0:	mov	r2, #10
   139d4:	add	r1, sp, #152	; 0x98
   139d8:	bl	1b028 <__assert_fail@plt+0x9688>
   139dc:	cmp	r0, #0
   139e0:	moveq	r8, #1
   139e4:	beq	13328 <__assert_fail@plt+0x1988>
   139e8:	ldr	r3, [pc, #1128]	; 13e58 <__assert_fail@plt+0x24b8>
   139ec:	ldr	r3, [r3]
   139f0:	str	r3, [sp]
   139f4:	ldr	r3, [pc, #1112]	; 13e54 <__assert_fail@plt+0x24b4>
   139f8:	mov	r2, #108	; 0x6c
   139fc:	ldr	r1, [sp, #144]	; 0x90
   13a00:	bl	1aed4 <__assert_fail@plt+0x9534>
   13a04:	mov	r0, #1
   13a08:	bl	11d30 <__assert_fail@plt+0x390>
   13a0c:	mov	r3, #1
   13a10:	str	r3, [sp, #52]	; 0x34
   13a14:	b	13328 <__assert_fail@plt+0x1988>
   13a18:	mov	sl, r0
   13a1c:	mvn	r3, fp
   13a20:	lsr	r3, r3, #31
   13a24:	cmp	r9, #0
   13a28:	moveq	r3, #0
   13a2c:	cmp	r3, #0
   13a30:	beq	13a40 <__assert_fail@plt+0x20a0>
   13a34:	mov	r0, fp
   13a38:	bl	1197c <close@plt>
   13a3c:	mov	fp, sl
   13a40:	ldr	r3, [sp, #92]	; 0x5c
   13a44:	ldr	r2, [sp, #60]	; 0x3c
   13a48:	orrs	r3, r3, r2
   13a4c:	beq	1400c <__assert_fail@plt+0x266c>
   13a50:	ldr	r3, [sp, #60]	; 0x3c
   13a54:	cmp	r3, #0
   13a58:	bne	13a68 <__assert_fail@plt+0x20c8>
   13a5c:	b	13a80 <__assert_fail@plt+0x20e0>
   13a60:	ldr	r3, [sp, #60]	; 0x3c
   13a64:	str	r3, [sp, #64]	; 0x40
   13a68:	ldr	r3, [pc, #1108]	; 13ec4 <__assert_fail@plt+0x2524>
   13a6c:	ldr	r3, [r3]
   13a70:	ldr	r2, [sp, #56]	; 0x38
   13a74:	ldr	r1, [sp, #48]	; 0x30
   13a78:	cmp	r1, r3
   13a7c:	moveq	r8, r2
   13a80:	mov	r0, #1
   13a84:	bl	11934 <isatty@plt>
   13a88:	cmp	r0, #1
   13a8c:	moveq	r2, #1
   13a90:	movne	r2, #0
   13a94:	ldr	r3, [pc, #1056]	; 13ebc <__assert_fail@plt+0x251c>
   13a98:	strb	r2, [r3, #16]
   13a9c:	cmp	r9, #0
   13aa0:	beq	13ac0 <__assert_fail@plt+0x2120>
   13aa4:	add	r3, sp, #136	; 0x88
   13aa8:	str	r3, [sp]
   13aac:	add	r3, sp, #132	; 0x84
   13ab0:	mov	r2, #1
   13ab4:	ldr	r1, [pc, #980]	; 13e90 <__assert_fail@plt+0x24f0>
   13ab8:	mov	r0, r9
   13abc:	bl	14700 <__assert_fail@plt+0x2d60>
   13ac0:	mov	r3, #0
   13ac4:	str	r3, [sp, #124]	; 0x7c
   13ac8:	str	r3, [sp, #96]	; 0x60
   13acc:	ldr	r6, [pc, #1000]	; 13ebc <__assert_fail@plt+0x251c>
   13ad0:	vldr	d9, [pc, #856]	; 13e30 <__assert_fail@plt+0x2490>
   13ad4:	add	r3, r6, #96	; 0x60
   13ad8:	str	r3, [sp, #100]	; 0x64
   13adc:	str	sl, [sp, #108]	; 0x6c
   13ae0:	ldr	sl, [sp, #80]	; 0x50
   13ae4:	str	fp, [sp, #104]	; 0x68
   13ae8:	mov	fp, r7
   13aec:	ldr	r7, [sp, #52]	; 0x34
   13af0:	b	13ca8 <__assert_fail@plt+0x2308>
   13af4:	ldr	r3, [sp, #132]	; 0x84
   13af8:	ldrb	r3, [r9, r3]
   13afc:	cmp	r3, #45	; 0x2d
   13b00:	beq	13b1c <__assert_fail@plt+0x217c>
   13b04:	cmp	r3, #46	; 0x2e
   13b08:	bne	13d00 <__assert_fail@plt+0x2360>
   13b0c:	ldr	r3, [pc, #896]	; 13e94 <__assert_fail@plt+0x24f4>
   13b10:	str	r3, [sp, #52]	; 0x34
   13b14:	mov	r5, #0
   13b18:	b	13b74 <__assert_fail@plt+0x21d4>
   13b1c:	ldr	r3, [sp, #124]	; 0x7c
   13b20:	cmp	r3, #0
   13b24:	bne	13b44 <__assert_fail@plt+0x21a4>
   13b28:	ldr	r4, [sp, #56]	; 0x38
   13b2c:	mov	r3, #1
   13b30:	str	r3, [sp, #124]	; 0x7c
   13b34:	ldr	r3, [pc, #860]	; 13e98 <__assert_fail@plt+0x24f8>
   13b38:	str	r3, [sp, #52]	; 0x34
   13b3c:	mov	r5, #0
   13b40:	b	13b84 <__assert_fail@plt+0x21e4>
   13b44:	mov	r2, #5
   13b48:	ldr	r1, [pc, #844]	; 13e9c <__assert_fail@plt+0x24fc>
   13b4c:	mov	r0, #0
   13b50:	bl	11628 <dcgettext@plt>
   13b54:	mov	r2, r0
   13b58:	mov	r1, #0
   13b5c:	mov	r0, r1
   13b60:	bl	116d0 <error@plt>
   13b64:	b	13958 <__assert_fail@plt+0x1fb8>
   13b68:	ldr	r3, [pc, #804]	; 13e94 <__assert_fail@plt+0x24f4>
   13b6c:	str	r3, [sp, #52]	; 0x34
   13b70:	mov	r5, #0
   13b74:	ldr	r0, [sp, #52]	; 0x34
   13b78:	bl	11cd4 <__assert_fail@plt+0x334>
   13b7c:	subs	r4, r0, #0
   13b80:	blt	13d18 <__assert_fail@plt+0x2378>
   13b84:	add	r2, sp, #152	; 0x98
   13b88:	mov	r1, r4
   13b8c:	mov	r0, #3
   13b90:	bl	1167c <__fxstat64@plt>
   13b94:	cmp	r0, #0
   13b98:	beq	13d70 <__assert_fail@plt+0x23d0>
   13b9c:	ldr	r3, [sp, #88]	; 0x58
   13ba0:	ldr	r3, [r3]
   13ba4:	str	r3, [sp, #80]	; 0x50
   13ba8:	ldr	r2, [sp, #52]	; 0x34
   13bac:	mov	r1, #8
   13bb0:	mov	r0, #0
   13bb4:	bl	1a0cc <__assert_fail@plt+0x872c>
   13bb8:	mov	r3, r0
   13bbc:	ldr	r2, [pc, #756]	; 13eb8 <__assert_fail@plt+0x2518>
   13bc0:	ldr	r1, [sp, #80]	; 0x50
   13bc4:	mov	r0, #0
   13bc8:	bl	116d0 <error@plt>
   13bcc:	ldr	r1, [pc, #716]	; 13ea0 <__assert_fail@plt+0x2500>
   13bd0:	mov	r0, r4
   13bd4:	bl	114fc <fdopen@plt>
   13bd8:	subs	r4, r0, #0
   13bdc:	beq	13f58 <__assert_fail@plt+0x25b8>
   13be0:	ldr	r3, [pc, #732]	; 13ec4 <__assert_fail@plt+0x2524>
   13be4:	ldr	r1, [r3]
   13be8:	ldr	r3, [sp, #48]	; 0x30
   13bec:	sub	r0, r3, r1
   13bf0:	add	r1, fp, r1, lsl #2
   13bf4:	mov	r2, #0
   13bf8:	mov	r3, #0
   13bfc:	strd	r2, [sp, #80]	; 0x50
   13c00:	mov	r3, #0
   13c04:	ldr	r2, [sp, #76]	; 0x4c
   13c08:	str	r2, [sp, #44]	; 0x2c
   13c0c:	ldr	r2, [sp, #72]	; 0x48
   13c10:	str	r2, [sp, #40]	; 0x28
   13c14:	ldr	r2, [sp, #68]	; 0x44
   13c18:	str	r2, [sp, #36]	; 0x24
   13c1c:	ldr	r2, [sp, #60]	; 0x3c
   13c20:	str	r2, [sp, #32]
   13c24:	ldr	r2, [sp, #100]	; 0x64
   13c28:	str	r2, [sp, #28]
   13c2c:	str	r8, [sp, #24]
   13c30:	str	r7, [sp, #20]
   13c34:	ldr	r2, [sp, #64]	; 0x40
   13c38:	str	r2, [sp, #16]
   13c3c:	str	sl, [sp, #12]
   13c40:	str	r3, [sp, #8]
   13c44:	ldrd	r2, [sp, #80]	; 0x50
   13c48:	strd	r2, [sp]
   13c4c:	mov	r3, r4
   13c50:	ldr	r2, [sp, #52]	; 0x34
   13c54:	bl	12654 <__assert_fail@plt+0xcb4>
   13c58:	str	r0, [sp, #96]	; 0x60
   13c5c:	mov	r0, r4
   13c60:	bl	11868 <fclose@plt>
   13c64:	cmn	r0, #1
   13c68:	beq	13f88 <__assert_fail@plt+0x25e8>
   13c6c:	cmp	r5, #0
   13c70:	beq	13c7c <__assert_fail@plt+0x22dc>
   13c74:	mov	r0, r5
   13c78:	bl	1b854 <__assert_fail@plt+0x9eb4>
   13c7c:	cmp	r9, #0
   13c80:	beq	13fb8 <__assert_fail@plt+0x2618>
   13c84:	add	r3, sp, #136	; 0x88
   13c88:	str	r3, [sp]
   13c8c:	add	r3, sp, #132	; 0x84
   13c90:	mov	r2, #0
   13c94:	ldr	r1, [pc, #500]	; 13e90 <__assert_fail@plt+0x24f0>
   13c98:	mov	r0, r9
   13c9c:	bl	14700 <__assert_fail@plt+0x2d60>
   13ca0:	cmp	r0, #0
   13ca4:	beq	13fb8 <__assert_fail@plt+0x2618>
   13ca8:	cmp	r8, #0
   13cac:	beq	13cc4 <__assert_fail@plt+0x2324>
   13cb0:	ldrd	r0, [r6, #96]	; 0x60
   13cb4:	ldrd	r2, [r6, #104]	; 0x68
   13cb8:	cmp	r1, r3
   13cbc:	cmpeq	r0, r2
   13cc0:	bls	13fb8 <__assert_fail@plt+0x2618>
   13cc4:	mov	r2, #0
   13cc8:	mov	r3, #0
   13ccc:	strd	r2, [r6, #72]	; 0x48
   13cd0:	strd	r2, [r6, #64]	; 0x40
   13cd4:	strd	r2, [r6, #56]	; 0x38
   13cd8:	strd	r2, [r6, #48]	; 0x30
   13cdc:	strd	r2, [r6, #40]	; 0x28
   13ce0:	strd	r2, [r6, #32]
   13ce4:	cmp	r9, #0
   13ce8:	beq	13d48 <__assert_fail@plt+0x23a8>
   13cec:	ldr	r1, [sp, #136]	; 0x88
   13cf0:	cmp	r1, #1
   13cf4:	beq	13af4 <__assert_fail@plt+0x2154>
   13cf8:	cmp	r1, #0
   13cfc:	beq	13b68 <__assert_fail@plt+0x21c8>
   13d00:	ldr	r0, [sp, #132]	; 0x84
   13d04:	add	r0, r9, r0
   13d08:	bl	115bc <strndup@plt>
   13d0c:	mov	r5, r0
   13d10:	str	r0, [sp, #52]	; 0x34
   13d14:	b	13b74 <__assert_fail@plt+0x21d4>
   13d18:	ldr	r3, [sp, #88]	; 0x58
   13d1c:	ldr	r4, [r3]
   13d20:	ldr	r2, [sp, #52]	; 0x34
   13d24:	mov	r1, #8
   13d28:	mov	r0, #0
   13d2c:	bl	1a0cc <__assert_fail@plt+0x872c>
   13d30:	mov	r3, r0
   13d34:	ldr	r2, [pc, #380]	; 13eb8 <__assert_fail@plt+0x2518>
   13d38:	mov	r1, r4
   13d3c:	mov	r0, #0
   13d40:	bl	116d0 <error@plt>
   13d44:	b	13958 <__assert_fail@plt+0x1fb8>
   13d48:	ldr	r3, [sp, #104]	; 0x68
   13d4c:	cmn	r3, #1
   13d50:	beq	13fb8 <__assert_fail@plt+0x2618>
   13d54:	ldr	r2, [r6, #88]	; 0x58
   13d58:	str	r2, [sp, #52]	; 0x34
   13d5c:	mov	r4, r3
   13d60:	ldr	r3, [sp, #108]	; 0x6c
   13d64:	str	r3, [sp, #104]	; 0x68
   13d68:	mov	r5, #0
   13d6c:	b	13b84 <__assert_fail@plt+0x21e4>
   13d70:	ldrd	r2, [sp, #200]	; 0xc8
   13d74:	strd	r2, [sp, #80]	; 0x50
   13d78:	ldr	r3, [sp, #232]	; 0xe8
   13d7c:	str	r3, [sp, #144]	; 0x90
   13d80:	ldr	r3, [sp, #236]	; 0xec
   13d84:	str	r3, [sp, #148]	; 0x94
   13d88:	add	r0, sp, #140	; 0x8c
   13d8c:	bl	11610 <time@plt>
   13d90:	cmn	r0, #1
   13d94:	beq	13dfc <__assert_fail@plt+0x245c>
   13d98:	ldr	r1, [sp, #232]	; 0xe8
   13d9c:	ldr	r0, [sp, #140]	; 0x8c
   13da0:	bl	11850 <difftime@plt>
   13da4:	vmov.f64	d8, d0
   13da8:	ldr	r3, [pc, #256]	; 13eb0 <__assert_fail@plt+0x2510>
   13dac:	ldr	r2, [r3, #8]
   13db0:	ldr	r3, [pc, #236]	; 13ea4 <__assert_fail@plt+0x2504>
   13db4:	mul	r3, r3, r2
   13db8:	vmov	s15, r3
   13dbc:	vcvt.f64.u32	d7, s15
   13dc0:	vcmpe.f64	d0, d7
   13dc4:	vmrs	APSR_nzcv, fpscr
   13dc8:	bgt	13ecc <__assert_fail@plt+0x252c>
   13dcc:	ldr	r1, [pc, #204]	; 13ea0 <__assert_fail@plt+0x2500>
   13dd0:	mov	r0, r4
   13dd4:	bl	114fc <fdopen@plt>
   13dd8:	subs	r4, r0, #0
   13ddc:	beq	13f58 <__assert_fail@plt+0x25b8>
   13de0:	ldr	r3, [pc, #220]	; 13ec4 <__assert_fail@plt+0x2524>
   13de4:	ldr	r1, [r3]
   13de8:	ldr	r3, [sp, #48]	; 0x30
   13dec:	sub	r0, r3, r1
   13df0:	add	r1, fp, r1, lsl #2
   13df4:	add	r3, sp, #144	; 0x90
   13df8:	b	13c04 <__assert_fail@plt+0x2264>
   13dfc:	ldr	r3, [sp, #88]	; 0x58
   13e00:	ldr	r3, [r3]
   13e04:	str	r3, [sp, #96]	; 0x60
   13e08:	mov	r2, #5
   13e0c:	ldr	r1, [pc, #148]	; 13ea8 <__assert_fail@plt+0x2508>
   13e10:	mov	r0, #0
   13e14:	bl	11628 <dcgettext@plt>
   13e18:	mov	r2, r0
   13e1c:	ldr	r1, [sp, #96]	; 0x60
   13e20:	mov	r0, #0
   13e24:	bl	116d0 <error@plt>
   13e28:	b	13dcc <__assert_fail@plt+0x242c>
   13e2c:	nop			; (mov r0, r0)
   13e30:	andeq	r0, r0, r0
   13e34:	rscsmi	r1, r5, r0, lsl #16
   13e38:	andeq	fp, r2, r0, lsr r4
   13e3c:	andeq	fp, r2, ip, lsl ip
   13e40:	andeq	ip, r2, r4, ror #3
   13e44:	muleq	r2, r8, lr
   13e48:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e4c:	andeq	r1, r1, r8, lsl sp
   13e50:	ldrdeq	fp, [r2], -r4
   13e54:	andeq	fp, r2, ip, lsr r4
   13e58:	andeq	sp, r3, r0, lsr #4
   13e5c:	andeq	fp, r2, r0, ror #29
   13e60:	andeq	fp, r2, r8, lsl #28
   13e64:	andeq	fp, r2, ip, asr #28
   13e68:	andeq	fp, r2, r8, lsr #28
   13e6c:	andeq	fp, r2, ip, ror #28
   13e70:	muleq	r2, r0, lr
   13e74:			; <UNDEFINED> instruction: 0x0002beb0
   13e78:	andeq	fp, r2, ip, lsr #11
   13e7c:	andeq	r0, r0, sp, asr #12
   13e80:	andeq	fp, r2, r8, lsl #15
   13e84:	strdeq	fp, [r2], -r8
   13e88:	andeq	fp, r2, r8, lsl #30
   13e8c:	andeq	fp, r2, r8, asr #30
   13e90:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   13e94:	andeq	fp, r2, r8, ror #27
   13e98:	andeq	fp, r2, r0, lsl #28
   13e9c:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   13ea0:	andeq	ip, r2, ip, lsr #3
   13ea4:	andeq	r5, r1, r0, lsl #3
   13ea8:	ldrdeq	fp, [r2], -ip
   13eac:	strdeq	fp, [r2], -r4
   13eb0:	andeq	sp, r3, ip, lsr #3
   13eb4:			; <UNDEFINED> instruction: 0x0002b5b8
   13eb8:	andeq	ip, r2, r8, lsr #9
   13ebc:	andeq	sp, r3, r8, lsr #4
   13ec0:	andeq	ip, r2, r8, lsr r0
   13ec4:	andeq	sp, r3, r0, lsl r2
   13ec8:	andeq	fp, r2, ip, ror pc
   13ecc:	mov	r2, #5
   13ed0:	ldr	r1, [pc, #-44]	; 13eac <__assert_fail@plt+0x250c>
   13ed4:	mov	r0, #0
   13ed8:	bl	11628 <dcgettext@plt>
   13edc:	str	r0, [sp, #96]	; 0x60
   13ee0:	ldr	r2, [sp, #52]	; 0x34
   13ee4:	mov	r1, #8
   13ee8:	mov	r0, #0
   13eec:	bl	1a0cc <__assert_fail@plt+0x872c>
   13ef0:	str	r0, [sp, #112]	; 0x70
   13ef4:	ldr	r3, [pc, #-76]	; 13eb0 <__assert_fail@plt+0x2510>
   13ef8:	ldr	r1, [r3, #8]
   13efc:	str	r1, [sp, #116]	; 0x74
   13f00:	mov	r2, #5
   13f04:	ldr	r1, [pc, #-88]	; 13eb4 <__assert_fail@plt+0x2514>
   13f08:	mov	r0, #0
   13f0c:	bl	11628 <dcgettext@plt>
   13f10:	str	r0, [sp, #120]	; 0x78
   13f14:	mov	r2, #5
   13f18:	ldr	r1, [pc, #-108]	; 13eb4 <__assert_fail@plt+0x2514>
   13f1c:	mov	r0, #0
   13f20:	bl	11628 <dcgettext@plt>
   13f24:	str	r0, [sp, #16]
   13f28:	vdiv.f64	d7, d8, d9
   13f2c:	vstr	d7, [sp, #8]
   13f30:	ldr	ip, [sp, #120]	; 0x78
   13f34:	str	ip, [sp, #4]
   13f38:	ldr	r1, [sp, #116]	; 0x74
   13f3c:	str	r1, [sp]
   13f40:	ldr	r3, [sp, #112]	; 0x70
   13f44:	ldr	r2, [sp, #96]	; 0x60
   13f48:	mov	r1, #0
   13f4c:	mov	r0, r1
   13f50:	bl	116d0 <error@plt>
   13f54:	b	13dcc <__assert_fail@plt+0x242c>
   13f58:	ldr	r3, [sp, #88]	; 0x58
   13f5c:	ldr	r4, [r3]
   13f60:	ldr	r2, [sp, #52]	; 0x34
   13f64:	mov	r1, #8
   13f68:	mov	r0, #0
   13f6c:	bl	1a0cc <__assert_fail@plt+0x872c>
   13f70:	mov	r3, r0
   13f74:	ldr	r2, [pc, #-196]	; 13eb8 <__assert_fail@plt+0x2518>
   13f78:	mov	r1, r4
   13f7c:	mov	r0, #0
   13f80:	bl	116d0 <error@plt>
   13f84:	b	13958 <__assert_fail@plt+0x1fb8>
   13f88:	ldr	r3, [sp, #88]	; 0x58
   13f8c:	ldr	r4, [r3]
   13f90:	ldr	r2, [sp, #52]	; 0x34
   13f94:	mov	r1, #8
   13f98:	mov	r0, #0
   13f9c:	bl	1a0cc <__assert_fail@plt+0x872c>
   13fa0:	mov	r3, r0
   13fa4:	ldr	r2, [pc, #-244]	; 13eb8 <__assert_fail@plt+0x2518>
   13fa8:	mov	r1, r4
   13fac:	mov	r0, #0
   13fb0:	bl	116d0 <error@plt>
   13fb4:	b	13958 <__assert_fail@plt+0x1fb8>
   13fb8:	ldr	r3, [sp, #92]	; 0x5c
   13fbc:	cmp	r3, #0
   13fc0:	bne	13ffc <__assert_fail@plt+0x265c>
   13fc4:	ldr	r3, [sp, #96]	; 0x60
   13fc8:	cmp	r3, #0
   13fcc:	bne	13958 <__assert_fail@plt+0x1fb8>
   13fd0:	cmp	r8, #0
   13fd4:	beq	13fe8 <__assert_fail@plt+0x2648>
   13fd8:	ldr	r3, [pc, #-292]	; 13ebc <__assert_fail@plt+0x251c>
   13fdc:	ldrd	r2, [r3, #96]	; 0x60
   13fe0:	orrs	r3, r2, r3
   13fe4:	beq	13958 <__assert_fail@plt+0x1fb8>
   13fe8:	ldr	r3, [sp, #60]	; 0x3c
   13fec:	clz	r3, r3
   13ff0:	lsr	r3, r3, #5
   13ff4:	str	r3, [sp, #56]	; 0x38
   13ff8:	b	13958 <__assert_fail@plt+0x1fb8>
   13ffc:	ldr	r1, [sp, #96]	; 0x60
   14000:	ldr	r0, [pc, #-328]	; 13ec0 <__assert_fail@plt+0x2520>
   14004:	bl	11550 <printf@plt>
   14008:	b	13fc4 <__assert_fail@plt+0x2624>
   1400c:	ldr	r3, [sp, #60]	; 0x3c
   14010:	cmp	r3, #0
   14014:	bne	13a60 <__assert_fail@plt+0x20c0>
   14018:	ldr	r3, [pc, #-348]	; 13ec4 <__assert_fail@plt+0x2524>
   1401c:	ldr	r3, [r3]
   14020:	ldr	r2, [sp, #48]	; 0x30
   14024:	cmp	r2, r3
   14028:	movne	r3, #1
   1402c:	strne	r3, [sp, #64]	; 0x40
   14030:	bne	13a80 <__assert_fail@plt+0x20e0>
   14034:	mov	r2, #5
   14038:	ldr	r1, [pc, #-376]	; 13ec8 <__assert_fail@plt+0x2528>
   1403c:	mov	r0, #0
   14040:	bl	11628 <dcgettext@plt>
   14044:	mov	r2, r0
   14048:	mov	r1, #0
   1404c:	mov	r0, r1
   14050:	bl	116d0 <error@plt>
   14054:	mov	r0, #1
   14058:	bl	11d30 <__assert_fail@plt+0x390>
   1405c:	push	{r4, r5, r6, r7, lr}
   14060:	sub	sp, sp, #12
   14064:	mov	r4, r0
   14068:	mov	r5, r1
   1406c:	mov	r7, r2
   14070:	mov	r6, r3
   14074:	bl	118e0 <clearerr@plt>
   14078:	mov	r3, r4
   1407c:	mov	r2, #1
   14080:	mov	r1, #4
   14084:	add	r0, sp, r1
   14088:	bl	116ac <fread@plt>
   1408c:	cmp	r0, #1
   14090:	beq	14108 <__assert_fail@plt+0x2768>
   14094:	mov	r2, r5
   14098:	mov	r1, #8
   1409c:	mov	r0, #0
   140a0:	bl	1a0cc <__assert_fail@plt+0x872c>
   140a4:	mov	r5, r0
   140a8:	mov	r0, r4
   140ac:	bl	11790 <feof@plt>
   140b0:	cmp	r0, #0
   140b4:	beq	140dc <__assert_fail@plt+0x273c>
   140b8:	mov	r2, #5
   140bc:	ldr	r1, [pc, #208]	; 14194 <__assert_fail@plt+0x27f4>
   140c0:	mov	r0, #0
   140c4:	bl	11628 <dcgettext@plt>
   140c8:	mov	r3, r5
   140cc:	mov	r2, r0
   140d0:	mov	r1, #0
   140d4:	mov	r0, #1
   140d8:	bl	116d0 <error@plt>
   140dc:	bl	117d8 <__errno_location@plt>
   140e0:	ldr	r4, [r0]
   140e4:	mov	r2, #5
   140e8:	ldr	r1, [pc, #168]	; 14198 <__assert_fail@plt+0x27f8>
   140ec:	mov	r0, #0
   140f0:	bl	11628 <dcgettext@plt>
   140f4:	mov	r3, r5
   140f8:	mov	r2, r0
   140fc:	mov	r1, r4
   14100:	mov	r0, #1
   14104:	bl	116d0 <error@plt>
   14108:	ldr	r0, [sp, #4]
   1410c:	rev	r4, r0
   14110:	ldr	r3, [r6]
   14114:	cmp	r3, #0
   14118:	bne	14184 <__assert_fail@plt+0x27e4>
   1411c:	cmp	r7, r0
   14120:	blt	14134 <__assert_fail@plt+0x2794>
   14124:	cmp	r7, r4
   14128:	movlt	r3, #1
   1412c:	strlt	r3, [r6]
   14130:	b	1418c <__assert_fail@plt+0x27ec>
   14134:	cmp	r7, r4
   14138:	blt	1418c <__assert_fail@plt+0x27ec>
   1413c:	mov	r2, #5
   14140:	ldr	r1, [pc, #84]	; 1419c <__assert_fail@plt+0x27fc>
   14144:	mov	r0, #0
   14148:	bl	11628 <dcgettext@plt>
   1414c:	mov	r7, r0
   14150:	mov	r2, r5
   14154:	mov	r1, #8
   14158:	mov	r0, #0
   1415c:	bl	1a0cc <__assert_fail@plt+0x872c>
   14160:	mov	r3, r0
   14164:	mov	r2, r7
   14168:	mov	r1, #0
   1416c:	mov	r0, r1
   14170:	bl	116d0 <error@plt>
   14174:	mov	r3, #2
   14178:	str	r3, [r6]
   1417c:	mov	r0, r4
   14180:	b	1418c <__assert_fail@plt+0x27ec>
   14184:	cmp	r3, #2
   14188:	moveq	r0, r4
   1418c:	add	sp, sp, #12
   14190:	pop	{r4, r5, r6, r7, pc}
   14194:	andeq	ip, r2, r4, lsr r1
   14198:	andeq	ip, r2, ip, asr #2
   1419c:	andeq	ip, r2, ip, ror #2
   141a0:	push	{r4, r5, r6, r7, r8, lr}
   141a4:	sub	sp, sp, #16
   141a8:	mov	r5, r0
   141ac:	ldr	r3, [pc, #124]	; 14230 <__assert_fail@plt+0x2890>
   141b0:	ldr	r0, [r3]
   141b4:	bl	1b7f0 <__assert_fail@plt+0x9e50>
   141b8:	ldr	r3, [pc, #116]	; 14234 <__assert_fail@plt+0x2894>
   141bc:	ldr	r4, [r3]
   141c0:	ldr	r3, [pc, #112]	; 14238 <__assert_fail@plt+0x2898>
   141c4:	ldr	r6, [r3]
   141c8:	mov	r2, #5
   141cc:	ldr	r1, [pc, #104]	; 1423c <__assert_fail@plt+0x289c>
   141d0:	mov	r0, #0
   141d4:	bl	11628 <dcgettext@plt>
   141d8:	mov	r7, r0
   141dc:	mov	r2, #5
   141e0:	ldr	r1, [pc, #88]	; 14240 <__assert_fail@plt+0x28a0>
   141e4:	mov	r0, #0
   141e8:	bl	11628 <dcgettext@plt>
   141ec:	mov	r8, r0
   141f0:	mov	r2, #5
   141f4:	ldr	r1, [pc, #72]	; 14244 <__assert_fail@plt+0x28a4>
   141f8:	mov	r0, #0
   141fc:	bl	11628 <dcgettext@plt>
   14200:	mov	r3, #0
   14204:	str	r3, [sp, #12]
   14208:	str	r0, [sp, #8]
   1420c:	str	r8, [sp, #4]
   14210:	str	r7, [sp]
   14214:	mov	r3, r6
   14218:	ldr	r2, [pc, #40]	; 14248 <__assert_fail@plt+0x28a8>
   1421c:	mov	r1, r5
   14220:	mov	r0, r4
   14224:	bl	1a83c <__assert_fail@plt+0x8e9c>
   14228:	add	sp, sp, #16
   1422c:	pop	{r4, r5, r6, r7, r8, pc}
   14230:	andeq	sp, r3, r8, lsl r2
   14234:	andeq	sp, r3, ip, lsl r2
   14238:			; <UNDEFINED> instruction: 0x0003d1b8
   1423c:			; <UNDEFINED> instruction: 0x0002c1b0
   14240:	andeq	ip, r2, r0, asr #3
   14244:	ldrdeq	ip, [r2], -r0
   14248:	andeq	ip, r2, r0, ror #3
   1424c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14250:	sub	sp, sp, #8192	; 0x2000
   14254:	sub	sp, sp, #12
   14258:	mov	r4, r0
   1425c:	mov	r5, r3
   14260:	cmp	r2, #0
   14264:	beq	14334 <__assert_fail@plt+0x2994>
   14268:	mov	r7, r1
   1426c:	str	r1, [sp]
   14270:	mvn	r3, #0
   14274:	add	r2, sp, #8192	; 0x2000
   14278:	add	r2, r2, #40	; 0x28
   1427c:	ldr	r2, [r2]
   14280:	mov	r1, #8192	; 0x2000
   14284:	add	r0, sp, #8
   14288:	bl	19e6c <__assert_fail@plt+0x84cc>
   1428c:	mov	r6, r0
   14290:	cmp	r0, #8192	; 0x2000
   14294:	bcs	142c8 <__assert_fail@plt+0x2928>
   14298:	add	r7, sp, #8
   1429c:	mov	r1, r0
   142a0:	mov	r0, r7
   142a4:	bl	1435c <__assert_fail@plt+0x29bc>
   142a8:	mov	r3, #0
   142ac:	strb	r3, [r7, r0]
   142b0:	mov	r2, r7
   142b4:	mov	r1, r5
   142b8:	mov	r0, r4
   142bc:	bl	117c0 <fprintf@plt>
   142c0:	mov	r4, r0
   142c4:	b	1434c <__assert_fail@plt+0x29ac>
   142c8:	add	r9, r0, #1
   142cc:	mov	r0, r9
   142d0:	bl	1a8f0 <__assert_fail@plt+0x8f50>
   142d4:	mov	r8, r0
   142d8:	str	r7, [sp]
   142dc:	mvn	r3, #0
   142e0:	add	r2, sp, #8192	; 0x2000
   142e4:	add	r2, r2, #40	; 0x28
   142e8:	ldr	r2, [r2]
   142ec:	mov	r1, r9
   142f0:	bl	19e6c <__assert_fail@plt+0x84cc>
   142f4:	mov	r1, r6
   142f8:	mov	r0, r8
   142fc:	bl	1435c <__assert_fail@plt+0x29bc>
   14300:	mov	r3, #0
   14304:	strb	r3, [r8, r0]
   14308:	mov	r2, r8
   1430c:	mov	r1, r5
   14310:	mov	r0, r4
   14314:	bl	117c0 <fprintf@plt>
   14318:	mov	r4, r0
   1431c:	add	r3, sp, #8
   14320:	cmp	r8, r3
   14324:	beq	1434c <__assert_fail@plt+0x29ac>
   14328:	mov	r0, r8
   1432c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   14330:	b	1434c <__assert_fail@plt+0x29ac>
   14334:	add	r3, sp, #8192	; 0x2000
   14338:	add	r3, r3, #40	; 0x28
   1433c:	ldr	r2, [r3]
   14340:	mov	r1, r5
   14344:	bl	117c0 <fprintf@plt>
   14348:	mov	r4, r0
   1434c:	mov	r0, r4
   14350:	add	sp, sp, #8192	; 0x2000
   14354:	add	sp, sp, #12
   14358:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1435c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14360:	sub	sp, sp, #20
   14364:	mov	sl, r0
   14368:	mov	r8, r1
   1436c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   14370:	cmp	r0, #1
   14374:	bls	14398 <__assert_fail@plt+0x29f8>
   14378:	add	r8, sl, r8
   1437c:	cmp	sl, r8
   14380:	bcs	144d4 <__assert_fail@plt+0x2b34>
   14384:	mov	r6, sl
   14388:	mov	r4, sl
   1438c:	mov	fp, #0
   14390:	mov	r9, #63	; 0x3f
   14394:	b	14408 <__assert_fail@plt+0x2a68>
   14398:	add	r4, sl, r8
   1439c:	cmp	sl, r4
   143a0:	bcs	144e4 <__assert_fail@plt+0x2b44>
   143a4:	bl	11778 <__ctype_b_loc@plt>
   143a8:	mov	r1, #63	; 0x3f
   143ac:	ldrb	r3, [sl]
   143b0:	ldr	r2, [r0]
   143b4:	lsl	r3, r3, #1
   143b8:	ldrh	r3, [r2, r3]
   143bc:	tst	r3, #16384	; 0x4000
   143c0:	strbeq	r1, [sl]
   143c4:	add	sl, sl, #1
   143c8:	cmp	r4, sl
   143cc:	bne	143ac <__assert_fail@plt+0x2a0c>
   143d0:	mov	r0, r8
   143d4:	b	144dc <__assert_fail@plt+0x2b3c>
   143d8:	cmp	r3, #65	; 0x41
   143dc:	bcc	14428 <__assert_fail@plt+0x2a88>
   143e0:	cmp	r3, #95	; 0x5f
   143e4:	bls	143f4 <__assert_fail@plt+0x2a54>
   143e8:	sub	r2, r3, #97	; 0x61
   143ec:	cmp	r2, #29
   143f0:	bhi	14428 <__assert_fail@plt+0x2a88>
   143f4:	add	r4, r4, #1
   143f8:	strb	r3, [r6]
   143fc:	add	r6, r6, #1
   14400:	cmp	r8, r4
   14404:	bls	144d8 <__assert_fail@plt+0x2b38>
   14408:	ldrb	r3, [r4]
   1440c:	cmp	r3, #63	; 0x3f
   14410:	bhi	143d8 <__assert_fail@plt+0x2a38>
   14414:	cmp	r3, #37	; 0x25
   14418:	bcs	143f4 <__assert_fail@plt+0x2a54>
   1441c:	sub	r2, r3, #32
   14420:	cmp	r2, #3
   14424:	bls	143f4 <__assert_fail@plt+0x2a54>
   14428:	add	r7, sp, #16
   1442c:	str	fp, [r7, #-8]!
   14430:	str	fp, [sp, #12]
   14434:	b	14474 <__assert_fail@plt+0x2ad4>
   14438:	add	r4, r4, #1
   1443c:	strb	r9, [r6]
   14440:	add	r6, r6, #1
   14444:	b	14400 <__assert_fail@plt+0x2a60>
   14448:	strb	r9, [r6]
   1444c:	add	r6, r6, #1
   14450:	mov	r4, r8
   14454:	b	14400 <__assert_fail@plt+0x2a60>
   14458:	add	r4, r4, r5
   1445c:	strb	r9, [r6]
   14460:	add	r6, r6, #1
   14464:	mov	r0, r7
   14468:	bl	11604 <mbsinit@plt>
   1446c:	cmp	r0, #0
   14470:	bne	14400 <__assert_fail@plt+0x2a60>
   14474:	mov	r3, r7
   14478:	sub	r2, r8, r4
   1447c:	mov	r1, r4
   14480:	add	r0, sp, #4
   14484:	bl	1b984 <__assert_fail@plt+0x9fe4>
   14488:	mov	r5, r0
   1448c:	cmn	r0, #1
   14490:	beq	14438 <__assert_fail@plt+0x2a98>
   14494:	cmn	r0, #2
   14498:	beq	14448 <__assert_fail@plt+0x2aa8>
   1449c:	cmp	r0, #0
   144a0:	moveq	r5, #1
   144a4:	ldr	r0, [sp, #4]
   144a8:	bl	11574 <wcwidth@plt>
   144ac:	cmp	r0, #0
   144b0:	subge	r3, r6, #1
   144b4:	addge	r1, r4, r5
   144b8:	blt	14458 <__assert_fail@plt+0x2ab8>
   144bc:	ldrb	r2, [r4], #1
   144c0:	strb	r2, [r3, #1]!
   144c4:	cmp	r1, r4
   144c8:	bne	144bc <__assert_fail@plt+0x2b1c>
   144cc:	add	r6, r6, r5
   144d0:	b	14464 <__assert_fail@plt+0x2ac4>
   144d4:	mov	r6, sl
   144d8:	sub	r0, r6, sl
   144dc:	add	sp, sp, #20
   144e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e4:	mov	r0, r8
   144e8:	b	144dc <__assert_fail@plt+0x2b3c>
   144ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144f0:	sub	sp, sp, #12
   144f4:	mov	r8, r0
   144f8:	mov	r4, #0
   144fc:	mov	r7, r4
   14500:	mov	r5, r4
   14504:	ldr	r9, [pc, #268]	; 14618 <__assert_fail@plt+0x2c78>
   14508:	ldr	r6, [r4, r9]
   1450c:	mov	r1, r8
   14510:	mov	r0, r6
   14514:	bl	11544 <strcmp@plt>
   14518:	cmp	r0, #0
   1451c:	beq	14600 <__assert_fail@plt+0x2c60>
   14520:	mov	r0, r6
   14524:	bl	1a36c <__assert_fail@plt+0x89cc>
   14528:	bl	117a8 <strlen@plt>
   1452c:	add	r0, r0, #2
   14530:	add	r7, r7, r0
   14534:	add	r5, r5, #1
   14538:	add	r4, r4, #12
   1453c:	cmp	r5, #13
   14540:	bne	14508 <__assert_fail@plt+0x2b68>
   14544:	add	r0, r7, #1
   14548:	bl	1a8f0 <__assert_fail@plt+0x8f50>
   1454c:	mov	fp, r0
   14550:	mov	r4, r0
   14554:	mov	r6, #0
   14558:	mov	r5, #1
   1455c:	ldr	sl, [pc, #180]	; 14618 <__assert_fail@plt+0x2c78>
   14560:	ldr	r9, [pc, #180]	; 1461c <__assert_fail@plt+0x2c7c>
   14564:	ldr	r7, [pc, #180]	; 14620 <__assert_fail@plt+0x2c80>
   14568:	b	14590 <__assert_fail@plt+0x2bf0>
   1456c:	ldr	r0, [sl, r6]
   14570:	bl	1a36c <__assert_fail@plt+0x89cc>
   14574:	mov	r2, r0
   14578:	mov	r1, r9
   1457c:	mov	r0, r4
   14580:	bl	118ec <sprintf@plt>
   14584:	add	r4, r4, r0
   14588:	add	r5, r5, #1
   1458c:	add	r6, r6, #12
   14590:	cmp	r5, #1
   14594:	beq	1456c <__assert_fail@plt+0x2bcc>
   14598:	ldrh	r2, [r7]
   1459c:	ldrb	r3, [r7, #2]
   145a0:	strh	r2, [r4]
   145a4:	strb	r3, [r4, #2]!
   145a8:	ldr	r0, [sl, r6]
   145ac:	bl	1a36c <__assert_fail@plt+0x89cc>
   145b0:	mov	r2, r0
   145b4:	mov	r1, r9
   145b8:	mov	r0, r4
   145bc:	bl	118ec <sprintf@plt>
   145c0:	add	r4, r4, r0
   145c4:	cmp	r5, #12
   145c8:	bls	14588 <__assert_fail@plt+0x2be8>
   145cc:	mov	r2, #5
   145d0:	ldr	r1, [pc, #76]	; 14624 <__assert_fail@plt+0x2c84>
   145d4:	mov	r0, #0
   145d8:	bl	11628 <dcgettext@plt>
   145dc:	mov	r4, r0
   145e0:	mov	r0, r8
   145e4:	bl	1a36c <__assert_fail@plt+0x89cc>
   145e8:	str	fp, [sp]
   145ec:	mov	r3, r0
   145f0:	mov	r2, r4
   145f4:	mov	r1, #0
   145f8:	mov	r0, #1
   145fc:	bl	116d0 <error@plt>
   14600:	add	r5, r5, r5, lsl #1
   14604:	ldr	r3, [pc, #12]	; 14618 <__assert_fail@plt+0x2c78>
   14608:	add	r5, r3, r5, lsl #2
   1460c:	ldr	r0, [r5, #8]
   14610:	add	sp, sp, #12
   14614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14618:	andeq	ip, r2, r0, lsl #4
   1461c:	andeq	ip, r2, r8, lsr #9
   14620:	muleq	r2, ip, r2
   14624:	andeq	ip, r2, r0, lsr #5
   14628:	cmp	r0, #12
   1462c:	addls	r0, r0, r0, lsl #1
   14630:	ldrls	r3, [pc, #8]	; 14640 <__assert_fail@plt+0x2ca0>
   14634:	ldrls	r0, [r3, r0, lsl #2]
   14638:	movhi	r0, #0
   1463c:	bx	lr
   14640:	andeq	ip, r2, r0, lsl #4
   14644:	cmp	r0, #12
   14648:	addls	r0, r0, r0, lsl #1
   1464c:	ldrls	r3, [pc, #12]	; 14660 <__assert_fail@plt+0x2cc0>
   14650:	addls	r0, r3, r0, lsl #2
   14654:	ldrls	r0, [r0, #8]
   14658:	mvnhi	r0, #0
   1465c:	bx	lr
   14660:	andeq	ip, r2, r0, lsl #4
   14664:	cmp	r0, #12
   14668:	addls	r0, r0, r0, lsl #1
   1466c:	ldrls	r3, [pc, #12]	; 14680 <__assert_fail@plt+0x2ce0>
   14670:	addls	r0, r3, r0, lsl #2
   14674:	ldrls	r0, [r0, #4]
   14678:	movhi	r0, #0
   1467c:	bx	lr
   14680:	andeq	ip, r2, r0, lsl #4
   14684:	cmp	r0, #12
   14688:	bhi	146ec <__assert_fail@plt+0x2d4c>
   1468c:	push	{lr}		; (str lr, [sp, #-4]!)
   14690:	add	r3, r0, r0, lsl #1
   14694:	ldr	r2, [pc, #96]	; 146fc <__assert_fail@plt+0x2d5c>
   14698:	add	r3, r2, r3, lsl #2
   1469c:	ldr	lr, [r3, #8]
   146a0:	cmp	r0, #0
   146a4:	beq	146f4 <__assert_fail@plt+0x2d54>
   146a8:	mov	r3, r2
   146ac:	mov	r2, #0
   146b0:	b	146c4 <__assert_fail@plt+0x2d24>
   146b4:	add	r2, r2, #1
   146b8:	add	r3, r3, #12
   146bc:	cmp	r0, r2
   146c0:	beq	146e4 <__assert_fail@plt+0x2d44>
   146c4:	ldr	ip, [r3, #4]
   146c8:	tst	r1, ip
   146cc:	beq	146b4 <__assert_fail@plt+0x2d14>
   146d0:	ldr	ip, [r3, #8]
   146d4:	cmp	lr, ip
   146d8:	bne	146b4 <__assert_fail@plt+0x2d14>
   146dc:	mov	r0, r2
   146e0:	pop	{pc}		; (ldr pc, [sp], #4)
   146e4:	mvn	r0, #0
   146e8:	pop	{pc}		; (ldr pc, [sp], #4)
   146ec:	mvn	r0, #0
   146f0:	bx	lr
   146f4:	mvn	r0, #0
   146f8:	pop	{pc}		; (ldr pc, [sp], #4)
   146fc:	andeq	ip, r2, r0, lsl #4
   14700:	push	{r4, r5, r6, lr}
   14704:	ldr	r5, [sp, #16]
   14708:	cmp	r2, #0
   1470c:	beq	14748 <__assert_fail@plt+0x2da8>
   14710:	mov	r2, #0
   14714:	str	r2, [r3]
   14718:	str	r2, [r5]
   1471c:	ldr	r4, [r3]
   14720:	add	r4, r0, r4
   14724:	ldrb	r3, [r1]
   14728:	cmp	r3, #0
   1472c:	beq	14770 <__assert_fail@plt+0x2dd0>
   14730:	mov	r0, r4
   14734:	bl	11904 <strpbrk@plt>
   14738:	cmp	r0, #0
   1473c:	beq	14770 <__assert_fail@plt+0x2dd0>
   14740:	sub	r0, r0, r4
   14744:	b	14778 <__assert_fail@plt+0x2dd8>
   14748:	ldr	ip, [r3]
   1474c:	ldr	lr, [r5]
   14750:	add	ip, ip, lr
   14754:	str	ip, [r3]
   14758:	ldrb	lr, [r0, ip]
   1475c:	cmp	lr, #0
   14760:	beq	14784 <__assert_fail@plt+0x2de4>
   14764:	add	ip, ip, #1
   14768:	str	ip, [r3]
   1476c:	b	1471c <__assert_fail@plt+0x2d7c>
   14770:	mov	r0, r4
   14774:	bl	117a8 <strlen@plt>
   14778:	str	r0, [r5]
   1477c:	mov	r0, #1
   14780:	pop	{r4, r5, r6, pc}
   14784:	mov	r0, r2
   14788:	pop	{r4, r5, r6, pc}
   1478c:	push	{r4, r5, lr}
   14790:	sub	sp, sp, #20
   14794:	mov	r4, r0
   14798:	mov	r5, r1
   1479c:	mov	r2, #5
   147a0:	ldr	r1, [pc, #56]	; 147e0 <__assert_fail@plt+0x2e40>
   147a4:	mov	r0, #0
   147a8:	bl	11628 <dcgettext@plt>
   147ac:	ldr	r3, [pc, #48]	; 147e4 <__assert_fail@plt+0x2e44>
   147b0:	str	r3, [sp, #8]
   147b4:	ldr	r3, [pc, #44]	; 147e8 <__assert_fail@plt+0x2e48>
   147b8:	str	r3, [sp, #4]
   147bc:	ldr	r3, [pc, #40]	; 147ec <__assert_fail@plt+0x2e4c>
   147c0:	str	r3, [sp]
   147c4:	mov	r3, r5
   147c8:	ldr	r2, [pc, #32]	; 147f0 <__assert_fail@plt+0x2e50>
   147cc:	mov	r1, r0
   147d0:	mov	r0, r4
   147d4:	bl	117c0 <fprintf@plt>
   147d8:	add	sp, sp, #20
   147dc:	pop	{r4, r5, pc}
   147e0:	andeq	ip, r2, r8, asr r3
   147e4:	andeq	ip, r2, r0, asr r4
   147e8:	andeq	ip, r2, r8, ror #8
   147ec:	andeq	ip, r2, r0, ror #3
   147f0:	andeq	ip, r2, r8, lsr #8
   147f4:	ldrb	r3, [r0]
   147f8:	cmp	r3, #47	; 0x2f
   147fc:	bne	1480c <__assert_fail@plt+0x2e6c>
   14800:	ldrb	r3, [r0, #1]!
   14804:	cmp	r3, #47	; 0x2f
   14808:	beq	14800 <__assert_fail@plt+0x2e60>
   1480c:	ldrb	r2, [r0]
   14810:	cmp	r2, #0
   14814:	bxeq	lr
   14818:	push	{lr}		; (str lr, [sp, #-4]!)
   1481c:	mov	r1, r0
   14820:	mov	r3, #0
   14824:	mov	lr, #1
   14828:	mov	ip, r3
   1482c:	b	1483c <__assert_fail@plt+0x2e9c>
   14830:	ldrb	r2, [r1, #1]!
   14834:	cmp	r2, #0
   14838:	beq	14858 <__assert_fail@plt+0x2eb8>
   1483c:	cmp	r2, #47	; 0x2f
   14840:	moveq	r3, lr
   14844:	beq	14830 <__assert_fail@plt+0x2e90>
   14848:	cmp	r3, #0
   1484c:	movne	r0, r1
   14850:	movne	r3, ip
   14854:	b	14830 <__assert_fail@plt+0x2e90>
   14858:	pop	{pc}		; (ldr pc, [sp], #4)
   1485c:	push	{r4, lr}
   14860:	mov	r4, r0
   14864:	bl	117a8 <strlen@plt>
   14868:	cmp	r0, #1
   1486c:	popls	{r4, pc}
   14870:	sub	r3, r0, #1
   14874:	add	r2, r4, r3
   14878:	ldrb	r1, [r4, r3]
   1487c:	cmp	r1, #47	; 0x2f
   14880:	popne	{r4, pc}
   14884:	cmp	r3, #1
   14888:	beq	148ac <__assert_fail@plt+0x2f0c>
   1488c:	sub	r0, r3, #1
   14890:	ldrb	r1, [r2, #-1]!
   14894:	cmp	r1, #47	; 0x2f
   14898:	beq	148a4 <__assert_fail@plt+0x2f04>
   1489c:	mov	r0, r3
   148a0:	pop	{r4, pc}
   148a4:	mov	r3, r0
   148a8:	b	14884 <__assert_fail@plt+0x2ee4>
   148ac:	mov	r0, #1
   148b0:	pop	{r4, pc}
   148b4:	ldr	r3, [pc, #4]	; 148c0 <__assert_fail@plt+0x2f20>
   148b8:	str	r0, [r3]
   148bc:	bx	lr
   148c0:	muleq	r3, r8, r2
   148c4:	ldr	r3, [pc, #4]	; 148d0 <__assert_fail@plt+0x2f30>
   148c8:	strb	r0, [r3, #4]
   148cc:	bx	lr
   148d0:	muleq	r3, r8, r2
   148d4:	push	{r4, r5, r6, lr}
   148d8:	sub	sp, sp, #8
   148dc:	ldr	r3, [pc, #200]	; 149ac <__assert_fail@plt+0x300c>
   148e0:	ldr	r0, [r3]
   148e4:	bl	2a57c <__assert_fail@plt+0x18bdc>
   148e8:	cmp	r0, #0
   148ec:	beq	14910 <__assert_fail@plt+0x2f70>
   148f0:	ldr	r3, [pc, #184]	; 149b0 <__assert_fail@plt+0x3010>
   148f4:	ldrb	r3, [r3, #4]
   148f8:	cmp	r3, #0
   148fc:	beq	1492c <__assert_fail@plt+0x2f8c>
   14900:	bl	117d8 <__errno_location@plt>
   14904:	ldr	r3, [r0]
   14908:	cmp	r3, #32
   1490c:	bne	1492c <__assert_fail@plt+0x2f8c>
   14910:	ldr	r3, [pc, #156]	; 149b4 <__assert_fail@plt+0x3014>
   14914:	ldr	r0, [r3]
   14918:	bl	2a57c <__assert_fail@plt+0x18bdc>
   1491c:	cmp	r0, #0
   14920:	bne	149a0 <__assert_fail@plt+0x3000>
   14924:	add	sp, sp, #8
   14928:	pop	{r4, r5, r6, pc}
   1492c:	mov	r2, #5
   14930:	ldr	r1, [pc, #128]	; 149b8 <__assert_fail@plt+0x3018>
   14934:	mov	r0, #0
   14938:	bl	11628 <dcgettext@plt>
   1493c:	mov	r4, r0
   14940:	ldr	r3, [pc, #104]	; 149b0 <__assert_fail@plt+0x3010>
   14944:	ldr	r5, [r3]
   14948:	cmp	r5, #0
   1494c:	beq	14984 <__assert_fail@plt+0x2fe4>
   14950:	bl	117d8 <__errno_location@plt>
   14954:	ldr	r6, [r0]
   14958:	mov	r0, r5
   1495c:	bl	1a1e4 <__assert_fail@plt+0x8844>
   14960:	str	r4, [sp]
   14964:	mov	r3, r0
   14968:	ldr	r2, [pc, #76]	; 149bc <__assert_fail@plt+0x301c>
   1496c:	mov	r1, r6
   14970:	mov	r0, #0
   14974:	bl	116d0 <error@plt>
   14978:	ldr	r3, [pc, #64]	; 149c0 <__assert_fail@plt+0x3020>
   1497c:	ldr	r0, [r3]
   14980:	bl	115c8 <_exit@plt>
   14984:	bl	117d8 <__errno_location@plt>
   14988:	mov	r3, r4
   1498c:	ldr	r2, [pc, #48]	; 149c4 <__assert_fail@plt+0x3024>
   14990:	ldr	r1, [r0]
   14994:	mov	r0, #0
   14998:	bl	116d0 <error@plt>
   1499c:	b	14978 <__assert_fail@plt+0x2fd8>
   149a0:	ldr	r3, [pc, #24]	; 149c0 <__assert_fail@plt+0x3020>
   149a4:	ldr	r0, [r3]
   149a8:	bl	115c8 <_exit@plt>
   149ac:	andeq	sp, r3, ip, lsl r2
   149b0:	muleq	r3, r8, r2
   149b4:	andeq	sp, r3, r8, lsl r2
   149b8:	muleq	r2, r8, r4
   149bc:	andeq	ip, r2, r4, lsr #9
   149c0:			; <UNDEFINED> instruction: 0x0003d1bc
   149c4:	andeq	ip, r2, r8, lsr #9
   149c8:	push	{r1, r2, r3}
   149cc:	push	{lr}		; (str lr, [sp, #-4]!)
   149d0:	sub	sp, sp, #8
   149d4:	ldr	r1, [sp, #12]
   149d8:	tst	r1, #64	; 0x40
   149dc:	addne	r3, sp, #20
   149e0:	strne	r3, [sp, #4]
   149e4:	ldrne	r2, [sp, #16]
   149e8:	moveq	r2, #0
   149ec:	bl	116e8 <open64@plt>
   149f0:	bl	1a3ac <__assert_fail@plt+0x8a0c>
   149f4:	add	sp, sp, #8
   149f8:	pop	{lr}		; (ldr lr, [sp], #4)
   149fc:	add	sp, sp, #12
   14a00:	bx	lr
   14a04:	andeq	r0, r0, r0
   14a08:	push	{r4, r6, r7, lr}
   14a0c:	vpush	{d8}
   14a10:	vmov.f64	d8, d0
   14a14:	cmp	r0, #1
   14a18:	beq	14a80 <__assert_fail@plt+0x30e0>
   14a1c:	mov	r4, r0
   14a20:	vldr	d7, [pc, #104]	; 14a90 <__assert_fail@plt+0x30f0>
   14a24:	vcmpe.f64	d0, d7
   14a28:	vmrs	APSR_nzcv, fpscr
   14a2c:	bpl	14a80 <__assert_fail@plt+0x30e0>
   14a30:	vmov	r0, r1, d0
   14a34:	bl	2b178 <__assert_fail@plt+0x197d8>
   14a38:	mov	r6, r0
   14a3c:	mov	r7, r1
   14a40:	cmp	r4, #0
   14a44:	movne	r0, #0
   14a48:	bne	14a68 <__assert_fail@plt+0x30c8>
   14a4c:	mov	r0, r6
   14a50:	bl	2b0b4 <__assert_fail@plt+0x19714>
   14a54:	vmov	d7, r0, r1
   14a58:	vcmp.f64	d7, d8
   14a5c:	vmrs	APSR_nzcv, fpscr
   14a60:	movne	r0, #1
   14a64:	moveq	r0, #0
   14a68:	adds	r2, r6, r0
   14a6c:	adc	r3, r7, r0, asr #31
   14a70:	mov	r0, r2
   14a74:	mov	r1, r3
   14a78:	bl	2b0b4 <__assert_fail@plt+0x19714>
   14a7c:	vmov	d8, r0, r1
   14a80:	vmov.f64	d0, d8
   14a84:	vpop	{d8}
   14a88:	pop	{r4, r6, r7, pc}
   14a8c:	nop			; (mov r0, r0)
   14a90:	andeq	r0, r0, r0
   14a94:	mvnsmi	r0, #0
   14a98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a9c:	vpush	{d8-d9}
   14aa0:	sub	sp, sp, #116	; 0x74
   14aa4:	strd	r0, [sp, #24]
   14aa8:	mov	r7, r2
   14aac:	str	r2, [sp, #16]
   14ab0:	mov	r8, r3
   14ab4:	and	r3, r3, #3
   14ab8:	str	r3, [sp, #20]
   14abc:	and	r3, r8, #32
   14ac0:	str	r3, [sp, #32]
   14ac4:	cmp	r3, #0
   14ac8:	movne	r3, #1024	; 0x400
   14acc:	moveq	r3, #1000	; 0x3e8
   14ad0:	str	r3, [sp, #36]	; 0x24
   14ad4:	bl	118d4 <localeconv@plt>
   14ad8:	mov	r5, r0
   14adc:	ldr	r6, [r0]
   14ae0:	mov	r0, r6
   14ae4:	bl	117a8 <strlen@plt>
   14ae8:	mov	r4, r0
   14aec:	sub	r3, r0, #1
   14af0:	ldr	r2, [pc, #1088]	; 14f38 <__assert_fail@plt+0x3598>
   14af4:	cmp	r3, #15
   14af8:	movhi	r6, r2
   14afc:	str	r6, [sp, #56]	; 0x38
   14b00:	cmp	r3, #15
   14b04:	movhi	r4, #1
   14b08:	ldr	r9, [r5, #8]
   14b0c:	ldr	r5, [r5, #4]
   14b10:	mov	r0, r5
   14b14:	bl	117a8 <strlen@plt>
   14b18:	ldr	r3, [pc, #1052]	; 14f3c <__assert_fail@plt+0x359c>
   14b1c:	cmp	r0, #16
   14b20:	movhi	r5, r3
   14b24:	str	r5, [sp, #4]
   14b28:	add	sl, r7, #644	; 0x284
   14b2c:	add	sl, sl, #3
   14b30:	ldrd	r2, [sp, #176]	; 0xb0
   14b34:	ldrd	r6, [sp, #168]	; 0xa8
   14b38:	cmp	r3, r7
   14b3c:	cmpeq	r2, r6
   14b40:	bhi	14cb4 <__assert_fail@plt+0x3314>
   14b44:	mov	r0, r6
   14b48:	mov	r1, r7
   14b4c:	bl	2b128 <__assert_fail@plt+0x19788>
   14b50:	orrs	r3, r2, r3
   14b54:	bne	14b9c <__assert_fail@plt+0x31fc>
   14b58:	ldrd	r2, [sp, #176]	; 0xb0
   14b5c:	ldrd	r0, [sp, #168]	; 0xa8
   14b60:	bl	2b128 <__assert_fail@plt+0x19788>
   14b64:	mov	r2, r0
   14b68:	mov	r3, r1
   14b6c:	ldrd	r6, [sp, #24]
   14b70:	mul	r0, r2, r7
   14b74:	mla	ip, r6, r3, r0
   14b78:	umull	r0, r1, r2, r6
   14b7c:	strd	r0, [sp, #8]
   14b80:	add	r1, ip, r1
   14b84:	str	r1, [sp, #12]
   14b88:	ldrd	r0, [sp, #8]
   14b8c:	bl	2b128 <__assert_fail@plt+0x19788>
   14b90:	cmp	r7, r1
   14b94:	cmpeq	r6, r0
   14b98:	beq	14e24 <__assert_fail@plt+0x3484>
   14b9c:	ldrd	r0, [sp, #168]	; 0xa8
   14ba0:	bl	2b0b4 <__assert_fail@plt+0x19714>
   14ba4:	vmov	d9, r0, r1
   14ba8:	ldrd	r0, [sp, #176]	; 0xb0
   14bac:	bl	2b0b4 <__assert_fail@plt+0x19714>
   14bb0:	vmov	d7, r0, r1
   14bb4:	vdiv.f64	d8, d9, d7
   14bb8:	ldrd	r0, [sp, #24]
   14bbc:	bl	2b0b4 <__assert_fail@plt+0x19714>
   14bc0:	vmov	d7, r0, r1
   14bc4:	vmul.f64	d0, d8, d7
   14bc8:	tst	r8, #16
   14bcc:	beq	14d84 <__assert_fail@plt+0x33e4>
   14bd0:	vldr	d7, [pc, #848]	; 14f28 <__assert_fail@plt+0x3588>
   14bd4:	mov	r7, #0
   14bd8:	vldr	s13, [sp, #36]	; 0x24
   14bdc:	vcvt.f64.u32	d6, s13
   14be0:	vmul.f64	d7, d7, d6
   14be4:	add	r7, r7, #1
   14be8:	vmul.f64	d5, d6, d7
   14bec:	vcmpe.f64	d0, d5
   14bf0:	vmrs	APSR_nzcv, fpscr
   14bf4:	movge	r3, #1
   14bf8:	movlt	r3, #0
   14bfc:	cmp	r7, #7
   14c00:	movgt	r3, #0
   14c04:	andle	r3, r3, #1
   14c08:	cmp	r3, #0
   14c0c:	bne	14be0 <__assert_fail@plt+0x3240>
   14c10:	vdiv.f64	d8, d0, d7
   14c14:	vmov.f64	d0, d8
   14c18:	ldr	r0, [sp, #20]
   14c1c:	bl	14a08 <__assert_fail@plt+0x3068>
   14c20:	vmov	r2, r3, d0
   14c24:	ldr	r1, [pc, #788]	; 14f40 <__assert_fail@plt+0x35a0>
   14c28:	ldr	r6, [sp, #16]
   14c2c:	mov	r0, r6
   14c30:	bl	118ec <sprintf@plt>
   14c34:	mov	r0, r6
   14c38:	bl	117a8 <strlen@plt>
   14c3c:	mov	r5, r0
   14c40:	add	r4, r4, #1
   14c44:	ldr	r3, [sp, #32]
   14c48:	cmp	r3, #0
   14c4c:	movne	r3, #1
   14c50:	moveq	r3, #2
   14c54:	add	r3, r3, r4
   14c58:	cmp	r0, r3
   14c5c:	bhi	14c78 <__assert_fail@plt+0x32d8>
   14c60:	tst	r8, #8
   14c64:	beq	14db4 <__assert_fail@plt+0x3414>
   14c68:	add	r3, r6, r0
   14c6c:	ldrb	r3, [r3, #-1]
   14c70:	cmp	r3, #48	; 0x30
   14c74:	bne	14db4 <__assert_fail@plt+0x3414>
   14c78:	vldr	d9, [pc, #688]	; 14f30 <__assert_fail@plt+0x3590>
   14c7c:	vmul.f64	d0, d8, d9
   14c80:	ldr	r0, [sp, #20]
   14c84:	bl	14a08 <__assert_fail@plt+0x3068>
   14c88:	vdiv.f64	d7, d0, d9
   14c8c:	vmov	r2, r3, d7
   14c90:	ldr	r1, [pc, #684]	; 14f44 <__assert_fail@plt+0x35a4>
   14c94:	ldr	r4, [sp, #16]
   14c98:	mov	r0, r4
   14c9c:	bl	118ec <sprintf@plt>
   14ca0:	mov	r0, r4
   14ca4:	bl	117a8 <strlen@plt>
   14ca8:	mov	r5, r0
   14cac:	mov	r4, #0
   14cb0:	b	14db4 <__assert_fail@plt+0x3414>
   14cb4:	ldrd	r2, [sp, #168]	; 0xa8
   14cb8:	orrs	r3, r2, r3
   14cbc:	beq	14b9c <__assert_fail@plt+0x31fc>
   14cc0:	ldrd	r2, [sp, #168]	; 0xa8
   14cc4:	ldrd	r0, [sp, #176]	; 0xb0
   14cc8:	bl	2b128 <__assert_fail@plt+0x19788>
   14ccc:	orrs	r3, r2, r3
   14cd0:	bne	14b9c <__assert_fail@plt+0x31fc>
   14cd4:	ldrd	r2, [sp, #168]	; 0xa8
   14cd8:	ldrd	r0, [sp, #176]	; 0xb0
   14cdc:	bl	2b128 <__assert_fail@plt+0x19788>
   14ce0:	strd	r0, [sp, #40]	; 0x28
   14ce4:	mov	r2, r0
   14ce8:	mov	r3, r1
   14cec:	ldrd	r0, [sp, #24]
   14cf0:	bl	2b128 <__assert_fail@plt+0x19788>
   14cf4:	mov	r1, #10
   14cf8:	umull	r6, r7, r2, r1
   14cfc:	mla	r7, r1, r3, r7
   14d00:	ldrd	r2, [sp, #40]	; 0x28
   14d04:	mov	r0, r6
   14d08:	mov	r1, r7
   14d0c:	bl	2b128 <__assert_fail@plt+0x19788>
   14d10:	lsls	r0, r2, #1
   14d14:	adc	r1, r3, r3
   14d18:	strd	r0, [sp, #48]	; 0x30
   14d1c:	ldrd	r2, [sp, #40]	; 0x28
   14d20:	ldrd	r0, [sp, #24]
   14d24:	bl	2b128 <__assert_fail@plt+0x19788>
   14d28:	strd	r0, [sp, #8]
   14d2c:	ldrd	r2, [sp, #40]	; 0x28
   14d30:	mov	r0, r6
   14d34:	mov	r1, r7
   14d38:	bl	2b128 <__assert_fail@plt+0x19788>
   14d3c:	mov	r6, r0
   14d40:	ldrd	r2, [sp, #40]	; 0x28
   14d44:	ldrd	r0, [sp, #48]	; 0x30
   14d48:	cmp	r3, r1
   14d4c:	cmpeq	r2, r0
   14d50:	bls	14d68 <__assert_fail@plt+0x33c8>
   14d54:	mov	r3, r0
   14d58:	orrs	r3, r3, r1
   14d5c:	movne	fp, #1
   14d60:	moveq	fp, #0
   14d64:	b	14e2c <__assert_fail@plt+0x348c>
   14d68:	ldrd	r2, [sp, #40]	; 0x28
   14d6c:	ldrd	r0, [sp, #48]	; 0x30
   14d70:	cmp	r3, r1
   14d74:	cmpeq	r2, r0
   14d78:	movcc	fp, #3
   14d7c:	movcs	fp, #2
   14d80:	b	14e2c <__assert_fail@plt+0x348c>
   14d84:	ldr	r0, [sp, #20]
   14d88:	bl	14a08 <__assert_fail@plt+0x3068>
   14d8c:	vmov	r2, r3, d0
   14d90:	ldr	r1, [pc, #428]	; 14f44 <__assert_fail@plt+0x35a4>
   14d94:	ldr	r4, [sp, #16]
   14d98:	mov	r0, r4
   14d9c:	bl	118ec <sprintf@plt>
   14da0:	mov	r0, r4
   14da4:	bl	117a8 <strlen@plt>
   14da8:	mov	r5, r0
   14dac:	mov	r4, #0
   14db0:	mvn	r7, #0
   14db4:	sub	r6, sl, r5
   14db8:	mov	r2, r5
   14dbc:	ldr	r1, [sp, #16]
   14dc0:	mov	r0, r6
   14dc4:	bl	1158c <memmove@plt>
   14dc8:	sub	r5, r5, r4
   14dcc:	add	r5, r6, r5
   14dd0:	tst	r8, #4
   14dd4:	bne	151ac <__assert_fail@plt+0x380c>
   14dd8:	tst	r8, #128	; 0x80
   14ddc:	beq	152d4 <__assert_fail@plt+0x3934>
   14de0:	cmp	r7, #0
   14de4:	blt	15238 <__assert_fail@plt+0x3898>
   14de8:	and	r3, r8, #256	; 0x100
   14dec:	orrs	r2, r7, r3
   14df0:	beq	14e0c <__assert_fail@plt+0x346c>
   14df4:	tst	r8, #64	; 0x40
   14df8:	beq	14e0c <__assert_fail@plt+0x346c>
   14dfc:	ldr	r1, [sp, #16]
   14e00:	add	sl, r1, #648	; 0x288
   14e04:	mov	r2, #32
   14e08:	strb	r2, [r1, #647]	; 0x287
   14e0c:	cmp	r7, #0
   14e10:	bne	1528c <__assert_fail@plt+0x38ec>
   14e14:	cmp	r3, #0
   14e18:	beq	152d4 <__assert_fail@plt+0x3934>
   14e1c:	mov	r2, sl
   14e20:	b	152c8 <__assert_fail@plt+0x3928>
   14e24:	mov	fp, #0
   14e28:	mov	r6, fp
   14e2c:	ands	r3, r8, #16
   14e30:	str	r3, [sp, #40]	; 0x28
   14e34:	streq	sl, [sp, #24]
   14e38:	mvneq	r7, #0
   14e3c:	beq	14ff0 <__assert_fail@plt+0x3650>
   14e40:	ldr	ip, [sp, #36]	; 0x24
   14e44:	mov	r3, #0
   14e48:	ldrd	r0, [sp, #8]
   14e4c:	cmp	r1, r3
   14e50:	cmpeq	r0, ip
   14e54:	strcc	sl, [sp, #24]
   14e58:	movcc	r7, #0
   14e5c:	bcc	14ff0 <__assert_fail@plt+0x3650>
   14e60:	mov	r7, #0
   14e64:	str	sl, [sp, #24]
   14e68:	mov	sl, ip
   14e6c:	str	r9, [sp, #48]	; 0x30
   14e70:	str	r8, [sp, #60]	; 0x3c
   14e74:	mov	r8, ip
   14e78:	mov	r9, r3
   14e7c:	b	14ebc <__assert_fail@plt+0x351c>
   14e80:	add	fp, fp, r5
   14e84:	cmp	sl, fp
   14e88:	movcc	fp, #3
   14e8c:	movcs	fp, #2
   14e90:	add	r7, r7, #1
   14e94:	ldrd	r2, [sp, #8]
   14e98:	cmp	r9, r3
   14e9c:	cmpeq	r8, r2
   14ea0:	movls	r3, #1
   14ea4:	movhi	r3, #0
   14ea8:	cmp	r7, #7
   14eac:	movgt	r3, #0
   14eb0:	andle	r3, r3, #1
   14eb4:	cmp	r3, #0
   14eb8:	beq	14f4c <__assert_fail@plt+0x35ac>
   14ebc:	mov	r2, r8
   14ec0:	mov	r3, r9
   14ec4:	ldrd	r0, [sp, #8]
   14ec8:	bl	2b128 <__assert_fail@plt+0x19788>
   14ecc:	add	r2, r2, r2, lsl #2
   14ed0:	add	r6, r6, r2, lsl #1
   14ed4:	mov	r1, sl
   14ed8:	mov	r0, r6
   14edc:	bl	2ab10 <__assert_fail@plt+0x19170>
   14ee0:	asr	r5, fp, #1
   14ee4:	add	r5, r5, r1, lsl #1
   14ee8:	mov	r2, r8
   14eec:	mov	r3, r9
   14ef0:	ldrd	r0, [sp, #8]
   14ef4:	bl	2b128 <__assert_fail@plt+0x19788>
   14ef8:	strd	r0, [sp, #8]
   14efc:	mov	r1, sl
   14f00:	mov	r0, r6
   14f04:	bl	2a924 <__assert_fail@plt+0x18f84>
   14f08:	mov	r6, r0
   14f0c:	cmp	sl, r5
   14f10:	bls	14e80 <__assert_fail@plt+0x34e0>
   14f14:	cmn	fp, r5
   14f18:	movne	fp, #1
   14f1c:	moveq	fp, #0
   14f20:	b	14e90 <__assert_fail@plt+0x34f0>
   14f24:	nop			; (mov r0, r0)
   14f28:	andeq	r0, r0, r0
   14f2c:	svccc	0x00f00000	; IMB
   14f30:	andeq	r0, r0, r0
   14f34:	eormi	r0, r4, r0
   14f38:	andeq	ip, r2, ip, asr #9
   14f3c:	andeq	fp, r2, ip, lsl ip
   14f40:	ldrdeq	ip, [r2], -r8
   14f44:	ldrdeq	ip, [r2], -r0
   14f48:	andeq	ip, r2, ip, lsr #9
   14f4c:	ldr	sl, [sp, #24]
   14f50:	ldr	r9, [sp, #48]	; 0x30
   14f54:	ldr	r8, [sp, #60]	; 0x3c
   14f58:	ldrd	r2, [sp, #8]
   14f5c:	cmp	r3, #0
   14f60:	cmpeq	r2, #9
   14f64:	strhi	sl, [sp, #24]
   14f68:	bhi	14ff0 <__assert_fail@plt+0x3650>
   14f6c:	ldr	r3, [sp, #20]
   14f70:	cmp	r3, #1
   14f74:	beq	15098 <__assert_fail@plt+0x36f8>
   14f78:	ldr	r3, [sp, #20]
   14f7c:	clz	r3, r3
   14f80:	lsr	r3, r3, #5
   14f84:	cmp	fp, #0
   14f88:	moveq	r3, #0
   14f8c:	cmp	r3, #0
   14f90:	beq	14fa4 <__assert_fail@plt+0x3604>
   14f94:	add	r6, r6, #1
   14f98:	cmp	r6, #10
   14f9c:	movne	fp, #0
   14fa0:	beq	150b0 <__assert_fail@plt+0x3710>
   14fa4:	cmp	r6, #0
   14fa8:	bne	14fbc <__assert_fail@plt+0x361c>
   14fac:	ands	r6, r8, #8
   14fb0:	strne	sl, [sp, #24]
   14fb4:	movne	r6, #0
   14fb8:	bne	14ff0 <__assert_fail@plt+0x3650>
   14fbc:	ldr	r3, [sp, #16]
   14fc0:	add	r5, r3, #644	; 0x284
   14fc4:	add	r5, r5, #2
   14fc8:	add	r6, r6, #48	; 0x30
   14fcc:	strb	r6, [r3, #646]	; 0x286
   14fd0:	sub	r3, r5, r4
   14fd4:	str	r3, [sp, #24]
   14fd8:	mov	r2, r4
   14fdc:	ldr	r1, [sp, #56]	; 0x38
   14fe0:	mov	r0, r3
   14fe4:	bl	115d4 <memcpy@plt>
   14fe8:	mov	r6, #0
   14fec:	mov	fp, r6
   14ff0:	ldr	r3, [sp, #20]
   14ff4:	cmp	r3, #1
   14ff8:	beq	150e0 <__assert_fail@plt+0x3740>
   14ffc:	ldr	r3, [sp, #20]
   15000:	cmp	r3, #0
   15004:	movne	fp, #0
   15008:	bne	1501c <__assert_fail@plt+0x367c>
   1500c:	add	fp, r6, fp
   15010:	cmp	fp, #0
   15014:	movle	fp, #0
   15018:	movgt	fp, #1
   1501c:	cmp	fp, #0
   15020:	beq	1513c <__assert_fail@plt+0x379c>
   15024:	ldrd	r2, [sp, #8]
   15028:	adds	r2, r2, #1
   1502c:	adc	r3, r3, #0
   15030:	mov	r0, r2
   15034:	mov	r1, r3
   15038:	strd	r0, [sp, #8]
   1503c:	ldr	r3, [sp, #40]	; 0x28
   15040:	cmp	r3, #0
   15044:	beq	1513c <__assert_fail@plt+0x379c>
   15048:	ldr	r2, [sp, #36]	; 0x24
   1504c:	mov	r3, #0
   15050:	cmp	r3, r1
   15054:	cmpeq	r2, r0
   15058:	moveq	r3, #1
   1505c:	movne	r3, #0
   15060:	cmp	r7, #7
   15064:	movgt	r3, #0
   15068:	andle	r3, r3, #1
   1506c:	cmp	r3, #0
   15070:	beq	1513c <__assert_fail@plt+0x379c>
   15074:	add	r7, r7, #1
   15078:	tst	r8, #8
   1507c:	beq	15110 <__assert_fail@plt+0x3770>
   15080:	ldr	r2, [sp, #24]
   15084:	sub	r6, r2, #1
   15088:	mov	r3, #49	; 0x31
   1508c:	strb	r3, [r2, #-1]
   15090:	mov	r5, r2
   15094:	b	14dd0 <__assert_fail@plt+0x3430>
   15098:	and	r3, r6, #1
   1509c:	add	r3, r3, fp
   150a0:	cmp	r3, #2
   150a4:	movle	r3, #0
   150a8:	movgt	r3, #1
   150ac:	b	14f8c <__assert_fail@plt+0x35ec>
   150b0:	ldrd	r2, [sp, #8]
   150b4:	adds	r2, r2, #1
   150b8:	adc	r3, r3, #0
   150bc:	strd	r2, [sp, #8]
   150c0:	cmp	r3, #0
   150c4:	cmpeq	r2, #9
   150c8:	strhi	sl, [sp, #24]
   150cc:	movhi	fp, #0
   150d0:	movhi	r6, fp
   150d4:	bhi	14ff0 <__assert_fail@plt+0x3650>
   150d8:	mov	fp, #0
   150dc:	b	14fac <__assert_fail@plt+0x360c>
   150e0:	ldrd	r2, [sp, #8]
   150e4:	and	r2, r2, #1
   150e8:	mov	r3, #0
   150ec:	adds	r2, r2, fp
   150f0:	adc	r3, r3, fp, asr #31
   150f4:	orr	r2, r2, r3
   150f8:	cmp	r2, #0
   150fc:	addne	r6, r6, #1
   15100:	cmp	r6, #5
   15104:	movle	fp, #0
   15108:	movgt	fp, #1
   1510c:	b	1501c <__assert_fail@plt+0x367c>
   15110:	mov	r3, #48	; 0x30
   15114:	ldr	r2, [sp, #24]
   15118:	strb	r3, [r2, #-1]
   1511c:	mvn	r3, r4
   15120:	add	r3, r2, r3
   15124:	str	r3, [sp, #24]
   15128:	mov	r2, r4
   1512c:	ldr	r1, [sp, #56]	; 0x38
   15130:	mov	r0, r3
   15134:	bl	115d4 <memcpy@plt>
   15138:	b	15080 <__assert_fail@plt+0x36e0>
   1513c:	ldr	r6, [sp, #24]
   15140:	mov	r4, #10
   15144:	mov	r5, #0
   15148:	mov	fp, r6
   1514c:	str	r8, [sp, #20]
   15150:	mov	r8, r7
   15154:	ldrd	r6, [sp, #8]
   15158:	mov	r2, r4
   1515c:	mov	r3, r5
   15160:	mov	r0, r6
   15164:	mov	r1, r7
   15168:	bl	2b128 <__assert_fail@plt+0x19788>
   1516c:	add	r2, r2, #48	; 0x30
   15170:	strb	r2, [fp, #-1]!
   15174:	mov	r2, r4
   15178:	mov	r3, r5
   1517c:	mov	r0, r6
   15180:	mov	r1, r7
   15184:	bl	2b128 <__assert_fail@plt+0x19788>
   15188:	mov	r6, r0
   1518c:	mov	r7, r1
   15190:	orrs	r3, r6, r7
   15194:	bne	15158 <__assert_fail@plt+0x37b8>
   15198:	mov	r7, r8
   1519c:	mov	r6, fp
   151a0:	ldr	r8, [sp, #20]
   151a4:	ldr	r5, [sp, #24]
   151a8:	b	14dd0 <__assert_fail@plt+0x3430>
   151ac:	sub	r4, r5, r6
   151b0:	ldr	r0, [sp, #4]
   151b4:	bl	117a8 <strlen@plt>
   151b8:	mov	fp, r0
   151bc:	mov	r2, r4
   151c0:	mov	r1, r6
   151c4:	add	r0, sp, #68	; 0x44
   151c8:	bl	115d4 <memcpy@plt>
   151cc:	mov	r6, r5
   151d0:	mvn	r5, #0
   151d4:	b	15218 <__assert_fail@plt+0x3878>
   151d8:	cmp	r5, r4
   151dc:	movcs	r5, r4
   151e0:	sub	r6, r6, r5
   151e4:	sub	r4, r4, r5
   151e8:	mov	r2, r5
   151ec:	add	r3, sp, #68	; 0x44
   151f0:	add	r1, r3, r4
   151f4:	mov	r0, r6
   151f8:	bl	115d4 <memcpy@plt>
   151fc:	cmp	r4, #0
   15200:	beq	14dd8 <__assert_fail@plt+0x3438>
   15204:	sub	r6, r6, fp
   15208:	mov	r2, fp
   1520c:	ldr	r1, [sp, #4]
   15210:	mov	r0, r6
   15214:	bl	115d4 <memcpy@plt>
   15218:	ldrb	r3, [r9]
   1521c:	cmp	r3, #0
   15220:	beq	151d8 <__assert_fail@plt+0x3838>
   15224:	cmp	r3, #255	; 0xff
   15228:	movne	r5, r3
   1522c:	moveq	r5, r4
   15230:	add	r9, r9, #1
   15234:	b	151d8 <__assert_fail@plt+0x3838>
   15238:	ldrd	r2, [sp, #176]	; 0xb0
   1523c:	cmp	r3, #0
   15240:	cmpeq	r2, #1
   15244:	bls	152f4 <__assert_fail@plt+0x3954>
   15248:	mov	r7, #1
   1524c:	mov	r2, #1
   15250:	mov	r3, #0
   15254:	ldr	r1, [sp, #36]	; 0x24
   15258:	ldrd	r4, [sp, #176]	; 0xb0
   1525c:	mul	r0, r1, r3
   15260:	umull	r2, r3, r2, r1
   15264:	add	r3, r0, r3
   15268:	cmp	r5, r3
   1526c:	cmpeq	r4, r2
   15270:	bls	14de8 <__assert_fail@plt+0x3448>
   15274:	add	r7, r7, #1
   15278:	cmp	r7, #8
   1527c:	bne	1525c <__assert_fail@plt+0x38bc>
   15280:	and	r3, r8, #256	; 0x100
   15284:	tst	r8, #64	; 0x40
   15288:	bne	14dfc <__assert_fail@plt+0x345c>
   1528c:	add	r2, sl, #1
   15290:	ldr	r1, [sp, #32]
   15294:	cmp	r7, #1
   15298:	cmpeq	r1, #0
   1529c:	ldrne	r1, [pc, #-860]	; 14f48 <__assert_fail@plt+0x35a8>
   152a0:	ldrbne	r1, [r1, r7]
   152a4:	moveq	r1, #107	; 0x6b
   152a8:	strb	r1, [sl]
   152ac:	cmp	r3, #0
   152b0:	beq	152ec <__assert_fail@plt+0x394c>
   152b4:	ldr	r3, [sp, #32]
   152b8:	cmp	r3, #0
   152bc:	addne	r2, sl, #2
   152c0:	movne	r3, #105	; 0x69
   152c4:	strbne	r3, [sl, #1]
   152c8:	add	sl, r2, #1
   152cc:	mov	r3, #66	; 0x42
   152d0:	strb	r3, [r2]
   152d4:	mov	r3, #0
   152d8:	strb	r3, [sl]
   152dc:	mov	r0, r6
   152e0:	add	sp, sp, #116	; 0x74
   152e4:	vpop	{d8-d9}
   152e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152ec:	mov	sl, r2
   152f0:	b	152d4 <__assert_fail@plt+0x3934>
   152f4:	ands	r3, r8, #256	; 0x100
   152f8:	movne	r7, #0
   152fc:	bne	14df4 <__assert_fail@plt+0x3454>
   15300:	b	14e14 <__assert_fail@plt+0x3474>
   15304:	push	{r4, r5, r6, r7, lr}
   15308:	sub	sp, sp, #20
   1530c:	mov	r7, r1
   15310:	mov	r6, r2
   15314:	subs	r4, r0, #0
   15318:	beq	15388 <__assert_fail@plt+0x39e8>
   1531c:	ldrb	r3, [r4]
   15320:	cmp	r3, #39	; 0x27
   15324:	addeq	r4, r4, #1
   15328:	moveq	r5, #4
   1532c:	movne	r5, #0
   15330:	ldr	r1, [pc, #332]	; 15484 <__assert_fail@plt+0x3ae4>
   15334:	mov	r3, #4
   15338:	add	r2, r1, #12
   1533c:	add	r1, r1, #20
   15340:	mov	r0, r4
   15344:	bl	2a298 <__assert_fail@plt+0x188f8>
   15348:	cmp	r0, #0
   1534c:	blt	153cc <__assert_fail@plt+0x3a2c>
   15350:	ldr	r3, [pc, #300]	; 15484 <__assert_fail@plt+0x3ae4>
   15354:	add	r0, r3, r0, lsl #2
   15358:	ldr	r3, [r0, #12]
   1535c:	orr	r5, r5, r3
   15360:	mov	r2, #1
   15364:	mov	r3, #0
   15368:	strd	r2, [r6]
   1536c:	str	r5, [r7]
   15370:	mov	r0, #0
   15374:	ldrd	r2, [r6]
   15378:	orrs	r3, r2, r3
   1537c:	beq	15460 <__assert_fail@plt+0x3ac0>
   15380:	add	sp, sp, #20
   15384:	pop	{r4, r5, r6, r7, pc}
   15388:	ldr	r0, [pc, #248]	; 15488 <__assert_fail@plt+0x3ae8>
   1538c:	bl	116f4 <getenv@plt>
   15390:	subs	r4, r0, #0
   15394:	bne	1531c <__assert_fail@plt+0x397c>
   15398:	ldr	r0, [pc, #236]	; 1548c <__assert_fail@plt+0x3aec>
   1539c:	bl	116f4 <getenv@plt>
   153a0:	subs	r4, r0, #0
   153a4:	bne	1531c <__assert_fail@plt+0x397c>
   153a8:	ldr	r0, [pc, #224]	; 15490 <__assert_fail@plt+0x3af0>
   153ac:	bl	116f4 <getenv@plt>
   153b0:	cmp	r0, #0
   153b4:	moveq	r2, #1024	; 0x400
   153b8:	movne	r2, #512	; 0x200
   153bc:	mov	r3, #0
   153c0:	strd	r2, [r6]
   153c4:	mov	r5, #0
   153c8:	b	1536c <__assert_fail@plt+0x39cc>
   153cc:	ldr	r3, [pc, #192]	; 15494 <__assert_fail@plt+0x3af4>
   153d0:	str	r3, [sp]
   153d4:	mov	r3, r6
   153d8:	mov	r2, #0
   153dc:	add	r1, sp, #12
   153e0:	mov	r0, r4
   153e4:	bl	1b028 <__assert_fail@plt+0x9688>
   153e8:	cmp	r0, #0
   153ec:	movne	r3, #0
   153f0:	strne	r3, [r7]
   153f4:	bne	15374 <__assert_fail@plt+0x39d4>
   153f8:	ldrb	r3, [r4]
   153fc:	sub	r3, r3, #48	; 0x30
   15400:	uxtb	r3, r3
   15404:	cmp	r3, #9
   15408:	bls	1536c <__assert_fail@plt+0x39cc>
   1540c:	ldr	r2, [sp, #12]
   15410:	cmp	r4, r2
   15414:	beq	15434 <__assert_fail@plt+0x3a94>
   15418:	ldrb	r3, [r4, #1]!
   1541c:	sub	r3, r3, #48	; 0x30
   15420:	uxtb	r3, r3
   15424:	cmp	r3, #9
   15428:	bls	1536c <__assert_fail@plt+0x39cc>
   1542c:	cmp	r4, r2
   15430:	bne	15418 <__assert_fail@plt+0x3a78>
   15434:	ldrb	r3, [r2, #-1]
   15438:	cmp	r3, #66	; 0x42
   1543c:	orrne	r5, r5, #128	; 0x80
   15440:	beq	1544c <__assert_fail@plt+0x3aac>
   15444:	orr	r5, r5, #32
   15448:	b	1536c <__assert_fail@plt+0x39cc>
   1544c:	orr	r5, r5, #384	; 0x180
   15450:	ldrb	r3, [r2, #-2]
   15454:	cmp	r3, #105	; 0x69
   15458:	bne	1536c <__assert_fail@plt+0x39cc>
   1545c:	b	15444 <__assert_fail@plt+0x3aa4>
   15460:	ldr	r0, [pc, #40]	; 15490 <__assert_fail@plt+0x3af0>
   15464:	bl	116f4 <getenv@plt>
   15468:	cmp	r0, #0
   1546c:	moveq	r2, #1024	; 0x400
   15470:	movne	r2, #512	; 0x200
   15474:	mov	r3, #0
   15478:	strd	r2, [r6]
   1547c:	mov	r0, #4
   15480:	b	15380 <__assert_fail@plt+0x39e0>
   15484:	andeq	ip, r2, ip, lsr #9
   15488:	andeq	ip, r2, r0, ror #9
   1548c:	andeq	ip, r2, ip, ror #9
   15490:	strdeq	ip, [r2], -r8
   15494:	andeq	ip, r2, r8, lsl #10
   15498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1549c:	add	fp, sp, #32
   154a0:	sub	sp, sp, #36	; 0x24
   154a4:	str	r0, [fp, #-48]	; 0xffffffd0
   154a8:	str	r2, [fp, #-56]	; 0xffffffc8
   154ac:	str	r3, [fp, #-64]	; 0xffffffc0
   154b0:	lsr	r4, r2, #30
   154b4:	lsl	r3, r2, #2
   154b8:	adds	r4, r4, #0
   154bc:	movne	r4, #1
   154c0:	cmp	r3, #0
   154c4:	movlt	r4, #1
   154c8:	cmp	r4, #0
   154cc:	movne	r4, #0
   154d0:	bne	156c4 <__assert_fail@plt+0x3d24>
   154d4:	mov	r9, r1
   154d8:	lsl	r0, r2, #2
   154dc:	cmp	r0, #4016	; 0xfb0
   154e0:	bhi	15538 <__assert_fail@plt+0x3b98>
   154e4:	add	r3, r0, #29
   154e8:	bic	r3, r3, #7
   154ec:	sub	sp, sp, r3
   154f0:	add	sl, sp, #15
   154f4:	bic	sl, sl, #15
   154f8:	cmp	sl, #0
   154fc:	beq	156c4 <__assert_fail@plt+0x3d24>
   15500:	mov	r3, #1
   15504:	str	r3, [sl, #4]
   15508:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1550c:	cmp	r3, #2
   15510:	bls	15600 <__assert_fail@plt+0x3c60>
   15514:	bl	11778 <__ctype_b_loc@plt>
   15518:	str	r0, [fp, #-60]	; 0xffffffc4
   1551c:	str	r9, [fp, #-52]	; 0xffffffcc
   15520:	add	r3, sl, #8
   15524:	str	r3, [fp, #-40]	; 0xffffffd8
   15528:	mov	r5, #0
   1552c:	mov	r3, #2
   15530:	str	r3, [fp, #-44]	; 0xffffffd4
   15534:	b	155bc <__assert_fail@plt+0x3c1c>
   15538:	bl	2a758 <__assert_fail@plt+0x18db8>
   1553c:	mov	sl, r0
   15540:	b	154f8 <__assert_fail@plt+0x3b58>
   15544:	cmp	r4, r6
   15548:	beq	15584 <__assert_fail@plt+0x3be4>
   1554c:	cmp	r5, #0
   15550:	beq	155f0 <__assert_fail@plt+0x3c50>
   15554:	ldr	r3, [sl, r5, lsl #2]
   15558:	sub	r5, r5, r3
   1555c:	mov	r6, r7
   15560:	ldrb	r4, [r9, r5]
   15564:	lsl	r3, r4, #1
   15568:	ldrh	r3, [r8, r3]
   1556c:	tst	r3, #256	; 0x100
   15570:	beq	15544 <__assert_fail@plt+0x3ba4>
   15574:	bl	11748 <__ctype_tolower_loc@plt>
   15578:	ldr	r3, [r0]
   1557c:	ldr	r4, [r3, r4, lsl #2]
   15580:	b	15544 <__assert_fail@plt+0x3ba4>
   15584:	add	r5, r5, #1
   15588:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1558c:	sub	r3, r3, r5
   15590:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15594:	str	r3, [r2]
   15598:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1559c:	add	r3, r3, #1
   155a0:	str	r3, [fp, #-44]	; 0xffffffd4
   155a4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   155a8:	add	r2, r2, #4
   155ac:	str	r2, [fp, #-40]	; 0xffffffd8
   155b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   155b4:	cmp	r2, r3
   155b8:	beq	15600 <__assert_fail@plt+0x3c60>
   155bc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   155c0:	ldr	r8, [r3]
   155c4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   155c8:	ldrb	r7, [r3, #1]!
   155cc:	str	r3, [fp, #-52]	; 0xffffffcc
   155d0:	lsl	r3, r7, #1
   155d4:	ldrh	r3, [r8, r3]
   155d8:	tst	r3, #256	; 0x100
   155dc:	beq	1555c <__assert_fail@plt+0x3bbc>
   155e0:	bl	11748 <__ctype_tolower_loc@plt>
   155e4:	ldr	r3, [r0]
   155e8:	ldrb	r7, [r3, r7, lsl #2]
   155ec:	b	1555c <__assert_fail@plt+0x3bbc>
   155f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   155f4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   155f8:	str	r2, [r3]
   155fc:	b	15598 <__assert_fail@plt+0x3bf8>
   15600:	mov	r6, #0
   15604:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15608:	str	r6, [r3]
   1560c:	ldr	r8, [fp, #-48]	; 0xffffffd0
   15610:	b	15644 <__assert_fail@plt+0x3ca4>
   15614:	cmp	r5, r4
   15618:	beq	15698 <__assert_fail@plt+0x3cf8>
   1561c:	cmp	r6, #0
   15620:	ldrne	r3, [sl, r6, lsl #2]
   15624:	ldrne	r2, [fp, #-48]	; 0xffffffd0
   15628:	addne	r2, r2, r3
   1562c:	strne	r2, [fp, #-48]	; 0xffffffd0
   15630:	subne	r6, r6, r3
   15634:	ldreq	r3, [fp, #-48]	; 0xffffffd0
   15638:	addeq	r3, r3, #1
   1563c:	streq	r3, [fp, #-48]	; 0xffffffd0
   15640:	addeq	r8, r8, #1
   15644:	ldrb	r4, [r8]
   15648:	cmp	r4, #0
   1564c:	beq	156b8 <__assert_fail@plt+0x3d18>
   15650:	bl	11778 <__ctype_b_loc@plt>
   15654:	ldr	r7, [r0]
   15658:	ldrb	r5, [r9, r6]
   1565c:	lsl	r3, r5, #1
   15660:	ldrh	r3, [r7, r3]
   15664:	tst	r3, #256	; 0x100
   15668:	beq	15678 <__assert_fail@plt+0x3cd8>
   1566c:	bl	11748 <__ctype_tolower_loc@plt>
   15670:	ldr	r3, [r0]
   15674:	ldr	r5, [r3, r5, lsl #2]
   15678:	lsl	r3, r4, #1
   1567c:	ldrh	r3, [r7, r3]
   15680:	tst	r3, #256	; 0x100
   15684:	beq	15614 <__assert_fail@plt+0x3c74>
   15688:	bl	11748 <__ctype_tolower_loc@plt>
   1568c:	ldr	r3, [r0]
   15690:	ldr	r4, [r3, r4, lsl #2]
   15694:	b	15614 <__assert_fail@plt+0x3c74>
   15698:	add	r6, r6, #1
   1569c:	add	r8, r8, #1
   156a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   156a4:	cmp	r3, r6
   156a8:	bne	15644 <__assert_fail@plt+0x3ca4>
   156ac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   156b0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   156b4:	str	r2, [r3]
   156b8:	mov	r0, sl
   156bc:	bl	2a7a0 <__assert_fail@plt+0x18e00>
   156c0:	mov	r4, #1
   156c4:	mov	r0, r4
   156c8:	sub	sp, fp, #32
   156cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156d4:	add	fp, sp, #32
   156d8:	sub	sp, sp, #180	; 0xb4
   156dc:	str	r0, [fp, #-212]	; 0xffffff2c
   156e0:	mov	r4, r1
   156e4:	str	r2, [fp, #-208]	; 0xffffff30
   156e8:	mov	r0, r1
   156ec:	bl	16ebc <__assert_fail@plt+0x551c>
   156f0:	str	r0, [fp, #-200]	; 0xffffff38
   156f4:	mov	r2, #44	; 0x2c
   156f8:	umull	r2, r3, r0, r2
   156fc:	adds	r3, r3, #0
   15700:	movne	r3, #1
   15704:	mov	r1, r3
   15708:	cmp	r2, #0
   1570c:	movlt	r1, #1
   15710:	str	r1, [fp, #-192]	; 0xffffff40
   15714:	cmp	r1, #0
   15718:	bne	15ed8 <__assert_fail@plt+0x4538>
   1571c:	mov	ip, r0
   15720:	mov	r0, #44	; 0x2c
   15724:	mul	r0, r0, ip
   15728:	cmp	r0, #4016	; 0xfb0
   1572c:	bhi	15784 <__assert_fail@plt+0x3de4>
   15730:	add	r3, r0, #29
   15734:	bic	r3, r3, #7
   15738:	sub	sp, sp, r3
   1573c:	add	r3, sp, #15
   15740:	bic	r9, r3, #15
   15744:	cmp	r9, #0
   15748:	beq	15ee4 <__assert_fail@plt+0x4544>
   1574c:	ldr	r3, [fp, #-200]	; 0xffffff38
   15750:	add	sl, r3, r3, lsl #2
   15754:	add	sl, r9, sl, lsl #3
   15758:	str	r4, [fp, #-76]	; 0xffffffb4
   1575c:	mov	r3, #0
   15760:	strb	r3, [fp, #-92]	; 0xffffffa4
   15764:	str	r3, [fp, #-88]	; 0xffffffa8
   15768:	str	r3, [fp, #-84]	; 0xffffffac
   1576c:	strb	r3, [fp, #-80]	; 0xffffffb0
   15770:	add	r5, r9, #16
   15774:	mov	r6, #1
   15778:	mov	r7, r3
   1577c:	sub	r8, fp, #60	; 0x3c
   15780:	b	15898 <__assert_fail@plt+0x3ef8>
   15784:	bl	2a758 <__assert_fail@plt+0x18db8>
   15788:	mov	r9, r0
   1578c:	b	15744 <__assert_fail@plt+0x3da4>
   15790:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15794:	mov	r1, r8
   15798:	mov	r0, r5
   1579c:	bl	115d4 <memcpy@plt>
   157a0:	str	r5, [r5, #-16]
   157a4:	b	1585c <__assert_fail@plt+0x3ebc>
   157a8:	sub	r0, fp, #88	; 0x58
   157ac:	bl	11604 <mbsinit@plt>
   157b0:	cmp	r0, #0
   157b4:	beq	158e8 <__assert_fail@plt+0x3f48>
   157b8:	strb	r6, [fp, #-92]	; 0xffffffa4
   157bc:	ldr	r4, [fp, #-76]	; 0xffffffb4
   157c0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   157c4:	mov	r1, r0
   157c8:	mov	r0, r4
   157cc:	bl	1a380 <__assert_fail@plt+0x89e0>
   157d0:	sub	r3, fp, #88	; 0x58
   157d4:	mov	r2, r0
   157d8:	mov	r1, r4
   157dc:	sub	r0, fp, #64	; 0x40
   157e0:	bl	1b984 <__assert_fail@plt+0x9fe4>
   157e4:	str	r0, [fp, #-72]	; 0xffffffb8
   157e8:	cmn	r0, #1
   157ec:	streq	r6, [fp, #-72]	; 0xffffffb8
   157f0:	strbeq	r7, [fp, #-68]	; 0xffffffbc
   157f4:	beq	1583c <__assert_fail@plt+0x3e9c>
   157f8:	cmn	r0, #2
   157fc:	beq	158fc <__assert_fail@plt+0x3f5c>
   15800:	cmp	r0, #0
   15804:	bne	15828 <__assert_fail@plt+0x3e88>
   15808:	str	r6, [fp, #-72]	; 0xffffffb8
   1580c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15810:	ldrb	r3, [r3]
   15814:	cmp	r3, #0
   15818:	bne	15910 <__assert_fail@plt+0x3f70>
   1581c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15820:	cmp	r3, #0
   15824:	bne	15924 <__assert_fail@plt+0x3f84>
   15828:	strb	r6, [fp, #-68]	; 0xffffffbc
   1582c:	sub	r0, fp, #88	; 0x58
   15830:	bl	11604 <mbsinit@plt>
   15834:	cmp	r0, #0
   15838:	strbne	r7, [fp, #-92]	; 0xffffffa4
   1583c:	strb	r6, [fp, #-80]	; 0xffffffb0
   15840:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   15844:	cmp	r3, #0
   15848:	bne	15938 <__assert_fail@plt+0x3f98>
   1584c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15850:	cmp	r3, r8
   15854:	strne	r3, [r5, #-16]
   15858:	beq	15790 <__assert_fail@plt+0x3df0>
   1585c:	ldr	r4, [fp, #-72]	; 0xffffffb8
   15860:	str	r4, [r5, #-12]
   15864:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   15868:	strb	r3, [r5, #-8]
   1586c:	cmp	r3, #0
   15870:	beq	15884 <__assert_fail@plt+0x3ee4>
   15874:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15878:	str	r0, [r5, #-4]
   1587c:	bl	115f8 <towlower@plt>
   15880:	str	r0, [r5, #-4]
   15884:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15888:	add	r3, r3, r4
   1588c:	str	r3, [fp, #-76]	; 0xffffffb4
   15890:	strb	r7, [fp, #-80]	; 0xffffffb0
   15894:	add	r5, r5, #40	; 0x28
   15898:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   1589c:	cmp	r3, #0
   158a0:	bne	15840 <__assert_fail@plt+0x3ea0>
   158a4:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   158a8:	cmp	r3, #0
   158ac:	bne	157bc <__assert_fail@plt+0x3e1c>
   158b0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   158b4:	ldrb	r3, [r1]
   158b8:	lsr	r2, r3, #5
   158bc:	and	r3, r3, #31
   158c0:	ldr	r0, [pc, #1836]	; 15ff4 <__assert_fail@plt+0x4654>
   158c4:	ldr	r2, [r0, r2, lsl #2]
   158c8:	lsr	r3, r2, r3
   158cc:	tst	r3, #1
   158d0:	beq	157a8 <__assert_fail@plt+0x3e08>
   158d4:	str	r6, [fp, #-72]	; 0xffffffb8
   158d8:	ldrb	r3, [r1]
   158dc:	str	r3, [fp, #-64]	; 0xffffffc0
   158e0:	strb	r6, [fp, #-68]	; 0xffffffbc
   158e4:	b	1583c <__assert_fail@plt+0x3e9c>
   158e8:	ldr	r3, [pc, #1800]	; 15ff8 <__assert_fail@plt+0x4658>
   158ec:	mov	r2, #143	; 0x8f
   158f0:	ldr	r1, [pc, #1796]	; 15ffc <__assert_fail@plt+0x465c>
   158f4:	ldr	r0, [pc, #1796]	; 16000 <__assert_fail@plt+0x4660>
   158f8:	bl	119a0 <__assert_fail@plt>
   158fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15900:	bl	117a8 <strlen@plt>
   15904:	str	r0, [fp, #-72]	; 0xffffffb8
   15908:	strb	r7, [fp, #-68]	; 0xffffffbc
   1590c:	b	1583c <__assert_fail@plt+0x3e9c>
   15910:	ldr	r3, [pc, #1760]	; 15ff8 <__assert_fail@plt+0x4658>
   15914:	mov	r2, #171	; 0xab
   15918:	ldr	r1, [pc, #1756]	; 15ffc <__assert_fail@plt+0x465c>
   1591c:	ldr	r0, [pc, #1760]	; 16004 <__assert_fail@plt+0x4664>
   15920:	bl	119a0 <__assert_fail@plt>
   15924:	ldr	r3, [pc, #1740]	; 15ff8 <__assert_fail@plt+0x4658>
   15928:	mov	r2, #172	; 0xac
   1592c:	ldr	r1, [pc, #1736]	; 15ffc <__assert_fail@plt+0x465c>
   15930:	ldr	r0, [pc, #1744]	; 16008 <__assert_fail@plt+0x4668>
   15934:	bl	119a0 <__assert_fail@plt>
   15938:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1593c:	cmp	r2, #0
   15940:	bne	1584c <__assert_fail@plt+0x3eac>
   15944:	str	r3, [fp, #-204]	; 0xffffff34
   15948:	mov	r3, #1
   1594c:	str	r3, [sl, #4]
   15950:	ldr	r3, [fp, #-200]	; 0xffffff38
   15954:	cmp	r3, #2
   15958:	bls	15a3c <__assert_fail@plt+0x409c>
   1595c:	mov	r8, r9
   15960:	add	r3, sl, #8
   15964:	str	r3, [fp, #-196]	; 0xffffff3c
   15968:	mov	r4, #0
   1596c:	mov	r7, #2
   15970:	b	15a24 <__assert_fail@plt+0x4084>
   15974:	ldr	r2, [r5, #44]	; 0x2c
   15978:	add	r3, r4, r4, lsl #2
   1597c:	add	r1, r9, r3, lsl #3
   15980:	ldr	r1, [r1, #4]
   15984:	cmp	r2, r1
   15988:	ldrne	r0, [fp, #-192]	; 0xffffff40
   1598c:	beq	159dc <__assert_fail@plt+0x403c>
   15990:	cmp	r0, #0
   15994:	bne	159f4 <__assert_fail@plt+0x4054>
   15998:	cmp	r4, #0
   1599c:	beq	15a30 <__assert_fail@plt+0x4090>
   159a0:	ldr	r3, [sl, r4, lsl #2]
   159a4:	sub	r4, r4, r3
   159a8:	cmp	r6, #0
   159ac:	beq	15974 <__assert_fail@plt+0x3fd4>
   159b0:	add	r3, r4, r4, lsl #2
   159b4:	add	r3, r9, r3, lsl #3
   159b8:	ldrb	r2, [r3, #8]
   159bc:	cmp	r2, #0
   159c0:	beq	15974 <__assert_fail@plt+0x3fd4>
   159c4:	ldr	r0, [r5, #52]	; 0x34
   159c8:	ldr	r3, [r3, #12]
   159cc:	cmp	r0, r3
   159d0:	movne	r0, #0
   159d4:	moveq	r0, #1
   159d8:	b	15990 <__assert_fail@plt+0x3ff0>
   159dc:	ldr	r1, [r9, r3, lsl #3]
   159e0:	ldr	r0, [r5, #40]	; 0x28
   159e4:	bl	1161c <memcmp@plt>
   159e8:	clz	r0, r0
   159ec:	lsr	r0, r0, #5
   159f0:	b	15990 <__assert_fail@plt+0x3ff0>
   159f4:	add	r4, r4, #1
   159f8:	sub	r3, r7, r4
   159fc:	ldr	r2, [fp, #-196]	; 0xffffff3c
   15a00:	str	r3, [r2]
   15a04:	add	r7, r7, #1
   15a08:	add	r8, r8, #40	; 0x28
   15a0c:	ldr	r3, [fp, #-196]	; 0xffffff3c
   15a10:	add	r3, r3, #4
   15a14:	str	r3, [fp, #-196]	; 0xffffff3c
   15a18:	ldr	r3, [fp, #-200]	; 0xffffff38
   15a1c:	cmp	r3, r7
   15a20:	beq	15a3c <__assert_fail@plt+0x409c>
   15a24:	mov	r5, r8
   15a28:	ldrb	r6, [r8, #48]	; 0x30
   15a2c:	b	159a8 <__assert_fail@plt+0x4008>
   15a30:	ldr	r3, [fp, #-196]	; 0xffffff3c
   15a34:	str	r7, [r3]
   15a38:	b	15a04 <__assert_fail@plt+0x4064>
   15a3c:	mov	r8, #0
   15a40:	ldr	r3, [fp, #-208]	; 0xffffff30
   15a44:	str	r8, [r3]
   15a48:	ldr	r3, [fp, #-212]	; 0xffffff2c
   15a4c:	str	r3, [fp, #-132]	; 0xffffff7c
   15a50:	strb	r8, [fp, #-148]	; 0xffffff6c
   15a54:	str	r8, [fp, #-144]	; 0xffffff70
   15a58:	str	r8, [fp, #-140]	; 0xffffff74
   15a5c:	strb	r8, [fp, #-136]	; 0xffffff78
   15a60:	str	r3, [fp, #-76]	; 0xffffffb4
   15a64:	strb	r8, [fp, #-92]	; 0xffffffa4
   15a68:	str	r8, [fp, #-88]	; 0xffffffa8
   15a6c:	str	r8, [fp, #-84]	; 0xffffffac
   15a70:	strb	r8, [fp, #-80]	; 0xffffffb0
   15a74:	mov	r5, #1
   15a78:	mov	r6, r8
   15a7c:	b	15f30 <__assert_fail@plt+0x4590>
   15a80:	sub	r4, fp, #172	; 0xac
   15a84:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15a88:	sub	r1, fp, #60	; 0x3c
   15a8c:	mov	r0, r4
   15a90:	bl	115d4 <memcpy@plt>
   15a94:	str	r4, [fp, #-188]	; 0xffffff44
   15a98:	b	15fa0 <__assert_fail@plt+0x4600>
   15a9c:	ldr	r1, [fp, #-188]	; 0xffffff44
   15aa0:	ldr	r0, [r3]
   15aa4:	bl	1161c <memcmp@plt>
   15aa8:	clz	r0, r0
   15aac:	lsr	r0, r0, #5
   15ab0:	b	15f08 <__assert_fail@plt+0x4568>
   15ab4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15ab8:	ldr	r2, [fp, #-208]	; 0xffffff30
   15abc:	str	r3, [r2]
   15ac0:	b	15ec4 <__assert_fail@plt+0x4524>
   15ac4:	cmp	r8, #0
   15ac8:	beq	15c50 <__assert_fail@plt+0x42b0>
   15acc:	ldr	r4, [sl, r8, lsl #2]
   15ad0:	sub	r8, r8, r4
   15ad4:	cmp	r4, #0
   15ad8:	bne	15ba0 <__assert_fail@plt+0x4200>
   15adc:	b	15f30 <__assert_fail@plt+0x4590>
   15ae0:	sub	r0, fp, #144	; 0x90
   15ae4:	bl	11604 <mbsinit@plt>
   15ae8:	cmp	r0, #0
   15aec:	beq	15bf0 <__assert_fail@plt+0x4250>
   15af0:	strb	r5, [fp, #-148]	; 0xffffff6c
   15af4:	ldr	r7, [fp, #-132]	; 0xffffff7c
   15af8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   15afc:	mov	r1, r0
   15b00:	mov	r0, r7
   15b04:	bl	1a380 <__assert_fail@plt+0x89e0>
   15b08:	sub	r3, fp, #144	; 0x90
   15b0c:	mov	r2, r0
   15b10:	mov	r1, r7
   15b14:	sub	r0, fp, #120	; 0x78
   15b18:	bl	1b984 <__assert_fail@plt+0x9fe4>
   15b1c:	str	r0, [fp, #-128]	; 0xffffff80
   15b20:	cmn	r0, #1
   15b24:	streq	r5, [fp, #-128]	; 0xffffff80
   15b28:	strbeq	r6, [fp, #-124]	; 0xffffff84
   15b2c:	beq	15b74 <__assert_fail@plt+0x41d4>
   15b30:	cmn	r0, #2
   15b34:	beq	15c04 <__assert_fail@plt+0x4264>
   15b38:	cmp	r0, #0
   15b3c:	bne	15b60 <__assert_fail@plt+0x41c0>
   15b40:	str	r5, [fp, #-128]	; 0xffffff80
   15b44:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15b48:	ldrb	r3, [r3]
   15b4c:	cmp	r3, #0
   15b50:	bne	15c18 <__assert_fail@plt+0x4278>
   15b54:	ldr	r3, [fp, #-120]	; 0xffffff88
   15b58:	cmp	r3, #0
   15b5c:	bne	15c2c <__assert_fail@plt+0x428c>
   15b60:	strb	r5, [fp, #-124]	; 0xffffff84
   15b64:	sub	r0, fp, #144	; 0x90
   15b68:	bl	11604 <mbsinit@plt>
   15b6c:	cmp	r0, #0
   15b70:	strbne	r6, [fp, #-148]	; 0xffffff6c
   15b74:	strb	r5, [fp, #-136]	; 0xffffff78
   15b78:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15b7c:	cmp	r3, #0
   15b80:	bne	15c40 <__assert_fail@plt+0x42a0>
   15b84:	ldr	r2, [fp, #-128]	; 0xffffff80
   15b88:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15b8c:	add	r3, r3, r2
   15b90:	str	r3, [fp, #-132]	; 0xffffff7c
   15b94:	strb	r6, [fp, #-136]	; 0xffffff78
   15b98:	subs	r4, r4, #1
   15b9c:	beq	15f30 <__assert_fail@plt+0x4590>
   15ba0:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15ba4:	cmp	r3, #0
   15ba8:	bne	15b78 <__assert_fail@plt+0x41d8>
   15bac:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15bb0:	cmp	r3, #0
   15bb4:	bne	15af4 <__assert_fail@plt+0x4154>
   15bb8:	ldr	r1, [fp, #-132]	; 0xffffff7c
   15bbc:	ldrb	r3, [r1]
   15bc0:	lsr	r2, r3, #5
   15bc4:	and	r3, r3, #31
   15bc8:	ldr	r0, [pc, #1060]	; 15ff4 <__assert_fail@plt+0x4654>
   15bcc:	ldr	r2, [r0, r2, lsl #2]
   15bd0:	lsr	r3, r2, r3
   15bd4:	tst	r3, #1
   15bd8:	beq	15ae0 <__assert_fail@plt+0x4140>
   15bdc:	str	r5, [fp, #-128]	; 0xffffff80
   15be0:	ldrb	r3, [r1]
   15be4:	str	r3, [fp, #-120]	; 0xffffff88
   15be8:	strb	r5, [fp, #-124]	; 0xffffff84
   15bec:	b	15b74 <__assert_fail@plt+0x41d4>
   15bf0:	ldr	r3, [pc, #1024]	; 15ff8 <__assert_fail@plt+0x4658>
   15bf4:	mov	r2, #143	; 0x8f
   15bf8:	ldr	r1, [pc, #1020]	; 15ffc <__assert_fail@plt+0x465c>
   15bfc:	ldr	r0, [pc, #1020]	; 16000 <__assert_fail@plt+0x4660>
   15c00:	bl	119a0 <__assert_fail@plt>
   15c04:	ldr	r0, [fp, #-132]	; 0xffffff7c
   15c08:	bl	117a8 <strlen@plt>
   15c0c:	str	r0, [fp, #-128]	; 0xffffff80
   15c10:	strb	r6, [fp, #-124]	; 0xffffff84
   15c14:	b	15b74 <__assert_fail@plt+0x41d4>
   15c18:	ldr	r3, [pc, #984]	; 15ff8 <__assert_fail@plt+0x4658>
   15c1c:	mov	r2, #171	; 0xab
   15c20:	ldr	r1, [pc, #980]	; 15ffc <__assert_fail@plt+0x465c>
   15c24:	ldr	r0, [pc, #984]	; 16004 <__assert_fail@plt+0x4664>
   15c28:	bl	119a0 <__assert_fail@plt>
   15c2c:	ldr	r3, [pc, #964]	; 15ff8 <__assert_fail@plt+0x4658>
   15c30:	mov	r2, #172	; 0xac
   15c34:	ldr	r1, [pc, #960]	; 15ffc <__assert_fail@plt+0x465c>
   15c38:	ldr	r0, [pc, #968]	; 16008 <__assert_fail@plt+0x4668>
   15c3c:	bl	119a0 <__assert_fail@plt>
   15c40:	ldr	r3, [fp, #-120]	; 0xffffff88
   15c44:	cmp	r3, #0
   15c48:	bne	15b84 <__assert_fail@plt+0x41e4>
   15c4c:	bl	11964 <abort@plt>
   15c50:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15c54:	cmp	r3, #0
   15c58:	bne	15ca0 <__assert_fail@plt+0x4300>
   15c5c:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15c60:	cmp	r3, #0
   15c64:	bne	15cec <__assert_fail@plt+0x434c>
   15c68:	ldr	r1, [fp, #-132]	; 0xffffff7c
   15c6c:	ldrb	r3, [r1]
   15c70:	lsr	r2, r3, #5
   15c74:	and	r3, r3, #31
   15c78:	ldr	r0, [pc, #884]	; 15ff4 <__assert_fail@plt+0x4654>
   15c7c:	ldr	r2, [r0, r2, lsl #2]
   15c80:	lsr	r3, r2, r3
   15c84:	tst	r3, #1
   15c88:	beq	15cd8 <__assert_fail@plt+0x4338>
   15c8c:	str	r5, [fp, #-128]	; 0xffffff80
   15c90:	ldrb	r3, [r1]
   15c94:	str	r3, [fp, #-120]	; 0xffffff88
   15c98:	strb	r5, [fp, #-124]	; 0xffffff84
   15c9c:	strb	r5, [fp, #-136]	; 0xffffff78
   15ca0:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15ca4:	cmp	r3, #0
   15ca8:	bne	15dc0 <__assert_fail@plt+0x4420>
   15cac:	ldr	r2, [fp, #-128]	; 0xffffff80
   15cb0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15cb4:	add	r3, r3, r2
   15cb8:	str	r3, [fp, #-132]	; 0xffffff7c
   15cbc:	strb	r6, [fp, #-136]	; 0xffffff78
   15cc0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15cc4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15cc8:	add	r3, r3, r2
   15ccc:	str	r3, [fp, #-76]	; 0xffffffb4
   15cd0:	strb	r6, [fp, #-80]	; 0xffffffb0
   15cd4:	b	15f30 <__assert_fail@plt+0x4590>
   15cd8:	sub	r0, fp, #144	; 0x90
   15cdc:	bl	11604 <mbsinit@plt>
   15ce0:	cmp	r0, #0
   15ce4:	beq	15d70 <__assert_fail@plt+0x43d0>
   15ce8:	strb	r5, [fp, #-148]	; 0xffffff6c
   15cec:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15cf0:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   15cf4:	mov	r1, r0
   15cf8:	mov	r0, r4
   15cfc:	bl	1a380 <__assert_fail@plt+0x89e0>
   15d00:	sub	r3, fp, #144	; 0x90
   15d04:	mov	r2, r0
   15d08:	mov	r1, r4
   15d0c:	sub	r0, fp, #120	; 0x78
   15d10:	bl	1b984 <__assert_fail@plt+0x9fe4>
   15d14:	str	r0, [fp, #-128]	; 0xffffff80
   15d18:	cmn	r0, #1
   15d1c:	streq	r5, [fp, #-128]	; 0xffffff80
   15d20:	strbeq	r6, [fp, #-124]	; 0xffffff84
   15d24:	beq	15c9c <__assert_fail@plt+0x42fc>
   15d28:	cmn	r0, #2
   15d2c:	beq	15d84 <__assert_fail@plt+0x43e4>
   15d30:	cmp	r0, #0
   15d34:	bne	15d58 <__assert_fail@plt+0x43b8>
   15d38:	str	r5, [fp, #-128]	; 0xffffff80
   15d3c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15d40:	ldrb	r3, [r3]
   15d44:	cmp	r3, #0
   15d48:	bne	15d98 <__assert_fail@plt+0x43f8>
   15d4c:	ldr	r3, [fp, #-120]	; 0xffffff88
   15d50:	cmp	r3, #0
   15d54:	bne	15dac <__assert_fail@plt+0x440c>
   15d58:	strb	r5, [fp, #-124]	; 0xffffff84
   15d5c:	sub	r0, fp, #144	; 0x90
   15d60:	bl	11604 <mbsinit@plt>
   15d64:	cmp	r0, #0
   15d68:	strbne	r6, [fp, #-148]	; 0xffffff6c
   15d6c:	b	15c9c <__assert_fail@plt+0x42fc>
   15d70:	ldr	r3, [pc, #640]	; 15ff8 <__assert_fail@plt+0x4658>
   15d74:	mov	r2, #143	; 0x8f
   15d78:	ldr	r1, [pc, #636]	; 15ffc <__assert_fail@plt+0x465c>
   15d7c:	ldr	r0, [pc, #636]	; 16000 <__assert_fail@plt+0x4660>
   15d80:	bl	119a0 <__assert_fail@plt>
   15d84:	ldr	r0, [fp, #-132]	; 0xffffff7c
   15d88:	bl	117a8 <strlen@plt>
   15d8c:	str	r0, [fp, #-128]	; 0xffffff80
   15d90:	strb	r6, [fp, #-124]	; 0xffffff84
   15d94:	b	15c9c <__assert_fail@plt+0x42fc>
   15d98:	ldr	r3, [pc, #600]	; 15ff8 <__assert_fail@plt+0x4658>
   15d9c:	mov	r2, #171	; 0xab
   15da0:	ldr	r1, [pc, #596]	; 15ffc <__assert_fail@plt+0x465c>
   15da4:	ldr	r0, [pc, #600]	; 16004 <__assert_fail@plt+0x4664>
   15da8:	bl	119a0 <__assert_fail@plt>
   15dac:	ldr	r3, [pc, #580]	; 15ff8 <__assert_fail@plt+0x4658>
   15db0:	mov	r2, #172	; 0xac
   15db4:	ldr	r1, [pc, #576]	; 15ffc <__assert_fail@plt+0x465c>
   15db8:	ldr	r0, [pc, #584]	; 16008 <__assert_fail@plt+0x4668>
   15dbc:	bl	119a0 <__assert_fail@plt>
   15dc0:	ldr	r3, [fp, #-120]	; 0xffffff88
   15dc4:	cmp	r3, #0
   15dc8:	bne	15cac <__assert_fail@plt+0x430c>
   15dcc:	bl	11964 <abort@plt>
   15dd0:	sub	r0, fp, #88	; 0x58
   15dd4:	bl	11604 <mbsinit@plt>
   15dd8:	cmp	r0, #0
   15ddc:	beq	15e68 <__assert_fail@plt+0x44c8>
   15de0:	strb	r5, [fp, #-92]	; 0xffffffa4
   15de4:	ldr	r4, [fp, #-76]	; 0xffffffb4
   15de8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   15dec:	mov	r1, r0
   15df0:	mov	r0, r4
   15df4:	bl	1a380 <__assert_fail@plt+0x89e0>
   15df8:	sub	r3, fp, #88	; 0x58
   15dfc:	mov	r2, r0
   15e00:	mov	r1, r4
   15e04:	sub	r0, fp, #64	; 0x40
   15e08:	bl	1b984 <__assert_fail@plt+0x9fe4>
   15e0c:	str	r0, [fp, #-72]	; 0xffffffb8
   15e10:	cmn	r0, #1
   15e14:	streq	r5, [fp, #-72]	; 0xffffffb8
   15e18:	strbeq	r6, [fp, #-68]	; 0xffffffbc
   15e1c:	beq	15f7c <__assert_fail@plt+0x45dc>
   15e20:	cmn	r0, #2
   15e24:	beq	15e7c <__assert_fail@plt+0x44dc>
   15e28:	cmp	r0, #0
   15e2c:	bne	15e50 <__assert_fail@plt+0x44b0>
   15e30:	str	r5, [fp, #-72]	; 0xffffffb8
   15e34:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15e38:	ldrb	r3, [r3]
   15e3c:	cmp	r3, #0
   15e40:	bne	15e90 <__assert_fail@plt+0x44f0>
   15e44:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15e48:	cmp	r3, #0
   15e4c:	bne	15ea4 <__assert_fail@plt+0x4504>
   15e50:	strb	r5, [fp, #-68]	; 0xffffffbc
   15e54:	sub	r0, fp, #88	; 0x58
   15e58:	bl	11604 <mbsinit@plt>
   15e5c:	cmp	r0, #0
   15e60:	strbne	r6, [fp, #-92]	; 0xffffffa4
   15e64:	b	15f7c <__assert_fail@plt+0x45dc>
   15e68:	ldr	r3, [pc, #392]	; 15ff8 <__assert_fail@plt+0x4658>
   15e6c:	mov	r2, #143	; 0x8f
   15e70:	ldr	r1, [pc, #388]	; 15ffc <__assert_fail@plt+0x465c>
   15e74:	ldr	r0, [pc, #388]	; 16000 <__assert_fail@plt+0x4660>
   15e78:	bl	119a0 <__assert_fail@plt>
   15e7c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15e80:	bl	117a8 <strlen@plt>
   15e84:	str	r0, [fp, #-72]	; 0xffffffb8
   15e88:	strb	r6, [fp, #-68]	; 0xffffffbc
   15e8c:	b	15f7c <__assert_fail@plt+0x45dc>
   15e90:	ldr	r3, [pc, #352]	; 15ff8 <__assert_fail@plt+0x4658>
   15e94:	mov	r2, #171	; 0xab
   15e98:	ldr	r1, [pc, #348]	; 15ffc <__assert_fail@plt+0x465c>
   15e9c:	ldr	r0, [pc, #352]	; 16004 <__assert_fail@plt+0x4664>
   15ea0:	bl	119a0 <__assert_fail@plt>
   15ea4:	ldr	r3, [pc, #332]	; 15ff8 <__assert_fail@plt+0x4658>
   15ea8:	mov	r2, #172	; 0xac
   15eac:	ldr	r1, [pc, #328]	; 15ffc <__assert_fail@plt+0x465c>
   15eb0:	ldr	r0, [pc, #336]	; 16008 <__assert_fail@plt+0x4668>
   15eb4:	bl	119a0 <__assert_fail@plt>
   15eb8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15ebc:	cmp	r3, #0
   15ec0:	bne	15f8c <__assert_fail@plt+0x45ec>
   15ec4:	mov	r0, r9
   15ec8:	bl	2a7a0 <__assert_fail@plt+0x18e00>
   15ecc:	ldr	r0, [fp, #-204]	; 0xffffff34
   15ed0:	sub	sp, fp, #32
   15ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ed8:	mov	r3, #0
   15edc:	str	r3, [fp, #-204]	; 0xffffff34
   15ee0:	b	15ecc <__assert_fail@plt+0x452c>
   15ee4:	ldr	r3, [fp, #-192]	; 0xffffff40
   15ee8:	str	r3, [fp, #-204]	; 0xffffff34
   15eec:	b	15ecc <__assert_fail@plt+0x452c>
   15ef0:	add	r3, r8, r8, lsl #2
   15ef4:	add	r3, r9, r3, lsl #3
   15ef8:	ldr	r2, [r3, #4]
   15efc:	cmp	r2, r7
   15f00:	ldrne	r0, [fp, #-192]	; 0xffffff40
   15f04:	beq	15a9c <__assert_fail@plt+0x40fc>
   15f08:	cmp	r0, #0
   15f0c:	beq	15ac4 <__assert_fail@plt+0x4124>
   15f10:	add	r8, r8, #1
   15f14:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15f18:	add	r7, r3, r7
   15f1c:	str	r7, [fp, #-76]	; 0xffffffb4
   15f20:	strb	r6, [fp, #-80]	; 0xffffffb0
   15f24:	ldr	r3, [fp, #-200]	; 0xffffff38
   15f28:	cmp	r3, r8
   15f2c:	beq	15ab4 <__assert_fail@plt+0x4114>
   15f30:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   15f34:	cmp	r3, #0
   15f38:	bne	15f80 <__assert_fail@plt+0x45e0>
   15f3c:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   15f40:	cmp	r3, #0
   15f44:	bne	15de4 <__assert_fail@plt+0x4444>
   15f48:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15f4c:	ldrb	r3, [r1]
   15f50:	lsr	r2, r3, #5
   15f54:	and	r3, r3, #31
   15f58:	ldr	r0, [pc, #148]	; 15ff4 <__assert_fail@plt+0x4654>
   15f5c:	ldr	r2, [r0, r2, lsl #2]
   15f60:	lsr	r3, r2, r3
   15f64:	tst	r3, #1
   15f68:	beq	15dd0 <__assert_fail@plt+0x4430>
   15f6c:	str	r5, [fp, #-72]	; 0xffffffb8
   15f70:	ldrb	r3, [r1]
   15f74:	str	r3, [fp, #-64]	; 0xffffffc0
   15f78:	strb	r5, [fp, #-68]	; 0xffffffbc
   15f7c:	strb	r5, [fp, #-80]	; 0xffffffb0
   15f80:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   15f84:	cmp	r3, #0
   15f88:	bne	15eb8 <__assert_fail@plt+0x4518>
   15f8c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15f90:	sub	r2, fp, #60	; 0x3c
   15f94:	cmp	r3, r2
   15f98:	strne	r3, [fp, #-188]	; 0xffffff44
   15f9c:	beq	15a80 <__assert_fail@plt+0x40e0>
   15fa0:	ldr	r7, [fp, #-72]	; 0xffffffb8
   15fa4:	str	r7, [fp, #-184]	; 0xffffff48
   15fa8:	ldrb	r4, [fp, #-68]	; 0xffffffbc
   15fac:	strb	r4, [fp, #-180]	; 0xffffff4c
   15fb0:	cmp	r4, #0
   15fb4:	beq	15ef0 <__assert_fail@plt+0x4550>
   15fb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15fbc:	str	r0, [fp, #-176]	; 0xffffff50
   15fc0:	bl	115f8 <towlower@plt>
   15fc4:	str	r0, [fp, #-176]	; 0xffffff50
   15fc8:	add	r3, r8, r8, lsl #2
   15fcc:	add	r3, r9, r3, lsl #3
   15fd0:	ldrb	r2, [r3, #8]
   15fd4:	tst	r4, r2
   15fd8:	beq	15ef8 <__assert_fail@plt+0x4558>
   15fdc:	ldr	r0, [r3, #12]
   15fe0:	ldr	r3, [fp, #-176]	; 0xffffff50
   15fe4:	cmp	r0, r3
   15fe8:	movne	r0, #0
   15fec:	moveq	r0, #1
   15ff0:	b	15f08 <__assert_fail@plt+0x4568>
   15ff4:	andeq	ip, r2, r0, asr sp
   15ff8:	andeq	ip, r2, r0, lsr r5
   15ffc:	andeq	ip, r2, r4, asr #10
   16000:	andeq	ip, r2, r0, asr r5
   16004:	andeq	ip, r2, r8, ror #10
   16008:	andeq	ip, r2, r0, lsl #11
   1600c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16010:	sub	sp, sp, #404	; 0x194
   16014:	str	r0, [sp, #4]
   16018:	mov	r7, r1
   1601c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16020:	cmp	r0, #1
   16024:	bls	16c5c <__assert_fail@plt+0x52bc>
   16028:	str	r7, [sp, #136]	; 0x88
   1602c:	mov	r3, #0
   16030:	strb	r3, [sp, #120]	; 0x78
   16034:	str	r3, [sp, #124]	; 0x7c
   16038:	str	r3, [sp, #128]	; 0x80
   1603c:	strb	r3, [sp, #132]	; 0x84
   16040:	ldrb	r2, [r7]
   16044:	lsr	r0, r2, #5
   16048:	and	r1, r2, #31
   1604c:	ldr	r3, [pc, #3664]	; 16ea4 <__assert_fail@plt+0x5504>
   16050:	ldr	r3, [r3, r0, lsl #2]
   16054:	lsr	r3, r3, r1
   16058:	tst	r3, #1
   1605c:	beq	1609c <__assert_fail@plt+0x46fc>
   16060:	mov	r3, #1
   16064:	str	r3, [sp, #140]	; 0x8c
   16068:	str	r2, [sp, #148]	; 0x94
   1606c:	strb	r3, [sp, #144]	; 0x90
   16070:	mov	r3, #1
   16074:	strb	r3, [sp, #132]	; 0x84
   16078:	ldrb	r3, [sp, #144]	; 0x90
   1607c:	cmp	r3, #0
   16080:	beq	161a0 <__assert_fail@plt+0x4800>
   16084:	ldr	r3, [sp, #148]	; 0x94
   16088:	cmp	r3, #0
   1608c:	ldreq	r0, [sp, #4]
   16090:	bne	161a0 <__assert_fail@plt+0x4800>
   16094:	add	sp, sp, #404	; 0x194
   16098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1609c:	add	r0, sp, #124	; 0x7c
   160a0:	bl	11604 <mbsinit@plt>
   160a4:	cmp	r0, #0
   160a8:	beq	16138 <__assert_fail@plt+0x4798>
   160ac:	mov	r3, #1
   160b0:	strb	r3, [sp, #120]	; 0x78
   160b4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   160b8:	mov	r1, r0
   160bc:	mov	r0, r7
   160c0:	bl	1a380 <__assert_fail@plt+0x89e0>
   160c4:	add	r3, sp, #124	; 0x7c
   160c8:	mov	r2, r0
   160cc:	mov	r1, r7
   160d0:	add	r0, sp, #148	; 0x94
   160d4:	bl	1b984 <__assert_fail@plt+0x9fe4>
   160d8:	str	r0, [sp, #140]	; 0x8c
   160dc:	cmn	r0, #1
   160e0:	beq	1614c <__assert_fail@plt+0x47ac>
   160e4:	cmn	r0, #2
   160e8:	beq	16160 <__assert_fail@plt+0x47c0>
   160ec:	cmp	r0, #0
   160f0:	bne	16118 <__assert_fail@plt+0x4778>
   160f4:	mov	r3, #1
   160f8:	str	r3, [sp, #140]	; 0x8c
   160fc:	ldr	r3, [sp, #136]	; 0x88
   16100:	ldrb	r3, [r3]
   16104:	cmp	r3, #0
   16108:	bne	16178 <__assert_fail@plt+0x47d8>
   1610c:	ldr	r3, [sp, #148]	; 0x94
   16110:	cmp	r3, #0
   16114:	bne	1618c <__assert_fail@plt+0x47ec>
   16118:	mov	r3, #1
   1611c:	strb	r3, [sp, #144]	; 0x90
   16120:	add	r0, sp, #124	; 0x7c
   16124:	bl	11604 <mbsinit@plt>
   16128:	cmp	r0, #0
   1612c:	movne	r3, #0
   16130:	strbne	r3, [sp, #120]	; 0x78
   16134:	b	16070 <__assert_fail@plt+0x46d0>
   16138:	ldr	r3, [pc, #3432]	; 16ea8 <__assert_fail@plt+0x5508>
   1613c:	mov	r2, #143	; 0x8f
   16140:	ldr	r1, [pc, #3428]	; 16eac <__assert_fail@plt+0x550c>
   16144:	ldr	r0, [pc, #3428]	; 16eb0 <__assert_fail@plt+0x5510>
   16148:	bl	119a0 <__assert_fail@plt>
   1614c:	mov	r3, #1
   16150:	str	r3, [sp, #140]	; 0x8c
   16154:	mov	r3, #0
   16158:	strb	r3, [sp, #144]	; 0x90
   1615c:	b	16070 <__assert_fail@plt+0x46d0>
   16160:	ldr	r0, [sp, #136]	; 0x88
   16164:	bl	117a8 <strlen@plt>
   16168:	str	r0, [sp, #140]	; 0x8c
   1616c:	mov	r3, #0
   16170:	strb	r3, [sp, #144]	; 0x90
   16174:	b	16070 <__assert_fail@plt+0x46d0>
   16178:	ldr	r3, [pc, #3368]	; 16ea8 <__assert_fail@plt+0x5508>
   1617c:	mov	r2, #171	; 0xab
   16180:	ldr	r1, [pc, #3364]	; 16eac <__assert_fail@plt+0x550c>
   16184:	ldr	r0, [pc, #3368]	; 16eb4 <__assert_fail@plt+0x5514>
   16188:	bl	119a0 <__assert_fail@plt>
   1618c:	ldr	r3, [pc, #3348]	; 16ea8 <__assert_fail@plt+0x5508>
   16190:	mov	r2, #172	; 0xac
   16194:	ldr	r1, [pc, #3344]	; 16eac <__assert_fail@plt+0x550c>
   16198:	ldr	r0, [pc, #3352]	; 16eb8 <__assert_fail@plt+0x5518>
   1619c:	bl	119a0 <__assert_fail@plt>
   161a0:	str	r7, [sp, #192]	; 0xc0
   161a4:	mov	r3, #0
   161a8:	strb	r3, [sp, #176]	; 0xb0
   161ac:	str	r3, [sp, #180]	; 0xb4
   161b0:	str	r3, [sp, #184]	; 0xb8
   161b4:	strb	r3, [sp, #188]	; 0xbc
   161b8:	ldr	r3, [sp, #136]	; 0x88
   161bc:	add	r2, sp, #152	; 0x98
   161c0:	cmp	r3, r2
   161c4:	strne	r3, [sp, #40]	; 0x28
   161c8:	beq	16234 <__assert_fail@plt+0x4894>
   161cc:	ldr	r3, [sp, #140]	; 0x8c
   161d0:	str	r3, [sp, #44]	; 0x2c
   161d4:	ldrb	r3, [sp, #144]	; 0x90
   161d8:	strb	r3, [sp, #48]	; 0x30
   161dc:	cmp	r3, #0
   161e0:	beq	161f4 <__assert_fail@plt+0x4854>
   161e4:	ldr	r0, [sp, #148]	; 0x94
   161e8:	str	r0, [sp, #52]	; 0x34
   161ec:	bl	115f8 <towlower@plt>
   161f0:	str	r0, [sp, #52]	; 0x34
   161f4:	ldr	r3, [sp, #4]
   161f8:	str	r3, [sp, #248]	; 0xf8
   161fc:	mov	r9, #0
   16200:	strb	r9, [sp, #232]	; 0xe8
   16204:	str	r9, [sp, #236]	; 0xec
   16208:	str	r9, [sp, #240]	; 0xf0
   1620c:	strb	r9, [sp, #244]	; 0xf4
   16210:	str	r9, [sp, #12]
   16214:	mov	sl, r9
   16218:	mov	r3, #1
   1621c:	mov	r4, r3
   16220:	mov	r5, r9
   16224:	ldr	r8, [pc, #3192]	; 16ea4 <__assert_fail@plt+0x5504>
   16228:	str	r7, [sp, #8]
   1622c:	mov	r7, r3
   16230:	b	16af8 <__assert_fail@plt+0x5158>
   16234:	add	r4, sp, #56	; 0x38
   16238:	ldr	r2, [sp, #140]	; 0x8c
   1623c:	add	r1, sp, #152	; 0x98
   16240:	mov	r0, r4
   16244:	bl	115d4 <memcpy@plt>
   16248:	str	r4, [sp, #40]	; 0x28
   1624c:	b	161cc <__assert_fail@plt+0x482c>
   16250:	add	r0, sp, #236	; 0xec
   16254:	bl	11604 <mbsinit@plt>
   16258:	cmp	r0, #0
   1625c:	beq	162e8 <__assert_fail@plt+0x4948>
   16260:	strb	r4, [sp, #232]	; 0xe8
   16264:	ldr	r6, [sp, #248]	; 0xf8
   16268:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1626c:	mov	r1, r0
   16270:	mov	r0, r6
   16274:	bl	1a380 <__assert_fail@plt+0x89e0>
   16278:	add	r3, sp, #236	; 0xec
   1627c:	mov	r2, r0
   16280:	mov	r1, r6
   16284:	add	r0, sp, #260	; 0x104
   16288:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1628c:	str	r0, [sp, #252]	; 0xfc
   16290:	cmn	r0, #1
   16294:	streq	r4, [sp, #252]	; 0xfc
   16298:	strbeq	r5, [sp, #256]	; 0x100
   1629c:	beq	16b40 <__assert_fail@plt+0x51a0>
   162a0:	cmn	r0, #2
   162a4:	beq	162fc <__assert_fail@plt+0x495c>
   162a8:	cmp	r0, #0
   162ac:	bne	162d0 <__assert_fail@plt+0x4930>
   162b0:	str	r4, [sp, #252]	; 0xfc
   162b4:	ldr	r3, [sp, #248]	; 0xf8
   162b8:	ldrb	r3, [r3]
   162bc:	cmp	r3, #0
   162c0:	bne	16310 <__assert_fail@plt+0x4970>
   162c4:	ldr	r3, [sp, #260]	; 0x104
   162c8:	cmp	r3, #0
   162cc:	bne	16324 <__assert_fail@plt+0x4984>
   162d0:	strb	r4, [sp, #256]	; 0x100
   162d4:	add	r0, sp, #236	; 0xec
   162d8:	bl	11604 <mbsinit@plt>
   162dc:	cmp	r0, #0
   162e0:	strbne	r5, [sp, #232]	; 0xe8
   162e4:	b	16b40 <__assert_fail@plt+0x51a0>
   162e8:	ldr	r3, [pc, #3000]	; 16ea8 <__assert_fail@plt+0x5508>
   162ec:	mov	r2, #143	; 0x8f
   162f0:	ldr	r1, [pc, #2996]	; 16eac <__assert_fail@plt+0x550c>
   162f4:	ldr	r0, [pc, #2996]	; 16eb0 <__assert_fail@plt+0x5510>
   162f8:	bl	119a0 <__assert_fail@plt>
   162fc:	ldr	r0, [sp, #248]	; 0xf8
   16300:	bl	117a8 <strlen@plt>
   16304:	str	r0, [sp, #252]	; 0xfc
   16308:	strb	r5, [sp, #256]	; 0x100
   1630c:	b	16b40 <__assert_fail@plt+0x51a0>
   16310:	ldr	r3, [pc, #2960]	; 16ea8 <__assert_fail@plt+0x5508>
   16314:	mov	r2, #171	; 0xab
   16318:	ldr	r1, [pc, #2956]	; 16eac <__assert_fail@plt+0x550c>
   1631c:	ldr	r0, [pc, #2960]	; 16eb4 <__assert_fail@plt+0x5514>
   16320:	bl	119a0 <__assert_fail@plt>
   16324:	ldr	r3, [pc, #2940]	; 16ea8 <__assert_fail@plt+0x5508>
   16328:	mov	r2, #172	; 0xac
   1632c:	ldr	r1, [pc, #2936]	; 16eac <__assert_fail@plt+0x550c>
   16330:	ldr	r0, [pc, #2944]	; 16eb8 <__assert_fail@plt+0x5518>
   16334:	bl	119a0 <__assert_fail@plt>
   16338:	ldr	r3, [sp, #260]	; 0x104
   1633c:	cmp	r3, #0
   16340:	bne	16b50 <__assert_fail@plt+0x51b0>
   16344:	mov	r0, #0
   16348:	b	16094 <__assert_fail@plt+0x46f4>
   1634c:	add	r0, sp, #180	; 0xb4
   16350:	bl	11604 <mbsinit@plt>
   16354:	cmp	r0, #0
   16358:	beq	16458 <__assert_fail@plt+0x4ab8>
   1635c:	strb	r4, [sp, #176]	; 0xb0
   16360:	ldr	fp, [sp, #192]	; 0xc0
   16364:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16368:	mov	r1, r0
   1636c:	mov	r0, fp
   16370:	bl	1a380 <__assert_fail@plt+0x89e0>
   16374:	add	r3, sp, #180	; 0xb4
   16378:	mov	r2, r0
   1637c:	mov	r1, fp
   16380:	add	r0, sp, #204	; 0xcc
   16384:	bl	1b984 <__assert_fail@plt+0x9fe4>
   16388:	str	r0, [sp, #196]	; 0xc4
   1638c:	cmn	r0, #1
   16390:	streq	r4, [sp, #196]	; 0xc4
   16394:	strbeq	r5, [sp, #200]	; 0xc8
   16398:	beq	163e0 <__assert_fail@plt+0x4a40>
   1639c:	cmn	r0, #2
   163a0:	beq	1646c <__assert_fail@plt+0x4acc>
   163a4:	cmp	r0, #0
   163a8:	bne	163cc <__assert_fail@plt+0x4a2c>
   163ac:	str	r4, [sp, #196]	; 0xc4
   163b0:	ldr	r3, [sp, #192]	; 0xc0
   163b4:	ldrb	r3, [r3]
   163b8:	cmp	r3, #0
   163bc:	bne	16480 <__assert_fail@plt+0x4ae0>
   163c0:	ldr	r3, [sp, #204]	; 0xcc
   163c4:	cmp	r3, #0
   163c8:	bne	16494 <__assert_fail@plt+0x4af4>
   163cc:	strb	r4, [sp, #200]	; 0xc8
   163d0:	add	r0, sp, #180	; 0xb4
   163d4:	bl	11604 <mbsinit@plt>
   163d8:	cmp	r0, #0
   163dc:	strbne	r5, [sp, #176]	; 0xb0
   163e0:	strb	r4, [sp, #188]	; 0xbc
   163e4:	ldrb	r3, [sp, #200]	; 0xc8
   163e8:	cmp	r3, #0
   163ec:	bne	164a8 <__assert_fail@plt+0x4b08>
   163f0:	ldr	r2, [sp, #196]	; 0xc4
   163f4:	ldr	r3, [sp, #192]	; 0xc0
   163f8:	add	r3, r3, r2
   163fc:	str	r3, [sp, #192]	; 0xc0
   16400:	strb	r5, [sp, #188]	; 0xbc
   16404:	subs	r6, r6, #1
   16408:	beq	16b88 <__assert_fail@plt+0x51e8>
   1640c:	ldrb	r3, [sp, #188]	; 0xbc
   16410:	cmp	r3, #0
   16414:	bne	163e4 <__assert_fail@plt+0x4a44>
   16418:	ldrb	r3, [sp, #176]	; 0xb0
   1641c:	cmp	r3, #0
   16420:	bne	16360 <__assert_fail@plt+0x49c0>
   16424:	ldr	r1, [sp, #192]	; 0xc0
   16428:	ldrb	r3, [r1]
   1642c:	lsr	r2, r3, #5
   16430:	and	r3, r3, #31
   16434:	ldr	r2, [r8, r2, lsl #2]
   16438:	lsr	r3, r2, r3
   1643c:	tst	r3, #1
   16440:	beq	1634c <__assert_fail@plt+0x49ac>
   16444:	str	r4, [sp, #196]	; 0xc4
   16448:	ldrb	r3, [r1]
   1644c:	str	r3, [sp, #204]	; 0xcc
   16450:	strb	r4, [sp, #200]	; 0xc8
   16454:	b	163e0 <__assert_fail@plt+0x4a40>
   16458:	ldr	r3, [pc, #2632]	; 16ea8 <__assert_fail@plt+0x5508>
   1645c:	mov	r2, #143	; 0x8f
   16460:	ldr	r1, [pc, #2628]	; 16eac <__assert_fail@plt+0x550c>
   16464:	ldr	r0, [pc, #2628]	; 16eb0 <__assert_fail@plt+0x5510>
   16468:	bl	119a0 <__assert_fail@plt>
   1646c:	ldr	r0, [sp, #192]	; 0xc0
   16470:	bl	117a8 <strlen@plt>
   16474:	str	r0, [sp, #196]	; 0xc4
   16478:	strb	r5, [sp, #200]	; 0xc8
   1647c:	b	163e0 <__assert_fail@plt+0x4a40>
   16480:	ldr	r3, [pc, #2592]	; 16ea8 <__assert_fail@plt+0x5508>
   16484:	mov	r2, #171	; 0xab
   16488:	ldr	r1, [pc, #2588]	; 16eac <__assert_fail@plt+0x550c>
   1648c:	ldr	r0, [pc, #2592]	; 16eb4 <__assert_fail@plt+0x5514>
   16490:	bl	119a0 <__assert_fail@plt>
   16494:	ldr	r3, [pc, #2572]	; 16ea8 <__assert_fail@plt+0x5508>
   16498:	mov	r2, #172	; 0xac
   1649c:	ldr	r1, [pc, #2568]	; 16eac <__assert_fail@plt+0x550c>
   164a0:	ldr	r0, [pc, #2576]	; 16eb8 <__assert_fail@plt+0x5518>
   164a4:	bl	119a0 <__assert_fail@plt>
   164a8:	ldr	r3, [sp, #204]	; 0xcc
   164ac:	cmp	r3, #0
   164b0:	bne	163f0 <__assert_fail@plt+0x4a50>
   164b4:	ldrb	r3, [sp, #188]	; 0xbc
   164b8:	cmp	r3, #0
   164bc:	beq	16b88 <__assert_fail@plt+0x51e8>
   164c0:	ldr	r3, [sp, #204]	; 0xcc
   164c4:	cmp	r3, #0
   164c8:	bne	165dc <__assert_fail@plt+0x4c3c>
   164cc:	add	r2, sp, #344	; 0x158
   164d0:	ldr	r1, [sp, #8]
   164d4:	ldr	r0, [sp, #4]
   164d8:	bl	156d0 <__assert_fail@plt+0x3d30>
   164dc:	subs	r7, r0, #0
   164e0:	bne	165d4 <__assert_fail@plt+0x4c34>
   164e4:	str	sl, [sp, #12]
   164e8:	b	16bd8 <__assert_fail@plt+0x5238>
   164ec:	add	r0, sp, #180	; 0xb4
   164f0:	bl	11604 <mbsinit@plt>
   164f4:	cmp	r0, #0
   164f8:	beq	16584 <__assert_fail@plt+0x4be4>
   164fc:	strb	r4, [sp, #176]	; 0xb0
   16500:	ldr	r6, [sp, #192]	; 0xc0
   16504:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16508:	mov	r1, r0
   1650c:	mov	r0, r6
   16510:	bl	1a380 <__assert_fail@plt+0x89e0>
   16514:	add	r3, sp, #180	; 0xb4
   16518:	mov	r2, r0
   1651c:	mov	r1, r6
   16520:	add	r0, sp, #204	; 0xcc
   16524:	bl	1b984 <__assert_fail@plt+0x9fe4>
   16528:	str	r0, [sp, #196]	; 0xc4
   1652c:	cmn	r0, #1
   16530:	streq	r4, [sp, #196]	; 0xc4
   16534:	strbeq	r5, [sp, #200]	; 0xc8
   16538:	beq	16bc4 <__assert_fail@plt+0x5224>
   1653c:	cmn	r0, #2
   16540:	beq	16598 <__assert_fail@plt+0x4bf8>
   16544:	cmp	r0, #0
   16548:	bne	1656c <__assert_fail@plt+0x4bcc>
   1654c:	str	r4, [sp, #196]	; 0xc4
   16550:	ldr	r3, [sp, #192]	; 0xc0
   16554:	ldrb	r3, [r3]
   16558:	cmp	r3, #0
   1655c:	bne	165ac <__assert_fail@plt+0x4c0c>
   16560:	ldr	r3, [sp, #204]	; 0xcc
   16564:	cmp	r3, #0
   16568:	bne	165c0 <__assert_fail@plt+0x4c20>
   1656c:	strb	r4, [sp, #200]	; 0xc8
   16570:	add	r0, sp, #180	; 0xb4
   16574:	bl	11604 <mbsinit@plt>
   16578:	cmp	r0, #0
   1657c:	strbne	r5, [sp, #176]	; 0xb0
   16580:	b	16bc4 <__assert_fail@plt+0x5224>
   16584:	ldr	r3, [pc, #2332]	; 16ea8 <__assert_fail@plt+0x5508>
   16588:	mov	r2, #143	; 0x8f
   1658c:	ldr	r1, [pc, #2328]	; 16eac <__assert_fail@plt+0x550c>
   16590:	ldr	r0, [pc, #2328]	; 16eb0 <__assert_fail@plt+0x5510>
   16594:	bl	119a0 <__assert_fail@plt>
   16598:	ldr	r0, [sp, #192]	; 0xc0
   1659c:	bl	117a8 <strlen@plt>
   165a0:	str	r0, [sp, #196]	; 0xc4
   165a4:	strb	r5, [sp, #200]	; 0xc8
   165a8:	b	16bc4 <__assert_fail@plt+0x5224>
   165ac:	ldr	r3, [pc, #2292]	; 16ea8 <__assert_fail@plt+0x5508>
   165b0:	mov	r2, #171	; 0xab
   165b4:	ldr	r1, [pc, #2288]	; 16eac <__assert_fail@plt+0x550c>
   165b8:	ldr	r0, [pc, #2292]	; 16eb4 <__assert_fail@plt+0x5514>
   165bc:	bl	119a0 <__assert_fail@plt>
   165c0:	ldr	r3, [pc, #2272]	; 16ea8 <__assert_fail@plt+0x5508>
   165c4:	mov	r2, #172	; 0xac
   165c8:	ldr	r1, [pc, #2268]	; 16eac <__assert_fail@plt+0x550c>
   165cc:	ldr	r0, [pc, #2276]	; 16eb8 <__assert_fail@plt+0x5518>
   165d0:	bl	119a0 <__assert_fail@plt>
   165d4:	ldr	r0, [sp, #344]	; 0x158
   165d8:	b	16094 <__assert_fail@plt+0x46f4>
   165dc:	str	sl, [sp, #12]
   165e0:	b	16bd8 <__assert_fail@plt+0x5238>
   165e4:	add	fp, sp, #96	; 0x60
   165e8:	ldr	r2, [sp, #252]	; 0xfc
   165ec:	add	r1, sp, #264	; 0x108
   165f0:	mov	r0, fp
   165f4:	bl	115d4 <memcpy@plt>
   165f8:	str	fp, [sp, #80]	; 0x50
   165fc:	b	16bf4 <__assert_fail@plt+0x5254>
   16600:	ldr	r3, [sp, #44]	; 0x2c
   16604:	cmp	r3, fp
   16608:	movne	r0, r5
   1660c:	beq	166bc <__assert_fail@plt+0x4d1c>
   16610:	cmp	r0, #0
   16614:	beq	16ae0 <__assert_fail@plt+0x5140>
   16618:	add	ip, sp, #288	; 0x120
   1661c:	add	lr, sp, #232	; 0xe8
   16620:	ldm	lr!, {r0, r1, r2, r3}
   16624:	stmia	ip!, {r0, r1, r2, r3}
   16628:	ldm	lr!, {r0, r1, r2, r3}
   1662c:	stmia	ip!, {r0, r1, r2, r3}
   16630:	ldm	lr!, {r0, r1, r2, r3}
   16634:	stmia	ip!, {r0, r1, r2, r3}
   16638:	ldm	lr, {r0, r1}
   1663c:	stm	ip, {r0, r1}
   16640:	ldr	r3, [sp, #304]	; 0x130
   16644:	add	fp, r3, fp
   16648:	str	fp, [sp, #304]	; 0x130
   1664c:	strb	r5, [sp, #300]	; 0x12c
   16650:	ldr	r3, [sp, #8]
   16654:	str	r3, [sp, #360]	; 0x168
   16658:	strb	r5, [sp, #344]	; 0x158
   1665c:	str	r5, [sp, #348]	; 0x15c
   16660:	str	r5, [sp, #352]	; 0x160
   16664:	strb	r5, [sp, #356]	; 0x164
   16668:	ldrb	r2, [r3]
   1666c:	lsr	r3, r2, #5
   16670:	and	r1, r2, #31
   16674:	ldr	r3, [r8, r3, lsl #2]
   16678:	lsr	r3, r3, r1
   1667c:	tst	r3, #1
   16680:	beq	166d8 <__assert_fail@plt+0x4d38>
   16684:	str	r4, [sp, #364]	; 0x16c
   16688:	str	r2, [sp, #372]	; 0x174
   1668c:	strb	r4, [sp, #368]	; 0x170
   16690:	strb	r4, [sp, #356]	; 0x164
   16694:	ldrb	r3, [sp, #368]	; 0x170
   16698:	cmp	r3, #0
   1669c:	bne	167c0 <__assert_fail@plt+0x4e20>
   166a0:	ldr	r2, [sp, #364]	; 0x16c
   166a4:	ldr	r3, [sp, #360]	; 0x168
   166a8:	add	r3, r3, r2
   166ac:	str	r3, [sp, #360]	; 0x168
   166b0:	strb	r5, [sp, #356]	; 0x164
   166b4:	add	r6, sl, #2
   166b8:	b	16a20 <__assert_fail@plt+0x5080>
   166bc:	mov	r2, fp
   166c0:	ldr	r1, [sp, #40]	; 0x28
   166c4:	ldr	r0, [sp, #80]	; 0x50
   166c8:	bl	1161c <memcmp@plt>
   166cc:	clz	r0, r0
   166d0:	lsr	r0, r0, #5
   166d4:	b	16610 <__assert_fail@plt+0x4c70>
   166d8:	add	r0, sp, #348	; 0x15c
   166dc:	bl	11604 <mbsinit@plt>
   166e0:	cmp	r0, #0
   166e4:	beq	16770 <__assert_fail@plt+0x4dd0>
   166e8:	strb	r4, [sp, #344]	; 0x158
   166ec:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   166f0:	mov	r1, r0
   166f4:	ldr	r6, [sp, #8]
   166f8:	mov	r0, r6
   166fc:	bl	1a380 <__assert_fail@plt+0x89e0>
   16700:	add	r3, sp, #348	; 0x15c
   16704:	mov	r2, r0
   16708:	mov	r1, r6
   1670c:	add	r0, sp, #372	; 0x174
   16710:	bl	1b984 <__assert_fail@plt+0x9fe4>
   16714:	str	r0, [sp, #364]	; 0x16c
   16718:	cmn	r0, #1
   1671c:	streq	r4, [sp, #364]	; 0x16c
   16720:	strbeq	r5, [sp, #368]	; 0x170
   16724:	beq	16690 <__assert_fail@plt+0x4cf0>
   16728:	cmn	r0, #2
   1672c:	beq	16784 <__assert_fail@plt+0x4de4>
   16730:	cmp	r0, #0
   16734:	bne	16758 <__assert_fail@plt+0x4db8>
   16738:	str	r4, [sp, #364]	; 0x16c
   1673c:	ldr	r3, [sp, #360]	; 0x168
   16740:	ldrb	r3, [r3]
   16744:	cmp	r3, #0
   16748:	bne	16798 <__assert_fail@plt+0x4df8>
   1674c:	ldr	r3, [sp, #372]	; 0x174
   16750:	cmp	r3, #0
   16754:	bne	167ac <__assert_fail@plt+0x4e0c>
   16758:	strb	r4, [sp, #368]	; 0x170
   1675c:	add	r0, sp, #348	; 0x15c
   16760:	bl	11604 <mbsinit@plt>
   16764:	cmp	r0, #0
   16768:	strbne	r5, [sp, #344]	; 0x158
   1676c:	b	16690 <__assert_fail@plt+0x4cf0>
   16770:	ldr	r3, [pc, #1840]	; 16ea8 <__assert_fail@plt+0x5508>
   16774:	mov	r2, #143	; 0x8f
   16778:	ldr	r1, [pc, #1836]	; 16eac <__assert_fail@plt+0x550c>
   1677c:	ldr	r0, [pc, #1836]	; 16eb0 <__assert_fail@plt+0x5510>
   16780:	bl	119a0 <__assert_fail@plt>
   16784:	ldr	r0, [sp, #360]	; 0x168
   16788:	bl	117a8 <strlen@plt>
   1678c:	str	r0, [sp, #364]	; 0x16c
   16790:	strb	r5, [sp, #368]	; 0x170
   16794:	b	16690 <__assert_fail@plt+0x4cf0>
   16798:	ldr	r3, [pc, #1800]	; 16ea8 <__assert_fail@plt+0x5508>
   1679c:	mov	r2, #171	; 0xab
   167a0:	ldr	r1, [pc, #1796]	; 16eac <__assert_fail@plt+0x550c>
   167a4:	ldr	r0, [pc, #1800]	; 16eb4 <__assert_fail@plt+0x5514>
   167a8:	bl	119a0 <__assert_fail@plt>
   167ac:	ldr	r3, [pc, #1780]	; 16ea8 <__assert_fail@plt+0x5508>
   167b0:	mov	r2, #172	; 0xac
   167b4:	ldr	r1, [pc, #1776]	; 16eac <__assert_fail@plt+0x550c>
   167b8:	ldr	r0, [pc, #1784]	; 16eb8 <__assert_fail@plt+0x5518>
   167bc:	bl	119a0 <__assert_fail@plt>
   167c0:	ldr	r3, [sp, #372]	; 0x174
   167c4:	cmp	r3, #0
   167c8:	bne	166a0 <__assert_fail@plt+0x4d00>
   167cc:	bl	11964 <abort@plt>
   167d0:	add	r0, sp, #348	; 0x15c
   167d4:	bl	11604 <mbsinit@plt>
   167d8:	cmp	r0, #0
   167dc:	beq	16868 <__assert_fail@plt+0x4ec8>
   167e0:	strb	r4, [sp, #344]	; 0x158
   167e4:	ldr	sl, [sp, #360]	; 0x168
   167e8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   167ec:	mov	r1, r0
   167f0:	mov	r0, sl
   167f4:	bl	1a380 <__assert_fail@plt+0x89e0>
   167f8:	add	r3, sp, #348	; 0x15c
   167fc:	mov	r2, r0
   16800:	mov	r1, sl
   16804:	add	r0, sp, #372	; 0x174
   16808:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1680c:	str	r0, [sp, #364]	; 0x16c
   16810:	cmn	r0, #1
   16814:	streq	r4, [sp, #364]	; 0x16c
   16818:	strbeq	r5, [sp, #368]	; 0x170
   1681c:	beq	16a68 <__assert_fail@plt+0x50c8>
   16820:	cmn	r0, #2
   16824:	beq	1687c <__assert_fail@plt+0x4edc>
   16828:	cmp	r0, #0
   1682c:	bne	16850 <__assert_fail@plt+0x4eb0>
   16830:	str	r4, [sp, #364]	; 0x16c
   16834:	ldr	r3, [sp, #360]	; 0x168
   16838:	ldrb	r3, [r3]
   1683c:	cmp	r3, #0
   16840:	bne	16890 <__assert_fail@plt+0x4ef0>
   16844:	ldr	r3, [sp, #372]	; 0x174
   16848:	cmp	r3, #0
   1684c:	bne	168a4 <__assert_fail@plt+0x4f04>
   16850:	strb	r4, [sp, #368]	; 0x170
   16854:	add	r0, sp, #348	; 0x15c
   16858:	bl	11604 <mbsinit@plt>
   1685c:	cmp	r0, #0
   16860:	strbne	r5, [sp, #344]	; 0x158
   16864:	b	16a68 <__assert_fail@plt+0x50c8>
   16868:	ldr	r3, [pc, #1592]	; 16ea8 <__assert_fail@plt+0x5508>
   1686c:	mov	r2, #143	; 0x8f
   16870:	ldr	r1, [pc, #1588]	; 16eac <__assert_fail@plt+0x550c>
   16874:	ldr	r0, [pc, #1588]	; 16eb0 <__assert_fail@plt+0x5510>
   16878:	bl	119a0 <__assert_fail@plt>
   1687c:	ldr	r0, [sp, #360]	; 0x168
   16880:	bl	117a8 <strlen@plt>
   16884:	str	r0, [sp, #364]	; 0x16c
   16888:	strb	r5, [sp, #368]	; 0x170
   1688c:	b	16a68 <__assert_fail@plt+0x50c8>
   16890:	ldr	r3, [pc, #1552]	; 16ea8 <__assert_fail@plt+0x5508>
   16894:	mov	r2, #171	; 0xab
   16898:	ldr	r1, [pc, #1548]	; 16eac <__assert_fail@plt+0x550c>
   1689c:	ldr	r0, [pc, #1552]	; 16eb4 <__assert_fail@plt+0x5514>
   168a0:	bl	119a0 <__assert_fail@plt>
   168a4:	ldr	r3, [pc, #1532]	; 16ea8 <__assert_fail@plt+0x5508>
   168a8:	mov	r2, #172	; 0xac
   168ac:	ldr	r1, [pc, #1528]	; 16eac <__assert_fail@plt+0x550c>
   168b0:	ldr	r0, [pc, #1536]	; 16eb8 <__assert_fail@plt+0x5518>
   168b4:	bl	119a0 <__assert_fail@plt>
   168b8:	ldr	r3, [sp, #372]	; 0x174
   168bc:	cmp	r3, #0
   168c0:	bne	16a78 <__assert_fail@plt+0x50d8>
   168c4:	ldr	r0, [sp, #248]	; 0xf8
   168c8:	b	16094 <__assert_fail@plt+0x46f4>
   168cc:	add	r0, sp, #292	; 0x124
   168d0:	bl	11604 <mbsinit@plt>
   168d4:	cmp	r0, #0
   168d8:	beq	16964 <__assert_fail@plt+0x4fc4>
   168dc:	strb	r4, [sp, #288]	; 0x120
   168e0:	ldr	sl, [sp, #304]	; 0x130
   168e4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   168e8:	mov	r1, r0
   168ec:	mov	r0, sl
   168f0:	bl	1a380 <__assert_fail@plt+0x89e0>
   168f4:	add	r3, sp, #292	; 0x124
   168f8:	mov	r2, r0
   168fc:	mov	r1, sl
   16900:	add	r0, sp, #316	; 0x13c
   16904:	bl	1b984 <__assert_fail@plt+0x9fe4>
   16908:	str	r0, [sp, #308]	; 0x134
   1690c:	cmn	r0, #1
   16910:	streq	r4, [sp, #308]	; 0x134
   16914:	strbeq	r5, [sp, #312]	; 0x138
   16918:	beq	16ac0 <__assert_fail@plt+0x5120>
   1691c:	cmn	r0, #2
   16920:	beq	16978 <__assert_fail@plt+0x4fd8>
   16924:	cmp	r0, #0
   16928:	bne	1694c <__assert_fail@plt+0x4fac>
   1692c:	str	r4, [sp, #308]	; 0x134
   16930:	ldr	r3, [sp, #304]	; 0x130
   16934:	ldrb	r3, [r3]
   16938:	cmp	r3, #0
   1693c:	bne	1698c <__assert_fail@plt+0x4fec>
   16940:	ldr	r3, [sp, #316]	; 0x13c
   16944:	cmp	r3, #0
   16948:	bne	169a0 <__assert_fail@plt+0x5000>
   1694c:	strb	r4, [sp, #312]	; 0x138
   16950:	add	r0, sp, #292	; 0x124
   16954:	bl	11604 <mbsinit@plt>
   16958:	cmp	r0, #0
   1695c:	strbne	r5, [sp, #288]	; 0x120
   16960:	b	16ac0 <__assert_fail@plt+0x5120>
   16964:	ldr	r3, [pc, #1340]	; 16ea8 <__assert_fail@plt+0x5508>
   16968:	mov	r2, #143	; 0x8f
   1696c:	ldr	r1, [pc, #1336]	; 16eac <__assert_fail@plt+0x550c>
   16970:	ldr	r0, [pc, #1336]	; 16eb0 <__assert_fail@plt+0x5510>
   16974:	bl	119a0 <__assert_fail@plt>
   16978:	ldr	r0, [sp, #304]	; 0x130
   1697c:	bl	117a8 <strlen@plt>
   16980:	str	r0, [sp, #308]	; 0x134
   16984:	strb	r5, [sp, #312]	; 0x138
   16988:	b	16ac0 <__assert_fail@plt+0x5120>
   1698c:	ldr	r3, [pc, #1300]	; 16ea8 <__assert_fail@plt+0x5508>
   16990:	mov	r2, #171	; 0xab
   16994:	ldr	r1, [pc, #1296]	; 16eac <__assert_fail@plt+0x550c>
   16998:	ldr	r0, [pc, #1300]	; 16eb4 <__assert_fail@plt+0x5514>
   1699c:	bl	119a0 <__assert_fail@plt>
   169a0:	ldr	r3, [pc, #1280]	; 16ea8 <__assert_fail@plt+0x5508>
   169a4:	mov	r2, #172	; 0xac
   169a8:	ldr	r1, [pc, #1276]	; 16eac <__assert_fail@plt+0x550c>
   169ac:	ldr	r0, [pc, #1284]	; 16eb8 <__assert_fail@plt+0x5518>
   169b0:	bl	119a0 <__assert_fail@plt>
   169b4:	ldr	r3, [sp, #316]	; 0x13c
   169b8:	cmp	r3, #0
   169bc:	beq	16c54 <__assert_fail@plt+0x52b4>
   169c0:	ldrb	r3, [sp, #368]	; 0x170
   169c4:	cmp	r3, #0
   169c8:	beq	16ad0 <__assert_fail@plt+0x5130>
   169cc:	ldr	r0, [sp, #316]	; 0x13c
   169d0:	bl	115f8 <towlower@plt>
   169d4:	mov	sl, r0
   169d8:	ldr	r0, [sp, #372]	; 0x174
   169dc:	bl	115f8 <towlower@plt>
   169e0:	subs	r0, sl, r0
   169e4:	movne	r0, #1
   169e8:	add	r2, r6, #1
   169ec:	cmp	r0, #0
   169f0:	bne	16ae0 <__assert_fail@plt+0x5140>
   169f4:	ldr	r1, [sp, #308]	; 0x134
   169f8:	ldr	r3, [sp, #304]	; 0x130
   169fc:	add	r3, r3, r1
   16a00:	str	r3, [sp, #304]	; 0x130
   16a04:	strb	r5, [sp, #300]	; 0x12c
   16a08:	ldr	r1, [sp, #364]	; 0x16c
   16a0c:	ldr	r3, [sp, #360]	; 0x168
   16a10:	add	r3, r3, r1
   16a14:	str	r3, [sp, #360]	; 0x168
   16a18:	strb	r5, [sp, #356]	; 0x164
   16a1c:	mov	r6, r2
   16a20:	ldrb	r3, [sp, #356]	; 0x164
   16a24:	cmp	r3, #0
   16a28:	bne	16a6c <__assert_fail@plt+0x50cc>
   16a2c:	ldrb	r3, [sp, #344]	; 0x158
   16a30:	cmp	r3, #0
   16a34:	bne	167e4 <__assert_fail@plt+0x4e44>
   16a38:	ldr	r1, [sp, #360]	; 0x168
   16a3c:	ldrb	r3, [r1]
   16a40:	lsr	r2, r3, #5
   16a44:	and	r3, r3, #31
   16a48:	ldr	r2, [r8, r2, lsl #2]
   16a4c:	lsr	r3, r2, r3
   16a50:	tst	r3, #1
   16a54:	beq	167d0 <__assert_fail@plt+0x4e30>
   16a58:	str	r4, [sp, #364]	; 0x16c
   16a5c:	ldrb	r3, [r1]
   16a60:	str	r3, [sp, #372]	; 0x174
   16a64:	strb	r4, [sp, #368]	; 0x170
   16a68:	strb	r4, [sp, #356]	; 0x164
   16a6c:	ldrb	r3, [sp, #368]	; 0x170
   16a70:	cmp	r3, #0
   16a74:	bne	168b8 <__assert_fail@plt+0x4f18>
   16a78:	ldrb	r3, [sp, #300]	; 0x12c
   16a7c:	cmp	r3, #0
   16a80:	bne	16ac4 <__assert_fail@plt+0x5124>
   16a84:	ldrb	r3, [sp, #288]	; 0x120
   16a88:	cmp	r3, #0
   16a8c:	bne	168e0 <__assert_fail@plt+0x4f40>
   16a90:	ldr	r1, [sp, #304]	; 0x130
   16a94:	ldrb	r3, [r1]
   16a98:	lsr	r2, r3, #5
   16a9c:	and	r3, r3, #31
   16aa0:	ldr	r2, [r8, r2, lsl #2]
   16aa4:	lsr	r3, r2, r3
   16aa8:	tst	r3, #1
   16aac:	beq	168cc <__assert_fail@plt+0x4f2c>
   16ab0:	str	r4, [sp, #308]	; 0x134
   16ab4:	ldrb	r3, [r1]
   16ab8:	str	r3, [sp, #316]	; 0x13c
   16abc:	strb	r4, [sp, #312]	; 0x138
   16ac0:	strb	r4, [sp, #300]	; 0x12c
   16ac4:	ldrb	r3, [sp, #312]	; 0x138
   16ac8:	cmp	r3, #0
   16acc:	bne	169b4 <__assert_fail@plt+0x5014>
   16ad0:	ldr	r2, [sp, #308]	; 0x134
   16ad4:	ldr	r3, [sp, #364]	; 0x16c
   16ad8:	cmp	r2, r3
   16adc:	beq	16c3c <__assert_fail@plt+0x529c>
   16ae0:	ldr	r2, [sp, #252]	; 0xfc
   16ae4:	ldr	r3, [sp, #248]	; 0xf8
   16ae8:	add	r3, r3, r2
   16aec:	str	r3, [sp, #248]	; 0xf8
   16af0:	strb	r5, [sp, #244]	; 0xf4
   16af4:	mov	sl, r6
   16af8:	ldrb	r3, [sp, #244]	; 0xf4
   16afc:	cmp	r3, #0
   16b00:	bne	16b44 <__assert_fail@plt+0x51a4>
   16b04:	ldrb	r3, [sp, #232]	; 0xe8
   16b08:	cmp	r3, #0
   16b0c:	bne	16264 <__assert_fail@plt+0x48c4>
   16b10:	ldr	r1, [sp, #248]	; 0xf8
   16b14:	ldrb	r3, [r1]
   16b18:	lsr	r2, r3, #5
   16b1c:	and	r3, r3, #31
   16b20:	ldr	r2, [r8, r2, lsl #2]
   16b24:	lsr	r3, r2, r3
   16b28:	tst	r3, #1
   16b2c:	beq	16250 <__assert_fail@plt+0x48b0>
   16b30:	str	r4, [sp, #252]	; 0xfc
   16b34:	ldrb	r3, [r1]
   16b38:	str	r3, [sp, #260]	; 0x104
   16b3c:	strb	r4, [sp, #256]	; 0x100
   16b40:	strb	r4, [sp, #244]	; 0xf4
   16b44:	ldrb	r3, [sp, #256]	; 0x100
   16b48:	cmp	r3, #0
   16b4c:	bne	16338 <__assert_fail@plt+0x4998>
   16b50:	cmp	r9, #9
   16b54:	movls	r3, #0
   16b58:	andhi	r3, r7, #1
   16b5c:	cmp	r3, #0
   16b60:	beq	16bd8 <__assert_fail@plt+0x5238>
   16b64:	add	r3, r9, r9, lsl #2
   16b68:	cmp	sl, r3
   16b6c:	bcc	16bd8 <__assert_fail@plt+0x5238>
   16b70:	ldr	r3, [sp, #12]
   16b74:	subs	r6, sl, r3
   16b78:	bne	1640c <__assert_fail@plt+0x4a6c>
   16b7c:	ldrb	r3, [sp, #188]	; 0xbc
   16b80:	cmp	r3, #0
   16b84:	bne	16bc8 <__assert_fail@plt+0x5228>
   16b88:	ldrb	r3, [sp, #176]	; 0xb0
   16b8c:	cmp	r3, #0
   16b90:	bne	16500 <__assert_fail@plt+0x4b60>
   16b94:	ldr	r1, [sp, #192]	; 0xc0
   16b98:	ldrb	r3, [r1]
   16b9c:	lsr	r2, r3, #5
   16ba0:	and	r3, r3, #31
   16ba4:	ldr	r2, [r8, r2, lsl #2]
   16ba8:	lsr	r3, r2, r3
   16bac:	tst	r3, #1
   16bb0:	beq	164ec <__assert_fail@plt+0x4b4c>
   16bb4:	str	r4, [sp, #196]	; 0xc4
   16bb8:	ldrb	r3, [r1]
   16bbc:	str	r3, [sp, #204]	; 0xcc
   16bc0:	strb	r4, [sp, #200]	; 0xc8
   16bc4:	strb	r4, [sp, #188]	; 0xbc
   16bc8:	ldrb	r3, [sp, #200]	; 0xc8
   16bcc:	cmp	r3, #0
   16bd0:	streq	sl, [sp, #12]
   16bd4:	bne	164c0 <__assert_fail@plt+0x4b20>
   16bd8:	add	r9, r9, #1
   16bdc:	add	r6, sl, #1
   16be0:	ldr	r3, [sp, #248]	; 0xf8
   16be4:	add	r2, sp, #264	; 0x108
   16be8:	cmp	r3, r2
   16bec:	strne	r3, [sp, #80]	; 0x50
   16bf0:	beq	165e4 <__assert_fail@plt+0x4c44>
   16bf4:	ldr	fp, [sp, #252]	; 0xfc
   16bf8:	str	fp, [sp, #84]	; 0x54
   16bfc:	ldrb	r3, [sp, #256]	; 0x100
   16c00:	strb	r3, [sp, #88]	; 0x58
   16c04:	cmp	r3, #0
   16c08:	beq	16600 <__assert_fail@plt+0x4c60>
   16c0c:	ldr	r0, [sp, #260]	; 0x104
   16c10:	str	r0, [sp, #92]	; 0x5c
   16c14:	bl	115f8 <towlower@plt>
   16c18:	str	r0, [sp, #92]	; 0x5c
   16c1c:	ldrb	r3, [sp, #48]	; 0x30
   16c20:	cmp	r3, #0
   16c24:	beq	16600 <__assert_fail@plt+0x4c60>
   16c28:	ldr	r3, [sp, #52]	; 0x34
   16c2c:	cmp	r0, r3
   16c30:	movne	r0, #0
   16c34:	moveq	r0, #1
   16c38:	b	16610 <__assert_fail@plt+0x4c70>
   16c3c:	ldr	r1, [sp, #360]	; 0x168
   16c40:	ldr	r0, [sp, #304]	; 0x130
   16c44:	bl	1161c <memcmp@plt>
   16c48:	adds	r0, r0, #0
   16c4c:	movne	r0, #1
   16c50:	b	169e8 <__assert_fail@plt+0x5048>
   16c54:	mov	r0, #0
   16c58:	b	16094 <__assert_fail@plt+0x46f4>
   16c5c:	ldrb	r4, [r7]
   16c60:	cmp	r4, #0
   16c64:	beq	16d78 <__assert_fail@plt+0x53d8>
   16c68:	bl	11778 <__ctype_b_loc@plt>
   16c6c:	str	r0, [sp, #12]
   16c70:	ldr	r2, [r0]
   16c74:	lsl	r3, r4, #1
   16c78:	ldrh	r3, [r2, r3]
   16c7c:	tst	r3, #256	; 0x100
   16c80:	streq	r4, [sp, #16]
   16c84:	beq	16c98 <__assert_fail@plt+0x52f8>
   16c88:	bl	11748 <__ctype_tolower_loc@plt>
   16c8c:	ldr	r3, [r0]
   16c90:	ldrb	r3, [r3, r4, lsl #2]
   16c94:	str	r3, [sp, #16]
   16c98:	ldr	r2, [sp, #4]
   16c9c:	ldrb	r3, [r2]
   16ca0:	cmp	r3, #0
   16ca4:	beq	16d80 <__assert_fail@plt+0x53e0>
   16ca8:	str	r7, [sp, #24]
   16cac:	mov	sl, #0
   16cb0:	mov	fp, sl
   16cb4:	str	sl, [sp, #28]
   16cb8:	mov	r3, #1
   16cbc:	str	r3, [sp, #20]
   16cc0:	b	16de0 <__assert_fail@plt+0x5440>
   16cc4:	ldr	fp, [sp, #36]	; 0x24
   16cc8:	ldr	r4, [sp, #32]
   16ccc:	b	16e3c <__assert_fail@plt+0x549c>
   16cd0:	ldr	r0, [sp, #344]	; 0x158
   16cd4:	b	16094 <__assert_fail@plt+0x46f4>
   16cd8:	ldrb	r4, [r7, #1]
   16cdc:	cmp	r4, #0
   16ce0:	beq	16d88 <__assert_fail@plt+0x53e8>
   16ce4:	ldr	r3, [sp, #4]
   16ce8:	str	r3, [sp, #32]
   16cec:	ldrb	r5, [r3]
   16cf0:	cmp	r5, #0
   16cf4:	beq	16d90 <__assert_fail@plt+0x53f0>
   16cf8:	mov	r6, #2
   16cfc:	str	fp, [sp, #36]	; 0x24
   16d00:	ldr	fp, [sp, #8]
   16d04:	b	16d30 <__assert_fail@plt+0x5390>
   16d08:	cmp	r5, r4
   16d0c:	bne	16cc4 <__assert_fail@plt+0x5324>
   16d10:	ldrb	r4, [r7, r6]
   16d14:	cmp	r4, #0
   16d18:	beq	16da0 <__assert_fail@plt+0x5400>
   16d1c:	add	r6, r6, #1
   16d20:	add	r3, fp, r6
   16d24:	ldrb	r5, [r3, #-1]
   16d28:	cmp	r5, #0
   16d2c:	beq	16d98 <__assert_fail@plt+0x53f8>
   16d30:	add	r9, r6, sl
   16d34:	lsl	r3, r5, #1
   16d38:	ldrh	r3, [r8, r3]
   16d3c:	tst	r3, #256	; 0x100
   16d40:	beq	16d50 <__assert_fail@plt+0x53b0>
   16d44:	bl	11748 <__ctype_tolower_loc@plt>
   16d48:	ldr	r3, [r0]
   16d4c:	ldr	r5, [r3, r5, lsl #2]
   16d50:	lsl	r3, r4, #1
   16d54:	ldrh	r3, [r8, r3]
   16d58:	tst	r3, #256	; 0x100
   16d5c:	beq	16d08 <__assert_fail@plt+0x5368>
   16d60:	bl	11748 <__ctype_tolower_loc@plt>
   16d64:	ldr	r3, [r0]
   16d68:	ldr	r4, [r3, r4, lsl #2]
   16d6c:	b	16d08 <__assert_fail@plt+0x5368>
   16d70:	mov	r0, #0
   16d74:	b	16094 <__assert_fail@plt+0x46f4>
   16d78:	ldr	r0, [sp, #4]
   16d7c:	b	16094 <__assert_fail@plt+0x46f4>
   16d80:	mov	r0, #0
   16d84:	b	16094 <__assert_fail@plt+0x46f4>
   16d88:	ldr	r0, [sp, #8]
   16d8c:	b	16094 <__assert_fail@plt+0x46f4>
   16d90:	mov	r0, #0
   16d94:	b	16094 <__assert_fail@plt+0x46f4>
   16d98:	mov	r0, #0
   16d9c:	b	16094 <__assert_fail@plt+0x46f4>
   16da0:	ldr	r0, [sp, #8]
   16da4:	b	16094 <__assert_fail@plt+0x46f4>
   16da8:	str	r9, [sp, #28]
   16dac:	mov	r0, r7
   16db0:	bl	117a8 <strlen@plt>
   16db4:	add	r3, sp, #344	; 0x158
   16db8:	mov	r2, r0
   16dbc:	mov	r1, r7
   16dc0:	mov	r0, r4
   16dc4:	bl	15498 <__assert_fail@plt+0x3af8>
   16dc8:	subs	r3, r0, #0
   16dcc:	str	r3, [sp, #20]
   16dd0:	bne	16cd0 <__assert_fail@plt+0x5330>
   16dd4:	mov	r3, #0
   16dd8:	str	r3, [sp, #24]
   16ddc:	mov	sl, r9
   16de0:	ldr	r3, [sp, #4]
   16de4:	str	r3, [sp, #8]
   16de8:	add	fp, fp, #1
   16dec:	add	r9, sl, #1
   16df0:	ldr	r2, [sp, #12]
   16df4:	ldr	r8, [r2]
   16df8:	ldrb	r4, [r3], #1
   16dfc:	str	r3, [sp, #4]
   16e00:	lsl	r3, r4, #1
   16e04:	ldrh	r3, [r8, r3]
   16e08:	tst	r3, #256	; 0x100
   16e0c:	beq	16e1c <__assert_fail@plt+0x547c>
   16e10:	bl	11748 <__ctype_tolower_loc@plt>
   16e14:	ldr	r3, [r0]
   16e18:	ldr	r4, [r3, r4, lsl #2]
   16e1c:	ldr	r3, [sp, #16]
   16e20:	cmp	r4, r3
   16e24:	beq	16cd8 <__assert_fail@plt+0x5338>
   16e28:	ldr	r3, [sp, #4]
   16e2c:	mov	r4, r3
   16e30:	ldrb	r3, [r3]
   16e34:	cmp	r3, #0
   16e38:	beq	16d70 <__assert_fail@plt+0x53d0>
   16e3c:	ldr	r3, [sp, #20]
   16e40:	cmp	fp, #9
   16e44:	movls	r3, #0
   16e48:	andhi	r3, r3, #1
   16e4c:	cmp	r3, #0
   16e50:	beq	16ddc <__assert_fail@plt+0x543c>
   16e54:	add	r3, fp, fp, lsl #2
   16e58:	cmp	r3, r9
   16e5c:	bhi	16ddc <__assert_fail@plt+0x543c>
   16e60:	ldr	r5, [sp, #24]
   16e64:	cmp	r5, #0
   16e68:	beq	16dac <__assert_fail@plt+0x540c>
   16e6c:	ldr	r2, [sp, #28]
   16e70:	sub	r1, r9, r2
   16e74:	mov	r0, r5
   16e78:	bl	11874 <strnlen@plt>
   16e7c:	mov	r2, r5
   16e80:	ldrb	r3, [r2, r0]!
   16e84:	str	r2, [sp, #24]
   16e88:	cmp	r3, #0
   16e8c:	beq	16da8 <__assert_fail@plt+0x5408>
   16e90:	cmp	r2, #0
   16e94:	strne	r9, [sp, #28]
   16e98:	bne	16ddc <__assert_fail@plt+0x543c>
   16e9c:	str	r9, [sp, #28]
   16ea0:	b	16dac <__assert_fail@plt+0x540c>
   16ea4:	andeq	ip, r2, r0, asr sp
   16ea8:	andeq	ip, r2, r0, lsr r5
   16eac:	andeq	ip, r2, r4, asr #10
   16eb0:	andeq	ip, r2, r0, asr r5
   16eb4:	andeq	ip, r2, r8, ror #10
   16eb8:	andeq	ip, r2, r0, lsl #11
   16ebc:	push	{r4, r5, r6, r7, r8, lr}
   16ec0:	sub	sp, sp, #56	; 0x38
   16ec4:	mov	r4, r0
   16ec8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16ecc:	cmp	r0, #1
   16ed0:	bls	17068 <__assert_fail@plt+0x56c8>
   16ed4:	str	r4, [sp, #16]
   16ed8:	mov	r4, #0
   16edc:	strb	r4, [sp]
   16ee0:	str	r4, [sp, #4]
   16ee4:	str	r4, [sp, #8]
   16ee8:	strb	r4, [sp, #12]
   16eec:	mov	r6, #1
   16ef0:	mov	r5, r4
   16ef4:	ldr	r7, [pc, #380]	; 17078 <__assert_fail@plt+0x56d8>
   16ef8:	b	16fb4 <__assert_fail@plt+0x5614>
   16efc:	add	r0, sp, #4
   16f00:	bl	11604 <mbsinit@plt>
   16f04:	cmp	r0, #0
   16f08:	beq	17000 <__assert_fail@plt+0x5660>
   16f0c:	strb	r6, [sp]
   16f10:	ldr	r8, [sp, #16]
   16f14:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   16f18:	mov	r1, r0
   16f1c:	mov	r0, r8
   16f20:	bl	1a380 <__assert_fail@plt+0x89e0>
   16f24:	add	r3, sp, #4
   16f28:	mov	r2, r0
   16f2c:	mov	r1, r8
   16f30:	add	r0, sp, #28
   16f34:	bl	1b984 <__assert_fail@plt+0x9fe4>
   16f38:	str	r0, [sp, #20]
   16f3c:	cmn	r0, #1
   16f40:	streq	r6, [sp, #20]
   16f44:	strbeq	r5, [sp, #24]
   16f48:	beq	16f90 <__assert_fail@plt+0x55f0>
   16f4c:	cmn	r0, #2
   16f50:	beq	17014 <__assert_fail@plt+0x5674>
   16f54:	cmp	r0, #0
   16f58:	bne	16f7c <__assert_fail@plt+0x55dc>
   16f5c:	str	r6, [sp, #20]
   16f60:	ldr	r3, [sp, #16]
   16f64:	ldrb	r3, [r3]
   16f68:	cmp	r3, #0
   16f6c:	bne	17028 <__assert_fail@plt+0x5688>
   16f70:	ldr	r3, [sp, #28]
   16f74:	cmp	r3, #0
   16f78:	bne	1703c <__assert_fail@plt+0x569c>
   16f7c:	strb	r6, [sp, #24]
   16f80:	add	r0, sp, #4
   16f84:	bl	11604 <mbsinit@plt>
   16f88:	cmp	r0, #0
   16f8c:	strbne	r5, [sp]
   16f90:	ldrb	r3, [sp, #24]
   16f94:	cmp	r3, #0
   16f98:	bne	17050 <__assert_fail@plt+0x56b0>
   16f9c:	add	r4, r4, #1
   16fa0:	ldr	r2, [sp, #20]
   16fa4:	ldr	r3, [sp, #16]
   16fa8:	add	r3, r3, r2
   16fac:	str	r3, [sp, #16]
   16fb0:	strb	r5, [sp, #12]
   16fb4:	ldrb	r3, [sp, #12]
   16fb8:	cmp	r3, #0
   16fbc:	bne	16f90 <__assert_fail@plt+0x55f0>
   16fc0:	ldrb	r3, [sp]
   16fc4:	cmp	r3, #0
   16fc8:	bne	16f10 <__assert_fail@plt+0x5570>
   16fcc:	ldr	r1, [sp, #16]
   16fd0:	ldrb	r3, [r1]
   16fd4:	lsr	r2, r3, #5
   16fd8:	and	r3, r3, #31
   16fdc:	ldr	r2, [r7, r2, lsl #2]
   16fe0:	lsr	r3, r2, r3
   16fe4:	tst	r3, #1
   16fe8:	beq	16efc <__assert_fail@plt+0x555c>
   16fec:	str	r6, [sp, #20]
   16ff0:	ldrb	r3, [r1]
   16ff4:	str	r3, [sp, #28]
   16ff8:	strb	r6, [sp, #24]
   16ffc:	b	16f90 <__assert_fail@plt+0x55f0>
   17000:	ldr	r3, [pc, #116]	; 1707c <__assert_fail@plt+0x56dc>
   17004:	mov	r2, #143	; 0x8f
   17008:	ldr	r1, [pc, #112]	; 17080 <__assert_fail@plt+0x56e0>
   1700c:	ldr	r0, [pc, #112]	; 17084 <__assert_fail@plt+0x56e4>
   17010:	bl	119a0 <__assert_fail@plt>
   17014:	ldr	r0, [sp, #16]
   17018:	bl	117a8 <strlen@plt>
   1701c:	str	r0, [sp, #20]
   17020:	strb	r5, [sp, #24]
   17024:	b	16f90 <__assert_fail@plt+0x55f0>
   17028:	ldr	r3, [pc, #76]	; 1707c <__assert_fail@plt+0x56dc>
   1702c:	mov	r2, #171	; 0xab
   17030:	ldr	r1, [pc, #72]	; 17080 <__assert_fail@plt+0x56e0>
   17034:	ldr	r0, [pc, #76]	; 17088 <__assert_fail@plt+0x56e8>
   17038:	bl	119a0 <__assert_fail@plt>
   1703c:	ldr	r3, [pc, #56]	; 1707c <__assert_fail@plt+0x56dc>
   17040:	mov	r2, #172	; 0xac
   17044:	ldr	r1, [pc, #52]	; 17080 <__assert_fail@plt+0x56e0>
   17048:	ldr	r0, [pc, #60]	; 1708c <__assert_fail@plt+0x56ec>
   1704c:	bl	119a0 <__assert_fail@plt>
   17050:	ldr	r3, [sp, #28]
   17054:	cmp	r3, #0
   17058:	bne	16f9c <__assert_fail@plt+0x55fc>
   1705c:	mov	r0, r4
   17060:	add	sp, sp, #56	; 0x38
   17064:	pop	{r4, r5, r6, r7, r8, pc}
   17068:	mov	r0, r4
   1706c:	bl	117a8 <strlen@plt>
   17070:	mov	r4, r0
   17074:	b	1705c <__assert_fail@plt+0x56bc>
   17078:	andeq	ip, r2, r0, asr sp
   1707c:	muleq	r2, r4, r5
   17080:	andeq	ip, r2, r4, asr #10
   17084:	andeq	ip, r2, r0, asr r5
   17088:	andeq	ip, r2, r8, ror #10
   1708c:	andeq	ip, r2, r0, lsl #11
   17090:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17094:	add	fp, sp, #28
   17098:	mov	r7, r3
   1709c:	lsr	r8, r2, #30
   170a0:	lsl	r3, r2, #2
   170a4:	adds	r8, r8, #0
   170a8:	movne	r8, #1
   170ac:	cmp	r3, #0
   170b0:	movlt	r8, #1
   170b4:	cmp	r8, #0
   170b8:	movne	r8, #0
   170bc:	bne	171dc <__assert_fail@plt+0x583c>
   170c0:	mov	r5, r0
   170c4:	mov	r4, r1
   170c8:	mov	r6, r2
   170cc:	mov	r0, r3
   170d0:	cmp	r3, #4016	; 0xfb0
   170d4:	bhi	17118 <__assert_fail@plt+0x5778>
   170d8:	add	r3, r3, #29
   170dc:	bic	r3, r3, #7
   170e0:	sub	sp, sp, r3
   170e4:	add	r0, sp, #15
   170e8:	bic	r0, r0, #15
   170ec:	cmp	r0, #0
   170f0:	beq	171dc <__assert_fail@plt+0x583c>
   170f4:	mov	r3, #1
   170f8:	str	r3, [r0, #4]
   170fc:	cmp	r6, #2
   17100:	bls	1717c <__assert_fail@plt+0x57dc>
   17104:	mov	r8, r4
   17108:	add	lr, r0, #8
   1710c:	mov	r3, #0
   17110:	mov	ip, #2
   17114:	b	1713c <__assert_fail@plt+0x579c>
   17118:	bl	2a758 <__assert_fail@plt+0x18db8>
   1711c:	b	170ec <__assert_fail@plt+0x574c>
   17120:	add	r3, r3, #1
   17124:	sub	r2, ip, r3
   17128:	str	r2, [lr]
   1712c:	add	ip, ip, #1
   17130:	add	lr, lr, #4
   17134:	cmp	r6, ip
   17138:	beq	1717c <__assert_fail@plt+0x57dc>
   1713c:	ldrb	r1, [r8, #1]!
   17140:	ldrb	r2, [r4, r3]
   17144:	cmp	r2, r1
   17148:	beq	17120 <__assert_fail@plt+0x5780>
   1714c:	cmp	r3, #0
   17150:	beq	17170 <__assert_fail@plt+0x57d0>
   17154:	ldr	r2, [r0, r3, lsl #2]
   17158:	sub	r3, r3, r2
   1715c:	ldrb	r2, [r4, r3]
   17160:	cmp	r2, r1
   17164:	beq	17120 <__assert_fail@plt+0x5780>
   17168:	cmp	r3, #0
   1716c:	bne	17154 <__assert_fail@plt+0x57b4>
   17170:	str	ip, [lr]
   17174:	mov	r3, #0
   17178:	b	1712c <__assert_fail@plt+0x578c>
   1717c:	mov	r3, #0
   17180:	str	r3, [r7]
   17184:	mov	r1, r5
   17188:	b	1719c <__assert_fail@plt+0x57fc>
   1718c:	add	r3, r3, #1
   17190:	add	r1, r1, #1
   17194:	cmp	r6, r3
   17198:	beq	171d0 <__assert_fail@plt+0x5830>
   1719c:	ldrb	r2, [r1]
   171a0:	cmp	r2, #0
   171a4:	beq	171d4 <__assert_fail@plt+0x5834>
   171a8:	ldrb	ip, [r4, r3]
   171ac:	cmp	ip, r2
   171b0:	beq	1718c <__assert_fail@plt+0x57ec>
   171b4:	cmp	r3, #0
   171b8:	ldrne	r2, [r0, r3, lsl #2]
   171bc:	addne	r5, r5, r2
   171c0:	subne	r3, r3, r2
   171c4:	addeq	r5, r5, #1
   171c8:	addeq	r1, r1, #1
   171cc:	b	1719c <__assert_fail@plt+0x57fc>
   171d0:	str	r5, [r7]
   171d4:	bl	2a7a0 <__assert_fail@plt+0x18e00>
   171d8:	mov	r8, #1
   171dc:	mov	r0, r8
   171e0:	sub	sp, fp, #28
   171e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   171e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171ec:	add	fp, sp, #32
   171f0:	sub	sp, sp, #140	; 0x8c
   171f4:	str	r0, [fp, #-172]	; 0xffffff54
   171f8:	mov	r4, r1
   171fc:	str	r2, [fp, #-168]	; 0xffffff58
   17200:	mov	r0, r1
   17204:	bl	16ebc <__assert_fail@plt+0x551c>
   17208:	str	r0, [fp, #-160]	; 0xffffff60
   1720c:	mov	r2, #44	; 0x2c
   17210:	umull	r2, r3, r0, r2
   17214:	adds	r3, r3, #0
   17218:	movne	r3, #1
   1721c:	mov	r1, r3
   17220:	cmp	r2, #0
   17224:	movlt	r1, #1
   17228:	str	r1, [fp, #-152]	; 0xffffff68
   1722c:	cmp	r1, #0
   17230:	bne	17a94 <__assert_fail@plt+0x60f4>
   17234:	mov	ip, r0
   17238:	mov	r0, #44	; 0x2c
   1723c:	mul	r0, r0, ip
   17240:	cmp	r0, #4016	; 0xfb0
   17244:	bhi	1729c <__assert_fail@plt+0x58fc>
   17248:	add	r3, r0, #29
   1724c:	bic	r3, r3, #7
   17250:	sub	sp, sp, r3
   17254:	add	r3, sp, #15
   17258:	bic	r9, r3, #15
   1725c:	cmp	r9, #0
   17260:	beq	17aa0 <__assert_fail@plt+0x6100>
   17264:	ldr	r3, [fp, #-160]	; 0xffffff60
   17268:	add	sl, r3, r3, lsl #2
   1726c:	add	sl, r9, sl, lsl #3
   17270:	str	r4, [fp, #-76]	; 0xffffffb4
   17274:	mov	r3, #0
   17278:	strb	r3, [fp, #-92]	; 0xffffffa4
   1727c:	str	r3, [fp, #-88]	; 0xffffffa8
   17280:	str	r3, [fp, #-84]	; 0xffffffac
   17284:	strb	r3, [fp, #-80]	; 0xffffffb0
   17288:	add	r4, r9, #16
   1728c:	mov	r5, #1
   17290:	mov	r6, r3
   17294:	sub	r7, fp, #60	; 0x3c
   17298:	b	173a4 <__assert_fail@plt+0x5a04>
   1729c:	bl	2a758 <__assert_fail@plt+0x18db8>
   172a0:	mov	r9, r0
   172a4:	b	1725c <__assert_fail@plt+0x58bc>
   172a8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   172ac:	mov	r1, r7
   172b0:	mov	r0, r4
   172b4:	bl	115d4 <memcpy@plt>
   172b8:	str	r4, [r4, #-16]
   172bc:	b	17374 <__assert_fail@plt+0x59d4>
   172c0:	sub	r0, fp, #88	; 0x58
   172c4:	bl	11604 <mbsinit@plt>
   172c8:	cmp	r0, #0
   172cc:	beq	173f4 <__assert_fail@plt+0x5a54>
   172d0:	strb	r5, [fp, #-92]	; 0xffffffa4
   172d4:	ldr	r8, [fp, #-76]	; 0xffffffb4
   172d8:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   172dc:	mov	r1, r0
   172e0:	mov	r0, r8
   172e4:	bl	1a380 <__assert_fail@plt+0x89e0>
   172e8:	sub	r3, fp, #88	; 0x58
   172ec:	mov	r2, r0
   172f0:	mov	r1, r8
   172f4:	sub	r0, fp, #64	; 0x40
   172f8:	bl	1b984 <__assert_fail@plt+0x9fe4>
   172fc:	str	r0, [fp, #-72]	; 0xffffffb8
   17300:	cmn	r0, #1
   17304:	streq	r5, [fp, #-72]	; 0xffffffb8
   17308:	strbeq	r6, [fp, #-68]	; 0xffffffbc
   1730c:	beq	17354 <__assert_fail@plt+0x59b4>
   17310:	cmn	r0, #2
   17314:	beq	17408 <__assert_fail@plt+0x5a68>
   17318:	cmp	r0, #0
   1731c:	bne	17340 <__assert_fail@plt+0x59a0>
   17320:	str	r5, [fp, #-72]	; 0xffffffb8
   17324:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17328:	ldrb	r3, [r3]
   1732c:	cmp	r3, #0
   17330:	bne	1741c <__assert_fail@plt+0x5a7c>
   17334:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17338:	cmp	r3, #0
   1733c:	bne	17430 <__assert_fail@plt+0x5a90>
   17340:	strb	r5, [fp, #-68]	; 0xffffffbc
   17344:	sub	r0, fp, #88	; 0x58
   17348:	bl	11604 <mbsinit@plt>
   1734c:	cmp	r0, #0
   17350:	strbne	r6, [fp, #-92]	; 0xffffffa4
   17354:	strb	r5, [fp, #-80]	; 0xffffffb0
   17358:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   1735c:	cmp	r3, #0
   17360:	bne	17444 <__assert_fail@plt+0x5aa4>
   17364:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17368:	cmp	r3, r7
   1736c:	strne	r3, [r4, #-16]
   17370:	beq	172a8 <__assert_fail@plt+0x5908>
   17374:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17378:	str	r2, [r4, #-12]
   1737c:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   17380:	strb	r3, [r4, #-8]
   17384:	cmp	r3, #0
   17388:	ldrne	r3, [fp, #-64]	; 0xffffffc0
   1738c:	strne	r3, [r4, #-4]
   17390:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17394:	add	r3, r3, r2
   17398:	str	r3, [fp, #-76]	; 0xffffffb4
   1739c:	strb	r6, [fp, #-80]	; 0xffffffb0
   173a0:	add	r4, r4, #40	; 0x28
   173a4:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   173a8:	cmp	r3, #0
   173ac:	bne	17358 <__assert_fail@plt+0x59b8>
   173b0:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   173b4:	cmp	r3, #0
   173b8:	bne	172d4 <__assert_fail@plt+0x5934>
   173bc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   173c0:	ldrb	r3, [r1]
   173c4:	lsr	r2, r3, #5
   173c8:	and	r3, r3, #31
   173cc:	ldr	r0, [pc, #1752]	; 17aac <__assert_fail@plt+0x610c>
   173d0:	ldr	r2, [r0, r2, lsl #2]
   173d4:	lsr	r3, r2, r3
   173d8:	tst	r3, #1
   173dc:	beq	172c0 <__assert_fail@plt+0x5920>
   173e0:	str	r5, [fp, #-72]	; 0xffffffb8
   173e4:	ldrb	r3, [r1]
   173e8:	str	r3, [fp, #-64]	; 0xffffffc0
   173ec:	strb	r5, [fp, #-68]	; 0xffffffbc
   173f0:	b	17354 <__assert_fail@plt+0x59b4>
   173f4:	ldr	r3, [pc, #1716]	; 17ab0 <__assert_fail@plt+0x6110>
   173f8:	mov	r2, #143	; 0x8f
   173fc:	ldr	r1, [pc, #1712]	; 17ab4 <__assert_fail@plt+0x6114>
   17400:	ldr	r0, [pc, #1712]	; 17ab8 <__assert_fail@plt+0x6118>
   17404:	bl	119a0 <__assert_fail@plt>
   17408:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1740c:	bl	117a8 <strlen@plt>
   17410:	str	r0, [fp, #-72]	; 0xffffffb8
   17414:	strb	r6, [fp, #-68]	; 0xffffffbc
   17418:	b	17354 <__assert_fail@plt+0x59b4>
   1741c:	ldr	r3, [pc, #1676]	; 17ab0 <__assert_fail@plt+0x6110>
   17420:	mov	r2, #171	; 0xab
   17424:	ldr	r1, [pc, #1672]	; 17ab4 <__assert_fail@plt+0x6114>
   17428:	ldr	r0, [pc, #1676]	; 17abc <__assert_fail@plt+0x611c>
   1742c:	bl	119a0 <__assert_fail@plt>
   17430:	ldr	r3, [pc, #1656]	; 17ab0 <__assert_fail@plt+0x6110>
   17434:	mov	r2, #172	; 0xac
   17438:	ldr	r1, [pc, #1652]	; 17ab4 <__assert_fail@plt+0x6114>
   1743c:	ldr	r0, [pc, #1660]	; 17ac0 <__assert_fail@plt+0x6120>
   17440:	bl	119a0 <__assert_fail@plt>
   17444:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17448:	cmp	r2, #0
   1744c:	bne	17364 <__assert_fail@plt+0x59c4>
   17450:	str	r3, [fp, #-164]	; 0xffffff5c
   17454:	mov	r3, #1
   17458:	str	r3, [sl, #4]
   1745c:	ldr	r3, [fp, #-160]	; 0xffffff60
   17460:	cmp	r3, #2
   17464:	bls	17548 <__assert_fail@plt+0x5ba8>
   17468:	mov	r8, r9
   1746c:	add	r3, sl, #8
   17470:	str	r3, [fp, #-156]	; 0xffffff64
   17474:	mov	r4, #0
   17478:	mov	r7, #2
   1747c:	b	17530 <__assert_fail@plt+0x5b90>
   17480:	ldr	r2, [r5, #44]	; 0x2c
   17484:	add	r3, r4, r4, lsl #2
   17488:	add	r1, r9, r3, lsl #3
   1748c:	ldr	r1, [r1, #4]
   17490:	cmp	r2, r1
   17494:	ldrne	r0, [fp, #-152]	; 0xffffff68
   17498:	beq	174e8 <__assert_fail@plt+0x5b48>
   1749c:	cmp	r0, #0
   174a0:	bne	17500 <__assert_fail@plt+0x5b60>
   174a4:	cmp	r4, #0
   174a8:	beq	1753c <__assert_fail@plt+0x5b9c>
   174ac:	ldr	r3, [sl, r4, lsl #2]
   174b0:	sub	r4, r4, r3
   174b4:	cmp	r6, #0
   174b8:	beq	17480 <__assert_fail@plt+0x5ae0>
   174bc:	add	r3, r4, r4, lsl #2
   174c0:	add	r3, r9, r3, lsl #3
   174c4:	ldrb	r2, [r3, #8]
   174c8:	cmp	r2, #0
   174cc:	beq	17480 <__assert_fail@plt+0x5ae0>
   174d0:	ldr	r0, [r5, #52]	; 0x34
   174d4:	ldr	r3, [r3, #12]
   174d8:	cmp	r0, r3
   174dc:	movne	r0, #0
   174e0:	moveq	r0, #1
   174e4:	b	1749c <__assert_fail@plt+0x5afc>
   174e8:	ldr	r1, [r9, r3, lsl #3]
   174ec:	ldr	r0, [r5, #40]	; 0x28
   174f0:	bl	1161c <memcmp@plt>
   174f4:	clz	r0, r0
   174f8:	lsr	r0, r0, #5
   174fc:	b	1749c <__assert_fail@plt+0x5afc>
   17500:	add	r4, r4, #1
   17504:	sub	r3, r7, r4
   17508:	ldr	r2, [fp, #-156]	; 0xffffff64
   1750c:	str	r3, [r2]
   17510:	add	r7, r7, #1
   17514:	add	r8, r8, #40	; 0x28
   17518:	ldr	r3, [fp, #-156]	; 0xffffff64
   1751c:	add	r3, r3, #4
   17520:	str	r3, [fp, #-156]	; 0xffffff64
   17524:	ldr	r3, [fp, #-160]	; 0xffffff60
   17528:	cmp	r3, r7
   1752c:	beq	17548 <__assert_fail@plt+0x5ba8>
   17530:	mov	r5, r8
   17534:	ldrb	r6, [r8, #48]	; 0x30
   17538:	b	174b4 <__assert_fail@plt+0x5b14>
   1753c:	ldr	r3, [fp, #-156]	; 0xffffff64
   17540:	str	r7, [r3]
   17544:	b	17510 <__assert_fail@plt+0x5b70>
   17548:	mov	r8, #0
   1754c:	ldr	r3, [fp, #-168]	; 0xffffff58
   17550:	str	r8, [r3]
   17554:	ldr	r3, [fp, #-172]	; 0xffffff54
   17558:	str	r3, [fp, #-132]	; 0xffffff7c
   1755c:	strb	r8, [fp, #-148]	; 0xffffff6c
   17560:	str	r8, [fp, #-144]	; 0xffffff70
   17564:	str	r8, [fp, #-140]	; 0xffffff74
   17568:	strb	r8, [fp, #-136]	; 0xffffff78
   1756c:	str	r3, [fp, #-76]	; 0xffffffb4
   17570:	strb	r8, [fp, #-92]	; 0xffffffa4
   17574:	str	r8, [fp, #-88]	; 0xffffffa8
   17578:	str	r8, [fp, #-84]	; 0xffffffac
   1757c:	strb	r8, [fp, #-80]	; 0xffffffb0
   17580:	mov	r5, #1
   17584:	mov	r6, r8
   17588:	ldr	r7, [pc, #1308]	; 17aac <__assert_fail@plt+0x610c>
   1758c:	str	sl, [fp, #-156]	; 0xffffff64
   17590:	b	179c0 <__assert_fail@plt+0x6020>
   17594:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17598:	ldr	r0, [r3]
   1759c:	bl	1161c <memcmp@plt>
   175a0:	clz	r0, r0
   175a4:	lsr	r0, r0, #5
   175a8:	b	17994 <__assert_fail@plt+0x5ff4>
   175ac:	ldr	r3, [fp, #-132]	; 0xffffff7c
   175b0:	ldr	r2, [fp, #-168]	; 0xffffff58
   175b4:	str	r3, [r2]
   175b8:	mov	r0, r9
   175bc:	bl	2a7a0 <__assert_fail@plt+0x18e00>
   175c0:	ldr	r0, [fp, #-164]	; 0xffffff5c
   175c4:	sub	sp, fp, #32
   175c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175cc:	cmp	r8, #0
   175d0:	beq	17758 <__assert_fail@plt+0x5db8>
   175d4:	ldr	r3, [fp, #-156]	; 0xffffff64
   175d8:	ldr	r4, [r3, r8, lsl #2]
   175dc:	sub	r8, r8, r4
   175e0:	cmp	r4, #0
   175e4:	bne	176ac <__assert_fail@plt+0x5d0c>
   175e8:	b	179c0 <__assert_fail@plt+0x6020>
   175ec:	sub	r0, fp, #144	; 0x90
   175f0:	bl	11604 <mbsinit@plt>
   175f4:	cmp	r0, #0
   175f8:	beq	176f8 <__assert_fail@plt+0x5d58>
   175fc:	strb	r5, [fp, #-148]	; 0xffffff6c
   17600:	ldr	sl, [fp, #-132]	; 0xffffff7c
   17604:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17608:	mov	r1, r0
   1760c:	mov	r0, sl
   17610:	bl	1a380 <__assert_fail@plt+0x89e0>
   17614:	sub	r3, fp, #144	; 0x90
   17618:	mov	r2, r0
   1761c:	mov	r1, sl
   17620:	sub	r0, fp, #120	; 0x78
   17624:	bl	1b984 <__assert_fail@plt+0x9fe4>
   17628:	str	r0, [fp, #-128]	; 0xffffff80
   1762c:	cmn	r0, #1
   17630:	streq	r5, [fp, #-128]	; 0xffffff80
   17634:	strbeq	r6, [fp, #-124]	; 0xffffff84
   17638:	beq	17680 <__assert_fail@plt+0x5ce0>
   1763c:	cmn	r0, #2
   17640:	beq	1770c <__assert_fail@plt+0x5d6c>
   17644:	cmp	r0, #0
   17648:	bne	1766c <__assert_fail@plt+0x5ccc>
   1764c:	str	r5, [fp, #-128]	; 0xffffff80
   17650:	ldr	r3, [fp, #-132]	; 0xffffff7c
   17654:	ldrb	r3, [r3]
   17658:	cmp	r3, #0
   1765c:	bne	17720 <__assert_fail@plt+0x5d80>
   17660:	ldr	r3, [fp, #-120]	; 0xffffff88
   17664:	cmp	r3, #0
   17668:	bne	17734 <__assert_fail@plt+0x5d94>
   1766c:	strb	r5, [fp, #-124]	; 0xffffff84
   17670:	sub	r0, fp, #144	; 0x90
   17674:	bl	11604 <mbsinit@plt>
   17678:	cmp	r0, #0
   1767c:	strbne	r6, [fp, #-148]	; 0xffffff6c
   17680:	strb	r5, [fp, #-136]	; 0xffffff78
   17684:	ldrb	r3, [fp, #-124]	; 0xffffff84
   17688:	cmp	r3, #0
   1768c:	bne	17748 <__assert_fail@plt+0x5da8>
   17690:	ldr	r2, [fp, #-128]	; 0xffffff80
   17694:	ldr	r3, [fp, #-132]	; 0xffffff7c
   17698:	add	r3, r3, r2
   1769c:	str	r3, [fp, #-132]	; 0xffffff7c
   176a0:	strb	r6, [fp, #-136]	; 0xffffff78
   176a4:	subs	r4, r4, #1
   176a8:	beq	179c0 <__assert_fail@plt+0x6020>
   176ac:	ldrb	r3, [fp, #-136]	; 0xffffff78
   176b0:	cmp	r3, #0
   176b4:	bne	17684 <__assert_fail@plt+0x5ce4>
   176b8:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   176bc:	cmp	r3, #0
   176c0:	bne	17600 <__assert_fail@plt+0x5c60>
   176c4:	ldr	r1, [fp, #-132]	; 0xffffff7c
   176c8:	ldrb	r3, [r1]
   176cc:	lsr	r2, r3, #5
   176d0:	and	r3, r3, #31
   176d4:	ldr	r2, [r7, r2, lsl #2]
   176d8:	lsr	r3, r2, r3
   176dc:	tst	r3, #1
   176e0:	beq	175ec <__assert_fail@plt+0x5c4c>
   176e4:	str	r5, [fp, #-128]	; 0xffffff80
   176e8:	ldrb	r3, [r1]
   176ec:	str	r3, [fp, #-120]	; 0xffffff88
   176f0:	strb	r5, [fp, #-124]	; 0xffffff84
   176f4:	b	17680 <__assert_fail@plt+0x5ce0>
   176f8:	ldr	r3, [pc, #944]	; 17ab0 <__assert_fail@plt+0x6110>
   176fc:	mov	r2, #143	; 0x8f
   17700:	ldr	r1, [pc, #940]	; 17ab4 <__assert_fail@plt+0x6114>
   17704:	ldr	r0, [pc, #940]	; 17ab8 <__assert_fail@plt+0x6118>
   17708:	bl	119a0 <__assert_fail@plt>
   1770c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   17710:	bl	117a8 <strlen@plt>
   17714:	str	r0, [fp, #-128]	; 0xffffff80
   17718:	strb	r6, [fp, #-124]	; 0xffffff84
   1771c:	b	17680 <__assert_fail@plt+0x5ce0>
   17720:	ldr	r3, [pc, #904]	; 17ab0 <__assert_fail@plt+0x6110>
   17724:	mov	r2, #171	; 0xab
   17728:	ldr	r1, [pc, #900]	; 17ab4 <__assert_fail@plt+0x6114>
   1772c:	ldr	r0, [pc, #904]	; 17abc <__assert_fail@plt+0x611c>
   17730:	bl	119a0 <__assert_fail@plt>
   17734:	ldr	r3, [pc, #884]	; 17ab0 <__assert_fail@plt+0x6110>
   17738:	mov	r2, #172	; 0xac
   1773c:	ldr	r1, [pc, #880]	; 17ab4 <__assert_fail@plt+0x6114>
   17740:	ldr	r0, [pc, #888]	; 17ac0 <__assert_fail@plt+0x6120>
   17744:	bl	119a0 <__assert_fail@plt>
   17748:	ldr	r3, [fp, #-120]	; 0xffffff88
   1774c:	cmp	r3, #0
   17750:	bne	17690 <__assert_fail@plt+0x5cf0>
   17754:	bl	11964 <abort@plt>
   17758:	ldrb	r3, [fp, #-136]	; 0xffffff78
   1775c:	cmp	r3, #0
   17760:	bne	177a4 <__assert_fail@plt+0x5e04>
   17764:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   17768:	cmp	r3, #0
   1776c:	bne	177f0 <__assert_fail@plt+0x5e50>
   17770:	ldr	r1, [fp, #-132]	; 0xffffff7c
   17774:	ldrb	r3, [r1]
   17778:	lsr	r2, r3, #5
   1777c:	and	r3, r3, #31
   17780:	ldr	r2, [r7, r2, lsl #2]
   17784:	lsr	r3, r2, r3
   17788:	tst	r3, #1
   1778c:	beq	177dc <__assert_fail@plt+0x5e3c>
   17790:	str	r5, [fp, #-128]	; 0xffffff80
   17794:	ldrb	r3, [r1]
   17798:	str	r3, [fp, #-120]	; 0xffffff88
   1779c:	strb	r5, [fp, #-124]	; 0xffffff84
   177a0:	strb	r5, [fp, #-136]	; 0xffffff78
   177a4:	ldrb	r3, [fp, #-124]	; 0xffffff84
   177a8:	cmp	r3, #0
   177ac:	bne	178c4 <__assert_fail@plt+0x5f24>
   177b0:	ldr	r2, [fp, #-128]	; 0xffffff80
   177b4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   177b8:	add	r3, r3, r2
   177bc:	str	r3, [fp, #-132]	; 0xffffff7c
   177c0:	strb	r6, [fp, #-136]	; 0xffffff78
   177c4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   177c8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   177cc:	add	r3, r3, r2
   177d0:	str	r3, [fp, #-76]	; 0xffffffb4
   177d4:	strb	r6, [fp, #-80]	; 0xffffffb0
   177d8:	b	179c0 <__assert_fail@plt+0x6020>
   177dc:	sub	r0, fp, #144	; 0x90
   177e0:	bl	11604 <mbsinit@plt>
   177e4:	cmp	r0, #0
   177e8:	beq	17874 <__assert_fail@plt+0x5ed4>
   177ec:	strb	r5, [fp, #-148]	; 0xffffff6c
   177f0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   177f4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   177f8:	mov	r1, r0
   177fc:	mov	r0, r4
   17800:	bl	1a380 <__assert_fail@plt+0x89e0>
   17804:	sub	r3, fp, #144	; 0x90
   17808:	mov	r2, r0
   1780c:	mov	r1, r4
   17810:	sub	r0, fp, #120	; 0x78
   17814:	bl	1b984 <__assert_fail@plt+0x9fe4>
   17818:	str	r0, [fp, #-128]	; 0xffffff80
   1781c:	cmn	r0, #1
   17820:	streq	r5, [fp, #-128]	; 0xffffff80
   17824:	strbeq	r6, [fp, #-124]	; 0xffffff84
   17828:	beq	177a0 <__assert_fail@plt+0x5e00>
   1782c:	cmn	r0, #2
   17830:	beq	17888 <__assert_fail@plt+0x5ee8>
   17834:	cmp	r0, #0
   17838:	bne	1785c <__assert_fail@plt+0x5ebc>
   1783c:	str	r5, [fp, #-128]	; 0xffffff80
   17840:	ldr	r3, [fp, #-132]	; 0xffffff7c
   17844:	ldrb	r3, [r3]
   17848:	cmp	r3, #0
   1784c:	bne	1789c <__assert_fail@plt+0x5efc>
   17850:	ldr	r3, [fp, #-120]	; 0xffffff88
   17854:	cmp	r3, #0
   17858:	bne	178b0 <__assert_fail@plt+0x5f10>
   1785c:	strb	r5, [fp, #-124]	; 0xffffff84
   17860:	sub	r0, fp, #144	; 0x90
   17864:	bl	11604 <mbsinit@plt>
   17868:	cmp	r0, #0
   1786c:	strbne	r6, [fp, #-148]	; 0xffffff6c
   17870:	b	177a0 <__assert_fail@plt+0x5e00>
   17874:	ldr	r3, [pc, #564]	; 17ab0 <__assert_fail@plt+0x6110>
   17878:	mov	r2, #143	; 0x8f
   1787c:	ldr	r1, [pc, #560]	; 17ab4 <__assert_fail@plt+0x6114>
   17880:	ldr	r0, [pc, #560]	; 17ab8 <__assert_fail@plt+0x6118>
   17884:	bl	119a0 <__assert_fail@plt>
   17888:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1788c:	bl	117a8 <strlen@plt>
   17890:	str	r0, [fp, #-128]	; 0xffffff80
   17894:	strb	r6, [fp, #-124]	; 0xffffff84
   17898:	b	177a0 <__assert_fail@plt+0x5e00>
   1789c:	ldr	r3, [pc, #524]	; 17ab0 <__assert_fail@plt+0x6110>
   178a0:	mov	r2, #171	; 0xab
   178a4:	ldr	r1, [pc, #520]	; 17ab4 <__assert_fail@plt+0x6114>
   178a8:	ldr	r0, [pc, #524]	; 17abc <__assert_fail@plt+0x611c>
   178ac:	bl	119a0 <__assert_fail@plt>
   178b0:	ldr	r3, [pc, #504]	; 17ab0 <__assert_fail@plt+0x6110>
   178b4:	mov	r2, #172	; 0xac
   178b8:	ldr	r1, [pc, #500]	; 17ab4 <__assert_fail@plt+0x6114>
   178bc:	ldr	r0, [pc, #508]	; 17ac0 <__assert_fail@plt+0x6120>
   178c0:	bl	119a0 <__assert_fail@plt>
   178c4:	ldr	r3, [fp, #-120]	; 0xffffff88
   178c8:	cmp	r3, #0
   178cc:	bne	177b0 <__assert_fail@plt+0x5e10>
   178d0:	bl	11964 <abort@plt>
   178d4:	sub	r0, fp, #88	; 0x58
   178d8:	bl	11604 <mbsinit@plt>
   178dc:	cmp	r0, #0
   178e0:	beq	17a0c <__assert_fail@plt+0x606c>
   178e4:	strb	r5, [fp, #-92]	; 0xffffffa4
   178e8:	ldr	r4, [fp, #-76]	; 0xffffffb4
   178ec:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   178f0:	mov	r1, r0
   178f4:	mov	r0, r4
   178f8:	bl	1a380 <__assert_fail@plt+0x89e0>
   178fc:	sub	r3, fp, #88	; 0x58
   17900:	mov	r2, r0
   17904:	mov	r1, r4
   17908:	sub	r0, fp, #64	; 0x40
   1790c:	bl	1b984 <__assert_fail@plt+0x9fe4>
   17910:	str	r0, [fp, #-72]	; 0xffffffb8
   17914:	cmn	r0, #1
   17918:	streq	r5, [fp, #-72]	; 0xffffffb8
   1791c:	strbeq	r6, [fp, #-68]	; 0xffffffbc
   17920:	beq	17968 <__assert_fail@plt+0x5fc8>
   17924:	cmn	r0, #2
   17928:	beq	17a20 <__assert_fail@plt+0x6080>
   1792c:	cmp	r0, #0
   17930:	bne	17954 <__assert_fail@plt+0x5fb4>
   17934:	str	r5, [fp, #-72]	; 0xffffffb8
   17938:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1793c:	ldrb	r3, [r3]
   17940:	cmp	r3, #0
   17944:	bne	17a34 <__assert_fail@plt+0x6094>
   17948:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1794c:	cmp	r3, #0
   17950:	bne	17a48 <__assert_fail@plt+0x60a8>
   17954:	strb	r5, [fp, #-68]	; 0xffffffbc
   17958:	sub	r0, fp, #88	; 0x58
   1795c:	bl	11604 <mbsinit@plt>
   17960:	cmp	r0, #0
   17964:	strbne	r6, [fp, #-92]	; 0xffffffa4
   17968:	strb	r5, [fp, #-80]	; 0xffffffb0
   1796c:	ldrb	r2, [fp, #-68]	; 0xffffffbc
   17970:	cmp	r2, #0
   17974:	addeq	r3, r8, r8, lsl #2
   17978:	addeq	r3, r9, r3, lsl #3
   1797c:	bne	17a5c <__assert_fail@plt+0x60bc>
   17980:	ldr	r2, [r3, #4]
   17984:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17988:	cmp	r2, r1
   1798c:	ldrne	r0, [fp, #-152]	; 0xffffff68
   17990:	beq	17594 <__assert_fail@plt+0x5bf4>
   17994:	cmp	r0, #0
   17998:	beq	175cc <__assert_fail@plt+0x5c2c>
   1799c:	add	r8, r8, #1
   179a0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   179a4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   179a8:	add	r3, r3, r2
   179ac:	str	r3, [fp, #-76]	; 0xffffffb4
   179b0:	strb	r6, [fp, #-80]	; 0xffffffb0
   179b4:	ldr	r3, [fp, #-160]	; 0xffffff60
   179b8:	cmp	r3, r8
   179bc:	beq	175ac <__assert_fail@plt+0x5c0c>
   179c0:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   179c4:	cmp	r3, #0
   179c8:	bne	1796c <__assert_fail@plt+0x5fcc>
   179cc:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   179d0:	cmp	r3, #0
   179d4:	bne	178e8 <__assert_fail@plt+0x5f48>
   179d8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   179dc:	ldrb	r3, [r1]
   179e0:	lsr	r2, r3, #5
   179e4:	and	r3, r3, #31
   179e8:	ldr	r2, [r7, r2, lsl #2]
   179ec:	lsr	r3, r2, r3
   179f0:	tst	r3, #1
   179f4:	beq	178d4 <__assert_fail@plt+0x5f34>
   179f8:	str	r5, [fp, #-72]	; 0xffffffb8
   179fc:	ldrb	r3, [r1]
   17a00:	str	r3, [fp, #-64]	; 0xffffffc0
   17a04:	strb	r5, [fp, #-68]	; 0xffffffbc
   17a08:	b	17968 <__assert_fail@plt+0x5fc8>
   17a0c:	ldr	r3, [pc, #156]	; 17ab0 <__assert_fail@plt+0x6110>
   17a10:	mov	r2, #143	; 0x8f
   17a14:	ldr	r1, [pc, #152]	; 17ab4 <__assert_fail@plt+0x6114>
   17a18:	ldr	r0, [pc, #152]	; 17ab8 <__assert_fail@plt+0x6118>
   17a1c:	bl	119a0 <__assert_fail@plt>
   17a20:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17a24:	bl	117a8 <strlen@plt>
   17a28:	str	r0, [fp, #-72]	; 0xffffffb8
   17a2c:	strb	r6, [fp, #-68]	; 0xffffffbc
   17a30:	b	17968 <__assert_fail@plt+0x5fc8>
   17a34:	ldr	r3, [pc, #116]	; 17ab0 <__assert_fail@plt+0x6110>
   17a38:	mov	r2, #171	; 0xab
   17a3c:	ldr	r1, [pc, #112]	; 17ab4 <__assert_fail@plt+0x6114>
   17a40:	ldr	r0, [pc, #116]	; 17abc <__assert_fail@plt+0x611c>
   17a44:	bl	119a0 <__assert_fail@plt>
   17a48:	ldr	r3, [pc, #96]	; 17ab0 <__assert_fail@plt+0x6110>
   17a4c:	mov	r2, #172	; 0xac
   17a50:	ldr	r1, [pc, #92]	; 17ab4 <__assert_fail@plt+0x6114>
   17a54:	ldr	r0, [pc, #100]	; 17ac0 <__assert_fail@plt+0x6120>
   17a58:	bl	119a0 <__assert_fail@plt>
   17a5c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17a60:	cmp	r3, #0
   17a64:	beq	175b8 <__assert_fail@plt+0x5c18>
   17a68:	add	r3, r8, r8, lsl #2
   17a6c:	add	r3, r9, r3, lsl #3
   17a70:	ldrb	r1, [r3, #8]
   17a74:	tst	r2, r1
   17a78:	beq	17980 <__assert_fail@plt+0x5fe0>
   17a7c:	ldr	r0, [r3, #12]
   17a80:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17a84:	cmp	r0, r3
   17a88:	movne	r0, #0
   17a8c:	moveq	r0, #1
   17a90:	b	17994 <__assert_fail@plt+0x5ff4>
   17a94:	mov	r3, #0
   17a98:	str	r3, [fp, #-164]	; 0xffffff5c
   17a9c:	b	175c0 <__assert_fail@plt+0x5c20>
   17aa0:	ldr	r3, [fp, #-152]	; 0xffffff68
   17aa4:	str	r3, [fp, #-164]	; 0xffffff5c
   17aa8:	b	175c0 <__assert_fail@plt+0x5c20>
   17aac:	andeq	ip, r2, r0, asr sp
   17ab0:	andeq	ip, r2, r8, lsr #11
   17ab4:	andeq	ip, r2, r4, asr #10
   17ab8:	andeq	ip, r2, r0, asr r5
   17abc:	andeq	ip, r2, r8, ror #10
   17ac0:	andeq	ip, r2, r0, lsl #11
   17ac4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ac8:	sub	sp, sp, #300	; 0x12c
   17acc:	str	r0, [sp, #4]
   17ad0:	mov	sl, r1
   17ad4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17ad8:	cmp	r0, #1
   17adc:	bls	18684 <__assert_fail@plt+0x6ce4>
   17ae0:	str	sl, [sp, #32]
   17ae4:	mov	r3, #0
   17ae8:	strb	r3, [sp, #16]
   17aec:	str	r3, [sp, #20]
   17af0:	str	r3, [sp, #24]
   17af4:	strb	r3, [sp, #28]
   17af8:	ldrb	r2, [sl]
   17afc:	lsr	r0, r2, #5
   17b00:	and	r1, r2, #31
   17b04:	ldr	r3, [pc, #3320]	; 18804 <__assert_fail@plt+0x6e64>
   17b08:	ldr	r3, [r3, r0, lsl #2]
   17b0c:	lsr	r3, r3, r1
   17b10:	tst	r3, #1
   17b14:	beq	17b54 <__assert_fail@plt+0x61b4>
   17b18:	mov	r3, #1
   17b1c:	str	r3, [sp, #36]	; 0x24
   17b20:	str	r2, [sp, #44]	; 0x2c
   17b24:	strb	r3, [sp, #40]	; 0x28
   17b28:	mov	r3, #1
   17b2c:	strb	r3, [sp, #28]
   17b30:	ldrb	r3, [sp, #40]	; 0x28
   17b34:	cmp	r3, #0
   17b38:	beq	17c58 <__assert_fail@plt+0x62b8>
   17b3c:	ldr	r3, [sp, #44]	; 0x2c
   17b40:	cmp	r3, #0
   17b44:	ldreq	r0, [sp, #4]
   17b48:	bne	17c58 <__assert_fail@plt+0x62b8>
   17b4c:	add	sp, sp, #300	; 0x12c
   17b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b54:	add	r0, sp, #20
   17b58:	bl	11604 <mbsinit@plt>
   17b5c:	cmp	r0, #0
   17b60:	beq	17bf0 <__assert_fail@plt+0x6250>
   17b64:	mov	r3, #1
   17b68:	strb	r3, [sp, #16]
   17b6c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17b70:	mov	r1, r0
   17b74:	mov	r0, sl
   17b78:	bl	1a380 <__assert_fail@plt+0x89e0>
   17b7c:	add	r3, sp, #20
   17b80:	mov	r2, r0
   17b84:	mov	r1, sl
   17b88:	add	r0, sp, #44	; 0x2c
   17b8c:	bl	1b984 <__assert_fail@plt+0x9fe4>
   17b90:	str	r0, [sp, #36]	; 0x24
   17b94:	cmn	r0, #1
   17b98:	beq	17c04 <__assert_fail@plt+0x6264>
   17b9c:	cmn	r0, #2
   17ba0:	beq	17c18 <__assert_fail@plt+0x6278>
   17ba4:	cmp	r0, #0
   17ba8:	bne	17bd0 <__assert_fail@plt+0x6230>
   17bac:	mov	r3, #1
   17bb0:	str	r3, [sp, #36]	; 0x24
   17bb4:	ldr	r3, [sp, #32]
   17bb8:	ldrb	r3, [r3]
   17bbc:	cmp	r3, #0
   17bc0:	bne	17c30 <__assert_fail@plt+0x6290>
   17bc4:	ldr	r3, [sp, #44]	; 0x2c
   17bc8:	cmp	r3, #0
   17bcc:	bne	17c44 <__assert_fail@plt+0x62a4>
   17bd0:	mov	r3, #1
   17bd4:	strb	r3, [sp, #40]	; 0x28
   17bd8:	add	r0, sp, #20
   17bdc:	bl	11604 <mbsinit@plt>
   17be0:	cmp	r0, #0
   17be4:	movne	r3, #0
   17be8:	strbne	r3, [sp, #16]
   17bec:	b	17b28 <__assert_fail@plt+0x6188>
   17bf0:	ldr	r3, [pc, #3088]	; 18808 <__assert_fail@plt+0x6e68>
   17bf4:	mov	r2, #143	; 0x8f
   17bf8:	ldr	r1, [pc, #3084]	; 1880c <__assert_fail@plt+0x6e6c>
   17bfc:	ldr	r0, [pc, #3084]	; 18810 <__assert_fail@plt+0x6e70>
   17c00:	bl	119a0 <__assert_fail@plt>
   17c04:	mov	r3, #1
   17c08:	str	r3, [sp, #36]	; 0x24
   17c0c:	mov	r3, #0
   17c10:	strb	r3, [sp, #40]	; 0x28
   17c14:	b	17b28 <__assert_fail@plt+0x6188>
   17c18:	ldr	r0, [sp, #32]
   17c1c:	bl	117a8 <strlen@plt>
   17c20:	str	r0, [sp, #36]	; 0x24
   17c24:	mov	r3, #0
   17c28:	strb	r3, [sp, #40]	; 0x28
   17c2c:	b	17b28 <__assert_fail@plt+0x6188>
   17c30:	ldr	r3, [pc, #3024]	; 18808 <__assert_fail@plt+0x6e68>
   17c34:	mov	r2, #171	; 0xab
   17c38:	ldr	r1, [pc, #3020]	; 1880c <__assert_fail@plt+0x6e6c>
   17c3c:	ldr	r0, [pc, #3024]	; 18814 <__assert_fail@plt+0x6e74>
   17c40:	bl	119a0 <__assert_fail@plt>
   17c44:	ldr	r3, [pc, #3004]	; 18808 <__assert_fail@plt+0x6e68>
   17c48:	mov	r2, #172	; 0xac
   17c4c:	ldr	r1, [pc, #3000]	; 1880c <__assert_fail@plt+0x6e6c>
   17c50:	ldr	r0, [pc, #3008]	; 18818 <__assert_fail@plt+0x6e78>
   17c54:	bl	119a0 <__assert_fail@plt>
   17c58:	str	sl, [sp, #88]	; 0x58
   17c5c:	mov	r7, #0
   17c60:	strb	r7, [sp, #72]	; 0x48
   17c64:	str	r7, [sp, #76]	; 0x4c
   17c68:	str	r7, [sp, #80]	; 0x50
   17c6c:	strb	r7, [sp, #84]	; 0x54
   17c70:	ldr	r3, [sp, #4]
   17c74:	str	r3, [sp, #144]	; 0x90
   17c78:	strb	r7, [sp, #128]	; 0x80
   17c7c:	str	r7, [sp, #132]	; 0x84
   17c80:	str	r7, [sp, #136]	; 0x88
   17c84:	strb	r7, [sp, #140]	; 0x8c
   17c88:	str	r7, [sp, #12]
   17c8c:	mov	fp, r7
   17c90:	mov	r3, #1
   17c94:	mov	r4, r3
   17c98:	mov	r5, r7
   17c9c:	ldr	r8, [pc, #2912]	; 18804 <__assert_fail@plt+0x6e64>
   17ca0:	str	sl, [sp, #8]
   17ca4:	mov	sl, r3
   17ca8:	b	18524 <__assert_fail@plt+0x6b84>
   17cac:	add	r0, sp, #132	; 0x84
   17cb0:	bl	11604 <mbsinit@plt>
   17cb4:	cmp	r0, #0
   17cb8:	beq	17d44 <__assert_fail@plt+0x63a4>
   17cbc:	strb	r4, [sp, #128]	; 0x80
   17cc0:	ldr	r6, [sp, #144]	; 0x90
   17cc4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17cc8:	mov	r1, r0
   17ccc:	mov	r0, r6
   17cd0:	bl	1a380 <__assert_fail@plt+0x89e0>
   17cd4:	add	r3, sp, #132	; 0x84
   17cd8:	mov	r2, r0
   17cdc:	mov	r1, r6
   17ce0:	add	r0, sp, #156	; 0x9c
   17ce4:	bl	1b984 <__assert_fail@plt+0x9fe4>
   17ce8:	str	r0, [sp, #148]	; 0x94
   17cec:	cmn	r0, #1
   17cf0:	streq	r4, [sp, #148]	; 0x94
   17cf4:	strbeq	r5, [sp, #152]	; 0x98
   17cf8:	beq	1856c <__assert_fail@plt+0x6bcc>
   17cfc:	cmn	r0, #2
   17d00:	beq	17d58 <__assert_fail@plt+0x63b8>
   17d04:	cmp	r0, #0
   17d08:	bne	17d2c <__assert_fail@plt+0x638c>
   17d0c:	str	r4, [sp, #148]	; 0x94
   17d10:	ldr	r3, [sp, #144]	; 0x90
   17d14:	ldrb	r3, [r3]
   17d18:	cmp	r3, #0
   17d1c:	bne	17d6c <__assert_fail@plt+0x63cc>
   17d20:	ldr	r3, [sp, #156]	; 0x9c
   17d24:	cmp	r3, #0
   17d28:	bne	17d80 <__assert_fail@plt+0x63e0>
   17d2c:	strb	r4, [sp, #152]	; 0x98
   17d30:	add	r0, sp, #132	; 0x84
   17d34:	bl	11604 <mbsinit@plt>
   17d38:	cmp	r0, #0
   17d3c:	strbne	r5, [sp, #128]	; 0x80
   17d40:	b	1856c <__assert_fail@plt+0x6bcc>
   17d44:	ldr	r3, [pc, #2748]	; 18808 <__assert_fail@plt+0x6e68>
   17d48:	mov	r2, #143	; 0x8f
   17d4c:	ldr	r1, [pc, #2744]	; 1880c <__assert_fail@plt+0x6e6c>
   17d50:	ldr	r0, [pc, #2744]	; 18810 <__assert_fail@plt+0x6e70>
   17d54:	bl	119a0 <__assert_fail@plt>
   17d58:	ldr	r0, [sp, #144]	; 0x90
   17d5c:	bl	117a8 <strlen@plt>
   17d60:	str	r0, [sp, #148]	; 0x94
   17d64:	strb	r5, [sp, #152]	; 0x98
   17d68:	b	1856c <__assert_fail@plt+0x6bcc>
   17d6c:	ldr	r3, [pc, #2708]	; 18808 <__assert_fail@plt+0x6e68>
   17d70:	mov	r2, #171	; 0xab
   17d74:	ldr	r1, [pc, #2704]	; 1880c <__assert_fail@plt+0x6e6c>
   17d78:	ldr	r0, [pc, #2708]	; 18814 <__assert_fail@plt+0x6e74>
   17d7c:	bl	119a0 <__assert_fail@plt>
   17d80:	ldr	r3, [pc, #2688]	; 18808 <__assert_fail@plt+0x6e68>
   17d84:	mov	r2, #172	; 0xac
   17d88:	ldr	r1, [pc, #2684]	; 1880c <__assert_fail@plt+0x6e6c>
   17d8c:	ldr	r0, [pc, #2692]	; 18818 <__assert_fail@plt+0x6e78>
   17d90:	bl	119a0 <__assert_fail@plt>
   17d94:	ldr	r3, [sp, #156]	; 0x9c
   17d98:	cmp	r3, #0
   17d9c:	beq	1867c <__assert_fail@plt+0x6cdc>
   17da0:	cmp	r7, #9
   17da4:	movls	r3, #0
   17da8:	andhi	r3, sl, #1
   17dac:	cmp	r3, #0
   17db0:	beq	187f8 <__assert_fail@plt+0x6e58>
   17db4:	add	r3, r7, r7, lsl #2
   17db8:	cmp	fp, r3
   17dbc:	bcc	17e28 <__assert_fail@plt+0x6488>
   17dc0:	ldr	r3, [sp, #12]
   17dc4:	subs	r6, fp, r3
   17dc8:	bne	17f20 <__assert_fail@plt+0x6580>
   17dcc:	ldrb	r3, [sp, #84]	; 0x54
   17dd0:	cmp	r3, #0
   17dd4:	bne	17e18 <__assert_fail@plt+0x6478>
   17dd8:	ldrb	r3, [sp, #72]	; 0x48
   17ddc:	cmp	r3, #0
   17de0:	bne	18014 <__assert_fail@plt+0x6674>
   17de4:	ldr	r1, [sp, #88]	; 0x58
   17de8:	ldrb	r3, [r1]
   17dec:	lsr	r2, r3, #5
   17df0:	and	r3, r3, #31
   17df4:	ldr	r2, [r8, r2, lsl #2]
   17df8:	lsr	r3, r2, r3
   17dfc:	tst	r3, #1
   17e00:	beq	18000 <__assert_fail@plt+0x6660>
   17e04:	str	r4, [sp, #92]	; 0x5c
   17e08:	ldrb	r3, [r1]
   17e0c:	str	r3, [sp, #100]	; 0x64
   17e10:	strb	r4, [sp, #96]	; 0x60
   17e14:	strb	r4, [sp, #84]	; 0x54
   17e18:	ldrb	r3, [sp, #96]	; 0x60
   17e1c:	cmp	r3, #0
   17e20:	streq	fp, [sp, #12]
   17e24:	bne	17fd4 <__assert_fail@plt+0x6634>
   17e28:	add	r7, r7, #1
   17e2c:	add	r6, fp, #1
   17e30:	ldrb	r3, [sp, #152]	; 0x98
   17e34:	cmp	r3, #0
   17e38:	beq	18598 <__assert_fail@plt+0x6bf8>
   17e3c:	ldrb	r3, [sp, #40]	; 0x28
   17e40:	cmp	r3, #0
   17e44:	beq	18598 <__assert_fail@plt+0x6bf8>
   17e48:	ldr	r3, [sp, #44]	; 0x2c
   17e4c:	ldr	r0, [sp, #156]	; 0x9c
   17e50:	cmp	r0, r3
   17e54:	movne	r0, #0
   17e58:	moveq	r0, #1
   17e5c:	b	185ac <__assert_fail@plt+0x6c0c>
   17e60:	add	r0, sp, #76	; 0x4c
   17e64:	bl	11604 <mbsinit@plt>
   17e68:	cmp	r0, #0
   17e6c:	beq	17f6c <__assert_fail@plt+0x65cc>
   17e70:	strb	r4, [sp, #72]	; 0x48
   17e74:	ldr	r9, [sp, #88]	; 0x58
   17e78:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   17e7c:	mov	r1, r0
   17e80:	mov	r0, r9
   17e84:	bl	1a380 <__assert_fail@plt+0x89e0>
   17e88:	add	r3, sp, #76	; 0x4c
   17e8c:	mov	r2, r0
   17e90:	mov	r1, r9
   17e94:	add	r0, sp, #100	; 0x64
   17e98:	bl	1b984 <__assert_fail@plt+0x9fe4>
   17e9c:	str	r0, [sp, #92]	; 0x5c
   17ea0:	cmn	r0, #1
   17ea4:	streq	r4, [sp, #92]	; 0x5c
   17ea8:	strbeq	r5, [sp, #96]	; 0x60
   17eac:	beq	17ef4 <__assert_fail@plt+0x6554>
   17eb0:	cmn	r0, #2
   17eb4:	beq	17f80 <__assert_fail@plt+0x65e0>
   17eb8:	cmp	r0, #0
   17ebc:	bne	17ee0 <__assert_fail@plt+0x6540>
   17ec0:	str	r4, [sp, #92]	; 0x5c
   17ec4:	ldr	r3, [sp, #88]	; 0x58
   17ec8:	ldrb	r3, [r3]
   17ecc:	cmp	r3, #0
   17ed0:	bne	17f94 <__assert_fail@plt+0x65f4>
   17ed4:	ldr	r3, [sp, #100]	; 0x64
   17ed8:	cmp	r3, #0
   17edc:	bne	17fa8 <__assert_fail@plt+0x6608>
   17ee0:	strb	r4, [sp, #96]	; 0x60
   17ee4:	add	r0, sp, #76	; 0x4c
   17ee8:	bl	11604 <mbsinit@plt>
   17eec:	cmp	r0, #0
   17ef0:	strbne	r5, [sp, #72]	; 0x48
   17ef4:	strb	r4, [sp, #84]	; 0x54
   17ef8:	ldrb	r3, [sp, #96]	; 0x60
   17efc:	cmp	r3, #0
   17f00:	bne	17fbc <__assert_fail@plt+0x661c>
   17f04:	ldr	r2, [sp, #92]	; 0x5c
   17f08:	ldr	r3, [sp, #88]	; 0x58
   17f0c:	add	r3, r3, r2
   17f10:	str	r3, [sp, #88]	; 0x58
   17f14:	strb	r5, [sp, #84]	; 0x54
   17f18:	subs	r6, r6, #1
   17f1c:	beq	17dd8 <__assert_fail@plt+0x6438>
   17f20:	ldrb	r3, [sp, #84]	; 0x54
   17f24:	cmp	r3, #0
   17f28:	bne	17ef8 <__assert_fail@plt+0x6558>
   17f2c:	ldrb	r3, [sp, #72]	; 0x48
   17f30:	cmp	r3, #0
   17f34:	bne	17e74 <__assert_fail@plt+0x64d4>
   17f38:	ldr	r1, [sp, #88]	; 0x58
   17f3c:	ldrb	r3, [r1]
   17f40:	lsr	r2, r3, #5
   17f44:	and	r3, r3, #31
   17f48:	ldr	r2, [r8, r2, lsl #2]
   17f4c:	lsr	r3, r2, r3
   17f50:	tst	r3, #1
   17f54:	beq	17e60 <__assert_fail@plt+0x64c0>
   17f58:	str	r4, [sp, #92]	; 0x5c
   17f5c:	ldrb	r3, [r1]
   17f60:	str	r3, [sp, #100]	; 0x64
   17f64:	strb	r4, [sp, #96]	; 0x60
   17f68:	b	17ef4 <__assert_fail@plt+0x6554>
   17f6c:	ldr	r3, [pc, #2196]	; 18808 <__assert_fail@plt+0x6e68>
   17f70:	mov	r2, #143	; 0x8f
   17f74:	ldr	r1, [pc, #2192]	; 1880c <__assert_fail@plt+0x6e6c>
   17f78:	ldr	r0, [pc, #2192]	; 18810 <__assert_fail@plt+0x6e70>
   17f7c:	bl	119a0 <__assert_fail@plt>
   17f80:	ldr	r0, [sp, #88]	; 0x58
   17f84:	bl	117a8 <strlen@plt>
   17f88:	str	r0, [sp, #92]	; 0x5c
   17f8c:	strb	r5, [sp, #96]	; 0x60
   17f90:	b	17ef4 <__assert_fail@plt+0x6554>
   17f94:	ldr	r3, [pc, #2156]	; 18808 <__assert_fail@plt+0x6e68>
   17f98:	mov	r2, #171	; 0xab
   17f9c:	ldr	r1, [pc, #2152]	; 1880c <__assert_fail@plt+0x6e6c>
   17fa0:	ldr	r0, [pc, #2156]	; 18814 <__assert_fail@plt+0x6e74>
   17fa4:	bl	119a0 <__assert_fail@plt>
   17fa8:	ldr	r3, [pc, #2136]	; 18808 <__assert_fail@plt+0x6e68>
   17fac:	mov	r2, #172	; 0xac
   17fb0:	ldr	r1, [pc, #2132]	; 1880c <__assert_fail@plt+0x6e6c>
   17fb4:	ldr	r0, [pc, #2140]	; 18818 <__assert_fail@plt+0x6e78>
   17fb8:	bl	119a0 <__assert_fail@plt>
   17fbc:	ldr	r3, [sp, #100]	; 0x64
   17fc0:	cmp	r3, #0
   17fc4:	bne	17f04 <__assert_fail@plt+0x6564>
   17fc8:	ldrb	r3, [sp, #84]	; 0x54
   17fcc:	cmp	r3, #0
   17fd0:	beq	17dd8 <__assert_fail@plt+0x6438>
   17fd4:	ldr	r3, [sp, #100]	; 0x64
   17fd8:	cmp	r3, #0
   17fdc:	bne	180f0 <__assert_fail@plt+0x6750>
   17fe0:	add	r2, sp, #240	; 0xf0
   17fe4:	ldr	r1, [sp, #8]
   17fe8:	ldr	r0, [sp, #4]
   17fec:	bl	171e8 <__assert_fail@plt+0x5848>
   17ff0:	subs	sl, r0, #0
   17ff4:	bne	180e8 <__assert_fail@plt+0x6748>
   17ff8:	str	fp, [sp, #12]
   17ffc:	b	17e28 <__assert_fail@plt+0x6488>
   18000:	add	r0, sp, #76	; 0x4c
   18004:	bl	11604 <mbsinit@plt>
   18008:	cmp	r0, #0
   1800c:	beq	18098 <__assert_fail@plt+0x66f8>
   18010:	strb	r4, [sp, #72]	; 0x48
   18014:	ldr	r6, [sp, #88]	; 0x58
   18018:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   1801c:	mov	r1, r0
   18020:	mov	r0, r6
   18024:	bl	1a380 <__assert_fail@plt+0x89e0>
   18028:	add	r3, sp, #76	; 0x4c
   1802c:	mov	r2, r0
   18030:	mov	r1, r6
   18034:	add	r0, sp, #100	; 0x64
   18038:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1803c:	str	r0, [sp, #92]	; 0x5c
   18040:	cmn	r0, #1
   18044:	streq	r4, [sp, #92]	; 0x5c
   18048:	strbeq	r5, [sp, #96]	; 0x60
   1804c:	beq	17e14 <__assert_fail@plt+0x6474>
   18050:	cmn	r0, #2
   18054:	beq	180ac <__assert_fail@plt+0x670c>
   18058:	cmp	r0, #0
   1805c:	bne	18080 <__assert_fail@plt+0x66e0>
   18060:	str	r4, [sp, #92]	; 0x5c
   18064:	ldr	r3, [sp, #88]	; 0x58
   18068:	ldrb	r3, [r3]
   1806c:	cmp	r3, #0
   18070:	bne	180c0 <__assert_fail@plt+0x6720>
   18074:	ldr	r3, [sp, #100]	; 0x64
   18078:	cmp	r3, #0
   1807c:	bne	180d4 <__assert_fail@plt+0x6734>
   18080:	strb	r4, [sp, #96]	; 0x60
   18084:	add	r0, sp, #76	; 0x4c
   18088:	bl	11604 <mbsinit@plt>
   1808c:	cmp	r0, #0
   18090:	strbne	r5, [sp, #72]	; 0x48
   18094:	b	17e14 <__assert_fail@plt+0x6474>
   18098:	ldr	r3, [pc, #1896]	; 18808 <__assert_fail@plt+0x6e68>
   1809c:	mov	r2, #143	; 0x8f
   180a0:	ldr	r1, [pc, #1892]	; 1880c <__assert_fail@plt+0x6e6c>
   180a4:	ldr	r0, [pc, #1892]	; 18810 <__assert_fail@plt+0x6e70>
   180a8:	bl	119a0 <__assert_fail@plt>
   180ac:	ldr	r0, [sp, #88]	; 0x58
   180b0:	bl	117a8 <strlen@plt>
   180b4:	str	r0, [sp, #92]	; 0x5c
   180b8:	strb	r5, [sp, #96]	; 0x60
   180bc:	b	17e14 <__assert_fail@plt+0x6474>
   180c0:	ldr	r3, [pc, #1856]	; 18808 <__assert_fail@plt+0x6e68>
   180c4:	mov	r2, #171	; 0xab
   180c8:	ldr	r1, [pc, #1852]	; 1880c <__assert_fail@plt+0x6e6c>
   180cc:	ldr	r0, [pc, #1856]	; 18814 <__assert_fail@plt+0x6e74>
   180d0:	bl	119a0 <__assert_fail@plt>
   180d4:	ldr	r3, [pc, #1836]	; 18808 <__assert_fail@plt+0x6e68>
   180d8:	mov	r2, #172	; 0xac
   180dc:	ldr	r1, [pc, #1832]	; 1880c <__assert_fail@plt+0x6e6c>
   180e0:	ldr	r0, [pc, #1840]	; 18818 <__assert_fail@plt+0x6e78>
   180e4:	bl	119a0 <__assert_fail@plt>
   180e8:	ldr	r0, [sp, #240]	; 0xf0
   180ec:	b	17b4c <__assert_fail@plt+0x61ac>
   180f0:	str	fp, [sp, #12]
   180f4:	b	17e28 <__assert_fail@plt+0x6488>
   180f8:	ldr	r1, [sp, #32]
   180fc:	ldr	r0, [sp, #144]	; 0x90
   18100:	bl	1161c <memcmp@plt>
   18104:	clz	r0, r0
   18108:	lsr	r0, r0, #5
   1810c:	b	185ac <__assert_fail@plt+0x6c0c>
   18110:	add	r0, sp, #244	; 0xf4
   18114:	bl	11604 <mbsinit@plt>
   18118:	cmp	r0, #0
   1811c:	beq	181a8 <__assert_fail@plt+0x6808>
   18120:	strb	r4, [sp, #240]	; 0xf0
   18124:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18128:	mov	r1, r0
   1812c:	ldr	r6, [sp, #8]
   18130:	mov	r0, r6
   18134:	bl	1a380 <__assert_fail@plt+0x89e0>
   18138:	add	r3, sp, #244	; 0xf4
   1813c:	mov	r2, r0
   18140:	mov	r1, r6
   18144:	add	r0, sp, #268	; 0x10c
   18148:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1814c:	str	r0, [sp, #260]	; 0x104
   18150:	cmn	r0, #1
   18154:	streq	r4, [sp, #260]	; 0x104
   18158:	strbeq	r5, [sp, #264]	; 0x108
   1815c:	beq	18630 <__assert_fail@plt+0x6c90>
   18160:	cmn	r0, #2
   18164:	beq	181bc <__assert_fail@plt+0x681c>
   18168:	cmp	r0, #0
   1816c:	bne	18190 <__assert_fail@plt+0x67f0>
   18170:	str	r4, [sp, #260]	; 0x104
   18174:	ldr	r3, [sp, #256]	; 0x100
   18178:	ldrb	r3, [r3]
   1817c:	cmp	r3, #0
   18180:	bne	181d0 <__assert_fail@plt+0x6830>
   18184:	ldr	r3, [sp, #268]	; 0x10c
   18188:	cmp	r3, #0
   1818c:	bne	181e4 <__assert_fail@plt+0x6844>
   18190:	strb	r4, [sp, #264]	; 0x108
   18194:	add	r0, sp, #244	; 0xf4
   18198:	bl	11604 <mbsinit@plt>
   1819c:	cmp	r0, #0
   181a0:	strbne	r5, [sp, #240]	; 0xf0
   181a4:	b	18630 <__assert_fail@plt+0x6c90>
   181a8:	ldr	r3, [pc, #1624]	; 18808 <__assert_fail@plt+0x6e68>
   181ac:	mov	r2, #143	; 0x8f
   181b0:	ldr	r1, [pc, #1620]	; 1880c <__assert_fail@plt+0x6e6c>
   181b4:	ldr	r0, [pc, #1620]	; 18810 <__assert_fail@plt+0x6e70>
   181b8:	bl	119a0 <__assert_fail@plt>
   181bc:	ldr	r0, [sp, #256]	; 0x100
   181c0:	bl	117a8 <strlen@plt>
   181c4:	str	r0, [sp, #260]	; 0x104
   181c8:	strb	r5, [sp, #264]	; 0x108
   181cc:	b	18630 <__assert_fail@plt+0x6c90>
   181d0:	ldr	r3, [pc, #1584]	; 18808 <__assert_fail@plt+0x6e68>
   181d4:	mov	r2, #171	; 0xab
   181d8:	ldr	r1, [pc, #1580]	; 1880c <__assert_fail@plt+0x6e6c>
   181dc:	ldr	r0, [pc, #1584]	; 18814 <__assert_fail@plt+0x6e74>
   181e0:	bl	119a0 <__assert_fail@plt>
   181e4:	ldr	r3, [pc, #1564]	; 18808 <__assert_fail@plt+0x6e68>
   181e8:	mov	r2, #172	; 0xac
   181ec:	ldr	r1, [pc, #1560]	; 1880c <__assert_fail@plt+0x6e6c>
   181f0:	ldr	r0, [pc, #1568]	; 18818 <__assert_fail@plt+0x6e78>
   181f4:	bl	119a0 <__assert_fail@plt>
   181f8:	ldr	r3, [sp, #268]	; 0x10c
   181fc:	cmp	r3, #0
   18200:	bne	18640 <__assert_fail@plt+0x6ca0>
   18204:	bl	11964 <abort@plt>
   18208:	add	r0, sp, #244	; 0xf4
   1820c:	bl	11604 <mbsinit@plt>
   18210:	cmp	r0, #0
   18214:	beq	182a0 <__assert_fail@plt+0x6900>
   18218:	strb	r4, [sp, #240]	; 0xf0
   1821c:	ldr	r9, [sp, #256]	; 0x100
   18220:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18224:	mov	r1, r0
   18228:	mov	r0, r9
   1822c:	bl	1a380 <__assert_fail@plt+0x89e0>
   18230:	add	r3, sp, #244	; 0xf4
   18234:	mov	r2, r0
   18238:	mov	r1, r9
   1823c:	add	r0, sp, #268	; 0x10c
   18240:	bl	1b984 <__assert_fail@plt+0x9fe4>
   18244:	str	r0, [sp, #260]	; 0x104
   18248:	cmn	r0, #1
   1824c:	streq	r4, [sp, #260]	; 0x104
   18250:	strbeq	r5, [sp, #264]	; 0x108
   18254:	beq	18494 <__assert_fail@plt+0x6af4>
   18258:	cmn	r0, #2
   1825c:	beq	182b4 <__assert_fail@plt+0x6914>
   18260:	cmp	r0, #0
   18264:	bne	18288 <__assert_fail@plt+0x68e8>
   18268:	str	r4, [sp, #260]	; 0x104
   1826c:	ldr	r3, [sp, #256]	; 0x100
   18270:	ldrb	r3, [r3]
   18274:	cmp	r3, #0
   18278:	bne	182c8 <__assert_fail@plt+0x6928>
   1827c:	ldr	r3, [sp, #268]	; 0x10c
   18280:	cmp	r3, #0
   18284:	bne	182dc <__assert_fail@plt+0x693c>
   18288:	strb	r4, [sp, #264]	; 0x108
   1828c:	add	r0, sp, #244	; 0xf4
   18290:	bl	11604 <mbsinit@plt>
   18294:	cmp	r0, #0
   18298:	strbne	r5, [sp, #240]	; 0xf0
   1829c:	b	18494 <__assert_fail@plt+0x6af4>
   182a0:	ldr	r3, [pc, #1376]	; 18808 <__assert_fail@plt+0x6e68>
   182a4:	mov	r2, #143	; 0x8f
   182a8:	ldr	r1, [pc, #1372]	; 1880c <__assert_fail@plt+0x6e6c>
   182ac:	ldr	r0, [pc, #1372]	; 18810 <__assert_fail@plt+0x6e70>
   182b0:	bl	119a0 <__assert_fail@plt>
   182b4:	ldr	r0, [sp, #256]	; 0x100
   182b8:	bl	117a8 <strlen@plt>
   182bc:	str	r0, [sp, #260]	; 0x104
   182c0:	strb	r5, [sp, #264]	; 0x108
   182c4:	b	18494 <__assert_fail@plt+0x6af4>
   182c8:	ldr	r3, [pc, #1336]	; 18808 <__assert_fail@plt+0x6e68>
   182cc:	mov	r2, #171	; 0xab
   182d0:	ldr	r1, [pc, #1332]	; 1880c <__assert_fail@plt+0x6e6c>
   182d4:	ldr	r0, [pc, #1336]	; 18814 <__assert_fail@plt+0x6e74>
   182d8:	bl	119a0 <__assert_fail@plt>
   182dc:	ldr	r3, [pc, #1316]	; 18808 <__assert_fail@plt+0x6e68>
   182e0:	mov	r2, #172	; 0xac
   182e4:	ldr	r1, [pc, #1312]	; 1880c <__assert_fail@plt+0x6e6c>
   182e8:	ldr	r0, [pc, #1320]	; 18818 <__assert_fail@plt+0x6e78>
   182ec:	bl	119a0 <__assert_fail@plt>
   182f0:	ldr	r3, [sp, #268]	; 0x10c
   182f4:	cmp	r3, #0
   182f8:	bne	184a4 <__assert_fail@plt+0x6b04>
   182fc:	ldr	r0, [sp, #144]	; 0x90
   18300:	b	17b4c <__assert_fail@plt+0x61ac>
   18304:	add	r0, sp, #188	; 0xbc
   18308:	bl	11604 <mbsinit@plt>
   1830c:	cmp	r0, #0
   18310:	beq	1839c <__assert_fail@plt+0x69fc>
   18314:	strb	r4, [sp, #184]	; 0xb8
   18318:	ldr	r9, [sp, #200]	; 0xc8
   1831c:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18320:	mov	r1, r0
   18324:	mov	r0, r9
   18328:	bl	1a380 <__assert_fail@plt+0x89e0>
   1832c:	add	r3, sp, #188	; 0xbc
   18330:	mov	r2, r0
   18334:	mov	r1, r9
   18338:	add	r0, sp, #212	; 0xd4
   1833c:	bl	1b984 <__assert_fail@plt+0x9fe4>
   18340:	str	r0, [sp, #204]	; 0xcc
   18344:	cmn	r0, #1
   18348:	streq	r4, [sp, #204]	; 0xcc
   1834c:	strbeq	r5, [sp, #208]	; 0xd0
   18350:	beq	184ec <__assert_fail@plt+0x6b4c>
   18354:	cmn	r0, #2
   18358:	beq	183b0 <__assert_fail@plt+0x6a10>
   1835c:	cmp	r0, #0
   18360:	bne	18384 <__assert_fail@plt+0x69e4>
   18364:	str	r4, [sp, #204]	; 0xcc
   18368:	ldr	r3, [sp, #200]	; 0xc8
   1836c:	ldrb	r3, [r3]
   18370:	cmp	r3, #0
   18374:	bne	183c4 <__assert_fail@plt+0x6a24>
   18378:	ldr	r3, [sp, #212]	; 0xd4
   1837c:	cmp	r3, #0
   18380:	bne	183d8 <__assert_fail@plt+0x6a38>
   18384:	strb	r4, [sp, #208]	; 0xd0
   18388:	add	r0, sp, #188	; 0xbc
   1838c:	bl	11604 <mbsinit@plt>
   18390:	cmp	r0, #0
   18394:	strbne	r5, [sp, #184]	; 0xb8
   18398:	b	184ec <__assert_fail@plt+0x6b4c>
   1839c:	ldr	r3, [pc, #1124]	; 18808 <__assert_fail@plt+0x6e68>
   183a0:	mov	r2, #143	; 0x8f
   183a4:	ldr	r1, [pc, #1120]	; 1880c <__assert_fail@plt+0x6e6c>
   183a8:	ldr	r0, [pc, #1120]	; 18810 <__assert_fail@plt+0x6e70>
   183ac:	bl	119a0 <__assert_fail@plt>
   183b0:	ldr	r0, [sp, #200]	; 0xc8
   183b4:	bl	117a8 <strlen@plt>
   183b8:	str	r0, [sp, #204]	; 0xcc
   183bc:	strb	r5, [sp, #208]	; 0xd0
   183c0:	b	184ec <__assert_fail@plt+0x6b4c>
   183c4:	ldr	r3, [pc, #1084]	; 18808 <__assert_fail@plt+0x6e68>
   183c8:	mov	r2, #171	; 0xab
   183cc:	ldr	r1, [pc, #1080]	; 1880c <__assert_fail@plt+0x6e6c>
   183d0:	ldr	r0, [pc, #1084]	; 18814 <__assert_fail@plt+0x6e74>
   183d4:	bl	119a0 <__assert_fail@plt>
   183d8:	ldr	r3, [pc, #1064]	; 18808 <__assert_fail@plt+0x6e68>
   183dc:	mov	r2, #172	; 0xac
   183e0:	ldr	r1, [pc, #1060]	; 1880c <__assert_fail@plt+0x6e6c>
   183e4:	ldr	r0, [pc, #1068]	; 18818 <__assert_fail@plt+0x6e78>
   183e8:	bl	119a0 <__assert_fail@plt>
   183ec:	ldr	r3, [sp, #212]	; 0xd4
   183f0:	cmp	r3, #0
   183f4:	beq	18674 <__assert_fail@plt+0x6cd4>
   183f8:	ldrb	r3, [sp, #264]	; 0x108
   183fc:	cmp	r3, #0
   18400:	beq	184fc <__assert_fail@plt+0x6b5c>
   18404:	ldr	r3, [sp, #268]	; 0x10c
   18408:	ldr	r0, [sp, #212]	; 0xd4
   1840c:	subs	r0, r0, r3
   18410:	movne	r0, #1
   18414:	add	r2, r6, #1
   18418:	cmp	r0, #0
   1841c:	bne	1850c <__assert_fail@plt+0x6b6c>
   18420:	ldr	r1, [sp, #204]	; 0xcc
   18424:	ldr	r3, [sp, #200]	; 0xc8
   18428:	add	r3, r3, r1
   1842c:	str	r3, [sp, #200]	; 0xc8
   18430:	strb	r5, [sp, #196]	; 0xc4
   18434:	ldr	r1, [sp, #260]	; 0x104
   18438:	ldr	r3, [sp, #256]	; 0x100
   1843c:	add	r3, r3, r1
   18440:	str	r3, [sp, #256]	; 0x100
   18444:	strb	r5, [sp, #252]	; 0xfc
   18448:	mov	r6, r2
   1844c:	ldrb	r3, [sp, #252]	; 0xfc
   18450:	cmp	r3, #0
   18454:	bne	18498 <__assert_fail@plt+0x6af8>
   18458:	ldrb	r3, [sp, #240]	; 0xf0
   1845c:	cmp	r3, #0
   18460:	bne	1821c <__assert_fail@plt+0x687c>
   18464:	ldr	r1, [sp, #256]	; 0x100
   18468:	ldrb	r3, [r1]
   1846c:	lsr	r2, r3, #5
   18470:	and	r3, r3, #31
   18474:	ldr	r2, [r8, r2, lsl #2]
   18478:	lsr	r3, r2, r3
   1847c:	tst	r3, #1
   18480:	beq	18208 <__assert_fail@plt+0x6868>
   18484:	str	r4, [sp, #260]	; 0x104
   18488:	ldrb	r3, [r1]
   1848c:	str	r3, [sp, #268]	; 0x10c
   18490:	strb	r4, [sp, #264]	; 0x108
   18494:	strb	r4, [sp, #252]	; 0xfc
   18498:	ldrb	r3, [sp, #264]	; 0x108
   1849c:	cmp	r3, #0
   184a0:	bne	182f0 <__assert_fail@plt+0x6950>
   184a4:	ldrb	r3, [sp, #196]	; 0xc4
   184a8:	cmp	r3, #0
   184ac:	bne	184f0 <__assert_fail@plt+0x6b50>
   184b0:	ldrb	r3, [sp, #184]	; 0xb8
   184b4:	cmp	r3, #0
   184b8:	bne	18318 <__assert_fail@plt+0x6978>
   184bc:	ldr	r1, [sp, #200]	; 0xc8
   184c0:	ldrb	r3, [r1]
   184c4:	lsr	r2, r3, #5
   184c8:	and	r3, r3, #31
   184cc:	ldr	r2, [r8, r2, lsl #2]
   184d0:	lsr	r3, r2, r3
   184d4:	tst	r3, #1
   184d8:	beq	18304 <__assert_fail@plt+0x6964>
   184dc:	str	r4, [sp, #204]	; 0xcc
   184e0:	ldrb	r3, [r1]
   184e4:	str	r3, [sp, #212]	; 0xd4
   184e8:	strb	r4, [sp, #208]	; 0xd0
   184ec:	strb	r4, [sp, #196]	; 0xc4
   184f0:	ldrb	r3, [sp, #208]	; 0xd0
   184f4:	cmp	r3, #0
   184f8:	bne	183ec <__assert_fail@plt+0x6a4c>
   184fc:	ldr	r2, [sp, #204]	; 0xcc
   18500:	ldr	r3, [sp, #260]	; 0x104
   18504:	cmp	r2, r3
   18508:	beq	1865c <__assert_fail@plt+0x6cbc>
   1850c:	ldr	r2, [sp, #148]	; 0x94
   18510:	ldr	r3, [sp, #144]	; 0x90
   18514:	add	r3, r3, r2
   18518:	str	r3, [sp, #144]	; 0x90
   1851c:	strb	r5, [sp, #140]	; 0x8c
   18520:	mov	fp, r6
   18524:	ldrb	r3, [sp, #140]	; 0x8c
   18528:	cmp	r3, #0
   1852c:	bne	18570 <__assert_fail@plt+0x6bd0>
   18530:	ldrb	r3, [sp, #128]	; 0x80
   18534:	cmp	r3, #0
   18538:	bne	17cc0 <__assert_fail@plt+0x6320>
   1853c:	ldr	r1, [sp, #144]	; 0x90
   18540:	ldrb	r3, [r1]
   18544:	lsr	r2, r3, #5
   18548:	and	r3, r3, #31
   1854c:	ldr	r2, [r8, r2, lsl #2]
   18550:	lsr	r3, r2, r3
   18554:	tst	r3, #1
   18558:	beq	17cac <__assert_fail@plt+0x630c>
   1855c:	str	r4, [sp, #148]	; 0x94
   18560:	ldrb	r3, [r1]
   18564:	str	r3, [sp, #156]	; 0x9c
   18568:	strb	r4, [sp, #152]	; 0x98
   1856c:	strb	r4, [sp, #140]	; 0x8c
   18570:	ldrb	r3, [sp, #152]	; 0x98
   18574:	cmp	r3, #0
   18578:	bne	17d94 <__assert_fail@plt+0x63f4>
   1857c:	cmp	r7, #9
   18580:	movls	r3, #0
   18584:	andhi	r3, sl, #1
   18588:	cmp	r3, #0
   1858c:	addeq	r7, r7, #1
   18590:	addeq	r6, fp, #1
   18594:	bne	17db4 <__assert_fail@plt+0x6414>
   18598:	ldr	r2, [sp, #148]	; 0x94
   1859c:	ldr	r3, [sp, #36]	; 0x24
   185a0:	cmp	r2, r3
   185a4:	movne	r0, r5
   185a8:	beq	180f8 <__assert_fail@plt+0x6758>
   185ac:	cmp	r0, #0
   185b0:	beq	1850c <__assert_fail@plt+0x6b6c>
   185b4:	add	ip, sp, #184	; 0xb8
   185b8:	add	lr, sp, #128	; 0x80
   185bc:	ldm	lr!, {r0, r1, r2, r3}
   185c0:	stmia	ip!, {r0, r1, r2, r3}
   185c4:	ldm	lr!, {r0, r1, r2, r3}
   185c8:	stmia	ip!, {r0, r1, r2, r3}
   185cc:	ldm	lr!, {r0, r1, r2, r3}
   185d0:	stmia	ip!, {r0, r1, r2, r3}
   185d4:	ldm	lr, {r0, r1}
   185d8:	stm	ip, {r0, r1}
   185dc:	ldr	r2, [sp, #204]	; 0xcc
   185e0:	ldr	r3, [sp, #200]	; 0xc8
   185e4:	add	r3, r3, r2
   185e8:	str	r3, [sp, #200]	; 0xc8
   185ec:	strb	r5, [sp, #196]	; 0xc4
   185f0:	ldr	r3, [sp, #8]
   185f4:	str	r3, [sp, #256]	; 0x100
   185f8:	strb	r5, [sp, #240]	; 0xf0
   185fc:	str	r5, [sp, #244]	; 0xf4
   18600:	str	r5, [sp, #248]	; 0xf8
   18604:	strb	r5, [sp, #252]	; 0xfc
   18608:	ldrb	r2, [r3]
   1860c:	lsr	r3, r2, #5
   18610:	and	r1, r2, #31
   18614:	ldr	r3, [r8, r3, lsl #2]
   18618:	lsr	r3, r3, r1
   1861c:	tst	r3, #1
   18620:	beq	18110 <__assert_fail@plt+0x6770>
   18624:	str	r4, [sp, #260]	; 0x104
   18628:	str	r2, [sp, #268]	; 0x10c
   1862c:	strb	r4, [sp, #264]	; 0x108
   18630:	strb	r4, [sp, #252]	; 0xfc
   18634:	ldrb	r3, [sp, #264]	; 0x108
   18638:	cmp	r3, #0
   1863c:	bne	181f8 <__assert_fail@plt+0x6858>
   18640:	ldr	r2, [sp, #260]	; 0x104
   18644:	ldr	r3, [sp, #256]	; 0x100
   18648:	add	r3, r3, r2
   1864c:	str	r3, [sp, #256]	; 0x100
   18650:	strb	r5, [sp, #252]	; 0xfc
   18654:	add	r6, fp, #2
   18658:	b	1844c <__assert_fail@plt+0x6aac>
   1865c:	ldr	r1, [sp, #256]	; 0x100
   18660:	ldr	r0, [sp, #200]	; 0xc8
   18664:	bl	1161c <memcmp@plt>
   18668:	adds	r0, r0, #0
   1866c:	movne	r0, #1
   18670:	b	18414 <__assert_fail@plt+0x6a74>
   18674:	mov	r0, #0
   18678:	b	17b4c <__assert_fail@plt+0x61ac>
   1867c:	mov	r0, #0
   18680:	b	17b4c <__assert_fail@plt+0x61ac>
   18684:	ldrb	r7, [sl]
   18688:	cmp	r7, #0
   1868c:	beq	187a8 <__assert_fail@plt+0x6e08>
   18690:	add	r3, sl, #1
   18694:	str	r3, [sp, #8]
   18698:	ldr	r5, [sp, #4]
   1869c:	ldrb	r3, [r5]
   186a0:	cmp	r3, #0
   186a4:	beq	187b0 <__assert_fail@plt+0x6e10>
   186a8:	mov	r8, sl
   186ac:	mov	r4, #0
   186b0:	mov	r6, r4
   186b4:	mov	r9, r4
   186b8:	mov	fp, #1
   186bc:	mov	r0, r5
   186c0:	add	r6, r6, #1
   186c4:	add	r5, r5, #1
   186c8:	ldrb	r3, [r0]
   186cc:	cmp	r3, r7
   186d0:	beq	18744 <__assert_fail@plt+0x6da4>
   186d4:	str	r5, [sp, #4]
   186d8:	ldrb	r3, [r5]
   186dc:	cmp	r3, #0
   186e0:	beq	187a0 <__assert_fail@plt+0x6e00>
   186e4:	add	r4, r4, #1
   186e8:	cmp	r6, #9
   186ec:	movls	r3, #0
   186f0:	andhi	r3, fp, #1
   186f4:	cmp	r3, #0
   186f8:	beq	186bc <__assert_fail@plt+0x6d1c>
   186fc:	add	r3, r6, r6, lsl #2
   18700:	cmp	r3, r4
   18704:	bhi	186bc <__assert_fail@plt+0x6d1c>
   18708:	cmp	r8, #0
   1870c:	beq	187cc <__assert_fail@plt+0x6e2c>
   18710:	sub	r1, r4, r9
   18714:	mov	r0, r8
   18718:	bl	11874 <strnlen@plt>
   1871c:	ldrb	r3, [r8, r0]!
   18720:	cmp	r3, #0
   18724:	beq	187c8 <__assert_fail@plt+0x6e28>
   18728:	cmp	r8, #0
   1872c:	movne	r9, r4
   18730:	bne	186bc <__assert_fail@plt+0x6d1c>
   18734:	mov	r9, r4
   18738:	b	187cc <__assert_fail@plt+0x6e2c>
   1873c:	ldr	r0, [sp, #240]	; 0xf0
   18740:	b	17b4c <__assert_fail@plt+0x61ac>
   18744:	ldrb	r3, [sl, #1]
   18748:	cmp	r3, #0
   1874c:	beq	17b4c <__assert_fail@plt+0x61ac>
   18750:	mov	lr, r5
   18754:	ldrb	r2, [r5]
   18758:	cmp	r2, #0
   1875c:	beq	187b8 <__assert_fail@plt+0x6e18>
   18760:	add	r4, r4, #2
   18764:	cmp	r3, r2
   18768:	bne	18798 <__assert_fail@plt+0x6df8>
   1876c:	mov	ip, r5
   18770:	ldr	r1, [sp, #8]
   18774:	ldrb	r3, [r1, #1]!
   18778:	cmp	r3, #0
   1877c:	beq	17b4c <__assert_fail@plt+0x61ac>
   18780:	ldrb	r2, [ip, #1]!
   18784:	cmp	r2, #0
   18788:	beq	187c0 <__assert_fail@plt+0x6e20>
   1878c:	add	r4, r4, #1
   18790:	cmp	r3, r2
   18794:	beq	18774 <__assert_fail@plt+0x6dd4>
   18798:	str	lr, [sp, #4]
   1879c:	b	186e8 <__assert_fail@plt+0x6d48>
   187a0:	mov	r0, #0
   187a4:	b	17b4c <__assert_fail@plt+0x61ac>
   187a8:	ldr	r0, [sp, #4]
   187ac:	b	17b4c <__assert_fail@plt+0x61ac>
   187b0:	mov	r0, #0
   187b4:	b	17b4c <__assert_fail@plt+0x61ac>
   187b8:	mov	r0, #0
   187bc:	b	17b4c <__assert_fail@plt+0x61ac>
   187c0:	mov	r0, #0
   187c4:	b	17b4c <__assert_fail@plt+0x61ac>
   187c8:	mov	r9, r4
   187cc:	mov	r0, sl
   187d0:	bl	117a8 <strlen@plt>
   187d4:	add	r3, sp, #240	; 0xf0
   187d8:	mov	r2, r0
   187dc:	mov	r1, sl
   187e0:	ldr	r0, [sp, #4]
   187e4:	bl	17090 <__assert_fail@plt+0x56f0>
   187e8:	subs	fp, r0, #0
   187ec:	bne	1873c <__assert_fail@plt+0x6d9c>
   187f0:	mov	r8, #0
   187f4:	b	186bc <__assert_fail@plt+0x6d1c>
   187f8:	add	r7, r7, #1
   187fc:	add	r6, fp, #1
   18800:	b	17e3c <__assert_fail@plt+0x649c>
   18804:	andeq	ip, r2, r0, asr sp
   18808:	andeq	ip, r2, r8, lsr #11
   1880c:	andeq	ip, r2, r4, asr #10
   18810:	andeq	ip, r2, r0, asr r5
   18814:	andeq	ip, r2, r8, ror #10
   18818:	andeq	ip, r2, r0, lsl #11
   1881c:	push	{r4, r5, r6, lr}
   18820:	subs	r4, r0, #0
   18824:	beq	1889c <__assert_fail@plt+0x6efc>
   18828:	mov	r1, #47	; 0x2f
   1882c:	mov	r0, r4
   18830:	bl	118a4 <strrchr@plt>
   18834:	cmp	r0, #0
   18838:	addne	r5, r0, #1
   1883c:	moveq	r5, r4
   18840:	sub	r3, r5, r4
   18844:	cmp	r3, #6
   18848:	ble	18888 <__assert_fail@plt+0x6ee8>
   1884c:	mov	r2, #7
   18850:	ldr	r1, [pc, #96]	; 188b8 <__assert_fail@plt+0x6f18>
   18854:	sub	r0, r5, #7
   18858:	bl	11958 <strncmp@plt>
   1885c:	cmp	r0, #0
   18860:	bne	18888 <__assert_fail@plt+0x6ee8>
   18864:	mov	r2, #3
   18868:	ldr	r1, [pc, #76]	; 188bc <__assert_fail@plt+0x6f1c>
   1886c:	mov	r0, r5
   18870:	bl	11958 <strncmp@plt>
   18874:	cmp	r0, #0
   18878:	addeq	r4, r5, #3
   1887c:	ldreq	r3, [pc, #60]	; 188c0 <__assert_fail@plt+0x6f20>
   18880:	streq	r4, [r3]
   18884:	movne	r4, r5
   18888:	ldr	r3, [pc, #52]	; 188c4 <__assert_fail@plt+0x6f24>
   1888c:	str	r4, [r3]
   18890:	ldr	r3, [pc, #48]	; 188c8 <__assert_fail@plt+0x6f28>
   18894:	str	r4, [r3]
   18898:	pop	{r4, r5, r6, pc}
   1889c:	ldr	r3, [pc, #40]	; 188cc <__assert_fail@plt+0x6f2c>
   188a0:	ldr	r3, [r3]
   188a4:	mov	r2, #55	; 0x37
   188a8:	mov	r1, #1
   188ac:	ldr	r0, [pc, #28]	; 188d0 <__assert_fail@plt+0x6f30>
   188b0:	bl	11688 <fwrite@plt>
   188b4:	bl	11964 <abort@plt>
   188b8:	strdeq	ip, [r2], -r4
   188bc:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   188c0:	andeq	sp, r3, r8, lsl #4
   188c4:	andeq	sp, r3, r0, lsr #5
   188c8:	andeq	sp, r3, ip, lsl #4
   188cc:	andeq	sp, r3, r8, lsl r2
   188d0:			; <UNDEFINED> instruction: 0x0002c5bc
   188d4:	push	{r4, r5, r6, lr}
   188d8:	mov	r5, r0
   188dc:	mov	r4, r1
   188e0:	mov	r2, #48	; 0x30
   188e4:	mov	r1, #0
   188e8:	bl	11814 <memset@plt>
   188ec:	cmp	r4, #10
   188f0:	beq	18900 <__assert_fail@plt+0x6f60>
   188f4:	str	r4, [r5]
   188f8:	mov	r0, r5
   188fc:	pop	{r4, r5, r6, pc}
   18900:	bl	11964 <abort@plt>
   18904:	push	{r4, r5, r6, lr}
   18908:	mov	r4, r0
   1890c:	mov	r5, r1
   18910:	mov	r2, #5
   18914:	mov	r1, r0
   18918:	mov	r0, #0
   1891c:	bl	11628 <dcgettext@plt>
   18920:	cmp	r4, r0
   18924:	popne	{r4, r5, r6, pc}
   18928:	bl	2a724 <__assert_fail@plt+0x18d84>
   1892c:	ldrb	r3, [r0]
   18930:	bic	r3, r3, #32
   18934:	cmp	r3, #85	; 0x55
   18938:	beq	189b4 <__assert_fail@plt+0x7014>
   1893c:	cmp	r3, #71	; 0x47
   18940:	bne	18a10 <__assert_fail@plt+0x7070>
   18944:	ldrb	r3, [r0, #1]
   18948:	bic	r3, r3, #32
   1894c:	cmp	r3, #66	; 0x42
   18950:	bne	18a10 <__assert_fail@plt+0x7070>
   18954:	ldrb	r3, [r0, #2]
   18958:	cmp	r3, #49	; 0x31
   1895c:	bne	18a10 <__assert_fail@plt+0x7070>
   18960:	ldrb	r3, [r0, #3]
   18964:	cmp	r3, #56	; 0x38
   18968:	bne	18a10 <__assert_fail@plt+0x7070>
   1896c:	ldrb	r3, [r0, #4]
   18970:	cmp	r3, #48	; 0x30
   18974:	bne	18a10 <__assert_fail@plt+0x7070>
   18978:	ldrb	r3, [r0, #5]
   1897c:	cmp	r3, #51	; 0x33
   18980:	bne	18a10 <__assert_fail@plt+0x7070>
   18984:	ldrb	r3, [r0, #6]
   18988:	cmp	r3, #48	; 0x30
   1898c:	bne	18a10 <__assert_fail@plt+0x7070>
   18990:	ldrb	r3, [r0, #7]
   18994:	cmp	r3, #0
   18998:	bne	18a10 <__assert_fail@plt+0x7070>
   1899c:	ldrb	r2, [r4]
   189a0:	ldr	r3, [pc, #124]	; 18a24 <__assert_fail@plt+0x7084>
   189a4:	ldr	r0, [pc, #124]	; 18a28 <__assert_fail@plt+0x7088>
   189a8:	cmp	r2, #96	; 0x60
   189ac:	movne	r0, r3
   189b0:	pop	{r4, r5, r6, pc}
   189b4:	ldrb	r3, [r0, #1]
   189b8:	bic	r3, r3, #32
   189bc:	cmp	r3, #84	; 0x54
   189c0:	bne	18a10 <__assert_fail@plt+0x7070>
   189c4:	ldrb	r3, [r0, #2]
   189c8:	bic	r3, r3, #32
   189cc:	cmp	r3, #70	; 0x46
   189d0:	bne	18a10 <__assert_fail@plt+0x7070>
   189d4:	ldrb	r3, [r0, #3]
   189d8:	cmp	r3, #45	; 0x2d
   189dc:	bne	18a10 <__assert_fail@plt+0x7070>
   189e0:	ldrb	r3, [r0, #4]
   189e4:	cmp	r3, #56	; 0x38
   189e8:	bne	18a10 <__assert_fail@plt+0x7070>
   189ec:	ldrb	r3, [r0, #5]
   189f0:	cmp	r3, #0
   189f4:	bne	18a10 <__assert_fail@plt+0x7070>
   189f8:	ldrb	r2, [r4]
   189fc:	ldr	r3, [pc, #40]	; 18a2c <__assert_fail@plt+0x708c>
   18a00:	ldr	r0, [pc, #40]	; 18a30 <__assert_fail@plt+0x7090>
   18a04:	cmp	r2, #96	; 0x60
   18a08:	movne	r0, r3
   18a0c:	pop	{r4, r5, r6, pc}
   18a10:	ldr	r3, [pc, #28]	; 18a34 <__assert_fail@plt+0x7094>
   18a14:	ldr	r0, [pc, #28]	; 18a38 <__assert_fail@plt+0x7098>
   18a18:	cmp	r5, #9
   18a1c:	movne	r0, r3
   18a20:	pop	{r4, r5, r6, pc}
   18a24:	andeq	ip, r2, r8, asr r6
   18a28:	andeq	ip, r2, r4, ror #12
   18a2c:	andeq	ip, r2, r4, asr r6
   18a30:	andeq	ip, r2, r8, ror #12
   18a34:	andeq	ip, r2, ip, asr r6
   18a38:	andeq	ip, r2, r0, ror #12
   18a3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a40:	sub	sp, sp, #116	; 0x74
   18a44:	str	r0, [sp, #36]	; 0x24
   18a48:	mov	sl, r1
   18a4c:	str	r2, [sp, #52]	; 0x34
   18a50:	str	r3, [sp, #28]
   18a54:	ldr	r8, [sp, #152]	; 0x98
   18a58:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   18a5c:	str	r0, [sp, #84]	; 0x54
   18a60:	ldr	r3, [sp, #156]	; 0x9c
   18a64:	lsr	r3, r3, #1
   18a68:	and	r3, r3, #1
   18a6c:	str	r3, [sp, #32]
   18a70:	mov	r3, #1
   18a74:	str	r3, [sp, #40]	; 0x28
   18a78:	mov	r3, #0
   18a7c:	str	r3, [sp, #80]	; 0x50
   18a80:	str	r3, [sp, #44]	; 0x2c
   18a84:	str	r3, [sp, #48]	; 0x30
   18a88:	str	r3, [sp, #60]	; 0x3c
   18a8c:	str	r3, [sp, #72]	; 0x48
   18a90:	str	r3, [sp, #76]	; 0x4c
   18a94:	mov	r7, sl
   18a98:	mov	sl, r8
   18a9c:	cmp	sl, #10
   18aa0:	ldrls	pc, [pc, sl, lsl #2]
   18aa4:	b	18c5c <__assert_fail@plt+0x72bc>
   18aa8:	andeq	r8, r1, ip, lsl #22
   18aac:	ldrdeq	r8, [r1], -ip
   18ab0:	andeq	r8, r1, r8, lsr ip
   18ab4:	ldrdeq	r8, [r1], -r4
   18ab8:	andeq	r8, r1, ip, ror #23
   18abc:	andeq	r8, r1, ip, lsl fp
   18ac0:	andeq	r9, r1, r8, lsl #23
   18ac4:	andeq	r8, r1, r0, ror #24
   18ac8:	andeq	r8, r1, r8, asr fp
   18acc:	andeq	r8, r1, r8, asr fp
   18ad0:	andeq	r8, r1, r8, asr fp
   18ad4:	mov	r3, #1
   18ad8:	str	r3, [sp, #48]	; 0x30
   18adc:	mov	r3, #1
   18ae0:	str	r3, [sp, #32]
   18ae4:	str	r3, [sp, #60]	; 0x3c
   18ae8:	ldr	r3, [pc, #4068]	; 19ad4 <__assert_fail@plt+0x8134>
   18aec:	str	r3, [sp, #72]	; 0x48
   18af0:	mov	fp, #0
   18af4:	mov	sl, #2
   18af8:	mov	r6, #0
   18afc:	ldr	r3, [sp, #48]	; 0x30
   18b00:	eor	r3, r3, #1
   18b04:	str	r3, [sp, #68]	; 0x44
   18b08:	b	193f0 <__assert_fail@plt+0x7a50>
   18b0c:	mov	r3, #0
   18b10:	str	r3, [sp, #32]
   18b14:	mov	fp, r3
   18b18:	b	18af8 <__assert_fail@plt+0x7158>
   18b1c:	ldr	r3, [sp, #32]
   18b20:	cmp	r3, #0
   18b24:	bne	18c78 <__assert_fail@plt+0x72d8>
   18b28:	cmp	r7, #0
   18b2c:	beq	18c98 <__assert_fail@plt+0x72f8>
   18b30:	ldr	r3, [sp, #36]	; 0x24
   18b34:	mov	r2, #34	; 0x22
   18b38:	strb	r2, [r3]
   18b3c:	mov	r3, #1
   18b40:	str	r3, [sp, #48]	; 0x30
   18b44:	str	r3, [sp, #60]	; 0x3c
   18b48:	ldr	r3, [pc, #3980]	; 19adc <__assert_fail@plt+0x813c>
   18b4c:	str	r3, [sp, #72]	; 0x48
   18b50:	mov	fp, #1
   18b54:	b	18af8 <__assert_fail@plt+0x7158>
   18b58:	cmp	sl, #10
   18b5c:	beq	18b80 <__assert_fail@plt+0x71e0>
   18b60:	mov	r1, sl
   18b64:	ldr	r0, [pc, #3948]	; 19ad8 <__assert_fail@plt+0x8138>
   18b68:	bl	18904 <__assert_fail@plt+0x6f64>
   18b6c:	str	r0, [sp, #164]	; 0xa4
   18b70:	mov	r1, sl
   18b74:	ldr	r0, [pc, #3928]	; 19ad4 <__assert_fail@plt+0x8134>
   18b78:	bl	18904 <__assert_fail@plt+0x6f64>
   18b7c:	str	r0, [sp, #168]	; 0xa8
   18b80:	ldr	r3, [sp, #32]
   18b84:	cmp	r3, #0
   18b88:	movne	fp, #0
   18b8c:	bne	18bc4 <__assert_fail@plt+0x7224>
   18b90:	ldr	r3, [sp, #164]	; 0xa4
   18b94:	ldrb	r3, [r3]
   18b98:	cmp	r3, #0
   18b9c:	beq	18be4 <__assert_fail@plt+0x7244>
   18ba0:	ldr	r2, [sp, #164]	; 0xa4
   18ba4:	mov	fp, #0
   18ba8:	ldr	r1, [sp, #36]	; 0x24
   18bac:	cmp	r7, fp
   18bb0:	strbhi	r3, [r1, fp]
   18bb4:	add	fp, fp, #1
   18bb8:	ldrb	r3, [r2, #1]!
   18bbc:	cmp	r3, #0
   18bc0:	bne	18bac <__assert_fail@plt+0x720c>
   18bc4:	ldr	r0, [sp, #168]	; 0xa8
   18bc8:	bl	117a8 <strlen@plt>
   18bcc:	str	r0, [sp, #60]	; 0x3c
   18bd0:	ldr	r3, [sp, #168]	; 0xa8
   18bd4:	str	r3, [sp, #72]	; 0x48
   18bd8:	mov	r3, #1
   18bdc:	str	r3, [sp, #48]	; 0x30
   18be0:	b	18af8 <__assert_fail@plt+0x7158>
   18be4:	mov	fp, #0
   18be8:	b	18bc4 <__assert_fail@plt+0x7224>
   18bec:	ldr	r3, [sp, #32]
   18bf0:	cmp	r3, #0
   18bf4:	bne	18cb4 <__assert_fail@plt+0x7314>
   18bf8:	mov	r3, #1
   18bfc:	str	r3, [sp, #48]	; 0x30
   18c00:	cmp	r7, #0
   18c04:	beq	18cd0 <__assert_fail@plt+0x7330>
   18c08:	ldr	r3, [sp, #36]	; 0x24
   18c0c:	mov	r2, #39	; 0x27
   18c10:	strb	r2, [r3]
   18c14:	mov	r3, #0
   18c18:	str	r3, [sp, #32]
   18c1c:	mov	r3, #1
   18c20:	str	r3, [sp, #60]	; 0x3c
   18c24:	ldr	r3, [pc, #3752]	; 19ad4 <__assert_fail@plt+0x8134>
   18c28:	str	r3, [sp, #72]	; 0x48
   18c2c:	mov	fp, #1
   18c30:	mov	sl, #2
   18c34:	b	18af8 <__assert_fail@plt+0x7158>
   18c38:	ldr	r3, [sp, #32]
   18c3c:	cmp	r3, #0
   18c40:	beq	18c00 <__assert_fail@plt+0x7260>
   18c44:	mov	r3, #1
   18c48:	str	r3, [sp, #60]	; 0x3c
   18c4c:	ldr	r3, [pc, #3712]	; 19ad4 <__assert_fail@plt+0x8134>
   18c50:	str	r3, [sp, #72]	; 0x48
   18c54:	mov	fp, #0
   18c58:	b	18af8 <__assert_fail@plt+0x7158>
   18c5c:	bl	11964 <abort@plt>
   18c60:	mov	r3, #0
   18c64:	str	r3, [sp, #32]
   18c68:	mov	r3, #1
   18c6c:	str	r3, [sp, #48]	; 0x30
   18c70:	mov	fp, #0
   18c74:	b	18af8 <__assert_fail@plt+0x7158>
   18c78:	ldr	r3, [sp, #32]
   18c7c:	str	r3, [sp, #48]	; 0x30
   18c80:	mov	r3, #1
   18c84:	str	r3, [sp, #60]	; 0x3c
   18c88:	ldr	r3, [pc, #3660]	; 19adc <__assert_fail@plt+0x813c>
   18c8c:	str	r3, [sp, #72]	; 0x48
   18c90:	mov	fp, #0
   18c94:	b	18af8 <__assert_fail@plt+0x7158>
   18c98:	mov	r3, #1
   18c9c:	str	r3, [sp, #48]	; 0x30
   18ca0:	str	r3, [sp, #60]	; 0x3c
   18ca4:	ldr	r3, [pc, #3632]	; 19adc <__assert_fail@plt+0x813c>
   18ca8:	str	r3, [sp, #72]	; 0x48
   18cac:	mov	fp, #1
   18cb0:	b	18af8 <__assert_fail@plt+0x7158>
   18cb4:	mov	r3, #1
   18cb8:	str	r3, [sp, #60]	; 0x3c
   18cbc:	ldr	r3, [pc, #3600]	; 19ad4 <__assert_fail@plt+0x8134>
   18cc0:	str	r3, [sp, #72]	; 0x48
   18cc4:	mov	fp, #0
   18cc8:	mov	sl, #2
   18ccc:	b	18af8 <__assert_fail@plt+0x7158>
   18cd0:	mov	r3, #0
   18cd4:	str	r3, [sp, #32]
   18cd8:	mov	r3, #1
   18cdc:	str	r3, [sp, #60]	; 0x3c
   18ce0:	ldr	r3, [pc, #3564]	; 19ad4 <__assert_fail@plt+0x8134>
   18ce4:	str	r3, [sp, #72]	; 0x48
   18ce8:	mov	fp, #1
   18cec:	mov	sl, #2
   18cf0:	b	18af8 <__assert_fail@plt+0x7158>
   18cf4:	mov	r3, #0
   18cf8:	str	r3, [sp, #56]	; 0x38
   18cfc:	ldr	r3, [sp, #52]	; 0x34
   18d00:	add	r2, r3, r6
   18d04:	str	r2, [sp, #64]	; 0x40
   18d08:	ldrb	r4, [r3, r6]
   18d0c:	cmp	r4, #126	; 0x7e
   18d10:	ldrls	pc, [pc, r4, lsl #2]
   18d14:	b	19550 <__assert_fail@plt+0x7bb0>
   18d18:	andeq	r8, r1, r0, lsr pc
   18d1c:	andeq	r9, r1, r0, asr r5
   18d20:	andeq	r9, r1, r0, asr r5
   18d24:	andeq	r9, r1, r0, asr r5
   18d28:	andeq	r9, r1, r0, asr r5
   18d2c:	andeq	r9, r1, r0, asr r5
   18d30:	andeq	r9, r1, r0, asr r5
   18d34:	andeq	r9, r1, ip, lsl #5
   18d38:	andeq	r8, r1, r8, lsr #30
   18d3c:	andeq	r9, r1, r4, asr #4
   18d40:	andeq	r9, r1, ip, lsr r2
   18d44:	andeq	r9, r1, ip, lsr #3
   18d48:	andeq	r9, r1, r4, lsr #3
   18d4c:	andeq	r8, r1, r0, lsr #30
   18d50:	andeq	r9, r1, r0, asr r5
   18d54:	andeq	r9, r1, r0, asr r5
   18d58:	andeq	r9, r1, r0, asr r5
   18d5c:	andeq	r9, r1, r0, asr r5
   18d60:	andeq	r9, r1, r0, asr r5
   18d64:	andeq	r9, r1, r0, asr r5
   18d68:	andeq	r9, r1, r0, asr r5
   18d6c:	andeq	r9, r1, r0, asr r5
   18d70:	andeq	r9, r1, r0, asr r5
   18d74:	andeq	r9, r1, r0, asr r5
   18d78:	andeq	r9, r1, r0, asr r5
   18d7c:	andeq	r9, r1, r0, asr r5
   18d80:	andeq	r9, r1, r0, asr r5
   18d84:	andeq	r9, r1, r0, asr r5
   18d88:	andeq	r9, r1, r0, asr r5
   18d8c:	andeq	r9, r1, r0, asr r5
   18d90:	andeq	r9, r1, r0, asr r5
   18d94:	andeq	r9, r1, r0, asr r5
   18d98:	andeq	r9, r1, r0, ror #5
   18d9c:	ldrdeq	r9, [r1], -ip
   18da0:	ldrdeq	r9, [r1], -ip
   18da4:			; <UNDEFINED> instruction: 0x000192b4
   18da8:	ldrdeq	r9, [r1], -ip
   18dac:	andeq	r9, r1, r4, lsr #18
   18db0:	ldrdeq	r9, [r1], -ip
   18db4:			; <UNDEFINED> instruction: 0x000194b4
   18db8:	ldrdeq	r9, [r1], -ip
   18dbc:	ldrdeq	r9, [r1], -ip
   18dc0:	ldrdeq	r9, [r1], -ip
   18dc4:	andeq	r9, r1, r4, lsr #18
   18dc8:	andeq	r9, r1, r4, lsr #18
   18dcc:	andeq	r9, r1, r4, lsr #18
   18dd0:	andeq	r9, r1, r4, lsr #18
   18dd4:	andeq	r9, r1, r4, lsr #18
   18dd8:	andeq	r9, r1, r4, lsr #18
   18ddc:	andeq	r9, r1, r4, lsr #18
   18de0:	andeq	r9, r1, r4, lsr #18
   18de4:	andeq	r9, r1, r4, lsr #18
   18de8:	andeq	r9, r1, r4, lsr #18
   18dec:	andeq	r9, r1, r4, lsr #18
   18df0:	andeq	r9, r1, r4, lsr #18
   18df4:	andeq	r9, r1, r4, lsr #18
   18df8:	andeq	r9, r1, r4, lsr #18
   18dfc:	andeq	r9, r1, r4, lsr #18
   18e00:	andeq	r9, r1, r4, lsr #18
   18e04:	ldrdeq	r9, [r1], -ip
   18e08:	ldrdeq	r9, [r1], -ip
   18e0c:	ldrdeq	r9, [r1], -ip
   18e10:	ldrdeq	r9, [r1], -ip
   18e14:	andeq	r9, r1, r8, lsr r0
   18e18:	andeq	r9, r1, r0, asr r5
   18e1c:	andeq	r9, r1, r4, lsr #18
   18e20:	andeq	r9, r1, r4, lsr #18
   18e24:	andeq	r9, r1, r4, lsr #18
   18e28:	andeq	r9, r1, r4, lsr #18
   18e2c:	andeq	r9, r1, r4, lsr #18
   18e30:	andeq	r9, r1, r4, lsr #18
   18e34:	andeq	r9, r1, r4, lsr #18
   18e38:	andeq	r9, r1, r4, lsr #18
   18e3c:	andeq	r9, r1, r4, lsr #18
   18e40:	andeq	r9, r1, r4, lsr #18
   18e44:	andeq	r9, r1, r4, lsr #18
   18e48:	andeq	r9, r1, r4, lsr #18
   18e4c:	andeq	r9, r1, r4, lsr #18
   18e50:	andeq	r9, r1, r4, lsr #18
   18e54:	andeq	r9, r1, r4, lsr #18
   18e58:	andeq	r9, r1, r4, lsr #18
   18e5c:	andeq	r9, r1, r4, lsr #18
   18e60:	andeq	r9, r1, r4, lsr #18
   18e64:	andeq	r9, r1, r4, lsr #18
   18e68:	andeq	r9, r1, r4, lsr #18
   18e6c:	andeq	r9, r1, r4, lsr #18
   18e70:	andeq	r9, r1, r4, lsr #18
   18e74:	andeq	r9, r1, r4, lsr #18
   18e78:	andeq	r9, r1, r4, lsr #18
   18e7c:	andeq	r9, r1, r4, lsr #18
   18e80:	andeq	r9, r1, r4, lsr #18
   18e84:	ldrdeq	r9, [r1], -ip
   18e88:			; <UNDEFINED> instruction: 0x000191b4
   18e8c:	andeq	r9, r1, r4, lsr #18
   18e90:	ldrdeq	r9, [r1], -ip
   18e94:	andeq	r9, r1, r4, lsr #18
   18e98:	ldrdeq	r9, [r1], -ip
   18e9c:	andeq	r9, r1, r4, lsr #18
   18ea0:	andeq	r9, r1, r4, lsr #18
   18ea4:	andeq	r9, r1, r4, lsr #18
   18ea8:	andeq	r9, r1, r4, lsr #18
   18eac:	andeq	r9, r1, r4, lsr #18
   18eb0:	andeq	r9, r1, r4, lsr #18
   18eb4:	andeq	r9, r1, r4, lsr #18
   18eb8:	andeq	r9, r1, r4, lsr #18
   18ebc:	andeq	r9, r1, r4, lsr #18
   18ec0:	andeq	r9, r1, r4, lsr #18
   18ec4:	andeq	r9, r1, r4, lsr #18
   18ec8:	andeq	r9, r1, r4, lsr #18
   18ecc:	andeq	r9, r1, r4, lsr #18
   18ed0:	andeq	r9, r1, r4, lsr #18
   18ed4:	andeq	r9, r1, r4, lsr #18
   18ed8:	andeq	r9, r1, r4, lsr #18
   18edc:	andeq	r9, r1, r4, lsr #18
   18ee0:	andeq	r9, r1, r4, lsr #18
   18ee4:	andeq	r9, r1, r4, lsr #18
   18ee8:	andeq	r9, r1, r4, lsr #18
   18eec:	andeq	r9, r1, r4, lsr #18
   18ef0:	andeq	r9, r1, r4, lsr #18
   18ef4:	andeq	r9, r1, r4, lsr #18
   18ef8:	andeq	r9, r1, r4, lsr #18
   18efc:	andeq	r9, r1, r4, lsr #18
   18f00:	andeq	r9, r1, r4, lsr #18
   18f04:	muleq	r1, r4, r2
   18f08:	ldrdeq	r9, [r1], -ip
   18f0c:	muleq	r1, r4, r2
   18f10:			; <UNDEFINED> instruction: 0x000192b4
   18f14:	mov	r3, #0
   18f18:	str	r3, [sp, #56]	; 0x38
   18f1c:	b	18cfc <__assert_fail@plt+0x735c>
   18f20:	mov	r3, #114	; 0x72
   18f24:	b	19248 <__assert_fail@plt+0x78a8>
   18f28:	mov	r3, #98	; 0x62
   18f2c:	b	19260 <__assert_fail@plt+0x78c0>
   18f30:	ldr	r3, [sp, #48]	; 0x30
   18f34:	cmp	r3, #0
   18f38:	beq	19020 <__assert_fail@plt+0x7680>
   18f3c:	ldr	r3, [sp, #32]
   18f40:	cmp	r3, #0
   18f44:	bne	19aa8 <__assert_fail@plt+0x8108>
   18f48:	ldr	r3, [sp, #44]	; 0x2c
   18f4c:	eor	r3, r3, #1
   18f50:	cmp	sl, #2
   18f54:	movne	r3, #0
   18f58:	andeq	r3, r3, #1
   18f5c:	cmp	r3, #0
   18f60:	moveq	r2, fp
   18f64:	beq	18fa8 <__assert_fail@plt+0x7608>
   18f68:	cmp	r7, fp
   18f6c:	ldrhi	r2, [sp, #36]	; 0x24
   18f70:	movhi	r1, #39	; 0x27
   18f74:	strbhi	r1, [r2, fp]
   18f78:	add	r2, fp, #1
   18f7c:	cmp	r7, r2
   18f80:	ldrhi	r1, [sp, #36]	; 0x24
   18f84:	movhi	r0, #36	; 0x24
   18f88:	strbhi	r0, [r1, r2]
   18f8c:	add	r2, fp, #2
   18f90:	cmp	r7, r2
   18f94:	ldrhi	r1, [sp, #36]	; 0x24
   18f98:	movhi	r0, #39	; 0x27
   18f9c:	strbhi	r0, [r1, r2]
   18fa0:	add	r2, fp, #3
   18fa4:	str	r3, [sp, #44]	; 0x2c
   18fa8:	cmp	r7, r2
   18fac:	ldrhi	r3, [sp, #36]	; 0x24
   18fb0:	movhi	r1, #92	; 0x5c
   18fb4:	strbhi	r1, [r3, r2]
   18fb8:	add	fp, r2, #1
   18fbc:	cmp	r5, #0
   18fc0:	beq	1992c <__assert_fail@plt+0x7f8c>
   18fc4:	add	r3, r6, #1
   18fc8:	ldr	r1, [sp, #28]
   18fcc:	cmp	r1, r3
   18fd0:	bls	1993c <__assert_fail@plt+0x7f9c>
   18fd4:	ldr	r1, [sp, #52]	; 0x34
   18fd8:	ldrb	r3, [r1, r3]
   18fdc:	sub	r3, r3, #48	; 0x30
   18fe0:	uxtb	r3, r3
   18fe4:	cmp	r3, #9
   18fe8:	bhi	19948 <__assert_fail@plt+0x7fa8>
   18fec:	cmp	r7, fp
   18ff0:	movhi	r3, #48	; 0x30
   18ff4:	ldrhi	r1, [sp, #36]	; 0x24
   18ff8:	strbhi	r3, [r1, fp]
   18ffc:	add	r3, r2, #2
   19000:	cmp	r7, r3
   19004:	movhi	r1, #48	; 0x30
   19008:	ldrhi	r0, [sp, #36]	; 0x24
   1900c:	strbhi	r1, [r0, r3]
   19010:	add	fp, r2, #3
   19014:	ldr	r8, [sp, #32]
   19018:	mov	r4, #48	; 0x30
   1901c:	b	192f8 <__assert_fail@plt+0x7958>
   19020:	ldr	r3, [sp, #156]	; 0x9c
   19024:	tst	r3, #1
   19028:	bne	193ec <__assert_fail@plt+0x7a4c>
   1902c:	ldr	r5, [sp, #48]	; 0x30
   19030:	mov	r8, r5
   19034:	b	192f8 <__assert_fail@plt+0x7958>
   19038:	cmp	sl, #2
   1903c:	beq	19054 <__assert_fail@plt+0x76b4>
   19040:	cmp	sl, #5
   19044:	beq	1906c <__assert_fail@plt+0x76cc>
   19048:	mov	r8, #0
   1904c:	mov	r5, r8
   19050:	b	192f8 <__assert_fail@plt+0x7958>
   19054:	ldr	r3, [sp, #32]
   19058:	cmp	r3, #0
   1905c:	bne	19abc <__assert_fail@plt+0x811c>
   19060:	mov	r8, r3
   19064:	mov	r5, r3
   19068:	b	192f8 <__assert_fail@plt+0x7958>
   1906c:	ldr	r3, [sp, #156]	; 0x9c
   19070:	tst	r3, #4
   19074:	beq	19954 <__assert_fail@plt+0x7fb4>
   19078:	add	r3, r6, #2
   1907c:	ldr	r2, [sp, #28]
   19080:	cmp	r2, r3
   19084:	bls	19960 <__assert_fail@plt+0x7fc0>
   19088:	ldr	r2, [sp, #52]	; 0x34
   1908c:	add	r2, r2, r6
   19090:	ldrb	r2, [r2, #1]
   19094:	cmp	r2, #63	; 0x3f
   19098:	movne	r8, #0
   1909c:	movne	r5, r8
   190a0:	bne	192f8 <__assert_fail@plt+0x7958>
   190a4:	ldr	r2, [sp, #52]	; 0x34
   190a8:	ldrb	r2, [r2, r3]
   190ac:	sub	r1, r2, #33	; 0x21
   190b0:	cmp	r1, #29
   190b4:	ldrls	pc, [pc, r1, lsl #2]
   190b8:	b	1996c <__assert_fail@plt+0x7fcc>
   190bc:	andeq	r9, r1, r4, lsr r1
   190c0:	andeq	r9, r1, ip, ror #18
   190c4:	andeq	r9, r1, ip, ror #18
   190c8:	andeq	r9, r1, ip, ror #18
   190cc:	andeq	r9, r1, ip, ror #18
   190d0:	andeq	r9, r1, ip, ror #18
   190d4:	andeq	r9, r1, r4, lsr r1
   190d8:	andeq	r9, r1, r4, lsr r1
   190dc:	andeq	r9, r1, r4, lsr r1
   190e0:	andeq	r9, r1, ip, ror #18
   190e4:	andeq	r9, r1, ip, ror #18
   190e8:	andeq	r9, r1, ip, ror #18
   190ec:	andeq	r9, r1, r4, lsr r1
   190f0:	andeq	r9, r1, ip, ror #18
   190f4:	andeq	r9, r1, r4, lsr r1
   190f8:	andeq	r9, r1, ip, ror #18
   190fc:	andeq	r9, r1, ip, ror #18
   19100:	andeq	r9, r1, ip, ror #18
   19104:	andeq	r9, r1, ip, ror #18
   19108:	andeq	r9, r1, ip, ror #18
   1910c:	andeq	r9, r1, ip, ror #18
   19110:	andeq	r9, r1, ip, ror #18
   19114:	andeq	r9, r1, ip, ror #18
   19118:	andeq	r9, r1, ip, ror #18
   1911c:	andeq	r9, r1, ip, ror #18
   19120:	andeq	r9, r1, ip, ror #18
   19124:	andeq	r9, r1, ip, ror #18
   19128:	andeq	r9, r1, r4, lsr r1
   1912c:	andeq	r9, r1, r4, lsr r1
   19130:	andeq	r9, r1, r4, lsr r1
   19134:	ldr	r1, [sp, #32]
   19138:	cmp	r1, #0
   1913c:	bne	19b7c <__assert_fail@plt+0x81dc>
   19140:	cmp	r7, fp
   19144:	movhi	r1, #63	; 0x3f
   19148:	ldrhi	r0, [sp, #36]	; 0x24
   1914c:	strbhi	r1, [r0, fp]
   19150:	add	r1, fp, #1
   19154:	cmp	r7, r1
   19158:	ldrhi	r0, [sp, #36]	; 0x24
   1915c:	movhi	ip, #34	; 0x22
   19160:	strbhi	ip, [r0, r1]
   19164:	add	r1, fp, #2
   19168:	cmp	r7, r1
   1916c:	ldrhi	r0, [sp, #36]	; 0x24
   19170:	movhi	ip, #34	; 0x22
   19174:	strbhi	ip, [r0, r1]
   19178:	add	r1, fp, #3
   1917c:	cmp	r7, r1
   19180:	movhi	r0, #63	; 0x3f
   19184:	ldrhi	ip, [sp, #36]	; 0x24
   19188:	strbhi	r0, [ip, r1]
   1918c:	add	fp, fp, #4
   19190:	ldr	r5, [sp, #32]
   19194:	mov	r8, r5
   19198:	mov	r4, r2
   1919c:	mov	r6, r3
   191a0:	b	192f8 <__assert_fail@plt+0x7958>
   191a4:	mov	r3, #102	; 0x66
   191a8:	b	19260 <__assert_fail@plt+0x78c0>
   191ac:	mov	r3, #118	; 0x76
   191b0:	b	19260 <__assert_fail@plt+0x78c0>
   191b4:	cmp	sl, #2
   191b8:	beq	19224 <__assert_fail@plt+0x7884>
   191bc:	ldr	r3, [sp, #48]	; 0x30
   191c0:	ldr	r2, [sp, #32]
   191c4:	and	r3, r3, r2
   191c8:	tst	r9, r3
   191cc:	moveq	r3, r4
   191d0:	beq	19260 <__assert_fail@plt+0x78c0>
   191d4:	mov	r8, #0
   191d8:	mov	r5, r8
   191dc:	eor	r5, r5, #1
   191e0:	ldr	r3, [sp, #44]	; 0x2c
   191e4:	and	r5, r5, r3
   191e8:	tst	r5, #255	; 0xff
   191ec:	beq	193cc <__assert_fail@plt+0x7a2c>
   191f0:	cmp	r7, fp
   191f4:	ldrhi	r3, [sp, #36]	; 0x24
   191f8:	movhi	r2, #39	; 0x27
   191fc:	strbhi	r2, [r3, fp]
   19200:	add	r3, fp, #1
   19204:	cmp	r7, r3
   19208:	ldrhi	r2, [sp, #36]	; 0x24
   1920c:	movhi	r1, #39	; 0x27
   19210:	strbhi	r1, [r2, r3]
   19214:	add	fp, fp, #2
   19218:	mov	r3, #0
   1921c:	str	r3, [sp, #44]	; 0x2c
   19220:	b	193cc <__assert_fail@plt+0x7a2c>
   19224:	ldr	r3, [sp, #32]
   19228:	cmp	r3, #0
   1922c:	bne	19ac8 <__assert_fail@plt+0x8128>
   19230:	mov	r8, r3
   19234:	mov	r5, r3
   19238:	b	191dc <__assert_fail@plt+0x783c>
   1923c:	mov	r3, #110	; 0x6e
   19240:	b	19248 <__assert_fail@plt+0x78a8>
   19244:	mov	r3, #116	; 0x74
   19248:	ldr	r2, [sp, #32]
   1924c:	cmp	sl, #2
   19250:	movne	r2, #0
   19254:	andeq	r2, r2, #1
   19258:	cmp	r2, #0
   1925c:	bne	19280 <__assert_fail@plt+0x78e0>
   19260:	ldr	r2, [sp, #48]	; 0x30
   19264:	cmp	r2, #0
   19268:	moveq	r8, r2
   1926c:	moveq	r5, r2
   19270:	beq	192f8 <__assert_fail@plt+0x7958>
   19274:	mov	r4, r3
   19278:	mov	r8, #0
   1927c:	b	19350 <__assert_fail@plt+0x79b0>
   19280:	mov	r8, sl
   19284:	mov	sl, r7
   19288:	b	19af4 <__assert_fail@plt+0x8154>
   1928c:	mov	r3, #97	; 0x61
   19290:	b	19260 <__assert_fail@plt+0x78c0>
   19294:	ldr	r3, [sp, #28]
   19298:	cmn	r3, #1
   1929c:	beq	192c8 <__assert_fail@plt+0x7928>
   192a0:	ldr	r3, [sp, #28]
   192a4:	subs	r3, r3, #1
   192a8:	movne	r3, #1
   192ac:	cmp	r3, #0
   192b0:	bne	19978 <__assert_fail@plt+0x7fd8>
   192b4:	cmp	r6, #0
   192b8:	beq	192e0 <__assert_fail@plt+0x7940>
   192bc:	mov	r8, #0
   192c0:	mov	r5, r8
   192c4:	b	192f8 <__assert_fail@plt+0x7958>
   192c8:	ldr	r3, [sp, #52]	; 0x34
   192cc:	ldrb	r3, [r3, #1]
   192d0:	adds	r3, r3, #0
   192d4:	movne	r3, #1
   192d8:	b	192ac <__assert_fail@plt+0x790c>
   192dc:	mov	r8, #0
   192e0:	ldr	r5, [sp, #32]
   192e4:	cmp	sl, #2
   192e8:	movne	r5, #0
   192ec:	andeq	r5, r5, #1
   192f0:	cmp	r5, #0
   192f4:	bne	194a8 <__assert_fail@plt+0x7b08>
   192f8:	ldr	r3, [sp, #68]	; 0x44
   192fc:	cmp	sl, #2
   19300:	orreq	r3, r3, #1
   19304:	eor	r3, r3, #1
   19308:	ldr	r2, [sp, #32]
   1930c:	orr	r3, r2, r3
   19310:	tst	r3, #255	; 0xff
   19314:	beq	19344 <__assert_fail@plt+0x79a4>
   19318:	ldr	r3, [sp, #160]	; 0xa0
   1931c:	cmp	r3, #0
   19320:	beq	19344 <__assert_fail@plt+0x79a4>
   19324:	lsr	r2, r4, #5
   19328:	uxtb	r2, r2
   1932c:	and	r3, r4, #31
   19330:	ldr	r1, [sp, #160]	; 0xa0
   19334:	ldr	r2, [r1, r2, lsl #2]
   19338:	lsr	r3, r2, r3
   1933c:	tst	r3, #1
   19340:	bne	19350 <__assert_fail@plt+0x79b0>
   19344:	ldr	r3, [sp, #56]	; 0x38
   19348:	cmp	r3, #0
   1934c:	beq	191dc <__assert_fail@plt+0x783c>
   19350:	ldr	r3, [sp, #32]
   19354:	cmp	r3, #0
   19358:	bne	19b64 <__assert_fail@plt+0x81c4>
   1935c:	ldr	r3, [sp, #44]	; 0x2c
   19360:	eor	r3, r3, #1
   19364:	cmp	sl, #2
   19368:	movne	r3, #0
   1936c:	andeq	r3, r3, #1
   19370:	cmp	r3, #0
   19374:	beq	193b8 <__assert_fail@plt+0x7a18>
   19378:	cmp	r7, fp
   1937c:	ldrhi	r2, [sp, #36]	; 0x24
   19380:	movhi	r1, #39	; 0x27
   19384:	strbhi	r1, [r2, fp]
   19388:	add	r2, fp, #1
   1938c:	cmp	r7, r2
   19390:	ldrhi	r1, [sp, #36]	; 0x24
   19394:	movhi	r0, #36	; 0x24
   19398:	strbhi	r0, [r1, r2]
   1939c:	add	r2, fp, #2
   193a0:	cmp	r7, r2
   193a4:	ldrhi	r1, [sp, #36]	; 0x24
   193a8:	movhi	r0, #39	; 0x27
   193ac:	strbhi	r0, [r1, r2]
   193b0:	add	fp, fp, #3
   193b4:	str	r3, [sp, #44]	; 0x2c
   193b8:	cmp	r7, fp
   193bc:	ldrhi	r3, [sp, #36]	; 0x24
   193c0:	movhi	r2, #92	; 0x5c
   193c4:	strbhi	r2, [r3, fp]
   193c8:	add	fp, fp, #1
   193cc:	cmp	fp, r7
   193d0:	ldrcc	r3, [sp, #36]	; 0x24
   193d4:	strbcc	r4, [r3, fp]
   193d8:	add	fp, fp, #1
   193dc:	ldr	r3, [sp, #40]	; 0x28
   193e0:	cmp	r8, #0
   193e4:	moveq	r3, #0
   193e8:	str	r3, [sp, #40]	; 0x28
   193ec:	add	r6, r6, #1
   193f0:	ldr	r3, [sp, #28]
   193f4:	cmn	r3, #1
   193f8:	beq	19984 <__assert_fail@plt+0x7fe4>
   193fc:	ldr	r3, [sp, #28]
   19400:	subs	r8, r3, r6
   19404:	movne	r8, #1
   19408:	cmp	r8, #0
   1940c:	beq	19998 <__assert_fail@plt+0x7ff8>
   19410:	ldr	r5, [sp, #48]	; 0x30
   19414:	cmp	sl, #2
   19418:	moveq	r5, #0
   1941c:	andne	r5, r5, #1
   19420:	ldr	r3, [sp, #60]	; 0x3c
   19424:	adds	r9, r3, #0
   19428:	movne	r9, #1
   1942c:	ands	r2, r5, r9
   19430:	str	r2, [sp, #56]	; 0x38
   19434:	beq	18cfc <__assert_fail@plt+0x735c>
   19438:	add	r4, r6, r3
   1943c:	ldr	r2, [sp, #28]
   19440:	cmp	r3, #1
   19444:	movls	r3, #0
   19448:	movhi	r3, #1
   1944c:	cmn	r2, #1
   19450:	movne	r3, #0
   19454:	cmp	r3, #0
   19458:	beq	19468 <__assert_fail@plt+0x7ac8>
   1945c:	ldr	r0, [sp, #52]	; 0x34
   19460:	bl	117a8 <strlen@plt>
   19464:	str	r0, [sp, #28]
   19468:	ldr	r3, [sp, #28]
   1946c:	cmp	r3, r4
   19470:	bcc	18cf4 <__assert_fail@plt+0x7354>
   19474:	ldr	r2, [sp, #60]	; 0x3c
   19478:	ldr	r1, [sp, #72]	; 0x48
   1947c:	ldr	r3, [sp, #52]	; 0x34
   19480:	add	r0, r3, r6
   19484:	bl	1161c <memcmp@plt>
   19488:	cmp	r0, #0
   1948c:	bne	18f14 <__assert_fail@plt+0x7574>
   19490:	ldr	r3, [sp, #32]
   19494:	cmp	r3, #0
   19498:	beq	18cfc <__assert_fail@plt+0x735c>
   1949c:	mov	r8, sl
   194a0:	mov	sl, r7
   194a4:	b	19af4 <__assert_fail@plt+0x8154>
   194a8:	mov	r8, sl
   194ac:	mov	sl, r7
   194b0:	b	19af4 <__assert_fail@plt+0x8154>
   194b4:	cmp	sl, #2
   194b8:	strne	r8, [sp, #80]	; 0x50
   194bc:	movne	r5, #0
   194c0:	bne	192f8 <__assert_fail@plt+0x7958>
   194c4:	ldr	r3, [sp, #32]
   194c8:	cmp	r3, #0
   194cc:	bne	19ae0 <__assert_fail@plt+0x8140>
   194d0:	ldr	r2, [sp, #76]	; 0x4c
   194d4:	adds	r3, r7, #0
   194d8:	movne	r3, #1
   194dc:	cmp	r2, #0
   194e0:	movne	r3, #0
   194e4:	cmp	r3, #0
   194e8:	movne	r3, #0
   194ec:	bne	1951c <__assert_fail@plt+0x7b7c>
   194f0:	cmp	r7, fp
   194f4:	ldrhi	r3, [sp, #36]	; 0x24
   194f8:	movhi	r2, #39	; 0x27
   194fc:	strbhi	r2, [r3, fp]
   19500:	add	r3, fp, #1
   19504:	cmp	r7, r3
   19508:	ldrhi	r2, [sp, #36]	; 0x24
   1950c:	movhi	r1, #92	; 0x5c
   19510:	strbhi	r1, [r2, r3]
   19514:	mov	r3, r7
   19518:	ldr	r7, [sp, #76]	; 0x4c
   1951c:	add	r2, fp, #2
   19520:	cmp	r2, r3
   19524:	ldrcc	r1, [sp, #36]	; 0x24
   19528:	movcc	r0, #39	; 0x27
   1952c:	strbcc	r0, [r1, r2]
   19530:	add	fp, fp, #3
   19534:	ldr	r2, [sp, #32]
   19538:	mov	r5, r2
   1953c:	str	r8, [sp, #80]	; 0x50
   19540:	str	r2, [sp, #44]	; 0x2c
   19544:	str	r7, [sp, #76]	; 0x4c
   19548:	mov	r7, r3
   1954c:	b	192f8 <__assert_fail@plt+0x7958>
   19550:	ldr	r5, [sp, #84]	; 0x54
   19554:	cmp	r5, #1
   19558:	beq	19588 <__assert_fail@plt+0x7be8>
   1955c:	mov	r3, #0
   19560:	str	r3, [sp, #104]	; 0x68
   19564:	str	r3, [sp, #108]	; 0x6c
   19568:	ldr	r3, [sp, #28]
   1956c:	cmn	r3, #1
   19570:	beq	195bc <__assert_fail@plt+0x7c1c>
   19574:	mov	r3, #0
   19578:	str	r4, [sp, #88]	; 0x58
   1957c:	str	fp, [sp, #92]	; 0x5c
   19580:	mov	fp, r3
   19584:	b	196e4 <__assert_fail@plt+0x7d44>
   19588:	bl	11778 <__ctype_b_loc@plt>
   1958c:	ldr	r2, [r0]
   19590:	lsl	r3, r4, #1
   19594:	ldrh	r8, [r2, r3]
   19598:	lsr	r8, r8, #14
   1959c:	and	r8, r8, #1
   195a0:	mov	r2, r5
   195a4:	eor	r5, r8, #1
   195a8:	ldr	r3, [sp, #48]	; 0x30
   195ac:	and	r5, r5, r3
   195b0:	ands	r5, r5, #255	; 0xff
   195b4:	beq	192f8 <__assert_fail@plt+0x7958>
   195b8:	b	1977c <__assert_fail@plt+0x7ddc>
   195bc:	ldr	r0, [sp, #52]	; 0x34
   195c0:	bl	117a8 <strlen@plt>
   195c4:	str	r0, [sp, #28]
   195c8:	b	19574 <__assert_fail@plt+0x7bd4>
   195cc:	mov	r2, fp
   195d0:	mov	r1, r4
   195d4:	ldr	r4, [sp, #88]	; 0x58
   195d8:	ldr	fp, [sp, #92]	; 0x5c
   195dc:	ldr	r0, [sp, #28]
   195e0:	cmp	r0, r5
   195e4:	bls	197b0 <__assert_fail@plt+0x7e10>
   195e8:	ldrb	r3, [r1]
   195ec:	cmp	r3, #0
   195f0:	beq	197b8 <__assert_fail@plt+0x7e18>
   195f4:	mov	r3, r1
   195f8:	add	r2, r2, #1
   195fc:	add	r1, r6, r2
   19600:	cmp	r0, r1
   19604:	bls	197c0 <__assert_fail@plt+0x7e20>
   19608:	ldrb	r1, [r3, #1]!
   1960c:	cmp	r1, #0
   19610:	bne	195f8 <__assert_fail@plt+0x7c58>
   19614:	mov	r8, #0
   19618:	b	19774 <__assert_fail@plt+0x7dd4>
   1961c:	cmp	r4, r5
   19620:	beq	196c0 <__assert_fail@plt+0x7d20>
   19624:	ldrb	r3, [r4, #1]!
   19628:	sub	r3, r3, #91	; 0x5b
   1962c:	cmp	r3, #33	; 0x21
   19630:	ldrls	pc, [pc, r3, lsl #2]
   19634:	b	1961c <__assert_fail@plt+0x7c7c>
   19638:	andeq	r9, r1, ip, ror #21
   1963c:	andeq	r9, r1, ip, ror #21
   19640:	andeq	r9, r1, ip, lsl r6
   19644:	andeq	r9, r1, ip, ror #21
   19648:	andeq	r9, r1, ip, lsl r6
   1964c:	andeq	r9, r1, ip, ror #21
   19650:	andeq	r9, r1, ip, lsl r6
   19654:	andeq	r9, r1, ip, lsl r6
   19658:	andeq	r9, r1, ip, lsl r6
   1965c:	andeq	r9, r1, ip, lsl r6
   19660:	andeq	r9, r1, ip, lsl r6
   19664:	andeq	r9, r1, ip, lsl r6
   19668:	andeq	r9, r1, ip, lsl r6
   1966c:	andeq	r9, r1, ip, lsl r6
   19670:	andeq	r9, r1, ip, lsl r6
   19674:	andeq	r9, r1, ip, lsl r6
   19678:	andeq	r9, r1, ip, lsl r6
   1967c:	andeq	r9, r1, ip, lsl r6
   19680:	andeq	r9, r1, ip, lsl r6
   19684:	andeq	r9, r1, ip, lsl r6
   19688:	andeq	r9, r1, ip, lsl r6
   1968c:	andeq	r9, r1, ip, lsl r6
   19690:	andeq	r9, r1, ip, lsl r6
   19694:	andeq	r9, r1, ip, lsl r6
   19698:	andeq	r9, r1, ip, lsl r6
   1969c:	andeq	r9, r1, ip, lsl r6
   196a0:	andeq	r9, r1, ip, lsl r6
   196a4:	andeq	r9, r1, ip, lsl r6
   196a8:	andeq	r9, r1, ip, lsl r6
   196ac:	andeq	r9, r1, ip, lsl r6
   196b0:	andeq	r9, r1, ip, lsl r6
   196b4:	andeq	r9, r1, ip, lsl r6
   196b8:	andeq	r9, r1, ip, lsl r6
   196bc:	andeq	r9, r1, ip, ror #21
   196c0:	ldr	r0, [sp, #100]	; 0x64
   196c4:	bl	11664 <iswprint@plt>
   196c8:	cmp	r0, #0
   196cc:	moveq	r8, #0
   196d0:	add	fp, fp, r9
   196d4:	add	r0, sp, #104	; 0x68
   196d8:	bl	11604 <mbsinit@plt>
   196dc:	cmp	r0, #0
   196e0:	bne	19754 <__assert_fail@plt+0x7db4>
   196e4:	add	r5, r6, fp
   196e8:	ldr	r3, [sp, #52]	; 0x34
   196ec:	add	r4, r3, r5
   196f0:	add	r3, sp, #104	; 0x68
   196f4:	ldr	r2, [sp, #28]
   196f8:	sub	r2, r2, r5
   196fc:	mov	r1, r4
   19700:	add	r0, sp, #100	; 0x64
   19704:	bl	1b984 <__assert_fail@plt+0x9fe4>
   19708:	subs	r9, r0, #0
   1970c:	beq	197c8 <__assert_fail@plt+0x7e28>
   19710:	cmn	r9, #1
   19714:	beq	19764 <__assert_fail@plt+0x7dc4>
   19718:	cmn	r9, #2
   1971c:	beq	195cc <__assert_fail@plt+0x7c2c>
   19720:	ldr	r3, [sp, #32]
   19724:	cmp	sl, #2
   19728:	movne	r3, #0
   1972c:	andeq	r3, r3, #1
   19730:	cmp	r3, #0
   19734:	beq	196c0 <__assert_fail@plt+0x7d20>
   19738:	cmp	r9, #1
   1973c:	bls	196c0 <__assert_fail@plt+0x7d20>
   19740:	sub	r3, r9, #1
   19744:	add	r5, r3, r5
   19748:	ldr	r3, [sp, #52]	; 0x34
   1974c:	add	r5, r3, r5
   19750:	b	19624 <__assert_fail@plt+0x7c84>
   19754:	ldr	r4, [sp, #88]	; 0x58
   19758:	mov	r2, fp
   1975c:	ldr	fp, [sp, #92]	; 0x5c
   19760:	b	19774 <__assert_fail@plt+0x7dd4>
   19764:	ldr	r4, [sp, #88]	; 0x58
   19768:	mov	r2, fp
   1976c:	ldr	fp, [sp, #92]	; 0x5c
   19770:	mov	r8, #0
   19774:	cmp	r2, #1
   19778:	bls	195a4 <__assert_fail@plt+0x7c04>
   1977c:	add	r1, r6, r2
   19780:	ldr	ip, [sp, #64]	; 0x40
   19784:	mov	r5, #0
   19788:	eor	r3, r8, #1
   1978c:	ldr	r2, [sp, #48]	; 0x30
   19790:	and	r3, r3, r2
   19794:	uxtb	r3, r3
   19798:	ldr	r9, [sp, #32]
   1979c:	ldr	lr, [sp, #44]	; 0x2c
   197a0:	ldr	r2, [sp, #56]	; 0x38
   197a4:	str	r8, [sp, #56]	; 0x38
   197a8:	ldr	r0, [sp, #36]	; 0x24
   197ac:	b	19848 <__assert_fail@plt+0x7ea8>
   197b0:	mov	r8, #0
   197b4:	b	19774 <__assert_fail@plt+0x7dd4>
   197b8:	mov	r8, #0
   197bc:	b	19774 <__assert_fail@plt+0x7dd4>
   197c0:	mov	r8, #0
   197c4:	b	19774 <__assert_fail@plt+0x7dd4>
   197c8:	ldr	r4, [sp, #88]	; 0x58
   197cc:	mov	r2, fp
   197d0:	ldr	fp, [sp, #92]	; 0x5c
   197d4:	b	19774 <__assert_fail@plt+0x7dd4>
   197d8:	cmp	r2, #0
   197dc:	beq	197f0 <__assert_fail@plt+0x7e50>
   197e0:	cmp	r7, fp
   197e4:	movhi	r2, #92	; 0x5c
   197e8:	strbhi	r2, [r0, fp]
   197ec:	add	fp, fp, #1
   197f0:	add	r8, r6, #1
   197f4:	cmp	r1, r8
   197f8:	bls	19900 <__assert_fail@plt+0x7f60>
   197fc:	eor	r2, r5, #1
   19800:	and	r2, r2, lr
   19804:	ands	r2, r2, #255	; 0xff
   19808:	beq	1991c <__assert_fail@plt+0x7f7c>
   1980c:	cmp	r7, fp
   19810:	movhi	r2, #39	; 0x27
   19814:	strbhi	r2, [r0, fp]
   19818:	add	r2, fp, #1
   1981c:	cmp	r7, r2
   19820:	movhi	lr, #39	; 0x27
   19824:	strbhi	lr, [r0, r2]
   19828:	add	fp, fp, #2
   1982c:	mov	r6, r8
   19830:	mov	r2, r3
   19834:	mov	lr, r3
   19838:	cmp	r7, fp
   1983c:	strbhi	r4, [r0, fp]
   19840:	add	fp, fp, #1
   19844:	ldrb	r4, [ip, #1]!
   19848:	cmp	r3, #0
   1984c:	beq	197d8 <__assert_fail@plt+0x7e38>
   19850:	cmp	r9, #0
   19854:	bne	19b58 <__assert_fail@plt+0x81b8>
   19858:	eor	r5, lr, #1
   1985c:	cmp	sl, #2
   19860:	movne	r5, #0
   19864:	andeq	r5, r5, #1
   19868:	cmp	r5, #0
   1986c:	beq	198a4 <__assert_fail@plt+0x7f04>
   19870:	cmp	r7, fp
   19874:	movhi	lr, #39	; 0x27
   19878:	strbhi	lr, [r0, fp]
   1987c:	add	lr, fp, #1
   19880:	cmp	r7, lr
   19884:	movhi	r8, #36	; 0x24
   19888:	strbhi	r8, [r0, lr]
   1988c:	add	lr, fp, #2
   19890:	cmp	r7, lr
   19894:	movhi	r8, #39	; 0x27
   19898:	strbhi	r8, [r0, lr]
   1989c:	add	fp, fp, #3
   198a0:	mov	lr, r5
   198a4:	cmp	r7, fp
   198a8:	movhi	r5, #92	; 0x5c
   198ac:	strbhi	r5, [r0, fp]
   198b0:	add	r5, fp, #1
   198b4:	cmp	r7, r5
   198b8:	lsrhi	r8, r4, #6
   198bc:	addhi	r8, r8, #48	; 0x30
   198c0:	strbhi	r8, [r0, r5]
   198c4:	add	r8, fp, #2
   198c8:	cmp	r7, r8
   198cc:	lsrhi	r5, r4, #3
   198d0:	andhi	r5, r5, #7
   198d4:	addhi	r5, r5, #48	; 0x30
   198d8:	strbhi	r5, [r0, r8]
   198dc:	add	fp, fp, #3
   198e0:	and	r4, r4, #7
   198e4:	add	r4, r4, #48	; 0x30
   198e8:	add	r5, r6, #1
   198ec:	cmp	r1, r5
   198f0:	bls	1990c <__assert_fail@plt+0x7f6c>
   198f4:	mov	r6, r5
   198f8:	mov	r5, r3
   198fc:	b	19838 <__assert_fail@plt+0x7e98>
   19900:	str	lr, [sp, #44]	; 0x2c
   19904:	ldr	r8, [sp, #56]	; 0x38
   19908:	b	191dc <__assert_fail@plt+0x783c>
   1990c:	str	lr, [sp, #44]	; 0x2c
   19910:	ldr	r8, [sp, #56]	; 0x38
   19914:	mov	r5, r3
   19918:	b	191dc <__assert_fail@plt+0x783c>
   1991c:	mov	r6, r8
   19920:	b	19838 <__assert_fail@plt+0x7e98>
   19924:	mov	r5, #0
   19928:	b	192f8 <__assert_fail@plt+0x7958>
   1992c:	mov	r8, r5
   19930:	ldr	r5, [sp, #48]	; 0x30
   19934:	mov	r4, #48	; 0x30
   19938:	b	192f8 <__assert_fail@plt+0x7958>
   1993c:	ldr	r8, [sp, #32]
   19940:	mov	r4, #48	; 0x30
   19944:	b	192f8 <__assert_fail@plt+0x7958>
   19948:	ldr	r8, [sp, #32]
   1994c:	mov	r4, #48	; 0x30
   19950:	b	192f8 <__assert_fail@plt+0x7958>
   19954:	mov	r8, #0
   19958:	mov	r5, r8
   1995c:	b	192f8 <__assert_fail@plt+0x7958>
   19960:	mov	r8, #0
   19964:	mov	r5, r8
   19968:	b	192f8 <__assert_fail@plt+0x7958>
   1996c:	mov	r8, #0
   19970:	mov	r5, r8
   19974:	b	192f8 <__assert_fail@plt+0x7958>
   19978:	mov	r8, #0
   1997c:	mov	r5, r8
   19980:	b	192f8 <__assert_fail@plt+0x7958>
   19984:	ldr	r3, [sp, #52]	; 0x34
   19988:	ldrb	r8, [r3, r6]
   1998c:	adds	r8, r8, #0
   19990:	movne	r8, #1
   19994:	b	19408 <__assert_fail@plt+0x7a68>
   19998:	cmp	sl, #2
   1999c:	movne	r3, #0
   199a0:	moveq	r3, #1
   199a4:	ldr	r1, [sp, #32]
   199a8:	mov	r2, r1
   199ac:	and	r2, r2, r3
   199b0:	cmp	fp, #0
   199b4:	movne	r2, #0
   199b8:	andeq	r2, r2, #1
   199bc:	cmp	r2, #0
   199c0:	bne	19b70 <__assert_fail@plt+0x81d0>
   199c4:	eor	r2, r1, #1
   199c8:	and	r3, r3, r2
   199cc:	ldr	r1, [sp, #80]	; 0x50
   199d0:	tst	r1, r3
   199d4:	beq	19a4c <__assert_fail@plt+0x80ac>
   199d8:	ldr	r3, [sp, #40]	; 0x28
   199dc:	cmp	r3, #0
   199e0:	bne	19a08 <__assert_fail@plt+0x8068>
   199e4:	ldr	r1, [sp, #76]	; 0x4c
   199e8:	clz	r3, r7
   199ec:	lsr	r3, r3, #5
   199f0:	cmp	r1, #0
   199f4:	moveq	r3, #0
   199f8:	cmp	r3, #0
   199fc:	beq	19a4c <__assert_fail@plt+0x80ac>
   19a00:	ldr	r7, [sp, #76]	; 0x4c
   19a04:	b	18a9c <__assert_fail@plt+0x70fc>
   19a08:	ldr	r3, [sp, #168]	; 0xa8
   19a0c:	str	r3, [sp, #16]
   19a10:	ldr	r3, [sp, #164]	; 0xa4
   19a14:	str	r3, [sp, #12]
   19a18:	ldr	r3, [sp, #160]	; 0xa0
   19a1c:	str	r3, [sp, #8]
   19a20:	ldr	r3, [sp, #156]	; 0x9c
   19a24:	str	r3, [sp, #4]
   19a28:	mov	r3, #5
   19a2c:	str	r3, [sp]
   19a30:	ldr	r3, [sp, #28]
   19a34:	ldr	r2, [sp, #52]	; 0x34
   19a38:	ldr	r1, [sp, #76]	; 0x4c
   19a3c:	ldr	r0, [sp, #36]	; 0x24
   19a40:	bl	18a3c <__assert_fail@plt+0x709c>
   19a44:	mov	fp, r0
   19a48:	b	19b4c <__assert_fail@plt+0x81ac>
   19a4c:	mov	sl, r7
   19a50:	ldr	r3, [sp, #72]	; 0x48
   19a54:	cmp	r3, #0
   19a58:	moveq	r2, #0
   19a5c:	andne	r2, r2, #1
   19a60:	cmp	r2, #0
   19a64:	beq	19a94 <__assert_fail@plt+0x80f4>
   19a68:	mov	r2, r3
   19a6c:	ldrb	r3, [r3]
   19a70:	cmp	r3, #0
   19a74:	beq	19a94 <__assert_fail@plt+0x80f4>
   19a78:	ldr	r1, [sp, #36]	; 0x24
   19a7c:	cmp	sl, fp
   19a80:	strbhi	r3, [r1, fp]
   19a84:	add	fp, fp, #1
   19a88:	ldrb	r3, [r2, #1]!
   19a8c:	cmp	r3, #0
   19a90:	bne	19a7c <__assert_fail@plt+0x80dc>
   19a94:	cmp	sl, fp
   19a98:	movhi	r3, #0
   19a9c:	ldrhi	r2, [sp, #36]	; 0x24
   19aa0:	strbhi	r3, [r2, fp]
   19aa4:	b	19b4c <__assert_fail@plt+0x81ac>
   19aa8:	mov	r8, sl
   19aac:	mov	sl, r7
   19ab0:	ldr	r3, [sp, #32]
   19ab4:	str	r3, [sp, #48]	; 0x30
   19ab8:	b	19af4 <__assert_fail@plt+0x8154>
   19abc:	mov	r8, sl
   19ac0:	mov	sl, r7
   19ac4:	b	19af4 <__assert_fail@plt+0x8154>
   19ac8:	mov	r8, sl
   19acc:	mov	sl, r7
   19ad0:	b	19af4 <__assert_fail@plt+0x8154>
   19ad4:	andeq	ip, r2, ip, asr r6
   19ad8:	andeq	ip, r2, ip, ror #12
   19adc:	andeq	ip, r2, r0, ror #12
   19ae0:	mov	r8, sl
   19ae4:	mov	sl, r7
   19ae8:	b	19af4 <__assert_fail@plt+0x8154>
   19aec:	mov	r8, sl
   19af0:	mov	sl, r7
   19af4:	ldr	r3, [sp, #48]	; 0x30
   19af8:	cmp	r8, #2
   19afc:	movne	r3, #0
   19b00:	andeq	r3, r3, #1
   19b04:	cmp	r3, #0
   19b08:	movne	r8, #4
   19b0c:	ldr	r3, [sp, #168]	; 0xa8
   19b10:	str	r3, [sp, #16]
   19b14:	ldr	r3, [sp, #164]	; 0xa4
   19b18:	str	r3, [sp, #12]
   19b1c:	mov	r3, #0
   19b20:	str	r3, [sp, #8]
   19b24:	ldr	r3, [sp, #156]	; 0x9c
   19b28:	bic	r3, r3, #2
   19b2c:	str	r3, [sp, #4]
   19b30:	str	r8, [sp]
   19b34:	ldr	r3, [sp, #28]
   19b38:	ldr	r2, [sp, #52]	; 0x34
   19b3c:	mov	r1, sl
   19b40:	ldr	r0, [sp, #36]	; 0x24
   19b44:	bl	18a3c <__assert_fail@plt+0x709c>
   19b48:	mov	fp, r0
   19b4c:	mov	r0, fp
   19b50:	add	sp, sp, #116	; 0x74
   19b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b58:	mov	r8, sl
   19b5c:	mov	sl, r7
   19b60:	b	19af4 <__assert_fail@plt+0x8154>
   19b64:	mov	r8, sl
   19b68:	mov	sl, r7
   19b6c:	b	19af4 <__assert_fail@plt+0x8154>
   19b70:	mov	r8, sl
   19b74:	mov	sl, r7
   19b78:	b	19af4 <__assert_fail@plt+0x8154>
   19b7c:	mov	r8, sl
   19b80:	mov	sl, r7
   19b84:	b	19b0c <__assert_fail@plt+0x816c>
   19b88:	mov	r3, #1
   19b8c:	str	r3, [sp, #32]
   19b90:	str	r3, [sp, #48]	; 0x30
   19b94:	str	r3, [sp, #60]	; 0x3c
   19b98:	ldr	r3, [pc, #-196]	; 19adc <__assert_fail@plt+0x813c>
   19b9c:	str	r3, [sp, #72]	; 0x48
   19ba0:	mov	fp, #0
   19ba4:	mov	sl, #5
   19ba8:	b	18af8 <__assert_fail@plt+0x7158>
   19bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bb0:	sub	sp, sp, #52	; 0x34
   19bb4:	mov	r5, r0
   19bb8:	str	r1, [sp, #24]
   19bbc:	str	r2, [sp, #28]
   19bc0:	mov	r4, r3
   19bc4:	bl	117d8 <__errno_location@plt>
   19bc8:	str	r0, [sp, #32]
   19bcc:	ldr	r3, [r0]
   19bd0:	str	r3, [sp, #36]	; 0x24
   19bd4:	ldr	r3, [pc, #396]	; 19d68 <__assert_fail@plt+0x83c8>
   19bd8:	ldr	r6, [r3]
   19bdc:	cmn	r5, #-2147483647	; 0x80000001
   19be0:	movne	r3, #0
   19be4:	moveq	r3, #1
   19be8:	orrs	r3, r3, r5, lsr #31
   19bec:	bne	19d2c <__assert_fail@plt+0x838c>
   19bf0:	ldr	r3, [pc, #368]	; 19d68 <__assert_fail@plt+0x83c8>
   19bf4:	ldr	r2, [r3, #4]
   19bf8:	cmp	r5, r2
   19bfc:	blt	19c64 <__assert_fail@plt+0x82c4>
   19c00:	str	r2, [sp, #44]	; 0x2c
   19c04:	add	r3, r3, #8
   19c08:	cmp	r6, r3
   19c0c:	beq	19d30 <__assert_fail@plt+0x8390>
   19c10:	sub	r2, r5, r2
   19c14:	mov	r3, #8
   19c18:	str	r3, [sp]
   19c1c:	mvn	r3, #-2147483648	; 0x80000000
   19c20:	add	r2, r2, #1
   19c24:	add	r1, sp, #44	; 0x2c
   19c28:	mov	r0, r6
   19c2c:	bl	1aa9c <__assert_fail@plt+0x90fc>
   19c30:	mov	r6, r0
   19c34:	ldr	r3, [pc, #300]	; 19d68 <__assert_fail@plt+0x83c8>
   19c38:	str	r0, [r3]
   19c3c:	ldr	r7, [pc, #292]	; 19d68 <__assert_fail@plt+0x83c8>
   19c40:	ldr	r0, [r7, #4]
   19c44:	ldr	r2, [sp, #44]	; 0x2c
   19c48:	sub	r2, r2, r0
   19c4c:	lsl	r2, r2, #3
   19c50:	mov	r1, #0
   19c54:	add	r0, r6, r0, lsl #3
   19c58:	bl	11814 <memset@plt>
   19c5c:	ldr	r3, [sp, #44]	; 0x2c
   19c60:	str	r3, [r7, #4]
   19c64:	add	fp, r6, r5, lsl #3
   19c68:	ldr	r8, [r6, r5, lsl #3]
   19c6c:	ldr	r7, [fp, #4]
   19c70:	ldr	r9, [r4, #4]
   19c74:	orr	r9, r9, #1
   19c78:	add	sl, r4, #8
   19c7c:	ldr	r3, [r4, #44]	; 0x2c
   19c80:	str	r3, [sp, #16]
   19c84:	ldr	r3, [r4, #40]	; 0x28
   19c88:	str	r3, [sp, #12]
   19c8c:	str	sl, [sp, #8]
   19c90:	str	r9, [sp, #4]
   19c94:	ldr	r3, [r4]
   19c98:	str	r3, [sp]
   19c9c:	ldr	r3, [sp, #28]
   19ca0:	ldr	r2, [sp, #24]
   19ca4:	mov	r1, r8
   19ca8:	mov	r0, r7
   19cac:	bl	18a3c <__assert_fail@plt+0x709c>
   19cb0:	cmp	r8, r0
   19cb4:	bhi	19d14 <__assert_fail@plt+0x8374>
   19cb8:	add	r8, r0, #1
   19cbc:	str	r8, [r6, r5, lsl #3]
   19cc0:	ldr	r3, [pc, #164]	; 19d6c <__assert_fail@plt+0x83cc>
   19cc4:	cmp	r7, r3
   19cc8:	beq	19cd4 <__assert_fail@plt+0x8334>
   19ccc:	mov	r0, r7
   19cd0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   19cd4:	mov	r0, r8
   19cd8:	bl	1a918 <__assert_fail@plt+0x8f78>
   19cdc:	mov	r7, r0
   19ce0:	str	r0, [fp, #4]
   19ce4:	ldr	r3, [r4, #44]	; 0x2c
   19ce8:	str	r3, [sp, #16]
   19cec:	ldr	r3, [r4, #40]	; 0x28
   19cf0:	str	r3, [sp, #12]
   19cf4:	str	sl, [sp, #8]
   19cf8:	str	r9, [sp, #4]
   19cfc:	ldr	r3, [r4]
   19d00:	str	r3, [sp]
   19d04:	ldr	r3, [sp, #28]
   19d08:	ldr	r2, [sp, #24]
   19d0c:	mov	r1, r8
   19d10:	bl	18a3c <__assert_fail@plt+0x709c>
   19d14:	ldr	r3, [sp, #32]
   19d18:	ldr	r2, [sp, #36]	; 0x24
   19d1c:	str	r2, [r3]
   19d20:	mov	r0, r7
   19d24:	add	sp, sp, #52	; 0x34
   19d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d2c:	bl	11964 <abort@plt>
   19d30:	sub	r2, r5, r2
   19d34:	mov	r3, #8
   19d38:	str	r3, [sp]
   19d3c:	mvn	r3, #-2147483648	; 0x80000000
   19d40:	add	r2, r2, #1
   19d44:	add	r1, sp, #44	; 0x2c
   19d48:	mov	r0, #0
   19d4c:	bl	1aa9c <__assert_fail@plt+0x90fc>
   19d50:	mov	r6, r0
   19d54:	ldr	r3, [pc, #12]	; 19d68 <__assert_fail@plt+0x83c8>
   19d58:	str	r0, [r3], #8
   19d5c:	ldm	r3, {r0, r1}
   19d60:	stm	r6, {r0, r1}
   19d64:	b	19c3c <__assert_fail@plt+0x829c>
   19d68:	andeq	sp, r3, r0, asr #3
   19d6c:	andeq	sp, r3, r4, lsr #5
   19d70:	push	{r4, r5, r6, lr}
   19d74:	mov	r4, r0
   19d78:	bl	117d8 <__errno_location@plt>
   19d7c:	mov	r5, r0
   19d80:	ldr	r6, [r0]
   19d84:	cmp	r4, #0
   19d88:	ldr	r3, [pc, #20]	; 19da4 <__assert_fail@plt+0x8404>
   19d8c:	moveq	r4, r3
   19d90:	mov	r1, #48	; 0x30
   19d94:	mov	r0, r4
   19d98:	bl	1ae04 <__assert_fail@plt+0x9464>
   19d9c:	str	r6, [r5]
   19da0:	pop	{r4, r5, r6, pc}
   19da4:	andeq	sp, r3, r4, lsr #7
   19da8:	subs	r3, r0, #0
   19dac:	ldr	r2, [pc, #8]	; 19dbc <__assert_fail@plt+0x841c>
   19db0:	moveq	r3, r2
   19db4:	ldr	r0, [r3]
   19db8:	bx	lr
   19dbc:	andeq	sp, r3, r4, lsr #7
   19dc0:	subs	r3, r0, #0
   19dc4:	ldr	r2, [pc, #8]	; 19dd4 <__assert_fail@plt+0x8434>
   19dc8:	moveq	r3, r2
   19dcc:	str	r1, [r3]
   19dd0:	bx	lr
   19dd4:	andeq	sp, r3, r4, lsr #7
   19dd8:	push	{lr}		; (str lr, [sp, #-4]!)
   19ddc:	subs	r3, r0, #0
   19de0:	ldr	r0, [pc, #44]	; 19e14 <__assert_fail@plt+0x8474>
   19de4:	moveq	r3, r0
   19de8:	add	r3, r3, #8
   19dec:	lsr	lr, r1, #5
   19df0:	and	r1, r1, #31
   19df4:	ldr	ip, [r3, lr, lsl #2]
   19df8:	lsr	r0, ip, r1
   19dfc:	eor	r2, r2, r0
   19e00:	and	r2, r2, #1
   19e04:	eor	r1, ip, r2, lsl r1
   19e08:	str	r1, [r3, lr, lsl #2]
   19e0c:	and	r0, r0, #1
   19e10:	pop	{pc}		; (ldr pc, [sp], #4)
   19e14:	andeq	sp, r3, r4, lsr #7
   19e18:	subs	r3, r0, #0
   19e1c:	ldr	r2, [pc, #12]	; 19e30 <__assert_fail@plt+0x8490>
   19e20:	moveq	r3, r2
   19e24:	ldr	r0, [r3, #4]
   19e28:	str	r1, [r3, #4]
   19e2c:	bx	lr
   19e30:	andeq	sp, r3, r4, lsr #7
   19e34:	subs	r3, r0, #0
   19e38:	ldr	r0, [pc, #40]	; 19e68 <__assert_fail@plt+0x84c8>
   19e3c:	moveq	r3, r0
   19e40:	mov	r0, #10
   19e44:	str	r0, [r3]
   19e48:	cmp	r2, #0
   19e4c:	cmpne	r1, #0
   19e50:	beq	19e60 <__assert_fail@plt+0x84c0>
   19e54:	str	r1, [r3, #40]	; 0x28
   19e58:	str	r2, [r3, #44]	; 0x2c
   19e5c:	bx	lr
   19e60:	push	{r4, lr}
   19e64:	bl	11964 <abort@plt>
   19e68:	andeq	sp, r3, r4, lsr #7
   19e6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e70:	sub	sp, sp, #24
   19e74:	mov	r7, r0
   19e78:	mov	r8, r1
   19e7c:	mov	r9, r2
   19e80:	mov	sl, r3
   19e84:	ldr	r4, [sp, #56]	; 0x38
   19e88:	cmp	r4, #0
   19e8c:	ldr	r3, [pc, #84]	; 19ee8 <__assert_fail@plt+0x8548>
   19e90:	moveq	r4, r3
   19e94:	bl	117d8 <__errno_location@plt>
   19e98:	mov	r5, r0
   19e9c:	ldr	r6, [r0]
   19ea0:	ldr	r3, [r4, #44]	; 0x2c
   19ea4:	str	r3, [sp, #16]
   19ea8:	ldr	r3, [r4, #40]	; 0x28
   19eac:	str	r3, [sp, #12]
   19eb0:	add	r3, r4, #8
   19eb4:	str	r3, [sp, #8]
   19eb8:	ldr	r3, [r4, #4]
   19ebc:	str	r3, [sp, #4]
   19ec0:	ldr	r3, [r4]
   19ec4:	str	r3, [sp]
   19ec8:	mov	r3, sl
   19ecc:	mov	r2, r9
   19ed0:	mov	r1, r8
   19ed4:	mov	r0, r7
   19ed8:	bl	18a3c <__assert_fail@plt+0x709c>
   19edc:	str	r6, [r5]
   19ee0:	add	sp, sp, #24
   19ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ee8:	andeq	sp, r3, r4, lsr #7
   19eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ef0:	sub	sp, sp, #44	; 0x2c
   19ef4:	str	r0, [sp, #28]
   19ef8:	str	r1, [sp, #32]
   19efc:	mov	r6, r2
   19f00:	subs	r4, r3, #0
   19f04:	ldr	r3, [pc, #172]	; 19fb8 <__assert_fail@plt+0x8618>
   19f08:	moveq	r4, r3
   19f0c:	bl	117d8 <__errno_location@plt>
   19f10:	mov	r7, r0
   19f14:	ldr	fp, [r0]
   19f18:	ldr	r5, [r4, #4]
   19f1c:	cmp	r6, #0
   19f20:	orreq	r5, r5, #1
   19f24:	add	r9, r4, #8
   19f28:	ldr	r3, [r4, #44]	; 0x2c
   19f2c:	str	r3, [sp, #16]
   19f30:	ldr	r3, [r4, #40]	; 0x28
   19f34:	str	r3, [sp, #12]
   19f38:	str	r9, [sp, #8]
   19f3c:	str	r5, [sp, #4]
   19f40:	ldr	r3, [r4]
   19f44:	str	r3, [sp]
   19f48:	ldr	r3, [sp, #32]
   19f4c:	ldr	r2, [sp, #28]
   19f50:	mov	r1, #0
   19f54:	mov	r0, r1
   19f58:	bl	18a3c <__assert_fail@plt+0x709c>
   19f5c:	mov	sl, r0
   19f60:	add	r8, r0, #1
   19f64:	mov	r0, r8
   19f68:	bl	1a918 <__assert_fail@plt+0x8f78>
   19f6c:	str	r0, [sp, #36]	; 0x24
   19f70:	ldr	r3, [r4, #44]	; 0x2c
   19f74:	str	r3, [sp, #16]
   19f78:	ldr	r3, [r4, #40]	; 0x28
   19f7c:	str	r3, [sp, #12]
   19f80:	str	r9, [sp, #8]
   19f84:	str	r5, [sp, #4]
   19f88:	ldr	r3, [r4]
   19f8c:	str	r3, [sp]
   19f90:	ldr	r3, [sp, #32]
   19f94:	ldr	r2, [sp, #28]
   19f98:	mov	r1, r8
   19f9c:	bl	18a3c <__assert_fail@plt+0x709c>
   19fa0:	str	fp, [r7]
   19fa4:	cmp	r6, #0
   19fa8:	strne	sl, [r6]
   19fac:	ldr	r0, [sp, #36]	; 0x24
   19fb0:	add	sp, sp, #44	; 0x2c
   19fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fb8:	andeq	sp, r3, r4, lsr #7
   19fbc:	push	{r4, lr}
   19fc0:	mov	r3, r2
   19fc4:	mov	r2, #0
   19fc8:	bl	19eec <__assert_fail@plt+0x854c>
   19fcc:	pop	{r4, pc}
   19fd0:	push	{r4, r5, r6, r7, r8, lr}
   19fd4:	ldr	r3, [pc, #140]	; 1a068 <__assert_fail@plt+0x86c8>
   19fd8:	ldr	r7, [r3]
   19fdc:	ldr	r3, [r3, #4]
   19fe0:	cmp	r3, #1
   19fe4:	ble	1a010 <__assert_fail@plt+0x8670>
   19fe8:	mov	r5, r7
   19fec:	mov	r4, #1
   19ff0:	ldr	r6, [pc, #112]	; 1a068 <__assert_fail@plt+0x86c8>
   19ff4:	ldr	r0, [r5, #12]
   19ff8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   19ffc:	add	r4, r4, #1
   1a000:	add	r5, r5, #8
   1a004:	ldr	r3, [r6, #4]
   1a008:	cmp	r3, r4
   1a00c:	bgt	19ff4 <__assert_fail@plt+0x8654>
   1a010:	ldr	r0, [r7, #4]
   1a014:	ldr	r3, [pc, #80]	; 1a06c <__assert_fail@plt+0x86cc>
   1a018:	cmp	r0, r3
   1a01c:	beq	1a038 <__assert_fail@plt+0x8698>
   1a020:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1a024:	ldr	r3, [pc, #60]	; 1a068 <__assert_fail@plt+0x86c8>
   1a028:	mov	r2, #256	; 0x100
   1a02c:	str	r2, [r3, #8]
   1a030:	ldr	r2, [pc, #52]	; 1a06c <__assert_fail@plt+0x86cc>
   1a034:	str	r2, [r3, #12]
   1a038:	ldr	r3, [pc, #48]	; 1a070 <__assert_fail@plt+0x86d0>
   1a03c:	cmp	r7, r3
   1a040:	beq	1a058 <__assert_fail@plt+0x86b8>
   1a044:	mov	r0, r7
   1a048:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1a04c:	ldr	r3, [pc, #20]	; 1a068 <__assert_fail@plt+0x86c8>
   1a050:	add	r2, r3, #8
   1a054:	str	r2, [r3]
   1a058:	mov	r2, #1
   1a05c:	ldr	r3, [pc, #4]	; 1a068 <__assert_fail@plt+0x86c8>
   1a060:	str	r2, [r3, #4]
   1a064:	pop	{r4, r5, r6, r7, r8, pc}
   1a068:	andeq	sp, r3, r0, asr #3
   1a06c:	andeq	sp, r3, r4, lsr #5
   1a070:	andeq	sp, r3, r8, asr #3
   1a074:	push	{r4, lr}
   1a078:	ldr	r3, [pc, #8]	; 1a088 <__assert_fail@plt+0x86e8>
   1a07c:	mvn	r2, #0
   1a080:	bl	19bac <__assert_fail@plt+0x820c>
   1a084:	pop	{r4, pc}
   1a088:	andeq	sp, r3, r4, lsr #7
   1a08c:	push	{r4, lr}
   1a090:	ldr	r3, [pc, #4]	; 1a09c <__assert_fail@plt+0x86fc>
   1a094:	bl	19bac <__assert_fail@plt+0x820c>
   1a098:	pop	{r4, pc}
   1a09c:	andeq	sp, r3, r4, lsr #7
   1a0a0:	push	{r4, lr}
   1a0a4:	mov	r1, r0
   1a0a8:	mov	r0, #0
   1a0ac:	bl	1a074 <__assert_fail@plt+0x86d4>
   1a0b0:	pop	{r4, pc}
   1a0b4:	push	{r4, lr}
   1a0b8:	mov	r2, r1
   1a0bc:	mov	r1, r0
   1a0c0:	mov	r0, #0
   1a0c4:	bl	1a08c <__assert_fail@plt+0x86ec>
   1a0c8:	pop	{r4, pc}
   1a0cc:	push	{r4, r5, lr}
   1a0d0:	sub	sp, sp, #52	; 0x34
   1a0d4:	mov	r4, r0
   1a0d8:	mov	r5, r2
   1a0dc:	mov	r0, sp
   1a0e0:	bl	188d4 <__assert_fail@plt+0x6f34>
   1a0e4:	mov	r3, sp
   1a0e8:	mvn	r2, #0
   1a0ec:	mov	r1, r5
   1a0f0:	mov	r0, r4
   1a0f4:	bl	19bac <__assert_fail@plt+0x820c>
   1a0f8:	add	sp, sp, #52	; 0x34
   1a0fc:	pop	{r4, r5, pc}
   1a100:	push	{r4, r5, r6, lr}
   1a104:	sub	sp, sp, #48	; 0x30
   1a108:	mov	r4, r0
   1a10c:	mov	r5, r2
   1a110:	mov	r6, r3
   1a114:	mov	r0, sp
   1a118:	bl	188d4 <__assert_fail@plt+0x6f34>
   1a11c:	mov	r3, sp
   1a120:	mov	r2, r6
   1a124:	mov	r1, r5
   1a128:	mov	r0, r4
   1a12c:	bl	19bac <__assert_fail@plt+0x820c>
   1a130:	add	sp, sp, #48	; 0x30
   1a134:	pop	{r4, r5, r6, pc}
   1a138:	push	{r4, lr}
   1a13c:	mov	r2, r1
   1a140:	mov	r1, r0
   1a144:	mov	r0, #0
   1a148:	bl	1a0cc <__assert_fail@plt+0x872c>
   1a14c:	pop	{r4, pc}
   1a150:	push	{r4, lr}
   1a154:	mov	r3, r2
   1a158:	mov	r2, r1
   1a15c:	mov	r1, r0
   1a160:	mov	r0, #0
   1a164:	bl	1a100 <__assert_fail@plt+0x8760>
   1a168:	pop	{r4, pc}
   1a16c:	push	{r4, r5, r6, lr}
   1a170:	sub	sp, sp, #48	; 0x30
   1a174:	mov	r4, r0
   1a178:	mov	r5, r1
   1a17c:	mov	r6, r2
   1a180:	mov	ip, sp
   1a184:	ldr	lr, [pc, #64]	; 1a1cc <__assert_fail@plt+0x882c>
   1a188:	ldm	lr!, {r0, r1, r2, r3}
   1a18c:	stmia	ip!, {r0, r1, r2, r3}
   1a190:	ldm	lr!, {r0, r1, r2, r3}
   1a194:	stmia	ip!, {r0, r1, r2, r3}
   1a198:	ldm	lr, {r0, r1, r2, r3}
   1a19c:	stm	ip, {r0, r1, r2, r3}
   1a1a0:	mov	r2, #1
   1a1a4:	mov	r1, r6
   1a1a8:	mov	r0, sp
   1a1ac:	bl	19dd8 <__assert_fail@plt+0x8438>
   1a1b0:	mov	r3, sp
   1a1b4:	mov	r2, r5
   1a1b8:	mov	r1, r4
   1a1bc:	mov	r0, #0
   1a1c0:	bl	19bac <__assert_fail@plt+0x820c>
   1a1c4:	add	sp, sp, #48	; 0x30
   1a1c8:	pop	{r4, r5, r6, pc}
   1a1cc:	andeq	sp, r3, r4, lsr #7
   1a1d0:	push	{r4, lr}
   1a1d4:	mov	r2, r1
   1a1d8:	mvn	r1, #0
   1a1dc:	bl	1a16c <__assert_fail@plt+0x87cc>
   1a1e0:	pop	{r4, pc}
   1a1e4:	push	{r4, lr}
   1a1e8:	mov	r1, #58	; 0x3a
   1a1ec:	bl	1a1d0 <__assert_fail@plt+0x8830>
   1a1f0:	pop	{r4, pc}
   1a1f4:	push	{r4, lr}
   1a1f8:	mov	r2, #58	; 0x3a
   1a1fc:	bl	1a16c <__assert_fail@plt+0x87cc>
   1a200:	pop	{r4, pc}
   1a204:	push	{r4, r5, lr}
   1a208:	sub	sp, sp, #100	; 0x64
   1a20c:	mov	r4, r0
   1a210:	mov	r5, r2
   1a214:	mov	r0, sp
   1a218:	bl	188d4 <__assert_fail@plt+0x6f34>
   1a21c:	add	lr, sp, #48	; 0x30
   1a220:	mov	ip, sp
   1a224:	ldm	ip!, {r0, r1, r2, r3}
   1a228:	stmia	lr!, {r0, r1, r2, r3}
   1a22c:	ldm	ip!, {r0, r1, r2, r3}
   1a230:	stmia	lr!, {r0, r1, r2, r3}
   1a234:	ldm	ip, {r0, r1, r2, r3}
   1a238:	stm	lr, {r0, r1, r2, r3}
   1a23c:	mov	r2, #1
   1a240:	mov	r1, #58	; 0x3a
   1a244:	add	r0, sp, #48	; 0x30
   1a248:	bl	19dd8 <__assert_fail@plt+0x8438>
   1a24c:	add	r3, sp, #48	; 0x30
   1a250:	mvn	r2, #0
   1a254:	mov	r1, r5
   1a258:	mov	r0, r4
   1a25c:	bl	19bac <__assert_fail@plt+0x820c>
   1a260:	add	sp, sp, #100	; 0x64
   1a264:	pop	{r4, r5, pc}
   1a268:	push	{r4, r5, r6, r7, lr}
   1a26c:	sub	sp, sp, #52	; 0x34
   1a270:	mov	r4, r0
   1a274:	mov	r6, r1
   1a278:	mov	r7, r2
   1a27c:	mov	r5, r3
   1a280:	mov	ip, sp
   1a284:	ldr	lr, [pc, #64]	; 1a2cc <__assert_fail@plt+0x892c>
   1a288:	ldm	lr!, {r0, r1, r2, r3}
   1a28c:	stmia	ip!, {r0, r1, r2, r3}
   1a290:	ldm	lr!, {r0, r1, r2, r3}
   1a294:	stmia	ip!, {r0, r1, r2, r3}
   1a298:	ldm	lr, {r0, r1, r2, r3}
   1a29c:	stm	ip, {r0, r1, r2, r3}
   1a2a0:	mov	r2, r7
   1a2a4:	mov	r1, r6
   1a2a8:	mov	r0, sp
   1a2ac:	bl	19e34 <__assert_fail@plt+0x8494>
   1a2b0:	mov	r3, sp
   1a2b4:	ldr	r2, [sp, #72]	; 0x48
   1a2b8:	mov	r1, r5
   1a2bc:	mov	r0, r4
   1a2c0:	bl	19bac <__assert_fail@plt+0x820c>
   1a2c4:	add	sp, sp, #52	; 0x34
   1a2c8:	pop	{r4, r5, r6, r7, pc}
   1a2cc:	andeq	sp, r3, r4, lsr #7
   1a2d0:	push	{lr}		; (str lr, [sp, #-4]!)
   1a2d4:	sub	sp, sp, #12
   1a2d8:	mvn	ip, #0
   1a2dc:	str	ip, [sp]
   1a2e0:	bl	1a268 <__assert_fail@plt+0x88c8>
   1a2e4:	add	sp, sp, #12
   1a2e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2ec:	push	{r4, lr}
   1a2f0:	mov	r3, r2
   1a2f4:	mov	r2, r1
   1a2f8:	mov	r1, r0
   1a2fc:	mov	r0, #0
   1a300:	bl	1a2d0 <__assert_fail@plt+0x8930>
   1a304:	pop	{r4, pc}
   1a308:	push	{lr}		; (str lr, [sp, #-4]!)
   1a30c:	sub	sp, sp, #12
   1a310:	str	r3, [sp]
   1a314:	mov	r3, r2
   1a318:	mov	r2, r1
   1a31c:	mov	r1, r0
   1a320:	mov	r0, #0
   1a324:	bl	1a268 <__assert_fail@plt+0x88c8>
   1a328:	add	sp, sp, #12
   1a32c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a330:	push	{r4, lr}
   1a334:	ldr	r3, [pc, #4]	; 1a340 <__assert_fail@plt+0x89a0>
   1a338:	bl	19bac <__assert_fail@plt+0x820c>
   1a33c:	pop	{r4, pc}
   1a340:	ldrdeq	sp, [r3], -r0
   1a344:	push	{r4, lr}
   1a348:	mov	r2, r1
   1a34c:	mov	r1, r0
   1a350:	mov	r0, #0
   1a354:	bl	1a330 <__assert_fail@plt+0x8990>
   1a358:	pop	{r4, pc}
   1a35c:	push	{r4, lr}
   1a360:	mvn	r2, #0
   1a364:	bl	1a330 <__assert_fail@plt+0x8990>
   1a368:	pop	{r4, pc}
   1a36c:	push	{r4, lr}
   1a370:	mov	r1, r0
   1a374:	mov	r0, #0
   1a378:	bl	1a35c <__assert_fail@plt+0x89bc>
   1a37c:	pop	{r4, pc}
   1a380:	push	{r4, r5, r6, lr}
   1a384:	mov	r5, r0
   1a388:	mov	r4, r1
   1a38c:	mov	r2, r1
   1a390:	mov	r1, #0
   1a394:	bl	1185c <memchr@plt>
   1a398:	cmp	r0, #0
   1a39c:	subne	r0, r0, r5
   1a3a0:	addne	r0, r0, #1
   1a3a4:	moveq	r0, r4
   1a3a8:	pop	{r4, r5, r6, pc}
   1a3ac:	push	{r4, r5, r6, r7, r8, lr}
   1a3b0:	mov	r4, r0
   1a3b4:	cmp	r0, #2
   1a3b8:	bls	1a3c4 <__assert_fail@plt+0x8a24>
   1a3bc:	mov	r0, r4
   1a3c0:	pop	{r4, r5, r6, r7, r8, pc}
   1a3c4:	bl	2a910 <__assert_fail@plt+0x18f70>
   1a3c8:	mov	r6, r0
   1a3cc:	bl	117d8 <__errno_location@plt>
   1a3d0:	mov	r5, r0
   1a3d4:	ldr	r7, [r0]
   1a3d8:	mov	r0, r4
   1a3dc:	bl	1197c <close@plt>
   1a3e0:	str	r7, [r5]
   1a3e4:	mov	r4, r6
   1a3e8:	b	1a3bc <__assert_fail@plt+0x8a1c>
   1a3ec:	push	{r4, r5, r6, lr}
   1a3f0:	sub	sp, sp, #32
   1a3f4:	mov	r4, r0
   1a3f8:	ldr	r5, [sp, #48]	; 0x30
   1a3fc:	ldr	r6, [sp, #52]	; 0x34
   1a400:	cmp	r1, #0
   1a404:	beq	1a4ac <__assert_fail@plt+0x8b0c>
   1a408:	str	r3, [sp]
   1a40c:	mov	r3, r2
   1a410:	mov	r2, r1
   1a414:	ldr	r1, [pc, #836]	; 1a760 <__assert_fail@plt+0x8dc0>
   1a418:	bl	117c0 <fprintf@plt>
   1a41c:	mov	r2, #5
   1a420:	ldr	r1, [pc, #828]	; 1a764 <__assert_fail@plt+0x8dc4>
   1a424:	mov	r0, #0
   1a428:	bl	11628 <dcgettext@plt>
   1a42c:	ldr	r3, [pc, #820]	; 1a768 <__assert_fail@plt+0x8dc8>
   1a430:	mov	r2, r0
   1a434:	ldr	r1, [pc, #816]	; 1a76c <__assert_fail@plt+0x8dcc>
   1a438:	mov	r0, r4
   1a43c:	bl	117c0 <fprintf@plt>
   1a440:	mov	r1, r4
   1a444:	mov	r0, #10
   1a448:	bl	118bc <fputc@plt>
   1a44c:	mov	r2, #5
   1a450:	ldr	r1, [pc, #792]	; 1a770 <__assert_fail@plt+0x8dd0>
   1a454:	mov	r0, #0
   1a458:	bl	11628 <dcgettext@plt>
   1a45c:	ldr	r2, [pc, #784]	; 1a774 <__assert_fail@plt+0x8dd4>
   1a460:	mov	r1, r0
   1a464:	mov	r0, r4
   1a468:	bl	117c0 <fprintf@plt>
   1a46c:	mov	r1, r4
   1a470:	mov	r0, #10
   1a474:	bl	118bc <fputc@plt>
   1a478:	cmp	r6, #9
   1a47c:	ldrls	pc, [pc, r6, lsl #2]
   1a480:	b	1a700 <__assert_fail@plt+0x8d60>
   1a484:	ldrdeq	sl, [r1], -r8
   1a488:			; <UNDEFINED> instruction: 0x0001a4b8
   1a48c:	andeq	sl, r1, r0, ror #9
   1a490:	andeq	sl, r1, r8, lsl #10
   1a494:	andeq	sl, r1, r8, lsr r5
   1a498:	andeq	sl, r1, r0, ror r5
   1a49c:			; <UNDEFINED> instruction: 0x0001a5b0
   1a4a0:	strdeq	sl, [r1], -r8
   1a4a4:	andeq	sl, r1, r8, asr #12
   1a4a8:	andeq	sl, r1, r0, lsr #13
   1a4ac:	ldr	r1, [pc, #708]	; 1a778 <__assert_fail@plt+0x8dd8>
   1a4b0:	bl	117c0 <fprintf@plt>
   1a4b4:	b	1a41c <__assert_fail@plt+0x8a7c>
   1a4b8:	mov	r2, #5
   1a4bc:	ldr	r1, [pc, #696]	; 1a77c <__assert_fail@plt+0x8ddc>
   1a4c0:	mov	r0, #0
   1a4c4:	bl	11628 <dcgettext@plt>
   1a4c8:	ldr	r2, [r5]
   1a4cc:	mov	r1, r0
   1a4d0:	mov	r0, r4
   1a4d4:	bl	117c0 <fprintf@plt>
   1a4d8:	add	sp, sp, #32
   1a4dc:	pop	{r4, r5, r6, pc}
   1a4e0:	mov	r2, #5
   1a4e4:	ldr	r1, [pc, #660]	; 1a780 <__assert_fail@plt+0x8de0>
   1a4e8:	mov	r0, #0
   1a4ec:	bl	11628 <dcgettext@plt>
   1a4f0:	ldr	r3, [r5, #4]
   1a4f4:	ldr	r2, [r5]
   1a4f8:	mov	r1, r0
   1a4fc:	mov	r0, r4
   1a500:	bl	117c0 <fprintf@plt>
   1a504:	b	1a4d8 <__assert_fail@plt+0x8b38>
   1a508:	mov	r2, #5
   1a50c:	ldr	r1, [pc, #624]	; 1a784 <__assert_fail@plt+0x8de4>
   1a510:	mov	r0, #0
   1a514:	bl	11628 <dcgettext@plt>
   1a518:	ldr	r3, [r5, #4]
   1a51c:	ldr	r2, [r5]
   1a520:	ldr	r1, [r5, #8]
   1a524:	str	r1, [sp]
   1a528:	mov	r1, r0
   1a52c:	mov	r0, r4
   1a530:	bl	117c0 <fprintf@plt>
   1a534:	b	1a4d8 <__assert_fail@plt+0x8b38>
   1a538:	mov	r2, #5
   1a53c:	ldr	r1, [pc, #580]	; 1a788 <__assert_fail@plt+0x8de8>
   1a540:	mov	r0, #0
   1a544:	bl	11628 <dcgettext@plt>
   1a548:	ldr	r3, [r5, #4]
   1a54c:	ldr	r2, [r5]
   1a550:	ldr	r1, [r5, #12]
   1a554:	str	r1, [sp, #4]
   1a558:	ldr	r1, [r5, #8]
   1a55c:	str	r1, [sp]
   1a560:	mov	r1, r0
   1a564:	mov	r0, r4
   1a568:	bl	117c0 <fprintf@plt>
   1a56c:	b	1a4d8 <__assert_fail@plt+0x8b38>
   1a570:	mov	r2, #5
   1a574:	ldr	r1, [pc, #528]	; 1a78c <__assert_fail@plt+0x8dec>
   1a578:	mov	r0, #0
   1a57c:	bl	11628 <dcgettext@plt>
   1a580:	ldr	r3, [r5, #4]
   1a584:	ldr	r2, [r5]
   1a588:	ldr	r1, [r5, #16]
   1a58c:	str	r1, [sp, #8]
   1a590:	ldr	r1, [r5, #12]
   1a594:	str	r1, [sp, #4]
   1a598:	ldr	r1, [r5, #8]
   1a59c:	str	r1, [sp]
   1a5a0:	mov	r1, r0
   1a5a4:	mov	r0, r4
   1a5a8:	bl	117c0 <fprintf@plt>
   1a5ac:	b	1a4d8 <__assert_fail@plt+0x8b38>
   1a5b0:	mov	r2, #5
   1a5b4:	ldr	r1, [pc, #468]	; 1a790 <__assert_fail@plt+0x8df0>
   1a5b8:	mov	r0, #0
   1a5bc:	bl	11628 <dcgettext@plt>
   1a5c0:	ldr	r3, [r5, #4]
   1a5c4:	ldr	r2, [r5]
   1a5c8:	ldr	r1, [r5, #20]
   1a5cc:	str	r1, [sp, #12]
   1a5d0:	ldr	r1, [r5, #16]
   1a5d4:	str	r1, [sp, #8]
   1a5d8:	ldr	r1, [r5, #12]
   1a5dc:	str	r1, [sp, #4]
   1a5e0:	ldr	r1, [r5, #8]
   1a5e4:	str	r1, [sp]
   1a5e8:	mov	r1, r0
   1a5ec:	mov	r0, r4
   1a5f0:	bl	117c0 <fprintf@plt>
   1a5f4:	b	1a4d8 <__assert_fail@plt+0x8b38>
   1a5f8:	mov	r2, #5
   1a5fc:	ldr	r1, [pc, #400]	; 1a794 <__assert_fail@plt+0x8df4>
   1a600:	mov	r0, #0
   1a604:	bl	11628 <dcgettext@plt>
   1a608:	ldr	r3, [r5, #4]
   1a60c:	ldr	r2, [r5]
   1a610:	ldr	r1, [r5, #24]
   1a614:	str	r1, [sp, #16]
   1a618:	ldr	r1, [r5, #20]
   1a61c:	str	r1, [sp, #12]
   1a620:	ldr	r1, [r5, #16]
   1a624:	str	r1, [sp, #8]
   1a628:	ldr	r1, [r5, #12]
   1a62c:	str	r1, [sp, #4]
   1a630:	ldr	r1, [r5, #8]
   1a634:	str	r1, [sp]
   1a638:	mov	r1, r0
   1a63c:	mov	r0, r4
   1a640:	bl	117c0 <fprintf@plt>
   1a644:	b	1a4d8 <__assert_fail@plt+0x8b38>
   1a648:	mov	r2, #5
   1a64c:	ldr	r1, [pc, #324]	; 1a798 <__assert_fail@plt+0x8df8>
   1a650:	mov	r0, #0
   1a654:	bl	11628 <dcgettext@plt>
   1a658:	ldr	r3, [r5, #4]
   1a65c:	ldr	r2, [r5]
   1a660:	ldr	r1, [r5, #28]
   1a664:	str	r1, [sp, #20]
   1a668:	ldr	r1, [r5, #24]
   1a66c:	str	r1, [sp, #16]
   1a670:	ldr	r1, [r5, #20]
   1a674:	str	r1, [sp, #12]
   1a678:	ldr	r1, [r5, #16]
   1a67c:	str	r1, [sp, #8]
   1a680:	ldr	r1, [r5, #12]
   1a684:	str	r1, [sp, #4]
   1a688:	ldr	r1, [r5, #8]
   1a68c:	str	r1, [sp]
   1a690:	mov	r1, r0
   1a694:	mov	r0, r4
   1a698:	bl	117c0 <fprintf@plt>
   1a69c:	b	1a4d8 <__assert_fail@plt+0x8b38>
   1a6a0:	mov	r2, #5
   1a6a4:	ldr	r1, [pc, #240]	; 1a79c <__assert_fail@plt+0x8dfc>
   1a6a8:	mov	r0, #0
   1a6ac:	bl	11628 <dcgettext@plt>
   1a6b0:	ldr	r3, [r5, #4]
   1a6b4:	ldr	r2, [r5]
   1a6b8:	ldr	r1, [r5, #32]
   1a6bc:	str	r1, [sp, #24]
   1a6c0:	ldr	r1, [r5, #28]
   1a6c4:	str	r1, [sp, #20]
   1a6c8:	ldr	r1, [r5, #24]
   1a6cc:	str	r1, [sp, #16]
   1a6d0:	ldr	r1, [r5, #20]
   1a6d4:	str	r1, [sp, #12]
   1a6d8:	ldr	r1, [r5, #16]
   1a6dc:	str	r1, [sp, #8]
   1a6e0:	ldr	r1, [r5, #12]
   1a6e4:	str	r1, [sp, #4]
   1a6e8:	ldr	r1, [r5, #8]
   1a6ec:	str	r1, [sp]
   1a6f0:	mov	r1, r0
   1a6f4:	mov	r0, r4
   1a6f8:	bl	117c0 <fprintf@plt>
   1a6fc:	b	1a4d8 <__assert_fail@plt+0x8b38>
   1a700:	mov	r2, #5
   1a704:	ldr	r1, [pc, #148]	; 1a7a0 <__assert_fail@plt+0x8e00>
   1a708:	mov	r0, #0
   1a70c:	bl	11628 <dcgettext@plt>
   1a710:	ldr	r3, [r5, #4]
   1a714:	ldr	r2, [r5]
   1a718:	ldr	r1, [r5, #32]
   1a71c:	str	r1, [sp, #24]
   1a720:	ldr	r1, [r5, #28]
   1a724:	str	r1, [sp, #20]
   1a728:	ldr	r1, [r5, #24]
   1a72c:	str	r1, [sp, #16]
   1a730:	ldr	r1, [r5, #20]
   1a734:	str	r1, [sp, #12]
   1a738:	ldr	r1, [r5, #16]
   1a73c:	str	r1, [sp, #8]
   1a740:	ldr	r1, [r5, #12]
   1a744:	str	r1, [sp, #4]
   1a748:	ldr	r1, [r5, #8]
   1a74c:	str	r1, [sp]
   1a750:	mov	r1, r0
   1a754:	mov	r0, r4
   1a758:	bl	117c0 <fprintf@plt>
   1a75c:	b	1a4d8 <__assert_fail@plt+0x8b38>
   1a760:	ldrdeq	ip, [r2], -r4
   1a764:	andeq	ip, r2, r8, ror #13
   1a768:	andeq	r0, r0, r6, ror #15
   1a76c:	andeq	ip, r2, r8, lsr #19
   1a770:	andeq	ip, r2, ip, ror #13
   1a774:	muleq	r2, r8, r7
   1a778:	andeq	ip, r2, r0, ror #13
   1a77c:			; <UNDEFINED> instruction: 0x0002c7bc
   1a780:	andeq	ip, r2, ip, asr #15
   1a784:	andeq	ip, r2, r4, ror #15
   1a788:	andeq	ip, r2, r0, lsl #16
   1a78c:	andeq	ip, r2, r0, lsr #16
   1a790:	andeq	ip, r2, r4, asr #16
   1a794:	andeq	ip, r2, ip, ror #16
   1a798:	muleq	r2, r8, r8
   1a79c:	andeq	ip, r2, r8, asr #17
   1a7a0:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1a7a4:	push	{r4, r5, lr}
   1a7a8:	sub	sp, sp, #12
   1a7ac:	ldr	r5, [sp, #24]
   1a7b0:	ldr	ip, [r5]
   1a7b4:	cmp	ip, #0
   1a7b8:	beq	1a7e8 <__assert_fail@plt+0x8e48>
   1a7bc:	mov	lr, r5
   1a7c0:	mov	ip, #0
   1a7c4:	add	ip, ip, #1
   1a7c8:	ldr	r4, [lr, #4]!
   1a7cc:	cmp	r4, #0
   1a7d0:	bne	1a7c4 <__assert_fail@plt+0x8e24>
   1a7d4:	str	ip, [sp, #4]
   1a7d8:	str	r5, [sp]
   1a7dc:	bl	1a3ec <__assert_fail@plt+0x8a4c>
   1a7e0:	add	sp, sp, #12
   1a7e4:	pop	{r4, r5, pc}
   1a7e8:	mov	ip, #0
   1a7ec:	b	1a7d4 <__assert_fail@plt+0x8e34>
   1a7f0:	push	{r4, r5, lr}
   1a7f4:	sub	sp, sp, #52	; 0x34
   1a7f8:	ldr	r4, [sp, #64]	; 0x40
   1a7fc:	sub	r4, r4, #4
   1a800:	add	r5, sp, #4
   1a804:	mov	ip, #0
   1a808:	ldr	lr, [r4, #4]!
   1a80c:	str	lr, [r5, #4]!
   1a810:	cmp	lr, #0
   1a814:	beq	1a824 <__assert_fail@plt+0x8e84>
   1a818:	add	ip, ip, #1
   1a81c:	cmp	ip, #10
   1a820:	bne	1a808 <__assert_fail@plt+0x8e68>
   1a824:	str	ip, [sp, #4]
   1a828:	add	ip, sp, #8
   1a82c:	str	ip, [sp]
   1a830:	bl	1a3ec <__assert_fail@plt+0x8a4c>
   1a834:	add	sp, sp, #52	; 0x34
   1a838:	pop	{r4, r5, pc}
   1a83c:	push	{r3}		; (str r3, [sp, #-4]!)
   1a840:	push	{lr}		; (str lr, [sp, #-4]!)
   1a844:	sub	sp, sp, #16
   1a848:	add	r3, sp, #24
   1a84c:	str	r3, [sp, #12]
   1a850:	str	r3, [sp]
   1a854:	ldr	r3, [sp, #20]
   1a858:	bl	1a7f0 <__assert_fail@plt+0x8e50>
   1a85c:	add	sp, sp, #16
   1a860:	pop	{lr}		; (ldr lr, [sp], #4)
   1a864:	add	sp, sp, #4
   1a868:	bx	lr
   1a86c:	push	{r4, lr}
   1a870:	ldr	r3, [pc, #88]	; 1a8d0 <__assert_fail@plt+0x8f30>
   1a874:	ldr	r1, [r3]
   1a878:	mov	r0, #10
   1a87c:	bl	118bc <fputc@plt>
   1a880:	mov	r2, #5
   1a884:	ldr	r1, [pc, #72]	; 1a8d4 <__assert_fail@plt+0x8f34>
   1a888:	mov	r0, #0
   1a88c:	bl	11628 <dcgettext@plt>
   1a890:	ldr	r1, [pc, #64]	; 1a8d8 <__assert_fail@plt+0x8f38>
   1a894:	bl	11550 <printf@plt>
   1a898:	mov	r2, #5
   1a89c:	ldr	r1, [pc, #56]	; 1a8dc <__assert_fail@plt+0x8f3c>
   1a8a0:	mov	r0, #0
   1a8a4:	bl	11628 <dcgettext@plt>
   1a8a8:	ldr	r2, [pc, #48]	; 1a8e0 <__assert_fail@plt+0x8f40>
   1a8ac:	ldr	r1, [pc, #48]	; 1a8e4 <__assert_fail@plt+0x8f44>
   1a8b0:	bl	11550 <printf@plt>
   1a8b4:	mov	r2, #5
   1a8b8:	ldr	r1, [pc, #40]	; 1a8e8 <__assert_fail@plt+0x8f48>
   1a8bc:	mov	r0, #0
   1a8c0:	bl	11628 <dcgettext@plt>
   1a8c4:	ldr	r1, [pc, #32]	; 1a8ec <__assert_fail@plt+0x8f4c>
   1a8c8:	bl	11550 <printf@plt>
   1a8cc:	pop	{r4, pc}
   1a8d0:	andeq	sp, r3, ip, lsl r2
   1a8d4:	andeq	ip, r2, r8, lsr r9
   1a8d8:	andeq	ip, r2, r0, asr r4
   1a8dc:	andeq	ip, r2, ip, asr #18
   1a8e0:	andeq	ip, r2, r8, lsr #8
   1a8e4:	andeq	ip, r2, r0, ror #3
   1a8e8:	andeq	ip, r2, r0, ror #18
   1a8ec:	andeq	ip, r2, r8, lsl #19
   1a8f0:	push	{r4, lr}
   1a8f4:	bl	1b954 <__assert_fail@plt+0x9fb4>
   1a8f8:	cmp	r0, #0
   1a8fc:	popne	{r4, pc}
   1a900:	bl	1ae94 <__assert_fail@plt+0x94f4>
   1a904:	push	{r4, lr}
   1a908:	bl	1b954 <__assert_fail@plt+0x9fb4>
   1a90c:	cmp	r0, #0
   1a910:	popne	{r4, pc}
   1a914:	bl	1ae94 <__assert_fail@plt+0x94f4>
   1a918:	push	{r4, lr}
   1a91c:	bl	1a8f0 <__assert_fail@plt+0x8f50>
   1a920:	pop	{r4, pc}
   1a924:	push	{r4, r5, r6, lr}
   1a928:	mov	r5, r0
   1a92c:	mov	r4, r1
   1a930:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1a934:	cmp	r0, #0
   1a938:	popne	{r4, r5, r6, pc}
   1a93c:	adds	r4, r4, #0
   1a940:	movne	r4, #1
   1a944:	cmp	r5, #0
   1a948:	orreq	r4, r4, #1
   1a94c:	cmp	r4, #0
   1a950:	popeq	{r4, r5, r6, pc}
   1a954:	bl	1ae94 <__assert_fail@plt+0x94f4>
   1a958:	push	{r4, lr}
   1a95c:	cmp	r1, #0
   1a960:	orreq	r1, r1, #1
   1a964:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1a968:	cmp	r0, #0
   1a96c:	popne	{r4, pc}
   1a970:	bl	1ae94 <__assert_fail@plt+0x94f4>
   1a974:	push	{r4, r5, r6, lr}
   1a978:	mov	r6, r0
   1a97c:	mov	r5, r1
   1a980:	mov	r4, r2
   1a984:	bl	1ba2c <__assert_fail@plt+0xa08c>
   1a988:	cmp	r0, #0
   1a98c:	popne	{r4, r5, r6, pc}
   1a990:	cmp	r6, #0
   1a994:	beq	1a9a4 <__assert_fail@plt+0x9004>
   1a998:	cmp	r5, #0
   1a99c:	cmpne	r4, #0
   1a9a0:	popeq	{r4, r5, r6, pc}
   1a9a4:	bl	1ae94 <__assert_fail@plt+0x94f4>
   1a9a8:	push	{r4, lr}
   1a9ac:	bl	1a974 <__assert_fail@plt+0x8fd4>
   1a9b0:	pop	{r4, pc}
   1a9b4:	push	{r4, lr}
   1a9b8:	mov	ip, r1
   1a9bc:	mov	r3, r2
   1a9c0:	cmp	r2, #0
   1a9c4:	cmpne	r1, #0
   1a9c8:	moveq	r3, #1
   1a9cc:	moveq	ip, r3
   1a9d0:	mov	r2, r3
   1a9d4:	mov	r1, ip
   1a9d8:	bl	1ba2c <__assert_fail@plt+0xa08c>
   1a9dc:	cmp	r0, #0
   1a9e0:	popne	{r4, pc}
   1a9e4:	bl	1ae94 <__assert_fail@plt+0x94f4>
   1a9e8:	push	{r4, lr}
   1a9ec:	mov	r2, r1
   1a9f0:	mov	r1, r0
   1a9f4:	mov	r0, #0
   1a9f8:	bl	1a974 <__assert_fail@plt+0x8fd4>
   1a9fc:	pop	{r4, pc}
   1aa00:	push	{r4, lr}
   1aa04:	mov	r2, r1
   1aa08:	mov	r1, r0
   1aa0c:	mov	r0, #0
   1aa10:	bl	1a9b4 <__assert_fail@plt+0x9014>
   1aa14:	pop	{r4, pc}
   1aa18:	push	{r4, r5, r6, r7, r8, lr}
   1aa1c:	mov	r5, r1
   1aa20:	mov	r6, r2
   1aa24:	ldr	r4, [r1]
   1aa28:	subs	r7, r0, #0
   1aa2c:	beq	1aa48 <__assert_fail@plt+0x90a8>
   1aa30:	lsr	r2, r4, #1
   1aa34:	add	r3, r2, #1
   1aa38:	mvn	r3, r3
   1aa3c:	cmp	r4, r3
   1aa40:	bls	1aa6c <__assert_fail@plt+0x90cc>
   1aa44:	bl	1ae94 <__assert_fail@plt+0x94f4>
   1aa48:	cmp	r4, #0
   1aa4c:	bne	1aa74 <__assert_fail@plt+0x90d4>
   1aa50:	mov	r1, r2
   1aa54:	mov	r0, #64	; 0x40
   1aa58:	bl	2a924 <__assert_fail@plt+0x18f84>
   1aa5c:	cmp	r0, #0
   1aa60:	movne	r4, r0
   1aa64:	addeq	r4, r0, #1
   1aa68:	b	1aa74 <__assert_fail@plt+0x90d4>
   1aa6c:	add	r4, r4, #1
   1aa70:	add	r4, r4, r2
   1aa74:	mov	r2, r6
   1aa78:	mov	r1, r4
   1aa7c:	mov	r0, r7
   1aa80:	bl	1a974 <__assert_fail@plt+0x8fd4>
   1aa84:	str	r4, [r5]
   1aa88:	pop	{r4, r5, r6, r7, r8, pc}
   1aa8c:	push	{r4, lr}
   1aa90:	mov	r2, #1
   1aa94:	bl	1aa18 <__assert_fail@plt+0x9078>
   1aa98:	pop	{r4, pc}
   1aa9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aaa0:	sub	sp, sp, #12
   1aaa4:	mov	fp, r0
   1aaa8:	mov	sl, r1
   1aaac:	mov	r9, r2
   1aab0:	mov	r7, r3
   1aab4:	ldr	r6, [sp, #48]	; 0x30
   1aab8:	ldr	r5, [r1]
   1aabc:	asrs	r4, r5, #1
   1aac0:	bmi	1ac1c <__assert_fail@plt+0x927c>
   1aac4:	cmp	r5, #0
   1aac8:	blt	1ac30 <__assert_fail@plt+0x9290>
   1aacc:	mvn	r3, #-2147483648	; 0x80000000
   1aad0:	sub	r3, r3, r4
   1aad4:	cmp	r5, r3
   1aad8:	movle	r3, #0
   1aadc:	movgt	r3, #1
   1aae0:	cmp	r3, #0
   1aae4:	addeq	r4, r4, r5
   1aae8:	mvnne	r4, #-2147483648	; 0x80000000
   1aaec:	mvn	r8, r7
   1aaf0:	lsr	r8, r8, #31
   1aaf4:	cmp	r7, r4
   1aaf8:	movge	r3, #0
   1aafc:	andlt	r3, r8, #1
   1ab00:	cmp	r3, #0
   1ab04:	movne	r4, r7
   1ab08:	cmp	r6, #0
   1ab0c:	blt	1ac44 <__assert_fail@plt+0x92a4>
   1ab10:	cmp	r6, #0
   1ab14:	beq	1acf0 <__assert_fail@plt+0x9350>
   1ab18:	cmp	r4, #0
   1ab1c:	blt	1aca0 <__assert_fail@plt+0x9300>
   1ab20:	mov	r1, r6
   1ab24:	mvn	r0, #-2147483648	; 0x80000000
   1ab28:	bl	2ab30 <__assert_fail@plt+0x19190>
   1ab2c:	cmp	r0, r4
   1ab30:	movge	r0, #0
   1ab34:	movlt	r0, #1
   1ab38:	cmp	r0, #0
   1ab3c:	mvnne	r3, #-2147483648	; 0x80000000
   1ab40:	strne	r3, [sp, #4]
   1ab44:	beq	1acd8 <__assert_fail@plt+0x9338>
   1ab48:	mov	r1, r6
   1ab4c:	ldr	r0, [sp, #4]
   1ab50:	bl	2ab30 <__assert_fail@plt+0x19190>
   1ab54:	mov	r4, r0
   1ab58:	mov	r1, r6
   1ab5c:	ldr	r0, [sp, #4]
   1ab60:	bl	2ad50 <__assert_fail@plt+0x193b0>
   1ab64:	ldr	r3, [sp, #4]
   1ab68:	sub	r1, r3, r1
   1ab6c:	cmp	fp, #0
   1ab70:	moveq	r3, #0
   1ab74:	streq	r3, [sl]
   1ab78:	sub	r3, r4, r5
   1ab7c:	cmp	r3, r9
   1ab80:	bge	1ac08 <__assert_fail@plt+0x9268>
   1ab84:	cmp	r9, #0
   1ab88:	blt	1acfc <__assert_fail@plt+0x935c>
   1ab8c:	cmp	r5, #0
   1ab90:	blt	1ad10 <__assert_fail@plt+0x9370>
   1ab94:	mvn	r3, #-2147483648	; 0x80000000
   1ab98:	sub	r3, r3, r9
   1ab9c:	cmp	r5, r3
   1aba0:	movle	r3, #0
   1aba4:	movgt	r3, #1
   1aba8:	cmp	r3, #0
   1abac:	bne	1adb8 <__assert_fail@plt+0x9418>
   1abb0:	add	r5, r5, r9
   1abb4:	mov	r4, r5
   1abb8:	cmp	r7, r5
   1abbc:	movge	r7, #0
   1abc0:	andlt	r7, r8, #1
   1abc4:	cmp	r7, #0
   1abc8:	bne	1adb8 <__assert_fail@plt+0x9418>
   1abcc:	cmp	r6, #0
   1abd0:	blt	1ad24 <__assert_fail@plt+0x9384>
   1abd4:	cmp	r6, #0
   1abd8:	beq	1ac04 <__assert_fail@plt+0x9264>
   1abdc:	cmp	r5, #0
   1abe0:	blt	1ad80 <__assert_fail@plt+0x93e0>
   1abe4:	mov	r1, r6
   1abe8:	mvn	r0, #-2147483648	; 0x80000000
   1abec:	bl	2ab30 <__assert_fail@plt+0x19190>
   1abf0:	cmp	r5, r0
   1abf4:	movle	r0, #0
   1abf8:	movgt	r0, #1
   1abfc:	cmp	r0, #0
   1ac00:	bne	1adb8 <__assert_fail@plt+0x9418>
   1ac04:	mul	r1, r5, r6
   1ac08:	mov	r0, fp
   1ac0c:	bl	1a924 <__assert_fail@plt+0x8f84>
   1ac10:	str	r4, [sl]
   1ac14:	add	sp, sp, #12
   1ac18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac1c:	rsb	r3, r4, #-2147483648	; 0x80000000
   1ac20:	cmp	r5, r3
   1ac24:	movge	r3, #0
   1ac28:	movlt	r3, #1
   1ac2c:	b	1aae0 <__assert_fail@plt+0x9140>
   1ac30:	rsb	r3, r5, #-2147483648	; 0x80000000
   1ac34:	cmp	r4, r3
   1ac38:	movge	r3, #0
   1ac3c:	movlt	r3, #1
   1ac40:	b	1aae0 <__assert_fail@plt+0x9140>
   1ac44:	cmp	r4, #0
   1ac48:	blt	1ac70 <__assert_fail@plt+0x92d0>
   1ac4c:	cmn	r6, #1
   1ac50:	beq	1ac8c <__assert_fail@plt+0x92ec>
   1ac54:	mov	r1, r6
   1ac58:	mov	r0, #-2147483648	; 0x80000000
   1ac5c:	bl	2ab30 <__assert_fail@plt+0x19190>
   1ac60:	cmp	r0, r4
   1ac64:	movge	r0, #0
   1ac68:	movlt	r0, #1
   1ac6c:	b	1ab38 <__assert_fail@plt+0x9198>
   1ac70:	mov	r1, r6
   1ac74:	mvn	r0, #-2147483648	; 0x80000000
   1ac78:	bl	2ab30 <__assert_fail@plt+0x19190>
   1ac7c:	cmp	r0, r4
   1ac80:	movle	r0, #0
   1ac84:	movgt	r0, #1
   1ac88:	b	1ab38 <__assert_fail@plt+0x9198>
   1ac8c:	add	r0, r4, #-2147483648	; 0x80000000
   1ac90:	cmp	r0, #0
   1ac94:	movle	r0, #0
   1ac98:	movgt	r0, #1
   1ac9c:	b	1ab38 <__assert_fail@plt+0x9198>
   1aca0:	cmn	r4, #1
   1aca4:	beq	1acc4 <__assert_fail@plt+0x9324>
   1aca8:	mov	r1, r4
   1acac:	mov	r0, #-2147483648	; 0x80000000
   1acb0:	bl	2ab30 <__assert_fail@plt+0x19190>
   1acb4:	cmp	r6, r0
   1acb8:	movle	r0, #0
   1acbc:	movgt	r0, #1
   1acc0:	b	1ab38 <__assert_fail@plt+0x9198>
   1acc4:	add	r0, r6, #-2147483648	; 0x80000000
   1acc8:	cmp	r0, #0
   1accc:	movle	r0, #0
   1acd0:	movgt	r0, #1
   1acd4:	b	1ab38 <__assert_fail@plt+0x9198>
   1acd8:	mul	r1, r6, r4
   1acdc:	cmp	r1, #63	; 0x3f
   1ace0:	movle	r3, #64	; 0x40
   1ace4:	strle	r3, [sp, #4]
   1ace8:	bgt	1ab6c <__assert_fail@plt+0x91cc>
   1acec:	b	1ab48 <__assert_fail@plt+0x91a8>
   1acf0:	mov	r3, #64	; 0x40
   1acf4:	str	r3, [sp, #4]
   1acf8:	b	1ab48 <__assert_fail@plt+0x91a8>
   1acfc:	rsb	r3, r9, #-2147483648	; 0x80000000
   1ad00:	cmp	r5, r3
   1ad04:	movge	r3, #0
   1ad08:	movlt	r3, #1
   1ad0c:	b	1aba8 <__assert_fail@plt+0x9208>
   1ad10:	rsb	r3, r5, #-2147483648	; 0x80000000
   1ad14:	cmp	r9, r3
   1ad18:	movge	r3, #0
   1ad1c:	movlt	r3, #1
   1ad20:	b	1aba8 <__assert_fail@plt+0x9208>
   1ad24:	cmp	r5, #0
   1ad28:	blt	1ad50 <__assert_fail@plt+0x93b0>
   1ad2c:	cmn	r6, #1
   1ad30:	beq	1ad6c <__assert_fail@plt+0x93cc>
   1ad34:	mov	r1, r6
   1ad38:	mov	r0, #-2147483648	; 0x80000000
   1ad3c:	bl	2ab30 <__assert_fail@plt+0x19190>
   1ad40:	cmp	r5, r0
   1ad44:	movle	r0, #0
   1ad48:	movgt	r0, #1
   1ad4c:	b	1abfc <__assert_fail@plt+0x925c>
   1ad50:	mov	r1, r6
   1ad54:	mvn	r0, #-2147483648	; 0x80000000
   1ad58:	bl	2ab30 <__assert_fail@plt+0x19190>
   1ad5c:	cmp	r5, r0
   1ad60:	movge	r0, #0
   1ad64:	movlt	r0, #1
   1ad68:	b	1abfc <__assert_fail@plt+0x925c>
   1ad6c:	add	r0, r5, #-2147483648	; 0x80000000
   1ad70:	cmp	r0, #0
   1ad74:	movle	r0, #0
   1ad78:	movgt	r0, #1
   1ad7c:	b	1abfc <__assert_fail@plt+0x925c>
   1ad80:	cmn	r5, #1
   1ad84:	beq	1ada4 <__assert_fail@plt+0x9404>
   1ad88:	mov	r1, r5
   1ad8c:	mov	r0, #-2147483648	; 0x80000000
   1ad90:	bl	2ab30 <__assert_fail@plt+0x19190>
   1ad94:	cmp	r6, r0
   1ad98:	movle	r0, #0
   1ad9c:	movgt	r0, #1
   1ada0:	b	1abfc <__assert_fail@plt+0x925c>
   1ada4:	add	r0, r6, #-2147483648	; 0x80000000
   1ada8:	cmp	r0, #0
   1adac:	movle	r0, #0
   1adb0:	movgt	r0, #1
   1adb4:	b	1abfc <__assert_fail@plt+0x925c>
   1adb8:	bl	1ae94 <__assert_fail@plt+0x94f4>
   1adbc:	push	{r4, lr}
   1adc0:	bl	1b548 <__assert_fail@plt+0x9ba8>
   1adc4:	cmp	r0, #0
   1adc8:	popne	{r4, pc}
   1adcc:	bl	1ae94 <__assert_fail@plt+0x94f4>
   1add0:	push	{r4, lr}
   1add4:	mov	r1, #1
   1add8:	bl	1adbc <__assert_fail@plt+0x941c>
   1addc:	pop	{r4, pc}
   1ade0:	push	{r4, lr}
   1ade4:	bl	1b548 <__assert_fail@plt+0x9ba8>
   1ade8:	cmp	r0, #0
   1adec:	popne	{r4, pc}
   1adf0:	bl	1ae94 <__assert_fail@plt+0x94f4>
   1adf4:	push	{r4, lr}
   1adf8:	mov	r1, #1
   1adfc:	bl	1ade0 <__assert_fail@plt+0x9440>
   1ae00:	pop	{r4, pc}
   1ae04:	push	{r4, r5, r6, lr}
   1ae08:	mov	r5, r0
   1ae0c:	mov	r4, r1
   1ae10:	mov	r0, r1
   1ae14:	bl	1a8f0 <__assert_fail@plt+0x8f50>
   1ae18:	mov	r2, r4
   1ae1c:	mov	r1, r5
   1ae20:	bl	115d4 <memcpy@plt>
   1ae24:	pop	{r4, r5, r6, pc}
   1ae28:	push	{r4, r5, r6, lr}
   1ae2c:	mov	r5, r0
   1ae30:	mov	r4, r1
   1ae34:	mov	r0, r1
   1ae38:	bl	1a904 <__assert_fail@plt+0x8f64>
   1ae3c:	mov	r2, r4
   1ae40:	mov	r1, r5
   1ae44:	bl	115d4 <memcpy@plt>
   1ae48:	pop	{r4, r5, r6, pc}
   1ae4c:	push	{r4, r5, r6, lr}
   1ae50:	mov	r5, r0
   1ae54:	mov	r4, r1
   1ae58:	add	r0, r1, #1
   1ae5c:	bl	1a904 <__assert_fail@plt+0x8f64>
   1ae60:	mov	r2, #0
   1ae64:	strb	r2, [r0, r4]
   1ae68:	mov	r2, r4
   1ae6c:	mov	r1, r5
   1ae70:	bl	115d4 <memcpy@plt>
   1ae74:	pop	{r4, r5, r6, pc}
   1ae78:	push	{r4, lr}
   1ae7c:	mov	r4, r0
   1ae80:	bl	117a8 <strlen@plt>
   1ae84:	add	r1, r0, #1
   1ae88:	mov	r0, r4
   1ae8c:	bl	1ae04 <__assert_fail@plt+0x9464>
   1ae90:	pop	{r4, pc}
   1ae94:	push	{r4, lr}
   1ae98:	ldr	r3, [pc, #40]	; 1aec8 <__assert_fail@plt+0x9528>
   1ae9c:	ldr	r4, [r3]
   1aea0:	mov	r2, #5
   1aea4:	ldr	r1, [pc, #32]	; 1aecc <__assert_fail@plt+0x952c>
   1aea8:	mov	r0, #0
   1aeac:	bl	11628 <dcgettext@plt>
   1aeb0:	mov	r3, r0
   1aeb4:	ldr	r2, [pc, #20]	; 1aed0 <__assert_fail@plt+0x9530>
   1aeb8:	mov	r1, #0
   1aebc:	mov	r0, r4
   1aec0:	bl	116d0 <error@plt>
   1aec4:	bl	11964 <abort@plt>
   1aec8:			; <UNDEFINED> instruction: 0x0003d1bc
   1aecc:	ldrdeq	ip, [r2], -r8
   1aed0:	andeq	ip, r2, r8, lsr #9
   1aed4:	push	{lr}		; (str lr, [sp, #-4]!)
   1aed8:	sub	sp, sp, #20
   1aedc:	ldr	ip, [pc, #144]	; 1af74 <__assert_fail@plt+0x95d4>
   1aee0:	ldr	r5, [ip]
   1aee4:	sub	r0, r0, #1
   1aee8:	cmp	r0, #3
   1aeec:	ldrls	pc, [pc, r0, lsl #2]
   1aef0:	b	1af0c <__assert_fail@plt+0x956c>
   1aef4:	andeq	sl, r1, r0, lsl pc
   1aef8:	andeq	sl, r1, r4, lsl #30
   1aefc:	andeq	sl, r1, r4, lsl #30
   1af00:	andeq	sl, r1, r8, lsl pc
   1af04:	ldr	r0, [pc, #108]	; 1af78 <__assert_fail@plt+0x95d8>
   1af08:	b	1af1c <__assert_fail@plt+0x957c>
   1af0c:	bl	11964 <abort@plt>
   1af10:	ldr	r0, [pc, #100]	; 1af7c <__assert_fail@plt+0x95dc>
   1af14:	b	1af1c <__assert_fail@plt+0x957c>
   1af18:	ldr	r0, [pc, #96]	; 1af80 <__assert_fail@plt+0x95e0>
   1af1c:	cmp	r1, #0
   1af20:	ldrlt	r4, [pc, #92]	; 1af84 <__assert_fail@plt+0x95e4>
   1af24:	sublt	r4, r4, r1
   1af28:	strblt	r2, [sp, #12]
   1af2c:	movlt	r3, #0
   1af30:	strblt	r3, [sp, #13]
   1af34:	addlt	r6, sp, #12
   1af38:	ldrge	r6, [r3, r1, lsl #4]
   1af3c:	ldrge	r4, [pc, #64]	; 1af84 <__assert_fail@plt+0x95e4>
   1af40:	mov	r2, #5
   1af44:	mov	r1, r0
   1af48:	mov	r0, #0
   1af4c:	bl	11628 <dcgettext@plt>
   1af50:	ldr	r3, [sp, #24]
   1af54:	str	r3, [sp, #4]
   1af58:	str	r6, [sp]
   1af5c:	mov	r3, r4
   1af60:	mov	r2, r0
   1af64:	mov	r1, #0
   1af68:	mov	r0, r5
   1af6c:	bl	116d0 <error@plt>
   1af70:	bl	11964 <abort@plt>
   1af74:			; <UNDEFINED> instruction: 0x0003d1bc
   1af78:	andeq	ip, r2, r8, lsl #20
   1af7c:	andeq	ip, r2, r0, lsr sl
   1af80:	andeq	ip, r2, ip, ror #19
   1af84:	andeq	ip, r2, r0, asr sl
   1af88:	cmp	r2, #0
   1af8c:	beq	1b020 <__assert_fail@plt+0x9680>
   1af90:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af94:	sub	r4, r2, #1
   1af98:	mov	r5, r0
   1af9c:	mov	r6, r1
   1afa0:	asr	r7, r1, #31
   1afa4:	mov	r2, r1
   1afa8:	mov	r3, r7
   1afac:	mvn	r0, #0
   1afb0:	mvn	r1, #0
   1afb4:	bl	2b128 <__assert_fail@plt+0x19788>
   1afb8:	mov	r8, r0
   1afbc:	mov	r9, r1
   1afc0:	mov	r0, #0
   1afc4:	mov	r1, r0
   1afc8:	mvn	sl, #0
   1afcc:	mvn	fp, #0
   1afd0:	mov	lr, #1
   1afd4:	b	1aff0 <__assert_fail@plt+0x9650>
   1afd8:	strd	sl, [r5]
   1afdc:	mov	r3, lr
   1afe0:	orr	r0, r0, r3
   1afe4:	sub	r4, r4, #1
   1afe8:	cmn	r4, #1
   1afec:	beq	1b01c <__assert_fail@plt+0x967c>
   1aff0:	ldrd	r2, [r5]
   1aff4:	cmp	r9, r3
   1aff8:	cmpeq	r8, r2
   1affc:	bcc	1afd8 <__assert_fail@plt+0x9638>
   1b000:	mul	ip, r6, r3
   1b004:	mla	ip, r2, r7, ip
   1b008:	umull	r2, r3, r6, r2
   1b00c:	add	r3, ip, r3
   1b010:	strd	r2, [r5]
   1b014:	mov	r3, r1
   1b018:	b	1afe0 <__assert_fail@plt+0x9640>
   1b01c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b020:	mov	r0, #0
   1b024:	bx	lr
   1b028:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b02c:	sub	sp, sp, #20
   1b030:	cmp	r2, #36	; 0x24
   1b034:	bhi	1b074 <__assert_fail@plt+0x96d4>
   1b038:	mov	r5, r0
   1b03c:	mov	r6, r1
   1b040:	mov	r7, r2
   1b044:	mov	r9, r3
   1b048:	cmp	r1, #0
   1b04c:	addeq	r6, sp, #12
   1b050:	bl	117d8 <__errno_location@plt>
   1b054:	mov	r8, r0
   1b058:	mov	r3, #0
   1b05c:	str	r3, [r0]
   1b060:	ldrb	r4, [r5]
   1b064:	bl	11778 <__ctype_b_loc@plt>
   1b068:	ldr	r1, [r0]
   1b06c:	mov	r2, r5
   1b070:	b	1b08c <__assert_fail@plt+0x96ec>
   1b074:	ldr	r3, [pc, #1208]	; 1b534 <__assert_fail@plt+0x9b94>
   1b078:	mov	r2, #84	; 0x54
   1b07c:	ldr	r1, [pc, #1204]	; 1b538 <__assert_fail@plt+0x9b98>
   1b080:	ldr	r0, [pc, #1204]	; 1b53c <__assert_fail@plt+0x9b9c>
   1b084:	bl	119a0 <__assert_fail@plt>
   1b088:	ldrb	r4, [r2, #1]!
   1b08c:	lsl	r3, r4, #1
   1b090:	ldrh	r3, [r1, r3]
   1b094:	tst	r3, #8192	; 0x2000
   1b098:	bne	1b088 <__assert_fail@plt+0x96e8>
   1b09c:	cmp	r4, #45	; 0x2d
   1b0a0:	moveq	r4, #4
   1b0a4:	bne	1b0b4 <__assert_fail@plt+0x9714>
   1b0a8:	mov	r0, r4
   1b0ac:	add	sp, sp, #20
   1b0b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b0b4:	mov	r3, #0
   1b0b8:	mov	r2, r7
   1b0bc:	mov	r1, r6
   1b0c0:	mov	r0, r5
   1b0c4:	bl	115ec <__strtoull_internal@plt>
   1b0c8:	strd	r0, [sp]
   1b0cc:	ldr	r7, [r6]
   1b0d0:	cmp	r5, r7
   1b0d4:	beq	1b0f8 <__assert_fail@plt+0x9758>
   1b0d8:	ldr	r3, [r8]
   1b0dc:	cmp	r3, #0
   1b0e0:	beq	1b140 <__assert_fail@plt+0x97a0>
   1b0e4:	cmp	r3, #34	; 0x22
   1b0e8:	moveq	r4, #1
   1b0ec:	beq	1b144 <__assert_fail@plt+0x97a4>
   1b0f0:	mov	r4, #4
   1b0f4:	b	1b0a8 <__assert_fail@plt+0x9708>
   1b0f8:	ldr	r3, [sp, #48]	; 0x30
   1b0fc:	cmp	r3, #0
   1b100:	moveq	r4, #4
   1b104:	beq	1b0a8 <__assert_fail@plt+0x9708>
   1b108:	ldrb	r1, [r7]
   1b10c:	cmp	r1, #0
   1b110:	moveq	r4, #4
   1b114:	beq	1b0a8 <__assert_fail@plt+0x9708>
   1b118:	mov	r0, r3
   1b11c:	bl	117b4 <strchr@plt>
   1b120:	cmp	r0, #0
   1b124:	moveq	r4, #4
   1b128:	beq	1b0a8 <__assert_fail@plt+0x9708>
   1b12c:	mov	r2, #1
   1b130:	mov	r3, #0
   1b134:	strd	r2, [sp]
   1b138:	mov	r4, #0
   1b13c:	b	1b150 <__assert_fail@plt+0x97b0>
   1b140:	mov	r4, #0
   1b144:	ldr	r3, [sp, #48]	; 0x30
   1b148:	cmp	r3, #0
   1b14c:	beq	1b240 <__assert_fail@plt+0x98a0>
   1b150:	ldrb	r5, [r7]
   1b154:	cmp	r5, #0
   1b158:	beq	1b468 <__assert_fail@plt+0x9ac8>
   1b15c:	mov	r1, r5
   1b160:	ldr	r0, [sp, #48]	; 0x30
   1b164:	bl	117b4 <strchr@plt>
   1b168:	cmp	r0, #0
   1b16c:	beq	1b248 <__assert_fail@plt+0x98a8>
   1b170:	sub	r3, r5, #69	; 0x45
   1b174:	cmp	r3, #47	; 0x2f
   1b178:	ldrls	pc, [pc, r3, lsl #2]
   1b17c:	b	1b2b4 <__assert_fail@plt+0x9914>
   1b180:	andeq	fp, r1, r8, asr r2
   1b184:			; <UNDEFINED> instruction: 0x0001b2b4
   1b188:	andeq	fp, r1, r8, asr r2
   1b18c:			; <UNDEFINED> instruction: 0x0001b2b4
   1b190:			; <UNDEFINED> instruction: 0x0001b2b4
   1b194:			; <UNDEFINED> instruction: 0x0001b2b4
   1b198:	andeq	fp, r1, r8, asr r2
   1b19c:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1a0:	andeq	fp, r1, r8, asr r2
   1b1a4:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1a8:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1ac:	andeq	fp, r1, r8, asr r2
   1b1b0:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1b4:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1b8:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1bc:	andeq	fp, r1, r8, asr r2
   1b1c0:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1c4:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1c8:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1cc:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1d0:	andeq	fp, r1, r8, asr r2
   1b1d4:	andeq	fp, r1, r8, asr r2
   1b1d8:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1dc:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1e0:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1e4:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1e8:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1ec:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1f0:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1f4:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1f8:			; <UNDEFINED> instruction: 0x0001b2b4
   1b1fc:			; <UNDEFINED> instruction: 0x0001b2b4
   1b200:			; <UNDEFINED> instruction: 0x0001b2b4
   1b204:			; <UNDEFINED> instruction: 0x0001b2b4
   1b208:	andeq	fp, r1, r8, asr r2
   1b20c:			; <UNDEFINED> instruction: 0x0001b2b4
   1b210:			; <UNDEFINED> instruction: 0x0001b2b4
   1b214:			; <UNDEFINED> instruction: 0x0001b2b4
   1b218:	andeq	fp, r1, r8, asr r2
   1b21c:			; <UNDEFINED> instruction: 0x0001b2b4
   1b220:	andeq	fp, r1, r8, asr r2
   1b224:			; <UNDEFINED> instruction: 0x0001b2b4
   1b228:			; <UNDEFINED> instruction: 0x0001b2b4
   1b22c:			; <UNDEFINED> instruction: 0x0001b2b4
   1b230:			; <UNDEFINED> instruction: 0x0001b2b4
   1b234:			; <UNDEFINED> instruction: 0x0001b2b4
   1b238:			; <UNDEFINED> instruction: 0x0001b2b4
   1b23c:	andeq	fp, r1, r8, asr r2
   1b240:	strd	r0, [r9]
   1b244:	b	1b0a8 <__assert_fail@plt+0x9708>
   1b248:	ldrd	r2, [sp]
   1b24c:	strd	r2, [r9]
   1b250:	orr	r4, r4, #2
   1b254:	b	1b0a8 <__assert_fail@plt+0x9708>
   1b258:	mov	r1, #48	; 0x30
   1b25c:	ldr	r0, [sp, #48]	; 0x30
   1b260:	bl	117b4 <strchr@plt>
   1b264:	cmp	r0, #0
   1b268:	beq	1b3a4 <__assert_fail@plt+0x9a04>
   1b26c:	ldrb	r3, [r7, #1]
   1b270:	cmp	r3, #68	; 0x44
   1b274:	beq	1b290 <__assert_fail@plt+0x98f0>
   1b278:	cmp	r3, #105	; 0x69
   1b27c:	beq	1b29c <__assert_fail@plt+0x98fc>
   1b280:	cmp	r3, #66	; 0x42
   1b284:	movne	r7, #1
   1b288:	movne	r1, #1024	; 0x400
   1b28c:	bne	1b2bc <__assert_fail@plt+0x991c>
   1b290:	mov	r7, #2
   1b294:	mov	r1, #1000	; 0x3e8
   1b298:	b	1b2bc <__assert_fail@plt+0x991c>
   1b29c:	ldrb	r7, [r7, #2]
   1b2a0:	cmp	r7, #66	; 0x42
   1b2a4:	movne	r7, #1
   1b2a8:	moveq	r7, #3
   1b2ac:	mov	r1, #1024	; 0x400
   1b2b0:	b	1b2bc <__assert_fail@plt+0x991c>
   1b2b4:	mov	r7, #1
   1b2b8:	mov	r1, #1024	; 0x400
   1b2bc:	sub	r5, r5, #66	; 0x42
   1b2c0:	cmp	r5, #53	; 0x35
   1b2c4:	ldrls	pc, [pc, r5, lsl #2]
   1b2c8:	b	1b51c <__assert_fail@plt+0x9b7c>
   1b2cc:	strdeq	fp, [r1], -r8
   1b2d0:	andeq	fp, r1, ip, lsl r5
   1b2d4:	andeq	fp, r1, ip, lsl r5
   1b2d8:	andeq	fp, r1, r0, asr #8
   1b2dc:	andeq	fp, r1, ip, lsl r5
   1b2e0:	andeq	fp, r1, r4, ror r4
   1b2e4:	andeq	fp, r1, ip, lsl r5
   1b2e8:	andeq	fp, r1, ip, lsl r5
   1b2ec:	andeq	fp, r1, ip, lsl r5
   1b2f0:	andeq	fp, r1, r4, lsl #9
   1b2f4:	andeq	fp, r1, ip, lsl r5
   1b2f8:	muleq	r1, r4, r4
   1b2fc:	andeq	fp, r1, ip, lsl r5
   1b300:	andeq	fp, r1, ip, lsl r5
   1b304:	andeq	fp, r1, r4, lsr #9
   1b308:	andeq	fp, r1, ip, lsl r5
   1b30c:	andeq	fp, r1, ip, lsl r5
   1b310:	andeq	fp, r1, ip, lsl r5
   1b314:			; <UNDEFINED> instruction: 0x0001b4b4
   1b318:	andeq	fp, r1, ip, lsl r5
   1b31c:	andeq	fp, r1, ip, lsl r5
   1b320:	andeq	fp, r1, ip, lsl r5
   1b324:	andeq	fp, r1, ip, lsl r5
   1b328:	strdeq	fp, [r1], -ip
   1b32c:	andeq	fp, r1, ip, lsl #10
   1b330:	andeq	fp, r1, ip, lsl r5
   1b334:	andeq	fp, r1, ip, lsl r5
   1b338:	andeq	fp, r1, ip, lsl r5
   1b33c:	andeq	fp, r1, ip, lsl r5
   1b340:	andeq	fp, r1, ip, lsl r5
   1b344:	andeq	fp, r1, ip, lsl r5
   1b348:	andeq	fp, r1, ip, lsl r5
   1b34c:			; <UNDEFINED> instruction: 0x0001b3b0
   1b350:	andeq	fp, r1, ip, lsr #10
   1b354:	andeq	fp, r1, ip, lsl r5
   1b358:	andeq	fp, r1, ip, lsl r5
   1b35c:	andeq	fp, r1, ip, lsl r5
   1b360:	andeq	fp, r1, r4, ror r4
   1b364:	andeq	fp, r1, ip, lsl r5
   1b368:	andeq	fp, r1, ip, lsl r5
   1b36c:	andeq	fp, r1, ip, lsl r5
   1b370:	andeq	fp, r1, r4, lsl #9
   1b374:	andeq	fp, r1, ip, lsl r5
   1b378:	muleq	r1, r4, r4
   1b37c:	andeq	fp, r1, ip, lsl r5
   1b380:	andeq	fp, r1, ip, lsl r5
   1b384:	andeq	fp, r1, ip, lsl r5
   1b388:	andeq	fp, r1, ip, lsl r5
   1b38c:	andeq	fp, r1, ip, lsl r5
   1b390:	andeq	fp, r1, ip, lsl r5
   1b394:			; <UNDEFINED> instruction: 0x0001b4b4
   1b398:	andeq	fp, r1, ip, lsl r5
   1b39c:	andeq	fp, r1, ip, lsl r5
   1b3a0:	andeq	fp, r1, r4, asr #9
   1b3a4:	mov	r7, #1
   1b3a8:	mov	r1, #1024	; 0x400
   1b3ac:	b	1b2bc <__assert_fail@plt+0x991c>
   1b3b0:	ldrd	r2, [sp]
   1b3b4:	mvn	r0, #0
   1b3b8:	ldr	r1, [pc, #384]	; 1b540 <__assert_fail@plt+0x9ba0>
   1b3bc:	cmp	r3, r1
   1b3c0:	cmpeq	r2, r0
   1b3c4:	bhi	1b3e4 <__assert_fail@plt+0x9a44>
   1b3c8:	lsl	r3, r3, #9
   1b3cc:	orr	r3, r3, r2, lsr #23
   1b3d0:	lsl	r2, r2, #9
   1b3d4:	str	r2, [sp]
   1b3d8:	str	r3, [sp, #4]
   1b3dc:	mov	r0, #0
   1b3e0:	b	1b44c <__assert_fail@plt+0x9aac>
   1b3e4:	mvn	r2, #0
   1b3e8:	mvn	r3, #0
   1b3ec:	strd	r2, [sp]
   1b3f0:	mov	r0, #1
   1b3f4:	b	1b44c <__assert_fail@plt+0x9aac>
   1b3f8:	ldrd	r2, [sp]
   1b3fc:	mvn	r0, #0
   1b400:	ldr	r1, [pc, #316]	; 1b544 <__assert_fail@plt+0x9ba4>
   1b404:	cmp	r3, r1
   1b408:	cmpeq	r2, r0
   1b40c:	bhi	1b42c <__assert_fail@plt+0x9a8c>
   1b410:	lsl	r3, r3, #10
   1b414:	orr	r3, r3, r2, lsr #22
   1b418:	lsl	r2, r2, #10
   1b41c:	str	r2, [sp]
   1b420:	str	r3, [sp, #4]
   1b424:	mov	r0, #0
   1b428:	b	1b44c <__assert_fail@plt+0x9aac>
   1b42c:	mvn	r2, #0
   1b430:	mvn	r3, #0
   1b434:	strd	r2, [sp]
   1b438:	mov	r0, #1
   1b43c:	b	1b44c <__assert_fail@plt+0x9aac>
   1b440:	mov	r2, #6
   1b444:	mov	r0, sp
   1b448:	bl	1af88 <__assert_fail@plt+0x95e8>
   1b44c:	orr	r4, r4, r0
   1b450:	ldr	r3, [r6]
   1b454:	add	r2, r3, r7
   1b458:	str	r2, [r6]
   1b45c:	ldrb	r3, [r3, r7]
   1b460:	cmp	r3, #0
   1b464:	orrne	r4, r4, #2
   1b468:	ldrd	r2, [sp]
   1b46c:	strd	r2, [r9]
   1b470:	b	1b0a8 <__assert_fail@plt+0x9708>
   1b474:	mov	r2, #3
   1b478:	mov	r0, sp
   1b47c:	bl	1af88 <__assert_fail@plt+0x95e8>
   1b480:	b	1b44c <__assert_fail@plt+0x9aac>
   1b484:	mov	r2, #1
   1b488:	mov	r0, sp
   1b48c:	bl	1af88 <__assert_fail@plt+0x95e8>
   1b490:	b	1b44c <__assert_fail@plt+0x9aac>
   1b494:	mov	r2, #2
   1b498:	mov	r0, sp
   1b49c:	bl	1af88 <__assert_fail@plt+0x95e8>
   1b4a0:	b	1b44c <__assert_fail@plt+0x9aac>
   1b4a4:	mov	r2, #5
   1b4a8:	mov	r0, sp
   1b4ac:	bl	1af88 <__assert_fail@plt+0x95e8>
   1b4b0:	b	1b44c <__assert_fail@plt+0x9aac>
   1b4b4:	mov	r2, #4
   1b4b8:	mov	r0, sp
   1b4bc:	bl	1af88 <__assert_fail@plt+0x95e8>
   1b4c0:	b	1b44c <__assert_fail@plt+0x9aac>
   1b4c4:	ldrd	r2, [sp]
   1b4c8:	cmp	r2, #0
   1b4cc:	sbcs	r1, r3, #0
   1b4d0:	blt	1b4e8 <__assert_fail@plt+0x9b48>
   1b4d4:	adds	r2, r2, r2
   1b4d8:	adc	r3, r3, r3
   1b4dc:	strd	r2, [sp]
   1b4e0:	mov	r0, #0
   1b4e4:	b	1b44c <__assert_fail@plt+0x9aac>
   1b4e8:	mvn	r2, #0
   1b4ec:	mvn	r3, #0
   1b4f0:	strd	r2, [sp]
   1b4f4:	mov	r0, #1
   1b4f8:	b	1b44c <__assert_fail@plt+0x9aac>
   1b4fc:	mov	r2, #8
   1b500:	mov	r0, sp
   1b504:	bl	1af88 <__assert_fail@plt+0x95e8>
   1b508:	b	1b44c <__assert_fail@plt+0x9aac>
   1b50c:	mov	r2, #7
   1b510:	mov	r0, sp
   1b514:	bl	1af88 <__assert_fail@plt+0x95e8>
   1b518:	b	1b44c <__assert_fail@plt+0x9aac>
   1b51c:	ldrd	r2, [sp]
   1b520:	strd	r2, [r9]
   1b524:	orr	r4, r4, #2
   1b528:	b	1b0a8 <__assert_fail@plt+0x9708>
   1b52c:	mov	r0, #0
   1b530:	b	1b44c <__assert_fail@plt+0x9aac>
   1b534:	andeq	ip, r2, r4, asr sl
   1b538:	andeq	ip, r2, r0, ror #20
   1b53c:	andeq	ip, r2, ip, ror #20
   1b540:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1b544:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1b548:	push	{r4, lr}
   1b54c:	mov	r2, r0
   1b550:	mov	r3, r1
   1b554:	cmp	r1, #0
   1b558:	cmpne	r0, #0
   1b55c:	moveq	r3, #1
   1b560:	moveq	r2, r3
   1b564:	umull	r0, r1, r2, r3
   1b568:	cmp	r0, #0
   1b56c:	cmpge	r1, #0
   1b570:	bne	1b584 <__assert_fail@plt+0x9be4>
   1b574:	mov	r1, r3
   1b578:	mov	r0, r2
   1b57c:	bl	11508 <calloc@plt>
   1b580:	pop	{r4, pc}
   1b584:	bl	117d8 <__errno_location@plt>
   1b588:	mov	r3, #12
   1b58c:	str	r3, [r0]
   1b590:	mov	r0, #0
   1b594:	pop	{r4, pc}
   1b598:	push	{r1, r2, r3}
   1b59c:	push	{r4, r5, r6, lr}
   1b5a0:	sub	sp, sp, #12
   1b5a4:	mov	r5, r0
   1b5a8:	ldr	r1, [sp, #28]
   1b5ac:	add	r3, sp, #32
   1b5b0:	str	r3, [sp, #4]
   1b5b4:	cmp	r1, #0
   1b5b8:	beq	1b600 <__assert_fail@plt+0x9c60>
   1b5bc:	ldr	r3, [pc, #540]	; 1b7e0 <__assert_fail@plt+0x9e40>
   1b5c0:	cmp	r1, r3
   1b5c4:	beq	1b630 <__assert_fail@plt+0x9c90>
   1b5c8:	cmp	r1, #11
   1b5cc:	beq	1b7d0 <__assert_fail@plt+0x9e30>
   1b5d0:	bgt	1b75c <__assert_fail@plt+0x9dbc>
   1b5d4:	cmp	r1, #3
   1b5d8:	beq	1b7d0 <__assert_fail@plt+0x9e30>
   1b5dc:	ble	1b71c <__assert_fail@plt+0x9d7c>
   1b5e0:	cmp	r1, #8
   1b5e4:	beq	1b73c <__assert_fail@plt+0x9d9c>
   1b5e8:	ble	1b734 <__assert_fail@plt+0x9d94>
   1b5ec:	cmp	r1, #9
   1b5f0:	beq	1b7d0 <__assert_fail@plt+0x9e30>
   1b5f4:	cmp	r1, #10
   1b5f8:	bne	1b794 <__assert_fail@plt+0x9df4>
   1b5fc:	b	1b73c <__assert_fail@plt+0x9d9c>
   1b600:	ldr	r3, [sp, #4]
   1b604:	add	r2, r3, #4
   1b608:	str	r2, [sp, #4]
   1b60c:	ldr	r2, [r3]
   1b610:	mov	r1, #0
   1b614:	bl	1188c <fcntl64@plt>
   1b618:	mov	r4, r0
   1b61c:	mov	r0, r4
   1b620:	add	sp, sp, #12
   1b624:	pop	{r4, r5, r6, lr}
   1b628:	add	sp, sp, #12
   1b62c:	bx	lr
   1b630:	ldr	r3, [sp, #4]
   1b634:	add	r2, r3, #4
   1b638:	str	r2, [sp, #4]
   1b63c:	ldr	r6, [r3]
   1b640:	ldr	r3, [pc, #412]	; 1b7e4 <__assert_fail@plt+0x9e44>
   1b644:	ldr	r3, [r3]
   1b648:	cmp	r3, #0
   1b64c:	blt	1b6ac <__assert_fail@plt+0x9d0c>
   1b650:	mov	r2, r6
   1b654:	ldr	r1, [pc, #388]	; 1b7e0 <__assert_fail@plt+0x9e40>
   1b658:	bl	1188c <fcntl64@plt>
   1b65c:	subs	r4, r0, #0
   1b660:	blt	1b674 <__assert_fail@plt+0x9cd4>
   1b664:	mov	r2, #1
   1b668:	ldr	r3, [pc, #372]	; 1b7e4 <__assert_fail@plt+0x9e44>
   1b66c:	str	r2, [r3]
   1b670:	b	1b61c <__assert_fail@plt+0x9c7c>
   1b674:	bl	117d8 <__errno_location@plt>
   1b678:	ldr	r3, [r0]
   1b67c:	cmp	r3, #22
   1b680:	bne	1b664 <__assert_fail@plt+0x9cc4>
   1b684:	mov	r2, r6
   1b688:	mov	r1, #0
   1b68c:	mov	r0, r5
   1b690:	bl	1188c <fcntl64@plt>
   1b694:	subs	r4, r0, #0
   1b698:	blt	1b61c <__assert_fail@plt+0x9c7c>
   1b69c:	mvn	r2, #0
   1b6a0:	ldr	r3, [pc, #316]	; 1b7e4 <__assert_fail@plt+0x9e44>
   1b6a4:	str	r2, [r3]
   1b6a8:	b	1b6d0 <__assert_fail@plt+0x9d30>
   1b6ac:	mov	r2, r6
   1b6b0:	mov	r1, #0
   1b6b4:	bl	1188c <fcntl64@plt>
   1b6b8:	subs	r4, r0, #0
   1b6bc:	blt	1b61c <__assert_fail@plt+0x9c7c>
   1b6c0:	ldr	r3, [pc, #284]	; 1b7e4 <__assert_fail@plt+0x9e44>
   1b6c4:	ldr	r3, [r3]
   1b6c8:	cmn	r3, #1
   1b6cc:	bne	1b61c <__assert_fail@plt+0x9c7c>
   1b6d0:	mov	r1, #1
   1b6d4:	mov	r0, r4
   1b6d8:	bl	1188c <fcntl64@plt>
   1b6dc:	subs	r2, r0, #0
   1b6e0:	blt	1b6fc <__assert_fail@plt+0x9d5c>
   1b6e4:	orr	r2, r2, #1
   1b6e8:	mov	r1, #2
   1b6ec:	mov	r0, r4
   1b6f0:	bl	1188c <fcntl64@plt>
   1b6f4:	cmn	r0, #1
   1b6f8:	bne	1b61c <__assert_fail@plt+0x9c7c>
   1b6fc:	bl	117d8 <__errno_location@plt>
   1b700:	mov	r5, r0
   1b704:	ldr	r6, [r0]
   1b708:	mov	r0, r4
   1b70c:	bl	1197c <close@plt>
   1b710:	str	r6, [r5]
   1b714:	mvn	r4, #0
   1b718:	b	1b61c <__assert_fail@plt+0x9c7c>
   1b71c:	cmp	r1, #1
   1b720:	beq	1b7d0 <__assert_fail@plt+0x9e30>
   1b724:	bgt	1b73c <__assert_fail@plt+0x9d9c>
   1b728:	cmp	r1, #0
   1b72c:	bne	1b794 <__assert_fail@plt+0x9df4>
   1b730:	b	1b73c <__assert_fail@plt+0x9d9c>
   1b734:	cmp	r1, #4
   1b738:	bne	1b794 <__assert_fail@plt+0x9df4>
   1b73c:	ldr	r3, [sp, #4]
   1b740:	add	r2, r3, #4
   1b744:	str	r2, [sp, #4]
   1b748:	ldr	r2, [r3]
   1b74c:	mov	r0, r5
   1b750:	bl	1188c <fcntl64@plt>
   1b754:	mov	r4, r0
   1b758:	b	1b61c <__assert_fail@plt+0x9c7c>
   1b75c:	ldr	r3, [pc, #132]	; 1b7e8 <__assert_fail@plt+0x9e48>
   1b760:	cmp	r1, r3
   1b764:	bgt	1b7b4 <__assert_fail@plt+0x9e14>
   1b768:	sub	r3, r3, #1
   1b76c:	cmp	r1, r3
   1b770:	bge	1b73c <__assert_fail@plt+0x9d9c>
   1b774:	sub	r3, r3, #5
   1b778:	cmp	r1, r3
   1b77c:	beq	1b7d0 <__assert_fail@plt+0x9e30>
   1b780:	add	r3, r3, #1
   1b784:	cmp	r1, r3
   1b788:	beq	1b73c <__assert_fail@plt+0x9d9c>
   1b78c:	cmp	r1, #1024	; 0x400
   1b790:	beq	1b73c <__assert_fail@plt+0x9d9c>
   1b794:	ldr	r3, [sp, #4]
   1b798:	add	r2, r3, #4
   1b79c:	str	r2, [sp, #4]
   1b7a0:	ldr	r2, [r3]
   1b7a4:	mov	r0, r5
   1b7a8:	bl	1188c <fcntl64@plt>
   1b7ac:	mov	r4, r0
   1b7b0:	b	1b61c <__assert_fail@plt+0x9c7c>
   1b7b4:	ldr	r3, [pc, #48]	; 1b7ec <__assert_fail@plt+0x9e4c>
   1b7b8:	cmp	r1, r3
   1b7bc:	beq	1b73c <__assert_fail@plt+0x9d9c>
   1b7c0:	blt	1b7d0 <__assert_fail@plt+0x9e30>
   1b7c4:	add	r3, r3, #1
   1b7c8:	cmp	r1, r3
   1b7cc:	bne	1b794 <__assert_fail@plt+0x9df4>
   1b7d0:	mov	r0, r5
   1b7d4:	bl	1188c <fcntl64@plt>
   1b7d8:	mov	r4, r0
   1b7dc:	b	1b61c <__assert_fail@plt+0x9c7c>
   1b7e0:	andeq	r0, r0, r6, lsl #8
   1b7e4:	ldrdeq	sp, [r3], -r4
   1b7e8:	andeq	r0, r0, r7, lsl #8
   1b7ec:	andeq	r0, r0, r9, lsl #8
   1b7f0:	push	{r4, lr}
   1b7f4:	sub	sp, sp, #8
   1b7f8:	subs	r4, r0, #0
   1b7fc:	beq	1b810 <__assert_fail@plt+0x9e70>
   1b800:	mov	r0, r4
   1b804:	bl	11730 <__freading@plt>
   1b808:	cmp	r0, #0
   1b80c:	bne	1b820 <__assert_fail@plt+0x9e80>
   1b810:	mov	r0, r4
   1b814:	bl	11568 <fflush@plt>
   1b818:	add	sp, sp, #8
   1b81c:	pop	{r4, pc}
   1b820:	ldr	r3, [r4]
   1b824:	tst	r3, #256	; 0x100
   1b828:	bne	1b838 <__assert_fail@plt+0x9e98>
   1b82c:	mov	r0, r4
   1b830:	bl	11568 <fflush@plt>
   1b834:	b	1b818 <__assert_fail@plt+0x9e78>
   1b838:	mov	r3, #1
   1b83c:	str	r3, [sp]
   1b840:	mov	r2, #0
   1b844:	mov	r3, #0
   1b848:	mov	r0, r4
   1b84c:	bl	1b8ac <__assert_fail@plt+0x9f0c>
   1b850:	b	1b82c <__assert_fail@plt+0x9e8c>
   1b854:	push	{r4, r5, lr}
   1b858:	sub	sp, sp, #12
   1b85c:	mov	r5, r0
   1b860:	bl	117d8 <__errno_location@plt>
   1b864:	mov	r4, r0
   1b868:	ldr	r3, [r0]
   1b86c:	str	r3, [sp]
   1b870:	str	r3, [sp, #4]
   1b874:	mov	r3, #0
   1b878:	str	r3, [r0]
   1b87c:	mov	r0, r5
   1b880:	bl	11598 <free@plt>
   1b884:	ldr	r3, [r4]
   1b888:	cmp	r3, #0
   1b88c:	moveq	r3, #4
   1b890:	movne	r3, #0
   1b894:	add	r2, sp, #8
   1b898:	add	r3, r2, r3
   1b89c:	ldr	r3, [r3, #-8]
   1b8a0:	str	r3, [r4]
   1b8a4:	add	sp, sp, #12
   1b8a8:	pop	{r4, r5, pc}
   1b8ac:	push	{r4, r5, r6, r7, lr}
   1b8b0:	sub	sp, sp, #12
   1b8b4:	mov	r4, r0
   1b8b8:	mov	r6, r2
   1b8bc:	mov	r7, r3
   1b8c0:	ldr	r5, [sp, #32]
   1b8c4:	ldr	r2, [r0, #8]
   1b8c8:	ldr	r3, [r0, #4]
   1b8cc:	cmp	r2, r3
   1b8d0:	beq	1b8f0 <__assert_fail@plt+0x9f50>
   1b8d4:	str	r5, [sp]
   1b8d8:	mov	r2, r6
   1b8dc:	mov	r3, r7
   1b8e0:	mov	r0, r4
   1b8e4:	bl	11880 <fseeko64@plt>
   1b8e8:	add	sp, sp, #12
   1b8ec:	pop	{r4, r5, r6, r7, pc}
   1b8f0:	ldr	r2, [r0, #20]
   1b8f4:	ldr	r3, [r0, #16]
   1b8f8:	cmp	r2, r3
   1b8fc:	bne	1b8d4 <__assert_fail@plt+0x9f34>
   1b900:	ldr	r3, [r0, #36]	; 0x24
   1b904:	cmp	r3, #0
   1b908:	bne	1b8d4 <__assert_fail@plt+0x9f34>
   1b90c:	bl	11844 <fileno@plt>
   1b910:	str	r5, [sp]
   1b914:	mov	r2, r6
   1b918:	mov	r3, r7
   1b91c:	bl	11694 <lseek64@plt>
   1b920:	mvn	r2, #0
   1b924:	mvn	r3, #0
   1b928:	cmp	r1, r3
   1b92c:	cmpeq	r0, r2
   1b930:	beq	1b94c <__assert_fail@plt+0x9fac>
   1b934:	ldr	r3, [r4]
   1b938:	bic	r3, r3, #16
   1b93c:	str	r3, [r4]
   1b940:	strd	r0, [r4, #80]	; 0x50
   1b944:	mov	r0, #0
   1b948:	b	1b8e8 <__assert_fail@plt+0x9f48>
   1b94c:	mvn	r0, #0
   1b950:	b	1b8e8 <__assert_fail@plt+0x9f48>
   1b954:	push	{r4, lr}
   1b958:	cmp	r0, #0
   1b95c:	moveq	r0, #1
   1b960:	cmp	r0, #0
   1b964:	blt	1b970 <__assert_fail@plt+0x9fd0>
   1b968:	bl	1170c <malloc@plt>
   1b96c:	pop	{r4, pc}
   1b970:	bl	117d8 <__errno_location@plt>
   1b974:	mov	r3, #12
   1b978:	str	r3, [r0]
   1b97c:	mov	r0, #0
   1b980:	pop	{r4, pc}
   1b984:	push	{r4, r5, r6, r7, lr}
   1b988:	sub	sp, sp, #12
   1b98c:	mov	r7, r1
   1b990:	mov	r5, r2
   1b994:	subs	r6, r0, #0
   1b998:	addeq	r6, sp, #4
   1b99c:	mov	r0, r6
   1b9a0:	bl	116c4 <mbrtowc@plt>
   1b9a4:	mov	r4, r0
   1b9a8:	cmp	r5, #0
   1b9ac:	cmnne	r0, #3
   1b9b0:	bhi	1b9c0 <__assert_fail@plt+0xa020>
   1b9b4:	mov	r0, r4
   1b9b8:	add	sp, sp, #12
   1b9bc:	pop	{r4, r5, r6, r7, pc}
   1b9c0:	mov	r0, #0
   1b9c4:	bl	2a6c4 <__assert_fail@plt+0x18d24>
   1b9c8:	cmp	r0, #0
   1b9cc:	ldrbeq	r3, [r7]
   1b9d0:	streq	r3, [r6]
   1b9d4:	moveq	r4, #1
   1b9d8:	b	1b9b4 <__assert_fail@plt+0xa014>
   1b9dc:	push	{r4, lr}
   1b9e0:	cmp	r0, #0
   1b9e4:	beq	1ba00 <__assert_fail@plt+0xa060>
   1b9e8:	cmp	r1, #0
   1b9ec:	beq	1ba0c <__assert_fail@plt+0xa06c>
   1b9f0:	cmp	r1, #0
   1b9f4:	blt	1ba18 <__assert_fail@plt+0xa078>
   1b9f8:	bl	11634 <realloc@plt>
   1b9fc:	pop	{r4, pc}
   1ba00:	mov	r0, r1
   1ba04:	bl	1b954 <__assert_fail@plt+0x9fb4>
   1ba08:	pop	{r4, pc}
   1ba0c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ba10:	mov	r0, #0
   1ba14:	pop	{r4, pc}
   1ba18:	bl	117d8 <__errno_location@plt>
   1ba1c:	mov	r3, #12
   1ba20:	str	r3, [r0]
   1ba24:	mov	r0, #0
   1ba28:	pop	{r4, pc}
   1ba2c:	push	{r4, r5, r6, lr}
   1ba30:	mov	r6, r0
   1ba34:	mov	r5, r1
   1ba38:	subs	r4, r2, #0
   1ba3c:	beq	1ba68 <__assert_fail@plt+0xa0c8>
   1ba40:	mov	r1, r4
   1ba44:	mvn	r0, #0
   1ba48:	bl	2a924 <__assert_fail@plt+0x18f84>
   1ba4c:	cmp	r0, r5
   1ba50:	bcs	1ba68 <__assert_fail@plt+0xa0c8>
   1ba54:	bl	117d8 <__errno_location@plt>
   1ba58:	mov	r3, #12
   1ba5c:	str	r3, [r0]
   1ba60:	mov	r0, #0
   1ba64:	pop	{r4, r5, r6, pc}
   1ba68:	mul	r1, r5, r4
   1ba6c:	mov	r0, r6
   1ba70:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1ba74:	pop	{r4, r5, r6, pc}
   1ba78:	ldr	r3, [r0, #80]	; 0x50
   1ba7c:	cmp	r3, #1
   1ba80:	beq	1bad4 <__assert_fail@plt+0xa134>
   1ba84:	add	ip, r1, #1
   1ba88:	ldr	r3, [r0, #28]
   1ba8c:	cmp	ip, r3
   1ba90:	bge	1badc <__assert_fail@plt+0xa13c>
   1ba94:	ldr	r0, [r0, #8]
   1ba98:	add	r2, r0, ip, lsl #2
   1ba9c:	ldr	r0, [r0, ip, lsl #2]
   1baa0:	cmn	r0, #1
   1baa4:	bne	1bae4 <__assert_fail@plt+0xa144>
   1baa8:	sub	r1, r3, r1
   1baac:	mov	r3, #2
   1bab0:	mov	r0, r3
   1bab4:	cmp	r3, r1
   1bab8:	beq	1bad0 <__assert_fail@plt+0xa130>
   1babc:	add	r3, r3, #1
   1bac0:	ldr	ip, [r2, #4]!
   1bac4:	cmn	ip, #1
   1bac8:	beq	1bab0 <__assert_fail@plt+0xa110>
   1bacc:	bx	lr
   1bad0:	bx	lr
   1bad4:	mov	r0, #1
   1bad8:	bx	lr
   1badc:	mov	r0, #1
   1bae0:	bx	lr
   1bae4:	mov	r0, #1
   1bae8:	bx	lr
   1baec:	ldr	r3, [r0, #80]	; 0x50
   1baf0:	cmp	r3, #1
   1baf4:	ldreq	r3, [r0, #4]
   1baf8:	ldrbeq	r0, [r3, r1]
   1bafc:	ldrne	r3, [r0, #8]
   1bb00:	ldrne	r0, [r3, r1, lsl #2]
   1bb04:	bx	lr
   1bb08:	ldr	ip, [r0, #36]	; 0x24
   1bb0c:	ldr	r3, [r0, #48]	; 0x30
   1bb10:	cmp	ip, r3
   1bb14:	movge	ip, r3
   1bb18:	ldr	r3, [r0, #28]
   1bb1c:	cmp	ip, r3
   1bb20:	ble	1bb50 <__assert_fail@plt+0xa1b0>
   1bb24:	ldr	r2, [r0]
   1bb28:	ldr	r1, [r0, #24]
   1bb2c:	add	r2, r2, r3
   1bb30:	ldrb	r2, [r2, r1]
   1bb34:	ldr	r1, [r0, #64]	; 0x40
   1bb38:	ldrb	r1, [r1, r2]
   1bb3c:	ldr	r2, [r0, #4]
   1bb40:	strb	r1, [r2, r3]
   1bb44:	add	r3, r3, #1
   1bb48:	cmp	ip, r3
   1bb4c:	bne	1bb24 <__assert_fail@plt+0xa184>
   1bb50:	str	r3, [r0, #28]
   1bb54:	str	r3, [r0, #32]
   1bb58:	bx	lr
   1bb5c:	push	{r4, r5, lr}
   1bb60:	mov	r4, r0
   1bb64:	cmp	r1, #0
   1bb68:	cmpne	r0, #0
   1bb6c:	moveq	r0, #1
   1bb70:	movne	r0, #0
   1bb74:	beq	1bbc8 <__assert_fail@plt+0xa228>
   1bb78:	mov	r5, r1
   1bb7c:	ldr	r2, [r4, #4]
   1bb80:	ldr	r3, [r1, #4]
   1bb84:	cmp	r2, r3
   1bb88:	subeq	r3, r2, #1
   1bb8c:	lsleq	r3, r3, #2
   1bb90:	beq	1bb98 <__assert_fail@plt+0xa1f8>
   1bb94:	pop	{r4, r5, pc}
   1bb98:	subs	r2, r2, #1
   1bb9c:	bmi	1bbc0 <__assert_fail@plt+0xa220>
   1bba0:	ldr	ip, [r4, #8]
   1bba4:	ldr	lr, [ip, r3]
   1bba8:	ldr	ip, [r5, #8]
   1bbac:	ldr	ip, [ip, r3]
   1bbb0:	sub	r3, r3, #4
   1bbb4:	cmp	lr, ip
   1bbb8:	beq	1bb98 <__assert_fail@plt+0xa1f8>
   1bbbc:	pop	{r4, r5, pc}
   1bbc0:	mov	r0, #1
   1bbc4:	pop	{r4, r5, pc}
   1bbc8:	mov	r0, #0
   1bbcc:	pop	{r4, r5, pc}
   1bbd0:	push	{r4, lr}
   1bbd4:	ldr	lr, [r0, #4]
   1bbd8:	cmp	lr, #0
   1bbdc:	ble	1bc60 <__assert_fail@plt+0xa2c0>
   1bbe0:	sub	lr, lr, #1
   1bbe4:	mov	ip, #0
   1bbe8:	cmp	ip, lr
   1bbec:	bcs	1bc40 <__assert_fail@plt+0xa2a0>
   1bbf0:	add	r2, ip, lr
   1bbf4:	lsr	r2, r2, #1
   1bbf8:	ldr	r4, [r0, #8]
   1bbfc:	ldr	r3, [r4, r2, lsl #2]
   1bc00:	cmp	r1, r3
   1bc04:	bgt	1bc2c <__assert_fail@plt+0xa28c>
   1bc08:	cmp	ip, r2
   1bc0c:	bcs	1bc40 <__assert_fail@plt+0xa2a0>
   1bc10:	add	r3, ip, r2
   1bc14:	lsr	r3, r3, #1
   1bc18:	ldr	lr, [r4, r3, lsl #2]
   1bc1c:	cmp	lr, r1
   1bc20:	blt	1bc34 <__assert_fail@plt+0xa294>
   1bc24:	mov	r2, r3
   1bc28:	b	1bc08 <__assert_fail@plt+0xa268>
   1bc2c:	mov	r3, r2
   1bc30:	mov	r2, lr
   1bc34:	add	ip, r3, #1
   1bc38:	mov	lr, r2
   1bc3c:	b	1bbe8 <__assert_fail@plt+0xa248>
   1bc40:	ldr	r3, [r0, #8]
   1bc44:	ldr	r3, [r3, ip, lsl #2]
   1bc48:	cmp	r1, r3
   1bc4c:	beq	1bc58 <__assert_fail@plt+0xa2b8>
   1bc50:	mov	r0, #0
   1bc54:	pop	{r4, pc}
   1bc58:	add	r0, ip, #1
   1bc5c:	pop	{r4, pc}
   1bc60:	mov	r0, #0
   1bc64:	pop	{r4, pc}
   1bc68:	cmp	r1, #0
   1bc6c:	bxlt	lr
   1bc70:	ldr	r3, [r0, #4]
   1bc74:	cmp	r1, r3
   1bc78:	bxge	lr
   1bc7c:	sub	r3, r3, #1
   1bc80:	str	r3, [r0, #4]
   1bc84:	cmp	r1, r3
   1bc88:	bxge	lr
   1bc8c:	push	{lr}		; (str lr, [sp, #-4]!)
   1bc90:	lsl	r3, r1, #2
   1bc94:	ldr	ip, [r0, #8]
   1bc98:	add	r2, r3, #4
   1bc9c:	ldr	lr, [ip, r2]
   1bca0:	str	lr, [ip, r3]
   1bca4:	add	r1, r1, #1
   1bca8:	mov	r3, r2
   1bcac:	ldr	r2, [r0, #4]
   1bcb0:	cmp	r2, r1
   1bcb4:	bgt	1bc94 <__assert_fail@plt+0xa2f4>
   1bcb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcbc:	ldrb	r3, [r1, #24]
   1bcc0:	cmp	r3, #4
   1bcc4:	beq	1bcd8 <__assert_fail@plt+0xa338>
   1bcc8:	cmp	r3, #17
   1bccc:	beq	1bd04 <__assert_fail@plt+0xa364>
   1bcd0:	mov	r0, #0
   1bcd4:	bx	lr
   1bcd8:	ldr	r3, [r0, #132]	; 0x84
   1bcdc:	cmp	r3, #0
   1bce0:	beq	1bcd0 <__assert_fail@plt+0xa330>
   1bce4:	ldr	r2, [r1, #20]
   1bce8:	ldr	r2, [r3, r2, lsl #2]
   1bcec:	str	r2, [r1, #20]
   1bcf0:	ldr	r3, [r0, #80]	; 0x50
   1bcf4:	mov	r1, #1
   1bcf8:	orr	r3, r3, r1, lsl r2
   1bcfc:	str	r3, [r0, #80]	; 0x50
   1bd00:	b	1bcd0 <__assert_fail@plt+0xa330>
   1bd04:	ldr	r3, [r1, #4]
   1bd08:	cmp	r3, #0
   1bd0c:	beq	1bcd0 <__assert_fail@plt+0xa330>
   1bd10:	ldrb	r2, [r3, #24]
   1bd14:	cmp	r2, #17
   1bd18:	bne	1bcd0 <__assert_fail@plt+0xa330>
   1bd1c:	ldr	r2, [r3, #20]
   1bd20:	ldr	r3, [r3, #4]
   1bd24:	str	r3, [r1, #4]
   1bd28:	cmp	r3, #0
   1bd2c:	strne	r1, [r3]
   1bd30:	ldr	r3, [r0, #132]	; 0x84
   1bd34:	ldr	r1, [r1, #20]
   1bd38:	ldr	r1, [r3, r1, lsl #2]
   1bd3c:	str	r1, [r3, r2, lsl #2]
   1bd40:	cmp	r2, #31
   1bd44:	ldrle	r3, [r0, #80]	; 0x50
   1bd48:	movle	r1, #1
   1bd4c:	bicle	r2, r3, r1, lsl r2
   1bd50:	strle	r2, [r0, #80]	; 0x50
   1bd54:	b	1bcd0 <__assert_fail@plt+0xa330>
   1bd58:	ldrb	r3, [r1, #24]
   1bd5c:	cmp	r3, #11
   1bd60:	beq	1bd90 <__assert_fail@plt+0xa3f0>
   1bd64:	cmp	r3, #16
   1bd68:	beq	1bda0 <__assert_fail@plt+0xa400>
   1bd6c:	ldr	r3, [r1, #4]
   1bd70:	cmp	r3, #0
   1bd74:	ldrne	r2, [r1, #16]
   1bd78:	strne	r2, [r3, #16]
   1bd7c:	ldr	r3, [r1, #8]
   1bd80:	cmp	r3, #0
   1bd84:	ldrne	r2, [r1, #16]
   1bd88:	strne	r2, [r3, #16]
   1bd8c:	b	1bd98 <__assert_fail@plt+0xa3f8>
   1bd90:	ldr	r3, [r1, #4]
   1bd94:	str	r1, [r3, #16]
   1bd98:	mov	r0, #0
   1bd9c:	bx	lr
   1bda0:	ldr	r3, [r1, #4]
   1bda4:	ldr	r2, [r1, #8]
   1bda8:	ldr	r2, [r2, #12]
   1bdac:	str	r2, [r3, #16]
   1bdb0:	ldr	r3, [r1, #8]
   1bdb4:	ldr	r2, [r1, #16]
   1bdb8:	str	r2, [r3, #16]
   1bdbc:	b	1bd98 <__assert_fail@plt+0xa3f8>
   1bdc0:	ldr	r3, [r1, #40]	; 0x28
   1bdc4:	ldr	ip, [r1, #56]	; 0x38
   1bdc8:	cmp	ip, r3
   1bdcc:	ble	1be44 <__assert_fail@plt+0xa4a4>
   1bdd0:	push	{lr}		; (str lr, [sp, #-4]!)
   1bdd4:	ldr	ip, [r1, #4]
   1bdd8:	ldrb	r3, [ip, r3]
   1bddc:	strb	r3, [r0]
   1bde0:	ldr	ip, [r1, #80]	; 0x50
   1bde4:	cmp	ip, #1
   1bde8:	ble	1be0c <__assert_fail@plt+0xa46c>
   1bdec:	ldr	ip, [r1, #40]	; 0x28
   1bdf0:	ldr	lr, [r1, #28]
   1bdf4:	cmp	ip, lr
   1bdf8:	beq	1be0c <__assert_fail@plt+0xa46c>
   1bdfc:	ldr	lr, [r1, #8]
   1be00:	ldr	ip, [lr, ip, lsl #2]
   1be04:	cmn	ip, #1
   1be08:	beq	1be54 <__assert_fail@plt+0xa4b4>
   1be0c:	cmp	r3, #92	; 0x5c
   1be10:	beq	1be64 <__assert_fail@plt+0xa4c4>
   1be14:	cmp	r3, #91	; 0x5b
   1be18:	beq	1beb0 <__assert_fail@plt+0xa510>
   1be1c:	cmp	r3, #93	; 0x5d
   1be20:	beq	1bf3c <__assert_fail@plt+0xa59c>
   1be24:	cmp	r3, #94	; 0x5e
   1be28:	beq	1bf4c <__assert_fail@plt+0xa5ac>
   1be2c:	cmp	r3, #45	; 0x2d
   1be30:	bne	1be80 <__assert_fail@plt+0xa4e0>
   1be34:	mov	r3, #22
   1be38:	strb	r3, [r0, #4]
   1be3c:	mov	r0, #1
   1be40:	pop	{pc}		; (ldr pc, [sp], #4)
   1be44:	mov	r3, #2
   1be48:	strb	r3, [r0, #4]
   1be4c:	mov	r0, #0
   1be50:	bx	lr
   1be54:	mov	r3, #1
   1be58:	strb	r3, [r0, #4]
   1be5c:	mov	r0, r3
   1be60:	pop	{pc}		; (ldr pc, [sp], #4)
   1be64:	tst	r2, #1
   1be68:	beq	1be80 <__assert_fail@plt+0xa4e0>
   1be6c:	ldr	r3, [r1, #40]	; 0x28
   1be70:	add	r3, r3, #1
   1be74:	ldr	r2, [r1, #48]	; 0x30
   1be78:	cmp	r3, r2
   1be7c:	blt	1be90 <__assert_fail@plt+0xa4f0>
   1be80:	mov	r3, #1
   1be84:	strb	r3, [r0, #4]
   1be88:	mov	r0, r3
   1be8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be90:	str	r3, [r1, #40]	; 0x28
   1be94:	ldr	r2, [r1, #4]
   1be98:	ldrb	r3, [r2, r3]
   1be9c:	strb	r3, [r0]
   1bea0:	mov	r3, #1
   1bea4:	strb	r3, [r0, #4]
   1bea8:	mov	r0, r3
   1beac:	pop	{pc}		; (ldr pc, [sp], #4)
   1beb0:	ldr	r3, [r1, #40]	; 0x28
   1beb4:	add	lr, r3, #1
   1beb8:	ldr	ip, [r1, #48]	; 0x30
   1bebc:	cmp	lr, ip
   1bec0:	bge	1bf24 <__assert_fail@plt+0xa584>
   1bec4:	ldr	r1, [r1, #4]
   1bec8:	add	r3, r1, r3
   1becc:	ldrb	r3, [r3, #1]
   1bed0:	strb	r3, [r0]
   1bed4:	cmp	r3, #58	; 0x3a
   1bed8:	beq	1bf0c <__assert_fail@plt+0xa56c>
   1bedc:	cmp	r3, #61	; 0x3d
   1bee0:	beq	1befc <__assert_fail@plt+0xa55c>
   1bee4:	cmp	r3, #46	; 0x2e
   1bee8:	bne	1bf24 <__assert_fail@plt+0xa584>
   1beec:	mov	r3, #26
   1bef0:	strb	r3, [r0, #4]
   1bef4:	mov	r0, #2
   1bef8:	pop	{pc}		; (ldr pc, [sp], #4)
   1befc:	mov	r3, #28
   1bf00:	strb	r3, [r0, #4]
   1bf04:	mov	r0, #2
   1bf08:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf0c:	tst	r2, #4
   1bf10:	beq	1bf24 <__assert_fail@plt+0xa584>
   1bf14:	mov	r3, #30
   1bf18:	strb	r3, [r0, #4]
   1bf1c:	mov	r0, #2
   1bf20:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf24:	mov	r3, #1
   1bf28:	strb	r3, [r0, #4]
   1bf2c:	mov	r2, #91	; 0x5b
   1bf30:	strb	r2, [r0]
   1bf34:	mov	r0, r3
   1bf38:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf3c:	mov	r3, #21
   1bf40:	strb	r3, [r0, #4]
   1bf44:	mov	r0, #1
   1bf48:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf4c:	mov	r3, #25
   1bf50:	strb	r3, [r0, #4]
   1bf54:	mov	r0, #1
   1bf58:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf5c:	ldrb	r3, [r1, #24]
   1bf60:	cmp	r3, #17
   1bf64:	beq	1bf70 <__assert_fail@plt+0xa5d0>
   1bf68:	mov	r0, #0
   1bf6c:	bx	lr
   1bf70:	ldr	r3, [r1, #20]
   1bf74:	cmp	r0, r3
   1bf78:	ldrbeq	r3, [r1, #26]
   1bf7c:	orreq	r3, r3, #8
   1bf80:	strbeq	r3, [r1, #26]
   1bf84:	b	1bf68 <__assert_fail@plt+0xa5c8>
   1bf88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf8c:	sub	sp, sp, #52	; 0x34
   1bf90:	str	r0, [sp, #8]
   1bf94:	str	r1, [sp, #12]
   1bf98:	mov	r7, r2
   1bf9c:	str	r3, [sp, #40]	; 0x28
   1bfa0:	ldr	r9, [r0, #84]	; 0x54
   1bfa4:	add	r3, r3, r3, lsl #1
   1bfa8:	ldr	sl, [r9, #24]
   1bfac:	add	sl, sl, r3, lsl #2
   1bfb0:	ldr	r3, [sl, #4]
   1bfb4:	cmp	r3, #0
   1bfb8:	ble	1c164 <__assert_fail@plt+0xa7c4>
   1bfbc:	ldr	r3, [sp, #88]	; 0x58
   1bfc0:	add	r3, r3, r3, lsl #1
   1bfc4:	lsl	r3, r3, #3
   1bfc8:	mov	r2, #1
   1bfcc:	lsl	r2, r2, r7
   1bfd0:	str	r2, [sp, #20]
   1bfd4:	mvn	r2, r2
   1bfd8:	str	r2, [sp, #24]
   1bfdc:	mov	r8, #0
   1bfe0:	mov	r2, r1
   1bfe4:	and	r1, r1, #1
   1bfe8:	str	r1, [sp, #28]
   1bfec:	and	r2, r2, #2
   1bff0:	str	r2, [sp, #16]
   1bff4:	add	r3, r3, #24
   1bff8:	str	r3, [sp, #44]	; 0x2c
   1bffc:	b	1c0e0 <__assert_fail@plt+0xa740>
   1c000:	ldr	r3, [r9, #20]
   1c004:	add	r3, r3, fp
   1c008:	ldr	r3, [r3, #8]
   1c00c:	ldr	r3, [r3]
   1c010:	cmp	sl, r3
   1c014:	beq	1c098 <__assert_fail@plt+0xa6f8>
   1c018:	str	r8, [sp]
   1c01c:	mov	r2, r7
   1c020:	ldr	r1, [sp, #12]
   1c024:	ldr	r0, [sp, #8]
   1c028:	bl	1bf88 <__assert_fail@plt+0xa5e8>
   1c02c:	cmn	r0, #1
   1c030:	beq	1c0a4 <__assert_fail@plt+0xa704>
   1c034:	cmp	r0, #0
   1c038:	bne	1c048 <__assert_fail@plt+0xa6a8>
   1c03c:	ldr	r3, [sp, #16]
   1c040:	cmp	r3, #0
   1c044:	bne	1c0a4 <__assert_fail@plt+0xa704>
   1c048:	cmp	r7, #31
   1c04c:	ldrle	r3, [r6, #-8]
   1c050:	ldrle	r2, [sp, #24]
   1c054:	andle	r3, r3, r2
   1c058:	strle	r3, [r6, #-8]
   1c05c:	add	r4, r4, #24
   1c060:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1c064:	cmp	r3, #0
   1c068:	beq	1c0ac <__assert_fail@plt+0xa70c>
   1c06c:	mov	r6, r4
   1c070:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1c074:	cmp	r5, r3
   1c078:	bne	1c05c <__assert_fail@plt+0xa6bc>
   1c07c:	cmp	r7, #31
   1c080:	bgt	1c000 <__assert_fail@plt+0xa660>
   1c084:	ldr	r3, [r4, #-8]
   1c088:	ldr	r2, [sp, #20]
   1c08c:	tst	r2, r3
   1c090:	beq	1c05c <__assert_fail@plt+0xa6bc>
   1c094:	b	1c000 <__assert_fail@plt+0xa660>
   1c098:	ldr	r3, [sp, #12]
   1c09c:	ands	r0, r3, #1
   1c0a0:	mvnne	r0, #0
   1c0a4:	add	sp, sp, #52	; 0x34
   1c0a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0ac:	ldr	sl, [sp, #32]
   1c0b0:	ldr	r8, [sp, #36]	; 0x24
   1c0b4:	b	1c0d0 <__assert_fail@plt+0xa730>
   1c0b8:	ldr	r3, [sp, #28]
   1c0bc:	cmp	r3, #0
   1c0c0:	beq	1c0d0 <__assert_fail@plt+0xa730>
   1c0c4:	ldr	r3, [r2, r5, lsl #3]
   1c0c8:	cmp	r3, r7
   1c0cc:	beq	1c174 <__assert_fail@plt+0xa7d4>
   1c0d0:	add	r8, r8, #1
   1c0d4:	ldr	r3, [sl, #4]
   1c0d8:	cmp	r3, r8
   1c0dc:	ble	1c164 <__assert_fail@plt+0xa7c4>
   1c0e0:	ldr	r3, [sl, #8]
   1c0e4:	ldr	r5, [r3, r8, lsl #2]
   1c0e8:	ldr	r2, [r9]
   1c0ec:	add	r3, r2, r5, lsl #3
   1c0f0:	ldrb	r3, [r3, #4]
   1c0f4:	cmp	r3, #8
   1c0f8:	beq	1c0b8 <__assert_fail@plt+0xa718>
   1c0fc:	cmp	r3, #9
   1c100:	beq	1c144 <__assert_fail@plt+0xa7a4>
   1c104:	cmp	r3, #4
   1c108:	bne	1c0d0 <__assert_fail@plt+0xa730>
   1c10c:	ldr	r3, [sp, #88]	; 0x58
   1c110:	cmn	r3, #1
   1c114:	beq	1c0d0 <__assert_fail@plt+0xa730>
   1c118:	add	fp, r5, r5, lsl #1
   1c11c:	lsl	fp, fp, #2
   1c120:	ldr	r3, [sp, #8]
   1c124:	ldr	r4, [r3, #116]	; 0x74
   1c128:	ldr	r3, [sp, #44]	; 0x2c
   1c12c:	add	r4, r4, r3
   1c130:	str	sl, [sp, #32]
   1c134:	str	r8, [sp, #36]	; 0x24
   1c138:	ldr	sl, [sp, #40]	; 0x28
   1c13c:	ldr	r8, [sp, #88]	; 0x58
   1c140:	b	1c06c <__assert_fail@plt+0xa6cc>
   1c144:	ldr	r3, [sp, #16]
   1c148:	cmp	r3, #0
   1c14c:	beq	1c0d0 <__assert_fail@plt+0xa730>
   1c150:	ldr	r3, [r2, r5, lsl #3]
   1c154:	cmp	r7, r3
   1c158:	bne	1c0d0 <__assert_fail@plt+0xa730>
   1c15c:	mov	r0, #0
   1c160:	b	1c0a4 <__assert_fail@plt+0xa704>
   1c164:	ldr	r3, [sp, #12]
   1c168:	lsr	r0, r3, #1
   1c16c:	and	r0, r0, #1
   1c170:	b	1c0a4 <__assert_fail@plt+0xa704>
   1c174:	mvn	r0, #0
   1c178:	b	1c0a4 <__assert_fail@plt+0xa704>
   1c17c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c180:	sub	sp, sp, #12
   1c184:	ldr	lr, [sp, #16]
   1c188:	add	r1, r1, r1, lsl #1
   1c18c:	ldr	ip, [r0, #116]	; 0x74
   1c190:	add	r1, ip, r1, lsl #3
   1c194:	ldr	ip, [r1, #8]
   1c198:	cmp	ip, lr
   1c19c:	bgt	1c1ec <__assert_fail@plt+0xa84c>
   1c1a0:	ldr	r1, [r1, #12]
   1c1a4:	cmp	lr, r1
   1c1a8:	movgt	r1, #1
   1c1ac:	bgt	1c1cc <__assert_fail@plt+0xa82c>
   1c1b0:	cmp	lr, r1
   1c1b4:	moveq	r1, #2
   1c1b8:	movne	r1, #0
   1c1bc:	cmp	ip, lr
   1c1c0:	orreq	r1, r1, #1
   1c1c4:	cmp	r1, #0
   1c1c8:	bne	1c1d8 <__assert_fail@plt+0xa838>
   1c1cc:	mov	r0, r1
   1c1d0:	add	sp, sp, #12
   1c1d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1d8:	ldr	ip, [sp, #20]
   1c1dc:	str	ip, [sp]
   1c1e0:	bl	1bf88 <__assert_fail@plt+0xa5e8>
   1c1e4:	mov	r1, r0
   1c1e8:	b	1c1cc <__assert_fail@plt+0xa82c>
   1c1ec:	mvn	r1, #0
   1c1f0:	b	1c1cc <__assert_fail@plt+0xa82c>
   1c1f4:	push	{r4, r5, lr}
   1c1f8:	mov	r4, r0
   1c1fc:	ldr	r5, [r0, #108]	; 0x6c
   1c200:	mov	r2, r5
   1c204:	mov	r0, #0
   1c208:	cmp	r0, r2
   1c20c:	bge	1c278 <__assert_fail@plt+0xa8d8>
   1c210:	add	ip, r0, r2
   1c214:	add	ip, ip, ip, lsr #31
   1c218:	asr	ip, ip, #1
   1c21c:	ldr	lr, [r4, #116]	; 0x74
   1c220:	add	r3, ip, ip, lsl #1
   1c224:	add	r3, lr, r3, lsl #3
   1c228:	ldr	r3, [r3, #4]
   1c22c:	cmp	r1, r3
   1c230:	bgt	1c264 <__assert_fail@plt+0xa8c4>
   1c234:	cmp	r0, ip
   1c238:	bge	1c278 <__assert_fail@plt+0xa8d8>
   1c23c:	add	r3, r0, ip
   1c240:	add	r3, r3, r3, lsr #31
   1c244:	asr	r3, r3, #1
   1c248:	add	r2, r3, r3, lsl #1
   1c24c:	add	r2, lr, r2, lsl #3
   1c250:	ldr	r2, [r2, #4]
   1c254:	cmp	r2, r1
   1c258:	blt	1c26c <__assert_fail@plt+0xa8cc>
   1c25c:	mov	ip, r3
   1c260:	b	1c234 <__assert_fail@plt+0xa894>
   1c264:	mov	r3, ip
   1c268:	mov	ip, r2
   1c26c:	add	r0, r3, #1
   1c270:	mov	r2, ip
   1c274:	b	1c208 <__assert_fail@plt+0xa868>
   1c278:	cmp	r5, r0
   1c27c:	ble	1c29c <__assert_fail@plt+0xa8fc>
   1c280:	ldr	r3, [r4, #116]	; 0x74
   1c284:	add	r2, r0, r0, lsl #1
   1c288:	add	r3, r3, r2, lsl #3
   1c28c:	ldr	r3, [r3, #4]
   1c290:	cmp	r1, r3
   1c294:	mvnne	r0, #0
   1c298:	pop	{r4, r5, pc}
   1c29c:	mvn	r0, #0
   1c2a0:	pop	{r4, r5, pc}
   1c2a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2a8:	sub	sp, sp, #20
   1c2ac:	mov	r4, r0
   1c2b0:	mov	r6, r1
   1c2b4:	str	r2, [sp, #12]
   1c2b8:	mov	r8, r3
   1c2bc:	ldr	sl, [r0, #84]	; 0x54
   1c2c0:	mov	r1, r3
   1c2c4:	bl	1c1f4 <__assert_fail@plt+0xa854>
   1c2c8:	mov	fp, r0
   1c2cc:	ldr	r1, [sp, #60]	; 0x3c
   1c2d0:	mov	r0, r4
   1c2d4:	bl	1c1f4 <__assert_fail@plt+0xa854>
   1c2d8:	str	r0, [sp, #8]
   1c2dc:	ldr	r3, [r6, #4]
   1c2e0:	cmp	r3, #0
   1c2e4:	ble	1c378 <__assert_fail@plt+0xa9d8>
   1c2e8:	mov	r5, #0
   1c2ec:	ldr	r3, [r6, #8]
   1c2f0:	ldr	r1, [r3, r5, lsl #2]
   1c2f4:	ldr	r3, [r4, #116]	; 0x74
   1c2f8:	add	r2, r1, r1, lsl #1
   1c2fc:	ldr	r2, [r3, r2, lsl #3]
   1c300:	ldr	r3, [sl]
   1c304:	ldr	r7, [r3, r2, lsl #3]
   1c308:	str	fp, [sp, #4]
   1c30c:	str	r8, [sp]
   1c310:	ldr	r3, [sp, #12]
   1c314:	mov	r2, r7
   1c318:	mov	r0, r4
   1c31c:	bl	1c17c <__assert_fail@plt+0xa7dc>
   1c320:	mov	r9, r0
   1c324:	ldr	r3, [r6, #8]
   1c328:	ldr	r1, [r3, r5, lsl #2]
   1c32c:	ldr	r3, [sp, #8]
   1c330:	str	r3, [sp, #4]
   1c334:	ldr	r3, [sp, #60]	; 0x3c
   1c338:	str	r3, [sp]
   1c33c:	ldr	r3, [sp, #56]	; 0x38
   1c340:	mov	r2, r7
   1c344:	mov	r0, r4
   1c348:	bl	1c17c <__assert_fail@plt+0xa7dc>
   1c34c:	cmp	r9, r0
   1c350:	beq	1c360 <__assert_fail@plt+0xa9c0>
   1c354:	mov	r0, #1
   1c358:	add	sp, sp, #20
   1c35c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c360:	add	r5, r5, #1
   1c364:	ldr	r3, [r6, #4]
   1c368:	cmp	r3, r5
   1c36c:	bgt	1c2ec <__assert_fail@plt+0xa94c>
   1c370:	mov	r0, #0
   1c374:	b	1c358 <__assert_fail@plt+0xa9b8>
   1c378:	mov	r0, #0
   1c37c:	b	1c358 <__assert_fail@plt+0xa9b8>
   1c380:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c384:	sub	sp, sp, #8
   1c388:	mov	r5, r0
   1c38c:	mov	r4, r1
   1c390:	mov	r8, r2
   1c394:	mov	r9, r3
   1c398:	ldr	r6, [r1, #40]	; 0x28
   1c39c:	mov	r1, r6
   1c3a0:	mov	r0, r4
   1c3a4:	bl	1ba78 <__assert_fail@plt+0xa0d8>
   1c3a8:	cmp	r0, #1
   1c3ac:	ble	1c3e4 <__assert_fail@plt+0xaa44>
   1c3b0:	mov	r7, r0
   1c3b4:	mov	r3, #1
   1c3b8:	str	r3, [r5]
   1c3bc:	ldr	r1, [r4, #40]	; 0x28
   1c3c0:	mov	r0, r4
   1c3c4:	bl	1baec <__assert_fail@plt+0xa14c>
   1c3c8:	str	r0, [r5, #4]
   1c3cc:	ldr	r3, [r4, #40]	; 0x28
   1c3d0:	add	r7, r3, r7
   1c3d4:	str	r7, [r4, #40]	; 0x28
   1c3d8:	mov	r0, #0
   1c3dc:	add	sp, sp, #8
   1c3e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c3e4:	add	r6, r6, r9
   1c3e8:	str	r6, [r4, #40]	; 0x28
   1c3ec:	ldrb	r3, [r8, #4]
   1c3f0:	and	r2, r3, #251	; 0xfb
   1c3f4:	cmp	r3, #28
   1c3f8:	cmpne	r2, #26
   1c3fc:	beq	1c42c <__assert_fail@plt+0xaa8c>
   1c400:	ldrb	r2, [sp, #48]	; 0x30
   1c404:	cmp	r3, #22
   1c408:	moveq	r3, r2
   1c40c:	orrne	r3, r2, #1
   1c410:	cmp	r3, #0
   1c414:	beq	1c5d4 <__assert_fail@plt+0xac34>
   1c418:	mov	r0, #0
   1c41c:	str	r0, [r5]
   1c420:	ldrb	r3, [r8]
   1c424:	strb	r3, [r5, #4]
   1c428:	b	1c3dc <__assert_fail@plt+0xaa3c>
   1c42c:	ldr	r3, [r4, #56]	; 0x38
   1c430:	cmp	r6, r3
   1c434:	movge	r0, #7
   1c438:	bge	1c3dc <__assert_fail@plt+0xaa3c>
   1c43c:	ldrb	r9, [r8]
   1c440:	mov	r6, #0
   1c444:	b	1c52c <__assert_fail@plt+0xab8c>
   1c448:	ldrb	r3, [r4, #75]	; 0x4b
   1c44c:	cmp	r3, #0
   1c450:	bne	1c46c <__assert_fail@plt+0xaacc>
   1c454:	ldr	r2, [r4, #4]
   1c458:	ldr	r3, [r4, #40]	; 0x28
   1c45c:	add	r1, r3, #1
   1c460:	str	r1, [r4, #40]	; 0x28
   1c464:	ldrb	r7, [r2, r3]
   1c468:	b	1c54c <__assert_fail@plt+0xabac>
   1c46c:	ldrb	r3, [r4, #76]	; 0x4c
   1c470:	cmp	r3, #0
   1c474:	beq	1c4f8 <__assert_fail@plt+0xab58>
   1c478:	ldr	sl, [r4, #40]	; 0x28
   1c47c:	ldr	r3, [r4, #28]
   1c480:	cmp	sl, r3
   1c484:	beq	1c498 <__assert_fail@plt+0xaaf8>
   1c488:	ldr	r3, [r4, #8]
   1c48c:	ldr	r3, [r3, sl, lsl #2]
   1c490:	cmn	r3, #1
   1c494:	beq	1c4cc <__assert_fail@plt+0xab2c>
   1c498:	ldr	r2, [r4, #12]
   1c49c:	ldr	r3, [r4]
   1c4a0:	ldr	r1, [r2, sl, lsl #2]
   1c4a4:	ldr	r2, [r4, #24]
   1c4a8:	add	r3, r3, r1
   1c4ac:	ldrb	r7, [r3, r2]
   1c4b0:	bics	r3, r7, #127	; 0x7f
   1c4b4:	beq	1c4e0 <__assert_fail@plt+0xab40>
   1c4b8:	ldr	r3, [r4, #4]
   1c4bc:	add	r2, sl, #1
   1c4c0:	str	r2, [r4, #40]	; 0x28
   1c4c4:	ldrb	r7, [r3, sl]
   1c4c8:	b	1c54c <__assert_fail@plt+0xabac>
   1c4cc:	ldr	r3, [r4, #4]
   1c4d0:	add	r2, sl, #1
   1c4d4:	str	r2, [r4, #40]	; 0x28
   1c4d8:	ldrb	r7, [r3, sl]
   1c4dc:	b	1c54c <__assert_fail@plt+0xabac>
   1c4e0:	mov	r1, sl
   1c4e4:	mov	r0, r4
   1c4e8:	bl	1ba78 <__assert_fail@plt+0xa0d8>
   1c4ec:	add	r0, sl, r0
   1c4f0:	str	r0, [r4, #40]	; 0x28
   1c4f4:	b	1c54c <__assert_fail@plt+0xabac>
   1c4f8:	ldr	r3, [r4]
   1c4fc:	ldr	r1, [r4, #24]
   1c500:	ldr	r2, [r4, #40]	; 0x28
   1c504:	add	r0, r2, #1
   1c508:	str	r0, [r4, #40]	; 0x28
   1c50c:	add	r3, r3, r1
   1c510:	ldrb	r7, [r3, r2]
   1c514:	b	1c54c <__assert_fail@plt+0xabac>
   1c518:	ldr	r3, [r5, #4]
   1c51c:	strb	r7, [r3, r6]
   1c520:	add	r6, r6, #1
   1c524:	cmp	r6, #32
   1c528:	beq	1c600 <__assert_fail@plt+0xac60>
   1c52c:	ldrb	r3, [r8, #4]
   1c530:	cmp	r3, #30
   1c534:	beq	1c448 <__assert_fail@plt+0xaaa8>
   1c538:	ldr	r2, [r4, #4]
   1c53c:	ldr	r3, [r4, #40]	; 0x28
   1c540:	add	r1, r3, #1
   1c544:	str	r1, [r4, #40]	; 0x28
   1c548:	ldrb	r7, [r2, r3]
   1c54c:	ldr	r3, [r4, #40]	; 0x28
   1c550:	ldr	r2, [r4, #56]	; 0x38
   1c554:	cmp	r2, r3
   1c558:	ble	1c5f8 <__assert_fail@plt+0xac58>
   1c55c:	cmp	r9, r7
   1c560:	bne	1c518 <__assert_fail@plt+0xab78>
   1c564:	ldr	r2, [r4, #4]
   1c568:	ldrb	r2, [r2, r3]
   1c56c:	cmp	r2, #93	; 0x5d
   1c570:	bne	1c518 <__assert_fail@plt+0xab78>
   1c574:	add	r3, r3, #1
   1c578:	str	r3, [r4, #40]	; 0x28
   1c57c:	ldr	r3, [r5, #4]
   1c580:	mov	r2, #0
   1c584:	strb	r2, [r3, r6]
   1c588:	ldrb	r3, [r8, #4]
   1c58c:	cmp	r3, #28
   1c590:	beq	1c5b4 <__assert_fail@plt+0xac14>
   1c594:	cmp	r3, #30
   1c598:	beq	1c5c4 <__assert_fail@plt+0xac24>
   1c59c:	cmp	r3, #26
   1c5a0:	moveq	r3, #3
   1c5a4:	streq	r3, [r5]
   1c5a8:	moveq	r0, r2
   1c5ac:	movne	r0, #0
   1c5b0:	b	1c3dc <__assert_fail@plt+0xaa3c>
   1c5b4:	mov	r3, #2
   1c5b8:	str	r3, [r5]
   1c5bc:	mov	r0, #0
   1c5c0:	b	1c3dc <__assert_fail@plt+0xaa3c>
   1c5c4:	mov	r3, #4
   1c5c8:	str	r3, [r5]
   1c5cc:	mov	r0, #0
   1c5d0:	b	1c3dc <__assert_fail@plt+0xaa3c>
   1c5d4:	ldr	r2, [sp, #44]	; 0x2c
   1c5d8:	mov	r1, r4
   1c5dc:	mov	r0, sp
   1c5e0:	bl	1bdc0 <__assert_fail@plt+0xa420>
   1c5e4:	ldrb	r3, [sp, #4]
   1c5e8:	cmp	r3, #21
   1c5ec:	movne	r0, #11
   1c5f0:	bne	1c3dc <__assert_fail@plt+0xaa3c>
   1c5f4:	b	1c418 <__assert_fail@plt+0xaa78>
   1c5f8:	mov	r0, #7
   1c5fc:	b	1c3dc <__assert_fail@plt+0xaa3c>
   1c600:	mov	r0, #7
   1c604:	b	1c3dc <__assert_fail@plt+0xaa3c>
   1c608:	push	{r4, r5, r6, lr}
   1c60c:	mov	r4, r0
   1c610:	mov	r6, r1
   1c614:	mov	r5, r2
   1c618:	b	1c620 <__assert_fail@plt+0xac80>
   1c61c:	mov	r4, r3
   1c620:	ldr	r3, [r4, #4]
   1c624:	cmp	r3, #0
   1c628:	bne	1c61c <__assert_fail@plt+0xac7c>
   1c62c:	ldr	r3, [r4, #8]
   1c630:	cmp	r3, #0
   1c634:	bne	1c61c <__assert_fail@plt+0xac7c>
   1c638:	mov	r1, r4
   1c63c:	mov	r0, r5
   1c640:	blx	r6
   1c644:	cmp	r0, #0
   1c648:	popne	{r4, r5, r6, pc}
   1c64c:	ldr	r2, [r4]
   1c650:	cmp	r2, #0
   1c654:	popeq	{r4, r5, r6, pc}
   1c658:	ldr	r3, [r2, #8]
   1c65c:	cmp	r4, r3
   1c660:	cmpne	r3, #0
   1c664:	moveq	r1, #1
   1c668:	movne	r1, #0
   1c66c:	mov	r4, r2
   1c670:	cmp	r1, #0
   1c674:	bne	1c638 <__assert_fail@plt+0xac98>
   1c678:	b	1c61c <__assert_fail@plt+0xac7c>
   1c67c:	push	{r4, r5, r6, r7, r8, lr}
   1c680:	mov	r4, r0
   1c684:	mov	r6, r1
   1c688:	mov	r5, r2
   1c68c:	mov	r7, #0
   1c690:	b	1c698 <__assert_fail@plt+0xacf8>
   1c694:	mov	r4, r3
   1c698:	mov	r1, r4
   1c69c:	mov	r0, r5
   1c6a0:	blx	r6
   1c6a4:	cmp	r0, #0
   1c6a8:	popne	{r4, r5, r6, r7, r8, pc}
   1c6ac:	ldr	r3, [r4, #4]
   1c6b0:	cmp	r3, #0
   1c6b4:	moveq	r2, r7
   1c6b8:	bne	1c694 <__assert_fail@plt+0xacf4>
   1c6bc:	ldr	r3, [r4, #8]
   1c6c0:	cmp	r3, #0
   1c6c4:	cmpne	r2, r3
   1c6c8:	bne	1c694 <__assert_fail@plt+0xacf4>
   1c6cc:	ldr	r3, [r4]
   1c6d0:	mov	r2, r4
   1c6d4:	cmp	r3, #0
   1c6d8:	popeq	{r4, r5, r6, r7, r8, pc}
   1c6dc:	mov	r4, r3
   1c6e0:	b	1c6bc <__assert_fail@plt+0xad1c>
   1c6e4:	push	{r4, r5, r6, lr}
   1c6e8:	mov	r4, r0
   1c6ec:	mov	r5, r1
   1c6f0:	ldr	r3, [r0, #80]	; 0x50
   1c6f4:	cmp	r3, #1
   1c6f8:	ble	1c740 <__assert_fail@plt+0xada0>
   1c6fc:	cmn	r1, #-1073741823	; 0xc0000001
   1c700:	bhi	1c774 <__assert_fail@plt+0xadd4>
   1c704:	lsl	r6, r1, #2
   1c708:	mov	r1, r6
   1c70c:	ldr	r0, [r0, #8]
   1c710:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1c714:	cmp	r0, #0
   1c718:	beq	1c77c <__assert_fail@plt+0xaddc>
   1c71c:	str	r0, [r4, #8]
   1c720:	ldr	r0, [r4, #12]
   1c724:	cmp	r0, #0
   1c728:	beq	1c740 <__assert_fail@plt+0xada0>
   1c72c:	mov	r1, r6
   1c730:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1c734:	cmp	r0, #0
   1c738:	beq	1c784 <__assert_fail@plt+0xade4>
   1c73c:	str	r0, [r4, #12]
   1c740:	ldrb	r3, [r4, #75]	; 0x4b
   1c744:	cmp	r3, #0
   1c748:	bne	1c758 <__assert_fail@plt+0xadb8>
   1c74c:	str	r5, [r4, #36]	; 0x24
   1c750:	mov	r0, #0
   1c754:	pop	{r4, r5, r6, pc}
   1c758:	mov	r1, r5
   1c75c:	ldr	r0, [r4, #4]
   1c760:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1c764:	cmp	r0, #0
   1c768:	beq	1c78c <__assert_fail@plt+0xadec>
   1c76c:	str	r0, [r4, #4]
   1c770:	b	1c74c <__assert_fail@plt+0xadac>
   1c774:	mov	r0, #12
   1c778:	pop	{r4, r5, r6, pc}
   1c77c:	mov	r0, #12
   1c780:	pop	{r4, r5, r6, pc}
   1c784:	mov	r0, #12
   1c788:	pop	{r4, r5, r6, pc}
   1c78c:	mov	r0, #12
   1c790:	pop	{r4, r5, r6, pc}
   1c794:	push	{r4, r5, r6, lr}
   1c798:	mov	r4, r0
   1c79c:	mov	r5, r1
   1c7a0:	ldr	r1, [r0]
   1c7a4:	ldr	r3, [r0, #4]
   1c7a8:	cmp	r1, r3
   1c7ac:	beq	1c7cc <__assert_fail@plt+0xae2c>
   1c7b0:	ldr	r2, [r4, #8]
   1c7b4:	ldr	r3, [r4, #4]
   1c7b8:	add	r1, r3, #1
   1c7bc:	str	r1, [r4, #4]
   1c7c0:	str	r5, [r2, r3, lsl #2]
   1c7c4:	mov	r0, #1
   1c7c8:	pop	{r4, r5, r6, pc}
   1c7cc:	add	r1, r1, #1
   1c7d0:	lsl	r3, r1, #1
   1c7d4:	str	r3, [r0]
   1c7d8:	lsl	r1, r1, #3
   1c7dc:	ldr	r0, [r0, #8]
   1c7e0:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1c7e4:	cmp	r0, #0
   1c7e8:	strne	r0, [r4, #8]
   1c7ec:	bne	1c7b0 <__assert_fail@plt+0xae10>
   1c7f0:	mov	r0, #0
   1c7f4:	pop	{r4, r5, r6, pc}
   1c7f8:	push	{r4, r5, r6, r7, r8, lr}
   1c7fc:	mov	r7, r0
   1c800:	mov	r5, r1
   1c804:	mov	r4, r2
   1c808:	mov	r6, r3
   1c80c:	ldr	r3, [r0, #64]	; 0x40
   1c810:	cmp	r3, #31
   1c814:	beq	1c888 <__assert_fail@plt+0xaee8>
   1c818:	ldr	r3, [r7, #56]	; 0x38
   1c81c:	ldr	r2, [r7, #64]	; 0x40
   1c820:	add	r1, r2, #1
   1c824:	str	r1, [r7, #64]	; 0x40
   1c828:	lsl	r2, r2, #5
   1c82c:	add	ip, r2, #4
   1c830:	add	ip, r3, ip
   1c834:	add	r3, r3, r2
   1c838:	mov	r2, #0
   1c83c:	str	r2, [r3, #4]
   1c840:	str	r5, [r3, #8]
   1c844:	str	r4, [r3, #12]
   1c848:	add	lr, r3, #24
   1c84c:	ldm	r6, {r0, r1}
   1c850:	stm	lr, {r0, r1}
   1c854:	ldrb	r1, [r3, #30]
   1c858:	and	r1, r1, #243	; 0xf3
   1c85c:	strb	r1, [r3, #30]
   1c860:	str	r2, [r3, #16]
   1c864:	str	r2, [r3, #20]
   1c868:	mvn	r2, #0
   1c86c:	str	r2, [r3, #32]
   1c870:	cmp	r5, #0
   1c874:	strne	ip, [r5]
   1c878:	cmp	r4, #0
   1c87c:	strne	ip, [r4]
   1c880:	mov	r0, ip
   1c884:	pop	{r4, r5, r6, r7, r8, pc}
   1c888:	mov	r0, #996	; 0x3e4
   1c88c:	bl	1b954 <__assert_fail@plt+0x9fb4>
   1c890:	cmp	r0, #0
   1c894:	beq	1c8b0 <__assert_fail@plt+0xaf10>
   1c898:	ldr	r3, [r7, #56]	; 0x38
   1c89c:	str	r3, [r0]
   1c8a0:	str	r0, [r7, #56]	; 0x38
   1c8a4:	mov	r3, #0
   1c8a8:	str	r3, [r7, #64]	; 0x40
   1c8ac:	b	1c818 <__assert_fail@plt+0xae78>
   1c8b0:	mov	ip, #0
   1c8b4:	b	1c880 <__assert_fail@plt+0xaee0>
   1c8b8:	push	{r4, r5, r6, r7, r8, lr}
   1c8bc:	sub	sp, sp, #8
   1c8c0:	mov	r4, r0
   1c8c4:	mov	r8, r1
   1c8c8:	ldr	r5, [r0]
   1c8cc:	add	r6, sp, #4
   1c8d0:	mov	r7, #0
   1c8d4:	add	r3, r4, #20
   1c8d8:	mov	r2, r7
   1c8dc:	mov	r1, r7
   1c8e0:	mov	r0, r8
   1c8e4:	bl	1c7f8 <__assert_fail@plt+0xae58>
   1c8e8:	str	r0, [r6]
   1c8ec:	cmp	r0, #0
   1c8f0:	beq	1c928 <__assert_fail@plt+0xaf88>
   1c8f4:	str	r5, [r0]
   1c8f8:	ldr	r2, [r6]
   1c8fc:	ldrb	r3, [r2, #26]
   1c900:	orr	r3, r3, #4
   1c904:	strb	r3, [r2, #26]
   1c908:	ldr	r5, [r6]
   1c90c:	ldr	r3, [r4, #4]
   1c910:	cmp	r3, #0
   1c914:	beq	1c930 <__assert_fail@plt+0xaf90>
   1c918:	add	r6, r5, #4
   1c91c:	mov	r4, r3
   1c920:	b	1c8d4 <__assert_fail@plt+0xaf34>
   1c924:	ldr	r0, [sp, #4]
   1c928:	add	sp, sp, #8
   1c92c:	pop	{r4, r5, r6, r7, r8, pc}
   1c930:	mov	r2, r7
   1c934:	ldr	r3, [r4, #8]
   1c938:	cmp	r3, #0
   1c93c:	cmpne	r2, r3
   1c940:	bne	1c960 <__assert_fail@plt+0xafc0>
   1c944:	ldr	r3, [r4]
   1c948:	ldr	r5, [r5]
   1c94c:	mov	r2, r4
   1c950:	cmp	r3, #0
   1c954:	beq	1c924 <__assert_fail@plt+0xaf84>
   1c958:	mov	r4, r3
   1c95c:	b	1c934 <__assert_fail@plt+0xaf94>
   1c960:	add	r6, r5, #8
   1c964:	mov	r4, r3
   1c968:	b	1c8d4 <__assert_fail@plt+0xaf34>
   1c96c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c970:	sub	sp, sp, #12
   1c974:	mov	ip, #0
   1c978:	str	ip, [sp]
   1c97c:	str	ip, [sp, #4]
   1c980:	strb	r3, [sp, #4]
   1c984:	mov	r3, sp
   1c988:	bl	1c7f8 <__assert_fail@plt+0xae58>
   1c98c:	add	sp, sp, #12
   1c990:	pop	{pc}		; (ldr pc, [sp], #4)
   1c994:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c998:	ldr	r6, [r1]
   1c99c:	ldr	r5, [r2, #4]
   1c9a0:	ldrb	r1, [r1, #28]
   1c9a4:	adds	r3, r5, #0
   1c9a8:	movne	r3, #1
   1c9ac:	ands	r3, r3, r1, lsr #4
   1c9b0:	beq	1c9d0 <__assert_fail@plt+0xb030>
   1c9b4:	ldr	r3, [r2, #20]
   1c9b8:	cmp	r3, #31
   1c9bc:	bgt	1ca98 <__assert_fail@plt+0xb0f8>
   1c9c0:	ldr	r1, [r6, #80]	; 0x50
   1c9c4:	lsr	r3, r1, r3
   1c9c8:	tst	r3, #1
   1c9cc:	beq	1ca98 <__assert_fail@plt+0xb0f8>
   1c9d0:	mov	r4, r2
   1c9d4:	mov	r9, r0
   1c9d8:	mov	r3, #8
   1c9dc:	mov	r2, #0
   1c9e0:	mov	r1, r2
   1c9e4:	mov	r0, r6
   1c9e8:	bl	1c96c <__assert_fail@plt+0xafcc>
   1c9ec:	mov	r7, r0
   1c9f0:	mov	r3, #9
   1c9f4:	mov	r2, #0
   1c9f8:	mov	r1, r2
   1c9fc:	mov	r0, r6
   1ca00:	bl	1c96c <__assert_fail@plt+0xafcc>
   1ca04:	mov	r8, r0
   1ca08:	cmp	r5, #0
   1ca0c:	moveq	sl, r0
   1ca10:	beq	1ca2c <__assert_fail@plt+0xb08c>
   1ca14:	mov	r3, #16
   1ca18:	mov	r2, r0
   1ca1c:	mov	r1, r5
   1ca20:	mov	r0, r6
   1ca24:	bl	1c96c <__assert_fail@plt+0xafcc>
   1ca28:	mov	sl, r0
   1ca2c:	mov	r3, #16
   1ca30:	mov	r2, sl
   1ca34:	mov	r1, r7
   1ca38:	mov	r0, r6
   1ca3c:	bl	1c96c <__assert_fail@plt+0xafcc>
   1ca40:	mov	r5, r0
   1ca44:	cmp	sl, #0
   1ca48:	cmpne	r0, #0
   1ca4c:	beq	1caa0 <__assert_fail@plt+0xb100>
   1ca50:	cmp	r8, #0
   1ca54:	cmpne	r7, #0
   1ca58:	beq	1caa0 <__assert_fail@plt+0xb100>
   1ca5c:	ldr	r3, [r4, #20]
   1ca60:	str	r3, [r8, #20]
   1ca64:	str	r3, [r7, #20]
   1ca68:	ldrb	r3, [r4, #26]
   1ca6c:	lsr	r3, r3, #3
   1ca70:	and	r3, r3, #1
   1ca74:	ldrb	r2, [r8, #26]
   1ca78:	and	r1, r3, #1
   1ca7c:	bic	r2, r2, #8
   1ca80:	orr	r2, r2, r1, lsl #3
   1ca84:	strb	r2, [r8, #26]
   1ca88:	ldrb	r2, [r7, #26]
   1ca8c:	bic	r2, r2, #8
   1ca90:	orr	r3, r2, r1, lsl #3
   1ca94:	strb	r3, [r7, #26]
   1ca98:	mov	r0, r5
   1ca9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1caa0:	mov	r3, #12
   1caa4:	str	r3, [r9]
   1caa8:	mov	r5, #0
   1caac:	b	1ca98 <__assert_fail@plt+0xb0f8>
   1cab0:	push	{r4, r5, lr}
   1cab4:	sub	sp, sp, #12
   1cab8:	mov	r5, r0
   1cabc:	mov	r4, r1
   1cac0:	mov	r3, #0
   1cac4:	str	r3, [sp, #4]
   1cac8:	ldr	r2, [r1, #4]
   1cacc:	cmp	r2, r3
   1cad0:	beq	1cae0 <__assert_fail@plt+0xb140>
   1cad4:	ldrb	r3, [r2, #24]
   1cad8:	cmp	r3, #17
   1cadc:	beq	1cb04 <__assert_fail@plt+0xb164>
   1cae0:	ldr	r2, [r4, #8]
   1cae4:	cmp	r2, #0
   1cae8:	beq	1caf8 <__assert_fail@plt+0xb158>
   1caec:	ldrb	r3, [r2, #24]
   1caf0:	cmp	r3, #17
   1caf4:	beq	1cb20 <__assert_fail@plt+0xb180>
   1caf8:	ldr	r0, [sp, #4]
   1cafc:	add	sp, sp, #12
   1cb00:	pop	{r4, r5, pc}
   1cb04:	mov	r1, r0
   1cb08:	add	r0, sp, #4
   1cb0c:	bl	1c994 <__assert_fail@plt+0xaff4>
   1cb10:	str	r0, [r4, #4]
   1cb14:	cmp	r0, #0
   1cb18:	strne	r4, [r0]
   1cb1c:	b	1cae0 <__assert_fail@plt+0xb140>
   1cb20:	mov	r1, r5
   1cb24:	add	r0, sp, #4
   1cb28:	bl	1c994 <__assert_fail@plt+0xaff4>
   1cb2c:	str	r0, [r4, #8]
   1cb30:	cmp	r0, #0
   1cb34:	strne	r4, [r0]
   1cb38:	b	1caf8 <__assert_fail@plt+0xb158>
   1cb3c:	push	{r4, r5, r6, lr}
   1cb40:	mov	r4, r0
   1cb44:	mov	r5, r1
   1cb48:	mov	r3, #1
   1cb4c:	str	r3, [r0]
   1cb50:	str	r3, [r0, #4]
   1cb54:	mov	r0, #4
   1cb58:	bl	1b954 <__assert_fail@plt+0x9fb4>
   1cb5c:	str	r0, [r4, #8]
   1cb60:	cmp	r0, #0
   1cb64:	moveq	r3, #0
   1cb68:	streq	r3, [r4, #4]
   1cb6c:	streq	r3, [r4]
   1cb70:	moveq	r0, #12
   1cb74:	strne	r5, [r0]
   1cb78:	movne	r0, #0
   1cb7c:	pop	{r4, r5, r6, pc}
   1cb80:	push	{r4, lr}
   1cb84:	mov	r4, r0
   1cb88:	str	r1, [r0]
   1cb8c:	mov	r3, #0
   1cb90:	str	r3, [r0, #4]
   1cb94:	lsl	r0, r1, #2
   1cb98:	bl	1b954 <__assert_fail@plt+0x9fb4>
   1cb9c:	str	r0, [r4, #8]
   1cba0:	cmp	r0, #0
   1cba4:	moveq	r0, #12
   1cba8:	movne	r0, #0
   1cbac:	pop	{r4, pc}
   1cbb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cbb4:	mov	r6, r0
   1cbb8:	mov	r5, r1
   1cbbc:	mov	r7, r2
   1cbc0:	mov	r8, r1
   1cbc4:	str	r2, [r8], #16
   1cbc8:	ldr	r1, [r1, #8]
   1cbcc:	mov	r0, r8
   1cbd0:	bl	1cb80 <__assert_fail@plt+0xb1e0>
   1cbd4:	subs	r9, r0, #0
   1cbd8:	bne	1cca0 <__assert_fail@plt+0xb300>
   1cbdc:	ldr	r3, [r5, #8]
   1cbe0:	cmp	r3, #0
   1cbe4:	ble	1cc34 <__assert_fail@plt+0xb294>
   1cbe8:	mov	r4, #0
   1cbec:	b	1cc00 <__assert_fail@plt+0xb260>
   1cbf0:	add	r4, r4, #1
   1cbf4:	ldr	r3, [r5, #8]
   1cbf8:	cmp	r3, r4
   1cbfc:	ble	1cc34 <__assert_fail@plt+0xb294>
   1cc00:	ldr	r3, [r5, #12]
   1cc04:	ldr	r1, [r3, r4, lsl #2]
   1cc08:	ldr	r3, [r6]
   1cc0c:	add	r3, r3, r1, lsl #3
   1cc10:	ldrb	r3, [r3, #4]
   1cc14:	tst	r3, #8
   1cc18:	bne	1cbf0 <__assert_fail@plt+0xb250>
   1cc1c:	mov	r0, r8
   1cc20:	bl	1c794 <__assert_fail@plt+0xadf4>
   1cc24:	cmp	r0, #0
   1cc28:	bne	1cbf0 <__assert_fail@plt+0xb250>
   1cc2c:	mov	r9, #12
   1cc30:	b	1cc70 <__assert_fail@plt+0xb2d0>
   1cc34:	ldr	r4, [r6, #68]	; 0x44
   1cc38:	and	r7, r7, r4
   1cc3c:	add	r7, r7, r7, lsl #1
   1cc40:	lsl	r4, r7, #2
   1cc44:	ldr	r6, [r6, #32]
   1cc48:	add	r7, r6, r4
   1cc4c:	ldr	r3, [r6, r4]
   1cc50:	ldr	r2, [r7, #4]
   1cc54:	cmp	r2, r3
   1cc58:	ble	1cc78 <__assert_fail@plt+0xb2d8>
   1cc5c:	ldr	r2, [r7, #8]
   1cc60:	ldr	r3, [r6, r4]
   1cc64:	add	r1, r3, #1
   1cc68:	str	r1, [r6, r4]
   1cc6c:	str	r5, [r2, r3, lsl #2]
   1cc70:	mov	r0, r9
   1cc74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cc78:	add	r3, r3, #1
   1cc7c:	lsl	r8, r3, #1
   1cc80:	lsl	r1, r3, #3
   1cc84:	ldr	r0, [r7, #8]
   1cc88:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1cc8c:	cmp	r0, #0
   1cc90:	beq	1cca8 <__assert_fail@plt+0xb308>
   1cc94:	str	r0, [r7, #8]
   1cc98:	str	r8, [r7, #4]
   1cc9c:	b	1cc5c <__assert_fail@plt+0xb2bc>
   1cca0:	mov	r9, #12
   1cca4:	b	1cc70 <__assert_fail@plt+0xb2d0>
   1cca8:	mov	r9, #12
   1ccac:	b	1cc70 <__assert_fail@plt+0xb2d0>
   1ccb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ccb4:	sub	sp, sp, #80	; 0x50
   1ccb8:	mov	r4, r0
   1ccbc:	ldr	r8, [r0, #36]	; 0x24
   1ccc0:	ldr	r3, [r0, #48]	; 0x30
   1ccc4:	cmp	r8, r3
   1ccc8:	movge	r8, r3
   1cccc:	ldr	sl, [r0, #28]
   1ccd0:	cmp	r8, sl
   1ccd4:	ble	1ce34 <__assert_fail@plt+0xb494>
   1ccd8:	add	r7, sp, #8
   1ccdc:	add	r6, r0, #16
   1cce0:	mov	r9, #1
   1cce4:	mvn	r5, #0
   1cce8:	b	1cdcc <__assert_fail@plt+0xb42c>
   1ccec:	ldr	r3, [r4, #80]	; 0x50
   1ccf0:	cmp	r3, #0
   1ccf4:	cmpgt	r2, #0
   1ccf8:	ble	1cd4c <__assert_fail@plt+0xb3ac>
   1ccfc:	add	r0, sp, #15
   1cd00:	mov	r3, #0
   1cd04:	ldr	r1, [r4]
   1cd08:	ldr	ip, [r4, #24]
   1cd0c:	add	r1, r1, sl
   1cd10:	add	r1, r1, r3
   1cd14:	ldrb	r1, [r1, ip]
   1cd18:	ldr	ip, [r4, #64]	; 0x40
   1cd1c:	ldrb	ip, [ip, r1]
   1cd20:	ldr	r1, [r4, #4]
   1cd24:	add	r1, r1, sl
   1cd28:	strb	ip, [r1, r3]
   1cd2c:	strb	ip, [r0, #1]!
   1cd30:	add	r3, r3, #1
   1cd34:	ldr	r1, [r4, #80]	; 0x50
   1cd38:	cmp	r1, r3
   1cd3c:	cmpgt	r2, r3
   1cd40:	bgt	1cd04 <__assert_fail@plt+0xb364>
   1cd44:	add	r1, sp, #16
   1cd48:	b	1cdf4 <__assert_fail@plt+0xb454>
   1cd4c:	add	r1, sp, #16
   1cd50:	b	1cdf4 <__assert_fail@plt+0xb454>
   1cd54:	ldr	r3, [r4]
   1cd58:	ldr	r2, [r4, #24]
   1cd5c:	add	r3, r3, sl
   1cd60:	ldrb	r3, [r3, r2]
   1cd64:	str	r3, [sp, #4]
   1cd68:	ldr	r2, [r4, #64]	; 0x40
   1cd6c:	cmp	r2, #0
   1cd70:	ldrbne	r3, [r2, r3]
   1cd74:	strne	r3, [sp, #4]
   1cd78:	ldm	r7, {r0, r1}
   1cd7c:	stm	r6, {r0, r1}
   1cd80:	mov	r0, r9
   1cd84:	add	r2, sl, #1
   1cd88:	lsl	r3, sl, #2
   1cd8c:	ldr	r1, [r4, #8]
   1cd90:	ldr	ip, [sp, #4]
   1cd94:	str	ip, [r1, sl, lsl #2]
   1cd98:	add	sl, sl, r0
   1cd9c:	mov	ip, sl
   1cda0:	cmp	r2, sl
   1cda4:	bge	1ce44 <__assert_fail@plt+0xb4a4>
   1cda8:	add	r3, r3, #4
   1cdac:	add	r2, r2, #1
   1cdb0:	ldr	r1, [r4, #8]
   1cdb4:	str	r5, [r1, r3]
   1cdb8:	add	r3, r3, #4
   1cdbc:	cmp	ip, r2
   1cdc0:	bne	1cdac <__assert_fail@plt+0xb40c>
   1cdc4:	cmp	r8, sl
   1cdc8:	ble	1ce34 <__assert_fail@plt+0xb494>
   1cdcc:	sub	r2, r8, sl
   1cdd0:	ldm	r6, {r0, r1}
   1cdd4:	stm	r7, {r0, r1}
   1cdd8:	ldr	r3, [r4, #64]	; 0x40
   1cddc:	cmp	r3, #0
   1cde0:	bne	1ccec <__assert_fail@plt+0xb34c>
   1cde4:	ldr	r1, [r4, #24]
   1cde8:	add	r3, sl, r1
   1cdec:	ldr	r1, [r4]
   1cdf0:	add	r1, r1, r3
   1cdf4:	mov	r3, r6
   1cdf8:	add	r0, sp, #4
   1cdfc:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1ce00:	sub	r3, r0, #1
   1ce04:	cmn	r3, #3
   1ce08:	bhi	1cd54 <__assert_fail@plt+0xb3b4>
   1ce0c:	cmn	r0, #2
   1ce10:	bne	1cd84 <__assert_fail@plt+0xb3e4>
   1ce14:	ldr	r2, [r4, #36]	; 0x24
   1ce18:	ldr	r3, [r4, #48]	; 0x30
   1ce1c:	cmp	r2, r3
   1ce20:	bge	1cd54 <__assert_fail@plt+0xb3b4>
   1ce24:	add	r3, r4, #16
   1ce28:	add	r2, sp, #8
   1ce2c:	ldm	r2, {r0, r1}
   1ce30:	stm	r3, {r0, r1}
   1ce34:	str	sl, [r4, #28]
   1ce38:	str	sl, [r4, #32]
   1ce3c:	add	sp, sp, #80	; 0x50
   1ce40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce44:	mov	sl, r2
   1ce48:	b	1cdc4 <__assert_fail@plt+0xb424>
   1ce4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce50:	sub	sp, sp, #92	; 0x5c
   1ce54:	mov	r5, r0
   1ce58:	ldr	r4, [r0, #28]
   1ce5c:	ldr	r6, [r0, #36]	; 0x24
   1ce60:	ldr	r3, [r0, #48]	; 0x30
   1ce64:	cmp	r6, r3
   1ce68:	movge	r6, r3
   1ce6c:	ldrb	r3, [r0, #74]	; 0x4a
   1ce70:	cmp	r3, #0
   1ce74:	bne	1ce84 <__assert_fail@plt+0xb4e4>
   1ce78:	ldr	r3, [r0, #64]	; 0x40
   1ce7c:	cmp	r3, #0
   1ce80:	beq	1cea4 <__assert_fail@plt+0xb504>
   1ce84:	ldr	r7, [r5, #32]
   1ce88:	cmp	r4, r6
   1ce8c:	blt	1cfe4 <__assert_fail@plt+0xb644>
   1ce90:	str	r4, [r5, #28]
   1ce94:	str	r7, [r5, #32]
   1ce98:	mov	r0, #0
   1ce9c:	add	sp, sp, #92	; 0x5c
   1cea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cea4:	ldrb	r3, [r0, #76]	; 0x4c
   1cea8:	cmp	r3, #0
   1ceac:	bne	1ce84 <__assert_fail@plt+0xb4e4>
   1ceb0:	cmp	r4, r6
   1ceb4:	bge	1d16c <__assert_fail@plt+0xb7cc>
   1ceb8:	add	r3, r0, #16
   1cebc:	str	r3, [sp, #4]
   1cec0:	mvn	r7, #0
   1cec4:	b	1cf90 <__assert_fail@plt+0xb5f0>
   1cec8:	ldr	r3, [sp, #4]
   1cecc:	ldm	r3, {r0, r1}
   1ced0:	add	r2, sp, #80	; 0x50
   1ced4:	stm	r2, {r0, r1}
   1ced8:	mov	r9, r4
   1cedc:	add	r1, r8, r4
   1cee0:	sub	r2, r6, r4
   1cee4:	add	r1, fp, r1
   1cee8:	add	r0, sp, #12
   1ceec:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1cef0:	mov	r8, r0
   1cef4:	sub	r3, r0, #1
   1cef8:	cmn	r3, #4
   1cefc:	bhi	1d0f8 <__assert_fail@plt+0xb758>
   1cf00:	ldr	fp, [sp, #12]
   1cf04:	mov	r0, fp
   1cf08:	bl	11940 <towupper@plt>
   1cf0c:	mov	sl, r0
   1cf10:	cmp	fp, r0
   1cf14:	beq	1d0d4 <__assert_fail@plt+0xb734>
   1cf18:	add	r2, sp, #80	; 0x50
   1cf1c:	mov	r1, r0
   1cf20:	add	r0, sp, #16
   1cf24:	bl	1152c <wcrtomb@plt>
   1cf28:	cmp	r8, r0
   1cf2c:	bne	1cfe0 <__assert_fail@plt+0xb640>
   1cf30:	ldr	r0, [r5, #4]
   1cf34:	mov	r2, r8
   1cf38:	add	r1, sp, #16
   1cf3c:	add	r0, r0, r4
   1cf40:	bl	115d4 <memcpy@plt>
   1cf44:	add	r4, r4, #1
   1cf48:	lsl	r3, r9, #2
   1cf4c:	ldr	r2, [r5, #8]
   1cf50:	str	sl, [r2, r9, lsl #2]
   1cf54:	sub	r2, r4, #1
   1cf58:	add	r8, r2, r8
   1cf5c:	mov	r1, r8
   1cf60:	cmp	r4, r8
   1cf64:	bge	1cf88 <__assert_fail@plt+0xb5e8>
   1cf68:	add	r3, r3, #4
   1cf6c:	add	r4, r4, #1
   1cf70:	ldr	r2, [r5, #8]
   1cf74:	str	r7, [r2, r3]
   1cf78:	add	r3, r3, #4
   1cf7c:	cmp	r1, r4
   1cf80:	bne	1cf6c <__assert_fail@plt+0xb5cc>
   1cf84:	mov	r4, r8
   1cf88:	cmp	r6, r4
   1cf8c:	ble	1d16c <__assert_fail@plt+0xb7cc>
   1cf90:	ldr	fp, [r5]
   1cf94:	ldr	r8, [r5, #24]
   1cf98:	add	r3, fp, r8
   1cf9c:	ldrb	sl, [r3, r4]
   1cfa0:	bics	r3, sl, #127	; 0x7f
   1cfa4:	bne	1cec8 <__assert_fail@plt+0xb528>
   1cfa8:	ldr	r0, [sp, #4]
   1cfac:	bl	11604 <mbsinit@plt>
   1cfb0:	cmp	r0, #0
   1cfb4:	beq	1cec8 <__assert_fail@plt+0xb528>
   1cfb8:	mov	r0, sl
   1cfbc:	bl	11940 <towupper@plt>
   1cfc0:	bics	r3, r0, #127	; 0x7f
   1cfc4:	bne	1cec8 <__assert_fail@plt+0xb528>
   1cfc8:	ldr	r3, [r5, #4]
   1cfcc:	strb	r0, [r3, r4]
   1cfd0:	ldr	r3, [r5, #8]
   1cfd4:	str	r0, [r3, r4, lsl #2]
   1cfd8:	add	r4, r4, #1
   1cfdc:	b	1cf88 <__assert_fail@plt+0xb5e8>
   1cfe0:	mov	r7, r4
   1cfe4:	sub	r2, r6, r4
   1cfe8:	add	r3, r5, #16
   1cfec:	ldm	r3, {r0, r1}
   1cff0:	add	r3, sp, #88	; 0x58
   1cff4:	stmdb	r3, {r0, r1}
   1cff8:	ldr	r1, [r5, #64]	; 0x40
   1cffc:	cmp	r1, #0
   1d000:	bne	1d17c <__assert_fail@plt+0xb7dc>
   1d004:	ldr	r3, [r5, #24]
   1d008:	add	r3, r7, r3
   1d00c:	ldr	r1, [r5]
   1d010:	add	r3, r1, r3
   1d014:	str	r3, [sp, #4]
   1d018:	add	r3, r5, #16
   1d01c:	ldr	r1, [sp, #4]
   1d020:	add	r0, sp, #12
   1d024:	bl	1b984 <__assert_fail@plt+0x9fe4>
   1d028:	mov	r8, r0
   1d02c:	sub	fp, r0, #1
   1d030:	cmn	fp, #4
   1d034:	bhi	1d370 <__assert_fail@plt+0xb9d0>
   1d038:	ldr	sl, [sp, #12]
   1d03c:	mov	r0, sl
   1d040:	bl	11940 <towupper@plt>
   1d044:	mov	r9, r0
   1d048:	cmp	sl, r0
   1d04c:	beq	1d328 <__assert_fail@plt+0xb988>
   1d050:	add	r2, sp, #80	; 0x50
   1d054:	mov	r1, r0
   1d058:	add	r0, sp, #16
   1d05c:	bl	1152c <wcrtomb@plt>
   1d060:	mov	sl, r0
   1d064:	cmp	r8, r0
   1d068:	bne	1d1dc <__assert_fail@plt+0xb83c>
   1d06c:	ldr	r0, [r5, #4]
   1d070:	mov	r2, r8
   1d074:	add	r1, sp, #16
   1d078:	add	r0, r0, r4
   1d07c:	bl	115d4 <memcpy@plt>
   1d080:	ldrb	r3, [r5, #76]	; 0x4c
   1d084:	cmp	r3, #0
   1d088:	bne	1d340 <__assert_fail@plt+0xb9a0>
   1d08c:	add	r7, r7, r8
   1d090:	add	r2, r4, #1
   1d094:	lsl	r3, r4, #2
   1d098:	ldr	r1, [r5, #8]
   1d09c:	str	r9, [r1, r4, lsl #2]
   1d0a0:	add	r4, r4, r8
   1d0a4:	mov	ip, r4
   1d0a8:	cmp	r2, r4
   1d0ac:	bge	1d404 <__assert_fail@plt+0xba64>
   1d0b0:	add	r3, r3, #4
   1d0b4:	mvn	r0, #0
   1d0b8:	add	r2, r2, #1
   1d0bc:	ldr	r1, [r5, #8]
   1d0c0:	str	r0, [r1, r3]
   1d0c4:	add	r3, r3, #4
   1d0c8:	cmp	ip, r2
   1d0cc:	bne	1d0b8 <__assert_fail@plt+0xb718>
   1d0d0:	b	1ce88 <__assert_fail@plt+0xb4e8>
   1d0d4:	ldr	r0, [r5, #4]
   1d0d8:	ldr	r3, [r5, #24]
   1d0dc:	add	r3, r4, r3
   1d0e0:	ldr	r1, [r5]
   1d0e4:	mov	r2, r8
   1d0e8:	add	r1, r1, r3
   1d0ec:	add	r0, r0, r4
   1d0f0:	bl	115d4 <memcpy@plt>
   1d0f4:	b	1cf44 <__assert_fail@plt+0xb5a4>
   1d0f8:	cmn	r3, #3
   1d0fc:	bhi	1d130 <__assert_fail@plt+0xb790>
   1d100:	cmn	r0, #2
   1d104:	bne	1d15c <__assert_fail@plt+0xb7bc>
   1d108:	ldr	r2, [r5, #36]	; 0x24
   1d10c:	ldr	r3, [r5, #48]	; 0x30
   1d110:	cmp	r2, r3
   1d114:	blt	1d15c <__assert_fail@plt+0xb7bc>
   1d118:	ldr	r3, [r5, #4]
   1d11c:	strb	sl, [r3, r4]
   1d120:	add	r4, r4, #1
   1d124:	ldr	r3, [r5, #8]
   1d128:	str	sl, [r3, r9, lsl #2]
   1d12c:	b	1cf88 <__assert_fail@plt+0xb5e8>
   1d130:	ldr	r3, [r5, #4]
   1d134:	strb	sl, [r3, r4]
   1d138:	add	r4, r4, #1
   1d13c:	ldr	r3, [r5, #8]
   1d140:	str	sl, [r3, r9, lsl #2]
   1d144:	cmn	r0, #1
   1d148:	addeq	r3, sp, #80	; 0x50
   1d14c:	ldmeq	r3, {r0, r1}
   1d150:	ldreq	r3, [sp, #4]
   1d154:	stmeq	r3, {r0, r1}
   1d158:	b	1cf88 <__assert_fail@plt+0xb5e8>
   1d15c:	add	r3, r5, #16
   1d160:	add	r2, sp, #88	; 0x58
   1d164:	ldmdb	r2, {r0, r1}
   1d168:	stm	r3, {r0, r1}
   1d16c:	str	r4, [r5, #28]
   1d170:	str	r4, [r5, #32]
   1d174:	mov	r0, #0
   1d178:	b	1ce9c <__assert_fail@plt+0xb4fc>
   1d17c:	ldr	r8, [r5, #80]	; 0x50
   1d180:	cmp	r8, #0
   1d184:	cmpgt	r2, #0
   1d188:	ble	1d1d0 <__assert_fail@plt+0xb830>
   1d18c:	ldr	r3, [r5, #24]
   1d190:	add	r3, r7, r3
   1d194:	sub	r3, r3, #1
   1d198:	ldr	r0, [r5]
   1d19c:	add	r0, r0, r3
   1d1a0:	add	ip, sp, #15
   1d1a4:	mov	r3, #0
   1d1a8:	ldrb	lr, [r0, #1]!
   1d1ac:	ldrb	lr, [r1, lr]
   1d1b0:	strb	lr, [ip, #1]!
   1d1b4:	add	r3, r3, #1
   1d1b8:	cmp	r8, r3
   1d1bc:	cmpgt	r2, r3
   1d1c0:	bgt	1d1a8 <__assert_fail@plt+0xb808>
   1d1c4:	add	r3, sp, #16
   1d1c8:	str	r3, [sp, #4]
   1d1cc:	b	1d018 <__assert_fail@plt+0xb678>
   1d1d0:	add	r3, sp, #16
   1d1d4:	str	r3, [sp, #4]
   1d1d8:	b	1d018 <__assert_fail@plt+0xb678>
   1d1dc:	cmn	r0, #1
   1d1e0:	beq	1d310 <__assert_fail@plt+0xb970>
   1d1e4:	mov	r6, r4
   1d1e8:	add	r3, r0, r4
   1d1ec:	str	r3, [sp, #4]
   1d1f0:	ldr	r0, [r5, #36]	; 0x24
   1d1f4:	cmp	r3, r0
   1d1f8:	bls	1d210 <__assert_fail@plt+0xb870>
   1d1fc:	add	r3, r5, #16
   1d200:	add	r2, sp, #88	; 0x58
   1d204:	ldmdb	r2, {r0, r1}
   1d208:	stm	r3, {r0, r1}
   1d20c:	b	1ce90 <__assert_fail@plt+0xb4f0>
   1d210:	ldr	r3, [r5, #12]
   1d214:	cmp	r3, #0
   1d218:	beq	1d2f4 <__assert_fail@plt+0xb954>
   1d21c:	ldrb	r3, [r5, #76]	; 0x4c
   1d220:	cmp	r3, #0
   1d224:	bne	1d24c <__assert_fail@plt+0xb8ac>
   1d228:	cmp	r6, #0
   1d22c:	beq	1d244 <__assert_fail@plt+0xb8a4>
   1d230:	ldr	r2, [r5, #12]
   1d234:	str	r3, [r2, r3, lsl #2]
   1d238:	add	r3, r3, #1
   1d23c:	cmp	r6, r3
   1d240:	bne	1d230 <__assert_fail@plt+0xb890>
   1d244:	mov	r3, #1
   1d248:	strb	r3, [r5, #76]	; 0x4c
   1d24c:	ldr	r0, [r5, #4]
   1d250:	mov	r2, sl
   1d254:	add	r1, sp, #16
   1d258:	add	r0, r0, r6
   1d25c:	bl	115d4 <memcpy@plt>
   1d260:	lsl	r3, r6, #2
   1d264:	ldr	r2, [r5, #8]
   1d268:	str	r9, [r2, r6, lsl #2]
   1d26c:	ldr	r2, [r5, #12]
   1d270:	str	r7, [r2, r6, lsl #2]
   1d274:	cmp	sl, #1
   1d278:	bls	1d2b8 <__assert_fail@plt+0xb918>
   1d27c:	add	r3, r3, #4
   1d280:	mov	r2, #1
   1d284:	mvn	r0, #0
   1d288:	ldr	ip, [r5, #12]
   1d28c:	cmp	r2, r8
   1d290:	movcc	r1, r2
   1d294:	movcs	r1, fp
   1d298:	add	r1, r7, r1
   1d29c:	str	r1, [ip, r3]
   1d2a0:	ldr	r1, [r5, #8]
   1d2a4:	str	r0, [r1, r3]
   1d2a8:	add	r2, r2, #1
   1d2ac:	add	r3, r3, #4
   1d2b0:	cmp	sl, r2
   1d2b4:	bne	1d288 <__assert_fail@plt+0xb8e8>
   1d2b8:	sub	sl, sl, r8
   1d2bc:	ldr	r6, [r5, #48]	; 0x30
   1d2c0:	add	r6, sl, r6
   1d2c4:	str	r6, [r5, #48]	; 0x30
   1d2c8:	ldr	r3, [r5, #52]	; 0x34
   1d2cc:	cmp	r7, r3
   1d2d0:	ldrlt	r3, [r5, #56]	; 0x38
   1d2d4:	addlt	sl, r3, sl
   1d2d8:	strlt	sl, [r5, #56]	; 0x38
   1d2dc:	ldr	r3, [r5, #36]	; 0x24
   1d2e0:	cmp	r6, r3
   1d2e4:	movge	r6, r3
   1d2e8:	ldr	r4, [sp, #4]
   1d2ec:	add	r7, r7, r8
   1d2f0:	b	1ce88 <__assert_fail@plt+0xb4e8>
   1d2f4:	lsl	r0, r0, #2
   1d2f8:	bl	1b954 <__assert_fail@plt+0x9fb4>
   1d2fc:	str	r0, [r5, #12]
   1d300:	cmp	r0, #0
   1d304:	moveq	r0, #12
   1d308:	bne	1d21c <__assert_fail@plt+0xb87c>
   1d30c:	b	1ce9c <__assert_fail@plt+0xb4fc>
   1d310:	ldr	r0, [r5, #4]
   1d314:	mov	r2, r8
   1d318:	ldr	r1, [sp, #4]
   1d31c:	add	r0, r0, r4
   1d320:	bl	115d4 <memcpy@plt>
   1d324:	b	1d080 <__assert_fail@plt+0xb6e0>
   1d328:	ldr	r0, [r5, #4]
   1d32c:	mov	r2, r8
   1d330:	ldr	r1, [sp, #4]
   1d334:	add	r0, r0, r4
   1d338:	bl	115d4 <memcpy@plt>
   1d33c:	b	1d080 <__assert_fail@plt+0xb6e0>
   1d340:	cmp	r8, #0
   1d344:	beq	1d08c <__assert_fail@plt+0xb6ec>
   1d348:	lsl	r2, r4, #2
   1d34c:	mov	r3, r7
   1d350:	add	r0, r8, r7
   1d354:	ldr	r1, [r5, #12]
   1d358:	str	r3, [r1, r2]
   1d35c:	add	r2, r2, #4
   1d360:	add	r3, r3, #1
   1d364:	cmp	r3, r0
   1d368:	bne	1d354 <__assert_fail@plt+0xb9b4>
   1d36c:	b	1d08c <__assert_fail@plt+0xb6ec>
   1d370:	cmn	fp, #3
   1d374:	bhi	1d3a4 <__assert_fail@plt+0xba04>
   1d378:	cmn	r0, #2
   1d37c:	beq	1d394 <__assert_fail@plt+0xb9f4>
   1d380:	add	r3, r5, #16
   1d384:	add	r2, sp, #88	; 0x58
   1d388:	ldmdb	r2, {r0, r1}
   1d38c:	stm	r3, {r0, r1}
   1d390:	b	1ce90 <__assert_fail@plt+0xb4f0>
   1d394:	ldr	r2, [r5, #36]	; 0x24
   1d398:	ldr	r3, [r5, #48]	; 0x30
   1d39c:	cmp	r2, r3
   1d3a0:	blt	1d380 <__assert_fail@plt+0xb9e0>
   1d3a4:	ldr	r3, [r5]
   1d3a8:	ldr	r2, [r5, #24]
   1d3ac:	add	r3, r3, r7
   1d3b0:	ldrb	r3, [r3, r2]
   1d3b4:	ldr	r2, [r5, #64]	; 0x40
   1d3b8:	cmp	r2, #0
   1d3bc:	ldrbne	r3, [r2, r3]
   1d3c0:	mov	r1, r4
   1d3c4:	ldr	r2, [r5, #4]
   1d3c8:	strb	r3, [r2, r4]
   1d3cc:	ldrb	r2, [r5, #76]	; 0x4c
   1d3d0:	cmp	r2, #0
   1d3d4:	ldrne	r2, [r5, #12]
   1d3d8:	strne	r7, [r2, r4, lsl #2]
   1d3dc:	add	r7, r7, #1
   1d3e0:	add	r4, r4, #1
   1d3e4:	ldr	r2, [r5, #8]
   1d3e8:	str	r3, [r2, r1, lsl #2]
   1d3ec:	cmn	r8, #1
   1d3f0:	addeq	r3, r5, #16
   1d3f4:	addeq	r2, sp, #88	; 0x58
   1d3f8:	ldmdbeq	r2, {r0, r1}
   1d3fc:	stmeq	r3, {r0, r1}
   1d400:	b	1ce88 <__assert_fail@plt+0xb4e8>
   1d404:	mov	r4, r2
   1d408:	b	1ce88 <__assert_fail@plt+0xb4e8>
   1d40c:	ldr	r3, [r1, #4]
   1d410:	str	r3, [r0, #4]
   1d414:	ldr	r2, [r1, #4]
   1d418:	cmp	r2, #0
   1d41c:	ble	1d470 <__assert_fail@plt+0xbad0>
   1d420:	push	{r4, r5, r6, lr}
   1d424:	mov	r5, r1
   1d428:	mov	r4, r0
   1d42c:	str	r3, [r0]
   1d430:	lsl	r0, r3, #2
   1d434:	bl	1b954 <__assert_fail@plt+0x9fb4>
   1d438:	str	r0, [r4, #8]
   1d43c:	cmp	r0, #0
   1d440:	beq	1d45c <__assert_fail@plt+0xbabc>
   1d444:	ldr	r2, [r5, #4]
   1d448:	lsl	r2, r2, #2
   1d44c:	ldr	r1, [r5, #8]
   1d450:	bl	115d4 <memcpy@plt>
   1d454:	mov	r0, #0
   1d458:	pop	{r4, r5, r6, pc}
   1d45c:	mov	r3, #0
   1d460:	str	r3, [r4, #4]
   1d464:	str	r3, [r4]
   1d468:	mov	r0, #12
   1d46c:	pop	{r4, r5, r6, pc}
   1d470:	mov	r3, #0
   1d474:	str	r3, [r0]
   1d478:	str	r3, [r0, #4]
   1d47c:	str	r3, [r0, #8]
   1d480:	mov	r0, r3
   1d484:	bx	lr
   1d488:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d48c:	mov	r8, r0
   1d490:	mov	r5, r2
   1d494:	subs	r7, r1, #0
   1d498:	beq	1d4f0 <__assert_fail@plt+0xbb50>
   1d49c:	ldr	r0, [r7, #4]
   1d4a0:	cmp	r2, #0
   1d4a4:	cmpne	r0, #0
   1d4a8:	ble	1d4e8 <__assert_fail@plt+0xbb48>
   1d4ac:	ldr	r3, [r2, #4]
   1d4b0:	cmp	r3, #0
   1d4b4:	ble	1d4e8 <__assert_fail@plt+0xbb48>
   1d4b8:	add	r0, r0, r3
   1d4bc:	str	r0, [r8]
   1d4c0:	lsl	r0, r0, #2
   1d4c4:	bl	1b954 <__assert_fail@plt+0x9fb4>
   1d4c8:	str	r0, [r8, #8]
   1d4cc:	cmp	r0, #0
   1d4d0:	beq	1d60c <__assert_fail@plt+0xbc6c>
   1d4d4:	mov	r3, #0
   1d4d8:	mov	r2, #1
   1d4dc:	mov	r4, r3
   1d4e0:	mov	r6, r3
   1d4e4:	b	1d554 <__assert_fail@plt+0xbbb4>
   1d4e8:	cmp	r0, #0
   1d4ec:	bgt	1d514 <__assert_fail@plt+0xbb74>
   1d4f0:	cmp	r5, #0
   1d4f4:	beq	1d524 <__assert_fail@plt+0xbb84>
   1d4f8:	ldr	r3, [r5, #4]
   1d4fc:	cmp	r3, #0
   1d500:	ble	1d524 <__assert_fail@plt+0xbb84>
   1d504:	mov	r1, r5
   1d508:	mov	r0, r8
   1d50c:	bl	1d40c <__assert_fail@plt+0xba6c>
   1d510:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d514:	mov	r1, r7
   1d518:	mov	r0, r8
   1d51c:	bl	1d40c <__assert_fail@plt+0xba6c>
   1d520:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d524:	mov	r0, #0
   1d528:	str	r0, [r8]
   1d52c:	str	r0, [r8, #4]
   1d530:	str	r0, [r8, #8]
   1d534:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d538:	cmp	r1, r0
   1d53c:	addeq	r4, r4, #1
   1d540:	add	r6, r6, #1
   1d544:	ldr	r0, [r8, #8]
   1d548:	str	r1, [r0, r3]
   1d54c:	add	r2, r2, #1
   1d550:	add	r3, r3, #4
   1d554:	sub	r0, r2, #1
   1d558:	mov	r9, r0
   1d55c:	ldr	r1, [r7, #4]
   1d560:	cmp	r6, r1
   1d564:	bge	1d5c8 <__assert_fail@plt+0xbc28>
   1d568:	ldr	ip, [r5, #4]
   1d56c:	cmp	r4, ip
   1d570:	bge	1d59c <__assert_fail@plt+0xbbfc>
   1d574:	ldr	r1, [r7, #8]
   1d578:	ldr	r1, [r1, r6, lsl #2]
   1d57c:	ldr	r0, [r5, #8]
   1d580:	ldr	r0, [r0, r4, lsl #2]
   1d584:	cmp	r1, r0
   1d588:	ble	1d538 <__assert_fail@plt+0xbb98>
   1d58c:	add	r4, r4, #1
   1d590:	ldr	r1, [r8, #8]
   1d594:	str	r0, [r1, r3]
   1d598:	b	1d54c <__assert_fail@plt+0xbbac>
   1d59c:	ldr	r3, [r8, #8]
   1d5a0:	sub	r2, r1, r6
   1d5a4:	ldr	r1, [r7, #8]
   1d5a8:	lsl	r2, r2, #2
   1d5ac:	add	r1, r1, r6, lsl #2
   1d5b0:	add	r0, r3, r0, lsl #2
   1d5b4:	bl	115d4 <memcpy@plt>
   1d5b8:	ldr	r3, [r7, #4]
   1d5bc:	sub	r6, r3, r6
   1d5c0:	add	r9, r9, r6
   1d5c4:	b	1d5d4 <__assert_fail@plt+0xbc34>
   1d5c8:	ldr	r2, [r5, #4]
   1d5cc:	cmp	r4, r2
   1d5d0:	blt	1d5e0 <__assert_fail@plt+0xbc40>
   1d5d4:	str	r9, [r8, #4]
   1d5d8:	mov	r0, #0
   1d5dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d5e0:	ldr	r3, [r8, #8]
   1d5e4:	sub	r2, r2, r4
   1d5e8:	ldr	r1, [r5, #8]
   1d5ec:	lsl	r2, r2, #2
   1d5f0:	add	r1, r1, r4, lsl #2
   1d5f4:	add	r0, r3, r0, lsl #2
   1d5f8:	bl	115d4 <memcpy@plt>
   1d5fc:	ldr	r3, [r5, #4]
   1d600:	sub	r4, r3, r4
   1d604:	add	r9, r9, r4
   1d608:	b	1d5d4 <__assert_fail@plt+0xbc34>
   1d60c:	mov	r0, #12
   1d610:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d614:	ldr	r3, [r1, #4]
   1d618:	cmp	r3, #0
   1d61c:	beq	1d7b4 <__assert_fail@plt+0xbe14>
   1d620:	ldr	ip, [r2, #4]
   1d624:	cmp	ip, #0
   1d628:	beq	1d7bc <__assert_fail@plt+0xbe1c>
   1d62c:	push	{r4, r5, r6, r7, r8, lr}
   1d630:	mov	r6, r2
   1d634:	mov	r5, r1
   1d638:	mov	r7, r0
   1d63c:	add	r3, r3, ip
   1d640:	ldr	r4, [r0]
   1d644:	ldr	r2, [r0, #4]
   1d648:	add	r2, r3, r2
   1d64c:	cmp	r2, r4
   1d650:	bgt	1d678 <__assert_fail@plt+0xbcd8>
   1d654:	ldr	r3, [r7, #4]
   1d658:	ldr	r2, [r5, #4]
   1d65c:	ldr	r0, [r6, #4]
   1d660:	add	r1, r3, r2
   1d664:	add	r1, r1, r0
   1d668:	sub	r2, r2, #1
   1d66c:	sub	r0, r0, #1
   1d670:	sub	r3, r3, #1
   1d674:	b	1d704 <__assert_fail@plt+0xbd64>
   1d678:	add	r4, r3, r4
   1d67c:	lsl	r1, r4, #2
   1d680:	ldr	r0, [r0, #8]
   1d684:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1d688:	cmp	r0, #0
   1d68c:	beq	1d7c4 <__assert_fail@plt+0xbe24>
   1d690:	str	r0, [r7, #8]
   1d694:	str	r4, [r7]
   1d698:	b	1d654 <__assert_fail@plt+0xbcb4>
   1d69c:	cmp	r3, #0
   1d6a0:	blt	1d6dc <__assert_fail@plt+0xbd3c>
   1d6a4:	ldr	r8, [r7, #8]
   1d6a8:	add	ip, r8, r3, lsl #2
   1d6ac:	ldr	r4, [r8, r3, lsl #2]
   1d6b0:	cmp	lr, r4
   1d6b4:	bge	1d6d0 <__assert_fail@plt+0xbd30>
   1d6b8:	sub	r3, r3, #1
   1d6bc:	cmn	r3, #1
   1d6c0:	beq	1d7cc <__assert_fail@plt+0xbe2c>
   1d6c4:	ldr	r4, [ip, #-4]!
   1d6c8:	cmp	lr, r4
   1d6cc:	blt	1d6b8 <__assert_fail@plt+0xbd18>
   1d6d0:	ldr	ip, [r8, r3, lsl #2]
   1d6d4:	cmp	lr, ip
   1d6d8:	beq	1d6e8 <__assert_fail@plt+0xbd48>
   1d6dc:	sub	r1, r1, #1
   1d6e0:	ldr	ip, [r7, #8]
   1d6e4:	str	lr, [ip, r1, lsl #2]
   1d6e8:	subs	r2, r2, #1
   1d6ec:	bmi	1d72c <__assert_fail@plt+0xbd8c>
   1d6f0:	subs	r0, r0, #1
   1d6f4:	bpl	1d704 <__assert_fail@plt+0xbd64>
   1d6f8:	b	1d72c <__assert_fail@plt+0xbd8c>
   1d6fc:	subs	r2, r2, #1
   1d700:	bmi	1d72c <__assert_fail@plt+0xbd8c>
   1d704:	ldr	ip, [r5, #8]
   1d708:	ldr	lr, [ip, r2, lsl #2]
   1d70c:	ldr	ip, [r6, #8]
   1d710:	ldr	ip, [ip, r0, lsl #2]
   1d714:	cmp	lr, ip
   1d718:	beq	1d69c <__assert_fail@plt+0xbcfc>
   1d71c:	cmp	lr, ip
   1d720:	bge	1d6fc <__assert_fail@plt+0xbd5c>
   1d724:	subs	r0, r0, #1
   1d728:	bpl	1d704 <__assert_fail@plt+0xbd64>
   1d72c:	ldr	r3, [r7, #4]
   1d730:	sub	r0, r3, #1
   1d734:	ldr	r2, [r5, #4]
   1d738:	add	r2, r3, r2
   1d73c:	ldr	ip, [r6, #4]
   1d740:	add	r2, r2, ip
   1d744:	sub	r4, r2, #1
   1d748:	sub	r2, r2, r1
   1d74c:	add	r3, r3, r2
   1d750:	str	r3, [r7, #4]
   1d754:	cmp	r0, #0
   1d758:	cmpge	r2, #0
   1d75c:	bgt	1d788 <__assert_fail@plt+0xbde8>
   1d760:	ldr	r0, [r7, #8]
   1d764:	lsl	r2, r2, #2
   1d768:	add	r1, r0, r1, lsl #2
   1d76c:	bl	115d4 <memcpy@plt>
   1d770:	mov	r0, #0
   1d774:	pop	{r4, r5, r6, r7, r8, pc}
   1d778:	add	lr, r0, r2
   1d77c:	str	ip, [r3, lr, lsl #2]
   1d780:	subs	r0, r0, #1
   1d784:	bmi	1d760 <__assert_fail@plt+0xbdc0>
   1d788:	ldr	r3, [r7, #8]
   1d78c:	ldr	lr, [r3, r4, lsl #2]
   1d790:	ldr	ip, [r3, r0, lsl #2]
   1d794:	cmp	lr, ip
   1d798:	ble	1d778 <__assert_fail@plt+0xbdd8>
   1d79c:	sub	r4, r4, #1
   1d7a0:	add	ip, r0, r2
   1d7a4:	str	lr, [r3, ip, lsl #2]
   1d7a8:	subs	r2, r2, #1
   1d7ac:	bne	1d788 <__assert_fail@plt+0xbde8>
   1d7b0:	b	1d760 <__assert_fail@plt+0xbdc0>
   1d7b4:	mov	r0, #0
   1d7b8:	bx	lr
   1d7bc:	mov	r0, #0
   1d7c0:	bx	lr
   1d7c4:	mov	r0, #12
   1d7c8:	pop	{r4, r5, r6, r7, r8, pc}
   1d7cc:	mvn	r3, #0
   1d7d0:	b	1d6dc <__assert_fail@plt+0xbd3c>
   1d7d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d7d8:	mov	r6, r0
   1d7dc:	ldr	r8, [r0, #36]	; 0x24
   1d7e0:	ldr	r3, [r0, #48]	; 0x30
   1d7e4:	cmp	r8, r3
   1d7e8:	movge	r8, r3
   1d7ec:	ldr	r4, [r0, #28]
   1d7f0:	cmp	r8, r4
   1d7f4:	ble	1d850 <__assert_fail@plt+0xbeb0>
   1d7f8:	ldr	r9, [pc, #92]	; 1d85c <__assert_fail@plt+0xbebc>
   1d7fc:	b	1d810 <__assert_fail@plt+0xbe70>
   1d800:	strb	r5, [r7]
   1d804:	add	r4, r4, #1
   1d808:	cmp	r8, r4
   1d80c:	beq	1d850 <__assert_fail@plt+0xbeb0>
   1d810:	ldr	r3, [r6]
   1d814:	ldr	r2, [r6, #24]
   1d818:	add	r3, r3, r4
   1d81c:	ldrb	r5, [r3, r2]
   1d820:	ldr	r3, [r6, #64]	; 0x40
   1d824:	cmp	r3, #0
   1d828:	ldrbne	r5, [r3, r5]
   1d82c:	ldr	r7, [r6, #4]
   1d830:	add	r7, r7, r4
   1d834:	add	r3, r5, #128	; 0x80
   1d838:	cmp	r3, r9
   1d83c:	bhi	1d800 <__assert_fail@plt+0xbe60>
   1d840:	bl	11754 <__ctype_toupper_loc@plt>
   1d844:	ldr	r3, [r0]
   1d848:	ldr	r5, [r3, r5, lsl #2]
   1d84c:	b	1d800 <__assert_fail@plt+0xbe60>
   1d850:	str	r4, [r6, #28]
   1d854:	str	r4, [r6, #32]
   1d858:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d85c:	andeq	r0, r0, pc, ror r1
   1d860:	push	{r4, r5, r6, lr}
   1d864:	ldr	r3, [r0, #36]	; 0x24
   1d868:	cmn	r3, #-536870910	; 0xe0000002
   1d86c:	bhi	1d928 <__assert_fail@plt+0xbf88>
   1d870:	mov	r4, r0
   1d874:	lsl	r3, r3, #1
   1d878:	ldr	r2, [r0, #48]	; 0x30
   1d87c:	cmp	r3, r2
   1d880:	movge	r3, r2
   1d884:	cmp	r3, r1
   1d888:	movge	r1, r3
   1d88c:	bl	1c6e4 <__assert_fail@plt+0xad44>
   1d890:	subs	r5, r0, #0
   1d894:	bne	1d8e4 <__assert_fail@plt+0xbf44>
   1d898:	ldr	r0, [r4, #100]	; 0x64
   1d89c:	cmp	r0, #0
   1d8a0:	beq	1d8c0 <__assert_fail@plt+0xbf20>
   1d8a4:	ldr	r1, [r4, #36]	; 0x24
   1d8a8:	add	r1, r1, #1
   1d8ac:	lsl	r1, r1, #2
   1d8b0:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1d8b4:	cmp	r0, #0
   1d8b8:	beq	1d930 <__assert_fail@plt+0xbf90>
   1d8bc:	str	r0, [r4, #100]	; 0x64
   1d8c0:	ldrb	r3, [r4, #72]	; 0x48
   1d8c4:	cmp	r3, #0
   1d8c8:	beq	1d8f8 <__assert_fail@plt+0xbf58>
   1d8cc:	ldr	r3, [r4, #80]	; 0x50
   1d8d0:	cmp	r3, #1
   1d8d4:	ble	1d8ec <__assert_fail@plt+0xbf4c>
   1d8d8:	mov	r0, r4
   1d8dc:	bl	1ce4c <__assert_fail@plt+0xb4ac>
   1d8e0:	mov	r5, r0
   1d8e4:	mov	r0, r5
   1d8e8:	pop	{r4, r5, r6, pc}
   1d8ec:	mov	r0, r4
   1d8f0:	bl	1d7d4 <__assert_fail@plt+0xbe34>
   1d8f4:	b	1d8e4 <__assert_fail@plt+0xbf44>
   1d8f8:	ldr	r3, [r4, #80]	; 0x50
   1d8fc:	cmp	r3, #1
   1d900:	bgt	1d91c <__assert_fail@plt+0xbf7c>
   1d904:	ldr	r3, [r4, #64]	; 0x40
   1d908:	cmp	r3, #0
   1d90c:	beq	1d8e4 <__assert_fail@plt+0xbf44>
   1d910:	mov	r0, r4
   1d914:	bl	1bb08 <__assert_fail@plt+0xa168>
   1d918:	b	1d8e4 <__assert_fail@plt+0xbf44>
   1d91c:	mov	r0, r4
   1d920:	bl	1ccb0 <__assert_fail@plt+0xb310>
   1d924:	b	1d8e4 <__assert_fail@plt+0xbf44>
   1d928:	mov	r5, #12
   1d92c:	b	1d8e4 <__assert_fail@plt+0xbf44>
   1d930:	mov	r5, #12
   1d934:	b	1d8e4 <__assert_fail@plt+0xbf44>
   1d938:	ldr	r3, [r1, #40]	; 0x28
   1d93c:	ldr	ip, [r1, #56]	; 0x38
   1d940:	cmp	ip, r3
   1d944:	ble	1dbd0 <__assert_fail@plt+0xc230>
   1d948:	push	{r4, r5, r6, r7, r8, lr}
   1d94c:	sub	sp, sp, #8
   1d950:	ldr	ip, [r1, #4]
   1d954:	ldrb	r6, [ip, r3]
   1d958:	strb	r6, [r0]
   1d95c:	ldrb	r3, [r0, #6]
   1d960:	and	r3, r3, #159	; 0x9f
   1d964:	strb	r3, [r0, #6]
   1d968:	ldr	r3, [r1, #80]	; 0x50
   1d96c:	cmp	r3, #1
   1d970:	ble	1d994 <__assert_fail@plt+0xbff4>
   1d974:	ldr	ip, [r1, #40]	; 0x28
   1d978:	ldr	lr, [r1, #28]
   1d97c:	cmp	ip, lr
   1d980:	beq	1d994 <__assert_fail@plt+0xbff4>
   1d984:	ldr	lr, [r1, #8]
   1d988:	ldr	ip, [lr, ip, lsl #2]
   1d98c:	cmn	ip, #1
   1d990:	beq	1dbe0 <__assert_fail@plt+0xc240>
   1d994:	mov	r7, r2
   1d998:	mov	r4, r1
   1d99c:	mov	r5, r0
   1d9a0:	cmp	r6, #92	; 0x5c
   1d9a4:	beq	1dc00 <__assert_fail@plt+0xc260>
   1d9a8:	mov	r3, #1
   1d9ac:	strb	r3, [r0, #4]
   1d9b0:	ldr	r3, [r1, #80]	; 0x50
   1d9b4:	cmp	r3, #1
   1d9b8:	ble	1e0c0 <__assert_fail@plt+0xc720>
   1d9bc:	ldr	r1, [r1, #40]	; 0x28
   1d9c0:	mov	r0, r4
   1d9c4:	bl	1baec <__assert_fail@plt+0xa14c>
   1d9c8:	mov	r8, r0
   1d9cc:	bl	117e4 <iswalnum@plt>
   1d9d0:	adds	r3, r0, #0
   1d9d4:	movne	r3, #1
   1d9d8:	ldrb	r0, [r5, #6]
   1d9dc:	cmp	r8, #95	; 0x5f
   1d9e0:	orreq	r3, r3, #1
   1d9e4:	bic	r0, r0, #64	; 0x40
   1d9e8:	orr	r0, r0, r3, lsl #6
   1d9ec:	strb	r0, [r5, #6]
   1d9f0:	sub	r6, r6, #10
   1d9f4:	cmp	r6, #115	; 0x73
   1d9f8:	ldrls	pc, [pc, r6, lsl #2]
   1d9fc:	b	1e2d0 <__assert_fail@plt+0xc930>
   1da00:	strdeq	lr, [r1], -r4
   1da04:	ldrdeq	lr, [r1], -r0
   1da08:	ldrdeq	lr, [r1], -r0
   1da0c:	ldrdeq	lr, [r1], -r0
   1da10:	ldrdeq	lr, [r1], -r0
   1da14:	ldrdeq	lr, [r1], -r0
   1da18:	ldrdeq	lr, [r1], -r0
   1da1c:	ldrdeq	lr, [r1], -r0
   1da20:	ldrdeq	lr, [r1], -r0
   1da24:	ldrdeq	lr, [r1], -r0
   1da28:	ldrdeq	lr, [r1], -r0
   1da2c:	ldrdeq	lr, [r1], -r0
   1da30:	ldrdeq	lr, [r1], -r0
   1da34:	ldrdeq	lr, [r1], -r0
   1da38:	ldrdeq	lr, [r1], -r0
   1da3c:	ldrdeq	lr, [r1], -r0
   1da40:	ldrdeq	lr, [r1], -r0
   1da44:	ldrdeq	lr, [r1], -r0
   1da48:	ldrdeq	lr, [r1], -r0
   1da4c:	ldrdeq	lr, [r1], -r0
   1da50:	ldrdeq	lr, [r1], -r0
   1da54:	ldrdeq	lr, [r1], -r0
   1da58:	ldrdeq	lr, [r1], -r0
   1da5c:	ldrdeq	lr, [r1], -r0
   1da60:	ldrdeq	lr, [r1], -r0
   1da64:	ldrdeq	lr, [r1], -r0
   1da68:	andeq	lr, r1, ip, asr r2
   1da6c:	ldrdeq	lr, [r1], -r0
   1da70:	ldrdeq	lr, [r1], -r0
   1da74:	ldrdeq	lr, [r1], -r0
   1da78:			; <UNDEFINED> instruction: 0x0001e1b0
   1da7c:	andeq	lr, r1, r8, asr #3
   1da80:	andeq	lr, r1, r8, lsr #2
   1da84:	andeq	lr, r1, r8, lsr r1
   1da88:	ldrdeq	lr, [r1], -r0
   1da8c:	ldrdeq	lr, [r1], -r0
   1da90:	strdeq	lr, [r1], -r0
   1da94:	ldrdeq	lr, [r1], -r0
   1da98:	ldrdeq	lr, [r1], -r0
   1da9c:	ldrdeq	lr, [r1], -r0
   1daa0:	ldrdeq	lr, [r1], -r0
   1daa4:	ldrdeq	lr, [r1], -r0
   1daa8:	ldrdeq	lr, [r1], -r0
   1daac:	ldrdeq	lr, [r1], -r0
   1dab0:	ldrdeq	lr, [r1], -r0
   1dab4:	ldrdeq	lr, [r1], -r0
   1dab8:	ldrdeq	lr, [r1], -r0
   1dabc:	ldrdeq	lr, [r1], -r0
   1dac0:	ldrdeq	lr, [r1], -r0
   1dac4:	ldrdeq	lr, [r1], -r0
   1dac8:	ldrdeq	lr, [r1], -r0
   1dacc:	ldrdeq	lr, [r1], -r0
   1dad0:	ldrdeq	lr, [r1], -r0
   1dad4:	andeq	lr, r1, r8, asr r1
   1dad8:	ldrdeq	lr, [r1], -r0
   1dadc:	ldrdeq	lr, [r1], -r0
   1dae0:	ldrdeq	lr, [r1], -r0
   1dae4:	ldrdeq	lr, [r1], -r0
   1dae8:	ldrdeq	lr, [r1], -r0
   1daec:	ldrdeq	lr, [r1], -r0
   1daf0:	ldrdeq	lr, [r1], -r0
   1daf4:	ldrdeq	lr, [r1], -r0
   1daf8:	ldrdeq	lr, [r1], -r0
   1dafc:	ldrdeq	lr, [r1], -r0
   1db00:	ldrdeq	lr, [r1], -r0
   1db04:	ldrdeq	lr, [r1], -r0
   1db08:	ldrdeq	lr, [r1], -r0
   1db0c:	ldrdeq	lr, [r1], -r0
   1db10:	ldrdeq	lr, [r1], -r0
   1db14:	ldrdeq	lr, [r1], -r0
   1db18:	ldrdeq	lr, [r1], -r0
   1db1c:	ldrdeq	lr, [r1], -r0
   1db20:	ldrdeq	lr, [r1], -r0
   1db24:	ldrdeq	lr, [r1], -r0
   1db28:	ldrdeq	lr, [r1], -r0
   1db2c:	ldrdeq	lr, [r1], -r0
   1db30:	ldrdeq	lr, [r1], -r0
   1db34:	ldrdeq	lr, [r1], -r0
   1db38:	ldrdeq	lr, [r1], -r0
   1db3c:	ldrdeq	lr, [r1], -r0
   1db40:	ldrdeq	lr, [r1], -r0
   1db44:	andeq	lr, r1, r0, ror #3
   1db48:	ldrdeq	lr, [r1], -r0
   1db4c:	ldrdeq	lr, [r1], -r0
   1db50:	andeq	lr, r1, r0, lsl #4
   1db54:	ldrdeq	lr, [r1], -r0
   1db58:	ldrdeq	lr, [r1], -r0
   1db5c:	ldrdeq	lr, [r1], -r0
   1db60:	ldrdeq	lr, [r1], -r0
   1db64:	ldrdeq	lr, [r1], -r0
   1db68:	ldrdeq	lr, [r1], -r0
   1db6c:	ldrdeq	lr, [r1], -r0
   1db70:	ldrdeq	lr, [r1], -r0
   1db74:	ldrdeq	lr, [r1], -r0
   1db78:	ldrdeq	lr, [r1], -r0
   1db7c:	ldrdeq	lr, [r1], -r0
   1db80:	ldrdeq	lr, [r1], -r0
   1db84:	ldrdeq	lr, [r1], -r0
   1db88:	ldrdeq	lr, [r1], -r0
   1db8c:	ldrdeq	lr, [r1], -r0
   1db90:	ldrdeq	lr, [r1], -r0
   1db94:	ldrdeq	lr, [r1], -r0
   1db98:	ldrdeq	lr, [r1], -r0
   1db9c:	ldrdeq	lr, [r1], -r0
   1dba0:	ldrdeq	lr, [r1], -r0
   1dba4:	ldrdeq	lr, [r1], -r0
   1dba8:	ldrdeq	lr, [r1], -r0
   1dbac:	ldrdeq	lr, [r1], -r0
   1dbb0:	ldrdeq	lr, [r1], -r0
   1dbb4:	ldrdeq	lr, [r1], -r0
   1dbb8:	ldrdeq	lr, [r1], -r0
   1dbbc:	ldrdeq	lr, [r1], -r0
   1dbc0:	ldrdeq	lr, [r1], -r0
   1dbc4:	andeq	lr, r1, r8, ror r1
   1dbc8:	andeq	lr, r1, ip, lsl #2
   1dbcc:	muleq	r1, r4, r1
   1dbd0:	mov	r3, #2
   1dbd4:	strb	r3, [r0, #4]
   1dbd8:	mov	r0, #0
   1dbdc:	bx	lr
   1dbe0:	mov	r3, #1
   1dbe4:	strb	r3, [r0, #4]
   1dbe8:	ldrb	r2, [r0, #6]
   1dbec:	orr	r2, r2, #32
   1dbf0:	strb	r2, [r0, #6]
   1dbf4:	mov	r0, r3
   1dbf8:	add	sp, sp, #8
   1dbfc:	pop	{r4, r5, r6, r7, r8, pc}
   1dc00:	ldr	r1, [r1, #40]	; 0x28
   1dc04:	add	r2, r1, #1
   1dc08:	ldr	r0, [r4, #48]	; 0x30
   1dc0c:	cmp	r2, r0
   1dc10:	bge	1dde4 <__assert_fail@plt+0xc444>
   1dc14:	ldrb	r0, [r4, #75]	; 0x4b
   1dc18:	cmp	r0, #0
   1dc1c:	bne	1ddf4 <__assert_fail@plt+0xc454>
   1dc20:	ldr	r3, [r4, #4]
   1dc24:	ldrb	r6, [r3, r2]
   1dc28:	strb	r6, [r5]
   1dc2c:	mov	r3, #1
   1dc30:	strb	r3, [r5, #4]
   1dc34:	ldr	r3, [r4, #80]	; 0x50
   1dc38:	cmp	r3, #1
   1dc3c:	ble	1de70 <__assert_fail@plt+0xc4d0>
   1dc40:	ldr	r1, [r4, #40]	; 0x28
   1dc44:	add	r1, r1, #1
   1dc48:	mov	r0, r4
   1dc4c:	bl	1baec <__assert_fail@plt+0xa14c>
   1dc50:	mov	r4, r0
   1dc54:	bl	117e4 <iswalnum@plt>
   1dc58:	adds	r3, r0, #0
   1dc5c:	movne	r3, #1
   1dc60:	ldrb	r0, [r5, #6]
   1dc64:	cmp	r4, #95	; 0x5f
   1dc68:	orreq	r3, r3, #1
   1dc6c:	bic	r0, r0, #64	; 0x40
   1dc70:	orr	r0, r0, r3, lsl #6
   1dc74:	strb	r0, [r5, #6]
   1dc78:	sub	r3, r6, #39	; 0x27
   1dc7c:	cmp	r3, #86	; 0x56
   1dc80:	ldrls	pc, [pc, r3, lsl #2]
   1dc84:	b	1e2c8 <__assert_fail@plt+0xc928>
   1dc88:	strdeq	sp, [r1], -r4
   1dc8c:	andeq	lr, r1, r8, lsl r0
   1dc90:	andeq	lr, r1, r0, lsr r0
   1dc94:	andeq	lr, r1, r8, asr #5
   1dc98:	andeq	lr, r1, r8, asr #32
   1dc9c:	andeq	lr, r1, r8, asr #5
   1dca0:	andeq	lr, r1, r8, asr #5
   1dca4:	andeq	lr, r1, r8, asr #5
   1dca8:	andeq	lr, r1, r8, asr #5
   1dcac:	andeq	lr, r1, r8, asr #5
   1dcb0:			; <UNDEFINED> instruction: 0x0001debc
   1dcb4:			; <UNDEFINED> instruction: 0x0001debc
   1dcb8:			; <UNDEFINED> instruction: 0x0001debc
   1dcbc:			; <UNDEFINED> instruction: 0x0001debc
   1dcc0:			; <UNDEFINED> instruction: 0x0001debc
   1dcc4:			; <UNDEFINED> instruction: 0x0001debc
   1dcc8:			; <UNDEFINED> instruction: 0x0001debc
   1dccc:			; <UNDEFINED> instruction: 0x0001debc
   1dcd0:			; <UNDEFINED> instruction: 0x0001debc
   1dcd4:	andeq	lr, r1, r8, asr #5
   1dcd8:	andeq	lr, r1, r8, asr #5
   1dcdc:	andeq	sp, r1, r0, ror #29
   1dce0:	andeq	lr, r1, r8, asr #5
   1dce4:	andeq	sp, r1, r4, lsl #30
   1dce8:	andeq	lr, r1, r8, rrx
   1dcec:	andeq	lr, r1, r8, asr #5
   1dcf0:	andeq	lr, r1, r8, asr #5
   1dcf4:	andeq	sp, r1, ip, asr #30
   1dcf8:	andeq	lr, r1, r8, asr #5
   1dcfc:	andeq	lr, r1, r8, asr #5
   1dd00:	andeq	lr, r1, r8, asr #5
   1dd04:	andeq	lr, r1, r8, asr #5
   1dd08:	andeq	lr, r1, r8, asr #5
   1dd0c:	andeq	lr, r1, r8, asr #5
   1dd10:	andeq	lr, r1, r8, asr #5
   1dd14:	andeq	lr, r1, r8, asr #5
   1dd18:	andeq	lr, r1, r8, asr #5
   1dd1c:	andeq	lr, r1, r8, asr #5
   1dd20:	andeq	lr, r1, r8, asr #5
   1dd24:	andeq	lr, r1, r8, asr #5
   1dd28:	andeq	lr, r1, r8, asr #5
   1dd2c:	andeq	lr, r1, r8, asr #5
   1dd30:	andeq	lr, r1, r8, asr #5
   1dd34:	andeq	lr, r1, r8, asr #5
   1dd38:			; <UNDEFINED> instruction: 0x0001dfb8
   1dd3c:	andeq	lr, r1, r8, asr #5
   1dd40:	andeq	lr, r1, r8, asr #5
   1dd44:	andeq	lr, r1, r8, asr #5
   1dd48:	andeq	sp, r1, r8, lsl #31
   1dd4c:	andeq	lr, r1, r8, asr #5
   1dd50:	andeq	lr, r1, r8, asr #5
   1dd54:	andeq	lr, r1, r8, asr #5
   1dd58:	andeq	lr, r1, r8, asr #5
   1dd5c:	andeq	lr, r1, r8, asr #5
   1dd60:	andeq	lr, r1, r8, asr #5
   1dd64:	andeq	lr, r1, r8, asr #5
   1dd68:	andeq	lr, r1, r8, asr #5
   1dd6c:	ldrdeq	sp, [r1], -r0
   1dd70:	andeq	lr, r1, r8, asr #5
   1dd74:	andeq	sp, r1, r8, lsr #30
   1dd78:	andeq	lr, r1, r8, asr #5
   1dd7c:	andeq	lr, r1, r8, asr #5
   1dd80:	andeq	lr, r1, r8, asr #5
   1dd84:	andeq	lr, r1, r8, asr #5
   1dd88:	andeq	lr, r1, r8, asr #5
   1dd8c:	andeq	lr, r1, r8, asr #5
   1dd90:	andeq	lr, r1, r8, asr #5
   1dd94:	andeq	lr, r1, r8, asr #5
   1dd98:	andeq	lr, r1, r8, asr #5
   1dd9c:	andeq	lr, r1, r8, asr #5
   1dda0:	andeq	lr, r1, r8, asr #5
   1dda4:	andeq	lr, r1, r8, asr #5
   1dda8:	andeq	lr, r1, r8, asr #5
   1ddac:	andeq	lr, r1, r8, asr #5
   1ddb0:	andeq	lr, r1, r8, asr #5
   1ddb4:	andeq	lr, r1, r8, asr #5
   1ddb8:	andeq	sp, r1, r0, lsr #31
   1ddbc:	andeq	lr, r1, r8, asr #5
   1ddc0:	andeq	lr, r1, r8, asr #5
   1ddc4:	andeq	lr, r1, r8, asr #5
   1ddc8:	andeq	sp, r1, r0, ror pc
   1ddcc:	andeq	lr, r1, r8, asr #5
   1ddd0:	andeq	lr, r1, r8, asr #5
   1ddd4:	andeq	lr, r1, r8, asr #5
   1ddd8:	andeq	lr, r1, r8, lsl #1
   1dddc:	andeq	sp, r1, r4, lsr #29
   1dde0:	andeq	lr, r1, r4, lsr #1
   1dde4:	mov	r3, #36	; 0x24
   1dde8:	strb	r3, [r5, #4]
   1ddec:	mov	r0, #1
   1ddf0:	b	1dbf8 <__assert_fail@plt+0xc258>
   1ddf4:	cmp	r3, #1
   1ddf8:	ble	1de30 <__assert_fail@plt+0xc490>
   1ddfc:	ldr	r3, [r4, #8]
   1de00:	lsl	ip, r2, #2
   1de04:	ldr	r0, [r3, r2, lsl #2]
   1de08:	cmn	r0, #1
   1de0c:	beq	1de64 <__assert_fail@plt+0xc4c4>
   1de10:	add	r1, r1, #2
   1de14:	ldr	r0, [r4, #28]
   1de18:	cmp	r0, r1
   1de1c:	beq	1de30 <__assert_fail@plt+0xc490>
   1de20:	add	r3, r3, ip
   1de24:	ldr	r3, [r3, #4]
   1de28:	cmn	r3, #1
   1de2c:	beq	1de64 <__assert_fail@plt+0xc4c4>
   1de30:	ldrb	r3, [r4, #76]	; 0x4c
   1de34:	cmp	r3, #0
   1de38:	beq	1e2d8 <__assert_fail@plt+0xc938>
   1de3c:	ldr	r1, [r4, #12]
   1de40:	ldr	r3, [r4]
   1de44:	ldr	r0, [r1, r2, lsl #2]
   1de48:	ldr	r1, [r4, #24]
   1de4c:	add	r3, r3, r0
   1de50:	ldrb	r6, [r3, r1]
   1de54:	bics	r3, r6, #127	; 0x7f
   1de58:	ldrne	r3, [r4, #4]
   1de5c:	ldrbne	r6, [r3, r2]
   1de60:	b	1dc28 <__assert_fail@plt+0xc288>
   1de64:	ldr	r3, [r4, #4]
   1de68:	ldrb	r6, [r3, r2]
   1de6c:	b	1dc28 <__assert_fail@plt+0xc288>
   1de70:	bl	11778 <__ctype_b_loc@plt>
   1de74:	ldr	r2, [r0]
   1de78:	lsl	r3, r6, #1
   1de7c:	ldrh	r3, [r2, r3]
   1de80:	lsr	r3, r3, #3
   1de84:	and	r3, r3, #1
   1de88:	ldrb	r2, [r5, #6]
   1de8c:	cmp	r6, #95	; 0x5f
   1de90:	orreq	r3, r3, #1
   1de94:	bic	r2, r2, #64	; 0x40
   1de98:	orr	r3, r2, r3, lsl #6
   1de9c:	strb	r3, [r5, #6]
   1dea0:	b	1dc78 <__assert_fail@plt+0xc2d8>
   1dea4:	tst	r7, #33792	; 0x8400
   1dea8:	movne	r0, #2
   1deac:	moveq	r3, #10
   1deb0:	strbeq	r3, [r5, #4]
   1deb4:	moveq	r0, #2
   1deb8:	b	1dbf8 <__assert_fail@plt+0xc258>
   1debc:	tst	r7, #16384	; 0x4000
   1dec0:	movne	r0, #2
   1dec4:	bne	1dbf8 <__assert_fail@plt+0xc258>
   1dec8:	mov	r3, #4
   1decc:	strb	r3, [r5, #4]
   1ded0:	sub	r6, r6, #49	; 0x31
   1ded4:	str	r6, [r5]
   1ded8:	mov	r0, #2
   1dedc:	b	1dbf8 <__assert_fail@plt+0xc258>
   1dee0:	tst	r7, #524288	; 0x80000
   1dee4:	movne	r0, #2
   1dee8:	bne	1dbf8 <__assert_fail@plt+0xc258>
   1deec:	mov	r3, #12
   1def0:	strb	r3, [r5, #4]
   1def4:	mov	r3, #6
   1def8:	str	r3, [r5]
   1defc:	mov	r0, #2
   1df00:	b	1dbf8 <__assert_fail@plt+0xc258>
   1df04:	tst	r7, #524288	; 0x80000
   1df08:	movne	r0, #2
   1df0c:	bne	1dbf8 <__assert_fail@plt+0xc258>
   1df10:	mov	r3, #12
   1df14:	strb	r3, [r5, #4]
   1df18:	mov	r3, #9
   1df1c:	str	r3, [r5]
   1df20:	mov	r0, #2
   1df24:	b	1dbf8 <__assert_fail@plt+0xc258>
   1df28:	tst	r7, #524288	; 0x80000
   1df2c:	movne	r0, #2
   1df30:	bne	1dbf8 <__assert_fail@plt+0xc258>
   1df34:	mov	r3, #12
   1df38:	strb	r3, [r5, #4]
   1df3c:	mov	r3, #256	; 0x100
   1df40:	str	r3, [r5]
   1df44:	mov	r0, #2
   1df48:	b	1dbf8 <__assert_fail@plt+0xc258>
   1df4c:	tst	r7, #524288	; 0x80000
   1df50:	movne	r0, #2
   1df54:	bne	1dbf8 <__assert_fail@plt+0xc258>
   1df58:	mov	r3, #12
   1df5c:	strb	r3, [r5, #4]
   1df60:	mov	r3, #512	; 0x200
   1df64:	str	r3, [r5]
   1df68:	mov	r0, #2
   1df6c:	b	1dbf8 <__assert_fail@plt+0xc258>
   1df70:	tst	r7, #524288	; 0x80000
   1df74:	movne	r0, #2
   1df78:	moveq	r3, #32
   1df7c:	strbeq	r3, [r5, #4]
   1df80:	moveq	r0, #2
   1df84:	b	1dbf8 <__assert_fail@plt+0xc258>
   1df88:	tst	r7, #524288	; 0x80000
   1df8c:	movne	r0, #2
   1df90:	moveq	r3, #33	; 0x21
   1df94:	strbeq	r3, [r5, #4]
   1df98:	moveq	r0, #2
   1df9c:	b	1dbf8 <__assert_fail@plt+0xc258>
   1dfa0:	tst	r7, #524288	; 0x80000
   1dfa4:	movne	r0, #2
   1dfa8:	moveq	r3, #34	; 0x22
   1dfac:	strbeq	r3, [r5, #4]
   1dfb0:	moveq	r0, #2
   1dfb4:	b	1dbf8 <__assert_fail@plt+0xc258>
   1dfb8:	tst	r7, #524288	; 0x80000
   1dfbc:	movne	r0, #2
   1dfc0:	moveq	r3, #35	; 0x23
   1dfc4:	strbeq	r3, [r5, #4]
   1dfc8:	moveq	r0, #2
   1dfcc:	b	1dbf8 <__assert_fail@plt+0xc258>
   1dfd0:	tst	r7, #524288	; 0x80000
   1dfd4:	movne	r0, #2
   1dfd8:	bne	1dbf8 <__assert_fail@plt+0xc258>
   1dfdc:	mov	r3, #12
   1dfe0:	strb	r3, [r5, #4]
   1dfe4:	mov	r3, #64	; 0x40
   1dfe8:	str	r3, [r5]
   1dfec:	mov	r0, #2
   1dff0:	b	1dbf8 <__assert_fail@plt+0xc258>
   1dff4:	tst	r7, #524288	; 0x80000
   1dff8:	movne	r0, #2
   1dffc:	bne	1dbf8 <__assert_fail@plt+0xc258>
   1e000:	mov	r3, #12
   1e004:	strb	r3, [r5, #4]
   1e008:	mov	r3, #128	; 0x80
   1e00c:	str	r3, [r5]
   1e010:	mov	r0, #2
   1e014:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e018:	tst	r7, #8192	; 0x2000
   1e01c:	movne	r0, #2
   1e020:	moveq	r3, #8
   1e024:	strbeq	r3, [r5, #4]
   1e028:	moveq	r0, #2
   1e02c:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e030:	tst	r7, #8192	; 0x2000
   1e034:	movne	r0, #2
   1e038:	moveq	r3, #9
   1e03c:	strbeq	r3, [r5, #4]
   1e040:	moveq	r0, #2
   1e044:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e048:	ldr	r3, [pc, #668]	; 1e2ec <__assert_fail@plt+0xc94c>
   1e04c:	and	r3, r3, r7
   1e050:	cmp	r3, #2
   1e054:	moveq	r3, #18
   1e058:	strbeq	r3, [r5, #4]
   1e05c:	moveq	r0, #2
   1e060:	movne	r0, #2
   1e064:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e068:	ldr	r3, [pc, #636]	; 1e2ec <__assert_fail@plt+0xc94c>
   1e06c:	and	r3, r3, r7
   1e070:	cmp	r3, #2
   1e074:	moveq	r3, #19
   1e078:	strbeq	r3, [r5, #4]
   1e07c:	moveq	r0, #2
   1e080:	movne	r0, #2
   1e084:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e088:	and	r7, r7, #4608	; 0x1200
   1e08c:	cmp	r7, #512	; 0x200
   1e090:	moveq	r3, #23
   1e094:	strbeq	r3, [r5, #4]
   1e098:	moveq	r0, #2
   1e09c:	movne	r0, #2
   1e0a0:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e0a4:	and	r7, r7, #4608	; 0x1200
   1e0a8:	cmp	r7, #512	; 0x200
   1e0ac:	moveq	r3, #24
   1e0b0:	strbeq	r3, [r5, #4]
   1e0b4:	moveq	r0, #2
   1e0b8:	movne	r0, #2
   1e0bc:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e0c0:	bl	11778 <__ctype_b_loc@plt>
   1e0c4:	ldr	r2, [r0]
   1e0c8:	lsl	r3, r6, #1
   1e0cc:	ldrh	r3, [r2, r3]
   1e0d0:	lsr	r3, r3, #3
   1e0d4:	and	r3, r3, #1
   1e0d8:	ldrb	r2, [r5, #6]
   1e0dc:	cmp	r6, #95	; 0x5f
   1e0e0:	orreq	r3, r3, #1
   1e0e4:	bic	r2, r2, #64	; 0x40
   1e0e8:	orr	r3, r2, r3, lsl #6
   1e0ec:	strb	r3, [r5, #6]
   1e0f0:	b	1d9f0 <__assert_fail@plt+0xc050>
   1e0f4:	tst	r7, #2048	; 0x800
   1e0f8:	moveq	r0, #1
   1e0fc:	movne	r3, #10
   1e100:	strbne	r3, [r5, #4]
   1e104:	movne	r0, #1
   1e108:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e10c:	and	r7, r7, #33792	; 0x8400
   1e110:	cmp	r7, #32768	; 0x8000
   1e114:	moveq	r3, #10
   1e118:	strbeq	r3, [r5, #4]
   1e11c:	moveq	r0, #1
   1e120:	movne	r0, #1
   1e124:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e128:	mov	r3, #11
   1e12c:	strb	r3, [r5, #4]
   1e130:	mov	r0, #1
   1e134:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e138:	ldr	r3, [pc, #428]	; 1e2ec <__assert_fail@plt+0xc94c>
   1e13c:	and	r3, r3, r7
   1e140:	cmp	r3, #0
   1e144:	movne	r0, #1
   1e148:	moveq	r3, #18
   1e14c:	strbeq	r3, [r5, #4]
   1e150:	moveq	r0, #1
   1e154:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e158:	ldr	r3, [pc, #396]	; 1e2ec <__assert_fail@plt+0xc94c>
   1e15c:	and	r3, r3, r7
   1e160:	cmp	r3, #0
   1e164:	movne	r0, #1
   1e168:	moveq	r3, #19
   1e16c:	strbeq	r3, [r5, #4]
   1e170:	moveq	r0, #1
   1e174:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e178:	and	r7, r7, #4608	; 0x1200
   1e17c:	cmp	r7, #4608	; 0x1200
   1e180:	moveq	r3, #23
   1e184:	strbeq	r3, [r5, #4]
   1e188:	moveq	r0, #1
   1e18c:	movne	r0, #1
   1e190:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e194:	and	r7, r7, #4608	; 0x1200
   1e198:	cmp	r7, #4608	; 0x1200
   1e19c:	moveq	r3, #24
   1e1a0:	strbeq	r3, [r5, #4]
   1e1a4:	moveq	r0, #1
   1e1a8:	movne	r0, #1
   1e1ac:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e1b0:	tst	r7, #8192	; 0x2000
   1e1b4:	moveq	r0, #1
   1e1b8:	movne	r3, #8
   1e1bc:	strbne	r3, [r5, #4]
   1e1c0:	movne	r0, #1
   1e1c4:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e1c8:	tst	r7, #8192	; 0x2000
   1e1cc:	moveq	r0, #1
   1e1d0:	movne	r3, #9
   1e1d4:	strbne	r3, [r5, #4]
   1e1d8:	movne	r0, #1
   1e1dc:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e1e0:	mov	r3, #20
   1e1e4:	strb	r3, [r5, #4]
   1e1e8:	mov	r0, #1
   1e1ec:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e1f0:	mov	r3, #5
   1e1f4:	strb	r3, [r5, #4]
   1e1f8:	mov	r0, #1
   1e1fc:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e200:	ldr	r3, [pc, #232]	; 1e2f0 <__assert_fail@plt+0xc950>
   1e204:	and	r3, r3, r7
   1e208:	cmp	r3, #0
   1e20c:	bne	1e244 <__assert_fail@plt+0xc8a4>
   1e210:	ldr	r3, [r4, #40]	; 0x28
   1e214:	cmp	r3, #0
   1e218:	beq	1e244 <__assert_fail@plt+0xc8a4>
   1e21c:	ldr	r2, [r4, #4]
   1e220:	add	r3, r2, r3
   1e224:	ldrb	r2, [r3, #-1]
   1e228:	lsr	r3, r7, #11
   1e22c:	eor	r3, r3, #1
   1e230:	cmp	r2, #10
   1e234:	orrne	r3, r3, #1
   1e238:	tst	r3, #1
   1e23c:	movne	r0, #1
   1e240:	bne	1dbf8 <__assert_fail@plt+0xc258>
   1e244:	mov	r3, #12
   1e248:	strb	r3, [r5, #4]
   1e24c:	mov	r3, #16
   1e250:	str	r3, [r5]
   1e254:	mov	r0, #1
   1e258:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e25c:	tst	r7, #8
   1e260:	bne	1e2b0 <__assert_fail@plt+0xc910>
   1e264:	ldr	r3, [r4, #40]	; 0x28
   1e268:	add	r3, r3, #1
   1e26c:	ldr	r2, [r4, #48]	; 0x30
   1e270:	cmp	r3, r2
   1e274:	beq	1e2b0 <__assert_fail@plt+0xc910>
   1e278:	str	r3, [r4, #40]	; 0x28
   1e27c:	mov	r2, r7
   1e280:	mov	r1, r4
   1e284:	mov	r0, sp
   1e288:	bl	1d938 <__assert_fail@plt+0xbf98>
   1e28c:	ldr	r3, [r4, #40]	; 0x28
   1e290:	sub	r3, r3, #1
   1e294:	str	r3, [r4, #40]	; 0x28
   1e298:	ldrb	r3, [sp, #4]
   1e29c:	sub	r3, r3, #9
   1e2a0:	uxtb	r3, r3
   1e2a4:	cmp	r3, #1
   1e2a8:	movhi	r0, #1
   1e2ac:	bhi	1dbf8 <__assert_fail@plt+0xc258>
   1e2b0:	mov	r3, #12
   1e2b4:	strb	r3, [r5, #4]
   1e2b8:	mov	r3, #32
   1e2bc:	str	r3, [r5]
   1e2c0:	mov	r0, #1
   1e2c4:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e2c8:	mov	r0, #2
   1e2cc:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e2d0:	mov	r0, #1
   1e2d4:	b	1dbf8 <__assert_fail@plt+0xc258>
   1e2d8:	ldr	r3, [r4]
   1e2dc:	ldr	r1, [r4, #24]
   1e2e0:	add	r2, r3, r2
   1e2e4:	ldrb	r6, [r2, r1]
   1e2e8:	b	1dc28 <__assert_fail@plt+0xc288>
   1e2ec:	andeq	r0, r0, r2, lsl #8
   1e2f0:	addeq	r0, r0, r8
   1e2f4:	push	{r4, lr}
   1e2f8:	mov	r4, r1
   1e2fc:	bl	1d938 <__assert_fail@plt+0xbf98>
   1e300:	ldr	r3, [r4, #40]	; 0x28
   1e304:	add	r0, r3, r0
   1e308:	str	r0, [r4, #40]	; 0x28
   1e30c:	pop	{r4, pc}
   1e310:	push	{r4, r5, r6, r7, r8, lr}
   1e314:	mov	r7, r0
   1e318:	mov	r4, r1
   1e31c:	mov	r6, r2
   1e320:	mvn	r5, #0
   1e324:	mov	r2, r6
   1e328:	mov	r1, r7
   1e32c:	mov	r0, r4
   1e330:	bl	1e2f4 <__assert_fail@plt+0xc954>
   1e334:	ldrb	r2, [r4]
   1e338:	ldrb	r3, [r4, #4]
   1e33c:	cmp	r3, #2
   1e340:	beq	1e3a8 <__assert_fail@plt+0xca08>
   1e344:	cmp	r3, #24
   1e348:	cmpne	r2, #44	; 0x2c
   1e34c:	beq	1e3ac <__assert_fail@plt+0xca0c>
   1e350:	cmp	r3, #1
   1e354:	mvnne	r5, #1
   1e358:	bne	1e324 <__assert_fail@plt+0xc984>
   1e35c:	sub	r3, r2, #48	; 0x30
   1e360:	uxtb	r3, r3
   1e364:	cmp	r3, #9
   1e368:	movhi	r3, #0
   1e36c:	movls	r3, #1
   1e370:	cmn	r5, #2
   1e374:	moveq	r3, #0
   1e378:	cmp	r3, #0
   1e37c:	mvneq	r5, #1
   1e380:	beq	1e324 <__assert_fail@plt+0xc984>
   1e384:	cmn	r5, #1
   1e388:	subeq	r5, r2, #48	; 0x30
   1e38c:	beq	1e324 <__assert_fail@plt+0xc984>
   1e390:	add	r5, r5, r5, lsl #2
   1e394:	add	r2, r2, r5, lsl #1
   1e398:	sub	r5, r2, #48	; 0x30
   1e39c:	cmp	r5, #32768	; 0x8000
   1e3a0:	movge	r5, #32768	; 0x8000
   1e3a4:	b	1e324 <__assert_fail@plt+0xc984>
   1e3a8:	mvn	r5, #1
   1e3ac:	mov	r0, r5
   1e3b0:	pop	{r4, r5, r6, r7, r8, pc}
   1e3b4:	push	{r4, lr}
   1e3b8:	mov	r4, r0
   1e3bc:	ldr	r0, [r0]
   1e3c0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e3c4:	ldr	r0, [r4, #4]
   1e3c8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e3cc:	ldr	r0, [r4, #8]
   1e3d0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e3d4:	ldr	r0, [r4, #12]
   1e3d8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e3dc:	mov	r0, r4
   1e3e0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e3e4:	pop	{r4, pc}
   1e3e8:	push	{r4, lr}
   1e3ec:	ldr	r2, [r0, #4]
   1e3f0:	ldr	r3, [pc, #40]	; 1e420 <__assert_fail@plt+0xca80>
   1e3f4:	and	r3, r3, r2
   1e3f8:	cmp	r3, #6
   1e3fc:	beq	1e414 <__assert_fail@plt+0xca74>
   1e400:	cmp	r3, #3
   1e404:	popne	{r4, pc}
   1e408:	ldr	r0, [r0]
   1e40c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e410:	pop	{r4, pc}
   1e414:	ldr	r0, [r0]
   1e418:	bl	1e3b4 <__assert_fail@plt+0xca14>
   1e41c:	pop	{r4, pc}
   1e420:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1e424:	push	{r4, lr}
   1e428:	add	r0, r1, #20
   1e42c:	bl	1e3e8 <__assert_fail@plt+0xca48>
   1e430:	mov	r0, #0
   1e434:	pop	{r4, pc}
   1e438:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e43c:	sub	sp, sp, #8
   1e440:	mov	r4, r0
   1e444:	add	r3, sp, #8
   1e448:	stmdb	r3, {r1, r2}
   1e44c:	ldrb	r5, [sp, #4]
   1e450:	ldr	r3, [r0, #4]
   1e454:	ldr	r2, [r0, #8]
   1e458:	cmp	r2, r3
   1e45c:	bcs	1e530 <__assert_fail@plt+0xcb90>
   1e460:	ldr	r2, [r4, #8]
   1e464:	ldr	r3, [r4]
   1e468:	add	r3, r3, r2, lsl #3
   1e46c:	add	r2, sp, #8
   1e470:	ldmdb	r2, {r0, r1}
   1e474:	stm	r3, {r0, r1}
   1e478:	ldr	r3, [r4, #8]
   1e47c:	ldr	r2, [r4]
   1e480:	add	r2, r2, r3, lsl #3
   1e484:	ldr	r3, [r2, #4]
   1e488:	bic	r3, r3, #261120	; 0x3fc00
   1e48c:	bic	r3, r3, #768	; 0x300
   1e490:	str	r3, [r2, #4]
   1e494:	ldr	r3, [r4, #8]
   1e498:	ldr	r2, [r4]
   1e49c:	add	r2, r2, r3, lsl #3
   1e4a0:	cmp	r5, #5
   1e4a4:	beq	1e5fc <__assert_fail@plt+0xcc5c>
   1e4a8:	cmp	r5, #6
   1e4ac:	movne	r5, #0
   1e4b0:	moveq	r5, #1
   1e4b4:	ldrb	r3, [r2, #6]
   1e4b8:	and	r5, r5, #1
   1e4bc:	bic	r3, r3, #16
   1e4c0:	orr	r5, r3, r5, lsl #4
   1e4c4:	strb	r5, [r2, #6]
   1e4c8:	ldr	r2, [r4, #8]
   1e4cc:	ldr	r3, [r4, #12]
   1e4d0:	mvn	r1, #0
   1e4d4:	str	r1, [r3, r2, lsl #2]
   1e4d8:	ldr	r3, [r4, #8]
   1e4dc:	add	r3, r3, r3, lsl #1
   1e4e0:	lsl	r3, r3, #2
   1e4e4:	ldr	r0, [r4, #20]
   1e4e8:	add	r1, r0, r3
   1e4ec:	mov	r2, #0
   1e4f0:	str	r2, [r0, r3]
   1e4f4:	str	r2, [r1, #4]
   1e4f8:	str	r2, [r1, #8]
   1e4fc:	ldr	r3, [r4, #8]
   1e500:	add	r3, r3, r3, lsl #1
   1e504:	lsl	r3, r3, #2
   1e508:	ldr	r0, [r4, #24]
   1e50c:	add	r1, r0, r3
   1e510:	str	r2, [r0, r3]
   1e514:	str	r2, [r1, #4]
   1e518:	str	r2, [r1, #8]
   1e51c:	ldr	r0, [r4, #8]
   1e520:	add	r3, r0, #1
   1e524:	str	r3, [r4, #8]
   1e528:	add	sp, sp, #8
   1e52c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e530:	lsl	r6, r3, #1
   1e534:	ldr	r3, [pc, #228]	; 1e620 <__assert_fail@plt+0xcc80>
   1e538:	cmp	r6, r3
   1e53c:	bhi	1e610 <__assert_fail@plt+0xcc70>
   1e540:	lsl	r1, r6, #3
   1e544:	ldr	r0, [r0]
   1e548:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1e54c:	cmp	r0, #0
   1e550:	beq	1e618 <__assert_fail@plt+0xcc78>
   1e554:	str	r0, [r4]
   1e558:	lsl	r7, r6, #2
   1e55c:	mov	r1, r7
   1e560:	ldr	r0, [r4, #12]
   1e564:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1e568:	mov	r9, r0
   1e56c:	mov	r1, r7
   1e570:	ldr	r0, [r4, #16]
   1e574:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1e578:	mov	r8, r0
   1e57c:	add	r7, r6, r6, lsl #1
   1e580:	lsl	r7, r7, #2
   1e584:	mov	r1, r7
   1e588:	ldr	r0, [r4, #20]
   1e58c:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1e590:	mov	sl, r0
   1e594:	mov	r1, r7
   1e598:	ldr	r0, [r4, #24]
   1e59c:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1e5a0:	mov	r7, r0
   1e5a4:	cmp	r8, #0
   1e5a8:	cmpne	r9, #0
   1e5ac:	beq	1e5d4 <__assert_fail@plt+0xcc34>
   1e5b0:	cmp	r0, #0
   1e5b4:	cmpne	sl, #0
   1e5b8:	beq	1e5d4 <__assert_fail@plt+0xcc34>
   1e5bc:	str	r9, [r4, #12]
   1e5c0:	str	r8, [r4, #16]
   1e5c4:	str	sl, [r4, #20]
   1e5c8:	str	r0, [r4, #24]
   1e5cc:	str	r6, [r4, #4]
   1e5d0:	b	1e460 <__assert_fail@plt+0xcac0>
   1e5d4:	mov	r0, r9
   1e5d8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e5dc:	mov	r0, r8
   1e5e0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e5e4:	mov	r0, sl
   1e5e8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e5ec:	mov	r0, r7
   1e5f0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e5f4:	mvn	r0, #0
   1e5f8:	b	1e528 <__assert_fail@plt+0xcb88>
   1e5fc:	ldr	r3, [r4, #92]	; 0x5c
   1e600:	cmp	r3, #1
   1e604:	movgt	r5, #1
   1e608:	bgt	1e4b4 <__assert_fail@plt+0xcb14>
   1e60c:	b	1e4a8 <__assert_fail@plt+0xcb08>
   1e610:	mvn	r0, #0
   1e614:	b	1e528 <__assert_fail@plt+0xcb88>
   1e618:	mvn	r0, #0
   1e61c:	b	1e528 <__assert_fail@plt+0xcb88>
   1e620:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   1e624:	ldrb	r3, [r1, #24]
   1e628:	cmp	r3, #16
   1e62c:	beq	1e66c <__assert_fail@plt+0xcccc>
   1e630:	push	{r4, r5, r6, lr}
   1e634:	mov	r4, r1
   1e638:	mov	r5, r0
   1e63c:	str	r1, [r4, #12]
   1e640:	add	r3, r1, #20
   1e644:	ldm	r3, {r1, r2}
   1e648:	bl	1e438 <__assert_fail@plt+0xca98>
   1e64c:	str	r0, [r4, #28]
   1e650:	cmn	r0, #1
   1e654:	beq	1e6b4 <__assert_fail@plt+0xcd14>
   1e658:	ldrb	r3, [r4, #24]
   1e65c:	cmp	r3, #12
   1e660:	beq	1e688 <__assert_fail@plt+0xcce8>
   1e664:	mov	r0, #0
   1e668:	pop	{r4, r5, r6, pc}
   1e66c:	ldr	r3, [r1, #4]
   1e670:	ldr	r2, [r3, #12]
   1e674:	str	r2, [r1, #12]
   1e678:	ldr	r3, [r3, #28]
   1e67c:	str	r3, [r1, #28]
   1e680:	mov	r0, #0
   1e684:	bx	lr
   1e688:	ldr	r3, [r5]
   1e68c:	ldr	r2, [r4, #20]
   1e690:	add	r0, r3, r0, lsl #3
   1e694:	ldr	r3, [r0, #4]
   1e698:	ldr	r1, [pc, #28]	; 1e6bc <__assert_fail@plt+0xcd1c>
   1e69c:	and	r2, r2, r1
   1e6a0:	bic	r3, r3, r1, lsl #8
   1e6a4:	orr	r3, r3, r2, lsl #8
   1e6a8:	str	r3, [r0, #4]
   1e6ac:	mov	r0, #0
   1e6b0:	pop	{r4, r5, r6, pc}
   1e6b4:	mov	r0, #12
   1e6b8:	pop	{r4, r5, r6, pc}
   1e6bc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1e6c0:	push	{r4, r5, r6, r7, r8, lr}
   1e6c4:	mov	r4, r0
   1e6c8:	mov	r5, r1
   1e6cc:	mov	r7, r2
   1e6d0:	lsl	r6, r1, #3
   1e6d4:	ldr	r3, [r0]
   1e6d8:	add	r3, r3, r6
   1e6dc:	ldm	r3, {r1, r2}
   1e6e0:	bl	1e438 <__assert_fail@plt+0xca98>
   1e6e4:	cmn	r0, #1
   1e6e8:	popeq	{r4, r5, r6, r7, r8, pc}
   1e6ec:	lsl	r1, r0, #3
   1e6f0:	ldr	r2, [r4]
   1e6f4:	add	r2, r2, r1
   1e6f8:	ldr	r3, [r2, #4]
   1e6fc:	ldr	ip, [pc, #96]	; 1e764 <__assert_fail@plt+0xcdc4>
   1e700:	and	r7, r7, ip
   1e704:	lsl	ip, ip, #8
   1e708:	bic	r3, r3, ip
   1e70c:	orr	r3, r3, r7, lsl #8
   1e710:	str	r3, [r2, #4]
   1e714:	ldr	r3, [r4]
   1e718:	add	lr, r3, r1
   1e71c:	add	r6, r3, r6
   1e720:	ldr	r2, [r6, #4]
   1e724:	lsl	r6, r2, #14
   1e728:	ldr	r3, [lr, #4]
   1e72c:	lsl	r2, r3, #14
   1e730:	lsr	r2, r2, #22
   1e734:	orr	r2, r2, r6, lsr #22
   1e738:	bic	r3, r3, ip
   1e73c:	orr	r3, r3, r2, lsl #8
   1e740:	str	r3, [lr, #4]
   1e744:	ldr	r3, [r4]
   1e748:	add	r1, r3, r1
   1e74c:	ldrb	r3, [r1, #6]
   1e750:	orr	r3, r3, #4
   1e754:	strb	r3, [r1, #6]
   1e758:	ldr	r3, [r4, #16]
   1e75c:	str	r5, [r3, r0, lsl #2]
   1e760:	pop	{r4, r5, r6, r7, r8, pc}
   1e764:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1e768:	push	{r4, lr}
   1e76c:	mov	r4, r0
   1e770:	ldr	r0, [r0, #24]
   1e774:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e778:	ldr	r0, [r4, #36]	; 0x24
   1e77c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e780:	ldr	r3, [r4, #40]	; 0x28
   1e784:	add	r2, r4, #4
   1e788:	cmp	r3, r2
   1e78c:	beq	1e7a0 <__assert_fail@plt+0xce00>
   1e790:	ldr	r0, [r3, #8]
   1e794:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e798:	ldr	r0, [r4, #40]	; 0x28
   1e79c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e7a0:	ldr	r0, [r4, #12]
   1e7a4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e7a8:	ldr	r0, [r4, #48]	; 0x30
   1e7ac:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e7b0:	ldr	r0, [r4, #44]	; 0x2c
   1e7b4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e7b8:	mov	r0, r4
   1e7bc:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e7c0:	pop	{r4, pc}
   1e7c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7c8:	sub	sp, sp, #20
   1e7cc:	ldr	r5, [r2, #4]
   1e7d0:	cmp	r5, #0
   1e7d4:	moveq	r6, #0
   1e7d8:	streq	r6, [r0]
   1e7dc:	beq	1ea94 <__assert_fail@plt+0xd0f4>
   1e7e0:	add	r8, r3, r5
   1e7e4:	cmp	r5, #0
   1e7e8:	ble	1e804 <__assert_fail@plt+0xce64>
   1e7ec:	ldr	ip, [r2, #8]
   1e7f0:	add	r5, ip, r5, lsl #2
   1e7f4:	ldr	lr, [ip], #4
   1e7f8:	add	r8, r8, lr
   1e7fc:	cmp	r5, ip
   1e800:	bne	1e7f4 <__assert_fail@plt+0xce54>
   1e804:	mov	r4, r3
   1e808:	mov	r7, r2
   1e80c:	mov	r9, r1
   1e810:	str	r0, [sp, #12]
   1e814:	ldr	r3, [r1, #68]	; 0x44
   1e818:	and	r3, r3, r8
   1e81c:	add	r3, r3, r3, lsl #1
   1e820:	lsl	r3, r3, #2
   1e824:	ldr	r2, [r1, #32]
   1e828:	add	r1, r2, r3
   1e82c:	ldr	fp, [r2, r3]
   1e830:	cmp	fp, #0
   1e834:	ble	1e88c <__assert_fail@plt+0xceec>
   1e838:	ldr	sl, [r1, #8]
   1e83c:	sub	sl, sl, #4
   1e840:	mov	r5, #0
   1e844:	b	1e854 <__assert_fail@plt+0xceb4>
   1e848:	add	r5, r5, #1
   1e84c:	cmp	r5, fp
   1e850:	beq	1e88c <__assert_fail@plt+0xceec>
   1e854:	ldr	r6, [sl, #4]!
   1e858:	ldr	r3, [r6]
   1e85c:	cmp	r3, r8
   1e860:	bne	1e848 <__assert_fail@plt+0xcea8>
   1e864:	ldrb	r3, [r6, #52]	; 0x34
   1e868:	and	r3, r3, #15
   1e86c:	cmp	r4, r3
   1e870:	bne	1e848 <__assert_fail@plt+0xcea8>
   1e874:	mov	r1, r7
   1e878:	ldr	r0, [r6, #40]	; 0x28
   1e87c:	bl	1bb5c <__assert_fail@plt+0xa1bc>
   1e880:	cmp	r0, #0
   1e884:	beq	1e848 <__assert_fail@plt+0xcea8>
   1e888:	b	1ea94 <__assert_fail@plt+0xd0f4>
   1e88c:	mov	r1, #1
   1e890:	mov	r0, #56	; 0x38
   1e894:	bl	1b548 <__assert_fail@plt+0x9ba8>
   1e898:	subs	r6, r0, #0
   1e89c:	beq	1e90c <__assert_fail@plt+0xcf6c>
   1e8a0:	add	fp, r6, #4
   1e8a4:	mov	r1, r7
   1e8a8:	mov	r0, fp
   1e8ac:	bl	1d40c <__assert_fail@plt+0xba6c>
   1e8b0:	cmp	r0, #0
   1e8b4:	bne	1e904 <__assert_fail@plt+0xcf64>
   1e8b8:	ldrb	r2, [r6, #52]	; 0x34
   1e8bc:	and	r3, r4, #15
   1e8c0:	bic	r2, r2, #15
   1e8c4:	orr	r3, r3, r2
   1e8c8:	strb	r3, [r6, #52]	; 0x34
   1e8cc:	str	fp, [r6, #40]	; 0x28
   1e8d0:	ldr	r3, [r7, #4]
   1e8d4:	cmp	r3, #0
   1e8d8:	ble	1ea7c <__assert_fail@plt+0xd0dc>
   1e8dc:	mov	sl, #0
   1e8e0:	mov	r5, sl
   1e8e4:	and	r3, r4, #4
   1e8e8:	str	r3, [sp, #4]
   1e8ec:	and	r3, r4, #2
   1e8f0:	str	r3, [sp]
   1e8f4:	and	r3, r4, #1
   1e8f8:	str	r8, [sp, #8]
   1e8fc:	mov	r8, r3
   1e900:	b	1e9c8 <__assert_fail@plt+0xd028>
   1e904:	mov	r0, r6
   1e908:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1e90c:	mov	r3, #12
   1e910:	ldr	r2, [sp, #12]
   1e914:	str	r3, [r2]
   1e918:	mov	r6, #0
   1e91c:	b	1ea94 <__assert_fail@plt+0xd0f4>
   1e920:	mov	r0, #12
   1e924:	bl	1b954 <__assert_fail@plt+0x9fb4>
   1e928:	cmp	r0, #0
   1e92c:	beq	1e958 <__assert_fail@plt+0xcfb8>
   1e930:	str	r0, [r6, #40]	; 0x28
   1e934:	mov	r1, r7
   1e938:	bl	1d40c <__assert_fail@plt+0xba6c>
   1e93c:	cmp	r0, #0
   1e940:	bne	1e964 <__assert_fail@plt+0xcfc4>
   1e944:	ldrb	r3, [r6, #52]	; 0x34
   1e948:	orr	r3, r3, #128	; 0x80
   1e94c:	strb	r3, [r6, #52]	; 0x34
   1e950:	mov	sl, #0
   1e954:	b	1ea5c <__assert_fail@plt+0xd0bc>
   1e958:	mov	r0, r6
   1e95c:	bl	1e768 <__assert_fail@plt+0xcdc8>
   1e960:	b	1e90c <__assert_fail@plt+0xcf6c>
   1e964:	mov	r0, r6
   1e968:	bl	1e768 <__assert_fail@plt+0xcdc8>
   1e96c:	b	1e90c <__assert_fail@plt+0xcf6c>
   1e970:	tst	r4, #2
   1e974:	beq	1e980 <__assert_fail@plt+0xcfe0>
   1e978:	cmp	r8, #0
   1e97c:	bne	1e9a8 <__assert_fail@plt+0xd008>
   1e980:	tst	r4, #16
   1e984:	beq	1e994 <__assert_fail@plt+0xcff4>
   1e988:	ldr	r3, [sp]
   1e98c:	cmp	r3, #0
   1e990:	beq	1e9a8 <__assert_fail@plt+0xd008>
   1e994:	tst	r4, #64	; 0x40
   1e998:	beq	1e9b8 <__assert_fail@plt+0xd018>
   1e99c:	ldr	r3, [sp, #4]
   1e9a0:	cmp	r3, #0
   1e9a4:	bne	1e9b8 <__assert_fail@plt+0xd018>
   1e9a8:	sub	r1, r5, sl
   1e9ac:	mov	r0, fp
   1e9b0:	bl	1bc68 <__assert_fail@plt+0xa2c8>
   1e9b4:	add	sl, sl, #1
   1e9b8:	add	r5, r5, #1
   1e9bc:	ldr	r3, [r7, #4]
   1e9c0:	cmp	r5, r3
   1e9c4:	bge	1ea78 <__assert_fail@plt+0xd0d8>
   1e9c8:	ldr	r3, [r7, #8]
   1e9cc:	ldr	r2, [r3, r5, lsl #2]
   1e9d0:	ldr	r3, [r9]
   1e9d4:	add	r3, r3, r2, lsl #3
   1e9d8:	ldrb	r2, [r3, #4]
   1e9dc:	ldr	r4, [r3, #4]
   1e9e0:	lsl	r4, r4, #14
   1e9e4:	lsrs	r4, r4, #22
   1e9e8:	moveq	r1, #1
   1e9ec:	movne	r1, #0
   1e9f0:	cmp	r2, #1
   1e9f4:	movne	r1, #0
   1e9f8:	andeq	r1, r1, #1
   1e9fc:	cmp	r1, #0
   1ea00:	bne	1e9b8 <__assert_fail@plt+0xd018>
   1ea04:	ldrb	r1, [r6, #52]	; 0x34
   1ea08:	ldrb	r3, [r3, #6]
   1ea0c:	lsr	r3, r3, #4
   1ea10:	orr	r3, r3, r1, lsr #5
   1ea14:	and	r3, r3, #1
   1ea18:	bic	r1, r1, #32
   1ea1c:	orr	r3, r1, r3, lsl #5
   1ea20:	strb	r3, [r6, #52]	; 0x34
   1ea24:	cmp	r2, #2
   1ea28:	uxtbeq	r3, r3
   1ea2c:	orreq	r3, r3, #16
   1ea30:	strbeq	r3, [r6, #52]	; 0x34
   1ea34:	beq	1ea48 <__assert_fail@plt+0xd0a8>
   1ea38:	cmp	r2, #4
   1ea3c:	ldrbeq	r3, [r6, #52]	; 0x34
   1ea40:	orreq	r3, r3, #64	; 0x40
   1ea44:	strbeq	r3, [r6, #52]	; 0x34
   1ea48:	cmp	r4, #0
   1ea4c:	beq	1e9b8 <__assert_fail@plt+0xd018>
   1ea50:	ldr	r3, [r6, #40]	; 0x28
   1ea54:	cmp	fp, r3
   1ea58:	beq	1e920 <__assert_fail@plt+0xcf80>
   1ea5c:	tst	r4, #1
   1ea60:	beq	1e970 <__assert_fail@plt+0xcfd0>
   1ea64:	cmp	r8, #0
   1ea68:	beq	1e9a8 <__assert_fail@plt+0xd008>
   1ea6c:	tst	r4, #2
   1ea70:	bne	1e9a8 <__assert_fail@plt+0xd008>
   1ea74:	b	1e980 <__assert_fail@plt+0xcfe0>
   1ea78:	ldr	r8, [sp, #8]
   1ea7c:	mov	r2, r8
   1ea80:	mov	r1, r6
   1ea84:	mov	r0, r9
   1ea88:	bl	1cbb0 <__assert_fail@plt+0xb210>
   1ea8c:	cmp	r0, #0
   1ea90:	bne	1eaa0 <__assert_fail@plt+0xd100>
   1ea94:	mov	r0, r6
   1ea98:	add	sp, sp, #20
   1ea9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eaa0:	mov	r0, r6
   1eaa4:	bl	1e768 <__assert_fail@plt+0xcdc8>
   1eaa8:	b	1e90c <__assert_fail@plt+0xcf6c>
   1eaac:	push	{r4, r5, r6, lr}
   1eab0:	ldr	r5, [r0]
   1eab4:	ldr	r0, [r5, #56]	; 0x38
   1eab8:	cmp	r0, #0
   1eabc:	beq	1ead4 <__assert_fail@plt+0xd134>
   1eac0:	ldr	r4, [r0]
   1eac4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1eac8:	mov	r0, r4
   1eacc:	cmp	r4, #0
   1ead0:	bne	1eac0 <__assert_fail@plt+0xd120>
   1ead4:	mov	r4, #0
   1ead8:	str	r4, [r5, #56]	; 0x38
   1eadc:	mov	r3, #31
   1eae0:	str	r3, [r5, #64]	; 0x40
   1eae4:	str	r4, [r5, #52]	; 0x34
   1eae8:	ldr	r0, [r5, #16]
   1eaec:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1eaf0:	str	r4, [r5, #16]
   1eaf4:	pop	{r4, r5, r6, pc}
   1eaf8:	push	{r4, lr}
   1eafc:	mov	r4, r0
   1eb00:	ldr	r0, [r0, #8]
   1eb04:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1eb08:	ldr	r0, [r4, #12]
   1eb0c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1eb10:	ldrb	r3, [r4, #75]	; 0x4b
   1eb14:	cmp	r3, #0
   1eb18:	popeq	{r4, pc}
   1eb1c:	ldr	r0, [r4, #4]
   1eb20:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1eb24:	pop	{r4, pc}
   1eb28:	push	{r4, r5, r6, r7, r8, lr}
   1eb2c:	mov	r6, r0
   1eb30:	ldr	r3, [r0]
   1eb34:	cmp	r3, #0
   1eb38:	beq	1eb68 <__assert_fail@plt+0xd1c8>
   1eb3c:	ldr	r3, [r0, #8]
   1eb40:	cmp	r3, #0
   1eb44:	beq	1eb68 <__assert_fail@plt+0xd1c8>
   1eb48:	mov	r4, #0
   1eb4c:	ldr	r0, [r6]
   1eb50:	add	r0, r0, r4, lsl #3
   1eb54:	bl	1e3e8 <__assert_fail@plt+0xca48>
   1eb58:	add	r4, r4, #1
   1eb5c:	ldr	r3, [r6, #8]
   1eb60:	cmp	r3, r4
   1eb64:	bhi	1eb4c <__assert_fail@plt+0xd1ac>
   1eb68:	ldr	r0, [r6, #12]
   1eb6c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1eb70:	ldr	r3, [r6, #8]
   1eb74:	cmp	r3, #0
   1eb78:	beq	1ebe8 <__assert_fail@plt+0xd248>
   1eb7c:	mov	r4, #0
   1eb80:	mov	r5, r4
   1eb84:	b	1eb9c <__assert_fail@plt+0xd1fc>
   1eb88:	add	r5, r5, #1
   1eb8c:	add	r4, r4, #12
   1eb90:	ldr	r3, [r6, #8]
   1eb94:	cmp	r3, r5
   1eb98:	bls	1ebe8 <__assert_fail@plt+0xd248>
   1eb9c:	ldr	r3, [r6, #24]
   1eba0:	cmp	r3, #0
   1eba4:	beq	1ebb4 <__assert_fail@plt+0xd214>
   1eba8:	add	r3, r3, r4
   1ebac:	ldr	r0, [r3, #8]
   1ebb0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ebb4:	ldr	r3, [r6, #28]
   1ebb8:	cmp	r3, #0
   1ebbc:	beq	1ebcc <__assert_fail@plt+0xd22c>
   1ebc0:	add	r3, r3, r4
   1ebc4:	ldr	r0, [r3, #8]
   1ebc8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ebcc:	ldr	r3, [r6, #20]
   1ebd0:	cmp	r3, #0
   1ebd4:	beq	1eb88 <__assert_fail@plt+0xd1e8>
   1ebd8:	add	r3, r3, r4
   1ebdc:	ldr	r0, [r3, #8]
   1ebe0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ebe4:	b	1eb88 <__assert_fail@plt+0xd1e8>
   1ebe8:	ldr	r0, [r6, #20]
   1ebec:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ebf0:	ldr	r0, [r6, #24]
   1ebf4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ebf8:	ldr	r0, [r6, #28]
   1ebfc:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ec00:	ldr	r0, [r6]
   1ec04:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ec08:	ldr	r3, [r6, #32]
   1ec0c:	cmp	r3, #0
   1ec10:	beq	1ec6c <__assert_fail@plt+0xd2cc>
   1ec14:	mov	r7, #0
   1ec18:	mov	r8, r7
   1ec1c:	ldr	r3, [r6, #32]
   1ec20:	add	r5, r3, r7
   1ec24:	ldr	r3, [r3, r7]
   1ec28:	cmp	r3, #0
   1ec2c:	ble	1ec50 <__assert_fail@plt+0xd2b0>
   1ec30:	mov	r4, #0
   1ec34:	ldr	r3, [r5, #8]
   1ec38:	ldr	r0, [r3, r4, lsl #2]
   1ec3c:	bl	1e768 <__assert_fail@plt+0xcdc8>
   1ec40:	add	r4, r4, #1
   1ec44:	ldr	r3, [r5]
   1ec48:	cmp	r3, r4
   1ec4c:	bgt	1ec34 <__assert_fail@plt+0xd294>
   1ec50:	ldr	r0, [r5, #8]
   1ec54:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ec58:	add	r8, r8, #1
   1ec5c:	add	r7, r7, #12
   1ec60:	ldr	r3, [r6, #68]	; 0x44
   1ec64:	cmp	r3, r8
   1ec68:	bcs	1ec1c <__assert_fail@plt+0xd27c>
   1ec6c:	ldr	r0, [r6, #32]
   1ec70:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ec74:	ldr	r0, [r6, #60]	; 0x3c
   1ec78:	ldr	r3, [pc, #28]	; 1ec9c <__assert_fail@plt+0xd2fc>
   1ec7c:	cmp	r0, r3
   1ec80:	beq	1ec88 <__assert_fail@plt+0xd2e8>
   1ec84:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ec88:	ldr	r0, [r6, #132]	; 0x84
   1ec8c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ec90:	mov	r0, r6
   1ec94:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ec98:	pop	{r4, r5, r6, r7, r8, pc}
   1ec9c:	muleq	r2, r4, sl
   1eca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eca4:	sub	sp, sp, #28
   1eca8:	str	r3, [sp, #4]
   1ecac:	add	r3, r1, r1, lsl #1
   1ecb0:	ldr	r6, [r0, #28]
   1ecb4:	add	r6, r6, r3, lsl #2
   1ecb8:	mov	r3, #0
   1ecbc:	str	r3, [sp, #12]
   1ecc0:	str	r3, [sp, #16]
   1ecc4:	str	r3, [sp, #20]
   1ecc8:	ldr	r3, [r6, #4]
   1eccc:	cmp	r3, #0
   1ecd0:	ble	1ed4c <__assert_fail@plt+0xd3ac>
   1ecd4:	mov	r7, r0
   1ecd8:	mov	r8, r1
   1ecdc:	mov	fp, r2
   1ece0:	mov	r5, #0
   1ece4:	b	1edb8 <__assert_fail@plt+0xd418>
   1ece8:	ldr	r0, [sp, #20]
   1ecec:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ecf0:	b	1ed58 <__assert_fail@plt+0xd3b8>
   1ecf4:	cmp	r3, #0
   1ecf8:	ble	1ed4c <__assert_fail@plt+0xd3ac>
   1ecfc:	mov	r4, #0
   1ed00:	b	1ed14 <__assert_fail@plt+0xd374>
   1ed04:	add	r4, r4, #1
   1ed08:	ldr	r3, [r6, #4]
   1ed0c:	cmp	r3, r4
   1ed10:	ble	1ed4c <__assert_fail@plt+0xd3ac>
   1ed14:	ldr	r3, [r6, #8]
   1ed18:	ldr	r5, [r3, r4, lsl #2]
   1ed1c:	mov	r1, r5
   1ed20:	add	r0, sp, #12
   1ed24:	bl	1bbd0 <__assert_fail@plt+0xa230>
   1ed28:	cmp	r0, #0
   1ed2c:	bne	1ed04 <__assert_fail@plt+0xd364>
   1ed30:	mov	r1, r5
   1ed34:	mov	r0, fp
   1ed38:	bl	1bbd0 <__assert_fail@plt+0xa230>
   1ed3c:	sub	r1, r0, #1
   1ed40:	mov	r0, fp
   1ed44:	bl	1bc68 <__assert_fail@plt+0xa2c8>
   1ed48:	b	1ed04 <__assert_fail@plt+0xd364>
   1ed4c:	ldr	r0, [sp, #20]
   1ed50:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ed54:	mov	r4, #0
   1ed58:	mov	r0, r4
   1ed5c:	add	sp, sp, #28
   1ed60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed64:	mov	r1, r9
   1ed68:	mov	r0, r6
   1ed6c:	bl	1bbd0 <__assert_fail@plt+0xa230>
   1ed70:	cmp	r0, #0
   1ed74:	bne	1eda8 <__assert_fail@plt+0xd408>
   1ed78:	mov	r1, r9
   1ed7c:	mov	r0, fp
   1ed80:	bl	1bbd0 <__assert_fail@plt+0xa230>
   1ed84:	cmp	r0, #0
   1ed88:	beq	1eda8 <__assert_fail@plt+0xd408>
   1ed8c:	ldr	r2, [r7, #28]
   1ed90:	add	r2, r2, r4
   1ed94:	ldr	r1, [sp, #4]
   1ed98:	add	r0, sp, #12
   1ed9c:	bl	1d614 <__assert_fail@plt+0xbc74>
   1eda0:	subs	r4, r0, #0
   1eda4:	bne	1ece8 <__assert_fail@plt+0xd348>
   1eda8:	add	r5, r5, #1
   1edac:	ldr	r3, [r6, #4]
   1edb0:	cmp	r3, r5
   1edb4:	ble	1ecf4 <__assert_fail@plt+0xd354>
   1edb8:	ldr	r3, [r6, #8]
   1edbc:	ldr	r4, [r3, r5, lsl #2]
   1edc0:	cmp	r8, r4
   1edc4:	beq	1eda8 <__assert_fail@plt+0xd408>
   1edc8:	ldr	r3, [r7]
   1edcc:	add	r3, r3, r4, lsl #3
   1edd0:	ldrb	r3, [r3, #4]
   1edd4:	tst	r3, #8
   1edd8:	beq	1eda8 <__assert_fail@plt+0xd408>
   1eddc:	add	r4, r4, r4, lsl #1
   1ede0:	lsl	r4, r4, #2
   1ede4:	ldr	r3, [r7, #20]
   1ede8:	add	r3, r3, r4
   1edec:	ldr	r2, [r3, #8]
   1edf0:	ldr	r9, [r2]
   1edf4:	ldr	r3, [r3, #4]
   1edf8:	cmp	r3, #1
   1edfc:	ble	1ed64 <__assert_fail@plt+0xd3c4>
   1ee00:	ldr	sl, [r2, #4]
   1ee04:	mov	r1, r9
   1ee08:	mov	r0, r6
   1ee0c:	bl	1bbd0 <__assert_fail@plt+0xa230>
   1ee10:	cmp	r0, #0
   1ee14:	bne	1ee2c <__assert_fail@plt+0xd48c>
   1ee18:	mov	r1, r9
   1ee1c:	mov	r0, fp
   1ee20:	bl	1bbd0 <__assert_fail@plt+0xa230>
   1ee24:	cmp	r0, #0
   1ee28:	bne	1ed8c <__assert_fail@plt+0xd3ec>
   1ee2c:	cmp	sl, #0
   1ee30:	ble	1eda8 <__assert_fail@plt+0xd408>
   1ee34:	mov	r1, sl
   1ee38:	mov	r0, r6
   1ee3c:	bl	1bbd0 <__assert_fail@plt+0xa230>
   1ee40:	cmp	r0, #0
   1ee44:	bne	1eda8 <__assert_fail@plt+0xd408>
   1ee48:	mov	r1, sl
   1ee4c:	mov	r0, fp
   1ee50:	bl	1bbd0 <__assert_fail@plt+0xa230>
   1ee54:	cmp	r0, #0
   1ee58:	beq	1eda8 <__assert_fail@plt+0xd408>
   1ee5c:	b	1ed8c <__assert_fail@plt+0xd3ec>
   1ee60:	push	{r4, r5, r6, r7, r8, lr}
   1ee64:	mov	r8, r0
   1ee68:	ldr	r3, [r0, #124]	; 0x7c
   1ee6c:	cmp	r3, #0
   1ee70:	ble	1eefc <__assert_fail@plt+0xd55c>
   1ee74:	mov	r7, #0
   1ee78:	b	1ee94 <__assert_fail@plt+0xd4f4>
   1ee7c:	mov	r0, r6
   1ee80:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ee84:	add	r7, r7, #1
   1ee88:	ldr	r3, [r8, #124]	; 0x7c
   1ee8c:	cmp	r3, r7
   1ee90:	ble	1eefc <__assert_fail@plt+0xd55c>
   1ee94:	ldr	r3, [r8, #132]	; 0x84
   1ee98:	ldr	r6, [r3, r7, lsl #2]
   1ee9c:	ldr	r3, [r6, #16]
   1eea0:	cmp	r3, #0
   1eea4:	ble	1eed4 <__assert_fail@plt+0xd534>
   1eea8:	mov	r4, #0
   1eeac:	ldr	r3, [r6, #20]
   1eeb0:	ldr	r5, [r3, r4, lsl #2]
   1eeb4:	ldr	r0, [r5, #16]
   1eeb8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1eebc:	mov	r0, r5
   1eec0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1eec4:	add	r4, r4, #1
   1eec8:	ldr	r3, [r6, #16]
   1eecc:	cmp	r3, r4
   1eed0:	bgt	1eeac <__assert_fail@plt+0xd50c>
   1eed4:	ldr	r0, [r6, #20]
   1eed8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1eedc:	ldr	r3, [r6, #8]
   1eee0:	cmp	r3, #0
   1eee4:	beq	1ee7c <__assert_fail@plt+0xd4dc>
   1eee8:	ldr	r0, [r3, #8]
   1eeec:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1eef0:	ldr	r0, [r6, #8]
   1eef4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1eef8:	b	1ee7c <__assert_fail@plt+0xd4dc>
   1eefc:	mov	r3, #0
   1ef00:	str	r3, [r8, #124]	; 0x7c
   1ef04:	str	r3, [r8, #108]	; 0x6c
   1ef08:	pop	{r4, r5, r6, r7, r8, pc}
   1ef0c:	push	{r4, r5, r6, lr}
   1ef10:	mov	r4, r0
   1ef14:	ldr	r0, [r0, #8]
   1ef18:	add	r5, r4, #12
   1ef1c:	cmp	r0, r5
   1ef20:	beq	1ef28 <__assert_fail@plt+0xd588>
   1ef24:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ef28:	mov	r3, #0
   1ef2c:	str	r3, [r4]
   1ef30:	mov	r3, #16
   1ef34:	str	r3, [r4, #4]
   1ef38:	str	r5, [r4, #8]
   1ef3c:	pop	{r4, r5, r6, pc}
   1ef40:	push	{r4, r5, r6, lr}
   1ef44:	subs	r5, r0, #0
   1ef48:	beq	1ef9c <__assert_fail@plt+0xd5fc>
   1ef4c:	ldr	r3, [r5]
   1ef50:	cmp	r3, #0
   1ef54:	ble	1ef94 <__assert_fail@plt+0xd5f4>
   1ef58:	mov	r4, #0
   1ef5c:	mov	r6, r4
   1ef60:	ldr	r3, [r5, #8]
   1ef64:	add	r3, r3, r4
   1ef68:	ldr	r0, [r3, #20]
   1ef6c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ef70:	ldr	r3, [r5, #8]
   1ef74:	add	r3, r3, r4
   1ef78:	ldr	r0, [r3, #8]
   1ef7c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ef80:	add	r6, r6, #1
   1ef84:	add	r4, r4, #24
   1ef88:	ldr	r3, [r5]
   1ef8c:	cmp	r3, r6
   1ef90:	bgt	1ef60 <__assert_fail@plt+0xd5c0>
   1ef94:	ldr	r0, [r5, #8]
   1ef98:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ef9c:	mov	r0, #0
   1efa0:	pop	{r4, r5, r6, pc}
   1efa4:	push	{r4, r5, r6, lr}
   1efa8:	ldr	r2, [r1, #28]
   1efac:	ldrb	r3, [r1, #24]
   1efb0:	sub	r3, r3, #2
   1efb4:	cmp	r3, #14
   1efb8:	ldrls	pc, [pc, r3, lsl #2]
   1efbc:	b	1f0f8 <__assert_fail@plt+0xd758>
   1efc0:	andeq	pc, r1, r0, lsl r1	; <UNPREDICTABLE>
   1efc4:	strdeq	pc, [r1], -r8
   1efc8:	strheq	pc, [r1], -r8	; <UNPREDICTABLE>
   1efcc:	strdeq	pc, [r1], -r8
   1efd0:	strdeq	pc, [r1], -r8
   1efd4:	strdeq	pc, [r1], -r8
   1efd8:	muleq	r1, ip, r0
   1efdc:	muleq	r1, ip, r0
   1efe0:	strdeq	lr, [r1], -ip
   1efe4:	strdeq	lr, [r1], -ip
   1efe8:	muleq	r1, ip, r0
   1efec:	strdeq	pc, [r1], -r8
   1eff0:	strdeq	pc, [r1], -r8
   1eff4:	strdeq	pc, [r1], -r8
   1eff8:	andeq	pc, r1, r0, lsl r1	; <UNPREDICTABLE>
   1effc:	ldrb	r3, [r0, #88]	; 0x58
   1f000:	orr	r3, r3, #1
   1f004:	strb	r3, [r0, #88]	; 0x58
   1f008:	ldr	r3, [r1, #4]
   1f00c:	cmp	r3, #0
   1f010:	ldrne	r3, [r3, #12]
   1f014:	ldreq	r3, [r1, #16]
   1f018:	ldr	r4, [r3, #28]
   1f01c:	ldr	r3, [r1, #8]
   1f020:	cmp	r3, #0
   1f024:	ldrne	r3, [r3, #12]
   1f028:	ldreq	r3, [r1, #16]
   1f02c:	ldr	r5, [r3, #28]
   1f030:	add	r2, r2, r2, lsl #1
   1f034:	lsl	r2, r2, #2
   1f038:	ldr	r3, [r0, #20]
   1f03c:	add	r6, r3, r2
   1f040:	mov	r1, #2
   1f044:	str	r1, [r3, r2]
   1f048:	mov	r0, #8
   1f04c:	bl	1b954 <__assert_fail@plt+0x9fb4>
   1f050:	str	r0, [r6, #8]
   1f054:	cmp	r0, #0
   1f058:	beq	1f118 <__assert_fail@plt+0xd778>
   1f05c:	cmp	r4, r5
   1f060:	beq	1f088 <__assert_fail@plt+0xd6e8>
   1f064:	mov	r3, #2
   1f068:	str	r3, [r6, #4]
   1f06c:	cmp	r4, r5
   1f070:	strlt	r4, [r0]
   1f074:	strlt	r5, [r0, #4]
   1f078:	strge	r5, [r0]
   1f07c:	strge	r4, [r0, #4]
   1f080:	mov	r0, #0
   1f084:	pop	{r4, r5, r6, pc}
   1f088:	mov	r3, #1
   1f08c:	str	r3, [r6, #4]
   1f090:	str	r4, [r0]
   1f094:	mov	r0, #0
   1f098:	pop	{r4, r5, r6, pc}
   1f09c:	ldr	r1, [r1, #16]
   1f0a0:	add	r2, r2, r2, lsl #1
   1f0a4:	ldr	r0, [r0, #20]
   1f0a8:	ldr	r1, [r1, #28]
   1f0ac:	add	r0, r0, r2, lsl #2
   1f0b0:	bl	1cb3c <__assert_fail@plt+0xb19c>
   1f0b4:	pop	{r4, r5, r6, pc}
   1f0b8:	ldr	r3, [r1, #16]
   1f0bc:	ldr	ip, [r3, #28]
   1f0c0:	ldr	r3, [r0, #12]
   1f0c4:	str	ip, [r3, r2, lsl #2]
   1f0c8:	ldrb	r3, [r1, #24]
   1f0cc:	cmp	r3, #4
   1f0d0:	beq	1f0dc <__assert_fail@plt+0xd73c>
   1f0d4:	mov	r0, #0
   1f0d8:	pop	{r4, r5, r6, pc}
   1f0dc:	ldr	r1, [r0, #12]
   1f0e0:	add	ip, r2, r2, lsl #1
   1f0e4:	ldr	r0, [r0, #20]
   1f0e8:	ldr	r1, [r1, r2, lsl #2]
   1f0ec:	add	r0, r0, ip, lsl #2
   1f0f0:	bl	1cb3c <__assert_fail@plt+0xb19c>
   1f0f4:	pop	{r4, r5, r6, pc}
   1f0f8:	ldr	r3, [r1, #16]
   1f0fc:	ldr	r1, [r3, #28]
   1f100:	ldr	r3, [r0, #12]
   1f104:	str	r1, [r3, r2, lsl #2]
   1f108:	mov	r0, #0
   1f10c:	pop	{r4, r5, r6, pc}
   1f110:	mov	r0, #0
   1f114:	pop	{r4, r5, r6, pc}
   1f118:	mov	r0, #12
   1f11c:	pop	{r4, r5, r6, pc}
   1f120:	push	{r4, r5, r6, lr}
   1f124:	mov	r4, r0
   1f128:	mov	r5, r1
   1f12c:	ldr	r1, [r0]
   1f130:	cmp	r1, #0
   1f134:	beq	1f160 <__assert_fail@plt+0xd7c0>
   1f138:	ldr	r3, [r0, #4]
   1f13c:	cmp	r3, #0
   1f140:	bne	1f174 <__assert_fail@plt+0xd7d4>
   1f144:	ldr	r3, [r0, #8]
   1f148:	str	r5, [r3]
   1f14c:	ldr	r3, [r0, #4]
   1f150:	add	r3, r3, #1
   1f154:	str	r3, [r0, #4]
   1f158:	mov	r0, #1
   1f15c:	pop	{r4, r5, r6, pc}
   1f160:	mov	r1, r5
   1f164:	bl	1cb3c <__assert_fail@plt+0xb19c>
   1f168:	clz	r0, r0
   1f16c:	lsr	r0, r0, #5
   1f170:	pop	{r4, r5, r6, pc}
   1f174:	cmp	r1, r3
   1f178:	beq	1f1d4 <__assert_fail@plt+0xd834>
   1f17c:	ldr	r1, [r4, #8]
   1f180:	ldr	r3, [r1]
   1f184:	cmp	r5, r3
   1f188:	bge	1f1f8 <__assert_fail@plt+0xd858>
   1f18c:	ldr	r3, [r4, #4]
   1f190:	cmp	r3, #0
   1f194:	ble	1f1b8 <__assert_fail@plt+0xd818>
   1f198:	lsl	r2, r3, #2
   1f19c:	ldr	r1, [r4, #8]
   1f1a0:	add	r0, r1, r2
   1f1a4:	ldr	r0, [r0, #-4]
   1f1a8:	str	r0, [r1, r2]
   1f1ac:	sub	r2, r2, #4
   1f1b0:	subs	r3, r3, #1
   1f1b4:	bne	1f19c <__assert_fail@plt+0xd7fc>
   1f1b8:	ldr	r2, [r4, #8]
   1f1bc:	str	r5, [r2, r3, lsl #2]
   1f1c0:	ldr	r3, [r4, #4]
   1f1c4:	add	r3, r3, #1
   1f1c8:	str	r3, [r4, #4]
   1f1cc:	mov	r0, #1
   1f1d0:	pop	{r4, r5, r6, pc}
   1f1d4:	lsl	r3, r1, #1
   1f1d8:	str	r3, [r0]
   1f1dc:	lsl	r1, r1, #3
   1f1e0:	ldr	r0, [r0, #8]
   1f1e4:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1f1e8:	cmp	r0, #0
   1f1ec:	beq	1f238 <__assert_fail@plt+0xd898>
   1f1f0:	str	r0, [r4, #8]
   1f1f4:	b	1f17c <__assert_fail@plt+0xd7dc>
   1f1f8:	ldr	r3, [r4, #4]
   1f1fc:	sub	r0, r3, #-1073741823	; 0xc0000001
   1f200:	lsl	r2, r0, #2
   1f204:	ldr	r0, [r1, r0, lsl #2]
   1f208:	cmp	r5, r0
   1f20c:	bge	1f1b8 <__assert_fail@plt+0xd818>
   1f210:	add	r2, r2, #4
   1f214:	str	r0, [r1, r2]
   1f218:	sub	r3, r3, #1
   1f21c:	ldr	r1, [r4, #8]
   1f220:	add	r0, r1, r2
   1f224:	ldr	r0, [r0, #-8]
   1f228:	sub	r2, r2, #4
   1f22c:	cmp	r5, r0
   1f230:	blt	1f214 <__assert_fail@plt+0xd874>
   1f234:	b	1f1b8 <__assert_fail@plt+0xd818>
   1f238:	mov	r0, #0
   1f23c:	pop	{r4, r5, r6, pc}
   1f240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f244:	sub	sp, sp, #20
   1f248:	mov	r4, r0
   1f24c:	mov	r5, r1
   1f250:	mov	r6, r2
   1f254:	mov	r9, r3
   1f258:	ldr	r7, [sp, #56]	; 0x38
   1f25c:	mov	r8, #0
   1f260:	b	1f434 <__assert_fail@plt+0xda94>
   1f264:	lsl	fp, r5, #2
   1f268:	ldr	r3, [r4, #12]
   1f26c:	ldr	r5, [r3, r5, lsl #2]
   1f270:	str	r6, [sp, #12]
   1f274:	add	r6, r6, r6, lsl #1
   1f278:	lsl	sl, r6, #2
   1f27c:	ldr	r3, [r4, #20]
   1f280:	add	r3, r3, sl
   1f284:	str	r8, [r3, #4]
   1f288:	mov	r2, r7
   1f28c:	mov	r1, r5
   1f290:	mov	r0, r4
   1f294:	bl	1e6c0 <__assert_fail@plt+0xcd20>
   1f298:	mov	r6, r0
   1f29c:	cmn	r0, #1
   1f2a0:	beq	1f524 <__assert_fail@plt+0xdb84>
   1f2a4:	ldr	r3, [r4, #12]
   1f2a8:	ldr	r2, [r3, fp]
   1f2ac:	ldr	r1, [sp, #12]
   1f2b0:	str	r2, [r3, r1, lsl #2]
   1f2b4:	ldr	r0, [r4, #20]
   1f2b8:	mov	r1, r6
   1f2bc:	add	r0, r0, sl
   1f2c0:	bl	1f120 <__assert_fail@plt+0xd780>
   1f2c4:	cmp	r0, #0
   1f2c8:	bne	1f434 <__assert_fail@plt+0xda94>
   1f2cc:	mov	r0, #12
   1f2d0:	b	1f550 <__assert_fail@plt+0xdbb0>
   1f2d4:	ldr	r3, [r4, #12]
   1f2d8:	ldr	r2, [r3, r5, lsl #2]
   1f2dc:	str	r2, [r3, r6, lsl #2]
   1f2e0:	mov	r0, #0
   1f2e4:	b	1f550 <__assert_fail@plt+0xdbb0>
   1f2e8:	ldr	r2, [r2, #8]
   1f2ec:	ldr	fp, [r2]
   1f2f0:	add	sl, r6, r6, lsl #1
   1f2f4:	lsl	sl, sl, #2
   1f2f8:	add	r3, r3, sl
   1f2fc:	str	r8, [r3, #4]
   1f300:	cmp	r5, r9
   1f304:	movne	r3, #0
   1f308:	moveq	r3, #1
   1f30c:	cmp	r5, r6
   1f310:	moveq	r3, #0
   1f314:	cmp	r3, #0
   1f318:	bne	1f36c <__assert_fail@plt+0xd9cc>
   1f31c:	ldr	r3, [r4]
   1f320:	add	ip, r3, ip
   1f324:	ldr	r3, [ip, #4]
   1f328:	lsl	r3, r3, #14
   1f32c:	orr	r7, r7, r3, lsr #22
   1f330:	mov	r2, r7
   1f334:	mov	r1, fp
   1f338:	mov	r0, r4
   1f33c:	bl	1e6c0 <__assert_fail@plt+0xcd20>
   1f340:	mov	r6, r0
   1f344:	cmn	r0, #1
   1f348:	beq	1f52c <__assert_fail@plt+0xdb8c>
   1f34c:	ldr	r0, [r4, #20]
   1f350:	mov	r1, r6
   1f354:	add	r0, r0, sl
   1f358:	bl	1f120 <__assert_fail@plt+0xd780>
   1f35c:	cmp	r0, #0
   1f360:	beq	1f38c <__assert_fail@plt+0xd9ec>
   1f364:	mov	r5, fp
   1f368:	b	1f434 <__assert_fail@plt+0xda94>
   1f36c:	ldr	r0, [r4, #20]
   1f370:	mov	r1, fp
   1f374:	add	r0, r0, sl
   1f378:	bl	1f120 <__assert_fail@plt+0xd780>
   1f37c:	cmp	r0, #0
   1f380:	moveq	r0, #12
   1f384:	movne	r0, #0
   1f388:	b	1f550 <__assert_fail@plt+0xdbb0>
   1f38c:	mov	r0, #12
   1f390:	b	1f550 <__assert_fail@plt+0xdbb0>
   1f394:	sub	r1, r1, #1
   1f398:	add	r3, r3, ip
   1f39c:	add	r3, lr, r3
   1f3a0:	ldrb	r6, [r3, #6]
   1f3a4:	cmp	r1, #0
   1f3a8:	movle	r0, #0
   1f3ac:	movgt	r0, #1
   1f3b0:	ands	r0, r0, r6, lsr #2
   1f3b4:	beq	1f4c4 <__assert_fail@plt+0xdb24>
   1f3b8:	ldr	r0, [r2, #-4]!
   1f3bc:	cmp	r5, r0
   1f3c0:	bne	1f394 <__assert_fail@plt+0xd9f4>
   1f3c4:	ldr	r0, [r3, #4]
   1f3c8:	lsl	r0, r0, #14
   1f3cc:	cmp	r7, r0, lsr #22
   1f3d0:	bne	1f394 <__assert_fail@plt+0xd9f4>
   1f3d4:	cmn	r1, #1
   1f3d8:	beq	1f4c4 <__assert_fail@plt+0xdb24>
   1f3dc:	ldr	r0, [r4, #20]
   1f3e0:	add	r0, r0, fp
   1f3e4:	bl	1f120 <__assert_fail@plt+0xd780>
   1f3e8:	cmp	r0, #0
   1f3ec:	beq	1f544 <__assert_fail@plt+0xdba4>
   1f3f0:	ldr	r3, [r4, #20]
   1f3f4:	add	sl, r3, sl
   1f3f8:	ldr	r3, [sl, #8]
   1f3fc:	ldr	r5, [r3, #4]
   1f400:	mov	r2, r7
   1f404:	mov	r1, r5
   1f408:	mov	r0, r4
   1f40c:	bl	1e6c0 <__assert_fail@plt+0xcd20>
   1f410:	mov	r6, r0
   1f414:	cmn	r0, #1
   1f418:	beq	1f54c <__assert_fail@plt+0xdbac>
   1f41c:	ldr	r0, [r4, #20]
   1f420:	mov	r1, r6
   1f424:	add	r0, r0, fp
   1f428:	bl	1f120 <__assert_fail@plt+0xd780>
   1f42c:	cmp	r0, #0
   1f430:	beq	1f51c <__assert_fail@plt+0xdb7c>
   1f434:	lsl	ip, r5, #3
   1f438:	ldr	r3, [r4]
   1f43c:	add	r3, r3, ip
   1f440:	ldrb	r3, [r3, #4]
   1f444:	cmp	r3, #4
   1f448:	beq	1f264 <__assert_fail@plt+0xd8c4>
   1f44c:	ldr	r3, [r4, #20]
   1f450:	add	sl, r5, r5, lsl #1
   1f454:	lsl	sl, sl, #2
   1f458:	add	r2, r3, sl
   1f45c:	ldr	r1, [r2, #4]
   1f460:	cmp	r1, #0
   1f464:	beq	1f2d4 <__assert_fail@plt+0xd934>
   1f468:	cmp	r1, #1
   1f46c:	beq	1f2e8 <__assert_fail@plt+0xd948>
   1f470:	ldr	r2, [r2, #8]
   1f474:	ldr	r5, [r2]
   1f478:	add	r6, r6, r6, lsl #1
   1f47c:	lsl	fp, r6, #2
   1f480:	add	r3, r3, fp
   1f484:	str	r8, [r3, #4]
   1f488:	ldr	ip, [r4, #8]
   1f48c:	sub	r1, ip, #1
   1f490:	ldr	lr, [r4]
   1f494:	add	r3, lr, r1, lsl #3
   1f498:	ldrb	r0, [r3, #6]
   1f49c:	cmp	r1, #0
   1f4a0:	movle	r2, #0
   1f4a4:	movgt	r2, #1
   1f4a8:	ands	r2, r2, r0, lsr #2
   1f4ac:	beq	1f4c4 <__assert_fail@plt+0xdb24>
   1f4b0:	ldr	r2, [r4, #16]
   1f4b4:	add	r2, r2, ip, lsl #2
   1f4b8:	rsb	ip, r3, ip, lsl #3
   1f4bc:	sub	ip, ip, #16
   1f4c0:	b	1f3b8 <__assert_fail@plt+0xda18>
   1f4c4:	mov	r2, r7
   1f4c8:	mov	r1, r5
   1f4cc:	mov	r0, r4
   1f4d0:	bl	1e6c0 <__assert_fail@plt+0xcd20>
   1f4d4:	mov	r6, r0
   1f4d8:	cmn	r0, #1
   1f4dc:	beq	1f534 <__assert_fail@plt+0xdb94>
   1f4e0:	ldr	r0, [r4, #20]
   1f4e4:	mov	r1, r6
   1f4e8:	add	r0, r0, fp
   1f4ec:	bl	1f120 <__assert_fail@plt+0xd780>
   1f4f0:	cmp	r0, #0
   1f4f4:	beq	1f53c <__assert_fail@plt+0xdb9c>
   1f4f8:	str	r7, [sp]
   1f4fc:	mov	r3, r9
   1f500:	mov	r2, r6
   1f504:	mov	r1, r5
   1f508:	mov	r0, r4
   1f50c:	bl	1f240 <__assert_fail@plt+0xd8a0>
   1f510:	cmp	r0, #0
   1f514:	beq	1f3f0 <__assert_fail@plt+0xda50>
   1f518:	b	1f550 <__assert_fail@plt+0xdbb0>
   1f51c:	mov	r0, #12
   1f520:	b	1f550 <__assert_fail@plt+0xdbb0>
   1f524:	mov	r0, #12
   1f528:	b	1f550 <__assert_fail@plt+0xdbb0>
   1f52c:	mov	r0, #12
   1f530:	b	1f550 <__assert_fail@plt+0xdbb0>
   1f534:	mov	r0, #12
   1f538:	b	1f550 <__assert_fail@plt+0xdbb0>
   1f53c:	mov	r0, #12
   1f540:	b	1f550 <__assert_fail@plt+0xdbb0>
   1f544:	mov	r0, #12
   1f548:	b	1f550 <__assert_fail@plt+0xdbb0>
   1f54c:	mov	r0, #12
   1f550:	add	sp, sp, #20
   1f554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f558:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f55c:	sub	sp, sp, #12
   1f560:	mov	r6, r0
   1f564:	mov	r7, r1
   1f568:	mov	r4, r2
   1f56c:	mov	r9, r3
   1f570:	ldr	r8, [sp, #40]	; 0x28
   1f574:	b	1f5c0 <__assert_fail@plt+0xdc20>
   1f578:	mov	r1, r4
   1f57c:	mov	r0, r7
   1f580:	bl	1f120 <__assert_fail@plt+0xd780>
   1f584:	cmp	r0, #0
   1f588:	beq	1f650 <__assert_fail@plt+0xdcb0>
   1f58c:	add	r5, r5, r5, lsl #1
   1f590:	lsl	r5, r5, #2
   1f594:	ldr	r3, [r6, #20]
   1f598:	add	r3, r3, r5
   1f59c:	ldr	r2, [r3, #4]
   1f5a0:	cmp	r2, #0
   1f5a4:	beq	1f65c <__assert_fail@plt+0xdcbc>
   1f5a8:	cmp	r2, #2
   1f5ac:	beq	1f620 <__assert_fail@plt+0xdc80>
   1f5b0:	ldr	r3, [r6, #20]
   1f5b4:	add	r5, r3, r5
   1f5b8:	ldr	r3, [r5, #8]
   1f5bc:	ldr	r4, [r3]
   1f5c0:	mov	r1, r4
   1f5c4:	mov	r0, r7
   1f5c8:	bl	1bbd0 <__assert_fail@plt+0xa230>
   1f5cc:	cmp	r0, #0
   1f5d0:	bne	1f648 <__assert_fail@plt+0xdca8>
   1f5d4:	mov	r5, r4
   1f5d8:	ldr	r3, [r6]
   1f5dc:	add	r2, r3, r4, lsl #3
   1f5e0:	ldrb	r2, [r2, #4]
   1f5e4:	cmp	r2, r8
   1f5e8:	bne	1f578 <__assert_fail@plt+0xdbd8>
   1f5ec:	ldr	r3, [r3, r4, lsl #3]
   1f5f0:	cmp	r9, r3
   1f5f4:	bne	1f578 <__assert_fail@plt+0xdbd8>
   1f5f8:	cmp	r2, #9
   1f5fc:	movne	r0, #0
   1f600:	bne	1f654 <__assert_fail@plt+0xdcb4>
   1f604:	mov	r1, r4
   1f608:	mov	r0, r7
   1f60c:	bl	1f120 <__assert_fail@plt+0xd780>
   1f610:	cmp	r0, #0
   1f614:	moveq	r0, #12
   1f618:	movne	r0, #0
   1f61c:	b	1f654 <__assert_fail@plt+0xdcb4>
   1f620:	ldr	r3, [r3, #8]
   1f624:	ldr	r2, [r3, #4]
   1f628:	str	r8, [sp]
   1f62c:	mov	r3, r9
   1f630:	mov	r1, r7
   1f634:	mov	r0, r6
   1f638:	bl	1f558 <__assert_fail@plt+0xdbb8>
   1f63c:	cmp	r0, #0
   1f640:	beq	1f5b0 <__assert_fail@plt+0xdc10>
   1f644:	b	1f654 <__assert_fail@plt+0xdcb4>
   1f648:	mov	r0, #0
   1f64c:	b	1f654 <__assert_fail@plt+0xdcb4>
   1f650:	mov	r0, #12
   1f654:	add	sp, sp, #12
   1f658:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f65c:	mov	r0, #0
   1f660:	b	1f654 <__assert_fail@plt+0xdcb4>
   1f664:	push	{r4, r5, r6, lr}
   1f668:	subs	r6, r1, #0
   1f66c:	beq	1f7ec <__assert_fail@plt+0xde4c>
   1f670:	ldr	r2, [r6, #4]
   1f674:	cmp	r2, #0
   1f678:	beq	1f7f4 <__assert_fail@plt+0xde54>
   1f67c:	mov	r4, r0
   1f680:	ldr	r1, [r0]
   1f684:	ldr	r3, [r0, #4]
   1f688:	add	r0, r3, r2, lsl #1
   1f68c:	cmp	r1, r0
   1f690:	blt	1f6f0 <__assert_fail@plt+0xdd50>
   1f694:	cmp	r3, #0
   1f698:	beq	1f724 <__assert_fail@plt+0xdd84>
   1f69c:	ldr	r2, [r6, #4]
   1f6a0:	add	r5, r3, r2, lsl #1
   1f6a4:	sub	r2, r2, #1
   1f6a8:	sub	r3, r3, #1
   1f6ac:	cmp	r2, #0
   1f6b0:	cmpge	r3, #0
   1f6b4:	blt	1f748 <__assert_fail@plt+0xdda8>
   1f6b8:	ldr	ip, [r4, #8]
   1f6bc:	ldr	r0, [ip, r3, lsl #2]
   1f6c0:	ldr	r1, [r6, #8]
   1f6c4:	ldr	r1, [r1, r2, lsl #2]
   1f6c8:	cmp	r0, r1
   1f6cc:	subeq	r2, r2, #1
   1f6d0:	subeq	r3, r3, #1
   1f6d4:	beq	1f6ac <__assert_fail@plt+0xdd0c>
   1f6d8:	cmp	r0, r1
   1f6dc:	sublt	r5, r5, #1
   1f6e0:	sublt	r2, r2, #1
   1f6e4:	strlt	r1, [ip, r5, lsl #2]
   1f6e8:	subge	r3, r3, #1
   1f6ec:	b	1f6ac <__assert_fail@plt+0xdd0c>
   1f6f0:	add	r1, r2, r1
   1f6f4:	lsl	r5, r1, #1
   1f6f8:	lsl	r1, r1, #3
   1f6fc:	ldr	r0, [r4, #8]
   1f700:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1f704:	cmp	r0, #0
   1f708:	beq	1f7fc <__assert_fail@plt+0xde5c>
   1f70c:	str	r0, [r4, #8]
   1f710:	str	r5, [r4]
   1f714:	ldr	r3, [r4, #4]
   1f718:	cmp	r3, #0
   1f71c:	bne	1f69c <__assert_fail@plt+0xdcfc>
   1f720:	b	1f728 <__assert_fail@plt+0xdd88>
   1f724:	ldr	r0, [r4, #8]
   1f728:	ldr	r3, [r6, #4]
   1f72c:	str	r3, [r4, #4]
   1f730:	ldr	r2, [r6, #4]
   1f734:	lsl	r2, r2, #2
   1f738:	ldr	r1, [r6, #8]
   1f73c:	bl	115d4 <memcpy@plt>
   1f740:	mov	r0, #0
   1f744:	pop	{r4, r5, r6, pc}
   1f748:	cmp	r2, #0
   1f74c:	blt	1f76c <__assert_fail@plt+0xddcc>
   1f750:	add	r2, r2, #1
   1f754:	sub	r5, r5, r2
   1f758:	ldr	r0, [r4, #8]
   1f75c:	lsl	r2, r2, #2
   1f760:	ldr	r1, [r6, #8]
   1f764:	add	r0, r0, r5, lsl #2
   1f768:	bl	115d4 <memcpy@plt>
   1f76c:	ldr	r3, [r4, #4]
   1f770:	ldr	r2, [r6, #4]
   1f774:	add	r2, r3, r2, lsl #1
   1f778:	sub	lr, r2, #1
   1f77c:	subs	r2, r2, r5
   1f780:	beq	1f804 <__assert_fail@plt+0xde64>
   1f784:	sub	r1, r3, #1
   1f788:	add	r3, r3, r2
   1f78c:	str	r3, [r4, #4]
   1f790:	b	1f7a4 <__assert_fail@plt+0xde04>
   1f794:	add	ip, r1, r2
   1f798:	str	r0, [r3, ip, lsl #2]
   1f79c:	subs	r1, r1, #1
   1f7a0:	bmi	1f7d4 <__assert_fail@plt+0xde34>
   1f7a4:	ldr	r3, [r4, #8]
   1f7a8:	ldr	ip, [r3, lr, lsl #2]
   1f7ac:	ldr	r0, [r3, r1, lsl #2]
   1f7b0:	cmp	ip, r0
   1f7b4:	ble	1f794 <__assert_fail@plt+0xddf4>
   1f7b8:	sub	lr, lr, #1
   1f7bc:	add	r0, r1, r2
   1f7c0:	str	ip, [r3, r0, lsl #2]
   1f7c4:	subs	r2, r2, #1
   1f7c8:	bne	1f7a4 <__assert_fail@plt+0xde04>
   1f7cc:	mov	r0, #0
   1f7d0:	pop	{r4, r5, r6, pc}
   1f7d4:	ldr	r0, [r4, #8]
   1f7d8:	lsl	r2, r2, #2
   1f7dc:	add	r1, r0, r5, lsl #2
   1f7e0:	bl	115d4 <memcpy@plt>
   1f7e4:	mov	r0, #0
   1f7e8:	pop	{r4, r5, r6, pc}
   1f7ec:	mov	r0, #0
   1f7f0:	pop	{r4, r5, r6, pc}
   1f7f4:	mov	r0, #0
   1f7f8:	pop	{r4, r5, r6, pc}
   1f7fc:	mov	r0, #12
   1f800:	pop	{r4, r5, r6, pc}
   1f804:	mov	r0, #0
   1f808:	pop	{r4, r5, r6, pc}
   1f80c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f810:	sub	sp, sp, #44	; 0x2c
   1f814:	mov	sl, r0
   1f818:	mov	r5, r1
   1f81c:	mov	r4, r2
   1f820:	str	r3, [sp, #12]
   1f824:	add	r8, r2, r2, lsl #1
   1f828:	lsl	r8, r8, #2
   1f82c:	ldr	r3, [r1, #20]
   1f830:	add	r3, r3, r8
   1f834:	ldr	r1, [r3, #4]
   1f838:	add	r1, r1, #1
   1f83c:	add	r0, sp, #28
   1f840:	bl	1cb80 <__assert_fail@plt+0xb1e0>
   1f844:	subs	fp, r0, #0
   1f848:	bne	1fa10 <__assert_fail@plt+0xe070>
   1f84c:	mov	r9, r8
   1f850:	ldr	r3, [sp, #32]
   1f854:	add	r2, r3, #1
   1f858:	str	r2, [sp, #32]
   1f85c:	ldr	r2, [sp, #36]	; 0x24
   1f860:	str	r4, [r2, r3, lsl #2]
   1f864:	ldr	r3, [r5, #24]
   1f868:	add	r3, r3, r8
   1f86c:	mvn	r2, #0
   1f870:	str	r2, [r3, #4]
   1f874:	ldr	r2, [r5]
   1f878:	lsl	r6, r4, #3
   1f87c:	add	r1, r2, r6
   1f880:	ldr	r0, [r1, #4]
   1f884:	ldr	r3, [pc, #424]	; 1fa34 <__assert_fail@plt+0xe094>
   1f888:	and	r3, r3, r0
   1f88c:	cmp	r3, #0
   1f890:	beq	1f8c0 <__assert_fail@plt+0xdf20>
   1f894:	ldr	r3, [r5, #20]
   1f898:	add	r3, r3, r8
   1f89c:	ldr	r0, [r3, #4]
   1f8a0:	cmp	r0, #0
   1f8a4:	beq	1fa1c <__assert_fail@plt+0xe07c>
   1f8a8:	ldr	r3, [r3, #8]
   1f8ac:	ldr	r3, [r3]
   1f8b0:	add	r2, r2, r3, lsl #3
   1f8b4:	ldrb	r3, [r2, #6]
   1f8b8:	tst	r3, #4
   1f8bc:	beq	1f8fc <__assert_fail@plt+0xdf5c>
   1f8c0:	ldr	r3, [r5]
   1f8c4:	add	r6, r3, r6
   1f8c8:	ldrb	r3, [r6, #4]
   1f8cc:	tst	r3, #8
   1f8d0:	beq	1fa1c <__assert_fail@plt+0xe07c>
   1f8d4:	ldr	r3, [r5, #20]
   1f8d8:	add	r3, r3, r8
   1f8dc:	ldr	r2, [r3, #4]
   1f8e0:	cmp	r2, #0
   1f8e4:	ble	1fa1c <__assert_fail@plt+0xe07c>
   1f8e8:	mov	r2, #0
   1f8ec:	str	r2, [sp, #8]
   1f8f0:	mov	r6, r2
   1f8f4:	add	r7, sp, #16
   1f8f8:	b	1f968 <__assert_fail@plt+0xdfc8>
   1f8fc:	ldr	r3, [r1, #4]
   1f900:	lsl	r3, r3, #14
   1f904:	lsr	r3, r3, #22
   1f908:	str	r3, [sp]
   1f90c:	mov	r3, r4
   1f910:	mov	r2, r4
   1f914:	mov	r1, r4
   1f918:	mov	r0, r5
   1f91c:	bl	1f240 <__assert_fail@plt+0xd8a0>
   1f920:	cmp	r0, #0
   1f924:	beq	1f8c0 <__assert_fail@plt+0xdf20>
   1f928:	mov	fp, r0
   1f92c:	b	1fa10 <__assert_fail@plt+0xe070>
   1f930:	mov	r3, #0
   1f934:	mov	r1, r5
   1f938:	mov	r0, r7
   1f93c:	bl	1f80c <__assert_fail@plt+0xde6c>
   1f940:	cmp	r0, #0
   1f944:	beq	1f9a4 <__assert_fail@plt+0xe004>
   1f948:	mov	fp, r0
   1f94c:	b	1fa10 <__assert_fail@plt+0xe070>
   1f950:	add	r6, r6, #1
   1f954:	ldr	r3, [r5, #20]
   1f958:	add	r3, r3, r9
   1f95c:	ldr	r2, [r3, #4]
   1f960:	cmp	r2, r6
   1f964:	ble	1f9e0 <__assert_fail@plt+0xe040>
   1f968:	ldr	r3, [r3, #8]
   1f96c:	ldr	r2, [r3, r6, lsl #2]
   1f970:	add	r4, r2, r2, lsl #1
   1f974:	lsl	r4, r4, #2
   1f978:	ldr	r3, [r5, #24]
   1f97c:	add	r3, r3, r4
   1f980:	ldr	r1, [r3, #4]
   1f984:	cmn	r1, #1
   1f988:	moveq	r3, #1
   1f98c:	streq	r3, [sp, #8]
   1f990:	beq	1f950 <__assert_fail@plt+0xdfb0>
   1f994:	cmp	r1, #0
   1f998:	beq	1f930 <__assert_fail@plt+0xdf90>
   1f99c:	ldm	r3, {r0, r1, r2}
   1f9a0:	stm	r7, {r0, r1, r2}
   1f9a4:	mov	r1, r7
   1f9a8:	add	r0, sp, #28
   1f9ac:	bl	1f664 <__assert_fail@plt+0xdcc4>
   1f9b0:	cmp	r0, #0
   1f9b4:	bne	1f948 <__assert_fail@plt+0xdfa8>
   1f9b8:	ldr	r3, [r5, #24]
   1f9bc:	add	r4, r3, r4
   1f9c0:	ldr	r3, [r4, #4]
   1f9c4:	cmp	r3, #0
   1f9c8:	bne	1f950 <__assert_fail@plt+0xdfb0>
   1f9cc:	ldr	r0, [sp, #24]
   1f9d0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1f9d4:	mov	r3, #1
   1f9d8:	str	r3, [sp, #8]
   1f9dc:	b	1f950 <__assert_fail@plt+0xdfb0>
   1f9e0:	ldr	r3, [sp, #12]
   1f9e4:	eor	r3, r3, #1
   1f9e8:	ldr	r2, [sp, #8]
   1f9ec:	tst	r2, r3
   1f9f0:	beq	1fa1c <__assert_fail@plt+0xe07c>
   1f9f4:	ldr	r3, [r5, #24]
   1f9f8:	add	r8, r3, r8
   1f9fc:	mov	r3, #0
   1fa00:	str	r3, [r8, #4]
   1fa04:	add	r3, sp, #40	; 0x28
   1fa08:	ldmdb	r3, {r0, r1, r2}
   1fa0c:	stm	sl, {r0, r1, r2}
   1fa10:	mov	r0, fp
   1fa14:	add	sp, sp, #44	; 0x2c
   1fa18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa1c:	ldr	r3, [r5, #24]
   1fa20:	add	r8, r3, r8
   1fa24:	add	r3, sp, #40	; 0x28
   1fa28:	ldmdb	r3, {r0, r1, r2}
   1fa2c:	stm	r8, {r0, r1, r2}
   1fa30:	b	1fa04 <__assert_fail@plt+0xe064>
   1fa34:	andeq	pc, r3, r0, lsl #30
   1fa38:	push	{r4, r5, r6, lr}
   1fa3c:	mov	r5, r0
   1fa40:	cmp	r1, #0
   1fa44:	blt	1fa88 <__assert_fail@plt+0xe0e8>
   1fa48:	ldr	r3, [r0, #48]	; 0x30
   1fa4c:	cmp	r1, r3
   1fa50:	beq	1fa90 <__assert_fail@plt+0xe0f0>
   1fa54:	ldr	r3, [r0, #80]	; 0x50
   1fa58:	cmp	r3, #1
   1fa5c:	ble	1fafc <__assert_fail@plt+0xe15c>
   1fa60:	ldr	r3, [r0, #8]
   1fa64:	add	r3, r3, r1, lsl #2
   1fa68:	ldr	r4, [r3], #-4
   1fa6c:	cmn	r4, #1
   1fa70:	bne	1faa4 <__assert_fail@plt+0xe104>
   1fa74:	sub	r1, r1, #1
   1fa78:	cmn	r1, #1
   1fa7c:	bne	1fa68 <__assert_fail@plt+0xe0c8>
   1fa80:	ldr	r0, [r5, #60]	; 0x3c
   1fa84:	pop	{r4, r5, r6, pc}
   1fa88:	ldr	r0, [r0, #60]	; 0x3c
   1fa8c:	pop	{r4, r5, r6, pc}
   1fa90:	and	r2, r2, #2
   1fa94:	cmp	r2, #0
   1fa98:	movne	r0, #8
   1fa9c:	moveq	r0, #10
   1faa0:	pop	{r4, r5, r6, pc}
   1faa4:	ldrb	r3, [r5, #78]	; 0x4e
   1faa8:	cmp	r3, #0
   1faac:	bne	1fac0 <__assert_fail@plt+0xe120>
   1fab0:	cmp	r4, #10
   1fab4:	beq	1fae8 <__assert_fail@plt+0xe148>
   1fab8:	mov	r0, #0
   1fabc:	pop	{r4, r5, r6, pc}
   1fac0:	mov	r0, r4
   1fac4:	bl	117e4 <iswalnum@plt>
   1fac8:	adds	r3, r0, #0
   1facc:	movne	r3, #1
   1fad0:	cmp	r4, #95	; 0x5f
   1fad4:	orreq	r3, r3, #1
   1fad8:	cmp	r3, #0
   1fadc:	beq	1fab0 <__assert_fail@plt+0xe110>
   1fae0:	mov	r0, #1
   1fae4:	pop	{r4, r5, r6, pc}
   1fae8:	ldrb	r0, [r5, #77]	; 0x4d
   1faec:	cmp	r0, #0
   1faf0:	movne	r0, #2
   1faf4:	moveq	r0, #0
   1faf8:	pop	{r4, r5, r6, pc}
   1fafc:	ldr	r3, [r0, #4]
   1fb00:	ldrb	r2, [r3, r1]
   1fb04:	asr	r0, r2, #5
   1fb08:	ldr	r3, [r5, #68]	; 0x44
   1fb0c:	and	r1, r2, #31
   1fb10:	ldr	r3, [r3, r0, lsl #2]
   1fb14:	lsr	r3, r3, r1
   1fb18:	tst	r3, #1
   1fb1c:	bne	1fb44 <__assert_fail@plt+0xe1a4>
   1fb20:	cmp	r2, #10
   1fb24:	beq	1fb30 <__assert_fail@plt+0xe190>
   1fb28:	mov	r0, #0
   1fb2c:	pop	{r4, r5, r6, pc}
   1fb30:	ldrb	r0, [r5, #77]	; 0x4d
   1fb34:	cmp	r0, #0
   1fb38:	movne	r0, #2
   1fb3c:	moveq	r0, #0
   1fb40:	pop	{r4, r5, r6, pc}
   1fb44:	mov	r0, #1
   1fb48:	pop	{r4, r5, r6, pc}
   1fb4c:	push	{r4, lr}
   1fb50:	ldr	r3, [r0, #4]
   1fb54:	ldrb	ip, [r3, r2]
   1fb58:	ldrb	r3, [r1, #4]
   1fb5c:	sub	r3, r3, #1
   1fb60:	cmp	r3, #6
   1fb64:	ldrls	pc, [pc, r3, lsl #2]
   1fb68:	b	1fc88 <__assert_fail@plt+0xe2e8>
   1fb6c:	andeq	pc, r1, r8, lsl #23
   1fb70:	andeq	pc, r1, r8, lsl #25
   1fb74:	muleq	r1, ip, fp
   1fb78:	andeq	pc, r1, r8, lsl #25
   1fb7c:	andeq	pc, r1, r4, lsl ip	; <UNPREDICTABLE>
   1fb80:	andeq	pc, r1, r8, lsl #25
   1fb84:	andeq	pc, r1, ip, lsl #24
   1fb88:	ldrb	r3, [r1]
   1fb8c:	cmp	r3, ip
   1fb90:	beq	1fbb8 <__assert_fail@plt+0xe218>
   1fb94:	mov	r0, #0
   1fb98:	pop	{r4, pc}
   1fb9c:	lsr	lr, ip, #5
   1fba0:	ldr	r3, [r1]
   1fba4:	and	ip, ip, #31
   1fba8:	ldr	r3, [r3, lr, lsl #2]
   1fbac:	lsr	ip, r3, ip
   1fbb0:	tst	ip, #1
   1fbb4:	beq	1fc90 <__assert_fail@plt+0xe2f0>
   1fbb8:	ldr	ip, [r1, #4]
   1fbbc:	ldr	r3, [pc, #260]	; 1fcc8 <__assert_fail@plt+0xe328>
   1fbc0:	and	r3, r3, ip
   1fbc4:	cmp	r3, #0
   1fbc8:	beq	1fca0 <__assert_fail@plt+0xe300>
   1fbcc:	mov	r3, r2
   1fbd0:	mov	r4, r1
   1fbd4:	ldr	r2, [r0, #88]	; 0x58
   1fbd8:	mov	r1, r3
   1fbdc:	bl	1fa38 <__assert_fail@plt+0xe098>
   1fbe0:	ldr	r3, [r4, #4]
   1fbe4:	lsl	r3, r3, #14
   1fbe8:	lsr	r3, r3, #22
   1fbec:	tst	r3, #4
   1fbf0:	beq	1fc54 <__assert_fail@plt+0xe2b4>
   1fbf4:	tst	r0, #1
   1fbf8:	beq	1fca8 <__assert_fail@plt+0xe308>
   1fbfc:	tst	r3, #8
   1fc00:	beq	1fc64 <__assert_fail@plt+0xe2c4>
   1fc04:	mov	r0, #0
   1fc08:	pop	{r4, pc}
   1fc0c:	tst	ip, #128	; 0x80
   1fc10:	bne	1fc98 <__assert_fail@plt+0xe2f8>
   1fc14:	cmp	ip, #10
   1fc18:	beq	1fc3c <__assert_fail@plt+0xe29c>
   1fc1c:	cmp	ip, #0
   1fc20:	bne	1fbb8 <__assert_fail@plt+0xe218>
   1fc24:	ldr	r3, [r0, #84]	; 0x54
   1fc28:	ldr	r3, [r3, #128]	; 0x80
   1fc2c:	tst	r3, #128	; 0x80
   1fc30:	beq	1fbb8 <__assert_fail@plt+0xe218>
   1fc34:	mov	r0, #0
   1fc38:	pop	{r4, pc}
   1fc3c:	ldr	r3, [r0, #84]	; 0x54
   1fc40:	ldr	r3, [r3, #128]	; 0x80
   1fc44:	tst	r3, #64	; 0x40
   1fc48:	bne	1fbb8 <__assert_fail@plt+0xe218>
   1fc4c:	mov	r0, #0
   1fc50:	pop	{r4, pc}
   1fc54:	tst	r3, #8
   1fc58:	beq	1fc64 <__assert_fail@plt+0xe2c4>
   1fc5c:	tst	r0, #1
   1fc60:	bne	1fcb0 <__assert_fail@plt+0xe310>
   1fc64:	tst	r3, #32
   1fc68:	beq	1fc74 <__assert_fail@plt+0xe2d4>
   1fc6c:	tst	r0, #2
   1fc70:	beq	1fcb8 <__assert_fail@plt+0xe318>
   1fc74:	tst	r3, #128	; 0x80
   1fc78:	beq	1fcc0 <__assert_fail@plt+0xe320>
   1fc7c:	lsr	r0, r0, #3
   1fc80:	and	r0, r0, #1
   1fc84:	pop	{r4, pc}
   1fc88:	mov	r0, #0
   1fc8c:	pop	{r4, pc}
   1fc90:	mov	r0, #0
   1fc94:	pop	{r4, pc}
   1fc98:	mov	r0, #0
   1fc9c:	pop	{r4, pc}
   1fca0:	mov	r0, #1
   1fca4:	pop	{r4, pc}
   1fca8:	mov	r0, #0
   1fcac:	pop	{r4, pc}
   1fcb0:	mov	r0, #0
   1fcb4:	pop	{r4, pc}
   1fcb8:	mov	r0, #0
   1fcbc:	pop	{r4, pc}
   1fcc0:	mov	r0, #1
   1fcc4:	pop	{r4, pc}
   1fcc8:	andeq	pc, r3, r0, lsl #30
   1fccc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcd0:	ldr	r7, [r0, #84]	; 0x54
   1fcd4:	ldr	r3, [r1, #4]
   1fcd8:	cmp	r3, #0
   1fcdc:	ble	1fdc4 <__assert_fail@plt+0xe424>
   1fce0:	mov	r9, r2
   1fce4:	mov	r6, r1
   1fce8:	mov	r8, r0
   1fcec:	mov	r4, #0
   1fcf0:	b	1fd24 <__assert_fail@plt+0xe384>
   1fcf4:	lsl	sl, r1, #1
   1fcf8:	lsl	r1, r1, #3
   1fcfc:	bl	1b9dc <__assert_fail@plt+0xa03c>
   1fd00:	cmp	r0, #0
   1fd04:	beq	1fdcc <__assert_fail@plt+0xe42c>
   1fd08:	str	r0, [r8, #132]	; 0x84
   1fd0c:	str	sl, [r8, #128]	; 0x80
   1fd10:	b	1fd70 <__assert_fail@plt+0xe3d0>
   1fd14:	add	r4, r4, #1
   1fd18:	ldr	r3, [r6, #4]
   1fd1c:	cmp	r3, r4
   1fd20:	ble	1fdbc <__assert_fail@plt+0xe41c>
   1fd24:	ldr	r3, [r6, #8]
   1fd28:	ldr	r5, [r3, r4, lsl #2]
   1fd2c:	ldr	r3, [r7]
   1fd30:	add	r2, r3, r5, lsl #3
   1fd34:	ldrb	r2, [r2, #4]
   1fd38:	cmp	r2, #8
   1fd3c:	bne	1fd14 <__assert_fail@plt+0xe374>
   1fd40:	ldr	r3, [r3, r5, lsl #3]
   1fd44:	cmp	r3, #31
   1fd48:	bgt	1fd14 <__assert_fail@plt+0xe374>
   1fd4c:	ldr	r2, [r7, #80]	; 0x50
   1fd50:	lsr	r3, r2, r3
   1fd54:	tst	r3, #1
   1fd58:	beq	1fd14 <__assert_fail@plt+0xe374>
   1fd5c:	ldr	r0, [r8, #132]	; 0x84
   1fd60:	ldr	r1, [r8, #128]	; 0x80
   1fd64:	ldr	r3, [r8, #124]	; 0x7c
   1fd68:	cmp	r1, r3
   1fd6c:	beq	1fcf4 <__assert_fail@plt+0xe354>
   1fd70:	ldr	fp, [r8, #124]	; 0x7c
   1fd74:	ldr	sl, [r8, #132]	; 0x84
   1fd78:	mov	r1, #24
   1fd7c:	mov	r0, #1
   1fd80:	bl	1b548 <__assert_fail@plt+0x9ba8>
   1fd84:	str	r0, [sl, fp, lsl #2]
   1fd88:	ldr	r2, [r8, #124]	; 0x7c
   1fd8c:	ldr	r3, [r8, #132]	; 0x84
   1fd90:	ldr	r3, [r3, r2, lsl #2]
   1fd94:	cmp	r3, #0
   1fd98:	beq	1fdcc <__assert_fail@plt+0xe42c>
   1fd9c:	str	r5, [r3, #4]
   1fda0:	ldr	r2, [r8, #132]	; 0x84
   1fda4:	ldr	r3, [r8, #124]	; 0x7c
   1fda8:	add	r1, r3, #1
   1fdac:	str	r1, [r8, #124]	; 0x7c
   1fdb0:	ldr	r3, [r2, r3, lsl #2]
   1fdb4:	str	r9, [r3]
   1fdb8:	b	1fd14 <__assert_fail@plt+0xe374>
   1fdbc:	mov	r0, #0
   1fdc0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdc4:	mov	r0, #0
   1fdc8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdcc:	mov	r0, #12
   1fdd0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdd4:	push	{r4, r5, r6, lr}
   1fdd8:	mov	r4, r0
   1fddc:	mov	r5, r1
   1fde0:	ldr	r6, [r0, #104]	; 0x68
   1fde4:	ldr	r3, [r0, #36]	; 0x24
   1fde8:	cmp	r3, r1
   1fdec:	bgt	1fdfc <__assert_fail@plt+0xe45c>
   1fdf0:	ldr	r2, [r0, #48]	; 0x30
   1fdf4:	cmp	r3, r2
   1fdf8:	blt	1fe14 <__assert_fail@plt+0xe474>
   1fdfc:	ldr	r3, [r4, #28]
   1fe00:	cmp	r5, r3
   1fe04:	blt	1fe28 <__assert_fail@plt+0xe488>
   1fe08:	ldr	r2, [r4, #48]	; 0x30
   1fe0c:	cmp	r3, r2
   1fe10:	bge	1fe28 <__assert_fail@plt+0xe488>
   1fe14:	add	r1, r5, #1
   1fe18:	mov	r0, r4
   1fe1c:	bl	1d860 <__assert_fail@plt+0xbec0>
   1fe20:	cmp	r0, #0
   1fe24:	popne	{r4, r5, r6, pc}
   1fe28:	cmp	r6, r5
   1fe2c:	bge	1fe58 <__assert_fail@plt+0xe4b8>
   1fe30:	sub	r2, r5, r6
   1fe34:	add	r6, r6, #1
   1fe38:	ldr	r0, [r4, #100]	; 0x64
   1fe3c:	lsl	r2, r2, #2
   1fe40:	mov	r1, #0
   1fe44:	add	r0, r0, r6, lsl #2
   1fe48:	bl	11814 <memset@plt>
   1fe4c:	str	r5, [r4, #104]	; 0x68
   1fe50:	mov	r0, #0
   1fe54:	pop	{r4, r5, r6, pc}
   1fe58:	mov	r0, #0
   1fe5c:	pop	{r4, r5, r6, pc}
   1fe60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe64:	sub	sp, sp, #28
   1fe68:	mov	r7, r0
   1fe6c:	mov	r8, r1
   1fe70:	mov	r5, r2
   1fe74:	mov	r4, r3
   1fe78:	ldr	r1, [r1, #4]
   1fe7c:	add	r0, sp, #12
   1fe80:	bl	1cb80 <__assert_fail@plt+0xb1e0>
   1fe84:	subs	r9, r0, #0
   1fe88:	bne	1ff80 <__assert_fail@plt+0xe5e0>
   1fe8c:	ldr	r3, [r8, #4]
   1fe90:	cmp	r3, #0
   1fe94:	ble	1ff64 <__assert_fail@plt+0xe5c4>
   1fe98:	mov	r6, #0
   1fe9c:	b	1ff00 <__assert_fail@plt+0xe560>
   1fea0:	add	r3, r3, #1
   1fea4:	cmp	fp, r3
   1fea8:	beq	1ff34 <__assert_fail@plt+0xe594>
   1feac:	ldr	r0, [ip, #4]!
   1feb0:	add	lr, sl, r0, lsl #3
   1feb4:	ldrb	lr, [lr, #4]
   1feb8:	cmp	r4, lr
   1febc:	bne	1fea0 <__assert_fail@plt+0xe500>
   1fec0:	ldr	lr, [sl, r0, lsl #3]
   1fec4:	cmp	r5, lr
   1fec8:	bne	1fea0 <__assert_fail@plt+0xe500>
   1fecc:	cmn	r0, #1
   1fed0:	beq	1ff34 <__assert_fail@plt+0xe594>
   1fed4:	str	r4, [sp]
   1fed8:	mov	r3, r5
   1fedc:	add	r1, sp, #12
   1fee0:	mov	r0, r7
   1fee4:	bl	1f558 <__assert_fail@plt+0xdbb8>
   1fee8:	subs	sl, r0, #0
   1feec:	bne	1ff50 <__assert_fail@plt+0xe5b0>
   1fef0:	add	r6, r6, #1
   1fef4:	ldr	r3, [r8, #4]
   1fef8:	cmp	r3, r6
   1fefc:	ble	1ff64 <__assert_fail@plt+0xe5c4>
   1ff00:	ldr	r3, [r8, #8]
   1ff04:	ldr	r2, [r3, r6, lsl #2]
   1ff08:	add	r3, r2, r2, lsl #1
   1ff0c:	ldr	r1, [r7, #24]
   1ff10:	add	r1, r1, r3, lsl #2
   1ff14:	ldr	fp, [r1, #4]
   1ff18:	cmp	fp, #0
   1ff1c:	ble	1ff34 <__assert_fail@plt+0xe594>
   1ff20:	ldr	sl, [r7]
   1ff24:	ldr	ip, [r1, #8]
   1ff28:	sub	ip, ip, #4
   1ff2c:	mov	r3, #0
   1ff30:	b	1feac <__assert_fail@plt+0xe50c>
   1ff34:	add	r0, sp, #12
   1ff38:	bl	1f664 <__assert_fail@plt+0xdcc4>
   1ff3c:	subs	sl, r0, #0
   1ff40:	beq	1fef0 <__assert_fail@plt+0xe550>
   1ff44:	ldr	r0, [sp, #20]
   1ff48:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ff4c:	b	1ff58 <__assert_fail@plt+0xe5b8>
   1ff50:	ldr	r0, [sp, #20]
   1ff54:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ff58:	mov	r0, sl
   1ff5c:	add	sp, sp, #28
   1ff60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff64:	ldr	r0, [r8, #8]
   1ff68:	bl	1b854 <__assert_fail@plt+0x9eb4>
   1ff6c:	add	r3, sp, #24
   1ff70:	ldmdb	r3, {r0, r1, r2}
   1ff74:	stm	r8, {r0, r1, r2}
   1ff78:	mov	sl, r9
   1ff7c:	b	1ff58 <__assert_fail@plt+0xe5b8>
   1ff80:	mov	sl, r9
   1ff84:	b	1ff58 <__assert_fail@plt+0xe5b8>
   1ff88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff8c:	sub	sp, sp, #14464	; 0x3880
   1ff90:	sub	sp, sp, #52	; 0x34
   1ff94:	mov	r9, r0
   1ff98:	mov	r4, r1
   1ff9c:	str	r1, [sp, #4]
   1ffa0:	mov	r1, #0
   1ffa4:	str	r1, [r4, #44]	; 0x2c
   1ffa8:	str	r1, [r4, #48]	; 0x30
   1ffac:	mov	r2, #32
   1ffb0:	add	r0, sp, #32
   1ffb4:	bl	11814 <memset@plt>
   1ffb8:	ldr	r3, [r4, #8]
   1ffbc:	cmp	r3, #0
   1ffc0:	ble	20614 <__assert_fail@plt+0xec74>
   1ffc4:	mov	r8, #0
   1ffc8:	str	r8, [sp, #12]
   1ffcc:	add	r3, sp, #8320	; 0x2080
   1ffd0:	str	r3, [sp, #24]
   1ffd4:	add	r3, sp, #32
   1ffd8:	str	r3, [sp, #28]
   1ffdc:	str	r9, [sp, #20]
   1ffe0:	b	20420 <__assert_fail@plt+0xea80>
   1ffe4:	ldrb	r3, [r3, r2, lsl #3]
   1ffe8:	asr	r1, r3, #5
   1ffec:	and	r3, r3, #31
   1fff0:	ldr	ip, [sp, #28]
   1fff4:	ldr	r2, [ip, r1, lsl #2]
   1fff8:	mov	r0, #1
   1fffc:	orr	r3, r2, r0, lsl r3
   20000:	str	r3, [ip, r1, lsl #2]
   20004:	cmp	r4, #0
   20008:	beq	200e8 <__assert_fail@plt+0xe748>
   2000c:	tst	r4, #32
   20010:	bne	201a4 <__assert_fail@plt+0xe804>
   20014:	tst	r4, #128	; 0x80
   20018:	bne	201d0 <__assert_fail@plt+0xe830>
   2001c:	tst	r4, #4
   20020:	beq	20084 <__assert_fail@plt+0xe6e4>
   20024:	cmp	r9, #1
   20028:	beq	201e4 <__assert_fail@plt+0xe844>
   2002c:	ldr	r2, [sp, #20]
   20030:	ldr	r3, [r2, #92]	; 0x5c
   20034:	cmp	r3, #1
   20038:	ble	20208 <__assert_fail@plt+0xe868>
   2003c:	add	r0, sp, #32
   20040:	add	r1, r2, #96	; 0x60
   20044:	ldr	lr, [r2, #60]	; 0x3c
   20048:	sub	lr, lr, #4
   2004c:	add	r5, r2, #128	; 0x80
   20050:	mov	ip, #0
   20054:	ldr	r2, [r1], #4
   20058:	ldr	r3, [lr, #4]!
   2005c:	mvn	r3, r3
   20060:	orr	r3, r3, r2
   20064:	ldr	r2, [r0]
   20068:	and	r3, r3, r2
   2006c:	str	r3, [r0], #4
   20070:	orr	ip, ip, r3
   20074:	cmp	r1, r5
   20078:	bne	20054 <__assert_fail@plt+0xe6b4>
   2007c:	cmp	ip, #0
   20080:	beq	20400 <__assert_fail@plt+0xea60>
   20084:	tst	r4, #8
   20088:	beq	200e8 <__assert_fail@plt+0xe748>
   2008c:	cmp	r9, #1
   20090:	beq	2023c <__assert_fail@plt+0xe89c>
   20094:	ldr	r2, [sp, #20]
   20098:	ldr	r3, [r2, #92]	; 0x5c
   2009c:	cmp	r3, #1
   200a0:	ble	20260 <__assert_fail@plt+0xe8c0>
   200a4:	add	ip, sp, #32
   200a8:	add	r0, r2, #96	; 0x60
   200ac:	ldr	lr, [r2, #60]	; 0x3c
   200b0:	sub	lr, lr, #4
   200b4:	add	r4, r2, #128	; 0x80
   200b8:	mov	r1, #0
   200bc:	ldr	r3, [r0], #4
   200c0:	ldr	r2, [lr, #4]!
   200c4:	and	r2, r2, r3
   200c8:	ldr	r3, [ip]
   200cc:	bic	r3, r3, r2
   200d0:	str	r3, [ip], #4
   200d4:	orr	r1, r1, r3
   200d8:	cmp	r0, r4
   200dc:	bne	200bc <__assert_fail@plt+0xe71c>
   200e0:	cmp	r1, #0
   200e4:	beq	20400 <__assert_fail@plt+0xea60>
   200e8:	cmp	r8, #0
   200ec:	ble	203f4 <__assert_fail@plt+0xea54>
   200f0:	add	r5, sp, #124	; 0x7c
   200f4:	add	r6, sp, #8320	; 0x2080
   200f8:	mov	r7, #0
   200fc:	b	2030c <__assert_fail@plt+0xe96c>
   20100:	ldr	ip, [r3, r2, lsl #3]
   20104:	add	r0, sp, #32
   20108:	sub	r1, ip, #4
   2010c:	add	ip, ip, #28
   20110:	ldr	r3, [r0]
   20114:	ldr	r2, [r1, #4]!
   20118:	orr	r3, r3, r2
   2011c:	str	r3, [r0], #4
   20120:	cmp	r1, ip
   20124:	bne	20110 <__assert_fail@plt+0xe770>
   20128:	b	20004 <__assert_fail@plt+0xe664>
   2012c:	ldr	r2, [sp, #20]
   20130:	ldr	r3, [r2, #92]	; 0x5c
   20134:	cmp	r3, #1
   20138:	ble	20190 <__assert_fail@plt+0xe7f0>
   2013c:	ldr	ip, [r2, #60]	; 0x3c
   20140:	add	r0, sp, #32
   20144:	sub	r1, ip, #4
   20148:	add	ip, ip, #28
   2014c:	ldr	r3, [r0]
   20150:	ldr	r2, [r1, #4]!
   20154:	orr	r3, r3, r2
   20158:	str	r3, [r0], #4
   2015c:	cmp	r1, ip
   20160:	bne	2014c <__assert_fail@plt+0xe7ac>
   20164:	ldr	r3, [sp, #20]
   20168:	ldr	r3, [r3, #128]	; 0x80
   2016c:	tst	r3, #64	; 0x40
   20170:	ldreq	r2, [sp, #32]
   20174:	biceq	r2, r2, #1024	; 0x400
   20178:	streq	r2, [sp, #32]
   2017c:	tst	r3, #128	; 0x80
   20180:	ldrne	r3, [sp, #32]
   20184:	bicne	r3, r3, #1
   20188:	strne	r3, [sp, #32]
   2018c:	b	20004 <__assert_fail@plt+0xe664>
   20190:	mov	r2, #32
   20194:	mvn	r1, #0
   20198:	ldr	r0, [sp, #28]
   2019c:	bl	11814 <memset@plt>
   201a0:	b	20164 <__assert_fail@plt+0xe7c4>
   201a4:	ldr	r5, [sp, #32]
   201a8:	and	r5, r5, #1024	; 0x400
   201ac:	mov	r2, #32
   201b0:	mov	r1, #0
   201b4:	ldr	r0, [sp, #28]
   201b8:	bl	11814 <memset@plt>
   201bc:	cmp	r5, #0
   201c0:	beq	20400 <__assert_fail@plt+0xea60>
   201c4:	mov	r3, #1024	; 0x400
   201c8:	str	r3, [sp, #32]
   201cc:	b	20014 <__assert_fail@plt+0xe674>
   201d0:	mov	r2, #32
   201d4:	mov	r1, #0
   201d8:	ldr	r0, [sp, #28]
   201dc:	bl	11814 <memset@plt>
   201e0:	b	20400 <__assert_fail@plt+0xea60>
   201e4:	ldr	r3, [sp, #16]
   201e8:	ldrb	r3, [r3, #6]
   201ec:	tst	r3, #64	; 0x40
   201f0:	bne	2002c <__assert_fail@plt+0xe68c>
   201f4:	mov	r2, #32
   201f8:	mov	r1, #0
   201fc:	ldr	r0, [sp, #28]
   20200:	bl	11814 <memset@plt>
   20204:	b	20400 <__assert_fail@plt+0xea60>
   20208:	add	r1, sp, #32
   2020c:	ldr	r3, [sp, #20]
   20210:	add	r2, r3, #96	; 0x60
   20214:	add	r0, r3, #128	; 0x80
   20218:	mov	ip, #0
   2021c:	ldr	r3, [r2], #4
   20220:	ldr	lr, [r1]
   20224:	and	r3, r3, lr
   20228:	str	r3, [r1], #4
   2022c:	orr	ip, ip, r3
   20230:	cmp	r2, r0
   20234:	bne	2021c <__assert_fail@plt+0xe87c>
   20238:	b	2007c <__assert_fail@plt+0xe6dc>
   2023c:	ldr	r3, [sp, #16]
   20240:	ldrb	r3, [r3, #6]
   20244:	tst	r3, #64	; 0x40
   20248:	beq	20094 <__assert_fail@plt+0xe6f4>
   2024c:	mov	r2, #32
   20250:	mov	r1, #0
   20254:	ldr	r0, [sp, #28]
   20258:	bl	11814 <memset@plt>
   2025c:	b	20400 <__assert_fail@plt+0xea60>
   20260:	add	r0, sp, #32
   20264:	ldr	r3, [sp, #20]
   20268:	add	r2, r3, #96	; 0x60
   2026c:	add	ip, r3, #128	; 0x80
   20270:	mov	r1, #0
   20274:	ldr	lr, [r2], #4
   20278:	ldr	r3, [r0]
   2027c:	bic	r3, r3, lr
   20280:	str	r3, [r0], #4
   20284:	orr	r1, r1, r3
   20288:	cmp	r2, ip
   2028c:	bne	20274 <__assert_fail@plt+0xe8d4>
   20290:	b	200e0 <__assert_fail@plt+0xe740>
   20294:	ldr	r3, [sp, #16]
   20298:	ldrb	r2, [r3]
   2029c:	asr	r1, r2, #5
   202a0:	lsl	r3, r7, #5
   202a4:	add	r3, r3, r1, lsl #2
   202a8:	add	r1, sp, #14464	; 0x3880
   202ac:	add	r1, r1, #48	; 0x30
   202b0:	add	r3, r1, r3
   202b4:	sub	r3, r3, #14336	; 0x3800
   202b8:	and	r2, r2, #31
   202bc:	ldr	r3, [r3, #-48]	; 0xffffffd0
   202c0:	lsr	r2, r3, r2
   202c4:	tst	r2, #1
   202c8:	beq	202f8 <__assert_fail@plt+0xe958>
   202cc:	b	20314 <__assert_fail@plt+0xe974>
   202d0:	ldr	r3, [sp, #4]
   202d4:	ldr	r3, [r3, #12]
   202d8:	ldr	r2, [sp, #8]
   202dc:	ldr	r1, [r3, r2]
   202e0:	mov	r0, r6
   202e4:	bl	1f120 <__assert_fail@plt+0xd780>
   202e8:	cmp	r0, #0
   202ec:	beq	20528 <__assert_fail@plt+0xeb88>
   202f0:	cmp	r4, #0
   202f4:	beq	203f8 <__assert_fail@plt+0xea58>
   202f8:	add	r7, r7, #1
   202fc:	add	r5, r5, #32
   20300:	add	r6, r6, #12
   20304:	cmp	r7, r8
   20308:	bge	203f8 <__assert_fail@plt+0xea58>
   2030c:	cmp	r9, #1
   20310:	beq	20294 <__assert_fail@plt+0xe8f4>
   20314:	add	r0, sp, #32
   20318:	add	r4, sp, #64	; 0x40
   2031c:	add	sl, r5, #32
   20320:	mov	r1, r5
   20324:	mov	lr, r0
   20328:	mov	ip, #0
   2032c:	ldr	r3, [lr], #4
   20330:	ldr	r2, [r1, #4]!
   20334:	and	r3, r3, r2
   20338:	str	r3, [r4], #4
   2033c:	orr	ip, ip, r3
   20340:	cmp	r1, sl
   20344:	bne	2032c <__assert_fail@plt+0xe98c>
   20348:	cmp	ip, #0
   2034c:	beq	202f8 <__assert_fail@plt+0xe958>
   20350:	add	fp, sp, #96	; 0x60
   20354:	mov	ip, r5
   20358:	mov	r4, #0
   2035c:	mov	sl, r4
   20360:	ldr	r3, [r0]
   20364:	ldr	r2, [ip, #4]!
   20368:	bic	lr, r2, r3
   2036c:	str	lr, [fp], #4
   20370:	orr	sl, sl, lr
   20374:	bic	r3, r3, r2
   20378:	str	r3, [r0], #4
   2037c:	orr	r4, r4, r3
   20380:	cmp	ip, r1
   20384:	bne	20360 <__assert_fail@plt+0xe9c0>
   20388:	cmp	sl, #0
   2038c:	beq	202d0 <__assert_fail@plt+0xe930>
   20390:	add	r3, sp, #14464	; 0x3880
   20394:	add	r3, r3, #48	; 0x30
   20398:	add	ip, r3, r8, lsl #5
   2039c:	sub	ip, ip, #14336	; 0x3800
   203a0:	sub	ip, ip, #48	; 0x30
   203a4:	add	lr, sp, #96	; 0x60
   203a8:	ldm	lr!, {r0, r1, r2, r3}
   203ac:	stmia	ip!, {r0, r1, r2, r3}
   203b0:	ldm	lr, {r0, r1, r2, r3}
   203b4:	stm	ip, {r0, r1, r2, r3}
   203b8:	add	ip, r5, #4
   203bc:	add	lr, sp, #64	; 0x40
   203c0:	ldm	lr!, {r0, r1, r2, r3}
   203c4:	stmia	ip!, {r0, r1, r2, r3}
   203c8:	ldm	lr, {r0, r1, r2, r3}
   203cc:	stm	ip, {r0, r1, r2, r3}
   203d0:	add	r0, r8, r8, lsl #1
   203d4:	mov	r1, r6
   203d8:	ldr	r3, [sp, #24]
   203dc:	add	r0, r3, r0, lsl #2
   203e0:	bl	1d40c <__assert_fail@plt+0xba6c>
   203e4:	cmp	r0, #0
   203e8:	bne	20528 <__assert_fail@plt+0xeb88>
   203ec:	add	r8, r8, #1
   203f0:	b	202d0 <__assert_fail@plt+0xe930>
   203f4:	mov	r7, #0
   203f8:	cmp	r8, r7
   203fc:	beq	204bc <__assert_fail@plt+0xeb1c>
   20400:	ldr	r3, [sp, #12]
   20404:	add	r3, r3, #1
   20408:	mov	r2, r3
   2040c:	str	r3, [sp, #12]
   20410:	ldr	r3, [sp, #4]
   20414:	ldr	r3, [r3, #8]
   20418:	cmp	r2, r3
   2041c:	bge	20560 <__assert_fail@plt+0xebc0>
   20420:	ldr	r2, [sp, #12]
   20424:	lsl	r3, r2, #2
   20428:	str	r3, [sp, #8]
   2042c:	ldr	r3, [sp, #4]
   20430:	ldr	r3, [r3, #12]
   20434:	ldr	r2, [r3, r2, lsl #2]
   20438:	ldr	r3, [sp, #20]
   2043c:	ldr	r3, [r3]
   20440:	add	r1, r3, r2, lsl #3
   20444:	str	r1, [sp, #16]
   20448:	ldrb	r9, [r1, #4]
   2044c:	ldr	r4, [r1, #4]
   20450:	lsl	r4, r4, #14
   20454:	lsr	r4, r4, #22
   20458:	cmp	r9, #1
   2045c:	beq	1ffe4 <__assert_fail@plt+0xe644>
   20460:	cmp	r9, #3
   20464:	beq	20100 <__assert_fail@plt+0xe760>
   20468:	cmp	r9, #5
   2046c:	beq	2012c <__assert_fail@plt+0xe78c>
   20470:	cmp	r9, #7
   20474:	bne	20400 <__assert_fail@plt+0xea60>
   20478:	mvn	r3, #0
   2047c:	ldr	r2, [sp, #28]
   20480:	str	r3, [r2]
   20484:	str	r3, [r2, #4]
   20488:	str	r3, [r2, #8]
   2048c:	str	r3, [r2, #12]
   20490:	ldr	r3, [sp, #20]
   20494:	ldr	r2, [r3, #128]	; 0x80
   20498:	tst	r2, #64	; 0x40
   2049c:	ldreq	r3, [sp, #32]
   204a0:	biceq	r3, r3, #1024	; 0x400
   204a4:	streq	r3, [sp, #32]
   204a8:	tst	r2, #128	; 0x80
   204ac:	ldrne	r3, [sp, #32]
   204b0:	bicne	r3, r3, #1
   204b4:	strne	r3, [sp, #32]
   204b8:	b	20004 <__assert_fail@plt+0xe664>
   204bc:	add	r3, sp, #14464	; 0x3880
   204c0:	add	r3, r3, #48	; 0x30
   204c4:	add	ip, r3, r8, lsl #5
   204c8:	sub	ip, ip, #14336	; 0x3800
   204cc:	sub	ip, ip, #48	; 0x30
   204d0:	add	lr, sp, #32
   204d4:	ldm	lr!, {r0, r1, r2, r3}
   204d8:	stmia	ip!, {r0, r1, r2, r3}
   204dc:	ldm	lr, {r0, r1, r2, r3}
   204e0:	stm	ip, {r0, r1, r2, r3}
   204e4:	ldr	r3, [sp, #4]
   204e8:	ldr	r3, [r3, #12]
   204ec:	add	r0, r8, r8, lsl #1
   204f0:	ldr	r2, [sp, #8]
   204f4:	ldr	r1, [r3, r2]
   204f8:	ldr	r3, [sp, #24]
   204fc:	add	r0, r3, r0, lsl #2
   20500:	bl	1cb3c <__assert_fail@plt+0xb19c>
   20504:	cmp	r0, #0
   20508:	bne	20524 <__assert_fail@plt+0xeb84>
   2050c:	add	r8, r8, #1
   20510:	mov	r2, #32
   20514:	mov	r1, #0
   20518:	ldr	r0, [sp, #28]
   2051c:	bl	11814 <memset@plt>
   20520:	b	20400 <__assert_fail@plt+0xea60>
   20524:	mov	r8, r7
   20528:	cmp	r8, #0
   2052c:	ble	20550 <__assert_fail@plt+0xebb0>
   20530:	add	r4, sp, #8320	; 0x2080
   20534:	mov	r5, #0
   20538:	ldr	r0, [r4, #8]
   2053c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   20540:	add	r5, r5, #1
   20544:	add	r4, r4, #12
   20548:	cmp	r5, r8
   2054c:	bne	20538 <__assert_fail@plt+0xeb98>
   20550:	mov	r0, #0
   20554:	add	sp, sp, #14464	; 0x3880
   20558:	add	sp, sp, #52	; 0x34
   2055c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20560:	ldr	r9, [sp, #20]
   20564:	cmp	r8, #0
   20568:	ble	2060c <__assert_fail@plt+0xec6c>
   2056c:	add	r1, r8, #1
   20570:	add	r0, sp, #11392	; 0x2c80
   20574:	add	r0, r0, #32
   20578:	bl	1cb80 <__assert_fail@plt+0xb1e0>
   2057c:	add	r3, sp, #14464	; 0x3880
   20580:	add	r3, r3, #44	; 0x2c
   20584:	str	r0, [r3]
   20588:	cmp	r0, #0
   2058c:	bne	20688 <__assert_fail@plt+0xece8>
   20590:	mov	r2, #32
   20594:	mov	r1, #0
   20598:	add	r0, sp, #11392	; 0x2c80
   2059c:	bl	11814 <memset@plt>
   205a0:	add	r3, sp, #8320	; 0x2080
   205a4:	str	r3, [sp, #20]
   205a8:	add	r6, sp, #124	; 0x7c
   205ac:	add	r2, sp, #12416	; 0x3080
   205b0:	add	r2, r2, #48	; 0x30
   205b4:	sub	fp, r2, #4
   205b8:	add	r2, sp, #13440	; 0x3480
   205bc:	add	r2, r2, #48	; 0x30
   205c0:	sub	sl, r2, #8
   205c4:	mov	r7, r3
   205c8:	mov	r3, #0
   205cc:	str	r3, [sp, #16]
   205d0:	str	r3, [sp, #8]
   205d4:	add	r3, sp, #11392	; 0x2c80
   205d8:	add	r3, r3, #48	; 0x30
   205dc:	sub	r3, r3, #4
   205e0:	str	r3, [sp, #12]
   205e4:	add	r3, sp, #11392	; 0x2c80
   205e8:	add	r3, r3, #36	; 0x24
   205ec:	mov	r2, #0
   205f0:	str	r2, [r3]
   205f4:	mov	r5, r7
   205f8:	ldr	r3, [r7, #4]
   205fc:	cmp	r3, r2
   20600:	ble	206c0 <__assert_fail@plt+0xed20>
   20604:	mov	r4, r2
   20608:	b	20644 <__assert_fail@plt+0xeca4>
   2060c:	movne	r0, #0
   20610:	bne	20554 <__assert_fail@plt+0xebb4>
   20614:	mov	r1, #256	; 0x100
   20618:	mov	r0, #4
   2061c:	bl	1b548 <__assert_fail@plt+0x9ba8>
   20620:	ldr	r3, [sp, #4]
   20624:	str	r0, [r3, #44]	; 0x2c
   20628:	adds	r0, r0, #0
   2062c:	movne	r0, #1
   20630:	b	20554 <__assert_fail@plt+0xebb4>
   20634:	add	r4, r4, #1
   20638:	ldr	r3, [r5, #4]
   2063c:	cmp	r3, r4
   20640:	ble	206c0 <__assert_fail@plt+0xed20>
   20644:	ldr	r3, [r5, #8]
   20648:	ldr	r2, [r3, r4, lsl #2]
   2064c:	ldr	r3, [r9, #12]
   20650:	ldr	r1, [r3, r2, lsl #2]
   20654:	cmn	r1, #1
   20658:	beq	20634 <__assert_fail@plt+0xec94>
   2065c:	add	r1, r1, r1, lsl #1
   20660:	ldr	r3, [r9, #24]
   20664:	add	r1, r3, r1, lsl #2
   20668:	add	r0, sp, #11392	; 0x2c80
   2066c:	add	r0, r0, #32
   20670:	bl	1f664 <__assert_fail@plt+0xdcc4>
   20674:	add	r3, sp, #14464	; 0x3880
   20678:	add	r3, r3, #44	; 0x2c
   2067c:	str	r0, [r3]
   20680:	cmp	r0, #0
   20684:	beq	20634 <__assert_fail@plt+0xec94>
   20688:	add	r3, sp, #11392	; 0x2c80
   2068c:	add	r3, r3, #40	; 0x28
   20690:	ldr	r0, [r3]
   20694:	bl	1b854 <__assert_fail@plt+0x9eb4>
   20698:	add	r4, sp, #8320	; 0x2080
   2069c:	mov	r5, #0
   206a0:	ldr	r0, [r4, #8]
   206a4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   206a8:	add	r5, r5, #1
   206ac:	add	r4, r4, #12
   206b0:	cmp	r5, r8
   206b4:	bne	206a0 <__assert_fail@plt+0xed00>
   206b8:	mov	r0, #0
   206bc:	b	20554 <__assert_fail@plt+0xebb4>
   206c0:	mov	r3, #0
   206c4:	add	r2, sp, #11392	; 0x2c80
   206c8:	add	r2, r2, #32
   206cc:	mov	r1, r9
   206d0:	add	r0, sp, #14464	; 0x3880
   206d4:	add	r0, r0, #44	; 0x2c
   206d8:	bl	1e7c4 <__assert_fail@plt+0xce24>
   206dc:	mov	r4, r0
   206e0:	str	r0, [sl, #4]!
   206e4:	cmp	r0, #0
   206e8:	beq	20788 <__assert_fail@plt+0xede8>
   206ec:	ldrsb	r3, [r4, #52]	; 0x34
   206f0:	cmp	r3, #0
   206f4:	blt	207a0 <__assert_fail@plt+0xee00>
   206f8:	str	r4, [fp]
   206fc:	ldr	r3, [sp, #12]
   20700:	ldr	r2, [sp, #8]
   20704:	str	r4, [r3, r2, lsl #2]
   20708:	add	r4, sp, #11392	; 0x2c80
   2070c:	add	r0, r6, #32
   20710:	mov	r1, r4
   20714:	ldr	r3, [r1]
   20718:	ldr	r2, [r6, #4]!
   2071c:	orr	r3, r3, r2
   20720:	str	r3, [r1], #4
   20724:	cmp	r0, r6
   20728:	bne	20714 <__assert_fail@plt+0xed74>
   2072c:	ldr	r3, [sp, #8]
   20730:	add	r3, r3, #1
   20734:	str	r3, [sp, #8]
   20738:	add	r7, r7, #12
   2073c:	add	fp, fp, #4
   20740:	mov	r6, r0
   20744:	cmp	r3, r8
   20748:	bne	205e4 <__assert_fail@plt+0xec44>
   2074c:	ldr	r3, [sp, #16]
   20750:	cmp	r3, #0
   20754:	bne	208d8 <__assert_fail@plt+0xef38>
   20758:	mov	r1, #256	; 0x100
   2075c:	mov	r0, #4
   20760:	bl	1b548 <__assert_fail@plt+0x9ba8>
   20764:	ldr	r3, [sp, #4]
   20768:	str	r0, [r3, #44]	; 0x2c
   2076c:	cmp	r0, #0
   20770:	beq	20688 <__assert_fail@plt+0xece8>
   20774:	mov	r2, r0
   20778:	add	r1, r9, #96	; 0x60
   2077c:	add	r7, sp, #128	; 0x80
   20780:	add	sl, r0, #1024	; 0x400
   20784:	b	208c0 <__assert_fail@plt+0xef20>
   20788:	add	r3, sp, #14464	; 0x3880
   2078c:	add	r3, r3, #44	; 0x2c
   20790:	ldr	r3, [r3]
   20794:	cmp	r3, #0
   20798:	beq	206ec <__assert_fail@plt+0xed4c>
   2079c:	b	20688 <__assert_fail@plt+0xece8>
   207a0:	mov	r3, #1
   207a4:	add	r2, sp, #11392	; 0x2c80
   207a8:	add	r2, r2, #32
   207ac:	mov	r1, r9
   207b0:	add	r0, sp, #14464	; 0x3880
   207b4:	add	r0, r0, #44	; 0x2c
   207b8:	bl	1e7c4 <__assert_fail@plt+0xce24>
   207bc:	str	r0, [fp]
   207c0:	cmp	r0, #0
   207c4:	beq	2082c <__assert_fail@plt+0xee8c>
   207c8:	cmp	r4, r0
   207cc:	beq	207e4 <__assert_fail@plt+0xee44>
   207d0:	ldr	r3, [r9, #92]	; 0x5c
   207d4:	ldr	r2, [sp, #16]
   207d8:	cmp	r3, #1
   207dc:	movgt	r2, #1
   207e0:	str	r2, [sp, #16]
   207e4:	mov	r3, #2
   207e8:	add	r2, sp, #11392	; 0x2c80
   207ec:	add	r2, r2, #32
   207f0:	mov	r1, r9
   207f4:	add	r0, sp, #14464	; 0x3880
   207f8:	add	r0, r0, #44	; 0x2c
   207fc:	bl	1e7c4 <__assert_fail@plt+0xce24>
   20800:	ldr	r3, [sp, #12]
   20804:	ldr	r2, [sp, #8]
   20808:	str	r0, [r3, r2, lsl #2]
   2080c:	cmp	r0, #0
   20810:	bne	20708 <__assert_fail@plt+0xed68>
   20814:	add	r3, sp, #14464	; 0x3880
   20818:	add	r3, r3, #44	; 0x2c
   2081c:	ldr	r3, [r3]
   20820:	cmp	r3, #0
   20824:	beq	20708 <__assert_fail@plt+0xed68>
   20828:	b	20688 <__assert_fail@plt+0xece8>
   2082c:	add	r3, sp, #14464	; 0x3880
   20830:	add	r3, r3, #44	; 0x2c
   20834:	ldr	r3, [r3]
   20838:	cmp	r3, #0
   2083c:	beq	207c8 <__assert_fail@plt+0xee28>
   20840:	b	20688 <__assert_fail@plt+0xece8>
   20844:	mov	r3, #0
   20848:	b	20888 <__assert_fail@plt+0xeee8>
   2084c:	lsl	lr, lr, #1
   20850:	add	r8, r8, #4
   20854:	lsrs	r6, r6, #1
   20858:	beq	208ac <__assert_fail@plt+0xef0c>
   2085c:	tst	r6, #1
   20860:	beq	2084c <__assert_fail@plt+0xeeac>
   20864:	mov	r5, r7
   20868:	ldr	r3, [r7]
   2086c:	tst	lr, r3
   20870:	bne	20844 <__assert_fail@plt+0xeea4>
   20874:	mov	r3, #0
   20878:	add	r3, r3, #1
   2087c:	ldr	ip, [r5, r3, lsl #5]
   20880:	tst	lr, ip
   20884:	beq	20878 <__assert_fail@plt+0xeed8>
   20888:	ldr	ip, [r1]
   2088c:	tst	lr, ip
   20890:	add	ip, sp, #14464	; 0x3880
   20894:	add	ip, ip, #48	; 0x30
   20898:	add	r3, ip, r3, lsl #2
   2089c:	ldrne	r3, [r3, #-2052]	; 0xfffff7fc
   208a0:	ldreq	r3, [r3, #-1028]	; 0xfffffbfc
   208a4:	str	r3, [r8]
   208a8:	b	2084c <__assert_fail@plt+0xeeac>
   208ac:	add	r2, r2, #128	; 0x80
   208b0:	add	r1, r1, #4
   208b4:	add	r7, r7, #4
   208b8:	cmp	r2, sl
   208bc:	beq	2093c <__assert_fail@plt+0xef9c>
   208c0:	ldr	r6, [r4], #4
   208c4:	cmp	r6, #0
   208c8:	beq	208ac <__assert_fail@plt+0xef0c>
   208cc:	mov	r8, r2
   208d0:	mov	lr, #1
   208d4:	b	2085c <__assert_fail@plt+0xeebc>
   208d8:	mov	r1, #512	; 0x200
   208dc:	mov	r0, #4
   208e0:	bl	1b548 <__assert_fail@plt+0x9ba8>
   208e4:	ldr	r3, [sp, #4]
   208e8:	str	r0, [r3, #48]	; 0x30
   208ec:	cmp	r0, #0
   208f0:	beq	20688 <__assert_fail@plt+0xece8>
   208f4:	mov	r5, r0
   208f8:	add	ip, sp, #128	; 0x80
   208fc:	add	r7, r0, #1024	; 0x400
   20900:	ldr	r6, [r4], #4
   20904:	cmp	r6, #0
   20908:	beq	2092c <__assert_fail@plt+0xef8c>
   2090c:	mov	r8, r5
   20910:	mov	r1, #1
   20914:	tst	r6, #1
   20918:	bne	20964 <__assert_fail@plt+0xefc4>
   2091c:	lsl	r1, r1, #1
   20920:	add	r8, r8, #4
   20924:	lsrs	r6, r6, #1
   20928:	bne	20914 <__assert_fail@plt+0xef74>
   2092c:	add	r5, r5, #128	; 0x80
   20930:	add	ip, ip, #4
   20934:	cmp	r7, r5
   20938:	bne	20900 <__assert_fail@plt+0xef60>
   2093c:	add	r3, sp, #11392	; 0x2c80
   20940:	ldr	r3, [r3]
   20944:	tst	r3, #1024	; 0x400
   20948:	beq	209f4 <__assert_fail@plt+0xf054>
   2094c:	ldr	r3, [sp, #128]	; 0x80
   20950:	tst	r3, #1024	; 0x400
   20954:	bne	209d0 <__assert_fail@plt+0xf030>
   20958:	mov	r3, #0
   2095c:	add	r2, sp, #128	; 0x80
   20960:	b	209bc <__assert_fail@plt+0xf01c>
   20964:	mov	lr, ip
   20968:	ldr	r3, [ip]
   2096c:	tst	r1, r3
   20970:	bne	209a8 <__assert_fail@plt+0xf008>
   20974:	mov	r3, #0
   20978:	add	r3, r3, #1
   2097c:	ldr	r2, [lr, r3, lsl #5]
   20980:	tst	r1, r2
   20984:	beq	20978 <__assert_fail@plt+0xefd8>
   20988:	add	r2, sp, #14464	; 0x3880
   2098c:	add	r2, r2, #48	; 0x30
   20990:	add	r3, r2, r3, lsl #2
   20994:	ldr	r2, [r3, #-1028]	; 0xfffffbfc
   20998:	str	r2, [r8]
   2099c:	ldr	r3, [r3, #-2052]	; 0xfffff7fc
   209a0:	str	r3, [r8, #1024]	; 0x400
   209a4:	b	2091c <__assert_fail@plt+0xef7c>
   209a8:	mov	r3, #0
   209ac:	b	20988 <__assert_fail@plt+0xefe8>
   209b0:	ldr	r1, [r2, r3, lsl #5]
   209b4:	tst	r1, #1024	; 0x400
   209b8:	bne	209d4 <__assert_fail@plt+0xf034>
   209bc:	add	r3, r3, #1
   209c0:	ldr	r1, [sp, #8]
   209c4:	cmp	r1, r3
   209c8:	bne	209b0 <__assert_fail@plt+0xf010>
   209cc:	b	209f4 <__assert_fail@plt+0xf054>
   209d0:	mov	r3, #0
   209d4:	add	r2, sp, #14464	; 0x3880
   209d8:	add	r2, r2, #48	; 0x30
   209dc:	add	r3, r2, r3, lsl #2
   209e0:	ldr	r3, [r3, #-3076]	; 0xfffff3fc
   209e4:	str	r3, [r0, #40]	; 0x28
   209e8:	ldr	r2, [sp, #16]
   209ec:	cmp	r2, #0
   209f0:	strne	r3, [r0, #1064]	; 0x428
   209f4:	add	r3, sp, #11392	; 0x2c80
   209f8:	add	r3, r3, #40	; 0x28
   209fc:	ldr	r0, [r3]
   20a00:	bl	1b854 <__assert_fail@plt+0x9eb4>
   20a04:	mov	r4, #0
   20a08:	ldr	r5, [sp, #20]
   20a0c:	ldr	r6, [sp, #8]
   20a10:	ldr	r0, [r5, #8]
   20a14:	bl	1b854 <__assert_fail@plt+0x9eb4>
   20a18:	add	r4, r4, #1
   20a1c:	add	r5, r5, #12
   20a20:	cmp	r6, r4
   20a24:	bne	20a10 <__assert_fail@plt+0xf070>
   20a28:	mov	r0, #1
   20a2c:	b	20554 <__assert_fail@plt+0xebb4>
   20a30:	push	{r4, r5, r6, r7, r8, lr}
   20a34:	mov	r4, r0
   20a38:	mov	r5, r1
   20a3c:	mov	r1, r2
   20a40:	ldr	r2, [r0, #88]	; 0x58
   20a44:	bl	1fa38 <__assert_fail@plt+0xe098>
   20a48:	ldr	lr, [r5, #8]
   20a4c:	cmp	lr, #0
   20a50:	ble	20af8 <__assert_fail@plt+0xf158>
   20a54:	ldr	r3, [r4, #84]	; 0x54
   20a58:	ldr	r4, [r3]
   20a5c:	ldr	ip, [r5, #12]
   20a60:	sub	ip, ip, #4
   20a64:	mov	r1, #0
   20a68:	and	r7, r0, #8
   20a6c:	and	r6, r0, #2
   20a70:	and	r5, r0, #1
   20a74:	b	20ab4 <__assert_fail@plt+0xf114>
   20a78:	tst	r3, #8
   20a7c:	beq	20a88 <__assert_fail@plt+0xf0e8>
   20a80:	cmp	r5, #0
   20a84:	bne	20aa8 <__assert_fail@plt+0xf108>
   20a88:	tst	r3, #32
   20a8c:	beq	20a98 <__assert_fail@plt+0xf0f8>
   20a90:	cmp	r6, #0
   20a94:	beq	20aa8 <__assert_fail@plt+0xf108>
   20a98:	tst	r3, #128	; 0x80
   20a9c:	popeq	{r4, r5, r6, r7, r8, pc}
   20aa0:	cmp	r7, #0
   20aa4:	popne	{r4, r5, r6, r7, r8, pc}
   20aa8:	add	r1, r1, #1
   20aac:	cmp	lr, r1
   20ab0:	beq	20b00 <__assert_fail@plt+0xf160>
   20ab4:	ldr	r0, [ip, #4]!
   20ab8:	add	r2, r4, r0, lsl #3
   20abc:	ldr	r3, [r2, #4]
   20ac0:	lsl	r3, r3, #14
   20ac4:	lsr	r3, r3, #22
   20ac8:	ldrb	r2, [r2, #4]
   20acc:	cmp	r2, #2
   20ad0:	bne	20aa8 <__assert_fail@plt+0xf108>
   20ad4:	cmp	r3, #0
   20ad8:	popeq	{r4, r5, r6, r7, r8, pc}
   20adc:	tst	r3, #4
   20ae0:	beq	20a78 <__assert_fail@plt+0xf0d8>
   20ae4:	cmp	r5, #0
   20ae8:	beq	20aa8 <__assert_fail@plt+0xf108>
   20aec:	tst	r3, #8
   20af0:	bne	20aa8 <__assert_fail@plt+0xf108>
   20af4:	b	20a88 <__assert_fail@plt+0xf0e8>
   20af8:	mov	r0, #0
   20afc:	pop	{r4, r5, r6, r7, r8, pc}
   20b00:	mov	r0, #0
   20b04:	pop	{r4, r5, r6, r7, r8, pc}
   20b08:	push	{r4, r5, r6, r7, r8, lr}
   20b0c:	ldr	r7, [sp, #28]
   20b10:	subs	r5, r0, #0
   20b14:	beq	20bb4 <__assert_fail@plt+0xf214>
   20b18:	ldr	r4, [r5]
   20b1c:	cmp	r4, #0
   20b20:	beq	20bbc <__assert_fail@plt+0xf21c>
   20b24:	mov	r0, r3
   20b28:	sub	r4, r4, #1
   20b2c:	str	r4, [r5]
   20b30:	add	r4, r4, r4, lsl #1
   20b34:	lsl	r4, r4, #3
   20b38:	ldr	r3, [r5, #8]
   20b3c:	ldr	r3, [r3, r4]
   20b40:	str	r3, [r1]
   20b44:	lsl	r6, r2, #3
   20b48:	ldr	r3, [r5, #8]
   20b4c:	add	r3, r3, r4
   20b50:	mov	r2, r6
   20b54:	ldr	r1, [r3, #8]
   20b58:	bl	115d4 <memcpy@plt>
   20b5c:	ldr	r3, [r5, #8]
   20b60:	add	r3, r3, r4
   20b64:	ldr	r1, [r3, #8]
   20b68:	mov	r2, r6
   20b6c:	add	r1, r1, r6
   20b70:	ldr	r0, [sp, #24]
   20b74:	bl	115d4 <memcpy@plt>
   20b78:	ldr	r0, [r7, #8]
   20b7c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   20b80:	ldr	r3, [r5, #8]
   20b84:	add	r3, r3, r4
   20b88:	ldr	r0, [r3, #8]
   20b8c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   20b90:	ldr	r3, [r5, #8]
   20b94:	add	r3, r3, r4
   20b98:	add	r3, r3, #12
   20b9c:	ldm	r3, {r0, r1, r2}
   20ba0:	stm	r7, {r0, r1, r2}
   20ba4:	ldr	r3, [r5, #8]
   20ba8:	add	r4, r3, r4
   20bac:	ldr	r0, [r4, #4]
   20bb0:	pop	{r4, r5, r6, r7, r8, pc}
   20bb4:	mvn	r0, #0
   20bb8:	pop	{r4, r5, r6, r7, r8, pc}
   20bbc:	mvn	r0, #0
   20bc0:	pop	{r4, r5, r6, r7, r8, pc}
   20bc4:	push	{r4, r5, r6, r7, r8, lr}
   20bc8:	mov	r6, r0
   20bcc:	mov	r5, r1
   20bd0:	mov	r4, r2
   20bd4:	mov	r8, r3
   20bd8:	ldr	r3, [sp, #28]
   20bdc:	tst	r3, #4194304	; 0x400000
   20be0:	beq	20c18 <__assert_fail@plt+0xf278>
   20be4:	ldr	r1, [pc, #2780]	; 216c8 <__assert_fail@plt+0xfd28>
   20be8:	ldr	r0, [sp, #24]
   20bec:	bl	11544 <strcmp@plt>
   20bf0:	cmp	r0, #0
   20bf4:	beq	20c6c <__assert_fail@plt+0xf2cc>
   20bf8:	ldr	r1, [pc, #2764]	; 216cc <__assert_fail@plt+0xfd2c>
   20bfc:	ldr	r0, [sp, #24]
   20c00:	bl	11544 <strcmp@plt>
   20c04:	ldr	r3, [pc, #2756]	; 216d0 <__assert_fail@plt+0xfd30>
   20c08:	ldr	r2, [sp, #24]
   20c0c:	cmp	r0, #0
   20c10:	moveq	r2, r3
   20c14:	str	r2, [sp, #24]
   20c18:	ldr	r3, [r8]
   20c1c:	ldr	r2, [r4, #36]	; 0x24
   20c20:	cmp	r3, r2
   20c24:	beq	20c78 <__assert_fail@plt+0xf2d8>
   20c28:	ldr	r8, [r4, #12]
   20c2c:	ldr	r7, [r4, #36]	; 0x24
   20c30:	add	r3, r7, #1
   20c34:	str	r3, [r4, #36]	; 0x24
   20c38:	ldr	r0, [sp, #24]
   20c3c:	bl	11514 <wctype@plt>
   20c40:	str	r0, [r8, r7, lsl #2]
   20c44:	ldr	r1, [pc, #2696]	; 216d4 <__assert_fail@plt+0xfd34>
   20c48:	ldr	r0, [sp, #24]
   20c4c:	bl	11544 <strcmp@plt>
   20c50:	subs	r4, r0, #0
   20c54:	bne	20d54 <__assert_fail@plt+0xf3b4>
   20c58:	cmp	r6, #0
   20c5c:	bne	20ca0 <__assert_fail@plt+0xf300>
   20c60:	bl	11778 <__ctype_b_loc@plt>
   20c64:	mov	ip, #1
   20c68:	b	20d04 <__assert_fail@plt+0xf364>
   20c6c:	ldr	r3, [pc, #2652]	; 216d0 <__assert_fail@plt+0xfd30>
   20c70:	str	r3, [sp, #24]
   20c74:	b	20c18 <__assert_fail@plt+0xf278>
   20c78:	lsl	r3, r3, #1
   20c7c:	add	r7, r3, #1
   20c80:	lsl	r1, r7, #2
   20c84:	ldr	r0, [r4, #12]
   20c88:	bl	1b9dc <__assert_fail@plt+0xa03c>
   20c8c:	cmp	r0, #0
   20c90:	beq	216b8 <__assert_fail@plt+0xfd18>
   20c94:	str	r0, [r4, #12]
   20c98:	str	r7, [r8]
   20c9c:	b	20c28 <__assert_fail@plt+0xf288>
   20ca0:	bl	11778 <__ctype_b_loc@plt>
   20ca4:	mov	r2, r6
   20ca8:	mov	r3, #0
   20cac:	mov	r4, #1
   20cb0:	b	20cc4 <__assert_fail@plt+0xf324>
   20cb4:	add	r3, r3, #2
   20cb8:	add	r2, r2, #1
   20cbc:	cmp	r3, #512	; 0x200
   20cc0:	beq	20cf0 <__assert_fail@plt+0xf350>
   20cc4:	ldr	r1, [r0]
   20cc8:	ldrh	r1, [r1, r3]
   20ccc:	tst	r1, #8
   20cd0:	beq	20cb4 <__assert_fail@plt+0xf314>
   20cd4:	ldrb	r1, [r2]
   20cd8:	asr	lr, r1, #5
   20cdc:	and	r1, r1, #31
   20ce0:	ldr	ip, [r5, lr, lsl #2]
   20ce4:	orr	r1, ip, r4, lsl r1
   20ce8:	str	r1, [r5, lr, lsl #2]
   20cec:	b	20cb4 <__assert_fail@plt+0xf314>
   20cf0:	mov	r0, #0
   20cf4:	pop	{r4, r5, r6, r7, r8, pc}
   20cf8:	add	r4, r4, #1
   20cfc:	cmp	r4, #256	; 0x100
   20d00:	beq	20d4c <__assert_fail@plt+0xf3ac>
   20d04:	ldr	r2, [r0]
   20d08:	lsl	r3, r4, #1
   20d0c:	ldrh	r3, [r2, r3]
   20d10:	tst	r3, #8
   20d14:	beq	20cf8 <__assert_fail@plt+0xf358>
   20d18:	add	r3, r4, #31
   20d1c:	cmp	r4, #0
   20d20:	movge	r3, r4
   20d24:	asr	r3, r3, #5
   20d28:	asr	r2, r4, #31
   20d2c:	lsr	r1, r2, #27
   20d30:	add	r2, r4, r1
   20d34:	and	r2, r2, #31
   20d38:	sub	r2, r2, r1
   20d3c:	ldr	r1, [r5, r3, lsl #2]
   20d40:	orr	r2, r1, ip, lsl r2
   20d44:	str	r2, [r5, r3, lsl #2]
   20d48:	b	20cf8 <__assert_fail@plt+0xf358>
   20d4c:	mov	r0, #0
   20d50:	pop	{r4, r5, r6, r7, r8, pc}
   20d54:	ldr	r1, [pc, #2428]	; 216d8 <__assert_fail@plt+0xfd38>
   20d58:	ldr	r0, [sp, #24]
   20d5c:	bl	11544 <strcmp@plt>
   20d60:	subs	r4, r0, #0
   20d64:	bne	20e30 <__assert_fail@plt+0xf490>
   20d68:	cmp	r6, #0
   20d6c:	bne	20d7c <__assert_fail@plt+0xf3dc>
   20d70:	bl	11778 <__ctype_b_loc@plt>
   20d74:	mov	ip, #1
   20d78:	b	20de0 <__assert_fail@plt+0xf440>
   20d7c:	bl	11778 <__ctype_b_loc@plt>
   20d80:	mov	r2, r6
   20d84:	mov	r3, #0
   20d88:	mov	r4, #1
   20d8c:	b	20da0 <__assert_fail@plt+0xf400>
   20d90:	add	r3, r3, #2
   20d94:	add	r2, r2, #1
   20d98:	cmp	r3, #512	; 0x200
   20d9c:	beq	20dcc <__assert_fail@plt+0xf42c>
   20da0:	ldr	r1, [r0]
   20da4:	ldrh	r1, [r1, r3]
   20da8:	tst	r1, #2
   20dac:	beq	20d90 <__assert_fail@plt+0xf3f0>
   20db0:	ldrb	r1, [r2]
   20db4:	asr	lr, r1, #5
   20db8:	and	r1, r1, #31
   20dbc:	ldr	ip, [r5, lr, lsl #2]
   20dc0:	orr	r1, ip, r4, lsl r1
   20dc4:	str	r1, [r5, lr, lsl #2]
   20dc8:	b	20d90 <__assert_fail@plt+0xf3f0>
   20dcc:	mov	r0, #0
   20dd0:	pop	{r4, r5, r6, r7, r8, pc}
   20dd4:	add	r4, r4, #1
   20dd8:	cmp	r4, #256	; 0x100
   20ddc:	beq	20e28 <__assert_fail@plt+0xf488>
   20de0:	ldr	r2, [r0]
   20de4:	lsl	r3, r4, #1
   20de8:	ldrh	r3, [r2, r3]
   20dec:	tst	r3, #2
   20df0:	beq	20dd4 <__assert_fail@plt+0xf434>
   20df4:	add	r3, r4, #31
   20df8:	cmp	r4, #0
   20dfc:	movge	r3, r4
   20e00:	asr	r3, r3, #5
   20e04:	asr	r2, r4, #31
   20e08:	lsr	r1, r2, #27
   20e0c:	add	r2, r4, r1
   20e10:	and	r2, r2, #31
   20e14:	sub	r2, r2, r1
   20e18:	ldr	r1, [r5, r3, lsl #2]
   20e1c:	orr	r2, r1, ip, lsl r2
   20e20:	str	r2, [r5, r3, lsl #2]
   20e24:	b	20dd4 <__assert_fail@plt+0xf434>
   20e28:	mov	r0, #0
   20e2c:	pop	{r4, r5, r6, r7, r8, pc}
   20e30:	ldr	r1, [pc, #2196]	; 216cc <__assert_fail@plt+0xfd2c>
   20e34:	ldr	r0, [sp, #24]
   20e38:	bl	11544 <strcmp@plt>
   20e3c:	subs	r4, r0, #0
   20e40:	bne	20f0c <__assert_fail@plt+0xf56c>
   20e44:	cmp	r6, #0
   20e48:	bne	20e58 <__assert_fail@plt+0xf4b8>
   20e4c:	bl	11778 <__ctype_b_loc@plt>
   20e50:	mov	ip, #1
   20e54:	b	20ebc <__assert_fail@plt+0xf51c>
   20e58:	bl	11778 <__ctype_b_loc@plt>
   20e5c:	mov	r2, r6
   20e60:	mov	r3, #0
   20e64:	mov	r4, #1
   20e68:	b	20e7c <__assert_fail@plt+0xf4dc>
   20e6c:	add	r3, r3, #2
   20e70:	add	r2, r2, #1
   20e74:	cmp	r3, #512	; 0x200
   20e78:	beq	20ea8 <__assert_fail@plt+0xf508>
   20e7c:	ldr	r1, [r0]
   20e80:	ldrh	r1, [r1, r3]
   20e84:	tst	r1, #512	; 0x200
   20e88:	beq	20e6c <__assert_fail@plt+0xf4cc>
   20e8c:	ldrb	r1, [r2]
   20e90:	asr	lr, r1, #5
   20e94:	and	r1, r1, #31
   20e98:	ldr	ip, [r5, lr, lsl #2]
   20e9c:	orr	r1, ip, r4, lsl r1
   20ea0:	str	r1, [r5, lr, lsl #2]
   20ea4:	b	20e6c <__assert_fail@plt+0xf4cc>
   20ea8:	mov	r0, #0
   20eac:	pop	{r4, r5, r6, r7, r8, pc}
   20eb0:	add	r4, r4, #1
   20eb4:	cmp	r4, #256	; 0x100
   20eb8:	beq	20f04 <__assert_fail@plt+0xf564>
   20ebc:	ldr	r2, [r0]
   20ec0:	lsl	r3, r4, #1
   20ec4:	ldrh	r3, [r2, r3]
   20ec8:	tst	r3, #512	; 0x200
   20ecc:	beq	20eb0 <__assert_fail@plt+0xf510>
   20ed0:	add	r3, r4, #31
   20ed4:	cmp	r4, #0
   20ed8:	movge	r3, r4
   20edc:	asr	r3, r3, #5
   20ee0:	asr	r2, r4, #31
   20ee4:	lsr	r1, r2, #27
   20ee8:	add	r2, r4, r1
   20eec:	and	r2, r2, #31
   20ef0:	sub	r2, r2, r1
   20ef4:	ldr	r1, [r5, r3, lsl #2]
   20ef8:	orr	r2, r1, ip, lsl r2
   20efc:	str	r2, [r5, r3, lsl #2]
   20f00:	b	20eb0 <__assert_fail@plt+0xf510>
   20f04:	mov	r0, #0
   20f08:	pop	{r4, r5, r6, r7, r8, pc}
   20f0c:	ldr	r1, [pc, #1992]	; 216dc <__assert_fail@plt+0xfd3c>
   20f10:	ldr	r0, [sp, #24]
   20f14:	bl	11544 <strcmp@plt>
   20f18:	subs	r4, r0, #0
   20f1c:	bne	20fe8 <__assert_fail@plt+0xf648>
   20f20:	cmp	r6, #0
   20f24:	bne	20f34 <__assert_fail@plt+0xf594>
   20f28:	bl	11778 <__ctype_b_loc@plt>
   20f2c:	mov	ip, #1
   20f30:	b	20f98 <__assert_fail@plt+0xf5f8>
   20f34:	bl	11778 <__ctype_b_loc@plt>
   20f38:	mov	r2, r6
   20f3c:	mov	r3, #0
   20f40:	mov	r4, #1
   20f44:	b	20f58 <__assert_fail@plt+0xf5b8>
   20f48:	add	r3, r3, #2
   20f4c:	add	r2, r2, #1
   20f50:	cmp	r3, #512	; 0x200
   20f54:	beq	20f84 <__assert_fail@plt+0xf5e4>
   20f58:	ldr	r1, [r0]
   20f5c:	ldrh	r1, [r1, r3]
   20f60:	tst	r1, #8192	; 0x2000
   20f64:	beq	20f48 <__assert_fail@plt+0xf5a8>
   20f68:	ldrb	r1, [r2]
   20f6c:	asr	lr, r1, #5
   20f70:	and	r1, r1, #31
   20f74:	ldr	ip, [r5, lr, lsl #2]
   20f78:	orr	r1, ip, r4, lsl r1
   20f7c:	str	r1, [r5, lr, lsl #2]
   20f80:	b	20f48 <__assert_fail@plt+0xf5a8>
   20f84:	mov	r0, #0
   20f88:	pop	{r4, r5, r6, r7, r8, pc}
   20f8c:	add	r4, r4, #1
   20f90:	cmp	r4, #256	; 0x100
   20f94:	beq	20fe0 <__assert_fail@plt+0xf640>
   20f98:	ldr	r2, [r0]
   20f9c:	lsl	r3, r4, #1
   20fa0:	ldrh	r3, [r2, r3]
   20fa4:	tst	r3, #8192	; 0x2000
   20fa8:	beq	20f8c <__assert_fail@plt+0xf5ec>
   20fac:	add	r3, r4, #31
   20fb0:	cmp	r4, #0
   20fb4:	movge	r3, r4
   20fb8:	asr	r3, r3, #5
   20fbc:	asr	r2, r4, #31
   20fc0:	lsr	r1, r2, #27
   20fc4:	add	r2, r4, r1
   20fc8:	and	r2, r2, #31
   20fcc:	sub	r2, r2, r1
   20fd0:	ldr	r1, [r5, r3, lsl #2]
   20fd4:	orr	r2, r1, ip, lsl r2
   20fd8:	str	r2, [r5, r3, lsl #2]
   20fdc:	b	20f8c <__assert_fail@plt+0xf5ec>
   20fe0:	mov	r0, #0
   20fe4:	pop	{r4, r5, r6, r7, r8, pc}
   20fe8:	ldr	r1, [pc, #1760]	; 216d0 <__assert_fail@plt+0xfd30>
   20fec:	ldr	r0, [sp, #24]
   20ff0:	bl	11544 <strcmp@plt>
   20ff4:	subs	r4, r0, #0
   20ff8:	bne	210c4 <__assert_fail@plt+0xf724>
   20ffc:	cmp	r6, #0
   21000:	bne	21010 <__assert_fail@plt+0xf670>
   21004:	bl	11778 <__ctype_b_loc@plt>
   21008:	mov	ip, #1
   2100c:	b	21074 <__assert_fail@plt+0xf6d4>
   21010:	bl	11778 <__ctype_b_loc@plt>
   21014:	mov	r2, r6
   21018:	mov	r3, #0
   2101c:	mov	r4, #1
   21020:	b	21034 <__assert_fail@plt+0xf694>
   21024:	add	r3, r3, #2
   21028:	add	r2, r2, #1
   2102c:	cmp	r3, #512	; 0x200
   21030:	beq	21060 <__assert_fail@plt+0xf6c0>
   21034:	ldr	r1, [r0]
   21038:	ldrh	r1, [r1, r3]
   2103c:	tst	r1, #1024	; 0x400
   21040:	beq	21024 <__assert_fail@plt+0xf684>
   21044:	ldrb	r1, [r2]
   21048:	asr	lr, r1, #5
   2104c:	and	r1, r1, #31
   21050:	ldr	ip, [r5, lr, lsl #2]
   21054:	orr	r1, ip, r4, lsl r1
   21058:	str	r1, [r5, lr, lsl #2]
   2105c:	b	21024 <__assert_fail@plt+0xf684>
   21060:	mov	r0, #0
   21064:	pop	{r4, r5, r6, r7, r8, pc}
   21068:	add	r4, r4, #1
   2106c:	cmp	r4, #256	; 0x100
   21070:	beq	210bc <__assert_fail@plt+0xf71c>
   21074:	ldr	r2, [r0]
   21078:	lsl	r3, r4, #1
   2107c:	ldrh	r3, [r2, r3]
   21080:	tst	r3, #1024	; 0x400
   21084:	beq	21068 <__assert_fail@plt+0xf6c8>
   21088:	add	r3, r4, #31
   2108c:	cmp	r4, #0
   21090:	movge	r3, r4
   21094:	asr	r3, r3, #5
   21098:	asr	r2, r4, #31
   2109c:	lsr	r1, r2, #27
   210a0:	add	r2, r4, r1
   210a4:	and	r2, r2, #31
   210a8:	sub	r2, r2, r1
   210ac:	ldr	r1, [r5, r3, lsl #2]
   210b0:	orr	r2, r1, ip, lsl r2
   210b4:	str	r2, [r5, r3, lsl #2]
   210b8:	b	21068 <__assert_fail@plt+0xf6c8>
   210bc:	mov	r0, #0
   210c0:	pop	{r4, r5, r6, r7, r8, pc}
   210c4:	ldr	r1, [pc, #1556]	; 216e0 <__assert_fail@plt+0xfd40>
   210c8:	ldr	r0, [sp, #24]
   210cc:	bl	11544 <strcmp@plt>
   210d0:	subs	r4, r0, #0
   210d4:	bne	211a0 <__assert_fail@plt+0xf800>
   210d8:	cmp	r6, #0
   210dc:	bne	210ec <__assert_fail@plt+0xf74c>
   210e0:	bl	11778 <__ctype_b_loc@plt>
   210e4:	mov	ip, #1
   210e8:	b	21150 <__assert_fail@plt+0xf7b0>
   210ec:	bl	11778 <__ctype_b_loc@plt>
   210f0:	mov	r2, r6
   210f4:	mov	r3, #0
   210f8:	mov	r4, #1
   210fc:	b	21110 <__assert_fail@plt+0xf770>
   21100:	add	r3, r3, #2
   21104:	add	r2, r2, #1
   21108:	cmp	r3, #512	; 0x200
   2110c:	beq	2113c <__assert_fail@plt+0xf79c>
   21110:	ldr	r1, [r0]
   21114:	ldrh	r1, [r1, r3]
   21118:	tst	r1, #2048	; 0x800
   2111c:	beq	21100 <__assert_fail@plt+0xf760>
   21120:	ldrb	r1, [r2]
   21124:	asr	lr, r1, #5
   21128:	and	r1, r1, #31
   2112c:	ldr	ip, [r5, lr, lsl #2]
   21130:	orr	r1, ip, r4, lsl r1
   21134:	str	r1, [r5, lr, lsl #2]
   21138:	b	21100 <__assert_fail@plt+0xf760>
   2113c:	mov	r0, #0
   21140:	pop	{r4, r5, r6, r7, r8, pc}
   21144:	add	r4, r4, #1
   21148:	cmp	r4, #256	; 0x100
   2114c:	beq	21198 <__assert_fail@plt+0xf7f8>
   21150:	ldr	r2, [r0]
   21154:	lsl	r3, r4, #1
   21158:	ldrh	r3, [r2, r3]
   2115c:	tst	r3, #2048	; 0x800
   21160:	beq	21144 <__assert_fail@plt+0xf7a4>
   21164:	add	r3, r4, #31
   21168:	cmp	r4, #0
   2116c:	movge	r3, r4
   21170:	asr	r3, r3, #5
   21174:	asr	r2, r4, #31
   21178:	lsr	r1, r2, #27
   2117c:	add	r2, r4, r1
   21180:	and	r2, r2, #31
   21184:	sub	r2, r2, r1
   21188:	ldr	r1, [r5, r3, lsl #2]
   2118c:	orr	r2, r1, ip, lsl r2
   21190:	str	r2, [r5, r3, lsl #2]
   21194:	b	21144 <__assert_fail@plt+0xf7a4>
   21198:	mov	r0, #0
   2119c:	pop	{r4, r5, r6, r7, r8, pc}
   211a0:	ldr	r1, [pc, #1340]	; 216e4 <__assert_fail@plt+0xfd44>
   211a4:	ldr	r0, [sp, #24]
   211a8:	bl	11544 <strcmp@plt>
   211ac:	subs	r4, r0, #0
   211b0:	bne	2127c <__assert_fail@plt+0xf8dc>
   211b4:	cmp	r6, #0
   211b8:	bne	211c8 <__assert_fail@plt+0xf828>
   211bc:	bl	11778 <__ctype_b_loc@plt>
   211c0:	mov	ip, #1
   211c4:	b	2122c <__assert_fail@plt+0xf88c>
   211c8:	bl	11778 <__ctype_b_loc@plt>
   211cc:	mov	r2, r6
   211d0:	mov	r3, #0
   211d4:	mov	r4, #1
   211d8:	b	211ec <__assert_fail@plt+0xf84c>
   211dc:	add	r3, r3, #2
   211e0:	add	r2, r2, #1
   211e4:	cmp	r3, #512	; 0x200
   211e8:	beq	21218 <__assert_fail@plt+0xf878>
   211ec:	ldr	r1, [r0]
   211f0:	ldrh	r1, [r1, r3]
   211f4:	tst	r1, #16384	; 0x4000
   211f8:	beq	211dc <__assert_fail@plt+0xf83c>
   211fc:	ldrb	r1, [r2]
   21200:	asr	lr, r1, #5
   21204:	and	r1, r1, #31
   21208:	ldr	ip, [r5, lr, lsl #2]
   2120c:	orr	r1, ip, r4, lsl r1
   21210:	str	r1, [r5, lr, lsl #2]
   21214:	b	211dc <__assert_fail@plt+0xf83c>
   21218:	mov	r0, #0
   2121c:	pop	{r4, r5, r6, r7, r8, pc}
   21220:	add	r4, r4, #1
   21224:	cmp	r4, #256	; 0x100
   21228:	beq	21274 <__assert_fail@plt+0xf8d4>
   2122c:	ldr	r2, [r0]
   21230:	lsl	r3, r4, #1
   21234:	ldrh	r3, [r2, r3]
   21238:	tst	r3, #16384	; 0x4000
   2123c:	beq	21220 <__assert_fail@plt+0xf880>
   21240:	add	r3, r4, #31
   21244:	cmp	r4, #0
   21248:	movge	r3, r4
   2124c:	asr	r3, r3, #5
   21250:	asr	r2, r4, #31
   21254:	lsr	r1, r2, #27
   21258:	add	r2, r4, r1
   2125c:	and	r2, r2, #31
   21260:	sub	r2, r2, r1
   21264:	ldr	r1, [r5, r3, lsl #2]
   21268:	orr	r2, r1, ip, lsl r2
   2126c:	str	r2, [r5, r3, lsl #2]
   21270:	b	21220 <__assert_fail@plt+0xf880>
   21274:	mov	r0, #0
   21278:	pop	{r4, r5, r6, r7, r8, pc}
   2127c:	ldr	r1, [pc, #1092]	; 216c8 <__assert_fail@plt+0xfd28>
   21280:	ldr	r0, [sp, #24]
   21284:	bl	11544 <strcmp@plt>
   21288:	subs	r4, r0, #0
   2128c:	bne	21358 <__assert_fail@plt+0xf9b8>
   21290:	cmp	r6, #0
   21294:	bne	212a4 <__assert_fail@plt+0xf904>
   21298:	bl	11778 <__ctype_b_loc@plt>
   2129c:	mov	ip, #1
   212a0:	b	21308 <__assert_fail@plt+0xf968>
   212a4:	bl	11778 <__ctype_b_loc@plt>
   212a8:	mov	r2, r6
   212ac:	mov	r3, #0
   212b0:	mov	r4, #1
   212b4:	b	212c8 <__assert_fail@plt+0xf928>
   212b8:	add	r3, r3, #2
   212bc:	add	r2, r2, #1
   212c0:	cmp	r3, #512	; 0x200
   212c4:	beq	212f4 <__assert_fail@plt+0xf954>
   212c8:	ldr	r1, [r0]
   212cc:	ldrh	r1, [r1, r3]
   212d0:	tst	r1, #256	; 0x100
   212d4:	beq	212b8 <__assert_fail@plt+0xf918>
   212d8:	ldrb	r1, [r2]
   212dc:	asr	lr, r1, #5
   212e0:	and	r1, r1, #31
   212e4:	ldr	ip, [r5, lr, lsl #2]
   212e8:	orr	r1, ip, r4, lsl r1
   212ec:	str	r1, [r5, lr, lsl #2]
   212f0:	b	212b8 <__assert_fail@plt+0xf918>
   212f4:	mov	r0, #0
   212f8:	pop	{r4, r5, r6, r7, r8, pc}
   212fc:	add	r4, r4, #1
   21300:	cmp	r4, #256	; 0x100
   21304:	beq	21350 <__assert_fail@plt+0xf9b0>
   21308:	ldr	r2, [r0]
   2130c:	lsl	r3, r4, #1
   21310:	ldrh	r3, [r2, r3]
   21314:	tst	r3, #256	; 0x100
   21318:	beq	212fc <__assert_fail@plt+0xf95c>
   2131c:	add	r3, r4, #31
   21320:	cmp	r4, #0
   21324:	movge	r3, r4
   21328:	asr	r3, r3, #5
   2132c:	asr	r2, r4, #31
   21330:	lsr	r1, r2, #27
   21334:	add	r2, r4, r1
   21338:	and	r2, r2, #31
   2133c:	sub	r2, r2, r1
   21340:	ldr	r1, [r5, r3, lsl #2]
   21344:	orr	r2, r1, ip, lsl r2
   21348:	str	r2, [r5, r3, lsl #2]
   2134c:	b	212fc <__assert_fail@plt+0xf95c>
   21350:	mov	r0, #0
   21354:	pop	{r4, r5, r6, r7, r8, pc}
   21358:	ldr	r1, [pc, #904]	; 216e8 <__assert_fail@plt+0xfd48>
   2135c:	ldr	r0, [sp, #24]
   21360:	bl	11544 <strcmp@plt>
   21364:	subs	r4, r0, #0
   21368:	bne	21434 <__assert_fail@plt+0xfa94>
   2136c:	cmp	r6, #0
   21370:	beq	213cc <__assert_fail@plt+0xfa2c>
   21374:	bl	11778 <__ctype_b_loc@plt>
   21378:	mov	r2, r6
   2137c:	mov	r3, #0
   21380:	mov	r4, #1
   21384:	b	21398 <__assert_fail@plt+0xf9f8>
   21388:	add	r3, r3, #2
   2138c:	add	r2, r2, #1
   21390:	cmp	r3, #512	; 0x200
   21394:	beq	213c4 <__assert_fail@plt+0xfa24>
   21398:	ldr	r1, [r0]
   2139c:	ldrh	r1, [r1, r3]
   213a0:	tst	r1, #1
   213a4:	beq	21388 <__assert_fail@plt+0xf9e8>
   213a8:	ldrb	r1, [r2]
   213ac:	asr	lr, r1, #5
   213b0:	and	r1, r1, #31
   213b4:	ldr	ip, [r5, lr, lsl #2]
   213b8:	orr	r1, ip, r4, lsl r1
   213bc:	str	r1, [r5, lr, lsl #2]
   213c0:	b	21388 <__assert_fail@plt+0xf9e8>
   213c4:	mov	r0, #0
   213c8:	pop	{r4, r5, r6, r7, r8, pc}
   213cc:	bl	11778 <__ctype_b_loc@plt>
   213d0:	mov	ip, #1
   213d4:	b	213e4 <__assert_fail@plt+0xfa44>
   213d8:	add	r4, r4, #1
   213dc:	cmp	r4, #256	; 0x100
   213e0:	beq	2142c <__assert_fail@plt+0xfa8c>
   213e4:	ldr	r2, [r0]
   213e8:	lsl	r3, r4, #1
   213ec:	ldrh	r3, [r2, r3]
   213f0:	tst	r3, #1
   213f4:	beq	213d8 <__assert_fail@plt+0xfa38>
   213f8:	add	r3, r4, #31
   213fc:	cmp	r4, #0
   21400:	movge	r3, r4
   21404:	asr	r3, r3, #5
   21408:	asr	r2, r4, #31
   2140c:	lsr	r1, r2, #27
   21410:	add	r2, r4, r1
   21414:	and	r2, r2, #31
   21418:	sub	r2, r2, r1
   2141c:	ldr	r1, [r5, r3, lsl #2]
   21420:	orr	r2, r1, ip, lsl r2
   21424:	str	r2, [r5, r3, lsl #2]
   21428:	b	213d8 <__assert_fail@plt+0xfa38>
   2142c:	mov	r0, #0
   21430:	pop	{r4, r5, r6, r7, r8, pc}
   21434:	ldr	r1, [pc, #688]	; 216ec <__assert_fail@plt+0xfd4c>
   21438:	ldr	r0, [sp, #24]
   2143c:	bl	11544 <strcmp@plt>
   21440:	subs	r4, r0, #0
   21444:	bne	21510 <__assert_fail@plt+0xfb70>
   21448:	cmp	r6, #0
   2144c:	beq	214a8 <__assert_fail@plt+0xfb08>
   21450:	bl	11778 <__ctype_b_loc@plt>
   21454:	mov	r2, r6
   21458:	mov	r3, #0
   2145c:	mov	r4, #1
   21460:	b	21474 <__assert_fail@plt+0xfad4>
   21464:	add	r3, r3, #2
   21468:	add	r2, r2, #1
   2146c:	cmp	r3, #512	; 0x200
   21470:	beq	214a0 <__assert_fail@plt+0xfb00>
   21474:	ldr	r1, [r0]
   21478:	ldrsh	r1, [r1, r3]
   2147c:	cmp	r1, #0
   21480:	bge	21464 <__assert_fail@plt+0xfac4>
   21484:	ldrb	r1, [r2]
   21488:	asr	lr, r1, #5
   2148c:	and	r1, r1, #31
   21490:	ldr	ip, [r5, lr, lsl #2]
   21494:	orr	r1, ip, r4, lsl r1
   21498:	str	r1, [r5, lr, lsl #2]
   2149c:	b	21464 <__assert_fail@plt+0xfac4>
   214a0:	mov	r0, #0
   214a4:	pop	{r4, r5, r6, r7, r8, pc}
   214a8:	bl	11778 <__ctype_b_loc@plt>
   214ac:	mov	ip, #1
   214b0:	b	214c0 <__assert_fail@plt+0xfb20>
   214b4:	add	r4, r4, #1
   214b8:	cmp	r4, #256	; 0x100
   214bc:	beq	21508 <__assert_fail@plt+0xfb68>
   214c0:	ldr	r2, [r0]
   214c4:	lsl	r3, r4, #1
   214c8:	ldrsh	r3, [r2, r3]
   214cc:	cmp	r3, #0
   214d0:	bge	214b4 <__assert_fail@plt+0xfb14>
   214d4:	add	r3, r4, #31
   214d8:	cmp	r4, #0
   214dc:	movge	r3, r4
   214e0:	asr	r3, r3, #5
   214e4:	asr	r2, r4, #31
   214e8:	lsr	r1, r2, #27
   214ec:	add	r2, r4, r1
   214f0:	and	r2, r2, #31
   214f4:	sub	r2, r2, r1
   214f8:	ldr	r1, [r5, r3, lsl #2]
   214fc:	orr	r2, r1, ip, lsl r2
   21500:	str	r2, [r5, r3, lsl #2]
   21504:	b	214b4 <__assert_fail@plt+0xfb14>
   21508:	mov	r0, #0
   2150c:	pop	{r4, r5, r6, r7, r8, pc}
   21510:	ldr	r1, [pc, #472]	; 216f0 <__assert_fail@plt+0xfd50>
   21514:	ldr	r0, [sp, #24]
   21518:	bl	11544 <strcmp@plt>
   2151c:	subs	r4, r0, #0
   21520:	bne	215e4 <__assert_fail@plt+0xfc44>
   21524:	cmp	r6, #0
   21528:	beq	2157c <__assert_fail@plt+0xfbdc>
   2152c:	bl	11778 <__ctype_b_loc@plt>
   21530:	mov	r2, r6
   21534:	mov	r3, #0
   21538:	mov	r4, #1
   2153c:	ldr	r1, [r0]
   21540:	ldrh	r1, [r1, r3]
   21544:	tst	r1, #4
   21548:	beq	21564 <__assert_fail@plt+0xfbc4>
   2154c:	ldrb	r1, [r2]
   21550:	asr	lr, r1, #5
   21554:	and	r1, r1, #31
   21558:	ldr	ip, [r5, lr, lsl #2]
   2155c:	orr	r1, ip, r4, lsl r1
   21560:	str	r1, [r5, lr, lsl #2]
   21564:	add	r3, r3, #2
   21568:	add	r2, r2, #1
   2156c:	cmp	r3, #512	; 0x200
   21570:	bne	2153c <__assert_fail@plt+0xfb9c>
   21574:	mov	r0, #0
   21578:	pop	{r4, r5, r6, r7, r8, pc}
   2157c:	bl	11778 <__ctype_b_loc@plt>
   21580:	mov	ip, #1
   21584:	b	21594 <__assert_fail@plt+0xfbf4>
   21588:	add	r4, r4, #1
   2158c:	cmp	r4, #256	; 0x100
   21590:	beq	215dc <__assert_fail@plt+0xfc3c>
   21594:	ldr	r2, [r0]
   21598:	lsl	r3, r4, #1
   2159c:	ldrh	r3, [r2, r3]
   215a0:	tst	r3, #4
   215a4:	beq	21588 <__assert_fail@plt+0xfbe8>
   215a8:	add	r3, r4, #31
   215ac:	cmp	r4, #0
   215b0:	movge	r3, r4
   215b4:	asr	r3, r3, #5
   215b8:	asr	r2, r4, #31
   215bc:	lsr	r1, r2, #27
   215c0:	add	r2, r4, r1
   215c4:	and	r2, r2, #31
   215c8:	sub	r2, r2, r1
   215cc:	ldr	r1, [r5, r3, lsl #2]
   215d0:	orr	r2, r1, ip, lsl r2
   215d4:	str	r2, [r5, r3, lsl #2]
   215d8:	b	21588 <__assert_fail@plt+0xfbe8>
   215dc:	mov	r0, #0
   215e0:	pop	{r4, r5, r6, r7, r8, pc}
   215e4:	ldr	r1, [pc, #264]	; 216f4 <__assert_fail@plt+0xfd54>
   215e8:	ldr	r0, [sp, #24]
   215ec:	bl	11544 <strcmp@plt>
   215f0:	subs	r4, r0, #0
   215f4:	bne	216c0 <__assert_fail@plt+0xfd20>
   215f8:	cmp	r6, #0
   215fc:	beq	21650 <__assert_fail@plt+0xfcb0>
   21600:	bl	11778 <__ctype_b_loc@plt>
   21604:	mov	r2, r6
   21608:	mov	r3, #0
   2160c:	mov	r4, #1
   21610:	ldr	r1, [r0]
   21614:	ldrh	r1, [r1, r3]
   21618:	tst	r1, #4096	; 0x1000
   2161c:	beq	21638 <__assert_fail@plt+0xfc98>
   21620:	ldrb	r1, [r2]
   21624:	asr	lr, r1, #5
   21628:	and	r1, r1, #31
   2162c:	ldr	ip, [r5, lr, lsl #2]
   21630:	orr	r1, ip, r4, lsl r1
   21634:	str	r1, [r5, lr, lsl #2]
   21638:	add	r3, r3, #2
   2163c:	add	r2, r2, #1
   21640:	cmp	r3, #512	; 0x200
   21644:	bne	21610 <__assert_fail@plt+0xfc70>
   21648:	mov	r0, #0
   2164c:	pop	{r4, r5, r6, r7, r8, pc}
   21650:	bl	11778 <__ctype_b_loc@plt>
   21654:	mov	ip, #1
   21658:	b	21668 <__assert_fail@plt+0xfcc8>
   2165c:	add	r4, r4, #1
   21660:	cmp	r4, #256	; 0x100
   21664:	beq	216b0 <__assert_fail@plt+0xfd10>
   21668:	ldr	r2, [r0]
   2166c:	lsl	r3, r4, #1
   21670:	ldrh	r3, [r2, r3]
   21674:	tst	r3, #4096	; 0x1000
   21678:	beq	2165c <__assert_fail@plt+0xfcbc>
   2167c:	add	r3, r4, #31
   21680:	cmp	r4, #0
   21684:	movge	r3, r4
   21688:	asr	r3, r3, #5
   2168c:	asr	r2, r4, #31
   21690:	lsr	r1, r2, #27
   21694:	add	r2, r4, r1
   21698:	and	r2, r2, #31
   2169c:	sub	r2, r2, r1
   216a0:	ldr	r1, [r5, r3, lsl #2]
   216a4:	orr	r2, r1, ip, lsl r2
   216a8:	str	r2, [r5, r3, lsl #2]
   216ac:	b	2165c <__assert_fail@plt+0xfcbc>
   216b0:	mov	r0, #0
   216b4:	pop	{r4, r5, r6, r7, r8, pc}
   216b8:	mov	r0, #12
   216bc:	pop	{r4, r5, r6, r7, r8, pc}
   216c0:	mov	r0, #4
   216c4:	pop	{r4, r5, r6, r7, r8, pc}
   216c8:	andeq	ip, r2, r0, lsl #25
   216cc:	andeq	ip, r2, r8, lsl #25
   216d0:	andeq	ip, r2, r8, ror ip
   216d4:	muleq	r2, r0, ip
   216d8:	muleq	r2, r8, ip
   216dc:	andeq	ip, r2, r0, lsr #25
   216e0:	andeq	ip, r2, r8, lsr #25
   216e4:	andeq	ip, r2, ip, asr #1
   216e8:			; <UNDEFINED> instruction: 0x0002ccb0
   216ec:			; <UNDEFINED> instruction: 0x0002ccb8
   216f0:	andeq	ip, r2, r0, asr #25
   216f4:	andeq	ip, r2, r8, asr #25
   216f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   216fc:	sub	sp, sp, #24
   21700:	mov	r6, r0
   21704:	mov	r9, r1
   21708:	mov	sl, r2
   2170c:	mov	r5, r3
   21710:	ldrb	r8, [sp, #56]	; 0x38
   21714:	mov	r3, #0
   21718:	str	r3, [sp, #20]
   2171c:	mov	r1, #1
   21720:	mov	r0, #32
   21724:	bl	1b548 <__assert_fail@plt+0x9ba8>
   21728:	subs	r4, r0, #0
   2172c:	beq	21894 <__assert_fail@plt+0xfef4>
   21730:	mov	r1, #1
   21734:	mov	r0, #40	; 0x28
   21738:	bl	1b548 <__assert_fail@plt+0x9ba8>
   2173c:	subs	r7, r0, #0
   21740:	beq	218a8 <__assert_fail@plt+0xff08>
   21744:	ldrb	r2, [r7, #16]
   21748:	and	r3, r8, #1
   2174c:	bic	r2, r2, #1
   21750:	orr	r3, r3, r2
   21754:	strb	r3, [r7, #16]
   21758:	mov	r3, #0
   2175c:	str	r3, [sp, #4]
   21760:	str	sl, [sp]
   21764:	add	r3, sp, #20
   21768:	mov	r2, r7
   2176c:	mov	r1, r4
   21770:	mov	r0, r9
   21774:	bl	20bc4 <__assert_fail@plt+0xf224>
   21778:	subs	r9, r0, #0
   2177c:	bne	218c4 <__assert_fail@plt+0xff24>
   21780:	ldrb	r3, [r5]
   21784:	cmp	r3, #0
   21788:	movne	r0, #1
   2178c:	beq	217b0 <__assert_fail@plt+0xfe10>
   21790:	lsr	r1, r3, #5
   21794:	and	r3, r3, #31
   21798:	ldr	r2, [r4, r1, lsl #2]
   2179c:	orr	r3, r2, r0, lsl r3
   217a0:	str	r3, [r4, r1, lsl #2]
   217a4:	ldrb	r3, [r5, #1]!
   217a8:	cmp	r3, #0
   217ac:	bne	21790 <__assert_fail@plt+0xfdf0>
   217b0:	cmp	r8, #0
   217b4:	beq	217d4 <__assert_fail@plt+0xfe34>
   217b8:	sub	r3, r4, #4
   217bc:	add	r1, r4, #28
   217c0:	ldr	r2, [r3, #4]
   217c4:	mvn	r2, r2
   217c8:	str	r2, [r3, #4]!
   217cc:	cmp	r3, r1
   217d0:	bne	217c0 <__assert_fail@plt+0xfe20>
   217d4:	ldr	r3, [r6, #92]	; 0x5c
   217d8:	cmp	r3, #1
   217dc:	ble	21808 <__assert_fail@plt+0xfe68>
   217e0:	sub	r3, r4, #4
   217e4:	ldr	r1, [r6, #60]	; 0x3c
   217e8:	sub	r1, r1, #4
   217ec:	add	ip, r4, #28
   217f0:	ldr	r2, [r3, #4]
   217f4:	ldr	r0, [r1, #4]!
   217f8:	and	r2, r2, r0
   217fc:	str	r2, [r3, #4]!
   21800:	cmp	r3, ip
   21804:	bne	217f0 <__assert_fail@plt+0xfe50>
   21808:	mov	r1, #0
   2180c:	str	r1, [sp, #16]
   21810:	str	r4, [sp, #12]
   21814:	mov	r3, #3
   21818:	strb	r3, [sp, #16]
   2181c:	add	r3, sp, #12
   21820:	mov	r2, r1
   21824:	mov	r0, r6
   21828:	bl	1c7f8 <__assert_fail@plt+0xae58>
   2182c:	subs	r5, r0, #0
   21830:	beq	218f0 <__assert_fail@plt+0xff50>
   21834:	ldr	r3, [r6, #92]	; 0x5c
   21838:	cmp	r3, #1
   2183c:	ble	218e4 <__assert_fail@plt+0xff44>
   21840:	mov	r3, #6
   21844:	strb	r3, [sp, #16]
   21848:	add	r3, sp, #24
   2184c:	str	r7, [r3, #-12]!
   21850:	ldrb	r2, [r6, #88]	; 0x58
   21854:	orr	r2, r2, #2
   21858:	strb	r2, [r6, #88]	; 0x58
   2185c:	mov	r2, #0
   21860:	mov	r1, r2
   21864:	mov	r0, r6
   21868:	bl	1c7f8 <__assert_fail@plt+0xae58>
   2186c:	subs	r2, r0, #0
   21870:	beq	218f0 <__assert_fail@plt+0xff50>
   21874:	mov	r3, #10
   21878:	mov	r1, r5
   2187c:	mov	r0, r6
   21880:	bl	1c96c <__assert_fail@plt+0xafcc>
   21884:	mov	r5, r0
   21888:	mov	r0, r5
   2188c:	add	sp, sp, #24
   21890:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21894:	mov	r3, #12
   21898:	ldr	r2, [sp, #60]	; 0x3c
   2189c:	str	r3, [r2]
   218a0:	mov	r5, #0
   218a4:	b	21888 <__assert_fail@plt+0xfee8>
   218a8:	mov	r0, r4
   218ac:	bl	1b854 <__assert_fail@plt+0x9eb4>
   218b0:	mov	r3, #12
   218b4:	ldr	r2, [sp, #60]	; 0x3c
   218b8:	str	r3, [r2]
   218bc:	mov	r5, #0
   218c0:	b	21888 <__assert_fail@plt+0xfee8>
   218c4:	mov	r0, r4
   218c8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   218cc:	mov	r0, r7
   218d0:	bl	1e3b4 <__assert_fail@plt+0xca14>
   218d4:	ldr	r3, [sp, #60]	; 0x3c
   218d8:	str	r9, [r3]
   218dc:	mov	r5, #0
   218e0:	b	21888 <__assert_fail@plt+0xfee8>
   218e4:	mov	r0, r7
   218e8:	bl	1e3b4 <__assert_fail@plt+0xca14>
   218ec:	b	21888 <__assert_fail@plt+0xfee8>
   218f0:	mov	r0, r4
   218f4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   218f8:	mov	r0, r7
   218fc:	bl	1e3b4 <__assert_fail@plt+0xca14>
   21900:	mov	r3, #12
   21904:	ldr	r2, [sp, #60]	; 0x3c
   21908:	str	r3, [r2]
   2190c:	mov	r5, #0
   21910:	b	21888 <__assert_fail@plt+0xfee8>
   21914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21918:	sub	sp, sp, #300	; 0x12c
   2191c:	ldr	r3, [r0]
   21920:	str	r3, [sp, #4]
   21924:	ldr	r3, [r3, #92]	; 0x5c
   21928:	cmp	r3, #1
   2192c:	ldreq	r3, [r0, #12]
   21930:	lsreq	r3, r3, #22
   21934:	andeq	r3, r3, #1
   21938:	movne	r3, #0
   2193c:	mov	sl, r3
   21940:	ldr	r3, [r1, #8]
   21944:	cmp	r3, #0
   21948:	ble	21c84 <__assert_fail@plt+0x102e4>
   2194c:	mov	r8, r2
   21950:	str	r1, [sp, #16]
   21954:	str	r0, [sp, #20]
   21958:	mov	r3, #0
   2195c:	str	r3, [sp, #8]
   21960:	ldr	fp, [pc, #1020]	; 21d64 <__assert_fail@plt+0x103c4>
   21964:	b	21c18 <__assert_fail@plt+0x10278>
   21968:	ldrb	r5, [r2, r4, lsl #3]
   2196c:	strb	r3, [r8, r5]
   21970:	cmp	sl, #0
   21974:	beq	21998 <__assert_fail@plt+0xfff8>
   21978:	add	r3, r5, #128	; 0x80
   2197c:	cmp	r3, fp
   21980:	bhi	21990 <__assert_fail@plt+0xfff0>
   21984:	bl	11748 <__ctype_tolower_loc@plt>
   21988:	ldr	r3, [r0]
   2198c:	ldr	r5, [r3, r5, lsl #2]
   21990:	mov	r3, #1
   21994:	strb	r3, [r8, r5]
   21998:	ldr	r3, [sp, #20]
   2199c:	ldr	r3, [r3, #12]
   219a0:	tst	r3, #4194304	; 0x400000
   219a4:	beq	21bf8 <__assert_fail@plt+0x10258>
   219a8:	ldr	ip, [sp, #4]
   219ac:	ldr	r3, [ip, #92]	; 0x5c
   219b0:	cmp	r3, #1
   219b4:	ble	21bf8 <__assert_fail@plt+0x10258>
   219b8:	ldr	r3, [ip]
   219bc:	ldrb	r3, [r3, r4, lsl #3]
   219c0:	strb	r3, [sp, #40]	; 0x28
   219c4:	add	r1, r4, #1
   219c8:	ldr	r3, [ip, #8]
   219cc:	cmp	r1, r3
   219d0:	bcs	21aa4 <__assert_fail@plt+0x10104>
   219d4:	ldr	r0, [sp, #12]
   219d8:	add	r3, r0, #8
   219dc:	ldr	r2, [ip]
   219e0:	add	r3, r2, r3
   219e4:	ldr	r2, [r3, #4]
   219e8:	bic	r2, r2, #-16777216	; 0xff000000
   219ec:	bic	r2, r2, #14614528	; 0xdf0000
   219f0:	bic	r2, r2, #65280	; 0xff00
   219f4:	ldr	lr, [pc, #876]	; 21d68 <__assert_fail@plt+0x103c8>
   219f8:	cmp	r2, lr
   219fc:	bne	21aac <__assert_fail@plt+0x1010c>
   21a00:	add	r0, r0, #16
   21a04:	add	r4, sp, #41	; 0x29
   21a08:	ldrb	r3, [r3]
   21a0c:	strb	r3, [r4], #1
   21a10:	add	r1, r1, #1
   21a14:	ldr	r3, [ip, #8]
   21a18:	cmp	r1, r3
   21a1c:	bcs	21a48 <__assert_fail@plt+0x100a8>
   21a20:	ldr	r3, [ip]
   21a24:	add	r3, r3, r0
   21a28:	add	r0, r0, #8
   21a2c:	ldr	r2, [r3, #4]
   21a30:	bic	r2, r2, #-16777216	; 0xff000000
   21a34:	bic	r2, r2, #14614528	; 0xdf0000
   21a38:	bic	r2, r2, #65280	; 0xff00
   21a3c:	ldr	lr, [pc, #804]	; 21d68 <__assert_fail@plt+0x103c8>
   21a40:	cmp	r2, lr
   21a44:	beq	21a08 <__assert_fail@plt+0x10068>
   21a48:	mov	r3, #0
   21a4c:	str	r3, [sp, #32]
   21a50:	str	r3, [sp, #36]	; 0x24
   21a54:	add	r3, sp, #40	; 0x28
   21a58:	sub	r4, r4, r3
   21a5c:	add	r3, sp, #32
   21a60:	mov	r2, r4
   21a64:	add	r1, sp, #40	; 0x28
   21a68:	add	r0, sp, #28
   21a6c:	bl	1b984 <__assert_fail@plt+0x9fe4>
   21a70:	cmp	r4, r0
   21a74:	bne	21bf8 <__assert_fail@plt+0x10258>
   21a78:	ldr	r0, [sp, #28]
   21a7c:	bl	115f8 <towlower@plt>
   21a80:	add	r2, sp, #32
   21a84:	mov	r1, r0
   21a88:	add	r0, sp, #40	; 0x28
   21a8c:	bl	1152c <wcrtomb@plt>
   21a90:	cmn	r0, #1
   21a94:	ldrbne	r3, [sp, #40]	; 0x28
   21a98:	movne	r2, #1
   21a9c:	strbne	r2, [r8, r3]
   21aa0:	b	21bf8 <__assert_fail@plt+0x10258>
   21aa4:	add	r4, sp, #41	; 0x29
   21aa8:	b	21a48 <__assert_fail@plt+0x100a8>
   21aac:	add	r4, sp, #41	; 0x29
   21ab0:	b	21a48 <__assert_fail@plt+0x100a8>
   21ab4:	mov	r3, #0
   21ab8:	str	r3, [sp]
   21abc:	mov	r9, #1
   21ac0:	b	21b28 <__assert_fail@plt+0x10188>
   21ac4:	strb	r9, [r8, r3]
   21ac8:	add	r4, r4, #1
   21acc:	add	r5, r5, #1
   21ad0:	add	r6, r6, #4
   21ad4:	cmp	r4, #32
   21ad8:	beq	21b14 <__assert_fail@plt+0x10174>
   21adc:	lsr	r3, r7, r4
   21ae0:	tst	r3, #1
   21ae4:	beq	21ac8 <__assert_fail@plt+0x10128>
   21ae8:	strb	r9, [r8, r5]
   21aec:	cmp	sl, #0
   21af0:	beq	21ac8 <__assert_fail@plt+0x10128>
   21af4:	add	r3, r5, #128	; 0x80
   21af8:	cmp	r3, fp
   21afc:	movhi	r3, r5
   21b00:	bhi	21ac4 <__assert_fail@plt+0x10124>
   21b04:	bl	11748 <__ctype_tolower_loc@plt>
   21b08:	ldr	r3, [r0]
   21b0c:	ldr	r3, [r3, r6]
   21b10:	b	21ac4 <__assert_fail@plt+0x10124>
   21b14:	ldr	r3, [sp]
   21b18:	add	r3, r3, #4
   21b1c:	str	r3, [sp]
   21b20:	cmp	r3, #32
   21b24:	beq	21bf8 <__assert_fail@plt+0x10258>
   21b28:	ldr	r2, [sp]
   21b2c:	lsl	r5, r2, #3
   21b30:	ldr	r3, [sp, #4]
   21b34:	ldr	r3, [r3]
   21b38:	ldr	r1, [sp, #12]
   21b3c:	ldr	r3, [r3, r1]
   21b40:	ldr	r7, [r3, r2]
   21b44:	lsl	r6, r2, #5
   21b48:	mov	r4, #0
   21b4c:	b	21adc <__assert_fail@plt+0x1013c>
   21b50:	ldr	r5, [r2, r4, lsl #3]
   21b54:	ldr	r3, [sp, #4]
   21b58:	ldr	r3, [r3, #92]	; 0x5c
   21b5c:	cmp	r3, #1
   21b60:	ble	21b88 <__assert_fail@plt+0x101e8>
   21b64:	ldr	r3, [r5, #36]	; 0x24
   21b68:	cmp	r3, #0
   21b6c:	bne	21ba8 <__assert_fail@plt+0x10208>
   21b70:	ldrb	r3, [r5, #16]
   21b74:	tst	r3, #1
   21b78:	bne	21ba8 <__assert_fail@plt+0x10208>
   21b7c:	ldr	r3, [r5, #32]
   21b80:	cmp	r3, #0
   21b84:	bne	21ba8 <__assert_fail@plt+0x10208>
   21b88:	ldr	r3, [r5, #20]
   21b8c:	cmp	r3, #0
   21b90:	ble	21bf8 <__assert_fail@plt+0x10258>
   21b94:	mov	r4, #0
   21b98:	mov	r9, r4
   21b9c:	str	sl, [sp]
   21ba0:	ldr	sl, [sp, #20]
   21ba4:	b	21cec <__assert_fail@plt+0x1034c>
   21ba8:	mov	r3, #0
   21bac:	strb	r3, [sp, #32]
   21bb0:	mov	r4, #0
   21bb4:	mov	r5, #1
   21bb8:	str	r4, [sp, #40]	; 0x28
   21bbc:	str	r4, [sp, #44]	; 0x2c
   21bc0:	add	r3, sp, #40	; 0x28
   21bc4:	mov	r2, r5
   21bc8:	add	r1, sp, #32
   21bcc:	mov	r0, r4
   21bd0:	bl	1b984 <__assert_fail@plt+0x9fe4>
   21bd4:	cmn	r0, #2
   21bd8:	ldrbeq	r3, [sp, #32]
   21bdc:	strbeq	r5, [r8, r3]
   21be0:	ldrb	r3, [sp, #32]
   21be4:	add	r3, r3, #1
   21be8:	uxtb	r3, r3
   21bec:	strb	r3, [sp, #32]
   21bf0:	cmp	r3, #0
   21bf4:	bne	21bb8 <__assert_fail@plt+0x10218>
   21bf8:	ldr	r3, [sp, #8]
   21bfc:	add	r3, r3, #1
   21c00:	mov	r2, r3
   21c04:	str	r3, [sp, #8]
   21c08:	ldr	r3, [sp, #16]
   21c0c:	ldr	r3, [r3, #8]
   21c10:	cmp	r3, r2
   21c14:	ble	21c84 <__assert_fail@plt+0x102e4>
   21c18:	ldr	r3, [sp, #16]
   21c1c:	ldr	r3, [r3, #12]
   21c20:	ldr	r2, [sp, #8]
   21c24:	ldr	r4, [r3, r2, lsl #2]
   21c28:	lsl	r3, r4, #3
   21c2c:	str	r3, [sp, #12]
   21c30:	ldr	r2, [sp, #4]
   21c34:	ldr	r2, [r2]
   21c38:	add	r3, r2, r3
   21c3c:	ldrb	r3, [r3, #4]
   21c40:	mov	r5, r3
   21c44:	cmp	r3, #1
   21c48:	beq	21968 <__assert_fail@plt+0xffc8>
   21c4c:	cmp	r3, #3
   21c50:	beq	21ab4 <__assert_fail@plt+0x10114>
   21c54:	cmp	r3, #6
   21c58:	beq	21b50 <__assert_fail@plt+0x101b0>
   21c5c:	and	r2, r3, #253	; 0xfd
   21c60:	cmp	r3, #2
   21c64:	cmpne	r2, #5
   21c68:	bne	21bf8 <__assert_fail@plt+0x10258>
   21c6c:	mov	r2, #256	; 0x100
   21c70:	mov	r1, #1
   21c74:	mov	r0, r8
   21c78:	bl	11814 <memset@plt>
   21c7c:	cmp	r5, #2
   21c80:	beq	21d50 <__assert_fail@plt+0x103b0>
   21c84:	add	sp, sp, #300	; 0x12c
   21c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c8c:	mov	r3, #1
   21c90:	strb	r3, [r8, r6]
   21c94:	ldr	r3, [sl, #12]
   21c98:	tst	r3, #4194304	; 0x400000
   21c9c:	beq	21cdc <__assert_fail@plt+0x1033c>
   21ca0:	ldr	r3, [sp, #4]
   21ca4:	ldr	r3, [r3, #92]	; 0x5c
   21ca8:	cmp	r3, #1
   21cac:	ble	21cdc <__assert_fail@plt+0x1033c>
   21cb0:	ldr	r3, [r5]
   21cb4:	ldr	r0, [r3, r7]
   21cb8:	bl	115f8 <towlower@plt>
   21cbc:	add	r2, sp, #32
   21cc0:	mov	r1, r0
   21cc4:	add	r0, sp, #40	; 0x28
   21cc8:	bl	1152c <wcrtomb@plt>
   21ccc:	cmn	r0, #1
   21cd0:	ldrbne	r3, [sp, #40]	; 0x28
   21cd4:	movne	r2, #1
   21cd8:	strbne	r2, [r8, r3]
   21cdc:	add	r4, r4, #1
   21ce0:	ldr	r3, [r5, #20]
   21ce4:	cmp	r3, r4
   21ce8:	ble	21d48 <__assert_fail@plt+0x103a8>
   21cec:	str	r9, [sp, #32]
   21cf0:	str	r9, [sp, #36]	; 0x24
   21cf4:	lsl	r7, r4, #2
   21cf8:	ldr	r3, [r5]
   21cfc:	add	r2, sp, #32
   21d00:	ldr	r1, [r3, r4, lsl #2]
   21d04:	add	r0, sp, #40	; 0x28
   21d08:	bl	1152c <wcrtomb@plt>
   21d0c:	cmn	r0, #1
   21d10:	beq	21c94 <__assert_fail@plt+0x102f4>
   21d14:	ldrb	r6, [sp, #40]	; 0x28
   21d18:	mov	r3, #1
   21d1c:	strb	r3, [r8, r6]
   21d20:	ldr	r3, [sp]
   21d24:	cmp	r3, #0
   21d28:	beq	21c94 <__assert_fail@plt+0x102f4>
   21d2c:	add	r3, r6, #128	; 0x80
   21d30:	cmp	r3, fp
   21d34:	bhi	21c8c <__assert_fail@plt+0x102ec>
   21d38:	bl	11748 <__ctype_tolower_loc@plt>
   21d3c:	ldr	r3, [r0]
   21d40:	ldr	r6, [r3, r6, lsl #2]
   21d44:	b	21c8c <__assert_fail@plt+0x102ec>
   21d48:	ldr	sl, [sp]
   21d4c:	b	21bf8 <__assert_fail@plt+0x10258>
   21d50:	ldr	r2, [sp, #20]
   21d54:	ldrb	r3, [r2, #28]
   21d58:	orr	r3, r3, #1
   21d5c:	strb	r3, [r2, #28]
   21d60:	b	21c84 <__assert_fail@plt+0x102e4>
   21d64:	andeq	r0, r0, pc, ror r1
   21d68:	eoreq	r0, r0, r1
   21d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d70:	sub	sp, sp, #36	; 0x24
   21d74:	mov	r4, r0
   21d78:	mov	r6, r1
   21d7c:	mov	r7, r2
   21d80:	ldr	r5, [r0, #24]
   21d84:	cmp	r5, r1
   21d88:	suble	r5, r1, r5
   21d8c:	ble	21df0 <__assert_fail@plt+0x10450>
   21d90:	ldr	r3, [r0, #80]	; 0x50
   21d94:	cmp	r3, #1
   21d98:	movgt	r3, #0
   21d9c:	strgt	r3, [r0, #16]
   21da0:	strgt	r3, [r0, #20]
   21da4:	ldr	r3, [r0, #44]	; 0x2c
   21da8:	str	r3, [r0, #48]	; 0x30
   21dac:	ldr	r3, [r0, #52]	; 0x34
   21db0:	str	r3, [r0, #56]	; 0x38
   21db4:	mov	r3, #0
   21db8:	str	r3, [r0, #28]
   21dbc:	str	r3, [r0, #24]
   21dc0:	str	r3, [r0, #32]
   21dc4:	strb	r3, [r0, #76]	; 0x4c
   21dc8:	and	r3, r2, #1
   21dcc:	cmp	r3, #0
   21dd0:	movne	r3, #4
   21dd4:	moveq	r3, #6
   21dd8:	str	r3, [r0, #60]	; 0x3c
   21ddc:	ldrb	r3, [r0, #75]	; 0x4b
   21de0:	cmp	r3, #0
   21de4:	ldreq	r3, [r0]
   21de8:	streq	r3, [r0, #4]
   21dec:	mov	r5, r1
   21df0:	cmp	r5, #0
   21df4:	beq	21e80 <__assert_fail@plt+0x104e0>
   21df8:	ldr	r3, [r4, #32]
   21dfc:	cmp	r5, r3
   21e00:	bge	220d0 <__assert_fail@plt+0x10730>
   21e04:	ldrb	r3, [r4, #76]	; 0x4c
   21e08:	cmp	r3, #0
   21e0c:	bne	21ec8 <__assert_fail@plt+0x10528>
   21e10:	mov	r2, r7
   21e14:	sub	r1, r5, #1
   21e18:	mov	r0, r4
   21e1c:	bl	1fa38 <__assert_fail@plt+0xe098>
   21e20:	str	r0, [r4, #60]	; 0x3c
   21e24:	ldr	r3, [r4, #80]	; 0x50
   21e28:	cmp	r3, #1
   21e2c:	ble	21e48 <__assert_fail@plt+0x104a8>
   21e30:	ldr	r0, [r4, #8]
   21e34:	ldr	r2, [r4, #28]
   21e38:	sub	r2, r2, r5
   21e3c:	lsl	r2, r2, #2
   21e40:	add	r1, r0, r5, lsl #2
   21e44:	bl	1158c <memmove@plt>
   21e48:	ldrb	r3, [r4, #75]	; 0x4b
   21e4c:	cmp	r3, #0
   21e50:	bne	220b8 <__assert_fail@plt+0x10718>
   21e54:	ldr	r3, [r4, #28]
   21e58:	sub	r3, r3, r5
   21e5c:	str	r3, [r4, #28]
   21e60:	ldr	r3, [r4, #32]
   21e64:	sub	r3, r3, r5
   21e68:	str	r3, [r4, #32]
   21e6c:	ldrb	r3, [r4, #75]	; 0x4b
   21e70:	cmp	r3, #0
   21e74:	ldreq	r3, [r4, #4]
   21e78:	addeq	r3, r3, r5
   21e7c:	streq	r3, [r4, #4]
   21e80:	str	r6, [r4, #24]
   21e84:	ldr	r3, [r4, #48]	; 0x30
   21e88:	sub	r3, r3, r5
   21e8c:	str	r3, [r4, #48]	; 0x30
   21e90:	ldr	r2, [r4, #56]	; 0x38
   21e94:	sub	r5, r2, r5
   21e98:	str	r5, [r4, #56]	; 0x38
   21e9c:	ldr	r2, [r4, #80]	; 0x50
   21ea0:	cmp	r2, #1
   21ea4:	ble	22434 <__assert_fail@plt+0x10a94>
   21ea8:	ldrb	r3, [r4, #72]	; 0x48
   21eac:	cmp	r3, #0
   21eb0:	beq	2241c <__assert_fail@plt+0x10a7c>
   21eb4:	mov	r0, r4
   21eb8:	bl	1ce4c <__assert_fail@plt+0xb4ac>
   21ebc:	cmp	r0, #0
   21ec0:	beq	22424 <__assert_fail@plt+0x10a84>
   21ec4:	b	2242c <__assert_fail@plt+0x10a8c>
   21ec8:	ldr	sl, [r4, #28]
   21ecc:	ldr	r9, [r4, #12]
   21ed0:	mov	r2, sl
   21ed4:	mov	r1, #0
   21ed8:	b	21ee8 <__assert_fail@plt+0x10548>
   21edc:	mov	r2, r8
   21ee0:	cmp	r1, r2
   21ee4:	bge	21f0c <__assert_fail@plt+0x1056c>
   21ee8:	add	r3, r1, r2
   21eec:	add	r3, r3, r3, lsr #31
   21ef0:	asr	r8, r3, #1
   21ef4:	ldr	r3, [r9, r8, lsl #2]
   21ef8:	cmp	r5, r3
   21efc:	blt	21edc <__assert_fail@plt+0x1053c>
   21f00:	ble	21f14 <__assert_fail@plt+0x10574>
   21f04:	add	r1, r8, #1
   21f08:	b	21ee0 <__assert_fail@plt+0x10540>
   21f0c:	cmp	r5, r3
   21f10:	addgt	r8, r8, #1
   21f14:	mov	r2, r7
   21f18:	sub	r1, r8, #1
   21f1c:	mov	r0, r4
   21f20:	bl	1fa38 <__assert_fail@plt+0xe098>
   21f24:	str	r0, [r4, #60]	; 0x3c
   21f28:	cmp	r5, sl
   21f2c:	movge	r3, #0
   21f30:	movlt	r3, #1
   21f34:	cmp	r5, r8
   21f38:	movne	r3, #0
   21f3c:	cmp	r3, #0
   21f40:	bne	22020 <__assert_fail@plt+0x10680>
   21f44:	ldr	r3, [r4, #44]	; 0x2c
   21f48:	sub	r3, r3, r6
   21f4c:	add	r3, r3, r5
   21f50:	str	r3, [r4, #48]	; 0x30
   21f54:	ldr	r3, [r4, #52]	; 0x34
   21f58:	sub	r3, r3, r6
   21f5c:	add	r3, r3, r5
   21f60:	str	r3, [r4, #56]	; 0x38
   21f64:	mov	r3, #0
   21f68:	strb	r3, [r4, #76]	; 0x4c
   21f6c:	cmp	r8, r3
   21f70:	ble	21f9c <__assert_fail@plt+0x105fc>
   21f74:	sub	r2, r8, #-1073741823	; 0xc0000001
   21f78:	add	r3, r9, r2, lsl #2
   21f7c:	ldr	r2, [r9, r2, lsl #2]
   21f80:	cmp	r5, r2
   21f84:	bne	21f9c <__assert_fail@plt+0x105fc>
   21f88:	subs	r8, r8, #1
   21f8c:	beq	21f9c <__assert_fail@plt+0x105fc>
   21f90:	ldr	r2, [r3, #-4]!
   21f94:	cmp	r5, r2
   21f98:	beq	21f88 <__assert_fail@plt+0x105e8>
   21f9c:	cmp	sl, r8
   21fa0:	ble	220a4 <__assert_fail@plt+0x10704>
   21fa4:	ldr	r2, [r4, #8]
   21fa8:	add	r3, r2, r8, lsl #2
   21fac:	ldr	r2, [r2, r8, lsl #2]
   21fb0:	cmn	r2, #1
   21fb4:	bne	21fd0 <__assert_fail@plt+0x10630>
   21fb8:	add	r8, r8, #1
   21fbc:	cmp	sl, r8
   21fc0:	beq	220ac <__assert_fail@plt+0x1070c>
   21fc4:	ldr	r2, [r3, #4]!
   21fc8:	cmn	r2, #1
   21fcc:	beq	21fb8 <__assert_fail@plt+0x10618>
   21fd0:	ldr	r2, [r9, r8, lsl #2]
   21fd4:	sub	r2, r2, r5
   21fd8:	str	r2, [r4, #28]
   21fdc:	cmp	r2, #0
   21fe0:	beq	22014 <__assert_fail@plt+0x10674>
   21fe4:	ble	22008 <__assert_fail@plt+0x10668>
   21fe8:	mov	r3, #0
   21fec:	mvn	r1, #0
   21ff0:	ldr	r2, [r4, #8]
   21ff4:	str	r1, [r2, r3, lsl #2]
   21ff8:	add	r3, r3, #1
   21ffc:	ldr	r2, [r4, #28]
   22000:	cmp	r2, r3
   22004:	bgt	21ff0 <__assert_fail@plt+0x10650>
   22008:	mov	r1, #255	; 0xff
   2200c:	ldr	r0, [r4, #4]
   22010:	bl	11814 <memset@plt>
   22014:	ldr	r3, [r4, #28]
   22018:	str	r3, [r4, #32]
   2201c:	b	21e6c <__assert_fail@plt+0x104cc>
   22020:	ldr	r3, [r9, r8, lsl #2]
   22024:	cmp	r5, r3
   22028:	bne	21f44 <__assert_fail@plt+0x105a4>
   2202c:	ldr	r0, [r4, #8]
   22030:	lsl	r7, r5, #2
   22034:	sub	r2, sl, r5
   22038:	lsl	r2, r2, #2
   2203c:	add	r1, r0, r7
   22040:	bl	1158c <memmove@plt>
   22044:	ldr	r0, [r4, #4]
   22048:	ldr	r2, [r4, #28]
   2204c:	sub	r2, r2, r5
   22050:	add	r1, r0, r5
   22054:	bl	1158c <memmove@plt>
   22058:	ldr	r3, [r4, #28]
   2205c:	sub	r3, r3, r5
   22060:	str	r3, [r4, #28]
   22064:	ldr	r2, [r4, #32]
   22068:	sub	r2, r2, r5
   2206c:	str	r2, [r4, #32]
   22070:	cmp	r3, #0
   22074:	ble	21e6c <__assert_fail@plt+0x104cc>
   22078:	mov	r3, #0
   2207c:	ldr	r1, [r4, #12]
   22080:	ldr	r2, [r1, r7]
   22084:	sub	r2, r2, r5
   22088:	str	r2, [r1, r3, lsl #2]
   2208c:	add	r3, r3, #1
   22090:	add	r7, r7, #4
   22094:	ldr	r2, [r4, #28]
   22098:	cmp	r2, r3
   2209c:	bgt	2207c <__assert_fail@plt+0x106dc>
   220a0:	b	21e6c <__assert_fail@plt+0x104cc>
   220a4:	cmp	sl, r8
   220a8:	bne	21fd0 <__assert_fail@plt+0x10630>
   220ac:	mov	r3, #0
   220b0:	str	r3, [r4, #28]
   220b4:	b	22014 <__assert_fail@plt+0x10674>
   220b8:	ldr	r0, [r4, #4]
   220bc:	ldr	r2, [r4, #28]
   220c0:	sub	r2, r2, r5
   220c4:	add	r1, r0, r5
   220c8:	bl	1158c <memmove@plt>
   220cc:	b	21e54 <__assert_fail@plt+0x104b4>
   220d0:	ldr	fp, [r4, #28]
   220d4:	ldrb	r3, [r4, #76]	; 0x4c
   220d8:	cmp	r3, #0
   220dc:	bne	221e4 <__assert_fail@plt+0x10844>
   220e0:	mov	r3, #0
   220e4:	str	r3, [r4, #28]
   220e8:	ldr	r3, [r4, #80]	; 0x50
   220ec:	cmp	r3, #1
   220f0:	ble	223ac <__assert_fail@plt+0x10a0c>
   220f4:	ldrb	r2, [r4, #73]	; 0x49
   220f8:	cmp	r2, #0
   220fc:	beq	221c0 <__assert_fail@plt+0x10820>
   22100:	ldr	r0, [r4]
   22104:	ldr	r8, [r4, #24]
   22108:	add	r8, r0, r8
   2210c:	sub	r3, r5, r3
   22110:	add	r3, r8, r3
   22114:	cmp	r0, r3
   22118:	movcc	r0, r3
   2211c:	mov	r9, r5
   22120:	sub	r3, r5, #1
   22124:	add	r1, r8, r3
   22128:	cmp	r1, r0
   2212c:	bcc	221c0 <__assert_fail@plt+0x10820>
   22130:	ldrb	r3, [r8, r3]
   22134:	and	r3, r3, #192	; 0xc0
   22138:	cmp	r3, #128	; 0x80
   2213c:	subeq	r3, r1, #1
   22140:	subeq	r0, r0, #1
   22144:	bne	22168 <__assert_fail@plt+0x107c8>
   22148:	mov	r1, r3
   2214c:	cmp	r3, r0
   22150:	beq	221c0 <__assert_fail@plt+0x10820>
   22154:	sub	r3, r3, #1
   22158:	ldrb	r2, [r1]
   2215c:	and	r2, r2, #192	; 0xc0
   22160:	cmp	r2, #128	; 0x80
   22164:	beq	22148 <__assert_fail@plt+0x107a8>
   22168:	mov	sl, r1
   2216c:	ldr	r2, [r4, #48]	; 0x30
   22170:	add	r2, r8, r2
   22174:	sub	r2, r2, r1
   22178:	ldr	r3, [r4, #64]	; 0x40
   2217c:	cmp	r3, #0
   22180:	bne	22210 <__assert_fail@plt+0x10870>
   22184:	mov	r3, #0
   22188:	str	r3, [sp, #24]
   2218c:	str	r3, [sp, #28]
   22190:	add	r3, sp, #24
   22194:	add	r0, sp, #12
   22198:	bl	1b984 <__assert_fail@plt+0x9fe4>
   2219c:	add	r8, r8, r9
   221a0:	sub	sl, r8, sl
   221a4:	cmp	r0, sl
   221a8:	movcc	r3, #0
   221ac:	movcs	r3, #1
   221b0:	cmn	r0, #3
   221b4:	movhi	r3, #0
   221b8:	cmp	r3, #0
   221bc:	bne	22254 <__assert_fail@plt+0x108b4>
   221c0:	ldr	ip, [r4, #24]
   221c4:	ldr	r3, [r4, #32]
   221c8:	add	ip, ip, r3
   221cc:	cmp	r6, ip
   221d0:	ble	22474 <__assert_fail@plt+0x10ad4>
   221d4:	add	sl, sp, #24
   221d8:	add	r9, r4, #16
   221dc:	str	r5, [sp, #4]
   221e0:	b	22284 <__assert_fail@plt+0x108e4>
   221e4:	ldr	r3, [r4, #44]	; 0x2c
   221e8:	sub	r3, r3, r6
   221ec:	add	r3, r3, r5
   221f0:	str	r3, [r4, #48]	; 0x30
   221f4:	ldr	r3, [r4, #52]	; 0x34
   221f8:	sub	r3, r3, r6
   221fc:	add	r3, r3, r5
   22200:	str	r3, [r4, #56]	; 0x38
   22204:	mov	r3, #0
   22208:	strb	r3, [r4, #76]	; 0x4c
   2220c:	b	220e0 <__assert_fail@plt+0x10740>
   22210:	cmp	r2, #6
   22214:	movlt	ip, r2
   22218:	movge	ip, #6
   2221c:	cmp	ip, #1
   22220:	addmi	r1, sp, #16
   22224:	bmi	22184 <__assert_fail@plt+0x107e4>
   22228:	add	r0, r1, ip
   2222c:	add	lr, sp, #32
   22230:	add	ip, lr, ip
   22234:	sub	ip, ip, #17
   22238:	ldrb	lr, [r0, #-1]!
   2223c:	ldrb	lr, [r3, lr]
   22240:	strb	lr, [ip], #-1
   22244:	cmp	r0, r1
   22248:	bne	22238 <__assert_fail@plt+0x10898>
   2224c:	add	r1, sp, #16
   22250:	b	22184 <__assert_fail@plt+0x107e4>
   22254:	mov	r3, #0
   22258:	str	r3, [r4, #16]
   2225c:	str	r3, [r4, #20]
   22260:	sub	sl, r0, sl
   22264:	str	sl, [r4, #28]
   22268:	ldr	r8, [sp, #12]
   2226c:	cmn	r8, #1
   22270:	bne	222fc <__assert_fail@plt+0x1095c>
   22274:	b	221c0 <__assert_fail@plt+0x10820>
   22278:	add	ip, r8, r0
   2227c:	cmp	r6, ip
   22280:	ble	222e4 <__assert_fail@plt+0x10944>
   22284:	ldr	r5, [r4, #44]	; 0x2c
   22288:	sub	r5, r5, ip
   2228c:	ldm	r9, {r0, r1}
   22290:	stm	sl, {r0, r1}
   22294:	mov	r8, ip
   22298:	ldr	r1, [r4]
   2229c:	mov	r3, r9
   222a0:	mov	r2, r5
   222a4:	add	r1, r1, ip
   222a8:	add	r0, sp, #16
   222ac:	bl	1b984 <__assert_fail@plt+0x9fe4>
   222b0:	sub	r3, r0, #1
   222b4:	cmn	r3, #4
   222b8:	ldrls	r3, [sp, #16]
   222bc:	bls	22278 <__assert_fail@plt+0x108d8>
   222c0:	cmp	r5, #0
   222c4:	cmpne	r0, #0
   222c8:	ldrne	r3, [r4]
   222cc:	ldrbne	r3, [r3, r8]
   222d0:	moveq	r3, #0
   222d4:	ldm	sl, {r0, r1}
   222d8:	stm	r9, {r0, r1}
   222dc:	mov	r0, #1
   222e0:	b	22278 <__assert_fail@plt+0x108d8>
   222e4:	ldr	r5, [sp, #4]
   222e8:	mov	r8, r3
   222ec:	sub	ip, ip, r6
   222f0:	str	ip, [r4, #28]
   222f4:	cmn	r3, #1
   222f8:	beq	2247c <__assert_fail@plt+0x10adc>
   222fc:	ldrb	r3, [r4, #78]	; 0x4e
   22300:	cmp	r3, #0
   22304:	bne	22330 <__assert_fail@plt+0x10990>
   22308:	cmp	r8, #10
   2230c:	movne	r3, #0
   22310:	beq	22358 <__assert_fail@plt+0x109b8>
   22314:	str	r3, [r4, #60]	; 0x3c
   22318:	ldr	r2, [r4, #28]
   2231c:	cmp	r2, #0
   22320:	bne	2236c <__assert_fail@plt+0x109cc>
   22324:	ldr	r3, [r4, #28]
   22328:	str	r3, [r4, #32]
   2232c:	b	21e6c <__assert_fail@plt+0x104cc>
   22330:	mov	r0, r8
   22334:	bl	117e4 <iswalnum@plt>
   22338:	clz	r0, r0
   2233c:	lsr	r0, r0, #5
   22340:	cmp	r8, #95	; 0x5f
   22344:	moveq	r0, #0
   22348:	cmp	r0, #0
   2234c:	moveq	r3, #1
   22350:	bne	22308 <__assert_fail@plt+0x10968>
   22354:	b	22314 <__assert_fail@plt+0x10974>
   22358:	ldrb	r3, [r4, #77]	; 0x4d
   2235c:	cmp	r3, #0
   22360:	movne	r3, #2
   22364:	moveq	r3, #0
   22368:	b	22314 <__assert_fail@plt+0x10974>
   2236c:	ble	22390 <__assert_fail@plt+0x109f0>
   22370:	mov	r3, #0
   22374:	mvn	r1, #0
   22378:	ldr	r2, [r4, #8]
   2237c:	str	r1, [r2, r3, lsl #2]
   22380:	add	r3, r3, #1
   22384:	ldr	r2, [r4, #28]
   22388:	cmp	r2, r3
   2238c:	bgt	22378 <__assert_fail@plt+0x109d8>
   22390:	ldrb	r3, [r4, #75]	; 0x4b
   22394:	cmp	r3, #0
   22398:	beq	22324 <__assert_fail@plt+0x10984>
   2239c:	mov	r1, #255	; 0xff
   223a0:	ldr	r0, [r4, #4]
   223a4:	bl	11814 <memset@plt>
   223a8:	b	22324 <__assert_fail@plt+0x10984>
   223ac:	ldr	r3, [r4]
   223b0:	ldr	r2, [r4, #24]
   223b4:	add	r3, r3, r5
   223b8:	add	r3, r3, r2
   223bc:	ldrb	r3, [r3, #-1]
   223c0:	mov	r2, #0
   223c4:	str	r2, [r4, #32]
   223c8:	ldr	r2, [r4, #64]	; 0x40
   223cc:	cmp	r2, #0
   223d0:	ldrbne	r3, [r2, r3]
   223d4:	lsr	r1, r3, #5
   223d8:	ldr	r0, [r4, #68]	; 0x44
   223dc:	and	r2, r3, #31
   223e0:	ldr	r1, [r0, r1, lsl #2]
   223e4:	lsr	r2, r1, r2
   223e8:	tst	r2, #1
   223ec:	movne	r3, #1
   223f0:	bne	22400 <__assert_fail@plt+0x10a60>
   223f4:	cmp	r3, #10
   223f8:	movne	r3, #0
   223fc:	beq	22408 <__assert_fail@plt+0x10a68>
   22400:	str	r3, [r4, #60]	; 0x3c
   22404:	b	21e6c <__assert_fail@plt+0x104cc>
   22408:	ldrb	r3, [r4, #77]	; 0x4d
   2240c:	cmp	r3, #0
   22410:	movne	r3, #2
   22414:	moveq	r3, #0
   22418:	b	22400 <__assert_fail@plt+0x10a60>
   2241c:	mov	r0, r4
   22420:	bl	1ccb0 <__assert_fail@plt+0xb310>
   22424:	mov	r0, #0
   22428:	str	r0, [r4, #40]	; 0x28
   2242c:	add	sp, sp, #36	; 0x24
   22430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22434:	ldrb	r2, [r4, #75]	; 0x4b
   22438:	cmp	r2, #0
   2243c:	streq	r3, [r4, #28]
   22440:	beq	22424 <__assert_fail@plt+0x10a84>
   22444:	ldrb	r3, [r4, #72]	; 0x48
   22448:	cmp	r3, #0
   2244c:	bne	22468 <__assert_fail@plt+0x10ac8>
   22450:	ldr	r3, [r4, #64]	; 0x40
   22454:	cmp	r3, #0
   22458:	beq	22424 <__assert_fail@plt+0x10a84>
   2245c:	mov	r0, r4
   22460:	bl	1bb08 <__assert_fail@plt+0xa168>
   22464:	b	22424 <__assert_fail@plt+0x10a84>
   22468:	mov	r0, r4
   2246c:	bl	1d7d4 <__assert_fail@plt+0xbe34>
   22470:	b	22424 <__assert_fail@plt+0x10a84>
   22474:	sub	ip, ip, r6
   22478:	str	ip, [r4, #28]
   2247c:	mov	r2, r7
   22480:	sub	r1, fp, #1
   22484:	mov	r0, r4
   22488:	bl	1fa38 <__assert_fail@plt+0xe098>
   2248c:	str	r0, [r4, #60]	; 0x3c
   22490:	b	22318 <__assert_fail@plt+0x10978>
   22494:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22498:	ldr	r9, [r0]
   2249c:	add	ip, r9, r1, lsl #3
   224a0:	ldrb	r8, [ip, #4]
   224a4:	cmp	r8, #7
   224a8:	beq	224fc <__assert_fail@plt+0x10b5c>
   224ac:	mov	r4, r3
   224b0:	mov	r5, r2
   224b4:	mov	r7, r1
   224b8:	mov	r6, r0
   224bc:	mov	r1, r3
   224c0:	mov	r0, r2
   224c4:	bl	1ba78 <__assert_fail@plt+0xa0d8>
   224c8:	mov	sl, r0
   224cc:	cmp	r8, #5
   224d0:	beq	22614 <__assert_fail@plt+0x10c74>
   224d4:	cmp	r8, #6
   224d8:	movne	r8, #0
   224dc:	moveq	r8, #1
   224e0:	cmp	r0, #1
   224e4:	movle	r8, #0
   224e8:	cmp	r8, #0
   224ec:	moveq	sl, #0
   224f0:	bne	2265c <__assert_fail@plt+0x10cbc>
   224f4:	mov	r0, sl
   224f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   224fc:	ldr	r0, [r2, #4]
   22500:	ldrb	r1, [r0, r3]
   22504:	cmp	r1, #193	; 0xc1
   22508:	movls	sl, #0
   2250c:	bls	224f4 <__assert_fail@plt+0x10b54>
   22510:	ldr	ip, [r2, #48]	; 0x30
   22514:	add	r2, r3, #2
   22518:	cmp	r2, ip
   2251c:	movgt	sl, #0
   22520:	bgt	224f4 <__assert_fail@plt+0x10b54>
   22524:	add	lr, r3, #1
   22528:	add	r2, r0, lr
   2252c:	ldrb	lr, [r0, lr]
   22530:	cmp	r1, #223	; 0xdf
   22534:	bhi	2254c <__assert_fail@plt+0x10bac>
   22538:	eor	lr, lr, #128	; 0x80
   2253c:	cmp	lr, #63	; 0x3f
   22540:	movls	sl, #2
   22544:	movhi	sl, #0
   22548:	b	224f4 <__assert_fail@plt+0x10b54>
   2254c:	cmp	r1, #239	; 0xef
   22550:	bhi	225b0 <__assert_fail@plt+0x10c10>
   22554:	cmp	lr, #159	; 0x9f
   22558:	cmpls	r1, #224	; 0xe0
   2255c:	movne	sl, #3
   22560:	beq	22794 <__assert_fail@plt+0x10df4>
   22564:	add	r1, sl, r3
   22568:	cmp	ip, r1
   2256c:	blt	227a4 <__assert_fail@plt+0x10e04>
   22570:	add	r3, r0, r3
   22574:	ldrb	r3, [r3, #1]
   22578:	eor	r3, r3, #128	; 0x80
   2257c:	cmp	r3, #63	; 0x3f
   22580:	bhi	2279c <__assert_fail@plt+0x10dfc>
   22584:	mov	r1, r2
   22588:	mov	r2, #1
   2258c:	add	r2, r2, #1
   22590:	cmp	sl, r2
   22594:	ble	224f4 <__assert_fail@plt+0x10b54>
   22598:	ldrb	r3, [r1, #1]!
   2259c:	eor	r3, r3, #128	; 0x80
   225a0:	cmp	r3, #63	; 0x3f
   225a4:	bls	2258c <__assert_fail@plt+0x10bec>
   225a8:	mov	sl, #0
   225ac:	b	224f4 <__assert_fail@plt+0x10b54>
   225b0:	cmp	r1, #247	; 0xf7
   225b4:	bhi	225d0 <__assert_fail@plt+0x10c30>
   225b8:	cmp	lr, #143	; 0x8f
   225bc:	cmpls	r1, #240	; 0xf0
   225c0:	movne	sl, #4
   225c4:	bne	22564 <__assert_fail@plt+0x10bc4>
   225c8:	mov	sl, #0
   225cc:	b	224f4 <__assert_fail@plt+0x10b54>
   225d0:	cmp	r1, #251	; 0xfb
   225d4:	bhi	225f0 <__assert_fail@plt+0x10c50>
   225d8:	cmp	lr, #135	; 0x87
   225dc:	cmpls	r1, #248	; 0xf8
   225e0:	movne	sl, #5
   225e4:	bne	22564 <__assert_fail@plt+0x10bc4>
   225e8:	mov	sl, #0
   225ec:	b	224f4 <__assert_fail@plt+0x10b54>
   225f0:	cmp	r1, #253	; 0xfd
   225f4:	movhi	sl, #0
   225f8:	bhi	224f4 <__assert_fail@plt+0x10b54>
   225fc:	cmp	lr, #131	; 0x83
   22600:	cmpls	r1, #252	; 0xfc
   22604:	movne	sl, #6
   22608:	bne	22564 <__assert_fail@plt+0x10bc4>
   2260c:	mov	sl, #0
   22610:	b	224f4 <__assert_fail@plt+0x10b54>
   22614:	cmp	r0, #1
   22618:	movle	sl, #0
   2261c:	ble	224f4 <__assert_fail@plt+0x10b54>
   22620:	ldr	r3, [r6, #128]	; 0x80
   22624:	tst	r3, #64	; 0x40
   22628:	bne	22640 <__assert_fail@plt+0x10ca0>
   2262c:	ldr	r2, [r5, #4]
   22630:	ldrb	r2, [r2, r4]
   22634:	cmp	r2, #10
   22638:	moveq	sl, #0
   2263c:	beq	224f4 <__assert_fail@plt+0x10b54>
   22640:	tst	r3, #128	; 0x80
   22644:	beq	224f4 <__assert_fail@plt+0x10b54>
   22648:	ldr	r3, [r5, #4]
   2264c:	ldrb	r3, [r3, r4]
   22650:	cmp	r3, #0
   22654:	moveq	sl, #0
   22658:	b	224f4 <__assert_fail@plt+0x10b54>
   2265c:	ldr	r6, [r9, r7, lsl #3]
   22660:	ldr	r3, [r6, #32]
   22664:	cmp	r3, #0
   22668:	bne	226a8 <__assert_fail@plt+0x10d08>
   2266c:	ldr	r3, [r6, #36]	; 0x24
   22670:	cmp	r3, #0
   22674:	bne	226a8 <__assert_fail@plt+0x10d08>
   22678:	ldr	r3, [r6, #20]
   2267c:	cmp	r3, #0
   22680:	moveq	r4, #0
   22684:	beq	2274c <__assert_fail@plt+0x10dac>
   22688:	mov	r1, r4
   2268c:	mov	r0, r5
   22690:	bl	1baec <__assert_fail@plt+0xa14c>
   22694:	mov	r4, r0
   22698:	ldr	r0, [r6, #20]
   2269c:	cmp	r0, #0
   226a0:	bgt	226c4 <__assert_fail@plt+0x10d24>
   226a4:	b	2274c <__assert_fail@plt+0x10dac>
   226a8:	mov	r1, r4
   226ac:	mov	r0, r5
   226b0:	bl	1baec <__assert_fail@plt+0xa14c>
   226b4:	mov	r4, r0
   226b8:	ldr	r0, [r6, #20]
   226bc:	cmp	r0, #0
   226c0:	ble	22714 <__assert_fail@plt+0x10d74>
   226c4:	ldr	r2, [r6]
   226c8:	ldr	r3, [r2]
   226cc:	cmp	r4, r3
   226d0:	beq	226f0 <__assert_fail@plt+0x10d50>
   226d4:	mov	r3, #0
   226d8:	add	r3, r3, #1
   226dc:	cmp	r0, r3
   226e0:	beq	22714 <__assert_fail@plt+0x10d74>
   226e4:	ldr	r1, [r2, #4]!
   226e8:	cmp	r4, r1
   226ec:	bne	226d8 <__assert_fail@plt+0x10d38>
   226f0:	ldrb	r3, [r6, #16]
   226f4:	tst	r3, #1
   226f8:	beq	224f4 <__assert_fail@plt+0x10b54>
   226fc:	cmp	sl, #0
   22700:	movgt	sl, #0
   22704:	bgt	224f4 <__assert_fail@plt+0x10b54>
   22708:	cmp	sl, #1
   2270c:	movlt	sl, #1
   22710:	b	224f4 <__assert_fail@plt+0x10b54>
   22714:	ldr	r3, [r6, #36]	; 0x24
   22718:	cmp	r3, #0
   2271c:	ble	2274c <__assert_fail@plt+0x10dac>
   22720:	mov	r5, #0
   22724:	ldr	r3, [r6, #12]
   22728:	ldr	r1, [r3, r5, lsl #2]
   2272c:	mov	r0, r4
   22730:	bl	11538 <iswctype@plt>
   22734:	cmp	r0, #0
   22738:	bne	226f0 <__assert_fail@plt+0x10d50>
   2273c:	add	r5, r5, #1
   22740:	ldr	r3, [r6, #36]	; 0x24
   22744:	cmp	r3, r5
   22748:	bgt	22724 <__assert_fail@plt+0x10d84>
   2274c:	ldr	r0, [r6, #32]
   22750:	cmp	r0, #0
   22754:	ble	227ac <__assert_fail@plt+0x10e0c>
   22758:	ldr	r2, [r6, #4]
   2275c:	sub	r2, r2, #4
   22760:	mov	r3, #0
   22764:	b	22774 <__assert_fail@plt+0x10dd4>
   22768:	add	r3, r3, #1
   2276c:	cmp	r0, r3
   22770:	beq	227ac <__assert_fail@plt+0x10e0c>
   22774:	ldr	r1, [r2, #4]!
   22778:	cmp	r4, r1
   2277c:	bcc	22768 <__assert_fail@plt+0x10dc8>
   22780:	ldr	r1, [r6, #8]
   22784:	ldr	r1, [r1, r3, lsl #2]
   22788:	cmp	r4, r1
   2278c:	bhi	22768 <__assert_fail@plt+0x10dc8>
   22790:	b	226f0 <__assert_fail@plt+0x10d50>
   22794:	mov	sl, #0
   22798:	b	224f4 <__assert_fail@plt+0x10b54>
   2279c:	mov	sl, #0
   227a0:	b	224f4 <__assert_fail@plt+0x10b54>
   227a4:	mov	sl, #0
   227a8:	b	224f4 <__assert_fail@plt+0x10b54>
   227ac:	ldrb	r3, [r6, #16]
   227b0:	tst	r3, #1
   227b4:	bne	22708 <__assert_fail@plt+0x10d68>
   227b8:	mov	sl, #0
   227bc:	b	224f4 <__assert_fail@plt+0x10b54>
   227c0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227c4:	ldr	lr, [r2, #4]
   227c8:	cmp	lr, #0
   227cc:	moveq	r4, #0
   227d0:	streq	r4, [r0]
   227d4:	beq	229ac <__assert_fail@plt+0x1100c>
   227d8:	mov	r6, lr
   227dc:	cmp	lr, #0
   227e0:	ble	227fc <__assert_fail@plt+0x10e5c>
   227e4:	ldr	r3, [r2, #8]
   227e8:	add	lr, r3, lr, lsl #2
   227ec:	ldr	ip, [r3], #4
   227f0:	add	r6, r6, ip
   227f4:	cmp	r3, lr
   227f8:	bne	227ec <__assert_fail@plt+0x10e4c>
   227fc:	mov	sl, r2
   22800:	mov	r7, r1
   22804:	mov	r8, r0
   22808:	ldr	r3, [r1, #68]	; 0x44
   2280c:	and	r3, r3, r6
   22810:	add	r3, r3, r3, lsl #1
   22814:	lsl	r3, r3, #2
   22818:	ldr	r2, [r1, #32]
   2281c:	add	r1, r2, r3
   22820:	ldr	fp, [r2, r3]
   22824:	cmp	fp, #0
   22828:	ble	22870 <__assert_fail@plt+0x10ed0>
   2282c:	ldr	r9, [r1, #8]
   22830:	sub	r9, r9, #4
   22834:	mov	r5, #0
   22838:	b	22848 <__assert_fail@plt+0x10ea8>
   2283c:	add	r5, r5, #1
   22840:	cmp	r5, fp
   22844:	beq	22870 <__assert_fail@plt+0x10ed0>
   22848:	ldr	r4, [r9, #4]!
   2284c:	ldr	r3, [r4]
   22850:	cmp	r6, r3
   22854:	bne	2283c <__assert_fail@plt+0x10e9c>
   22858:	mov	r1, sl
   2285c:	add	r0, r4, #4
   22860:	bl	1bb5c <__assert_fail@plt+0xa1bc>
   22864:	cmp	r0, #0
   22868:	beq	2283c <__assert_fail@plt+0x10e9c>
   2286c:	b	229ac <__assert_fail@plt+0x1100c>
   22870:	mov	r1, #1
   22874:	mov	r0, #56	; 0x38
   22878:	bl	1b548 <__assert_fail@plt+0x9ba8>
   2287c:	subs	r4, r0, #0
   22880:	beq	228c8 <__assert_fail@plt+0x10f28>
   22884:	add	r5, r4, #4
   22888:	mov	r1, sl
   2288c:	mov	r0, r5
   22890:	bl	1d40c <__assert_fail@plt+0xba6c>
   22894:	cmp	r0, #0
   22898:	bne	228c0 <__assert_fail@plt+0x10f20>
   2289c:	str	r5, [r4, #40]	; 0x28
   228a0:	ldr	lr, [sl, #4]
   228a4:	cmp	lr, #0
   228a8:	ble	22994 <__assert_fail@plt+0x10ff4>
   228ac:	ldr	r5, [r7]
   228b0:	ldr	ip, [sl, #8]
   228b4:	add	lr, ip, lr, lsl #2
   228b8:	ldr	r9, [pc, #256]	; 229c0 <__assert_fail@plt+0x11020>
   228bc:	b	2292c <__assert_fail@plt+0x10f8c>
   228c0:	mov	r0, r4
   228c4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   228c8:	mov	r3, #12
   228cc:	str	r3, [r8]
   228d0:	mov	r4, #0
   228d4:	b	229ac <__assert_fail@plt+0x1100c>
   228d8:	ldr	r3, [r2, #4]
   228dc:	tst	r3, r9
   228e0:	beq	22924 <__assert_fail@plt+0x10f84>
   228e4:	ldrb	r0, [r2, #6]
   228e8:	ldrb	r3, [r4, #52]	; 0x34
   228ec:	lsr	r1, r3, #5
   228f0:	orr	r1, r1, r0, lsr #4
   228f4:	and	r1, r1, #1
   228f8:	bic	r3, r3, #32
   228fc:	orr	r3, r3, r1, lsl #5
   22900:	strb	r3, [r4, #52]	; 0x34
   22904:	b	22984 <__assert_fail@plt+0x10fe4>
   22908:	ldrb	r3, [r4, #52]	; 0x34
   2290c:	orr	r3, r3, #64	; 0x40
   22910:	strb	r3, [r4, #52]	; 0x34
   22914:	b	22924 <__assert_fail@plt+0x10f84>
   22918:	ldrb	r3, [r4, #52]	; 0x34
   2291c:	orr	r3, r3, #128	; 0x80
   22920:	strb	r3, [r4, #52]	; 0x34
   22924:	cmp	ip, lr
   22928:	beq	22994 <__assert_fail@plt+0x10ff4>
   2292c:	ldr	r2, [ip], #4
   22930:	add	r2, r5, r2, lsl #3
   22934:	ldrb	r0, [r2, #4]
   22938:	cmp	r0, #1
   2293c:	beq	228d8 <__assert_fail@plt+0x10f38>
   22940:	ldrb	r1, [r4, #52]	; 0x34
   22944:	ldrb	r3, [r2, #6]
   22948:	lsr	r3, r3, #4
   2294c:	orr	r3, r3, r1, lsr #5
   22950:	and	r3, r3, #1
   22954:	bic	r1, r1, #32
   22958:	orr	r3, r1, r3, lsl #5
   2295c:	strb	r3, [r4, #52]	; 0x34
   22960:	cmp	r0, #2
   22964:	uxtbeq	r3, r3
   22968:	orreq	r3, r3, #16
   2296c:	strbeq	r3, [r4, #52]	; 0x34
   22970:	beq	22924 <__assert_fail@plt+0x10f84>
   22974:	cmp	r0, #4
   22978:	beq	22908 <__assert_fail@plt+0x10f68>
   2297c:	cmp	r0, #12
   22980:	beq	22918 <__assert_fail@plt+0x10f78>
   22984:	ldr	r3, [r2, #4]
   22988:	tst	r3, r9
   2298c:	beq	22924 <__assert_fail@plt+0x10f84>
   22990:	b	22918 <__assert_fail@plt+0x10f78>
   22994:	mov	r2, r6
   22998:	mov	r1, r4
   2299c:	mov	r0, r7
   229a0:	bl	1cbb0 <__assert_fail@plt+0xb210>
   229a4:	cmp	r0, #0
   229a8:	bne	229b4 <__assert_fail@plt+0x11014>
   229ac:	mov	r0, r4
   229b0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   229b4:	mov	r0, r4
   229b8:	bl	1e768 <__assert_fail@plt+0xcdc8>
   229bc:	b	228c8 <__assert_fail@plt+0x10f28>
   229c0:	andeq	pc, r3, r0, lsl #30
   229c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   229c8:	sub	sp, sp, #20
   229cc:	subs	r8, r3, #0
   229d0:	ble	22a70 <__assert_fail@plt+0x110d0>
   229d4:	mov	r9, r0
   229d8:	mov	r4, r1
   229dc:	mov	r5, r2
   229e0:	mov	r6, #0
   229e4:	b	22a04 <__assert_fail@plt+0x11064>
   229e8:	ldr	r3, [r5]
   229ec:	str	r3, [r4]
   229f0:	add	r6, r6, #1
   229f4:	add	r4, r4, #4
   229f8:	add	r5, r5, #4
   229fc:	cmp	r8, r6
   22a00:	beq	22a68 <__assert_fail@plt+0x110c8>
   22a04:	ldr	r1, [r4]
   22a08:	cmp	r1, #0
   22a0c:	beq	229e8 <__assert_fail@plt+0x11048>
   22a10:	ldr	r2, [r5]
   22a14:	cmp	r2, #0
   22a18:	beq	229f0 <__assert_fail@plt+0x11050>
   22a1c:	add	r2, r2, #4
   22a20:	add	r1, r1, #4
   22a24:	mov	r0, sp
   22a28:	bl	1d488 <__assert_fail@plt+0xbae8>
   22a2c:	str	r0, [sp, #12]
   22a30:	cmp	r0, #0
   22a34:	bne	22a60 <__assert_fail@plt+0x110c0>
   22a38:	mov	r2, sp
   22a3c:	mov	r1, r9
   22a40:	add	r0, sp, #12
   22a44:	bl	227c0 <__assert_fail@plt+0x10e20>
   22a48:	str	r0, [r4]
   22a4c:	ldr	r0, [sp, #8]
   22a50:	bl	1b854 <__assert_fail@plt+0x9eb4>
   22a54:	ldr	r0, [sp, #12]
   22a58:	cmp	r0, #0
   22a5c:	beq	229f0 <__assert_fail@plt+0x11050>
   22a60:	add	sp, sp, #20
   22a64:	pop	{r4, r5, r6, r7, r8, r9, pc}
   22a68:	mov	r0, #0
   22a6c:	b	22a60 <__assert_fail@plt+0x110c0>
   22a70:	mov	r0, #0
   22a74:	b	22a60 <__assert_fail@plt+0x110c0>
   22a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a7c:	sub	sp, sp, #28
   22a80:	mov	sl, r0
   22a84:	mov	r7, r1
   22a88:	mov	r8, r2
   22a8c:	str	r3, [sp, #4]
   22a90:	mov	r1, r2
   22a94:	bl	1c1f4 <__assert_fail@plt+0xa854>
   22a98:	cmn	r0, #1
   22a9c:	moveq	r0, #0
   22aa0:	beq	22c78 <__assert_fail@plt+0x112d8>
   22aa4:	ldr	fp, [sl, #84]	; 0x54
   22aa8:	add	r0, r0, r0, lsl #1
   22aac:	lsl	r0, r0, #3
   22ab0:	add	r3, r0, #24
   22ab4:	str	r3, [sp]
   22ab8:	b	22c18 <__assert_fail@plt+0x11278>
   22abc:	ldr	r3, [fp, #20]
   22ac0:	add	r6, r6, r6, lsl #1
   22ac4:	add	r6, r3, r6, lsl #2
   22ac8:	ldr	r3, [r6, #8]
   22acc:	ldr	r5, [r3]
   22ad0:	mov	r1, r5
   22ad4:	mov	r0, r7
   22ad8:	bl	1bbd0 <__assert_fail@plt+0xa230>
   22adc:	cmp	r0, #0
   22ae0:	beq	22bc8 <__assert_fail@plt+0x11228>
   22ae4:	add	r4, r4, #24
   22ae8:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   22aec:	cmp	r3, #0
   22af0:	beq	22c74 <__assert_fail@plt+0x112d4>
   22af4:	ldr	r6, [r4, #-24]	; 0xffffffe8
   22af8:	mov	r1, r6
   22afc:	mov	r0, r7
   22b00:	bl	1bbd0 <__assert_fail@plt+0xa230>
   22b04:	cmp	r0, #0
   22b08:	beq	22ae4 <__assert_fail@plt+0x11144>
   22b0c:	ldr	r5, [r4, #-12]
   22b10:	add	r5, r8, r5
   22b14:	ldr	r3, [r4, #-16]
   22b18:	sub	r5, r5, r3
   22b1c:	cmp	r8, r5
   22b20:	beq	22abc <__assert_fail@plt+0x1111c>
   22b24:	ldr	r3, [fp, #12]
   22b28:	ldr	r9, [r3, r6, lsl #2]
   22b2c:	ldr	r3, [sl, #100]	; 0x64
   22b30:	ldr	r6, [r3, r5, lsl #2]
   22b34:	cmp	r6, #0
   22b38:	beq	22c58 <__assert_fail@plt+0x112b8>
   22b3c:	add	r6, r6, #4
   22b40:	mov	r1, r9
   22b44:	mov	r0, r6
   22b48:	bl	1bbd0 <__assert_fail@plt+0xa230>
   22b4c:	cmp	r0, #0
   22b50:	bne	22ae4 <__assert_fail@plt+0x11144>
   22b54:	mov	r1, r6
   22b58:	add	r0, sp, #8
   22b5c:	bl	1d40c <__assert_fail@plt+0xba6c>
   22b60:	str	r0, [sp, #20]
   22b64:	mov	r1, r9
   22b68:	add	r0, sp, #8
   22b6c:	bl	1f120 <__assert_fail@plt+0xd780>
   22b70:	eor	r0, r0, #1
   22b74:	ldr	r3, [sp, #20]
   22b78:	cmp	r3, #0
   22b7c:	orrne	r0, r0, #1
   22b80:	tst	r0, #255	; 0xff
   22b84:	bne	22c40 <__assert_fail@plt+0x112a0>
   22b88:	ldr	r6, [sl, #100]	; 0x64
   22b8c:	add	r2, sp, #8
   22b90:	mov	r1, fp
   22b94:	add	r0, sp, #20
   22b98:	bl	227c0 <__assert_fail@plt+0x10e20>
   22b9c:	str	r0, [r6, r5, lsl #2]
   22ba0:	ldr	r0, [sp, #16]
   22ba4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   22ba8:	ldr	r3, [sl, #100]	; 0x64
   22bac:	ldr	r3, [r3, r5, lsl #2]
   22bb0:	cmp	r3, #0
   22bb4:	bne	22ae4 <__assert_fail@plt+0x11144>
   22bb8:	ldr	r0, [sp, #20]
   22bbc:	cmp	r0, #0
   22bc0:	beq	22ae4 <__assert_fail@plt+0x11144>
   22bc4:	b	22c78 <__assert_fail@plt+0x112d8>
   22bc8:	mov	r1, r5
   22bcc:	add	r0, sp, #8
   22bd0:	bl	1cb3c <__assert_fail@plt+0xb19c>
   22bd4:	str	r0, [sp, #20]
   22bd8:	ldr	r3, [sp, #64]	; 0x40
   22bdc:	ldr	r2, [sp, #4]
   22be0:	add	r1, sp, #8
   22be4:	mov	r0, fp
   22be8:	bl	1fe60 <__assert_fail@plt+0xe4c0>
   22bec:	mov	r4, r0
   22bf0:	add	r1, sp, #8
   22bf4:	mov	r0, r7
   22bf8:	bl	1f664 <__assert_fail@plt+0xdcc4>
   22bfc:	mov	r5, r0
   22c00:	ldr	r0, [sp, #16]
   22c04:	bl	1b854 <__assert_fail@plt+0x9eb4>
   22c08:	ldr	r0, [sp, #20]
   22c0c:	orr	r3, r4, r5
   22c10:	orrs	r3, r3, r0
   22c14:	bne	22c28 <__assert_fail@plt+0x11288>
   22c18:	ldr	r4, [sl, #116]	; 0x74
   22c1c:	ldr	r3, [sp]
   22c20:	add	r4, r4, r3
   22c24:	b	22af4 <__assert_fail@plt+0x11154>
   22c28:	cmp	r0, #0
   22c2c:	bne	22c78 <__assert_fail@plt+0x112d8>
   22c30:	cmp	r4, #0
   22c34:	movne	r0, r4
   22c38:	moveq	r0, r5
   22c3c:	b	22c78 <__assert_fail@plt+0x112d8>
   22c40:	ldr	r0, [sp, #16]
   22c44:	bl	1b854 <__assert_fail@plt+0x9eb4>
   22c48:	ldr	r0, [sp, #20]
   22c4c:	cmp	r0, #0
   22c50:	moveq	r0, #12
   22c54:	b	22c78 <__assert_fail@plt+0x112d8>
   22c58:	mov	r1, r9
   22c5c:	add	r0, sp, #8
   22c60:	bl	1cb3c <__assert_fail@plt+0xb19c>
   22c64:	str	r0, [sp, #20]
   22c68:	cmp	r0, #0
   22c6c:	beq	22b88 <__assert_fail@plt+0x111e8>
   22c70:	b	22c78 <__assert_fail@plt+0x112d8>
   22c74:	mov	r0, #0
   22c78:	add	sp, sp, #28
   22c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c84:	sub	sp, sp, #92	; 0x5c
   22c88:	mov	sl, r0
   22c8c:	str	r1, [sp, #44]	; 0x2c
   22c90:	mov	r7, r2
   22c94:	mov	r5, r3
   22c98:	ldr	r3, [r0, #84]	; 0x54
   22c9c:	mov	r2, r3
   22ca0:	str	r3, [sp, #36]	; 0x24
   22ca4:	mov	r3, #0
   22ca8:	str	r3, [sp, #84]	; 0x54
   22cac:	ldr	r3, [r2]
   22cb0:	ldr	r3, [r3, r7, lsl #3]
   22cb4:	str	r3, [sp, #40]	; 0x28
   22cb8:	ldr	r6, [r1, #4]
   22cbc:	ldr	r4, [r0, #120]	; 0x78
   22cc0:	ldr	r3, [sp, #132]	; 0x84
   22cc4:	add	r4, r3, r4
   22cc8:	add	r4, r4, #1
   22ccc:	cmp	r6, r4
   22cd0:	blt	22de8 <__assert_fail@plt+0x11448>
   22cd4:	ldr	r3, [sp, #44]	; 0x2c
   22cd8:	ldr	fp, [r3]
   22cdc:	cmp	fp, #0
   22ce0:	beq	23258 <__assert_fail@plt+0x118b8>
   22ce4:	ldr	r2, [sl, #100]	; 0x64
   22ce8:	str	r2, [sp, #48]	; 0x30
   22cec:	ldr	r2, [sl, #40]	; 0x28
   22cf0:	str	r2, [sp, #52]	; 0x34
   22cf4:	ldr	r6, [r3, #8]
   22cf8:	str	r6, [sl, #100]	; 0x64
   22cfc:	str	fp, [sl, #40]	; 0x28
   22d00:	str	sl, [sp, #20]
   22d04:	ldr	r2, [sl, #88]	; 0x58
   22d08:	sub	r1, fp, #1
   22d0c:	mov	r0, sl
   22d10:	bl	1fa38 <__assert_fail@plt+0xe098>
   22d14:	mov	r4, r0
   22d18:	cmp	fp, r5
   22d1c:	beq	23290 <__assert_fail@plt+0x118f0>
   22d20:	ldr	r6, [r6, fp, lsl #2]
   22d24:	cmp	r6, #0
   22d28:	beq	232fc <__assert_fail@plt+0x1195c>
   22d2c:	ldrb	r3, [r6, #52]	; 0x34
   22d30:	tst	r3, #64	; 0x40
   22d34:	bne	22e38 <__assert_fail@plt+0x11498>
   22d38:	mov	r3, #0
   22d3c:	str	r3, [sp, #72]	; 0x48
   22d40:	str	r3, [sp, #76]	; 0x4c
   22d44:	str	r3, [sp, #80]	; 0x50
   22d48:	ldrb	r3, [r6, #52]	; 0x34
   22d4c:	tst	r3, #64	; 0x40
   22d50:	beq	22dac <__assert_fail@plt+0x1140c>
   22d54:	ldr	r3, [sp, #76]	; 0x4c
   22d58:	cmp	r3, #0
   22d5c:	beq	22d88 <__assert_fail@plt+0x113e8>
   22d60:	ldr	r3, [sp, #136]	; 0x88
   22d64:	str	r3, [sp]
   22d68:	ldr	r3, [sp, #40]	; 0x28
   22d6c:	mov	r2, fp
   22d70:	add	r1, sp, #72	; 0x48
   22d74:	mov	r0, sl
   22d78:	bl	22a78 <__assert_fail@plt+0x110d8>
   22d7c:	str	r0, [sp, #84]	; 0x54
   22d80:	cmp	r0, #0
   22d84:	bne	22e54 <__assert_fail@plt+0x114b4>
   22d88:	mov	r3, r4
   22d8c:	add	r2, sp, #72	; 0x48
   22d90:	ldr	r1, [sp, #36]	; 0x24
   22d94:	add	r0, sp, #84	; 0x54
   22d98:	bl	1e7c4 <__assert_fail@plt+0xce24>
   22d9c:	subs	r6, r0, #0
   22da0:	beq	22e64 <__assert_fail@plt+0x114c4>
   22da4:	ldr	r3, [sl, #100]	; 0x64
   22da8:	str	r6, [r3, fp, lsl #2]
   22dac:	ldr	r3, [sp, #132]	; 0x84
   22db0:	cmp	r3, fp
   22db4:	ble	23228 <__assert_fail@plt+0x11888>
   22db8:	ldr	r3, [sl, #120]	; 0x78
   22dbc:	cmp	r3, #0
   22dc0:	blt	23230 <__assert_fail@plt+0x11890>
   22dc4:	add	r3, fp, #1
   22dc8:	lsl	r3, r3, #2
   22dcc:	str	r3, [sp, #16]
   22dd0:	mov	r3, #0
   22dd4:	str	r3, [sp, #32]
   22dd8:	mov	r9, r3
   22ddc:	str	fp, [sp, #12]
   22de0:	mov	fp, sl
   22de4:	b	230f8 <__assert_fail@plt+0x11758>
   22de8:	mvn	r3, #-2147483648	; 0x80000000
   22dec:	sub	r3, r3, r6
   22df0:	cmp	r4, r3
   22df4:	bgt	23240 <__assert_fail@plt+0x118a0>
   22df8:	add	r8, r6, r4
   22dfc:	cmn	r8, #-1073741823	; 0xc0000001
   22e00:	bhi	23248 <__assert_fail@plt+0x118a8>
   22e04:	lsl	r1, r8, #2
   22e08:	ldr	r9, [sp, #44]	; 0x2c
   22e0c:	ldr	r0, [r9, #8]
   22e10:	bl	1b9dc <__assert_fail@plt+0xa03c>
   22e14:	cmp	r0, #0
   22e18:	beq	23250 <__assert_fail@plt+0x118b0>
   22e1c:	str	r0, [r9, #8]
   22e20:	str	r8, [r9, #4]
   22e24:	lsl	r2, r4, #2
   22e28:	mov	r1, #0
   22e2c:	add	r0, r0, r6, lsl #2
   22e30:	bl	11814 <memset@plt>
   22e34:	b	22cd4 <__assert_fail@plt+0x11334>
   22e38:	add	r1, r6, #4
   22e3c:	add	r0, sp, #72	; 0x48
   22e40:	bl	1d40c <__assert_fail@plt+0xba6c>
   22e44:	str	r0, [sp, #84]	; 0x54
   22e48:	cmp	r0, #0
   22e4c:	beq	22d48 <__assert_fail@plt+0x113a8>
   22e50:	b	22e8c <__assert_fail@plt+0x114ec>
   22e54:	ldr	r0, [sp, #80]	; 0x50
   22e58:	bl	1b854 <__assert_fail@plt+0x9eb4>
   22e5c:	ldr	r0, [sp, #84]	; 0x54
   22e60:	b	22e8c <__assert_fail@plt+0x114ec>
   22e64:	ldr	r3, [sp, #84]	; 0x54
   22e68:	cmp	r3, #0
   22e6c:	beq	22da4 <__assert_fail@plt+0x11404>
   22e70:	ldr	r0, [sp, #80]	; 0x50
   22e74:	bl	1b854 <__assert_fail@plt+0x9eb4>
   22e78:	ldr	r0, [sp, #84]	; 0x54
   22e7c:	b	22e8c <__assert_fail@plt+0x114ec>
   22e80:	ldr	r0, [sp, #80]	; 0x50
   22e84:	bl	1b854 <__assert_fail@plt+0x9eb4>
   22e88:	ldr	r0, [sp, #84]	; 0x54
   22e8c:	add	sp, sp, #92	; 0x5c
   22e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e94:	ldr	r3, [sp, #12]
   22e98:	ldr	r2, [sp, #20]
   22e9c:	mov	r0, r5
   22ea0:	bl	22494 <__assert_fail@plt+0x10af4>
   22ea4:	mov	r8, r0
   22ea8:	cmp	r0, #1
   22eac:	ble	22f40 <__assert_fail@plt+0x115a0>
   22eb0:	ldr	r3, [r5, #12]
   22eb4:	ldr	r2, [r3, fp, lsl #2]
   22eb8:	str	r2, [sp, #24]
   22ebc:	ldr	r3, [sp, #12]
   22ec0:	add	r3, r3, r0
   22ec4:	mov	r2, r3
   22ec8:	str	r3, [sp, #28]
   22ecc:	ldr	r3, [sl, #100]	; 0x64
   22ed0:	ldr	r1, [r3, r2, lsl #2]
   22ed4:	str	r9, [sp, #64]	; 0x40
   22ed8:	cmp	r1, #0
   22edc:	beq	22ef8 <__assert_fail@plt+0x11558>
   22ee0:	add	r1, r1, #4
   22ee4:	add	r0, sp, #60	; 0x3c
   22ee8:	bl	1f664 <__assert_fail@plt+0xdcc4>
   22eec:	str	r0, [sp, #56]	; 0x38
   22ef0:	cmp	r0, #0
   22ef4:	bne	22fb4 <__assert_fail@plt+0x11614>
   22ef8:	ldr	r1, [sp, #24]
   22efc:	add	r0, sp, #60	; 0x3c
   22f00:	bl	1f120 <__assert_fail@plt+0xd780>
   22f04:	cmp	r0, #0
   22f08:	beq	22fd4 <__assert_fail@plt+0x11634>
   22f0c:	ldr	r3, [sl, #100]	; 0x64
   22f10:	str	r3, [sp, #24]
   22f14:	add	r2, sp, #60	; 0x3c
   22f18:	mov	r1, r5
   22f1c:	add	r0, sp, #56	; 0x38
   22f20:	bl	227c0 <__assert_fail@plt+0x10e20>
   22f24:	ldr	r1, [sp, #24]
   22f28:	ldr	r2, [sp, #28]
   22f2c:	str	r0, [r1, r2, lsl #2]
   22f30:	ldr	r3, [sl, #100]	; 0x64
   22f34:	ldr	r3, [r3, r2, lsl #2]
   22f38:	cmp	r3, #0
   22f3c:	beq	22fe0 <__assert_fail@plt+0x11640>
   22f40:	cmp	r8, #0
   22f44:	beq	22f94 <__assert_fail@plt+0x115f4>
   22f48:	ldr	r3, [r5, #12]
   22f4c:	ldr	r1, [r3, fp, lsl #2]
   22f50:	add	r0, sp, #72	; 0x48
   22f54:	bl	1f120 <__assert_fail@plt+0xd780>
   22f58:	cmp	r0, #0
   22f5c:	beq	23000 <__assert_fail@plt+0x11660>
   22f60:	add	r4, r4, #1
   22f64:	ldr	r3, [r6, #20]
   22f68:	cmp	r4, r3
   22f6c:	bge	23020 <__assert_fail@plt+0x11680>
   22f70:	ldr	r3, [r6, #24]
   22f74:	ldr	r1, [r3, r4, lsl #2]
   22f78:	mov	fp, r1
   22f7c:	lsl	r7, r1, #3
   22f80:	ldr	r3, [r5]
   22f84:	add	r3, r3, r7
   22f88:	ldrb	r3, [r3, #6]
   22f8c:	tst	r3, #16
   22f90:	bne	22e94 <__assert_fail@plt+0x114f4>
   22f94:	ldr	r1, [r5]
   22f98:	ldr	r2, [sp, #12]
   22f9c:	add	r1, r1, r7
   22fa0:	mov	r0, sl
   22fa4:	bl	1fb4c <__assert_fail@plt+0xe1ac>
   22fa8:	cmp	r0, #0
   22fac:	beq	22f60 <__assert_fail@plt+0x115c0>
   22fb0:	b	22f48 <__assert_fail@plt+0x115a8>
   22fb4:	mov	fp, sl
   22fb8:	ldr	r0, [sp, #68]	; 0x44
   22fbc:	bl	1b854 <__assert_fail@plt+0x9eb4>
   22fc0:	ldr	r3, [sp, #56]	; 0x38
   22fc4:	str	r3, [sp, #84]	; 0x54
   22fc8:	cmp	r3, #0
   22fcc:	beq	23030 <__assert_fail@plt+0x11690>
   22fd0:	b	23010 <__assert_fail@plt+0x11670>
   22fd4:	ldr	r0, [sp, #68]	; 0x44
   22fd8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   22fdc:	b	23008 <__assert_fail@plt+0x11668>
   22fe0:	ldr	r3, [sp, #56]	; 0x38
   22fe4:	cmp	r3, #0
   22fe8:	beq	22f40 <__assert_fail@plt+0x115a0>
   22fec:	mov	fp, sl
   22ff0:	ldr	r0, [sp, #68]	; 0x44
   22ff4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   22ff8:	ldr	r3, [sp, #56]	; 0x38
   22ffc:	b	22fc4 <__assert_fail@plt+0x11624>
   23000:	ldr	r0, [sp, #68]	; 0x44
   23004:	bl	1b854 <__assert_fail@plt+0x9eb4>
   23008:	mov	r3, #12
   2300c:	str	r3, [sp, #84]	; 0x54
   23010:	ldr	r0, [sp, #80]	; 0x50
   23014:	bl	1b854 <__assert_fail@plt+0x9eb4>
   23018:	ldr	r0, [sp, #84]	; 0x54
   2301c:	b	22e8c <__assert_fail@plt+0x114ec>
   23020:	mov	fp, sl
   23024:	ldr	r0, [sp, #68]	; 0x44
   23028:	bl	1b854 <__assert_fail@plt+0x9eb4>
   2302c:	str	r9, [sp, #84]	; 0x54
   23030:	ldr	r3, [sp, #12]
   23034:	add	r4, r3, #1
   23038:	ldr	r3, [sp, #76]	; 0x4c
   2303c:	cmp	r3, #0
   23040:	beq	2308c <__assert_fail@plt+0x116ec>
   23044:	ldr	r3, [sp, #136]	; 0x88
   23048:	ldr	r2, [sp, #40]	; 0x28
   2304c:	add	r1, sp, #72	; 0x48
   23050:	ldr	r0, [sp, #36]	; 0x24
   23054:	bl	1fe60 <__assert_fail@plt+0xe4c0>
   23058:	str	r0, [sp, #84]	; 0x54
   2305c:	cmp	r0, #0
   23060:	bne	23178 <__assert_fail@plt+0x117d8>
   23064:	ldr	r3, [sp, #136]	; 0x88
   23068:	str	r3, [sp]
   2306c:	ldr	r3, [sp, #40]	; 0x28
   23070:	mov	r2, r4
   23074:	add	r1, sp, #72	; 0x48
   23078:	mov	r0, fp
   2307c:	bl	22a78 <__assert_fail@plt+0x110d8>
   23080:	str	r0, [sp, #84]	; 0x54
   23084:	cmp	r0, #0
   23088:	bne	23188 <__assert_fail@plt+0x117e8>
   2308c:	ldr	r2, [fp, #88]	; 0x58
   23090:	ldr	r1, [sp, #12]
   23094:	ldr	r0, [sp, #20]
   23098:	bl	1fa38 <__assert_fail@plt+0xe098>
   2309c:	mov	r3, r0
   230a0:	add	r2, sp, #72	; 0x48
   230a4:	ldr	r1, [sp, #36]	; 0x24
   230a8:	add	r0, sp, #84	; 0x54
   230ac:	bl	1e7c4 <__assert_fail@plt+0xce24>
   230b0:	subs	r6, r0, #0
   230b4:	beq	23198 <__assert_fail@plt+0x117f8>
   230b8:	ldr	r3, [fp, #100]	; 0x64
   230bc:	ldr	r2, [sp, #16]
   230c0:	str	r6, [r3, r2]
   230c4:	mov	r3, #0
   230c8:	str	r3, [sp, #32]
   230cc:	ldr	r3, [sp, #132]	; 0x84
   230d0:	cmp	r3, r4
   230d4:	ble	23238 <__assert_fail@plt+0x11898>
   230d8:	ldr	r3, [sp, #16]
   230dc:	add	r3, r3, #4
   230e0:	str	r3, [sp, #16]
   230e4:	ldr	r3, [fp, #120]	; 0x78
   230e8:	ldr	r2, [sp, #32]
   230ec:	cmp	r2, r3
   230f0:	bgt	231d0 <__assert_fail@plt+0x11830>
   230f4:	str	r4, [sp, #12]
   230f8:	str	r9, [sp, #76]	; 0x4c
   230fc:	ldr	r3, [fp, #100]	; 0x64
   23100:	ldr	r2, [sp, #16]
   23104:	ldr	r1, [r3, r2]
   23108:	cmp	r1, #0
   2310c:	beq	23310 <__assert_fail@plt+0x11970>
   23110:	add	r1, r1, #4
   23114:	add	r0, sp, #72	; 0x48
   23118:	bl	1f664 <__assert_fail@plt+0xdcc4>
   2311c:	str	r0, [sp, #84]	; 0x54
   23120:	cmp	r0, #0
   23124:	bne	22e80 <__assert_fail@plt+0x114e0>
   23128:	cmp	r6, #0
   2312c:	beq	23030 <__assert_fail@plt+0x11690>
   23130:	ldr	r5, [fp, #84]	; 0x54
   23134:	str	r9, [sp, #56]	; 0x38
   23138:	str	r9, [sp, #60]	; 0x3c
   2313c:	str	r9, [sp, #64]	; 0x40
   23140:	str	r9, [sp, #68]	; 0x44
   23144:	ldr	r3, [r6, #20]
   23148:	cmp	r3, #0
   2314c:	ble	23024 <__assert_fail@plt+0x11684>
   23150:	ldr	r3, [r6, #24]
   23154:	ldr	r1, [r3]
   23158:	lsl	r7, r1, #3
   2315c:	ldr	r3, [r5]
   23160:	add	r3, r3, r7
   23164:	mov	r4, #0
   23168:	mov	r2, fp
   2316c:	mov	fp, r1
   23170:	mov	sl, r2
   23174:	b	22f88 <__assert_fail@plt+0x115e8>
   23178:	ldr	r0, [sp, #80]	; 0x50
   2317c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   23180:	ldr	r0, [sp, #84]	; 0x54
   23184:	b	22e8c <__assert_fail@plt+0x114ec>
   23188:	ldr	r0, [sp, #80]	; 0x50
   2318c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   23190:	ldr	r0, [sp, #84]	; 0x54
   23194:	b	22e8c <__assert_fail@plt+0x114ec>
   23198:	ldr	r3, [sp, #84]	; 0x54
   2319c:	cmp	r3, #0
   231a0:	bne	231c0 <__assert_fail@plt+0x11820>
   231a4:	ldr	r3, [fp, #100]	; 0x64
   231a8:	ldr	r2, [sp, #16]
   231ac:	str	r9, [r3, r2]
   231b0:	ldr	r3, [sp, #32]
   231b4:	add	r3, r3, #1
   231b8:	str	r3, [sp, #32]
   231bc:	b	230cc <__assert_fail@plt+0x1172c>
   231c0:	ldr	r0, [sp, #80]	; 0x50
   231c4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   231c8:	ldr	r0, [sp, #84]	; 0x54
   231cc:	b	22e8c <__assert_fail@plt+0x114ec>
   231d0:	mov	sl, fp
   231d4:	ldr	r0, [sp, #80]	; 0x50
   231d8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   231dc:	ldr	r3, [sl, #100]	; 0x64
   231e0:	ldr	r2, [sp, #132]	; 0x84
   231e4:	ldr	r3, [r3, r2, lsl #2]
   231e8:	cmp	r3, #0
   231ec:	beq	232dc <__assert_fail@plt+0x1193c>
   231f0:	ldr	r2, [sp, #44]	; 0x2c
   231f4:	str	r4, [r2]
   231f8:	ldr	r2, [sp, #48]	; 0x30
   231fc:	str	r2, [sl, #100]	; 0x64
   23200:	ldr	r2, [sp, #52]	; 0x34
   23204:	str	r2, [sl, #40]	; 0x28
   23208:	adds	r0, r3, #4
   2320c:	moveq	r0, #1
   23210:	beq	22e8c <__assert_fail@plt+0x114ec>
   23214:	ldr	r1, [sp, #128]	; 0x80
   23218:	bl	1bbd0 <__assert_fail@plt+0xa230>
   2321c:	clz	r0, r0
   23220:	lsr	r0, r0, #5
   23224:	b	22e8c <__assert_fail@plt+0x114ec>
   23228:	mov	r4, fp
   2322c:	b	231d4 <__assert_fail@plt+0x11834>
   23230:	mov	r4, fp
   23234:	b	231d4 <__assert_fail@plt+0x11834>
   23238:	mov	sl, fp
   2323c:	b	231d4 <__assert_fail@plt+0x11834>
   23240:	mov	r0, #12
   23244:	b	22e8c <__assert_fail@plt+0x114ec>
   23248:	mov	r0, #12
   2324c:	b	22e8c <__assert_fail@plt+0x114ec>
   23250:	mov	r0, #12
   23254:	b	22e8c <__assert_fail@plt+0x114ec>
   23258:	ldr	r3, [sl, #100]	; 0x64
   2325c:	str	r3, [sp, #48]	; 0x30
   23260:	ldr	r3, [sl, #40]	; 0x28
   23264:	str	r3, [sp, #52]	; 0x34
   23268:	ldr	r3, [sp, #44]	; 0x2c
   2326c:	ldr	r3, [r3, #8]
   23270:	str	r3, [sl, #100]	; 0x64
   23274:	str	r5, [sl, #40]	; 0x28
   23278:	str	sl, [sp, #20]
   2327c:	ldr	r2, [sl, #88]	; 0x58
   23280:	sub	r1, r5, #1
   23284:	mov	r0, sl
   23288:	bl	1fa38 <__assert_fail@plt+0xe098>
   2328c:	mov	r4, r0
   23290:	mov	r1, r7
   23294:	add	r0, sp, #72	; 0x48
   23298:	bl	1cb3c <__assert_fail@plt+0xb19c>
   2329c:	str	r0, [sp, #84]	; 0x54
   232a0:	cmp	r0, #0
   232a4:	bne	22e8c <__assert_fail@plt+0x114ec>
   232a8:	ldr	r3, [sp, #136]	; 0x88
   232ac:	ldr	r2, [sp, #40]	; 0x28
   232b0:	add	r1, sp, #72	; 0x48
   232b4:	ldr	r0, [sp, #36]	; 0x24
   232b8:	bl	1fe60 <__assert_fail@plt+0xe4c0>
   232bc:	str	r0, [sp, #84]	; 0x54
   232c0:	cmp	r0, #0
   232c4:	moveq	fp, r5
   232c8:	beq	22d54 <__assert_fail@plt+0x113b4>
   232cc:	ldr	r0, [sp, #80]	; 0x50
   232d0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   232d4:	ldr	r0, [sp, #84]	; 0x54
   232d8:	b	22e8c <__assert_fail@plt+0x114ec>
   232dc:	ldr	r3, [sp, #44]	; 0x2c
   232e0:	str	r4, [r3]
   232e4:	ldr	r3, [sp, #48]	; 0x30
   232e8:	str	r3, [sl, #100]	; 0x64
   232ec:	ldr	r3, [sp, #52]	; 0x34
   232f0:	str	r3, [sl, #40]	; 0x28
   232f4:	mov	r0, #1
   232f8:	b	22e8c <__assert_fail@plt+0x114ec>
   232fc:	mov	r3, #0
   23300:	str	r3, [sp, #72]	; 0x48
   23304:	str	r3, [sp, #76]	; 0x4c
   23308:	str	r3, [sp, #80]	; 0x50
   2330c:	b	22dac <__assert_fail@plt+0x1140c>
   23310:	cmp	r6, #0
   23314:	bne	23130 <__assert_fail@plt+0x11790>
   23318:	ldr	r3, [sp, #12]
   2331c:	add	r4, r3, #1
   23320:	b	2308c <__assert_fail@plt+0x116ec>
   23324:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23328:	sub	sp, sp, #16
   2332c:	mov	r4, r0
   23330:	mov	r8, r1
   23334:	mov	r6, r2
   23338:	mov	r9, r3
   2333c:	ldr	r5, [sp, #48]	; 0x30
   23340:	mov	r1, r2
   23344:	ldr	r2, [r1], #8
   23348:	mov	r3, #8
   2334c:	str	r3, [sp, #8]
   23350:	str	r5, [sp, #4]
   23354:	str	r9, [sp]
   23358:	ldr	r3, [r6, #4]
   2335c:	bl	22c80 <__assert_fail@plt+0x112e0>
   23360:	cmp	r0, #0
   23364:	beq	23370 <__assert_fail@plt+0x119d0>
   23368:	add	sp, sp, #16
   2336c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23370:	ldr	sl, [r8]
   23374:	ldr	r7, [r6, #4]
   23378:	ldr	r1, [r4, #112]	; 0x70
   2337c:	ldr	r3, [r4, #108]	; 0x6c
   23380:	cmp	r3, r1
   23384:	bge	23470 <__assert_fail@plt+0x11ad0>
   23388:	ldr	r3, [r4, #108]	; 0x6c
   2338c:	cmp	r3, #0
   23390:	ble	233b8 <__assert_fail@plt+0x11a18>
   23394:	add	r3, r3, r3, lsl #1
   23398:	lsl	r3, r3, #3
   2339c:	sub	r3, r3, #24
   233a0:	ldr	r2, [r4, #116]	; 0x74
   233a4:	add	r3, r2, r3
   233a8:	ldr	r2, [r3, #4]
   233ac:	cmp	r5, r2
   233b0:	moveq	r2, #1
   233b4:	strbeq	r2, [r3, #20]
   233b8:	ldr	r3, [r4, #108]	; 0x6c
   233bc:	ldr	r2, [r4, #116]	; 0x74
   233c0:	add	r3, r3, r3, lsl #1
   233c4:	str	r9, [r2, r3, lsl #3]
   233c8:	ldr	r3, [r4, #108]	; 0x6c
   233cc:	ldr	r2, [r4, #116]	; 0x74
   233d0:	add	r3, r3, r3, lsl #1
   233d4:	add	r3, r2, r3, lsl #3
   233d8:	str	r5, [r3, #4]
   233dc:	ldr	r3, [r4, #108]	; 0x6c
   233e0:	ldr	r2, [r4, #116]	; 0x74
   233e4:	add	r3, r3, r3, lsl #1
   233e8:	add	r3, r2, r3, lsl #3
   233ec:	str	sl, [r3, #8]
   233f0:	ldr	r3, [r4, #108]	; 0x6c
   233f4:	ldr	r2, [r4, #116]	; 0x74
   233f8:	add	r3, r3, r3, lsl #1
   233fc:	add	r3, r2, r3, lsl #3
   23400:	str	r7, [r3, #12]
   23404:	ldr	r3, [r4, #108]	; 0x6c
   23408:	ldr	r2, [r4, #116]	; 0x74
   2340c:	add	r3, r3, r3, lsl #1
   23410:	add	r3, r2, r3, lsl #3
   23414:	cmp	sl, r7
   23418:	movne	r2, #0
   2341c:	mvneq	r2, #0
   23420:	str	r2, [r3, #16]
   23424:	ldr	r2, [r4, #116]	; 0x74
   23428:	ldr	r3, [r4, #108]	; 0x6c
   2342c:	add	r1, r3, #1
   23430:	str	r1, [r4, #108]	; 0x6c
   23434:	add	r3, r3, r3, lsl #1
   23438:	add	r3, r2, r3, lsl #3
   2343c:	mov	r2, #0
   23440:	strb	r2, [r3, #20]
   23444:	sub	r7, r7, sl
   23448:	ldr	r3, [r4, #120]	; 0x78
   2344c:	cmp	r3, r7
   23450:	strlt	r7, [r4, #120]	; 0x78
   23454:	ldr	r1, [r6, #4]
   23458:	add	r5, r5, r1
   2345c:	ldr	r1, [r8]
   23460:	sub	r1, r5, r1
   23464:	mov	r0, r4
   23468:	bl	1fdd4 <__assert_fail@plt+0xe434>
   2346c:	b	23368 <__assert_fail@plt+0x119c8>
   23470:	add	r1, r1, r1, lsl #1
   23474:	lsl	r1, r1, #4
   23478:	ldr	r0, [r4, #116]	; 0x74
   2347c:	bl	1b9dc <__assert_fail@plt+0xa03c>
   23480:	cmp	r0, #0
   23484:	beq	234bc <__assert_fail@plt+0x11b1c>
   23488:	str	r0, [r4, #116]	; 0x74
   2348c:	ldr	r2, [r4, #112]	; 0x70
   23490:	add	r2, r2, r2, lsl #1
   23494:	ldr	r3, [r4, #108]	; 0x6c
   23498:	add	r3, r3, r3, lsl #1
   2349c:	lsl	r2, r2, #3
   234a0:	mov	r1, #0
   234a4:	add	r0, r0, r3, lsl #3
   234a8:	bl	11814 <memset@plt>
   234ac:	ldr	r3, [r4, #112]	; 0x70
   234b0:	lsl	r3, r3, #1
   234b4:	str	r3, [r4, #112]	; 0x70
   234b8:	b	23388 <__assert_fail@plt+0x119e8>
   234bc:	ldr	r0, [r4, #116]	; 0x74
   234c0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   234c4:	mov	r0, #12
   234c8:	b	23368 <__assert_fail@plt+0x119c8>
   234cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234d0:	sub	sp, sp, #84	; 0x54
   234d4:	ldr	r3, [r0, #84]	; 0x54
   234d8:	str	r3, [sp, #32]
   234dc:	ldr	r3, [r0, #40]	; 0x28
   234e0:	mov	r2, r3
   234e4:	str	r3, [sp, #28]
   234e8:	ldr	r3, [r1, #4]
   234ec:	cmp	r3, #0
   234f0:	ble	23bb8 <__assert_fail@plt+0x12218>
   234f4:	mov	sl, r0
   234f8:	lsl	r3, r2, #2
   234fc:	str	r3, [sp, #44]	; 0x2c
   23500:	mov	r3, #0
   23504:	str	r3, [sp, #20]
   23508:	mov	r8, r1
   2350c:	b	23b4c <__assert_fail@plt+0x121ac>
   23510:	tst	r3, #8
   23514:	beq	23520 <__assert_fail@plt+0x11b80>
   23518:	tst	r0, #1
   2351c:	bne	23b30 <__assert_fail@plt+0x12190>
   23520:	tst	r3, #32
   23524:	beq	23530 <__assert_fail@plt+0x11b90>
   23528:	tst	r0, #2
   2352c:	beq	23b30 <__assert_fail@plt+0x12190>
   23530:	tst	r3, #128	; 0x80
   23534:	beq	23540 <__assert_fail@plt+0x11ba0>
   23538:	tst	r0, #8
   2353c:	beq	23b30 <__assert_fail@plt+0x12190>
   23540:	ldr	fp, [sl, #108]	; 0x6c
   23544:	ldr	r1, [sp, #28]
   23548:	mov	r0, sl
   2354c:	bl	1c1f4 <__assert_fail@plt+0xa854>
   23550:	cmn	r0, #1
   23554:	beq	23588 <__assert_fail@plt+0x11be8>
   23558:	add	r0, r0, r0, lsl #1
   2355c:	lsl	r3, r0, #3
   23560:	add	r2, r3, #24
   23564:	ldr	r3, [sl, #116]	; 0x74
   23568:	add	r3, r3, r2
   2356c:	ldr	r2, [r3, #-24]	; 0xffffffe8
   23570:	cmp	r9, r2
   23574:	beq	238f8 <__assert_fail@plt+0x11f58>
   23578:	add	r3, r3, #24
   2357c:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   23580:	cmp	r2, #0
   23584:	bne	2356c <__assert_fail@plt+0x11bcc>
   23588:	ldr	r3, [sl, #84]	; 0x54
   2358c:	str	r3, [sp, #48]	; 0x30
   23590:	ldr	r3, [r3]
   23594:	ldr	r3, [r3, r9, lsl #3]
   23598:	str	r3, [sp, #52]	; 0x34
   2359c:	ldr	r3, [sl, #124]	; 0x7c
   235a0:	cmp	r3, #0
   235a4:	ble	238f8 <__assert_fail@plt+0x11f58>
   235a8:	ldr	r3, [sl, #4]
   235ac:	mov	r2, #0
   235b0:	str	r2, [sp, #40]	; 0x28
   235b4:	str	r9, [sp, #36]	; 0x24
   235b8:	str	fp, [sp, #56]	; 0x38
   235bc:	str	r8, [sp, #60]	; 0x3c
   235c0:	mov	r8, r3
   235c4:	b	2369c <__assert_fail@plt+0x11cfc>
   235c8:	mov	r2, r5
   235cc:	ldr	r3, [sp, #24]
   235d0:	add	r1, r8, r3
   235d4:	add	r0, r8, r6
   235d8:	bl	1161c <memcmp@plt>
   235dc:	cmp	r0, #0
   235e0:	bne	23674 <__assert_fail@plt+0x11cd4>
   235e4:	add	r6, r6, r5
   235e8:	ldr	r3, [sp, #28]
   235ec:	str	r3, [sp]
   235f0:	ldr	r3, [sp, #36]	; 0x24
   235f4:	mov	r2, r9
   235f8:	mov	r1, r4
   235fc:	mov	r0, sl
   23600:	bl	23324 <__assert_fail@plt+0x11984>
   23604:	ldr	r8, [sl, #4]
   23608:	cmp	r0, #1
   2360c:	bhi	23904 <__assert_fail@plt+0x11f64>
   23610:	add	r7, r7, #1
   23614:	str	fp, [sp, #24]
   23618:	ldr	r3, [r4, #16]
   2361c:	cmp	r7, r3
   23620:	bge	236e8 <__assert_fail@plt+0x11d48>
   23624:	ldr	r3, [r4, #20]
   23628:	ldr	r9, [r3, r7, lsl #2]
   2362c:	ldr	fp, [r9, #4]
   23630:	ldr	r3, [sp, #24]
   23634:	sub	r5, fp, r3
   23638:	cmp	r5, #0
   2363c:	ble	235e4 <__assert_fail@plt+0x11c44>
   23640:	add	r1, r6, r5
   23644:	ldr	r3, [sl, #28]
   23648:	cmp	r1, r3
   2364c:	ble	235c8 <__assert_fail@plt+0x11c28>
   23650:	ldr	r3, [sl, #48]	; 0x30
   23654:	cmp	r1, r3
   23658:	bgt	23674 <__assert_fail@plt+0x11cd4>
   2365c:	mov	r0, sl
   23660:	bl	1fdd4 <__assert_fail@plt+0xe434>
   23664:	cmp	r0, #0
   23668:	bne	238bc <__assert_fail@plt+0x11f1c>
   2366c:	ldr	r8, [sl, #4]
   23670:	b	235c8 <__assert_fail@plt+0x11c28>
   23674:	ldr	r3, [r4, #16]
   23678:	cmp	r3, r7
   2367c:	ble	236e4 <__assert_fail@plt+0x11d44>
   23680:	ldr	r3, [sp, #40]	; 0x28
   23684:	add	r3, r3, #1
   23688:	mov	r2, r3
   2368c:	str	r3, [sp, #40]	; 0x28
   23690:	ldr	r3, [sl, #124]	; 0x7c
   23694:	cmp	r2, r3
   23698:	bge	238ec <__assert_fail@plt+0x11f4c>
   2369c:	ldr	r3, [sl, #132]	; 0x84
   236a0:	ldr	r2, [sp, #40]	; 0x28
   236a4:	ldr	r4, [r3, r2, lsl #2]
   236a8:	ldr	r2, [r4, #4]
   236ac:	ldr	r3, [sp, #48]	; 0x30
   236b0:	ldr	r3, [r3]
   236b4:	ldr	r3, [r3, r2, lsl #3]
   236b8:	ldr	r2, [sp, #52]	; 0x34
   236bc:	cmp	r2, r3
   236c0:	bne	23680 <__assert_fail@plt+0x11ce0>
   236c4:	ldr	r3, [r4]
   236c8:	str	r3, [sp, #24]
   236cc:	ldr	r3, [r4, #16]
   236d0:	cmp	r3, #0
   236d4:	ble	23708 <__assert_fail@plt+0x11d68>
   236d8:	ldr	r6, [sp, #28]
   236dc:	mov	r7, #0
   236e0:	b	23624 <__assert_fail@plt+0x11c84>
   236e4:	ldr	fp, [sp, #24]
   236e8:	cmp	r7, #0
   236ec:	addgt	fp, fp, #1
   236f0:	ldr	r3, [sp, #28]
   236f4:	cmp	r3, fp
   236f8:	blt	23680 <__assert_fail@plt+0x11ce0>
   236fc:	lsl	r9, fp, #2
   23700:	ldr	r7, [sp, #52]	; 0x34
   23704:	b	2382c <__assert_fail@plt+0x11e8c>
   23708:	ldr	r6, [sp, #28]
   2370c:	ldr	fp, [sp, #24]
   23710:	b	236f0 <__assert_fail@plt+0x11d50>
   23714:	ldr	r3, [sl, #48]	; 0x30
   23718:	cmp	r3, r6
   2371c:	ble	23680 <__assert_fail@plt+0x11ce0>
   23720:	add	r1, r6, #1
   23724:	mov	r0, sl
   23728:	bl	1d860 <__assert_fail@plt+0xbec0>
   2372c:	cmp	r0, #0
   23730:	bne	238bc <__assert_fail@plt+0x11f1c>
   23734:	ldr	r8, [sl, #4]
   23738:	b	23848 <__assert_fail@plt+0x11ea8>
   2373c:	add	r3, r3, #1
   23740:	cmp	ip, r3
   23744:	beq	23818 <__assert_fail@plt+0x11e78>
   23748:	ldr	r5, [r2, #4]!
   2374c:	add	r1, r0, r5, lsl #3
   23750:	ldrb	r1, [r1, #4]
   23754:	cmp	r1, #9
   23758:	bne	2373c <__assert_fail@plt+0x11d9c>
   2375c:	ldr	r1, [r0, r5, lsl #3]
   23760:	cmp	r7, r1
   23764:	bne	2373c <__assert_fail@plt+0x11d9c>
   23768:	cmn	r5, #1
   2376c:	beq	23818 <__assert_fail@plt+0x11e78>
   23770:	ldr	r3, [r4, #8]
   23774:	cmp	r3, #0
   23778:	beq	23898 <__assert_fail@plt+0x11ef8>
   2377c:	ldr	r3, [r4]
   23780:	ldr	r2, [r4, #4]
   23784:	ldr	r1, [r4, #8]
   23788:	mov	r0, #9
   2378c:	str	r0, [sp, #8]
   23790:	str	fp, [sp, #4]
   23794:	str	r5, [sp]
   23798:	mov	r0, sl
   2379c:	bl	22c80 <__assert_fail@plt+0x112e0>
   237a0:	cmp	r0, #1
   237a4:	beq	23818 <__assert_fail@plt+0x11e78>
   237a8:	cmp	r0, #0
   237ac:	bne	238bc <__assert_fail@plt+0x11f1c>
   237b0:	ldr	r3, [r4, #16]
   237b4:	ldr	r2, [r4, #12]
   237b8:	cmp	r3, r2
   237bc:	beq	238c4 <__assert_fail@plt+0x11f24>
   237c0:	mov	r1, #20
   237c4:	mov	r0, #1
   237c8:	bl	1b548 <__assert_fail@plt+0x9ba8>
   237cc:	subs	r2, r0, #0
   237d0:	beq	23bc4 <__assert_fail@plt+0x12224>
   237d4:	ldr	r1, [r4, #16]
   237d8:	ldr	r3, [r4, #20]
   237dc:	str	r2, [r3, r1, lsl #2]
   237e0:	str	r5, [r2]
   237e4:	str	fp, [r2, #4]
   237e8:	ldr	r3, [r4, #16]
   237ec:	add	r3, r3, #1
   237f0:	str	r3, [r4, #16]
   237f4:	ldr	r3, [sp, #28]
   237f8:	str	r3, [sp]
   237fc:	ldr	r3, [sp, #36]	; 0x24
   23800:	mov	r1, r4
   23804:	mov	r0, sl
   23808:	bl	23324 <__assert_fail@plt+0x11984>
   2380c:	ldr	r8, [sl, #4]
   23810:	cmp	r0, #1
   23814:	bhi	23954 <__assert_fail@plt+0x11fb4>
   23818:	add	fp, fp, #1
   2381c:	add	r9, r9, #4
   23820:	ldr	r3, [sp, #28]
   23824:	cmp	r3, fp
   23828:	blt	23680 <__assert_fail@plt+0x11ce0>
   2382c:	ldr	r3, [r4]
   23830:	sub	r3, fp, r3
   23834:	cmp	r3, #0
   23838:	ble	23864 <__assert_fail@plt+0x11ec4>
   2383c:	ldr	r3, [sl, #28]
   23840:	cmp	r3, r6
   23844:	ble	23714 <__assert_fail@plt+0x11d74>
   23848:	add	r2, r6, #1
   2384c:	add	r3, r8, fp
   23850:	ldrb	r1, [r8, r6]
   23854:	ldrb	r3, [r3, #-1]
   23858:	cmp	r1, r3
   2385c:	bne	23680 <__assert_fail@plt+0x11ce0>
   23860:	mov	r6, r2
   23864:	ldr	r3, [sl, #100]	; 0x64
   23868:	ldr	r3, [r3, r9]
   2386c:	cmp	r3, #0
   23870:	beq	23818 <__assert_fail@plt+0x11e78>
   23874:	ldr	ip, [r3, #8]
   23878:	cmp	ip, #0
   2387c:	ble	23818 <__assert_fail@plt+0x11e78>
   23880:	ldr	r2, [sp, #48]	; 0x30
   23884:	ldr	r0, [r2]
   23888:	ldr	r2, [r3, #12]
   2388c:	sub	r2, r2, #4
   23890:	mov	r3, #0
   23894:	b	23748 <__assert_fail@plt+0x11da8>
   23898:	ldr	r1, [r4]
   2389c:	sub	r1, fp, r1
   238a0:	add	r1, r1, #1
   238a4:	mov	r0, #12
   238a8:	bl	1b548 <__assert_fail@plt+0x9ba8>
   238ac:	str	r0, [r4, #8]
   238b0:	cmp	r0, #0
   238b4:	bne	2377c <__assert_fail@plt+0x11ddc>
   238b8:	mov	r0, #12
   238bc:	str	r0, [sp, #76]	; 0x4c
   238c0:	b	239a4 <__assert_fail@plt+0x12004>
   238c4:	lsl	r3, r3, #1
   238c8:	add	r8, r3, #1
   238cc:	lsl	r1, r8, #2
   238d0:	ldr	r0, [r4, #20]
   238d4:	bl	1b9dc <__assert_fail@plt+0xa03c>
   238d8:	cmp	r0, #0
   238dc:	beq	23bc4 <__assert_fail@plt+0x12224>
   238e0:	str	r0, [r4, #20]
   238e4:	str	r8, [r4, #12]
   238e8:	b	237c0 <__assert_fail@plt+0x11e20>
   238ec:	ldr	r9, [sp, #36]	; 0x24
   238f0:	ldr	fp, [sp, #56]	; 0x38
   238f4:	ldr	r8, [sp, #60]	; 0x3c
   238f8:	mov	r3, #0
   238fc:	str	r3, [sp, #76]	; 0x4c
   23900:	b	2391c <__assert_fail@plt+0x11f7c>
   23904:	ldr	r9, [sp, #36]	; 0x24
   23908:	ldr	fp, [sp, #56]	; 0x38
   2390c:	ldr	r8, [sp, #60]	; 0x3c
   23910:	str	r0, [sp, #76]	; 0x4c
   23914:	cmp	r0, #0
   23918:	bne	239a4 <__assert_fail@plt+0x12004>
   2391c:	lsl	r3, r9, #2
   23920:	str	r3, [sp, #52]	; 0x34
   23924:	ldr	r3, [sl, #108]	; 0x6c
   23928:	cmp	fp, r3
   2392c:	bge	23b30 <__assert_fail@plt+0x12190>
   23930:	add	r3, r9, r9, lsl #1
   23934:	lsl	r3, r3, #2
   23938:	str	r3, [sp, #56]	; 0x38
   2393c:	add	r4, fp, fp, lsl #1
   23940:	lsl	r4, r4, #3
   23944:	ldr	r6, [sp, #28]
   23948:	str	r8, [sp, #60]	; 0x3c
   2394c:	ldr	r8, [sp, #32]
   23950:	b	239d4 <__assert_fail@plt+0x12034>
   23954:	ldr	r9, [sp, #36]	; 0x24
   23958:	ldr	fp, [sp, #56]	; 0x38
   2395c:	ldr	r8, [sp, #60]	; 0x3c
   23960:	b	23910 <__assert_fail@plt+0x11f70>
   23964:	ldr	r3, [sp, #40]	; 0x28
   23968:	ldr	r2, [sp, #24]
   2396c:	mov	r1, r8
   23970:	add	r0, sp, #76	; 0x4c
   23974:	bl	1e7c4 <__assert_fail@plt+0xce24>
   23978:	str	r0, [r7, r5, lsl #2]
   2397c:	ldr	r3, [sl, #100]	; 0x64
   23980:	ldr	r3, [r3, r5, lsl #2]
   23984:	cmp	r3, #0
   23988:	bne	23ac8 <__assert_fail@plt+0x12128>
   2398c:	ldr	r3, [sp, #76]	; 0x4c
   23990:	cmp	r3, #0
   23994:	beq	23ac8 <__assert_fail@plt+0x12128>
   23998:	b	239a4 <__assert_fail@plt+0x12004>
   2399c:	ldr	r0, [sp, #72]	; 0x48
   239a0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   239a4:	ldr	r0, [sp, #76]	; 0x4c
   239a8:	add	sp, sp, #84	; 0x54
   239ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239b0:	ldr	r3, [sp, #76]	; 0x4c
   239b4:	cmp	r3, #0
   239b8:	beq	23ac8 <__assert_fail@plt+0x12128>
   239bc:	b	239a4 <__assert_fail@plt+0x12004>
   239c0:	add	fp, fp, #1
   239c4:	add	r4, r4, #24
   239c8:	ldr	r3, [sl, #108]	; 0x6c
   239cc:	cmp	r3, fp
   239d0:	ble	23b2c <__assert_fail@plt+0x1218c>
   239d4:	ldr	r3, [sl, #116]	; 0x74
   239d8:	add	r2, r3, r4
   239dc:	ldr	r3, [r3, r4]
   239e0:	cmp	r9, r3
   239e4:	bne	239c0 <__assert_fail@plt+0x12020>
   239e8:	ldr	r3, [r2, #4]
   239ec:	cmp	r6, r3
   239f0:	bne	239c0 <__assert_fail@plt+0x12020>
   239f4:	ldr	r3, [r2, #12]
   239f8:	ldr	r5, [r2, #8]
   239fc:	subs	r2, r3, r5
   23a00:	str	r2, [sp, #36]	; 0x24
   23a04:	ldreq	r2, [r8, #20]
   23a08:	ldreq	r1, [sp, #56]	; 0x38
   23a0c:	addeq	r2, r2, r1
   23a10:	ldreq	r2, [r2, #8]
   23a14:	ldreq	r2, [r2]
   23a18:	ldrne	r2, [r8, #12]
   23a1c:	ldrne	r1, [sp, #52]	; 0x34
   23a20:	ldrne	r2, [r2, r1]
   23a24:	add	r2, r2, r2, lsl #1
   23a28:	ldr	r1, [r8, #24]
   23a2c:	add	r2, r1, r2, lsl #2
   23a30:	str	r2, [sp, #24]
   23a34:	add	r3, r6, r3
   23a38:	sub	r5, r3, r5
   23a3c:	ldr	r2, [sl, #88]	; 0x58
   23a40:	sub	r1, r5, #1
   23a44:	mov	r0, sl
   23a48:	bl	1fa38 <__assert_fail@plt+0xe098>
   23a4c:	str	r0, [sp, #40]	; 0x28
   23a50:	ldr	r7, [sl, #100]	; 0x64
   23a54:	ldr	r3, [r7, r5, lsl #2]
   23a58:	ldr	r2, [sp, #44]	; 0x2c
   23a5c:	ldr	r2, [r7, r2]
   23a60:	cmp	r2, #0
   23a64:	ldrne	r2, [r2, #8]
   23a68:	moveq	r2, #0
   23a6c:	str	r2, [sp, #48]	; 0x30
   23a70:	cmp	r3, #0
   23a74:	beq	23964 <__assert_fail@plt+0x11fc4>
   23a78:	ldr	r2, [sp, #24]
   23a7c:	ldr	r1, [r3, #40]	; 0x28
   23a80:	add	r0, sp, #64	; 0x40
   23a84:	bl	1d488 <__assert_fail@plt+0xbae8>
   23a88:	str	r0, [sp, #76]	; 0x4c
   23a8c:	cmp	r0, #0
   23a90:	bne	2399c <__assert_fail@plt+0x11ffc>
   23a94:	ldr	r7, [sl, #100]	; 0x64
   23a98:	ldr	r3, [sp, #40]	; 0x28
   23a9c:	add	r2, sp, #64	; 0x40
   23aa0:	mov	r1, r8
   23aa4:	add	r0, sp, #76	; 0x4c
   23aa8:	bl	1e7c4 <__assert_fail@plt+0xce24>
   23aac:	str	r0, [r7, r5, lsl #2]
   23ab0:	ldr	r0, [sp, #72]	; 0x48
   23ab4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   23ab8:	ldr	r3, [sl, #100]	; 0x64
   23abc:	ldr	r3, [r3, r5, lsl #2]
   23ac0:	cmp	r3, #0
   23ac4:	beq	239b0 <__assert_fail@plt+0x12010>
   23ac8:	ldr	r3, [sp, #36]	; 0x24
   23acc:	cmp	r3, #0
   23ad0:	bne	239c0 <__assert_fail@plt+0x12020>
   23ad4:	ldr	r3, [sl, #100]	; 0x64
   23ad8:	ldr	r2, [sp, #44]	; 0x2c
   23adc:	ldr	r3, [r3, r2]
   23ae0:	ldr	r3, [r3, #8]
   23ae4:	ldr	r2, [sp, #48]	; 0x30
   23ae8:	cmp	r2, r3
   23aec:	bge	239c0 <__assert_fail@plt+0x12020>
   23af0:	mov	r2, r6
   23af4:	ldr	r5, [sp, #24]
   23af8:	mov	r1, r5
   23afc:	mov	r0, sl
   23b00:	bl	1fccc <__assert_fail@plt+0xe32c>
   23b04:	str	r0, [sp, #76]	; 0x4c
   23b08:	cmp	r0, #0
   23b0c:	bne	239a4 <__assert_fail@plt+0x12004>
   23b10:	mov	r1, r5
   23b14:	mov	r0, sl
   23b18:	bl	234cc <__assert_fail@plt+0x11b2c>
   23b1c:	str	r0, [sp, #76]	; 0x4c
   23b20:	cmp	r0, #0
   23b24:	beq	239c0 <__assert_fail@plt+0x12020>
   23b28:	b	239a4 <__assert_fail@plt+0x12004>
   23b2c:	ldr	r8, [sp, #60]	; 0x3c
   23b30:	ldr	r3, [sp, #20]
   23b34:	add	r3, r3, #1
   23b38:	mov	r2, r3
   23b3c:	str	r3, [sp, #20]
   23b40:	ldr	r3, [r8, #4]
   23b44:	cmp	r3, r2
   23b48:	ble	23bb8 <__assert_fail@plt+0x12218>
   23b4c:	ldr	r3, [r8, #8]
   23b50:	ldr	r2, [sp, #20]
   23b54:	ldr	r9, [r3, r2, lsl #2]
   23b58:	ldr	r3, [sp, #32]
   23b5c:	ldr	r4, [r3]
   23b60:	add	r4, r4, r9, lsl #3
   23b64:	ldrb	r3, [r4, #4]
   23b68:	cmp	r3, #4
   23b6c:	bne	23b30 <__assert_fail@plt+0x12190>
   23b70:	ldr	r3, [r4, #4]
   23b74:	ldr	r2, [pc, #84]	; 23bd0 <__assert_fail@plt+0x12230>
   23b78:	tst	r3, r2
   23b7c:	beq	23540 <__assert_fail@plt+0x11ba0>
   23b80:	ldr	r2, [sl, #88]	; 0x58
   23b84:	ldr	r1, [sp, #28]
   23b88:	mov	r0, sl
   23b8c:	bl	1fa38 <__assert_fail@plt+0xe098>
   23b90:	ldr	r3, [r4, #4]
   23b94:	lsl	r3, r3, #14
   23b98:	lsr	r3, r3, #22
   23b9c:	tst	r3, #4
   23ba0:	beq	23510 <__assert_fail@plt+0x11b70>
   23ba4:	tst	r0, #1
   23ba8:	beq	23b30 <__assert_fail@plt+0x12190>
   23bac:	tst	r3, #8
   23bb0:	bne	23b30 <__assert_fail@plt+0x12190>
   23bb4:	b	23520 <__assert_fail@plt+0x11b80>
   23bb8:	mov	r3, #0
   23bbc:	str	r3, [sp, #76]	; 0x4c
   23bc0:	b	239a4 <__assert_fail@plt+0x12004>
   23bc4:	mov	r3, #12
   23bc8:	str	r3, [sp, #76]	; 0x4c
   23bcc:	b	239a4 <__assert_fail@plt+0x12004>
   23bd0:	andeq	pc, r3, r0, lsl #30
   23bd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23bd8:	sub	sp, sp, #16
   23bdc:	mov	r8, r0
   23be0:	mov	r4, r1
   23be4:	mov	r5, r2
   23be8:	ldr	r7, [r1, #84]	; 0x54
   23bec:	ldr	r6, [r1, #40]	; 0x28
   23bf0:	ldr	r3, [r1, #104]	; 0x68
   23bf4:	cmp	r6, r3
   23bf8:	ble	23c54 <__assert_fail@plt+0x122b4>
   23bfc:	ldr	r3, [r1, #100]	; 0x64
   23c00:	str	r2, [r3, r6, lsl #2]
   23c04:	str	r6, [r1, #104]	; 0x68
   23c08:	ldr	r3, [r7, #76]	; 0x4c
   23c0c:	cmp	r3, #0
   23c10:	cmpne	r5, #0
   23c14:	moveq	r0, r5
   23c18:	beq	23c4c <__assert_fail@plt+0x122ac>
   23c1c:	add	r7, r5, #4
   23c20:	mov	r2, r6
   23c24:	mov	r1, r7
   23c28:	mov	r0, r4
   23c2c:	bl	1fccc <__assert_fail@plt+0xe32c>
   23c30:	str	r0, [r8]
   23c34:	cmp	r0, #0
   23c38:	bne	23d3c <__assert_fail@plt+0x1239c>
   23c3c:	ldrb	r3, [r5, #52]	; 0x34
   23c40:	tst	r3, #64	; 0x40
   23c44:	moveq	r0, r5
   23c48:	bne	23d18 <__assert_fail@plt+0x12378>
   23c4c:	add	sp, sp, #16
   23c50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23c54:	ldr	r9, [r1, #100]	; 0x64
   23c58:	ldr	r3, [r9, r6, lsl #2]
   23c5c:	cmp	r3, #0
   23c60:	streq	r2, [r9, r6, lsl #2]
   23c64:	beq	23c08 <__assert_fail@plt+0x12268>
   23c68:	ldr	r2, [r3, #40]	; 0x28
   23c6c:	cmp	r5, #0
   23c70:	beq	23cdc <__assert_fail@plt+0x1233c>
   23c74:	ldr	r9, [r5, #40]	; 0x28
   23c78:	mov	r1, r9
   23c7c:	add	r0, sp, #4
   23c80:	bl	1d488 <__assert_fail@plt+0xbae8>
   23c84:	str	r0, [r8]
   23c88:	cmp	r0, #0
   23c8c:	movne	r0, #0
   23c90:	bne	23c4c <__assert_fail@plt+0x122ac>
   23c94:	ldr	r1, [r4, #40]	; 0x28
   23c98:	ldr	r2, [r4, #88]	; 0x58
   23c9c:	sub	r1, r1, #1
   23ca0:	mov	r0, r4
   23ca4:	bl	1fa38 <__assert_fail@plt+0xe098>
   23ca8:	ldr	sl, [r4, #100]	; 0x64
   23cac:	mov	r3, r0
   23cb0:	add	r2, sp, #4
   23cb4:	mov	r1, r7
   23cb8:	mov	r0, r8
   23cbc:	bl	1e7c4 <__assert_fail@plt+0xce24>
   23cc0:	mov	r5, r0
   23cc4:	str	r0, [sl, r6, lsl #2]
   23cc8:	cmp	r9, #0
   23ccc:	beq	23c08 <__assert_fail@plt+0x12268>
   23cd0:	ldr	r0, [sp, #12]
   23cd4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   23cd8:	b	23c08 <__assert_fail@plt+0x12268>
   23cdc:	add	r5, sp, #4
   23ce0:	ldm	r2, {r0, r1, r2}
   23ce4:	stm	r5, {r0, r1, r2}
   23ce8:	ldr	r2, [r4, #88]	; 0x58
   23cec:	sub	r1, r6, #1
   23cf0:	mov	r0, r4
   23cf4:	bl	1fa38 <__assert_fail@plt+0xe098>
   23cf8:	mov	r3, r0
   23cfc:	mov	r2, r5
   23d00:	mov	r1, r7
   23d04:	mov	r0, r8
   23d08:	bl	1e7c4 <__assert_fail@plt+0xce24>
   23d0c:	mov	r5, r0
   23d10:	str	r0, [r9, r6, lsl #2]
   23d14:	b	23c08 <__assert_fail@plt+0x12268>
   23d18:	mov	r1, r7
   23d1c:	mov	r0, r4
   23d20:	bl	234cc <__assert_fail@plt+0x11b2c>
   23d24:	str	r0, [r8]
   23d28:	cmp	r0, #0
   23d2c:	bne	23d44 <__assert_fail@plt+0x123a4>
   23d30:	ldr	r3, [r4, #100]	; 0x64
   23d34:	ldr	r0, [r3, r6, lsl #2]
   23d38:	b	23c4c <__assert_fail@plt+0x122ac>
   23d3c:	mov	r0, #0
   23d40:	b	23c4c <__assert_fail@plt+0x122ac>
   23d44:	mov	r0, #0
   23d48:	b	23c4c <__assert_fail@plt+0x122ac>
   23d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d50:	sub	sp, sp, #92	; 0x5c
   23d54:	str	r0, [sp, #28]
   23d58:	mov	sl, r1
   23d5c:	mov	fp, r2
   23d60:	mov	r5, r3
   23d64:	ldr	r6, [r0, #84]	; 0x54
   23d68:	mov	r3, #0
   23d6c:	str	r3, [sp, #84]	; 0x54
   23d70:	lsl	r3, r2, #2
   23d74:	str	r3, [sp, #32]
   23d78:	ldr	r3, [r0, #100]	; 0x64
   23d7c:	ldr	r3, [r3, r2, lsl #2]
   23d80:	cmp	r3, #0
   23d84:	addne	r3, r3, #4
   23d88:	moveq	r3, #0
   23d8c:	str	r3, [sp, #12]
   23d90:	ldr	r3, [r5, #4]
   23d94:	cmp	r3, #0
   23d98:	bne	23de0 <__assert_fail@plt+0x12440>
   23d9c:	ldr	r3, [r1]
   23da0:	mov	r2, #0
   23da4:	str	r2, [r3, fp, lsl #2]
   23da8:	ldr	r3, [sp, #12]
   23dac:	cmp	r3, #0
   23db0:	moveq	r4, #0
   23db4:	beq	23dd4 <__assert_fail@plt+0x12434>
   23db8:	ldr	r3, [sp, #28]
   23dbc:	ldr	r3, [r3, #100]	; 0x64
   23dc0:	ldr	r3, [r3, fp, lsl #2]
   23dc4:	ldrb	r3, [r3, #52]	; 0x34
   23dc8:	tst	r3, #64	; 0x40
   23dcc:	moveq	r4, #0
   23dd0:	bne	24088 <__assert_fail@plt+0x126e8>
   23dd4:	mov	r0, r4
   23dd8:	add	sp, sp, #92	; 0x5c
   23ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23de0:	ldr	r3, [sp, #12]
   23de4:	cmp	r3, #0
   23de8:	beq	24060 <__assert_fail@plt+0x126c0>
   23dec:	add	r0, sp, #88	; 0x58
   23df0:	mov	r3, #0
   23df4:	str	r3, [r0, #-32]!	; 0xffffffe0
   23df8:	mov	r2, r5
   23dfc:	mov	r1, r6
   23e00:	bl	227c0 <__assert_fail@plt+0x10e20>
   23e04:	mov	r7, r0
   23e08:	ldr	r4, [sp, #56]	; 0x38
   23e0c:	cmp	r4, #0
   23e10:	bne	23dd4 <__assert_fail@plt+0x12434>
   23e14:	ldr	r3, [r0, #28]
   23e18:	cmp	r3, #0
   23e1c:	bne	23e80 <__assert_fail@plt+0x124e0>
   23e20:	add	r8, r0, #28
   23e24:	ldr	r1, [r5, #4]
   23e28:	mov	r0, r8
   23e2c:	bl	1cb80 <__assert_fail@plt+0xb1e0>
   23e30:	str	r0, [sp, #56]	; 0x38
   23e34:	cmp	r0, #0
   23e38:	bne	24348 <__assert_fail@plt+0x129a8>
   23e3c:	ldr	r3, [r5, #4]
   23e40:	cmp	r3, #0
   23e44:	ble	23e80 <__assert_fail@plt+0x124e0>
   23e48:	ldr	r3, [r5, #8]
   23e4c:	ldr	r1, [r3, r4, lsl #2]
   23e50:	add	r1, r1, r1, lsl #1
   23e54:	ldr	r3, [r6, #28]
   23e58:	add	r1, r3, r1, lsl #2
   23e5c:	mov	r0, r8
   23e60:	bl	1f664 <__assert_fail@plt+0xdcc4>
   23e64:	str	r0, [sp, #56]	; 0x38
   23e68:	cmp	r0, #0
   23e6c:	bne	24350 <__assert_fail@plt+0x129b0>
   23e70:	add	r4, r4, #1
   23e74:	ldr	r3, [r5, #4]
   23e78:	cmp	r4, r3
   23e7c:	blt	23e48 <__assert_fail@plt+0x124a8>
   23e80:	add	r2, r7, #28
   23e84:	ldr	r1, [sp, #12]
   23e88:	mov	r0, r5
   23e8c:	bl	1d614 <__assert_fail@plt+0xbc74>
   23e90:	mov	r4, r0
   23e94:	str	r0, [sp, #84]	; 0x54
   23e98:	cmp	r0, #0
   23e9c:	bne	23dd4 <__assert_fail@plt+0x12434>
   23ea0:	ldr	r3, [sl, #20]
   23ea4:	cmp	r3, #0
   23ea8:	bne	23ed4 <__assert_fail@plt+0x12534>
   23eac:	ldr	r4, [sl]
   23eb0:	mov	r2, r5
   23eb4:	mov	r1, r6
   23eb8:	add	r0, sp, #84	; 0x54
   23ebc:	bl	227c0 <__assert_fail@plt+0x10e20>
   23ec0:	str	r0, [r4, fp, lsl #2]
   23ec4:	ldr	r4, [sp, #84]	; 0x54
   23ec8:	cmp	r4, #0
   23ecc:	beq	23db8 <__assert_fail@plt+0x12418>
   23ed0:	b	23dd4 <__assert_fail@plt+0x12434>
   23ed4:	ldr	r3, [sp, #28]
   23ed8:	ldr	r3, [r3, #116]	; 0x74
   23edc:	str	r3, [sp, #20]
   23ee0:	ble	24358 <__assert_fail@plt+0x129b8>
   23ee4:	mov	r7, #0
   23ee8:	b	243a4 <__assert_fail@plt+0x12a04>
   23eec:	ldr	lr, [r5, #4]
   23ef0:	cmp	lr, #0
   23ef4:	ble	24394 <__assert_fail@plt+0x129f4>
   23ef8:	ldr	r3, [r5, #8]
   23efc:	add	lr, r3, lr, lsl #2
   23f00:	mvn	r2, #0
   23f04:	mov	r4, r2
   23f08:	mov	r1, r2
   23f0c:	b	23f24 <__assert_fail@plt+0x12584>
   23f10:	ldr	ip, [r0, r2, lsl #3]
   23f14:	cmp	r8, ip
   23f18:	moveq	r1, r2
   23f1c:	cmp	lr, r3
   23f20:	beq	23f50 <__assert_fail@plt+0x125b0>
   23f24:	ldr	r2, [r3], #4
   23f28:	add	ip, r0, r2, lsl #3
   23f2c:	ldrb	ip, [ip, #4]
   23f30:	cmp	ip, #8
   23f34:	beq	23f10 <__assert_fail@plt+0x12570>
   23f38:	cmp	ip, #9
   23f3c:	bne	23f1c <__assert_fail@plt+0x1257c>
   23f40:	ldr	ip, [r0, r2, lsl #3]
   23f44:	cmp	r8, ip
   23f48:	moveq	r4, r2
   23f4c:	b	23f1c <__assert_fail@plt+0x1257c>
   23f50:	str	r4, [sp, #16]
   23f54:	cmp	r1, #0
   23f58:	blt	24388 <__assert_fail@plt+0x129e8>
   23f5c:	ldr	r3, [sp, #12]
   23f60:	mov	r2, r5
   23f64:	mov	r0, r6
   23f68:	bl	1eca0 <__assert_fail@plt+0xd300>
   23f6c:	cmp	r0, #0
   23f70:	bne	243fc <__assert_fail@plt+0x12a5c>
   23f74:	cmp	r4, #0
   23f78:	blt	24394 <__assert_fail@plt+0x129f4>
   23f7c:	ldr	r3, [r5, #4]
   23f80:	cmp	r3, #0
   23f84:	ble	24394 <__assert_fail@plt+0x129f4>
   23f88:	mov	r8, #0
   23f8c:	b	23fa0 <__assert_fail@plt+0x12600>
   23f90:	add	r8, r8, #1
   23f94:	ldr	r3, [r5, #4]
   23f98:	cmp	r8, r3
   23f9c:	bge	24394 <__assert_fail@plt+0x129f4>
   23fa0:	ldr	r3, [r5, #8]
   23fa4:	ldr	r9, [r3, r8, lsl #2]
   23fa8:	add	r4, r9, r9, lsl #1
   23fac:	lsl	r4, r4, #2
   23fb0:	ldr	r0, [r6, #28]
   23fb4:	ldr	r1, [sp, #16]
   23fb8:	add	r0, r0, r4
   23fbc:	bl	1bbd0 <__assert_fail@plt+0xa230>
   23fc0:	cmp	r0, #0
   23fc4:	bne	23f90 <__assert_fail@plt+0x125f0>
   23fc8:	ldr	r0, [r6, #24]
   23fcc:	ldr	r1, [sp, #16]
   23fd0:	add	r0, r0, r4
   23fd4:	bl	1bbd0 <__assert_fail@plt+0xa230>
   23fd8:	cmp	r0, #0
   23fdc:	bne	23f90 <__assert_fail@plt+0x125f0>
   23fe0:	ldr	r3, [sp, #12]
   23fe4:	mov	r2, r5
   23fe8:	mov	r1, r9
   23fec:	mov	r0, r6
   23ff0:	bl	1eca0 <__assert_fail@plt+0xd300>
   23ff4:	cmp	r0, #0
   23ff8:	bne	24404 <__assert_fail@plt+0x12a64>
   23ffc:	sub	r8, r8, #1
   24000:	b	23f90 <__assert_fail@plt+0x125f0>
   24004:	add	r9, r9, #1
   24008:	ldr	r3, [r5, #4]
   2400c:	cmp	r9, r3
   24010:	bge	24394 <__assert_fail@plt+0x129f4>
   24014:	ldr	r3, [r5, #8]
   24018:	ldr	r1, [r3, r9, lsl #2]
   2401c:	ldr	r2, [r6]
   24020:	add	r3, r2, r1, lsl #3
   24024:	ldrb	r3, [r3, #4]
   24028:	sub	r3, r3, #8
   2402c:	cmp	r3, #1
   24030:	bhi	24004 <__assert_fail@plt+0x12664>
   24034:	ldr	r3, [r2, r1, lsl #3]
   24038:	cmp	r8, r3
   2403c:	bne	24004 <__assert_fail@plt+0x12664>
   24040:	ldr	r3, [sp, #12]
   24044:	mov	r2, r5
   24048:	mov	r0, r6
   2404c:	bl	1eca0 <__assert_fail@plt+0xd300>
   24050:	cmp	r0, #0
   24054:	beq	24004 <__assert_fail@plt+0x12664>
   24058:	mov	r4, r0
   2405c:	b	23dd4 <__assert_fail@plt+0x12434>
   24060:	ldr	r4, [r1]
   24064:	mov	r2, r5
   24068:	mov	r1, r6
   2406c:	add	r0, sp, #84	; 0x54
   24070:	bl	227c0 <__assert_fail@plt+0x10e20>
   24074:	str	r0, [r4, fp, lsl #2]
   24078:	ldr	r4, [sp, #84]	; 0x54
   2407c:	cmp	r4, #0
   24080:	beq	23da8 <__assert_fail@plt+0x12408>
   24084:	b	23dd4 <__assert_fail@plt+0x12434>
   24088:	mov	r1, fp
   2408c:	ldr	r4, [sp, #28]
   24090:	mov	r0, r4
   24094:	bl	1c1f4 <__assert_fail@plt+0xa854>
   24098:	str	r0, [sp, #44]	; 0x2c
   2409c:	cmn	r0, #1
   240a0:	moveq	r4, #0
   240a4:	beq	23dd4 <__assert_fail@plt+0x12434>
   240a8:	ldr	r9, [r4, #84]	; 0x54
   240ac:	mov	r3, #0
   240b0:	str	r3, [sp, #56]	; 0x38
   240b4:	ldr	r1, [sp, #12]
   240b8:	ldr	r3, [r1, #4]
   240bc:	cmp	r3, #0
   240c0:	ble	24340 <__assert_fail@plt+0x129a0>
   240c4:	add	r3, r0, r0, lsl #1
   240c8:	lsl	r3, r3, #3
   240cc:	str	r3, [sp, #48]	; 0x30
   240d0:	mov	r3, #0
   240d4:	str	r3, [sp, #16]
   240d8:	add	r3, sl, #16
   240dc:	str	r3, [sp, #40]	; 0x28
   240e0:	add	r3, fp, #1
   240e4:	str	r3, [sp, #52]	; 0x34
   240e8:	str	fp, [sp, #12]
   240ec:	mov	fp, r1
   240f0:	b	242b8 <__assert_fail@plt+0x12918>
   240f4:	ldr	r3, [sl, #12]
   240f8:	ldr	r1, [sp, #12]
   240fc:	cmp	r1, r3
   24100:	bne	242dc <__assert_fail@plt+0x1293c>
   24104:	b	2429c <__assert_fail@plt+0x128fc>
   24108:	add	ip, sp, #56	; 0x38
   2410c:	mov	lr, sl
   24110:	ldm	lr!, {r0, r1, r2, r3}
   24114:	stmia	ip!, {r0, r1, r2, r3}
   24118:	ldm	lr, {r0, r1, r2}
   2411c:	stm	ip, {r0, r1, r2}
   24120:	ldr	r1, [sp, #40]	; 0x28
   24124:	add	r0, sp, #72	; 0x48
   24128:	bl	1d40c <__assert_fail@plt+0xba6c>
   2412c:	cmp	r0, #0
   24130:	beq	2422c <__assert_fail@plt+0x1288c>
   24134:	mov	r4, r0
   24138:	b	24318 <__assert_fail@plt+0x12978>
   2413c:	ldr	r3, [sp, #56]	; 0x38
   24140:	ldr	r2, [sp, #32]
   24144:	str	r4, [r3, r2]
   24148:	mov	r1, r5
   2414c:	add	r0, sp, #72	; 0x48
   24150:	bl	1bbd0 <__assert_fail@plt+0xa230>
   24154:	sub	r1, r0, #1
   24158:	add	r0, sp, #72	; 0x48
   2415c:	bl	1bc68 <__assert_fail@plt+0xa2c8>
   24160:	ldr	r3, [sp, #28]
   24164:	ldr	r4, [r3, #116]	; 0x74
   24168:	add	r4, r4, r6
   2416c:	add	r5, r5, #1
   24170:	add	r2, r4, #24
   24174:	add	r6, r6, #24
   24178:	ldrb	r3, [r4, #20]
   2417c:	cmp	r3, #0
   24180:	beq	24298 <__assert_fail@plt+0x128f8>
   24184:	mov	r4, r2
   24188:	ldr	r3, [r4]
   2418c:	cmp	r7, r3
   24190:	bne	2416c <__assert_fail@plt+0x127cc>
   24194:	ldr	r3, [r4, #12]
   24198:	ldr	r2, [r4, #8]
   2419c:	sub	r3, r3, r2
   241a0:	ldr	r2, [sp, #12]
   241a4:	add	r8, r2, r3
   241a8:	cmp	r3, #0
   241ac:	ldrne	r3, [r9, #12]
   241b0:	ldrne	r2, [sp, #20]
   241b4:	ldrne	fp, [r3, r2]
   241b8:	ldreq	r3, [r9, #20]
   241bc:	ldreq	r2, [sp, #24]
   241c0:	addeq	r3, r3, r2
   241c4:	ldreq	r3, [r3, #8]
   241c8:	ldreq	fp, [r3]
   241cc:	ldr	r3, [sl, #12]
   241d0:	cmp	r8, r3
   241d4:	bgt	2416c <__assert_fail@plt+0x127cc>
   241d8:	ldr	r3, [sl]
   241dc:	ldr	r0, [r3, r8, lsl #2]
   241e0:	cmp	r0, #0
   241e4:	beq	2416c <__assert_fail@plt+0x127cc>
   241e8:	mov	r1, fp
   241ec:	add	r0, r0, #4
   241f0:	bl	1bbd0 <__assert_fail@plt+0xa230>
   241f4:	cmp	r0, #0
   241f8:	beq	2416c <__assert_fail@plt+0x127cc>
   241fc:	str	r8, [sp, #4]
   24200:	str	fp, [sp]
   24204:	ldr	r3, [sp, #12]
   24208:	mov	r2, r7
   2420c:	ldr	r1, [sp, #40]	; 0x28
   24210:	ldr	r0, [sp, #28]
   24214:	bl	1c2a4 <__assert_fail@plt+0xa904>
   24218:	cmp	r0, #0
   2421c:	bne	2416c <__assert_fail@plt+0x127cc>
   24220:	ldr	r3, [sp, #56]	; 0x38
   24224:	cmp	r3, #0
   24228:	beq	24108 <__assert_fail@plt+0x12768>
   2422c:	str	r7, [sp, #64]	; 0x40
   24230:	ldr	r3, [sp, #12]
   24234:	str	r3, [sp, #68]	; 0x44
   24238:	mov	r1, r5
   2423c:	add	r0, sp, #72	; 0x48
   24240:	bl	1f120 <__assert_fail@plt+0xd780>
   24244:	cmp	r0, #0
   24248:	beq	24330 <__assert_fail@plt+0x12990>
   2424c:	ldr	r3, [sp, #56]	; 0x38
   24250:	ldr	r2, [sp, #32]
   24254:	ldr	r4, [r3, r2]
   24258:	add	r1, sp, #56	; 0x38
   2425c:	ldr	r0, [sp, #28]
   24260:	bl	2440c <__assert_fail@plt+0x12a6c>
   24264:	cmp	r0, #0
   24268:	bne	24338 <__assert_fail@plt+0x12998>
   2426c:	ldr	r1, [sl, #4]
   24270:	cmp	r1, #0
   24274:	beq	2413c <__assert_fail@plt+0x1279c>
   24278:	ldr	r3, [sp, #52]	; 0x34
   2427c:	ldr	r2, [sp, #56]	; 0x38
   24280:	mov	r0, r9
   24284:	bl	229c4 <__assert_fail@plt+0x11024>
   24288:	cmp	r0, #0
   2428c:	beq	2413c <__assert_fail@plt+0x1279c>
   24290:	mov	r4, r0
   24294:	b	24318 <__assert_fail@plt+0x12978>
   24298:	ldr	fp, [sp, #36]	; 0x24
   2429c:	ldr	r3, [sp, #16]
   242a0:	add	r3, r3, #1
   242a4:	mov	r2, r3
   242a8:	str	r3, [sp, #16]
   242ac:	ldr	r3, [fp, #4]
   242b0:	cmp	r2, r3
   242b4:	bge	24314 <__assert_fail@plt+0x12974>
   242b8:	ldr	r3, [fp, #8]
   242bc:	ldr	r2, [sp, #16]
   242c0:	ldr	r7, [r3, r2, lsl #2]
   242c4:	ldr	r3, [r9]
   242c8:	add	r3, r3, r7, lsl #3
   242cc:	ldrb	r2, [r3, #4]
   242d0:	ldr	r3, [sl, #8]
   242d4:	cmp	r7, r3
   242d8:	beq	240f4 <__assert_fail@plt+0x12754>
   242dc:	cmp	r2, #4
   242e0:	bne	2429c <__assert_fail@plt+0x128fc>
   242e4:	ldr	r3, [sp, #28]
   242e8:	ldr	r4, [r3, #116]	; 0x74
   242ec:	ldr	r6, [sp, #48]	; 0x30
   242f0:	add	r4, r4, r6
   242f4:	add	r3, r7, r7, lsl #1
   242f8:	lsl	r3, r3, #2
   242fc:	str	r3, [sp, #24]
   24300:	lsl	r3, r7, #2
   24304:	str	r3, [sp, #20]
   24308:	ldr	r5, [sp, #44]	; 0x2c
   2430c:	str	fp, [sp, #36]	; 0x24
   24310:	b	24188 <__assert_fail@plt+0x127e8>
   24314:	mov	r4, #0
   24318:	ldr	r3, [sp, #56]	; 0x38
   2431c:	cmp	r3, #0
   24320:	beq	23dd4 <__assert_fail@plt+0x12434>
   24324:	ldr	r0, [sp, #80]	; 0x50
   24328:	bl	1b854 <__assert_fail@plt+0x9eb4>
   2432c:	b	23dd4 <__assert_fail@plt+0x12434>
   24330:	mov	r4, #12
   24334:	b	24318 <__assert_fail@plt+0x12978>
   24338:	mov	r4, r0
   2433c:	b	24318 <__assert_fail@plt+0x12978>
   24340:	mov	r4, #0
   24344:	b	23dd4 <__assert_fail@plt+0x12434>
   24348:	mov	r4, #12
   2434c:	b	23dd4 <__assert_fail@plt+0x12434>
   24350:	mov	r4, #12
   24354:	b	23dd4 <__assert_fail@plt+0x12434>
   24358:	add	r0, sp, #88	; 0x58
   2435c:	mov	r3, #0
   24360:	str	r3, [r0, #-4]!
   24364:	ldr	r4, [sl]
   24368:	mov	r2, r5
   2436c:	mov	r1, r6
   24370:	bl	227c0 <__assert_fail@plt+0x10e20>
   24374:	str	r0, [r4, fp, lsl #2]
   24378:	ldr	r4, [sp, #84]	; 0x54
   2437c:	cmp	r4, #0
   24380:	beq	23db8 <__assert_fail@plt+0x12418>
   24384:	b	23dd4 <__assert_fail@plt+0x12434>
   24388:	ldr	r3, [sp, #16]
   2438c:	cmp	r3, #0
   24390:	bge	23f88 <__assert_fail@plt+0x125e8>
   24394:	add	r7, r7, #1
   24398:	ldr	r3, [sl, #20]
   2439c:	cmp	r7, r3
   243a0:	bge	24358 <__assert_fail@plt+0x129b8>
   243a4:	ldr	r3, [sl, #24]
   243a8:	ldr	r3, [r3, r7, lsl #2]
   243ac:	add	r3, r3, r3, lsl #1
   243b0:	ldr	ip, [sp, #20]
   243b4:	add	r2, ip, r3, lsl #3
   243b8:	ldr	r1, [r2, #8]
   243bc:	cmp	fp, r1
   243c0:	ble	24394 <__assert_fail@plt+0x129f4>
   243c4:	ldr	r1, [r2, #4]
   243c8:	cmp	fp, r1
   243cc:	bgt	24394 <__assert_fail@plt+0x129f4>
   243d0:	ldr	r0, [r6]
   243d4:	ldr	r3, [ip, r3, lsl #3]
   243d8:	ldr	r8, [r0, r3, lsl #3]
   243dc:	ldr	r3, [r2, #12]
   243e0:	cmp	fp, r3
   243e4:	beq	23eec <__assert_fail@plt+0x1254c>
   243e8:	ldr	r3, [r5, #4]
   243ec:	cmp	r3, #0
   243f0:	movgt	r9, #0
   243f4:	bgt	24014 <__assert_fail@plt+0x12674>
   243f8:	b	24394 <__assert_fail@plt+0x129f4>
   243fc:	mov	r4, r0
   24400:	b	23dd4 <__assert_fail@plt+0x12434>
   24404:	mov	r4, r0
   24408:	b	23dd4 <__assert_fail@plt+0x12434>
   2440c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24410:	sub	sp, sp, #60	; 0x3c
   24414:	mov	r5, r0
   24418:	str	r0, [sp, #12]
   2441c:	mov	r9, r1
   24420:	ldr	fp, [r1, #12]
   24424:	lsl	r3, fp, #2
   24428:	str	r3, [sp, #16]
   2442c:	ldr	r1, [r1, #8]
   24430:	add	r0, sp, #44	; 0x2c
   24434:	bl	1cb3c <__assert_fail@plt+0xb19c>
   24438:	subs	r4, r0, #0
   2443c:	bne	246d0 <__assert_fail@plt+0x12d30>
   24440:	add	r3, sp, #44	; 0x2c
   24444:	mov	r2, fp
   24448:	mov	r1, r9
   2444c:	mov	r0, r5
   24450:	bl	23d4c <__assert_fail@plt+0x123ac>
   24454:	subs	r3, r0, #0
   24458:	str	r3, [sp, #36]	; 0x24
   2445c:	bne	246bc <__assert_fail@plt+0x12d1c>
   24460:	cmp	fp, #0
   24464:	ldrle	r4, [sp, #36]	; 0x24
   24468:	ble	246c8 <__assert_fail@plt+0x12d28>
   2446c:	mov	r3, #0
   24470:	str	r3, [sp, #32]
   24474:	add	r3, r9, #16
   24478:	str	r3, [sp, #28]
   2447c:	mov	sl, fp
   24480:	mov	fp, r9
   24484:	b	24620 <__assert_fail@plt+0x12c80>
   24488:	ldr	r2, [sp, #16]
   2448c:	mov	r1, #0
   24490:	bl	11814 <memset@plt>
   24494:	ldr	r0, [sp, #52]	; 0x34
   24498:	bl	1b854 <__assert_fail@plt+0x9eb4>
   2449c:	ldr	r4, [sp, #36]	; 0x24
   244a0:	b	246d0 <__assert_fail@plt+0x12d30>
   244a4:	ldr	r3, [fp, #12]
   244a8:	str	r3, [sp, #20]
   244ac:	ldr	r2, [sp, #12]
   244b0:	ldr	r3, [r2, #84]	; 0x54
   244b4:	mov	r0, r3
   244b8:	mov	r3, sl
   244bc:	mov	r1, r4
   244c0:	str	r0, [sp, #24]
   244c4:	bl	22494 <__assert_fail@plt+0x10af4>
   244c8:	subs	r9, r0, #0
   244cc:	ble	24514 <__assert_fail@plt+0x12b74>
   244d0:	add	r3, sl, r9
   244d4:	ldr	r2, [sp, #20]
   244d8:	cmp	r2, r3
   244dc:	blt	2451c <__assert_fail@plt+0x12b7c>
   244e0:	ldr	r2, [fp]
   244e4:	ldr	r0, [r2, r3, lsl #2]
   244e8:	cmp	r0, #0
   244ec:	beq	2459c <__assert_fail@plt+0x12bfc>
   244f0:	ldr	r3, [sp, #24]
   244f4:	ldr	r3, [r3, #12]
   244f8:	ldr	r2, [sp, #8]
   244fc:	ldr	r1, [r3, r2, lsl #2]
   24500:	add	r0, r0, #4
   24504:	bl	1bbd0 <__assert_fail@plt+0xa230>
   24508:	cmp	r0, #0
   2450c:	beq	2459c <__assert_fail@plt+0x12bfc>
   24510:	b	2451c <__assert_fail@plt+0x12b7c>
   24514:	cmp	r9, #0
   24518:	beq	2459c <__assert_fail@plt+0x12bfc>
   2451c:	ldr	r3, [fp, #20]
   24520:	cmp	r3, #0
   24524:	beq	24554 <__assert_fail@plt+0x12bb4>
   24528:	ldr	r3, [r8, #12]
   2452c:	ldr	r2, [sp, #8]
   24530:	ldr	r2, [r3, r2, lsl #2]
   24534:	str	sl, [sp, #4]
   24538:	str	r4, [sp]
   2453c:	add	r3, sl, r9
   24540:	ldr	r1, [sp, #28]
   24544:	ldr	r0, [sp, #12]
   24548:	bl	1c2a4 <__assert_fail@plt+0xa904>
   2454c:	cmp	r0, #0
   24550:	bne	24568 <__assert_fail@plt+0x12bc8>
   24554:	mov	r1, r4
   24558:	add	r0, sp, #44	; 0x2c
   2455c:	bl	1f120 <__assert_fail@plt+0xd780>
   24560:	cmp	r0, #0
   24564:	beq	246c4 <__assert_fail@plt+0x12d24>
   24568:	add	r5, r5, #1
   2456c:	ldr	r3, [r7, #20]
   24570:	cmp	r5, r3
   24574:	bge	245f0 <__assert_fail@plt+0x12c50>
   24578:	ldr	r3, [r7, #24]
   2457c:	ldr	r4, [r3, r5, lsl #2]
   24580:	str	r4, [sp, #8]
   24584:	lsl	r6, r4, #3
   24588:	ldr	r3, [r8]
   2458c:	add	r3, r3, r6
   24590:	ldrb	r3, [r3, #6]
   24594:	tst	r3, #16
   24598:	bne	244a4 <__assert_fail@plt+0x12b04>
   2459c:	ldr	r1, [r8]
   245a0:	mov	r2, sl
   245a4:	add	r1, r1, r6
   245a8:	ldr	r0, [sp, #12]
   245ac:	bl	1fb4c <__assert_fail@plt+0xe1ac>
   245b0:	cmp	r0, #0
   245b4:	beq	24568 <__assert_fail@plt+0x12bc8>
   245b8:	ldr	r3, [fp]
   245bc:	ldr	r2, [sp, #16]
   245c0:	ldr	r0, [r3, r2]
   245c4:	cmp	r0, #0
   245c8:	beq	24568 <__assert_fail@plt+0x12bc8>
   245cc:	ldr	r3, [r8, #12]
   245d0:	ldr	r2, [sp, #8]
   245d4:	ldr	r1, [r3, r2, lsl #2]
   245d8:	add	r0, r0, #4
   245dc:	bl	1bbd0 <__assert_fail@plt+0xa230>
   245e0:	cmp	r0, #0
   245e4:	beq	24568 <__assert_fail@plt+0x12bc8>
   245e8:	mov	r9, #1
   245ec:	b	2451c <__assert_fail@plt+0x12b7c>
   245f0:	add	r3, sp, #44	; 0x2c
   245f4:	mov	r2, sl
   245f8:	mov	r1, fp
   245fc:	ldr	r0, [sp, #12]
   24600:	bl	23d4c <__assert_fail@plt+0x123ac>
   24604:	cmp	r0, #0
   24608:	bne	246ac <__assert_fail@plt+0x12d0c>
   2460c:	ldr	r3, [sp, #16]
   24610:	sub	r3, r3, #4
   24614:	str	r3, [sp, #16]
   24618:	cmp	sl, #0
   2461c:	beq	246b4 <__assert_fail@plt+0x12d14>
   24620:	ldr	r0, [fp]
   24624:	ldr	r3, [sp, #16]
   24628:	ldr	r3, [r0, r3]
   2462c:	cmp	r3, #0
   24630:	ldreq	r3, [sp, #32]
   24634:	addeq	r3, r3, #1
   24638:	movne	r3, #0
   2463c:	str	r3, [sp, #32]
   24640:	ldr	r3, [sp, #12]
   24644:	ldr	r3, [r3, #120]	; 0x78
   24648:	ldr	r2, [sp, #32]
   2464c:	cmp	r2, r3
   24650:	bgt	24488 <__assert_fail@plt+0x12ae8>
   24654:	mov	r3, #0
   24658:	str	r3, [sp, #48]	; 0x30
   2465c:	sub	sl, sl, #1
   24660:	ldr	r2, [sp, #12]
   24664:	ldr	r3, [r2, #100]	; 0x64
   24668:	ldr	r1, [sp, #16]
   2466c:	add	r3, r3, r1
   24670:	ldr	r7, [r3, #-4]
   24674:	cmp	r7, #0
   24678:	beq	245f0 <__assert_fail@plt+0x12c50>
   2467c:	ldr	r8, [r2, #84]	; 0x54
   24680:	ldr	r3, [r7, #20]
   24684:	cmp	r3, #0
   24688:	ble	245f0 <__assert_fail@plt+0x12c50>
   2468c:	ldr	r3, [r7, #24]
   24690:	ldr	r4, [r3]
   24694:	str	r4, [sp, #8]
   24698:	lsl	r6, r4, #3
   2469c:	ldr	r3, [r8]
   246a0:	add	r3, r3, r6
   246a4:	mov	r5, #0
   246a8:	b	24590 <__assert_fail@plt+0x12bf0>
   246ac:	mov	r4, r0
   246b0:	b	246c8 <__assert_fail@plt+0x12d28>
   246b4:	mov	r4, r0
   246b8:	b	246c8 <__assert_fail@plt+0x12d28>
   246bc:	ldr	r4, [sp, #36]	; 0x24
   246c0:	b	246c8 <__assert_fail@plt+0x12d28>
   246c4:	mov	r4, #12
   246c8:	ldr	r0, [sp, #52]	; 0x34
   246cc:	bl	1b854 <__assert_fail@plt+0x9eb4>
   246d0:	mov	r0, r4
   246d4:	add	sp, sp, #60	; 0x3c
   246d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   246dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246e0:	sub	sp, sp, #412	; 0x19c
   246e4:	mov	r6, r0
   246e8:	str	r0, [sp, #24]
   246ec:	str	r1, [sp, #36]	; 0x24
   246f0:	str	r2, [sp, #48]	; 0x30
   246f4:	mov	r4, r3
   246f8:	ldr	r5, [sp, #448]	; 0x1c0
   246fc:	ldr	fp, [r0]
   24700:	mov	r2, #136	; 0x88
   24704:	mov	r1, #0
   24708:	add	r0, sp, #268	; 0x10c
   2470c:	bl	11814 <memset@plt>
   24710:	str	fp, [sp, #352]	; 0x160
   24714:	ldr	r2, [r6, #16]
   24718:	cmp	r2, #0
   2471c:	beq	24ab8 <__assert_fail@plt+0x13118>
   24720:	ldrb	r3, [r6, #28]
   24724:	subs	r1, r4, r5
   24728:	movne	r1, #1
   2472c:	ands	r1, r1, r3, lsr #3
   24730:	beq	24ac4 <__assert_fail@plt+0x13124>
   24734:	and	r3, r3, #1
   24738:	cmp	r3, #0
   2473c:	movne	r2, #0
   24740:	str	r2, [sp, #52]	; 0x34
   24744:	ldr	r3, [sp, #24]
   24748:	ldr	r3, [r3, #24]
   2474c:	ldr	r2, [sp, #456]	; 0x1c8
   24750:	cmp	r3, r2
   24754:	subcc	r2, r2, #1
   24758:	subcc	r3, r2, r3
   2475c:	movcs	r3, #0
   24760:	str	r3, [sp, #64]	; 0x40
   24764:	ldr	r2, [sp, #24]
   24768:	ldr	r3, [r2, #8]
   2476c:	cmp	r3, #0
   24770:	beq	25ccc <__assert_fail@plt+0x1432c>
   24774:	ldr	r3, [fp, #36]	; 0x24
   24778:	cmp	r3, #0
   2477c:	moveq	r3, #1
   24780:	streq	r3, [sp, #28]
   24784:	beq	25d50 <__assert_fail@plt+0x143b0>
   24788:	ldr	r3, [fp, #40]	; 0x28
   2478c:	cmp	r3, #0
   24790:	beq	25cd8 <__assert_fail@plt+0x14338>
   24794:	ldr	r3, [fp, #44]	; 0x2c
   24798:	cmp	r3, #0
   2479c:	moveq	r3, #1
   247a0:	streq	r3, [sp, #28]
   247a4:	beq	25d50 <__assert_fail@plt+0x143b0>
   247a8:	ldr	r3, [fp, #48]	; 0x30
   247ac:	cmp	r3, #0
   247b0:	beq	25ce4 <__assert_fail@plt+0x14344>
   247b4:	ldr	r3, [fp, #36]	; 0x24
   247b8:	ldr	r3, [r3, #8]
   247bc:	cmp	r3, #0
   247c0:	bne	2480c <__assert_fail@plt+0x12e6c>
   247c4:	ldr	r3, [fp, #40]	; 0x28
   247c8:	ldr	r3, [r3, #8]
   247cc:	cmp	r3, #0
   247d0:	bne	2480c <__assert_fail@plt+0x12e6c>
   247d4:	ldr	r3, [fp, #44]	; 0x2c
   247d8:	ldr	r3, [r3, #8]
   247dc:	cmp	r3, #0
   247e0:	beq	247f0 <__assert_fail@plt+0x12e50>
   247e4:	ldrsb	r3, [r2, #28]
   247e8:	cmp	r3, #0
   247ec:	blt	2480c <__assert_fail@plt+0x12e6c>
   247f0:	cmp	r4, #0
   247f4:	cmpne	r5, #0
   247f8:	movne	r3, #1
   247fc:	strne	r3, [sp, #28]
   24800:	bne	25d50 <__assert_fail@plt+0x143b0>
   24804:	mov	r5, #0
   24808:	mov	r4, r5
   2480c:	ldr	r3, [sp, #456]	; 0x1c8
   24810:	ldr	r2, [sp, #64]	; 0x40
   24814:	subs	r3, r3, r2
   24818:	str	r3, [sp, #60]	; 0x3c
   2481c:	movne	r3, #1
   24820:	strne	r3, [sp, #16]
   24824:	bne	24838 <__assert_fail@plt+0x12e98>
   24828:	ldr	r3, [fp, #76]	; 0x4c
   2482c:	adds	r3, r3, #0
   24830:	movne	r3, #1
   24834:	str	r3, [sp, #16]
   24838:	ldr	r2, [sp, #24]
   2483c:	ldr	r3, [r2, #20]
   24840:	mov	lr, r3
   24844:	str	r3, [sp, #76]	; 0x4c
   24848:	ldr	r3, [r2, #12]
   2484c:	lsr	r3, r3, #22
   24850:	and	r3, r3, #1
   24854:	ldr	r0, [fp, #92]	; 0x5c
   24858:	ldr	r2, [fp, #8]
   2485c:	add	r2, r2, #1
   24860:	cmp	r2, r0
   24864:	movlt	r2, r0
   24868:	ldr	ip, [sp, #48]	; 0x30
   2486c:	add	r1, ip, #1
   24870:	ldr	r6, [sp, #36]	; 0x24
   24874:	str	r6, [sp, #268]	; 0x10c
   24878:	str	ip, [sp, #316]	; 0x13c
   2487c:	str	ip, [sp, #312]	; 0x138
   24880:	str	lr, [sp, #332]	; 0x14c
   24884:	strb	r3, [sp, #340]	; 0x154
   24888:	adds	r6, lr, #0
   2488c:	movne	r6, #1
   24890:	orr	r3, r3, r6
   24894:	strb	r3, [sp, #343]	; 0x157
   24898:	str	r0, [sp, #348]	; 0x15c
   2489c:	ldrb	r3, [fp, #88]	; 0x58
   248a0:	lsr	r0, r3, #2
   248a4:	and	r0, r0, #1
   248a8:	strb	r0, [sp, #341]	; 0x155
   248ac:	lsr	r3, r3, #3
   248b0:	and	r3, r3, #1
   248b4:	strb	r3, [sp, #342]	; 0x156
   248b8:	str	ip, [sp, #324]	; 0x144
   248bc:	str	ip, [sp, #320]	; 0x140
   248c0:	cmp	r2, r1
   248c4:	movlt	r1, r2
   248c8:	add	r0, sp, #268	; 0x10c
   248cc:	bl	1c6e4 <__assert_fail@plt+0xad44>
   248d0:	subs	r3, r0, #0
   248d4:	str	r3, [sp, #28]
   248d8:	bne	25d34 <__assert_fail@plt+0x14394>
   248dc:	add	r3, fp, #96	; 0x60
   248e0:	str	r3, [sp, #336]	; 0x150
   248e4:	ldrb	r3, [fp, #88]	; 0x58
   248e8:	lsr	r3, r3, #4
   248ec:	and	r3, r3, #1
   248f0:	strb	r3, [sp, #346]	; 0x15a
   248f4:	ldrb	r3, [sp, #343]	; 0x157
   248f8:	cmp	r3, #0
   248fc:	beq	25cf0 <__assert_fail@plt+0x14350>
   24900:	mov	r3, #0
   24904:	str	r3, [sp, #296]	; 0x128
   24908:	str	r3, [sp, #300]	; 0x12c
   2490c:	ldr	r3, [sp, #452]	; 0x1c4
   24910:	str	r3, [sp, #324]	; 0x144
   24914:	str	r3, [sp, #320]	; 0x140
   24918:	ldr	r3, [sp, #24]
   2491c:	ldrb	r3, [r3, #28]
   24920:	lsr	r3, r3, #7
   24924:	strb	r3, [sp, #345]	; 0x159
   24928:	ldr	r7, [fp, #76]	; 0x4c
   2492c:	lsl	r7, r7, #1
   24930:	ldr	r3, [sp, #464]	; 0x1d0
   24934:	str	r3, [sp, #356]	; 0x164
   24938:	mvn	r3, #0
   2493c:	str	r3, [sp, #360]	; 0x168
   24940:	cmp	r7, #0
   24944:	ble	24980 <__assert_fail@plt+0x12fe0>
   24948:	ldr	r3, [pc, #4012]	; 258fc <__assert_fail@plt+0x13f5c>
   2494c:	cmp	r7, r3
   24950:	bhi	25d10 <__assert_fail@plt+0x14370>
   24954:	add	r0, r7, r7, lsl #1
   24958:	lsl	r0, r0, #3
   2495c:	bl	1b954 <__assert_fail@plt+0x9fb4>
   24960:	str	r0, [sp, #384]	; 0x180
   24964:	lsl	r0, r7, #2
   24968:	bl	1b954 <__assert_fail@plt+0x9fb4>
   2496c:	str	r0, [sp, #400]	; 0x190
   24970:	ldr	r3, [sp, #384]	; 0x180
   24974:	cmp	r0, #0
   24978:	cmpne	r3, #0
   2497c:	beq	25d10 <__assert_fail@plt+0x14370>
   24980:	str	r7, [sp, #380]	; 0x17c
   24984:	mov	r3, #1
   24988:	str	r3, [sp, #388]	; 0x184
   2498c:	str	r7, [sp, #396]	; 0x18c
   24990:	ldr	r3, [sp, #60]	; 0x3c
   24994:	cmp	r3, #1
   24998:	bls	24ad0 <__assert_fail@plt+0x13130>
   2499c:	ldr	r3, [sp, #304]	; 0x130
   249a0:	cmn	r3, #-1073741822	; 0xc0000002
   249a4:	bhi	25c68 <__assert_fail@plt+0x142c8>
   249a8:	add	r3, r3, #1
   249ac:	lsl	r0, r3, #2
   249b0:	bl	1b954 <__assert_fail@plt+0x9fb4>
   249b4:	str	r0, [sp, #368]	; 0x170
   249b8:	cmp	r0, #0
   249bc:	beq	25c74 <__assert_fail@plt+0x142d4>
   249c0:	str	r4, [sp, #404]	; 0x194
   249c4:	ldr	r3, [sp, #464]	; 0x1d0
   249c8:	and	r3, r3, #1
   249cc:	cmp	r3, #0
   249d0:	movne	r3, #4
   249d4:	moveq	r3, #6
   249d8:	str	r3, [sp, #328]	; 0x148
   249dc:	cmp	r4, r5
   249e0:	mvngt	r3, #0
   249e4:	movle	r3, #1
   249e8:	str	r3, [sp, #84]	; 0x54
   249ec:	movlt	r3, r4
   249f0:	movge	r3, r5
   249f4:	str	r3, [sp, #56]	; 0x38
   249f8:	movge	r3, r4
   249fc:	movlt	r3, r5
   24a00:	str	r3, [sp, #40]	; 0x28
   24a04:	ldr	r3, [fp, #92]	; 0x5c
   24a08:	str	r3, [sp, #80]	; 0x50
   24a0c:	ldr	r2, [sp, #52]	; 0x34
   24a10:	cmp	r2, #0
   24a14:	moveq	r3, #8
   24a18:	beq	24a60 <__assert_fail@plt+0x130c0>
   24a1c:	cmp	r3, #1
   24a20:	moveq	r3, #4
   24a24:	beq	24a4c <__assert_fail@plt+0x130ac>
   24a28:	ldr	r3, [sp, #24]
   24a2c:	ldr	r3, [r3, #12]
   24a30:	lsr	r3, r3, #22
   24a34:	eor	r3, r3, #1
   24a38:	ldr	r2, [sp, #76]	; 0x4c
   24a3c:	cmp	r2, #0
   24a40:	movne	r3, #0
   24a44:	andeq	r3, r3, #1
   24a48:	lsl	r3, r3, #2
   24a4c:	cmp	r4, r5
   24a50:	movle	r2, #2
   24a54:	movgt	r2, #0
   24a58:	orr	r3, r6, r3
   24a5c:	orr	r3, r3, r2
   24a60:	ldr	r2, [sp, #40]	; 0x28
   24a64:	cmp	r4, r2
   24a68:	movle	r2, #0
   24a6c:	movgt	r2, #1
   24a70:	ldr	r1, [sp, #56]	; 0x38
   24a74:	cmp	r4, r1
   24a78:	orrlt	r2, r2, #1
   24a7c:	str	r2, [sp, #68]	; 0x44
   24a80:	cmp	r2, #0
   24a84:	bne	25c80 <__assert_fail@plt+0x142e0>
   24a88:	add	r2, sp, #408	; 0x198
   24a8c:	cmp	r4, r5
   24a90:	suble	r2, r2, #4
   24a94:	movgt	r2, #0
   24a98:	str	r2, [sp, #88]	; 0x58
   24a9c:	adds	r2, r2, #0
   24aa0:	movne	r2, #1
   24aa4:	str	r2, [sp, #92]	; 0x5c
   24aa8:	sub	r3, r3, #4
   24aac:	str	r3, [sp, #72]	; 0x48
   24ab0:	str	fp, [sp, #44]	; 0x2c
   24ab4:	b	26034 <__assert_fail@plt+0x14694>
   24ab8:	mov	r3, #0
   24abc:	str	r3, [sp, #52]	; 0x34
   24ac0:	b	24744 <__assert_fail@plt+0x12da4>
   24ac4:	mov	r3, #0
   24ac8:	str	r3, [sp, #52]	; 0x34
   24acc:	b	24744 <__assert_fail@plt+0x12da4>
   24ad0:	ldrb	r3, [fp, #88]	; 0x58
   24ad4:	tst	r3, #2
   24ad8:	beq	249c0 <__assert_fail@plt+0x13020>
   24adc:	b	2499c <__assert_fail@plt+0x12ffc>
   24ae0:	ldr	r3, [sp, #404]	; 0x194
   24ae4:	ldr	r2, [sp, #40]	; 0x28
   24ae8:	cmp	r2, r3
   24aec:	ble	24c28 <__assert_fail@plt+0x13288>
   24af0:	ldr	r1, [sp, #36]	; 0x24
   24af4:	add	r2, r1, r3
   24af8:	ldrb	r1, [r1, r3]
   24afc:	ldr	r0, [sp, #76]	; 0x4c
   24b00:	ldrb	r1, [r0, r1]
   24b04:	ldr	r0, [sp, #52]	; 0x34
   24b08:	ldrb	r1, [r0, r1]
   24b0c:	cmp	r1, #0
   24b10:	bne	24c38 <__assert_fail@plt+0x13298>
   24b14:	add	r3, r3, #1
   24b18:	ldr	ip, [sp, #40]	; 0x28
   24b1c:	ldr	lr, [sp, #52]	; 0x34
   24b20:	ldr	r4, [sp, #76]	; 0x4c
   24b24:	mov	r0, r3
   24b28:	cmp	r3, ip
   24b2c:	beq	24c24 <__assert_fail@plt+0x13284>
   24b30:	add	r3, r3, #1
   24b34:	ldrb	r1, [r2, #1]!
   24b38:	ldrb	r1, [r4, r1]
   24b3c:	ldrb	r1, [lr, r1]
   24b40:	cmp	r1, #0
   24b44:	beq	24b24 <__assert_fail@plt+0x13184>
   24b48:	str	r0, [sp, #404]	; 0x194
   24b4c:	b	24c38 <__assert_fail@plt+0x13298>
   24b50:	ldr	r3, [sp, #404]	; 0x194
   24b54:	ldr	r2, [sp, #40]	; 0x28
   24b58:	cmp	r2, r3
   24b5c:	ble	24c28 <__assert_fail@plt+0x13288>
   24b60:	ldr	r1, [sp, #36]	; 0x24
   24b64:	add	r2, r1, r3
   24b68:	ldrb	r1, [r1, r3]
   24b6c:	ldr	r0, [sp, #52]	; 0x34
   24b70:	ldrb	r1, [r0, r1]
   24b74:	cmp	r1, #0
   24b78:	bne	24c38 <__assert_fail@plt+0x13298>
   24b7c:	add	r3, r3, #1
   24b80:	ldr	ip, [sp, #40]	; 0x28
   24b84:	ldr	lr, [sp, #52]	; 0x34
   24b88:	mov	r0, r3
   24b8c:	cmp	r3, ip
   24b90:	beq	24cf8 <__assert_fail@plt+0x13358>
   24b94:	add	r3, r3, #1
   24b98:	ldrb	r1, [r2, #1]!
   24b9c:	ldrb	r1, [lr, r1]
   24ba0:	cmp	r1, #0
   24ba4:	beq	24b88 <__assert_fail@plt+0x131e8>
   24ba8:	str	r0, [sp, #404]	; 0x194
   24bac:	b	24c38 <__assert_fail@plt+0x13298>
   24bb0:	ldr	r3, [sp, #404]	; 0x194
   24bb4:	ldr	r2, [sp, #56]	; 0x38
   24bb8:	cmp	r2, r3
   24bbc:	bgt	24c1c <__assert_fail@plt+0x1327c>
   24bc0:	ldr	r1, [sp, #68]	; 0x44
   24bc4:	ldr	ip, [sp, #52]	; 0x34
   24bc8:	ldr	r0, [sp, #76]	; 0x4c
   24bcc:	ldr	r4, [sp, #56]	; 0x38
   24bd0:	ldr	r5, [sp, #36]	; 0x24
   24bd4:	ldr	lr, [sp, #48]	; 0x30
   24bd8:	cmp	lr, r3
   24bdc:	ldrbgt	r2, [r5, r3]
   24be0:	movle	r2, #0
   24be4:	cmp	r0, #0
   24be8:	ldrbne	r2, [r0, r2]
   24bec:	ldrb	r2, [ip, r2]
   24bf0:	cmp	r2, #0
   24bf4:	bne	24d44 <__assert_fail@plt+0x133a4>
   24bf8:	sub	r3, r3, #1
   24bfc:	mov	r1, #1
   24c00:	cmp	r4, r3
   24c04:	ble	24bd8 <__assert_fail@plt+0x13238>
   24c08:	ldr	fp, [sp, #44]	; 0x2c
   24c0c:	str	r3, [sp, #404]	; 0x194
   24c10:	mov	r3, #1
   24c14:	str	r3, [sp, #28]
   24c18:	b	25d34 <__assert_fail@plt+0x14394>
   24c1c:	ldr	fp, [sp, #44]	; 0x2c
   24c20:	b	24c10 <__assert_fail@plt+0x13270>
   24c24:	str	r3, [sp, #404]	; 0x194
   24c28:	ldr	r3, [sp, #404]	; 0x194
   24c2c:	ldr	r2, [sp, #40]	; 0x28
   24c30:	cmp	r2, r3
   24c34:	beq	24d00 <__assert_fail@plt+0x13360>
   24c38:	ldr	r2, [sp, #464]	; 0x1d0
   24c3c:	ldr	r1, [sp, #404]	; 0x194
   24c40:	add	r0, sp, #268	; 0x10c
   24c44:	bl	21d6c <__assert_fail@plt+0x103cc>
   24c48:	subs	r3, r0, #0
   24c4c:	str	r3, [sp, #28]
   24c50:	bne	25ca8 <__assert_fail@plt+0x14308>
   24c54:	ldr	r3, [sp, #80]	; 0x50
   24c58:	cmp	r3, #1
   24c5c:	beq	24c7c <__assert_fail@plt+0x132dc>
   24c60:	ldr	r3, [sp, #296]	; 0x128
   24c64:	cmp	r3, #0
   24c68:	beq	24c7c <__assert_fail@plt+0x132dc>
   24c6c:	ldr	r3, [sp, #276]	; 0x114
   24c70:	ldr	r3, [r3]
   24c74:	cmn	r3, #1
   24c78:	beq	25ffc <__assert_fail@plt+0x1465c>
   24c7c:	mov	r3, #0
   24c80:	str	r3, [sp, #388]	; 0x184
   24c84:	str	r3, [sp, #376]	; 0x178
   24c88:	str	r3, [sp, #372]	; 0x174
   24c8c:	ldr	r4, [sp, #352]	; 0x160
   24c90:	ldr	r3, [sp, #308]	; 0x134
   24c94:	str	r3, [sp, #32]
   24c98:	mov	r3, #0
   24c9c:	str	r3, [sp, #104]	; 0x68
   24ca0:	ldr	r6, [r4, #36]	; 0x24
   24ca4:	ldrsb	r3, [r6, #52]	; 0x34
   24ca8:	cmp	r3, #0
   24cac:	blt	24e10 <__assert_fail@plt+0x13470>
   24cb0:	ldr	r3, [sp, #368]	; 0x170
   24cb4:	cmp	r3, #0
   24cb8:	beq	24ed0 <__assert_fail@plt+0x13530>
   24cbc:	ldr	r2, [sp, #32]
   24cc0:	str	r6, [r3, r2, lsl #2]
   24cc4:	ldr	r3, [r4, #76]	; 0x4c
   24cc8:	cmp	r3, #0
   24ccc:	ldreq	fp, [sp, #92]	; 0x5c
   24cd0:	bne	24e80 <__assert_fail@plt+0x134e0>
   24cd4:	ldrb	r3, [r6, #52]	; 0x34
   24cd8:	tst	r3, #16
   24cdc:	bne	24ed8 <__assert_fail@plt+0x13538>
   24ce0:	mvn	sl, #0
   24ce4:	mov	r3, #0
   24ce8:	str	r3, [sp, #12]
   24cec:	ldr	r3, [sp, #88]	; 0x58
   24cf0:	str	r3, [sp, #20]
   24cf4:	b	25274 <__assert_fail@plt+0x138d4>
   24cf8:	str	r3, [sp, #404]	; 0x194
   24cfc:	b	24c28 <__assert_fail@plt+0x13288>
   24d00:	ldr	r2, [sp, #48]	; 0x30
   24d04:	ldr	r3, [sp, #40]	; 0x28
   24d08:	cmp	r2, r3
   24d0c:	ldrgt	r2, [sp, #36]	; 0x24
   24d10:	ldrbgt	r3, [r2, r3]
   24d14:	movle	r3, #0
   24d18:	ldr	r2, [sp, #76]	; 0x4c
   24d1c:	cmp	r2, #0
   24d20:	ldrbne	r3, [r2, r3]
   24d24:	ldr	r2, [sp, #52]	; 0x34
   24d28:	ldrb	r3, [r2, r3]
   24d2c:	cmp	r3, #0
   24d30:	bne	24c38 <__assert_fail@plt+0x13298>
   24d34:	ldr	fp, [sp, #44]	; 0x2c
   24d38:	mov	r3, #1
   24d3c:	str	r3, [sp, #28]
   24d40:	b	25d34 <__assert_fail@plt+0x14394>
   24d44:	cmp	r1, #0
   24d48:	strne	r3, [sp, #404]	; 0x194
   24d4c:	ldr	r2, [sp, #56]	; 0x38
   24d50:	cmp	r2, r3
   24d54:	ble	24c38 <__assert_fail@plt+0x13298>
   24d58:	ldr	fp, [sp, #44]	; 0x2c
   24d5c:	mov	r3, #1
   24d60:	str	r3, [sp, #28]
   24d64:	b	25d34 <__assert_fail@plt+0x14394>
   24d68:	ldr	r5, [sp, #52]	; 0x34
   24d6c:	ldr	r6, [sp, #84]	; 0x54
   24d70:	ldr	r7, [sp, #56]	; 0x38
   24d74:	ldr	r8, [sp, #40]	; 0x28
   24d78:	b	24dc4 <__assert_fail@plt+0x13424>
   24d7c:	ldr	r2, [sp, #296]	; 0x128
   24d80:	cmp	r3, r2
   24d84:	ldrcc	r2, [sp, #272]	; 0x110
   24d88:	ldrbcc	r3, [r2, r3]
   24d8c:	movcs	r3, #0
   24d90:	ldrb	r3, [r5, r3]
   24d94:	cmp	r3, #0
   24d98:	bne	24c38 <__assert_fail@plt+0x13298>
   24d9c:	add	r3, r6, r4
   24da0:	str	r3, [sp, #404]	; 0x194
   24da4:	cmp	r8, r3
   24da8:	movge	r2, #0
   24dac:	movlt	r2, #1
   24db0:	cmp	r7, r3
   24db4:	movle	r3, r2
   24db8:	orrgt	r3, r2, #1
   24dbc:	cmp	r3, #0
   24dc0:	bne	24e00 <__assert_fail@plt+0x13460>
   24dc4:	ldr	r4, [sp, #404]	; 0x194
   24dc8:	ldr	r3, [sp, #292]	; 0x124
   24dcc:	sub	r3, r4, r3
   24dd0:	ldr	r2, [sp, #300]	; 0x12c
   24dd4:	cmp	r3, r2
   24dd8:	bcc	24d7c <__assert_fail@plt+0x133dc>
   24ddc:	ldr	r2, [sp, #464]	; 0x1d0
   24de0:	mov	r1, r4
   24de4:	add	r0, sp, #268	; 0x10c
   24de8:	bl	21d6c <__assert_fail@plt+0x103cc>
   24dec:	cmp	r0, #0
   24df0:	bne	25c9c <__assert_fail@plt+0x142fc>
   24df4:	ldr	r3, [sp, #292]	; 0x124
   24df8:	sub	r3, r4, r3
   24dfc:	b	24d7c <__assert_fail@plt+0x133dc>
   24e00:	ldr	fp, [sp, #44]	; 0x2c
   24e04:	mov	r3, #1
   24e08:	str	r3, [sp, #28]
   24e0c:	b	25d34 <__assert_fail@plt+0x14394>
   24e10:	ldr	r2, [sp, #356]	; 0x164
   24e14:	ldr	r3, [sp, #32]
   24e18:	sub	r1, r3, #1
   24e1c:	add	r0, sp, #268	; 0x10c
   24e20:	bl	1fa38 <__assert_fail@plt+0xe098>
   24e24:	tst	r0, #1
   24e28:	ldrne	r6, [r4, #40]	; 0x28
   24e2c:	bne	24cb0 <__assert_fail@plt+0x13310>
   24e30:	cmp	r0, #0
   24e34:	beq	24cb0 <__assert_fail@plt+0x13310>
   24e38:	and	r3, r0, #6
   24e3c:	cmp	r3, #6
   24e40:	ldreq	r6, [r4, #48]	; 0x30
   24e44:	beq	24cb0 <__assert_fail@plt+0x13310>
   24e48:	tst	r0, #2
   24e4c:	ldrne	r6, [r4, #44]	; 0x2c
   24e50:	bne	24cb0 <__assert_fail@plt+0x13310>
   24e54:	tst	r0, #4
   24e58:	beq	24cb0 <__assert_fail@plt+0x13310>
   24e5c:	mov	r3, r0
   24e60:	ldr	r2, [r6, #40]	; 0x28
   24e64:	mov	r1, r4
   24e68:	add	r0, sp, #104	; 0x68
   24e6c:	bl	1e7c4 <__assert_fail@plt+0xce24>
   24e70:	subs	r6, r0, #0
   24e74:	bne	24cb0 <__assert_fail@plt+0x13310>
   24e78:	ldr	fp, [sp, #44]	; 0x2c
   24e7c:	b	25d2c <__assert_fail@plt+0x1438c>
   24e80:	add	r4, r6, #4
   24e84:	mov	r2, #0
   24e88:	mov	r1, r4
   24e8c:	add	r0, sp, #268	; 0x10c
   24e90:	bl	1fccc <__assert_fail@plt+0xe32c>
   24e94:	str	r0, [sp, #104]	; 0x68
   24e98:	cmp	r0, #0
   24e9c:	bne	25330 <__assert_fail@plt+0x13990>
   24ea0:	ldrb	r3, [r6, #52]	; 0x34
   24ea4:	tst	r3, #64	; 0x40
   24ea8:	ldreq	fp, [sp, #68]	; 0x44
   24eac:	beq	24cd4 <__assert_fail@plt+0x13334>
   24eb0:	mov	r1, r4
   24eb4:	add	r0, sp, #268	; 0x10c
   24eb8:	bl	234cc <__assert_fail@plt+0x11b2c>
   24ebc:	str	r0, [sp, #104]	; 0x68
   24ec0:	cmp	r0, #0
   24ec4:	bne	25338 <__assert_fail@plt+0x13998>
   24ec8:	ldr	fp, [sp, #68]	; 0x44
   24ecc:	b	24cd4 <__assert_fail@plt+0x13334>
   24ed0:	ldr	fp, [sp, #92]	; 0x5c
   24ed4:	b	24cd4 <__assert_fail@plt+0x13334>
   24ed8:	ldrsb	r3, [r6, #52]	; 0x34
   24edc:	cmp	r3, #0
   24ee0:	blt	24f00 <__assert_fail@plt+0x13560>
   24ee4:	ldr	r3, [sp, #16]
   24ee8:	cmp	r3, #0
   24eec:	beq	24f28 <__assert_fail@plt+0x13588>
   24ef0:	ldr	sl, [sp, #32]
   24ef4:	mov	r3, #1
   24ef8:	str	r3, [sp, #12]
   24efc:	b	24cec <__assert_fail@plt+0x1334c>
   24f00:	ldr	r2, [sp, #32]
   24f04:	mov	r1, r6
   24f08:	add	r0, sp, #268	; 0x10c
   24f0c:	bl	20a30 <__assert_fail@plt+0xf090>
   24f10:	cmp	r0, #0
   24f14:	bne	24ee4 <__assert_fail@plt+0x13544>
   24f18:	mvn	sl, #0
   24f1c:	mov	r3, #0
   24f20:	str	r3, [sp, #12]
   24f24:	b	24cec <__assert_fail@plt+0x1334c>
   24f28:	ldr	sl, [sp, #32]
   24f2c:	b	25e4c <__assert_fail@plt+0x144ac>
   24f30:	ldr	r2, [sp, #316]	; 0x13c
   24f34:	cmp	r3, r2
   24f38:	bge	25294 <__assert_fail@plt+0x138f4>
   24f3c:	add	r1, r1, #2
   24f40:	add	r0, sp, #268	; 0x10c
   24f44:	bl	1d860 <__assert_fail@plt+0xbec0>
   24f48:	str	r0, [sp, #104]	; 0x68
   24f4c:	cmp	r0, #0
   24f50:	beq	252a0 <__assert_fail@plt+0x13900>
   24f54:	ldr	fp, [sp, #44]	; 0x2c
   24f58:	b	25d2c <__assert_fail@plt+0x1438c>
   24f5c:	ldr	r2, [sp, #316]	; 0x13c
   24f60:	cmp	r3, r2
   24f64:	bge	252a0 <__assert_fail@plt+0x13900>
   24f68:	b	24f3c <__assert_fail@plt+0x1359c>
   24f6c:	ldr	r8, [sp, #352]	; 0x160
   24f70:	ldr	r3, [r6, #8]
   24f74:	cmp	r3, #0
   24f78:	ble	25d1c <__assert_fail@plt+0x1437c>
   24f7c:	mov	r5, #0
   24f80:	b	24fe0 <__assert_fail@plt+0x13640>
   24f84:	tst	r3, #8
   24f88:	beq	24f94 <__assert_fail@plt+0x135f4>
   24f8c:	tst	r0, #1
   24f90:	bne	24fd0 <__assert_fail@plt+0x13630>
   24f94:	tst	r3, #32
   24f98:	beq	24fa4 <__assert_fail@plt+0x13604>
   24f9c:	tst	r0, #2
   24fa0:	beq	24fd0 <__assert_fail@plt+0x13630>
   24fa4:	tst	r3, #128	; 0x80
   24fa8:	beq	24fb4 <__assert_fail@plt+0x13614>
   24fac:	tst	r0, #8
   24fb0:	beq	24fd0 <__assert_fail@plt+0x13630>
   24fb4:	ldr	r3, [sp, #308]	; 0x134
   24fb8:	add	r2, sp, #268	; 0x10c
   24fbc:	mov	r1, r7
   24fc0:	mov	r0, r8
   24fc4:	bl	22494 <__assert_fail@plt+0x10af4>
   24fc8:	cmp	r0, #0
   24fcc:	bne	25044 <__assert_fail@plt+0x136a4>
   24fd0:	add	r5, r5, #1
   24fd4:	ldr	r3, [r6, #8]
   24fd8:	cmp	r5, r3
   24fdc:	bge	25d1c <__assert_fail@plt+0x1437c>
   24fe0:	ldr	r3, [r6, #12]
   24fe4:	ldr	r7, [r3, r5, lsl #2]
   24fe8:	ldr	r4, [r8]
   24fec:	add	r4, r4, r7, lsl #3
   24ff0:	ldrb	r3, [r4, #6]
   24ff4:	tst	r3, #16
   24ff8:	beq	24fd0 <__assert_fail@plt+0x13630>
   24ffc:	ldr	r3, [r4, #4]
   25000:	ldr	r2, [pc, #2296]	; 25900 <__assert_fail@plt+0x13f60>
   25004:	tst	r3, r2
   25008:	beq	24fb4 <__assert_fail@plt+0x13614>
   2500c:	ldr	r2, [sp, #356]	; 0x164
   25010:	ldr	r1, [sp, #308]	; 0x134
   25014:	add	r0, sp, #268	; 0x10c
   25018:	bl	1fa38 <__assert_fail@plt+0xe098>
   2501c:	ldr	r3, [r4, #4]
   25020:	lsl	r3, r3, #14
   25024:	lsr	r3, r3, #22
   25028:	tst	r3, #4
   2502c:	beq	24f84 <__assert_fail@plt+0x135e4>
   25030:	tst	r0, #1
   25034:	beq	24fd0 <__assert_fail@plt+0x13630>
   25038:	tst	r3, #8
   2503c:	bne	24fd0 <__assert_fail@plt+0x13630>
   25040:	b	24f94 <__assert_fail@plt+0x135f4>
   25044:	ldr	r4, [sp, #308]	; 0x134
   25048:	add	r4, r0, r4
   2504c:	ldr	r3, [sp, #388]	; 0x184
   25050:	cmp	r3, r0
   25054:	movge	r0, r3
   25058:	str	r0, [sp, #388]	; 0x184
   2505c:	mov	r1, r4
   25060:	add	r0, sp, #268	; 0x10c
   25064:	bl	1fdd4 <__assert_fail@plt+0xe434>
   25068:	str	r0, [sp, #116]	; 0x74
   2506c:	cmp	r0, #0
   25070:	bne	25100 <__assert_fail@plt+0x13760>
   25074:	ldr	r3, [r8, #12]
   25078:	ldr	r2, [r3, r7, lsl #2]
   2507c:	add	r2, r2, r2, lsl #1
   25080:	ldr	r3, [r8, #24]
   25084:	add	r2, r3, r2, lsl #2
   25088:	ldr	r7, [sp, #368]	; 0x170
   2508c:	ldr	r3, [r7, r4, lsl #2]
   25090:	cmp	r3, #0
   25094:	beq	25118 <__assert_fail@plt+0x13778>
   25098:	ldr	r1, [r3, #40]	; 0x28
   2509c:	add	r0, sp, #128	; 0x80
   250a0:	bl	1d488 <__assert_fail@plt+0xbae8>
   250a4:	str	r0, [sp, #116]	; 0x74
   250a8:	cmp	r0, #0
   250ac:	bne	25100 <__assert_fail@plt+0x13760>
   250b0:	ldr	r2, [sp, #356]	; 0x164
   250b4:	sub	r1, r4, #1
   250b8:	add	r0, sp, #268	; 0x10c
   250bc:	bl	1fa38 <__assert_fail@plt+0xe098>
   250c0:	ldr	r7, [sp, #368]	; 0x170
   250c4:	mov	r3, r0
   250c8:	add	r2, sp, #128	; 0x80
   250cc:	mov	r1, r8
   250d0:	add	r0, sp, #116	; 0x74
   250d4:	bl	1e7c4 <__assert_fail@plt+0xce24>
   250d8:	str	r0, [r7, r4, lsl #2]
   250dc:	ldr	r0, [sp, #136]	; 0x88
   250e0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   250e4:	ldr	r3, [sp, #368]	; 0x170
   250e8:	ldr	r3, [r3, r4, lsl #2]
   250ec:	cmp	r3, #0
   250f0:	bne	24fd0 <__assert_fail@plt+0x13630>
   250f4:	ldr	r0, [sp, #116]	; 0x74
   250f8:	cmp	r0, #0
   250fc:	beq	24fd0 <__assert_fail@plt+0x13630>
   25100:	str	r0, [sp, #104]	; 0x68
   25104:	ldr	r3, [sp, #368]	; 0x170
   25108:	cmp	r3, #0
   2510c:	beq	25e28 <__assert_fail@plt+0x14488>
   25110:	mov	r4, #0
   25114:	b	252dc <__assert_fail@plt+0x1393c>
   25118:	ldm	r2, {r0, r1, r2}
   2511c:	add	r3, sp, #128	; 0x80
   25120:	stm	r3, {r0, r1, r2}
   25124:	ldr	r2, [sp, #356]	; 0x164
   25128:	sub	r1, r4, #1
   2512c:	add	r0, sp, #268	; 0x10c
   25130:	bl	1fa38 <__assert_fail@plt+0xe098>
   25134:	mov	r3, r0
   25138:	add	r2, sp, #128	; 0x80
   2513c:	mov	r1, r8
   25140:	add	r0, sp, #116	; 0x74
   25144:	bl	1e7c4 <__assert_fail@plt+0xce24>
   25148:	str	r0, [r7, r4, lsl #2]
   2514c:	b	250e4 <__assert_fail@plt+0x13744>
   25150:	ldr	r5, [r6, #48]	; 0x30
   25154:	cmp	r5, #0
   25158:	beq	25180 <__assert_fail@plt+0x137e0>
   2515c:	ldr	r2, [sp, #356]	; 0x164
   25160:	ldr	r1, [sp, #308]	; 0x134
   25164:	sub	r1, r1, #1
   25168:	add	r0, sp, #268	; 0x10c
   2516c:	bl	1fa38 <__assert_fail@plt+0xe098>
   25170:	tst	r0, #1
   25174:	addne	r4, r4, #256	; 0x100
   25178:	ldr	r4, [r5, r4, lsl #2]
   2517c:	b	252d0 <__assert_fail@plt+0x13930>
   25180:	mov	r1, r6
   25184:	ldr	r0, [sp, #352]	; 0x160
   25188:	bl	1ff88 <__assert_fail@plt+0xe5e8>
   2518c:	cmp	r0, #0
   25190:	bne	252c0 <__assert_fail@plt+0x13920>
   25194:	mov	r3, #12
   25198:	str	r3, [sp, #104]	; 0x68
   2519c:	b	25104 <__assert_fail@plt+0x13764>
   251a0:	ldr	r3, [sp, #104]	; 0x68
   251a4:	cmp	r3, #0
   251a8:	bne	25d28 <__assert_fail@plt+0x14388>
   251ac:	ldr	r3, [sp, #368]	; 0x170
   251b0:	cmp	r3, #0
   251b4:	beq	25e34 <__assert_fail@plt+0x14494>
   251b8:	ldr	r3, [sp, #16]
   251bc:	eor	r3, r3, #1
   251c0:	ldr	r2, [sp, #12]
   251c4:	tst	r2, r3
   251c8:	bne	25e34 <__assert_fail@plt+0x14494>
   251cc:	ldr	r0, [sp, #372]	; 0x174
   251d0:	ldr	r2, [sp, #308]	; 0x134
   251d4:	ldr	r1, [sp, #368]	; 0x170
   251d8:	add	r1, r1, r2, lsl #2
   251dc:	add	r2, r2, #1
   251e0:	cmp	r0, r2
   251e4:	blt	25e34 <__assert_fail@plt+0x14494>
   251e8:	ldr	r3, [sp, #308]	; 0x134
   251ec:	add	r3, r3, #1
   251f0:	str	r3, [sp, #308]	; 0x134
   251f4:	ldr	r3, [r1, #4]!
   251f8:	cmp	r3, #0
   251fc:	beq	251dc <__assert_fail@plt+0x1383c>
   25200:	mov	r2, #0
   25204:	add	r1, sp, #268	; 0x10c
   25208:	add	r0, sp, #104	; 0x68
   2520c:	bl	23bd4 <__assert_fail@plt+0x12234>
   25210:	mov	r4, r0
   25214:	ldr	r3, [sp, #104]	; 0x68
   25218:	cmp	r3, #0
   2521c:	cmpeq	r0, #0
   25220:	beq	251cc <__assert_fail@plt+0x1382c>
   25224:	cmp	r0, #0
   25228:	bne	252f8 <__assert_fail@plt+0x13958>
   2522c:	b	25e34 <__assert_fail@plt+0x14494>
   25230:	ldr	r3, [sp, #68]	; 0x44
   25234:	cmp	r6, r4
   25238:	movne	fp, r3
   2523c:	ldr	r3, [sp, #32]
   25240:	cmp	r6, r4
   25244:	moveq	r3, r9
   25248:	str	r3, [sp, #32]
   2524c:	b	25300 <__assert_fail@plt+0x13960>
   25250:	ldr	sl, [sp, #308]	; 0x134
   25254:	ldr	r3, [sp, #16]
   25258:	cmp	r3, #0
   2525c:	beq	25e4c <__assert_fail@plt+0x144ac>
   25260:	mov	r3, #1
   25264:	str	r3, [sp, #12]
   25268:	mov	r3, #0
   2526c:	str	r3, [sp, #20]
   25270:	mov	r6, r4
   25274:	ldr	r1, [sp, #308]	; 0x134
   25278:	ldr	r3, [sp, #324]	; 0x144
   2527c:	cmp	r1, r3
   25280:	bge	25e34 <__assert_fail@plt+0x14494>
   25284:	add	r9, r1, #1
   25288:	ldr	r3, [sp, #304]	; 0x130
   2528c:	cmp	r9, r3
   25290:	bge	24f30 <__assert_fail@plt+0x13590>
   25294:	ldr	r3, [sp, #296]	; 0x128
   25298:	cmp	r9, r3
   2529c:	bge	24f5c <__assert_fail@plt+0x135bc>
   252a0:	ldrb	r3, [r6, #52]	; 0x34
   252a4:	tst	r3, #32
   252a8:	bne	24f6c <__assert_fail@plt+0x135cc>
   252ac:	ldr	r3, [sp, #308]	; 0x134
   252b0:	add	r2, r3, #1
   252b4:	str	r2, [sp, #308]	; 0x134
   252b8:	ldr	r2, [sp, #272]	; 0x110
   252bc:	ldrb	r4, [r2, r3]
   252c0:	ldr	r3, [r6, #44]	; 0x2c
   252c4:	cmp	r3, #0
   252c8:	beq	25150 <__assert_fail@plt+0x137b0>
   252cc:	ldr	r4, [r3, r4, lsl #2]
   252d0:	ldr	r3, [sp, #368]	; 0x170
   252d4:	cmp	r3, #0
   252d8:	beq	252f0 <__assert_fail@plt+0x13950>
   252dc:	mov	r2, r4
   252e0:	add	r1, sp, #268	; 0x10c
   252e4:	add	r0, sp, #104	; 0x68
   252e8:	bl	23bd4 <__assert_fail@plt+0x12234>
   252ec:	mov	r4, r0
   252f0:	cmp	r4, #0
   252f4:	beq	251a0 <__assert_fail@plt+0x13800>
   252f8:	cmp	fp, #0
   252fc:	bne	25230 <__assert_fail@plt+0x13890>
   25300:	ldrb	r3, [r4, #52]	; 0x34
   25304:	tst	r3, #16
   25308:	beq	25270 <__assert_fail@plt+0x138d0>
   2530c:	tst	r3, #128	; 0x80
   25310:	beq	25250 <__assert_fail@plt+0x138b0>
   25314:	ldr	r2, [sp, #308]	; 0x134
   25318:	mov	r1, r4
   2531c:	add	r0, sp, #268	; 0x10c
   25320:	bl	20a30 <__assert_fail@plt+0xf090>
   25324:	cmp	r0, #0
   25328:	beq	25270 <__assert_fail@plt+0x138d0>
   2532c:	b	25250 <__assert_fail@plt+0x138b0>
   25330:	mov	sl, r0
   25334:	b	25e4c <__assert_fail@plt+0x144ac>
   25338:	mov	sl, r0
   2533c:	b	25e4c <__assert_fail@plt+0x144ac>
   25340:	ldr	r2, [sp, #44]	; 0x2c
   25344:	ldr	r3, [r2, #76]	; 0x4c
   25348:	cmp	r3, #0
   2534c:	bne	25fbc <__assert_fail@plt+0x1461c>
   25350:	mov	r9, fp
   25354:	mov	fp, r2
   25358:	b	25408 <__assert_fail@plt+0x13a68>
   2535c:	mov	r3, fp
   25360:	ldr	fp, [sp, #12]
   25364:	mov	r2, r6
   25368:	mov	r1, r5
   2536c:	mov	r0, r9
   25370:	bl	229c4 <__assert_fail@plt+0x11024>
   25374:	mov	r8, r0
   25378:	mov	r0, r6
   2537c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   25380:	cmp	r8, #0
   25384:	beq	253dc <__assert_fail@plt+0x13a3c>
   25388:	mov	r6, #0
   2538c:	b	25fdc <__assert_fail@plt+0x1463c>
   25390:	str	r5, [sp, #128]	; 0x80
   25394:	mov	r3, #0
   25398:	str	r3, [sp, #132]	; 0x84
   2539c:	str	r7, [sp, #136]	; 0x88
   253a0:	str	sl, [sp, #140]	; 0x8c
   253a4:	str	r3, [sp, #144]	; 0x90
   253a8:	str	r3, [sp, #148]	; 0x94
   253ac:	str	r3, [sp, #152]	; 0x98
   253b0:	add	r1, sp, #128	; 0x80
   253b4:	add	r0, sp, #268	; 0x10c
   253b8:	bl	2440c <__assert_fail@plt+0x12a6c>
   253bc:	mov	r8, r0
   253c0:	ldr	r0, [sp, #152]	; 0x98
   253c4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   253c8:	cmp	r8, #0
   253cc:	bne	25fd8 <__assert_fail@plt+0x14638>
   253d0:	ldr	r3, [r5]
   253d4:	cmp	r3, #0
   253d8:	beq	26084 <__assert_fail@plt+0x146e4>
   253dc:	mov	r9, fp
   253e0:	ldr	fp, [sp, #44]	; 0x2c
   253e4:	ldr	r0, [sp, #368]	; 0x170
   253e8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   253ec:	str	r5, [sp, #368]	; 0x170
   253f0:	str	r7, [sp, #364]	; 0x16c
   253f4:	str	sl, [sp, #360]	; 0x168
   253f8:	mov	r0, #0
   253fc:	bl	1b854 <__assert_fail@plt+0x9eb4>
   25400:	mov	r0, #0
   25404:	bl	1b854 <__assert_fail@plt+0x9eb4>
   25408:	ldr	r3, [sp, #60]	; 0x3c
   2540c:	cmp	r3, #0
   25410:	beq	25d34 <__assert_fail@plt+0x14394>
   25414:	cmp	r3, #1
   25418:	bls	25d6c <__assert_fail@plt+0x143cc>
   2541c:	ldr	r2, [sp, #460]	; 0x1cc
   25420:	str	r2, [sp, #36]	; 0x24
   25424:	sub	r4, r3, #-536870911	; 0xe0000001
   25428:	lsl	r4, r4, #3
   2542c:	mov	r3, r2
   25430:	add	r1, r2, r4
   25434:	mvn	r2, #0
   25438:	str	r2, [r3, #12]
   2543c:	str	r2, [r3, #8]!
   25440:	cmp	r3, r1
   25444:	bne	25438 <__assert_fail@plt+0x13a98>
   25448:	mov	r3, #0
   2544c:	ldr	r2, [sp, #460]	; 0x1cc
   25450:	str	r3, [r2]
   25454:	ldr	r3, [sp, #360]	; 0x168
   25458:	str	r3, [r2, #4]
   2545c:	ldr	r3, [sp, #24]
   25460:	ldrb	r3, [r3, #28]
   25464:	eor	r3, r3, #16
   25468:	ands	r3, r9, r3, lsr #4
   2546c:	beq	25764 <__assert_fail@plt+0x13dc4>
   25470:	ldrb	r3, [fp, #88]	; 0x58
   25474:	tst	r3, #1
   25478:	beq	25d84 <__assert_fail@plt+0x143e4>
   2547c:	ldr	r3, [fp, #76]	; 0x4c
   25480:	cmp	r3, #0
   25484:	ble	25d84 <__assert_fail@plt+0x143e4>
   25488:	ldr	r3, [sp, #24]
   2548c:	ldr	r3, [r3]
   25490:	str	r3, [sp, #24]
   25494:	mov	r3, #0
   25498:	str	r3, [sp, #116]	; 0x74
   2549c:	mov	r2, #2
   254a0:	str	r2, [sp, #120]	; 0x78
   254a4:	str	r3, [sp, #124]	; 0x7c
   254a8:	str	r3, [sp, #128]	; 0x80
   254ac:	mov	r3, #16
   254b0:	str	r3, [sp, #132]	; 0x84
   254b4:	add	r3, sp, #140	; 0x8c
   254b8:	str	r3, [sp, #136]	; 0x88
   254bc:	mov	r0, #48	; 0x30
   254c0:	bl	1b954 <__assert_fail@plt+0x9fb4>
   254c4:	str	r0, [sp, #124]	; 0x7c
   254c8:	cmp	r0, #0
   254cc:	addne	r9, sp, #116	; 0x74
   254d0:	beq	25e1c <__assert_fail@plt+0x1447c>
   254d4:	ldr	r3, [sp, #24]
   254d8:	ldr	sl, [r3, #72]	; 0x48
   254dc:	mov	r3, #0
   254e0:	str	r3, [sp, #104]	; 0x68
   254e4:	str	r3, [sp, #108]	; 0x6c
   254e8:	str	r3, [sp, #112]	; 0x70
   254ec:	ldr	r3, [sp, #128]	; 0x80
   254f0:	ldr	r2, [sp, #60]	; 0x3c
   254f4:	cmp	r2, r3
   254f8:	bhi	25570 <__assert_fail@plt+0x13bd0>
   254fc:	ldr	r3, [sp, #60]	; 0x3c
   25500:	str	r3, [sp, #128]	; 0x80
   25504:	ldr	r3, [sp, #136]	; 0x88
   25508:	str	r3, [sp, #16]
   2550c:	add	r2, r4, #8
   25510:	str	r2, [sp, #32]
   25514:	ldr	r1, [sp, #460]	; 0x1cc
   25518:	mov	r0, r3
   2551c:	bl	115d4 <memcpy@plt>
   25520:	ldr	r3, [sp, #460]	; 0x1cc
   25524:	ldr	r3, [r3]
   25528:	add	r2, sp, #408	; 0x198
   2552c:	str	r3, [r2, #-308]!	; 0xfffffecc
   25530:	str	r2, [sp, #40]	; 0x28
   25534:	ldr	r3, [sp, #60]	; 0x3c
   25538:	mov	r2, r3
   2553c:	lsl	r3, r3, #4
   25540:	str	r3, [sp, #44]	; 0x2c
   25544:	str	fp, [sp, #12]
   25548:	mov	fp, r2
   2554c:	ldr	r4, [sp, #460]	; 0x1cc
   25550:	b	259a4 <__assert_fail@plt+0x14004>
   25554:	ldr	fp, [sp, #44]	; 0x2c
   25558:	mov	r3, #1
   2555c:	str	r3, [sp, #28]
   25560:	b	25d34 <__assert_fail@plt+0x14394>
   25564:	mov	r9, fp
   25568:	ldr	fp, [sp, #44]	; 0x2c
   2556c:	b	25408 <__assert_fail@plt+0x13a68>
   25570:	mov	r3, #8
   25574:	add	r2, sp, #140	; 0x8c
   25578:	ldr	r1, [sp, #60]	; 0x3c
   2557c:	add	r0, sp, #128	; 0x80
   25580:	bl	2a5f8 <__assert_fail@plt+0x18c58>
   25584:	cmp	r0, #0
   25588:	bne	25504 <__assert_fail@plt+0x13b64>
   2558c:	ldr	r0, [sp, #136]	; 0x88
   25590:	add	r3, sp, #140	; 0x8c
   25594:	cmp	r0, r3
   25598:	beq	255a0 <__assert_fail@plt+0x13c00>
   2559c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   255a0:	add	r3, sp, #140	; 0x8c
   255a4:	str	r3, [sp, #136]	; 0x88
   255a8:	mov	r3, #0
   255ac:	str	r3, [sp, #128]	; 0x80
   255b0:	mvn	r3, #0
   255b4:	str	r3, [sp, #132]	; 0x84
   255b8:	add	r0, sp, #128	; 0x80
   255bc:	bl	1ef0c <__assert_fail@plt+0xd56c>
   255c0:	mov	r0, r9
   255c4:	bl	1ef40 <__assert_fail@plt+0xd5a0>
   255c8:	mov	r3, #12
   255cc:	str	r3, [sp, #28]
   255d0:	b	25d34 <__assert_fail@plt+0x14394>
   255d4:	ldr	r3, [r3, sl, lsl #3]
   255d8:	add	r3, r3, #1
   255dc:	cmp	fp, r3
   255e0:	addgt	r1, r4, r3, lsl #3
   255e4:	strgt	r2, [r4, r3, lsl #3]
   255e8:	mvngt	r3, #0
   255ec:	strgt	r3, [r1, #4]
   255f0:	ldr	r2, [r4, #4]
   255f4:	ldr	r3, [sp, #100]	; 0x64
   255f8:	cmp	r2, r3
   255fc:	beq	256b4 <__assert_fail@plt+0x13d14>
   25600:	cmp	r9, #0
   25604:	beq	2561c <__assert_fail@plt+0x13c7c>
   25608:	mov	r1, sl
   2560c:	add	r0, sp, #104	; 0x68
   25610:	bl	1bbd0 <__assert_fail@plt+0xa230>
   25614:	cmp	r0, #0
   25618:	bne	256d4 <__assert_fail@plt+0x13d34>
   2561c:	ldr	r5, [sp, #352]	; 0x160
   25620:	mov	r7, sl
   25624:	lsl	r8, sl, #3
   25628:	ldr	r3, [r5]
   2562c:	add	r1, r3, r8
   25630:	ldrb	r2, [r1, #4]
   25634:	tst	r2, #8
   25638:	beq	25904 <__assert_fail@plt+0x13f64>
   2563c:	ldr	r3, [sp, #368]	; 0x170
   25640:	ldr	r2, [sp, #100]	; 0x64
   25644:	ldr	r3, [r3, r2, lsl #2]
   25648:	add	r3, r3, #4
   2564c:	str	r3, [sp, #20]
   25650:	add	r3, sl, sl, lsl #1
   25654:	ldr	r5, [r5, #20]
   25658:	add	r5, r5, r3, lsl #2
   2565c:	mov	r1, sl
   25660:	add	r0, sp, #104	; 0x68
   25664:	bl	1bbd0 <__assert_fail@plt+0xa230>
   25668:	cmp	r0, #0
   2566c:	beq	25798 <__assert_fail@plt+0x13df8>
   25670:	ldr	r8, [r5, #4]
   25674:	cmp	r8, #0
   25678:	mvnle	sl, #0
   2567c:	ble	25dc0 <__assert_fail@plt+0x14420>
   25680:	ldr	r7, [r5, #8]
   25684:	sub	r7, r7, #4
   25688:	mvn	sl, #0
   2568c:	mov	r5, #0
   25690:	b	258d4 <__assert_fail@plt+0x13f34>
   25694:	str	r2, [r1, #4]
   25698:	ldr	r2, [sp, #32]
   2569c:	mov	r1, r4
   256a0:	ldr	r0, [sp, #16]
   256a4:	bl	115d4 <memcpy@plt>
   256a8:	b	255f0 <__assert_fail@plt+0x13c50>
   256ac:	str	r2, [r1, #4]
   256b0:	b	255f0 <__assert_fail@plt+0x13c50>
   256b4:	ldr	r3, [sp, #364]	; 0x16c
   256b8:	cmp	sl, r3
   256bc:	bne	25600 <__assert_fail@plt+0x13c60>
   256c0:	cmp	r9, #0
   256c4:	beq	25790 <__assert_fail@plt+0x13df0>
   256c8:	ldr	r2, [sp, #36]	; 0x24
   256cc:	mov	r3, #0
   256d0:	b	256f0 <__assert_fail@plt+0x13d50>
   256d4:	ldr	r2, [sp, #36]	; 0x24
   256d8:	mov	r3, #0
   256dc:	b	256f0 <__assert_fail@plt+0x13d50>
   256e0:	add	r3, r3, #1
   256e4:	add	r2, r2, #8
   256e8:	cmp	fp, r3
   256ec:	beq	2573c <__assert_fail@plt+0x13d9c>
   256f0:	ldr	r1, [r4, r3, lsl #3]
   256f4:	cmp	r1, #0
   256f8:	blt	256e0 <__assert_fail@plt+0x13d40>
   256fc:	ldr	r1, [r2, #4]
   25700:	cmn	r1, #1
   25704:	bne	256e0 <__assert_fail@plt+0x13d40>
   25708:	add	r3, sp, #104	; 0x68
   2570c:	str	r3, [sp, #4]
   25710:	ldr	r3, [sp, #16]
   25714:	str	r3, [sp]
   25718:	mov	r3, r4
   2571c:	mov	r2, fp
   25720:	ldr	r1, [sp, #40]	; 0x28
   25724:	mov	r0, r9
   25728:	bl	20b08 <__assert_fail@plt+0xf168>
   2572c:	subs	sl, r0, #0
   25730:	bge	2561c <__assert_fail@plt+0x13c7c>
   25734:	ldr	fp, [sp, #12]
   25738:	b	25740 <__assert_fail@plt+0x13da0>
   2573c:	ldr	fp, [sp, #12]
   25740:	ldr	r0, [sp, #112]	; 0x70
   25744:	bl	1b854 <__assert_fail@plt+0x9eb4>
   25748:	add	r0, sp, #128	; 0x80
   2574c:	bl	1ef0c <__assert_fail@plt+0xd56c>
   25750:	mov	r0, r9
   25754:	bl	1ef40 <__assert_fail@plt+0xd5a0>
   25758:	cmp	r0, #0
   2575c:	strne	r0, [sp, #28]
   25760:	bne	25d34 <__assert_fail@plt+0x14394>
   25764:	ldrb	r4, [sp, #344]	; 0x158
   25768:	ldr	r7, [sp, #296]	; 0x128
   2576c:	ldr	r8, [sp, #280]	; 0x118
   25770:	ldr	r9, [sp, #300]	; 0x12c
   25774:	ldr	ip, [sp, #404]	; 0x194
   25778:	ldr	r1, [sp, #460]	; 0x1cc
   2577c:	mov	r3, r1
   25780:	add	r2, r1, #4
   25784:	ldr	r0, [sp, #60]	; 0x3c
   25788:	add	lr, r1, r0, lsl #3
   2578c:	b	25b94 <__assert_fail@plt+0x141f4>
   25790:	ldr	fp, [sp, #12]
   25794:	b	25740 <__assert_fail@plt+0x13da0>
   25798:	mov	r1, sl
   2579c:	add	r0, sp, #104	; 0x68
   257a0:	bl	1f120 <__assert_fail@plt+0xd780>
   257a4:	cmp	r0, #0
   257a8:	bne	25670 <__assert_fail@plt+0x13cd0>
   257ac:	ldr	fp, [sp, #12]
   257b0:	ldr	r0, [sp, #112]	; 0x70
   257b4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   257b8:	add	r0, sp, #128	; 0x80
   257bc:	bl	1ef0c <__assert_fail@plt+0xd56c>
   257c0:	mov	r0, r9
   257c4:	bl	1ef40 <__assert_fail@plt+0xd5a0>
   257c8:	mov	r3, #12
   257cc:	str	r3, [sp, #28]
   257d0:	b	25d34 <__assert_fail@plt+0x14394>
   257d4:	mov	r1, sl
   257d8:	add	r0, sp, #104	; 0x68
   257dc:	bl	1bbd0 <__assert_fail@plt+0xa230>
   257e0:	cmp	r0, #0
   257e4:	bne	25b34 <__assert_fail@plt+0x14194>
   257e8:	cmp	r9, #0
   257ec:	beq	2599c <__assert_fail@plt+0x13ffc>
   257f0:	ldr	r7, [sp, #100]	; 0x64
   257f4:	ldr	r5, [r9]
   257f8:	add	r1, r5, #1
   257fc:	str	r1, [r9]
   25800:	ldr	r3, [r9, #4]
   25804:	cmp	r1, r3
   25808:	bne	25834 <__assert_fail@plt+0x13e94>
   2580c:	add	r1, r1, r1, lsl #1
   25810:	lsl	r1, r1, #4
   25814:	ldr	r0, [r9, #8]
   25818:	bl	1b9dc <__assert_fail@plt+0xa03c>
   2581c:	cmp	r0, #0
   25820:	beq	25dbc <__assert_fail@plt+0x1441c>
   25824:	ldr	r3, [r9, #4]
   25828:	lsl	r3, r3, #1
   2582c:	str	r3, [r9, #4]
   25830:	str	r0, [r9, #8]
   25834:	add	r5, r5, r5, lsl #1
   25838:	lsl	r8, r5, #3
   2583c:	ldr	r3, [r9, #8]
   25840:	str	r7, [r3, r5, lsl #3]
   25844:	ldr	r3, [r9, #8]
   25848:	add	r3, r3, r8
   2584c:	str	r6, [r3, #4]
   25850:	ldr	r5, [r9, #8]
   25854:	add	r5, r5, r8
   25858:	ldr	r0, [sp, #44]	; 0x2c
   2585c:	bl	1b954 <__assert_fail@plt+0x9fb4>
   25860:	str	r0, [r5, #8]
   25864:	ldr	r3, [r9, #8]
   25868:	add	r3, r3, r8
   2586c:	ldr	r0, [r3, #8]
   25870:	cmp	r0, #0
   25874:	beq	25dbc <__assert_fail@plt+0x1441c>
   25878:	ldr	r5, [sp, #32]
   2587c:	mov	r2, r5
   25880:	mov	r1, r4
   25884:	bl	115d4 <memcpy@plt>
   25888:	ldr	r3, [r9, #8]
   2588c:	add	r3, r3, r8
   25890:	ldr	r0, [r3, #8]
   25894:	mov	r2, r5
   25898:	ldr	r1, [sp, #16]
   2589c:	add	r0, r0, r5
   258a0:	bl	115d4 <memcpy@plt>
   258a4:	ldr	r0, [r9, #8]
   258a8:	add	r0, r0, r8
   258ac:	add	r1, sp, #104	; 0x68
   258b0:	add	r0, r0, #12
   258b4:	bl	1d40c <__assert_fail@plt+0xba6c>
   258b8:	cmp	r0, #0
   258bc:	beq	2599c <__assert_fail@plt+0x13ffc>
   258c0:	ldr	fp, [sp, #12]
   258c4:	b	257b0 <__assert_fail@plt+0x13e10>
   258c8:	add	r5, r5, #1
   258cc:	cmp	r8, r5
   258d0:	beq	2599c <__assert_fail@plt+0x13ffc>
   258d4:	ldr	r6, [r7, #4]!
   258d8:	mov	r1, r6
   258dc:	ldr	r0, [sp, #20]
   258e0:	bl	1bbd0 <__assert_fail@plt+0xa230>
   258e4:	cmp	r0, #0
   258e8:	beq	258c8 <__assert_fail@plt+0x13f28>
   258ec:	cmn	sl, #1
   258f0:	bne	257d4 <__assert_fail@plt+0x13e34>
   258f4:	mov	sl, r6
   258f8:	b	258c8 <__assert_fail@plt+0x13f28>
   258fc:	beq	fead03ac <optarg@@GLIBC_2.4+0xfea9318c>
   25900:	andeq	pc, r3, r0, lsl #30
   25904:	ldrb	r1, [r1, #6]
   25908:	tst	r1, #16
   2590c:	bne	25a28 <__assert_fail@plt+0x14088>
   25910:	cmp	r2, #4
   25914:	bne	25aa4 <__assert_fail@plt+0x14104>
   25918:	ldr	r3, [r3, r8]
   2591c:	add	r3, r3, #1
   25920:	cmp	fp, r3
   25924:	ble	25a50 <__assert_fail@plt+0x140b0>
   25928:	add	r2, r4, r3, lsl #3
   2592c:	ldr	r6, [r2, #4]
   25930:	ldr	r2, [r4, r3, lsl #3]
   25934:	sub	r6, r6, r2
   25938:	cmp	r9, #0
   2593c:	bne	25ad8 <__assert_fail@plt+0x14138>
   25940:	cmp	r6, #0
   25944:	beq	25a5c <__assert_fail@plt+0x140bc>
   25948:	ldr	r3, [r5, #12]
   2594c:	ldr	sl, [r3, sl, lsl #2]
   25950:	ldr	r3, [sp, #100]	; 0x64
   25954:	add	r6, r6, r3
   25958:	str	r6, [sp, #100]	; 0x64
   2595c:	cmp	r9, #0
   25960:	beq	25994 <__assert_fail@plt+0x13ff4>
   25964:	ldr	r3, [sp, #360]	; 0x168
   25968:	cmp	r6, r3
   2596c:	bgt	260b4 <__assert_fail@plt+0x14714>
   25970:	ldr	r3, [sp, #368]	; 0x170
   25974:	ldr	r0, [r3, r6, lsl #2]
   25978:	cmp	r0, #0
   2597c:	beq	260bc <__assert_fail@plt+0x1471c>
   25980:	mov	r1, sl
   25984:	add	r0, r0, #4
   25988:	bl	1bbd0 <__assert_fail@plt+0xa230>
   2598c:	cmp	r0, #0
   25990:	beq	260c4 <__assert_fail@plt+0x14724>
   25994:	mov	r3, #0
   25998:	str	r3, [sp, #108]	; 0x6c
   2599c:	cmp	sl, #0
   259a0:	blt	25dc0 <__assert_fail@plt+0x14420>
   259a4:	ldr	r2, [sp, #100]	; 0x64
   259a8:	ldr	r3, [r4, #4]
   259ac:	cmp	r2, r3
   259b0:	bgt	25b4c <__assert_fail@plt+0x141ac>
   259b4:	lsl	r1, sl, #3
   259b8:	ldr	r3, [sp, #24]
   259bc:	ldr	r3, [r3]
   259c0:	add	r0, r3, r1
   259c4:	ldrb	ip, [r0, #4]
   259c8:	cmp	ip, #8
   259cc:	beq	255d4 <__assert_fail@plt+0x13c34>
   259d0:	cmp	ip, #9
   259d4:	bne	255f0 <__assert_fail@plt+0x13c50>
   259d8:	ldr	r3, [r3, r1]
   259dc:	add	r3, r3, #1
   259e0:	cmp	fp, r3
   259e4:	ble	255f0 <__assert_fail@plt+0x13c50>
   259e8:	add	r1, r4, r3, lsl #3
   259ec:	ldr	ip, [r4, r3, lsl #3]
   259f0:	cmp	r2, ip
   259f4:	bgt	25694 <__assert_fail@plt+0x13cf4>
   259f8:	ldrb	r0, [r0, #6]
   259fc:	tst	r0, #8
   25a00:	beq	256ac <__assert_fail@plt+0x13d0c>
   25a04:	ldr	r0, [sp, #16]
   25a08:	ldr	r3, [r0, r3, lsl #3]
   25a0c:	cmn	r3, #1
   25a10:	beq	256ac <__assert_fail@plt+0x13d0c>
   25a14:	ldr	r2, [sp, #32]
   25a18:	mov	r1, r0
   25a1c:	mov	r0, r4
   25a20:	bl	115d4 <memcpy@plt>
   25a24:	b	255f0 <__assert_fail@plt+0x13c50>
   25a28:	ldr	r3, [sp, #100]	; 0x64
   25a2c:	add	r2, sp, #268	; 0x10c
   25a30:	mov	r1, sl
   25a34:	mov	r0, r5
   25a38:	bl	22494 <__assert_fail@plt+0x10af4>
   25a3c:	subs	r6, r0, #0
   25a40:	beq	25aa4 <__assert_fail@plt+0x14104>
   25a44:	ldr	r3, [r5, #12]
   25a48:	ldr	sl, [r3, r7, lsl #2]
   25a4c:	b	25950 <__assert_fail@plt+0x13fb0>
   25a50:	cmp	r9, #0
   25a54:	mvnne	sl, #0
   25a58:	bne	2599c <__assert_fail@plt+0x13ffc>
   25a5c:	mov	r1, sl
   25a60:	add	r0, sp, #104	; 0x68
   25a64:	bl	1f120 <__assert_fail@plt+0xd780>
   25a68:	cmp	r0, #0
   25a6c:	beq	25b44 <__assert_fail@plt+0x141a4>
   25a70:	ldr	r3, [r5, #20]
   25a74:	add	r2, r7, r7, lsl #1
   25a78:	add	r3, r3, r2, lsl #2
   25a7c:	ldr	r3, [r3, #8]
   25a80:	ldr	sl, [r3]
   25a84:	ldr	r3, [sp, #368]	; 0x170
   25a88:	ldr	r2, [sp, #100]	; 0x64
   25a8c:	ldr	r0, [r3, r2, lsl #2]
   25a90:	mov	r1, sl
   25a94:	add	r0, r0, #4
   25a98:	bl	1bbd0 <__assert_fail@plt+0xa230>
   25a9c:	cmp	r0, #0
   25aa0:	bne	2599c <__assert_fail@plt+0x13ffc>
   25aa4:	ldr	r1, [r5]
   25aa8:	ldr	r2, [sp, #100]	; 0x64
   25aac:	add	r1, r1, r8
   25ab0:	add	r0, sp, #268	; 0x10c
   25ab4:	bl	1fb4c <__assert_fail@plt+0xe1ac>
   25ab8:	cmp	r0, #0
   25abc:	mvneq	sl, #0
   25ac0:	beq	25dc0 <__assert_fail@plt+0x14420>
   25ac4:	ldr	r3, [r5, #12]
   25ac8:	ldr	sl, [r3, r7, lsl #2]
   25acc:	ldr	r6, [sp, #100]	; 0x64
   25ad0:	add	r6, r6, #1
   25ad4:	b	25958 <__assert_fail@plt+0x13fb8>
   25ad8:	add	r2, r4, r3, lsl #3
   25adc:	ldr	r0, [r4, r3, lsl #3]
   25ae0:	cmn	r0, #1
   25ae4:	beq	2609c <__assert_fail@plt+0x146fc>
   25ae8:	ldr	r3, [r2, #4]
   25aec:	cmn	r3, #1
   25af0:	beq	260a4 <__assert_fail@plt+0x14704>
   25af4:	cmp	r6, #0
   25af8:	beq	25a5c <__assert_fail@plt+0x140bc>
   25afc:	ldr	ip, [sp, #272]	; 0x110
   25b00:	ldr	r1, [sp, #100]	; 0x64
   25b04:	ldr	r3, [sp, #296]	; 0x128
   25b08:	sub	r3, r3, r1
   25b0c:	cmp	r6, r3
   25b10:	bgt	260ac <__assert_fail@plt+0x1470c>
   25b14:	mov	r2, r6
   25b18:	add	r1, ip, r1
   25b1c:	add	r0, ip, r0
   25b20:	bl	1161c <memcmp@plt>
   25b24:	cmp	r0, #0
   25b28:	beq	25a44 <__assert_fail@plt+0x140a4>
   25b2c:	mvn	sl, #0
   25b30:	b	25dc0 <__assert_fail@plt+0x14420>
   25b34:	mov	sl, r6
   25b38:	b	2599c <__assert_fail@plt+0x13ffc>
   25b3c:	ldr	fp, [sp, #12]
   25b40:	b	257b0 <__assert_fail@plt+0x13e10>
   25b44:	ldr	fp, [sp, #12]
   25b48:	b	257b0 <__assert_fail@plt+0x13e10>
   25b4c:	ldr	fp, [sp, #12]
   25b50:	ldr	r0, [sp, #112]	; 0x70
   25b54:	bl	1b854 <__assert_fail@plt+0x9eb4>
   25b58:	add	r0, sp, #128	; 0x80
   25b5c:	bl	1ef0c <__assert_fail@plt+0xd56c>
   25b60:	mov	r0, r9
   25b64:	bl	1ef40 <__assert_fail@plt+0xd5a0>
   25b68:	b	25758 <__assert_fail@plt+0x13db8>
   25b6c:	ldr	r5, [r0, #-4]
   25b70:	add	r5, r5, ip
   25b74:	str	r5, [r0, #-4]
   25b78:	ldr	r0, [r3, #4]
   25b7c:	add	r0, r0, ip
   25b80:	str	r0, [r3, #4]
   25b84:	add	r3, r3, #8
   25b88:	add	r2, r2, #8
   25b8c:	cmp	lr, r3
   25b90:	beq	25bd4 <__assert_fail@plt+0x14234>
   25b94:	mov	r0, r2
   25b98:	ldr	r5, [r2, #-4]
   25b9c:	cmn	r5, #1
   25ba0:	beq	25b84 <__assert_fail@plt+0x141e4>
   25ba4:	cmp	r4, #0
   25ba8:	beq	25b6c <__assert_fail@plt+0x141cc>
   25bac:	cmp	r5, r7
   25bb0:	ldrne	r5, [r8, r5, lsl #2]
   25bb4:	moveq	r5, r9
   25bb8:	str	r5, [r2, #-4]
   25bbc:	ldr	r5, [r3, #4]
   25bc0:	cmp	r7, r5
   25bc4:	ldrne	r5, [r8, r5, lsl #2]
   25bc8:	moveq	r5, r9
   25bcc:	str	r5, [r3, #4]
   25bd0:	b	25b6c <__assert_fail@plt+0x141cc>
   25bd4:	ldr	r2, [sp, #64]	; 0x40
   25bd8:	cmp	r2, #0
   25bdc:	ble	25c04 <__assert_fail@plt+0x14264>
   25be0:	ldr	r2, [sp, #460]	; 0x1cc
   25be4:	ldr	r0, [sp, #456]	; 0x1c8
   25be8:	add	r0, r2, r0, lsl #3
   25bec:	mvn	r2, #0
   25bf0:	str	r2, [r3]
   25bf4:	str	r2, [r3, #4]
   25bf8:	add	r3, r3, #8
   25bfc:	cmp	r0, r3
   25c00:	bne	25bf0 <__assert_fail@plt+0x14250>
   25c04:	ldr	r3, [fp, #132]	; 0x84
   25c08:	cmp	r3, #0
   25c0c:	beq	25d34 <__assert_fail@plt+0x14394>
   25c10:	ldr	r3, [sp, #60]	; 0x3c
   25c14:	sub	r0, r3, #1
   25c18:	mov	r3, #0
   25c1c:	ldr	ip, [sp, #460]	; 0x1cc
   25c20:	b	25c4c <__assert_fail@plt+0x142ac>
   25c24:	add	r2, r2, #1
   25c28:	ldr	r2, [ip, r2, lsl #3]
   25c2c:	str	r2, [r1, #8]
   25c30:	ldr	r2, [fp, #132]	; 0x84
   25c34:	ldr	r2, [r2, r3, lsl #2]
   25c38:	add	r2, ip, r2, lsl #3
   25c3c:	ldr	r2, [r2, #12]
   25c40:	str	r2, [r1, #12]
   25c44:	add	r3, r3, #1
   25c48:	add	r1, r1, #8
   25c4c:	cmp	r0, r3
   25c50:	beq	25d34 <__assert_fail@plt+0x14394>
   25c54:	ldr	r2, [fp, #132]	; 0x84
   25c58:	ldr	r2, [r2, r3, lsl #2]
   25c5c:	cmp	r3, r2
   25c60:	bne	25c24 <__assert_fail@plt+0x14284>
   25c64:	b	25c44 <__assert_fail@plt+0x142a4>
   25c68:	mov	r3, #12
   25c6c:	str	r3, [sp, #28]
   25c70:	b	25d34 <__assert_fail@plt+0x14394>
   25c74:	mov	r3, #12
   25c78:	str	r3, [sp, #28]
   25c7c:	b	25d34 <__assert_fail@plt+0x14394>
   25c80:	mov	r3, #1
   25c84:	str	r3, [sp, #28]
   25c88:	b	25d34 <__assert_fail@plt+0x14394>
   25c8c:	ldr	fp, [sp, #44]	; 0x2c
   25c90:	mov	r3, #12
   25c94:	str	r3, [sp, #28]
   25c98:	b	25d34 <__assert_fail@plt+0x14394>
   25c9c:	ldr	fp, [sp, #44]	; 0x2c
   25ca0:	str	r0, [sp, #28]
   25ca4:	b	25d34 <__assert_fail@plt+0x14394>
   25ca8:	ldr	fp, [sp, #44]	; 0x2c
   25cac:	b	25d34 <__assert_fail@plt+0x14394>
   25cb0:	add	r0, sp, #268	; 0x10c
   25cb4:	bl	1ee60 <__assert_fail@plt+0xd4c0>
   25cb8:	ldr	r0, [sp, #400]	; 0x190
   25cbc:	bl	1b854 <__assert_fail@plt+0x9eb4>
   25cc0:	ldr	r0, [sp, #384]	; 0x180
   25cc4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   25cc8:	b	25d48 <__assert_fail@plt+0x143a8>
   25ccc:	mov	r3, #1
   25cd0:	str	r3, [sp, #28]
   25cd4:	b	25d50 <__assert_fail@plt+0x143b0>
   25cd8:	mov	r3, #1
   25cdc:	str	r3, [sp, #28]
   25ce0:	b	25d50 <__assert_fail@plt+0x143b0>
   25ce4:	mov	r3, #1
   25ce8:	str	r3, [sp, #28]
   25cec:	b	25d50 <__assert_fail@plt+0x143b0>
   25cf0:	ldr	r3, [sp, #36]	; 0x24
   25cf4:	str	r3, [sp, #272]	; 0x110
   25cf8:	ldr	r3, [fp, #92]	; 0x5c
   25cfc:	ldr	r2, [sp, #48]	; 0x30
   25d00:	cmp	r3, #1
   25d04:	movgt	r2, #0
   25d08:	mov	r3, r2
   25d0c:	b	24904 <__assert_fail@plt+0x12f64>
   25d10:	mov	r3, #12
   25d14:	str	r3, [sp, #28]
   25d18:	b	25d34 <__assert_fail@plt+0x14394>
   25d1c:	mov	r3, #0
   25d20:	str	r3, [sp, #104]	; 0x68
   25d24:	b	252ac <__assert_fail@plt+0x1390c>
   25d28:	ldr	fp, [sp, #44]	; 0x2c
   25d2c:	mov	r3, #12
   25d30:	str	r3, [sp, #28]
   25d34:	ldr	r0, [sp, #368]	; 0x170
   25d38:	bl	1b854 <__assert_fail@plt+0x9eb4>
   25d3c:	ldr	r3, [fp, #76]	; 0x4c
   25d40:	cmp	r3, #0
   25d44:	bne	25cb0 <__assert_fail@plt+0x14310>
   25d48:	add	r0, sp, #268	; 0x10c
   25d4c:	bl	1eaf8 <__assert_fail@plt+0xd158>
   25d50:	ldr	r0, [sp, #28]
   25d54:	add	sp, sp, #412	; 0x19c
   25d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d5c:	ldr	fp, [sp, #44]	; 0x2c
   25d60:	mov	r3, #12
   25d64:	str	r3, [sp, #28]
   25d68:	b	25d34 <__assert_fail@plt+0x14394>
   25d6c:	mov	r3, #0
   25d70:	ldr	r2, [sp, #460]	; 0x1cc
   25d74:	str	r3, [r2]
   25d78:	ldr	r3, [sp, #360]	; 0x168
   25d7c:	str	r3, [r2, #4]
   25d80:	b	25764 <__assert_fail@plt+0x13dc4>
   25d84:	ldr	r3, [sp, #24]
   25d88:	ldr	r3, [r3]
   25d8c:	str	r3, [sp, #24]
   25d90:	mov	r9, #0
   25d94:	str	r9, [sp, #116]	; 0x74
   25d98:	mov	r3, #2
   25d9c:	str	r3, [sp, #120]	; 0x78
   25da0:	str	r9, [sp, #124]	; 0x7c
   25da4:	str	r9, [sp, #128]	; 0x80
   25da8:	mov	r3, #16
   25dac:	str	r3, [sp, #132]	; 0x84
   25db0:	add	r3, sp, #140	; 0x8c
   25db4:	str	r3, [sp, #136]	; 0x88
   25db8:	b	254d4 <__assert_fail@plt+0x13b34>
   25dbc:	mvn	sl, #1
   25dc0:	cmn	sl, #2
   25dc4:	beq	25b3c <__assert_fail@plt+0x1419c>
   25dc8:	add	r3, sp, #104	; 0x68
   25dcc:	str	r3, [sp, #4]
   25dd0:	ldr	r3, [sp, #16]
   25dd4:	str	r3, [sp]
   25dd8:	mov	r3, r4
   25ddc:	mov	r2, fp
   25de0:	ldr	r1, [sp, #40]	; 0x28
   25de4:	mov	r0, r9
   25de8:	bl	20b08 <__assert_fail@plt+0xf168>
   25dec:	subs	sl, r0, #0
   25df0:	bge	259a4 <__assert_fail@plt+0x14004>
   25df4:	ldr	fp, [sp, #12]
   25df8:	ldr	r0, [sp, #112]	; 0x70
   25dfc:	bl	1b854 <__assert_fail@plt+0x9eb4>
   25e00:	add	r0, sp, #128	; 0x80
   25e04:	bl	1ef0c <__assert_fail@plt+0xd56c>
   25e08:	mov	r0, r9
   25e0c:	bl	1ef40 <__assert_fail@plt+0xd5a0>
   25e10:	mov	r3, #1
   25e14:	str	r3, [sp, #28]
   25e18:	b	25d34 <__assert_fail@plt+0x14394>
   25e1c:	mov	r3, #12
   25e20:	str	r3, [sp, #28]
   25e24:	b	25d34 <__assert_fail@plt+0x14394>
   25e28:	ldr	r3, [sp, #104]	; 0x68
   25e2c:	cmp	r3, #0
   25e30:	bne	25fb4 <__assert_fail@plt+0x14614>
   25e34:	ldr	r2, [sp, #20]
   25e38:	cmp	r2, #0
   25e3c:	ldrne	r3, [r2]
   25e40:	ldrne	r1, [sp, #32]
   25e44:	addne	r3, r3, r1
   25e48:	strne	r3, [r2]
   25e4c:	cmn	sl, #1
   25e50:	beq	25ff4 <__assert_fail@plt+0x14654>
   25e54:	cmn	sl, #2
   25e58:	beq	25c8c <__assert_fail@plt+0x142ec>
   25e5c:	str	sl, [sp, #360]	; 0x168
   25e60:	ldr	r3, [sp, #60]	; 0x3c
   25e64:	cmp	r3, #1
   25e68:	movls	fp, #0
   25e6c:	movhi	fp, #1
   25e70:	ldr	r3, [sp, #24]
   25e74:	ldrb	r3, [r3, #28]
   25e78:	eor	r3, r3, #16
   25e7c:	ands	r3, fp, r3, lsr #4
   25e80:	beq	25340 <__assert_fail@plt+0x139a0>
   25e84:	mov	r2, sl
   25e88:	ldr	r3, [sp, #368]	; 0x170
   25e8c:	ldr	r1, [r3, sl, lsl #2]
   25e90:	add	r0, sp, #268	; 0x10c
   25e94:	bl	20a30 <__assert_fail@plt+0xf090>
   25e98:	str	r0, [sp, #364]	; 0x16c
   25e9c:	ldr	r3, [sp, #44]	; 0x2c
   25ea0:	ldrb	r3, [r3, #88]	; 0x58
   25ea4:	tst	r3, #1
   25ea8:	bne	25ebc <__assert_fail@plt+0x1451c>
   25eac:	ldr	r3, [sp, #44]	; 0x2c
   25eb0:	ldr	r3, [r3, #76]	; 0x4c
   25eb4:	cmp	r3, #0
   25eb8:	beq	25564 <__assert_fail@plt+0x13bc4>
   25ebc:	ldr	r9, [sp, #352]	; 0x160
   25ec0:	ldr	r7, [sp, #364]	; 0x16c
   25ec4:	cmn	sl, #-1073741822	; 0xc0000002
   25ec8:	bhi	25d5c <__assert_fail@plt+0x143bc>
   25ecc:	add	r4, sl, #1
   25ed0:	lsl	r4, r4, #2
   25ed4:	mov	r0, r4
   25ed8:	bl	1b954 <__assert_fail@plt+0x9fb4>
   25edc:	subs	r5, r0, #0
   25ee0:	beq	26064 <__assert_fail@plt+0x146c4>
   25ee4:	ldr	r3, [r9, #76]	; 0x4c
   25ee8:	cmp	r3, #0
   25eec:	beq	25390 <__assert_fail@plt+0x139f0>
   25ef0:	mov	r0, r4
   25ef4:	bl	1b954 <__assert_fail@plt+0x9fb4>
   25ef8:	subs	r6, r0, #0
   25efc:	beq	26064 <__assert_fail@plt+0x146c4>
   25f00:	str	fp, [sp, #12]
   25f04:	add	fp, sl, #1
   25f08:	lsl	r4, fp, #2
   25f0c:	mov	r2, r4
   25f10:	mov	r1, #0
   25f14:	mov	r0, r6
   25f18:	bl	11814 <memset@plt>
   25f1c:	str	r5, [sp, #128]	; 0x80
   25f20:	str	r6, [sp, #132]	; 0x84
   25f24:	str	r7, [sp, #136]	; 0x88
   25f28:	str	sl, [sp, #140]	; 0x8c
   25f2c:	mov	r3, #0
   25f30:	str	r3, [sp, #144]	; 0x90
   25f34:	str	r3, [sp, #148]	; 0x94
   25f38:	str	r3, [sp, #152]	; 0x98
   25f3c:	add	r1, sp, #128	; 0x80
   25f40:	add	r0, sp, #268	; 0x10c
   25f44:	bl	2440c <__assert_fail@plt+0x12a6c>
   25f48:	mov	r8, r0
   25f4c:	ldr	r0, [sp, #152]	; 0x98
   25f50:	bl	1b854 <__assert_fail@plt+0x9eb4>
   25f54:	cmp	r8, #0
   25f58:	bne	25fdc <__assert_fail@plt+0x1463c>
   25f5c:	ldr	r3, [r5]
   25f60:	cmp	r3, #0
   25f64:	bne	2535c <__assert_fail@plt+0x139bc>
   25f68:	ldr	r3, [r6]
   25f6c:	cmp	r3, #0
   25f70:	bne	2535c <__assert_fail@plt+0x139bc>
   25f74:	sub	r4, r4, #4
   25f78:	ldr	r3, [sp, #368]	; 0x170
   25f7c:	add	r3, r3, r4
   25f80:	subs	sl, sl, #1
   25f84:	bmi	26088 <__assert_fail@plt+0x146e8>
   25f88:	ldr	r1, [r3, #-4]!
   25f8c:	cmp	r1, #0
   25f90:	beq	25f80 <__assert_fail@plt+0x145e0>
   25f94:	ldrb	r2, [r1, #52]	; 0x34
   25f98:	tst	r2, #16
   25f9c:	beq	25f80 <__assert_fail@plt+0x145e0>
   25fa0:	mov	r2, sl
   25fa4:	add	r0, sp, #268	; 0x10c
   25fa8:	bl	20a30 <__assert_fail@plt+0xf090>
   25fac:	mov	r7, r0
   25fb0:	b	25f04 <__assert_fail@plt+0x14564>
   25fb4:	ldr	fp, [sp, #44]	; 0x2c
   25fb8:	b	25d2c <__assert_fail@plt+0x1438c>
   25fbc:	mov	r2, sl
   25fc0:	ldr	r3, [sp, #368]	; 0x170
   25fc4:	ldr	r1, [r3, sl, lsl #2]
   25fc8:	add	r0, sp, #268	; 0x10c
   25fcc:	bl	20a30 <__assert_fail@plt+0xf090>
   25fd0:	str	r0, [sp, #364]	; 0x16c
   25fd4:	b	25eac <__assert_fail@plt+0x1450c>
   25fd8:	mov	r6, #0
   25fdc:	mov	r0, r5
   25fe0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   25fe4:	mov	r0, r6
   25fe8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   25fec:	cmp	r8, #1
   25ff0:	bne	26058 <__assert_fail@plt+0x146b8>
   25ff4:	add	r0, sp, #268	; 0x10c
   25ff8:	bl	1ee60 <__assert_fail@plt+0xd4c0>
   25ffc:	ldr	r3, [sp, #404]	; 0x194
   26000:	ldr	r2, [sp, #84]	; 0x54
   26004:	add	r3, r2, r3
   26008:	str	r3, [sp, #404]	; 0x194
   2600c:	ldr	r2, [sp, #40]	; 0x28
   26010:	cmp	r2, r3
   26014:	movge	r2, #0
   26018:	movlt	r2, #1
   2601c:	ldr	r1, [sp, #56]	; 0x38
   26020:	cmp	r1, r3
   26024:	movle	r3, r2
   26028:	orrgt	r3, r2, #1
   2602c:	cmp	r3, #0
   26030:	bne	25554 <__assert_fail@plt+0x13bb4>
   26034:	ldr	r3, [sp, #72]	; 0x48
   26038:	cmp	r3, #4
   2603c:	ldrls	pc, [pc, r3, lsl #2]
   26040:	b	24d68 <__assert_fail@plt+0x133c8>
   26044:			; <UNDEFINED> instruction: 0x00024bb0
   26048:			; <UNDEFINED> instruction: 0x00024bb0
   2604c:	andeq	r4, r2, r0, asr fp
   26050:	andeq	r4, r2, r0, ror #21
   26054:	andeq	r4, r2, r8, lsr ip
   26058:	ldr	fp, [sp, #44]	; 0x2c
   2605c:	mov	r3, r8
   26060:	b	2607c <__assert_fail@plt+0x146dc>
   26064:	ldr	fp, [sp, #44]	; 0x2c
   26068:	mov	r0, r5
   2606c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   26070:	mov	r0, #0
   26074:	bl	1b854 <__assert_fail@plt+0x9eb4>
   26078:	mov	r3, #12
   2607c:	str	r3, [sp, #28]
   26080:	b	25d34 <__assert_fail@plt+0x14394>
   26084:	mov	r6, #0
   26088:	mov	r0, r5
   2608c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   26090:	mov	r0, r6
   26094:	bl	1b854 <__assert_fail@plt+0x9eb4>
   26098:	b	25ff4 <__assert_fail@plt+0x14654>
   2609c:	mvn	sl, #0
   260a0:	b	25dc0 <__assert_fail@plt+0x14420>
   260a4:	mvn	sl, #0
   260a8:	b	25dc0 <__assert_fail@plt+0x14420>
   260ac:	mvn	sl, #0
   260b0:	b	25dc0 <__assert_fail@plt+0x14420>
   260b4:	mvn	sl, #0
   260b8:	b	25dc0 <__assert_fail@plt+0x14420>
   260bc:	mvn	sl, #0
   260c0:	b	25dc0 <__assert_fail@plt+0x14420>
   260c4:	mvn	sl, #0
   260c8:	b	25dc0 <__assert_fail@plt+0x14420>
   260cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   260d0:	sub	sp, sp, #156	; 0x9c
   260d4:	mov	r9, r0
   260d8:	mov	r4, r1
   260dc:	mov	r8, r2
   260e0:	str	r3, [sp, #24]
   260e4:	ldr	sl, [sp, #196]	; 0xc4
   260e8:	ldr	r3, [r1]
   260ec:	str	r3, [sp, #20]
   260f0:	ldrb	r2, [r2, #4]
   260f4:	sub	r3, r2, #1
   260f8:	cmp	r3, #35	; 0x23
   260fc:	ldrls	pc, [pc, r3, lsl #2]
   26100:	b	26f20 <__assert_fail@plt+0x15580>
   26104:	muleq	r2, r4, r1
   26108:	andeq	r7, r2, r8, ror #6
   2610c:	andeq	r6, r2, r0, lsr #30
   26110:	strdeq	r6, [r2], -r4
   26114:	andeq	r6, r2, r0, lsr lr
   26118:	andeq	r6, r2, r0, lsr #30
   2611c:	andeq	r6, r2, r0, lsr #30
   26120:	andeq	r6, r2, ip, asr r2
   26124:	andeq	r6, r2, r8, lsr #23
   26128:	andeq	r7, r2, r8, ror #6
   2612c:	andeq	r6, r2, r4, lsl #23
   26130:	andeq	r6, r2, r8, asr #24
   26134:	andeq	r6, r2, r0, lsr #30
   26138:	andeq	r6, r2, r0, lsr #30
   2613c:	andeq	r6, r2, r0, lsr #30
   26140:	andeq	r6, r2, r0, lsr #30
   26144:	andeq	r6, r2, r0, lsr #30
   26148:	andeq	r6, r2, r4, lsl #23
   2614c:	andeq	r6, r2, r4, lsl #23
   26150:	andeq	r6, r2, r8, lsr r3
   26154:	andeq	r6, r2, r0, lsr #30
   26158:	andeq	r6, r2, r0, lsr #30
   2615c:	andeq	r6, r2, ip, ror #22
   26160:			; <UNDEFINED> instruction: 0x00026bb0
   26164:	andeq	r6, r2, r0, lsr #30
   26168:	andeq	r6, r2, r0, lsr #30
   2616c:	andeq	r6, r2, r0, lsr #30
   26170:	andeq	r6, r2, r0, lsr #30
   26174:	andeq	r6, r2, r0, lsr #30
   26178:	andeq	r6, r2, r0, lsr #30
   2617c:	andeq	r6, r2, r0, lsr #30
   26180:	andeq	r6, r2, r0, ror lr
   26184:	andeq	r6, r2, r0, ror lr
   26188:	andeq	r6, r2, r0, asr #29
   2618c:	andeq	r6, r2, r0, asr #29
   26190:	andeq	r6, r2, r0, lsl pc
   26194:	mov	r3, r8
   26198:	mov	r2, #0
   2619c:	mov	r1, r2
   261a0:	ldr	r0, [sp, #20]
   261a4:	bl	1c7f8 <__assert_fail@plt+0xae58>
   261a8:	subs	fp, r0, #0
   261ac:	moveq	r3, #12
   261b0:	streq	r3, [sl]
   261b4:	beq	271a0 <__assert_fail@plt+0x15800>
   261b8:	ldr	r3, [sp, #20]
   261bc:	ldr	r3, [r3, #92]	; 0x5c
   261c0:	cmp	r3, #1
   261c4:	movgt	r6, #0
   261c8:	movgt	r5, #16
   261cc:	ble	26bdc <__assert_fail@plt+0x1523c>
   261d0:	ldr	r3, [r9, #40]	; 0x28
   261d4:	ldr	r2, [r9, #56]	; 0x38
   261d8:	cmp	r2, r3
   261dc:	ble	26bdc <__assert_fail@plt+0x1523c>
   261e0:	ldr	r2, [r9, #28]
   261e4:	cmp	r3, r2
   261e8:	beq	26bdc <__assert_fail@plt+0x1523c>
   261ec:	ldr	r2, [r9, #8]
   261f0:	ldr	r3, [r2, r3, lsl #2]
   261f4:	cmn	r3, #1
   261f8:	bne	26bdc <__assert_fail@plt+0x1523c>
   261fc:	ldr	r2, [sp, #24]
   26200:	mov	r1, r9
   26204:	mov	r0, r8
   26208:	bl	1e2f4 <__assert_fail@plt+0xc954>
   2620c:	mov	r3, r8
   26210:	mov	r2, r6
   26214:	mov	r1, r6
   26218:	ldr	r7, [sp, #20]
   2621c:	mov	r0, r7
   26220:	bl	1c7f8 <__assert_fail@plt+0xae58>
   26224:	mov	r4, r0
   26228:	mov	r3, r5
   2622c:	mov	r2, r0
   26230:	mov	r1, fp
   26234:	mov	r0, r7
   26238:	bl	1c96c <__assert_fail@plt+0xafcc>
   2623c:	mov	fp, r0
   26240:	cmp	r0, #0
   26244:	cmpne	r4, #0
   26248:	bne	261d0 <__assert_fail@plt+0x14830>
   2624c:	mov	r3, #12
   26250:	str	r3, [sl]
   26254:	mov	fp, #0
   26258:	b	271a0 <__assert_fail@plt+0x15800>
   2625c:	ldr	r5, [r1, #24]
   26260:	add	r3, r5, #1
   26264:	str	r3, [r1, #24]
   26268:	ldr	r6, [sp, #24]
   2626c:	orr	r2, r6, #8388608	; 0x800000
   26270:	mov	r1, r0
   26274:	mov	r0, r8
   26278:	bl	1e2f4 <__assert_fail@plt+0xc954>
   2627c:	ldrb	r3, [r8, #4]
   26280:	cmp	r3, #9
   26284:	beq	262ec <__assert_fail@plt+0x1494c>
   26288:	str	sl, [sp, #4]
   2628c:	ldr	r3, [sp, #192]	; 0xc0
   26290:	add	r3, r3, #1
   26294:	str	r3, [sp]
   26298:	mov	r3, r6
   2629c:	mov	r2, r8
   262a0:	mov	r1, r4
   262a4:	mov	r0, r9
   262a8:	bl	275d4 <__assert_fail@plt+0x15c34>
   262ac:	ldr	r3, [sl]
   262b0:	cmp	r3, #0
   262b4:	beq	262c0 <__assert_fail@plt+0x14920>
   262b8:	mov	fp, #0
   262bc:	b	271a0 <__assert_fail@plt+0x15800>
   262c0:	ldrb	r3, [r8, #4]
   262c4:	cmp	r3, #9
   262c8:	beq	262f0 <__assert_fail@plt+0x14950>
   262cc:	cmp	r0, #0
   262d0:	beq	262e0 <__assert_fail@plt+0x14940>
   262d4:	mov	r2, #0
   262d8:	ldr	r1, [pc, #3876]	; 27204 <__assert_fail@plt+0x15864>
   262dc:	bl	1c608 <__assert_fail@plt+0xac68>
   262e0:	mov	r3, #8
   262e4:	str	r3, [sl]
   262e8:	b	262b8 <__assert_fail@plt+0x14918>
   262ec:	mov	r0, #0
   262f0:	cmp	r5, #8
   262f4:	bhi	2630c <__assert_fail@plt+0x1496c>
   262f8:	ldr	r1, [sp, #20]
   262fc:	ldr	r3, [r1, #84]	; 0x54
   26300:	mov	r2, #1
   26304:	orr	r3, r3, r2, lsl r5
   26308:	str	r3, [r1, #84]	; 0x54
   2630c:	mov	r3, #17
   26310:	mov	r2, #0
   26314:	mov	r1, r0
   26318:	ldr	r0, [sp, #20]
   2631c:	bl	1c96c <__assert_fail@plt+0xafcc>
   26320:	subs	fp, r0, #0
   26324:	moveq	r3, #12
   26328:	streq	r3, [sl]
   2632c:	beq	271a0 <__assert_fail@plt+0x15800>
   26330:	str	r5, [fp, #20]
   26334:	b	26bdc <__assert_fail@plt+0x1523c>
   26338:	mov	r3, #0
   2633c:	str	r3, [sp, #60]	; 0x3c
   26340:	mov	r1, #1
   26344:	mov	r0, #32
   26348:	bl	1b548 <__assert_fail@plt+0x9ba8>
   2634c:	mov	r5, r0
   26350:	mov	r1, #1
   26354:	mov	r0, #40	; 0x28
   26358:	bl	1b548 <__assert_fail@plt+0x9ba8>
   2635c:	mov	r7, r0
   26360:	cmp	r0, #0
   26364:	cmpne	r5, #0
   26368:	moveq	r3, #1
   2636c:	movne	r3, #0
   26370:	str	r3, [sp, #40]	; 0x28
   26374:	beq	263e4 <__assert_fail@plt+0x14a44>
   26378:	ldr	r2, [sp, #24]
   2637c:	mov	r1, r9
   26380:	mov	r0, r8
   26384:	bl	1bdc0 <__assert_fail@plt+0xa420>
   26388:	str	r0, [sp, #28]
   2638c:	ldrb	r3, [r8, #4]
   26390:	cmp	r3, #2
   26394:	streq	r3, [sl]
   26398:	beq	2652c <__assert_fail@plt+0x14b8c>
   2639c:	cmp	r3, #25
   263a0:	beq	26400 <__assert_fail@plt+0x14a60>
   263a4:	ldr	r3, [sp, #40]	; 0x28
   263a8:	str	r3, [sp, #44]	; 0x2c
   263ac:	ldrb	r3, [r8, #4]
   263b0:	cmp	r3, #21
   263b4:	moveq	r3, #1
   263b8:	strbeq	r3, [r8, #4]
   263bc:	mov	fp, #0
   263c0:	mov	r3, #1
   263c4:	str	fp, [sp, #36]	; 0x24
   263c8:	ldr	r2, [sp, #24]
   263cc:	lsr	r2, r2, #16
   263d0:	and	r2, r2, r3
   263d4:	str	r2, [sp, #52]	; 0x34
   263d8:	str	sl, [sp, #196]	; 0xc4
   263dc:	ldr	sl, [sp, #20]
   263e0:	b	267dc <__assert_fail@plt+0x14e3c>
   263e4:	mov	r0, r5
   263e8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   263ec:	mov	r0, r7
   263f0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   263f4:	mov	r3, #12
   263f8:	str	r3, [sl]
   263fc:	b	2653c <__assert_fail@plt+0x14b9c>
   26400:	ldrb	r3, [r7, #16]
   26404:	orr	r3, r3, #1
   26408:	strb	r3, [r7, #16]
   2640c:	ldr	r3, [sp, #24]
   26410:	tst	r3, #256	; 0x100
   26414:	ldrne	r3, [r5]
   26418:	orrne	r3, r3, #1024	; 0x400
   2641c:	strne	r3, [r5]
   26420:	ldr	r3, [r9, #40]	; 0x28
   26424:	ldr	r2, [sp, #28]
   26428:	add	r3, r3, r2
   2642c:	str	r3, [r9, #40]	; 0x28
   26430:	ldr	r2, [sp, #24]
   26434:	mov	r1, r9
   26438:	mov	r0, r8
   2643c:	bl	1bdc0 <__assert_fail@plt+0xa420>
   26440:	str	r0, [sp, #28]
   26444:	ldrb	r3, [r8, #4]
   26448:	cmp	r3, #2
   2644c:	streq	r3, [sl]
   26450:	beq	2652c <__assert_fail@plt+0x14b8c>
   26454:	mov	r3, #1
   26458:	str	r3, [sp, #44]	; 0x2c
   2645c:	b	263ac <__assert_fail@plt+0x14a0c>
   26460:	ldr	sl, [sp, #196]	; 0xc4
   26464:	str	r0, [sl]
   26468:	b	2652c <__assert_fail@plt+0x14b8c>
   2646c:	ldr	sl, [sp, #196]	; 0xc4
   26470:	mov	r3, #7
   26474:	str	r3, [sl]
   26478:	b	2652c <__assert_fail@plt+0x14b8c>
   2647c:	ldr	r3, [r9, #40]	; 0x28
   26480:	ldr	r2, [sp, #28]
   26484:	add	r3, r3, r2
   26488:	str	r3, [r9, #40]	; 0x28
   2648c:	ldr	r2, [sp, #24]
   26490:	mov	r1, r9
   26494:	add	r0, sp, #80	; 0x50
   26498:	bl	1bdc0 <__assert_fail@plt+0xa420>
   2649c:	mov	r3, r0
   264a0:	ldrb	r2, [sp, #84]	; 0x54
   264a4:	cmp	r2, #2
   264a8:	beq	26550 <__assert_fail@plt+0x14bb0>
   264ac:	cmp	r2, #21
   264b0:	beq	26560 <__assert_fail@plt+0x14bc0>
   264b4:	add	r2, sp, #120	; 0x78
   264b8:	str	r2, [sp, #76]	; 0x4c
   264bc:	mov	r2, #3
   264c0:	str	r2, [sp, #72]	; 0x48
   264c4:	mov	r2, #1
   264c8:	str	r2, [sp, #8]
   264cc:	ldr	r2, [sp, #24]
   264d0:	str	r2, [sp, #4]
   264d4:	str	sl, [sp]
   264d8:	add	r2, sp, #80	; 0x50
   264dc:	mov	r1, r9
   264e0:	add	r0, sp, #72	; 0x48
   264e4:	bl	1c380 <__assert_fail@plt+0xa9e0>
   264e8:	cmp	r0, #0
   264ec:	bne	27378 <__assert_fail@plt+0x159d8>
   264f0:	ldr	r2, [sp, #24]
   264f4:	mov	r1, r9
   264f8:	mov	r0, r8
   264fc:	bl	1bdc0 <__assert_fail@plt+0xa420>
   26500:	str	r0, [sp, #28]
   26504:	ldr	r6, [sp, #64]	; 0x40
   26508:	sub	r3, r6, #2
   2650c:	bics	r3, r3, #2
   26510:	beq	26798 <__assert_fail@plt+0x14df8>
   26514:	ldr	r4, [sp, #72]	; 0x48
   26518:	cmp	r4, #2
   2651c:	bne	2657c <__assert_fail@plt+0x14bdc>
   26520:	ldr	sl, [sp, #196]	; 0xc4
   26524:	mov	r3, #11
   26528:	str	r3, [sl]
   2652c:	mov	r0, r5
   26530:	bl	1b854 <__assert_fail@plt+0x9eb4>
   26534:	mov	r0, r7
   26538:	bl	1e3b4 <__assert_fail@plt+0xca14>
   2653c:	ldr	r3, [sl]
   26540:	cmp	r3, #0
   26544:	bne	27370 <__assert_fail@plt+0x159d0>
   26548:	mov	fp, #0
   2654c:	b	26bdc <__assert_fail@plt+0x1523c>
   26550:	ldr	sl, [sp, #196]	; 0xc4
   26554:	mov	r3, #7
   26558:	str	r3, [sl]
   2655c:	b	2652c <__assert_fail@plt+0x14b8c>
   26560:	ldr	r3, [r9, #40]	; 0x28
   26564:	ldr	r2, [sp, #28]
   26568:	sub	r3, r3, r2
   2656c:	str	r3, [r9, #40]	; 0x28
   26570:	mov	r3, #1
   26574:	strb	r3, [r8, #4]
   26578:	b	26850 <__assert_fail@plt+0x14eb0>
   2657c:	cmp	r4, #4
   26580:	beq	27384 <__assert_fail@plt+0x159e4>
   26584:	cmp	r6, #3
   26588:	beq	265b4 <__assert_fail@plt+0x14c14>
   2658c:	cmp	r4, #3
   26590:	beq	2745c <__assert_fail@plt+0x15abc>
   26594:	cmp	r6, #0
   26598:	beq	265d0 <__assert_fail@plt+0x14c30>
   2659c:	cmp	r6, #3
   265a0:	movne	r0, #0
   265a4:	bne	265d4 <__assert_fail@plt+0x14c34>
   265a8:	ldr	r3, [sp, #68]	; 0x44
   265ac:	ldrb	r0, [r3]
   265b0:	b	265d4 <__assert_fail@plt+0x14c34>
   265b4:	ldr	r0, [sp, #68]	; 0x44
   265b8:	bl	117a8 <strlen@plt>
   265bc:	cmp	r0, #1
   265c0:	bls	27454 <__assert_fail@plt+0x15ab4>
   265c4:	ldr	sl, [sp, #196]	; 0xc4
   265c8:	mov	r3, #3
   265cc:	b	267a0 <__assert_fail@plt+0x14e00>
   265d0:	ldrb	r0, [sp, #68]	; 0x44
   265d4:	cmp	r4, #0
   265d8:	bne	266c8 <__assert_fail@plt+0x14d28>
   265dc:	ldrb	r3, [sp, #76]	; 0x4c
   265e0:	str	r3, [sp, #32]
   265e4:	cmp	r6, #0
   265e8:	cmpne	r6, #3
   265ec:	ldrne	r6, [sp, #68]	; 0x44
   265f0:	bne	26608 <__assert_fail@plt+0x14c68>
   265f4:	ldr	r3, [sl, #92]	; 0x5c
   265f8:	cmp	r3, #1
   265fc:	ble	266e0 <__assert_fail@plt+0x14d40>
   26600:	bl	1182c <btowc@plt>
   26604:	mov	r6, r0
   26608:	ldr	r3, [sp, #72]	; 0x48
   2660c:	cmp	r3, #3
   26610:	cmpne	r3, #0
   26614:	bne	266f8 <__assert_fail@plt+0x14d58>
   26618:	ldr	r3, [sl, #92]	; 0x5c
   2661c:	cmp	r3, #1
   26620:	ble	266f0 <__assert_fail@plt+0x14d50>
   26624:	ldr	r0, [sp, #32]
   26628:	bl	1182c <btowc@plt>
   2662c:	mov	r4, r0
   26630:	cmn	r6, #1
   26634:	cmnne	r4, #1
   26638:	beq	27390 <__assert_fail@plt+0x159f0>
   2663c:	ldr	r3, [sp, #52]	; 0x34
   26640:	cmp	r4, r6
   26644:	movcs	r3, #0
   26648:	andcc	r3, r3, #1
   2664c:	cmp	r3, #0
   26650:	bne	2739c <__assert_fail@plt+0x159fc>
   26654:	ldr	r3, [sl, #92]	; 0x5c
   26658:	cmp	r3, #1
   2665c:	ble	26730 <__assert_fail@plt+0x14d90>
   26660:	ldr	r3, [r7, #32]
   26664:	cmp	r3, fp
   26668:	bne	26710 <__assert_fail@plt+0x14d70>
   2666c:	lsl	fp, fp, #1
   26670:	add	fp, fp, #1
   26674:	lsl	r3, fp, #2
   26678:	str	r3, [sp, #48]	; 0x30
   2667c:	mov	r1, r3
   26680:	ldr	r0, [r7, #4]
   26684:	bl	1b9dc <__assert_fail@plt+0xa03c>
   26688:	str	r0, [sp, #32]
   2668c:	ldr	r1, [sp, #48]	; 0x30
   26690:	ldr	r0, [r7, #8]
   26694:	bl	1b9dc <__assert_fail@plt+0xa03c>
   26698:	str	r0, [sp, #48]	; 0x30
   2669c:	ldr	r3, [sp, #32]
   266a0:	cmp	r0, #0
   266a4:	cmpne	r3, #0
   266a8:	bne	26700 <__assert_fail@plt+0x14d60>
   266ac:	ldr	sl, [sp, #196]	; 0xc4
   266b0:	mov	r0, r3
   266b4:	bl	1b854 <__assert_fail@plt+0x9eb4>
   266b8:	ldr	r0, [sp, #48]	; 0x30
   266bc:	bl	1b854 <__assert_fail@plt+0x9eb4>
   266c0:	mov	r3, #12
   266c4:	b	26528 <__assert_fail@plt+0x14b88>
   266c8:	cmp	r4, #3
   266cc:	ldreq	r3, [sp, #76]	; 0x4c
   266d0:	ldrbeq	r3, [r3]
   266d4:	movne	r3, #0
   266d8:	str	r3, [sp, #32]
   266dc:	b	265e4 <__assert_fail@plt+0x14c44>
   266e0:	uxtb	r6, r0
   266e4:	cmp	r4, #3
   266e8:	cmpne	r4, #0
   266ec:	bne	266f8 <__assert_fail@plt+0x14d58>
   266f0:	ldrb	r4, [sp, #32]
   266f4:	b	26630 <__assert_fail@plt+0x14c90>
   266f8:	ldr	r4, [sp, #76]	; 0x4c
   266fc:	b	26630 <__assert_fail@plt+0x14c90>
   26700:	ldr	r3, [sp, #32]
   26704:	str	r3, [r7, #4]
   26708:	ldr	r3, [sp, #48]	; 0x30
   2670c:	str	r3, [r7, #8]
   26710:	ldr	r2, [r7, #32]
   26714:	ldr	r3, [r7, #4]
   26718:	str	r6, [r3, r2, lsl #2]
   2671c:	ldr	r2, [r7, #8]
   26720:	ldr	r3, [r7, #32]
   26724:	add	r1, r3, #1
   26728:	str	r1, [r7, #32]
   2672c:	str	r4, [r2, r3, lsl #2]
   26730:	mov	r1, #0
   26734:	mov	ip, #1
   26738:	b	26748 <__assert_fail@plt+0x14da8>
   2673c:	add	r1, r1, #1
   26740:	cmp	r1, #256	; 0x100
   26744:	beq	273a8 <__assert_fail@plt+0x15a08>
   26748:	cmp	r1, r6
   2674c:	movcc	r3, #0
   26750:	movcs	r3, #1
   26754:	cmp	r1, r4
   26758:	movhi	r3, #0
   2675c:	cmp	r3, #0
   26760:	beq	2673c <__assert_fail@plt+0x14d9c>
   26764:	add	r3, r1, #31
   26768:	cmp	r1, #0
   2676c:	movge	r3, r1
   26770:	asr	r3, r3, #5
   26774:	asr	r2, r1, #31
   26778:	lsr	r0, r2, #27
   2677c:	add	r2, r1, r0
   26780:	and	r2, r2, #31
   26784:	sub	r2, r2, r0
   26788:	ldr	r0, [r5, r3, lsl #2]
   2678c:	orr	r2, r0, ip, lsl r2
   26790:	str	r2, [r5, r3, lsl #2]
   26794:	b	2673c <__assert_fail@plt+0x14d9c>
   26798:	ldr	sl, [sp, #196]	; 0xc4
   2679c:	mov	r3, #11
   267a0:	str	r3, [sl]
   267a4:	b	2652c <__assert_fail@plt+0x14b8c>
   267a8:	ldrb	r3, [sp, #68]	; 0x44
   267ac:	asr	r1, r3, #5
   267b0:	and	r3, r3, #31
   267b4:	ldr	r2, [r5, r1, lsl #2]
   267b8:	mov	r0, #1
   267bc:	orr	r3, r2, r0, lsl r3
   267c0:	str	r3, [r5, r1, lsl #2]
   267c4:	ldrb	r3, [r8, #4]
   267c8:	cmp	r3, #2
   267cc:	beq	2697c <__assert_fail@plt+0x14fdc>
   267d0:	cmp	r3, #21
   267d4:	beq	2698c <__assert_fail@plt+0x14fec>
   267d8:	ldr	r3, [sp, #40]	; 0x28
   267dc:	add	r2, sp, #88	; 0x58
   267e0:	str	r2, [sp, #68]	; 0x44
   267e4:	mov	r2, #3
   267e8:	str	r2, [sp, #64]	; 0x40
   267ec:	str	r3, [sp, #8]
   267f0:	ldr	r3, [sp, #24]
   267f4:	str	r3, [sp, #4]
   267f8:	str	sl, [sp]
   267fc:	ldr	r3, [sp, #28]
   26800:	mov	r2, r8
   26804:	mov	r1, r9
   26808:	add	r0, sp, #64	; 0x40
   2680c:	bl	1c380 <__assert_fail@plt+0xa9e0>
   26810:	cmp	r0, #0
   26814:	bne	26460 <__assert_fail@plt+0x14ac0>
   26818:	ldr	r2, [sp, #24]
   2681c:	mov	r1, r9
   26820:	mov	r0, r8
   26824:	bl	1bdc0 <__assert_fail@plt+0xa420>
   26828:	str	r0, [sp, #28]
   2682c:	ldr	r3, [sp, #64]	; 0x40
   26830:	sub	r3, r3, #2
   26834:	bics	r3, r3, #2
   26838:	beq	26850 <__assert_fail@plt+0x14eb0>
   2683c:	ldrb	r3, [r8, #4]
   26840:	cmp	r3, #2
   26844:	beq	2646c <__assert_fail@plt+0x14acc>
   26848:	cmp	r3, #22
   2684c:	beq	2647c <__assert_fail@plt+0x14adc>
   26850:	ldr	r3, [sp, #64]	; 0x40
   26854:	cmp	r3, #4
   26858:	ldrls	pc, [pc, r3, lsl #2]
   2685c:	b	2697c <__assert_fail@plt+0x14fdc>
   26860:	andeq	r6, r2, r8, lsr #15
   26864:	andeq	r6, r2, r4, ror r8
   26868:	andeq	r6, r2, r8, asr #17
   2686c:	andeq	r6, r2, r4, lsl #18
   26870:	andeq	r6, r2, r0, asr #18
   26874:	ldr	r3, [r7, #20]
   26878:	ldr	r2, [sp, #36]	; 0x24
   2687c:	cmp	r3, r2
   26880:	beq	268a0 <__assert_fail@plt+0x14f00>
   26884:	ldr	r2, [r7]
   26888:	ldr	r3, [r7, #20]
   2688c:	add	r1, r3, #1
   26890:	str	r1, [r7, #20]
   26894:	ldr	r1, [sp, #68]	; 0x44
   26898:	str	r1, [r2, r3, lsl #2]
   2689c:	b	267c4 <__assert_fail@plt+0x14e24>
   268a0:	lsl	r3, r2, #1
   268a4:	add	r3, r3, #1
   268a8:	str	r3, [sp, #36]	; 0x24
   268ac:	lsl	r1, r3, #2
   268b0:	ldr	r0, [r7]
   268b4:	bl	1b9dc <__assert_fail@plt+0xa03c>
   268b8:	cmp	r0, #0
   268bc:	beq	26aec <__assert_fail@plt+0x1514c>
   268c0:	str	r0, [r7]
   268c4:	b	26884 <__assert_fail@plt+0x14ee4>
   268c8:	ldr	r4, [sp, #68]	; 0x44
   268cc:	mov	r0, r4
   268d0:	bl	117a8 <strlen@plt>
   268d4:	cmp	r0, #1
   268d8:	bne	273b8 <__assert_fail@plt+0x15a18>
   268dc:	ldrb	r3, [r4]
   268e0:	asr	r1, r3, #5
   268e4:	and	r3, r3, #31
   268e8:	ldr	r2, [r5, r1, lsl #2]
   268ec:	orr	r3, r2, r0, lsl r3
   268f0:	str	r3, [r5, r1, lsl #2]
   268f4:	mov	r3, #0
   268f8:	ldr	r2, [sp, #196]	; 0xc4
   268fc:	str	r3, [r2]
   26900:	b	267c4 <__assert_fail@plt+0x14e24>
   26904:	ldr	r4, [sp, #68]	; 0x44
   26908:	mov	r0, r4
   2690c:	bl	117a8 <strlen@plt>
   26910:	cmp	r0, #1
   26914:	bne	273c8 <__assert_fail@plt+0x15a28>
   26918:	ldrb	r3, [r4]
   2691c:	asr	r1, r3, #5
   26920:	and	r3, r3, #31
   26924:	ldr	r2, [r5, r1, lsl #2]
   26928:	orr	r3, r2, r0, lsl r3
   2692c:	str	r3, [r5, r1, lsl #2]
   26930:	mov	r3, #0
   26934:	ldr	r2, [sp, #196]	; 0xc4
   26938:	str	r3, [r2]
   2693c:	b	267c4 <__assert_fail@plt+0x14e24>
   26940:	ldr	r3, [sp, #24]
   26944:	str	r3, [sp, #4]
   26948:	ldr	r3, [sp, #68]	; 0x44
   2694c:	str	r3, [sp]
   26950:	add	r3, sp, #60	; 0x3c
   26954:	mov	r2, r7
   26958:	mov	r1, r5
   2695c:	ldr	r0, [r9, #64]	; 0x40
   26960:	bl	20bc4 <__assert_fail@plt+0xf224>
   26964:	ldr	r3, [sp, #196]	; 0xc4
   26968:	str	r0, [r3]
   2696c:	cmp	r0, #0
   26970:	beq	267c4 <__assert_fail@plt+0x14e24>
   26974:	mov	sl, r3
   26978:	b	2652c <__assert_fail@plt+0x14b8c>
   2697c:	ldr	sl, [sp, #196]	; 0xc4
   26980:	mov	r3, #7
   26984:	str	r3, [sl]
   26988:	b	2652c <__assert_fail@plt+0x14b8c>
   2698c:	ldr	sl, [sp, #196]	; 0xc4
   26990:	ldr	r3, [r9, #40]	; 0x28
   26994:	ldr	r2, [sp, #28]
   26998:	add	r3, r3, r2
   2699c:	str	r3, [r9, #40]	; 0x28
   269a0:	ldr	r3, [sp, #44]	; 0x2c
   269a4:	cmp	r3, #0
   269a8:	beq	269c8 <__assert_fail@plt+0x15028>
   269ac:	sub	r3, r5, #4
   269b0:	add	r1, r5, #28
   269b4:	ldr	r2, [r3, #4]
   269b8:	mvn	r2, r2
   269bc:	str	r2, [r3, #4]!
   269c0:	cmp	r1, r3
   269c4:	bne	269b4 <__assert_fail@plt+0x15014>
   269c8:	ldr	r3, [sp, #20]
   269cc:	ldr	ip, [r3, #92]	; 0x5c
   269d0:	cmp	ip, #1
   269d4:	ble	26a00 <__assert_fail@plt+0x15060>
   269d8:	sub	r0, r5, #4
   269dc:	ldr	r1, [r3, #60]	; 0x3c
   269e0:	sub	r1, r1, #4
   269e4:	add	lr, r5, #28
   269e8:	ldr	r3, [r0, #4]
   269ec:	ldr	r2, [r1, #4]!
   269f0:	and	r3, r3, r2
   269f4:	str	r3, [r0, #4]!
   269f8:	cmp	r0, lr
   269fc:	bne	269e8 <__assert_fail@plt+0x15048>
   26a00:	ldr	r3, [r7, #20]
   26a04:	cmp	r3, #0
   26a08:	bne	26a50 <__assert_fail@plt+0x150b0>
   26a0c:	ldr	r3, [r7, #24]
   26a10:	cmp	r3, #0
   26a14:	bne	26a50 <__assert_fail@plt+0x150b0>
   26a18:	ldr	r3, [r7, #28]
   26a1c:	cmp	r3, #0
   26a20:	bne	26a50 <__assert_fail@plt+0x150b0>
   26a24:	ldr	r3, [r7, #32]
   26a28:	cmp	r3, #0
   26a2c:	bne	26a50 <__assert_fail@plt+0x150b0>
   26a30:	cmp	ip, #1
   26a34:	ble	26ab8 <__assert_fail@plt+0x15118>
   26a38:	ldr	r3, [r7, #36]	; 0x24
   26a3c:	cmp	r3, #0
   26a40:	bne	26a50 <__assert_fail@plt+0x150b0>
   26a44:	ldrb	r3, [r7, #16]
   26a48:	tst	r3, #1
   26a4c:	beq	26ab8 <__assert_fail@plt+0x15118>
   26a50:	ldr	r0, [sp, #20]
   26a54:	ldrb	r3, [r0, #88]	; 0x58
   26a58:	orr	r3, r3, #2
   26a5c:	strb	r3, [r0, #88]	; 0x58
   26a60:	mov	r3, #6
   26a64:	strb	r3, [sp, #124]	; 0x7c
   26a68:	add	r3, sp, #152	; 0x98
   26a6c:	str	r7, [r3, #-32]!	; 0xffffffe0
   26a70:	mov	r2, #0
   26a74:	mov	r1, r2
   26a78:	bl	1c7f8 <__assert_fail@plt+0xae58>
   26a7c:	subs	fp, r0, #0
   26a80:	beq	27418 <__assert_fail@plt+0x15a78>
   26a84:	ldr	r3, [r5]
   26a88:	cmp	r3, #0
   26a8c:	bne	273d8 <__assert_fail@plt+0x15a38>
   26a90:	mov	r3, r5
   26a94:	add	r2, r5, #28
   26a98:	ldr	r1, [r3, #4]!
   26a9c:	cmp	r1, #0
   26aa0:	bne	273d8 <__assert_fail@plt+0x15a38>
   26aa4:	cmp	r3, r2
   26aa8:	bne	26a98 <__assert_fail@plt+0x150f8>
   26aac:	mov	r0, r5
   26ab0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   26ab4:	b	26bdc <__assert_fail@plt+0x1523c>
   26ab8:	mov	r0, r7
   26abc:	bl	1e3b4 <__assert_fail@plt+0xca14>
   26ac0:	mov	r3, #3
   26ac4:	strb	r3, [sp, #124]	; 0x7c
   26ac8:	add	r3, sp, #152	; 0x98
   26acc:	str	r5, [r3, #-32]!	; 0xffffffe0
   26ad0:	mov	r2, #0
   26ad4:	mov	r1, r2
   26ad8:	ldr	r0, [sp, #20]
   26adc:	bl	1c7f8 <__assert_fail@plt+0xae58>
   26ae0:	subs	fp, r0, #0
   26ae4:	bne	26bdc <__assert_fail@plt+0x1523c>
   26ae8:	b	27418 <__assert_fail@plt+0x15a78>
   26aec:	ldr	sl, [sp, #196]	; 0xc4
   26af0:	b	27418 <__assert_fail@plt+0x15a78>
   26af4:	ldr	r2, [r8]
   26af8:	mov	r3, #1
   26afc:	lsl	r3, r3, r2
   26b00:	ldr	r2, [sp, #20]
   26b04:	ldr	r2, [r2, #84]	; 0x54
   26b08:	tst	r3, r2
   26b0c:	moveq	r3, #6
   26b10:	streq	r3, [sl]
   26b14:	moveq	fp, #0
   26b18:	beq	271a0 <__assert_fail@plt+0x15800>
   26b1c:	ldr	r0, [sp, #20]
   26b20:	ldr	r2, [r0, #80]	; 0x50
   26b24:	orr	r3, r2, r3
   26b28:	str	r3, [r0, #80]	; 0x50
   26b2c:	mov	r3, r8
   26b30:	mov	r2, #0
   26b34:	mov	r1, r2
   26b38:	bl	1c7f8 <__assert_fail@plt+0xae58>
   26b3c:	subs	fp, r0, #0
   26b40:	moveq	r3, #12
   26b44:	streq	r3, [sl]
   26b48:	beq	271a0 <__assert_fail@plt+0x15800>
   26b4c:	ldr	r2, [sp, #20]
   26b50:	ldr	r3, [r2, #76]	; 0x4c
   26b54:	add	r3, r3, #1
   26b58:	str	r3, [r2, #76]	; 0x4c
   26b5c:	ldrb	r3, [r2, #88]	; 0x58
   26b60:	orr	r3, r3, #2
   26b64:	strb	r3, [r2, #88]	; 0x58
   26b68:	b	26bdc <__assert_fail@plt+0x1523c>
   26b6c:	ldr	r3, [sp, #24]
   26b70:	tst	r3, #16777216	; 0x1000000
   26b74:	movne	r3, #13
   26b78:	strne	r3, [sl]
   26b7c:	movne	fp, #0
   26b80:	bne	271a0 <__assert_fail@plt+0x15800>
   26b84:	ldr	r3, [sp, #24]
   26b88:	tst	r3, #32
   26b8c:	movne	r3, #13
   26b90:	strne	r3, [sl]
   26b94:	movne	fp, #0
   26b98:	bne	271a0 <__assert_fail@plt+0x15800>
   26b9c:	ldr	r3, [sp, #24]
   26ba0:	tst	r3, #16
   26ba4:	bne	26bf0 <__assert_fail@plt+0x15250>
   26ba8:	cmp	r2, #9
   26bac:	beq	26c2c <__assert_fail@plt+0x1528c>
   26bb0:	mov	r3, #1
   26bb4:	strb	r3, [r8, #4]
   26bb8:	mov	r3, r8
   26bbc:	mov	r2, #0
   26bc0:	mov	r1, r2
   26bc4:	ldr	r0, [sp, #20]
   26bc8:	bl	1c7f8 <__assert_fail@plt+0xae58>
   26bcc:	subs	fp, r0, #0
   26bd0:	moveq	r3, #12
   26bd4:	streq	r3, [sl]
   26bd8:	beq	271a0 <__assert_fail@plt+0x15800>
   26bdc:	ldr	r2, [sp, #24]
   26be0:	mov	r1, r9
   26be4:	mov	r0, r8
   26be8:	bl	1e2f4 <__assert_fail@plt+0xc954>
   26bec:	b	27230 <__assert_fail@plt+0x15890>
   26bf0:	mov	r5, r3
   26bf4:	mov	r2, r3
   26bf8:	mov	r1, r9
   26bfc:	mov	r0, r8
   26c00:	bl	1e2f4 <__assert_fail@plt+0xc954>
   26c04:	str	sl, [sp, #4]
   26c08:	ldr	r3, [sp, #192]	; 0xc0
   26c0c:	str	r3, [sp]
   26c10:	mov	r3, r5
   26c14:	mov	r2, r8
   26c18:	mov	r1, r4
   26c1c:	mov	r0, r9
   26c20:	bl	260cc <__assert_fail@plt+0x1472c>
   26c24:	mov	fp, r0
   26c28:	b	271a0 <__assert_fail@plt+0x15800>
   26c2c:	ldr	r3, [sp, #24]
   26c30:	tst	r3, #131072	; 0x20000
   26c34:	moveq	r3, #16
   26c38:	streq	r3, [sl]
   26c3c:	moveq	fp, #0
   26c40:	bne	26bb0 <__assert_fail@plt+0x15210>
   26c44:	b	271a0 <__assert_fail@plt+0x15800>
   26c48:	ldr	r2, [r8]
   26c4c:	ldr	r3, [pc, #1460]	; 27208 <__assert_fail@plt+0x15868>
   26c50:	and	r3, r3, r2
   26c54:	cmp	r3, #0
   26c58:	beq	26c6c <__assert_fail@plt+0x152cc>
   26c5c:	ldr	r3, [sp, #20]
   26c60:	ldrb	r3, [r3, #88]	; 0x58
   26c64:	tst	r3, #16
   26c68:	beq	26d20 <__assert_fail@plt+0x15380>
   26c6c:	ldr	r3, [r8]
   26c70:	sub	r2, r3, #256	; 0x100
   26c74:	bics	r2, r2, #256	; 0x100
   26c78:	bne	26e08 <__assert_fail@plt+0x15468>
   26c7c:	cmp	r3, #256	; 0x100
   26c80:	beq	26ddc <__assert_fail@plt+0x1543c>
   26c84:	mov	r3, #5
   26c88:	str	r3, [r8]
   26c8c:	mov	r3, r8
   26c90:	mov	r2, #0
   26c94:	mov	r1, r2
   26c98:	ldr	r0, [sp, #20]
   26c9c:	bl	1c7f8 <__assert_fail@plt+0xae58>
   26ca0:	mov	r4, r0
   26ca4:	mov	r3, #10
   26ca8:	str	r3, [r8]
   26cac:	mov	r3, r8
   26cb0:	mov	r2, #0
   26cb4:	mov	r1, r2
   26cb8:	ldr	r6, [sp, #20]
   26cbc:	mov	r0, r6
   26cc0:	bl	1c7f8 <__assert_fail@plt+0xae58>
   26cc4:	mov	r5, r0
   26cc8:	mov	r3, #10
   26ccc:	mov	r2, r0
   26cd0:	mov	r1, r4
   26cd4:	mov	r0, r6
   26cd8:	bl	1c96c <__assert_fail@plt+0xafcc>
   26cdc:	cmp	r5, #0
   26ce0:	cmpne	r4, #0
   26ce4:	moveq	r4, #1
   26ce8:	movne	r4, #0
   26cec:	mov	fp, r0
   26cf0:	cmp	r0, #0
   26cf4:	orreq	r4, r4, #1
   26cf8:	cmp	r4, #0
   26cfc:	movne	r3, #12
   26d00:	strne	r3, [sl]
   26d04:	movne	fp, #0
   26d08:	bne	271a0 <__assert_fail@plt+0x15800>
   26d0c:	ldr	r2, [sp, #24]
   26d10:	mov	r1, r9
   26d14:	mov	r0, r8
   26d18:	bl	1e2f4 <__assert_fail@plt+0xc954>
   26d1c:	b	271a0 <__assert_fail@plt+0x15800>
   26d20:	ldr	r1, [sp, #20]
   26d24:	ldrb	r3, [r1, #88]	; 0x58
   26d28:	orr	r3, r3, #16
   26d2c:	strb	r3, [r1, #88]	; 0x58
   26d30:	tst	r3, #8
   26d34:	bne	27424 <__assert_fail@plt+0x15a84>
   26d38:	mov	r3, #0
   26d3c:	str	r3, [r1, #96]	; 0x60
   26d40:	ldr	r3, [pc, #1220]	; 2720c <__assert_fail@plt+0x1586c>
   26d44:	str	r3, [r1, #100]	; 0x64
   26d48:	mvn	r3, #2013265921	; 0x78000001
   26d4c:	str	r3, [r1, #104]	; 0x68
   26d50:	mvn	r3, #-134217727	; 0xf8000001
   26d54:	str	r3, [r1, #108]	; 0x6c
   26d58:	ldrb	r3, [r1, #88]	; 0x58
   26d5c:	tst	r3, #4
   26d60:	beq	27448 <__assert_fail@plt+0x15aa8>
   26d64:	add	r3, r1, #112	; 0x70
   26d68:	mov	r2, #0
   26d6c:	str	r2, [r1, #112]	; 0x70
   26d70:	str	r2, [r3, #4]
   26d74:	str	r2, [r3, #8]
   26d78:	str	r2, [r3, #12]
   26d7c:	b	26c6c <__assert_fail@plt+0x152cc>
   26d80:	add	r4, r4, #32
   26d84:	add	r5, r5, #1
   26d88:	add	r7, r7, #64	; 0x40
   26d8c:	add	lr, lr, #4
   26d90:	cmp	r5, #7
   26d94:	bgt	26c6c <__assert_fail@plt+0x152cc>
   26d98:	mov	ip, r7
   26d9c:	mov	r1, #0
   26da0:	ldr	r3, [r0]
   26da4:	ldrh	r3, [r3, ip]
   26da8:	lsr	r3, r3, #3
   26dac:	add	r2, r4, r1
   26db0:	cmp	r2, #95	; 0x5f
   26db4:	orreq	r3, r3, #1
   26db8:	tst	r3, #1
   26dbc:	ldrne	r3, [lr]
   26dc0:	orrne	r3, r3, r6, lsl r1
   26dc4:	strne	r3, [lr]
   26dc8:	add	r1, r1, #1
   26dcc:	add	ip, ip, #2
   26dd0:	cmp	r1, #32
   26dd4:	bne	26da0 <__assert_fail@plt+0x15400>
   26dd8:	b	26d80 <__assert_fail@plt+0x153e0>
   26ddc:	mov	r3, #6
   26de0:	str	r3, [r8]
   26de4:	mov	r3, r8
   26de8:	mov	r2, #0
   26dec:	mov	r1, r2
   26df0:	ldr	r0, [sp, #20]
   26df4:	bl	1c7f8 <__assert_fail@plt+0xae58>
   26df8:	mov	r4, r0
   26dfc:	mov	r3, #9
   26e00:	str	r3, [r8]
   26e04:	b	26cac <__assert_fail@plt+0x1530c>
   26e08:	mov	r3, r8
   26e0c:	mov	r2, #0
   26e10:	mov	r1, r2
   26e14:	ldr	r0, [sp, #20]
   26e18:	bl	1c7f8 <__assert_fail@plt+0xae58>
   26e1c:	subs	fp, r0, #0
   26e20:	moveq	r3, #12
   26e24:	streq	r3, [sl]
   26e28:	bne	26d0c <__assert_fail@plt+0x1536c>
   26e2c:	b	271a0 <__assert_fail@plt+0x15800>
   26e30:	mov	r3, r8
   26e34:	mov	r2, #0
   26e38:	mov	r1, r2
   26e3c:	ldr	r0, [sp, #20]
   26e40:	bl	1c7f8 <__assert_fail@plt+0xae58>
   26e44:	subs	fp, r0, #0
   26e48:	moveq	r3, #12
   26e4c:	streq	r3, [sl]
   26e50:	beq	271a0 <__assert_fail@plt+0x15800>
   26e54:	ldr	r2, [sp, #20]
   26e58:	ldr	r3, [r2, #92]	; 0x5c
   26e5c:	cmp	r3, #1
   26e60:	ldrbgt	r3, [r2, #88]	; 0x58
   26e64:	orrgt	r3, r3, #2
   26e68:	strbgt	r3, [r2, #88]	; 0x58
   26e6c:	b	26bdc <__assert_fail@plt+0x1523c>
   26e70:	str	sl, [sp, #4]
   26e74:	cmp	r2, #33	; 0x21
   26e78:	movne	r2, #0
   26e7c:	moveq	r2, #1
   26e80:	str	r2, [sp]
   26e84:	ldr	r3, [pc, #900]	; 27210 <__assert_fail@plt+0x15870>
   26e88:	ldr	r2, [pc, #900]	; 27214 <__assert_fail@plt+0x15874>
   26e8c:	ldr	r1, [r0, #64]	; 0x40
   26e90:	ldr	r0, [sp, #20]
   26e94:	bl	216f8 <__assert_fail@plt+0xfd58>
   26e98:	ldr	r2, [sl]
   26e9c:	mov	fp, r0
   26ea0:	adds	r3, r2, #0
   26ea4:	movne	r3, #1
   26ea8:	cmp	r0, #0
   26eac:	movne	r3, #0
   26eb0:	cmp	r3, #0
   26eb4:	beq	26bdc <__assert_fail@plt+0x1523c>
   26eb8:	mov	fp, #0
   26ebc:	b	271a0 <__assert_fail@plt+0x15800>
   26ec0:	str	sl, [sp, #4]
   26ec4:	cmp	r2, #35	; 0x23
   26ec8:	movne	r2, #0
   26ecc:	moveq	r2, #1
   26ed0:	str	r2, [sp]
   26ed4:	ldr	r3, [pc, #828]	; 27218 <__assert_fail@plt+0x15878>
   26ed8:	ldr	r2, [pc, #828]	; 2721c <__assert_fail@plt+0x1587c>
   26edc:	ldr	r1, [r0, #64]	; 0x40
   26ee0:	ldr	r0, [sp, #20]
   26ee4:	bl	216f8 <__assert_fail@plt+0xfd58>
   26ee8:	ldr	r2, [sl]
   26eec:	mov	fp, r0
   26ef0:	adds	r3, r2, #0
   26ef4:	movne	r3, #1
   26ef8:	cmp	r0, #0
   26efc:	movne	r3, #0
   26f00:	cmp	r3, #0
   26f04:	beq	26bdc <__assert_fail@plt+0x1523c>
   26f08:	mov	fp, #0
   26f0c:	b	271a0 <__assert_fail@plt+0x15800>
   26f10:	mov	r3, #5
   26f14:	str	r3, [sl]
   26f18:	mov	fp, #0
   26f1c:	b	271a0 <__assert_fail@plt+0x15800>
   26f20:	ldr	r2, [sp, #24]
   26f24:	mov	r1, r8
   26f28:	mov	r0, r9
   26f2c:	bl	1e310 <__assert_fail@plt+0xc970>
   26f30:	mov	r5, r0
   26f34:	cmn	r0, #1
   26f38:	beq	26f80 <__assert_fail@plt+0x155e0>
   26f3c:	cmn	r0, #2
   26f40:	beq	26f58 <__assert_fail@plt+0x155b8>
   26f44:	ldrb	r3, [r8, #4]
   26f48:	cmp	r3, #24
   26f4c:	beq	2705c <__assert_fail@plt+0x156bc>
   26f50:	cmp	r3, #1
   26f54:	beq	26f9c <__assert_fail@plt+0x155fc>
   26f58:	ldr	r3, [sp, #24]
   26f5c:	tst	r3, #2097152	; 0x200000
   26f60:	bne	26fb4 <__assert_fail@plt+0x15614>
   26f64:	ldrb	r3, [r8, #4]
   26f68:	cmp	r3, #2
   26f6c:	bne	2704c <__assert_fail@plt+0x156ac>
   26f70:	mov	r3, #9
   26f74:	str	r3, [sl]
   26f78:	mov	r6, #0
   26f7c:	b	27140 <__assert_fail@plt+0x157a0>
   26f80:	ldrb	r3, [r8, #4]
   26f84:	cmp	r3, #1
   26f88:	bne	26fd4 <__assert_fail@plt+0x15634>
   26f8c:	ldrb	r3, [r8]
   26f90:	cmp	r3, #44	; 0x2c
   26f94:	moveq	r5, #0
   26f98:	bne	26fd4 <__assert_fail@plt+0x15634>
   26f9c:	ldrb	r3, [r8]
   26fa0:	cmp	r3, #44	; 0x2c
   26fa4:	beq	26fe4 <__assert_fail@plt+0x15644>
   26fa8:	ldr	r3, [sp, #24]
   26fac:	tst	r3, #2097152	; 0x200000
   26fb0:	beq	2704c <__assert_fail@plt+0x156ac>
   26fb4:	str	r4, [r9, #40]	; 0x28
   26fb8:	add	r3, sp, #120	; 0x78
   26fbc:	ldm	r3, {r0, r1}
   26fc0:	stm	r8, {r0, r1}
   26fc4:	mov	r3, #1
   26fc8:	strb	r3, [r8, #4]
   26fcc:	mov	r6, fp
   26fd0:	b	27140 <__assert_fail@plt+0x157a0>
   26fd4:	mov	r3, #10
   26fd8:	str	r3, [sl]
   26fdc:	mov	r6, #0
   26fe0:	b	27140 <__assert_fail@plt+0x157a0>
   26fe4:	ldr	r2, [sp, #24]
   26fe8:	mov	r1, r8
   26fec:	mov	r0, r9
   26ff0:	bl	1e310 <__assert_fail@plt+0xc970>
   26ff4:	mov	r7, r0
   26ff8:	cmn	r5, #2
   26ffc:	cmnne	r0, #2
   27000:	beq	26f58 <__assert_fail@plt+0x155b8>
   27004:	cmn	r0, #1
   27008:	cmpne	r0, r5
   2700c:	blt	27064 <__assert_fail@plt+0x156c4>
   27010:	ldrb	r3, [r8, #4]
   27014:	cmp	r3, #24
   27018:	bne	27064 <__assert_fail@plt+0x156c4>
   2701c:	cmn	r7, #1
   27020:	beq	27074 <__assert_fail@plt+0x156d4>
   27024:	ldr	r3, [pc, #500]	; 27220 <__assert_fail@plt+0x15880>
   27028:	cmp	r7, r3
   2702c:	movle	r3, #0
   27030:	movgt	r3, #1
   27034:	cmp	r3, #0
   27038:	movne	r3, #15
   2703c:	strne	r3, [sl]
   27040:	movne	r6, #0
   27044:	beq	2708c <__assert_fail@plt+0x156ec>
   27048:	b	27140 <__assert_fail@plt+0x157a0>
   2704c:	mov	r3, #10
   27050:	str	r3, [sl]
   27054:	mov	r6, #0
   27058:	b	27140 <__assert_fail@plt+0x157a0>
   2705c:	mov	r7, r0
   27060:	b	27010 <__assert_fail@plt+0x15670>
   27064:	mov	r3, #10
   27068:	str	r3, [sl]
   2706c:	mov	r6, #0
   27070:	b	27140 <__assert_fail@plt+0x157a0>
   27074:	ldr	r3, [pc, #420]	; 27220 <__assert_fail@plt+0x15880>
   27078:	cmp	r5, r3
   2707c:	movle	r3, #0
   27080:	movgt	r3, #1
   27084:	b	27034 <__assert_fail@plt+0x15694>
   27088:	mov	r7, #1
   2708c:	ldr	r2, [sp, #24]
   27090:	mov	r1, r9
   27094:	mov	r0, r8
   27098:	bl	1e2f4 <__assert_fail@plt+0xc954>
   2709c:	cmp	fp, #0
   270a0:	beq	271cc <__assert_fail@plt+0x1582c>
   270a4:	orrs	r3, r5, r7
   270a8:	bne	27294 <__assert_fail@plt+0x158f4>
   270ac:	mov	r2, #0
   270b0:	ldr	r1, [pc, #332]	; 27204 <__assert_fail@plt+0x15864>
   270b4:	mov	r0, fp
   270b8:	bl	1c608 <__assert_fail@plt+0xac68>
   270bc:	mov	r6, #0
   270c0:	b	27140 <__assert_fail@plt+0x157a0>
   270c4:	cmp	r5, #1
   270c8:	ble	271ac <__assert_fail@plt+0x1580c>
   270cc:	str	fp, [sp, #28]
   270d0:	mov	r4, fp
   270d4:	mov	r6, #2
   270d8:	ldr	r1, [sp, #20]
   270dc:	mov	r0, r4
   270e0:	bl	1c8b8 <__assert_fail@plt+0xaf18>
   270e4:	mov	r4, r0
   270e8:	mov	r3, #16
   270ec:	mov	r2, r0
   270f0:	ldr	r1, [sp, #28]
   270f4:	ldr	r0, [sp, #20]
   270f8:	bl	1c96c <__assert_fail@plt+0xafcc>
   270fc:	str	r0, [sp, #28]
   27100:	cmp	r0, #0
   27104:	cmpne	r4, #0
   27108:	beq	27134 <__assert_fail@plt+0x15794>
   2710c:	add	r6, r6, #1
   27110:	cmp	r5, r6
   27114:	bge	270d8 <__assert_fail@plt+0x15738>
   27118:	cmp	r5, r7
   2711c:	beq	271d4 <__assert_fail@plt+0x15834>
   27120:	ldr	r1, [sp, #20]
   27124:	mov	r0, r4
   27128:	bl	1c8b8 <__assert_fail@plt+0xaf18>
   2712c:	subs	r4, r0, #0
   27130:	bne	272a8 <__assert_fail@plt+0x15908>
   27134:	mov	r3, #12
   27138:	str	r3, [sl]
   2713c:	mov	r6, #0
   27140:	ldr	r2, [sl]
   27144:	adds	r3, r2, #0
   27148:	movne	r3, #1
   2714c:	cmp	r6, #0
   27150:	movne	r3, #0
   27154:	cmp	r3, #0
   27158:	bne	271e4 <__assert_fail@plt+0x15844>
   2715c:	ldr	r3, [sp, #24]
   27160:	tst	r3, #16777216	; 0x1000000
   27164:	beq	2722c <__assert_fail@plt+0x1588c>
   27168:	ldrb	r3, [r8, #4]
   2716c:	mov	fp, r6
   27170:	cmp	r3, #23
   27174:	cmpne	r3, #11
   27178:	bne	27230 <__assert_fail@plt+0x15890>
   2717c:	cmp	r6, #0
   27180:	beq	27194 <__assert_fail@plt+0x157f4>
   27184:	mov	r2, #0
   27188:	ldr	r1, [pc, #116]	; 27204 <__assert_fail@plt+0x15864>
   2718c:	mov	r0, r6
   27190:	bl	1c608 <__assert_fail@plt+0xac68>
   27194:	mov	r3, #13
   27198:	str	r3, [sl]
   2719c:	mov	fp, #0
   271a0:	mov	r0, fp
   271a4:	add	sp, sp, #156	; 0x9c
   271a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   271ac:	str	fp, [sp, #28]
   271b0:	mov	r4, fp
   271b4:	b	27118 <__assert_fail@plt+0x15778>
   271b8:	ldr	r2, [r4, #20]
   271bc:	ldr	r1, [pc, #96]	; 27224 <__assert_fail@plt+0x15884>
   271c0:	mov	r0, r4
   271c4:	bl	1c608 <__assert_fail@plt+0xac68>
   271c8:	b	272b4 <__assert_fail@plt+0x15914>
   271cc:	mov	r6, fp
   271d0:	b	27140 <__assert_fail@plt+0x157a0>
   271d4:	ldr	r6, [sp, #28]
   271d8:	b	27140 <__assert_fail@plt+0x157a0>
   271dc:	mov	r6, fp
   271e0:	b	27140 <__assert_fail@plt+0x157a0>
   271e4:	cmp	fp, #0
   271e8:	beq	271a0 <__assert_fail@plt+0x15800>
   271ec:	mov	r2, #0
   271f0:	ldr	r1, [pc, #12]	; 27204 <__assert_fail@plt+0x15864>
   271f4:	mov	r0, fp
   271f8:	bl	1c608 <__assert_fail@plt+0xac68>
   271fc:	mov	fp, #0
   27200:	b	271a0 <__assert_fail@plt+0x15800>
   27204:	andeq	lr, r1, r4, lsr #8
   27208:	andeq	r0, r0, pc, lsl #6
   2720c:	mvnseq	r0, #0
   27210:	ldrdeq	ip, [r2], -r0
   27214:	muleq	r2, r0, ip
   27218:	andeq	fp, r2, ip, lsl ip
   2721c:	andeq	ip, r2, r0, lsr #25
   27220:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   27224:	andeq	fp, r1, ip, asr pc
   27228:	addeq	r0, ip, r0, lsl #16
   2722c:	mov	fp, r6
   27230:	ldrb	r3, [r8, #4]
   27234:	cmp	r3, #23
   27238:	bhi	271a0 <__assert_fail@plt+0x15800>
   2723c:	cmp	r3, #18
   27240:	movne	r5, #0
   27244:	moveq	r5, #1
   27248:	ldr	r2, [pc, #-40]	; 27228 <__assert_fail@plt+0x15888>
   2724c:	lsr	r2, r2, r3
   27250:	tst	r2, #1
   27254:	beq	271a0 <__assert_fail@plt+0x15800>
   27258:	ldr	r4, [r9, #40]	; 0x28
   2725c:	ldm	r8, {r0, r1}
   27260:	add	r2, sp, #120	; 0x78
   27264:	stm	r2, {r0, r1}
   27268:	cmp	r3, #23
   2726c:	beq	26f20 <__assert_fail@plt+0x15580>
   27270:	cmp	r3, #19
   27274:	beq	27088 <__assert_fail@plt+0x156e8>
   27278:	ldr	r2, [sp, #24]
   2727c:	mov	r1, r9
   27280:	mov	r0, r8
   27284:	bl	1e2f4 <__assert_fail@plt+0xc954>
   27288:	cmp	fp, #0
   2728c:	beq	271dc <__assert_fail@plt+0x1583c>
   27290:	mvn	r7, #0
   27294:	cmp	r5, #0
   27298:	movle	r4, fp
   2729c:	movle	r3, #0
   272a0:	strle	r3, [sp, #28]
   272a4:	bgt	270c4 <__assert_fail@plt+0x15724>
   272a8:	ldrb	r3, [r4, #24]
   272ac:	cmp	r3, #17
   272b0:	beq	271b8 <__assert_fail@plt+0x15818>
   272b4:	cmn	r7, #1
   272b8:	moveq	r3, #11
   272bc:	movne	r3, #10
   272c0:	mov	r2, #0
   272c4:	mov	r1, r4
   272c8:	ldr	r0, [sp, #20]
   272cc:	bl	1c96c <__assert_fail@plt+0xafcc>
   272d0:	subs	r6, r0, #0
   272d4:	beq	27134 <__assert_fail@plt+0x15794>
   272d8:	add	r5, r5, #2
   272dc:	cmp	r7, r5
   272e0:	blt	27340 <__assert_fail@plt+0x159a0>
   272e4:	ldr	r1, [sp, #20]
   272e8:	mov	r0, r4
   272ec:	bl	1c8b8 <__assert_fail@plt+0xaf18>
   272f0:	mov	r4, r0
   272f4:	mov	r3, #16
   272f8:	mov	r2, r0
   272fc:	mov	r1, r6
   27300:	ldr	r6, [sp, #20]
   27304:	mov	r0, r6
   27308:	bl	1c96c <__assert_fail@plt+0xafcc>
   2730c:	mov	r1, r0
   27310:	cmp	r0, #0
   27314:	cmpne	r4, #0
   27318:	beq	27134 <__assert_fail@plt+0x15794>
   2731c:	mov	r3, #10
   27320:	mov	r2, #0
   27324:	mov	r0, r6
   27328:	bl	1c96c <__assert_fail@plt+0xafcc>
   2732c:	subs	r6, r0, #0
   27330:	beq	27134 <__assert_fail@plt+0x15794>
   27334:	add	r5, r5, #1
   27338:	cmp	r7, r5
   2733c:	bge	272e4 <__assert_fail@plt+0x15944>
   27340:	ldr	r3, [sp, #28]
   27344:	cmp	r3, #0
   27348:	beq	2715c <__assert_fail@plt+0x157bc>
   2734c:	mov	r3, #16
   27350:	mov	r2, r6
   27354:	ldr	r1, [sp, #28]
   27358:	ldr	r0, [sp, #20]
   2735c:	bl	1c96c <__assert_fail@plt+0xafcc>
   27360:	mov	r6, r0
   27364:	b	27140 <__assert_fail@plt+0x157a0>
   27368:	mov	fp, #0
   2736c:	b	271a0 <__assert_fail@plt+0x15800>
   27370:	mov	fp, #0
   27374:	b	271a0 <__assert_fail@plt+0x15800>
   27378:	ldr	sl, [sp, #196]	; 0xc4
   2737c:	str	r0, [sl]
   27380:	b	2652c <__assert_fail@plt+0x14b8c>
   27384:	ldr	sl, [sp, #196]	; 0xc4
   27388:	mov	r3, #11
   2738c:	b	26528 <__assert_fail@plt+0x14b88>
   27390:	ldr	sl, [sp, #196]	; 0xc4
   27394:	mov	r3, #3
   27398:	b	26528 <__assert_fail@plt+0x14b88>
   2739c:	ldr	sl, [sp, #196]	; 0xc4
   273a0:	mov	r3, #11
   273a4:	b	26528 <__assert_fail@plt+0x14b88>
   273a8:	mov	r3, #0
   273ac:	ldr	r2, [sp, #196]	; 0xc4
   273b0:	str	r3, [r2]
   273b4:	b	267c4 <__assert_fail@plt+0x14e24>
   273b8:	ldr	sl, [sp, #196]	; 0xc4
   273bc:	mov	r3, #3
   273c0:	str	r3, [sl]
   273c4:	b	2652c <__assert_fail@plt+0x14b8c>
   273c8:	ldr	sl, [sp, #196]	; 0xc4
   273cc:	mov	r3, #3
   273d0:	str	r3, [sl]
   273d4:	b	2652c <__assert_fail@plt+0x14b8c>
   273d8:	mov	r3, #3
   273dc:	strb	r3, [sp, #124]	; 0x7c
   273e0:	add	r3, sp, #152	; 0x98
   273e4:	str	r5, [r3, #-32]!	; 0xffffffe0
   273e8:	mov	r2, #0
   273ec:	mov	r1, r2
   273f0:	ldr	r0, [sp, #20]
   273f4:	bl	1c7f8 <__assert_fail@plt+0xae58>
   273f8:	subs	r1, r0, #0
   273fc:	beq	27418 <__assert_fail@plt+0x15a78>
   27400:	mov	r3, #10
   27404:	mov	r2, fp
   27408:	ldr	r0, [sp, #20]
   2740c:	bl	1c96c <__assert_fail@plt+0xafcc>
   27410:	subs	fp, r0, #0
   27414:	bne	26bdc <__assert_fail@plt+0x1523c>
   27418:	mov	r3, #12
   2741c:	str	r3, [sl]
   27420:	b	2652c <__assert_fail@plt+0x14b8c>
   27424:	mov	r4, #0
   27428:	mov	r5, r4
   2742c:	bl	11778 <__ctype_b_loc@plt>
   27430:	lsl	r7, r4, #1
   27434:	add	lr, r5, #24
   27438:	ldr	r3, [sp, #20]
   2743c:	add	lr, r3, lr, lsl #2
   27440:	mov	r6, #1
   27444:	b	26d98 <__assert_fail@plt+0x153f8>
   27448:	mov	r4, #128	; 0x80
   2744c:	mov	r5, #4
   27450:	b	2742c <__assert_fail@plt+0x15a8c>
   27454:	cmp	r4, #3
   27458:	bne	265a8 <__assert_fail@plt+0x14c08>
   2745c:	ldr	r0, [sp, #76]	; 0x4c
   27460:	bl	117a8 <strlen@plt>
   27464:	cmp	r0, #1
   27468:	bls	26594 <__assert_fail@plt+0x14bf4>
   2746c:	ldr	sl, [sp, #196]	; 0xc4
   27470:	mov	r3, #3
   27474:	b	267a0 <__assert_fail@plt+0x14e00>
   27478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2747c:	sub	sp, sp, #20
   27480:	mov	fp, r0
   27484:	mov	r9, r1
   27488:	mov	r7, r2
   2748c:	mov	sl, r3
   27490:	ldr	r8, [sp, #56]	; 0x38
   27494:	ldr	r6, [sp, #60]	; 0x3c
   27498:	ldr	ip, [r1]
   2749c:	str	ip, [sp, #12]
   274a0:	str	r6, [sp, #4]
   274a4:	str	r8, [sp]
   274a8:	bl	260cc <__assert_fail@plt+0x1472c>
   274ac:	ldr	r3, [r6]
   274b0:	mov	r4, r0
   274b4:	adds	r2, r3, #0
   274b8:	movne	r2, #1
   274bc:	cmp	r0, #0
   274c0:	movne	r2, #0
   274c4:	cmp	r2, #0
   274c8:	beq	2751c <__assert_fail@plt+0x15b7c>
   274cc:	mov	r4, #0
   274d0:	b	274f0 <__assert_fail@plt+0x15b50>
   274d4:	cmp	r4, #0
   274d8:	beq	274f0 <__assert_fail@plt+0x15b50>
   274dc:	mov	r2, #0
   274e0:	ldr	r1, [pc, #232]	; 275d0 <__assert_fail@plt+0x15c30>
   274e4:	mov	r0, r4
   274e8:	bl	1c608 <__assert_fail@plt+0xac68>
   274ec:	mov	r4, #0
   274f0:	mov	r0, r4
   274f4:	add	sp, sp, #20
   274f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   274fc:	mov	r3, #16
   27500:	mov	r2, r5
   27504:	mov	r1, r4
   27508:	ldr	r0, [sp, #12]
   2750c:	bl	1c96c <__assert_fail@plt+0xafcc>
   27510:	cmp	r0, #0
   27514:	beq	27598 <__assert_fail@plt+0x15bf8>
   27518:	mov	r4, r0
   2751c:	ldrb	r3, [r7, #4]
   27520:	and	r2, r3, #247	; 0xf7
   27524:	cmp	r2, #2
   27528:	beq	274f0 <__assert_fail@plt+0x15b50>
   2752c:	subs	r3, r3, #9
   27530:	movne	r3, #1
   27534:	cmp	r8, #0
   27538:	orreq	r3, r3, #1
   2753c:	cmp	r3, #0
   27540:	beq	274f0 <__assert_fail@plt+0x15b50>
   27544:	str	r6, [sp, #4]
   27548:	str	r8, [sp]
   2754c:	mov	r3, sl
   27550:	mov	r2, r7
   27554:	mov	r1, r9
   27558:	mov	r0, fp
   2755c:	bl	260cc <__assert_fail@plt+0x1472c>
   27560:	ldr	r3, [r6]
   27564:	mov	r5, r0
   27568:	adds	r2, r3, #0
   2756c:	movne	r2, #1
   27570:	cmp	r0, #0
   27574:	movne	r2, #0
   27578:	cmp	r2, #0
   2757c:	bne	274d4 <__assert_fail@plt+0x15b34>
   27580:	cmp	r4, #0
   27584:	cmpne	r5, #0
   27588:	bne	274fc <__assert_fail@plt+0x15b5c>
   2758c:	cmp	r4, #0
   27590:	moveq	r4, r5
   27594:	b	2751c <__assert_fail@plt+0x15b7c>
   27598:	mov	fp, r0
   2759c:	ldr	r7, [pc, #44]	; 275d0 <__assert_fail@plt+0x15c30>
   275a0:	mov	r2, #0
   275a4:	mov	r1, r7
   275a8:	mov	r0, r5
   275ac:	bl	1c608 <__assert_fail@plt+0xac68>
   275b0:	mov	r2, #0
   275b4:	mov	r1, r7
   275b8:	mov	r0, r4
   275bc:	bl	1c608 <__assert_fail@plt+0xac68>
   275c0:	mov	r3, #12
   275c4:	str	r3, [r6]
   275c8:	mov	r4, fp
   275cc:	b	274f0 <__assert_fail@plt+0x15b50>
   275d0:	andeq	lr, r1, r4, lsr #8
   275d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275d8:	sub	sp, sp, #28
   275dc:	str	r0, [sp, #12]
   275e0:	str	r1, [sp, #16]
   275e4:	mov	r4, r2
   275e8:	mov	r6, r3
   275ec:	str	r3, [sp, #20]
   275f0:	ldr	r9, [sp, #64]	; 0x40
   275f4:	ldr	r8, [sp, #68]	; 0x44
   275f8:	ldr	r5, [r1]
   275fc:	ldr	fp, [r5, #84]	; 0x54
   27600:	str	r8, [sp, #4]
   27604:	str	r9, [sp]
   27608:	bl	27478 <__assert_fail@plt+0x15ad8>
   2760c:	ldr	r3, [r8]
   27610:	mov	r7, r0
   27614:	adds	r2, r3, #0
   27618:	movne	r2, #1
   2761c:	cmp	r0, #0
   27620:	movne	r2, #0
   27624:	cmp	r2, #0
   27628:	bne	27724 <__assert_fail@plt+0x15d84>
   2762c:	orr	sl, r6, #8388608	; 0x800000
   27630:	b	2769c <__assert_fail@plt+0x15cfc>
   27634:	ldr	r6, [r5, #84]	; 0x54
   27638:	str	fp, [r5, #84]	; 0x54
   2763c:	str	r8, [sp, #4]
   27640:	str	r9, [sp]
   27644:	ldr	r3, [sp, #20]
   27648:	mov	r2, r4
   2764c:	ldr	r1, [sp, #16]
   27650:	ldr	r0, [sp, #12]
   27654:	bl	27478 <__assert_fail@plt+0x15ad8>
   27658:	ldr	r3, [r8]
   2765c:	mov	r2, r0
   27660:	adds	r1, r3, #0
   27664:	movne	r1, #1
   27668:	cmp	r0, #0
   2766c:	movne	r1, #0
   27670:	cmp	r1, #0
   27674:	bne	276e8 <__assert_fail@plt+0x15d48>
   27678:	ldr	r3, [r5, #84]	; 0x54
   2767c:	orr	r6, r3, r6
   27680:	str	r6, [r5, #84]	; 0x54
   27684:	mov	r3, #10
   27688:	mov	r1, r7
   2768c:	mov	r0, r5
   27690:	bl	1c96c <__assert_fail@plt+0xafcc>
   27694:	subs	r7, r0, #0
   27698:	beq	27710 <__assert_fail@plt+0x15d70>
   2769c:	ldrb	r3, [r4, #4]
   276a0:	cmp	r3, #10
   276a4:	bne	27718 <__assert_fail@plt+0x15d78>
   276a8:	mov	r2, sl
   276ac:	ldr	r1, [sp, #12]
   276b0:	mov	r0, r4
   276b4:	bl	1e2f4 <__assert_fail@plt+0xc954>
   276b8:	ldrb	r2, [r4, #4]
   276bc:	and	r3, r2, #247	; 0xf7
   276c0:	cmp	r3, #2
   276c4:	beq	27708 <__assert_fail@plt+0x15d68>
   276c8:	clz	r3, r9
   276cc:	lsr	r3, r3, #5
   276d0:	cmp	r2, #9
   276d4:	orrne	r3, r3, #1
   276d8:	cmp	r3, #0
   276dc:	bne	27634 <__assert_fail@plt+0x15c94>
   276e0:	mov	r2, #0
   276e4:	b	27684 <__assert_fail@plt+0x15ce4>
   276e8:	cmp	r7, #0
   276ec:	beq	27718 <__assert_fail@plt+0x15d78>
   276f0:	mov	r2, #0
   276f4:	ldr	r1, [pc, #48]	; 2772c <__assert_fail@plt+0x15d8c>
   276f8:	mov	r0, r7
   276fc:	bl	1c608 <__assert_fail@plt+0xac68>
   27700:	mov	r7, #0
   27704:	b	27718 <__assert_fail@plt+0x15d78>
   27708:	mov	r2, #0
   2770c:	b	27684 <__assert_fail@plt+0x15ce4>
   27710:	mov	r3, #12
   27714:	str	r3, [r8]
   27718:	mov	r0, r7
   2771c:	add	sp, sp, #28
   27720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27724:	mov	r7, #0
   27728:	b	27718 <__assert_fail@plt+0x15d78>
   2772c:	andeq	lr, r1, r4, lsr #8
   27730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27734:	sub	sp, sp, #124	; 0x7c
   27738:	mov	sl, r0
   2773c:	str	r1, [sp, #12]
   27740:	mov	r9, r2
   27744:	mov	fp, r3
   27748:	mov	r2, #0
   2774c:	str	r2, [sp, #116]	; 0x74
   27750:	ldrb	r3, [r0, #28]
   27754:	str	fp, [r0, #12]
   27758:	str	r2, [r0, #8]
   2775c:	str	r2, [r0, #24]
   27760:	and	r3, r3, #144	; 0x90
   27764:	strb	r3, [r0, #28]
   27768:	ldr	r6, [r0]
   2776c:	ldr	r3, [r0, #4]
   27770:	cmp	r3, #159	; 0x9f
   27774:	bls	279d0 <__assert_fail@plt+0x16030>
   27778:	mov	r2, #160	; 0xa0
   2777c:	str	r2, [sl, #8]
   27780:	mov	r1, #0
   27784:	mov	r0, r6
   27788:	bl	11814 <memset@plt>
   2778c:	mov	r3, #31
   27790:	str	r3, [r6, #64]	; 0x40
   27794:	ldr	r3, [pc, #3044]	; 28380 <__assert_fail@plt+0x169e0>
   27798:	cmp	r9, r3
   2779c:	bhi	282b8 <__assert_fail@plt+0x16918>
   277a0:	add	r0, r9, #1
   277a4:	str	r0, [r6, #4]
   277a8:	lsl	r0, r0, #3
   277ac:	bl	1b954 <__assert_fail@plt+0x9fb4>
   277b0:	str	r0, [r6]
   277b4:	cmp	r9, #0
   277b8:	beq	279f4 <__assert_fail@plt+0x16054>
   277bc:	mov	r4, #1
   277c0:	lsl	r4, r4, #1
   277c4:	cmp	r9, r4
   277c8:	bcs	277c0 <__assert_fail@plt+0x15e20>
   277cc:	mov	r1, r4
   277d0:	mov	r0, #12
   277d4:	bl	1b548 <__assert_fail@plt+0x9ba8>
   277d8:	str	r0, [r6, #32]
   277dc:	sub	r4, r4, #1
   277e0:	str	r4, [r6, #68]	; 0x44
   277e4:	bl	116a0 <__ctype_get_mb_cur_max@plt>
   277e8:	str	r0, [r6, #92]	; 0x5c
   277ec:	mov	r0, #14
   277f0:	bl	118b0 <nl_langinfo@plt>
   277f4:	ldrb	r3, [r0]
   277f8:	and	r3, r3, #223	; 0xdf
   277fc:	cmp	r3, #85	; 0x55
   27800:	bne	27850 <__assert_fail@plt+0x15eb0>
   27804:	ldrb	r3, [r0, #1]
   27808:	and	r3, r3, #223	; 0xdf
   2780c:	cmp	r3, #84	; 0x54
   27810:	bne	27850 <__assert_fail@plt+0x15eb0>
   27814:	ldrb	r3, [r0, #2]
   27818:	and	r3, r3, #223	; 0xdf
   2781c:	cmp	r3, #70	; 0x46
   27820:	bne	27850 <__assert_fail@plt+0x15eb0>
   27824:	ldrb	r3, [r0, #3]
   27828:	cmp	r3, #45	; 0x2d
   2782c:	moveq	r3, #4
   27830:	movne	r3, #3
   27834:	ldr	r1, [pc, #2888]	; 28384 <__assert_fail@plt+0x169e4>
   27838:	add	r0, r0, r3
   2783c:	bl	11544 <strcmp@plt>
   27840:	cmp	r0, #0
   27844:	ldrbeq	r3, [r6, #88]	; 0x58
   27848:	orreq	r3, r3, #4
   2784c:	strbeq	r3, [r6, #88]	; 0x58
   27850:	ldrb	r3, [r6, #88]	; 0x58
   27854:	bic	r3, r3, #8
   27858:	strb	r3, [r6, #88]	; 0x58
   2785c:	ldr	r3, [r6, #92]	; 0x5c
   27860:	cmp	r3, #1
   27864:	ble	2787c <__assert_fail@plt+0x15edc>
   27868:	ldrb	r3, [r6, #88]	; 0x58
   2786c:	tst	r3, #4
   27870:	beq	279fc <__assert_fail@plt+0x1605c>
   27874:	ldr	r3, [pc, #2828]	; 28388 <__assert_fail@plt+0x169e8>
   27878:	str	r3, [r6, #60]	; 0x3c
   2787c:	ldr	r3, [r6]
   27880:	cmp	r3, #0
   27884:	beq	282b8 <__assert_fail@plt+0x16918>
   27888:	ldr	r3, [r6, #32]
   2788c:	cmp	r3, #0
   27890:	beq	282b8 <__assert_fail@plt+0x16918>
   27894:	mov	r3, #0
   27898:	str	r3, [sp, #116]	; 0x74
   2789c:	mov	r3, #1
   278a0:	ldr	r2, [pc, #2788]	; 2838c <__assert_fail@plt+0x169ec>
   278a4:	cmp	r2, #0
   278a8:	moveq	r3, #0
   278ac:	mov	r2, #1
   278b0:	ldr	r1, [pc, #2776]	; 28390 <__assert_fail@plt+0x169f0>
   278b4:	cmp	r1, #0
   278b8:	moveq	r2, #0
   278bc:	orr	r3, r3, r2
   278c0:	tst	r3, #255	; 0xff
   278c4:	bne	27a80 <__assert_fail@plt+0x160e0>
   278c8:	mov	r7, r9
   278cc:	ldr	r5, [sl, #20]
   278d0:	ands	r8, fp, #4194304	; 0x400000
   278d4:	movne	r4, #1
   278d8:	moveq	r4, #0
   278dc:	mov	r2, #84	; 0x54
   278e0:	mov	r1, #0
   278e4:	add	r0, sp, #32
   278e8:	bl	11814 <memset@plt>
   278ec:	ldr	r3, [sp, #12]
   278f0:	str	r3, [sp, #32]
   278f4:	str	r9, [sp, #80]	; 0x50
   278f8:	str	r9, [sp, #76]	; 0x4c
   278fc:	str	r5, [sp, #96]	; 0x60
   27900:	strb	r4, [sp, #104]	; 0x68
   27904:	cmp	r5, #0
   27908:	orrne	r4, r4, #1
   2790c:	strb	r4, [sp, #107]	; 0x6b
   27910:	ldr	r3, [r6, #92]	; 0x5c
   27914:	str	r3, [sp, #112]	; 0x70
   27918:	ldrb	r3, [r6, #88]	; 0x58
   2791c:	lsr	r2, r3, #2
   27920:	and	r2, r2, #1
   27924:	strb	r2, [sp, #105]	; 0x69
   27928:	lsr	r3, r3, #3
   2792c:	and	r3, r3, #1
   27930:	strb	r3, [sp, #106]	; 0x6a
   27934:	str	r9, [sp, #88]	; 0x58
   27938:	str	r9, [sp, #84]	; 0x54
   2793c:	cmp	r9, #0
   27940:	ble	27958 <__assert_fail@plt+0x15fb8>
   27944:	add	r1, r9, #1
   27948:	add	r0, sp, #32
   2794c:	bl	1c6e4 <__assert_fail@plt+0xad44>
   27950:	cmp	r0, #0
   27954:	bne	279c8 <__assert_fail@plt+0x16028>
   27958:	ldrb	r3, [sp, #107]	; 0x6b
   2795c:	cmp	r3, #0
   27960:	ldrne	r3, [sp, #36]	; 0x24
   27964:	ldreq	r3, [sp, #12]
   27968:	str	r3, [sp, #36]	; 0x24
   2796c:	cmp	r8, #0
   27970:	beq	27ab8 <__assert_fail@plt+0x16118>
   27974:	ldr	r3, [r6, #92]	; 0x5c
   27978:	cmp	r3, #1
   2797c:	ble	27aac <__assert_fail@plt+0x1610c>
   27980:	add	r0, sp, #32
   27984:	bl	1ce4c <__assert_fail@plt+0xb4ac>
   27988:	cmp	r0, #0
   2798c:	bne	279c8 <__assert_fail@plt+0x16028>
   27990:	ldr	r3, [sp, #64]	; 0x40
   27994:	cmp	r7, r3
   27998:	ble	27ae0 <__assert_fail@plt+0x16140>
   2799c:	ldr	r1, [sp, #68]	; 0x44
   279a0:	ldr	r2, [r6, #92]	; 0x5c
   279a4:	ldr	r3, [sp, #60]	; 0x3c
   279a8:	add	r3, r3, r2
   279ac:	cmp	r1, r3
   279b0:	bgt	27ae0 <__assert_fail@plt+0x16140>
   279b4:	lsl	r1, r1, #1
   279b8:	add	r0, sp, #32
   279bc:	bl	1c6e4 <__assert_fail@plt+0xad44>
   279c0:	cmp	r0, #0
   279c4:	beq	27980 <__assert_fail@plt+0x15fe0>
   279c8:	str	r0, [sp, #116]	; 0x74
   279cc:	b	28320 <__assert_fail@plt+0x16980>
   279d0:	mov	r1, #160	; 0xa0
   279d4:	mov	r0, r6
   279d8:	bl	1b9dc <__assert_fail@plt+0xa03c>
   279dc:	subs	r6, r0, #0
   279e0:	beq	282b0 <__assert_fail@plt+0x16910>
   279e4:	mov	r3, #160	; 0xa0
   279e8:	str	r3, [sl, #4]
   279ec:	str	r6, [sl]
   279f0:	b	27778 <__assert_fail@plt+0x15dd8>
   279f4:	mov	r4, #1
   279f8:	b	277cc <__assert_fail@plt+0x15e2c>
   279fc:	mov	r1, #1
   27a00:	mov	r0, #32
   27a04:	bl	1b548 <__assert_fail@plt+0x9ba8>
   27a08:	str	r0, [r6, #60]	; 0x3c
   27a0c:	cmp	r0, #0
   27a10:	beq	282b8 <__assert_fail@plt+0x16918>
   27a14:	mov	r7, #0
   27a18:	mov	r8, #1
   27a1c:	b	27a74 <__assert_fail@plt+0x160d4>
   27a20:	add	r5, r5, #1
   27a24:	add	r4, r4, #1
   27a28:	cmp	r5, #32
   27a2c:	beq	27a68 <__assert_fail@plt+0x160c8>
   27a30:	mov	r0, r4
   27a34:	bl	1182c <btowc@plt>
   27a38:	cmn	r0, #1
   27a3c:	ldrne	r2, [r6, #60]	; 0x3c
   27a40:	ldrne	r3, [r2, r7]
   27a44:	orrne	r3, r3, r8, lsl r5
   27a48:	strne	r3, [r2, r7]
   27a4c:	bics	r3, r4, #127	; 0x7f
   27a50:	bne	27a20 <__assert_fail@plt+0x16080>
   27a54:	cmp	r0, r4
   27a58:	ldrbne	r3, [r6, #88]	; 0x58
   27a5c:	orrne	r3, r3, #8
   27a60:	strbne	r3, [r6, #88]	; 0x58
   27a64:	b	27a20 <__assert_fail@plt+0x16080>
   27a68:	add	r7, r7, #4
   27a6c:	cmp	r7, #32
   27a70:	beq	2787c <__assert_fail@plt+0x15edc>
   27a74:	lsl	r4, r7, #3
   27a78:	mov	r5, #0
   27a7c:	b	27a30 <__assert_fail@plt+0x16090>
   27a80:	mov	r1, #0
   27a84:	add	r0, r6, #136	; 0x88
   27a88:	bl	115e0 <pthread_mutex_init@plt>
   27a8c:	cmp	r0, #0
   27a90:	movne	r3, #12
   27a94:	strne	r3, [sp, #116]	; 0x74
   27a98:	bne	282c0 <__assert_fail@plt+0x16920>
   27a9c:	ldr	r3, [sp, #116]	; 0x74
   27aa0:	cmp	r3, #0
   27aa4:	beq	278c8 <__assert_fail@plt+0x15f28>
   27aa8:	b	282c0 <__assert_fail@plt+0x16920>
   27aac:	add	r0, sp, #32
   27ab0:	bl	1d7d4 <__assert_fail@plt+0xbe34>
   27ab4:	b	27ae0 <__assert_fail@plt+0x16140>
   27ab8:	ldr	r3, [r6, #92]	; 0x5c
   27abc:	cmp	r3, #1
   27ac0:	bgt	27ad8 <__assert_fail@plt+0x16138>
   27ac4:	cmp	r4, #0
   27ac8:	beq	27d38 <__assert_fail@plt+0x16398>
   27acc:	add	r0, sp, #32
   27ad0:	bl	1bb08 <__assert_fail@plt+0xa168>
   27ad4:	b	27ae0 <__assert_fail@plt+0x16140>
   27ad8:	add	r0, sp, #32
   27adc:	bl	1ccb0 <__assert_fail@plt+0xb310>
   27ae0:	mov	r4, #0
   27ae4:	str	r4, [sp, #116]	; 0x74
   27ae8:	str	r4, [sl, #24]
   27aec:	ldr	r5, [sl]
   27af0:	str	fp, [r5, #128]	; 0x80
   27af4:	orr	r2, fp, #8388608	; 0x800000
   27af8:	add	r1, sp, #32
   27afc:	add	r0, sp, #20
   27b00:	bl	1e2f4 <__assert_fail@plt+0xc954>
   27b04:	add	r3, sp, #116	; 0x74
   27b08:	str	r3, [sp, #4]
   27b0c:	str	r4, [sp]
   27b10:	mov	r3, fp
   27b14:	add	r2, sp, #20
   27b18:	mov	r1, sl
   27b1c:	add	r0, sp, #32
   27b20:	bl	275d4 <__assert_fail@plt+0x15c34>
   27b24:	mov	r7, r0
   27b28:	ldr	r3, [sp, #116]	; 0x74
   27b2c:	subs	r2, r3, r4
   27b30:	movne	r2, #1
   27b34:	cmp	r0, r4
   27b38:	movne	r2, #0
   27b3c:	cmp	r2, r4
   27b40:	bne	282dc <__assert_fail@plt+0x1693c>
   27b44:	mov	r3, #2
   27b48:	mov	r2, #0
   27b4c:	mov	r1, r2
   27b50:	mov	r0, r5
   27b54:	bl	1c96c <__assert_fail@plt+0xafcc>
   27b58:	mov	r4, r0
   27b5c:	cmp	r7, #0
   27b60:	beq	27b78 <__assert_fail@plt+0x161d8>
   27b64:	mov	r3, #16
   27b68:	mov	r2, r4
   27b6c:	mov	r1, r7
   27b70:	mov	r0, r5
   27b74:	bl	1c96c <__assert_fail@plt+0xafcc>
   27b78:	cmp	r0, #0
   27b7c:	cmpne	r4, #0
   27b80:	moveq	r3, #12
   27b84:	streq	r3, [sp, #116]	; 0x74
   27b88:	beq	282dc <__assert_fail@plt+0x1693c>
   27b8c:	str	r0, [r6, #52]	; 0x34
   27b90:	cmp	r0, #0
   27b94:	beq	28320 <__assert_fail@plt+0x16980>
   27b98:	ldr	r4, [sl]
   27b9c:	ldr	r0, [r4, #4]
   27ba0:	lsl	r0, r0, #2
   27ba4:	bl	1b954 <__assert_fail@plt+0x9fb4>
   27ba8:	str	r0, [r4, #12]
   27bac:	ldr	r0, [r4, #4]
   27bb0:	lsl	r0, r0, #2
   27bb4:	bl	1b954 <__assert_fail@plt+0x9fb4>
   27bb8:	str	r0, [r4, #16]
   27bbc:	ldr	r0, [r4, #4]
   27bc0:	add	r0, r0, r0, lsl #1
   27bc4:	lsl	r0, r0, #2
   27bc8:	bl	1b954 <__assert_fail@plt+0x9fb4>
   27bcc:	str	r0, [r4, #20]
   27bd0:	ldr	r0, [r4, #4]
   27bd4:	add	r0, r0, r0, lsl #1
   27bd8:	lsl	r0, r0, #2
   27bdc:	bl	1b954 <__assert_fail@plt+0x9fb4>
   27be0:	str	r0, [r4, #24]
   27be4:	ldr	r3, [r4, #12]
   27be8:	cmp	r3, #0
   27bec:	beq	282e8 <__assert_fail@plt+0x16948>
   27bf0:	ldr	r3, [r4, #16]
   27bf4:	cmp	r3, #0
   27bf8:	beq	28318 <__assert_fail@plt+0x16978>
   27bfc:	ldr	fp, [r4, #20]
   27c00:	cmp	r0, #0
   27c04:	cmpne	fp, #0
   27c08:	moveq	fp, #1
   27c0c:	movne	fp, #0
   27c10:	beq	282f0 <__assert_fail@plt+0x16950>
   27c14:	ldr	r0, [sl, #24]
   27c18:	lsl	r0, r0, #2
   27c1c:	bl	1b954 <__assert_fail@plt+0x9fb4>
   27c20:	str	r0, [r4, #132]	; 0x84
   27c24:	cmp	r0, #0
   27c28:	beq	27c98 <__assert_fail@plt+0x162f8>
   27c2c:	ldr	r3, [sl, #24]
   27c30:	cmp	r3, #0
   27c34:	beq	27c54 <__assert_fail@plt+0x162b4>
   27c38:	mov	r3, #0
   27c3c:	ldr	r2, [r4, #132]	; 0x84
   27c40:	str	r3, [r2, r3, lsl #2]
   27c44:	add	r3, r3, #1
   27c48:	ldr	r2, [sl, #24]
   27c4c:	cmp	r3, r2
   27c50:	bcc	27c3c <__assert_fail@plt+0x1629c>
   27c54:	mov	r2, r4
   27c58:	ldr	r1, [pc, #1844]	; 28394 <__assert_fail@plt+0x169f4>
   27c5c:	ldr	r0, [r4, #52]	; 0x34
   27c60:	bl	1c67c <__assert_fail@plt+0xacdc>
   27c64:	ldr	r1, [sl, #24]
   27c68:	cmp	r1, #0
   27c6c:	beq	27d4c <__assert_fail@plt+0x163ac>
   27c70:	ldr	r0, [r4, #132]	; 0x84
   27c74:	ldr	r3, [r0]
   27c78:	cmp	r3, #0
   27c7c:	bne	27c98 <__assert_fail@plt+0x162f8>
   27c80:	add	r3, r3, #1
   27c84:	cmp	r1, r3
   27c88:	bls	27d48 <__assert_fail@plt+0x163a8>
   27c8c:	ldr	r2, [r0, r3, lsl #2]
   27c90:	cmp	r2, r3
   27c94:	beq	27c80 <__assert_fail@plt+0x162e0>
   27c98:	mov	r2, sl
   27c9c:	ldr	r1, [pc, #1780]	; 28398 <__assert_fail@plt+0x169f8>
   27ca0:	ldr	r0, [r4, #52]	; 0x34
   27ca4:	bl	1c608 <__assert_fail@plt+0xac68>
   27ca8:	cmp	r0, #0
   27cac:	bne	28304 <__assert_fail@plt+0x16964>
   27cb0:	mov	r2, r4
   27cb4:	ldr	r1, [pc, #1760]	; 2839c <__assert_fail@plt+0x169fc>
   27cb8:	ldr	r0, [r4, #52]	; 0x34
   27cbc:	bl	1c608 <__assert_fail@plt+0xac68>
   27cc0:	cmp	r0, #0
   27cc4:	bne	28304 <__assert_fail@plt+0x16964>
   27cc8:	mov	r2, r4
   27ccc:	ldr	r1, [pc, #1740]	; 283a0 <__assert_fail@plt+0x16a00>
   27cd0:	ldr	r0, [r4, #52]	; 0x34
   27cd4:	bl	1c67c <__assert_fail@plt+0xacdc>
   27cd8:	mov	r2, r4
   27cdc:	ldr	r1, [pc, #1728]	; 283a4 <__assert_fail@plt+0x16a04>
   27ce0:	ldr	r0, [r4, #52]	; 0x34
   27ce4:	bl	1c67c <__assert_fail@plt+0xacdc>
   27ce8:	cmp	r0, #0
   27cec:	bne	28304 <__assert_fail@plt+0x16964>
   27cf0:	mov	r5, fp
   27cf4:	mov	r7, #0
   27cf8:	add	r9, r7, r7, lsl #1
   27cfc:	lsl	r9, r9, #2
   27d00:	ldr	r3, [r4, #24]
   27d04:	add	r3, r3, r9
   27d08:	ldr	r3, [r3, #4]
   27d0c:	cmp	r3, #0
   27d10:	beq	27d60 <__assert_fail@plt+0x163c0>
   27d14:	add	r7, r7, #1
   27d18:	ldr	r3, [r4, #8]
   27d1c:	cmp	r3, r7
   27d20:	bne	27cf8 <__assert_fail@plt+0x16358>
   27d24:	cmp	r5, #0
   27d28:	beq	27da0 <__assert_fail@plt+0x16400>
   27d2c:	mov	r5, fp
   27d30:	mov	r7, #0
   27d34:	b	27cf8 <__assert_fail@plt+0x16358>
   27d38:	ldr	r3, [sp, #68]	; 0x44
   27d3c:	str	r3, [sp, #60]	; 0x3c
   27d40:	str	r3, [sp, #64]	; 0x40
   27d44:	b	27ae0 <__assert_fail@plt+0x16140>
   27d48:	bne	27c98 <__assert_fail@plt+0x162f8>
   27d4c:	ldr	r0, [r4, #132]	; 0x84
   27d50:	bl	1b854 <__assert_fail@plt+0x9eb4>
   27d54:	mov	r3, #0
   27d58:	str	r3, [r4, #132]	; 0x84
   27d5c:	b	27c98 <__assert_fail@plt+0x162f8>
   27d60:	mov	r3, #1
   27d64:	mov	r2, r7
   27d68:	mov	r1, r4
   27d6c:	add	r0, sp, #20
   27d70:	bl	1f80c <__assert_fail@plt+0xde6c>
   27d74:	cmp	r0, #0
   27d78:	bne	2831c <__assert_fail@plt+0x1697c>
   27d7c:	ldr	r3, [r4, #24]
   27d80:	add	r9, r3, r9
   27d84:	ldr	r3, [r9, #4]
   27d88:	cmp	r3, #0
   27d8c:	bne	27d14 <__assert_fail@plt+0x16374>
   27d90:	ldr	r0, [sp, #28]
   27d94:	bl	1b854 <__assert_fail@plt+0x9eb4>
   27d98:	mov	r5, #1
   27d9c:	b	27d14 <__assert_fail@plt+0x16374>
   27da0:	ldrb	r3, [sl, #28]
   27da4:	tst	r3, #16
   27da8:	beq	27f14 <__assert_fail@plt+0x16574>
   27dac:	ldr	r3, [r4, #76]	; 0x4c
   27db0:	cmp	r3, #0
   27db4:	beq	27e98 <__assert_fail@plt+0x164f8>
   27db8:	ldr	r0, [r4, #8]
   27dbc:	add	r0, r0, r0, lsl #1
   27dc0:	lsl	r0, r0, #2
   27dc4:	bl	1b954 <__assert_fail@plt+0x9fb4>
   27dc8:	str	r0, [r4, #28]
   27dcc:	cmp	r0, #0
   27dd0:	beq	282f8 <__assert_fail@plt+0x16958>
   27dd4:	ldr	r3, [r4, #8]
   27dd8:	cmp	r3, #0
   27ddc:	beq	2830c <__assert_fail@plt+0x1696c>
   27de0:	mov	r3, #0
   27de4:	mov	r1, r3
   27de8:	mov	r2, r3
   27dec:	ldr	ip, [r4, #28]
   27df0:	add	r0, ip, r3
   27df4:	str	r2, [ip, r3]
   27df8:	str	r2, [r0, #4]
   27dfc:	str	r2, [r0, #8]
   27e00:	add	r1, r1, #1
   27e04:	ldr	r0, [r4, #8]
   27e08:	add	r3, r3, #12
   27e0c:	cmp	r1, r0
   27e10:	bcc	27dec <__assert_fail@plt+0x1644c>
   27e14:	cmp	r0, #0
   27e18:	beq	27e98 <__assert_fail@plt+0x164f8>
   27e1c:	mov	fp, #0
   27e20:	str	r5, [sp, #12]
   27e24:	mov	r5, fp
   27e28:	ldr	r3, [r4, #24]
   27e2c:	add	r3, r3, fp
   27e30:	ldr	r9, [r3, #8]
   27e34:	ldr	r3, [r3, #4]
   27e38:	cmp	r3, #0
   27e3c:	ble	27e80 <__assert_fail@plt+0x164e0>
   27e40:	sub	r9, r9, #4
   27e44:	mov	r7, #0
   27e48:	ldr	r0, [r9, #4]!
   27e4c:	add	r0, r0, r0, lsl #1
   27e50:	ldr	r3, [r4, #28]
   27e54:	mov	r1, r5
   27e58:	add	r0, r3, r0, lsl #2
   27e5c:	bl	1c794 <__assert_fail@plt+0xadf4>
   27e60:	cmp	r0, #0
   27e64:	beq	28300 <__assert_fail@plt+0x16960>
   27e68:	add	r7, r7, #1
   27e6c:	ldr	r3, [r4, #24]
   27e70:	add	r3, r3, fp
   27e74:	ldr	r3, [r3, #4]
   27e78:	cmp	r7, r3
   27e7c:	blt	27e48 <__assert_fail@plt+0x164a8>
   27e80:	add	r5, r5, #1
   27e84:	add	fp, fp, #12
   27e88:	ldr	r3, [r4, #8]
   27e8c:	cmp	r5, r3
   27e90:	bcc	27e28 <__assert_fail@plt+0x16488>
   27e94:	ldr	r5, [sp, #12]
   27e98:	mov	r3, #0
   27e9c:	str	r3, [sp, #116]	; 0x74
   27ea0:	ldrb	r3, [r6, #88]	; 0x58
   27ea4:	clz	r8, r8
   27ea8:	lsr	r8, r8, #5
   27eac:	ands	r8, r8, r3, lsr #2
   27eb0:	beq	27ec0 <__assert_fail@plt+0x16520>
   27eb4:	ldr	r3, [sl, #20]
   27eb8:	cmp	r3, #0
   27ebc:	beq	27f30 <__assert_fail@plt+0x16590>
   27ec0:	ldr	r3, [r6, #52]	; 0x34
   27ec4:	ldr	r3, [r3, #12]
   27ec8:	ldr	r1, [r3, #28]
   27ecc:	str	r1, [r6, #72]	; 0x48
   27ed0:	add	r1, r1, r1, lsl #1
   27ed4:	ldr	r3, [r6, #24]
   27ed8:	add	r1, r3, r1, lsl #2
   27edc:	add	r0, sp, #20
   27ee0:	bl	1d40c <__assert_fail@plt+0xba6c>
   27ee4:	mov	r5, r0
   27ee8:	str	r0, [sp, #16]
   27eec:	cmp	r0, #0
   27ef0:	bne	281c4 <__assert_fail@plt+0x16824>
   27ef4:	ldr	r3, [r6, #76]	; 0x4c
   27ef8:	cmp	r3, #0
   27efc:	ble	28180 <__assert_fail@plt+0x167e0>
   27f00:	ldr	lr, [sp, #24]
   27f04:	cmp	lr, #0
   27f08:	ble	28180 <__assert_fail@plt+0x167e0>
   27f0c:	mov	r4, #0
   27f10:	b	28128 <__assert_fail@plt+0x16788>
   27f14:	ldr	r3, [sl, #24]
   27f18:	cmp	r3, #0
   27f1c:	beq	27dac <__assert_fail@plt+0x1640c>
   27f20:	ldrb	r3, [r4, #88]	; 0x58
   27f24:	tst	r3, #1
   27f28:	bne	27db8 <__assert_fail@plt+0x16418>
   27f2c:	b	27dac <__assert_fail@plt+0x1640c>
   27f30:	ldr	r3, [r6, #8]
   27f34:	cmp	r3, #0
   27f38:	beq	280b0 <__assert_fail@plt+0x16710>
   27f3c:	ldr	ip, [r6]
   27f40:	mov	lr, ip
   27f44:	mov	r0, r3
   27f48:	mov	r3, r5
   27f4c:	mov	r2, #0
   27f50:	b	27f68 <__assert_fail@plt+0x165c8>
   27f54:	mov	r3, r8
   27f58:	add	r2, r2, #1
   27f5c:	add	lr, lr, #8
   27f60:	cmp	r2, r0
   27f64:	beq	28028 <__assert_fail@plt+0x16688>
   27f68:	ldrb	r1, [lr, #4]
   27f6c:	sub	r1, r1, #1
   27f70:	cmp	r1, #11
   27f74:	ldrls	pc, [pc, r1, lsl #2]
   27f78:	b	28024 <__assert_fail@plt+0x16684>
   27f7c:	andeq	r7, r2, r4, ror #31
   27f80:	andeq	r7, r2, r8, asr pc
   27f84:	andeq	r7, r2, ip, lsr #31
   27f88:	andeq	r7, r2, r8, asr pc
   27f8c:	andeq	r7, r2, r4, asr pc
   27f90:	andeq	r7, r2, r0, asr #29
   27f94:	andeq	r8, r2, r4, lsr #32
   27f98:	andeq	r7, r2, r8, asr pc
   27f9c:	andeq	r7, r2, r8, asr pc
   27fa0:	andeq	r7, r2, r8, asr pc
   27fa4:	andeq	r7, r2, r8, asr pc
   27fa8:	strdeq	r7, [r2], -r4
   27fac:	ldr	r1, [ip, r2, lsl #3]
   27fb0:	ldr	r4, [r1, #16]
   27fb4:	cmp	r4, #0
   27fb8:	bne	27ec0 <__assert_fail@plt+0x16520>
   27fbc:	ldr	r4, [r1, #20]
   27fc0:	cmp	r4, #0
   27fc4:	bne	27ec0 <__assert_fail@plt+0x16520>
   27fc8:	ldr	r4, [r1, #24]
   27fcc:	cmp	r4, #0
   27fd0:	bne	27ec0 <__assert_fail@plt+0x16520>
   27fd4:	ldr	r1, [r1, #28]
   27fd8:	cmp	r1, #0
   27fdc:	beq	27f58 <__assert_fail@plt+0x165b8>
   27fe0:	b	27ec0 <__assert_fail@plt+0x16520>
   27fe4:	ldrb	r1, [ip, r2, lsl #3]
   27fe8:	lsrs	r1, r1, #7
   27fec:	movne	r5, r8
   27ff0:	b	27f58 <__assert_fail@plt+0x165b8>
   27ff4:	ldr	r1, [ip, r2, lsl #3]
   27ff8:	cmp	r1, #32
   27ffc:	beq	27f58 <__assert_fail@plt+0x165b8>
   28000:	bls	28018 <__assert_fail@plt+0x16678>
   28004:	cmp	r1, #64	; 0x40
   28008:	beq	27f58 <__assert_fail@plt+0x165b8>
   2800c:	cmp	r1, #128	; 0x80
   28010:	beq	27f58 <__assert_fail@plt+0x165b8>
   28014:	b	27ec0 <__assert_fail@plt+0x16520>
   28018:	cmp	r1, #16
   2801c:	beq	27f58 <__assert_fail@plt+0x165b8>
   28020:	b	27ec0 <__assert_fail@plt+0x16520>
   28024:	bl	11964 <abort@plt>
   28028:	orr	r5, r5, r3
   2802c:	tst	r5, #255	; 0xff
   28030:	beq	2806c <__assert_fail@plt+0x166cc>
   28034:	mov	r2, #0
   28038:	mov	r4, #7
   2803c:	lsl	ip, r2, #3
   28040:	ldr	lr, [r6]
   28044:	add	r1, lr, ip
   28048:	ldrb	r0, [r1, #4]
   2804c:	cmp	r0, #1
   28050:	beq	28098 <__assert_fail@plt+0x166f8>
   28054:	cmp	r0, #5
   28058:	strbeq	r4, [r1, #4]
   2805c:	add	r2, r2, #1
   28060:	ldr	r1, [r6, #8]
   28064:	cmp	r2, r1
   28068:	bcc	2803c <__assert_fail@plt+0x1669c>
   2806c:	mov	r2, #1
   28070:	str	r2, [r6, #92]	; 0x5c
   28074:	ldrb	r2, [r6, #88]	; 0x58
   28078:	ldr	r1, [r6, #76]	; 0x4c
   2807c:	cmp	r1, #0
   28080:	orrgt	r3, r3, #1
   28084:	and	r3, r3, #1
   28088:	and	r2, r2, #249	; 0xf9
   2808c:	orr	r3, r2, r3, lsl #1
   28090:	strb	r3, [r6, #88]	; 0x58
   28094:	b	27ec0 <__assert_fail@plt+0x16520>
   28098:	ldrsb	r0, [lr, ip]
   2809c:	cmp	r0, #0
   280a0:	ldrblt	r0, [r1, #6]
   280a4:	biclt	r0, r0, #32
   280a8:	strblt	r0, [r1, #6]
   280ac:	b	2805c <__assert_fail@plt+0x166bc>
   280b0:	mov	r3, r5
   280b4:	b	2806c <__assert_fail@plt+0x166cc>
   280b8:	add	r3, r3, #1
   280bc:	cmp	lr, r3
   280c0:	beq	28118 <__assert_fail@plt+0x16778>
   280c4:	ldr	r1, [r2, #4]!
   280c8:	add	r0, ip, r1, lsl #3
   280cc:	ldrb	r0, [r0, #4]
   280d0:	cmp	r0, #9
   280d4:	bne	280b8 <__assert_fail@plt+0x16718>
   280d8:	ldr	r0, [ip, r1, lsl #3]
   280dc:	ldr	r1, [r7]
   280e0:	cmp	r0, r1
   280e4:	bne	280b8 <__assert_fail@plt+0x16718>
   280e8:	cmp	lr, r3
   280ec:	beq	28118 <__assert_fail@plt+0x16778>
   280f0:	ldr	r3, [r6, #20]
   280f4:	add	r8, r8, r8, lsl #1
   280f8:	add	r8, r3, r8, lsl #2
   280fc:	ldr	r3, [r8, #8]
   28100:	ldr	r7, [r3]
   28104:	mov	r1, r7
   28108:	add	r0, sp, #20
   2810c:	bl	1bbd0 <__assert_fail@plt+0xa230>
   28110:	cmp	r0, #0
   28114:	beq	2815c <__assert_fail@plt+0x167bc>
   28118:	add	r4, r4, #1
   2811c:	ldr	lr, [sp, #24]
   28120:	cmp	lr, r4
   28124:	ble	28180 <__assert_fail@plt+0x167e0>
   28128:	ldr	r2, [sp, #28]
   2812c:	ldr	ip, [r6]
   28130:	ldr	r8, [r2, r4, lsl #2]
   28134:	add	r7, ip, r8, lsl #3
   28138:	ldrb	r3, [r7, #4]
   2813c:	cmp	r3, #4
   28140:	bne	28118 <__assert_fail@plt+0x16778>
   28144:	cmp	lr, #0
   28148:	subgt	r2, r2, #4
   2814c:	movgt	r3, #0
   28150:	bgt	280c4 <__assert_fail@plt+0x16724>
   28154:	mov	r3, #0
   28158:	b	280e8 <__assert_fail@plt+0x16748>
   2815c:	add	r7, r7, r7, lsl #1
   28160:	ldr	r1, [r6, #24]
   28164:	add	r1, r1, r7, lsl #2
   28168:	add	r0, sp, #20
   2816c:	bl	1f664 <__assert_fail@plt+0xdcc4>
   28170:	cmp	r0, #0
   28174:	bne	2825c <__assert_fail@plt+0x168bc>
   28178:	mov	r4, #0
   2817c:	b	28118 <__assert_fail@plt+0x16778>
   28180:	mov	r3, #0
   28184:	add	r2, sp, #20
   28188:	mov	r1, r6
   2818c:	add	r0, sp, #16
   28190:	bl	1e7c4 <__assert_fail@plt+0xce24>
   28194:	str	r0, [r6, #36]	; 0x24
   28198:	cmp	r0, #0
   2819c:	ldreq	r5, [sp, #16]
   281a0:	beq	281c4 <__assert_fail@plt+0x16824>
   281a4:	ldrsb	r3, [r0, #52]	; 0x34
   281a8:	cmp	r3, #0
   281ac:	strge	r0, [r6, #48]	; 0x30
   281b0:	strge	r0, [r6, #44]	; 0x2c
   281b4:	strge	r0, [r6, #40]	; 0x28
   281b8:	blt	281f0 <__assert_fail@plt+0x16850>
   281bc:	ldr	r0, [sp, #28]
   281c0:	bl	1b854 <__assert_fail@plt+0x9eb4>
   281c4:	str	r5, [sp, #116]	; 0x74
   281c8:	mov	r0, sl
   281cc:	bl	1eaac <__assert_fail@plt+0xd10c>
   281d0:	add	r0, sp, #32
   281d4:	bl	1eaf8 <__assert_fail@plt+0xd158>
   281d8:	ldr	r3, [sp, #116]	; 0x74
   281dc:	cmp	r3, #0
   281e0:	bne	28264 <__assert_fail@plt+0x168c4>
   281e4:	ldr	r0, [sp, #116]	; 0x74
   281e8:	add	sp, sp, #124	; 0x7c
   281ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   281f0:	mov	r3, #1
   281f4:	add	r2, sp, #20
   281f8:	mov	r1, r6
   281fc:	add	r0, sp, #16
   28200:	bl	1e7c4 <__assert_fail@plt+0xce24>
   28204:	str	r0, [r6, #40]	; 0x28
   28208:	mov	r3, #2
   2820c:	add	r2, sp, #20
   28210:	mov	r1, r6
   28214:	add	r0, sp, #16
   28218:	bl	1e7c4 <__assert_fail@plt+0xce24>
   2821c:	str	r0, [r6, #44]	; 0x2c
   28220:	mov	r3, #6
   28224:	add	r2, sp, #20
   28228:	mov	r1, r6
   2822c:	add	r0, sp, #16
   28230:	bl	1e7c4 <__assert_fail@plt+0xce24>
   28234:	str	r0, [r6, #48]	; 0x30
   28238:	ldr	r3, [r6, #40]	; 0x28
   2823c:	cmp	r3, #0
   28240:	beq	28254 <__assert_fail@plt+0x168b4>
   28244:	ldr	r3, [r6, #44]	; 0x2c
   28248:	cmp	r0, #0
   2824c:	cmpne	r3, #0
   28250:	bne	281bc <__assert_fail@plt+0x1681c>
   28254:	ldr	r5, [sp, #16]
   28258:	b	281c4 <__assert_fail@plt+0x16824>
   2825c:	mov	r5, r0
   28260:	b	281c4 <__assert_fail@plt+0x16824>
   28264:	mov	r3, #1
   28268:	ldr	r2, [pc, #284]	; 2838c <__assert_fail@plt+0x169ec>
   2826c:	cmp	r2, #0
   28270:	moveq	r3, #0
   28274:	mov	r2, #1
   28278:	ldr	r1, [pc, #272]	; 28390 <__assert_fail@plt+0x169f0>
   2827c:	cmp	r1, #0
   28280:	moveq	r2, #0
   28284:	orr	r3, r3, r2
   28288:	tst	r3, #255	; 0xff
   2828c:	beq	28298 <__assert_fail@plt+0x168f8>
   28290:	add	r0, r6, #136	; 0x88
   28294:	bl	1155c <pthread_mutex_destroy@plt>
   28298:	mov	r0, r6
   2829c:	bl	1eb28 <__assert_fail@plt+0xd188>
   282a0:	mov	r3, #0
   282a4:	str	r3, [sl]
   282a8:	str	r3, [sl, #4]
   282ac:	b	281e4 <__assert_fail@plt+0x16844>
   282b0:	mov	r0, #12
   282b4:	b	281e8 <__assert_fail@plt+0x16848>
   282b8:	mov	r3, #12
   282bc:	str	r3, [sp, #116]	; 0x74
   282c0:	mov	r0, r6
   282c4:	bl	1eb28 <__assert_fail@plt+0xd188>
   282c8:	mov	r3, #0
   282cc:	str	r3, [sl]
   282d0:	str	r3, [sl, #4]
   282d4:	ldr	r0, [sp, #116]	; 0x74
   282d8:	b	281e8 <__assert_fail@plt+0x16848>
   282dc:	mov	r3, #0
   282e0:	str	r3, [r6, #52]	; 0x34
   282e4:	b	28320 <__assert_fail@plt+0x16980>
   282e8:	mov	r0, #12
   282ec:	b	28304 <__assert_fail@plt+0x16964>
   282f0:	mov	r0, #12
   282f4:	b	28304 <__assert_fail@plt+0x16964>
   282f8:	mov	r0, #12
   282fc:	b	28304 <__assert_fail@plt+0x16964>
   28300:	mov	r0, #12
   28304:	str	r0, [sp, #116]	; 0x74
   28308:	b	28320 <__assert_fail@plt+0x16980>
   2830c:	mov	r3, #0
   28310:	str	r3, [sp, #116]	; 0x74
   28314:	b	27ea0 <__assert_fail@plt+0x16500>
   28318:	mov	r0, #12
   2831c:	str	r0, [sp, #116]	; 0x74
   28320:	mov	r0, sl
   28324:	bl	1eaac <__assert_fail@plt+0xd10c>
   28328:	add	r0, sp, #32
   2832c:	bl	1eaf8 <__assert_fail@plt+0xd158>
   28330:	mov	r3, #1
   28334:	ldr	r2, [pc, #84]	; 28390 <__assert_fail@plt+0x169f0>
   28338:	cmp	r2, #0
   2833c:	moveq	r3, #0
   28340:	mov	r2, #1
   28344:	ldr	r1, [pc, #64]	; 2838c <__assert_fail@plt+0x169ec>
   28348:	cmp	r1, #0
   2834c:	moveq	r2, #0
   28350:	orr	r3, r3, r2
   28354:	tst	r3, #255	; 0xff
   28358:	beq	28364 <__assert_fail@plt+0x169c4>
   2835c:	add	r0, r6, #136	; 0x88
   28360:	bl	1155c <pthread_mutex_destroy@plt>
   28364:	mov	r0, r6
   28368:	bl	1eb28 <__assert_fail@plt+0xd188>
   2836c:	mov	r3, #0
   28370:	str	r3, [sl]
   28374:	str	r3, [sl, #4]
   28378:	ldr	r0, [sp, #116]	; 0x74
   2837c:	b	281e8 <__assert_fail@plt+0x16848>
   28380:	beq	fead2e2c <optarg@@GLIBC_2.4+0xfea95c0c>
   28384:	ldrdeq	ip, [r2], -r4
   28388:	muleq	r2, r4, sl
	...
   28394:			; <UNDEFINED> instruction: 0x0001bcbc
   28398:			; <UNDEFINED> instruction: 0x0001cab0
   2839c:	andeq	lr, r1, r4, lsr #12
   283a0:	andeq	fp, r1, r8, asr sp
   283a4:	andeq	lr, r1, r4, lsr #31
   283a8:	push	{r4, lr}
   283ac:	mov	ip, r2
   283b0:	ldr	r3, [pc, #96]	; 28418 <__assert_fail@plt+0x16a78>
   283b4:	ldr	r3, [r3]
   283b8:	lsr	lr, r3, #21
   283bc:	ldrb	r2, [r2, #28]
   283c0:	and	lr, lr, #16
   283c4:	and	r2, r2, #239	; 0xef
   283c8:	orr	r2, r2, lr
   283cc:	orr	r2, r2, #128	; 0x80
   283d0:	strb	r2, [ip, #28]
   283d4:	mov	r2, r1
   283d8:	mov	r1, r0
   283dc:	mov	r0, ip
   283e0:	bl	27730 <__assert_fail@plt+0x15d90>
   283e4:	cmp	r0, #0
   283e8:	beq	28410 <__assert_fail@plt+0x16a70>
   283ec:	ldr	r3, [pc, #40]	; 2841c <__assert_fail@plt+0x16a7c>
   283f0:	add	r1, r3, #32
   283f4:	add	r3, r3, r0, lsl #2
   283f8:	ldr	r3, [r3, #416]	; 0x1a0
   283fc:	mov	r2, #5
   28400:	add	r1, r1, r3
   28404:	mov	r0, #0
   28408:	bl	11628 <dcgettext@plt>
   2840c:	pop	{r4, pc}
   28410:	mov	r0, #0
   28414:	pop	{r4, pc}
   28418:	ldrdeq	sp, [r3], -r8
   2841c:	muleq	r2, r4, sl
   28420:	ldr	r3, [pc, #12]	; 28434 <__assert_fail@plt+0x16a94>
   28424:	ldr	r2, [r3]
   28428:	str	r0, [r3]
   2842c:	mov	r0, r2
   28430:	bx	lr
   28434:	ldrdeq	sp, [r3], -r8
   28438:	push	{r4, r5, r6, lr}
   2843c:	mov	r4, r0
   28440:	ldr	r5, [r0]
   28444:	ldr	r6, [r0, #16]
   28448:	mov	r2, #256	; 0x100
   2844c:	mov	r1, #0
   28450:	mov	r0, r6
   28454:	bl	11814 <memset@plt>
   28458:	mov	r2, r6
   2845c:	ldr	r1, [r5, #36]	; 0x24
   28460:	mov	r0, r4
   28464:	bl	21914 <__assert_fail@plt+0xff74>
   28468:	ldr	r1, [r5, #40]	; 0x28
   2846c:	ldr	r3, [r5, #36]	; 0x24
   28470:	cmp	r3, r1
   28474:	beq	28484 <__assert_fail@plt+0x16ae4>
   28478:	mov	r2, r6
   2847c:	mov	r0, r4
   28480:	bl	21914 <__assert_fail@plt+0xff74>
   28484:	ldr	r1, [r5, #44]	; 0x2c
   28488:	ldr	r3, [r5, #36]	; 0x24
   2848c:	cmp	r3, r1
   28490:	beq	284a0 <__assert_fail@plt+0x16b00>
   28494:	mov	r2, r6
   28498:	mov	r0, r4
   2849c:	bl	21914 <__assert_fail@plt+0xff74>
   284a0:	ldr	r1, [r5, #48]	; 0x30
   284a4:	ldr	r3, [r5, #36]	; 0x24
   284a8:	cmp	r3, r1
   284ac:	beq	284bc <__assert_fail@plt+0x16b1c>
   284b0:	mov	r2, r6
   284b4:	mov	r0, r4
   284b8:	bl	21914 <__assert_fail@plt+0xff74>
   284bc:	ldrb	r3, [r4, #28]
   284c0:	orr	r3, r3, #8
   284c4:	strb	r3, [r4, #28]
   284c8:	mov	r0, #0
   284cc:	pop	{r4, r5, r6, pc}
   284d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284d4:	sub	sp, sp, #44	; 0x2c
   284d8:	ldr	ip, [sp, #80]	; 0x50
   284dc:	ldr	r4, [sp, #88]	; 0x58
   284e0:	ldr	fp, [r0]
   284e4:	add	r7, r3, ip
   284e8:	cmp	r3, r2
   284ec:	movle	lr, #0
   284f0:	movgt	lr, #1
   284f4:	orrs	lr, lr, r3, lsr #31
   284f8:	bne	28858 <__assert_fail@plt+0x16eb8>
   284fc:	cmp	r7, r2
   28500:	bgt	28650 <__assert_fail@plt+0x16cb0>
   28504:	cmp	ip, #0
   28508:	cmpge	r3, r7
   2850c:	bgt	28658 <__assert_fail@plt+0x16cb8>
   28510:	cmp	r7, #0
   28514:	blt	28660 <__assert_fail@plt+0x16cc0>
   28518:	cmp	r3, r7
   2851c:	movgt	lr, #0
   28520:	movle	lr, #1
   28524:	and	ip, lr, ip, lsr #31
   28528:	cmp	ip, #0
   2852c:	movne	r7, #0
   28530:	mov	r8, #1
   28534:	ldr	ip, [pc, #812]	; 28868 <__assert_fail@plt+0x16ec8>
   28538:	cmp	ip, #0
   2853c:	moveq	r8, #0
   28540:	mov	ip, #1
   28544:	ldr	lr, [pc, #800]	; 2886c <__assert_fail@plt+0x16ecc>
   28548:	cmp	lr, #0
   2854c:	moveq	ip, #0
   28550:	str	r3, [sp, #24]
   28554:	str	r2, [sp, #32]
   28558:	str	r1, [sp, #28]
   2855c:	mov	r6, r0
   28560:	orr	r8, r8, ip
   28564:	ands	r8, r8, #255	; 0xff
   28568:	beq	28574 <__assert_fail@plt+0x16bd4>
   2856c:	add	r0, fp, #136	; 0x88
   28570:	bl	115a4 <pthread_mutex_lock@plt>
   28574:	ldrb	r3, [r6, #28]
   28578:	lsl	r2, r3, #26
   2857c:	and	sl, r3, #64	; 0x40
   28580:	cmp	sl, #0
   28584:	movne	sl, #2
   28588:	moveq	sl, #0
   2858c:	orr	sl, sl, r2, lsr #31
   28590:	ldr	r2, [sp, #24]
   28594:	cmp	r7, r2
   28598:	ble	285b0 <__assert_fail@plt+0x16c10>
   2859c:	ldr	r2, [r6, #16]
   285a0:	cmp	r2, #0
   285a4:	beq	285b0 <__assert_fail@plt+0x16c10>
   285a8:	tst	r3, #8
   285ac:	beq	28668 <__assert_fail@plt+0x16cc8>
   285b0:	ldrb	r3, [r6, #28]
   285b4:	tst	r3, #16
   285b8:	bne	2869c <__assert_fail@plt+0x16cfc>
   285bc:	cmp	r4, #0
   285c0:	beq	286a8 <__assert_fail@plt+0x16d08>
   285c4:	and	r3, r3, #6
   285c8:	cmp	r3, #4
   285cc:	beq	28674 <__assert_fail@plt+0x16cd4>
   285d0:	ldr	r5, [r6, #24]
   285d4:	add	r5, r5, #1
   285d8:	str	r5, [sp, #36]	; 0x24
   285dc:	lsl	r0, r5, #3
   285e0:	bl	1b954 <__assert_fail@plt+0x9fb4>
   285e4:	subs	r9, r0, #0
   285e8:	beq	28850 <__assert_fail@plt+0x16eb0>
   285ec:	str	sl, [sp, #16]
   285f0:	str	r9, [sp, #12]
   285f4:	str	r5, [sp, #8]
   285f8:	ldr	r3, [sp, #84]	; 0x54
   285fc:	str	r3, [sp, #4]
   28600:	str	r7, [sp]
   28604:	ldr	r3, [sp, #24]
   28608:	ldr	r2, [sp, #32]
   2860c:	ldr	r1, [sp, #28]
   28610:	mov	r0, r6
   28614:	bl	246dc <__assert_fail@plt+0x12d3c>
   28618:	cmp	r0, #0
   2861c:	beq	286b0 <__assert_fail@plt+0x16d10>
   28620:	cmp	r0, #1
   28624:	mvneq	r4, #0
   28628:	mvnne	r4, #1
   2862c:	mov	r0, r9
   28630:	bl	1b854 <__assert_fail@plt+0x9eb4>
   28634:	cmp	r8, #0
   28638:	beq	28644 <__assert_fail@plt+0x16ca4>
   2863c:	add	r0, fp, #136	; 0x88
   28640:	bl	114f0 <pthread_mutex_unlock@plt>
   28644:	mov	r0, r4
   28648:	add	sp, sp, #44	; 0x2c
   2864c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28650:	mov	r7, r2
   28654:	b	28530 <__assert_fail@plt+0x16b90>
   28658:	mov	r7, r2
   2865c:	b	28530 <__assert_fail@plt+0x16b90>
   28660:	mov	r7, #0
   28664:	b	28530 <__assert_fail@plt+0x16b90>
   28668:	mov	r0, r6
   2866c:	bl	28438 <__assert_fail@plt+0x16a98>
   28670:	b	285b0 <__assert_fail@plt+0x16c10>
   28674:	ldr	r3, [r4]
   28678:	ldr	r2, [r6, #24]
   2867c:	cmp	r3, r2
   28680:	bhi	285d0 <__assert_fail@plt+0x16c30>
   28684:	cmp	r3, #0
   28688:	movgt	r5, r3
   2868c:	movle	r5, #1
   28690:	cmp	r3, #0
   28694:	movle	r4, #0
   28698:	b	285d8 <__assert_fail@plt+0x16c38>
   2869c:	mov	r5, #1
   286a0:	mov	r4, #0
   286a4:	b	285d8 <__assert_fail@plt+0x16c38>
   286a8:	mov	r5, #1
   286ac:	b	285d8 <__assert_fail@plt+0x16c38>
   286b0:	cmp	r4, #0
   286b4:	beq	2876c <__assert_fail@plt+0x16dcc>
   286b8:	ldrb	sl, [r6, #28]
   286bc:	lsr	sl, sl, #1
   286c0:	add	r7, r5, #1
   286c4:	ands	sl, sl, #3
   286c8:	beq	28780 <__assert_fail@plt+0x16de0>
   286cc:	cmp	sl, #1
   286d0:	movne	sl, #2
   286d4:	beq	287c4 <__assert_fail@plt+0x16e24>
   286d8:	cmp	r5, #0
   286dc:	ble	28828 <__assert_fail@plt+0x16e88>
   286e0:	mov	r2, r9
   286e4:	ldr	r3, [sp, #36]	; 0x24
   286e8:	lsl	ip, r3, #2
   286ec:	mov	r3, #0
   286f0:	ldr	r0, [r9, r3, lsl #1]
   286f4:	ldr	r1, [r4, #4]
   286f8:	str	r0, [r1, r3]
   286fc:	ldr	r0, [r2, #4]
   28700:	ldr	r1, [r4, #8]
   28704:	str	r0, [r1, r3]
   28708:	add	r3, r3, #4
   2870c:	add	r2, r2, #8
   28710:	cmp	ip, r3
   28714:	bne	286f0 <__assert_fail@plt+0x16d50>
   28718:	ldr	r3, [r4]
   2871c:	cmp	r3, r5
   28720:	bls	28750 <__assert_fail@plt+0x16db0>
   28724:	lsl	r3, r5, #2
   28728:	mvn	r2, #0
   2872c:	ldr	r1, [r4, #4]
   28730:	ldr	r0, [r4, #8]
   28734:	str	r2, [r0, r3]
   28738:	str	r2, [r1, r3]
   2873c:	add	r5, r5, #1
   28740:	add	r3, r3, #4
   28744:	ldr	r1, [r4]
   28748:	cmp	r5, r1
   2874c:	bcc	2872c <__assert_fail@plt+0x16d8c>
   28750:	ldrb	r3, [r6, #28]
   28754:	and	sl, sl, #3
   28758:	bic	r3, r3, #6
   2875c:	orr	sl, r3, sl, lsl #1
   28760:	strb	sl, [r6, #28]
   28764:	tst	sl, #6
   28768:	beq	28860 <__assert_fail@plt+0x16ec0>
   2876c:	ldrb	r3, [sp, #92]	; 0x5c
   28770:	cmp	r3, #0
   28774:	bne	28840 <__assert_fail@plt+0x16ea0>
   28778:	ldr	r4, [r9]
   2877c:	b	2862c <__assert_fail@plt+0x16c8c>
   28780:	lsl	sl, r7, #2
   28784:	mov	r0, sl
   28788:	bl	1b954 <__assert_fail@plt+0x9fb4>
   2878c:	str	r0, [r4, #4]
   28790:	cmp	r0, #0
   28794:	beq	28830 <__assert_fail@plt+0x16e90>
   28798:	mov	r0, sl
   2879c:	bl	1b954 <__assert_fail@plt+0x9fb4>
   287a0:	str	r0, [r4, #8]
   287a4:	cmp	r0, #0
   287a8:	strne	r7, [r4]
   287ac:	movne	sl, #1
   287b0:	bne	286d8 <__assert_fail@plt+0x16d38>
   287b4:	ldr	r0, [r4, #4]
   287b8:	bl	1b854 <__assert_fail@plt+0x9eb4>
   287bc:	mov	sl, #0
   287c0:	b	28750 <__assert_fail@plt+0x16db0>
   287c4:	ldr	r3, [r4]
   287c8:	cmp	r3, r7
   287cc:	bcs	286d8 <__assert_fail@plt+0x16d38>
   287d0:	lsl	r3, r7, #2
   287d4:	str	r3, [sp, #32]
   287d8:	mov	r1, r3
   287dc:	ldr	r0, [r4, #4]
   287e0:	bl	1b9dc <__assert_fail@plt+0xa03c>
   287e4:	subs	r2, r0, #0
   287e8:	str	r2, [sp, #28]
   287ec:	beq	28838 <__assert_fail@plt+0x16e98>
   287f0:	ldr	r1, [sp, #32]
   287f4:	ldr	r0, [r4, #8]
   287f8:	bl	1b9dc <__assert_fail@plt+0xa03c>
   287fc:	cmp	r0, #0
   28800:	beq	28818 <__assert_fail@plt+0x16e78>
   28804:	ldr	r3, [sp, #28]
   28808:	str	r3, [r4, #4]
   2880c:	str	r0, [r4, #8]
   28810:	str	r7, [r4]
   28814:	b	286d8 <__assert_fail@plt+0x16d38>
   28818:	ldr	r0, [sp, #28]
   2881c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   28820:	mov	sl, #0
   28824:	b	28750 <__assert_fail@plt+0x16db0>
   28828:	mov	r5, #0
   2882c:	b	28718 <__assert_fail@plt+0x16d78>
   28830:	mov	sl, #0
   28834:	b	28750 <__assert_fail@plt+0x16db0>
   28838:	mov	sl, #0
   2883c:	b	28750 <__assert_fail@plt+0x16db0>
   28840:	ldr	r4, [r9, #4]
   28844:	ldr	r3, [sp, #24]
   28848:	sub	r4, r4, r3
   2884c:	b	2862c <__assert_fail@plt+0x16c8c>
   28850:	mvn	r4, #1
   28854:	b	28634 <__assert_fail@plt+0x16c94>
   28858:	mvn	r4, #0
   2885c:	b	28644 <__assert_fail@plt+0x16ca4>
   28860:	mvn	r4, #1
   28864:	b	2862c <__assert_fail@plt+0x16c8c>
	...
   28870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28874:	sub	sp, sp, #20
   28878:	mov	r5, r2
   2887c:	mov	r7, r3
   28880:	ldr	r4, [sp, #56]	; 0x38
   28884:	ldr	r6, [sp, #72]	; 0x48
   28888:	lsr	r3, r4, #31
   2888c:	orr	r3, r3, r2, lsr #31
   28890:	orrs	r2, r3, r6, lsr #31
   28894:	bne	2899c <__assert_fail@plt+0x16ffc>
   28898:	mov	r8, r0
   2889c:	mov	r9, r1
   288a0:	cmp	r4, #0
   288a4:	blt	2891c <__assert_fail@plt+0x16f7c>
   288a8:	cmp	r3, #0
   288ac:	bne	28930 <__assert_fail@plt+0x16f90>
   288b0:	mvn	r3, #-2147483648	; 0x80000000
   288b4:	sub	r3, r3, r4
   288b8:	cmp	r5, r3
   288bc:	movle	r3, #0
   288c0:	movgt	r3, #1
   288c4:	cmp	r3, #0
   288c8:	mvnne	r4, #1
   288cc:	bne	28990 <__assert_fail@plt+0x16ff0>
   288d0:	add	fp, r5, r4
   288d4:	cmp	r4, #0
   288d8:	ble	28944 <__assert_fail@plt+0x16fa4>
   288dc:	cmp	r5, #0
   288e0:	ble	28950 <__assert_fail@plt+0x16fb0>
   288e4:	mov	r0, fp
   288e8:	bl	1b954 <__assert_fail@plt+0x9fb4>
   288ec:	subs	sl, r0, #0
   288f0:	beq	289a4 <__assert_fail@plt+0x17004>
   288f4:	mov	r2, r5
   288f8:	mov	r1, r9
   288fc:	mov	r0, sl
   28900:	bl	115d4 <memcpy@plt>
   28904:	mov	r2, r4
   28908:	mov	r1, r7
   2890c:	add	r0, sl, r5
   28910:	bl	115d4 <memcpy@plt>
   28914:	mov	r7, sl
   28918:	b	28954 <__assert_fail@plt+0x16fb4>
   2891c:	rsb	r3, r4, #-2147483648	; 0x80000000
   28920:	cmp	r5, r3
   28924:	movge	r3, #0
   28928:	movlt	r3, #1
   2892c:	b	288c4 <__assert_fail@plt+0x16f24>
   28930:	rsb	r3, r5, #-2147483648	; 0x80000000
   28934:	cmp	r4, r3
   28938:	movge	r3, #0
   2893c:	movlt	r3, #1
   28940:	b	288c4 <__assert_fail@plt+0x16f24>
   28944:	mov	r7, r9
   28948:	mov	sl, #0
   2894c:	b	28954 <__assert_fail@plt+0x16fb4>
   28950:	mov	sl, #0
   28954:	ldrb	r3, [sp, #76]	; 0x4c
   28958:	str	r3, [sp, #12]
   2895c:	ldr	r3, [sp, #68]	; 0x44
   28960:	str	r3, [sp, #8]
   28964:	str	r6, [sp, #4]
   28968:	ldr	r3, [sp, #64]	; 0x40
   2896c:	str	r3, [sp]
   28970:	ldr	r3, [sp, #60]	; 0x3c
   28974:	mov	r2, fp
   28978:	mov	r1, r7
   2897c:	mov	r0, r8
   28980:	bl	284d0 <__assert_fail@plt+0x16b30>
   28984:	mov	r4, r0
   28988:	mov	r0, sl
   2898c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   28990:	mov	r0, r4
   28994:	add	sp, sp, #20
   28998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2899c:	mvn	r4, #1
   289a0:	b	28990 <__assert_fail@plt+0x16ff0>
   289a4:	mvn	r4, #1
   289a8:	b	28990 <__assert_fail@plt+0x16ff0>
   289ac:	push	{r4, r5, r6, r7, r8, lr}
   289b0:	mov	r4, r0
   289b4:	mov	r7, r1
   289b8:	mov	r5, r2
   289bc:	and	r2, r2, #1
   289c0:	ldr	r3, [pc, #228]	; 28aac <__assert_fail@plt+0x1710c>
   289c4:	ldr	r6, [pc, #228]	; 28ab0 <__assert_fail@plt+0x17110>
   289c8:	cmp	r2, #0
   289cc:	moveq	r6, r3
   289d0:	mov	r3, #0
   289d4:	str	r3, [r0]
   289d8:	str	r3, [r0, #4]
   289dc:	str	r3, [r0, #8]
   289e0:	mov	r0, #256	; 0x100
   289e4:	bl	1b954 <__assert_fail@plt+0x9fb4>
   289e8:	str	r0, [r4, #16]
   289ec:	cmp	r0, #0
   289f0:	beq	28aa4 <__assert_fail@plt+0x17104>
   289f4:	and	r3, r5, #2
   289f8:	cmp	r3, #0
   289fc:	movne	r3, #4194304	; 0x400000
   28a00:	moveq	r3, #0
   28a04:	orr	r6, r6, r3
   28a08:	tst	r5, #4
   28a0c:	bicne	r6, r6, #64	; 0x40
   28a10:	orrne	r6, r6, #256	; 0x100
   28a14:	ldrbne	r3, [r4, #28]
   28a18:	orrne	r3, r3, #128	; 0x80
   28a1c:	ldrbeq	r3, [r4, #28]
   28a20:	biceq	r3, r3, #128	; 0x80
   28a24:	strb	r3, [r4, #28]
   28a28:	lsl	r5, r5, #1
   28a2c:	ldrb	r3, [r4, #28]
   28a30:	bic	r3, r3, #16
   28a34:	and	r5, r5, #16
   28a38:	orr	r5, r5, r3
   28a3c:	strb	r5, [r4, #28]
   28a40:	mov	r3, #0
   28a44:	str	r3, [r4, #20]
   28a48:	mov	r0, r7
   28a4c:	bl	117a8 <strlen@plt>
   28a50:	mov	r3, r6
   28a54:	mov	r2, r0
   28a58:	mov	r1, r7
   28a5c:	mov	r0, r4
   28a60:	bl	27730 <__assert_fail@plt+0x15d90>
   28a64:	mov	r5, r0
   28a68:	cmp	r0, #16
   28a6c:	beq	28a88 <__assert_fail@plt+0x170e8>
   28a70:	cmp	r0, #0
   28a74:	bne	28a8c <__assert_fail@plt+0x170ec>
   28a78:	mov	r0, r4
   28a7c:	bl	28438 <__assert_fail@plt+0x16a98>
   28a80:	mov	r0, #0
   28a84:	pop	{r4, r5, r6, r7, r8, pc}
   28a88:	mov	r5, #8
   28a8c:	ldr	r0, [r4, #16]
   28a90:	bl	1b854 <__assert_fail@plt+0x9eb4>
   28a94:	mov	r3, #0
   28a98:	str	r3, [r4, #16]
   28a9c:	mov	r0, r5
   28aa0:	pop	{r4, r5, r6, r7, r8, pc}
   28aa4:	mov	r0, #12
   28aa8:	pop	{r4, r5, r6, r7, r8, pc}
   28aac:	smlabteq	r1, r6, r2, r0
   28ab0:	strdeq	fp, [r3], -ip
   28ab4:	push	{r4, r5, r6, r7, r8, lr}
   28ab8:	cmp	r0, #16
   28abc:	bhi	28b24 <__assert_fail@plt+0x17184>
   28ac0:	mov	r6, r2
   28ac4:	mov	r4, r3
   28ac8:	ldr	r3, [pc, #88]	; 28b28 <__assert_fail@plt+0x17188>
   28acc:	add	r1, r3, #32
   28ad0:	add	r3, r3, r0, lsl #2
   28ad4:	ldr	r3, [r3, #416]	; 0x1a0
   28ad8:	mov	r2, #5
   28adc:	add	r1, r1, r3
   28ae0:	mov	r0, #0
   28ae4:	bl	11628 <dcgettext@plt>
   28ae8:	mov	r7, r0
   28aec:	bl	117a8 <strlen@plt>
   28af0:	add	r5, r0, #1
   28af4:	cmp	r4, #0
   28af8:	beq	28b1c <__assert_fail@plt+0x1717c>
   28afc:	cmp	r5, r4
   28b00:	subhi	r2, r4, #1
   28b04:	movhi	r3, #0
   28b08:	strbhi	r3, [r6, r2]
   28b0c:	movls	r2, r5
   28b10:	mov	r1, r7
   28b14:	mov	r0, r6
   28b18:	bl	115d4 <memcpy@plt>
   28b1c:	mov	r0, r5
   28b20:	pop	{r4, r5, r6, r7, r8, pc}
   28b24:	bl	11964 <abort@plt>
   28b28:	muleq	r2, r4, sl
   28b2c:	push	{r4, r5, r6, lr}
   28b30:	mov	r4, r0
   28b34:	ldr	r5, [r0]
   28b38:	cmp	r5, #0
   28b3c:	beq	28b7c <__assert_fail@plt+0x171dc>
   28b40:	mov	r3, #1
   28b44:	ldr	r2, [pc, #88]	; 28ba4 <__assert_fail@plt+0x17204>
   28b48:	cmp	r2, #0
   28b4c:	moveq	r3, #0
   28b50:	mov	r2, #1
   28b54:	ldr	r1, [pc, #76]	; 28ba8 <__assert_fail@plt+0x17208>
   28b58:	cmp	r1, #0
   28b5c:	moveq	r2, #0
   28b60:	orr	r3, r3, r2
   28b64:	tst	r3, #255	; 0xff
   28b68:	beq	28b74 <__assert_fail@plt+0x171d4>
   28b6c:	add	r0, r5, #136	; 0x88
   28b70:	bl	1155c <pthread_mutex_destroy@plt>
   28b74:	mov	r0, r5
   28b78:	bl	1eb28 <__assert_fail@plt+0xd188>
   28b7c:	mov	r5, #0
   28b80:	str	r5, [r4]
   28b84:	str	r5, [r4, #4]
   28b88:	ldr	r0, [r4, #16]
   28b8c:	bl	1b854 <__assert_fail@plt+0x9eb4>
   28b90:	str	r5, [r4, #16]
   28b94:	ldr	r0, [r4, #20]
   28b98:	bl	1b854 <__assert_fail@plt+0x9eb4>
   28b9c:	str	r5, [r4, #20]
   28ba0:	pop	{r4, r5, r6, pc}
	...
   28bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28bb0:	sub	sp, sp, #36	; 0x24
   28bb4:	ldr	r4, [sp, #72]	; 0x48
   28bb8:	bics	ip, r4, #7
   28bbc:	movne	r0, #2
   28bc0:	beq	28bcc <__assert_fail@plt+0x1722c>
   28bc4:	add	sp, sp, #36	; 0x24
   28bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28bcc:	mov	r7, r3
   28bd0:	mov	r8, r2
   28bd4:	str	r1, [sp, #28]
   28bd8:	mov	r5, r0
   28bdc:	ands	fp, r4, #4
   28be0:	beq	28c80 <__assert_fail@plt+0x172e0>
   28be4:	ldr	fp, [r3]
   28be8:	ldr	r9, [r3, #4]
   28bec:	ldr	sl, [r5]
   28bf0:	mov	r6, #1
   28bf4:	ldr	r3, [pc, #148]	; 28c90 <__assert_fail@plt+0x172f0>
   28bf8:	cmp	r3, #0
   28bfc:	moveq	r6, #0
   28c00:	mov	r3, #1
   28c04:	ldr	r2, [pc, #136]	; 28c94 <__assert_fail@plt+0x172f4>
   28c08:	cmp	r2, #0
   28c0c:	moveq	r3, #0
   28c10:	orr	r6, r6, r3
   28c14:	ands	r6, r6, #255	; 0xff
   28c18:	beq	28c24 <__assert_fail@plt+0x17284>
   28c1c:	add	r0, sl, #136	; 0x88
   28c20:	bl	115a4 <pthread_mutex_lock@plt>
   28c24:	ldrb	r3, [r5, #28]
   28c28:	tst	r3, #16
   28c2c:	str	r4, [sp, #16]
   28c30:	movne	r3, #0
   28c34:	strne	r3, [sp, #12]
   28c38:	strne	r3, [sp, #8]
   28c3c:	streq	r7, [sp, #12]
   28c40:	streq	r8, [sp, #8]
   28c44:	str	r9, [sp, #4]
   28c48:	str	r9, [sp]
   28c4c:	mov	r3, fp
   28c50:	mov	r2, r9
   28c54:	ldr	r1, [sp, #28]
   28c58:	mov	r0, r5
   28c5c:	bl	246dc <__assert_fail@plt+0x12d3c>
   28c60:	mov	r4, r0
   28c64:	cmp	r6, #0
   28c68:	beq	28c74 <__assert_fail@plt+0x172d4>
   28c6c:	add	r0, sl, #136	; 0x88
   28c70:	bl	114f0 <pthread_mutex_unlock@plt>
   28c74:	adds	r0, r4, #0
   28c78:	movne	r0, #1
   28c7c:	b	28bc4 <__assert_fail@plt+0x17224>
   28c80:	ldr	r0, [sp, #28]
   28c84:	bl	117a8 <strlen@plt>
   28c88:	mov	r9, r0
   28c8c:	b	28bec <__assert_fail@plt+0x1724c>
	...
   28c98:	push	{lr}		; (str lr, [sp, #-4]!)
   28c9c:	sub	sp, sp, #20
   28ca0:	mov	ip, #1
   28ca4:	str	ip, [sp, #12]
   28ca8:	ldr	ip, [sp, #24]
   28cac:	str	ip, [sp, #8]
   28cb0:	str	r2, [sp, #4]
   28cb4:	mov	ip, #0
   28cb8:	str	ip, [sp]
   28cbc:	bl	284d0 <__assert_fail@plt+0x16b30>
   28cc0:	add	sp, sp, #20
   28cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   28cc8:	push	{lr}		; (str lr, [sp, #-4]!)
   28ccc:	sub	sp, sp, #20
   28cd0:	mov	ip, #0
   28cd4:	str	ip, [sp, #12]
   28cd8:	ldr	ip, [sp, #28]
   28cdc:	str	ip, [sp, #8]
   28ce0:	str	r2, [sp, #4]
   28ce4:	ldr	ip, [sp, #24]
   28ce8:	str	ip, [sp]
   28cec:	bl	284d0 <__assert_fail@plt+0x16b30>
   28cf0:	add	sp, sp, #20
   28cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   28cf8:	push	{lr}		; (str lr, [sp, #-4]!)
   28cfc:	sub	sp, sp, #28
   28d00:	mov	ip, #1
   28d04:	str	ip, [sp, #20]
   28d08:	ldr	ip, [sp, #44]	; 0x2c
   28d0c:	str	ip, [sp, #16]
   28d10:	ldr	ip, [sp, #40]	; 0x28
   28d14:	str	ip, [sp, #12]
   28d18:	mov	ip, #0
   28d1c:	str	ip, [sp, #8]
   28d20:	ldr	ip, [sp, #36]	; 0x24
   28d24:	str	ip, [sp, #4]
   28d28:	ldr	ip, [sp, #32]
   28d2c:	str	ip, [sp]
   28d30:	bl	28870 <__assert_fail@plt+0x16ed0>
   28d34:	add	sp, sp, #28
   28d38:	pop	{pc}		; (ldr pc, [sp], #4)
   28d3c:	push	{lr}		; (str lr, [sp, #-4]!)
   28d40:	sub	sp, sp, #28
   28d44:	mov	ip, #0
   28d48:	str	ip, [sp, #20]
   28d4c:	ldr	ip, [sp, #48]	; 0x30
   28d50:	str	ip, [sp, #16]
   28d54:	ldr	ip, [sp, #44]	; 0x2c
   28d58:	str	ip, [sp, #12]
   28d5c:	ldr	ip, [sp, #40]	; 0x28
   28d60:	str	ip, [sp, #8]
   28d64:	ldr	ip, [sp, #36]	; 0x24
   28d68:	str	ip, [sp, #4]
   28d6c:	ldr	ip, [sp, #32]
   28d70:	str	ip, [sp]
   28d74:	bl	28870 <__assert_fail@plt+0x16ed0>
   28d78:	add	sp, sp, #28
   28d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   28d80:	cmp	r2, #0
   28d84:	bne	28da8 <__assert_fail@plt+0x17408>
   28d88:	ldrb	r3, [r0, #28]
   28d8c:	bic	r3, r3, #6
   28d90:	strb	r3, [r0, #28]
   28d94:	mov	r3, #0
   28d98:	str	r3, [r1]
   28d9c:	str	r3, [r1, #8]
   28da0:	str	r3, [r1, #4]
   28da4:	bx	lr
   28da8:	ldrb	ip, [r0, #28]
   28dac:	bic	ip, ip, #4
   28db0:	orr	ip, ip, #2
   28db4:	strb	ip, [r0, #28]
   28db8:	str	r2, [r1]
   28dbc:	str	r3, [r1, #4]
   28dc0:	ldr	r3, [sp]
   28dc4:	str	r3, [r1, #8]
   28dc8:	bx	lr
   28dcc:	cmp	r1, #2
   28dd0:	bls	28e00 <__assert_fail@plt+0x17460>
   28dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28dd8:	sub	sp, sp, #20
   28ddc:	str	r2, [sp, #12]
   28de0:	str	r1, [sp]
   28de4:	mov	r6, r0
   28de8:	mov	fp, #1
   28dec:	mov	r8, fp
   28df0:	mov	sl, #0
   28df4:	mvn	r3, #0
   28df8:	str	r3, [sp, #4]
   28dfc:	b	28e28 <__assert_fail@plt+0x17488>
   28e00:	mov	r3, #1
   28e04:	str	r3, [r2]
   28e08:	sub	r0, r1, #1
   28e0c:	bx	lr
   28e10:	cmp	r5, r4
   28e14:	beq	28ea4 <__assert_fail@plt+0x17504>
   28e18:	str	sl, [sp, #4]
   28e1c:	add	sl, sl, #1
   28e20:	mov	fp, #1
   28e24:	mov	r8, fp
   28e28:	add	r7, sl, r8
   28e2c:	ldr	r3, [sp]
   28e30:	cmp	r3, r7
   28e34:	bls	28eb8 <__assert_fail@plt+0x17518>
   28e38:	bl	11778 <__ctype_b_loc@plt>
   28e3c:	ldr	r9, [r0]
   28e40:	ldrb	r5, [r6, r7]
   28e44:	lsl	r3, r5, #1
   28e48:	ldrh	r3, [r9, r3]
   28e4c:	tst	r3, #256	; 0x100
   28e50:	beq	28e60 <__assert_fail@plt+0x174c0>
   28e54:	bl	11748 <__ctype_tolower_loc@plt>
   28e58:	ldr	r3, [r0]
   28e5c:	ldrb	r5, [r3, r5, lsl #2]
   28e60:	ldr	r3, [sp, #4]
   28e64:	add	r3, r6, r3
   28e68:	ldrb	r4, [r3, r8]
   28e6c:	lsl	r3, r4, #1
   28e70:	ldrh	r3, [r9, r3]
   28e74:	tst	r3, #256	; 0x100
   28e78:	beq	28e88 <__assert_fail@plt+0x174e8>
   28e7c:	bl	11748 <__ctype_tolower_loc@plt>
   28e80:	ldr	r3, [r0]
   28e84:	ldrb	r4, [r3, r4, lsl #2]
   28e88:	cmp	r5, r4
   28e8c:	bcs	28e10 <__assert_fail@plt+0x17470>
   28e90:	ldr	r3, [sp, #4]
   28e94:	sub	fp, r7, r3
   28e98:	mov	sl, r7
   28e9c:	mov	r8, #1
   28ea0:	b	28e28 <__assert_fail@plt+0x17488>
   28ea4:	cmp	r8, fp
   28ea8:	addne	r8, r8, #1
   28eac:	addeq	sl, sl, fp
   28eb0:	moveq	r8, #1
   28eb4:	b	28e28 <__assert_fail@plt+0x17488>
   28eb8:	ldr	r3, [sp, #12]
   28ebc:	str	fp, [r3]
   28ec0:	mov	r3, #1
   28ec4:	str	r3, [sp, #8]
   28ec8:	mov	r8, r3
   28ecc:	mov	sl, #0
   28ed0:	mvn	fp, #0
   28ed4:	b	28ef4 <__assert_fail@plt+0x17554>
   28ed8:	cmp	r5, r4
   28edc:	beq	28f6c <__assert_fail@plt+0x175cc>
   28ee0:	mov	fp, sl
   28ee4:	add	sl, sl, #1
   28ee8:	mov	r3, #1
   28eec:	str	r3, [sp, #8]
   28ef0:	mov	r8, r3
   28ef4:	add	r7, sl, r8
   28ef8:	ldr	r3, [sp]
   28efc:	cmp	r3, r7
   28f00:	bls	28f88 <__assert_fail@plt+0x175e8>
   28f04:	bl	11778 <__ctype_b_loc@plt>
   28f08:	ldr	r9, [r0]
   28f0c:	ldrb	r5, [r6, r7]
   28f10:	lsl	r3, r5, #1
   28f14:	ldrh	r3, [r9, r3]
   28f18:	tst	r3, #256	; 0x100
   28f1c:	beq	28f2c <__assert_fail@plt+0x1758c>
   28f20:	bl	11748 <__ctype_tolower_loc@plt>
   28f24:	ldr	r3, [r0]
   28f28:	ldrb	r5, [r3, r5, lsl #2]
   28f2c:	add	r3, r6, fp
   28f30:	ldrb	r4, [r3, r8]
   28f34:	lsl	r3, r4, #1
   28f38:	ldrh	r3, [r9, r3]
   28f3c:	tst	r3, #256	; 0x100
   28f40:	beq	28f50 <__assert_fail@plt+0x175b0>
   28f44:	bl	11748 <__ctype_tolower_loc@plt>
   28f48:	ldr	r3, [r0]
   28f4c:	ldrb	r4, [r3, r4, lsl #2]
   28f50:	cmp	r5, r4
   28f54:	bls	28ed8 <__assert_fail@plt+0x17538>
   28f58:	sub	r3, r7, fp
   28f5c:	str	r3, [sp, #8]
   28f60:	mov	sl, r7
   28f64:	mov	r8, #1
   28f68:	b	28ef4 <__assert_fail@plt+0x17554>
   28f6c:	ldr	r3, [sp, #8]
   28f70:	cmp	r8, r3
   28f74:	addne	r8, r8, #1
   28f78:	ldreq	r3, [sp, #8]
   28f7c:	addeq	sl, sl, r3
   28f80:	moveq	r8, #1
   28f84:	b	28ef4 <__assert_fail@plt+0x17554>
   28f88:	add	fp, fp, #1
   28f8c:	ldr	r3, [sp, #4]
   28f90:	add	r0, r3, #1
   28f94:	cmp	fp, r0
   28f98:	ldrcs	r3, [sp, #12]
   28f9c:	ldrcs	r2, [sp, #8]
   28fa0:	strcs	r2, [r3]
   28fa4:	movcs	r0, fp
   28fa8:	add	sp, sp, #20
   28fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28fb4:	sub	sp, sp, #1072	; 0x430
   28fb8:	sub	sp, sp, #12
   28fbc:	str	r0, [sp]
   28fc0:	mov	r4, r1
   28fc4:	mov	r0, r2
   28fc8:	str	r2, [sp, #24]
   28fcc:	mov	r5, r3
   28fd0:	str	r3, [sp, #12]
   28fd4:	add	r2, sp, #1072	; 0x430
   28fd8:	add	r2, r2, #4
   28fdc:	mov	r1, r3
   28fe0:	bl	28dcc <__assert_fail@plt+0x1742c>
   28fe4:	str	r0, [sp, #20]
   28fe8:	add	r3, sp, #48	; 0x30
   28fec:	add	r2, sp, #1072	; 0x430
   28ff0:	mov	r1, r5
   28ff4:	str	r1, [r3, #4]!
   28ff8:	cmp	r3, r2
   28ffc:	bne	28ff4 <__assert_fail@plt+0x17654>
   29000:	ldr	r5, [sp, #12]
   29004:	cmp	r5, #0
   29008:	beq	29064 <__assert_fail@plt+0x176c4>
   2900c:	bl	11778 <__ctype_b_loc@plt>
   29010:	ldr	r8, [r0]
   29014:	ldr	r3, [sp, #24]
   29018:	sub	r7, r3, #1
   2901c:	sub	r6, r5, #1
   29020:	b	29040 <__assert_fail@plt+0x176a0>
   29024:	add	r3, sp, #1072	; 0x430
   29028:	add	r3, r3, #8
   2902c:	add	r5, r3, r5, lsl #2
   29030:	str	r6, [r5, #-1028]	; 0xfffffbfc
   29034:	sub	r6, r6, #1
   29038:	cmn	r6, #1
   2903c:	beq	29064 <__assert_fail@plt+0x176c4>
   29040:	ldrb	r5, [r7, #1]!
   29044:	lsl	r3, r5, #1
   29048:	ldrh	r3, [r8, r3]
   2904c:	tst	r3, #256	; 0x100
   29050:	beq	29024 <__assert_fail@plt+0x17684>
   29054:	bl	11748 <__ctype_tolower_loc@plt>
   29058:	ldr	r3, [r0]
   2905c:	ldr	r5, [r3, r5, lsl #2]
   29060:	b	29024 <__assert_fail@plt+0x17684>
   29064:	ldr	r3, [sp, #1076]	; 0x434
   29068:	str	r3, [sp, #28]
   2906c:	ldr	r2, [sp, #20]
   29070:	ldr	r0, [sp, #24]
   29074:	add	r1, r0, r3
   29078:	bl	117f0 <strncasecmp@plt>
   2907c:	cmp	r0, #0
   29080:	beq	29328 <__assert_fail@plt+0x17988>
   29084:	ldr	r1, [sp, #12]
   29088:	ldr	r2, [sp, #20]
   2908c:	sub	r3, r1, r2
   29090:	cmp	r3, r2
   29094:	movcc	r3, r2
   29098:	add	r3, r3, #1
   2909c:	str	r3, [sp, #8]
   290a0:	str	r3, [sp, #1076]	; 0x434
   290a4:	mov	r3, #0
   290a8:	str	r3, [sp, #4]
   290ac:	sub	r8, r1, #1
   290b0:	rsb	r3, r2, #1
   290b4:	str	r3, [sp, #16]
   290b8:	mov	r0, r4
   290bc:	b	29378 <__assert_fail@plt+0x179d8>
   290c0:	ldr	r3, [sp, #16]
   290c4:	ldr	r2, [sp, #20]
   290c8:	cmp	r3, r2
   290cc:	movcs	r7, r3
   290d0:	movcc	r7, r2
   290d4:	cmp	r7, fp
   290d8:	bcs	29230 <__assert_fail@plt+0x17890>
   290dc:	ldr	r3, [sp, #24]
   290e0:	add	r9, r3, r7
   290e4:	ldr	r3, [sp, #4]
   290e8:	add	r8, r3, r7
   290ec:	ldr	r3, [sp]
   290f0:	add	r8, r3, r8
   290f4:	b	2910c <__assert_fail@plt+0x1776c>
   290f8:	cmp	r6, r5
   290fc:	bne	29150 <__assert_fail@plt+0x177b0>
   29100:	add	r7, r7, #1
   29104:	cmp	r7, fp
   29108:	bcs	29230 <__assert_fail@plt+0x17890>
   2910c:	ldrb	r6, [r9], #1
   29110:	lsl	r3, r6, #1
   29114:	ldrh	r3, [r4, r3]
   29118:	tst	r3, #256	; 0x100
   2911c:	beq	2912c <__assert_fail@plt+0x1778c>
   29120:	bl	11748 <__ctype_tolower_loc@plt>
   29124:	ldr	r3, [r0]
   29128:	ldr	r6, [r3, r6, lsl #2]
   2912c:	ldrb	r5, [r8], #1
   29130:	lsl	r3, r5, #1
   29134:	ldrh	r3, [r4, r3]
   29138:	tst	r3, #256	; 0x100
   2913c:	beq	290f8 <__assert_fail@plt+0x17758>
   29140:	bl	11748 <__ctype_tolower_loc@plt>
   29144:	ldr	r3, [r0]
   29148:	ldr	r5, [r3, r5, lsl #2]
   2914c:	b	290f8 <__assert_fail@plt+0x17758>
   29150:	cmp	fp, r7
   29154:	bls	29230 <__assert_fail@plt+0x17890>
   29158:	ldr	r3, [sp, #44]	; 0x2c
   2915c:	ldr	r2, [sp, #4]
   29160:	add	r3, r3, r2
   29164:	add	r3, r3, r7
   29168:	str	r3, [sp, #4]
   2916c:	str	sl, [sp, #16]
   29170:	ldr	r0, [sp, #8]
   29174:	ldr	r3, [sp, #4]
   29178:	ldr	r2, [sp, #12]
   2917c:	add	r3, r3, r2
   29180:	mov	r4, r3
   29184:	str	r3, [sp, #8]
   29188:	sub	r2, r3, r0
   2918c:	mov	r1, #0
   29190:	ldr	r3, [sp]
   29194:	add	r0, r3, r0
   29198:	bl	1185c <memchr@plt>
   2919c:	adds	r3, r4, #0
   291a0:	movne	r3, #1
   291a4:	cmp	r0, #0
   291a8:	movne	r3, #0
   291ac:	mov	r0, r3
   291b0:	cmp	r3, #0
   291b4:	beq	2931c <__assert_fail@plt+0x1797c>
   291b8:	bl	11778 <__ctype_b_loc@plt>
   291bc:	ldr	r4, [r0]
   291c0:	ldr	r3, [sp]
   291c4:	ldr	r2, [sp, #8]
   291c8:	add	r3, r3, r2
   291cc:	ldrb	r5, [r3, #-1]
   291d0:	lsl	r3, r5, #1
   291d4:	ldrh	r3, [r4, r3]
   291d8:	tst	r3, #256	; 0x100
   291dc:	beq	291ec <__assert_fail@plt+0x1784c>
   291e0:	bl	11748 <__ctype_tolower_loc@plt>
   291e4:	ldr	r3, [r0]
   291e8:	ldr	r5, [r3, r5, lsl #2]
   291ec:	add	r3, sp, #1072	; 0x430
   291f0:	add	r3, r3, #8
   291f4:	add	r5, r3, r5, lsl #2
   291f8:	ldr	sl, [r5, #-1028]	; 0xfffffbfc
   291fc:	cmp	sl, #0
   29200:	beq	290c0 <__assert_fail@plt+0x17720>
   29204:	ldr	r3, [sp, #28]
   29208:	ldr	r2, [sp, #16]
   2920c:	cmp	r2, #0
   29210:	cmpne	r3, sl
   29214:	ldrhi	sl, [sp, #36]	; 0x24
   29218:	ldr	r3, [sp, #4]
   2921c:	add	r3, r3, sl
   29220:	str	r3, [sp, #4]
   29224:	mov	r3, #0
   29228:	str	r3, [sp, #16]
   2922c:	b	29170 <__assert_fail@plt+0x177d0>
   29230:	ldr	r7, [sp, #40]	; 0x28
   29234:	ldr	r2, [sp, #16]
   29238:	ldr	r3, [sp, #20]
   2923c:	cmp	r2, r3
   29240:	bcs	292fc <__assert_fail@plt+0x1795c>
   29244:	ldr	r1, [sp, #24]
   29248:	add	r9, r1, r3
   2924c:	ldr	r1, [sp, #4]
   29250:	add	r8, r1, r3
   29254:	ldr	r3, [sp]
   29258:	add	r8, r3, r8
   2925c:	sub	r3, r2, #1
   29260:	str	fp, [sp, #32]
   29264:	mov	fp, r3
   29268:	b	29284 <__assert_fail@plt+0x178e4>
   2926c:	cmp	r6, r5
   29270:	bne	292cc <__assert_fail@plt+0x1792c>
   29274:	sub	r3, r7, #1
   29278:	cmp	fp, r3
   2927c:	beq	29304 <__assert_fail@plt+0x17964>
   29280:	mov	r7, r3
   29284:	add	sl, r7, #1
   29288:	ldrb	r6, [r9, #-1]!
   2928c:	lsl	r3, r6, #1
   29290:	ldrh	r3, [r4, r3]
   29294:	tst	r3, #256	; 0x100
   29298:	beq	292a8 <__assert_fail@plt+0x17908>
   2929c:	bl	11748 <__ctype_tolower_loc@plt>
   292a0:	ldr	r3, [r0]
   292a4:	ldr	r6, [r3, r6, lsl #2]
   292a8:	ldrb	r5, [r8, #-1]!
   292ac:	lsl	r3, r5, #1
   292b0:	ldrh	r3, [r4, r3]
   292b4:	tst	r3, #256	; 0x100
   292b8:	beq	2926c <__assert_fail@plt+0x178cc>
   292bc:	bl	11748 <__ctype_tolower_loc@plt>
   292c0:	ldr	r3, [r0]
   292c4:	ldr	r5, [r3, r5, lsl #2]
   292c8:	b	2926c <__assert_fail@plt+0x178cc>
   292cc:	ldr	fp, [sp, #32]
   292d0:	ldr	r3, [sp, #16]
   292d4:	add	r3, r3, #1
   292d8:	cmp	r3, sl
   292dc:	bhi	29310 <__assert_fail@plt+0x17970>
   292e0:	ldr	r3, [sp, #4]
   292e4:	ldr	r2, [sp, #28]
   292e8:	add	r3, r3, r2
   292ec:	str	r3, [sp, #4]
   292f0:	ldr	r3, [sp, #36]	; 0x24
   292f4:	str	r3, [sp, #16]
   292f8:	b	29170 <__assert_fail@plt+0x177d0>
   292fc:	ldr	sl, [sp, #20]
   29300:	b	292d0 <__assert_fail@plt+0x17930>
   29304:	ldr	fp, [sp, #32]
   29308:	mov	sl, r7
   2930c:	b	292d0 <__assert_fail@plt+0x17930>
   29310:	ldr	r3, [sp]
   29314:	ldr	r2, [sp, #4]
   29318:	add	r0, r3, r2
   2931c:	add	sp, sp, #1072	; 0x430
   29320:	add	sp, sp, #12
   29324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29328:	mov	r3, #0
   2932c:	str	r3, [sp, #16]
   29330:	str	r3, [sp, #4]
   29334:	ldr	r3, [sp, #12]
   29338:	sub	sl, r3, #1
   2933c:	ldr	r2, [sp, #20]
   29340:	sub	r1, r2, #1
   29344:	str	r1, [sp, #40]	; 0x28
   29348:	ldr	r1, [sp, #28]
   2934c:	sub	r3, r3, r1
   29350:	str	r3, [sp, #36]	; 0x24
   29354:	rsb	r3, r2, #1
   29358:	str	r3, [sp, #44]	; 0x2c
   2935c:	mov	r0, r4
   29360:	mov	fp, sl
   29364:	b	29174 <__assert_fail@plt+0x177d4>
   29368:	ldr	r2, [sp, #4]
   2936c:	add	r3, r2, r3
   29370:	str	r3, [sp, #4]
   29374:	mov	r0, r9
   29378:	ldr	r3, [sp, #4]
   2937c:	ldr	r2, [sp, #12]
   29380:	add	r9, r3, r2
   29384:	sub	r2, r9, r0
   29388:	mov	r1, #0
   2938c:	ldr	r3, [sp]
   29390:	add	r0, r3, r0
   29394:	bl	1185c <memchr@plt>
   29398:	adds	r3, r9, #0
   2939c:	movne	r3, #1
   293a0:	cmp	r0, #0
   293a4:	movne	r3, #0
   293a8:	mov	r0, r3
   293ac:	cmp	r3, #0
   293b0:	beq	2931c <__assert_fail@plt+0x1797c>
   293b4:	bl	11778 <__ctype_b_loc@plt>
   293b8:	ldr	r6, [r0]
   293bc:	ldr	r3, [sp]
   293c0:	add	r3, r3, r9
   293c4:	ldrb	r4, [r3, #-1]
   293c8:	lsl	r3, r4, #1
   293cc:	ldrh	r3, [r6, r3]
   293d0:	tst	r3, #256	; 0x100
   293d4:	beq	293e4 <__assert_fail@plt+0x17a44>
   293d8:	bl	11748 <__ctype_tolower_loc@plt>
   293dc:	ldr	r3, [r0]
   293e0:	ldr	r4, [r3, r4, lsl #2]
   293e4:	add	r3, sp, #1072	; 0x430
   293e8:	add	r3, r3, #8
   293ec:	add	r4, r3, r4, lsl #2
   293f0:	ldr	r3, [r4, #-1028]	; 0xfffffbfc
   293f4:	cmp	r3, #0
   293f8:	bne	29368 <__assert_fail@plt+0x179c8>
   293fc:	ldr	r3, [sp, #20]
   29400:	cmp	r3, r8
   29404:	bcs	294a0 <__assert_fail@plt+0x17b00>
   29408:	ldr	r2, [sp, #24]
   2940c:	add	fp, r2, r3
   29410:	ldr	r2, [sp, #4]
   29414:	add	sl, r2, r3
   29418:	ldr	r2, [sp]
   2941c:	add	sl, r2, sl
   29420:	mov	r7, r3
   29424:	b	2943c <__assert_fail@plt+0x17a9c>
   29428:	cmp	r5, r4
   2942c:	bne	29480 <__assert_fail@plt+0x17ae0>
   29430:	add	r7, r7, #1
   29434:	cmp	r7, r8
   29438:	bcs	294a0 <__assert_fail@plt+0x17b00>
   2943c:	ldrb	r5, [fp], #1
   29440:	lsl	r3, r5, #1
   29444:	ldrh	r3, [r6, r3]
   29448:	tst	r3, #256	; 0x100
   2944c:	beq	2945c <__assert_fail@plt+0x17abc>
   29450:	bl	11748 <__ctype_tolower_loc@plt>
   29454:	ldr	r3, [r0]
   29458:	ldr	r5, [r3, r5, lsl #2]
   2945c:	ldrb	r4, [sl], #1
   29460:	lsl	r3, r4, #1
   29464:	ldrh	r3, [r6, r3]
   29468:	tst	r3, #256	; 0x100
   2946c:	beq	29428 <__assert_fail@plt+0x17a88>
   29470:	bl	11748 <__ctype_tolower_loc@plt>
   29474:	ldr	r3, [r0]
   29478:	ldr	r4, [r3, r4, lsl #2]
   2947c:	b	29428 <__assert_fail@plt+0x17a88>
   29480:	cmp	r8, r7
   29484:	bls	294a0 <__assert_fail@plt+0x17b00>
   29488:	ldr	r3, [sp, #16]
   2948c:	ldr	r2, [sp, #4]
   29490:	add	r3, r3, r2
   29494:	add	r3, r7, r3
   29498:	str	r3, [sp, #4]
   2949c:	b	29374 <__assert_fail@plt+0x179d4>
   294a0:	ldr	r3, [sp, #20]
   294a4:	sub	r7, r3, #1
   294a8:	cmn	r7, #1
   294ac:	beq	29540 <__assert_fail@plt+0x17ba0>
   294b0:	ldr	r2, [sp, #24]
   294b4:	add	fp, r2, r3
   294b8:	ldr	r2, [sp, #4]
   294bc:	add	sl, r2, r3
   294c0:	ldr	r3, [sp]
   294c4:	add	sl, r3, sl
   294c8:	b	294e0 <__assert_fail@plt+0x17b40>
   294cc:	cmp	r5, r4
   294d0:	bne	29524 <__assert_fail@plt+0x17b84>
   294d4:	sub	r7, r7, #1
   294d8:	cmn	r7, #1
   294dc:	beq	29540 <__assert_fail@plt+0x17ba0>
   294e0:	ldrb	r5, [fp, #-1]!
   294e4:	lsl	r3, r5, #1
   294e8:	ldrh	r3, [r6, r3]
   294ec:	tst	r3, #256	; 0x100
   294f0:	beq	29500 <__assert_fail@plt+0x17b60>
   294f4:	bl	11748 <__ctype_tolower_loc@plt>
   294f8:	ldr	r3, [r0]
   294fc:	ldr	r5, [r3, r5, lsl #2]
   29500:	ldrb	r4, [sl, #-1]!
   29504:	lsl	r3, r4, #1
   29508:	ldrh	r3, [r6, r3]
   2950c:	tst	r3, #256	; 0x100
   29510:	beq	294cc <__assert_fail@plt+0x17b2c>
   29514:	bl	11748 <__ctype_tolower_loc@plt>
   29518:	ldr	r3, [r0]
   2951c:	ldr	r4, [r3, r4, lsl #2]
   29520:	b	294cc <__assert_fail@plt+0x17b2c>
   29524:	cmn	r7, #1
   29528:	beq	29540 <__assert_fail@plt+0x17ba0>
   2952c:	ldr	r3, [sp, #4]
   29530:	ldr	r2, [sp, #8]
   29534:	add	r3, r3, r2
   29538:	str	r3, [sp, #4]
   2953c:	b	29374 <__assert_fail@plt+0x179d4>
   29540:	ldr	r3, [sp]
   29544:	ldr	r2, [sp, #4]
   29548:	add	r0, r3, r2
   2954c:	b	2931c <__assert_fail@plt+0x1797c>
   29550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29554:	sub	sp, sp, #60	; 0x3c
   29558:	mov	sl, r0
   2955c:	mov	r6, r1
   29560:	str	r1, [sp, #12]
   29564:	ldrb	r4, [r0]
   29568:	cmp	r4, #0
   2956c:	beq	295f8 <__assert_fail@plt+0x17c58>
   29570:	ldrb	r5, [r1]
   29574:	cmp	r5, #0
   29578:	beq	2964c <__assert_fail@plt+0x17cac>
   2957c:	bl	11778 <__ctype_b_loc@plt>
   29580:	ldr	r9, [r0]
   29584:	add	r6, r6, #1
   29588:	mov	r8, sl
   2958c:	mov	r7, #1
   29590:	b	295bc <__assert_fail@plt+0x17c1c>
   29594:	cmp	r4, r5
   29598:	movne	r7, #0
   2959c:	andeq	r7, r7, #1
   295a0:	mov	r3, r6
   295a4:	ldrb	r4, [r8, #1]!
   295a8:	cmp	r4, #0
   295ac:	beq	29600 <__assert_fail@plt+0x17c60>
   295b0:	ldrb	r5, [r6], #1
   295b4:	cmp	r5, #0
   295b8:	beq	29610 <__assert_fail@plt+0x17c70>
   295bc:	lsl	r3, r4, #1
   295c0:	ldrh	r3, [r9, r3]
   295c4:	tst	r3, #256	; 0x100
   295c8:	beq	295d8 <__assert_fail@plt+0x17c38>
   295cc:	bl	11748 <__ctype_tolower_loc@plt>
   295d0:	ldr	r3, [r0]
   295d4:	ldr	r4, [r3, r4, lsl #2]
   295d8:	lsl	r3, r5, #1
   295dc:	ldrh	r3, [r9, r3]
   295e0:	tst	r3, #256	; 0x100
   295e4:	beq	29594 <__assert_fail@plt+0x17bf4>
   295e8:	bl	11748 <__ctype_tolower_loc@plt>
   295ec:	ldr	r3, [r0]
   295f0:	ldr	r5, [r3, r5, lsl #2]
   295f4:	b	29594 <__assert_fail@plt+0x17bf4>
   295f8:	ldr	r3, [sp, #12]
   295fc:	mov	r7, #1
   29600:	ldrb	r2, [r3]
   29604:	cmp	r2, #0
   29608:	movne	r0, #0
   2960c:	bne	2964c <__assert_fail@plt+0x17cac>
   29610:	cmp	r7, #0
   29614:	movne	r0, sl
   29618:	bne	2964c <__assert_fail@plt+0x17cac>
   2961c:	ldr	r2, [sp, #12]
   29620:	sub	fp, r3, r2
   29624:	add	r3, sl, #1
   29628:	str	r3, [sp, #4]
   2962c:	sub	r4, fp, #1
   29630:	cmp	fp, #31
   29634:	bls	29654 <__assert_fail@plt+0x17cb4>
   29638:	mov	r3, fp
   2963c:	ldr	r2, [sp, #12]
   29640:	mov	r1, r4
   29644:	ldr	r0, [sp, #4]
   29648:	bl	28fb0 <__assert_fail@plt+0x17610>
   2964c:	add	sp, sp, #60	; 0x3c
   29650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29654:	add	r2, sp, #52	; 0x34
   29658:	mov	r1, fp
   2965c:	ldr	r5, [sp, #12]
   29660:	mov	r0, r5
   29664:	bl	28dcc <__assert_fail@plt+0x1742c>
   29668:	mov	r2, r0
   2966c:	str	r0, [sp, #16]
   29670:	ldr	r3, [sp, #52]	; 0x34
   29674:	mov	r1, r3
   29678:	str	r3, [sp, #32]
   2967c:	add	r1, r5, r1
   29680:	mov	r0, r5
   29684:	bl	117f0 <strncasecmp@plt>
   29688:	cmp	r0, #0
   2968c:	beq	298b8 <__assert_fail@plt+0x17f18>
   29690:	ldr	r2, [sp, #16]
   29694:	sub	r3, fp, r2
   29698:	cmp	r3, r2
   2969c:	movcc	r3, r2
   296a0:	add	r3, r3, #1
   296a4:	str	r3, [sp, #24]
   296a8:	str	r3, [sp, #52]	; 0x34
   296ac:	mov	r8, #0
   296b0:	rsb	r3, r2, #1
   296b4:	str	r3, [sp, #20]
   296b8:	mov	r0, r4
   296bc:	b	2995c <__assert_fail@plt+0x17fbc>
   296c0:	cmp	r5, r4
   296c4:	bne	29718 <__assert_fail@plt+0x17d78>
   296c8:	add	r6, r6, #1
   296cc:	cmp	fp, r6
   296d0:	beq	297c0 <__assert_fail@plt+0x17e20>
   296d4:	ldrb	r5, [r8], #1
   296d8:	lsl	r3, r5, #1
   296dc:	ldrh	r3, [r9, r3]
   296e0:	tst	r3, #256	; 0x100
   296e4:	beq	296f4 <__assert_fail@plt+0x17d54>
   296e8:	bl	11748 <__ctype_tolower_loc@plt>
   296ec:	ldr	r3, [r0]
   296f0:	ldr	r5, [r3, r5, lsl #2]
   296f4:	ldrb	r4, [r7], #1
   296f8:	lsl	r3, r4, #1
   296fc:	ldrh	r3, [r9, r3]
   29700:	tst	r3, #256	; 0x100
   29704:	beq	296c0 <__assert_fail@plt+0x17d20>
   29708:	bl	11748 <__ctype_tolower_loc@plt>
   2970c:	ldr	r3, [r0]
   29710:	ldr	r4, [r3, r4, lsl #2]
   29714:	b	296c0 <__assert_fail@plt+0x17d20>
   29718:	cmp	fp, r6
   2971c:	bls	297c0 <__assert_fail@plt+0x17e20>
   29720:	ldr	r3, [sp, #40]	; 0x28
   29724:	ldr	r2, [sp, #8]
   29728:	add	r3, r3, r2
   2972c:	add	r3, r3, r6
   29730:	str	r3, [sp, #8]
   29734:	mov	r3, #0
   29738:	str	r3, [sp, #20]
   2973c:	ldr	r0, [sp, #24]
   29740:	ldr	r3, [sp, #8]
   29744:	add	r3, fp, r3
   29748:	mov	r4, r3
   2974c:	str	r3, [sp, #24]
   29750:	sub	r2, r3, r0
   29754:	mov	r1, #0
   29758:	ldr	r3, [sp, #4]
   2975c:	add	r0, r3, r0
   29760:	bl	1185c <memchr@plt>
   29764:	adds	r3, r4, #0
   29768:	movne	r3, #1
   2976c:	cmp	r0, #0
   29770:	movne	r3, #0
   29774:	mov	r0, r3
   29778:	cmp	r3, #0
   2977c:	beq	2964c <__assert_fail@plt+0x17cac>
   29780:	ldr	r3, [sp, #16]
   29784:	ldr	r2, [sp, #20]
   29788:	cmp	r3, r2
   2978c:	movcs	r6, r3
   29790:	movcc	r6, r2
   29794:	cmp	fp, r6
   29798:	bls	297c0 <__assert_fail@plt+0x17e20>
   2979c:	bl	11778 <__ctype_b_loc@plt>
   297a0:	ldr	r9, [r0]
   297a4:	ldr	r3, [sp, #12]
   297a8:	add	r8, r3, r6
   297ac:	ldr	r3, [sp, #8]
   297b0:	add	r7, r6, r3
   297b4:	ldr	r3, [sp, #4]
   297b8:	add	r7, r3, r7
   297bc:	b	296d4 <__assert_fail@plt+0x17d34>
   297c0:	ldr	r6, [sp, #36]	; 0x24
   297c4:	ldr	r4, [sp, #16]
   297c8:	ldr	r5, [sp, #20]
   297cc:	cmp	r4, r5
   297d0:	bls	29894 <__assert_fail@plt+0x17ef4>
   297d4:	bl	11778 <__ctype_b_loc@plt>
   297d8:	ldr	r9, [r0]
   297dc:	ldr	r2, [sp, #12]
   297e0:	add	r8, r2, r4
   297e4:	ldr	r2, [sp, #8]
   297e8:	add	r7, r4, r2
   297ec:	ldr	r3, [sp, #4]
   297f0:	add	r7, r3, r7
   297f4:	sub	r3, r5, #1
   297f8:	str	fp, [sp, #28]
   297fc:	mov	fp, r3
   29800:	b	2981c <__assert_fail@plt+0x17e7c>
   29804:	cmp	r5, r4
   29808:	bne	29864 <__assert_fail@plt+0x17ec4>
   2980c:	sub	r3, r6, #1
   29810:	cmp	r3, fp
   29814:	beq	2989c <__assert_fail@plt+0x17efc>
   29818:	mov	r6, r3
   2981c:	add	sl, r6, #1
   29820:	ldrb	r5, [r8, #-1]!
   29824:	lsl	r3, r5, #1
   29828:	ldrh	r3, [r9, r3]
   2982c:	tst	r3, #256	; 0x100
   29830:	beq	29840 <__assert_fail@plt+0x17ea0>
   29834:	bl	11748 <__ctype_tolower_loc@plt>
   29838:	ldr	r3, [r0]
   2983c:	ldr	r5, [r3, r5, lsl #2]
   29840:	ldrb	r4, [r7, #-1]!
   29844:	lsl	r3, r4, #1
   29848:	ldrh	r3, [r9, r3]
   2984c:	tst	r3, #256	; 0x100
   29850:	beq	29804 <__assert_fail@plt+0x17e64>
   29854:	bl	11748 <__ctype_tolower_loc@plt>
   29858:	ldr	r3, [r0]
   2985c:	ldr	r4, [r3, r4, lsl #2]
   29860:	b	29804 <__assert_fail@plt+0x17e64>
   29864:	ldr	fp, [sp, #28]
   29868:	ldr	r3, [sp, #20]
   2986c:	add	r3, r3, #1
   29870:	cmp	r3, sl
   29874:	bhi	298a8 <__assert_fail@plt+0x17f08>
   29878:	ldr	r3, [sp, #8]
   2987c:	ldr	r2, [sp, #32]
   29880:	add	r3, r3, r2
   29884:	str	r3, [sp, #8]
   29888:	ldr	r3, [sp, #44]	; 0x2c
   2988c:	str	r3, [sp, #20]
   29890:	b	2973c <__assert_fail@plt+0x17d9c>
   29894:	ldr	sl, [sp, #16]
   29898:	b	29868 <__assert_fail@plt+0x17ec8>
   2989c:	ldr	fp, [sp, #28]
   298a0:	mov	sl, r6
   298a4:	b	29868 <__assert_fail@plt+0x17ec8>
   298a8:	ldr	r3, [sp, #4]
   298ac:	ldr	r2, [sp, #8]
   298b0:	add	r0, r3, r2
   298b4:	b	2964c <__assert_fail@plt+0x17cac>
   298b8:	mov	r3, #0
   298bc:	str	r3, [sp, #20]
   298c0:	str	r3, [sp, #8]
   298c4:	ldr	r3, [sp, #16]
   298c8:	sub	r2, r3, #1
   298cc:	str	r2, [sp, #36]	; 0x24
   298d0:	ldr	r2, [sp, #32]
   298d4:	sub	r2, fp, r2
   298d8:	str	r2, [sp, #44]	; 0x2c
   298dc:	rsb	r3, r3, #1
   298e0:	str	r3, [sp, #40]	; 0x28
   298e4:	mov	r0, r4
   298e8:	b	29740 <__assert_fail@plt+0x17da0>
   298ec:	cmp	r5, r4
   298f0:	bne	29944 <__assert_fail@plt+0x17fa4>
   298f4:	add	r6, r6, #1
   298f8:	cmp	fp, r6
   298fc:	beq	299c0 <__assert_fail@plt+0x18020>
   29900:	ldrb	r5, [r9], #1
   29904:	lsl	r3, r5, #1
   29908:	ldrh	r3, [sl, r3]
   2990c:	tst	r3, #256	; 0x100
   29910:	beq	29920 <__assert_fail@plt+0x17f80>
   29914:	bl	11748 <__ctype_tolower_loc@plt>
   29918:	ldr	r3, [r0]
   2991c:	ldr	r5, [r3, r5, lsl #2]
   29920:	ldrb	r4, [r7], #1
   29924:	lsl	r3, r4, #1
   29928:	ldrh	r3, [sl, r3]
   2992c:	tst	r3, #256	; 0x100
   29930:	beq	298ec <__assert_fail@plt+0x17f4c>
   29934:	bl	11748 <__ctype_tolower_loc@plt>
   29938:	ldr	r3, [r0]
   2993c:	ldr	r4, [r3, r4, lsl #2]
   29940:	b	298ec <__assert_fail@plt+0x17f4c>
   29944:	cmp	fp, r6
   29948:	bls	299c0 <__assert_fail@plt+0x18020>
   2994c:	ldr	r3, [sp, #20]
   29950:	add	r8, r3, r8
   29954:	add	r8, r8, r6
   29958:	ldr	r0, [sp, #8]
   2995c:	add	r3, fp, r8
   29960:	mov	r4, r3
   29964:	str	r3, [sp, #8]
   29968:	sub	r2, r3, r0
   2996c:	mov	r1, #0
   29970:	ldr	r5, [sp, #4]
   29974:	add	r0, r5, r0
   29978:	bl	1185c <memchr@plt>
   2997c:	adds	r3, r4, #0
   29980:	movne	r3, #1
   29984:	cmp	r0, #0
   29988:	movne	r3, #0
   2998c:	cmp	r3, #0
   29990:	beq	29a64 <__assert_fail@plt+0x180c4>
   29994:	ldr	r4, [sp, #16]
   29998:	cmp	fp, r4
   2999c:	bls	299c0 <__assert_fail@plt+0x18020>
   299a0:	bl	11778 <__ctype_b_loc@plt>
   299a4:	ldr	sl, [r0]
   299a8:	ldr	r2, [sp, #12]
   299ac:	add	r9, r2, r4
   299b0:	add	r7, r4, r8
   299b4:	add	r7, r5, r7
   299b8:	mov	r6, r4
   299bc:	b	29900 <__assert_fail@plt+0x17f60>
   299c0:	ldr	r4, [sp, #16]
   299c4:	sub	r6, r4, #1
   299c8:	cmn	r6, #1
   299cc:	beq	29a58 <__assert_fail@plt+0x180b8>
   299d0:	bl	11778 <__ctype_b_loc@plt>
   299d4:	ldr	sl, [r0]
   299d8:	ldr	r2, [sp, #12]
   299dc:	add	r9, r2, r4
   299e0:	add	r7, r4, r8
   299e4:	ldr	r3, [sp, #4]
   299e8:	add	r7, r3, r7
   299ec:	b	29a04 <__assert_fail@plt+0x18064>
   299f0:	cmp	r5, r4
   299f4:	bne	29a48 <__assert_fail@plt+0x180a8>
   299f8:	sub	r6, r6, #1
   299fc:	cmn	r6, #1
   29a00:	beq	29a58 <__assert_fail@plt+0x180b8>
   29a04:	ldrb	r5, [r9, #-1]!
   29a08:	lsl	r3, r5, #1
   29a0c:	ldrh	r3, [sl, r3]
   29a10:	tst	r3, #256	; 0x100
   29a14:	beq	29a24 <__assert_fail@plt+0x18084>
   29a18:	bl	11748 <__ctype_tolower_loc@plt>
   29a1c:	ldr	r3, [r0]
   29a20:	ldr	r5, [r3, r5, lsl #2]
   29a24:	ldrb	r4, [r7, #-1]!
   29a28:	lsl	r3, r4, #1
   29a2c:	ldrh	r3, [sl, r3]
   29a30:	tst	r3, #256	; 0x100
   29a34:	beq	299f0 <__assert_fail@plt+0x18050>
   29a38:	bl	11748 <__ctype_tolower_loc@plt>
   29a3c:	ldr	r3, [r0]
   29a40:	ldr	r4, [r3, r4, lsl #2]
   29a44:	b	299f0 <__assert_fail@plt+0x18050>
   29a48:	cmn	r6, #1
   29a4c:	ldrne	r3, [sp, #24]
   29a50:	addne	r8, r8, r3
   29a54:	bne	29958 <__assert_fail@plt+0x17fb8>
   29a58:	ldr	r3, [sp, #4]
   29a5c:	add	r0, r3, r8
   29a60:	b	2964c <__assert_fail@plt+0x17cac>
   29a64:	mov	r0, #0
   29a68:	b	2964c <__assert_fail@plt+0x17cac>
   29a6c:	cmp	r1, #2
   29a70:	bls	29a90 <__assert_fail@plt+0x180f0>
   29a74:	push	{r4, r5, r6, r7, r8, r9, lr}
   29a78:	mov	r7, #1
   29a7c:	mov	ip, r7
   29a80:	mov	lr, #0
   29a84:	mvn	r4, #0
   29a88:	mov	r8, r7
   29a8c:	b	29ab8 <__assert_fail@plt+0x18118>
   29a90:	mov	r3, #1
   29a94:	str	r3, [r2]
   29a98:	sub	r0, r1, #1
   29a9c:	bx	lr
   29aa0:	cmp	r6, r5
   29aa4:	beq	29ae8 <__assert_fail@plt+0x18148>
   29aa8:	mov	r4, lr
   29aac:	add	lr, lr, #1
   29ab0:	mov	r7, r8
   29ab4:	mov	ip, r8
   29ab8:	add	r3, lr, ip
   29abc:	cmp	r1, r3
   29ac0:	bls	29afc <__assert_fail@plt+0x1815c>
   29ac4:	ldrb	r6, [r0, r3]
   29ac8:	add	r5, r0, r4
   29acc:	ldrb	r5, [r5, ip]
   29ad0:	cmp	r6, r5
   29ad4:	bcs	29aa0 <__assert_fail@plt+0x18100>
   29ad8:	sub	r7, r3, r4
   29adc:	mov	lr, r3
   29ae0:	mov	ip, #1
   29ae4:	b	29ab8 <__assert_fail@plt+0x18118>
   29ae8:	cmp	ip, r7
   29aec:	addne	ip, ip, #1
   29af0:	addeq	lr, lr, r7
   29af4:	moveq	ip, #1
   29af8:	b	29ab8 <__assert_fail@plt+0x18118>
   29afc:	str	r7, [r2]
   29b00:	mov	r8, #1
   29b04:	mov	ip, r8
   29b08:	mov	lr, #0
   29b0c:	mvn	r7, #0
   29b10:	mov	r9, r8
   29b14:	b	29b30 <__assert_fail@plt+0x18190>
   29b18:	cmp	r6, r5
   29b1c:	beq	29b60 <__assert_fail@plt+0x181c0>
   29b20:	mov	r7, lr
   29b24:	add	lr, lr, #1
   29b28:	mov	r8, r9
   29b2c:	mov	ip, r9
   29b30:	add	r3, lr, ip
   29b34:	cmp	r1, r3
   29b38:	bls	29b74 <__assert_fail@plt+0x181d4>
   29b3c:	ldrb	r6, [r0, r3]
   29b40:	add	r5, r0, r7
   29b44:	ldrb	r5, [r5, ip]
   29b48:	cmp	r6, r5
   29b4c:	bls	29b18 <__assert_fail@plt+0x18178>
   29b50:	sub	r8, r3, r7
   29b54:	mov	lr, r3
   29b58:	mov	ip, #1
   29b5c:	b	29b30 <__assert_fail@plt+0x18190>
   29b60:	cmp	ip, r8
   29b64:	addne	ip, ip, #1
   29b68:	addeq	lr, lr, r8
   29b6c:	moveq	ip, #1
   29b70:	b	29b30 <__assert_fail@plt+0x18190>
   29b74:	add	r7, r7, #1
   29b78:	add	r0, r4, #1
   29b7c:	cmp	r7, r0
   29b80:	strcs	r8, [r2]
   29b84:	movcs	r0, r7
   29b88:	pop	{r4, r5, r6, r7, r8, r9, pc}
   29b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b90:	sub	sp, sp, #1056	; 0x420
   29b94:	sub	sp, sp, #4
   29b98:	mov	r5, r0
   29b9c:	mov	r6, r1
   29ba0:	mov	r0, r2
   29ba4:	str	r2, [sp]
   29ba8:	mov	r4, r3
   29bac:	add	r2, sp, #1040	; 0x410
   29bb0:	add	r2, r2, #12
   29bb4:	mov	r1, r3
   29bb8:	bl	29a6c <__assert_fail@plt+0x180cc>
   29bbc:	mov	sl, r0
   29bc0:	add	r3, sp, #24
   29bc4:	add	r2, sp, #32
   29bc8:	add	r2, r2, #1016	; 0x3f8
   29bcc:	str	r4, [r3, #4]!
   29bd0:	cmp	r3, r2
   29bd4:	bne	29bcc <__assert_fail@plt+0x1822c>
   29bd8:	cmp	r4, #0
   29bdc:	beq	29c08 <__assert_fail@plt+0x18268>
   29be0:	ldr	r3, [sp]
   29be4:	sub	r1, r3, #1
   29be8:	sub	r3, r4, #1
   29bec:	ldrb	r2, [r1, #1]!
   29bf0:	add	r0, sp, #1056	; 0x420
   29bf4:	add	r2, r0, r2, lsl #2
   29bf8:	str	r3, [r2, #-1028]	; 0xfffffbfc
   29bfc:	sub	r3, r3, #1
   29c00:	cmn	r3, #1
   29c04:	bne	29bec <__assert_fail@plt+0x1824c>
   29c08:	ldr	r3, [sp, #1052]	; 0x41c
   29c0c:	str	r3, [sp, #4]
   29c10:	mov	r2, sl
   29c14:	ldr	r0, [sp]
   29c18:	add	r1, r0, r3
   29c1c:	bl	1161c <memcmp@plt>
   29c20:	cmp	r0, #0
   29c24:	beq	29d84 <__assert_fail@plt+0x183e4>
   29c28:	sub	r3, r4, sl
   29c2c:	cmp	r3, sl
   29c30:	movcc	r3, sl
   29c34:	add	r3, r3, #1
   29c38:	str	r3, [sp, #4]
   29c3c:	mov	r9, #0
   29c40:	sub	r7, r4, #1
   29c44:	sub	fp, sl, #1
   29c48:	ldr	r3, [sp]
   29c4c:	add	r2, r3, fp
   29c50:	str	r2, [sp, #8]
   29c54:	add	r3, r3, sl
   29c58:	rsb	r2, sl, #1
   29c5c:	str	r2, [sp, #12]
   29c60:	mov	r0, r6
   29c64:	mov	r6, r3
   29c68:	b	29dc8 <__assert_fail@plt+0x18428>
   29c6c:	cmp	fp, sl
   29c70:	movcs	r3, fp
   29c74:	movcc	r3, sl
   29c78:	cmp	r3, r7
   29c7c:	bcs	29e6c <__assert_fail@plt+0x184cc>
   29c80:	ldr	lr, [sp]
   29c84:	add	r1, lr, r3
   29c88:	add	r0, r9, r3
   29c8c:	add	r2, r5, r0
   29c90:	ldrb	lr, [lr, r3]
   29c94:	ldrb	r0, [r5, r0]
   29c98:	cmp	lr, r0
   29c9c:	bne	29cbc <__assert_fail@plt+0x1831c>
   29ca0:	add	r3, r3, #1
   29ca4:	cmp	r3, r7
   29ca8:	bcs	29e6c <__assert_fail@plt+0x184cc>
   29cac:	ldrb	lr, [r1, #1]!
   29cb0:	ldrb	r0, [r2, #1]!
   29cb4:	cmp	lr, r0
   29cb8:	beq	29ca0 <__assert_fail@plt+0x18300>
   29cbc:	ldr	r2, [sp, #20]
   29cc0:	add	r9, r2, r9
   29cc4:	add	r9, r3, r9
   29cc8:	mov	fp, ip
   29ccc:	mov	r0, r8
   29cd0:	add	r8, r9, r4
   29cd4:	sub	r2, r8, r0
   29cd8:	mov	r1, #0
   29cdc:	add	r0, r5, r0
   29ce0:	bl	1185c <memchr@plt>
   29ce4:	adds	r3, r8, #0
   29ce8:	movne	r3, #1
   29cec:	cmp	r0, #0
   29cf0:	movne	r3, #0
   29cf4:	mov	r0, r3
   29cf8:	cmp	r3, #0
   29cfc:	beq	29efc <__assert_fail@plt+0x1855c>
   29d00:	add	r3, r5, r8
   29d04:	ldrb	r3, [r3, #-1]
   29d08:	add	r2, sp, #1056	; 0x420
   29d0c:	add	r3, r2, r3, lsl #2
   29d10:	ldr	ip, [r3, #-1028]	; 0xfffffbfc
   29d14:	cmp	ip, #0
   29d18:	beq	29c6c <__assert_fail@plt+0x182cc>
   29d1c:	ldr	r3, [sp, #4]
   29d20:	cmp	fp, #0
   29d24:	cmpne	r3, ip
   29d28:	ldrhi	ip, [sp, #12]
   29d2c:	add	r9, r9, ip
   29d30:	mov	fp, #0
   29d34:	b	29ccc <__assert_fail@plt+0x1832c>
   29d38:	mov	r1, r3
   29d3c:	sub	r3, r1, #1
   29d40:	cmp	r6, r3
   29d44:	beq	29d58 <__assert_fail@plt+0x183b8>
   29d48:	ldrb	lr, [r0, #-1]!
   29d4c:	ldrb	ip, [r2, #-1]!
   29d50:	cmp	lr, ip
   29d54:	beq	29d38 <__assert_fail@plt+0x18398>
   29d58:	add	fp, fp, #1
   29d5c:	cmp	fp, r1
   29d60:	bhi	29d7c <__assert_fail@plt+0x183dc>
   29d64:	ldr	r3, [sp, #4]
   29d68:	add	r9, r9, r3
   29d6c:	ldr	fp, [sp, #12]
   29d70:	b	29ccc <__assert_fail@plt+0x1832c>
   29d74:	mov	r1, sl
   29d78:	b	29d58 <__assert_fail@plt+0x183b8>
   29d7c:	add	r0, r5, r9
   29d80:	b	29efc <__assert_fail@plt+0x1855c>
   29d84:	mov	fp, #0
   29d88:	mov	r9, fp
   29d8c:	sub	r7, r4, #1
   29d90:	sub	r3, sl, #1
   29d94:	str	r3, [sp, #8]
   29d98:	ldr	r2, [sp, #4]
   29d9c:	sub	r2, r4, r2
   29da0:	str	r2, [sp, #12]
   29da4:	ldr	r2, [sp]
   29da8:	add	r3, r2, r3
   29dac:	str	r3, [sp, #16]
   29db0:	rsb	r3, sl, #1
   29db4:	str	r3, [sp, #20]
   29db8:	mov	r0, r6
   29dbc:	b	29cd0 <__assert_fail@plt+0x18330>
   29dc0:	add	r9, r9, r3
   29dc4:	mov	r0, r8
   29dc8:	add	r8, r9, r4
   29dcc:	sub	r2, r8, r0
   29dd0:	mov	r1, #0
   29dd4:	add	r0, r5, r0
   29dd8:	bl	1185c <memchr@plt>
   29ddc:	adds	r3, r8, #0
   29de0:	movne	r3, #1
   29de4:	cmp	r0, #0
   29de8:	movne	r3, #0
   29dec:	mov	r0, r3
   29df0:	cmp	r3, #0
   29df4:	beq	29efc <__assert_fail@plt+0x1855c>
   29df8:	add	r3, r5, r8
   29dfc:	ldrb	r3, [r3, #-1]
   29e00:	add	r2, sp, #1056	; 0x420
   29e04:	add	r3, r2, r3, lsl #2
   29e08:	ldr	r3, [r3, #-1028]	; 0xfffffbfc
   29e0c:	cmp	r3, #0
   29e10:	bne	29dc0 <__assert_fail@plt+0x18420>
   29e14:	cmp	sl, r7
   29e18:	bcs	29ea8 <__assert_fail@plt+0x18508>
   29e1c:	add	r3, r9, sl
   29e20:	add	r2, r5, r3
   29e24:	ldrb	r1, [r6]
   29e28:	ldrb	r3, [r5, r3]
   29e2c:	cmp	r1, r3
   29e30:	movne	r3, sl
   29e34:	bne	29e5c <__assert_fail@plt+0x184bc>
   29e38:	mov	r1, r6
   29e3c:	mov	r3, sl
   29e40:	add	r3, r3, #1
   29e44:	cmp	r3, r7
   29e48:	bcs	29ea8 <__assert_fail@plt+0x18508>
   29e4c:	ldrb	ip, [r1, #1]!
   29e50:	ldrb	r0, [r2, #1]!
   29e54:	cmp	ip, r0
   29e58:	beq	29e40 <__assert_fail@plt+0x184a0>
   29e5c:	ldr	r2, [sp, #12]
   29e60:	add	r9, r2, r9
   29e64:	add	r9, r9, r3
   29e68:	b	29dc4 <__assert_fail@plt+0x18424>
   29e6c:	ldr	r1, [sp, #8]
   29e70:	cmp	fp, sl
   29e74:	movcs	r1, sl
   29e78:	bcs	29d58 <__assert_fail@plt+0x183b8>
   29e7c:	ldr	r3, [sp, #8]
   29e80:	add	r3, r9, r3
   29e84:	add	r2, r5, r3
   29e88:	ldr	ip, [sp, #16]
   29e8c:	ldrb	r0, [ip]
   29e90:	ldrb	r3, [r5, r3]
   29e94:	cmp	r0, r3
   29e98:	bne	29d74 <__assert_fail@plt+0x183d4>
   29e9c:	mov	r0, ip
   29ea0:	sub	r6, fp, #1
   29ea4:	b	29d3c <__assert_fail@plt+0x1839c>
   29ea8:	cmn	fp, #1
   29eac:	beq	29ef8 <__assert_fail@plt+0x18558>
   29eb0:	add	r3, r9, fp
   29eb4:	add	r2, r5, r3
   29eb8:	ldr	r0, [sp, #8]
   29ebc:	ldrb	r1, [r0]
   29ec0:	ldrb	r3, [r5, r3]
   29ec4:	cmp	r1, r3
   29ec8:	bne	29eec <__assert_fail@plt+0x1854c>
   29ecc:	mov	r3, r0
   29ed0:	ldr	ip, [sp]
   29ed4:	cmp	r3, ip
   29ed8:	beq	29ef8 <__assert_fail@plt+0x18558>
   29edc:	ldrb	r0, [r3, #-1]!
   29ee0:	ldrb	r1, [r2, #-1]!
   29ee4:	cmp	r0, r1
   29ee8:	beq	29ed4 <__assert_fail@plt+0x18534>
   29eec:	ldr	r3, [sp, #4]
   29ef0:	add	r9, r9, r3
   29ef4:	b	29dc4 <__assert_fail@plt+0x18424>
   29ef8:	add	r0, r5, r9
   29efc:	add	sp, sp, #1056	; 0x420
   29f00:	add	sp, sp, #4
   29f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29f0c:	sub	sp, sp, #36	; 0x24
   29f10:	ldrb	r3, [r0]
   29f14:	cmp	r3, #0
   29f18:	beq	29fbc <__assert_fail@plt+0x1861c>
   29f1c:	ldrb	r2, [r1]
   29f20:	cmp	r2, #0
   29f24:	beq	2a27c <__assert_fail@plt+0x188dc>
   29f28:	mov	r4, r0
   29f2c:	add	ip, r1, #1
   29f30:	mov	lr, #1
   29f34:	mov	fp, ip
   29f38:	cmp	r3, r2
   29f3c:	movne	lr, #0
   29f40:	andeq	lr, lr, #1
   29f44:	ldrb	r3, [r4, #1]!
   29f48:	cmp	r3, #0
   29f4c:	beq	29fc4 <__assert_fail@plt+0x18624>
   29f50:	ldrb	r2, [ip], #1
   29f54:	cmp	r2, #0
   29f58:	bne	29f34 <__assert_fail@plt+0x18594>
   29f5c:	cmp	lr, #0
   29f60:	bne	2a27c <__assert_fail@plt+0x188dc>
   29f64:	mov	r5, r0
   29f68:	sub	r4, fp, r1
   29f6c:	ldrb	r1, [r1]
   29f70:	add	r0, r0, #1
   29f74:	bl	117b4 <strchr@plt>
   29f78:	mov	r6, r0
   29f7c:	cmp	r0, #0
   29f80:	cmpne	r4, #1
   29f84:	beq	2a27c <__assert_fail@plt+0x188dc>
   29f88:	sub	fp, fp, r4
   29f8c:	add	r0, r5, r4
   29f90:	cmp	r6, r0
   29f94:	subls	r1, r0, r6
   29f98:	movhi	r1, #1
   29f9c:	mov	r7, r1
   29fa0:	cmp	r4, #31
   29fa4:	bls	29fd8 <__assert_fail@plt+0x18638>
   29fa8:	mov	r3, r4
   29fac:	mov	r2, fp
   29fb0:	mov	r0, r6
   29fb4:	bl	29b8c <__assert_fail@plt+0x181ec>
   29fb8:	b	2a27c <__assert_fail@plt+0x188dc>
   29fbc:	mov	fp, r1
   29fc0:	mov	lr, #1
   29fc4:	ldrb	r3, [fp]
   29fc8:	cmp	r3, #0
   29fcc:	movne	r0, #0
   29fd0:	beq	29f5c <__assert_fail@plt+0x185bc>
   29fd4:	b	2a27c <__assert_fail@plt+0x188dc>
   29fd8:	add	r2, sp, #28
   29fdc:	mov	r1, r4
   29fe0:	mov	r0, fp
   29fe4:	bl	29a6c <__assert_fail@plt+0x180cc>
   29fe8:	mov	r8, r0
   29fec:	ldr	r3, [sp, #28]
   29ff0:	str	r3, [sp, #8]
   29ff4:	mov	r2, r0
   29ff8:	add	r1, fp, r3
   29ffc:	mov	r0, fp
   2a000:	bl	1161c <memcmp@plt>
   2a004:	cmp	r0, #0
   2a008:	beq	2a098 <__assert_fail@plt+0x186f8>
   2a00c:	sub	r3, r4, r8
   2a010:	cmp	r3, r8
   2a014:	movcc	r3, r8
   2a018:	add	r3, r3, #1
   2a01c:	str	r3, [sp, #8]
   2a020:	mov	r5, #0
   2a024:	sub	r3, r8, #1
   2a028:	add	r2, fp, r3
   2a02c:	add	sl, fp, r8
   2a030:	rsb	r1, r8, #1
   2a034:	str	r1, [sp, #4]
   2a038:	mov	r0, r7
   2a03c:	str	fp, [sp, #12]
   2a040:	mov	fp, r3
   2a044:	mov	r7, r2
   2a048:	b	2a204 <__assert_fail@plt+0x18864>
   2a04c:	mov	r1, r3
   2a050:	sub	r3, r1, #1
   2a054:	cmp	r3, r7
   2a058:	beq	2a06c <__assert_fail@plt+0x186cc>
   2a05c:	ldrb	lr, [r0, #-1]!
   2a060:	ldrb	ip, [r2, #-1]!
   2a064:	cmp	lr, ip
   2a068:	beq	2a04c <__assert_fail@plt+0x186ac>
   2a06c:	add	r9, r9, #1
   2a070:	cmp	r9, r1
   2a074:	bhi	2a090 <__assert_fail@plt+0x186f0>
   2a078:	ldr	r3, [sp, #8]
   2a07c:	add	r5, r5, r3
   2a080:	ldr	r9, [sp, #16]
   2a084:	b	2a0e4 <__assert_fail@plt+0x18744>
   2a088:	mov	r1, r8
   2a08c:	b	2a06c <__assert_fail@plt+0x186cc>
   2a090:	add	r0, r6, r5
   2a094:	b	2a27c <__assert_fail@plt+0x188dc>
   2a098:	mov	r9, #0
   2a09c:	mov	r5, r9
   2a0a0:	sub	r3, r8, #1
   2a0a4:	str	r3, [sp, #4]
   2a0a8:	ldr	r2, [sp, #8]
   2a0ac:	sub	r2, r4, r2
   2a0b0:	str	r2, [sp, #16]
   2a0b4:	add	r3, fp, r3
   2a0b8:	str	r3, [sp, #20]
   2a0bc:	rsb	r3, r8, #1
   2a0c0:	str	r3, [sp, #12]
   2a0c4:	mov	r0, r7
   2a0c8:	b	2a0e8 <__assert_fail@plt+0x18748>
   2a0cc:	mov	r0, #0
   2a0d0:	b	2a27c <__assert_fail@plt+0x188dc>
   2a0d4:	ldr	r2, [sp, #12]
   2a0d8:	add	r5, r2, r5
   2a0dc:	add	r5, r5, r3
   2a0e0:	mov	r9, #0
   2a0e4:	mov	r0, sl
   2a0e8:	add	sl, r4, r5
   2a0ec:	sub	r2, sl, r0
   2a0f0:	mov	r1, #0
   2a0f4:	add	r0, r6, r0
   2a0f8:	bl	1185c <memchr@plt>
   2a0fc:	adds	r3, sl, #0
   2a100:	movne	r3, #1
   2a104:	cmp	r0, #0
   2a108:	movne	r3, #0
   2a10c:	mov	r0, r3
   2a110:	cmp	r3, #0
   2a114:	beq	2a27c <__assert_fail@plt+0x188dc>
   2a118:	cmp	r8, r9
   2a11c:	movcs	r3, r8
   2a120:	movcc	r3, r9
   2a124:	cmp	r4, r3
   2a128:	bls	2a168 <__assert_fail@plt+0x187c8>
   2a12c:	add	r1, fp, r3
   2a130:	add	r0, r3, r5
   2a134:	add	r2, r6, r0
   2a138:	ldrb	ip, [fp, r3]
   2a13c:	ldrb	r0, [r6, r0]
   2a140:	cmp	ip, r0
   2a144:	bne	2a0d4 <__assert_fail@plt+0x18734>
   2a148:	add	r3, r3, #1
   2a14c:	cmp	r4, r3
   2a150:	beq	2a168 <__assert_fail@plt+0x187c8>
   2a154:	ldrb	ip, [r1, #1]!
   2a158:	ldrb	r0, [r2, #1]!
   2a15c:	cmp	ip, r0
   2a160:	beq	2a148 <__assert_fail@plt+0x187a8>
   2a164:	b	2a0d4 <__assert_fail@plt+0x18734>
   2a168:	ldr	r1, [sp, #4]
   2a16c:	cmp	r8, r9
   2a170:	movls	r1, r8
   2a174:	bls	2a06c <__assert_fail@plt+0x186cc>
   2a178:	ldr	r3, [sp, #4]
   2a17c:	add	r3, r5, r3
   2a180:	add	r2, r6, r3
   2a184:	ldr	ip, [sp, #20]
   2a188:	ldrb	r0, [ip]
   2a18c:	ldrb	r3, [r6, r3]
   2a190:	cmp	r0, r3
   2a194:	bne	2a088 <__assert_fail@plt+0x186e8>
   2a198:	mov	r0, ip
   2a19c:	sub	r7, r9, #1
   2a1a0:	b	2a050 <__assert_fail@plt+0x186b0>
   2a1a4:	cmn	fp, #1
   2a1a8:	beq	2a278 <__assert_fail@plt+0x188d8>
   2a1ac:	add	r3, r5, fp
   2a1b0:	add	r2, r6, r3
   2a1b4:	ldrb	r1, [r7]
   2a1b8:	ldrb	r3, [r6, r3]
   2a1bc:	cmp	r1, r3
   2a1c0:	bne	2a1e4 <__assert_fail@plt+0x18844>
   2a1c4:	mov	r3, r7
   2a1c8:	ldr	ip, [sp, #12]
   2a1cc:	cmp	r3, ip
   2a1d0:	beq	2a278 <__assert_fail@plt+0x188d8>
   2a1d4:	ldrb	r0, [r3, #-1]!
   2a1d8:	ldrb	r1, [r2, #-1]!
   2a1dc:	cmp	r0, r1
   2a1e0:	beq	2a1cc <__assert_fail@plt+0x1882c>
   2a1e4:	ldr	r3, [sp, #8]
   2a1e8:	add	r5, r5, r3
   2a1ec:	b	2a200 <__assert_fail@plt+0x18860>
   2a1f0:	mov	r3, r8
   2a1f4:	ldr	r2, [sp, #4]
   2a1f8:	add	r5, r2, r5
   2a1fc:	add	r5, r5, r3
   2a200:	mov	r0, r9
   2a204:	add	r9, r4, r5
   2a208:	sub	r2, r9, r0
   2a20c:	mov	r1, #0
   2a210:	add	r0, r6, r0
   2a214:	bl	1185c <memchr@plt>
   2a218:	adds	r3, r9, #0
   2a21c:	movne	r3, #1
   2a220:	cmp	r0, #0
   2a224:	movne	r3, #0
   2a228:	cmp	r3, #0
   2a22c:	beq	2a0cc <__assert_fail@plt+0x1872c>
   2a230:	cmp	r4, r8
   2a234:	bls	2a1a4 <__assert_fail@plt+0x18804>
   2a238:	add	r3, r8, r5
   2a23c:	add	r2, r6, r3
   2a240:	ldrb	r1, [sl]
   2a244:	ldrb	r3, [r6, r3]
   2a248:	cmp	r1, r3
   2a24c:	bne	2a1f0 <__assert_fail@plt+0x18850>
   2a250:	mov	r1, sl
   2a254:	mov	r3, r8
   2a258:	add	r3, r3, #1
   2a25c:	cmp	r4, r3
   2a260:	beq	2a1a4 <__assert_fail@plt+0x18804>
   2a264:	ldrb	ip, [r1, #1]!
   2a268:	ldrb	r0, [r2, #1]!
   2a26c:	cmp	ip, r0
   2a270:	beq	2a258 <__assert_fail@plt+0x188b8>
   2a274:	b	2a1f4 <__assert_fail@plt+0x18854>
   2a278:	add	r0, r6, r5
   2a27c:	add	sp, sp, #36	; 0x24
   2a280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a284:	push	{r4, lr}
   2a288:	ldr	r3, [pc, #4]	; 2a294 <__assert_fail@plt+0x188f4>
   2a28c:	ldr	r0, [r3]
   2a290:	bl	11784 <exit@plt>
   2a294:			; <UNDEFINED> instruction: 0x0003d1bc
   2a298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a29c:	sub	sp, sp, #12
   2a2a0:	str	r0, [sp, #4]
   2a2a4:	mov	r6, r1
   2a2a8:	mov	fp, r2
   2a2ac:	mov	r8, r3
   2a2b0:	bl	117a8 <strlen@plt>
   2a2b4:	str	r0, [sp]
   2a2b8:	ldr	r4, [r6]
   2a2bc:	cmp	r4, #0
   2a2c0:	beq	2a368 <__assert_fail@plt+0x189c8>
   2a2c4:	mov	r5, fp
   2a2c8:	mov	sl, #0
   2a2cc:	mvn	r9, #0
   2a2d0:	mov	r7, sl
   2a2d4:	b	2a2f4 <__assert_fail@plt+0x18954>
   2a2d8:	mov	r9, r7
   2a2dc:	b	2a35c <__assert_fail@plt+0x189bc>
   2a2e0:	add	r7, r7, #1
   2a2e4:	ldr	r4, [r6, #4]!
   2a2e8:	add	r5, r5, r8
   2a2ec:	cmp	r4, #0
   2a2f0:	beq	2a354 <__assert_fail@plt+0x189b4>
   2a2f4:	ldr	r2, [sp]
   2a2f8:	ldr	r1, [sp, #4]
   2a2fc:	mov	r0, r4
   2a300:	bl	11958 <strncmp@plt>
   2a304:	cmp	r0, #0
   2a308:	bne	2a2e0 <__assert_fail@plt+0x18940>
   2a30c:	mov	r0, r4
   2a310:	bl	117a8 <strlen@plt>
   2a314:	ldr	r3, [sp]
   2a318:	cmp	r3, r0
   2a31c:	beq	2a2d8 <__assert_fail@plt+0x18938>
   2a320:	cmn	r9, #1
   2a324:	moveq	r9, r7
   2a328:	beq	2a2e0 <__assert_fail@plt+0x18940>
   2a32c:	cmp	fp, #0
   2a330:	moveq	sl, #1
   2a334:	beq	2a2e0 <__assert_fail@plt+0x18940>
   2a338:	mov	r2, r8
   2a33c:	mov	r1, r5
   2a340:	mla	r0, r8, r9, fp
   2a344:	bl	1161c <memcmp@plt>
   2a348:	cmp	r0, #0
   2a34c:	movne	sl, #1
   2a350:	b	2a2e0 <__assert_fail@plt+0x18940>
   2a354:	cmp	sl, #0
   2a358:	mvnne	r9, #1
   2a35c:	mov	r0, r9
   2a360:	add	sp, sp, #12
   2a364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a368:	mvn	r9, #0
   2a36c:	b	2a35c <__assert_fail@plt+0x189bc>
   2a370:	push	{r4, r5, r6, lr}
   2a374:	sub	sp, sp, #8
   2a378:	mov	r5, r0
   2a37c:	mov	r4, r1
   2a380:	cmn	r2, #1
   2a384:	mov	r2, #5
   2a388:	ldreq	r1, [pc, #76]	; 2a3dc <__assert_fail@plt+0x18a3c>
   2a38c:	ldrne	r1, [pc, #76]	; 2a3e0 <__assert_fail@plt+0x18a40>
   2a390:	mov	r0, #0
   2a394:	bl	11628 <dcgettext@plt>
   2a398:	mov	r6, r0
   2a39c:	mov	r2, r4
   2a3a0:	mov	r1, #8
   2a3a4:	mov	r0, #0
   2a3a8:	bl	1a0cc <__assert_fail@plt+0x872c>
   2a3ac:	mov	r4, r0
   2a3b0:	mov	r1, r5
   2a3b4:	mov	r0, #1
   2a3b8:	bl	1a35c <__assert_fail@plt+0x89bc>
   2a3bc:	str	r0, [sp]
   2a3c0:	mov	r3, r4
   2a3c4:	mov	r2, r6
   2a3c8:	mov	r1, #0
   2a3cc:	mov	r0, r1
   2a3d0:	bl	116d0 <error@plt>
   2a3d4:	add	sp, sp, #8
   2a3d8:	pop	{r4, r5, r6, pc}
   2a3dc:	ldrdeq	ip, [r2], -r8
   2a3e0:	strdeq	ip, [r2], -r4
   2a3e4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a3e8:	mov	r7, r0
   2a3ec:	mov	r4, r1
   2a3f0:	mov	r8, r2
   2a3f4:	mov	r2, #5
   2a3f8:	ldr	r1, [pc, #180]	; 2a4b4 <__assert_fail@plt+0x18b14>
   2a3fc:	mov	r0, #0
   2a400:	bl	11628 <dcgettext@plt>
   2a404:	ldr	r3, [pc, #172]	; 2a4b8 <__assert_fail@plt+0x18b18>
   2a408:	ldr	r1, [r3]
   2a40c:	bl	1194c <fputs@plt>
   2a410:	ldr	r5, [r7]
   2a414:	cmp	r5, #0
   2a418:	beq	2a4a0 <__assert_fail@plt+0x18b00>
   2a41c:	mov	r9, #0
   2a420:	mov	r6, r9
   2a424:	ldr	sl, [pc, #140]	; 2a4b8 <__assert_fail@plt+0x18b18>
   2a428:	b	2a460 <__assert_fail@plt+0x18ac0>
   2a42c:	ldr	r9, [sl]
   2a430:	mov	r0, r5
   2a434:	bl	1a36c <__assert_fail@plt+0x89cc>
   2a438:	mov	r2, r0
   2a43c:	ldr	r1, [pc, #120]	; 2a4bc <__assert_fail@plt+0x18b1c>
   2a440:	mov	r0, r9
   2a444:	bl	117c0 <fprintf@plt>
   2a448:	mov	r9, r4
   2a44c:	add	r6, r6, #1
   2a450:	ldr	r5, [r7, #4]!
   2a454:	add	r4, r4, r8
   2a458:	cmp	r5, #0
   2a45c:	beq	2a4a0 <__assert_fail@plt+0x18b00>
   2a460:	cmp	r6, #0
   2a464:	beq	2a42c <__assert_fail@plt+0x18a8c>
   2a468:	mov	r2, r8
   2a46c:	mov	r1, r4
   2a470:	mov	r0, r9
   2a474:	bl	1161c <memcmp@plt>
   2a478:	cmp	r0, #0
   2a47c:	bne	2a42c <__assert_fail@plt+0x18a8c>
   2a480:	ldr	fp, [sl]
   2a484:	mov	r0, r5
   2a488:	bl	1a36c <__assert_fail@plt+0x89cc>
   2a48c:	mov	r2, r0
   2a490:	ldr	r1, [pc, #40]	; 2a4c0 <__assert_fail@plt+0x18b20>
   2a494:	mov	r0, fp
   2a498:	bl	117c0 <fprintf@plt>
   2a49c:	b	2a44c <__assert_fail@plt+0x18aac>
   2a4a0:	ldr	r3, [pc, #16]	; 2a4b8 <__assert_fail@plt+0x18b18>
   2a4a4:	ldr	r1, [r3]
   2a4a8:	mov	r0, #10
   2a4ac:	bl	118f8 <putc@plt>
   2a4b0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a4b4:	andeq	ip, r2, r4, lsl sp
   2a4b8:	andeq	sp, r3, r8, lsl r2
   2a4bc:	andeq	ip, r2, ip, lsr #26
   2a4c0:	andeq	ip, r2, r4, lsr sp
   2a4c4:	push	{r4, r5, r6, r7, r8, lr}
   2a4c8:	mov	r7, r0
   2a4cc:	mov	r6, r1
   2a4d0:	mov	r4, r2
   2a4d4:	mov	r5, r3
   2a4d8:	ldr	r3, [sp, #24]
   2a4dc:	mov	r2, r5
   2a4e0:	mov	r1, r4
   2a4e4:	mov	r0, r6
   2a4e8:	bl	2a298 <__assert_fail@plt+0x188f8>
   2a4ec:	cmp	r0, #0
   2a4f0:	popge	{r4, r5, r6, r7, r8, pc}
   2a4f4:	mov	r2, r0
   2a4f8:	mov	r1, r6
   2a4fc:	mov	r0, r7
   2a500:	bl	2a370 <__assert_fail@plt+0x189d0>
   2a504:	ldr	r2, [sp, #24]
   2a508:	mov	r1, r5
   2a50c:	mov	r0, r4
   2a510:	bl	2a3e4 <__assert_fail@plt+0x18a44>
   2a514:	ldr	r3, [sp, #28]
   2a518:	blx	r3
   2a51c:	mvn	r0, #0
   2a520:	pop	{r4, r5, r6, r7, r8, pc}
   2a524:	push	{r4, r5, r6, r7, r8, lr}
   2a528:	ldr	r6, [r1]
   2a52c:	cmp	r6, #0
   2a530:	beq	2a574 <__assert_fail@plt+0x18bd4>
   2a534:	mov	r7, r3
   2a538:	mov	r8, r0
   2a53c:	mov	r4, r2
   2a540:	mov	r5, r1
   2a544:	mov	r2, r7
   2a548:	mov	r1, r4
   2a54c:	mov	r0, r8
   2a550:	bl	1161c <memcmp@plt>
   2a554:	cmp	r0, #0
   2a558:	beq	2a56c <__assert_fail@plt+0x18bcc>
   2a55c:	ldr	r6, [r5, #4]!
   2a560:	add	r4, r4, r7
   2a564:	cmp	r6, #0
   2a568:	bne	2a544 <__assert_fail@plt+0x18ba4>
   2a56c:	mov	r0, r6
   2a570:	pop	{r4, r5, r6, r7, r8, pc}
   2a574:	mov	r6, #0
   2a578:	b	2a56c <__assert_fail@plt+0x18bcc>
   2a57c:	push	{r4, r5, r6, lr}
   2a580:	mov	r4, r0
   2a584:	bl	116b8 <__fpending@plt>
   2a588:	mov	r6, r0
   2a58c:	mov	r0, r4
   2a590:	bl	115b0 <ferror@plt>
   2a594:	mov	r5, r0
   2a598:	mov	r0, r4
   2a59c:	bl	11868 <fclose@plt>
   2a5a0:	cmp	r5, #0
   2a5a4:	bne	2a5cc <__assert_fail@plt+0x18c2c>
   2a5a8:	cmp	r0, #0
   2a5ac:	popeq	{r4, r5, r6, pc}
   2a5b0:	cmp	r6, #0
   2a5b4:	bne	2a5e8 <__assert_fail@plt+0x18c48>
   2a5b8:	bl	117d8 <__errno_location@plt>
   2a5bc:	ldr	r0, [r0]
   2a5c0:	subs	r0, r0, #9
   2a5c4:	mvnne	r0, #0
   2a5c8:	pop	{r4, r5, r6, pc}
   2a5cc:	cmp	r0, #0
   2a5d0:	bne	2a5f0 <__assert_fail@plt+0x18c50>
   2a5d4:	bl	117d8 <__errno_location@plt>
   2a5d8:	mov	r3, #0
   2a5dc:	str	r3, [r0]
   2a5e0:	mvn	r0, #0
   2a5e4:	pop	{r4, r5, r6, pc}
   2a5e8:	mvn	r0, #0
   2a5ec:	pop	{r4, r5, r6, pc}
   2a5f0:	mvn	r0, #0
   2a5f4:	pop	{r4, r5, r6, pc}
   2a5f8:	ldr	ip, [r0, #4]
   2a5fc:	cmp	ip, r1
   2a600:	bcs	2a648 <__assert_fail@plt+0x18ca8>
   2a604:	push	{r4, r5, r6, r7, r8, lr}
   2a608:	mov	r6, r3
   2a60c:	mov	r7, r2
   2a610:	mov	r5, r1
   2a614:	mov	r4, r0
   2a618:	cmp	r3, #0
   2a61c:	beq	2a654 <__assert_fail@plt+0x18cb4>
   2a620:	mov	r1, r3
   2a624:	mvn	r0, #0
   2a628:	bl	2a924 <__assert_fail@plt+0x18f84>
   2a62c:	cmp	r5, r0
   2a630:	bls	2a654 <__assert_fail@plt+0x18cb4>
   2a634:	bl	117d8 <__errno_location@plt>
   2a638:	mov	r3, #12
   2a63c:	str	r3, [r0]
   2a640:	mov	r0, #0
   2a644:	pop	{r4, r5, r6, r7, r8, pc}
   2a648:	str	r1, [r0]
   2a64c:	mov	r0, #1
   2a650:	bx	lr
   2a654:	mul	r1, r6, r5
   2a658:	ldr	r0, [r4, #8]
   2a65c:	cmp	r0, r7
   2a660:	beq	2a684 <__assert_fail@plt+0x18ce4>
   2a664:	bl	1b9dc <__assert_fail@plt+0xa03c>
   2a668:	subs	r7, r0, #0
   2a66c:	beq	2a6bc <__assert_fail@plt+0x18d1c>
   2a670:	str	r7, [r4, #8]
   2a674:	str	r5, [r4, #4]
   2a678:	str	r5, [r4]
   2a67c:	mov	r0, #1
   2a680:	pop	{r4, r5, r6, r7, r8, pc}
   2a684:	mov	r0, r1
   2a688:	bl	1b954 <__assert_fail@plt+0x9fb4>
   2a68c:	subs	r7, r0, #0
   2a690:	beq	2a6b4 <__assert_fail@plt+0x18d14>
   2a694:	ldr	r1, [r4, #8]
   2a698:	cmp	r1, #0
   2a69c:	beq	2a670 <__assert_fail@plt+0x18cd0>
   2a6a0:	ldr	r2, [r4]
   2a6a4:	mul	r2, r2, r6
   2a6a8:	mov	r0, r7
   2a6ac:	bl	115d4 <memcpy@plt>
   2a6b0:	b	2a670 <__assert_fail@plt+0x18cd0>
   2a6b4:	mov	r0, #0
   2a6b8:	pop	{r4, r5, r6, r7, r8, pc}
   2a6bc:	mov	r0, #0
   2a6c0:	pop	{r4, r5, r6, r7, r8, pc}
   2a6c4:	push	{lr}		; (str lr, [sp, #-4]!)
   2a6c8:	sub	sp, sp, #268	; 0x10c
   2a6cc:	ldr	r2, [pc, #68]	; 2a718 <__assert_fail@plt+0x18d78>
   2a6d0:	add	r1, sp, #4
   2a6d4:	bl	2a868 <__assert_fail@plt+0x18ec8>
   2a6d8:	cmp	r0, #0
   2a6dc:	movne	r0, #0
   2a6e0:	bne	2a710 <__assert_fail@plt+0x18d70>
   2a6e4:	ldr	r1, [pc, #48]	; 2a71c <__assert_fail@plt+0x18d7c>
   2a6e8:	add	r0, sp, #4
   2a6ec:	bl	11544 <strcmp@plt>
   2a6f0:	cmp	r0, #0
   2a6f4:	moveq	r0, #0
   2a6f8:	beq	2a710 <__assert_fail@plt+0x18d70>
   2a6fc:	ldr	r1, [pc, #28]	; 2a720 <__assert_fail@plt+0x18d80>
   2a700:	add	r0, sp, #4
   2a704:	bl	11544 <strcmp@plt>
   2a708:	adds	r0, r0, #0
   2a70c:	movne	r0, #1
   2a710:	add	sp, sp, #268	; 0x10c
   2a714:	pop	{pc}		; (ldr pc, [sp], #4)
   2a718:	andeq	r0, r0, r1, lsl #2
   2a71c:	andeq	ip, r2, ip, lsr sp
   2a720:	andeq	ip, r2, r0, asr #26
   2a724:	push	{r4, lr}
   2a728:	mov	r0, #14
   2a72c:	bl	118b0 <nl_langinfo@plt>
   2a730:	cmp	r0, #0
   2a734:	beq	2a74c <__assert_fail@plt+0x18dac>
   2a738:	ldrb	r2, [r0]
   2a73c:	ldr	r3, [pc, #16]	; 2a754 <__assert_fail@plt+0x18db4>
   2a740:	cmp	r2, #0
   2a744:	moveq	r0, r3
   2a748:	pop	{r4, pc}
   2a74c:	ldr	r0, [pc]	; 2a754 <__assert_fail@plt+0x18db4>
   2a750:	pop	{r4, pc}
   2a754:	andeq	ip, r2, r8, asr #26
   2a758:	cmn	r0, #-2147483631	; 0x80000011
   2a75c:	bhi	2a790 <__assert_fail@plt+0x18df0>
   2a760:	push	{r4, lr}
   2a764:	add	r0, r0, #16
   2a768:	bl	1170c <malloc@plt>
   2a76c:	cmp	r0, #0
   2a770:	beq	2a798 <__assert_fail@plt+0x18df8>
   2a774:	add	r3, r0, #8
   2a778:	bic	r3, r3, #15
   2a77c:	rsb	r2, r0, #8
   2a780:	add	r3, r3, r2
   2a784:	add	r0, r0, r3
   2a788:	strb	r3, [r0, #-1]
   2a78c:	pop	{r4, pc}
   2a790:	mov	r0, #0
   2a794:	bx	lr
   2a798:	mov	r0, #0
   2a79c:	pop	{r4, pc}
   2a7a0:	push	{r4, lr}
   2a7a4:	tst	r0, #7
   2a7a8:	bne	2a7c4 <__assert_fail@plt+0x18e24>
   2a7ac:	tst	r0, #8
   2a7b0:	popeq	{r4, pc}
   2a7b4:	ldrb	r3, [r0, #-1]
   2a7b8:	sub	r0, r0, r3
   2a7bc:	bl	1b854 <__assert_fail@plt+0x9eb4>
   2a7c0:	pop	{r4, pc}
   2a7c4:	bl	11964 <abort@plt>
   2a7c8:	push	{r4, lr}
   2a7cc:	mov	r4, r0
   2a7d0:	bl	11574 <wcwidth@plt>
   2a7d4:	cmp	r0, #0
   2a7d8:	popge	{r4, pc}
   2a7dc:	mov	r0, r4
   2a7e0:	bl	1164c <iswcntrl@plt>
   2a7e4:	clz	r0, r0
   2a7e8:	lsr	r0, r0, #5
   2a7ec:	pop	{r4, pc}
   2a7f0:	push	{r4, r5, r6, lr}
   2a7f4:	mov	r5, r0
   2a7f8:	mov	r4, r1
   2a7fc:	mov	r3, r1
   2a800:	ldr	r1, [r3], #16
   2a804:	cmp	r1, r3
   2a808:	strne	r1, [r0]
   2a80c:	beq	2a830 <__assert_fail@plt+0x18e90>
   2a810:	ldr	r3, [r4, #4]
   2a814:	str	r3, [r5, #4]
   2a818:	ldrb	r3, [r4, #8]
   2a81c:	strb	r3, [r5, #8]
   2a820:	cmp	r3, #0
   2a824:	ldrne	r3, [r4, #12]
   2a828:	strne	r3, [r5, #12]
   2a82c:	pop	{r4, r5, r6, pc}
   2a830:	add	r6, r0, #16
   2a834:	ldr	r2, [r4, #4]
   2a838:	mov	r0, r6
   2a83c:	bl	115d4 <memcpy@plt>
   2a840:	str	r6, [r5]
   2a844:	b	2a810 <__assert_fail@plt+0x18e70>
   2a848:	lsr	r2, r0, #5
   2a84c:	and	r0, r0, #31
   2a850:	ldr	r3, [pc, #12]	; 2a864 <__assert_fail@plt+0x18ec4>
   2a854:	ldr	r3, [r3, r2, lsl #2]
   2a858:	lsr	r0, r3, r0
   2a85c:	and	r0, r0, #1
   2a860:	bx	lr
   2a864:	andeq	ip, r2, r0, asr sp
   2a868:	push	{r4, r5, r6, lr}
   2a86c:	mov	r6, r1
   2a870:	mov	r4, r2
   2a874:	mov	r1, #0
   2a878:	bl	11898 <setlocale@plt>
   2a87c:	subs	r5, r0, #0
   2a880:	beq	2a8a4 <__assert_fail@plt+0x18f04>
   2a884:	mov	r0, r5
   2a888:	bl	117a8 <strlen@plt>
   2a88c:	cmp	r4, r0
   2a890:	bhi	2a8bc <__assert_fail@plt+0x18f1c>
   2a894:	cmp	r4, #0
   2a898:	bne	2a8d4 <__assert_fail@plt+0x18f34>
   2a89c:	mov	r0, #34	; 0x22
   2a8a0:	pop	{r4, r5, r6, pc}
   2a8a4:	cmp	r4, #0
   2a8a8:	beq	2a8f8 <__assert_fail@plt+0x18f58>
   2a8ac:	mov	r3, #0
   2a8b0:	strb	r3, [r6]
   2a8b4:	mov	r0, #22
   2a8b8:	pop	{r4, r5, r6, pc}
   2a8bc:	add	r2, r0, #1
   2a8c0:	mov	r1, r5
   2a8c4:	mov	r0, r6
   2a8c8:	bl	115d4 <memcpy@plt>
   2a8cc:	mov	r0, #0
   2a8d0:	pop	{r4, r5, r6, pc}
   2a8d4:	sub	r4, r4, #1
   2a8d8:	mov	r2, r4
   2a8dc:	mov	r1, r5
   2a8e0:	mov	r0, r6
   2a8e4:	bl	115d4 <memcpy@plt>
   2a8e8:	mov	r3, #0
   2a8ec:	strb	r3, [r6, r4]
   2a8f0:	mov	r0, #34	; 0x22
   2a8f4:	pop	{r4, r5, r6, pc}
   2a8f8:	mov	r0, #22
   2a8fc:	pop	{r4, r5, r6, pc}
   2a900:	push	{r4, lr}
   2a904:	mov	r1, #0
   2a908:	bl	11898 <setlocale@plt>
   2a90c:	pop	{r4, pc}
   2a910:	push	{r4, lr}
   2a914:	mov	r2, #3
   2a918:	mov	r1, #0
   2a91c:	bl	1b598 <__assert_fail@plt+0x9bf8>
   2a920:	pop	{r4, pc}
   2a924:	subs	r2, r1, #1
   2a928:	bxeq	lr
   2a92c:	bcc	2ab04 <__assert_fail@plt+0x19164>
   2a930:	cmp	r0, r1
   2a934:	bls	2aae8 <__assert_fail@plt+0x19148>
   2a938:	tst	r1, r2
   2a93c:	beq	2aaf4 <__assert_fail@plt+0x19154>
   2a940:	clz	r3, r0
   2a944:	clz	r2, r1
   2a948:	sub	r3, r2, r3
   2a94c:	rsbs	r3, r3, #31
   2a950:	addne	r3, r3, r3, lsl #1
   2a954:	mov	r2, #0
   2a958:	addne	pc, pc, r3, lsl #2
   2a95c:	nop			; (mov r0, r0)
   2a960:	cmp	r0, r1, lsl #31
   2a964:	adc	r2, r2, r2
   2a968:	subcs	r0, r0, r1, lsl #31
   2a96c:	cmp	r0, r1, lsl #30
   2a970:	adc	r2, r2, r2
   2a974:	subcs	r0, r0, r1, lsl #30
   2a978:	cmp	r0, r1, lsl #29
   2a97c:	adc	r2, r2, r2
   2a980:	subcs	r0, r0, r1, lsl #29
   2a984:	cmp	r0, r1, lsl #28
   2a988:	adc	r2, r2, r2
   2a98c:	subcs	r0, r0, r1, lsl #28
   2a990:	cmp	r0, r1, lsl #27
   2a994:	adc	r2, r2, r2
   2a998:	subcs	r0, r0, r1, lsl #27
   2a99c:	cmp	r0, r1, lsl #26
   2a9a0:	adc	r2, r2, r2
   2a9a4:	subcs	r0, r0, r1, lsl #26
   2a9a8:	cmp	r0, r1, lsl #25
   2a9ac:	adc	r2, r2, r2
   2a9b0:	subcs	r0, r0, r1, lsl #25
   2a9b4:	cmp	r0, r1, lsl #24
   2a9b8:	adc	r2, r2, r2
   2a9bc:	subcs	r0, r0, r1, lsl #24
   2a9c0:	cmp	r0, r1, lsl #23
   2a9c4:	adc	r2, r2, r2
   2a9c8:	subcs	r0, r0, r1, lsl #23
   2a9cc:	cmp	r0, r1, lsl #22
   2a9d0:	adc	r2, r2, r2
   2a9d4:	subcs	r0, r0, r1, lsl #22
   2a9d8:	cmp	r0, r1, lsl #21
   2a9dc:	adc	r2, r2, r2
   2a9e0:	subcs	r0, r0, r1, lsl #21
   2a9e4:	cmp	r0, r1, lsl #20
   2a9e8:	adc	r2, r2, r2
   2a9ec:	subcs	r0, r0, r1, lsl #20
   2a9f0:	cmp	r0, r1, lsl #19
   2a9f4:	adc	r2, r2, r2
   2a9f8:	subcs	r0, r0, r1, lsl #19
   2a9fc:	cmp	r0, r1, lsl #18
   2aa00:	adc	r2, r2, r2
   2aa04:	subcs	r0, r0, r1, lsl #18
   2aa08:	cmp	r0, r1, lsl #17
   2aa0c:	adc	r2, r2, r2
   2aa10:	subcs	r0, r0, r1, lsl #17
   2aa14:	cmp	r0, r1, lsl #16
   2aa18:	adc	r2, r2, r2
   2aa1c:	subcs	r0, r0, r1, lsl #16
   2aa20:	cmp	r0, r1, lsl #15
   2aa24:	adc	r2, r2, r2
   2aa28:	subcs	r0, r0, r1, lsl #15
   2aa2c:	cmp	r0, r1, lsl #14
   2aa30:	adc	r2, r2, r2
   2aa34:	subcs	r0, r0, r1, lsl #14
   2aa38:	cmp	r0, r1, lsl #13
   2aa3c:	adc	r2, r2, r2
   2aa40:	subcs	r0, r0, r1, lsl #13
   2aa44:	cmp	r0, r1, lsl #12
   2aa48:	adc	r2, r2, r2
   2aa4c:	subcs	r0, r0, r1, lsl #12
   2aa50:	cmp	r0, r1, lsl #11
   2aa54:	adc	r2, r2, r2
   2aa58:	subcs	r0, r0, r1, lsl #11
   2aa5c:	cmp	r0, r1, lsl #10
   2aa60:	adc	r2, r2, r2
   2aa64:	subcs	r0, r0, r1, lsl #10
   2aa68:	cmp	r0, r1, lsl #9
   2aa6c:	adc	r2, r2, r2
   2aa70:	subcs	r0, r0, r1, lsl #9
   2aa74:	cmp	r0, r1, lsl #8
   2aa78:	adc	r2, r2, r2
   2aa7c:	subcs	r0, r0, r1, lsl #8
   2aa80:	cmp	r0, r1, lsl #7
   2aa84:	adc	r2, r2, r2
   2aa88:	subcs	r0, r0, r1, lsl #7
   2aa8c:	cmp	r0, r1, lsl #6
   2aa90:	adc	r2, r2, r2
   2aa94:	subcs	r0, r0, r1, lsl #6
   2aa98:	cmp	r0, r1, lsl #5
   2aa9c:	adc	r2, r2, r2
   2aaa0:	subcs	r0, r0, r1, lsl #5
   2aaa4:	cmp	r0, r1, lsl #4
   2aaa8:	adc	r2, r2, r2
   2aaac:	subcs	r0, r0, r1, lsl #4
   2aab0:	cmp	r0, r1, lsl #3
   2aab4:	adc	r2, r2, r2
   2aab8:	subcs	r0, r0, r1, lsl #3
   2aabc:	cmp	r0, r1, lsl #2
   2aac0:	adc	r2, r2, r2
   2aac4:	subcs	r0, r0, r1, lsl #2
   2aac8:	cmp	r0, r1, lsl #1
   2aacc:	adc	r2, r2, r2
   2aad0:	subcs	r0, r0, r1, lsl #1
   2aad4:	cmp	r0, r1
   2aad8:	adc	r2, r2, r2
   2aadc:	subcs	r0, r0, r1
   2aae0:	mov	r0, r2
   2aae4:	bx	lr
   2aae8:	moveq	r0, #1
   2aaec:	movne	r0, #0
   2aaf0:	bx	lr
   2aaf4:	clz	r2, r1
   2aaf8:	rsb	r2, r2, #31
   2aafc:	lsr	r0, r0, r2
   2ab00:	bx	lr
   2ab04:	cmp	r0, #0
   2ab08:	mvnne	r0, #0
   2ab0c:	b	2b164 <__assert_fail@plt+0x197c4>
   2ab10:	cmp	r1, #0
   2ab14:	beq	2ab04 <__assert_fail@plt+0x19164>
   2ab18:	push	{r0, r1, lr}
   2ab1c:	bl	2a924 <__assert_fail@plt+0x18f84>
   2ab20:	pop	{r1, r2, lr}
   2ab24:	mul	r3, r2, r0
   2ab28:	sub	r1, r1, r3
   2ab2c:	bx	lr
   2ab30:	cmp	r1, #0
   2ab34:	beq	2ad40 <__assert_fail@plt+0x193a0>
   2ab38:	eor	ip, r0, r1
   2ab3c:	rsbmi	r1, r1, #0
   2ab40:	subs	r2, r1, #1
   2ab44:	beq	2ad0c <__assert_fail@plt+0x1936c>
   2ab48:	movs	r3, r0
   2ab4c:	rsbmi	r3, r0, #0
   2ab50:	cmp	r3, r1
   2ab54:	bls	2ad18 <__assert_fail@plt+0x19378>
   2ab58:	tst	r1, r2
   2ab5c:	beq	2ad28 <__assert_fail@plt+0x19388>
   2ab60:	clz	r2, r3
   2ab64:	clz	r0, r1
   2ab68:	sub	r2, r0, r2
   2ab6c:	rsbs	r2, r2, #31
   2ab70:	addne	r2, r2, r2, lsl #1
   2ab74:	mov	r0, #0
   2ab78:	addne	pc, pc, r2, lsl #2
   2ab7c:	nop			; (mov r0, r0)
   2ab80:	cmp	r3, r1, lsl #31
   2ab84:	adc	r0, r0, r0
   2ab88:	subcs	r3, r3, r1, lsl #31
   2ab8c:	cmp	r3, r1, lsl #30
   2ab90:	adc	r0, r0, r0
   2ab94:	subcs	r3, r3, r1, lsl #30
   2ab98:	cmp	r3, r1, lsl #29
   2ab9c:	adc	r0, r0, r0
   2aba0:	subcs	r3, r3, r1, lsl #29
   2aba4:	cmp	r3, r1, lsl #28
   2aba8:	adc	r0, r0, r0
   2abac:	subcs	r3, r3, r1, lsl #28
   2abb0:	cmp	r3, r1, lsl #27
   2abb4:	adc	r0, r0, r0
   2abb8:	subcs	r3, r3, r1, lsl #27
   2abbc:	cmp	r3, r1, lsl #26
   2abc0:	adc	r0, r0, r0
   2abc4:	subcs	r3, r3, r1, lsl #26
   2abc8:	cmp	r3, r1, lsl #25
   2abcc:	adc	r0, r0, r0
   2abd0:	subcs	r3, r3, r1, lsl #25
   2abd4:	cmp	r3, r1, lsl #24
   2abd8:	adc	r0, r0, r0
   2abdc:	subcs	r3, r3, r1, lsl #24
   2abe0:	cmp	r3, r1, lsl #23
   2abe4:	adc	r0, r0, r0
   2abe8:	subcs	r3, r3, r1, lsl #23
   2abec:	cmp	r3, r1, lsl #22
   2abf0:	adc	r0, r0, r0
   2abf4:	subcs	r3, r3, r1, lsl #22
   2abf8:	cmp	r3, r1, lsl #21
   2abfc:	adc	r0, r0, r0
   2ac00:	subcs	r3, r3, r1, lsl #21
   2ac04:	cmp	r3, r1, lsl #20
   2ac08:	adc	r0, r0, r0
   2ac0c:	subcs	r3, r3, r1, lsl #20
   2ac10:	cmp	r3, r1, lsl #19
   2ac14:	adc	r0, r0, r0
   2ac18:	subcs	r3, r3, r1, lsl #19
   2ac1c:	cmp	r3, r1, lsl #18
   2ac20:	adc	r0, r0, r0
   2ac24:	subcs	r3, r3, r1, lsl #18
   2ac28:	cmp	r3, r1, lsl #17
   2ac2c:	adc	r0, r0, r0
   2ac30:	subcs	r3, r3, r1, lsl #17
   2ac34:	cmp	r3, r1, lsl #16
   2ac38:	adc	r0, r0, r0
   2ac3c:	subcs	r3, r3, r1, lsl #16
   2ac40:	cmp	r3, r1, lsl #15
   2ac44:	adc	r0, r0, r0
   2ac48:	subcs	r3, r3, r1, lsl #15
   2ac4c:	cmp	r3, r1, lsl #14
   2ac50:	adc	r0, r0, r0
   2ac54:	subcs	r3, r3, r1, lsl #14
   2ac58:	cmp	r3, r1, lsl #13
   2ac5c:	adc	r0, r0, r0
   2ac60:	subcs	r3, r3, r1, lsl #13
   2ac64:	cmp	r3, r1, lsl #12
   2ac68:	adc	r0, r0, r0
   2ac6c:	subcs	r3, r3, r1, lsl #12
   2ac70:	cmp	r3, r1, lsl #11
   2ac74:	adc	r0, r0, r0
   2ac78:	subcs	r3, r3, r1, lsl #11
   2ac7c:	cmp	r3, r1, lsl #10
   2ac80:	adc	r0, r0, r0
   2ac84:	subcs	r3, r3, r1, lsl #10
   2ac88:	cmp	r3, r1, lsl #9
   2ac8c:	adc	r0, r0, r0
   2ac90:	subcs	r3, r3, r1, lsl #9
   2ac94:	cmp	r3, r1, lsl #8
   2ac98:	adc	r0, r0, r0
   2ac9c:	subcs	r3, r3, r1, lsl #8
   2aca0:	cmp	r3, r1, lsl #7
   2aca4:	adc	r0, r0, r0
   2aca8:	subcs	r3, r3, r1, lsl #7
   2acac:	cmp	r3, r1, lsl #6
   2acb0:	adc	r0, r0, r0
   2acb4:	subcs	r3, r3, r1, lsl #6
   2acb8:	cmp	r3, r1, lsl #5
   2acbc:	adc	r0, r0, r0
   2acc0:	subcs	r3, r3, r1, lsl #5
   2acc4:	cmp	r3, r1, lsl #4
   2acc8:	adc	r0, r0, r0
   2accc:	subcs	r3, r3, r1, lsl #4
   2acd0:	cmp	r3, r1, lsl #3
   2acd4:	adc	r0, r0, r0
   2acd8:	subcs	r3, r3, r1, lsl #3
   2acdc:	cmp	r3, r1, lsl #2
   2ace0:	adc	r0, r0, r0
   2ace4:	subcs	r3, r3, r1, lsl #2
   2ace8:	cmp	r3, r1, lsl #1
   2acec:	adc	r0, r0, r0
   2acf0:	subcs	r3, r3, r1, lsl #1
   2acf4:	cmp	r3, r1
   2acf8:	adc	r0, r0, r0
   2acfc:	subcs	r3, r3, r1
   2ad00:	cmp	ip, #0
   2ad04:	rsbmi	r0, r0, #0
   2ad08:	bx	lr
   2ad0c:	teq	ip, r0
   2ad10:	rsbmi	r0, r0, #0
   2ad14:	bx	lr
   2ad18:	movcc	r0, #0
   2ad1c:	asreq	r0, ip, #31
   2ad20:	orreq	r0, r0, #1
   2ad24:	bx	lr
   2ad28:	clz	r2, r1
   2ad2c:	rsb	r2, r2, #31
   2ad30:	cmp	ip, #0
   2ad34:	lsr	r0, r3, r2
   2ad38:	rsbmi	r0, r0, #0
   2ad3c:	bx	lr
   2ad40:	cmp	r0, #0
   2ad44:	mvngt	r0, #-2147483648	; 0x80000000
   2ad48:	movlt	r0, #-2147483648	; 0x80000000
   2ad4c:	b	2b164 <__assert_fail@plt+0x197c4>
   2ad50:	cmp	r1, #0
   2ad54:	beq	2ad40 <__assert_fail@plt+0x193a0>
   2ad58:	push	{r0, r1, lr}
   2ad5c:	bl	2ab38 <__assert_fail@plt+0x19198>
   2ad60:	pop	{r1, r2, lr}
   2ad64:	mul	r3, r2, r0
   2ad68:	sub	r1, r1, r3
   2ad6c:	bx	lr
   2ad70:	eor	r1, r1, #-2147483648	; 0x80000000
   2ad74:	b	2ad7c <__assert_fail@plt+0x193dc>
   2ad78:	eor	r3, r3, #-2147483648	; 0x80000000
   2ad7c:	push	{r4, r5, lr}
   2ad80:	lsl	r4, r1, #1
   2ad84:	lsl	r5, r3, #1
   2ad88:	teq	r4, r5
   2ad8c:	teqeq	r0, r2
   2ad90:	orrsne	ip, r4, r0
   2ad94:	orrsne	ip, r5, r2
   2ad98:	mvnsne	ip, r4, asr #21
   2ad9c:	mvnsne	ip, r5, asr #21
   2ada0:	beq	2af8c <__assert_fail@plt+0x195ec>
   2ada4:	lsr	r4, r4, #21
   2ada8:	rsbs	r5, r4, r5, lsr #21
   2adac:	rsblt	r5, r5, #0
   2adb0:	ble	2add0 <__assert_fail@plt+0x19430>
   2adb4:	add	r4, r4, r5
   2adb8:	eor	r2, r0, r2
   2adbc:	eor	r3, r1, r3
   2adc0:	eor	r0, r2, r0
   2adc4:	eor	r1, r3, r1
   2adc8:	eor	r2, r0, r2
   2adcc:	eor	r3, r1, r3
   2add0:	cmp	r5, #54	; 0x36
   2add4:	pophi	{r4, r5, pc}
   2add8:	tst	r1, #-2147483648	; 0x80000000
   2addc:	lsl	r1, r1, #12
   2ade0:	mov	ip, #1048576	; 0x100000
   2ade4:	orr	r1, ip, r1, lsr #12
   2ade8:	beq	2adf4 <__assert_fail@plt+0x19454>
   2adec:	rsbs	r0, r0, #0
   2adf0:	rsc	r1, r1, #0
   2adf4:	tst	r3, #-2147483648	; 0x80000000
   2adf8:	lsl	r3, r3, #12
   2adfc:	orr	r3, ip, r3, lsr #12
   2ae00:	beq	2ae0c <__assert_fail@plt+0x1946c>
   2ae04:	rsbs	r2, r2, #0
   2ae08:	rsc	r3, r3, #0
   2ae0c:	teq	r4, r5
   2ae10:	beq	2af74 <__assert_fail@plt+0x195d4>
   2ae14:	sub	r4, r4, #1
   2ae18:	rsbs	lr, r5, #32
   2ae1c:	blt	2ae38 <__assert_fail@plt+0x19498>
   2ae20:	lsl	ip, r2, lr
   2ae24:	adds	r0, r0, r2, lsr r5
   2ae28:	adc	r1, r1, #0
   2ae2c:	adds	r0, r0, r3, lsl lr
   2ae30:	adcs	r1, r1, r3, asr r5
   2ae34:	b	2ae54 <__assert_fail@plt+0x194b4>
   2ae38:	sub	r5, r5, #32
   2ae3c:	add	lr, lr, #32
   2ae40:	cmp	r2, #1
   2ae44:	lsl	ip, r3, lr
   2ae48:	orrcs	ip, ip, #2
   2ae4c:	adds	r0, r0, r3, asr r5
   2ae50:	adcs	r1, r1, r3, asr #31
   2ae54:	and	r5, r1, #-2147483648	; 0x80000000
   2ae58:	bpl	2ae68 <__assert_fail@plt+0x194c8>
   2ae5c:	rsbs	ip, ip, #0
   2ae60:	rscs	r0, r0, #0
   2ae64:	rsc	r1, r1, #0
   2ae68:	cmp	r1, #1048576	; 0x100000
   2ae6c:	bcc	2aeac <__assert_fail@plt+0x1950c>
   2ae70:	cmp	r1, #2097152	; 0x200000
   2ae74:	bcc	2ae94 <__assert_fail@plt+0x194f4>
   2ae78:	lsrs	r1, r1, #1
   2ae7c:	rrxs	r0, r0
   2ae80:	rrx	ip, ip
   2ae84:	add	r4, r4, #1
   2ae88:	lsl	r2, r4, #21
   2ae8c:	cmn	r2, #4194304	; 0x400000
   2ae90:	bcs	2afec <__assert_fail@plt+0x1964c>
   2ae94:	cmp	ip, #-2147483648	; 0x80000000
   2ae98:	lsrseq	ip, r0, #1
   2ae9c:	adcs	r0, r0, #0
   2aea0:	adc	r1, r1, r4, lsl #20
   2aea4:	orr	r1, r1, r5
   2aea8:	pop	{r4, r5, pc}
   2aeac:	lsls	ip, ip, #1
   2aeb0:	adcs	r0, r0, r0
   2aeb4:	adc	r1, r1, r1
   2aeb8:	tst	r1, #1048576	; 0x100000
   2aebc:	sub	r4, r4, #1
   2aec0:	bne	2ae94 <__assert_fail@plt+0x194f4>
   2aec4:	teq	r1, #0
   2aec8:	moveq	r1, r0
   2aecc:	moveq	r0, #0
   2aed0:	clz	r3, r1
   2aed4:	addeq	r3, r3, #32
   2aed8:	sub	r3, r3, #11
   2aedc:	subs	r2, r3, #32
   2aee0:	bge	2af04 <__assert_fail@plt+0x19564>
   2aee4:	adds	r2, r2, #12
   2aee8:	ble	2af00 <__assert_fail@plt+0x19560>
   2aeec:	add	ip, r2, #20
   2aef0:	rsb	r2, r2, #12
   2aef4:	lsl	r0, r1, ip
   2aef8:	lsr	r1, r1, r2
   2aefc:	b	2af14 <__assert_fail@plt+0x19574>
   2af00:	add	r2, r2, #20
   2af04:	rsble	ip, r2, #32
   2af08:	lsl	r1, r1, r2
   2af0c:	orrle	r1, r1, r0, lsr ip
   2af10:	lslle	r0, r0, r2
   2af14:	subs	r4, r4, r3
   2af18:	addge	r1, r1, r4, lsl #20
   2af1c:	orrge	r1, r1, r5
   2af20:	popge	{r4, r5, pc}
   2af24:	mvn	r4, r4
   2af28:	subs	r4, r4, #31
   2af2c:	bge	2af68 <__assert_fail@plt+0x195c8>
   2af30:	adds	r4, r4, #12
   2af34:	bgt	2af50 <__assert_fail@plt+0x195b0>
   2af38:	add	r4, r4, #20
   2af3c:	rsb	r2, r4, #32
   2af40:	lsr	r0, r0, r4
   2af44:	orr	r0, r0, r1, lsl r2
   2af48:	orr	r1, r5, r1, lsr r4
   2af4c:	pop	{r4, r5, pc}
   2af50:	rsb	r4, r4, #12
   2af54:	rsb	r2, r4, #32
   2af58:	lsr	r0, r0, r2
   2af5c:	orr	r0, r0, r1, lsl r4
   2af60:	mov	r1, r5
   2af64:	pop	{r4, r5, pc}
   2af68:	lsr	r0, r1, r4
   2af6c:	mov	r1, r5
   2af70:	pop	{r4, r5, pc}
   2af74:	teq	r4, #0
   2af78:	eor	r3, r3, #1048576	; 0x100000
   2af7c:	eoreq	r1, r1, #1048576	; 0x100000
   2af80:	addeq	r4, r4, #1
   2af84:	subne	r5, r5, #1
   2af88:	b	2ae14 <__assert_fail@plt+0x19474>
   2af8c:	mvns	ip, r4, asr #21
   2af90:	mvnsne	ip, r5, asr #21
   2af94:	beq	2affc <__assert_fail@plt+0x1965c>
   2af98:	teq	r4, r5
   2af9c:	teqeq	r0, r2
   2afa0:	beq	2afb4 <__assert_fail@plt+0x19614>
   2afa4:	orrs	ip, r4, r0
   2afa8:	moveq	r1, r3
   2afac:	moveq	r0, r2
   2afb0:	pop	{r4, r5, pc}
   2afb4:	teq	r1, r3
   2afb8:	movne	r1, #0
   2afbc:	movne	r0, #0
   2afc0:	popne	{r4, r5, pc}
   2afc4:	lsrs	ip, r4, #21
   2afc8:	bne	2afdc <__assert_fail@plt+0x1963c>
   2afcc:	lsls	r0, r0, #1
   2afd0:	adcs	r1, r1, r1
   2afd4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2afd8:	pop	{r4, r5, pc}
   2afdc:	adds	r4, r4, #4194304	; 0x400000
   2afe0:	addcc	r1, r1, #1048576	; 0x100000
   2afe4:	popcc	{r4, r5, pc}
   2afe8:	and	r5, r1, #-2147483648	; 0x80000000
   2afec:	orr	r1, r5, #2130706432	; 0x7f000000
   2aff0:	orr	r1, r1, #15728640	; 0xf00000
   2aff4:	mov	r0, #0
   2aff8:	pop	{r4, r5, pc}
   2affc:	mvns	ip, r4, asr #21
   2b000:	movne	r1, r3
   2b004:	movne	r0, r2
   2b008:	mvnseq	ip, r5, asr #21
   2b00c:	movne	r3, r1
   2b010:	movne	r2, r0
   2b014:	orrs	r4, r0, r1, lsl #12
   2b018:	orrseq	r5, r2, r3, lsl #12
   2b01c:	teqeq	r1, r3
   2b020:	orrne	r1, r1, #524288	; 0x80000
   2b024:	pop	{r4, r5, pc}
   2b028:	teq	r0, #0
   2b02c:	moveq	r1, #0
   2b030:	bxeq	lr
   2b034:	push	{r4, r5, lr}
   2b038:	mov	r4, #1024	; 0x400
   2b03c:	add	r4, r4, #50	; 0x32
   2b040:	mov	r5, #0
   2b044:	mov	r1, #0
   2b048:	b	2aec4 <__assert_fail@plt+0x19524>
   2b04c:	teq	r0, #0
   2b050:	moveq	r1, #0
   2b054:	bxeq	lr
   2b058:	push	{r4, r5, lr}
   2b05c:	mov	r4, #1024	; 0x400
   2b060:	add	r4, r4, #50	; 0x32
   2b064:	ands	r5, r0, #-2147483648	; 0x80000000
   2b068:	rsbmi	r0, r0, #0
   2b06c:	mov	r1, #0
   2b070:	b	2aec4 <__assert_fail@plt+0x19524>
   2b074:	lsls	r2, r0, #1
   2b078:	asr	r1, r2, #3
   2b07c:	rrx	r1, r1
   2b080:	lsl	r0, r2, #28
   2b084:	andsne	r3, r2, #-16777216	; 0xff000000
   2b088:	teqne	r3, #-16777216	; 0xff000000
   2b08c:	eorne	r1, r1, #939524096	; 0x38000000
   2b090:	bxne	lr
   2b094:	teq	r2, #0
   2b098:	teqne	r3, #-16777216	; 0xff000000
   2b09c:	bxeq	lr
   2b0a0:	push	{r4, r5, lr}
   2b0a4:	mov	r4, #896	; 0x380
   2b0a8:	and	r5, r1, #-2147483648	; 0x80000000
   2b0ac:	bic	r1, r1, #-2147483648	; 0x80000000
   2b0b0:	b	2aec4 <__assert_fail@plt+0x19524>
   2b0b4:	orrs	r2, r0, r1
   2b0b8:	bxeq	lr
   2b0bc:	push	{r4, r5, lr}
   2b0c0:	mov	r5, #0
   2b0c4:	b	2b0e4 <__assert_fail@plt+0x19744>
   2b0c8:	orrs	r2, r0, r1
   2b0cc:	bxeq	lr
   2b0d0:	push	{r4, r5, lr}
   2b0d4:	ands	r5, r1, #-2147483648	; 0x80000000
   2b0d8:	bpl	2b0e4 <__assert_fail@plt+0x19744>
   2b0dc:	rsbs	r0, r0, #0
   2b0e0:	rsc	r1, r1, #0
   2b0e4:	mov	r4, #1024	; 0x400
   2b0e8:	add	r4, r4, #50	; 0x32
   2b0ec:	lsrs	ip, r1, #22
   2b0f0:	beq	2ae68 <__assert_fail@plt+0x194c8>
   2b0f4:	mov	r2, #3
   2b0f8:	lsrs	ip, ip, #3
   2b0fc:	addne	r2, r2, #3
   2b100:	lsrs	ip, ip, #3
   2b104:	addne	r2, r2, #3
   2b108:	add	r2, r2, ip, lsr #3
   2b10c:	rsb	r3, r2, #32
   2b110:	lsl	ip, r0, r3
   2b114:	lsr	r0, r0, r2
   2b118:	orr	r0, r0, r1, lsl r3
   2b11c:	lsr	r1, r1, r2
   2b120:	add	r4, r4, r2
   2b124:	b	2ae68 <__assert_fail@plt+0x194c8>
   2b128:	cmp	r3, #0
   2b12c:	cmpeq	r2, #0
   2b130:	bne	2b148 <__assert_fail@plt+0x197a8>
   2b134:	cmp	r1, #0
   2b138:	cmpeq	r0, #0
   2b13c:	mvnne	r1, #0
   2b140:	mvnne	r0, #0
   2b144:	b	2b164 <__assert_fail@plt+0x197c4>
   2b148:	sub	sp, sp, #8
   2b14c:	push	{sp, lr}
   2b150:	bl	2b1c0 <__assert_fail@plt+0x19820>
   2b154:	ldr	lr, [sp, #4]
   2b158:	add	sp, sp, #8
   2b15c:	pop	{r2, r3}
   2b160:	bx	lr
   2b164:	push	{r1, lr}
   2b168:	mov	r0, #8
   2b16c:	bl	11520 <raise@plt>
   2b170:	pop	{r1, pc}
   2b174:	andeq	r0, r0, r0
   2b178:	vmov	d7, r0, r1
   2b17c:	vldr	d6, [pc, #44]	; 2b1b0 <__assert_fail@plt+0x19810>
   2b180:	vldr	d5, [pc, #48]	; 2b1b8 <__assert_fail@plt+0x19818>
   2b184:	mov	r0, #0
   2b188:	vmul.f64	d6, d7, d6
   2b18c:	vcvt.u32.f64	s12, d6
   2b190:	vcvt.f64.u32	d4, s12
   2b194:	vmov	r1, s12
   2b198:	vmls.f64	d7, d4, d5
   2b19c:	vcvt.u32.f64	s14, d7
   2b1a0:	vmov	r3, s14
   2b1a4:	orr	r0, r0, r3
   2b1a8:	bx	lr
   2b1ac:	nop			; (mov r0, r0)
   2b1b0:	andeq	r0, r0, r0
   2b1b4:	ldclcc	0, cr0, [r0]
   2b1b8:	andeq	r0, r0, r0
   2b1bc:	mvnsmi	r0, r0
   2b1c0:	cmp	r1, r3
   2b1c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   2b1c8:	cmpeq	r0, r2
   2b1cc:	mov	r4, r0
   2b1d0:	mov	r5, r1
   2b1d4:	ldr	r9, [sp, #28]
   2b1d8:	movcc	r0, #0
   2b1dc:	movcc	r1, #0
   2b1e0:	bcc	2b2d8 <__assert_fail@plt+0x19938>
   2b1e4:	cmp	r3, #0
   2b1e8:	clzeq	ip, r2
   2b1ec:	clzne	ip, r3
   2b1f0:	addeq	ip, ip, #32
   2b1f4:	cmp	r5, #0
   2b1f8:	clzeq	r1, r4
   2b1fc:	addeq	r1, r1, #32
   2b200:	clzne	r1, r5
   2b204:	sub	ip, ip, r1
   2b208:	sub	lr, ip, #32
   2b20c:	lsl	r7, r3, ip
   2b210:	rsb	r8, ip, #32
   2b214:	orr	r7, r7, r2, lsl lr
   2b218:	orr	r7, r7, r2, lsr r8
   2b21c:	lsl	r6, r2, ip
   2b220:	cmp	r5, r7
   2b224:	cmpeq	r4, r6
   2b228:	movcc	r0, #0
   2b22c:	movcc	r1, #0
   2b230:	bcc	2b24c <__assert_fail@plt+0x198ac>
   2b234:	mov	r3, #1
   2b238:	subs	r4, r4, r6
   2b23c:	lsl	r1, r3, lr
   2b240:	lsl	r0, r3, ip
   2b244:	orr	r1, r1, r3, lsr r8
   2b248:	sbc	r5, r5, r7
   2b24c:	cmp	ip, #0
   2b250:	beq	2b2d8 <__assert_fail@plt+0x19938>
   2b254:	lsrs	r3, r7, #1
   2b258:	rrx	r2, r6
   2b25c:	mov	r6, ip
   2b260:	b	2b284 <__assert_fail@plt+0x198e4>
   2b264:	subs	r4, r4, r2
   2b268:	sbc	r5, r5, r3
   2b26c:	adds	r4, r4, r4
   2b270:	adc	r5, r5, r5
   2b274:	adds	r4, r4, #1
   2b278:	adc	r5, r5, #0
   2b27c:	subs	r6, r6, #1
   2b280:	beq	2b2a0 <__assert_fail@plt+0x19900>
   2b284:	cmp	r5, r3
   2b288:	cmpeq	r4, r2
   2b28c:	bcs	2b264 <__assert_fail@plt+0x198c4>
   2b290:	adds	r4, r4, r4
   2b294:	adc	r5, r5, r5
   2b298:	subs	r6, r6, #1
   2b29c:	bne	2b284 <__assert_fail@plt+0x198e4>
   2b2a0:	lsr	r6, r4, ip
   2b2a4:	lsr	r7, r5, ip
   2b2a8:	orr	r6, r6, r5, lsl r8
   2b2ac:	adds	r2, r0, r4
   2b2b0:	orr	r6, r6, r5, lsr lr
   2b2b4:	adc	r3, r1, r5
   2b2b8:	lsl	r1, r7, ip
   2b2bc:	orr	r1, r1, r6, lsl lr
   2b2c0:	lsl	r0, r6, ip
   2b2c4:	orr	r1, r1, r6, lsr r8
   2b2c8:	subs	r0, r2, r0
   2b2cc:	mov	r4, r6
   2b2d0:	mov	r5, r7
   2b2d4:	sbc	r1, r3, r1
   2b2d8:	cmp	r9, #0
   2b2dc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   2b2e0:	strd	r4, [r9]
   2b2e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2b2e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b2ec:	mov	r7, r0
   2b2f0:	ldr	r6, [pc, #72]	; 2b340 <__assert_fail@plt+0x199a0>
   2b2f4:	ldr	r5, [pc, #72]	; 2b344 <__assert_fail@plt+0x199a4>
   2b2f8:	add	r6, pc, r6
   2b2fc:	add	r5, pc, r5
   2b300:	sub	r6, r6, r5
   2b304:	mov	r8, r1
   2b308:	mov	r9, r2
   2b30c:	bl	114d0 <pthread_mutex_unlock@plt-0x20>
   2b310:	asrs	r6, r6, #2
   2b314:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b318:	mov	r4, #0
   2b31c:	add	r4, r4, #1
   2b320:	ldr	r3, [r5], #4
   2b324:	mov	r2, r9
   2b328:	mov	r1, r8
   2b32c:	mov	r0, r7
   2b330:	blx	r3
   2b334:	cmp	r6, r4
   2b338:	bne	2b31c <__assert_fail@plt+0x1997c>
   2b33c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b340:	andeq	r1, r1, r0, lsl ip
   2b344:	andeq	r1, r1, r8, lsl #24
   2b348:	bx	lr
   2b34c:	ldr	r3, [pc, #12]	; 2b360 <__assert_fail@plt+0x199c0>
   2b350:	mov	r1, #0
   2b354:	add	r3, pc, r3
   2b358:	ldr	r2, [r3]
   2b35c:	b	117fc <__cxa_atexit@plt>
   2b360:	andeq	r1, r1, ip, asr #28

Disassembly of section .fini:

0002b364 <.fini>:
   2b364:	push	{r3, lr}
   2b368:	pop	{r3, pc}
