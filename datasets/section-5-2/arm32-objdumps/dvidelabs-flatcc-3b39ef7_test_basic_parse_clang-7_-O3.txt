
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000128d8 <.init>:
   128d8:	push	{r3, lr}
   128dc:	bl	12a0c <_start@@Base+0x3c>
   128e0:	pop	{r3, pc}

Disassembly of section .plt:

000128e4 <free@plt-0x14>:
   128e4:	push	{lr}		; (str lr, [sp, #-4]!)
   128e8:	ldr	lr, [pc, #4]	; 128f4 <free@plt-0x4>
   128ec:	add	lr, pc, lr
   128f0:	ldr	pc, [lr, #8]!
   128f4:	andeq	lr, r1, ip, lsl #14

000128f8 <free@plt>:
   128f8:	add	ip, pc, #0, 12
   128fc:	add	ip, ip, #122880	; 0x1e000
   12900:	ldr	pc, [ip, #1804]!	; 0x70c

00012904 <memcpy@plt>:
   12904:	add	ip, pc, #0, 12
   12908:	add	ip, ip, #122880	; 0x1e000
   1290c:	ldr	pc, [ip, #1796]!	; 0x704

00012910 <memcmp@plt>:
   12910:	add	ip, pc, #0, 12
   12914:	add	ip, ip, #122880	; 0x1e000
   12918:	ldr	pc, [ip, #1788]!	; 0x6fc

0001291c <__isinff@plt>:
   1291c:	add	ip, pc, #0, 12
   12920:	add	ip, ip, #122880	; 0x1e000
   12924:	ldr	pc, [ip, #1780]!	; 0x6f4

00012928 <__isinf@plt>:
   12928:	add	ip, pc, #0, 12
   1292c:	add	ip, ip, #122880	; 0x1e000
   12930:	ldr	pc, [ip, #1772]!	; 0x6ec

00012934 <realloc@plt>:
   12934:	add	ip, pc, #0, 12
   12938:	add	ip, ip, #122880	; 0x1e000
   1293c:	ldr	pc, [ip, #1764]!	; 0x6e4

00012940 <fwrite@plt>:
   12940:	add	ip, pc, #0, 12
   12944:	add	ip, ip, #122880	; 0x1e000
   12948:	ldr	pc, [ip, #1756]!	; 0x6dc

0001294c <malloc@plt>:
   1294c:	add	ip, pc, #0, 12
   12950:	add	ip, ip, #122880	; 0x1e000
   12954:	ldr	pc, [ip, #1748]!	; 0x6d4

00012958 <__libc_start_main@plt>:
   12958:	add	ip, pc, #0, 12
   1295c:	add	ip, ip, #122880	; 0x1e000
   12960:	ldr	pc, [ip, #1740]!	; 0x6cc

00012964 <__gmon_start__@plt>:
   12964:	add	ip, pc, #0, 12
   12968:	add	ip, ip, #122880	; 0x1e000
   1296c:	ldr	pc, [ip, #1732]!	; 0x6c4

00012970 <strlen@plt>:
   12970:	add	ip, pc, #0, 12
   12974:	add	ip, ip, #122880	; 0x1e000
   12978:	ldr	pc, [ip, #1724]!	; 0x6bc

0001297c <fprintf@plt>:
   1297c:	add	ip, pc, #0, 12
   12980:	add	ip, ip, #122880	; 0x1e000
   12984:	ldr	pc, [ip, #1716]!	; 0x6b4

00012988 <posix_memalign@plt>:
   12988:	add	ip, pc, #0, 12
   1298c:	add	ip, ip, #122880	; 0x1e000
   12990:	ldr	pc, [ip, #1708]!	; 0x6ac

00012994 <memset@plt>:
   12994:	add	ip, pc, #0, 12
   12998:	add	ip, ip, #122880	; 0x1e000
   1299c:	ldr	pc, [ip, #1700]!	; 0x6a4

000129a0 <strtod@plt>:
   129a0:	add	ip, pc, #0, 12
   129a4:	add	ip, ip, #122880	; 0x1e000
   129a8:	ldr	pc, [ip, #1692]!	; 0x69c

000129ac <memchr@plt>:
   129ac:	add	ip, pc, #0, 12
   129b0:	add	ip, ip, #122880	; 0x1e000
   129b4:	ldr	pc, [ip, #1684]!	; 0x694

000129b8 <abort@plt>:
   129b8:	add	ip, pc, #0, 12
   129bc:	add	ip, ip, #122880	; 0x1e000
   129c0:	ldr	pc, [ip, #1676]!	; 0x68c

000129c4 <__assert_fail@plt>:
   129c4:	add	ip, pc, #0, 12
   129c8:	add	ip, ip, #122880	; 0x1e000
   129cc:	ldr	pc, [ip, #1668]!	; 0x684

Disassembly of section .text:

000129d0 <_start@@Base>:
   129d0:	mov	fp, #0
   129d4:	mov	lr, #0
   129d8:	pop	{r1}		; (ldr r1, [sp], #4)
   129dc:	mov	r2, sp
   129e0:	push	{r2}		; (str r2, [sp, #-4]!)
   129e4:	push	{r0}		; (str r0, [sp, #-4]!)
   129e8:	ldr	ip, [pc, #16]	; 12a00 <_start@@Base+0x30>
   129ec:	push	{ip}		; (str ip, [sp, #-4]!)
   129f0:	ldr	r0, [pc, #12]	; 12a04 <_start@@Base+0x34>
   129f4:	ldr	r3, [pc, #12]	; 12a08 <_start@@Base+0x38>
   129f8:	bl	12958 <__libc_start_main@plt>
   129fc:	bl	129b8 <abort@plt>
   12a00:	strheq	lr, [r1], -ip
   12a04:	andeq	r3, r1, r0, ror pc
   12a08:	andeq	lr, r1, ip, asr r0
   12a0c:	ldr	r3, [pc, #20]	; 12a28 <_start@@Base+0x58>
   12a10:	ldr	r2, [pc, #20]	; 12a2c <_start@@Base+0x5c>
   12a14:	add	r3, pc, r3
   12a18:	ldr	r2, [r3, r2]
   12a1c:	cmp	r2, #0
   12a20:	bxeq	lr
   12a24:	b	12964 <__gmon_start__@plt>
   12a28:	andeq	lr, r1, r4, ror #11
   12a2c:	andeq	r0, r0, r4, asr r0
   12a30:	ldr	r0, [pc, #24]	; 12a50 <_start@@Base+0x80>
   12a34:	ldr	r3, [pc, #24]	; 12a54 <_start@@Base+0x84>
   12a38:	cmp	r3, r0
   12a3c:	bxeq	lr
   12a40:	ldr	r3, [pc, #16]	; 12a58 <_start@@Base+0x88>
   12a44:	cmp	r3, #0
   12a48:	bxeq	lr
   12a4c:	bx	r3
   12a50:	andeq	r1, r3, r0, rrx
   12a54:	andeq	r1, r3, r0, rrx
   12a58:	andeq	r0, r0, r0
   12a5c:	ldr	r0, [pc, #36]	; 12a88 <_start@@Base+0xb8>
   12a60:	ldr	r1, [pc, #36]	; 12a8c <_start@@Base+0xbc>
   12a64:	sub	r1, r1, r0
   12a68:	asr	r1, r1, #2
   12a6c:	add	r1, r1, r1, lsr #31
   12a70:	asrs	r1, r1, #1
   12a74:	bxeq	lr
   12a78:	ldr	r3, [pc, #16]	; 12a90 <_start@@Base+0xc0>
   12a7c:	cmp	r3, #0
   12a80:	bxeq	lr
   12a84:	bx	r3
   12a88:	andeq	r1, r3, r0, rrx
   12a8c:	andeq	r1, r3, r0, rrx
   12a90:	andeq	r0, r0, r0
   12a94:	push	{r4, lr}
   12a98:	ldr	r4, [pc, #24]	; 12ab8 <_start@@Base+0xe8>
   12a9c:	ldrb	r3, [r4]
   12aa0:	cmp	r3, #0
   12aa4:	popne	{r4, pc}
   12aa8:	bl	12a30 <_start@@Base+0x60>
   12aac:	mov	r3, #1
   12ab0:	strb	r3, [r4]
   12ab4:	pop	{r4, pc}
   12ab8:	andeq	r1, r3, r4, rrx
   12abc:	b	12a5c <_start@@Base+0x8c>

00012ac0 <test@@Base>:
   12ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ac4:	add	fp, sp, #28
   12ac8:	sub	sp, sp, #84	; 0x54
   12acc:	mov	r9, r0
   12ad0:	add	r0, sp, #24
   12ad4:	mov	r4, r1
   12ad8:	vmov.i32	q8, #0	; 0x00000000
   12adc:	str	r3, [sp, #12]
   12ae0:	mov	r8, r2
   12ae4:	mov	r2, #0
   12ae8:	mov	r3, #0
   12aec:	add	r1, r0, #16
   12af0:	vst1.64	{d16-d17}, [r1]
   12af4:	mov	r1, #28
   12af8:	vst1.64	{d16-d17}, [r0], r1
   12afc:	movw	r1, #58202	; 0xe35a
   12b00:	vst1.32	{d16-d17}, [r0]
   12b04:	mov	r0, #1
   12b08:	movt	r1, #1
   12b0c:	str	r0, [sp, #40]	; 0x28
   12b10:	mov	r0, r9
   12b14:	str	r4, [sp, #28]
   12b18:	bl	15094 <flatcc_builder_start_buffer@@Base>
   12b1c:	sub	r0, r8, r4
   12b20:	cmp	r0, #2
   12b24:	blt	12b90 <test@@Base+0xd0>
   12b28:	ldrb	r0, [r4]
   12b2c:	cmp	r0, #32
   12b30:	bls	12b7c <test@@Base+0xbc>
   12b34:	mov	r6, r4
   12b38:	cmp	r6, r8
   12b3c:	beq	13d60 <test@@Base+0x12a0>
   12b40:	bcs	13da4 <test@@Base+0x12e4>
   12b44:	ldrb	r0, [r6]
   12b48:	cmp	r0, #123	; 0x7b
   12b4c:	bne	13da4 <test@@Base+0x12e4>
   12b50:	add	r1, r6, #1
   12b54:	sub	r0, r8, r1
   12b58:	cmp	r0, #2
   12b5c:	blt	12bc0 <test@@Base+0x100>
   12b60:	ldrb	r0, [r1]
   12b64:	cmp	r0, #32
   12b68:	bls	12bb0 <test@@Base+0xf0>
   12b6c:	mov	r6, r1
   12b70:	cmp	r6, r8
   12b74:	bne	12bd8 <test@@Base+0x118>
   12b78:	b	13d60 <test@@Base+0x12a0>
   12b7c:	bne	12b90 <test@@Base+0xd0>
   12b80:	mov	r6, r4
   12b84:	ldrb	r0, [r6, #1]!
   12b88:	cmp	r0, #32
   12b8c:	bhi	12ba4 <test@@Base+0xe4>
   12b90:	add	r0, sp, #24
   12b94:	mov	r1, r4
   12b98:	mov	r2, r8
   12b9c:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   12ba0:	mov	r6, r0
   12ba4:	cmp	r6, r8
   12ba8:	bne	12b40 <test@@Base+0x80>
   12bac:	b	13d60 <test@@Base+0x12a0>
   12bb0:	bne	12bc0 <test@@Base+0x100>
   12bb4:	ldrb	r0, [r6, #2]!
   12bb8:	cmp	r0, #32
   12bbc:	bhi	12bd0 <test@@Base+0x110>
   12bc0:	add	r0, sp, #24
   12bc4:	mov	r2, r8
   12bc8:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   12bcc:	mov	r6, r0
   12bd0:	cmp	r6, r8
   12bd4:	beq	13d60 <test@@Base+0x12a0>
   12bd8:	mov	r0, r9
   12bdc:	mov	r1, #11
   12be0:	bl	1668c <flatcc_builder_start_table@@Base>
   12be4:	add	r0, sp, #20
   12be8:	add	r4, sp, #24
   12bec:	str	r9, [sp, #16]
   12bf0:	add	r0, r0, #1
   12bf4:	str	r0, [sp, #8]
   12bf8:	cmp	r6, r8
   12bfc:	mov	r9, r8
   12c00:	beq	12c4c <test@@Base+0x18c>
   12c04:	ldrb	r0, [r6]
   12c08:	cmp	r0, #46	; 0x2e
   12c0c:	beq	12c24 <test@@Base+0x164>
   12c10:	cmp	r0, #34	; 0x22
   12c14:	bne	12c40 <test@@Base+0x180>
   12c18:	mov	r0, #0
   12c1c:	add	r9, r6, #1
   12c20:	b	12c48 <test@@Base+0x188>
   12c24:	mov	r0, r4
   12c28:	mov	r1, r6
   12c2c:	mov	r2, r8
   12c30:	mov	r3, #5
   12c34:	bl	19798 <flatcc_json_parser_set_error@@Base>
   12c38:	mov	r9, r0
   12c3c:	b	12c4c <test@@Base+0x18c>
   12c40:	mov	r0, #1
   12c44:	mov	r9, r6
   12c48:	str	r0, [sp, #36]	; 0x24
   12c4c:	sub	r3, r8, r9
   12c50:	mov	r0, #8
   12c54:	cmp	r3, #8
   12c58:	movcc	r0, r3
   12c5c:	and	r0, r0, #15
   12c60:	sub	r7, r0, #1
   12c64:	cmp	r7, #7
   12c68:	bhi	13d88 <test@@Base+0x12c8>
   12c6c:	add	r4, pc, #32
   12c70:	mov	sl, #0
   12c74:	mov	ip, #0
   12c78:	mov	lr, #0
   12c7c:	mov	r1, #0
   12c80:	mov	r6, #0
   12c84:	mov	r5, #0
   12c88:	mov	r2, #0
   12c8c:	mov	r0, #0
   12c90:	ldr	pc, [r4, r7, lsl #2]
   12c94:	strdeq	r2, [r1], -r8
   12c98:	strdeq	r2, [r1], -r0
   12c9c:	andeq	r2, r1, r8, ror #25
   12ca0:	andeq	r2, r1, r0, ror #25
   12ca4:	ldrdeq	r2, [r1], -r4
   12ca8:	andeq	r2, r1, r8, asr #25
   12cac:			; <UNDEFINED> instruction: 0x00012cb8
   12cb0:			; <UNDEFINED> instruction: 0x00012cb4
   12cb4:	ldrb	ip, [r9, #7]
   12cb8:	ldrb	r0, [r9, #6]
   12cbc:	mov	lr, sl
   12cc0:	orr	r0, ip, r0, lsl #8
   12cc4:	mov	sl, r0
   12cc8:	ldrb	r0, [r9, #5]
   12ccc:	mov	r1, lr
   12cd0:	orr	sl, sl, r0, lsl #16
   12cd4:	ldrb	r0, [r9, #4]
   12cd8:	mov	r6, r1
   12cdc:	orr	sl, sl, r0, lsl #24
   12ce0:	ldrb	r0, [r9, #3]
   12ce4:	orr	r5, r0, r6
   12ce8:	ldrb	r0, [r9, #2]
   12cec:	orr	r2, r5, r0, lsl #8
   12cf0:	ldrb	r0, [r9, #1]
   12cf4:	orr	r0, r2, r0, lsl #16
   12cf8:	mov	r1, r9
   12cfc:	cmp	r3, #8
   12d00:	movw	r7, #25455	; 0x636f
   12d04:	ldrb	r2, [r1], #8
   12d08:	movt	r7, #29541	; 0x7365
   12d0c:	orr	r3, r0, r2, lsl #24
   12d10:	mov	r0, sl
   12d14:	movw	r2, #0
   12d18:	movle	r1, r8
   12d1c:	bfc	r0, #0, #16
   12d20:	movt	r2, #28260	; 0x6e64
   12d24:	subs	r2, r0, r2
   12d28:	sbcs	r2, r3, r7
   12d2c:	bcs	12e4c <test@@Base+0x38c>
   12d30:	movw	r0, #29299	; 0x7273
   12d34:	and	r1, sl, #-16777216	; 0xff000000
   12d38:	add	r4, sp, #24
   12d3c:	movt	r0, #26217	; 0x6669
   12d40:	eor	r1, r1, #1946157056	; 0x74000000
   12d44:	eor	r0, r3, r0
   12d48:	orrs	r0, r1, r0
   12d4c:	bne	13d88 <test@@Base+0x12c8>
   12d50:	ldr	r0, [sp, #36]	; 0x24
   12d54:	add	r1, r9, #5
   12d58:	cmp	r0, #0
   12d5c:	beq	12ff8 <test@@Base+0x538>
   12d60:	cmp	r1, r8
   12d64:	mov	r3, r8
   12d68:	beq	13260 <test@@Base+0x7a0>
   12d6c:	ldrb	r3, [r1]
   12d70:	cmp	r3, #33	; 0x21
   12d74:	bcc	1325c <test@@Base+0x79c>
   12d78:	add	r0, r9, #6
   12d7c:	uxtb	r2, r3
   12d80:	cmp	r2, #46	; 0x2e
   12d84:	cmpne	r2, #95	; 0x5f
   12d88:	bne	12da8 <test@@Base+0x2e8>
   12d8c:	cmp	r8, r0
   12d90:	beq	1371c <test@@Base+0xc5c>
   12d94:	ldrb	r3, [r0], #1
   12d98:	add	r1, r1, #1
   12d9c:	cmp	r3, #33	; 0x21
   12da0:	bcs	12d7c <test@@Base+0x2bc>
   12da4:	b	13720 <test@@Base+0xc60>
   12da8:	sxtb	r7, r3
   12dac:	cmp	r7, #0
   12db0:	blt	12d8c <test@@Base+0x2cc>
   12db4:	sub	r7, r3, #48	; 0x30
   12db8:	uxtb	r7, r7
   12dbc:	cmp	r7, #9
   12dc0:	bls	12d8c <test@@Base+0x2cc>
   12dc4:	orr	r3, r3, #32
   12dc8:	sub	r3, r3, #97	; 0x61
   12dcc:	uxtb	r3, r3
   12dd0:	cmp	r3, #26
   12dd4:	bcc	12d8c <test@@Base+0x2cc>
   12dd8:	sub	r1, r0, #1
   12ddc:	cmp	r2, #46	; 0x2e
   12de0:	beq	13728 <test@@Base+0xc68>
   12de4:	mov	r3, r1
   12de8:	ldr	r9, [sp, #16]
   12dec:	sub	r0, r8, r3
   12df0:	cmp	r0, #2
   12df4:	blt	13894 <test@@Base+0xdd4>
   12df8:	ldrb	r0, [r3]
   12dfc:	cmp	r0, #32
   12e00:	bls	13194 <test@@Base+0x6d4>
   12e04:	mov	sl, r3
   12e08:	cmp	sl, r8
   12e0c:	beq	13d60 <test@@Base+0x12a0>
   12e10:	bcs	13db4 <test@@Base+0x12f4>
   12e14:	ldrb	r0, [sl]
   12e18:	cmp	r0, #58	; 0x3a
   12e1c:	bne	13db4 <test@@Base+0x12f4>
   12e20:	add	r1, sl, #1
   12e24:	sub	r0, r8, r1
   12e28:	cmp	r0, #2
   12e2c:	blt	131c4 <test@@Base+0x704>
   12e30:	ldrb	r0, [r1]
   12e34:	cmp	r0, #32
   12e38:	bls	131b4 <test@@Base+0x6f4>
   12e3c:	mov	sl, r1
   12e40:	cmp	sl, r8
   12e44:	bne	131dc <test@@Base+0x71c>
   12e48:	b	13d60 <test@@Base+0x12a0>
   12e4c:	movw	r2, #27764	; 0x6c74
   12e50:	movt	r2, #31349	; 0x7a75
   12e54:	cmp	r3, r2
   12e58:	bhi	12f38 <test@@Base+0x478>
   12e5c:	movw	r6, #29472	; 0x7320
   12e60:	movt	r6, #28260	; 0x6e64
   12e64:	subs	r2, sl, r6
   12e68:	sbcs	r2, r3, r7
   12e6c:	bcs	1304c <test@@Base+0x58c>
   12e70:	movw	r1, #0
   12e74:	movt	r1, #28260	; 0x6e64
   12e78:	eor	r0, r0, r1
   12e7c:	eor	r1, r3, r7
   12e80:	orrs	r0, r0, r1
   12e84:	bne	13d88 <test@@Base+0x12c8>
   12e88:	ldr	r0, [sp, #36]	; 0x24
   12e8c:	add	r1, r9, #6
   12e90:	cmp	r0, #0
   12e94:	beq	136c4 <test@@Base+0xc04>
   12e98:	cmp	r1, r8
   12e9c:	mov	r3, r8
   12ea0:	add	r4, sp, #24
   12ea4:	beq	13750 <test@@Base+0xc90>
   12ea8:	ldrb	r3, [r1]
   12eac:	cmp	r3, #33	; 0x21
   12eb0:	bcc	1374c <test@@Base+0xc8c>
   12eb4:	add	r0, r9, #7
   12eb8:	uxtb	r2, r3
   12ebc:	cmp	r2, #46	; 0x2e
   12ec0:	cmpne	r2, #95	; 0x5f
   12ec4:	bne	12ee4 <test@@Base+0x424>
   12ec8:	cmp	r8, r0
   12ecc:	beq	13974 <test@@Base+0xeb4>
   12ed0:	ldrb	r3, [r0], #1
   12ed4:	add	r1, r1, #1
   12ed8:	cmp	r3, #33	; 0x21
   12edc:	bcs	12eb8 <test@@Base+0x3f8>
   12ee0:	b	13978 <test@@Base+0xeb8>
   12ee4:	sxtb	r7, r3
   12ee8:	cmp	r7, #0
   12eec:	blt	12ec8 <test@@Base+0x408>
   12ef0:	sub	r7, r3, #48	; 0x30
   12ef4:	uxtb	r7, r7
   12ef8:	cmp	r7, #9
   12efc:	bls	12ec8 <test@@Base+0x408>
   12f00:	orr	r3, r3, #32
   12f04:	sub	r3, r3, #97	; 0x61
   12f08:	uxtb	r3, r3
   12f0c:	cmp	r3, #26
   12f10:	bcc	12ec8 <test@@Base+0x408>
   12f14:	sub	r1, r0, #1
   12f18:	cmp	r2, #46	; 0x2e
   12f1c:	beq	13980 <test@@Base+0xec0>
   12f20:	mov	r3, r1
   12f24:	ldr	r9, [sp, #16]
   12f28:	sub	r0, r8, r3
   12f2c:	cmp	r0, #2
   12f30:	bge	13760 <test@@Base+0xca0>
   12f34:	b	13a08 <test@@Base+0xf48>
   12f38:	movw	r0, #27765	; 0x6c75
   12f3c:	movt	r0, #31349	; 0x7a75
   12f40:	teq	r3, r0
   12f44:	bne	13d88 <test@@Base+0x12c8>
   12f48:	ldr	r0, [sp, #36]	; 0x24
   12f4c:	add	r1, r9, #4
   12f50:	cmp	r0, #0
   12f54:	beq	13274 <test@@Base+0x7b4>
   12f58:	cmp	r1, r8
   12f5c:	mov	r3, r8
   12f60:	add	r4, sp, #24
   12f64:	beq	13470 <test@@Base+0x9b0>
   12f68:	ldrb	r3, [r1]
   12f6c:	cmp	r3, #33	; 0x21
   12f70:	bcc	1346c <test@@Base+0x9ac>
   12f74:	add	r0, r9, #5
   12f78:	uxtb	r2, r3
   12f7c:	cmp	r2, #46	; 0x2e
   12f80:	cmpne	r2, #95	; 0x5f
   12f84:	bne	12fa4 <test@@Base+0x4e4>
   12f88:	cmp	r8, r0
   12f8c:	beq	1384c <test@@Base+0xd8c>
   12f90:	ldrb	r3, [r0], #1
   12f94:	add	r1, r1, #1
   12f98:	cmp	r3, #33	; 0x21
   12f9c:	bcs	12f78 <test@@Base+0x4b8>
   12fa0:	b	13850 <test@@Base+0xd90>
   12fa4:	sxtb	r7, r3
   12fa8:	cmp	r7, #0
   12fac:	blt	12f88 <test@@Base+0x4c8>
   12fb0:	sub	r7, r3, #48	; 0x30
   12fb4:	uxtb	r7, r7
   12fb8:	cmp	r7, #9
   12fbc:	bls	12f88 <test@@Base+0x4c8>
   12fc0:	orr	r3, r3, #32
   12fc4:	sub	r3, r3, #97	; 0x61
   12fc8:	uxtb	r3, r3
   12fcc:	cmp	r3, #26
   12fd0:	bcc	12f88 <test@@Base+0x4c8>
   12fd4:	sub	r1, r0, #1
   12fd8:	cmp	r2, #46	; 0x2e
   12fdc:	beq	13858 <test@@Base+0xd98>
   12fe0:	mov	r3, r1
   12fe4:	ldr	r9, [sp, #16]
   12fe8:	sub	r0, r8, r3
   12fec:	cmp	r0, #2
   12ff0:	bge	13480 <test@@Base+0x9c0>
   12ff4:	b	139bc <test@@Base+0xefc>
   12ff8:	cmp	r1, r8
   12ffc:	mov	r2, r8
   13000:	beq	1386c <test@@Base+0xdac>
   13004:	ldrb	r0, [r1]
   13008:	cmp	r0, #92	; 0x5c
   1300c:	beq	13028 <test@@Base+0x568>
   13010:	cmp	r0, #34	; 0x22
   13014:	beq	136ac <test@@Base+0xbec>
   13018:	add	r1, r1, #1
   1301c:	cmp	r1, r8
   13020:	bne	13004 <test@@Base+0x544>
   13024:	b	13044 <test@@Base+0x584>
   13028:	sub	r0, r8, r1
   1302c:	cmp	r0, #2
   13030:	blt	13868 <test@@Base+0xda8>
   13034:	add	r1, r1, #1
   13038:	add	r1, r1, #1
   1303c:	cmp	r1, r8
   13040:	bne	13004 <test@@Base+0x544>
   13044:	mov	r2, r8
   13048:	b	1386c <test@@Base+0xdac>
   1304c:	eor	r0, sl, r6
   13050:	eor	r2, r3, r7
   13054:	orrs	r0, r0, r2
   13058:	bne	13d88 <test@@Base+0x12c8>
   1305c:	sub	r0, r8, r1
   13060:	mov	r2, #8
   13064:	ldr	r9, [sp, #16]
   13068:	add	r4, sp, #24
   1306c:	cmp	r0, #8
   13070:	movcs	r0, r2
   13074:	and	r0, r0, #15
   13078:	sub	r2, r0, #1
   1307c:	cmp	r2, #7
   13080:	bhi	13f04 <test@@Base+0x1444>
   13084:	add	r3, pc, #4
   13088:	mov	r0, #0
   1308c:	ldr	pc, [r3, r2, lsl #2]
   13090:	andeq	r3, r1, r4, asr #1
   13094:	strheq	r3, [r1], -ip
   13098:	strheq	r3, [r1], -r4
   1309c:	strheq	r3, [r1], -r0
   130a0:	strheq	r3, [r1], -r0
   130a4:	strheq	r3, [r1], -r0
   130a8:	strheq	r3, [r1], -r0
   130ac:	strheq	r3, [r1], -r0
   130b0:	ldrb	r0, [r1, #3]
   130b4:	ldrb	r2, [r1, #2]
   130b8:	orr	r0, r0, r2, lsl #8
   130bc:	ldrb	r2, [r1, #1]
   130c0:	orr	r0, r0, r2, lsl #16
   130c4:	ldrb	r2, [r1]
   130c8:	orr	r0, r0, r2, lsl #24
   130cc:	movw	r2, #26227	; 0x6673
   130d0:	movt	r2, #27749	; 0x6c65
   130d4:	cmp	r0, r2
   130d8:	bhi	133b4 <test@@Base+0x8f4>
   130dc:	movw	r2, #24932	; 0x6164
   130e0:	movt	r2, #27749	; 0x6c65
   130e4:	teq	r0, r2
   130e8:	bne	13f04 <test@@Base+0x1444>
   130ec:	ldr	r0, [sp, #36]	; 0x24
   130f0:	add	r2, r1, #4
   130f4:	cmp	r0, #0
   130f8:	beq	138b4 <test@@Base+0xdf4>
   130fc:	cmp	r2, r8
   13100:	mov	r3, r8
   13104:	beq	13aa8 <test@@Base+0xfe8>
   13108:	ldrb	r3, [r2]
   1310c:	cmp	r3, #33	; 0x21
   13110:	bcc	13180 <test@@Base+0x6c0>
   13114:	add	r0, r1, #5
   13118:	uxtb	r1, r3
   1311c:	cmp	r1, #46	; 0x2e
   13120:	cmpne	r1, #95	; 0x5f
   13124:	bne	13144 <test@@Base+0x684>
   13128:	cmp	r8, r0
   1312c:	beq	13a50 <test@@Base+0xf90>
   13130:	ldrb	r3, [r0], #1
   13134:	add	r2, r2, #1
   13138:	cmp	r3, #33	; 0x21
   1313c:	bcs	13118 <test@@Base+0x658>
   13140:	b	13a54 <test@@Base+0xf94>
   13144:	sxtb	r7, r3
   13148:	cmp	r7, #0
   1314c:	blt	13128 <test@@Base+0x668>
   13150:	sub	r7, r3, #48	; 0x30
   13154:	uxtb	r7, r7
   13158:	cmp	r7, #9
   1315c:	bls	13128 <test@@Base+0x668>
   13160:	orr	r3, r3, #32
   13164:	sub	r3, r3, #97	; 0x61
   13168:	uxtb	r3, r3
   1316c:	cmp	r3, #26
   13170:	bcc	13128 <test@@Base+0x668>
   13174:	sub	r2, r0, #1
   13178:	cmp	r1, #46	; 0x2e
   1317c:	beq	13a5c <test@@Base+0xf9c>
   13180:	mov	r3, r2
   13184:	sub	r0, r8, r3
   13188:	cmp	r0, #2
   1318c:	bge	13ab4 <test@@Base+0xff4>
   13190:	b	13ae4 <test@@Base+0x1024>
   13194:	bne	13894 <test@@Base+0xdd4>
   13198:	mov	sl, r3
   1319c:	ldrb	r0, [sl, #1]!
   131a0:	cmp	r0, #32
   131a4:	bls	13894 <test@@Base+0xdd4>
   131a8:	cmp	sl, r8
   131ac:	bne	12e10 <test@@Base+0x350>
   131b0:	b	13d60 <test@@Base+0x12a0>
   131b4:	bne	131c4 <test@@Base+0x704>
   131b8:	ldrb	r0, [sl, #2]!
   131bc:	cmp	r0, #32
   131c0:	bhi	131d4 <test@@Base+0x714>
   131c4:	mov	r0, r4
   131c8:	mov	r2, r8
   131cc:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   131d0:	mov	sl, r0
   131d4:	cmp	sl, r8
   131d8:	beq	13d60 <test@@Base+0x12a0>
   131dc:	mov	r0, r9
   131e0:	mov	r1, #0
   131e4:	mov	r2, #1
   131e8:	mov	r3, #1
   131ec:	bl	179fc <flatcc_builder_table_add@@Base>
   131f0:	cmp	r0, #0
   131f4:	beq	13e80 <test@@Base+0x13c0>
   131f8:	mov	r6, r0
   131fc:	mov	r0, #0
   13200:	mov	r1, sl
   13204:	mov	r2, r8
   13208:	sub	r3, fp, #44	; 0x2c
   1320c:	str	r0, [fp, #-36]	; 0xffffffdc
   13210:	str	r0, [fp, #-40]	; 0xffffffd8
   13214:	str	r0, [fp, #-44]	; 0xffffffd4
   13218:	strb	r0, [r6]
   1321c:	sub	r0, fp, #40	; 0x28
   13220:	str	r0, [sp]
   13224:	mov	r0, r4
   13228:	bl	1bcec <flatcc_json_parser_integer@@Base>
   1322c:	cmp	r0, sl
   13230:	mov	r1, sl
   13234:	beq	13740 <test@@Base+0xc80>
   13238:	mov	r2, r0
   1323c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13240:	cmp	r0, #0
   13244:	beq	132cc <test@@Base+0x80c>
   13248:	mov	r1, r2
   1324c:	mov	r0, r4
   13250:	mov	r2, r8
   13254:	mov	r3, #8
   13258:	b	132f0 <test@@Base+0x830>
   1325c:	mov	r3, r1
   13260:	ldr	r9, [sp, #16]
   13264:	sub	r0, r8, r3
   13268:	cmp	r0, #2
   1326c:	blt	13894 <test@@Base+0xdd4>
   13270:	b	12df8 <test@@Base+0x338>
   13274:	cmp	r1, r8
   13278:	mov	r2, r8
   1327c:	add	r4, sp, #24
   13280:	beq	13994 <test@@Base+0xed4>
   13284:	ldrb	r0, [r1]
   13288:	cmp	r0, #92	; 0x5c
   1328c:	beq	132a8 <test@@Base+0x7e8>
   13290:	cmp	r0, #34	; 0x22
   13294:	beq	13834 <test@@Base+0xd74>
   13298:	add	r1, r1, #1
   1329c:	cmp	r1, r8
   132a0:	bne	13284 <test@@Base+0x7c4>
   132a4:	b	132c4 <test@@Base+0x804>
   132a8:	sub	r0, r8, r1
   132ac:	cmp	r0, #2
   132b0:	blt	13990 <test@@Base+0xed0>
   132b4:	add	r1, r1, #1
   132b8:	add	r1, r1, #1
   132bc:	cmp	r1, r8
   132c0:	bne	13284 <test@@Base+0x7c4>
   132c4:	mov	r2, r8
   132c8:	b	13994 <test@@Base+0xed4>
   132cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   132d0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   132d4:	subs	r3, r0, #256	; 0x100
   132d8:	sbcs	r1, r1, #0
   132dc:	bcc	13738 <test@@Base+0xc78>
   132e0:	mov	r1, r2
   132e4:	mov	r0, r4
   132e8:	mov	r2, r8
   132ec:	mov	r3, #7
   132f0:	bl	19798 <flatcc_json_parser_set_error@@Base>
   132f4:	mov	r1, r0
   132f8:	cmp	sl, r1
   132fc:	beq	13e80 <test@@Base+0x13c0>
   13300:	sub	r0, r8, r1
   13304:	cmp	r0, #2
   13308:	blt	1364c <test@@Base+0xb8c>
   1330c:	ldrb	r0, [r1]
   13310:	cmp	r0, #32
   13314:	bls	13368 <test@@Base+0x8a8>
   13318:	mov	r6, r1
   1331c:	cmp	r6, r8
   13320:	beq	13d60 <test@@Base+0x12a0>
   13324:	ldrb	r0, [r6]
   13328:	cmp	r0, #44	; 0x2c
   1332c:	bne	13de8 <test@@Base+0x1328>
   13330:	add	r1, r6, #1
   13334:	sub	r0, r8, r1
   13338:	cmp	r0, #2
   1333c:	blt	13398 <test@@Base+0x8d8>
   13340:	ldrb	r0, [r1]
   13344:	cmp	r0, #32
   13348:	bls	13388 <test@@Base+0x8c8>
   1334c:	mov	r6, r1
   13350:	cmp	r6, r8
   13354:	beq	13d60 <test@@Base+0x12a0>
   13358:	ldrb	r0, [r6]
   1335c:	cmp	r0, #125	; 0x7d
   13360:	bne	12bf8 <test@@Base+0x138>
   13364:	b	13de4 <test@@Base+0x1324>
   13368:	bne	1364c <test@@Base+0xb8c>
   1336c:	mov	r6, r1
   13370:	ldrb	r0, [r6, #1]!
   13374:	cmp	r0, #32
   13378:	bls	1364c <test@@Base+0xb8c>
   1337c:	cmp	r6, r8
   13380:	bne	13324 <test@@Base+0x864>
   13384:	b	13d60 <test@@Base+0x12a0>
   13388:	bne	13398 <test@@Base+0x8d8>
   1338c:	ldrb	r0, [r6, #2]!
   13390:	cmp	r0, #32
   13394:	bhi	133a8 <test@@Base+0x8e8>
   13398:	mov	r0, r4
   1339c:	mov	r2, r8
   133a0:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   133a4:	mov	r6, r0
   133a8:	cmp	r6, r8
   133ac:	bne	13358 <test@@Base+0x898>
   133b0:	b	13d60 <test@@Base+0x12a0>
   133b4:	movw	r2, #26228	; 0x6674
   133b8:	movt	r2, #27749	; 0x6c65
   133bc:	teq	r0, r2
   133c0:	bne	13f04 <test@@Base+0x1444>
   133c4:	ldr	r0, [sp, #36]	; 0x24
   133c8:	add	r2, r1, #4
   133cc:	cmp	r0, #0
   133d0:	beq	13908 <test@@Base+0xe48>
   133d4:	cmp	r2, r8
   133d8:	mov	r3, r8
   133dc:	beq	13c20 <test@@Base+0x1160>
   133e0:	ldrb	r3, [r2]
   133e4:	cmp	r3, #33	; 0x21
   133e8:	bcc	13458 <test@@Base+0x998>
   133ec:	add	r0, r1, #5
   133f0:	uxtb	r1, r3
   133f4:	cmp	r1, #46	; 0x2e
   133f8:	cmpne	r1, #95	; 0x5f
   133fc:	bne	1341c <test@@Base+0x95c>
   13400:	cmp	r8, r0
   13404:	beq	13a70 <test@@Base+0xfb0>
   13408:	ldrb	r3, [r0], #1
   1340c:	add	r2, r2, #1
   13410:	cmp	r3, #33	; 0x21
   13414:	bcs	133f0 <test@@Base+0x930>
   13418:	b	13a74 <test@@Base+0xfb4>
   1341c:	sxtb	r7, r3
   13420:	cmp	r7, #0
   13424:	blt	13400 <test@@Base+0x940>
   13428:	sub	r7, r3, #48	; 0x30
   1342c:	uxtb	r7, r7
   13430:	cmp	r7, #9
   13434:	bls	13400 <test@@Base+0x940>
   13438:	orr	r3, r3, #32
   1343c:	sub	r3, r3, #97	; 0x61
   13440:	uxtb	r3, r3
   13444:	cmp	r3, #26
   13448:	bcc	13400 <test@@Base+0x940>
   1344c:	sub	r2, r0, #1
   13450:	cmp	r1, #46	; 0x2e
   13454:	beq	13a7c <test@@Base+0xfbc>
   13458:	mov	r3, r2
   1345c:	sub	r0, r8, r3
   13460:	cmp	r0, #2
   13464:	bge	13c2c <test@@Base+0x116c>
   13468:	b	13c5c <test@@Base+0x119c>
   1346c:	mov	r3, r1
   13470:	ldr	r9, [sp, #16]
   13474:	sub	r0, r8, r3
   13478:	cmp	r0, #2
   1347c:	blt	139bc <test@@Base+0xefc>
   13480:	ldrb	r0, [r3]
   13484:	cmp	r0, #32
   13488:	bls	13668 <test@@Base+0xba8>
   1348c:	mov	r6, r3
   13490:	cmp	r6, r8
   13494:	beq	13d60 <test@@Base+0x12a0>
   13498:	bcs	13e4c <test@@Base+0x138c>
   1349c:	ldrb	r0, [r6]
   134a0:	cmp	r0, #58	; 0x3a
   134a4:	bne	13e4c <test@@Base+0x138c>
   134a8:	add	r1, r6, #1
   134ac:	sub	r0, r8, r1
   134b0:	cmp	r0, #2
   134b4:	blt	13690 <test@@Base+0xbd0>
   134b8:	ldrb	r0, [r1]
   134bc:	cmp	r0, #32
   134c0:	bls	13680 <test@@Base+0xbc0>
   134c4:	mov	r6, r1
   134c8:	cmp	r6, r8
   134cc:	beq	13d60 <test@@Base+0x12a0>
   134d0:	ldrb	r0, [r6]
   134d4:	cmp	r0, #34	; 0x22
   134d8:	bne	134e4 <test@@Base+0xa24>
   134dc:	add	r6, r6, #1
   134e0:	b	134fc <test@@Base+0xa3c>
   134e4:	mov	r0, r4
   134e8:	mov	r1, r6
   134ec:	mov	r2, r8
   134f0:	mov	r3, #16
   134f4:	bl	19798 <flatcc_json_parser_set_error@@Base>
   134f8:	mov	r6, r0
   134fc:	mov	r0, r4
   13500:	mov	r1, r6
   13504:	mov	r2, r8
   13508:	bl	197d0 <flatcc_json_parser_string_part@@Base>
   1350c:	cmp	r0, r8
   13510:	beq	13ddc <test@@Base+0x131c>
   13514:	mov	sl, r0
   13518:	ldrb	r0, [r0]
   1351c:	cmp	r0, #34	; 0x22
   13520:	bne	13544 <test@@Base+0xa84>
   13524:	sub	r2, sl, r6
   13528:	mov	r0, r9
   1352c:	mov	r1, r6
   13530:	bl	18638 <flatcc_builder_create_string@@Base>
   13534:	mov	r6, r0
   13538:	cmp	r0, #0
   1353c:	bne	135e8 <test@@Base+0xb28>
   13540:	b	13e80 <test@@Base+0x13c0>
   13544:	mov	r0, r9
   13548:	bl	164f0 <flatcc_builder_start_string@@Base>
   1354c:	mov	r0, r9
   13550:	sub	r9, sl, r6
   13554:	mov	r1, r9
   13558:	bl	15c4c <flatcc_builder_extend_string@@Base>
   1355c:	cmp	r0, #0
   13560:	beq	13f68 <test@@Base+0x14a8>
   13564:	mov	r1, r6
   13568:	mov	r2, r9
   1356c:	bl	12904 <memcpy@plt>
   13570:	ldr	r9, [sp, #16]
   13574:	mov	r0, r4
   13578:	mov	r1, sl
   1357c:	mov	r2, r8
   13580:	add	r3, sp, #20
   13584:	bl	19980 <flatcc_json_parser_string_escape@@Base>
   13588:	ldrb	r2, [sp, #20]
   1358c:	ldr	r1, [sp, #8]
   13590:	mov	r6, r0
   13594:	mov	r0, r9
   13598:	bl	15d60 <flatcc_builder_append_string@@Base>
   1359c:	mov	r0, r4
   135a0:	mov	r1, r6
   135a4:	mov	r2, r8
   135a8:	bl	197d0 <flatcc_json_parser_string_part@@Base>
   135ac:	cmp	r0, r8
   135b0:	beq	13ddc <test@@Base+0x131c>
   135b4:	mov	sl, r0
   135b8:	sub	r2, r0, r6
   135bc:	mov	r0, r9
   135c0:	mov	r1, r6
   135c4:	bl	15d60 <flatcc_builder_append_string@@Base>
   135c8:	ldrb	r0, [sl]
   135cc:	cmp	r0, #34	; 0x22
   135d0:	bne	13574 <test@@Base+0xab4>
   135d4:	mov	r0, r9
   135d8:	bl	187a4 <flatcc_builder_end_string@@Base>
   135dc:	mov	r6, r0
   135e0:	cmp	r0, #0
   135e4:	beq	13e80 <test@@Base+0x13c0>
   135e8:	mov	r0, r9
   135ec:	mov	r1, #10
   135f0:	bl	1786c <flatcc_builder_table_add_offset@@Base>
   135f4:	cmp	r0, #0
   135f8:	beq	13e80 <test@@Base+0x13c0>
   135fc:	cmp	sl, r8
   13600:	str	r6, [r0]
   13604:	beq	13628 <test@@Base+0xb68>
   13608:	ldrb	r0, [sl]
   1360c:	cmp	r0, #34	; 0x22
   13610:	bne	13628 <test@@Base+0xb68>
   13614:	add	r1, sl, #1
   13618:	sub	r0, r8, r1
   1361c:	cmp	r0, #2
   13620:	bge	1330c <test@@Base+0x84c>
   13624:	b	1364c <test@@Base+0xb8c>
   13628:	mov	r0, r4
   1362c:	mov	r1, sl
   13630:	mov	r2, r8
   13634:	mov	r3, #20
   13638:	bl	19798 <flatcc_json_parser_set_error@@Base>
   1363c:	mov	r1, r0
   13640:	sub	r0, r8, r1
   13644:	cmp	r0, #2
   13648:	bge	1330c <test@@Base+0x84c>
   1364c:	mov	r0, r4
   13650:	mov	r2, r8
   13654:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   13658:	mov	r6, r0
   1365c:	cmp	r6, r8
   13660:	bne	13324 <test@@Base+0x864>
   13664:	b	13d60 <test@@Base+0x12a0>
   13668:	bne	139bc <test@@Base+0xefc>
   1366c:	mov	r6, r3
   13670:	ldrb	r0, [r6, #1]!
   13674:	cmp	r0, #32
   13678:	bls	139bc <test@@Base+0xefc>
   1367c:	b	139d0 <test@@Base+0xf10>
   13680:	bne	13690 <test@@Base+0xbd0>
   13684:	ldrb	r0, [r6, #2]!
   13688:	cmp	r0, #32
   1368c:	bhi	136a0 <test@@Base+0xbe0>
   13690:	mov	r0, r4
   13694:	mov	r2, r8
   13698:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1369c:	mov	r6, r0
   136a0:	cmp	r6, r8
   136a4:	bne	134d0 <test@@Base+0xa10>
   136a8:	b	13d60 <test@@Base+0x12a0>
   136ac:	add	r3, r1, #1
   136b0:	ldr	r9, [sp, #16]
   136b4:	sub	r0, r8, r3
   136b8:	cmp	r0, #2
   136bc:	bge	12df8 <test@@Base+0x338>
   136c0:	b	13894 <test@@Base+0xdd4>
   136c4:	cmp	r1, r8
   136c8:	mov	r2, r8
   136cc:	add	r4, sp, #24
   136d0:	beq	139e0 <test@@Base+0xf20>
   136d4:	ldrb	r0, [r1]
   136d8:	cmp	r0, #92	; 0x5c
   136dc:	beq	136f8 <test@@Base+0xc38>
   136e0:	cmp	r0, #34	; 0x22
   136e4:	beq	1395c <test@@Base+0xe9c>
   136e8:	add	r1, r1, #1
   136ec:	cmp	r1, r8
   136f0:	bne	136d4 <test@@Base+0xc14>
   136f4:	b	13714 <test@@Base+0xc54>
   136f8:	sub	r0, r8, r1
   136fc:	cmp	r0, #2
   13700:	blt	139dc <test@@Base+0xf1c>
   13704:	add	r1, r1, #1
   13708:	add	r1, r1, #1
   1370c:	cmp	r1, r8
   13710:	bne	136d4 <test@@Base+0xc14>
   13714:	mov	r2, r8
   13718:	b	139e0 <test@@Base+0xf20>
   1371c:	mov	r1, r8
   13720:	cmp	r2, #46	; 0x2e
   13724:	bne	12de4 <test@@Base+0x324>
   13728:	mov	r0, r4
   1372c:	mov	r2, r8
   13730:	mov	r3, #5
   13734:	b	1387c <test@@Base+0xdbc>
   13738:	strb	r0, [r6]
   1373c:	mov	r1, r2
   13740:	cmp	sl, r1
   13744:	bne	13300 <test@@Base+0x840>
   13748:	b	13e80 <test@@Base+0x13c0>
   1374c:	mov	r3, r1
   13750:	ldr	r9, [sp, #16]
   13754:	sub	r0, r8, r3
   13758:	cmp	r0, #2
   1375c:	blt	13a08 <test@@Base+0xf48>
   13760:	ldrb	r0, [r3]
   13764:	cmp	r0, #32
   13768:	bls	137b4 <test@@Base+0xcf4>
   1376c:	mov	sl, r3
   13770:	cmp	sl, r8
   13774:	beq	13d60 <test@@Base+0x12a0>
   13778:	bcs	13db4 <test@@Base+0x12f4>
   1377c:	ldrb	r0, [sl]
   13780:	cmp	r0, #58	; 0x3a
   13784:	bne	13db4 <test@@Base+0x12f4>
   13788:	add	r1, sl, #1
   1378c:	sub	r0, r8, r1
   13790:	cmp	r0, #2
   13794:	blt	137dc <test@@Base+0xd1c>
   13798:	ldrb	r0, [r1]
   1379c:	cmp	r0, #32
   137a0:	bls	137cc <test@@Base+0xd0c>
   137a4:	mov	sl, r1
   137a8:	cmp	sl, r8
   137ac:	bne	137f4 <test@@Base+0xd34>
   137b0:	b	13d60 <test@@Base+0x12a0>
   137b4:	bne	13a08 <test@@Base+0xf48>
   137b8:	mov	sl, r3
   137bc:	ldrb	r0, [sl, #1]!
   137c0:	cmp	r0, #32
   137c4:	bls	13a08 <test@@Base+0xf48>
   137c8:	b	13a1c <test@@Base+0xf5c>
   137cc:	bne	137dc <test@@Base+0xd1c>
   137d0:	ldrb	r0, [sl, #2]!
   137d4:	cmp	r0, #32
   137d8:	bhi	137ec <test@@Base+0xd2c>
   137dc:	mov	r0, r4
   137e0:	mov	r2, r8
   137e4:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   137e8:	mov	sl, r0
   137ec:	cmp	sl, r8
   137f0:	beq	13d60 <test@@Base+0x12a0>
   137f4:	mov	r0, r9
   137f8:	mov	r1, #1
   137fc:	mov	r2, #8
   13800:	mov	r3, #8
   13804:	bl	179fc <flatcc_builder_table_add@@Base>
   13808:	cmp	r0, #0
   1380c:	beq	13e80 <test@@Base+0x13c0>
   13810:	mov	r3, r0
   13814:	mov	r0, r4
   13818:	mov	r1, sl
   1381c:	mov	r2, r8
   13820:	bl	1b150 <flatcc_json_parser_double@@Base>
   13824:	mov	r1, r0
   13828:	cmp	sl, r0
   1382c:	bne	13300 <test@@Base+0x840>
   13830:	b	13e80 <test@@Base+0x13c0>
   13834:	add	r3, r1, #1
   13838:	ldr	r9, [sp, #16]
   1383c:	sub	r0, r8, r3
   13840:	cmp	r0, #2
   13844:	bge	13480 <test@@Base+0x9c0>
   13848:	b	139bc <test@@Base+0xefc>
   1384c:	mov	r1, r8
   13850:	cmp	r2, #46	; 0x2e
   13854:	bne	12fe0 <test@@Base+0x520>
   13858:	mov	r0, r4
   1385c:	mov	r2, r8
   13860:	mov	r3, #5
   13864:	b	139a4 <test@@Base+0xee4>
   13868:	mov	r2, r1
   1386c:	mov	r1, r2
   13870:	mov	r0, r4
   13874:	mov	r2, r8
   13878:	mov	r3, #20
   1387c:	bl	19798 <flatcc_json_parser_set_error@@Base>
   13880:	mov	r3, r0
   13884:	ldr	r9, [sp, #16]
   13888:	sub	r0, r8, r3
   1388c:	cmp	r0, #2
   13890:	bge	12df8 <test@@Base+0x338>
   13894:	mov	r0, r4
   13898:	mov	r1, r3
   1389c:	mov	r2, r8
   138a0:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   138a4:	mov	sl, r0
   138a8:	cmp	sl, r8
   138ac:	bne	12e10 <test@@Base+0x350>
   138b0:	b	13d60 <test@@Base+0x12a0>
   138b4:	cmp	r2, r8
   138b8:	mov	r1, r8
   138bc:	beq	13a94 <test@@Base+0xfd4>
   138c0:	ldrb	r0, [r2]
   138c4:	cmp	r0, #92	; 0x5c
   138c8:	beq	138e4 <test@@Base+0xe24>
   138cc:	cmp	r0, #34	; 0x22
   138d0:	beq	13a28 <test@@Base+0xf68>
   138d4:	add	r2, r2, #1
   138d8:	cmp	r2, r8
   138dc:	bne	138c0 <test@@Base+0xe00>
   138e0:	b	13900 <test@@Base+0xe40>
   138e4:	sub	r0, r8, r2
   138e8:	cmp	r0, #2
   138ec:	blt	13a90 <test@@Base+0xfd0>
   138f0:	add	r2, r2, #1
   138f4:	add	r2, r2, #1
   138f8:	cmp	r2, r8
   138fc:	bne	138c0 <test@@Base+0xe00>
   13900:	mov	r1, r8
   13904:	b	13a94 <test@@Base+0xfd4>
   13908:	cmp	r2, r8
   1390c:	mov	r1, r8
   13910:	beq	13c0c <test@@Base+0x114c>
   13914:	ldrb	r0, [r2]
   13918:	cmp	r0, #92	; 0x5c
   1391c:	beq	13938 <test@@Base+0xe78>
   13920:	cmp	r0, #34	; 0x22
   13924:	beq	13a3c <test@@Base+0xf7c>
   13928:	add	r2, r2, #1
   1392c:	cmp	r2, r8
   13930:	bne	13914 <test@@Base+0xe54>
   13934:	b	13954 <test@@Base+0xe94>
   13938:	sub	r0, r8, r2
   1393c:	cmp	r0, #2
   13940:	blt	13c08 <test@@Base+0x1148>
   13944:	add	r2, r2, #1
   13948:	add	r2, r2, #1
   1394c:	cmp	r2, r8
   13950:	bne	13914 <test@@Base+0xe54>
   13954:	mov	r1, r8
   13958:	b	13c0c <test@@Base+0x114c>
   1395c:	add	r3, r1, #1
   13960:	ldr	r9, [sp, #16]
   13964:	sub	r0, r8, r3
   13968:	cmp	r0, #2
   1396c:	bge	13760 <test@@Base+0xca0>
   13970:	b	13a08 <test@@Base+0xf48>
   13974:	mov	r1, r8
   13978:	cmp	r2, #46	; 0x2e
   1397c:	bne	12f20 <test@@Base+0x460>
   13980:	mov	r0, r4
   13984:	mov	r2, r8
   13988:	mov	r3, #5
   1398c:	b	139f0 <test@@Base+0xf30>
   13990:	mov	r2, r1
   13994:	mov	r1, r2
   13998:	mov	r0, r4
   1399c:	mov	r2, r8
   139a0:	mov	r3, #20
   139a4:	bl	19798 <flatcc_json_parser_set_error@@Base>
   139a8:	mov	r3, r0
   139ac:	ldr	r9, [sp, #16]
   139b0:	sub	r0, r8, r3
   139b4:	cmp	r0, #2
   139b8:	bge	13480 <test@@Base+0x9c0>
   139bc:	mov	r0, r4
   139c0:	mov	r1, r3
   139c4:	mov	r2, r8
   139c8:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   139cc:	mov	r6, r0
   139d0:	cmp	r6, r8
   139d4:	bne	13498 <test@@Base+0x9d8>
   139d8:	b	13d60 <test@@Base+0x12a0>
   139dc:	mov	r2, r1
   139e0:	mov	r1, r2
   139e4:	mov	r0, r4
   139e8:	mov	r2, r8
   139ec:	mov	r3, #20
   139f0:	bl	19798 <flatcc_json_parser_set_error@@Base>
   139f4:	mov	r3, r0
   139f8:	ldr	r9, [sp, #16]
   139fc:	sub	r0, r8, r3
   13a00:	cmp	r0, #2
   13a04:	bge	13760 <test@@Base+0xca0>
   13a08:	mov	r0, r4
   13a0c:	mov	r1, r3
   13a10:	mov	r2, r8
   13a14:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   13a18:	mov	sl, r0
   13a1c:	cmp	sl, r8
   13a20:	bne	13778 <test@@Base+0xcb8>
   13a24:	b	13d60 <test@@Base+0x12a0>
   13a28:	add	r3, r2, #1
   13a2c:	sub	r0, r8, r3
   13a30:	cmp	r0, #2
   13a34:	bge	13ab4 <test@@Base+0xff4>
   13a38:	b	13ae4 <test@@Base+0x1024>
   13a3c:	add	r3, r2, #1
   13a40:	sub	r0, r8, r3
   13a44:	cmp	r0, #2
   13a48:	bge	13c2c <test@@Base+0x116c>
   13a4c:	b	13c5c <test@@Base+0x119c>
   13a50:	mov	r2, r8
   13a54:	cmp	r1, #46	; 0x2e
   13a58:	bne	13180 <test@@Base+0x6c0>
   13a5c:	mov	r1, r2
   13a60:	mov	r0, r4
   13a64:	mov	r2, r8
   13a68:	mov	r3, #5
   13a6c:	b	13aa0 <test@@Base+0xfe0>
   13a70:	mov	r2, r8
   13a74:	cmp	r1, #46	; 0x2e
   13a78:	bne	13458 <test@@Base+0x998>
   13a7c:	mov	r1, r2
   13a80:	mov	r0, r4
   13a84:	mov	r2, r8
   13a88:	mov	r3, #5
   13a8c:	b	13c18 <test@@Base+0x1158>
   13a90:	mov	r1, r2
   13a94:	mov	r0, r4
   13a98:	mov	r2, r8
   13a9c:	mov	r3, #20
   13aa0:	bl	19798 <flatcc_json_parser_set_error@@Base>
   13aa4:	mov	r3, r0
   13aa8:	sub	r0, r8, r3
   13aac:	cmp	r0, #2
   13ab0:	blt	13ae4 <test@@Base+0x1024>
   13ab4:	ldrb	r0, [r3]
   13ab8:	cmp	r0, #32
   13abc:	bls	13ad0 <test@@Base+0x1010>
   13ac0:	mov	sl, r3
   13ac4:	cmp	sl, r8
   13ac8:	bne	13b00 <test@@Base+0x1040>
   13acc:	b	13d60 <test@@Base+0x12a0>
   13ad0:	bne	13ae4 <test@@Base+0x1024>
   13ad4:	mov	sl, r3
   13ad8:	ldrb	r0, [sl, #1]!
   13adc:	cmp	r0, #32
   13ae0:	bhi	13af8 <test@@Base+0x1038>
   13ae4:	mov	r0, r4
   13ae8:	mov	r1, r3
   13aec:	mov	r2, r8
   13af0:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   13af4:	mov	sl, r0
   13af8:	cmp	sl, r8
   13afc:	beq	13d60 <test@@Base+0x12a0>
   13b00:	bcs	13db4 <test@@Base+0x12f4>
   13b04:	ldrb	r0, [sl]
   13b08:	cmp	r0, #58	; 0x3a
   13b0c:	bne	13db4 <test@@Base+0x12f4>
   13b10:	add	r1, sl, #1
   13b14:	sub	r0, r8, r1
   13b18:	cmp	r0, #2
   13b1c:	blt	13b4c <test@@Base+0x108c>
   13b20:	ldrb	r0, [r1]
   13b24:	cmp	r0, #32
   13b28:	bls	13b3c <test@@Base+0x107c>
   13b2c:	mov	sl, r1
   13b30:	cmp	sl, r8
   13b34:	bne	13b64 <test@@Base+0x10a4>
   13b38:	b	13d60 <test@@Base+0x12a0>
   13b3c:	bne	13b4c <test@@Base+0x108c>
   13b40:	ldrb	r0, [sl, #2]!
   13b44:	cmp	r0, #32
   13b48:	bhi	13b5c <test@@Base+0x109c>
   13b4c:	mov	r0, r4
   13b50:	mov	r2, r8
   13b54:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   13b58:	mov	sl, r0
   13b5c:	cmp	sl, r8
   13b60:	beq	13d60 <test@@Base+0x12a0>
   13b64:	mov	r0, r9
   13b68:	mov	r1, #3
   13b6c:	mov	r2, #8
   13b70:	mov	r3, #8
   13b74:	bl	179fc <flatcc_builder_table_add@@Base>
   13b78:	cmp	r0, #0
   13b7c:	beq	13e80 <test@@Base+0x13c0>
   13b80:	mov	r6, r0
   13b84:	mov	r0, #0
   13b88:	mov	r1, sl
   13b8c:	mov	r2, r8
   13b90:	sub	r3, fp, #44	; 0x2c
   13b94:	str	r0, [fp, #-36]	; 0xffffffdc
   13b98:	str	r0, [fp, #-40]	; 0xffffffd8
   13b9c:	str	r0, [fp, #-44]	; 0xffffffd4
   13ba0:	str	r0, [r6]
   13ba4:	str	r0, [r6, #4]
   13ba8:	sub	r0, fp, #40	; 0x28
   13bac:	str	r0, [sp]
   13bb0:	mov	r0, r4
   13bb4:	bl	1bcec <flatcc_json_parser_integer@@Base>
   13bb8:	cmp	r0, sl
   13bbc:	mov	r1, sl
   13bc0:	beq	13740 <test@@Base+0xc80>
   13bc4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13bc8:	mov	r2, r0
   13bcc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13bd0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13bd4:	cmp	r3, #0
   13bd8:	beq	13bf8 <test@@Base+0x1138>
   13bdc:	subs	r3, r0, #1
   13be0:	sbcs	r3, r1, #-2147483648	; 0x80000000
   13be4:	bcs	13248 <test@@Base+0x788>
   13be8:	rsbs	r0, r0, #0
   13bec:	rsc	r1, r1, #0
   13bf0:	strd	r0, [r6]
   13bf4:	b	1373c <test@@Base+0xc7c>
   13bf8:	cmn	r1, #1
   13bfc:	ble	132e0 <test@@Base+0x820>
   13c00:	strd	r0, [r6]
   13c04:	b	1373c <test@@Base+0xc7c>
   13c08:	mov	r1, r2
   13c0c:	mov	r0, r4
   13c10:	mov	r2, r8
   13c14:	mov	r3, #20
   13c18:	bl	19798 <flatcc_json_parser_set_error@@Base>
   13c1c:	mov	r3, r0
   13c20:	sub	r0, r8, r3
   13c24:	cmp	r0, #2
   13c28:	blt	13c5c <test@@Base+0x119c>
   13c2c:	ldrb	r0, [r3]
   13c30:	cmp	r0, #32
   13c34:	bls	13c48 <test@@Base+0x1188>
   13c38:	mov	sl, r3
   13c3c:	cmp	sl, r8
   13c40:	bne	13c78 <test@@Base+0x11b8>
   13c44:	b	13d60 <test@@Base+0x12a0>
   13c48:	bne	13c5c <test@@Base+0x119c>
   13c4c:	mov	sl, r3
   13c50:	ldrb	r0, [sl, #1]!
   13c54:	cmp	r0, #32
   13c58:	bhi	13c70 <test@@Base+0x11b0>
   13c5c:	mov	r0, r4
   13c60:	mov	r1, r3
   13c64:	mov	r2, r8
   13c68:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   13c6c:	mov	sl, r0
   13c70:	cmp	sl, r8
   13c74:	beq	13d60 <test@@Base+0x12a0>
   13c78:	bcs	13db4 <test@@Base+0x12f4>
   13c7c:	ldrb	r0, [sl]
   13c80:	cmp	r0, #58	; 0x3a
   13c84:	bne	13db4 <test@@Base+0x12f4>
   13c88:	add	r1, sl, #1
   13c8c:	sub	r0, r8, r1
   13c90:	cmp	r0, #2
   13c94:	blt	13cc4 <test@@Base+0x1204>
   13c98:	ldrb	r0, [r1]
   13c9c:	cmp	r0, #32
   13ca0:	bls	13cb4 <test@@Base+0x11f4>
   13ca4:	mov	sl, r1
   13ca8:	cmp	sl, r8
   13cac:	bne	13cdc <test@@Base+0x121c>
   13cb0:	b	13d60 <test@@Base+0x12a0>
   13cb4:	bne	13cc4 <test@@Base+0x1204>
   13cb8:	ldrb	r0, [sl, #2]!
   13cbc:	cmp	r0, #32
   13cc0:	bhi	13cd4 <test@@Base+0x1214>
   13cc4:	mov	r0, r4
   13cc8:	mov	r2, r8
   13ccc:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   13cd0:	mov	sl, r0
   13cd4:	cmp	sl, r8
   13cd8:	beq	13d60 <test@@Base+0x12a0>
   13cdc:	mov	r0, r9
   13ce0:	mov	r1, #2
   13ce4:	mov	r2, #4
   13ce8:	mov	r3, #4
   13cec:	bl	179fc <flatcc_builder_table_add@@Base>
   13cf0:	cmp	r0, #0
   13cf4:	beq	13e80 <test@@Base+0x13c0>
   13cf8:	mov	r6, r0
   13cfc:	mov	r0, #0
   13d00:	mov	r1, sl
   13d04:	mov	r2, r8
   13d08:	sub	r3, fp, #44	; 0x2c
   13d0c:	str	r0, [fp, #-36]	; 0xffffffdc
   13d10:	str	r0, [fp, #-40]	; 0xffffffd8
   13d14:	str	r0, [fp, #-44]	; 0xffffffd4
   13d18:	str	r0, [r6]
   13d1c:	sub	r0, fp, #40	; 0x28
   13d20:	str	r0, [sp]
   13d24:	mov	r0, r4
   13d28:	bl	1bcec <flatcc_json_parser_integer@@Base>
   13d2c:	cmp	r0, sl
   13d30:	mov	r1, sl
   13d34:	beq	13740 <test@@Base+0xc80>
   13d38:	mov	r2, r0
   13d3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13d40:	cmp	r0, #0
   13d44:	bne	13248 <test@@Base+0x788>
   13d48:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13d4c:	cmp	r0, #0
   13d50:	bne	132e0 <test@@Base+0x820>
   13d54:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13d58:	str	r0, [r6]
   13d5c:	b	1373c <test@@Base+0xc7c>
   13d60:	movw	r0, #4192	; 0x1060
   13d64:	mov	r1, #13
   13d68:	mov	r2, #1
   13d6c:	movt	r0, #3
   13d70:	ldr	r3, [r0]
   13d74:	movw	r0, #58207	; 0xe35f
   13d78:	movt	r0, #1
   13d7c:	bl	12940 <fwrite@plt>
   13d80:	mov	sl, r8
   13d84:	b	13e80 <test@@Base+0x13c0>
   13d88:	add	r0, sp, #24
   13d8c:	mov	r1, r9
   13d90:	mov	r2, r8
   13d94:	mov	r3, #13
   13d98:	bl	19798 <flatcc_json_parser_set_error@@Base>
   13d9c:	ldr	r9, [sp, #16]
   13da0:	b	13e7c <test@@Base+0x13bc>
   13da4:	movw	r0, #4192	; 0x1060
   13da8:	movw	r1, #58221	; 0xe36d
   13dac:	mov	r2, #123	; 0x7b
   13db0:	b	13e58 <test@@Base+0x1398>
   13db4:	movw	r0, #4192	; 0x1060
   13db8:	movw	r1, #58221	; 0xe36d
   13dbc:	mov	r2, #58	; 0x3a
   13dc0:	movt	r0, #3
   13dc4:	movt	r1, #1
   13dc8:	ldr	r0, [r0]
   13dcc:	bl	1297c <fprintf@plt>
   13dd0:	add	r0, sp, #24
   13dd4:	mov	r1, sl
   13dd8:	b	13e70 <test@@Base+0x13b0>
   13ddc:	mov	sl, r8
   13de0:	b	13e80 <test@@Base+0x13c0>
   13de4:	mov	r0, #125	; 0x7d
   13de8:	cmp	r6, r8
   13dec:	bcs	13e3c <test@@Base+0x137c>
   13df0:	cmp	r0, #125	; 0x7d
   13df4:	bne	13e3c <test@@Base+0x137c>
   13df8:	mov	r0, r9
   13dfc:	bl	1703c <flatcc_builder_end_table@@Base>
   13e00:	mov	r1, r0
   13e04:	mov	r0, r9
   13e08:	bl	15284 <flatcc_builder_end_buffer@@Base>
   13e0c:	add	r1, r6, #1
   13e10:	sub	r0, r8, r1
   13e14:	cmp	r0, #2
   13e18:	blt	13f24 <test@@Base+0x1464>
   13e1c:	ldrb	r0, [r1]
   13e20:	cmp	r0, #32
   13e24:	bls	13f14 <test@@Base+0x1454>
   13e28:	mov	r6, r1
   13e2c:	cmp	r6, r8
   13e30:	mov	sl, r8
   13e34:	beq	13e80 <test@@Base+0x13c0>
   13e38:	b	13f40 <test@@Base+0x1480>
   13e3c:	movw	r0, #4192	; 0x1060
   13e40:	movw	r1, #58221	; 0xe36d
   13e44:	mov	r2, #125	; 0x7d
   13e48:	b	13e58 <test@@Base+0x1398>
   13e4c:	movw	r0, #4192	; 0x1060
   13e50:	movw	r1, #58221	; 0xe36d
   13e54:	mov	r2, #58	; 0x3a
   13e58:	movt	r0, #3
   13e5c:	movt	r1, #1
   13e60:	ldr	r0, [r0]
   13e64:	bl	1297c <fprintf@plt>
   13e68:	add	r0, sp, #24
   13e6c:	mov	r1, r6
   13e70:	mov	r2, r8
   13e74:	mov	r3, #17
   13e78:	bl	19798 <flatcc_json_parser_set_error@@Base>
   13e7c:	mov	sl, r0
   13e80:	movw	r0, #4192	; 0x1060
   13e84:	movt	r0, #3
   13e88:	ldr	r4, [r0]
   13e8c:	ldr	r0, [sp, #48]	; 0x30
   13e90:	cmp	r0, #0
   13e94:	bne	13eb4 <test@@Base+0x13f4>
   13e98:	movw	r0, #58281	; 0xe3a9
   13e9c:	mov	r1, #15
   13ea0:	mov	r2, #1
   13ea4:	mov	r3, r4
   13ea8:	movt	r0, #1
   13eac:	bl	12940 <fwrite@plt>
   13eb0:	b	13eec <test@@Base+0x142c>
   13eb4:	ldr	r5, [sp, #28]
   13eb8:	ldr	r6, [sp, #40]	; 0x28
   13ebc:	ldr	r7, [sp, #60]	; 0x3c
   13ec0:	bl	19778 <flatcc_json_parser_error_string@@Base>
   13ec4:	movw	r1, #58270	; 0xe39e
   13ec8:	str	r0, [sp]
   13ecc:	add	r0, r7, #1
   13ed0:	mov	r2, r6
   13ed4:	sub	r3, r0, r5
   13ed8:	movt	r1, #1
   13edc:	mov	r0, r4
   13ee0:	bl	1297c <fprintf@plt>
   13ee4:	mov	r0, r9
   13ee8:	bl	14714 <flatcc_builder_reset@@Base>
   13eec:	ldr	r0, [sp, #48]	; 0x30
   13ef0:	ldr	r1, [sp, #12]
   13ef4:	str	r0, [r1]
   13ef8:	mov	r0, sl
   13efc:	sub	sp, fp, #28
   13f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f04:	add	r0, sp, #24
   13f08:	mov	r2, r8
   13f0c:	mov	r3, #13
   13f10:	b	13e78 <test@@Base+0x13b8>
   13f14:	bne	13f24 <test@@Base+0x1464>
   13f18:	ldrb	r0, [r6, #2]!
   13f1c:	cmp	r0, #32
   13f20:	bhi	13f34 <test@@Base+0x1474>
   13f24:	add	r0, sp, #24
   13f28:	mov	r2, r8
   13f2c:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   13f30:	mov	r6, r0
   13f34:	cmp	r6, r8
   13f38:	mov	sl, r8
   13f3c:	beq	13e80 <test@@Base+0x13c0>
   13f40:	movw	r0, #4192	; 0x1060
   13f44:	mov	r1, #26
   13f48:	mov	r2, #1
   13f4c:	movt	r0, #3
   13f50:	ldr	r3, [r0]
   13f54:	movw	r0, #58243	; 0xe383
   13f58:	movt	r0, #1
   13f5c:	bl	12940 <fwrite@plt>
   13f60:	mov	sl, r6
   13f64:	b	13e80 <test@@Base+0x13c0>
   13f68:	ldr	r9, [sp, #16]
   13f6c:	b	13e80 <test@@Base+0x13c0>

00013f70 <main@@Base>:
   13f70:	push	{r4, sl, fp, lr}
   13f74:	add	fp, sp, #8
   13f78:	sub	sp, sp, #240	; 0xf0
   13f7c:	mvn	r0, #0
   13f80:	add	r4, sp, #4
   13f84:	str	r0, [fp, #-12]
   13f88:	mov	r0, r4
   13f8c:	bl	14178 <flatcc_builder_init@@Base>
   13f90:	movw	r1, #57556	; 0xe0d4
   13f94:	movw	r0, #645	; 0x285
   13f98:	sub	r3, fp, #12
   13f9c:	movt	r1, #1
   13fa0:	add	r2, r1, r0
   13fa4:	mov	r0, r4
   13fa8:	bl	12ac0 <test@@Base>
   13fac:	mov	r0, r4
   13fb0:	bl	14720 <flatcc_builder_clear@@Base>
   13fb4:	ldr	r0, [fp, #-12]
   13fb8:	sub	sp, fp, #8
   13fbc:	pop	{r4, sl, fp, pc}

00013fc0 <flatcc_builder_default_alloc@@Base>:
   13fc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13fc4:	add	fp, sp, #24
   13fc8:	mov	r4, r1
   13fcc:	cmp	r2, #0
   13fd0:	beq	14018 <flatcc_builder_default_alloc@@Base+0x58>
   13fd4:	ldr	r0, [fp, #8]
   13fd8:	mov	r8, r3
   13fdc:	sub	r1, r0, #1
   13fe0:	cmp	r1, #6
   13fe4:	bhi	14044 <flatcc_builder_default_alloc@@Base+0x84>
   13fe8:	add	r3, pc, #4
   13fec:	mov	r0, #256	; 0x100
   13ff0:	ldr	pc, [r3, r1, lsl #2]
   13ff4:	andeq	r4, r1, r8, asr r0
   13ff8:	andeq	r4, r1, r4, asr #32
   13ffc:	andeq	r4, r1, r4, asr #32
   14000:	andeq	r4, r1, r0, lsl r0
   14004:	andeq	r4, r1, ip, asr #32
   14008:	andeq	r4, r1, r4, asr #32
   1400c:	andeq	r4, r1, r4, asr r0
   14010:	mov	r0, #288	; 0x120
   14014:	b	14058 <flatcc_builder_default_alloc@@Base+0x98>
   14018:	ldr	r0, [r4]
   1401c:	cmp	r0, #0
   14020:	moveq	r6, #0
   14024:	moveq	r0, r6
   14028:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1402c:	bl	128f8 <free@plt>
   14030:	mov	r6, #0
   14034:	mov	r0, r6
   14038:	str	r6, [r4]
   1403c:	str	r6, [r4, #4]
   14040:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14044:	mov	r0, #32
   14048:	b	14058 <flatcc_builder_default_alloc@@Base+0x98>
   1404c:	mov	r0, r2
   14050:	b	14058 <flatcc_builder_default_alloc@@Base+0x98>
   14054:	mov	r0, #64	; 0x40
   14058:	mov	r7, r0
   1405c:	lsl	r0, r0, #1
   14060:	cmp	r7, r2
   14064:	bcc	14058 <flatcc_builder_default_alloc@@Base+0x98>
   14068:	ldr	r0, [r4, #4]
   1406c:	mov	r6, #0
   14070:	cmp	r0, r2
   14074:	lsrcs	r0, r0, #1
   14078:	cmpcs	r0, r7
   1407c:	bcs	140b4 <flatcc_builder_default_alloc@@Base+0xf4>
   14080:	ldr	r0, [r4]
   14084:	mov	r1, r7
   14088:	bl	12934 <realloc@plt>
   1408c:	cmp	r0, #0
   14090:	mvneq	r6, #0
   14094:	moveq	r0, r6
   14098:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1409c:	cmp	r8, #0
   140a0:	mov	r5, r0
   140a4:	ldrne	r1, [r4, #4]
   140a8:	cmpne	r7, r1
   140ac:	bhi	140bc <flatcc_builder_default_alloc@@Base+0xfc>
   140b0:	stm	r4, {r5, r7}
   140b4:	mov	r0, r6
   140b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140bc:	add	r0, r5, r1
   140c0:	sub	r2, r7, r1
   140c4:	mov	r1, #0
   140c8:	bl	12994 <memset@plt>
   140cc:	b	140b0 <flatcc_builder_default_alloc@@Base+0xf0>

000140d0 <flatcc_builder_flush_vtable_cache@@Base>:
   140d0:	push	{r4, r5, fp, lr}
   140d4:	add	fp, sp, #8
   140d8:	mov	r4, r0
   140dc:	ldr	r0, [r0, #116]	; 0x74
   140e0:	cmp	r0, #0
   140e4:	popeq	{r4, r5, fp, pc}
   140e8:	ldr	r0, [r4, #92]	; 0x5c
   140ec:	ldr	r2, [r4, #96]	; 0x60
   140f0:	mov	r1, #0
   140f4:	mov	r5, #0
   140f8:	bl	12994 <memset@plt>
   140fc:	mov	r0, #16
   14100:	str	r5, [r4, #120]	; 0x78
   14104:	str	r0, [r4, #124]	; 0x7c
   14108:	pop	{r4, r5, fp, pc}

0001410c <flatcc_builder_custom_init@@Base>:
   1410c:	push	{r4, r5, r6, r7, fp, lr}
   14110:	add	fp, sp, #16
   14114:	mov	r6, r2
   14118:	mov	r7, r1
   1411c:	mov	r1, #0
   14120:	mov	r2, #232	; 0xe8
   14124:	mov	r5, r3
   14128:	mov	r4, r0
   1412c:	bl	12994 <memset@plt>
   14130:	ldr	r0, [fp, #8]
   14134:	cmp	r7, #0
   14138:	bne	14150 <flatcc_builder_custom_init@@Base+0x44>
   1413c:	movw	r7, #36460	; 0x8e6c
   14140:	mov	r1, #1
   14144:	add	r6, r4, #188	; 0xbc
   14148:	movt	r7, #1
   1414c:	str	r1, [r4, #184]	; 0xb8
   14150:	movw	r1, #16320	; 0x3fc0
   14154:	cmp	r5, #0
   14158:	str	r6, [r4, #36]	; 0x24
   1415c:	str	r0, [r4, #40]	; 0x28
   14160:	mov	r0, #0
   14164:	str	r7, [r4, #44]	; 0x2c
   14168:	movt	r1, #1
   1416c:	movne	r1, r5
   14170:	str	r1, [r4, #48]	; 0x30
   14174:	pop	{r4, r5, r6, r7, fp, pc}

00014178 <flatcc_builder_init@@Base>:
   14178:	push	{r4, r5, fp, lr}
   1417c:	add	fp, sp, #8
   14180:	mov	r1, #0
   14184:	mov	r2, #232	; 0xe8
   14188:	mov	r4, r0
   1418c:	mov	r5, #0
   14190:	bl	12994 <memset@plt>
   14194:	mov	r0, #1
   14198:	movw	r2, #36460	; 0x8e6c
   1419c:	add	r1, r4, #188	; 0xbc
   141a0:	str	r0, [r4, #184]	; 0xb8
   141a4:	movw	r0, #16320	; 0x3fc0
   141a8:	movt	r2, #1
   141ac:	str	r1, [r4, #36]	; 0x24
   141b0:	str	r5, [r4, #40]	; 0x28
   141b4:	movt	r0, #1
   141b8:	str	r2, [r4, #44]	; 0x2c
   141bc:	str	r0, [r4, #48]	; 0x30
   141c0:	mov	r0, #0
   141c4:	pop	{r4, r5, fp, pc}

000141c8 <flatcc_builder_custom_reset@@Base>:
   141c8:	push	{r4, r5, r6, sl, fp, lr}
   141cc:	add	fp, sp, #16
   141d0:	sub	sp, sp, #8
   141d4:	mov	r5, r1
   141d8:	mov	r4, r0
   141dc:	cmp	r2, #0
   141e0:	beq	14240 <flatcc_builder_custom_reset@@Base+0x78>
   141e4:	mov	r1, r4
   141e8:	ldr	r0, [r1, #52]!	; 0x34
   141ec:	cmp	r0, #0
   141f0:	beq	1426c <flatcc_builder_custom_reset@@Base+0xa4>
   141f4:	ldr	r0, [r4, #40]	; 0x28
   141f8:	ldr	r6, [r4, #48]	; 0x30
   141fc:	mov	r2, #0
   14200:	mov	r3, #1
   14204:	str	r2, [sp]
   14208:	mov	r2, #1
   1420c:	blx	r6
   14210:	mvn	r6, #0
   14214:	cmp	r0, #0
   14218:	bne	14520 <flatcc_builder_custom_reset@@Base+0x358>
   1421c:	ldr	r0, [r4, #52]	; 0x34
   14220:	ldr	r2, [r4, #56]	; 0x38
   14224:	mov	r1, #0
   14228:	bl	12994 <memset@plt>
   1422c:	mov	r1, r4
   14230:	ldr	r0, [r1, #60]!	; 0x3c
   14234:	cmp	r0, #0
   14238:	bne	14288 <flatcc_builder_custom_reset@@Base+0xc0>
   1423c:	b	142d4 <flatcc_builder_custom_reset@@Base+0x10c>
   14240:	ldr	r0, [r4, #52]	; 0x34
   14244:	ldr	r2, [r4, #56]	; 0x38
   14248:	cmp	r0, #0
   1424c:	beq	1433c <flatcc_builder_custom_reset@@Base+0x174>
   14250:	mov	r1, #0
   14254:	bl	12994 <memset@plt>
   14258:	ldr	r0, [r4, #60]	; 0x3c
   1425c:	ldr	r2, [r4, #64]	; 0x40
   14260:	cmp	r0, #0
   14264:	bne	14354 <flatcc_builder_custom_reset@@Base+0x18c>
   14268:	b	14370 <flatcc_builder_custom_reset@@Base+0x1a8>
   1426c:	ldr	r0, [r4, #56]	; 0x38
   14270:	cmp	r0, #0
   14274:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   14278:	mov	r1, r4
   1427c:	ldr	r0, [r1, #60]!	; 0x3c
   14280:	cmp	r0, #0
   14284:	beq	142d4 <flatcc_builder_custom_reset@@Base+0x10c>
   14288:	ldr	r0, [r4, #40]	; 0x28
   1428c:	ldr	r6, [r4, #48]	; 0x30
   14290:	mov	r2, #1
   14294:	mov	r3, #1
   14298:	str	r2, [sp]
   1429c:	mov	r2, #1
   142a0:	blx	r6
   142a4:	mvn	r6, #0
   142a8:	cmp	r0, #0
   142ac:	bne	14520 <flatcc_builder_custom_reset@@Base+0x358>
   142b0:	ldr	r0, [r4, #60]	; 0x3c
   142b4:	ldr	r2, [r4, #64]	; 0x40
   142b8:	mov	r1, #0
   142bc:	bl	12994 <memset@plt>
   142c0:	mov	r1, r4
   142c4:	ldr	r0, [r1, #68]!	; 0x44
   142c8:	cmp	r0, #0
   142cc:	bne	142f0 <flatcc_builder_custom_reset@@Base+0x128>
   142d0:	b	1452c <flatcc_builder_custom_reset@@Base+0x364>
   142d4:	ldr	r0, [r4, #64]	; 0x40
   142d8:	cmp	r0, #0
   142dc:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   142e0:	mov	r1, r4
   142e4:	ldr	r0, [r1, #68]!	; 0x44
   142e8:	cmp	r0, #0
   142ec:	beq	1452c <flatcc_builder_custom_reset@@Base+0x364>
   142f0:	ldr	r0, [r4, #40]	; 0x28
   142f4:	ldr	r6, [r4, #48]	; 0x30
   142f8:	mov	r2, #2
   142fc:	mov	r3, #1
   14300:	str	r2, [sp]
   14304:	mov	r2, #1
   14308:	blx	r6
   1430c:	mvn	r6, #0
   14310:	cmp	r0, #0
   14314:	bne	14520 <flatcc_builder_custom_reset@@Base+0x358>
   14318:	ldr	r0, [r4, #68]	; 0x44
   1431c:	ldr	r2, [r4, #72]	; 0x48
   14320:	mov	r1, #0
   14324:	bl	12994 <memset@plt>
   14328:	mov	r1, r4
   1432c:	ldr	r0, [r1, #76]!	; 0x4c
   14330:	cmp	r0, #0
   14334:	bne	14548 <flatcc_builder_custom_reset@@Base+0x380>
   14338:	b	14594 <flatcc_builder_custom_reset@@Base+0x3cc>
   1433c:	cmp	r2, #0
   14340:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   14344:	ldr	r0, [r4, #60]	; 0x3c
   14348:	ldr	r2, [r4, #64]	; 0x40
   1434c:	cmp	r0, #0
   14350:	beq	14370 <flatcc_builder_custom_reset@@Base+0x1a8>
   14354:	mov	r1, #0
   14358:	bl	12994 <memset@plt>
   1435c:	ldr	r0, [r4, #68]	; 0x44
   14360:	ldr	r2, [r4, #72]	; 0x48
   14364:	cmp	r0, #0
   14368:	bne	14388 <flatcc_builder_custom_reset@@Base+0x1c0>
   1436c:	b	143a4 <flatcc_builder_custom_reset@@Base+0x1dc>
   14370:	cmp	r2, #0
   14374:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   14378:	ldr	r0, [r4, #68]	; 0x44
   1437c:	ldr	r2, [r4, #72]	; 0x48
   14380:	cmp	r0, #0
   14384:	beq	143a4 <flatcc_builder_custom_reset@@Base+0x1dc>
   14388:	mov	r1, #0
   1438c:	bl	12994 <memset@plt>
   14390:	ldr	r0, [r4, #76]	; 0x4c
   14394:	ldr	r2, [r4, #80]	; 0x50
   14398:	cmp	r0, #0
   1439c:	bne	143bc <flatcc_builder_custom_reset@@Base+0x1f4>
   143a0:	b	143d8 <flatcc_builder_custom_reset@@Base+0x210>
   143a4:	cmp	r2, #0
   143a8:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   143ac:	ldr	r0, [r4, #76]	; 0x4c
   143b0:	ldr	r2, [r4, #80]	; 0x50
   143b4:	cmp	r0, #0
   143b8:	beq	143d8 <flatcc_builder_custom_reset@@Base+0x210>
   143bc:	mov	r1, #0
   143c0:	bl	12994 <memset@plt>
   143c4:	ldr	r0, [r4, #84]	; 0x54
   143c8:	ldr	r2, [r4, #88]	; 0x58
   143cc:	cmp	r0, #0
   143d0:	bne	143f0 <flatcc_builder_custom_reset@@Base+0x228>
   143d4:	b	1440c <flatcc_builder_custom_reset@@Base+0x244>
   143d8:	cmp	r2, #0
   143dc:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   143e0:	ldr	r0, [r4, #84]	; 0x54
   143e4:	ldr	r2, [r4, #88]	; 0x58
   143e8:	cmp	r0, #0
   143ec:	beq	1440c <flatcc_builder_custom_reset@@Base+0x244>
   143f0:	mov	r1, #0
   143f4:	bl	12994 <memset@plt>
   143f8:	ldr	r0, [r4, #92]	; 0x5c
   143fc:	ldr	r2, [r4, #96]	; 0x60
   14400:	cmp	r0, #0
   14404:	bne	14424 <flatcc_builder_custom_reset@@Base+0x25c>
   14408:	b	14440 <flatcc_builder_custom_reset@@Base+0x278>
   1440c:	cmp	r2, #0
   14410:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   14414:	ldr	r0, [r4, #92]	; 0x5c
   14418:	ldr	r2, [r4, #96]	; 0x60
   1441c:	cmp	r0, #0
   14420:	beq	14440 <flatcc_builder_custom_reset@@Base+0x278>
   14424:	mov	r1, #0
   14428:	bl	12994 <memset@plt>
   1442c:	ldr	r0, [r4, #100]	; 0x64
   14430:	ldr	r2, [r4, #104]	; 0x68
   14434:	cmp	r0, #0
   14438:	bne	14458 <flatcc_builder_custom_reset@@Base+0x290>
   1443c:	b	14474 <flatcc_builder_custom_reset@@Base+0x2ac>
   14440:	cmp	r2, #0
   14444:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   14448:	ldr	r0, [r4, #100]	; 0x64
   1444c:	ldr	r2, [r4, #104]	; 0x68
   14450:	cmp	r0, #0
   14454:	beq	14474 <flatcc_builder_custom_reset@@Base+0x2ac>
   14458:	mov	r1, #0
   1445c:	bl	12994 <memset@plt>
   14460:	ldr	r0, [r4, #108]	; 0x6c
   14464:	ldr	r2, [r4, #112]	; 0x70
   14468:	cmp	r0, #0
   1446c:	bne	1448c <flatcc_builder_custom_reset@@Base+0x2c4>
   14470:	b	14498 <flatcc_builder_custom_reset@@Base+0x2d0>
   14474:	cmp	r2, #0
   14478:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   1447c:	ldr	r0, [r4, #108]	; 0x6c
   14480:	ldr	r2, [r4, #112]	; 0x70
   14484:	cmp	r0, #0
   14488:	beq	14498 <flatcc_builder_custom_reset@@Base+0x2d0>
   1448c:	mov	r1, #0
   14490:	bl	12994 <memset@plt>
   14494:	b	144a0 <flatcc_builder_custom_reset@@Base+0x2d8>
   14498:	cmp	r2, #0
   1449c:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   144a0:	mov	r0, #0
   144a4:	vmov.i32	q8, #0	; 0x00000000
   144a8:	mov	r6, #0
   144ac:	str	r0, [r4, #120]	; 0x78
   144b0:	ldr	r1, [r4, #124]	; 0x7c
   144b4:	cmp	r1, #0
   144b8:	movne	r1, #16
   144bc:	strne	r1, [r4, #124]	; 0x7c
   144c0:	add	r1, r4, #148	; 0x94
   144c4:	strh	r0, [r4, #128]	; 0x80
   144c8:	str	r0, [r4, #136]	; 0x88
   144cc:	str	r0, [r4, #140]	; 0x8c
   144d0:	str	r0, [r4, #32]
   144d4:	cmp	r5, #0
   144d8:	vst1.32	{d16-d17}, [r1]
   144dc:	ldr	r2, [r4, #60]	; 0x3c
   144e0:	ldr	r1, [r4, #52]	; 0x34
   144e4:	ldr	r3, [r4, #76]	; 0x4c
   144e8:	str	r2, [r4, #16]
   144ec:	str	r0, [r4, #20]
   144f0:	str	r0, [r4, #24]
   144f4:	movne	r0, #0
   144f8:	str	r3, [r4]
   144fc:	str	r1, [r4, #4]
   14500:	strne	r0, [r4, #172]	; 0xac
   14504:	strne	r0, [r4, #176]	; 0xb0
   14508:	strne	r0, [r4, #180]	; 0xb4
   1450c:	ldr	r0, [r4, #184]	; 0xb8
   14510:	cmp	r0, #0
   14514:	beq	14520 <flatcc_builder_custom_reset@@Base+0x358>
   14518:	add	r0, r4, #188	; 0xbc
   1451c:	bl	18d34 <flatcc_emitter_reset@@Base>
   14520:	mov	r0, r6
   14524:	sub	sp, fp, #16
   14528:	pop	{r4, r5, r6, sl, fp, pc}
   1452c:	ldr	r0, [r4, #72]	; 0x48
   14530:	cmp	r0, #0
   14534:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   14538:	mov	r1, r4
   1453c:	ldr	r0, [r1, #76]!	; 0x4c
   14540:	cmp	r0, #0
   14544:	beq	14594 <flatcc_builder_custom_reset@@Base+0x3cc>
   14548:	ldr	r0, [r4, #40]	; 0x28
   1454c:	ldr	r6, [r4, #48]	; 0x30
   14550:	mov	r2, #3
   14554:	mov	r3, #1
   14558:	str	r2, [sp]
   1455c:	mov	r2, #1
   14560:	blx	r6
   14564:	mvn	r6, #0
   14568:	cmp	r0, #0
   1456c:	bne	14520 <flatcc_builder_custom_reset@@Base+0x358>
   14570:	ldr	r0, [r4, #76]	; 0x4c
   14574:	ldr	r2, [r4, #80]	; 0x50
   14578:	mov	r1, #0
   1457c:	bl	12994 <memset@plt>
   14580:	mov	r1, r4
   14584:	ldr	r0, [r1, #84]!	; 0x54
   14588:	cmp	r0, #0
   1458c:	bne	145b0 <flatcc_builder_custom_reset@@Base+0x3e8>
   14590:	b	145fc <flatcc_builder_custom_reset@@Base+0x434>
   14594:	ldr	r0, [r4, #80]	; 0x50
   14598:	cmp	r0, #0
   1459c:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   145a0:	mov	r1, r4
   145a4:	ldr	r0, [r1, #84]!	; 0x54
   145a8:	cmp	r0, #0
   145ac:	beq	145fc <flatcc_builder_custom_reset@@Base+0x434>
   145b0:	ldr	r0, [r4, #40]	; 0x28
   145b4:	ldr	r6, [r4, #48]	; 0x30
   145b8:	mov	r2, #4
   145bc:	mov	r3, #1
   145c0:	str	r2, [sp]
   145c4:	mov	r2, #1
   145c8:	blx	r6
   145cc:	mvn	r6, #0
   145d0:	cmp	r0, #0
   145d4:	bne	14520 <flatcc_builder_custom_reset@@Base+0x358>
   145d8:	ldr	r0, [r4, #84]	; 0x54
   145dc:	ldr	r2, [r4, #88]	; 0x58
   145e0:	mov	r1, #0
   145e4:	bl	12994 <memset@plt>
   145e8:	ldr	r0, [r4, #92]	; 0x5c
   145ec:	ldr	r2, [r4, #96]	; 0x60
   145f0:	cmp	r0, #0
   145f4:	bne	14618 <flatcc_builder_custom_reset@@Base+0x450>
   145f8:	b	14634 <flatcc_builder_custom_reset@@Base+0x46c>
   145fc:	ldr	r0, [r4, #88]	; 0x58
   14600:	cmp	r0, #0
   14604:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   14608:	ldr	r0, [r4, #92]	; 0x5c
   1460c:	ldr	r2, [r4, #96]	; 0x60
   14610:	cmp	r0, #0
   14614:	beq	14634 <flatcc_builder_custom_reset@@Base+0x46c>
   14618:	mov	r1, #0
   1461c:	bl	12994 <memset@plt>
   14620:	mov	r1, r4
   14624:	ldr	r0, [r1, #100]!	; 0x64
   14628:	cmp	r0, #0
   1462c:	bne	1464c <flatcc_builder_custom_reset@@Base+0x484>
   14630:	b	14698 <flatcc_builder_custom_reset@@Base+0x4d0>
   14634:	cmp	r2, #0
   14638:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   1463c:	mov	r1, r4
   14640:	ldr	r0, [r1, #100]!	; 0x64
   14644:	cmp	r0, #0
   14648:	beq	14698 <flatcc_builder_custom_reset@@Base+0x4d0>
   1464c:	ldr	r0, [r4, #40]	; 0x28
   14650:	ldr	r6, [r4, #48]	; 0x30
   14654:	mov	r2, #6
   14658:	mov	r3, #1
   1465c:	str	r2, [sp]
   14660:	mov	r2, #1
   14664:	blx	r6
   14668:	mvn	r6, #0
   1466c:	cmp	r0, #0
   14670:	bne	14520 <flatcc_builder_custom_reset@@Base+0x358>
   14674:	ldr	r0, [r4, #100]	; 0x64
   14678:	ldr	r2, [r4, #104]	; 0x68
   1467c:	mov	r1, #0
   14680:	bl	12994 <memset@plt>
   14684:	mov	r1, r4
   14688:	ldr	r0, [r1, #108]!	; 0x6c
   1468c:	cmp	r0, #0
   14690:	bne	146b4 <flatcc_builder_custom_reset@@Base+0x4ec>
   14694:	b	146e8 <flatcc_builder_custom_reset@@Base+0x520>
   14698:	ldr	r0, [r4, #104]	; 0x68
   1469c:	cmp	r0, #0
   146a0:	bne	146f4 <flatcc_builder_custom_reset@@Base+0x52c>
   146a4:	mov	r1, r4
   146a8:	ldr	r0, [r1, #108]!	; 0x6c
   146ac:	cmp	r0, #0
   146b0:	beq	146e8 <flatcc_builder_custom_reset@@Base+0x520>
   146b4:	ldr	r0, [r4, #40]	; 0x28
   146b8:	ldr	r6, [r4, #48]	; 0x30
   146bc:	mov	r2, #7
   146c0:	mov	r3, #1
   146c4:	str	r2, [sp]
   146c8:	mov	r2, #1
   146cc:	blx	r6
   146d0:	mvn	r6, #0
   146d4:	cmp	r0, #0
   146d8:	bne	14520 <flatcc_builder_custom_reset@@Base+0x358>
   146dc:	ldr	r0, [r4, #108]	; 0x6c
   146e0:	ldr	r2, [r4, #112]	; 0x70
   146e4:	b	1448c <flatcc_builder_custom_reset@@Base+0x2c4>
   146e8:	ldr	r0, [r4, #112]	; 0x70
   146ec:	cmp	r0, #0
   146f0:	beq	144a0 <flatcc_builder_custom_reset@@Base+0x2d8>
   146f4:	movw	r0, #58809	; 0xe5b9
   146f8:	movw	r1, #58827	; 0xe5cb
   146fc:	movw	r3, #58897	; 0xe611
   14700:	movw	r2, #434	; 0x1b2
   14704:	movt	r0, #1
   14708:	movt	r1, #1
   1470c:	movt	r3, #1
   14710:	bl	129c4 <__assert_fail@plt>

00014714 <flatcc_builder_reset@@Base>:
   14714:	mov	r1, #0
   14718:	mov	r2, #0
   1471c:	b	141c8 <flatcc_builder_custom_reset@@Base>

00014720 <flatcc_builder_clear@@Base>:
   14720:	push	{r4, sl, fp, lr}
   14724:	add	fp, sp, #8
   14728:	sub	sp, sp, #8
   1472c:	mov	r4, r0
   14730:	ldr	r0, [r0, #40]	; 0x28
   14734:	mov	r1, #0
   14738:	mov	r2, #0
   1473c:	mov	r3, #0
   14740:	ldr	ip, [r4, #48]	; 0x30
   14744:	str	r1, [sp]
   14748:	add	r1, r4, #52	; 0x34
   1474c:	blx	ip
   14750:	ldr	r0, [r4, #40]	; 0x28
   14754:	ldr	ip, [r4, #48]	; 0x30
   14758:	mov	r1, #1
   1475c:	mov	r2, #0
   14760:	mov	r3, #0
   14764:	str	r1, [sp]
   14768:	add	r1, r4, #60	; 0x3c
   1476c:	blx	ip
   14770:	ldr	r0, [r4, #40]	; 0x28
   14774:	ldr	ip, [r4, #48]	; 0x30
   14778:	mov	r1, #2
   1477c:	mov	r2, #0
   14780:	mov	r3, #0
   14784:	str	r1, [sp]
   14788:	add	r1, r4, #68	; 0x44
   1478c:	blx	ip
   14790:	ldr	r0, [r4, #40]	; 0x28
   14794:	ldr	ip, [r4, #48]	; 0x30
   14798:	mov	r1, #3
   1479c:	mov	r2, #0
   147a0:	mov	r3, #0
   147a4:	str	r1, [sp]
   147a8:	add	r1, r4, #76	; 0x4c
   147ac:	blx	ip
   147b0:	ldr	r0, [r4, #40]	; 0x28
   147b4:	ldr	ip, [r4, #48]	; 0x30
   147b8:	mov	r1, #4
   147bc:	mov	r2, #0
   147c0:	mov	r3, #0
   147c4:	str	r1, [sp]
   147c8:	add	r1, r4, #84	; 0x54
   147cc:	blx	ip
   147d0:	ldr	r0, [r4, #40]	; 0x28
   147d4:	ldr	ip, [r4, #48]	; 0x30
   147d8:	mov	r1, #5
   147dc:	mov	r2, #0
   147e0:	mov	r3, #0
   147e4:	str	r1, [sp]
   147e8:	add	r1, r4, #92	; 0x5c
   147ec:	blx	ip
   147f0:	ldr	r0, [r4, #40]	; 0x28
   147f4:	ldr	ip, [r4, #48]	; 0x30
   147f8:	mov	r1, #6
   147fc:	mov	r2, #0
   14800:	mov	r3, #0
   14804:	str	r1, [sp]
   14808:	add	r1, r4, #100	; 0x64
   1480c:	blx	ip
   14810:	ldr	r0, [r4, #40]	; 0x28
   14814:	ldr	ip, [r4, #48]	; 0x30
   14818:	mov	r1, #7
   1481c:	mov	r2, #0
   14820:	mov	r3, #0
   14824:	str	r1, [sp]
   14828:	add	r1, r4, #108	; 0x6c
   1482c:	blx	ip
   14830:	ldr	r0, [r4, #184]	; 0xb8
   14834:	cmp	r0, #0
   14838:	beq	14844 <flatcc_builder_clear@@Base+0x124>
   1483c:	add	r0, r4, #188	; 0xbc
   14840:	bl	18e00 <flatcc_emitter_clear@@Base>
   14844:	mov	r0, r4
   14848:	mov	r1, #0
   1484c:	mov	r2, #232	; 0xe8
   14850:	sub	sp, fp, #8
   14854:	pop	{r4, sl, fp, lr}
   14858:	b	12994 <memset@plt>

0001485c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1485c:	push	{r4, r5, r6, r7, fp, lr}
   14860:	add	fp, sp, #16
   14864:	sub	sp, sp, #8
   14868:	mov	r4, r0
   1486c:	ldr	r0, [r0, #112]	; 0x70
   14870:	add	r1, r1, #7
   14874:	ldr	r7, [r4, #228]	; 0xe4
   14878:	bic	r5, r1, #3
   1487c:	add	r6, r4, #108	; 0x6c
   14880:	add	r2, r7, r5
   14884:	cmp	r2, r0
   14888:	bls	148b0 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   1488c:	ldr	r0, [r4, #40]	; 0x28
   14890:	ldr	ip, [r4, #48]	; 0x30
   14894:	mov	r1, #7
   14898:	mov	r3, #0
   1489c:	str	r1, [sp]
   148a0:	mov	r1, r6
   148a4:	blx	ip
   148a8:	cmp	r0, #0
   148ac:	bne	14904 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   148b0:	ldr	r0, [r6]
   148b4:	adds	r6, r0, r7
   148b8:	beq	148f4 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   148bc:	mov	r0, r6
   148c0:	mov	r1, #0
   148c4:	mov	r2, r5
   148c8:	bl	12994 <memset@plt>
   148cc:	ldr	r0, [r4, #224]	; 0xe0
   148d0:	str	r0, [r6], #4
   148d4:	ldr	r0, [r4, #228]	; 0xe4
   148d8:	add	r1, r0, #4
   148dc:	add	r0, r0, r5
   148e0:	str	r1, [r4, #224]	; 0xe0
   148e4:	str	r0, [r4, #228]	; 0xe4
   148e8:	mov	r0, r6
   148ec:	sub	sp, fp, #16
   148f0:	pop	{r4, r5, r6, r7, fp, pc}
   148f4:	mov	r6, #0
   148f8:	mov	r0, r6
   148fc:	sub	sp, fp, #16
   14900:	pop	{r4, r5, r6, r7, fp, pc}
   14904:	movw	r0, #63345	; 0xf771
   14908:	movw	r1, #58827	; 0xe5cb
   1490c:	movw	r3, #62891	; 0xf5ab
   14910:	mov	r2, #308	; 0x134
   14914:	movt	r0, #1
   14918:	movt	r1, #1
   1491c:	movt	r3, #1
   14920:	bl	129c4 <__assert_fail@plt>

00014924 <flatcc_builder_enter_user_frame@@Base>:
   14924:	push	{r4, r5, r6, r7, fp, lr}
   14928:	add	fp, sp, #16
   1492c:	sub	sp, sp, #8
   14930:	mov	r4, r0
   14934:	ldr	r0, [r0, #112]	; 0x70
   14938:	add	r1, r1, #7
   1493c:	ldr	r7, [r4, #228]	; 0xe4
   14940:	bic	r5, r1, #3
   14944:	add	r6, r4, #108	; 0x6c
   14948:	add	r2, r7, r5
   1494c:	cmp	r2, r0
   14950:	bls	14978 <flatcc_builder_enter_user_frame@@Base+0x54>
   14954:	ldr	r0, [r4, #40]	; 0x28
   14958:	ldr	ip, [r4, #48]	; 0x30
   1495c:	mov	r1, #7
   14960:	mov	r3, #0
   14964:	str	r1, [sp]
   14968:	mov	r1, r6
   1496c:	blx	ip
   14970:	cmp	r0, #0
   14974:	bne	149c0 <flatcc_builder_enter_user_frame@@Base+0x9c>
   14978:	ldr	r0, [r6]
   1497c:	adds	r6, r0, r7
   14980:	moveq	r0, #0
   14984:	subeq	sp, fp, #16
   14988:	popeq	{r4, r5, r6, r7, fp, pc}
   1498c:	mov	r0, r6
   14990:	mov	r1, #0
   14994:	mov	r2, r5
   14998:	bl	12994 <memset@plt>
   1499c:	ldr	r0, [r4, #224]	; 0xe0
   149a0:	str	r0, [r6]
   149a4:	ldr	r1, [r4, #228]	; 0xe4
   149a8:	add	r0, r1, #4
   149ac:	add	r1, r1, r5
   149b0:	str	r0, [r4, #224]	; 0xe0
   149b4:	str	r1, [r4, #228]	; 0xe4
   149b8:	sub	sp, fp, #16
   149bc:	pop	{r4, r5, r6, r7, fp, pc}
   149c0:	movw	r0, #63345	; 0xf771
   149c4:	movw	r1, #58827	; 0xe5cb
   149c8:	movw	r3, #62891	; 0xf5ab
   149cc:	mov	r2, #308	; 0x134
   149d0:	movt	r0, #1
   149d4:	movt	r1, #1
   149d8:	movt	r3, #1
   149dc:	bl	129c4 <__assert_fail@plt>

000149e0 <flatcc_builder_exit_user_frame@@Base>:
   149e0:	ldr	r1, [r0, #224]	; 0xe0
   149e4:	cmp	r1, #0
   149e8:	subne	r2, r1, #4
   149ec:	strne	r2, [r0, #228]	; 0xe4
   149f0:	ldrne	r2, [r0, #108]	; 0x6c
   149f4:	addne	r1, r2, r1
   149f8:	ldrne	r1, [r1, #-4]
   149fc:	strne	r1, [r0, #224]	; 0xe0
   14a00:	movne	r0, r1
   14a04:	bxne	lr
   14a08:	push	{fp, lr}
   14a0c:	mov	fp, sp
   14a10:	movw	r0, #58959	; 0xe64f
   14a14:	movw	r1, #58827	; 0xe5cb
   14a18:	movw	r3, #58984	; 0xe668
   14a1c:	movw	r2, #542	; 0x21e
   14a20:	movt	r0, #1
   14a24:	movt	r1, #1
   14a28:	movt	r3, #1
   14a2c:	bl	129c4 <__assert_fail@plt>

00014a30 <flatcc_builder_exit_user_frame_at@@Base>:
   14a30:	push	{fp, lr}
   14a34:	mov	fp, sp
   14a38:	ldr	r2, [r0, #224]	; 0xe0
   14a3c:	cmp	r2, r1
   14a40:	bcc	14a8c <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   14a44:	cmp	r1, #0
   14a48:	str	r1, [r0, #224]	; 0xe0
   14a4c:	subne	r2, r1, #4
   14a50:	strne	r2, [r0, #228]	; 0xe4
   14a54:	ldrne	r2, [r0, #108]	; 0x6c
   14a58:	addne	r1, r2, r1
   14a5c:	ldrne	r1, [r1, #-4]
   14a60:	strne	r1, [r0, #224]	; 0xe0
   14a64:	movne	r0, r1
   14a68:	popne	{fp, pc}
   14a6c:	movw	r0, #58959	; 0xe64f
   14a70:	movw	r1, #58827	; 0xe5cb
   14a74:	movw	r3, #58984	; 0xe668
   14a78:	movw	r2, #542	; 0x21e
   14a7c:	movt	r0, #1
   14a80:	movt	r1, #1
   14a84:	movt	r3, #1
   14a88:	bl	129c4 <__assert_fail@plt>
   14a8c:	movw	r0, #59042	; 0xe6a2
   14a90:	movw	r1, #58827	; 0xe5cb
   14a94:	movw	r3, #59073	; 0xe6c1
   14a98:	movw	r2, #551	; 0x227
   14a9c:	movt	r0, #1
   14aa0:	movt	r1, #1
   14aa4:	movt	r3, #1
   14aa8:	bl	129c4 <__assert_fail@plt>

00014aac <flatcc_builder_get_current_user_frame@@Base>:
   14aac:	ldr	r0, [r0, #224]	; 0xe0
   14ab0:	bx	lr

00014ab4 <flatcc_builder_get_user_frame_ptr@@Base>:
   14ab4:	ldr	r0, [r0, #108]	; 0x6c
   14ab8:	add	r0, r0, r1
   14abc:	bx	lr

00014ac0 <flatcc_builder_embed_buffer@@Base>:
   14ac0:	push	{r4, r5, r6, r7, fp, lr}
   14ac4:	add	fp, sp, #16
   14ac8:	sub	sp, sp, #88	; 0x58
   14acc:	mov	r4, r0
   14ad0:	ldr	r0, [fp, #8]
   14ad4:	mov	r5, r3
   14ad8:	mov	r7, r2
   14adc:	mov	r2, r1
   14ae0:	sub	r1, fp, #18
   14ae4:	strh	r0, [fp, #-18]	; 0xffffffee
   14ae8:	mov	r0, r4
   14aec:	ldr	r3, [r4, #152]	; 0x98
   14af0:	cmp	r3, #0
   14af4:	movwne	r3, #1
   14af8:	bl	14c30 <flatcc_builder_embed_buffer@@Base+0x170>
   14afc:	ldr	r1, [fp, #12]
   14b00:	ldrh	r3, [fp, #-18]	; 0xffffffee
   14b04:	ldr	r0, [r4, #136]	; 0x88
   14b08:	mov	r2, #0
   14b0c:	str	r2, [sp, #8]
   14b10:	str	r2, [sp, #12]
   14b14:	and	r1, r1, #2
   14b18:	sub	r3, r3, #1
   14b1c:	add	r1, r5, r1, lsl #1
   14b20:	sub	r1, r0, r1
   14b24:	and	r3, r3, r1
   14b28:	add	r1, r3, r5
   14b2c:	str	r1, [fp, #-24]	; 0xffffffe8
   14b30:	ldr	r1, [r4, #152]	; 0x98
   14b34:	cmp	r1, #0
   14b38:	mov	r1, #0
   14b3c:	beq	14b5c <flatcc_builder_embed_buffer@@Base+0x9c>
   14b40:	sub	r1, fp, #24
   14b44:	mov	r2, #1
   14b48:	str	r1, [sp, #16]
   14b4c:	mov	r1, #4
   14b50:	str	r1, [sp, #8]
   14b54:	str	r1, [sp, #20]
   14b58:	str	r2, [sp, #12]
   14b5c:	cmp	r5, #0
   14b60:	beq	14b84 <flatcc_builder_embed_buffer@@Base+0xc4>
   14b64:	add	r6, sp, #8
   14b68:	add	r1, r1, r5
   14b6c:	add	r6, r6, r2, lsl #3
   14b70:	add	r2, r2, #1
   14b74:	str	r1, [sp, #8]
   14b78:	str	r7, [r6, #8]
   14b7c:	str	r5, [r6, #12]
   14b80:	str	r2, [sp, #12]
   14b84:	cmp	r3, #0
   14b88:	beq	14bb4 <flatcc_builder_embed_buffer@@Base+0xf4>
   14b8c:	add	r7, sp, #8
   14b90:	movw	r6, #58297	; 0xe3b9
   14b94:	add	r1, r1, r3
   14b98:	add	r7, r7, r2, lsl #3
   14b9c:	add	r2, r2, #1
   14ba0:	movt	r6, #1
   14ba4:	str	r1, [sp, #8]
   14ba8:	str	r6, [r7, #8]
   14bac:	str	r3, [r7, #12]
   14bb0:	str	r2, [sp, #12]
   14bb4:	cmp	r1, #0
   14bb8:	ble	14c10 <flatcc_builder_embed_buffer@@Base+0x150>
   14bbc:	sub	r5, r0, r1
   14bc0:	ldr	r0, [r4, #36]	; 0x24
   14bc4:	ldr	r7, [r4, #44]	; 0x2c
   14bc8:	str	r1, [sp]
   14bcc:	add	r1, sp, #8
   14bd0:	add	r1, r1, #8
   14bd4:	mov	r3, r5
   14bd8:	blx	r7
   14bdc:	cmp	r0, #0
   14be0:	streq	r5, [r4, #136]	; 0x88
   14be4:	moveq	r0, r5
   14be8:	subeq	sp, fp, #16
   14bec:	popeq	{r4, r5, r6, r7, fp, pc}
   14bf0:	movw	r0, #63345	; 0xf771
   14bf4:	movw	r1, #58827	; 0xe5cb
   14bf8:	movw	r3, #63024	; 0xf630
   14bfc:	movw	r2, #651	; 0x28b
   14c00:	movt	r0, #1
   14c04:	movt	r1, #1
   14c08:	movt	r3, #1
   14c0c:	bl	129c4 <__assert_fail@plt>
   14c10:	movw	r0, #63345	; 0xf771
   14c14:	movw	r1, #58827	; 0xe5cb
   14c18:	movw	r3, #63024	; 0xf630
   14c1c:	movw	r2, #647	; 0x287
   14c20:	movt	r0, #1
   14c24:	movt	r1, #1
   14c28:	movt	r3, #1
   14c2c:	bl	129c4 <__assert_fail@plt>
   14c30:	push	{r4, sl, fp, lr}
   14c34:	add	fp, sp, #8
   14c38:	sub	sp, sp, #80	; 0x50
   14c3c:	cmp	r2, #0
   14c40:	bne	14c50 <flatcc_builder_embed_buffer@@Base+0x190>
   14c44:	ldrh	r2, [r0, #132]	; 0x84
   14c48:	cmp	r2, #0
   14c4c:	movweq	r2, #1
   14c50:	ldrh	r4, [r1]
   14c54:	cmp	r4, #4
   14c58:	movwcc	r4, #4
   14c5c:	cmpcs	r4, r2
   14c60:	bcs	14c70 <flatcc_builder_embed_buffer@@Base+0x1b0>
   14c64:	cmp	r4, r2
   14c68:	movcc	r4, r2
   14c6c:	strh	r4, [r1]
   14c70:	cmp	r3, #0
   14c74:	bne	14ce8 <flatcc_builder_embed_buffer@@Base+0x228>
   14c78:	ldr	r4, [r0, #140]	; 0x8c
   14c7c:	sub	r1, r2, #1
   14c80:	ands	r1, r4, r1
   14c84:	beq	14ce8 <flatcc_builder_embed_buffer@@Base+0x228>
   14c88:	movw	r2, #58297	; 0xe3b9
   14c8c:	cmn	r1, #1
   14c90:	movt	r2, #1
   14c94:	str	r2, [sp, #16]
   14c98:	mov	r2, #1
   14c9c:	str	r1, [sp, #8]
   14ca0:	str	r1, [sp, #20]
   14ca4:	str	r2, [sp, #12]
   14ca8:	add	r2, r4, r1
   14cac:	str	r2, [r0, #140]	; 0x8c
   14cb0:	ble	14cf0 <flatcc_builder_embed_buffer@@Base+0x230>
   14cb4:	ldr	r2, [r0, #36]	; 0x24
   14cb8:	ldr	ip, [r0, #44]	; 0x2c
   14cbc:	add	r0, sp, #8
   14cc0:	str	r1, [sp]
   14cc4:	mov	r3, r4
   14cc8:	add	r1, r0, #8
   14ccc:	mov	r0, r2
   14cd0:	mov	r2, #1
   14cd4:	blx	ip
   14cd8:	cmp	r0, #0
   14cdc:	bne	14d10 <flatcc_builder_embed_buffer@@Base+0x250>
   14ce0:	cmn	r4, #1
   14ce4:	beq	14d30 <flatcc_builder_embed_buffer@@Base+0x270>
   14ce8:	sub	sp, fp, #8
   14cec:	pop	{r4, sl, fp, pc}
   14cf0:	movw	r0, #63345	; 0xf771
   14cf4:	movw	r1, #58827	; 0xe5cb
   14cf8:	movw	r3, #63212	; 0xf6ec
   14cfc:	movw	r2, #673	; 0x2a1
   14d00:	movt	r0, #1
   14d04:	movt	r1, #1
   14d08:	movt	r3, #1
   14d0c:	bl	129c4 <__assert_fail@plt>
   14d10:	movw	r0, #63345	; 0xf771
   14d14:	movw	r1, #58827	; 0xe5cb
   14d18:	movw	r3, #63212	; 0xf6ec
   14d1c:	movw	r2, #677	; 0x2a5
   14d20:	movt	r0, #1
   14d24:	movt	r1, #1
   14d28:	movt	r3, #1
   14d2c:	bl	129c4 <__assert_fail@plt>
   14d30:	movw	r0, #63345	; 0xf771
   14d34:	movw	r1, #58827	; 0xe5cb
   14d38:	movw	r3, #62958	; 0xf5ee
   14d3c:	movw	r2, #702	; 0x2be
   14d40:	movt	r0, #1
   14d44:	movt	r1, #1
   14d48:	movt	r3, #1
   14d4c:	bl	129c4 <__assert_fail@plt>

00014d50 <flatcc_builder_create_buffer@@Base>:
   14d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d54:	add	fp, sp, #28
   14d58:	sub	sp, sp, #100	; 0x64
   14d5c:	ldr	r8, [fp, #12]
   14d60:	mov	r4, r0
   14d64:	ldr	r0, [fp, #8]
   14d68:	mov	r7, r1
   14d6c:	mov	r5, #0
   14d70:	mov	r9, r3
   14d74:	sub	r1, fp, #30
   14d78:	str	r5, [sp, #12]
   14d7c:	and	r6, r8, #1
   14d80:	strh	r0, [fp, #-30]	; 0xffffffe2
   14d84:	mov	r0, r4
   14d88:	mov	r3, r6
   14d8c:	bl	14c30 <flatcc_builder_embed_buffer@@Base+0x170>
   14d90:	ldrh	r0, [r4, #128]	; 0x80
   14d94:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   14d98:	cmp	r0, r1
   14d9c:	strhcc	r1, [r4, #128]	; 0x80
   14da0:	cmp	r7, #0
   14da4:	stmib	sp, {r6, r9}
   14da8:	beq	14dc4 <flatcc_builder_create_buffer@@Base+0x74>
   14dac:	ldr	r5, [r7]
   14db0:	cmp	r5, #0
   14db4:	str	r5, [sp, #12]
   14db8:	movwne	r5, #1
   14dbc:	lsl	r7, r5, #2
   14dc0:	b	14dc8 <flatcc_builder_create_buffer@@Base+0x78>
   14dc4:	mov	r7, #0
   14dc8:	ldr	r9, [r4, #136]	; 0x88
   14dcc:	mov	sl, #4
   14dd0:	mvn	r6, #3
   14dd4:	mov	r3, #0
   14dd8:	ands	ip, r8, #3
   14ddc:	and	r2, sl, r8, lsl #1
   14de0:	str	r3, [sp, #20]
   14de4:	str	r3, [sp, #16]
   14de8:	sub	r2, r6, r2
   14dec:	sub	r6, r1, #1
   14df0:	mov	r1, #4
   14df4:	add	r2, r2, r9
   14df8:	sub	r2, r2, r7
   14dfc:	beq	14e20 <flatcc_builder_create_buffer@@Base+0xd0>
   14e00:	sub	r1, fp, #40	; 0x28
   14e04:	mov	r3, #1
   14e08:	str	r1, [sp, #24]
   14e0c:	mov	r1, #4
   14e10:	str	r1, [sp, #16]
   14e14:	str	r1, [sp, #28]
   14e18:	mov	r1, #8
   14e1c:	str	r3, [sp, #20]
   14e20:	add	lr, sp, #16
   14e24:	and	r6, r2, r6
   14e28:	sub	r0, fp, #36	; 0x24
   14e2c:	str	r1, [sp, #16]
   14e30:	cmp	r5, #0
   14e34:	add	r2, lr, r3, lsl #3
   14e38:	str	r0, [r2, #8]
   14e3c:	str	sl, [r2, #12]
   14e40:	add	r2, r3, #1
   14e44:	str	r2, [sp, #20]
   14e48:	beq	14e6c <flatcc_builder_create_buffer@@Base+0x11c>
   14e4c:	add	r1, r1, r7
   14e50:	add	r0, lr, r2, lsl #3
   14e54:	add	r2, sp, #12
   14e58:	str	r1, [sp, #16]
   14e5c:	str	r2, [r0, #8]
   14e60:	orr	r2, r3, #2
   14e64:	str	r7, [r0, #12]
   14e68:	str	r2, [sp, #20]
   14e6c:	cmp	r6, #0
   14e70:	beq	14e98 <flatcc_builder_create_buffer@@Base+0x148>
   14e74:	movw	r3, #58297	; 0xe3b9
   14e78:	add	r1, r1, r6
   14e7c:	add	r0, lr, r2, lsl #3
   14e80:	add	r2, r2, #1
   14e84:	movt	r3, #1
   14e88:	str	r1, [sp, #16]
   14e8c:	str	r3, [r0, #8]
   14e90:	str	r6, [r0, #12]
   14e94:	str	r2, [sp, #20]
   14e98:	ldr	r5, [sp, #4]
   14e9c:	sub	r7, r9, r1
   14ea0:	cmp	ip, #0
   14ea4:	mov	r6, #144	; 0x90
   14ea8:	ldr	r3, [sp, #8]
   14eac:	mov	r0, r7
   14eb0:	addne	r0, r0, #4
   14eb4:	cmp	r5, #0
   14eb8:	sub	r3, r3, r0
   14ebc:	movweq	r6, #140	; 0x8c
   14ec0:	cmp	r1, #0
   14ec4:	ldr	r6, [r4, r6]
   14ec8:	str	r3, [fp, #-36]	; 0xffffffdc
   14ecc:	sub	r0, r6, r0
   14ed0:	str	r0, [fp, #-40]	; 0xffffffd8
   14ed4:	ble	14f2c <flatcc_builder_create_buffer@@Base+0x1dc>
   14ed8:	ldr	r0, [r4, #36]	; 0x24
   14edc:	ldr	r6, [r4, #44]	; 0x2c
   14ee0:	str	r1, [sp]
   14ee4:	add	r1, lr, #8
   14ee8:	mov	r3, r7
   14eec:	blx	r6
   14ef0:	cmp	r0, #0
   14ef4:	bne	14f4c <flatcc_builder_create_buffer@@Base+0x1fc>
   14ef8:	cmp	r7, #0
   14efc:	str	r7, [r4, #136]	; 0x88
   14f00:	movne	r0, r7
   14f04:	subne	sp, fp, #28
   14f08:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f0c:	movw	r0, #63345	; 0xf771
   14f10:	movw	r1, #58827	; 0xe5cb
   14f14:	movw	r3, #59142	; 0xe706
   14f18:	mov	r2, #772	; 0x304
   14f1c:	movt	r0, #1
   14f20:	movt	r1, #1
   14f24:	movt	r3, #1
   14f28:	bl	129c4 <__assert_fail@plt>
   14f2c:	movw	r0, #63345	; 0xf771
   14f30:	movw	r1, #58827	; 0xe5cb
   14f34:	movw	r3, #63024	; 0xf630
   14f38:	movw	r2, #647	; 0x287
   14f3c:	movt	r0, #1
   14f40:	movt	r1, #1
   14f44:	movt	r3, #1
   14f48:	bl	129c4 <__assert_fail@plt>
   14f4c:	movw	r0, #63345	; 0xf771
   14f50:	movw	r1, #58827	; 0xe5cb
   14f54:	movw	r3, #63024	; 0xf630
   14f58:	movw	r2, #651	; 0x28b
   14f5c:	movt	r0, #1
   14f60:	movt	r1, #1
   14f64:	movt	r3, #1
   14f68:	bl	129c4 <__assert_fail@plt>

00014f6c <flatcc_builder_create_struct@@Base>:
   14f6c:	push	{r4, r5, r6, sl, fp, lr}
   14f70:	add	fp, sp, #16
   14f74:	sub	sp, sp, #80	; 0x50
   14f78:	cmp	r3, #0
   14f7c:	beq	15054 <flatcc_builder_create_struct@@Base+0xe8>
   14f80:	mov	r5, r0
   14f84:	ldrh	r0, [r0, #128]	; 0x80
   14f88:	mov	r4, #0
   14f8c:	cmp	r0, r3
   14f90:	strhcc	r3, [r5, #128]	; 0x80
   14f94:	sub	r3, r3, #1
   14f98:	cmp	r2, #0
   14f9c:	ldr	r0, [r5, #136]	; 0x88
   14fa0:	str	r4, [sp, #12]
   14fa4:	str	r4, [sp, #8]
   14fa8:	movne	r4, #1
   14fac:	strne	r1, [sp, #16]
   14fb0:	strne	r2, [sp, #8]
   14fb4:	strne	r2, [sp, #20]
   14fb8:	strne	r4, [sp, #12]
   14fbc:	sub	r6, r0, r2
   14fc0:	and	r3, r6, r3
   14fc4:	cmp	r3, #0
   14fc8:	beq	14ff4 <flatcc_builder_create_struct@@Base+0x88>
   14fcc:	add	r1, sp, #8
   14fd0:	movw	r6, #58297	; 0xe3b9
   14fd4:	add	r2, r3, r2
   14fd8:	add	r1, r1, r4, lsl #3
   14fdc:	add	r4, r4, #1
   14fe0:	movt	r6, #1
   14fe4:	str	r2, [sp, #8]
   14fe8:	str	r6, [r1, #8]
   14fec:	str	r3, [r1, #12]
   14ff0:	str	r4, [sp, #12]
   14ff4:	cmp	r2, #0
   14ff8:	ble	15074 <flatcc_builder_create_struct@@Base+0x108>
   14ffc:	sub	r6, r0, r2
   15000:	ldr	r0, [r5, #36]	; 0x24
   15004:	ldr	ip, [r5, #44]	; 0x2c
   15008:	add	r1, sp, #8
   1500c:	str	r2, [sp]
   15010:	mov	r2, r4
   15014:	add	r1, r1, #8
   15018:	mov	r3, r6
   1501c:	blx	ip
   15020:	cmp	r0, #0
   15024:	streq	r6, [r5, #136]	; 0x88
   15028:	moveq	r0, r6
   1502c:	subeq	sp, fp, #16
   15030:	popeq	{r4, r5, r6, sl, fp, pc}
   15034:	movw	r0, #63345	; 0xf771
   15038:	movw	r1, #58827	; 0xe5cb
   1503c:	movw	r3, #63024	; 0xf630
   15040:	movw	r2, #651	; 0x28b
   15044:	movt	r0, #1
   15048:	movt	r1, #1
   1504c:	movt	r3, #1
   15050:	bl	129c4 <__assert_fail@plt>
   15054:	movw	r0, #59273	; 0xe789
   15058:	movw	r1, #58827	; 0xe5cb
   1505c:	movw	r3, #59284	; 0xe794
   15060:	movw	r2, #783	; 0x30f
   15064:	movt	r0, #1
   15068:	movt	r1, #1
   1506c:	movt	r3, #1
   15070:	bl	129c4 <__assert_fail@plt>
   15074:	movw	r0, #63345	; 0xf771
   15078:	movw	r1, #58827	; 0xe5cb
   1507c:	movw	r3, #63024	; 0xf630
   15080:	movw	r2, #647	; 0x287
   15084:	movt	r0, #1
   15088:	movt	r1, #1
   1508c:	movt	r3, #1
   15090:	bl	129c4 <__assert_fail@plt>

00015094 <flatcc_builder_start_buffer@@Base>:
   15094:	push	{r4, r5, r6, r7, fp, lr}
   15098:	add	fp, sp, #16
   1509c:	mov	r5, r1
   150a0:	ldrh	r1, [r0, #128]	; 0x80
   150a4:	mov	r6, r3
   150a8:	mov	r7, r2
   150ac:	mov	r4, r0
   150b0:	bl	15150 <flatcc_builder_start_buffer@@Base+0xbc>
   150b4:	mov	r1, r0
   150b8:	mvn	r0, #0
   150bc:	cmp	r1, #0
   150c0:	popne	{r4, r5, r6, r7, fp, pc}
   150c4:	mov	r0, #1
   150c8:	cmp	r5, #0
   150cc:	strh	r0, [r4, #128]	; 0x80
   150d0:	ldrh	r1, [r4, #132]	; 0x84
   150d4:	ldr	r2, [r4, #32]
   150d8:	strh	r1, [r2, #34]	; 0x22
   150dc:	strh	r7, [r4, #132]	; 0x84
   150e0:	ldrh	r1, [r4, #164]	; 0xa4
   150e4:	ldr	r2, [r4, #32]
   150e8:	strh	r1, [r2, #32]
   150ec:	strh	r6, [r4, #164]	; 0xa4
   150f0:	ldr	r1, [r4, #32]
   150f4:	ldr	r2, [r4, #144]	; 0x90
   150f8:	str	r2, [r1, #20]
   150fc:	ldr	r1, [r4, #32]
   15100:	ldr	r2, [r4, #152]	; 0x98
   15104:	str	r2, [r1, #28]
   15108:	ldr	r3, [r4, #148]	; 0x94
   1510c:	ldr	r1, [r4, #32]
   15110:	ldr	r2, [r4, #136]	; 0x88
   15114:	ldr	r7, [r4, #168]	; 0xa8
   15118:	add	r6, r3, #1
   1511c:	str	r2, [r4, #144]	; 0x90
   15120:	str	r6, [r4, #148]	; 0x94
   15124:	str	r3, [r4, #152]	; 0x98
   15128:	str	r7, [r1, #16]
   1512c:	movw	r1, #58297	; 0xe3b9
   15130:	movt	r1, #1
   15134:	movne	r1, r5
   15138:	ldr	r1, [r1]
   1513c:	str	r1, [r4, #168]	; 0xa8
   15140:	ldr	r1, [r4, #32]
   15144:	strh	r0, [r1, #14]
   15148:	mov	r0, #0
   1514c:	pop	{r4, r5, r6, r7, fp, pc}
   15150:	push	{r4, r5, r6, r7, fp, lr}
   15154:	add	fp, sp, #16
   15158:	sub	sp, sp, #8
   1515c:	mov	r5, r1
   15160:	ldr	r1, [r0, #156]	; 0x9c
   15164:	ldr	r2, [r0, #160]	; 0xa0
   15168:	mov	r4, r0
   1516c:	add	r0, r1, #1
   15170:	cmp	r1, r2
   15174:	str	r0, [r4, #156]	; 0x9c
   15178:	bge	1518c <flatcc_builder_start_buffer@@Base+0xf8>
   1517c:	ldr	r0, [r4, #32]
   15180:	add	r0, r0, #36	; 0x24
   15184:	str	r0, [r4, #32]
   15188:	b	15220 <flatcc_builder_start_buffer@@Base+0x18c>
   1518c:	ldr	r2, [r4, #176]	; 0xb0
   15190:	mvn	r6, #0
   15194:	cmp	r2, #1
   15198:	cmpge	r1, r2
   1519c:	bge	15258 <flatcc_builder_start_buffer@@Base+0x1c4>
   151a0:	add	r7, r0, r0, lsl #3
   151a4:	ldr	r0, [r4, #88]	; 0x58
   151a8:	lsl	r2, r7, #2
   151ac:	cmp	r2, r0
   151b0:	bls	151d8 <flatcc_builder_start_buffer@@Base+0x144>
   151b4:	ldr	r0, [r4, #40]	; 0x28
   151b8:	ldr	ip, [r4, #48]	; 0x30
   151bc:	mov	r3, #4
   151c0:	add	r1, r4, #84	; 0x54
   151c4:	str	r3, [sp]
   151c8:	mov	r3, #0
   151cc:	blx	ip
   151d0:	cmp	r0, #0
   151d4:	bne	15264 <flatcc_builder_start_buffer@@Base+0x1d0>
   151d8:	ldr	r1, [r4, #84]	; 0x54
   151dc:	mvn	r0, #35	; 0x23
   151e0:	add	r0, r0, r7, lsl #2
   151e4:	adds	r0, r0, r1
   151e8:	str	r0, [r4, #32]
   151ec:	beq	15258 <flatcc_builder_start_buffer@@Base+0x1c4>
   151f0:	ldr	r1, [r4, #88]	; 0x58
   151f4:	movw	r3, #36409	; 0x8e39
   151f8:	ldr	r2, [r4, #176]	; 0xb0
   151fc:	movt	r3, #14563	; 0x38e3
   15200:	umull	r1, r3, r1, r3
   15204:	lsr	r1, r3, #3
   15208:	cmp	r2, r3, lsr #3
   1520c:	mov	r3, r1
   15210:	movlt	r3, r2
   15214:	cmp	r2, #0
   15218:	movle	r3, r1
   1521c:	str	r3, [r4, #160]	; 0xa0
   15220:	ldr	r1, [r4, #20]
   15224:	mvn	r3, #3
   15228:	mov	r6, #0
   1522c:	str	r1, [r0, #8]
   15230:	ldrh	r2, [r4, #130]	; 0x82
   15234:	strh	r2, [r0, #12]
   15238:	strh	r5, [r4, #130]	; 0x82
   1523c:	ldr	r2, [r4, #28]
   15240:	stm	r0, {r2, r3}
   15244:	add	r0, r1, r2
   15248:	str	r6, [r4, #20]
   1524c:	add	r0, r0, #7
   15250:	bic	r0, r0, #7
   15254:	str	r0, [r4, #28]
   15258:	mov	r0, r6
   1525c:	sub	sp, fp, #16
   15260:	pop	{r4, r5, r6, r7, fp, pc}
   15264:	movw	r0, #63345	; 0xf771
   15268:	movw	r1, #58827	; 0xe5cb
   1526c:	movw	r3, #62891	; 0xf5ab
   15270:	mov	r2, #308	; 0x134
   15274:	movt	r0, #1
   15278:	movt	r1, #1
   1527c:	movt	r3, #1
   15280:	bl	129c4 <__assert_fail@plt>

00015284 <flatcc_builder_end_buffer@@Base>:
   15284:	push	{r4, r5, r6, sl, fp, lr}
   15288:	add	fp, sp, #16
   1528c:	sub	sp, sp, #8
   15290:	mov	r4, r0
   15294:	ldr	r0, [r0, #32]
   15298:	ldrh	r0, [r0, #14]
   1529c:	cmp	r0, #1
   152a0:	bne	15394 <flatcc_builder_end_buffer@@Base+0x110>
   152a4:	mov	r3, r1
   152a8:	ldr	r1, [r4, #152]	; 0x98
   152ac:	ldrh	r0, [r4, #164]	; 0xa4
   152b0:	ldrh	r2, [r4, #132]	; 0x84
   152b4:	cmp	r1, #0
   152b8:	ldrh	r1, [r4, #128]	; 0x80
   152bc:	and	r0, r0, #2
   152c0:	orrne	r0, r0, #1
   152c4:	cmp	r1, r2
   152c8:	movcc	r1, r2
   152cc:	strhcc	r2, [r4, #128]	; 0x80
   152d0:	str	r0, [sp, #4]
   152d4:	mov	r0, r4
   152d8:	str	r1, [sp]
   152dc:	add	r1, r4, #168	; 0xa8
   152e0:	bl	14d50 <flatcc_builder_create_buffer@@Base>
   152e4:	mov	r6, r0
   152e8:	cmp	r0, #0
   152ec:	beq	15388 <flatcc_builder_end_buffer@@Base+0x104>
   152f0:	ldr	r1, [r4, #32]
   152f4:	ldr	r0, [r4, #16]
   152f8:	ldr	r2, [r4, #20]
   152fc:	ldr	r3, [r1, #20]
   15300:	str	r3, [r4, #144]	; 0x90
   15304:	ldr	r3, [r1, #28]
   15308:	str	r3, [r4, #152]	; 0x98
   1530c:	ldr	r3, [r1, #16]
   15310:	str	r3, [r4, #168]	; 0xa8
   15314:	ldrh	r1, [r1, #32]
   15318:	strh	r1, [r4, #164]	; 0xa4
   1531c:	mov	r1, #0
   15320:	bl	12994 <memset@plt>
   15324:	ldr	r0, [r4, #32]
   15328:	ldr	r1, [r4, #60]	; 0x3c
   1532c:	ldr	r2, [r4, #64]	; 0x40
   15330:	ldr	r3, [r0, #8]
   15334:	str	r3, [r4, #20]
   15338:	ldr	r3, [r0]
   1533c:	str	r3, [r4, #28]
   15340:	add	r1, r1, r3
   15344:	ldr	r5, [r0, #4]
   15348:	str	r1, [r4, #16]
   1534c:	sub	r1, r2, r3
   15350:	cmp	r1, r5
   15354:	movhi	r1, r5
   15358:	str	r1, [r4, #24]
   1535c:	ldrh	r1, [r4, #130]	; 0x82
   15360:	ldrh	r2, [r4, #128]	; 0x80
   15364:	cmp	r2, r1
   15368:	strhcc	r1, [r4, #128]	; 0x80
   1536c:	ldrh	r1, [r0, #12]
   15370:	sub	r0, r0, #36	; 0x24
   15374:	str	r0, [r4, #32]
   15378:	strh	r1, [r4, #130]	; 0x82
   1537c:	ldr	r0, [r4, #156]	; 0x9c
   15380:	sub	r0, r0, #1
   15384:	str	r0, [r4, #156]	; 0x9c
   15388:	mov	r0, r6
   1538c:	sub	sp, fp, #16
   15390:	pop	{r4, r5, r6, sl, fp, pc}
   15394:	movw	r0, #59386	; 0xe7fa
   15398:	movw	r1, #58827	; 0xe5cb
   1539c:	movw	r3, #59430	; 0xe826
   153a0:	movw	r2, #838	; 0x346
   153a4:	movt	r0, #1
   153a8:	movt	r1, #1
   153ac:	movt	r3, #1
   153b0:	bl	129c4 <__assert_fail@plt>

000153b4 <flatcc_builder_start_struct@@Base>:
   153b4:	push	{r4, r5, r6, r7, fp, lr}
   153b8:	add	fp, sp, #16
   153bc:	sub	sp, sp, #8
   153c0:	mov	r6, r1
   153c4:	mov	r1, r2
   153c8:	mov	r4, r0
   153cc:	bl	15150 <flatcc_builder_start_buffer@@Base+0xbc>
   153d0:	mov	r5, #0
   153d4:	cmp	r0, #0
   153d8:	bne	15454 <flatcc_builder_start_struct@@Base+0xa0>
   153dc:	ldr	r2, [r4, #32]
   153e0:	mov	r0, #2
   153e4:	mvn	r7, #3
   153e8:	strh	r0, [r2, #14]
   153ec:	ldr	r1, [r4, #28]
   153f0:	ldr	r3, [r4, #64]	; 0x40
   153f4:	ldr	r0, [r4, #60]	; 0x3c
   153f8:	sub	r3, r3, r1
   153fc:	add	r0, r0, r1
   15400:	cmn	r3, #4
   15404:	str	r0, [r4, #16]
   15408:	movcs	r3, r7
   1540c:	str	r3, [r4, #24]
   15410:	str	r7, [r2, #4]
   15414:	ldr	r7, [r4, #20]
   15418:	add	r2, r7, r6
   1541c:	cmp	r2, r3
   15420:	str	r2, [r4, #20]
   15424:	bcc	15490 <flatcc_builder_start_struct@@Base+0xdc>
   15428:	ldr	r0, [r4, #40]	; 0x28
   1542c:	ldr	r6, [r4, #48]	; 0x30
   15430:	add	r1, r1, r2
   15434:	mov	r3, #1
   15438:	str	r3, [sp]
   1543c:	add	r2, r1, #1
   15440:	add	r1, r4, #60	; 0x3c
   15444:	mov	r3, #1
   15448:	blx	r6
   1544c:	cmp	r0, #0
   15450:	beq	15460 <flatcc_builder_start_struct@@Base+0xac>
   15454:	mov	r0, r5
   15458:	sub	sp, fp, #16
   1545c:	pop	{r4, r5, r6, r7, fp, pc}
   15460:	ldr	r1, [r4, #28]
   15464:	ldr	r0, [r4, #60]	; 0x3c
   15468:	ldr	r3, [r4, #64]	; 0x40
   1546c:	ldr	r2, [r4, #32]
   15470:	add	r0, r0, r1
   15474:	sub	r1, r3, r1
   15478:	mvn	r3, #3
   1547c:	cmn	r1, #4
   15480:	str	r0, [r4, #16]
   15484:	movcs	r1, r3
   15488:	str	r1, [r4, #24]
   1548c:	str	r3, [r2, #4]
   15490:	add	r5, r0, r7
   15494:	mov	r0, r5
   15498:	sub	sp, fp, #16
   1549c:	pop	{r4, r5, r6, r7, fp, pc}

000154a0 <flatcc_builder_struct_edit@@Base>:
   154a0:	ldr	r0, [r0, #16]
   154a4:	bx	lr

000154a8 <flatcc_builder_end_struct@@Base>:
   154a8:	push	{r4, r5, fp, lr}
   154ac:	add	fp, sp, #8
   154b0:	mov	r4, r0
   154b4:	ldr	r0, [r0, #32]
   154b8:	ldrh	r0, [r0, #14]
   154bc:	cmp	r0, #2
   154c0:	bne	15560 <flatcc_builder_end_struct@@Base+0xb8>
   154c4:	ldrh	r3, [r4, #130]	; 0x82
   154c8:	ldr	r1, [r4, #16]
   154cc:	ldr	r2, [r4, #20]
   154d0:	mov	r0, r4
   154d4:	bl	14f6c <flatcc_builder_create_struct@@Base>
   154d8:	mov	r5, r0
   154dc:	cmp	r0, #0
   154e0:	beq	15558 <flatcc_builder_end_struct@@Base+0xb0>
   154e4:	ldr	r0, [r4, #16]
   154e8:	ldr	r2, [r4, #20]
   154ec:	mov	r1, #0
   154f0:	bl	12994 <memset@plt>
   154f4:	ldr	r0, [r4, #32]
   154f8:	ldr	r1, [r4, #60]	; 0x3c
   154fc:	ldr	ip, [r4, #64]	; 0x40
   15500:	ldr	r3, [r0, #8]
   15504:	str	r3, [r4, #20]
   15508:	ldr	r3, [r0]
   1550c:	str	r3, [r4, #28]
   15510:	add	r1, r1, r3
   15514:	ldr	r2, [r0, #4]
   15518:	str	r1, [r4, #16]
   1551c:	sub	r1, ip, r3
   15520:	cmp	r1, r2
   15524:	movhi	r1, r2
   15528:	str	r1, [r4, #24]
   1552c:	ldrh	r1, [r4, #130]	; 0x82
   15530:	ldrh	r2, [r4, #128]	; 0x80
   15534:	cmp	r2, r1
   15538:	strhcc	r1, [r4, #128]	; 0x80
   1553c:	ldrh	r1, [r0, #12]
   15540:	sub	r0, r0, #36	; 0x24
   15544:	str	r0, [r4, #32]
   15548:	strh	r1, [r4, #130]	; 0x82
   1554c:	ldr	r0, [r4, #156]	; 0x9c
   15550:	sub	r0, r0, #1
   15554:	str	r0, [r4, #156]	; 0x9c
   15558:	mov	r0, r5
   1555c:	pop	{r4, r5, fp, pc}
   15560:	movw	r0, #59519	; 0xe87f
   15564:	movw	r1, #58827	; 0xe5cb
   15568:	movw	r3, #59563	; 0xe8ab
   1556c:	mov	r2, #872	; 0x368
   15570:	movt	r0, #1
   15574:	movt	r1, #1
   15578:	movt	r3, #1
   1557c:	bl	129c4 <__assert_fail@plt>

00015580 <flatcc_builder_extend_vector@@Base>:
   15580:	push	{r4, r5, fp, lr}
   15584:	add	fp, sp, #8
   15588:	sub	sp, sp, #8
   1558c:	mov	r4, r0
   15590:	ldr	r0, [r0, #32]
   15594:	ldr	r2, [r0, #20]
   15598:	adds	r2, r2, r1
   1559c:	bcs	1565c <flatcc_builder_extend_vector@@Base+0xdc>
   155a0:	ldr	r3, [r0, #24]
   155a4:	cmp	r2, r3
   155a8:	bhi	1565c <flatcc_builder_extend_vector@@Base+0xdc>
   155ac:	str	r2, [r0, #20]
   155b0:	ldr	r2, [r4, #32]
   155b4:	ldr	r5, [r4, #20]
   155b8:	ldr	r0, [r4, #24]
   155bc:	ldr	r2, [r2, #16]
   155c0:	mla	r1, r2, r1, r5
   155c4:	cmp	r1, r0
   155c8:	str	r1, [r4, #20]
   155cc:	bcs	155e0 <flatcc_builder_extend_vector@@Base+0x60>
   155d0:	ldr	r0, [r4, #16]
   155d4:	add	r0, r0, r5
   155d8:	sub	sp, fp, #8
   155dc:	pop	{r4, r5, fp, pc}
   155e0:	ldr	r2, [r4, #28]
   155e4:	ldr	r0, [r4, #40]	; 0x28
   155e8:	ldr	ip, [r4, #48]	; 0x30
   155ec:	mov	r3, #1
   155f0:	str	r3, [sp]
   155f4:	mov	r3, #1
   155f8:	add	r1, r1, r2
   155fc:	add	r2, r1, #1
   15600:	add	r1, r4, #60	; 0x3c
   15604:	blx	ip
   15608:	mov	r1, r0
   1560c:	mov	r0, #0
   15610:	cmp	r1, #0
   15614:	beq	15620 <flatcc_builder_extend_vector@@Base+0xa0>
   15618:	sub	sp, fp, #8
   1561c:	pop	{r4, r5, fp, pc}
   15620:	ldr	r1, [r4, #28]
   15624:	ldr	r0, [r4, #60]	; 0x3c
   15628:	ldr	r3, [r4, #64]	; 0x40
   1562c:	ldr	r2, [r4, #32]
   15630:	add	r0, r0, r1
   15634:	sub	r1, r3, r1
   15638:	mvn	r3, #3
   1563c:	cmn	r1, #4
   15640:	str	r0, [r4, #16]
   15644:	movcs	r1, r3
   15648:	str	r1, [r4, #24]
   1564c:	str	r3, [r2, #4]
   15650:	add	r0, r0, r5
   15654:	sub	sp, fp, #8
   15658:	pop	{r4, r5, fp, pc}
   1565c:	movw	r0, #63098	; 0xf67a
   15660:	movw	r1, #58827	; 0xe5cb
   15664:	movw	r3, #63125	; 0xf695
   15668:	mov	r2, #892	; 0x37c
   1566c:	movt	r0, #1
   15670:	movt	r1, #1
   15674:	movt	r3, #1
   15678:	bl	129c4 <__assert_fail@plt>

0001567c <flatcc_builder_vector_push@@Base>:
   1567c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15680:	add	fp, sp, #24
   15684:	sub	sp, sp, #8
   15688:	mov	r5, r0
   1568c:	ldr	r0, [r0, #32]
   15690:	mov	r8, r1
   15694:	ldrh	r1, [r0, #14]
   15698:	cmp	r1, #4
   1569c:	bne	15788 <flatcc_builder_vector_push@@Base+0x10c>
   156a0:	ldr	r1, [r0, #20]
   156a4:	ldr	r2, [r0, #24]
   156a8:	cmp	r1, r2
   156ac:	bhi	157a8 <flatcc_builder_vector_push@@Base+0x12c>
   156b0:	add	r1, r1, #1
   156b4:	str	r1, [r0, #20]
   156b8:	ldr	r1, [r5, #32]
   156bc:	ldr	r4, [r5, #20]
   156c0:	ldr	r0, [r5, #24]
   156c4:	ldr	r6, [r1, #16]
   156c8:	add	r1, r4, r6
   156cc:	cmp	r1, r0
   156d0:	str	r1, [r5, #20]
   156d4:	bcs	15700 <flatcc_builder_vector_push@@Base+0x84>
   156d8:	ldr	r0, [r5, #16]
   156dc:	adds	r7, r0, r4
   156e0:	beq	15778 <flatcc_builder_vector_push@@Base+0xfc>
   156e4:	mov	r0, r7
   156e8:	mov	r1, r8
   156ec:	mov	r2, r6
   156f0:	bl	12904 <memcpy@plt>
   156f4:	mov	r0, r7
   156f8:	sub	sp, fp, #24
   156fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15700:	ldr	r2, [r5, #28]
   15704:	ldr	r0, [r5, #40]	; 0x28
   15708:	ldr	r7, [r5, #48]	; 0x30
   1570c:	mov	r3, #1
   15710:	str	r3, [sp]
   15714:	mov	r3, #1
   15718:	add	r1, r1, r2
   1571c:	add	r2, r1, #1
   15720:	add	r1, r5, #60	; 0x3c
   15724:	blx	r7
   15728:	mov	r7, #0
   1572c:	cmp	r0, #0
   15730:	beq	15740 <flatcc_builder_vector_push@@Base+0xc4>
   15734:	mov	r0, r7
   15738:	sub	sp, fp, #24
   1573c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15740:	ldr	r1, [r5, #28]
   15744:	ldr	r0, [r5, #60]	; 0x3c
   15748:	ldr	r3, [r5, #64]	; 0x40
   1574c:	ldr	r2, [r5, #32]
   15750:	add	r0, r0, r1
   15754:	sub	r1, r3, r1
   15758:	mvn	r3, #3
   1575c:	cmn	r1, #4
   15760:	str	r0, [r5, #16]
   15764:	movcs	r1, r3
   15768:	str	r1, [r5, #24]
   1576c:	str	r3, [r2, #4]
   15770:	adds	r7, r0, r4
   15774:	bne	156e4 <flatcc_builder_vector_push@@Base+0x68>
   15778:	mov	r7, #0
   1577c:	mov	r0, r7
   15780:	sub	sp, fp, #24
   15784:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15788:	movw	r0, #59630	; 0xe8ee
   1578c:	movw	r1, #58827	; 0xe5cb
   15790:	movw	r3, #59674	; 0xe91a
   15794:	movw	r2, #907	; 0x38b
   15798:	movt	r0, #1
   1579c:	movt	r1, #1
   157a0:	movt	r3, #1
   157a4:	bl	129c4 <__assert_fail@plt>
   157a8:	movw	r0, #59741	; 0xe95d
   157ac:	movw	r1, #58827	; 0xe5cb
   157b0:	movw	r3, #59674	; 0xe91a
   157b4:	mov	r2, #908	; 0x38c
   157b8:	movt	r0, #1
   157bc:	movt	r1, #1
   157c0:	movt	r3, #1
   157c4:	bl	129c4 <__assert_fail@plt>

000157c8 <flatcc_builder_append_vector@@Base>:
   157c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   157cc:	add	fp, sp, #24
   157d0:	sub	sp, sp, #8
   157d4:	mov	r6, r0
   157d8:	ldr	r0, [r0, #32]
   157dc:	mov	r8, r1
   157e0:	ldrh	r1, [r0, #14]
   157e4:	cmp	r1, #4
   157e8:	bne	158fc <flatcc_builder_append_vector@@Base+0x134>
   157ec:	ldr	r1, [r0, #20]
   157f0:	mov	r5, r2
   157f4:	adds	r1, r1, r2
   157f8:	bcs	158dc <flatcc_builder_append_vector@@Base+0x114>
   157fc:	ldr	r2, [r0, #24]
   15800:	cmp	r1, r2
   15804:	bhi	158dc <flatcc_builder_append_vector@@Base+0x114>
   15808:	str	r1, [r0, #20]
   1580c:	ldr	r1, [r6, #32]
   15810:	ldr	r4, [r6, #20]
   15814:	ldr	r0, [r6, #24]
   15818:	ldr	r9, [r1, #16]
   1581c:	mla	r1, r9, r5, r4
   15820:	cmp	r1, r0
   15824:	str	r1, [r6, #20]
   15828:	bcs	15854 <flatcc_builder_append_vector@@Base+0x8c>
   1582c:	ldr	r0, [r6, #16]
   15830:	adds	r7, r0, r4
   15834:	beq	158cc <flatcc_builder_append_vector@@Base+0x104>
   15838:	mul	r2, r9, r5
   1583c:	mov	r0, r7
   15840:	mov	r1, r8
   15844:	bl	12904 <memcpy@plt>
   15848:	mov	r0, r7
   1584c:	sub	sp, fp, #24
   15850:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15854:	ldr	r2, [r6, #28]
   15858:	ldr	r0, [r6, #40]	; 0x28
   1585c:	ldr	r7, [r6, #48]	; 0x30
   15860:	mov	r3, #1
   15864:	str	r3, [sp]
   15868:	mov	r3, #1
   1586c:	add	r1, r1, r2
   15870:	add	r2, r1, #1
   15874:	add	r1, r6, #60	; 0x3c
   15878:	blx	r7
   1587c:	mov	r7, #0
   15880:	cmp	r0, #0
   15884:	beq	15894 <flatcc_builder_append_vector@@Base+0xcc>
   15888:	mov	r0, r7
   1588c:	sub	sp, fp, #24
   15890:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15894:	ldr	r1, [r6, #28]
   15898:	ldr	r0, [r6, #60]	; 0x3c
   1589c:	ldr	r3, [r6, #64]	; 0x40
   158a0:	ldr	r2, [r6, #32]
   158a4:	add	r0, r0, r1
   158a8:	sub	r1, r3, r1
   158ac:	mvn	r3, #3
   158b0:	cmn	r1, #4
   158b4:	str	r0, [r6, #16]
   158b8:	movcs	r1, r3
   158bc:	str	r1, [r6, #24]
   158c0:	str	r3, [r2, #4]
   158c4:	adds	r7, r0, r4
   158c8:	bne	15838 <flatcc_builder_append_vector@@Base+0x70>
   158cc:	mov	r7, #0
   158d0:	mov	r0, r7
   158d4:	sub	sp, fp, #24
   158d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   158dc:	movw	r0, #63098	; 0xf67a
   158e0:	movw	r1, #58827	; 0xe5cb
   158e4:	movw	r3, #63125	; 0xf695
   158e8:	mov	r2, #892	; 0x37c
   158ec:	movt	r0, #1
   158f0:	movt	r1, #1
   158f4:	movt	r3, #1
   158f8:	bl	129c4 <__assert_fail@plt>
   158fc:	movw	r0, #59630	; 0xe8ee
   15900:	movw	r1, #58827	; 0xe5cb
   15904:	movw	r3, #59802	; 0xe99a
   15908:	movw	r2, #915	; 0x393
   1590c:	movt	r0, #1
   15910:	movt	r1, #1
   15914:	movt	r3, #1
   15918:	bl	129c4 <__assert_fail@plt>

0001591c <flatcc_builder_extend_offset_vector@@Base>:
   1591c:	push	{r4, r5, fp, lr}
   15920:	add	fp, sp, #8
   15924:	sub	sp, sp, #8
   15928:	mov	r4, r0
   1592c:	ldr	r0, [r0, #32]
   15930:	ldr	r2, [r0, #20]
   15934:	adds	r2, r2, r1
   15938:	cmpcc	r2, #1073741824	; 0x40000000
   1593c:	bcc	15960 <flatcc_builder_extend_offset_vector@@Base+0x44>
   15940:	movw	r0, #63098	; 0xf67a
   15944:	movw	r1, #58827	; 0xe5cb
   15948:	movw	r3, #63125	; 0xf695
   1594c:	mov	r2, #892	; 0x37c
   15950:	movt	r0, #1
   15954:	movt	r1, #1
   15958:	movt	r3, #1
   1595c:	bl	129c4 <__assert_fail@plt>
   15960:	str	r2, [r0, #20]
   15964:	ldr	r5, [r4, #20]
   15968:	ldr	r0, [r4, #24]
   1596c:	add	r1, r5, r1, lsl #2
   15970:	cmp	r1, r0
   15974:	str	r1, [r4, #20]
   15978:	bcs	1598c <flatcc_builder_extend_offset_vector@@Base+0x70>
   1597c:	ldr	r0, [r4, #16]
   15980:	add	r0, r0, r5
   15984:	sub	sp, fp, #8
   15988:	pop	{r4, r5, fp, pc}
   1598c:	ldr	r2, [r4, #28]
   15990:	ldr	r0, [r4, #40]	; 0x28
   15994:	ldr	ip, [r4, #48]	; 0x30
   15998:	mov	r3, #1
   1599c:	str	r3, [sp]
   159a0:	mov	r3, #1
   159a4:	add	r1, r1, r2
   159a8:	add	r2, r1, #1
   159ac:	add	r1, r4, #60	; 0x3c
   159b0:	blx	ip
   159b4:	mov	r1, r0
   159b8:	mov	r0, #0
   159bc:	cmp	r1, #0
   159c0:	beq	159cc <flatcc_builder_extend_offset_vector@@Base+0xb0>
   159c4:	sub	sp, fp, #8
   159c8:	pop	{r4, r5, fp, pc}
   159cc:	ldr	r1, [r4, #28]
   159d0:	ldr	r0, [r4, #60]	; 0x3c
   159d4:	ldr	r3, [r4, #64]	; 0x40
   159d8:	ldr	r2, [r4, #32]
   159dc:	add	r0, r0, r1
   159e0:	sub	r1, r3, r1
   159e4:	mvn	r3, #3
   159e8:	cmn	r1, #4
   159ec:	str	r0, [r4, #16]
   159f0:	movcs	r1, r3
   159f4:	str	r1, [r4, #24]
   159f8:	str	r3, [r2, #4]
   159fc:	add	r0, r0, r5
   15a00:	sub	sp, fp, #8
   15a04:	pop	{r4, r5, fp, pc}

00015a08 <flatcc_builder_offset_vector_push@@Base>:
   15a08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a0c:	add	fp, sp, #24
   15a10:	sub	sp, sp, #8
   15a14:	mov	r6, r0
   15a18:	ldr	r0, [r0, #32]
   15a1c:	mov	r8, r1
   15a20:	ldrh	r1, [r0, #14]
   15a24:	cmp	r1, #5
   15a28:	bne	15ae8 <flatcc_builder_offset_vector_push@@Base+0xe0>
   15a2c:	ldr	r1, [r0, #20]
   15a30:	mov	r5, #0
   15a34:	cmn	r1, #-1073741823	; 0xc0000001
   15a38:	beq	15a94 <flatcc_builder_offset_vector_push@@Base+0x8c>
   15a3c:	add	r1, r1, #1
   15a40:	str	r1, [r0, #20]
   15a44:	ldr	r7, [r6, #20]
   15a48:	ldr	r0, [r6, #24]
   15a4c:	add	r1, r7, #4
   15a50:	cmp	r1, r0
   15a54:	str	r1, [r6, #20]
   15a58:	bcs	15a64 <flatcc_builder_offset_vector_push@@Base+0x5c>
   15a5c:	ldr	r0, [r6, #16]
   15a60:	b	15ad0 <flatcc_builder_offset_vector_push@@Base+0xc8>
   15a64:	ldr	r1, [r6, #28]
   15a68:	ldr	r0, [r6, #40]	; 0x28
   15a6c:	ldr	r4, [r6, #48]	; 0x30
   15a70:	mov	r2, #1
   15a74:	mov	r3, #1
   15a78:	str	r2, [sp]
   15a7c:	add	r1, r7, r1
   15a80:	add	r2, r1, #5
   15a84:	add	r1, r6, #60	; 0x3c
   15a88:	blx	r4
   15a8c:	cmp	r0, #0
   15a90:	beq	15aa0 <flatcc_builder_offset_vector_push@@Base+0x98>
   15a94:	mov	r0, r5
   15a98:	sub	sp, fp, #24
   15a9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15aa0:	ldr	r1, [r6, #28]
   15aa4:	ldr	r0, [r6, #60]	; 0x3c
   15aa8:	ldr	r3, [r6, #64]	; 0x40
   15aac:	ldr	r2, [r6, #32]
   15ab0:	add	r0, r0, r1
   15ab4:	sub	r1, r3, r1
   15ab8:	mvn	r3, #3
   15abc:	cmn	r1, #4
   15ac0:	str	r0, [r6, #16]
   15ac4:	movcs	r1, r3
   15ac8:	str	r1, [r6, #24]
   15acc:	str	r3, [r2, #4]
   15ad0:	adds	r0, r0, r7
   15ad4:	movne	r5, r0
   15ad8:	strne	r8, [r0]
   15adc:	mov	r0, r5
   15ae0:	sub	sp, fp, #24
   15ae4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ae8:	movw	r0, #59879	; 0xe9e7
   15aec:	movw	r1, #58827	; 0xe5cb
   15af0:	movw	r3, #59930	; 0xea1a
   15af4:	movw	r2, #934	; 0x3a6
   15af8:	movt	r0, #1
   15afc:	movt	r1, #1
   15b00:	movt	r3, #1
   15b04:	bl	129c4 <__assert_fail@plt>

00015b08 <flatcc_builder_append_offset_vector@@Base>:
   15b08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b0c:	add	fp, sp, #24
   15b10:	sub	sp, sp, #8
   15b14:	mov	r6, r0
   15b18:	ldr	r0, [r0, #32]
   15b1c:	mov	r8, r1
   15b20:	ldrh	r1, [r0, #14]
   15b24:	cmp	r1, #5
   15b28:	bne	15c2c <flatcc_builder_append_offset_vector@@Base+0x124>
   15b2c:	ldr	r1, [r0, #20]
   15b30:	mov	r5, r2
   15b34:	adds	r1, r1, r2
   15b38:	cmpcc	r1, #1073741824	; 0x40000000
   15b3c:	bcc	15b60 <flatcc_builder_append_offset_vector@@Base+0x58>
   15b40:	movw	r0, #63098	; 0xf67a
   15b44:	movw	r1, #58827	; 0xe5cb
   15b48:	movw	r3, #63125	; 0xf695
   15b4c:	mov	r2, #892	; 0x37c
   15b50:	movt	r0, #1
   15b54:	movt	r1, #1
   15b58:	movt	r3, #1
   15b5c:	bl	129c4 <__assert_fail@plt>
   15b60:	str	r1, [r0, #20]
   15b64:	ldr	r4, [r6, #20]
   15b68:	ldr	r0, [r6, #24]
   15b6c:	add	r1, r4, r5, lsl #2
   15b70:	cmp	r1, r0
   15b74:	str	r1, [r6, #20]
   15b78:	bcs	15ba4 <flatcc_builder_append_offset_vector@@Base+0x9c>
   15b7c:	ldr	r0, [r6, #16]
   15b80:	adds	r7, r0, r4
   15b84:	beq	15c1c <flatcc_builder_append_offset_vector@@Base+0x114>
   15b88:	lsl	r2, r5, #2
   15b8c:	mov	r0, r7
   15b90:	mov	r1, r8
   15b94:	bl	12904 <memcpy@plt>
   15b98:	mov	r0, r7
   15b9c:	sub	sp, fp, #24
   15ba0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ba4:	ldr	r2, [r6, #28]
   15ba8:	ldr	r0, [r6, #40]	; 0x28
   15bac:	ldr	r7, [r6, #48]	; 0x30
   15bb0:	mov	r3, #1
   15bb4:	str	r3, [sp]
   15bb8:	mov	r3, #1
   15bbc:	add	r1, r1, r2
   15bc0:	add	r2, r1, #1
   15bc4:	add	r1, r6, #60	; 0x3c
   15bc8:	blx	r7
   15bcc:	mov	r7, #0
   15bd0:	cmp	r0, #0
   15bd4:	beq	15be4 <flatcc_builder_append_offset_vector@@Base+0xdc>
   15bd8:	mov	r0, r7
   15bdc:	sub	sp, fp, #24
   15be0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15be4:	ldr	r1, [r6, #28]
   15be8:	ldr	r0, [r6, #60]	; 0x3c
   15bec:	ldr	r3, [r6, #64]	; 0x40
   15bf0:	ldr	r2, [r6, #32]
   15bf4:	add	r0, r0, r1
   15bf8:	sub	r1, r3, r1
   15bfc:	mvn	r3, #3
   15c00:	cmn	r1, #4
   15c04:	str	r0, [r6, #16]
   15c08:	movcs	r1, r3
   15c0c:	str	r1, [r6, #24]
   15c10:	str	r3, [r2, #4]
   15c14:	adds	r7, r0, r4
   15c18:	bne	15b88 <flatcc_builder_append_offset_vector@@Base+0x80>
   15c1c:	mov	r7, #0
   15c20:	mov	r0, r7
   15c24:	sub	sp, fp, #24
   15c28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c2c:	movw	r0, #59879	; 0xe9e7
   15c30:	movw	r1, #58827	; 0xe5cb
   15c34:	movw	r3, #60028	; 0xea7c
   15c38:	mov	r2, #948	; 0x3b4
   15c3c:	movt	r0, #1
   15c40:	movt	r1, #1
   15c44:	movt	r3, #1
   15c48:	bl	129c4 <__assert_fail@plt>

00015c4c <flatcc_builder_extend_string@@Base>:
   15c4c:	push	{r4, r5, fp, lr}
   15c50:	add	fp, sp, #8
   15c54:	sub	sp, sp, #8
   15c58:	mov	r4, r0
   15c5c:	ldr	r0, [r0, #32]
   15c60:	ldrh	r2, [r0, #14]
   15c64:	cmp	r2, #6
   15c68:	bne	15d20 <flatcc_builder_extend_string@@Base+0xd4>
   15c6c:	ldr	r2, [r0, #20]
   15c70:	adds	r2, r2, r1
   15c74:	bcs	15d40 <flatcc_builder_extend_string@@Base+0xf4>
   15c78:	str	r2, [r0, #20]
   15c7c:	ldr	r5, [r4, #20]
   15c80:	ldr	r0, [r4, #24]
   15c84:	add	r1, r5, r1
   15c88:	cmp	r1, r0
   15c8c:	str	r1, [r4, #20]
   15c90:	bcs	15ca4 <flatcc_builder_extend_string@@Base+0x58>
   15c94:	ldr	r0, [r4, #16]
   15c98:	add	r0, r0, r5
   15c9c:	sub	sp, fp, #8
   15ca0:	pop	{r4, r5, fp, pc}
   15ca4:	ldr	r2, [r4, #28]
   15ca8:	ldr	r0, [r4, #40]	; 0x28
   15cac:	ldr	ip, [r4, #48]	; 0x30
   15cb0:	mov	r3, #1
   15cb4:	str	r3, [sp]
   15cb8:	mov	r3, #1
   15cbc:	add	r1, r1, r2
   15cc0:	add	r2, r1, #1
   15cc4:	add	r1, r4, #60	; 0x3c
   15cc8:	blx	ip
   15ccc:	mov	r1, r0
   15cd0:	mov	r0, #0
   15cd4:	cmp	r1, #0
   15cd8:	beq	15ce4 <flatcc_builder_extend_string@@Base+0x98>
   15cdc:	sub	sp, fp, #8
   15ce0:	pop	{r4, r5, fp, pc}
   15ce4:	ldr	r1, [r4, #28]
   15ce8:	ldr	r0, [r4, #60]	; 0x3c
   15cec:	ldr	r3, [r4, #64]	; 0x40
   15cf0:	ldr	r2, [r4, #32]
   15cf4:	add	r0, r0, r1
   15cf8:	sub	r1, r3, r1
   15cfc:	mvn	r3, #3
   15d00:	cmn	r1, #4
   15d04:	str	r0, [r4, #16]
   15d08:	movcs	r1, r3
   15d0c:	str	r1, [r4, #24]
   15d10:	str	r3, [r2, #4]
   15d14:	add	r0, r0, r5
   15d18:	sub	sp, fp, #8
   15d1c:	pop	{r4, r5, fp, pc}
   15d20:	movw	r0, #60144	; 0xeaf0
   15d24:	movw	r1, #58827	; 0xe5cb
   15d28:	movw	r3, #60188	; 0xeb1c
   15d2c:	movw	r2, #957	; 0x3bd
   15d30:	movt	r0, #1
   15d34:	movt	r1, #1
   15d38:	movt	r3, #1
   15d3c:	bl	129c4 <__assert_fail@plt>
   15d40:	movw	r0, #63098	; 0xf67a
   15d44:	movw	r1, #58827	; 0xe5cb
   15d48:	movw	r3, #63125	; 0xf695
   15d4c:	mov	r2, #892	; 0x37c
   15d50:	movt	r0, #1
   15d54:	movt	r1, #1
   15d58:	movt	r3, #1
   15d5c:	bl	129c4 <__assert_fail@plt>

00015d60 <flatcc_builder_append_string@@Base>:
   15d60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15d64:	add	fp, sp, #24
   15d68:	sub	sp, sp, #8
   15d6c:	mov	r6, r0
   15d70:	ldr	r0, [r0, #32]
   15d74:	mov	r8, r1
   15d78:	ldrh	r1, [r0, #14]
   15d7c:	cmp	r1, #6
   15d80:	bne	15e60 <flatcc_builder_append_string@@Base+0x100>
   15d84:	ldr	r1, [r0, #20]
   15d88:	mov	r4, r2
   15d8c:	adds	r1, r1, r2
   15d90:	bcs	15e80 <flatcc_builder_append_string@@Base+0x120>
   15d94:	str	r1, [r0, #20]
   15d98:	ldr	r5, [r6, #20]
   15d9c:	ldr	r0, [r6, #24]
   15da0:	add	r1, r5, r4
   15da4:	cmp	r1, r0
   15da8:	str	r1, [r6, #20]
   15dac:	bcs	15dd8 <flatcc_builder_append_string@@Base+0x78>
   15db0:	ldr	r0, [r6, #16]
   15db4:	adds	r7, r0, r5
   15db8:	beq	15e50 <flatcc_builder_append_string@@Base+0xf0>
   15dbc:	mov	r0, r7
   15dc0:	mov	r1, r8
   15dc4:	mov	r2, r4
   15dc8:	bl	12904 <memcpy@plt>
   15dcc:	mov	r0, r7
   15dd0:	sub	sp, fp, #24
   15dd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15dd8:	ldr	r2, [r6, #28]
   15ddc:	ldr	r0, [r6, #40]	; 0x28
   15de0:	ldr	r7, [r6, #48]	; 0x30
   15de4:	mov	r3, #1
   15de8:	str	r3, [sp]
   15dec:	mov	r3, #1
   15df0:	add	r1, r1, r2
   15df4:	add	r2, r1, #1
   15df8:	add	r1, r6, #60	; 0x3c
   15dfc:	blx	r7
   15e00:	mov	r7, #0
   15e04:	cmp	r0, #0
   15e08:	beq	15e18 <flatcc_builder_append_string@@Base+0xb8>
   15e0c:	mov	r0, r7
   15e10:	sub	sp, fp, #24
   15e14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e18:	ldr	r1, [r6, #28]
   15e1c:	ldr	r0, [r6, #60]	; 0x3c
   15e20:	ldr	r3, [r6, #64]	; 0x40
   15e24:	ldr	r2, [r6, #32]
   15e28:	add	r0, r0, r1
   15e2c:	sub	r1, r3, r1
   15e30:	mvn	r3, #3
   15e34:	cmn	r1, #4
   15e38:	str	r0, [r6, #16]
   15e3c:	movcs	r1, r3
   15e40:	str	r1, [r6, #24]
   15e44:	str	r3, [r2, #4]
   15e48:	adds	r7, r0, r5
   15e4c:	bne	15dbc <flatcc_builder_append_string@@Base+0x5c>
   15e50:	mov	r7, #0
   15e54:	mov	r0, r7
   15e58:	sub	sp, fp, #24
   15e5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e60:	movw	r0, #60144	; 0xeaf0
   15e64:	movw	r1, #58827	; 0xe5cb
   15e68:	movw	r3, #60251	; 0xeb5b
   15e6c:	movw	r2, #966	; 0x3c6
   15e70:	movt	r0, #1
   15e74:	movt	r1, #1
   15e78:	movt	r3, #1
   15e7c:	bl	129c4 <__assert_fail@plt>
   15e80:	movw	r0, #63098	; 0xf67a
   15e84:	movw	r1, #58827	; 0xe5cb
   15e88:	movw	r3, #63125	; 0xf695
   15e8c:	mov	r2, #892	; 0x37c
   15e90:	movt	r0, #1
   15e94:	movt	r1, #1
   15e98:	movt	r3, #1
   15e9c:	bl	129c4 <__assert_fail@plt>

00015ea0 <flatcc_builder_append_string_str@@Base>:
   15ea0:	push	{r4, r5, fp, lr}
   15ea4:	add	fp, sp, #8
   15ea8:	mov	r5, r0
   15eac:	mov	r0, r1
   15eb0:	mov	r4, r1
   15eb4:	bl	12970 <strlen@plt>
   15eb8:	mov	r2, r0
   15ebc:	mov	r0, r5
   15ec0:	mov	r1, r4
   15ec4:	pop	{r4, r5, fp, lr}
   15ec8:	b	15d60 <flatcc_builder_append_string@@Base>

00015ecc <flatcc_builder_append_string_strn@@Base>:
   15ecc:	push	{r4, r5, r6, sl, fp, lr}
   15ed0:	add	fp, sp, #16
   15ed4:	mov	r6, r0
   15ed8:	mov	r5, r1
   15edc:	mov	r0, r1
   15ee0:	mov	r1, #0
   15ee4:	mov	r4, r2
   15ee8:	bl	129ac <memchr@plt>
   15eec:	cmp	r0, #0
   15ef0:	mov	r1, r5
   15ef4:	subne	r4, r0, r5
   15ef8:	mov	r0, r6
   15efc:	mov	r2, r4
   15f00:	pop	{r4, r5, r6, sl, fp, lr}
   15f04:	b	15d60 <flatcc_builder_append_string@@Base>

00015f08 <flatcc_builder_truncate_vector@@Base>:
   15f08:	push	{fp, lr}
   15f0c:	mov	fp, sp
   15f10:	ldr	r2, [r0, #32]
   15f14:	ldrh	r3, [r2, #14]
   15f18:	cmp	r3, #4
   15f1c:	bne	15f64 <flatcc_builder_truncate_vector@@Base+0x5c>
   15f20:	ldr	r3, [r2, #20]
   15f24:	cmp	r3, r1
   15f28:	bcc	15f84 <flatcc_builder_truncate_vector@@Base+0x7c>
   15f2c:	sub	r3, r3, r1
   15f30:	str	r3, [r2, #20]
   15f34:	ldr	r2, [r0, #32]
   15f38:	ldr	r3, [r0, #20]
   15f3c:	ldr	ip, [r0, #16]
   15f40:	ldr	r2, [r2, #16]
   15f44:	mls	r3, r2, r1, r3
   15f48:	mul	r2, r2, r1
   15f4c:	mov	r1, #0
   15f50:	str	r3, [r0, #20]
   15f54:	add	r0, ip, r3
   15f58:	bl	12994 <memset@plt>
   15f5c:	mov	r0, #0
   15f60:	pop	{fp, pc}
   15f64:	movw	r0, #59630	; 0xe8ee
   15f68:	movw	r1, #58827	; 0xe5cb
   15f6c:	movw	r3, #60328	; 0xeba8
   15f70:	movw	r2, #985	; 0x3d9
   15f74:	movt	r0, #1
   15f78:	movt	r1, #1
   15f7c:	movt	r3, #1
   15f80:	bl	129c4 <__assert_fail@plt>
   15f84:	movw	r0, #60391	; 0xebe7
   15f88:	movw	r1, #58827	; 0xe5cb
   15f8c:	movw	r3, #60328	; 0xeba8
   15f90:	movw	r2, #986	; 0x3da
   15f94:	movt	r0, #1
   15f98:	movt	r1, #1
   15f9c:	movt	r3, #1
   15fa0:	bl	129c4 <__assert_fail@plt>

00015fa4 <flatcc_builder_truncate_offset_vector@@Base>:
   15fa4:	push	{fp, lr}
   15fa8:	mov	fp, sp
   15fac:	ldr	r2, [r0, #32]
   15fb0:	ldrh	r3, [r2, #14]
   15fb4:	cmp	r3, #5
   15fb8:	bne	16000 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   15fbc:	ldr	r3, [r2, #20]
   15fc0:	cmp	r3, r1
   15fc4:	bcc	16020 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15fc8:	sub	r3, r3, r1
   15fcc:	str	r3, [r2, #20]
   15fd0:	ldr	r2, [r0, #32]
   15fd4:	ldr	r3, [r0, #20]
   15fd8:	ldr	ip, [r0, #16]
   15fdc:	ldr	r2, [r2, #16]
   15fe0:	mls	r3, r2, r1, r3
   15fe4:	mul	r2, r2, r1
   15fe8:	mov	r1, #0
   15fec:	str	r3, [r0, #20]
   15ff0:	add	r0, ip, r3
   15ff4:	bl	12994 <memset@plt>
   15ff8:	mov	r0, #0
   15ffc:	pop	{fp, pc}
   16000:	movw	r0, #59879	; 0xe9e7
   16004:	movw	r1, #58827	; 0xe5cb
   16008:	movw	r3, #60427	; 0xec0b
   1600c:	movw	r2, #994	; 0x3e2
   16010:	movt	r0, #1
   16014:	movt	r1, #1
   16018:	movt	r3, #1
   1601c:	bl	129c4 <__assert_fail@plt>
   16020:	movw	r0, #60497	; 0xec51
   16024:	movw	r1, #58827	; 0xe5cb
   16028:	movw	r3, #60427	; 0xec0b
   1602c:	movw	r2, #995	; 0x3e3
   16030:	movt	r0, #1
   16034:	movt	r1, #1
   16038:	movt	r3, #1
   1603c:	bl	129c4 <__assert_fail@plt>

00016040 <flatcc_builder_truncate_string@@Base>:
   16040:	push	{fp, lr}
   16044:	mov	fp, sp
   16048:	mov	r2, r1
   1604c:	ldr	r1, [r0, #32]
   16050:	ldrh	r3, [r1, #14]
   16054:	cmp	r3, #6
   16058:	bne	16094 <flatcc_builder_truncate_string@@Base+0x54>
   1605c:	ldr	r3, [r1, #20]
   16060:	cmp	r3, r2
   16064:	bcc	160b4 <flatcc_builder_truncate_string@@Base+0x74>
   16068:	sub	r3, r3, r2
   1606c:	str	r3, [r1, #20]
   16070:	ldr	r3, [r0, #20]
   16074:	ldr	r1, [r0, #16]
   16078:	sub	r3, r3, r2
   1607c:	str	r3, [r0, #20]
   16080:	add	r0, r1, r3
   16084:	mov	r1, #0
   16088:	bl	12994 <memset@plt>
   1608c:	mov	r0, #0
   16090:	pop	{fp, pc}
   16094:	movw	r0, #60144	; 0xeaf0
   16098:	movw	r1, #58827	; 0xe5cb
   1609c:	movw	r3, #60556	; 0xec8c
   160a0:	movw	r2, #1003	; 0x3eb
   160a4:	movt	r0, #1
   160a8:	movt	r1, #1
   160ac:	movt	r3, #1
   160b0:	bl	129c4 <__assert_fail@plt>
   160b4:	movw	r0, #60619	; 0xeccb
   160b8:	movw	r1, #58827	; 0xe5cb
   160bc:	movw	r3, #60556	; 0xec8c
   160c0:	mov	r2, #1004	; 0x3ec
   160c4:	movt	r0, #1
   160c8:	movt	r1, #1
   160cc:	movt	r3, #1
   160d0:	bl	129c4 <__assert_fail@plt>

000160d4 <flatcc_builder_start_vector@@Base>:
   160d4:	push	{r4, r5, r6, r7, fp, lr}
   160d8:	add	fp, sp, #16
   160dc:	mov	r7, #4
   160e0:	cmp	r2, #4
   160e4:	mov	r6, r1
   160e8:	mov	r5, r3
   160ec:	mov	r4, r0
   160f0:	movls	r2, r7
   160f4:	mov	r1, r2
   160f8:	bl	15150 <flatcc_builder_start_buffer@@Base+0xbc>
   160fc:	mov	r1, r0
   16100:	mvn	r0, #0
   16104:	cmp	r1, #0
   16108:	popne	{r4, r5, r6, r7, fp, pc}
   1610c:	ldr	r0, [r4, #32]
   16110:	str	r6, [r0, #16]
   16114:	mov	r0, #0
   16118:	ldr	r1, [r4, #32]
   1611c:	str	r0, [r1, #20]
   16120:	ldr	r1, [r4, #32]
   16124:	str	r5, [r1, #24]
   16128:	ldr	r1, [r4, #32]
   1612c:	strh	r7, [r1, #14]
   16130:	ldr	r2, [r4, #28]
   16134:	ldr	r3, [r4, #60]	; 0x3c
   16138:	ldr	r7, [r4, #64]	; 0x40
   1613c:	add	r3, r3, r2
   16140:	sub	r2, r7, r2
   16144:	str	r3, [r4, #16]
   16148:	mvn	r3, #3
   1614c:	cmn	r2, #4
   16150:	movcs	r2, r3
   16154:	str	r2, [r4, #24]
   16158:	str	r3, [r1, #4]
   1615c:	pop	{r4, r5, r6, r7, fp, pc}

00016160 <flatcc_builder_start_offset_vector@@Base>:
   16160:	push	{r4, r5, fp, lr}
   16164:	add	fp, sp, #8
   16168:	mov	r1, #4
   1616c:	mov	r4, r0
   16170:	mov	r5, #4
   16174:	bl	15150 <flatcc_builder_start_buffer@@Base+0xbc>
   16178:	mov	r1, r0
   1617c:	mvn	r0, #0
   16180:	cmp	r1, #0
   16184:	popne	{r4, r5, fp, pc}
   16188:	ldr	r0, [r4, #32]
   1618c:	mov	r2, #5
   16190:	str	r5, [r0, #16]
   16194:	mov	r0, #0
   16198:	ldr	r1, [r4, #32]
   1619c:	str	r0, [r1, #20]
   161a0:	ldr	r1, [r4, #32]
   161a4:	strh	r2, [r1, #14]
   161a8:	ldr	r2, [r4, #28]
   161ac:	ldr	r3, [r4, #60]	; 0x3c
   161b0:	ldr	r5, [r4, #64]	; 0x40
   161b4:	add	r3, r3, r2
   161b8:	sub	r2, r5, r2
   161bc:	str	r3, [r4, #16]
   161c0:	mvn	r3, #3
   161c4:	cmn	r2, #4
   161c8:	movcs	r2, r3
   161cc:	str	r2, [r4, #24]
   161d0:	str	r3, [r1, #4]
   161d4:	pop	{r4, r5, fp, pc}

000161d8 <flatcc_builder_create_offset_vector@@Base>:
   161d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   161dc:	add	fp, sp, #24
   161e0:	sub	sp, sp, #8
   161e4:	mov	r8, r1
   161e8:	mov	r1, #4
   161ec:	mov	r6, r2
   161f0:	mov	r4, r0
   161f4:	mov	r5, #4
   161f8:	bl	15150 <flatcc_builder_start_buffer@@Base+0xbc>
   161fc:	mov	r7, #0
   16200:	cmp	r0, #0
   16204:	beq	16214 <flatcc_builder_create_offset_vector@@Base+0x3c>
   16208:	mov	r0, r7
   1620c:	sub	sp, fp, #24
   16210:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16214:	ldr	r0, [r4, #32]
   16218:	mov	r1, #0
   1621c:	str	r5, [r0, #16]
   16220:	ldr	r0, [r4, #32]
   16224:	str	r1, [r0, #20]
   16228:	mov	r1, #5
   1622c:	ldr	r0, [r4, #32]
   16230:	strh	r1, [r0, #14]
   16234:	ldr	r1, [r4, #28]
   16238:	ldr	r2, [r4, #60]	; 0x3c
   1623c:	ldr	r3, [r4, #64]	; 0x40
   16240:	add	r2, r2, r1
   16244:	sub	r1, r3, r1
   16248:	str	r2, [r4, #16]
   1624c:	mvn	r2, #3
   16250:	cmn	r1, #4
   16254:	movcs	r1, r2
   16258:	str	r1, [r4, #24]
   1625c:	str	r2, [r0, #4]
   16260:	ldr	r1, [r0, #20]
   16264:	adds	r1, r1, r6
   16268:	cmpcc	r1, #1073741824	; 0x40000000
   1626c:	bcc	16290 <flatcc_builder_create_offset_vector@@Base+0xb8>
   16270:	movw	r0, #63098	; 0xf67a
   16274:	movw	r1, #58827	; 0xe5cb
   16278:	movw	r3, #63125	; 0xf695
   1627c:	mov	r2, #892	; 0x37c
   16280:	movt	r0, #1
   16284:	movt	r1, #1
   16288:	movt	r3, #1
   1628c:	bl	129c4 <__assert_fail@plt>
   16290:	str	r1, [r0, #20]
   16294:	ldr	r5, [r4, #20]
   16298:	ldr	r0, [r4, #24]
   1629c:	add	r1, r5, r6, lsl #2
   162a0:	cmp	r1, r0
   162a4:	str	r1, [r4, #20]
   162a8:	bcs	1637c <flatcc_builder_create_offset_vector@@Base+0x1a4>
   162ac:	ldr	r0, [r4, #16]
   162b0:	adds	r0, r0, r5
   162b4:	beq	163e8 <flatcc_builder_create_offset_vector@@Base+0x210>
   162b8:	lsl	r2, r6, #2
   162bc:	mov	r1, r8
   162c0:	bl	12904 <memcpy@plt>
   162c4:	ldr	r0, [r4, #32]
   162c8:	ldrh	r1, [r0, #14]
   162cc:	cmp	r1, #5
   162d0:	bne	163f8 <flatcc_builder_create_offset_vector@@Base+0x220>
   162d4:	ldr	r2, [r0, #20]
   162d8:	ldr	r1, [r4, #16]
   162dc:	mov	r0, r4
   162e0:	mov	r3, #0
   162e4:	mov	r7, #0
   162e8:	bl	17460 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   162ec:	cmp	r0, #0
   162f0:	beq	16208 <flatcc_builder_create_offset_vector@@Base+0x30>
   162f4:	mov	r5, r0
   162f8:	ldr	r0, [r4, #16]
   162fc:	ldr	r2, [r4, #20]
   16300:	mov	r1, #0
   16304:	bl	12994 <memset@plt>
   16308:	ldr	r0, [r4, #32]
   1630c:	ldr	r1, [r4, #60]	; 0x3c
   16310:	ldr	r2, [r4, #64]	; 0x40
   16314:	ldr	r3, [r0, #8]
   16318:	str	r3, [r4, #20]
   1631c:	ldr	r3, [r0]
   16320:	str	r3, [r4, #28]
   16324:	add	r1, r1, r3
   16328:	ldr	r7, [r0, #4]
   1632c:	str	r1, [r4, #16]
   16330:	sub	r1, r2, r3
   16334:	cmp	r1, r7
   16338:	movhi	r1, r7
   1633c:	mov	r7, r5
   16340:	str	r1, [r4, #24]
   16344:	ldrh	r1, [r4, #130]	; 0x82
   16348:	ldrh	r2, [r4, #128]	; 0x80
   1634c:	cmp	r2, r1
   16350:	strhcc	r1, [r4, #128]	; 0x80
   16354:	ldrh	r1, [r0, #12]
   16358:	sub	r0, r0, #36	; 0x24
   1635c:	str	r0, [r4, #32]
   16360:	strh	r1, [r4, #130]	; 0x82
   16364:	ldr	r0, [r4, #156]	; 0x9c
   16368:	sub	r0, r0, #1
   1636c:	str	r0, [r4, #156]	; 0x9c
   16370:	mov	r0, r7
   16374:	sub	sp, fp, #24
   16378:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1637c:	ldr	r2, [r4, #28]
   16380:	ldr	r0, [r4, #40]	; 0x28
   16384:	ldr	r7, [r4, #48]	; 0x30
   16388:	mov	r3, #1
   1638c:	str	r3, [sp]
   16390:	mov	r3, #1
   16394:	add	r1, r1, r2
   16398:	add	r2, r1, #1
   1639c:	add	r1, r4, #60	; 0x3c
   163a0:	blx	r7
   163a4:	mov	r7, #0
   163a8:	cmp	r0, #0
   163ac:	bne	16208 <flatcc_builder_create_offset_vector@@Base+0x30>
   163b0:	ldr	r1, [r4, #28]
   163b4:	ldr	r0, [r4, #60]	; 0x3c
   163b8:	ldr	r3, [r4, #64]	; 0x40
   163bc:	ldr	r2, [r4, #32]
   163c0:	add	r0, r0, r1
   163c4:	sub	r1, r3, r1
   163c8:	mvn	r3, #3
   163cc:	cmn	r1, #4
   163d0:	str	r0, [r4, #16]
   163d4:	movcs	r1, r3
   163d8:	str	r1, [r4, #24]
   163dc:	str	r3, [r2, #4]
   163e0:	adds	r0, r0, r5
   163e4:	bne	162b8 <flatcc_builder_create_offset_vector@@Base+0xe0>
   163e8:	mov	r7, #0
   163ec:	mov	r0, r7
   163f0:	sub	sp, fp, #24
   163f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   163f8:	movw	r0, #59879	; 0xe9e7
   163fc:	movw	r1, #58827	; 0xe5cb
   16400:	movw	r3, #61462	; 0xf016
   16404:	movw	r2, #1480	; 0x5c8
   16408:	movt	r0, #1
   1640c:	movt	r1, #1
   16410:	movt	r3, #1
   16414:	bl	129c4 <__assert_fail@plt>

00016418 <flatcc_builder_end_offset_vector@@Base>:
   16418:	push	{r4, r5, fp, lr}
   1641c:	add	fp, sp, #8
   16420:	mov	r4, r0
   16424:	ldr	r0, [r0, #32]
   16428:	ldrh	r1, [r0, #14]
   1642c:	cmp	r1, #5
   16430:	bne	164d0 <flatcc_builder_end_offset_vector@@Base+0xb8>
   16434:	ldr	r2, [r0, #20]
   16438:	ldr	r1, [r4, #16]
   1643c:	mov	r0, r4
   16440:	mov	r3, #0
   16444:	bl	17460 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16448:	mov	r5, r0
   1644c:	cmp	r0, #0
   16450:	beq	164c8 <flatcc_builder_end_offset_vector@@Base+0xb0>
   16454:	ldr	r0, [r4, #16]
   16458:	ldr	r2, [r4, #20]
   1645c:	mov	r1, #0
   16460:	bl	12994 <memset@plt>
   16464:	ldr	r0, [r4, #32]
   16468:	ldr	r1, [r4, #60]	; 0x3c
   1646c:	ldr	ip, [r4, #64]	; 0x40
   16470:	ldr	r3, [r0, #8]
   16474:	str	r3, [r4, #20]
   16478:	ldr	r3, [r0]
   1647c:	str	r3, [r4, #28]
   16480:	add	r1, r1, r3
   16484:	ldr	r2, [r0, #4]
   16488:	str	r1, [r4, #16]
   1648c:	sub	r1, ip, r3
   16490:	cmp	r1, r2
   16494:	movhi	r1, r2
   16498:	str	r1, [r4, #24]
   1649c:	ldrh	r1, [r4, #130]	; 0x82
   164a0:	ldrh	r2, [r4, #128]	; 0x80
   164a4:	cmp	r2, r1
   164a8:	strhcc	r1, [r4, #128]	; 0x80
   164ac:	ldrh	r1, [r0, #12]
   164b0:	sub	r0, r0, #36	; 0x24
   164b4:	str	r0, [r4, #32]
   164b8:	strh	r1, [r4, #130]	; 0x82
   164bc:	ldr	r0, [r4, #156]	; 0x9c
   164c0:	sub	r0, r0, #1
   164c4:	str	r0, [r4, #156]	; 0x9c
   164c8:	mov	r0, r5
   164cc:	pop	{r4, r5, fp, pc}
   164d0:	movw	r0, #59879	; 0xe9e7
   164d4:	movw	r1, #58827	; 0xe5cb
   164d8:	movw	r3, #61462	; 0xf016
   164dc:	movw	r2, #1480	; 0x5c8
   164e0:	movt	r0, #1
   164e4:	movt	r1, #1
   164e8:	movt	r3, #1
   164ec:	bl	129c4 <__assert_fail@plt>

000164f0 <flatcc_builder_start_string@@Base>:
   164f0:	push	{r4, r5, fp, lr}
   164f4:	add	fp, sp, #8
   164f8:	mov	r1, #1
   164fc:	mov	r4, r0
   16500:	mov	r5, #1
   16504:	bl	15150 <flatcc_builder_start_buffer@@Base+0xbc>
   16508:	mov	r1, r0
   1650c:	mvn	r0, #0
   16510:	cmp	r1, #0
   16514:	popne	{r4, r5, fp, pc}
   16518:	ldr	r0, [r4, #32]
   1651c:	mov	r2, #6
   16520:	str	r5, [r0, #16]
   16524:	mov	r0, #0
   16528:	ldr	r1, [r4, #32]
   1652c:	str	r0, [r1, #20]
   16530:	ldr	r1, [r4, #32]
   16534:	strh	r2, [r1, #14]
   16538:	ldr	r2, [r4, #28]
   1653c:	ldr	r3, [r4, #60]	; 0x3c
   16540:	ldr	r5, [r4, #64]	; 0x40
   16544:	add	r3, r3, r2
   16548:	sub	r2, r5, r2
   1654c:	str	r3, [r4, #16]
   16550:	mvn	r3, #3
   16554:	cmn	r2, #4
   16558:	movcs	r2, r3
   1655c:	str	r2, [r4, #24]
   16560:	str	r3, [r1, #4]
   16564:	pop	{r4, r5, fp, pc}

00016568 <flatcc_builder_reserve_table@@Base>:
   16568:	push	{r4, r5, r6, sl, fp, lr}
   1656c:	add	fp, sp, #16
   16570:	sub	sp, sp, #8
   16574:	cmn	r1, #1
   16578:	ble	1664c <flatcc_builder_reserve_table@@Base+0xe4>
   1657c:	mov	r4, r0
   16580:	ldr	r0, [r0, #32]
   16584:	mov	r5, r1
   16588:	ldr	r1, [r4, #56]	; 0x38
   1658c:	ldrh	r2, [r0, #28]
   16590:	ldr	r0, [r0, #16]
   16594:	add	r6, r0, r2, lsl #1
   16598:	add	r0, r6, r5, lsl #1
   1659c:	add	r2, r0, #4
   165a0:	cmp	r2, r1
   165a4:	bls	165cc <flatcc_builder_reserve_table@@Base+0x64>
   165a8:	ldr	r0, [r4, #40]	; 0x28
   165ac:	ldr	ip, [r4, #48]	; 0x30
   165b0:	mov	r3, #0
   165b4:	add	r1, r4, #52	; 0x34
   165b8:	str	r3, [sp]
   165bc:	mov	r3, #1
   165c0:	blx	ip
   165c4:	cmp	r0, #0
   165c8:	bne	1666c <flatcc_builder_reserve_table@@Base+0x104>
   165cc:	ldr	r0, [r4, #52]	; 0x34
   165d0:	adds	r0, r0, r6
   165d4:	str	r0, [r4, #4]
   165d8:	mvneq	r0, #0
   165dc:	subeq	sp, fp, #16
   165e0:	popeq	{r4, r5, r6, sl, fp, pc}
   165e4:	add	r0, r0, #4
   165e8:	lsl	r1, r5, #1
   165ec:	str	r0, [r4, #4]
   165f0:	ldr	r0, [r4, #32]
   165f4:	ldr	r3, [r4, #80]	; 0x50
   165f8:	ldr	r5, [r0, #20]
   165fc:	orr	r0, r1, #1
   16600:	add	r2, r5, r0
   16604:	cmp	r2, r3
   16608:	bls	16630 <flatcc_builder_reserve_table@@Base+0xc8>
   1660c:	ldr	r0, [r4, #40]	; 0x28
   16610:	ldr	r6, [r4, #48]	; 0x30
   16614:	mov	r3, #3
   16618:	add	r1, r4, #76	; 0x4c
   1661c:	str	r3, [sp]
   16620:	mov	r3, #0
   16624:	blx	r6
   16628:	cmp	r0, #0
   1662c:	bne	1666c <flatcc_builder_reserve_table@@Base+0x104>
   16630:	ldr	r0, [r4, #76]	; 0x4c
   16634:	adds	r0, r0, r5
   16638:	str	r0, [r4]
   1663c:	mov	r0, #0
   16640:	mvneq	r0, #0
   16644:	sub	sp, fp, #16
   16648:	pop	{r4, r5, r6, sl, fp, pc}
   1664c:	movw	r0, #60718	; 0xed2e
   16650:	movw	r1, #58827	; 0xe5cb
   16654:	movw	r3, #60653	; 0xeced
   16658:	movw	r2, #1065	; 0x429
   1665c:	movt	r0, #1
   16660:	movt	r1, #1
   16664:	movt	r3, #1
   16668:	bl	129c4 <__assert_fail@plt>
   1666c:	movw	r0, #63345	; 0xf771
   16670:	movw	r1, #58827	; 0xe5cb
   16674:	movw	r3, #62891	; 0xf5ab
   16678:	mov	r2, #308	; 0x134
   1667c:	movt	r0, #1
   16680:	movt	r1, #1
   16684:	movt	r3, #1
   16688:	bl	129c4 <__assert_fail@plt>

0001668c <flatcc_builder_start_table@@Base>:
   1668c:	push	{r4, r5, r6, r7, fp, lr}
   16690:	add	fp, sp, #16
   16694:	sub	sp, sp, #8
   16698:	mov	r6, r1
   1669c:	mov	r1, #4
   166a0:	mov	r4, r0
   166a4:	bl	15150 <flatcc_builder_start_buffer@@Base+0xbc>
   166a8:	mvn	r5, #0
   166ac:	cmp	r0, #0
   166b0:	beq	166c0 <flatcc_builder_start_table@@Base+0x34>
   166b4:	mov	r0, r5
   166b8:	sub	sp, fp, #16
   166bc:	pop	{r4, r5, r6, r7, fp, pc}
   166c0:	mov	r1, r4
   166c4:	ldr	r2, [r4, #4]
   166c8:	ldr	r3, [r4, #32]
   166cc:	ldr	r0, [r1, #52]!	; 0x34
   166d0:	sub	r0, r2, r0
   166d4:	str	r0, [r3, #16]
   166d8:	ldr	r0, [r4]
   166dc:	ldr	r3, [r4, #76]	; 0x4c
   166e0:	ldr	r2, [r4, #32]
   166e4:	sub	r0, r0, r3
   166e8:	mov	r3, #0
   166ec:	str	r0, [r2, #20]
   166f0:	ldr	r0, [r4, #12]
   166f4:	ldr	r2, [r4, #32]
   166f8:	str	r0, [r2, #24]
   166fc:	ldr	r0, [r4, #32]
   16700:	ldrh	r2, [r4, #8]
   16704:	strh	r2, [r0, #28]
   16708:	movw	r0, #15186	; 0x3b52
   1670c:	strh	r3, [r4, #8]
   16710:	mov	r2, #3
   16714:	movt	r0, #12137	; 0x2f69
   16718:	str	r0, [r4, #12]
   1671c:	ldr	r0, [r4, #32]
   16720:	strh	r2, [r0, #14]
   16724:	ldrh	r2, [r0, #28]
   16728:	ldr	r0, [r0, #16]
   1672c:	add	r7, r0, r2, lsl #1
   16730:	add	r0, r7, r6, lsl #1
   16734:	add	r2, r0, #4
   16738:	ldr	r0, [r4, #56]	; 0x38
   1673c:	cmp	r2, r0
   16740:	bls	16760 <flatcc_builder_start_table@@Base+0xd4>
   16744:	ldr	r0, [r4, #40]	; 0x28
   16748:	ldr	ip, [r4, #48]	; 0x30
   1674c:	str	r3, [sp]
   16750:	mov	r3, #1
   16754:	blx	ip
   16758:	cmp	r0, #0
   1675c:	bne	1680c <flatcc_builder_start_table@@Base+0x180>
   16760:	ldr	r0, [r4, #52]	; 0x34
   16764:	adds	r0, r0, r7
   16768:	str	r0, [r4, #4]
   1676c:	beq	166b4 <flatcc_builder_start_table@@Base+0x28>
   16770:	add	r0, r0, #4
   16774:	lsl	r1, r6, #1
   16778:	str	r0, [r4, #4]
   1677c:	ldr	r0, [r4, #32]
   16780:	ldr	r3, [r4, #80]	; 0x50
   16784:	ldr	r6, [r0, #20]
   16788:	orr	r0, r1, #1
   1678c:	add	r2, r6, r0
   16790:	cmp	r2, r3
   16794:	bls	167bc <flatcc_builder_start_table@@Base+0x130>
   16798:	ldr	r0, [r4, #40]	; 0x28
   1679c:	ldr	r7, [r4, #48]	; 0x30
   167a0:	mov	r3, #3
   167a4:	add	r1, r4, #76	; 0x4c
   167a8:	str	r3, [sp]
   167ac:	mov	r3, #0
   167b0:	blx	r7
   167b4:	cmp	r0, #0
   167b8:	bne	1680c <flatcc_builder_start_table@@Base+0x180>
   167bc:	ldr	r0, [r4, #76]	; 0x4c
   167c0:	adds	r0, r0, r6
   167c4:	str	r0, [r4]
   167c8:	beq	166b4 <flatcc_builder_start_table@@Base+0x28>
   167cc:	ldr	r0, [r4, #28]
   167d0:	ldr	r2, [r4, #60]	; 0x3c
   167d4:	ldr	r3, [r4, #64]	; 0x40
   167d8:	ldr	r1, [r4, #32]
   167dc:	mov	r5, #0
   167e0:	add	r2, r2, r0
   167e4:	sub	r0, r3, r0
   167e8:	str	r2, [r4, #16]
   167ec:	movw	r2, #65532	; 0xfffc
   167f0:	cmp	r0, r2
   167f4:	movcs	r0, r2
   167f8:	str	r0, [r4, #24]
   167fc:	str	r2, [r1, #4]
   16800:	mov	r0, r5
   16804:	sub	sp, fp, #16
   16808:	pop	{r4, r5, r6, r7, fp, pc}
   1680c:	movw	r0, #63345	; 0xf771
   16810:	movw	r1, #58827	; 0xe5cb
   16814:	movw	r3, #62891	; 0xf5ab
   16818:	mov	r2, #308	; 0x134
   1681c:	movt	r0, #1
   16820:	movt	r1, #1
   16824:	movt	r3, #1
   16828:	bl	129c4 <__assert_fail@plt>

0001682c <flatcc_builder_create_vtable@@Base>:
   1682c:	push	{r4, r5, fp, lr}
   16830:	add	fp, sp, #8
   16834:	sub	sp, sp, #80	; 0x50
   16838:	mov	r3, r2
   1683c:	mov	r2, #0
   16840:	mov	r4, r0
   16844:	cmp	r3, #0
   16848:	str	r2, [sp, #12]
   1684c:	str	r2, [sp, #8]
   16850:	movne	r2, #1
   16854:	strne	r1, [sp, #16]
   16858:	strne	r3, [sp, #8]
   1685c:	strne	r3, [sp, #20]
   16860:	strne	r2, [sp, #12]
   16864:	ldr	r0, [r4, #152]	; 0x98
   16868:	cmp	r0, #0
   1686c:	bne	1687c <flatcc_builder_create_vtable@@Base+0x50>
   16870:	ldr	r0, [r4, #180]	; 0xb4
   16874:	cmp	r0, #0
   16878:	beq	168c8 <flatcc_builder_create_vtable@@Base+0x9c>
   1687c:	cmp	r3, #0
   16880:	beq	1690c <flatcc_builder_create_vtable@@Base+0xe0>
   16884:	ldr	r0, [r4, #136]	; 0x88
   16888:	ldr	ip, [r4, #44]	; 0x2c
   1688c:	add	r1, sp, #8
   16890:	add	r1, r1, #8
   16894:	sub	r5, r0, r3
   16898:	ldr	r0, [r4, #36]	; 0x24
   1689c:	str	r3, [sp]
   168a0:	mov	r3, r5
   168a4:	blx	ip
   168a8:	cmp	r0, #0
   168ac:	bne	1692c <flatcc_builder_create_vtable@@Base+0x100>
   168b0:	cmp	r5, #0
   168b4:	str	r5, [r4, #136]	; 0x88
   168b8:	beq	16900 <flatcc_builder_create_vtable@@Base+0xd4>
   168bc:	add	r0, r5, #1
   168c0:	sub	sp, fp, #8
   168c4:	pop	{r4, r5, fp, pc}
   168c8:	ldr	r5, [r4, #140]	; 0x8c
   168cc:	ldr	r0, [r4, #36]	; 0x24
   168d0:	ldr	ip, [r4, #44]	; 0x2c
   168d4:	add	r1, r5, r3
   168d8:	str	r1, [r4, #140]	; 0x8c
   168dc:	add	r1, sp, #8
   168e0:	str	r3, [sp]
   168e4:	mov	r3, r5
   168e8:	add	r1, r1, #8
   168ec:	blx	ip
   168f0:	cmp	r0, #0
   168f4:	bne	1694c <flatcc_builder_create_vtable@@Base+0x120>
   168f8:	adds	r0, r5, #1
   168fc:	bne	168c0 <flatcc_builder_create_vtable@@Base+0x94>
   16900:	mov	r0, #0
   16904:	sub	sp, fp, #8
   16908:	pop	{r4, r5, fp, pc}
   1690c:	movw	r0, #63345	; 0xf771
   16910:	movw	r1, #58827	; 0xe5cb
   16914:	movw	r3, #63024	; 0xf630
   16918:	movw	r2, #647	; 0x287
   1691c:	movt	r0, #1
   16920:	movt	r1, #1
   16924:	movt	r3, #1
   16928:	bl	129c4 <__assert_fail@plt>
   1692c:	movw	r0, #63345	; 0xf771
   16930:	movw	r1, #58827	; 0xe5cb
   16934:	movw	r3, #63024	; 0xf630
   16938:	movw	r2, #651	; 0x28b
   1693c:	movt	r0, #1
   16940:	movt	r1, #1
   16944:	movt	r3, #1
   16948:	bl	129c4 <__assert_fail@plt>
   1694c:	movw	r0, #63345	; 0xf771
   16950:	movw	r1, #58827	; 0xe5cb
   16954:	movw	r3, #63212	; 0xf6ec
   16958:	movw	r2, #677	; 0x2a5
   1695c:	movt	r0, #1
   16960:	movt	r1, #1
   16964:	movt	r3, #1
   16968:	bl	129c4 <__assert_fail@plt>

0001696c <flatcc_builder_create_cached_vtable@@Base>:
   1696c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16970:	add	fp, sp, #28
   16974:	sub	sp, sp, #20
   16978:	mov	sl, r0
   1697c:	ldr	r0, [r0, #116]	; 0x74
   16980:	mov	r8, r3
   16984:	mov	r5, r2
   16988:	str	r1, [sp, #16]
   1698c:	cmp	r0, #0
   16990:	beq	16a34 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   16994:	ldr	r1, [sl, #92]	; 0x5c
   16998:	rsb	r0, r0, #32
   1699c:	lsr	r0, r8, r0
   169a0:	add	r6, r1, r0, lsl #2
   169a4:	cmp	r6, #0
   169a8:	beq	16af8 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   169ac:	ldr	r7, [r6]
   169b0:	str	r6, [sp, #12]
   169b4:	cmp	r7, #0
   169b8:	beq	16b08 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   169bc:	ldr	r4, [sl, #68]	; 0x44
   169c0:	ldr	r8, [sl, #100]	; 0x64
   169c4:	mov	r0, #0
   169c8:	str	r0, [sp, #8]
   169cc:	add	r9, r8, r7
   169d0:	mov	r1, r4
   169d4:	ldr	r0, [r9, #8]
   169d8:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   169dc:	cmp	r0, r5
   169e0:	bne	169f8 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   169e4:	ldr	r0, [sp, #16]
   169e8:	mov	r2, r5
   169ec:	bl	12910 <memcmp@plt>
   169f0:	cmp	r0, #0
   169f4:	beq	16a0c <flatcc_builder_create_cached_vtable@@Base+0xa0>
   169f8:	ldr	r7, [r9, #12]!
   169fc:	cmp	r7, #0
   16a00:	mov	r6, r9
   16a04:	bne	169cc <flatcc_builder_create_cached_vtable@@Base+0x60>
   16a08:	b	16af0 <flatcc_builder_create_cached_vtable@@Base+0x184>
   16a0c:	ldr	r0, [sl, #152]	; 0x98
   16a10:	ldr	r1, [r9, #4]
   16a14:	cmp	r1, r0
   16a18:	beq	16c74 <flatcc_builder_create_cached_vtable@@Base+0x308>
   16a1c:	mov	r6, r9
   16a20:	mov	r0, r9
   16a24:	ldr	r7, [r6, #12]!
   16a28:	cmp	r7, #0
   16a2c:	bne	169c8 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   16a30:	b	16b0c <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16a34:	ldr	r0, [sl, #124]	; 0x7c
   16a38:	cmp	r0, #0
   16a3c:	bne	16cc8 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   16a40:	ldr	r0, [sl, #104]	; 0x68
   16a44:	add	r7, sl, #100	; 0x64
   16a48:	cmp	r0, #15
   16a4c:	bhi	16a78 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   16a50:	ldr	r0, [sl, #40]	; 0x28
   16a54:	ldr	r6, [sl, #48]	; 0x30
   16a58:	mov	r1, #6
   16a5c:	mov	r2, #16
   16a60:	mov	r3, #0
   16a64:	str	r1, [sp]
   16a68:	mov	r1, r7
   16a6c:	blx	r6
   16a70:	cmp	r0, #0
   16a74:	bne	16ca8 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   16a78:	ldr	r0, [r7]
   16a7c:	mov	r7, #0
   16a80:	cmp	r0, #0
   16a84:	beq	16bac <flatcc_builder_create_cached_vtable@@Base+0x240>
   16a88:	mov	r0, #16
   16a8c:	mov	r2, #5
   16a90:	add	r1, sl, #92	; 0x5c
   16a94:	mov	r3, #1
   16a98:	mov	r4, #256	; 0x100
   16a9c:	str	r0, [sl, #124]	; 0x7c
   16aa0:	ldr	r0, [sl, #40]	; 0x28
   16aa4:	ldr	r6, [sl, #48]	; 0x30
   16aa8:	str	r2, [sp]
   16aac:	mov	r2, #256	; 0x100
   16ab0:	blx	r6
   16ab4:	cmp	r0, #0
   16ab8:	bne	16bac <flatcc_builder_create_cached_vtable@@Base+0x240>
   16abc:	ldr	r0, [sl, #96]	; 0x60
   16ac0:	mov	r1, r4
   16ac4:	lsl	r4, r4, #1
   16ac8:	cmp	r0, r1, lsl #1
   16acc:	bcs	16ac0 <flatcc_builder_create_cached_vtable@@Base+0x154>
   16ad0:	lsr	r1, r1, #2
   16ad4:	mvn	r0, #0
   16ad8:	mov	r2, #1
   16adc:	add	r0, r0, #1
   16ae0:	cmp	r1, r2, lsl r0
   16ae4:	bhi	16adc <flatcc_builder_create_cached_vtable@@Base+0x170>
   16ae8:	str	r0, [sl, #116]	; 0x74
   16aec:	b	16994 <flatcc_builder_create_cached_vtable@@Base+0x28>
   16af0:	ldr	r9, [sp, #8]
   16af4:	b	16b0c <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16af8:	mov	r7, #0
   16afc:	mov	r0, r7
   16b00:	sub	sp, fp, #28
   16b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b08:	mov	r9, #0
   16b0c:	ldr	r4, [sl, #124]	; 0x7c
   16b10:	ldr	r0, [sl, #104]	; 0x68
   16b14:	add	r7, sl, #100	; 0x64
   16b18:	add	r2, r4, #16
   16b1c:	cmp	r2, r0
   16b20:	bls	16b48 <flatcc_builder_create_cached_vtable@@Base+0x1dc>
   16b24:	ldr	r0, [sl, #40]	; 0x28
   16b28:	ldr	r6, [sl, #48]	; 0x30
   16b2c:	mov	r1, #6
   16b30:	mov	r3, #0
   16b34:	str	r1, [sp]
   16b38:	mov	r1, r7
   16b3c:	blx	r6
   16b40:	cmp	r0, #0
   16b44:	bne	16ca8 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   16b48:	ldr	r0, [r7]
   16b4c:	mov	r7, #0
   16b50:	adds	r4, r0, r4
   16b54:	beq	16bac <flatcc_builder_create_cached_vtable@@Base+0x240>
   16b58:	ldr	r0, [sl, #124]	; 0x7c
   16b5c:	ldr	r1, [sl, #152]	; 0x98
   16b60:	add	r2, r0, #16
   16b64:	str	r2, [sl, #124]	; 0x7c
   16b68:	ldr	r2, [sp, #12]
   16b6c:	str	r1, [r4, #4]
   16b70:	ldr	r1, [r2]
   16b74:	str	r1, [r4, #12]
   16b78:	ldr	r1, [sp, #16]
   16b7c:	str	r0, [r2]
   16b80:	mov	r0, sl
   16b84:	mov	r2, r5
   16b88:	bl	1682c <flatcc_builder_create_vtable@@Base>
   16b8c:	cmp	r0, #0
   16b90:	str	r0, [r4]
   16b94:	beq	16bac <flatcc_builder_create_cached_vtable@@Base+0x240>
   16b98:	cmp	r9, #0
   16b9c:	beq	16bb8 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   16ba0:	ldr	r0, [r9, #8]
   16ba4:	str	r0, [r4, #8]
   16ba8:	ldr	r7, [r4]
   16bac:	mov	r0, r7
   16bb0:	sub	sp, fp, #28
   16bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bb8:	ldr	r6, [sl, #120]	; 0x78
   16bbc:	ldr	r0, [sl, #172]	; 0xac
   16bc0:	add	r2, r6, r5
   16bc4:	cmp	r0, #0
   16bc8:	beq	16c04 <flatcc_builder_create_cached_vtable@@Base+0x298>
   16bcc:	cmp	r0, r2
   16bd0:	bcs	16c04 <flatcc_builder_create_cached_vtable@@Base+0x298>
   16bd4:	ldr	r0, [sl, #116]	; 0x74
   16bd8:	cmp	r0, #0
   16bdc:	beq	16ba8 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   16be0:	ldr	r0, [sl, #92]	; 0x5c
   16be4:	ldr	r2, [sl, #96]	; 0x60
   16be8:	mov	r1, #0
   16bec:	mov	r5, #0
   16bf0:	bl	12994 <memset@plt>
   16bf4:	mov	r0, #16
   16bf8:	str	r5, [sl, #120]	; 0x78
   16bfc:	str	r0, [sl, #124]	; 0x7c
   16c00:	b	16ba8 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   16c04:	ldr	r0, [sl, #72]	; 0x48
   16c08:	add	r7, sl, #68	; 0x44
   16c0c:	cmp	r2, r0
   16c10:	bls	16c38 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   16c14:	ldr	r0, [sl, #40]	; 0x28
   16c18:	ldr	ip, [sl, #48]	; 0x30
   16c1c:	mov	r1, #2
   16c20:	mov	r3, #0
   16c24:	str	r1, [sp]
   16c28:	mov	r1, r7
   16c2c:	blx	ip
   16c30:	cmp	r0, #0
   16c34:	bne	16ca8 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   16c38:	ldr	r0, [r7]
   16c3c:	adds	r0, r0, r6
   16c40:	beq	16c64 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   16c44:	ldr	r1, [sl, #120]	; 0x78
   16c48:	mov	r2, r5
   16c4c:	str	r1, [r4, #8]
   16c50:	add	r1, r1, r5
   16c54:	str	r1, [sl, #120]	; 0x78
   16c58:	ldr	r1, [sp, #16]
   16c5c:	bl	12904 <memcpy@plt>
   16c60:	b	16ba8 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   16c64:	mvn	r7, #0
   16c68:	mov	r0, r7
   16c6c:	sub	sp, fp, #28
   16c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c74:	ldr	r0, [sp, #12]
   16c78:	cmp	r6, r0
   16c7c:	beq	16c98 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   16c80:	mov	r1, r0
   16c84:	ldr	r0, [r9, #12]
   16c88:	str	r0, [r6]
   16c8c:	ldr	r0, [r1]
   16c90:	str	r0, [r9, #12]
   16c94:	str	r7, [r1]
   16c98:	ldr	r7, [r9]
   16c9c:	mov	r0, r7
   16ca0:	sub	sp, fp, #28
   16ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ca8:	movw	r0, #63345	; 0xf771
   16cac:	movw	r1, #58827	; 0xe5cb
   16cb0:	movw	r3, #62891	; 0xf5ab
   16cb4:	mov	r2, #308	; 0x134
   16cb8:	movt	r0, #1
   16cbc:	movt	r1, #1
   16cc0:	movt	r3, #1
   16cc4:	bl	129c4 <__assert_fail@plt>
   16cc8:	movw	r0, #63285	; 0xf735
   16ccc:	movw	r1, #58827	; 0xe5cb
   16cd0:	movw	r3, #63300	; 0xf744
   16cd4:	movw	r2, #342	; 0x156
   16cd8:	movt	r0, #1
   16cdc:	movt	r1, #1
   16ce0:	movt	r3, #1
   16ce4:	bl	129c4 <__assert_fail@plt>

00016ce8 <flatcc_builder_create_table@@Base>:
   16ce8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16cec:	add	fp, sp, #24
   16cf0:	sub	sp, sp, #80	; 0x50
   16cf4:	ldr	r5, [fp, #12]
   16cf8:	cmn	r5, #1
   16cfc:	ble	16e50 <flatcc_builder_create_table@@Base+0x168>
   16d00:	ldr	ip, [fp, #16]
   16d04:	tst	ip, #1
   16d08:	beq	16e70 <flatcc_builder_create_table@@Base+0x188>
   16d0c:	mov	r8, r0
   16d10:	ldrh	r0, [r0, #128]	; 0x80
   16d14:	cmp	r3, #4
   16d18:	movls	r3, #4
   16d1c:	cmp	r0, r3
   16d20:	strhcc	r3, [r8, #128]	; 0x80
   16d24:	sub	r3, r3, #1
   16d28:	cmp	r5, #1
   16d2c:	ldr	r4, [r8, #136]	; 0x88
   16d30:	sub	r0, r4, r2
   16d34:	and	r0, r0, r3
   16d38:	add	r3, ip, r0
   16d3c:	mvn	ip, #3
   16d40:	sub	r6, ip, r2
   16d44:	add	r4, r6, r4
   16d48:	add	r6, r4, #1
   16d4c:	sub	r3, r6, r3
   16d50:	str	r3, [fp, #-28]	; 0xffffffe4
   16d54:	blt	16d80 <flatcc_builder_create_table@@Base+0x98>
   16d58:	ldr	r3, [fp, #8]
   16d5c:	sub	r6, r4, r0
   16d60:	sub	r4, ip, r6
   16d64:	ldrh	r6, [r3], #2
   16d68:	subs	r5, r5, #1
   16d6c:	ldr	r7, [r6, r1]
   16d70:	add	r7, r4, r7
   16d74:	sub	r7, r7, r6
   16d78:	str	r7, [r6, r1]
   16d7c:	bne	16d64 <flatcc_builder_create_table@@Base+0x7c>
   16d80:	sub	r3, fp, #28
   16d84:	mov	r4, #4
   16d88:	cmp	r2, #0
   16d8c:	str	r3, [sp, #12]
   16d90:	mov	r3, #1
   16d94:	str	r4, [sp, #4]
   16d98:	str	r4, [sp, #16]
   16d9c:	str	r3, [sp, #8]
   16da0:	beq	16dbc <flatcc_builder_create_table@@Base+0xd4>
   16da4:	mov	r3, #2
   16da8:	add	r4, r2, #4
   16dac:	str	r1, [sp, #20]
   16db0:	str	r2, [sp, #24]
   16db4:	str	r3, [sp, #8]
   16db8:	str	r4, [sp, #4]
   16dbc:	cmp	r0, #0
   16dc0:	beq	16dec <flatcc_builder_create_table@@Base+0x104>
   16dc4:	add	r1, sp, #4
   16dc8:	movw	r2, #58297	; 0xe3b9
   16dcc:	add	r4, r4, r0
   16dd0:	add	r1, r1, r3, lsl #3
   16dd4:	add	r3, r3, #1
   16dd8:	movt	r2, #1
   16ddc:	str	r4, [sp, #4]
   16de0:	str	r2, [r1, #8]
   16de4:	str	r0, [r1, #12]
   16de8:	str	r3, [sp, #8]
   16dec:	cmp	r4, #0
   16df0:	ble	16e90 <flatcc_builder_create_table@@Base+0x1a8>
   16df4:	ldr	r0, [r8, #136]	; 0x88
   16df8:	ldr	r7, [r8, #44]	; 0x2c
   16dfc:	add	r1, sp, #4
   16e00:	mov	r2, r3
   16e04:	add	r1, r1, #8
   16e08:	sub	r5, r0, r4
   16e0c:	ldr	r0, [r8, #36]	; 0x24
   16e10:	str	r4, [sp]
   16e14:	mov	r3, r5
   16e18:	blx	r7
   16e1c:	cmp	r0, #0
   16e20:	streq	r5, [r8, #136]	; 0x88
   16e24:	moveq	r0, r5
   16e28:	subeq	sp, fp, #24
   16e2c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e30:	movw	r0, #63345	; 0xf771
   16e34:	movw	r1, #58827	; 0xe5cb
   16e38:	movw	r3, #63024	; 0xf630
   16e3c:	movw	r2, #651	; 0x28b
   16e40:	movt	r0, #1
   16e44:	movt	r1, #1
   16e48:	movt	r3, #1
   16e4c:	bl	129c4 <__assert_fail@plt>
   16e50:	movw	r0, #60711	; 0xed27
   16e54:	movw	r1, #58827	; 0xe5cb
   16e58:	movw	r3, #60729	; 0xed39
   16e5c:	movw	r2, #1237	; 0x4d5
   16e60:	movt	r0, #1
   16e64:	movt	r1, #1
   16e68:	movt	r3, #1
   16e6c:	bl	129c4 <__assert_fail@plt>
   16e70:	movw	r0, #60885	; 0xedd5
   16e74:	movw	r1, #58827	; 0xe5cb
   16e78:	movw	r3, #60729	; 0xed39
   16e7c:	movw	r2, #1243	; 0x4db
   16e80:	movt	r0, #1
   16e84:	movt	r1, #1
   16e88:	movt	r3, #1
   16e8c:	bl	129c4 <__assert_fail@plt>
   16e90:	movw	r0, #63345	; 0xf771
   16e94:	movw	r1, #58827	; 0xe5cb
   16e98:	movw	r3, #63024	; 0xf630
   16e9c:	movw	r2, #647	; 0x287
   16ea0:	movt	r0, #1
   16ea4:	movt	r1, #1
   16ea8:	movt	r3, #1
   16eac:	bl	129c4 <__assert_fail@plt>

00016eb0 <flatcc_builder_check_required_field@@Base>:
   16eb0:	ldr	r2, [r0, #32]
   16eb4:	ldrh	r2, [r2, #14]
   16eb8:	cmp	r2, #3
   16ebc:	bne	16eec <flatcc_builder_check_required_field@@Base+0x3c>
   16ec0:	ldrh	r3, [r0, #8]
   16ec4:	mov	r2, #0
   16ec8:	cmp	r3, r1
   16ecc:	bls	16ee4 <flatcc_builder_check_required_field@@Base+0x34>
   16ed0:	ldr	r0, [r0, #4]
   16ed4:	add	r0, r0, r1, lsl #1
   16ed8:	ldrh	r2, [r0]
   16edc:	cmp	r2, #0
   16ee0:	movwne	r2, #1
   16ee4:	mov	r0, r2
   16ee8:	bx	lr
   16eec:	push	{fp, lr}
   16ef0:	mov	fp, sp
   16ef4:	movw	r0, #60896	; 0xede0
   16ef8:	movw	r1, #58827	; 0xe5cb
   16efc:	movw	r3, #60939	; 0xee0b
   16f00:	movw	r2, #1272	; 0x4f8
   16f04:	movt	r0, #1
   16f08:	movt	r1, #1
   16f0c:	movt	r3, #1
   16f10:	bl	129c4 <__assert_fail@plt>

00016f14 <flatcc_builder_check_union_field@@Base>:
   16f14:	mov	r2, r0
   16f18:	ldr	r0, [r0, #32]
   16f1c:	ldrh	r0, [r0, #14]
   16f20:	cmp	r0, #3
   16f24:	bne	16f84 <flatcc_builder_check_union_field@@Base+0x70>
   16f28:	cmp	r1, #0
   16f2c:	mov	r0, #0
   16f30:	ldrhne	r3, [r2, #8]
   16f34:	cmpne	r3, r1
   16f38:	bhi	16f40 <flatcc_builder_check_union_field@@Base+0x2c>
   16f3c:	bx	lr
   16f40:	ldr	r0, [r2, #4]
   16f44:	add	r0, r0, r1, lsl #1
   16f48:	ldrh	r1, [r0, #-2]
   16f4c:	cmp	r1, #0
   16f50:	beq	16f74 <flatcc_builder_check_union_field@@Base+0x60>
   16f54:	ldr	r2, [r2, #16]
   16f58:	ldrh	r0, [r0]
   16f5c:	ldrb	r1, [r2, r1]
   16f60:	cmp	r1, #0
   16f64:	beq	16f78 <flatcc_builder_check_union_field@@Base+0x64>
   16f68:	cmp	r0, #0
   16f6c:	movwne	r0, #1
   16f70:	bx	lr
   16f74:	ldrh	r0, [r0]
   16f78:	clz	r0, r0
   16f7c:	lsr	r0, r0, #5
   16f80:	bx	lr
   16f84:	push	{fp, lr}
   16f88:	mov	fp, sp
   16f8c:	movw	r0, #60896	; 0xede0
   16f90:	movw	r1, #58827	; 0xe5cb
   16f94:	movw	r3, #61022	; 0xee5e
   16f98:	movw	r2, #1279	; 0x4ff
   16f9c:	movt	r0, #1
   16fa0:	movt	r1, #1
   16fa4:	movt	r3, #1
   16fa8:	bl	129c4 <__assert_fail@plt>

00016fac <flatcc_builder_check_required@@Base>:
   16fac:	push	{fp, lr}
   16fb0:	mov	fp, sp
   16fb4:	mov	r3, r0
   16fb8:	ldr	r0, [r0, #32]
   16fbc:	ldrh	r0, [r0, #14]
   16fc0:	cmp	r0, #3
   16fc4:	bne	1701c <flatcc_builder_check_required@@Base+0x70>
   16fc8:	ldrh	ip, [r3, #8]
   16fcc:	mov	r0, #0
   16fd0:	cmp	ip, r2
   16fd4:	movge	r0, #1
   16fd8:	cmpge	r2, #1
   16fdc:	bge	16fe4 <flatcc_builder_check_required@@Base+0x38>
   16fe0:	pop	{fp, pc}
   16fe4:	ldr	ip, [r3, #4]
   16fe8:	mov	lr, #0
   16fec:	b	17000 <flatcc_builder_check_required@@Base+0x54>
   16ff0:	add	lr, lr, #1
   16ff4:	add	r1, r1, #2
   16ff8:	cmp	lr, r2
   16ffc:	popge	{fp, pc}
   17000:	ldrh	r3, [r1]
   17004:	add	r3, ip, r3, lsl #1
   17008:	ldrh	r3, [r3]
   1700c:	cmp	r3, #0
   17010:	bne	16ff0 <flatcc_builder_check_required@@Base+0x44>
   17014:	mov	r0, #0
   17018:	pop	{fp, pc}
   1701c:	movw	r0, #60896	; 0xede0
   17020:	movw	r1, #58827	; 0xe5cb
   17024:	movw	r3, #61102	; 0xeeae
   17028:	movw	r2, #1297	; 0x511
   1702c:	movt	r0, #1
   17030:	movt	r1, #1
   17034:	movt	r3, #1
   17038:	bl	129c4 <__assert_fail@plt>

0001703c <flatcc_builder_end_table@@Base>:
   1703c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17040:	add	fp, sp, #24
   17044:	sub	sp, sp, #16
   17048:	mov	r4, r0
   1704c:	ldr	r0, [r0, #32]
   17050:	ldrh	r0, [r0, #14]
   17054:	cmp	r0, #3
   17058:	bne	171dc <flatcc_builder_end_table@@Base+0x1a0>
   1705c:	ldrh	r0, [r4, #8]
   17060:	ldr	r5, [r4, #4]
   17064:	mov	r1, #4
   17068:	movw	r2, #31153	; 0x79b1
   1706c:	movt	r2, #40503	; 0x9e37
   17070:	add	r0, r1, r0, lsl #1
   17074:	strh	r0, [r5, #-4]!
   17078:	ldrh	r1, [r4, #20]
   1707c:	uxth	r6, r0
   17080:	add	r1, r1, #4
   17084:	strh	r1, [r5, #2]
   17088:	uxth	r1, r1
   1708c:	ldr	r0, [r4, #12]
   17090:	eor	r0, r0, r6
   17094:	mul	r0, r0, r2
   17098:	eor	r0, r0, r1
   1709c:	mov	r1, r5
   170a0:	mul	r3, r0, r2
   170a4:	mov	r0, r4
   170a8:	mov	r2, r6
   170ac:	str	r3, [r4, #12]
   170b0:	bl	1696c <flatcc_builder_create_cached_vtable@@Base>
   170b4:	cmp	r0, #0
   170b8:	beq	171cc <flatcc_builder_end_table@@Base+0x190>
   170bc:	mov	r7, r0
   170c0:	mov	r0, r5
   170c4:	mov	r1, #0
   170c8:	mov	r2, r6
   170cc:	mov	r8, #0
   170d0:	bl	12994 <memset@plt>
   170d4:	ldr	r5, [r4, #32]
   170d8:	ldr	r0, [r4, #76]	; 0x4c
   170dc:	ldr	r6, [r4]
   170e0:	ldrh	r3, [r4, #130]	; 0x82
   170e4:	ldr	r1, [r4, #16]
   170e8:	ldr	r2, [r4, #20]
   170ec:	ldr	r5, [r5, #20]
   170f0:	add	r0, r0, r5
   170f4:	sub	r6, r6, r0
   170f8:	asr	r6, r6, #1
   170fc:	stm	sp, {r0, r6, r7}
   17100:	mov	r0, r4
   17104:	bl	16ce8 <flatcc_builder_create_table@@Base>
   17108:	cmp	r0, #0
   1710c:	beq	171c0 <flatcc_builder_end_table@@Base+0x184>
   17110:	ldr	r1, [r4, #32]
   17114:	mov	r5, r0
   17118:	ldr	r0, [r4, #16]
   1711c:	ldr	r2, [r4, #20]
   17120:	ldr	r3, [r4, #52]	; 0x34
   17124:	ldr	r7, [r1, #24]
   17128:	str	r7, [r4, #12]
   1712c:	ldrh	r7, [r1, #28]
   17130:	strh	r7, [r4, #8]
   17134:	ldr	r7, [r1, #16]
   17138:	add	r3, r3, r7
   1713c:	str	r3, [r4, #4]
   17140:	ldr	r3, [r4, #76]	; 0x4c
   17144:	ldr	r1, [r1, #20]
   17148:	add	r1, r3, r1
   1714c:	str	r1, [r4]
   17150:	mov	r1, #0
   17154:	bl	12994 <memset@plt>
   17158:	ldr	r0, [r4, #32]
   1715c:	ldr	r1, [r4, #60]	; 0x3c
   17160:	ldr	r2, [r4, #64]	; 0x40
   17164:	mov	r8, r5
   17168:	ldr	r3, [r0, #8]
   1716c:	str	r3, [r4, #20]
   17170:	ldr	r3, [r0]
   17174:	str	r3, [r4, #28]
   17178:	add	r1, r1, r3
   1717c:	ldr	r7, [r0, #4]
   17180:	str	r1, [r4, #16]
   17184:	sub	r1, r2, r3
   17188:	cmp	r1, r7
   1718c:	movhi	r1, r7
   17190:	str	r1, [r4, #24]
   17194:	ldrh	r1, [r4, #130]	; 0x82
   17198:	ldrh	r2, [r4, #128]	; 0x80
   1719c:	cmp	r2, r1
   171a0:	strhcc	r1, [r4, #128]	; 0x80
   171a4:	ldrh	r1, [r0, #12]
   171a8:	sub	r0, r0, #36	; 0x24
   171ac:	str	r0, [r4, #32]
   171b0:	strh	r1, [r4, #130]	; 0x82
   171b4:	ldr	r0, [r4, #156]	; 0x9c
   171b8:	sub	r0, r0, #1
   171bc:	str	r0, [r4, #156]	; 0x9c
   171c0:	mov	r0, r8
   171c4:	sub	sp, fp, #24
   171c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   171cc:	mov	r8, #0
   171d0:	mov	r0, r8
   171d4:	sub	sp, fp, #24
   171d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   171dc:	movw	r0, #60896	; 0xede0
   171e0:	movw	r1, #58827	; 0xe5cb
   171e4:	movw	r3, #61192	; 0xef08
   171e8:	movw	r2, #1317	; 0x525
   171ec:	movt	r0, #1
   171f0:	movt	r1, #1
   171f4:	movt	r3, #1
   171f8:	bl	129c4 <__assert_fail@plt>

000171fc <flatcc_builder_create_vector@@Base>:
   171fc:	push	{r4, r5, r6, r7, fp, lr}
   17200:	add	fp, sp, #16
   17204:	sub	sp, sp, #80	; 0x50
   17208:	mov	r7, r0
   1720c:	ldr	r0, [fp, #12]
   17210:	cmp	r2, r0
   17214:	bhi	17314 <flatcc_builder_create_vector@@Base+0x118>
   17218:	ldr	r0, [fp, #8]
   1721c:	mov	r4, r2
   17220:	ldrh	r2, [r7, #128]	; 0x80
   17224:	mov	r5, #4
   17228:	cmp	r0, #4
   1722c:	movls	r0, r5
   17230:	cmp	r2, r0
   17234:	sub	r2, fp, #20
   17238:	strhcc	r0, [r7, #128]	; 0x80
   1723c:	str	r4, [fp, #-20]	; 0xffffffec
   17240:	sub	r0, r0, #1
   17244:	ldr	ip, [r7, #136]	; 0x88
   17248:	str	r2, [sp, #12]
   1724c:	mov	r2, #1
   17250:	str	r5, [sp, #4]
   17254:	str	r5, [sp, #16]
   17258:	str	r2, [sp, #8]
   1725c:	mls	r6, r3, r4, ip
   17260:	mul	r3, r3, r4
   17264:	and	r0, r6, r0
   17268:	cmp	r3, #0
   1726c:	beq	17288 <flatcc_builder_create_vector@@Base+0x8c>
   17270:	mov	r2, #2
   17274:	add	r5, r3, #4
   17278:	str	r1, [sp, #20]
   1727c:	str	r3, [sp, #24]
   17280:	str	r2, [sp, #8]
   17284:	str	r5, [sp, #4]
   17288:	cmp	r0, #0
   1728c:	beq	172b8 <flatcc_builder_create_vector@@Base+0xbc>
   17290:	add	r1, sp, #4
   17294:	movw	r3, #58297	; 0xe3b9
   17298:	add	r5, r5, r0
   1729c:	add	r1, r1, r2, lsl #3
   172a0:	add	r2, r2, #1
   172a4:	movt	r3, #1
   172a8:	str	r5, [sp, #4]
   172ac:	str	r3, [r1, #8]
   172b0:	str	r0, [r1, #12]
   172b4:	str	r2, [sp, #8]
   172b8:	cmp	r5, #0
   172bc:	ble	17334 <flatcc_builder_create_vector@@Base+0x138>
   172c0:	ldr	r0, [r7, #36]	; 0x24
   172c4:	ldr	r6, [r7, #44]	; 0x2c
   172c8:	add	r1, sp, #4
   172cc:	sub	r4, ip, r5
   172d0:	str	r5, [sp]
   172d4:	add	r1, r1, #8
   172d8:	mov	r3, r4
   172dc:	blx	r6
   172e0:	cmp	r0, #0
   172e4:	streq	r4, [r7, #136]	; 0x88
   172e8:	moveq	r0, r4
   172ec:	subeq	sp, fp, #16
   172f0:	popeq	{r4, r5, r6, r7, fp, pc}
   172f4:	movw	r0, #63345	; 0xf771
   172f8:	movw	r1, #58827	; 0xe5cb
   172fc:	movw	r3, #63024	; 0xf630
   17300:	movw	r2, #651	; 0x28b
   17304:	movt	r0, #1
   17308:	movt	r1, #1
   1730c:	movt	r3, #1
   17310:	bl	129c4 <__assert_fail@plt>
   17314:	movw	r0, #61258	; 0xef4a
   17318:	movw	r1, #58827	; 0xe5cb
   1731c:	movw	r3, #61277	; 0xef5d
   17320:	movw	r2, #1365	; 0x555
   17324:	movt	r0, #1
   17328:	movt	r1, #1
   1732c:	movt	r3, #1
   17330:	bl	129c4 <__assert_fail@plt>
   17334:	movw	r0, #63345	; 0xf771
   17338:	movw	r1, #58827	; 0xe5cb
   1733c:	movw	r3, #63024	; 0xf630
   17340:	movw	r2, #647	; 0x287
   17344:	movt	r0, #1
   17348:	movt	r1, #1
   1734c:	movt	r3, #1
   17350:	bl	129c4 <__assert_fail@plt>

00017354 <flatcc_builder_end_vector@@Base>:
   17354:	push	{r4, r5, fp, lr}
   17358:	add	fp, sp, #8
   1735c:	sub	sp, sp, #8
   17360:	mov	r4, r0
   17364:	ldr	r0, [r0, #32]
   17368:	ldrh	r1, [r0, #14]
   1736c:	cmp	r1, #4
   17370:	bne	17424 <flatcc_builder_end_vector@@Base+0xd0>
   17374:	ldr	r3, [r0, #16]
   17378:	ldr	r2, [r0, #20]
   1737c:	ldr	r0, [r0, #24]
   17380:	ldr	r1, [r4, #16]
   17384:	ldrh	r5, [r4, #130]	; 0x82
   17388:	str	r0, [sp, #4]
   1738c:	mov	r0, r4
   17390:	str	r5, [sp]
   17394:	bl	171fc <flatcc_builder_create_vector@@Base>
   17398:	mov	r5, r0
   1739c:	cmp	r0, #0
   173a0:	beq	17418 <flatcc_builder_end_vector@@Base+0xc4>
   173a4:	ldr	r0, [r4, #16]
   173a8:	ldr	r2, [r4, #20]
   173ac:	mov	r1, #0
   173b0:	bl	12994 <memset@plt>
   173b4:	ldr	r0, [r4, #32]
   173b8:	ldr	r1, [r4, #60]	; 0x3c
   173bc:	ldr	ip, [r4, #64]	; 0x40
   173c0:	ldr	r3, [r0, #8]
   173c4:	str	r3, [r4, #20]
   173c8:	ldr	r3, [r0]
   173cc:	str	r3, [r4, #28]
   173d0:	add	r1, r1, r3
   173d4:	ldr	r2, [r0, #4]
   173d8:	str	r1, [r4, #16]
   173dc:	sub	r1, ip, r3
   173e0:	cmp	r1, r2
   173e4:	movhi	r1, r2
   173e8:	str	r1, [r4, #24]
   173ec:	ldrh	r1, [r4, #130]	; 0x82
   173f0:	ldrh	r2, [r4, #128]	; 0x80
   173f4:	cmp	r2, r1
   173f8:	strhcc	r1, [r4, #128]	; 0x80
   173fc:	ldrh	r1, [r0, #12]
   17400:	sub	r0, r0, #36	; 0x24
   17404:	str	r0, [r4, #32]
   17408:	strh	r1, [r4, #130]	; 0x82
   1740c:	ldr	r0, [r4, #156]	; 0x9c
   17410:	sub	r0, r0, #1
   17414:	str	r0, [r4, #156]	; 0x9c
   17418:	mov	r0, r5
   1741c:	sub	sp, fp, #8
   17420:	pop	{r4, r5, fp, pc}
   17424:	movw	r0, #59630	; 0xe8ee
   17428:	movw	r1, #58827	; 0xe5cb
   1742c:	movw	r3, #61395	; 0xefd3
   17430:	movw	r2, #1400	; 0x578
   17434:	movt	r0, #1
   17438:	movt	r1, #1
   1743c:	movt	r3, #1
   17440:	bl	129c4 <__assert_fail@plt>

00017444 <flatcc_builder_vector_count@@Base>:
   17444:	ldr	r0, [r0, #32]
   17448:	ldr	r0, [r0, #20]
   1744c:	bx	lr

00017450 <flatcc_builder_vector_edit@@Base>:
   17450:	ldr	r0, [r0, #16]
   17454:	bx	lr

00017458 <flatcc_builder_create_offset_vector_direct@@Base>:
   17458:	mov	r3, #0
   1745c:	b	17460 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17460:	push	{r4, r5, r6, r7, fp, lr}
   17464:	add	fp, sp, #16
   17468:	sub	sp, sp, #80	; 0x50
   1746c:	mov	r5, #0
   17470:	cmn	r2, #-1073741823	; 0xc0000001
   17474:	bhi	175d4 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   17478:	mov	r7, r0
   1747c:	ldrh	r0, [r0, #128]	; 0x80
   17480:	sub	r6, fp, #20
   17484:	mov	r4, #4
   17488:	mov	ip, #1
   1748c:	cmp	r0, #3
   17490:	movls	r0, #4
   17494:	strhls	r0, [r7, #128]	; 0x80
   17498:	str	r2, [fp, #-20]	; 0xffffffec
   1749c:	ldr	lr, [r7, #136]	; 0x88
   174a0:	str	r6, [sp, #12]
   174a4:	mov	r6, #0
   174a8:	str	r4, [sp, #4]
   174ac:	str	r4, [sp, #16]
   174b0:	str	ip, [sp, #8]
   174b4:	cmp	r6, r2, lsl #2
   174b8:	and	r5, lr, #3
   174bc:	beq	174dc <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   174c0:	lsl	r6, r2, #2
   174c4:	mov	ip, #2
   174c8:	str	r1, [sp, #20]
   174cc:	add	r4, r6, #4
   174d0:	str	r6, [sp, #24]
   174d4:	str	ip, [sp, #8]
   174d8:	str	r4, [sp, #4]
   174dc:	cmp	r5, #0
   174e0:	beq	1750c <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   174e4:	add	r6, sp, #4
   174e8:	movw	r0, #58297	; 0xe3b9
   174ec:	add	r4, r4, r5
   174f0:	add	r6, r6, ip, lsl #3
   174f4:	add	ip, ip, #1
   174f8:	movt	r0, #1
   174fc:	str	r4, [sp, #4]
   17500:	str	r0, [r6, #8]
   17504:	str	r5, [r6, #12]
   17508:	str	ip, [sp, #8]
   1750c:	cmp	r2, #0
   17510:	beq	17598 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   17514:	mvn	r0, #3
   17518:	cmp	r3, #0
   1751c:	sub	r0, r0, lr
   17520:	add	r0, r0, r4
   17524:	beq	17570 <flatcc_builder_create_offset_vector_direct@@Base+0x118>
   17528:	mov	r5, #0
   1752c:	ldr	r6, [r1, r5, lsl #2]
   17530:	cmp	r6, #0
   17534:	beq	17550 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   17538:	add	r6, r0, r6
   1753c:	str	r6, [r1, r5, lsl #2]
   17540:	ldrb	r6, [r3, r5]
   17544:	cmp	r6, #0
   17548:	bne	1755c <flatcc_builder_create_offset_vector_direct@@Base+0x104>
   1754c:	b	175e0 <flatcc_builder_create_offset_vector_direct@@Base+0x188>
   17550:	ldrb	r6, [r3, r5]
   17554:	cmp	r6, #0
   17558:	bne	17620 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   1755c:	add	r5, r5, #1
   17560:	sub	r0, r0, #4
   17564:	cmp	r5, r2
   17568:	bcc	1752c <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   1756c:	b	17598 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   17570:	mov	r3, #0
   17574:	ldr	r5, [r1, r3, lsl #2]
   17578:	cmp	r5, #0
   1757c:	beq	17600 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   17580:	add	r6, r0, r5
   17584:	sub	r0, r0, #4
   17588:	str	r6, [r1, r3, lsl #2]
   1758c:	add	r3, r3, #1
   17590:	cmp	r3, r2
   17594:	bcc	17574 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   17598:	cmp	r4, #0
   1759c:	ble	17640 <flatcc_builder_create_offset_vector_direct@@Base+0x1e8>
   175a0:	ldr	r0, [r7, #136]	; 0x88
   175a4:	ldr	r6, [r7, #44]	; 0x2c
   175a8:	add	r1, sp, #4
   175ac:	mov	r2, ip
   175b0:	add	r1, r1, #8
   175b4:	sub	r5, r0, r4
   175b8:	ldr	r0, [r7, #36]	; 0x24
   175bc:	str	r4, [sp]
   175c0:	mov	r3, r5
   175c4:	blx	r6
   175c8:	cmp	r0, #0
   175cc:	bne	17660 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   175d0:	str	r5, [r7, #136]	; 0x88
   175d4:	mov	r0, r5
   175d8:	sub	sp, fp, #16
   175dc:	pop	{r4, r5, r6, r7, fp, pc}
   175e0:	movw	r0, #63333	; 0xf765
   175e4:	movw	r1, #58827	; 0xe5cb
   175e8:	movw	r3, #63347	; 0xf773
   175ec:	movw	r2, #1457	; 0x5b1
   175f0:	movt	r0, #1
   175f4:	movt	r1, #1
   175f8:	movt	r3, #1
   175fc:	bl	129c4 <__assert_fail@plt>
   17600:	movw	r0, #63345	; 0xf771
   17604:	movw	r1, #58827	; 0xe5cb
   17608:	movw	r3, #63347	; 0xf773
   1760c:	movw	r2, #1463	; 0x5b7
   17610:	movt	r0, #1
   17614:	movt	r1, #1
   17618:	movt	r3, #1
   1761c:	bl	129c4 <__assert_fail@plt>
   17620:	movw	r0, #63478	; 0xf7f6
   17624:	movw	r1, #58827	; 0xe5cb
   17628:	movw	r3, #63347	; 0xf773
   1762c:	movw	r2, #1461	; 0x5b5
   17630:	movt	r0, #1
   17634:	movt	r1, #1
   17638:	movt	r3, #1
   1763c:	bl	129c4 <__assert_fail@plt>
   17640:	movw	r0, #63345	; 0xf771
   17644:	movw	r1, #58827	; 0xe5cb
   17648:	movw	r3, #63024	; 0xf630
   1764c:	movw	r2, #647	; 0x287
   17650:	movt	r0, #1
   17654:	movt	r1, #1
   17658:	movt	r3, #1
   1765c:	bl	129c4 <__assert_fail@plt>
   17660:	movw	r0, #63345	; 0xf771
   17664:	movw	r1, #58827	; 0xe5cb
   17668:	movw	r3, #63024	; 0xf630
   1766c:	movw	r2, #651	; 0x28b
   17670:	movt	r0, #1
   17674:	movt	r1, #1
   17678:	movt	r3, #1
   1767c:	bl	129c4 <__assert_fail@plt>

00017680 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   17680:	push	{r4, r5, fp, lr}
   17684:	add	fp, sp, #8
   17688:	mov	r4, r0
   1768c:	ldr	r0, [r0, #32]
   17690:	mov	r3, r1
   17694:	ldrh	r1, [r0, #14]
   17698:	cmp	r1, #5
   1769c:	bne	17738 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   176a0:	ldr	r2, [r0, #20]
   176a4:	ldr	r1, [r4, #16]
   176a8:	mov	r0, r4
   176ac:	bl	17460 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   176b0:	mov	r5, r0
   176b4:	cmp	r0, #0
   176b8:	beq	17730 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   176bc:	ldr	r0, [r4, #16]
   176c0:	ldr	r2, [r4, #20]
   176c4:	mov	r1, #0
   176c8:	bl	12994 <memset@plt>
   176cc:	ldr	r0, [r4, #32]
   176d0:	ldr	r1, [r4, #60]	; 0x3c
   176d4:	ldr	ip, [r4, #64]	; 0x40
   176d8:	ldr	r3, [r0, #8]
   176dc:	str	r3, [r4, #20]
   176e0:	ldr	r3, [r0]
   176e4:	str	r3, [r4, #28]
   176e8:	add	r1, r1, r3
   176ec:	ldr	r2, [r0, #4]
   176f0:	str	r1, [r4, #16]
   176f4:	sub	r1, ip, r3
   176f8:	cmp	r1, r2
   176fc:	movhi	r1, r2
   17700:	str	r1, [r4, #24]
   17704:	ldrh	r1, [r4, #130]	; 0x82
   17708:	ldrh	r2, [r4, #128]	; 0x80
   1770c:	cmp	r2, r1
   17710:	strhcc	r1, [r4, #128]	; 0x80
   17714:	ldrh	r1, [r0, #12]
   17718:	sub	r0, r0, #36	; 0x24
   1771c:	str	r0, [r4, #32]
   17720:	strh	r1, [r4, #130]	; 0x82
   17724:	ldr	r0, [r4, #156]	; 0x9c
   17728:	sub	r0, r0, #1
   1772c:	str	r0, [r4, #156]	; 0x9c
   17730:	mov	r0, r5
   17734:	pop	{r4, r5, fp, pc}
   17738:	movw	r0, #59879	; 0xe9e7
   1773c:	movw	r1, #58827	; 0xe5cb
   17740:	movw	r3, #61536	; 0xf060
   17744:	movw	r2, #1493	; 0x5d5
   17748:	movt	r0, #1
   1774c:	movt	r1, #1
   17750:	movt	r3, #1
   17754:	bl	129c4 <__assert_fail@plt>

00017758 <flatcc_builder_offset_vector_edit@@Base>:
   17758:	ldr	r0, [r0, #16]
   1775c:	bx	lr

00017760 <flatcc_builder_offset_vector_count@@Base>:
   17760:	ldr	r0, [r0, #32]
   17764:	ldr	r0, [r0, #20]
   17768:	bx	lr

0001776c <flatcc_builder_table_add_union@@Base>:
   1776c:	push	{r4, r5, r6, r7, fp, lr}
   17770:	add	fp, sp, #16
   17774:	mov	r5, r0
   17778:	ldr	r0, [r0, #32]
   1777c:	ldrh	r0, [r0, #14]
   17780:	cmp	r0, #3
   17784:	bne	1780c <flatcc_builder_table_add_union@@Base+0xa0>
   17788:	mov	r7, r3
   1778c:	mov	r4, r2
   17790:	mov	r6, r1
   17794:	cmp	r3, #0
   17798:	beq	177a8 <flatcc_builder_table_add_union@@Base+0x3c>
   1779c:	uxtb	r0, r4
   177a0:	cmp	r0, #0
   177a4:	beq	1782c <flatcc_builder_table_add_union@@Base+0xc0>
   177a8:	cmp	r7, #0
   177ac:	beq	177c8 <flatcc_builder_table_add_union@@Base+0x5c>
   177b0:	mov	r0, r5
   177b4:	mov	r1, r6
   177b8:	bl	1786c <flatcc_builder_table_add_offset@@Base>
   177bc:	cmp	r0, #0
   177c0:	beq	1784c <flatcc_builder_table_add_union@@Base+0xe0>
   177c4:	str	r7, [r0]
   177c8:	sub	r1, r6, #1
   177cc:	mov	r0, r5
   177d0:	mov	r2, #1
   177d4:	mov	r3, #1
   177d8:	bl	179fc <flatcc_builder_table_add@@Base>
   177dc:	cmp	r0, #0
   177e0:	strbne	r4, [r0]
   177e4:	movne	r0, #0
   177e8:	popne	{r4, r5, r6, r7, fp, pc}
   177ec:	movw	r0, #61782	; 0xf156
   177f0:	movw	r1, #58827	; 0xe5cb
   177f4:	movw	r3, #61650	; 0xf0d2
   177f8:	movw	r2, #1526	; 0x5f6
   177fc:	movt	r0, #1
   17800:	movt	r1, #1
   17804:	movt	r3, #1
   17808:	bl	129c4 <__assert_fail@plt>
   1780c:	movw	r0, #60896	; 0xede0
   17810:	movw	r1, #58827	; 0xe5cb
   17814:	movw	r3, #61650	; 0xf0d2
   17818:	movw	r2, #1518	; 0x5ee
   1781c:	movt	r0, #1
   17820:	movt	r1, #1
   17824:	movt	r3, #1
   17828:	bl	129c4 <__assert_fail@plt>
   1782c:	movw	r0, #61738	; 0xf12a
   17830:	movw	r1, #58827	; 0xe5cb
   17834:	movw	r3, #61650	; 0xf0d2
   17838:	movw	r2, #1519	; 0x5ef
   1783c:	movt	r0, #1
   17840:	movt	r1, #1
   17844:	movt	r3, #1
   17848:	bl	129c4 <__assert_fail@plt>
   1784c:	movw	r0, #61772	; 0xf14c
   17850:	movw	r1, #58827	; 0xe5cb
   17854:	movw	r3, #61650	; 0xf0d2
   17858:	movw	r2, #1522	; 0x5f2
   1785c:	movt	r0, #1
   17860:	movt	r1, #1
   17864:	movt	r3, #1
   17868:	bl	129c4 <__assert_fail@plt>

0001786c <flatcc_builder_table_add_offset@@Base>:
   1786c:	push	{r4, r5, r6, r7, fp, lr}
   17870:	add	fp, sp, #16
   17874:	sub	sp, sp, #8
   17878:	mov	r4, r0
   1787c:	ldr	r0, [r0, #32]
   17880:	ldrh	r0, [r0, #14]
   17884:	cmp	r0, #3
   17888:	bne	1799c <flatcc_builder_table_add_offset@@Base+0x130>
   1788c:	movw	r0, #32765	; 0x7ffd
   17890:	mov	r5, r1
   17894:	cmp	r1, r0
   17898:	bcs	179bc <flatcc_builder_table_add_offset@@Base+0x150>
   1789c:	ldr	r0, [r4, #4]
   178a0:	add	r1, r0, r5, lsl #1
   178a4:	ldrh	r1, [r1]
   178a8:	cmp	r1, #0
   178ac:	bne	179dc <flatcc_builder_table_add_offset@@Base+0x170>
   178b0:	ldr	r2, [r4, #20]
   178b4:	ldr	r1, [r4, #12]
   178b8:	ldr	r3, [r4, #24]
   178bc:	add	r2, r2, #3
   178c0:	eor	r1, r1, r5
   178c4:	bic	r6, r2, #3
   178c8:	movw	r2, #31153	; 0x79b1
   178cc:	movt	r2, #40503	; 0x9e37
   178d0:	add	r7, r6, #4
   178d4:	mul	r1, r1, r2
   178d8:	cmp	r7, r3
   178dc:	str	r7, [r4, #20]
   178e0:	eor	r1, r1, #4
   178e4:	mul	r1, r1, r2
   178e8:	str	r1, [r4, #12]
   178ec:	bls	17960 <flatcc_builder_table_add_offset@@Base+0xf4>
   178f0:	ldr	r1, [r4, #28]
   178f4:	ldr	r0, [r4, #40]	; 0x28
   178f8:	ldr	ip, [r4, #48]	; 0x30
   178fc:	mov	r2, #1
   17900:	mov	r3, #1
   17904:	str	r2, [sp]
   17908:	add	r2, r1, r7
   1790c:	add	r1, r4, #60	; 0x3c
   17910:	blx	ip
   17914:	mov	r1, r0
   17918:	mov	r0, #0
   1791c:	cmp	r1, #0
   17920:	beq	1792c <flatcc_builder_table_add_offset@@Base+0xc0>
   17924:	sub	sp, fp, #16
   17928:	pop	{r4, r5, r6, r7, fp, pc}
   1792c:	ldr	r0, [r4, #28]
   17930:	ldr	r2, [r4, #60]	; 0x3c
   17934:	ldr	r3, [r4, #64]	; 0x40
   17938:	ldr	r1, [r4, #32]
   1793c:	add	r2, r2, r0
   17940:	sub	r0, r3, r0
   17944:	str	r2, [r4, #16]
   17948:	movw	r2, #65532	; 0xfffc
   1794c:	cmp	r0, r2
   17950:	movcs	r0, r2
   17954:	str	r0, [r4, #24]
   17958:	str	r2, [r1, #4]
   1795c:	ldr	r0, [r4, #4]
   17960:	uxth	r1, r5
   17964:	add	r0, r0, r1, lsl #1
   17968:	strh	r7, [r0]
   1796c:	ldrh	r0, [r4, #8]
   17970:	cmp	r0, r1
   17974:	addls	r0, r5, #1
   17978:	strhls	r0, [r4, #8]
   1797c:	ldr	r0, [r4]
   17980:	add	r1, r0, #2
   17984:	str	r1, [r4]
   17988:	strh	r6, [r0]
   1798c:	ldr	r0, [r4, #16]
   17990:	add	r0, r0, r6
   17994:	sub	sp, fp, #16
   17998:	pop	{r4, r5, r6, r7, fp, pc}
   1799c:	movw	r0, #60896	; 0xede0
   179a0:	movw	r1, #58827	; 0xe5cb
   179a4:	movw	r3, #62676	; 0xf4d4
   179a8:	movw	r2, #1811	; 0x713
   179ac:	movt	r0, #1
   179b0:	movt	r1, #1
   179b4:	movt	r3, #1
   179b8:	bl	129c4 <__assert_fail@plt>
   179bc:	movw	r0, #62548	; 0xf454
   179c0:	movw	r1, #58827	; 0xe5cb
   179c4:	movw	r3, #62676	; 0xf4d4
   179c8:	movw	r2, #1812	; 0x714
   179cc:	movt	r0, #1
   179d0:	movt	r1, #1
   179d4:	movt	r3, #1
   179d8:	bl	129c4 <__assert_fail@plt>
   179dc:	movw	r0, #63345	; 0xf771
   179e0:	movw	r1, #58827	; 0xe5cb
   179e4:	movw	r3, #62676	; 0xf4d4
   179e8:	movw	r2, #1819	; 0x71b
   179ec:	movt	r0, #1
   179f0:	movt	r1, #1
   179f4:	movt	r3, #1
   179f8:	bl	129c4 <__assert_fail@plt>

000179fc <flatcc_builder_table_add@@Base>:
   179fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17a00:	add	fp, sp, #24
   17a04:	sub	sp, sp, #8
   17a08:	mov	r4, r0
   17a0c:	ldr	r0, [r0, #32]
   17a10:	ldrh	r0, [r0, #14]
   17a14:	cmp	r0, #3
   17a18:	bne	17b38 <flatcc_builder_table_add@@Base+0x13c>
   17a1c:	movw	r0, #32765	; 0x7ffd
   17a20:	mov	r8, r1
   17a24:	cmp	r1, r0
   17a28:	bcs	17b58 <flatcc_builder_table_add@@Base+0x15c>
   17a2c:	ldrh	r0, [r4, #130]	; 0x82
   17a30:	cmp	r0, r3
   17a34:	strhcc	r3, [r4, #130]	; 0x82
   17a38:	ldr	r0, [r4, #4]
   17a3c:	add	r1, r0, r8, lsl #1
   17a40:	ldrh	r1, [r1]
   17a44:	cmp	r1, #0
   17a48:	bne	17b78 <flatcc_builder_table_add@@Base+0x17c>
   17a4c:	ldr	r1, [r4, #12]
   17a50:	movw	r7, #31153	; 0x79b1
   17a54:	ldr	r6, [r4, #20]
   17a58:	ldr	r5, [r4, #24]
   17a5c:	movt	r7, #40503	; 0x9e37
   17a60:	eor	r1, r1, r8
   17a64:	mul	r1, r1, r7
   17a68:	eor	r1, r1, r2
   17a6c:	mul	r1, r1, r7
   17a70:	str	r1, [r4, #12]
   17a74:	add	r1, r3, r6
   17a78:	rsb	r3, r3, #0
   17a7c:	sub	r1, r1, #1
   17a80:	and	r6, r1, r3
   17a84:	add	r1, r6, r2
   17a88:	cmp	r1, r5
   17a8c:	str	r1, [r4, #20]
   17a90:	bcc	17b08 <flatcc_builder_table_add@@Base+0x10c>
   17a94:	ldr	r2, [r4, #28]
   17a98:	ldr	r0, [r4, #40]	; 0x28
   17a9c:	ldr	r7, [r4, #48]	; 0x30
   17aa0:	mov	r3, #1
   17aa4:	str	r3, [sp]
   17aa8:	mov	r3, #1
   17aac:	add	r1, r1, r2
   17ab0:	add	r2, r1, #1
   17ab4:	add	r1, r4, #60	; 0x3c
   17ab8:	blx	r7
   17abc:	mov	r1, r0
   17ac0:	mov	r0, #0
   17ac4:	cmp	r1, #0
   17ac8:	beq	17ad4 <flatcc_builder_table_add@@Base+0xd8>
   17acc:	sub	sp, fp, #24
   17ad0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ad4:	ldr	r0, [r4, #28]
   17ad8:	ldr	r2, [r4, #60]	; 0x3c
   17adc:	ldr	r3, [r4, #64]	; 0x40
   17ae0:	ldr	r1, [r4, #32]
   17ae4:	add	r2, r2, r0
   17ae8:	sub	r0, r3, r0
   17aec:	str	r2, [r4, #16]
   17af0:	movw	r2, #65532	; 0xfffc
   17af4:	cmp	r0, r2
   17af8:	movcs	r0, r2
   17afc:	str	r0, [r4, #24]
   17b00:	str	r2, [r1, #4]
   17b04:	ldr	r0, [r4, #4]
   17b08:	uxth	r1, r8
   17b0c:	add	r2, r6, #4
   17b10:	add	r0, r0, r1, lsl #1
   17b14:	strh	r2, [r0]
   17b18:	ldrh	r0, [r4, #8]
   17b1c:	cmp	r0, r1
   17b20:	addls	r0, r8, #1
   17b24:	strhls	r0, [r4, #8]
   17b28:	ldr	r0, [r4, #16]
   17b2c:	add	r0, r0, r6
   17b30:	sub	sp, fp, #24
   17b34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17b38:	movw	r0, #60896	; 0xede0
   17b3c:	movw	r1, #58827	; 0xe5cb
   17b40:	movw	r3, #62474	; 0xf40a
   17b44:	movw	r2, #1773	; 0x6ed
   17b48:	movt	r0, #1
   17b4c:	movt	r1, #1
   17b50:	movt	r3, #1
   17b54:	bl	129c4 <__assert_fail@plt>
   17b58:	movw	r0, #62548	; 0xf454
   17b5c:	movw	r1, #58827	; 0xe5cb
   17b60:	movw	r3, #62474	; 0xf40a
   17b64:	movw	r2, #1774	; 0x6ee
   17b68:	movt	r0, #1
   17b6c:	movt	r1, #1
   17b70:	movt	r3, #1
   17b74:	bl	129c4 <__assert_fail@plt>
   17b78:	movw	r0, #63345	; 0xf771
   17b7c:	movw	r1, #58827	; 0xe5cb
   17b80:	movw	r3, #62474	; 0xf40a
   17b84:	movw	r2, #1784	; 0x6f8
   17b88:	movt	r0, #1
   17b8c:	movt	r1, #1
   17b90:	movt	r3, #1
   17b94:	bl	129c4 <__assert_fail@plt>

00017b98 <flatcc_builder_table_add_union_vector@@Base>:
   17b98:	push	{r4, r5, r6, r7, fp, lr}
   17b9c:	add	fp, sp, #16
   17ba0:	mov	r6, r0
   17ba4:	ldr	r0, [r0, #32]
   17ba8:	ldrh	r0, [r0, #14]
   17bac:	cmp	r0, #3
   17bb0:	bne	17c18 <flatcc_builder_table_add_union_vector@@Base+0x80>
   17bb4:	clz	r0, r3
   17bb8:	mov	r5, r1
   17bbc:	clz	r1, r2
   17bc0:	mov	r4, r3
   17bc4:	mov	r7, r2
   17bc8:	lsr	r0, r0, #5
   17bcc:	lsr	r1, r1, #5
   17bd0:	cmp	r1, r0
   17bd4:	bne	17c38 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   17bd8:	cmp	r7, #0
   17bdc:	beq	17c10 <flatcc_builder_table_add_union_vector@@Base+0x78>
   17be0:	sub	r1, r5, #1
   17be4:	mov	r0, r6
   17be8:	bl	1786c <flatcc_builder_table_add_offset@@Base>
   17bec:	cmp	r0, #0
   17bf0:	beq	17c58 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   17bf4:	str	r7, [r0]
   17bf8:	mov	r0, r6
   17bfc:	mov	r1, r5
   17c00:	bl	1786c <flatcc_builder_table_add_offset@@Base>
   17c04:	cmp	r0, #0
   17c08:	beq	17c78 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   17c0c:	str	r4, [r0]
   17c10:	mov	r0, #0
   17c14:	pop	{r4, r5, r6, r7, fp, pc}
   17c18:	movw	r0, #60896	; 0xede0
   17c1c:	movw	r1, #58827	; 0xe5cb
   17c20:	movw	r3, #61794	; 0xf162
   17c24:	mov	r2, #1536	; 0x600
   17c28:	movt	r0, #1
   17c2c:	movt	r1, #1
   17c30:	movt	r3, #1
   17c34:	bl	129c4 <__assert_fail@plt>
   17c38:	movw	r0, #61893	; 0xf1c5
   17c3c:	movw	r1, #58827	; 0xe5cb
   17c40:	movw	r3, #61794	; 0xf162
   17c44:	movw	r2, #1537	; 0x601
   17c48:	movt	r0, #1
   17c4c:	movt	r1, #1
   17c50:	movt	r3, #1
   17c54:	bl	129c4 <__assert_fail@plt>
   17c58:	movw	r0, #61772	; 0xf14c
   17c5c:	movw	r1, #58827	; 0xe5cb
   17c60:	movw	r3, #61794	; 0xf162
   17c64:	movw	r2, #1540	; 0x604
   17c68:	movt	r0, #1
   17c6c:	movt	r1, #1
   17c70:	movt	r3, #1
   17c74:	bl	129c4 <__assert_fail@plt>
   17c78:	movw	r0, #61772	; 0xf14c
   17c7c:	movw	r1, #58827	; 0xe5cb
   17c80:	movw	r3, #61794	; 0xf162
   17c84:	movw	r2, #1544	; 0x608
   17c88:	movt	r0, #1
   17c8c:	movt	r1, #1
   17c90:	movt	r3, #1
   17c94:	bl	129c4 <__assert_fail@plt>

00017c98 <flatcc_builder_create_union_vector@@Base>:
   17c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c9c:	add	fp, sp, #28
   17ca0:	sub	sp, sp, #12
   17ca4:	mov	r7, #0
   17ca8:	mov	r4, r1
   17cac:	mov	r5, r0
   17cb0:	mov	sl, r3
   17cb4:	mov	r9, r2
   17cb8:	mov	r6, #4
   17cbc:	str	r7, [r0]
   17cc0:	str	r7, [r0, #4]
   17cc4:	mov	r0, r1
   17cc8:	mov	r1, #4
   17ccc:	bl	15150 <flatcc_builder_start_buffer@@Base+0xbc>
   17cd0:	cmp	r0, #0
   17cd4:	beq	17ce0 <flatcc_builder_create_union_vector@@Base+0x48>
   17cd8:	sub	sp, fp, #28
   17cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ce0:	ldr	r0, [r4, #32]
   17ce4:	mov	r1, #5
   17ce8:	str	r6, [r0, #16]
   17cec:	ldr	r0, [r4, #32]
   17cf0:	str	r7, [r0, #20]
   17cf4:	ldr	r0, [r4, #32]
   17cf8:	strh	r1, [r0, #14]
   17cfc:	ldr	r1, [r4, #28]
   17d00:	ldr	r2, [r4, #60]	; 0x3c
   17d04:	ldr	r3, [r4, #64]	; 0x40
   17d08:	add	r2, r2, r1
   17d0c:	sub	r1, r3, r1
   17d10:	str	r2, [r4, #16]
   17d14:	mvn	r2, #3
   17d18:	cmn	r1, #4
   17d1c:	movcs	r1, r2
   17d20:	str	r1, [r4, #24]
   17d24:	str	r2, [r0, #4]
   17d28:	ldr	r1, [r0, #20]
   17d2c:	adds	r1, r1, sl
   17d30:	cmpcc	r1, #1073741824	; 0x40000000
   17d34:	bcc	17d58 <flatcc_builder_create_union_vector@@Base+0xc0>
   17d38:	movw	r0, #63098	; 0xf67a
   17d3c:	movw	r1, #58827	; 0xe5cb
   17d40:	movw	r3, #63125	; 0xf695
   17d44:	mov	r2, #892	; 0x37c
   17d48:	movt	r0, #1
   17d4c:	movt	r1, #1
   17d50:	movt	r3, #1
   17d54:	bl	129c4 <__assert_fail@plt>
   17d58:	str	r1, [r0, #20]
   17d5c:	ldr	r7, [r4, #20]
   17d60:	ldr	r0, [r4, #24]
   17d64:	add	r1, r7, sl, lsl #2
   17d68:	cmp	r1, r0
   17d6c:	str	r1, [r4, #20]
   17d70:	bcs	17d84 <flatcc_builder_create_union_vector@@Base+0xec>
   17d74:	ldr	r1, [r4, #16]
   17d78:	adds	r2, r1, r7
   17d7c:	bne	17dec <flatcc_builder_create_union_vector@@Base+0x154>
   17d80:	b	17cd8 <flatcc_builder_create_union_vector@@Base+0x40>
   17d84:	ldr	r2, [r4, #28]
   17d88:	ldr	r0, [r4, #40]	; 0x28
   17d8c:	ldr	r6, [r4, #48]	; 0x30
   17d90:	mov	r3, #1
   17d94:	str	r3, [sp]
   17d98:	mov	r3, #1
   17d9c:	add	r1, r1, r2
   17da0:	add	r2, r1, #1
   17da4:	add	r1, r4, #60	; 0x3c
   17da8:	blx	r6
   17dac:	cmp	r0, #0
   17db0:	bne	17cd8 <flatcc_builder_create_union_vector@@Base+0x40>
   17db4:	ldr	r0, [r4, #28]
   17db8:	ldr	r1, [r4, #60]	; 0x3c
   17dbc:	ldr	r3, [r4, #64]	; 0x40
   17dc0:	ldr	r2, [r4, #32]
   17dc4:	add	r1, r1, r0
   17dc8:	sub	r0, r3, r0
   17dcc:	mvn	r3, #3
   17dd0:	cmn	r0, #4
   17dd4:	str	r1, [r4, #16]
   17dd8:	movcs	r0, r3
   17ddc:	str	r0, [r4, #24]
   17de0:	str	r3, [r2, #4]
   17de4:	adds	r2, r1, r7
   17de8:	beq	17cd8 <flatcc_builder_create_union_vector@@Base+0x40>
   17dec:	ldr	r7, [r4, #20]
   17df0:	add	r2, r7, sl
   17df4:	cmp	r2, r0
   17df8:	str	r2, [r4, #20]
   17dfc:	bcc	17e60 <flatcc_builder_create_union_vector@@Base+0x1c8>
   17e00:	ldr	r1, [r4, #28]
   17e04:	ldr	r0, [r4, #40]	; 0x28
   17e08:	ldr	r6, [r4, #48]	; 0x30
   17e0c:	mov	r3, #1
   17e10:	str	r3, [sp]
   17e14:	mov	r3, #1
   17e18:	add	r1, r2, r1
   17e1c:	add	r2, r1, #1
   17e20:	add	r1, r4, #60	; 0x3c
   17e24:	blx	r6
   17e28:	cmp	r0, #0
   17e2c:	bne	17cd8 <flatcc_builder_create_union_vector@@Base+0x40>
   17e30:	ldr	r0, [r4, #28]
   17e34:	ldr	r1, [r4, #60]	; 0x3c
   17e38:	ldr	r3, [r4, #64]	; 0x40
   17e3c:	ldr	r2, [r4, #32]
   17e40:	add	r1, r1, r0
   17e44:	sub	r0, r3, r0
   17e48:	mvn	r3, #3
   17e4c:	cmn	r0, #4
   17e50:	str	r1, [r4, #16]
   17e54:	movcs	r0, r3
   17e58:	str	r0, [r4, #24]
   17e5c:	str	r3, [r2, #4]
   17e60:	adds	r8, r1, r7
   17e64:	beq	17cd8 <flatcc_builder_create_union_vector@@Base+0x40>
   17e68:	cmp	sl, #0
   17e6c:	beq	17e9c <flatcc_builder_create_union_vector@@Base+0x204>
   17e70:	add	r0, r9, #4
   17e74:	mov	r2, sl
   17e78:	mov	r3, r1
   17e7c:	mov	r7, r8
   17e80:	ldrb	r6, [r0, #-4]
   17e84:	subs	r2, r2, #1
   17e88:	strb	r6, [r7], #1
   17e8c:	ldr	r6, [r0]
   17e90:	add	r0, r0, #8
   17e94:	str	r6, [r3], #4
   17e98:	bne	17e80 <flatcc_builder_create_union_vector@@Base+0x1e8>
   17e9c:	mov	r0, r4
   17ea0:	mov	r2, sl
   17ea4:	mov	r3, r8
   17ea8:	bl	17460 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17eac:	mov	r7, r0
   17eb0:	mov	r9, #0
   17eb4:	cmp	r0, #0
   17eb8:	beq	17ee4 <flatcc_builder_create_union_vector@@Base+0x24c>
   17ebc:	mvn	r0, #0
   17ec0:	mov	r1, #1
   17ec4:	mov	r2, sl
   17ec8:	mov	r3, #1
   17ecc:	str	r1, [sp]
   17ed0:	str	r0, [sp, #4]
   17ed4:	mov	r0, r4
   17ed8:	mov	r1, r8
   17edc:	bl	171fc <flatcc_builder_create_vector@@Base>
   17ee0:	b	17ee8 <flatcc_builder_create_union_vector@@Base+0x250>
   17ee4:	mov	r0, #0
   17ee8:	orr	r1, r9, r7
   17eec:	stm	r5, {r0, r1}
   17ef0:	mov	r1, #0
   17ef4:	ldr	r0, [r4, #16]
   17ef8:	ldr	r2, [r4, #20]
   17efc:	bl	12994 <memset@plt>
   17f00:	ldr	r0, [r4, #32]
   17f04:	ldr	r1, [r4, #60]	; 0x3c
   17f08:	ldr	r2, [r4, #64]	; 0x40
   17f0c:	ldr	r3, [r0, #8]
   17f10:	str	r3, [r4, #20]
   17f14:	ldr	r3, [r0]
   17f18:	str	r3, [r4, #28]
   17f1c:	add	r1, r1, r3
   17f20:	ldr	r7, [r0, #4]
   17f24:	str	r1, [r4, #16]
   17f28:	sub	r1, r2, r3
   17f2c:	cmp	r1, r7
   17f30:	movhi	r1, r7
   17f34:	str	r1, [r4, #24]
   17f38:	ldrh	r1, [r4, #130]	; 0x82
   17f3c:	ldrh	r2, [r4, #128]	; 0x80
   17f40:	cmp	r2, r1
   17f44:	strhcc	r1, [r4, #128]	; 0x80
   17f48:	ldrh	r1, [r0, #12]
   17f4c:	sub	r0, r0, #36	; 0x24
   17f50:	str	r0, [r4, #32]
   17f54:	strh	r1, [r4, #130]	; 0x82
   17f58:	ldr	r0, [r4, #156]	; 0x9c
   17f5c:	sub	r0, r0, #1
   17f60:	str	r0, [r4, #156]	; 0x9c
   17f64:	sub	sp, fp, #28
   17f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017f6c <flatcc_builder_create_union_vector_direct@@Base>:
   17f6c:	push	{r4, r5, r6, r7, fp, lr}
   17f70:	add	fp, sp, #16
   17f74:	sub	sp, sp, #8
   17f78:	ldr	r7, [fp, #8]
   17f7c:	mov	r5, r2
   17f80:	mov	r4, r0
   17f84:	mov	r0, #0
   17f88:	mov	r6, r1
   17f8c:	str	r0, [r4]
   17f90:	str	r0, [r4, #4]
   17f94:	mov	r0, r1
   17f98:	mov	r1, r3
   17f9c:	mov	r3, r5
   17fa0:	mov	r2, r7
   17fa4:	bl	17460 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17fa8:	cmp	r0, #0
   17fac:	str	r0, [r4, #4]
   17fb0:	beq	17fdc <flatcc_builder_create_union_vector_direct@@Base+0x70>
   17fb4:	mvn	r0, #0
   17fb8:	mov	r1, #1
   17fbc:	mov	r2, r7
   17fc0:	mov	r3, #1
   17fc4:	str	r1, [sp]
   17fc8:	str	r0, [sp, #4]
   17fcc:	mov	r0, r6
   17fd0:	mov	r1, r5
   17fd4:	bl	171fc <flatcc_builder_create_vector@@Base>
   17fd8:	str	r0, [r4]
   17fdc:	sub	sp, fp, #16
   17fe0:	pop	{r4, r5, r6, r7, fp, pc}

00017fe4 <flatcc_builder_start_union_vector@@Base>:
   17fe4:	push	{r4, sl, fp, lr}
   17fe8:	add	fp, sp, #8
   17fec:	mov	r1, #4
   17ff0:	mov	r4, r0
   17ff4:	bl	15150 <flatcc_builder_start_buffer@@Base+0xbc>
   17ff8:	mov	r1, r0
   17ffc:	mvn	r0, #0
   18000:	cmp	r1, #0
   18004:	popne	{r4, sl, fp, pc}
   18008:	ldr	r0, [r4, #32]
   1800c:	mov	r1, #8
   18010:	mov	r2, #7
   18014:	str	r1, [r0, #16]
   18018:	mov	r0, #0
   1801c:	ldr	r1, [r4, #32]
   18020:	str	r0, [r1, #20]
   18024:	ldr	r1, [r4, #32]
   18028:	strh	r2, [r1, #14]
   1802c:	ldr	r2, [r4, #28]
   18030:	ldr	r3, [r4, #60]	; 0x3c
   18034:	ldr	ip, [r4, #64]	; 0x40
   18038:	add	r3, r3, r2
   1803c:	sub	r2, ip, r2
   18040:	str	r3, [r4, #16]
   18044:	mvn	r3, #3
   18048:	cmn	r2, #4
   1804c:	movcs	r2, r3
   18050:	str	r2, [r4, #24]
   18054:	str	r3, [r1, #4]
   18058:	pop	{r4, sl, fp, pc}

0001805c <flatcc_builder_end_union_vector@@Base>:
   1805c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18060:	add	fp, sp, #28
   18064:	sub	sp, sp, #12
   18068:	mov	sl, r0
   1806c:	mov	r0, #0
   18070:	mov	r4, r1
   18074:	str	r0, [sl]
   18078:	str	r0, [sl, #4]
   1807c:	ldr	r0, [r1, #32]
   18080:	ldrh	r1, [r0, #14]
   18084:	cmp	r1, #7
   18088:	bne	18230 <flatcc_builder_end_union_vector@@Base+0x1d4>
   1808c:	ldr	r6, [r0, #20]
   18090:	ldr	r7, [r4, #20]
   18094:	ldr	r2, [r4, #24]
   18098:	add	r0, r6, r6, lsl #2
   1809c:	add	r1, r7, r0
   180a0:	cmp	r1, r2
   180a4:	str	r1, [r4, #20]
   180a8:	bcs	18138 <flatcc_builder_end_union_vector@@Base+0xdc>
   180ac:	ldr	r0, [r4, #16]
   180b0:	adds	r1, r0, r7
   180b4:	beq	181a0 <flatcc_builder_end_union_vector@@Base+0x144>
   180b8:	add	r8, r1, r6, lsl #2
   180bc:	cmp	r6, #0
   180c0:	beq	180f0 <flatcc_builder_end_union_vector@@Base+0x94>
   180c4:	add	r0, r0, #4
   180c8:	mov	r2, r6
   180cc:	mov	r3, r1
   180d0:	mov	r7, r8
   180d4:	ldrb	r5, [r0, #-4]
   180d8:	subs	r2, r2, #1
   180dc:	strb	r5, [r7], #1
   180e0:	ldr	r5, [r0]
   180e4:	add	r0, r0, #8
   180e8:	str	r5, [r3], #4
   180ec:	bne	180d4 <flatcc_builder_end_union_vector@@Base+0x78>
   180f0:	mov	r0, r4
   180f4:	mov	r2, r6
   180f8:	mov	r3, r8
   180fc:	bl	17460 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   18100:	mov	r7, r0
   18104:	mov	r9, #0
   18108:	cmp	r0, #0
   1810c:	beq	181a8 <flatcc_builder_end_union_vector@@Base+0x14c>
   18110:	mvn	r0, #0
   18114:	mov	r1, #1
   18118:	mov	r2, r6
   1811c:	mov	r3, #1
   18120:	str	r1, [sp]
   18124:	str	r0, [sp, #4]
   18128:	mov	r0, r4
   1812c:	mov	r1, r8
   18130:	bl	171fc <flatcc_builder_create_vector@@Base>
   18134:	b	181ac <flatcc_builder_end_union_vector@@Base+0x150>
   18138:	ldr	r2, [r4, #28]
   1813c:	ldr	r0, [r4, #40]	; 0x28
   18140:	ldr	r5, [r4, #48]	; 0x30
   18144:	mov	r3, #1
   18148:	str	r3, [sp]
   1814c:	mov	r3, #1
   18150:	add	r1, r1, r2
   18154:	add	r2, r1, #1
   18158:	add	r1, r4, #60	; 0x3c
   1815c:	blx	r5
   18160:	cmp	r0, #0
   18164:	bne	181a0 <flatcc_builder_end_union_vector@@Base+0x144>
   18168:	ldr	r1, [r4, #28]
   1816c:	ldr	r0, [r4, #60]	; 0x3c
   18170:	ldr	r3, [r4, #64]	; 0x40
   18174:	ldr	r2, [r4, #32]
   18178:	add	r0, r0, r1
   1817c:	sub	r1, r3, r1
   18180:	mvn	r3, #3
   18184:	cmn	r1, #4
   18188:	str	r0, [r4, #16]
   1818c:	movcs	r1, r3
   18190:	str	r1, [r4, #24]
   18194:	str	r3, [r2, #4]
   18198:	adds	r1, r0, r7
   1819c:	bne	180b8 <flatcc_builder_end_union_vector@@Base+0x5c>
   181a0:	sub	sp, fp, #28
   181a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181a8:	mov	r0, #0
   181ac:	orr	r1, r9, r7
   181b0:	stm	sl, {r0, r1}
   181b4:	mov	r1, #0
   181b8:	ldr	r0, [r4, #16]
   181bc:	ldr	r2, [r4, #20]
   181c0:	bl	12994 <memset@plt>
   181c4:	ldr	r0, [r4, #32]
   181c8:	ldr	r1, [r4, #60]	; 0x3c
   181cc:	ldr	r2, [r4, #64]	; 0x40
   181d0:	ldr	r3, [r0, #8]
   181d4:	str	r3, [r4, #20]
   181d8:	ldr	r3, [r0]
   181dc:	str	r3, [r4, #28]
   181e0:	add	r1, r1, r3
   181e4:	ldr	r7, [r0, #4]
   181e8:	str	r1, [r4, #16]
   181ec:	sub	r1, r2, r3
   181f0:	cmp	r1, r7
   181f4:	movhi	r1, r7
   181f8:	str	r1, [r4, #24]
   181fc:	ldrh	r1, [r4, #130]	; 0x82
   18200:	ldrh	r2, [r4, #128]	; 0x80
   18204:	cmp	r2, r1
   18208:	strhcc	r1, [r4, #128]	; 0x80
   1820c:	ldrh	r1, [r0, #12]
   18210:	sub	r0, r0, #36	; 0x24
   18214:	str	r0, [r4, #32]
   18218:	strh	r1, [r4, #130]	; 0x82
   1821c:	ldr	r0, [r4, #156]	; 0x9c
   18220:	sub	r0, r0, #1
   18224:	str	r0, [r4, #156]	; 0x9c
   18228:	sub	sp, fp, #28
   1822c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18230:	movw	r0, #61933	; 0xf1ed
   18234:	movw	r1, #58827	; 0xe5cb
   18238:	movw	r3, #61983	; 0xf21f
   1823c:	movw	r2, #1617	; 0x651
   18240:	movt	r0, #1
   18244:	movt	r1, #1
   18248:	movt	r3, #1
   1824c:	bl	129c4 <__assert_fail@plt>

00018250 <flatcc_builder_union_vector_count@@Base>:
   18250:	ldr	r0, [r0, #32]
   18254:	ldr	r0, [r0, #20]
   18258:	bx	lr

0001825c <flatcc_builder_union_vector_edit@@Base>:
   1825c:	ldr	r0, [r0, #16]
   18260:	bx	lr

00018264 <flatcc_builder_extend_union_vector@@Base>:
   18264:	push	{r4, r5, fp, lr}
   18268:	add	fp, sp, #8
   1826c:	sub	sp, sp, #8
   18270:	mov	r4, r0
   18274:	ldr	r0, [r0, #32]
   18278:	ldr	r2, [r0, #20]
   1827c:	adds	r2, r2, r1
   18280:	cmpcc	r2, #536870912	; 0x20000000
   18284:	bcc	182a8 <flatcc_builder_extend_union_vector@@Base+0x44>
   18288:	movw	r0, #63098	; 0xf67a
   1828c:	movw	r1, #58827	; 0xe5cb
   18290:	movw	r3, #63125	; 0xf695
   18294:	mov	r2, #892	; 0x37c
   18298:	movt	r0, #1
   1829c:	movt	r1, #1
   182a0:	movt	r3, #1
   182a4:	bl	129c4 <__assert_fail@plt>
   182a8:	str	r2, [r0, #20]
   182ac:	ldr	r5, [r4, #20]
   182b0:	ldr	r0, [r4, #24]
   182b4:	add	r1, r5, r1, lsl #3
   182b8:	cmp	r1, r0
   182bc:	str	r1, [r4, #20]
   182c0:	bcs	182d4 <flatcc_builder_extend_union_vector@@Base+0x70>
   182c4:	ldr	r0, [r4, #16]
   182c8:	add	r0, r0, r5
   182cc:	sub	sp, fp, #8
   182d0:	pop	{r4, r5, fp, pc}
   182d4:	ldr	r2, [r4, #28]
   182d8:	ldr	r0, [r4, #40]	; 0x28
   182dc:	ldr	ip, [r4, #48]	; 0x30
   182e0:	mov	r3, #1
   182e4:	str	r3, [sp]
   182e8:	mov	r3, #1
   182ec:	add	r1, r1, r2
   182f0:	add	r2, r1, #1
   182f4:	add	r1, r4, #60	; 0x3c
   182f8:	blx	ip
   182fc:	mov	r1, r0
   18300:	mov	r0, #0
   18304:	cmp	r1, #0
   18308:	beq	18314 <flatcc_builder_extend_union_vector@@Base+0xb0>
   1830c:	sub	sp, fp, #8
   18310:	pop	{r4, r5, fp, pc}
   18314:	ldr	r1, [r4, #28]
   18318:	ldr	r0, [r4, #60]	; 0x3c
   1831c:	ldr	r3, [r4, #64]	; 0x40
   18320:	ldr	r2, [r4, #32]
   18324:	add	r0, r0, r1
   18328:	sub	r1, r3, r1
   1832c:	mvn	r3, #3
   18330:	cmn	r1, #4
   18334:	str	r0, [r4, #16]
   18338:	movcs	r1, r3
   1833c:	str	r1, [r4, #24]
   18340:	str	r3, [r2, #4]
   18344:	add	r0, r0, r5
   18348:	sub	sp, fp, #8
   1834c:	pop	{r4, r5, fp, pc}

00018350 <flatcc_builder_truncate_union_vector@@Base>:
   18350:	push	{fp, lr}
   18354:	mov	fp, sp
   18358:	ldr	r2, [r0, #32]
   1835c:	ldrh	r3, [r2, #14]
   18360:	cmp	r3, #7
   18364:	bne	183ac <flatcc_builder_truncate_union_vector@@Base+0x5c>
   18368:	ldr	r3, [r2, #20]
   1836c:	cmp	r3, r1
   18370:	bcc	183cc <flatcc_builder_truncate_union_vector@@Base+0x7c>
   18374:	sub	r3, r3, r1
   18378:	str	r3, [r2, #20]
   1837c:	ldr	r2, [r0, #32]
   18380:	ldr	r3, [r0, #20]
   18384:	ldr	ip, [r0, #16]
   18388:	ldr	r2, [r2, #16]
   1838c:	mls	r3, r2, r1, r3
   18390:	mul	r2, r2, r1
   18394:	mov	r1, #0
   18398:	str	r3, [r0, #20]
   1839c:	add	r0, ip, r3
   183a0:	bl	12994 <memset@plt>
   183a4:	mov	r0, #0
   183a8:	pop	{fp, pc}
   183ac:	movw	r0, #61933	; 0xf1ed
   183b0:	movw	r1, #58827	; 0xe5cb
   183b4:	movw	r3, #62066	; 0xf272
   183b8:	movw	r2, #1665	; 0x681
   183bc:	movt	r0, #1
   183c0:	movt	r1, #1
   183c4:	movt	r3, #1
   183c8:	bl	129c4 <__assert_fail@plt>
   183cc:	movw	r0, #60497	; 0xec51
   183d0:	movw	r1, #58827	; 0xe5cb
   183d4:	movw	r3, #62066	; 0xf272
   183d8:	movw	r2, #1666	; 0x682
   183dc:	movt	r0, #1
   183e0:	movt	r1, #1
   183e4:	movt	r3, #1
   183e8:	bl	129c4 <__assert_fail@plt>

000183ec <flatcc_builder_union_vector_push@@Base>:
   183ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   183f0:	add	fp, sp, #24
   183f4:	sub	sp, sp, #8
   183f8:	mov	r7, r0
   183fc:	ldr	r0, [r0, #32]
   18400:	mov	r9, r1
   18404:	ldrh	r1, [r0, #14]
   18408:	cmp	r1, #7
   1840c:	bne	184d4 <flatcc_builder_union_vector_push@@Base+0xe8>
   18410:	ldr	r1, [r0, #20]
   18414:	mov	r6, #0
   18418:	cmn	r1, #-536870911	; 0xe0000001
   1841c:	beq	1847c <flatcc_builder_union_vector_push@@Base+0x90>
   18420:	add	r1, r1, #1
   18424:	mov	r8, r2
   18428:	str	r1, [r0, #20]
   1842c:	ldr	r4, [r7, #20]
   18430:	ldr	r0, [r7, #24]
   18434:	add	r1, r4, #8
   18438:	cmp	r1, r0
   1843c:	str	r1, [r7, #20]
   18440:	bcs	1844c <flatcc_builder_union_vector_push@@Base+0x60>
   18444:	ldr	r0, [r7, #16]
   18448:	b	184b8 <flatcc_builder_union_vector_push@@Base+0xcc>
   1844c:	ldr	r1, [r7, #28]
   18450:	ldr	r0, [r7, #40]	; 0x28
   18454:	ldr	r5, [r7, #48]	; 0x30
   18458:	mov	r2, #1
   1845c:	mov	r3, #1
   18460:	str	r2, [sp]
   18464:	add	r1, r4, r1
   18468:	add	r2, r1, #9
   1846c:	add	r1, r7, #60	; 0x3c
   18470:	blx	r5
   18474:	cmp	r0, #0
   18478:	beq	18488 <flatcc_builder_union_vector_push@@Base+0x9c>
   1847c:	mov	r0, r6
   18480:	sub	sp, fp, #24
   18484:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18488:	ldr	r1, [r7, #28]
   1848c:	ldr	r0, [r7, #60]	; 0x3c
   18490:	ldr	r3, [r7, #64]	; 0x40
   18494:	ldr	r2, [r7, #32]
   18498:	add	r0, r0, r1
   1849c:	sub	r1, r3, r1
   184a0:	mvn	r3, #3
   184a4:	cmn	r1, #4
   184a8:	str	r0, [r7, #16]
   184ac:	movcs	r1, r3
   184b0:	str	r1, [r7, #24]
   184b4:	str	r3, [r2, #4]
   184b8:	adds	r0, r0, r4
   184bc:	movne	r6, r0
   184c0:	strne	r9, [r0]
   184c4:	strne	r8, [r0, #4]
   184c8:	mov	r0, r6
   184cc:	sub	sp, fp, #24
   184d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   184d4:	movw	r0, #61933	; 0xf1ed
   184d8:	movw	r1, #58827	; 0xe5cb
   184dc:	movw	r3, #62135	; 0xf2b7
   184e0:	movw	r2, #1677	; 0x68d
   184e4:	movt	r0, #1
   184e8:	movt	r1, #1
   184ec:	movt	r3, #1
   184f0:	bl	129c4 <__assert_fail@plt>

000184f4 <flatcc_builder_append_union_vector@@Base>:
   184f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   184f8:	add	fp, sp, #24
   184fc:	sub	sp, sp, #8
   18500:	mov	r6, r0
   18504:	ldr	r0, [r0, #32]
   18508:	mov	r8, r1
   1850c:	ldrh	r1, [r0, #14]
   18510:	cmp	r1, #7
   18514:	bne	18618 <flatcc_builder_append_union_vector@@Base+0x124>
   18518:	ldr	r1, [r0, #20]
   1851c:	mov	r5, r2
   18520:	adds	r1, r1, r2
   18524:	cmpcc	r1, #536870912	; 0x20000000
   18528:	bcc	1854c <flatcc_builder_append_union_vector@@Base+0x58>
   1852c:	movw	r0, #63098	; 0xf67a
   18530:	movw	r1, #58827	; 0xe5cb
   18534:	movw	r3, #63125	; 0xf695
   18538:	mov	r2, #892	; 0x37c
   1853c:	movt	r0, #1
   18540:	movt	r1, #1
   18544:	movt	r3, #1
   18548:	bl	129c4 <__assert_fail@plt>
   1854c:	str	r1, [r0, #20]
   18550:	ldr	r4, [r6, #20]
   18554:	ldr	r0, [r6, #24]
   18558:	add	r1, r4, r5, lsl #3
   1855c:	cmp	r1, r0
   18560:	str	r1, [r6, #20]
   18564:	bcs	18590 <flatcc_builder_append_union_vector@@Base+0x9c>
   18568:	ldr	r0, [r6, #16]
   1856c:	adds	r7, r0, r4
   18570:	beq	18608 <flatcc_builder_append_union_vector@@Base+0x114>
   18574:	lsl	r2, r5, #3
   18578:	mov	r0, r7
   1857c:	mov	r1, r8
   18580:	bl	12904 <memcpy@plt>
   18584:	mov	r0, r7
   18588:	sub	sp, fp, #24
   1858c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18590:	ldr	r2, [r6, #28]
   18594:	ldr	r0, [r6, #40]	; 0x28
   18598:	ldr	r7, [r6, #48]	; 0x30
   1859c:	mov	r3, #1
   185a0:	str	r3, [sp]
   185a4:	mov	r3, #1
   185a8:	add	r1, r1, r2
   185ac:	add	r2, r1, #1
   185b0:	add	r1, r6, #60	; 0x3c
   185b4:	blx	r7
   185b8:	mov	r7, #0
   185bc:	cmp	r0, #0
   185c0:	beq	185d0 <flatcc_builder_append_union_vector@@Base+0xdc>
   185c4:	mov	r0, r7
   185c8:	sub	sp, fp, #24
   185cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   185d0:	ldr	r1, [r6, #28]
   185d4:	ldr	r0, [r6, #60]	; 0x3c
   185d8:	ldr	r3, [r6, #64]	; 0x40
   185dc:	ldr	r2, [r6, #32]
   185e0:	add	r0, r0, r1
   185e4:	sub	r1, r3, r1
   185e8:	mvn	r3, #3
   185ec:	cmn	r1, #4
   185f0:	str	r0, [r6, #16]
   185f4:	movcs	r1, r3
   185f8:	str	r1, [r6, #24]
   185fc:	str	r3, [r2, #4]
   18600:	adds	r7, r0, r4
   18604:	bne	18574 <flatcc_builder_append_union_vector@@Base+0x80>
   18608:	mov	r7, #0
   1860c:	mov	r0, r7
   18610:	sub	sp, fp, #24
   18614:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18618:	movw	r0, #61933	; 0xf1ed
   1861c:	movw	r1, #58827	; 0xe5cb
   18620:	movw	r3, #62244	; 0xf324
   18624:	movw	r2, #1692	; 0x69c
   18628:	movt	r0, #1
   1862c:	movt	r1, #1
   18630:	movt	r3, #1
   18634:	bl	129c4 <__assert_fail@plt>

00018638 <flatcc_builder_create_string@@Base>:
   18638:	push	{r4, r5, r6, sl, fp, lr}
   1863c:	add	fp, sp, #16
   18640:	sub	sp, sp, #80	; 0x50
   18644:	str	r2, [fp, #-20]	; 0xffffffec
   18648:	mvn	r5, r2
   1864c:	mov	r6, r0
   18650:	mov	r3, #1
   18654:	cmp	r2, #0
   18658:	ldr	ip, [r0, #136]	; 0x88
   1865c:	sub	r0, fp, #20
   18660:	str	r0, [sp, #12]
   18664:	mov	r0, #4
   18668:	str	r0, [sp, #4]
   1866c:	str	r0, [sp, #16]
   18670:	str	r3, [sp, #8]
   18674:	add	r5, ip, r5
   18678:	and	r5, r5, #3
   1867c:	add	r5, r5, #1
   18680:	beq	1869c <flatcc_builder_create_string@@Base+0x64>
   18684:	mov	r3, #2
   18688:	add	r0, r2, #4
   1868c:	str	r1, [sp, #20]
   18690:	str	r2, [sp, #24]
   18694:	str	r3, [sp, #8]
   18698:	str	r0, [sp, #4]
   1869c:	movw	r2, #58297	; 0xe3b9
   186a0:	add	lr, sp, #4
   186a4:	add	r1, r0, r5
   186a8:	add	r0, lr, r3, lsl #3
   186ac:	movt	r2, #1
   186b0:	str	r1, [sp, #4]
   186b4:	cmp	r1, #0
   186b8:	str	r2, [r0, #8]
   186bc:	add	r2, r3, #1
   186c0:	str	r5, [r0, #12]
   186c4:	str	r2, [sp, #8]
   186c8:	ble	1871c <flatcc_builder_create_string@@Base+0xe4>
   186cc:	ldr	r0, [r6, #36]	; 0x24
   186d0:	ldr	r4, [r6, #44]	; 0x2c
   186d4:	sub	r5, ip, r1
   186d8:	str	r1, [sp]
   186dc:	add	r1, lr, #8
   186e0:	mov	r3, r5
   186e4:	blx	r4
   186e8:	cmp	r0, #0
   186ec:	streq	r5, [r6, #136]	; 0x88
   186f0:	moveq	r0, r5
   186f4:	subeq	sp, fp, #16
   186f8:	popeq	{r4, r5, r6, sl, fp, pc}
   186fc:	movw	r0, #63345	; 0xf771
   18700:	movw	r1, #58827	; 0xe5cb
   18704:	movw	r3, #63024	; 0xf630
   18708:	movw	r2, #651	; 0x28b
   1870c:	movt	r0, #1
   18710:	movt	r1, #1
   18714:	movt	r3, #1
   18718:	bl	129c4 <__assert_fail@plt>
   1871c:	movw	r0, #63345	; 0xf771
   18720:	movw	r1, #58827	; 0xe5cb
   18724:	movw	r3, #63024	; 0xf630
   18728:	movw	r2, #647	; 0x287
   1872c:	movt	r0, #1
   18730:	movt	r1, #1
   18734:	movt	r3, #1
   18738:	bl	129c4 <__assert_fail@plt>

0001873c <flatcc_builder_create_string_str@@Base>:
   1873c:	push	{r4, r5, fp, lr}
   18740:	add	fp, sp, #8
   18744:	mov	r5, r0
   18748:	mov	r0, r1
   1874c:	mov	r4, r1
   18750:	bl	12970 <strlen@plt>
   18754:	mov	r2, r0
   18758:	mov	r0, r5
   1875c:	mov	r1, r4
   18760:	pop	{r4, r5, fp, lr}
   18764:	b	18638 <flatcc_builder_create_string@@Base>

00018768 <flatcc_builder_create_string_strn@@Base>:
   18768:	push	{r4, r5, r6, sl, fp, lr}
   1876c:	add	fp, sp, #16
   18770:	mov	r6, r0
   18774:	mov	r5, r1
   18778:	mov	r0, r1
   1877c:	mov	r1, #0
   18780:	mov	r4, r2
   18784:	bl	129ac <memchr@plt>
   18788:	cmp	r0, #0
   1878c:	mov	r1, r5
   18790:	subne	r4, r0, r5
   18794:	mov	r0, r6
   18798:	mov	r2, r4
   1879c:	pop	{r4, r5, r6, sl, fp, lr}
   187a0:	b	18638 <flatcc_builder_create_string@@Base>

000187a4 <flatcc_builder_end_string@@Base>:
   187a4:	push	{r4, r5, fp, lr}
   187a8:	add	fp, sp, #8
   187ac:	mov	r4, r0
   187b0:	ldr	r0, [r0, #32]
   187b4:	ldrh	r1, [r0, #14]
   187b8:	cmp	r1, #6
   187bc:	bne	18864 <flatcc_builder_end_string@@Base+0xc0>
   187c0:	ldr	r2, [r0, #20]
   187c4:	ldr	r0, [r4, #20]
   187c8:	cmp	r2, r0
   187cc:	bne	18884 <flatcc_builder_end_string@@Base+0xe0>
   187d0:	ldr	r1, [r4, #16]
   187d4:	mov	r0, r4
   187d8:	bl	18638 <flatcc_builder_create_string@@Base>
   187dc:	mov	r5, r0
   187e0:	cmp	r0, #0
   187e4:	beq	1885c <flatcc_builder_end_string@@Base+0xb8>
   187e8:	ldr	r0, [r4, #16]
   187ec:	ldr	r2, [r4, #20]
   187f0:	mov	r1, #0
   187f4:	bl	12994 <memset@plt>
   187f8:	ldr	r0, [r4, #32]
   187fc:	ldr	r1, [r4, #60]	; 0x3c
   18800:	ldr	ip, [r4, #64]	; 0x40
   18804:	ldr	r3, [r0, #8]
   18808:	str	r3, [r4, #20]
   1880c:	ldr	r3, [r0]
   18810:	str	r3, [r4, #28]
   18814:	add	r1, r1, r3
   18818:	ldr	r2, [r0, #4]
   1881c:	str	r1, [r4, #16]
   18820:	sub	r1, ip, r3
   18824:	cmp	r1, r2
   18828:	movhi	r1, r2
   1882c:	str	r1, [r4, #24]
   18830:	ldrh	r1, [r4, #130]	; 0x82
   18834:	ldrh	r2, [r4, #128]	; 0x80
   18838:	cmp	r2, r1
   1883c:	strhcc	r1, [r4, #128]	; 0x80
   18840:	ldrh	r1, [r0, #12]
   18844:	sub	r0, r0, #36	; 0x24
   18848:	str	r0, [r4, #32]
   1884c:	strh	r1, [r4, #130]	; 0x82
   18850:	ldr	r0, [r4, #156]	; 0x9c
   18854:	sub	r0, r0, #1
   18858:	str	r0, [r4, #156]	; 0x9c
   1885c:	mov	r0, r5
   18860:	pop	{r4, r5, fp, pc}
   18864:	movw	r0, #60144	; 0xeaf0
   18868:	movw	r1, #58827	; 0xe5cb
   1886c:	movw	r3, #62371	; 0xf3a3
   18870:	movw	r2, #1732	; 0x6c4
   18874:	movt	r0, #1
   18878:	movt	r1, #1
   1887c:	movt	r3, #1
   18880:	bl	129c4 <__assert_fail@plt>
   18884:	movw	r0, #62438	; 0xf3e6
   18888:	movw	r1, #58827	; 0xe5cb
   1888c:	movw	r3, #62371	; 0xf3a3
   18890:	movw	r2, #1733	; 0x6c5
   18894:	movt	r0, #1
   18898:	movt	r1, #1
   1889c:	movt	r3, #1
   188a0:	bl	129c4 <__assert_fail@plt>

000188a4 <flatcc_builder_string_edit@@Base>:
   188a4:	ldr	r0, [r0, #16]
   188a8:	bx	lr

000188ac <flatcc_builder_string_len@@Base>:
   188ac:	ldr	r0, [r0, #32]
   188b0:	ldr	r0, [r0, #20]
   188b4:	bx	lr

000188b8 <flatcc_builder_table_edit@@Base>:
   188b8:	ldr	r2, [r0, #32]
   188bc:	ldrh	r2, [r2, #14]
   188c0:	cmp	r2, #3
   188c4:	ldreq	r2, [r0, #16]
   188c8:	ldreq	r0, [r0, #20]
   188cc:	addeq	r0, r2, r0
   188d0:	subeq	r0, r0, r1
   188d4:	bxeq	lr
   188d8:	push	{fp, lr}
   188dc:	mov	fp, sp
   188e0:	movw	r0, #60896	; 0xede0
   188e4:	movw	r1, #58827	; 0xe5cb
   188e8:	movw	r3, #62616	; 0xf498
   188ec:	movw	r2, #1794	; 0x702
   188f0:	movt	r0, #1
   188f4:	movt	r1, #1
   188f8:	movt	r3, #1
   188fc:	bl	129c4 <__assert_fail@plt>

00018900 <flatcc_builder_table_add_copy@@Base>:
   18900:	push	{r4, r5, r6, sl, fp, lr}
   18904:	add	fp, sp, #16
   18908:	mov	r4, r3
   1890c:	ldr	r3, [fp, #8]
   18910:	mov	r5, r2
   18914:	mov	r2, r4
   18918:	bl	179fc <flatcc_builder_table_add@@Base>
   1891c:	mov	r6, r0
   18920:	cmp	r0, #0
   18924:	beq	18938 <flatcc_builder_table_add_copy@@Base+0x38>
   18928:	mov	r0, r6
   1892c:	mov	r1, r5
   18930:	mov	r2, r4
   18934:	bl	12904 <memcpy@plt>
   18938:	mov	r0, r6
   1893c:	pop	{r4, r5, r6, sl, fp, pc}

00018940 <flatcc_builder_push_buffer_alignment@@Base>:
   18940:	ldrh	r1, [r0, #128]	; 0x80
   18944:	mov	r2, #4
   18948:	strh	r2, [r0, #128]	; 0x80
   1894c:	mov	r0, r1
   18950:	bx	lr

00018954 <flatcc_builder_pop_buffer_alignment@@Base>:
   18954:	ldrh	r2, [r0, #128]	; 0x80
   18958:	cmp	r2, r1
   1895c:	strhcc	r1, [r0, #128]	; 0x80
   18960:	bx	lr

00018964 <flatcc_builder_get_buffer_alignment@@Base>:
   18964:	ldrh	r0, [r0, #128]	; 0x80
   18968:	bx	lr

0001896c <flatcc_builder_set_vtable_clustering@@Base>:
   1896c:	clz	r1, r1
   18970:	lsr	r1, r1, #5
   18974:	str	r1, [r0, #180]	; 0xb4
   18978:	bx	lr

0001897c <flatcc_builder_set_block_align@@Base>:
   1897c:	strh	r1, [r0, #132]	; 0x84
   18980:	bx	lr

00018984 <flatcc_builder_get_level@@Base>:
   18984:	ldr	r0, [r0, #156]	; 0x9c
   18988:	bx	lr

0001898c <flatcc_builder_set_max_level@@Base>:
   1898c:	str	r1, [r0, #176]	; 0xb0
   18990:	ldr	r2, [r0, #160]	; 0xa0
   18994:	cmp	r2, r1
   18998:	strlt	r1, [r0, #160]	; 0xa0
   1899c:	bx	lr

000189a0 <flatcc_builder_get_buffer_size@@Base>:
   189a0:	ldr	r1, [r0, #136]	; 0x88
   189a4:	ldr	r0, [r0, #140]	; 0x8c
   189a8:	sub	r0, r0, r1
   189ac:	bx	lr

000189b0 <flatcc_builder_get_buffer_start@@Base>:
   189b0:	ldr	r0, [r0, #136]	; 0x88
   189b4:	bx	lr

000189b8 <flatcc_builder_get_buffer_end@@Base>:
   189b8:	ldr	r0, [r0, #140]	; 0x8c
   189bc:	bx	lr

000189c0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   189c0:	str	r1, [r0, #172]	; 0xac
   189c4:	bx	lr

000189c8 <flatcc_builder_set_identifier@@Base>:
   189c8:	movw	r2, #58297	; 0xe3b9
   189cc:	cmp	r1, #0
   189d0:	movt	r2, #1
   189d4:	movne	r2, r1
   189d8:	ldr	r1, [r2]
   189dc:	str	r1, [r0, #168]	; 0xa8
   189e0:	bx	lr

000189e4 <flatcc_builder_get_type@@Base>:
   189e4:	ldr	r0, [r0, #32]
   189e8:	cmp	r0, #0
   189ec:	ldrhne	r0, [r0, #14]
   189f0:	moveq	r0, #0
   189f4:	bx	lr

000189f8 <flatcc_builder_get_type_at@@Base>:
   189f8:	mov	r2, r0
   189fc:	cmp	r1, #1
   18a00:	mov	r0, #0
   18a04:	ldrge	r3, [r2, #156]	; 0x9c
   18a08:	cmpge	r3, r1
   18a0c:	bge	18a14 <flatcc_builder_get_type_at@@Base+0x1c>
   18a10:	bx	lr
   18a14:	sub	r0, r1, r3
   18a18:	ldr	r1, [r2, #32]
   18a1c:	add	r0, r0, r0, lsl #3
   18a20:	add	r0, r1, r0, lsl #2
   18a24:	ldrh	r0, [r0, #14]
   18a28:	bx	lr

00018a2c <flatcc_builder_get_direct_buffer@@Base>:
   18a2c:	ldr	r2, [r0, #184]	; 0xb8
   18a30:	cmp	r2, #0
   18a34:	beq	18a60 <flatcc_builder_get_direct_buffer@@Base+0x34>
   18a38:	ldr	r2, [r0, #188]	; 0xbc
   18a3c:	ldr	r3, [r0, #192]	; 0xc0
   18a40:	cmp	r2, r3
   18a44:	beq	18a78 <flatcc_builder_get_direct_buffer@@Base+0x4c>
   18a48:	cmp	r1, #0
   18a4c:	moveq	r0, #0
   18a50:	bxeq	lr
   18a54:	mov	r0, #0
   18a58:	str	r0, [r1]
   18a5c:	bx	lr
   18a60:	cmp	r1, #0
   18a64:	moveq	r0, #0
   18a68:	bxeq	lr
   18a6c:	mov	r0, #0
   18a70:	str	r0, [r1]
   18a74:	bx	lr
   18a78:	cmp	r1, #0
   18a7c:	ldrne	r2, [r0, #212]	; 0xd4
   18a80:	strne	r2, [r1]
   18a84:	ldr	r0, [r0, #196]	; 0xc4
   18a88:	bx	lr

00018a8c <flatcc_builder_copy_buffer@@Base>:
   18a8c:	push	{fp, lr}
   18a90:	mov	fp, sp
   18a94:	ldr	r3, [r0, #184]	; 0xb8
   18a98:	cmp	r3, #0
   18a9c:	beq	18ad0 <flatcc_builder_copy_buffer@@Base+0x44>
   18aa0:	add	r0, r0, #188	; 0xbc
   18aa4:	bl	191e4 <flatcc_emitter_copy_buffer@@Base>
   18aa8:	cmp	r0, #0
   18aac:	popne	{fp, pc}
   18ab0:	movw	r0, #59423	; 0xe81f
   18ab4:	movw	r1, #58827	; 0xe5cb
   18ab8:	movw	r3, #62755	; 0xf523
   18abc:	movw	r2, #1926	; 0x786
   18ac0:	movt	r0, #1
   18ac4:	movt	r1, #1
   18ac8:	movt	r3, #1
   18acc:	bl	129c4 <__assert_fail@plt>
   18ad0:	mov	r0, #0
   18ad4:	pop	{fp, pc}

00018ad8 <flatcc_builder_finalize_buffer@@Base>:
   18ad8:	push	{r4, r5, r6, sl, fp, lr}
   18adc:	add	fp, sp, #16
   18ae0:	mov	r5, r0
   18ae4:	ldr	r0, [r0, #136]	; 0x88
   18ae8:	cmp	r1, #0
   18aec:	ldr	r2, [r5, #140]	; 0x8c
   18af0:	sub	r4, r2, r0
   18af4:	mov	r0, r4
   18af8:	strne	r4, [r1]
   18afc:	bl	1294c <malloc@plt>
   18b00:	cmp	r0, #0
   18b04:	beq	18b54 <flatcc_builder_finalize_buffer@@Base+0x7c>
   18b08:	mov	r6, r0
   18b0c:	ldr	r0, [r5, #184]	; 0xb8
   18b10:	cmp	r0, #0
   18b14:	beq	18b74 <flatcc_builder_finalize_buffer@@Base+0x9c>
   18b18:	add	r0, r5, #188	; 0xbc
   18b1c:	mov	r1, r6
   18b20:	mov	r2, r4
   18b24:	bl	191e4 <flatcc_emitter_copy_buffer@@Base>
   18b28:	cmp	r0, #0
   18b2c:	movne	r0, r6
   18b30:	popne	{r4, r5, r6, sl, fp, pc}
   18b34:	movw	r0, #59423	; 0xe81f
   18b38:	movw	r1, #58827	; 0xe5cb
   18b3c:	movw	r3, #62755	; 0xf523
   18b40:	movw	r2, #1926	; 0x786
   18b44:	movt	r0, #1
   18b48:	movt	r1, #1
   18b4c:	movt	r3, #1
   18b50:	bl	129c4 <__assert_fail@plt>
   18b54:	movw	r0, #63345	; 0xf771
   18b58:	movw	r1, #58827	; 0xe5cb
   18b5c:	movw	r3, #62824	; 0xf568
   18b60:	movw	r2, #1944	; 0x798
   18b64:	movt	r0, #1
   18b68:	movt	r1, #1
   18b6c:	movt	r3, #1
   18b70:	bl	129c4 <__assert_fail@plt>
   18b74:	movw	r0, #63345	; 0xf771
   18b78:	movw	r1, #58827	; 0xe5cb
   18b7c:	movw	r3, #62824	; 0xf568
   18b80:	movw	r2, #1948	; 0x79c
   18b84:	movt	r0, #1
   18b88:	movt	r1, #1
   18b8c:	movt	r3, #1
   18b90:	bl	129c4 <__assert_fail@plt>

00018b94 <flatcc_builder_finalize_aligned_buffer@@Base>:
   18b94:	push	{r4, r5, r6, r7, fp, lr}
   18b98:	add	fp, sp, #16
   18b9c:	sub	sp, sp, #8
   18ba0:	mov	r5, r0
   18ba4:	mov	r4, r1
   18ba8:	ldr	r0, [r0, #136]	; 0x88
   18bac:	ldr	r1, [r5, #140]	; 0x8c
   18bb0:	cmp	r4, #0
   18bb4:	sub	r0, r1, r0
   18bb8:	mov	r1, #0
   18bbc:	strne	r0, [r4]
   18bc0:	ldrh	r2, [r5, #128]	; 0x80
   18bc4:	str	r1, [sp, #4]
   18bc8:	add	r0, r0, r2
   18bcc:	cmp	r2, #4
   18bd0:	mov	r1, r2
   18bd4:	rsb	r2, r2, #0
   18bd8:	sub	r0, r0, #1
   18bdc:	movls	r1, #4
   18be0:	and	r7, r0, r2
   18be4:	add	r0, sp, #4
   18be8:	mov	r2, r7
   18bec:	bl	12988 <posix_memalign@plt>
   18bf0:	ldr	r6, [sp, #4]
   18bf4:	cmp	r0, #0
   18bf8:	cmpne	r6, #0
   18bfc:	bne	18c38 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   18c00:	cmp	r6, #0
   18c04:	beq	18c40 <flatcc_builder_finalize_aligned_buffer@@Base+0xac>
   18c08:	ldr	r0, [r5, #184]	; 0xb8
   18c0c:	cmp	r0, #0
   18c10:	beq	18c38 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   18c14:	add	r0, r5, #188	; 0xbc
   18c18:	mov	r1, r6
   18c1c:	mov	r2, r7
   18c20:	bl	191e4 <flatcc_emitter_copy_buffer@@Base>
   18c24:	cmp	r0, #0
   18c28:	beq	18c58 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   18c2c:	mov	r0, r6
   18c30:	sub	sp, fp, #16
   18c34:	pop	{r4, r5, r6, r7, fp, pc}
   18c38:	mov	r0, r6
   18c3c:	bl	128f8 <free@plt>
   18c40:	mov	r6, #0
   18c44:	cmp	r4, #0
   18c48:	strne	r6, [r4]
   18c4c:	mov	r0, r6
   18c50:	sub	sp, fp, #16
   18c54:	pop	{r4, r5, r6, r7, fp, pc}
   18c58:	movw	r0, #59423	; 0xe81f
   18c5c:	movw	r1, #58827	; 0xe5cb
   18c60:	movw	r3, #62755	; 0xf523
   18c64:	movw	r2, #1926	; 0x786
   18c68:	movt	r0, #1
   18c6c:	movt	r1, #1
   18c70:	movt	r3, #1
   18c74:	bl	129c4 <__assert_fail@plt>

00018c78 <flatcc_builder_aligned_alloc@@Base>:
   18c78:	push	{fp, lr}
   18c7c:	mov	fp, sp
   18c80:	sub	sp, sp, #8
   18c84:	mov	r2, r1
   18c88:	mov	r1, r0
   18c8c:	mov	r0, #0
   18c90:	cmp	r1, #4
   18c94:	str	r0, [sp, #4]
   18c98:	add	r0, sp, #4
   18c9c:	movls	r1, #4
   18ca0:	bl	12988 <posix_memalign@plt>
   18ca4:	mov	r1, r0
   18ca8:	ldr	r0, [sp, #4]
   18cac:	cmp	r1, #0
   18cb0:	cmpne	r0, #0
   18cb4:	bne	18cc0 <flatcc_builder_aligned_alloc@@Base+0x48>
   18cb8:	mov	sp, fp
   18cbc:	pop	{fp, pc}
   18cc0:	bl	128f8 <free@plt>
   18cc4:	mov	r0, #0
   18cc8:	str	r0, [sp, #4]
   18ccc:	mov	sp, fp
   18cd0:	pop	{fp, pc}

00018cd4 <flatcc_builder_aligned_free@@Base>:
   18cd4:	b	128f8 <free@plt>

00018cd8 <flatcc_builder_get_emit_context@@Base>:
   18cd8:	ldr	r0, [r0, #36]	; 0x24
   18cdc:	bx	lr

00018ce0 <flatcc_emitter_recycle_page@@Base>:
   18ce0:	ldr	r3, [r0]
   18ce4:	mov	r2, r0
   18ce8:	mvn	r0, #0
   18cec:	cmp	r3, r1
   18cf0:	ldrne	r2, [r2, #4]
   18cf4:	cmpne	r2, r1
   18cf8:	bne	18d00 <flatcc_emitter_recycle_page@@Base+0x20>
   18cfc:	bx	lr
   18d00:	ldr	r0, [r1, #2944]	; 0xb80
   18d04:	ldr	r2, [r1, #2948]	; 0xb84
   18d08:	str	r2, [r0, #2948]	; 0xb84
   18d0c:	ldr	r2, [r1, #2948]	; 0xb84
   18d10:	str	r0, [r2, #2944]	; 0xb80
   18d14:	ldr	r0, [r3, #2948]	; 0xb84
   18d18:	str	r3, [r1, #2944]	; 0xb80
   18d1c:	str	r0, [r1, #2948]	; 0xb84
   18d20:	str	r1, [r0, #2944]	; 0xb80
   18d24:	ldr	r0, [r1, #2944]	; 0xb80
   18d28:	str	r1, [r0, #2948]	; 0xb84
   18d2c:	mov	r0, #0
   18d30:	bx	lr

00018d34 <flatcc_emitter_reset@@Base>:
   18d34:	push	{r4, sl, fp, lr}
   18d38:	add	fp, sp, #8
   18d3c:	ldr	r1, [r0]
   18d40:	cmp	r1, #0
   18d44:	beq	18dfc <flatcc_emitter_reset@@Base+0xc8>
   18d48:	mov	r4, r0
   18d4c:	add	r2, r1, #1472	; 0x5c0
   18d50:	mov	r0, #1472	; 0x5c0
   18d54:	mov	r3, #0
   18d58:	stmib	r4, {r1, r2}
   18d5c:	str	r0, [r4, #12]
   18d60:	str	r2, [r4, #16]
   18d64:	str	r0, [r4, #20]
   18d68:	movw	r0, #64064	; 0xfa40
   18d6c:	movt	r0, #65535	; 0xffff
   18d70:	str	r0, [r1, #2952]	; 0xb88
   18d74:	ldr	r2, [r4, #32]
   18d78:	ldr	r0, [r4, #24]
   18d7c:	cmp	r2, #0
   18d80:	moveq	r2, r0
   18d84:	streq	r0, [r4, #32]
   18d88:	str	r3, [r4, #24]
   18d8c:	add	r2, r2, r2, lsl #1
   18d90:	lsr	r2, r2, #2
   18d94:	add	r0, r2, r0, lsr #2
   18d98:	str	r0, [r4, #32]
   18d9c:	ldr	r2, [r4, #28]
   18da0:	cmp	r2, r0, lsl #1
   18da4:	bls	18dfc <flatcc_emitter_reset@@Base+0xc8>
   18da8:	mov	r2, r1
   18dac:	ldr	r0, [r2, #2944]!	; 0xb80
   18db0:	cmp	r0, r1
   18db4:	beq	18dfc <flatcc_emitter_reset@@Base+0xc8>
   18db8:	ldr	r3, [r0, #2944]	; 0xb80
   18dbc:	str	r3, [r2]
   18dc0:	ldr	r2, [r0, #2944]	; 0xb80
   18dc4:	str	r1, [r2, #2948]	; 0xb84
   18dc8:	bl	128f8 <free@plt>
   18dcc:	ldr	r0, [r4, #28]
   18dd0:	ldr	r1, [r4, #32]
   18dd4:	sub	r0, r0, #2944	; 0xb80
   18dd8:	cmp	r0, r1, lsl #1
   18ddc:	str	r0, [r4, #28]
   18de0:	popls	{r4, sl, fp, pc}
   18de4:	ldr	r1, [r4, #4]
   18de8:	ldr	r3, [r4]
   18dec:	mov	r2, r1
   18df0:	ldr	r0, [r2, #2944]!	; 0xb80
   18df4:	cmp	r0, r3
   18df8:	bne	18db8 <flatcc_emitter_reset@@Base+0x84>
   18dfc:	pop	{r4, sl, fp, pc}

00018e00 <flatcc_emitter_clear@@Base>:
   18e00:	push	{r4, r5, r6, sl, fp, lr}
   18e04:	add	fp, sp, #16
   18e08:	ldr	r5, [r0]
   18e0c:	cmp	r5, #0
   18e10:	popeq	{r4, r5, r6, sl, fp, pc}
   18e14:	mov	r4, r0
   18e18:	ldr	r0, [r5, #2948]	; 0xb84
   18e1c:	mov	r6, #0
   18e20:	str	r6, [r0, #2944]	; 0xb80
   18e24:	ldr	r0, [r5, #2944]	; 0xb80
   18e28:	cmp	r0, #0
   18e2c:	beq	18e48 <flatcc_emitter_clear@@Base+0x48>
   18e30:	mov	r5, r0
   18e34:	ldr	r0, [r0, #2948]	; 0xb84
   18e38:	bl	128f8 <free@plt>
   18e3c:	ldr	r0, [r5, #2944]	; 0xb80
   18e40:	cmp	r0, #0
   18e44:	bne	18e30 <flatcc_emitter_clear@@Base+0x30>
   18e48:	mov	r0, r5
   18e4c:	bl	128f8 <free@plt>
   18e50:	vmov.i32	q8, #0	; 0x00000000
   18e54:	add	r0, r4, #16
   18e58:	vst1.32	{d16-d17}, [r0]
   18e5c:	mov	r0, #32
   18e60:	vst1.32	{d16-d17}, [r4], r0
   18e64:	str	r6, [r4]
   18e68:	pop	{r4, r5, r6, sl, fp, pc}

00018e6c <flatcc_emitter@@Base>:
   18e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e70:	add	fp, sp, #28
   18e74:	sub	sp, sp, #4
   18e78:	mov	r6, r0
   18e7c:	mov	r7, r1
   18e80:	ldr	r0, [r0, #24]
   18e84:	ldr	r1, [fp, #8]
   18e88:	mov	r4, r2
   18e8c:	cmn	r3, #1
   18e90:	mov	r9, r6
   18e94:	add	r0, r0, r1
   18e98:	str	r0, [r6, #24]
   18e9c:	ble	18fe8 <flatcc_emitter@@Base+0x17c>
   18ea0:	ldr	r0, [r9, #20]!
   18ea4:	cmp	r0, r1
   18ea8:	bcs	19168 <flatcc_emitter@@Base+0x2fc>
   18eac:	mov	r8, #0
   18eb0:	cmp	r4, #0
   18eb4:	beq	191c8 <flatcc_emitter@@Base+0x35c>
   18eb8:	movw	sl, #64064	; 0xfa40
   18ebc:	movt	sl, #65535	; 0xffff
   18ec0:	ldr	r8, [r7, #4]
   18ec4:	cmp	r8, #0
   18ec8:	beq	18fcc <flatcc_emitter@@Base+0x160>
   18ecc:	ldr	r9, [r7]
   18ed0:	cmp	r8, r0
   18ed4:	mov	r5, r8
   18ed8:	bls	18f98 <flatcc_emitter@@Base+0x12c>
   18edc:	mov	r5, r0
   18ee0:	cmp	r5, #0
   18ee4:	bne	18f98 <flatcc_emitter@@Base+0x12c>
   18ee8:	ldr	r5, [r6, #4]
   18eec:	cmp	r5, #0
   18ef0:	beq	18f04 <flatcc_emitter@@Base+0x98>
   18ef4:	ldr	r0, [r5, #2944]	; 0xb80
   18ef8:	ldr	r1, [r6]
   18efc:	cmp	r0, r1
   18f00:	bne	18f3c <flatcc_emitter@@Base+0xd0>
   18f04:	movw	r0, #2956	; 0xb8c
   18f08:	bl	1294c <malloc@plt>
   18f0c:	cmp	r0, #0
   18f10:	beq	19178 <flatcc_emitter@@Base+0x30c>
   18f14:	ldr	r1, [r6, #28]
   18f18:	cmp	r5, #0
   18f1c:	add	r1, r1, #2944	; 0xb80
   18f20:	str	r1, [r6, #28]
   18f24:	beq	18f68 <flatcc_emitter@@Base+0xfc>
   18f28:	ldr	r1, [r6]
   18f2c:	str	r1, [r0, #2944]	; 0xb80
   18f30:	str	r5, [r0, #2948]	; 0xb84
   18f34:	str	r0, [r1, #2948]	; 0xb84
   18f38:	str	r0, [r5, #2944]	; 0xb80
   18f3c:	mov	r5, #2944	; 0xb80
   18f40:	str	r0, [r6, #4]
   18f44:	str	r0, [r6, #16]
   18f48:	str	r5, [r6, #20]
   18f4c:	ldr	r1, [r0, #2948]	; 0xb84
   18f50:	ldr	r1, [r1, #2952]	; 0xb88
   18f54:	add	r1, r1, #2944	; 0xb80
   18f58:	str	r1, [r0, #2952]	; 0xb88
   18f5c:	cmp	r8, r5
   18f60:	bhi	18ee0 <flatcc_emitter@@Base+0x74>
   18f64:	b	18f94 <flatcc_emitter@@Base+0x128>
   18f68:	add	r1, r0, #1472	; 0x5c0
   18f6c:	mov	r5, #1472	; 0x5c0
   18f70:	str	r0, [r6]
   18f74:	stmib	r6, {r0, r1, r5}
   18f78:	str	r1, [r6, #16]
   18f7c:	str	r5, [r6, #20]
   18f80:	str	r0, [r0, #2944]	; 0xb80
   18f84:	str	r0, [r0, #2948]	; 0xb84
   18f88:	str	sl, [r0, #2952]	; 0xb88
   18f8c:	cmp	r8, r5
   18f90:	bhi	18ee0 <flatcc_emitter@@Base+0x74>
   18f94:	mov	r5, r8
   18f98:	ldr	r0, [r6, #16]
   18f9c:	mov	r1, r9
   18fa0:	mov	r2, r5
   18fa4:	bl	12904 <memcpy@plt>
   18fa8:	ldr	r0, [r6, #16]
   18fac:	ldr	r1, [r6, #20]
   18fb0:	add	r9, r9, r5
   18fb4:	subs	r8, r8, r5
   18fb8:	add	r2, r0, r5
   18fbc:	sub	r0, r1, r5
   18fc0:	str	r2, [r6, #16]
   18fc4:	str	r0, [r6, #20]
   18fc8:	bne	18ed0 <flatcc_emitter@@Base+0x64>
   18fcc:	subs	r4, r4, #1
   18fd0:	add	r7, r7, #8
   18fd4:	bne	18ec0 <flatcc_emitter@@Base+0x54>
   18fd8:	mov	r8, #0
   18fdc:	mov	r0, r8
   18fe0:	sub	sp, fp, #28
   18fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fe8:	ldr	r0, [r9, #12]!
   18fec:	cmp	r0, r1
   18ff0:	bcs	19188 <flatcc_emitter@@Base+0x31c>
   18ff4:	mov	r8, #0
   18ff8:	cmp	r4, #0
   18ffc:	beq	191c8 <flatcc_emitter@@Base+0x35c>
   19000:	add	r0, r7, r4, lsl #3
   19004:	movw	sl, #2952	; 0xb88
   19008:	ldr	r8, [r0, #-4]
   1900c:	sub	r1, r0, #8
   19010:	str	r1, [sp]
   19014:	cmp	r8, #0
   19018:	beq	1914c <flatcc_emitter@@Base+0x2e0>
   1901c:	ldr	r0, [sp]
   19020:	ldr	r0, [r0]
   19024:	add	r7, r0, r8
   19028:	ldr	r1, [r9]
   1902c:	cmp	r8, r1
   19030:	bhi	19060 <flatcc_emitter@@Base+0x1f4>
   19034:	b	1911c <flatcc_emitter@@Base+0x2b0>
   19038:	add	r3, r0, #2944	; 0xb80
   1903c:	mov	r1, #2944	; 0xb80
   19040:	str	r3, [r6, #8]
   19044:	str	r1, [r6, #12]
   19048:	ldr	r0, [r0, #2944]	; 0xb80
   1904c:	ldr	r0, [r0, #2952]	; 0xb88
   19050:	sub	r0, r0, #2944	; 0xb80
   19054:	str	r0, [r2]
   19058:	cmp	r8, r1
   1905c:	bls	1911c <flatcc_emitter@@Base+0x2b0>
   19060:	cmp	r1, #0
   19064:	mov	r5, r1
   19068:	bne	19120 <flatcc_emitter@@Base+0x2b4>
   1906c:	ldr	r5, [r6]
   19070:	cmp	r5, #0
   19074:	beq	190a0 <flatcc_emitter@@Base+0x234>
   19078:	ldr	r0, [r5, #2948]	; 0xb84
   1907c:	ldr	r1, [r6, #4]
   19080:	cmp	r0, r1
   19084:	beq	190a0 <flatcc_emitter@@Base+0x234>
   19088:	ldr	r1, [r5, #2952]	; 0xb88
   1908c:	mov	r2, r0
   19090:	sub	r1, r1, #2944	; 0xb80
   19094:	str	r1, [r2, #2952]!	; 0xb88
   19098:	str	r0, [r6]
   1909c:	b	19038 <flatcc_emitter@@Base+0x1cc>
   190a0:	movw	r0, #2956	; 0xb8c
   190a4:	bl	1294c <malloc@plt>
   190a8:	cmp	r0, #0
   190ac:	beq	191d4 <flatcc_emitter@@Base+0x368>
   190b0:	ldr	r1, [r6, #28]
   190b4:	cmp	r5, #0
   190b8:	add	r1, r1, #2944	; 0xb80
   190bc:	str	r1, [r6, #28]
   190c0:	beq	190e4 <flatcc_emitter@@Base+0x278>
   190c4:	ldr	r1, [r6, #4]
   190c8:	add	r2, r0, sl
   190cc:	str	r5, [r0, #2944]	; 0xb80
   190d0:	str	r1, [r0, #2948]	; 0xb84
   190d4:	str	r0, [r5, #2948]	; 0xb84
   190d8:	str	r0, [r1, #2944]	; 0xb80
   190dc:	str	r0, [r6]
   190e0:	b	19038 <flatcc_emitter@@Base+0x1cc>
   190e4:	add	r2, r0, #1472	; 0x5c0
   190e8:	mov	r1, #1472	; 0x5c0
   190ec:	str	r0, [r6]
   190f0:	stmib	r6, {r0, r2}
   190f4:	str	r1, [r6, #12]
   190f8:	str	r2, [r6, #16]
   190fc:	movw	r2, #64064	; 0xfa40
   19100:	str	r1, [r6, #20]
   19104:	str	r0, [r0, #2944]	; 0xb80
   19108:	str	r0, [r0, #2948]	; 0xb84
   1910c:	movt	r2, #65535	; 0xffff
   19110:	str	r2, [r0, #2952]	; 0xb88
   19114:	cmp	r8, r1
   19118:	bhi	19060 <flatcc_emitter@@Base+0x1f4>
   1911c:	mov	r5, r8
   19120:	sub	r0, r1, r5
   19124:	sub	r7, r7, r5
   19128:	mov	r2, r5
   1912c:	str	r0, [r6, #12]
   19130:	mov	r1, r7
   19134:	ldr	r0, [r6, #8]
   19138:	sub	r0, r0, r5
   1913c:	str	r0, [r6, #8]
   19140:	bl	12904 <memcpy@plt>
   19144:	subs	r8, r8, r5
   19148:	bne	19028 <flatcc_emitter@@Base+0x1bc>
   1914c:	ldr	r0, [sp]
   19150:	subs	r4, r4, #1
   19154:	bne	19008 <flatcc_emitter@@Base+0x19c>
   19158:	mov	r8, #0
   1915c:	mov	r0, r8
   19160:	sub	sp, fp, #28
   19164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19168:	ldr	r5, [r6, #16]
   1916c:	add	r2, r5, r1
   19170:	str	r2, [r6, #16]
   19174:	b	19194 <flatcc_emitter@@Base+0x328>
   19178:	mvn	r8, #0
   1917c:	mov	r0, r8
   19180:	sub	sp, fp, #28
   19184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19188:	ldr	r2, [r6, #8]
   1918c:	sub	r5, r2, r1
   19190:	str	r5, [r6, #8]
   19194:	sub	r0, r0, r1
   19198:	mov	r8, #0
   1919c:	cmp	r4, #0
   191a0:	str	r0, [r9]
   191a4:	beq	191c8 <flatcc_emitter@@Base+0x35c>
   191a8:	ldm	r7, {r1, r2}
   191ac:	mov	r0, r5
   191b0:	bl	12904 <memcpy@plt>
   191b4:	ldr	r0, [r7, #4]
   191b8:	add	r7, r7, #8
   191bc:	subs	r4, r4, #1
   191c0:	add	r5, r5, r0
   191c4:	bne	191a8 <flatcc_emitter@@Base+0x33c>
   191c8:	mov	r0, r8
   191cc:	sub	sp, fp, #28
   191d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191d4:	mvn	r8, #0
   191d8:	mov	r0, r8
   191dc:	sub	sp, fp, #28
   191e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000191e4 <flatcc_emitter_copy_buffer@@Base>:
   191e4:	push	{r4, r5, r6, sl, fp, lr}
   191e8:	add	fp, sp, #16
   191ec:	mov	r3, r2
   191f0:	ldr	r2, [r0, #24]
   191f4:	mov	r5, #0
   191f8:	cmp	r2, r3
   191fc:	bhi	19284 <flatcc_emitter_copy_buffer@@Base+0xa0>
   19200:	mov	r4, r0
   19204:	ldr	r0, [r0]
   19208:	cmp	r0, #0
   1920c:	beq	19284 <flatcc_emitter_copy_buffer@@Base+0xa0>
   19210:	mov	r6, r1
   19214:	ldr	r1, [r4, #4]
   19218:	cmp	r0, r1
   1921c:	beq	1928c <flatcc_emitter_copy_buffer@@Base+0xa8>
   19220:	ldr	r0, [r4, #12]
   19224:	ldr	r1, [r4, #8]
   19228:	rsb	r5, r0, #2944	; 0xb80
   1922c:	mov	r0, r6
   19230:	mov	r2, r5
   19234:	bl	12904 <memcpy@plt>
   19238:	ldm	r4, {r0, r1}
   1923c:	add	r5, r6, r5
   19240:	ldr	r6, [r0, #2944]	; 0xb80
   19244:	cmp	r6, r1
   19248:	beq	19270 <flatcc_emitter_copy_buffer@@Base+0x8c>
   1924c:	mov	r0, r5
   19250:	mov	r1, r6
   19254:	mov	r2, #2944	; 0xb80
   19258:	bl	12904 <memcpy@plt>
   1925c:	ldr	r6, [r6, #2944]	; 0xb80
   19260:	ldr	r0, [r4, #4]
   19264:	add	r5, r5, #2944	; 0xb80
   19268:	cmp	r6, r0
   1926c:	bne	1924c <flatcc_emitter_copy_buffer@@Base+0x68>
   19270:	ldr	r0, [r4, #20]
   19274:	mov	r1, r6
   19278:	rsb	r2, r0, #2944	; 0xb80
   1927c:	mov	r0, r5
   19280:	bl	12904 <memcpy@plt>
   19284:	mov	r0, r5
   19288:	pop	{r4, r5, r6, sl, fp, pc}
   1928c:	ldr	r1, [r4, #8]
   19290:	mov	r0, r6
   19294:	bl	12904 <memcpy@plt>
   19298:	mov	r0, r6
   1929c:	pop	{r4, r5, r6, sl, fp, pc}

000192a0 <grisu3_diy_fp_encode_double@@Base>:
   192a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192a4:	add	fp, sp, #28
   192a8:	sub	sp, sp, #12
   192ac:	ldr	lr, [fp, #8]
   192b0:	orr	r7, r0, r1
   192b4:	cmp	lr, #0
   192b8:	movwne	lr, #4
   192bc:	cmp	r7, #0
   192c0:	beq	196b8 <grisu3_diy_fp_encode_double@@Base+0x418>
   192c4:	mov	ip, #0
   192c8:	mov	r5, #0
   192cc:	cmp	ip, r1, lsr #22
   192d0:	bne	192f0 <grisu3_diy_fp_encode_double@@Base+0x50>
   192d4:	mov	ip, #0
   192d8:	lsl	r1, r1, #10
   192dc:	sub	ip, ip, #10
   192e0:	orr	r1, r1, r0, lsr #22
   192e4:	lsl	r0, r0, #10
   192e8:	cmp	r1, #4194304	; 0x400000
   192ec:	bcc	192d8 <grisu3_diy_fp_encode_double@@Base+0x38>
   192f0:	sub	r6, r2, r3
   192f4:	mvn	r2, #0
   192f8:	cmp	r1, #0
   192fc:	blt	19324 <grisu3_diy_fp_encode_double@@Base+0x84>
   19300:	lsl	r1, r1, #1
   19304:	lsl	r4, r0, #1
   19308:	sub	ip, ip, #1
   1930c:	orr	r1, r1, r0, lsr #31
   19310:	subs	r0, r2, r0, lsl #1
   19314:	sbcs	r0, r2, r1
   19318:	mov	r0, r4
   1931c:	blt	19300 <grisu3_diy_fp_encode_double@@Base+0x60>
   19320:	b	19328 <grisu3_diy_fp_encode_double@@Base+0x88>
   19324:	mov	r4, r0
   19328:	cmn	r6, #348	; 0x15c
   1932c:	blt	196d8 <grisu3_diy_fp_encode_double@@Base+0x438>
   19330:	cmp	r6, #348	; 0x15c
   19334:	bge	196f8 <grisu3_diy_fp_encode_double@@Base+0x458>
   19338:	add	r0, r6, #348	; 0x15c
   1933c:	movw	r9, #63616	; 0xf880
   19340:	asr	r5, r0, #31
   19344:	movt	r9, #1
   19348:	add	r0, r0, r5, lsr #29
   1934c:	mvn	r5, #15
   19350:	and	r0, r5, r0, lsl #1
   19354:	ldr	r5, [r9, r0]!
   19358:	ldrsh	r0, [r9, #10]
   1935c:	cmp	r6, r0
   19360:	blt	19718 <grisu3_diy_fp_encode_double@@Base+0x478>
   19364:	add	r7, r0, #8
   19368:	cmp	r7, r6
   1936c:	ble	19738 <grisu3_diy_fp_encode_double@@Base+0x498>
   19370:	rsb	r7, ip, #0
   19374:	cmp	r6, r0
   19378:	lsl	r8, lr, r7
   1937c:	beq	19408 <grisu3_diy_fp_encode_double@@Base+0x168>
   19380:	mvn	r0, r0
   19384:	str	r8, [sp, #4]
   19388:	str	r3, [sp, #8]
   1938c:	add	sl, r6, r0
   19390:	cmp	sl, #7
   19394:	bcs	19758 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   19398:	movw	r0, #63504	; 0xf810
   1939c:	movt	r0, #1
   193a0:	ldr	r7, [r0, sl, lsl #4]!
   193a4:	ldr	r8, [r0, #4]
   193a8:	ldr	r0, [r0, #8]
   193ac:	umull	lr, r6, r7, r1
   193b0:	str	r0, [sp]
   193b4:	umull	r3, r0, r8, r4
   193b8:	umaal	r6, r0, r8, r1
   193bc:	umull	r1, r4, r7, r4
   193c0:	ldr	r8, [sp, #4]
   193c4:	mov	r1, #0
   193c8:	adds	r7, lr, r4
   193cc:	adc	r1, r1, #0
   193d0:	adds	r3, r7, r3
   193d4:	adc	r1, r1, #0
   193d8:	adds	r3, r3, #-2147483648	; 0x80000000
   193dc:	adc	r1, r1, #0
   193e0:	adds	r4, r6, r1
   193e4:	adc	r1, r0, #0
   193e8:	ldr	r0, [sp, #8]
   193ec:	add	r0, r0, sl
   193f0:	add	r0, r0, #1
   193f4:	cmp	r0, #19
   193f8:	ldr	r0, [sp]
   193fc:	addgt	r8, r8, #4
   19400:	add	r0, ip, r0
   19404:	add	ip, r0, #64	; 0x40
   19408:	ldr	r0, [r9, #4]
   1940c:	umull	r3, r6, r4, r5
   19410:	mov	lr, #0
   19414:	umull	r3, r7, r1, r5
   19418:	adds	r3, r3, r6
   1941c:	adc	r6, lr, #0
   19420:	umull	r4, r5, r4, r0
   19424:	adds	r3, r3, r4
   19428:	umaal	r7, r5, r1, r0
   1942c:	adc	r4, r6, #0
   19430:	adds	r3, r3, #-2147483648	; 0x80000000
   19434:	mov	r6, #9
   19438:	adc	r3, r4, #0
   1943c:	adds	r4, r7, r3
   19440:	adc	r3, r5, #0
   19444:	cmp	r8, #0
   19448:	orr	r0, r4, r3
   1944c:	movweq	r6, #8
   19450:	cmp	r0, #0
   19454:	beq	196b8 <grisu3_diy_fp_encode_double@@Base+0x418>
   19458:	ldrsh	r0, [r9, #8]
   1945c:	cmp	lr, r3, lsr #22
   19460:	add	r0, r0, ip
   19464:	add	r5, r0, #64	; 0x40
   19468:	bne	194a0 <grisu3_diy_fp_encode_double@@Base+0x200>
   1946c:	mov	lr, #0
   19470:	mov	r1, r5
   19474:	lsl	r0, r3, #10
   19478:	sub	r1, r1, #10
   1947c:	orr	r3, r0, r4, lsr #22
   19480:	lsl	r4, r4, #10
   19484:	cmp	r3, #4194304	; 0x400000
   19488:	bcc	19474 <grisu3_diy_fp_encode_double@@Base+0x1d4>
   1948c:	subs	r0, r2, r4
   19490:	add	r7, r6, r8
   19494:	sbcs	r0, r2, r3
   19498:	blt	194b4 <grisu3_diy_fp_encode_double@@Base+0x214>
   1949c:	b	194d8 <grisu3_diy_fp_encode_double@@Base+0x238>
   194a0:	mov	r1, r5
   194a4:	subs	r0, r2, r4
   194a8:	add	r7, r6, r8
   194ac:	sbcs	r0, r2, r3
   194b0:	bge	194d8 <grisu3_diy_fp_encode_double@@Base+0x238>
   194b4:	lsl	r0, r3, #1
   194b8:	subs	r6, r2, r4, lsl #1
   194bc:	sub	r1, r1, #1
   194c0:	orr	r3, r0, r4, lsr #31
   194c4:	lsl	r0, r4, #1
   194c8:	sbcs	r6, r2, r3
   194cc:	mov	r4, r0
   194d0:	blt	194b4 <grisu3_diy_fp_encode_double@@Base+0x214>
   194d4:	b	194dc <grisu3_diy_fp_encode_double@@Base+0x23c>
   194d8:	mov	r0, r4
   194dc:	movw	ip, #64462	; 0xfbce
   194e0:	sub	r2, r5, r1
   194e4:	mov	r5, #0
   194e8:	movt	ip, #65535	; 0xffff
   194ec:	lsl	lr, r7, r2
   194f0:	sub	r2, ip, #1
   194f4:	cmp	r1, r2
   194f8:	bgt	1954c <grisu3_diy_fp_encode_double@@Base+0x2ac>
   194fc:	mvn	r2, #1136	; 0x470
   19500:	mov	r5, #64	; 0x40
   19504:	cmp	r1, r2
   19508:	blt	19518 <grisu3_diy_fp_encode_double@@Base+0x278>
   1950c:	sub	r5, ip, r1
   19510:	cmp	r5, #61	; 0x3d
   19514:	blt	1954c <grisu3_diy_fp_encode_double@@Base+0x2ac>
   19518:	sub	r2, r5, #62	; 0x3e
   1951c:	mov	r4, #9
   19520:	add	lr, r4, lr, asr r2
   19524:	lsr	r0, r0, r2
   19528:	rsb	r4, r5, #94	; 0x5e
   1952c:	add	r1, r2, r1
   19530:	orr	r0, r0, r3, lsl r4
   19534:	sub	r4, r5, #94	; 0x5e
   19538:	mov	r5, #62	; 0x3e
   1953c:	cmp	r4, #0
   19540:	lsrge	r0, r3, r4
   19544:	lsr	r3, r3, r2
   19548:	movwge	r3, #0
   1954c:	lsr	r2, r0, r5
   19550:	rsb	r4, r5, #32
   19554:	lsr	r6, r3, r5
   19558:	add	r1, r1, r5
   1955c:	orr	r2, r2, r3, lsl r4
   19560:	sub	r4, r5, #32
   19564:	cmp	r4, #0
   19568:	lsrge	r2, r3, r4
   1956c:	sub	r3, r5, #1
   19570:	mov	r4, #1
   19574:	movwge	r6, #0
   19578:	lsl	r4, r4, r3
   1957c:	sub	r3, r5, #33	; 0x21
   19580:	cmp	r3, #0
   19584:	movwge	r4, #0
   19588:	add	sl, lr, r4, lsl #3
   1958c:	cmp	r5, sl
   19590:	blt	195b0 <grisu3_diy_fp_encode_double@@Base+0x310>
   19594:	adds	r2, r2, #1
   19598:	adc	r6, r6, #0
   1959c:	tst	r6, #2097152	; 0x200000
   195a0:	beq	195b0 <grisu3_diy_fp_encode_double@@Base+0x310>
   195a4:	lsrs	r6, r6, #1
   195a8:	add	r1, r1, #1
   195ac:	rrx	r2, r2
   195b0:	and	r0, r4, r0
   195b4:	cmp	r6, #2097152	; 0x200000
   195b8:	bcc	195dc <grisu3_diy_fp_encode_double@@Base+0x33c>
   195bc:	mov	r3, #0
   195c0:	lsrs	r7, r6, #1
   195c4:	add	r1, r1, #1
   195c8:	rrx	r2, r2
   195cc:	cmp	r3, r6, lsr #22
   195d0:	mov	r6, r7
   195d4:	bne	195c0 <grisu3_diy_fp_encode_double@@Base+0x320>
   195d8:	b	195e0 <grisu3_diy_fp_encode_double@@Base+0x340>
   195dc:	mov	r7, r6
   195e0:	ldr	r8, [fp, #12]
   195e4:	lsl	r9, r4, #3
   195e8:	lsl	r0, r0, #3
   195ec:	vmov.i32	d16, #0	; 0x00000000
   195f0:	cmp	r1, ip
   195f4:	blt	1968c <grisu3_diy_fp_encode_double@@Base+0x3ec>
   195f8:	and	r3, r7, #1048576	; 0x100000
   195fc:	mov	r4, #1
   19600:	cmp	r1, ip
   19604:	eor	r5, r4, r3, lsr #20
   19608:	beq	1964c <grisu3_diy_fp_encode_double@@Base+0x3ac>
   1960c:	cmp	r3, #0
   19610:	bne	1964c <grisu3_diy_fp_encode_double@@Base+0x3ac>
   19614:	mov	r3, #1
   19618:	lsl	r4, r7, #1
   1961c:	and	r7, r7, #524288	; 0x80000
   19620:	cmn	r1, #1072	; 0x430
   19624:	orr	r6, r4, r2, lsr #31
   19628:	eor	r5, r3, r7, lsr #19
   1962c:	lsl	r2, r2, #1
   19630:	sub	r4, r1, #1
   19634:	blt	19654 <grisu3_diy_fp_encode_double@@Base+0x3b4>
   19638:	cmp	r7, #0
   1963c:	mov	r7, r6
   19640:	mov	r1, r4
   19644:	beq	19618 <grisu3_diy_fp_encode_double@@Base+0x378>
   19648:	b	19654 <grisu3_diy_fp_encode_double@@Base+0x3b4>
   1964c:	mov	r4, r1
   19650:	mov	r6, r7
   19654:	cmp	r4, ip
   19658:	bne	1966c <grisu3_diy_fp_encode_double@@Base+0x3cc>
   1965c:	mov	r1, #0
   19660:	cmp	r5, #0
   19664:	mov	r3, #0
   19668:	bne	1967c <grisu3_diy_fp_encode_double@@Base+0x3dc>
   1966c:	movw	r1, #0
   19670:	movt	r1, #17200	; 0x4330
   19674:	add	r3, r1, r4, lsl #20
   19678:	mov	r1, #0
   1967c:	bfc	r6, #20, #12
   19680:	orr	r1, r1, r2
   19684:	orr	r2, r3, r6
   19688:	vmov	d16, r1, r2
   1968c:	cmp	r0, sl
   19690:	mov	r2, #0
   19694:	sub	r3, r9, lr
   19698:	mov	r1, #0
   1969c:	vstr	d16, [r8]
   196a0:	movwge	r2, #1
   196a4:	cmp	r3, r0
   196a8:	movwge	r1, #1
   196ac:	orr	r0, r2, r1
   196b0:	sub	sp, fp, #28
   196b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196b8:	movw	r0, #1499	; 0x5db
   196bc:	movw	r1, #1508	; 0x5e4
   196c0:	movw	r3, #1594	; 0x63a
   196c4:	mov	r2, #260	; 0x104
   196c8:	movt	r0, #2
   196cc:	movt	r1, #2
   196d0:	movt	r3, #2
   196d4:	bl	129c4 <__assert_fail@plt>
   196d8:	movw	r0, #1651	; 0x673
   196dc:	movw	r1, #152	; 0x98
   196e0:	movw	r3, #1682	; 0x692
   196e4:	mov	r2, #80	; 0x50
   196e8:	movt	r0, #2
   196ec:	movt	r1, #2
   196f0:	movt	r3, #2
   196f4:	bl	129c4 <__assert_fail@plt>
   196f8:	movw	r0, #1739	; 0x6cb
   196fc:	movw	r1, #152	; 0x98
   19700:	movw	r3, #1682	; 0x692
   19704:	mov	r2, #81	; 0x51
   19708:	movt	r0, #2
   1970c:	movt	r1, #2
   19710:	movt	r3, #2
   19714:	bl	129c4 <__assert_fail@plt>
   19718:	movw	r0, #1782	; 0x6f6
   1971c:	movw	r1, #152	; 0x98
   19720:	movw	r3, #1682	; 0x692
   19724:	mov	r2, #88	; 0x58
   19728:	movt	r0, #2
   1972c:	movt	r1, #2
   19730:	movt	r3, #2
   19734:	bl	129c4 <__assert_fail@plt>
   19738:	movw	r0, #1797	; 0x705
   1973c:	movw	r1, #152	; 0x98
   19740:	movw	r3, #1682	; 0x692
   19744:	mov	r2, #89	; 0x59
   19748:	movt	r0, #2
   1974c:	movt	r1, #2
   19750:	movt	r3, #2
   19754:	bl	129c4 <__assert_fail@plt>
   19758:	movw	r0, #124	; 0x7c
   1975c:	movw	r1, #152	; 0x98
   19760:	movw	r3, #239	; 0xef
   19764:	mov	r2, #185	; 0xb9
   19768:	movt	r0, #2
   1976c:	movt	r1, #2
   19770:	movt	r3, #2
   19774:	bl	129c4 <__assert_fail@plt>

00019778 <flatcc_json_parser_error_string@@Base>:
   19778:	cmp	r0, #34	; 0x22
   1977c:	movwhi	r0, #949	; 0x3b5
   19780:	movthi	r0, #2
   19784:	bxhi	lr
   19788:	movw	r1, #65520	; 0xfff0
   1978c:	movt	r1, #1
   19790:	ldr	r0, [r1, r0, lsl #2]
   19794:	bx	lr

00019798 <flatcc_json_parser_set_error@@Base>:
   19798:	mov	ip, r2
   1979c:	ldr	r2, [r0, #24]
   197a0:	cmp	r2, #0
   197a4:	beq	197b0 <flatcc_json_parser_set_error@@Base+0x18>
   197a8:	mov	r0, ip
   197ac:	bx	lr
   197b0:	str	r1, [r0, #36]	; 0x24
   197b4:	add	r1, r1, #1
   197b8:	ldr	r2, [r0, #4]
   197bc:	sub	r1, r1, r2
   197c0:	str	r1, [r0, #20]
   197c4:	str	r3, [r0, #24]
   197c8:	mov	r0, ip
   197cc:	bx	lr

000197d0 <flatcc_json_parser_string_part@@Base>:
   197d0:	cmp	r1, r2
   197d4:	beq	19800 <flatcc_json_parser_string_part@@Base+0x30>
   197d8:	ldrb	r3, [r1]
   197dc:	cmp	r3, #32
   197e0:	bcc	19834 <flatcc_json_parser_string_part@@Base+0x64>
   197e4:	cmp	r3, #34	; 0x22
   197e8:	cmpne	r3, #92	; 0x5c
   197ec:	beq	1982c <flatcc_json_parser_string_part@@Base+0x5c>
   197f0:	add	r1, r1, #1
   197f4:	cmp	r2, r1
   197f8:	bne	197d8 <flatcc_json_parser_string_part@@Base+0x8>
   197fc:	mov	r1, r2
   19800:	ldr	r3, [r0, #24]
   19804:	cmp	r3, #0
   19808:	bne	19828 <flatcc_json_parser_string_part@@Base+0x58>
   1980c:	mov	ip, #20
   19810:	str	r1, [r0, #36]	; 0x24
   19814:	add	r1, r1, #1
   19818:	ldr	r3, [r0, #4]
   1981c:	sub	r1, r1, r3
   19820:	str	r1, [r0, #20]
   19824:	str	ip, [r0, #24]
   19828:	mov	r1, r2
   1982c:	mov	r0, r1
   19830:	bx	lr
   19834:	ldr	r3, [r0, #24]
   19838:	cmp	r3, #0
   1983c:	bne	19828 <flatcc_json_parser_string_part@@Base+0x58>
   19840:	mov	ip, #17
   19844:	b	19810 <flatcc_json_parser_string_part@@Base+0x40>

00019848 <flatcc_json_parser_space_ext@@Base>:
   19848:	mov	ip, r2
   1984c:	cmp	r1, r2
   19850:	bne	1992c <flatcc_json_parser_space_ext@@Base+0xe4>
   19854:	b	19954 <flatcc_json_parser_space_ext@@Base+0x10c>
   19858:	add	r1, r1, #1
   1985c:	str	r1, [r0, #4]
   19860:	ldr	r2, [r0, #16]
   19864:	add	r2, r2, #1
   19868:	str	r2, [r0, #16]
   1986c:	cmp	r1, ip
   19870:	bne	19884 <flatcc_json_parser_space_ext@@Base+0x3c>
   19874:	b	19954 <flatcc_json_parser_space_ext@@Base+0x10c>
   19878:	add	r1, r1, #1
   1987c:	cmp	r1, ip
   19880:	beq	19954 <flatcc_json_parser_space_ext@@Base+0x10c>
   19884:	ldrb	r3, [r1]
   19888:	cmp	r3, #32
   1988c:	movhi	r0, r1
   19890:	bxhi	lr
   19894:	sub	r3, r3, #9
   19898:	cmp	r3, #23
   1989c:	bhi	19948 <flatcc_json_parser_space_ext@@Base+0x100>
   198a0:	add	r2, pc, #0
   198a4:	ldr	pc, [r2, r3, lsl #2]
   198a8:	andeq	r9, r1, r8, ror r8
   198ac:	andeq	r9, r1, r8, asr r8
   198b0:	andeq	r9, r1, r8, asr #18
   198b4:	andeq	r9, r1, r8, asr #18
   198b8:	andeq	r9, r1, r8, lsl #18
   198bc:	andeq	r9, r1, r8, asr #18
   198c0:	andeq	r9, r1, r8, asr #18
   198c4:	andeq	r9, r1, r8, asr #18
   198c8:	andeq	r9, r1, r8, asr #18
   198cc:	andeq	r9, r1, r8, asr #18
   198d0:	andeq	r9, r1, r8, asr #18
   198d4:	andeq	r9, r1, r8, asr #18
   198d8:	andeq	r9, r1, r8, asr #18
   198dc:	andeq	r9, r1, r8, asr #18
   198e0:	andeq	r9, r1, r8, asr #18
   198e4:	andeq	r9, r1, r8, asr #18
   198e8:	andeq	r9, r1, r8, asr #18
   198ec:	andeq	r9, r1, r8, asr #18
   198f0:	andeq	r9, r1, r8, asr #18
   198f4:	andeq	r9, r1, r8, asr #18
   198f8:	andeq	r9, r1, r8, asr #18
   198fc:	andeq	r9, r1, r8, asr #18
   19900:	andeq	r9, r1, r8, asr #18
   19904:	andeq	r9, r1, ip, lsr r9
   19908:	sub	r2, ip, r1
   1990c:	mov	r3, #0
   19910:	cmp	r2, #2
   19914:	ldrbge	r2, [r1, #1]
   19918:	subge	r2, r2, #10
   1991c:	clzge	r2, r2
   19920:	lsrge	r3, r2, #5
   19924:	add	r1, r1, r3
   19928:	b	19858 <flatcc_json_parser_space_ext@@Base+0x10>
   1992c:	ldrb	r3, [r1]
   19930:	cmp	r3, #32
   19934:	bne	1986c <flatcc_json_parser_space_ext@@Base+0x24>
   19938:	add	r1, r1, #1
   1993c:	cmp	r1, ip
   19940:	bne	1992c <flatcc_json_parser_space_ext@@Base+0xe4>
   19944:	b	19954 <flatcc_json_parser_space_ext@@Base+0x10c>
   19948:	ldr	r2, [r0, #24]
   1994c:	cmp	r2, #0
   19950:	beq	1995c <flatcc_json_parser_space_ext@@Base+0x114>
   19954:	mov	r0, ip
   19958:	bx	lr
   1995c:	str	r1, [r0, #36]	; 0x24
   19960:	add	r1, r1, #1
   19964:	mov	r2, #5
   19968:	ldr	r3, [r0, #4]
   1996c:	sub	r1, r1, r3
   19970:	str	r1, [r0, #20]
   19974:	str	r2, [r0, #24]
   19978:	mov	r0, ip
   1997c:	bx	lr

00019980 <flatcc_json_parser_string_escape@@Base>:
   19980:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19984:	add	fp, sp, #24
   19988:	sub	r7, r2, r1
   1998c:	cmp	r7, #2
   19990:	blt	19be8 <flatcc_json_parser_string_escape@@Base+0x268>
   19994:	ldrb	r6, [r1]
   19998:	cmp	r6, #92	; 0x5c
   1999c:	bne	19be8 <flatcc_json_parser_string_escape@@Base+0x268>
   199a0:	ldrb	r6, [r1, #1]
   199a4:	sub	r6, r6, #34	; 0x22
   199a8:	cmp	r6, #86	; 0x56
   199ac:	bhi	19be8 <flatcc_json_parser_string_escape@@Base+0x268>
   199b0:	add	r5, pc, #0
   199b4:	ldr	pc, [r5, r6, lsl #2]
   199b8:	andeq	r9, r1, r4, lsl fp
   199bc:	andeq	r9, r1, r8, ror #23
   199c0:	andeq	r9, r1, r8, ror #23
   199c4:	andeq	r9, r1, r8, ror #23
   199c8:	andeq	r9, r1, r8, ror #23
   199cc:	andeq	r9, r1, r8, ror #23
   199d0:	andeq	r9, r1, r8, ror #23
   199d4:	andeq	r9, r1, r8, ror #23
   199d8:	andeq	r9, r1, r8, ror #23
   199dc:	andeq	r9, r1, r8, ror #23
   199e0:	andeq	r9, r1, r8, ror #23
   199e4:	andeq	r9, r1, r8, ror #23
   199e8:	andeq	r9, r1, r8, ror #23
   199ec:	andeq	r9, r1, r8, lsr #22
   199f0:	andeq	r9, r1, r8, ror #23
   199f4:	andeq	r9, r1, r8, ror #23
   199f8:	andeq	r9, r1, r8, ror #23
   199fc:	andeq	r9, r1, r8, ror #23
   19a00:	andeq	r9, r1, r8, ror #23
   19a04:	andeq	r9, r1, r8, ror #23
   19a08:	andeq	r9, r1, r8, ror #23
   19a0c:	andeq	r9, r1, r8, ror #23
   19a10:	andeq	r9, r1, r8, ror #23
   19a14:	andeq	r9, r1, r8, ror #23
   19a18:	andeq	r9, r1, r8, ror #23
   19a1c:	andeq	r9, r1, r8, ror #23
   19a20:	andeq	r9, r1, r8, ror #23
   19a24:	andeq	r9, r1, r8, ror #23
   19a28:	andeq	r9, r1, r8, ror #23
   19a2c:	andeq	r9, r1, r8, ror #23
   19a30:	andeq	r9, r1, r8, ror #23
   19a34:	andeq	r9, r1, r8, ror #23
   19a38:	andeq	r9, r1, r8, ror #23
   19a3c:	andeq	r9, r1, r8, ror #23
   19a40:	andeq	r9, r1, r8, ror #23
   19a44:	andeq	r9, r1, r8, ror #23
   19a48:	andeq	r9, r1, r8, ror #23
   19a4c:	andeq	r9, r1, r8, ror #23
   19a50:	andeq	r9, r1, r8, ror #23
   19a54:	andeq	r9, r1, r8, ror #23
   19a58:	andeq	r9, r1, r8, ror #23
   19a5c:	andeq	r9, r1, r8, ror #23
   19a60:	andeq	r9, r1, r8, ror #23
   19a64:	andeq	r9, r1, r8, ror #23
   19a68:	andeq	r9, r1, r8, ror #23
   19a6c:	andeq	r9, r1, r8, ror #23
   19a70:	andeq	r9, r1, r8, ror #23
   19a74:	andeq	r9, r1, r8, ror #23
   19a78:	andeq	r9, r1, r8, ror #23
   19a7c:	andeq	r9, r1, r8, ror #23
   19a80:	andeq	r9, r1, r8, ror #23
   19a84:	andeq	r9, r1, r8, ror #23
   19a88:	andeq	r9, r1, r8, ror #23
   19a8c:	andeq	r9, r1, r8, ror #23
   19a90:	andeq	r9, r1, r8, ror #23
   19a94:	andeq	r9, r1, r8, ror #23
   19a98:	andeq	r9, r1, r8, ror #23
   19a9c:	andeq	r9, r1, r8, ror #23
   19aa0:	andeq	r9, r1, ip, lsr fp
   19aa4:	andeq	r9, r1, r8, ror #23
   19aa8:	andeq	r9, r1, r8, ror #23
   19aac:	andeq	r9, r1, r8, ror #23
   19ab0:	andeq	r9, r1, r8, ror #23
   19ab4:	andeq	r9, r1, r8, ror #23
   19ab8:	andeq	r9, r1, r0, asr fp
   19abc:	andeq	r9, r1, r8, ror #23
   19ac0:	andeq	r9, r1, r8, ror #23
   19ac4:	andeq	r9, r1, r8, ror #23
   19ac8:	andeq	r9, r1, r4, ror #22
   19acc:	andeq	r9, r1, r8, ror #23
   19ad0:	andeq	r9, r1, r8, ror #23
   19ad4:	andeq	r9, r1, r8, ror #23
   19ad8:	andeq	r9, r1, r8, ror #23
   19adc:	andeq	r9, r1, r8, ror #23
   19ae0:	andeq	r9, r1, r8, ror #23
   19ae4:	andeq	r9, r1, r8, ror #23
   19ae8:	andeq	r9, r1, r8, ror fp
   19aec:	andeq	r9, r1, r8, ror #23
   19af0:	andeq	r9, r1, r8, ror #23
   19af4:	andeq	r9, r1, r8, ror #23
   19af8:	andeq	r9, r1, ip, lsl #23
   19afc:	andeq	r9, r1, r8, ror #23
   19b00:	andeq	r9, r1, r0, lsr #23
   19b04:			; <UNDEFINED> instruction: 0x00019bb4
   19b08:	andeq	r9, r1, r8, ror #23
   19b0c:	andeq	r9, r1, r8, ror #23
   19b10:	ldrdeq	r9, [r1], -r8
   19b14:	movw	r0, #8705	; 0x2201
   19b18:	add	r2, r1, #2
   19b1c:	strh	r0, [r3]
   19b20:	mov	r0, r2
   19b24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b28:	movw	r0, #12033	; 0x2f01
   19b2c:	add	r2, r1, #2
   19b30:	strh	r0, [r3]
   19b34:	mov	r0, r2
   19b38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b3c:	movw	r0, #23553	; 0x5c01
   19b40:	add	r2, r1, #2
   19b44:	strh	r0, [r3]
   19b48:	mov	r0, r2
   19b4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b50:	movw	r0, #2049	; 0x801
   19b54:	add	r2, r1, #2
   19b58:	strh	r0, [r3]
   19b5c:	mov	r0, r2
   19b60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b64:	movw	r0, #3073	; 0xc01
   19b68:	add	r2, r1, #2
   19b6c:	strh	r0, [r3]
   19b70:	mov	r0, r2
   19b74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b78:	movw	r0, #2561	; 0xa01
   19b7c:	add	r2, r1, #2
   19b80:	strh	r0, [r3]
   19b84:	mov	r0, r2
   19b88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19b8c:	movw	r0, #3329	; 0xd01
   19b90:	add	r2, r1, #2
   19b94:	strh	r0, [r3]
   19b98:	mov	r0, r2
   19b9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19ba0:	movw	r0, #2305	; 0x901
   19ba4:	add	r2, r1, #2
   19ba8:	strh	r0, [r3]
   19bac:	mov	r0, r2
   19bb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19bb4:	cmp	r7, #5
   19bb8:	ble	19be8 <flatcc_json_parser_string_escape@@Base+0x268>
   19bbc:	ldrb	r7, [r1, #2]
   19bc0:	sub	r6, r7, #48	; 0x30
   19bc4:	uxtb	r6, r6
   19bc8:	cmp	r6, #9
   19bcc:	bhi	19c44 <flatcc_json_parser_string_escape@@Base+0x2c4>
   19bd0:	lsl	ip, r7, #12
   19bd4:	b	19c64 <flatcc_json_parser_string_escape@@Base+0x2e4>
   19bd8:	mov	r6, #1
   19bdc:	cmp	r7, #3
   19be0:	strb	r6, [r3]
   19be4:	bgt	19c28 <flatcc_json_parser_string_escape@@Base+0x2a8>
   19be8:	mov	r7, #0
   19bec:	strb	r7, [r3]
   19bf0:	ldr	r3, [r0, #24]
   19bf4:	cmp	r3, #0
   19bf8:	beq	19c04 <flatcc_json_parser_string_escape@@Base+0x284>
   19bfc:	mov	r0, r2
   19c00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19c04:	str	r1, [r0, #36]	; 0x24
   19c08:	add	r1, r1, #1
   19c0c:	mov	r3, #18
   19c10:	ldr	r7, [r0, #4]
   19c14:	sub	r1, r1, r7
   19c18:	str	r1, [r0, #20]
   19c1c:	str	r3, [r0, #24]
   19c20:	mov	r0, r2
   19c24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19c28:	ldrb	r7, [r1, #2]
   19c2c:	sub	r6, r7, #48	; 0x30
   19c30:	uxtb	r6, r6
   19c34:	cmp	r6, #9
   19c38:	bhi	19c80 <flatcc_json_parser_string_escape@@Base+0x300>
   19c3c:	lsl	r7, r7, #4
   19c40:	b	19c9c <flatcc_json_parser_string_escape@@Base+0x31c>
   19c44:	orr	r6, r7, #32
   19c48:	sub	r6, r6, #97	; 0x61
   19c4c:	uxtb	r6, r6
   19c50:	cmp	r6, #5
   19c54:	bhi	19be8 <flatcc_json_parser_string_escape@@Base+0x268>
   19c58:	movw	r6, #36864	; 0x9000
   19c5c:	movt	r6, #65535	; 0xffff
   19c60:	add	ip, r6, r7, lsl #12
   19c64:	ldrb	lr, [r1, #3]
   19c68:	sub	r4, lr, #48	; 0x30
   19c6c:	uxtb	r4, r4
   19c70:	cmp	r4, #10
   19c74:	bcs	19cdc <flatcc_json_parser_string_escape@@Base+0x35c>
   19c78:	mov	r8, #53248	; 0xd000
   19c7c:	b	19cf4 <flatcc_json_parser_string_escape@@Base+0x374>
   19c80:	orr	r6, r7, #32
   19c84:	sub	r6, r6, #97	; 0x61
   19c88:	uxtb	r6, r6
   19c8c:	cmp	r6, #5
   19c90:	bhi	19be8 <flatcc_json_parser_string_escape@@Base+0x268>
   19c94:	mvn	r6, #111	; 0x6f
   19c98:	add	r7, r6, r7, lsl #4
   19c9c:	ldrb	r5, [r1, #3]
   19ca0:	sub	r6, r5, #48	; 0x30
   19ca4:	uxtb	r4, r6
   19ca8:	cmp	r4, #10
   19cac:	bcc	19cc8 <flatcc_json_parser_string_escape@@Base+0x348>
   19cb0:	orr	r6, r5, #32
   19cb4:	sub	r5, r6, #97	; 0x61
   19cb8:	uxtb	r5, r5
   19cbc:	cmp	r5, #5
   19cc0:	bhi	19be8 <flatcc_json_parser_string_escape@@Base+0x268>
   19cc4:	sub	r6, r6, #87	; 0x57
   19cc8:	orr	r0, r6, r7
   19ccc:	add	r2, r1, #4
   19cd0:	strb	r0, [r3, #1]
   19cd4:	mov	r0, r2
   19cd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19cdc:	orr	lr, lr, #32
   19ce0:	mov	r8, #43264	; 0xa900
   19ce4:	sub	r4, lr, #97	; 0x61
   19ce8:	uxtb	r4, r4
   19cec:	cmp	r4, #6
   19cf0:	bcs	19be8 <flatcc_json_parser_string_escape@@Base+0x268>
   19cf4:	ldrb	r5, [r1, #4]
   19cf8:	sub	r4, r5, #48	; 0x30
   19cfc:	uxtb	r4, r4
   19d00:	cmp	r4, #10
   19d04:	bcs	19d10 <flatcc_json_parser_string_escape@@Base+0x390>
   19d08:	mov	r9, #64768	; 0xfd00
   19d0c:	b	19d28 <flatcc_json_parser_string_escape@@Base+0x3a8>
   19d10:	orr	r5, r5, #32
   19d14:	movw	r9, #64144	; 0xfa90
   19d18:	sub	r4, r5, #97	; 0x61
   19d1c:	uxtb	r4, r4
   19d20:	cmp	r4, #6
   19d24:	bcs	19be8 <flatcc_json_parser_string_escape@@Base+0x268>
   19d28:	ldrb	r7, [r1, #5]
   19d2c:	sub	r4, r7, #48	; 0x30
   19d30:	uxtb	r4, r4
   19d34:	cmp	r4, #10
   19d38:	bcs	19d48 <flatcc_json_parser_string_escape@@Base+0x3c8>
   19d3c:	mvn	r0, #86	; 0x56
   19d40:	add	r4, r0, #39	; 0x27
   19d44:	b	19d60 <flatcc_json_parser_string_escape@@Base+0x3e0>
   19d48:	orr	r7, r7, #32
   19d4c:	movw	r4, #65449	; 0xffa9
   19d50:	sub	r6, r7, #97	; 0x61
   19d54:	uxtb	r6, r6
   19d58:	cmp	r6, #6
   19d5c:	bcs	19be8 <flatcc_json_parser_string_escape@@Base+0x268>
   19d60:	add	r0, r8, lr, lsl #8
   19d64:	add	r2, r9, r5, lsl #4
   19d68:	orr	r0, r0, ip
   19d6c:	orr	r0, r0, r2
   19d70:	add	r2, r4, r7
   19d74:	orr	r0, r0, r2
   19d78:	uxth	r7, r0
   19d7c:	cmp	r7, #127	; 0x7f
   19d80:	bhi	19d9c <flatcc_json_parser_string_escape@@Base+0x41c>
   19d84:	mov	r2, #1
   19d88:	strb	r2, [r3]
   19d8c:	strb	r0, [r3, r2]
   19d90:	add	r2, r1, #6
   19d94:	mov	r0, r2
   19d98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19d9c:	and	r2, r0, #63488	; 0xf800
   19da0:	mov	r6, #0
   19da4:	cmp	r6, r2, lsr #11
   19da8:	bne	19dc4 <flatcc_json_parser_string_escape@@Base+0x444>
   19dac:	mov	r7, #192	; 0xc0
   19db0:	mov	r2, #2
   19db4:	orr	r7, r7, r0, lsr #6
   19db8:	strb	r2, [r3]
   19dbc:	strb	r7, [r3, #1]
   19dc0:	b	19de8 <flatcc_json_parser_string_escape@@Base+0x468>
   19dc4:	mov	r6, #224	; 0xe0
   19dc8:	mov	r2, #3
   19dcc:	orr	r6, r6, r7, lsr #12
   19dd0:	strb	r2, [r3]
   19dd4:	lsr	r7, r7, #6
   19dd8:	strb	r6, [r3, #1]
   19ddc:	mov	r6, #2
   19de0:	bfi	r7, r6, #6, #26
   19de4:	strb	r7, [r3, #2]
   19de8:	mvn	r7, #-67108863	; 0xfc000001
   19dec:	bfi	r0, r7, #6, #26
   19df0:	strb	r0, [r3, r2]
   19df4:	add	r2, r1, #6
   19df8:	mov	r0, r2
   19dfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00019e00 <flatcc_json_parser_skip_constant@@Base>:
   19e00:	push	{r4, r5, r6, sl, fp, lr}
   19e04:	add	fp, sp, #16
   19e08:	cmp	r1, r2
   19e0c:	moveq	r0, r1
   19e10:	popeq	{r4, r5, r6, sl, fp, pc}
   19e14:	mov	r4, r2
   19e18:	mov	r5, r0
   19e1c:	ldrsb	r0, [r1]
   19e20:	mov	r6, r1
   19e24:	cmp	r0, #0
   19e28:	bge	19e4c <flatcc_json_parser_skip_constant@@Base+0x4c>
   19e2c:	b	19e80 <flatcc_json_parser_skip_constant@@Base+0x80>
   19e30:	cmp	r1, r4
   19e34:	moveq	r0, r4
   19e38:	popeq	{r4, r5, r6, sl, fp, pc}
   19e3c:	ldrsb	r0, [r1]
   19e40:	mov	r6, r1
   19e44:	cmp	r0, #0
   19e48:	blt	19e80 <flatcc_json_parser_skip_constant@@Base+0x80>
   19e4c:	uxtb	r0, r0
   19e50:	cmp	r0, #95	; 0x5f
   19e54:	cmpne	r0, #46	; 0x2e
   19e58:	beq	19e80 <flatcc_json_parser_skip_constant@@Base+0x80>
   19e5c:	sub	r1, r0, #48	; 0x30
   19e60:	uxtb	r1, r1
   19e64:	cmp	r1, #9
   19e68:	bls	19e80 <flatcc_json_parser_skip_constant@@Base+0x80>
   19e6c:	orr	r1, r0, #32
   19e70:	sub	r1, r1, #97	; 0x61
   19e74:	uxtb	r1, r1
   19e78:	cmp	r1, #25
   19e7c:	bhi	19e88 <flatcc_json_parser_skip_constant@@Base+0x88>
   19e80:	add	r1, r6, #1
   19e84:	b	19e30 <flatcc_json_parser_skip_constant@@Base+0x30>
   19e88:	sub	r1, r4, r6
   19e8c:	cmp	r1, #2
   19e90:	blt	19eb0 <flatcc_json_parser_skip_constant@@Base+0xb0>
   19e94:	cmp	r0, #32
   19e98:	bhi	19ecc <flatcc_json_parser_skip_constant@@Base+0xcc>
   19e9c:	bne	19eb0 <flatcc_json_parser_skip_constant@@Base+0xb0>
   19ea0:	mov	r1, r6
   19ea4:	ldrb	r0, [r1, #1]!
   19ea8:	cmp	r0, #32
   19eac:	bhi	19e30 <flatcc_json_parser_skip_constant@@Base+0x30>
   19eb0:	mov	r0, r5
   19eb4:	mov	r1, r6
   19eb8:	mov	r2, r4
   19ebc:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   19ec0:	mov	r1, r0
   19ec4:	cmp	r0, r6
   19ec8:	bne	19e30 <flatcc_json_parser_skip_constant@@Base+0x30>
   19ecc:	mov	r0, r6
   19ed0:	pop	{r4, r5, r6, sl, fp, pc}

00019ed4 <flatcc_json_parser_match_constant@@Base>:
   19ed4:	push	{r4, r5, r6, r7, fp, lr}
   19ed8:	add	fp, sp, #16
   19edc:	ldr	r7, [fp, #8]
   19ee0:	mov	r4, r1
   19ee4:	sub	r1, r2, r1
   19ee8:	cmp	r1, r3
   19eec:	ble	1a000 <flatcc_json_parser_match_constant@@Base+0x12c>
   19ef0:	ldr	r1, [r0, #12]
   19ef4:	mov	r5, r2
   19ef8:	add	r6, r4, r3
   19efc:	cmp	r1, #0
   19f00:	beq	19f8c <flatcc_json_parser_match_constant@@Base+0xb8>
   19f04:	sub	r1, r5, r6
   19f08:	cmp	r1, #2
   19f0c:	blt	19f34 <flatcc_json_parser_match_constant@@Base+0x60>
   19f10:	ldrb	r1, [r6]
   19f14:	mov	r2, r6
   19f18:	cmp	r1, #32
   19f1c:	bhi	19f44 <flatcc_json_parser_match_constant@@Base+0x70>
   19f20:	bne	19f34 <flatcc_json_parser_match_constant@@Base+0x60>
   19f24:	mov	r2, r6
   19f28:	ldrb	r1, [r2, #1]!
   19f2c:	cmp	r1, #32
   19f30:	bhi	19f44 <flatcc_json_parser_match_constant@@Base+0x70>
   19f34:	mov	r1, r6
   19f38:	mov	r2, r5
   19f3c:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   19f40:	mov	r2, r0
   19f44:	cmp	r2, r5
   19f48:	beq	1a014 <flatcc_json_parser_match_constant@@Base+0x140>
   19f4c:	cmp	r2, r6
   19f50:	beq	1a024 <flatcc_json_parser_match_constant@@Base+0x150>
   19f54:	ldrsb	r0, [r2]
   19f58:	cmp	r0, #95	; 0x5f
   19f5c:	beq	19f7c <flatcc_json_parser_match_constant@@Base+0xa8>
   19f60:	cmn	r0, #1
   19f64:	ble	19f7c <flatcc_json_parser_match_constant@@Base+0xa8>
   19f68:	orr	r0, r0, #32
   19f6c:	sub	r0, r0, #97	; 0x61
   19f70:	uxtb	r0, r0
   19f74:	cmp	r0, #25
   19f78:	bhi	1a024 <flatcc_json_parser_match_constant@@Base+0x150>
   19f7c:	mov	r0, #1
   19f80:	str	r0, [r7]
   19f84:	mov	r0, r2
   19f88:	pop	{r4, r5, r6, r7, fp, pc}
   19f8c:	ldrb	r1, [r6]
   19f90:	cmp	r1, #92	; 0x5c
   19f94:	beq	1a04c <flatcc_json_parser_match_constant@@Base+0x178>
   19f98:	cmp	r1, #34	; 0x22
   19f9c:	beq	19fd0 <flatcc_json_parser_match_constant@@Base+0xfc>
   19fa0:	cmp	r1, #32
   19fa4:	bne	1a000 <flatcc_json_parser_match_constant@@Base+0x12c>
   19fa8:	add	r1, r4, r3
   19fac:	add	r1, r1, #1
   19fb0:	cmp	r5, r1
   19fb4:	beq	1a014 <flatcc_json_parser_match_constant@@Base+0x140>
   19fb8:	ldrb	r2, [r1], #1
   19fbc:	cmp	r2, #32
   19fc0:	beq	19fb0 <flatcc_json_parser_match_constant@@Base+0xdc>
   19fc4:	cmp	r2, #34	; 0x22
   19fc8:	bne	1a0b4 <flatcc_json_parser_match_constant@@Base+0x1e0>
   19fcc:	sub	r6, r1, #1
   19fd0:	mvn	r2, r6
   19fd4:	add	r1, r6, #1
   19fd8:	cmp	r2, #2
   19fdc:	blt	1a098 <flatcc_json_parser_match_constant@@Base+0x1c4>
   19fe0:	ldrb	r2, [r1]
   19fe4:	cmp	r2, #32
   19fe8:	bls	1a084 <flatcc_json_parser_match_constant@@Base+0x1b0>
   19fec:	mov	r2, r1
   19ff0:	mov	r0, #0
   19ff4:	str	r0, [r7]
   19ff8:	mov	r0, r2
   19ffc:	pop	{r4, r5, r6, r7, fp, pc}
   1a000:	mov	r0, #0
   1a004:	mov	r2, r4
   1a008:	str	r0, [r7]
   1a00c:	mov	r0, r2
   1a010:	pop	{r4, r5, r6, r7, fp, pc}
   1a014:	mov	r0, #0
   1a018:	str	r0, [r7]
   1a01c:	mov	r0, r5
   1a020:	pop	{r4, r5, r6, r7, fp, pc}
   1a024:	mov	r0, #0
   1a028:	str	r0, [r7]
   1a02c:	ldrb	r0, [r2]
   1a030:	cmp	r0, #44	; 0x2c
   1a034:	cmpne	r0, #93	; 0x5d
   1a038:	beq	1a00c <flatcc_json_parser_match_constant@@Base+0x138>
   1a03c:	cmp	r0, #125	; 0x7d
   1a040:	movne	r2, r4
   1a044:	mov	r0, r2
   1a048:	pop	{r4, r5, r6, r7, fp, pc}
   1a04c:	mov	r1, #0
   1a050:	str	r1, [r7]
   1a054:	ldr	r1, [r0, #24]
   1a058:	cmp	r1, #0
   1a05c:	bne	1a01c <flatcc_json_parser_match_constant@@Base+0x148>
   1a060:	str	r6, [r0, #36]	; 0x24
   1a064:	add	r3, r6, #1
   1a068:	mov	r1, #18
   1a06c:	ldr	r2, [r0, #4]
   1a070:	sub	r2, r3, r2
   1a074:	str	r2, [r0, #20]
   1a078:	str	r1, [r0, #24]
   1a07c:	mov	r0, r5
   1a080:	pop	{r4, r5, r6, r7, fp, pc}
   1a084:	bne	1a098 <flatcc_json_parser_match_constant@@Base+0x1c4>
   1a088:	ldrb	r2, [r6, #2]!
   1a08c:	cmp	r2, #32
   1a090:	mov	r2, r6
   1a094:	bhi	1a0a4 <flatcc_json_parser_match_constant@@Base+0x1d0>
   1a098:	mov	r2, #0
   1a09c:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1a0a0:	mov	r2, r0
   1a0a4:	mov	r0, #0
   1a0a8:	str	r0, [r7]
   1a0ac:	mov	r0, r2
   1a0b0:	pop	{r4, r5, r6, r7, fp, pc}
   1a0b4:	mov	r0, #1
   1a0b8:	sub	r2, r1, #1
   1a0bc:	str	r0, [r7]
   1a0c0:	mov	r0, r2
   1a0c4:	pop	{r4, r5, r6, r7, fp, pc}

0001a0c8 <flatcc_json_parser_unmatched_symbol@@Base>:
   1a0c8:	push	{r4, r5, r6, sl, fp, lr}
   1a0cc:	add	fp, sp, #16
   1a0d0:	mov	r6, r0
   1a0d4:	ldrb	r0, [r0, #8]
   1a0d8:	mov	r4, r2
   1a0dc:	tst	r0, #1
   1a0e0:	bne	1a114 <flatcc_json_parser_unmatched_symbol@@Base+0x4c>
   1a0e4:	ldr	r0, [r6, #24]
   1a0e8:	cmp	r0, #0
   1a0ec:	bne	1a2f8 <flatcc_json_parser_unmatched_symbol@@Base+0x230>
   1a0f0:	str	r1, [r6, #36]	; 0x24
   1a0f4:	add	r1, r1, #1
   1a0f8:	mov	r0, #13
   1a0fc:	ldr	r2, [r6, #4]
   1a100:	sub	r1, r1, r2
   1a104:	str	r1, [r6, #20]
   1a108:	str	r0, [r6, #24]
   1a10c:	mov	r0, r4
   1a110:	pop	{r4, r5, r6, sl, fp, pc}
   1a114:	ldr	r0, [r6, #12]
   1a118:	cmp	r0, #0
   1a11c:	beq	1a1f8 <flatcc_json_parser_unmatched_symbol@@Base+0x130>
   1a120:	cmp	r1, r4
   1a124:	beq	1a1a0 <flatcc_json_parser_unmatched_symbol@@Base+0xd8>
   1a128:	ldrb	r3, [r1]
   1a12c:	cmp	r3, #33	; 0x21
   1a130:	bcc	1a1a0 <flatcc_json_parser_unmatched_symbol@@Base+0xd8>
   1a134:	add	r0, r1, #1
   1a138:	uxtb	r2, r3
   1a13c:	cmp	r2, #46	; 0x2e
   1a140:	cmpne	r2, #95	; 0x5f
   1a144:	bne	1a164 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   1a148:	cmp	r4, r0
   1a14c:	beq	1a288 <flatcc_json_parser_unmatched_symbol@@Base+0x1c0>
   1a150:	ldrb	r3, [r0], #1
   1a154:	add	r1, r1, #1
   1a158:	cmp	r3, #33	; 0x21
   1a15c:	bcs	1a138 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   1a160:	b	1a28c <flatcc_json_parser_unmatched_symbol@@Base+0x1c4>
   1a164:	sxtb	r5, r3
   1a168:	cmp	r5, #0
   1a16c:	blt	1a148 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   1a170:	sub	r5, r3, #48	; 0x30
   1a174:	uxtb	r5, r5
   1a178:	cmp	r5, #9
   1a17c:	bls	1a148 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   1a180:	orr	r3, r3, #32
   1a184:	sub	r3, r3, #97	; 0x61
   1a188:	uxtb	r3, r3
   1a18c:	cmp	r3, #26
   1a190:	bcc	1a148 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   1a194:	sub	r1, r0, #1
   1a198:	cmp	r2, #46	; 0x2e
   1a19c:	beq	1a294 <flatcc_json_parser_unmatched_symbol@@Base+0x1cc>
   1a1a0:	mov	r2, r1
   1a1a4:	sub	r0, r4, r2
   1a1a8:	cmp	r0, #2
   1a1ac:	blt	1a2d0 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   1a1b0:	ldrb	r0, [r2]
   1a1b4:	cmp	r0, #32
   1a1b8:	bls	1a25c <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   1a1bc:	mov	r3, r2
   1a1c0:	cmp	r3, r4
   1a1c4:	beq	1a2ec <flatcc_json_parser_unmatched_symbol@@Base+0x224>
   1a1c8:	ldrb	r0, [r3]
   1a1cc:	cmp	r0, #58	; 0x3a
   1a1d0:	bne	1a2ec <flatcc_json_parser_unmatched_symbol@@Base+0x224>
   1a1d4:	add	r1, r3, #1
   1a1d8:	sub	r0, r4, r1
   1a1dc:	cmp	r0, #2
   1a1e0:	blt	1a334 <flatcc_json_parser_unmatched_symbol@@Base+0x26c>
   1a1e4:	ldrb	r0, [r1]
   1a1e8:	cmp	r0, #32
   1a1ec:	bls	1a324 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   1a1f0:	mov	r3, r1
   1a1f4:	b	1a344 <flatcc_json_parser_unmatched_symbol@@Base+0x27c>
   1a1f8:	cmp	r1, r4
   1a1fc:	beq	1a244 <flatcc_json_parser_unmatched_symbol@@Base+0x17c>
   1a200:	ldrb	r0, [r1]
   1a204:	cmp	r0, #92	; 0x5c
   1a208:	beq	1a224 <flatcc_json_parser_unmatched_symbol@@Base+0x15c>
   1a20c:	cmp	r0, #34	; 0x22
   1a210:	beq	1a274 <flatcc_json_parser_unmatched_symbol@@Base+0x1ac>
   1a214:	add	r1, r1, #1
   1a218:	cmp	r1, r4
   1a21c:	bne	1a200 <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   1a220:	b	1a240 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   1a224:	sub	r0, r4, r1
   1a228:	cmp	r0, #2
   1a22c:	blt	1a244 <flatcc_json_parser_unmatched_symbol@@Base+0x17c>
   1a230:	add	r1, r1, #1
   1a234:	add	r1, r1, #1
   1a238:	cmp	r1, r4
   1a23c:	bne	1a200 <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   1a240:	mov	r1, r4
   1a244:	ldr	r0, [r6, #24]
   1a248:	mov	r2, r4
   1a24c:	cmp	r0, #0
   1a250:	bne	1a2c4 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   1a254:	mov	r0, #20
   1a258:	b	1a2a8 <flatcc_json_parser_unmatched_symbol@@Base+0x1e0>
   1a25c:	bne	1a2d0 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   1a260:	mov	r3, r2
   1a264:	ldrb	r0, [r3, #1]!
   1a268:	cmp	r0, #32
   1a26c:	bls	1a2d0 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   1a270:	b	1a2e4 <flatcc_json_parser_unmatched_symbol@@Base+0x21c>
   1a274:	add	r2, r1, #1
   1a278:	sub	r0, r4, r2
   1a27c:	cmp	r0, #2
   1a280:	bge	1a1b0 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   1a284:	b	1a2d0 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   1a288:	mov	r1, r4
   1a28c:	cmp	r2, #46	; 0x2e
   1a290:	bne	1a1a0 <flatcc_json_parser_unmatched_symbol@@Base+0xd8>
   1a294:	ldr	r0, [r6, #24]
   1a298:	mov	r2, r4
   1a29c:	cmp	r0, #0
   1a2a0:	bne	1a2c4 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   1a2a4:	mov	r0, #5
   1a2a8:	str	r1, [r6, #36]	; 0x24
   1a2ac:	add	r1, r1, #1
   1a2b0:	ldr	r2, [r6, #4]
   1a2b4:	sub	r1, r1, r2
   1a2b8:	mov	r2, r4
   1a2bc:	str	r1, [r6, #20]
   1a2c0:	str	r0, [r6, #24]
   1a2c4:	sub	r0, r4, r2
   1a2c8:	cmp	r0, #2
   1a2cc:	bge	1a1b0 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   1a2d0:	mov	r1, r2
   1a2d4:	mov	r0, r6
   1a2d8:	mov	r2, r4
   1a2dc:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1a2e0:	mov	r3, r0
   1a2e4:	cmp	r3, r4
   1a2e8:	bne	1a1c8 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   1a2ec:	ldr	r0, [r6, #24]
   1a2f0:	cmp	r0, #0
   1a2f4:	beq	1a300 <flatcc_json_parser_unmatched_symbol@@Base+0x238>
   1a2f8:	mov	r0, r4
   1a2fc:	pop	{r4, r5, r6, sl, fp, pc}
   1a300:	str	r3, [r6, #36]	; 0x24
   1a304:	add	r2, r3, #1
   1a308:	mov	r0, #4
   1a30c:	ldr	r1, [r6, #4]
   1a310:	sub	r1, r2, r1
   1a314:	str	r1, [r6, #20]
   1a318:	str	r0, [r6, #24]
   1a31c:	mov	r0, r4
   1a320:	pop	{r4, r5, r6, sl, fp, pc}
   1a324:	bne	1a334 <flatcc_json_parser_unmatched_symbol@@Base+0x26c>
   1a328:	ldrb	r0, [r3, #2]!
   1a32c:	cmp	r0, #32
   1a330:	bhi	1a344 <flatcc_json_parser_unmatched_symbol@@Base+0x27c>
   1a334:	mov	r0, r6
   1a338:	mov	r2, r4
   1a33c:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1a340:	mov	r3, r0
   1a344:	mov	r0, r6
   1a348:	mov	r1, r3
   1a34c:	mov	r2, r4
   1a350:	pop	{r4, r5, r6, sl, fp, lr}
   1a354:	b	1a358 <flatcc_json_parser_generic_json@@Base>

0001a358 <flatcc_json_parser_generic_json@@Base>:
   1a358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a35c:	add	fp, sp, #28
   1a360:	sub	sp, sp, #540	; 0x21c
   1a364:	mov	r7, r1
   1a368:	cmp	r1, r2
   1a36c:	beq	1b04c <flatcc_json_parser_generic_json@@Base+0xcf4>
   1a370:	mov	r5, r0
   1a374:	add	r0, r2, #1
   1a378:	add	r1, sp, #24
   1a37c:	mov	r6, r2
   1a380:	mov	r8, #0
   1a384:	str	r0, [sp, #4]
   1a388:	add	r0, r5, #36	; 0x24
   1a38c:	sub	sl, r1, #1
   1a390:	add	r9, r5, #24
   1a394:	str	r0, [sp, #16]
   1a398:	add	r0, r5, #20
   1a39c:	str	r0, [sp, #12]
   1a3a0:	add	r0, r5, #4
   1a3a4:	str	r0, [sp, #8]
   1a3a8:	mov	r0, r1
   1a3ac:	cmp	r8, #0
   1a3b0:	beq	1a698 <flatcc_json_parser_generic_json@@Base+0x340>
   1a3b4:	ldrb	r0, [r0, #-1]
   1a3b8:	cmp	r0, #125	; 0x7d
   1a3bc:	bne	1a698 <flatcc_json_parser_generic_json@@Base+0x340>
   1a3c0:	ldrb	r0, [r7]
   1a3c4:	cmp	r0, #46	; 0x2e
   1a3c8:	beq	1a444 <flatcc_json_parser_generic_json@@Base+0xec>
   1a3cc:	cmp	r0, #34	; 0x22
   1a3d0:	bne	1a4d8 <flatcc_json_parser_generic_json@@Base+0x180>
   1a3d4:	mov	r0, #0
   1a3d8:	mov	r2, r6
   1a3dc:	str	r0, [r5, #12]
   1a3e0:	add	r0, r7, #1
   1a3e4:	cmp	r0, r6
   1a3e8:	beq	1a48c <flatcc_json_parser_generic_json@@Base+0x134>
   1a3ec:	ldrb	r1, [r0]
   1a3f0:	cmp	r1, #92	; 0x5c
   1a3f4:	beq	1a410 <flatcc_json_parser_generic_json@@Base+0xb8>
   1a3f8:	cmp	r1, #34	; 0x22
   1a3fc:	beq	1a578 <flatcc_json_parser_generic_json@@Base+0x220>
   1a400:	add	r0, r0, #1
   1a404:	cmp	r0, r6
   1a408:	bne	1a3ec <flatcc_json_parser_generic_json@@Base+0x94>
   1a40c:	b	1a42c <flatcc_json_parser_generic_json@@Base+0xd4>
   1a410:	sub	r1, r6, r0
   1a414:	cmp	r1, #2
   1a418:	blt	1a5d4 <flatcc_json_parser_generic_json@@Base+0x27c>
   1a41c:	add	r0, r0, #1
   1a420:	add	r0, r0, #1
   1a424:	cmp	r0, r6
   1a428:	bne	1a3ec <flatcc_json_parser_generic_json@@Base+0x94>
   1a42c:	mov	r2, r6
   1a430:	ldr	r0, [r9]
   1a434:	mov	r1, r6
   1a438:	cmp	r0, #0
   1a43c:	bne	1a5e8 <flatcc_json_parser_generic_json@@Base+0x290>
   1a440:	b	1a49c <flatcc_json_parser_generic_json@@Base+0x144>
   1a444:	ldr	r0, [r9]
   1a448:	cmp	r0, #0
   1a44c:	bne	1a478 <flatcc_json_parser_generic_json@@Base+0x120>
   1a450:	mov	r0, #5
   1a454:	add	r1, r7, #1
   1a458:	str	r0, [r9]
   1a45c:	ldr	r0, [sp, #8]
   1a460:	ldr	r0, [r0]
   1a464:	sub	r0, r1, r0
   1a468:	ldr	r1, [sp, #12]
   1a46c:	str	r0, [r1]
   1a470:	ldr	r0, [sp, #16]
   1a474:	str	r7, [r0]
   1a478:	ldr	r0, [r5, #12]
   1a47c:	mov	r2, r6
   1a480:	mov	r1, r6
   1a484:	cmp	r0, #0
   1a488:	bne	1a5e8 <flatcc_json_parser_generic_json@@Base+0x290>
   1a48c:	ldr	r0, [r9]
   1a490:	mov	r1, r6
   1a494:	cmp	r0, #0
   1a498:	bne	1a5e8 <flatcc_json_parser_generic_json@@Base+0x290>
   1a49c:	mov	r0, #20
   1a4a0:	add	r1, r2, #1
   1a4a4:	str	r0, [r9]
   1a4a8:	ldr	r0, [sp, #8]
   1a4ac:	ldr	r0, [r0]
   1a4b0:	sub	r0, r1, r0
   1a4b4:	ldr	r1, [sp, #12]
   1a4b8:	str	r0, [r1]
   1a4bc:	ldr	r0, [sp, #16]
   1a4c0:	str	r2, [r0]
   1a4c4:	mov	r1, r6
   1a4c8:	sub	r0, r6, r1
   1a4cc:	cmp	r0, #2
   1a4d0:	bge	1a5f4 <flatcc_json_parser_generic_json@@Base+0x29c>
   1a4d4:	b	1a65c <flatcc_json_parser_generic_json@@Base+0x304>
   1a4d8:	mov	r0, #1
   1a4dc:	cmp	r7, r6
   1a4e0:	mov	r1, r6
   1a4e4:	str	r0, [r5, #12]
   1a4e8:	beq	1a5e8 <flatcc_json_parser_generic_json@@Base+0x290>
   1a4ec:	ldrb	r2, [r7]
   1a4f0:	cmp	r2, #33	; 0x21
   1a4f4:	bcc	1a564 <flatcc_json_parser_generic_json@@Base+0x20c>
   1a4f8:	add	r0, r7, #1
   1a4fc:	uxtb	r1, r2
   1a500:	cmp	r1, #46	; 0x2e
   1a504:	cmpne	r1, #95	; 0x5f
   1a508:	bne	1a528 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1a50c:	cmp	r6, r0
   1a510:	beq	1a58c <flatcc_json_parser_generic_json@@Base+0x234>
   1a514:	ldrb	r2, [r0], #1
   1a518:	add	r7, r7, #1
   1a51c:	cmp	r2, #33	; 0x21
   1a520:	bcs	1a4fc <flatcc_json_parser_generic_json@@Base+0x1a4>
   1a524:	b	1a590 <flatcc_json_parser_generic_json@@Base+0x238>
   1a528:	sxtb	r3, r2
   1a52c:	cmp	r3, #0
   1a530:	blt	1a50c <flatcc_json_parser_generic_json@@Base+0x1b4>
   1a534:	sub	r3, r2, #48	; 0x30
   1a538:	uxtb	r3, r3
   1a53c:	cmp	r3, #9
   1a540:	bls	1a50c <flatcc_json_parser_generic_json@@Base+0x1b4>
   1a544:	orr	r2, r2, #32
   1a548:	sub	r2, r2, #97	; 0x61
   1a54c:	uxtb	r2, r2
   1a550:	cmp	r2, #26
   1a554:	bcc	1a50c <flatcc_json_parser_generic_json@@Base+0x1b4>
   1a558:	sub	r7, r0, #1
   1a55c:	cmp	r1, #46	; 0x2e
   1a560:	beq	1a598 <flatcc_json_parser_generic_json@@Base+0x240>
   1a564:	mov	r1, r7
   1a568:	sub	r0, r6, r1
   1a56c:	cmp	r0, #2
   1a570:	bge	1a5f4 <flatcc_json_parser_generic_json@@Base+0x29c>
   1a574:	b	1a65c <flatcc_json_parser_generic_json@@Base+0x304>
   1a578:	add	r1, r0, #1
   1a57c:	sub	r0, r6, r1
   1a580:	cmp	r0, #2
   1a584:	bge	1a5f4 <flatcc_json_parser_generic_json@@Base+0x29c>
   1a588:	b	1a65c <flatcc_json_parser_generic_json@@Base+0x304>
   1a58c:	mov	r7, r6
   1a590:	cmp	r1, #46	; 0x2e
   1a594:	bne	1a564 <flatcc_json_parser_generic_json@@Base+0x20c>
   1a598:	ldr	r0, [r9]
   1a59c:	mov	r1, r6
   1a5a0:	cmp	r0, #0
   1a5a4:	bne	1a5e8 <flatcc_json_parser_generic_json@@Base+0x290>
   1a5a8:	mov	r0, #5
   1a5ac:	add	r1, r7, #1
   1a5b0:	str	r0, [r9]
   1a5b4:	ldr	r0, [sp, #8]
   1a5b8:	ldr	r0, [r0]
   1a5bc:	sub	r0, r1, r0
   1a5c0:	ldr	r1, [sp, #12]
   1a5c4:	str	r0, [r1]
   1a5c8:	ldr	r0, [sp, #16]
   1a5cc:	str	r7, [r0]
   1a5d0:	b	1a4c4 <flatcc_json_parser_generic_json@@Base+0x16c>
   1a5d4:	mov	r2, r0
   1a5d8:	ldr	r0, [r9]
   1a5dc:	mov	r1, r6
   1a5e0:	cmp	r0, #0
   1a5e4:	beq	1a49c <flatcc_json_parser_generic_json@@Base+0x144>
   1a5e8:	sub	r0, r6, r1
   1a5ec:	cmp	r0, #2
   1a5f0:	blt	1a65c <flatcc_json_parser_generic_json@@Base+0x304>
   1a5f4:	ldrb	r0, [r1]
   1a5f8:	cmp	r0, #32
   1a5fc:	bls	1a648 <flatcc_json_parser_generic_json@@Base+0x2f0>
   1a600:	mov	r7, r1
   1a604:	cmp	r7, r6
   1a608:	beq	1b0d8 <flatcc_json_parser_generic_json@@Base+0xd80>
   1a60c:	ldrb	r0, [r7]
   1a610:	cmp	r0, #58	; 0x3a
   1a614:	bne	1b0f0 <flatcc_json_parser_generic_json@@Base+0xd98>
   1a618:	add	r1, r7, #1
   1a61c:	sub	r0, r6, r1
   1a620:	cmp	r0, #2
   1a624:	blt	1a688 <flatcc_json_parser_generic_json@@Base+0x330>
   1a628:	ldrb	r2, [r1]
   1a62c:	cmp	r2, #32
   1a630:	bls	1a678 <flatcc_json_parser_generic_json@@Base+0x320>
   1a634:	mov	r7, r1
   1a638:	sub	r0, r2, #48	; 0x30
   1a63c:	cmp	r0, #10
   1a640:	bcc	1a6a8 <flatcc_json_parser_generic_json@@Base+0x350>
   1a644:	b	1a740 <flatcc_json_parser_generic_json@@Base+0x3e8>
   1a648:	bne	1a65c <flatcc_json_parser_generic_json@@Base+0x304>
   1a64c:	mov	r7, r1
   1a650:	ldrb	r0, [r7, #1]!
   1a654:	cmp	r0, #32
   1a658:	bhi	1a66c <flatcc_json_parser_generic_json@@Base+0x314>
   1a65c:	mov	r0, r5
   1a660:	mov	r2, r6
   1a664:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1a668:	mov	r7, r0
   1a66c:	cmp	r7, r6
   1a670:	bne	1a60c <flatcc_json_parser_generic_json@@Base+0x2b4>
   1a674:	b	1b0d8 <flatcc_json_parser_generic_json@@Base+0xd80>
   1a678:	bne	1a688 <flatcc_json_parser_generic_json@@Base+0x330>
   1a67c:	ldrb	r2, [r7, #2]!
   1a680:	cmp	r2, #32
   1a684:	bhi	1a69c <flatcc_json_parser_generic_json@@Base+0x344>
   1a688:	mov	r0, r5
   1a68c:	mov	r2, r6
   1a690:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1a694:	mov	r7, r0
   1a698:	ldrb	r2, [r7]
   1a69c:	sub	r0, r2, #48	; 0x30
   1a6a0:	cmp	r0, #10
   1a6a4:	bcs	1a740 <flatcc_json_parser_generic_json@@Base+0x3e8>
   1a6a8:	cmp	r7, r6
   1a6ac:	beq	1ad1c <flatcc_json_parser_generic_json@@Base+0x9c4>
   1a6b0:	cmp	r2, #45	; 0x2d
   1a6b4:	bne	1a6c8 <flatcc_json_parser_generic_json@@Base+0x370>
   1a6b8:	add	r7, r7, #1
   1a6bc:	cmp	r7, r6
   1a6c0:	beq	1aae4 <flatcc_json_parser_generic_json@@Base+0x78c>
   1a6c4:	ldrb	r2, [r7]
   1a6c8:	cmp	r2, #48	; 0x30
   1a6cc:	bne	1a75c <flatcc_json_parser_generic_json@@Base+0x404>
   1a6d0:	add	r4, r7, #1
   1a6d4:	cmp	r4, r6
   1a6d8:	mov	r1, r6
   1a6dc:	beq	1ad10 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1a6e0:	ldrb	r0, [r4]
   1a6e4:	cmp	r0, #46	; 0x2e
   1a6e8:	bne	1a984 <flatcc_json_parser_generic_json@@Base+0x62c>
   1a6ec:	mov	r0, r4
   1a6f0:	ldrb	r1, [r0, #1]!
   1a6f4:	sub	r1, r1, #48	; 0x30
   1a6f8:	uxtb	r1, r1
   1a6fc:	cmp	r1, #10
   1a700:	bcc	1a950 <flatcc_json_parser_generic_json@@Base+0x5f8>
   1a704:	ldr	r1, [r9]
   1a708:	cmp	r1, #0
   1a70c:	bne	1ad1c <flatcc_json_parser_generic_json@@Base+0x9c4>
   1a710:	mov	r1, #6
   1a714:	add	r2, r0, #1
   1a718:	mov	r4, r6
   1a71c:	str	r1, [r9]
   1a720:	ldr	r1, [sp, #8]
   1a724:	ldr	r1, [r1]
   1a728:	sub	r1, r2, r1
   1a72c:	ldr	r2, [sp, #12]
   1a730:	str	r1, [r2]
   1a734:	ldr	r1, [sp, #16]
   1a738:	str	r0, [r1]
   1a73c:	b	1ad20 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1a740:	cmp	r2, #90	; 0x5a
   1a744:	bgt	1a7a4 <flatcc_json_parser_generic_json@@Base+0x44c>
   1a748:	cmp	r2, #34	; 0x22
   1a74c:	beq	1a828 <flatcc_json_parser_generic_json@@Base+0x4d0>
   1a750:	cmp	r2, #45	; 0x2d
   1a754:	beq	1a6a8 <flatcc_json_parser_generic_json@@Base+0x350>
   1a758:	b	1a88c <flatcc_json_parser_generic_json@@Base+0x534>
   1a75c:	sub	r0, r2, #49	; 0x31
   1a760:	uxtb	r0, r0
   1a764:	cmp	r0, #8
   1a768:	bls	1a7f4 <flatcc_json_parser_generic_json@@Base+0x49c>
   1a76c:	ldr	r0, [r9]
   1a770:	cmp	r0, #0
   1a774:	bne	1ad1c <flatcc_json_parser_generic_json@@Base+0x9c4>
   1a778:	mov	r0, #6
   1a77c:	add	r1, r7, #1
   1a780:	str	r0, [r9]
   1a784:	ldr	r0, [sp, #8]
   1a788:	ldr	r0, [r0]
   1a78c:	sub	r0, r1, r0
   1a790:	ldr	r1, [sp, #12]
   1a794:	str	r0, [r1]
   1a798:	ldr	r0, [sp, #16]
   1a79c:	str	r7, [r0]
   1a7a0:	b	1ad1c <flatcc_json_parser_generic_json@@Base+0x9c4>
   1a7a4:	cmp	r2, #91	; 0x5b
   1a7a8:	beq	1a84c <flatcc_json_parser_generic_json@@Base+0x4f4>
   1a7ac:	cmp	r2, #123	; 0x7b
   1a7b0:	bne	1a88c <flatcc_json_parser_generic_json@@Base+0x534>
   1a7b4:	cmp	r8, #512	; 0x200
   1a7b8:	beq	1b104 <flatcc_json_parser_generic_json@@Base+0xdac>
   1a7bc:	add	r0, sp, #24
   1a7c0:	mov	r1, #125	; 0x7d
   1a7c4:	strb	r1, [r0, r8]
   1a7c8:	add	r1, r7, #1
   1a7cc:	sub	r0, r6, r1
   1a7d0:	cmp	r0, #2
   1a7d4:	blt	1ab58 <flatcc_json_parser_generic_json@@Base+0x800>
   1a7d8:	ldrb	r0, [r1]
   1a7dc:	cmp	r0, #32
   1a7e0:	bls	1ab48 <flatcc_json_parser_generic_json@@Base+0x7f0>
   1a7e4:	mov	r7, r1
   1a7e8:	cmp	r7, r6
   1a7ec:	bne	1ab70 <flatcc_json_parser_generic_json@@Base+0x818>
   1a7f0:	b	1b0c8 <flatcc_json_parser_generic_json@@Base+0xd70>
   1a7f4:	add	r0, r7, #1
   1a7f8:	cmp	r6, r0
   1a7fc:	beq	1aaf8 <flatcc_json_parser_generic_json@@Base+0x7a0>
   1a800:	ldrb	r1, [r0], #1
   1a804:	sub	r1, r1, #48	; 0x30
   1a808:	uxtb	r1, r1
   1a80c:	cmp	r1, #10
   1a810:	bcc	1a7f8 <flatcc_json_parser_generic_json@@Base+0x4a0>
   1a814:	sub	r4, r0, #1
   1a818:	cmp	r4, r6
   1a81c:	mov	r1, r6
   1a820:	bne	1a6e0 <flatcc_json_parser_generic_json@@Base+0x388>
   1a824:	b	1ad10 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1a828:	cmp	r7, r6
   1a82c:	beq	1ab0c <flatcc_json_parser_generic_json@@Base+0x7b4>
   1a830:	add	r0, r7, #1
   1a834:	mov	r1, r6
   1a838:	add	r4, sp, #20
   1a83c:	mov	r7, #17
   1a840:	cmp	r0, r6
   1a844:	bne	1ac08 <flatcc_json_parser_generic_json@@Base+0x8b0>
   1a848:	b	1ace8 <flatcc_json_parser_generic_json@@Base+0x990>
   1a84c:	cmp	r8, #512	; 0x200
   1a850:	beq	1b104 <flatcc_json_parser_generic_json@@Base+0xdac>
   1a854:	add	r0, sp, #24
   1a858:	mov	r1, #93	; 0x5d
   1a85c:	strb	r1, [r0, r8]
   1a860:	add	r1, r7, #1
   1a864:	sub	r0, r6, r1
   1a868:	cmp	r0, #2
   1a86c:	blt	1ab98 <flatcc_json_parser_generic_json@@Base+0x840>
   1a870:	ldrb	r0, [r1]
   1a874:	cmp	r0, #32
   1a878:	bls	1ab88 <flatcc_json_parser_generic_json@@Base+0x830>
   1a87c:	mov	r7, r1
   1a880:	cmp	r7, r6
   1a884:	bne	1abb0 <flatcc_json_parser_generic_json@@Base+0x858>
   1a888:	b	1b0c8 <flatcc_json_parser_generic_json@@Base+0xd70>
   1a88c:	cmp	r7, r6
   1a890:	mov	r4, r6
   1a894:	beq	1a944 <flatcc_json_parser_generic_json@@Base+0x5ec>
   1a898:	mov	r4, r7
   1a89c:	sxtb	r0, r2
   1a8a0:	cmp	r0, #0
   1a8a4:	blt	1a934 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1a8a8:	uxtb	r0, r2
   1a8ac:	cmp	r0, #95	; 0x5f
   1a8b0:	cmpne	r0, #46	; 0x2e
   1a8b4:	beq	1a934 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1a8b8:	sub	r1, r2, #48	; 0x30
   1a8bc:	uxtb	r1, r1
   1a8c0:	cmp	r1, #9
   1a8c4:	bls	1a934 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1a8c8:	orr	r1, r2, #32
   1a8cc:	sub	r1, r1, #97	; 0x61
   1a8d0:	uxtb	r1, r1
   1a8d4:	cmp	r1, #25
   1a8d8:	bls	1a934 <flatcc_json_parser_generic_json@@Base+0x5dc>
   1a8dc:	sub	r1, r6, r4
   1a8e0:	cmp	r1, #2
   1a8e4:	blt	1a904 <flatcc_json_parser_generic_json@@Base+0x5ac>
   1a8e8:	cmp	r0, #32
   1a8ec:	bhi	1a944 <flatcc_json_parser_generic_json@@Base+0x5ec>
   1a8f0:	bne	1a904 <flatcc_json_parser_generic_json@@Base+0x5ac>
   1a8f4:	mov	r0, r4
   1a8f8:	ldrb	r1, [r0, #1]!
   1a8fc:	cmp	r1, #32
   1a900:	bhi	1a938 <flatcc_json_parser_generic_json@@Base+0x5e0>
   1a904:	mov	r0, r5
   1a908:	mov	r1, r4
   1a90c:	mov	r2, r6
   1a910:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1a914:	cmp	r0, r4
   1a918:	bne	1a938 <flatcc_json_parser_generic_json@@Base+0x5e0>
   1a91c:	b	1a944 <flatcc_json_parser_generic_json@@Base+0x5ec>
   1a920:	ldrb	r2, [r0]
   1a924:	mov	r4, r0
   1a928:	sxtb	r0, r2
   1a92c:	cmp	r0, #0
   1a930:	bge	1a8a8 <flatcc_json_parser_generic_json@@Base+0x550>
   1a934:	add	r0, r4, #1
   1a938:	cmp	r0, r6
   1a93c:	bne	1a920 <flatcc_json_parser_generic_json@@Base+0x5c8>
   1a940:	mov	r4, r6
   1a944:	cmp	r7, r4
   1a948:	bne	1ad20 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1a94c:	b	1b118 <flatcc_json_parser_generic_json@@Base+0xdc0>
   1a950:	add	r4, r4, #2
   1a954:	mov	r1, r6
   1a958:	cmp	r4, r6
   1a95c:	beq	1ad10 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1a960:	ldrb	r0, [r4]
   1a964:	sub	r1, r0, #48	; 0x30
   1a968:	uxtb	r1, r1
   1a96c:	cmp	r1, #9
   1a970:	bhi	1a984 <flatcc_json_parser_generic_json@@Base+0x62c>
   1a974:	add	r4, r4, #1
   1a978:	cmp	r6, r4
   1a97c:	bne	1a960 <flatcc_json_parser_generic_json@@Base+0x608>
   1a980:	b	1aaf8 <flatcc_json_parser_generic_json@@Base+0x7a0>
   1a984:	cmp	r4, r6
   1a988:	mov	r1, r6
   1a98c:	beq	1ad10 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1a990:	orr	r1, r0, #32
   1a994:	cmp	r1, #101	; 0x65
   1a998:	bne	1a9f8 <flatcc_json_parser_generic_json@@Base+0x6a0>
   1a99c:	add	r0, r4, #1
   1a9a0:	cmp	r0, r6
   1a9a4:	beq	1aae4 <flatcc_json_parser_generic_json@@Base+0x78c>
   1a9a8:	ldrb	r1, [r0]
   1a9ac:	cmp	r1, #45	; 0x2d
   1a9b0:	cmpne	r1, #43	; 0x2b
   1a9b4:	addeq	r0, r4, #2
   1a9b8:	cmp	r0, r6
   1a9bc:	beq	1a704 <flatcc_json_parser_generic_json@@Base+0x3ac>
   1a9c0:	ldrb	r1, [r0]
   1a9c4:	sub	r1, r1, #48	; 0x30
   1a9c8:	uxtb	r1, r1
   1a9cc:	cmp	r1, #9
   1a9d0:	bhi	1a704 <flatcc_json_parser_generic_json@@Base+0x3ac>
   1a9d4:	add	r1, r0, #1
   1a9d8:	cmp	r6, r1
   1a9dc:	beq	1aaf8 <flatcc_json_parser_generic_json@@Base+0x7a0>
   1a9e0:	ldrb	r0, [r1], #1
   1a9e4:	sub	r2, r0, #48	; 0x30
   1a9e8:	uxtb	r2, r2
   1a9ec:	cmp	r2, #10
   1a9f0:	bcc	1a9d8 <flatcc_json_parser_generic_json@@Base+0x680>
   1a9f4:	sub	r4, r1, #1
   1a9f8:	cmp	r4, r6
   1a9fc:	mov	r1, r6
   1aa00:	beq	1ad10 <flatcc_json_parser_generic_json@@Base+0x9b8>
   1aa04:	sub	r2, r0, #9
   1aa08:	cmp	r2, #49	; 0x31
   1aa0c:	bhi	1acfc <flatcc_json_parser_generic_json@@Base+0x9a4>
   1aa10:	add	r0, pc, #4
   1aa14:	mov	r1, r4
   1aa18:	ldr	pc, [r0, r2, lsl #2]
   1aa1c:	andeq	sl, r1, r0, lsr #26
   1aa20:	andeq	sl, r1, r0, lsr #26
   1aa24:	andeq	sl, r1, r0, lsr #26
   1aa28:	andeq	sl, r1, r0, lsl sp
   1aa2c:	andeq	sl, r1, r0, lsr #26
   1aa30:	andeq	sl, r1, r0, lsl sp
   1aa34:	andeq	sl, r1, r0, lsl sp
   1aa38:	andeq	sl, r1, r0, lsl sp
   1aa3c:	andeq	sl, r1, r0, lsl sp
   1aa40:	andeq	sl, r1, r0, lsl sp
   1aa44:	andeq	sl, r1, r0, lsl sp
   1aa48:	andeq	sl, r1, r0, lsl sp
   1aa4c:	andeq	sl, r1, r0, lsl sp
   1aa50:	andeq	sl, r1, r0, lsl sp
   1aa54:	andeq	sl, r1, r0, lsl sp
   1aa58:	andeq	sl, r1, r0, lsl sp
   1aa5c:	andeq	sl, r1, r0, lsl sp
   1aa60:	andeq	sl, r1, r0, lsl sp
   1aa64:	andeq	sl, r1, r0, lsl sp
   1aa68:	andeq	sl, r1, r0, lsl sp
   1aa6c:	andeq	sl, r1, r0, lsl sp
   1aa70:	andeq	sl, r1, r0, lsl sp
   1aa74:	andeq	sl, r1, r0, lsl sp
   1aa78:	andeq	sl, r1, r0, lsr #26
   1aa7c:	andeq	sl, r1, r0, lsl sp
   1aa80:	andeq	sl, r1, r0, lsl sp
   1aa84:	andeq	sl, r1, r0, lsl sp
   1aa88:	andeq	sl, r1, r0, lsl sp
   1aa8c:	andeq	sl, r1, r0, lsl sp
   1aa90:	andeq	sl, r1, r0, lsl sp
   1aa94:	andeq	sl, r1, r0, lsl sp
   1aa98:	andeq	sl, r1, r0, lsl sp
   1aa9c:	andeq	sl, r1, r0, lsl sp
   1aaa0:	andeq	sl, r1, r0, lsl sp
   1aaa4:	andeq	sl, r1, r0, lsl sp
   1aaa8:	andeq	sl, r1, r0, lsr #26
   1aaac:	andeq	sl, r1, r0, lsl sp
   1aab0:	andeq	sl, r1, r0, lsl sp
   1aab4:	andeq	sl, r1, r0, lsl sp
   1aab8:	andeq	sl, r1, r0, lsl sp
   1aabc:	andeq	sl, r1, r0, lsl sp
   1aac0:	andeq	sl, r1, r0, lsl sp
   1aac4:	andeq	sl, r1, r0, lsl sp
   1aac8:	andeq	sl, r1, r0, lsl sp
   1aacc:	andeq	sl, r1, r0, lsl sp
   1aad0:	andeq	sl, r1, r0, lsl sp
   1aad4:	andeq	sl, r1, r0, lsl sp
   1aad8:	andeq	sl, r1, r0, lsl sp
   1aadc:	andeq	sl, r1, r0, lsl sp
   1aae0:	andeq	sl, r1, r0, lsr #26
   1aae4:	ldr	r0, [r9]
   1aae8:	cmp	r0, #0
   1aaec:	bne	1ad1c <flatcc_json_parser_generic_json@@Base+0x9c4>
   1aaf0:	mov	r0, #6
   1aaf4:	b	1ab1c <flatcc_json_parser_generic_json@@Base+0x7c4>
   1aaf8:	mov	r1, r6
   1aafc:	ldr	r0, [r9]
   1ab00:	cmp	r0, #0
   1ab04:	bne	1ad1c <flatcc_json_parser_generic_json@@Base+0x9c4>
   1ab08:	b	1b01c <flatcc_json_parser_generic_json@@Base+0xcc4>
   1ab0c:	ldr	r0, [r9]
   1ab10:	cmp	r0, #0
   1ab14:	bne	1ad1c <flatcc_json_parser_generic_json@@Base+0x9c4>
   1ab18:	mov	r0, #16
   1ab1c:	str	r0, [r9]
   1ab20:	ldr	r0, [sp, #8]
   1ab24:	ldr	r1, [sp, #4]
   1ab28:	mov	r4, r6
   1ab2c:	ldr	r0, [r0]
   1ab30:	sub	r0, r1, r0
   1ab34:	ldr	r1, [sp, #12]
   1ab38:	str	r0, [r1]
   1ab3c:	ldr	r0, [sp, #16]
   1ab40:	str	r6, [r0]
   1ab44:	b	1ad20 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1ab48:	bne	1ab58 <flatcc_json_parser_generic_json@@Base+0x800>
   1ab4c:	ldrb	r0, [r7, #2]!
   1ab50:	cmp	r0, #32
   1ab54:	bhi	1ab68 <flatcc_json_parser_generic_json@@Base+0x810>
   1ab58:	mov	r0, r5
   1ab5c:	mov	r2, r6
   1ab60:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1ab64:	mov	r7, r0
   1ab68:	cmp	r7, r6
   1ab6c:	beq	1b0c8 <flatcc_json_parser_generic_json@@Base+0xd70>
   1ab70:	ldrb	r0, [r7]
   1ab74:	add	r8, r8, #1
   1ab78:	cmp	r0, #125	; 0x7d
   1ab7c:	mov	r4, r7
   1ab80:	bne	1b008 <flatcc_json_parser_generic_json@@Base+0xcb0>
   1ab84:	b	1ad20 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1ab88:	bne	1ab98 <flatcc_json_parser_generic_json@@Base+0x840>
   1ab8c:	ldrb	r0, [r7, #2]!
   1ab90:	cmp	r0, #32
   1ab94:	bhi	1aba8 <flatcc_json_parser_generic_json@@Base+0x850>
   1ab98:	mov	r0, r5
   1ab9c:	mov	r2, r6
   1aba0:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1aba4:	mov	r7, r0
   1aba8:	cmp	r7, r6
   1abac:	beq	1b0c8 <flatcc_json_parser_generic_json@@Base+0xd70>
   1abb0:	ldrb	r0, [r7]
   1abb4:	add	r8, r8, #1
   1abb8:	cmp	r0, #93	; 0x5d
   1abbc:	mov	r4, r7
   1abc0:	beq	1ad20 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1abc4:	b	1b008 <flatcc_json_parser_generic_json@@Base+0xcb0>
   1abc8:	ldr	r0, [r9]
   1abcc:	mov	r1, r6
   1abd0:	cmp	r0, #0
   1abd4:	bne	1aca8 <flatcc_json_parser_generic_json@@Base+0x950>
   1abd8:	mov	r0, #20
   1abdc:	ldr	r1, [sp, #4]
   1abe0:	str	r0, [r9]
   1abe4:	ldr	r0, [sp, #8]
   1abe8:	ldr	r0, [r0]
   1abec:	sub	r0, r1, r0
   1abf0:	ldr	r1, [sp, #12]
   1abf4:	str	r0, [r1]
   1abf8:	ldr	r0, [sp, #16]
   1abfc:	mov	r1, r6
   1ac00:	str	r6, [r0]
   1ac04:	b	1aca8 <flatcc_json_parser_generic_json@@Base+0x950>
   1ac08:	ldrb	r1, [r0]
   1ac0c:	cmp	r1, #34	; 0x22
   1ac10:	beq	1acc8 <flatcc_json_parser_generic_json@@Base+0x970>
   1ac14:	cmp	r1, #32
   1ac18:	bcc	1ac54 <flatcc_json_parser_generic_json@@Base+0x8fc>
   1ac1c:	rsb	r0, r0, #0
   1ac20:	uxtb	r2, r1
   1ac24:	cmp	r2, #34	; 0x22
   1ac28:	cmpne	r2, #92	; 0x5c
   1ac2c:	beq	1ac90 <flatcc_json_parser_generic_json@@Base+0x938>
   1ac30:	add	r1, r6, r0
   1ac34:	cmp	r1, #1
   1ac38:	beq	1abc8 <flatcc_json_parser_generic_json@@Base+0x870>
   1ac3c:	rsb	r1, r0, #0
   1ac40:	sub	r0, r0, #1
   1ac44:	ldrb	r1, [r1, #1]
   1ac48:	cmp	r1, #32
   1ac4c:	bcs	1ac20 <flatcc_json_parser_generic_json@@Base+0x8c8>
   1ac50:	rsb	r0, r0, #0
   1ac54:	ldr	r1, [r9]
   1ac58:	cmp	r1, #0
   1ac5c:	mov	r1, r6
   1ac60:	bne	1aca8 <flatcc_json_parser_generic_json@@Base+0x950>
   1ac64:	ldr	r1, [sp, #8]
   1ac68:	str	r7, [r9]
   1ac6c:	add	r2, r0, #1
   1ac70:	ldr	r1, [r1]
   1ac74:	sub	r1, r2, r1
   1ac78:	ldr	r2, [sp, #12]
   1ac7c:	str	r1, [r2]
   1ac80:	ldr	r1, [sp, #16]
   1ac84:	str	r0, [r1]
   1ac88:	mov	r1, r6
   1ac8c:	b	1aca8 <flatcc_json_parser_generic_json@@Base+0x950>
   1ac90:	adds	r1, r6, r0
   1ac94:	mov	r1, r6
   1ac98:	beq	1aca8 <flatcc_json_parser_generic_json@@Base+0x950>
   1ac9c:	rsb	r1, r0, #0
   1aca0:	cmp	r2, #34	; 0x22
   1aca4:	beq	1accc <flatcc_json_parser_generic_json@@Base+0x974>
   1aca8:	mov	r0, r5
   1acac:	mov	r2, r6
   1acb0:	mov	r3, r4
   1acb4:	bl	19980 <flatcc_json_parser_string_escape@@Base>
   1acb8:	cmp	r0, r6
   1acbc:	bne	1ac08 <flatcc_json_parser_generic_json@@Base+0x8b0>
   1acc0:	mov	r1, r6
   1acc4:	b	1ace8 <flatcc_json_parser_generic_json@@Base+0x990>
   1acc8:	mov	r1, r0
   1accc:	cmp	r1, r6
   1acd0:	beq	1ace8 <flatcc_json_parser_generic_json@@Base+0x990>
   1acd4:	ldrb	r0, [r1]
   1acd8:	cmp	r0, #34	; 0x22
   1acdc:	bne	1ace8 <flatcc_json_parser_generic_json@@Base+0x990>
   1ace0:	add	r4, r1, #1
   1ace4:	b	1ad20 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1ace8:	ldr	r0, [r9]
   1acec:	cmp	r0, #0
   1acf0:	bne	1ad1c <flatcc_json_parser_generic_json@@Base+0x9c4>
   1acf4:	mov	r0, #20
   1acf8:	b	1b020 <flatcc_json_parser_generic_json@@Base+0xcc8>
   1acfc:	cmp	r0, #93	; 0x5d
   1ad00:	beq	1ad20 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1ad04:	cmp	r0, #125	; 0x7d
   1ad08:	mov	r1, r4
   1ad0c:	beq	1ad20 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1ad10:	ldr	r0, [r9]
   1ad14:	cmp	r0, #0
   1ad18:	beq	1b01c <flatcc_json_parser_generic_json@@Base+0xcc4>
   1ad1c:	mov	r4, r6
   1ad20:	subs	r1, r4, r6
   1ad24:	mov	r2, r8
   1ad28:	movwne	r1, #1
   1ad2c:	cmp	r8, #0
   1ad30:	movwne	r2, #1
   1ad34:	beq	1b05c <flatcc_json_parser_generic_json@@Base+0xd04>
   1ad38:	cmp	r4, r6
   1ad3c:	beq	1b06c <flatcc_json_parser_generic_json@@Base+0xd14>
   1ad40:	ldrb	r1, [sl, r8]
   1ad44:	sub	r0, r6, r4
   1ad48:	cmp	r1, #93	; 0x5d
   1ad4c:	bne	1ada0 <flatcc_json_parser_generic_json@@Base+0xa48>
   1ad50:	cmp	r0, #2
   1ad54:	blt	1ae2c <flatcc_json_parser_generic_json@@Base+0xad4>
   1ad58:	ldrb	r0, [r4]
   1ad5c:	cmp	r0, #32
   1ad60:	bls	1ae18 <flatcc_json_parser_generic_json@@Base+0xac0>
   1ad64:	mov	r7, r4
   1ad68:	cmp	r7, r6
   1ad6c:	mov	r4, r6
   1ad70:	beq	1afac <flatcc_json_parser_generic_json@@Base+0xc54>
   1ad74:	ldrb	r0, [r7]
   1ad78:	cmp	r0, #44	; 0x2c
   1ad7c:	beq	1ae88 <flatcc_json_parser_generic_json@@Base+0xb30>
   1ad80:	cmp	r0, #93	; 0x5d
   1ad84:	beq	1af64 <flatcc_json_parser_generic_json@@Base+0xc0c>
   1ad88:	ldr	r0, [r9]
   1ad8c:	mov	r4, r6
   1ad90:	cmp	r0, #0
   1ad94:	bne	1afac <flatcc_json_parser_generic_json@@Base+0xc54>
   1ad98:	mov	r0, #9
   1ad9c:	b	1adec <flatcc_json_parser_generic_json@@Base+0xa94>
   1ada0:	cmp	r0, #2
   1ada4:	blt	1ae64 <flatcc_json_parser_generic_json@@Base+0xb0c>
   1ada8:	ldrb	r0, [r4]
   1adac:	cmp	r0, #32
   1adb0:	bls	1ae50 <flatcc_json_parser_generic_json@@Base+0xaf8>
   1adb4:	mov	r7, r4
   1adb8:	cmp	r7, r6
   1adbc:	mov	r4, r6
   1adc0:	beq	1afac <flatcc_json_parser_generic_json@@Base+0xc54>
   1adc4:	ldrb	r0, [r7]
   1adc8:	cmp	r0, #44	; 0x2c
   1adcc:	beq	1aec8 <flatcc_json_parser_generic_json@@Base+0xb70>
   1add0:	cmp	r0, #125	; 0x7d
   1add4:	beq	1af64 <flatcc_json_parser_generic_json@@Base+0xc0c>
   1add8:	ldr	r0, [r9]
   1addc:	mov	r4, r6
   1ade0:	cmp	r0, #0
   1ade4:	bne	1afac <flatcc_json_parser_generic_json@@Base+0xc54>
   1ade8:	mov	r0, #10
   1adec:	str	r0, [r9]
   1adf0:	ldr	r0, [sp, #8]
   1adf4:	add	r1, r7, #1
   1adf8:	mov	r4, r6
   1adfc:	ldr	r0, [r0]
   1ae00:	sub	r0, r1, r0
   1ae04:	ldr	r1, [sp, #12]
   1ae08:	str	r0, [r1]
   1ae0c:	ldr	r0, [sp, #16]
   1ae10:	str	r7, [r0]
   1ae14:	b	1afac <flatcc_json_parser_generic_json@@Base+0xc54>
   1ae18:	bne	1ae2c <flatcc_json_parser_generic_json@@Base+0xad4>
   1ae1c:	mov	r7, r4
   1ae20:	ldrb	r0, [r7, #1]!
   1ae24:	cmp	r0, #32
   1ae28:	bhi	1ae40 <flatcc_json_parser_generic_json@@Base+0xae8>
   1ae2c:	mov	r0, r5
   1ae30:	mov	r1, r4
   1ae34:	mov	r2, r6
   1ae38:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1ae3c:	mov	r7, r0
   1ae40:	cmp	r7, r6
   1ae44:	mov	r4, r6
   1ae48:	bne	1ad74 <flatcc_json_parser_generic_json@@Base+0xa1c>
   1ae4c:	b	1afac <flatcc_json_parser_generic_json@@Base+0xc54>
   1ae50:	bne	1ae64 <flatcc_json_parser_generic_json@@Base+0xb0c>
   1ae54:	mov	r7, r4
   1ae58:	ldrb	r0, [r7, #1]!
   1ae5c:	cmp	r0, #32
   1ae60:	bhi	1ae78 <flatcc_json_parser_generic_json@@Base+0xb20>
   1ae64:	mov	r0, r5
   1ae68:	mov	r1, r4
   1ae6c:	mov	r2, r6
   1ae70:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1ae74:	mov	r7, r0
   1ae78:	cmp	r7, r6
   1ae7c:	mov	r4, r6
   1ae80:	bne	1adc4 <flatcc_json_parser_generic_json@@Base+0xa6c>
   1ae84:	b	1afac <flatcc_json_parser_generic_json@@Base+0xc54>
   1ae88:	add	r1, r7, #1
   1ae8c:	sub	r0, r6, r1
   1ae90:	cmp	r0, #2
   1ae94:	blt	1af40 <flatcc_json_parser_generic_json@@Base+0xbe8>
   1ae98:	ldrb	r0, [r1]
   1ae9c:	cmp	r0, #32
   1aea0:	bls	1af30 <flatcc_json_parser_generic_json@@Base+0xbd8>
   1aea4:	mov	r7, r1
   1aea8:	cmp	r7, r6
   1aeac:	bne	1af58 <flatcc_json_parser_generic_json@@Base+0xc00>
   1aeb0:	ldr	r0, [r9]
   1aeb4:	mov	r4, r6
   1aeb8:	cmp	r0, #0
   1aebc:	bne	1afac <flatcc_json_parser_generic_json@@Base+0xc54>
   1aec0:	mov	r0, #9
   1aec4:	b	1af04 <flatcc_json_parser_generic_json@@Base+0xbac>
   1aec8:	add	r1, r7, #1
   1aecc:	sub	r0, r6, r1
   1aed0:	cmp	r0, #2
   1aed4:	blt	1afe4 <flatcc_json_parser_generic_json@@Base+0xc8c>
   1aed8:	ldrb	r0, [r1]
   1aedc:	cmp	r0, #32
   1aee0:	bls	1afd4 <flatcc_json_parser_generic_json@@Base+0xc7c>
   1aee4:	mov	r7, r1
   1aee8:	cmp	r7, r6
   1aeec:	bne	1affc <flatcc_json_parser_generic_json@@Base+0xca4>
   1aef0:	ldr	r0, [r9]
   1aef4:	mov	r4, r6
   1aef8:	cmp	r0, #0
   1aefc:	bne	1afac <flatcc_json_parser_generic_json@@Base+0xc54>
   1af00:	mov	r0, #10
   1af04:	str	r0, [r9]
   1af08:	ldr	r0, [sp, #8]
   1af0c:	ldr	r1, [sp, #4]
   1af10:	mov	r4, r6
   1af14:	ldr	r0, [r0]
   1af18:	sub	r0, r1, r0
   1af1c:	ldr	r1, [sp, #12]
   1af20:	str	r0, [r1]
   1af24:	ldr	r0, [sp, #16]
   1af28:	str	r6, [r0]
   1af2c:	b	1afac <flatcc_json_parser_generic_json@@Base+0xc54>
   1af30:	bne	1af40 <flatcc_json_parser_generic_json@@Base+0xbe8>
   1af34:	ldrb	r0, [r7, #2]!
   1af38:	cmp	r0, #32
   1af3c:	bhi	1af50 <flatcc_json_parser_generic_json@@Base+0xbf8>
   1af40:	mov	r0, r5
   1af44:	mov	r2, r6
   1af48:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1af4c:	mov	r7, r0
   1af50:	cmp	r7, r6
   1af54:	beq	1aeb0 <flatcc_json_parser_generic_json@@Base+0xb58>
   1af58:	ldrb	r0, [r7]
   1af5c:	cmp	r0, #93	; 0x5d
   1af60:	bne	1b008 <flatcc_json_parser_generic_json@@Base+0xcb0>
   1af64:	add	r1, r7, #1
   1af68:	sub	r0, r6, r1
   1af6c:	cmp	r0, #2
   1af70:	blt	1af9c <flatcc_json_parser_generic_json@@Base+0xc44>
   1af74:	ldrb	r0, [r1]
   1af78:	cmp	r0, #32
   1af7c:	bls	1af88 <flatcc_json_parser_generic_json@@Base+0xc30>
   1af80:	mov	r4, r1
   1af84:	b	1afac <flatcc_json_parser_generic_json@@Base+0xc54>
   1af88:	bne	1af9c <flatcc_json_parser_generic_json@@Base+0xc44>
   1af8c:	ldrb	r0, [r7, #2]!
   1af90:	cmp	r0, #32
   1af94:	mov	r4, r7
   1af98:	bhi	1afac <flatcc_json_parser_generic_json@@Base+0xc54>
   1af9c:	mov	r0, r5
   1afa0:	mov	r2, r6
   1afa4:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1afa8:	mov	r4, r0
   1afac:	subs	r1, r4, r6
   1afb0:	sub	r0, r8, #1
   1afb4:	movwne	r1, #1
   1afb8:	subs	r2, r8, #1
   1afbc:	movwne	r2, #1
   1afc0:	beq	1b070 <flatcc_json_parser_generic_json@@Base+0xd18>
   1afc4:	cmp	r4, r6
   1afc8:	mov	r8, r0
   1afcc:	bne	1ad40 <flatcc_json_parser_generic_json@@Base+0x9e8>
   1afd0:	b	1b070 <flatcc_json_parser_generic_json@@Base+0xd18>
   1afd4:	bne	1afe4 <flatcc_json_parser_generic_json@@Base+0xc8c>
   1afd8:	ldrb	r0, [r7, #2]!
   1afdc:	cmp	r0, #32
   1afe0:	bhi	1aff4 <flatcc_json_parser_generic_json@@Base+0xc9c>
   1afe4:	mov	r0, r5
   1afe8:	mov	r2, r6
   1afec:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1aff0:	mov	r7, r0
   1aff4:	cmp	r7, r6
   1aff8:	beq	1aef0 <flatcc_json_parser_generic_json@@Base+0xb98>
   1affc:	ldrb	r0, [r7]
   1b000:	cmp	r0, #125	; 0x7d
   1b004:	beq	1af64 <flatcc_json_parser_generic_json@@Base+0xc0c>
   1b008:	add	r0, sp, #24
   1b00c:	cmp	r7, r6
   1b010:	add	r0, r0, r8
   1b014:	bne	1a3ac <flatcc_json_parser_generic_json@@Base+0x54>
   1b018:	b	1b0c8 <flatcc_json_parser_generic_json@@Base+0xd70>
   1b01c:	mov	r0, #6
   1b020:	str	r0, [r9]
   1b024:	ldr	r0, [sp, #8]
   1b028:	add	r2, r1, #1
   1b02c:	mov	r4, r6
   1b030:	ldr	r0, [r0]
   1b034:	sub	r0, r2, r0
   1b038:	ldr	r2, [sp, #12]
   1b03c:	str	r0, [r2]
   1b040:	ldr	r0, [sp, #16]
   1b044:	str	r1, [r0]
   1b048:	b	1ad20 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1b04c:	mov	r4, r7
   1b050:	mov	r0, r4
   1b054:	sub	sp, fp, #28
   1b058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b05c:	mov	r0, r8
   1b060:	cmp	r1, #0
   1b064:	beq	1b078 <flatcc_json_parser_generic_json@@Base+0xd20>
   1b068:	b	1b0cc <flatcc_json_parser_generic_json@@Base+0xd74>
   1b06c:	mov	r0, r8
   1b070:	cmp	r1, #0
   1b074:	bne	1b0cc <flatcc_json_parser_generic_json@@Base+0xd74>
   1b078:	cmp	r2, #0
   1b07c:	beq	1b0cc <flatcc_json_parser_generic_json@@Base+0xd74>
   1b080:	ldr	r1, [r9]
   1b084:	cmp	r1, #0
   1b088:	bne	1b0c8 <flatcc_json_parser_generic_json@@Base+0xd70>
   1b08c:	add	r1, sp, #24
   1b090:	add	r0, r1, r0
   1b094:	mov	r1, #10
   1b098:	ldrb	r0, [r0, #-1]
   1b09c:	cmp	r0, #93	; 0x5d
   1b0a0:	movweq	r1, #9
   1b0a4:	str	r1, [r9]
   1b0a8:	ldr	r0, [sp, #8]
   1b0ac:	ldr	r1, [sp, #4]
   1b0b0:	ldr	r0, [r0]
   1b0b4:	sub	r0, r1, r0
   1b0b8:	ldr	r1, [sp, #12]
   1b0bc:	str	r0, [r1]
   1b0c0:	ldr	r0, [sp, #16]
   1b0c4:	str	r6, [r0]
   1b0c8:	mov	r4, r6
   1b0cc:	mov	r0, r4
   1b0d0:	sub	sp, fp, #28
   1b0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0d8:	ldr	r0, [r9]
   1b0dc:	cmp	r0, #0
   1b0e0:	bne	1b0c8 <flatcc_json_parser_generic_json@@Base+0xd70>
   1b0e4:	mov	r0, #10
   1b0e8:	str	r0, [r9]
   1b0ec:	b	1b0a8 <flatcc_json_parser_generic_json@@Base+0xd50>
   1b0f0:	ldr	r0, [r9]
   1b0f4:	cmp	r0, #0
   1b0f8:	bne	1b0c8 <flatcc_json_parser_generic_json@@Base+0xd70>
   1b0fc:	mov	r0, #4
   1b100:	b	1b128 <flatcc_json_parser_generic_json@@Base+0xdd0>
   1b104:	ldr	r0, [r9]
   1b108:	cmp	r0, #0
   1b10c:	bne	1b0c8 <flatcc_json_parser_generic_json@@Base+0xd70>
   1b110:	mov	r0, #2
   1b114:	b	1b128 <flatcc_json_parser_generic_json@@Base+0xdd0>
   1b118:	ldr	r0, [r9]
   1b11c:	cmp	r0, #0
   1b120:	bne	1b0c8 <flatcc_json_parser_generic_json@@Base+0xd70>
   1b124:	mov	r0, #5
   1b128:	str	r0, [r9]
   1b12c:	ldr	r0, [sp, #8]
   1b130:	add	r1, r7, #1
   1b134:	ldr	r0, [r0]
   1b138:	sub	r0, r1, r0
   1b13c:	ldr	r1, [sp, #12]
   1b140:	str	r0, [r1]
   1b144:	ldr	r0, [sp, #16]
   1b148:	str	r7, [r0]
   1b14c:	b	1b0c8 <flatcc_json_parser_generic_json@@Base+0xd70>

0001b150 <flatcc_json_parser_double@@Base>:
   1b150:	push	{r4, r5, r6, r7, fp, lr}
   1b154:	add	fp, sp, #16
   1b158:	mov	r5, r0
   1b15c:	mov	r0, #0
   1b160:	mov	r6, r1
   1b164:	cmp	r1, r2
   1b168:	str	r0, [r3]
   1b16c:	str	r0, [r3, #4]
   1b170:	moveq	r0, r6
   1b174:	popeq	{r4, r5, r6, r7, fp, pc}
   1b178:	mov	r0, r6
   1b17c:	mov	r4, r2
   1b180:	mov	r7, r3
   1b184:	ldrb	r1, [r0], #1
   1b188:	cmp	r1, #45	; 0x2d
   1b18c:	movne	r0, r6
   1b190:	sub	r2, r2, r0
   1b194:	cmp	r2, #2
   1b198:	blt	1b1c4 <flatcc_json_parser_double@@Base+0x74>
   1b19c:	sub	r1, r1, #45	; 0x2d
   1b1a0:	clz	r1, r1
   1b1a4:	lsr	r1, r1, #5
   1b1a8:	ldrb	r1, [r6, r1]
   1b1ac:	cmp	r1, #46	; 0x2e
   1b1b0:	beq	1b214 <flatcc_json_parser_double@@Base+0xc4>
   1b1b4:	cmp	r1, #48	; 0x30
   1b1b8:	ldrbeq	r0, [r0, #1]
   1b1bc:	cmpeq	r0, #48	; 0x30
   1b1c0:	beq	1b214 <flatcc_json_parser_double@@Base+0xc4>
   1b1c4:	sub	r1, r4, r6
   1b1c8:	mov	r0, r6
   1b1cc:	mov	r2, r7
   1b1d0:	bl	1b248 <flatcc_json_parser_double@@Base+0xf8>
   1b1d4:	cmp	r0, #0
   1b1d8:	cmpne	r0, r6
   1b1dc:	popne	{r4, r5, r6, r7, fp, pc}
   1b1e0:	vldr	d0, [r7]
   1b1e4:	bl	12928 <__isinf@plt>
   1b1e8:	ldr	r1, [r5, #24]
   1b1ec:	cmp	r0, #0
   1b1f0:	beq	1b204 <flatcc_json_parser_double@@Base+0xb4>
   1b1f4:	cmp	r1, #0
   1b1f8:	bne	1b20c <flatcc_json_parser_double@@Base+0xbc>
   1b1fc:	mov	r0, #7
   1b200:	b	1b224 <flatcc_json_parser_double@@Base+0xd4>
   1b204:	cmp	r1, #0
   1b208:	beq	1b220 <flatcc_json_parser_double@@Base+0xd0>
   1b20c:	mov	r0, r4
   1b210:	pop	{r4, r5, r6, r7, fp, pc}
   1b214:	ldr	r0, [r5, #24]
   1b218:	cmp	r0, #0
   1b21c:	bne	1b20c <flatcc_json_parser_double@@Base+0xbc>
   1b220:	mov	r0, #6
   1b224:	str	r6, [r5, #36]	; 0x24
   1b228:	add	r2, r6, #1
   1b22c:	ldr	r1, [r5, #4]
   1b230:	sub	r1, r2, r1
   1b234:	str	r1, [r5, #20]
   1b238:	str	r0, [r5, #24]
   1b23c:	mov	r0, r4
   1b240:	pop	{r4, r5, r6, r7, fp, pc}
   1b244:	nop	{0}
   1b248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b24c:	add	fp, sp, #28
   1b250:	sub	sp, sp, #36	; 0x24
   1b254:	cmp	r1, #1000	; 0x3e8
   1b258:	mov	r3, r1
   1b25c:	mov	r6, #0
   1b260:	mov	r9, r0
   1b264:	movge	r1, #1000	; 0x3e8
   1b268:	str	r6, [r2]
   1b26c:	str	r6, [r2, #4]
   1b270:	add	lr, r0, r1
   1b274:	add	r4, lr, #1
   1b278:	cmp	r4, r0
   1b27c:	beq	1b2e4 <flatcc_json_parser_double@@Base+0x194>
   1b280:	ldrb	r0, [r9]
   1b284:	mov	r5, r9
   1b288:	cmp	r0, #45	; 0x2d
   1b28c:	bne	1b2a4 <flatcc_json_parser_double@@Base+0x154>
   1b290:	cmp	r1, #0
   1b294:	beq	1b334 <flatcc_json_parser_double@@Base+0x1e4>
   1b298:	add	r5, r9, #1
   1b29c:	mov	r6, #1
   1b2a0:	ldrb	r0, [r5]
   1b2a4:	cmp	r0, #48	; 0x30
   1b2a8:	bne	1b2f4 <flatcc_json_parser_double@@Base+0x1a4>
   1b2ac:	add	ip, r5, #1
   1b2b0:	cmp	r5, lr
   1b2b4:	beq	1b374 <flatcc_json_parser_double@@Base+0x224>
   1b2b8:	ldrb	r1, [ip]
   1b2bc:	orr	r0, r1, #32
   1b2c0:	cmp	r0, #120	; 0x78
   1b2c4:	bne	1b344 <flatcc_json_parser_double@@Base+0x1f4>
   1b2c8:	mov	r0, #0
   1b2cc:	str	r0, [r2]
   1b2d0:	str	r0, [r2, #4]
   1b2d4:	mov	r2, r9
   1b2d8:	mov	r0, r2
   1b2dc:	sub	sp, fp, #28
   1b2e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2e4:	mov	r2, r9
   1b2e8:	mov	r0, r2
   1b2ec:	sub	sp, fp, #28
   1b2f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2f4:	sub	r1, r0, #49	; 0x31
   1b2f8:	uxtb	r1, r1
   1b2fc:	cmp	r1, #9
   1b300:	bcc	1b31c <flatcc_json_parser_double@@Base+0x1cc>
   1b304:	cmp	r6, #0
   1b308:	movne	r9, #0
   1b30c:	mov	r2, r9
   1b310:	mov	r0, r2
   1b314:	sub	sp, fp, #28
   1b318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b31c:	sub	r0, r0, #48	; 0x30
   1b320:	add	ip, r5, #1
   1b324:	asr	r1, r0, #31
   1b328:	cmp	ip, r4
   1b32c:	bne	1b384 <flatcc_json_parser_double@@Base+0x234>
   1b330:	b	1b400 <flatcc_json_parser_double@@Base+0x2b0>
   1b334:	mov	r2, #0
   1b338:	mov	r0, r2
   1b33c:	sub	sp, fp, #28
   1b340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b344:	cmp	r1, #48	; 0x30
   1b348:	mov	r0, #0
   1b34c:	mov	r1, #0
   1b350:	bne	1b37c <flatcc_json_parser_double@@Base+0x22c>
   1b354:	add	r0, r5, #2
   1b358:	mov	ip, r0
   1b35c:	cmp	r4, r0
   1b360:	beq	1b374 <flatcc_json_parser_double@@Base+0x224>
   1b364:	mov	r0, ip
   1b368:	ldrb	r1, [r0], #1
   1b36c:	cmp	r1, #48	; 0x30
   1b370:	beq	1b358 <flatcc_json_parser_double@@Base+0x208>
   1b374:	mov	r0, #0
   1b378:	mov	r1, #0
   1b37c:	cmp	ip, r4
   1b380:	beq	1b400 <flatcc_json_parser_double@@Base+0x2b0>
   1b384:	movw	r5, #39321	; 0x9999
   1b388:	mov	sl, #10
   1b38c:	mov	r7, ip
   1b390:	str	r6, [sp, #20]
   1b394:	str	r2, [sp, #24]
   1b398:	movt	r5, #6553	; 0x1999
   1b39c:	ldrb	r8, [r7]
   1b3a0:	sub	r2, r8, #48	; 0x30
   1b3a4:	uxtb	r6, r2
   1b3a8:	mov	r2, #0
   1b3ac:	cmp	r6, #9
   1b3b0:	bhi	1b3e8 <flatcc_json_parser_double@@Base+0x298>
   1b3b4:	movw	r6, #39320	; 0x9998
   1b3b8:	movt	r6, #39321	; 0x9999
   1b3bc:	subs	r6, r6, r0
   1b3c0:	sbcs	r6, r5, r1
   1b3c4:	bcc	1b410 <flatcc_json_parser_double@@Base+0x2c0>
   1b3c8:	add	r1, r1, r1, lsl #2
   1b3cc:	add	r7, r7, #1
   1b3d0:	lsl	r1, r1, #1
   1b3d4:	umlal	r8, r1, r0, sl
   1b3d8:	subs	r0, r8, #48	; 0x30
   1b3dc:	sbc	r1, r1, #0
   1b3e0:	cmp	r4, r7
   1b3e4:	bne	1b39c <flatcc_json_parser_double@@Base+0x24c>
   1b3e8:	mov	r5, r1
   1b3ec:	mov	sl, #0
   1b3f0:	str	r0, [sp, #28]
   1b3f4:	cmp	r7, r4
   1b3f8:	bne	1b434 <flatcc_json_parser_double@@Base+0x2e4>
   1b3fc:	b	1b92c <flatcc_json_parser_double@@Base+0x7dc>
   1b400:	mov	r2, #0
   1b404:	mov	r0, r2
   1b408:	sub	sp, fp, #28
   1b40c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b410:	adds	r6, r0, #1
   1b414:	mov	sl, #1
   1b418:	adc	r5, r1, #0
   1b41c:	cmp	r8, #52	; 0x34
   1b420:	movls	r6, r0
   1b424:	movls	r5, r1
   1b428:	str	r6, [sp, #28]
   1b42c:	cmp	r7, r4
   1b430:	beq	1b92c <flatcc_json_parser_double@@Base+0x7dc>
   1b434:	sub	r8, r7, ip
   1b438:	mvn	ip, r3
   1b43c:	mov	r3, #0
   1b440:	cmn	ip, #1000	; 0x3e8
   1b444:	mov	r0, ip
   1b448:	mvnlt	r0, #1000	; 0x3e8
   1b44c:	mvn	r0, r0
   1b450:	sub	r0, r0, r7
   1b454:	add	r0, r9, r0
   1b458:	ldrb	r1, [r7]
   1b45c:	cmp	r1, #48	; 0x30
   1b460:	bne	1b490 <flatcc_json_parser_double@@Base+0x340>
   1b464:	add	r1, r7, #1
   1b468:	cmp	r7, lr
   1b46c:	sub	r0, r0, #1
   1b470:	add	r3, r3, #1
   1b474:	mov	r7, r1
   1b478:	bne	1b458 <flatcc_json_parser_double@@Base+0x308>
   1b47c:	mov	r7, r1
   1b480:	mov	r2, #0
   1b484:	cmp	r7, r4
   1b488:	bne	1b4e4 <flatcc_json_parser_double@@Base+0x394>
   1b48c:	b	1b92c <flatcc_json_parser_double@@Base+0x7dc>
   1b490:	sub	r1, r1, #49	; 0x31
   1b494:	uxtb	r1, r1
   1b498:	cmp	r1, #8
   1b49c:	bhi	1b4d8 <flatcc_json_parser_double@@Base+0x388>
   1b4a0:	mvn	r2, #0
   1b4a4:	mov	r1, r2
   1b4a8:	cmp	r0, #0
   1b4ac:	beq	1b4cc <flatcc_json_parser_double@@Base+0x37c>
   1b4b0:	ldrb	r2, [r7, -r1]
   1b4b4:	sub	r0, r0, #1
   1b4b8:	sub	r2, r2, #48	; 0x30
   1b4bc:	uxtb	r6, r2
   1b4c0:	sub	r2, r1, #1
   1b4c4:	cmp	r6, #10
   1b4c8:	bcc	1b4a4 <flatcc_json_parser_double@@Base+0x354>
   1b4cc:	sub	r3, r3, r1
   1b4d0:	sub	r7, r7, r1
   1b4d4:	mov	sl, #1
   1b4d8:	mov	r2, #0
   1b4dc:	cmp	r7, r4
   1b4e0:	beq	1b92c <flatcc_json_parser_double@@Base+0x7dc>
   1b4e4:	ldrb	r0, [r7]
   1b4e8:	cmp	r0, #46	; 0x2e
   1b4ec:	bne	1b690 <flatcc_json_parser_double@@Base+0x540>
   1b4f0:	mov	r6, r7
   1b4f4:	ldrb	r0, [r6, #1]!
   1b4f8:	sub	r1, r0, #48	; 0x30
   1b4fc:	uxtb	r1, r1
   1b500:	cmp	r1, #9
   1b504:	bhi	1b92c <flatcc_json_parser_double@@Base+0x7dc>
   1b508:	cmp	r7, lr
   1b50c:	beq	1b5d0 <flatcc_json_parser_double@@Base+0x480>
   1b510:	cmn	ip, #1000	; 0x3e8
   1b514:	mvn	r1, #1
   1b518:	str	sl, [sp, #12]
   1b51c:	str	r6, [sp, #8]
   1b520:	str	r8, [sp, #16]
   1b524:	mvnlt	ip, #1000	; 0x3e8
   1b528:	sub	r1, r1, ip
   1b52c:	sub	r1, r1, r7
   1b530:	add	sl, r9, r1
   1b534:	mov	r1, #0
   1b538:	mov	ip, r1
   1b53c:	ldr	r1, [sp, #28]
   1b540:	movw	r6, #39320	; 0x9998
   1b544:	movt	r6, #39321	; 0x9999
   1b548:	subs	r1, r6, r1
   1b54c:	movw	r1, #39321	; 0x9999
   1b550:	movt	r1, #6553	; 0x1999
   1b554:	sbcs	r1, r1, r5
   1b558:	bcc	1b5e0 <flatcc_json_parser_double@@Base+0x490>
   1b55c:	add	r1, r5, r5, lsl #2
   1b560:	ldr	r5, [sp, #28]
   1b564:	uxtb	r0, r0
   1b568:	mov	r6, #10
   1b56c:	lsl	r1, r1, #1
   1b570:	umlal	r0, r1, r5, r6
   1b574:	add	r6, r7, ip
   1b578:	subs	r0, r0, #48	; 0x30
   1b57c:	sbc	r5, r1, #0
   1b580:	cmp	sl, ip
   1b584:	str	r0, [sp, #28]
   1b588:	beq	1b5ac <flatcc_json_parser_double@@Base+0x45c>
   1b58c:	ldrb	r0, [r6, #2]
   1b590:	mov	r8, r5
   1b594:	add	r1, ip, #1
   1b598:	sub	r5, r0, #48	; 0x30
   1b59c:	uxtb	r5, r5
   1b5a0:	cmp	r5, #10
   1b5a4:	mov	r5, r8
   1b5a8:	bcc	1b538 <flatcc_json_parser_double@@Base+0x3e8>
   1b5ac:	ldr	r8, [sp, #16]
   1b5b0:	ldr	sl, [sp, #12]
   1b5b4:	sub	r0, r3, #1
   1b5b8:	add	r7, r6, #2
   1b5bc:	sub	r3, r0, ip
   1b5c0:	ldr	r6, [sp, #8]
   1b5c4:	cmp	r7, r4
   1b5c8:	bne	1b62c <flatcc_json_parser_double@@Base+0x4dc>
   1b5cc:	b	1b92c <flatcc_json_parser_double@@Base+0x7dc>
   1b5d0:	mov	r7, r6
   1b5d4:	cmp	r7, r4
   1b5d8:	bne	1b62c <flatcc_json_parser_double@@Base+0x4dc>
   1b5dc:	b	1b92c <flatcc_json_parser_double@@Base+0x7dc>
   1b5e0:	ldr	sl, [sp, #12]
   1b5e4:	ldr	r8, [sp, #16]
   1b5e8:	add	r1, r7, ip
   1b5ec:	sub	r3, r3, ip
   1b5f0:	add	r7, r1, #1
   1b5f4:	cmp	sl, #0
   1b5f8:	bne	1b620 <flatcc_json_parser_double@@Base+0x4d0>
   1b5fc:	ldr	r6, [sp, #28]
   1b600:	uxtb	r0, r0
   1b604:	mov	sl, #1
   1b608:	adds	r1, r6, #1
   1b60c:	adc	ip, r5, #0
   1b610:	cmp	r0, #52	; 0x34
   1b614:	movhi	r6, r1
   1b618:	movhi	r5, ip
   1b61c:	str	r6, [sp, #28]
   1b620:	ldr	r6, [sp, #8]
   1b624:	cmp	r7, r4
   1b628:	beq	1b92c <flatcc_json_parser_double@@Base+0x7dc>
   1b62c:	sub	r0, r7, r6
   1b630:	add	r8, r0, r8
   1b634:	ldrb	r0, [r7]
   1b638:	cmp	r0, #48	; 0x30
   1b63c:	bne	1b654 <flatcc_json_parser_double@@Base+0x504>
   1b640:	add	r7, r7, #1
   1b644:	add	r3, r3, #1
   1b648:	cmp	r4, r7
   1b64c:	bne	1b634 <flatcc_json_parser_double@@Base+0x4e4>
   1b650:	b	1b690 <flatcc_json_parser_double@@Base+0x540>
   1b654:	sub	r0, r0, #49	; 0x31
   1b658:	uxtb	r0, r0
   1b65c:	cmp	r0, #8
   1b660:	bhi	1b690 <flatcc_json_parser_double@@Base+0x540>
   1b664:	add	r0, r7, #1
   1b668:	mov	sl, #1
   1b66c:	mov	r7, r0
   1b670:	cmp	r4, r0
   1b674:	beq	1b690 <flatcc_json_parser_double@@Base+0x540>
   1b678:	mov	r0, r7
   1b67c:	ldrb	r1, [r0], #1
   1b680:	sub	r1, r1, #48	; 0x30
   1b684:	uxtb	r1, r1
   1b688:	cmp	r1, #10
   1b68c:	bcc	1b66c <flatcc_json_parser_double@@Base+0x51c>
   1b690:	cmp	r7, r4
   1b694:	beq	1b92c <flatcc_json_parser_double@@Base+0x7dc>
   1b698:	ldrb	r0, [r7]
   1b69c:	mov	ip, #0
   1b6a0:	orr	r0, r0, #32
   1b6a4:	cmp	r0, #101	; 0x65
   1b6a8:	bne	1b6c8 <flatcc_json_parser_double@@Base+0x578>
   1b6ac:	sub	r0, r4, r7
   1b6b0:	cmp	r0, #2
   1b6b4:	bge	1b740 <flatcc_json_parser_double@@Base+0x5f0>
   1b6b8:	mov	r2, #0
   1b6bc:	mov	r0, r2
   1b6c0:	sub	sp, fp, #28
   1b6c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6c8:	mov	r0, #0
   1b6cc:	cmp	r7, r4
   1b6d0:	mov	r2, #0
   1b6d4:	beq	1b92c <flatcc_json_parser_double@@Base+0x7dc>
   1b6d8:	ldr	r1, [sp, #28]
   1b6dc:	cmp	ip, #0
   1b6e0:	vmov.i32	d16, #0	; 0x00000000
   1b6e4:	rsbne	r0, r0, #0
   1b6e8:	orrs	r1, r1, r5
   1b6ec:	beq	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1b6f0:	add	r1, r8, r3
   1b6f4:	add	r4, r1, r0
   1b6f8:	cmn	r4, #324	; 0x144
   1b6fc:	blt	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1b700:	movw	r0, #310	; 0x136
   1b704:	cmp	r4, r0
   1b708:	ble	1b774 <flatcc_json_parser_double@@Base+0x624>
   1b70c:	vldr	d16, [pc, #988]	; 1baf0 <flatcc_json_parser_double@@Base+0x9a0>
   1b710:	ldr	r0, [sp, #24]
   1b714:	vstr	d16, [r0]
   1b718:	ldr	r0, [sp, #20]
   1b71c:	cmp	r0, #0
   1b720:	ldrne	r0, [sp, #24]
   1b724:	vldrne	d16, [r0]
   1b728:	vnegne.f64	d16, d16
   1b72c:	vstrne	d16, [r0]
   1b730:	mov	r2, r7
   1b734:	mov	r0, r2
   1b738:	sub	sp, fp, #28
   1b73c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b740:	mov	r1, r7
   1b744:	ldrb	r0, [r1, #1]!
   1b748:	cmp	r0, #45	; 0x2d
   1b74c:	beq	1b86c <flatcc_json_parser_double@@Base+0x71c>
   1b750:	mov	ip, #0
   1b754:	cmp	r0, #43	; 0x2b
   1b758:	bne	1b87c <flatcc_json_parser_double@@Base+0x72c>
   1b75c:	add	r1, r7, #2
   1b760:	mov	r2, #0
   1b764:	cmp	r1, r4
   1b768:	beq	1b92c <flatcc_json_parser_double@@Base+0x7dc>
   1b76c:	mov	ip, #0
   1b770:	b	1b87c <flatcc_json_parser_double@@Base+0x72c>
   1b774:	mov	r0, #0
   1b778:	cmp	r0, r5, lsr #21
   1b77c:	bne	1b8dc <flatcc_json_parser_double@@Base+0x78c>
   1b780:	cmp	r4, #22
   1b784:	bhi	1b8dc <flatcc_json_parser_double@@Base+0x78c>
   1b788:	ldr	r0, [sp, #28]
   1b78c:	mov	r1, r5
   1b790:	bl	1dfe8 <flatcc_json_parser_struct_as_root@@Base+0x420>
   1b794:	sub	r2, r4, r8
   1b798:	vmov	d16, r0, r1
   1b79c:	add	r0, r2, #22
   1b7a0:	cmp	r0, #44	; 0x2c
   1b7a4:	bhi	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1b7a8:	add	r1, pc, #0
   1b7ac:	ldr	pc, [r1, r0, lsl #2]
   1b7b0:	andeq	fp, r1, r4, ror #16
   1b7b4:	andeq	fp, r1, r8, lsr r9
   1b7b8:	andeq	fp, r1, r0, asr #18
   1b7bc:	andeq	fp, r1, r8, asr #18
   1b7c0:	andeq	fp, r1, r0, asr r9
   1b7c4:	andeq	fp, r1, r8, asr r9
   1b7c8:	andeq	fp, r1, r0, ror #18
   1b7cc:	andeq	fp, r1, r8, ror #18
   1b7d0:	andeq	fp, r1, r0, ror r9
   1b7d4:	andeq	fp, r1, r8, ror r9
   1b7d8:	andeq	fp, r1, r0, lsl #19
   1b7dc:	andeq	fp, r1, r8, lsl #19
   1b7e0:	muleq	r1, r0, r9
   1b7e4:	muleq	r1, r8, r9
   1b7e8:	andeq	fp, r1, r0, lsr #19
   1b7ec:	andeq	fp, r1, r8, lsr #19
   1b7f0:			; <UNDEFINED> instruction: 0x0001b9b0
   1b7f4:			; <UNDEFINED> instruction: 0x0001b9b8
   1b7f8:	andeq	fp, r1, r0, asr #19
   1b7fc:	andeq	fp, r1, r8, asr #19
   1b800:	ldrdeq	fp, [r1], -r0
   1b804:	ldrdeq	fp, [r1], -r8
   1b808:	andeq	fp, r1, r0, lsl r7
   1b80c:	andeq	fp, r1, r4, ror #19
   1b810:	strdeq	fp, [r1], -r0
   1b814:	strdeq	fp, [r1], -ip
   1b818:	andeq	fp, r1, r8, lsl #20
   1b81c:	andeq	fp, r1, r4, lsl sl
   1b820:	andeq	fp, r1, r0, lsr #20
   1b824:	andeq	fp, r1, ip, lsr #20
   1b828:	andeq	fp, r1, r8, lsr sl
   1b82c:	andeq	fp, r1, r4, asr #20
   1b830:	andeq	fp, r1, r0, asr sl
   1b834:	andeq	fp, r1, ip, asr sl
   1b838:	andeq	fp, r1, r8, ror #20
   1b83c:	andeq	fp, r1, r4, ror sl
   1b840:	andeq	fp, r1, r0, lsl #21
   1b844:	andeq	fp, r1, ip, lsl #21
   1b848:	muleq	r1, r8, sl
   1b84c:	andeq	fp, r1, r4, lsr #21
   1b850:			; <UNDEFINED> instruction: 0x0001bab0
   1b854:			; <UNDEFINED> instruction: 0x0001babc
   1b858:	andeq	fp, r1, r8, asr #21
   1b85c:	ldrdeq	fp, [r1], -r4
   1b860:	andeq	fp, r1, r0, ror #21
   1b864:	vldr	d17, [pc, #812]	; 1bb98 <flatcc_json_parser_double@@Base+0xa48>
   1b868:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b86c:	add	r1, r7, #2
   1b870:	mov	ip, #1
   1b874:	cmp	r1, r4
   1b878:	beq	1b928 <flatcc_json_parser_double@@Base+0x7d8>
   1b87c:	ldrb	r0, [r1]
   1b880:	mov	r7, r5
   1b884:	mov	r2, #0
   1b888:	sub	r0, r0, #48	; 0x30
   1b88c:	uxtb	r5, r0
   1b890:	cmp	r5, #9
   1b894:	bhi	1b92c <flatcc_json_parser_double@@Base+0x7dc>
   1b898:	mov	r5, r7
   1b89c:	add	r7, r1, #1
   1b8a0:	cmp	r1, lr
   1b8a4:	beq	1b6cc <flatcc_json_parser_double@@Base+0x57c>
   1b8a8:	ldrb	r1, [r7]
   1b8ac:	sub	r2, r1, #48	; 0x30
   1b8b0:	uxtb	r2, r2
   1b8b4:	cmp	r2, #9
   1b8b8:	bhi	1b6cc <flatcc_json_parser_double@@Base+0x57c>
   1b8bc:	cmp	r0, #32768	; 0x8000
   1b8c0:	add	r7, r7, #1
   1b8c4:	addlt	r0, r0, r0, lsl #2
   1b8c8:	addlt	r0, r1, r0, lsl #1
   1b8cc:	sublt	r0, r0, #48	; 0x30
   1b8d0:	cmp	r4, r7
   1b8d4:	bne	1b8a8 <flatcc_json_parser_double@@Base+0x758>
   1b8d8:	b	1b6cc <flatcc_json_parser_double@@Base+0x57c>
   1b8dc:	ldr	r0, [sp, #24]
   1b8e0:	mov	r1, r5
   1b8e4:	mov	r2, r4
   1b8e8:	mov	r3, r8
   1b8ec:	str	sl, [sp]
   1b8f0:	str	r0, [sp, #4]
   1b8f4:	ldr	r0, [sp, #28]
   1b8f8:	bl	192a0 <grisu3_diy_fp_encode_double@@Base>
   1b8fc:	cmp	r0, #0
   1b900:	bne	1b718 <flatcc_json_parser_double@@Base+0x5c8>
   1b904:	add	r1, sp, #32
   1b908:	mov	r0, r9
   1b90c:	bl	129a0 <strtod@plt>
   1b910:	ldr	r0, [sp, #24]
   1b914:	vstr	d0, [r0]
   1b918:	ldr	r0, [sp, #32]
   1b91c:	cmp	r0, r7
   1b920:	movcc	r7, r0
   1b924:	b	1b730 <flatcc_json_parser_double@@Base+0x5e0>
   1b928:	mov	r2, #0
   1b92c:	mov	r0, r2
   1b930:	sub	sp, fp, #28
   1b934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b938:	vldr	d17, [pc, #440]	; 1baf8 <flatcc_json_parser_double@@Base+0x9a8>
   1b93c:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b940:	vldr	d17, [pc, #440]	; 1bb00 <flatcc_json_parser_double@@Base+0x9b0>
   1b944:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b948:	vldr	d17, [pc, #440]	; 1bb08 <flatcc_json_parser_double@@Base+0x9b8>
   1b94c:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b950:	vldr	d17, [pc, #440]	; 1bb10 <flatcc_json_parser_double@@Base+0x9c0>
   1b954:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b958:	vldr	d17, [pc, #440]	; 1bb18 <flatcc_json_parser_double@@Base+0x9c8>
   1b95c:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b960:	vldr	d17, [pc, #440]	; 1bb20 <flatcc_json_parser_double@@Base+0x9d0>
   1b964:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b968:	vldr	d17, [pc, #440]	; 1bb28 <flatcc_json_parser_double@@Base+0x9d8>
   1b96c:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b970:	vldr	d17, [pc, #440]	; 1bb30 <flatcc_json_parser_double@@Base+0x9e0>
   1b974:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b978:	vldr	d17, [pc, #440]	; 1bb38 <flatcc_json_parser_double@@Base+0x9e8>
   1b97c:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b980:	vldr	d17, [pc, #440]	; 1bb40 <flatcc_json_parser_double@@Base+0x9f0>
   1b984:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b988:	vldr	d17, [pc, #440]	; 1bb48 <flatcc_json_parser_double@@Base+0x9f8>
   1b98c:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b990:	vldr	d17, [pc, #440]	; 1bb50 <flatcc_json_parser_double@@Base+0xa00>
   1b994:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b998:	vldr	d17, [pc, #440]	; 1bb58 <flatcc_json_parser_double@@Base+0xa08>
   1b99c:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b9a0:	vldr	d17, [pc, #440]	; 1bb60 <flatcc_json_parser_double@@Base+0xa10>
   1b9a4:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b9a8:	vldr	d17, [pc, #440]	; 1bb68 <flatcc_json_parser_double@@Base+0xa18>
   1b9ac:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b9b0:	vldr	d17, [pc, #440]	; 1bb70 <flatcc_json_parser_double@@Base+0xa20>
   1b9b4:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b9b8:	vldr	d17, [pc, #440]	; 1bb78 <flatcc_json_parser_double@@Base+0xa28>
   1b9bc:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b9c0:	vldr	d17, [pc, #440]	; 1bb80 <flatcc_json_parser_double@@Base+0xa30>
   1b9c4:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b9c8:	vldr	d17, [pc, #440]	; 1bb88 <flatcc_json_parser_double@@Base+0xa38>
   1b9cc:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b9d0:	vldr	d17, [pc, #440]	; 1bb90 <flatcc_json_parser_double@@Base+0xa40>
   1b9d4:	b	1b9dc <flatcc_json_parser_double@@Base+0x88c>
   1b9d8:	vmov.f64	d17, #36	; 0x41200000  10.0
   1b9dc:	vdiv.f64	d16, d16, d17
   1b9e0:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1b9e4:	vmov.f64	d17, #36	; 0x41200000  10.0
   1b9e8:	vmul.f64	d16, d16, d17
   1b9ec:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1b9f0:	vldr	d17, [pc, #408]	; 1bb90 <flatcc_json_parser_double@@Base+0xa40>
   1b9f4:	vmul.f64	d16, d16, d17
   1b9f8:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1b9fc:	vldr	d17, [pc, #388]	; 1bb88 <flatcc_json_parser_double@@Base+0xa38>
   1ba00:	vmul.f64	d16, d16, d17
   1ba04:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba08:	vldr	d17, [pc, #368]	; 1bb80 <flatcc_json_parser_double@@Base+0xa30>
   1ba0c:	vmul.f64	d16, d16, d17
   1ba10:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba14:	vldr	d17, [pc, #348]	; 1bb78 <flatcc_json_parser_double@@Base+0xa28>
   1ba18:	vmul.f64	d16, d16, d17
   1ba1c:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba20:	vldr	d17, [pc, #328]	; 1bb70 <flatcc_json_parser_double@@Base+0xa20>
   1ba24:	vmul.f64	d16, d16, d17
   1ba28:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba2c:	vldr	d17, [pc, #308]	; 1bb68 <flatcc_json_parser_double@@Base+0xa18>
   1ba30:	vmul.f64	d16, d16, d17
   1ba34:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba38:	vldr	d17, [pc, #288]	; 1bb60 <flatcc_json_parser_double@@Base+0xa10>
   1ba3c:	vmul.f64	d16, d16, d17
   1ba40:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba44:	vldr	d17, [pc, #268]	; 1bb58 <flatcc_json_parser_double@@Base+0xa08>
   1ba48:	vmul.f64	d16, d16, d17
   1ba4c:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba50:	vldr	d17, [pc, #248]	; 1bb50 <flatcc_json_parser_double@@Base+0xa00>
   1ba54:	vmul.f64	d16, d16, d17
   1ba58:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba5c:	vldr	d17, [pc, #228]	; 1bb48 <flatcc_json_parser_double@@Base+0x9f8>
   1ba60:	vmul.f64	d16, d16, d17
   1ba64:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba68:	vldr	d17, [pc, #208]	; 1bb40 <flatcc_json_parser_double@@Base+0x9f0>
   1ba6c:	vmul.f64	d16, d16, d17
   1ba70:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba74:	vldr	d17, [pc, #188]	; 1bb38 <flatcc_json_parser_double@@Base+0x9e8>
   1ba78:	vmul.f64	d16, d16, d17
   1ba7c:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba80:	vldr	d17, [pc, #168]	; 1bb30 <flatcc_json_parser_double@@Base+0x9e0>
   1ba84:	vmul.f64	d16, d16, d17
   1ba88:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba8c:	vldr	d17, [pc, #148]	; 1bb28 <flatcc_json_parser_double@@Base+0x9d8>
   1ba90:	vmul.f64	d16, d16, d17
   1ba94:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1ba98:	vldr	d17, [pc, #128]	; 1bb20 <flatcc_json_parser_double@@Base+0x9d0>
   1ba9c:	vmul.f64	d16, d16, d17
   1baa0:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1baa4:	vldr	d17, [pc, #108]	; 1bb18 <flatcc_json_parser_double@@Base+0x9c8>
   1baa8:	vmul.f64	d16, d16, d17
   1baac:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1bab0:	vldr	d17, [pc, #88]	; 1bb10 <flatcc_json_parser_double@@Base+0x9c0>
   1bab4:	vmul.f64	d16, d16, d17
   1bab8:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1babc:	vldr	d17, [pc, #68]	; 1bb08 <flatcc_json_parser_double@@Base+0x9b8>
   1bac0:	vmul.f64	d16, d16, d17
   1bac4:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1bac8:	vldr	d17, [pc, #48]	; 1bb00 <flatcc_json_parser_double@@Base+0x9b0>
   1bacc:	vmul.f64	d16, d16, d17
   1bad0:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1bad4:	vldr	d17, [pc, #28]	; 1baf8 <flatcc_json_parser_double@@Base+0x9a8>
   1bad8:	vmul.f64	d16, d16, d17
   1badc:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1bae0:	vldr	d17, [pc, #176]	; 1bb98 <flatcc_json_parser_double@@Base+0xa48>
   1bae4:	vmul.f64	d16, d16, d17
   1bae8:	b	1b710 <flatcc_json_parser_double@@Base+0x5c0>
   1baec:	nop	{0}
   1baf0:	andeq	r0, r0, r0
   1baf4:	svcvc	0x00f00000	; IMB
   1baf8:	usatle	lr, #2, r0, asr #30
   1bafc:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   1bb00:	ldmvc	r5!, {r6, sl, fp, pc}
   1bb04:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1bb08:	addsvs	r3, r1, r0, lsl #26
   1bb0c:	mvnmi	r5, #228, 16	; 0xe40000
   1bb10:	strbvs	ip, [lr, -r0, lsl #16]
   1bb14:			; <UNDEFINED> instruction: 0x43abc16d
   1bb18:	ldrbhi	sl, [r8]
   1bb1c:	cmnmi	r6, #1459617792	; 0x57000000
   1bb20:	strbcc	r8, [r0, r0]!
   1bb24:	movtmi	ip, #4985	; 0x1379
   1bb28:	ldrtcs	r0, [r4], -r0
   1bb2c:	movwmi	r6, #52213	; 0xcbf5
   1bb30:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1bb34:	sbcsmi	fp, r6, #196, 24	; 0xc400
   1bb38:	strb	r0, [r0, #-0]
   1bb3c:	adcmi	r3, r2, #156	; 0x9c
   1bb40:	andge	r0, r0, #0
   1bb44:	rsbmi	r1, sp, #148, 20	; 0x94000
   1bb48:	stmda	r0, {}	; <UNPREDICTABLE>
   1bb4c:	eorsmi	r4, r7, #7733248	; 0x760000
   1bb50:	andcs	r0, r0, r0
   1bb54:	andmi	sl, r2, #95	; 0x5f
   1bb58:	andeq	r0, r0, r0
   1bb5c:	bicmi	ip, sp, r5, ror #26
   1bb60:	andeq	r0, r0, r0
   1bb64:	orrsmi	sp, r7, r4, lsl #15
   1bb68:	andeq	r0, r0, r0
   1bb6c:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   1bb70:	andeq	r0, r0, r0
   1bb74:	smlawbmi	lr, r0, r4, r8
   1bb78:	andeq	r0, r0, r0
   1bb7c:	rscsmi	r6, r8, r0, lsl #20
   1bb80:	andeq	r0, r0, r0
   1bb84:	sbcmi	r8, r3, r0, lsl #16
   1bb88:	andeq	r0, r0, r0
   1bb8c:	addmi	r4, pc, r0
   1bb90:	andeq	r0, r0, r0
   1bb94:	subsmi	r0, r9, r0
   1bb98:			; <UNDEFINED> instruction: 0x064dd592
   1bb9c:	strmi	pc, [r0], #207	; 0xcf

0001bba0 <flatcc_json_parser_float@@Base>:
   1bba0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bba4:	add	fp, sp, #24
   1bba8:	vpush	{d8-d9}
   1bbac:	sub	sp, sp, #8
   1bbb0:	mov	r8, r0
   1bbb4:	mov	r0, #0
   1bbb8:	mov	r6, r1
   1bbbc:	cmp	r1, r2
   1bbc0:	str	r0, [r3]
   1bbc4:	beq	1bc88 <flatcc_json_parser_float@@Base+0xe8>
   1bbc8:	mov	r0, r6
   1bbcc:	mov	r5, r2
   1bbd0:	mov	r7, r3
   1bbd4:	ldrb	r1, [r0], #1
   1bbd8:	cmp	r1, #45	; 0x2d
   1bbdc:	movne	r0, r6
   1bbe0:	sub	r2, r2, r0
   1bbe4:	cmp	r2, #2
   1bbe8:	blt	1bc14 <flatcc_json_parser_float@@Base+0x74>
   1bbec:	sub	r1, r1, #45	; 0x2d
   1bbf0:	clz	r1, r1
   1bbf4:	lsr	r1, r1, #5
   1bbf8:	ldrb	r1, [r6, r1]
   1bbfc:	cmp	r1, #46	; 0x2e
   1bc00:	beq	1bc9c <flatcc_json_parser_float@@Base+0xfc>
   1bc04:	cmp	r1, #48	; 0x30
   1bc08:	ldrbeq	r0, [r0, #1]
   1bc0c:	cmpeq	r0, #48	; 0x30
   1bc10:	beq	1bc9c <flatcc_json_parser_float@@Base+0xfc>
   1bc14:	sub	r1, r5, r6
   1bc18:	mov	r2, sp
   1bc1c:	mov	r0, r6
   1bc20:	bl	1b248 <flatcc_json_parser_double@@Base+0xf8>
   1bc24:	vldr	d16, [sp]
   1bc28:	mov	r4, r0
   1bc2c:	add	r0, pc, #176	; 0xb0
   1bc30:	vcmpe.f64	d16, #0.0
   1bc34:	vcvt.f32.f64	s16, d16
   1bc38:	vmrs	APSR_nzcv, fpscr
   1bc3c:	vmov.f32	s0, s16
   1bc40:	addmi	r0, r0, #4
   1bc44:	vldr	s18, [r0]
   1bc48:	bl	1291c <__isinff@plt>
   1bc4c:	cmp	r0, #0
   1bc50:	movne	r4, r6
   1bc54:	vseleq.f32	s0, s16, s18
   1bc58:	cmp	r4, #0
   1bc5c:	vstr	s0, [r7]
   1bc60:	cmpne	r4, r6
   1bc64:	bne	1bc8c <flatcc_json_parser_float@@Base+0xec>
   1bc68:	bl	1291c <__isinff@plt>
   1bc6c:	ldr	r1, [r8, #24]
   1bc70:	cmp	r0, #0
   1bc74:	beq	1bcac <flatcc_json_parser_float@@Base+0x10c>
   1bc78:	cmp	r1, #0
   1bc7c:	bne	1bcd0 <flatcc_json_parser_float@@Base+0x130>
   1bc80:	mov	r0, #7
   1bc84:	b	1bcb8 <flatcc_json_parser_float@@Base+0x118>
   1bc88:	mov	r4, r6
   1bc8c:	mov	r0, r4
   1bc90:	sub	sp, fp, #40	; 0x28
   1bc94:	vpop	{d8-d9}
   1bc98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bc9c:	ldr	r0, [r8, #24]
   1bca0:	cmp	r0, #0
   1bca4:	bne	1bcd0 <flatcc_json_parser_float@@Base+0x130>
   1bca8:	b	1bcb4 <flatcc_json_parser_float@@Base+0x114>
   1bcac:	cmp	r1, #0
   1bcb0:	bne	1bcd0 <flatcc_json_parser_float@@Base+0x130>
   1bcb4:	mov	r0, #6
   1bcb8:	str	r6, [r8, #36]	; 0x24
   1bcbc:	add	r2, r6, #1
   1bcc0:	ldr	r1, [r8, #4]
   1bcc4:	sub	r1, r2, r1
   1bcc8:	str	r1, [r8, #20]
   1bccc:	str	r0, [r8, #24]
   1bcd0:	mov	r4, r5
   1bcd4:	mov	r0, r4
   1bcd8:	sub	sp, fp, #40	; 0x28
   1bcdc:	vpop	{d8-d9}
   1bce0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bce4:	svcvc	0x00800000
   1bce8:			; <UNDEFINED> instruction: 0xff800000

0001bcec <flatcc_json_parser_integer@@Base>:
   1bcec:	push	{r4, r5, r6, r7, fp, lr}
   1bcf0:	add	fp, sp, #16
   1bcf4:	mov	ip, r1
   1bcf8:	cmp	r1, r2
   1bcfc:	beq	1bde8 <flatcc_json_parser_integer@@Base+0xfc>
   1bd00:	ldrb	r1, [ip]
   1bd04:	mov	r4, #0
   1bd08:	sub	r1, r1, #45	; 0x2d
   1bd0c:	clz	r1, r1
   1bd10:	lsr	r1, r1, #5
   1bd14:	str	r1, [r3]
   1bd18:	add	r1, ip, r1
   1bd1c:	cmp	r1, r2
   1bd20:	beq	1bdd4 <flatcc_json_parser_integer@@Base+0xe8>
   1bd24:	mov	lr, #10
   1bd28:	mov	r5, #0
   1bd2c:	ldrb	r6, [r1]
   1bd30:	sub	r7, r6, #48	; 0x30
   1bd34:	uxtb	r7, r7
   1bd38:	cmp	r7, #9
   1bd3c:	bhi	1bdf0 <flatcc_json_parser_integer@@Base+0x104>
   1bd40:	add	r7, r5, r5, lsl #2
   1bd44:	lsl	r7, r7, #1
   1bd48:	umlal	r6, r7, r4, lr
   1bd4c:	subs	r6, r6, #48	; 0x30
   1bd50:	sbc	r7, r7, #0
   1bd54:	subs	r4, r6, r4
   1bd58:	sbcs	r4, r7, r5
   1bd5c:	bcc	1be00 <flatcc_json_parser_integer@@Base+0x114>
   1bd60:	add	r1, r1, #1
   1bd64:	mov	r4, r6
   1bd68:	mov	r5, r7
   1bd6c:	cmp	r2, r1
   1bd70:	bne	1bd2c <flatcc_json_parser_integer@@Base+0x40>
   1bd74:	mov	r3, #0
   1bd78:	mov	r1, r2
   1bd7c:	mov	r4, r6
   1bd80:	mov	r5, r7
   1bd84:	cmp	r1, ip
   1bd88:	beq	1bde8 <flatcc_json_parser_integer@@Base+0xfc>
   1bd8c:	cmp	r3, #0
   1bd90:	beq	1be1c <flatcc_json_parser_integer@@Base+0x130>
   1bd94:	ldrb	r3, [r1]
   1bd98:	cmp	r3, #46	; 0x2e
   1bd9c:	cmpne	r3, #101	; 0x65
   1bda0:	bne	1be14 <flatcc_json_parser_integer@@Base+0x128>
   1bda4:	ldr	r3, [r0, #24]
   1bda8:	cmp	r3, #0
   1bdac:	bne	1be0c <flatcc_json_parser_integer@@Base+0x120>
   1bdb0:	str	r1, [r0, #36]	; 0x24
   1bdb4:	add	r1, r1, #1
   1bdb8:	mov	r3, #12
   1bdbc:	ldr	r7, [r0, #4]
   1bdc0:	sub	r1, r1, r7
   1bdc4:	str	r1, [r0, #20]
   1bdc8:	str	r3, [r0, #24]
   1bdcc:	mov	r0, r2
   1bdd0:	pop	{r4, r5, r6, r7, fp, pc}
   1bdd4:	mov	r1, r2
   1bdd8:	mov	r5, #0
   1bddc:	mov	r3, #0
   1bde0:	cmp	r1, ip
   1bde4:	bne	1bd8c <flatcc_json_parser_integer@@Base+0xa0>
   1bde8:	mov	r0, ip
   1bdec:	pop	{r4, r5, r6, r7, fp, pc}
   1bdf0:	mov	r3, #1
   1bdf4:	cmp	r1, ip
   1bdf8:	bne	1bd8c <flatcc_json_parser_integer@@Base+0xa0>
   1bdfc:	b	1bde8 <flatcc_json_parser_integer@@Base+0xfc>
   1be00:	ldr	r7, [r0, #24]
   1be04:	cmp	r7, #0
   1be08:	beq	1be30 <flatcc_json_parser_integer@@Base+0x144>
   1be0c:	mov	r0, r2
   1be10:	pop	{r4, r5, r6, r7, fp, pc}
   1be14:	cmp	r3, #69	; 0x45
   1be18:	beq	1bda4 <flatcc_json_parser_integer@@Base+0xb8>
   1be1c:	ldr	r0, [fp, #8]
   1be20:	mov	ip, r1
   1be24:	strd	r4, [r0]
   1be28:	mov	r0, ip
   1be2c:	pop	{r4, r5, r6, r7, fp, pc}
   1be30:	str	r1, [r0, #36]	; 0x24
   1be34:	cmp	r3, #0
   1be38:	mov	r7, #8
   1be3c:	add	r1, r1, #1
   1be40:	ldr	r3, [r0, #4]
   1be44:	movweq	r7, #7
   1be48:	sub	r1, r1, r3
   1be4c:	str	r1, [r0, #20]
   1be50:	str	r7, [r0, #24]
   1be54:	mov	r0, r2
   1be58:	pop	{r4, r5, r6, r7, fp, pc}

0001be5c <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1be5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be60:	add	fp, sp, #28
   1be64:	sub	sp, sp, #28
   1be68:	ldr	r9, [fp, #8]
   1be6c:	mov	r6, r3
   1be70:	mov	r4, r2
   1be74:	mov	r5, r0
   1be78:	cmp	r1, r2
   1be7c:	beq	1bec4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1be80:	ldrb	r0, [r1]
   1be84:	cmp	r0, #34	; 0x22
   1be88:	bne	1bec4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1be8c:	add	sl, r1, #1
   1be90:	cmp	sl, r4
   1be94:	beq	1bed0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   1be98:	mov	r7, sl
   1be9c:	ldrb	r1, [r7]
   1bea0:	cmp	r1, #32
   1bea4:	bcc	1c114 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   1bea8:	cmp	r1, #34	; 0x22
   1beac:	cmpne	r1, #92	; 0x5c
   1beb0:	beq	1bf74 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x118>
   1beb4:	add	r7, r7, #1
   1beb8:	cmp	r4, r7
   1bebc:	bne	1be9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   1bec0:	b	1bed0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   1bec4:	ldr	r0, [r5, #24]
   1bec8:	cmp	r0, #0
   1becc:	beq	1bee4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x88>
   1bed0:	ldr	r0, [r5, #24]
   1bed4:	cmp	r0, #0
   1bed8:	mov	r0, r4
   1bedc:	bne	1bf30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   1bee0:	b	1bf10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xb4>
   1bee4:	str	r1, [r5, #36]	; 0x24
   1bee8:	add	r1, r1, #1
   1beec:	mov	r0, #16
   1bef0:	ldr	r2, [r5, #4]
   1bef4:	sub	r1, r1, r2
   1bef8:	str	r1, [r5, #20]
   1befc:	str	r0, [r5, #24]
   1bf00:	ldr	r0, [r5, #24]
   1bf04:	cmp	r0, #0
   1bf08:	mov	r0, r4
   1bf0c:	bne	1bf30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   1bf10:	str	r4, [r5, #36]	; 0x24
   1bf14:	mov	r0, #20
   1bf18:	add	r2, r4, #1
   1bf1c:	ldr	r1, [r5, #4]
   1bf20:	sub	r1, r2, r1
   1bf24:	str	r1, [r5, #20]
   1bf28:	str	r0, [r5, #24]
   1bf2c:	mov	r0, r4
   1bf30:	mov	r1, #0
   1bf34:	str	r1, [r6]
   1bf38:	ldr	r1, [r5, #24]
   1bf3c:	cmp	r1, #0
   1bf40:	bne	1bf68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   1bf44:	str	r0, [r5, #36]	; 0x24
   1bf48:	mov	r1, #31
   1bf4c:	cmp	r9, #0
   1bf50:	add	r0, r0, #1
   1bf54:	ldr	r2, [r5, #4]
   1bf58:	movwne	r1, #32
   1bf5c:	sub	r0, r0, r2
   1bf60:	str	r0, [r5, #20]
   1bf64:	str	r1, [r5, #24]
   1bf68:	mov	r0, r4
   1bf6c:	sub	sp, fp, #28
   1bf70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf74:	cmp	r4, r7
   1bf78:	mov	r0, r4
   1bf7c:	beq	1bf30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   1bf80:	cmp	r1, #34	; 0x22
   1bf84:	bne	1bfb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x154>
   1bf88:	sub	r1, r7, sl
   1bf8c:	and	r0, r1, #3
   1bf90:	str	r1, [sp, #20]
   1bf94:	lsr	r1, r1, #2
   1bf98:	add	r8, r1, r1, lsl #1
   1bf9c:	cmp	r0, #2
   1bfa0:	beq	1bfb8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x15c>
   1bfa4:	cmp	r0, #3
   1bfa8:	addeq	r8, r8, #2
   1bfac:	b	1bfbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x160>
   1bfb0:	mov	r0, r7
   1bfb4:	b	1bf30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   1bfb8:	add	r8, r8, #1
   1bfbc:	ldr	r0, [r5]
   1bfc0:	mov	r1, #1
   1bfc4:	mov	r2, #1
   1bfc8:	mvn	r3, #0
   1bfcc:	bl	160d4 <flatcc_builder_start_vector@@Base>
   1bfd0:	cmp	r0, #0
   1bfd4:	beq	1c014 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1bfd8:	mov	r0, #0
   1bfdc:	str	r0, [r6]
   1bfe0:	ldr	r0, [r5, #24]
   1bfe4:	cmp	r0, #0
   1bfe8:	bne	1bf68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   1bfec:	mov	r0, #33	; 0x21
   1bff0:	str	r7, [r5, #36]	; 0x24
   1bff4:	add	r2, r7, #1
   1bff8:	ldr	r1, [r5, #4]
   1bffc:	sub	r1, r2, r1
   1c000:	str	r1, [r5, #20]
   1c004:	str	r0, [r5, #24]
   1c008:	mov	r0, r4
   1c00c:	sub	sp, fp, #28
   1c010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c014:	ldr	r0, [r5]
   1c018:	mov	r1, r8
   1c01c:	bl	15580 <flatcc_builder_extend_vector@@Base>
   1c020:	cmp	r0, #0
   1c024:	beq	1bfd8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x17c>
   1c028:	movw	r2, #65264	; 0xfef0
   1c02c:	mov	r1, r8
   1c030:	movw	r8, #65008	; 0xfdf0
   1c034:	str	r0, [sp]
   1c038:	str	r0, [sp, #12]
   1c03c:	ldr	r0, [sp, #20]
   1c040:	cmp	r9, #0
   1c044:	add	lr, sp, #24
   1c048:	mov	ip, sl
   1c04c:	movt	r2, #1
   1c050:	movt	r8, #1
   1c054:	str	r1, [sp, #4]
   1c058:	movne	r8, r2
   1c05c:	cmp	r1, #0
   1c060:	mvneq	r1, #0
   1c064:	str	r1, [sp, #16]
   1c068:	mov	r1, #0
   1c06c:	str	r0, [sp, #8]
   1c070:	cmp	r0, r1
   1c074:	beq	1c134 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   1c078:	ldrb	r2, [ip, r1]
   1c07c:	ldrb	r3, [r8, r2]
   1c080:	cmp	r3, #64	; 0x40
   1c084:	strb	r3, [lr, r1]
   1c088:	bcc	1c0a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x244>
   1c08c:	cmp	r3, #65	; 0x41
   1c090:	bne	1c170 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x314>
   1c094:	sub	r1, r1, #1
   1c098:	sub	r0, r0, #1
   1c09c:	add	ip, ip, #1
   1c0a0:	add	r1, r1, #1
   1c0a4:	cmp	r1, #4
   1c0a8:	bcc	1c070 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   1c0ac:	ldr	lr, [sp, #16]
   1c0b0:	cmp	lr, #3
   1c0b4:	bcc	1c164 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x308>
   1c0b8:	ldrb	r2, [sp, #25]
   1c0bc:	ldrb	r1, [sp, #24]
   1c0c0:	subs	lr, lr, #3
   1c0c4:	sub	r0, r0, #4
   1c0c8:	add	ip, ip, #4
   1c0cc:	str	lr, [sp, #16]
   1c0d0:	add	lr, sp, #24
   1c0d4:	lsr	r3, r2, #4
   1c0d8:	orr	r1, r3, r1, lsl #2
   1c0dc:	ldr	r3, [sp, #12]
   1c0e0:	strb	r1, [r3]
   1c0e4:	ldrb	r1, [sp, #26]
   1c0e8:	lsr	r1, r1, #2
   1c0ec:	orr	r1, r1, r2, lsl #4
   1c0f0:	strb	r1, [r3, #1]
   1c0f4:	ldrb	r1, [sp, #26]
   1c0f8:	ldrb	r2, [sp, #27]
   1c0fc:	orr	r1, r2, r1, lsl #6
   1c100:	strb	r1, [r3, #2]
   1c104:	add	r3, r3, #3
   1c108:	str	r3, [sp, #12]
   1c10c:	bne	1c068 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   1c110:	b	1c220 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c4>
   1c114:	ldr	r0, [r5, #24]
   1c118:	cmp	r0, #0
   1c11c:	mov	r0, r4
   1c120:	bne	1bf30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   1c124:	str	r7, [r5, #36]	; 0x24
   1c128:	mov	r0, #17
   1c12c:	add	r2, r7, #1
   1c130:	b	1bf1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc0>
   1c134:	mov	r1, r0
   1c138:	mov	r3, r0
   1c13c:	ldr	r2, [sp, #16]
   1c140:	sub	r0, r0, r3
   1c144:	cmp	r1, #0
   1c148:	beq	1c220 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c4>
   1c14c:	cmp	r1, #3
   1c150:	beq	1c1b0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x354>
   1c154:	cmp	r1, #2
   1c158:	ldrbeq	r1, [sp, #25]
   1c15c:	tsteq	r1, #15
   1c160:	beq	1c208 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   1c164:	ldr	r0, [sp, #20]
   1c168:	ldr	r1, [sp, #8]
   1c16c:	b	1c230 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d4>
   1c170:	cmp	r3, #66	; 0x42
   1c174:	bne	1c1f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x394>
   1c178:	add	r2, r1, #1
   1c17c:	mov	r3, r2
   1c180:	cmp	r2, r0
   1c184:	bcs	1c13c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   1c188:	cmp	r3, #7
   1c18c:	bhi	1c13c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   1c190:	ldrb	r2, [ip, r3]
   1c194:	ldrb	r2, [r8, r2]
   1c198:	sub	r2, r2, #65	; 0x41
   1c19c:	uxtb	lr, r2
   1c1a0:	add	r2, r3, #1
   1c1a4:	cmp	lr, #2
   1c1a8:	bcc	1c17c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
   1c1ac:	b	1c13c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   1c1b0:	cmp	r2, #2
   1c1b4:	bcc	1c164 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x308>
   1c1b8:	ldrb	r1, [sp, #26]
   1c1bc:	ands	r2, r1, #3
   1c1c0:	bne	1c164 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x308>
   1c1c4:	ldrb	r3, [sp, #25]
   1c1c8:	ldrb	ip, [sp, #24]
   1c1cc:	lsl	r2, r3, #4
   1c1d0:	orr	r1, r2, r1, lsr #2
   1c1d4:	ldr	r2, [sp, #12]
   1c1d8:	strb	r1, [r2, #1]
   1c1dc:	lsr	r1, r3, #4
   1c1e0:	orr	r1, r1, ip, lsl #2
   1c1e4:	strb	r1, [r2]
   1c1e8:	add	r2, r2, #2
   1c1ec:	b	1c21c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
   1c1f0:	mov	r3, r1
   1c1f4:	ldr	r2, [sp, #16]
   1c1f8:	sub	r0, r0, r3
   1c1fc:	cmp	r1, #0
   1c200:	bne	1c14c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f0>
   1c204:	b	1c220 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c4>
   1c208:	ldrb	r2, [sp, #24]
   1c20c:	lsl	r2, r2, #2
   1c210:	orr	r1, r2, r1, lsr #4
   1c214:	ldr	r2, [sp, #12]
   1c218:	strb	r1, [r2], #1
   1c21c:	str	r2, [sp, #12]
   1c220:	cmp	r0, #0
   1c224:	beq	1c23c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3e0>
   1c228:	mov	r1, r0
   1c22c:	ldr	r0, [sp, #20]
   1c230:	sub	r0, r0, r1
   1c234:	add	r0, sl, r0
   1c238:	b	1bf30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   1c23c:	ldr	r0, [sp]
   1c240:	ldr	r1, [sp, #12]
   1c244:	sub	r0, r1, r0
   1c248:	ldr	r1, [sp, #4]
   1c24c:	cmp	r1, r0
   1c250:	bls	1c268 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   1c254:	sub	r1, r1, r0
   1c258:	ldr	r0, [r5]
   1c25c:	bl	15f08 <flatcc_builder_truncate_vector@@Base>
   1c260:	cmp	r0, #0
   1c264:	bne	1bfd8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x17c>
   1c268:	ldr	r0, [r5]
   1c26c:	bl	17354 <flatcc_builder_end_vector@@Base>
   1c270:	cmp	r0, #0
   1c274:	str	r0, [r6]
   1c278:	beq	1bfd8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x17c>
   1c27c:	ldrb	r0, [r7]
   1c280:	cmp	r0, #34	; 0x22
   1c284:	bne	1c298 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x43c>
   1c288:	add	r4, r7, #1
   1c28c:	mov	r0, r4
   1c290:	sub	sp, fp, #28
   1c294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c298:	ldr	r0, [r5, #24]
   1c29c:	cmp	r0, #0
   1c2a0:	bne	1bf68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   1c2a4:	mov	r0, #20
   1c2a8:	b	1bff0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x194>

0001c2ac <flatcc_json_parser_build_string@@Base>:
   1c2ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2b0:	add	fp, sp, #28
   1c2b4:	sub	sp, sp, #4
   1c2b8:	mov	sl, r3
   1c2bc:	mov	r4, r2
   1c2c0:	mov	r5, r0
   1c2c4:	cmp	r1, r2
   1c2c8:	beq	1c324 <flatcc_json_parser_build_string@@Base+0x78>
   1c2cc:	ldrb	r0, [r1]
   1c2d0:	cmp	r0, #34	; 0x22
   1c2d4:	bne	1c324 <flatcc_json_parser_build_string@@Base+0x78>
   1c2d8:	add	r1, r1, #1
   1c2dc:	mov	r6, r4
   1c2e0:	cmp	r1, r4
   1c2e4:	beq	1c334 <flatcc_json_parser_build_string@@Base+0x88>
   1c2e8:	mov	r6, r1
   1c2ec:	ldrb	r0, [r6]
   1c2f0:	cmp	r0, #32
   1c2f4:	bcc	1c568 <flatcc_json_parser_build_string@@Base+0x2bc>
   1c2f8:	cmp	r0, #34	; 0x22
   1c2fc:	cmpne	r0, #92	; 0x5c
   1c300:	beq	1c468 <flatcc_json_parser_build_string@@Base+0x1bc>
   1c304:	add	r6, r6, #1
   1c308:	cmp	r4, r6
   1c30c:	bne	1c2ec <flatcc_json_parser_build_string@@Base+0x40>
   1c310:	mov	r6, r1
   1c314:	ldr	r0, [r5, #24]
   1c318:	cmp	r0, #0
   1c31c:	bne	1c35c <flatcc_json_parser_build_string@@Base+0xb0>
   1c320:	b	1c340 <flatcc_json_parser_build_string@@Base+0x94>
   1c324:	ldr	r0, [r5, #24]
   1c328:	mov	r6, r4
   1c32c:	cmp	r0, #0
   1c330:	beq	1c438 <flatcc_json_parser_build_string@@Base+0x18c>
   1c334:	ldr	r0, [r5, #24]
   1c338:	cmp	r0, #0
   1c33c:	bne	1c35c <flatcc_json_parser_build_string@@Base+0xb0>
   1c340:	str	r4, [r5, #36]	; 0x24
   1c344:	add	r2, r4, #1
   1c348:	mov	r0, #20
   1c34c:	ldr	r1, [r5, #4]
   1c350:	sub	r1, r2, r1
   1c354:	str	r1, [r5, #20]
   1c358:	str	r0, [r5, #24]
   1c35c:	mov	r7, r4
   1c360:	ldr	r0, [r5]
   1c364:	bl	164f0 <flatcc_builder_start_string@@Base>
   1c368:	cmp	r0, #0
   1c36c:	bne	1c58c <flatcc_json_parser_build_string@@Base+0x2e0>
   1c370:	ldr	r0, [r5]
   1c374:	sub	r2, r7, r6
   1c378:	mov	r1, r6
   1c37c:	bl	15d60 <flatcc_builder_append_string@@Base>
   1c380:	cmp	r0, #0
   1c384:	beq	1c58c <flatcc_json_parser_build_string@@Base+0x2e0>
   1c388:	cmp	r7, r4
   1c38c:	mov	r6, r4
   1c390:	beq	1c50c <flatcc_json_parser_build_string@@Base+0x260>
   1c394:	mov	r8, sp
   1c398:	add	r9, r8, #1
   1c39c:	ldrb	r0, [r7]
   1c3a0:	cmp	r0, #34	; 0x22
   1c3a4:	beq	1c508 <flatcc_json_parser_build_string@@Base+0x25c>
   1c3a8:	mov	r0, r5
   1c3ac:	mov	r1, r7
   1c3b0:	mov	r2, r4
   1c3b4:	mov	r3, r8
   1c3b8:	bl	19980 <flatcc_json_parser_string_escape@@Base>
   1c3bc:	mov	r6, r0
   1c3c0:	ldr	r0, [r5]
   1c3c4:	ldrb	r2, [sp]
   1c3c8:	mov	r1, r9
   1c3cc:	bl	15d60 <flatcc_builder_append_string@@Base>
   1c3d0:	cmp	r0, #0
   1c3d4:	beq	1c560 <flatcc_json_parser_build_string@@Base+0x2b4>
   1c3d8:	cmp	r6, r4
   1c3dc:	beq	1c4b4 <flatcc_json_parser_build_string@@Base+0x208>
   1c3e0:	mov	r7, r6
   1c3e4:	ldrb	r0, [r7]
   1c3e8:	cmp	r0, #32
   1c3ec:	bcc	1c4d4 <flatcc_json_parser_build_string@@Base+0x228>
   1c3f0:	cmp	r0, #34	; 0x22
   1c3f4:	cmpne	r0, #92	; 0x5c
   1c3f8:	beq	1c40c <flatcc_json_parser_build_string@@Base+0x160>
   1c3fc:	add	r7, r7, #1
   1c400:	cmp	r4, r7
   1c404:	bne	1c3e4 <flatcc_json_parser_build_string@@Base+0x138>
   1c408:	b	1c4b4 <flatcc_json_parser_build_string@@Base+0x208>
   1c40c:	cmp	r4, r7
   1c410:	beq	1c500 <flatcc_json_parser_build_string@@Base+0x254>
   1c414:	ldr	r0, [r5]
   1c418:	sub	r2, r7, r6
   1c41c:	mov	r1, r6
   1c420:	bl	15d60 <flatcc_builder_append_string@@Base>
   1c424:	cmp	r0, #0
   1c428:	beq	1c58c <flatcc_json_parser_build_string@@Base+0x2e0>
   1c42c:	cmp	r4, r7
   1c430:	bne	1c39c <flatcc_json_parser_build_string@@Base+0xf0>
   1c434:	b	1c500 <flatcc_json_parser_build_string@@Base+0x254>
   1c438:	str	r1, [r5, #36]	; 0x24
   1c43c:	add	r1, r1, #1
   1c440:	mov	r0, #16
   1c444:	mov	r6, r4
   1c448:	ldr	r2, [r5, #4]
   1c44c:	sub	r1, r1, r2
   1c450:	str	r1, [r5, #20]
   1c454:	str	r0, [r5, #24]
   1c458:	ldr	r0, [r5, #24]
   1c45c:	cmp	r0, #0
   1c460:	bne	1c35c <flatcc_json_parser_build_string@@Base+0xb0>
   1c464:	b	1c340 <flatcc_json_parser_build_string@@Base+0x94>
   1c468:	cmp	r4, r6
   1c46c:	beq	1c574 <flatcc_json_parser_build_string@@Base+0x2c8>
   1c470:	cmp	r0, #34	; 0x22
   1c474:	bne	1c4ac <flatcc_json_parser_build_string@@Base+0x200>
   1c478:	ldr	r0, [r5]
   1c47c:	sub	r2, r6, r1
   1c480:	bl	18638 <flatcc_builder_create_string@@Base>
   1c484:	cmp	r6, r4
   1c488:	str	r0, [sl]
   1c48c:	beq	1c520 <flatcc_json_parser_build_string@@Base+0x274>
   1c490:	ldrb	r0, [r6]
   1c494:	cmp	r0, #34	; 0x22
   1c498:	bne	1c520 <flatcc_json_parser_build_string@@Base+0x274>
   1c49c:	add	r4, r6, #1
   1c4a0:	mov	r0, r4
   1c4a4:	sub	sp, fp, #28
   1c4a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4ac:	mov	r7, r6
   1c4b0:	b	1c578 <flatcc_json_parser_build_string@@Base+0x2cc>
   1c4b4:	ldr	r0, [r5, #24]
   1c4b8:	mov	r6, r4
   1c4bc:	cmp	r0, #0
   1c4c0:	bne	1c50c <flatcc_json_parser_build_string@@Base+0x260>
   1c4c4:	str	r4, [r5, #36]	; 0x24
   1c4c8:	mov	r0, #20
   1c4cc:	add	r2, r4, #1
   1c4d0:	b	1c4f0 <flatcc_json_parser_build_string@@Base+0x244>
   1c4d4:	ldr	r0, [r5, #24]
   1c4d8:	mov	r6, r4
   1c4dc:	cmp	r0, #0
   1c4e0:	bne	1c50c <flatcc_json_parser_build_string@@Base+0x260>
   1c4e4:	str	r7, [r5, #36]	; 0x24
   1c4e8:	mov	r0, #17
   1c4ec:	add	r2, r7, #1
   1c4f0:	ldr	r1, [r5, #4]
   1c4f4:	sub	r1, r2, r1
   1c4f8:	str	r1, [r5, #20]
   1c4fc:	str	r0, [r5, #24]
   1c500:	mov	r6, r4
   1c504:	b	1c50c <flatcc_json_parser_build_string@@Base+0x260>
   1c508:	mov	r6, r7
   1c50c:	ldr	r0, [r5]
   1c510:	bl	187a4 <flatcc_builder_end_string@@Base>
   1c514:	cmp	r6, r4
   1c518:	str	r0, [sl]
   1c51c:	bne	1c490 <flatcc_json_parser_build_string@@Base+0x1e4>
   1c520:	ldr	r0, [r5, #24]
   1c524:	cmp	r0, #0
   1c528:	beq	1c538 <flatcc_json_parser_build_string@@Base+0x28c>
   1c52c:	mov	r0, r4
   1c530:	sub	sp, fp, #28
   1c534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c538:	str	r6, [r5, #36]	; 0x24
   1c53c:	add	r2, r6, #1
   1c540:	mov	r0, #20
   1c544:	ldr	r1, [r5, #4]
   1c548:	sub	r1, r2, r1
   1c54c:	str	r1, [r5, #20]
   1c550:	str	r0, [r5, #24]
   1c554:	mov	r0, r4
   1c558:	sub	sp, fp, #28
   1c55c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c560:	mov	r4, r6
   1c564:	b	1c590 <flatcc_json_parser_build_string@@Base+0x2e4>
   1c568:	ldr	r0, [r5, #24]
   1c56c:	cmp	r0, #0
   1c570:	beq	1c5a4 <flatcc_json_parser_build_string@@Base+0x2f8>
   1c574:	mov	r7, r4
   1c578:	mov	r6, r1
   1c57c:	ldr	r0, [r5]
   1c580:	bl	164f0 <flatcc_builder_start_string@@Base>
   1c584:	cmp	r0, #0
   1c588:	beq	1c370 <flatcc_json_parser_build_string@@Base+0xc4>
   1c58c:	mov	r4, r7
   1c590:	mov	r0, #0
   1c594:	str	r0, [sl]
   1c598:	mov	r0, r4
   1c59c:	sub	sp, fp, #28
   1c5a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5a4:	str	r6, [r5, #36]	; 0x24
   1c5a8:	add	r3, r6, #1
   1c5ac:	mov	r0, #17
   1c5b0:	mov	r7, r4
   1c5b4:	ldr	r2, [r5, #4]
   1c5b8:	sub	r2, r3, r2
   1c5bc:	str	r2, [r5, #20]
   1c5c0:	str	r0, [r5, #24]
   1c5c4:	b	1c578 <flatcc_json_parser_build_string@@Base+0x2cc>

0001c5c8 <flatcc_json_parser_prepare_unions@@Base>:
   1c5c8:	push	{r4, r5, r6, r7, fp, lr}
   1c5cc:	add	fp, sp, #16
   1c5d0:	mov	r5, r1
   1c5d4:	mov	r6, r0
   1c5d8:	add	r0, r3, r3, lsl #1
   1c5dc:	mov	r1, #8
   1c5e0:	mov	r7, r3
   1c5e4:	mov	r4, r2
   1c5e8:	add	r1, r1, r0, lsl #3
   1c5ec:	ldr	r0, [r6]
   1c5f0:	bl	14924 <flatcc_builder_enter_user_frame@@Base>
   1c5f4:	mov	r1, r0
   1c5f8:	ldr	r0, [fp, #8]
   1c5fc:	cmp	r1, #0
   1c600:	str	r1, [r0]
   1c604:	beq	1c620 <flatcc_json_parser_prepare_unions@@Base+0x58>
   1c608:	ldr	r0, [r6]
   1c60c:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1c610:	mov	r4, r5
   1c614:	str	r7, [r0]
   1c618:	mov	r0, r4
   1c61c:	pop	{r4, r5, r6, r7, fp, pc}
   1c620:	ldr	r0, [r6, #24]
   1c624:	cmp	r0, #0
   1c628:	beq	1c634 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   1c62c:	mov	r0, r4
   1c630:	pop	{r4, r5, r6, r7, fp, pc}
   1c634:	str	r5, [r6, #36]	; 0x24
   1c638:	add	r2, r5, #1
   1c63c:	mov	r0, #33	; 0x21
   1c640:	ldr	r1, [r6, #4]
   1c644:	sub	r1, r2, r1
   1c648:	str	r1, [r6, #20]
   1c64c:	str	r0, [r6, #24]
   1c650:	mov	r0, r4
   1c654:	pop	{r4, r5, r6, r7, fp, pc}

0001c658 <flatcc_json_parser_finalize_unions@@Base>:
   1c658:	push	{r4, r5, r6, r7, fp, lr}
   1c65c:	add	fp, sp, #16
   1c660:	mov	r6, r0
   1c664:	ldr	r0, [r0]
   1c668:	mov	r7, r1
   1c66c:	mov	r1, r3
   1c670:	mov	r5, r3
   1c674:	mov	r4, r2
   1c678:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1c67c:	ldr	r0, [r0, #4]
   1c680:	cmp	r0, #0
   1c684:	beq	1c6b4 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   1c688:	ldr	r0, [r6, #24]
   1c68c:	cmp	r0, #0
   1c690:	bne	1c6b8 <flatcc_json_parser_finalize_unions@@Base+0x60>
   1c694:	str	r7, [r6, #36]	; 0x24
   1c698:	add	r2, r7, #1
   1c69c:	mov	r0, #27
   1c6a0:	ldr	r1, [r6, #4]
   1c6a4:	sub	r1, r2, r1
   1c6a8:	str	r1, [r6, #20]
   1c6ac:	str	r0, [r6, #24]
   1c6b0:	b	1c6b8 <flatcc_json_parser_finalize_unions@@Base+0x60>
   1c6b4:	mov	r4, r7
   1c6b8:	ldr	r0, [r6]
   1c6bc:	mov	r1, r5
   1c6c0:	bl	14a30 <flatcc_builder_exit_user_frame_at@@Base>
   1c6c4:	mov	r0, r4
   1c6c8:	pop	{r4, r5, r6, r7, fp, pc}

0001c6cc <flatcc_json_parser_union@@Base>:
   1c6cc:	push	{r4, r5, r6, r7, fp, lr}
   1c6d0:	add	fp, sp, #16
   1c6d4:	sub	sp, sp, #16
   1c6d8:	mov	r6, r1
   1c6dc:	mov	r5, r0
   1c6e0:	ldr	r0, [r0]
   1c6e4:	ldr	r1, [fp, #12]
   1c6e8:	mov	r7, r3
   1c6ec:	mov	r4, r2
   1c6f0:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1c6f4:	add	r2, r0, #8
   1c6f8:	add	r3, r7, r7, lsl #1
   1c6fc:	mov	r1, r2
   1c700:	ldr	r7, [r1, r3, lsl #3]!
   1c704:	cmp	r7, #0
   1c708:	beq	1c740 <flatcc_json_parser_union@@Base+0x74>
   1c70c:	ldr	r0, [r5, #24]
   1c710:	cmp	r0, #0
   1c714:	bne	1c810 <flatcc_json_parser_union@@Base+0x144>
   1c718:	mov	r0, #28
   1c71c:	str	r6, [r5, #36]	; 0x24
   1c720:	add	r2, r6, #1
   1c724:	ldr	r1, [r5, #4]
   1c728:	sub	r1, r2, r1
   1c72c:	str	r1, [r5, #20]
   1c730:	str	r0, [r5, #24]
   1c734:	mov	r0, r4
   1c738:	sub	sp, fp, #16
   1c73c:	pop	{r4, r5, r6, r7, fp, pc}
   1c740:	add	r2, r2, r3, lsl #3
   1c744:	ldrb	r3, [r2, #12]
   1c748:	cmp	r3, #0
   1c74c:	beq	1c7c4 <flatcc_json_parser_union@@Base+0xf8>
   1c750:	ldrb	r3, [r2, #13]
   1c754:	cmp	r3, #0
   1c758:	strb	r3, [sp, #8]
   1c75c:	beq	1c804 <flatcc_json_parser_union@@Base+0x138>
   1c760:	ldr	r1, [r0, #4]
   1c764:	ldr	r7, [fp, #16]
   1c768:	mov	r2, r4
   1c76c:	sub	r1, r1, #1
   1c770:	str	r1, [r0, #4]
   1c774:	add	r0, sp, #8
   1c778:	mov	r1, r6
   1c77c:	add	r0, r0, #4
   1c780:	str	r0, [sp]
   1c784:	mov	r0, r5
   1c788:	blx	r7
   1c78c:	cmp	r0, r4
   1c790:	beq	1c810 <flatcc_json_parser_union@@Base+0x144>
   1c794:	mov	r6, r0
   1c798:	ldr	r1, [fp, #8]
   1c79c:	ldr	r0, [r5]
   1c7a0:	ldr	r2, [sp, #8]
   1c7a4:	ldr	r3, [sp, #12]
   1c7a8:	bl	1776c <flatcc_builder_table_add_union@@Base>
   1c7ac:	cmp	r0, #0
   1c7b0:	bne	1c70c <flatcc_json_parser_union@@Base+0x40>
   1c7b4:	mov	r4, r6
   1c7b8:	mov	r0, r4
   1c7bc:	sub	sp, fp, #16
   1c7c0:	pop	{r4, r5, r6, r7, fp, pc}
   1c7c4:	ldr	r3, [r0, #4]
   1c7c8:	add	r3, r3, #1
   1c7cc:	str	r3, [r0, #4]
   1c7d0:	ldr	r0, [r5, #16]
   1c7d4:	str	r0, [r2, #8]
   1c7d8:	ldr	r0, [r5, #4]
   1c7dc:	str	r0, [r2, #4]
   1c7e0:	str	r6, [r1]
   1c7e4:	mov	r0, r5
   1c7e8:	mov	r1, r6
   1c7ec:	mov	r2, r4
   1c7f0:	bl	1a358 <flatcc_json_parser_generic_json@@Base>
   1c7f4:	mov	r4, r0
   1c7f8:	mov	r0, r4
   1c7fc:	sub	sp, fp, #16
   1c800:	pop	{r4, r5, r6, r7, fp, pc}
   1c804:	ldr	r0, [r5, #24]
   1c808:	cmp	r0, #0
   1c80c:	beq	1c81c <flatcc_json_parser_union@@Base+0x150>
   1c810:	mov	r0, r4
   1c814:	sub	sp, fp, #16
   1c818:	pop	{r4, r5, r6, r7, fp, pc}
   1c81c:	mov	r0, #25
   1c820:	b	1c71c <flatcc_json_parser_union@@Base+0x50>

0001c824 <flatcc_json_parser_union_type@@Base>:
   1c824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c828:	add	fp, sp, #28
   1c82c:	sub	sp, sp, #20
   1c830:	mov	r8, r1
   1c834:	mov	r5, r0
   1c838:	ldr	r0, [r0]
   1c83c:	ldr	r1, [fp, #12]
   1c840:	mov	r6, r3
   1c844:	mov	r4, r2
   1c848:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1c84c:	add	r2, r0, #8
   1c850:	add	r3, r6, r6, lsl #1
   1c854:	mov	r9, r0
   1c858:	add	sl, r2, r3, lsl #3
   1c85c:	mov	r0, sl
   1c860:	ldrb	r1, [r0, #12]!
   1c864:	cmp	r1, #0
   1c868:	beq	1c884 <flatcc_json_parser_union_type@@Base+0x60>
   1c86c:	ldr	r0, [r5, #24]
   1c870:	cmp	r0, #0
   1c874:	beq	1c96c <flatcc_json_parser_union_type@@Base+0x148>
   1c878:	mov	r0, r4
   1c87c:	sub	sp, fp, #28
   1c880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c884:	mov	r1, #1
   1c888:	mov	r6, #0
   1c88c:	mov	lr, sl
   1c890:	cmp	r8, r4
   1c894:	str	r3, [sp, #4]
   1c898:	str	r2, [sp, #8]
   1c89c:	strb	r1, [r0]
   1c8a0:	strb	r6, [lr, #13]!
   1c8a4:	beq	1ca8c <flatcc_json_parser_union_type@@Base+0x268>
   1c8a8:	mov	r2, r8
   1c8ac:	ldrb	ip, [r2], #1
   1c8b0:	cmp	ip, #45	; 0x2d
   1c8b4:	movne	r2, r8
   1c8b8:	cmp	r2, r4
   1c8bc:	beq	1c994 <flatcc_json_parser_union_type@@Base+0x170>
   1c8c0:	mov	r6, #0
   1c8c4:	mov	r0, #10
   1c8c8:	mov	r7, #0
   1c8cc:	ldrb	r1, [r2]
   1c8d0:	sub	r3, r1, #48	; 0x30
   1c8d4:	uxtb	r3, r3
   1c8d8:	cmp	r3, #9
   1c8dc:	bhi	1ca20 <flatcc_json_parser_union_type@@Base+0x1fc>
   1c8e0:	add	r3, r7, r7, lsl #2
   1c8e4:	lsl	r3, r3, #1
   1c8e8:	umlal	r1, r3, r6, r0
   1c8ec:	subs	r1, r1, #48	; 0x30
   1c8f0:	sbc	r3, r3, #0
   1c8f4:	subs	r6, r1, r6
   1c8f8:	sbcs	r7, r3, r7
   1c8fc:	bcc	1ca30 <flatcc_json_parser_union_type@@Base+0x20c>
   1c900:	add	r2, r2, #1
   1c904:	mov	r6, r1
   1c908:	mov	r7, r3
   1c90c:	cmp	r4, r2
   1c910:	bne	1c8cc <flatcc_json_parser_union_type@@Base+0xa8>
   1c914:	mov	r0, #0
   1c918:	mov	r2, r4
   1c91c:	mov	r6, r1
   1c920:	mov	r7, r3
   1c924:	cmp	r2, r8
   1c928:	beq	1ca8c <flatcc_json_parser_union_type@@Base+0x268>
   1c92c:	cmp	r0, #0
   1c930:	beq	1c9ac <flatcc_json_parser_union_type@@Base+0x188>
   1c934:	ldrb	r0, [r2]
   1c938:	cmp	r0, #46	; 0x2e
   1c93c:	beq	1c94c <flatcc_json_parser_union_type@@Base+0x128>
   1c940:	cmp	r0, #101	; 0x65
   1c944:	cmpne	r0, #69	; 0x45
   1c948:	bne	1c9ac <flatcc_json_parser_union_type@@Base+0x188>
   1c94c:	ldr	r0, [r5, #24]
   1c950:	mov	r6, #0
   1c954:	mov	r7, #0
   1c958:	cmp	r0, #0
   1c95c:	mov	r0, r4
   1c960:	bne	1ca70 <flatcc_json_parser_union_type@@Base+0x24c>
   1c964:	mov	r0, #12
   1c968:	b	1ca4c <flatcc_json_parser_union_type@@Base+0x228>
   1c96c:	str	r8, [r5, #36]	; 0x24
   1c970:	mov	r0, #28
   1c974:	add	r2, r8, #1
   1c978:	ldr	r1, [r5, #4]
   1c97c:	sub	r1, r2, r1
   1c980:	str	r1, [r5, #20]
   1c984:	str	r0, [r5, #24]
   1c988:	mov	r0, r4
   1c98c:	sub	sp, fp, #28
   1c990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c994:	mov	r2, r4
   1c998:	mov	r7, #0
   1c99c:	mov	r0, #0
   1c9a0:	cmp	r2, r8
   1c9a4:	bne	1c92c <flatcc_json_parser_union_type@@Base+0x108>
   1c9a8:	b	1ca8c <flatcc_json_parser_union_type@@Base+0x268>
   1c9ac:	mov	r0, r2
   1c9b0:	cmp	r0, r8
   1c9b4:	beq	1ca8c <flatcc_json_parser_union_type@@Base+0x268>
   1c9b8:	cmp	ip, #45	; 0x2d
   1c9bc:	bne	1c9d8 <flatcc_json_parser_union_type@@Base+0x1b4>
   1c9c0:	ldr	r1, [r5, #24]
   1c9c4:	mov	r2, r4
   1c9c8:	cmp	r1, #0
   1c9cc:	bne	1ca84 <flatcc_json_parser_union_type@@Base+0x260>
   1c9d0:	mov	r1, #8
   1c9d4:	b	1c9f8 <flatcc_json_parser_union_type@@Base+0x1d4>
   1c9d8:	subs	r1, r6, #256	; 0x100
   1c9dc:	sbcs	r1, r7, #0
   1c9e0:	bcc	1ca7c <flatcc_json_parser_union_type@@Base+0x258>
   1c9e4:	ldr	r1, [r5, #24]
   1c9e8:	mov	r2, r4
   1c9ec:	cmp	r1, #0
   1c9f0:	bne	1ca84 <flatcc_json_parser_union_type@@Base+0x260>
   1c9f4:	mov	r1, #7
   1c9f8:	str	r0, [r5, #36]	; 0x24
   1c9fc:	add	r0, r0, #1
   1ca00:	ldr	r2, [r5, #4]
   1ca04:	sub	r0, r0, r2
   1ca08:	mov	r2, r4
   1ca0c:	str	r0, [r5, #20]
   1ca10:	str	r1, [r5, #24]
   1ca14:	cmp	r2, r8
   1ca18:	bne	1cab0 <flatcc_json_parser_union_type@@Base+0x28c>
   1ca1c:	b	1ca8c <flatcc_json_parser_union_type@@Base+0x268>
   1ca20:	mov	r0, #1
   1ca24:	cmp	r2, r8
   1ca28:	bne	1c92c <flatcc_json_parser_union_type@@Base+0x108>
   1ca2c:	b	1ca8c <flatcc_json_parser_union_type@@Base+0x268>
   1ca30:	ldr	r0, [r5, #24]
   1ca34:	mov	r6, #0
   1ca38:	mov	r7, #0
   1ca3c:	cmp	r0, #0
   1ca40:	mov	r0, r4
   1ca44:	bne	1ca70 <flatcc_json_parser_union_type@@Base+0x24c>
   1ca48:	mov	r0, #8
   1ca4c:	str	r2, [r5, #36]	; 0x24
   1ca50:	add	r2, r2, #1
   1ca54:	mov	r6, #0
   1ca58:	mov	r7, #0
   1ca5c:	ldr	r1, [r5, #4]
   1ca60:	sub	r1, r2, r1
   1ca64:	str	r1, [r5, #20]
   1ca68:	str	r0, [r5, #24]
   1ca6c:	mov	r0, r4
   1ca70:	cmp	r0, r8
   1ca74:	bne	1c9b8 <flatcc_json_parser_union_type@@Base+0x194>
   1ca78:	b	1ca8c <flatcc_json_parser_union_type@@Base+0x268>
   1ca7c:	mov	r2, r0
   1ca80:	strb	r6, [lr]
   1ca84:	cmp	r2, r8
   1ca88:	bne	1cab0 <flatcc_json_parser_union_type@@Base+0x28c>
   1ca8c:	ldr	r3, [fp, #16]
   1ca90:	mov	r0, r5
   1ca94:	mov	r1, r8
   1ca98:	mov	r2, r4
   1ca9c:	str	lr, [sp]
   1caa0:	mov	r6, lr
   1caa4:	bl	1cbb8 <flatcc_json_parser_union_type@@Base+0x394>
   1caa8:	mov	lr, r6
   1caac:	mov	r2, r0
   1cab0:	ldr	r0, [sp, #8]
   1cab4:	ldr	r1, [sp, #4]
   1cab8:	ldr	r1, [r0, r1, lsl #3]
   1cabc:	cmp	r1, #0
   1cac0:	beq	1cb5c <flatcc_json_parser_union_type@@Base+0x338>
   1cac4:	ldr	r0, [r9, #4]
   1cac8:	str	r2, [sp, #8]
   1cacc:	cmp	r0, #0
   1cad0:	beq	1cb98 <flatcc_json_parser_union_type@@Base+0x374>
   1cad4:	sub	r0, r0, #1
   1cad8:	ldr	r6, [fp, #20]
   1cadc:	mov	r2, r4
   1cae0:	str	r0, [r9, #4]
   1cae4:	ldr	r0, [sl, #8]
   1cae8:	ldr	r8, [r5, #4]
   1caec:	ldr	r7, [r5, #16]
   1caf0:	str	r0, [r5, #16]
   1caf4:	ldr	r0, [sl, #4]
   1caf8:	str	r0, [r5, #4]
   1cafc:	add	r0, sp, #12
   1cb00:	ldrb	r3, [lr]
   1cb04:	add	r0, r0, #4
   1cb08:	str	r0, [sp]
   1cb0c:	mov	r0, r5
   1cb10:	strb	r3, [sp, #12]
   1cb14:	blx	r6
   1cb18:	cmp	r0, r4
   1cb1c:	beq	1c878 <flatcc_json_parser_union_type@@Base+0x54>
   1cb20:	ldr	r1, [fp, #8]
   1cb24:	ldr	r0, [r5]
   1cb28:	ldr	r2, [sp, #12]
   1cb2c:	ldr	r3, [sp, #16]
   1cb30:	bl	1776c <flatcc_builder_table_add_union@@Base>
   1cb34:	cmp	r0, #0
   1cb38:	beq	1cb80 <flatcc_json_parser_union_type@@Base+0x35c>
   1cb3c:	ldr	r0, [r5, #24]
   1cb40:	cmp	r0, #0
   1cb44:	bne	1c878 <flatcc_json_parser_union_type@@Base+0x54>
   1cb48:	ldr	r2, [sp, #8]
   1cb4c:	mov	r0, #28
   1cb50:	str	r2, [r5, #36]	; 0x24
   1cb54:	add	r2, r2, #1
   1cb58:	b	1c978 <flatcc_json_parser_union_type@@Base+0x154>
   1cb5c:	ldrb	r0, [lr]
   1cb60:	ldr	r1, [r9, #4]
   1cb64:	mov	r4, r2
   1cb68:	cmp	r0, #0
   1cb6c:	addne	r1, r1, #1
   1cb70:	str	r1, [r9, #4]
   1cb74:	mov	r0, r4
   1cb78:	sub	sp, fp, #28
   1cb7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb80:	ldr	r4, [sp, #8]
   1cb84:	str	r8, [r5, #4]
   1cb88:	str	r7, [r5, #16]
   1cb8c:	mov	r0, r4
   1cb90:	sub	sp, fp, #28
   1cb94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb98:	movw	r0, #957	; 0x3bd
   1cb9c:	movw	r1, #972	; 0x3cc
   1cba0:	movw	r3, #1046	; 0x416
   1cba4:	movw	r2, #965	; 0x3c5
   1cba8:	movt	r0, #2
   1cbac:	movt	r1, #2
   1cbb0:	movt	r3, #2
   1cbb4:	bl	129c4 <__assert_fail@plt>
   1cbb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbbc:	add	fp, sp, #28
   1cbc0:	sub	sp, sp, #44	; 0x2c
   1cbc4:	mov	r4, r2
   1cbc8:	mov	r2, r1
   1cbcc:	ldr	r1, [fp, #8]
   1cbd0:	mov	r5, r0
   1cbd4:	mov	r0, #0
   1cbd8:	cmp	r2, r4
   1cbdc:	strb	r0, [r1]
   1cbe0:	beq	1cdc8 <flatcc_json_parser_union_type@@Base+0x5a4>
   1cbe4:	ldrb	r0, [r2]
   1cbe8:	cmp	r0, #46	; 0x2e
   1cbec:	beq	1cc60 <flatcc_json_parser_union_type@@Base+0x43c>
   1cbf0:	cmp	r0, #34	; 0x22
   1cbf4:	bne	1cdc0 <flatcc_json_parser_union_type@@Base+0x59c>
   1cbf8:	mov	r0, #0
   1cbfc:	add	r1, r2, #1
   1cc00:	str	r0, [r5, #12]
   1cc04:	ldr	r0, [r5, #12]
   1cc08:	cmp	r0, #0
   1cc0c:	bne	1cc9c <flatcc_json_parser_union_type@@Base+0x478>
   1cc10:	sub	r0, r4, r1
   1cc14:	cmp	r0, #2
   1cc18:	blt	1cc3c <flatcc_json_parser_union_type@@Base+0x418>
   1cc1c:	ldrb	r0, [r1]
   1cc20:	cmp	r0, #32
   1cc24:	bhi	1cc9c <flatcc_json_parser_union_type@@Base+0x478>
   1cc28:	bne	1cc3c <flatcc_json_parser_union_type@@Base+0x418>
   1cc2c:	mov	r7, r1
   1cc30:	ldrb	r0, [r7, #1]!
   1cc34:	cmp	r0, #32
   1cc38:	bhi	1cc54 <flatcc_json_parser_union_type@@Base+0x430>
   1cc3c:	mov	r0, r5
   1cc40:	mov	r2, r4
   1cc44:	mov	r6, r3
   1cc48:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1cc4c:	mov	r3, r6
   1cc50:	mov	r7, r0
   1cc54:	cmp	r7, r4
   1cc58:	bne	1cca8 <flatcc_json_parser_union_type@@Base+0x484>
   1cc5c:	b	1cdb4 <flatcc_json_parser_union_type@@Base+0x590>
   1cc60:	ldr	r0, [r5, #24]
   1cc64:	mov	r1, r4
   1cc68:	cmp	r0, #0
   1cc6c:	bne	1cdcc <flatcc_json_parser_union_type@@Base+0x5a8>
   1cc70:	str	r2, [r5, #36]	; 0x24
   1cc74:	add	r2, r2, #1
   1cc78:	mov	r0, #5
   1cc7c:	ldr	r1, [r5, #4]
   1cc80:	sub	r1, r2, r1
   1cc84:	str	r1, [r5, #20]
   1cc88:	str	r0, [r5, #24]
   1cc8c:	mov	r1, r4
   1cc90:	ldr	r0, [r5, #12]
   1cc94:	cmp	r0, #0
   1cc98:	beq	1cc10 <flatcc_json_parser_union_type@@Base+0x3ec>
   1cc9c:	mov	r7, r1
   1cca0:	cmp	r7, r4
   1cca4:	beq	1cdb4 <flatcc_json_parser_union_type@@Base+0x590>
   1cca8:	add	r9, r3, #4
   1ccac:	mov	r6, #0
   1ccb0:	add	sl, sp, #32
   1ccb4:	add	r8, sp, #28
   1ccb8:	str	r3, [sp, #16]
   1ccbc:	str	r9, [sp, #12]
   1ccc0:	b	1ccf8 <flatcc_json_parser_union_type@@Base+0x4d4>
   1ccc4:	ldr	r2, [fp, #8]
   1ccc8:	ldr	r9, [sp, #12]
   1cccc:	add	r6, r6, #1
   1ccd0:	mov	r7, r0
   1ccd4:	mov	r3, r2
   1ccd8:	ldrb	r2, [r2]
   1ccdc:	add	r1, r2, r1
   1cce0:	strb	r1, [r3]
   1cce4:	ldr	r3, [sp, #16]
   1cce8:	ldr	r1, [sp, #24]
   1ccec:	cmp	r1, #0
   1ccf0:	subeq	sp, fp, #28
   1ccf4:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ccf8:	str	r6, [sp, #20]
   1ccfc:	mov	r6, r3
   1cd00:	ldr	r6, [r3]
   1cd04:	add	r0, sp, #24
   1cd08:	mov	r1, r7
   1cd0c:	mov	r2, r4
   1cd10:	mov	r3, r8
   1cd14:	str	sl, [sp]
   1cd18:	str	r0, [sp, #4]
   1cd1c:	mov	r0, r5
   1cd20:	blx	r6
   1cd24:	cmp	r0, r4
   1cd28:	beq	1cdb4 <flatcc_json_parser_union_type@@Base+0x590>
   1cd2c:	cmp	r0, r7
   1cd30:	bne	1cd44 <flatcc_json_parser_union_type@@Base+0x520>
   1cd34:	ldr	r6, [r9], #4
   1cd38:	cmp	r6, #0
   1cd3c:	bne	1cd04 <flatcc_json_parser_union_type@@Base+0x4e0>
   1cd40:	b	1cd8c <flatcc_json_parser_union_type@@Base+0x568>
   1cd44:	ldr	r6, [sp, #20]
   1cd48:	cmp	r6, #0
   1cd4c:	ldrne	r1, [r5, #12]
   1cd50:	cmpne	r1, #0
   1cd54:	bne	1cdf0 <flatcc_json_parser_union_type@@Base+0x5cc>
   1cd58:	ldr	r1, [sp, #28]
   1cd5c:	cmp	r1, #0
   1cd60:	bne	1cddc <flatcc_json_parser_union_type@@Base+0x5b8>
   1cd64:	ldr	r1, [sp, #32]
   1cd68:	ldr	r2, [sp, #36]	; 0x24
   1cd6c:	subs	r3, r1, #256	; 0x100
   1cd70:	sbcs	r2, r2, #0
   1cd74:	bcc	1ccc4 <flatcc_json_parser_union_type@@Base+0x4a0>
   1cd78:	ldr	r1, [r5, #24]
   1cd7c:	cmp	r1, #0
   1cd80:	bne	1cdb4 <flatcc_json_parser_union_type@@Base+0x590>
   1cd84:	mov	r1, #7
   1cd88:	b	1ce00 <flatcc_json_parser_union_type@@Base+0x5dc>
   1cd8c:	ldr	r0, [r5, #24]
   1cd90:	cmp	r0, #0
   1cd94:	bne	1cdb4 <flatcc_json_parser_union_type@@Base+0x590>
   1cd98:	str	r7, [r5, #36]	; 0x24
   1cd9c:	add	r2, r7, #1
   1cda0:	mov	r0, #23
   1cda4:	ldr	r1, [r5, #4]
   1cda8:	sub	r1, r2, r1
   1cdac:	str	r1, [r5, #20]
   1cdb0:	str	r0, [r5, #24]
   1cdb4:	mov	r0, r4
   1cdb8:	sub	sp, fp, #28
   1cdbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdc0:	mov	r0, #1
   1cdc4:	str	r0, [r5, #12]
   1cdc8:	mov	r1, r2
   1cdcc:	ldr	r0, [r5, #12]
   1cdd0:	cmp	r0, #0
   1cdd4:	bne	1cc9c <flatcc_json_parser_union_type@@Base+0x478>
   1cdd8:	b	1cc10 <flatcc_json_parser_union_type@@Base+0x3ec>
   1cddc:	ldr	r1, [r5, #24]
   1cde0:	cmp	r1, #0
   1cde4:	bne	1cdb4 <flatcc_json_parser_union_type@@Base+0x590>
   1cde8:	mov	r1, #8
   1cdec:	b	1ce00 <flatcc_json_parser_union_type@@Base+0x5dc>
   1cdf0:	ldr	r1, [r5, #24]
   1cdf4:	cmp	r1, #0
   1cdf8:	bne	1cdb4 <flatcc_json_parser_union_type@@Base+0x590>
   1cdfc:	mov	r1, #14
   1ce00:	str	r0, [r5, #36]	; 0x24
   1ce04:	add	r0, r0, #1
   1ce08:	ldr	r2, [r5, #4]
   1ce0c:	sub	r0, r0, r2
   1ce10:	str	r0, [r5, #20]
   1ce14:	str	r1, [r5, #24]
   1ce18:	mov	r0, r4
   1ce1c:	sub	sp, fp, #28
   1ce20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ce24 <flatcc_json_parser_union_vector@@Base>:
   1ce24:	push	{r4, r5, r6, r7, fp, lr}
   1ce28:	add	fp, sp, #16
   1ce2c:	sub	sp, sp, #16
   1ce30:	mov	r6, r1
   1ce34:	mov	r5, r0
   1ce38:	ldr	r0, [r0]
   1ce3c:	ldr	r1, [fp, #12]
   1ce40:	mov	r7, r3
   1ce44:	mov	r4, r2
   1ce48:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1ce4c:	add	r2, r0, #8
   1ce50:	add	r3, r7, r7, lsl #1
   1ce54:	mov	r1, r2
   1ce58:	ldr	r7, [r1, r3, lsl #3]!
   1ce5c:	cmp	r7, #0
   1ce60:	beq	1ce7c <flatcc_json_parser_union_vector@@Base+0x58>
   1ce64:	ldr	r0, [r5, #24]
   1ce68:	cmp	r0, #0
   1ce6c:	beq	1cec8 <flatcc_json_parser_union_vector@@Base+0xa4>
   1ce70:	mov	r0, r4
   1ce74:	sub	sp, fp, #16
   1ce78:	pop	{r4, r5, r6, r7, fp, pc}
   1ce7c:	add	r2, r2, r3, lsl #3
   1ce80:	ldr	r3, [r0, #4]
   1ce84:	ldrb	r7, [r2, #12]
   1ce88:	cmp	r7, #0
   1ce8c:	beq	1cef0 <flatcc_json_parser_union_vector@@Base+0xcc>
   1ce90:	sub	r3, r3, #1
   1ce94:	ldr	r1, [fp, #16]
   1ce98:	ldr	r7, [fp, #8]
   1ce9c:	str	r3, [r0, #4]
   1cea0:	ldr	r0, [r2, #16]
   1cea4:	ldr	r3, [r2, #20]
   1cea8:	mov	r2, r4
   1ceac:	stm	sp, {r0, r7}
   1ceb0:	str	r1, [sp, #8]
   1ceb4:	mov	r0, r5
   1ceb8:	mov	r1, r6
   1cebc:	bl	1cf24 <flatcc_json_parser_union_vector@@Base+0x100>
   1cec0:	sub	sp, fp, #16
   1cec4:	pop	{r4, r5, r6, r7, fp, pc}
   1cec8:	str	r6, [r5, #36]	; 0x24
   1cecc:	add	r2, r6, #1
   1ced0:	mov	r0, #28
   1ced4:	ldr	r1, [r5, #4]
   1ced8:	sub	r1, r2, r1
   1cedc:	str	r1, [r5, #20]
   1cee0:	str	r0, [r5, #24]
   1cee4:	mov	r0, r4
   1cee8:	sub	sp, fp, #16
   1ceec:	pop	{r4, r5, r6, r7, fp, pc}
   1cef0:	add	r3, r3, #1
   1cef4:	str	r3, [r0, #4]
   1cef8:	ldr	r0, [r5, #16]
   1cefc:	str	r0, [r2, #8]
   1cf00:	ldr	r0, [r5, #4]
   1cf04:	str	r0, [r2, #4]
   1cf08:	str	r6, [r1]
   1cf0c:	mov	r0, r5
   1cf10:	mov	r1, r6
   1cf14:	mov	r2, r4
   1cf18:	sub	sp, fp, #16
   1cf1c:	pop	{r4, r5, r6, r7, fp, lr}
   1cf20:	b	1a358 <flatcc_json_parser_generic_json@@Base>
   1cf24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf28:	add	fp, sp, #28
   1cf2c:	sub	sp, sp, #12
   1cf30:	mov	r5, r0
   1cf34:	mov	r0, #0
   1cf38:	mov	r8, r3
   1cf3c:	mov	r6, r2
   1cf40:	mov	r7, r1
   1cf44:	str	r0, [sp, #8]
   1cf48:	ldr	r0, [r5]
   1cf4c:	bl	16160 <flatcc_builder_start_offset_vector@@Base>
   1cf50:	cmp	r0, #0
   1cf54:	beq	1cf74 <flatcc_json_parser_union_vector@@Base+0x150>
   1cf58:	ldr	r0, [r5, #24]
   1cf5c:	cmp	r0, #0
   1cf60:	bne	1cffc <flatcc_json_parser_union_vector@@Base+0x1d8>
   1cf64:	str	r7, [r5, #36]	; 0x24
   1cf68:	mov	r0, #33	; 0x21
   1cf6c:	add	r2, r7, #1
   1cf70:	b	1cfec <flatcc_json_parser_union_vector@@Base+0x1c8>
   1cf74:	ldr	sl, [fp, #8]
   1cf78:	cmp	r7, r6
   1cf7c:	beq	1cfbc <flatcc_json_parser_union_vector@@Base+0x198>
   1cf80:	ldrb	r0, [r7]
   1cf84:	cmp	r0, #91	; 0x5b
   1cf88:	bne	1cfbc <flatcc_json_parser_union_vector@@Base+0x198>
   1cf8c:	add	r1, r7, #1
   1cf90:	sub	r0, r6, r1
   1cf94:	cmp	r0, #2
   1cf98:	blt	1d0a4 <flatcc_json_parser_union_vector@@Base+0x280>
   1cf9c:	ldrb	r0, [r1]
   1cfa0:	cmp	r0, #32
   1cfa4:	bls	1d094 <flatcc_json_parser_union_vector@@Base+0x270>
   1cfa8:	mov	r7, r1
   1cfac:	cmp	r7, r6
   1cfb0:	mov	r4, r6
   1cfb4:	bne	1d0c0 <flatcc_json_parser_union_vector@@Base+0x29c>
   1cfb8:	b	1d0fc <flatcc_json_parser_union_vector@@Base+0x2d8>
   1cfbc:	ldr	r0, [r5, #24]
   1cfc0:	mov	r9, r6
   1cfc4:	cmp	r0, #0
   1cfc8:	beq	1d008 <flatcc_json_parser_union_vector@@Base+0x1e4>
   1cfcc:	cmp	sl, #0
   1cfd0:	beq	1d030 <flatcc_json_parser_union_vector@@Base+0x20c>
   1cfd4:	ldr	r0, [r5, #24]
   1cfd8:	cmp	r0, #0
   1cfdc:	bne	1cffc <flatcc_json_parser_union_vector@@Base+0x1d8>
   1cfe0:	str	r9, [r5, #36]	; 0x24
   1cfe4:	mov	r0, #30
   1cfe8:	add	r2, r9, #1
   1cfec:	ldr	r1, [r5, #4]
   1cff0:	sub	r1, r2, r1
   1cff4:	str	r1, [r5, #20]
   1cff8:	str	r0, [r5, #24]
   1cffc:	mov	r0, r6
   1d000:	sub	sp, fp, #28
   1d004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d008:	str	r7, [r5, #36]	; 0x24
   1d00c:	add	r2, r7, #1
   1d010:	mov	r0, #22
   1d014:	mov	r9, r6
   1d018:	ldr	r1, [r5, #4]
   1d01c:	sub	r1, r2, r1
   1d020:	str	r1, [r5, #20]
   1d024:	str	r0, [r5, #24]
   1d028:	cmp	sl, #0
   1d02c:	bne	1cfd4 <flatcc_json_parser_union_vector@@Base+0x1b0>
   1d030:	ldr	r0, [r5]
   1d034:	mov	r1, r8
   1d038:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1d03c:	mov	r1, r0
   1d040:	ldr	r0, [r5]
   1d044:	bl	17680 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1d048:	cmp	r0, #0
   1d04c:	str	r0, [sp, #8]
   1d050:	beq	1d080 <flatcc_json_parser_union_vector@@Base+0x25c>
   1d054:	ldr	r1, [fp, #12]
   1d058:	ldr	r0, [r5]
   1d05c:	bl	1786c <flatcc_builder_table_add_offset@@Base>
   1d060:	cmp	r0, #0
   1d064:	beq	1d080 <flatcc_json_parser_union_vector@@Base+0x25c>
   1d068:	ldr	r1, [sp, #8]
   1d06c:	mov	r6, r9
   1d070:	str	r1, [r0]
   1d074:	mov	r0, r6
   1d078:	sub	sp, fp, #28
   1d07c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d080:	mov	r7, r9
   1d084:	ldr	r0, [r5, #24]
   1d088:	cmp	r0, #0
   1d08c:	bne	1cffc <flatcc_json_parser_union_vector@@Base+0x1d8>
   1d090:	b	1cf64 <flatcc_json_parser_union_vector@@Base+0x140>
   1d094:	bne	1d0a4 <flatcc_json_parser_union_vector@@Base+0x280>
   1d098:	ldrb	r0, [r7, #2]!
   1d09c:	cmp	r0, #32
   1d0a0:	bhi	1d0b4 <flatcc_json_parser_union_vector@@Base+0x290>
   1d0a4:	mov	r0, r5
   1d0a8:	mov	r2, r6
   1d0ac:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1d0b0:	mov	r7, r0
   1d0b4:	cmp	r7, r6
   1d0b8:	mov	r4, r6
   1d0bc:	beq	1d0fc <flatcc_json_parser_union_vector@@Base+0x2d8>
   1d0c0:	ldrb	r0, [r7]
   1d0c4:	cmp	r0, #93	; 0x5d
   1d0c8:	bne	1d0f8 <flatcc_json_parser_union_vector@@Base+0x2d4>
   1d0cc:	add	r1, r7, #1
   1d0d0:	sub	r0, r6, r1
   1d0d4:	cmp	r0, #2
   1d0d8:	blt	1d288 <flatcc_json_parser_union_vector@@Base+0x464>
   1d0dc:	ldrb	r0, [r1]
   1d0e0:	cmp	r0, #32
   1d0e4:	bls	1d274 <flatcc_json_parser_union_vector@@Base+0x450>
   1d0e8:	mov	r9, r1
   1d0ec:	cmp	sl, #0
   1d0f0:	bne	1cfd4 <flatcc_json_parser_union_vector@@Base+0x1b0>
   1d0f4:	b	1d030 <flatcc_json_parser_union_vector@@Base+0x20c>
   1d0f8:	mov	r4, r7
   1d0fc:	cmp	sl, #0
   1d100:	beq	1d258 <flatcc_json_parser_union_vector@@Base+0x434>
   1d104:	add	r0, r6, #1
   1d108:	mov	sl, #0
   1d10c:	add	r9, sp, #8
   1d110:	str	r0, [sp, #4]
   1d114:	ldr	r0, [r5]
   1d118:	mov	r1, r8
   1d11c:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1d120:	ldrb	r3, [r0, -sl]
   1d124:	ldr	r7, [fp, #16]
   1d128:	mov	r0, r5
   1d12c:	mov	r1, r4
   1d130:	mov	r2, r6
   1d134:	str	r9, [sp]
   1d138:	blx	r7
   1d13c:	cmp	r0, r6
   1d140:	beq	1cffc <flatcc_json_parser_union_vector@@Base+0x1d8>
   1d144:	mov	r7, r0
   1d148:	ldr	r0, [r5]
   1d14c:	mov	r1, #1
   1d150:	bl	1591c <flatcc_builder_extend_offset_vector@@Base>
   1d154:	cmp	r0, #0
   1d158:	beq	1cf58 <flatcc_json_parser_union_vector@@Base+0x134>
   1d15c:	ldr	r1, [sp, #8]
   1d160:	str	r1, [r0]
   1d164:	sub	r0, r6, r7
   1d168:	cmp	r0, #2
   1d16c:	blt	1d1f0 <flatcc_json_parser_union_vector@@Base+0x3cc>
   1d170:	ldrb	r0, [r7]
   1d174:	cmp	r0, #32
   1d178:	bls	1d1dc <flatcc_json_parser_union_vector@@Base+0x3b8>
   1d17c:	mov	r4, r7
   1d180:	cmp	r4, r6
   1d184:	beq	1d2a4 <flatcc_json_parser_union_vector@@Base+0x480>
   1d188:	ldrb	r0, [r4]
   1d18c:	cmp	r0, #44	; 0x2c
   1d190:	bne	1d2bc <flatcc_json_parser_union_vector@@Base+0x498>
   1d194:	add	r1, r4, #1
   1d198:	sub	r0, r6, r1
   1d19c:	cmp	r0, #2
   1d1a0:	blt	1d220 <flatcc_json_parser_union_vector@@Base+0x3fc>
   1d1a4:	ldrb	r0, [r1]
   1d1a8:	cmp	r0, #32
   1d1ac:	bls	1d210 <flatcc_json_parser_union_vector@@Base+0x3ec>
   1d1b0:	mov	r4, r1
   1d1b4:	cmp	r4, r6
   1d1b8:	beq	1d238 <flatcc_json_parser_union_vector@@Base+0x414>
   1d1bc:	ldrb	r0, [r4]
   1d1c0:	cmp	r0, #93	; 0x5d
   1d1c4:	beq	1d2f8 <flatcc_json_parser_union_vector@@Base+0x4d4>
   1d1c8:	ldr	r0, [fp, #8]
   1d1cc:	sub	sl, sl, #1
   1d1d0:	adds	r0, r0, sl
   1d1d4:	bne	1d114 <flatcc_json_parser_union_vector@@Base+0x2f0>
   1d1d8:	b	1d258 <flatcc_json_parser_union_vector@@Base+0x434>
   1d1dc:	bne	1d1f0 <flatcc_json_parser_union_vector@@Base+0x3cc>
   1d1e0:	mov	r4, r7
   1d1e4:	ldrb	r0, [r4, #1]!
   1d1e8:	cmp	r0, #32
   1d1ec:	bhi	1d204 <flatcc_json_parser_union_vector@@Base+0x3e0>
   1d1f0:	mov	r0, r5
   1d1f4:	mov	r1, r7
   1d1f8:	mov	r2, r6
   1d1fc:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1d200:	mov	r4, r0
   1d204:	cmp	r4, r6
   1d208:	bne	1d188 <flatcc_json_parser_union_vector@@Base+0x364>
   1d20c:	b	1d2a4 <flatcc_json_parser_union_vector@@Base+0x480>
   1d210:	bne	1d220 <flatcc_json_parser_union_vector@@Base+0x3fc>
   1d214:	ldrb	r0, [r4, #2]!
   1d218:	cmp	r0, #32
   1d21c:	bhi	1d230 <flatcc_json_parser_union_vector@@Base+0x40c>
   1d220:	mov	r0, r5
   1d224:	mov	r2, r6
   1d228:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1d22c:	mov	r4, r0
   1d230:	cmp	r4, r6
   1d234:	bne	1d1bc <flatcc_json_parser_union_vector@@Base+0x398>
   1d238:	ldr	r0, [r5, #24]
   1d23c:	mov	r9, r6
   1d240:	cmp	r0, #0
   1d244:	bne	1d350 <flatcc_json_parser_union_vector@@Base+0x52c>
   1d248:	str	r6, [r5, #36]	; 0x24
   1d24c:	ldr	r2, [sp, #4]
   1d250:	mov	r0, #9
   1d254:	b	1d370 <flatcc_json_parser_union_vector@@Base+0x54c>
   1d258:	ldr	r0, [r5, #24]
   1d25c:	cmp	r0, #0
   1d260:	bne	1cffc <flatcc_json_parser_union_vector@@Base+0x1d8>
   1d264:	str	r4, [r5, #36]	; 0x24
   1d268:	mov	r0, #30
   1d26c:	add	r2, r4, #1
   1d270:	b	1cfec <flatcc_json_parser_union_vector@@Base+0x1c8>
   1d274:	bne	1d288 <flatcc_json_parser_union_vector@@Base+0x464>
   1d278:	ldrb	r0, [r7, #2]!
   1d27c:	cmp	r0, #32
   1d280:	mov	r9, r7
   1d284:	bhi	1cfcc <flatcc_json_parser_union_vector@@Base+0x1a8>
   1d288:	mov	r0, r5
   1d28c:	mov	r2, r6
   1d290:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1d294:	mov	r9, r0
   1d298:	cmp	sl, #0
   1d29c:	bne	1cfd4 <flatcc_json_parser_union_vector@@Base+0x1b0>
   1d2a0:	b	1d030 <flatcc_json_parser_union_vector@@Base+0x20c>
   1d2a4:	mov	r9, r6
   1d2a8:	ldr	r0, [fp, #8]
   1d2ac:	add	r0, r0, sl
   1d2b0:	cmp	r0, #1
   1d2b4:	bne	1cfd4 <flatcc_json_parser_union_vector@@Base+0x1b0>
   1d2b8:	b	1d030 <flatcc_json_parser_union_vector@@Base+0x20c>
   1d2bc:	cmp	r0, #93	; 0x5d
   1d2c0:	bne	1d340 <flatcc_json_parser_union_vector@@Base+0x51c>
   1d2c4:	add	r1, r4, #1
   1d2c8:	sub	r0, r6, r1
   1d2cc:	cmp	r0, #2
   1d2d0:	blt	1d32c <flatcc_json_parser_union_vector@@Base+0x508>
   1d2d4:	ldrb	r0, [r1]
   1d2d8:	cmp	r0, #32
   1d2dc:	bhi	1d314 <flatcc_json_parser_union_vector@@Base+0x4f0>
   1d2e0:	bne	1d32c <flatcc_json_parser_union_vector@@Base+0x508>
   1d2e4:	ldrb	r0, [r4, #2]!
   1d2e8:	cmp	r0, #32
   1d2ec:	mov	r9, r4
   1d2f0:	bhi	1d350 <flatcc_json_parser_union_vector@@Base+0x52c>
   1d2f4:	b	1d32c <flatcc_json_parser_union_vector@@Base+0x508>
   1d2f8:	add	r1, r4, #1
   1d2fc:	sub	r0, r6, r1
   1d300:	cmp	r0, #2
   1d304:	blt	1d32c <flatcc_json_parser_union_vector@@Base+0x508>
   1d308:	ldrb	r0, [r1]
   1d30c:	cmp	r0, #32
   1d310:	bls	1d2e0 <flatcc_json_parser_union_vector@@Base+0x4bc>
   1d314:	mov	r9, r1
   1d318:	ldr	r0, [fp, #8]
   1d31c:	add	r0, r0, sl
   1d320:	cmp	r0, #1
   1d324:	bne	1cfd4 <flatcc_json_parser_union_vector@@Base+0x1b0>
   1d328:	b	1d030 <flatcc_json_parser_union_vector@@Base+0x20c>
   1d32c:	mov	r0, r5
   1d330:	mov	r2, r6
   1d334:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1d338:	mov	r9, r0
   1d33c:	b	1d350 <flatcc_json_parser_union_vector@@Base+0x52c>
   1d340:	ldr	r0, [r5, #24]
   1d344:	mov	r9, r6
   1d348:	cmp	r0, #0
   1d34c:	beq	1d364 <flatcc_json_parser_union_vector@@Base+0x540>
   1d350:	ldr	r0, [fp, #8]
   1d354:	add	r0, r0, sl
   1d358:	cmp	r0, #1
   1d35c:	bne	1cfd4 <flatcc_json_parser_union_vector@@Base+0x1b0>
   1d360:	b	1d030 <flatcc_json_parser_union_vector@@Base+0x20c>
   1d364:	str	r4, [r5, #36]	; 0x24
   1d368:	mov	r0, #9
   1d36c:	add	r2, r4, #1
   1d370:	ldr	r1, [r5, #4]
   1d374:	sub	r1, r2, r1
   1d378:	mov	r9, r6
   1d37c:	str	r1, [r5, #20]
   1d380:	str	r0, [r5, #24]
   1d384:	ldr	r0, [fp, #8]
   1d388:	add	r0, r0, sl
   1d38c:	cmp	r0, #1
   1d390:	bne	1cfd4 <flatcc_json_parser_union_vector@@Base+0x1b0>
   1d394:	b	1d030 <flatcc_json_parser_union_vector@@Base+0x20c>

0001d398 <flatcc_json_parser_union_type_vector@@Base>:
   1d398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d39c:	add	fp, sp, #28
   1d3a0:	sub	sp, sp, #28
   1d3a4:	mov	r7, r1
   1d3a8:	mov	r5, r0
   1d3ac:	ldr	r0, [r0]
   1d3b0:	ldr	r1, [fp, #12]
   1d3b4:	mov	r4, r3
   1d3b8:	mov	r8, r2
   1d3bc:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1d3c0:	add	r0, r0, #8
   1d3c4:	add	r6, r4, r4, lsl #1
   1d3c8:	add	r4, r0, r6, lsl #3
   1d3cc:	mov	r0, r4
   1d3d0:	ldrb	r1, [r0, #12]!
   1d3d4:	cmp	r1, #0
   1d3d8:	beq	1d3f8 <flatcc_json_parser_union_type_vector@@Base+0x60>
   1d3dc:	ldr	r0, [r5, #24]
   1d3e0:	cmp	r0, #0
   1d3e4:	bne	1d448 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   1d3e8:	str	r7, [r5, #36]	; 0x24
   1d3ec:	mov	r0, #28
   1d3f0:	add	r2, r7, #1
   1d3f4:	b	1d438 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1d3f8:	mov	r1, #1
   1d3fc:	mov	r2, #1
   1d400:	mvn	r3, #0
   1d404:	strb	r1, [r0]
   1d408:	mov	r1, #1
   1d40c:	ldr	r0, [r5]
   1d410:	bl	160d4 <flatcc_builder_start_vector@@Base>
   1d414:	cmp	r0, #0
   1d418:	beq	1d454 <flatcc_json_parser_union_type_vector@@Base+0xbc>
   1d41c:	mov	sl, r7
   1d420:	ldr	r0, [r5, #24]
   1d424:	cmp	r0, #0
   1d428:	bne	1d448 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   1d42c:	str	sl, [r5, #36]	; 0x24
   1d430:	mov	r0, #33	; 0x21
   1d434:	add	r2, sl, #1
   1d438:	ldr	r1, [r5, #4]
   1d43c:	sub	r1, r2, r1
   1d440:	str	r1, [r5, #20]
   1d444:	str	r0, [r5, #24]
   1d448:	mov	r0, r8
   1d44c:	sub	sp, fp, #28
   1d450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d454:	cmp	r7, r8
   1d458:	beq	1d498 <flatcc_json_parser_union_type_vector@@Base+0x100>
   1d45c:	ldrb	r0, [r7]
   1d460:	cmp	r0, #91	; 0x5b
   1d464:	bne	1d498 <flatcc_json_parser_union_type_vector@@Base+0x100>
   1d468:	add	r1, r7, #1
   1d46c:	sub	r0, r8, r1
   1d470:	cmp	r0, #2
   1d474:	blt	1d4dc <flatcc_json_parser_union_type_vector@@Base+0x144>
   1d478:	ldrb	r0, [r1]
   1d47c:	cmp	r0, #32
   1d480:	bls	1d4cc <flatcc_json_parser_union_type_vector@@Base+0x134>
   1d484:	mov	r7, r1
   1d488:	cmp	r7, r8
   1d48c:	mov	sl, r8
   1d490:	bne	1d4f8 <flatcc_json_parser_union_type_vector@@Base+0x160>
   1d494:	b	1d53c <flatcc_json_parser_union_type_vector@@Base+0x1a4>
   1d498:	ldr	r0, [r5, #24]
   1d49c:	cmp	r0, #0
   1d4a0:	mov	r0, r8
   1d4a4:	bne	1d9ac <flatcc_json_parser_union_type_vector@@Base+0x614>
   1d4a8:	str	r7, [r5, #36]	; 0x24
   1d4ac:	mov	r0, #22
   1d4b0:	add	r2, r7, #1
   1d4b4:	ldr	r1, [r5, #4]
   1d4b8:	sub	r1, r2, r1
   1d4bc:	str	r1, [r5, #20]
   1d4c0:	str	r0, [r5, #24]
   1d4c4:	mov	r0, r8
   1d4c8:	b	1d9ac <flatcc_json_parser_union_type_vector@@Base+0x614>
   1d4cc:	bne	1d4dc <flatcc_json_parser_union_type_vector@@Base+0x144>
   1d4d0:	ldrb	r0, [r7, #2]!
   1d4d4:	cmp	r0, #32
   1d4d8:	bhi	1d4ec <flatcc_json_parser_union_type_vector@@Base+0x154>
   1d4dc:	mov	r0, r5
   1d4e0:	mov	r2, r8
   1d4e4:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1d4e8:	mov	r7, r0
   1d4ec:	cmp	r7, r8
   1d4f0:	mov	sl, r8
   1d4f4:	beq	1d53c <flatcc_json_parser_union_type_vector@@Base+0x1a4>
   1d4f8:	ldrb	r0, [r7]
   1d4fc:	cmp	r0, #93	; 0x5d
   1d500:	bne	1d538 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   1d504:	add	r1, r7, #1
   1d508:	sub	r0, r8, r1
   1d50c:	cmp	r0, #2
   1d510:	blt	1d9a0 <flatcc_json_parser_union_type_vector@@Base+0x608>
   1d514:	ldrb	r0, [r1]
   1d518:	cmp	r0, #32
   1d51c:	bhi	1d934 <flatcc_json_parser_union_type_vector@@Base+0x59c>
   1d520:	bne	1d9a0 <flatcc_json_parser_union_type_vector@@Base+0x608>
   1d524:	ldrb	r0, [r7, #2]!
   1d528:	cmp	r0, #32
   1d52c:	mov	r0, r7
   1d530:	bls	1d9a0 <flatcc_json_parser_union_type_vector@@Base+0x608>
   1d534:	b	1d9ac <flatcc_json_parser_union_type_vector@@Base+0x614>
   1d538:	mov	sl, r7
   1d53c:	ldr	r0, [r5]
   1d540:	mov	r1, #1
   1d544:	bl	15580 <flatcc_builder_extend_vector@@Base>
   1d548:	cmp	r0, #0
   1d54c:	beq	1d420 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1d550:	mov	r1, r0
   1d554:	add	r0, r8, #1
   1d558:	str	r4, [sp, #16]
   1d55c:	str	r0, [sp, #12]
   1d560:	mov	r9, #0
   1d564:	cmp	sl, r8
   1d568:	mov	r4, r8
   1d56c:	str	r1, [sp, #20]
   1d570:	strb	r9, [sp, #27]
   1d574:	beq	1d798 <flatcc_json_parser_union_type_vector@@Base+0x400>
   1d578:	mov	r2, sl
   1d57c:	mov	r9, #0
   1d580:	ldrb	ip, [r2], #1
   1d584:	cmp	ip, #45	; 0x2d
   1d588:	movne	r2, sl
   1d58c:	cmp	r2, r8
   1d590:	beq	1d608 <flatcc_json_parser_union_type_vector@@Base+0x270>
   1d594:	mov	r7, #0
   1d598:	mov	r0, #0
   1d59c:	mov	r4, #10
   1d5a0:	ldrb	r1, [r2]
   1d5a4:	sub	r3, r1, #48	; 0x30
   1d5a8:	uxtb	r3, r3
   1d5ac:	cmp	r3, #9
   1d5b0:	bhi	1d628 <flatcc_json_parser_union_type_vector@@Base+0x290>
   1d5b4:	add	r3, r0, r0, lsl #2
   1d5b8:	lsl	r3, r3, #1
   1d5bc:	umlal	r1, r3, r7, r4
   1d5c0:	subs	r1, r1, #48	; 0x30
   1d5c4:	sbc	r3, r3, #0
   1d5c8:	subs	r7, r1, r7
   1d5cc:	sbcs	r0, r3, r0
   1d5d0:	bcc	1d6ac <flatcc_json_parser_union_type_vector@@Base+0x314>
   1d5d4:	add	r2, r2, #1
   1d5d8:	mov	r7, r1
   1d5dc:	mov	r0, r3
   1d5e0:	cmp	r8, r2
   1d5e4:	bne	1d5a0 <flatcc_json_parser_union_type_vector@@Base+0x208>
   1d5e8:	mov	lr, #0
   1d5ec:	mov	r2, r8
   1d5f0:	mov	r7, r1
   1d5f4:	mov	r0, r3
   1d5f8:	cmp	r2, sl
   1d5fc:	mov	r4, sl
   1d600:	bne	1d638 <flatcc_json_parser_union_type_vector@@Base+0x2a0>
   1d604:	b	1d798 <flatcc_json_parser_union_type_vector@@Base+0x400>
   1d608:	mov	r2, r8
   1d60c:	mov	r7, #0
   1d610:	mov	r0, #0
   1d614:	mov	lr, #0
   1d618:	cmp	r2, sl
   1d61c:	mov	r4, sl
   1d620:	bne	1d638 <flatcc_json_parser_union_type_vector@@Base+0x2a0>
   1d624:	b	1d798 <flatcc_json_parser_union_type_vector@@Base+0x400>
   1d628:	mov	lr, #1
   1d62c:	cmp	r2, sl
   1d630:	mov	r4, sl
   1d634:	beq	1d798 <flatcc_json_parser_union_type_vector@@Base+0x400>
   1d638:	cmp	lr, #0
   1d63c:	beq	1d68c <flatcc_json_parser_union_type_vector@@Base+0x2f4>
   1d640:	ldrb	r1, [r2]
   1d644:	cmp	r1, #46	; 0x2e
   1d648:	beq	1d658 <flatcc_json_parser_union_type_vector@@Base+0x2c0>
   1d64c:	cmp	r1, #101	; 0x65
   1d650:	cmpne	r1, #69	; 0x45
   1d654:	bne	1d6fc <flatcc_json_parser_union_type_vector@@Base+0x364>
   1d658:	ldr	r0, [r5, #24]
   1d65c:	mov	r7, #0
   1d660:	mov	r4, r8
   1d664:	cmp	r0, #0
   1d668:	mov	r0, #0
   1d66c:	bne	1d700 <flatcc_json_parser_union_type_vector@@Base+0x368>
   1d670:	str	r2, [r5, #36]	; 0x24
   1d674:	add	r1, r2, #1
   1d678:	ldr	r0, [r5, #4]
   1d67c:	sub	r0, r1, r0
   1d680:	str	r0, [r5, #20]
   1d684:	mov	r0, #12
   1d688:	b	1d6dc <flatcc_json_parser_union_type_vector@@Base+0x344>
   1d68c:	mov	r4, r2
   1d690:	mov	r9, #0
   1d694:	cmp	r4, sl
   1d698:	bne	1d70c <flatcc_json_parser_union_type_vector@@Base+0x374>
   1d69c:	mov	r4, sl
   1d6a0:	cmp	sl, r4
   1d6a4:	bne	1d7d4 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   1d6a8:	b	1d7a0 <flatcc_json_parser_union_type_vector@@Base+0x408>
   1d6ac:	ldr	r0, [r5, #24]
   1d6b0:	mov	r7, #0
   1d6b4:	mov	r4, r8
   1d6b8:	cmp	r0, #0
   1d6bc:	mov	r0, #0
   1d6c0:	bne	1d700 <flatcc_json_parser_union_type_vector@@Base+0x368>
   1d6c4:	str	r2, [r5, #36]	; 0x24
   1d6c8:	add	r1, r2, #1
   1d6cc:	ldr	r0, [r5, #4]
   1d6d0:	sub	r0, r1, r0
   1d6d4:	str	r0, [r5, #20]
   1d6d8:	mov	r0, #8
   1d6dc:	str	r0, [r5, #24]
   1d6e0:	mov	r7, #0
   1d6e4:	mov	r0, #0
   1d6e8:	mov	r4, r8
   1d6ec:	mov	r9, #0
   1d6f0:	cmp	r4, sl
   1d6f4:	bne	1d70c <flatcc_json_parser_union_type_vector@@Base+0x374>
   1d6f8:	b	1d69c <flatcc_json_parser_union_type_vector@@Base+0x304>
   1d6fc:	mov	r4, r2
   1d700:	mov	r9, #0
   1d704:	cmp	r4, sl
   1d708:	beq	1d69c <flatcc_json_parser_union_type_vector@@Base+0x304>
   1d70c:	cmp	ip, #45	; 0x2d
   1d710:	bne	1d73c <flatcc_json_parser_union_type_vector@@Base+0x3a4>
   1d714:	ldr	r0, [r5, #24]
   1d718:	cmp	r0, #0
   1d71c:	bne	1d754 <flatcc_json_parser_union_type_vector@@Base+0x3bc>
   1d720:	str	r4, [r5, #36]	; 0x24
   1d724:	add	r1, r4, #1
   1d728:	ldr	r0, [r5, #4]
   1d72c:	sub	r0, r1, r0
   1d730:	str	r0, [r5, #20]
   1d734:	mov	r0, #8
   1d738:	b	1d790 <flatcc_json_parser_union_type_vector@@Base+0x3f8>
   1d73c:	subs	r1, r7, #256	; 0x100
   1d740:	sbcs	r0, r0, #0
   1d744:	bcc	1d764 <flatcc_json_parser_union_type_vector@@Base+0x3cc>
   1d748:	ldr	r0, [r5, #24]
   1d74c:	cmp	r0, #0
   1d750:	beq	1d778 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   1d754:	mov	r4, r8
   1d758:	cmp	sl, r4
   1d75c:	bne	1d7d4 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   1d760:	b	1d7a0 <flatcc_json_parser_union_type_vector@@Base+0x408>
   1d764:	mov	r9, r7
   1d768:	strb	r7, [sp, #27]
   1d76c:	cmp	sl, r4
   1d770:	bne	1d7d4 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   1d774:	b	1d7a0 <flatcc_json_parser_union_type_vector@@Base+0x408>
   1d778:	str	r4, [r5, #36]	; 0x24
   1d77c:	add	r1, r4, #1
   1d780:	ldr	r0, [r5, #4]
   1d784:	sub	r0, r1, r0
   1d788:	str	r0, [r5, #20]
   1d78c:	mov	r0, #7
   1d790:	str	r0, [r5, #24]
   1d794:	mov	r4, r8
   1d798:	cmp	sl, r4
   1d79c:	bne	1d7d4 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   1d7a0:	ldr	r3, [fp, #16]
   1d7a4:	add	r0, sp, #27
   1d7a8:	mov	r1, sl
   1d7ac:	mov	r2, r8
   1d7b0:	str	r0, [sp]
   1d7b4:	mov	r0, r5
   1d7b8:	bl	1cbb8 <flatcc_json_parser_union_type@@Base+0x394>
   1d7bc:	mov	r4, r0
   1d7c0:	cmp	r0, sl
   1d7c4:	beq	1d95c <flatcc_json_parser_union_type_vector@@Base+0x5c4>
   1d7c8:	cmp	r4, r8
   1d7cc:	beq	1d95c <flatcc_json_parser_union_type_vector@@Base+0x5c4>
   1d7d0:	ldrb	r9, [sp, #27]
   1d7d4:	ldr	r1, [fp, #24]
   1d7d8:	uxtb	r0, r9
   1d7dc:	blx	r1
   1d7e0:	cmp	r0, #0
   1d7e4:	bne	1d7fc <flatcc_json_parser_union_type_vector@@Base+0x464>
   1d7e8:	ldrb	r0, [r5, #8]
   1d7ec:	tst	r0, #1
   1d7f0:	beq	1d970 <flatcc_json_parser_union_type_vector@@Base+0x5d8>
   1d7f4:	mov	r9, #0
   1d7f8:	strb	r9, [sp, #27]
   1d7fc:	ldr	r0, [sp, #20]
   1d800:	strb	r9, [r0]
   1d804:	sub	r0, r8, r4
   1d808:	cmp	r0, #2
   1d80c:	blt	1d89c <flatcc_json_parser_union_type_vector@@Base+0x504>
   1d810:	ldrb	r0, [r4]
   1d814:	cmp	r0, #32
   1d818:	bls	1d888 <flatcc_json_parser_union_type_vector@@Base+0x4f0>
   1d81c:	mov	sl, r4
   1d820:	cmp	sl, r8
   1d824:	beq	1d904 <flatcc_json_parser_union_type_vector@@Base+0x56c>
   1d828:	ldrb	r0, [sl]
   1d82c:	ldr	r4, [sp, #16]
   1d830:	cmp	r0, #44	; 0x2c
   1d834:	bne	1d910 <flatcc_json_parser_union_type_vector@@Base+0x578>
   1d838:	add	r1, sl, #1
   1d83c:	sub	r0, r8, r1
   1d840:	cmp	r0, #2
   1d844:	blt	1d8cc <flatcc_json_parser_union_type_vector@@Base+0x534>
   1d848:	ldrb	r0, [r1]
   1d84c:	cmp	r0, #32
   1d850:	bls	1d8bc <flatcc_json_parser_union_type_vector@@Base+0x524>
   1d854:	mov	sl, r1
   1d858:	cmp	sl, r8
   1d85c:	beq	1d8e4 <flatcc_json_parser_union_type_vector@@Base+0x54c>
   1d860:	ldrb	r0, [sl]
   1d864:	cmp	r0, #93	; 0x5d
   1d868:	beq	1d918 <flatcc_json_parser_union_type_vector@@Base+0x580>
   1d86c:	ldr	r0, [r5]
   1d870:	mov	r1, #1
   1d874:	bl	15580 <flatcc_builder_extend_vector@@Base>
   1d878:	mov	r1, r0
   1d87c:	cmp	r0, #0
   1d880:	bne	1d560 <flatcc_json_parser_union_type_vector@@Base+0x1c8>
   1d884:	b	1d420 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1d888:	bne	1d89c <flatcc_json_parser_union_type_vector@@Base+0x504>
   1d88c:	mov	sl, r4
   1d890:	ldrb	r0, [sl, #1]!
   1d894:	cmp	r0, #32
   1d898:	bhi	1d8b0 <flatcc_json_parser_union_type_vector@@Base+0x518>
   1d89c:	mov	r0, r5
   1d8a0:	mov	r1, r4
   1d8a4:	mov	r2, r8
   1d8a8:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1d8ac:	mov	sl, r0
   1d8b0:	cmp	sl, r8
   1d8b4:	bne	1d828 <flatcc_json_parser_union_type_vector@@Base+0x490>
   1d8b8:	b	1d904 <flatcc_json_parser_union_type_vector@@Base+0x56c>
   1d8bc:	bne	1d8cc <flatcc_json_parser_union_type_vector@@Base+0x534>
   1d8c0:	ldrb	r0, [sl, #2]!
   1d8c4:	cmp	r0, #32
   1d8c8:	bhi	1d8dc <flatcc_json_parser_union_type_vector@@Base+0x544>
   1d8cc:	mov	r0, r5
   1d8d0:	mov	r2, r8
   1d8d4:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1d8d8:	mov	sl, r0
   1d8dc:	cmp	sl, r8
   1d8e0:	bne	1d860 <flatcc_json_parser_union_type_vector@@Base+0x4c8>
   1d8e4:	ldr	r0, [r5, #24]
   1d8e8:	cmp	r0, #0
   1d8ec:	mov	r0, r8
   1d8f0:	bne	1d9ac <flatcc_json_parser_union_type_vector@@Base+0x614>
   1d8f4:	str	r8, [r5, #36]	; 0x24
   1d8f8:	ldr	r2, [sp, #12]
   1d8fc:	mov	r0, #9
   1d900:	b	1d4b4 <flatcc_json_parser_union_type_vector@@Base+0x11c>
   1d904:	ldr	r4, [sp, #16]
   1d908:	mov	r0, r8
   1d90c:	b	1d9ac <flatcc_json_parser_union_type_vector@@Base+0x614>
   1d910:	cmp	r0, #93	; 0x5d
   1d914:	bne	1d93c <flatcc_json_parser_union_type_vector@@Base+0x5a4>
   1d918:	add	r1, sl, #1
   1d91c:	sub	r0, r8, r1
   1d920:	cmp	r0, #2
   1d924:	blt	1d9a0 <flatcc_json_parser_union_type_vector@@Base+0x608>
   1d928:	ldrb	r0, [r1]
   1d92c:	cmp	r0, #32
   1d930:	bls	1d98c <flatcc_json_parser_union_type_vector@@Base+0x5f4>
   1d934:	mov	r0, r1
   1d938:	b	1d9ac <flatcc_json_parser_union_type_vector@@Base+0x614>
   1d93c:	ldr	r0, [r5, #24]
   1d940:	cmp	r0, #0
   1d944:	mov	r0, r8
   1d948:	bne	1d9ac <flatcc_json_parser_union_type_vector@@Base+0x614>
   1d94c:	str	sl, [r5, #36]	; 0x24
   1d950:	mov	r0, #9
   1d954:	add	r2, sl, #1
   1d958:	b	1d4b4 <flatcc_json_parser_union_type_vector@@Base+0x11c>
   1d95c:	mov	sl, r4
   1d960:	ldr	r0, [r5, #24]
   1d964:	cmp	r0, #0
   1d968:	bne	1d448 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   1d96c:	b	1d42c <flatcc_json_parser_union_type_vector@@Base+0x94>
   1d970:	ldr	r0, [r5, #24]
   1d974:	cmp	r0, #0
   1d978:	bne	1d448 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   1d97c:	str	r4, [r5, #36]	; 0x24
   1d980:	mov	r0, #15
   1d984:	add	r2, r4, #1
   1d988:	b	1d438 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1d98c:	bne	1d9a0 <flatcc_json_parser_union_type_vector@@Base+0x608>
   1d990:	ldrb	r0, [sl, #2]!
   1d994:	cmp	r0, #32
   1d998:	mov	r0, sl
   1d99c:	bhi	1d9ac <flatcc_json_parser_union_type_vector@@Base+0x614>
   1d9a0:	mov	r0, r5
   1d9a4:	mov	r2, r8
   1d9a8:	bl	19848 <flatcc_json_parser_space_ext@@Base>
   1d9ac:	mov	sl, r0
   1d9b0:	ldr	r0, [r5]
   1d9b4:	bl	17444 <flatcc_builder_vector_count@@Base>
   1d9b8:	str	r0, [r4, #16]
   1d9bc:	mov	r7, r0
   1d9c0:	ldr	r0, [r5]
   1d9c4:	mov	r1, r7
   1d9c8:	bl	14924 <flatcc_builder_enter_user_frame@@Base>
   1d9cc:	mov	r9, r0
   1d9d0:	ldr	r0, [r5]
   1d9d4:	mov	r1, r9
   1d9d8:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1d9dc:	mov	r4, r0
   1d9e0:	ldr	r0, [r5]
   1d9e4:	bl	17450 <flatcc_builder_vector_edit@@Base>
   1d9e8:	mov	r1, r0
   1d9ec:	mov	r0, r4
   1d9f0:	mov	r2, r7
   1d9f4:	bl	12904 <memcpy@plt>
   1d9f8:	ldr	r0, [r5]
   1d9fc:	bl	17354 <flatcc_builder_end_vector@@Base>
   1da00:	cmp	r0, #0
   1da04:	beq	1d420 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1da08:	ldr	r1, [fp, #8]
   1da0c:	mov	r4, r0
   1da10:	ldr	r0, [r5]
   1da14:	sub	r1, r1, #1
   1da18:	bl	1786c <flatcc_builder_table_add_offset@@Base>
   1da1c:	cmp	r0, #0
   1da20:	beq	1d420 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1da24:	str	r4, [r0]
   1da28:	ldr	r1, [fp, #12]
   1da2c:	ldr	r0, [r5]
   1da30:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1da34:	add	r2, r0, #8
   1da38:	mov	r3, r2
   1da3c:	ldr	r1, [r3, r6, lsl #3]!
   1da40:	str	r9, [r3, #20]
   1da44:	cmp	r1, #0
   1da48:	ldr	r3, [r0, #4]
   1da4c:	beq	1dabc <flatcc_json_parser_union_type_vector@@Base+0x724>
   1da50:	cmp	r3, #0
   1da54:	beq	1dad4 <flatcc_json_parser_union_type_vector@@Base+0x73c>
   1da58:	sub	r3, r3, #1
   1da5c:	ldr	ip, [fp, #20]
   1da60:	str	r3, [r0, #4]
   1da64:	add	r0, r2, r6, lsl #3
   1da68:	mov	r3, r9
   1da6c:	ldr	r2, [r0, #8]
   1da70:	ldr	r6, [r5, #4]
   1da74:	ldr	r4, [r5, #16]
   1da78:	str	r2, [r5, #16]
   1da7c:	mov	r2, r8
   1da80:	ldr	r0, [r0, #4]
   1da84:	str	r0, [r5, #4]
   1da88:	ldr	r0, [fp, #8]
   1da8c:	str	r7, [sp]
   1da90:	stmib	sp, {r0, ip}
   1da94:	mov	r0, r5
   1da98:	bl	1cf24 <flatcc_json_parser_union_vector@@Base+0x100>
   1da9c:	cmp	r0, r8
   1daa0:	beq	1d448 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   1daa4:	str	r6, [r5, #4]
   1daa8:	str	r4, [r5, #16]
   1daac:	mov	r8, sl
   1dab0:	mov	r0, r8
   1dab4:	sub	sp, fp, #28
   1dab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dabc:	add	r1, r3, #1
   1dac0:	str	r1, [r0, #4]
   1dac4:	mov	r8, sl
   1dac8:	mov	r0, r8
   1dacc:	sub	sp, fp, #28
   1dad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dad4:	movw	r0, #957	; 0x3bd
   1dad8:	movw	r1, #972	; 0x3cc
   1dadc:	movw	r3, #1250	; 0x4e2
   1dae0:	movw	r2, #1122	; 0x462
   1dae4:	movt	r0, #2
   1dae8:	movt	r1, #2
   1daec:	movt	r3, #2
   1daf0:	bl	129c4 <__assert_fail@plt>

0001daf4 <flatcc_json_parser_table_as_root@@Base>:
   1daf4:	push	{r4, r5, r6, r7, fp, lr}
   1daf8:	add	fp, sp, #16
   1dafc:	sub	sp, sp, #48	; 0x30
   1db00:	add	r5, sp, #4
   1db04:	cmp	r1, #0
   1db08:	mov	r6, r0
   1db0c:	vmov.i32	q8, #0	; 0x00000000
   1db10:	add	r7, r2, r3
   1db14:	mov	r4, r2
   1db18:	movne	r5, r1
   1db1c:	mov	r1, #1
   1db20:	add	r0, r5, #12
   1db24:	vst1.32	{d16-d17}, [r0]
   1db28:	add	r0, r5, #28
   1db2c:	vst1.32	{d16-d17}, [r0]
   1db30:	ldr	r0, [fp, #8]
   1db34:	str	r6, [r5]
   1db38:	str	r2, [r5, #4]
   1db3c:	str	r0, [r5, #8]
   1db40:	str	r1, [r5, #16]
   1db44:	mov	r1, #2
   1db48:	str	r2, [r5, #28]
   1db4c:	str	r7, [r5, #32]
   1db50:	str	r2, [r5, #36]	; 0x24
   1db54:	mov	r2, #0
   1db58:	and	r3, r1, r0, lsr #1
   1db5c:	ldr	r1, [fp, #12]
   1db60:	mov	r0, r6
   1db64:	bl	15094 <flatcc_builder_start_buffer@@Base>
   1db68:	mov	r1, r0
   1db6c:	mvn	r0, #0
   1db70:	cmp	r1, #0
   1db74:	bne	1db9c <flatcc_json_parser_table_as_root@@Base+0xa8>
   1db78:	ldr	ip, [fp, #16]
   1db7c:	mov	r3, sp
   1db80:	mov	r0, r5
   1db84:	mov	r1, r4
   1db88:	mov	r2, r7
   1db8c:	blx	ip
   1db90:	ldr	r0, [r5, #24]
   1db94:	cmp	r0, #0
   1db98:	beq	1dba4 <flatcc_json_parser_table_as_root@@Base+0xb0>
   1db9c:	sub	sp, fp, #16
   1dba0:	pop	{r4, r5, r6, r7, fp, pc}
   1dba4:	ldr	r1, [sp]
   1dba8:	mov	r0, r6
   1dbac:	bl	15284 <flatcc_builder_end_buffer@@Base>
   1dbb0:	cmp	r0, #0
   1dbb4:	mvn	r0, #0
   1dbb8:	movne	r0, #0
   1dbbc:	strne	r4, [r5, #40]	; 0x28
   1dbc0:	sub	sp, fp, #16
   1dbc4:	pop	{r4, r5, r6, r7, fp, pc}

0001dbc8 <flatcc_json_parser_struct_as_root@@Base>:
   1dbc8:	push	{r4, r5, r6, r7, fp, lr}
   1dbcc:	add	fp, sp, #16
   1dbd0:	sub	sp, sp, #48	; 0x30
   1dbd4:	add	r5, sp, #4
   1dbd8:	cmp	r1, #0
   1dbdc:	mov	r6, r0
   1dbe0:	vmov.i32	q8, #0	; 0x00000000
   1dbe4:	add	r7, r2, r3
   1dbe8:	mov	r4, r2
   1dbec:	movne	r5, r1
   1dbf0:	mov	r1, #1
   1dbf4:	add	r0, r5, #12
   1dbf8:	vst1.32	{d16-d17}, [r0]
   1dbfc:	add	r0, r5, #28
   1dc00:	vst1.32	{d16-d17}, [r0]
   1dc04:	ldr	r0, [fp, #8]
   1dc08:	str	r6, [r5]
   1dc0c:	str	r2, [r5, #4]
   1dc10:	str	r0, [r5, #8]
   1dc14:	str	r1, [r5, #16]
   1dc18:	mov	r1, #2
   1dc1c:	str	r2, [r5, #28]
   1dc20:	str	r7, [r5, #32]
   1dc24:	str	r2, [r5, #36]	; 0x24
   1dc28:	mov	r2, #0
   1dc2c:	and	r3, r1, r0, lsr #1
   1dc30:	ldr	r1, [fp, #12]
   1dc34:	mov	r0, r6
   1dc38:	bl	15094 <flatcc_builder_start_buffer@@Base>
   1dc3c:	mov	r1, r0
   1dc40:	mvn	r0, #0
   1dc44:	cmp	r1, #0
   1dc48:	bne	1dc70 <flatcc_json_parser_struct_as_root@@Base+0xa8>
   1dc4c:	ldr	ip, [fp, #16]
   1dc50:	mov	r3, sp
   1dc54:	mov	r0, r5
   1dc58:	mov	r1, r4
   1dc5c:	mov	r2, r7
   1dc60:	blx	ip
   1dc64:	ldr	r0, [r5, #24]
   1dc68:	cmp	r0, #0
   1dc6c:	beq	1dc78 <flatcc_json_parser_struct_as_root@@Base+0xb0>
   1dc70:	sub	sp, fp, #16
   1dc74:	pop	{r4, r5, r6, r7, fp, pc}
   1dc78:	ldr	r1, [sp]
   1dc7c:	mov	r0, r6
   1dc80:	bl	15284 <flatcc_builder_end_buffer@@Base>
   1dc84:	cmp	r0, #0
   1dc88:	mvn	r0, #0
   1dc8c:	movne	r0, #0
   1dc90:	strne	r4, [r5, #40]	; 0x28
   1dc94:	sub	sp, fp, #16
   1dc98:	pop	{r4, r5, r6, r7, fp, pc}
   1dc9c:	eor	r1, r1, #-2147483648	; 0x80000000
   1dca0:	b	1dca8 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   1dca4:	eor	r3, r3, #-2147483648	; 0x80000000
   1dca8:	push	{r4, r5, lr}
   1dcac:	lsl	r4, r1, #1
   1dcb0:	lsl	r5, r3, #1
   1dcb4:	teq	r4, r5
   1dcb8:	teqeq	r0, r2
   1dcbc:	orrsne	ip, r4, r0
   1dcc0:	orrsne	ip, r5, r2
   1dcc4:	mvnsne	ip, r4, asr #21
   1dcc8:	mvnsne	ip, r5, asr #21
   1dccc:	beq	1deb8 <flatcc_json_parser_struct_as_root@@Base+0x2f0>
   1dcd0:	lsr	r4, r4, #21
   1dcd4:	rsbs	r5, r4, r5, lsr #21
   1dcd8:	rsblt	r5, r5, #0
   1dcdc:	ble	1dcfc <flatcc_json_parser_struct_as_root@@Base+0x134>
   1dce0:	add	r4, r4, r5
   1dce4:	eor	r2, r0, r2
   1dce8:	eor	r3, r1, r3
   1dcec:	eor	r0, r2, r0
   1dcf0:	eor	r1, r3, r1
   1dcf4:	eor	r2, r0, r2
   1dcf8:	eor	r3, r1, r3
   1dcfc:	cmp	r5, #54	; 0x36
   1dd00:	pophi	{r4, r5, pc}
   1dd04:	tst	r1, #-2147483648	; 0x80000000
   1dd08:	lsl	r1, r1, #12
   1dd0c:	mov	ip, #1048576	; 0x100000
   1dd10:	orr	r1, ip, r1, lsr #12
   1dd14:	beq	1dd20 <flatcc_json_parser_struct_as_root@@Base+0x158>
   1dd18:	rsbs	r0, r0, #0
   1dd1c:	rsc	r1, r1, #0
   1dd20:	tst	r3, #-2147483648	; 0x80000000
   1dd24:	lsl	r3, r3, #12
   1dd28:	orr	r3, ip, r3, lsr #12
   1dd2c:	beq	1dd38 <flatcc_json_parser_struct_as_root@@Base+0x170>
   1dd30:	rsbs	r2, r2, #0
   1dd34:	rsc	r3, r3, #0
   1dd38:	teq	r4, r5
   1dd3c:	beq	1dea0 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   1dd40:	sub	r4, r4, #1
   1dd44:	rsbs	lr, r5, #32
   1dd48:	blt	1dd64 <flatcc_json_parser_struct_as_root@@Base+0x19c>
   1dd4c:	lsl	ip, r2, lr
   1dd50:	adds	r0, r0, r2, lsr r5
   1dd54:	adc	r1, r1, #0
   1dd58:	adds	r0, r0, r3, lsl lr
   1dd5c:	adcs	r1, r1, r3, asr r5
   1dd60:	b	1dd80 <flatcc_json_parser_struct_as_root@@Base+0x1b8>
   1dd64:	sub	r5, r5, #32
   1dd68:	add	lr, lr, #32
   1dd6c:	cmp	r2, #1
   1dd70:	lsl	ip, r3, lr
   1dd74:	orrcs	ip, ip, #2
   1dd78:	adds	r0, r0, r3, asr r5
   1dd7c:	adcs	r1, r1, r3, asr #31
   1dd80:	and	r5, r1, #-2147483648	; 0x80000000
   1dd84:	bpl	1dd94 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   1dd88:	rsbs	ip, ip, #0
   1dd8c:	rscs	r0, r0, #0
   1dd90:	rsc	r1, r1, #0
   1dd94:	cmp	r1, #1048576	; 0x100000
   1dd98:	bcc	1ddd8 <flatcc_json_parser_struct_as_root@@Base+0x210>
   1dd9c:	cmp	r1, #2097152	; 0x200000
   1dda0:	bcc	1ddc0 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   1dda4:	lsrs	r1, r1, #1
   1dda8:	rrxs	r0, r0
   1ddac:	rrx	ip, ip
   1ddb0:	add	r4, r4, #1
   1ddb4:	lsl	r2, r4, #21
   1ddb8:	cmn	r2, #4194304	; 0x400000
   1ddbc:	bcs	1df18 <flatcc_json_parser_struct_as_root@@Base+0x350>
   1ddc0:	cmp	ip, #-2147483648	; 0x80000000
   1ddc4:	lsrseq	ip, r0, #1
   1ddc8:	adcs	r0, r0, #0
   1ddcc:	adc	r1, r1, r4, lsl #20
   1ddd0:	orr	r1, r1, r5
   1ddd4:	pop	{r4, r5, pc}
   1ddd8:	lsls	ip, ip, #1
   1dddc:	adcs	r0, r0, r0
   1dde0:	adc	r1, r1, r1
   1dde4:	tst	r1, #1048576	; 0x100000
   1dde8:	sub	r4, r4, #1
   1ddec:	bne	1ddc0 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   1ddf0:	teq	r1, #0
   1ddf4:	moveq	r1, r0
   1ddf8:	moveq	r0, #0
   1ddfc:	clz	r3, r1
   1de00:	addeq	r3, r3, #32
   1de04:	sub	r3, r3, #11
   1de08:	subs	r2, r3, #32
   1de0c:	bge	1de30 <flatcc_json_parser_struct_as_root@@Base+0x268>
   1de10:	adds	r2, r2, #12
   1de14:	ble	1de2c <flatcc_json_parser_struct_as_root@@Base+0x264>
   1de18:	add	ip, r2, #20
   1de1c:	rsb	r2, r2, #12
   1de20:	lsl	r0, r1, ip
   1de24:	lsr	r1, r1, r2
   1de28:	b	1de40 <flatcc_json_parser_struct_as_root@@Base+0x278>
   1de2c:	add	r2, r2, #20
   1de30:	rsble	ip, r2, #32
   1de34:	lsl	r1, r1, r2
   1de38:	orrle	r1, r1, r0, lsr ip
   1de3c:	lslle	r0, r0, r2
   1de40:	subs	r4, r4, r3
   1de44:	addge	r1, r1, r4, lsl #20
   1de48:	orrge	r1, r1, r5
   1de4c:	popge	{r4, r5, pc}
   1de50:	mvn	r4, r4
   1de54:	subs	r4, r4, #31
   1de58:	bge	1de94 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   1de5c:	adds	r4, r4, #12
   1de60:	bgt	1de7c <flatcc_json_parser_struct_as_root@@Base+0x2b4>
   1de64:	add	r4, r4, #20
   1de68:	rsb	r2, r4, #32
   1de6c:	lsr	r0, r0, r4
   1de70:	orr	r0, r0, r1, lsl r2
   1de74:	orr	r1, r5, r1, lsr r4
   1de78:	pop	{r4, r5, pc}
   1de7c:	rsb	r4, r4, #12
   1de80:	rsb	r2, r4, #32
   1de84:	lsr	r0, r0, r2
   1de88:	orr	r0, r0, r1, lsl r4
   1de8c:	mov	r1, r5
   1de90:	pop	{r4, r5, pc}
   1de94:	lsr	r0, r1, r4
   1de98:	mov	r1, r5
   1de9c:	pop	{r4, r5, pc}
   1dea0:	teq	r4, #0
   1dea4:	eor	r3, r3, #1048576	; 0x100000
   1dea8:	eoreq	r1, r1, #1048576	; 0x100000
   1deac:	addeq	r4, r4, #1
   1deb0:	subne	r5, r5, #1
   1deb4:	b	1dd40 <flatcc_json_parser_struct_as_root@@Base+0x178>
   1deb8:	mvns	ip, r4, asr #21
   1debc:	mvnsne	ip, r5, asr #21
   1dec0:	beq	1df28 <flatcc_json_parser_struct_as_root@@Base+0x360>
   1dec4:	teq	r4, r5
   1dec8:	teqeq	r0, r2
   1decc:	beq	1dee0 <flatcc_json_parser_struct_as_root@@Base+0x318>
   1ded0:	orrs	ip, r4, r0
   1ded4:	moveq	r1, r3
   1ded8:	moveq	r0, r2
   1dedc:	pop	{r4, r5, pc}
   1dee0:	teq	r1, r3
   1dee4:	movne	r1, #0
   1dee8:	movne	r0, #0
   1deec:	popne	{r4, r5, pc}
   1def0:	lsrs	ip, r4, #21
   1def4:	bne	1df08 <flatcc_json_parser_struct_as_root@@Base+0x340>
   1def8:	lsls	r0, r0, #1
   1defc:	adcs	r1, r1, r1
   1df00:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1df04:	pop	{r4, r5, pc}
   1df08:	adds	r4, r4, #4194304	; 0x400000
   1df0c:	addcc	r1, r1, #1048576	; 0x100000
   1df10:	popcc	{r4, r5, pc}
   1df14:	and	r5, r1, #-2147483648	; 0x80000000
   1df18:	orr	r1, r5, #2130706432	; 0x7f000000
   1df1c:	orr	r1, r1, #15728640	; 0xf00000
   1df20:	mov	r0, #0
   1df24:	pop	{r4, r5, pc}
   1df28:	mvns	ip, r4, asr #21
   1df2c:	movne	r1, r3
   1df30:	movne	r0, r2
   1df34:	mvnseq	ip, r5, asr #21
   1df38:	movne	r3, r1
   1df3c:	movne	r2, r0
   1df40:	orrs	r4, r0, r1, lsl #12
   1df44:	orrseq	r5, r2, r3, lsl #12
   1df48:	teqeq	r1, r3
   1df4c:	orrne	r1, r1, #524288	; 0x80000
   1df50:	pop	{r4, r5, pc}
   1df54:	teq	r0, #0
   1df58:	moveq	r1, #0
   1df5c:	bxeq	lr
   1df60:	push	{r4, r5, lr}
   1df64:	mov	r4, #1024	; 0x400
   1df68:	add	r4, r4, #50	; 0x32
   1df6c:	mov	r5, #0
   1df70:	mov	r1, #0
   1df74:	b	1ddf0 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1df78:	teq	r0, #0
   1df7c:	moveq	r1, #0
   1df80:	bxeq	lr
   1df84:	push	{r4, r5, lr}
   1df88:	mov	r4, #1024	; 0x400
   1df8c:	add	r4, r4, #50	; 0x32
   1df90:	ands	r5, r0, #-2147483648	; 0x80000000
   1df94:	rsbmi	r0, r0, #0
   1df98:	mov	r1, #0
   1df9c:	b	1ddf0 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1dfa0:	lsls	r2, r0, #1
   1dfa4:	asr	r1, r2, #3
   1dfa8:	rrx	r1, r1
   1dfac:	lsl	r0, r2, #28
   1dfb0:	andsne	r3, r2, #-16777216	; 0xff000000
   1dfb4:	teqne	r3, #-16777216	; 0xff000000
   1dfb8:	eorne	r1, r1, #939524096	; 0x38000000
   1dfbc:	bxne	lr
   1dfc0:	bics	r2, r2, #-16777216	; 0xff000000
   1dfc4:	bxeq	lr
   1dfc8:	teq	r3, #-16777216	; 0xff000000
   1dfcc:	orreq	r1, r1, #524288	; 0x80000
   1dfd0:	bxeq	lr
   1dfd4:	push	{r4, r5, lr}
   1dfd8:	mov	r4, #896	; 0x380
   1dfdc:	and	r5, r1, #-2147483648	; 0x80000000
   1dfe0:	bic	r1, r1, #-2147483648	; 0x80000000
   1dfe4:	b	1ddf0 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1dfe8:	orrs	r2, r0, r1
   1dfec:	bxeq	lr
   1dff0:	push	{r4, r5, lr}
   1dff4:	mov	r5, #0
   1dff8:	b	1e018 <flatcc_json_parser_struct_as_root@@Base+0x450>
   1dffc:	orrs	r2, r0, r1
   1e000:	bxeq	lr
   1e004:	push	{r4, r5, lr}
   1e008:	ands	r5, r1, #-2147483648	; 0x80000000
   1e00c:	bpl	1e018 <flatcc_json_parser_struct_as_root@@Base+0x450>
   1e010:	rsbs	r0, r0, #0
   1e014:	rsc	r1, r1, #0
   1e018:	mov	r4, #1024	; 0x400
   1e01c:	add	r4, r4, #50	; 0x32
   1e020:	lsrs	ip, r1, #22
   1e024:	beq	1dd94 <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   1e028:	mov	r2, #3
   1e02c:	lsrs	ip, ip, #3
   1e030:	addne	r2, r2, #3
   1e034:	lsrs	ip, ip, #3
   1e038:	addne	r2, r2, #3
   1e03c:	add	r2, r2, ip, lsr #3
   1e040:	rsb	r3, r2, #32
   1e044:	lsl	ip, r0, r3
   1e048:	lsr	r0, r0, r2
   1e04c:	orr	r0, r0, r1, lsl r3
   1e050:	lsr	r1, r1, r2
   1e054:	add	r4, r4, r2
   1e058:	b	1dd94 <flatcc_json_parser_struct_as_root@@Base+0x1cc>

0001e05c <__libc_csu_init@@Base>:
   1e05c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e060:	mov	r7, r0
   1e064:	ldr	r6, [pc, #72]	; 1e0b4 <__libc_csu_init@@Base+0x58>
   1e068:	ldr	r5, [pc, #72]	; 1e0b8 <__libc_csu_init@@Base+0x5c>
   1e06c:	add	r6, pc, r6
   1e070:	add	r5, pc, r5
   1e074:	sub	r6, r6, r5
   1e078:	mov	r8, r1
   1e07c:	mov	r9, r2
   1e080:	bl	128d8 <free@plt-0x20>
   1e084:	asrs	r6, r6, #2
   1e088:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e08c:	mov	r4, #0
   1e090:	add	r4, r4, #1
   1e094:	ldr	r3, [r5], #4
   1e098:	mov	r2, r9
   1e09c:	mov	r1, r8
   1e0a0:	mov	r0, r7
   1e0a4:	blx	r3
   1e0a8:	cmp	r6, r4
   1e0ac:	bne	1e090 <__libc_csu_init@@Base+0x34>
   1e0b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e0b4:	muleq	r1, r8, lr
   1e0b8:	muleq	r1, r0, lr

0001e0bc <__libc_csu_fini@@Base>:
   1e0bc:	bx	lr

Disassembly of section .fini:

0001e0c0 <.fini>:
   1e0c0:	push	{r3, lr}
   1e0c4:	pop	{r3, pc}
