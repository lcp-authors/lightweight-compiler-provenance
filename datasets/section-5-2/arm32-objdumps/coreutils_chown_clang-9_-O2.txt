
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

000111c4 <.init>:
   111c4:	push	{r3, lr}
   111c8:	bl	1156c <__assert_fail@plt+0x4c>
   111cc:	pop	{r3, pc}

Disassembly of section .plt:

000111d0 <fstatfs64@plt-0x14>:
   111d0:	push	{lr}		; (str lr, [sp, #-4]!)
   111d4:	ldr	lr, [pc, #4]	; 111e0 <fstatfs64@plt-0x4>
   111d8:	add	lr, pc, lr
   111dc:	ldr	pc, [lr, #8]!
   111e0:	andeq	fp, r1, r0, lsr #28

000111e4 <fstatfs64@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #110592	; 0x1b000
   111ec:	ldr	pc, [ip, #3616]!	; 0xe20

000111f0 <calloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #110592	; 0x1b000
   111f8:	ldr	pc, [ip, #3608]!	; 0xe18

000111fc <endgrent@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #110592	; 0x1b000
   11204:	ldr	pc, [ip, #3600]!	; 0xe10

00011208 <fputs_unlocked@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #110592	; 0x1b000
   11210:	ldr	pc, [ip, #3592]!	; 0xe08

00011214 <raise@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #110592	; 0x1b000
   1121c:	ldr	pc, [ip, #3584]!	; 0xe00

00011220 <getpwnam@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #110592	; 0x1b000
   11228:	ldr	pc, [ip, #3576]!	; 0xdf8

0001122c <strcmp@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #110592	; 0x1b000
   11234:	ldr	pc, [ip, #3568]!	; 0xdf0

00011238 <getpwuid@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #110592	; 0x1b000
   11240:	ldr	pc, [ip, #3560]!	; 0xde8

00011244 <fflush@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #110592	; 0x1b000
   1124c:	ldr	pc, [ip, #3552]!	; 0xde0

00011250 <memmove@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #110592	; 0x1b000
   11258:	ldr	pc, [ip, #3544]!	; 0xdd8

0001125c <free@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #110592	; 0x1b000
   11264:	ldr	pc, [ip, #3536]!	; 0xdd0

00011268 <_exit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #110592	; 0x1b000
   11270:	ldr	pc, [ip, #3528]!	; 0xdc8

00011274 <memcpy@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #110592	; 0x1b000
   1127c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011280 <mbsinit@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #110592	; 0x1b000
   11288:	ldr	pc, [ip, #3512]!	; 0xdb8

0001128c <stpcpy@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #110592	; 0x1b000
   11294:	ldr	pc, [ip, #3504]!	; 0xdb0

00011298 <dcgettext@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #110592	; 0x1b000
   112a0:	ldr	pc, [ip, #3496]!	; 0xda8

000112a4 <realloc@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #110592	; 0x1b000
   112ac:	ldr	pc, [ip, #3488]!	; 0xda0

000112b0 <textdomain@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #110592	; 0x1b000
   112b8:	ldr	pc, [ip, #3480]!	; 0xd98

000112bc <__fxstatat64@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #110592	; 0x1b000
   112c4:	ldr	pc, [ip, #3472]!	; 0xd90

000112c8 <iswprint@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #110592	; 0x1b000
   112d0:	ldr	pc, [ip, #3464]!	; 0xd88

000112d4 <__fxstat64@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #110592	; 0x1b000
   112dc:	ldr	pc, [ip, #3456]!	; 0xd80

000112e0 <fwrite@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #110592	; 0x1b000
   112e8:	ldr	pc, [ip, #3448]!	; 0xd78

000112ec <lseek64@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #110592	; 0x1b000
   112f4:	ldr	pc, [ip, #3440]!	; 0xd70

000112f8 <__ctype_get_mb_cur_max@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #110592	; 0x1b000
   11300:	ldr	pc, [ip, #3432]!	; 0xd68

00011304 <__fpending@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #110592	; 0x1b000
   1130c:	ldr	pc, [ip, #3424]!	; 0xd60

00011310 <mbrtowc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #110592	; 0x1b000
   11318:	ldr	pc, [ip, #3416]!	; 0xd58

0001131c <error@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #110592	; 0x1b000
   11324:	ldr	pc, [ip, #3408]!	; 0xd50

00011328 <open64@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #110592	; 0x1b000
   11330:	ldr	pc, [ip, #3400]!	; 0xd48

00011334 <malloc@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #110592	; 0x1b000
   1133c:	ldr	pc, [ip, #3392]!	; 0xd40

00011340 <__libc_start_main@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #110592	; 0x1b000
   11348:	ldr	pc, [ip, #3384]!	; 0xd38

0001134c <__freading@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #110592	; 0x1b000
   11354:	ldr	pc, [ip, #3376]!	; 0xd30

00011358 <__gmon_start__@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #110592	; 0x1b000
   11360:	ldr	pc, [ip, #3368]!	; 0xd28

00011364 <getopt_long@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #110592	; 0x1b000
   1136c:	ldr	pc, [ip, #3360]!	; 0xd20

00011370 <__ctype_b_loc@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #110592	; 0x1b000
   11378:	ldr	pc, [ip, #3352]!	; 0xd18

0001137c <exit@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #110592	; 0x1b000
   11384:	ldr	pc, [ip, #3344]!	; 0xd10

00011388 <bcmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #110592	; 0x1b000
   11390:	ldr	pc, [ip, #3336]!	; 0xd08

00011394 <strtoul@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #110592	; 0x1b000
   1139c:	ldr	pc, [ip, #3328]!	; 0xd00

000113a0 <strlen@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #110592	; 0x1b000
   113a8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113ac <strchr@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #110592	; 0x1b000
   113b4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113b8 <openat64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #110592	; 0x1b000
   113c0:	ldr	pc, [ip, #3304]!	; 0xce8

000113c4 <fchown@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #110592	; 0x1b000
   113cc:	ldr	pc, [ip, #3296]!	; 0xce0

000113d0 <__errno_location@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #110592	; 0x1b000
   113d8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113dc <__cxa_atexit@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #110592	; 0x1b000
   113e4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113e8 <memset@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #110592	; 0x1b000
   113f0:	ldr	pc, [ip, #3272]!	; 0xcc8

000113f4 <__printf_chk@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #110592	; 0x1b000
   113fc:	ldr	pc, [ip, #3264]!	; 0xcc0

00011400 <fileno@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #110592	; 0x1b000
   11408:	ldr	pc, [ip, #3256]!	; 0xcb8

0001140c <__fprintf_chk@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #110592	; 0x1b000
   11414:	ldr	pc, [ip, #3248]!	; 0xcb0

00011418 <fclose@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #110592	; 0x1b000
   11420:	ldr	pc, [ip, #3240]!	; 0xca8

00011424 <fseeko64@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #110592	; 0x1b000
   1142c:	ldr	pc, [ip, #3232]!	; 0xca0

00011430 <fcntl64@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #110592	; 0x1b000
   11438:	ldr	pc, [ip, #3224]!	; 0xc98

0001143c <setlocale@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #110592	; 0x1b000
   11444:	ldr	pc, [ip, #3216]!	; 0xc90

00011448 <endpwent@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #110592	; 0x1b000
   11450:	ldr	pc, [ip, #3208]!	; 0xc88

00011454 <strrchr@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #110592	; 0x1b000
   1145c:	ldr	pc, [ip, #3200]!	; 0xc80

00011460 <nl_langinfo@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #110592	; 0x1b000
   11468:	ldr	pc, [ip, #3192]!	; 0xc78

0001146c <readdir64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #110592	; 0x1b000
   11474:	ldr	pc, [ip, #3184]!	; 0xc70

00011478 <fdopendir@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #110592	; 0x1b000
   11480:	ldr	pc, [ip, #3176]!	; 0xc68

00011484 <dirfd@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #110592	; 0x1b000
   1148c:	ldr	pc, [ip, #3168]!	; 0xc60

00011490 <fchdir@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #110592	; 0x1b000
   11498:	ldr	pc, [ip, #3160]!	; 0xc58

0001149c <qsort@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #110592	; 0x1b000
   114a4:	ldr	pc, [ip, #3152]!	; 0xc50

000114a8 <fchownat@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #110592	; 0x1b000
   114b0:	ldr	pc, [ip, #3144]!	; 0xc48

000114b4 <bindtextdomain@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #110592	; 0x1b000
   114bc:	ldr	pc, [ip, #3136]!	; 0xc40

000114c0 <__xstat64@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #110592	; 0x1b000
   114c8:	ldr	pc, [ip, #3128]!	; 0xc38

000114cc <strncmp@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #110592	; 0x1b000
   114d4:	ldr	pc, [ip, #3120]!	; 0xc30

000114d8 <abort@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #110592	; 0x1b000
   114e0:	ldr	pc, [ip, #3112]!	; 0xc28

000114e4 <close@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #110592	; 0x1b000
   114ec:	ldr	pc, [ip, #3104]!	; 0xc20

000114f0 <__lxstat64@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #110592	; 0x1b000
   114f8:	ldr	pc, [ip, #3096]!	; 0xc18

000114fc <closedir@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #110592	; 0x1b000
   11504:	ldr	pc, [ip, #3088]!	; 0xc10

00011508 <getgrgid@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #110592	; 0x1b000
   11510:	ldr	pc, [ip, #3080]!	; 0xc08

00011514 <getgrnam@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #110592	; 0x1b000
   1151c:	ldr	pc, [ip, #3072]!	; 0xc00

00011520 <__assert_fail@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #110592	; 0x1b000
   11528:	ldr	pc, [ip, #3064]!	; 0xbf8

Disassembly of section .text:

00011530 <.text>:
   11530:	mov	fp, #0
   11534:	mov	lr, #0
   11538:	pop	{r1}		; (ldr r1, [sp], #4)
   1153c:	mov	r2, sp
   11540:	push	{r2}		; (str r2, [sp, #-4]!)
   11544:	push	{r0}		; (str r0, [sp, #-4]!)
   11548:	ldr	ip, [pc, #16]	; 11560 <__assert_fail@plt+0x40>
   1154c:	push	{ip}		; (str ip, [sp, #-4]!)
   11550:	ldr	r0, [pc, #12]	; 11564 <__assert_fail@plt+0x44>
   11554:	ldr	r3, [pc, #12]	; 11568 <__assert_fail@plt+0x48>
   11558:	bl	11340 <__libc_start_main@plt>
   1155c:	bl	114d8 <abort@plt>
   11560:	andeq	sl, r1, ip, lsl #16
   11564:	muleq	r1, r0, r9
   11568:	andeq	sl, r1, ip, lsr #15
   1156c:	ldr	r3, [pc, #20]	; 11588 <__assert_fail@plt+0x68>
   11570:	ldr	r2, [pc, #20]	; 1158c <__assert_fail@plt+0x6c>
   11574:	add	r3, pc, r3
   11578:	ldr	r2, [r3, r2]
   1157c:	cmp	r2, #0
   11580:	bxeq	lr
   11584:	b	11358 <__gmon_start__@plt>
   11588:	andeq	fp, r1, r4, lsl #21
   1158c:	andeq	r0, r0, r4, lsr #2
   11590:	ldr	r0, [pc, #24]	; 115b0 <__assert_fail@plt+0x90>
   11594:	ldr	r3, [pc, #24]	; 115b4 <__assert_fail@plt+0x94>
   11598:	cmp	r3, r0
   1159c:	bxeq	lr
   115a0:	ldr	r3, [pc, #16]	; 115b8 <__assert_fail@plt+0x98>
   115a4:	cmp	r3, #0
   115a8:	bxeq	lr
   115ac:	bx	r3
   115b0:	andeq	sp, r2, r8, ror r1
   115b4:	andeq	sp, r2, r8, ror r1
   115b8:	andeq	r0, r0, r0
   115bc:	ldr	r0, [pc, #36]	; 115e8 <__assert_fail@plt+0xc8>
   115c0:	ldr	r1, [pc, #36]	; 115ec <__assert_fail@plt+0xcc>
   115c4:	sub	r1, r1, r0
   115c8:	asr	r1, r1, #2
   115cc:	add	r1, r1, r1, lsr #31
   115d0:	asrs	r1, r1, #1
   115d4:	bxeq	lr
   115d8:	ldr	r3, [pc, #16]	; 115f0 <__assert_fail@plt+0xd0>
   115dc:	cmp	r3, #0
   115e0:	bxeq	lr
   115e4:	bx	r3
   115e8:	andeq	sp, r2, r8, ror r1
   115ec:	andeq	sp, r2, r8, ror r1
   115f0:	andeq	r0, r0, r0
   115f4:	push	{r4, lr}
   115f8:	ldr	r4, [pc, #24]	; 11618 <__assert_fail@plt+0xf8>
   115fc:	ldrb	r3, [r4]
   11600:	cmp	r3, #0
   11604:	popne	{r4, pc}
   11608:	bl	11590 <__assert_fail@plt+0x70>
   1160c:	mov	r3, #1
   11610:	strb	r3, [r4]
   11614:	pop	{r4, pc}
   11618:	muleq	r2, r4, r1
   1161c:	b	115bc <__assert_fail@plt+0x9c>
   11620:	push	{fp, lr}
   11624:	mov	fp, sp
   11628:	sub	sp, sp, #64	; 0x40
   1162c:	mov	r4, r0
   11630:	cmp	r0, #0
   11634:	bne	1194c <__assert_fail@plt+0x42c>
   11638:	movw	r1, #43099	; 0xa85b
   1163c:	mov	r0, #0
   11640:	mov	r2, #5
   11644:	movt	r1, #1
   11648:	bl	11298 <dcgettext@plt>
   1164c:	movw	r5, #53688	; 0xd1b8
   11650:	mov	r1, r0
   11654:	mov	r0, #1
   11658:	movt	r5, #2
   1165c:	ldr	r2, [r5]
   11660:	mov	r3, r2
   11664:	bl	113f4 <__printf_chk@plt>
   11668:	movw	r1, #43196	; 0xa8bc
   1166c:	mov	r0, #0
   11670:	mov	r2, #5
   11674:	movt	r1, #1
   11678:	bl	11298 <dcgettext@plt>
   1167c:	movw	r7, #53644	; 0xd18c
   11680:	movt	r7, #2
   11684:	ldr	r1, [r7]
   11688:	bl	11208 <fputs_unlocked@plt>
   1168c:	movw	r1, #43341	; 0xa94d
   11690:	mov	r0, #0
   11694:	mov	r2, #5
   11698:	movt	r1, #1
   1169c:	bl	11298 <dcgettext@plt>
   116a0:	ldr	r1, [r7]
   116a4:	bl	11208 <fputs_unlocked@plt>
   116a8:	movw	r1, #43542	; 0xaa16
   116ac:	mov	r0, #0
   116b0:	mov	r2, #5
   116b4:	movt	r1, #1
   116b8:	bl	11298 <dcgettext@plt>
   116bc:	ldr	r1, [r7]
   116c0:	bl	11208 <fputs_unlocked@plt>
   116c4:	movw	r1, #43773	; 0xaafd
   116c8:	mov	r0, #0
   116cc:	mov	r2, #5
   116d0:	movt	r1, #1
   116d4:	bl	11298 <dcgettext@plt>
   116d8:	ldr	r1, [r7]
   116dc:	bl	11208 <fputs_unlocked@plt>
   116e0:	movw	r1, #43892	; 0xab74
   116e4:	mov	r0, #0
   116e8:	mov	r2, #5
   116ec:	movt	r1, #1
   116f0:	bl	11298 <dcgettext@plt>
   116f4:	ldr	r1, [r7]
   116f8:	bl	11208 <fputs_unlocked@plt>
   116fc:	movw	r1, #44232	; 0xacc8
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	movt	r1, #1
   1170c:	bl	11298 <dcgettext@plt>
   11710:	ldr	r1, [r7]
   11714:	bl	11208 <fputs_unlocked@plt>
   11718:	movw	r1, #44360	; 0xad48
   1171c:	mov	r0, #0
   11720:	mov	r2, #5
   11724:	movt	r1, #1
   11728:	bl	11298 <dcgettext@plt>
   1172c:	ldr	r1, [r7]
   11730:	bl	11208 <fputs_unlocked@plt>
   11734:	movw	r1, #44481	; 0xadc1
   11738:	mov	r0, #0
   1173c:	mov	r2, #5
   11740:	movt	r1, #1
   11744:	bl	11298 <dcgettext@plt>
   11748:	ldr	r1, [r7]
   1174c:	bl	11208 <fputs_unlocked@plt>
   11750:	movw	r1, #44552	; 0xae08
   11754:	mov	r0, #0
   11758:	mov	r2, #5
   1175c:	movt	r1, #1
   11760:	bl	11298 <dcgettext@plt>
   11764:	ldr	r1, [r7]
   11768:	bl	11208 <fputs_unlocked@plt>
   1176c:	movw	r1, #45017	; 0xafd9
   11770:	mov	r0, #0
   11774:	mov	r2, #5
   11778:	movt	r1, #1
   1177c:	bl	11298 <dcgettext@plt>
   11780:	ldr	r1, [r7]
   11784:	bl	11208 <fputs_unlocked@plt>
   11788:	movw	r1, #45062	; 0xb006
   1178c:	mov	r0, #0
   11790:	mov	r2, #5
   11794:	movt	r1, #1
   11798:	bl	11298 <dcgettext@plt>
   1179c:	ldr	r1, [r7]
   117a0:	bl	11208 <fputs_unlocked@plt>
   117a4:	movw	r1, #45116	; 0xb03c
   117a8:	mov	r0, #0
   117ac:	mov	r2, #5
   117b0:	movt	r1, #1
   117b4:	bl	11298 <dcgettext@plt>
   117b8:	ldr	r1, [r7]
   117bc:	bl	11208 <fputs_unlocked@plt>
   117c0:	movw	r1, #45308	; 0xb0fc
   117c4:	mov	r0, #0
   117c8:	mov	r2, #5
   117cc:	movt	r1, #1
   117d0:	bl	11298 <dcgettext@plt>
   117d4:	ldr	r2, [r5]
   117d8:	mov	r1, r0
   117dc:	mov	r0, #1
   117e0:	mov	r3, r2
   117e4:	str	r2, [sp]
   117e8:	bl	113f4 <__printf_chk@plt>
   117ec:	movw	r0, #46336	; 0xb500
   117f0:	mov	r2, #48	; 0x30
   117f4:	add	r6, sp, #8
   117f8:	movw	r5, #45509	; 0xb1c5
   117fc:	movt	r0, #1
   11800:	movt	r5, #1
   11804:	add	r1, r0, #32
   11808:	add	r3, r0, #16
   1180c:	vld1.64	{d18-d19}, [r0], r2
   11810:	vld1.64	{d16-d17}, [r1]
   11814:	vld1.64	{d20-d21}, [r3]
   11818:	vldr	d22, [r0]
   1181c:	add	r1, r6, #32
   11820:	add	r0, r6, #16
   11824:	vst1.64	{d16-d17}, [r1]
   11828:	movw	r1, #45712	; 0xb290
   1182c:	vst1.64	{d20-d21}, [r0]
   11830:	mov	r0, r6
   11834:	movt	r1, #1
   11838:	vst1.64	{d18-d19}, [r0], r2
   1183c:	vstr	d22, [r0]
   11840:	mov	r0, r5
   11844:	bl	1122c <strcmp@plt>
   11848:	cmp	r0, #0
   1184c:	ldrne	r1, [r6, #8]!
   11850:	cmpne	r1, #0
   11854:	bne	11840 <__assert_fail@plt+0x320>
   11858:	movw	r1, #45807	; 0xb2ef
   1185c:	ldr	r6, [r6, #4]
   11860:	mov	r0, #0
   11864:	mov	r2, #5
   11868:	movt	r1, #1
   1186c:	bl	11298 <dcgettext@plt>
   11870:	movw	r2, #45555	; 0xb1f3
   11874:	movw	r3, #45830	; 0xb306
   11878:	mov	r1, r0
   1187c:	mov	r0, #1
   11880:	movt	r2, #1
   11884:	movt	r3, #1
   11888:	bl	113f4 <__printf_chk@plt>
   1188c:	cmp	r6, #0
   11890:	mov	r0, #5
   11894:	mov	r1, #0
   11898:	moveq	r6, r5
   1189c:	bl	1143c <setlocale@plt>
   118a0:	cmp	r0, #0
   118a4:	beq	118dc <__assert_fail@plt+0x3bc>
   118a8:	movw	r1, #45870	; 0xb32e
   118ac:	mov	r2, #3
   118b0:	movt	r1, #1
   118b4:	bl	114cc <strncmp@plt>
   118b8:	cmp	r0, #0
   118bc:	beq	118dc <__assert_fail@plt+0x3bc>
   118c0:	movw	r1, #45874	; 0xb332
   118c4:	mov	r0, #0
   118c8:	mov	r2, #5
   118cc:	movt	r1, #1
   118d0:	bl	11298 <dcgettext@plt>
   118d4:	ldr	r1, [r7]
   118d8:	bl	11208 <fputs_unlocked@plt>
   118dc:	movw	r1, #45945	; 0xb379
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	11298 <dcgettext@plt>
   118f0:	movw	r2, #45830	; 0xb306
   118f4:	mov	r1, r0
   118f8:	mov	r0, #1
   118fc:	mov	r3, r5
   11900:	movt	r2, #1
   11904:	bl	113f4 <__printf_chk@plt>
   11908:	movw	r1, #45972	; 0xb394
   1190c:	mov	r0, #0
   11910:	mov	r2, #5
   11914:	movt	r1, #1
   11918:	bl	11298 <dcgettext@plt>
   1191c:	mov	r1, r0
   11920:	movw	r0, #45740	; 0xb2ac
   11924:	movw	r3, #45016	; 0xafd8
   11928:	cmp	r6, r5
   1192c:	mov	r2, r6
   11930:	movt	r0, #1
   11934:	movt	r3, #1
   11938:	moveq	r3, r0
   1193c:	mov	r0, #1
   11940:	bl	113f4 <__printf_chk@plt>
   11944:	mov	r0, r4
   11948:	bl	1137c <exit@plt>
   1194c:	movw	r0, #53640	; 0xd188
   11950:	movw	r1, #43060	; 0xa834
   11954:	mov	r2, #5
   11958:	movt	r0, #2
   1195c:	movt	r1, #1
   11960:	ldr	r5, [r0]
   11964:	mov	r0, #0
   11968:	bl	11298 <dcgettext@plt>
   1196c:	mov	r2, r0
   11970:	movw	r0, #53688	; 0xd1b8
   11974:	mov	r1, #1
   11978:	movt	r0, #2
   1197c:	ldr	r3, [r0]
   11980:	mov	r0, r5
   11984:	bl	1140c <__fprintf_chk@plt>
   11988:	mov	r0, r4
   1198c:	bl	1137c <exit@plt>
   11990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11994:	add	fp, sp, #28
   11998:	sub	sp, sp, #164	; 0xa4
   1199c:	mvn	r9, #0
   119a0:	mov	r6, r0
   119a4:	mov	sl, r1
   119a8:	str	r9, [fp, #-32]	; 0xffffffe0
   119ac:	str	r9, [fp, #-36]	; 0xffffffdc
   119b0:	str	r9, [fp, #-40]	; 0xffffffd8
   119b4:	str	r9, [fp, #-44]	; 0xffffffd4
   119b8:	ldr	r0, [r1]
   119bc:	bl	16774 <__assert_fail@plt+0x5254>
   119c0:	movw	r1, #45016	; 0xafd8
   119c4:	mov	r0, #6
   119c8:	movt	r1, #1
   119cc:	bl	1143c <setlocale@plt>
   119d0:	movw	r5, #45559	; 0xb1f7
   119d4:	movw	r1, #45515	; 0xb1cb
   119d8:	movt	r5, #1
   119dc:	movt	r1, #1
   119e0:	mov	r0, r5
   119e4:	bl	114b4 <bindtextdomain@plt>
   119e8:	mov	r0, r5
   119ec:	bl	112b0 <textdomain@plt>
   119f0:	movw	r0, #11708	; 0x2dbc
   119f4:	movt	r0, #1
   119f8:	bl	1a810 <__assert_fail@plt+0x92f0>
   119fc:	sub	r0, fp, #68	; 0x44
   11a00:	bl	11f64 <__assert_fail@plt+0xa44>
   11a04:	movw	r7, #45539	; 0xb1e3
   11a08:	movw	r5, #46112	; 0xb420
   11a0c:	mov	r8, #0
   11a10:	mov	r0, #16
   11a14:	movt	r7, #1
   11a18:	movt	r5, #1
   11a1c:	mov	r1, #0
   11a20:	str	r1, [sp, #12]
   11a24:	mov	r4, r0
   11a28:	mov	r0, r6
   11a2c:	mov	r1, sl
   11a30:	mov	r2, r7
   11a34:	mov	r3, r5
   11a38:	str	r8, [sp]
   11a3c:	bl	11364 <getopt_long@plt>
   11a40:	cmp	r0, #71	; 0x47
   11a44:	ble	11c14 <__assert_fail@plt+0x6f4>
   11a48:	sub	r1, r0, #72	; 0x48
   11a4c:	cmp	r1, #46	; 0x2e
   11a50:	bhi	11b24 <__assert_fail@plt+0x604>
   11a54:	add	r2, pc, #4
   11a58:	mov	r0, #17
   11a5c:	ldr	pc, [r2, r1, lsl #2]
   11a60:	andeq	r1, r1, r4, lsr #20
   11a64:	muleq	r1, r0, lr
   11a68:	muleq	r1, r0, lr
   11a6c:	muleq	r1, r0, lr
   11a70:	andeq	r1, r1, ip, lsl fp
   11a74:	muleq	r1, r0, lr
   11a78:	muleq	r1, r0, lr
   11a7c:	muleq	r1, r0, lr
   11a80:	muleq	r1, r8, fp
   11a84:	muleq	r1, r0, lr
   11a88:	andeq	r1, r1, r8, ror #22
   11a8c:	muleq	r1, r0, lr
   11a90:	muleq	r1, r0, lr
   11a94:	muleq	r1, r0, lr
   11a98:	muleq	r1, r0, lr
   11a9c:	muleq	r1, r0, lr
   11aa0:	muleq	r1, r0, lr
   11aa4:	muleq	r1, r0, lr
   11aa8:	muleq	r1, r0, lr
   11aac:	muleq	r1, r0, lr
   11ab0:	muleq	r1, r0, lr
   11ab4:	muleq	r1, r0, lr
   11ab8:	muleq	r1, r0, lr
   11abc:	muleq	r1, r0, lr
   11ac0:	muleq	r1, r0, lr
   11ac4:	muleq	r1, r0, lr
   11ac8:	muleq	r1, r0, lr
   11acc:	andeq	r1, r1, r8, asr fp
   11ad0:	muleq	r1, r0, lr
   11ad4:	muleq	r1, r0, lr
   11ad8:	andeq	r1, r1, r0, lsr #23
   11adc:	muleq	r1, r0, lr
   11ae0:			; <UNDEFINED> instruction: 0x00011bb0
   11ae4:	muleq	r1, r0, lr
   11ae8:	muleq	r1, r0, lr
   11aec:	muleq	r1, r0, lr
   11af0:	muleq	r1, r0, lr
   11af4:	muleq	r1, r0, lr
   11af8:	muleq	r1, r0, lr
   11afc:	muleq	r1, r0, lr
   11b00:	muleq	r1, r0, lr
   11b04:	muleq	r1, r0, lr
   11b08:	muleq	r1, r0, lr
   11b0c:	muleq	r1, r0, lr
   11b10:	muleq	r1, r0, lr
   11b14:	muleq	r1, r0, lr
   11b18:			; <UNDEFINED> instruction: 0x00011bbc
   11b1c:	mov	r0, #2
   11b20:	b	11a24 <__assert_fail@plt+0x504>
   11b24:	sub	r0, r0, #256	; 0x100
   11b28:	cmp	r0, #4
   11b2c:	bhi	11e90 <__assert_fail@plt+0x970>
   11b30:	add	r1, pc, #0
   11b34:	ldr	pc, [r1, r0, lsl #2]
   11b38:	andeq	r1, r1, ip, asr #22
   11b3c:	andeq	r1, r1, r8, asr #23
   11b40:	andeq	r1, r1, ip, lsl #24
   11b44:	strdeq	r1, [r1], -ip
   11b48:	andeq	r1, r1, r8, ror fp
   11b4c:	mov	r9, #1
   11b50:	mov	r0, r4
   11b54:	b	11a24 <__assert_fail@plt+0x504>
   11b58:	mov	r0, #1
   11b5c:	str	r0, [fp, #-68]	; 0xffffffbc
   11b60:	mov	r0, r4
   11b64:	b	11a24 <__assert_fail@plt+0x504>
   11b68:	mov	r0, #1
   11b6c:	strb	r0, [fp, #-64]	; 0xffffffc0
   11b70:	mov	r0, r4
   11b74:	b	11a24 <__assert_fail@plt+0x504>
   11b78:	movw	r0, #53648	; 0xd190
   11b7c:	movw	r1, #53656	; 0xd198
   11b80:	movt	r0, #2
   11b84:	movt	r1, #2
   11b88:	ldr	r0, [r0]
   11b8c:	str	r0, [r1]
   11b90:	mov	r0, r4
   11b94:	b	11a24 <__assert_fail@plt+0x504>
   11b98:	mov	r0, #16
   11b9c:	b	11a24 <__assert_fail@plt+0x504>
   11ba0:	mov	r0, #1
   11ba4:	strb	r0, [fp, #-55]	; 0xffffffc9
   11ba8:	mov	r0, r4
   11bac:	b	11a24 <__assert_fail@plt+0x504>
   11bb0:	mov	r9, #0
   11bb4:	mov	r0, r4
   11bb8:	b	11a24 <__assert_fail@plt+0x504>
   11bbc:	str	r8, [fp, #-68]	; 0xffffffbc
   11bc0:	mov	r0, r4
   11bc4:	b	11a24 <__assert_fail@plt+0x504>
   11bc8:	movw	r0, #53648	; 0xd190
   11bcc:	sub	r1, fp, #40	; 0x28
   11bd0:	sub	r2, fp, #44	; 0x2c
   11bd4:	mov	r3, #0
   11bd8:	str	r8, [sp]
   11bdc:	movt	r0, #2
   11be0:	ldr	r0, [r0]
   11be4:	bl	185b4 <__assert_fail@plt+0x7094>
   11be8:	mov	r1, r0
   11bec:	cmp	r0, #0
   11bf0:	mov	r0, r4
   11bf4:	beq	11a24 <__assert_fail@plt+0x504>
   11bf8:	b	11e20 <__assert_fail@plt+0x900>
   11bfc:	mov	r0, #1
   11c00:	str	r0, [sp, #12]
   11c04:	mov	r0, r4
   11c08:	b	11a24 <__assert_fail@plt+0x504>
   11c0c:	mov	r0, r4
   11c10:	b	11a1c <__assert_fail@plt+0x4fc>
   11c14:	cmn	r0, #1
   11c18:	bne	11db4 <__assert_fail@plt+0x894>
   11c1c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11c20:	mov	r7, #16
   11c24:	cmp	r0, #0
   11c28:	beq	11c64 <__assert_fail@plt+0x744>
   11c2c:	cmp	r4, #16
   11c30:	bne	11c6c <__assert_fail@plt+0x74c>
   11c34:	mov	r0, #0
   11c38:	cmp	r9, #1
   11c3c:	bne	11c74 <__assert_fail@plt+0x754>
   11c40:	movw	r1, #45598	; 0xb21e
   11c44:	mov	r0, #0
   11c48:	mov	r2, #5
   11c4c:	movt	r1, #1
   11c50:	bl	11298 <dcgettext@plt>
   11c54:	mov	r2, r0
   11c58:	mov	r0, #1
   11c5c:	mov	r1, #0
   11c60:	bl	1131c <error@plt>
   11c64:	mov	r0, r9
   11c68:	b	11c74 <__assert_fail@plt+0x754>
   11c6c:	mov	r0, r9
   11c70:	mov	r7, r4
   11c74:	cmp	r0, #0
   11c78:	movw	r4, #53632	; 0xd180
   11c7c:	mov	r2, #2
   11c80:	sub	r8, fp, #68	; 0x44
   11c84:	movwne	r0, #1
   11c88:	movt	r4, #2
   11c8c:	strb	r0, [fp, #-56]	; 0xffffffc8
   11c90:	movw	r0, #53656	; 0xd198
   11c94:	movt	r0, #2
   11c98:	ldr	r1, [r0]
   11c9c:	ldr	r0, [r4]
   11ca0:	cmp	r1, #0
   11ca4:	sub	r3, r6, r0
   11ca8:	movwne	r2, #1
   11cac:	cmp	r3, r2
   11cb0:	blt	11e50 <__assert_fail@plt+0x930>
   11cb4:	cmp	r1, #0
   11cb8:	beq	11cf8 <__assert_fail@plt+0x7d8>
   11cbc:	add	r2, sp, #16
   11cc0:	mov	r0, #3
   11cc4:	bl	114c0 <__xstat64@plt>
   11cc8:	cmp	r0, #0
   11ccc:	bne	11e98 <__assert_fail@plt+0x978>
   11cd0:	ldr	r0, [sp, #40]	; 0x28
   11cd4:	ldr	r1, [sp, #44]	; 0x2c
   11cd8:	str	r0, [fp, #-32]	; 0xffffffe0
   11cdc:	str	r1, [fp, #-36]	; 0xffffffdc
   11ce0:	bl	11fec <__assert_fail@plt+0xacc>
   11ce4:	str	r0, [fp, #-52]	; 0xffffffcc
   11ce8:	ldr	r0, [sp, #44]	; 0x2c
   11cec:	bl	11fac <__assert_fail@plt+0xa8c>
   11cf0:	str	r0, [fp, #-48]	; 0xffffffd0
   11cf4:	b	11d50 <__assert_fail@plt+0x830>
   11cf8:	ldr	r0, [sl, r0, lsl #2]
   11cfc:	add	r1, r8, #20
   11d00:	add	r3, r8, #16
   11d04:	sub	r2, fp, #36	; 0x24
   11d08:	str	r1, [sp]
   11d0c:	sub	r1, fp, #32
   11d10:	bl	185b4 <__assert_fail@plt+0x7094>
   11d14:	cmp	r0, #0
   11d18:	bne	11f38 <__assert_fail@plt+0xa18>
   11d1c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11d20:	cmp	r0, #0
   11d24:	bne	11d44 <__assert_fail@plt+0x824>
   11d28:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d2c:	cmp	r0, #0
   11d30:	beq	11d44 <__assert_fail@plt+0x824>
   11d34:	movw	r0, #45016	; 0xafd8
   11d38:	movt	r0, #1
   11d3c:	bl	1951c <__assert_fail@plt+0x7ffc>
   11d40:	str	r0, [fp, #-52]	; 0xffffffcc
   11d44:	ldr	r0, [r4]
   11d48:	add	r0, r0, #1
   11d4c:	str	r0, [r4]
   11d50:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11d54:	cmp	r0, #0
   11d58:	beq	11d84 <__assert_fail@plt+0x864>
   11d5c:	ldr	r0, [sp, #12]
   11d60:	eor	r0, r0, #1
   11d64:	tst	r0, #1
   11d68:	bne	11d84 <__assert_fail@plt+0x864>
   11d6c:	movw	r0, #53664	; 0xd1a0
   11d70:	movt	r0, #2
   11d74:	bl	18514 <__assert_fail@plt+0x6ff4>
   11d78:	cmp	r0, #0
   11d7c:	str	r0, [fp, #-60]	; 0xffffffc4
   11d80:	beq	11ec8 <__assert_fail@plt+0x9a8>
   11d84:	ldr	r0, [r4]
   11d88:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11d8c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11d90:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11d94:	ldr	r6, [fp, #-44]	; 0xffffffd4
   11d98:	add	r0, sl, r0, lsl #2
   11d9c:	stm	sp, {r1, r6, r8}
   11da0:	orr	r1, r7, #1024	; 0x400
   11da4:	bl	1202c <__assert_fail@plt+0xb0c>
   11da8:	eor	r0, r0, #1
   11dac:	sub	sp, fp, #28
   11db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11db4:	cmn	r0, #3
   11db8:	bne	11e10 <__assert_fail@plt+0x8f0>
   11dbc:	movw	r0, #53552	; 0xd130
   11dc0:	movw	r2, #45585	; 0xb211
   11dc4:	mov	r1, #0
   11dc8:	movw	r7, #45569	; 0xb201
   11dcc:	movt	r0, #2
   11dd0:	movt	r2, #1
   11dd4:	str	r1, [sp, #8]
   11dd8:	movw	r1, #45509	; 0xb1c5
   11ddc:	movt	r7, #1
   11de0:	movt	r1, #1
   11de4:	ldr	r3, [r0]
   11de8:	movw	r0, #53644	; 0xd18c
   11dec:	str	r2, [sp, #4]
   11df0:	movw	r2, #45555	; 0xb1f3
   11df4:	str	r7, [sp]
   11df8:	movt	r0, #2
   11dfc:	movt	r2, #1
   11e00:	ldr	r0, [r0]
   11e04:	bl	18de4 <__assert_fail@plt+0x78c4>
   11e08:	mov	r0, #0
   11e0c:	bl	1137c <exit@plt>
   11e10:	cmn	r0, #2
   11e14:	bne	11e90 <__assert_fail@plt+0x970>
   11e18:	mov	r0, #0
   11e1c:	bl	11620 <__assert_fail@plt+0x100>
   11e20:	movw	r0, #53648	; 0xd190
   11e24:	mov	r4, r1
   11e28:	movt	r0, #2
   11e2c:	ldr	r0, [r0]
   11e30:	bl	183c8 <__assert_fail@plt+0x6ea8>
   11e34:	movw	r2, #45548	; 0xb1ec
   11e38:	str	r0, [sp]
   11e3c:	mov	r0, #1
   11e40:	mov	r1, #0
   11e44:	mov	r3, r4
   11e48:	movt	r2, #1
   11e4c:	bl	1131c <error@plt>
   11e50:	cmp	r0, r6
   11e54:	bge	11f0c <__assert_fail@plt+0x9ec>
   11e58:	movw	r1, #45656	; 0xb258
   11e5c:	mov	r0, #0
   11e60:	mov	r2, #5
   11e64:	movt	r1, #1
   11e68:	bl	11298 <dcgettext@plt>
   11e6c:	mov	r5, r0
   11e70:	add	r0, sl, r6, lsl #2
   11e74:	ldr	r0, [r0, #-4]
   11e78:	bl	183c8 <__assert_fail@plt+0x6ea8>
   11e7c:	mov	r3, r0
   11e80:	mov	r0, #0
   11e84:	mov	r1, #0
   11e88:	mov	r2, r5
   11e8c:	bl	1131c <error@plt>
   11e90:	mov	r0, #1
   11e94:	bl	11620 <__assert_fail@plt+0x100>
   11e98:	bl	113d0 <__errno_location@plt>
   11e9c:	movw	r1, #45681	; 0xb271
   11ea0:	ldr	r4, [r0]
   11ea4:	mov	r0, #0
   11ea8:	mov	r2, #5
   11eac:	movt	r1, #1
   11eb0:	bl	11298 <dcgettext@plt>
   11eb4:	mov	r5, r0
   11eb8:	movw	r0, #53656	; 0xd198
   11ebc:	movt	r0, #2
   11ec0:	ldr	r1, [r0]
   11ec4:	b	11ef0 <__assert_fail@plt+0x9d0>
   11ec8:	bl	113d0 <__errno_location@plt>
   11ecc:	movw	r1, #45681	; 0xb271
   11ed0:	ldr	r4, [r0]
   11ed4:	mov	r0, #0
   11ed8:	mov	r2, #5
   11edc:	movt	r1, #1
   11ee0:	bl	11298 <dcgettext@plt>
   11ee4:	movw	r1, #48559	; 0xbdaf
   11ee8:	mov	r5, r0
   11eec:	movt	r1, #1
   11ef0:	mov	r0, #4
   11ef4:	bl	17ea0 <__assert_fail@plt+0x6980>
   11ef8:	mov	r3, r0
   11efc:	mov	r0, #1
   11f00:	mov	r1, r4
   11f04:	mov	r2, r5
   11f08:	bl	1131c <error@plt>
   11f0c:	movw	r1, #45640	; 0xb248
   11f10:	mov	r0, #0
   11f14:	mov	r2, #5
   11f18:	movt	r1, #1
   11f1c:	bl	11298 <dcgettext@plt>
   11f20:	mov	r2, r0
   11f24:	mov	r0, #0
   11f28:	mov	r1, #0
   11f2c:	bl	1131c <error@plt>
   11f30:	mov	r0, #1
   11f34:	bl	11620 <__assert_fail@plt+0x100>
   11f38:	mov	r5, r0
   11f3c:	ldr	r0, [r4]
   11f40:	ldr	r0, [sl, r0, lsl #2]
   11f44:	bl	183c8 <__assert_fail@plt+0x6ea8>
   11f48:	movw	r2, #45548	; 0xb1ec
   11f4c:	str	r0, [sp]
   11f50:	mov	r0, #1
   11f54:	mov	r1, #0
   11f58:	mov	r3, r5
   11f5c:	movt	r2, #1
   11f60:	bl	1131c <error@plt>
   11f64:	mov	r1, #0
   11f68:	mov	r2, #2
   11f6c:	str	r1, [r0, #8]
   11f70:	str	r2, [r0]
   11f74:	mov	r2, #1
   11f78:	str	r1, [r0, #16]
   11f7c:	str	r1, [r0, #20]
   11f80:	strh	r2, [r0, #12]
   11f84:	strb	r1, [r0, #4]
   11f88:	bx	lr
   11f8c:	push	{r4, sl, fp, lr}
   11f90:	add	fp, sp, #8
   11f94:	mov	r4, r0
   11f98:	ldr	r0, [r0, #16]
   11f9c:	bl	12ea4 <__assert_fail@plt+0x1984>
   11fa0:	ldr	r0, [r4, #20]
   11fa4:	pop	{r4, sl, fp, lr}
   11fa8:	b	12ea4 <__assert_fail@plt+0x1984>
   11fac:	push	{r4, sl, fp, lr}
   11fb0:	add	fp, sp, #8
   11fb4:	sub	sp, sp, #24
   11fb8:	mov	r4, r0
   11fbc:	bl	11508 <getgrgid@plt>
   11fc0:	cmp	r0, #0
   11fc4:	beq	11fd0 <__assert_fail@plt+0xab0>
   11fc8:	ldr	r0, [r0]
   11fcc:	b	11fe0 <__assert_fail@plt+0xac0>
   11fd0:	add	r2, sp, #3
   11fd4:	mov	r0, r4
   11fd8:	mov	r1, #0
   11fdc:	bl	16680 <__assert_fail@plt+0x5160>
   11fe0:	bl	1951c <__assert_fail@plt+0x7ffc>
   11fe4:	sub	sp, fp, #8
   11fe8:	pop	{r4, sl, fp, pc}
   11fec:	push	{r4, sl, fp, lr}
   11ff0:	add	fp, sp, #8
   11ff4:	sub	sp, sp, #24
   11ff8:	mov	r4, r0
   11ffc:	bl	11238 <getpwuid@plt>
   12000:	cmp	r0, #0
   12004:	beq	12010 <__assert_fail@plt+0xaf0>
   12008:	ldr	r0, [r0]
   1200c:	b	12020 <__assert_fail@plt+0xb00>
   12010:	add	r2, sp, #3
   12014:	mov	r0, r4
   12018:	mov	r1, #0
   1201c:	bl	16680 <__assert_fail@plt+0x5160>
   12020:	bl	1951c <__assert_fail@plt+0x7ffc>
   12024:	sub	sp, fp, #8
   12028:	pop	{r4, sl, fp, pc}
   1202c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12030:	add	fp, sp, #28
   12034:	sub	sp, sp, #252	; 0xfc
   12038:	str	r3, [sp, #12]
   1203c:	str	r2, [sp, #20]
   12040:	ldr	r2, [fp, #8]
   12044:	ldr	r3, [fp, #12]
   12048:	ldr	r5, [fp, #16]
   1204c:	and	r3, r3, r2
   12050:	mov	r2, #0
   12054:	cmn	r3, #1
   12058:	str	r3, [sp, #24]
   1205c:	bne	12080 <__assert_fail@plt+0xb60>
   12060:	ldrb	r3, [r5, #12]
   12064:	cmp	r3, #0
   12068:	bne	12080 <__assert_fail@plt+0xb60>
   1206c:	ldr	r2, [r5]
   12070:	sub	r2, r2, #2
   12074:	clz	r2, r2
   12078:	lsr	r2, r2, #5
   1207c:	lsl	r2, r2, #3
   12080:	orr	r1, r2, r1
   12084:	mov	r2, #0
   12088:	bl	19598 <__assert_fail@plt+0x8078>
   1208c:	str	r0, [sp, #36]	; 0x24
   12090:	bl	13834 <__assert_fail@plt+0x2314>
   12094:	cmp	r0, #0
   12098:	beq	12c6c <__assert_fail@plt+0x174c>
   1209c:	ldr	r1, [sp, #20]
   120a0:	mov	r9, r0
   120a4:	movw	r0, #46852	; 0xb704
   120a8:	movw	r2, #46827	; 0xb6eb
   120ac:	mov	r6, #1
   120b0:	movt	r0, #1
   120b4:	movt	r2, #1
   120b8:	cmn	r1, #1
   120bc:	moveq	r2, r0
   120c0:	sub	r0, fp, #136	; 0x88
   120c4:	add	r0, r0, #96	; 0x60
   120c8:	str	r2, [sp, #8]
   120cc:	str	r0, [sp, #4]
   120d0:	b	12148 <__assert_fail@plt+0xc28>
   120d4:	movw	r1, #46873	; 0xb719
   120d8:	mov	r0, #0
   120dc:	mov	r2, #5
   120e0:	movt	r1, #1
   120e4:	bl	11298 <dcgettext@plt>
   120e8:	ldr	r1, [sp, #28]
   120ec:	mov	r4, r0
   120f0:	mov	r0, #4
   120f4:	bl	17ea0 <__assert_fail@plt+0x6980>
   120f8:	mov	r2, r0
   120fc:	mov	r0, #1
   12100:	mov	r1, r4
   12104:	bl	113f4 <__printf_chk@plt>
   12108:	mov	r0, r7
   1210c:	bl	12ea4 <__assert_fail@plt+0x1984>
   12110:	mov	r0, sl
   12114:	bl	12ea4 <__assert_fail@plt+0x1984>
   12118:	ldr	r4, [sp, #16]
   1211c:	ldr	r5, [fp, #16]
   12120:	ldrb	r0, [r5, #4]
   12124:	cmp	r0, #0
   12128:	beq	1225c <__assert_fail@plt+0xd3c>
   1212c:	ldr	r6, [sp, #32]
   12130:	ldr	r0, [sp, #36]	; 0x24
   12134:	and	r6, r6, r4
   12138:	bl	13834 <__assert_fail@plt+0x2314>
   1213c:	mov	r9, r0
   12140:	cmp	r0, #0
   12144:	beq	12c70 <__assert_fail@plt+0x1750>
   12148:	ldrh	r0, [r9, #56]	; 0x38
   1214c:	ldr	r8, [r9, #24]
   12150:	ldr	r7, [r9, #28]
   12154:	add	sl, r9, #64	; 0x40
   12158:	sub	r0, r0, #1
   1215c:	cmp	r0, #9
   12160:	bhi	1237c <__assert_fail@plt+0xe5c>
   12164:	add	r1, pc, #0
   12168:	ldr	pc, [r1, r0, lsl #2]
   1216c:	muleq	r1, r4, r1
   12170:	andeq	r2, r1, r8, lsl r3
   12174:	andeq	r2, r1, ip, ror r3
   12178:	andeq	r2, r1, r0, ror r2
   1217c:	andeq	r2, r1, ip, ror r3
   12180:	andeq	r2, r1, r0, ror r3
   12184:	andeq	r2, r1, r4, lsl #9
   12188:	andeq	r2, r1, ip, ror r3
   1218c:	andeq	r2, r1, ip, ror r3
   12190:	andeq	r2, r1, r4, lsr #5
   12194:	ldrb	r0, [r5, #4]
   12198:	cmp	r0, #0
   1219c:	beq	1237c <__assert_fail@plt+0xe5c>
   121a0:	ldr	r0, [r5, #8]
   121a4:	mov	r4, #1
   121a8:	cmp	r0, #0
   121ac:	beq	12130 <__assert_fail@plt+0xc10>
   121b0:	add	r1, r9, #160	; 0xa0
   121b4:	mov	r8, r6
   121b8:	ldrd	r2, [r0]
   121bc:	ldr	r6, [r1]
   121c0:	ldr	r5, [r1, #4]
   121c4:	eor	r1, r5, r3
   121c8:	eor	r2, r6, r2
   121cc:	orrs	r1, r2, r1
   121d0:	bne	1250c <__assert_fail@plt+0xfec>
   121d4:	ldrd	r0, [r0, #8]
   121d8:	ldrd	r2, [sl]
   121dc:	ldr	r5, [fp, #16]
   121e0:	mov	r6, r8
   121e4:	eor	r1, r3, r1
   121e8:	eor	r0, r2, r0
   121ec:	orrs	r0, r0, r1
   121f0:	bne	12130 <__assert_fail@plt+0xc10>
   121f4:	movw	r6, #48559	; 0xbdaf
   121f8:	mov	r0, r7
   121fc:	movt	r6, #1
   12200:	mov	r1, r6
   12204:	bl	1122c <strcmp@plt>
   12208:	cmp	r0, #0
   1220c:	beq	12b4c <__assert_fail@plt+0x162c>
   12210:	movw	r1, #46470	; 0xb586
   12214:	mov	r0, #0
   12218:	mov	r2, #5
   1221c:	movt	r1, #1
   12220:	bl	11298 <dcgettext@plt>
   12224:	mov	r4, r0
   12228:	mov	r0, #0
   1222c:	mov	r1, #4
   12230:	mov	r2, r7
   12234:	bl	17df8 <__assert_fail@plt+0x68d8>
   12238:	mov	r5, r0
   1223c:	mov	r0, #1
   12240:	mov	r1, #4
   12244:	mov	r2, r6
   12248:	bl	17df8 <__assert_fail@plt+0x68d8>
   1224c:	mov	r3, r5
   12250:	ldr	r5, [fp, #16]
   12254:	str	r0, [sp]
   12258:	b	12b74 <__assert_fail@plt+0x1654>
   1225c:	ldr	r0, [sp, #36]	; 0x24
   12260:	mov	r1, r9
   12264:	mov	r2, #4
   12268:	bl	14eb8 <__assert_fail@plt+0x3998>
   1226c:	b	1212c <__assert_fail@plt+0xc0c>
   12270:	ldrb	r0, [r5, #13]
   12274:	str	r6, [sp, #32]
   12278:	mov	sl, #0
   1227c:	mov	r6, #1
   12280:	str	r7, [sp, #28]
   12284:	cmp	r0, #0
   12288:	bne	124a0 <__assert_fail@plt+0xf80>
   1228c:	ldr	r4, [r9, #32]
   12290:	movw	r1, #46594	; 0xb602
   12294:	mov	sl, #0
   12298:	mov	r0, #0
   1229c:	movt	r1, #1
   122a0:	b	122ec <__assert_fail@plt+0xdcc>
   122a4:	ldr	r0, [r9, #48]	; 0x30
   122a8:	cmp	r0, #0
   122ac:	bne	122bc <__assert_fail@plt+0xd9c>
   122b0:	ldr	r0, [r9, #16]
   122b4:	cmp	r0, #0
   122b8:	beq	12688 <__assert_fail@plt+0x1168>
   122bc:	ldrb	r0, [r5, #13]
   122c0:	str	r6, [sp, #32]
   122c4:	mov	sl, #0
   122c8:	mov	r6, #1
   122cc:	str	r7, [sp, #28]
   122d0:	cmp	r0, #0
   122d4:	bne	124a0 <__assert_fail@plt+0xf80>
   122d8:	ldr	r4, [r9, #32]
   122dc:	movw	r1, #46577	; 0xb5f1
   122e0:	mov	sl, #0
   122e4:	mov	r0, #0
   122e8:	movt	r1, #1
   122ec:	mov	r2, #5
   122f0:	bl	11298 <dcgettext@plt>
   122f4:	mov	r5, r0
   122f8:	mov	r0, #4
   122fc:	mov	r1, r7
   12300:	bl	17ea0 <__assert_fail@plt+0x6980>
   12304:	mov	r3, r0
   12308:	mov	r0, #0
   1230c:	mov	r1, r4
   12310:	mov	r2, r5
   12314:	b	12500 <__assert_fail@plt+0xfe0>
   12318:	ldr	r0, [sp, #36]	; 0x24
   1231c:	mov	r1, r9
   12320:	bl	195e4 <__assert_fail@plt+0x80c4>
   12324:	cmp	r0, #0
   12328:	beq	1237c <__assert_fail@plt+0xe5c>
   1232c:	movw	r1, #46619	; 0xb61b
   12330:	mov	r0, #0
   12334:	mov	r2, #5
   12338:	movt	r1, #1
   1233c:	bl	11298 <dcgettext@plt>
   12340:	mov	r4, r0
   12344:	mov	r0, #0
   12348:	mov	r1, #3
   1234c:	mov	r2, r7
   12350:	bl	1811c <__assert_fail@plt+0x6bfc>
   12354:	mov	r3, r0
   12358:	mov	r0, #0
   1235c:	mov	r1, #0
   12360:	mov	r2, r4
   12364:	bl	1131c <error@plt>
   12368:	mov	r4, #0
   1236c:	b	12130 <__assert_fail@plt+0xc10>
   12370:	ldrb	r0, [r5, #4]
   12374:	cmp	r0, #0
   12378:	beq	124cc <__assert_fail@plt+0xfac>
   1237c:	ldr	r0, [sp, #24]
   12380:	str	r6, [sp, #32]
   12384:	cmn	r0, #1
   12388:	bne	123a4 <__assert_fail@plt+0xe84>
   1238c:	ldr	r0, [r5]
   12390:	cmp	r0, #2
   12394:	bne	123a4 <__assert_fail@plt+0xe84>
   12398:	ldr	r0, [r5, #8]
   1239c:	cmp	r0, #0
   123a0:	beq	12518 <__assert_fail@plt+0xff8>
   123a4:	ldrb	r0, [r5, #12]
   123a8:	cmp	r0, #0
   123ac:	beq	12450 <__assert_fail@plt+0xf30>
   123b0:	ldr	r0, [r9, #80]	; 0x50
   123b4:	and	r0, r0, #61440	; 0xf000
   123b8:	cmp	r0, #40960	; 0xa000
   123bc:	bne	12450 <__assert_fail@plt+0xf30>
   123c0:	ldr	r0, [sp, #36]	; 0x24
   123c4:	add	sl, sp, #40	; 0x28
   123c8:	mov	r2, r8
   123cc:	mov	r3, sl
   123d0:	ldr	r1, [r0, #32]
   123d4:	mov	r0, #0
   123d8:	str	r0, [sp]
   123dc:	mov	r0, #3
   123e0:	bl	112bc <__fxstatat64@plt>
   123e4:	cmp	r0, #0
   123e8:	beq	12450 <__assert_fail@plt+0xf30>
   123ec:	ldrb	r0, [r5, #13]
   123f0:	mov	r4, #0
   123f4:	mov	r6, #1
   123f8:	str	r7, [sp, #28]
   123fc:	cmp	r0, #0
   12400:	bne	12448 <__assert_fail@plt+0xf28>
   12404:	bl	113d0 <__errno_location@plt>
   12408:	movw	r1, #46805	; 0xb6d5
   1240c:	ldr	r4, [r0]
   12410:	mov	r0, #0
   12414:	mov	r2, #5
   12418:	movt	r1, #1
   1241c:	bl	11298 <dcgettext@plt>
   12420:	ldr	r1, [sp, #28]
   12424:	mov	r5, r0
   12428:	mov	r0, #4
   1242c:	bl	17ea0 <__assert_fail@plt+0x6980>
   12430:	mov	r3, r0
   12434:	mov	r0, #0
   12438:	mov	r1, r4
   1243c:	mov	r2, r5
   12440:	bl	1131c <error@plt>
   12444:	mov	r4, #0
   12448:	add	sl, sp, #40	; 0x28
   1244c:	b	128f0 <__assert_fail@plt+0x13d0>
   12450:	ldr	r2, [fp, #8]
   12454:	cmn	r2, #1
   12458:	beq	124a8 <__assert_fail@plt+0xf88>
   1245c:	ldr	r1, [sl, #24]
   12460:	ldr	r3, [fp, #12]
   12464:	sub	r0, r1, r2
   12468:	cmn	r3, #1
   1246c:	clz	r0, r0
   12470:	lsr	r0, r0, #5
   12474:	beq	1252c <__assert_fail@plt+0x100c>
   12478:	cmp	r1, r2
   1247c:	beq	124b4 <__assert_fail@plt+0xf94>
   12480:	b	1252c <__assert_fail@plt+0x100c>
   12484:	ldrb	r0, [r5, #13]
   12488:	str	r6, [sp, #32]
   1248c:	mov	sl, #0
   12490:	mov	r6, #1
   12494:	str	r7, [sp, #28]
   12498:	cmp	r0, #0
   1249c:	beq	124d4 <__assert_fail@plt+0xfb4>
   124a0:	mov	r5, #1
   124a4:	b	127c8 <__assert_fail@plt+0x12a8>
   124a8:	ldr	r0, [fp, #12]
   124ac:	cmn	r0, #1
   124b0:	beq	12528 <__assert_fail@plt+0x1008>
   124b4:	ldr	r0, [sl, #28]
   124b8:	ldr	r1, [fp, #12]
   124bc:	sub	r0, r0, r1
   124c0:	clz	r0, r0
   124c4:	lsr	r0, r0, #5
   124c8:	b	1252c <__assert_fail@plt+0x100c>
   124cc:	mov	r4, #1
   124d0:	b	12130 <__assert_fail@plt+0xc10>
   124d4:	ldr	r4, [r9, #32]
   124d8:	mov	r0, #0
   124dc:	mov	r1, #3
   124e0:	mov	r2, r7
   124e4:	mov	sl, #0
   124e8:	bl	1811c <__assert_fail@plt+0x6bfc>
   124ec:	movw	r2, #45552	; 0xb1f0
   124f0:	mov	r3, r0
   124f4:	mov	r0, #0
   124f8:	mov	r1, r4
   124fc:	movt	r2, #1
   12500:	bl	1131c <error@plt>
   12504:	mov	r5, #1
   12508:	b	127c8 <__assert_fail@plt+0x12a8>
   1250c:	ldr	r5, [fp, #16]
   12510:	mov	r6, r8
   12514:	b	12130 <__assert_fail@plt+0xc10>
   12518:	ldrb	r0, [r5, #12]
   1251c:	add	sl, r9, #64	; 0x40
   12520:	cmp	r0, #0
   12524:	bne	123b0 <__assert_fail@plt+0xe90>
   12528:	mov	r0, #1
   1252c:	ldrh	r1, [r9, #56]	; 0x38
   12530:	cmp	r1, #6
   12534:	bhi	12550 <__assert_fail@plt+0x1030>
   12538:	mov	r2, #1
   1253c:	mov	r3, #86	; 0x56
   12540:	tst	r3, r2, lsl r1
   12544:	ldrne	r1, [r5, #8]
   12548:	cmpne	r1, #0
   1254c:	bne	125a0 <__assert_fail@plt+0x1080>
   12550:	mov	r4, #1
   12554:	cmp	r0, #0
   12558:	str	r7, [sp, #28]
   1255c:	beq	128ec <__assert_fail@plt+0x13cc>
   12560:	ldr	r0, [sp, #36]	; 0x24
   12564:	ldr	r6, [r0, #32]
   12568:	ldrb	r0, [r5, #12]
   1256c:	cmp	r0, #0
   12570:	beq	12644 <__assert_fail@plt+0x1124>
   12574:	ldr	r0, [sp, #24]
   12578:	cmn	r0, #1
   1257c:	beq	12748 <__assert_fail@plt+0x1228>
   12580:	ldr	r0, [sl, #16]
   12584:	and	r0, r0, #61440	; 0xf000
   12588:	cmp	r0, #32768	; 0x8000
   1258c:	beq	126a8 <__assert_fail@plt+0x1188>
   12590:	cmp	r0, #16384	; 0x4000
   12594:	bne	12748 <__assert_fail@plt+0x1228>
   12598:	mov	r5, #18688	; 0x4900
   1259c:	b	126ac <__assert_fail@plt+0x118c>
   125a0:	ldrd	r2, [r1]
   125a4:	ldr	r5, [sl, #100]	; 0x64
   125a8:	ldr	r6, [sl, #96]	; 0x60
   125ac:	eor	r3, r5, r3
   125b0:	ldr	r5, [fp, #16]
   125b4:	eor	r2, r6, r2
   125b8:	orrs	r2, r2, r3
   125bc:	bne	12550 <__assert_fail@plt+0x1030>
   125c0:	ldrd	r2, [r1, #8]
   125c4:	ldr	r1, [sl, #4]
   125c8:	ldr	r6, [sl]
   125cc:	eor	r1, r1, r3
   125d0:	eor	r2, r6, r2
   125d4:	orrs	r1, r2, r1
   125d8:	bne	12550 <__assert_fail@plt+0x1030>
   125dc:	movw	r6, #48559	; 0xbdaf
   125e0:	mov	r0, r7
   125e4:	movt	r6, #1
   125e8:	mov	r1, r6
   125ec:	bl	1122c <strcmp@plt>
   125f0:	cmp	r0, #0
   125f4:	beq	12868 <__assert_fail@plt+0x1348>
   125f8:	movw	r1, #46470	; 0xb586
   125fc:	mov	r0, #0
   12600:	mov	r2, #5
   12604:	movt	r1, #1
   12608:	bl	11298 <dcgettext@plt>
   1260c:	mov	r4, r0
   12610:	mov	r0, #0
   12614:	mov	r1, #4
   12618:	mov	r2, r7
   1261c:	bl	17df8 <__assert_fail@plt+0x68d8>
   12620:	mov	r5, r0
   12624:	mov	r0, #1
   12628:	mov	r1, #4
   1262c:	mov	r2, r6
   12630:	bl	17df8 <__assert_fail@plt+0x68d8>
   12634:	mov	r3, r5
   12638:	ldr	r5, [fp, #16]
   1263c:	str	r0, [sp]
   12640:	b	12890 <__assert_fail@plt+0x1370>
   12644:	ldr	r2, [sp, #20]
   12648:	ldr	r3, [sp, #12]
   1264c:	mov	r0, #256	; 0x100
   12650:	mov	r1, r8
   12654:	str	r0, [sp]
   12658:	mov	r0, r6
   1265c:	bl	114a8 <fchownat@plt>
   12660:	cmp	r0, #0
   12664:	beq	12858 <__assert_fail@plt+0x1338>
   12668:	bl	113d0 <__errno_location@plt>
   1266c:	ldr	r0, [r0]
   12670:	mov	r6, #0
   12674:	cmp	r0, #95	; 0x5f
   12678:	bne	12770 <__assert_fail@plt+0x1250>
   1267c:	mov	r5, #0
   12680:	mov	r4, #1
   12684:	b	128f4 <__assert_fail@plt+0x13d4>
   12688:	mov	r0, #1
   1268c:	mov	r1, r9
   12690:	mov	r2, #1
   12694:	str	r0, [r9, #16]
   12698:	ldr	r0, [sp, #36]	; 0x24
   1269c:	bl	14eb8 <__assert_fail@plt+0x3998>
   126a0:	mov	r4, #1
   126a4:	b	12130 <__assert_fail@plt+0xc10>
   126a8:	mov	r5, #2304	; 0x900
   126ac:	mov	r0, r6
   126b0:	mov	r1, r8
   126b4:	mov	r2, r5
   126b8:	bl	113b8 <openat64@plt>
   126bc:	mov	r7, r0
   126c0:	cmn	r0, #1
   126c4:	ble	126fc <__assert_fail@plt+0x11dc>
   126c8:	mov	r0, #3
   126cc:	mov	r1, r7
   126d0:	sub	r2, fp, #136	; 0x88
   126d4:	bl	112d4 <__fxstat64@plt>
   126d8:	cmp	r0, #0
   126dc:	beq	127d0 <__assert_fail@plt+0x12b0>
   126e0:	bl	113d0 <__errno_location@plt>
   126e4:	ldr	r5, [r0]
   126e8:	mov	r4, r0
   126ec:	mov	r0, r7
   126f0:	bl	114e4 <close@plt>
   126f4:	str	r5, [r4]
   126f8:	b	12770 <__assert_fail@plt+0x1250>
   126fc:	bl	113d0 <__errno_location@plt>
   12700:	mov	r4, r0
   12704:	ldr	r0, [r0]
   12708:	cmp	r0, #13
   1270c:	bne	12770 <__assert_fail@plt+0x1250>
   12710:	ldr	r0, [sl, #16]
   12714:	and	r0, r0, #61440	; 0xf000
   12718:	cmp	r0, #32768	; 0x8000
   1271c:	bne	12748 <__assert_fail@plt+0x1228>
   12720:	orr	r2, r5, #1
   12724:	mov	r0, r6
   12728:	mov	r1, r8
   1272c:	bl	113b8 <openat64@plt>
   12730:	mov	r7, r0
   12734:	cmn	r0, #1
   12738:	bgt	126c8 <__assert_fail@plt+0x11a8>
   1273c:	ldr	r0, [r4]
   12740:	cmp	r0, #13
   12744:	bne	12770 <__assert_fail@plt+0x1250>
   12748:	ldr	r0, [sp, #36]	; 0x24
   1274c:	ldr	r2, [sp, #20]
   12750:	ldr	r3, [sp, #12]
   12754:	mov	r5, #0
   12758:	mov	r1, r8
   1275c:	str	r5, [sp]
   12760:	ldr	r0, [r0, #32]
   12764:	bl	114a8 <fchownat@plt>
   12768:	cmp	r0, #0
   1276c:	beq	1285c <__assert_fail@plt+0x133c>
   12770:	ldr	r0, [fp, #16]
   12774:	mov	r5, #0
   12778:	ldrb	r0, [r0, #13]
   1277c:	cmp	r0, #0
   12780:	bne	127c4 <__assert_fail@plt+0x12a4>
   12784:	bl	113d0 <__errno_location@plt>
   12788:	ldr	r1, [sp, #8]
   1278c:	ldr	r4, [r0]
   12790:	mov	r0, #0
   12794:	mov	r2, #5
   12798:	mov	r5, #0
   1279c:	bl	11298 <dcgettext@plt>
   127a0:	ldr	r1, [sp, #28]
   127a4:	mov	r6, r0
   127a8:	mov	r0, #4
   127ac:	bl	17ea0 <__assert_fail@plt+0x6980>
   127b0:	mov	r3, r0
   127b4:	mov	r0, #0
   127b8:	mov	r1, r4
   127bc:	mov	r2, r6
   127c0:	bl	1131c <error@plt>
   127c4:	mov	r6, #1
   127c8:	mov	r4, #0
   127cc:	b	128f4 <__assert_fail@plt+0x13d4>
   127d0:	ldr	r0, [sp, #4]
   127d4:	ldrd	r2, [sl, #96]	; 0x60
   127d8:	ldrd	r0, [r0]
   127dc:	eor	r1, r3, r1
   127e0:	eor	r0, r2, r0
   127e4:	orrs	r0, r0, r1
   127e8:	bne	128d0 <__assert_fail@plt+0x13b0>
   127ec:	ldrd	r0, [sl]
   127f0:	ldr	r2, [fp, #-136]	; 0xffffff78
   127f4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   127f8:	eor	r1, r1, r3
   127fc:	eor	r0, r0, r2
   12800:	orrs	r0, r0, r1
   12804:	bne	128d0 <__assert_fail@plt+0x13b0>
   12808:	ldr	r0, [fp, #8]
   1280c:	cmn	r0, #1
   12810:	beq	12824 <__assert_fail@plt+0x1304>
   12814:	ldr	r0, [fp, #-112]	; 0xffffff90
   12818:	ldr	r1, [fp, #8]
   1281c:	cmp	r0, r1
   12820:	bne	12840 <__assert_fail@plt+0x1320>
   12824:	ldr	r0, [fp, #12]
   12828:	cmn	r0, #1
   1282c:	beq	12c34 <__assert_fail@plt+0x1714>
   12830:	ldr	r0, [fp, #-108]	; 0xffffff94
   12834:	ldr	r1, [fp, #12]
   12838:	cmp	r0, r1
   1283c:	beq	12c34 <__assert_fail@plt+0x1714>
   12840:	bl	113d0 <__errno_location@plt>
   12844:	ldr	r5, [r0]
   12848:	mov	r4, r0
   1284c:	mov	r0, r7
   12850:	bl	114e4 <close@plt>
   12854:	str	r5, [r4]
   12858:	mov	r5, #0
   1285c:	mov	r6, #1
   12860:	mov	r4, #1
   12864:	b	128f4 <__assert_fail@plt+0x13d4>
   12868:	movw	r1, #46425	; 0xb559
   1286c:	mov	r0, #0
   12870:	mov	r2, #5
   12874:	movt	r1, #1
   12878:	bl	11298 <dcgettext@plt>
   1287c:	mov	r4, r0
   12880:	mov	r0, #4
   12884:	mov	r1, r7
   12888:	bl	17ea0 <__assert_fail@plt+0x6980>
   1288c:	mov	r3, r0
   12890:	mov	r0, #0
   12894:	mov	r1, #0
   12898:	mov	r2, r4
   1289c:	bl	1131c <error@plt>
   128a0:	movw	r1, #46528	; 0xb5c0
   128a4:	ldr	r6, [sp, #32]
   128a8:	mov	r0, #0
   128ac:	mov	r2, #5
   128b0:	movt	r1, #1
   128b4:	bl	11298 <dcgettext@plt>
   128b8:	mov	r2, r0
   128bc:	mov	r0, #0
   128c0:	mov	r1, #0
   128c4:	bl	1131c <error@plt>
   128c8:	mov	r4, #0
   128cc:	b	12130 <__assert_fail@plt+0xc10>
   128d0:	bl	113d0 <__errno_location@plt>
   128d4:	ldr	r5, [r0]
   128d8:	mov	r4, r0
   128dc:	mov	r0, r7
   128e0:	bl	114e4 <close@plt>
   128e4:	str	r5, [r4]
   128e8:	mov	r4, #0
   128ec:	mov	r6, #1
   128f0:	mov	r5, #1
   128f4:	ldr	r0, [fp, #16]
   128f8:	ldr	r0, [r0]
   128fc:	cmp	r0, #2
   12900:	beq	1211c <__assert_fail@plt+0xbfc>
   12904:	eor	r1, r4, #1
   12908:	orrs	r1, r5, r1
   1290c:	eorseq	r1, r6, #1
   12910:	beq	12954 <__assert_fail@plt+0x1434>
   12914:	cmp	r0, #0
   12918:	bne	1211c <__assert_fail@plt+0xbfc>
   1291c:	cmp	r6, #0
   12920:	mov	r5, #1
   12924:	mov	r0, #3
   12928:	str	r4, [sp, #16]
   1292c:	movwne	r5, #4
   12930:	cmp	r4, #0
   12934:	moveq	r5, r0
   12938:	cmp	sl, #0
   1293c:	bne	129a8 <__assert_fail@plt+0x1488>
   12940:	mov	r7, #0
   12944:	mov	sl, #0
   12948:	cmp	r5, #1
   1294c:	beq	120d4 <__assert_fail@plt+0xbb4>
   12950:	b	12a18 <__assert_fail@plt+0x14f8>
   12954:	ldr	r1, [sp, #20]
   12958:	cmn	r1, #1
   1295c:	beq	12970 <__assert_fail@plt+0x1450>
   12960:	ldr	r1, [sl, #24]
   12964:	ldr	r2, [sp, #20]
   12968:	cmp	r1, r2
   1296c:	bne	1298c <__assert_fail@plt+0x146c>
   12970:	ldr	r1, [sp, #12]
   12974:	cmn	r1, #1
   12978:	beq	12914 <__assert_fail@plt+0x13f4>
   1297c:	ldr	r1, [sl, #28]
   12980:	ldr	r2, [sp, #12]
   12984:	cmp	r1, r2
   12988:	beq	12914 <__assert_fail@plt+0x13f4>
   1298c:	cmp	r6, #0
   12990:	mov	r5, #1
   12994:	mov	r0, #3
   12998:	str	r4, [sp, #16]
   1299c:	movwne	r5, #2
   129a0:	cmp	r4, #0
   129a4:	moveq	r5, r0
   129a8:	ldr	r4, [sl, #24]
   129ac:	mov	r0, r4
   129b0:	bl	11238 <getpwuid@plt>
   129b4:	cmp	r0, #0
   129b8:	beq	129c4 <__assert_fail@plt+0x14a4>
   129bc:	ldr	r0, [r0]
   129c0:	b	129d4 <__assert_fail@plt+0x14b4>
   129c4:	mov	r0, r4
   129c8:	mov	r1, #0
   129cc:	sub	r2, fp, #136	; 0x88
   129d0:	bl	16680 <__assert_fail@plt+0x5160>
   129d4:	bl	1951c <__assert_fail@plt+0x7ffc>
   129d8:	ldr	r4, [sl, #28]
   129dc:	mov	r7, r0
   129e0:	mov	r0, r4
   129e4:	bl	11508 <getgrgid@plt>
   129e8:	cmp	r0, #0
   129ec:	beq	129f8 <__assert_fail@plt+0x14d8>
   129f0:	ldr	r0, [r0]
   129f4:	b	12a08 <__assert_fail@plt+0x14e8>
   129f8:	mov	r0, r4
   129fc:	mov	r1, #0
   12a00:	sub	r2, fp, #136	; 0x88
   12a04:	bl	16680 <__assert_fail@plt+0x5160>
   12a08:	bl	1951c <__assert_fail@plt+0x7ffc>
   12a0c:	mov	sl, r0
   12a10:	cmp	r5, #1
   12a14:	beq	120d4 <__assert_fail@plt+0xbb4>
   12a18:	ldr	r0, [fp, #16]
   12a1c:	ldr	r6, [r0, #20]
   12a20:	ldr	r4, [r0, #16]
   12a24:	mov	r0, r4
   12a28:	mov	r1, r6
   12a2c:	bl	12d0c <__assert_fail@plt+0x17ec>
   12a30:	cmp	r4, #0
   12a34:	mov	r8, r0
   12a38:	mov	r0, r4
   12a3c:	mov	r1, r6
   12a40:	movne	r0, r7
   12a44:	cmp	r6, #0
   12a48:	movne	r1, sl
   12a4c:	bl	12d0c <__assert_fail@plt+0x17ec>
   12a50:	cmp	r5, #4
   12a54:	beq	12aa8 <__assert_fail@plt+0x1588>
   12a58:	cmp	r5, #3
   12a5c:	beq	12a84 <__assert_fail@plt+0x1564>
   12a60:	cmp	r5, #2
   12a64:	bne	12d08 <__assert_fail@plt+0x17e8>
   12a68:	mov	r5, r0
   12a6c:	mov	r0, #0
   12a70:	cmp	r4, #0
   12a74:	beq	12ac4 <__assert_fail@plt+0x15a4>
   12a78:	movw	r1, #46929	; 0xb751
   12a7c:	movt	r1, #1
   12a80:	b	12bf0 <__assert_fail@plt+0x16d0>
   12a84:	cmp	r0, #0
   12a88:	beq	12ad8 <__assert_fail@plt+0x15b8>
   12a8c:	mov	r5, r0
   12a90:	mov	r0, #0
   12a94:	cmp	r4, #0
   12a98:	beq	12b38 <__assert_fail@plt+0x1618>
   12a9c:	movw	r1, #47033	; 0xb7b9
   12aa0:	movt	r1, #1
   12aa4:	b	12bf0 <__assert_fail@plt+0x16d0>
   12aa8:	mov	r5, r0
   12aac:	mov	r0, #0
   12ab0:	cmp	r4, #0
   12ab4:	beq	12b24 <__assert_fail@plt+0x1604>
   12ab8:	movw	r1, #47235	; 0xb883
   12abc:	movt	r1, #1
   12ac0:	b	12bf0 <__assert_fail@plt+0x16d0>
   12ac4:	cmp	r6, #0
   12ac8:	beq	12bd0 <__assert_fail@plt+0x16b0>
   12acc:	movw	r1, #46968	; 0xb778
   12ad0:	movt	r1, #1
   12ad4:	b	12bf0 <__assert_fail@plt+0x16d0>
   12ad8:	movw	r0, #47199	; 0xb85f
   12adc:	movw	r1, #47125	; 0xb815
   12ae0:	cmp	r6, #0
   12ae4:	mov	r2, #5
   12ae8:	movt	r0, #1
   12aec:	movt	r1, #1
   12af0:	movne	r1, r0
   12af4:	movw	r0, #47159	; 0xb837
   12af8:	cmp	r4, #0
   12afc:	movt	r0, #1
   12b00:	movne	r1, r0
   12b04:	mov	r0, #0
   12b08:	bl	11298 <dcgettext@plt>
   12b0c:	mov	r6, r0
   12b10:	mov	r0, #0
   12b14:	bl	12ea4 <__assert_fail@plt+0x1984>
   12b18:	mov	r5, r8
   12b1c:	mov	r8, #0
   12b20:	b	12bfc <__assert_fail@plt+0x16dc>
   12b24:	cmp	r6, #0
   12b28:	beq	12bdc <__assert_fail@plt+0x16bc>
   12b2c:	movw	r1, #47267	; 0xb8a3
   12b30:	movt	r1, #1
   12b34:	b	12bf0 <__assert_fail@plt+0x16d0>
   12b38:	cmp	r6, #0
   12b3c:	beq	12be8 <__assert_fail@plt+0x16c8>
   12b40:	movw	r1, #47081	; 0xb7e9
   12b44:	movt	r1, #1
   12b48:	b	12bf0 <__assert_fail@plt+0x16d0>
   12b4c:	movw	r1, #46425	; 0xb559
   12b50:	mov	r0, #0
   12b54:	mov	r2, #5
   12b58:	movt	r1, #1
   12b5c:	bl	11298 <dcgettext@plt>
   12b60:	mov	r4, r0
   12b64:	mov	r0, #4
   12b68:	mov	r1, r7
   12b6c:	bl	17ea0 <__assert_fail@plt+0x6980>
   12b70:	mov	r3, r0
   12b74:	mov	r0, #0
   12b78:	mov	r1, #0
   12b7c:	mov	r2, r4
   12b80:	bl	1131c <error@plt>
   12b84:	movw	r1, #46528	; 0xb5c0
   12b88:	mov	r0, #0
   12b8c:	mov	r2, #5
   12b90:	movt	r1, #1
   12b94:	bl	11298 <dcgettext@plt>
   12b98:	mov	r2, r0
   12b9c:	mov	r0, #0
   12ba0:	mov	r1, #0
   12ba4:	bl	1131c <error@plt>
   12ba8:	ldr	r4, [sp, #36]	; 0x24
   12bac:	mov	r1, r9
   12bb0:	mov	r2, #4
   12bb4:	mov	r0, r4
   12bb8:	bl	14eb8 <__assert_fail@plt+0x3998>
   12bbc:	mov	r0, r4
   12bc0:	bl	13834 <__assert_fail@plt+0x2314>
   12bc4:	mov	r4, #0
   12bc8:	mov	r6, r8
   12bcc:	b	12130 <__assert_fail@plt+0xc10>
   12bd0:	movw	r1, #47003	; 0xb79b
   12bd4:	movt	r1, #1
   12bd8:	b	12bf0 <__assert_fail@plt+0x16d0>
   12bdc:	movw	r1, #47295	; 0xb8bf
   12be0:	movt	r1, #1
   12be4:	b	12bf0 <__assert_fail@plt+0x16d0>
   12be8:	movw	r1, #47125	; 0xb815
   12bec:	movt	r1, #1
   12bf0:	mov	r2, #5
   12bf4:	bl	11298 <dcgettext@plt>
   12bf8:	mov	r6, r0
   12bfc:	ldr	r1, [sp, #28]
   12c00:	mov	r0, #4
   12c04:	bl	17ea0 <__assert_fail@plt+0x6980>
   12c08:	mov	r2, r0
   12c0c:	mov	r0, #1
   12c10:	mov	r1, r6
   12c14:	mov	r3, r5
   12c18:	str	r8, [sp]
   12c1c:	bl	113f4 <__printf_chk@plt>
   12c20:	mov	r0, r5
   12c24:	bl	12ea4 <__assert_fail@plt+0x1984>
   12c28:	mov	r0, r8
   12c2c:	bl	12ea4 <__assert_fail@plt+0x1984>
   12c30:	b	12108 <__assert_fail@plt+0xbe8>
   12c34:	ldr	r1, [sp, #20]
   12c38:	ldr	r2, [sp, #12]
   12c3c:	mov	r0, r7
   12c40:	bl	113c4 <fchown@plt>
   12c44:	cmp	r0, #0
   12c48:	bne	126e0 <__assert_fail@plt+0x11c0>
   12c4c:	mov	r0, r7
   12c50:	bl	114e4 <close@plt>
   12c54:	cmp	r0, #0
   12c58:	mov	r4, #1
   12c5c:	bne	12770 <__assert_fail@plt+0x1250>
   12c60:	mov	r5, #0
   12c64:	mov	r6, #1
   12c68:	b	128f4 <__assert_fail@plt+0x13d4>
   12c6c:	mov	r6, #1
   12c70:	bl	113d0 <__errno_location@plt>
   12c74:	ldr	r4, [r0]
   12c78:	mov	r5, r0
   12c7c:	cmp	r4, #0
   12c80:	beq	12cc0 <__assert_fail@plt+0x17a0>
   12c84:	ldr	r0, [fp, #16]
   12c88:	mov	r6, #0
   12c8c:	ldrb	r0, [r0, #13]
   12c90:	cmp	r0, #0
   12c94:	bne	12cc0 <__assert_fail@plt+0x17a0>
   12c98:	movw	r1, #46392	; 0xb538
   12c9c:	mov	r0, #0
   12ca0:	mov	r2, #5
   12ca4:	mov	r6, #0
   12ca8:	movt	r1, #1
   12cac:	bl	11298 <dcgettext@plt>
   12cb0:	mov	r2, r0
   12cb4:	mov	r0, #0
   12cb8:	mov	r1, r4
   12cbc:	bl	1131c <error@plt>
   12cc0:	ldr	r0, [sp, #36]	; 0x24
   12cc4:	bl	1368c <__assert_fail@plt+0x216c>
   12cc8:	cmp	r0, #0
   12ccc:	beq	12cfc <__assert_fail@plt+0x17dc>
   12cd0:	movw	r1, #46408	; 0xb548
   12cd4:	ldr	r4, [r5]
   12cd8:	mov	r0, #0
   12cdc:	mov	r2, #5
   12ce0:	mov	r6, #0
   12ce4:	movt	r1, #1
   12ce8:	bl	11298 <dcgettext@plt>
   12cec:	mov	r2, r0
   12cf0:	mov	r0, #0
   12cf4:	mov	r1, r4
   12cf8:	bl	1131c <error@plt>
   12cfc:	mov	r0, r6
   12d00:	sub	sp, fp, #28
   12d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d08:	bl	114d8 <abort@plt>
   12d0c:	push	{r4, r5, r6, sl, fp, lr}
   12d10:	add	fp, sp, #16
   12d14:	mov	r4, r1
   12d18:	cmp	r0, #0
   12d1c:	beq	12d70 <__assert_fail@plt+0x1850>
   12d20:	mov	r5, r0
   12d24:	cmp	r4, #0
   12d28:	beq	12d84 <__assert_fail@plt+0x1864>
   12d2c:	mov	r0, r5
   12d30:	bl	113a0 <strlen@plt>
   12d34:	mov	r6, r0
   12d38:	mov	r0, r4
   12d3c:	bl	113a0 <strlen@plt>
   12d40:	add	r0, r6, r0
   12d44:	add	r0, r0, #2
   12d48:	bl	19018 <__assert_fail@plt+0x7af8>
   12d4c:	mov	r1, r5
   12d50:	mov	r6, r0
   12d54:	bl	1128c <stpcpy@plt>
   12d58:	mov	r1, #58	; 0x3a
   12d5c:	strh	r1, [r0], #1
   12d60:	mov	r1, r4
   12d64:	bl	1128c <stpcpy@plt>
   12d68:	mov	r0, r6
   12d6c:	pop	{r4, r5, r6, sl, fp, pc}
   12d70:	cmp	r4, #0
   12d74:	beq	12d90 <__assert_fail@plt+0x1870>
   12d78:	mov	r0, r4
   12d7c:	pop	{r4, r5, r6, sl, fp, lr}
   12d80:	b	1951c <__assert_fail@plt+0x7ffc>
   12d84:	mov	r0, r5
   12d88:	pop	{r4, r5, r6, sl, fp, lr}
   12d8c:	b	1951c <__assert_fail@plt+0x7ffc>
   12d90:	mov	r6, #0
   12d94:	mov	r0, r6
   12d98:	pop	{r4, r5, r6, sl, fp, pc}
   12d9c:	movw	r1, #53680	; 0xd1b0
   12da0:	movt	r1, #2
   12da4:	str	r0, [r1]
   12da8:	bx	lr
   12dac:	movw	r1, #53684	; 0xd1b4
   12db0:	movt	r1, #2
   12db4:	strb	r0, [r1]
   12db8:	bx	lr
   12dbc:	push	{r4, r5, r6, sl, fp, lr}
   12dc0:	add	fp, sp, #16
   12dc4:	sub	sp, sp, #8
   12dc8:	movw	r0, #53644	; 0xd18c
   12dcc:	movt	r0, #2
   12dd0:	ldr	r0, [r0]
   12dd4:	bl	19f18 <__assert_fail@plt+0x89f8>
   12dd8:	cmp	r0, #0
   12ddc:	beq	12e04 <__assert_fail@plt+0x18e4>
   12de0:	movw	r0, #53684	; 0xd1b4
   12de4:	movt	r0, #2
   12de8:	ldrb	r0, [r0]
   12dec:	cmp	r0, #0
   12df0:	beq	12e24 <__assert_fail@plt+0x1904>
   12df4:	bl	113d0 <__errno_location@plt>
   12df8:	ldr	r0, [r0]
   12dfc:	cmp	r0, #32
   12e00:	bne	12e24 <__assert_fail@plt+0x1904>
   12e04:	movw	r0, #53640	; 0xd188
   12e08:	movt	r0, #2
   12e0c:	ldr	r0, [r0]
   12e10:	bl	19f18 <__assert_fail@plt+0x89f8>
   12e14:	cmp	r0, #0
   12e18:	subeq	sp, fp, #16
   12e1c:	popeq	{r4, r5, r6, sl, fp, pc}
   12e20:	b	12e94 <__assert_fail@plt+0x1974>
   12e24:	movw	r1, #47336	; 0xb8e8
   12e28:	mov	r0, #0
   12e2c:	mov	r2, #5
   12e30:	movt	r1, #1
   12e34:	bl	11298 <dcgettext@plt>
   12e38:	mov	r4, r0
   12e3c:	movw	r0, #53680	; 0xd1b0
   12e40:	movt	r0, #2
   12e44:	ldr	r6, [r0]
   12e48:	bl	113d0 <__errno_location@plt>
   12e4c:	ldr	r5, [r0]
   12e50:	cmp	r6, #0
   12e54:	bne	12e70 <__assert_fail@plt+0x1950>
   12e58:	movw	r2, #45552	; 0xb1f0
   12e5c:	mov	r0, #0
   12e60:	mov	r1, r5
   12e64:	mov	r3, r4
   12e68:	movt	r2, #1
   12e6c:	b	12e90 <__assert_fail@plt+0x1970>
   12e70:	mov	r0, r6
   12e74:	bl	18040 <__assert_fail@plt+0x6b20>
   12e78:	movw	r2, #45548	; 0xb1ec
   12e7c:	mov	r3, r0
   12e80:	str	r4, [sp]
   12e84:	mov	r0, #0
   12e88:	mov	r1, r5
   12e8c:	movt	r2, #1
   12e90:	bl	1131c <error@plt>
   12e94:	movw	r0, #53556	; 0xd134
   12e98:	movt	r0, #2
   12e9c:	ldr	r0, [r0]
   12ea0:	bl	11268 <_exit@plt>
   12ea4:	push	{r4, r5, r6, sl, fp, lr}
   12ea8:	add	fp, sp, #16
   12eac:	mov	r4, r0
   12eb0:	bl	113d0 <__errno_location@plt>
   12eb4:	ldr	r6, [r0]
   12eb8:	mov	r5, r0
   12ebc:	mov	r0, r4
   12ec0:	bl	1125c <free@plt>
   12ec4:	str	r6, [r5]
   12ec8:	pop	{r4, r5, r6, sl, fp, pc}
   12ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ed0:	add	fp, sp, #28
   12ed4:	sub	sp, sp, #28
   12ed8:	cmp	r1, #4096	; 0x1000
   12edc:	bcs	12ef8 <__assert_fail@plt+0x19d8>
   12ee0:	mov	r7, r0
   12ee4:	and	r0, r1, #516	; 0x204
   12ee8:	mov	r5, r1
   12eec:	cmp	r0, #516	; 0x204
   12ef0:	tstne	r5, #18
   12ef4:	bne	12f14 <__assert_fail@plt+0x19f4>
   12ef8:	bl	113d0 <__errno_location@plt>
   12efc:	mov	r1, #22
   12f00:	mov	r4, #0
   12f04:	str	r1, [r0]
   12f08:	mov	r0, r4
   12f0c:	sub	sp, fp, #28
   12f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f14:	mov	r0, #1
   12f18:	mov	r1, #96	; 0x60
   12f1c:	mov	sl, r2
   12f20:	bl	19e40 <__assert_fail@plt+0x8920>
   12f24:	cmp	r0, #0
   12f28:	beq	13330 <__assert_fail@plt+0x1e10>
   12f2c:	mov	r4, r0
   12f30:	mvn	r0, #99	; 0x63
   12f34:	tst	r5, #2
   12f38:	mov	r1, r5
   12f3c:	str	r0, [r4, #32]
   12f40:	bic	r0, r5, #516	; 0x204
   12f44:	str	sl, [r4, #44]	; 0x2c
   12f48:	str	r4, [sp, #24]
   12f4c:	orrne	r1, r0, #4
   12f50:	str	r1, [r4, #48]	; 0x30
   12f54:	ldr	r0, [r7]
   12f58:	cmp	r0, #0
   12f5c:	beq	12f94 <__assert_fail@plt+0x1a74>
   12f60:	add	r6, r7, #4
   12f64:	mov	r4, #0
   12f68:	bl	113a0 <strlen@plt>
   12f6c:	cmp	r0, r4
   12f70:	movhi	r4, r0
   12f74:	ldr	r0, [r6], #4
   12f78:	cmp	r0, #0
   12f7c:	bne	12f68 <__assert_fail@plt+0x1a48>
   12f80:	add	r0, r4, #1
   12f84:	ldr	r4, [sp, #24]
   12f88:	cmp	r0, #4096	; 0x1000
   12f8c:	movls	r0, #4096	; 0x1000
   12f90:	b	12f98 <__assert_fail@plt+0x1a78>
   12f94:	mov	r0, #4096	; 0x1000
   12f98:	ldr	r1, [r4, #36]	; 0x24
   12f9c:	add	r0, r0, #256	; 0x100
   12fa0:	adds	r1, r0, r1
   12fa4:	bcc	12fc8 <__assert_fail@plt+0x1aa8>
   12fa8:	ldr	r0, [r4, #24]
   12fac:	bl	12ea4 <__assert_fail@plt+0x1984>
   12fb0:	mov	r0, #0
   12fb4:	str	r0, [r4, #24]
   12fb8:	bl	113d0 <__errno_location@plt>
   12fbc:	mov	r1, #36	; 0x24
   12fc0:	str	r1, [r0]
   12fc4:	b	13328 <__assert_fail@plt+0x1e08>
   12fc8:	str	r1, [r4, #36]	; 0x24
   12fcc:	ldr	r0, [r4, #24]
   12fd0:	bl	19ec4 <__assert_fail@plt+0x89a4>
   12fd4:	cmp	r0, #0
   12fd8:	beq	1304c <__assert_fail@plt+0x1b2c>
   12fdc:	str	r0, [r4, #24]
   12fe0:	ldr	r0, [r7]
   12fe4:	cmp	r0, #0
   12fe8:	beq	13060 <__assert_fail@plt+0x1b40>
   12fec:	mov	r0, #176	; 0xb0
   12ff0:	bl	19e94 <__assert_fail@plt+0x8974>
   12ff4:	cmp	r0, #0
   12ff8:	beq	13320 <__assert_fail@plt+0x1e00>
   12ffc:	ldr	r1, [r4, #24]
   13000:	mov	r6, r0
   13004:	mov	r0, #0
   13008:	mov	r2, #196608	; 0x30000
   1300c:	strb	r0, [r6, #168]	; 0xa8
   13010:	str	r2, [r6, #58]	; 0x3a
   13014:	mvn	r2, #0
   13018:	str	r4, [r6, #44]	; 0x2c
   1301c:	str	r2, [r6, #48]	; 0x30
   13020:	str	r0, [r6, #52]	; 0x34
   13024:	str	r0, [r6, #12]
   13028:	str	r0, [r6, #16]
   1302c:	str	r0, [r6, #20]
   13030:	str	r1, [r6, #28]
   13034:	str	r0, [r6, #32]
   13038:	cmp	sl, #0
   1303c:	beq	1306c <__assert_fail@plt+0x1b4c>
   13040:	ldrb	r0, [r4, #49]	; 0x31
   13044:	ubfx	r0, r0, #2, #1
   13048:	b	13070 <__assert_fail@plt+0x1b50>
   1304c:	ldr	r0, [r4, #24]
   13050:	bl	12ea4 <__assert_fail@plt+0x1984>
   13054:	mov	r0, #0
   13058:	str	r0, [r4, #24]
   1305c:	b	13328 <__assert_fail@plt+0x1e08>
   13060:	mov	r6, #0
   13064:	cmp	sl, #0
   13068:	bne	13040 <__assert_fail@plt+0x1b20>
   1306c:	mov	r0, #1
   13070:	ldr	r4, [r7]
   13074:	cmp	r4, #0
   13078:	beq	131e4 <__assert_fail@plt+0x1cc4>
   1307c:	eor	r0, r0, #1
   13080:	str	r6, [sp, #20]
   13084:	and	r1, r5, #2048	; 0x800
   13088:	mov	r9, #0
   1308c:	mov	r6, #0
   13090:	str	sl, [sp, #8]
   13094:	str	r0, [sp, #12]
   13098:	mov	r0, #0
   1309c:	str	r1, [sp, #16]
   130a0:	str	r0, [sp, #4]
   130a4:	b	130d0 <__assert_fail@plt+0x1bb0>
   130a8:	cmp	r9, #0
   130ac:	str	r4, [r5, #8]
   130b0:	beq	131d8 <__assert_fail@plt+0x1cb8>
   130b4:	ldr	r0, [sp, #4]
   130b8:	str	r5, [sp, #4]
   130bc:	str	r5, [r0, #8]
   130c0:	ldr	r4, [r7, #4]!
   130c4:	add	r6, r6, #1
   130c8:	cmp	r4, #0
   130cc:	beq	13200 <__assert_fail@plt+0x1ce0>
   130d0:	mov	r0, r4
   130d4:	bl	113a0 <strlen@plt>
   130d8:	mov	r8, r0
   130dc:	ldr	r0, [sp, #16]
   130e0:	cmp	r0, #0
   130e4:	bne	1311c <__assert_fail@plt+0x1bfc>
   130e8:	cmp	r8, #3
   130ec:	bcc	1311c <__assert_fail@plt+0x1bfc>
   130f0:	add	r0, r8, r4
   130f4:	ldrb	r0, [r0, #-1]
   130f8:	cmp	r0, #47	; 0x2f
   130fc:	bne	1311c <__assert_fail@plt+0x1bfc>
   13100:	sub	r0, r4, #2
   13104:	ldrb	r1, [r0, r8]
   13108:	cmp	r1, #47	; 0x2f
   1310c:	bne	1311c <__assert_fail@plt+0x1bfc>
   13110:	sub	r8, r8, #1
   13114:	cmp	r8, #1
   13118:	bhi	13104 <__assert_fail@plt+0x1be4>
   1311c:	add	r0, r8, #176	; 0xb0
   13120:	bic	r0, r0, #7
   13124:	bl	19e94 <__assert_fail@plt+0x8974>
   13128:	cmp	r0, #0
   1312c:	beq	131f0 <__assert_fail@plt+0x1cd0>
   13130:	add	sl, r0, #168	; 0xa8
   13134:	mov	r5, r0
   13138:	mov	r1, r4
   1313c:	mov	r2, r8
   13140:	mov	r0, sl
   13144:	bl	11274 <memcpy@plt>
   13148:	ldr	r0, [sp, #24]
   1314c:	ldr	r2, [sp, #20]
   13150:	mov	r4, #0
   13154:	strb	r4, [sl, r8]
   13158:	str	r2, [r5, #4]
   1315c:	add	r2, r5, #44	; 0x2c
   13160:	ldr	r1, [r0, #24]
   13164:	stm	r2, {r0, r4, r8}
   13168:	mov	r2, #196608	; 0x30000
   1316c:	str	r2, [r5, #58]	; 0x3a
   13170:	ldr	r2, [sp, #12]
   13174:	str	r4, [r5, #12]
   13178:	str	r4, [r5, #16]
   1317c:	str	r4, [r5, #20]
   13180:	str	sl, [r5, #24]
   13184:	str	r1, [r5, #28]
   13188:	clz	r1, r9
   1318c:	str	r4, [r5, #32]
   13190:	lsr	r1, r1, #5
   13194:	orrs	r1, r2, r1
   13198:	bne	131b0 <__assert_fail@plt+0x1c90>
   1319c:	mov	r0, #2
   131a0:	str	r0, [r5, #112]	; 0x70
   131a4:	str	r4, [r5, #116]	; 0x74
   131a8:	mov	r0, #11
   131ac:	b	131bc <__assert_fail@plt+0x1c9c>
   131b0:	mov	r1, r5
   131b4:	mov	r2, #0
   131b8:	bl	133c4 <__assert_fail@plt+0x1ea4>
   131bc:	ldr	sl, [sp, #8]
   131c0:	strh	r0, [r5, #56]	; 0x38
   131c4:	cmp	sl, #0
   131c8:	beq	130a8 <__assert_fail@plt+0x1b88>
   131cc:	str	r9, [r5, #8]
   131d0:	mov	r9, r5
   131d4:	b	130c0 <__assert_fail@plt+0x1ba0>
   131d8:	mov	r0, r5
   131dc:	str	r5, [sp, #4]
   131e0:	b	131d0 <__assert_fail@plt+0x1cb0>
   131e4:	ldr	r4, [sp, #24]
   131e8:	mov	r9, #0
   131ec:	b	13234 <__assert_fail@plt+0x1d14>
   131f0:	ldr	r6, [sp, #20]
   131f4:	cmp	r9, #0
   131f8:	bne	132fc <__assert_fail@plt+0x1ddc>
   131fc:	b	13314 <__assert_fail@plt+0x1df4>
   13200:	cmp	sl, #0
   13204:	beq	1322c <__assert_fail@plt+0x1d0c>
   13208:	ldr	r4, [sp, #24]
   1320c:	cmp	r6, #2
   13210:	bcc	13230 <__assert_fail@plt+0x1d10>
   13214:	mov	r0, r4
   13218:	mov	r1, r9
   1321c:	mov	r2, r6
   13220:	bl	1355c <__assert_fail@plt+0x203c>
   13224:	mov	r9, r0
   13228:	b	13230 <__assert_fail@plt+0x1d10>
   1322c:	ldr	r4, [sp, #24]
   13230:	ldr	r6, [sp, #20]
   13234:	mov	r0, #176	; 0xb0
   13238:	bl	19e94 <__assert_fail@plt+0x8974>
   1323c:	cmp	r0, #0
   13240:	beq	132d4 <__assert_fail@plt+0x1db4>
   13244:	ldr	r2, [r4, #24]
   13248:	mov	r1, #0
   1324c:	mov	r3, #196608	; 0x30000
   13250:	str	r0, [r4]
   13254:	str	r1, [r0, #52]	; 0x34
   13258:	strb	r1, [r0, #168]	; 0xa8
   1325c:	str	r4, [r0, #44]	; 0x2c
   13260:	str	r3, [r0, #58]	; 0x3a
   13264:	str	r2, [r0, #28]
   13268:	mov	r2, #9
   1326c:	str	r1, [r0, #32]
   13270:	strh	r2, [r0, #56]	; 0x38
   13274:	str	r9, [r0, #8]
   13278:	str	r1, [r0, #12]
   1327c:	str	r1, [r0, #16]
   13280:	str	r1, [r0, #20]
   13284:	mov	r1, #1
   13288:	str	r1, [r0, #48]	; 0x30
   1328c:	ldrh	r0, [r4, #48]	; 0x30
   13290:	movw	r1, #258	; 0x102
   13294:	tst	r0, r1
   13298:	beq	13338 <__assert_fail@plt+0x1e18>
   1329c:	movw	r0, #11940	; 0x2ea4
   132a0:	movw	r2, #20688	; 0x50d0
   132a4:	movw	r3, #20720	; 0x50f0
   132a8:	mov	r1, #0
   132ac:	movt	r0, #1
   132b0:	movt	r2, #1
   132b4:	movt	r3, #1
   132b8:	str	r0, [sp]
   132bc:	mov	r0, #31
   132c0:	bl	1577c <__assert_fail@plt+0x425c>
   132c4:	cmp	r0, #0
   132c8:	str	r0, [r4, #56]	; 0x38
   132cc:	bne	13350 <__assert_fail@plt+0x1e30>
   132d0:	b	132dc <__assert_fail@plt+0x1dbc>
   132d4:	mov	r0, #0
   132d8:	str	r0, [r4]
   132dc:	cmp	r9, #0
   132e0:	bne	132fc <__assert_fail@plt+0x1ddc>
   132e4:	b	13314 <__assert_fail@plt+0x1df4>
   132e8:	mov	r0, r9
   132ec:	bl	12ea4 <__assert_fail@plt+0x1984>
   132f0:	cmp	r4, #0
   132f4:	mov	r9, r4
   132f8:	beq	13314 <__assert_fail@plt+0x1df4>
   132fc:	ldrd	r4, [r9, #8]
   13300:	cmp	r5, #0
   13304:	beq	132e8 <__assert_fail@plt+0x1dc8>
   13308:	mov	r0, r5
   1330c:	bl	114fc <closedir@plt>
   13310:	b	132e8 <__assert_fail@plt+0x1dc8>
   13314:	mov	r0, r6
   13318:	bl	12ea4 <__assert_fail@plt+0x1984>
   1331c:	ldr	r4, [sp, #24]
   13320:	ldr	r0, [r4, #24]
   13324:	bl	12ea4 <__assert_fail@plt+0x1984>
   13328:	mov	r0, r4
   1332c:	bl	12ea4 <__assert_fail@plt+0x1984>
   13330:	mov	r4, #0
   13334:	b	12f08 <__assert_fail@plt+0x19e8>
   13338:	mov	r0, #32
   1333c:	bl	19e94 <__assert_fail@plt+0x8974>
   13340:	cmp	r0, #0
   13344:	str	r0, [r4, #56]	; 0x38
   13348:	beq	132dc <__assert_fail@plt+0x1dbc>
   1334c:	bl	19f9c <__assert_fail@plt+0x8a7c>
   13350:	ldr	r4, [sp, #24]
   13354:	ldr	r0, [r4, #48]	; 0x30
   13358:	tst	r0, #516	; 0x204
   1335c:	bne	133b4 <__assert_fail@plt+0x1e94>
   13360:	mov	r1, #32768	; 0x8000
   13364:	tst	r0, #512	; 0x200
   13368:	and	r1, r1, r0, lsl #11
   1336c:	orr	r1, r1, #18688	; 0x4900
   13370:	orr	r2, r1, #524288	; 0x80000
   13374:	bne	1338c <__assert_fail@plt+0x1e6c>
   13378:	movw	r0, #47349	; 0xb8f5
   1337c:	mov	r1, r2
   13380:	movt	r0, #1
   13384:	bl	1a308 <__assert_fail@plt+0x8de8>
   13388:	b	1339c <__assert_fail@plt+0x1e7c>
   1338c:	ldr	r0, [r4, #32]
   13390:	movw	r1, #47349	; 0xb8f5
   13394:	movt	r1, #1
   13398:	bl	166dc <__assert_fail@plt+0x51bc>
   1339c:	cmn	r0, #1
   133a0:	str	r0, [r4, #28]
   133a4:	bgt	133b4 <__assert_fail@plt+0x1e94>
   133a8:	ldr	r0, [r4, #48]	; 0x30
   133ac:	orr	r0, r0, #4
   133b0:	str	r0, [r4, #48]	; 0x30
   133b4:	add	r0, r4, #60	; 0x3c
   133b8:	mvn	r1, #0
   133bc:	bl	165b8 <__assert_fail@plt+0x5098>
   133c0:	b	12f08 <__assert_fail@plt+0x19e8>
   133c4:	push	{r4, r5, r6, sl, fp, lr}
   133c8:	add	fp, sp, #16
   133cc:	sub	sp, sp, #8
   133d0:	mov	r4, r1
   133d4:	ldr	r1, [r0, #48]	; 0x30
   133d8:	ldr	r3, [r4, #48]	; 0x30
   133dc:	add	r5, r4, #64	; 0x40
   133e0:	cmp	r3, #0
   133e4:	andeq	r3, r1, #1
   133e8:	orreq	r2, r3, r2
   133ec:	cmp	r2, #0
   133f0:	andseq	r1, r1, #2
   133f4:	beq	13450 <__assert_fail@plt+0x1f30>
   133f8:	ldr	r1, [r4, #24]
   133fc:	mov	r0, #3
   13400:	mov	r2, r5
   13404:	bl	114c0 <__xstat64@plt>
   13408:	cmp	r0, #0
   1340c:	beq	134d0 <__assert_fail@plt+0x1fb0>
   13410:	bl	113d0 <__errno_location@plt>
   13414:	mov	r6, r0
   13418:	ldr	r0, [r0]
   1341c:	cmp	r0, #2
   13420:	bne	13480 <__assert_fail@plt+0x1f60>
   13424:	ldr	r1, [r4, #24]
   13428:	mov	r0, #3
   1342c:	mov	r2, r5
   13430:	bl	114f0 <__lxstat64@plt>
   13434:	cmp	r0, #0
   13438:	bne	1347c <__assert_fail@plt+0x1f5c>
   1343c:	mov	r0, #0
   13440:	str	r0, [r6]
   13444:	mov	r0, #13
   13448:	sub	sp, fp, #16
   1344c:	pop	{r4, r5, r6, sl, fp, pc}
   13450:	ldr	r1, [r0, #32]
   13454:	ldr	r2, [r4, #24]
   13458:	mov	r0, #256	; 0x100
   1345c:	mov	r3, r5
   13460:	str	r0, [sp]
   13464:	mov	r0, #3
   13468:	bl	112bc <__fxstatat64@plt>
   1346c:	cmp	r0, #0
   13470:	beq	134d0 <__assert_fail@plt+0x1fb0>
   13474:	bl	113d0 <__errno_location@plt>
   13478:	mov	r6, r0
   1347c:	ldr	r0, [r6]
   13480:	vmov.i32	q8, #0	; 0x00000000
   13484:	add	r1, r5, #80	; 0x50
   13488:	str	r0, [r4, #32]
   1348c:	mov	r0, #0
   13490:	str	r0, [r5, #96]	; 0x60
   13494:	vst1.64	{d16-d17}, [r1]
   13498:	add	r1, r5, #64	; 0x40
   1349c:	vst1.64	{d16-d17}, [r1]
   134a0:	add	r1, r5, #48	; 0x30
   134a4:	vst1.64	{d16-d17}, [r1]
   134a8:	add	r1, r5, #32
   134ac:	vst1.64	{d16-d17}, [r1]
   134b0:	add	r1, r5, #16
   134b4:	vst1.64	{d16-d17}, [r1]
   134b8:	mov	r1, #100	; 0x64
   134bc:	vst1.64	{d16-d17}, [r5], r1
   134c0:	str	r0, [r5]
   134c4:	mov	r0, #10
   134c8:	sub	sp, fp, #16
   134cc:	pop	{r4, r5, r6, sl, fp, pc}
   134d0:	ldr	r0, [r4, #80]	; 0x50
   134d4:	and	r0, r0, #61440	; 0xf000
   134d8:	cmp	r0, #40960	; 0xa000
   134dc:	beq	13544 <__assert_fail@plt+0x2024>
   134e0:	cmp	r0, #32768	; 0x8000
   134e4:	beq	13538 <__assert_fail@plt+0x2018>
   134e8:	cmp	r0, #16384	; 0x4000
   134ec:	bne	13550 <__assert_fail@plt+0x2030>
   134f0:	ldrb	r1, [r4, #168]	; 0xa8
   134f4:	mov	r0, #1
   134f8:	cmp	r1, #46	; 0x2e
   134fc:	bne	13554 <__assert_fail@plt+0x2034>
   13500:	ldrb	r1, [r4, #169]	; 0xa9
   13504:	cmp	r1, #0
   13508:	beq	13520 <__assert_fail@plt+0x2000>
   1350c:	cmp	r1, #46	; 0x2e
   13510:	bne	13554 <__assert_fail@plt+0x2034>
   13514:	ldrb	r1, [r4, #170]	; 0xaa
   13518:	cmp	r1, #0
   1351c:	bne	13554 <__assert_fail@plt+0x2034>
   13520:	ldr	r1, [r4, #48]	; 0x30
   13524:	mov	r0, #5
   13528:	cmp	r1, #0
   1352c:	movweq	r0, #1
   13530:	sub	sp, fp, #16
   13534:	pop	{r4, r5, r6, sl, fp, pc}
   13538:	mov	r0, #8
   1353c:	sub	sp, fp, #16
   13540:	pop	{r4, r5, r6, sl, fp, pc}
   13544:	mov	r0, #12
   13548:	sub	sp, fp, #16
   1354c:	pop	{r4, r5, r6, sl, fp, pc}
   13550:	mov	r0, #3
   13554:	sub	sp, fp, #16
   13558:	pop	{r4, r5, r6, sl, fp, pc}
   1355c:	push	{r4, r5, r6, r7, fp, lr}
   13560:	add	fp, sp, #16
   13564:	mov	r6, r0
   13568:	ldr	r7, [r0, #44]	; 0x2c
   1356c:	ldr	r0, [r0, #40]	; 0x28
   13570:	mov	r5, r2
   13574:	mov	r4, r1
   13578:	cmp	r0, r2
   1357c:	bcs	135b4 <__assert_fail@plt+0x2094>
   13580:	add	r1, r5, #40	; 0x28
   13584:	cmn	r1, #-1073741823	; 0xc0000001
   13588:	str	r1, [r6, #40]	; 0x28
   1358c:	bhi	13658 <__assert_fail@plt+0x2138>
   13590:	ldr	r0, [r6, #8]
   13594:	lsl	r1, r1, #2
   13598:	bl	19ec4 <__assert_fail@plt+0x89a4>
   1359c:	cmp	r0, #0
   135a0:	beq	13658 <__assert_fail@plt+0x2138>
   135a4:	str	r0, [r6, #8]
   135a8:	cmp	r4, #0
   135ac:	bne	135c0 <__assert_fail@plt+0x20a0>
   135b0:	b	135d4 <__assert_fail@plt+0x20b4>
   135b4:	ldr	r0, [r6, #8]
   135b8:	cmp	r4, #0
   135bc:	beq	135d4 <__assert_fail@plt+0x20b4>
   135c0:	str	r4, [r0], #4
   135c4:	ldr	r4, [r4, #8]
   135c8:	cmp	r4, #0
   135cc:	bne	135c0 <__assert_fail@plt+0x20a0>
   135d0:	ldr	r0, [r6, #8]
   135d4:	mov	r1, r5
   135d8:	mov	r2, #4
   135dc:	mov	r3, r7
   135e0:	bl	1149c <qsort@plt>
   135e4:	ldr	r0, [r6, #8]
   135e8:	cmp	r5, #1
   135ec:	ldr	r4, [r0]
   135f0:	mov	r1, r4
   135f4:	beq	1367c <__assert_fail@plt+0x215c>
   135f8:	mov	r2, r0
   135fc:	ldr	r1, [r2, #4]!
   13600:	str	r1, [r4, #8]
   13604:	subs	r1, r5, #2
   13608:	beq	13674 <__assert_fail@plt+0x2154>
   1360c:	tst	r1, #1
   13610:	beq	13628 <__assert_fail@plt+0x2108>
   13614:	ldr	r1, [r0, #8]!
   13618:	ldr	r2, [r0, #-4]
   1361c:	str	r1, [r2, #8]
   13620:	sub	r1, r5, #3
   13624:	mov	r2, r0
   13628:	cmp	r5, #3
   1362c:	beq	13678 <__assert_fail@plt+0x2158>
   13630:	mov	r0, r2
   13634:	ldm	r2, {r3, r7}
   13638:	subs	r1, r1, #2
   1363c:	str	r7, [r3, #8]
   13640:	ldr	r3, [r0, #8]!
   13644:	ldr	r2, [r2, #4]
   13648:	str	r3, [r2, #8]
   1364c:	mov	r2, r0
   13650:	bne	13634 <__assert_fail@plt+0x2114>
   13654:	b	13678 <__assert_fail@plt+0x2158>
   13658:	ldr	r0, [r6, #8]
   1365c:	bl	12ea4 <__assert_fail@plt+0x1984>
   13660:	mov	r0, #0
   13664:	str	r0, [r6, #40]	; 0x28
   13668:	str	r0, [r6, #8]
   1366c:	mov	r0, r4
   13670:	pop	{r4, r5, r6, r7, fp, pc}
   13674:	mov	r0, r2
   13678:	ldr	r1, [r0]
   1367c:	mov	r0, #0
   13680:	str	r0, [r1, #8]
   13684:	mov	r0, r4
   13688:	pop	{r4, r5, r6, r7, fp, pc}
   1368c:	push	{r4, r5, r6, r7, fp, lr}
   13690:	add	fp, sp, #16
   13694:	mov	r4, r0
   13698:	ldr	r0, [r0]
   1369c:	cmp	r0, #0
   136a0:	beq	136e0 <__assert_fail@plt+0x21c0>
   136a4:	ldr	r1, [r0, #48]	; 0x30
   136a8:	cmp	r1, #0
   136ac:	bmi	136d4 <__assert_fail@plt+0x21b4>
   136b0:	ldr	r5, [r0, #8]
   136b4:	cmp	r5, #0
   136b8:	ldreq	r5, [r0, #4]
   136bc:	bl	12ea4 <__assert_fail@plt+0x1984>
   136c0:	ldr	r0, [r5, #48]	; 0x30
   136c4:	cmn	r0, #1
   136c8:	mov	r0, r5
   136cc:	bgt	136b0 <__assert_fail@plt+0x2190>
   136d0:	b	136d8 <__assert_fail@plt+0x21b8>
   136d4:	mov	r5, r0
   136d8:	mov	r0, r5
   136dc:	bl	12ea4 <__assert_fail@plt+0x1984>
   136e0:	ldr	r5, [r4, #4]
   136e4:	cmp	r5, #0
   136e8:	bne	13704 <__assert_fail@plt+0x21e4>
   136ec:	b	1371c <__assert_fail@plt+0x21fc>
   136f0:	mov	r0, r5
   136f4:	bl	12ea4 <__assert_fail@plt+0x1984>
   136f8:	cmp	r6, #0
   136fc:	mov	r5, r6
   13700:	beq	1371c <__assert_fail@plt+0x21fc>
   13704:	ldrd	r6, [r5, #8]
   13708:	cmp	r7, #0
   1370c:	beq	136f0 <__assert_fail@plt+0x21d0>
   13710:	mov	r0, r7
   13714:	bl	114fc <closedir@plt>
   13718:	b	136f0 <__assert_fail@plt+0x21d0>
   1371c:	ldr	r0, [r4, #8]
   13720:	bl	12ea4 <__assert_fail@plt+0x1984>
   13724:	ldr	r0, [r4, #24]
   13728:	bl	12ea4 <__assert_fail@plt+0x1984>
   1372c:	ldr	r0, [r4, #48]	; 0x30
   13730:	tst	r0, #512	; 0x200
   13734:	bne	13760 <__assert_fail@plt+0x2240>
   13738:	mov	r6, #0
   1373c:	tst	r0, #4
   13740:	bne	137a4 <__assert_fail@plt+0x2284>
   13744:	ldr	r0, [r4, #28]
   13748:	bl	11490 <fchdir@plt>
   1374c:	cmp	r0, #0
   13750:	beq	13780 <__assert_fail@plt+0x2260>
   13754:	bl	113d0 <__errno_location@plt>
   13758:	ldr	r6, [r0]
   1375c:	b	13784 <__assert_fail@plt+0x2264>
   13760:	ldr	r0, [r4, #32]
   13764:	mov	r6, #0
   13768:	cmp	r0, #0
   1376c:	bmi	137a4 <__assert_fail@plt+0x2284>
   13770:	bl	114e4 <close@plt>
   13774:	cmp	r0, #0
   13778:	bne	1379c <__assert_fail@plt+0x227c>
   1377c:	b	137a4 <__assert_fail@plt+0x2284>
   13780:	mov	r6, #0
   13784:	ldr	r0, [r4, #28]
   13788:	bl	114e4 <close@plt>
   1378c:	cmp	r6, #0
   13790:	bne	137a4 <__assert_fail@plt+0x2284>
   13794:	cmp	r0, #0
   13798:	beq	137a4 <__assert_fail@plt+0x2284>
   1379c:	bl	113d0 <__errno_location@plt>
   137a0:	ldr	r6, [r0]
   137a4:	add	r5, r4, #60	; 0x3c
   137a8:	mov	r0, r5
   137ac:	bl	165dc <__assert_fail@plt+0x50bc>
   137b0:	cmp	r0, #0
   137b4:	bne	137d0 <__assert_fail@plt+0x22b0>
   137b8:	mov	r0, r5
   137bc:	bl	16630 <__assert_fail@plt+0x5110>
   137c0:	cmp	r0, #0
   137c4:	bmi	137a8 <__assert_fail@plt+0x2288>
   137c8:	bl	114e4 <close@plt>
   137cc:	b	137a8 <__assert_fail@plt+0x2288>
   137d0:	ldr	r0, [r4, #52]	; 0x34
   137d4:	cmp	r0, #0
   137d8:	beq	137e0 <__assert_fail@plt+0x22c0>
   137dc:	bl	15a80 <__assert_fail@plt+0x4560>
   137e0:	ldrh	r0, [r4, #48]	; 0x30
   137e4:	movw	r1, #258	; 0x102
   137e8:	tst	r0, r1
   137ec:	beq	13804 <__assert_fail@plt+0x22e4>
   137f0:	ldr	r0, [r4, #56]	; 0x38
   137f4:	cmp	r0, #0
   137f8:	beq	1380c <__assert_fail@plt+0x22ec>
   137fc:	bl	15a80 <__assert_fail@plt+0x4560>
   13800:	b	1380c <__assert_fail@plt+0x22ec>
   13804:	ldr	r0, [r4, #56]	; 0x38
   13808:	bl	12ea4 <__assert_fail@plt+0x1984>
   1380c:	mov	r0, r4
   13810:	bl	12ea4 <__assert_fail@plt+0x1984>
   13814:	cmp	r6, #0
   13818:	beq	1382c <__assert_fail@plt+0x230c>
   1381c:	bl	113d0 <__errno_location@plt>
   13820:	str	r6, [r0]
   13824:	mvn	r0, #0
   13828:	pop	{r4, r5, r6, r7, fp, pc}
   1382c:	mov	r0, #0
   13830:	pop	{r4, r5, r6, r7, fp, pc}
   13834:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13838:	add	fp, sp, #24
   1383c:	sub	sp, sp, #8
   13840:	ldr	r6, [r0]
   13844:	mov	r5, #0
   13848:	cmp	r6, #0
   1384c:	beq	13f8c <__assert_fail@plt+0x2a6c>
   13850:	mov	r4, r0
   13854:	ldr	r0, [r0, #48]	; 0x30
   13858:	tst	r0, #8192	; 0x2000
   1385c:	bne	13f8c <__assert_fail@plt+0x2a6c>
   13860:	ldrh	r1, [r6, #60]	; 0x3c
   13864:	mov	r2, #3
   13868:	strh	r2, [r6, #60]	; 0x3c
   1386c:	cmp	r1, #1
   13870:	beq	138e0 <__assert_fail@plt+0x23c0>
   13874:	cmp	r1, #2
   13878:	bne	138fc <__assert_fail@plt+0x23dc>
   1387c:	ldrh	r2, [r6, #56]	; 0x38
   13880:	bic	r3, r2, #1
   13884:	cmp	r3, #12
   13888:	bne	13900 <__assert_fail@plt+0x23e0>
   1388c:	mov	r0, r4
   13890:	mov	r1, r6
   13894:	mov	r2, #1
   13898:	bl	133c4 <__assert_fail@plt+0x1ea4>
   1389c:	cmp	r0, #1
   138a0:	strh	r0, [r6, #56]	; 0x38
   138a4:	bne	139f0 <__assert_fail@plt+0x24d0>
   138a8:	ldr	r0, [r4, #48]	; 0x30
   138ac:	tst	r0, #4
   138b0:	bne	139f0 <__assert_fail@plt+0x24d0>
   138b4:	mov	r1, #32768	; 0x8000
   138b8:	tst	r0, #512	; 0x200
   138bc:	and	r1, r1, r0, lsl #11
   138c0:	orr	r1, r1, #18688	; 0x4900
   138c4:	orr	r2, r1, #524288	; 0x80000
   138c8:	bne	13bd4 <__assert_fail@plt+0x26b4>
   138cc:	movw	r0, #47349	; 0xb8f5
   138d0:	mov	r1, r2
   138d4:	movt	r0, #1
   138d8:	bl	1a308 <__assert_fail@plt+0x8de8>
   138dc:	b	13be4 <__assert_fail@plt+0x26c4>
   138e0:	mov	r0, r4
   138e4:	mov	r1, r6
   138e8:	mov	r2, #0
   138ec:	bl	133c4 <__assert_fail@plt+0x1ea4>
   138f0:	strh	r0, [r6, #56]	; 0x38
   138f4:	mov	r5, r6
   138f8:	b	13f8c <__assert_fail@plt+0x2a6c>
   138fc:	ldrh	r2, [r6, #56]	; 0x38
   13900:	cmp	r2, #1
   13904:	bne	13960 <__assert_fail@plt+0x2440>
   13908:	cmp	r1, #4
   1390c:	bne	139f8 <__assert_fail@plt+0x24d8>
   13910:	ldrb	r0, [r6, #58]	; 0x3a
   13914:	tst	r0, #2
   13918:	beq	13924 <__assert_fail@plt+0x2404>
   1391c:	ldr	r0, [r6, #36]	; 0x24
   13920:	bl	114e4 <close@plt>
   13924:	ldr	r5, [r4, #4]
   13928:	cmp	r5, #0
   1392c:	bne	13948 <__assert_fail@plt+0x2428>
   13930:	b	13a90 <__assert_fail@plt+0x2570>
   13934:	mov	r0, r5
   13938:	bl	12ea4 <__assert_fail@plt+0x1984>
   1393c:	cmp	r8, #0
   13940:	mov	r5, r8
   13944:	beq	13a88 <__assert_fail@plt+0x2568>
   13948:	ldrd	r8, [r5, #8]
   1394c:	cmp	r9, #0
   13950:	beq	13934 <__assert_fail@plt+0x2414>
   13954:	mov	r0, r9
   13958:	bl	114fc <closedir@plt>
   1395c:	b	13934 <__assert_fail@plt+0x2414>
   13960:	ldr	r5, [r6, #8]
   13964:	cmp	r5, #0
   13968:	beq	13aac <__assert_fail@plt+0x258c>
   1396c:	mov	r0, r6
   13970:	str	r5, [r4]
   13974:	bl	12ea4 <__assert_fail@plt+0x1984>
   13978:	ldr	r0, [r5, #48]	; 0x30
   1397c:	cmp	r0, #0
   13980:	beq	13af8 <__assert_fail@plt+0x25d8>
   13984:	ldrh	r0, [r5, #60]	; 0x3c
   13988:	mov	r6, r5
   1398c:	cmp	r0, #4
   13990:	beq	13960 <__assert_fail@plt+0x2440>
   13994:	cmp	r0, #2
   13998:	bne	13e54 <__assert_fail@plt+0x2934>
   1399c:	mov	r0, r4
   139a0:	mov	r1, r5
   139a4:	mov	r2, #1
   139a8:	bl	133c4 <__assert_fail@plt+0x1ea4>
   139ac:	cmp	r0, #1
   139b0:	strh	r0, [r5, #56]	; 0x38
   139b4:	bne	13e4c <__assert_fail@plt+0x292c>
   139b8:	ldr	r0, [r4, #48]	; 0x30
   139bc:	tst	r0, #4
   139c0:	bne	13e4c <__assert_fail@plt+0x292c>
   139c4:	mov	r1, #32768	; 0x8000
   139c8:	tst	r0, #512	; 0x200
   139cc:	and	r1, r1, r0, lsl #11
   139d0:	orr	r1, r1, #18688	; 0x4900
   139d4:	orr	r2, r1, #524288	; 0x80000
   139d8:	bne	13e0c <__assert_fail@plt+0x28ec>
   139dc:	movw	r0, #47349	; 0xb8f5
   139e0:	mov	r1, r2
   139e4:	movt	r0, #1
   139e8:	bl	1a308 <__assert_fail@plt+0x8de8>
   139ec:	b	13e1c <__assert_fail@plt+0x28fc>
   139f0:	mov	r5, r6
   139f4:	b	13e90 <__assert_fail@plt+0x2970>
   139f8:	tst	r0, #64	; 0x40
   139fc:	beq	13a18 <__assert_fail@plt+0x24f8>
   13a00:	ldrd	r2, [r4, #16]
   13a04:	ldrd	r8, [r6, #64]	; 0x40
   13a08:	eor	r1, r9, r3
   13a0c:	eor	r2, r8, r2
   13a10:	orrs	r1, r2, r1
   13a14:	bne	13910 <__assert_fail@plt+0x23f0>
   13a18:	ldr	r5, [r4, #4]
   13a1c:	cmp	r5, #0
   13a20:	beq	13b7c <__assert_fail@plt+0x265c>
   13a24:	tst	r0, #4096	; 0x1000
   13a28:	bne	13b3c <__assert_fail@plt+0x261c>
   13a2c:	ldr	r3, [r6, #24]
   13a30:	mov	r0, r4
   13a34:	mov	r1, r6
   13a38:	mvn	r2, #0
   13a3c:	bl	14078 <__assert_fail@plt+0x2b58>
   13a40:	cmp	r0, #0
   13a44:	beq	13b94 <__assert_fail@plt+0x2674>
   13a48:	bl	113d0 <__errno_location@plt>
   13a4c:	ldr	r0, [r0]
   13a50:	str	r0, [r6, #32]
   13a54:	ldrh	r0, [r6, #58]	; 0x3a
   13a58:	orr	r0, r0, #1
   13a5c:	strh	r0, [r6, #58]	; 0x3a
   13a60:	ldr	r0, [r4, #4]
   13a64:	cmp	r0, #0
   13a68:	beq	13b94 <__assert_fail@plt+0x2674>
   13a6c:	ldmib	r0, {r1, r2}
   13a70:	cmp	r2, #0
   13a74:	ldr	r1, [r1, #24]
   13a78:	str	r1, [r0, #24]
   13a7c:	mov	r0, r2
   13a80:	bne	13a6c <__assert_fail@plt+0x254c>
   13a84:	b	13b94 <__assert_fail@plt+0x2674>
   13a88:	mov	r0, #0
   13a8c:	str	r0, [r4, #4]
   13a90:	mov	r0, #6
   13a94:	strh	r0, [r6, #56]	; 0x38
   13a98:	mov	r0, r4
   13a9c:	mov	r1, r6
   13aa0:	bl	13f9c <__assert_fail@plt+0x2a7c>
   13aa4:	mov	r5, r6
   13aa8:	b	13f8c <__assert_fail@plt+0x2a6c>
   13aac:	ldr	r5, [r6, #4]
   13ab0:	ldr	r0, [r5, #12]
   13ab4:	cmp	r0, #0
   13ab8:	beq	13c14 <__assert_fail@plt+0x26f4>
   13abc:	str	r5, [r4]
   13ac0:	ldr	r1, [r5, #40]	; 0x28
   13ac4:	ldr	r0, [r4, #24]
   13ac8:	mov	r5, #0
   13acc:	strb	r5, [r0, r1]
   13ad0:	mov	r0, r4
   13ad4:	mov	r1, #3
   13ad8:	bl	142d8 <__assert_fail@plt+0x2db8>
   13adc:	cmp	r0, #0
   13ae0:	beq	13c04 <__assert_fail@plt+0x26e4>
   13ae4:	mov	r7, r0
   13ae8:	mov	r0, r6
   13aec:	bl	12ea4 <__assert_fail@plt+0x1984>
   13af0:	mov	r5, r7
   13af4:	b	13e54 <__assert_fail@plt+0x2934>
   13af8:	mov	r0, r4
   13afc:	bl	14d68 <__assert_fail@plt+0x3848>
   13b00:	ldr	r1, [r4, #48]	; 0x30
   13b04:	cmp	r0, #0
   13b08:	beq	13b1c <__assert_fail@plt+0x25fc>
   13b0c:	orr	r0, r1, #8192	; 0x2000
   13b10:	mov	r5, #0
   13b14:	str	r0, [r4, #48]	; 0x30
   13b18:	b	13f8c <__assert_fail@plt+0x2a6c>
   13b1c:	movw	r0, #258	; 0x102
   13b20:	tst	r1, r0
   13b24:	beq	13cc4 <__assert_fail@plt+0x27a4>
   13b28:	ldr	r0, [r4, #56]	; 0x38
   13b2c:	cmp	r0, #0
   13b30:	beq	13ccc <__assert_fail@plt+0x27ac>
   13b34:	bl	15a80 <__assert_fail@plt+0x4560>
   13b38:	b	13ccc <__assert_fail@plt+0x27ac>
   13b3c:	bic	r0, r0, #4096	; 0x1000
   13b40:	str	r0, [r4, #48]	; 0x30
   13b44:	b	13b5c <__assert_fail@plt+0x263c>
   13b48:	mov	r0, r5
   13b4c:	bl	12ea4 <__assert_fail@plt+0x1984>
   13b50:	cmp	r8, #0
   13b54:	mov	r5, r8
   13b58:	beq	13b74 <__assert_fail@plt+0x2654>
   13b5c:	ldrd	r8, [r5, #8]
   13b60:	cmp	r9, #0
   13b64:	beq	13b48 <__assert_fail@plt+0x2628>
   13b68:	mov	r0, r9
   13b6c:	bl	114fc <closedir@plt>
   13b70:	b	13b48 <__assert_fail@plt+0x2628>
   13b74:	mov	r0, #0
   13b78:	str	r0, [r4, #4]
   13b7c:	mov	r0, r4
   13b80:	mov	r1, #3
   13b84:	bl	142d8 <__assert_fail@plt+0x2db8>
   13b88:	cmp	r0, #0
   13b8c:	str	r0, [r4, #4]
   13b90:	beq	13ba4 <__assert_fail@plt+0x2684>
   13b94:	ldr	r5, [r4, #4]
   13b98:	mov	r0, #0
   13b9c:	str	r0, [r4, #4]
   13ba0:	b	13e54 <__assert_fail@plt+0x2934>
   13ba4:	ldrb	r0, [r4, #49]	; 0x31
   13ba8:	mov	r5, #0
   13bac:	tst	r0, #32
   13bb0:	bne	13f8c <__assert_fail@plt+0x2a6c>
   13bb4:	ldr	r0, [r6, #32]
   13bb8:	cmp	r0, #0
   13bbc:	beq	13a98 <__assert_fail@plt+0x2578>
   13bc0:	ldrh	r0, [r6, #56]	; 0x38
   13bc4:	cmp	r0, #4
   13bc8:	beq	13a98 <__assert_fail@plt+0x2578>
   13bcc:	mov	r0, #7
   13bd0:	b	13a94 <__assert_fail@plt+0x2574>
   13bd4:	ldr	r0, [r4, #32]
   13bd8:	movw	r1, #47349	; 0xb8f5
   13bdc:	movt	r1, #1
   13be0:	bl	166dc <__assert_fail@plt+0x51bc>
   13be4:	cmn	r0, #1
   13be8:	str	r0, [r6, #36]	; 0x24
   13bec:	ble	13ca8 <__assert_fail@plt+0x2788>
   13bf0:	ldrh	r0, [r6, #58]	; 0x3a
   13bf4:	mov	r5, r6
   13bf8:	orr	r0, r0, #2
   13bfc:	strh	r0, [r6, #58]	; 0x3a
   13c00:	b	13e90 <__assert_fail@plt+0x2970>
   13c04:	ldrb	r0, [r4, #49]	; 0x31
   13c08:	tst	r0, #32
   13c0c:	bne	13f8c <__assert_fail@plt+0x2a6c>
   13c10:	ldr	r5, [r6, #4]
   13c14:	mov	r0, r6
   13c18:	str	r5, [r4]
   13c1c:	bl	12ea4 <__assert_fail@plt+0x1984>
   13c20:	ldr	r0, [r5, #48]	; 0x30
   13c24:	cmn	r0, #1
   13c28:	beq	13c8c <__assert_fail@plt+0x276c>
   13c2c:	ldrh	r0, [r5, #56]	; 0x38
   13c30:	cmp	r0, #11
   13c34:	beq	13f98 <__assert_fail@plt+0x2a78>
   13c38:	ldr	r0, [r5, #40]	; 0x28
   13c3c:	ldr	r1, [r4, #24]
   13c40:	mov	r2, #0
   13c44:	strb	r2, [r1, r0]
   13c48:	ldr	r0, [r5, #48]	; 0x30
   13c4c:	cmp	r0, #0
   13c50:	beq	13d9c <__assert_fail@plt+0x287c>
   13c54:	ldrh	r0, [r5, #58]	; 0x3a
   13c58:	tst	r0, #2
   13c5c:	bne	13dc8 <__assert_fail@plt+0x28a8>
   13c60:	tst	r0, #1
   13c64:	bne	13f50 <__assert_fail@plt+0x2a30>
   13c68:	ldr	r1, [r5, #4]
   13c6c:	movw	r3, #47348	; 0xb8f4
   13c70:	mov	r0, r4
   13c74:	mvn	r2, #0
   13c78:	movt	r3, #1
   13c7c:	bl	14078 <__assert_fail@plt+0x2b58>
   13c80:	cmp	r0, #0
   13c84:	bne	13dac <__assert_fail@plt+0x288c>
   13c88:	b	13f50 <__assert_fail@plt+0x2a30>
   13c8c:	mov	r0, r5
   13c90:	bl	12ea4 <__assert_fail@plt+0x1984>
   13c94:	bl	113d0 <__errno_location@plt>
   13c98:	mov	r5, #0
   13c9c:	str	r5, [r0]
   13ca0:	str	r5, [r4]
   13ca4:	b	13f8c <__assert_fail@plt+0x2a6c>
   13ca8:	bl	113d0 <__errno_location@plt>
   13cac:	ldr	r0, [r0]
   13cb0:	mov	r1, #7
   13cb4:	mov	r5, r6
   13cb8:	strh	r1, [r6, #56]	; 0x38
   13cbc:	str	r0, [r6, #32]
   13cc0:	b	13e90 <__assert_fail@plt+0x2970>
   13cc4:	ldr	r0, [r4, #56]	; 0x38
   13cc8:	bl	12ea4 <__assert_fail@plt+0x1984>
   13ccc:	ldr	r1, [r5, #52]	; 0x34
   13cd0:	add	r6, r5, #168	; 0xa8
   13cd4:	str	r1, [r5, #40]	; 0x28
   13cd8:	add	r2, r1, #1
   13cdc:	mov	r1, r6
   13ce0:	ldr	r0, [r4, #24]
   13ce4:	bl	11250 <memmove@plt>
   13ce8:	mov	r0, r6
   13cec:	mov	r1, #47	; 0x2f
   13cf0:	bl	11454 <strrchr@plt>
   13cf4:	cmp	r0, #0
   13cf8:	beq	13d34 <__assert_fail@plt+0x2814>
   13cfc:	cmp	r0, r6
   13d00:	bne	13d10 <__assert_fail@plt+0x27f0>
   13d04:	ldrb	r1, [r5, #169]	; 0xa9
   13d08:	cmp	r1, #0
   13d0c:	beq	13d34 <__assert_fail@plt+0x2814>
   13d10:	add	r7, r0, #1
   13d14:	mov	r0, r7
   13d18:	bl	113a0 <strlen@plt>
   13d1c:	mov	r8, r0
   13d20:	add	r2, r0, #1
   13d24:	mov	r0, r6
   13d28:	mov	r1, r7
   13d2c:	bl	11250 <memmove@plt>
   13d30:	str	r8, [r5, #52]	; 0x34
   13d34:	ldr	r0, [r4, #24]
   13d38:	movw	r1, #258	; 0x102
   13d3c:	str	r0, [r5, #24]
   13d40:	str	r0, [r5, #28]
   13d44:	ldrh	r0, [r4, #48]	; 0x30
   13d48:	tst	r0, r1
   13d4c:	beq	13d80 <__assert_fail@plt+0x2860>
   13d50:	movw	r0, #11940	; 0x2ea4
   13d54:	movw	r2, #20688	; 0x50d0
   13d58:	movw	r3, #20720	; 0x50f0
   13d5c:	mov	r1, #0
   13d60:	movt	r0, #1
   13d64:	movt	r2, #1
   13d68:	movt	r3, #1
   13d6c:	str	r0, [sp]
   13d70:	mov	r0, #31
   13d74:	bl	1577c <__assert_fail@plt+0x425c>
   13d78:	str	r0, [r4, #56]	; 0x38
   13d7c:	b	13e90 <__assert_fail@plt+0x2970>
   13d80:	mov	r0, #32
   13d84:	bl	19e94 <__assert_fail@plt+0x8974>
   13d88:	cmp	r0, #0
   13d8c:	str	r0, [r4, #56]	; 0x38
   13d90:	beq	13e90 <__assert_fail@plt+0x2970>
   13d94:	bl	19f9c <__assert_fail@plt+0x8a7c>
   13d98:	b	13e90 <__assert_fail@plt+0x2970>
   13d9c:	mov	r0, r4
   13da0:	bl	14d68 <__assert_fail@plt+0x3848>
   13da4:	cmp	r0, #0
   13da8:	beq	13f50 <__assert_fail@plt+0x2a30>
   13dac:	bl	113d0 <__errno_location@plt>
   13db0:	ldr	r0, [r0]
   13db4:	str	r0, [r5, #32]
   13db8:	ldr	r0, [r4, #48]	; 0x30
   13dbc:	orr	r0, r0, #8192	; 0x2000
   13dc0:	str	r0, [r4, #48]	; 0x30
   13dc4:	b	13f50 <__assert_fail@plt+0x2a30>
   13dc8:	ldr	r0, [r4, #48]	; 0x30
   13dcc:	tst	r0, #4
   13dd0:	bne	13f48 <__assert_fail@plt+0x2a28>
   13dd4:	ldr	r6, [r5, #36]	; 0x24
   13dd8:	tst	r0, #512	; 0x200
   13ddc:	bne	13f1c <__assert_fail@plt+0x29fc>
   13de0:	mov	r0, r6
   13de4:	bl	11490 <fchdir@plt>
   13de8:	cmp	r0, #0
   13dec:	beq	13f48 <__assert_fail@plt+0x2a28>
   13df0:	bl	113d0 <__errno_location@plt>
   13df4:	ldr	r0, [r0]
   13df8:	str	r0, [r5, #32]
   13dfc:	ldr	r0, [r4, #48]	; 0x30
   13e00:	orr	r0, r0, #8192	; 0x2000
   13e04:	str	r0, [r4, #48]	; 0x30
   13e08:	b	13f48 <__assert_fail@plt+0x2a28>
   13e0c:	ldr	r0, [r4, #32]
   13e10:	movw	r1, #47349	; 0xb8f5
   13e14:	movt	r1, #1
   13e18:	bl	166dc <__assert_fail@plt+0x51bc>
   13e1c:	cmn	r0, #1
   13e20:	str	r0, [r5, #36]	; 0x24
   13e24:	ble	13e38 <__assert_fail@plt+0x2918>
   13e28:	ldrh	r0, [r5, #58]	; 0x3a
   13e2c:	orr	r0, r0, #2
   13e30:	strh	r0, [r5, #58]	; 0x3a
   13e34:	b	13e4c <__assert_fail@plt+0x292c>
   13e38:	bl	113d0 <__errno_location@plt>
   13e3c:	ldr	r0, [r0]
   13e40:	mov	r1, #7
   13e44:	strh	r1, [r5, #56]	; 0x38
   13e48:	str	r0, [r5, #32]
   13e4c:	mov	r0, #3
   13e50:	strh	r0, [r5, #60]	; 0x3c
   13e54:	ldr	r0, [r5, #4]
   13e58:	ldr	r1, [r0, #28]
   13e5c:	ldr	r0, [r0, #40]	; 0x28
   13e60:	sub	r2, r0, #1
   13e64:	ldrb	r1, [r1, r2]
   13e68:	cmp	r1, #47	; 0x2f
   13e6c:	ldr	r1, [r4, #24]
   13e70:	moveq	r0, r2
   13e74:	mov	r2, #47	; 0x2f
   13e78:	strb	r2, [r1, r0]!
   13e7c:	ldr	r2, [r5, #52]	; 0x34
   13e80:	add	r0, r1, #1
   13e84:	add	r1, r5, #168	; 0xa8
   13e88:	add	r2, r2, #1
   13e8c:	bl	11250 <memmove@plt>
   13e90:	str	r5, [r4]
   13e94:	ldrh	r0, [r5, #56]	; 0x38
   13e98:	cmp	r0, #11
   13e9c:	bne	13ed4 <__assert_fail@plt+0x29b4>
   13ea0:	add	r0, r5, #112	; 0x70
   13ea4:	ldrd	r0, [r0]
   13ea8:	eor	r2, r0, #1
   13eac:	orrs	r2, r2, r1
   13eb0:	beq	13f8c <__assert_fail@plt+0x2a6c>
   13eb4:	eor	r0, r0, #2
   13eb8:	orrs	r0, r0, r1
   13ebc:	bne	13f98 <__assert_fail@plt+0x2a78>
   13ec0:	mov	r0, r4
   13ec4:	mov	r1, r5
   13ec8:	mov	r2, #0
   13ecc:	bl	133c4 <__assert_fail@plt+0x1ea4>
   13ed0:	strh	r0, [r5, #56]	; 0x38
   13ed4:	cmp	r0, #1
   13ed8:	bne	13f8c <__assert_fail@plt+0x2a6c>
   13edc:	ldr	r0, [r5, #48]	; 0x30
   13ee0:	cmp	r0, #0
   13ee4:	bne	13ef4 <__assert_fail@plt+0x29d4>
   13ee8:	add	r0, r5, #64	; 0x40
   13eec:	ldrd	r0, [r0]
   13ef0:	strd	r0, [r4, #16]
   13ef4:	mov	r0, r4
   13ef8:	mov	r1, r5
   13efc:	bl	14df8 <__assert_fail@plt+0x38d8>
   13f00:	cmp	r0, #0
   13f04:	bne	13f8c <__assert_fail@plt+0x2a6c>
   13f08:	bl	113d0 <__errno_location@plt>
   13f0c:	mov	r1, #12
   13f10:	mov	r5, #0
   13f14:	str	r1, [r0]
   13f18:	b	13f8c <__assert_fail@plt+0x2a6c>
   13f1c:	ldr	r1, [r4, #32]
   13f20:	cmp	r1, r6
   13f24:	bne	13f30 <__assert_fail@plt+0x2a10>
   13f28:	cmn	r1, #100	; 0x64
   13f2c:	bne	13f98 <__assert_fail@plt+0x2a78>
   13f30:	add	r0, r4, #60	; 0x3c
   13f34:	bl	165e4 <__assert_fail@plt+0x50c4>
   13f38:	cmp	r0, #0
   13f3c:	bmi	13f44 <__assert_fail@plt+0x2a24>
   13f40:	bl	114e4 <close@plt>
   13f44:	str	r6, [r4, #32]
   13f48:	ldr	r0, [r5, #36]	; 0x24
   13f4c:	bl	114e4 <close@plt>
   13f50:	ldrh	r0, [r5, #56]	; 0x38
   13f54:	cmp	r0, #2
   13f58:	beq	13f80 <__assert_fail@plt+0x2a60>
   13f5c:	ldr	r0, [r5, #32]
   13f60:	mov	r1, #7
   13f64:	cmp	r0, #0
   13f68:	movweq	r1, #6
   13f6c:	strh	r1, [r5, #56]	; 0x38
   13f70:	bne	13f80 <__assert_fail@plt+0x2a60>
   13f74:	mov	r0, r4
   13f78:	mov	r1, r5
   13f7c:	bl	13f9c <__assert_fail@plt+0x2a7c>
   13f80:	ldrb	r0, [r4, #49]	; 0x31
   13f84:	tst	r0, #32
   13f88:	movne	r5, #0
   13f8c:	mov	r0, r5
   13f90:	sub	sp, fp, #24
   13f94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f98:	bl	114d8 <abort@plt>
   13f9c:	push	{r4, r5, r7, sl, fp, lr}
   13fa0:	add	fp, sp, #16
   13fa4:	sub	sp, sp, #24
   13fa8:	ldrh	r2, [r0, #48]	; 0x30
   13fac:	movw	r3, #258	; 0x102
   13fb0:	add	lr, r1, #64	; 0x40
   13fb4:	add	r4, r1, #160	; 0xa0
   13fb8:	tst	r2, r3
   13fbc:	beq	13ff4 <__assert_fail@plt+0x2ad4>
   13fc0:	ldrd	r2, [lr]
   13fc4:	mov	r1, sp
   13fc8:	stm	sp, {r2, r3}
   13fcc:	ldrd	r2, [r4]
   13fd0:	str	r3, [sp, #12]
   13fd4:	str	r2, [sp, #8]
   13fd8:	ldr	r0, [r0, #56]	; 0x38
   13fdc:	bl	16310 <__assert_fail@plt+0x4df0>
   13fe0:	cmp	r0, #0
   13fe4:	beq	14074 <__assert_fail@plt+0x2b54>
   13fe8:	bl	12ea4 <__assert_fail@plt+0x1984>
   13fec:	sub	sp, fp, #16
   13ff0:	pop	{r4, r5, r7, sl, fp, pc}
   13ff4:	ldr	r1, [r1, #4]
   13ff8:	cmp	r1, #0
   13ffc:	beq	1406c <__assert_fail@plt+0x2b4c>
   14000:	ldr	r2, [r1, #48]	; 0x30
   14004:	cmp	r2, #0
   14008:	bmi	1406c <__assert_fail@plt+0x2b4c>
   1400c:	ldr	ip, [r0, #56]	; 0x38
   14010:	ldrd	r2, [ip, #16]
   14014:	orrs	r2, r2, r3
   14018:	beq	14074 <__assert_fail@plt+0x2b54>
   1401c:	ldrd	r2, [r4]
   14020:	ldrd	r4, [ip]
   14024:	eor	r3, r5, r3
   14028:	eor	r2, r4, r2
   1402c:	orrs	r2, r2, r3
   14030:	bne	1406c <__assert_fail@plt+0x2b4c>
   14034:	add	r3, ip, #8
   14038:	ldm	lr, {r2, r5}
   1403c:	ldm	r3, {r4, r7}
   14040:	eor	r7, r7, r5
   14044:	eor	r2, r4, r2
   14048:	orrs	r2, r2, r7
   1404c:	bne	1406c <__assert_fail@plt+0x2b4c>
   14050:	add	r2, r1, #64	; 0x40
   14054:	add	r1, r1, #160	; 0xa0
   14058:	ldm	r2, {r2, r5}
   1405c:	stm	r3, {r2, r5}
   14060:	ldr	r0, [r0, #56]	; 0x38
   14064:	ldrd	r2, [r1]
   14068:	strd	r2, [r0]
   1406c:	sub	sp, fp, #16
   14070:	pop	{r4, r5, r7, sl, fp, pc}
   14074:	bl	114d8 <abort@plt>
   14078:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1407c:	add	fp, sp, #28
   14080:	sub	sp, sp, #108	; 0x6c
   14084:	mov	r7, r3
   14088:	mov	r4, r2
   1408c:	mov	r8, r1
   14090:	mov	sl, r0
   14094:	cmp	r3, #0
   14098:	beq	140bc <__assert_fail@plt+0x2b9c>
   1409c:	movw	r1, #47348	; 0xb8f4
   140a0:	mov	r0, r7
   140a4:	movt	r1, #1
   140a8:	bl	1122c <strcmp@plt>
   140ac:	cmp	r0, #0
   140b0:	mov	r6, r0
   140b4:	movwne	r6, #1
   140b8:	b	140c0 <__assert_fail@plt+0x2ba0>
   140bc:	mov	r6, #1
   140c0:	ldr	r0, [sl, #48]	; 0x30
   140c4:	tst	r0, #4
   140c8:	bne	14120 <__assert_fail@plt+0x2c00>
   140cc:	cmn	r4, #1
   140d0:	mov	r1, #0
   140d4:	mov	r9, #0
   140d8:	movwgt	r1, #1
   140dc:	orrs	r1, r1, r6
   140e0:	bne	14140 <__assert_fail@plt+0x2c20>
   140e4:	ands	r0, r0, #512	; 0x200
   140e8:	beq	14140 <__assert_fail@plt+0x2c20>
   140ec:	add	r4, sl, #60	; 0x3c
   140f0:	mov	r0, r4
   140f4:	bl	165dc <__assert_fail@plt+0x50bc>
   140f8:	cmp	r0, #0
   140fc:	bne	14148 <__assert_fail@plt+0x2c28>
   14100:	mov	r0, r4
   14104:	bl	16630 <__assert_fail@plt+0x5110>
   14108:	cmn	r0, #1
   1410c:	ble	14148 <__assert_fail@plt+0x2c28>
   14110:	mov	r4, r0
   14114:	mov	r9, #0
   14118:	mov	r7, #0
   1411c:	b	14190 <__assert_fail@plt+0x2c70>
   14120:	mov	r5, #0
   14124:	cmp	r4, #0
   14128:	bmi	142c8 <__assert_fail@plt+0x2da8>
   1412c:	ands	r0, r0, #512	; 0x200
   14130:	beq	142c8 <__assert_fail@plt+0x2da8>
   14134:	mov	r0, r4
   14138:	bl	114e4 <close@plt>
   1413c:	b	142c8 <__assert_fail@plt+0x2da8>
   14140:	cmn	r4, #1
   14144:	bgt	14190 <__assert_fail@plt+0x2c70>
   14148:	ldr	r0, [sl, #48]	; 0x30
   1414c:	mov	r1, #32768	; 0x8000
   14150:	and	r1, r1, r0, lsl #11
   14154:	tst	r0, #512	; 0x200
   14158:	orr	r1, r1, #18688	; 0x4900
   1415c:	orr	r2, r1, #524288	; 0x80000
   14160:	bne	14174 <__assert_fail@plt+0x2c54>
   14164:	mov	r0, r7
   14168:	mov	r1, r2
   1416c:	bl	1a308 <__assert_fail@plt+0x8de8>
   14170:	b	14180 <__assert_fail@plt+0x2c60>
   14174:	ldr	r0, [sl, #32]
   14178:	mov	r1, r7
   1417c:	bl	166dc <__assert_fail@plt+0x51bc>
   14180:	mov	r4, r0
   14184:	mov	r9, #1
   14188:	cmp	r0, #0
   1418c:	bmi	1426c <__assert_fail@plt+0x2d4c>
   14190:	ldr	r5, [sl, #48]	; 0x30
   14194:	tst	r5, #2
   14198:	bne	141dc <__assert_fail@plt+0x2cbc>
   1419c:	cmp	r7, #0
   141a0:	beq	141bc <__assert_fail@plt+0x2c9c>
   141a4:	movw	r1, #47348	; 0xb8f4
   141a8:	mov	r0, r7
   141ac:	movt	r1, #1
   141b0:	bl	1122c <strcmp@plt>
   141b4:	cmp	r0, #0
   141b8:	beq	141dc <__assert_fail@plt+0x2cbc>
   141bc:	tst	r5, #512	; 0x200
   141c0:	bne	1423c <__assert_fail@plt+0x2d1c>
   141c4:	mov	r0, r4
   141c8:	bl	11490 <fchdir@plt>
   141cc:	mov	r5, r0
   141d0:	cmp	r9, #0
   141d4:	bne	1428c <__assert_fail@plt+0x2d6c>
   141d8:	b	142c8 <__assert_fail@plt+0x2da8>
   141dc:	mov	r2, sp
   141e0:	mov	r0, #3
   141e4:	mov	r1, r4
   141e8:	bl	112d4 <__fxstat64@plt>
   141ec:	cmp	r0, #0
   141f0:	bne	14280 <__assert_fail@plt+0x2d60>
   141f4:	add	r0, r8, #64	; 0x40
   141f8:	ldm	sp, {r2, r3}
   141fc:	ldrd	r0, [r0]
   14200:	eor	r1, r1, r3
   14204:	eor	r0, r0, r2
   14208:	orrs	r0, r0, r1
   1420c:	bne	14274 <__assert_fail@plt+0x2d54>
   14210:	add	r0, r8, #160	; 0xa0
   14214:	ldr	r2, [sp, #96]	; 0x60
   14218:	ldr	r3, [sp, #100]	; 0x64
   1421c:	ldrd	r0, [r0]
   14220:	eor	r1, r1, r3
   14224:	eor	r0, r0, r2
   14228:	orrs	r0, r0, r1
   1422c:	bne	14274 <__assert_fail@plt+0x2d54>
   14230:	ldr	r5, [sl, #48]	; 0x30
   14234:	tst	r5, #512	; 0x200
   14238:	beq	141c4 <__assert_fail@plt+0x2ca4>
   1423c:	ldr	r1, [sl, #32]
   14240:	cmp	r1, r4
   14244:	bne	14250 <__assert_fail@plt+0x2d30>
   14248:	cmn	r1, #100	; 0x64
   1424c:	bne	142d4 <__assert_fail@plt+0x2db4>
   14250:	cmp	r6, #0
   14254:	beq	142a8 <__assert_fail@plt+0x2d88>
   14258:	add	r0, sl, #60	; 0x3c
   1425c:	bl	165e4 <__assert_fail@plt+0x50c4>
   14260:	cmp	r0, #0
   14264:	bpl	142bc <__assert_fail@plt+0x2d9c>
   14268:	b	142c0 <__assert_fail@plt+0x2da0>
   1426c:	mvn	r5, #0
   14270:	b	142c8 <__assert_fail@plt+0x2da8>
   14274:	bl	113d0 <__errno_location@plt>
   14278:	mov	r1, #2
   1427c:	str	r1, [r0]
   14280:	mvn	r5, #0
   14284:	cmp	r9, #0
   14288:	beq	142c8 <__assert_fail@plt+0x2da8>
   1428c:	bl	113d0 <__errno_location@plt>
   14290:	ldr	r7, [r0]
   14294:	mov	r6, r0
   14298:	mov	r0, r4
   1429c:	bl	114e4 <close@plt>
   142a0:	str	r7, [r6]
   142a4:	b	142c8 <__assert_fail@plt+0x2da8>
   142a8:	tst	r5, #4
   142ac:	bne	142c0 <__assert_fail@plt+0x2da0>
   142b0:	cmp	r1, #0
   142b4:	bmi	142c0 <__assert_fail@plt+0x2da0>
   142b8:	mov	r0, r1
   142bc:	bl	114e4 <close@plt>
   142c0:	str	r4, [sl, #32]
   142c4:	mov	r5, #0
   142c8:	mov	r0, r5
   142cc:	sub	sp, fp, #28
   142d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142d4:	bl	114d8 <abort@plt>
   142d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142dc:	add	fp, sp, #28
   142e0:	sub	sp, sp, #68	; 0x44
   142e4:	ldr	sl, [r0]
   142e8:	mov	r7, r1
   142ec:	mov	r5, r0
   142f0:	str	r0, [sp, #48]	; 0x30
   142f4:	ldr	r4, [sl, #12]
   142f8:	cmp	r4, #0
   142fc:	beq	14344 <__assert_fail@plt+0x2e24>
   14300:	mov	r0, r4
   14304:	bl	11484 <dirfd@plt>
   14308:	cmn	r0, #1
   1430c:	str	r0, [fp, #-32]	; 0xffffffe0
   14310:	ble	14378 <__assert_fail@plt+0x2e58>
   14314:	mov	r1, r5
   14318:	str	r4, [sp, #12]
   1431c:	str	r7, [sp, #4]
   14320:	mov	ip, #0
   14324:	ldr	r0, [r1, #44]!	; 0x2c
   14328:	str	r1, [sp, #20]
   1432c:	mvn	r1, #0
   14330:	cmp	r0, #0
   14334:	movweq	r1, #34464	; 0x86a0
   14338:	movteq	r1, #1
   1433c:	str	r1, [sp, #32]
   14340:	b	145c8 <__assert_fail@plt+0x30a8>
   14344:	ldr	r3, [r5, #48]	; 0x30
   14348:	mvn	r0, #99	; 0x63
   1434c:	mov	r2, #0
   14350:	and	r1, r3, #516	; 0x204
   14354:	cmp	r1, #512	; 0x200
   14358:	ldr	r1, [sl, #24]
   1435c:	ldreq	r0, [r5, #32]
   14360:	tst	r3, #16
   14364:	beq	143a0 <__assert_fail@plt+0x2e80>
   14368:	tst	r3, #1
   1436c:	bne	14394 <__assert_fail@plt+0x2e74>
   14370:	mov	r2, #32768	; 0x8000
   14374:	b	143a0 <__assert_fail@plt+0x2e80>
   14378:	ldr	r0, [sl, #12]
   1437c:	bl	114fc <closedir@plt>
   14380:	mov	r6, #0
   14384:	str	r6, [sl, #12]
   14388:	cmp	r7, #3
   1438c:	beq	143e4 <__assert_fail@plt+0x2ec4>
   14390:	b	14d5c <__assert_fail@plt+0x383c>
   14394:	ldr	r3, [sl, #48]	; 0x30
   14398:	cmp	r3, #0
   1439c:	movne	r2, #32768	; 0x8000
   143a0:	sub	r3, fp, #32
   143a4:	bl	16714 <__assert_fail@plt+0x51f4>
   143a8:	cmp	r0, #0
   143ac:	str	r0, [sl, #12]
   143b0:	beq	143d8 <__assert_fail@plt+0x2eb8>
   143b4:	ldrh	r0, [sl, #56]	; 0x38
   143b8:	cmp	r0, #11
   143bc:	bne	143fc <__assert_fail@plt+0x2edc>
   143c0:	mov	r0, r5
   143c4:	mov	r1, sl
   143c8:	mov	r2, #0
   143cc:	bl	133c4 <__assert_fail@plt+0x1ea4>
   143d0:	strh	r0, [sl, #56]	; 0x38
   143d4:	b	1443c <__assert_fail@plt+0x2f1c>
   143d8:	mov	r6, #0
   143dc:	cmp	r7, #3
   143e0:	bne	14d5c <__assert_fail@plt+0x383c>
   143e4:	mov	r0, #4
   143e8:	strh	r0, [sl, #56]	; 0x38
   143ec:	bl	113d0 <__errno_location@plt>
   143f0:	ldr	r0, [r0]
   143f4:	str	r0, [sl, #32]
   143f8:	b	14d5c <__assert_fail@plt+0x383c>
   143fc:	ldrb	r0, [r5, #49]	; 0x31
   14400:	tst	r0, #1
   14404:	beq	1443c <__assert_fail@plt+0x2f1c>
   14408:	mov	r0, r5
   1440c:	mov	r1, sl
   14410:	bl	13f9c <__assert_fail@plt+0x2a7c>
   14414:	mov	r0, r5
   14418:	mov	r1, sl
   1441c:	mov	r2, #0
   14420:	mov	r6, #0
   14424:	bl	133c4 <__assert_fail@plt+0x1ea4>
   14428:	mov	r0, r5
   1442c:	mov	r1, sl
   14430:	bl	14df8 <__assert_fail@plt+0x38d8>
   14434:	cmp	r0, #0
   14438:	beq	144e0 <__assert_fail@plt+0x2fc0>
   1443c:	mov	r1, r5
   14440:	str	r7, [sp, #4]
   14444:	str	r4, [sp, #12]
   14448:	ldr	r0, [r1, #44]!	; 0x2c
   1444c:	str	r1, [sp, #20]
   14450:	mvn	r1, #0
   14454:	cmp	r0, #0
   14458:	movweq	r1, #34464	; 0x86a0
   1445c:	movteq	r1, #1
   14460:	cmp	r7, #2
   14464:	str	r1, [sp, #32]
   14468:	bne	14484 <__assert_fail@plt+0x2f64>
   1446c:	mov	ip, #1
   14470:	cmp	r7, #3
   14474:	bne	145c8 <__assert_fail@plt+0x30a8>
   14478:	sub	r0, r7, #3
   1447c:	mov	r5, #0
   14480:	b	1450c <__assert_fail@plt+0x2fec>
   14484:	ldr	r0, [r5, #48]	; 0x30
   14488:	and	r0, r0, #56	; 0x38
   1448c:	cmp	r0, #24
   14490:	bne	14504 <__assert_fail@plt+0x2fe4>
   14494:	ldr	r0, [sl, #84]	; 0x54
   14498:	cmp	r0, #2
   1449c:	bne	14504 <__assert_fail@plt+0x2fe4>
   144a0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   144a4:	mov	r0, sl
   144a8:	bl	15170 <__assert_fail@plt+0x3c50>
   144ac:	movw	r1, #26984	; 0x6968
   144b0:	cmp	r0, r1
   144b4:	ble	144f0 <__assert_fail@plt+0x2fd0>
   144b8:	movw	r1, #26985	; 0x6969
   144bc:	cmp	r0, r1
   144c0:	movwne	r1, #16719	; 0x414f
   144c4:	movtne	r1, #21318	; 0x5346
   144c8:	cmpne	r0, r1
   144cc:	beq	14504 <__assert_fail@plt+0x2fe4>
   144d0:	movw	r1, #40864	; 0x9fa0
   144d4:	cmp	r0, r1
   144d8:	beq	14504 <__assert_fail@plt+0x2fe4>
   144dc:	b	1446c <__assert_fail@plt+0x2f4c>
   144e0:	bl	113d0 <__errno_location@plt>
   144e4:	mov	r1, #12
   144e8:	str	r1, [r0]
   144ec:	b	14d5c <__assert_fail@plt+0x383c>
   144f0:	movw	r1, #19778	; 0x4d42
   144f4:	movt	r1, #65363	; 0xff53
   144f8:	cmp	r0, r1
   144fc:	cmpne	r0, #0
   14500:	bne	1446c <__assert_fail@plt+0x2f4c>
   14504:	sub	r0, r7, #3
   14508:	mov	r5, #1
   1450c:	clz	r0, r0
   14510:	lsr	r6, r0, #5
   14514:	ldr	r0, [sp, #48]	; 0x30
   14518:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1451c:	ldrb	r0, [r0, #49]	; 0x31
   14520:	tst	r0, #2
   14524:	beq	14540 <__assert_fail@plt+0x3020>
   14528:	mov	r0, r2
   1452c:	movw	r1, #1030	; 0x406
   14530:	mov	r2, #3
   14534:	bl	1a128 <__assert_fail@plt+0x8c08>
   14538:	mov	r2, r0
   1453c:	str	r0, [fp, #-32]	; 0xffffffe0
   14540:	cmp	r2, #0
   14544:	bmi	14560 <__assert_fail@plt+0x3040>
   14548:	ldr	r0, [sp, #48]	; 0x30
   1454c:	mov	r1, sl
   14550:	mov	r3, #0
   14554:	bl	14078 <__assert_fail@plt+0x2b58>
   14558:	cmp	r0, #0
   1455c:	beq	145c0 <__assert_fail@plt+0x30a0>
   14560:	and	r0, r6, r5
   14564:	cmp	r0, #1
   14568:	bne	14578 <__assert_fail@plt+0x3058>
   1456c:	bl	113d0 <__errno_location@plt>
   14570:	ldr	r0, [r0]
   14574:	str	r0, [sl, #32]
   14578:	ldrh	r0, [sl, #58]	; 0x3a
   1457c:	orr	r0, r0, #1
   14580:	strh	r0, [sl, #58]	; 0x3a
   14584:	ldr	r0, [sl, #12]
   14588:	bl	114fc <closedir@plt>
   1458c:	ldr	r5, [sp, #48]	; 0x30
   14590:	mov	r4, #0
   14594:	str	r4, [sl, #12]
   14598:	ldrb	r0, [r5, #49]	; 0x31
   1459c:	tst	r0, #2
   145a0:	beq	145b4 <__assert_fail@plt+0x3094>
   145a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   145a8:	cmp	r0, #0
   145ac:	bmi	145b4 <__assert_fail@plt+0x3094>
   145b0:	bl	114e4 <close@plt>
   145b4:	mov	ip, #1
   145b8:	str	r4, [sl, #12]
   145bc:	b	145c8 <__assert_fail@plt+0x30a8>
   145c0:	ldr	r5, [sp, #48]	; 0x30
   145c4:	mov	ip, #0
   145c8:	ldr	r0, [sl, #40]	; 0x28
   145cc:	ldr	r1, [sl, #28]
   145d0:	mov	r9, #0
   145d4:	sub	r2, r0, #1
   145d8:	ldrb	r1, [r1, r2]
   145dc:	cmp	r1, #47	; 0x2f
   145e0:	ldrb	r1, [r5, #48]	; 0x30
   145e4:	moveq	r0, r2
   145e8:	tst	r1, #4
   145ec:	mov	r1, #0
   145f0:	str	r1, [sp, #40]	; 0x28
   145f4:	beq	1460c <__assert_fail@plt+0x30ec>
   145f8:	ldr	r1, [r5, #24]
   145fc:	mov	r2, #47	; 0x2f
   14600:	strb	r2, [r1, r0]!
   14604:	add	r1, r1, #1
   14608:	str	r1, [sp, #40]	; 0x28
   1460c:	ldr	r6, [sl, #12]
   14610:	add	r1, r0, #1
   14614:	str	r1, [fp, #-44]	; 0xffffffd4
   14618:	cmp	r6, #0
   1461c:	beq	1497c <__assert_fail@plt+0x345c>
   14620:	ldr	r0, [sl, #48]	; 0x30
   14624:	str	ip, [sp]
   14628:	mov	r4, #0
   1462c:	add	r0, r0, #1
   14630:	str	r0, [sp, #24]
   14634:	ldr	r0, [r5, #36]	; 0x24
   14638:	sub	r0, r0, r1
   1463c:	str	r0, [fp, #-36]	; 0xffffffdc
   14640:	bl	113d0 <__errno_location@plt>
   14644:	str	r0, [sp, #36]	; 0x24
   14648:	mov	r0, #0
   1464c:	mov	r9, #0
   14650:	mov	r7, #0
   14654:	str	sl, [sp, #28]
   14658:	str	r0, [sp, #44]	; 0x2c
   1465c:	mov	r0, #0
   14660:	str	r0, [sp, #8]
   14664:	mov	r0, #0
   14668:	str	r0, [sp, #16]
   1466c:	ldr	r0, [sp, #36]	; 0x24
   14670:	str	r4, [r0]
   14674:	mov	r0, r6
   14678:	bl	1146c <readdir64@plt>
   1467c:	cmp	r0, #0
   14680:	beq	14988 <__assert_fail@plt+0x3468>
   14684:	mov	r8, r0
   14688:	ldrb	r0, [r5, #48]	; 0x30
   1468c:	tst	r0, #32
   14690:	bne	146c0 <__assert_fail@plt+0x31a0>
   14694:	ldrb	r0, [r8, #19]
   14698:	cmp	r0, #46	; 0x2e
   1469c:	bne	146c0 <__assert_fail@plt+0x31a0>
   146a0:	ldrb	r0, [r8, #20]
   146a4:	cmp	r0, #0
   146a8:	beq	14958 <__assert_fail@plt+0x3438>
   146ac:	cmp	r0, #46	; 0x2e
   146b0:	bne	146c0 <__assert_fail@plt+0x31a0>
   146b4:	ldrb	r0, [r8, #21]
   146b8:	cmp	r0, #0
   146bc:	beq	14958 <__assert_fail@plt+0x3438>
   146c0:	add	r4, r8, #19
   146c4:	mov	r0, r4
   146c8:	bl	113a0 <strlen@plt>
   146cc:	mov	r5, r0
   146d0:	add	r0, r0, #176	; 0xb0
   146d4:	bic	r0, r0, #7
   146d8:	bl	19e94 <__assert_fail@plt+0x8974>
   146dc:	mov	r6, r0
   146e0:	cmp	r0, #0
   146e4:	beq	14ce4 <__assert_fail@plt+0x37c4>
   146e8:	add	sl, r6, #168	; 0xa8
   146ec:	mov	r1, r4
   146f0:	mov	r2, r5
   146f4:	str	r7, [fp, #-40]	; 0xffffffd8
   146f8:	mov	r0, sl
   146fc:	bl	11274 <memcpy@plt>
   14700:	ldr	r2, [sp, #48]	; 0x30
   14704:	mov	r0, #0
   14708:	mov	r1, #196608	; 0x30000
   1470c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14710:	strb	r0, [sl, r5]
   14714:	str	r5, [r6, #52]	; 0x34
   14718:	str	r2, [r6, #44]	; 0x2c
   1471c:	add	r7, r5, r3
   14720:	ldr	r4, [r2, #24]
   14724:	str	r0, [r6, #12]
   14728:	str	r0, [r6, #16]
   1472c:	str	r0, [r6, #20]
   14730:	str	r1, [r6, #58]	; 0x3a
   14734:	str	r4, [r6, #28]
   14738:	str	r0, [r6, #32]
   1473c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14740:	cmp	r5, r0
   14744:	bcs	14758 <__assert_fail@plt+0x3238>
   14748:	mov	r5, r2
   1474c:	cmp	r7, r3
   14750:	bcs	147c8 <__assert_fail@plt+0x32a8>
   14754:	b	14bd4 <__assert_fail@plt+0x36b4>
   14758:	ldr	r1, [r2, #36]	; 0x24
   1475c:	movw	r0, #257	; 0x101
   14760:	mov	r5, r2
   14764:	add	r0, r7, r0
   14768:	adds	r1, r0, r1
   1476c:	bcs	14cb0 <__assert_fail@plt+0x3790>
   14770:	mov	r0, r4
   14774:	str	r1, [r5, #36]	; 0x24
   14778:	bl	19ec4 <__assert_fail@plt+0x89a4>
   1477c:	cmp	r0, #0
   14780:	beq	14cd0 <__assert_fail@plt+0x37b0>
   14784:	cmp	r0, r4
   14788:	str	r0, [r5, #24]
   1478c:	beq	147b4 <__assert_fail@plt+0x3294>
   14790:	ldrb	r1, [r5, #48]	; 0x30
   14794:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14798:	tst	r1, #4
   1479c:	ldr	r1, [sp, #40]	; 0x28
   147a0:	addne	r1, r0, r3
   147a4:	mov	r0, #1
   147a8:	str	r1, [sp, #40]	; 0x28
   147ac:	str	r0, [sp, #16]
   147b0:	b	147b8 <__assert_fail@plt+0x3298>
   147b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   147b8:	ldr	r0, [r5, #36]	; 0x24
   147bc:	sub	r0, r0, r3
   147c0:	cmp	r7, r3
   147c4:	bcc	14bd4 <__assert_fail@plt+0x36b4>
   147c8:	str	r0, [fp, #-36]	; 0xffffffdc
   147cc:	ldr	r0, [sp, #24]
   147d0:	add	r4, r6, #112	; 0x70
   147d4:	str	r0, [r6, #48]	; 0x30
   147d8:	ldr	r0, [r5]
   147dc:	str	r7, [r6, #40]	; 0x28
   147e0:	str	r0, [r6, #4]
   147e4:	ldrd	r0, [r8]
   147e8:	strd	r0, [r4, #48]	; 0x30
   147ec:	ldrb	r0, [r5, #48]	; 0x30
   147f0:	tst	r0, #4
   147f4:	bne	14800 <__assert_fail@plt+0x32e0>
   147f8:	str	sl, [r6, #24]
   147fc:	b	1481c <__assert_fail@plt+0x32fc>
   14800:	ldr	r0, [r6, #28]
   14804:	ldr	r1, [r6, #52]	; 0x34
   14808:	str	r0, [r6, #24]
   1480c:	ldr	r0, [sp, #40]	; 0x28
   14810:	add	r2, r1, #1
   14814:	mov	r1, sl
   14818:	bl	11250 <memmove@plt>
   1481c:	ldr	r0, [r5, #44]	; 0x2c
   14820:	ldr	r7, [fp, #-40]	; 0xffffffd8
   14824:	ldr	r2, [r5, #48]	; 0x30
   14828:	ldr	sl, [sp, #28]
   1482c:	cmp	r0, #0
   14830:	beq	14854 <__assert_fail@plt+0x3334>
   14834:	ands	r0, r2, #1024	; 0x400
   14838:	bne	14854 <__assert_fail@plt+0x3334>
   1483c:	mov	r0, r5
   14840:	mov	r1, r6
   14844:	mov	r2, #0
   14848:	bl	133c4 <__assert_fail@plt+0x1ea4>
   1484c:	strh	r0, [r6, #56]	; 0x38
   14850:	b	148c8 <__assert_fail@plt+0x33a8>
   14854:	ldrb	r3, [r8, #18]
   14858:	mov	r0, #0
   1485c:	tst	r2, #8
   14860:	mov	r1, #0
   14864:	beq	14888 <__assert_fail@plt+0x3368>
   14868:	orr	r1, r3, #4
   1486c:	cmp	r1, #4
   14870:	mov	r1, #0
   14874:	beq	14888 <__assert_fail@plt+0x3368>
   14878:	eor	r1, r3, #10
   1487c:	and	r2, r2, #16
   14880:	orrs	r1, r2, r1
   14884:	movwne	r1, #1
   14888:	mov	r2, #11
   1488c:	strh	r2, [r6, #56]	; 0x38
   14890:	sub	r2, r3, #1
   14894:	uxtb	r3, r2
   14898:	cmp	r3, #11
   1489c:	bhi	148b0 <__assert_fail@plt+0x3390>
   148a0:	sxtb	r0, r2
   148a4:	movw	r2, #47352	; 0xb8f8
   148a8:	movt	r2, #1
   148ac:	ldr	r0, [r2, r0, lsl #2]
   148b0:	cmp	r1, #0
   148b4:	str	r0, [r6, #80]	; 0x50
   148b8:	mov	r0, #2
   148bc:	mov	r1, #0
   148c0:	movwne	r0, #1
   148c4:	strd	r0, [r4]
   148c8:	mov	r4, #0
   148cc:	cmp	r9, #0
   148d0:	str	r4, [r6, #8]
   148d4:	beq	148e4 <__assert_fail@plt+0x33c4>
   148d8:	ldr	r0, [sp, #44]	; 0x2c
   148dc:	str	r6, [r0, #8]
   148e0:	b	148e8 <__assert_fail@plt+0x33c8>
   148e4:	mov	r9, r6
   148e8:	movw	r0, #10000	; 0x2710
   148ec:	cmp	r7, r0
   148f0:	bne	14944 <__assert_fail@plt+0x3424>
   148f4:	ldr	r0, [sp, #20]
   148f8:	ldr	r0, [r0]
   148fc:	cmp	r0, #0
   14900:	bne	14944 <__assert_fail@plt+0x3424>
   14904:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14908:	mov	r0, sl
   1490c:	bl	15170 <__assert_fail@plt+0x3c50>
   14910:	mov	r1, #0
   14914:	str	r1, [sp, #8]
   14918:	movw	r1, #19778	; 0x4d42
   1491c:	movt	r1, #65363	; 0xff53
   14920:	cmp	r0, r1
   14924:	movwne	r1, #26985	; 0x6969
   14928:	cmpne	r0, r1
   1492c:	beq	14944 <__assert_fail@plt+0x3424>
   14930:	movw	r1, #6548	; 0x1994
   14934:	movt	r1, #258	; 0x102
   14938:	cmp	r0, r1
   1493c:	movne	r0, #1
   14940:	strne	r0, [sp, #8]
   14944:	ldr	r0, [sp, #32]
   14948:	add	r7, r7, #1
   1494c:	cmp	r0, r7
   14950:	bls	14964 <__assert_fail@plt+0x3444>
   14954:	str	r6, [sp, #44]	; 0x2c
   14958:	ldr	r6, [sl, #12]
   1495c:	cmp	r6, #0
   14960:	bne	1466c <__assert_fail@plt+0x314c>
   14964:	ldr	r0, [sp, #16]
   14968:	ldr	ip, [sp]
   1496c:	ldr	r4, [sp, #8]
   14970:	tst	r0, #1
   14974:	bne	149dc <__assert_fail@plt+0x34bc>
   14978:	b	14a7c <__assert_fail@plt+0x355c>
   1497c:	mov	r7, #0
   14980:	mov	r4, #0
   14984:	b	14a7c <__assert_fail@plt+0x355c>
   14988:	ldr	r0, [sp, #36]	; 0x24
   1498c:	ldr	r0, [r0]
   14990:	cmp	r0, #0
   14994:	beq	149b0 <__assert_fail@plt+0x3490>
   14998:	str	r0, [sl, #32]
   1499c:	ldr	r0, [sp, #12]
   149a0:	orrs	r0, r0, r7
   149a4:	mov	r0, #4
   149a8:	movwne	r0, #7
   149ac:	strh	r0, [sl, #56]	; 0x38
   149b0:	ldr	r0, [sl, #12]
   149b4:	ldr	r4, [sp, #8]
   149b8:	cmp	r0, #0
   149bc:	beq	149cc <__assert_fail@plt+0x34ac>
   149c0:	bl	114fc <closedir@plt>
   149c4:	mov	r0, #0
   149c8:	str	r0, [sl, #12]
   149cc:	ldr	r0, [sp, #16]
   149d0:	ldr	ip, [sp]
   149d4:	tst	r0, #1
   149d8:	beq	14a7c <__assert_fail@plt+0x355c>
   149dc:	ldr	r1, [r5, #4]
   149e0:	ldr	r0, [r5, #24]
   149e4:	cmp	r1, #0
   149e8:	bne	14a00 <__assert_fail@plt+0x34e0>
   149ec:	b	14a24 <__assert_fail@plt+0x3504>
   149f0:	str	r0, [r1, #28]
   149f4:	ldr	r1, [r1, #8]
   149f8:	cmp	r1, #0
   149fc:	beq	14a24 <__assert_fail@plt+0x3504>
   14a00:	ldr	r2, [r1, #24]
   14a04:	add	r3, r1, #168	; 0xa8
   14a08:	cmp	r2, r3
   14a0c:	beq	149f0 <__assert_fail@plt+0x34d0>
   14a10:	ldr	r3, [r1, #28]
   14a14:	sub	r2, r2, r3
   14a18:	add	r2, r0, r2
   14a1c:	str	r2, [r1, #24]
   14a20:	b	149f0 <__assert_fail@plt+0x34d0>
   14a24:	ldr	r1, [r9, #48]	; 0x30
   14a28:	cmp	r1, #0
   14a2c:	bmi	14a7c <__assert_fail@plt+0x355c>
   14a30:	mov	r1, r9
   14a34:	b	14a58 <__assert_fail@plt+0x3538>
   14a38:	str	r0, [r1, #28]
   14a3c:	ldr	r2, [r1, #8]
   14a40:	cmp	r2, #0
   14a44:	ldreq	r2, [r1, #4]
   14a48:	ldr	r1, [r2, #48]	; 0x30
   14a4c:	cmn	r1, #1
   14a50:	mov	r1, r2
   14a54:	ble	14a7c <__assert_fail@plt+0x355c>
   14a58:	ldr	r2, [r1, #24]
   14a5c:	add	r3, r1, #168	; 0xa8
   14a60:	cmp	r2, r3
   14a64:	beq	14a38 <__assert_fail@plt+0x3518>
   14a68:	ldr	r3, [r1, #28]
   14a6c:	sub	r2, r2, r3
   14a70:	add	r2, r0, r2
   14a74:	str	r2, [r1, #24]
   14a78:	b	14a38 <__assert_fail@plt+0x3518>
   14a7c:	ldrb	r0, [r5, #48]	; 0x30
   14a80:	tst	r0, #4
   14a84:	beq	14ab0 <__assert_fail@plt+0x3590>
   14a88:	ldr	r2, [sp, #40]	; 0x28
   14a8c:	ldr	r0, [r5, #36]	; 0x24
   14a90:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14a94:	cmp	r3, r0
   14a98:	sub	r1, r2, #1
   14a9c:	mov	r0, #0
   14aa0:	moveq	r2, r1
   14aa4:	cmp	r7, #0
   14aa8:	moveq	r2, r1
   14aac:	strb	r0, [r2]
   14ab0:	ldr	r0, [sp, #12]
   14ab4:	cmp	r0, #0
   14ab8:	movwne	r0, #1
   14abc:	orrs	r0, r0, ip
   14ac0:	beq	14b28 <__assert_fail@plt+0x3608>
   14ac4:	cmp	r7, #0
   14ac8:	bne	14b68 <__assert_fail@plt+0x3648>
   14acc:	ldr	r0, [sp, #4]
   14ad0:	cmp	r0, #3
   14ad4:	bne	14aec <__assert_fail@plt+0x35cc>
   14ad8:	ldrh	r0, [sl, #56]	; 0x38
   14adc:	cmp	r0, #4
   14ae0:	cmpne	r0, #7
   14ae4:	movne	r0, #6
   14ae8:	strhne	r0, [sl, #56]	; 0x38
   14aec:	mov	r6, #0
   14af0:	cmp	r9, #0
   14af4:	bne	14b10 <__assert_fail@plt+0x35f0>
   14af8:	b	14d5c <__assert_fail@plt+0x383c>
   14afc:	mov	r0, r9
   14b00:	bl	12ea4 <__assert_fail@plt+0x1984>
   14b04:	cmp	r4, #0
   14b08:	mov	r9, r4
   14b0c:	beq	14d5c <__assert_fail@plt+0x383c>
   14b10:	ldrd	r4, [r9, #8]
   14b14:	cmp	r5, #0
   14b18:	beq	14afc <__assert_fail@plt+0x35dc>
   14b1c:	mov	r0, r5
   14b20:	bl	114fc <closedir@plt>
   14b24:	b	14afc <__assert_fail@plt+0x35dc>
   14b28:	ldr	r0, [sp, #4]
   14b2c:	cmp	r0, #1
   14b30:	cmpne	r7, #0
   14b34:	bne	14b68 <__assert_fail@plt+0x3648>
   14b38:	ldr	r0, [sl, #48]	; 0x30
   14b3c:	cmp	r0, #0
   14b40:	beq	14c50 <__assert_fail@plt+0x3730>
   14b44:	ldr	r1, [sl, #4]
   14b48:	movw	r3, #47348	; 0xb8f4
   14b4c:	mov	r0, r5
   14b50:	mvn	r2, #0
   14b54:	movt	r3, #1
   14b58:	bl	14078 <__assert_fail@plt+0x2b58>
   14b5c:	cmp	r0, #0
   14b60:	bne	14c60 <__assert_fail@plt+0x3740>
   14b64:	b	14ac4 <__assert_fail@plt+0x35a4>
   14b68:	tst	r4, #1
   14b6c:	beq	14b9c <__assert_fail@plt+0x367c>
   14b70:	movw	r0, #20792	; 0x5138
   14b74:	mov	r1, r9
   14b78:	mov	r2, r7
   14b7c:	movt	r0, #1
   14b80:	str	r0, [r5, #44]	; 0x2c
   14b84:	mov	r0, r5
   14b88:	bl	1355c <__assert_fail@plt+0x203c>
   14b8c:	mov	r6, r0
   14b90:	mov	r0, #0
   14b94:	str	r0, [r5, #44]	; 0x2c
   14b98:	b	14d5c <__assert_fail@plt+0x383c>
   14b9c:	cmp	r7, #2
   14ba0:	bcc	14bcc <__assert_fail@plt+0x36ac>
   14ba4:	ldr	r0, [sp, #20]
   14ba8:	ldr	r0, [r0]
   14bac:	cmp	r0, #0
   14bb0:	beq	14bcc <__assert_fail@plt+0x36ac>
   14bb4:	mov	r0, r5
   14bb8:	mov	r1, r9
   14bbc:	mov	r2, r7
   14bc0:	bl	1355c <__assert_fail@plt+0x203c>
   14bc4:	mov	r6, r0
   14bc8:	b	14d5c <__assert_fail@plt+0x383c>
   14bcc:	mov	r6, r9
   14bd0:	b	14d5c <__assert_fail@plt+0x383c>
   14bd4:	mov	r0, r6
   14bd8:	bl	12ea4 <__assert_fail@plt+0x1984>
   14bdc:	ldr	r7, [sp, #28]
   14be0:	cmp	r9, #0
   14be4:	bne	14c00 <__assert_fail@plt+0x36e0>
   14be8:	b	14c18 <__assert_fail@plt+0x36f8>
   14bec:	mov	r0, r9
   14bf0:	bl	12ea4 <__assert_fail@plt+0x1984>
   14bf4:	cmp	r4, #0
   14bf8:	mov	r9, r4
   14bfc:	beq	14c18 <__assert_fail@plt+0x36f8>
   14c00:	ldrd	r4, [r9, #8]
   14c04:	cmp	r5, #0
   14c08:	beq	14bec <__assert_fail@plt+0x36cc>
   14c0c:	mov	r0, r5
   14c10:	bl	114fc <closedir@plt>
   14c14:	b	14bec <__assert_fail@plt+0x36cc>
   14c18:	ldr	r0, [r7, #12]
   14c1c:	bl	114fc <closedir@plt>
   14c20:	ldr	r1, [sp, #48]	; 0x30
   14c24:	mov	r0, #7
   14c28:	mov	r6, #0
   14c2c:	strh	r0, [r7, #56]	; 0x38
   14c30:	str	r6, [r7, #12]
   14c34:	ldr	r0, [r1, #48]	; 0x30
   14c38:	orr	r0, r0, #8192	; 0x2000
   14c3c:	str	r0, [r1, #48]	; 0x30
   14c40:	ldr	r1, [sp, #36]	; 0x24
   14c44:	mov	r0, #36	; 0x24
   14c48:	str	r0, [r1]
   14c4c:	b	14d5c <__assert_fail@plt+0x383c>
   14c50:	mov	r0, r5
   14c54:	bl	14d68 <__assert_fail@plt+0x3848>
   14c58:	cmp	r0, #0
   14c5c:	beq	14ac4 <__assert_fail@plt+0x35a4>
   14c60:	mov	r0, #7
   14c64:	mov	r6, #0
   14c68:	cmp	r9, #0
   14c6c:	strh	r0, [sl, #56]	; 0x38
   14c70:	ldr	r0, [r5, #48]	; 0x30
   14c74:	orr	r0, r0, #8192	; 0x2000
   14c78:	str	r0, [r5, #48]	; 0x30
   14c7c:	bne	14c98 <__assert_fail@plt+0x3778>
   14c80:	b	14d5c <__assert_fail@plt+0x383c>
   14c84:	mov	r0, r9
   14c88:	bl	12ea4 <__assert_fail@plt+0x1984>
   14c8c:	cmp	r4, #0
   14c90:	mov	r9, r4
   14c94:	beq	14d5c <__assert_fail@plt+0x383c>
   14c98:	ldrd	r4, [r9, #8]
   14c9c:	cmp	r5, #0
   14ca0:	beq	14c84 <__assert_fail@plt+0x3764>
   14ca4:	mov	r0, r5
   14ca8:	bl	114fc <closedir@plt>
   14cac:	b	14c84 <__assert_fail@plt+0x3764>
   14cb0:	mov	r0, r4
   14cb4:	bl	12ea4 <__assert_fail@plt+0x1984>
   14cb8:	ldr	r1, [sp, #36]	; 0x24
   14cbc:	mov	r0, #0
   14cc0:	str	r0, [r5, #24]
   14cc4:	mov	r0, #36	; 0x24
   14cc8:	str	r0, [r1]
   14ccc:	b	14ce0 <__assert_fail@plt+0x37c0>
   14cd0:	ldr	r0, [r5, #24]
   14cd4:	bl	12ea4 <__assert_fail@plt+0x1984>
   14cd8:	mov	r0, #0
   14cdc:	str	r0, [r5, #24]
   14ce0:	ldr	sl, [sp, #28]
   14ce4:	ldr	r0, [sp, #36]	; 0x24
   14ce8:	ldr	r4, [r0]
   14cec:	mov	r0, r6
   14cf0:	bl	12ea4 <__assert_fail@plt+0x1984>
   14cf4:	ldr	r5, [sp, #48]	; 0x30
   14cf8:	cmp	r9, #0
   14cfc:	bne	14d18 <__assert_fail@plt+0x37f8>
   14d00:	b	14d30 <__assert_fail@plt+0x3810>
   14d04:	mov	r0, r9
   14d08:	bl	12ea4 <__assert_fail@plt+0x1984>
   14d0c:	cmp	r6, #0
   14d10:	mov	r9, r6
   14d14:	beq	14d30 <__assert_fail@plt+0x3810>
   14d18:	ldrd	r6, [r9, #8]
   14d1c:	cmp	r7, #0
   14d20:	beq	14d04 <__assert_fail@plt+0x37e4>
   14d24:	mov	r0, r7
   14d28:	bl	114fc <closedir@plt>
   14d2c:	b	14d04 <__assert_fail@plt+0x37e4>
   14d30:	ldr	r0, [sl, #12]
   14d34:	bl	114fc <closedir@plt>
   14d38:	mov	r0, #7
   14d3c:	mov	r6, #0
   14d40:	strh	r0, [sl, #56]	; 0x38
   14d44:	str	r6, [sl, #12]
   14d48:	ldr	r0, [r5, #48]	; 0x30
   14d4c:	orr	r0, r0, #8192	; 0x2000
   14d50:	str	r0, [r5, #48]	; 0x30
   14d54:	ldr	r0, [sp, #36]	; 0x24
   14d58:	str	r4, [r0]
   14d5c:	mov	r0, r6
   14d60:	sub	sp, fp, #28
   14d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d68:	push	{r4, r5, fp, lr}
   14d6c:	add	fp, sp, #8
   14d70:	mov	r5, r0
   14d74:	ldr	r0, [r0, #48]	; 0x30
   14d78:	mov	r4, #0
   14d7c:	tst	r0, #4
   14d80:	bne	14dc4 <__assert_fail@plt+0x38a4>
   14d84:	tst	r0, #512	; 0x200
   14d88:	bne	14da4 <__assert_fail@plt+0x3884>
   14d8c:	ldr	r0, [r5, #28]
   14d90:	bl	11490 <fchdir@plt>
   14d94:	cmp	r0, #0
   14d98:	mov	r4, r0
   14d9c:	movwne	r4, #1
   14da0:	b	14dc4 <__assert_fail@plt+0x38a4>
   14da4:	ldr	r1, [r5, #32]
   14da8:	add	r0, r5, #60	; 0x3c
   14dac:	bl	165e4 <__assert_fail@plt+0x50c4>
   14db0:	cmp	r0, #0
   14db4:	bmi	14dbc <__assert_fail@plt+0x389c>
   14db8:	bl	114e4 <close@plt>
   14dbc:	mvn	r0, #99	; 0x63
   14dc0:	str	r0, [r5, #32]
   14dc4:	add	r5, r5, #60	; 0x3c
   14dc8:	mov	r0, r5
   14dcc:	bl	165dc <__assert_fail@plt+0x50bc>
   14dd0:	cmp	r0, #0
   14dd4:	bne	14df0 <__assert_fail@plt+0x38d0>
   14dd8:	mov	r0, r5
   14ddc:	bl	16630 <__assert_fail@plt+0x5110>
   14de0:	cmp	r0, #0
   14de4:	bmi	14dc8 <__assert_fail@plt+0x38a8>
   14de8:	bl	114e4 <close@plt>
   14dec:	b	14dc8 <__assert_fail@plt+0x38a8>
   14df0:	mov	r0, r4
   14df4:	pop	{r4, r5, fp, pc}
   14df8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14dfc:	add	fp, sp, #24
   14e00:	mov	r6, r0
   14e04:	ldrh	r0, [r0, #48]	; 0x30
   14e08:	mov	r4, r1
   14e0c:	add	r5, r1, #64	; 0x40
   14e10:	movw	r1, #258	; 0x102
   14e14:	tst	r0, r1
   14e18:	beq	14e90 <__assert_fail@plt+0x3970>
   14e1c:	mov	r0, #24
   14e20:	bl	19e94 <__assert_fail@plt+0x8974>
   14e24:	mov	r8, #0
   14e28:	cmp	r0, #0
   14e2c:	beq	14eb0 <__assert_fail@plt+0x3990>
   14e30:	ldrd	r2, [r5]
   14e34:	mov	r7, r0
   14e38:	add	r0, r4, #160	; 0xa0
   14e3c:	stm	r7, {r2, r3}
   14e40:	add	r2, r7, #8
   14e44:	ldrd	r0, [r0]
   14e48:	stm	r2, {r0, r1, r4}
   14e4c:	mov	r1, r7
   14e50:	ldr	r0, [r6, #56]	; 0x38
   14e54:	bl	162d0 <__assert_fail@plt+0x4db0>
   14e58:	cmp	r0, r7
   14e5c:	beq	14e84 <__assert_fail@plt+0x3964>
   14e60:	mov	r5, r0
   14e64:	mov	r0, r7
   14e68:	bl	12ea4 <__assert_fail@plt+0x1984>
   14e6c:	cmp	r5, #0
   14e70:	beq	14eb0 <__assert_fail@plt+0x3990>
   14e74:	ldr	r0, [r5, #16]
   14e78:	mov	r1, #2
   14e7c:	strh	r1, [r4, #56]	; 0x38
   14e80:	str	r0, [r4]
   14e84:	mov	r8, #1
   14e88:	mov	r0, r8
   14e8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e90:	ldr	r0, [r6, #56]	; 0x38
   14e94:	mov	r1, r5
   14e98:	bl	19fb8 <__assert_fail@plt+0x8a98>
   14e9c:	cmp	r0, #0
   14ea0:	mov	r8, #1
   14ea4:	movne	r0, #2
   14ea8:	strhne	r0, [r4, #56]	; 0x38
   14eac:	strne	r4, [r4]
   14eb0:	mov	r0, r8
   14eb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14eb8:	push	{fp, lr}
   14ebc:	mov	fp, sp
   14ec0:	cmp	r2, #5
   14ec4:	bcc	14edc <__assert_fail@plt+0x39bc>
   14ec8:	bl	113d0 <__errno_location@plt>
   14ecc:	mov	r1, #22
   14ed0:	str	r1, [r0]
   14ed4:	mov	r0, #1
   14ed8:	pop	{fp, pc}
   14edc:	mov	r0, #0
   14ee0:	strh	r2, [r1, #60]	; 0x3c
   14ee4:	pop	{fp, pc}
   14ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eec:	add	fp, sp, #28
   14ef0:	sub	sp, sp, #4
   14ef4:	mov	r9, r0
   14ef8:	mvn	r0, #4096	; 0x1000
   14efc:	tst	r1, r0
   14f00:	beq	14f18 <__assert_fail@plt+0x39f8>
   14f04:	bl	113d0 <__errno_location@plt>
   14f08:	mov	r1, #22
   14f0c:	mov	r5, #0
   14f10:	str	r1, [r0]
   14f14:	b	15018 <__assert_fail@plt+0x3af8>
   14f18:	ldr	r8, [r9]
   14f1c:	mov	r7, r1
   14f20:	bl	113d0 <__errno_location@plt>
   14f24:	mov	r5, #0
   14f28:	mov	sl, r0
   14f2c:	str	r5, [r0]
   14f30:	ldrb	r0, [r9, #49]	; 0x31
   14f34:	tst	r0, #32
   14f38:	bne	15018 <__assert_fail@plt+0x3af8>
   14f3c:	ldrh	r0, [r8, #56]	; 0x38
   14f40:	cmp	r0, #1
   14f44:	beq	14f54 <__assert_fail@plt+0x3a34>
   14f48:	cmp	r0, #9
   14f4c:	ldreq	r5, [r8, #8]
   14f50:	b	15018 <__assert_fail@plt+0x3af8>
   14f54:	ldr	r6, [r9, #4]
   14f58:	cmp	r6, #0
   14f5c:	bne	14f78 <__assert_fail@plt+0x3a58>
   14f60:	b	14f94 <__assert_fail@plt+0x3a74>
   14f64:	mov	r0, r6
   14f68:	bl	12ea4 <__assert_fail@plt+0x1984>
   14f6c:	cmp	r4, #0
   14f70:	mov	r6, r4
   14f74:	beq	14f94 <__assert_fail@plt+0x3a74>
   14f78:	ldr	r1, [r6, #12]
   14f7c:	ldr	r4, [r6, #8]
   14f80:	cmp	r1, #0
   14f84:	beq	14f64 <__assert_fail@plt+0x3a44>
   14f88:	mov	r0, r1
   14f8c:	bl	114fc <closedir@plt>
   14f90:	b	14f64 <__assert_fail@plt+0x3a44>
   14f94:	mov	r4, #1
   14f98:	cmp	r7, #4096	; 0x1000
   14f9c:	bne	14fb0 <__assert_fail@plt+0x3a90>
   14fa0:	ldr	r0, [r9, #48]	; 0x30
   14fa4:	mov	r4, #2
   14fa8:	orr	r0, r0, #4096	; 0x1000
   14fac:	str	r0, [r9, #48]	; 0x30
   14fb0:	ldr	r0, [r8, #48]	; 0x30
   14fb4:	cmp	r0, #0
   14fb8:	bne	15004 <__assert_fail@plt+0x3ae4>
   14fbc:	ldr	r0, [r8, #24]
   14fc0:	ldrb	r0, [r0]
   14fc4:	cmp	r0, #47	; 0x2f
   14fc8:	beq	15004 <__assert_fail@plt+0x3ae4>
   14fcc:	ldr	r0, [r9, #48]	; 0x30
   14fd0:	tst	r0, #4
   14fd4:	bne	15004 <__assert_fail@plt+0x3ae4>
   14fd8:	mov	r1, #32768	; 0x8000
   14fdc:	tst	r0, #512	; 0x200
   14fe0:	and	r1, r1, r0, lsl #11
   14fe4:	orr	r1, r1, #18688	; 0x4900
   14fe8:	orr	r2, r1, #524288	; 0x80000
   14fec:	bne	15024 <__assert_fail@plt+0x3b04>
   14ff0:	movw	r0, #47349	; 0xb8f5
   14ff4:	mov	r1, r2
   14ff8:	movt	r0, #1
   14ffc:	bl	1a308 <__assert_fail@plt+0x8de8>
   15000:	b	15034 <__assert_fail@plt+0x3b14>
   15004:	mov	r0, r9
   15008:	mov	r1, r4
   1500c:	bl	142d8 <__assert_fail@plt+0x2db8>
   15010:	mov	r5, r0
   15014:	str	r0, [r9, #4]
   15018:	mov	r0, r5
   1501c:	sub	sp, fp, #28
   15020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15024:	ldr	r0, [r9, #32]
   15028:	movw	r1, #47349	; 0xb8f5
   1502c:	movt	r1, #1
   15030:	bl	166dc <__assert_fail@plt+0x51bc>
   15034:	mov	r8, r0
   15038:	cmn	r0, #1
   1503c:	ble	15080 <__assert_fail@plt+0x3b60>
   15040:	mov	r0, r9
   15044:	mov	r1, r4
   15048:	bl	142d8 <__assert_fail@plt+0x2db8>
   1504c:	str	r0, [r9, #4]
   15050:	ldrb	r0, [r9, #49]	; 0x31
   15054:	tst	r0, #2
   15058:	bne	1508c <__assert_fail@plt+0x3b6c>
   1505c:	mov	r0, r8
   15060:	bl	11490 <fchdir@plt>
   15064:	cmp	r0, #0
   15068:	beq	150bc <__assert_fail@plt+0x3b9c>
   1506c:	ldr	r4, [sl]
   15070:	mov	r0, r8
   15074:	bl	114e4 <close@plt>
   15078:	str	r4, [sl]
   1507c:	b	15018 <__assert_fail@plt+0x3af8>
   15080:	mov	r5, #0
   15084:	str	r5, [r9, #4]
   15088:	b	15018 <__assert_fail@plt+0x3af8>
   1508c:	ldr	r1, [r9, #32]
   15090:	cmp	r1, r8
   15094:	bne	150a0 <__assert_fail@plt+0x3b80>
   15098:	cmn	r1, #100	; 0x64
   1509c:	bne	150cc <__assert_fail@plt+0x3bac>
   150a0:	add	r0, r9, #60	; 0x3c
   150a4:	bl	165e4 <__assert_fail@plt+0x50c4>
   150a8:	cmp	r0, #0
   150ac:	bmi	150b4 <__assert_fail@plt+0x3b94>
   150b0:	bl	114e4 <close@plt>
   150b4:	str	r8, [r9, #32]
   150b8:	b	150c4 <__assert_fail@plt+0x3ba4>
   150bc:	mov	r0, r8
   150c0:	bl	114e4 <close@plt>
   150c4:	ldr	r5, [r9, #4]
   150c8:	b	15018 <__assert_fail@plt+0x3af8>
   150cc:	bl	114d8 <abort@plt>
   150d0:	push	{fp, lr}
   150d4:	mov	fp, sp
   150d8:	mov	r2, r1
   150dc:	ldrd	r0, [r0, #8]
   150e0:	mov	r3, #0
   150e4:	bl	1a638 <__assert_fail@plt+0x9118>
   150e8:	mov	r0, r2
   150ec:	pop	{fp, pc}
   150f0:	push	{r4, r5, fp, lr}
   150f4:	add	fp, sp, #8
   150f8:	ldrd	r2, [r1, #8]
   150fc:	ldrd	r4, [r0, #8]
   15100:	eor	r3, r5, r3
   15104:	eor	r2, r4, r2
   15108:	orrs	r2, r2, r3
   1510c:	mov	r2, #0
   15110:	bne	15130 <__assert_fail@plt+0x3c10>
   15114:	ldrd	r2, [r1]
   15118:	ldrd	r0, [r0]
   1511c:	eor	r1, r1, r3
   15120:	eor	r0, r0, r2
   15124:	orr	r0, r0, r1
   15128:	clz	r0, r0
   1512c:	lsr	r2, r0, #5
   15130:	mov	r0, r2
   15134:	pop	{r4, r5, fp, pc}
   15138:	push	{r4, r5, fp, lr}
   1513c:	add	fp, sp, #8
   15140:	ldr	r0, [r0]
   15144:	ldrd	r2, [r0, #160]	; 0xa0
   15148:	ldr	r0, [r1]
   1514c:	ldrd	r4, [r0, #160]	; 0xa0
   15150:	mov	r0, #0
   15154:	subs	r1, r4, r2
   15158:	sbcs	r1, r5, r3
   1515c:	movwcc	r0, #1
   15160:	subs	r1, r2, r4
   15164:	sbcs	r1, r3, r5
   15168:	subcc	r0, r0, #1
   1516c:	pop	{r4, r5, fp, pc}
   15170:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15174:	add	fp, sp, #24
   15178:	sub	sp, sp, #96	; 0x60
   1517c:	ldr	r7, [r0, #44]	; 0x2c
   15180:	mov	r4, r0
   15184:	mov	r5, #0
   15188:	ldrb	r0, [r7, #49]	; 0x31
   1518c:	tst	r0, #2
   15190:	beq	1528c <__assert_fail@plt+0x3d6c>
   15194:	ldr	r6, [r7, #52]	; 0x34
   15198:	mov	r9, r1
   1519c:	cmp	r6, #0
   151a0:	bne	151e0 <__assert_fail@plt+0x3cc0>
   151a4:	movw	r0, #11940	; 0x2ea4
   151a8:	movw	r2, #21144	; 0x5298
   151ac:	movw	r3, #21176	; 0x52b8
   151b0:	mov	r1, #0
   151b4:	mov	r8, #0
   151b8:	movt	r0, #1
   151bc:	movt	r2, #1
   151c0:	movt	r3, #1
   151c4:	str	r0, [sp]
   151c8:	mov	r0, #13
   151cc:	bl	1577c <__assert_fail@plt+0x425c>
   151d0:	mov	r6, r0
   151d4:	cmp	r0, #0
   151d8:	str	r0, [r7, #52]	; 0x34
   151dc:	beq	15218 <__assert_fail@plt+0x3cf8>
   151e0:	ldrd	r0, [r4, #64]	; 0x40
   151e4:	str	r1, [sp, #12]
   151e8:	str	r0, [sp, #8]
   151ec:	add	r1, sp, #8
   151f0:	mov	r0, r6
   151f4:	bl	154c8 <__assert_fail@plt+0x3fa8>
   151f8:	cmp	r0, #0
   151fc:	beq	15208 <__assert_fail@plt+0x3ce8>
   15200:	ldr	r5, [r0, #8]
   15204:	b	1528c <__assert_fail@plt+0x3d6c>
   15208:	mov	r8, #1
   1520c:	cmp	r9, #0
   15210:	bpl	15224 <__assert_fail@plt+0x3d04>
   15214:	b	1528c <__assert_fail@plt+0x3d6c>
   15218:	mov	r6, #0
   1521c:	cmp	r9, #0
   15220:	bmi	1528c <__assert_fail@plt+0x3d6c>
   15224:	add	r1, sp, #8
   15228:	mov	r0, r9
   1522c:	bl	111e4 <fstatfs64@plt>
   15230:	cmp	r0, #0
   15234:	bne	1528c <__assert_fail@plt+0x3d6c>
   15238:	cmp	r8, #0
   1523c:	beq	15288 <__assert_fail@plt+0x3d68>
   15240:	mov	r0, #16
   15244:	bl	19e94 <__assert_fail@plt+0x8974>
   15248:	cmp	r0, #0
   1524c:	beq	15288 <__assert_fail@plt+0x3d68>
   15250:	mov	r5, r0
   15254:	ldrd	r0, [r4, #64]	; 0x40
   15258:	ldr	r2, [sp, #8]
   1525c:	stm	r5, {r0, r1, r2}
   15260:	mov	r0, r6
   15264:	mov	r1, r5
   15268:	bl	162d0 <__assert_fail@plt+0x4db0>
   1526c:	cmp	r0, #0
   15270:	beq	15280 <__assert_fail@plt+0x3d60>
   15274:	cmp	r0, r5
   15278:	beq	15288 <__assert_fail@plt+0x3d68>
   1527c:	bl	114d8 <abort@plt>
   15280:	mov	r0, r5
   15284:	bl	12ea4 <__assert_fail@plt+0x1984>
   15288:	ldr	r5, [sp, #8]
   1528c:	mov	r0, r5
   15290:	sub	sp, fp, #24
   15294:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15298:	push	{fp, lr}
   1529c:	mov	fp, sp
   152a0:	mov	r2, r1
   152a4:	ldrd	r0, [r0]
   152a8:	mov	r3, #0
   152ac:	bl	1a638 <__assert_fail@plt+0x9118>
   152b0:	mov	r0, r2
   152b4:	pop	{fp, pc}
   152b8:	ldrd	r2, [r1]
   152bc:	ldrd	r0, [r0]
   152c0:	eor	r1, r1, r3
   152c4:	eor	r0, r0, r2
   152c8:	orr	r0, r0, r1
   152cc:	clz	r0, r0
   152d0:	lsr	r0, r0, #5
   152d4:	bx	lr
   152d8:	ldr	r0, [r0, #8]
   152dc:	bx	lr
   152e0:	ldr	r0, [r0, #12]
   152e4:	bx	lr
   152e8:	ldr	r0, [r0, #16]
   152ec:	bx	lr
   152f0:	ldm	r0, {r2, ip}
   152f4:	mov	r0, #0
   152f8:	cmp	r2, ip
   152fc:	bxcs	lr
   15300:	mov	r0, #0
   15304:	b	15314 <__assert_fail@plt+0x3df4>
   15308:	add	r2, r2, #8
   1530c:	cmp	r2, ip
   15310:	bcs	15344 <__assert_fail@plt+0x3e24>
   15314:	ldr	r1, [r2]
   15318:	cmp	r1, #0
   1531c:	beq	15308 <__assert_fail@plt+0x3de8>
   15320:	mov	r3, #0
   15324:	mov	r1, r2
   15328:	ldr	r1, [r1, #4]
   1532c:	add	r3, r3, #1
   15330:	cmp	r1, #0
   15334:	bne	15328 <__assert_fail@plt+0x3e08>
   15338:	cmp	r3, r0
   1533c:	movhi	r0, r3
   15340:	b	15308 <__assert_fail@plt+0x3de8>
   15344:	bx	lr
   15348:	push	{fp, lr}
   1534c:	mov	fp, sp
   15350:	ldm	r0, {r3, ip}
   15354:	mov	lr, #0
   15358:	mov	r1, #0
   1535c:	cmp	r3, ip
   15360:	bcs	153a4 <__assert_fail@plt+0x3e84>
   15364:	mov	r1, #0
   15368:	mov	lr, #0
   1536c:	b	1537c <__assert_fail@plt+0x3e5c>
   15370:	add	r3, r3, #8
   15374:	cmp	r3, ip
   15378:	bcs	153a4 <__assert_fail@plt+0x3e84>
   1537c:	ldr	r2, [r3]
   15380:	cmp	r2, #0
   15384:	beq	15370 <__assert_fail@plt+0x3e50>
   15388:	mov	r2, r3
   1538c:	ldr	r2, [r2, #4]
   15390:	add	r1, r1, #1
   15394:	cmp	r2, #0
   15398:	bne	1538c <__assert_fail@plt+0x3e6c>
   1539c:	add	lr, lr, #1
   153a0:	b	15370 <__assert_fail@plt+0x3e50>
   153a4:	ldr	r2, [r0, #12]
   153a8:	cmp	lr, r2
   153ac:	bne	153c4 <__assert_fail@plt+0x3ea4>
   153b0:	ldr	r2, [r0, #16]
   153b4:	mov	r0, #1
   153b8:	cmp	r1, r2
   153bc:	movne	r0, #0
   153c0:	pop	{fp, pc}
   153c4:	mov	r0, #0
   153c8:	pop	{fp, pc}
   153cc:	nop	{0}
   153d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   153d4:	add	fp, sp, #24
   153d8:	sub	sp, sp, #8
   153dc:	ldr	r6, [r0]
   153e0:	ldmib	r0, {r2, r7, r8}
   153e4:	ldr	r3, [r0, #16]
   153e8:	mov	r4, r1
   153ec:	mov	r5, #0
   153f0:	cmp	r6, r2
   153f4:	bcs	1543c <__assert_fail@plt+0x3f1c>
   153f8:	mov	r5, #0
   153fc:	b	1540c <__assert_fail@plt+0x3eec>
   15400:	add	r6, r6, #8
   15404:	cmp	r6, r2
   15408:	bcs	1543c <__assert_fail@plt+0x3f1c>
   1540c:	ldr	r0, [r6]
   15410:	cmp	r0, #0
   15414:	beq	15400 <__assert_fail@plt+0x3ee0>
   15418:	mov	r0, #0
   1541c:	mov	r1, r6
   15420:	ldr	r1, [r1, #4]
   15424:	add	r0, r0, #1
   15428:	cmp	r1, #0
   1542c:	bne	15420 <__assert_fail@plt+0x3f00>
   15430:	cmp	r0, r5
   15434:	movhi	r5, r0
   15438:	b	15400 <__assert_fail@plt+0x3ee0>
   1543c:	movw	r2, #47400	; 0xb928
   15440:	mov	r0, r4
   15444:	mov	r1, #1
   15448:	movt	r2, #1
   1544c:	bl	1140c <__fprintf_chk@plt>
   15450:	movw	r2, #47424	; 0xb940
   15454:	mov	r0, r4
   15458:	mov	r1, #1
   1545c:	mov	r3, r7
   15460:	movt	r2, #1
   15464:	bl	1140c <__fprintf_chk@plt>
   15468:	vmov	s0, r8
   1546c:	vldr	d16, [pc, #76]	; 154c0 <__assert_fail@plt+0x3fa0>
   15470:	movw	r2, #47448	; 0xb958
   15474:	mov	r0, r4
   15478:	mov	r1, #1
   1547c:	mov	r3, r8
   15480:	movt	r2, #1
   15484:	vcvt.f64.u32	d17, s0
   15488:	vmov	s0, r7
   1548c:	vcvt.f64.u32	d18, s0
   15490:	vmul.f64	d16, d17, d16
   15494:	vdiv.f64	d16, d16, d18
   15498:	vstr	d16, [sp]
   1549c:	bl	1140c <__fprintf_chk@plt>
   154a0:	movw	r2, #47481	; 0xb979
   154a4:	mov	r0, r4
   154a8:	mov	r1, #1
   154ac:	mov	r3, r5
   154b0:	movt	r2, #1
   154b4:	sub	sp, fp, #24
   154b8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   154bc:	b	1140c <__fprintf_chk@plt>
   154c0:	andeq	r0, r0, r0
   154c4:	subsmi	r0, r9, r0
   154c8:	push	{r4, r5, r6, r7, fp, lr}
   154cc:	add	fp, sp, #16
   154d0:	mov	r4, r1
   154d4:	ldr	r1, [r0, #8]
   154d8:	ldr	r2, [r0, #24]
   154dc:	mov	r5, r0
   154e0:	mov	r0, r4
   154e4:	blx	r2
   154e8:	ldr	r1, [r5, #8]
   154ec:	cmp	r0, r1
   154f0:	bcs	15558 <__assert_fail@plt+0x4038>
   154f4:	ldr	r7, [r5]
   154f8:	mov	r6, #0
   154fc:	ldr	r1, [r7, r0, lsl #3]!
   15500:	cmp	r1, #0
   15504:	cmpne	r7, #0
   15508:	bne	15538 <__assert_fail@plt+0x4018>
   1550c:	mov	r0, r6
   15510:	pop	{r4, r5, r6, r7, fp, pc}
   15514:	ldr	r2, [r5, #28]
   15518:	mov	r0, r4
   1551c:	blx	r2
   15520:	cmp	r0, #0
   15524:	bne	1554c <__assert_fail@plt+0x402c>
   15528:	ldr	r7, [r7, #4]
   1552c:	cmp	r7, #0
   15530:	beq	1550c <__assert_fail@plt+0x3fec>
   15534:	ldr	r1, [r7]
   15538:	cmp	r1, r4
   1553c:	bne	15514 <__assert_fail@plt+0x3ff4>
   15540:	mov	r6, r4
   15544:	mov	r0, r6
   15548:	pop	{r4, r5, r6, r7, fp, pc}
   1554c:	ldr	r6, [r7]
   15550:	mov	r0, r6
   15554:	pop	{r4, r5, r6, r7, fp, pc}
   15558:	bl	114d8 <abort@plt>
   1555c:	push	{fp, lr}
   15560:	mov	fp, sp
   15564:	ldr	r1, [r0, #16]
   15568:	cmp	r1, #0
   1556c:	beq	1558c <__assert_fail@plt+0x406c>
   15570:	ldm	r0, {r1, r2}
   15574:	cmp	r1, r2
   15578:	bcs	15594 <__assert_fail@plt+0x4074>
   1557c:	ldr	r0, [r1], #8
   15580:	cmp	r0, #0
   15584:	beq	15574 <__assert_fail@plt+0x4054>
   15588:	pop	{fp, pc}
   1558c:	mov	r0, #0
   15590:	pop	{fp, pc}
   15594:	bl	114d8 <abort@plt>
   15598:	push	{r4, r5, fp, lr}
   1559c:	add	fp, sp, #8
   155a0:	mov	r5, r1
   155a4:	ldr	r1, [r0, #8]
   155a8:	ldr	r2, [r0, #24]
   155ac:	mov	r4, r0
   155b0:	mov	r0, r5
   155b4:	blx	r2
   155b8:	ldr	r1, [r4, #8]
   155bc:	cmp	r0, r1
   155c0:	bcs	15624 <__assert_fail@plt+0x4104>
   155c4:	ldr	r1, [r4]
   155c8:	add	r2, r1, r0, lsl #3
   155cc:	ldr	r3, [r2]
   155d0:	ldr	r2, [r2, #4]
   155d4:	cmp	r3, r5
   155d8:	beq	155e8 <__assert_fail@plt+0x40c8>
   155dc:	cmp	r2, #0
   155e0:	bne	155cc <__assert_fail@plt+0x40ac>
   155e4:	b	155f8 <__assert_fail@plt+0x40d8>
   155e8:	cmp	r2, #0
   155ec:	beq	155f8 <__assert_fail@plt+0x40d8>
   155f0:	ldr	r0, [r2]
   155f4:	pop	{r4, r5, fp, pc}
   155f8:	ldr	r2, [r4, #4]
   155fc:	add	r0, r1, r0, lsl #3
   15600:	add	r1, r0, #8
   15604:	cmp	r1, r2
   15608:	bcs	1561c <__assert_fail@plt+0x40fc>
   1560c:	ldr	r0, [r1], #8
   15610:	cmp	r0, #0
   15614:	beq	15604 <__assert_fail@plt+0x40e4>
   15618:	pop	{r4, r5, fp, pc}
   1561c:	mov	r0, #0
   15620:	pop	{r4, r5, fp, pc}
   15624:	bl	114d8 <abort@plt>
   15628:	push	{r4, r5, fp, lr}
   1562c:	add	fp, sp, #8
   15630:	ldm	r0, {r5, lr}
   15634:	mov	ip, r0
   15638:	mov	r0, #0
   1563c:	cmp	r5, lr
   15640:	popcs	{r4, r5, fp, pc}
   15644:	mov	r0, #0
   15648:	b	1565c <__assert_fail@plt+0x413c>
   1564c:	ldr	lr, [ip, #4]
   15650:	add	r5, r5, #8
   15654:	cmp	r5, lr
   15658:	bcs	15694 <__assert_fail@plt+0x4174>
   1565c:	ldr	r3, [r5]
   15660:	cmp	r3, #0
   15664:	cmpne	r5, #0
   15668:	beq	15650 <__assert_fail@plt+0x4130>
   1566c:	mov	r3, r5
   15670:	cmp	r0, r2
   15674:	bcs	15694 <__assert_fail@plt+0x4174>
   15678:	ldr	r4, [r3]
   1567c:	str	r4, [r1, r0, lsl #2]
   15680:	add	r0, r0, #1
   15684:	ldr	r3, [r3, #4]
   15688:	cmp	r3, #0
   1568c:	bne	15670 <__assert_fail@plt+0x4150>
   15690:	b	1564c <__assert_fail@plt+0x412c>
   15694:	pop	{r4, r5, fp, pc}
   15698:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1569c:	add	fp, sp, #24
   156a0:	mov	r5, r1
   156a4:	ldr	r4, [r0]
   156a8:	ldr	r1, [r0, #4]
   156ac:	mov	r6, #0
   156b0:	cmp	r4, r1
   156b4:	bcs	15720 <__assert_fail@plt+0x4200>
   156b8:	mov	r9, r2
   156bc:	mov	r8, r0
   156c0:	mov	r6, #0
   156c4:	b	156d8 <__assert_fail@plt+0x41b8>
   156c8:	ldr	r1, [r8, #4]
   156cc:	add	r4, r4, #8
   156d0:	cmp	r4, r1
   156d4:	bcs	15720 <__assert_fail@plt+0x4200>
   156d8:	ldr	r0, [r4]
   156dc:	cmp	r0, #0
   156e0:	cmpne	r4, #0
   156e4:	beq	156cc <__assert_fail@plt+0x41ac>
   156e8:	mov	r1, r9
   156ec:	blx	r5
   156f0:	cmp	r0, #0
   156f4:	beq	15720 <__assert_fail@plt+0x4200>
   156f8:	mov	r7, r4
   156fc:	ldr	r7, [r7, #4]
   15700:	add	r6, r6, #1
   15704:	cmp	r7, #0
   15708:	beq	156c8 <__assert_fail@plt+0x41a8>
   1570c:	ldr	r0, [r7]
   15710:	mov	r1, r9
   15714:	blx	r5
   15718:	cmp	r0, #0
   1571c:	bne	156fc <__assert_fail@plt+0x41dc>
   15720:	mov	r0, r6
   15724:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15728:	ldrb	r2, [r0]
   1572c:	cmp	r2, #0
   15730:	moveq	r0, #0
   15734:	bxeq	lr
   15738:	add	r3, r0, #1
   1573c:	mov	r0, #0
   15740:	rsb	r0, r0, r0, lsl #5
   15744:	uxtab	r0, r0, r2
   15748:	udiv	r2, r0, r1
   1574c:	mls	r0, r2, r1, r0
   15750:	ldrb	r2, [r3], #1
   15754:	cmp	r2, #0
   15758:	bne	15740 <__assert_fail@plt+0x4220>
   1575c:	bx	lr
   15760:	movw	r1, #47512	; 0xb998
   15764:	movt	r1, #1
   15768:	vld1.32	{d16-d17}, [r1]!
   1576c:	ldr	r1, [r1]
   15770:	vst1.32	{d16-d17}, [r0]!
   15774:	str	r1, [r0]
   15778:	bx	lr
   1577c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15780:	add	fp, sp, #24
   15784:	movw	r9, #22948	; 0x59a4
   15788:	cmp	r3, #0
   1578c:	movw	r5, #22928	; 0x5990
   15790:	mov	r6, r0
   15794:	mov	r0, #40	; 0x28
   15798:	mov	r7, r1
   1579c:	movt	r9, #1
   157a0:	movne	r9, r3
   157a4:	cmp	r2, #0
   157a8:	movt	r5, #1
   157ac:	movne	r5, r2
   157b0:	bl	19e94 <__assert_fail@plt+0x8974>
   157b4:	mov	r8, #0
   157b8:	cmp	r0, #0
   157bc:	beq	15978 <__assert_fail@plt+0x4458>
   157c0:	mov	r4, r0
   157c4:	movw	r0, #47512	; 0xb998
   157c8:	cmp	r7, #0
   157cc:	movt	r0, #1
   157d0:	moveq	r7, r0
   157d4:	cmp	r7, r0
   157d8:	str	r7, [r4, #20]
   157dc:	beq	15858 <__assert_fail@plt+0x4338>
   157e0:	vldr	s2, [pc, #408]	; 15980 <__assert_fail@plt+0x4460>
   157e4:	vldr	s0, [r7, #8]
   157e8:	vcmpe.f32	s0, s2
   157ec:	vmrs	APSR_nzcv, fpscr
   157f0:	ble	15904 <__assert_fail@plt+0x43e4>
   157f4:	vldr	s4, [pc, #392]	; 15984 <__assert_fail@plt+0x4464>
   157f8:	vcmpe.f32	s0, s4
   157fc:	vmrs	APSR_nzcv, fpscr
   15800:	bpl	15904 <__assert_fail@plt+0x43e4>
   15804:	vldr	s4, [pc, #380]	; 15988 <__assert_fail@plt+0x4468>
   15808:	vldr	s6, [r7, #12]
   1580c:	vcmpe.f32	s6, s4
   15810:	vmrs	APSR_nzcv, fpscr
   15814:	ble	15904 <__assert_fail@plt+0x43e4>
   15818:	vldr	s4, [r7]
   1581c:	vcmpe.f32	s4, #0.0
   15820:	vmrs	APSR_nzcv, fpscr
   15824:	blt	15904 <__assert_fail@plt+0x43e4>
   15828:	vadd.f32	s2, s4, s2
   1582c:	vcmpe.f32	s2, s0
   15830:	vmrs	APSR_nzcv, fpscr
   15834:	bpl	15904 <__assert_fail@plt+0x43e4>
   15838:	vldr	s0, [r7, #4]
   1583c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15840:	vcmpe.f32	s0, s4
   15844:	vmrs	APSR_nzcv, fpscr
   15848:	bhi	15904 <__assert_fail@plt+0x43e4>
   1584c:	vcmpe.f32	s2, s0
   15850:	vmrs	APSR_nzcv, fpscr
   15854:	bpl	15904 <__assert_fail@plt+0x43e4>
   15858:	ldrb	r0, [r7, #16]
   1585c:	cmp	r0, #0
   15860:	bne	1588c <__assert_fail@plt+0x436c>
   15864:	vmov	s2, r6
   15868:	vldr	s0, [r7, #8]
   1586c:	vldr	s4, [pc, #280]	; 1598c <__assert_fail@plt+0x446c>
   15870:	vcvt.f32.u32	s2, s2
   15874:	vdiv.f32	s2, s2, s0
   15878:	vcvt.u32.f32	s0, s2
   1587c:	vcmpe.f32	s2, s4
   15880:	vmrs	APSR_nzcv, fpscr
   15884:	bge	15914 <__assert_fail@plt+0x43f4>
   15888:	vmov	r6, s0
   1588c:	cmp	r6, #10
   15890:	movls	r6, #10
   15894:	orr	r0, r6, #1
   15898:	cmn	r0, #1
   1589c:	beq	15914 <__assert_fail@plt+0x43f4>
   158a0:	ldr	r6, [fp, #8]
   158a4:	mov	r1, #3
   158a8:	cmp	r0, #10
   158ac:	bcc	158e4 <__assert_fail@plt+0x43c4>
   158b0:	mov	r1, #3
   158b4:	mov	r3, #9
   158b8:	mov	r2, #12
   158bc:	udiv	r7, r0, r1
   158c0:	mls	r7, r7, r1, r0
   158c4:	cmp	r7, #0
   158c8:	beq	158e4 <__assert_fail@plt+0x43c4>
   158cc:	add	r3, r3, r2
   158d0:	add	r2, r2, #8
   158d4:	add	r1, r1, #2
   158d8:	add	r3, r3, #4
   158dc:	cmp	r3, r0
   158e0:	bcc	158bc <__assert_fail@plt+0x439c>
   158e4:	udiv	r2, r0, r1
   158e8:	mls	r1, r2, r1, r0
   158ec:	cmp	r1, #0
   158f0:	bne	1590c <__assert_fail@plt+0x43ec>
   158f4:	add	r0, r0, #2
   158f8:	cmn	r0, #1
   158fc:	bne	158a4 <__assert_fail@plt+0x4384>
   15900:	b	15914 <__assert_fail@plt+0x43f4>
   15904:	str	r0, [r4, #20]
   15908:	b	1591c <__assert_fail@plt+0x43fc>
   1590c:	cmp	r0, #536870912	; 0x20000000
   15910:	bcc	1592c <__assert_fail@plt+0x440c>
   15914:	mov	r0, #0
   15918:	str	r0, [r4, #8]
   1591c:	mov	r0, r4
   15920:	bl	12ea4 <__assert_fail@plt+0x1984>
   15924:	mov	r0, r8
   15928:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1592c:	cmp	r0, #0
   15930:	str	r0, [r4, #8]
   15934:	beq	1591c <__assert_fail@plt+0x43fc>
   15938:	mov	r1, #8
   1593c:	bl	19e40 <__assert_fail@plt+0x8920>
   15940:	cmp	r0, #0
   15944:	str	r0, [r4]
   15948:	beq	1591c <__assert_fail@plt+0x43fc>
   1594c:	mov	r1, #0
   15950:	str	r5, [r4, #24]
   15954:	str	r9, [r4, #28]
   15958:	str	r6, [r4, #32]
   1595c:	mov	r8, r4
   15960:	str	r1, [r4, #36]	; 0x24
   15964:	str	r1, [r4, #12]
   15968:	str	r1, [r4, #16]
   1596c:	ldr	r1, [r4, #8]
   15970:	add	r0, r0, r1, lsl #3
   15974:	str	r0, [r4, #4]
   15978:	mov	r0, r8
   1597c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15980:	stclcc	12, cr12, [ip, #820]	; 0x334
   15984:	svccc	0x00666666
   15988:	svccc	0x008ccccd
   1598c:	svcmi	0x00800000
   15990:	ror	r2, r0, #3
   15994:	udiv	r2, r2, r1
   15998:	mul	r1, r2, r1
   1599c:	rsb	r0, r1, r0, ror #3
   159a0:	bx	lr
   159a4:	sub	r0, r0, r1
   159a8:	clz	r0, r0
   159ac:	lsr	r0, r0, #5
   159b0:	bx	lr
   159b4:	push	{r4, r5, r6, r7, fp, lr}
   159b8:	add	fp, sp, #16
   159bc:	mov	r4, r0
   159c0:	ldr	r5, [r0]
   159c4:	ldr	r0, [r0, #4]
   159c8:	cmp	r5, r0
   159cc:	bcs	15a70 <__assert_fail@plt+0x4550>
   159d0:	mov	r6, #0
   159d4:	b	159f0 <__assert_fail@plt+0x44d0>
   159d8:	str	r6, [r5]
   159dc:	str	r6, [r5, #4]
   159e0:	ldr	r0, [r4, #4]
   159e4:	add	r5, r5, #8
   159e8:	cmp	r5, r0
   159ec:	bcs	15a70 <__assert_fail@plt+0x4550>
   159f0:	ldr	r1, [r5]
   159f4:	cmp	r1, #0
   159f8:	beq	159e4 <__assert_fail@plt+0x44c4>
   159fc:	ldr	r1, [r4, #32]
   15a00:	ldr	r7, [r5, #4]
   15a04:	cmp	r1, #0
   15a08:	mov	r0, r1
   15a0c:	movwne	r0, #1
   15a10:	cmp	r7, #0
   15a14:	bne	15a58 <__assert_fail@plt+0x4538>
   15a18:	cmp	r0, #0
   15a1c:	beq	159d8 <__assert_fail@plt+0x44b8>
   15a20:	ldr	r0, [r5]
   15a24:	blx	r1
   15a28:	b	159d8 <__assert_fail@plt+0x44b8>
   15a2c:	str	r6, [r7]
   15a30:	cmp	r1, #0
   15a34:	ldr	r2, [r7, #4]
   15a38:	ldr	r0, [r4, #36]	; 0x24
   15a3c:	str	r0, [r7, #4]
   15a40:	mov	r0, r1
   15a44:	str	r7, [r4, #36]	; 0x24
   15a48:	movwne	r0, #1
   15a4c:	cmp	r2, #0
   15a50:	mov	r7, r2
   15a54:	beq	15a18 <__assert_fail@plt+0x44f8>
   15a58:	tst	r0, #1
   15a5c:	beq	15a2c <__assert_fail@plt+0x450c>
   15a60:	ldr	r0, [r7]
   15a64:	blx	r1
   15a68:	ldr	r1, [r4, #32]
   15a6c:	b	15a2c <__assert_fail@plt+0x450c>
   15a70:	mov	r0, #0
   15a74:	str	r0, [r4, #12]
   15a78:	str	r0, [r4, #16]
   15a7c:	pop	{r4, r5, r6, r7, fp, pc}
   15a80:	push	{r4, r5, r6, sl, fp, lr}
   15a84:	add	fp, sp, #16
   15a88:	mov	r4, r0
   15a8c:	ldr	r0, [r0, #32]
   15a90:	cmp	r0, #0
   15a94:	beq	15b08 <__assert_fail@plt+0x45e8>
   15a98:	ldr	r0, [r4, #16]
   15a9c:	cmp	r0, #0
   15aa0:	beq	15b08 <__assert_fail@plt+0x45e8>
   15aa4:	ldr	r5, [r4]
   15aa8:	ldr	r1, [r4, #4]
   15aac:	cmp	r5, r1
   15ab0:	bcc	15ac8 <__assert_fail@plt+0x45a8>
   15ab4:	b	15b08 <__assert_fail@plt+0x45e8>
   15ab8:	ldr	r1, [r4, #4]
   15abc:	add	r5, r5, #8
   15ac0:	cmp	r5, r1
   15ac4:	bcs	15b08 <__assert_fail@plt+0x45e8>
   15ac8:	ldr	r0, [r5]
   15acc:	cmp	r0, #0
   15ad0:	cmpne	r5, #0
   15ad4:	beq	15abc <__assert_fail@plt+0x459c>
   15ad8:	ldr	r1, [r4, #32]
   15adc:	blx	r1
   15ae0:	ldr	r6, [r5, #4]
   15ae4:	cmp	r6, #0
   15ae8:	beq	15ab8 <__assert_fail@plt+0x4598>
   15aec:	ldr	r1, [r4, #32]
   15af0:	ldr	r0, [r6]
   15af4:	blx	r1
   15af8:	ldr	r6, [r6, #4]
   15afc:	cmp	r6, #0
   15b00:	bne	15aec <__assert_fail@plt+0x45cc>
   15b04:	b	15ab8 <__assert_fail@plt+0x4598>
   15b08:	ldr	r5, [r4]
   15b0c:	ldr	r1, [r4, #4]
   15b10:	cmp	r5, r1
   15b14:	bcc	15b28 <__assert_fail@plt+0x4608>
   15b18:	b	15b50 <__assert_fail@plt+0x4630>
   15b1c:	add	r5, r5, #8
   15b20:	cmp	r5, r1
   15b24:	bcs	15b50 <__assert_fail@plt+0x4630>
   15b28:	ldr	r0, [r5, #4]
   15b2c:	cmp	r0, #0
   15b30:	beq	15b1c <__assert_fail@plt+0x45fc>
   15b34:	ldr	r6, [r0, #4]
   15b38:	bl	12ea4 <__assert_fail@plt+0x1984>
   15b3c:	cmp	r6, #0
   15b40:	mov	r0, r6
   15b44:	bne	15b34 <__assert_fail@plt+0x4614>
   15b48:	ldr	r1, [r4, #4]
   15b4c:	b	15b1c <__assert_fail@plt+0x45fc>
   15b50:	ldr	r0, [r4, #36]	; 0x24
   15b54:	cmp	r0, #0
   15b58:	beq	15b70 <__assert_fail@plt+0x4650>
   15b5c:	ldr	r5, [r0, #4]
   15b60:	bl	12ea4 <__assert_fail@plt+0x1984>
   15b64:	cmp	r5, #0
   15b68:	mov	r0, r5
   15b6c:	bne	15b5c <__assert_fail@plt+0x463c>
   15b70:	ldr	r0, [r4]
   15b74:	bl	12ea4 <__assert_fail@plt+0x1984>
   15b78:	mov	r0, r4
   15b7c:	pop	{r4, r5, r6, sl, fp, lr}
   15b80:	b	12ea4 <__assert_fail@plt+0x1984>
   15b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b88:	add	fp, sp, #28
   15b8c:	sub	sp, sp, #44	; 0x2c
   15b90:	mov	r7, r0
   15b94:	mov	r4, r0
   15b98:	ldr	r0, [r7, #20]!
   15b9c:	ldrb	r2, [r0, #16]
   15ba0:	cmp	r2, #0
   15ba4:	bne	15bd4 <__assert_fail@plt+0x46b4>
   15ba8:	vmov	s2, r1
   15bac:	vldr	s0, [r0, #8]
   15bb0:	vldr	s4, [pc, #564]	; 15dec <__assert_fail@plt+0x48cc>
   15bb4:	mov	r5, #0
   15bb8:	vcvt.f32.u32	s2, s2
   15bbc:	vdiv.f32	s2, s2, s0
   15bc0:	vcvt.u32.f32	s0, s2
   15bc4:	vcmpe.f32	s2, s4
   15bc8:	vmrs	APSR_nzcv, fpscr
   15bcc:	bge	15ddc <__assert_fail@plt+0x48bc>
   15bd0:	vmov	r1, s0
   15bd4:	cmp	r1, #10
   15bd8:	mov	r5, #0
   15bdc:	movls	r1, #10
   15be0:	orr	r6, r1, #1
   15be4:	cmn	r6, #1
   15be8:	beq	15ddc <__assert_fail@plt+0x48bc>
   15bec:	mov	r0, #3
   15bf0:	cmp	r6, #10
   15bf4:	bcc	15c2c <__assert_fail@plt+0x470c>
   15bf8:	mov	r0, #3
   15bfc:	mov	r2, #9
   15c00:	mov	r1, #12
   15c04:	udiv	r3, r6, r0
   15c08:	mls	r3, r3, r0, r6
   15c0c:	cmp	r3, #0
   15c10:	beq	15c2c <__assert_fail@plt+0x470c>
   15c14:	add	r2, r2, r1
   15c18:	add	r1, r1, #8
   15c1c:	add	r0, r0, #2
   15c20:	add	r2, r2, #4
   15c24:	cmp	r2, r6
   15c28:	bcc	15c04 <__assert_fail@plt+0x46e4>
   15c2c:	udiv	r1, r6, r0
   15c30:	mls	r0, r1, r0, r6
   15c34:	cmp	r0, #0
   15c38:	bne	15c4c <__assert_fail@plt+0x472c>
   15c3c:	add	r6, r6, #2
   15c40:	cmn	r6, #1
   15c44:	bne	15bec <__assert_fail@plt+0x46cc>
   15c48:	b	15ddc <__assert_fail@plt+0x48bc>
   15c4c:	sub	r0, r6, #1
   15c50:	cmn	r0, #-536870910	; 0xe0000002
   15c54:	bhi	15ddc <__assert_fail@plt+0x48bc>
   15c58:	ldr	r0, [r4, #8]
   15c5c:	cmp	r6, r0
   15c60:	bne	15c6c <__assert_fail@plt+0x474c>
   15c64:	mov	r5, #1
   15c68:	b	15ddc <__assert_fail@plt+0x48bc>
   15c6c:	mov	r0, r6
   15c70:	mov	r1, #8
   15c74:	bl	19e40 <__assert_fail@plt+0x8920>
   15c78:	cmp	r0, #0
   15c7c:	str	r0, [sp, #4]
   15c80:	beq	15ddc <__assert_fail@plt+0x48bc>
   15c84:	add	r0, r0, r6, lsl #3
   15c88:	mov	r1, #0
   15c8c:	add	r5, sp, #4
   15c90:	mov	sl, r4
   15c94:	mov	r2, #0
   15c98:	str	r1, [sp, #20]
   15c9c:	str	r1, [sp, #16]
   15ca0:	str	r6, [sp, #12]
   15ca4:	mov	r1, r4
   15ca8:	str	r0, [sp, #8]
   15cac:	add	r0, r5, #20
   15cb0:	vld1.32	{d16-d17}, [r7]
   15cb4:	vst1.32	{d16-d17}, [r0]
   15cb8:	ldr	r0, [sl, #36]!	; 0x24
   15cbc:	str	r0, [sp, #40]	; 0x28
   15cc0:	mov	r0, r5
   15cc4:	bl	15df0 <__assert_fail@plt+0x48d0>
   15cc8:	cmp	r0, #0
   15ccc:	beq	15cf4 <__assert_fail@plt+0x47d4>
   15cd0:	ldr	r0, [r4]
   15cd4:	bl	12ea4 <__assert_fail@plt+0x1984>
   15cd8:	mov	r0, #36	; 0x24
   15cdc:	vld1.32	{d16-d17}, [r5], r0
   15ce0:	vst1.32	{d16-d17}, [r4], r0
   15ce4:	ldr	r0, [r5]
   15ce8:	mov	r5, #1
   15cec:	str	r0, [r4]
   15cf0:	b	15ddc <__assert_fail@plt+0x48bc>
   15cf4:	ldr	r0, [sp, #40]	; 0x28
   15cf8:	str	r0, [sl]
   15cfc:	ldr	r0, [sp, #8]
   15d00:	ldr	r8, [sp, #4]
   15d04:	cmp	r8, r0
   15d08:	str	r0, [sp]
   15d0c:	bcs	15db8 <__assert_fail@plt+0x4898>
   15d10:	mov	r9, #0
   15d14:	b	15d2c <__assert_fail@plt+0x480c>
   15d18:	str	r9, [r8, #4]
   15d1c:	ldr	r0, [sp]
   15d20:	add	r8, r8, #8
   15d24:	cmp	r8, r0
   15d28:	bcs	15db8 <__assert_fail@plt+0x4898>
   15d2c:	ldr	r0, [r8]
   15d30:	cmp	r0, #0
   15d34:	beq	15d1c <__assert_fail@plt+0x47fc>
   15d38:	ldr	r6, [r8, #4]
   15d3c:	cmp	r6, #0
   15d40:	beq	15d18 <__assert_fail@plt+0x47f8>
   15d44:	ldr	r1, [r4, #8]
   15d48:	b	15d6c <__assert_fail@plt+0x484c>
   15d4c:	add	r0, r3, r0, lsl #3
   15d50:	add	r0, r0, #4
   15d54:	ldr	r3, [r0]
   15d58:	cmp	r2, #0
   15d5c:	str	r3, [r6, #4]
   15d60:	str	r6, [r0]
   15d64:	mov	r6, r2
   15d68:	beq	15d18 <__assert_fail@plt+0x47f8>
   15d6c:	ldr	r5, [r6]
   15d70:	ldr	r2, [r4, #24]
   15d74:	mov	r0, r5
   15d78:	blx	r2
   15d7c:	ldr	r1, [r4, #8]
   15d80:	cmp	r0, r1
   15d84:	bcs	15de8 <__assert_fail@plt+0x48c8>
   15d88:	ldr	r3, [r4]
   15d8c:	ldr	r2, [r6, #4]
   15d90:	ldr	r7, [r3, r0, lsl #3]
   15d94:	cmp	r7, #0
   15d98:	bne	15d4c <__assert_fail@plt+0x482c>
   15d9c:	str	r5, [r3, r0, lsl #3]
   15da0:	ldr	r0, [r4, #12]
   15da4:	add	r0, r0, #1
   15da8:	str	r0, [r4, #12]
   15dac:	mov	r0, sl
   15db0:	str	r9, [r6]
   15db4:	b	15d54 <__assert_fail@plt+0x4834>
   15db8:	add	r1, sp, #4
   15dbc:	mov	r0, r4
   15dc0:	mov	r2, #0
   15dc4:	mov	r5, #0
   15dc8:	bl	15df0 <__assert_fail@plt+0x48d0>
   15dcc:	cmp	r0, #0
   15dd0:	beq	15de8 <__assert_fail@plt+0x48c8>
   15dd4:	ldr	r0, [sp, #4]
   15dd8:	bl	12ea4 <__assert_fail@plt+0x1984>
   15ddc:	mov	r0, r5
   15de0:	sub	sp, fp, #28
   15de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15de8:	bl	114d8 <abort@plt>
   15dec:	svcmi	0x00800000
   15df0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15df4:	add	fp, sp, #28
   15df8:	sub	sp, sp, #12
   15dfc:	ldr	sl, [r1]
   15e00:	str	r1, [sp, #8]
   15e04:	ldr	r1, [r1, #4]
   15e08:	mov	r7, r0
   15e0c:	mov	r0, #1
   15e10:	str	r2, [sp, #4]
   15e14:	cmp	sl, r1
   15e18:	bcs	15f74 <__assert_fail@plt+0x4a54>
   15e1c:	add	r8, r7, #36	; 0x24
   15e20:	mov	r9, #0
   15e24:	b	15e60 <__assert_fail@plt+0x4940>
   15e28:	str	r4, [r6, r5, lsl #3]
   15e2c:	ldr	r0, [r7, #12]
   15e30:	add	r0, r0, #1
   15e34:	str	r0, [r7, #12]
   15e38:	ldr	r1, [sp, #8]
   15e3c:	str	r9, [sl]
   15e40:	ldr	r0, [r1, #12]
   15e44:	sub	r0, r0, #1
   15e48:	str	r0, [r1, #12]
   15e4c:	ldr	r0, [sp, #8]
   15e50:	add	sl, sl, #8
   15e54:	ldr	r0, [r0, #4]
   15e58:	cmp	sl, r0
   15e5c:	bcs	15f70 <__assert_fail@plt+0x4a50>
   15e60:	ldr	r4, [sl]
   15e64:	cmp	r4, #0
   15e68:	beq	15e4c <__assert_fail@plt+0x492c>
   15e6c:	ldr	r5, [sl, #4]
   15e70:	cmp	r5, #0
   15e74:	beq	15ef0 <__assert_fail@plt+0x49d0>
   15e78:	ldr	r1, [r7, #8]
   15e7c:	b	15eb0 <__assert_fail@plt+0x4990>
   15e80:	str	r4, [r3, r0, lsl #3]
   15e84:	ldr	r0, [r7, #12]
   15e88:	add	r0, r0, #1
   15e8c:	str	r0, [r7, #12]
   15e90:	mov	r0, r8
   15e94:	str	r9, [r5]
   15e98:	ldr	r3, [r0]
   15e9c:	cmp	r2, #0
   15ea0:	str	r3, [r5, #4]
   15ea4:	str	r5, [r0]
   15ea8:	mov	r5, r2
   15eac:	beq	15eec <__assert_fail@plt+0x49cc>
   15eb0:	ldr	r4, [r5]
   15eb4:	ldr	r2, [r7, #24]
   15eb8:	mov	r0, r4
   15ebc:	blx	r2
   15ec0:	ldr	r1, [r7, #8]
   15ec4:	cmp	r0, r1
   15ec8:	bcs	15f88 <__assert_fail@plt+0x4a68>
   15ecc:	ldr	r3, [r7]
   15ed0:	ldr	r2, [r5, #4]
   15ed4:	ldr	r6, [r3, r0, lsl #3]
   15ed8:	cmp	r6, #0
   15edc:	beq	15e80 <__assert_fail@plt+0x4960>
   15ee0:	add	r0, r3, r0, lsl #3
   15ee4:	add	r0, r0, #4
   15ee8:	b	15e98 <__assert_fail@plt+0x4978>
   15eec:	ldr	r4, [sl]
   15ef0:	ldr	r0, [sp, #4]
   15ef4:	str	r9, [sl, #4]
   15ef8:	cmp	r0, #0
   15efc:	bne	15e4c <__assert_fail@plt+0x492c>
   15f00:	ldr	r1, [r7, #8]
   15f04:	ldr	r2, [r7, #24]
   15f08:	mov	r0, r4
   15f0c:	blx	r2
   15f10:	mov	r5, r0
   15f14:	ldr	r0, [r7, #8]
   15f18:	cmp	r5, r0
   15f1c:	bcs	15f88 <__assert_fail@plt+0x4a68>
   15f20:	ldr	r6, [r7]
   15f24:	ldr	r0, [r6, r5, lsl #3]
   15f28:	cmp	r0, #0
   15f2c:	beq	15e28 <__assert_fail@plt+0x4908>
   15f30:	ldr	r0, [r8]
   15f34:	cmp	r0, #0
   15f38:	beq	15f48 <__assert_fail@plt+0x4a28>
   15f3c:	ldr	r1, [r0, #4]
   15f40:	str	r1, [r8]
   15f44:	b	15f58 <__assert_fail@plt+0x4a38>
   15f48:	mov	r0, #8
   15f4c:	bl	19e94 <__assert_fail@plt+0x8974>
   15f50:	cmp	r0, #0
   15f54:	beq	15f7c <__assert_fail@plt+0x4a5c>
   15f58:	add	r1, r6, r5, lsl #3
   15f5c:	str	r4, [r0]
   15f60:	ldr	r2, [r1, #4]
   15f64:	str	r2, [r0, #4]
   15f68:	str	r0, [r1, #4]
   15f6c:	b	15e38 <__assert_fail@plt+0x4918>
   15f70:	mov	r0, #1
   15f74:	sub	sp, fp, #28
   15f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f7c:	mov	r0, #0
   15f80:	sub	sp, fp, #28
   15f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f88:	bl	114d8 <abort@plt>
   15f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f90:	add	fp, sp, #28
   15f94:	sub	sp, sp, #4
   15f98:	cmp	r1, #0
   15f9c:	beq	162b8 <__assert_fail@plt+0x4d98>
   15fa0:	mov	r8, r2
   15fa4:	mov	sl, r1
   15fa8:	ldr	r1, [r0, #8]
   15fac:	ldr	r2, [r0, #24]
   15fb0:	mov	r4, r0
   15fb4:	mov	r0, sl
   15fb8:	blx	r2
   15fbc:	mov	r7, r0
   15fc0:	ldr	r0, [r4, #8]
   15fc4:	cmp	r7, r0
   15fc8:	bcs	162b8 <__assert_fail@plt+0x4d98>
   15fcc:	ldr	r5, [r4]
   15fd0:	mov	r9, r5
   15fd4:	ldr	r1, [r9, r7, lsl #3]!
   15fd8:	cmp	r1, #0
   15fdc:	beq	16068 <__assert_fail@plt+0x4b48>
   15fe0:	cmp	r1, sl
   15fe4:	beq	16010 <__assert_fail@plt+0x4af0>
   15fe8:	ldr	r2, [r4, #28]
   15fec:	mov	r0, sl
   15ff0:	blx	r2
   15ff4:	cmp	r0, #0
   15ff8:	mov	r6, r9
   15ffc:	beq	16024 <__assert_fail@plt+0x4b04>
   16000:	ldr	r0, [r6]
   16004:	cmp	r0, #0
   16008:	bne	16014 <__assert_fail@plt+0x4af4>
   1600c:	b	16068 <__assert_fail@plt+0x4b48>
   16010:	mov	r0, sl
   16014:	cmp	r8, #0
   16018:	mov	r7, #0
   1601c:	strne	r0, [r8]
   16020:	b	16254 <__assert_fail@plt+0x4d34>
   16024:	add	r6, r5, r7, lsl #3
   16028:	ldr	r0, [r6, #4]!
   1602c:	cmp	r0, #0
   16030:	beq	16068 <__assert_fail@plt+0x4b48>
   16034:	ldr	r1, [r0]
   16038:	cmp	r1, sl
   1603c:	beq	1605c <__assert_fail@plt+0x4b3c>
   16040:	ldr	r2, [r4, #28]
   16044:	mov	r0, sl
   16048:	blx	r2
   1604c:	ldr	r6, [r6]
   16050:	cmp	r0, #0
   16054:	beq	16028 <__assert_fail@plt+0x4b08>
   16058:	b	16000 <__assert_fail@plt+0x4ae0>
   1605c:	mov	r0, sl
   16060:	cmp	r0, #0
   16064:	bne	16014 <__assert_fail@plt+0x4af4>
   16068:	vldr	s0, [r4, #8]
   1606c:	vldr	s2, [r4, #12]
   16070:	ldr	r0, [r4, #20]
   16074:	vcvt.f32.u32	s0, s0
   16078:	vcvt.f32.u32	s4, s2
   1607c:	vldr	s2, [r0, #8]
   16080:	vmul.f32	s6, s2, s0
   16084:	vcmpe.f32	s6, s4
   16088:	vmrs	APSR_nzcv, fpscr
   1608c:	bpl	161e0 <__assert_fail@plt+0x4cc0>
   16090:	movw	r1, #47512	; 0xb998
   16094:	movt	r1, #1
   16098:	cmp	r0, r1
   1609c:	beq	16128 <__assert_fail@plt+0x4c08>
   160a0:	vldr	s6, [pc, #532]	; 162bc <__assert_fail@plt+0x4d9c>
   160a4:	vcmpe.f32	s2, s6
   160a8:	vmrs	APSR_nzcv, fpscr
   160ac:	ble	16114 <__assert_fail@plt+0x4bf4>
   160b0:	vldr	s8, [pc, #520]	; 162c0 <__assert_fail@plt+0x4da0>
   160b4:	vcmpe.f32	s2, s8
   160b8:	vmrs	APSR_nzcv, fpscr
   160bc:	bpl	16114 <__assert_fail@plt+0x4bf4>
   160c0:	vldr	s8, [pc, #508]	; 162c4 <__assert_fail@plt+0x4da4>
   160c4:	vldr	s10, [r0, #12]
   160c8:	vcmpe.f32	s10, s8
   160cc:	vmrs	APSR_nzcv, fpscr
   160d0:	ble	16114 <__assert_fail@plt+0x4bf4>
   160d4:	vldr	s8, [r0]
   160d8:	vcmpe.f32	s8, #0.0
   160dc:	vmrs	APSR_nzcv, fpscr
   160e0:	blt	16114 <__assert_fail@plt+0x4bf4>
   160e4:	vadd.f32	s6, s8, s6
   160e8:	vcmpe.f32	s6, s2
   160ec:	vmrs	APSR_nzcv, fpscr
   160f0:	bpl	16114 <__assert_fail@plt+0x4bf4>
   160f4:	vldr	s8, [r0, #4]
   160f8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   160fc:	vcmpe.f32	s8, s10
   16100:	vmrs	APSR_nzcv, fpscr
   16104:	bhi	16114 <__assert_fail@plt+0x4bf4>
   16108:	vcmpe.f32	s6, s8
   1610c:	vmrs	APSR_nzcv, fpscr
   16110:	bmi	1612c <__assert_fail@plt+0x4c0c>
   16114:	vldr	s2, [pc, #428]	; 162c8 <__assert_fail@plt+0x4da8>
   16118:	movw	r0, #47512	; 0xb998
   1611c:	movt	r0, #1
   16120:	str	r0, [r4, #20]
   16124:	b	1612c <__assert_fail@plt+0x4c0c>
   16128:	mov	r0, r1
   1612c:	vmul.f32	s6, s2, s0
   16130:	vcmpe.f32	s6, s4
   16134:	vmrs	APSR_nzcv, fpscr
   16138:	bpl	161e0 <__assert_fail@plt+0x4cc0>
   1613c:	vldr	s4, [r0, #12]
   16140:	ldrb	r0, [r0, #16]
   16144:	mvn	r7, #0
   16148:	cmp	r0, #0
   1614c:	vmul.f32	s0, s4, s0
   16150:	vldr	s4, [pc, #372]	; 162cc <__assert_fail@plt+0x4dac>
   16154:	vmul.f32	s2, s2, s0
   16158:	vseleq.f32	s0, s2, s0
   1615c:	vcmpe.f32	s0, s4
   16160:	vmrs	APSR_nzcv, fpscr
   16164:	bge	16254 <__assert_fail@plt+0x4d34>
   16168:	vcvt.u32.f32	s0, s0
   1616c:	mov	r0, r4
   16170:	vmov	r1, s0
   16174:	bl	15b84 <__assert_fail@plt+0x4664>
   16178:	cmp	r0, #0
   1617c:	beq	16254 <__assert_fail@plt+0x4d34>
   16180:	ldr	r1, [r4, #8]
   16184:	ldr	r2, [r4, #24]
   16188:	mov	r0, sl
   1618c:	blx	r2
   16190:	mov	r7, r0
   16194:	ldr	r0, [r4, #8]
   16198:	cmp	r7, r0
   1619c:	bcs	162b8 <__assert_fail@plt+0x4d98>
   161a0:	ldr	r5, [r4]
   161a4:	mov	r9, r5
   161a8:	ldr	r1, [r9, r7, lsl #3]!
   161ac:	cmp	r1, #0
   161b0:	beq	161e0 <__assert_fail@plt+0x4cc0>
   161b4:	cmp	r1, sl
   161b8:	mov	r0, sl
   161bc:	beq	161d8 <__assert_fail@plt+0x4cb8>
   161c0:	ldr	r2, [r4, #28]
   161c4:	mov	r0, sl
   161c8:	blx	r2
   161cc:	cmp	r0, #0
   161d0:	beq	16268 <__assert_fail@plt+0x4d48>
   161d4:	ldr	r0, [r9]
   161d8:	cmp	r0, #0
   161dc:	bne	162b8 <__assert_fail@plt+0x4d98>
   161e0:	ldr	r0, [r9]
   161e4:	cmp	r0, #0
   161e8:	beq	16204 <__assert_fail@plt+0x4ce4>
   161ec:	ldr	r0, [r4, #36]	; 0x24
   161f0:	cmp	r0, #0
   161f4:	beq	16224 <__assert_fail@plt+0x4d04>
   161f8:	ldr	r1, [r0, #4]
   161fc:	str	r1, [r4, #36]	; 0x24
   16200:	b	16234 <__assert_fail@plt+0x4d14>
   16204:	str	sl, [r9]
   16208:	ldr	r0, [r4, #12]
   1620c:	ldr	r1, [r4, #16]
   16210:	add	r0, r0, #1
   16214:	add	r1, r1, #1
   16218:	str	r0, [r4, #12]
   1621c:	str	r1, [r4, #16]
   16220:	b	16250 <__assert_fail@plt+0x4d30>
   16224:	mov	r0, #8
   16228:	bl	19e94 <__assert_fail@plt+0x8974>
   1622c:	cmp	r0, #0
   16230:	beq	16260 <__assert_fail@plt+0x4d40>
   16234:	str	sl, [r0]
   16238:	ldr	r1, [r9, #4]
   1623c:	str	r1, [r0, #4]
   16240:	str	r0, [r9, #4]
   16244:	ldr	r0, [r4, #16]
   16248:	add	r0, r0, #1
   1624c:	str	r0, [r4, #16]
   16250:	mov	r7, #1
   16254:	mov	r0, r7
   16258:	sub	sp, fp, #28
   1625c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16260:	mvn	r7, #0
   16264:	b	16254 <__assert_fail@plt+0x4d34>
   16268:	add	r6, r5, r7, lsl #3
   1626c:	ldr	r0, [r6, #4]!
   16270:	cmp	r0, #0
   16274:	beq	161e0 <__assert_fail@plt+0x4cc0>
   16278:	ldr	r1, [r0]
   1627c:	cmp	r1, sl
   16280:	beq	162ac <__assert_fail@plt+0x4d8c>
   16284:	ldr	r2, [r4, #28]
   16288:	mov	r0, sl
   1628c:	blx	r2
   16290:	ldr	r6, [r6]
   16294:	cmp	r0, #0
   16298:	beq	1626c <__assert_fail@plt+0x4d4c>
   1629c:	ldr	r0, [r6]
   162a0:	cmp	r0, #0
   162a4:	beq	161e0 <__assert_fail@plt+0x4cc0>
   162a8:	b	162b8 <__assert_fail@plt+0x4d98>
   162ac:	mov	r0, sl
   162b0:	cmp	r0, #0
   162b4:	beq	161e0 <__assert_fail@plt+0x4cc0>
   162b8:	bl	114d8 <abort@plt>
   162bc:	stclcc	12, cr12, [ip, #820]	; 0x334
   162c0:	svccc	0x00666666
   162c4:	svccc	0x008ccccd
   162c8:	svccc	0x004ccccd
   162cc:	svcmi	0x00800000
   162d0:	push	{r4, sl, fp, lr}
   162d4:	add	fp, sp, #8
   162d8:	sub	sp, sp, #8
   162dc:	add	r2, sp, #4
   162e0:	mov	r4, r1
   162e4:	bl	15f8c <__assert_fail@plt+0x4a6c>
   162e8:	cmn	r0, #1
   162ec:	beq	16300 <__assert_fail@plt+0x4de0>
   162f0:	ldr	r1, [sp, #4]
   162f4:	cmp	r0, #0
   162f8:	moveq	r4, r1
   162fc:	b	16304 <__assert_fail@plt+0x4de4>
   16300:	mov	r4, #0
   16304:	mov	r0, r4
   16308:	sub	sp, fp, #8
   1630c:	pop	{r4, sl, fp, pc}
   16310:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16314:	add	fp, sp, #24
   16318:	mov	r9, r1
   1631c:	ldr	r1, [r0, #8]
   16320:	ldr	r2, [r0, #24]
   16324:	mov	r5, r0
   16328:	mov	r0, r9
   1632c:	blx	r2
   16330:	mov	r7, r0
   16334:	ldr	r0, [r5, #8]
   16338:	cmp	r7, r0
   1633c:	bcs	165a0 <__assert_fail@plt+0x5080>
   16340:	ldr	r6, [r5]
   16344:	mov	r8, #0
   16348:	mov	r4, r6
   1634c:	ldr	r1, [r4, r7, lsl #3]!
   16350:	cmp	r1, #0
   16354:	beq	16408 <__assert_fail@plt+0x4ee8>
   16358:	cmp	r1, r9
   1635c:	beq	16378 <__assert_fail@plt+0x4e58>
   16360:	ldr	r2, [r5, #28]
   16364:	mov	r0, r9
   16368:	blx	r2
   1636c:	cmp	r0, #0
   16370:	beq	163b0 <__assert_fail@plt+0x4e90>
   16374:	ldr	r9, [r4]
   16378:	add	r0, r6, r7, lsl #3
   1637c:	ldr	r0, [r0, #4]
   16380:	cmp	r0, #0
   16384:	beq	163f8 <__assert_fail@plt+0x4ed8>
   16388:	ldm	r0, {r1, r2}
   1638c:	stm	r4, {r1, r2}
   16390:	mov	r1, #0
   16394:	str	r1, [r0]
   16398:	ldr	r1, [r5, #36]	; 0x24
   1639c:	str	r1, [r0, #4]
   163a0:	str	r0, [r5, #36]	; 0x24
   163a4:	cmp	r9, #0
   163a8:	bne	16440 <__assert_fail@plt+0x4f20>
   163ac:	b	16408 <__assert_fail@plt+0x4ee8>
   163b0:	add	r7, r6, r7, lsl #3
   163b4:	ldr	r0, [r7, #4]!
   163b8:	cmp	r0, #0
   163bc:	beq	16408 <__assert_fail@plt+0x4ee8>
   163c0:	ldr	r1, [r0]
   163c4:	cmp	r1, r9
   163c8:	beq	16410 <__assert_fail@plt+0x4ef0>
   163cc:	ldr	r2, [r5, #28]
   163d0:	mov	r0, r9
   163d4:	blx	r2
   163d8:	ldr	r1, [r7]
   163dc:	cmp	r0, #0
   163e0:	bne	16418 <__assert_fail@plt+0x4ef8>
   163e4:	ldr	r0, [r1, #4]!
   163e8:	mov	r7, r1
   163ec:	cmp	r0, #0
   163f0:	bne	163c0 <__assert_fail@plt+0x4ea0>
   163f4:	b	16408 <__assert_fail@plt+0x4ee8>
   163f8:	mov	r0, #0
   163fc:	str	r0, [r4]
   16400:	cmp	r9, #0
   16404:	bne	16440 <__assert_fail@plt+0x4f20>
   16408:	mov	r0, r8
   1640c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16410:	mov	r1, r0
   16414:	b	1641c <__assert_fail@plt+0x4efc>
   16418:	ldr	r9, [r1]
   1641c:	ldr	r0, [r1, #4]
   16420:	str	r0, [r7]
   16424:	mov	r0, #0
   16428:	str	r0, [r1]
   1642c:	ldr	r0, [r5, #36]	; 0x24
   16430:	str	r0, [r1, #4]
   16434:	str	r1, [r5, #36]	; 0x24
   16438:	cmp	r9, #0
   1643c:	beq	16408 <__assert_fail@plt+0x4ee8>
   16440:	ldr	r0, [r5, #16]
   16444:	sub	r0, r0, #1
   16448:	str	r0, [r5, #16]
   1644c:	ldr	r0, [r4]
   16450:	cmp	r0, #0
   16454:	bne	16594 <__assert_fail@plt+0x5074>
   16458:	ldr	r0, [r5, #12]
   1645c:	vldr	s0, [r5, #8]
   16460:	sub	r1, r0, #1
   16464:	str	r1, [r5, #12]
   16468:	vmov	s2, r1
   1646c:	ldr	r0, [r5, #20]
   16470:	vcvt.f32.u32	s0, s0
   16474:	vcvt.f32.u32	s2, s2
   16478:	vldr	s4, [r0]
   1647c:	vmul.f32	s6, s4, s0
   16480:	vcmpe.f32	s6, s2
   16484:	vmrs	APSR_nzcv, fpscr
   16488:	ble	16594 <__assert_fail@plt+0x5074>
   1648c:	movw	r1, #47512	; 0xb998
   16490:	movt	r1, #1
   16494:	cmp	r0, r1
   16498:	beq	16524 <__assert_fail@plt+0x5004>
   1649c:	vldr	s8, [pc, #256]	; 165a4 <__assert_fail@plt+0x5084>
   164a0:	vldr	s6, [r0, #8]
   164a4:	vcmpe.f32	s6, s8
   164a8:	vmrs	APSR_nzcv, fpscr
   164ac:	ble	16510 <__assert_fail@plt+0x4ff0>
   164b0:	vldr	s10, [pc, #240]	; 165a8 <__assert_fail@plt+0x5088>
   164b4:	vcmpe.f32	s6, s10
   164b8:	vmrs	APSR_nzcv, fpscr
   164bc:	bpl	16510 <__assert_fail@plt+0x4ff0>
   164c0:	vcmpe.f32	s4, #0.0
   164c4:	vmrs	APSR_nzcv, fpscr
   164c8:	blt	16510 <__assert_fail@plt+0x4ff0>
   164cc:	vldr	s10, [r0, #12]
   164d0:	vldr	s12, [pc, #212]	; 165ac <__assert_fail@plt+0x508c>
   164d4:	vcmpe.f32	s10, s12
   164d8:	vmrs	APSR_nzcv, fpscr
   164dc:	ble	16510 <__assert_fail@plt+0x4ff0>
   164e0:	vadd.f32	s8, s4, s8
   164e4:	vcmpe.f32	s8, s6
   164e8:	vmrs	APSR_nzcv, fpscr
   164ec:	bpl	16510 <__assert_fail@plt+0x4ff0>
   164f0:	vldr	s6, [r0, #4]
   164f4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   164f8:	vcmpe.f32	s6, s10
   164fc:	vmrs	APSR_nzcv, fpscr
   16500:	bhi	16510 <__assert_fail@plt+0x4ff0>
   16504:	vcmpe.f32	s8, s6
   16508:	vmrs	APSR_nzcv, fpscr
   1650c:	bmi	16528 <__assert_fail@plt+0x5008>
   16510:	vldr	s4, [pc, #152]	; 165b0 <__assert_fail@plt+0x5090>
   16514:	movw	r0, #47512	; 0xb998
   16518:	movt	r0, #1
   1651c:	str	r0, [r5, #20]
   16520:	b	16528 <__assert_fail@plt+0x5008>
   16524:	mov	r0, r1
   16528:	vmul.f32	s4, s4, s0
   1652c:	vcmpe.f32	s4, s2
   16530:	vmrs	APSR_nzcv, fpscr
   16534:	ble	16594 <__assert_fail@plt+0x5074>
   16538:	vldr	s2, [r0, #4]
   1653c:	ldrb	r1, [r0, #16]
   16540:	cmp	r1, #0
   16544:	vmul.f32	s0, s2, s0
   16548:	bne	16554 <__assert_fail@plt+0x5034>
   1654c:	vldr	s2, [r0, #8]
   16550:	vmul.f32	s0, s0, s2
   16554:	vcvt.u32.f32	s0, s0
   16558:	mov	r0, r5
   1655c:	vmov	r1, s0
   16560:	bl	15b84 <__assert_fail@plt+0x4664>
   16564:	cmp	r0, #0
   16568:	bne	16594 <__assert_fail@plt+0x5074>
   1656c:	ldr	r0, [r5, #36]	; 0x24
   16570:	cmp	r0, #0
   16574:	beq	1658c <__assert_fail@plt+0x506c>
   16578:	ldr	r4, [r0, #4]
   1657c:	bl	12ea4 <__assert_fail@plt+0x1984>
   16580:	cmp	r4, #0
   16584:	mov	r0, r4
   16588:	bne	16578 <__assert_fail@plt+0x5058>
   1658c:	mov	r0, #0
   16590:	str	r0, [r5, #36]	; 0x24
   16594:	mov	r8, r9
   16598:	mov	r0, r8
   1659c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   165a0:	bl	114d8 <abort@plt>
   165a4:	stclcc	12, cr12, [ip, #820]	; 0x334
   165a8:	svccc	0x00666666
   165ac:	svccc	0x008ccccd
   165b0:	andeq	r0, r0, r0
   165b4:	b	16310 <__assert_fail@plt+0x4df0>
   165b8:	vdup.32	q8, r1
   165bc:	mov	r2, #0
   165c0:	str	r2, [r0, #20]
   165c4:	str	r2, [r0, #24]
   165c8:	mov	r2, #1
   165cc:	strb	r2, [r0, #28]
   165d0:	vst1.32	{d16-d17}, [r0]!
   165d4:	str	r1, [r0]
   165d8:	bx	lr
   165dc:	ldrb	r0, [r0, #28]
   165e0:	bx	lr
   165e4:	push	{fp, lr}
   165e8:	mov	fp, sp
   165ec:	ldrb	r3, [r0, #28]
   165f0:	ldr	r2, [r0, #20]
   165f4:	eor	lr, r3, #1
   165f8:	add	r2, r2, lr
   165fc:	and	r3, r2, #3
   16600:	ldr	ip, [r0, r3, lsl #2]
   16604:	str	r1, [r0, r3, lsl #2]
   16608:	str	r3, [r0, #20]
   1660c:	ldr	r1, [r0, #24]
   16610:	cmp	r3, r1
   16614:	addeq	r1, r2, lr
   16618:	andeq	r1, r1, #3
   1661c:	streq	r1, [r0, #24]
   16620:	mov	r1, #0
   16624:	strb	r1, [r0, #28]
   16628:	mov	r0, ip
   1662c:	pop	{fp, pc}
   16630:	push	{fp, lr}
   16634:	mov	fp, sp
   16638:	ldrb	r1, [r0, #28]
   1663c:	cmp	r1, #0
   16640:	bne	1667c <__assert_fail@plt+0x515c>
   16644:	ldr	r3, [r0, #20]
   16648:	ldr	r2, [r0, #16]
   1664c:	ldr	r1, [r0, r3, lsl #2]
   16650:	str	r2, [r0, r3, lsl #2]
   16654:	ldr	r2, [r0, #20]
   16658:	ldr	r3, [r0, #24]
   1665c:	cmp	r2, r3
   16660:	moveq	r2, #1
   16664:	strbeq	r2, [r0, #28]
   16668:	subne	r2, r2, #1
   1666c:	andne	r2, r2, #3
   16670:	strne	r2, [r0, #20]
   16674:	mov	r0, r1
   16678:	pop	{fp, pc}
   1667c:	bl	114d8 <abort@plt>
   16680:	push	{r4, r5, r6, sl, fp, lr}
   16684:	add	fp, sp, #16
   16688:	mov	r5, r0
   1668c:	mov	r0, #0
   16690:	mov	r4, r1
   16694:	add	r6, r2, #19
   16698:	strb	r0, [r2, #20]
   1669c:	mov	r0, r5
   166a0:	mov	r1, r4
   166a4:	mov	r2, #10
   166a8:	mov	r3, #0
   166ac:	bl	1a638 <__assert_fail@plt+0x9118>
   166b0:	add	r2, r0, r0, lsl #2
   166b4:	sub	r2, r5, r2, lsl #1
   166b8:	orr	r2, r2, #48	; 0x30
   166bc:	strb	r2, [r6], #-1
   166c0:	rsbs	r2, r5, #9
   166c4:	mov	r5, r0
   166c8:	rscs	r2, r4, #0
   166cc:	mov	r4, r1
   166d0:	bcc	1669c <__assert_fail@plt+0x517c>
   166d4:	add	r0, r6, #1
   166d8:	pop	{r4, r5, r6, sl, fp, pc}
   166dc:	sub	sp, sp, #4
   166e0:	push	{fp, lr}
   166e4:	mov	fp, sp
   166e8:	sub	sp, sp, #4
   166ec:	str	r3, [fp, #8]
   166f0:	tst	r2, #64	; 0x40
   166f4:	mov	r3, #0
   166f8:	ldrne	r3, [fp, #8]
   166fc:	bl	113b8 <openat64@plt>
   16700:	bl	1856c <__assert_fail@plt+0x704c>
   16704:	mov	sp, fp
   16708:	pop	{fp, lr}
   1670c:	add	sp, sp, #4
   16710:	bx	lr
   16714:	push	{r4, r5, r6, sl, fp, lr}
   16718:	add	fp, sp, #16
   1671c:	orr	r2, r2, #18688	; 0x4900
   16720:	mov	r4, r3
   16724:	orr	r2, r2, #524288	; 0x80000
   16728:	bl	166dc <__assert_fail@plt+0x51bc>
   1672c:	mov	r5, r0
   16730:	mov	r0, #0
   16734:	cmp	r5, #0
   16738:	bmi	16770 <__assert_fail@plt+0x5250>
   1673c:	mov	r0, r5
   16740:	bl	11478 <fdopendir@plt>
   16744:	cmp	r0, #0
   16748:	beq	16754 <__assert_fail@plt+0x5234>
   1674c:	str	r5, [r4]
   16750:	pop	{r4, r5, r6, sl, fp, pc}
   16754:	bl	113d0 <__errno_location@plt>
   16758:	ldr	r6, [r0]
   1675c:	mov	r4, r0
   16760:	mov	r0, r5
   16764:	bl	114e4 <close@plt>
   16768:	mov	r0, #0
   1676c:	str	r6, [r4]
   16770:	pop	{r4, r5, r6, sl, fp, pc}
   16774:	push	{r4, r5, fp, lr}
   16778:	add	fp, sp, #8
   1677c:	cmp	r0, #0
   16780:	beq	16814 <__assert_fail@plt+0x52f4>
   16784:	mov	r1, #47	; 0x2f
   16788:	mov	r4, r0
   1678c:	bl	11454 <strrchr@plt>
   16790:	cmp	r0, #0
   16794:	mov	r5, r4
   16798:	addne	r5, r0, #1
   1679c:	sub	r0, r5, r4
   167a0:	cmp	r0, #7
   167a4:	blt	167f8 <__assert_fail@plt+0x52d8>
   167a8:	movw	r1, #47588	; 0xb9e4
   167ac:	sub	r0, r5, #7
   167b0:	mov	r2, #7
   167b4:	movt	r1, #1
   167b8:	bl	114cc <strncmp@plt>
   167bc:	cmp	r0, #0
   167c0:	bne	167f8 <__assert_fail@plt+0x52d8>
   167c4:	movw	r1, #47596	; 0xb9ec
   167c8:	mov	r0, r5
   167cc:	mov	r2, #3
   167d0:	movt	r1, #1
   167d4:	bl	114cc <strncmp@plt>
   167d8:	cmp	r0, #0
   167dc:	beq	167e8 <__assert_fail@plt+0x52c8>
   167e0:	mov	r4, r5
   167e4:	b	167f8 <__assert_fail@plt+0x52d8>
   167e8:	movw	r0, #53624	; 0xd178
   167ec:	add	r4, r5, #3
   167f0:	movt	r0, #2
   167f4:	str	r4, [r0]
   167f8:	movw	r0, #53628	; 0xd17c
   167fc:	movt	r0, #2
   16800:	str	r4, [r0]
   16804:	movw	r0, #53688	; 0xd1b8
   16808:	movt	r0, #2
   1680c:	str	r4, [r0]
   16810:	pop	{r4, r5, fp, pc}
   16814:	movw	r0, #53640	; 0xd188
   16818:	mov	r1, #55	; 0x37
   1681c:	mov	r2, #1
   16820:	movt	r0, #2
   16824:	ldr	r3, [r0]
   16828:	movw	r0, #47532	; 0xb9ac
   1682c:	movt	r0, #1
   16830:	bl	112e0 <fwrite@plt>
   16834:	bl	114d8 <abort@plt>
   16838:	push	{r4, r5, r6, sl, fp, lr}
   1683c:	add	fp, sp, #16
   16840:	mov	r4, r0
   16844:	movw	r0, #53696	; 0xd1c0
   16848:	movt	r0, #2
   1684c:	cmp	r4, #0
   16850:	moveq	r4, r0
   16854:	bl	113d0 <__errno_location@plt>
   16858:	ldr	r6, [r0]
   1685c:	mov	r5, r0
   16860:	mov	r0, r4
   16864:	mov	r1, #48	; 0x30
   16868:	bl	19478 <__assert_fail@plt+0x7f58>
   1686c:	str	r6, [r5]
   16870:	pop	{r4, r5, r6, sl, fp, pc}
   16874:	movw	r1, #53696	; 0xd1c0
   16878:	cmp	r0, #0
   1687c:	movt	r1, #2
   16880:	movne	r1, r0
   16884:	ldr	r0, [r1]
   16888:	bx	lr
   1688c:	movw	r2, #53696	; 0xd1c0
   16890:	cmp	r0, #0
   16894:	movt	r2, #2
   16898:	movne	r2, r0
   1689c:	str	r1, [r2]
   168a0:	bx	lr
   168a4:	movw	r3, #53696	; 0xd1c0
   168a8:	cmp	r0, #0
   168ac:	and	r2, r2, #1
   168b0:	movt	r3, #2
   168b4:	movne	r3, r0
   168b8:	ubfx	r0, r1, #5, #3
   168bc:	and	r1, r1, #31
   168c0:	add	ip, r3, r0, lsl #2
   168c4:	mov	r0, #1
   168c8:	ldr	r3, [ip, #8]
   168cc:	and	r0, r0, r3, lsr r1
   168d0:	eor	r2, r0, r2
   168d4:	eor	r1, r3, r2, lsl r1
   168d8:	str	r1, [ip, #8]
   168dc:	bx	lr
   168e0:	movw	r2, #53696	; 0xd1c0
   168e4:	cmp	r0, #0
   168e8:	movt	r2, #2
   168ec:	movne	r2, r0
   168f0:	ldr	r0, [r2, #4]
   168f4:	str	r1, [r2, #4]
   168f8:	bx	lr
   168fc:	push	{fp, lr}
   16900:	mov	fp, sp
   16904:	movw	r3, #53696	; 0xd1c0
   16908:	cmp	r0, #0
   1690c:	movt	r3, #2
   16910:	movne	r3, r0
   16914:	cmp	r1, #0
   16918:	mov	r0, #10
   1691c:	cmpne	r2, #0
   16920:	str	r0, [r3]
   16924:	bne	1692c <__assert_fail@plt+0x540c>
   16928:	bl	114d8 <abort@plt>
   1692c:	str	r1, [r3, #40]	; 0x28
   16930:	str	r2, [r3, #44]	; 0x2c
   16934:	pop	{fp, pc}
   16938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1693c:	add	fp, sp, #28
   16940:	sub	sp, sp, #20
   16944:	mov	r7, r0
   16948:	ldr	r0, [fp, #8]
   1694c:	movw	r5, #53696	; 0xd1c0
   16950:	mov	r8, r3
   16954:	mov	r9, r2
   16958:	mov	sl, r1
   1695c:	movt	r5, #2
   16960:	cmp	r0, #0
   16964:	movne	r5, r0
   16968:	bl	113d0 <__errno_location@plt>
   1696c:	ldr	r2, [r5, #40]	; 0x28
   16970:	ldr	r3, [r5, #44]	; 0x2c
   16974:	mov	r4, r0
   16978:	ldm	r5, {r0, r1}
   1697c:	add	r5, r5, #8
   16980:	ldr	r6, [r4]
   16984:	stm	sp, {r0, r1, r5}
   16988:	mov	r0, r7
   1698c:	mov	r1, sl
   16990:	str	r2, [sp, #12]
   16994:	str	r3, [sp, #16]
   16998:	mov	r2, r9
   1699c:	mov	r3, r8
   169a0:	bl	169b0 <__assert_fail@plt+0x5490>
   169a4:	str	r6, [r4]
   169a8:	sub	sp, fp, #28
   169ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169b4:	add	fp, sp, #28
   169b8:	sub	sp, sp, #156	; 0x9c
   169bc:	mov	r5, r0
   169c0:	add	r0, r2, #1
   169c4:	mov	r6, r1
   169c8:	mov	sl, r3
   169cc:	str	r2, [fp, #-80]	; 0xffffffb0
   169d0:	str	r0, [sp, #72]	; 0x48
   169d4:	ldr	r0, [fp, #12]
   169d8:	and	r1, r0, #1
   169dc:	str	r1, [sp, #36]	; 0x24
   169e0:	and	r1, r0, #4
   169e4:	str	r1, [sp, #32]
   169e8:	ubfx	r9, r0, #1, #1
   169ec:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   169f0:	str	r0, [sp, #40]	; 0x28
   169f4:	ldr	r0, [fp, #24]
   169f8:	ldr	r7, [fp, #8]
   169fc:	mov	r1, #0
   16a00:	str	r5, [fp, #-84]	; 0xffffffac
   16a04:	str	r1, [fp, #-56]	; 0xffffffc8
   16a08:	mov	r1, #0
   16a0c:	str	r1, [sp, #60]	; 0x3c
   16a10:	mov	r1, #1
   16a14:	str	r1, [fp, #-48]	; 0xffffffd0
   16a18:	str	r0, [sp, #80]	; 0x50
   16a1c:	ldr	r0, [fp, #20]
   16a20:	str	r0, [sp, #76]	; 0x4c
   16a24:	mov	r0, #0
   16a28:	str	r0, [sp, #56]	; 0x38
   16a2c:	mov	r0, #0
   16a30:	str	r0, [fp, #-88]	; 0xffffffa8
   16a34:	mov	r0, #0
   16a38:	str	r0, [fp, #-72]	; 0xffffffb8
   16a3c:	mov	r0, #0
   16a40:	cmp	r7, #10
   16a44:	bhi	179d8 <__assert_fail@plt+0x64b8>
   16a48:	add	r1, pc, #24
   16a4c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16a50:	mov	r4, r6
   16a54:	mov	r8, #0
   16a58:	mov	r2, #1
   16a5c:	mov	r3, #0
   16a60:	mov	lr, sl
   16a64:	ldr	pc, [r1, r7, lsl #2]
   16a68:	andeq	r6, r1, ip, lsr #22
   16a6c:	andeq	r6, r1, r0, lsl #23
   16a70:	andeq	r6, r1, r0, asr #22
   16a74:	andeq	r6, r1, r4, lsr #22
   16a78:	andeq	r6, r1, r4, ror fp
   16a7c:	andeq	r6, r1, r8, lsr #23
   16a80:	andeq	r6, r1, r0, asr fp
   16a84:	andeq	r6, r1, ip, lsr #24
   16a88:	muleq	r1, r4, sl
   16a8c:	muleq	r1, r4, sl
   16a90:			; <UNDEFINED> instruction: 0x00016abc
   16a94:	movw	r0, #47678	; 0xba3e
   16a98:	mov	r1, r7
   16a9c:	movt	r0, #1
   16aa0:	bl	183e0 <__assert_fail@plt+0x6ec0>
   16aa4:	str	r0, [sp, #76]	; 0x4c
   16aa8:	movw	r0, #47680	; 0xba40
   16aac:	mov	r1, r7
   16ab0:	movt	r0, #1
   16ab4:	bl	183e0 <__assert_fail@plt+0x6ec0>
   16ab8:	str	r0, [sp, #80]	; 0x50
   16abc:	mov	r8, #0
   16ac0:	tst	r9, #1
   16ac4:	bne	16afc <__assert_fail@plt+0x55dc>
   16ac8:	ldr	r0, [sp, #76]	; 0x4c
   16acc:	ldrb	r0, [r0]
   16ad0:	cmp	r0, #0
   16ad4:	beq	16afc <__assert_fail@plt+0x55dc>
   16ad8:	ldr	r1, [sp, #76]	; 0x4c
   16adc:	mov	r8, #0
   16ae0:	add	r1, r1, #1
   16ae4:	cmp	r8, r4
   16ae8:	strbcc	r0, [r5, r8]
   16aec:	ldrb	r0, [r1, r8]
   16af0:	add	r8, r8, #1
   16af4:	cmp	r0, #0
   16af8:	bne	16ae4 <__assert_fail@plt+0x55c4>
   16afc:	ldr	r6, [sp, #80]	; 0x50
   16b00:	mov	r0, r6
   16b04:	bl	113a0 <strlen@plt>
   16b08:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16b0c:	str	r0, [fp, #-72]	; 0xffffffb8
   16b10:	str	r6, [fp, #-88]	; 0xffffffa8
   16b14:	mov	r2, #1
   16b18:	mov	r3, r9
   16b1c:	mov	lr, sl
   16b20:	b	16c2c <__assert_fail@plt+0x570c>
   16b24:	mov	r0, #1
   16b28:	b	16b80 <__assert_fail@plt+0x5660>
   16b2c:	mov	r7, #0
   16b30:	mov	r8, #0
   16b34:	mov	r2, r0
   16b38:	mov	r3, #0
   16b3c:	b	16c2c <__assert_fail@plt+0x570c>
   16b40:	tst	r9, #1
   16b44:	bne	16b80 <__assert_fail@plt+0x5660>
   16b48:	mov	r2, r0
   16b4c:	b	16bd8 <__assert_fail@plt+0x56b8>
   16b50:	mov	r0, #1
   16b54:	mov	r8, #0
   16b58:	mov	r7, #5
   16b5c:	mov	r2, #1
   16b60:	str	r0, [fp, #-72]	; 0xffffffb8
   16b64:	movw	r0, #47676	; 0xba3c
   16b68:	movt	r0, #1
   16b6c:	str	r0, [fp, #-88]	; 0xffffffa8
   16b70:	b	16ba0 <__assert_fail@plt+0x5680>
   16b74:	mov	r2, #1
   16b78:	tst	r9, #1
   16b7c:	beq	16bd8 <__assert_fail@plt+0x56b8>
   16b80:	mov	r1, #1
   16b84:	mov	r8, #0
   16b88:	mov	r7, #2
   16b8c:	mov	r2, r0
   16b90:	str	r1, [fp, #-72]	; 0xffffffb8
   16b94:	movw	r1, #47680	; 0xba40
   16b98:	movt	r1, #1
   16b9c:	str	r1, [fp, #-88]	; 0xffffffa8
   16ba0:	mov	r3, #1
   16ba4:	b	16c2c <__assert_fail@plt+0x570c>
   16ba8:	tst	r9, #1
   16bac:	beq	16bfc <__assert_fail@plt+0x56dc>
   16bb0:	mov	r0, #1
   16bb4:	mov	r8, #0
   16bb8:	mov	r2, #1
   16bbc:	mov	r3, #1
   16bc0:	mov	r7, #5
   16bc4:	str	r0, [fp, #-72]	; 0xffffffb8
   16bc8:	movw	r0, #47676	; 0xba3c
   16bcc:	movt	r0, #1
   16bd0:	str	r0, [fp, #-88]	; 0xffffffa8
   16bd4:	b	16c2c <__assert_fail@plt+0x570c>
   16bd8:	cmp	r4, #0
   16bdc:	mov	r8, #1
   16be0:	mov	r3, #0
   16be4:	mov	r7, #2
   16be8:	movne	r0, #39	; 0x27
   16bec:	strbne	r0, [r5]
   16bf0:	movw	r0, #47680	; 0xba40
   16bf4:	movt	r0, #1
   16bf8:	b	16c20 <__assert_fail@plt+0x5700>
   16bfc:	cmp	r4, #0
   16c00:	mov	r8, #1
   16c04:	mov	r2, #1
   16c08:	mov	r7, #5
   16c0c:	mov	r3, #0
   16c10:	movne	r0, #34	; 0x22
   16c14:	strbne	r0, [r5]
   16c18:	movw	r0, #47676	; 0xba3c
   16c1c:	movt	r0, #1
   16c20:	str	r0, [fp, #-88]	; 0xffffffa8
   16c24:	mov	r0, #1
   16c28:	str	r0, [fp, #-72]	; 0xffffffb8
   16c2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16c30:	eor	r6, r3, #1
   16c34:	str	r7, [fp, #-68]	; 0xffffffbc
   16c38:	str	r3, [fp, #-76]	; 0xffffffb4
   16c3c:	str	r2, [sp, #84]	; 0x54
   16c40:	str	r6, [sp, #92]	; 0x5c
   16c44:	cmp	r0, #0
   16c48:	movwne	r0, #1
   16c4c:	and	r1, r0, r3
   16c50:	and	r1, r2, r1
   16c54:	str	r1, [sp, #48]	; 0x30
   16c58:	sub	r1, r7, #2
   16c5c:	clz	r1, r1
   16c60:	lsr	r1, r1, #5
   16c64:	and	r1, r1, r3
   16c68:	str	r1, [sp, #64]	; 0x40
   16c6c:	subs	r1, r7, #2
   16c70:	mov	r7, #0
   16c74:	movwne	r1, #1
   16c78:	orr	r6, r1, r6
   16c7c:	and	r1, r1, r2
   16c80:	and	r0, r0, r1
   16c84:	str	r6, [sp, #68]	; 0x44
   16c88:	str	r0, [fp, #-60]	; 0xffffffc4
   16c8c:	orr	r0, r1, r3
   16c90:	ldr	r1, [fp, #16]
   16c94:	eor	r0, r0, #1
   16c98:	clz	r1, r1
   16c9c:	lsr	r1, r1, #5
   16ca0:	orr	r0, r1, r0
   16ca4:	str	r0, [fp, #-64]	; 0xffffffc0
   16ca8:	eor	r0, r2, #1
   16cac:	str	r0, [sp, #52]	; 0x34
   16cb0:	cmn	lr, #1
   16cb4:	beq	16cc4 <__assert_fail@plt+0x57a4>
   16cb8:	cmp	r7, lr
   16cbc:	bne	16cd0 <__assert_fail@plt+0x57b0>
   16cc0:	b	17818 <__assert_fail@plt+0x62f8>
   16cc4:	ldrb	r0, [ip, r7]
   16cc8:	cmp	r0, #0
   16ccc:	beq	17820 <__assert_fail@plt+0x6300>
   16cd0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16cd4:	mov	sl, #0
   16cd8:	cmp	r0, #0
   16cdc:	beq	16d14 <__assert_fail@plt+0x57f4>
   16ce0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16ce4:	add	r5, r7, r0
   16ce8:	cmp	r0, #2
   16cec:	bcc	16d08 <__assert_fail@plt+0x57e8>
   16cf0:	cmn	lr, #1
   16cf4:	bne	16d08 <__assert_fail@plt+0x57e8>
   16cf8:	mov	r0, ip
   16cfc:	bl	113a0 <strlen@plt>
   16d00:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16d04:	mov	lr, r0
   16d08:	cmp	r5, lr
   16d0c:	bls	16d1c <__assert_fail@plt+0x57fc>
   16d10:	ldr	r5, [fp, #-84]	; 0xffffffac
   16d14:	mov	r0, #0
   16d18:	b	16d68 <__assert_fail@plt+0x5848>
   16d1c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16d20:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16d24:	add	r0, ip, r7
   16d28:	mov	r6, r4
   16d2c:	mov	r4, lr
   16d30:	bl	11388 <bcmp@plt>
   16d34:	ldr	r2, [sp, #92]	; 0x5c
   16d38:	cmp	r0, #0
   16d3c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16d40:	mov	r1, r0
   16d44:	movwne	r1, #1
   16d48:	orr	r1, r1, r2
   16d4c:	tst	r1, #1
   16d50:	beq	178a8 <__assert_fail@plt+0x6388>
   16d54:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16d58:	clz	r0, r0
   16d5c:	mov	lr, r4
   16d60:	mov	r4, r6
   16d64:	lsr	r0, r0, #5
   16d68:	str	r0, [fp, #-52]	; 0xffffffcc
   16d6c:	ldrb	r6, [ip, r7]
   16d70:	cmp	r6, #126	; 0x7e
   16d74:	bhi	172a4 <__assert_fail@plt+0x5d84>
   16d78:	add	r3, pc, #16
   16d7c:	mov	r9, #1
   16d80:	mov	r2, #110	; 0x6e
   16d84:	mov	r0, #97	; 0x61
   16d88:	mov	r1, #0
   16d8c:	ldr	pc, [r3, r6, lsl #2]
   16d90:	andeq	r7, r1, r4, lsl #2
   16d94:	andeq	r7, r1, r4, lsr #5
   16d98:	andeq	r7, r1, r4, lsr #5
   16d9c:	andeq	r7, r1, r4, lsr #5
   16da0:	andeq	r7, r1, r4, lsr #5
   16da4:	andeq	r7, r1, r4, lsr #5
   16da8:	andeq	r7, r1, r4, lsr #5
   16dac:	andeq	r7, r1, r0, lsl #7
   16db0:	andeq	r7, r1, r4, ror #1
   16db4:	ldrdeq	r7, [r1], -ip
   16db8:	strdeq	r7, [r1], -r0
   16dbc:	andeq	r7, r1, ip, lsl #4
   16dc0:	ldrdeq	r7, [r1], -r4
   16dc4:	andeq	r7, r1, ip, ror #1
   16dc8:	andeq	r7, r1, r4, lsr #5
   16dcc:	andeq	r7, r1, r4, lsr #5
   16dd0:	andeq	r7, r1, r4, lsr #5
   16dd4:	andeq	r7, r1, r4, lsr #5
   16dd8:	andeq	r7, r1, r4, lsr #5
   16ddc:	andeq	r7, r1, r4, lsr #5
   16de0:	andeq	r7, r1, r4, lsr #5
   16de4:	andeq	r7, r1, r4, lsr #5
   16de8:	andeq	r7, r1, r4, lsr #5
   16dec:	andeq	r7, r1, r4, lsr #5
   16df0:	andeq	r7, r1, r4, lsr #5
   16df4:	andeq	r7, r1, r4, lsr #5
   16df8:	andeq	r7, r1, r4, lsr #5
   16dfc:	andeq	r7, r1, r4, lsr #5
   16e00:	andeq	r7, r1, r4, lsr #5
   16e04:	andeq	r7, r1, r4, lsr #5
   16e08:	andeq	r7, r1, r4, lsr #5
   16e0c:	andeq	r7, r1, r4, lsr #5
   16e10:	andeq	r7, r1, r8, lsl #1
   16e14:	andeq	r7, r1, ip, lsl #1
   16e18:	andeq	r7, r1, ip, lsl #1
   16e1c:	andeq	r7, r1, r4, ror r0
   16e20:	andeq	r7, r1, ip, lsl #1
   16e24:	andeq	r6, r1, ip, lsl #31
   16e28:	andeq	r7, r1, ip, lsl #1
   16e2c:	andeq	r7, r1, r4, lsl r2
   16e30:	andeq	r7, r1, ip, lsl #1
   16e34:	andeq	r7, r1, ip, lsl #1
   16e38:	andeq	r7, r1, ip, lsl #1
   16e3c:	andeq	r6, r1, ip, lsl #31
   16e40:	andeq	r6, r1, ip, lsl #31
   16e44:	andeq	r6, r1, ip, lsl #31
   16e48:	andeq	r6, r1, ip, lsl #31
   16e4c:	andeq	r6, r1, ip, lsl #31
   16e50:	andeq	r6, r1, ip, lsl #31
   16e54:	andeq	r6, r1, ip, lsl #31
   16e58:	andeq	r6, r1, ip, lsl #31
   16e5c:	andeq	r6, r1, ip, lsl #31
   16e60:	andeq	r6, r1, ip, lsl #31
   16e64:	andeq	r6, r1, ip, lsl #31
   16e68:	andeq	r6, r1, ip, lsl #31
   16e6c:	andeq	r6, r1, ip, lsl #31
   16e70:	andeq	r6, r1, ip, lsl #31
   16e74:	andeq	r6, r1, ip, lsl #31
   16e78:	andeq	r6, r1, ip, lsl #31
   16e7c:	andeq	r7, r1, ip, lsl #1
   16e80:	andeq	r7, r1, ip, lsl #1
   16e84:	andeq	r7, r1, ip, lsl #1
   16e88:	andeq	r7, r1, ip, lsl #1
   16e8c:	ldrdeq	r7, [r1], -ip
   16e90:	andeq	r7, r1, r4, lsr #5
   16e94:	andeq	r6, r1, ip, lsl #31
   16e98:	andeq	r6, r1, ip, lsl #31
   16e9c:	andeq	r6, r1, ip, lsl #31
   16ea0:	andeq	r6, r1, ip, lsl #31
   16ea4:	andeq	r6, r1, ip, lsl #31
   16ea8:	andeq	r6, r1, ip, lsl #31
   16eac:	andeq	r6, r1, ip, lsl #31
   16eb0:	andeq	r6, r1, ip, lsl #31
   16eb4:	andeq	r6, r1, ip, lsl #31
   16eb8:	andeq	r6, r1, ip, lsl #31
   16ebc:	andeq	r6, r1, ip, lsl #31
   16ec0:	andeq	r6, r1, ip, lsl #31
   16ec4:	andeq	r6, r1, ip, lsl #31
   16ec8:	andeq	r6, r1, ip, lsl #31
   16ecc:	andeq	r6, r1, ip, lsl #31
   16ed0:	andeq	r6, r1, ip, lsl #31
   16ed4:	andeq	r6, r1, ip, lsl #31
   16ed8:	andeq	r6, r1, ip, lsl #31
   16edc:	andeq	r6, r1, ip, lsl #31
   16ee0:	andeq	r6, r1, ip, lsl #31
   16ee4:	andeq	r6, r1, ip, lsl #31
   16ee8:	andeq	r6, r1, ip, lsl #31
   16eec:	andeq	r6, r1, ip, lsl #31
   16ef0:	andeq	r6, r1, ip, lsl #31
   16ef4:	andeq	r6, r1, ip, lsl #31
   16ef8:	andeq	r6, r1, ip, lsl #31
   16efc:	andeq	r7, r1, ip, lsl #1
   16f00:	strheq	r7, [r1], -r4
   16f04:	andeq	r6, r1, ip, lsl #31
   16f08:	andeq	r7, r1, ip, lsl #1
   16f0c:	andeq	r6, r1, ip, lsl #31
   16f10:	andeq	r7, r1, ip, lsl #1
   16f14:	andeq	r6, r1, ip, lsl #31
   16f18:	andeq	r6, r1, ip, lsl #31
   16f1c:	andeq	r6, r1, ip, lsl #31
   16f20:	andeq	r6, r1, ip, lsl #31
   16f24:	andeq	r6, r1, ip, lsl #31
   16f28:	andeq	r6, r1, ip, lsl #31
   16f2c:	andeq	r6, r1, ip, lsl #31
   16f30:	andeq	r6, r1, ip, lsl #31
   16f34:	andeq	r6, r1, ip, lsl #31
   16f38:	andeq	r6, r1, ip, lsl #31
   16f3c:	andeq	r6, r1, ip, lsl #31
   16f40:	andeq	r6, r1, ip, lsl #31
   16f44:	andeq	r6, r1, ip, lsl #31
   16f48:	andeq	r6, r1, ip, lsl #31
   16f4c:	andeq	r6, r1, ip, lsl #31
   16f50:	andeq	r6, r1, ip, lsl #31
   16f54:	andeq	r6, r1, ip, lsl #31
   16f58:	andeq	r6, r1, ip, lsl #31
   16f5c:	andeq	r6, r1, ip, lsl #31
   16f60:	andeq	r6, r1, ip, lsl #31
   16f64:	andeq	r6, r1, ip, lsl #31
   16f68:	andeq	r6, r1, ip, lsl #31
   16f6c:	andeq	r6, r1, ip, lsl #31
   16f70:	andeq	r6, r1, ip, lsl #31
   16f74:	andeq	r6, r1, ip, lsl #31
   16f78:	andeq	r6, r1, ip, lsl #31
   16f7c:	andeq	r7, r1, r8, asr #32
   16f80:	andeq	r7, r1, ip, lsl #1
   16f84:	andeq	r7, r1, r8, asr #32
   16f88:	andeq	r7, r1, r4, ror r0
   16f8c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16f90:	tst	r0, #1
   16f94:	bne	16fc0 <__assert_fail@plt+0x5aa0>
   16f98:	ldr	r1, [fp, #16]
   16f9c:	ubfx	r0, r6, #5, #3
   16fa0:	mov	r2, #1
   16fa4:	ldr	r0, [r1, r0, lsl #2]
   16fa8:	and	r1, r6, #31
   16fac:	tst	r0, r2, lsl r1
   16fb0:	beq	16fc0 <__assert_fail@plt+0x5aa0>
   16fb4:	mov	r0, r6
   16fb8:	mov	r1, r9
   16fbc:	b	16fd4 <__assert_fail@plt+0x5ab4>
   16fc0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16fc4:	mov	r1, r9
   16fc8:	cmp	r0, #0
   16fcc:	mov	r0, r6
   16fd0:	beq	17314 <__assert_fail@plt+0x5df4>
   16fd4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16fd8:	tst	r2, #1
   16fdc:	bne	178e4 <__assert_fail@plt+0x63c4>
   16fe0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16fe4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16fe8:	subs	r2, r2, #2
   16fec:	movwne	r2, #1
   16ff0:	orr	r2, r2, r3
   16ff4:	tst	r2, #1
   16ff8:	bne	17034 <__assert_fail@plt+0x5b14>
   16ffc:	cmp	r8, r4
   17000:	movcc	r2, #39	; 0x27
   17004:	strbcc	r2, [r5, r8]
   17008:	add	r2, r8, #1
   1700c:	cmp	r2, r4
   17010:	movcc	r3, #36	; 0x24
   17014:	strbcc	r3, [r5, r2]
   17018:	add	r2, r8, #2
   1701c:	add	r8, r8, #3
   17020:	cmp	r2, r4
   17024:	movcc	r3, #39	; 0x27
   17028:	strbcc	r3, [r5, r2]
   1702c:	mov	r2, #1
   17030:	str	r2, [fp, #-56]	; 0xffffffc8
   17034:	cmp	r8, r4
   17038:	movcc	r2, #92	; 0x5c
   1703c:	strbcc	r2, [r5, r8]
   17040:	add	r8, r8, #1
   17044:	b	17358 <__assert_fail@plt+0x5e38>
   17048:	cmp	lr, #1
   1704c:	beq	17074 <__assert_fail@plt+0x5b54>
   17050:	mov	r9, #0
   17054:	cmn	lr, #1
   17058:	bne	17080 <__assert_fail@plt+0x5b60>
   1705c:	ldrb	r0, [ip, #1]
   17060:	cmp	r0, #0
   17064:	beq	17074 <__assert_fail@plt+0x5b54>
   17068:	mvn	lr, #0
   1706c:	mov	sl, #0
   17070:	b	16f8c <__assert_fail@plt+0x5a6c>
   17074:	mov	r9, #0
   17078:	cmp	r7, #0
   1707c:	beq	17088 <__assert_fail@plt+0x5b68>
   17080:	mov	sl, #0
   17084:	b	16f8c <__assert_fail@plt+0x5a6c>
   17088:	mov	r1, #1
   1708c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17090:	cmp	r0, #2
   17094:	bne	170ac <__assert_fail@plt+0x5b8c>
   17098:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1709c:	mov	r9, r1
   170a0:	tst	r0, #1
   170a4:	beq	16f8c <__assert_fail@plt+0x5a6c>
   170a8:	b	178e4 <__assert_fail@plt+0x63c4>
   170ac:	mov	r9, r1
   170b0:	b	16f8c <__assert_fail@plt+0x5a6c>
   170b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   170b8:	cmp	r0, #2
   170bc:	bne	172f8 <__assert_fail@plt+0x5dd8>
   170c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   170c4:	tst	r0, #1
   170c8:	bne	178e4 <__assert_fail@plt+0x63c4>
   170cc:	mov	sl, #0
   170d0:	b	1730c <__assert_fail@plt+0x5dec>
   170d4:	mov	r0, #102	; 0x66
   170d8:	b	17380 <__assert_fail@plt+0x5e60>
   170dc:	mov	r2, #116	; 0x74
   170e0:	b	170f0 <__assert_fail@plt+0x5bd0>
   170e4:	mov	r0, #98	; 0x62
   170e8:	b	17380 <__assert_fail@plt+0x5e60>
   170ec:	mov	r2, #114	; 0x72
   170f0:	ldr	r0, [sp, #68]	; 0x44
   170f4:	tst	r0, #1
   170f8:	mov	r0, r2
   170fc:	bne	17380 <__assert_fail@plt+0x5e60>
   17100:	b	178e4 <__assert_fail@plt+0x63c4>
   17104:	ldr	r0, [sp, #84]	; 0x54
   17108:	tst	r0, #1
   1710c:	beq	1739c <__assert_fail@plt+0x5e7c>
   17110:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17114:	tst	r0, #1
   17118:	bne	179d0 <__assert_fail@plt+0x64b0>
   1711c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17120:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17124:	subs	r0, r0, #2
   17128:	movwne	r0, #1
   1712c:	orr	r0, r0, r1
   17130:	tst	r0, #1
   17134:	bne	17170 <__assert_fail@plt+0x5c50>
   17138:	cmp	r8, r4
   1713c:	movcc	r0, #39	; 0x27
   17140:	strbcc	r0, [r5, r8]
   17144:	add	r0, r8, #1
   17148:	cmp	r0, r4
   1714c:	movcc	r1, #36	; 0x24
   17150:	strbcc	r1, [r5, r0]
   17154:	add	r0, r8, #2
   17158:	add	r8, r8, #3
   1715c:	cmp	r0, r4
   17160:	movcc	r1, #39	; 0x27
   17164:	strbcc	r1, [r5, r0]
   17168:	mov	r0, #1
   1716c:	str	r0, [fp, #-56]	; 0xffffffc8
   17170:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17174:	cmp	r8, r4
   17178:	mov	r9, #0
   1717c:	mov	sl, #1
   17180:	mov	r6, #48	; 0x30
   17184:	movcc	r0, #92	; 0x5c
   17188:	strbcc	r0, [r5, r8]
   1718c:	add	r0, r8, #1
   17190:	cmp	r1, #2
   17194:	beq	17564 <__assert_fail@plt+0x6044>
   17198:	add	r1, r7, #1
   1719c:	cmp	r1, lr
   171a0:	bcs	17564 <__assert_fail@plt+0x6044>
   171a4:	ldrb	r1, [ip, r1]
   171a8:	sub	r1, r1, #48	; 0x30
   171ac:	uxtb	r1, r1
   171b0:	cmp	r1, #9
   171b4:	bhi	17564 <__assert_fail@plt+0x6044>
   171b8:	cmp	r0, r4
   171bc:	movcc	r1, #48	; 0x30
   171c0:	strbcc	r1, [r5, r0]
   171c4:	add	r0, r8, #2
   171c8:	add	r8, r8, #3
   171cc:	cmp	r0, r4
   171d0:	movcc	r1, #48	; 0x30
   171d4:	strbcc	r1, [r5, r0]
   171d8:	b	16f8c <__assert_fail@plt+0x5a6c>
   171dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   171e0:	mov	sl, #0
   171e4:	mov	r6, #63	; 0x3f
   171e8:	cmp	r0, #5
   171ec:	beq	1756c <__assert_fail@plt+0x604c>
   171f0:	cmp	r0, #2
   171f4:	bne	17614 <__assert_fail@plt+0x60f4>
   171f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   171fc:	mov	r9, #0
   17200:	tst	r0, #1
   17204:	beq	16f8c <__assert_fail@plt+0x5a6c>
   17208:	b	178e4 <__assert_fail@plt+0x63c4>
   1720c:	mov	r0, #118	; 0x76
   17210:	b	17380 <__assert_fail@plt+0x5e60>
   17214:	mov	r0, #1
   17218:	mov	r6, #39	; 0x27
   1721c:	str	r0, [sp, #60]	; 0x3c
   17220:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17224:	cmp	r0, #2
   17228:	bne	173b8 <__assert_fail@plt+0x5e98>
   1722c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17230:	tst	r0, #1
   17234:	bne	178e4 <__assert_fail@plt+0x63c4>
   17238:	ldr	r2, [sp, #56]	; 0x38
   1723c:	clz	r1, r4
   17240:	mov	sl, #0
   17244:	mov	r9, #1
   17248:	lsr	r1, r1, #5
   1724c:	cmp	r2, #0
   17250:	mov	r0, r2
   17254:	movwne	r0, #1
   17258:	orrs	r0, r0, r1
   1725c:	moveq	r2, r4
   17260:	moveq	r4, r0
   17264:	cmp	r8, r4
   17268:	str	r2, [sp, #56]	; 0x38
   1726c:	movcc	r0, #39	; 0x27
   17270:	strbcc	r0, [r5, r8]
   17274:	add	r0, r8, #1
   17278:	cmp	r0, r4
   1727c:	movcc	r1, #92	; 0x5c
   17280:	strbcc	r1, [r5, r0]
   17284:	add	r0, r8, #2
   17288:	add	r8, r8, #3
   1728c:	cmp	r0, r4
   17290:	movcc	r1, #39	; 0x27
   17294:	strbcc	r1, [r5, r0]
   17298:	mov	r0, #0
   1729c:	str	r0, [fp, #-56]	; 0xffffffc8
   172a0:	b	16f8c <__assert_fail@plt+0x5a6c>
   172a4:	ldr	r0, [sp, #40]	; 0x28
   172a8:	str	r4, [sp, #88]	; 0x58
   172ac:	cmp	r0, #1
   172b0:	bne	173c0 <__assert_fail@plt+0x5ea0>
   172b4:	str	lr, [sp, #28]
   172b8:	bl	11370 <__ctype_b_loc@plt>
   172bc:	ldr	r0, [r0]
   172c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   172c4:	mov	r2, #1
   172c8:	add	r0, r0, r6, lsl #1
   172cc:	ldrb	r0, [r0, #1]
   172d0:	ubfx	r9, r0, #6, #1
   172d4:	ldr	r0, [sp, #52]	; 0x34
   172d8:	cmp	r2, #1
   172dc:	orr	r0, r9, r0
   172e0:	bhi	1761c <__assert_fail@plt+0x60fc>
   172e4:	tst	r0, #1
   172e8:	beq	1761c <__assert_fail@plt+0x60fc>
   172ec:	ldr	lr, [sp, #28]
   172f0:	ldr	r4, [sp, #88]	; 0x58
   172f4:	b	16f8c <__assert_fail@plt+0x5a6c>
   172f8:	ldr	r1, [sp, #48]	; 0x30
   172fc:	mov	sl, #0
   17300:	mov	r0, #92	; 0x5c
   17304:	cmp	r1, #0
   17308:	beq	17380 <__assert_fail@plt+0x5e60>
   1730c:	mov	r6, #92	; 0x5c
   17310:	mov	r9, #0
   17314:	cmp	sl, #0
   17318:	bne	17350 <__assert_fail@plt+0x5e30>
   1731c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17320:	tst	r0, #1
   17324:	beq	17350 <__assert_fail@plt+0x5e30>
   17328:	cmp	r8, r4
   1732c:	movcc	r0, #39	; 0x27
   17330:	strbcc	r0, [r5, r8]
   17334:	add	r0, r8, #1
   17338:	add	r8, r8, #2
   1733c:	cmp	r0, r4
   17340:	movcc	r1, #39	; 0x27
   17344:	strbcc	r1, [r5, r0]
   17348:	mov	r0, #0
   1734c:	str	r0, [fp, #-56]	; 0xffffffc8
   17350:	mov	r1, r9
   17354:	mov	r0, r6
   17358:	cmp	r8, r4
   1735c:	strbcc	r0, [r5, r8]
   17360:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17364:	add	r8, r8, #1
   17368:	and	r0, r0, r1
   1736c:	str	r0, [fp, #-48]	; 0xffffffd0
   17370:	add	r7, r7, #1
   17374:	cmn	lr, #1
   17378:	bne	16cb8 <__assert_fail@plt+0x5798>
   1737c:	b	16cc4 <__assert_fail@plt+0x57a4>
   17380:	ldr	r1, [sp, #84]	; 0x54
   17384:	mov	sl, #0
   17388:	mov	r9, #0
   1738c:	tst	r1, #1
   17390:	mov	r1, #0
   17394:	beq	16f8c <__assert_fail@plt+0x5a6c>
   17398:	b	16fd4 <__assert_fail@plt+0x5ab4>
   1739c:	ldr	r0, [sp, #36]	; 0x24
   173a0:	mov	r6, #0
   173a4:	mov	sl, #0
   173a8:	mov	r9, #0
   173ac:	cmp	r0, #0
   173b0:	beq	16f8c <__assert_fail@plt+0x5a6c>
   173b4:	b	17370 <__assert_fail@plt+0x5e50>
   173b8:	mov	r9, #1
   173bc:	b	16f8c <__assert_fail@plt+0x5a6c>
   173c0:	mov	r0, #0
   173c4:	cmn	lr, #1
   173c8:	sub	r4, fp, #40	; 0x28
   173cc:	str	r0, [fp, #-36]	; 0xffffffdc
   173d0:	str	r0, [fp, #-40]	; 0xffffffd8
   173d4:	bne	173e8 <__assert_fail@plt+0x5ec8>
   173d8:	mov	r0, ip
   173dc:	bl	113a0 <strlen@plt>
   173e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   173e4:	mov	lr, r0
   173e8:	ldr	r0, [sp, #72]	; 0x48
   173ec:	mov	r9, #1
   173f0:	mov	r2, #0
   173f4:	str	lr, [sp, #28]
   173f8:	add	r0, r0, r7
   173fc:	str	r0, [sp, #20]
   17400:	b	17444 <__assert_fail@plt+0x5f24>
   17404:	ldr	r5, [sp, #44]	; 0x2c
   17408:	add	r5, r0, r5
   1740c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17410:	bl	112c8 <iswprint@plt>
   17414:	cmp	r0, #0
   17418:	sub	r4, fp, #40	; 0x28
   1741c:	movwne	r0, #1
   17420:	and	r9, r9, r0
   17424:	mov	r0, r4
   17428:	bl	11280 <mbsinit@plt>
   1742c:	mov	r2, r5
   17430:	ldr	lr, [sp, #28]
   17434:	ldr	r5, [fp, #-84]	; 0xffffffac
   17438:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1743c:	cmp	r0, #0
   17440:	bne	172d4 <__assert_fail@plt+0x5db4>
   17444:	add	r0, r2, r7
   17448:	str	r2, [sp, #44]	; 0x2c
   1744c:	mov	r3, r4
   17450:	add	r1, ip, r0
   17454:	str	r0, [sp, #24]
   17458:	sub	r2, lr, r0
   1745c:	sub	r0, fp, #44	; 0x2c
   17460:	bl	1a480 <__assert_fail@plt+0x8f60>
   17464:	cmp	r0, #0
   17468:	beq	1780c <__assert_fail@plt+0x62ec>
   1746c:	cmn	r0, #1
   17470:	beq	177c8 <__assert_fail@plt+0x62a8>
   17474:	ldr	lr, [sp, #28]
   17478:	cmn	r0, #2
   1747c:	beq	177d0 <__assert_fail@plt+0x62b0>
   17480:	ldr	r2, [sp, #64]	; 0x40
   17484:	ldr	r4, [sp, #88]	; 0x58
   17488:	ldr	ip, [sp, #84]	; 0x54
   1748c:	cmp	r0, #2
   17490:	mov	r1, #0
   17494:	movwcc	r1, #1
   17498:	eor	r2, r2, #1
   1749c:	orrs	r1, r2, r1
   174a0:	bne	17404 <__assert_fail@plt+0x5ee4>
   174a4:	ldr	r1, [sp, #44]	; 0x2c
   174a8:	ldr	r2, [sp, #20]
   174ac:	add	r1, r2, r1
   174b0:	sub	r2, r0, #1
   174b4:	b	174c4 <__assert_fail@plt+0x5fa4>
   174b8:	add	r1, r1, #1
   174bc:	subs	r2, r2, #1
   174c0:	beq	17404 <__assert_fail@plt+0x5ee4>
   174c4:	ldrb	r3, [r1]
   174c8:	sub	r3, r3, #91	; 0x5b
   174cc:	cmp	r3, #33	; 0x21
   174d0:	bhi	174b8 <__assert_fail@plt+0x5f98>
   174d4:	add	r5, pc, #0
   174d8:	ldr	pc, [r5, r3, lsl #2]
   174dc:	andeq	r7, r1, r0, asr #17
   174e0:	andeq	r7, r1, r0, asr #17
   174e4:			; <UNDEFINED> instruction: 0x000174b8
   174e8:	andeq	r7, r1, r0, asr #17
   174ec:			; <UNDEFINED> instruction: 0x000174b8
   174f0:	andeq	r7, r1, r0, asr #17
   174f4:			; <UNDEFINED> instruction: 0x000174b8
   174f8:			; <UNDEFINED> instruction: 0x000174b8
   174fc:			; <UNDEFINED> instruction: 0x000174b8
   17500:			; <UNDEFINED> instruction: 0x000174b8
   17504:			; <UNDEFINED> instruction: 0x000174b8
   17508:			; <UNDEFINED> instruction: 0x000174b8
   1750c:			; <UNDEFINED> instruction: 0x000174b8
   17510:			; <UNDEFINED> instruction: 0x000174b8
   17514:			; <UNDEFINED> instruction: 0x000174b8
   17518:			; <UNDEFINED> instruction: 0x000174b8
   1751c:			; <UNDEFINED> instruction: 0x000174b8
   17520:			; <UNDEFINED> instruction: 0x000174b8
   17524:			; <UNDEFINED> instruction: 0x000174b8
   17528:			; <UNDEFINED> instruction: 0x000174b8
   1752c:			; <UNDEFINED> instruction: 0x000174b8
   17530:			; <UNDEFINED> instruction: 0x000174b8
   17534:			; <UNDEFINED> instruction: 0x000174b8
   17538:			; <UNDEFINED> instruction: 0x000174b8
   1753c:			; <UNDEFINED> instruction: 0x000174b8
   17540:			; <UNDEFINED> instruction: 0x000174b8
   17544:			; <UNDEFINED> instruction: 0x000174b8
   17548:			; <UNDEFINED> instruction: 0x000174b8
   1754c:			; <UNDEFINED> instruction: 0x000174b8
   17550:			; <UNDEFINED> instruction: 0x000174b8
   17554:			; <UNDEFINED> instruction: 0x000174b8
   17558:			; <UNDEFINED> instruction: 0x000174b8
   1755c:			; <UNDEFINED> instruction: 0x000174b8
   17560:	andeq	r7, r1, r0, asr #17
   17564:	mov	r8, r0
   17568:	b	16f8c <__assert_fail@plt+0x5a6c>
   1756c:	ldr	r0, [sp, #32]
   17570:	cmp	r0, #0
   17574:	beq	17614 <__assert_fail@plt+0x60f4>
   17578:	add	r0, r7, #2
   1757c:	cmp	r0, lr
   17580:	bcs	17614 <__assert_fail@plt+0x60f4>
   17584:	add	r1, r7, ip
   17588:	ldrb	r1, [r1, #1]
   1758c:	cmp	r1, #63	; 0x3f
   17590:	bne	17614 <__assert_fail@plt+0x60f4>
   17594:	ldrb	r9, [ip, r0]
   17598:	sub	r2, r9, #33	; 0x21
   1759c:	cmp	r2, #29
   175a0:	bhi	17614 <__assert_fail@plt+0x60f4>
   175a4:	movw	r1, #20929	; 0x51c1
   175a8:	mov	r3, #1
   175ac:	movt	r1, #14336	; 0x3800
   175b0:	tst	r1, r3, lsl r2
   175b4:	beq	17614 <__assert_fail@plt+0x60f4>
   175b8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   175bc:	tst	r1, #1
   175c0:	bne	178e4 <__assert_fail@plt+0x63c4>
   175c4:	cmp	r8, r4
   175c8:	add	r2, r8, #1
   175cc:	mov	r6, r9
   175d0:	mov	r7, r0
   175d4:	mov	r9, #0
   175d8:	movcc	r1, #63	; 0x3f
   175dc:	strbcc	r1, [r5, r8]
   175e0:	cmp	r2, r4
   175e4:	movcc	r1, #34	; 0x22
   175e8:	strbcc	r1, [r5, r2]
   175ec:	add	r2, r8, #2
   175f0:	cmp	r2, r4
   175f4:	movcc	r1, #34	; 0x22
   175f8:	strbcc	r1, [r5, r2]
   175fc:	add	r2, r8, #3
   17600:	add	r8, r8, #4
   17604:	cmp	r2, r4
   17608:	movcc	r1, #63	; 0x3f
   1760c:	strbcc	r1, [r5, r2]
   17610:	b	16f8c <__assert_fail@plt+0x5a6c>
   17614:	mov	r9, #0
   17618:	b	16f8c <__assert_fail@plt+0x5a6c>
   1761c:	ldr	lr, [sp, #28]
   17620:	ldr	r4, [fp, #-56]	; 0xffffffc8
   17624:	add	r1, r2, r7
   17628:	mov	r2, #0
   1762c:	str	r1, [sp, #44]	; 0x2c
   17630:	tst	r0, #1
   17634:	bne	17750 <__assert_fail@plt+0x6230>
   17638:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1763c:	tst	r1, #1
   17640:	bne	178e0 <__assert_fail@plt+0x63c0>
   17644:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17648:	subs	r2, r1, #2
   1764c:	movwne	r2, #1
   17650:	orr	r2, r2, r4
   17654:	tst	r2, #1
   17658:	bne	1769c <__assert_fail@plt+0x617c>
   1765c:	ldr	r1, [sp, #88]	; 0x58
   17660:	add	r2, r8, #1
   17664:	mov	r4, #1
   17668:	cmp	r8, r1
   1766c:	movcc	r1, #39	; 0x27
   17670:	strbcc	r1, [r5, r8]
   17674:	ldr	r1, [sp, #88]	; 0x58
   17678:	cmp	r2, r1
   1767c:	movcc	r1, #36	; 0x24
   17680:	strbcc	r1, [r5, r2]
   17684:	ldr	r1, [sp, #88]	; 0x58
   17688:	add	r2, r8, #2
   1768c:	add	r8, r8, #3
   17690:	cmp	r2, r1
   17694:	movcc	r1, #39	; 0x27
   17698:	strbcc	r1, [r5, r2]
   1769c:	ldr	r1, [sp, #88]	; 0x58
   176a0:	add	r2, r8, #1
   176a4:	cmp	r8, r1
   176a8:	movcc	r1, #92	; 0x5c
   176ac:	strbcc	r1, [r5, r8]
   176b0:	ldr	r1, [sp, #88]	; 0x58
   176b4:	cmp	r2, r1
   176b8:	bcs	176cc <__assert_fail@plt+0x61ac>
   176bc:	uxtb	r3, r6
   176c0:	mov	r1, #48	; 0x30
   176c4:	orr	r3, r1, r3, lsr #6
   176c8:	strb	r3, [r5, r2]
   176cc:	ldr	r1, [sp, #88]	; 0x58
   176d0:	add	r2, r8, #2
   176d4:	add	r8, r8, #3
   176d8:	cmp	r2, r1
   176dc:	lsrcc	r3, r6, #3
   176e0:	movcc	r1, #6
   176e4:	bficc	r3, r1, #3, #29
   176e8:	mov	r1, #6
   176ec:	bfi	r6, r1, #3, #29
   176f0:	strbcc	r3, [r5, r2]
   176f4:	mov	r2, #1
   176f8:	b	17778 <__assert_fail@plt+0x6258>
   176fc:	ldr	r1, [sp, #88]	; 0x58
   17700:	ldr	r5, [fp, #-84]	; 0xffffffac
   17704:	ldr	r4, [sp, #88]	; 0x58
   17708:	cmp	r8, r1
   1770c:	movcc	r1, #39	; 0x27
   17710:	strbcc	r1, [r5, r8]
   17714:	add	r1, r8, #1
   17718:	add	r8, r8, #2
   1771c:	cmp	r1, r4
   17720:	movcc	r4, #39	; 0x27
   17724:	strbcc	r4, [r5, r1]
   17728:	mov	r4, #0
   1772c:	ldr	r1, [sp, #88]	; 0x58
   17730:	cmp	r8, r1
   17734:	ldr	r1, [sp, #72]	; 0x48
   17738:	strbcc	r6, [r5, r8]
   1773c:	add	r8, r8, #1
   17740:	ldrb	r6, [r1, r7]
   17744:	mov	r7, r3
   17748:	tst	r0, #1
   1774c:	beq	17638 <__assert_fail@plt+0x6118>
   17750:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17754:	tst	r1, #1
   17758:	beq	17770 <__assert_fail@plt+0x6250>
   1775c:	ldr	r1, [sp, #88]	; 0x58
   17760:	cmp	r8, r1
   17764:	movcc	r1, #92	; 0x5c
   17768:	strbcc	r1, [r5, r8]
   1776c:	add	r8, r8, #1
   17770:	mov	r1, #0
   17774:	str	r1, [fp, #-52]	; 0xffffffcc
   17778:	ldr	r1, [sp, #44]	; 0x2c
   1777c:	add	r3, r7, #1
   17780:	and	sl, r2, #1
   17784:	cmp	r1, r3
   17788:	bls	177ac <__assert_fail@plt+0x628c>
   1778c:	cmp	sl, #0
   17790:	mvn	r5, r4
   17794:	movwne	sl, #1
   17798:	orr	r5, r5, sl
   1779c:	tst	r5, #1
   177a0:	beq	176fc <__assert_fail@plt+0x61dc>
   177a4:	ldr	r5, [fp, #-84]	; 0xffffffac
   177a8:	b	1772c <__assert_fail@plt+0x620c>
   177ac:	str	r4, [fp, #-56]	; 0xffffffc8
   177b0:	ldr	r4, [sp, #88]	; 0x58
   177b4:	cmp	sl, #0
   177b8:	movwne	sl, #1
   177bc:	cmp	sl, #0
   177c0:	beq	1731c <__assert_fail@plt+0x5dfc>
   177c4:	b	17350 <__assert_fail@plt+0x5e30>
   177c8:	mov	r9, #0
   177cc:	b	1780c <__assert_fail@plt+0x62ec>
   177d0:	ldr	r0, [sp, #24]
   177d4:	mov	r9, #0
   177d8:	cmp	lr, r0
   177dc:	bls	1780c <__assert_fail@plt+0x62ec>
   177e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   177e4:	ldr	r2, [sp, #44]	; 0x2c
   177e8:	add	r0, ip, r7
   177ec:	ldrb	r1, [r0, r2]
   177f0:	cmp	r1, #0
   177f4:	beq	172d4 <__assert_fail@plt+0x5db4>
   177f8:	add	r2, r2, #1
   177fc:	add	r1, r7, r2
   17800:	cmp	r1, lr
   17804:	bcc	177ec <__assert_fail@plt+0x62cc>
   17808:	b	172d4 <__assert_fail@plt+0x5db4>
   1780c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17810:	ldr	r2, [sp, #44]	; 0x2c
   17814:	b	172d4 <__assert_fail@plt+0x5db4>
   17818:	mov	lr, r7
   1781c:	b	17824 <__assert_fail@plt+0x6304>
   17820:	mvn	lr, #0
   17824:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17828:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1782c:	eor	r0, r1, #2
   17830:	orr	r0, r0, r8
   17834:	clz	r0, r0
   17838:	lsr	r0, r0, #5
   1783c:	tst	r2, r0
   17840:	bne	178e4 <__assert_fail@plt+0x63c4>
   17844:	subs	r0, r1, #2
   17848:	movwne	r0, #1
   1784c:	orr	r0, r2, r0
   17850:	tst	r0, #1
   17854:	ldreq	r0, [sp, #60]	; 0x3c
   17858:	eoreq	r0, r0, #1
   1785c:	tsteq	r0, #1
   17860:	bne	17978 <__assert_fail@plt+0x6458>
   17864:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17868:	mov	sl, lr
   1786c:	tst	r0, #1
   17870:	bne	17944 <__assert_fail@plt+0x6424>
   17874:	ldr	r6, [sp, #56]	; 0x38
   17878:	mov	r9, #0
   1787c:	cmp	r6, #0
   17880:	beq	17970 <__assert_fail@plt+0x6450>
   17884:	ldr	r0, [sp, #84]	; 0x54
   17888:	mov	r1, #0
   1788c:	mov	r7, #2
   17890:	cmp	r4, #0
   17894:	str	r1, [fp, #-48]	; 0xffffffd0
   17898:	mov	r1, #0
   1789c:	str	r1, [fp, #-76]	; 0xffffffb4
   178a0:	beq	16a40 <__assert_fail@plt+0x5520>
   178a4:	b	17978 <__assert_fail@plt+0x6458>
   178a8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   178ac:	ldr	r1, [fp, #12]
   178b0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   178b4:	mov	lr, r4
   178b8:	mov	r4, r6
   178bc:	b	17904 <__assert_fail@plt+0x63e4>
   178c0:	tst	ip, #1
   178c4:	ldr	r5, [fp, #-84]	; 0xffffffac
   178c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   178cc:	ldr	r1, [fp, #12]
   178d0:	mov	r0, #2
   178d4:	movwne	r0, #4
   178d8:	mov	r2, r0
   178dc:	b	17904 <__assert_fail@plt+0x63e4>
   178e0:	ldr	r4, [sp, #88]	; 0x58
   178e4:	ldr	r1, [sp, #84]	; 0x54
   178e8:	mov	r0, #2
   178ec:	tst	r1, #1
   178f0:	movwne	r0, #4
   178f4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   178f8:	ldr	r1, [fp, #12]
   178fc:	cmp	r2, #2
   17900:	moveq	r2, r0
   17904:	mov	r0, #0
   17908:	bic	r1, r1, #2
   1790c:	str	r2, [sp]
   17910:	mov	r2, ip
   17914:	mov	r3, lr
   17918:	str	r0, [sp, #8]
   1791c:	ldr	r0, [sp, #76]	; 0x4c
   17920:	str	r1, [sp, #4]
   17924:	mov	r1, r4
   17928:	str	r0, [sp, #12]
   1792c:	ldr	r0, [sp, #80]	; 0x50
   17930:	str	r0, [sp, #16]
   17934:	mov	r0, r5
   17938:	bl	169b0 <__assert_fail@plt+0x5490>
   1793c:	mov	r8, r0
   17940:	b	179c4 <__assert_fail@plt+0x64a4>
   17944:	mov	r0, #5
   17948:	ldr	r1, [sp, #56]	; 0x38
   1794c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17950:	mov	r3, sl
   17954:	str	r0, [sp]
   17958:	ldr	r0, [fp, #12]
   1795c:	str	r0, [sp, #4]
   17960:	ldr	r0, [fp, #16]
   17964:	str	r0, [sp, #8]
   17968:	ldr	r0, [sp, #76]	; 0x4c
   1796c:	b	17928 <__assert_fail@plt+0x6408>
   17970:	mov	r0, #0
   17974:	str	r0, [fp, #-76]	; 0xffffffb4
   17978:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1797c:	cmp	r1, #0
   17980:	beq	179b8 <__assert_fail@plt+0x6498>
   17984:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17988:	tst	r0, #1
   1798c:	bne	179b8 <__assert_fail@plt+0x6498>
   17990:	ldrb	r0, [r1]
   17994:	cmp	r0, #0
   17998:	beq	179b8 <__assert_fail@plt+0x6498>
   1799c:	add	r1, r1, #1
   179a0:	cmp	r8, r4
   179a4:	strbcc	r0, [r5, r8]
   179a8:	add	r8, r8, #1
   179ac:	ldrb	r0, [r1], #1
   179b0:	cmp	r0, #0
   179b4:	bne	179a0 <__assert_fail@plt+0x6480>
   179b8:	cmp	r8, r4
   179bc:	movcc	r0, #0
   179c0:	strbcc	r0, [r5, r8]
   179c4:	mov	r0, r8
   179c8:	sub	sp, fp, #28
   179cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179d0:	mov	r0, #4
   179d4:	b	178f4 <__assert_fail@plt+0x63d4>
   179d8:	bl	114d8 <abort@plt>
   179dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179e0:	add	fp, sp, #28
   179e4:	sub	sp, sp, #28
   179e8:	movw	r5, #53696	; 0xd1c0
   179ec:	cmp	r2, #0
   179f0:	mov	r4, r1
   179f4:	mov	r7, r0
   179f8:	str	r0, [sp, #20]
   179fc:	movt	r5, #2
   17a00:	movne	r5, r2
   17a04:	bl	113d0 <__errno_location@plt>
   17a08:	mov	sl, r0
   17a0c:	ldr	r2, [r5, #40]	; 0x28
   17a10:	ldr	r3, [r5, #44]	; 0x2c
   17a14:	ldm	r5, {r0, r1}
   17a18:	orr	r8, r1, #1
   17a1c:	add	r9, r5, #8
   17a20:	mov	r1, #0
   17a24:	ldr	r6, [sl]
   17a28:	stm	sp, {r0, r8, r9}
   17a2c:	mov	r0, #0
   17a30:	str	r2, [sp, #12]
   17a34:	str	r3, [sp, #16]
   17a38:	mov	r2, r7
   17a3c:	mov	r3, r4
   17a40:	str	r6, [sp, #24]
   17a44:	mov	r6, r4
   17a48:	bl	169b0 <__assert_fail@plt+0x5490>
   17a4c:	add	r7, r0, #1
   17a50:	mov	r0, r7
   17a54:	bl	19048 <__assert_fail@plt+0x7b28>
   17a58:	mov	r4, r0
   17a5c:	ldr	r0, [r5]
   17a60:	ldr	r2, [r5, #44]	; 0x2c
   17a64:	ldr	r1, [r5, #40]	; 0x28
   17a68:	mov	r3, r6
   17a6c:	stm	sp, {r0, r8, r9}
   17a70:	str	r2, [sp, #16]
   17a74:	ldr	r2, [sp, #20]
   17a78:	str	r1, [sp, #12]
   17a7c:	mov	r0, r4
   17a80:	mov	r1, r7
   17a84:	bl	169b0 <__assert_fail@plt+0x5490>
   17a88:	ldr	r0, [sp, #24]
   17a8c:	str	r0, [sl]
   17a90:	mov	r0, r4
   17a94:	sub	sp, fp, #28
   17a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17aa0:	add	fp, sp, #28
   17aa4:	sub	sp, sp, #36	; 0x24
   17aa8:	movw	r8, #53696	; 0xd1c0
   17aac:	cmp	r3, #0
   17ab0:	mov	r4, r2
   17ab4:	str	r2, [sp, #24]
   17ab8:	mov	r5, r1
   17abc:	mov	r6, r0
   17ac0:	str	r0, [sp, #20]
   17ac4:	movt	r8, #2
   17ac8:	movne	r8, r3
   17acc:	bl	113d0 <__errno_location@plt>
   17ad0:	str	r0, [sp, #28]
   17ad4:	ldr	r1, [r8, #40]	; 0x28
   17ad8:	ldr	r2, [r8, #44]	; 0x2c
   17adc:	ldr	r7, [r0]
   17ae0:	cmp	r4, #0
   17ae4:	add	sl, r8, #8
   17ae8:	mov	r0, #0
   17aec:	ldm	r8, {r3, r9}
   17af0:	orreq	r9, r9, #1
   17af4:	stm	sp, {r3, r9, sl}
   17af8:	str	r1, [sp, #12]
   17afc:	str	r2, [sp, #16]
   17b00:	mov	r1, #0
   17b04:	mov	r2, r6
   17b08:	mov	r3, r5
   17b0c:	str	r7, [sp, #32]
   17b10:	mov	r7, r5
   17b14:	bl	169b0 <__assert_fail@plt+0x5490>
   17b18:	add	r4, r0, #1
   17b1c:	mov	r5, r0
   17b20:	mov	r0, r4
   17b24:	bl	19048 <__assert_fail@plt+0x7b28>
   17b28:	mov	r6, r0
   17b2c:	ldr	r0, [r8]
   17b30:	ldr	r2, [r8, #44]	; 0x2c
   17b34:	ldr	r1, [r8, #40]	; 0x28
   17b38:	mov	r3, r7
   17b3c:	stm	sp, {r0, r9, sl}
   17b40:	str	r2, [sp, #16]
   17b44:	ldr	r2, [sp, #20]
   17b48:	str	r1, [sp, #12]
   17b4c:	mov	r0, r6
   17b50:	mov	r1, r4
   17b54:	bl	169b0 <__assert_fail@plt+0x5490>
   17b58:	ldr	r0, [sp, #24]
   17b5c:	ldr	r1, [sp, #32]
   17b60:	ldr	r2, [sp, #28]
   17b64:	cmp	r0, #0
   17b68:	str	r1, [r2]
   17b6c:	strne	r5, [r0]
   17b70:	mov	r0, r6
   17b74:	sub	sp, fp, #28
   17b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17b80:	add	fp, sp, #24
   17b84:	movw	r5, #53564	; 0xd13c
   17b88:	movw	r8, #53560	; 0xd138
   17b8c:	movt	r5, #2
   17b90:	movt	r8, #2
   17b94:	ldr	r0, [r5]
   17b98:	ldr	r4, [r8]
   17b9c:	cmp	r0, #2
   17ba0:	blt	17bcc <__assert_fail@plt+0x66ac>
   17ba4:	add	r7, r4, #12
   17ba8:	mov	r6, #0
   17bac:	ldr	r0, [r7, r6, lsl #3]
   17bb0:	bl	12ea4 <__assert_fail@plt+0x1984>
   17bb4:	ldr	r1, [r5]
   17bb8:	add	r2, r6, #2
   17bbc:	add	r0, r6, #1
   17bc0:	mov	r6, r0
   17bc4:	cmp	r2, r1
   17bc8:	blt	17bac <__assert_fail@plt+0x668c>
   17bcc:	ldr	r0, [r4, #4]
   17bd0:	movw	r9, #53744	; 0xd1f0
   17bd4:	movw	r7, #53568	; 0xd140
   17bd8:	movt	r9, #2
   17bdc:	movt	r7, #2
   17be0:	cmp	r0, r9
   17be4:	beq	17bf4 <__assert_fail@plt+0x66d4>
   17be8:	bl	12ea4 <__assert_fail@plt+0x1984>
   17bec:	mov	r0, #256	; 0x100
   17bf0:	stm	r7, {r0, r9}
   17bf4:	cmp	r4, r7
   17bf8:	beq	17c08 <__assert_fail@plt+0x66e8>
   17bfc:	mov	r0, r4
   17c00:	bl	12ea4 <__assert_fail@plt+0x1984>
   17c04:	str	r7, [r8]
   17c08:	mov	r0, #1
   17c0c:	str	r0, [r5]
   17c10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17c14:	movw	r3, #53696	; 0xd1c0
   17c18:	mvn	r2, #0
   17c1c:	movt	r3, #2
   17c20:	b	17c24 <__assert_fail@plt+0x6704>
   17c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c28:	add	fp, sp, #28
   17c2c:	sub	sp, sp, #44	; 0x2c
   17c30:	mov	r7, r3
   17c34:	str	r2, [sp, #36]	; 0x24
   17c38:	str	r1, [sp, #32]
   17c3c:	mov	r5, r0
   17c40:	bl	113d0 <__errno_location@plt>
   17c44:	cmp	r5, #0
   17c48:	bmi	17db8 <__assert_fail@plt+0x6898>
   17c4c:	cmn	r5, #-2147483647	; 0x80000001
   17c50:	beq	17db8 <__assert_fail@plt+0x6898>
   17c54:	movw	r8, #53564	; 0xd13c
   17c58:	movw	r4, #53560	; 0xd138
   17c5c:	str	r0, [sp, #28]
   17c60:	ldr	r0, [r0]
   17c64:	movt	r8, #2
   17c68:	movt	r4, #2
   17c6c:	ldr	r1, [r8]
   17c70:	ldr	r6, [r4]
   17c74:	str	r0, [sp, #24]
   17c78:	cmp	r1, r5
   17c7c:	ble	17c88 <__assert_fail@plt+0x6768>
   17c80:	mov	sl, r6
   17c84:	b	17cf4 <__assert_fail@plt+0x67d4>
   17c88:	movw	r9, #53568	; 0xd140
   17c8c:	mov	r0, #8
   17c90:	str	r1, [fp, #-32]	; 0xffffffe0
   17c94:	sub	r1, r5, r1
   17c98:	mvn	r3, #-2147483648	; 0x80000000
   17c9c:	movt	r9, #2
   17ca0:	str	r0, [sp]
   17ca4:	add	r2, r1, #1
   17ca8:	sub	r1, fp, #32
   17cac:	subs	r0, r6, r9
   17cb0:	movne	r0, r6
   17cb4:	bl	19248 <__assert_fail@plt+0x7d28>
   17cb8:	mov	sl, r0
   17cbc:	cmp	r6, r9
   17cc0:	str	r0, [r4]
   17cc4:	bne	17cd0 <__assert_fail@plt+0x67b0>
   17cc8:	ldrd	r0, [r9]
   17ccc:	stm	sl, {r0, r1}
   17cd0:	ldr	r1, [r8]
   17cd4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17cd8:	add	r0, sl, r1, lsl #3
   17cdc:	sub	r1, r2, r1
   17ce0:	lsl	r2, r1, #3
   17ce4:	mov	r1, #0
   17ce8:	bl	113e8 <memset@plt>
   17cec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17cf0:	str	r0, [r8]
   17cf4:	mov	r9, sl
   17cf8:	ldm	r7, {r0, r1}
   17cfc:	orr	r8, r1, #1
   17d00:	add	r1, r7, #8
   17d04:	ldr	r2, [r7, #40]	; 0x28
   17d08:	ldr	r3, [r7, #44]	; 0x2c
   17d0c:	ldr	r6, [r9, r5, lsl #3]!
   17d10:	str	r1, [sp, #20]
   17d14:	ldr	r4, [r9, #4]!
   17d18:	stm	sp, {r0, r8}
   17d1c:	add	r0, sp, #8
   17d20:	stm	r0, {r1, r2, r3}
   17d24:	ldr	r2, [sp, #32]
   17d28:	ldr	r3, [sp, #36]	; 0x24
   17d2c:	mov	r1, r6
   17d30:	mov	r0, r4
   17d34:	bl	169b0 <__assert_fail@plt+0x5490>
   17d38:	cmp	r6, r0
   17d3c:	bhi	17da0 <__assert_fail@plt+0x6880>
   17d40:	add	r6, r0, #1
   17d44:	movw	r0, #53744	; 0xd1f0
   17d48:	movt	r0, #2
   17d4c:	str	r6, [sl, r5, lsl #3]
   17d50:	cmp	r4, r0
   17d54:	beq	17d60 <__assert_fail@plt+0x6840>
   17d58:	mov	r0, r4
   17d5c:	bl	12ea4 <__assert_fail@plt+0x1984>
   17d60:	mov	r0, r6
   17d64:	bl	19048 <__assert_fail@plt+0x7b28>
   17d68:	str	r0, [r9]
   17d6c:	mov	r4, r0
   17d70:	add	r3, sp, #8
   17d74:	ldr	r0, [r7]
   17d78:	ldr	r1, [r7, #40]	; 0x28
   17d7c:	ldr	r2, [r7, #44]	; 0x2c
   17d80:	stm	sp, {r0, r8}
   17d84:	ldr	r0, [sp, #20]
   17d88:	stm	r3, {r0, r1, r2}
   17d8c:	ldr	r2, [sp, #32]
   17d90:	ldr	r3, [sp, #36]	; 0x24
   17d94:	mov	r0, r4
   17d98:	mov	r1, r6
   17d9c:	bl	169b0 <__assert_fail@plt+0x5490>
   17da0:	ldr	r0, [sp, #28]
   17da4:	ldr	r1, [sp, #24]
   17da8:	str	r1, [r0]
   17dac:	mov	r0, r4
   17db0:	sub	sp, fp, #28
   17db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17db8:	bl	114d8 <abort@plt>
   17dbc:	movw	r3, #53696	; 0xd1c0
   17dc0:	movt	r3, #2
   17dc4:	b	17c24 <__assert_fail@plt+0x6704>
   17dc8:	movw	r3, #53696	; 0xd1c0
   17dcc:	mov	r1, r0
   17dd0:	mov	r0, #0
   17dd4:	mvn	r2, #0
   17dd8:	movt	r3, #2
   17ddc:	b	17c24 <__assert_fail@plt+0x6704>
   17de0:	movw	r3, #53696	; 0xd1c0
   17de4:	mov	r2, r1
   17de8:	mov	r1, r0
   17dec:	mov	r0, #0
   17df0:	movt	r3, #2
   17df4:	b	17c24 <__assert_fail@plt+0x6704>
   17df8:	push	{fp, lr}
   17dfc:	mov	fp, sp
   17e00:	sub	sp, sp, #48	; 0x30
   17e04:	vmov.i32	q8, #0	; 0x00000000
   17e08:	mov	ip, #32
   17e0c:	mov	r3, sp
   17e10:	mov	lr, r2
   17e14:	cmp	r1, #10
   17e18:	add	r2, r3, #16
   17e1c:	vst1.64	{d16-d17}, [r3], ip
   17e20:	vst1.64	{d16-d17}, [r2]
   17e24:	vst1.64	{d16-d17}, [r3]
   17e28:	beq	17e48 <__assert_fail@plt+0x6928>
   17e2c:	str	r1, [sp]
   17e30:	mov	r3, sp
   17e34:	mov	r1, lr
   17e38:	mvn	r2, #0
   17e3c:	bl	17c24 <__assert_fail@plt+0x6704>
   17e40:	mov	sp, fp
   17e44:	pop	{fp, pc}
   17e48:	bl	114d8 <abort@plt>
   17e4c:	push	{r4, sl, fp, lr}
   17e50:	add	fp, sp, #8
   17e54:	sub	sp, sp, #48	; 0x30
   17e58:	vmov.i32	q8, #0	; 0x00000000
   17e5c:	mov	ip, r3
   17e60:	mov	r3, sp
   17e64:	mov	lr, #32
   17e68:	cmp	r1, #10
   17e6c:	add	r4, r3, #16
   17e70:	vst1.64	{d16-d17}, [r3], lr
   17e74:	vst1.64	{d16-d17}, [r4]
   17e78:	vst1.64	{d16-d17}, [r3]
   17e7c:	beq	17e9c <__assert_fail@plt+0x697c>
   17e80:	str	r1, [sp]
   17e84:	mov	r1, r2
   17e88:	mov	r3, sp
   17e8c:	mov	r2, ip
   17e90:	bl	17c24 <__assert_fail@plt+0x6704>
   17e94:	sub	sp, fp, #8
   17e98:	pop	{r4, sl, fp, pc}
   17e9c:	bl	114d8 <abort@plt>
   17ea0:	push	{fp, lr}
   17ea4:	mov	fp, sp
   17ea8:	sub	sp, sp, #48	; 0x30
   17eac:	vmov.i32	q8, #0	; 0x00000000
   17eb0:	mov	r3, sp
   17eb4:	mov	ip, #32
   17eb8:	cmp	r0, #10
   17ebc:	add	r2, r3, #16
   17ec0:	vst1.64	{d16-d17}, [r3], ip
   17ec4:	vst1.64	{d16-d17}, [r2]
   17ec8:	vst1.64	{d16-d17}, [r3]
   17ecc:	beq	17eec <__assert_fail@plt+0x69cc>
   17ed0:	str	r0, [sp]
   17ed4:	mov	r3, sp
   17ed8:	mov	r0, #0
   17edc:	mvn	r2, #0
   17ee0:	bl	17c24 <__assert_fail@plt+0x6704>
   17ee4:	mov	sp, fp
   17ee8:	pop	{fp, pc}
   17eec:	bl	114d8 <abort@plt>
   17ef0:	push	{fp, lr}
   17ef4:	mov	fp, sp
   17ef8:	sub	sp, sp, #48	; 0x30
   17efc:	vmov.i32	q8, #0	; 0x00000000
   17f00:	mov	r3, sp
   17f04:	mov	ip, #32
   17f08:	cmp	r0, #10
   17f0c:	add	lr, r3, #16
   17f10:	vst1.64	{d16-d17}, [r3], ip
   17f14:	vst1.64	{d16-d17}, [lr]
   17f18:	vst1.64	{d16-d17}, [r3]
   17f1c:	beq	17f38 <__assert_fail@plt+0x6a18>
   17f20:	str	r0, [sp]
   17f24:	mov	r3, sp
   17f28:	mov	r0, #0
   17f2c:	bl	17c24 <__assert_fail@plt+0x6704>
   17f30:	mov	sp, fp
   17f34:	pop	{fp, pc}
   17f38:	bl	114d8 <abort@plt>
   17f3c:	push	{r4, sl, fp, lr}
   17f40:	add	fp, sp, #8
   17f44:	sub	sp, sp, #48	; 0x30
   17f48:	mov	lr, r0
   17f4c:	movw	r0, #53696	; 0xd1c0
   17f50:	mov	ip, r1
   17f54:	mov	r1, #32
   17f58:	mov	r4, #1
   17f5c:	movt	r0, #2
   17f60:	add	r3, r0, #16
   17f64:	vld1.64	{d16-d17}, [r0], r1
   17f68:	vld1.64	{d20-d21}, [r0]
   17f6c:	vld1.64	{d18-d19}, [r3]
   17f70:	mov	r3, sp
   17f74:	add	r0, r3, #32
   17f78:	add	r1, r3, #16
   17f7c:	vst1.64	{d20-d21}, [r0]
   17f80:	mov	r0, #28
   17f84:	vst1.64	{d18-d19}, [r1]
   17f88:	mov	r1, r3
   17f8c:	and	r0, r0, r2, lsr #3
   17f90:	and	r2, r2, #31
   17f94:	vst1.64	{d16-d17}, [r1], r0
   17f98:	ldr	r0, [r1, #8]
   17f9c:	bic	r4, r4, r0, lsr r2
   17fa0:	eor	r0, r0, r4, lsl r2
   17fa4:	mov	r2, ip
   17fa8:	str	r0, [r1, #8]
   17fac:	mov	r0, #0
   17fb0:	mov	r1, lr
   17fb4:	bl	17c24 <__assert_fail@plt+0x6704>
   17fb8:	sub	sp, fp, #8
   17fbc:	pop	{r4, sl, fp, pc}
   17fc0:	push	{fp, lr}
   17fc4:	mov	fp, sp
   17fc8:	sub	sp, sp, #48	; 0x30
   17fcc:	mov	ip, r0
   17fd0:	movw	r0, #53696	; 0xd1c0
   17fd4:	mov	r2, #32
   17fd8:	movt	r0, #2
   17fdc:	add	r3, r0, #16
   17fe0:	vld1.64	{d16-d17}, [r0], r2
   17fe4:	vld1.64	{d20-d21}, [r0]
   17fe8:	vld1.64	{d18-d19}, [r3]
   17fec:	mov	r3, sp
   17ff0:	add	r0, r3, #32
   17ff4:	add	r2, r3, #16
   17ff8:	vst1.64	{d20-d21}, [r0]
   17ffc:	mov	r0, #28
   18000:	vst1.64	{d18-d19}, [r2]
   18004:	mov	r2, r3
   18008:	and	r0, r0, r1, lsr #3
   1800c:	and	r1, r1, #31
   18010:	vst1.64	{d16-d17}, [r2], r0
   18014:	mov	r0, #1
   18018:	ldr	lr, [r2, #8]
   1801c:	bic	r0, r0, lr, lsr r1
   18020:	eor	r0, lr, r0, lsl r1
   18024:	mov	r1, ip
   18028:	str	r0, [r2, #8]
   1802c:	mov	r0, #0
   18030:	mvn	r2, #0
   18034:	bl	17c24 <__assert_fail@plt+0x6704>
   18038:	mov	sp, fp
   1803c:	pop	{fp, pc}
   18040:	push	{fp, lr}
   18044:	mov	fp, sp
   18048:	sub	sp, sp, #48	; 0x30
   1804c:	mov	r1, r0
   18050:	movw	r0, #53696	; 0xd1c0
   18054:	mov	r3, #32
   18058:	movt	r0, #2
   1805c:	add	r2, r0, #16
   18060:	vld1.64	{d16-d17}, [r0], r3
   18064:	mov	r3, sp
   18068:	vld1.64	{d18-d19}, [r2]
   1806c:	vld1.64	{d20-d21}, [r0]
   18070:	add	r2, r3, #16
   18074:	add	r0, r3, #32
   18078:	vst1.64	{d18-d19}, [r2]
   1807c:	vst1.64	{d20-d21}, [r0]
   18080:	mov	r0, #12
   18084:	mov	r2, r3
   18088:	vst1.64	{d16-d17}, [r2], r0
   1808c:	ldr	r0, [r2]
   18090:	orr	r0, r0, #67108864	; 0x4000000
   18094:	str	r0, [r2]
   18098:	mov	r0, #0
   1809c:	mvn	r2, #0
   180a0:	bl	17c24 <__assert_fail@plt+0x6704>
   180a4:	mov	sp, fp
   180a8:	pop	{fp, pc}
   180ac:	push	{fp, lr}
   180b0:	mov	fp, sp
   180b4:	sub	sp, sp, #48	; 0x30
   180b8:	mov	ip, r1
   180bc:	mov	r1, r0
   180c0:	movw	r0, #53696	; 0xd1c0
   180c4:	mov	r2, #32
   180c8:	movt	r0, #2
   180cc:	add	r3, r0, #16
   180d0:	vld1.64	{d16-d17}, [r0], r2
   180d4:	vld1.64	{d18-d19}, [r3]
   180d8:	vld1.64	{d20-d21}, [r0]
   180dc:	mov	r3, sp
   180e0:	add	r2, r3, #16
   180e4:	add	r0, r3, #32
   180e8:	vst1.64	{d18-d19}, [r2]
   180ec:	vst1.64	{d20-d21}, [r0]
   180f0:	mov	r0, #12
   180f4:	mov	r2, r3
   180f8:	vst1.64	{d16-d17}, [r2], r0
   180fc:	ldr	r0, [r2]
   18100:	orr	r0, r0, #67108864	; 0x4000000
   18104:	str	r0, [r2]
   18108:	mov	r0, #0
   1810c:	mov	r2, ip
   18110:	bl	17c24 <__assert_fail@plt+0x6704>
   18114:	mov	sp, fp
   18118:	pop	{fp, pc}
   1811c:	push	{r4, sl, fp, lr}
   18120:	add	fp, sp, #8
   18124:	sub	sp, sp, #96	; 0x60
   18128:	vmov.i32	q8, #0	; 0x00000000
   1812c:	mov	ip, r2
   18130:	mov	r2, sp
   18134:	mov	r4, #28
   18138:	cmp	r1, #10
   1813c:	mov	r3, r2
   18140:	add	lr, r2, #16
   18144:	vst1.64	{d16-d17}, [r3], r4
   18148:	vst1.64	{d16-d17}, [lr]
   1814c:	vst1.32	{d16-d17}, [r3]
   18150:	beq	181a0 <__assert_fail@plt+0x6c80>
   18154:	vld1.64	{d16-d17}, [r2], r4
   18158:	vld1.64	{d18-d19}, [lr]
   1815c:	add	r3, sp, #48	; 0x30
   18160:	vld1.32	{d20-d21}, [r2]
   18164:	add	r2, r3, #20
   18168:	add	r4, r3, #4
   1816c:	vst1.32	{d18-d19}, [r2]
   18170:	add	r2, r3, #32
   18174:	vst1.32	{d16-d17}, [r4]
   18178:	vst1.32	{d20-d21}, [r2]
   1817c:	str	r1, [sp, #48]	; 0x30
   18180:	mvn	r2, #0
   18184:	ldr	r1, [sp, #60]	; 0x3c
   18188:	orr	r1, r1, #67108864	; 0x4000000
   1818c:	str	r1, [sp, #60]	; 0x3c
   18190:	mov	r1, ip
   18194:	bl	17c24 <__assert_fail@plt+0x6704>
   18198:	sub	sp, fp, #8
   1819c:	pop	{r4, sl, fp, pc}
   181a0:	bl	114d8 <abort@plt>
   181a4:	push	{r4, r5, r6, sl, fp, lr}
   181a8:	add	fp, sp, #16
   181ac:	sub	sp, sp, #48	; 0x30
   181b0:	mov	ip, r3
   181b4:	movw	r3, #53696	; 0xd1c0
   181b8:	mov	r6, #32
   181bc:	cmp	r1, #0
   181c0:	mov	r4, sp
   181c4:	movt	r3, #2
   181c8:	cmpne	r2, #0
   181cc:	add	r5, r4, #16
   181d0:	add	lr, r3, #16
   181d4:	vld1.64	{d16-d17}, [r3], r6
   181d8:	vld1.64	{d18-d19}, [lr]
   181dc:	vld1.64	{d20-d21}, [r3]
   181e0:	mov	r3, #10
   181e4:	vst1.64	{d16-d17}, [r4], r6
   181e8:	vst1.64	{d18-d19}, [r5]
   181ec:	vst1.64	{d20-d21}, [r4]
   181f0:	str	r3, [sp]
   181f4:	bne	181fc <__assert_fail@plt+0x6cdc>
   181f8:	bl	114d8 <abort@plt>
   181fc:	str	r2, [sp, #44]	; 0x2c
   18200:	str	r1, [sp, #40]	; 0x28
   18204:	mov	r3, sp
   18208:	mov	r1, ip
   1820c:	mvn	r2, #0
   18210:	bl	17c24 <__assert_fail@plt+0x6704>
   18214:	sub	sp, fp, #16
   18218:	pop	{r4, r5, r6, sl, fp, pc}
   1821c:	push	{r4, r5, r6, sl, fp, lr}
   18220:	add	fp, sp, #16
   18224:	sub	sp, sp, #48	; 0x30
   18228:	mov	lr, r3
   1822c:	movw	r3, #53696	; 0xd1c0
   18230:	mov	r6, #32
   18234:	cmp	r1, #0
   18238:	mov	r4, sp
   1823c:	movt	r3, #2
   18240:	cmpne	r2, #0
   18244:	add	r5, r4, #16
   18248:	add	ip, r3, #16
   1824c:	vld1.64	{d16-d17}, [r3], r6
   18250:	vld1.64	{d18-d19}, [ip]
   18254:	vld1.64	{d20-d21}, [r3]
   18258:	mov	r3, #10
   1825c:	vst1.64	{d16-d17}, [r4], r6
   18260:	vst1.64	{d18-d19}, [r5]
   18264:	vst1.64	{d20-d21}, [r4]
   18268:	str	r3, [sp]
   1826c:	bne	18274 <__assert_fail@plt+0x6d54>
   18270:	bl	114d8 <abort@plt>
   18274:	ldr	ip, [fp, #8]
   18278:	str	r2, [sp, #44]	; 0x2c
   1827c:	str	r1, [sp, #40]	; 0x28
   18280:	mov	r3, sp
   18284:	mov	r1, lr
   18288:	mov	r2, ip
   1828c:	bl	17c24 <__assert_fail@plt+0x6704>
   18290:	sub	sp, fp, #16
   18294:	pop	{r4, r5, r6, sl, fp, pc}
   18298:	push	{r4, sl, fp, lr}
   1829c:	add	fp, sp, #8
   182a0:	sub	sp, sp, #48	; 0x30
   182a4:	movw	r3, #53696	; 0xd1c0
   182a8:	mov	lr, #32
   182ac:	mov	ip, r2
   182b0:	cmp	r0, #0
   182b4:	movt	r3, #2
   182b8:	cmpne	r1, #0
   182bc:	add	r2, r3, #16
   182c0:	vld1.64	{d16-d17}, [r3], lr
   182c4:	vld1.64	{d20-d21}, [r3]
   182c8:	vld1.64	{d18-d19}, [r2]
   182cc:	mov	r2, sp
   182d0:	add	r4, r2, #16
   182d4:	vst1.64	{d16-d17}, [r2], lr
   182d8:	vst1.64	{d20-d21}, [r2]
   182dc:	mov	r2, #10
   182e0:	vst1.64	{d18-d19}, [r4]
   182e4:	str	r2, [sp]
   182e8:	bne	182f0 <__assert_fail@plt+0x6dd0>
   182ec:	bl	114d8 <abort@plt>
   182f0:	str	r1, [sp, #44]	; 0x2c
   182f4:	str	r0, [sp, #40]	; 0x28
   182f8:	mov	r3, sp
   182fc:	mov	r0, #0
   18300:	mov	r1, ip
   18304:	mvn	r2, #0
   18308:	bl	17c24 <__assert_fail@plt+0x6704>
   1830c:	sub	sp, fp, #8
   18310:	pop	{r4, sl, fp, pc}
   18314:	push	{r4, r5, fp, lr}
   18318:	add	fp, sp, #8
   1831c:	sub	sp, sp, #48	; 0x30
   18320:	mov	ip, r3
   18324:	movw	r3, #53696	; 0xd1c0
   18328:	mov	r4, #32
   1832c:	mov	lr, r2
   18330:	cmp	r0, #0
   18334:	movt	r3, #2
   18338:	cmpne	r1, #0
   1833c:	add	r2, r3, #16
   18340:	vld1.64	{d16-d17}, [r3], r4
   18344:	vld1.64	{d20-d21}, [r3]
   18348:	vld1.64	{d18-d19}, [r2]
   1834c:	mov	r2, sp
   18350:	add	r5, r2, #16
   18354:	vst1.64	{d16-d17}, [r2], r4
   18358:	vst1.64	{d20-d21}, [r2]
   1835c:	mov	r2, #10
   18360:	vst1.64	{d18-d19}, [r5]
   18364:	str	r2, [sp]
   18368:	bne	18370 <__assert_fail@plt+0x6e50>
   1836c:	bl	114d8 <abort@plt>
   18370:	str	r1, [sp, #44]	; 0x2c
   18374:	str	r0, [sp, #40]	; 0x28
   18378:	mov	r3, sp
   1837c:	mov	r0, #0
   18380:	mov	r1, lr
   18384:	mov	r2, ip
   18388:	bl	17c24 <__assert_fail@plt+0x6704>
   1838c:	sub	sp, fp, #8
   18390:	pop	{r4, r5, fp, pc}
   18394:	movw	r3, #53576	; 0xd148
   18398:	movt	r3, #2
   1839c:	b	17c24 <__assert_fail@plt+0x6704>
   183a0:	movw	r3, #53576	; 0xd148
   183a4:	mov	r2, r1
   183a8:	mov	r1, r0
   183ac:	mov	r0, #0
   183b0:	movt	r3, #2
   183b4:	b	17c24 <__assert_fail@plt+0x6704>
   183b8:	movw	r3, #53576	; 0xd148
   183bc:	mvn	r2, #0
   183c0:	movt	r3, #2
   183c4:	b	17c24 <__assert_fail@plt+0x6704>
   183c8:	movw	r3, #53576	; 0xd148
   183cc:	mov	r1, r0
   183d0:	mov	r0, #0
   183d4:	mvn	r2, #0
   183d8:	movt	r3, #2
   183dc:	b	17c24 <__assert_fail@plt+0x6704>
   183e0:	push	{r4, r5, fp, lr}
   183e4:	add	fp, sp, #8
   183e8:	mov	r5, r0
   183ec:	mov	r4, r1
   183f0:	mov	r0, #0
   183f4:	mov	r2, #5
   183f8:	mov	r1, r5
   183fc:	bl	11298 <dcgettext@plt>
   18400:	cmp	r0, r5
   18404:	popne	{r4, r5, fp, pc}
   18408:	bl	1a448 <__assert_fail@plt+0x8f28>
   1840c:	ldrb	r1, [r0]
   18410:	and	r1, r1, #223	; 0xdf
   18414:	cmp	r1, #71	; 0x47
   18418:	beq	18480 <__assert_fail@plt+0x6f60>
   1841c:	cmp	r1, #85	; 0x55
   18420:	bne	184d8 <__assert_fail@plt+0x6fb8>
   18424:	ldrb	r1, [r0, #1]
   18428:	and	r1, r1, #223	; 0xdf
   1842c:	cmp	r1, #84	; 0x54
   18430:	bne	184d8 <__assert_fail@plt+0x6fb8>
   18434:	ldrb	r1, [r0, #2]
   18438:	and	r1, r1, #223	; 0xdf
   1843c:	cmp	r1, #70	; 0x46
   18440:	bne	184d8 <__assert_fail@plt+0x6fb8>
   18444:	ldrb	r1, [r0, #3]
   18448:	cmp	r1, #45	; 0x2d
   1844c:	bne	184d8 <__assert_fail@plt+0x6fb8>
   18450:	ldrb	r1, [r0, #4]
   18454:	cmp	r1, #56	; 0x38
   18458:	bne	184d8 <__assert_fail@plt+0x6fb8>
   1845c:	ldrb	r0, [r0, #5]
   18460:	cmp	r0, #0
   18464:	bne	184d8 <__assert_fail@plt+0x6fb8>
   18468:	ldrb	r1, [r5]
   1846c:	movw	r2, #47682	; 0xba42
   18470:	movw	r0, #47686	; 0xba46
   18474:	movt	r2, #1
   18478:	movt	r0, #1
   1847c:	b	18508 <__assert_fail@plt+0x6fe8>
   18480:	ldrb	r1, [r0, #1]
   18484:	and	r1, r1, #223	; 0xdf
   18488:	cmp	r1, #66	; 0x42
   1848c:	bne	184d8 <__assert_fail@plt+0x6fb8>
   18490:	ldrb	r1, [r0, #2]
   18494:	cmp	r1, #49	; 0x31
   18498:	bne	184d8 <__assert_fail@plt+0x6fb8>
   1849c:	ldrb	r1, [r0, #3]
   184a0:	cmp	r1, #56	; 0x38
   184a4:	bne	184d8 <__assert_fail@plt+0x6fb8>
   184a8:	ldrb	r1, [r0, #4]
   184ac:	cmp	r1, #48	; 0x30
   184b0:	bne	184d8 <__assert_fail@plt+0x6fb8>
   184b4:	ldrb	r1, [r0, #5]
   184b8:	cmp	r1, #51	; 0x33
   184bc:	bne	184d8 <__assert_fail@plt+0x6fb8>
   184c0:	ldrb	r1, [r0, #6]
   184c4:	cmp	r1, #48	; 0x30
   184c8:	bne	184d8 <__assert_fail@plt+0x6fb8>
   184cc:	ldrb	r0, [r0, #7]
   184d0:	cmp	r0, #0
   184d4:	beq	184f4 <__assert_fail@plt+0x6fd4>
   184d8:	movw	r1, #47676	; 0xba3c
   184dc:	movw	r0, #47680	; 0xba40
   184e0:	cmp	r4, #9
   184e4:	movt	r1, #1
   184e8:	movt	r0, #1
   184ec:	moveq	r0, r1
   184f0:	pop	{r4, r5, fp, pc}
   184f4:	ldrb	r1, [r5]
   184f8:	movw	r2, #47690	; 0xba4a
   184fc:	movw	r0, #47694	; 0xba4e
   18500:	movt	r2, #1
   18504:	movt	r0, #1
   18508:	cmp	r1, #96	; 0x60
   1850c:	moveq	r0, r2
   18510:	pop	{r4, r5, fp, pc}
   18514:	push	{r4, sl, fp, lr}
   18518:	add	fp, sp, #8
   1851c:	sub	sp, sp, #104	; 0x68
   18520:	movw	r1, #48559	; 0xbdaf
   18524:	mov	r4, r0
   18528:	mov	r2, sp
   1852c:	mov	r0, #3
   18530:	movt	r1, #1
   18534:	bl	114f0 <__lxstat64@plt>
   18538:	mov	r1, r0
   1853c:	mov	r0, #0
   18540:	cmp	r1, #0
   18544:	beq	18550 <__assert_fail@plt+0x7030>
   18548:	sub	sp, fp, #8
   1854c:	pop	{r4, sl, fp, pc}
   18550:	ldr	r0, [sp, #96]	; 0x60
   18554:	ldr	r1, [sp, #100]	; 0x64
   18558:	ldm	sp, {r2, r3}
   1855c:	stm	r4, {r0, r1, r2, r3}
   18560:	mov	r0, r4
   18564:	sub	sp, fp, #8
   18568:	pop	{r4, sl, fp, pc}
   1856c:	push	{r4, r5, r6, r7, fp, lr}
   18570:	add	fp, sp, #16
   18574:	mov	r4, r0
   18578:	cmp	r0, #2
   1857c:	bhi	185ac <__assert_fail@plt+0x708c>
   18580:	mov	r0, r4
   18584:	bl	1a520 <__assert_fail@plt+0x9000>
   18588:	mov	r5, r0
   1858c:	bl	113d0 <__errno_location@plt>
   18590:	ldr	r7, [r0]
   18594:	mov	r6, r0
   18598:	mov	r0, r4
   1859c:	bl	114e4 <close@plt>
   185a0:	mov	r0, r5
   185a4:	str	r7, [r6]
   185a8:	pop	{r4, r5, r6, r7, fp, pc}
   185ac:	mov	r0, r4
   185b0:	pop	{r4, r5, r6, r7, fp, pc}
   185b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185b8:	add	fp, sp, #28
   185bc:	sub	sp, sp, #12
   185c0:	ldr	sl, [fp, #8]
   185c4:	mov	r9, r3
   185c8:	mov	r4, r2
   185cc:	mov	r8, r1
   185d0:	mov	r7, r0
   185d4:	cmp	r2, #0
   185d8:	beq	185f0 <__assert_fail@plt+0x70d0>
   185dc:	mov	r0, r7
   185e0:	mov	r1, #58	; 0x3a
   185e4:	bl	113ac <strchr@plt>
   185e8:	mov	r6, r0
   185ec:	b	185f4 <__assert_fail@plt+0x70d4>
   185f0:	mov	r6, #0
   185f4:	mov	r0, r7
   185f8:	mov	r1, r6
   185fc:	mov	r2, r8
   18600:	mov	r3, r4
   18604:	stm	sp, {r9, sl}
   18608:	bl	18670 <__assert_fail@plt+0x7150>
   1860c:	mov	r5, r0
   18610:	cmp	r4, #0
   18614:	beq	18664 <__assert_fail@plt+0x7144>
   18618:	cmp	r6, #0
   1861c:	bne	18664 <__assert_fail@plt+0x7144>
   18620:	cmp	r5, #0
   18624:	beq	18664 <__assert_fail@plt+0x7144>
   18628:	mov	r0, r7
   1862c:	mov	r1, #46	; 0x2e
   18630:	bl	113ac <strchr@plt>
   18634:	cmp	r0, #0
   18638:	beq	18664 <__assert_fail@plt+0x7144>
   1863c:	mov	r1, r0
   18640:	mov	r0, r7
   18644:	mov	r2, r8
   18648:	mov	r3, r4
   1864c:	stm	sp, {r9, sl}
   18650:	bl	18670 <__assert_fail@plt+0x7150>
   18654:	cmp	r0, #0
   18658:	movne	r0, r5
   1865c:	sub	sp, fp, #28
   18660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18664:	mov	r0, r5
   18668:	sub	sp, fp, #28
   1866c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18674:	add	fp, sp, #28
   18678:	sub	sp, sp, #36	; 0x24
   1867c:	mov	sl, r3
   18680:	mov	r9, r2
   18684:	ldr	r3, [r2]
   18688:	ldr	r2, [fp, #8]
   1868c:	mov	r4, r1
   18690:	cmp	sl, #0
   18694:	beq	186a0 <__assert_fail@plt+0x7180>
   18698:	ldr	r1, [sl]
   1869c:	b	186a4 <__assert_fail@plt+0x7184>
   186a0:	mvn	r1, #0
   186a4:	ldr	r8, [fp, #12]
   186a8:	cmp	r2, #0
   186ac:	str	r1, [sp, #8]
   186b0:	str	r3, [sp, #4]
   186b4:	movne	r1, #0
   186b8:	strne	r1, [r2]
   186bc:	cmp	r8, #0
   186c0:	movne	r1, #0
   186c4:	strne	r1, [r8]
   186c8:	cmp	r4, #0
   186cc:	beq	18700 <__assert_fail@plt+0x71e0>
   186d0:	subs	r5, r4, r0
   186d4:	beq	18790 <__assert_fail@plt+0x7270>
   186d8:	add	r1, r5, #1
   186dc:	bl	194ac <__assert_fail@plt+0x7f8c>
   186e0:	mov	r7, r0
   186e4:	mov	r0, #0
   186e8:	mov	r6, r4
   186ec:	strb	r0, [r7, r5]
   186f0:	ldrb	r0, [r6, #1]!
   186f4:	cmp	r0, #0
   186f8:	moveq	r6, r0
   186fc:	b	18718 <__assert_fail@plt+0x71f8>
   18700:	ldrb	r1, [r0]
   18704:	cmp	r1, #0
   18708:	beq	188a8 <__assert_fail@plt+0x7388>
   1870c:	bl	1951c <__assert_fail@plt+0x7ffc>
   18710:	mov	r7, r0
   18714:	mov	r6, #0
   18718:	ldrb	r0, [r7]
   1871c:	cmp	r0, #43	; 0x2b
   18720:	beq	18770 <__assert_fail@plt+0x7250>
   18724:	mov	r0, r7
   18728:	bl	11220 <getpwnam@plt>
   1872c:	cmp	r0, #0
   18730:	beq	18770 <__assert_fail@plt+0x7250>
   18734:	ldr	r1, [r0, #8]
   18738:	mov	r5, #0
   1873c:	cmp	r4, #0
   18740:	str	r1, [sp, #4]
   18744:	beq	188b4 <__assert_fail@plt+0x7394>
   18748:	cmp	r6, #0
   1874c:	bne	188b4 <__assert_fail@plt+0x7394>
   18750:	ldr	r4, [r0, #12]
   18754:	mov	r0, r4
   18758:	bl	11508 <getgrgid@plt>
   1875c:	cmp	r0, #0
   18760:	str	r4, [sp, #8]
   18764:	beq	188bc <__assert_fail@plt+0x739c>
   18768:	ldr	r0, [r0]
   1876c:	b	188cc <__assert_fail@plt+0x73ac>
   18770:	cmp	r4, #0
   18774:	beq	1884c <__assert_fail@plt+0x732c>
   18778:	cmp	r6, #0
   1877c:	bne	1884c <__assert_fail@plt+0x732c>
   18780:	movw	r5, #47811	; 0xbac3
   18784:	mov	r4, #0
   18788:	movt	r5, #1
   1878c:	b	188d8 <__assert_fail@plt+0x73b8>
   18790:	ldrb	r0, [r4, #1]!
   18794:	mov	r7, #0
   18798:	mov	r5, #0
   1879c:	cmp	r0, #0
   187a0:	moveq	r4, r0
   187a4:	mov	r6, r4
   187a8:	mov	r4, #0
   187ac:	cmp	r6, #0
   187b0:	beq	188e4 <__assert_fail@plt+0x73c4>
   187b4:	cmp	r5, #0
   187b8:	bne	188e4 <__assert_fail@plt+0x73c4>
   187bc:	ldrb	r0, [r6]
   187c0:	cmp	r0, #43	; 0x2b
   187c4:	beq	187e4 <__assert_fail@plt+0x72c4>
   187c8:	mov	r0, r6
   187cc:	bl	11514 <getgrnam@plt>
   187d0:	cmp	r0, #0
   187d4:	beq	187e4 <__assert_fail@plt+0x72c4>
   187d8:	ldr	r0, [r0, #8]
   187dc:	mov	r5, #0
   187e0:	b	18834 <__assert_fail@plt+0x7314>
   187e4:	movw	r0, #45016	; 0xafd8
   187e8:	add	r3, sp, #12
   187ec:	mov	r1, #0
   187f0:	mov	r2, #10
   187f4:	movt	r0, #1
   187f8:	str	r0, [sp]
   187fc:	mov	r0, r6
   18800:	bl	19614 <__assert_fail@plt+0x80f4>
   18804:	ldr	r1, [sp, #12]
   18808:	mvn	r2, #0
   1880c:	clz	r0, r0
   18810:	movw	r5, #47797	; 0xbab5
   18814:	lsr	r0, r0, #5
   18818:	movt	r5, #1
   1881c:	subs	r2, r1, r2
   18820:	movwne	r2, #1
   18824:	ands	r0, r0, r2
   18828:	ldr	r0, [sp, #8]
   1882c:	movne	r0, r1
   18830:	movwne	r5, #0
   18834:	str	r0, [sp, #8]
   18838:	bl	111fc <endgrent@plt>
   1883c:	mov	r0, r6
   18840:	bl	1951c <__assert_fail@plt+0x7ffc>
   18844:	mov	r4, r0
   18848:	b	188e4 <__assert_fail@plt+0x73c4>
   1884c:	movw	r0, #45016	; 0xafd8
   18850:	add	r3, sp, #12
   18854:	mov	r1, #0
   18858:	mov	r2, #10
   1885c:	mov	r4, #0
   18860:	movt	r0, #1
   18864:	str	r0, [sp]
   18868:	mov	r0, r7
   1886c:	bl	19614 <__assert_fail@plt+0x80f4>
   18870:	ldr	r1, [sp, #12]
   18874:	mvn	r2, #0
   18878:	clz	r0, r0
   1887c:	movw	r5, #47784	; 0xbaa8
   18880:	lsr	r0, r0, #5
   18884:	movt	r5, #1
   18888:	subs	r2, r1, r2
   1888c:	movwne	r2, #1
   18890:	ands	r0, r0, r2
   18894:	ldr	r0, [sp, #4]
   18898:	movne	r0, r1
   1889c:	movwne	r5, #0
   188a0:	str	r0, [sp, #4]
   188a4:	b	188d8 <__assert_fail@plt+0x73b8>
   188a8:	mov	r4, #0
   188ac:	mov	r7, #0
   188b0:	b	188f0 <__assert_fail@plt+0x73d0>
   188b4:	mov	r4, #0
   188b8:	b	188d8 <__assert_fail@plt+0x73b8>
   188bc:	add	r2, sp, #12
   188c0:	mov	r0, r4
   188c4:	mov	r1, #0
   188c8:	bl	16680 <__assert_fail@plt+0x5160>
   188cc:	bl	1951c <__assert_fail@plt+0x7ffc>
   188d0:	mov	r4, r0
   188d4:	bl	111fc <endgrent@plt>
   188d8:	bl	11448 <endpwent@plt>
   188dc:	cmp	r6, #0
   188e0:	bne	187b4 <__assert_fail@plt+0x7294>
   188e4:	mov	r6, #0
   188e8:	cmp	r5, #0
   188ec:	bne	1892c <__assert_fail@plt+0x740c>
   188f0:	ldr	r0, [sp, #4]
   188f4:	cmp	sl, #0
   188f8:	mov	r6, #1
   188fc:	str	r0, [r9]
   18900:	ldrne	r0, [sp, #8]
   18904:	strne	r0, [sl]
   18908:	ldr	r0, [fp, #8]
   1890c:	cmp	r0, #0
   18910:	strne	r7, [r0]
   18914:	movne	r7, #0
   18918:	cmp	r8, #0
   1891c:	moveq	r5, #0
   18920:	strne	r4, [r8]
   18924:	movne	r5, #0
   18928:	movne	r4, #0
   1892c:	mov	r0, r7
   18930:	bl	12ea4 <__assert_fail@plt+0x1984>
   18934:	mov	r0, r4
   18938:	bl	12ea4 <__assert_fail@plt+0x1984>
   1893c:	mov	r0, #0
   18940:	cmp	r6, #0
   18944:	bne	18958 <__assert_fail@plt+0x7438>
   18948:	mov	r0, #0
   1894c:	mov	r1, r5
   18950:	mov	r2, #5
   18954:	bl	11298 <dcgettext@plt>
   18958:	sub	sp, fp, #28
   1895c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18960:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18964:	add	fp, sp, #24
   18968:	sub	sp, sp, #32
   1896c:	ldr	r6, [fp, #12]
   18970:	ldr	r7, [fp, #8]
   18974:	mov	r4, r2
   18978:	mov	r8, r0
   1897c:	cmp	r1, #0
   18980:	beq	189a8 <__assert_fail@plt+0x7488>
   18984:	movw	r2, #47824	; 0xbad0
   18988:	mov	r5, r1
   1898c:	str	r3, [sp, #4]
   18990:	str	r4, [sp]
   18994:	mov	r0, r8
   18998:	mov	r1, #1
   1899c:	movt	r2, #1
   189a0:	mov	r3, r5
   189a4:	b	189c0 <__assert_fail@plt+0x74a0>
   189a8:	movw	r2, #47836	; 0xbadc
   189ac:	str	r3, [sp]
   189b0:	mov	r0, r8
   189b4:	mov	r1, #1
   189b8:	mov	r3, r4
   189bc:	movt	r2, #1
   189c0:	bl	1140c <__fprintf_chk@plt>
   189c4:	movw	r1, #47843	; 0xbae3
   189c8:	mov	r0, #0
   189cc:	mov	r2, #5
   189d0:	movt	r1, #1
   189d4:	bl	11298 <dcgettext@plt>
   189d8:	movw	r2, #48561	; 0xbdb1
   189dc:	mov	r3, r0
   189e0:	movw	r0, #2022	; 0x7e6
   189e4:	mov	r1, #1
   189e8:	movt	r2, #1
   189ec:	str	r0, [sp]
   189f0:	mov	r0, r8
   189f4:	bl	1140c <__fprintf_chk@plt>
   189f8:	movw	r4, #45015	; 0xafd7
   189fc:	mov	r1, r8
   18a00:	movt	r4, #1
   18a04:	mov	r0, r4
   18a08:	bl	11208 <fputs_unlocked@plt>
   18a0c:	movw	r1, #47847	; 0xbae7
   18a10:	mov	r0, #0
   18a14:	mov	r2, #5
   18a18:	movt	r1, #1
   18a1c:	bl	11298 <dcgettext@plt>
   18a20:	movw	r3, #48018	; 0xbb92
   18a24:	mov	r2, r0
   18a28:	mov	r0, r8
   18a2c:	mov	r1, #1
   18a30:	movt	r3, #1
   18a34:	bl	1140c <__fprintf_chk@plt>
   18a38:	mov	r0, r4
   18a3c:	mov	r1, r8
   18a40:	bl	11208 <fputs_unlocked@plt>
   18a44:	cmp	r6, #9
   18a48:	bhi	18a84 <__assert_fail@plt+0x7564>
   18a4c:	add	r0, pc, #0
   18a50:	ldr	pc, [r0, r6, lsl #2]
   18a54:	andeq	r8, r1, ip, ror sl
   18a58:	muleq	r1, r0, sl
   18a5c:	andeq	r8, r1, r0, asr #21
   18a60:	andeq	r8, r1, r8, ror #21
   18a64:	andeq	r8, r1, r0, lsl fp
   18a68:	andeq	r8, r1, r8, lsr fp
   18a6c:	andeq	r8, r1, r0, ror #22
   18a70:	muleq	r1, r8, fp
   18a74:	andeq	r8, r1, r8, lsr ip
   18a78:	andeq	r8, r1, r0, ror #23
   18a7c:	sub	sp, fp, #24
   18a80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a84:	movw	r1, #48371	; 0xbcf3
   18a88:	movt	r1, #1
   18a8c:	b	18be8 <__assert_fail@plt+0x76c8>
   18a90:	movw	r1, #48052	; 0xbbb4
   18a94:	mov	r0, #0
   18a98:	mov	r2, #5
   18a9c:	movt	r1, #1
   18aa0:	bl	11298 <dcgettext@plt>
   18aa4:	ldr	r3, [r7]
   18aa8:	mov	r2, r0
   18aac:	mov	r0, r8
   18ab0:	mov	r1, #1
   18ab4:	sub	sp, fp, #24
   18ab8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18abc:	b	1140c <__fprintf_chk@plt>
   18ac0:	movw	r1, #48068	; 0xbbc4
   18ac4:	mov	r0, #0
   18ac8:	mov	r2, #5
   18acc:	movt	r1, #1
   18ad0:	bl	11298 <dcgettext@plt>
   18ad4:	mov	r2, r0
   18ad8:	ldr	r3, [r7]
   18adc:	ldr	r0, [r7, #4]
   18ae0:	str	r0, [sp]
   18ae4:	b	18bd4 <__assert_fail@plt+0x76b4>
   18ae8:	movw	r1, #48091	; 0xbbdb
   18aec:	mov	r0, #0
   18af0:	mov	r2, #5
   18af4:	movt	r1, #1
   18af8:	bl	11298 <dcgettext@plt>
   18afc:	mov	r2, r0
   18b00:	ldr	r3, [r7]
   18b04:	ldmib	r7, {r0, r1}
   18b08:	stm	sp, {r0, r1}
   18b0c:	b	18bd4 <__assert_fail@plt+0x76b4>
   18b10:	movw	r1, #48119	; 0xbbf7
   18b14:	mov	r0, #0
   18b18:	mov	r2, #5
   18b1c:	movt	r1, #1
   18b20:	bl	11298 <dcgettext@plt>
   18b24:	ldr	r3, [r7]
   18b28:	mov	r2, r0
   18b2c:	ldmib	r7, {r0, r1, r7}
   18b30:	stm	sp, {r0, r1, r7}
   18b34:	b	18bd4 <__assert_fail@plt+0x76b4>
   18b38:	movw	r1, #48151	; 0xbc17
   18b3c:	mov	r0, #0
   18b40:	mov	r2, #5
   18b44:	movt	r1, #1
   18b48:	bl	11298 <dcgettext@plt>
   18b4c:	ldr	r3, [r7]
   18b50:	mov	r2, r0
   18b54:	ldmib	r7, {r0, r1, r6, r7}
   18b58:	stm	sp, {r0, r1, r6, r7}
   18b5c:	b	18bd4 <__assert_fail@plt+0x76b4>
   18b60:	movw	r1, #48187	; 0xbc3b
   18b64:	mov	r0, #0
   18b68:	mov	r2, #5
   18b6c:	movt	r1, #1
   18b70:	bl	11298 <dcgettext@plt>
   18b74:	mov	r2, r0
   18b78:	ldr	r3, [r7]
   18b7c:	ldmib	r7, {r0, r1, r6}
   18b80:	ldr	r5, [r7, #16]
   18b84:	ldr	r7, [r7, #20]
   18b88:	stm	sp, {r0, r1, r6}
   18b8c:	str	r5, [sp, #12]
   18b90:	str	r7, [sp, #16]
   18b94:	b	18bd4 <__assert_fail@plt+0x76b4>
   18b98:	movw	r1, #48227	; 0xbc63
   18b9c:	mov	r0, #0
   18ba0:	mov	r2, #5
   18ba4:	movt	r1, #1
   18ba8:	bl	11298 <dcgettext@plt>
   18bac:	mov	r2, r0
   18bb0:	ldr	r3, [r7]
   18bb4:	ldmib	r7, {r0, r1, r6}
   18bb8:	ldr	r5, [r7, #16]
   18bbc:	ldr	r4, [r7, #20]
   18bc0:	ldr	r7, [r7, #24]
   18bc4:	stm	sp, {r0, r1, r6}
   18bc8:	str	r5, [sp, #12]
   18bcc:	str	r4, [sp, #16]
   18bd0:	str	r7, [sp, #20]
   18bd4:	mov	r0, r8
   18bd8:	mov	r1, #1
   18bdc:	b	18c88 <__assert_fail@plt+0x7768>
   18be0:	movw	r1, #48319	; 0xbcbf
   18be4:	movt	r1, #1
   18be8:	mov	r0, #0
   18bec:	mov	r2, #5
   18bf0:	bl	11298 <dcgettext@plt>
   18bf4:	mov	ip, r0
   18bf8:	ldr	r3, [r7]
   18bfc:	ldr	r0, [r7, #4]
   18c00:	ldr	r1, [r7, #8]
   18c04:	ldr	r6, [r7, #12]
   18c08:	ldr	r5, [r7, #16]
   18c0c:	ldr	r4, [r7, #20]
   18c10:	ldr	r2, [r7, #24]
   18c14:	ldr	lr, [r7, #28]
   18c18:	ldr	r7, [r7, #32]
   18c1c:	stm	sp, {r0, r1, r6}
   18c20:	str	r5, [sp, #12]
   18c24:	str	r4, [sp, #16]
   18c28:	str	r2, [sp, #20]
   18c2c:	str	lr, [sp, #24]
   18c30:	str	r7, [sp, #28]
   18c34:	b	18c7c <__assert_fail@plt+0x775c>
   18c38:	movw	r1, #48271	; 0xbc8f
   18c3c:	mov	r0, #0
   18c40:	mov	r2, #5
   18c44:	movt	r1, #1
   18c48:	bl	11298 <dcgettext@plt>
   18c4c:	mov	ip, r0
   18c50:	ldr	r3, [r7]
   18c54:	ldmib	r7, {r0, r1, r6}
   18c58:	ldr	r5, [r7, #16]
   18c5c:	ldr	r4, [r7, #20]
   18c60:	ldr	r2, [r7, #24]
   18c64:	ldr	r7, [r7, #28]
   18c68:	stm	sp, {r0, r1, r6}
   18c6c:	str	r5, [sp, #12]
   18c70:	str	r4, [sp, #16]
   18c74:	str	r2, [sp, #20]
   18c78:	str	r7, [sp, #24]
   18c7c:	mov	r0, r8
   18c80:	mov	r1, #1
   18c84:	mov	r2, ip
   18c88:	bl	1140c <__fprintf_chk@plt>
   18c8c:	sub	sp, fp, #24
   18c90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c94:	push	{r4, sl, fp, lr}
   18c98:	add	fp, sp, #8
   18c9c:	sub	sp, sp, #8
   18ca0:	ldr	ip, [fp, #8]
   18ca4:	mov	lr, #0
   18ca8:	ldr	r4, [ip, lr, lsl #2]
   18cac:	add	lr, lr, #1
   18cb0:	cmp	r4, #0
   18cb4:	bne	18ca8 <__assert_fail@plt+0x7788>
   18cb8:	sub	r4, lr, #1
   18cbc:	str	ip, [sp]
   18cc0:	str	r4, [sp, #4]
   18cc4:	bl	18960 <__assert_fail@plt+0x7440>
   18cc8:	sub	sp, fp, #8
   18ccc:	pop	{r4, sl, fp, pc}
   18cd0:	push	{fp, lr}
   18cd4:	mov	fp, sp
   18cd8:	sub	sp, sp, #48	; 0x30
   18cdc:	ldr	ip, [fp, #8]
   18ce0:	ldr	lr, [ip]
   18ce4:	cmp	lr, #0
   18ce8:	str	lr, [sp, #8]
   18cec:	beq	18d88 <__assert_fail@plt+0x7868>
   18cf0:	ldr	lr, [ip, #4]
   18cf4:	cmp	lr, #0
   18cf8:	str	lr, [sp, #12]
   18cfc:	beq	18d90 <__assert_fail@plt+0x7870>
   18d00:	ldr	lr, [ip, #8]
   18d04:	cmp	lr, #0
   18d08:	str	lr, [sp, #16]
   18d0c:	beq	18d98 <__assert_fail@plt+0x7878>
   18d10:	ldr	lr, [ip, #12]
   18d14:	cmp	lr, #0
   18d18:	str	lr, [sp, #20]
   18d1c:	beq	18da0 <__assert_fail@plt+0x7880>
   18d20:	ldr	lr, [ip, #16]
   18d24:	cmp	lr, #0
   18d28:	str	lr, [sp, #24]
   18d2c:	beq	18da8 <__assert_fail@plt+0x7888>
   18d30:	ldr	lr, [ip, #20]
   18d34:	cmp	lr, #0
   18d38:	str	lr, [sp, #28]
   18d3c:	beq	18db0 <__assert_fail@plt+0x7890>
   18d40:	ldr	lr, [ip, #24]
   18d44:	cmp	lr, #0
   18d48:	str	lr, [sp, #32]
   18d4c:	beq	18db8 <__assert_fail@plt+0x7898>
   18d50:	ldr	lr, [ip, #28]
   18d54:	cmp	lr, #0
   18d58:	str	lr, [sp, #36]	; 0x24
   18d5c:	beq	18dc0 <__assert_fail@plt+0x78a0>
   18d60:	ldr	lr, [ip, #32]
   18d64:	cmp	lr, #0
   18d68:	str	lr, [sp, #40]	; 0x28
   18d6c:	beq	18dc8 <__assert_fail@plt+0x78a8>
   18d70:	ldr	lr, [ip, #36]	; 0x24
   18d74:	mov	ip, #10
   18d78:	cmp	lr, #0
   18d7c:	str	lr, [sp, #44]	; 0x2c
   18d80:	movweq	ip, #9
   18d84:	b	18dcc <__assert_fail@plt+0x78ac>
   18d88:	mov	ip, #0
   18d8c:	b	18dcc <__assert_fail@plt+0x78ac>
   18d90:	mov	ip, #1
   18d94:	b	18dcc <__assert_fail@plt+0x78ac>
   18d98:	mov	ip, #2
   18d9c:	b	18dcc <__assert_fail@plt+0x78ac>
   18da0:	mov	ip, #3
   18da4:	b	18dcc <__assert_fail@plt+0x78ac>
   18da8:	mov	ip, #4
   18dac:	b	18dcc <__assert_fail@plt+0x78ac>
   18db0:	mov	ip, #5
   18db4:	b	18dcc <__assert_fail@plt+0x78ac>
   18db8:	mov	ip, #6
   18dbc:	b	18dcc <__assert_fail@plt+0x78ac>
   18dc0:	mov	ip, #7
   18dc4:	b	18dcc <__assert_fail@plt+0x78ac>
   18dc8:	mov	ip, #8
   18dcc:	add	lr, sp, #8
   18dd0:	str	ip, [sp, #4]
   18dd4:	str	lr, [sp]
   18dd8:	bl	18960 <__assert_fail@plt+0x7440>
   18ddc:	mov	sp, fp
   18de0:	pop	{fp, pc}
   18de4:	push	{fp, lr}
   18de8:	mov	fp, sp
   18dec:	sub	sp, sp, #56	; 0x38
   18df0:	add	ip, fp, #8
   18df4:	str	ip, [sp, #12]
   18df8:	ldr	lr, [fp, #8]
   18dfc:	cmp	lr, #0
   18e00:	str	lr, [sp, #16]
   18e04:	beq	18ea0 <__assert_fail@plt+0x7980>
   18e08:	ldr	lr, [ip, #4]
   18e0c:	cmp	lr, #0
   18e10:	str	lr, [sp, #20]
   18e14:	beq	18ea8 <__assert_fail@plt+0x7988>
   18e18:	ldr	lr, [ip, #8]
   18e1c:	cmp	lr, #0
   18e20:	str	lr, [sp, #24]
   18e24:	beq	18eb0 <__assert_fail@plt+0x7990>
   18e28:	ldr	lr, [ip, #12]
   18e2c:	cmp	lr, #0
   18e30:	str	lr, [sp, #28]
   18e34:	beq	18eb8 <__assert_fail@plt+0x7998>
   18e38:	ldr	lr, [ip, #16]
   18e3c:	cmp	lr, #0
   18e40:	str	lr, [sp, #32]
   18e44:	beq	18ec0 <__assert_fail@plt+0x79a0>
   18e48:	ldr	lr, [ip, #20]
   18e4c:	cmp	lr, #0
   18e50:	str	lr, [sp, #36]	; 0x24
   18e54:	beq	18ec8 <__assert_fail@plt+0x79a8>
   18e58:	ldr	lr, [ip, #24]
   18e5c:	cmp	lr, #0
   18e60:	str	lr, [sp, #40]	; 0x28
   18e64:	beq	18ed0 <__assert_fail@plt+0x79b0>
   18e68:	ldr	lr, [ip, #28]
   18e6c:	cmp	lr, #0
   18e70:	str	lr, [sp, #44]	; 0x2c
   18e74:	beq	18ed8 <__assert_fail@plt+0x79b8>
   18e78:	ldr	lr, [ip, #32]
   18e7c:	cmp	lr, #0
   18e80:	str	lr, [sp, #48]	; 0x30
   18e84:	beq	18ee0 <__assert_fail@plt+0x79c0>
   18e88:	ldr	lr, [ip, #36]	; 0x24
   18e8c:	mov	ip, #10
   18e90:	cmp	lr, #0
   18e94:	str	lr, [sp, #52]	; 0x34
   18e98:	movweq	ip, #9
   18e9c:	b	18ee4 <__assert_fail@plt+0x79c4>
   18ea0:	mov	ip, #0
   18ea4:	b	18ee4 <__assert_fail@plt+0x79c4>
   18ea8:	mov	ip, #1
   18eac:	b	18ee4 <__assert_fail@plt+0x79c4>
   18eb0:	mov	ip, #2
   18eb4:	b	18ee4 <__assert_fail@plt+0x79c4>
   18eb8:	mov	ip, #3
   18ebc:	b	18ee4 <__assert_fail@plt+0x79c4>
   18ec0:	mov	ip, #4
   18ec4:	b	18ee4 <__assert_fail@plt+0x79c4>
   18ec8:	mov	ip, #5
   18ecc:	b	18ee4 <__assert_fail@plt+0x79c4>
   18ed0:	mov	ip, #6
   18ed4:	b	18ee4 <__assert_fail@plt+0x79c4>
   18ed8:	mov	ip, #7
   18edc:	b	18ee4 <__assert_fail@plt+0x79c4>
   18ee0:	mov	ip, #8
   18ee4:	add	lr, sp, #16
   18ee8:	str	ip, [sp, #4]
   18eec:	str	lr, [sp]
   18ef0:	bl	18960 <__assert_fail@plt+0x7440>
   18ef4:	mov	sp, fp
   18ef8:	pop	{fp, pc}
   18efc:	push	{fp, lr}
   18f00:	mov	fp, sp
   18f04:	movw	r0, #53644	; 0xd18c
   18f08:	movt	r0, #2
   18f0c:	ldr	r1, [r0]
   18f10:	movw	r0, #45015	; 0xafd7
   18f14:	movt	r0, #1
   18f18:	bl	11208 <fputs_unlocked@plt>
   18f1c:	movw	r1, #48431	; 0xbd2f
   18f20:	mov	r0, #0
   18f24:	mov	r2, #5
   18f28:	movt	r1, #1
   18f2c:	bl	11298 <dcgettext@plt>
   18f30:	movw	r2, #48451	; 0xbd43
   18f34:	mov	r1, r0
   18f38:	mov	r0, #1
   18f3c:	movt	r2, #1
   18f40:	bl	113f4 <__printf_chk@plt>
   18f44:	movw	r1, #48473	; 0xbd59
   18f48:	mov	r0, #0
   18f4c:	mov	r2, #5
   18f50:	movt	r1, #1
   18f54:	bl	11298 <dcgettext@plt>
   18f58:	movw	r2, #45555	; 0xb1f3
   18f5c:	movw	r3, #45830	; 0xb306
   18f60:	mov	r1, r0
   18f64:	mov	r0, #1
   18f68:	movt	r2, #1
   18f6c:	movt	r3, #1
   18f70:	bl	113f4 <__printf_chk@plt>
   18f74:	movw	r1, #48493	; 0xbd6d
   18f78:	mov	r0, #0
   18f7c:	mov	r2, #5
   18f80:	movt	r1, #1
   18f84:	bl	11298 <dcgettext@plt>
   18f88:	movw	r2, #48532	; 0xbd94
   18f8c:	mov	r1, r0
   18f90:	mov	r0, #1
   18f94:	movt	r2, #1
   18f98:	pop	{fp, lr}
   18f9c:	b	113f4 <__printf_chk@plt>
   18fa0:	push	{r4, r5, r6, sl, fp, lr}
   18fa4:	add	fp, sp, #16
   18fa8:	mov	r4, r2
   18fac:	mov	r5, r1
   18fb0:	mov	r6, r0
   18fb4:	bl	1a4e4 <__assert_fail@plt+0x8fc4>
   18fb8:	cmp	r0, #0
   18fbc:	popne	{r4, r5, r6, sl, fp, pc}
   18fc0:	cmp	r6, #0
   18fc4:	beq	18fd8 <__assert_fail@plt+0x7ab8>
   18fc8:	cmp	r5, #0
   18fcc:	cmpne	r4, #0
   18fd0:	bne	18fd8 <__assert_fail@plt+0x7ab8>
   18fd4:	pop	{r4, r5, r6, sl, fp, pc}
   18fd8:	bl	19554 <__assert_fail@plt+0x8034>
   18fdc:	push	{r4, r5, r6, sl, fp, lr}
   18fe0:	add	fp, sp, #16
   18fe4:	mov	r4, r2
   18fe8:	mov	r5, r1
   18fec:	mov	r6, r0
   18ff0:	bl	1a4e4 <__assert_fail@plt+0x8fc4>
   18ff4:	cmp	r0, #0
   18ff8:	popne	{r4, r5, r6, sl, fp, pc}
   18ffc:	cmp	r6, #0
   19000:	beq	19014 <__assert_fail@plt+0x7af4>
   19004:	cmp	r5, #0
   19008:	cmpne	r4, #0
   1900c:	bne	19014 <__assert_fail@plt+0x7af4>
   19010:	pop	{r4, r5, r6, sl, fp, pc}
   19014:	bl	19554 <__assert_fail@plt+0x8034>
   19018:	push	{fp, lr}
   1901c:	mov	fp, sp
   19020:	bl	19e94 <__assert_fail@plt+0x8974>
   19024:	cmp	r0, #0
   19028:	popne	{fp, pc}
   1902c:	bl	19554 <__assert_fail@plt+0x8034>
   19030:	push	{fp, lr}
   19034:	mov	fp, sp
   19038:	bl	19e94 <__assert_fail@plt+0x8974>
   1903c:	cmp	r0, #0
   19040:	popne	{fp, pc}
   19044:	bl	19554 <__assert_fail@plt+0x8034>
   19048:	push	{fp, lr}
   1904c:	mov	fp, sp
   19050:	bl	19e94 <__assert_fail@plt+0x8974>
   19054:	cmp	r0, #0
   19058:	popne	{fp, pc}
   1905c:	bl	19554 <__assert_fail@plt+0x8034>
   19060:	push	{r4, r5, fp, lr}
   19064:	add	fp, sp, #8
   19068:	mov	r4, r1
   1906c:	mov	r5, r0
   19070:	bl	19ec4 <__assert_fail@plt+0x89a4>
   19074:	cmp	r0, #0
   19078:	popne	{r4, r5, fp, pc}
   1907c:	cmp	r5, #0
   19080:	beq	19090 <__assert_fail@plt+0x7b70>
   19084:	cmp	r4, #0
   19088:	bne	19090 <__assert_fail@plt+0x7b70>
   1908c:	pop	{r4, r5, fp, pc}
   19090:	bl	19554 <__assert_fail@plt+0x8034>
   19094:	push	{fp, lr}
   19098:	mov	fp, sp
   1909c:	cmp	r1, #0
   190a0:	orreq	r1, r1, #1
   190a4:	bl	19ec4 <__assert_fail@plt+0x89a4>
   190a8:	cmp	r0, #0
   190ac:	popne	{fp, pc}
   190b0:	bl	19554 <__assert_fail@plt+0x8034>
   190b4:	push	{fp, lr}
   190b8:	mov	fp, sp
   190bc:	clz	r3, r2
   190c0:	lsr	ip, r3, #5
   190c4:	clz	r3, r1
   190c8:	lsr	r3, r3, #5
   190cc:	orrs	r3, r3, ip
   190d0:	movwne	r1, #1
   190d4:	movwne	r2, #1
   190d8:	bl	1a4e4 <__assert_fail@plt+0x8fc4>
   190dc:	cmp	r0, #0
   190e0:	popne	{fp, pc}
   190e4:	bl	19554 <__assert_fail@plt+0x8034>
   190e8:	push	{fp, lr}
   190ec:	mov	fp, sp
   190f0:	mov	r2, r1
   190f4:	mov	r1, r0
   190f8:	mov	r0, #0
   190fc:	bl	1a4e4 <__assert_fail@plt+0x8fc4>
   19100:	cmp	r0, #0
   19104:	popne	{fp, pc}
   19108:	bl	19554 <__assert_fail@plt+0x8034>
   1910c:	push	{fp, lr}
   19110:	mov	fp, sp
   19114:	mov	r2, r1
   19118:	mov	r1, r0
   1911c:	clz	r0, r2
   19120:	clz	r3, r1
   19124:	lsr	r0, r0, #5
   19128:	lsr	r3, r3, #5
   1912c:	orrs	r0, r3, r0
   19130:	mov	r0, #0
   19134:	movwne	r1, #1
   19138:	movwne	r2, #1
   1913c:	bl	1a4e4 <__assert_fail@plt+0x8fc4>
   19140:	cmp	r0, #0
   19144:	popne	{fp, pc}
   19148:	bl	19554 <__assert_fail@plt+0x8034>
   1914c:	push	{r4, r5, r6, sl, fp, lr}
   19150:	add	fp, sp, #16
   19154:	ldr	r5, [r1]
   19158:	mov	r4, r1
   1915c:	mov	r6, r0
   19160:	cmp	r0, #0
   19164:	beq	1917c <__assert_fail@plt+0x7c5c>
   19168:	mov	r0, #1
   1916c:	add	r0, r0, r5, lsr #1
   19170:	adds	r5, r5, r0
   19174:	bcc	19184 <__assert_fail@plt+0x7c64>
   19178:	b	191c0 <__assert_fail@plt+0x7ca0>
   1917c:	cmp	r5, #0
   19180:	movweq	r5, #64	; 0x40
   19184:	mov	r0, r6
   19188:	mov	r1, r5
   1918c:	mov	r2, #1
   19190:	bl	1a4e4 <__assert_fail@plt+0x8fc4>
   19194:	cmp	r5, #0
   19198:	mov	r1, r5
   1919c:	movwne	r1, #1
   191a0:	cmp	r0, #0
   191a4:	bne	191b8 <__assert_fail@plt+0x7c98>
   191a8:	clz	r2, r6
   191ac:	lsr	r2, r2, #5
   191b0:	orrs	r1, r2, r1
   191b4:	bne	191c0 <__assert_fail@plt+0x7ca0>
   191b8:	str	r5, [r4]
   191bc:	pop	{r4, r5, r6, sl, fp, pc}
   191c0:	bl	19554 <__assert_fail@plt+0x8034>
   191c4:	push	{r4, r5, r6, r7, fp, lr}
   191c8:	add	fp, sp, #16
   191cc:	ldr	r5, [r1]
   191d0:	mov	r6, r2
   191d4:	mov	r4, r1
   191d8:	mov	r7, r0
   191dc:	cmp	r0, #0
   191e0:	beq	191f8 <__assert_fail@plt+0x7cd8>
   191e4:	mov	r0, #1
   191e8:	add	r0, r0, r5, lsr #1
   191ec:	adds	r5, r5, r0
   191f0:	bcc	19210 <__assert_fail@plt+0x7cf0>
   191f4:	b	19244 <__assert_fail@plt+0x7d24>
   191f8:	cmp	r5, #0
   191fc:	bne	19210 <__assert_fail@plt+0x7cf0>
   19200:	mov	r0, #64	; 0x40
   19204:	cmp	r6, #64	; 0x40
   19208:	udiv	r5, r0, r6
   1920c:	addhi	r5, r5, #1
   19210:	mov	r0, r7
   19214:	mov	r1, r5
   19218:	mov	r2, r6
   1921c:	bl	1a4e4 <__assert_fail@plt+0x8fc4>
   19220:	cmp	r0, #0
   19224:	bne	1923c <__assert_fail@plt+0x7d1c>
   19228:	cmp	r7, #0
   1922c:	beq	19244 <__assert_fail@plt+0x7d24>
   19230:	cmp	r6, #0
   19234:	cmpne	r5, #0
   19238:	bne	19244 <__assert_fail@plt+0x7d24>
   1923c:	str	r5, [r4]
   19240:	pop	{r4, r5, r6, r7, fp, pc}
   19244:	bl	19554 <__assert_fail@plt+0x8034>
   19248:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1924c:	add	fp, sp, #24
   19250:	mov	r8, r1
   19254:	ldr	r1, [r1]
   19258:	mov	r5, r0
   1925c:	add	r0, r1, r1, asr #1
   19260:	cmp	r0, r1
   19264:	mvnvs	r0, #-2147483648	; 0x80000000
   19268:	cmp	r0, r3
   1926c:	mov	r7, r0
   19270:	movgt	r7, r3
   19274:	cmn	r3, #1
   19278:	movle	r7, r0
   1927c:	ldr	r0, [fp, #8]
   19280:	cmn	r0, #1
   19284:	ble	192ac <__assert_fail@plt+0x7d8c>
   19288:	cmp	r0, #0
   1928c:	beq	19300 <__assert_fail@plt+0x7de0>
   19290:	cmn	r7, #1
   19294:	ble	192d4 <__assert_fail@plt+0x7db4>
   19298:	mvn	r4, #-2147483648	; 0x80000000
   1929c:	udiv	r6, r4, r0
   192a0:	cmp	r6, r7
   192a4:	bge	19300 <__assert_fail@plt+0x7de0>
   192a8:	b	19310 <__assert_fail@plt+0x7df0>
   192ac:	cmn	r7, #1
   192b0:	ble	192f0 <__assert_fail@plt+0x7dd0>
   192b4:	cmn	r0, #1
   192b8:	beq	19300 <__assert_fail@plt+0x7de0>
   192bc:	mov	r6, #-2147483648	; 0x80000000
   192c0:	mvn	r4, #-2147483648	; 0x80000000
   192c4:	sdiv	r6, r6, r0
   192c8:	cmp	r6, r7
   192cc:	bge	19300 <__assert_fail@plt+0x7de0>
   192d0:	b	19310 <__assert_fail@plt+0x7df0>
   192d4:	beq	19300 <__assert_fail@plt+0x7de0>
   192d8:	mov	r6, #-2147483648	; 0x80000000
   192dc:	mvn	r4, #-2147483648	; 0x80000000
   192e0:	sdiv	r6, r6, r7
   192e4:	cmp	r6, r0
   192e8:	bge	19300 <__assert_fail@plt+0x7de0>
   192ec:	b	19310 <__assert_fail@plt+0x7df0>
   192f0:	mvn	r4, #-2147483648	; 0x80000000
   192f4:	sdiv	r6, r4, r0
   192f8:	cmp	r7, r6
   192fc:	blt	19310 <__assert_fail@plt+0x7df0>
   19300:	mul	r6, r7, r0
   19304:	mov	r4, #64	; 0x40
   19308:	cmp	r6, #63	; 0x3f
   1930c:	bgt	19318 <__assert_fail@plt+0x7df8>
   19310:	sdiv	r7, r4, r0
   19314:	mul	r6, r7, r0
   19318:	cmp	r5, #0
   1931c:	moveq	r4, #0
   19320:	streq	r4, [r8]
   19324:	sub	r4, r7, r1
   19328:	cmp	r4, r2
   1932c:	bge	193d8 <__assert_fail@plt+0x7eb8>
   19330:	add	r7, r1, r2
   19334:	mov	r6, #0
   19338:	mov	r2, #0
   1933c:	cmp	r7, r3
   19340:	movwgt	r6, #1
   19344:	cmn	r3, #1
   19348:	movwgt	r2, #1
   1934c:	cmp	r7, r1
   19350:	bvs	1940c <__assert_fail@plt+0x7eec>
   19354:	ands	r1, r2, r6
   19358:	bne	1940c <__assert_fail@plt+0x7eec>
   1935c:	cmn	r0, #1
   19360:	ble	19388 <__assert_fail@plt+0x7e68>
   19364:	cmp	r0, #0
   19368:	beq	193d4 <__assert_fail@plt+0x7eb4>
   1936c:	cmn	r7, #1
   19370:	ble	193ac <__assert_fail@plt+0x7e8c>
   19374:	mvn	r1, #-2147483648	; 0x80000000
   19378:	udiv	r1, r1, r0
   1937c:	cmp	r1, r7
   19380:	bge	193d4 <__assert_fail@plt+0x7eb4>
   19384:	b	1940c <__assert_fail@plt+0x7eec>
   19388:	cmn	r7, #1
   1938c:	ble	193c4 <__assert_fail@plt+0x7ea4>
   19390:	cmn	r0, #1
   19394:	beq	193d4 <__assert_fail@plt+0x7eb4>
   19398:	mov	r1, #-2147483648	; 0x80000000
   1939c:	sdiv	r1, r1, r0
   193a0:	cmp	r1, r7
   193a4:	bge	193d4 <__assert_fail@plt+0x7eb4>
   193a8:	b	1940c <__assert_fail@plt+0x7eec>
   193ac:	beq	193d4 <__assert_fail@plt+0x7eb4>
   193b0:	mov	r1, #-2147483648	; 0x80000000
   193b4:	sdiv	r1, r1, r7
   193b8:	cmp	r1, r0
   193bc:	bge	193d4 <__assert_fail@plt+0x7eb4>
   193c0:	b	1940c <__assert_fail@plt+0x7eec>
   193c4:	mvn	r1, #-2147483648	; 0x80000000
   193c8:	sdiv	r1, r1, r0
   193cc:	cmp	r7, r1
   193d0:	blt	1940c <__assert_fail@plt+0x7eec>
   193d4:	mul	r6, r7, r0
   193d8:	mov	r0, r5
   193dc:	mov	r1, r6
   193e0:	bl	19ec4 <__assert_fail@plt+0x89a4>
   193e4:	cmp	r6, #0
   193e8:	movwne	r6, #1
   193ec:	cmp	r0, #0
   193f0:	bne	19404 <__assert_fail@plt+0x7ee4>
   193f4:	clz	r1, r5
   193f8:	lsr	r1, r1, #5
   193fc:	orrs	r1, r1, r6
   19400:	bne	1940c <__assert_fail@plt+0x7eec>
   19404:	str	r7, [r8]
   19408:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1940c:	bl	19554 <__assert_fail@plt+0x8034>
   19410:	push	{fp, lr}
   19414:	mov	fp, sp
   19418:	mov	r1, #1
   1941c:	bl	19e40 <__assert_fail@plt+0x8920>
   19420:	cmp	r0, #0
   19424:	popne	{fp, pc}
   19428:	bl	19554 <__assert_fail@plt+0x8034>
   1942c:	push	{fp, lr}
   19430:	mov	fp, sp
   19434:	bl	19e40 <__assert_fail@plt+0x8920>
   19438:	cmp	r0, #0
   1943c:	popne	{fp, pc}
   19440:	bl	19554 <__assert_fail@plt+0x8034>
   19444:	push	{fp, lr}
   19448:	mov	fp, sp
   1944c:	mov	r1, #1
   19450:	bl	19e40 <__assert_fail@plt+0x8920>
   19454:	cmp	r0, #0
   19458:	popne	{fp, pc}
   1945c:	bl	19554 <__assert_fail@plt+0x8034>
   19460:	push	{fp, lr}
   19464:	mov	fp, sp
   19468:	bl	19e40 <__assert_fail@plt+0x8920>
   1946c:	cmp	r0, #0
   19470:	popne	{fp, pc}
   19474:	bl	19554 <__assert_fail@plt+0x8034>
   19478:	push	{r4, r5, fp, lr}
   1947c:	add	fp, sp, #8
   19480:	mov	r5, r0
   19484:	mov	r0, r1
   19488:	mov	r4, r1
   1948c:	bl	19e94 <__assert_fail@plt+0x8974>
   19490:	cmp	r0, #0
   19494:	beq	194a8 <__assert_fail@plt+0x7f88>
   19498:	mov	r1, r5
   1949c:	mov	r2, r4
   194a0:	pop	{r4, r5, fp, lr}
   194a4:	b	11274 <memcpy@plt>
   194a8:	bl	19554 <__assert_fail@plt+0x8034>
   194ac:	push	{r4, r5, fp, lr}
   194b0:	add	fp, sp, #8
   194b4:	mov	r5, r0
   194b8:	mov	r0, r1
   194bc:	mov	r4, r1
   194c0:	bl	19e94 <__assert_fail@plt+0x8974>
   194c4:	cmp	r0, #0
   194c8:	beq	194dc <__assert_fail@plt+0x7fbc>
   194cc:	mov	r1, r5
   194d0:	mov	r2, r4
   194d4:	pop	{r4, r5, fp, lr}
   194d8:	b	11274 <memcpy@plt>
   194dc:	bl	19554 <__assert_fail@plt+0x8034>
   194e0:	push	{r4, r5, fp, lr}
   194e4:	add	fp, sp, #8
   194e8:	mov	r5, r0
   194ec:	add	r0, r1, #1
   194f0:	mov	r4, r1
   194f4:	bl	19e94 <__assert_fail@plt+0x8974>
   194f8:	cmp	r0, #0
   194fc:	beq	19518 <__assert_fail@plt+0x7ff8>
   19500:	mov	r1, #0
   19504:	mov	r2, r4
   19508:	strb	r1, [r0, r4]
   1950c:	mov	r1, r5
   19510:	pop	{r4, r5, fp, lr}
   19514:	b	11274 <memcpy@plt>
   19518:	bl	19554 <__assert_fail@plt+0x8034>
   1951c:	push	{r4, r5, fp, lr}
   19520:	add	fp, sp, #8
   19524:	mov	r4, r0
   19528:	bl	113a0 <strlen@plt>
   1952c:	add	r5, r0, #1
   19530:	mov	r0, r5
   19534:	bl	19e94 <__assert_fail@plt+0x8974>
   19538:	cmp	r0, #0
   1953c:	beq	19550 <__assert_fail@plt+0x8030>
   19540:	mov	r1, r4
   19544:	mov	r2, r5
   19548:	pop	{r4, r5, fp, lr}
   1954c:	b	11274 <memcpy@plt>
   19550:	bl	19554 <__assert_fail@plt+0x8034>
   19554:	push	{fp, lr}
   19558:	mov	fp, sp
   1955c:	movw	r0, #53556	; 0xd134
   19560:	movw	r1, #48608	; 0xbde0
   19564:	mov	r2, #5
   19568:	movt	r0, #2
   1956c:	movt	r1, #1
   19570:	ldr	r4, [r0]
   19574:	mov	r0, #0
   19578:	bl	11298 <dcgettext@plt>
   1957c:	movw	r2, #45552	; 0xb1f0
   19580:	mov	r3, r0
   19584:	mov	r0, r4
   19588:	mov	r1, #0
   1958c:	movt	r2, #1
   19590:	bl	1131c <error@plt>
   19594:	bl	114d8 <abort@plt>
   19598:	push	{fp, lr}
   1959c:	mov	fp, sp
   195a0:	orr	r1, r1, #512	; 0x200
   195a4:	bl	12ecc <__assert_fail@plt+0x19ac>
   195a8:	cmp	r0, #0
   195ac:	popne	{fp, pc}
   195b0:	bl	113d0 <__errno_location@plt>
   195b4:	ldr	r0, [r0]
   195b8:	cmp	r0, #22
   195bc:	bne	195e0 <__assert_fail@plt+0x80c0>
   195c0:	movw	r0, #48625	; 0xbdf1
   195c4:	movw	r1, #48641	; 0xbe01
   195c8:	movw	r3, #48652	; 0xbe0c
   195cc:	mov	r2, #41	; 0x29
   195d0:	movt	r0, #1
   195d4:	movt	r1, #1
   195d8:	movt	r3, #1
   195dc:	bl	11520 <__assert_fail@plt>
   195e0:	bl	19554 <__assert_fail@plt+0x8034>
   195e4:	ldr	r0, [r0, #48]	; 0x30
   195e8:	and	r0, r0, #17
   195ec:	cmp	r0, #16
   195f0:	moveq	r0, #1
   195f4:	bxeq	lr
   195f8:	cmp	r0, #17
   195fc:	movne	r0, #0
   19600:	bxne	lr
   19604:	ldr	r0, [r1, #48]	; 0x30
   19608:	cmp	r0, #0
   1960c:	movwne	r0, #1
   19610:	bx	lr
   19614:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19618:	add	fp, sp, #28
   1961c:	sub	sp, sp, #20
   19620:	cmp	r2, #37	; 0x25
   19624:	bcs	19e20 <__assert_fail@plt+0x8900>
   19628:	ldr	r9, [fp, #8]
   1962c:	mov	r5, r2
   19630:	mov	r4, r1
   19634:	mov	r7, r0
   19638:	str	r3, [sp, #12]
   1963c:	bl	113d0 <__errno_location@plt>
   19640:	mov	r8, r0
   19644:	mov	r0, #0
   19648:	str	r0, [r8]
   1964c:	bl	11370 <__ctype_b_loc@plt>
   19650:	ldr	r1, [r0]
   19654:	mov	r2, r7
   19658:	ldrb	r0, [r2], #1
   1965c:	add	r3, r1, r0, lsl #1
   19660:	ldrb	r3, [r3, #1]
   19664:	tst	r3, #32
   19668:	bne	19658 <__assert_fail@plt+0x8138>
   1966c:	cmp	r4, #0
   19670:	add	r6, sp, #16
   19674:	mov	sl, #4
   19678:	movne	r6, r4
   1967c:	cmp	r0, #45	; 0x2d
   19680:	beq	19ce0 <__assert_fail@plt+0x87c0>
   19684:	mov	r0, r7
   19688:	mov	r1, r6
   1968c:	mov	r2, r5
   19690:	bl	11394 <strtoul@plt>
   19694:	ldr	r5, [r6]
   19698:	cmp	r5, r7
   1969c:	beq	196c8 <__assert_fail@plt+0x81a8>
   196a0:	mov	r4, r0
   196a4:	ldr	r0, [r8]
   196a8:	cmp	r0, #0
   196ac:	beq	196f8 <__assert_fail@plt+0x81d8>
   196b0:	cmp	r0, #34	; 0x22
   196b4:	bne	19ce0 <__assert_fail@plt+0x87c0>
   196b8:	mov	sl, #1
   196bc:	cmp	r9, #0
   196c0:	bne	19704 <__assert_fail@plt+0x81e4>
   196c4:	b	19cd8 <__assert_fail@plt+0x87b8>
   196c8:	cmp	r9, #0
   196cc:	beq	19ce0 <__assert_fail@plt+0x87c0>
   196d0:	ldrb	r1, [r7]
   196d4:	cmp	r1, #0
   196d8:	beq	19ce0 <__assert_fail@plt+0x87c0>
   196dc:	mov	r0, r9
   196e0:	bl	113ac <strchr@plt>
   196e4:	cmp	r0, #0
   196e8:	beq	19ce0 <__assert_fail@plt+0x87c0>
   196ec:	mov	r4, #1
   196f0:	mov	sl, #0
   196f4:	b	19704 <__assert_fail@plt+0x81e4>
   196f8:	mov	sl, r0
   196fc:	cmp	r9, #0
   19700:	beq	19cd8 <__assert_fail@plt+0x87b8>
   19704:	ldrb	r7, [r5]
   19708:	cmp	r7, #0
   1970c:	beq	19cd8 <__assert_fail@plt+0x87b8>
   19710:	mov	r0, r9
   19714:	mov	r1, r7
   19718:	bl	113ac <strchr@plt>
   1971c:	cmp	r0, #0
   19720:	beq	1999c <__assert_fail@plt+0x847c>
   19724:	sub	r0, r7, #69	; 0x45
   19728:	mov	lr, #1
   1972c:	mov	r8, #1024	; 0x400
   19730:	cmp	r0, #47	; 0x2f
   19734:	bhi	19850 <__assert_fail@plt+0x8330>
   19738:	add	r1, pc, #0
   1973c:	ldr	pc, [r1, r0, lsl #2]
   19740:	andeq	r9, r1, r0, lsl #16
   19744:	andeq	r9, r1, r0, asr r8
   19748:	andeq	r9, r1, r0, lsl #16
   1974c:	andeq	r9, r1, r0, asr r8
   19750:	andeq	r9, r1, r0, asr r8
   19754:	andeq	r9, r1, r0, asr r8
   19758:	andeq	r9, r1, r0, lsl #16
   1975c:	andeq	r9, r1, r0, asr r8
   19760:	andeq	r9, r1, r0, lsl #16
   19764:	andeq	r9, r1, r0, asr r8
   19768:	andeq	r9, r1, r0, asr r8
   1976c:	andeq	r9, r1, r0, lsl #16
   19770:	andeq	r9, r1, r0, asr r8
   19774:	andeq	r9, r1, r0, asr r8
   19778:	andeq	r9, r1, r0, asr r8
   1977c:	andeq	r9, r1, r0, lsl #16
   19780:	andeq	r9, r1, r0, asr r8
   19784:	andeq	r9, r1, r0, asr r8
   19788:	andeq	r9, r1, r0, asr r8
   1978c:	andeq	r9, r1, r0, asr r8
   19790:	andeq	r9, r1, r0, lsl #16
   19794:	andeq	r9, r1, r0, lsl #16
   19798:	andeq	r9, r1, r0, asr r8
   1979c:	andeq	r9, r1, r0, asr r8
   197a0:	andeq	r9, r1, r0, asr r8
   197a4:	andeq	r9, r1, r0, asr r8
   197a8:	andeq	r9, r1, r0, asr r8
   197ac:	andeq	r9, r1, r0, asr r8
   197b0:	andeq	r9, r1, r0, asr r8
   197b4:	andeq	r9, r1, r0, asr r8
   197b8:	andeq	r9, r1, r0, asr r8
   197bc:	andeq	r9, r1, r0, asr r8
   197c0:	andeq	r9, r1, r0, asr r8
   197c4:	andeq	r9, r1, r0, asr r8
   197c8:	andeq	r9, r1, r0, lsl #16
   197cc:	andeq	r9, r1, r0, asr r8
   197d0:	andeq	r9, r1, r0, asr r8
   197d4:	andeq	r9, r1, r0, asr r8
   197d8:	andeq	r9, r1, r0, lsl #16
   197dc:	andeq	r9, r1, r0, asr r8
   197e0:	andeq	r9, r1, r0, lsl #16
   197e4:	andeq	r9, r1, r0, asr r8
   197e8:	andeq	r9, r1, r0, asr r8
   197ec:	andeq	r9, r1, r0, asr r8
   197f0:	andeq	r9, r1, r0, asr r8
   197f4:	andeq	r9, r1, r0, asr r8
   197f8:	andeq	r9, r1, r0, asr r8
   197fc:	andeq	r9, r1, r0, lsl #16
   19800:	mov	r0, r9
   19804:	mov	r1, #48	; 0x30
   19808:	bl	113ac <strchr@plt>
   1980c:	cmp	r0, #0
   19810:	beq	1984c <__assert_fail@plt+0x832c>
   19814:	ldrb	r0, [r5, #1]
   19818:	cmp	r0, #66	; 0x42
   1981c:	cmpne	r0, #68	; 0x44
   19820:	bne	19830 <__assert_fail@plt+0x8310>
   19824:	mov	lr, #2
   19828:	mov	r8, #1000	; 0x3e8
   1982c:	b	19850 <__assert_fail@plt+0x8330>
   19830:	cmp	r0, #105	; 0x69
   19834:	bne	1984c <__assert_fail@plt+0x832c>
   19838:	ldrb	r0, [r5, #2]
   1983c:	mov	lr, #1
   19840:	cmp	r0, #66	; 0x42
   19844:	movweq	lr, #3
   19848:	b	19850 <__assert_fail@plt+0x8330>
   1984c:	mov	lr, #1
   19850:	sub	r1, r7, #66	; 0x42
   19854:	cmp	r1, #53	; 0x35
   19858:	bhi	1999c <__assert_fail@plt+0x847c>
   1985c:	add	r2, pc, #4
   19860:	mov	r0, #0
   19864:	ldr	pc, [r2, r1, lsl #2]
   19868:	andeq	r9, r1, r4, asr fp
   1986c:	muleq	r1, ip, r9
   19870:	muleq	r1, ip, r9
   19874:	andeq	r9, r1, r0, ror fp
   19878:	muleq	r1, ip, r9
   1987c:	andeq	r9, r1, r0, asr #18
   19880:	muleq	r1, ip, r9
   19884:	muleq	r1, ip, r9
   19888:	muleq	r1, ip, r9
   1988c:	andeq	r9, r1, r8, lsr #19
   19890:	muleq	r1, ip, r9
   19894:	andeq	r9, r1, ip, asr #19
   19898:	muleq	r1, ip, r9
   1989c:	muleq	r1, ip, r9
   198a0:	andeq	r9, r1, r8, lsr #24
   198a4:	muleq	r1, ip, r9
   198a8:	muleq	r1, ip, r9
   198ac:	muleq	r1, ip, r9
   198b0:	andeq	r9, r1, ip, lsl #20
   198b4:	muleq	r1, ip, r9
   198b8:	muleq	r1, ip, r9
   198bc:	muleq	r1, ip, r9
   198c0:	muleq	r1, ip, r9
   198c4:	andeq	r9, r1, ip, ror #25
   198c8:	andeq	r9, r1, r0, lsl #21
   198cc:	muleq	r1, ip, r9
   198d0:	muleq	r1, ip, r9
   198d4:	muleq	r1, ip, r9
   198d8:	muleq	r1, ip, r9
   198dc:	muleq	r1, ip, r9
   198e0:	muleq	r1, ip, r9
   198e4:	muleq	r1, ip, r9
   198e8:	andeq	r9, r1, r4, ror #27
   198ec:	andeq	r9, r1, r0, asr #25
   198f0:	muleq	r1, ip, r9
   198f4:	muleq	r1, ip, r9
   198f8:	muleq	r1, ip, r9
   198fc:	andeq	r9, r1, r0, asr #18
   19900:	muleq	r1, ip, r9
   19904:	muleq	r1, ip, r9
   19908:	muleq	r1, ip, r9
   1990c:	andeq	r9, r1, r8, lsr #19
   19910:	muleq	r1, ip, r9
   19914:	andeq	r9, r1, ip, asr #19
   19918:	muleq	r1, ip, r9
   1991c:	muleq	r1, ip, r9
   19920:	muleq	r1, ip, r9
   19924:	muleq	r1, ip, r9
   19928:	muleq	r1, ip, r9
   1992c:	muleq	r1, ip, r9
   19930:	andeq	r9, r1, ip, lsl #20
   19934:	muleq	r1, ip, r9
   19938:	muleq	r1, ip, r9
   1993c:	andeq	r9, r1, r8, lsl #28
   19940:	mvn	r0, #0
   19944:	mul	r1, r4, r8
   19948:	mov	r7, #0
   1994c:	udiv	r0, r0, r8
   19950:	cmp	r0, r4
   19954:	mvncc	r1, #0
   19958:	cmp	r0, r1
   1995c:	mul	r2, r1, r8
   19960:	mvncc	r2, #0
   19964:	cmp	r0, r2
   19968:	mul	r3, r2, r8
   1996c:	mov	r2, #0
   19970:	mvncc	r3, #0
   19974:	movwcc	r7, #1
   19978:	cmp	r0, r1
   1997c:	mov	r1, #0
   19980:	movwcc	r1, #1
   19984:	cmp	r0, r4
   19988:	mov	r4, r3
   1998c:	movwcc	r2, #1
   19990:	orr	r0, r2, r1
   19994:	orr	r0, r0, r7
   19998:	b	19cc0 <__assert_fail@plt+0x87a0>
   1999c:	ldr	r0, [sp, #12]
   199a0:	orr	sl, sl, #2
   199a4:	b	19cdc <__assert_fail@plt+0x87bc>
   199a8:	mvn	r0, #0
   199ac:	mul	r1, r4, r8
   199b0:	udiv	r0, r0, r8
   199b4:	cmp	r0, r4
   199b8:	mov	r0, #0
   199bc:	mvncc	r1, #0
   199c0:	movwcc	r0, #1
   199c4:	mov	r4, r1
   199c8:	b	19cc0 <__assert_fail@plt+0x87a0>
   199cc:	mvn	r0, #0
   199d0:	mul	r1, r4, r8
   199d4:	mov	r3, #0
   199d8:	udiv	r0, r0, r8
   199dc:	cmp	r0, r4
   199e0:	mvncc	r1, #0
   199e4:	cmp	r0, r1
   199e8:	mul	r2, r1, r8
   199ec:	mov	r1, #0
   199f0:	mvncc	r2, #0
   199f4:	movwcc	r3, #1
   199f8:	cmp	r0, r4
   199fc:	movwcc	r1, #1
   19a00:	mov	r4, r2
   19a04:	orr	r0, r1, r3
   19a08:	b	19cc0 <__assert_fail@plt+0x87a0>
   19a0c:	mvn	r0, #0
   19a10:	mul	r1, r4, r8
   19a14:	mov	r7, #0
   19a18:	udiv	r0, r0, r8
   19a1c:	cmp	r0, r4
   19a20:	mvncc	r1, #0
   19a24:	cmp	r0, r1
   19a28:	mul	r2, r1, r8
   19a2c:	mvncc	r2, #0
   19a30:	cmp	r0, r2
   19a34:	mul	r3, r2, r8
   19a38:	mvncc	r3, #0
   19a3c:	cmp	r0, r3
   19a40:	mul	ip, r3, r8
   19a44:	mov	r3, #0
   19a48:	mvncc	ip, #0
   19a4c:	movwcc	r7, #1
   19a50:	cmp	r0, r2
   19a54:	mov	r2, #0
   19a58:	movwcc	r2, #1
   19a5c:	cmp	r0, r1
   19a60:	mov	r1, #0
   19a64:	movwcc	r1, #1
   19a68:	cmp	r0, r4
   19a6c:	movwcc	r3, #1
   19a70:	orr	r0, r3, r1
   19a74:	orr	r0, r0, r2
   19a78:	orr	r0, r0, r7
   19a7c:	b	19cbc <__assert_fail@plt+0x879c>
   19a80:	mvn	r0, #0
   19a84:	str	lr, [sp, #8]
   19a88:	mul	lr, r4, r8
   19a8c:	udiv	r0, r0, r8
   19a90:	cmp	r0, r4
   19a94:	mvncc	lr, #0
   19a98:	cmp	r0, lr
   19a9c:	mul	r9, lr, r8
   19aa0:	mvncc	r9, #0
   19aa4:	cmp	r0, r9
   19aa8:	mul	r7, r9, r8
   19aac:	mvncc	r7, #0
   19ab0:	cmp	r0, r7
   19ab4:	mul	r3, r7, r8
   19ab8:	mvncc	r3, #0
   19abc:	cmp	r0, r3
   19ac0:	mul	r1, r3, r8
   19ac4:	mvncc	r1, #0
   19ac8:	cmp	r0, r1
   19acc:	mul	r2, r1, r8
   19ad0:	mvncc	r2, #0
   19ad4:	cmp	r0, r2
   19ad8:	mul	ip, r2, r8
   19adc:	mov	r8, #0
   19ae0:	mov	r2, #0
   19ae4:	mvncc	ip, #0
   19ae8:	movwcc	r8, #1
   19aec:	cmp	r0, r1
   19af0:	mov	r1, #0
   19af4:	movwcc	r1, #1
   19af8:	cmp	r0, r3
   19afc:	mov	r3, #0
   19b00:	movwcc	r3, #1
   19b04:	cmp	r0, r7
   19b08:	mov	r7, #0
   19b0c:	movwcc	r7, #1
   19b10:	cmp	r0, r9
   19b14:	mov	r9, #0
   19b18:	movwcc	r9, #1
   19b1c:	cmp	r0, lr
   19b20:	mov	lr, #0
   19b24:	movwcc	lr, #1
   19b28:	cmp	r0, r4
   19b2c:	movwcc	r2, #1
   19b30:	orr	r0, r2, lr
   19b34:	ldr	lr, [sp, #8]
   19b38:	orr	r0, r0, r9
   19b3c:	orr	r0, r0, r7
   19b40:	orr	r0, r0, r3
   19b44:	orr	r0, r0, r1
   19b48:	orr	r0, r0, r8
   19b4c:	and	r0, r0, #1
   19b50:	b	19cbc <__assert_fail@plt+0x879c>
   19b54:	mov	r1, #0
   19b58:	lsr	r0, r4, #22
   19b5c:	cmp	r1, r4, lsr #22
   19b60:	lsl	r4, r4, #10
   19b64:	movwne	r0, #1
   19b68:	mvnne	r4, #0
   19b6c:	b	19cc0 <__assert_fail@plt+0x87a0>
   19b70:	mvn	r0, #0
   19b74:	mul	ip, r4, r8
   19b78:	str	lr, [sp, #8]
   19b7c:	mov	r9, #0
   19b80:	udiv	r0, r0, r8
   19b84:	cmp	r0, r4
   19b88:	mvncc	ip, #0
   19b8c:	cmp	r0, ip
   19b90:	mul	r2, ip, r8
   19b94:	mvncc	r2, #0
   19b98:	cmp	r0, r2
   19b9c:	mul	r3, r2, r8
   19ba0:	mvncc	r3, #0
   19ba4:	cmp	r0, r3
   19ba8:	mul	r7, r3, r8
   19bac:	mvncc	r7, #0
   19bb0:	cmp	r0, r7
   19bb4:	mul	r1, r7, r8
   19bb8:	mvncc	r1, #0
   19bbc:	cmp	r0, r1
   19bc0:	mul	lr, r1, r8
   19bc4:	mov	r8, #0
   19bc8:	mov	r1, #0
   19bcc:	mvncc	lr, #0
   19bd0:	movwcc	r8, #1
   19bd4:	cmp	r0, r7
   19bd8:	mov	r7, #0
   19bdc:	movwcc	r7, #1
   19be0:	cmp	r0, r3
   19be4:	mov	r3, #0
   19be8:	movwcc	r3, #1
   19bec:	cmp	r0, r2
   19bf0:	mov	r2, #0
   19bf4:	movwcc	r2, #1
   19bf8:	cmp	r0, ip
   19bfc:	movwcc	r1, #1
   19c00:	cmp	r0, r4
   19c04:	mov	r4, lr
   19c08:	ldr	lr, [sp, #8]
   19c0c:	movwcc	r9, #1
   19c10:	orr	r0, r9, r1
   19c14:	orr	r0, r0, r2
   19c18:	orr	r0, r0, r3
   19c1c:	orr	r0, r0, r7
   19c20:	orr	r0, r0, r8
   19c24:	b	19cc0 <__assert_fail@plt+0x87a0>
   19c28:	mvn	r0, #0
   19c2c:	mul	r1, r4, r8
   19c30:	udiv	r0, r0, r8
   19c34:	cmp	r0, r4
   19c38:	mvncc	r1, #0
   19c3c:	cmp	r0, r1
   19c40:	mul	r2, r1, r8
   19c44:	mvncc	r2, #0
   19c48:	cmp	r0, r2
   19c4c:	mul	r3, r2, r8
   19c50:	mvncc	r3, #0
   19c54:	cmp	r0, r3
   19c58:	mul	r7, r3, r8
   19c5c:	mvncc	r7, #0
   19c60:	cmp	r0, r7
   19c64:	mul	ip, r7, r8
   19c68:	mov	r8, lr
   19c6c:	mov	lr, #0
   19c70:	mov	r7, #0
   19c74:	mvncc	ip, #0
   19c78:	movwcc	lr, #1
   19c7c:	cmp	r0, r3
   19c80:	mov	r3, #0
   19c84:	movwcc	r3, #1
   19c88:	cmp	r0, r2
   19c8c:	mov	r2, #0
   19c90:	movwcc	r2, #1
   19c94:	cmp	r0, r1
   19c98:	mov	r1, #0
   19c9c:	movwcc	r1, #1
   19ca0:	cmp	r0, r4
   19ca4:	movwcc	r7, #1
   19ca8:	orr	r0, r7, r1
   19cac:	orr	r0, r0, r2
   19cb0:	orr	r0, r0, r3
   19cb4:	orr	r0, r0, lr
   19cb8:	mov	lr, r8
   19cbc:	mov	r4, ip
   19cc0:	add	r1, r5, lr
   19cc4:	orr	sl, r0, sl
   19cc8:	str	r1, [r6]
   19ccc:	ldrb	r1, [r5, lr]
   19cd0:	cmp	r1, #0
   19cd4:	orrne	sl, sl, #2
   19cd8:	ldr	r0, [sp, #12]
   19cdc:	str	r4, [r0]
   19ce0:	mov	r0, sl
   19ce4:	sub	sp, fp, #28
   19ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cec:	mvn	r0, #0
   19cf0:	str	lr, [sp, #8]
   19cf4:	mul	lr, r4, r8
   19cf8:	udiv	r0, r0, r8
   19cfc:	cmp	r0, r4
   19d00:	mvncc	lr, #0
   19d04:	cmp	r0, lr
   19d08:	mul	r9, lr, r8
   19d0c:	mvncc	r9, #0
   19d10:	cmp	r0, r9
   19d14:	mul	r7, r9, r8
   19d18:	mvncc	r7, #0
   19d1c:	cmp	r0, r7
   19d20:	mul	r3, r7, r8
   19d24:	mvncc	r3, #0
   19d28:	cmp	r0, r3
   19d2c:	mul	r1, r3, r8
   19d30:	mvncc	r1, #0
   19d34:	cmp	r0, r1
   19d38:	mul	r2, r1, r8
   19d3c:	mvncc	r2, #0
   19d40:	cmp	r0, r2
   19d44:	mul	ip, r2, r8
   19d48:	mvncc	ip, #0
   19d4c:	cmp	r0, ip
   19d50:	mul	r8, ip, r8
   19d54:	mov	ip, #0
   19d58:	mvncc	r8, #0
   19d5c:	str	r8, [sp, #4]
   19d60:	mov	r8, #0
   19d64:	movwcc	r8, #1
   19d68:	cmp	r0, r2
   19d6c:	mov	r2, #0
   19d70:	movwcc	r2, #1
   19d74:	cmp	r0, r1
   19d78:	mov	r1, #0
   19d7c:	movwcc	r1, #1
   19d80:	cmp	r0, r3
   19d84:	mov	r3, #0
   19d88:	movwcc	r3, #1
   19d8c:	cmp	r0, r7
   19d90:	mov	r7, #0
   19d94:	movwcc	r7, #1
   19d98:	cmp	r0, r9
   19d9c:	mov	r9, #0
   19da0:	movwcc	r9, #1
   19da4:	cmp	r0, lr
   19da8:	mov	lr, #0
   19dac:	movwcc	lr, #1
   19db0:	cmp	r0, r4
   19db4:	ldr	r4, [sp, #4]
   19db8:	movwcc	ip, #1
   19dbc:	orr	r0, ip, lr
   19dc0:	ldr	lr, [sp, #8]
   19dc4:	orr	r0, r0, r9
   19dc8:	orr	r0, r0, r7
   19dcc:	orr	r0, r0, r3
   19dd0:	orr	r0, r0, r1
   19dd4:	orr	r0, r0, r2
   19dd8:	orr	r0, r0, r8
   19ddc:	and	r0, r0, #1
   19de0:	b	19cc0 <__assert_fail@plt+0x87a0>
   19de4:	movw	r0, #65535	; 0xffff
   19de8:	movt	r0, #63	; 0x3f
   19dec:	orr	r1, r0, #4194304	; 0x400000
   19df0:	mov	r0, #0
   19df4:	cmp	r4, r1
   19df8:	lsl	r4, r4, #9
   19dfc:	movwhi	r0, #1
   19e00:	mvnhi	r4, #0
   19e04:	b	19cc0 <__assert_fail@plt+0x87a0>
   19e08:	cmp	r4, #0
   19e0c:	lsl	r1, r4, #1
   19e10:	lsr	r0, r4, #31
   19e14:	mvnmi	r1, #0
   19e18:	mov	r4, r1
   19e1c:	b	19cc0 <__assert_fail@plt+0x87a0>
   19e20:	movw	r0, #48730	; 0xbe5a
   19e24:	movw	r1, #48768	; 0xbe80
   19e28:	movw	r3, #48784	; 0xbe90
   19e2c:	mov	r2, #85	; 0x55
   19e30:	movt	r0, #1
   19e34:	movt	r1, #1
   19e38:	movt	r3, #1
   19e3c:	bl	11520 <__assert_fail@plt>
   19e40:	clz	r2, r1
   19e44:	clz	r3, r0
   19e48:	lsr	r2, r2, #5
   19e4c:	lsr	r3, r3, #5
   19e50:	orrs	r2, r3, r2
   19e54:	movwne	r1, #1
   19e58:	movwne	r0, #1
   19e5c:	cmp	r1, #0
   19e60:	beq	19e90 <__assert_fail@plt+0x8970>
   19e64:	mvn	r2, #-2147483648	; 0x80000000
   19e68:	udiv	r2, r2, r1
   19e6c:	cmp	r2, r0
   19e70:	bcs	19e90 <__assert_fail@plt+0x8970>
   19e74:	push	{fp, lr}
   19e78:	mov	fp, sp
   19e7c:	bl	113d0 <__errno_location@plt>
   19e80:	mov	r1, #12
   19e84:	str	r1, [r0]
   19e88:	mov	r0, #0
   19e8c:	pop	{fp, pc}
   19e90:	b	111f0 <calloc@plt>
   19e94:	cmp	r0, #0
   19e98:	movweq	r0, #1
   19e9c:	cmn	r0, #1
   19ea0:	ble	19ea8 <__assert_fail@plt+0x8988>
   19ea4:	b	11334 <malloc@plt>
   19ea8:	push	{fp, lr}
   19eac:	mov	fp, sp
   19eb0:	bl	113d0 <__errno_location@plt>
   19eb4:	mov	r1, #12
   19eb8:	str	r1, [r0]
   19ebc:	mov	r0, #0
   19ec0:	pop	{fp, pc}
   19ec4:	push	{fp, lr}
   19ec8:	mov	fp, sp
   19ecc:	cmp	r0, #0
   19ed0:	beq	19eec <__assert_fail@plt+0x89cc>
   19ed4:	cmp	r1, #0
   19ed8:	beq	19ef8 <__assert_fail@plt+0x89d8>
   19edc:	cmn	r1, #1
   19ee0:	ble	19f04 <__assert_fail@plt+0x89e4>
   19ee4:	pop	{fp, lr}
   19ee8:	b	112a4 <realloc@plt>
   19eec:	mov	r0, r1
   19ef0:	pop	{fp, lr}
   19ef4:	b	19e94 <__assert_fail@plt+0x8974>
   19ef8:	bl	12ea4 <__assert_fail@plt+0x1984>
   19efc:	mov	r0, #0
   19f00:	pop	{fp, pc}
   19f04:	bl	113d0 <__errno_location@plt>
   19f08:	mov	r1, #12
   19f0c:	str	r1, [r0]
   19f10:	mov	r0, #0
   19f14:	pop	{fp, pc}
   19f18:	push	{r4, r5, r6, sl, fp, lr}
   19f1c:	add	fp, sp, #16
   19f20:	mov	r4, r0
   19f24:	bl	11304 <__fpending@plt>
   19f28:	ldr	r6, [r4]
   19f2c:	mov	r5, r0
   19f30:	mov	r0, r4
   19f34:	bl	1a08c <__assert_fail@plt+0x8b6c>
   19f38:	tst	r6, #32
   19f3c:	bne	19f74 <__assert_fail@plt+0x8a54>
   19f40:	cmp	r0, #0
   19f44:	mov	r4, r0
   19f48:	mvnne	r4, #0
   19f4c:	cmp	r5, #0
   19f50:	bne	19f80 <__assert_fail@plt+0x8a60>
   19f54:	cmp	r0, #0
   19f58:	beq	19f80 <__assert_fail@plt+0x8a60>
   19f5c:	bl	113d0 <__errno_location@plt>
   19f60:	ldr	r0, [r0]
   19f64:	subs	r4, r0, #9
   19f68:	mvnne	r4, #0
   19f6c:	mov	r0, r4
   19f70:	pop	{r4, r5, r6, sl, fp, pc}
   19f74:	mvn	r4, #0
   19f78:	cmp	r0, #0
   19f7c:	beq	19f88 <__assert_fail@plt+0x8a68>
   19f80:	mov	r0, r4
   19f84:	pop	{r4, r5, r6, sl, fp, pc}
   19f88:	bl	113d0 <__errno_location@plt>
   19f8c:	mov	r1, #0
   19f90:	str	r1, [r0]
   19f94:	mov	r0, r4
   19f98:	pop	{r4, r5, r6, sl, fp, pc}
   19f9c:	movw	r2, #62998	; 0xf616
   19fa0:	mov	r1, #0
   19fa4:	movt	r2, #149	; 0x95
   19fa8:	str	r1, [r0, #16]
   19fac:	str	r1, [r0, #20]
   19fb0:	str	r2, [r0, #24]
   19fb4:	bx	lr
   19fb8:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   19fbc:	add	fp, sp, #24
   19fc0:	ldr	r2, [r0, #24]
   19fc4:	movw	r3, #62998	; 0xf616
   19fc8:	movt	r3, #149	; 0x95
   19fcc:	cmp	r2, r3
   19fd0:	bne	1a06c <__assert_fail@plt+0x8b4c>
   19fd4:	add	r3, r0, #16
   19fd8:	add	ip, r0, #8
   19fdc:	ldrd	r4, [r3]
   19fe0:	orrs	r2, r4, r5
   19fe4:	beq	1a020 <__assert_fail@plt+0x8b00>
   19fe8:	ldr	r6, [r1, #96]	; 0x60
   19fec:	ldr	r9, [r1, #100]	; 0x64
   19ff0:	ldm	r0, {r2, r7}
   19ff4:	eor	r7, r9, r7
   19ff8:	eor	r2, r6, r2
   19ffc:	orrs	r2, r2, r7
   1a000:	bne	1a020 <__assert_fail@plt+0x8b00>
   1a004:	ldm	ip, {r2, r7}
   1a008:	ldm	r1, {r6, r9}
   1a00c:	eor	r7, r9, r7
   1a010:	eor	r2, r6, r2
   1a014:	orrs	r2, r2, r7
   1a018:	mov	r2, #1
   1a01c:	beq	1a058 <__assert_fail@plt+0x8b38>
   1a020:	adds	r6, r4, #1
   1a024:	adc	r7, r5, #0
   1a028:	and	r2, r6, r4
   1a02c:	strd	r6, [r3]
   1a030:	and	r3, r7, r5
   1a034:	orrs	r2, r2, r3
   1a038:	mov	r2, #0
   1a03c:	bne	1a058 <__assert_fail@plt+0x8b38>
   1a040:	orrs	r3, r6, r7
   1a044:	beq	1a060 <__assert_fail@plt+0x8b40>
   1a048:	ldrd	r4, [r1]
   1a04c:	strd	r4, [ip]
   1a050:	ldrd	r4, [r1, #96]	; 0x60
   1a054:	strd	r4, [r0]
   1a058:	mov	r0, r2
   1a05c:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a060:	mov	r2, #1
   1a064:	mov	r0, r2
   1a068:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a06c:	movw	r0, #48865	; 0xbee1
   1a070:	movw	r1, #48889	; 0xbef9
   1a074:	movw	r3, #48907	; 0xbf0b
   1a078:	mov	r2, #60	; 0x3c
   1a07c:	movt	r0, #1
   1a080:	movt	r1, #1
   1a084:	movt	r3, #1
   1a088:	bl	11520 <__assert_fail@plt>
   1a08c:	push	{r4, r5, r6, sl, fp, lr}
   1a090:	add	fp, sp, #16
   1a094:	sub	sp, sp, #8
   1a098:	mov	r4, r0
   1a09c:	bl	11400 <fileno@plt>
   1a0a0:	cmn	r0, #1
   1a0a4:	ble	1a118 <__assert_fail@plt+0x8bf8>
   1a0a8:	mov	r0, r4
   1a0ac:	bl	1134c <__freading@plt>
   1a0b0:	cmp	r0, #0
   1a0b4:	beq	1a0e0 <__assert_fail@plt+0x8bc0>
   1a0b8:	mov	r0, r4
   1a0bc:	bl	11400 <fileno@plt>
   1a0c0:	mov	r1, #1
   1a0c4:	mov	r2, #0
   1a0c8:	mov	r3, #0
   1a0cc:	str	r1, [sp]
   1a0d0:	bl	112ec <lseek64@plt>
   1a0d4:	and	r0, r0, r1
   1a0d8:	cmn	r0, #1
   1a0dc:	beq	1a118 <__assert_fail@plt+0x8bf8>
   1a0e0:	mov	r0, r4
   1a0e4:	bl	1a344 <__assert_fail@plt+0x8e24>
   1a0e8:	cmp	r0, #0
   1a0ec:	beq	1a118 <__assert_fail@plt+0x8bf8>
   1a0f0:	bl	113d0 <__errno_location@plt>
   1a0f4:	ldr	r6, [r0]
   1a0f8:	mov	r5, r0
   1a0fc:	mov	r0, r4
   1a100:	bl	11418 <fclose@plt>
   1a104:	cmp	r6, #0
   1a108:	strne	r6, [r5]
   1a10c:	mvnne	r0, #0
   1a110:	sub	sp, fp, #16
   1a114:	pop	{r4, r5, r6, sl, fp, pc}
   1a118:	mov	r0, r4
   1a11c:	sub	sp, fp, #16
   1a120:	pop	{r4, r5, r6, sl, fp, lr}
   1a124:	b	11418 <fclose@plt>
   1a128:	sub	sp, sp, #8
   1a12c:	push	{r4, r5, r6, r7, fp, lr}
   1a130:	add	fp, sp, #16
   1a134:	sub	sp, sp, #8
   1a138:	mov	r5, r0
   1a13c:	add	r0, fp, #8
   1a140:	cmp	r1, #11
   1a144:	str	r2, [fp, #8]
   1a148:	str	r3, [fp, #12]
   1a14c:	str	r0, [sp, #4]
   1a150:	bhi	1a18c <__assert_fail@plt+0x8c6c>
   1a154:	mov	r0, #1
   1a158:	movw	r2, #1300	; 0x514
   1a15c:	tst	r2, r0, lsl r1
   1a160:	bne	1a24c <__assert_fail@plt+0x8d2c>
   1a164:	movw	r2, #2570	; 0xa0a
   1a168:	tst	r2, r0, lsl r1
   1a16c:	bne	1a1b4 <__assert_fail@plt+0x8c94>
   1a170:	cmp	r1, #0
   1a174:	bne	1a18c <__assert_fail@plt+0x8c6c>
   1a178:	ldr	r0, [sp, #4]
   1a17c:	add	r1, r0, #4
   1a180:	str	r1, [sp, #4]
   1a184:	mov	r1, #0
   1a188:	b	1a258 <__assert_fail@plt+0x8d38>
   1a18c:	sub	r0, r1, #1024	; 0x400
   1a190:	cmp	r0, #10
   1a194:	bhi	1a24c <__assert_fail@plt+0x8d2c>
   1a198:	mov	r2, #1
   1a19c:	movw	r3, #645	; 0x285
   1a1a0:	tst	r3, r2, lsl r0
   1a1a4:	bne	1a24c <__assert_fail@plt+0x8d2c>
   1a1a8:	movw	r3, #1282	; 0x502
   1a1ac:	tst	r3, r2, lsl r0
   1a1b0:	beq	1a1c0 <__assert_fail@plt+0x8ca0>
   1a1b4:	mov	r0, r5
   1a1b8:	bl	11430 <fcntl64@plt>
   1a1bc:	b	1a264 <__assert_fail@plt+0x8d44>
   1a1c0:	cmp	r0, #6
   1a1c4:	bne	1a24c <__assert_fail@plt+0x8d2c>
   1a1c8:	ldr	r0, [sp, #4]
   1a1cc:	movw	r7, #54000	; 0xd2f0
   1a1d0:	movt	r7, #2
   1a1d4:	add	r1, r0, #4
   1a1d8:	str	r1, [sp, #4]
   1a1dc:	ldr	r6, [r0]
   1a1e0:	ldr	r0, [r7]
   1a1e4:	cmp	r0, #0
   1a1e8:	bmi	1a288 <__assert_fail@plt+0x8d68>
   1a1ec:	mov	r0, r5
   1a1f0:	movw	r1, #1030	; 0x406
   1a1f4:	mov	r2, r6
   1a1f8:	bl	11430 <fcntl64@plt>
   1a1fc:	mov	r4, r0
   1a200:	cmn	r0, #1
   1a204:	bgt	1a27c <__assert_fail@plt+0x8d5c>
   1a208:	bl	113d0 <__errno_location@plt>
   1a20c:	ldr	r0, [r0]
   1a210:	cmp	r0, #22
   1a214:	bne	1a27c <__assert_fail@plt+0x8d5c>
   1a218:	mov	r0, r5
   1a21c:	mov	r1, #0
   1a220:	mov	r2, r6
   1a224:	bl	11430 <fcntl64@plt>
   1a228:	mov	r4, r0
   1a22c:	cmp	r0, #0
   1a230:	bmi	1a268 <__assert_fail@plt+0x8d48>
   1a234:	mvn	r0, #0
   1a238:	str	r0, [r7]
   1a23c:	mov	r0, #1
   1a240:	cmp	r0, #0
   1a244:	bne	1a2b4 <__assert_fail@plt+0x8d94>
   1a248:	b	1a268 <__assert_fail@plt+0x8d48>
   1a24c:	ldr	r0, [sp, #4]
   1a250:	add	r2, r0, #4
   1a254:	str	r2, [sp, #4]
   1a258:	ldr	r2, [r0]
   1a25c:	mov	r0, r5
   1a260:	bl	11430 <fcntl64@plt>
   1a264:	mov	r4, r0
   1a268:	mov	r0, r4
   1a26c:	sub	sp, fp, #16
   1a270:	pop	{r4, r5, r6, r7, fp, lr}
   1a274:	add	sp, sp, #8
   1a278:	bx	lr
   1a27c:	mov	r0, #1
   1a280:	str	r0, [r7]
   1a284:	b	1a268 <__assert_fail@plt+0x8d48>
   1a288:	mov	r0, r5
   1a28c:	mov	r1, #0
   1a290:	mov	r2, r6
   1a294:	bl	11430 <fcntl64@plt>
   1a298:	mov	r4, r0
   1a29c:	ldr	r0, [r7]
   1a2a0:	add	r0, r0, #1
   1a2a4:	clz	r0, r0
   1a2a8:	lsr	r0, r0, #5
   1a2ac:	cmp	r0, #0
   1a2b0:	beq	1a268 <__assert_fail@plt+0x8d48>
   1a2b4:	cmp	r4, #0
   1a2b8:	bmi	1a268 <__assert_fail@plt+0x8d48>
   1a2bc:	mov	r0, r4
   1a2c0:	mov	r1, #1
   1a2c4:	bl	11430 <fcntl64@plt>
   1a2c8:	cmp	r0, #0
   1a2cc:	bmi	1a2e8 <__assert_fail@plt+0x8dc8>
   1a2d0:	orr	r2, r0, #1
   1a2d4:	mov	r0, r4
   1a2d8:	mov	r1, #2
   1a2dc:	bl	11430 <fcntl64@plt>
   1a2e0:	cmn	r0, #1
   1a2e4:	bne	1a268 <__assert_fail@plt+0x8d48>
   1a2e8:	bl	113d0 <__errno_location@plt>
   1a2ec:	ldr	r6, [r0]
   1a2f0:	mov	r5, r0
   1a2f4:	mov	r0, r4
   1a2f8:	bl	114e4 <close@plt>
   1a2fc:	str	r6, [r5]
   1a300:	mvn	r4, #0
   1a304:	b	1a268 <__assert_fail@plt+0x8d48>
   1a308:	sub	sp, sp, #8
   1a30c:	push	{fp, lr}
   1a310:	mov	fp, sp
   1a314:	sub	sp, sp, #8
   1a318:	str	r2, [fp, #8]
   1a31c:	str	r3, [fp, #12]
   1a320:	tst	r1, #64	; 0x40
   1a324:	mov	r2, #0
   1a328:	ldrne	r2, [fp, #8]
   1a32c:	bl	11328 <open64@plt>
   1a330:	bl	1856c <__assert_fail@plt+0x704c>
   1a334:	mov	sp, fp
   1a338:	pop	{fp, lr}
   1a33c:	add	sp, sp, #8
   1a340:	bx	lr
   1a344:	push	{r4, sl, fp, lr}
   1a348:	add	fp, sp, #8
   1a34c:	sub	sp, sp, #8
   1a350:	mov	r4, r0
   1a354:	cmp	r0, #0
   1a358:	beq	1a390 <__assert_fail@plt+0x8e70>
   1a35c:	mov	r0, r4
   1a360:	bl	1134c <__freading@plt>
   1a364:	cmp	r0, #0
   1a368:	beq	1a390 <__assert_fail@plt+0x8e70>
   1a36c:	ldrb	r0, [r4, #1]
   1a370:	tst	r0, #1
   1a374:	beq	1a390 <__assert_fail@plt+0x8e70>
   1a378:	mov	r0, #1
   1a37c:	mov	r2, #0
   1a380:	mov	r3, #0
   1a384:	str	r0, [sp]
   1a388:	mov	r0, r4
   1a38c:	bl	1a3a0 <__assert_fail@plt+0x8e80>
   1a390:	mov	r0, r4
   1a394:	sub	sp, fp, #8
   1a398:	pop	{r4, sl, fp, lr}
   1a39c:	b	11244 <fflush@plt>
   1a3a0:	push	{r4, r5, r6, r7, fp, lr}
   1a3a4:	add	fp, sp, #16
   1a3a8:	sub	sp, sp, #8
   1a3ac:	mov	r4, r0
   1a3b0:	ldr	r0, [r0, #4]
   1a3b4:	mov	r5, r3
   1a3b8:	mov	r6, r2
   1a3bc:	ldr	r1, [r4, #8]
   1a3c0:	cmp	r1, r0
   1a3c4:	bne	1a3e0 <__assert_fail@plt+0x8ec0>
   1a3c8:	ldrd	r0, [r4, #16]
   1a3cc:	cmp	r1, r0
   1a3d0:	bne	1a3e0 <__assert_fail@plt+0x8ec0>
   1a3d4:	ldr	r0, [r4, #36]	; 0x24
   1a3d8:	cmp	r0, #0
   1a3dc:	beq	1a3f8 <__assert_fail@plt+0x8ed8>
   1a3e0:	mov	r0, r4
   1a3e4:	mov	r2, r6
   1a3e8:	mov	r3, r5
   1a3ec:	sub	sp, fp, #16
   1a3f0:	pop	{r4, r5, r6, r7, fp, lr}
   1a3f4:	b	11424 <fseeko64@plt>
   1a3f8:	ldr	r7, [fp, #8]
   1a3fc:	mov	r0, r4
   1a400:	bl	11400 <fileno@plt>
   1a404:	mov	r2, r6
   1a408:	mov	r3, r5
   1a40c:	str	r7, [sp]
   1a410:	bl	112ec <lseek64@plt>
   1a414:	and	r2, r0, r1
   1a418:	cmn	r2, #1
   1a41c:	beq	1a43c <__assert_fail@plt+0x8f1c>
   1a420:	strd	r0, [r4, #80]	; 0x50
   1a424:	ldr	r0, [r4]
   1a428:	bic	r0, r0, #16
   1a42c:	str	r0, [r4]
   1a430:	mov	r0, #0
   1a434:	sub	sp, fp, #16
   1a438:	pop	{r4, r5, r6, r7, fp, pc}
   1a43c:	mvn	r0, #0
   1a440:	sub	sp, fp, #16
   1a444:	pop	{r4, r5, r6, r7, fp, pc}
   1a448:	push	{fp, lr}
   1a44c:	mov	fp, sp
   1a450:	mov	r0, #14
   1a454:	bl	11460 <nl_langinfo@plt>
   1a458:	movw	r1, #45016	; 0xafd8
   1a45c:	cmp	r0, #0
   1a460:	movt	r1, #1
   1a464:	movne	r1, r0
   1a468:	movw	r0, #48974	; 0xbf4e
   1a46c:	ldrb	r2, [r1]
   1a470:	movt	r0, #1
   1a474:	cmp	r2, #0
   1a478:	movne	r0, r1
   1a47c:	pop	{fp, pc}
   1a480:	push	{r4, r5, r6, r7, fp, lr}
   1a484:	add	fp, sp, #16
   1a488:	sub	sp, sp, #8
   1a48c:	cmp	r0, #0
   1a490:	add	r5, sp, #4
   1a494:	mov	r7, r2
   1a498:	mov	r4, r1
   1a49c:	movne	r5, r0
   1a4a0:	mov	r0, r5
   1a4a4:	bl	11310 <mbrtowc@plt>
   1a4a8:	mov	r6, r0
   1a4ac:	cmp	r7, #0
   1a4b0:	beq	1a4d8 <__assert_fail@plt+0x8fb8>
   1a4b4:	cmn	r6, #2
   1a4b8:	bcc	1a4d8 <__assert_fail@plt+0x8fb8>
   1a4bc:	mov	r0, #0
   1a4c0:	bl	1a52c <__assert_fail@plt+0x900c>
   1a4c4:	cmp	r0, #0
   1a4c8:	bne	1a4d8 <__assert_fail@plt+0x8fb8>
   1a4cc:	ldrb	r0, [r4]
   1a4d0:	mov	r6, #1
   1a4d4:	str	r0, [r5]
   1a4d8:	mov	r0, r6
   1a4dc:	sub	sp, fp, #16
   1a4e0:	pop	{r4, r5, r6, r7, fp, pc}
   1a4e4:	cmp	r2, #0
   1a4e8:	beq	1a518 <__assert_fail@plt+0x8ff8>
   1a4ec:	mvn	r3, #0
   1a4f0:	udiv	r3, r3, r2
   1a4f4:	cmp	r3, r1
   1a4f8:	bcs	1a518 <__assert_fail@plt+0x8ff8>
   1a4fc:	push	{fp, lr}
   1a500:	mov	fp, sp
   1a504:	bl	113d0 <__errno_location@plt>
   1a508:	mov	r1, #12
   1a50c:	str	r1, [r0]
   1a510:	mov	r0, #0
   1a514:	pop	{fp, pc}
   1a518:	mul	r1, r2, r1
   1a51c:	b	19ec4 <__assert_fail@plt+0x89a4>
   1a520:	mov	r1, #0
   1a524:	mov	r2, #3
   1a528:	b	1a128 <__assert_fail@plt+0x8c08>
   1a52c:	push	{r4, sl, fp, lr}
   1a530:	add	fp, sp, #8
   1a534:	sub	sp, sp, #264	; 0x108
   1a538:	add	r1, sp, #7
   1a53c:	movw	r2, #257	; 0x101
   1a540:	bl	1a598 <__assert_fail@plt+0x9078>
   1a544:	mov	r4, #0
   1a548:	cmp	r0, #0
   1a54c:	bne	1a58c <__assert_fail@plt+0x906c>
   1a550:	movw	r1, #48980	; 0xbf54
   1a554:	add	r0, sp, #7
   1a558:	mov	r2, #2
   1a55c:	movt	r1, #1
   1a560:	bl	11388 <bcmp@plt>
   1a564:	cmp	r0, #0
   1a568:	beq	1a58c <__assert_fail@plt+0x906c>
   1a56c:	movw	r1, #48982	; 0xbf56
   1a570:	add	r0, sp, #7
   1a574:	mov	r2, #6
   1a578:	movt	r1, #1
   1a57c:	bl	11388 <bcmp@plt>
   1a580:	cmp	r0, #0
   1a584:	mov	r4, r0
   1a588:	movwne	r4, #1
   1a58c:	mov	r0, r4
   1a590:	sub	sp, fp, #8
   1a594:	pop	{r4, sl, fp, pc}
   1a598:	push	{r4, r5, r6, r7, fp, lr}
   1a59c:	add	fp, sp, #16
   1a5a0:	mov	r4, r1
   1a5a4:	mov	r1, #0
   1a5a8:	mov	r6, r2
   1a5ac:	bl	1143c <setlocale@plt>
   1a5b0:	cmp	r0, #0
   1a5b4:	beq	1a5e4 <__assert_fail@plt+0x90c4>
   1a5b8:	mov	r7, r0
   1a5bc:	bl	113a0 <strlen@plt>
   1a5c0:	cmp	r0, r6
   1a5c4:	bcs	1a600 <__assert_fail@plt+0x90e0>
   1a5c8:	add	r2, r0, #1
   1a5cc:	mov	r0, r4
   1a5d0:	mov	r1, r7
   1a5d4:	bl	11274 <memcpy@plt>
   1a5d8:	mov	r5, #0
   1a5dc:	mov	r0, r5
   1a5e0:	pop	{r4, r5, r6, r7, fp, pc}
   1a5e4:	mov	r5, #22
   1a5e8:	cmp	r6, #0
   1a5ec:	beq	1a628 <__assert_fail@plt+0x9108>
   1a5f0:	mov	r0, #0
   1a5f4:	strb	r0, [r4]
   1a5f8:	mov	r0, r5
   1a5fc:	pop	{r4, r5, r6, r7, fp, pc}
   1a600:	mov	r5, #34	; 0x22
   1a604:	cmp	r6, #0
   1a608:	beq	1a628 <__assert_fail@plt+0x9108>
   1a60c:	sub	r6, r6, #1
   1a610:	mov	r0, r4
   1a614:	mov	r1, r7
   1a618:	mov	r2, r6
   1a61c:	bl	11274 <memcpy@plt>
   1a620:	mov	r0, #0
   1a624:	strb	r0, [r4, r6]
   1a628:	mov	r0, r5
   1a62c:	pop	{r4, r5, r6, r7, fp, pc}
   1a630:	mov	r1, #0
   1a634:	b	1143c <setlocale@plt>
   1a638:	cmp	r3, #0
   1a63c:	cmpeq	r2, #0
   1a640:	bne	1a658 <__assert_fail@plt+0x9138>
   1a644:	cmp	r1, #0
   1a648:	cmpeq	r0, #0
   1a64c:	mvnne	r1, #0
   1a650:	mvnne	r0, #0
   1a654:	b	1a674 <__assert_fail@plt+0x9154>
   1a658:	sub	sp, sp, #8
   1a65c:	push	{sp, lr}
   1a660:	bl	1a684 <__assert_fail@plt+0x9164>
   1a664:	ldr	lr, [sp, #4]
   1a668:	add	sp, sp, #8
   1a66c:	pop	{r2, r3}
   1a670:	bx	lr
   1a674:	push	{r1, lr}
   1a678:	mov	r0, #8
   1a67c:	bl	11214 <raise@plt>
   1a680:	pop	{r1, pc}
   1a684:	cmp	r1, r3
   1a688:	cmpeq	r0, r2
   1a68c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a690:	mov	r4, r0
   1a694:	movcc	r0, #0
   1a698:	mov	r5, r1
   1a69c:	ldr	lr, [sp, #36]	; 0x24
   1a6a0:	movcc	r1, r0
   1a6a4:	bcc	1a7a0 <__assert_fail@plt+0x9280>
   1a6a8:	cmp	r3, #0
   1a6ac:	clzeq	ip, r2
   1a6b0:	clzne	ip, r3
   1a6b4:	addeq	ip, ip, #32
   1a6b8:	cmp	r5, #0
   1a6bc:	clzeq	r1, r4
   1a6c0:	addeq	r1, r1, #32
   1a6c4:	clzne	r1, r5
   1a6c8:	sub	ip, ip, r1
   1a6cc:	sub	sl, ip, #32
   1a6d0:	lsl	r9, r3, ip
   1a6d4:	rsb	fp, ip, #32
   1a6d8:	orr	r9, r9, r2, lsl sl
   1a6dc:	orr	r9, r9, r2, lsr fp
   1a6e0:	lsl	r8, r2, ip
   1a6e4:	cmp	r5, r9
   1a6e8:	cmpeq	r4, r8
   1a6ec:	movcc	r0, #0
   1a6f0:	movcc	r1, r0
   1a6f4:	bcc	1a710 <__assert_fail@plt+0x91f0>
   1a6f8:	mov	r0, #1
   1a6fc:	subs	r4, r4, r8
   1a700:	lsl	r1, r0, sl
   1a704:	orr	r1, r1, r0, lsr fp
   1a708:	lsl	r0, r0, ip
   1a70c:	sbc	r5, r5, r9
   1a710:	cmp	ip, #0
   1a714:	beq	1a7a0 <__assert_fail@plt+0x9280>
   1a718:	lsr	r6, r8, #1
   1a71c:	orr	r6, r6, r9, lsl #31
   1a720:	lsr	r7, r9, #1
   1a724:	mov	r2, ip
   1a728:	b	1a74c <__assert_fail@plt+0x922c>
   1a72c:	subs	r3, r4, r6
   1a730:	sbc	r8, r5, r7
   1a734:	adds	r3, r3, r3
   1a738:	adc	r8, r8, r8
   1a73c:	adds	r4, r3, #1
   1a740:	adc	r5, r8, #0
   1a744:	subs	r2, r2, #1
   1a748:	beq	1a768 <__assert_fail@plt+0x9248>
   1a74c:	cmp	r5, r7
   1a750:	cmpeq	r4, r6
   1a754:	bcs	1a72c <__assert_fail@plt+0x920c>
   1a758:	adds	r4, r4, r4
   1a75c:	adc	r5, r5, r5
   1a760:	subs	r2, r2, #1
   1a764:	bne	1a74c <__assert_fail@plt+0x922c>
   1a768:	lsr	r3, r4, ip
   1a76c:	orr	r3, r3, r5, lsl fp
   1a770:	lsr	r2, r5, ip
   1a774:	orr	r3, r3, r5, lsr sl
   1a778:	adds	r0, r0, r4
   1a77c:	mov	r4, r3
   1a780:	lsl	r3, r2, ip
   1a784:	orr	r3, r3, r4, lsl sl
   1a788:	lsl	ip, r4, ip
   1a78c:	orr	r3, r3, r4, lsr fp
   1a790:	adc	r1, r1, r5
   1a794:	subs	r0, r0, ip
   1a798:	mov	r5, r2
   1a79c:	sbc	r1, r1, r3
   1a7a0:	cmp	lr, #0
   1a7a4:	strdne	r4, [lr]
   1a7a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a7b0:	mov	r7, r0
   1a7b4:	ldr	r6, [pc, #72]	; 1a804 <__assert_fail@plt+0x92e4>
   1a7b8:	ldr	r5, [pc, #72]	; 1a808 <__assert_fail@plt+0x92e8>
   1a7bc:	add	r6, pc, r6
   1a7c0:	add	r5, pc, r5
   1a7c4:	sub	r6, r6, r5
   1a7c8:	mov	r8, r1
   1a7cc:	mov	r9, r2
   1a7d0:	bl	111c4 <fstatfs64@plt-0x20>
   1a7d4:	asrs	r6, r6, #2
   1a7d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7dc:	mov	r4, #0
   1a7e0:	add	r4, r4, #1
   1a7e4:	ldr	r3, [r5], #4
   1a7e8:	mov	r2, r9
   1a7ec:	mov	r1, r8
   1a7f0:	mov	r0, r7
   1a7f4:	blx	r3
   1a7f8:	cmp	r6, r4
   1a7fc:	bne	1a7e0 <__assert_fail@plt+0x92c0>
   1a800:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a804:	andeq	r2, r1, r8, asr #14
   1a808:	andeq	r2, r1, r0, asr #14
   1a80c:	bx	lr
   1a810:	ldr	r3, [pc, #12]	; 1a824 <__assert_fail@plt+0x9304>
   1a814:	mov	r1, #0
   1a818:	add	r3, pc, r3
   1a81c:	ldr	r2, [r3]
   1a820:	b	113dc <__cxa_atexit@plt>
   1a824:	andeq	r2, r1, ip, lsl #18

Disassembly of section .fini:

0001a828 <.fini>:
   1a828:	push	{r3, lr}
   1a82c:	pop	{r3, pc}
