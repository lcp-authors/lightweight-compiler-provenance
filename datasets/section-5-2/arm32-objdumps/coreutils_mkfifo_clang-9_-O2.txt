
../repos/coreutils/src/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

00011668 <.init>:
   11668:	push	{r3, lr}
   1166c:	bl	11ae4 <__assert_fail@plt+0x48>
   11670:	pop	{r3, pc}

Disassembly of section .plt:

00011674 <fstatfs64@plt-0x14>:
   11674:	push	{lr}		; (str lr, [sp, #-4]!)
   11678:	ldr	lr, [pc, #4]	; 11684 <fstatfs64@plt-0x4>
   1167c:	add	lr, pc, lr
   11680:	ldr	pc, [lr, #8]!
   11684:	andeq	sl, r1, ip, ror r9

00011688 <fstatfs64@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #106496	; 0x1a000
   11690:	ldr	pc, [ip, #2428]!	; 0x97c

00011694 <selabel_lookup@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #106496	; 0x1a000
   1169c:	ldr	pc, [ip, #2420]!	; 0x974

000116a0 <calloc@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #106496	; 0x1a000
   116a8:	ldr	pc, [ip, #2412]!	; 0x96c

000116ac <fputs_unlocked@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #106496	; 0x1a000
   116b4:	ldr	pc, [ip, #2404]!	; 0x964

000116b8 <raise@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #106496	; 0x1a000
   116c0:	ldr	pc, [ip, #2396]!	; 0x95c

000116c4 <is_selinux_enabled@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #106496	; 0x1a000
   116cc:	ldr	pc, [ip, #2388]!	; 0x954

000116d0 <strcmp@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #106496	; 0x1a000
   116d8:	ldr	pc, [ip, #2380]!	; 0x94c

000116dc <context_type_get@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #106496	; 0x1a000
   116e4:	ldr	pc, [ip, #2372]!	; 0x944

000116e8 <fflush@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #106496	; 0x1a000
   116f0:	ldr	pc, [ip, #2364]!	; 0x93c

000116f4 <lsetfilecon@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #106496	; 0x1a000
   116fc:	ldr	pc, [ip, #2356]!	; 0x934

00011700 <memmove@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #106496	; 0x1a000
   11708:	ldr	pc, [ip, #2348]!	; 0x92c

0001170c <free@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #106496	; 0x1a000
   11714:	ldr	pc, [ip, #2340]!	; 0x924

00011718 <faccessat@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #106496	; 0x1a000
   11720:	ldr	pc, [ip, #2332]!	; 0x91c

00011724 <_exit@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #106496	; 0x1a000
   1172c:	ldr	pc, [ip, #2324]!	; 0x914

00011730 <memcpy@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #106496	; 0x1a000
   11738:	ldr	pc, [ip, #2316]!	; 0x90c

0001173c <mbsinit@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #106496	; 0x1a000
   11744:	ldr	pc, [ip, #2308]!	; 0x904

00011748 <context_new@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #106496	; 0x1a000
   11750:	ldr	pc, [ip, #2300]!	; 0x8fc

00011754 <dcgettext@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #106496	; 0x1a000
   1175c:	ldr	pc, [ip, #2292]!	; 0x8f4

00011760 <context_type_set@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #106496	; 0x1a000
   11768:	ldr	pc, [ip, #2284]!	; 0x8ec

0001176c <realloc@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #106496	; 0x1a000
   11774:	ldr	pc, [ip, #2276]!	; 0x8e4

00011778 <fgetfilecon@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #106496	; 0x1a000
   11780:	ldr	pc, [ip, #2268]!	; 0x8dc

00011784 <textdomain@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #106496	; 0x1a000
   1178c:	ldr	pc, [ip, #2260]!	; 0x8d4

00011790 <rawmemchr@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #106496	; 0x1a000
   11798:	ldr	pc, [ip, #2252]!	; 0x8cc

0001179c <__fxstatat64@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #106496	; 0x1a000
   117a4:	ldr	pc, [ip, #2244]!	; 0x8c4

000117a8 <iswprint@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #106496	; 0x1a000
   117b0:	ldr	pc, [ip, #2236]!	; 0x8bc

000117b4 <__fxstat64@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #106496	; 0x1a000
   117bc:	ldr	pc, [ip, #2228]!	; 0x8b4

000117c0 <readlink@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #106496	; 0x1a000
   117c8:	ldr	pc, [ip, #2220]!	; 0x8ac

000117cc <fwrite@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #106496	; 0x1a000
   117d4:	ldr	pc, [ip, #2212]!	; 0x8a4

000117d8 <lseek64@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #106496	; 0x1a000
   117e0:	ldr	pc, [ip, #2204]!	; 0x89c

000117e4 <__ctype_get_mb_cur_max@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #106496	; 0x1a000
   117ec:	ldr	pc, [ip, #2196]!	; 0x894

000117f0 <getcon@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #106496	; 0x1a000
   117f8:	ldr	pc, [ip, #2188]!	; 0x88c

000117fc <__fpending@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #106496	; 0x1a000
   11804:	ldr	pc, [ip, #2180]!	; 0x884

00011808 <mbrtowc@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #106496	; 0x1a000
   11810:	ldr	pc, [ip, #2172]!	; 0x87c

00011814 <error@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #106496	; 0x1a000
   1181c:	ldr	pc, [ip, #2164]!	; 0x874

00011820 <open64@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #106496	; 0x1a000
   11828:	ldr	pc, [ip, #2156]!	; 0x86c

0001182c <lgetfilecon@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #106496	; 0x1a000
   11834:	ldr	pc, [ip, #2148]!	; 0x864

00011838 <malloc@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #106496	; 0x1a000
   11840:	ldr	pc, [ip, #2140]!	; 0x85c

00011844 <__libc_start_main@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #106496	; 0x1a000
   1184c:	ldr	pc, [ip, #2132]!	; 0x854

00011850 <__freading@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #106496	; 0x1a000
   11858:	ldr	pc, [ip, #2124]!	; 0x84c

0001185c <__gmon_start__@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #106496	; 0x1a000
   11864:	ldr	pc, [ip, #2116]!	; 0x844

00011868 <context_free@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #106496	; 0x1a000
   11870:	ldr	pc, [ip, #2108]!	; 0x83c

00011874 <getopt_long@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #106496	; 0x1a000
   1187c:	ldr	pc, [ip, #2100]!	; 0x834

00011880 <__ctype_b_loc@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #106496	; 0x1a000
   11888:	ldr	pc, [ip, #2092]!	; 0x82c

0001188c <getcwd@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #106496	; 0x1a000
   11894:	ldr	pc, [ip, #2084]!	; 0x824

00011898 <exit@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #106496	; 0x1a000
   118a0:	ldr	pc, [ip, #2076]!	; 0x81c

000118a4 <getfilecon@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #106496	; 0x1a000
   118ac:	ldr	pc, [ip, #2068]!	; 0x814

000118b0 <bcmp@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #106496	; 0x1a000
   118b8:	ldr	pc, [ip, #2060]!	; 0x80c

000118bc <strlen@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #106496	; 0x1a000
   118c4:	ldr	pc, [ip, #2052]!	; 0x804

000118c8 <selabel_open@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #106496	; 0x1a000
   118d0:	ldr	pc, [ip, #2044]!	; 0x7fc

000118d4 <openat64@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #106496	; 0x1a000
   118dc:	ldr	pc, [ip, #2036]!	; 0x7f4

000118e0 <setfscreatecon@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #106496	; 0x1a000
   118e8:	ldr	pc, [ip, #2028]!	; 0x7ec

000118ec <__errno_location@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #106496	; 0x1a000
   118f4:	ldr	pc, [ip, #2020]!	; 0x7e4

000118f8 <__sprintf_chk@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #106496	; 0x1a000
   11900:	ldr	pc, [ip, #2012]!	; 0x7dc

00011904 <__cxa_atexit@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #106496	; 0x1a000
   1190c:	ldr	pc, [ip, #2004]!	; 0x7d4

00011910 <memset@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #106496	; 0x1a000
   11918:	ldr	pc, [ip, #1996]!	; 0x7cc

0001191c <__printf_chk@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #106496	; 0x1a000
   11924:	ldr	pc, [ip, #1988]!	; 0x7c4

00011928 <fileno@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #106496	; 0x1a000
   11930:	ldr	pc, [ip, #1980]!	; 0x7bc

00011934 <__fprintf_chk@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #106496	; 0x1a000
   1193c:	ldr	pc, [ip, #1972]!	; 0x7b4

00011940 <fclose@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #106496	; 0x1a000
   11948:	ldr	pc, [ip, #1964]!	; 0x7ac

0001194c <fseeko64@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #106496	; 0x1a000
   11954:	ldr	pc, [ip, #1956]!	; 0x7a4

00011958 <fcntl64@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #106496	; 0x1a000
   11960:	ldr	pc, [ip, #1948]!	; 0x79c

00011964 <setlocale@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #106496	; 0x1a000
   1196c:	ldr	pc, [ip, #1940]!	; 0x794

00011970 <fsetfilecon@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #106496	; 0x1a000
   11978:	ldr	pc, [ip, #1932]!	; 0x78c

0001197c <strrchr@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #106496	; 0x1a000
   11984:	ldr	pc, [ip, #1924]!	; 0x784

00011988 <nl_langinfo@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #106496	; 0x1a000
   11990:	ldr	pc, [ip, #1916]!	; 0x77c

00011994 <readdir64@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #106496	; 0x1a000
   1199c:	ldr	pc, [ip, #1908]!	; 0x774

000119a0 <fdopendir@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #106496	; 0x1a000
   119a8:	ldr	pc, [ip, #1900]!	; 0x76c

000119ac <security_compute_create@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #106496	; 0x1a000
   119b4:	ldr	pc, [ip, #1892]!	; 0x764

000119b8 <dirfd@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #106496	; 0x1a000
   119c0:	ldr	pc, [ip, #1884]!	; 0x75c

000119c4 <fchdir@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #106496	; 0x1a000
   119cc:	ldr	pc, [ip, #1876]!	; 0x754

000119d0 <qsort@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #106496	; 0x1a000
   119d8:	ldr	pc, [ip, #1868]!	; 0x74c

000119dc <freecon@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #106496	; 0x1a000
   119e4:	ldr	pc, [ip, #1860]!	; 0x744

000119e8 <bindtextdomain@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #106496	; 0x1a000
   119f0:	ldr	pc, [ip, #1852]!	; 0x73c

000119f4 <getfscreatecon@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #106496	; 0x1a000
   119fc:	ldr	pc, [ip, #1844]!	; 0x734

00011a00 <umask@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #106496	; 0x1a000
   11a08:	ldr	pc, [ip, #1836]!	; 0x72c

00011a0c <context_str@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #106496	; 0x1a000
   11a14:	ldr	pc, [ip, #1828]!	; 0x724

00011a18 <chmod@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #106496	; 0x1a000
   11a20:	ldr	pc, [ip, #1820]!	; 0x71c

00011a24 <__xstat64@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #106496	; 0x1a000
   11a2c:	ldr	pc, [ip, #1812]!	; 0x714

00011a30 <strncmp@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #106496	; 0x1a000
   11a38:	ldr	pc, [ip, #1804]!	; 0x70c

00011a3c <abort@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #106496	; 0x1a000
   11a44:	ldr	pc, [ip, #1796]!	; 0x704

00011a48 <close@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #106496	; 0x1a000
   11a50:	ldr	pc, [ip, #1788]!	; 0x6fc

00011a54 <__lxstat64@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #106496	; 0x1a000
   11a5c:	ldr	pc, [ip, #1780]!	; 0x6f4

00011a60 <mkfifo@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #106496	; 0x1a000
   11a68:	ldr	pc, [ip, #1772]!	; 0x6ec

00011a6c <mode_to_security_class@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #106496	; 0x1a000
   11a74:	ldr	pc, [ip, #1764]!	; 0x6e4

00011a78 <closedir@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #106496	; 0x1a000
   11a80:	ldr	pc, [ip, #1756]!	; 0x6dc

00011a84 <strspn@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #106496	; 0x1a000
   11a8c:	ldr	pc, [ip, #1748]!	; 0x6d4

00011a90 <__mempcpy_chk@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #106496	; 0x1a000
   11a98:	ldr	pc, [ip, #1740]!	; 0x6cc

00011a9c <__assert_fail@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #106496	; 0x1a000
   11aa4:	ldr	pc, [ip, #1732]!	; 0x6c4

Disassembly of section .text:

00011aa8 <lchmod@@Base-0x4f58>:
   11aa8:	mov	fp, #0
   11aac:	mov	lr, #0
   11ab0:	pop	{r1}		; (ldr r1, [sp], #4)
   11ab4:	mov	r2, sp
   11ab8:	push	{r2}		; (str r2, [sp, #-4]!)
   11abc:	push	{r0}		; (str r0, [sp, #-4]!)
   11ac0:	ldr	ip, [pc, #16]	; 11ad8 <__assert_fail@plt+0x3c>
   11ac4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ac8:	ldr	r0, [pc, #12]	; 11adc <__assert_fail@plt+0x40>
   11acc:	ldr	r3, [pc, #12]	; 11ae0 <__assert_fail@plt+0x44>
   11ad0:	bl	11844 <__libc_start_main@plt>
   11ad4:	bl	11a3c <abort@plt>
   11ad8:	andeq	sl, r1, r0, ror #18
   11adc:	andeq	r1, r1, r0, lsr lr
   11ae0:	andeq	sl, r1, r0, lsl #18
   11ae4:	ldr	r3, [pc, #20]	; 11b00 <__assert_fail@plt+0x64>
   11ae8:	ldr	r2, [pc, #20]	; 11b04 <__assert_fail@plt+0x68>
   11aec:	add	r3, pc, r3
   11af0:	ldr	r2, [r3, r2]
   11af4:	cmp	r2, #0
   11af8:	bxeq	lr
   11afc:	b	1185c <__gmon_start__@plt>
   11b00:	andeq	sl, r1, ip, lsl #10
   11b04:	andeq	r0, r0, ip, ror #2
   11b08:	ldr	r0, [pc, #24]	; 11b28 <__assert_fail@plt+0x8c>
   11b0c:	ldr	r3, [pc, #24]	; 11b2c <__assert_fail@plt+0x90>
   11b10:	cmp	r3, r0
   11b14:	bxeq	lr
   11b18:	ldr	r3, [pc, #16]	; 11b30 <__assert_fail@plt+0x94>
   11b1c:	cmp	r3, #0
   11b20:	bxeq	lr
   11b24:	bx	r3
   11b28:	andeq	ip, r2, r0, asr #3
   11b2c:	andeq	ip, r2, r0, asr #3
   11b30:	andeq	r0, r0, r0
   11b34:	ldr	r0, [pc, #36]	; 11b60 <__assert_fail@plt+0xc4>
   11b38:	ldr	r1, [pc, #36]	; 11b64 <__assert_fail@plt+0xc8>
   11b3c:	sub	r1, r1, r0
   11b40:	asr	r1, r1, #2
   11b44:	add	r1, r1, r1, lsr #31
   11b48:	asrs	r1, r1, #1
   11b4c:	bxeq	lr
   11b50:	ldr	r3, [pc, #16]	; 11b68 <__assert_fail@plt+0xcc>
   11b54:	cmp	r3, #0
   11b58:	bxeq	lr
   11b5c:	bx	r3
   11b60:	andeq	ip, r2, r0, asr #3
   11b64:	andeq	ip, r2, r0, asr #3
   11b68:	andeq	r0, r0, r0
   11b6c:	push	{r4, lr}
   11b70:	ldr	r4, [pc, #24]	; 11b90 <__assert_fail@plt+0xf4>
   11b74:	ldrb	r3, [r4]
   11b78:	cmp	r3, #0
   11b7c:	popne	{r4, pc}
   11b80:	bl	11b08 <__assert_fail@plt+0x6c>
   11b84:	mov	r3, #1
   11b88:	strb	r3, [r4]
   11b8c:	pop	{r4, pc}
   11b90:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   11b94:	b	11b34 <__assert_fail@plt+0x98>
   11b98:	push	{fp, lr}
   11b9c:	mov	fp, sp
   11ba0:	sub	sp, sp, #56	; 0x38
   11ba4:	mov	r4, r0
   11ba8:	cmp	r0, #0
   11bac:	bne	11dec <__assert_fail@plt+0x350>
   11bb0:	movw	r1, #43443	; 0xa9b3
   11bb4:	mov	r0, #0
   11bb8:	mov	r2, #5
   11bbc:	movt	r1, #1
   11bc0:	bl	11754 <dcgettext@plt>
   11bc4:	mov	r1, r0
   11bc8:	movw	r0, #49640	; 0xc1e8
   11bcc:	movt	r0, #2
   11bd0:	ldr	r2, [r0]
   11bd4:	mov	r0, #1
   11bd8:	bl	1191c <__printf_chk@plt>
   11bdc:	movw	r1, #43474	; 0xa9d2
   11be0:	mov	r0, #0
   11be4:	mov	r2, #5
   11be8:	movt	r1, #1
   11bec:	bl	11754 <dcgettext@plt>
   11bf0:	movw	r7, #49620	; 0xc1d4
   11bf4:	movt	r7, #2
   11bf8:	ldr	r1, [r7]
   11bfc:	bl	116ac <fputs_unlocked@plt>
   11c00:	movw	r1, #44243	; 0xacd3
   11c04:	mov	r0, #0
   11c08:	mov	r2, #5
   11c0c:	movt	r1, #1
   11c10:	bl	11754 <dcgettext@plt>
   11c14:	ldr	r1, [r7]
   11c18:	bl	116ac <fputs_unlocked@plt>
   11c1c:	movw	r1, #43524	; 0xaa04
   11c20:	mov	r0, #0
   11c24:	mov	r2, #5
   11c28:	movt	r1, #1
   11c2c:	bl	11754 <dcgettext@plt>
   11c30:	ldr	r1, [r7]
   11c34:	bl	116ac <fputs_unlocked@plt>
   11c38:	movw	r1, #43597	; 0xaa4d
   11c3c:	mov	r0, #0
   11c40:	mov	r2, #5
   11c44:	movt	r1, #1
   11c48:	bl	11754 <dcgettext@plt>
   11c4c:	ldr	r1, [r7]
   11c50:	bl	116ac <fputs_unlocked@plt>
   11c54:	movw	r1, #43804	; 0xab1c
   11c58:	mov	r0, #0
   11c5c:	mov	r2, #5
   11c60:	movt	r1, #1
   11c64:	bl	11754 <dcgettext@plt>
   11c68:	ldr	r1, [r7]
   11c6c:	bl	116ac <fputs_unlocked@plt>
   11c70:	movw	r1, #43849	; 0xab49
   11c74:	mov	r0, #0
   11c78:	mov	r2, #5
   11c7c:	movt	r1, #1
   11c80:	bl	11754 <dcgettext@plt>
   11c84:	ldr	r1, [r7]
   11c88:	bl	116ac <fputs_unlocked@plt>
   11c8c:	movw	r0, #44728	; 0xaeb8
   11c90:	mov	r2, #48	; 0x30
   11c94:	mov	r6, sp
   11c98:	movw	r5, #43903	; 0xab7f
   11c9c:	movt	r0, #1
   11ca0:	movt	r5, #1
   11ca4:	add	r1, r0, #32
   11ca8:	add	r3, r0, #16
   11cac:	vld1.64	{d18-d19}, [r0], r2
   11cb0:	vld1.64	{d16-d17}, [r1]
   11cb4:	vld1.64	{d20-d21}, [r3]
   11cb8:	vldr	d22, [r0]
   11cbc:	add	r1, r6, #32
   11cc0:	add	r0, r6, #16
   11cc4:	vst1.64	{d16-d17}, [r1]
   11cc8:	movw	r1, #44318	; 0xad1e
   11ccc:	vst1.64	{d20-d21}, [r0]
   11cd0:	mov	r0, r6
   11cd4:	movt	r1, #1
   11cd8:	vst1.64	{d18-d19}, [r0], r2
   11cdc:	vstr	d22, [r0]
   11ce0:	mov	r0, r5
   11ce4:	bl	116d0 <strcmp@plt>
   11ce8:	cmp	r0, #0
   11cec:	ldrne	r1, [r6, #8]!
   11cf0:	cmpne	r1, #0
   11cf4:	bne	11ce0 <__assert_fail@plt+0x244>
   11cf8:	movw	r1, #44413	; 0xad7d
   11cfc:	ldr	r6, [r6, #4]
   11d00:	mov	r0, #0
   11d04:	mov	r2, #5
   11d08:	movt	r1, #1
   11d0c:	bl	11754 <dcgettext@plt>
   11d10:	movw	r2, #44039	; 0xac07
   11d14:	movw	r3, #44436	; 0xad94
   11d18:	mov	r1, r0
   11d1c:	mov	r0, #1
   11d20:	movt	r2, #1
   11d24:	movt	r3, #1
   11d28:	bl	1191c <__printf_chk@plt>
   11d2c:	cmp	r6, #0
   11d30:	mov	r0, #5
   11d34:	mov	r1, #0
   11d38:	moveq	r6, r5
   11d3c:	bl	11964 <setlocale@plt>
   11d40:	cmp	r0, #0
   11d44:	beq	11d7c <__assert_fail@plt+0x2e0>
   11d48:	movw	r1, #44476	; 0xadbc
   11d4c:	mov	r2, #3
   11d50:	movt	r1, #1
   11d54:	bl	11a30 <strncmp@plt>
   11d58:	cmp	r0, #0
   11d5c:	beq	11d7c <__assert_fail@plt+0x2e0>
   11d60:	movw	r1, #44480	; 0xadc0
   11d64:	mov	r0, #0
   11d68:	mov	r2, #5
   11d6c:	movt	r1, #1
   11d70:	bl	11754 <dcgettext@plt>
   11d74:	ldr	r1, [r7]
   11d78:	bl	116ac <fputs_unlocked@plt>
   11d7c:	movw	r1, #44551	; 0xae07
   11d80:	mov	r0, #0
   11d84:	mov	r2, #5
   11d88:	movt	r1, #1
   11d8c:	bl	11754 <dcgettext@plt>
   11d90:	movw	r2, #44436	; 0xad94
   11d94:	mov	r1, r0
   11d98:	mov	r0, #1
   11d9c:	mov	r3, r5
   11da0:	movt	r2, #1
   11da4:	bl	1191c <__printf_chk@plt>
   11da8:	movw	r1, #44578	; 0xae22
   11dac:	mov	r0, #0
   11db0:	mov	r2, #5
   11db4:	movt	r1, #1
   11db8:	bl	11754 <dcgettext@plt>
   11dbc:	mov	r1, r0
   11dc0:	movw	r0, #44346	; 0xad3a
   11dc4:	movw	r3, #44628	; 0xae54
   11dc8:	cmp	r6, r5
   11dcc:	mov	r2, r6
   11dd0:	movt	r0, #1
   11dd4:	movt	r3, #1
   11dd8:	moveq	r3, r0
   11ddc:	mov	r0, #1
   11de0:	bl	1191c <__printf_chk@plt>
   11de4:	mov	r0, r4
   11de8:	bl	11898 <exit@plt>
   11dec:	movw	r0, #49616	; 0xc1d0
   11df0:	movw	r1, #43404	; 0xa98c
   11df4:	mov	r2, #5
   11df8:	movt	r0, #2
   11dfc:	movt	r1, #1
   11e00:	ldr	r5, [r0]
   11e04:	mov	r0, #0
   11e08:	bl	11754 <dcgettext@plt>
   11e0c:	mov	r2, r0
   11e10:	movw	r0, #49640	; 0xc1e8
   11e14:	mov	r1, #1
   11e18:	movt	r0, #2
   11e1c:	ldr	r3, [r0]
   11e20:	mov	r0, r5
   11e24:	bl	11934 <__fprintf_chk@plt>
   11e28:	mov	r0, r4
   11e2c:	bl	11898 <exit@plt>
   11e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e34:	add	fp, sp, #28
   11e38:	sub	sp, sp, #20
   11e3c:	str	r0, [sp, #16]
   11e40:	ldr	r0, [r1]
   11e44:	mov	r4, r1
   11e48:	bl	17158 <lchmod@@Base+0x758>
   11e4c:	movw	r1, #44628	; 0xae54
   11e50:	mov	r0, #6
   11e54:	movt	r1, #1
   11e58:	bl	11964 <setlocale@plt>
   11e5c:	movw	r6, #44043	; 0xac0b
   11e60:	movw	r1, #43910	; 0xab86
   11e64:	movt	r6, #1
   11e68:	movt	r1, #1
   11e6c:	mov	r0, r6
   11e70:	bl	119e8 <bindtextdomain@plt>
   11e74:	mov	r0, r6
   11e78:	bl	11784 <textdomain@plt>
   11e7c:	movw	r0, #11964	; 0x2ebc
   11e80:	movt	r0, #1
   11e84:	bl	1a964 <lchmod@@Base+0x3f64>
   11e88:	movw	r5, #43934	; 0xab9e
   11e8c:	movw	r6, #44648	; 0xae68
   11e90:	movw	r9, #49624	; 0xc1d8
   11e94:	mov	r7, #0
   11e98:	mov	r8, #0
   11e9c:	mov	sl, #0
   11ea0:	mov	r0, #0
   11ea4:	movt	r5, #1
   11ea8:	movt	r6, #1
   11eac:	movt	r9, #2
   11eb0:	str	r0, [sp, #12]
   11eb4:	ldr	r0, [sp, #16]
   11eb8:	mov	r1, r4
   11ebc:	mov	r2, r5
   11ec0:	mov	r3, r6
   11ec4:	str	r7, [sp]
   11ec8:	bl	11874 <getopt_long@plt>
   11ecc:	cmp	r0, #89	; 0x59
   11ed0:	ble	11f90 <__assert_fail@plt+0x4f4>
   11ed4:	cmp	r0, #90	; 0x5a
   11ed8:	bne	11f80 <__assert_fail@plt+0x4e4>
   11edc:	bl	116c4 <is_selinux_enabled@plt>
   11ee0:	ldr	r1, [r9]
   11ee4:	cmp	r0, #1
   11ee8:	bge	11f1c <__assert_fail@plt+0x480>
   11eec:	cmp	r1, #0
   11ef0:	beq	11eb4 <__assert_fail@plt+0x418>
   11ef4:	movw	r1, #43966	; 0xabbe
   11ef8:	mov	r0, #0
   11efc:	mov	r2, #5
   11f00:	movt	r1, #1
   11f04:	bl	11754 <dcgettext@plt>
   11f08:	mov	r2, r0
   11f0c:	mov	r0, #0
   11f10:	mov	r1, #0
   11f14:	bl	11814 <error@plt>
   11f18:	b	11eb4 <__assert_fail@plt+0x418>
   11f1c:	cmp	r1, #0
   11f20:	bne	11f78 <__assert_fail@plt+0x4dc>
   11f24:	mov	r0, #0
   11f28:	mov	r1, #0
   11f2c:	mov	r2, #0
   11f30:	bl	118c8 <selabel_open@plt>
   11f34:	mov	sl, r0
   11f38:	cmp	r0, #0
   11f3c:	bne	11eb4 <__assert_fail@plt+0x418>
   11f40:	bl	118ec <__errno_location@plt>
   11f44:	ldr	r0, [r0]
   11f48:	movw	r1, #43938	; 0xaba2
   11f4c:	mov	r2, #5
   11f50:	mov	sl, #0
   11f54:	movt	r1, #1
   11f58:	str	r0, [sp, #8]
   11f5c:	mov	r0, #0
   11f60:	bl	11754 <dcgettext@plt>
   11f64:	ldr	r1, [sp, #8]
   11f68:	mov	r2, r0
   11f6c:	mov	r0, #0
   11f70:	bl	11814 <error@plt>
   11f74:	b	11eb4 <__assert_fail@plt+0x418>
   11f78:	mov	r8, r1
   11f7c:	b	11eb4 <__assert_fail@plt+0x418>
   11f80:	cmp	r0, #109	; 0x6d
   11f84:	bne	12190 <__assert_fail@plt+0x6f4>
   11f88:	ldr	r0, [r9]
   11f8c:	b	11eb0 <__assert_fail@plt+0x414>
   11f90:	cmn	r0, #1
   11f94:	bne	12130 <__assert_fail@plt+0x694>
   11f98:	movw	r9, #49608	; 0xc1c8
   11f9c:	ldr	r1, [sp, #16]
   11fa0:	movt	r9, #2
   11fa4:	ldr	r0, [r9]
   11fa8:	cmp	r0, r1
   11fac:	beq	12198 <__assert_fail@plt+0x6fc>
   11fb0:	cmp	r8, #0
   11fb4:	beq	11fc8 <__assert_fail@plt+0x52c>
   11fb8:	mov	r0, r8
   11fbc:	bl	118e0 <setfscreatecon@plt>
   11fc0:	cmn	r0, #1
   11fc4:	ble	121c4 <__assert_fail@plt+0x728>
   11fc8:	ldr	r0, [sp, #12]
   11fcc:	cmp	r0, #0
   11fd0:	beq	12030 <__assert_fail@plt+0x594>
   11fd4:	bl	16b24 <lchmod@@Base+0x124>
   11fd8:	cmp	r0, #0
   11fdc:	beq	12200 <__assert_fail@plt+0x764>
   11fe0:	mov	r8, r0
   11fe4:	mov	r0, #0
   11fe8:	mov	r5, #0
   11fec:	bl	11a00 <umask@plt>
   11ff0:	mov	r6, r0
   11ff4:	bl	11a00 <umask@plt>
   11ff8:	movw	r0, #438	; 0x1b6
   11ffc:	mov	r1, #0
   12000:	mov	r2, r6
   12004:	mov	r3, r8
   12008:	str	r5, [sp]
   1200c:	bl	16fb8 <lchmod@@Base+0x5b8>
   12010:	mov	r6, r0
   12014:	mov	r0, r8
   12018:	bl	13164 <__assert_fail@plt+0x16c8>
   1201c:	cmp	r6, #512	; 0x200
   12020:	bcc	12034 <__assert_fail@plt+0x598>
   12024:	movw	r1, #44148	; 0xac74
   12028:	movt	r1, #1
   1202c:	b	12208 <__assert_fail@plt+0x76c>
   12030:	movw	r6, #438	; 0x1b6
   12034:	ldr	r0, [r9]
   12038:	ldr	r1, [sp, #16]
   1203c:	mov	r8, #0
   12040:	cmp	r0, r1
   12044:	bge	12124 <__assert_fail@plt+0x688>
   12048:	mov	r8, #0
   1204c:	cmp	sl, #0
   12050:	bne	120c0 <__assert_fail@plt+0x624>
   12054:	b	120d4 <__assert_fail@plt+0x638>
   12058:	bl	118ec <__errno_location@plt>
   1205c:	ldr	r5, [r0]
   12060:	movw	r1, #44192	; 0xaca0
   12064:	mov	r0, #0
   12068:	movt	r1, #1
   1206c:	mov	r2, #5
   12070:	bl	11754 <dcgettext@plt>
   12074:	mov	r7, r0
   12078:	ldr	r0, [r9]
   1207c:	ldr	r1, [r4, r0, lsl #2]
   12080:	mov	r0, #4
   12084:	bl	18884 <lchmod@@Base+0x1e84>
   12088:	mov	r3, r0
   1208c:	mov	r0, #0
   12090:	mov	r1, r5
   12094:	mov	r2, r7
   12098:	bl	11814 <error@plt>
   1209c:	mov	r8, #1
   120a0:	ldr	r0, [r9]
   120a4:	ldr	r1, [sp, #16]
   120a8:	add	r0, r0, #1
   120ac:	cmp	r0, r1
   120b0:	str	r0, [r9]
   120b4:	bge	12124 <__assert_fail@plt+0x688>
   120b8:	cmp	sl, #0
   120bc:	beq	120d4 <__assert_fail@plt+0x638>
   120c0:	ldr	r1, [r4, r0, lsl #2]
   120c4:	mov	r0, sl
   120c8:	mov	r2, #4096	; 0x1000
   120cc:	bl	12224 <__assert_fail@plt+0x788>
   120d0:	ldr	r0, [r9]
   120d4:	ldr	r0, [r4, r0, lsl #2]
   120d8:	mov	r1, r6
   120dc:	bl	11a60 <mkfifo@plt>
   120e0:	cmp	r0, #0
   120e4:	bne	12058 <__assert_fail@plt+0x5bc>
   120e8:	ldr	r0, [sp, #12]
   120ec:	cmp	r0, #0
   120f0:	beq	120a0 <__assert_fail@plt+0x604>
   120f4:	ldr	r0, [r9]
   120f8:	mov	r1, r6
   120fc:	ldr	r0, [r4, r0, lsl #2]
   12100:	bl	16a00 <lchmod@@Base>
   12104:	cmp	r0, #0
   12108:	beq	120a0 <__assert_fail@plt+0x604>
   1210c:	bl	118ec <__errno_location@plt>
   12110:	ldr	r5, [r0]
   12114:	movw	r1, #44214	; 0xacb6
   12118:	mov	r0, #0
   1211c:	movt	r1, #1
   12120:	b	1206c <__assert_fail@plt+0x5d0>
   12124:	mov	r0, r8
   12128:	sub	sp, fp, #28
   1212c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12130:	cmn	r0, #3
   12134:	bne	12180 <__assert_fail@plt+0x6e4>
   12138:	movw	r0, #49528	; 0xc178
   1213c:	movw	r2, #44053	; 0xac15
   12140:	mov	r1, #0
   12144:	movt	r0, #2
   12148:	movt	r2, #1
   1214c:	str	r1, [sp, #4]
   12150:	movw	r1, #43903	; 0xab7f
   12154:	movt	r1, #1
   12158:	ldr	r3, [r0]
   1215c:	movw	r0, #49620	; 0xc1d4
   12160:	str	r2, [sp]
   12164:	movw	r2, #44039	; 0xac07
   12168:	movt	r0, #2
   1216c:	movt	r2, #1
   12170:	ldr	r0, [r0]
   12174:	bl	196a4 <lchmod@@Base+0x2ca4>
   12178:	mov	r0, #0
   1217c:	bl	11898 <exit@plt>
   12180:	cmn	r0, #2
   12184:	bne	12190 <__assert_fail@plt+0x6f4>
   12188:	mov	r0, #0
   1218c:	bl	11b98 <__assert_fail@plt+0xfc>
   12190:	mov	r0, #1
   12194:	bl	11b98 <__assert_fail@plt+0xfc>
   12198:	movw	r1, #44069	; 0xac25
   1219c:	mov	r0, #0
   121a0:	mov	r2, #5
   121a4:	movt	r1, #1
   121a8:	bl	11754 <dcgettext@plt>
   121ac:	mov	r2, r0
   121b0:	mov	r0, #0
   121b4:	mov	r1, #0
   121b8:	bl	11814 <error@plt>
   121bc:	mov	r0, #1
   121c0:	bl	11b98 <__assert_fail@plt+0xfc>
   121c4:	bl	118ec <__errno_location@plt>
   121c8:	movw	r1, #44085	; 0xac35
   121cc:	ldr	r4, [r0]
   121d0:	mov	r0, #0
   121d4:	mov	r2, #5
   121d8:	movt	r1, #1
   121dc:	bl	11754 <dcgettext@plt>
   121e0:	mov	r5, r0
   121e4:	mov	r0, r8
   121e8:	bl	18dac <lchmod@@Base+0x23ac>
   121ec:	mov	r3, r0
   121f0:	mov	r0, #1
   121f4:	mov	r1, r4
   121f8:	mov	r2, r5
   121fc:	bl	11814 <error@plt>
   12200:	movw	r1, #44135	; 0xac67
   12204:	movt	r1, #1
   12208:	mov	r0, #0
   1220c:	mov	r2, #5
   12210:	bl	11754 <dcgettext@plt>
   12214:	mov	r2, r0
   12218:	mov	r0, #1
   1221c:	mov	r1, #0
   12220:	bl	11814 <error@plt>
   12224:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12228:	add	fp, sp, #24
   1222c:	sub	sp, sp, #16
   12230:	mov	r4, #0
   12234:	mov	r7, r0
   12238:	mov	r5, r2
   1223c:	mov	r6, r1
   12240:	str	r4, [sp, #4]
   12244:	str	r4, [sp]
   12248:	ldrb	r0, [r1]
   1224c:	cmp	r0, #47	; 0x2f
   12250:	beq	12270 <__assert_fail@plt+0x7d4>
   12254:	mov	r0, r6
   12258:	mov	r1, #2
   1225c:	bl	127b0 <__assert_fail@plt+0xd14>
   12260:	mov	r4, r0
   12264:	cmp	r0, #0
   12268:	mov	r6, r0
   1226c:	beq	123c4 <__assert_fail@plt+0x928>
   12270:	add	r1, sp, #4
   12274:	mov	r0, r7
   12278:	mov	r2, r6
   1227c:	mov	r3, r5
   12280:	bl	11694 <selabel_lookup@plt>
   12284:	cmn	r0, #1
   12288:	ble	1239c <__assert_fail@plt+0x900>
   1228c:	mov	r0, #0
   12290:	str	r0, [sp, #12]
   12294:	str	r0, [sp, #8]
   12298:	mov	r0, r6
   1229c:	bl	12fa4 <__assert_fail@plt+0x1508>
   122a0:	mov	r6, r0
   122a4:	add	r0, sp, #12
   122a8:	bl	117f0 <getcon@plt>
   122ac:	mov	r9, #1
   122b0:	cmp	r0, #0
   122b4:	bmi	122f4 <__assert_fail@plt+0x858>
   122b8:	add	r1, sp, #8
   122bc:	mov	r0, r6
   122c0:	bl	1907c <lchmod@@Base+0x267c>
   122c4:	cmp	r0, #0
   122c8:	bmi	122f4 <__assert_fail@plt+0x858>
   122cc:	mov	r0, r5
   122d0:	bl	11a6c <mode_to_security_class@plt>
   122d4:	cmp	r0, #0
   122d8:	beq	122f4 <__assert_fail@plt+0x858>
   122dc:	mov	r2, r0
   122e0:	ldr	r1, [sp, #8]
   122e4:	ldr	r0, [sp, #12]
   122e8:	mov	r3, sp
   122ec:	bl	119ac <security_compute_create@plt>
   122f0:	lsr	r9, r0, #31
   122f4:	bl	118ec <__errno_location@plt>
   122f8:	ldr	r7, [r0]
   122fc:	mov	r5, r0
   12300:	mov	r0, r6
   12304:	bl	13164 <__assert_fail@plt+0x16c8>
   12308:	ldr	r0, [sp, #12]
   1230c:	bl	119dc <freecon@plt>
   12310:	ldr	r0, [sp, #8]
   12314:	bl	119dc <freecon@plt>
   12318:	mvn	r8, #0
   1231c:	cmp	r9, #0
   12320:	str	r7, [r5]
   12324:	bne	12390 <__assert_fail@plt+0x8f4>
   12328:	ldr	r0, [sp, #4]
   1232c:	bl	11748 <context_new@plt>
   12330:	cmp	r0, #0
   12334:	beq	12390 <__assert_fail@plt+0x8f4>
   12338:	mov	r6, r0
   1233c:	ldr	r0, [sp]
   12340:	bl	11748 <context_new@plt>
   12344:	cmp	r0, #0
   12348:	beq	123e0 <__assert_fail@plt+0x944>
   1234c:	mov	r9, r0
   12350:	mov	r0, r6
   12354:	bl	116dc <context_type_get@plt>
   12358:	cmp	r0, #0
   1235c:	beq	123e4 <__assert_fail@plt+0x948>
   12360:	mov	r1, r0
   12364:	mov	r0, r9
   12368:	bl	11760 <context_type_set@plt>
   1236c:	cmp	r0, #0
   12370:	bne	123e4 <__assert_fail@plt+0x948>
   12374:	mov	r0, r9
   12378:	bl	11a0c <context_str@plt>
   1237c:	cmp	r0, #0
   12380:	beq	123e4 <__assert_fail@plt+0x948>
   12384:	bl	118e0 <setfscreatecon@plt>
   12388:	mov	r8, r0
   1238c:	b	123e4 <__assert_fail@plt+0x948>
   12390:	mov	r9, #0
   12394:	mov	r6, #0
   12398:	b	123e4 <__assert_fail@plt+0x948>
   1239c:	bl	118ec <__errno_location@plt>
   123a0:	mov	r5, r0
   123a4:	ldr	r0, [r0]
   123a8:	mvn	r8, #0
   123ac:	mov	r9, #0
   123b0:	mov	r6, #0
   123b4:	cmp	r0, #2
   123b8:	moveq	r0, #61	; 0x3d
   123bc:	streq	r0, [r5]
   123c0:	b	123e4 <__assert_fail@plt+0x948>
   123c4:	mov	r9, #0
   123c8:	mvn	r8, #0
   123cc:	bl	118ec <__errno_location@plt>
   123d0:	mov	r5, r0
   123d4:	mov	r6, #0
   123d8:	mov	r4, #0
   123dc:	b	123e4 <__assert_fail@plt+0x948>
   123e0:	mov	r9, #0
   123e4:	ldr	r7, [r5]
   123e8:	mov	r0, r6
   123ec:	bl	11868 <context_free@plt>
   123f0:	mov	r0, r9
   123f4:	bl	11868 <context_free@plt>
   123f8:	ldr	r0, [sp, #4]
   123fc:	bl	119dc <freecon@plt>
   12400:	ldr	r0, [sp]
   12404:	bl	119dc <freecon@plt>
   12408:	mov	r0, r4
   1240c:	bl	13164 <__assert_fail@plt+0x16c8>
   12410:	str	r7, [r5]
   12414:	mov	r0, r8
   12418:	sub	sp, fp, #24
   1241c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12420:	push	{r4, r5, r6, r7, fp, lr}
   12424:	add	fp, sp, #16
   12428:	sub	sp, sp, #8
   1242c:	mov	r5, r0
   12430:	ldrb	r0, [r1]
   12434:	mov	r6, r2
   12438:	mov	r4, #0
   1243c:	cmp	r0, #47	; 0x2f
   12440:	beq	12460 <__assert_fail@plt+0x9c4>
   12444:	mov	r0, r1
   12448:	mov	r1, #2
   1244c:	bl	127b0 <__assert_fail@plt+0xd14>
   12450:	mov	r4, r0
   12454:	cmp	r0, #0
   12458:	mov	r1, r0
   1245c:	beq	1253c <__assert_fail@plt+0xaa0>
   12460:	cmp	r6, #0
   12464:	beq	124c8 <__assert_fail@plt+0xa2c>
   12468:	mov	r7, #0
   1246c:	stm	sp, {r1, r7}
   12470:	mov	r0, sp
   12474:	mov	r1, #16
   12478:	mov	r2, #0
   1247c:	bl	19e58 <lchmod@@Base+0x3458>
   12480:	mov	r6, r0
   12484:	bl	13af4 <__assert_fail@plt+0x2058>
   12488:	cmp	r0, #0
   1248c:	beq	12500 <__assert_fail@plt+0xa64>
   12490:	mov	r7, #0
   12494:	b	124a8 <__assert_fail@plt+0xa0c>
   12498:	mov	r0, r6
   1249c:	bl	13af4 <__assert_fail@plt+0x2058>
   124a0:	cmp	r0, #0
   124a4:	beq	12500 <__assert_fail@plt+0xa64>
   124a8:	ldr	r1, [r6, #24]
   124ac:	mov	r0, r5
   124b0:	bl	12548 <__assert_fail@plt+0xaac>
   124b4:	cmn	r0, #1
   124b8:	bgt	12498 <__assert_fail@plt+0x9fc>
   124bc:	bl	118ec <__errno_location@plt>
   124c0:	ldr	r7, [r0]
   124c4:	b	12498 <__assert_fail@plt+0x9fc>
   124c8:	mov	r0, r5
   124cc:	bl	12548 <__assert_fail@plt+0xaac>
   124d0:	mov	r5, r0
   124d4:	bl	118ec <__errno_location@plt>
   124d8:	ldr	r7, [r0]
   124dc:	mov	r6, r0
   124e0:	mov	r0, r4
   124e4:	bl	13164 <__assert_fail@plt+0x16c8>
   124e8:	mvn	r0, #0
   124ec:	str	r7, [r6]
   124f0:	subs	r0, r5, r0
   124f4:	movwne	r0, #1
   124f8:	sub	sp, fp, #16
   124fc:	pop	{r4, r5, r6, r7, fp, pc}
   12500:	bl	118ec <__errno_location@plt>
   12504:	mov	r5, r0
   12508:	ldr	r0, [r0]
   1250c:	cmp	r0, #0
   12510:	movne	r7, r0
   12514:	mov	r0, r6
   12518:	bl	1394c <__assert_fail@plt+0x1eb0>
   1251c:	cmp	r0, #0
   12520:	mov	r0, r4
   12524:	ldrne	r7, [r5]
   12528:	bl	13164 <__assert_fail@plt+0x16c8>
   1252c:	clz	r0, r7
   12530:	lsr	r0, r0, #5
   12534:	sub	sp, fp, #16
   12538:	pop	{r4, r5, r6, r7, fp, pc}
   1253c:	mov	r0, #0
   12540:	sub	sp, fp, #16
   12544:	pop	{r4, r5, r6, r7, fp, pc}
   12548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1254c:	add	fp, sp, #28
   12550:	sub	sp, sp, #116	; 0x74
   12554:	mov	r6, r0
   12558:	mov	r0, #0
   1255c:	mov	r7, r1
   12560:	cmp	r6, #0
   12564:	str	r0, [sp, #4]
   12568:	str	r0, [sp]
   1256c:	beq	125c0 <__assert_fail@plt+0xb24>
   12570:	mov	r0, r7
   12574:	mov	r1, #32768	; 0x8000
   12578:	bl	11820 <open64@plt>
   1257c:	mov	sl, r0
   12580:	cmn	r0, #1
   12584:	beq	125fc <__assert_fail@plt+0xb60>
   12588:	add	r2, sp, #8
   1258c:	mov	r0, #3
   12590:	mov	r1, sl
   12594:	bl	117b4 <__fxstat64@plt>
   12598:	mov	r5, #1
   1259c:	cmn	r0, #1
   125a0:	bgt	12634 <__assert_fail@plt+0xb98>
   125a4:	bl	118ec <__errno_location@plt>
   125a8:	ldr	r5, [r0]
   125ac:	mov	r4, r0
   125b0:	mov	r8, #0
   125b4:	mvn	r9, #0
   125b8:	mov	r6, #0
   125bc:	b	12758 <__assert_fail@plt+0xcbc>
   125c0:	mov	r0, sp
   125c4:	bl	119f4 <getfscreatecon@plt>
   125c8:	mvn	r9, #0
   125cc:	cmp	r0, #0
   125d0:	bmi	12784 <__assert_fail@plt+0xce8>
   125d4:	ldr	r1, [sp]
   125d8:	cmp	r1, #0
   125dc:	beq	126b4 <__assert_fail@plt+0xc18>
   125e0:	mov	r0, r7
   125e4:	bl	116f4 <lsetfilecon@plt>
   125e8:	mov	r9, r0
   125ec:	bl	118ec <__errno_location@plt>
   125f0:	ldr	r5, [r0]
   125f4:	mov	r4, r0
   125f8:	b	12778 <__assert_fail@plt+0xcdc>
   125fc:	bl	118ec <__errno_location@plt>
   12600:	ldr	r5, [r0]
   12604:	mov	r4, r0
   12608:	mov	r8, #0
   1260c:	mvn	r9, #0
   12610:	cmp	r5, #40	; 0x28
   12614:	bne	126ac <__assert_fail@plt+0xc10>
   12618:	add	r2, sp, #8
   1261c:	mov	r0, #3
   12620:	mov	r1, r7
   12624:	bl	11a54 <__lxstat64@plt>
   12628:	mov	r5, #0
   1262c:	cmn	r0, #1
   12630:	ble	12790 <__assert_fail@plt+0xcf4>
   12634:	ldr	r3, [sp, #24]
   12638:	add	r1, sp, #4
   1263c:	mov	r0, r6
   12640:	mov	r2, r7
   12644:	bl	11694 <selabel_lookup@plt>
   12648:	cmn	r0, #1
   1264c:	ble	12688 <__assert_fail@plt+0xbec>
   12650:	ldr	r0, [sp, #4]
   12654:	bl	11748 <context_new@plt>
   12658:	mvn	r9, #0
   1265c:	cmp	r0, #0
   12660:	beq	126c4 <__assert_fail@plt+0xc28>
   12664:	mov	r8, r0
   12668:	mov	r1, sp
   1266c:	cmp	r5, #0
   12670:	beq	126d0 <__assert_fail@plt+0xc34>
   12674:	mov	r0, sl
   12678:	bl	19164 <lchmod@@Base+0x2764>
   1267c:	cmp	r0, #0
   12680:	bpl	126e0 <__assert_fail@plt+0xc44>
   12684:	b	12740 <__assert_fail@plt+0xca4>
   12688:	bl	118ec <__errno_location@plt>
   1268c:	ldr	r1, [r0]
   12690:	mvn	r9, #0
   12694:	mov	r6, #0
   12698:	mov	r8, #0
   1269c:	cmp	r1, #2
   126a0:	moveq	r1, #61	; 0x3d
   126a4:	streq	r1, [r0]
   126a8:	b	12744 <__assert_fail@plt+0xca8>
   126ac:	mov	r6, #0
   126b0:	b	12760 <__assert_fail@plt+0xcc4>
   126b4:	bl	118ec <__errno_location@plt>
   126b8:	mov	r1, #61	; 0x3d
   126bc:	str	r1, [r0]
   126c0:	b	12784 <__assert_fail@plt+0xce8>
   126c4:	mov	r6, #0
   126c8:	mov	r8, #0
   126cc:	b	12744 <__assert_fail@plt+0xca8>
   126d0:	mov	r0, r7
   126d4:	bl	190f0 <lchmod@@Base+0x26f0>
   126d8:	cmp	r0, #0
   126dc:	bmi	12740 <__assert_fail@plt+0xca4>
   126e0:	ldr	r0, [sp]
   126e4:	bl	11748 <context_new@plt>
   126e8:	cmp	r0, #0
   126ec:	beq	12740 <__assert_fail@plt+0xca4>
   126f0:	mov	r6, r0
   126f4:	mov	r0, r8
   126f8:	bl	116dc <context_type_get@plt>
   126fc:	cmp	r0, #0
   12700:	beq	12744 <__assert_fail@plt+0xca8>
   12704:	mov	r1, r0
   12708:	mov	r0, r6
   1270c:	bl	11760 <context_type_set@plt>
   12710:	cmp	r0, #0
   12714:	bne	12744 <__assert_fail@plt+0xca8>
   12718:	mov	r0, r6
   1271c:	bl	11a0c <context_str@plt>
   12720:	cmp	r0, #0
   12724:	beq	12744 <__assert_fail@plt+0xca8>
   12728:	mov	r1, r0
   1272c:	cmp	r5, #0
   12730:	beq	127a0 <__assert_fail@plt+0xd04>
   12734:	mov	r0, sl
   12738:	bl	11970 <fsetfilecon@plt>
   1273c:	b	127a8 <__assert_fail@plt+0xd0c>
   12740:	mov	r6, #0
   12744:	bl	118ec <__errno_location@plt>
   12748:	ldr	r5, [r0]
   1274c:	mov	r4, r0
   12750:	cmn	sl, #1
   12754:	beq	12760 <__assert_fail@plt+0xcc4>
   12758:	mov	r0, sl
   1275c:	bl	11a48 <close@plt>
   12760:	mov	r0, r8
   12764:	bl	11868 <context_free@plt>
   12768:	mov	r0, r6
   1276c:	bl	11868 <context_free@plt>
   12770:	ldr	r0, [sp, #4]
   12774:	bl	119dc <freecon@plt>
   12778:	ldr	r0, [sp]
   1277c:	bl	119dc <freecon@plt>
   12780:	str	r5, [r4]
   12784:	mov	r0, r9
   12788:	sub	sp, fp, #28
   1278c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12790:	ldr	r5, [r4]
   12794:	mov	r8, #0
   12798:	mov	r6, #0
   1279c:	b	12760 <__assert_fail@plt+0xcc4>
   127a0:	mov	r0, r7
   127a4:	bl	116f4 <lsetfilecon@plt>
   127a8:	mov	r9, r0
   127ac:	b	12744 <__assert_fail@plt+0xca8>
   127b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127b4:	add	fp, sp, #28
   127b8:	sub	sp, sp, #180	; 0xb4
   127bc:	sub	sp, sp, #3072	; 0xc00
   127c0:	and	r7, r1, #3
   127c4:	mov	r8, r0
   127c8:	sub	r0, r7, #1
   127cc:	tst	r7, r0
   127d0:	bne	1285c <__assert_fail@plt+0xdc0>
   127d4:	cmp	r8, #0
   127d8:	beq	1285c <__assert_fail@plt+0xdc0>
   127dc:	ldrb	r0, [r8]
   127e0:	cmp	r0, #0
   127e4:	beq	12878 <__assert_fail@plt+0xddc>
   127e8:	mov	r4, r1
   127ec:	mov	r1, #1024	; 0x400
   127f0:	sub	lr, fp, #1024	; 0x400
   127f4:	cmp	r0, #47	; 0x2f
   127f8:	str	r1, [fp, #-1060]	; 0xfffffbdc
   127fc:	str	r1, [sp, #52]	; 0x34
   12800:	str	r1, [sp, #1188]	; 0x4a4
   12804:	add	r1, sp, #1184	; 0x4a0
   12808:	sub	r2, lr, #40	; 0x28
   1280c:	add	r1, r1, #8
   12810:	add	r2, r2, #8
   12814:	str	r1, [sp, #16]
   12818:	str	r1, [sp, #1184]	; 0x4a0
   1281c:	add	r1, sp, #48	; 0x30
   12820:	str	r2, [sp, #12]
   12824:	str	r2, [fp, #-1064]	; 0xfffffbd8
   12828:	add	r5, r1, #8
   1282c:	mov	r0, r5
   12830:	str	r5, [sp, #48]	; 0x30
   12834:	str	r5, [sp, #8]
   12838:	bne	12884 <__assert_fail@plt+0xde8>
   1283c:	mov	r1, r8
   12840:	mov	r2, #0
   12844:	mov	r3, #1024	; 0x400
   12848:	bl	11a90 <__mempcpy_chk@plt>
   1284c:	mov	r6, r0
   12850:	mov	r0, #47	; 0x2f
   12854:	strb	r0, [r6], #1
   12858:	b	128a4 <__assert_fail@plt+0xe08>
   1285c:	bl	118ec <__errno_location@plt>
   12860:	mov	r1, #22
   12864:	mov	r4, #0
   12868:	str	r1, [r0]
   1286c:	mov	r0, r4
   12870:	sub	sp, fp, #28
   12874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12878:	bl	118ec <__errno_location@plt>
   1287c:	mov	r1, #2
   12880:	b	12864 <__assert_fail@plt+0xdc8>
   12884:	mov	r1, #1024	; 0x400
   12888:	bl	1188c <getcwd@plt>
   1288c:	cmp	r0, #0
   12890:	beq	12dc0 <__assert_fail@plt+0x1324>
   12894:	mov	r0, r5
   12898:	mov	r1, #0
   1289c:	bl	11790 <rawmemchr@plt>
   128a0:	mov	r6, r0
   128a4:	ldrb	r0, [r8]
   128a8:	cmp	r0, #0
   128ac:	beq	12d84 <__assert_fail@plt+0x12e8>
   128b0:	and	r1, r4, #4
   128b4:	add	r9, sp, #48	; 0x30
   128b8:	str	r7, [sp, #32]
   128bc:	str	r1, [sp, #40]	; 0x28
   128c0:	mov	r1, #0
   128c4:	str	r1, [sp, #24]
   128c8:	mov	r1, #0
   128cc:	str	r1, [sp, #36]	; 0x24
   128d0:	mov	r1, #0
   128d4:	str	r1, [sp, #20]
   128d8:	b	128f4 <__assert_fail@plt+0xe58>
   128dc:	cmp	r0, #0
   128e0:	beq	12bfc <__assert_fail@plt+0x1160>
   128e4:	mov	r8, sl
   128e8:	ldrb	r0, [r8]
   128ec:	cmp	r0, #0
   128f0:	beq	12d8c <__assert_fail@plt+0x12f0>
   128f4:	uxtb	r1, r0
   128f8:	cmp	r1, #47	; 0x2f
   128fc:	bne	1290c <__assert_fail@plt+0xe70>
   12900:	ldrb	r0, [r8, #1]!
   12904:	cmp	r0, #47	; 0x2f
   12908:	beq	12900 <__assert_fail@plt+0xe64>
   1290c:	mov	r1, r0
   12910:	mov	sl, r8
   12914:	b	1291c <__assert_fail@plt+0xe80>
   12918:	ldrb	r1, [sl, #1]!
   1291c:	uxtb	r1, r1
   12920:	cmp	r1, #0
   12924:	cmpne	r1, #47	; 0x2f
   12928:	bne	12918 <__assert_fail@plt+0xe7c>
   1292c:	sub	r2, sl, r8
   12930:	cmp	r2, #1
   12934:	beq	1294c <__assert_fail@plt+0xeb0>
   12938:	cmp	r2, #2
   1293c:	beq	1295c <__assert_fail@plt+0xec0>
   12940:	cmp	r2, #0
   12944:	bne	129a4 <__assert_fail@plt+0xf08>
   12948:	b	12d8c <__assert_fail@plt+0x12f0>
   1294c:	uxtb	r0, r0
   12950:	cmp	r0, #46	; 0x2e
   12954:	bne	129a4 <__assert_fail@plt+0xf08>
   12958:	b	128e4 <__assert_fail@plt+0xe48>
   1295c:	uxtb	r0, r0
   12960:	cmp	r0, #46	; 0x2e
   12964:	bne	129a4 <__assert_fail@plt+0xf08>
   12968:	ldrb	r0, [r8, #1]
   1296c:	cmp	r0, #46	; 0x2e
   12970:	bne	129a4 <__assert_fail@plt+0xf08>
   12974:	add	r0, r5, #1
   12978:	cmp	r6, r0
   1297c:	bls	128e4 <__assert_fail@plt+0xe48>
   12980:	sub	r0, r6, #1
   12984:	mov	r6, r0
   12988:	cmp	r0, r5
   1298c:	bls	128e4 <__assert_fail@plt+0xe48>
   12990:	mov	r0, r6
   12994:	ldrb	r1, [r0, #-1]!
   12998:	cmp	r1, #47	; 0x2f
   1299c:	bne	12984 <__assert_fail@plt+0xee8>
   129a0:	b	128e4 <__assert_fail@plt+0xe48>
   129a4:	ldrb	r0, [r6, #-1]
   129a8:	add	r4, r2, #2
   129ac:	str	r2, [sp, #44]	; 0x2c
   129b0:	cmp	r0, #47	; 0x2f
   129b4:	movne	r0, #47	; 0x2f
   129b8:	strbne	r0, [r6], #1
   129bc:	ldr	r0, [sp, #52]	; 0x34
   129c0:	add	r0, r5, r0
   129c4:	sub	r0, r0, r6
   129c8:	cmp	r0, r4
   129cc:	bcs	12a04 <__assert_fail@plt+0xf68>
   129d0:	mov	r0, r9
   129d4:	bl	18fd4 <lchmod@@Base+0x25d4>
   129d8:	cmp	r0, #0
   129dc:	beq	12e84 <__assert_fail@plt+0x13e8>
   129e0:	sub	r0, r6, r5
   129e4:	ldr	r5, [sp, #48]	; 0x30
   129e8:	ldr	r1, [sp, #52]	; 0x34
   129ec:	add	r6, r5, r0
   129f0:	add	r0, r5, r1
   129f4:	sub	r0, r0, r6
   129f8:	cmp	r0, r4
   129fc:	bcc	129d0 <__assert_fail@plt+0xf34>
   12a00:	ldr	r2, [sp, #44]	; 0x2c
   12a04:	mov	r0, r6
   12a08:	mov	r1, r8
   12a0c:	mvn	r3, #0
   12a10:	bl	11a90 <__mempcpy_chk@plt>
   12a14:	mov	r6, r0
   12a18:	mov	r0, #0
   12a1c:	strb	r0, [r6]
   12a20:	ldr	r0, [sp, #40]	; 0x28
   12a24:	cmp	r0, #0
   12a28:	bne	12a8c <__assert_fail@plt+0xff0>
   12a2c:	ldr	r0, [sp, #1188]	; 0x4a4
   12a30:	ldr	r7, [sp, #1184]	; 0x4a0
   12a34:	sub	r9, r0, #1
   12a38:	mov	r0, r5
   12a3c:	mov	r1, r7
   12a40:	mov	r2, r9
   12a44:	bl	117c0 <readlink@plt>
   12a48:	cmp	r0, r9
   12a4c:	blt	12a64 <__assert_fail@plt+0xfc8>
   12a50:	add	r0, sp, #1184	; 0x4a0
   12a54:	bl	18f64 <lchmod@@Base+0x2564>
   12a58:	cmp	r0, #0
   12a5c:	bne	12a2c <__assert_fail@plt+0xf90>
   12a60:	b	12e84 <__assert_fail@plt+0x13e8>
   12a64:	mov	r4, r0
   12a68:	cmp	r0, #0
   12a6c:	add	r9, sp, #48	; 0x30
   12a70:	bmi	12a8c <__assert_fail@plt+0xff0>
   12a74:	ldr	r0, [sp, #24]
   12a78:	cmp	r0, #19
   12a7c:	bgt	12b0c <__assert_fail@plt+0x1070>
   12a80:	add	r0, r0, #1
   12a84:	str	r0, [sp, #24]
   12a88:	b	12c6c <__assert_fail@plt+0x11d0>
   12a8c:	ldr	r7, [sp, #32]
   12a90:	cmp	r7, #2
   12a94:	beq	128e4 <__assert_fail@plt+0xe48>
   12a98:	ldrb	r0, [sl]
   12a9c:	cmp	r0, #47	; 0x2f
   12aa0:	bne	12bdc <__assert_fail@plt+0x1140>
   12aa4:	mov	r2, sl
   12aa8:	mov	r1, r2
   12aac:	ldrb	r3, [r2, #1]!
   12ab0:	cmp	r3, #47	; 0x2f
   12ab4:	beq	12aa8 <__assert_fail@plt+0x100c>
   12ab8:	cmp	r3, #46	; 0x2e
   12abc:	bne	12bd4 <__assert_fail@plt+0x1138>
   12ac0:	add	r2, r1, #2
   12ac4:	ldrb	r3, [r2]
   12ac8:	cmp	r3, #47	; 0x2f
   12acc:	beq	12aa8 <__assert_fail@plt+0x100c>
   12ad0:	cmp	r3, #0
   12ad4:	beq	12af0 <__assert_fail@plt+0x1054>
   12ad8:	cmp	r3, #46	; 0x2e
   12adc:	bne	12bdc <__assert_fail@plt+0x1140>
   12ae0:	ldrb	r1, [r1, #3]
   12ae4:	cmp	r1, #47	; 0x2f
   12ae8:	cmpne	r1, #0
   12aec:	bne	12bdc <__assert_fail@plt+0x1140>
   12af0:	mov	r0, #47	; 0x2f
   12af4:	mov	r1, r5
   12af8:	mov	r2, #0
   12afc:	mov	r3, #512	; 0x200
   12b00:	strh	r0, [r6]
   12b04:	mvn	r0, #99	; 0x63
   12b08:	b	12c0c <__assert_fail@plt+0x1170>
   12b0c:	ldrb	r0, [r8]
   12b10:	add	lr, sp, #1024	; 0x400
   12b14:	add	r2, lr, #56	; 0x38
   12b18:	cmp	r0, #0
   12b1c:	beq	12c6c <__assert_fail@plt+0x11d0>
   12b20:	ldr	r9, [sp, #44]	; 0x2c
   12b24:	mov	r0, #0
   12b28:	mov	r1, r5
   12b2c:	strb	r0, [r6, -r9]
   12b30:	ldrb	r0, [r5]
   12b34:	cmp	r0, #0
   12b38:	movw	r0, #44819	; 0xaf13
   12b3c:	movt	r0, #1
   12b40:	moveq	r1, r0
   12b44:	mov	r0, #3
   12b48:	bl	11a24 <__xstat64@plt>
   12b4c:	cmp	r0, #0
   12b50:	bne	12e94 <__assert_fail@plt+0x13f8>
   12b54:	rsb	r0, r9, #0
   12b58:	ldr	r9, [sp, #20]
   12b5c:	ldrb	r1, [r8]
   12b60:	cmp	r9, #0
   12b64:	strb	r1, [r6, r0]
   12b68:	bne	12ba0 <__assert_fail@plt+0x1104>
   12b6c:	movw	r0, #26904	; 0x6918
   12b70:	movw	r2, #26744	; 0x6878
   12b74:	movw	r3, #26800	; 0x68b0
   12b78:	mov	r1, #0
   12b7c:	movt	r0, #1
   12b80:	movt	r2, #1
   12b84:	movt	r3, #1
   12b88:	str	r0, [sp]
   12b8c:	mov	r0, #7
   12b90:	bl	15a3c <__assert_fail@plt+0x3fa0>
   12b94:	mov	r9, r0
   12b98:	cmp	r0, #0
   12b9c:	beq	12e84 <__assert_fail@plt+0x13e8>
   12ba0:	add	lr, sp, #1024	; 0x400
   12ba4:	mov	r0, r9
   12ba8:	mov	r1, r8
   12bac:	add	r2, lr, #56	; 0x38
   12bb0:	bl	13114 <__assert_fail@plt+0x1678>
   12bb4:	cmp	r0, #0
   12bb8:	str	r9, [sp, #20]
   12bbc:	beq	12c58 <__assert_fail@plt+0x11bc>
   12bc0:	ldr	r7, [sp, #32]
   12bc4:	cmp	r7, #2
   12bc8:	bne	12e88 <__assert_fail@plt+0x13ec>
   12bcc:	mov	r8, sl
   12bd0:	b	12d40 <__assert_fail@plt+0x12a4>
   12bd4:	cmp	r3, #0
   12bd8:	beq	12af0 <__assert_fail@plt+0x1054>
   12bdc:	ldr	r1, [sp, #40]	; 0x28
   12be0:	cmp	r1, #0
   12be4:	bne	128dc <__assert_fail@plt+0xe40>
   12be8:	bl	118ec <__errno_location@plt>
   12bec:	ldr	r0, [r0]
   12bf0:	cmp	r0, #22
   12bf4:	beq	128e4 <__assert_fail@plt+0xe48>
   12bf8:	b	12c18 <__assert_fail@plt+0x117c>
   12bfc:	mvn	r0, #99	; 0x63
   12c00:	mov	r1, r5
   12c04:	mov	r2, #0
   12c08:	mov	r3, #512	; 0x200
   12c0c:	bl	11718 <faccessat@plt>
   12c10:	cmp	r0, #0
   12c14:	beq	128e4 <__assert_fail@plt+0xe48>
   12c18:	mov	r4, #1
   12c1c:	cmp	r7, #1
   12c20:	bne	12dac <__assert_fail@plt+0x1310>
   12c24:	bl	118ec <__errno_location@plt>
   12c28:	ldr	r0, [r0]
   12c2c:	cmp	r0, #2
   12c30:	bne	12dac <__assert_fail@plt+0x1310>
   12c34:	movw	r1, #46017	; 0xb3c1
   12c38:	mov	r0, sl
   12c3c:	movt	r1, #1
   12c40:	bl	11a84 <strspn@plt>
   12c44:	ldrb	r0, [sl, r0]
   12c48:	mov	r8, sl
   12c4c:	cmp	r0, #0
   12c50:	beq	128e8 <__assert_fail@plt+0xe4c>
   12c54:	b	12dac <__assert_fail@plt+0x1310>
   12c58:	add	lr, sp, #1024	; 0x400
   12c5c:	mov	r0, r9
   12c60:	mov	r1, r8
   12c64:	add	r2, lr, #56	; 0x38
   12c68:	bl	13098 <__assert_fail@plt+0x15fc>
   12c6c:	mov	r0, #0
   12c70:	strb	r0, [r7, r4]
   12c74:	ldr	r0, [sp, #36]	; 0x24
   12c78:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   12c7c:	tst	r0, #1
   12c80:	ldr	r0, [sp, #28]
   12c84:	subne	r0, sl, r8
   12c88:	str	r0, [sp, #28]
   12c8c:	mov	r0, sl
   12c90:	bl	118bc <strlen@plt>
   12c94:	mvn	r1, r4
   12c98:	cmp	r0, r1
   12c9c:	bhi	12e84 <__assert_fail@plt+0x13e8>
   12ca0:	str	r0, [sp, #44]	; 0x2c
   12ca4:	add	r9, r0, r4
   12ca8:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   12cac:	cmp	r0, r9
   12cb0:	bhi	12cd8 <__assert_fail@plt+0x123c>
   12cb4:	sub	lr, fp, #1024	; 0x400
   12cb8:	sub	r0, lr, #40	; 0x28
   12cbc:	bl	18fd4 <lchmod@@Base+0x25d4>
   12cc0:	cmp	r0, #0
   12cc4:	beq	12e84 <__assert_fail@plt+0x13e8>
   12cc8:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   12ccc:	cmp	r0, r9
   12cd0:	bls	12cb4 <__assert_fail@plt+0x1218>
   12cd4:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   12cd8:	ldr	r0, [sp, #36]	; 0x24
   12cdc:	ldr	r1, [sp, #44]	; 0x2c
   12ce0:	tst	r0, #1
   12ce4:	ldr	r0, [sp, #28]
   12ce8:	add	r2, r1, #1
   12cec:	addne	sl, r8, r0
   12cf0:	add	r0, r8, r4
   12cf4:	mov	r1, sl
   12cf8:	bl	11700 <memmove@plt>
   12cfc:	mov	r0, r8
   12d00:	mov	r1, r7
   12d04:	mov	r2, r4
   12d08:	bl	11730 <memcpy@plt>
   12d0c:	ldrb	r0, [r7]
   12d10:	cmp	r0, #47	; 0x2f
   12d14:	bne	12d48 <__assert_fail@plt+0x12ac>
   12d18:	mov	r0, r5
   12d1c:	mov	r1, r7
   12d20:	mov	r2, #0
   12d24:	mvn	r3, #0
   12d28:	bl	11a90 <__mempcpy_chk@plt>
   12d2c:	mov	r6, r0
   12d30:	mov	r0, #47	; 0x2f
   12d34:	strb	r0, [r6], #1
   12d38:	mov	r0, #1
   12d3c:	str	r0, [sp, #36]	; 0x24
   12d40:	add	r9, sp, #48	; 0x30
   12d44:	b	128e8 <__assert_fail@plt+0xe4c>
   12d48:	add	r0, r5, #1
   12d4c:	mov	r1, #1
   12d50:	add	r9, sp, #48	; 0x30
   12d54:	cmp	r6, r0
   12d58:	str	r1, [sp, #36]	; 0x24
   12d5c:	bls	128e8 <__assert_fail@plt+0xe4c>
   12d60:	sub	r0, r6, #1
   12d64:	mov	r6, r0
   12d68:	cmp	r0, r5
   12d6c:	bls	128e8 <__assert_fail@plt+0xe4c>
   12d70:	mov	r0, r6
   12d74:	ldrb	r1, [r0, #-1]!
   12d78:	cmp	r1, #47	; 0x2f
   12d7c:	bne	12d64 <__assert_fail@plt+0x12c8>
   12d80:	b	128e8 <__assert_fail@plt+0xe4c>
   12d84:	mov	r0, #0
   12d88:	str	r0, [sp, #20]
   12d8c:	add	r0, r5, #1
   12d90:	cmp	r6, r0
   12d94:	bls	12da8 <__assert_fail@plt+0x130c>
   12d98:	mov	r0, r6
   12d9c:	ldrb	r1, [r0, #-1]!
   12da0:	cmp	r1, #47	; 0x2f
   12da4:	moveq	r6, r0
   12da8:	mov	r4, #0
   12dac:	ldr	r0, [sp, #20]
   12db0:	cmp	r0, #0
   12db4:	beq	12e18 <__assert_fail@plt+0x137c>
   12db8:	bl	15d40 <__assert_fail@plt+0x42a4>
   12dbc:	b	12e18 <__assert_fail@plt+0x137c>
   12dc0:	bl	118ec <__errno_location@plt>
   12dc4:	ldr	r5, [sp, #8]
   12dc8:	mov	r6, r0
   12dcc:	add	r9, sp, #48	; 0x30
   12dd0:	ldr	r0, [r6]
   12dd4:	cmp	r0, #34	; 0x22
   12dd8:	bne	12e08 <__assert_fail@plt+0x136c>
   12ddc:	mov	r0, r9
   12de0:	bl	18f64 <lchmod@@Base+0x2564>
   12de4:	cmp	r0, #0
   12de8:	beq	12e84 <__assert_fail@plt+0x13e8>
   12dec:	ldr	r5, [sp, #48]	; 0x30
   12df0:	ldr	r1, [sp, #52]	; 0x34
   12df4:	mov	r0, r5
   12df8:	bl	1188c <getcwd@plt>
   12dfc:	cmp	r0, #0
   12e00:	beq	12dd0 <__assert_fail@plt+0x1334>
   12e04:	b	12894 <__assert_fail@plt+0xdf8>
   12e08:	cmp	r0, #12
   12e0c:	beq	12e84 <__assert_fail@plt+0x13e8>
   12e10:	mov	r4, #1
   12e14:	mov	r6, r5
   12e18:	ldr	r1, [sp, #12]
   12e1c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   12e20:	ldr	r7, [sp, #16]
   12e24:	cmp	r0, r1
   12e28:	beq	12e30 <__assert_fail@plt+0x1394>
   12e2c:	bl	13164 <__assert_fail@plt+0x16c8>
   12e30:	ldr	r0, [sp, #1184]	; 0x4a0
   12e34:	cmp	r0, r7
   12e38:	beq	12e40 <__assert_fail@plt+0x13a4>
   12e3c:	bl	13164 <__assert_fail@plt+0x16c8>
   12e40:	cmp	r4, #0
   12e44:	beq	12e64 <__assert_fail@plt+0x13c8>
   12e48:	ldr	r0, [sp, #48]	; 0x30
   12e4c:	ldr	r1, [sp, #8]
   12e50:	mov	r4, #0
   12e54:	cmp	r0, r1
   12e58:	beq	1286c <__assert_fail@plt+0xdd0>
   12e5c:	bl	13164 <__assert_fail@plt+0x16c8>
   12e60:	b	1286c <__assert_fail@plt+0xdd0>
   12e64:	mov	r0, #0
   12e68:	strb	r0, [r6], -r5
   12e6c:	add	r0, sp, #48	; 0x30
   12e70:	add	r1, r6, #1
   12e74:	bl	18ef8 <lchmod@@Base+0x24f8>
   12e78:	mov	r4, r0
   12e7c:	cmp	r0, #0
   12e80:	bne	1286c <__assert_fail@plt+0xdd0>
   12e84:	bl	19e14 <lchmod@@Base+0x3414>
   12e88:	bl	118ec <__errno_location@plt>
   12e8c:	mov	r1, #40	; 0x28
   12e90:	str	r1, [r0]
   12e94:	mov	r4, #1
   12e98:	b	12dac <__assert_fail@plt+0x1310>
   12e9c:	movw	r1, #49632	; 0xc1e0
   12ea0:	movt	r1, #2
   12ea4:	str	r0, [r1]
   12ea8:	bx	lr
   12eac:	movw	r1, #49636	; 0xc1e4
   12eb0:	movt	r1, #2
   12eb4:	strb	r0, [r1]
   12eb8:	bx	lr
   12ebc:	push	{r4, r5, r6, sl, fp, lr}
   12ec0:	add	fp, sp, #16
   12ec4:	sub	sp, sp, #8
   12ec8:	movw	r0, #49620	; 0xc1d4
   12ecc:	movt	r0, #2
   12ed0:	ldr	r0, [r0]
   12ed4:	bl	1a030 <lchmod@@Base+0x3630>
   12ed8:	cmp	r0, #0
   12edc:	beq	12f04 <__assert_fail@plt+0x1468>
   12ee0:	movw	r0, #49636	; 0xc1e4
   12ee4:	movt	r0, #2
   12ee8:	ldrb	r0, [r0]
   12eec:	cmp	r0, #0
   12ef0:	beq	12f24 <__assert_fail@plt+0x1488>
   12ef4:	bl	118ec <__errno_location@plt>
   12ef8:	ldr	r0, [r0]
   12efc:	cmp	r0, #32
   12f00:	bne	12f24 <__assert_fail@plt+0x1488>
   12f04:	movw	r0, #49616	; 0xc1d0
   12f08:	movt	r0, #2
   12f0c:	ldr	r0, [r0]
   12f10:	bl	1a030 <lchmod@@Base+0x3630>
   12f14:	cmp	r0, #0
   12f18:	subeq	sp, fp, #16
   12f1c:	popeq	{r4, r5, r6, sl, fp, pc}
   12f20:	b	12f94 <__assert_fail@plt+0x14f8>
   12f24:	movw	r1, #44799	; 0xaeff
   12f28:	mov	r0, #0
   12f2c:	mov	r2, #5
   12f30:	movt	r1, #1
   12f34:	bl	11754 <dcgettext@plt>
   12f38:	mov	r4, r0
   12f3c:	movw	r0, #49632	; 0xc1e0
   12f40:	movt	r0, #2
   12f44:	ldr	r6, [r0]
   12f48:	bl	118ec <__errno_location@plt>
   12f4c:	ldr	r5, [r0]
   12f50:	cmp	r6, #0
   12f54:	bne	12f70 <__assert_fail@plt+0x14d4>
   12f58:	movw	r2, #44815	; 0xaf0f
   12f5c:	mov	r0, #0
   12f60:	mov	r1, r5
   12f64:	mov	r3, r4
   12f68:	movt	r2, #1
   12f6c:	b	12f90 <__assert_fail@plt+0x14f4>
   12f70:	mov	r0, r6
   12f74:	bl	18a24 <lchmod@@Base+0x2024>
   12f78:	movw	r2, #44811	; 0xaf0b
   12f7c:	mov	r3, r0
   12f80:	str	r4, [sp]
   12f84:	mov	r0, #0
   12f88:	mov	r1, r5
   12f8c:	movt	r2, #1
   12f90:	bl	11814 <error@plt>
   12f94:	movw	r0, #49532	; 0xc17c
   12f98:	movt	r0, #2
   12f9c:	ldr	r0, [r0]
   12fa0:	bl	11724 <_exit@plt>
   12fa4:	push	{fp, lr}
   12fa8:	mov	fp, sp
   12fac:	bl	13004 <__assert_fail@plt+0x1568>
   12fb0:	cmp	r0, #0
   12fb4:	popne	{fp, pc}
   12fb8:	bl	19e14 <lchmod@@Base+0x3414>
   12fbc:	push	{r4, r5, r6, sl, fp, lr}
   12fc0:	add	fp, sp, #16
   12fc4:	mov	r5, r0
   12fc8:	mov	r4, r0
   12fcc:	ldrb	r6, [r5], #-1
   12fd0:	bl	19fac <lchmod@@Base+0x35ac>
   12fd4:	sub	r2, r0, r4
   12fd8:	sub	r0, r6, #47	; 0x2f
   12fdc:	clz	r0, r0
   12fe0:	lsr	r1, r0, #5
   12fe4:	mov	r0, r2
   12fe8:	cmp	r2, r1
   12fec:	bls	13000 <__assert_fail@plt+0x1564>
   12ff0:	ldrb	r3, [r5, r0]
   12ff4:	sub	r2, r0, #1
   12ff8:	cmp	r3, #47	; 0x2f
   12ffc:	beq	12fe4 <__assert_fail@plt+0x1548>
   13000:	pop	{r4, r5, r6, sl, fp, pc}
   13004:	push	{r4, r5, r6, sl, fp, lr}
   13008:	add	fp, sp, #16
   1300c:	mov	r6, r0
   13010:	mov	r4, r0
   13014:	ldrb	r5, [r6], #-1
   13018:	bl	19fac <lchmod@@Base+0x35ac>
   1301c:	sub	r1, r0, r4
   13020:	sub	r0, r5, #47	; 0x2f
   13024:	clz	r0, r0
   13028:	lsr	r0, r0, #5
   1302c:	mov	r5, r1
   13030:	cmp	r1, r0
   13034:	bls	13048 <__assert_fail@plt+0x15ac>
   13038:	ldrb	r2, [r6, r5]
   1303c:	sub	r1, r5, #1
   13040:	cmp	r2, #47	; 0x2f
   13044:	beq	1302c <__assert_fail@plt+0x1590>
   13048:	cmp	r5, #0
   1304c:	mov	r0, r5
   13050:	addeq	r0, r0, #1
   13054:	add	r0, r0, #1
   13058:	bl	19f28 <lchmod@@Base+0x3528>
   1305c:	mov	r6, r0
   13060:	cmp	r0, #0
   13064:	beq	13090 <__assert_fail@plt+0x15f4>
   13068:	mov	r0, r6
   1306c:	mov	r1, r4
   13070:	mov	r2, r5
   13074:	bl	11730 <memcpy@plt>
   13078:	cmp	r5, #0
   1307c:	moveq	r0, #46	; 0x2e
   13080:	moveq	r5, #1
   13084:	strbeq	r0, [r6]
   13088:	mov	r0, #0
   1308c:	strb	r0, [r6, r5]
   13090:	mov	r0, r6
   13094:	pop	{r4, r5, r6, sl, fp, pc}
   13098:	push	{r4, r5, r6, r7, fp, lr}
   1309c:	add	fp, sp, #16
   130a0:	cmp	r0, #0
   130a4:	beq	1310c <__assert_fail@plt+0x1670>
   130a8:	mov	r5, r0
   130ac:	mov	r0, #24
   130b0:	mov	r6, r2
   130b4:	mov	r7, r1
   130b8:	bl	198d8 <lchmod@@Base+0x2ed8>
   130bc:	mov	r4, r0
   130c0:	mov	r0, r7
   130c4:	bl	19ddc <lchmod@@Base+0x33dc>
   130c8:	str	r0, [r4]
   130cc:	ldrd	r0, [r6, #96]	; 0x60
   130d0:	str	r0, [r4, #8]
   130d4:	str	r1, [r4, #12]
   130d8:	ldrd	r0, [r6]
   130dc:	str	r1, [r4, #20]
   130e0:	str	r0, [r4, #16]
   130e4:	mov	r0, r5
   130e8:	mov	r1, r4
   130ec:	bl	16590 <__assert_fail@plt+0x4af4>
   130f0:	cmp	r0, #0
   130f4:	beq	13110 <__assert_fail@plt+0x1674>
   130f8:	cmp	r0, r4
   130fc:	beq	1310c <__assert_fail@plt+0x1670>
   13100:	mov	r0, r4
   13104:	pop	{r4, r5, r6, r7, fp, lr}
   13108:	b	16918 <__assert_fail@plt+0x4e7c>
   1310c:	pop	{r4, r5, r6, r7, fp, pc}
   13110:	bl	19e14 <lchmod@@Base+0x3414>
   13114:	cmp	r0, #0
   13118:	moveq	r0, #0
   1311c:	bxeq	lr
   13120:	push	{r4, r5, fp, lr}
   13124:	add	fp, sp, #8
   13128:	sub	sp, sp, #24
   1312c:	str	r1, [sp]
   13130:	mov	ip, sp
   13134:	mov	r1, sp
   13138:	ldrd	r4, [r2, #96]	; 0x60
   1313c:	add	r3, ip, #8
   13140:	add	ip, ip, #16
   13144:	strd	r4, [r3]
   13148:	ldrd	r2, [r2]
   1314c:	strd	r2, [ip]
   13150:	bl	15788 <__assert_fail@plt+0x3cec>
   13154:	cmp	r0, #0
   13158:	movwne	r0, #1
   1315c:	sub	sp, fp, #8
   13160:	pop	{r4, r5, fp, pc}
   13164:	push	{r4, r5, r6, sl, fp, lr}
   13168:	add	fp, sp, #16
   1316c:	mov	r4, r0
   13170:	bl	118ec <__errno_location@plt>
   13174:	ldr	r6, [r0]
   13178:	mov	r5, r0
   1317c:	mov	r0, r4
   13180:	bl	1170c <free@plt>
   13184:	str	r6, [r5]
   13188:	pop	{r4, r5, r6, sl, fp, pc}
   1318c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13190:	add	fp, sp, #28
   13194:	sub	sp, sp, #28
   13198:	cmp	r1, #4096	; 0x1000
   1319c:	bcs	131b8 <__assert_fail@plt+0x171c>
   131a0:	mov	r7, r0
   131a4:	and	r0, r1, #516	; 0x204
   131a8:	mov	r5, r1
   131ac:	cmp	r0, #516	; 0x204
   131b0:	tstne	r5, #18
   131b4:	bne	131d4 <__assert_fail@plt+0x1738>
   131b8:	bl	118ec <__errno_location@plt>
   131bc:	mov	r1, #22
   131c0:	mov	r4, #0
   131c4:	str	r1, [r0]
   131c8:	mov	r0, r4
   131cc:	sub	sp, fp, #28
   131d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d4:	mov	r0, #1
   131d8:	mov	r1, #96	; 0x60
   131dc:	mov	sl, r2
   131e0:	bl	19ed4 <lchmod@@Base+0x34d4>
   131e4:	cmp	r0, #0
   131e8:	beq	135f0 <__assert_fail@plt+0x1b54>
   131ec:	mov	r4, r0
   131f0:	mvn	r0, #99	; 0x63
   131f4:	tst	r5, #2
   131f8:	mov	r1, r5
   131fc:	str	r0, [r4, #32]
   13200:	bic	r0, r5, #516	; 0x204
   13204:	str	sl, [r4, #44]	; 0x2c
   13208:	str	r4, [sp, #24]
   1320c:	orrne	r1, r0, #4
   13210:	str	r1, [r4, #48]	; 0x30
   13214:	ldr	r0, [r7]
   13218:	cmp	r0, #0
   1321c:	beq	13254 <__assert_fail@plt+0x17b8>
   13220:	add	r6, r7, #4
   13224:	mov	r4, #0
   13228:	bl	118bc <strlen@plt>
   1322c:	cmp	r0, r4
   13230:	movhi	r4, r0
   13234:	ldr	r0, [r6], #4
   13238:	cmp	r0, #0
   1323c:	bne	13228 <__assert_fail@plt+0x178c>
   13240:	add	r0, r4, #1
   13244:	ldr	r4, [sp, #24]
   13248:	cmp	r0, #4096	; 0x1000
   1324c:	movls	r0, #4096	; 0x1000
   13250:	b	13258 <__assert_fail@plt+0x17bc>
   13254:	mov	r0, #4096	; 0x1000
   13258:	ldr	r1, [r4, #36]	; 0x24
   1325c:	add	r0, r0, #256	; 0x100
   13260:	adds	r1, r0, r1
   13264:	bcc	13288 <__assert_fail@plt+0x17ec>
   13268:	ldr	r0, [r4, #24]
   1326c:	bl	13164 <__assert_fail@plt+0x16c8>
   13270:	mov	r0, #0
   13274:	str	r0, [r4, #24]
   13278:	bl	118ec <__errno_location@plt>
   1327c:	mov	r1, #36	; 0x24
   13280:	str	r1, [r0]
   13284:	b	135e8 <__assert_fail@plt+0x1b4c>
   13288:	str	r1, [r4, #36]	; 0x24
   1328c:	ldr	r0, [r4, #24]
   13290:	bl	19f58 <lchmod@@Base+0x3558>
   13294:	cmp	r0, #0
   13298:	beq	1330c <__assert_fail@plt+0x1870>
   1329c:	str	r0, [r4, #24]
   132a0:	ldr	r0, [r7]
   132a4:	cmp	r0, #0
   132a8:	beq	13320 <__assert_fail@plt+0x1884>
   132ac:	mov	r0, #176	; 0xb0
   132b0:	bl	19f28 <lchmod@@Base+0x3528>
   132b4:	cmp	r0, #0
   132b8:	beq	135e0 <__assert_fail@plt+0x1b44>
   132bc:	ldr	r1, [r4, #24]
   132c0:	mov	r6, r0
   132c4:	mov	r0, #0
   132c8:	mov	r2, #196608	; 0x30000
   132cc:	strb	r0, [r6, #168]	; 0xa8
   132d0:	str	r2, [r6, #58]	; 0x3a
   132d4:	mvn	r2, #0
   132d8:	str	r4, [r6, #44]	; 0x2c
   132dc:	str	r2, [r6, #48]	; 0x30
   132e0:	str	r0, [r6, #52]	; 0x34
   132e4:	str	r0, [r6, #12]
   132e8:	str	r0, [r6, #16]
   132ec:	str	r0, [r6, #20]
   132f0:	str	r1, [r6, #28]
   132f4:	str	r0, [r6, #32]
   132f8:	cmp	sl, #0
   132fc:	beq	1332c <__assert_fail@plt+0x1890>
   13300:	ldrb	r0, [r4, #49]	; 0x31
   13304:	ubfx	r0, r0, #2, #1
   13308:	b	13330 <__assert_fail@plt+0x1894>
   1330c:	ldr	r0, [r4, #24]
   13310:	bl	13164 <__assert_fail@plt+0x16c8>
   13314:	mov	r0, #0
   13318:	str	r0, [r4, #24]
   1331c:	b	135e8 <__assert_fail@plt+0x1b4c>
   13320:	mov	r6, #0
   13324:	cmp	sl, #0
   13328:	bne	13300 <__assert_fail@plt+0x1864>
   1332c:	mov	r0, #1
   13330:	ldr	r4, [r7]
   13334:	cmp	r4, #0
   13338:	beq	134a4 <__assert_fail@plt+0x1a08>
   1333c:	eor	r0, r0, #1
   13340:	str	r6, [sp, #20]
   13344:	and	r1, r5, #2048	; 0x800
   13348:	mov	r9, #0
   1334c:	mov	r6, #0
   13350:	str	sl, [sp, #8]
   13354:	str	r0, [sp, #12]
   13358:	mov	r0, #0
   1335c:	str	r1, [sp, #16]
   13360:	str	r0, [sp, #4]
   13364:	b	13390 <__assert_fail@plt+0x18f4>
   13368:	cmp	r9, #0
   1336c:	str	r4, [r5, #8]
   13370:	beq	13498 <__assert_fail@plt+0x19fc>
   13374:	ldr	r0, [sp, #4]
   13378:	str	r5, [sp, #4]
   1337c:	str	r5, [r0, #8]
   13380:	ldr	r4, [r7, #4]!
   13384:	add	r6, r6, #1
   13388:	cmp	r4, #0
   1338c:	beq	134c0 <__assert_fail@plt+0x1a24>
   13390:	mov	r0, r4
   13394:	bl	118bc <strlen@plt>
   13398:	mov	r8, r0
   1339c:	ldr	r0, [sp, #16]
   133a0:	cmp	r0, #0
   133a4:	bne	133dc <__assert_fail@plt+0x1940>
   133a8:	cmp	r8, #3
   133ac:	bcc	133dc <__assert_fail@plt+0x1940>
   133b0:	add	r0, r8, r4
   133b4:	ldrb	r0, [r0, #-1]
   133b8:	cmp	r0, #47	; 0x2f
   133bc:	bne	133dc <__assert_fail@plt+0x1940>
   133c0:	sub	r0, r4, #2
   133c4:	ldrb	r1, [r0, r8]
   133c8:	cmp	r1, #47	; 0x2f
   133cc:	bne	133dc <__assert_fail@plt+0x1940>
   133d0:	sub	r8, r8, #1
   133d4:	cmp	r8, #1
   133d8:	bhi	133c4 <__assert_fail@plt+0x1928>
   133dc:	add	r0, r8, #176	; 0xb0
   133e0:	bic	r0, r0, #7
   133e4:	bl	19f28 <lchmod@@Base+0x3528>
   133e8:	cmp	r0, #0
   133ec:	beq	134b0 <__assert_fail@plt+0x1a14>
   133f0:	add	sl, r0, #168	; 0xa8
   133f4:	mov	r5, r0
   133f8:	mov	r1, r4
   133fc:	mov	r2, r8
   13400:	mov	r0, sl
   13404:	bl	11730 <memcpy@plt>
   13408:	ldr	r0, [sp, #24]
   1340c:	ldr	r2, [sp, #20]
   13410:	mov	r4, #0
   13414:	strb	r4, [sl, r8]
   13418:	str	r2, [r5, #4]
   1341c:	add	r2, r5, #44	; 0x2c
   13420:	ldr	r1, [r0, #24]
   13424:	stm	r2, {r0, r4, r8}
   13428:	mov	r2, #196608	; 0x30000
   1342c:	str	r2, [r5, #58]	; 0x3a
   13430:	ldr	r2, [sp, #12]
   13434:	str	r4, [r5, #12]
   13438:	str	r4, [r5, #16]
   1343c:	str	r4, [r5, #20]
   13440:	str	sl, [r5, #24]
   13444:	str	r1, [r5, #28]
   13448:	clz	r1, r9
   1344c:	str	r4, [r5, #32]
   13450:	lsr	r1, r1, #5
   13454:	orrs	r1, r2, r1
   13458:	bne	13470 <__assert_fail@plt+0x19d4>
   1345c:	mov	r0, #2
   13460:	str	r0, [r5, #112]	; 0x70
   13464:	str	r4, [r5, #116]	; 0x74
   13468:	mov	r0, #11
   1346c:	b	1347c <__assert_fail@plt+0x19e0>
   13470:	mov	r1, r5
   13474:	mov	r2, #0
   13478:	bl	13684 <__assert_fail@plt+0x1be8>
   1347c:	ldr	sl, [sp, #8]
   13480:	strh	r0, [r5, #56]	; 0x38
   13484:	cmp	sl, #0
   13488:	beq	13368 <__assert_fail@plt+0x18cc>
   1348c:	str	r9, [r5, #8]
   13490:	mov	r9, r5
   13494:	b	13380 <__assert_fail@plt+0x18e4>
   13498:	mov	r0, r5
   1349c:	str	r5, [sp, #4]
   134a0:	b	13490 <__assert_fail@plt+0x19f4>
   134a4:	ldr	r4, [sp, #24]
   134a8:	mov	r9, #0
   134ac:	b	134f4 <__assert_fail@plt+0x1a58>
   134b0:	ldr	r6, [sp, #20]
   134b4:	cmp	r9, #0
   134b8:	bne	135bc <__assert_fail@plt+0x1b20>
   134bc:	b	135d4 <__assert_fail@plt+0x1b38>
   134c0:	cmp	sl, #0
   134c4:	beq	134ec <__assert_fail@plt+0x1a50>
   134c8:	ldr	r4, [sp, #24]
   134cc:	cmp	r6, #2
   134d0:	bcc	134f0 <__assert_fail@plt+0x1a54>
   134d4:	mov	r0, r4
   134d8:	mov	r1, r9
   134dc:	mov	r2, r6
   134e0:	bl	1381c <__assert_fail@plt+0x1d80>
   134e4:	mov	r9, r0
   134e8:	b	134f0 <__assert_fail@plt+0x1a54>
   134ec:	ldr	r4, [sp, #24]
   134f0:	ldr	r6, [sp, #20]
   134f4:	mov	r0, #176	; 0xb0
   134f8:	bl	19f28 <lchmod@@Base+0x3528>
   134fc:	cmp	r0, #0
   13500:	beq	13594 <__assert_fail@plt+0x1af8>
   13504:	ldr	r2, [r4, #24]
   13508:	mov	r1, #0
   1350c:	mov	r3, #196608	; 0x30000
   13510:	str	r0, [r4]
   13514:	str	r1, [r0, #52]	; 0x34
   13518:	strb	r1, [r0, #168]	; 0xa8
   1351c:	str	r4, [r0, #44]	; 0x2c
   13520:	str	r3, [r0, #58]	; 0x3a
   13524:	str	r2, [r0, #28]
   13528:	mov	r2, #9
   1352c:	str	r1, [r0, #32]
   13530:	strh	r2, [r0, #56]	; 0x38
   13534:	str	r9, [r0, #8]
   13538:	str	r1, [r0, #12]
   1353c:	str	r1, [r0, #16]
   13540:	str	r1, [r0, #20]
   13544:	mov	r1, #1
   13548:	str	r1, [r0, #48]	; 0x30
   1354c:	ldrh	r0, [r4, #48]	; 0x30
   13550:	movw	r1, #258	; 0x102
   13554:	tst	r0, r1
   13558:	beq	135f8 <__assert_fail@plt+0x1b5c>
   1355c:	movw	r0, #12644	; 0x3164
   13560:	movw	r2, #21392	; 0x5390
   13564:	movw	r3, #21424	; 0x53b0
   13568:	mov	r1, #0
   1356c:	movt	r0, #1
   13570:	movt	r2, #1
   13574:	movt	r3, #1
   13578:	str	r0, [sp]
   1357c:	mov	r0, #31
   13580:	bl	15a3c <__assert_fail@plt+0x3fa0>
   13584:	cmp	r0, #0
   13588:	str	r0, [r4, #56]	; 0x38
   1358c:	bne	13610 <__assert_fail@plt+0x1b74>
   13590:	b	1359c <__assert_fail@plt+0x1b00>
   13594:	mov	r0, #0
   13598:	str	r0, [r4]
   1359c:	cmp	r9, #0
   135a0:	bne	135bc <__assert_fail@plt+0x1b20>
   135a4:	b	135d4 <__assert_fail@plt+0x1b38>
   135a8:	mov	r0, r9
   135ac:	bl	13164 <__assert_fail@plt+0x16c8>
   135b0:	cmp	r4, #0
   135b4:	mov	r9, r4
   135b8:	beq	135d4 <__assert_fail@plt+0x1b38>
   135bc:	ldrd	r4, [r9, #8]
   135c0:	cmp	r5, #0
   135c4:	beq	135a8 <__assert_fail@plt+0x1b0c>
   135c8:	mov	r0, r5
   135cc:	bl	11a78 <closedir@plt>
   135d0:	b	135a8 <__assert_fail@plt+0x1b0c>
   135d4:	mov	r0, r6
   135d8:	bl	13164 <__assert_fail@plt+0x16c8>
   135dc:	ldr	r4, [sp, #24]
   135e0:	ldr	r0, [r4, #24]
   135e4:	bl	13164 <__assert_fail@plt+0x16c8>
   135e8:	mov	r0, r4
   135ec:	bl	13164 <__assert_fail@plt+0x16c8>
   135f0:	mov	r4, #0
   135f4:	b	131c8 <__assert_fail@plt+0x172c>
   135f8:	mov	r0, #32
   135fc:	bl	19f28 <lchmod@@Base+0x3528>
   13600:	cmp	r0, #0
   13604:	str	r0, [r4, #56]	; 0x38
   13608:	beq	1359c <__assert_fail@plt+0x1b00>
   1360c:	bl	1a0b4 <lchmod@@Base+0x36b4>
   13610:	ldr	r4, [sp, #24]
   13614:	ldr	r0, [r4, #48]	; 0x30
   13618:	tst	r0, #516	; 0x204
   1361c:	bne	13674 <__assert_fail@plt+0x1bd8>
   13620:	mov	r1, #32768	; 0x8000
   13624:	tst	r0, #512	; 0x200
   13628:	and	r1, r1, r0, lsl #11
   1362c:	orr	r1, r1, #18688	; 0x4900
   13630:	orr	r2, r1, #524288	; 0x80000
   13634:	bne	1364c <__assert_fail@plt+0x1bb0>
   13638:	movw	r0, #44819	; 0xaf13
   1363c:	mov	r1, r2
   13640:	movt	r0, #1
   13644:	bl	1a420 <lchmod@@Base+0x3a20>
   13648:	b	1365c <__assert_fail@plt+0x1bc0>
   1364c:	ldr	r0, [r4, #32]
   13650:	movw	r1, #44819	; 0xaf13
   13654:	movt	r1, #1
   13658:	bl	170c0 <lchmod@@Base+0x6c0>
   1365c:	cmn	r0, #1
   13660:	str	r0, [r4, #28]
   13664:	bgt	13674 <__assert_fail@plt+0x1bd8>
   13668:	ldr	r0, [r4, #48]	; 0x30
   1366c:	orr	r0, r0, #4
   13670:	str	r0, [r4, #48]	; 0x30
   13674:	add	r0, r4, #60	; 0x3c
   13678:	mvn	r1, #0
   1367c:	bl	16938 <__assert_fail@plt+0x4e9c>
   13680:	b	131c8 <__assert_fail@plt+0x172c>
   13684:	push	{r4, r5, r6, sl, fp, lr}
   13688:	add	fp, sp, #16
   1368c:	sub	sp, sp, #8
   13690:	mov	r4, r1
   13694:	ldr	r1, [r0, #48]	; 0x30
   13698:	ldr	r3, [r4, #48]	; 0x30
   1369c:	add	r5, r4, #64	; 0x40
   136a0:	cmp	r3, #0
   136a4:	andeq	r3, r1, #1
   136a8:	orreq	r2, r3, r2
   136ac:	cmp	r2, #0
   136b0:	andseq	r1, r1, #2
   136b4:	beq	13710 <__assert_fail@plt+0x1c74>
   136b8:	ldr	r1, [r4, #24]
   136bc:	mov	r0, #3
   136c0:	mov	r2, r5
   136c4:	bl	11a24 <__xstat64@plt>
   136c8:	cmp	r0, #0
   136cc:	beq	13790 <__assert_fail@plt+0x1cf4>
   136d0:	bl	118ec <__errno_location@plt>
   136d4:	mov	r6, r0
   136d8:	ldr	r0, [r0]
   136dc:	cmp	r0, #2
   136e0:	bne	13740 <__assert_fail@plt+0x1ca4>
   136e4:	ldr	r1, [r4, #24]
   136e8:	mov	r0, #3
   136ec:	mov	r2, r5
   136f0:	bl	11a54 <__lxstat64@plt>
   136f4:	cmp	r0, #0
   136f8:	bne	1373c <__assert_fail@plt+0x1ca0>
   136fc:	mov	r0, #0
   13700:	str	r0, [r6]
   13704:	mov	r0, #13
   13708:	sub	sp, fp, #16
   1370c:	pop	{r4, r5, r6, sl, fp, pc}
   13710:	ldr	r1, [r0, #32]
   13714:	ldr	r2, [r4, #24]
   13718:	mov	r0, #256	; 0x100
   1371c:	mov	r3, r5
   13720:	str	r0, [sp]
   13724:	mov	r0, #3
   13728:	bl	1179c <__fxstatat64@plt>
   1372c:	cmp	r0, #0
   13730:	beq	13790 <__assert_fail@plt+0x1cf4>
   13734:	bl	118ec <__errno_location@plt>
   13738:	mov	r6, r0
   1373c:	ldr	r0, [r6]
   13740:	vmov.i32	q8, #0	; 0x00000000
   13744:	add	r1, r5, #80	; 0x50
   13748:	str	r0, [r4, #32]
   1374c:	mov	r0, #0
   13750:	str	r0, [r5, #96]	; 0x60
   13754:	vst1.64	{d16-d17}, [r1]
   13758:	add	r1, r5, #64	; 0x40
   1375c:	vst1.64	{d16-d17}, [r1]
   13760:	add	r1, r5, #48	; 0x30
   13764:	vst1.64	{d16-d17}, [r1]
   13768:	add	r1, r5, #32
   1376c:	vst1.64	{d16-d17}, [r1]
   13770:	add	r1, r5, #16
   13774:	vst1.64	{d16-d17}, [r1]
   13778:	mov	r1, #100	; 0x64
   1377c:	vst1.64	{d16-d17}, [r5], r1
   13780:	str	r0, [r5]
   13784:	mov	r0, #10
   13788:	sub	sp, fp, #16
   1378c:	pop	{r4, r5, r6, sl, fp, pc}
   13790:	ldr	r0, [r4, #80]	; 0x50
   13794:	and	r0, r0, #61440	; 0xf000
   13798:	cmp	r0, #40960	; 0xa000
   1379c:	beq	13804 <__assert_fail@plt+0x1d68>
   137a0:	cmp	r0, #32768	; 0x8000
   137a4:	beq	137f8 <__assert_fail@plt+0x1d5c>
   137a8:	cmp	r0, #16384	; 0x4000
   137ac:	bne	13810 <__assert_fail@plt+0x1d74>
   137b0:	ldrb	r1, [r4, #168]	; 0xa8
   137b4:	mov	r0, #1
   137b8:	cmp	r1, #46	; 0x2e
   137bc:	bne	13814 <__assert_fail@plt+0x1d78>
   137c0:	ldrb	r1, [r4, #169]	; 0xa9
   137c4:	cmp	r1, #0
   137c8:	beq	137e0 <__assert_fail@plt+0x1d44>
   137cc:	cmp	r1, #46	; 0x2e
   137d0:	bne	13814 <__assert_fail@plt+0x1d78>
   137d4:	ldrb	r1, [r4, #170]	; 0xaa
   137d8:	cmp	r1, #0
   137dc:	bne	13814 <__assert_fail@plt+0x1d78>
   137e0:	ldr	r1, [r4, #48]	; 0x30
   137e4:	mov	r0, #5
   137e8:	cmp	r1, #0
   137ec:	movweq	r0, #1
   137f0:	sub	sp, fp, #16
   137f4:	pop	{r4, r5, r6, sl, fp, pc}
   137f8:	mov	r0, #8
   137fc:	sub	sp, fp, #16
   13800:	pop	{r4, r5, r6, sl, fp, pc}
   13804:	mov	r0, #12
   13808:	sub	sp, fp, #16
   1380c:	pop	{r4, r5, r6, sl, fp, pc}
   13810:	mov	r0, #3
   13814:	sub	sp, fp, #16
   13818:	pop	{r4, r5, r6, sl, fp, pc}
   1381c:	push	{r4, r5, r6, r7, fp, lr}
   13820:	add	fp, sp, #16
   13824:	mov	r6, r0
   13828:	ldr	r7, [r0, #44]	; 0x2c
   1382c:	ldr	r0, [r0, #40]	; 0x28
   13830:	mov	r5, r2
   13834:	mov	r4, r1
   13838:	cmp	r0, r2
   1383c:	bcs	13874 <__assert_fail@plt+0x1dd8>
   13840:	add	r1, r5, #40	; 0x28
   13844:	cmn	r1, #-1073741823	; 0xc0000001
   13848:	str	r1, [r6, #40]	; 0x28
   1384c:	bhi	13918 <__assert_fail@plt+0x1e7c>
   13850:	ldr	r0, [r6, #8]
   13854:	lsl	r1, r1, #2
   13858:	bl	19f58 <lchmod@@Base+0x3558>
   1385c:	cmp	r0, #0
   13860:	beq	13918 <__assert_fail@plt+0x1e7c>
   13864:	str	r0, [r6, #8]
   13868:	cmp	r4, #0
   1386c:	bne	13880 <__assert_fail@plt+0x1de4>
   13870:	b	13894 <__assert_fail@plt+0x1df8>
   13874:	ldr	r0, [r6, #8]
   13878:	cmp	r4, #0
   1387c:	beq	13894 <__assert_fail@plt+0x1df8>
   13880:	str	r4, [r0], #4
   13884:	ldr	r4, [r4, #8]
   13888:	cmp	r4, #0
   1388c:	bne	13880 <__assert_fail@plt+0x1de4>
   13890:	ldr	r0, [r6, #8]
   13894:	mov	r1, r5
   13898:	mov	r2, #4
   1389c:	mov	r3, r7
   138a0:	bl	119d0 <qsort@plt>
   138a4:	ldr	r0, [r6, #8]
   138a8:	cmp	r5, #1
   138ac:	ldr	r4, [r0]
   138b0:	mov	r1, r4
   138b4:	beq	1393c <__assert_fail@plt+0x1ea0>
   138b8:	mov	r2, r0
   138bc:	ldr	r1, [r2, #4]!
   138c0:	str	r1, [r4, #8]
   138c4:	subs	r1, r5, #2
   138c8:	beq	13934 <__assert_fail@plt+0x1e98>
   138cc:	tst	r1, #1
   138d0:	beq	138e8 <__assert_fail@plt+0x1e4c>
   138d4:	ldr	r1, [r0, #8]!
   138d8:	ldr	r2, [r0, #-4]
   138dc:	str	r1, [r2, #8]
   138e0:	sub	r1, r5, #3
   138e4:	mov	r2, r0
   138e8:	cmp	r5, #3
   138ec:	beq	13938 <__assert_fail@plt+0x1e9c>
   138f0:	mov	r0, r2
   138f4:	ldm	r2, {r3, r7}
   138f8:	subs	r1, r1, #2
   138fc:	str	r7, [r3, #8]
   13900:	ldr	r3, [r0, #8]!
   13904:	ldr	r2, [r2, #4]
   13908:	str	r3, [r2, #8]
   1390c:	mov	r2, r0
   13910:	bne	138f4 <__assert_fail@plt+0x1e58>
   13914:	b	13938 <__assert_fail@plt+0x1e9c>
   13918:	ldr	r0, [r6, #8]
   1391c:	bl	13164 <__assert_fail@plt+0x16c8>
   13920:	mov	r0, #0
   13924:	str	r0, [r6, #40]	; 0x28
   13928:	str	r0, [r6, #8]
   1392c:	mov	r0, r4
   13930:	pop	{r4, r5, r6, r7, fp, pc}
   13934:	mov	r0, r2
   13938:	ldr	r1, [r0]
   1393c:	mov	r0, #0
   13940:	str	r0, [r1, #8]
   13944:	mov	r0, r4
   13948:	pop	{r4, r5, r6, r7, fp, pc}
   1394c:	push	{r4, r5, r6, r7, fp, lr}
   13950:	add	fp, sp, #16
   13954:	mov	r4, r0
   13958:	ldr	r0, [r0]
   1395c:	cmp	r0, #0
   13960:	beq	139a0 <__assert_fail@plt+0x1f04>
   13964:	ldr	r1, [r0, #48]	; 0x30
   13968:	cmp	r1, #0
   1396c:	bmi	13994 <__assert_fail@plt+0x1ef8>
   13970:	ldr	r5, [r0, #8]
   13974:	cmp	r5, #0
   13978:	ldreq	r5, [r0, #4]
   1397c:	bl	13164 <__assert_fail@plt+0x16c8>
   13980:	ldr	r0, [r5, #48]	; 0x30
   13984:	cmn	r0, #1
   13988:	mov	r0, r5
   1398c:	bgt	13970 <__assert_fail@plt+0x1ed4>
   13990:	b	13998 <__assert_fail@plt+0x1efc>
   13994:	mov	r5, r0
   13998:	mov	r0, r5
   1399c:	bl	13164 <__assert_fail@plt+0x16c8>
   139a0:	ldr	r5, [r4, #4]
   139a4:	cmp	r5, #0
   139a8:	bne	139c4 <__assert_fail@plt+0x1f28>
   139ac:	b	139dc <__assert_fail@plt+0x1f40>
   139b0:	mov	r0, r5
   139b4:	bl	13164 <__assert_fail@plt+0x16c8>
   139b8:	cmp	r6, #0
   139bc:	mov	r5, r6
   139c0:	beq	139dc <__assert_fail@plt+0x1f40>
   139c4:	ldrd	r6, [r5, #8]
   139c8:	cmp	r7, #0
   139cc:	beq	139b0 <__assert_fail@plt+0x1f14>
   139d0:	mov	r0, r7
   139d4:	bl	11a78 <closedir@plt>
   139d8:	b	139b0 <__assert_fail@plt+0x1f14>
   139dc:	ldr	r0, [r4, #8]
   139e0:	bl	13164 <__assert_fail@plt+0x16c8>
   139e4:	ldr	r0, [r4, #24]
   139e8:	bl	13164 <__assert_fail@plt+0x16c8>
   139ec:	ldr	r0, [r4, #48]	; 0x30
   139f0:	tst	r0, #512	; 0x200
   139f4:	bne	13a20 <__assert_fail@plt+0x1f84>
   139f8:	mov	r6, #0
   139fc:	tst	r0, #4
   13a00:	bne	13a64 <__assert_fail@plt+0x1fc8>
   13a04:	ldr	r0, [r4, #28]
   13a08:	bl	119c4 <fchdir@plt>
   13a0c:	cmp	r0, #0
   13a10:	beq	13a40 <__assert_fail@plt+0x1fa4>
   13a14:	bl	118ec <__errno_location@plt>
   13a18:	ldr	r6, [r0]
   13a1c:	b	13a44 <__assert_fail@plt+0x1fa8>
   13a20:	ldr	r0, [r4, #32]
   13a24:	mov	r6, #0
   13a28:	cmp	r0, #0
   13a2c:	bmi	13a64 <__assert_fail@plt+0x1fc8>
   13a30:	bl	11a48 <close@plt>
   13a34:	cmp	r0, #0
   13a38:	bne	13a5c <__assert_fail@plt+0x1fc0>
   13a3c:	b	13a64 <__assert_fail@plt+0x1fc8>
   13a40:	mov	r6, #0
   13a44:	ldr	r0, [r4, #28]
   13a48:	bl	11a48 <close@plt>
   13a4c:	cmp	r6, #0
   13a50:	bne	13a64 <__assert_fail@plt+0x1fc8>
   13a54:	cmp	r0, #0
   13a58:	beq	13a64 <__assert_fail@plt+0x1fc8>
   13a5c:	bl	118ec <__errno_location@plt>
   13a60:	ldr	r6, [r0]
   13a64:	add	r5, r4, #60	; 0x3c
   13a68:	mov	r0, r5
   13a6c:	bl	1695c <__assert_fail@plt+0x4ec0>
   13a70:	cmp	r0, #0
   13a74:	bne	13a90 <__assert_fail@plt+0x1ff4>
   13a78:	mov	r0, r5
   13a7c:	bl	169b0 <__assert_fail@plt+0x4f14>
   13a80:	cmp	r0, #0
   13a84:	bmi	13a68 <__assert_fail@plt+0x1fcc>
   13a88:	bl	11a48 <close@plt>
   13a8c:	b	13a68 <__assert_fail@plt+0x1fcc>
   13a90:	ldr	r0, [r4, #52]	; 0x34
   13a94:	cmp	r0, #0
   13a98:	beq	13aa0 <__assert_fail@plt+0x2004>
   13a9c:	bl	15d40 <__assert_fail@plt+0x42a4>
   13aa0:	ldrh	r0, [r4, #48]	; 0x30
   13aa4:	movw	r1, #258	; 0x102
   13aa8:	tst	r0, r1
   13aac:	beq	13ac4 <__assert_fail@plt+0x2028>
   13ab0:	ldr	r0, [r4, #56]	; 0x38
   13ab4:	cmp	r0, #0
   13ab8:	beq	13acc <__assert_fail@plt+0x2030>
   13abc:	bl	15d40 <__assert_fail@plt+0x42a4>
   13ac0:	b	13acc <__assert_fail@plt+0x2030>
   13ac4:	ldr	r0, [r4, #56]	; 0x38
   13ac8:	bl	13164 <__assert_fail@plt+0x16c8>
   13acc:	mov	r0, r4
   13ad0:	bl	13164 <__assert_fail@plt+0x16c8>
   13ad4:	cmp	r6, #0
   13ad8:	beq	13aec <__assert_fail@plt+0x2050>
   13adc:	bl	118ec <__errno_location@plt>
   13ae0:	str	r6, [r0]
   13ae4:	mvn	r0, #0
   13ae8:	pop	{r4, r5, r6, r7, fp, pc}
   13aec:	mov	r0, #0
   13af0:	pop	{r4, r5, r6, r7, fp, pc}
   13af4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13af8:	add	fp, sp, #24
   13afc:	sub	sp, sp, #8
   13b00:	ldr	r6, [r0]
   13b04:	mov	r5, #0
   13b08:	cmp	r6, #0
   13b0c:	beq	1424c <__assert_fail@plt+0x27b0>
   13b10:	mov	r4, r0
   13b14:	ldr	r0, [r0, #48]	; 0x30
   13b18:	tst	r0, #8192	; 0x2000
   13b1c:	bne	1424c <__assert_fail@plt+0x27b0>
   13b20:	ldrh	r1, [r6, #60]	; 0x3c
   13b24:	mov	r2, #3
   13b28:	strh	r2, [r6, #60]	; 0x3c
   13b2c:	cmp	r1, #1
   13b30:	beq	13ba0 <__assert_fail@plt+0x2104>
   13b34:	cmp	r1, #2
   13b38:	bne	13bbc <__assert_fail@plt+0x2120>
   13b3c:	ldrh	r2, [r6, #56]	; 0x38
   13b40:	bic	r3, r2, #1
   13b44:	cmp	r3, #12
   13b48:	bne	13bc0 <__assert_fail@plt+0x2124>
   13b4c:	mov	r0, r4
   13b50:	mov	r1, r6
   13b54:	mov	r2, #1
   13b58:	bl	13684 <__assert_fail@plt+0x1be8>
   13b5c:	cmp	r0, #1
   13b60:	strh	r0, [r6, #56]	; 0x38
   13b64:	bne	13cb0 <__assert_fail@plt+0x2214>
   13b68:	ldr	r0, [r4, #48]	; 0x30
   13b6c:	tst	r0, #4
   13b70:	bne	13cb0 <__assert_fail@plt+0x2214>
   13b74:	mov	r1, #32768	; 0x8000
   13b78:	tst	r0, #512	; 0x200
   13b7c:	and	r1, r1, r0, lsl #11
   13b80:	orr	r1, r1, #18688	; 0x4900
   13b84:	orr	r2, r1, #524288	; 0x80000
   13b88:	bne	13e94 <__assert_fail@plt+0x23f8>
   13b8c:	movw	r0, #44819	; 0xaf13
   13b90:	mov	r1, r2
   13b94:	movt	r0, #1
   13b98:	bl	1a420 <lchmod@@Base+0x3a20>
   13b9c:	b	13ea4 <__assert_fail@plt+0x2408>
   13ba0:	mov	r0, r4
   13ba4:	mov	r1, r6
   13ba8:	mov	r2, #0
   13bac:	bl	13684 <__assert_fail@plt+0x1be8>
   13bb0:	strh	r0, [r6, #56]	; 0x38
   13bb4:	mov	r5, r6
   13bb8:	b	1424c <__assert_fail@plt+0x27b0>
   13bbc:	ldrh	r2, [r6, #56]	; 0x38
   13bc0:	cmp	r2, #1
   13bc4:	bne	13c20 <__assert_fail@plt+0x2184>
   13bc8:	cmp	r1, #4
   13bcc:	bne	13cb8 <__assert_fail@plt+0x221c>
   13bd0:	ldrb	r0, [r6, #58]	; 0x3a
   13bd4:	tst	r0, #2
   13bd8:	beq	13be4 <__assert_fail@plt+0x2148>
   13bdc:	ldr	r0, [r6, #36]	; 0x24
   13be0:	bl	11a48 <close@plt>
   13be4:	ldr	r5, [r4, #4]
   13be8:	cmp	r5, #0
   13bec:	bne	13c08 <__assert_fail@plt+0x216c>
   13bf0:	b	13d50 <__assert_fail@plt+0x22b4>
   13bf4:	mov	r0, r5
   13bf8:	bl	13164 <__assert_fail@plt+0x16c8>
   13bfc:	cmp	r8, #0
   13c00:	mov	r5, r8
   13c04:	beq	13d48 <__assert_fail@plt+0x22ac>
   13c08:	ldrd	r8, [r5, #8]
   13c0c:	cmp	r9, #0
   13c10:	beq	13bf4 <__assert_fail@plt+0x2158>
   13c14:	mov	r0, r9
   13c18:	bl	11a78 <closedir@plt>
   13c1c:	b	13bf4 <__assert_fail@plt+0x2158>
   13c20:	ldr	r5, [r6, #8]
   13c24:	cmp	r5, #0
   13c28:	beq	13d6c <__assert_fail@plt+0x22d0>
   13c2c:	mov	r0, r6
   13c30:	str	r5, [r4]
   13c34:	bl	13164 <__assert_fail@plt+0x16c8>
   13c38:	ldr	r0, [r5, #48]	; 0x30
   13c3c:	cmp	r0, #0
   13c40:	beq	13db8 <__assert_fail@plt+0x231c>
   13c44:	ldrh	r0, [r5, #60]	; 0x3c
   13c48:	mov	r6, r5
   13c4c:	cmp	r0, #4
   13c50:	beq	13c20 <__assert_fail@plt+0x2184>
   13c54:	cmp	r0, #2
   13c58:	bne	14114 <__assert_fail@plt+0x2678>
   13c5c:	mov	r0, r4
   13c60:	mov	r1, r5
   13c64:	mov	r2, #1
   13c68:	bl	13684 <__assert_fail@plt+0x1be8>
   13c6c:	cmp	r0, #1
   13c70:	strh	r0, [r5, #56]	; 0x38
   13c74:	bne	1410c <__assert_fail@plt+0x2670>
   13c78:	ldr	r0, [r4, #48]	; 0x30
   13c7c:	tst	r0, #4
   13c80:	bne	1410c <__assert_fail@plt+0x2670>
   13c84:	mov	r1, #32768	; 0x8000
   13c88:	tst	r0, #512	; 0x200
   13c8c:	and	r1, r1, r0, lsl #11
   13c90:	orr	r1, r1, #18688	; 0x4900
   13c94:	orr	r2, r1, #524288	; 0x80000
   13c98:	bne	140cc <__assert_fail@plt+0x2630>
   13c9c:	movw	r0, #44819	; 0xaf13
   13ca0:	mov	r1, r2
   13ca4:	movt	r0, #1
   13ca8:	bl	1a420 <lchmod@@Base+0x3a20>
   13cac:	b	140dc <__assert_fail@plt+0x2640>
   13cb0:	mov	r5, r6
   13cb4:	b	14150 <__assert_fail@plt+0x26b4>
   13cb8:	tst	r0, #64	; 0x40
   13cbc:	beq	13cd8 <__assert_fail@plt+0x223c>
   13cc0:	ldrd	r2, [r4, #16]
   13cc4:	ldrd	r8, [r6, #64]	; 0x40
   13cc8:	eor	r1, r9, r3
   13ccc:	eor	r2, r8, r2
   13cd0:	orrs	r1, r2, r1
   13cd4:	bne	13bd0 <__assert_fail@plt+0x2134>
   13cd8:	ldr	r5, [r4, #4]
   13cdc:	cmp	r5, #0
   13ce0:	beq	13e3c <__assert_fail@plt+0x23a0>
   13ce4:	tst	r0, #4096	; 0x1000
   13ce8:	bne	13dfc <__assert_fail@plt+0x2360>
   13cec:	ldr	r3, [r6, #24]
   13cf0:	mov	r0, r4
   13cf4:	mov	r1, r6
   13cf8:	mvn	r2, #0
   13cfc:	bl	14338 <__assert_fail@plt+0x289c>
   13d00:	cmp	r0, #0
   13d04:	beq	13e54 <__assert_fail@plt+0x23b8>
   13d08:	bl	118ec <__errno_location@plt>
   13d0c:	ldr	r0, [r0]
   13d10:	str	r0, [r6, #32]
   13d14:	ldrh	r0, [r6, #58]	; 0x3a
   13d18:	orr	r0, r0, #1
   13d1c:	strh	r0, [r6, #58]	; 0x3a
   13d20:	ldr	r0, [r4, #4]
   13d24:	cmp	r0, #0
   13d28:	beq	13e54 <__assert_fail@plt+0x23b8>
   13d2c:	ldmib	r0, {r1, r2}
   13d30:	cmp	r2, #0
   13d34:	ldr	r1, [r1, #24]
   13d38:	str	r1, [r0, #24]
   13d3c:	mov	r0, r2
   13d40:	bne	13d2c <__assert_fail@plt+0x2290>
   13d44:	b	13e54 <__assert_fail@plt+0x23b8>
   13d48:	mov	r0, #0
   13d4c:	str	r0, [r4, #4]
   13d50:	mov	r0, #6
   13d54:	strh	r0, [r6, #56]	; 0x38
   13d58:	mov	r0, r4
   13d5c:	mov	r1, r6
   13d60:	bl	1425c <__assert_fail@plt+0x27c0>
   13d64:	mov	r5, r6
   13d68:	b	1424c <__assert_fail@plt+0x27b0>
   13d6c:	ldr	r5, [r6, #4]
   13d70:	ldr	r0, [r5, #12]
   13d74:	cmp	r0, #0
   13d78:	beq	13ed4 <__assert_fail@plt+0x2438>
   13d7c:	str	r5, [r4]
   13d80:	ldr	r1, [r5, #40]	; 0x28
   13d84:	ldr	r0, [r4, #24]
   13d88:	mov	r5, #0
   13d8c:	strb	r5, [r0, r1]
   13d90:	mov	r0, r4
   13d94:	mov	r1, #3
   13d98:	bl	14598 <__assert_fail@plt+0x2afc>
   13d9c:	cmp	r0, #0
   13da0:	beq	13ec4 <__assert_fail@plt+0x2428>
   13da4:	mov	r7, r0
   13da8:	mov	r0, r6
   13dac:	bl	13164 <__assert_fail@plt+0x16c8>
   13db0:	mov	r5, r7
   13db4:	b	14114 <__assert_fail@plt+0x2678>
   13db8:	mov	r0, r4
   13dbc:	bl	15028 <__assert_fail@plt+0x358c>
   13dc0:	ldr	r1, [r4, #48]	; 0x30
   13dc4:	cmp	r0, #0
   13dc8:	beq	13ddc <__assert_fail@plt+0x2340>
   13dcc:	orr	r0, r1, #8192	; 0x2000
   13dd0:	mov	r5, #0
   13dd4:	str	r0, [r4, #48]	; 0x30
   13dd8:	b	1424c <__assert_fail@plt+0x27b0>
   13ddc:	movw	r0, #258	; 0x102
   13de0:	tst	r1, r0
   13de4:	beq	13f84 <__assert_fail@plt+0x24e8>
   13de8:	ldr	r0, [r4, #56]	; 0x38
   13dec:	cmp	r0, #0
   13df0:	beq	13f8c <__assert_fail@plt+0x24f0>
   13df4:	bl	15d40 <__assert_fail@plt+0x42a4>
   13df8:	b	13f8c <__assert_fail@plt+0x24f0>
   13dfc:	bic	r0, r0, #4096	; 0x1000
   13e00:	str	r0, [r4, #48]	; 0x30
   13e04:	b	13e1c <__assert_fail@plt+0x2380>
   13e08:	mov	r0, r5
   13e0c:	bl	13164 <__assert_fail@plt+0x16c8>
   13e10:	cmp	r8, #0
   13e14:	mov	r5, r8
   13e18:	beq	13e34 <__assert_fail@plt+0x2398>
   13e1c:	ldrd	r8, [r5, #8]
   13e20:	cmp	r9, #0
   13e24:	beq	13e08 <__assert_fail@plt+0x236c>
   13e28:	mov	r0, r9
   13e2c:	bl	11a78 <closedir@plt>
   13e30:	b	13e08 <__assert_fail@plt+0x236c>
   13e34:	mov	r0, #0
   13e38:	str	r0, [r4, #4]
   13e3c:	mov	r0, r4
   13e40:	mov	r1, #3
   13e44:	bl	14598 <__assert_fail@plt+0x2afc>
   13e48:	cmp	r0, #0
   13e4c:	str	r0, [r4, #4]
   13e50:	beq	13e64 <__assert_fail@plt+0x23c8>
   13e54:	ldr	r5, [r4, #4]
   13e58:	mov	r0, #0
   13e5c:	str	r0, [r4, #4]
   13e60:	b	14114 <__assert_fail@plt+0x2678>
   13e64:	ldrb	r0, [r4, #49]	; 0x31
   13e68:	mov	r5, #0
   13e6c:	tst	r0, #32
   13e70:	bne	1424c <__assert_fail@plt+0x27b0>
   13e74:	ldr	r0, [r6, #32]
   13e78:	cmp	r0, #0
   13e7c:	beq	13d58 <__assert_fail@plt+0x22bc>
   13e80:	ldrh	r0, [r6, #56]	; 0x38
   13e84:	cmp	r0, #4
   13e88:	beq	13d58 <__assert_fail@plt+0x22bc>
   13e8c:	mov	r0, #7
   13e90:	b	13d54 <__assert_fail@plt+0x22b8>
   13e94:	ldr	r0, [r4, #32]
   13e98:	movw	r1, #44819	; 0xaf13
   13e9c:	movt	r1, #1
   13ea0:	bl	170c0 <lchmod@@Base+0x6c0>
   13ea4:	cmn	r0, #1
   13ea8:	str	r0, [r6, #36]	; 0x24
   13eac:	ble	13f68 <__assert_fail@plt+0x24cc>
   13eb0:	ldrh	r0, [r6, #58]	; 0x3a
   13eb4:	mov	r5, r6
   13eb8:	orr	r0, r0, #2
   13ebc:	strh	r0, [r6, #58]	; 0x3a
   13ec0:	b	14150 <__assert_fail@plt+0x26b4>
   13ec4:	ldrb	r0, [r4, #49]	; 0x31
   13ec8:	tst	r0, #32
   13ecc:	bne	1424c <__assert_fail@plt+0x27b0>
   13ed0:	ldr	r5, [r6, #4]
   13ed4:	mov	r0, r6
   13ed8:	str	r5, [r4]
   13edc:	bl	13164 <__assert_fail@plt+0x16c8>
   13ee0:	ldr	r0, [r5, #48]	; 0x30
   13ee4:	cmn	r0, #1
   13ee8:	beq	13f4c <__assert_fail@plt+0x24b0>
   13eec:	ldrh	r0, [r5, #56]	; 0x38
   13ef0:	cmp	r0, #11
   13ef4:	beq	14258 <__assert_fail@plt+0x27bc>
   13ef8:	ldr	r0, [r5, #40]	; 0x28
   13efc:	ldr	r1, [r4, #24]
   13f00:	mov	r2, #0
   13f04:	strb	r2, [r1, r0]
   13f08:	ldr	r0, [r5, #48]	; 0x30
   13f0c:	cmp	r0, #0
   13f10:	beq	1405c <__assert_fail@plt+0x25c0>
   13f14:	ldrh	r0, [r5, #58]	; 0x3a
   13f18:	tst	r0, #2
   13f1c:	bne	14088 <__assert_fail@plt+0x25ec>
   13f20:	tst	r0, #1
   13f24:	bne	14210 <__assert_fail@plt+0x2774>
   13f28:	ldr	r1, [r5, #4]
   13f2c:	movw	r3, #44818	; 0xaf12
   13f30:	mov	r0, r4
   13f34:	mvn	r2, #0
   13f38:	movt	r3, #1
   13f3c:	bl	14338 <__assert_fail@plt+0x289c>
   13f40:	cmp	r0, #0
   13f44:	bne	1406c <__assert_fail@plt+0x25d0>
   13f48:	b	14210 <__assert_fail@plt+0x2774>
   13f4c:	mov	r0, r5
   13f50:	bl	13164 <__assert_fail@plt+0x16c8>
   13f54:	bl	118ec <__errno_location@plt>
   13f58:	mov	r5, #0
   13f5c:	str	r5, [r0]
   13f60:	str	r5, [r4]
   13f64:	b	1424c <__assert_fail@plt+0x27b0>
   13f68:	bl	118ec <__errno_location@plt>
   13f6c:	ldr	r0, [r0]
   13f70:	mov	r1, #7
   13f74:	mov	r5, r6
   13f78:	strh	r1, [r6, #56]	; 0x38
   13f7c:	str	r0, [r6, #32]
   13f80:	b	14150 <__assert_fail@plt+0x26b4>
   13f84:	ldr	r0, [r4, #56]	; 0x38
   13f88:	bl	13164 <__assert_fail@plt+0x16c8>
   13f8c:	ldr	r1, [r5, #52]	; 0x34
   13f90:	add	r6, r5, #168	; 0xa8
   13f94:	str	r1, [r5, #40]	; 0x28
   13f98:	add	r2, r1, #1
   13f9c:	mov	r1, r6
   13fa0:	ldr	r0, [r4, #24]
   13fa4:	bl	11700 <memmove@plt>
   13fa8:	mov	r0, r6
   13fac:	mov	r1, #47	; 0x2f
   13fb0:	bl	1197c <strrchr@plt>
   13fb4:	cmp	r0, #0
   13fb8:	beq	13ff4 <__assert_fail@plt+0x2558>
   13fbc:	cmp	r0, r6
   13fc0:	bne	13fd0 <__assert_fail@plt+0x2534>
   13fc4:	ldrb	r1, [r5, #169]	; 0xa9
   13fc8:	cmp	r1, #0
   13fcc:	beq	13ff4 <__assert_fail@plt+0x2558>
   13fd0:	add	r7, r0, #1
   13fd4:	mov	r0, r7
   13fd8:	bl	118bc <strlen@plt>
   13fdc:	mov	r8, r0
   13fe0:	add	r2, r0, #1
   13fe4:	mov	r0, r6
   13fe8:	mov	r1, r7
   13fec:	bl	11700 <memmove@plt>
   13ff0:	str	r8, [r5, #52]	; 0x34
   13ff4:	ldr	r0, [r4, #24]
   13ff8:	movw	r1, #258	; 0x102
   13ffc:	str	r0, [r5, #24]
   14000:	str	r0, [r5, #28]
   14004:	ldrh	r0, [r4, #48]	; 0x30
   14008:	tst	r0, r1
   1400c:	beq	14040 <__assert_fail@plt+0x25a4>
   14010:	movw	r0, #12644	; 0x3164
   14014:	movw	r2, #21392	; 0x5390
   14018:	movw	r3, #21424	; 0x53b0
   1401c:	mov	r1, #0
   14020:	movt	r0, #1
   14024:	movt	r2, #1
   14028:	movt	r3, #1
   1402c:	str	r0, [sp]
   14030:	mov	r0, #31
   14034:	bl	15a3c <__assert_fail@plt+0x3fa0>
   14038:	str	r0, [r4, #56]	; 0x38
   1403c:	b	14150 <__assert_fail@plt+0x26b4>
   14040:	mov	r0, #32
   14044:	bl	19f28 <lchmod@@Base+0x3528>
   14048:	cmp	r0, #0
   1404c:	str	r0, [r4, #56]	; 0x38
   14050:	beq	14150 <__assert_fail@plt+0x26b4>
   14054:	bl	1a0b4 <lchmod@@Base+0x36b4>
   14058:	b	14150 <__assert_fail@plt+0x26b4>
   1405c:	mov	r0, r4
   14060:	bl	15028 <__assert_fail@plt+0x358c>
   14064:	cmp	r0, #0
   14068:	beq	14210 <__assert_fail@plt+0x2774>
   1406c:	bl	118ec <__errno_location@plt>
   14070:	ldr	r0, [r0]
   14074:	str	r0, [r5, #32]
   14078:	ldr	r0, [r4, #48]	; 0x30
   1407c:	orr	r0, r0, #8192	; 0x2000
   14080:	str	r0, [r4, #48]	; 0x30
   14084:	b	14210 <__assert_fail@plt+0x2774>
   14088:	ldr	r0, [r4, #48]	; 0x30
   1408c:	tst	r0, #4
   14090:	bne	14208 <__assert_fail@plt+0x276c>
   14094:	ldr	r6, [r5, #36]	; 0x24
   14098:	tst	r0, #512	; 0x200
   1409c:	bne	141dc <__assert_fail@plt+0x2740>
   140a0:	mov	r0, r6
   140a4:	bl	119c4 <fchdir@plt>
   140a8:	cmp	r0, #0
   140ac:	beq	14208 <__assert_fail@plt+0x276c>
   140b0:	bl	118ec <__errno_location@plt>
   140b4:	ldr	r0, [r0]
   140b8:	str	r0, [r5, #32]
   140bc:	ldr	r0, [r4, #48]	; 0x30
   140c0:	orr	r0, r0, #8192	; 0x2000
   140c4:	str	r0, [r4, #48]	; 0x30
   140c8:	b	14208 <__assert_fail@plt+0x276c>
   140cc:	ldr	r0, [r4, #32]
   140d0:	movw	r1, #44819	; 0xaf13
   140d4:	movt	r1, #1
   140d8:	bl	170c0 <lchmod@@Base+0x6c0>
   140dc:	cmn	r0, #1
   140e0:	str	r0, [r5, #36]	; 0x24
   140e4:	ble	140f8 <__assert_fail@plt+0x265c>
   140e8:	ldrh	r0, [r5, #58]	; 0x3a
   140ec:	orr	r0, r0, #2
   140f0:	strh	r0, [r5, #58]	; 0x3a
   140f4:	b	1410c <__assert_fail@plt+0x2670>
   140f8:	bl	118ec <__errno_location@plt>
   140fc:	ldr	r0, [r0]
   14100:	mov	r1, #7
   14104:	strh	r1, [r5, #56]	; 0x38
   14108:	str	r0, [r5, #32]
   1410c:	mov	r0, #3
   14110:	strh	r0, [r5, #60]	; 0x3c
   14114:	ldr	r0, [r5, #4]
   14118:	ldr	r1, [r0, #28]
   1411c:	ldr	r0, [r0, #40]	; 0x28
   14120:	sub	r2, r0, #1
   14124:	ldrb	r1, [r1, r2]
   14128:	cmp	r1, #47	; 0x2f
   1412c:	ldr	r1, [r4, #24]
   14130:	moveq	r0, r2
   14134:	mov	r2, #47	; 0x2f
   14138:	strb	r2, [r1, r0]!
   1413c:	ldr	r2, [r5, #52]	; 0x34
   14140:	add	r0, r1, #1
   14144:	add	r1, r5, #168	; 0xa8
   14148:	add	r2, r2, #1
   1414c:	bl	11700 <memmove@plt>
   14150:	str	r5, [r4]
   14154:	ldrh	r0, [r5, #56]	; 0x38
   14158:	cmp	r0, #11
   1415c:	bne	14194 <__assert_fail@plt+0x26f8>
   14160:	add	r0, r5, #112	; 0x70
   14164:	ldrd	r0, [r0]
   14168:	eor	r2, r0, #1
   1416c:	orrs	r2, r2, r1
   14170:	beq	1424c <__assert_fail@plt+0x27b0>
   14174:	eor	r0, r0, #2
   14178:	orrs	r0, r0, r1
   1417c:	bne	14258 <__assert_fail@plt+0x27bc>
   14180:	mov	r0, r4
   14184:	mov	r1, r5
   14188:	mov	r2, #0
   1418c:	bl	13684 <__assert_fail@plt+0x1be8>
   14190:	strh	r0, [r5, #56]	; 0x38
   14194:	cmp	r0, #1
   14198:	bne	1424c <__assert_fail@plt+0x27b0>
   1419c:	ldr	r0, [r5, #48]	; 0x30
   141a0:	cmp	r0, #0
   141a4:	bne	141b4 <__assert_fail@plt+0x2718>
   141a8:	add	r0, r5, #64	; 0x40
   141ac:	ldrd	r0, [r0]
   141b0:	strd	r0, [r4, #16]
   141b4:	mov	r0, r4
   141b8:	mov	r1, r5
   141bc:	bl	150b8 <__assert_fail@plt+0x361c>
   141c0:	cmp	r0, #0
   141c4:	bne	1424c <__assert_fail@plt+0x27b0>
   141c8:	bl	118ec <__errno_location@plt>
   141cc:	mov	r1, #12
   141d0:	mov	r5, #0
   141d4:	str	r1, [r0]
   141d8:	b	1424c <__assert_fail@plt+0x27b0>
   141dc:	ldr	r1, [r4, #32]
   141e0:	cmp	r1, r6
   141e4:	bne	141f0 <__assert_fail@plt+0x2754>
   141e8:	cmn	r1, #100	; 0x64
   141ec:	bne	14258 <__assert_fail@plt+0x27bc>
   141f0:	add	r0, r4, #60	; 0x3c
   141f4:	bl	16964 <__assert_fail@plt+0x4ec8>
   141f8:	cmp	r0, #0
   141fc:	bmi	14204 <__assert_fail@plt+0x2768>
   14200:	bl	11a48 <close@plt>
   14204:	str	r6, [r4, #32]
   14208:	ldr	r0, [r5, #36]	; 0x24
   1420c:	bl	11a48 <close@plt>
   14210:	ldrh	r0, [r5, #56]	; 0x38
   14214:	cmp	r0, #2
   14218:	beq	14240 <__assert_fail@plt+0x27a4>
   1421c:	ldr	r0, [r5, #32]
   14220:	mov	r1, #7
   14224:	cmp	r0, #0
   14228:	movweq	r1, #6
   1422c:	strh	r1, [r5, #56]	; 0x38
   14230:	bne	14240 <__assert_fail@plt+0x27a4>
   14234:	mov	r0, r4
   14238:	mov	r1, r5
   1423c:	bl	1425c <__assert_fail@plt+0x27c0>
   14240:	ldrb	r0, [r4, #49]	; 0x31
   14244:	tst	r0, #32
   14248:	movne	r5, #0
   1424c:	mov	r0, r5
   14250:	sub	sp, fp, #24
   14254:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14258:	bl	11a3c <abort@plt>
   1425c:	push	{r4, r5, r7, sl, fp, lr}
   14260:	add	fp, sp, #16
   14264:	sub	sp, sp, #24
   14268:	ldrh	r2, [r0, #48]	; 0x30
   1426c:	movw	r3, #258	; 0x102
   14270:	add	lr, r1, #64	; 0x40
   14274:	add	r4, r1, #160	; 0xa0
   14278:	tst	r2, r3
   1427c:	beq	142b4 <__assert_fail@plt+0x2818>
   14280:	ldrd	r2, [lr]
   14284:	mov	r1, sp
   14288:	stm	sp, {r2, r3}
   1428c:	ldrd	r2, [r4]
   14290:	str	r3, [sp, #12]
   14294:	str	r2, [sp, #8]
   14298:	ldr	r0, [r0, #56]	; 0x38
   1429c:	bl	165d0 <__assert_fail@plt+0x4b34>
   142a0:	cmp	r0, #0
   142a4:	beq	14334 <__assert_fail@plt+0x2898>
   142a8:	bl	13164 <__assert_fail@plt+0x16c8>
   142ac:	sub	sp, fp, #16
   142b0:	pop	{r4, r5, r7, sl, fp, pc}
   142b4:	ldr	r1, [r1, #4]
   142b8:	cmp	r1, #0
   142bc:	beq	1432c <__assert_fail@plt+0x2890>
   142c0:	ldr	r2, [r1, #48]	; 0x30
   142c4:	cmp	r2, #0
   142c8:	bmi	1432c <__assert_fail@plt+0x2890>
   142cc:	ldr	ip, [r0, #56]	; 0x38
   142d0:	ldrd	r2, [ip, #16]
   142d4:	orrs	r2, r2, r3
   142d8:	beq	14334 <__assert_fail@plt+0x2898>
   142dc:	ldrd	r2, [r4]
   142e0:	ldrd	r4, [ip]
   142e4:	eor	r3, r5, r3
   142e8:	eor	r2, r4, r2
   142ec:	orrs	r2, r2, r3
   142f0:	bne	1432c <__assert_fail@plt+0x2890>
   142f4:	add	r3, ip, #8
   142f8:	ldm	lr, {r2, r5}
   142fc:	ldm	r3, {r4, r7}
   14300:	eor	r7, r7, r5
   14304:	eor	r2, r4, r2
   14308:	orrs	r2, r2, r7
   1430c:	bne	1432c <__assert_fail@plt+0x2890>
   14310:	add	r2, r1, #64	; 0x40
   14314:	add	r1, r1, #160	; 0xa0
   14318:	ldm	r2, {r2, r5}
   1431c:	stm	r3, {r2, r5}
   14320:	ldr	r0, [r0, #56]	; 0x38
   14324:	ldrd	r2, [r1]
   14328:	strd	r2, [r0]
   1432c:	sub	sp, fp, #16
   14330:	pop	{r4, r5, r7, sl, fp, pc}
   14334:	bl	11a3c <abort@plt>
   14338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1433c:	add	fp, sp, #28
   14340:	sub	sp, sp, #108	; 0x6c
   14344:	mov	r7, r3
   14348:	mov	r4, r2
   1434c:	mov	r8, r1
   14350:	mov	sl, r0
   14354:	cmp	r3, #0
   14358:	beq	1437c <__assert_fail@plt+0x28e0>
   1435c:	movw	r1, #44818	; 0xaf12
   14360:	mov	r0, r7
   14364:	movt	r1, #1
   14368:	bl	116d0 <strcmp@plt>
   1436c:	cmp	r0, #0
   14370:	mov	r6, r0
   14374:	movwne	r6, #1
   14378:	b	14380 <__assert_fail@plt+0x28e4>
   1437c:	mov	r6, #1
   14380:	ldr	r0, [sl, #48]	; 0x30
   14384:	tst	r0, #4
   14388:	bne	143e0 <__assert_fail@plt+0x2944>
   1438c:	cmn	r4, #1
   14390:	mov	r1, #0
   14394:	mov	r9, #0
   14398:	movwgt	r1, #1
   1439c:	orrs	r1, r1, r6
   143a0:	bne	14400 <__assert_fail@plt+0x2964>
   143a4:	ands	r0, r0, #512	; 0x200
   143a8:	beq	14400 <__assert_fail@plt+0x2964>
   143ac:	add	r4, sl, #60	; 0x3c
   143b0:	mov	r0, r4
   143b4:	bl	1695c <__assert_fail@plt+0x4ec0>
   143b8:	cmp	r0, #0
   143bc:	bne	14408 <__assert_fail@plt+0x296c>
   143c0:	mov	r0, r4
   143c4:	bl	169b0 <__assert_fail@plt+0x4f14>
   143c8:	cmn	r0, #1
   143cc:	ble	14408 <__assert_fail@plt+0x296c>
   143d0:	mov	r4, r0
   143d4:	mov	r9, #0
   143d8:	mov	r7, #0
   143dc:	b	14450 <__assert_fail@plt+0x29b4>
   143e0:	mov	r5, #0
   143e4:	cmp	r4, #0
   143e8:	bmi	14588 <__assert_fail@plt+0x2aec>
   143ec:	ands	r0, r0, #512	; 0x200
   143f0:	beq	14588 <__assert_fail@plt+0x2aec>
   143f4:	mov	r0, r4
   143f8:	bl	11a48 <close@plt>
   143fc:	b	14588 <__assert_fail@plt+0x2aec>
   14400:	cmn	r4, #1
   14404:	bgt	14450 <__assert_fail@plt+0x29b4>
   14408:	ldr	r0, [sl, #48]	; 0x30
   1440c:	mov	r1, #32768	; 0x8000
   14410:	and	r1, r1, r0, lsl #11
   14414:	tst	r0, #512	; 0x200
   14418:	orr	r1, r1, #18688	; 0x4900
   1441c:	orr	r2, r1, #524288	; 0x80000
   14420:	bne	14434 <__assert_fail@plt+0x2998>
   14424:	mov	r0, r7
   14428:	mov	r1, r2
   1442c:	bl	1a420 <lchmod@@Base+0x3a20>
   14430:	b	14440 <__assert_fail@plt+0x29a4>
   14434:	ldr	r0, [sl, #32]
   14438:	mov	r1, r7
   1443c:	bl	170c0 <lchmod@@Base+0x6c0>
   14440:	mov	r4, r0
   14444:	mov	r9, #1
   14448:	cmp	r0, #0
   1444c:	bmi	1452c <__assert_fail@plt+0x2a90>
   14450:	ldr	r5, [sl, #48]	; 0x30
   14454:	tst	r5, #2
   14458:	bne	1449c <__assert_fail@plt+0x2a00>
   1445c:	cmp	r7, #0
   14460:	beq	1447c <__assert_fail@plt+0x29e0>
   14464:	movw	r1, #44818	; 0xaf12
   14468:	mov	r0, r7
   1446c:	movt	r1, #1
   14470:	bl	116d0 <strcmp@plt>
   14474:	cmp	r0, #0
   14478:	beq	1449c <__assert_fail@plt+0x2a00>
   1447c:	tst	r5, #512	; 0x200
   14480:	bne	144fc <__assert_fail@plt+0x2a60>
   14484:	mov	r0, r4
   14488:	bl	119c4 <fchdir@plt>
   1448c:	mov	r5, r0
   14490:	cmp	r9, #0
   14494:	bne	1454c <__assert_fail@plt+0x2ab0>
   14498:	b	14588 <__assert_fail@plt+0x2aec>
   1449c:	mov	r2, sp
   144a0:	mov	r0, #3
   144a4:	mov	r1, r4
   144a8:	bl	117b4 <__fxstat64@plt>
   144ac:	cmp	r0, #0
   144b0:	bne	14540 <__assert_fail@plt+0x2aa4>
   144b4:	add	r0, r8, #64	; 0x40
   144b8:	ldm	sp, {r2, r3}
   144bc:	ldrd	r0, [r0]
   144c0:	eor	r1, r1, r3
   144c4:	eor	r0, r0, r2
   144c8:	orrs	r0, r0, r1
   144cc:	bne	14534 <__assert_fail@plt+0x2a98>
   144d0:	add	r0, r8, #160	; 0xa0
   144d4:	ldr	r2, [sp, #96]	; 0x60
   144d8:	ldr	r3, [sp, #100]	; 0x64
   144dc:	ldrd	r0, [r0]
   144e0:	eor	r1, r1, r3
   144e4:	eor	r0, r0, r2
   144e8:	orrs	r0, r0, r1
   144ec:	bne	14534 <__assert_fail@plt+0x2a98>
   144f0:	ldr	r5, [sl, #48]	; 0x30
   144f4:	tst	r5, #512	; 0x200
   144f8:	beq	14484 <__assert_fail@plt+0x29e8>
   144fc:	ldr	r1, [sl, #32]
   14500:	cmp	r1, r4
   14504:	bne	14510 <__assert_fail@plt+0x2a74>
   14508:	cmn	r1, #100	; 0x64
   1450c:	bne	14594 <__assert_fail@plt+0x2af8>
   14510:	cmp	r6, #0
   14514:	beq	14568 <__assert_fail@plt+0x2acc>
   14518:	add	r0, sl, #60	; 0x3c
   1451c:	bl	16964 <__assert_fail@plt+0x4ec8>
   14520:	cmp	r0, #0
   14524:	bpl	1457c <__assert_fail@plt+0x2ae0>
   14528:	b	14580 <__assert_fail@plt+0x2ae4>
   1452c:	mvn	r5, #0
   14530:	b	14588 <__assert_fail@plt+0x2aec>
   14534:	bl	118ec <__errno_location@plt>
   14538:	mov	r1, #2
   1453c:	str	r1, [r0]
   14540:	mvn	r5, #0
   14544:	cmp	r9, #0
   14548:	beq	14588 <__assert_fail@plt+0x2aec>
   1454c:	bl	118ec <__errno_location@plt>
   14550:	ldr	r7, [r0]
   14554:	mov	r6, r0
   14558:	mov	r0, r4
   1455c:	bl	11a48 <close@plt>
   14560:	str	r7, [r6]
   14564:	b	14588 <__assert_fail@plt+0x2aec>
   14568:	tst	r5, #4
   1456c:	bne	14580 <__assert_fail@plt+0x2ae4>
   14570:	cmp	r1, #0
   14574:	bmi	14580 <__assert_fail@plt+0x2ae4>
   14578:	mov	r0, r1
   1457c:	bl	11a48 <close@plt>
   14580:	str	r4, [sl, #32]
   14584:	mov	r5, #0
   14588:	mov	r0, r5
   1458c:	sub	sp, fp, #28
   14590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14594:	bl	11a3c <abort@plt>
   14598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1459c:	add	fp, sp, #28
   145a0:	sub	sp, sp, #68	; 0x44
   145a4:	ldr	sl, [r0]
   145a8:	mov	r7, r1
   145ac:	mov	r5, r0
   145b0:	str	r0, [sp, #48]	; 0x30
   145b4:	ldr	r4, [sl, #12]
   145b8:	cmp	r4, #0
   145bc:	beq	14604 <__assert_fail@plt+0x2b68>
   145c0:	mov	r0, r4
   145c4:	bl	119b8 <dirfd@plt>
   145c8:	cmn	r0, #1
   145cc:	str	r0, [fp, #-32]	; 0xffffffe0
   145d0:	ble	14638 <__assert_fail@plt+0x2b9c>
   145d4:	mov	r1, r5
   145d8:	str	r4, [sp, #12]
   145dc:	str	r7, [sp, #4]
   145e0:	mov	ip, #0
   145e4:	ldr	r0, [r1, #44]!	; 0x2c
   145e8:	str	r1, [sp, #20]
   145ec:	mvn	r1, #0
   145f0:	cmp	r0, #0
   145f4:	movweq	r1, #34464	; 0x86a0
   145f8:	movteq	r1, #1
   145fc:	str	r1, [sp, #32]
   14600:	b	14888 <__assert_fail@plt+0x2dec>
   14604:	ldr	r3, [r5, #48]	; 0x30
   14608:	mvn	r0, #99	; 0x63
   1460c:	mov	r2, #0
   14610:	and	r1, r3, #516	; 0x204
   14614:	cmp	r1, #512	; 0x200
   14618:	ldr	r1, [sl, #24]
   1461c:	ldreq	r0, [r5, #32]
   14620:	tst	r3, #16
   14624:	beq	14660 <__assert_fail@plt+0x2bc4>
   14628:	tst	r3, #1
   1462c:	bne	14654 <__assert_fail@plt+0x2bb8>
   14630:	mov	r2, #32768	; 0x8000
   14634:	b	14660 <__assert_fail@plt+0x2bc4>
   14638:	ldr	r0, [sl, #12]
   1463c:	bl	11a78 <closedir@plt>
   14640:	mov	r6, #0
   14644:	str	r6, [sl, #12]
   14648:	cmp	r7, #3
   1464c:	beq	146a4 <__assert_fail@plt+0x2c08>
   14650:	b	1501c <__assert_fail@plt+0x3580>
   14654:	ldr	r3, [sl, #48]	; 0x30
   14658:	cmp	r3, #0
   1465c:	movne	r2, #32768	; 0x8000
   14660:	sub	r3, fp, #32
   14664:	bl	170f8 <lchmod@@Base+0x6f8>
   14668:	cmp	r0, #0
   1466c:	str	r0, [sl, #12]
   14670:	beq	14698 <__assert_fail@plt+0x2bfc>
   14674:	ldrh	r0, [sl, #56]	; 0x38
   14678:	cmp	r0, #11
   1467c:	bne	146bc <__assert_fail@plt+0x2c20>
   14680:	mov	r0, r5
   14684:	mov	r1, sl
   14688:	mov	r2, #0
   1468c:	bl	13684 <__assert_fail@plt+0x1be8>
   14690:	strh	r0, [sl, #56]	; 0x38
   14694:	b	146fc <__assert_fail@plt+0x2c60>
   14698:	mov	r6, #0
   1469c:	cmp	r7, #3
   146a0:	bne	1501c <__assert_fail@plt+0x3580>
   146a4:	mov	r0, #4
   146a8:	strh	r0, [sl, #56]	; 0x38
   146ac:	bl	118ec <__errno_location@plt>
   146b0:	ldr	r0, [r0]
   146b4:	str	r0, [sl, #32]
   146b8:	b	1501c <__assert_fail@plt+0x3580>
   146bc:	ldrb	r0, [r5, #49]	; 0x31
   146c0:	tst	r0, #1
   146c4:	beq	146fc <__assert_fail@plt+0x2c60>
   146c8:	mov	r0, r5
   146cc:	mov	r1, sl
   146d0:	bl	1425c <__assert_fail@plt+0x27c0>
   146d4:	mov	r0, r5
   146d8:	mov	r1, sl
   146dc:	mov	r2, #0
   146e0:	mov	r6, #0
   146e4:	bl	13684 <__assert_fail@plt+0x1be8>
   146e8:	mov	r0, r5
   146ec:	mov	r1, sl
   146f0:	bl	150b8 <__assert_fail@plt+0x361c>
   146f4:	cmp	r0, #0
   146f8:	beq	147a0 <__assert_fail@plt+0x2d04>
   146fc:	mov	r1, r5
   14700:	str	r7, [sp, #4]
   14704:	str	r4, [sp, #12]
   14708:	ldr	r0, [r1, #44]!	; 0x2c
   1470c:	str	r1, [sp, #20]
   14710:	mvn	r1, #0
   14714:	cmp	r0, #0
   14718:	movweq	r1, #34464	; 0x86a0
   1471c:	movteq	r1, #1
   14720:	cmp	r7, #2
   14724:	str	r1, [sp, #32]
   14728:	bne	14744 <__assert_fail@plt+0x2ca8>
   1472c:	mov	ip, #1
   14730:	cmp	r7, #3
   14734:	bne	14888 <__assert_fail@plt+0x2dec>
   14738:	sub	r0, r7, #3
   1473c:	mov	r5, #0
   14740:	b	147cc <__assert_fail@plt+0x2d30>
   14744:	ldr	r0, [r5, #48]	; 0x30
   14748:	and	r0, r0, #56	; 0x38
   1474c:	cmp	r0, #24
   14750:	bne	147c4 <__assert_fail@plt+0x2d28>
   14754:	ldr	r0, [sl, #84]	; 0x54
   14758:	cmp	r0, #2
   1475c:	bne	147c4 <__assert_fail@plt+0x2d28>
   14760:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14764:	mov	r0, sl
   14768:	bl	15430 <__assert_fail@plt+0x3994>
   1476c:	movw	r1, #26984	; 0x6968
   14770:	cmp	r0, r1
   14774:	ble	147b0 <__assert_fail@plt+0x2d14>
   14778:	movw	r1, #26985	; 0x6969
   1477c:	cmp	r0, r1
   14780:	movwne	r1, #16719	; 0x414f
   14784:	movtne	r1, #21318	; 0x5346
   14788:	cmpne	r0, r1
   1478c:	beq	147c4 <__assert_fail@plt+0x2d28>
   14790:	movw	r1, #40864	; 0x9fa0
   14794:	cmp	r0, r1
   14798:	beq	147c4 <__assert_fail@plt+0x2d28>
   1479c:	b	1472c <__assert_fail@plt+0x2c90>
   147a0:	bl	118ec <__errno_location@plt>
   147a4:	mov	r1, #12
   147a8:	str	r1, [r0]
   147ac:	b	1501c <__assert_fail@plt+0x3580>
   147b0:	movw	r1, #19778	; 0x4d42
   147b4:	movt	r1, #65363	; 0xff53
   147b8:	cmp	r0, r1
   147bc:	cmpne	r0, #0
   147c0:	bne	1472c <__assert_fail@plt+0x2c90>
   147c4:	sub	r0, r7, #3
   147c8:	mov	r5, #1
   147cc:	clz	r0, r0
   147d0:	lsr	r6, r0, #5
   147d4:	ldr	r0, [sp, #48]	; 0x30
   147d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   147dc:	ldrb	r0, [r0, #49]	; 0x31
   147e0:	tst	r0, #2
   147e4:	beq	14800 <__assert_fail@plt+0x2d64>
   147e8:	mov	r0, r2
   147ec:	movw	r1, #1030	; 0x406
   147f0:	mov	r2, #3
   147f4:	bl	1a240 <lchmod@@Base+0x3840>
   147f8:	mov	r2, r0
   147fc:	str	r0, [fp, #-32]	; 0xffffffe0
   14800:	cmp	r2, #0
   14804:	bmi	14820 <__assert_fail@plt+0x2d84>
   14808:	ldr	r0, [sp, #48]	; 0x30
   1480c:	mov	r1, sl
   14810:	mov	r3, #0
   14814:	bl	14338 <__assert_fail@plt+0x289c>
   14818:	cmp	r0, #0
   1481c:	beq	14880 <__assert_fail@plt+0x2de4>
   14820:	and	r0, r6, r5
   14824:	cmp	r0, #1
   14828:	bne	14838 <__assert_fail@plt+0x2d9c>
   1482c:	bl	118ec <__errno_location@plt>
   14830:	ldr	r0, [r0]
   14834:	str	r0, [sl, #32]
   14838:	ldrh	r0, [sl, #58]	; 0x3a
   1483c:	orr	r0, r0, #1
   14840:	strh	r0, [sl, #58]	; 0x3a
   14844:	ldr	r0, [sl, #12]
   14848:	bl	11a78 <closedir@plt>
   1484c:	ldr	r5, [sp, #48]	; 0x30
   14850:	mov	r4, #0
   14854:	str	r4, [sl, #12]
   14858:	ldrb	r0, [r5, #49]	; 0x31
   1485c:	tst	r0, #2
   14860:	beq	14874 <__assert_fail@plt+0x2dd8>
   14864:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14868:	cmp	r0, #0
   1486c:	bmi	14874 <__assert_fail@plt+0x2dd8>
   14870:	bl	11a48 <close@plt>
   14874:	mov	ip, #1
   14878:	str	r4, [sl, #12]
   1487c:	b	14888 <__assert_fail@plt+0x2dec>
   14880:	ldr	r5, [sp, #48]	; 0x30
   14884:	mov	ip, #0
   14888:	ldr	r0, [sl, #40]	; 0x28
   1488c:	ldr	r1, [sl, #28]
   14890:	mov	r9, #0
   14894:	sub	r2, r0, #1
   14898:	ldrb	r1, [r1, r2]
   1489c:	cmp	r1, #47	; 0x2f
   148a0:	ldrb	r1, [r5, #48]	; 0x30
   148a4:	moveq	r0, r2
   148a8:	tst	r1, #4
   148ac:	mov	r1, #0
   148b0:	str	r1, [sp, #40]	; 0x28
   148b4:	beq	148cc <__assert_fail@plt+0x2e30>
   148b8:	ldr	r1, [r5, #24]
   148bc:	mov	r2, #47	; 0x2f
   148c0:	strb	r2, [r1, r0]!
   148c4:	add	r1, r1, #1
   148c8:	str	r1, [sp, #40]	; 0x28
   148cc:	ldr	r6, [sl, #12]
   148d0:	add	r1, r0, #1
   148d4:	str	r1, [fp, #-44]	; 0xffffffd4
   148d8:	cmp	r6, #0
   148dc:	beq	14c3c <__assert_fail@plt+0x31a0>
   148e0:	ldr	r0, [sl, #48]	; 0x30
   148e4:	str	ip, [sp]
   148e8:	mov	r4, #0
   148ec:	add	r0, r0, #1
   148f0:	str	r0, [sp, #24]
   148f4:	ldr	r0, [r5, #36]	; 0x24
   148f8:	sub	r0, r0, r1
   148fc:	str	r0, [fp, #-36]	; 0xffffffdc
   14900:	bl	118ec <__errno_location@plt>
   14904:	str	r0, [sp, #36]	; 0x24
   14908:	mov	r0, #0
   1490c:	mov	r9, #0
   14910:	mov	r7, #0
   14914:	str	sl, [sp, #28]
   14918:	str	r0, [sp, #44]	; 0x2c
   1491c:	mov	r0, #0
   14920:	str	r0, [sp, #8]
   14924:	mov	r0, #0
   14928:	str	r0, [sp, #16]
   1492c:	ldr	r0, [sp, #36]	; 0x24
   14930:	str	r4, [r0]
   14934:	mov	r0, r6
   14938:	bl	11994 <readdir64@plt>
   1493c:	cmp	r0, #0
   14940:	beq	14c48 <__assert_fail@plt+0x31ac>
   14944:	mov	r8, r0
   14948:	ldrb	r0, [r5, #48]	; 0x30
   1494c:	tst	r0, #32
   14950:	bne	14980 <__assert_fail@plt+0x2ee4>
   14954:	ldrb	r0, [r8, #19]
   14958:	cmp	r0, #46	; 0x2e
   1495c:	bne	14980 <__assert_fail@plt+0x2ee4>
   14960:	ldrb	r0, [r8, #20]
   14964:	cmp	r0, #0
   14968:	beq	14c18 <__assert_fail@plt+0x317c>
   1496c:	cmp	r0, #46	; 0x2e
   14970:	bne	14980 <__assert_fail@plt+0x2ee4>
   14974:	ldrb	r0, [r8, #21]
   14978:	cmp	r0, #0
   1497c:	beq	14c18 <__assert_fail@plt+0x317c>
   14980:	add	r4, r8, #19
   14984:	mov	r0, r4
   14988:	bl	118bc <strlen@plt>
   1498c:	mov	r5, r0
   14990:	add	r0, r0, #176	; 0xb0
   14994:	bic	r0, r0, #7
   14998:	bl	19f28 <lchmod@@Base+0x3528>
   1499c:	mov	r6, r0
   149a0:	cmp	r0, #0
   149a4:	beq	14fa4 <__assert_fail@plt+0x3508>
   149a8:	add	sl, r6, #168	; 0xa8
   149ac:	mov	r1, r4
   149b0:	mov	r2, r5
   149b4:	str	r7, [fp, #-40]	; 0xffffffd8
   149b8:	mov	r0, sl
   149bc:	bl	11730 <memcpy@plt>
   149c0:	ldr	r2, [sp, #48]	; 0x30
   149c4:	mov	r0, #0
   149c8:	mov	r1, #196608	; 0x30000
   149cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   149d0:	strb	r0, [sl, r5]
   149d4:	str	r5, [r6, #52]	; 0x34
   149d8:	str	r2, [r6, #44]	; 0x2c
   149dc:	add	r7, r5, r3
   149e0:	ldr	r4, [r2, #24]
   149e4:	str	r0, [r6, #12]
   149e8:	str	r0, [r6, #16]
   149ec:	str	r0, [r6, #20]
   149f0:	str	r1, [r6, #58]	; 0x3a
   149f4:	str	r4, [r6, #28]
   149f8:	str	r0, [r6, #32]
   149fc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14a00:	cmp	r5, r0
   14a04:	bcs	14a18 <__assert_fail@plt+0x2f7c>
   14a08:	mov	r5, r2
   14a0c:	cmp	r7, r3
   14a10:	bcs	14a88 <__assert_fail@plt+0x2fec>
   14a14:	b	14e94 <__assert_fail@plt+0x33f8>
   14a18:	ldr	r1, [r2, #36]	; 0x24
   14a1c:	movw	r0, #257	; 0x101
   14a20:	mov	r5, r2
   14a24:	add	r0, r7, r0
   14a28:	adds	r1, r0, r1
   14a2c:	bcs	14f70 <__assert_fail@plt+0x34d4>
   14a30:	mov	r0, r4
   14a34:	str	r1, [r5, #36]	; 0x24
   14a38:	bl	19f58 <lchmod@@Base+0x3558>
   14a3c:	cmp	r0, #0
   14a40:	beq	14f90 <__assert_fail@plt+0x34f4>
   14a44:	cmp	r0, r4
   14a48:	str	r0, [r5, #24]
   14a4c:	beq	14a74 <__assert_fail@plt+0x2fd8>
   14a50:	ldrb	r1, [r5, #48]	; 0x30
   14a54:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14a58:	tst	r1, #4
   14a5c:	ldr	r1, [sp, #40]	; 0x28
   14a60:	addne	r1, r0, r3
   14a64:	mov	r0, #1
   14a68:	str	r1, [sp, #40]	; 0x28
   14a6c:	str	r0, [sp, #16]
   14a70:	b	14a78 <__assert_fail@plt+0x2fdc>
   14a74:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14a78:	ldr	r0, [r5, #36]	; 0x24
   14a7c:	sub	r0, r0, r3
   14a80:	cmp	r7, r3
   14a84:	bcc	14e94 <__assert_fail@plt+0x33f8>
   14a88:	str	r0, [fp, #-36]	; 0xffffffdc
   14a8c:	ldr	r0, [sp, #24]
   14a90:	add	r4, r6, #112	; 0x70
   14a94:	str	r0, [r6, #48]	; 0x30
   14a98:	ldr	r0, [r5]
   14a9c:	str	r7, [r6, #40]	; 0x28
   14aa0:	str	r0, [r6, #4]
   14aa4:	ldrd	r0, [r8]
   14aa8:	strd	r0, [r4, #48]	; 0x30
   14aac:	ldrb	r0, [r5, #48]	; 0x30
   14ab0:	tst	r0, #4
   14ab4:	bne	14ac0 <__assert_fail@plt+0x3024>
   14ab8:	str	sl, [r6, #24]
   14abc:	b	14adc <__assert_fail@plt+0x3040>
   14ac0:	ldr	r0, [r6, #28]
   14ac4:	ldr	r1, [r6, #52]	; 0x34
   14ac8:	str	r0, [r6, #24]
   14acc:	ldr	r0, [sp, #40]	; 0x28
   14ad0:	add	r2, r1, #1
   14ad4:	mov	r1, sl
   14ad8:	bl	11700 <memmove@plt>
   14adc:	ldr	r0, [r5, #44]	; 0x2c
   14ae0:	ldr	r7, [fp, #-40]	; 0xffffffd8
   14ae4:	ldr	r2, [r5, #48]	; 0x30
   14ae8:	ldr	sl, [sp, #28]
   14aec:	cmp	r0, #0
   14af0:	beq	14b14 <__assert_fail@plt+0x3078>
   14af4:	ands	r0, r2, #1024	; 0x400
   14af8:	bne	14b14 <__assert_fail@plt+0x3078>
   14afc:	mov	r0, r5
   14b00:	mov	r1, r6
   14b04:	mov	r2, #0
   14b08:	bl	13684 <__assert_fail@plt+0x1be8>
   14b0c:	strh	r0, [r6, #56]	; 0x38
   14b10:	b	14b88 <__assert_fail@plt+0x30ec>
   14b14:	ldrb	r3, [r8, #18]
   14b18:	mov	r0, #0
   14b1c:	tst	r2, #8
   14b20:	mov	r1, #0
   14b24:	beq	14b48 <__assert_fail@plt+0x30ac>
   14b28:	orr	r1, r3, #4
   14b2c:	cmp	r1, #4
   14b30:	mov	r1, #0
   14b34:	beq	14b48 <__assert_fail@plt+0x30ac>
   14b38:	eor	r1, r3, #10
   14b3c:	and	r2, r2, #16
   14b40:	orrs	r1, r2, r1
   14b44:	movwne	r1, #1
   14b48:	mov	r2, #11
   14b4c:	strh	r2, [r6, #56]	; 0x38
   14b50:	sub	r2, r3, #1
   14b54:	uxtb	r3, r2
   14b58:	cmp	r3, #11
   14b5c:	bhi	14b70 <__assert_fail@plt+0x30d4>
   14b60:	sxtb	r0, r2
   14b64:	movw	r2, #44824	; 0xaf18
   14b68:	movt	r2, #1
   14b6c:	ldr	r0, [r2, r0, lsl #2]
   14b70:	cmp	r1, #0
   14b74:	str	r0, [r6, #80]	; 0x50
   14b78:	mov	r0, #2
   14b7c:	mov	r1, #0
   14b80:	movwne	r0, #1
   14b84:	strd	r0, [r4]
   14b88:	mov	r4, #0
   14b8c:	cmp	r9, #0
   14b90:	str	r4, [r6, #8]
   14b94:	beq	14ba4 <__assert_fail@plt+0x3108>
   14b98:	ldr	r0, [sp, #44]	; 0x2c
   14b9c:	str	r6, [r0, #8]
   14ba0:	b	14ba8 <__assert_fail@plt+0x310c>
   14ba4:	mov	r9, r6
   14ba8:	movw	r0, #10000	; 0x2710
   14bac:	cmp	r7, r0
   14bb0:	bne	14c04 <__assert_fail@plt+0x3168>
   14bb4:	ldr	r0, [sp, #20]
   14bb8:	ldr	r0, [r0]
   14bbc:	cmp	r0, #0
   14bc0:	bne	14c04 <__assert_fail@plt+0x3168>
   14bc4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14bc8:	mov	r0, sl
   14bcc:	bl	15430 <__assert_fail@plt+0x3994>
   14bd0:	mov	r1, #0
   14bd4:	str	r1, [sp, #8]
   14bd8:	movw	r1, #19778	; 0x4d42
   14bdc:	movt	r1, #65363	; 0xff53
   14be0:	cmp	r0, r1
   14be4:	movwne	r1, #26985	; 0x6969
   14be8:	cmpne	r0, r1
   14bec:	beq	14c04 <__assert_fail@plt+0x3168>
   14bf0:	movw	r1, #6548	; 0x1994
   14bf4:	movt	r1, #258	; 0x102
   14bf8:	cmp	r0, r1
   14bfc:	movne	r0, #1
   14c00:	strne	r0, [sp, #8]
   14c04:	ldr	r0, [sp, #32]
   14c08:	add	r7, r7, #1
   14c0c:	cmp	r0, r7
   14c10:	bls	14c24 <__assert_fail@plt+0x3188>
   14c14:	str	r6, [sp, #44]	; 0x2c
   14c18:	ldr	r6, [sl, #12]
   14c1c:	cmp	r6, #0
   14c20:	bne	1492c <__assert_fail@plt+0x2e90>
   14c24:	ldr	r0, [sp, #16]
   14c28:	ldr	ip, [sp]
   14c2c:	ldr	r4, [sp, #8]
   14c30:	tst	r0, #1
   14c34:	bne	14c9c <__assert_fail@plt+0x3200>
   14c38:	b	14d3c <__assert_fail@plt+0x32a0>
   14c3c:	mov	r7, #0
   14c40:	mov	r4, #0
   14c44:	b	14d3c <__assert_fail@plt+0x32a0>
   14c48:	ldr	r0, [sp, #36]	; 0x24
   14c4c:	ldr	r0, [r0]
   14c50:	cmp	r0, #0
   14c54:	beq	14c70 <__assert_fail@plt+0x31d4>
   14c58:	str	r0, [sl, #32]
   14c5c:	ldr	r0, [sp, #12]
   14c60:	orrs	r0, r0, r7
   14c64:	mov	r0, #4
   14c68:	movwne	r0, #7
   14c6c:	strh	r0, [sl, #56]	; 0x38
   14c70:	ldr	r0, [sl, #12]
   14c74:	ldr	r4, [sp, #8]
   14c78:	cmp	r0, #0
   14c7c:	beq	14c8c <__assert_fail@plt+0x31f0>
   14c80:	bl	11a78 <closedir@plt>
   14c84:	mov	r0, #0
   14c88:	str	r0, [sl, #12]
   14c8c:	ldr	r0, [sp, #16]
   14c90:	ldr	ip, [sp]
   14c94:	tst	r0, #1
   14c98:	beq	14d3c <__assert_fail@plt+0x32a0>
   14c9c:	ldr	r1, [r5, #4]
   14ca0:	ldr	r0, [r5, #24]
   14ca4:	cmp	r1, #0
   14ca8:	bne	14cc0 <__assert_fail@plt+0x3224>
   14cac:	b	14ce4 <__assert_fail@plt+0x3248>
   14cb0:	str	r0, [r1, #28]
   14cb4:	ldr	r1, [r1, #8]
   14cb8:	cmp	r1, #0
   14cbc:	beq	14ce4 <__assert_fail@plt+0x3248>
   14cc0:	ldr	r2, [r1, #24]
   14cc4:	add	r3, r1, #168	; 0xa8
   14cc8:	cmp	r2, r3
   14ccc:	beq	14cb0 <__assert_fail@plt+0x3214>
   14cd0:	ldr	r3, [r1, #28]
   14cd4:	sub	r2, r2, r3
   14cd8:	add	r2, r0, r2
   14cdc:	str	r2, [r1, #24]
   14ce0:	b	14cb0 <__assert_fail@plt+0x3214>
   14ce4:	ldr	r1, [r9, #48]	; 0x30
   14ce8:	cmp	r1, #0
   14cec:	bmi	14d3c <__assert_fail@plt+0x32a0>
   14cf0:	mov	r1, r9
   14cf4:	b	14d18 <__assert_fail@plt+0x327c>
   14cf8:	str	r0, [r1, #28]
   14cfc:	ldr	r2, [r1, #8]
   14d00:	cmp	r2, #0
   14d04:	ldreq	r2, [r1, #4]
   14d08:	ldr	r1, [r2, #48]	; 0x30
   14d0c:	cmn	r1, #1
   14d10:	mov	r1, r2
   14d14:	ble	14d3c <__assert_fail@plt+0x32a0>
   14d18:	ldr	r2, [r1, #24]
   14d1c:	add	r3, r1, #168	; 0xa8
   14d20:	cmp	r2, r3
   14d24:	beq	14cf8 <__assert_fail@plt+0x325c>
   14d28:	ldr	r3, [r1, #28]
   14d2c:	sub	r2, r2, r3
   14d30:	add	r2, r0, r2
   14d34:	str	r2, [r1, #24]
   14d38:	b	14cf8 <__assert_fail@plt+0x325c>
   14d3c:	ldrb	r0, [r5, #48]	; 0x30
   14d40:	tst	r0, #4
   14d44:	beq	14d70 <__assert_fail@plt+0x32d4>
   14d48:	ldr	r2, [sp, #40]	; 0x28
   14d4c:	ldr	r0, [r5, #36]	; 0x24
   14d50:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14d54:	cmp	r3, r0
   14d58:	sub	r1, r2, #1
   14d5c:	mov	r0, #0
   14d60:	moveq	r2, r1
   14d64:	cmp	r7, #0
   14d68:	moveq	r2, r1
   14d6c:	strb	r0, [r2]
   14d70:	ldr	r0, [sp, #12]
   14d74:	cmp	r0, #0
   14d78:	movwne	r0, #1
   14d7c:	orrs	r0, r0, ip
   14d80:	beq	14de8 <__assert_fail@plt+0x334c>
   14d84:	cmp	r7, #0
   14d88:	bne	14e28 <__assert_fail@plt+0x338c>
   14d8c:	ldr	r0, [sp, #4]
   14d90:	cmp	r0, #3
   14d94:	bne	14dac <__assert_fail@plt+0x3310>
   14d98:	ldrh	r0, [sl, #56]	; 0x38
   14d9c:	cmp	r0, #4
   14da0:	cmpne	r0, #7
   14da4:	movne	r0, #6
   14da8:	strhne	r0, [sl, #56]	; 0x38
   14dac:	mov	r6, #0
   14db0:	cmp	r9, #0
   14db4:	bne	14dd0 <__assert_fail@plt+0x3334>
   14db8:	b	1501c <__assert_fail@plt+0x3580>
   14dbc:	mov	r0, r9
   14dc0:	bl	13164 <__assert_fail@plt+0x16c8>
   14dc4:	cmp	r4, #0
   14dc8:	mov	r9, r4
   14dcc:	beq	1501c <__assert_fail@plt+0x3580>
   14dd0:	ldrd	r4, [r9, #8]
   14dd4:	cmp	r5, #0
   14dd8:	beq	14dbc <__assert_fail@plt+0x3320>
   14ddc:	mov	r0, r5
   14de0:	bl	11a78 <closedir@plt>
   14de4:	b	14dbc <__assert_fail@plt+0x3320>
   14de8:	ldr	r0, [sp, #4]
   14dec:	cmp	r0, #1
   14df0:	cmpne	r7, #0
   14df4:	bne	14e28 <__assert_fail@plt+0x338c>
   14df8:	ldr	r0, [sl, #48]	; 0x30
   14dfc:	cmp	r0, #0
   14e00:	beq	14f10 <__assert_fail@plt+0x3474>
   14e04:	ldr	r1, [sl, #4]
   14e08:	movw	r3, #44818	; 0xaf12
   14e0c:	mov	r0, r5
   14e10:	mvn	r2, #0
   14e14:	movt	r3, #1
   14e18:	bl	14338 <__assert_fail@plt+0x289c>
   14e1c:	cmp	r0, #0
   14e20:	bne	14f20 <__assert_fail@plt+0x3484>
   14e24:	b	14d84 <__assert_fail@plt+0x32e8>
   14e28:	tst	r4, #1
   14e2c:	beq	14e5c <__assert_fail@plt+0x33c0>
   14e30:	movw	r0, #21496	; 0x53f8
   14e34:	mov	r1, r9
   14e38:	mov	r2, r7
   14e3c:	movt	r0, #1
   14e40:	str	r0, [r5, #44]	; 0x2c
   14e44:	mov	r0, r5
   14e48:	bl	1381c <__assert_fail@plt+0x1d80>
   14e4c:	mov	r6, r0
   14e50:	mov	r0, #0
   14e54:	str	r0, [r5, #44]	; 0x2c
   14e58:	b	1501c <__assert_fail@plt+0x3580>
   14e5c:	cmp	r7, #2
   14e60:	bcc	14e8c <__assert_fail@plt+0x33f0>
   14e64:	ldr	r0, [sp, #20]
   14e68:	ldr	r0, [r0]
   14e6c:	cmp	r0, #0
   14e70:	beq	14e8c <__assert_fail@plt+0x33f0>
   14e74:	mov	r0, r5
   14e78:	mov	r1, r9
   14e7c:	mov	r2, r7
   14e80:	bl	1381c <__assert_fail@plt+0x1d80>
   14e84:	mov	r6, r0
   14e88:	b	1501c <__assert_fail@plt+0x3580>
   14e8c:	mov	r6, r9
   14e90:	b	1501c <__assert_fail@plt+0x3580>
   14e94:	mov	r0, r6
   14e98:	bl	13164 <__assert_fail@plt+0x16c8>
   14e9c:	ldr	r7, [sp, #28]
   14ea0:	cmp	r9, #0
   14ea4:	bne	14ec0 <__assert_fail@plt+0x3424>
   14ea8:	b	14ed8 <__assert_fail@plt+0x343c>
   14eac:	mov	r0, r9
   14eb0:	bl	13164 <__assert_fail@plt+0x16c8>
   14eb4:	cmp	r4, #0
   14eb8:	mov	r9, r4
   14ebc:	beq	14ed8 <__assert_fail@plt+0x343c>
   14ec0:	ldrd	r4, [r9, #8]
   14ec4:	cmp	r5, #0
   14ec8:	beq	14eac <__assert_fail@plt+0x3410>
   14ecc:	mov	r0, r5
   14ed0:	bl	11a78 <closedir@plt>
   14ed4:	b	14eac <__assert_fail@plt+0x3410>
   14ed8:	ldr	r0, [r7, #12]
   14edc:	bl	11a78 <closedir@plt>
   14ee0:	ldr	r1, [sp, #48]	; 0x30
   14ee4:	mov	r0, #7
   14ee8:	mov	r6, #0
   14eec:	strh	r0, [r7, #56]	; 0x38
   14ef0:	str	r6, [r7, #12]
   14ef4:	ldr	r0, [r1, #48]	; 0x30
   14ef8:	orr	r0, r0, #8192	; 0x2000
   14efc:	str	r0, [r1, #48]	; 0x30
   14f00:	ldr	r1, [sp, #36]	; 0x24
   14f04:	mov	r0, #36	; 0x24
   14f08:	str	r0, [r1]
   14f0c:	b	1501c <__assert_fail@plt+0x3580>
   14f10:	mov	r0, r5
   14f14:	bl	15028 <__assert_fail@plt+0x358c>
   14f18:	cmp	r0, #0
   14f1c:	beq	14d84 <__assert_fail@plt+0x32e8>
   14f20:	mov	r0, #7
   14f24:	mov	r6, #0
   14f28:	cmp	r9, #0
   14f2c:	strh	r0, [sl, #56]	; 0x38
   14f30:	ldr	r0, [r5, #48]	; 0x30
   14f34:	orr	r0, r0, #8192	; 0x2000
   14f38:	str	r0, [r5, #48]	; 0x30
   14f3c:	bne	14f58 <__assert_fail@plt+0x34bc>
   14f40:	b	1501c <__assert_fail@plt+0x3580>
   14f44:	mov	r0, r9
   14f48:	bl	13164 <__assert_fail@plt+0x16c8>
   14f4c:	cmp	r4, #0
   14f50:	mov	r9, r4
   14f54:	beq	1501c <__assert_fail@plt+0x3580>
   14f58:	ldrd	r4, [r9, #8]
   14f5c:	cmp	r5, #0
   14f60:	beq	14f44 <__assert_fail@plt+0x34a8>
   14f64:	mov	r0, r5
   14f68:	bl	11a78 <closedir@plt>
   14f6c:	b	14f44 <__assert_fail@plt+0x34a8>
   14f70:	mov	r0, r4
   14f74:	bl	13164 <__assert_fail@plt+0x16c8>
   14f78:	ldr	r1, [sp, #36]	; 0x24
   14f7c:	mov	r0, #0
   14f80:	str	r0, [r5, #24]
   14f84:	mov	r0, #36	; 0x24
   14f88:	str	r0, [r1]
   14f8c:	b	14fa0 <__assert_fail@plt+0x3504>
   14f90:	ldr	r0, [r5, #24]
   14f94:	bl	13164 <__assert_fail@plt+0x16c8>
   14f98:	mov	r0, #0
   14f9c:	str	r0, [r5, #24]
   14fa0:	ldr	sl, [sp, #28]
   14fa4:	ldr	r0, [sp, #36]	; 0x24
   14fa8:	ldr	r4, [r0]
   14fac:	mov	r0, r6
   14fb0:	bl	13164 <__assert_fail@plt+0x16c8>
   14fb4:	ldr	r5, [sp, #48]	; 0x30
   14fb8:	cmp	r9, #0
   14fbc:	bne	14fd8 <__assert_fail@plt+0x353c>
   14fc0:	b	14ff0 <__assert_fail@plt+0x3554>
   14fc4:	mov	r0, r9
   14fc8:	bl	13164 <__assert_fail@plt+0x16c8>
   14fcc:	cmp	r6, #0
   14fd0:	mov	r9, r6
   14fd4:	beq	14ff0 <__assert_fail@plt+0x3554>
   14fd8:	ldrd	r6, [r9, #8]
   14fdc:	cmp	r7, #0
   14fe0:	beq	14fc4 <__assert_fail@plt+0x3528>
   14fe4:	mov	r0, r7
   14fe8:	bl	11a78 <closedir@plt>
   14fec:	b	14fc4 <__assert_fail@plt+0x3528>
   14ff0:	ldr	r0, [sl, #12]
   14ff4:	bl	11a78 <closedir@plt>
   14ff8:	mov	r0, #7
   14ffc:	mov	r6, #0
   15000:	strh	r0, [sl, #56]	; 0x38
   15004:	str	r6, [sl, #12]
   15008:	ldr	r0, [r5, #48]	; 0x30
   1500c:	orr	r0, r0, #8192	; 0x2000
   15010:	str	r0, [r5, #48]	; 0x30
   15014:	ldr	r0, [sp, #36]	; 0x24
   15018:	str	r4, [r0]
   1501c:	mov	r0, r6
   15020:	sub	sp, fp, #28
   15024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15028:	push	{r4, r5, fp, lr}
   1502c:	add	fp, sp, #8
   15030:	mov	r5, r0
   15034:	ldr	r0, [r0, #48]	; 0x30
   15038:	mov	r4, #0
   1503c:	tst	r0, #4
   15040:	bne	15084 <__assert_fail@plt+0x35e8>
   15044:	tst	r0, #512	; 0x200
   15048:	bne	15064 <__assert_fail@plt+0x35c8>
   1504c:	ldr	r0, [r5, #28]
   15050:	bl	119c4 <fchdir@plt>
   15054:	cmp	r0, #0
   15058:	mov	r4, r0
   1505c:	movwne	r4, #1
   15060:	b	15084 <__assert_fail@plt+0x35e8>
   15064:	ldr	r1, [r5, #32]
   15068:	add	r0, r5, #60	; 0x3c
   1506c:	bl	16964 <__assert_fail@plt+0x4ec8>
   15070:	cmp	r0, #0
   15074:	bmi	1507c <__assert_fail@plt+0x35e0>
   15078:	bl	11a48 <close@plt>
   1507c:	mvn	r0, #99	; 0x63
   15080:	str	r0, [r5, #32]
   15084:	add	r5, r5, #60	; 0x3c
   15088:	mov	r0, r5
   1508c:	bl	1695c <__assert_fail@plt+0x4ec0>
   15090:	cmp	r0, #0
   15094:	bne	150b0 <__assert_fail@plt+0x3614>
   15098:	mov	r0, r5
   1509c:	bl	169b0 <__assert_fail@plt+0x4f14>
   150a0:	cmp	r0, #0
   150a4:	bmi	15088 <__assert_fail@plt+0x35ec>
   150a8:	bl	11a48 <close@plt>
   150ac:	b	15088 <__assert_fail@plt+0x35ec>
   150b0:	mov	r0, r4
   150b4:	pop	{r4, r5, fp, pc}
   150b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150bc:	add	fp, sp, #24
   150c0:	mov	r6, r0
   150c4:	ldrh	r0, [r0, #48]	; 0x30
   150c8:	mov	r4, r1
   150cc:	add	r5, r1, #64	; 0x40
   150d0:	movw	r1, #258	; 0x102
   150d4:	tst	r0, r1
   150d8:	beq	15150 <__assert_fail@plt+0x36b4>
   150dc:	mov	r0, #24
   150e0:	bl	19f28 <lchmod@@Base+0x3528>
   150e4:	mov	r8, #0
   150e8:	cmp	r0, #0
   150ec:	beq	15170 <__assert_fail@plt+0x36d4>
   150f0:	ldrd	r2, [r5]
   150f4:	mov	r7, r0
   150f8:	add	r0, r4, #160	; 0xa0
   150fc:	stm	r7, {r2, r3}
   15100:	add	r2, r7, #8
   15104:	ldrd	r0, [r0]
   15108:	stm	r2, {r0, r1, r4}
   1510c:	mov	r1, r7
   15110:	ldr	r0, [r6, #56]	; 0x38
   15114:	bl	16590 <__assert_fail@plt+0x4af4>
   15118:	cmp	r0, r7
   1511c:	beq	15144 <__assert_fail@plt+0x36a8>
   15120:	mov	r5, r0
   15124:	mov	r0, r7
   15128:	bl	13164 <__assert_fail@plt+0x16c8>
   1512c:	cmp	r5, #0
   15130:	beq	15170 <__assert_fail@plt+0x36d4>
   15134:	ldr	r0, [r5, #16]
   15138:	mov	r1, #2
   1513c:	strh	r1, [r4, #56]	; 0x38
   15140:	str	r0, [r4]
   15144:	mov	r8, #1
   15148:	mov	r0, r8
   1514c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15150:	ldr	r0, [r6, #56]	; 0x38
   15154:	mov	r1, r5
   15158:	bl	1a0d0 <lchmod@@Base+0x36d0>
   1515c:	cmp	r0, #0
   15160:	mov	r8, #1
   15164:	movne	r0, #2
   15168:	strhne	r0, [r4, #56]	; 0x38
   1516c:	strne	r4, [r4]
   15170:	mov	r0, r8
   15174:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15178:	push	{fp, lr}
   1517c:	mov	fp, sp
   15180:	cmp	r2, #5
   15184:	bcc	1519c <__assert_fail@plt+0x3700>
   15188:	bl	118ec <__errno_location@plt>
   1518c:	mov	r1, #22
   15190:	str	r1, [r0]
   15194:	mov	r0, #1
   15198:	pop	{fp, pc}
   1519c:	mov	r0, #0
   151a0:	strh	r2, [r1, #60]	; 0x3c
   151a4:	pop	{fp, pc}
   151a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151ac:	add	fp, sp, #28
   151b0:	sub	sp, sp, #4
   151b4:	mov	r9, r0
   151b8:	mvn	r0, #4096	; 0x1000
   151bc:	tst	r1, r0
   151c0:	beq	151d8 <__assert_fail@plt+0x373c>
   151c4:	bl	118ec <__errno_location@plt>
   151c8:	mov	r1, #22
   151cc:	mov	r5, #0
   151d0:	str	r1, [r0]
   151d4:	b	152d8 <__assert_fail@plt+0x383c>
   151d8:	ldr	r8, [r9]
   151dc:	mov	r7, r1
   151e0:	bl	118ec <__errno_location@plt>
   151e4:	mov	r5, #0
   151e8:	mov	sl, r0
   151ec:	str	r5, [r0]
   151f0:	ldrb	r0, [r9, #49]	; 0x31
   151f4:	tst	r0, #32
   151f8:	bne	152d8 <__assert_fail@plt+0x383c>
   151fc:	ldrh	r0, [r8, #56]	; 0x38
   15200:	cmp	r0, #1
   15204:	beq	15214 <__assert_fail@plt+0x3778>
   15208:	cmp	r0, #9
   1520c:	ldreq	r5, [r8, #8]
   15210:	b	152d8 <__assert_fail@plt+0x383c>
   15214:	ldr	r6, [r9, #4]
   15218:	cmp	r6, #0
   1521c:	bne	15238 <__assert_fail@plt+0x379c>
   15220:	b	15254 <__assert_fail@plt+0x37b8>
   15224:	mov	r0, r6
   15228:	bl	13164 <__assert_fail@plt+0x16c8>
   1522c:	cmp	r4, #0
   15230:	mov	r6, r4
   15234:	beq	15254 <__assert_fail@plt+0x37b8>
   15238:	ldr	r1, [r6, #12]
   1523c:	ldr	r4, [r6, #8]
   15240:	cmp	r1, #0
   15244:	beq	15224 <__assert_fail@plt+0x3788>
   15248:	mov	r0, r1
   1524c:	bl	11a78 <closedir@plt>
   15250:	b	15224 <__assert_fail@plt+0x3788>
   15254:	mov	r4, #1
   15258:	cmp	r7, #4096	; 0x1000
   1525c:	bne	15270 <__assert_fail@plt+0x37d4>
   15260:	ldr	r0, [r9, #48]	; 0x30
   15264:	mov	r4, #2
   15268:	orr	r0, r0, #4096	; 0x1000
   1526c:	str	r0, [r9, #48]	; 0x30
   15270:	ldr	r0, [r8, #48]	; 0x30
   15274:	cmp	r0, #0
   15278:	bne	152c4 <__assert_fail@plt+0x3828>
   1527c:	ldr	r0, [r8, #24]
   15280:	ldrb	r0, [r0]
   15284:	cmp	r0, #47	; 0x2f
   15288:	beq	152c4 <__assert_fail@plt+0x3828>
   1528c:	ldr	r0, [r9, #48]	; 0x30
   15290:	tst	r0, #4
   15294:	bne	152c4 <__assert_fail@plt+0x3828>
   15298:	mov	r1, #32768	; 0x8000
   1529c:	tst	r0, #512	; 0x200
   152a0:	and	r1, r1, r0, lsl #11
   152a4:	orr	r1, r1, #18688	; 0x4900
   152a8:	orr	r2, r1, #524288	; 0x80000
   152ac:	bne	152e4 <__assert_fail@plt+0x3848>
   152b0:	movw	r0, #44819	; 0xaf13
   152b4:	mov	r1, r2
   152b8:	movt	r0, #1
   152bc:	bl	1a420 <lchmod@@Base+0x3a20>
   152c0:	b	152f4 <__assert_fail@plt+0x3858>
   152c4:	mov	r0, r9
   152c8:	mov	r1, r4
   152cc:	bl	14598 <__assert_fail@plt+0x2afc>
   152d0:	mov	r5, r0
   152d4:	str	r0, [r9, #4]
   152d8:	mov	r0, r5
   152dc:	sub	sp, fp, #28
   152e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152e4:	ldr	r0, [r9, #32]
   152e8:	movw	r1, #44819	; 0xaf13
   152ec:	movt	r1, #1
   152f0:	bl	170c0 <lchmod@@Base+0x6c0>
   152f4:	mov	r8, r0
   152f8:	cmn	r0, #1
   152fc:	ble	15340 <__assert_fail@plt+0x38a4>
   15300:	mov	r0, r9
   15304:	mov	r1, r4
   15308:	bl	14598 <__assert_fail@plt+0x2afc>
   1530c:	str	r0, [r9, #4]
   15310:	ldrb	r0, [r9, #49]	; 0x31
   15314:	tst	r0, #2
   15318:	bne	1534c <__assert_fail@plt+0x38b0>
   1531c:	mov	r0, r8
   15320:	bl	119c4 <fchdir@plt>
   15324:	cmp	r0, #0
   15328:	beq	1537c <__assert_fail@plt+0x38e0>
   1532c:	ldr	r4, [sl]
   15330:	mov	r0, r8
   15334:	bl	11a48 <close@plt>
   15338:	str	r4, [sl]
   1533c:	b	152d8 <__assert_fail@plt+0x383c>
   15340:	mov	r5, #0
   15344:	str	r5, [r9, #4]
   15348:	b	152d8 <__assert_fail@plt+0x383c>
   1534c:	ldr	r1, [r9, #32]
   15350:	cmp	r1, r8
   15354:	bne	15360 <__assert_fail@plt+0x38c4>
   15358:	cmn	r1, #100	; 0x64
   1535c:	bne	1538c <__assert_fail@plt+0x38f0>
   15360:	add	r0, r9, #60	; 0x3c
   15364:	bl	16964 <__assert_fail@plt+0x4ec8>
   15368:	cmp	r0, #0
   1536c:	bmi	15374 <__assert_fail@plt+0x38d8>
   15370:	bl	11a48 <close@plt>
   15374:	str	r8, [r9, #32]
   15378:	b	15384 <__assert_fail@plt+0x38e8>
   1537c:	mov	r0, r8
   15380:	bl	11a48 <close@plt>
   15384:	ldr	r5, [r9, #4]
   15388:	b	152d8 <__assert_fail@plt+0x383c>
   1538c:	bl	11a3c <abort@plt>
   15390:	push	{fp, lr}
   15394:	mov	fp, sp
   15398:	mov	r2, r1
   1539c:	ldrd	r0, [r0, #8]
   153a0:	mov	r3, #0
   153a4:	bl	1a78c <lchmod@@Base+0x3d8c>
   153a8:	mov	r0, r2
   153ac:	pop	{fp, pc}
   153b0:	push	{r4, r5, fp, lr}
   153b4:	add	fp, sp, #8
   153b8:	ldrd	r2, [r1, #8]
   153bc:	ldrd	r4, [r0, #8]
   153c0:	eor	r3, r5, r3
   153c4:	eor	r2, r4, r2
   153c8:	orrs	r2, r2, r3
   153cc:	mov	r2, #0
   153d0:	bne	153f0 <__assert_fail@plt+0x3954>
   153d4:	ldrd	r2, [r1]
   153d8:	ldrd	r0, [r0]
   153dc:	eor	r1, r1, r3
   153e0:	eor	r0, r0, r2
   153e4:	orr	r0, r0, r1
   153e8:	clz	r0, r0
   153ec:	lsr	r2, r0, #5
   153f0:	mov	r0, r2
   153f4:	pop	{r4, r5, fp, pc}
   153f8:	push	{r4, r5, fp, lr}
   153fc:	add	fp, sp, #8
   15400:	ldr	r0, [r0]
   15404:	ldrd	r2, [r0, #160]	; 0xa0
   15408:	ldr	r0, [r1]
   1540c:	ldrd	r4, [r0, #160]	; 0xa0
   15410:	mov	r0, #0
   15414:	subs	r1, r4, r2
   15418:	sbcs	r1, r5, r3
   1541c:	movwcc	r0, #1
   15420:	subs	r1, r2, r4
   15424:	sbcs	r1, r3, r5
   15428:	subcc	r0, r0, #1
   1542c:	pop	{r4, r5, fp, pc}
   15430:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15434:	add	fp, sp, #24
   15438:	sub	sp, sp, #96	; 0x60
   1543c:	ldr	r7, [r0, #44]	; 0x2c
   15440:	mov	r4, r0
   15444:	mov	r5, #0
   15448:	ldrb	r0, [r7, #49]	; 0x31
   1544c:	tst	r0, #2
   15450:	beq	1554c <__assert_fail@plt+0x3ab0>
   15454:	ldr	r6, [r7, #52]	; 0x34
   15458:	mov	r9, r1
   1545c:	cmp	r6, #0
   15460:	bne	154a0 <__assert_fail@plt+0x3a04>
   15464:	movw	r0, #12644	; 0x3164
   15468:	movw	r2, #21848	; 0x5558
   1546c:	movw	r3, #21880	; 0x5578
   15470:	mov	r1, #0
   15474:	mov	r8, #0
   15478:	movt	r0, #1
   1547c:	movt	r2, #1
   15480:	movt	r3, #1
   15484:	str	r0, [sp]
   15488:	mov	r0, #13
   1548c:	bl	15a3c <__assert_fail@plt+0x3fa0>
   15490:	mov	r6, r0
   15494:	cmp	r0, #0
   15498:	str	r0, [r7, #52]	; 0x34
   1549c:	beq	154d8 <__assert_fail@plt+0x3a3c>
   154a0:	ldrd	r0, [r4, #64]	; 0x40
   154a4:	str	r1, [sp, #12]
   154a8:	str	r0, [sp, #8]
   154ac:	add	r1, sp, #8
   154b0:	mov	r0, r6
   154b4:	bl	15788 <__assert_fail@plt+0x3cec>
   154b8:	cmp	r0, #0
   154bc:	beq	154c8 <__assert_fail@plt+0x3a2c>
   154c0:	ldr	r5, [r0, #8]
   154c4:	b	1554c <__assert_fail@plt+0x3ab0>
   154c8:	mov	r8, #1
   154cc:	cmp	r9, #0
   154d0:	bpl	154e4 <__assert_fail@plt+0x3a48>
   154d4:	b	1554c <__assert_fail@plt+0x3ab0>
   154d8:	mov	r6, #0
   154dc:	cmp	r9, #0
   154e0:	bmi	1554c <__assert_fail@plt+0x3ab0>
   154e4:	add	r1, sp, #8
   154e8:	mov	r0, r9
   154ec:	bl	11688 <fstatfs64@plt>
   154f0:	cmp	r0, #0
   154f4:	bne	1554c <__assert_fail@plt+0x3ab0>
   154f8:	cmp	r8, #0
   154fc:	beq	15548 <__assert_fail@plt+0x3aac>
   15500:	mov	r0, #16
   15504:	bl	19f28 <lchmod@@Base+0x3528>
   15508:	cmp	r0, #0
   1550c:	beq	15548 <__assert_fail@plt+0x3aac>
   15510:	mov	r5, r0
   15514:	ldrd	r0, [r4, #64]	; 0x40
   15518:	ldr	r2, [sp, #8]
   1551c:	stm	r5, {r0, r1, r2}
   15520:	mov	r0, r6
   15524:	mov	r1, r5
   15528:	bl	16590 <__assert_fail@plt+0x4af4>
   1552c:	cmp	r0, #0
   15530:	beq	15540 <__assert_fail@plt+0x3aa4>
   15534:	cmp	r0, r5
   15538:	beq	15548 <__assert_fail@plt+0x3aac>
   1553c:	bl	11a3c <abort@plt>
   15540:	mov	r0, r5
   15544:	bl	13164 <__assert_fail@plt+0x16c8>
   15548:	ldr	r5, [sp, #8]
   1554c:	mov	r0, r5
   15550:	sub	sp, fp, #24
   15554:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15558:	push	{fp, lr}
   1555c:	mov	fp, sp
   15560:	mov	r2, r1
   15564:	ldrd	r0, [r0]
   15568:	mov	r3, #0
   1556c:	bl	1a78c <lchmod@@Base+0x3d8c>
   15570:	mov	r0, r2
   15574:	pop	{fp, pc}
   15578:	ldrd	r2, [r1]
   1557c:	ldrd	r0, [r0]
   15580:	eor	r1, r1, r3
   15584:	eor	r0, r0, r2
   15588:	orr	r0, r0, r1
   1558c:	clz	r0, r0
   15590:	lsr	r0, r0, #5
   15594:	bx	lr
   15598:	ldr	r0, [r0, #8]
   1559c:	bx	lr
   155a0:	ldr	r0, [r0, #12]
   155a4:	bx	lr
   155a8:	ldr	r0, [r0, #16]
   155ac:	bx	lr
   155b0:	ldm	r0, {r2, ip}
   155b4:	mov	r0, #0
   155b8:	cmp	r2, ip
   155bc:	bxcs	lr
   155c0:	mov	r0, #0
   155c4:	b	155d4 <__assert_fail@plt+0x3b38>
   155c8:	add	r2, r2, #8
   155cc:	cmp	r2, ip
   155d0:	bcs	15604 <__assert_fail@plt+0x3b68>
   155d4:	ldr	r1, [r2]
   155d8:	cmp	r1, #0
   155dc:	beq	155c8 <__assert_fail@plt+0x3b2c>
   155e0:	mov	r3, #0
   155e4:	mov	r1, r2
   155e8:	ldr	r1, [r1, #4]
   155ec:	add	r3, r3, #1
   155f0:	cmp	r1, #0
   155f4:	bne	155e8 <__assert_fail@plt+0x3b4c>
   155f8:	cmp	r3, r0
   155fc:	movhi	r0, r3
   15600:	b	155c8 <__assert_fail@plt+0x3b2c>
   15604:	bx	lr
   15608:	push	{fp, lr}
   1560c:	mov	fp, sp
   15610:	ldm	r0, {r3, ip}
   15614:	mov	lr, #0
   15618:	mov	r1, #0
   1561c:	cmp	r3, ip
   15620:	bcs	15664 <__assert_fail@plt+0x3bc8>
   15624:	mov	r1, #0
   15628:	mov	lr, #0
   1562c:	b	1563c <__assert_fail@plt+0x3ba0>
   15630:	add	r3, r3, #8
   15634:	cmp	r3, ip
   15638:	bcs	15664 <__assert_fail@plt+0x3bc8>
   1563c:	ldr	r2, [r3]
   15640:	cmp	r2, #0
   15644:	beq	15630 <__assert_fail@plt+0x3b94>
   15648:	mov	r2, r3
   1564c:	ldr	r2, [r2, #4]
   15650:	add	r1, r1, #1
   15654:	cmp	r2, #0
   15658:	bne	1564c <__assert_fail@plt+0x3bb0>
   1565c:	add	lr, lr, #1
   15660:	b	15630 <__assert_fail@plt+0x3b94>
   15664:	ldr	r2, [r0, #12]
   15668:	cmp	lr, r2
   1566c:	bne	15684 <__assert_fail@plt+0x3be8>
   15670:	ldr	r2, [r0, #16]
   15674:	mov	r0, #1
   15678:	cmp	r1, r2
   1567c:	movne	r0, #0
   15680:	pop	{fp, pc}
   15684:	mov	r0, #0
   15688:	pop	{fp, pc}
   1568c:	nop	{0}
   15690:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15694:	add	fp, sp, #24
   15698:	sub	sp, sp, #8
   1569c:	ldr	r6, [r0]
   156a0:	ldmib	r0, {r2, r7, r8}
   156a4:	ldr	r3, [r0, #16]
   156a8:	mov	r4, r1
   156ac:	mov	r5, #0
   156b0:	cmp	r6, r2
   156b4:	bcs	156fc <__assert_fail@plt+0x3c60>
   156b8:	mov	r5, #0
   156bc:	b	156cc <__assert_fail@plt+0x3c30>
   156c0:	add	r6, r6, #8
   156c4:	cmp	r6, r2
   156c8:	bcs	156fc <__assert_fail@plt+0x3c60>
   156cc:	ldr	r0, [r6]
   156d0:	cmp	r0, #0
   156d4:	beq	156c0 <__assert_fail@plt+0x3c24>
   156d8:	mov	r0, #0
   156dc:	mov	r1, r6
   156e0:	ldr	r1, [r1, #4]
   156e4:	add	r0, r0, #1
   156e8:	cmp	r1, #0
   156ec:	bne	156e0 <__assert_fail@plt+0x3c44>
   156f0:	cmp	r0, r5
   156f4:	movhi	r5, r0
   156f8:	b	156c0 <__assert_fail@plt+0x3c24>
   156fc:	movw	r2, #44872	; 0xaf48
   15700:	mov	r0, r4
   15704:	mov	r1, #1
   15708:	movt	r2, #1
   1570c:	bl	11934 <__fprintf_chk@plt>
   15710:	movw	r2, #44896	; 0xaf60
   15714:	mov	r0, r4
   15718:	mov	r1, #1
   1571c:	mov	r3, r7
   15720:	movt	r2, #1
   15724:	bl	11934 <__fprintf_chk@plt>
   15728:	vmov	s0, r8
   1572c:	vldr	d16, [pc, #76]	; 15780 <__assert_fail@plt+0x3ce4>
   15730:	movw	r2, #44920	; 0xaf78
   15734:	mov	r0, r4
   15738:	mov	r1, #1
   1573c:	mov	r3, r8
   15740:	movt	r2, #1
   15744:	vcvt.f64.u32	d17, s0
   15748:	vmov	s0, r7
   1574c:	vcvt.f64.u32	d18, s0
   15750:	vmul.f64	d16, d17, d16
   15754:	vdiv.f64	d16, d16, d18
   15758:	vstr	d16, [sp]
   1575c:	bl	11934 <__fprintf_chk@plt>
   15760:	movw	r2, #44953	; 0xaf99
   15764:	mov	r0, r4
   15768:	mov	r1, #1
   1576c:	mov	r3, r5
   15770:	movt	r2, #1
   15774:	sub	sp, fp, #24
   15778:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1577c:	b	11934 <__fprintf_chk@plt>
   15780:	andeq	r0, r0, r0
   15784:	subsmi	r0, r9, r0
   15788:	push	{r4, r5, r6, r7, fp, lr}
   1578c:	add	fp, sp, #16
   15790:	mov	r4, r1
   15794:	ldr	r1, [r0, #8]
   15798:	ldr	r2, [r0, #24]
   1579c:	mov	r5, r0
   157a0:	mov	r0, r4
   157a4:	blx	r2
   157a8:	ldr	r1, [r5, #8]
   157ac:	cmp	r0, r1
   157b0:	bcs	15818 <__assert_fail@plt+0x3d7c>
   157b4:	ldr	r7, [r5]
   157b8:	mov	r6, #0
   157bc:	ldr	r1, [r7, r0, lsl #3]!
   157c0:	cmp	r1, #0
   157c4:	cmpne	r7, #0
   157c8:	bne	157f8 <__assert_fail@plt+0x3d5c>
   157cc:	mov	r0, r6
   157d0:	pop	{r4, r5, r6, r7, fp, pc}
   157d4:	ldr	r2, [r5, #28]
   157d8:	mov	r0, r4
   157dc:	blx	r2
   157e0:	cmp	r0, #0
   157e4:	bne	1580c <__assert_fail@plt+0x3d70>
   157e8:	ldr	r7, [r7, #4]
   157ec:	cmp	r7, #0
   157f0:	beq	157cc <__assert_fail@plt+0x3d30>
   157f4:	ldr	r1, [r7]
   157f8:	cmp	r1, r4
   157fc:	bne	157d4 <__assert_fail@plt+0x3d38>
   15800:	mov	r6, r4
   15804:	mov	r0, r6
   15808:	pop	{r4, r5, r6, r7, fp, pc}
   1580c:	ldr	r6, [r7]
   15810:	mov	r0, r6
   15814:	pop	{r4, r5, r6, r7, fp, pc}
   15818:	bl	11a3c <abort@plt>
   1581c:	push	{fp, lr}
   15820:	mov	fp, sp
   15824:	ldr	r1, [r0, #16]
   15828:	cmp	r1, #0
   1582c:	beq	1584c <__assert_fail@plt+0x3db0>
   15830:	ldm	r0, {r1, r2}
   15834:	cmp	r1, r2
   15838:	bcs	15854 <__assert_fail@plt+0x3db8>
   1583c:	ldr	r0, [r1], #8
   15840:	cmp	r0, #0
   15844:	beq	15834 <__assert_fail@plt+0x3d98>
   15848:	pop	{fp, pc}
   1584c:	mov	r0, #0
   15850:	pop	{fp, pc}
   15854:	bl	11a3c <abort@plt>
   15858:	push	{r4, r5, fp, lr}
   1585c:	add	fp, sp, #8
   15860:	mov	r5, r1
   15864:	ldr	r1, [r0, #8]
   15868:	ldr	r2, [r0, #24]
   1586c:	mov	r4, r0
   15870:	mov	r0, r5
   15874:	blx	r2
   15878:	ldr	r1, [r4, #8]
   1587c:	cmp	r0, r1
   15880:	bcs	158e4 <__assert_fail@plt+0x3e48>
   15884:	ldr	r1, [r4]
   15888:	add	r2, r1, r0, lsl #3
   1588c:	ldr	r3, [r2]
   15890:	ldr	r2, [r2, #4]
   15894:	cmp	r3, r5
   15898:	beq	158a8 <__assert_fail@plt+0x3e0c>
   1589c:	cmp	r2, #0
   158a0:	bne	1588c <__assert_fail@plt+0x3df0>
   158a4:	b	158b8 <__assert_fail@plt+0x3e1c>
   158a8:	cmp	r2, #0
   158ac:	beq	158b8 <__assert_fail@plt+0x3e1c>
   158b0:	ldr	r0, [r2]
   158b4:	pop	{r4, r5, fp, pc}
   158b8:	ldr	r2, [r4, #4]
   158bc:	add	r0, r1, r0, lsl #3
   158c0:	add	r1, r0, #8
   158c4:	cmp	r1, r2
   158c8:	bcs	158dc <__assert_fail@plt+0x3e40>
   158cc:	ldr	r0, [r1], #8
   158d0:	cmp	r0, #0
   158d4:	beq	158c4 <__assert_fail@plt+0x3e28>
   158d8:	pop	{r4, r5, fp, pc}
   158dc:	mov	r0, #0
   158e0:	pop	{r4, r5, fp, pc}
   158e4:	bl	11a3c <abort@plt>
   158e8:	push	{r4, r5, fp, lr}
   158ec:	add	fp, sp, #8
   158f0:	ldm	r0, {r5, lr}
   158f4:	mov	ip, r0
   158f8:	mov	r0, #0
   158fc:	cmp	r5, lr
   15900:	popcs	{r4, r5, fp, pc}
   15904:	mov	r0, #0
   15908:	b	1591c <__assert_fail@plt+0x3e80>
   1590c:	ldr	lr, [ip, #4]
   15910:	add	r5, r5, #8
   15914:	cmp	r5, lr
   15918:	bcs	15954 <__assert_fail@plt+0x3eb8>
   1591c:	ldr	r3, [r5]
   15920:	cmp	r3, #0
   15924:	cmpne	r5, #0
   15928:	beq	15910 <__assert_fail@plt+0x3e74>
   1592c:	mov	r3, r5
   15930:	cmp	r0, r2
   15934:	bcs	15954 <__assert_fail@plt+0x3eb8>
   15938:	ldr	r4, [r3]
   1593c:	str	r4, [r1, r0, lsl #2]
   15940:	add	r0, r0, #1
   15944:	ldr	r3, [r3, #4]
   15948:	cmp	r3, #0
   1594c:	bne	15930 <__assert_fail@plt+0x3e94>
   15950:	b	1590c <__assert_fail@plt+0x3e70>
   15954:	pop	{r4, r5, fp, pc}
   15958:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1595c:	add	fp, sp, #24
   15960:	mov	r5, r1
   15964:	ldr	r4, [r0]
   15968:	ldr	r1, [r0, #4]
   1596c:	mov	r6, #0
   15970:	cmp	r4, r1
   15974:	bcs	159e0 <__assert_fail@plt+0x3f44>
   15978:	mov	r9, r2
   1597c:	mov	r8, r0
   15980:	mov	r6, #0
   15984:	b	15998 <__assert_fail@plt+0x3efc>
   15988:	ldr	r1, [r8, #4]
   1598c:	add	r4, r4, #8
   15990:	cmp	r4, r1
   15994:	bcs	159e0 <__assert_fail@plt+0x3f44>
   15998:	ldr	r0, [r4]
   1599c:	cmp	r0, #0
   159a0:	cmpne	r4, #0
   159a4:	beq	1598c <__assert_fail@plt+0x3ef0>
   159a8:	mov	r1, r9
   159ac:	blx	r5
   159b0:	cmp	r0, #0
   159b4:	beq	159e0 <__assert_fail@plt+0x3f44>
   159b8:	mov	r7, r4
   159bc:	ldr	r7, [r7, #4]
   159c0:	add	r6, r6, #1
   159c4:	cmp	r7, #0
   159c8:	beq	15988 <__assert_fail@plt+0x3eec>
   159cc:	ldr	r0, [r7]
   159d0:	mov	r1, r9
   159d4:	blx	r5
   159d8:	cmp	r0, #0
   159dc:	bne	159bc <__assert_fail@plt+0x3f20>
   159e0:	mov	r0, r6
   159e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   159e8:	ldrb	r2, [r0]
   159ec:	cmp	r2, #0
   159f0:	moveq	r0, #0
   159f4:	bxeq	lr
   159f8:	add	r3, r0, #1
   159fc:	mov	r0, #0
   15a00:	rsb	r0, r0, r0, lsl #5
   15a04:	uxtab	r0, r0, r2
   15a08:	udiv	r2, r0, r1
   15a0c:	mls	r0, r2, r1, r0
   15a10:	ldrb	r2, [r3], #1
   15a14:	cmp	r2, #0
   15a18:	bne	15a00 <__assert_fail@plt+0x3f64>
   15a1c:	bx	lr
   15a20:	movw	r1, #44984	; 0xafb8
   15a24:	movt	r1, #1
   15a28:	vld1.32	{d16-d17}, [r1]!
   15a2c:	ldr	r1, [r1]
   15a30:	vst1.32	{d16-d17}, [r0]!
   15a34:	str	r1, [r0]
   15a38:	bx	lr
   15a3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15a40:	add	fp, sp, #24
   15a44:	movw	r9, #23652	; 0x5c64
   15a48:	cmp	r3, #0
   15a4c:	movw	r5, #23632	; 0x5c50
   15a50:	mov	r6, r0
   15a54:	mov	r0, #40	; 0x28
   15a58:	mov	r7, r1
   15a5c:	movt	r9, #1
   15a60:	movne	r9, r3
   15a64:	cmp	r2, #0
   15a68:	movt	r5, #1
   15a6c:	movne	r5, r2
   15a70:	bl	19f28 <lchmod@@Base+0x3528>
   15a74:	mov	r8, #0
   15a78:	cmp	r0, #0
   15a7c:	beq	15c38 <__assert_fail@plt+0x419c>
   15a80:	mov	r4, r0
   15a84:	movw	r0, #44984	; 0xafb8
   15a88:	cmp	r7, #0
   15a8c:	movt	r0, #1
   15a90:	moveq	r7, r0
   15a94:	cmp	r7, r0
   15a98:	str	r7, [r4, #20]
   15a9c:	beq	15b18 <__assert_fail@plt+0x407c>
   15aa0:	vldr	s2, [pc, #408]	; 15c40 <__assert_fail@plt+0x41a4>
   15aa4:	vldr	s0, [r7, #8]
   15aa8:	vcmpe.f32	s0, s2
   15aac:	vmrs	APSR_nzcv, fpscr
   15ab0:	ble	15bc4 <__assert_fail@plt+0x4128>
   15ab4:	vldr	s4, [pc, #392]	; 15c44 <__assert_fail@plt+0x41a8>
   15ab8:	vcmpe.f32	s0, s4
   15abc:	vmrs	APSR_nzcv, fpscr
   15ac0:	bpl	15bc4 <__assert_fail@plt+0x4128>
   15ac4:	vldr	s4, [pc, #380]	; 15c48 <__assert_fail@plt+0x41ac>
   15ac8:	vldr	s6, [r7, #12]
   15acc:	vcmpe.f32	s6, s4
   15ad0:	vmrs	APSR_nzcv, fpscr
   15ad4:	ble	15bc4 <__assert_fail@plt+0x4128>
   15ad8:	vldr	s4, [r7]
   15adc:	vcmpe.f32	s4, #0.0
   15ae0:	vmrs	APSR_nzcv, fpscr
   15ae4:	blt	15bc4 <__assert_fail@plt+0x4128>
   15ae8:	vadd.f32	s2, s4, s2
   15aec:	vcmpe.f32	s2, s0
   15af0:	vmrs	APSR_nzcv, fpscr
   15af4:	bpl	15bc4 <__assert_fail@plt+0x4128>
   15af8:	vldr	s0, [r7, #4]
   15afc:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15b00:	vcmpe.f32	s0, s4
   15b04:	vmrs	APSR_nzcv, fpscr
   15b08:	bhi	15bc4 <__assert_fail@plt+0x4128>
   15b0c:	vcmpe.f32	s2, s0
   15b10:	vmrs	APSR_nzcv, fpscr
   15b14:	bpl	15bc4 <__assert_fail@plt+0x4128>
   15b18:	ldrb	r0, [r7, #16]
   15b1c:	cmp	r0, #0
   15b20:	bne	15b4c <__assert_fail@plt+0x40b0>
   15b24:	vmov	s2, r6
   15b28:	vldr	s0, [r7, #8]
   15b2c:	vldr	s4, [pc, #280]	; 15c4c <__assert_fail@plt+0x41b0>
   15b30:	vcvt.f32.u32	s2, s2
   15b34:	vdiv.f32	s2, s2, s0
   15b38:	vcvt.u32.f32	s0, s2
   15b3c:	vcmpe.f32	s2, s4
   15b40:	vmrs	APSR_nzcv, fpscr
   15b44:	bge	15bd4 <__assert_fail@plt+0x4138>
   15b48:	vmov	r6, s0
   15b4c:	cmp	r6, #10
   15b50:	movls	r6, #10
   15b54:	orr	r0, r6, #1
   15b58:	cmn	r0, #1
   15b5c:	beq	15bd4 <__assert_fail@plt+0x4138>
   15b60:	ldr	r6, [fp, #8]
   15b64:	mov	r1, #3
   15b68:	cmp	r0, #10
   15b6c:	bcc	15ba4 <__assert_fail@plt+0x4108>
   15b70:	mov	r1, #3
   15b74:	mov	r3, #9
   15b78:	mov	r2, #12
   15b7c:	udiv	r7, r0, r1
   15b80:	mls	r7, r7, r1, r0
   15b84:	cmp	r7, #0
   15b88:	beq	15ba4 <__assert_fail@plt+0x4108>
   15b8c:	add	r3, r3, r2
   15b90:	add	r2, r2, #8
   15b94:	add	r1, r1, #2
   15b98:	add	r3, r3, #4
   15b9c:	cmp	r3, r0
   15ba0:	bcc	15b7c <__assert_fail@plt+0x40e0>
   15ba4:	udiv	r2, r0, r1
   15ba8:	mls	r1, r2, r1, r0
   15bac:	cmp	r1, #0
   15bb0:	bne	15bcc <__assert_fail@plt+0x4130>
   15bb4:	add	r0, r0, #2
   15bb8:	cmn	r0, #1
   15bbc:	bne	15b64 <__assert_fail@plt+0x40c8>
   15bc0:	b	15bd4 <__assert_fail@plt+0x4138>
   15bc4:	str	r0, [r4, #20]
   15bc8:	b	15bdc <__assert_fail@plt+0x4140>
   15bcc:	cmp	r0, #536870912	; 0x20000000
   15bd0:	bcc	15bec <__assert_fail@plt+0x4150>
   15bd4:	mov	r0, #0
   15bd8:	str	r0, [r4, #8]
   15bdc:	mov	r0, r4
   15be0:	bl	13164 <__assert_fail@plt+0x16c8>
   15be4:	mov	r0, r8
   15be8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15bec:	cmp	r0, #0
   15bf0:	str	r0, [r4, #8]
   15bf4:	beq	15bdc <__assert_fail@plt+0x4140>
   15bf8:	mov	r1, #8
   15bfc:	bl	19ed4 <lchmod@@Base+0x34d4>
   15c00:	cmp	r0, #0
   15c04:	str	r0, [r4]
   15c08:	beq	15bdc <__assert_fail@plt+0x4140>
   15c0c:	mov	r1, #0
   15c10:	str	r5, [r4, #24]
   15c14:	str	r9, [r4, #28]
   15c18:	str	r6, [r4, #32]
   15c1c:	mov	r8, r4
   15c20:	str	r1, [r4, #36]	; 0x24
   15c24:	str	r1, [r4, #12]
   15c28:	str	r1, [r4, #16]
   15c2c:	ldr	r1, [r4, #8]
   15c30:	add	r0, r0, r1, lsl #3
   15c34:	str	r0, [r4, #4]
   15c38:	mov	r0, r8
   15c3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15c40:	stclcc	12, cr12, [ip, #820]	; 0x334
   15c44:	svccc	0x00666666
   15c48:	svccc	0x008ccccd
   15c4c:	svcmi	0x00800000
   15c50:	ror	r2, r0, #3
   15c54:	udiv	r2, r2, r1
   15c58:	mul	r1, r2, r1
   15c5c:	rsb	r0, r1, r0, ror #3
   15c60:	bx	lr
   15c64:	sub	r0, r0, r1
   15c68:	clz	r0, r0
   15c6c:	lsr	r0, r0, #5
   15c70:	bx	lr
   15c74:	push	{r4, r5, r6, r7, fp, lr}
   15c78:	add	fp, sp, #16
   15c7c:	mov	r4, r0
   15c80:	ldr	r5, [r0]
   15c84:	ldr	r0, [r0, #4]
   15c88:	cmp	r5, r0
   15c8c:	bcs	15d30 <__assert_fail@plt+0x4294>
   15c90:	mov	r6, #0
   15c94:	b	15cb0 <__assert_fail@plt+0x4214>
   15c98:	str	r6, [r5]
   15c9c:	str	r6, [r5, #4]
   15ca0:	ldr	r0, [r4, #4]
   15ca4:	add	r5, r5, #8
   15ca8:	cmp	r5, r0
   15cac:	bcs	15d30 <__assert_fail@plt+0x4294>
   15cb0:	ldr	r1, [r5]
   15cb4:	cmp	r1, #0
   15cb8:	beq	15ca4 <__assert_fail@plt+0x4208>
   15cbc:	ldr	r1, [r4, #32]
   15cc0:	ldr	r7, [r5, #4]
   15cc4:	cmp	r1, #0
   15cc8:	mov	r0, r1
   15ccc:	movwne	r0, #1
   15cd0:	cmp	r7, #0
   15cd4:	bne	15d18 <__assert_fail@plt+0x427c>
   15cd8:	cmp	r0, #0
   15cdc:	beq	15c98 <__assert_fail@plt+0x41fc>
   15ce0:	ldr	r0, [r5]
   15ce4:	blx	r1
   15ce8:	b	15c98 <__assert_fail@plt+0x41fc>
   15cec:	str	r6, [r7]
   15cf0:	cmp	r1, #0
   15cf4:	ldr	r2, [r7, #4]
   15cf8:	ldr	r0, [r4, #36]	; 0x24
   15cfc:	str	r0, [r7, #4]
   15d00:	mov	r0, r1
   15d04:	str	r7, [r4, #36]	; 0x24
   15d08:	movwne	r0, #1
   15d0c:	cmp	r2, #0
   15d10:	mov	r7, r2
   15d14:	beq	15cd8 <__assert_fail@plt+0x423c>
   15d18:	tst	r0, #1
   15d1c:	beq	15cec <__assert_fail@plt+0x4250>
   15d20:	ldr	r0, [r7]
   15d24:	blx	r1
   15d28:	ldr	r1, [r4, #32]
   15d2c:	b	15cec <__assert_fail@plt+0x4250>
   15d30:	mov	r0, #0
   15d34:	str	r0, [r4, #12]
   15d38:	str	r0, [r4, #16]
   15d3c:	pop	{r4, r5, r6, r7, fp, pc}
   15d40:	push	{r4, r5, r6, sl, fp, lr}
   15d44:	add	fp, sp, #16
   15d48:	mov	r4, r0
   15d4c:	ldr	r0, [r0, #32]
   15d50:	cmp	r0, #0
   15d54:	beq	15dc8 <__assert_fail@plt+0x432c>
   15d58:	ldr	r0, [r4, #16]
   15d5c:	cmp	r0, #0
   15d60:	beq	15dc8 <__assert_fail@plt+0x432c>
   15d64:	ldr	r5, [r4]
   15d68:	ldr	r1, [r4, #4]
   15d6c:	cmp	r5, r1
   15d70:	bcc	15d88 <__assert_fail@plt+0x42ec>
   15d74:	b	15dc8 <__assert_fail@plt+0x432c>
   15d78:	ldr	r1, [r4, #4]
   15d7c:	add	r5, r5, #8
   15d80:	cmp	r5, r1
   15d84:	bcs	15dc8 <__assert_fail@plt+0x432c>
   15d88:	ldr	r0, [r5]
   15d8c:	cmp	r0, #0
   15d90:	cmpne	r5, #0
   15d94:	beq	15d7c <__assert_fail@plt+0x42e0>
   15d98:	ldr	r1, [r4, #32]
   15d9c:	blx	r1
   15da0:	ldr	r6, [r5, #4]
   15da4:	cmp	r6, #0
   15da8:	beq	15d78 <__assert_fail@plt+0x42dc>
   15dac:	ldr	r1, [r4, #32]
   15db0:	ldr	r0, [r6]
   15db4:	blx	r1
   15db8:	ldr	r6, [r6, #4]
   15dbc:	cmp	r6, #0
   15dc0:	bne	15dac <__assert_fail@plt+0x4310>
   15dc4:	b	15d78 <__assert_fail@plt+0x42dc>
   15dc8:	ldr	r5, [r4]
   15dcc:	ldr	r1, [r4, #4]
   15dd0:	cmp	r5, r1
   15dd4:	bcc	15de8 <__assert_fail@plt+0x434c>
   15dd8:	b	15e10 <__assert_fail@plt+0x4374>
   15ddc:	add	r5, r5, #8
   15de0:	cmp	r5, r1
   15de4:	bcs	15e10 <__assert_fail@plt+0x4374>
   15de8:	ldr	r0, [r5, #4]
   15dec:	cmp	r0, #0
   15df0:	beq	15ddc <__assert_fail@plt+0x4340>
   15df4:	ldr	r6, [r0, #4]
   15df8:	bl	13164 <__assert_fail@plt+0x16c8>
   15dfc:	cmp	r6, #0
   15e00:	mov	r0, r6
   15e04:	bne	15df4 <__assert_fail@plt+0x4358>
   15e08:	ldr	r1, [r4, #4]
   15e0c:	b	15ddc <__assert_fail@plt+0x4340>
   15e10:	ldr	r0, [r4, #36]	; 0x24
   15e14:	cmp	r0, #0
   15e18:	beq	15e30 <__assert_fail@plt+0x4394>
   15e1c:	ldr	r5, [r0, #4]
   15e20:	bl	13164 <__assert_fail@plt+0x16c8>
   15e24:	cmp	r5, #0
   15e28:	mov	r0, r5
   15e2c:	bne	15e1c <__assert_fail@plt+0x4380>
   15e30:	ldr	r0, [r4]
   15e34:	bl	13164 <__assert_fail@plt+0x16c8>
   15e38:	mov	r0, r4
   15e3c:	pop	{r4, r5, r6, sl, fp, lr}
   15e40:	b	13164 <__assert_fail@plt+0x16c8>
   15e44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e48:	add	fp, sp, #28
   15e4c:	sub	sp, sp, #44	; 0x2c
   15e50:	mov	r7, r0
   15e54:	mov	r4, r0
   15e58:	ldr	r0, [r7, #20]!
   15e5c:	ldrb	r2, [r0, #16]
   15e60:	cmp	r2, #0
   15e64:	bne	15e94 <__assert_fail@plt+0x43f8>
   15e68:	vmov	s2, r1
   15e6c:	vldr	s0, [r0, #8]
   15e70:	vldr	s4, [pc, #564]	; 160ac <__assert_fail@plt+0x4610>
   15e74:	mov	r5, #0
   15e78:	vcvt.f32.u32	s2, s2
   15e7c:	vdiv.f32	s2, s2, s0
   15e80:	vcvt.u32.f32	s0, s2
   15e84:	vcmpe.f32	s2, s4
   15e88:	vmrs	APSR_nzcv, fpscr
   15e8c:	bge	1609c <__assert_fail@plt+0x4600>
   15e90:	vmov	r1, s0
   15e94:	cmp	r1, #10
   15e98:	mov	r5, #0
   15e9c:	movls	r1, #10
   15ea0:	orr	r6, r1, #1
   15ea4:	cmn	r6, #1
   15ea8:	beq	1609c <__assert_fail@plt+0x4600>
   15eac:	mov	r0, #3
   15eb0:	cmp	r6, #10
   15eb4:	bcc	15eec <__assert_fail@plt+0x4450>
   15eb8:	mov	r0, #3
   15ebc:	mov	r2, #9
   15ec0:	mov	r1, #12
   15ec4:	udiv	r3, r6, r0
   15ec8:	mls	r3, r3, r0, r6
   15ecc:	cmp	r3, #0
   15ed0:	beq	15eec <__assert_fail@plt+0x4450>
   15ed4:	add	r2, r2, r1
   15ed8:	add	r1, r1, #8
   15edc:	add	r0, r0, #2
   15ee0:	add	r2, r2, #4
   15ee4:	cmp	r2, r6
   15ee8:	bcc	15ec4 <__assert_fail@plt+0x4428>
   15eec:	udiv	r1, r6, r0
   15ef0:	mls	r0, r1, r0, r6
   15ef4:	cmp	r0, #0
   15ef8:	bne	15f0c <__assert_fail@plt+0x4470>
   15efc:	add	r6, r6, #2
   15f00:	cmn	r6, #1
   15f04:	bne	15eac <__assert_fail@plt+0x4410>
   15f08:	b	1609c <__assert_fail@plt+0x4600>
   15f0c:	sub	r0, r6, #1
   15f10:	cmn	r0, #-536870910	; 0xe0000002
   15f14:	bhi	1609c <__assert_fail@plt+0x4600>
   15f18:	ldr	r0, [r4, #8]
   15f1c:	cmp	r6, r0
   15f20:	bne	15f2c <__assert_fail@plt+0x4490>
   15f24:	mov	r5, #1
   15f28:	b	1609c <__assert_fail@plt+0x4600>
   15f2c:	mov	r0, r6
   15f30:	mov	r1, #8
   15f34:	bl	19ed4 <lchmod@@Base+0x34d4>
   15f38:	cmp	r0, #0
   15f3c:	str	r0, [sp, #4]
   15f40:	beq	1609c <__assert_fail@plt+0x4600>
   15f44:	add	r0, r0, r6, lsl #3
   15f48:	mov	r1, #0
   15f4c:	add	r5, sp, #4
   15f50:	mov	sl, r4
   15f54:	mov	r2, #0
   15f58:	str	r1, [sp, #20]
   15f5c:	str	r1, [sp, #16]
   15f60:	str	r6, [sp, #12]
   15f64:	mov	r1, r4
   15f68:	str	r0, [sp, #8]
   15f6c:	add	r0, r5, #20
   15f70:	vld1.32	{d16-d17}, [r7]
   15f74:	vst1.32	{d16-d17}, [r0]
   15f78:	ldr	r0, [sl, #36]!	; 0x24
   15f7c:	str	r0, [sp, #40]	; 0x28
   15f80:	mov	r0, r5
   15f84:	bl	160b0 <__assert_fail@plt+0x4614>
   15f88:	cmp	r0, #0
   15f8c:	beq	15fb4 <__assert_fail@plt+0x4518>
   15f90:	ldr	r0, [r4]
   15f94:	bl	13164 <__assert_fail@plt+0x16c8>
   15f98:	mov	r0, #36	; 0x24
   15f9c:	vld1.32	{d16-d17}, [r5], r0
   15fa0:	vst1.32	{d16-d17}, [r4], r0
   15fa4:	ldr	r0, [r5]
   15fa8:	mov	r5, #1
   15fac:	str	r0, [r4]
   15fb0:	b	1609c <__assert_fail@plt+0x4600>
   15fb4:	ldr	r0, [sp, #40]	; 0x28
   15fb8:	str	r0, [sl]
   15fbc:	ldr	r0, [sp, #8]
   15fc0:	ldr	r8, [sp, #4]
   15fc4:	cmp	r8, r0
   15fc8:	str	r0, [sp]
   15fcc:	bcs	16078 <__assert_fail@plt+0x45dc>
   15fd0:	mov	r9, #0
   15fd4:	b	15fec <__assert_fail@plt+0x4550>
   15fd8:	str	r9, [r8, #4]
   15fdc:	ldr	r0, [sp]
   15fe0:	add	r8, r8, #8
   15fe4:	cmp	r8, r0
   15fe8:	bcs	16078 <__assert_fail@plt+0x45dc>
   15fec:	ldr	r0, [r8]
   15ff0:	cmp	r0, #0
   15ff4:	beq	15fdc <__assert_fail@plt+0x4540>
   15ff8:	ldr	r6, [r8, #4]
   15ffc:	cmp	r6, #0
   16000:	beq	15fd8 <__assert_fail@plt+0x453c>
   16004:	ldr	r1, [r4, #8]
   16008:	b	1602c <__assert_fail@plt+0x4590>
   1600c:	add	r0, r3, r0, lsl #3
   16010:	add	r0, r0, #4
   16014:	ldr	r3, [r0]
   16018:	cmp	r2, #0
   1601c:	str	r3, [r6, #4]
   16020:	str	r6, [r0]
   16024:	mov	r6, r2
   16028:	beq	15fd8 <__assert_fail@plt+0x453c>
   1602c:	ldr	r5, [r6]
   16030:	ldr	r2, [r4, #24]
   16034:	mov	r0, r5
   16038:	blx	r2
   1603c:	ldr	r1, [r4, #8]
   16040:	cmp	r0, r1
   16044:	bcs	160a8 <__assert_fail@plt+0x460c>
   16048:	ldr	r3, [r4]
   1604c:	ldr	r2, [r6, #4]
   16050:	ldr	r7, [r3, r0, lsl #3]
   16054:	cmp	r7, #0
   16058:	bne	1600c <__assert_fail@plt+0x4570>
   1605c:	str	r5, [r3, r0, lsl #3]
   16060:	ldr	r0, [r4, #12]
   16064:	add	r0, r0, #1
   16068:	str	r0, [r4, #12]
   1606c:	mov	r0, sl
   16070:	str	r9, [r6]
   16074:	b	16014 <__assert_fail@plt+0x4578>
   16078:	add	r1, sp, #4
   1607c:	mov	r0, r4
   16080:	mov	r2, #0
   16084:	mov	r5, #0
   16088:	bl	160b0 <__assert_fail@plt+0x4614>
   1608c:	cmp	r0, #0
   16090:	beq	160a8 <__assert_fail@plt+0x460c>
   16094:	ldr	r0, [sp, #4]
   16098:	bl	13164 <__assert_fail@plt+0x16c8>
   1609c:	mov	r0, r5
   160a0:	sub	sp, fp, #28
   160a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160a8:	bl	11a3c <abort@plt>
   160ac:	svcmi	0x00800000
   160b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160b4:	add	fp, sp, #28
   160b8:	sub	sp, sp, #12
   160bc:	ldr	sl, [r1]
   160c0:	str	r1, [sp, #8]
   160c4:	ldr	r1, [r1, #4]
   160c8:	mov	r7, r0
   160cc:	mov	r0, #1
   160d0:	str	r2, [sp, #4]
   160d4:	cmp	sl, r1
   160d8:	bcs	16234 <__assert_fail@plt+0x4798>
   160dc:	add	r8, r7, #36	; 0x24
   160e0:	mov	r9, #0
   160e4:	b	16120 <__assert_fail@plt+0x4684>
   160e8:	str	r4, [r6, r5, lsl #3]
   160ec:	ldr	r0, [r7, #12]
   160f0:	add	r0, r0, #1
   160f4:	str	r0, [r7, #12]
   160f8:	ldr	r1, [sp, #8]
   160fc:	str	r9, [sl]
   16100:	ldr	r0, [r1, #12]
   16104:	sub	r0, r0, #1
   16108:	str	r0, [r1, #12]
   1610c:	ldr	r0, [sp, #8]
   16110:	add	sl, sl, #8
   16114:	ldr	r0, [r0, #4]
   16118:	cmp	sl, r0
   1611c:	bcs	16230 <__assert_fail@plt+0x4794>
   16120:	ldr	r4, [sl]
   16124:	cmp	r4, #0
   16128:	beq	1610c <__assert_fail@plt+0x4670>
   1612c:	ldr	r5, [sl, #4]
   16130:	cmp	r5, #0
   16134:	beq	161b0 <__assert_fail@plt+0x4714>
   16138:	ldr	r1, [r7, #8]
   1613c:	b	16170 <__assert_fail@plt+0x46d4>
   16140:	str	r4, [r3, r0, lsl #3]
   16144:	ldr	r0, [r7, #12]
   16148:	add	r0, r0, #1
   1614c:	str	r0, [r7, #12]
   16150:	mov	r0, r8
   16154:	str	r9, [r5]
   16158:	ldr	r3, [r0]
   1615c:	cmp	r2, #0
   16160:	str	r3, [r5, #4]
   16164:	str	r5, [r0]
   16168:	mov	r5, r2
   1616c:	beq	161ac <__assert_fail@plt+0x4710>
   16170:	ldr	r4, [r5]
   16174:	ldr	r2, [r7, #24]
   16178:	mov	r0, r4
   1617c:	blx	r2
   16180:	ldr	r1, [r7, #8]
   16184:	cmp	r0, r1
   16188:	bcs	16248 <__assert_fail@plt+0x47ac>
   1618c:	ldr	r3, [r7]
   16190:	ldr	r2, [r5, #4]
   16194:	ldr	r6, [r3, r0, lsl #3]
   16198:	cmp	r6, #0
   1619c:	beq	16140 <__assert_fail@plt+0x46a4>
   161a0:	add	r0, r3, r0, lsl #3
   161a4:	add	r0, r0, #4
   161a8:	b	16158 <__assert_fail@plt+0x46bc>
   161ac:	ldr	r4, [sl]
   161b0:	ldr	r0, [sp, #4]
   161b4:	str	r9, [sl, #4]
   161b8:	cmp	r0, #0
   161bc:	bne	1610c <__assert_fail@plt+0x4670>
   161c0:	ldr	r1, [r7, #8]
   161c4:	ldr	r2, [r7, #24]
   161c8:	mov	r0, r4
   161cc:	blx	r2
   161d0:	mov	r5, r0
   161d4:	ldr	r0, [r7, #8]
   161d8:	cmp	r5, r0
   161dc:	bcs	16248 <__assert_fail@plt+0x47ac>
   161e0:	ldr	r6, [r7]
   161e4:	ldr	r0, [r6, r5, lsl #3]
   161e8:	cmp	r0, #0
   161ec:	beq	160e8 <__assert_fail@plt+0x464c>
   161f0:	ldr	r0, [r8]
   161f4:	cmp	r0, #0
   161f8:	beq	16208 <__assert_fail@plt+0x476c>
   161fc:	ldr	r1, [r0, #4]
   16200:	str	r1, [r8]
   16204:	b	16218 <__assert_fail@plt+0x477c>
   16208:	mov	r0, #8
   1620c:	bl	19f28 <lchmod@@Base+0x3528>
   16210:	cmp	r0, #0
   16214:	beq	1623c <__assert_fail@plt+0x47a0>
   16218:	add	r1, r6, r5, lsl #3
   1621c:	str	r4, [r0]
   16220:	ldr	r2, [r1, #4]
   16224:	str	r2, [r0, #4]
   16228:	str	r0, [r1, #4]
   1622c:	b	160f8 <__assert_fail@plt+0x465c>
   16230:	mov	r0, #1
   16234:	sub	sp, fp, #28
   16238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1623c:	mov	r0, #0
   16240:	sub	sp, fp, #28
   16244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16248:	bl	11a3c <abort@plt>
   1624c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16250:	add	fp, sp, #28
   16254:	sub	sp, sp, #4
   16258:	cmp	r1, #0
   1625c:	beq	16578 <__assert_fail@plt+0x4adc>
   16260:	mov	r8, r2
   16264:	mov	sl, r1
   16268:	ldr	r1, [r0, #8]
   1626c:	ldr	r2, [r0, #24]
   16270:	mov	r4, r0
   16274:	mov	r0, sl
   16278:	blx	r2
   1627c:	mov	r7, r0
   16280:	ldr	r0, [r4, #8]
   16284:	cmp	r7, r0
   16288:	bcs	16578 <__assert_fail@plt+0x4adc>
   1628c:	ldr	r5, [r4]
   16290:	mov	r9, r5
   16294:	ldr	r1, [r9, r7, lsl #3]!
   16298:	cmp	r1, #0
   1629c:	beq	16328 <__assert_fail@plt+0x488c>
   162a0:	cmp	r1, sl
   162a4:	beq	162d0 <__assert_fail@plt+0x4834>
   162a8:	ldr	r2, [r4, #28]
   162ac:	mov	r0, sl
   162b0:	blx	r2
   162b4:	cmp	r0, #0
   162b8:	mov	r6, r9
   162bc:	beq	162e4 <__assert_fail@plt+0x4848>
   162c0:	ldr	r0, [r6]
   162c4:	cmp	r0, #0
   162c8:	bne	162d4 <__assert_fail@plt+0x4838>
   162cc:	b	16328 <__assert_fail@plt+0x488c>
   162d0:	mov	r0, sl
   162d4:	cmp	r8, #0
   162d8:	mov	r7, #0
   162dc:	strne	r0, [r8]
   162e0:	b	16514 <__assert_fail@plt+0x4a78>
   162e4:	add	r6, r5, r7, lsl #3
   162e8:	ldr	r0, [r6, #4]!
   162ec:	cmp	r0, #0
   162f0:	beq	16328 <__assert_fail@plt+0x488c>
   162f4:	ldr	r1, [r0]
   162f8:	cmp	r1, sl
   162fc:	beq	1631c <__assert_fail@plt+0x4880>
   16300:	ldr	r2, [r4, #28]
   16304:	mov	r0, sl
   16308:	blx	r2
   1630c:	ldr	r6, [r6]
   16310:	cmp	r0, #0
   16314:	beq	162e8 <__assert_fail@plt+0x484c>
   16318:	b	162c0 <__assert_fail@plt+0x4824>
   1631c:	mov	r0, sl
   16320:	cmp	r0, #0
   16324:	bne	162d4 <__assert_fail@plt+0x4838>
   16328:	vldr	s0, [r4, #8]
   1632c:	vldr	s2, [r4, #12]
   16330:	ldr	r0, [r4, #20]
   16334:	vcvt.f32.u32	s0, s0
   16338:	vcvt.f32.u32	s4, s2
   1633c:	vldr	s2, [r0, #8]
   16340:	vmul.f32	s6, s2, s0
   16344:	vcmpe.f32	s6, s4
   16348:	vmrs	APSR_nzcv, fpscr
   1634c:	bpl	164a0 <__assert_fail@plt+0x4a04>
   16350:	movw	r1, #44984	; 0xafb8
   16354:	movt	r1, #1
   16358:	cmp	r0, r1
   1635c:	beq	163e8 <__assert_fail@plt+0x494c>
   16360:	vldr	s6, [pc, #532]	; 1657c <__assert_fail@plt+0x4ae0>
   16364:	vcmpe.f32	s2, s6
   16368:	vmrs	APSR_nzcv, fpscr
   1636c:	ble	163d4 <__assert_fail@plt+0x4938>
   16370:	vldr	s8, [pc, #520]	; 16580 <__assert_fail@plt+0x4ae4>
   16374:	vcmpe.f32	s2, s8
   16378:	vmrs	APSR_nzcv, fpscr
   1637c:	bpl	163d4 <__assert_fail@plt+0x4938>
   16380:	vldr	s8, [pc, #508]	; 16584 <__assert_fail@plt+0x4ae8>
   16384:	vldr	s10, [r0, #12]
   16388:	vcmpe.f32	s10, s8
   1638c:	vmrs	APSR_nzcv, fpscr
   16390:	ble	163d4 <__assert_fail@plt+0x4938>
   16394:	vldr	s8, [r0]
   16398:	vcmpe.f32	s8, #0.0
   1639c:	vmrs	APSR_nzcv, fpscr
   163a0:	blt	163d4 <__assert_fail@plt+0x4938>
   163a4:	vadd.f32	s6, s8, s6
   163a8:	vcmpe.f32	s6, s2
   163ac:	vmrs	APSR_nzcv, fpscr
   163b0:	bpl	163d4 <__assert_fail@plt+0x4938>
   163b4:	vldr	s8, [r0, #4]
   163b8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   163bc:	vcmpe.f32	s8, s10
   163c0:	vmrs	APSR_nzcv, fpscr
   163c4:	bhi	163d4 <__assert_fail@plt+0x4938>
   163c8:	vcmpe.f32	s6, s8
   163cc:	vmrs	APSR_nzcv, fpscr
   163d0:	bmi	163ec <__assert_fail@plt+0x4950>
   163d4:	vldr	s2, [pc, #428]	; 16588 <__assert_fail@plt+0x4aec>
   163d8:	movw	r0, #44984	; 0xafb8
   163dc:	movt	r0, #1
   163e0:	str	r0, [r4, #20]
   163e4:	b	163ec <__assert_fail@plt+0x4950>
   163e8:	mov	r0, r1
   163ec:	vmul.f32	s6, s2, s0
   163f0:	vcmpe.f32	s6, s4
   163f4:	vmrs	APSR_nzcv, fpscr
   163f8:	bpl	164a0 <__assert_fail@plt+0x4a04>
   163fc:	vldr	s4, [r0, #12]
   16400:	ldrb	r0, [r0, #16]
   16404:	mvn	r7, #0
   16408:	cmp	r0, #0
   1640c:	vmul.f32	s0, s4, s0
   16410:	vldr	s4, [pc, #372]	; 1658c <__assert_fail@plt+0x4af0>
   16414:	vmul.f32	s2, s2, s0
   16418:	vseleq.f32	s0, s2, s0
   1641c:	vcmpe.f32	s0, s4
   16420:	vmrs	APSR_nzcv, fpscr
   16424:	bge	16514 <__assert_fail@plt+0x4a78>
   16428:	vcvt.u32.f32	s0, s0
   1642c:	mov	r0, r4
   16430:	vmov	r1, s0
   16434:	bl	15e44 <__assert_fail@plt+0x43a8>
   16438:	cmp	r0, #0
   1643c:	beq	16514 <__assert_fail@plt+0x4a78>
   16440:	ldr	r1, [r4, #8]
   16444:	ldr	r2, [r4, #24]
   16448:	mov	r0, sl
   1644c:	blx	r2
   16450:	mov	r7, r0
   16454:	ldr	r0, [r4, #8]
   16458:	cmp	r7, r0
   1645c:	bcs	16578 <__assert_fail@plt+0x4adc>
   16460:	ldr	r5, [r4]
   16464:	mov	r9, r5
   16468:	ldr	r1, [r9, r7, lsl #3]!
   1646c:	cmp	r1, #0
   16470:	beq	164a0 <__assert_fail@plt+0x4a04>
   16474:	cmp	r1, sl
   16478:	mov	r0, sl
   1647c:	beq	16498 <__assert_fail@plt+0x49fc>
   16480:	ldr	r2, [r4, #28]
   16484:	mov	r0, sl
   16488:	blx	r2
   1648c:	cmp	r0, #0
   16490:	beq	16528 <__assert_fail@plt+0x4a8c>
   16494:	ldr	r0, [r9]
   16498:	cmp	r0, #0
   1649c:	bne	16578 <__assert_fail@plt+0x4adc>
   164a0:	ldr	r0, [r9]
   164a4:	cmp	r0, #0
   164a8:	beq	164c4 <__assert_fail@plt+0x4a28>
   164ac:	ldr	r0, [r4, #36]	; 0x24
   164b0:	cmp	r0, #0
   164b4:	beq	164e4 <__assert_fail@plt+0x4a48>
   164b8:	ldr	r1, [r0, #4]
   164bc:	str	r1, [r4, #36]	; 0x24
   164c0:	b	164f4 <__assert_fail@plt+0x4a58>
   164c4:	str	sl, [r9]
   164c8:	ldr	r0, [r4, #12]
   164cc:	ldr	r1, [r4, #16]
   164d0:	add	r0, r0, #1
   164d4:	add	r1, r1, #1
   164d8:	str	r0, [r4, #12]
   164dc:	str	r1, [r4, #16]
   164e0:	b	16510 <__assert_fail@plt+0x4a74>
   164e4:	mov	r0, #8
   164e8:	bl	19f28 <lchmod@@Base+0x3528>
   164ec:	cmp	r0, #0
   164f0:	beq	16520 <__assert_fail@plt+0x4a84>
   164f4:	str	sl, [r0]
   164f8:	ldr	r1, [r9, #4]
   164fc:	str	r1, [r0, #4]
   16500:	str	r0, [r9, #4]
   16504:	ldr	r0, [r4, #16]
   16508:	add	r0, r0, #1
   1650c:	str	r0, [r4, #16]
   16510:	mov	r7, #1
   16514:	mov	r0, r7
   16518:	sub	sp, fp, #28
   1651c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16520:	mvn	r7, #0
   16524:	b	16514 <__assert_fail@plt+0x4a78>
   16528:	add	r6, r5, r7, lsl #3
   1652c:	ldr	r0, [r6, #4]!
   16530:	cmp	r0, #0
   16534:	beq	164a0 <__assert_fail@plt+0x4a04>
   16538:	ldr	r1, [r0]
   1653c:	cmp	r1, sl
   16540:	beq	1656c <__assert_fail@plt+0x4ad0>
   16544:	ldr	r2, [r4, #28]
   16548:	mov	r0, sl
   1654c:	blx	r2
   16550:	ldr	r6, [r6]
   16554:	cmp	r0, #0
   16558:	beq	1652c <__assert_fail@plt+0x4a90>
   1655c:	ldr	r0, [r6]
   16560:	cmp	r0, #0
   16564:	beq	164a0 <__assert_fail@plt+0x4a04>
   16568:	b	16578 <__assert_fail@plt+0x4adc>
   1656c:	mov	r0, sl
   16570:	cmp	r0, #0
   16574:	beq	164a0 <__assert_fail@plt+0x4a04>
   16578:	bl	11a3c <abort@plt>
   1657c:	stclcc	12, cr12, [ip, #820]	; 0x334
   16580:	svccc	0x00666666
   16584:	svccc	0x008ccccd
   16588:	svccc	0x004ccccd
   1658c:	svcmi	0x00800000
   16590:	push	{r4, sl, fp, lr}
   16594:	add	fp, sp, #8
   16598:	sub	sp, sp, #8
   1659c:	add	r2, sp, #4
   165a0:	mov	r4, r1
   165a4:	bl	1624c <__assert_fail@plt+0x47b0>
   165a8:	cmn	r0, #1
   165ac:	beq	165c0 <__assert_fail@plt+0x4b24>
   165b0:	ldr	r1, [sp, #4]
   165b4:	cmp	r0, #0
   165b8:	moveq	r4, r1
   165bc:	b	165c4 <__assert_fail@plt+0x4b28>
   165c0:	mov	r4, #0
   165c4:	mov	r0, r4
   165c8:	sub	sp, fp, #8
   165cc:	pop	{r4, sl, fp, pc}
   165d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   165d4:	add	fp, sp, #24
   165d8:	mov	r9, r1
   165dc:	ldr	r1, [r0, #8]
   165e0:	ldr	r2, [r0, #24]
   165e4:	mov	r5, r0
   165e8:	mov	r0, r9
   165ec:	blx	r2
   165f0:	mov	r7, r0
   165f4:	ldr	r0, [r5, #8]
   165f8:	cmp	r7, r0
   165fc:	bcs	16860 <__assert_fail@plt+0x4dc4>
   16600:	ldr	r6, [r5]
   16604:	mov	r8, #0
   16608:	mov	r4, r6
   1660c:	ldr	r1, [r4, r7, lsl #3]!
   16610:	cmp	r1, #0
   16614:	beq	166c8 <__assert_fail@plt+0x4c2c>
   16618:	cmp	r1, r9
   1661c:	beq	16638 <__assert_fail@plt+0x4b9c>
   16620:	ldr	r2, [r5, #28]
   16624:	mov	r0, r9
   16628:	blx	r2
   1662c:	cmp	r0, #0
   16630:	beq	16670 <__assert_fail@plt+0x4bd4>
   16634:	ldr	r9, [r4]
   16638:	add	r0, r6, r7, lsl #3
   1663c:	ldr	r0, [r0, #4]
   16640:	cmp	r0, #0
   16644:	beq	166b8 <__assert_fail@plt+0x4c1c>
   16648:	ldm	r0, {r1, r2}
   1664c:	stm	r4, {r1, r2}
   16650:	mov	r1, #0
   16654:	str	r1, [r0]
   16658:	ldr	r1, [r5, #36]	; 0x24
   1665c:	str	r1, [r0, #4]
   16660:	str	r0, [r5, #36]	; 0x24
   16664:	cmp	r9, #0
   16668:	bne	16700 <__assert_fail@plt+0x4c64>
   1666c:	b	166c8 <__assert_fail@plt+0x4c2c>
   16670:	add	r7, r6, r7, lsl #3
   16674:	ldr	r0, [r7, #4]!
   16678:	cmp	r0, #0
   1667c:	beq	166c8 <__assert_fail@plt+0x4c2c>
   16680:	ldr	r1, [r0]
   16684:	cmp	r1, r9
   16688:	beq	166d0 <__assert_fail@plt+0x4c34>
   1668c:	ldr	r2, [r5, #28]
   16690:	mov	r0, r9
   16694:	blx	r2
   16698:	ldr	r1, [r7]
   1669c:	cmp	r0, #0
   166a0:	bne	166d8 <__assert_fail@plt+0x4c3c>
   166a4:	ldr	r0, [r1, #4]!
   166a8:	mov	r7, r1
   166ac:	cmp	r0, #0
   166b0:	bne	16680 <__assert_fail@plt+0x4be4>
   166b4:	b	166c8 <__assert_fail@plt+0x4c2c>
   166b8:	mov	r0, #0
   166bc:	str	r0, [r4]
   166c0:	cmp	r9, #0
   166c4:	bne	16700 <__assert_fail@plt+0x4c64>
   166c8:	mov	r0, r8
   166cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   166d0:	mov	r1, r0
   166d4:	b	166dc <__assert_fail@plt+0x4c40>
   166d8:	ldr	r9, [r1]
   166dc:	ldr	r0, [r1, #4]
   166e0:	str	r0, [r7]
   166e4:	mov	r0, #0
   166e8:	str	r0, [r1]
   166ec:	ldr	r0, [r5, #36]	; 0x24
   166f0:	str	r0, [r1, #4]
   166f4:	str	r1, [r5, #36]	; 0x24
   166f8:	cmp	r9, #0
   166fc:	beq	166c8 <__assert_fail@plt+0x4c2c>
   16700:	ldr	r0, [r5, #16]
   16704:	sub	r0, r0, #1
   16708:	str	r0, [r5, #16]
   1670c:	ldr	r0, [r4]
   16710:	cmp	r0, #0
   16714:	bne	16854 <__assert_fail@plt+0x4db8>
   16718:	ldr	r0, [r5, #12]
   1671c:	vldr	s0, [r5, #8]
   16720:	sub	r1, r0, #1
   16724:	str	r1, [r5, #12]
   16728:	vmov	s2, r1
   1672c:	ldr	r0, [r5, #20]
   16730:	vcvt.f32.u32	s0, s0
   16734:	vcvt.f32.u32	s2, s2
   16738:	vldr	s4, [r0]
   1673c:	vmul.f32	s6, s4, s0
   16740:	vcmpe.f32	s6, s2
   16744:	vmrs	APSR_nzcv, fpscr
   16748:	ble	16854 <__assert_fail@plt+0x4db8>
   1674c:	movw	r1, #44984	; 0xafb8
   16750:	movt	r1, #1
   16754:	cmp	r0, r1
   16758:	beq	167e4 <__assert_fail@plt+0x4d48>
   1675c:	vldr	s8, [pc, #256]	; 16864 <__assert_fail@plt+0x4dc8>
   16760:	vldr	s6, [r0, #8]
   16764:	vcmpe.f32	s6, s8
   16768:	vmrs	APSR_nzcv, fpscr
   1676c:	ble	167d0 <__assert_fail@plt+0x4d34>
   16770:	vldr	s10, [pc, #240]	; 16868 <__assert_fail@plt+0x4dcc>
   16774:	vcmpe.f32	s6, s10
   16778:	vmrs	APSR_nzcv, fpscr
   1677c:	bpl	167d0 <__assert_fail@plt+0x4d34>
   16780:	vcmpe.f32	s4, #0.0
   16784:	vmrs	APSR_nzcv, fpscr
   16788:	blt	167d0 <__assert_fail@plt+0x4d34>
   1678c:	vldr	s10, [r0, #12]
   16790:	vldr	s12, [pc, #212]	; 1686c <__assert_fail@plt+0x4dd0>
   16794:	vcmpe.f32	s10, s12
   16798:	vmrs	APSR_nzcv, fpscr
   1679c:	ble	167d0 <__assert_fail@plt+0x4d34>
   167a0:	vadd.f32	s8, s4, s8
   167a4:	vcmpe.f32	s8, s6
   167a8:	vmrs	APSR_nzcv, fpscr
   167ac:	bpl	167d0 <__assert_fail@plt+0x4d34>
   167b0:	vldr	s6, [r0, #4]
   167b4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   167b8:	vcmpe.f32	s6, s10
   167bc:	vmrs	APSR_nzcv, fpscr
   167c0:	bhi	167d0 <__assert_fail@plt+0x4d34>
   167c4:	vcmpe.f32	s8, s6
   167c8:	vmrs	APSR_nzcv, fpscr
   167cc:	bmi	167e8 <__assert_fail@plt+0x4d4c>
   167d0:	vldr	s4, [pc, #152]	; 16870 <__assert_fail@plt+0x4dd4>
   167d4:	movw	r0, #44984	; 0xafb8
   167d8:	movt	r0, #1
   167dc:	str	r0, [r5, #20]
   167e0:	b	167e8 <__assert_fail@plt+0x4d4c>
   167e4:	mov	r0, r1
   167e8:	vmul.f32	s4, s4, s0
   167ec:	vcmpe.f32	s4, s2
   167f0:	vmrs	APSR_nzcv, fpscr
   167f4:	ble	16854 <__assert_fail@plt+0x4db8>
   167f8:	vldr	s2, [r0, #4]
   167fc:	ldrb	r1, [r0, #16]
   16800:	cmp	r1, #0
   16804:	vmul.f32	s0, s2, s0
   16808:	bne	16814 <__assert_fail@plt+0x4d78>
   1680c:	vldr	s2, [r0, #8]
   16810:	vmul.f32	s0, s0, s2
   16814:	vcvt.u32.f32	s0, s0
   16818:	mov	r0, r5
   1681c:	vmov	r1, s0
   16820:	bl	15e44 <__assert_fail@plt+0x43a8>
   16824:	cmp	r0, #0
   16828:	bne	16854 <__assert_fail@plt+0x4db8>
   1682c:	ldr	r0, [r5, #36]	; 0x24
   16830:	cmp	r0, #0
   16834:	beq	1684c <__assert_fail@plt+0x4db0>
   16838:	ldr	r4, [r0, #4]
   1683c:	bl	13164 <__assert_fail@plt+0x16c8>
   16840:	cmp	r4, #0
   16844:	mov	r0, r4
   16848:	bne	16838 <__assert_fail@plt+0x4d9c>
   1684c:	mov	r0, #0
   16850:	str	r0, [r5, #36]	; 0x24
   16854:	mov	r8, r9
   16858:	mov	r0, r8
   1685c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16860:	bl	11a3c <abort@plt>
   16864:	stclcc	12, cr12, [ip, #820]	; 0x334
   16868:	svccc	0x00666666
   1686c:	svccc	0x008ccccd
   16870:	andeq	r0, r0, r0
   16874:	b	165d0 <__assert_fail@plt+0x4b34>
   16878:	push	{r4, r5, fp, lr}
   1687c:	add	fp, sp, #8
   16880:	mov	r5, r0
   16884:	ldr	r0, [r0]
   16888:	mov	r4, r1
   1688c:	bl	1a560 <lchmod@@Base+0x3b60>
   16890:	ldrd	r2, [r5, #8]
   16894:	eor	r0, r2, r0
   16898:	mov	r1, r3
   1689c:	mov	r2, r4
   168a0:	mov	r3, #0
   168a4:	bl	1a78c <lchmod@@Base+0x3d8c>
   168a8:	mov	r0, r2
   168ac:	pop	{r4, r5, fp, pc}
   168b0:	push	{r4, r5, fp, lr}
   168b4:	add	fp, sp, #8
   168b8:	mov	lr, r1
   168bc:	mov	r2, r0
   168c0:	ldr	r3, [r2, #8]!
   168c4:	ldr	ip, [lr, #8]!
   168c8:	ldr	r4, [r2, #4]
   168cc:	eor	ip, r3, ip
   168d0:	ldr	r3, [lr, #4]
   168d4:	eor	r3, r4, r3
   168d8:	orrs	r3, ip, r3
   168dc:	mov	ip, #0
   168e0:	bne	16910 <__assert_fail@plt+0x4e74>
   168e4:	ldrd	r4, [lr, #8]
   168e8:	ldrd	r2, [r2, #8]
   168ec:	eor	r3, r3, r5
   168f0:	eor	r2, r2, r4
   168f4:	orrs	r2, r2, r3
   168f8:	bne	16910 <__assert_fail@plt+0x4e74>
   168fc:	ldr	r1, [r1]
   16900:	ldr	r0, [r0]
   16904:	bl	116d0 <strcmp@plt>
   16908:	clz	r0, r0
   1690c:	lsr	ip, r0, #5
   16910:	mov	r0, ip
   16914:	pop	{r4, r5, fp, pc}
   16918:	push	{r4, sl, fp, lr}
   1691c:	add	fp, sp, #8
   16920:	mov	r4, r0
   16924:	ldr	r0, [r0]
   16928:	bl	13164 <__assert_fail@plt+0x16c8>
   1692c:	mov	r0, r4
   16930:	pop	{r4, sl, fp, lr}
   16934:	b	13164 <__assert_fail@plt+0x16c8>
   16938:	vdup.32	q8, r1
   1693c:	mov	r2, #0
   16940:	str	r2, [r0, #20]
   16944:	str	r2, [r0, #24]
   16948:	mov	r2, #1
   1694c:	strb	r2, [r0, #28]
   16950:	vst1.32	{d16-d17}, [r0]!
   16954:	str	r1, [r0]
   16958:	bx	lr
   1695c:	ldrb	r0, [r0, #28]
   16960:	bx	lr
   16964:	push	{fp, lr}
   16968:	mov	fp, sp
   1696c:	ldrb	r3, [r0, #28]
   16970:	ldr	r2, [r0, #20]
   16974:	eor	lr, r3, #1
   16978:	add	r2, r2, lr
   1697c:	and	r3, r2, #3
   16980:	ldr	ip, [r0, r3, lsl #2]
   16984:	str	r1, [r0, r3, lsl #2]
   16988:	str	r3, [r0, #20]
   1698c:	ldr	r1, [r0, #24]
   16990:	cmp	r3, r1
   16994:	addeq	r1, r2, lr
   16998:	andeq	r1, r1, #3
   1699c:	streq	r1, [r0, #24]
   169a0:	mov	r1, #0
   169a4:	strb	r1, [r0, #28]
   169a8:	mov	r0, ip
   169ac:	pop	{fp, pc}
   169b0:	push	{fp, lr}
   169b4:	mov	fp, sp
   169b8:	ldrb	r1, [r0, #28]
   169bc:	cmp	r1, #0
   169c0:	bne	169fc <__assert_fail@plt+0x4f60>
   169c4:	ldr	r3, [r0, #20]
   169c8:	ldr	r2, [r0, #16]
   169cc:	ldr	r1, [r0, r3, lsl #2]
   169d0:	str	r2, [r0, r3, lsl #2]
   169d4:	ldr	r2, [r0, #20]
   169d8:	ldr	r3, [r0, #24]
   169dc:	cmp	r2, r3
   169e0:	moveq	r2, #1
   169e4:	strbeq	r2, [r0, #28]
   169e8:	subne	r2, r2, #1
   169ec:	andne	r2, r2, #3
   169f0:	strne	r2, [r0, #20]
   169f4:	mov	r0, r1
   169f8:	pop	{fp, pc}
   169fc:	bl	11a3c <abort@plt>

00016a00 <lchmod@@Base>:
   16a00:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16a04:	add	fp, sp, #24
   16a08:	sub	sp, sp, #136	; 0x88
   16a0c:	mov	r4, r1
   16a10:	mov	r1, #2654208	; 0x288000
   16a14:	mov	r5, r0
   16a18:	bl	11820 <open64@plt>
   16a1c:	mov	r6, r0
   16a20:	cmp	r0, #0
   16a24:	bmi	16a70 <lchmod@@Base+0x70>
   16a28:	movw	r2, #44628	; 0xae54
   16a2c:	mov	r0, #4096	; 0x1000
   16a30:	add	r3, sp, #32
   16a34:	mov	r1, r6
   16a38:	movt	r2, #1
   16a3c:	str	r0, [sp]
   16a40:	mov	r0, #3
   16a44:	bl	1179c <__fxstatat64@plt>
   16a48:	cmp	r0, #0
   16a4c:	beq	16a78 <lchmod@@Base+0x78>
   16a50:	bl	118ec <__errno_location@plt>
   16a54:	ldr	r5, [r0]
   16a58:	mov	r4, r0
   16a5c:	mov	r0, r6
   16a60:	bl	11a48 <close@plt>
   16a64:	str	r5, [r4]
   16a68:	mvn	r7, #0
   16a6c:	b	16b18 <lchmod@@Base+0x118>
   16a70:	mov	r7, r6
   16a74:	b	16b18 <lchmod@@Base+0x118>
   16a78:	ldr	r0, [sp, #48]	; 0x30
   16a7c:	and	r0, r0, #61440	; 0xf000
   16a80:	cmp	r0, #40960	; 0xa000
   16a84:	bne	16aa4 <lchmod@@Base+0xa4>
   16a88:	mov	r0, r6
   16a8c:	bl	11a48 <close@plt>
   16a90:	bl	118ec <__errno_location@plt>
   16a94:	mov	r1, #95	; 0x5f
   16a98:	mvn	r7, #0
   16a9c:	str	r1, [r0]
   16aa0:	b	16b18 <lchmod@@Base+0x118>
   16aa4:	movw	r3, #45004	; 0xafcc
   16aa8:	add	r7, sp, #6
   16aac:	mov	r1, #1
   16ab0:	mov	r2, #26
   16ab4:	str	r6, [sp]
   16ab8:	movt	r3, #1
   16abc:	mov	r0, r7
   16ac0:	bl	118f8 <__sprintf_chk@plt>
   16ac4:	mov	r0, r7
   16ac8:	mov	r1, r4
   16acc:	bl	11a18 <chmod@plt>
   16ad0:	mov	r7, r0
   16ad4:	bl	118ec <__errno_location@plt>
   16ad8:	ldr	r9, [r0]
   16adc:	mov	r8, r0
   16ae0:	mov	r0, r6
   16ae4:	bl	11a48 <close@plt>
   16ae8:	cmp	r7, #0
   16aec:	beq	16b0c <lchmod@@Base+0x10c>
   16af0:	cmp	r9, #2
   16af4:	bne	16b14 <lchmod@@Base+0x114>
   16af8:	mov	r0, r5
   16afc:	mov	r1, r4
   16b00:	bl	11a18 <chmod@plt>
   16b04:	mov	r7, r0
   16b08:	b	16b18 <lchmod@@Base+0x118>
   16b0c:	mov	r7, #0
   16b10:	b	16b18 <lchmod@@Base+0x118>
   16b14:	str	r9, [r8]
   16b18:	mov	r0, r7
   16b1c:	sub	sp, fp, #24
   16b20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b28:	add	fp, sp, #28
   16b2c:	sub	sp, sp, #4
   16b30:	ldrb	r1, [r0]
   16b34:	mov	r4, r0
   16b38:	and	r0, r1, #248	; 0xf8
   16b3c:	cmp	r0, #48	; 0x30
   16b40:	bne	16b8c <lchmod@@Base+0x18c>
   16b44:	mov	r0, #0
   16b48:	mov	r5, #0
   16b4c:	mov	r2, r4
   16b50:	lsl	r3, r5, #3
   16b54:	uxtab	r1, r3, r1
   16b58:	sub	r5, r1, #48	; 0x30
   16b5c:	cmp	r0, r5, lsr #12
   16b60:	bne	16b84 <lchmod@@Base+0x184>
   16b64:	ldrb	r1, [r2, #1]
   16b68:	add	r6, r2, #1
   16b6c:	and	r2, r1, #248	; 0xf8
   16b70:	cmp	r2, #48	; 0x30
   16b74:	mov	r2, r6
   16b78:	beq	16b50 <lchmod@@Base+0x150>
   16b7c:	cmp	r1, #0
   16b80:	beq	16ee4 <lchmod@@Base+0x4e4>
   16b84:	sub	sp, fp, #28
   16b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b8c:	movw	sl, #5
   16b90:	mov	r2, #1
   16b94:	mvn	r3, #42	; 0x2a
   16b98:	mov	r7, #1
   16b9c:	mov	r0, #1
   16ba0:	movt	sl, #4
   16ba4:	b	16bc0 <lchmod@@Base+0x1c0>
   16ba8:	cmp	r1, #0
   16bac:	beq	16be0 <lchmod@@Base+0x1e0>
   16bb0:	mov	r6, #0
   16bb4:	ldrb	r1, [r4, r7]
   16bb8:	add	r0, r6, r0
   16bbc:	add	r7, r7, #1
   16bc0:	uxtab	r6, r3, r1
   16bc4:	uxtb	r1, r1
   16bc8:	cmp	r6, #18
   16bcc:	bhi	16ba8 <lchmod@@Base+0x1a8>
   16bd0:	tst	sl, r2, lsl r6
   16bd4:	mov	r6, #1
   16bd8:	bne	16bb4 <lchmod@@Base+0x1b4>
   16bdc:	b	16ba8 <lchmod@@Base+0x1a8>
   16be0:	mov	r1, #16
   16be4:	bl	199a8 <lchmod@@Base+0x2fa8>
   16be8:	mov	r9, #0
   16bec:	mov	ip, #1
   16bf0:	mvn	lr, #87	; 0x57
   16bf4:	mov	r8, #0
   16bf8:	mov	r2, #0
   16bfc:	b	16c0c <lchmod@@Base+0x20c>
   16c00:	movw	r1, #4095	; 0xfff
   16c04:	orr	r2, r2, r1
   16c08:	add	r4, r4, #1
   16c0c:	ldrb	r6, [r4]
   16c10:	sub	r3, r6, #97	; 0x61
   16c14:	cmp	r3, #20
   16c18:	bhi	16c8c <lchmod@@Base+0x28c>
   16c1c:	add	r5, pc, #4
   16c20:	mov	r1, #2496	; 0x9c0
   16c24:	ldr	pc, [r5, r3, lsl #2]
   16c28:	andeq	r6, r1, r0, lsl #24
   16c2c:	andeq	r6, r1, r4, asr #30
   16c30:	andeq	r6, r1, r4, asr #30
   16c34:	andeq	r6, r1, r4, asr #30
   16c38:	andeq	r6, r1, r4, asr #30
   16c3c:	andeq	r6, r1, r4, asr #30
   16c40:	andeq	r6, r1, ip, ror ip
   16c44:	andeq	r6, r1, r4, asr #30
   16c48:	andeq	r6, r1, r4, asr #30
   16c4c:	andeq	r6, r1, r4, asr #30
   16c50:	andeq	r6, r1, r4, asr #30
   16c54:	andeq	r6, r1, r4, asr #30
   16c58:	andeq	r6, r1, r4, asr #30
   16c5c:	andeq	r6, r1, r4, asr #30
   16c60:	andeq	r6, r1, r4, lsl #25
   16c64:	andeq	r6, r1, r4, asr #30
   16c68:	andeq	r6, r1, r4, asr #30
   16c6c:	andeq	r6, r1, r4, asr #30
   16c70:	andeq	r6, r1, r4, asr #30
   16c74:	andeq	r6, r1, r4, asr #30
   16c78:	andeq	r6, r1, r4, lsl #24
   16c7c:	movw	r1, #1080	; 0x438
   16c80:	b	16c04 <lchmod@@Base+0x204>
   16c84:	movw	r1, #519	; 0x207
   16c88:	b	16c04 <lchmod@@Base+0x204>
   16c8c:	sub	r1, r6, #43	; 0x2b
   16c90:	cmp	r1, #18
   16c94:	bhi	16f44 <lchmod@@Base+0x544>
   16c98:	tst	sl, ip, lsl r1
   16c9c:	beq	16f44 <lchmod@@Base+0x544>
   16ca0:	ldrb	r1, [r4, #1]
   16ca4:	sub	r3, r1, #48	; 0x30
   16ca8:	cmp	r3, #8
   16cac:	bcs	16d08 <lchmod@@Base+0x308>
   16cb0:	add	r3, r4, #2
   16cb4:	mov	r7, #0
   16cb8:	lsl	r4, r7, #3
   16cbc:	uxtab	r1, r4, r1
   16cc0:	sub	r7, r1, #48	; 0x30
   16cc4:	cmp	r9, r7, lsr #12
   16cc8:	bne	16f44 <lchmod@@Base+0x544>
   16ccc:	ldrb	r1, [r3], #1
   16cd0:	and	r4, r1, #248	; 0xf8
   16cd4:	cmp	r4, #48	; 0x30
   16cd8:	beq	16cb8 <lchmod@@Base+0x2b8>
   16cdc:	cmp	r2, #0
   16ce0:	bne	16f44 <lchmod@@Base+0x544>
   16ce4:	sub	r4, r3, #1
   16ce8:	mov	r5, #1
   16cec:	movw	r2, #4095	; 0xfff
   16cf0:	cmp	r1, #0
   16cf4:	beq	16d34 <lchmod@@Base+0x334>
   16cf8:	cmp	r1, #44	; 0x2c
   16cfc:	movw	r1, #4095	; 0xfff
   16d00:	beq	16e40 <lchmod@@Base+0x440>
   16d04:	b	16f44 <lchmod@@Base+0x544>
   16d08:	add	r4, r4, #2
   16d0c:	cmp	r1, #103	; 0x67
   16d10:	beq	16d3c <lchmod@@Base+0x33c>
   16d14:	cmp	r1, #111	; 0x6f
   16d18:	beq	16d4c <lchmod@@Base+0x34c>
   16d1c:	cmp	r1, #117	; 0x75
   16d20:	bne	16d5c <lchmod@@Base+0x35c>
   16d24:	mov	r5, #3
   16d28:	mov	r1, #0
   16d2c:	mov	r7, #448	; 0x1c0
   16d30:	b	16e40 <lchmod@@Base+0x440>
   16d34:	movw	r1, #4095	; 0xfff
   16d38:	b	16e40 <lchmod@@Base+0x440>
   16d3c:	mov	r5, #3
   16d40:	mov	r1, #0
   16d44:	mov	r7, #56	; 0x38
   16d48:	b	16e40 <lchmod@@Base+0x440>
   16d4c:	mov	r5, #3
   16d50:	mov	r1, #0
   16d54:	mov	r7, #7
   16d58:	b	16e40 <lchmod@@Base+0x440>
   16d5c:	mov	r3, #1
   16d60:	mov	r7, #0
   16d64:	b	16d74 <lchmod@@Base+0x374>
   16d68:	orr	r7, r7, #512	; 0x200
   16d6c:	mov	r3, r5
   16d70:	ldrb	r1, [r4], #1
   16d74:	uxtab	r1, lr, r1
   16d78:	mov	r5, r3
   16d7c:	cmp	r1, #32
   16d80:	bhi	16e34 <lchmod@@Base+0x434>
   16d84:	add	ip, pc, #4
   16d88:	mov	r3, #2
   16d8c:	ldr	pc, [ip, r1, lsl #2]
   16d90:	andeq	r6, r1, r0, ror sp
   16d94:	andeq	r6, r1, r4, lsr lr
   16d98:	andeq	r6, r1, r4, lsr lr
   16d9c:	andeq	r6, r1, r4, lsr lr
   16da0:	andeq	r6, r1, r4, lsr lr
   16da4:	andeq	r6, r1, r4, lsr lr
   16da8:	andeq	r6, r1, r4, lsr lr
   16dac:	andeq	r6, r1, r4, lsr lr
   16db0:	andeq	r6, r1, r4, lsr lr
   16db4:	andeq	r6, r1, r4, lsr lr
   16db8:	andeq	r6, r1, r4, lsr lr
   16dbc:	andeq	r6, r1, r4, lsr lr
   16dc0:	andeq	r6, r1, r4, lsr lr
   16dc4:	andeq	r6, r1, r4, lsr lr
   16dc8:	andeq	r6, r1, r4, lsr lr
   16dcc:	andeq	r6, r1, r4, lsr lr
   16dd0:	andeq	r6, r1, r4, lsr lr
   16dd4:	andeq	r6, r1, r4, lsr lr
   16dd8:	andeq	r6, r1, r4, lsr lr
   16ddc:	andeq	r6, r1, r4, lsr lr
   16de0:	andeq	r6, r1, r4, lsr lr
   16de4:	andeq	r6, r1, r4, lsr lr
   16de8:	andeq	r6, r1, r4, lsr lr
   16dec:	andeq	r6, r1, r4, lsr lr
   16df0:	andeq	r6, r1, r4, lsr lr
   16df4:	andeq	r6, r1, r4, lsr lr
   16df8:	andeq	r6, r1, r4, lsl lr
   16dfc:	andeq	r6, r1, ip, lsl lr
   16e00:	andeq	r6, r1, r8, ror #26
   16e04:	andeq	r6, r1, r4, lsr lr
   16e08:	andeq	r6, r1, r4, lsr lr
   16e0c:	andeq	r6, r1, r4, lsr #28
   16e10:	andeq	r6, r1, ip, lsr #28
   16e14:	orr	r7, r7, #292	; 0x124
   16e18:	b	16d6c <lchmod@@Base+0x36c>
   16e1c:	orr	r7, r7, #3072	; 0xc00
   16e20:	b	16d6c <lchmod@@Base+0x36c>
   16e24:	orr	r7, r7, #146	; 0x92
   16e28:	b	16d6c <lchmod@@Base+0x36c>
   16e2c:	orr	r7, r7, #73	; 0x49
   16e30:	b	16d6c <lchmod@@Base+0x36c>
   16e34:	sub	r4, r4, #1
   16e38:	mov	r1, #0
   16e3c:	mov	ip, #1
   16e40:	mov	r3, r0
   16e44:	cmp	r1, #0
   16e48:	strb	r6, [r3, r8, lsl #4]!
   16e4c:	stmib	r3, {r2, r7}
   16e50:	strb	r5, [r3, #1]
   16e54:	bne	16e64 <lchmod@@Base+0x464>
   16e58:	cmp	r2, #0
   16e5c:	andne	r7, r7, r2
   16e60:	mov	r1, r7
   16e64:	add	r7, r0, r8, lsl #4
   16e68:	add	r3, r8, #1
   16e6c:	str	r1, [r7, #12]
   16e70:	ldrb	r6, [r4]
   16e74:	sub	r1, r6, #43	; 0x2b
   16e78:	cmp	r1, #18
   16e7c:	bhi	16f28 <lchmod@@Base+0x528>
   16e80:	add	r7, pc, #4
   16e84:	mov	r8, r3
   16e88:	ldr	pc, [r7, r1, lsl #2]
   16e8c:	andeq	r6, r1, r0, lsr #25
   16e90:	ldrdeq	r6, [r1], -r8
   16e94:	andeq	r6, r1, r0, lsr #25
   16e98:	andeq	r6, r1, r4, asr #30
   16e9c:	andeq	r6, r1, r4, asr #30
   16ea0:	andeq	r6, r1, r4, asr #30
   16ea4:	andeq	r6, r1, r4, asr #30
   16ea8:	andeq	r6, r1, r4, asr #30
   16eac:	andeq	r6, r1, r4, asr #30
   16eb0:	andeq	r6, r1, r4, asr #30
   16eb4:	andeq	r6, r1, r4, asr #30
   16eb8:	andeq	r6, r1, r4, asr #30
   16ebc:	andeq	r6, r1, r4, asr #30
   16ec0:	andeq	r6, r1, r4, asr #30
   16ec4:	andeq	r6, r1, r4, asr #30
   16ec8:	andeq	r6, r1, r4, asr #30
   16ecc:	andeq	r6, r1, r4, asr #30
   16ed0:	andeq	r6, r1, r4, asr #30
   16ed4:	andeq	r6, r1, r0, lsr #25
   16ed8:	add	r4, r4, #1
   16edc:	mov	r8, r3
   16ee0:	b	16bf8 <lchmod@@Base+0x1f8>
   16ee4:	mov	r0, #32
   16ee8:	bl	198d8 <lchmod@@Base+0x2ed8>
   16eec:	mov	r1, #0
   16ef0:	movw	r2, #317	; 0x13d
   16ef4:	and	r3, r5, #3072	; 0xc00
   16ef8:	movw	r7, #1023	; 0x3ff
   16efc:	strb	r1, [r0, #17]
   16f00:	strh	r2, [r0]
   16f04:	sub	r2, r6, r4
   16f08:	movw	r1, #4095	; 0xfff
   16f0c:	cmp	r2, #5
   16f10:	str	r1, [r0, #4]
   16f14:	str	r5, [r0, #8]
   16f18:	orrlt	r1, r3, r7
   16f1c:	str	r1, [r0, #12]
   16f20:	sub	sp, fp, #28
   16f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f28:	cmp	r6, #0
   16f2c:	bne	16f44 <lchmod@@Base+0x544>
   16f30:	add	r1, r0, r3, lsl #4
   16f34:	mov	r2, #0
   16f38:	strb	r2, [r1, #1]
   16f3c:	sub	sp, fp, #28
   16f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f44:	bl	13164 <__assert_fail@plt+0x16c8>
   16f48:	mov	r0, #0
   16f4c:	sub	sp, fp, #28
   16f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f54:	push	{r4, sl, fp, lr}
   16f58:	add	fp, sp, #8
   16f5c:	sub	sp, sp, #104	; 0x68
   16f60:	mov	r1, r0
   16f64:	mov	r2, sp
   16f68:	mov	r0, #3
   16f6c:	bl	11a24 <__xstat64@plt>
   16f70:	mov	r1, r0
   16f74:	mov	r0, #0
   16f78:	cmp	r1, #0
   16f7c:	beq	16f88 <lchmod@@Base+0x588>
   16f80:	sub	sp, fp, #8
   16f84:	pop	{r4, sl, fp, pc}
   16f88:	ldr	r4, [sp, #16]
   16f8c:	mov	r0, #32
   16f90:	bl	198d8 <lchmod@@Base+0x2ed8>
   16f94:	mov	r1, #0
   16f98:	strb	r1, [r0, #17]
   16f9c:	movw	r1, #4095	; 0xfff
   16fa0:	stmib	r0, {r1, r4}
   16fa4:	str	r1, [r0, #12]
   16fa8:	movw	r1, #317	; 0x13d
   16fac:	strh	r1, [r0]
   16fb0:	sub	sp, fp, #8
   16fb4:	pop	{r4, sl, fp, pc}
   16fb8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16fbc:	add	fp, sp, #24
   16fc0:	ldrb	r4, [r3, #1]
   16fc4:	ldr	ip, [fp, #8]
   16fc8:	bfc	r0, #12, #20
   16fcc:	cmp	r4, #0
   16fd0:	beq	170b0 <lchmod@@Base+0x6b0>
   16fd4:	cmp	r1, #0
   16fd8:	mov	lr, r1
   16fdc:	add	r3, r3, #8
   16fe0:	mov	r9, #0
   16fe4:	movw	r8, #4095	; 0xfff
   16fe8:	movwne	lr, #3072	; 0xc00
   16fec:	b	17008 <lchmod@@Base+0x608>
   16ff0:	bic	r0, r0, r3
   16ff4:	orr	r9, r3, r9
   16ff8:	ldrb	r4, [r5, #9]
   16ffc:	add	r3, r5, #16
   17000:	cmp	r4, #0
   17004:	beq	170b4 <lchmod@@Base+0x6b4>
   17008:	mov	r5, r3
   1700c:	ldr	r7, [r3, #-4]
   17010:	ldr	r3, [r3]
   17014:	uxtb	r4, r4
   17018:	ldr	r6, [r5, #4]
   1701c:	cmp	r4, #2
   17020:	bic	r6, lr, r6
   17024:	beq	17050 <lchmod@@Base+0x650>
   17028:	cmp	r4, #3
   1702c:	bne	1705c <lchmod@@Base+0x65c>
   17030:	and	r4, r3, r0
   17034:	tst	r4, #146	; 0x92
   17038:	mov	r3, r4
   1703c:	orrne	r3, r3, #146	; 0x92
   17040:	tst	r4, #292	; 0x124
   17044:	orrne	r3, r3, #292	; 0x124
   17048:	tst	r4, #73	; 0x49
   1704c:	b	17058 <lchmod@@Base+0x658>
   17050:	and	r4, r0, #73	; 0x49
   17054:	orrs	r4, r4, r1
   17058:	orrne	r3, r3, #73	; 0x49
   1705c:	cmp	r7, #0
   17060:	mov	r4, r7
   17064:	mvneq	r4, r2
   17068:	bic	r4, r4, r6
   1706c:	and	r3, r4, r3
   17070:	ldrb	r4, [r5, #-8]
   17074:	cmp	r4, #43	; 0x2b
   17078:	beq	170a8 <lchmod@@Base+0x6a8>
   1707c:	cmp	r4, #45	; 0x2d
   17080:	beq	16ff0 <lchmod@@Base+0x5f0>
   17084:	cmp	r4, #61	; 0x3d
   17088:	bne	16ff8 <lchmod@@Base+0x5f8>
   1708c:	mvn	r4, r7
   17090:	cmp	r7, #0
   17094:	orrne	r6, r6, r4
   17098:	and	r0, r6, r0
   1709c:	orr	r0, r3, r0
   170a0:	bic	r3, r8, r6
   170a4:	b	16ff4 <lchmod@@Base+0x5f4>
   170a8:	orr	r0, r3, r0
   170ac:	b	16ff4 <lchmod@@Base+0x5f4>
   170b0:	mov	r9, #0
   170b4:	cmp	ip, #0
   170b8:	strne	r9, [ip]
   170bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   170c0:	sub	sp, sp, #4
   170c4:	push	{fp, lr}
   170c8:	mov	fp, sp
   170cc:	sub	sp, sp, #4
   170d0:	str	r3, [fp, #8]
   170d4:	tst	r2, #64	; 0x40
   170d8:	mov	r3, #0
   170dc:	ldrne	r3, [fp, #8]
   170e0:	bl	118d4 <openat64@plt>
   170e4:	bl	191d8 <lchmod@@Base+0x27d8>
   170e8:	mov	sp, fp
   170ec:	pop	{fp, lr}
   170f0:	add	sp, sp, #4
   170f4:	bx	lr
   170f8:	push	{r4, r5, r6, sl, fp, lr}
   170fc:	add	fp, sp, #16
   17100:	orr	r2, r2, #18688	; 0x4900
   17104:	mov	r4, r3
   17108:	orr	r2, r2, #524288	; 0x80000
   1710c:	bl	170c0 <lchmod@@Base+0x6c0>
   17110:	mov	r5, r0
   17114:	mov	r0, #0
   17118:	cmp	r5, #0
   1711c:	bmi	17154 <lchmod@@Base+0x754>
   17120:	mov	r0, r5
   17124:	bl	119a0 <fdopendir@plt>
   17128:	cmp	r0, #0
   1712c:	beq	17138 <lchmod@@Base+0x738>
   17130:	str	r5, [r4]
   17134:	pop	{r4, r5, r6, sl, fp, pc}
   17138:	bl	118ec <__errno_location@plt>
   1713c:	ldr	r6, [r0]
   17140:	mov	r4, r0
   17144:	mov	r0, r5
   17148:	bl	11a48 <close@plt>
   1714c:	mov	r0, #0
   17150:	str	r6, [r4]
   17154:	pop	{r4, r5, r6, sl, fp, pc}
   17158:	push	{r4, r5, fp, lr}
   1715c:	add	fp, sp, #8
   17160:	cmp	r0, #0
   17164:	beq	171f8 <lchmod@@Base+0x7f8>
   17168:	mov	r1, #47	; 0x2f
   1716c:	mov	r4, r0
   17170:	bl	1197c <strrchr@plt>
   17174:	cmp	r0, #0
   17178:	mov	r5, r4
   1717c:	addne	r5, r0, #1
   17180:	sub	r0, r5, r4
   17184:	cmp	r0, #7
   17188:	blt	171dc <lchmod@@Base+0x7dc>
   1718c:	movw	r1, #45077	; 0xb015
   17190:	sub	r0, r5, #7
   17194:	mov	r2, #7
   17198:	movt	r1, #1
   1719c:	bl	11a30 <strncmp@plt>
   171a0:	cmp	r0, #0
   171a4:	bne	171dc <lchmod@@Base+0x7dc>
   171a8:	movw	r1, #45085	; 0xb01d
   171ac:	mov	r0, r5
   171b0:	mov	r2, #3
   171b4:	movt	r1, #1
   171b8:	bl	11a30 <strncmp@plt>
   171bc:	cmp	r0, #0
   171c0:	beq	171cc <lchmod@@Base+0x7cc>
   171c4:	mov	r4, r5
   171c8:	b	171dc <lchmod@@Base+0x7dc>
   171cc:	movw	r0, #49600	; 0xc1c0
   171d0:	add	r4, r5, #3
   171d4:	movt	r0, #2
   171d8:	str	r4, [r0]
   171dc:	movw	r0, #49604	; 0xc1c4
   171e0:	movt	r0, #2
   171e4:	str	r4, [r0]
   171e8:	movw	r0, #49640	; 0xc1e8
   171ec:	movt	r0, #2
   171f0:	str	r4, [r0]
   171f4:	pop	{r4, r5, fp, pc}
   171f8:	movw	r0, #49616	; 0xc1d0
   171fc:	mov	r1, #55	; 0x37
   17200:	mov	r2, #1
   17204:	movt	r0, #2
   17208:	ldr	r3, [r0]
   1720c:	movw	r0, #45021	; 0xafdd
   17210:	movt	r0, #1
   17214:	bl	117cc <fwrite@plt>
   17218:	bl	11a3c <abort@plt>
   1721c:	push	{r4, r5, r6, sl, fp, lr}
   17220:	add	fp, sp, #16
   17224:	mov	r4, r0
   17228:	movw	r0, #49648	; 0xc1f0
   1722c:	movt	r0, #2
   17230:	cmp	r4, #0
   17234:	moveq	r4, r0
   17238:	bl	118ec <__errno_location@plt>
   1723c:	ldr	r6, [r0]
   17240:	mov	r5, r0
   17244:	mov	r0, r4
   17248:	mov	r1, #48	; 0x30
   1724c:	bl	19d38 <lchmod@@Base+0x3338>
   17250:	str	r6, [r5]
   17254:	pop	{r4, r5, r6, sl, fp, pc}
   17258:	movw	r1, #49648	; 0xc1f0
   1725c:	cmp	r0, #0
   17260:	movt	r1, #2
   17264:	movne	r1, r0
   17268:	ldr	r0, [r1]
   1726c:	bx	lr
   17270:	movw	r2, #49648	; 0xc1f0
   17274:	cmp	r0, #0
   17278:	movt	r2, #2
   1727c:	movne	r2, r0
   17280:	str	r1, [r2]
   17284:	bx	lr
   17288:	movw	r3, #49648	; 0xc1f0
   1728c:	cmp	r0, #0
   17290:	and	r2, r2, #1
   17294:	movt	r3, #2
   17298:	movne	r3, r0
   1729c:	ubfx	r0, r1, #5, #3
   172a0:	and	r1, r1, #31
   172a4:	add	ip, r3, r0, lsl #2
   172a8:	mov	r0, #1
   172ac:	ldr	r3, [ip, #8]
   172b0:	and	r0, r0, r3, lsr r1
   172b4:	eor	r2, r0, r2
   172b8:	eor	r1, r3, r2, lsl r1
   172bc:	str	r1, [ip, #8]
   172c0:	bx	lr
   172c4:	movw	r2, #49648	; 0xc1f0
   172c8:	cmp	r0, #0
   172cc:	movt	r2, #2
   172d0:	movne	r2, r0
   172d4:	ldr	r0, [r2, #4]
   172d8:	str	r1, [r2, #4]
   172dc:	bx	lr
   172e0:	push	{fp, lr}
   172e4:	mov	fp, sp
   172e8:	movw	r3, #49648	; 0xc1f0
   172ec:	cmp	r0, #0
   172f0:	movt	r3, #2
   172f4:	movne	r3, r0
   172f8:	cmp	r1, #0
   172fc:	mov	r0, #10
   17300:	cmpne	r2, #0
   17304:	str	r0, [r3]
   17308:	bne	17310 <lchmod@@Base+0x910>
   1730c:	bl	11a3c <abort@plt>
   17310:	str	r1, [r3, #40]	; 0x28
   17314:	str	r2, [r3, #44]	; 0x2c
   17318:	pop	{fp, pc}
   1731c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17320:	add	fp, sp, #28
   17324:	sub	sp, sp, #20
   17328:	mov	r7, r0
   1732c:	ldr	r0, [fp, #8]
   17330:	movw	r5, #49648	; 0xc1f0
   17334:	mov	r8, r3
   17338:	mov	r9, r2
   1733c:	mov	sl, r1
   17340:	movt	r5, #2
   17344:	cmp	r0, #0
   17348:	movne	r5, r0
   1734c:	bl	118ec <__errno_location@plt>
   17350:	ldr	r2, [r5, #40]	; 0x28
   17354:	ldr	r3, [r5, #44]	; 0x2c
   17358:	mov	r4, r0
   1735c:	ldm	r5, {r0, r1}
   17360:	add	r5, r5, #8
   17364:	ldr	r6, [r4]
   17368:	stm	sp, {r0, r1, r5}
   1736c:	mov	r0, r7
   17370:	mov	r1, sl
   17374:	str	r2, [sp, #12]
   17378:	str	r3, [sp, #16]
   1737c:	mov	r2, r9
   17380:	mov	r3, r8
   17384:	bl	17394 <lchmod@@Base+0x994>
   17388:	str	r6, [r4]
   1738c:	sub	sp, fp, #28
   17390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17398:	add	fp, sp, #28
   1739c:	sub	sp, sp, #156	; 0x9c
   173a0:	mov	r5, r0
   173a4:	add	r0, r2, #1
   173a8:	mov	r6, r1
   173ac:	mov	sl, r3
   173b0:	str	r2, [fp, #-80]	; 0xffffffb0
   173b4:	str	r0, [sp, #72]	; 0x48
   173b8:	ldr	r0, [fp, #12]
   173bc:	and	r1, r0, #1
   173c0:	str	r1, [sp, #36]	; 0x24
   173c4:	and	r1, r0, #4
   173c8:	str	r1, [sp, #32]
   173cc:	ubfx	r9, r0, #1, #1
   173d0:	bl	117e4 <__ctype_get_mb_cur_max@plt>
   173d4:	str	r0, [sp, #40]	; 0x28
   173d8:	ldr	r0, [fp, #24]
   173dc:	ldr	r7, [fp, #8]
   173e0:	mov	r1, #0
   173e4:	str	r5, [fp, #-84]	; 0xffffffac
   173e8:	str	r1, [fp, #-56]	; 0xffffffc8
   173ec:	mov	r1, #0
   173f0:	str	r1, [sp, #60]	; 0x3c
   173f4:	mov	r1, #1
   173f8:	str	r1, [fp, #-48]	; 0xffffffd0
   173fc:	str	r0, [sp, #80]	; 0x50
   17400:	ldr	r0, [fp, #20]
   17404:	str	r0, [sp, #76]	; 0x4c
   17408:	mov	r0, #0
   1740c:	str	r0, [sp, #56]	; 0x38
   17410:	mov	r0, #0
   17414:	str	r0, [fp, #-88]	; 0xffffffa8
   17418:	mov	r0, #0
   1741c:	str	r0, [fp, #-72]	; 0xffffffb8
   17420:	mov	r0, #0
   17424:	cmp	r7, #10
   17428:	bhi	183bc <lchmod@@Base+0x19bc>
   1742c:	add	r1, pc, #24
   17430:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17434:	mov	r4, r6
   17438:	mov	r8, #0
   1743c:	mov	r2, #1
   17440:	mov	r3, #0
   17444:	mov	lr, sl
   17448:	ldr	pc, [r1, r7, lsl #2]
   1744c:	andeq	r7, r1, r0, lsl r5
   17450:	andeq	r7, r1, r4, ror #10
   17454:	andeq	r7, r1, r4, lsr #10
   17458:	andeq	r7, r1, r8, lsl #10
   1745c:	andeq	r7, r1, r8, asr r5
   17460:	andeq	r7, r1, ip, lsl #11
   17464:	andeq	r7, r1, r4, lsr r5
   17468:	andeq	r7, r1, r0, lsl r6
   1746c:	andeq	r7, r1, r8, ror r4
   17470:	andeq	r7, r1, r8, ror r4
   17474:	andeq	r7, r1, r0, lsr #9
   17478:	movw	r0, #45167	; 0xb06f
   1747c:	mov	r1, r7
   17480:	movt	r0, #1
   17484:	bl	18dc4 <lchmod@@Base+0x23c4>
   17488:	str	r0, [sp, #76]	; 0x4c
   1748c:	movw	r0, #45169	; 0xb071
   17490:	mov	r1, r7
   17494:	movt	r0, #1
   17498:	bl	18dc4 <lchmod@@Base+0x23c4>
   1749c:	str	r0, [sp, #80]	; 0x50
   174a0:	mov	r8, #0
   174a4:	tst	r9, #1
   174a8:	bne	174e0 <lchmod@@Base+0xae0>
   174ac:	ldr	r0, [sp, #76]	; 0x4c
   174b0:	ldrb	r0, [r0]
   174b4:	cmp	r0, #0
   174b8:	beq	174e0 <lchmod@@Base+0xae0>
   174bc:	ldr	r1, [sp, #76]	; 0x4c
   174c0:	mov	r8, #0
   174c4:	add	r1, r1, #1
   174c8:	cmp	r8, r4
   174cc:	strbcc	r0, [r5, r8]
   174d0:	ldrb	r0, [r1, r8]
   174d4:	add	r8, r8, #1
   174d8:	cmp	r0, #0
   174dc:	bne	174c8 <lchmod@@Base+0xac8>
   174e0:	ldr	r6, [sp, #80]	; 0x50
   174e4:	mov	r0, r6
   174e8:	bl	118bc <strlen@plt>
   174ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   174f0:	str	r0, [fp, #-72]	; 0xffffffb8
   174f4:	str	r6, [fp, #-88]	; 0xffffffa8
   174f8:	mov	r2, #1
   174fc:	mov	r3, r9
   17500:	mov	lr, sl
   17504:	b	17610 <lchmod@@Base+0xc10>
   17508:	mov	r0, #1
   1750c:	b	17564 <lchmod@@Base+0xb64>
   17510:	mov	r7, #0
   17514:	mov	r8, #0
   17518:	mov	r2, r0
   1751c:	mov	r3, #0
   17520:	b	17610 <lchmod@@Base+0xc10>
   17524:	tst	r9, #1
   17528:	bne	17564 <lchmod@@Base+0xb64>
   1752c:	mov	r2, r0
   17530:	b	175bc <lchmod@@Base+0xbbc>
   17534:	mov	r0, #1
   17538:	mov	r8, #0
   1753c:	mov	r7, #5
   17540:	mov	r2, #1
   17544:	str	r0, [fp, #-72]	; 0xffffffb8
   17548:	movw	r0, #45165	; 0xb06d
   1754c:	movt	r0, #1
   17550:	str	r0, [fp, #-88]	; 0xffffffa8
   17554:	b	17584 <lchmod@@Base+0xb84>
   17558:	mov	r2, #1
   1755c:	tst	r9, #1
   17560:	beq	175bc <lchmod@@Base+0xbbc>
   17564:	mov	r1, #1
   17568:	mov	r8, #0
   1756c:	mov	r7, #2
   17570:	mov	r2, r0
   17574:	str	r1, [fp, #-72]	; 0xffffffb8
   17578:	movw	r1, #45169	; 0xb071
   1757c:	movt	r1, #1
   17580:	str	r1, [fp, #-88]	; 0xffffffa8
   17584:	mov	r3, #1
   17588:	b	17610 <lchmod@@Base+0xc10>
   1758c:	tst	r9, #1
   17590:	beq	175e0 <lchmod@@Base+0xbe0>
   17594:	mov	r0, #1
   17598:	mov	r8, #0
   1759c:	mov	r2, #1
   175a0:	mov	r3, #1
   175a4:	mov	r7, #5
   175a8:	str	r0, [fp, #-72]	; 0xffffffb8
   175ac:	movw	r0, #45165	; 0xb06d
   175b0:	movt	r0, #1
   175b4:	str	r0, [fp, #-88]	; 0xffffffa8
   175b8:	b	17610 <lchmod@@Base+0xc10>
   175bc:	cmp	r4, #0
   175c0:	mov	r8, #1
   175c4:	mov	r3, #0
   175c8:	mov	r7, #2
   175cc:	movne	r0, #39	; 0x27
   175d0:	strbne	r0, [r5]
   175d4:	movw	r0, #45169	; 0xb071
   175d8:	movt	r0, #1
   175dc:	b	17604 <lchmod@@Base+0xc04>
   175e0:	cmp	r4, #0
   175e4:	mov	r8, #1
   175e8:	mov	r2, #1
   175ec:	mov	r7, #5
   175f0:	mov	r3, #0
   175f4:	movne	r0, #34	; 0x22
   175f8:	strbne	r0, [r5]
   175fc:	movw	r0, #45165	; 0xb06d
   17600:	movt	r0, #1
   17604:	str	r0, [fp, #-88]	; 0xffffffa8
   17608:	mov	r0, #1
   1760c:	str	r0, [fp, #-72]	; 0xffffffb8
   17610:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17614:	eor	r6, r3, #1
   17618:	str	r7, [fp, #-68]	; 0xffffffbc
   1761c:	str	r3, [fp, #-76]	; 0xffffffb4
   17620:	str	r2, [sp, #84]	; 0x54
   17624:	str	r6, [sp, #92]	; 0x5c
   17628:	cmp	r0, #0
   1762c:	movwne	r0, #1
   17630:	and	r1, r0, r3
   17634:	and	r1, r2, r1
   17638:	str	r1, [sp, #48]	; 0x30
   1763c:	sub	r1, r7, #2
   17640:	clz	r1, r1
   17644:	lsr	r1, r1, #5
   17648:	and	r1, r1, r3
   1764c:	str	r1, [sp, #64]	; 0x40
   17650:	subs	r1, r7, #2
   17654:	mov	r7, #0
   17658:	movwne	r1, #1
   1765c:	orr	r6, r1, r6
   17660:	and	r1, r1, r2
   17664:	and	r0, r0, r1
   17668:	str	r6, [sp, #68]	; 0x44
   1766c:	str	r0, [fp, #-60]	; 0xffffffc4
   17670:	orr	r0, r1, r3
   17674:	ldr	r1, [fp, #16]
   17678:	eor	r0, r0, #1
   1767c:	clz	r1, r1
   17680:	lsr	r1, r1, #5
   17684:	orr	r0, r1, r0
   17688:	str	r0, [fp, #-64]	; 0xffffffc0
   1768c:	eor	r0, r2, #1
   17690:	str	r0, [sp, #52]	; 0x34
   17694:	cmn	lr, #1
   17698:	beq	176a8 <lchmod@@Base+0xca8>
   1769c:	cmp	r7, lr
   176a0:	bne	176b4 <lchmod@@Base+0xcb4>
   176a4:	b	181fc <lchmod@@Base+0x17fc>
   176a8:	ldrb	r0, [ip, r7]
   176ac:	cmp	r0, #0
   176b0:	beq	18204 <lchmod@@Base+0x1804>
   176b4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   176b8:	mov	sl, #0
   176bc:	cmp	r0, #0
   176c0:	beq	176f8 <lchmod@@Base+0xcf8>
   176c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   176c8:	add	r5, r7, r0
   176cc:	cmp	r0, #2
   176d0:	bcc	176ec <lchmod@@Base+0xcec>
   176d4:	cmn	lr, #1
   176d8:	bne	176ec <lchmod@@Base+0xcec>
   176dc:	mov	r0, ip
   176e0:	bl	118bc <strlen@plt>
   176e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   176e8:	mov	lr, r0
   176ec:	cmp	r5, lr
   176f0:	bls	17700 <lchmod@@Base+0xd00>
   176f4:	ldr	r5, [fp, #-84]	; 0xffffffac
   176f8:	mov	r0, #0
   176fc:	b	1774c <lchmod@@Base+0xd4c>
   17700:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17704:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17708:	add	r0, ip, r7
   1770c:	mov	r6, r4
   17710:	mov	r4, lr
   17714:	bl	118b0 <bcmp@plt>
   17718:	ldr	r2, [sp, #92]	; 0x5c
   1771c:	cmp	r0, #0
   17720:	ldr	r5, [fp, #-84]	; 0xffffffac
   17724:	mov	r1, r0
   17728:	movwne	r1, #1
   1772c:	orr	r1, r1, r2
   17730:	tst	r1, #1
   17734:	beq	1828c <lchmod@@Base+0x188c>
   17738:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1773c:	clz	r0, r0
   17740:	mov	lr, r4
   17744:	mov	r4, r6
   17748:	lsr	r0, r0, #5
   1774c:	str	r0, [fp, #-52]	; 0xffffffcc
   17750:	ldrb	r6, [ip, r7]
   17754:	cmp	r6, #126	; 0x7e
   17758:	bhi	17c88 <lchmod@@Base+0x1288>
   1775c:	add	r3, pc, #16
   17760:	mov	r9, #1
   17764:	mov	r2, #110	; 0x6e
   17768:	mov	r0, #97	; 0x61
   1776c:	mov	r1, #0
   17770:	ldr	pc, [r3, r6, lsl #2]
   17774:	andeq	r7, r1, r8, ror #21
   17778:	andeq	r7, r1, r8, lsl #25
   1777c:	andeq	r7, r1, r8, lsl #25
   17780:	andeq	r7, r1, r8, lsl #25
   17784:	andeq	r7, r1, r8, lsl #25
   17788:	andeq	r7, r1, r8, lsl #25
   1778c:	andeq	r7, r1, r8, lsl #25
   17790:	andeq	r7, r1, r4, ror #26
   17794:	andeq	r7, r1, r8, asr #21
   17798:	andeq	r7, r1, r0, asr #21
   1779c:	ldrdeq	r7, [r1], -r4
   177a0:	strdeq	r7, [r1], -r0
   177a4:			; <UNDEFINED> instruction: 0x00017ab8
   177a8:	ldrdeq	r7, [r1], -r0
   177ac:	andeq	r7, r1, r8, lsl #25
   177b0:	andeq	r7, r1, r8, lsl #25
   177b4:	andeq	r7, r1, r8, lsl #25
   177b8:	andeq	r7, r1, r8, lsl #25
   177bc:	andeq	r7, r1, r8, lsl #25
   177c0:	andeq	r7, r1, r8, lsl #25
   177c4:	andeq	r7, r1, r8, lsl #25
   177c8:	andeq	r7, r1, r8, lsl #25
   177cc:	andeq	r7, r1, r8, lsl #25
   177d0:	andeq	r7, r1, r8, lsl #25
   177d4:	andeq	r7, r1, r8, lsl #25
   177d8:	andeq	r7, r1, r8, lsl #25
   177dc:	andeq	r7, r1, r8, lsl #25
   177e0:	andeq	r7, r1, r8, lsl #25
   177e4:	andeq	r7, r1, r8, lsl #25
   177e8:	andeq	r7, r1, r8, lsl #25
   177ec:	andeq	r7, r1, r8, lsl #25
   177f0:	andeq	r7, r1, r8, lsl #25
   177f4:	andeq	r7, r1, ip, ror #20
   177f8:	andeq	r7, r1, r0, ror sl
   177fc:	andeq	r7, r1, r0, ror sl
   17800:	andeq	r7, r1, r8, asr sl
   17804:	andeq	r7, r1, r0, ror sl
   17808:	andeq	r7, r1, r0, ror r9
   1780c:	andeq	r7, r1, r0, ror sl
   17810:	strdeq	r7, [r1], -r8
   17814:	andeq	r7, r1, r0, ror sl
   17818:	andeq	r7, r1, r0, ror sl
   1781c:	andeq	r7, r1, r0, ror sl
   17820:	andeq	r7, r1, r0, ror r9
   17824:	andeq	r7, r1, r0, ror r9
   17828:	andeq	r7, r1, r0, ror r9
   1782c:	andeq	r7, r1, r0, ror r9
   17830:	andeq	r7, r1, r0, ror r9
   17834:	andeq	r7, r1, r0, ror r9
   17838:	andeq	r7, r1, r0, ror r9
   1783c:	andeq	r7, r1, r0, ror r9
   17840:	andeq	r7, r1, r0, ror r9
   17844:	andeq	r7, r1, r0, ror r9
   17848:	andeq	r7, r1, r0, ror r9
   1784c:	andeq	r7, r1, r0, ror r9
   17850:	andeq	r7, r1, r0, ror r9
   17854:	andeq	r7, r1, r0, ror r9
   17858:	andeq	r7, r1, r0, ror r9
   1785c:	andeq	r7, r1, r0, ror r9
   17860:	andeq	r7, r1, r0, ror sl
   17864:	andeq	r7, r1, r0, ror sl
   17868:	andeq	r7, r1, r0, ror sl
   1786c:	andeq	r7, r1, r0, ror sl
   17870:	andeq	r7, r1, r0, asr #23
   17874:	andeq	r7, r1, r8, lsl #25
   17878:	andeq	r7, r1, r0, ror r9
   1787c:	andeq	r7, r1, r0, ror r9
   17880:	andeq	r7, r1, r0, ror r9
   17884:	andeq	r7, r1, r0, ror r9
   17888:	andeq	r7, r1, r0, ror r9
   1788c:	andeq	r7, r1, r0, ror r9
   17890:	andeq	r7, r1, r0, ror r9
   17894:	andeq	r7, r1, r0, ror r9
   17898:	andeq	r7, r1, r0, ror r9
   1789c:	andeq	r7, r1, r0, ror r9
   178a0:	andeq	r7, r1, r0, ror r9
   178a4:	andeq	r7, r1, r0, ror r9
   178a8:	andeq	r7, r1, r0, ror r9
   178ac:	andeq	r7, r1, r0, ror r9
   178b0:	andeq	r7, r1, r0, ror r9
   178b4:	andeq	r7, r1, r0, ror r9
   178b8:	andeq	r7, r1, r0, ror r9
   178bc:	andeq	r7, r1, r0, ror r9
   178c0:	andeq	r7, r1, r0, ror r9
   178c4:	andeq	r7, r1, r0, ror r9
   178c8:	andeq	r7, r1, r0, ror r9
   178cc:	andeq	r7, r1, r0, ror r9
   178d0:	andeq	r7, r1, r0, ror r9
   178d4:	andeq	r7, r1, r0, ror r9
   178d8:	andeq	r7, r1, r0, ror r9
   178dc:	andeq	r7, r1, r0, ror r9
   178e0:	andeq	r7, r1, r0, ror sl
   178e4:	muleq	r1, r8, sl
   178e8:	andeq	r7, r1, r0, ror r9
   178ec:	andeq	r7, r1, r0, ror sl
   178f0:	andeq	r7, r1, r0, ror r9
   178f4:	andeq	r7, r1, r0, ror sl
   178f8:	andeq	r7, r1, r0, ror r9
   178fc:	andeq	r7, r1, r0, ror r9
   17900:	andeq	r7, r1, r0, ror r9
   17904:	andeq	r7, r1, r0, ror r9
   17908:	andeq	r7, r1, r0, ror r9
   1790c:	andeq	r7, r1, r0, ror r9
   17910:	andeq	r7, r1, r0, ror r9
   17914:	andeq	r7, r1, r0, ror r9
   17918:	andeq	r7, r1, r0, ror r9
   1791c:	andeq	r7, r1, r0, ror r9
   17920:	andeq	r7, r1, r0, ror r9
   17924:	andeq	r7, r1, r0, ror r9
   17928:	andeq	r7, r1, r0, ror r9
   1792c:	andeq	r7, r1, r0, ror r9
   17930:	andeq	r7, r1, r0, ror r9
   17934:	andeq	r7, r1, r0, ror r9
   17938:	andeq	r7, r1, r0, ror r9
   1793c:	andeq	r7, r1, r0, ror r9
   17940:	andeq	r7, r1, r0, ror r9
   17944:	andeq	r7, r1, r0, ror r9
   17948:	andeq	r7, r1, r0, ror r9
   1794c:	andeq	r7, r1, r0, ror r9
   17950:	andeq	r7, r1, r0, ror r9
   17954:	andeq	r7, r1, r0, ror r9
   17958:	andeq	r7, r1, r0, ror r9
   1795c:	andeq	r7, r1, r0, ror r9
   17960:	andeq	r7, r1, ip, lsr #20
   17964:	andeq	r7, r1, r0, ror sl
   17968:	andeq	r7, r1, ip, lsr #20
   1796c:	andeq	r7, r1, r8, asr sl
   17970:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17974:	tst	r0, #1
   17978:	bne	179a4 <lchmod@@Base+0xfa4>
   1797c:	ldr	r1, [fp, #16]
   17980:	ubfx	r0, r6, #5, #3
   17984:	mov	r2, #1
   17988:	ldr	r0, [r1, r0, lsl #2]
   1798c:	and	r1, r6, #31
   17990:	tst	r0, r2, lsl r1
   17994:	beq	179a4 <lchmod@@Base+0xfa4>
   17998:	mov	r0, r6
   1799c:	mov	r1, r9
   179a0:	b	179b8 <lchmod@@Base+0xfb8>
   179a4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   179a8:	mov	r1, r9
   179ac:	cmp	r0, #0
   179b0:	mov	r0, r6
   179b4:	beq	17cf8 <lchmod@@Base+0x12f8>
   179b8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   179bc:	tst	r2, #1
   179c0:	bne	182c8 <lchmod@@Base+0x18c8>
   179c4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   179c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   179cc:	subs	r2, r2, #2
   179d0:	movwne	r2, #1
   179d4:	orr	r2, r2, r3
   179d8:	tst	r2, #1
   179dc:	bne	17a18 <lchmod@@Base+0x1018>
   179e0:	cmp	r8, r4
   179e4:	movcc	r2, #39	; 0x27
   179e8:	strbcc	r2, [r5, r8]
   179ec:	add	r2, r8, #1
   179f0:	cmp	r2, r4
   179f4:	movcc	r3, #36	; 0x24
   179f8:	strbcc	r3, [r5, r2]
   179fc:	add	r2, r8, #2
   17a00:	add	r8, r8, #3
   17a04:	cmp	r2, r4
   17a08:	movcc	r3, #39	; 0x27
   17a0c:	strbcc	r3, [r5, r2]
   17a10:	mov	r2, #1
   17a14:	str	r2, [fp, #-56]	; 0xffffffc8
   17a18:	cmp	r8, r4
   17a1c:	movcc	r2, #92	; 0x5c
   17a20:	strbcc	r2, [r5, r8]
   17a24:	add	r8, r8, #1
   17a28:	b	17d3c <lchmod@@Base+0x133c>
   17a2c:	cmp	lr, #1
   17a30:	beq	17a58 <lchmod@@Base+0x1058>
   17a34:	mov	r9, #0
   17a38:	cmn	lr, #1
   17a3c:	bne	17a64 <lchmod@@Base+0x1064>
   17a40:	ldrb	r0, [ip, #1]
   17a44:	cmp	r0, #0
   17a48:	beq	17a58 <lchmod@@Base+0x1058>
   17a4c:	mvn	lr, #0
   17a50:	mov	sl, #0
   17a54:	b	17970 <lchmod@@Base+0xf70>
   17a58:	mov	r9, #0
   17a5c:	cmp	r7, #0
   17a60:	beq	17a6c <lchmod@@Base+0x106c>
   17a64:	mov	sl, #0
   17a68:	b	17970 <lchmod@@Base+0xf70>
   17a6c:	mov	r1, #1
   17a70:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17a74:	cmp	r0, #2
   17a78:	bne	17a90 <lchmod@@Base+0x1090>
   17a7c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17a80:	mov	r9, r1
   17a84:	tst	r0, #1
   17a88:	beq	17970 <lchmod@@Base+0xf70>
   17a8c:	b	182c8 <lchmod@@Base+0x18c8>
   17a90:	mov	r9, r1
   17a94:	b	17970 <lchmod@@Base+0xf70>
   17a98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17a9c:	cmp	r0, #2
   17aa0:	bne	17cdc <lchmod@@Base+0x12dc>
   17aa4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17aa8:	tst	r0, #1
   17aac:	bne	182c8 <lchmod@@Base+0x18c8>
   17ab0:	mov	sl, #0
   17ab4:	b	17cf0 <lchmod@@Base+0x12f0>
   17ab8:	mov	r0, #102	; 0x66
   17abc:	b	17d64 <lchmod@@Base+0x1364>
   17ac0:	mov	r2, #116	; 0x74
   17ac4:	b	17ad4 <lchmod@@Base+0x10d4>
   17ac8:	mov	r0, #98	; 0x62
   17acc:	b	17d64 <lchmod@@Base+0x1364>
   17ad0:	mov	r2, #114	; 0x72
   17ad4:	ldr	r0, [sp, #68]	; 0x44
   17ad8:	tst	r0, #1
   17adc:	mov	r0, r2
   17ae0:	bne	17d64 <lchmod@@Base+0x1364>
   17ae4:	b	182c8 <lchmod@@Base+0x18c8>
   17ae8:	ldr	r0, [sp, #84]	; 0x54
   17aec:	tst	r0, #1
   17af0:	beq	17d80 <lchmod@@Base+0x1380>
   17af4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17af8:	tst	r0, #1
   17afc:	bne	183b4 <lchmod@@Base+0x19b4>
   17b00:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17b04:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17b08:	subs	r0, r0, #2
   17b0c:	movwne	r0, #1
   17b10:	orr	r0, r0, r1
   17b14:	tst	r0, #1
   17b18:	bne	17b54 <lchmod@@Base+0x1154>
   17b1c:	cmp	r8, r4
   17b20:	movcc	r0, #39	; 0x27
   17b24:	strbcc	r0, [r5, r8]
   17b28:	add	r0, r8, #1
   17b2c:	cmp	r0, r4
   17b30:	movcc	r1, #36	; 0x24
   17b34:	strbcc	r1, [r5, r0]
   17b38:	add	r0, r8, #2
   17b3c:	add	r8, r8, #3
   17b40:	cmp	r0, r4
   17b44:	movcc	r1, #39	; 0x27
   17b48:	strbcc	r1, [r5, r0]
   17b4c:	mov	r0, #1
   17b50:	str	r0, [fp, #-56]	; 0xffffffc8
   17b54:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17b58:	cmp	r8, r4
   17b5c:	mov	r9, #0
   17b60:	mov	sl, #1
   17b64:	mov	r6, #48	; 0x30
   17b68:	movcc	r0, #92	; 0x5c
   17b6c:	strbcc	r0, [r5, r8]
   17b70:	add	r0, r8, #1
   17b74:	cmp	r1, #2
   17b78:	beq	17f48 <lchmod@@Base+0x1548>
   17b7c:	add	r1, r7, #1
   17b80:	cmp	r1, lr
   17b84:	bcs	17f48 <lchmod@@Base+0x1548>
   17b88:	ldrb	r1, [ip, r1]
   17b8c:	sub	r1, r1, #48	; 0x30
   17b90:	uxtb	r1, r1
   17b94:	cmp	r1, #9
   17b98:	bhi	17f48 <lchmod@@Base+0x1548>
   17b9c:	cmp	r0, r4
   17ba0:	movcc	r1, #48	; 0x30
   17ba4:	strbcc	r1, [r5, r0]
   17ba8:	add	r0, r8, #2
   17bac:	add	r8, r8, #3
   17bb0:	cmp	r0, r4
   17bb4:	movcc	r1, #48	; 0x30
   17bb8:	strbcc	r1, [r5, r0]
   17bbc:	b	17970 <lchmod@@Base+0xf70>
   17bc0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17bc4:	mov	sl, #0
   17bc8:	mov	r6, #63	; 0x3f
   17bcc:	cmp	r0, #5
   17bd0:	beq	17f50 <lchmod@@Base+0x1550>
   17bd4:	cmp	r0, #2
   17bd8:	bne	17ff8 <lchmod@@Base+0x15f8>
   17bdc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17be0:	mov	r9, #0
   17be4:	tst	r0, #1
   17be8:	beq	17970 <lchmod@@Base+0xf70>
   17bec:	b	182c8 <lchmod@@Base+0x18c8>
   17bf0:	mov	r0, #118	; 0x76
   17bf4:	b	17d64 <lchmod@@Base+0x1364>
   17bf8:	mov	r0, #1
   17bfc:	mov	r6, #39	; 0x27
   17c00:	str	r0, [sp, #60]	; 0x3c
   17c04:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17c08:	cmp	r0, #2
   17c0c:	bne	17d9c <lchmod@@Base+0x139c>
   17c10:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17c14:	tst	r0, #1
   17c18:	bne	182c8 <lchmod@@Base+0x18c8>
   17c1c:	ldr	r2, [sp, #56]	; 0x38
   17c20:	clz	r1, r4
   17c24:	mov	sl, #0
   17c28:	mov	r9, #1
   17c2c:	lsr	r1, r1, #5
   17c30:	cmp	r2, #0
   17c34:	mov	r0, r2
   17c38:	movwne	r0, #1
   17c3c:	orrs	r0, r0, r1
   17c40:	moveq	r2, r4
   17c44:	moveq	r4, r0
   17c48:	cmp	r8, r4
   17c4c:	str	r2, [sp, #56]	; 0x38
   17c50:	movcc	r0, #39	; 0x27
   17c54:	strbcc	r0, [r5, r8]
   17c58:	add	r0, r8, #1
   17c5c:	cmp	r0, r4
   17c60:	movcc	r1, #92	; 0x5c
   17c64:	strbcc	r1, [r5, r0]
   17c68:	add	r0, r8, #2
   17c6c:	add	r8, r8, #3
   17c70:	cmp	r0, r4
   17c74:	movcc	r1, #39	; 0x27
   17c78:	strbcc	r1, [r5, r0]
   17c7c:	mov	r0, #0
   17c80:	str	r0, [fp, #-56]	; 0xffffffc8
   17c84:	b	17970 <lchmod@@Base+0xf70>
   17c88:	ldr	r0, [sp, #40]	; 0x28
   17c8c:	str	r4, [sp, #88]	; 0x58
   17c90:	cmp	r0, #1
   17c94:	bne	17da4 <lchmod@@Base+0x13a4>
   17c98:	str	lr, [sp, #28]
   17c9c:	bl	11880 <__ctype_b_loc@plt>
   17ca0:	ldr	r0, [r0]
   17ca4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17ca8:	mov	r2, #1
   17cac:	add	r0, r0, r6, lsl #1
   17cb0:	ldrb	r0, [r0, #1]
   17cb4:	ubfx	r9, r0, #6, #1
   17cb8:	ldr	r0, [sp, #52]	; 0x34
   17cbc:	cmp	r2, #1
   17cc0:	orr	r0, r9, r0
   17cc4:	bhi	18000 <lchmod@@Base+0x1600>
   17cc8:	tst	r0, #1
   17ccc:	beq	18000 <lchmod@@Base+0x1600>
   17cd0:	ldr	lr, [sp, #28]
   17cd4:	ldr	r4, [sp, #88]	; 0x58
   17cd8:	b	17970 <lchmod@@Base+0xf70>
   17cdc:	ldr	r1, [sp, #48]	; 0x30
   17ce0:	mov	sl, #0
   17ce4:	mov	r0, #92	; 0x5c
   17ce8:	cmp	r1, #0
   17cec:	beq	17d64 <lchmod@@Base+0x1364>
   17cf0:	mov	r6, #92	; 0x5c
   17cf4:	mov	r9, #0
   17cf8:	cmp	sl, #0
   17cfc:	bne	17d34 <lchmod@@Base+0x1334>
   17d00:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17d04:	tst	r0, #1
   17d08:	beq	17d34 <lchmod@@Base+0x1334>
   17d0c:	cmp	r8, r4
   17d10:	movcc	r0, #39	; 0x27
   17d14:	strbcc	r0, [r5, r8]
   17d18:	add	r0, r8, #1
   17d1c:	add	r8, r8, #2
   17d20:	cmp	r0, r4
   17d24:	movcc	r1, #39	; 0x27
   17d28:	strbcc	r1, [r5, r0]
   17d2c:	mov	r0, #0
   17d30:	str	r0, [fp, #-56]	; 0xffffffc8
   17d34:	mov	r1, r9
   17d38:	mov	r0, r6
   17d3c:	cmp	r8, r4
   17d40:	strbcc	r0, [r5, r8]
   17d44:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17d48:	add	r8, r8, #1
   17d4c:	and	r0, r0, r1
   17d50:	str	r0, [fp, #-48]	; 0xffffffd0
   17d54:	add	r7, r7, #1
   17d58:	cmn	lr, #1
   17d5c:	bne	1769c <lchmod@@Base+0xc9c>
   17d60:	b	176a8 <lchmod@@Base+0xca8>
   17d64:	ldr	r1, [sp, #84]	; 0x54
   17d68:	mov	sl, #0
   17d6c:	mov	r9, #0
   17d70:	tst	r1, #1
   17d74:	mov	r1, #0
   17d78:	beq	17970 <lchmod@@Base+0xf70>
   17d7c:	b	179b8 <lchmod@@Base+0xfb8>
   17d80:	ldr	r0, [sp, #36]	; 0x24
   17d84:	mov	r6, #0
   17d88:	mov	sl, #0
   17d8c:	mov	r9, #0
   17d90:	cmp	r0, #0
   17d94:	beq	17970 <lchmod@@Base+0xf70>
   17d98:	b	17d54 <lchmod@@Base+0x1354>
   17d9c:	mov	r9, #1
   17da0:	b	17970 <lchmod@@Base+0xf70>
   17da4:	mov	r0, #0
   17da8:	cmn	lr, #1
   17dac:	sub	r4, fp, #40	; 0x28
   17db0:	str	r0, [fp, #-36]	; 0xffffffdc
   17db4:	str	r0, [fp, #-40]	; 0xffffffd8
   17db8:	bne	17dcc <lchmod@@Base+0x13cc>
   17dbc:	mov	r0, ip
   17dc0:	bl	118bc <strlen@plt>
   17dc4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17dc8:	mov	lr, r0
   17dcc:	ldr	r0, [sp, #72]	; 0x48
   17dd0:	mov	r9, #1
   17dd4:	mov	r2, #0
   17dd8:	str	lr, [sp, #28]
   17ddc:	add	r0, r0, r7
   17de0:	str	r0, [sp, #20]
   17de4:	b	17e28 <lchmod@@Base+0x1428>
   17de8:	ldr	r5, [sp, #44]	; 0x2c
   17dec:	add	r5, r0, r5
   17df0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17df4:	bl	117a8 <iswprint@plt>
   17df8:	cmp	r0, #0
   17dfc:	sub	r4, fp, #40	; 0x28
   17e00:	movwne	r0, #1
   17e04:	and	r9, r9, r0
   17e08:	mov	r0, r4
   17e0c:	bl	1173c <mbsinit@plt>
   17e10:	mov	r2, r5
   17e14:	ldr	lr, [sp, #28]
   17e18:	ldr	r5, [fp, #-84]	; 0xffffffac
   17e1c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17e20:	cmp	r0, #0
   17e24:	bne	17cb8 <lchmod@@Base+0x12b8>
   17e28:	add	r0, r2, r7
   17e2c:	str	r2, [sp, #44]	; 0x2c
   17e30:	mov	r3, r4
   17e34:	add	r1, ip, r0
   17e38:	str	r0, [sp, #24]
   17e3c:	sub	r2, lr, r0
   17e40:	sub	r0, fp, #44	; 0x2c
   17e44:	bl	1a5d4 <lchmod@@Base+0x3bd4>
   17e48:	cmp	r0, #0
   17e4c:	beq	181f0 <lchmod@@Base+0x17f0>
   17e50:	cmn	r0, #1
   17e54:	beq	181ac <lchmod@@Base+0x17ac>
   17e58:	ldr	lr, [sp, #28]
   17e5c:	cmn	r0, #2
   17e60:	beq	181b4 <lchmod@@Base+0x17b4>
   17e64:	ldr	r2, [sp, #64]	; 0x40
   17e68:	ldr	r4, [sp, #88]	; 0x58
   17e6c:	ldr	ip, [sp, #84]	; 0x54
   17e70:	cmp	r0, #2
   17e74:	mov	r1, #0
   17e78:	movwcc	r1, #1
   17e7c:	eor	r2, r2, #1
   17e80:	orrs	r1, r2, r1
   17e84:	bne	17de8 <lchmod@@Base+0x13e8>
   17e88:	ldr	r1, [sp, #44]	; 0x2c
   17e8c:	ldr	r2, [sp, #20]
   17e90:	add	r1, r2, r1
   17e94:	sub	r2, r0, #1
   17e98:	b	17ea8 <lchmod@@Base+0x14a8>
   17e9c:	add	r1, r1, #1
   17ea0:	subs	r2, r2, #1
   17ea4:	beq	17de8 <lchmod@@Base+0x13e8>
   17ea8:	ldrb	r3, [r1]
   17eac:	sub	r3, r3, #91	; 0x5b
   17eb0:	cmp	r3, #33	; 0x21
   17eb4:	bhi	17e9c <lchmod@@Base+0x149c>
   17eb8:	add	r5, pc, #0
   17ebc:	ldr	pc, [r5, r3, lsl #2]
   17ec0:	andeq	r8, r1, r4, lsr #5
   17ec4:	andeq	r8, r1, r4, lsr #5
   17ec8:	muleq	r1, ip, lr
   17ecc:	andeq	r8, r1, r4, lsr #5
   17ed0:	muleq	r1, ip, lr
   17ed4:	andeq	r8, r1, r4, lsr #5
   17ed8:	muleq	r1, ip, lr
   17edc:	muleq	r1, ip, lr
   17ee0:	muleq	r1, ip, lr
   17ee4:	muleq	r1, ip, lr
   17ee8:	muleq	r1, ip, lr
   17eec:	muleq	r1, ip, lr
   17ef0:	muleq	r1, ip, lr
   17ef4:	muleq	r1, ip, lr
   17ef8:	muleq	r1, ip, lr
   17efc:	muleq	r1, ip, lr
   17f00:	muleq	r1, ip, lr
   17f04:	muleq	r1, ip, lr
   17f08:	muleq	r1, ip, lr
   17f0c:	muleq	r1, ip, lr
   17f10:	muleq	r1, ip, lr
   17f14:	muleq	r1, ip, lr
   17f18:	muleq	r1, ip, lr
   17f1c:	muleq	r1, ip, lr
   17f20:	muleq	r1, ip, lr
   17f24:	muleq	r1, ip, lr
   17f28:	muleq	r1, ip, lr
   17f2c:	muleq	r1, ip, lr
   17f30:	muleq	r1, ip, lr
   17f34:	muleq	r1, ip, lr
   17f38:	muleq	r1, ip, lr
   17f3c:	muleq	r1, ip, lr
   17f40:	muleq	r1, ip, lr
   17f44:	andeq	r8, r1, r4, lsr #5
   17f48:	mov	r8, r0
   17f4c:	b	17970 <lchmod@@Base+0xf70>
   17f50:	ldr	r0, [sp, #32]
   17f54:	cmp	r0, #0
   17f58:	beq	17ff8 <lchmod@@Base+0x15f8>
   17f5c:	add	r0, r7, #2
   17f60:	cmp	r0, lr
   17f64:	bcs	17ff8 <lchmod@@Base+0x15f8>
   17f68:	add	r1, r7, ip
   17f6c:	ldrb	r1, [r1, #1]
   17f70:	cmp	r1, #63	; 0x3f
   17f74:	bne	17ff8 <lchmod@@Base+0x15f8>
   17f78:	ldrb	r9, [ip, r0]
   17f7c:	sub	r2, r9, #33	; 0x21
   17f80:	cmp	r2, #29
   17f84:	bhi	17ff8 <lchmod@@Base+0x15f8>
   17f88:	movw	r1, #20929	; 0x51c1
   17f8c:	mov	r3, #1
   17f90:	movt	r1, #14336	; 0x3800
   17f94:	tst	r1, r3, lsl r2
   17f98:	beq	17ff8 <lchmod@@Base+0x15f8>
   17f9c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17fa0:	tst	r1, #1
   17fa4:	bne	182c8 <lchmod@@Base+0x18c8>
   17fa8:	cmp	r8, r4
   17fac:	add	r2, r8, #1
   17fb0:	mov	r6, r9
   17fb4:	mov	r7, r0
   17fb8:	mov	r9, #0
   17fbc:	movcc	r1, #63	; 0x3f
   17fc0:	strbcc	r1, [r5, r8]
   17fc4:	cmp	r2, r4
   17fc8:	movcc	r1, #34	; 0x22
   17fcc:	strbcc	r1, [r5, r2]
   17fd0:	add	r2, r8, #2
   17fd4:	cmp	r2, r4
   17fd8:	movcc	r1, #34	; 0x22
   17fdc:	strbcc	r1, [r5, r2]
   17fe0:	add	r2, r8, #3
   17fe4:	add	r8, r8, #4
   17fe8:	cmp	r2, r4
   17fec:	movcc	r1, #63	; 0x3f
   17ff0:	strbcc	r1, [r5, r2]
   17ff4:	b	17970 <lchmod@@Base+0xf70>
   17ff8:	mov	r9, #0
   17ffc:	b	17970 <lchmod@@Base+0xf70>
   18000:	ldr	lr, [sp, #28]
   18004:	ldr	r4, [fp, #-56]	; 0xffffffc8
   18008:	add	r1, r2, r7
   1800c:	mov	r2, #0
   18010:	str	r1, [sp, #44]	; 0x2c
   18014:	tst	r0, #1
   18018:	bne	18134 <lchmod@@Base+0x1734>
   1801c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18020:	tst	r1, #1
   18024:	bne	182c4 <lchmod@@Base+0x18c4>
   18028:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1802c:	subs	r2, r1, #2
   18030:	movwne	r2, #1
   18034:	orr	r2, r2, r4
   18038:	tst	r2, #1
   1803c:	bne	18080 <lchmod@@Base+0x1680>
   18040:	ldr	r1, [sp, #88]	; 0x58
   18044:	add	r2, r8, #1
   18048:	mov	r4, #1
   1804c:	cmp	r8, r1
   18050:	movcc	r1, #39	; 0x27
   18054:	strbcc	r1, [r5, r8]
   18058:	ldr	r1, [sp, #88]	; 0x58
   1805c:	cmp	r2, r1
   18060:	movcc	r1, #36	; 0x24
   18064:	strbcc	r1, [r5, r2]
   18068:	ldr	r1, [sp, #88]	; 0x58
   1806c:	add	r2, r8, #2
   18070:	add	r8, r8, #3
   18074:	cmp	r2, r1
   18078:	movcc	r1, #39	; 0x27
   1807c:	strbcc	r1, [r5, r2]
   18080:	ldr	r1, [sp, #88]	; 0x58
   18084:	add	r2, r8, #1
   18088:	cmp	r8, r1
   1808c:	movcc	r1, #92	; 0x5c
   18090:	strbcc	r1, [r5, r8]
   18094:	ldr	r1, [sp, #88]	; 0x58
   18098:	cmp	r2, r1
   1809c:	bcs	180b0 <lchmod@@Base+0x16b0>
   180a0:	uxtb	r3, r6
   180a4:	mov	r1, #48	; 0x30
   180a8:	orr	r3, r1, r3, lsr #6
   180ac:	strb	r3, [r5, r2]
   180b0:	ldr	r1, [sp, #88]	; 0x58
   180b4:	add	r2, r8, #2
   180b8:	add	r8, r8, #3
   180bc:	cmp	r2, r1
   180c0:	lsrcc	r3, r6, #3
   180c4:	movcc	r1, #6
   180c8:	bficc	r3, r1, #3, #29
   180cc:	mov	r1, #6
   180d0:	bfi	r6, r1, #3, #29
   180d4:	strbcc	r3, [r5, r2]
   180d8:	mov	r2, #1
   180dc:	b	1815c <lchmod@@Base+0x175c>
   180e0:	ldr	r1, [sp, #88]	; 0x58
   180e4:	ldr	r5, [fp, #-84]	; 0xffffffac
   180e8:	ldr	r4, [sp, #88]	; 0x58
   180ec:	cmp	r8, r1
   180f0:	movcc	r1, #39	; 0x27
   180f4:	strbcc	r1, [r5, r8]
   180f8:	add	r1, r8, #1
   180fc:	add	r8, r8, #2
   18100:	cmp	r1, r4
   18104:	movcc	r4, #39	; 0x27
   18108:	strbcc	r4, [r5, r1]
   1810c:	mov	r4, #0
   18110:	ldr	r1, [sp, #88]	; 0x58
   18114:	cmp	r8, r1
   18118:	ldr	r1, [sp, #72]	; 0x48
   1811c:	strbcc	r6, [r5, r8]
   18120:	add	r8, r8, #1
   18124:	ldrb	r6, [r1, r7]
   18128:	mov	r7, r3
   1812c:	tst	r0, #1
   18130:	beq	1801c <lchmod@@Base+0x161c>
   18134:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18138:	tst	r1, #1
   1813c:	beq	18154 <lchmod@@Base+0x1754>
   18140:	ldr	r1, [sp, #88]	; 0x58
   18144:	cmp	r8, r1
   18148:	movcc	r1, #92	; 0x5c
   1814c:	strbcc	r1, [r5, r8]
   18150:	add	r8, r8, #1
   18154:	mov	r1, #0
   18158:	str	r1, [fp, #-52]	; 0xffffffcc
   1815c:	ldr	r1, [sp, #44]	; 0x2c
   18160:	add	r3, r7, #1
   18164:	and	sl, r2, #1
   18168:	cmp	r1, r3
   1816c:	bls	18190 <lchmod@@Base+0x1790>
   18170:	cmp	sl, #0
   18174:	mvn	r5, r4
   18178:	movwne	sl, #1
   1817c:	orr	r5, r5, sl
   18180:	tst	r5, #1
   18184:	beq	180e0 <lchmod@@Base+0x16e0>
   18188:	ldr	r5, [fp, #-84]	; 0xffffffac
   1818c:	b	18110 <lchmod@@Base+0x1710>
   18190:	str	r4, [fp, #-56]	; 0xffffffc8
   18194:	ldr	r4, [sp, #88]	; 0x58
   18198:	cmp	sl, #0
   1819c:	movwne	sl, #1
   181a0:	cmp	sl, #0
   181a4:	beq	17d00 <lchmod@@Base+0x1300>
   181a8:	b	17d34 <lchmod@@Base+0x1334>
   181ac:	mov	r9, #0
   181b0:	b	181f0 <lchmod@@Base+0x17f0>
   181b4:	ldr	r0, [sp, #24]
   181b8:	mov	r9, #0
   181bc:	cmp	lr, r0
   181c0:	bls	181f0 <lchmod@@Base+0x17f0>
   181c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   181c8:	ldr	r2, [sp, #44]	; 0x2c
   181cc:	add	r0, ip, r7
   181d0:	ldrb	r1, [r0, r2]
   181d4:	cmp	r1, #0
   181d8:	beq	17cb8 <lchmod@@Base+0x12b8>
   181dc:	add	r2, r2, #1
   181e0:	add	r1, r7, r2
   181e4:	cmp	r1, lr
   181e8:	bcc	181d0 <lchmod@@Base+0x17d0>
   181ec:	b	17cb8 <lchmod@@Base+0x12b8>
   181f0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   181f4:	ldr	r2, [sp, #44]	; 0x2c
   181f8:	b	17cb8 <lchmod@@Base+0x12b8>
   181fc:	mov	lr, r7
   18200:	b	18208 <lchmod@@Base+0x1808>
   18204:	mvn	lr, #0
   18208:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1820c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18210:	eor	r0, r1, #2
   18214:	orr	r0, r0, r8
   18218:	clz	r0, r0
   1821c:	lsr	r0, r0, #5
   18220:	tst	r2, r0
   18224:	bne	182c8 <lchmod@@Base+0x18c8>
   18228:	subs	r0, r1, #2
   1822c:	movwne	r0, #1
   18230:	orr	r0, r2, r0
   18234:	tst	r0, #1
   18238:	ldreq	r0, [sp, #60]	; 0x3c
   1823c:	eoreq	r0, r0, #1
   18240:	tsteq	r0, #1
   18244:	bne	1835c <lchmod@@Base+0x195c>
   18248:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1824c:	mov	sl, lr
   18250:	tst	r0, #1
   18254:	bne	18328 <lchmod@@Base+0x1928>
   18258:	ldr	r6, [sp, #56]	; 0x38
   1825c:	mov	r9, #0
   18260:	cmp	r6, #0
   18264:	beq	18354 <lchmod@@Base+0x1954>
   18268:	ldr	r0, [sp, #84]	; 0x54
   1826c:	mov	r1, #0
   18270:	mov	r7, #2
   18274:	cmp	r4, #0
   18278:	str	r1, [fp, #-48]	; 0xffffffd0
   1827c:	mov	r1, #0
   18280:	str	r1, [fp, #-76]	; 0xffffffb4
   18284:	beq	17424 <lchmod@@Base+0xa24>
   18288:	b	1835c <lchmod@@Base+0x195c>
   1828c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18290:	ldr	r1, [fp, #12]
   18294:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18298:	mov	lr, r4
   1829c:	mov	r4, r6
   182a0:	b	182e8 <lchmod@@Base+0x18e8>
   182a4:	tst	ip, #1
   182a8:	ldr	r5, [fp, #-84]	; 0xffffffac
   182ac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   182b0:	ldr	r1, [fp, #12]
   182b4:	mov	r0, #2
   182b8:	movwne	r0, #4
   182bc:	mov	r2, r0
   182c0:	b	182e8 <lchmod@@Base+0x18e8>
   182c4:	ldr	r4, [sp, #88]	; 0x58
   182c8:	ldr	r1, [sp, #84]	; 0x54
   182cc:	mov	r0, #2
   182d0:	tst	r1, #1
   182d4:	movwne	r0, #4
   182d8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   182dc:	ldr	r1, [fp, #12]
   182e0:	cmp	r2, #2
   182e4:	moveq	r2, r0
   182e8:	mov	r0, #0
   182ec:	bic	r1, r1, #2
   182f0:	str	r2, [sp]
   182f4:	mov	r2, ip
   182f8:	mov	r3, lr
   182fc:	str	r0, [sp, #8]
   18300:	ldr	r0, [sp, #76]	; 0x4c
   18304:	str	r1, [sp, #4]
   18308:	mov	r1, r4
   1830c:	str	r0, [sp, #12]
   18310:	ldr	r0, [sp, #80]	; 0x50
   18314:	str	r0, [sp, #16]
   18318:	mov	r0, r5
   1831c:	bl	17394 <lchmod@@Base+0x994>
   18320:	mov	r8, r0
   18324:	b	183a8 <lchmod@@Base+0x19a8>
   18328:	mov	r0, #5
   1832c:	ldr	r1, [sp, #56]	; 0x38
   18330:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18334:	mov	r3, sl
   18338:	str	r0, [sp]
   1833c:	ldr	r0, [fp, #12]
   18340:	str	r0, [sp, #4]
   18344:	ldr	r0, [fp, #16]
   18348:	str	r0, [sp, #8]
   1834c:	ldr	r0, [sp, #76]	; 0x4c
   18350:	b	1830c <lchmod@@Base+0x190c>
   18354:	mov	r0, #0
   18358:	str	r0, [fp, #-76]	; 0xffffffb4
   1835c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18360:	cmp	r1, #0
   18364:	beq	1839c <lchmod@@Base+0x199c>
   18368:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1836c:	tst	r0, #1
   18370:	bne	1839c <lchmod@@Base+0x199c>
   18374:	ldrb	r0, [r1]
   18378:	cmp	r0, #0
   1837c:	beq	1839c <lchmod@@Base+0x199c>
   18380:	add	r1, r1, #1
   18384:	cmp	r8, r4
   18388:	strbcc	r0, [r5, r8]
   1838c:	add	r8, r8, #1
   18390:	ldrb	r0, [r1], #1
   18394:	cmp	r0, #0
   18398:	bne	18384 <lchmod@@Base+0x1984>
   1839c:	cmp	r8, r4
   183a0:	movcc	r0, #0
   183a4:	strbcc	r0, [r5, r8]
   183a8:	mov	r0, r8
   183ac:	sub	sp, fp, #28
   183b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183b4:	mov	r0, #4
   183b8:	b	182d8 <lchmod@@Base+0x18d8>
   183bc:	bl	11a3c <abort@plt>
   183c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183c4:	add	fp, sp, #28
   183c8:	sub	sp, sp, #28
   183cc:	movw	r5, #49648	; 0xc1f0
   183d0:	cmp	r2, #0
   183d4:	mov	r4, r1
   183d8:	mov	r7, r0
   183dc:	str	r0, [sp, #20]
   183e0:	movt	r5, #2
   183e4:	movne	r5, r2
   183e8:	bl	118ec <__errno_location@plt>
   183ec:	mov	sl, r0
   183f0:	ldr	r2, [r5, #40]	; 0x28
   183f4:	ldr	r3, [r5, #44]	; 0x2c
   183f8:	ldm	r5, {r0, r1}
   183fc:	orr	r8, r1, #1
   18400:	add	r9, r5, #8
   18404:	mov	r1, #0
   18408:	ldr	r6, [sl]
   1840c:	stm	sp, {r0, r8, r9}
   18410:	mov	r0, #0
   18414:	str	r2, [sp, #12]
   18418:	str	r3, [sp, #16]
   1841c:	mov	r2, r7
   18420:	mov	r3, r4
   18424:	str	r6, [sp, #24]
   18428:	mov	r6, r4
   1842c:	bl	17394 <lchmod@@Base+0x994>
   18430:	add	r7, r0, #1
   18434:	mov	r0, r7
   18438:	bl	19908 <lchmod@@Base+0x2f08>
   1843c:	mov	r4, r0
   18440:	ldr	r0, [r5]
   18444:	ldr	r2, [r5, #44]	; 0x2c
   18448:	ldr	r1, [r5, #40]	; 0x28
   1844c:	mov	r3, r6
   18450:	stm	sp, {r0, r8, r9}
   18454:	str	r2, [sp, #16]
   18458:	ldr	r2, [sp, #20]
   1845c:	str	r1, [sp, #12]
   18460:	mov	r0, r4
   18464:	mov	r1, r7
   18468:	bl	17394 <lchmod@@Base+0x994>
   1846c:	ldr	r0, [sp, #24]
   18470:	str	r0, [sl]
   18474:	mov	r0, r4
   18478:	sub	sp, fp, #28
   1847c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18484:	add	fp, sp, #28
   18488:	sub	sp, sp, #36	; 0x24
   1848c:	movw	r8, #49648	; 0xc1f0
   18490:	cmp	r3, #0
   18494:	mov	r4, r2
   18498:	str	r2, [sp, #24]
   1849c:	mov	r5, r1
   184a0:	mov	r6, r0
   184a4:	str	r0, [sp, #20]
   184a8:	movt	r8, #2
   184ac:	movne	r8, r3
   184b0:	bl	118ec <__errno_location@plt>
   184b4:	str	r0, [sp, #28]
   184b8:	ldr	r1, [r8, #40]	; 0x28
   184bc:	ldr	r2, [r8, #44]	; 0x2c
   184c0:	ldr	r7, [r0]
   184c4:	cmp	r4, #0
   184c8:	add	sl, r8, #8
   184cc:	mov	r0, #0
   184d0:	ldm	r8, {r3, r9}
   184d4:	orreq	r9, r9, #1
   184d8:	stm	sp, {r3, r9, sl}
   184dc:	str	r1, [sp, #12]
   184e0:	str	r2, [sp, #16]
   184e4:	mov	r1, #0
   184e8:	mov	r2, r6
   184ec:	mov	r3, r5
   184f0:	str	r7, [sp, #32]
   184f4:	mov	r7, r5
   184f8:	bl	17394 <lchmod@@Base+0x994>
   184fc:	add	r4, r0, #1
   18500:	mov	r5, r0
   18504:	mov	r0, r4
   18508:	bl	19908 <lchmod@@Base+0x2f08>
   1850c:	mov	r6, r0
   18510:	ldr	r0, [r8]
   18514:	ldr	r2, [r8, #44]	; 0x2c
   18518:	ldr	r1, [r8, #40]	; 0x28
   1851c:	mov	r3, r7
   18520:	stm	sp, {r0, r9, sl}
   18524:	str	r2, [sp, #16]
   18528:	ldr	r2, [sp, #20]
   1852c:	str	r1, [sp, #12]
   18530:	mov	r0, r6
   18534:	mov	r1, r4
   18538:	bl	17394 <lchmod@@Base+0x994>
   1853c:	ldr	r0, [sp, #24]
   18540:	ldr	r1, [sp, #32]
   18544:	ldr	r2, [sp, #28]
   18548:	cmp	r0, #0
   1854c:	str	r1, [r2]
   18550:	strne	r5, [r0]
   18554:	mov	r0, r6
   18558:	sub	sp, fp, #28
   1855c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18560:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18564:	add	fp, sp, #24
   18568:	movw	r5, #49540	; 0xc184
   1856c:	movw	r8, #49536	; 0xc180
   18570:	movt	r5, #2
   18574:	movt	r8, #2
   18578:	ldr	r0, [r5]
   1857c:	ldr	r4, [r8]
   18580:	cmp	r0, #2
   18584:	blt	185b0 <lchmod@@Base+0x1bb0>
   18588:	add	r7, r4, #12
   1858c:	mov	r6, #0
   18590:	ldr	r0, [r7, r6, lsl #3]
   18594:	bl	13164 <__assert_fail@plt+0x16c8>
   18598:	ldr	r1, [r5]
   1859c:	add	r2, r6, #2
   185a0:	add	r0, r6, #1
   185a4:	mov	r6, r0
   185a8:	cmp	r2, r1
   185ac:	blt	18590 <lchmod@@Base+0x1b90>
   185b0:	ldr	r0, [r4, #4]
   185b4:	movw	r9, #49696	; 0xc220
   185b8:	movw	r7, #49544	; 0xc188
   185bc:	movt	r9, #2
   185c0:	movt	r7, #2
   185c4:	cmp	r0, r9
   185c8:	beq	185d8 <lchmod@@Base+0x1bd8>
   185cc:	bl	13164 <__assert_fail@plt+0x16c8>
   185d0:	mov	r0, #256	; 0x100
   185d4:	stm	r7, {r0, r9}
   185d8:	cmp	r4, r7
   185dc:	beq	185ec <lchmod@@Base+0x1bec>
   185e0:	mov	r0, r4
   185e4:	bl	13164 <__assert_fail@plt+0x16c8>
   185e8:	str	r7, [r8]
   185ec:	mov	r0, #1
   185f0:	str	r0, [r5]
   185f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   185f8:	movw	r3, #49648	; 0xc1f0
   185fc:	mvn	r2, #0
   18600:	movt	r3, #2
   18604:	b	18608 <lchmod@@Base+0x1c08>
   18608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1860c:	add	fp, sp, #28
   18610:	sub	sp, sp, #44	; 0x2c
   18614:	mov	r7, r3
   18618:	str	r2, [sp, #36]	; 0x24
   1861c:	str	r1, [sp, #32]
   18620:	mov	r5, r0
   18624:	bl	118ec <__errno_location@plt>
   18628:	cmp	r5, #0
   1862c:	bmi	1879c <lchmod@@Base+0x1d9c>
   18630:	cmn	r5, #-2147483647	; 0x80000001
   18634:	beq	1879c <lchmod@@Base+0x1d9c>
   18638:	movw	r8, #49540	; 0xc184
   1863c:	movw	r4, #49536	; 0xc180
   18640:	str	r0, [sp, #28]
   18644:	ldr	r0, [r0]
   18648:	movt	r8, #2
   1864c:	movt	r4, #2
   18650:	ldr	r1, [r8]
   18654:	ldr	r6, [r4]
   18658:	str	r0, [sp, #24]
   1865c:	cmp	r1, r5
   18660:	ble	1866c <lchmod@@Base+0x1c6c>
   18664:	mov	sl, r6
   18668:	b	186d8 <lchmod@@Base+0x1cd8>
   1866c:	movw	r9, #49544	; 0xc188
   18670:	mov	r0, #8
   18674:	str	r1, [fp, #-32]	; 0xffffffe0
   18678:	sub	r1, r5, r1
   1867c:	mvn	r3, #-2147483648	; 0x80000000
   18680:	movt	r9, #2
   18684:	str	r0, [sp]
   18688:	add	r2, r1, #1
   1868c:	sub	r1, fp, #32
   18690:	subs	r0, r6, r9
   18694:	movne	r0, r6
   18698:	bl	19b08 <lchmod@@Base+0x3108>
   1869c:	mov	sl, r0
   186a0:	cmp	r6, r9
   186a4:	str	r0, [r4]
   186a8:	bne	186b4 <lchmod@@Base+0x1cb4>
   186ac:	ldrd	r0, [r9]
   186b0:	stm	sl, {r0, r1}
   186b4:	ldr	r1, [r8]
   186b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   186bc:	add	r0, sl, r1, lsl #3
   186c0:	sub	r1, r2, r1
   186c4:	lsl	r2, r1, #3
   186c8:	mov	r1, #0
   186cc:	bl	11910 <memset@plt>
   186d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   186d4:	str	r0, [r8]
   186d8:	mov	r9, sl
   186dc:	ldm	r7, {r0, r1}
   186e0:	orr	r8, r1, #1
   186e4:	add	r1, r7, #8
   186e8:	ldr	r2, [r7, #40]	; 0x28
   186ec:	ldr	r3, [r7, #44]	; 0x2c
   186f0:	ldr	r6, [r9, r5, lsl #3]!
   186f4:	str	r1, [sp, #20]
   186f8:	ldr	r4, [r9, #4]!
   186fc:	stm	sp, {r0, r8}
   18700:	add	r0, sp, #8
   18704:	stm	r0, {r1, r2, r3}
   18708:	ldr	r2, [sp, #32]
   1870c:	ldr	r3, [sp, #36]	; 0x24
   18710:	mov	r1, r6
   18714:	mov	r0, r4
   18718:	bl	17394 <lchmod@@Base+0x994>
   1871c:	cmp	r6, r0
   18720:	bhi	18784 <lchmod@@Base+0x1d84>
   18724:	add	r6, r0, #1
   18728:	movw	r0, #49696	; 0xc220
   1872c:	movt	r0, #2
   18730:	str	r6, [sl, r5, lsl #3]
   18734:	cmp	r4, r0
   18738:	beq	18744 <lchmod@@Base+0x1d44>
   1873c:	mov	r0, r4
   18740:	bl	13164 <__assert_fail@plt+0x16c8>
   18744:	mov	r0, r6
   18748:	bl	19908 <lchmod@@Base+0x2f08>
   1874c:	str	r0, [r9]
   18750:	mov	r4, r0
   18754:	add	r3, sp, #8
   18758:	ldr	r0, [r7]
   1875c:	ldr	r1, [r7, #40]	; 0x28
   18760:	ldr	r2, [r7, #44]	; 0x2c
   18764:	stm	sp, {r0, r8}
   18768:	ldr	r0, [sp, #20]
   1876c:	stm	r3, {r0, r1, r2}
   18770:	ldr	r2, [sp, #32]
   18774:	ldr	r3, [sp, #36]	; 0x24
   18778:	mov	r0, r4
   1877c:	mov	r1, r6
   18780:	bl	17394 <lchmod@@Base+0x994>
   18784:	ldr	r0, [sp, #28]
   18788:	ldr	r1, [sp, #24]
   1878c:	str	r1, [r0]
   18790:	mov	r0, r4
   18794:	sub	sp, fp, #28
   18798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1879c:	bl	11a3c <abort@plt>
   187a0:	movw	r3, #49648	; 0xc1f0
   187a4:	movt	r3, #2
   187a8:	b	18608 <lchmod@@Base+0x1c08>
   187ac:	movw	r3, #49648	; 0xc1f0
   187b0:	mov	r1, r0
   187b4:	mov	r0, #0
   187b8:	mvn	r2, #0
   187bc:	movt	r3, #2
   187c0:	b	18608 <lchmod@@Base+0x1c08>
   187c4:	movw	r3, #49648	; 0xc1f0
   187c8:	mov	r2, r1
   187cc:	mov	r1, r0
   187d0:	mov	r0, #0
   187d4:	movt	r3, #2
   187d8:	b	18608 <lchmod@@Base+0x1c08>
   187dc:	push	{fp, lr}
   187e0:	mov	fp, sp
   187e4:	sub	sp, sp, #48	; 0x30
   187e8:	vmov.i32	q8, #0	; 0x00000000
   187ec:	mov	ip, #32
   187f0:	mov	r3, sp
   187f4:	mov	lr, r2
   187f8:	cmp	r1, #10
   187fc:	add	r2, r3, #16
   18800:	vst1.64	{d16-d17}, [r3], ip
   18804:	vst1.64	{d16-d17}, [r2]
   18808:	vst1.64	{d16-d17}, [r3]
   1880c:	beq	1882c <lchmod@@Base+0x1e2c>
   18810:	str	r1, [sp]
   18814:	mov	r3, sp
   18818:	mov	r1, lr
   1881c:	mvn	r2, #0
   18820:	bl	18608 <lchmod@@Base+0x1c08>
   18824:	mov	sp, fp
   18828:	pop	{fp, pc}
   1882c:	bl	11a3c <abort@plt>
   18830:	push	{r4, sl, fp, lr}
   18834:	add	fp, sp, #8
   18838:	sub	sp, sp, #48	; 0x30
   1883c:	vmov.i32	q8, #0	; 0x00000000
   18840:	mov	ip, r3
   18844:	mov	r3, sp
   18848:	mov	lr, #32
   1884c:	cmp	r1, #10
   18850:	add	r4, r3, #16
   18854:	vst1.64	{d16-d17}, [r3], lr
   18858:	vst1.64	{d16-d17}, [r4]
   1885c:	vst1.64	{d16-d17}, [r3]
   18860:	beq	18880 <lchmod@@Base+0x1e80>
   18864:	str	r1, [sp]
   18868:	mov	r1, r2
   1886c:	mov	r3, sp
   18870:	mov	r2, ip
   18874:	bl	18608 <lchmod@@Base+0x1c08>
   18878:	sub	sp, fp, #8
   1887c:	pop	{r4, sl, fp, pc}
   18880:	bl	11a3c <abort@plt>
   18884:	push	{fp, lr}
   18888:	mov	fp, sp
   1888c:	sub	sp, sp, #48	; 0x30
   18890:	vmov.i32	q8, #0	; 0x00000000
   18894:	mov	r3, sp
   18898:	mov	ip, #32
   1889c:	cmp	r0, #10
   188a0:	add	r2, r3, #16
   188a4:	vst1.64	{d16-d17}, [r3], ip
   188a8:	vst1.64	{d16-d17}, [r2]
   188ac:	vst1.64	{d16-d17}, [r3]
   188b0:	beq	188d0 <lchmod@@Base+0x1ed0>
   188b4:	str	r0, [sp]
   188b8:	mov	r3, sp
   188bc:	mov	r0, #0
   188c0:	mvn	r2, #0
   188c4:	bl	18608 <lchmod@@Base+0x1c08>
   188c8:	mov	sp, fp
   188cc:	pop	{fp, pc}
   188d0:	bl	11a3c <abort@plt>
   188d4:	push	{fp, lr}
   188d8:	mov	fp, sp
   188dc:	sub	sp, sp, #48	; 0x30
   188e0:	vmov.i32	q8, #0	; 0x00000000
   188e4:	mov	r3, sp
   188e8:	mov	ip, #32
   188ec:	cmp	r0, #10
   188f0:	add	lr, r3, #16
   188f4:	vst1.64	{d16-d17}, [r3], ip
   188f8:	vst1.64	{d16-d17}, [lr]
   188fc:	vst1.64	{d16-d17}, [r3]
   18900:	beq	1891c <lchmod@@Base+0x1f1c>
   18904:	str	r0, [sp]
   18908:	mov	r3, sp
   1890c:	mov	r0, #0
   18910:	bl	18608 <lchmod@@Base+0x1c08>
   18914:	mov	sp, fp
   18918:	pop	{fp, pc}
   1891c:	bl	11a3c <abort@plt>
   18920:	push	{r4, sl, fp, lr}
   18924:	add	fp, sp, #8
   18928:	sub	sp, sp, #48	; 0x30
   1892c:	mov	lr, r0
   18930:	movw	r0, #49648	; 0xc1f0
   18934:	mov	ip, r1
   18938:	mov	r1, #32
   1893c:	mov	r4, #1
   18940:	movt	r0, #2
   18944:	add	r3, r0, #16
   18948:	vld1.64	{d16-d17}, [r0], r1
   1894c:	vld1.64	{d20-d21}, [r0]
   18950:	vld1.64	{d18-d19}, [r3]
   18954:	mov	r3, sp
   18958:	add	r0, r3, #32
   1895c:	add	r1, r3, #16
   18960:	vst1.64	{d20-d21}, [r0]
   18964:	mov	r0, #28
   18968:	vst1.64	{d18-d19}, [r1]
   1896c:	mov	r1, r3
   18970:	and	r0, r0, r2, lsr #3
   18974:	and	r2, r2, #31
   18978:	vst1.64	{d16-d17}, [r1], r0
   1897c:	ldr	r0, [r1, #8]
   18980:	bic	r4, r4, r0, lsr r2
   18984:	eor	r0, r0, r4, lsl r2
   18988:	mov	r2, ip
   1898c:	str	r0, [r1, #8]
   18990:	mov	r0, #0
   18994:	mov	r1, lr
   18998:	bl	18608 <lchmod@@Base+0x1c08>
   1899c:	sub	sp, fp, #8
   189a0:	pop	{r4, sl, fp, pc}
   189a4:	push	{fp, lr}
   189a8:	mov	fp, sp
   189ac:	sub	sp, sp, #48	; 0x30
   189b0:	mov	ip, r0
   189b4:	movw	r0, #49648	; 0xc1f0
   189b8:	mov	r2, #32
   189bc:	movt	r0, #2
   189c0:	add	r3, r0, #16
   189c4:	vld1.64	{d16-d17}, [r0], r2
   189c8:	vld1.64	{d20-d21}, [r0]
   189cc:	vld1.64	{d18-d19}, [r3]
   189d0:	mov	r3, sp
   189d4:	add	r0, r3, #32
   189d8:	add	r2, r3, #16
   189dc:	vst1.64	{d20-d21}, [r0]
   189e0:	mov	r0, #28
   189e4:	vst1.64	{d18-d19}, [r2]
   189e8:	mov	r2, r3
   189ec:	and	r0, r0, r1, lsr #3
   189f0:	and	r1, r1, #31
   189f4:	vst1.64	{d16-d17}, [r2], r0
   189f8:	mov	r0, #1
   189fc:	ldr	lr, [r2, #8]
   18a00:	bic	r0, r0, lr, lsr r1
   18a04:	eor	r0, lr, r0, lsl r1
   18a08:	mov	r1, ip
   18a0c:	str	r0, [r2, #8]
   18a10:	mov	r0, #0
   18a14:	mvn	r2, #0
   18a18:	bl	18608 <lchmod@@Base+0x1c08>
   18a1c:	mov	sp, fp
   18a20:	pop	{fp, pc}
   18a24:	push	{fp, lr}
   18a28:	mov	fp, sp
   18a2c:	sub	sp, sp, #48	; 0x30
   18a30:	mov	r1, r0
   18a34:	movw	r0, #49648	; 0xc1f0
   18a38:	mov	r3, #32
   18a3c:	movt	r0, #2
   18a40:	add	r2, r0, #16
   18a44:	vld1.64	{d16-d17}, [r0], r3
   18a48:	mov	r3, sp
   18a4c:	vld1.64	{d18-d19}, [r2]
   18a50:	vld1.64	{d20-d21}, [r0]
   18a54:	add	r2, r3, #16
   18a58:	add	r0, r3, #32
   18a5c:	vst1.64	{d18-d19}, [r2]
   18a60:	vst1.64	{d20-d21}, [r0]
   18a64:	mov	r0, #12
   18a68:	mov	r2, r3
   18a6c:	vst1.64	{d16-d17}, [r2], r0
   18a70:	ldr	r0, [r2]
   18a74:	orr	r0, r0, #67108864	; 0x4000000
   18a78:	str	r0, [r2]
   18a7c:	mov	r0, #0
   18a80:	mvn	r2, #0
   18a84:	bl	18608 <lchmod@@Base+0x1c08>
   18a88:	mov	sp, fp
   18a8c:	pop	{fp, pc}
   18a90:	push	{fp, lr}
   18a94:	mov	fp, sp
   18a98:	sub	sp, sp, #48	; 0x30
   18a9c:	mov	ip, r1
   18aa0:	mov	r1, r0
   18aa4:	movw	r0, #49648	; 0xc1f0
   18aa8:	mov	r2, #32
   18aac:	movt	r0, #2
   18ab0:	add	r3, r0, #16
   18ab4:	vld1.64	{d16-d17}, [r0], r2
   18ab8:	vld1.64	{d18-d19}, [r3]
   18abc:	vld1.64	{d20-d21}, [r0]
   18ac0:	mov	r3, sp
   18ac4:	add	r2, r3, #16
   18ac8:	add	r0, r3, #32
   18acc:	vst1.64	{d18-d19}, [r2]
   18ad0:	vst1.64	{d20-d21}, [r0]
   18ad4:	mov	r0, #12
   18ad8:	mov	r2, r3
   18adc:	vst1.64	{d16-d17}, [r2], r0
   18ae0:	ldr	r0, [r2]
   18ae4:	orr	r0, r0, #67108864	; 0x4000000
   18ae8:	str	r0, [r2]
   18aec:	mov	r0, #0
   18af0:	mov	r2, ip
   18af4:	bl	18608 <lchmod@@Base+0x1c08>
   18af8:	mov	sp, fp
   18afc:	pop	{fp, pc}
   18b00:	push	{r4, sl, fp, lr}
   18b04:	add	fp, sp, #8
   18b08:	sub	sp, sp, #96	; 0x60
   18b0c:	vmov.i32	q8, #0	; 0x00000000
   18b10:	mov	ip, r2
   18b14:	mov	r2, sp
   18b18:	mov	r4, #28
   18b1c:	cmp	r1, #10
   18b20:	mov	r3, r2
   18b24:	add	lr, r2, #16
   18b28:	vst1.64	{d16-d17}, [r3], r4
   18b2c:	vst1.64	{d16-d17}, [lr]
   18b30:	vst1.32	{d16-d17}, [r3]
   18b34:	beq	18b84 <lchmod@@Base+0x2184>
   18b38:	vld1.64	{d16-d17}, [r2], r4
   18b3c:	vld1.64	{d18-d19}, [lr]
   18b40:	add	r3, sp, #48	; 0x30
   18b44:	vld1.32	{d20-d21}, [r2]
   18b48:	add	r2, r3, #20
   18b4c:	add	r4, r3, #4
   18b50:	vst1.32	{d18-d19}, [r2]
   18b54:	add	r2, r3, #32
   18b58:	vst1.32	{d16-d17}, [r4]
   18b5c:	vst1.32	{d20-d21}, [r2]
   18b60:	str	r1, [sp, #48]	; 0x30
   18b64:	mvn	r2, #0
   18b68:	ldr	r1, [sp, #60]	; 0x3c
   18b6c:	orr	r1, r1, #67108864	; 0x4000000
   18b70:	str	r1, [sp, #60]	; 0x3c
   18b74:	mov	r1, ip
   18b78:	bl	18608 <lchmod@@Base+0x1c08>
   18b7c:	sub	sp, fp, #8
   18b80:	pop	{r4, sl, fp, pc}
   18b84:	bl	11a3c <abort@plt>
   18b88:	push	{r4, r5, r6, sl, fp, lr}
   18b8c:	add	fp, sp, #16
   18b90:	sub	sp, sp, #48	; 0x30
   18b94:	mov	ip, r3
   18b98:	movw	r3, #49648	; 0xc1f0
   18b9c:	mov	r6, #32
   18ba0:	cmp	r1, #0
   18ba4:	mov	r4, sp
   18ba8:	movt	r3, #2
   18bac:	cmpne	r2, #0
   18bb0:	add	r5, r4, #16
   18bb4:	add	lr, r3, #16
   18bb8:	vld1.64	{d16-d17}, [r3], r6
   18bbc:	vld1.64	{d18-d19}, [lr]
   18bc0:	vld1.64	{d20-d21}, [r3]
   18bc4:	mov	r3, #10
   18bc8:	vst1.64	{d16-d17}, [r4], r6
   18bcc:	vst1.64	{d18-d19}, [r5]
   18bd0:	vst1.64	{d20-d21}, [r4]
   18bd4:	str	r3, [sp]
   18bd8:	bne	18be0 <lchmod@@Base+0x21e0>
   18bdc:	bl	11a3c <abort@plt>
   18be0:	str	r2, [sp, #44]	; 0x2c
   18be4:	str	r1, [sp, #40]	; 0x28
   18be8:	mov	r3, sp
   18bec:	mov	r1, ip
   18bf0:	mvn	r2, #0
   18bf4:	bl	18608 <lchmod@@Base+0x1c08>
   18bf8:	sub	sp, fp, #16
   18bfc:	pop	{r4, r5, r6, sl, fp, pc}
   18c00:	push	{r4, r5, r6, sl, fp, lr}
   18c04:	add	fp, sp, #16
   18c08:	sub	sp, sp, #48	; 0x30
   18c0c:	mov	lr, r3
   18c10:	movw	r3, #49648	; 0xc1f0
   18c14:	mov	r6, #32
   18c18:	cmp	r1, #0
   18c1c:	mov	r4, sp
   18c20:	movt	r3, #2
   18c24:	cmpne	r2, #0
   18c28:	add	r5, r4, #16
   18c2c:	add	ip, r3, #16
   18c30:	vld1.64	{d16-d17}, [r3], r6
   18c34:	vld1.64	{d18-d19}, [ip]
   18c38:	vld1.64	{d20-d21}, [r3]
   18c3c:	mov	r3, #10
   18c40:	vst1.64	{d16-d17}, [r4], r6
   18c44:	vst1.64	{d18-d19}, [r5]
   18c48:	vst1.64	{d20-d21}, [r4]
   18c4c:	str	r3, [sp]
   18c50:	bne	18c58 <lchmod@@Base+0x2258>
   18c54:	bl	11a3c <abort@plt>
   18c58:	ldr	ip, [fp, #8]
   18c5c:	str	r2, [sp, #44]	; 0x2c
   18c60:	str	r1, [sp, #40]	; 0x28
   18c64:	mov	r3, sp
   18c68:	mov	r1, lr
   18c6c:	mov	r2, ip
   18c70:	bl	18608 <lchmod@@Base+0x1c08>
   18c74:	sub	sp, fp, #16
   18c78:	pop	{r4, r5, r6, sl, fp, pc}
   18c7c:	push	{r4, sl, fp, lr}
   18c80:	add	fp, sp, #8
   18c84:	sub	sp, sp, #48	; 0x30
   18c88:	movw	r3, #49648	; 0xc1f0
   18c8c:	mov	lr, #32
   18c90:	mov	ip, r2
   18c94:	cmp	r0, #0
   18c98:	movt	r3, #2
   18c9c:	cmpne	r1, #0
   18ca0:	add	r2, r3, #16
   18ca4:	vld1.64	{d16-d17}, [r3], lr
   18ca8:	vld1.64	{d20-d21}, [r3]
   18cac:	vld1.64	{d18-d19}, [r2]
   18cb0:	mov	r2, sp
   18cb4:	add	r4, r2, #16
   18cb8:	vst1.64	{d16-d17}, [r2], lr
   18cbc:	vst1.64	{d20-d21}, [r2]
   18cc0:	mov	r2, #10
   18cc4:	vst1.64	{d18-d19}, [r4]
   18cc8:	str	r2, [sp]
   18ccc:	bne	18cd4 <lchmod@@Base+0x22d4>
   18cd0:	bl	11a3c <abort@plt>
   18cd4:	str	r1, [sp, #44]	; 0x2c
   18cd8:	str	r0, [sp, #40]	; 0x28
   18cdc:	mov	r3, sp
   18ce0:	mov	r0, #0
   18ce4:	mov	r1, ip
   18ce8:	mvn	r2, #0
   18cec:	bl	18608 <lchmod@@Base+0x1c08>
   18cf0:	sub	sp, fp, #8
   18cf4:	pop	{r4, sl, fp, pc}
   18cf8:	push	{r4, r5, fp, lr}
   18cfc:	add	fp, sp, #8
   18d00:	sub	sp, sp, #48	; 0x30
   18d04:	mov	ip, r3
   18d08:	movw	r3, #49648	; 0xc1f0
   18d0c:	mov	r4, #32
   18d10:	mov	lr, r2
   18d14:	cmp	r0, #0
   18d18:	movt	r3, #2
   18d1c:	cmpne	r1, #0
   18d20:	add	r2, r3, #16
   18d24:	vld1.64	{d16-d17}, [r3], r4
   18d28:	vld1.64	{d20-d21}, [r3]
   18d2c:	vld1.64	{d18-d19}, [r2]
   18d30:	mov	r2, sp
   18d34:	add	r5, r2, #16
   18d38:	vst1.64	{d16-d17}, [r2], r4
   18d3c:	vst1.64	{d20-d21}, [r2]
   18d40:	mov	r2, #10
   18d44:	vst1.64	{d18-d19}, [r5]
   18d48:	str	r2, [sp]
   18d4c:	bne	18d54 <lchmod@@Base+0x2354>
   18d50:	bl	11a3c <abort@plt>
   18d54:	str	r1, [sp, #44]	; 0x2c
   18d58:	str	r0, [sp, #40]	; 0x28
   18d5c:	mov	r3, sp
   18d60:	mov	r0, #0
   18d64:	mov	r1, lr
   18d68:	mov	r2, ip
   18d6c:	bl	18608 <lchmod@@Base+0x1c08>
   18d70:	sub	sp, fp, #8
   18d74:	pop	{r4, r5, fp, pc}
   18d78:	movw	r3, #49552	; 0xc190
   18d7c:	movt	r3, #2
   18d80:	b	18608 <lchmod@@Base+0x1c08>
   18d84:	movw	r3, #49552	; 0xc190
   18d88:	mov	r2, r1
   18d8c:	mov	r1, r0
   18d90:	mov	r0, #0
   18d94:	movt	r3, #2
   18d98:	b	18608 <lchmod@@Base+0x1c08>
   18d9c:	movw	r3, #49552	; 0xc190
   18da0:	mvn	r2, #0
   18da4:	movt	r3, #2
   18da8:	b	18608 <lchmod@@Base+0x1c08>
   18dac:	movw	r3, #49552	; 0xc190
   18db0:	mov	r1, r0
   18db4:	mov	r0, #0
   18db8:	mvn	r2, #0
   18dbc:	movt	r3, #2
   18dc0:	b	18608 <lchmod@@Base+0x1c08>
   18dc4:	push	{r4, r5, fp, lr}
   18dc8:	add	fp, sp, #8
   18dcc:	mov	r5, r0
   18dd0:	mov	r4, r1
   18dd4:	mov	r0, #0
   18dd8:	mov	r2, #5
   18ddc:	mov	r1, r5
   18de0:	bl	11754 <dcgettext@plt>
   18de4:	cmp	r0, r5
   18de8:	popne	{r4, r5, fp, pc}
   18dec:	bl	1a59c <lchmod@@Base+0x3b9c>
   18df0:	ldrb	r1, [r0]
   18df4:	and	r1, r1, #223	; 0xdf
   18df8:	cmp	r1, #71	; 0x47
   18dfc:	beq	18e64 <lchmod@@Base+0x2464>
   18e00:	cmp	r1, #85	; 0x55
   18e04:	bne	18ebc <lchmod@@Base+0x24bc>
   18e08:	ldrb	r1, [r0, #1]
   18e0c:	and	r1, r1, #223	; 0xdf
   18e10:	cmp	r1, #84	; 0x54
   18e14:	bne	18ebc <lchmod@@Base+0x24bc>
   18e18:	ldrb	r1, [r0, #2]
   18e1c:	and	r1, r1, #223	; 0xdf
   18e20:	cmp	r1, #70	; 0x46
   18e24:	bne	18ebc <lchmod@@Base+0x24bc>
   18e28:	ldrb	r1, [r0, #3]
   18e2c:	cmp	r1, #45	; 0x2d
   18e30:	bne	18ebc <lchmod@@Base+0x24bc>
   18e34:	ldrb	r1, [r0, #4]
   18e38:	cmp	r1, #56	; 0x38
   18e3c:	bne	18ebc <lchmod@@Base+0x24bc>
   18e40:	ldrb	r0, [r0, #5]
   18e44:	cmp	r0, #0
   18e48:	bne	18ebc <lchmod@@Base+0x24bc>
   18e4c:	ldrb	r1, [r5]
   18e50:	movw	r2, #45171	; 0xb073
   18e54:	movw	r0, #45175	; 0xb077
   18e58:	movt	r2, #1
   18e5c:	movt	r0, #1
   18e60:	b	18eec <lchmod@@Base+0x24ec>
   18e64:	ldrb	r1, [r0, #1]
   18e68:	and	r1, r1, #223	; 0xdf
   18e6c:	cmp	r1, #66	; 0x42
   18e70:	bne	18ebc <lchmod@@Base+0x24bc>
   18e74:	ldrb	r1, [r0, #2]
   18e78:	cmp	r1, #49	; 0x31
   18e7c:	bne	18ebc <lchmod@@Base+0x24bc>
   18e80:	ldrb	r1, [r0, #3]
   18e84:	cmp	r1, #56	; 0x38
   18e88:	bne	18ebc <lchmod@@Base+0x24bc>
   18e8c:	ldrb	r1, [r0, #4]
   18e90:	cmp	r1, #48	; 0x30
   18e94:	bne	18ebc <lchmod@@Base+0x24bc>
   18e98:	ldrb	r1, [r0, #5]
   18e9c:	cmp	r1, #51	; 0x33
   18ea0:	bne	18ebc <lchmod@@Base+0x24bc>
   18ea4:	ldrb	r1, [r0, #6]
   18ea8:	cmp	r1, #48	; 0x30
   18eac:	bne	18ebc <lchmod@@Base+0x24bc>
   18eb0:	ldrb	r0, [r0, #7]
   18eb4:	cmp	r0, #0
   18eb8:	beq	18ed8 <lchmod@@Base+0x24d8>
   18ebc:	movw	r1, #45165	; 0xb06d
   18ec0:	movw	r0, #45169	; 0xb071
   18ec4:	cmp	r4, #9
   18ec8:	movt	r1, #1
   18ecc:	movt	r0, #1
   18ed0:	moveq	r0, r1
   18ed4:	pop	{r4, r5, fp, pc}
   18ed8:	ldrb	r1, [r5]
   18edc:	movw	r2, #45179	; 0xb07b
   18ee0:	movw	r0, #45183	; 0xb07f
   18ee4:	movt	r2, #1
   18ee8:	movt	r0, #1
   18eec:	cmp	r1, #96	; 0x60
   18ef0:	moveq	r0, r2
   18ef4:	pop	{r4, r5, fp, pc}
   18ef8:	push	{r4, r5, r6, sl, fp, lr}
   18efc:	add	fp, sp, #16
   18f00:	ldr	r4, [r0], #8
   18f04:	mov	r5, r1
   18f08:	cmp	r4, r0
   18f0c:	beq	18f30 <lchmod@@Base+0x2530>
   18f10:	mov	r0, r4
   18f14:	mov	r1, r5
   18f18:	bl	19f58 <lchmod@@Base+0x3558>
   18f1c:	cmp	r0, #0
   18f20:	mov	r6, r0
   18f24:	moveq	r6, r4
   18f28:	mov	r0, r6
   18f2c:	pop	{r4, r5, r6, sl, fp, pc}
   18f30:	mov	r0, r5
   18f34:	bl	19f28 <lchmod@@Base+0x3528>
   18f38:	cmp	r0, #0
   18f3c:	beq	18f58 <lchmod@@Base+0x2558>
   18f40:	mov	r1, r4
   18f44:	mov	r2, r5
   18f48:	mov	r6, r0
   18f4c:	bl	11730 <memcpy@plt>
   18f50:	mov	r0, r6
   18f54:	pop	{r4, r5, r6, sl, fp, pc}
   18f58:	mov	r6, #0
   18f5c:	mov	r0, r6
   18f60:	pop	{r4, r5, r6, sl, fp, pc}
   18f64:	push	{r4, r5, r6, sl, fp, lr}
   18f68:	add	fp, sp, #16
   18f6c:	mov	r4, r0
   18f70:	add	r6, r0, #8
   18f74:	ldrd	r0, [r0]
   18f78:	lsl	r5, r1, #1
   18f7c:	cmp	r0, r6
   18f80:	beq	18f8c <lchmod@@Base+0x258c>
   18f84:	bl	13164 <__assert_fail@plt+0x16c8>
   18f88:	ldr	r1, [r4, #4]
   18f8c:	cmp	r5, r1
   18f90:	bcc	18fb4 <lchmod@@Base+0x25b4>
   18f94:	mov	r0, r5
   18f98:	bl	19f28 <lchmod@@Base+0x3528>
   18f9c:	cmp	r0, #0
   18fa0:	strne	r0, [r4]
   18fa4:	movne	r0, #1
   18fa8:	strne	r5, [r4, #4]
   18fac:	popne	{r4, r5, r6, sl, fp, pc}
   18fb0:	b	18fc0 <lchmod@@Base+0x25c0>
   18fb4:	bl	118ec <__errno_location@plt>
   18fb8:	mov	r1, #12
   18fbc:	str	r1, [r0]
   18fc0:	mov	r0, #0
   18fc4:	mov	r5, #1024	; 0x400
   18fc8:	str	r6, [r4]
   18fcc:	str	r5, [r4, #4]
   18fd0:	pop	{r4, r5, r6, sl, fp, pc}
   18fd4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18fd8:	add	fp, sp, #24
   18fdc:	ldrd	r8, [r0]
   18fe0:	add	r7, r0, #8
   18fe4:	mov	r4, r0
   18fe8:	lsl	r5, r9, #1
   18fec:	cmp	r8, r7
   18ff0:	beq	1901c <lchmod@@Base+0x261c>
   18ff4:	cmp	r5, r9
   18ff8:	bcc	19054 <lchmod@@Base+0x2654>
   18ffc:	mov	r0, r8
   19000:	mov	r1, r5
   19004:	bl	19f58 <lchmod@@Base+0x3558>
   19008:	mov	r6, r0
   1900c:	cmp	r0, #0
   19010:	bne	1903c <lchmod@@Base+0x263c>
   19014:	ldr	r8, [r4]
   19018:	b	19060 <lchmod@@Base+0x2660>
   1901c:	mov	r0, r5
   19020:	bl	19f28 <lchmod@@Base+0x3528>
   19024:	cmp	r0, #0
   19028:	beq	1904c <lchmod@@Base+0x264c>
   1902c:	ldr	r2, [r4, #4]
   19030:	mov	r1, r8
   19034:	mov	r6, r0
   19038:	bl	11730 <memcpy@plt>
   1903c:	mov	r0, #1
   19040:	str	r6, [r4]
   19044:	str	r5, [r4, #4]
   19048:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1904c:	mov	r0, #0
   19050:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19054:	bl	118ec <__errno_location@plt>
   19058:	mov	r1, #12
   1905c:	str	r1, [r0]
   19060:	mov	r0, r8
   19064:	bl	13164 <__assert_fail@plt+0x16c8>
   19068:	mov	r0, #0
   1906c:	mov	r5, #1024	; 0x400
   19070:	str	r7, [r4]
   19074:	str	r5, [r4, #4]
   19078:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1907c:	push	{r4, r5, fp, lr}
   19080:	add	fp, sp, #8
   19084:	mov	r4, r1
   19088:	bl	118a4 <getfilecon@plt>
   1908c:	cmp	r0, #10
   19090:	beq	190a8 <lchmod@@Base+0x26a8>
   19094:	cmp	r0, #0
   19098:	bne	190ec <lchmod@@Base+0x26ec>
   1909c:	bl	118ec <__errno_location@plt>
   190a0:	mov	r1, #95	; 0x5f
   190a4:	b	190e4 <lchmod@@Base+0x26e4>
   190a8:	ldr	r5, [r4]
   190ac:	movw	r1, #45272	; 0xb0d8
   190b0:	movt	r1, #1
   190b4:	mov	r0, r5
   190b8:	bl	116d0 <strcmp@plt>
   190bc:	mov	r1, r0
   190c0:	mov	r0, #10
   190c4:	cmp	r1, #0
   190c8:	popne	{r4, r5, fp, pc}
   190cc:	mov	r0, r5
   190d0:	bl	119dc <freecon@plt>
   190d4:	mov	r0, #0
   190d8:	str	r0, [r4]
   190dc:	bl	118ec <__errno_location@plt>
   190e0:	mov	r1, #61	; 0x3d
   190e4:	str	r1, [r0]
   190e8:	mvn	r0, #0
   190ec:	pop	{r4, r5, fp, pc}
   190f0:	push	{r4, r5, fp, lr}
   190f4:	add	fp, sp, #8
   190f8:	mov	r4, r1
   190fc:	bl	1182c <lgetfilecon@plt>
   19100:	cmp	r0, #10
   19104:	beq	1911c <lchmod@@Base+0x271c>
   19108:	cmp	r0, #0
   1910c:	bne	19160 <lchmod@@Base+0x2760>
   19110:	bl	118ec <__errno_location@plt>
   19114:	mov	r1, #95	; 0x5f
   19118:	b	19158 <lchmod@@Base+0x2758>
   1911c:	ldr	r5, [r4]
   19120:	movw	r1, #45272	; 0xb0d8
   19124:	movt	r1, #1
   19128:	mov	r0, r5
   1912c:	bl	116d0 <strcmp@plt>
   19130:	mov	r1, r0
   19134:	mov	r0, #10
   19138:	cmp	r1, #0
   1913c:	popne	{r4, r5, fp, pc}
   19140:	mov	r0, r5
   19144:	bl	119dc <freecon@plt>
   19148:	mov	r0, #0
   1914c:	str	r0, [r4]
   19150:	bl	118ec <__errno_location@plt>
   19154:	mov	r1, #61	; 0x3d
   19158:	str	r1, [r0]
   1915c:	mvn	r0, #0
   19160:	pop	{r4, r5, fp, pc}
   19164:	push	{r4, r5, fp, lr}
   19168:	add	fp, sp, #8
   1916c:	mov	r4, r1
   19170:	bl	11778 <fgetfilecon@plt>
   19174:	cmp	r0, #10
   19178:	beq	19190 <lchmod@@Base+0x2790>
   1917c:	cmp	r0, #0
   19180:	bne	191d4 <lchmod@@Base+0x27d4>
   19184:	bl	118ec <__errno_location@plt>
   19188:	mov	r1, #95	; 0x5f
   1918c:	b	191cc <lchmod@@Base+0x27cc>
   19190:	ldr	r5, [r4]
   19194:	movw	r1, #45272	; 0xb0d8
   19198:	movt	r1, #1
   1919c:	mov	r0, r5
   191a0:	bl	116d0 <strcmp@plt>
   191a4:	mov	r1, r0
   191a8:	mov	r0, #10
   191ac:	cmp	r1, #0
   191b0:	popne	{r4, r5, fp, pc}
   191b4:	mov	r0, r5
   191b8:	bl	119dc <freecon@plt>
   191bc:	mov	r0, #0
   191c0:	str	r0, [r4]
   191c4:	bl	118ec <__errno_location@plt>
   191c8:	mov	r1, #61	; 0x3d
   191cc:	str	r1, [r0]
   191d0:	mvn	r0, #0
   191d4:	pop	{r4, r5, fp, pc}
   191d8:	push	{r4, r5, r6, r7, fp, lr}
   191dc:	add	fp, sp, #16
   191e0:	mov	r4, r0
   191e4:	cmp	r0, #2
   191e8:	bhi	19218 <lchmod@@Base+0x2818>
   191ec:	mov	r0, r4
   191f0:	bl	1a674 <lchmod@@Base+0x3c74>
   191f4:	mov	r5, r0
   191f8:	bl	118ec <__errno_location@plt>
   191fc:	ldr	r7, [r0]
   19200:	mov	r6, r0
   19204:	mov	r0, r4
   19208:	bl	11a48 <close@plt>
   1920c:	mov	r0, r5
   19210:	str	r7, [r6]
   19214:	pop	{r4, r5, r6, r7, fp, pc}
   19218:	mov	r0, r4
   1921c:	pop	{r4, r5, r6, r7, fp, pc}
   19220:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19224:	add	fp, sp, #24
   19228:	sub	sp, sp, #32
   1922c:	ldr	r6, [fp, #12]
   19230:	ldr	r7, [fp, #8]
   19234:	mov	r4, r2
   19238:	mov	r8, r0
   1923c:	cmp	r1, #0
   19240:	beq	19268 <lchmod@@Base+0x2868>
   19244:	movw	r2, #45282	; 0xb0e2
   19248:	mov	r5, r1
   1924c:	str	r3, [sp, #4]
   19250:	str	r4, [sp]
   19254:	mov	r0, r8
   19258:	mov	r1, #1
   1925c:	movt	r2, #1
   19260:	mov	r3, r5
   19264:	b	19280 <lchmod@@Base+0x2880>
   19268:	movw	r2, #45294	; 0xb0ee
   1926c:	str	r3, [sp]
   19270:	mov	r0, r8
   19274:	mov	r1, #1
   19278:	mov	r3, r4
   1927c:	movt	r2, #1
   19280:	bl	11934 <__fprintf_chk@plt>
   19284:	movw	r1, #45301	; 0xb0f5
   19288:	mov	r0, #0
   1928c:	mov	r2, #5
   19290:	movt	r1, #1
   19294:	bl	11754 <dcgettext@plt>
   19298:	movw	r2, #46019	; 0xb3c3
   1929c:	mov	r3, r0
   192a0:	movw	r0, #2022	; 0x7e6
   192a4:	mov	r1, #1
   192a8:	movt	r2, #1
   192ac:	str	r0, [sp]
   192b0:	mov	r0, r8
   192b4:	bl	11934 <__fprintf_chk@plt>
   192b8:	movw	r4, #44627	; 0xae53
   192bc:	mov	r1, r8
   192c0:	movt	r4, #1
   192c4:	mov	r0, r4
   192c8:	bl	116ac <fputs_unlocked@plt>
   192cc:	movw	r1, #45305	; 0xb0f9
   192d0:	mov	r0, #0
   192d4:	mov	r2, #5
   192d8:	movt	r1, #1
   192dc:	bl	11754 <dcgettext@plt>
   192e0:	movw	r3, #45476	; 0xb1a4
   192e4:	mov	r2, r0
   192e8:	mov	r0, r8
   192ec:	mov	r1, #1
   192f0:	movt	r3, #1
   192f4:	bl	11934 <__fprintf_chk@plt>
   192f8:	mov	r0, r4
   192fc:	mov	r1, r8
   19300:	bl	116ac <fputs_unlocked@plt>
   19304:	cmp	r6, #9
   19308:	bhi	19344 <lchmod@@Base+0x2944>
   1930c:	add	r0, pc, #0
   19310:	ldr	pc, [r0, r6, lsl #2]
   19314:	andeq	r9, r1, ip, lsr r3
   19318:	andeq	r9, r1, r0, asr r3
   1931c:	andeq	r9, r1, r0, lsl #7
   19320:	andeq	r9, r1, r8, lsr #7
   19324:	ldrdeq	r9, [r1], -r0
   19328:	strdeq	r9, [r1], -r8
   1932c:	andeq	r9, r1, r0, lsr #8
   19330:	andeq	r9, r1, r8, asr r4
   19334:	strdeq	r9, [r1], -r8
   19338:	andeq	r9, r1, r0, lsr #9
   1933c:	sub	sp, fp, #24
   19340:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19344:	movw	r1, #45829	; 0xb305
   19348:	movt	r1, #1
   1934c:	b	194a8 <lchmod@@Base+0x2aa8>
   19350:	movw	r1, #45510	; 0xb1c6
   19354:	mov	r0, #0
   19358:	mov	r2, #5
   1935c:	movt	r1, #1
   19360:	bl	11754 <dcgettext@plt>
   19364:	ldr	r3, [r7]
   19368:	mov	r2, r0
   1936c:	mov	r0, r8
   19370:	mov	r1, #1
   19374:	sub	sp, fp, #24
   19378:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1937c:	b	11934 <__fprintf_chk@plt>
   19380:	movw	r1, #45526	; 0xb1d6
   19384:	mov	r0, #0
   19388:	mov	r2, #5
   1938c:	movt	r1, #1
   19390:	bl	11754 <dcgettext@plt>
   19394:	mov	r2, r0
   19398:	ldr	r3, [r7]
   1939c:	ldr	r0, [r7, #4]
   193a0:	str	r0, [sp]
   193a4:	b	19494 <lchmod@@Base+0x2a94>
   193a8:	movw	r1, #45549	; 0xb1ed
   193ac:	mov	r0, #0
   193b0:	mov	r2, #5
   193b4:	movt	r1, #1
   193b8:	bl	11754 <dcgettext@plt>
   193bc:	mov	r2, r0
   193c0:	ldr	r3, [r7]
   193c4:	ldmib	r7, {r0, r1}
   193c8:	stm	sp, {r0, r1}
   193cc:	b	19494 <lchmod@@Base+0x2a94>
   193d0:	movw	r1, #45577	; 0xb209
   193d4:	mov	r0, #0
   193d8:	mov	r2, #5
   193dc:	movt	r1, #1
   193e0:	bl	11754 <dcgettext@plt>
   193e4:	ldr	r3, [r7]
   193e8:	mov	r2, r0
   193ec:	ldmib	r7, {r0, r1, r7}
   193f0:	stm	sp, {r0, r1, r7}
   193f4:	b	19494 <lchmod@@Base+0x2a94>
   193f8:	movw	r1, #45609	; 0xb229
   193fc:	mov	r0, #0
   19400:	mov	r2, #5
   19404:	movt	r1, #1
   19408:	bl	11754 <dcgettext@plt>
   1940c:	ldr	r3, [r7]
   19410:	mov	r2, r0
   19414:	ldmib	r7, {r0, r1, r6, r7}
   19418:	stm	sp, {r0, r1, r6, r7}
   1941c:	b	19494 <lchmod@@Base+0x2a94>
   19420:	movw	r1, #45645	; 0xb24d
   19424:	mov	r0, #0
   19428:	mov	r2, #5
   1942c:	movt	r1, #1
   19430:	bl	11754 <dcgettext@plt>
   19434:	mov	r2, r0
   19438:	ldr	r3, [r7]
   1943c:	ldmib	r7, {r0, r1, r6}
   19440:	ldr	r5, [r7, #16]
   19444:	ldr	r7, [r7, #20]
   19448:	stm	sp, {r0, r1, r6}
   1944c:	str	r5, [sp, #12]
   19450:	str	r7, [sp, #16]
   19454:	b	19494 <lchmod@@Base+0x2a94>
   19458:	movw	r1, #45685	; 0xb275
   1945c:	mov	r0, #0
   19460:	mov	r2, #5
   19464:	movt	r1, #1
   19468:	bl	11754 <dcgettext@plt>
   1946c:	mov	r2, r0
   19470:	ldr	r3, [r7]
   19474:	ldmib	r7, {r0, r1, r6}
   19478:	ldr	r5, [r7, #16]
   1947c:	ldr	r4, [r7, #20]
   19480:	ldr	r7, [r7, #24]
   19484:	stm	sp, {r0, r1, r6}
   19488:	str	r5, [sp, #12]
   1948c:	str	r4, [sp, #16]
   19490:	str	r7, [sp, #20]
   19494:	mov	r0, r8
   19498:	mov	r1, #1
   1949c:	b	19548 <lchmod@@Base+0x2b48>
   194a0:	movw	r1, #45777	; 0xb2d1
   194a4:	movt	r1, #1
   194a8:	mov	r0, #0
   194ac:	mov	r2, #5
   194b0:	bl	11754 <dcgettext@plt>
   194b4:	mov	ip, r0
   194b8:	ldr	r3, [r7]
   194bc:	ldr	r0, [r7, #4]
   194c0:	ldr	r1, [r7, #8]
   194c4:	ldr	r6, [r7, #12]
   194c8:	ldr	r5, [r7, #16]
   194cc:	ldr	r4, [r7, #20]
   194d0:	ldr	r2, [r7, #24]
   194d4:	ldr	lr, [r7, #28]
   194d8:	ldr	r7, [r7, #32]
   194dc:	stm	sp, {r0, r1, r6}
   194e0:	str	r5, [sp, #12]
   194e4:	str	r4, [sp, #16]
   194e8:	str	r2, [sp, #20]
   194ec:	str	lr, [sp, #24]
   194f0:	str	r7, [sp, #28]
   194f4:	b	1953c <lchmod@@Base+0x2b3c>
   194f8:	movw	r1, #45729	; 0xb2a1
   194fc:	mov	r0, #0
   19500:	mov	r2, #5
   19504:	movt	r1, #1
   19508:	bl	11754 <dcgettext@plt>
   1950c:	mov	ip, r0
   19510:	ldr	r3, [r7]
   19514:	ldmib	r7, {r0, r1, r6}
   19518:	ldr	r5, [r7, #16]
   1951c:	ldr	r4, [r7, #20]
   19520:	ldr	r2, [r7, #24]
   19524:	ldr	r7, [r7, #28]
   19528:	stm	sp, {r0, r1, r6}
   1952c:	str	r5, [sp, #12]
   19530:	str	r4, [sp, #16]
   19534:	str	r2, [sp, #20]
   19538:	str	r7, [sp, #24]
   1953c:	mov	r0, r8
   19540:	mov	r1, #1
   19544:	mov	r2, ip
   19548:	bl	11934 <__fprintf_chk@plt>
   1954c:	sub	sp, fp, #24
   19550:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19554:	push	{r4, sl, fp, lr}
   19558:	add	fp, sp, #8
   1955c:	sub	sp, sp, #8
   19560:	ldr	ip, [fp, #8]
   19564:	mov	lr, #0
   19568:	ldr	r4, [ip, lr, lsl #2]
   1956c:	add	lr, lr, #1
   19570:	cmp	r4, #0
   19574:	bne	19568 <lchmod@@Base+0x2b68>
   19578:	sub	r4, lr, #1
   1957c:	str	ip, [sp]
   19580:	str	r4, [sp, #4]
   19584:	bl	19220 <lchmod@@Base+0x2820>
   19588:	sub	sp, fp, #8
   1958c:	pop	{r4, sl, fp, pc}
   19590:	push	{fp, lr}
   19594:	mov	fp, sp
   19598:	sub	sp, sp, #48	; 0x30
   1959c:	ldr	ip, [fp, #8]
   195a0:	ldr	lr, [ip]
   195a4:	cmp	lr, #0
   195a8:	str	lr, [sp, #8]
   195ac:	beq	19648 <lchmod@@Base+0x2c48>
   195b0:	ldr	lr, [ip, #4]
   195b4:	cmp	lr, #0
   195b8:	str	lr, [sp, #12]
   195bc:	beq	19650 <lchmod@@Base+0x2c50>
   195c0:	ldr	lr, [ip, #8]
   195c4:	cmp	lr, #0
   195c8:	str	lr, [sp, #16]
   195cc:	beq	19658 <lchmod@@Base+0x2c58>
   195d0:	ldr	lr, [ip, #12]
   195d4:	cmp	lr, #0
   195d8:	str	lr, [sp, #20]
   195dc:	beq	19660 <lchmod@@Base+0x2c60>
   195e0:	ldr	lr, [ip, #16]
   195e4:	cmp	lr, #0
   195e8:	str	lr, [sp, #24]
   195ec:	beq	19668 <lchmod@@Base+0x2c68>
   195f0:	ldr	lr, [ip, #20]
   195f4:	cmp	lr, #0
   195f8:	str	lr, [sp, #28]
   195fc:	beq	19670 <lchmod@@Base+0x2c70>
   19600:	ldr	lr, [ip, #24]
   19604:	cmp	lr, #0
   19608:	str	lr, [sp, #32]
   1960c:	beq	19678 <lchmod@@Base+0x2c78>
   19610:	ldr	lr, [ip, #28]
   19614:	cmp	lr, #0
   19618:	str	lr, [sp, #36]	; 0x24
   1961c:	beq	19680 <lchmod@@Base+0x2c80>
   19620:	ldr	lr, [ip, #32]
   19624:	cmp	lr, #0
   19628:	str	lr, [sp, #40]	; 0x28
   1962c:	beq	19688 <lchmod@@Base+0x2c88>
   19630:	ldr	lr, [ip, #36]	; 0x24
   19634:	mov	ip, #10
   19638:	cmp	lr, #0
   1963c:	str	lr, [sp, #44]	; 0x2c
   19640:	movweq	ip, #9
   19644:	b	1968c <lchmod@@Base+0x2c8c>
   19648:	mov	ip, #0
   1964c:	b	1968c <lchmod@@Base+0x2c8c>
   19650:	mov	ip, #1
   19654:	b	1968c <lchmod@@Base+0x2c8c>
   19658:	mov	ip, #2
   1965c:	b	1968c <lchmod@@Base+0x2c8c>
   19660:	mov	ip, #3
   19664:	b	1968c <lchmod@@Base+0x2c8c>
   19668:	mov	ip, #4
   1966c:	b	1968c <lchmod@@Base+0x2c8c>
   19670:	mov	ip, #5
   19674:	b	1968c <lchmod@@Base+0x2c8c>
   19678:	mov	ip, #6
   1967c:	b	1968c <lchmod@@Base+0x2c8c>
   19680:	mov	ip, #7
   19684:	b	1968c <lchmod@@Base+0x2c8c>
   19688:	mov	ip, #8
   1968c:	add	lr, sp, #8
   19690:	str	ip, [sp, #4]
   19694:	str	lr, [sp]
   19698:	bl	19220 <lchmod@@Base+0x2820>
   1969c:	mov	sp, fp
   196a0:	pop	{fp, pc}
   196a4:	push	{fp, lr}
   196a8:	mov	fp, sp
   196ac:	sub	sp, sp, #56	; 0x38
   196b0:	add	ip, fp, #8
   196b4:	str	ip, [sp, #12]
   196b8:	ldr	lr, [fp, #8]
   196bc:	cmp	lr, #0
   196c0:	str	lr, [sp, #16]
   196c4:	beq	19760 <lchmod@@Base+0x2d60>
   196c8:	ldr	lr, [ip, #4]
   196cc:	cmp	lr, #0
   196d0:	str	lr, [sp, #20]
   196d4:	beq	19768 <lchmod@@Base+0x2d68>
   196d8:	ldr	lr, [ip, #8]
   196dc:	cmp	lr, #0
   196e0:	str	lr, [sp, #24]
   196e4:	beq	19770 <lchmod@@Base+0x2d70>
   196e8:	ldr	lr, [ip, #12]
   196ec:	cmp	lr, #0
   196f0:	str	lr, [sp, #28]
   196f4:	beq	19778 <lchmod@@Base+0x2d78>
   196f8:	ldr	lr, [ip, #16]
   196fc:	cmp	lr, #0
   19700:	str	lr, [sp, #32]
   19704:	beq	19780 <lchmod@@Base+0x2d80>
   19708:	ldr	lr, [ip, #20]
   1970c:	cmp	lr, #0
   19710:	str	lr, [sp, #36]	; 0x24
   19714:	beq	19788 <lchmod@@Base+0x2d88>
   19718:	ldr	lr, [ip, #24]
   1971c:	cmp	lr, #0
   19720:	str	lr, [sp, #40]	; 0x28
   19724:	beq	19790 <lchmod@@Base+0x2d90>
   19728:	ldr	lr, [ip, #28]
   1972c:	cmp	lr, #0
   19730:	str	lr, [sp, #44]	; 0x2c
   19734:	beq	19798 <lchmod@@Base+0x2d98>
   19738:	ldr	lr, [ip, #32]
   1973c:	cmp	lr, #0
   19740:	str	lr, [sp, #48]	; 0x30
   19744:	beq	197a0 <lchmod@@Base+0x2da0>
   19748:	ldr	lr, [ip, #36]	; 0x24
   1974c:	mov	ip, #10
   19750:	cmp	lr, #0
   19754:	str	lr, [sp, #52]	; 0x34
   19758:	movweq	ip, #9
   1975c:	b	197a4 <lchmod@@Base+0x2da4>
   19760:	mov	ip, #0
   19764:	b	197a4 <lchmod@@Base+0x2da4>
   19768:	mov	ip, #1
   1976c:	b	197a4 <lchmod@@Base+0x2da4>
   19770:	mov	ip, #2
   19774:	b	197a4 <lchmod@@Base+0x2da4>
   19778:	mov	ip, #3
   1977c:	b	197a4 <lchmod@@Base+0x2da4>
   19780:	mov	ip, #4
   19784:	b	197a4 <lchmod@@Base+0x2da4>
   19788:	mov	ip, #5
   1978c:	b	197a4 <lchmod@@Base+0x2da4>
   19790:	mov	ip, #6
   19794:	b	197a4 <lchmod@@Base+0x2da4>
   19798:	mov	ip, #7
   1979c:	b	197a4 <lchmod@@Base+0x2da4>
   197a0:	mov	ip, #8
   197a4:	add	lr, sp, #16
   197a8:	str	ip, [sp, #4]
   197ac:	str	lr, [sp]
   197b0:	bl	19220 <lchmod@@Base+0x2820>
   197b4:	mov	sp, fp
   197b8:	pop	{fp, pc}
   197bc:	push	{fp, lr}
   197c0:	mov	fp, sp
   197c4:	movw	r0, #49620	; 0xc1d4
   197c8:	movt	r0, #2
   197cc:	ldr	r1, [r0]
   197d0:	movw	r0, #44627	; 0xae53
   197d4:	movt	r0, #1
   197d8:	bl	116ac <fputs_unlocked@plt>
   197dc:	movw	r1, #45889	; 0xb341
   197e0:	mov	r0, #0
   197e4:	mov	r2, #5
   197e8:	movt	r1, #1
   197ec:	bl	11754 <dcgettext@plt>
   197f0:	movw	r2, #45909	; 0xb355
   197f4:	mov	r1, r0
   197f8:	mov	r0, #1
   197fc:	movt	r2, #1
   19800:	bl	1191c <__printf_chk@plt>
   19804:	movw	r1, #45931	; 0xb36b
   19808:	mov	r0, #0
   1980c:	mov	r2, #5
   19810:	movt	r1, #1
   19814:	bl	11754 <dcgettext@plt>
   19818:	movw	r2, #44039	; 0xac07
   1981c:	movw	r3, #44436	; 0xad94
   19820:	mov	r1, r0
   19824:	mov	r0, #1
   19828:	movt	r2, #1
   1982c:	movt	r3, #1
   19830:	bl	1191c <__printf_chk@plt>
   19834:	movw	r1, #45951	; 0xb37f
   19838:	mov	r0, #0
   1983c:	mov	r2, #5
   19840:	movt	r1, #1
   19844:	bl	11754 <dcgettext@plt>
   19848:	movw	r2, #45990	; 0xb3a6
   1984c:	mov	r1, r0
   19850:	mov	r0, #1
   19854:	movt	r2, #1
   19858:	pop	{fp, lr}
   1985c:	b	1191c <__printf_chk@plt>
   19860:	push	{r4, r5, r6, sl, fp, lr}
   19864:	add	fp, sp, #16
   19868:	mov	r4, r2
   1986c:	mov	r5, r1
   19870:	mov	r6, r0
   19874:	bl	1a638 <lchmod@@Base+0x3c38>
   19878:	cmp	r0, #0
   1987c:	popne	{r4, r5, r6, sl, fp, pc}
   19880:	cmp	r6, #0
   19884:	beq	19898 <lchmod@@Base+0x2e98>
   19888:	cmp	r5, #0
   1988c:	cmpne	r4, #0
   19890:	bne	19898 <lchmod@@Base+0x2e98>
   19894:	pop	{r4, r5, r6, sl, fp, pc}
   19898:	bl	19e14 <lchmod@@Base+0x3414>
   1989c:	push	{r4, r5, r6, sl, fp, lr}
   198a0:	add	fp, sp, #16
   198a4:	mov	r4, r2
   198a8:	mov	r5, r1
   198ac:	mov	r6, r0
   198b0:	bl	1a638 <lchmod@@Base+0x3c38>
   198b4:	cmp	r0, #0
   198b8:	popne	{r4, r5, r6, sl, fp, pc}
   198bc:	cmp	r6, #0
   198c0:	beq	198d4 <lchmod@@Base+0x2ed4>
   198c4:	cmp	r5, #0
   198c8:	cmpne	r4, #0
   198cc:	bne	198d4 <lchmod@@Base+0x2ed4>
   198d0:	pop	{r4, r5, r6, sl, fp, pc}
   198d4:	bl	19e14 <lchmod@@Base+0x3414>
   198d8:	push	{fp, lr}
   198dc:	mov	fp, sp
   198e0:	bl	19f28 <lchmod@@Base+0x3528>
   198e4:	cmp	r0, #0
   198e8:	popne	{fp, pc}
   198ec:	bl	19e14 <lchmod@@Base+0x3414>
   198f0:	push	{fp, lr}
   198f4:	mov	fp, sp
   198f8:	bl	19f28 <lchmod@@Base+0x3528>
   198fc:	cmp	r0, #0
   19900:	popne	{fp, pc}
   19904:	bl	19e14 <lchmod@@Base+0x3414>
   19908:	push	{fp, lr}
   1990c:	mov	fp, sp
   19910:	bl	19f28 <lchmod@@Base+0x3528>
   19914:	cmp	r0, #0
   19918:	popne	{fp, pc}
   1991c:	bl	19e14 <lchmod@@Base+0x3414>
   19920:	push	{r4, r5, fp, lr}
   19924:	add	fp, sp, #8
   19928:	mov	r4, r1
   1992c:	mov	r5, r0
   19930:	bl	19f58 <lchmod@@Base+0x3558>
   19934:	cmp	r0, #0
   19938:	popne	{r4, r5, fp, pc}
   1993c:	cmp	r5, #0
   19940:	beq	19950 <lchmod@@Base+0x2f50>
   19944:	cmp	r4, #0
   19948:	bne	19950 <lchmod@@Base+0x2f50>
   1994c:	pop	{r4, r5, fp, pc}
   19950:	bl	19e14 <lchmod@@Base+0x3414>
   19954:	push	{fp, lr}
   19958:	mov	fp, sp
   1995c:	cmp	r1, #0
   19960:	orreq	r1, r1, #1
   19964:	bl	19f58 <lchmod@@Base+0x3558>
   19968:	cmp	r0, #0
   1996c:	popne	{fp, pc}
   19970:	bl	19e14 <lchmod@@Base+0x3414>
   19974:	push	{fp, lr}
   19978:	mov	fp, sp
   1997c:	clz	r3, r2
   19980:	lsr	ip, r3, #5
   19984:	clz	r3, r1
   19988:	lsr	r3, r3, #5
   1998c:	orrs	r3, r3, ip
   19990:	movwne	r1, #1
   19994:	movwne	r2, #1
   19998:	bl	1a638 <lchmod@@Base+0x3c38>
   1999c:	cmp	r0, #0
   199a0:	popne	{fp, pc}
   199a4:	bl	19e14 <lchmod@@Base+0x3414>
   199a8:	push	{fp, lr}
   199ac:	mov	fp, sp
   199b0:	mov	r2, r1
   199b4:	mov	r1, r0
   199b8:	mov	r0, #0
   199bc:	bl	1a638 <lchmod@@Base+0x3c38>
   199c0:	cmp	r0, #0
   199c4:	popne	{fp, pc}
   199c8:	bl	19e14 <lchmod@@Base+0x3414>
   199cc:	push	{fp, lr}
   199d0:	mov	fp, sp
   199d4:	mov	r2, r1
   199d8:	mov	r1, r0
   199dc:	clz	r0, r2
   199e0:	clz	r3, r1
   199e4:	lsr	r0, r0, #5
   199e8:	lsr	r3, r3, #5
   199ec:	orrs	r0, r3, r0
   199f0:	mov	r0, #0
   199f4:	movwne	r1, #1
   199f8:	movwne	r2, #1
   199fc:	bl	1a638 <lchmod@@Base+0x3c38>
   19a00:	cmp	r0, #0
   19a04:	popne	{fp, pc}
   19a08:	bl	19e14 <lchmod@@Base+0x3414>
   19a0c:	push	{r4, r5, r6, sl, fp, lr}
   19a10:	add	fp, sp, #16
   19a14:	ldr	r5, [r1]
   19a18:	mov	r4, r1
   19a1c:	mov	r6, r0
   19a20:	cmp	r0, #0
   19a24:	beq	19a3c <lchmod@@Base+0x303c>
   19a28:	mov	r0, #1
   19a2c:	add	r0, r0, r5, lsr #1
   19a30:	adds	r5, r5, r0
   19a34:	bcc	19a44 <lchmod@@Base+0x3044>
   19a38:	b	19a80 <lchmod@@Base+0x3080>
   19a3c:	cmp	r5, #0
   19a40:	movweq	r5, #64	; 0x40
   19a44:	mov	r0, r6
   19a48:	mov	r1, r5
   19a4c:	mov	r2, #1
   19a50:	bl	1a638 <lchmod@@Base+0x3c38>
   19a54:	cmp	r5, #0
   19a58:	mov	r1, r5
   19a5c:	movwne	r1, #1
   19a60:	cmp	r0, #0
   19a64:	bne	19a78 <lchmod@@Base+0x3078>
   19a68:	clz	r2, r6
   19a6c:	lsr	r2, r2, #5
   19a70:	orrs	r1, r2, r1
   19a74:	bne	19a80 <lchmod@@Base+0x3080>
   19a78:	str	r5, [r4]
   19a7c:	pop	{r4, r5, r6, sl, fp, pc}
   19a80:	bl	19e14 <lchmod@@Base+0x3414>
   19a84:	push	{r4, r5, r6, r7, fp, lr}
   19a88:	add	fp, sp, #16
   19a8c:	ldr	r5, [r1]
   19a90:	mov	r6, r2
   19a94:	mov	r4, r1
   19a98:	mov	r7, r0
   19a9c:	cmp	r0, #0
   19aa0:	beq	19ab8 <lchmod@@Base+0x30b8>
   19aa4:	mov	r0, #1
   19aa8:	add	r0, r0, r5, lsr #1
   19aac:	adds	r5, r5, r0
   19ab0:	bcc	19ad0 <lchmod@@Base+0x30d0>
   19ab4:	b	19b04 <lchmod@@Base+0x3104>
   19ab8:	cmp	r5, #0
   19abc:	bne	19ad0 <lchmod@@Base+0x30d0>
   19ac0:	mov	r0, #64	; 0x40
   19ac4:	cmp	r6, #64	; 0x40
   19ac8:	udiv	r5, r0, r6
   19acc:	addhi	r5, r5, #1
   19ad0:	mov	r0, r7
   19ad4:	mov	r1, r5
   19ad8:	mov	r2, r6
   19adc:	bl	1a638 <lchmod@@Base+0x3c38>
   19ae0:	cmp	r0, #0
   19ae4:	bne	19afc <lchmod@@Base+0x30fc>
   19ae8:	cmp	r7, #0
   19aec:	beq	19b04 <lchmod@@Base+0x3104>
   19af0:	cmp	r6, #0
   19af4:	cmpne	r5, #0
   19af8:	bne	19b04 <lchmod@@Base+0x3104>
   19afc:	str	r5, [r4]
   19b00:	pop	{r4, r5, r6, r7, fp, pc}
   19b04:	bl	19e14 <lchmod@@Base+0x3414>
   19b08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19b0c:	add	fp, sp, #24
   19b10:	mov	r8, r1
   19b14:	ldr	r1, [r1]
   19b18:	mov	r5, r0
   19b1c:	add	r0, r1, r1, asr #1
   19b20:	cmp	r0, r1
   19b24:	mvnvs	r0, #-2147483648	; 0x80000000
   19b28:	cmp	r0, r3
   19b2c:	mov	r7, r0
   19b30:	movgt	r7, r3
   19b34:	cmn	r3, #1
   19b38:	movle	r7, r0
   19b3c:	ldr	r0, [fp, #8]
   19b40:	cmn	r0, #1
   19b44:	ble	19b6c <lchmod@@Base+0x316c>
   19b48:	cmp	r0, #0
   19b4c:	beq	19bc0 <lchmod@@Base+0x31c0>
   19b50:	cmn	r7, #1
   19b54:	ble	19b94 <lchmod@@Base+0x3194>
   19b58:	mvn	r4, #-2147483648	; 0x80000000
   19b5c:	udiv	r6, r4, r0
   19b60:	cmp	r6, r7
   19b64:	bge	19bc0 <lchmod@@Base+0x31c0>
   19b68:	b	19bd0 <lchmod@@Base+0x31d0>
   19b6c:	cmn	r7, #1
   19b70:	ble	19bb0 <lchmod@@Base+0x31b0>
   19b74:	cmn	r0, #1
   19b78:	beq	19bc0 <lchmod@@Base+0x31c0>
   19b7c:	mov	r6, #-2147483648	; 0x80000000
   19b80:	mvn	r4, #-2147483648	; 0x80000000
   19b84:	sdiv	r6, r6, r0
   19b88:	cmp	r6, r7
   19b8c:	bge	19bc0 <lchmod@@Base+0x31c0>
   19b90:	b	19bd0 <lchmod@@Base+0x31d0>
   19b94:	beq	19bc0 <lchmod@@Base+0x31c0>
   19b98:	mov	r6, #-2147483648	; 0x80000000
   19b9c:	mvn	r4, #-2147483648	; 0x80000000
   19ba0:	sdiv	r6, r6, r7
   19ba4:	cmp	r6, r0
   19ba8:	bge	19bc0 <lchmod@@Base+0x31c0>
   19bac:	b	19bd0 <lchmod@@Base+0x31d0>
   19bb0:	mvn	r4, #-2147483648	; 0x80000000
   19bb4:	sdiv	r6, r4, r0
   19bb8:	cmp	r7, r6
   19bbc:	blt	19bd0 <lchmod@@Base+0x31d0>
   19bc0:	mul	r6, r7, r0
   19bc4:	mov	r4, #64	; 0x40
   19bc8:	cmp	r6, #63	; 0x3f
   19bcc:	bgt	19bd8 <lchmod@@Base+0x31d8>
   19bd0:	sdiv	r7, r4, r0
   19bd4:	mul	r6, r7, r0
   19bd8:	cmp	r5, #0
   19bdc:	moveq	r4, #0
   19be0:	streq	r4, [r8]
   19be4:	sub	r4, r7, r1
   19be8:	cmp	r4, r2
   19bec:	bge	19c98 <lchmod@@Base+0x3298>
   19bf0:	add	r7, r1, r2
   19bf4:	mov	r6, #0
   19bf8:	mov	r2, #0
   19bfc:	cmp	r7, r3
   19c00:	movwgt	r6, #1
   19c04:	cmn	r3, #1
   19c08:	movwgt	r2, #1
   19c0c:	cmp	r7, r1
   19c10:	bvs	19ccc <lchmod@@Base+0x32cc>
   19c14:	ands	r1, r2, r6
   19c18:	bne	19ccc <lchmod@@Base+0x32cc>
   19c1c:	cmn	r0, #1
   19c20:	ble	19c48 <lchmod@@Base+0x3248>
   19c24:	cmp	r0, #0
   19c28:	beq	19c94 <lchmod@@Base+0x3294>
   19c2c:	cmn	r7, #1
   19c30:	ble	19c6c <lchmod@@Base+0x326c>
   19c34:	mvn	r1, #-2147483648	; 0x80000000
   19c38:	udiv	r1, r1, r0
   19c3c:	cmp	r1, r7
   19c40:	bge	19c94 <lchmod@@Base+0x3294>
   19c44:	b	19ccc <lchmod@@Base+0x32cc>
   19c48:	cmn	r7, #1
   19c4c:	ble	19c84 <lchmod@@Base+0x3284>
   19c50:	cmn	r0, #1
   19c54:	beq	19c94 <lchmod@@Base+0x3294>
   19c58:	mov	r1, #-2147483648	; 0x80000000
   19c5c:	sdiv	r1, r1, r0
   19c60:	cmp	r1, r7
   19c64:	bge	19c94 <lchmod@@Base+0x3294>
   19c68:	b	19ccc <lchmod@@Base+0x32cc>
   19c6c:	beq	19c94 <lchmod@@Base+0x3294>
   19c70:	mov	r1, #-2147483648	; 0x80000000
   19c74:	sdiv	r1, r1, r7
   19c78:	cmp	r1, r0
   19c7c:	bge	19c94 <lchmod@@Base+0x3294>
   19c80:	b	19ccc <lchmod@@Base+0x32cc>
   19c84:	mvn	r1, #-2147483648	; 0x80000000
   19c88:	sdiv	r1, r1, r0
   19c8c:	cmp	r7, r1
   19c90:	blt	19ccc <lchmod@@Base+0x32cc>
   19c94:	mul	r6, r7, r0
   19c98:	mov	r0, r5
   19c9c:	mov	r1, r6
   19ca0:	bl	19f58 <lchmod@@Base+0x3558>
   19ca4:	cmp	r6, #0
   19ca8:	movwne	r6, #1
   19cac:	cmp	r0, #0
   19cb0:	bne	19cc4 <lchmod@@Base+0x32c4>
   19cb4:	clz	r1, r5
   19cb8:	lsr	r1, r1, #5
   19cbc:	orrs	r1, r1, r6
   19cc0:	bne	19ccc <lchmod@@Base+0x32cc>
   19cc4:	str	r7, [r8]
   19cc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19ccc:	bl	19e14 <lchmod@@Base+0x3414>
   19cd0:	push	{fp, lr}
   19cd4:	mov	fp, sp
   19cd8:	mov	r1, #1
   19cdc:	bl	19ed4 <lchmod@@Base+0x34d4>
   19ce0:	cmp	r0, #0
   19ce4:	popne	{fp, pc}
   19ce8:	bl	19e14 <lchmod@@Base+0x3414>
   19cec:	push	{fp, lr}
   19cf0:	mov	fp, sp
   19cf4:	bl	19ed4 <lchmod@@Base+0x34d4>
   19cf8:	cmp	r0, #0
   19cfc:	popne	{fp, pc}
   19d00:	bl	19e14 <lchmod@@Base+0x3414>
   19d04:	push	{fp, lr}
   19d08:	mov	fp, sp
   19d0c:	mov	r1, #1
   19d10:	bl	19ed4 <lchmod@@Base+0x34d4>
   19d14:	cmp	r0, #0
   19d18:	popne	{fp, pc}
   19d1c:	bl	19e14 <lchmod@@Base+0x3414>
   19d20:	push	{fp, lr}
   19d24:	mov	fp, sp
   19d28:	bl	19ed4 <lchmod@@Base+0x34d4>
   19d2c:	cmp	r0, #0
   19d30:	popne	{fp, pc}
   19d34:	bl	19e14 <lchmod@@Base+0x3414>
   19d38:	push	{r4, r5, fp, lr}
   19d3c:	add	fp, sp, #8
   19d40:	mov	r5, r0
   19d44:	mov	r0, r1
   19d48:	mov	r4, r1
   19d4c:	bl	19f28 <lchmod@@Base+0x3528>
   19d50:	cmp	r0, #0
   19d54:	beq	19d68 <lchmod@@Base+0x3368>
   19d58:	mov	r1, r5
   19d5c:	mov	r2, r4
   19d60:	pop	{r4, r5, fp, lr}
   19d64:	b	11730 <memcpy@plt>
   19d68:	bl	19e14 <lchmod@@Base+0x3414>
   19d6c:	push	{r4, r5, fp, lr}
   19d70:	add	fp, sp, #8
   19d74:	mov	r5, r0
   19d78:	mov	r0, r1
   19d7c:	mov	r4, r1
   19d80:	bl	19f28 <lchmod@@Base+0x3528>
   19d84:	cmp	r0, #0
   19d88:	beq	19d9c <lchmod@@Base+0x339c>
   19d8c:	mov	r1, r5
   19d90:	mov	r2, r4
   19d94:	pop	{r4, r5, fp, lr}
   19d98:	b	11730 <memcpy@plt>
   19d9c:	bl	19e14 <lchmod@@Base+0x3414>
   19da0:	push	{r4, r5, fp, lr}
   19da4:	add	fp, sp, #8
   19da8:	mov	r5, r0
   19dac:	add	r0, r1, #1
   19db0:	mov	r4, r1
   19db4:	bl	19f28 <lchmod@@Base+0x3528>
   19db8:	cmp	r0, #0
   19dbc:	beq	19dd8 <lchmod@@Base+0x33d8>
   19dc0:	mov	r1, #0
   19dc4:	mov	r2, r4
   19dc8:	strb	r1, [r0, r4]
   19dcc:	mov	r1, r5
   19dd0:	pop	{r4, r5, fp, lr}
   19dd4:	b	11730 <memcpy@plt>
   19dd8:	bl	19e14 <lchmod@@Base+0x3414>
   19ddc:	push	{r4, r5, fp, lr}
   19de0:	add	fp, sp, #8
   19de4:	mov	r4, r0
   19de8:	bl	118bc <strlen@plt>
   19dec:	add	r5, r0, #1
   19df0:	mov	r0, r5
   19df4:	bl	19f28 <lchmod@@Base+0x3528>
   19df8:	cmp	r0, #0
   19dfc:	beq	19e10 <lchmod@@Base+0x3410>
   19e00:	mov	r1, r4
   19e04:	mov	r2, r5
   19e08:	pop	{r4, r5, fp, lr}
   19e0c:	b	11730 <memcpy@plt>
   19e10:	bl	19e14 <lchmod@@Base+0x3414>
   19e14:	push	{fp, lr}
   19e18:	mov	fp, sp
   19e1c:	movw	r0, #49532	; 0xc17c
   19e20:	movw	r1, #46066	; 0xb3f2
   19e24:	mov	r2, #5
   19e28:	movt	r0, #2
   19e2c:	movt	r1, #1
   19e30:	ldr	r4, [r0]
   19e34:	mov	r0, #0
   19e38:	bl	11754 <dcgettext@plt>
   19e3c:	movw	r2, #44815	; 0xaf0f
   19e40:	mov	r3, r0
   19e44:	mov	r0, r4
   19e48:	mov	r1, #0
   19e4c:	movt	r2, #1
   19e50:	bl	11814 <error@plt>
   19e54:	bl	11a3c <abort@plt>
   19e58:	push	{fp, lr}
   19e5c:	mov	fp, sp
   19e60:	orr	r1, r1, #512	; 0x200
   19e64:	bl	1318c <__assert_fail@plt+0x16f0>
   19e68:	cmp	r0, #0
   19e6c:	popne	{fp, pc}
   19e70:	bl	118ec <__errno_location@plt>
   19e74:	ldr	r0, [r0]
   19e78:	cmp	r0, #22
   19e7c:	bne	19ea0 <lchmod@@Base+0x34a0>
   19e80:	movw	r0, #46083	; 0xb403
   19e84:	movw	r1, #46099	; 0xb413
   19e88:	movw	r3, #46110	; 0xb41e
   19e8c:	mov	r2, #41	; 0x29
   19e90:	movt	r0, #1
   19e94:	movt	r1, #1
   19e98:	movt	r3, #1
   19e9c:	bl	11a9c <__assert_fail@plt>
   19ea0:	bl	19e14 <lchmod@@Base+0x3414>
   19ea4:	ldr	r0, [r0, #48]	; 0x30
   19ea8:	and	r0, r0, #17
   19eac:	cmp	r0, #16
   19eb0:	moveq	r0, #1
   19eb4:	bxeq	lr
   19eb8:	cmp	r0, #17
   19ebc:	movne	r0, #0
   19ec0:	bxne	lr
   19ec4:	ldr	r0, [r1, #48]	; 0x30
   19ec8:	cmp	r0, #0
   19ecc:	movwne	r0, #1
   19ed0:	bx	lr
   19ed4:	clz	r2, r1
   19ed8:	clz	r3, r0
   19edc:	lsr	r2, r2, #5
   19ee0:	lsr	r3, r3, #5
   19ee4:	orrs	r2, r3, r2
   19ee8:	movwne	r1, #1
   19eec:	movwne	r0, #1
   19ef0:	cmp	r1, #0
   19ef4:	beq	19f24 <lchmod@@Base+0x3524>
   19ef8:	mvn	r2, #-2147483648	; 0x80000000
   19efc:	udiv	r2, r2, r1
   19f00:	cmp	r2, r0
   19f04:	bcs	19f24 <lchmod@@Base+0x3524>
   19f08:	push	{fp, lr}
   19f0c:	mov	fp, sp
   19f10:	bl	118ec <__errno_location@plt>
   19f14:	mov	r1, #12
   19f18:	str	r1, [r0]
   19f1c:	mov	r0, #0
   19f20:	pop	{fp, pc}
   19f24:	b	116a0 <calloc@plt>
   19f28:	cmp	r0, #0
   19f2c:	movweq	r0, #1
   19f30:	cmn	r0, #1
   19f34:	ble	19f3c <lchmod@@Base+0x353c>
   19f38:	b	11838 <malloc@plt>
   19f3c:	push	{fp, lr}
   19f40:	mov	fp, sp
   19f44:	bl	118ec <__errno_location@plt>
   19f48:	mov	r1, #12
   19f4c:	str	r1, [r0]
   19f50:	mov	r0, #0
   19f54:	pop	{fp, pc}
   19f58:	push	{fp, lr}
   19f5c:	mov	fp, sp
   19f60:	cmp	r0, #0
   19f64:	beq	19f80 <lchmod@@Base+0x3580>
   19f68:	cmp	r1, #0
   19f6c:	beq	19f8c <lchmod@@Base+0x358c>
   19f70:	cmn	r1, #1
   19f74:	ble	19f98 <lchmod@@Base+0x3598>
   19f78:	pop	{fp, lr}
   19f7c:	b	1176c <realloc@plt>
   19f80:	mov	r0, r1
   19f84:	pop	{fp, lr}
   19f88:	b	19f28 <lchmod@@Base+0x3528>
   19f8c:	bl	13164 <__assert_fail@plt+0x16c8>
   19f90:	mov	r0, #0
   19f94:	pop	{fp, pc}
   19f98:	bl	118ec <__errno_location@plt>
   19f9c:	mov	r1, #12
   19fa0:	str	r1, [r0]
   19fa4:	mov	r0, #0
   19fa8:	pop	{fp, pc}
   19fac:	sub	r0, r0, #1
   19fb0:	ldrb	r3, [r0, #1]!
   19fb4:	cmp	r3, #47	; 0x2f
   19fb8:	beq	19fb0 <lchmod@@Base+0x35b0>
   19fbc:	mov	r2, #0
   19fc0:	mov	r1, r0
   19fc4:	b	19fd0 <lchmod@@Base+0x35d0>
   19fc8:	ldrb	r3, [r1, #1]!
   19fcc:	mov	r2, #1
   19fd0:	uxtb	r3, r3
   19fd4:	cmp	r3, #47	; 0x2f
   19fd8:	beq	19fc8 <lchmod@@Base+0x35c8>
   19fdc:	cmp	r3, #0
   19fe0:	bxeq	lr
   19fe4:	tst	r2, #1
   19fe8:	mov	r2, #0
   19fec:	movne	r0, r1
   19ff0:	ldrb	r3, [r1, #1]!
   19ff4:	b	19fd0 <lchmod@@Base+0x35d0>
   19ff8:	push	{r4, sl, fp, lr}
   19ffc:	add	fp, sp, #8
   1a000:	mov	r4, r0
   1a004:	bl	118bc <strlen@plt>
   1a008:	mov	r1, r0
   1a00c:	sub	r2, r4, #1
   1a010:	mov	r0, r1
   1a014:	cmp	r1, #2
   1a018:	bcc	1a02c <lchmod@@Base+0x362c>
   1a01c:	ldrb	r3, [r2, r0]
   1a020:	sub	r1, r0, #1
   1a024:	cmp	r3, #47	; 0x2f
   1a028:	beq	1a010 <lchmod@@Base+0x3610>
   1a02c:	pop	{r4, sl, fp, pc}
   1a030:	push	{r4, r5, r6, sl, fp, lr}
   1a034:	add	fp, sp, #16
   1a038:	mov	r4, r0
   1a03c:	bl	117fc <__fpending@plt>
   1a040:	ldr	r6, [r4]
   1a044:	mov	r5, r0
   1a048:	mov	r0, r4
   1a04c:	bl	1a1a4 <lchmod@@Base+0x37a4>
   1a050:	tst	r6, #32
   1a054:	bne	1a08c <lchmod@@Base+0x368c>
   1a058:	cmp	r0, #0
   1a05c:	mov	r4, r0
   1a060:	mvnne	r4, #0
   1a064:	cmp	r5, #0
   1a068:	bne	1a098 <lchmod@@Base+0x3698>
   1a06c:	cmp	r0, #0
   1a070:	beq	1a098 <lchmod@@Base+0x3698>
   1a074:	bl	118ec <__errno_location@plt>
   1a078:	ldr	r0, [r0]
   1a07c:	subs	r4, r0, #9
   1a080:	mvnne	r4, #0
   1a084:	mov	r0, r4
   1a088:	pop	{r4, r5, r6, sl, fp, pc}
   1a08c:	mvn	r4, #0
   1a090:	cmp	r0, #0
   1a094:	beq	1a0a0 <lchmod@@Base+0x36a0>
   1a098:	mov	r0, r4
   1a09c:	pop	{r4, r5, r6, sl, fp, pc}
   1a0a0:	bl	118ec <__errno_location@plt>
   1a0a4:	mov	r1, #0
   1a0a8:	str	r1, [r0]
   1a0ac:	mov	r0, r4
   1a0b0:	pop	{r4, r5, r6, sl, fp, pc}
   1a0b4:	movw	r2, #62998	; 0xf616
   1a0b8:	mov	r1, #0
   1a0bc:	movt	r2, #149	; 0x95
   1a0c0:	str	r1, [r0, #16]
   1a0c4:	str	r1, [r0, #20]
   1a0c8:	str	r2, [r0, #24]
   1a0cc:	bx	lr
   1a0d0:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1a0d4:	add	fp, sp, #24
   1a0d8:	ldr	r2, [r0, #24]
   1a0dc:	movw	r3, #62998	; 0xf616
   1a0e0:	movt	r3, #149	; 0x95
   1a0e4:	cmp	r2, r3
   1a0e8:	bne	1a184 <lchmod@@Base+0x3784>
   1a0ec:	add	r3, r0, #16
   1a0f0:	add	ip, r0, #8
   1a0f4:	ldrd	r4, [r3]
   1a0f8:	orrs	r2, r4, r5
   1a0fc:	beq	1a138 <lchmod@@Base+0x3738>
   1a100:	ldr	r6, [r1, #96]	; 0x60
   1a104:	ldr	r9, [r1, #100]	; 0x64
   1a108:	ldm	r0, {r2, r7}
   1a10c:	eor	r7, r9, r7
   1a110:	eor	r2, r6, r2
   1a114:	orrs	r2, r2, r7
   1a118:	bne	1a138 <lchmod@@Base+0x3738>
   1a11c:	ldm	ip, {r2, r7}
   1a120:	ldm	r1, {r6, r9}
   1a124:	eor	r7, r9, r7
   1a128:	eor	r2, r6, r2
   1a12c:	orrs	r2, r2, r7
   1a130:	mov	r2, #1
   1a134:	beq	1a170 <lchmod@@Base+0x3770>
   1a138:	adds	r6, r4, #1
   1a13c:	adc	r7, r5, #0
   1a140:	and	r2, r6, r4
   1a144:	strd	r6, [r3]
   1a148:	and	r3, r7, r5
   1a14c:	orrs	r2, r2, r3
   1a150:	mov	r2, #0
   1a154:	bne	1a170 <lchmod@@Base+0x3770>
   1a158:	orrs	r3, r6, r7
   1a15c:	beq	1a178 <lchmod@@Base+0x3778>
   1a160:	ldrd	r4, [r1]
   1a164:	strd	r4, [ip]
   1a168:	ldrd	r4, [r1, #96]	; 0x60
   1a16c:	strd	r4, [r0]
   1a170:	mov	r0, r2
   1a174:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a178:	mov	r2, #1
   1a17c:	mov	r0, r2
   1a180:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a184:	movw	r0, #46188	; 0xb46c
   1a188:	movw	r1, #46212	; 0xb484
   1a18c:	movw	r3, #46230	; 0xb496
   1a190:	mov	r2, #60	; 0x3c
   1a194:	movt	r0, #1
   1a198:	movt	r1, #1
   1a19c:	movt	r3, #1
   1a1a0:	bl	11a9c <__assert_fail@plt>
   1a1a4:	push	{r4, r5, r6, sl, fp, lr}
   1a1a8:	add	fp, sp, #16
   1a1ac:	sub	sp, sp, #8
   1a1b0:	mov	r4, r0
   1a1b4:	bl	11928 <fileno@plt>
   1a1b8:	cmn	r0, #1
   1a1bc:	ble	1a230 <lchmod@@Base+0x3830>
   1a1c0:	mov	r0, r4
   1a1c4:	bl	11850 <__freading@plt>
   1a1c8:	cmp	r0, #0
   1a1cc:	beq	1a1f8 <lchmod@@Base+0x37f8>
   1a1d0:	mov	r0, r4
   1a1d4:	bl	11928 <fileno@plt>
   1a1d8:	mov	r1, #1
   1a1dc:	mov	r2, #0
   1a1e0:	mov	r3, #0
   1a1e4:	str	r1, [sp]
   1a1e8:	bl	117d8 <lseek64@plt>
   1a1ec:	and	r0, r0, r1
   1a1f0:	cmn	r0, #1
   1a1f4:	beq	1a230 <lchmod@@Base+0x3830>
   1a1f8:	mov	r0, r4
   1a1fc:	bl	1a45c <lchmod@@Base+0x3a5c>
   1a200:	cmp	r0, #0
   1a204:	beq	1a230 <lchmod@@Base+0x3830>
   1a208:	bl	118ec <__errno_location@plt>
   1a20c:	ldr	r6, [r0]
   1a210:	mov	r5, r0
   1a214:	mov	r0, r4
   1a218:	bl	11940 <fclose@plt>
   1a21c:	cmp	r6, #0
   1a220:	strne	r6, [r5]
   1a224:	mvnne	r0, #0
   1a228:	sub	sp, fp, #16
   1a22c:	pop	{r4, r5, r6, sl, fp, pc}
   1a230:	mov	r0, r4
   1a234:	sub	sp, fp, #16
   1a238:	pop	{r4, r5, r6, sl, fp, lr}
   1a23c:	b	11940 <fclose@plt>
   1a240:	sub	sp, sp, #8
   1a244:	push	{r4, r5, r6, r7, fp, lr}
   1a248:	add	fp, sp, #16
   1a24c:	sub	sp, sp, #8
   1a250:	mov	r5, r0
   1a254:	add	r0, fp, #8
   1a258:	cmp	r1, #11
   1a25c:	str	r2, [fp, #8]
   1a260:	str	r3, [fp, #12]
   1a264:	str	r0, [sp, #4]
   1a268:	bhi	1a2a4 <lchmod@@Base+0x38a4>
   1a26c:	mov	r0, #1
   1a270:	movw	r2, #1300	; 0x514
   1a274:	tst	r2, r0, lsl r1
   1a278:	bne	1a364 <lchmod@@Base+0x3964>
   1a27c:	movw	r2, #2570	; 0xa0a
   1a280:	tst	r2, r0, lsl r1
   1a284:	bne	1a2cc <lchmod@@Base+0x38cc>
   1a288:	cmp	r1, #0
   1a28c:	bne	1a2a4 <lchmod@@Base+0x38a4>
   1a290:	ldr	r0, [sp, #4]
   1a294:	add	r1, r0, #4
   1a298:	str	r1, [sp, #4]
   1a29c:	mov	r1, #0
   1a2a0:	b	1a370 <lchmod@@Base+0x3970>
   1a2a4:	sub	r0, r1, #1024	; 0x400
   1a2a8:	cmp	r0, #10
   1a2ac:	bhi	1a364 <lchmod@@Base+0x3964>
   1a2b0:	mov	r2, #1
   1a2b4:	movw	r3, #645	; 0x285
   1a2b8:	tst	r3, r2, lsl r0
   1a2bc:	bne	1a364 <lchmod@@Base+0x3964>
   1a2c0:	movw	r3, #1282	; 0x502
   1a2c4:	tst	r3, r2, lsl r0
   1a2c8:	beq	1a2d8 <lchmod@@Base+0x38d8>
   1a2cc:	mov	r0, r5
   1a2d0:	bl	11958 <fcntl64@plt>
   1a2d4:	b	1a37c <lchmod@@Base+0x397c>
   1a2d8:	cmp	r0, #6
   1a2dc:	bne	1a364 <lchmod@@Base+0x3964>
   1a2e0:	ldr	r0, [sp, #4]
   1a2e4:	movw	r7, #49952	; 0xc320
   1a2e8:	movt	r7, #2
   1a2ec:	add	r1, r0, #4
   1a2f0:	str	r1, [sp, #4]
   1a2f4:	ldr	r6, [r0]
   1a2f8:	ldr	r0, [r7]
   1a2fc:	cmp	r0, #0
   1a300:	bmi	1a3a0 <lchmod@@Base+0x39a0>
   1a304:	mov	r0, r5
   1a308:	movw	r1, #1030	; 0x406
   1a30c:	mov	r2, r6
   1a310:	bl	11958 <fcntl64@plt>
   1a314:	mov	r4, r0
   1a318:	cmn	r0, #1
   1a31c:	bgt	1a394 <lchmod@@Base+0x3994>
   1a320:	bl	118ec <__errno_location@plt>
   1a324:	ldr	r0, [r0]
   1a328:	cmp	r0, #22
   1a32c:	bne	1a394 <lchmod@@Base+0x3994>
   1a330:	mov	r0, r5
   1a334:	mov	r1, #0
   1a338:	mov	r2, r6
   1a33c:	bl	11958 <fcntl64@plt>
   1a340:	mov	r4, r0
   1a344:	cmp	r0, #0
   1a348:	bmi	1a380 <lchmod@@Base+0x3980>
   1a34c:	mvn	r0, #0
   1a350:	str	r0, [r7]
   1a354:	mov	r0, #1
   1a358:	cmp	r0, #0
   1a35c:	bne	1a3cc <lchmod@@Base+0x39cc>
   1a360:	b	1a380 <lchmod@@Base+0x3980>
   1a364:	ldr	r0, [sp, #4]
   1a368:	add	r2, r0, #4
   1a36c:	str	r2, [sp, #4]
   1a370:	ldr	r2, [r0]
   1a374:	mov	r0, r5
   1a378:	bl	11958 <fcntl64@plt>
   1a37c:	mov	r4, r0
   1a380:	mov	r0, r4
   1a384:	sub	sp, fp, #16
   1a388:	pop	{r4, r5, r6, r7, fp, lr}
   1a38c:	add	sp, sp, #8
   1a390:	bx	lr
   1a394:	mov	r0, #1
   1a398:	str	r0, [r7]
   1a39c:	b	1a380 <lchmod@@Base+0x3980>
   1a3a0:	mov	r0, r5
   1a3a4:	mov	r1, #0
   1a3a8:	mov	r2, r6
   1a3ac:	bl	11958 <fcntl64@plt>
   1a3b0:	mov	r4, r0
   1a3b4:	ldr	r0, [r7]
   1a3b8:	add	r0, r0, #1
   1a3bc:	clz	r0, r0
   1a3c0:	lsr	r0, r0, #5
   1a3c4:	cmp	r0, #0
   1a3c8:	beq	1a380 <lchmod@@Base+0x3980>
   1a3cc:	cmp	r4, #0
   1a3d0:	bmi	1a380 <lchmod@@Base+0x3980>
   1a3d4:	mov	r0, r4
   1a3d8:	mov	r1, #1
   1a3dc:	bl	11958 <fcntl64@plt>
   1a3e0:	cmp	r0, #0
   1a3e4:	bmi	1a400 <lchmod@@Base+0x3a00>
   1a3e8:	orr	r2, r0, #1
   1a3ec:	mov	r0, r4
   1a3f0:	mov	r1, #2
   1a3f4:	bl	11958 <fcntl64@plt>
   1a3f8:	cmn	r0, #1
   1a3fc:	bne	1a380 <lchmod@@Base+0x3980>
   1a400:	bl	118ec <__errno_location@plt>
   1a404:	ldr	r6, [r0]
   1a408:	mov	r5, r0
   1a40c:	mov	r0, r4
   1a410:	bl	11a48 <close@plt>
   1a414:	str	r6, [r5]
   1a418:	mvn	r4, #0
   1a41c:	b	1a380 <lchmod@@Base+0x3980>
   1a420:	sub	sp, sp, #8
   1a424:	push	{fp, lr}
   1a428:	mov	fp, sp
   1a42c:	sub	sp, sp, #8
   1a430:	str	r2, [fp, #8]
   1a434:	str	r3, [fp, #12]
   1a438:	tst	r1, #64	; 0x40
   1a43c:	mov	r2, #0
   1a440:	ldrne	r2, [fp, #8]
   1a444:	bl	11820 <open64@plt>
   1a448:	bl	191d8 <lchmod@@Base+0x27d8>
   1a44c:	mov	sp, fp
   1a450:	pop	{fp, lr}
   1a454:	add	sp, sp, #8
   1a458:	bx	lr
   1a45c:	push	{r4, sl, fp, lr}
   1a460:	add	fp, sp, #8
   1a464:	sub	sp, sp, #8
   1a468:	mov	r4, r0
   1a46c:	cmp	r0, #0
   1a470:	beq	1a4a8 <lchmod@@Base+0x3aa8>
   1a474:	mov	r0, r4
   1a478:	bl	11850 <__freading@plt>
   1a47c:	cmp	r0, #0
   1a480:	beq	1a4a8 <lchmod@@Base+0x3aa8>
   1a484:	ldrb	r0, [r4, #1]
   1a488:	tst	r0, #1
   1a48c:	beq	1a4a8 <lchmod@@Base+0x3aa8>
   1a490:	mov	r0, #1
   1a494:	mov	r2, #0
   1a498:	mov	r3, #0
   1a49c:	str	r0, [sp]
   1a4a0:	mov	r0, r4
   1a4a4:	bl	1a4b8 <lchmod@@Base+0x3ab8>
   1a4a8:	mov	r0, r4
   1a4ac:	sub	sp, fp, #8
   1a4b0:	pop	{r4, sl, fp, lr}
   1a4b4:	b	116e8 <fflush@plt>
   1a4b8:	push	{r4, r5, r6, r7, fp, lr}
   1a4bc:	add	fp, sp, #16
   1a4c0:	sub	sp, sp, #8
   1a4c4:	mov	r4, r0
   1a4c8:	ldr	r0, [r0, #4]
   1a4cc:	mov	r5, r3
   1a4d0:	mov	r6, r2
   1a4d4:	ldr	r1, [r4, #8]
   1a4d8:	cmp	r1, r0
   1a4dc:	bne	1a4f8 <lchmod@@Base+0x3af8>
   1a4e0:	ldrd	r0, [r4, #16]
   1a4e4:	cmp	r1, r0
   1a4e8:	bne	1a4f8 <lchmod@@Base+0x3af8>
   1a4ec:	ldr	r0, [r4, #36]	; 0x24
   1a4f0:	cmp	r0, #0
   1a4f4:	beq	1a510 <lchmod@@Base+0x3b10>
   1a4f8:	mov	r0, r4
   1a4fc:	mov	r2, r6
   1a500:	mov	r3, r5
   1a504:	sub	sp, fp, #16
   1a508:	pop	{r4, r5, r6, r7, fp, lr}
   1a50c:	b	1194c <fseeko64@plt>
   1a510:	ldr	r7, [fp, #8]
   1a514:	mov	r0, r4
   1a518:	bl	11928 <fileno@plt>
   1a51c:	mov	r2, r6
   1a520:	mov	r3, r5
   1a524:	str	r7, [sp]
   1a528:	bl	117d8 <lseek64@plt>
   1a52c:	and	r2, r0, r1
   1a530:	cmn	r2, #1
   1a534:	beq	1a554 <lchmod@@Base+0x3b54>
   1a538:	strd	r0, [r4, #80]	; 0x50
   1a53c:	ldr	r0, [r4]
   1a540:	bic	r0, r0, #16
   1a544:	str	r0, [r4]
   1a548:	mov	r0, #0
   1a54c:	sub	sp, fp, #16
   1a550:	pop	{r4, r5, r6, r7, fp, pc}
   1a554:	mvn	r0, #0
   1a558:	sub	sp, fp, #16
   1a55c:	pop	{r4, r5, r6, r7, fp, pc}
   1a560:	ldrb	r2, [r0]
   1a564:	cmp	r2, #0
   1a568:	beq	1a58c <lchmod@@Base+0x3b8c>
   1a56c:	add	r3, r0, #1
   1a570:	mov	r0, #0
   1a574:	ror	r0, r0, #23
   1a578:	uxtab	r0, r0, r2
   1a57c:	ldrb	r2, [r3], #1
   1a580:	cmp	r2, #0
   1a584:	bne	1a574 <lchmod@@Base+0x3b74>
   1a588:	b	1a590 <lchmod@@Base+0x3b90>
   1a58c:	mov	r0, #0
   1a590:	udiv	r2, r0, r1
   1a594:	mls	r0, r2, r1, r0
   1a598:	bx	lr
   1a59c:	push	{fp, lr}
   1a5a0:	mov	fp, sp
   1a5a4:	mov	r0, #14
   1a5a8:	bl	11988 <nl_langinfo@plt>
   1a5ac:	movw	r1, #44628	; 0xae54
   1a5b0:	cmp	r0, #0
   1a5b4:	movt	r1, #1
   1a5b8:	movne	r1, r0
   1a5bc:	movw	r0, #46297	; 0xb4d9
   1a5c0:	ldrb	r2, [r1]
   1a5c4:	movt	r0, #1
   1a5c8:	cmp	r2, #0
   1a5cc:	movne	r0, r1
   1a5d0:	pop	{fp, pc}
   1a5d4:	push	{r4, r5, r6, r7, fp, lr}
   1a5d8:	add	fp, sp, #16
   1a5dc:	sub	sp, sp, #8
   1a5e0:	cmp	r0, #0
   1a5e4:	add	r5, sp, #4
   1a5e8:	mov	r7, r2
   1a5ec:	mov	r4, r1
   1a5f0:	movne	r5, r0
   1a5f4:	mov	r0, r5
   1a5f8:	bl	11808 <mbrtowc@plt>
   1a5fc:	mov	r6, r0
   1a600:	cmp	r7, #0
   1a604:	beq	1a62c <lchmod@@Base+0x3c2c>
   1a608:	cmn	r6, #2
   1a60c:	bcc	1a62c <lchmod@@Base+0x3c2c>
   1a610:	mov	r0, #0
   1a614:	bl	1a680 <lchmod@@Base+0x3c80>
   1a618:	cmp	r0, #0
   1a61c:	bne	1a62c <lchmod@@Base+0x3c2c>
   1a620:	ldrb	r0, [r4]
   1a624:	mov	r6, #1
   1a628:	str	r0, [r5]
   1a62c:	mov	r0, r6
   1a630:	sub	sp, fp, #16
   1a634:	pop	{r4, r5, r6, r7, fp, pc}
   1a638:	cmp	r2, #0
   1a63c:	beq	1a66c <lchmod@@Base+0x3c6c>
   1a640:	mvn	r3, #0
   1a644:	udiv	r3, r3, r2
   1a648:	cmp	r3, r1
   1a64c:	bcs	1a66c <lchmod@@Base+0x3c6c>
   1a650:	push	{fp, lr}
   1a654:	mov	fp, sp
   1a658:	bl	118ec <__errno_location@plt>
   1a65c:	mov	r1, #12
   1a660:	str	r1, [r0]
   1a664:	mov	r0, #0
   1a668:	pop	{fp, pc}
   1a66c:	mul	r1, r2, r1
   1a670:	b	19f58 <lchmod@@Base+0x3558>
   1a674:	mov	r1, #0
   1a678:	mov	r2, #3
   1a67c:	b	1a240 <lchmod@@Base+0x3840>
   1a680:	push	{r4, sl, fp, lr}
   1a684:	add	fp, sp, #8
   1a688:	sub	sp, sp, #264	; 0x108
   1a68c:	add	r1, sp, #7
   1a690:	movw	r2, #257	; 0x101
   1a694:	bl	1a6ec <lchmod@@Base+0x3cec>
   1a698:	mov	r4, #0
   1a69c:	cmp	r0, #0
   1a6a0:	bne	1a6e0 <lchmod@@Base+0x3ce0>
   1a6a4:	movw	r1, #46303	; 0xb4df
   1a6a8:	add	r0, sp, #7
   1a6ac:	mov	r2, #2
   1a6b0:	movt	r1, #1
   1a6b4:	bl	118b0 <bcmp@plt>
   1a6b8:	cmp	r0, #0
   1a6bc:	beq	1a6e0 <lchmod@@Base+0x3ce0>
   1a6c0:	movw	r1, #46305	; 0xb4e1
   1a6c4:	add	r0, sp, #7
   1a6c8:	mov	r2, #6
   1a6cc:	movt	r1, #1
   1a6d0:	bl	118b0 <bcmp@plt>
   1a6d4:	cmp	r0, #0
   1a6d8:	mov	r4, r0
   1a6dc:	movwne	r4, #1
   1a6e0:	mov	r0, r4
   1a6e4:	sub	sp, fp, #8
   1a6e8:	pop	{r4, sl, fp, pc}
   1a6ec:	push	{r4, r5, r6, r7, fp, lr}
   1a6f0:	add	fp, sp, #16
   1a6f4:	mov	r4, r1
   1a6f8:	mov	r1, #0
   1a6fc:	mov	r6, r2
   1a700:	bl	11964 <setlocale@plt>
   1a704:	cmp	r0, #0
   1a708:	beq	1a738 <lchmod@@Base+0x3d38>
   1a70c:	mov	r7, r0
   1a710:	bl	118bc <strlen@plt>
   1a714:	cmp	r0, r6
   1a718:	bcs	1a754 <lchmod@@Base+0x3d54>
   1a71c:	add	r2, r0, #1
   1a720:	mov	r0, r4
   1a724:	mov	r1, r7
   1a728:	bl	11730 <memcpy@plt>
   1a72c:	mov	r5, #0
   1a730:	mov	r0, r5
   1a734:	pop	{r4, r5, r6, r7, fp, pc}
   1a738:	mov	r5, #22
   1a73c:	cmp	r6, #0
   1a740:	beq	1a77c <lchmod@@Base+0x3d7c>
   1a744:	mov	r0, #0
   1a748:	strb	r0, [r4]
   1a74c:	mov	r0, r5
   1a750:	pop	{r4, r5, r6, r7, fp, pc}
   1a754:	mov	r5, #34	; 0x22
   1a758:	cmp	r6, #0
   1a75c:	beq	1a77c <lchmod@@Base+0x3d7c>
   1a760:	sub	r6, r6, #1
   1a764:	mov	r0, r4
   1a768:	mov	r1, r7
   1a76c:	mov	r2, r6
   1a770:	bl	11730 <memcpy@plt>
   1a774:	mov	r0, #0
   1a778:	strb	r0, [r4, r6]
   1a77c:	mov	r0, r5
   1a780:	pop	{r4, r5, r6, r7, fp, pc}
   1a784:	mov	r1, #0
   1a788:	b	11964 <setlocale@plt>
   1a78c:	cmp	r3, #0
   1a790:	cmpeq	r2, #0
   1a794:	bne	1a7ac <lchmod@@Base+0x3dac>
   1a798:	cmp	r1, #0
   1a79c:	cmpeq	r0, #0
   1a7a0:	mvnne	r1, #0
   1a7a4:	mvnne	r0, #0
   1a7a8:	b	1a7c8 <lchmod@@Base+0x3dc8>
   1a7ac:	sub	sp, sp, #8
   1a7b0:	push	{sp, lr}
   1a7b4:	bl	1a7d8 <lchmod@@Base+0x3dd8>
   1a7b8:	ldr	lr, [sp, #4]
   1a7bc:	add	sp, sp, #8
   1a7c0:	pop	{r2, r3}
   1a7c4:	bx	lr
   1a7c8:	push	{r1, lr}
   1a7cc:	mov	r0, #8
   1a7d0:	bl	116b8 <raise@plt>
   1a7d4:	pop	{r1, pc}
   1a7d8:	cmp	r1, r3
   1a7dc:	cmpeq	r0, r2
   1a7e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7e4:	mov	r4, r0
   1a7e8:	movcc	r0, #0
   1a7ec:	mov	r5, r1
   1a7f0:	ldr	lr, [sp, #36]	; 0x24
   1a7f4:	movcc	r1, r0
   1a7f8:	bcc	1a8f4 <lchmod@@Base+0x3ef4>
   1a7fc:	cmp	r3, #0
   1a800:	clzeq	ip, r2
   1a804:	clzne	ip, r3
   1a808:	addeq	ip, ip, #32
   1a80c:	cmp	r5, #0
   1a810:	clzeq	r1, r4
   1a814:	addeq	r1, r1, #32
   1a818:	clzne	r1, r5
   1a81c:	sub	ip, ip, r1
   1a820:	sub	sl, ip, #32
   1a824:	lsl	r9, r3, ip
   1a828:	rsb	fp, ip, #32
   1a82c:	orr	r9, r9, r2, lsl sl
   1a830:	orr	r9, r9, r2, lsr fp
   1a834:	lsl	r8, r2, ip
   1a838:	cmp	r5, r9
   1a83c:	cmpeq	r4, r8
   1a840:	movcc	r0, #0
   1a844:	movcc	r1, r0
   1a848:	bcc	1a864 <lchmod@@Base+0x3e64>
   1a84c:	mov	r0, #1
   1a850:	subs	r4, r4, r8
   1a854:	lsl	r1, r0, sl
   1a858:	orr	r1, r1, r0, lsr fp
   1a85c:	lsl	r0, r0, ip
   1a860:	sbc	r5, r5, r9
   1a864:	cmp	ip, #0
   1a868:	beq	1a8f4 <lchmod@@Base+0x3ef4>
   1a86c:	lsr	r6, r8, #1
   1a870:	orr	r6, r6, r9, lsl #31
   1a874:	lsr	r7, r9, #1
   1a878:	mov	r2, ip
   1a87c:	b	1a8a0 <lchmod@@Base+0x3ea0>
   1a880:	subs	r3, r4, r6
   1a884:	sbc	r8, r5, r7
   1a888:	adds	r3, r3, r3
   1a88c:	adc	r8, r8, r8
   1a890:	adds	r4, r3, #1
   1a894:	adc	r5, r8, #0
   1a898:	subs	r2, r2, #1
   1a89c:	beq	1a8bc <lchmod@@Base+0x3ebc>
   1a8a0:	cmp	r5, r7
   1a8a4:	cmpeq	r4, r6
   1a8a8:	bcs	1a880 <lchmod@@Base+0x3e80>
   1a8ac:	adds	r4, r4, r4
   1a8b0:	adc	r5, r5, r5
   1a8b4:	subs	r2, r2, #1
   1a8b8:	bne	1a8a0 <lchmod@@Base+0x3ea0>
   1a8bc:	lsr	r3, r4, ip
   1a8c0:	orr	r3, r3, r5, lsl fp
   1a8c4:	lsr	r2, r5, ip
   1a8c8:	orr	r3, r3, r5, lsr sl
   1a8cc:	adds	r0, r0, r4
   1a8d0:	mov	r4, r3
   1a8d4:	lsl	r3, r2, ip
   1a8d8:	orr	r3, r3, r4, lsl sl
   1a8dc:	lsl	ip, r4, ip
   1a8e0:	orr	r3, r3, r4, lsr fp
   1a8e4:	adc	r1, r1, r5
   1a8e8:	subs	r0, r0, ip
   1a8ec:	mov	r5, r2
   1a8f0:	sbc	r1, r1, r3
   1a8f4:	cmp	lr, #0
   1a8f8:	strdne	r4, [lr]
   1a8fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a900:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a904:	mov	r7, r0
   1a908:	ldr	r6, [pc, #72]	; 1a958 <lchmod@@Base+0x3f58>
   1a90c:	ldr	r5, [pc, #72]	; 1a95c <lchmod@@Base+0x3f5c>
   1a910:	add	r6, pc, r6
   1a914:	add	r5, pc, r5
   1a918:	sub	r6, r6, r5
   1a91c:	mov	r8, r1
   1a920:	mov	r9, r2
   1a924:	bl	11668 <fstatfs64@plt-0x20>
   1a928:	asrs	r6, r6, #2
   1a92c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a930:	mov	r4, #0
   1a934:	add	r4, r4, #1
   1a938:	ldr	r3, [r5], #4
   1a93c:	mov	r2, r9
   1a940:	mov	r1, r8
   1a944:	mov	r0, r7
   1a948:	blx	r3
   1a94c:	cmp	r6, r4
   1a950:	bne	1a934 <lchmod@@Base+0x3f34>
   1a954:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a958:	andeq	r1, r1, ip, ror #11
   1a95c:	andeq	r1, r1, r4, ror #11
   1a960:	bx	lr
   1a964:	ldr	r3, [pc, #12]	; 1a978 <lchmod@@Base+0x3f78>
   1a968:	mov	r1, #0
   1a96c:	add	r3, pc, r3
   1a970:	ldr	r2, [r3]
   1a974:	b	11904 <__cxa_atexit@plt>
   1a978:	andeq	r1, r1, r0, lsl #16

Disassembly of section .fini:

0001a97c <.fini>:
   1a97c:	push	{r3, lr}
   1a980:	pop	{r3, pc}
