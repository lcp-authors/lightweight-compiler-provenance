
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000123e0 <.init>:
   123e0:	push	{r3, lr}
   123e4:	bl	12544 <_start@@Base+0x3c>
   123e8:	pop	{r3, pc}

Disassembly of section .plt:

000123ec <free@plt-0x14>:
   123ec:	push	{lr}		; (str lr, [sp, #-4]!)
   123f0:	ldr	lr, [pc, #4]	; 123fc <free@plt-0x4>
   123f4:	add	lr, pc, lr
   123f8:	ldr	pc, [lr, #8]!
   123fc:	andeq	r0, r2, r4, lsl #24

00012400 <free@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #32, 20	; 0x20000
   12408:	ldr	pc, [ip, #3076]!	; 0xc04

0001240c <memcpy@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #32, 20	; 0x20000
   12414:	ldr	pc, [ip, #3068]!	; 0xbfc

00012418 <memcmp@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #32, 20	; 0x20000
   12420:	ldr	pc, [ip, #3060]!	; 0xbf4

00012424 <realloc@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #32, 20	; 0x20000
   1242c:	ldr	pc, [ip, #3052]!	; 0xbec

00012430 <fwrite@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #32, 20	; 0x20000
   12438:	ldr	pc, [ip, #3044]!	; 0xbe4

0001243c <malloc@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #32, 20	; 0x20000
   12444:	ldr	pc, [ip, #3036]!	; 0xbdc

00012448 <__libc_start_main@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #32, 20	; 0x20000
   12450:	ldr	pc, [ip, #3028]!	; 0xbd4

00012454 <__gmon_start__@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #32, 20	; 0x20000
   1245c:	ldr	pc, [ip, #3020]!	; 0xbcc

00012460 <strlen@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #32, 20	; 0x20000
   12468:	ldr	pc, [ip, #3012]!	; 0xbc4

0001246c <fprintf@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #32, 20	; 0x20000
   12474:	ldr	pc, [ip, #3004]!	; 0xbbc

00012478 <posix_memalign@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #32, 20	; 0x20000
   12480:	ldr	pc, [ip, #2996]!	; 0xbb4

00012484 <memset@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #32, 20	; 0x20000
   1248c:	ldr	pc, [ip, #2988]!	; 0xbac

00012490 <strtod@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #32, 20	; 0x20000
   12498:	ldr	pc, [ip, #2980]!	; 0xba4

0001249c <memchr@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #32, 20	; 0x20000
   124a4:	ldr	pc, [ip, #2972]!	; 0xb9c

000124a8 <abort@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #32, 20	; 0x20000
   124b0:	ldr	pc, [ip, #2964]!	; 0xb94

000124b4 <__assert_fail@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #32, 20	; 0x20000
   124bc:	ldr	pc, [ip, #2956]!	; 0xb8c

Disassembly of section .text:

000124c0 <main@@Base>:
   124c0:	mvn	r3, #0
   124c4:	push	{lr}		; (str lr, [sp, #-4]!)
   124c8:	sub	sp, sp, #244	; 0xf4
   124cc:	add	r0, sp, #8
   124d0:	str	r3, [sp, #4]
   124d4:	bl	14100 <flatcc_builder_init@@Base>
   124d8:	movw	r1, #2260	; 0x8d4
   124dc:	movt	r1, #2
   124e0:	add	r2, r1, #644	; 0x284
   124e4:	add	r3, sp, #4
   124e8:	add	r2, r2, #1
   124ec:	add	r0, sp, #8
   124f0:	bl	125f8 <test@@Base>
   124f4:	add	r0, sp, #8
   124f8:	bl	142c8 <flatcc_builder_clear@@Base>
   124fc:	ldr	r0, [sp, #4]
   12500:	add	sp, sp, #244	; 0xf4
   12504:	pop	{pc}		; (ldr pc, [sp], #4)

00012508 <_start@@Base>:
   12508:	mov	fp, #0
   1250c:	mov	lr, #0
   12510:	pop	{r1}		; (ldr r1, [sp], #4)
   12514:	mov	r2, sp
   12518:	push	{r2}		; (str r2, [sp, #-4]!)
   1251c:	push	{r0}		; (str r0, [sp, #-4]!)
   12520:	ldr	ip, [pc, #16]	; 12538 <_start@@Base+0x30>
   12524:	push	{ip}		; (str ip, [sp, #-4]!)
   12528:	ldr	r0, [pc, #12]	; 1253c <_start@@Base+0x34>
   1252c:	ldr	r3, [pc, #12]	; 12540 <_start@@Base+0x38>
   12530:	bl	12448 <__libc_start_main@plt>
   12534:	bl	124a8 <abort@plt>
   12538:	andeq	r0, r2, r0, asr #17
   1253c:	andeq	r2, r1, r0, asr #9
   12540:	andeq	r0, r2, r0, ror #16
   12544:	ldr	r3, [pc, #20]	; 12560 <_start@@Base+0x58>
   12548:	ldr	r2, [pc, #20]	; 12564 <_start@@Base+0x5c>
   1254c:	add	r3, pc, r3
   12550:	ldr	r2, [r3, r2]
   12554:	cmp	r2, #0
   12558:	bxeq	lr
   1255c:	b	12454 <__gmon_start__@plt>
   12560:	andeq	r0, r2, ip, lsr #21
   12564:	andeq	r0, r0, ip, asr #32
   12568:	ldr	r0, [pc, #24]	; 12588 <_start@@Base+0x80>
   1256c:	ldr	r3, [pc, #24]	; 1258c <_start@@Base+0x84>
   12570:	cmp	r3, r0
   12574:	bxeq	lr
   12578:	ldr	r3, [pc, #16]	; 12590 <_start@@Base+0x88>
   1257c:	cmp	r3, #0
   12580:	bxeq	lr
   12584:	bx	r3
   12588:	andeq	r3, r3, r8, asr #1
   1258c:	andeq	r3, r3, r8, asr #1
   12590:	andeq	r0, r0, r0
   12594:	ldr	r0, [pc, #36]	; 125c0 <_start@@Base+0xb8>
   12598:	ldr	r1, [pc, #36]	; 125c4 <_start@@Base+0xbc>
   1259c:	sub	r1, r1, r0
   125a0:	asr	r1, r1, #2
   125a4:	add	r1, r1, r1, lsr #31
   125a8:	asrs	r1, r1, #1
   125ac:	bxeq	lr
   125b0:	ldr	r3, [pc, #16]	; 125c8 <_start@@Base+0xc0>
   125b4:	cmp	r3, #0
   125b8:	bxeq	lr
   125bc:	bx	r3
   125c0:	andeq	r3, r3, r8, asr #1
   125c4:	andeq	r3, r3, r8, asr #1
   125c8:	andeq	r0, r0, r0
   125cc:	push	{r4, lr}
   125d0:	ldr	r4, [pc, #24]	; 125f0 <_start@@Base+0xe8>
   125d4:	ldrb	r3, [r4]
   125d8:	cmp	r3, #0
   125dc:	popne	{r4, pc}
   125e0:	bl	12568 <_start@@Base+0x60>
   125e4:	mov	r3, #1
   125e8:	strb	r3, [r4]
   125ec:	pop	{r4, pc}
   125f0:	andeq	r3, r3, ip, asr #1
   125f4:	b	12594 <_start@@Base+0x8c>

000125f8 <test@@Base>:
   125f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   125fc:	mov	ip, #0
   12600:	mov	r5, r2
   12604:	strd	r6, [sp, #8]
   12608:	mov	r2, ip
   1260c:	mov	r7, r1
   12610:	strd	r8, [sp, #16]
   12614:	mov	r9, r3
   12618:	mov	r3, ip
   1261c:	strd	sl, [sp, #24]
   12620:	mov	r6, r0
   12624:	str	lr, [sp, #32]
   12628:	sub	sp, sp, #116	; 0x74
   1262c:	mov	lr, #1
   12630:	str	ip, [sp, #68]	; 0x44
   12634:	str	r1, [sp, #72]	; 0x48
   12638:	movw	r1, #2908	; 0xb5c
   1263c:	movt	r1, #2
   12640:	str	ip, [sp, #76]	; 0x4c
   12644:	str	ip, [sp, #80]	; 0x50
   12648:	str	lr, [sp, #84]	; 0x54
   1264c:	str	ip, [sp, #88]	; 0x58
   12650:	str	ip, [sp, #92]	; 0x5c
   12654:	str	ip, [sp, #96]	; 0x60
   12658:	str	ip, [sp, #100]	; 0x64
   1265c:	str	ip, [sp, #104]	; 0x68
   12660:	str	ip, [sp, #108]	; 0x6c
   12664:	bl	14b98 <flatcc_builder_start_buffer@@Base>
   12668:	sub	r3, r5, r7
   1266c:	cmp	r3, #1
   12670:	ble	12684 <test@@Base+0x8c>
   12674:	ldrb	r3, [r7]
   12678:	cmp	r3, #32
   1267c:	bhi	12698 <test@@Base+0xa0>
   12680:	beq	129fc <test@@Base+0x404>
   12684:	mov	r1, r7
   12688:	mov	r2, r5
   1268c:	add	r0, sp, #68	; 0x44
   12690:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   12694:	mov	r7, r0
   12698:	cmp	r5, r7
   1269c:	beq	13030 <test@@Base+0xa38>
   126a0:	bls	126b0 <test@@Base+0xb8>
   126a4:	ldrb	r3, [r7]
   126a8:	cmp	r3, #123	; 0x7b
   126ac:	beq	12774 <test@@Base+0x17c>
   126b0:	movw	r8, #12488	; 0x30c8
   126b4:	movt	r8, #3
   126b8:	ldr	r0, [r8]
   126bc:	movw	r1, #2932	; 0xb74
   126c0:	movt	r1, #2
   126c4:	mov	r2, #123	; 0x7b
   126c8:	bl	1246c <fprintf@plt>
   126cc:	mov	r1, r7
   126d0:	mov	r2, r5
   126d4:	add	r0, sp, #68	; 0x44
   126d8:	mov	r3, #17
   126dc:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   126e0:	ldr	r7, [r8]
   126e4:	mov	r4, r0
   126e8:	ldr	r0, [sp, #92]	; 0x5c
   126ec:	cmp	r0, #0
   126f0:	bne	12734 <test@@Base+0x13c>
   126f4:	movw	r0, #2996	; 0xbb4
   126f8:	movt	r0, #2
   126fc:	mov	r3, r7
   12700:	mov	r2, #15
   12704:	mov	r1, #1
   12708:	bl	12430 <fwrite@plt>
   1270c:	ldr	r3, [sp, #92]	; 0x5c
   12710:	mov	r0, r4
   12714:	str	r3, [r9]
   12718:	add	sp, sp, #116	; 0x74
   1271c:	ldrd	r4, [sp]
   12720:	ldrd	r6, [sp, #8]
   12724:	ldrd	r8, [sp, #16]
   12728:	ldrd	sl, [sp, #24]
   1272c:	add	sp, sp, #32
   12730:	pop	{pc}		; (ldr pc, [sp], #4)
   12734:	ldr	r3, [sp, #72]	; 0x48
   12738:	ldr	r8, [sp, #84]	; 0x54
   1273c:	ldr	r5, [sp, #104]	; 0x68
   12740:	sub	r5, r5, r3
   12744:	add	r5, r5, #1
   12748:	bl	1af60 <flatcc_json_parser_error_string@@Base>
   1274c:	mov	r3, r5
   12750:	mov	r2, r8
   12754:	str	r0, [sp]
   12758:	movw	r1, #2984	; 0xba8
   1275c:	movt	r1, #2
   12760:	mov	r0, r7
   12764:	bl	1246c <fprintf@plt>
   12768:	mov	r0, r6
   1276c:	bl	142bc <flatcc_builder_reset@@Base>
   12770:	b	1270c <test@@Base+0x114>
   12774:	add	r4, r7, #1
   12778:	sub	r3, r5, r4
   1277c:	cmp	r3, #1
   12780:	ble	12794 <test@@Base+0x19c>
   12784:	ldrb	r3, [r7, #1]
   12788:	cmp	r3, #32
   1278c:	bhi	127a8 <test@@Base+0x1b0>
   12790:	beq	136a8 <test@@Base+0x10b0>
   12794:	mov	r1, r4
   12798:	mov	r2, r5
   1279c:	add	r0, sp, #68	; 0x44
   127a0:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   127a4:	mov	r4, r0
   127a8:	cmp	r5, r4
   127ac:	beq	1328c <test@@Base+0xc94>
   127b0:	mov	r1, #11
   127b4:	mov	r0, r6
   127b8:	bl	16684 <flatcc_builder_start_table@@Base>
   127bc:	str	r6, [sp, #24]
   127c0:	str	r9, [sp, #28]
   127c4:	ldrb	r3, [r4]
   127c8:	cmp	r3, #34	; 0x22
   127cc:	moveq	r3, #0
   127d0:	addeq	r4, r4, #1
   127d4:	streq	r3, [sp, #80]	; 0x50
   127d8:	beq	127ec <test@@Base+0x1f4>
   127dc:	cmp	r3, #46	; 0x2e
   127e0:	movne	r3, #1
   127e4:	strne	r3, [sp, #80]	; 0x50
   127e8:	beq	13680 <test@@Base+0x1088>
   127ec:	sub	ip, r5, r4
   127f0:	cmp	ip, #8
   127f4:	bls	12c94 <test@@Base+0x69c>
   127f8:	ldrb	r2, [r4, #7]
   127fc:	mov	r3, #0
   12800:	mov	lr, r3
   12804:	ldrb	r0, [r4, #6]
   12808:	orr	r1, r2, r0, lsl #8
   1280c:	ldrb	r2, [r4, #5]
   12810:	mov	r0, lr
   12814:	orr	r1, r1, r2, lsl #16
   12818:	ldrb	r2, [r4, #4]
   1281c:	mov	lr, r0
   12820:	orr	r2, r1, r2, lsl #24
   12824:	ldrb	r0, [r4, #3]
   12828:	orr	r3, lr, r0
   1282c:	ldrb	r0, [r4, #2]
   12830:	orr	r3, r3, r0, lsl #8
   12834:	ldrb	r0, [r4, #1]
   12838:	mov	sl, r2
   1283c:	cmp	ip, #8
   12840:	addgt	ip, r4, #8
   12844:	movle	ip, r5
   12848:	ldrb	r2, [r4]
   1284c:	orr	r0, r3, r0, lsl #16
   12850:	orr	fp, r0, r2, lsl #24
   12854:	add	r3, pc, #668	; 0x29c
   12858:	ldrd	r2, [r3]
   1285c:	lsr	r8, sl, #16
   12860:	lsl	r8, r8, #16
   12864:	cmp	fp, r3
   12868:	cmpeq	r8, r2
   1286c:	bhi	12a10 <test@@Base+0x418>
   12870:	and	r1, sl, #-16777216	; 0xff000000
   12874:	add	r3, pc, #644	; 0x284
   12878:	ldrd	r2, [r3]
   1287c:	str	r1, [sp, #16]
   12880:	str	fp, [sp, #20]
   12884:	ldrd	r0, [sp, #16]
   12888:	cmp	r1, r3
   1288c:	cmpeq	r0, r2
   12890:	bne	138ec <test@@Base+0x12f4>
   12894:	ldr	r3, [sp, #80]	; 0x50
   12898:	add	r0, r4, #5
   1289c:	cmp	r3, #0
   128a0:	bne	12f9c <test@@Base+0x9a4>
   128a4:	cmp	r0, r5
   128a8:	beq	139e4 <test@@Base+0x13ec>
   128ac:	ldrb	r2, [r4, #5]
   128b0:	cmp	r2, #34	; 0x22
   128b4:	ldrne	r6, [sp, #24]
   128b8:	bne	128d8 <test@@Base+0x2e0>
   128bc:	b	131dc <test@@Base+0xbe4>
   128c0:	add	r0, r3, #1
   128c4:	cmp	r5, r0
   128c8:	beq	128f4 <test@@Base+0x2fc>
   128cc:	ldrb	r2, [r3, #1]
   128d0:	cmp	r2, #34	; 0x22
   128d4:	beq	131d8 <test@@Base+0xbe0>
   128d8:	cmp	r2, #92	; 0x5c
   128dc:	mov	r3, r0
   128e0:	bne	128c0 <test@@Base+0x2c8>
   128e4:	sub	r2, r5, r0
   128e8:	add	r3, r0, #1
   128ec:	cmp	r2, #1
   128f0:	bgt	128c0 <test@@Base+0x2c8>
   128f4:	str	r6, [sp, #24]
   128f8:	mov	r1, r0
   128fc:	mov	r3, #20
   12900:	mov	r2, r5
   12904:	add	r0, sp, #68	; 0x44
   12908:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   1290c:	sub	r3, r5, r0
   12910:	cmp	r3, #1
   12914:	ble	12928 <test@@Base+0x330>
   12918:	ldrb	r3, [r0]
   1291c:	cmp	r3, #32
   12920:	bhi	12938 <test@@Base+0x340>
   12924:	beq	132b4 <test@@Base+0xcbc>
   12928:	mov	r1, r0
   1292c:	mov	r2, r5
   12930:	add	r0, sp, #68	; 0x44
   12934:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   12938:	cmp	r5, r0
   1293c:	beq	13028 <test@@Base+0xa30>
   12940:	bls	13718 <test@@Base+0x1120>
   12944:	ldrb	r3, [r0]
   12948:	cmp	r3, #58	; 0x3a
   1294c:	bne	13718 <test@@Base+0x1120>
   12950:	add	r4, r0, #1
   12954:	sub	r3, r5, r4
   12958:	cmp	r3, #1
   1295c:	ble	12970 <test@@Base+0x378>
   12960:	ldrb	r3, [r0, #1]
   12964:	cmp	r3, #32
   12968:	bhi	12984 <test@@Base+0x38c>
   1296c:	beq	132c8 <test@@Base+0xcd0>
   12970:	mov	r1, r4
   12974:	mov	r2, r5
   12978:	add	r0, sp, #68	; 0x44
   1297c:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   12980:	mov	r4, r0
   12984:	cmp	r5, r4
   12988:	beq	13284 <test@@Base+0xc8c>
   1298c:	mov	r3, #1
   12990:	mov	r1, #0
   12994:	ldr	r0, [sp, #24]
   12998:	mov	r2, r3
   1299c:	bl	189fc <flatcc_builder_table_add@@Base>
   129a0:	subs	r7, r0, #0
   129a4:	beq	129e4 <test@@Base+0x3ec>
   129a8:	mov	lr, #0
   129ac:	add	ip, sp, #56	; 0x38
   129b0:	mov	r0, #0
   129b4:	mov	r1, #0
   129b8:	add	r3, sp, #52	; 0x34
   129bc:	mov	r2, r5
   129c0:	str	lr, [sp, #52]	; 0x34
   129c4:	strd	r0, [sp, #56]	; 0x38
   129c8:	mov	r1, r4
   129cc:	add	r0, sp, #68	; 0x44
   129d0:	strb	lr, [r7]
   129d4:	str	ip, [sp]
   129d8:	bl	1e658 <flatcc_json_parser_integer@@Base>
   129dc:	cmp	r4, r0
   129e0:	bne	13198 <test@@Base+0xba0>
   129e4:	ldr	r6, [sp, #24]
   129e8:	movw	r3, #12488	; 0x30c8
   129ec:	movt	r3, #3
   129f0:	ldr	r7, [r3]
   129f4:	ldr	r9, [sp, #28]
   129f8:	b	126e8 <test@@Base+0xf0>
   129fc:	ldrb	r3, [r7, #1]
   12a00:	cmp	r3, #32
   12a04:	addhi	r7, r7, #1
   12a08:	bls	12684 <test@@Base+0x8c>
   12a0c:	b	12698 <test@@Base+0xa0>
   12a10:	mov	r3, #0
   12a14:	add	r1, pc, #236	; 0xec
   12a18:	ldrd	r0, [r1]
   12a1c:	str	r3, [sp, #8]
   12a20:	str	fp, [sp, #12]
   12a24:	ldrd	r2, [sp, #8]
   12a28:	cmp	r3, r1
   12a2c:	cmpeq	r2, r0
   12a30:	bhi	12cc4 <test@@Base+0x6cc>
   12a34:	add	r3, pc, #212	; 0xd4
   12a38:	ldrd	r2, [r3]
   12a3c:	cmp	fp, r3
   12a40:	cmpeq	sl, r2
   12a44:	bls	13084 <test@@Base+0xa8c>
   12a48:	add	r3, pc, #200	; 0xc8
   12a4c:	ldrd	r2, [r3]
   12a50:	cmp	fp, r3
   12a54:	cmpeq	sl, r2
   12a58:	bne	138ec <test@@Base+0x12f4>
   12a5c:	sub	r3, r5, ip
   12a60:	cmp	r3, #8
   12a64:	bls	133fc <test@@Base+0xe04>
   12a68:	mov	r3, #0
   12a6c:	mov	lr, r3
   12a70:	ldrb	r2, [ip, #3]
   12a74:	orr	lr, lr, r2
   12a78:	ldrb	r2, [ip, #2]
   12a7c:	orr	lr, lr, r2, lsl #8
   12a80:	ldrb	r2, [ip, #1]
   12a84:	orr	lr, lr, r2, lsl #16
   12a88:	ldrb	r0, [ip]
   12a8c:	mov	r1, #0
   12a90:	str	r1, [sp, #32]
   12a94:	add	r3, pc, #132	; 0x84
   12a98:	ldrd	r2, [r3]
   12a9c:	orr	r1, lr, r0, lsl #24
   12aa0:	str	r1, [sp, #36]	; 0x24
   12aa4:	ldrd	r0, [sp, #32]
   12aa8:	cmp	r1, r3
   12aac:	cmpeq	r0, r2
   12ab0:	bhi	1342c <test@@Base+0xe34>
   12ab4:	add	r3, pc, #108	; 0x6c
   12ab8:	ldrd	r2, [r3]
   12abc:	cmp	r1, r3
   12ac0:	cmpeq	r0, r2
   12ac4:	bne	13a54 <test@@Base+0x145c>
   12ac8:	ldr	r3, [sp, #80]	; 0x50
   12acc:	add	r0, ip, #4
   12ad0:	cmp	r3, #0
   12ad4:	bne	137cc <test@@Base+0x11d4>
   12ad8:	cmp	r0, r5
   12adc:	beq	13a8c <test@@Base+0x1494>
   12ae0:	ldrb	r2, [ip, #4]
   12ae4:	cmp	r2, #34	; 0x22
   12ae8:	ldrne	r6, [sp, #24]
   12aec:	bne	12b50 <test@@Base+0x558>
   12af0:	b	13958 <test@@Base+0x1360>
   12af4:	nop	{0}
   12af8:	mcrvs	15, 3, pc, cr3, cr15, {7}	; <UNPREDICTABLE>
   12afc:	cmnvc	r5, #-1140850687	; 0xbc000001
   12b00:	strvc	r0, [r0], #-0
   12b04:			; <UNDEFINED> instruction: 0x66697273
   12b08:			; <UNDEFINED> instruction: 0xffffffff
   12b0c:	bvc	1d6dce4 <__bss_end__@@Base+0x1d3ac14>
   12b10:	mcrvs	3, 3, r7, cr4, cr15, {0}
   12b14:	cmnvc	r5, #-1140850687	; 0xbc000001
   12b18:	cdpvs	3, 6, cr7, cr4, cr0, {1}
   12b1c:	cmnvc	r5, #-1140850687	; 0xbc000001
   12b20:			; <UNDEFINED> instruction: 0xffffffff
   12b24:	stclvs	6, cr6, [r5], #-460	; 0xfffffe34
   12b28:	andeq	r0, r0, r0
   12b2c:	stfvse	f6, [r5], #-400	; 0xfffffe70
   12b30:	andeq	r0, r0, r0
   12b34:	bvc	1d6dd10 <__bss_end__@@Base+0x1d3ac40>
   12b38:	add	r0, r3, #1
   12b3c:	cmp	r5, r0
   12b40:	beq	12b6c <test@@Base+0x574>
   12b44:	ldrb	r2, [r3, #1]
   12b48:	cmp	r2, #34	; 0x22
   12b4c:	beq	13954 <test@@Base+0x135c>
   12b50:	cmp	r2, #92	; 0x5c
   12b54:	mov	r3, r0
   12b58:	bne	12b38 <test@@Base+0x540>
   12b5c:	sub	r2, r5, r0
   12b60:	add	r3, r0, #1
   12b64:	cmp	r2, #1
   12b68:	bgt	12b38 <test@@Base+0x540>
   12b6c:	str	r6, [sp, #24]
   12b70:	mov	r1, r0
   12b74:	mov	r3, #20
   12b78:	mov	r2, r5
   12b7c:	add	r0, sp, #68	; 0x44
   12b80:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   12b84:	sub	r3, r5, r0
   12b88:	cmp	r3, #1
   12b8c:	ble	12ba0 <test@@Base+0x5a8>
   12b90:	ldrb	r3, [r0]
   12b94:	cmp	r3, #32
   12b98:	bhi	12bb0 <test@@Base+0x5b8>
   12b9c:	beq	1398c <test@@Base+0x1394>
   12ba0:	mov	r1, r0
   12ba4:	mov	r2, r5
   12ba8:	add	r0, sp, #68	; 0x44
   12bac:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   12bb0:	cmp	r5, r0
   12bb4:	beq	13028 <test@@Base+0xa30>
   12bb8:	bls	13718 <test@@Base+0x1120>
   12bbc:	ldrb	r3, [r0]
   12bc0:	cmp	r3, #58	; 0x3a
   12bc4:	bne	13718 <test@@Base+0x1120>
   12bc8:	add	r4, r0, #1
   12bcc:	sub	r3, r5, r4
   12bd0:	cmp	r3, #1
   12bd4:	ble	12be8 <test@@Base+0x5f0>
   12bd8:	ldrb	r3, [r0, #1]
   12bdc:	cmp	r3, #32
   12be0:	bhi	12bfc <test@@Base+0x604>
   12be4:	beq	139b4 <test@@Base+0x13bc>
   12be8:	mov	r1, r4
   12bec:	mov	r2, r5
   12bf0:	add	r0, sp, #68	; 0x44
   12bf4:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   12bf8:	mov	r4, r0
   12bfc:	cmp	r5, r4
   12c00:	beq	13284 <test@@Base+0xc8c>
   12c04:	mov	r3, #8
   12c08:	mov	r1, #3
   12c0c:	ldr	r0, [sp, #24]
   12c10:	mov	r2, r3
   12c14:	bl	189fc <flatcc_builder_table_add@@Base>
   12c18:	subs	r3, r0, #0
   12c1c:	str	r3, [sp, #40]	; 0x28
   12c20:	beq	129e4 <test@@Base+0x3ec>
   12c24:	mov	r0, r3
   12c28:	mov	r2, #0
   12c2c:	add	ip, sp, #56	; 0x38
   12c30:	mov	r6, #0
   12c34:	mov	r7, #0
   12c38:	add	r3, sp, #52	; 0x34
   12c3c:	str	r2, [sp, #52]	; 0x34
   12c40:	mov	r1, r4
   12c44:	mov	r2, r5
   12c48:	strd	r6, [sp, #56]	; 0x38
   12c4c:	strd	r6, [r0]
   12c50:	add	r0, sp, #68	; 0x44
   12c54:	str	ip, [sp]
   12c58:	bl	1e658 <flatcc_json_parser_integer@@Base>
   12c5c:	cmp	r4, r0
   12c60:	beq	129e4 <test@@Base+0x3ec>
   12c64:	ldr	r1, [sp, #52]	; 0x34
   12c68:	ldrd	r2, [sp, #56]	; 0x38
   12c6c:	cmp	r1, #0
   12c70:	beq	139ec <test@@Base+0x13f4>
   12c74:	cmp	r3, #-2147483648	; 0x80000000
   12c78:	cmpeq	r2, #0
   12c7c:	bhi	13864 <test@@Base+0x126c>
   12c80:	ldr	r1, [sp, #40]	; 0x28
   12c84:	rsbs	r2, r2, #0
   12c88:	rsc	r3, r3, #0
   12c8c:	strd	r2, [r1]
   12c90:	b	12e80 <test@@Base+0x888>
   12c94:	sub	r3, ip, #1
   12c98:	cmp	r3, #7
   12c9c:	ldrls	pc, [pc, r3, lsl #2]
   12ca0:	b	138ec <test@@Base+0x12f4>
   12ca4:	andeq	r3, r1, ip, lsl #12
   12ca8:	andeq	r3, r1, r0, lsl #12
   12cac:	strdeq	r3, [r1], -r4
   12cb0:	andeq	r3, r1, r8, ror #11
   12cb4:	andeq	r3, r1, ip, lsr #12
   12cb8:	andeq	r3, r1, r0, lsr #12
   12cbc:	ldrdeq	r3, [r1], -ip
   12cc0:	strdeq	r2, [r1], -r8
   12cc4:	sub	r1, pc, #412	; 0x19c
   12cc8:	ldrd	r0, [r1]
   12ccc:	cmp	r3, r1
   12cd0:	cmpeq	r2, r0
   12cd4:	bne	138ec <test@@Base+0x12f4>
   12cd8:	ldr	r3, [sp, #80]	; 0x50
   12cdc:	add	r0, r4, #4
   12ce0:	cmp	r3, #0
   12ce4:	bne	1310c <test@@Base+0xb14>
   12ce8:	cmp	r0, r5
   12cec:	beq	13a44 <test@@Base+0x144c>
   12cf0:	ldrb	r2, [r4, #4]
   12cf4:	cmp	r2, #34	; 0x22
   12cf8:	ldrne	r6, [sp, #24]
   12cfc:	bne	12d1c <test@@Base+0x724>
   12d00:	b	136a0 <test@@Base+0x10a8>
   12d04:	add	r0, r3, #1
   12d08:	cmp	r5, r0
   12d0c:	beq	12d38 <test@@Base+0x740>
   12d10:	ldrb	r2, [r3, #1]
   12d14:	cmp	r2, #34	; 0x22
   12d18:	beq	1369c <test@@Base+0x10a4>
   12d1c:	cmp	r2, #92	; 0x5c
   12d20:	mov	r3, r0
   12d24:	bne	12d04 <test@@Base+0x70c>
   12d28:	sub	r2, r5, r0
   12d2c:	add	r3, r0, #1
   12d30:	cmp	r2, #1
   12d34:	bgt	12d04 <test@@Base+0x70c>
   12d38:	str	r6, [sp, #24]
   12d3c:	mov	r1, r0
   12d40:	mov	r3, #20
   12d44:	mov	r2, r5
   12d48:	add	r0, sp, #68	; 0x44
   12d4c:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   12d50:	sub	r3, r5, r0
   12d54:	cmp	r3, #1
   12d58:	ble	12d6c <test@@Base+0x774>
   12d5c:	ldrb	r3, [r0]
   12d60:	cmp	r3, #32
   12d64:	bhi	12d7c <test@@Base+0x784>
   12d68:	beq	136f0 <test@@Base+0x10f8>
   12d6c:	mov	r1, r0
   12d70:	mov	r2, r5
   12d74:	add	r0, sp, #68	; 0x44
   12d78:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   12d7c:	cmp	r5, r0
   12d80:	beq	13028 <test@@Base+0xa30>
   12d84:	bls	13718 <test@@Base+0x1120>
   12d88:	ldrb	r3, [r0]
   12d8c:	cmp	r3, #58	; 0x3a
   12d90:	bne	13718 <test@@Base+0x1120>
   12d94:	add	r4, r0, #1
   12d98:	sub	r3, r5, r4
   12d9c:	cmp	r3, #1
   12da0:	ble	12db4 <test@@Base+0x7bc>
   12da4:	ldrb	r3, [r0, #1]
   12da8:	cmp	r3, #32
   12dac:	bhi	12dc8 <test@@Base+0x7d0>
   12db0:	beq	13704 <test@@Base+0x110c>
   12db4:	mov	r1, r4
   12db8:	mov	r2, r5
   12dbc:	add	r0, sp, #68	; 0x44
   12dc0:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   12dc4:	mov	r4, r0
   12dc8:	cmp	r5, r4
   12dcc:	beq	13284 <test@@Base+0xc8c>
   12dd0:	ldrb	r3, [r4]
   12dd4:	cmp	r3, #34	; 0x22
   12dd8:	addeq	r7, r4, #1
   12ddc:	beq	12df8 <test@@Base+0x800>
   12de0:	mov	r1, r4
   12de4:	mov	r3, #16
   12de8:	mov	r2, r5
   12dec:	add	r0, sp, #68	; 0x44
   12df0:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   12df4:	mov	r7, r0
   12df8:	mov	r2, r5
   12dfc:	mov	r1, r7
   12e00:	add	r0, sp, #68	; 0x44
   12e04:	bl	1afb4 <flatcc_json_parser_string_part@@Base>
   12e08:	cmp	r5, r0
   12e0c:	mov	r4, r0
   12e10:	beq	129e4 <test@@Base+0x3ec>
   12e14:	ldrb	r3, [r0]
   12e18:	sub	r2, r0, r7
   12e1c:	cmp	r3, #34	; 0x22
   12e20:	bne	131e4 <test@@Base+0xbec>
   12e24:	mov	r1, r7
   12e28:	ldr	r0, [sp, #24]
   12e2c:	bl	18514 <flatcc_builder_create_string@@Base>
   12e30:	mov	r7, r0
   12e34:	cmp	r7, #0
   12e38:	beq	129e4 <test@@Base+0x3ec>
   12e3c:	mov	r1, #10
   12e40:	ldr	r0, [sp, #24]
   12e44:	bl	18dc8 <flatcc_builder_table_add_offset@@Base>
   12e48:	cmp	r0, #0
   12e4c:	beq	129e4 <test@@Base+0x3ec>
   12e50:	cmp	r4, r5
   12e54:	str	r7, [r0]
   12e58:	beq	12e6c <test@@Base+0x874>
   12e5c:	ldrb	r3, [r4]
   12e60:	cmp	r3, #34	; 0x22
   12e64:	addeq	r0, r4, #1
   12e68:	beq	12e80 <test@@Base+0x888>
   12e6c:	mov	r1, r4
   12e70:	mov	r3, #20
   12e74:	mov	r2, r5
   12e78:	add	r0, sp, #68	; 0x44
   12e7c:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   12e80:	sub	r3, r5, r0
   12e84:	cmp	r3, #1
   12e88:	ble	12e9c <test@@Base+0x8a4>
   12e8c:	ldrb	r3, [r0]
   12e90:	cmp	r3, #32
   12e94:	bhi	12eac <test@@Base+0x8b4>
   12e98:	beq	1305c <test@@Base+0xa64>
   12e9c:	mov	r1, r0
   12ea0:	mov	r2, r5
   12ea4:	add	r0, sp, #68	; 0x44
   12ea8:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   12eac:	cmp	r5, r0
   12eb0:	beq	13028 <test@@Base+0xa30>
   12eb4:	ldrb	r3, [r0]
   12eb8:	cmp	r3, #44	; 0x2c
   12ebc:	bne	13930 <test@@Base+0x1338>
   12ec0:	add	r4, r0, #1
   12ec4:	sub	r3, r5, r4
   12ec8:	cmp	r3, #1
   12ecc:	ble	12ee0 <test@@Base+0x8e8>
   12ed0:	ldrb	r3, [r0, #1]
   12ed4:	cmp	r3, #32
   12ed8:	bhi	12ef4 <test@@Base+0x8fc>
   12edc:	beq	13070 <test@@Base+0xa78>
   12ee0:	mov	r1, r4
   12ee4:	mov	r2, r5
   12ee8:	add	r0, sp, #68	; 0x44
   12eec:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   12ef0:	mov	r4, r0
   12ef4:	cmp	r5, r4
   12ef8:	beq	13284 <test@@Base+0xc8c>
   12efc:	ldrb	r3, [r4]
   12f00:	cmp	r3, #125	; 0x7d
   12f04:	bne	127c4 <test@@Base+0x1cc>
   12f08:	cmp	r5, r4
   12f0c:	ldr	r6, [sp, #24]
   12f10:	movls	r8, r4
   12f14:	ldr	r9, [sp, #28]
   12f18:	bls	1387c <test@@Base+0x1284>
   12f1c:	mov	r0, r6
   12f20:	add	r7, r4, #1
   12f24:	bl	17004 <flatcc_builder_end_table@@Base>
   12f28:	mov	r1, r0
   12f2c:	mov	r0, r6
   12f30:	bl	14d44 <flatcc_builder_end_buffer@@Base>
   12f34:	sub	r3, r5, r7
   12f38:	cmp	r3, #1
   12f3c:	ble	12f54 <test@@Base+0x95c>
   12f40:	ldrb	r3, [r4, #1]
   12f44:	cmp	r3, #32
   12f48:	movhi	r4, r7
   12f4c:	bhi	12f68 <test@@Base+0x970>
   12f50:	beq	13a78 <test@@Base+0x1480>
   12f54:	mov	r1, r7
   12f58:	add	r0, sp, #68	; 0x44
   12f5c:	mov	r2, r5
   12f60:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   12f64:	mov	r4, r0
   12f68:	cmp	r5, r4
   12f6c:	movw	r5, #12488	; 0x30c8
   12f70:	movt	r5, #3
   12f74:	ldr	r7, [r5]
   12f78:	beq	126e8 <test@@Base+0xf0>
   12f7c:	mov	r3, r7
   12f80:	movw	r0, #2956	; 0xb8c
   12f84:	movt	r0, #2
   12f88:	mov	r2, #26
   12f8c:	mov	r1, #1
   12f90:	bl	12430 <fwrite@plt>
   12f94:	ldr	r7, [r5]
   12f98:	b	126e8 <test@@Base+0xf0>
   12f9c:	cmp	r0, r5
   12fa0:	beq	139dc <test@@Base+0x13e4>
   12fa4:	ldrb	r3, [r4, #5]
   12fa8:	cmp	r3, #32
   12fac:	bls	1290c <test@@Base+0x314>
   12fb0:	ldr	r6, [sp, #24]
   12fb4:	mov	ip, r0
   12fb8:	sub	r2, r3, #48	; 0x30
   12fbc:	cmp	r3, #46	; 0x2e
   12fc0:	cmpne	r3, #95	; 0x5f
   12fc4:	uxtb	r2, r2
   12fc8:	add	r1, ip, #1
   12fcc:	mov	r0, ip
   12fd0:	beq	13004 <test@@Base+0xa0c>
   12fd4:	orr	ip, r3, #32
   12fd8:	tst	r3, #128	; 0x80
   12fdc:	sub	ip, ip, #97	; 0x61
   12fe0:	bne	13004 <test@@Base+0xa0c>
   12fe4:	cmp	r2, #9
   12fe8:	uxtb	ip, ip
   12fec:	bls	13004 <test@@Base+0xa0c>
   12ff0:	cmp	ip, #25
   12ff4:	bls	13000 <test@@Base+0xa08>
   12ff8:	str	r6, [sp, #24]
   12ffc:	b	1290c <test@@Base+0x314>
   13000:	add	r1, r0, #1
   13004:	cmp	r5, r1
   13008:	mov	r0, r1
   1300c:	mov	ip, r1
   13010:	beq	136bc <test@@Base+0x10c4>
   13014:	ldrb	r2, [r1]
   13018:	cmp	r2, #32
   1301c:	bls	136bc <test@@Base+0x10c4>
   13020:	mov	r3, r2
   13024:	b	12fb8 <test@@Base+0x9c0>
   13028:	ldr	r6, [sp, #24]
   1302c:	ldr	r9, [sp, #28]
   13030:	movw	r7, #12488	; 0x30c8
   13034:	movt	r7, #3
   13038:	movw	r0, #2916	; 0xb64
   1303c:	movt	r0, #2
   13040:	ldr	r3, [r7]
   13044:	mov	r2, #13
   13048:	mov	r1, #1
   1304c:	bl	12430 <fwrite@plt>
   13050:	mov	r4, r5
   13054:	ldr	r7, [r7]
   13058:	b	126e8 <test@@Base+0xf0>
   1305c:	ldrb	r3, [r0, #1]
   13060:	cmp	r3, #32
   13064:	addhi	r0, r0, #1
   13068:	bls	12e9c <test@@Base+0x8a4>
   1306c:	b	12eac <test@@Base+0x8b4>
   13070:	ldrb	r3, [r0, #2]
   13074:	cmp	r3, #32
   13078:	addhi	r4, r0, #2
   1307c:	bls	12ee0 <test@@Base+0x8e8>
   13080:	b	12ef4 <test@@Base+0x8fc>
   13084:	add	r3, pc, #996	; 0x3e4
   13088:	ldrd	r2, [r3]
   1308c:	cmp	fp, r3
   13090:	cmpeq	r8, r2
   13094:	bne	138ec <test@@Base+0x12f4>
   13098:	ldr	r3, [sp, #80]	; 0x50
   1309c:	add	r0, r4, #6
   130a0:	cmp	r3, #0
   130a4:	beq	132dc <test@@Base+0xce4>
   130a8:	cmp	r0, r5
   130ac:	beq	13a68 <test@@Base+0x1470>
   130b0:	ldrb	r3, [r4, #6]
   130b4:	cmp	r3, #32
   130b8:	bls	13344 <test@@Base+0xd4c>
   130bc:	ldr	r6, [sp, #24]
   130c0:	mov	ip, r0
   130c4:	sub	r2, r3, #48	; 0x30
   130c8:	cmp	r3, #46	; 0x2e
   130cc:	cmpne	r3, #95	; 0x5f
   130d0:	uxtb	r2, r2
   130d4:	add	r1, ip, #1
   130d8:	mov	r0, ip
   130dc:	beq	1365c <test@@Base+0x1064>
   130e0:	orr	ip, r3, #32
   130e4:	tst	r3, #128	; 0x80
   130e8:	sub	ip, ip, #97	; 0x61
   130ec:	bne	1365c <test@@Base+0x1064>
   130f0:	cmp	r2, #9
   130f4:	uxtb	ip, ip
   130f8:	bls	1365c <test@@Base+0x1064>
   130fc:	cmp	ip, #25
   13100:	bls	13658 <test@@Base+0x1060>
   13104:	str	r6, [sp, #24]
   13108:	b	13344 <test@@Base+0xd4c>
   1310c:	cmp	r0, r5
   13110:	beq	13a4c <test@@Base+0x1454>
   13114:	ldrb	r3, [r4, #4]
   13118:	cmp	r3, #32
   1311c:	bls	12d50 <test@@Base+0x758>
   13120:	ldr	r6, [sp, #24]
   13124:	mov	ip, r0
   13128:	sub	r2, r3, #48	; 0x30
   1312c:	cmp	r3, #46	; 0x2e
   13130:	cmpne	r3, #95	; 0x5f
   13134:	uxtb	r2, r2
   13138:	add	r1, ip, #1
   1313c:	mov	r0, ip
   13140:	beq	13174 <test@@Base+0xb7c>
   13144:	orr	ip, r3, #32
   13148:	tst	r3, #128	; 0x80
   1314c:	sub	ip, ip, #97	; 0x61
   13150:	bne	13174 <test@@Base+0xb7c>
   13154:	cmp	r2, #9
   13158:	uxtb	ip, ip
   1315c:	bls	13174 <test@@Base+0xb7c>
   13160:	cmp	ip, #25
   13164:	bls	13170 <test@@Base+0xb78>
   13168:	str	r6, [sp, #24]
   1316c:	b	12d50 <test@@Base+0x758>
   13170:	add	r1, r0, #1
   13174:	cmp	r5, r1
   13178:	mov	r0, r1
   1317c:	mov	ip, r1
   13180:	beq	138b8 <test@@Base+0x12c0>
   13184:	ldrb	r2, [r1]
   13188:	cmp	r2, #32
   1318c:	bls	138b8 <test@@Base+0x12c0>
   13190:	mov	r3, r2
   13194:	b	13128 <test@@Base+0xb30>
   13198:	ldr	r3, [sp, #52]	; 0x34
   1319c:	cmp	r3, #0
   131a0:	bne	13864 <test@@Base+0x126c>
   131a4:	ldrd	r2, [sp, #56]	; 0x38
   131a8:	cmp	r3, #0
   131ac:	cmpeq	r2, #255	; 0xff
   131b0:	strbls	r2, [r7]
   131b4:	bls	12e80 <test@@Base+0x888>
   131b8:	mov	r1, r0
   131bc:	mov	r3, #7
   131c0:	mov	r2, r5
   131c4:	add	r0, sp, #68	; 0x44
   131c8:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   131cc:	cmp	r4, r0
   131d0:	bne	12e80 <test@@Base+0x888>
   131d4:	b	129e4 <test@@Base+0x3ec>
   131d8:	str	r6, [sp, #24]
   131dc:	add	r0, r0, #1
   131e0:	b	1290c <test@@Base+0x314>
   131e4:	ldr	r6, [sp, #24]
   131e8:	str	r2, [sp, #40]	; 0x28
   131ec:	mov	r0, r6
   131f0:	bl	16414 <flatcc_builder_start_string@@Base>
   131f4:	ldr	r2, [sp, #40]	; 0x28
   131f8:	mov	r0, r6
   131fc:	mov	r1, r2
   13200:	bl	158d8 <flatcc_builder_extend_string@@Base>
   13204:	cmp	r0, #0
   13208:	ldr	r2, [sp, #40]	; 0x28
   1320c:	beq	129e4 <test@@Base+0x3ec>
   13210:	mov	r1, r7
   13214:	bl	1240c <memcpy@plt>
   13218:	ldr	r6, [sp, #24]
   1321c:	b	13230 <test@@Base+0xc38>
   13220:	bl	159d0 <flatcc_builder_append_string@@Base>
   13224:	ldrb	r3, [r4]
   13228:	cmp	r3, #34	; 0x22
   1322c:	beq	136dc <test@@Base+0x10e4>
   13230:	mov	r1, r4
   13234:	add	r3, sp, #48	; 0x30
   13238:	mov	r2, r5
   1323c:	add	r0, sp, #68	; 0x44
   13240:	bl	1bbd0 <flatcc_json_parser_string_escape@@Base>
   13244:	mov	r7, r0
   13248:	ldrb	r2, [sp, #48]	; 0x30
   1324c:	add	r1, sp, #49	; 0x31
   13250:	mov	r0, r6
   13254:	bl	159d0 <flatcc_builder_append_string@@Base>
   13258:	mov	r2, r5
   1325c:	mov	r1, r7
   13260:	add	r0, sp, #68	; 0x44
   13264:	bl	1afb4 <flatcc_json_parser_string_part@@Base>
   13268:	mov	r4, r0
   1326c:	sub	r2, r0, r7
   13270:	cmp	r5, r4
   13274:	mov	r1, r7
   13278:	mov	r0, r6
   1327c:	bne	13220 <test@@Base+0xc28>
   13280:	b	129e8 <test@@Base+0x3f0>
   13284:	ldr	r6, [sp, #24]
   13288:	ldr	r9, [sp, #28]
   1328c:	movw	r5, #12488	; 0x30c8
   13290:	movt	r5, #3
   13294:	movw	r0, #2916	; 0xb64
   13298:	movt	r0, #2
   1329c:	ldr	r3, [r5]
   132a0:	mov	r2, #13
   132a4:	mov	r1, #1
   132a8:	bl	12430 <fwrite@plt>
   132ac:	ldr	r7, [r5]
   132b0:	b	126e8 <test@@Base+0xf0>
   132b4:	ldrb	r3, [r0, #1]
   132b8:	cmp	r3, #32
   132bc:	addhi	r0, r0, #1
   132c0:	bls	12928 <test@@Base+0x330>
   132c4:	b	12938 <test@@Base+0x340>
   132c8:	ldrb	r3, [r0, #2]
   132cc:	cmp	r3, #32
   132d0:	addhi	r4, r0, #2
   132d4:	bls	12970 <test@@Base+0x378>
   132d8:	b	12984 <test@@Base+0x38c>
   132dc:	cmp	r0, r5
   132e0:	beq	13a70 <test@@Base+0x1478>
   132e4:	ldrb	r2, [r4, #6]
   132e8:	cmp	r2, #34	; 0x22
   132ec:	ldrne	r6, [sp, #24]
   132f0:	bne	13310 <test@@Base+0xd18>
   132f4:	b	1385c <test@@Base+0x1264>
   132f8:	add	r0, r3, #1
   132fc:	cmp	r5, r0
   13300:	beq	1332c <test@@Base+0xd34>
   13304:	ldrb	r2, [r3, #1]
   13308:	cmp	r2, #34	; 0x22
   1330c:	beq	13858 <test@@Base+0x1260>
   13310:	cmp	r2, #92	; 0x5c
   13314:	mov	r3, r0
   13318:	bne	132f8 <test@@Base+0xd00>
   1331c:	sub	r2, r5, r0
   13320:	add	r3, r0, #1
   13324:	cmp	r2, #1
   13328:	bgt	132f8 <test@@Base+0xd00>
   1332c:	str	r6, [sp, #24]
   13330:	mov	r1, r0
   13334:	mov	r3, #20
   13338:	mov	r2, r5
   1333c:	add	r0, sp, #68	; 0x44
   13340:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   13344:	sub	r3, r5, r0
   13348:	cmp	r3, #1
   1334c:	ble	13360 <test@@Base+0xd68>
   13350:	ldrb	r3, [r0]
   13354:	cmp	r3, #32
   13358:	bhi	13370 <test@@Base+0xd78>
   1335c:	beq	138d8 <test@@Base+0x12e0>
   13360:	mov	r1, r0
   13364:	mov	r2, r5
   13368:	add	r0, sp, #68	; 0x44
   1336c:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   13370:	cmp	r5, r0
   13374:	beq	13028 <test@@Base+0xa30>
   13378:	bls	13718 <test@@Base+0x1120>
   1337c:	ldrb	r3, [r0]
   13380:	cmp	r3, #58	; 0x3a
   13384:	bne	13718 <test@@Base+0x1120>
   13388:	add	r4, r0, #1
   1338c:	sub	r3, r5, r4
   13390:	cmp	r3, #1
   13394:	ble	133a8 <test@@Base+0xdb0>
   13398:	ldrb	r3, [r0, #1]
   1339c:	cmp	r3, #32
   133a0:	bhi	133bc <test@@Base+0xdc4>
   133a4:	beq	1391c <test@@Base+0x1324>
   133a8:	mov	r1, r4
   133ac:	mov	r2, r5
   133b0:	add	r0, sp, #68	; 0x44
   133b4:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   133b8:	mov	r4, r0
   133bc:	cmp	r5, r4
   133c0:	beq	13284 <test@@Base+0xc8c>
   133c4:	mov	r3, #8
   133c8:	mov	r1, #1
   133cc:	ldr	r0, [sp, #24]
   133d0:	mov	r2, r3
   133d4:	bl	189fc <flatcc_builder_table_add@@Base>
   133d8:	subs	r3, r0, #0
   133dc:	beq	129e4 <test@@Base+0x3ec>
   133e0:	mov	r2, r5
   133e4:	mov	r1, r4
   133e8:	add	r0, sp, #68	; 0x44
   133ec:	bl	1c718 <flatcc_json_parser_double@@Base>
   133f0:	cmp	r0, r4
   133f4:	bne	12e80 <test@@Base+0x888>
   133f8:	b	129e4 <test@@Base+0x3ec>
   133fc:	sub	r3, r3, #1
   13400:	cmp	r3, #7
   13404:	ldrls	pc, [pc, r3, lsl #2]
   13408:	b	13a54 <test@@Base+0x145c>
   1340c:	andeq	r3, r1, r0, asr r6
   13410:	andeq	r3, r1, r8, asr #12
   13414:	andeq	r3, r1, r0, asr #12
   13418:	andeq	r3, r1, r8, lsr r6
   1341c:	andeq	r3, r1, r8, lsr r6
   13420:	andeq	r3, r1, r8, lsr r6
   13424:	andeq	r2, r1, r8, ror #20
   13428:	andeq	r2, r1, r8, ror #20
   1342c:	add	r3, pc, #68	; 0x44
   13430:	ldrd	r2, [r3]
   13434:	cmp	r1, r3
   13438:	cmpeq	r0, r2
   1343c:	bne	13a54 <test@@Base+0x145c>
   13440:	ldr	r3, [sp, #80]	; 0x50
   13444:	add	r0, ip, #4
   13448:	cmp	r3, #0
   1344c:	bne	13740 <test@@Base+0x1148>
   13450:	cmp	r0, r5
   13454:	beq	13a9c <test@@Base+0x14a4>
   13458:	ldrb	r2, [ip, #4]
   1345c:	cmp	r2, #34	; 0x22
   13460:	ldrne	r6, [sp, #24]
   13464:	bne	13498 <test@@Base+0xea0>
   13468:	b	13964 <test@@Base+0x136c>
   1346c:	nop	{0}
   13470:	cdpvs	0, 6, cr0, cr4, cr0, {0}
   13474:	cmnvc	r5, #-1140850687	; 0xbc000001
   13478:	andeq	r0, r0, r0
   1347c:	stclvs	6, cr6, [r5], #-464	; 0xfffffe30
   13480:	add	r0, r3, #1
   13484:	cmp	r5, r0
   13488:	beq	134b4 <test@@Base+0xebc>
   1348c:	ldrb	r2, [r3, #1]
   13490:	cmp	r2, #34	; 0x22
   13494:	beq	13960 <test@@Base+0x1368>
   13498:	cmp	r2, #92	; 0x5c
   1349c:	mov	r3, r0
   134a0:	bne	13480 <test@@Base+0xe88>
   134a4:	sub	r2, r5, r0
   134a8:	add	r3, r0, #1
   134ac:	cmp	r2, #1
   134b0:	bgt	13480 <test@@Base+0xe88>
   134b4:	str	r6, [sp, #24]
   134b8:	mov	r1, r0
   134bc:	mov	r3, #20
   134c0:	mov	r2, r5
   134c4:	add	r0, sp, #68	; 0x44
   134c8:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   134cc:	sub	r3, r5, r0
   134d0:	cmp	r3, #1
   134d4:	ble	134e8 <test@@Base+0xef0>
   134d8:	ldrb	r3, [r0]
   134dc:	cmp	r3, #32
   134e0:	bhi	134f8 <test@@Base+0xf00>
   134e4:	beq	139a0 <test@@Base+0x13a8>
   134e8:	mov	r1, r0
   134ec:	mov	r2, r5
   134f0:	add	r0, sp, #68	; 0x44
   134f4:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   134f8:	cmp	r5, r0
   134fc:	beq	13028 <test@@Base+0xa30>
   13500:	bls	13718 <test@@Base+0x1120>
   13504:	ldrb	r3, [r0]
   13508:	cmp	r3, #58	; 0x3a
   1350c:	bne	13718 <test@@Base+0x1120>
   13510:	add	r4, r0, #1
   13514:	sub	r3, r5, r4
   13518:	cmp	r3, #1
   1351c:	ble	13530 <test@@Base+0xf38>
   13520:	ldrb	r3, [r0, #1]
   13524:	cmp	r3, #32
   13528:	bhi	13544 <test@@Base+0xf4c>
   1352c:	beq	139c8 <test@@Base+0x13d0>
   13530:	mov	r1, r4
   13534:	mov	r2, r5
   13538:	add	r0, sp, #68	; 0x44
   1353c:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   13540:	mov	r4, r0
   13544:	cmp	r5, r4
   13548:	beq	13284 <test@@Base+0xc8c>
   1354c:	mov	r3, #4
   13550:	mov	r1, #2
   13554:	ldr	r0, [sp, #24]
   13558:	mov	r2, r3
   1355c:	bl	189fc <flatcc_builder_table_add@@Base>
   13560:	subs	r3, r0, #0
   13564:	str	r3, [sp, #40]	; 0x28
   13568:	beq	129e4 <test@@Base+0x3ec>
   1356c:	mov	lr, r3
   13570:	mov	r0, #0
   13574:	add	ip, sp, #56	; 0x38
   13578:	mov	r6, #0
   1357c:	mov	r7, #0
   13580:	add	r3, sp, #52	; 0x34
   13584:	str	r0, [sp, #52]	; 0x34
   13588:	mov	r2, r5
   1358c:	mov	r1, r4
   13590:	strd	r6, [sp, #56]	; 0x38
   13594:	str	r0, [lr]
   13598:	add	r0, sp, #68	; 0x44
   1359c:	str	ip, [sp]
   135a0:	bl	1e658 <flatcc_json_parser_integer@@Base>
   135a4:	cmp	r4, r0
   135a8:	beq	129e4 <test@@Base+0x3ec>
   135ac:	ldr	r3, [sp, #52]	; 0x34
   135b0:	cmp	r3, #0
   135b4:	bne	13864 <test@@Base+0x126c>
   135b8:	ldrd	r2, [sp, #56]	; 0x38
   135bc:	mov	r7, #0
   135c0:	mvn	r6, #0
   135c4:	cmp	r3, r7
   135c8:	cmpeq	r2, r6
   135cc:	bhi	131b8 <test@@Base+0xbc0>
   135d0:	ldr	r1, [sp, #40]	; 0x28
   135d4:	str	r2, [r1]
   135d8:	b	12e80 <test@@Base+0x888>
   135dc:	mov	r2, #0
   135e0:	mov	r3, #0
   135e4:	b	12800 <test@@Base+0x208>
   135e8:	mov	r2, #0
   135ec:	mov	lr, r2
   135f0:	b	12824 <test@@Base+0x22c>
   135f4:	mov	r2, #0
   135f8:	mov	r3, r2
   135fc:	b	1282c <test@@Base+0x234>
   13600:	mov	r2, #0
   13604:	mov	r3, r2
   13608:	b	12834 <test@@Base+0x23c>
   1360c:	ldrb	r2, [r4]
   13610:	mov	sl, #0
   13614:	mov	ip, r5
   13618:	lsl	fp, r2, #24
   1361c:	b	12854 <test@@Base+0x25c>
   13620:	mov	r1, #0
   13624:	mov	lr, r1
   13628:	b	1280c <test@@Base+0x214>
   1362c:	mov	r1, #0
   13630:	mov	r0, r1
   13634:	b	12818 <test@@Base+0x220>
   13638:	mov	lr, #0
   1363c:	b	12a70 <test@@Base+0x478>
   13640:	mov	lr, #0
   13644:	b	12a78 <test@@Base+0x480>
   13648:	mov	lr, #0
   1364c:	b	12a80 <test@@Base+0x488>
   13650:	mov	lr, #0
   13654:	b	12a88 <test@@Base+0x490>
   13658:	add	r1, r0, #1
   1365c:	cmp	r5, r1
   13660:	mov	r0, r1
   13664:	mov	ip, r1
   13668:	beq	1396c <test@@Base+0x1374>
   1366c:	ldrb	r2, [r1]
   13670:	cmp	r2, #32
   13674:	bls	1396c <test@@Base+0x1374>
   13678:	mov	r3, r2
   1367c:	b	130c4 <test@@Base+0xacc>
   13680:	mov	r1, r4
   13684:	mov	r3, #5
   13688:	mov	r2, r5
   1368c:	add	r0, sp, #68	; 0x44
   13690:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   13694:	mov	r4, r0
   13698:	b	127ec <test@@Base+0x1f4>
   1369c:	str	r6, [sp, #24]
   136a0:	add	r0, r0, #1
   136a4:	b	12d50 <test@@Base+0x758>
   136a8:	ldrb	r3, [r7, #2]
   136ac:	cmp	r3, #32
   136b0:	addhi	r4, r7, #2
   136b4:	bls	12794 <test@@Base+0x19c>
   136b8:	b	127a8 <test@@Base+0x1b0>
   136bc:	cmp	r3, #46	; 0x2e
   136c0:	str	r6, [sp, #24]
   136c4:	bne	1290c <test@@Base+0x314>
   136c8:	mov	r3, #5
   136cc:	mov	r2, r5
   136d0:	add	r0, sp, #68	; 0x44
   136d4:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   136d8:	b	1290c <test@@Base+0x314>
   136dc:	mov	r0, r6
   136e0:	str	r6, [sp, #24]
   136e4:	bl	18820 <flatcc_builder_end_string@@Base>
   136e8:	mov	r7, r0
   136ec:	b	12e34 <test@@Base+0x83c>
   136f0:	ldrb	r3, [r0, #1]
   136f4:	cmp	r3, #32
   136f8:	addhi	r0, r0, #1
   136fc:	bls	12d6c <test@@Base+0x774>
   13700:	b	12d7c <test@@Base+0x784>
   13704:	ldrb	r3, [r0, #2]
   13708:	cmp	r3, #32
   1370c:	addhi	r4, r0, #2
   13710:	bls	12db4 <test@@Base+0x7bc>
   13714:	b	12dc8 <test@@Base+0x7d0>
   13718:	movw	r8, #12488	; 0x30c8
   1371c:	movt	r8, #3
   13720:	ldr	r6, [sp, #24]
   13724:	mov	r7, r0
   13728:	movw	r1, #2932	; 0xb74
   1372c:	movt	r1, #2
   13730:	mov	r2, #58	; 0x3a
   13734:	ldr	r0, [r8]
   13738:	ldr	r9, [sp, #28]
   1373c:	b	126c8 <test@@Base+0xd0>
   13740:	cmp	r0, r5
   13744:	beq	13aa4 <test@@Base+0x14ac>
   13748:	ldrb	r3, [ip, #4]
   1374c:	cmp	r3, #32
   13750:	bls	134cc <test@@Base+0xed4>
   13754:	ldr	r6, [sp, #24]
   13758:	mov	ip, r0
   1375c:	sub	r2, r3, #48	; 0x30
   13760:	cmp	r3, #46	; 0x2e
   13764:	cmpne	r3, #95	; 0x5f
   13768:	uxtb	r2, r2
   1376c:	add	r1, ip, #1
   13770:	mov	r0, ip
   13774:	beq	137a8 <test@@Base+0x11b0>
   13778:	orr	ip, r3, #32
   1377c:	tst	r3, #128	; 0x80
   13780:	sub	ip, ip, #97	; 0x61
   13784:	bne	137a8 <test@@Base+0x11b0>
   13788:	cmp	r2, #9
   1378c:	uxtb	ip, ip
   13790:	bls	137a8 <test@@Base+0x11b0>
   13794:	cmp	ip, #25
   13798:	bls	137a4 <test@@Base+0x11ac>
   1379c:	str	r6, [sp, #24]
   137a0:	b	134cc <test@@Base+0xed4>
   137a4:	add	r1, r0, #1
   137a8:	cmp	r5, r1
   137ac:	mov	r0, r1
   137b0:	mov	ip, r1
   137b4:	beq	13a24 <test@@Base+0x142c>
   137b8:	ldrb	r2, [r1]
   137bc:	cmp	r2, #32
   137c0:	bls	13a24 <test@@Base+0x142c>
   137c4:	mov	r3, r2
   137c8:	b	1375c <test@@Base+0x1164>
   137cc:	cmp	r0, r5
   137d0:	beq	13a94 <test@@Base+0x149c>
   137d4:	ldrb	r3, [ip, #4]
   137d8:	cmp	r3, #32
   137dc:	bls	12b84 <test@@Base+0x58c>
   137e0:	ldr	r6, [sp, #24]
   137e4:	mov	ip, r0
   137e8:	sub	r2, r3, #48	; 0x30
   137ec:	cmp	r3, #46	; 0x2e
   137f0:	cmpne	r3, #95	; 0x5f
   137f4:	uxtb	r2, r2
   137f8:	add	r1, ip, #1
   137fc:	mov	r0, ip
   13800:	beq	13834 <test@@Base+0x123c>
   13804:	orr	ip, r3, #32
   13808:	tst	r3, #128	; 0x80
   1380c:	sub	ip, ip, #97	; 0x61
   13810:	bne	13834 <test@@Base+0x123c>
   13814:	cmp	r2, #9
   13818:	uxtb	ip, ip
   1381c:	bls	13834 <test@@Base+0x123c>
   13820:	cmp	ip, #25
   13824:	bls	13830 <test@@Base+0x1238>
   13828:	str	r6, [sp, #24]
   1382c:	b	12b84 <test@@Base+0x58c>
   13830:	add	r1, r0, #1
   13834:	cmp	r5, r1
   13838:	mov	r0, r1
   1383c:	mov	ip, r1
   13840:	beq	13a04 <test@@Base+0x140c>
   13844:	ldrb	r2, [r1]
   13848:	cmp	r2, #32
   1384c:	bls	13a04 <test@@Base+0x140c>
   13850:	mov	r3, r2
   13854:	b	137e8 <test@@Base+0x11f0>
   13858:	str	r6, [sp, #24]
   1385c:	add	r0, r0, #1
   13860:	b	13344 <test@@Base+0xd4c>
   13864:	mov	r1, r0
   13868:	mov	r3, #8
   1386c:	mov	r2, r5
   13870:	add	r0, sp, #68	; 0x44
   13874:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   13878:	b	131cc <test@@Base+0xbd4>
   1387c:	movw	r7, #12488	; 0x30c8
   13880:	movt	r7, #3
   13884:	mov	r2, #125	; 0x7d
   13888:	movw	r1, #2932	; 0xb74
   1388c:	movt	r1, #2
   13890:	ldr	r0, [r7]
   13894:	bl	1246c <fprintf@plt>
   13898:	mov	r2, r5
   1389c:	mov	r1, r8
   138a0:	add	r0, sp, #68	; 0x44
   138a4:	mov	r3, #17
   138a8:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   138ac:	mov	r4, r0
   138b0:	ldr	r7, [r7]
   138b4:	b	126e8 <test@@Base+0xf0>
   138b8:	cmp	r3, #46	; 0x2e
   138bc:	str	r6, [sp, #24]
   138c0:	bne	12d50 <test@@Base+0x758>
   138c4:	mov	r3, #5
   138c8:	mov	r2, r5
   138cc:	add	r0, sp, #68	; 0x44
   138d0:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   138d4:	b	12d50 <test@@Base+0x758>
   138d8:	ldrb	r3, [r0, #1]
   138dc:	cmp	r3, #32
   138e0:	addhi	r0, r0, #1
   138e4:	bls	13360 <test@@Base+0xd68>
   138e8:	b	13370 <test@@Base+0xd78>
   138ec:	ldr	r6, [sp, #24]
   138f0:	mov	r2, r5
   138f4:	mov	r1, r4
   138f8:	ldr	r9, [sp, #28]
   138fc:	mov	r3, #13
   13900:	add	r0, sp, #68	; 0x44
   13904:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   13908:	movw	r3, #12488	; 0x30c8
   1390c:	movt	r3, #3
   13910:	mov	r4, r0
   13914:	ldr	r7, [r3]
   13918:	b	126e8 <test@@Base+0xf0>
   1391c:	ldrb	r3, [r0, #2]
   13920:	cmp	r3, #32
   13924:	addhi	r4, r0, #2
   13928:	bls	133a8 <test@@Base+0xdb0>
   1392c:	b	133bc <test@@Base+0xdc4>
   13930:	cmp	r5, r0
   13934:	mov	r8, r0
   13938:	ldr	r6, [sp, #24]
   1393c:	ldr	r9, [sp, #28]
   13940:	bls	1387c <test@@Base+0x1284>
   13944:	cmp	r3, #125	; 0x7d
   13948:	bne	1387c <test@@Base+0x1284>
   1394c:	mov	r4, r0
   13950:	b	12f1c <test@@Base+0x924>
   13954:	str	r6, [sp, #24]
   13958:	add	r0, r0, #1
   1395c:	b	12b84 <test@@Base+0x58c>
   13960:	str	r6, [sp, #24]
   13964:	add	r0, r0, #1
   13968:	b	134cc <test@@Base+0xed4>
   1396c:	cmp	r3, #46	; 0x2e
   13970:	str	r6, [sp, #24]
   13974:	bne	13344 <test@@Base+0xd4c>
   13978:	mov	r3, #5
   1397c:	mov	r2, r5
   13980:	add	r0, sp, #68	; 0x44
   13984:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   13988:	b	13344 <test@@Base+0xd4c>
   1398c:	ldrb	r3, [r0, #1]
   13990:	cmp	r3, #32
   13994:	addhi	r0, r0, #1
   13998:	bls	12ba0 <test@@Base+0x5a8>
   1399c:	b	12bb0 <test@@Base+0x5b8>
   139a0:	ldrb	r3, [r0, #1]
   139a4:	cmp	r3, #32
   139a8:	addhi	r0, r0, #1
   139ac:	bls	134e8 <test@@Base+0xef0>
   139b0:	b	134f8 <test@@Base+0xf00>
   139b4:	ldrb	r3, [r0, #2]
   139b8:	cmp	r3, #32
   139bc:	addhi	r4, r0, #2
   139c0:	bls	12be8 <test@@Base+0x5f0>
   139c4:	b	12bfc <test@@Base+0x604>
   139c8:	ldrb	r3, [r0, #2]
   139cc:	cmp	r3, #32
   139d0:	addhi	r4, r0, #2
   139d4:	bls	13530 <test@@Base+0xf38>
   139d8:	b	13544 <test@@Base+0xf4c>
   139dc:	mov	r0, r5
   139e0:	b	12928 <test@@Base+0x330>
   139e4:	mov	r0, r5
   139e8:	b	128f8 <test@@Base+0x300>
   139ec:	cmp	r2, #0
   139f0:	sbcs	r1, r3, #0
   139f4:	blt	131b8 <test@@Base+0xbc0>
   139f8:	ldr	r1, [sp, #40]	; 0x28
   139fc:	strd	r2, [r1]
   13a00:	b	12e80 <test@@Base+0x888>
   13a04:	cmp	r3, #46	; 0x2e
   13a08:	str	r6, [sp, #24]
   13a0c:	bne	12b84 <test@@Base+0x58c>
   13a10:	mov	r3, #5
   13a14:	mov	r2, r5
   13a18:	add	r0, sp, #68	; 0x44
   13a1c:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   13a20:	b	12b84 <test@@Base+0x58c>
   13a24:	cmp	r3, #46	; 0x2e
   13a28:	str	r6, [sp, #24]
   13a2c:	bne	134cc <test@@Base+0xed4>
   13a30:	mov	r3, #5
   13a34:	mov	r2, r5
   13a38:	add	r0, sp, #68	; 0x44
   13a3c:	bl	1af88 <flatcc_json_parser_set_error@@Base>
   13a40:	b	134cc <test@@Base+0xed4>
   13a44:	mov	r0, r5
   13a48:	b	12d3c <test@@Base+0x744>
   13a4c:	mov	r0, r5
   13a50:	b	12d6c <test@@Base+0x774>
   13a54:	mov	r2, r5
   13a58:	mov	r1, ip
   13a5c:	ldr	r6, [sp, #24]
   13a60:	ldr	r9, [sp, #28]
   13a64:	b	138fc <test@@Base+0x1304>
   13a68:	mov	r0, r5
   13a6c:	b	13360 <test@@Base+0xd68>
   13a70:	mov	r0, r5
   13a74:	b	13330 <test@@Base+0xd38>
   13a78:	ldrb	r3, [r4, #2]
   13a7c:	cmp	r3, #32
   13a80:	addhi	r4, r4, #2
   13a84:	bls	12f54 <test@@Base+0x95c>
   13a88:	b	12f68 <test@@Base+0x970>
   13a8c:	mov	r0, r5
   13a90:	b	12b70 <test@@Base+0x578>
   13a94:	mov	r0, r5
   13a98:	b	12ba0 <test@@Base+0x5a8>
   13a9c:	mov	r0, r5
   13aa0:	b	134b8 <test@@Base+0xec0>
   13aa4:	mov	r0, r5
   13aa8:	b	134e8 <test@@Base+0xef0>

00013aac <flatcc_builder_default_alloc@@Base>:
   13aac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13ab0:	subs	r5, r2, #0
   13ab4:	strd	r6, [sp, #8]
   13ab8:	mov	r6, r1
   13abc:	str	r8, [sp, #16]
   13ac0:	str	lr, [sp, #20]
   13ac4:	beq	13afc <flatcc_builder_default_alloc@@Base+0x50>
   13ac8:	mov	r7, r3
   13acc:	ldr	r3, [sp, #24]
   13ad0:	sub	r2, r3, #1
   13ad4:	cmp	r2, #6
   13ad8:	ldrls	pc, [pc, r2, lsl #2]
   13adc:	b	13bac <flatcc_builder_default_alloc@@Base+0x100>
   13ae0:	andeq	r3, r1, ip, lsr #22
   13ae4:	andeq	r3, r1, ip, lsr #23
   13ae8:	andeq	r3, r1, ip, lsr #23
   13aec:	andeq	r3, r1, r4, lsr #23
   13af0:	muleq	r1, r4, fp
   13af4:	andeq	r3, r1, ip, lsr #23
   13af8:	muleq	r1, ip, fp
   13afc:	ldr	r0, [r1]
   13b00:	cmp	r0, #0
   13b04:	beq	13b18 <flatcc_builder_default_alloc@@Base+0x6c>
   13b08:	bl	12400 <free@plt>
   13b0c:	mov	r0, r5
   13b10:	str	r5, [r6]
   13b14:	str	r5, [r6, #4]
   13b18:	ldrd	r4, [sp]
   13b1c:	ldrd	r6, [sp, #8]
   13b20:	ldr	r8, [sp, #16]
   13b24:	add	sp, sp, #20
   13b28:	pop	{pc}		; (ldr pc, [sp], #4)
   13b2c:	mov	r4, #256	; 0x100
   13b30:	cmp	r4, r5
   13b34:	bcs	13b44 <flatcc_builder_default_alloc@@Base+0x98>
   13b38:	lsl	r4, r4, #1
   13b3c:	cmp	r5, r4
   13b40:	bhi	13b38 <flatcc_builder_default_alloc@@Base+0x8c>
   13b44:	ldr	r2, [r6, #4]
   13b48:	cmp	r5, r2
   13b4c:	bhi	13b5c <flatcc_builder_default_alloc@@Base+0xb0>
   13b50:	cmp	r4, r2, lsr #1
   13b54:	movls	r0, #0
   13b58:	bls	13b18 <flatcc_builder_default_alloc@@Base+0x6c>
   13b5c:	mov	r1, r4
   13b60:	ldr	r0, [r6]
   13b64:	bl	12424 <realloc@plt>
   13b68:	subs	r5, r0, #0
   13b6c:	beq	13bc8 <flatcc_builder_default_alloc@@Base+0x11c>
   13b70:	cmp	r7, #0
   13b74:	beq	13b84 <flatcc_builder_default_alloc@@Base+0xd8>
   13b78:	ldr	r0, [r6, #4]
   13b7c:	cmp	r0, r4
   13b80:	bcc	13bb4 <flatcc_builder_default_alloc@@Base+0x108>
   13b84:	mov	r0, #0
   13b88:	str	r5, [r6]
   13b8c:	str	r4, [r6, #4]
   13b90:	b	13b18 <flatcc_builder_default_alloc@@Base+0x6c>
   13b94:	mov	r4, r5
   13b98:	b	13b44 <flatcc_builder_default_alloc@@Base+0x98>
   13b9c:	mov	r4, #64	; 0x40
   13ba0:	b	13b30 <flatcc_builder_default_alloc@@Base+0x84>
   13ba4:	mov	r4, #288	; 0x120
   13ba8:	b	13b30 <flatcc_builder_default_alloc@@Base+0x84>
   13bac:	mov	r4, #32
   13bb0:	b	13b30 <flatcc_builder_default_alloc@@Base+0x84>
   13bb4:	sub	r2, r4, r0
   13bb8:	mov	r1, #0
   13bbc:	add	r0, r5, r0
   13bc0:	bl	12484 <memset@plt>
   13bc4:	b	13b84 <flatcc_builder_default_alloc@@Base+0xd8>
   13bc8:	mvn	r0, #0
   13bcc:	b	13b18 <flatcc_builder_default_alloc@@Base+0x6c>
   13bd0:	movw	r3, #3012	; 0xbc4
   13bd4:	movt	r3, #2
   13bd8:	str	r4, [sp, #-8]!
   13bdc:	movw	r1, #4884	; 0x1314
   13be0:	movt	r1, #2
   13be4:	str	lr, [sp, #4]
   13be8:	movw	r0, #5076	; 0x13d4
   13bec:	movt	r0, #2
   13bf0:	mov	r2, #308	; 0x134
   13bf4:	bl	124b4 <__assert_fail@plt>
   13bf8:	movw	r1, #4884	; 0x1314
   13bfc:	movt	r1, #2
   13c00:	ldr	r3, [pc, #20]	; 13c1c <flatcc_builder_default_alloc@@Base+0x170>
   13c04:	movw	r0, #5076	; 0x13d4
   13c08:	movt	r0, #2
   13c0c:	str	r4, [sp, #-8]!
   13c10:	movw	r2, #677	; 0x2a5
   13c14:	str	lr, [sp, #4]
   13c18:	bl	124b4 <__assert_fail@plt>
   13c1c:	ldrdeq	r0, [r2], -r4
   13c20:	movw	r1, #4884	; 0x1314
   13c24:	movt	r1, #2
   13c28:	ldr	r3, [pc, #20]	; 13c44 <flatcc_builder_default_alloc@@Base+0x198>
   13c2c:	movw	r0, #5076	; 0x13d4
   13c30:	movt	r0, #2
   13c34:	str	r4, [sp, #-8]!
   13c38:	movw	r2, #702	; 0x2be
   13c3c:	str	lr, [sp, #4]
   13c40:	bl	124b4 <__assert_fail@plt>
   13c44:	andeq	r0, r2, r0, ror #23
   13c48:	movw	r1, #4884	; 0x1314
   13c4c:	movt	r1, #2
   13c50:	ldr	r3, [pc, #20]	; 13c6c <flatcc_builder_default_alloc@@Base+0x1c0>
   13c54:	movw	r0, #5076	; 0x13d4
   13c58:	movt	r0, #2
   13c5c:	str	r4, [sp, #-8]!
   13c60:	movw	r2, #651	; 0x28b
   13c64:	str	lr, [sp, #4]
   13c68:	bl	124b4 <__assert_fail@plt>
   13c6c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   13c70:	movw	r1, #4884	; 0x1314
   13c74:	movt	r1, #2
   13c78:	ldr	r3, [pc, #20]	; 13c94 <flatcc_builder_default_alloc@@Base+0x1e8>
   13c7c:	movw	r0, #4956	; 0x135c
   13c80:	movt	r0, #2
   13c84:	str	r4, [sp, #-8]!
   13c88:	mov	r2, #892	; 0x37c
   13c8c:	str	lr, [sp, #4]
   13c90:	bl	124b4 <__assert_fail@plt>
   13c94:	strdeq	r0, [r2], -ip
   13c98:	movw	r1, #4884	; 0x1314
   13c9c:	movt	r1, #2
   13ca0:	ldr	r3, [pc, #20]	; 13cbc <flatcc_builder_default_alloc@@Base+0x210>
   13ca4:	movw	r0, #4984	; 0x1378
   13ca8:	movt	r0, #2
   13cac:	str	r4, [sp, #-8]!
   13cb0:	movw	r2, #542	; 0x21e
   13cb4:	str	lr, [sp, #4]
   13cb8:	bl	124b4 <__assert_fail@plt>
   13cbc:	andeq	r0, r2, r0, lsl ip
   13cc0:	movw	r1, #4884	; 0x1314
   13cc4:	movt	r1, #2
   13cc8:	ldr	r3, [pc, #20]	; 13ce4 <flatcc_builder_default_alloc@@Base+0x238>
   13ccc:	movw	r0, #5012	; 0x1394
   13cd0:	movt	r0, #2
   13cd4:	str	r4, [sp, #-8]!
   13cd8:	movw	r2, #966	; 0x3c6
   13cdc:	str	lr, [sp, #4]
   13ce0:	bl	124b4 <__assert_fail@plt>
   13ce4:	andeq	r0, r2, r0, lsr ip
   13ce8:	movw	r1, #4884	; 0x1314
   13cec:	movt	r1, #2
   13cf0:	ldr	r3, [pc, #20]	; 13d0c <flatcc_builder_default_alloc@@Base+0x260>
   13cf4:	movw	r0, #5056	; 0x13c0
   13cf8:	movt	r0, #2
   13cfc:	str	r4, [sp, #-8]!
   13d00:	movw	r2, #1926	; 0x786
   13d04:	str	lr, [sp, #4]
   13d08:	bl	124b4 <__assert_fail@plt>
   13d0c:	andeq	r0, r2, r0, asr ip
   13d10:	ldrd	r2, [r0, #156]	; 0x9c
   13d14:	strd	r4, [sp, #-20]!	; 0xffffffec
   13d18:	mov	r5, r1
   13d1c:	mov	r4, r0
   13d20:	strd	r6, [sp, #8]
   13d24:	str	lr, [sp, #16]
   13d28:	sub	sp, sp, #12
   13d2c:	add	r1, r2, #1
   13d30:	cmp	r1, r3
   13d34:	str	r1, [r0, #156]	; 0x9c
   13d38:	ble	13e18 <flatcc_builder_default_alloc@@Base+0x36c>
   13d3c:	ldr	r3, [r0, #176]	; 0xb0
   13d40:	cmp	r1, r3
   13d44:	cmpgt	r3, #0
   13d48:	movgt	r3, #1
   13d4c:	movle	r3, #0
   13d50:	bgt	13e28 <flatcc_builder_default_alloc@@Base+0x37c>
   13d54:	add	r2, r2, r2, lsl #3
   13d58:	ldr	r1, [r0, #88]	; 0x58
   13d5c:	lsl	r6, r2, #2
   13d60:	add	r2, r6, #36	; 0x24
   13d64:	cmp	r2, r1
   13d68:	bls	13d8c <flatcc_builder_default_alloc@@Base+0x2e0>
   13d6c:	mov	ip, #4
   13d70:	add	r1, r0, #84	; 0x54
   13d74:	ldr	r0, [r0, #40]	; 0x28
   13d78:	str	ip, [sp]
   13d7c:	ldr	r7, [r4, #48]	; 0x30
   13d80:	blx	r7
   13d84:	cmp	r0, #0
   13d88:	bne	13e30 <flatcc_builder_default_alloc@@Base+0x384>
   13d8c:	ldr	r2, [r4, #84]	; 0x54
   13d90:	add	r2, r2, r6
   13d94:	cmp	r2, #0
   13d98:	str	r2, [r4, #32]
   13d9c:	beq	13e28 <flatcc_builder_default_alloc@@Base+0x37c>
   13da0:	ldr	r3, [r4, #88]	; 0x58
   13da4:	movw	r0, #36409	; 0x8e39
   13da8:	movt	r0, #14563	; 0x38e3
   13dac:	ldr	r1, [r4, #176]	; 0xb0
   13db0:	umull	r0, r3, r0, r3
   13db4:	lsr	r3, r3, #3
   13db8:	cmp	r3, r1
   13dbc:	cmpgt	r1, #0
   13dc0:	movgt	r3, r1
   13dc4:	str	r3, [r4, #160]	; 0xa0
   13dc8:	ldr	r3, [r4, #20]
   13dcc:	mov	r1, #0
   13dd0:	mvn	lr, #3
   13dd4:	mov	r0, r1
   13dd8:	ldr	ip, [r4, #28]
   13ddc:	ldrh	r6, [r4, #130]	; 0x82
   13de0:	str	r3, [r2, #8]
   13de4:	add	r3, r3, ip
   13de8:	add	r3, r3, #7
   13dec:	bic	r3, r3, #7
   13df0:	strh	r6, [r2, #12]
   13df4:	strh	r5, [r4, #130]	; 0x82
   13df8:	stm	r2, {ip, lr}
   13dfc:	str	r1, [r4, #20]
   13e00:	str	r3, [r4, #28]
   13e04:	add	sp, sp, #12
   13e08:	ldrd	r4, [sp]
   13e0c:	ldrd	r6, [sp, #8]
   13e10:	add	sp, sp, #16
   13e14:	pop	{pc}		; (ldr pc, [sp], #4)
   13e18:	ldr	r2, [r0, #32]
   13e1c:	add	r2, r2, #36	; 0x24
   13e20:	str	r2, [r0, #32]
   13e24:	b	13dc8 <flatcc_builder_default_alloc@@Base+0x31c>
   13e28:	mvn	r0, #0
   13e2c:	b	13e04 <flatcc_builder_default_alloc@@Base+0x358>
   13e30:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>
   13e34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13e38:	mov	r4, r0
   13e3c:	ldrh	r0, [r0, #128]	; 0x80
   13e40:	strd	r6, [sp, #8]
   13e44:	mov	r6, #4
   13e48:	ldr	r5, [r4, #136]	; 0x88
   13e4c:	str	lr, [sp, #20]
   13e50:	mov	lr, r2
   13e54:	str	r8, [sp, #16]
   13e58:	sub	sp, sp, #88	; 0x58
   13e5c:	cmp	r0, #3
   13e60:	add	r0, sp, #12
   13e64:	movls	r2, #4
   13e68:	str	lr, [sp, #12]
   13e6c:	str	r6, [sp, #16]
   13e70:	strhls	r2, [r4, #128]	; 0x80
   13e74:	mov	r2, #1
   13e78:	lsls	ip, lr, #2
   13e7c:	moveq	r7, #2
   13e80:	str	r2, [sp, #20]
   13e84:	str	r0, [sp, #24]
   13e88:	and	r0, r5, #3
   13e8c:	str	r6, [sp, #28]
   13e90:	beq	13eb4 <flatcc_builder_default_alloc@@Base+0x408>
   13e94:	mov	r8, #2
   13e98:	add	r6, ip, r6
   13e9c:	mov	r2, r8
   13ea0:	mov	r7, #3
   13ea4:	str	r6, [sp, #16]
   13ea8:	str	r8, [sp, #20]
   13eac:	str	r1, [sp, #32]
   13eb0:	str	ip, [sp, #36]	; 0x24
   13eb4:	cmp	r0, #0
   13eb8:	beq	13ee0 <flatcc_builder_default_alloc@@Base+0x434>
   13ebc:	ldr	r8, [pc, #360]	; 1402c <flatcc_builder_default_alloc@@Base+0x580>
   13ec0:	add	r2, r2, #1
   13ec4:	add	ip, sp, #88	; 0x58
   13ec8:	add	ip, ip, r2, lsl #3
   13ecc:	add	r6, r6, r0
   13ed0:	mov	r2, r7
   13ed4:	strd	r6, [sp, #16]
   13ed8:	str	r8, [ip, #-72]	; 0xffffffb8
   13edc:	str	r0, [ip, #-68]	; 0xffffffbc
   13ee0:	cmp	lr, #0
   13ee4:	beq	13f74 <flatcc_builder_default_alloc@@Base+0x4c8>
   13ee8:	cmp	r3, #0
   13eec:	subne	r5, r1, r5
   13ef0:	addne	lr, r3, lr
   13ef4:	addne	r5, r5, r6
   13ef8:	bne	13f24 <flatcc_builder_default_alloc@@Base+0x478>
   13efc:	b	13fdc <flatcc_builder_default_alloc@@Base+0x530>
   13f00:	sub	ip, r5, r1
   13f04:	add	r0, ip, r0
   13f08:	str	r0, [r1, #-4]
   13f0c:	ldrb	r0, [r3]
   13f10:	cmp	r0, #0
   13f14:	beq	13fc0 <flatcc_builder_default_alloc@@Base+0x514>
   13f18:	add	r3, r3, #1
   13f1c:	cmp	r3, lr
   13f20:	beq	13f70 <flatcc_builder_default_alloc@@Base+0x4c4>
   13f24:	ldr	r0, [r1], #4
   13f28:	cmp	r0, #0
   13f2c:	bne	13f00 <flatcc_builder_default_alloc@@Base+0x454>
   13f30:	ldrb	r0, [r3]
   13f34:	cmp	r0, #0
   13f38:	beq	13f18 <flatcc_builder_default_alloc@@Base+0x46c>
   13f3c:	movw	r1, #4884	; 0x1314
   13f40:	movt	r1, #2
   13f44:	ldr	r3, [pc, #228]	; 14030 <flatcc_builder_default_alloc@@Base+0x584>
   13f48:	movw	r0, #5080	; 0x13d8
   13f4c:	movt	r0, #2
   13f50:	movw	r2, #1461	; 0x5b5
   13f54:	bl	124b4 <__assert_fail@plt>
   13f58:	sub	r0, ip, r1
   13f5c:	add	r3, r3, #1
   13f60:	add	r0, r0, r5
   13f64:	cmp	lr, r3
   13f68:	str	r0, [r1, #-4]
   13f6c:	bne	13fe4 <flatcc_builder_default_alloc@@Base+0x538>
   13f70:	ldr	r5, [r4, #136]	; 0x88
   13f74:	sub	r7, r5, r6
   13f78:	cmp	r7, r5
   13f7c:	bge	14010 <flatcc_builder_default_alloc@@Base+0x564>
   13f80:	mov	r3, r7
   13f84:	add	r1, sp, #24
   13f88:	str	r6, [sp]
   13f8c:	ldr	r0, [r4, #36]	; 0x24
   13f90:	ldr	r5, [r4, #44]	; 0x2c
   13f94:	blx	r5
   13f98:	cmp	r0, #0
   13f9c:	bne	1400c <flatcc_builder_default_alloc@@Base+0x560>
   13fa0:	mov	r0, r7
   13fa4:	str	r7, [r4, #136]	; 0x88
   13fa8:	add	sp, sp, #88	; 0x58
   13fac:	ldrd	r4, [sp]
   13fb0:	ldrd	r6, [sp, #8]
   13fb4:	ldr	r8, [sp, #16]
   13fb8:	add	sp, sp, #20
   13fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   13fc0:	movw	r1, #4884	; 0x1314
   13fc4:	movt	r1, #2
   13fc8:	ldr	r3, [pc, #96]	; 14030 <flatcc_builder_default_alloc@@Base+0x584>
   13fcc:	movw	r0, #5064	; 0x13c8
   13fd0:	movt	r0, #2
   13fd4:	movw	r2, #1457	; 0x5b1
   13fd8:	bl	124b4 <__assert_fail@plt>
   13fdc:	sub	ip, r1, r5
   13fe0:	add	ip, ip, r6
   13fe4:	ldr	r5, [r1], #4
   13fe8:	cmp	r5, #0
   13fec:	bne	13f58 <flatcc_builder_default_alloc@@Base+0x4ac>
   13ff0:	movw	r1, #4884	; 0x1314
   13ff4:	movt	r1, #2
   13ff8:	ldr	r3, [pc, #48]	; 14030 <flatcc_builder_default_alloc@@Base+0x584>
   13ffc:	movw	r0, #5076	; 0x13d4
   14000:	movt	r0, #2
   14004:	movw	r2, #1463	; 0x5b7
   14008:	bl	124b4 <__assert_fail@plt>
   1400c:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   14010:	movw	r1, #4884	; 0x1314
   14014:	movt	r1, #2
   14018:	ldr	r3, [pc, #20]	; 14034 <flatcc_builder_default_alloc@@Base+0x588>
   1401c:	movw	r0, #5076	; 0x13d4
   14020:	movt	r0, #2
   14024:	movw	r2, #647	; 0x287
   14028:	bl	124b4 <__assert_fail@plt>
   1402c:	andeq	r0, r2, ip, ror #24
   14030:	andeq	r0, r2, ip, ror #28
   14034:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>

00014038 <flatcc_builder_flush_vtable_cache@@Base>:
   14038:	ldr	r3, [r0, #116]	; 0x74
   1403c:	cmp	r3, #0
   14040:	bxeq	lr
   14044:	str	r4, [sp, #-8]!
   14048:	mov	r4, r0
   1404c:	mov	r1, #0
   14050:	ldr	r0, [r0, #92]	; 0x5c
   14054:	ldr	r2, [r4, #96]	; 0x60
   14058:	str	lr, [sp, #4]
   1405c:	bl	12484 <memset@plt>
   14060:	mov	r3, #16
   14064:	mov	r2, #0
   14068:	strd	r2, [r4, #120]	; 0x78
   1406c:	ldr	r4, [sp]
   14070:	add	sp, sp, #4
   14074:	pop	{pc}		; (ldr pc, [sp], #4)

00014078 <flatcc_builder_custom_init@@Base>:
   14078:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1407c:	mov	r5, r3
   14080:	mov	r4, r0
   14084:	strd	r6, [sp, #8]
   14088:	mov	r6, r1
   1408c:	mov	r7, r2
   14090:	mov	r1, #0
   14094:	mov	r2, #232	; 0xe8
   14098:	str	r8, [sp, #16]
   1409c:	str	lr, [sp, #20]
   140a0:	ldr	r8, [sp, #24]
   140a4:	bl	12484 <memset@plt>
   140a8:	cmp	r6, #0
   140ac:	beq	140e8 <flatcc_builder_custom_init@@Base+0x70>
   140b0:	cmp	r5, #0
   140b4:	movw	r3, #15020	; 0x3aac
   140b8:	movt	r3, #1
   140bc:	str	r7, [r4, #36]	; 0x24
   140c0:	mov	r0, #0
   140c4:	moveq	r5, r3
   140c8:	str	r8, [r4, #40]	; 0x28
   140cc:	str	r6, [r4, #44]	; 0x2c
   140d0:	str	r5, [r4, #48]	; 0x30
   140d4:	ldrd	r4, [sp]
   140d8:	ldrd	r6, [sp, #8]
   140dc:	ldr	r8, [sp, #16]
   140e0:	add	sp, sp, #20
   140e4:	pop	{pc}		; (ldr pc, [sp], #4)
   140e8:	mov	r3, #1
   140ec:	movw	r6, #38888	; 0x97e8
   140f0:	movt	r6, #1
   140f4:	add	r7, r4, #188	; 0xbc
   140f8:	str	r3, [r4, #184]	; 0xb8
   140fc:	b	140b0 <flatcc_builder_custom_init@@Base+0x38>

00014100 <flatcc_builder_init@@Base>:
   14100:	mov	r2, #232	; 0xe8
   14104:	mov	r1, #0
   14108:	str	r4, [sp, #-8]!
   1410c:	str	lr, [sp, #4]
   14110:	bl	12484 <memset@plt>
   14114:	mov	r3, r0
   14118:	movw	r2, #15020	; 0x3aac
   1411c:	movt	r2, #1
   14120:	mov	r0, #1
   14124:	ldr	r4, [sp]
   14128:	add	ip, r3, #188	; 0xbc
   1412c:	movw	r1, #38888	; 0x97e8
   14130:	movt	r1, #1
   14134:	add	sp, sp, #4
   14138:	str	ip, [r3, #36]	; 0x24
   1413c:	str	r1, [r3, #44]	; 0x2c
   14140:	str	r2, [r3, #48]	; 0x30
   14144:	str	r0, [r3, #184]	; 0xb8
   14148:	mov	r0, #0
   1414c:	pop	{pc}		; (ldr pc, [sp], #4)

00014150 <flatcc_builder_custom_reset@@Base>:
   14150:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14154:	mov	r5, #0
   14158:	mov	r4, r0
   1415c:	strd	r6, [sp, #8]
   14160:	mov	r6, r0
   14164:	strd	r8, [sp, #16]
   14168:	mov	r8, r1
   1416c:	mov	r9, r2
   14170:	str	lr, [sp, #24]
   14174:	sub	sp, sp, #12
   14178:	b	141c8 <flatcc_builder_custom_reset@@Base+0x78>
   1417c:	cmp	r5, #5
   14180:	cmpne	r9, #0
   14184:	beq	141ac <flatcc_builder_custom_reset@@Base+0x5c>
   14188:	mov	r3, #1
   1418c:	str	r5, [sp]
   14190:	mov	r2, r3
   14194:	ldr	r0, [r6, #40]	; 0x28
   14198:	ldr	r7, [r6, #48]	; 0x30
   1419c:	blx	r7
   141a0:	cmp	r0, #0
   141a4:	bne	142b0 <flatcc_builder_custom_reset@@Base+0x160>
   141a8:	ldr	r0, [r4, #52]	; 0x34
   141ac:	mov	r1, #0
   141b0:	ldr	r2, [r4, #56]	; 0x38
   141b4:	bl	12484 <memset@plt>
   141b8:	add	r5, r5, #1
   141bc:	add	r4, r4, #8
   141c0:	cmp	r5, #8
   141c4:	beq	14200 <flatcc_builder_custom_reset@@Base+0xb0>
   141c8:	ldr	r0, [r4, #52]	; 0x34
   141cc:	add	r1, r4, #52	; 0x34
   141d0:	cmp	r0, #0
   141d4:	bne	1417c <flatcc_builder_custom_reset@@Base+0x2c>
   141d8:	ldr	r3, [r4, #56]	; 0x38
   141dc:	cmp	r3, #0
   141e0:	beq	141b8 <flatcc_builder_custom_reset@@Base+0x68>
   141e4:	movw	r1, #4884	; 0x1314
   141e8:	movt	r1, #2
   141ec:	ldr	r3, [pc, #196]	; 142b8 <flatcc_builder_custom_reset@@Base+0x168>
   141f0:	movw	r0, #5096	; 0x13e8
   141f4:	movt	r0, #2
   141f8:	movw	r2, #434	; 0x1b2
   141fc:	bl	124b4 <__assert_fail@plt>
   14200:	mov	r2, #0
   14204:	ldr	r0, [r6, #52]	; 0x34
   14208:	ldr	r3, [r6, #124]	; 0x7c
   1420c:	ldr	r1, [r6, #60]	; 0x3c
   14210:	str	r0, [r6, #4]
   14214:	str	r2, [r6, #120]	; 0x78
   14218:	cmp	r3, r2
   1421c:	ldr	r2, [r6, #76]	; 0x4c
   14220:	movne	r3, #16
   14224:	strne	r3, [r6, #124]	; 0x7c
   14228:	mov	r3, #0
   1422c:	cmp	r8, r3
   14230:	str	r2, [r6]
   14234:	str	r1, [r6, #16]
   14238:	str	r3, [r6, #20]
   1423c:	str	r3, [r6, #24]
   14240:	str	r3, [r6, #32]
   14244:	strh	r3, [r6, #128]	; 0x80
   14248:	str	r3, [r6, #136]	; 0x88
   1424c:	str	r3, [r6, #140]	; 0x8c
   14250:	str	r3, [r6, #148]	; 0x94
   14254:	str	r3, [r6, #152]	; 0x98
   14258:	str	r3, [r6, #156]	; 0x9c
   1425c:	str	r3, [r6, #160]	; 0xa0
   14260:	bne	14288 <flatcc_builder_custom_reset@@Base+0x138>
   14264:	ldr	r0, [r6, #184]	; 0xb8
   14268:	cmp	r0, #0
   1426c:	bne	142a0 <flatcc_builder_custom_reset@@Base+0x150>
   14270:	add	sp, sp, #12
   14274:	ldrd	r4, [sp]
   14278:	ldrd	r6, [sp, #8]
   1427c:	ldrd	r8, [sp, #16]
   14280:	add	sp, sp, #24
   14284:	pop	{pc}		; (ldr pc, [sp], #4)
   14288:	ldr	r0, [r6, #184]	; 0xb8
   1428c:	str	r3, [r6, #172]	; 0xac
   14290:	str	r3, [r6, #176]	; 0xb0
   14294:	str	r3, [r6, #180]	; 0xb4
   14298:	cmp	r0, #0
   1429c:	beq	14270 <flatcc_builder_custom_reset@@Base+0x120>
   142a0:	add	r0, r6, #188	; 0xbc
   142a4:	bl	19694 <flatcc_emitter_reset@@Base>
   142a8:	mov	r0, #0
   142ac:	b	14270 <flatcc_builder_custom_reset@@Base+0x120>
   142b0:	mvn	r0, #0
   142b4:	b	14270 <flatcc_builder_custom_reset@@Base+0x120>
   142b8:	andeq	r0, r2, ip, lsl #29

000142bc <flatcc_builder_reset@@Base>:
   142bc:	mov	r2, #0
   142c0:	mov	r1, r2
   142c4:	b	14150 <flatcc_builder_custom_reset@@Base>

000142c8 <flatcc_builder_clear@@Base>:
   142c8:	strd	r4, [sp, #-20]!	; 0xffffffec
   142cc:	mov	r4, #0
   142d0:	add	r5, r0, #52	; 0x34
   142d4:	strd	r6, [sp, #8]
   142d8:	mov	r6, r0
   142dc:	str	lr, [sp, #16]
   142e0:	sub	sp, sp, #12
   142e4:	mov	r3, #0
   142e8:	mov	r1, r5
   142ec:	str	r4, [sp]
   142f0:	mov	r2, r3
   142f4:	add	r4, r4, #1
   142f8:	ldr	r0, [r6, #40]	; 0x28
   142fc:	add	r5, r5, #8
   14300:	ldr	r7, [r6, #48]	; 0x30
   14304:	blx	r7
   14308:	cmp	r4, #8
   1430c:	bne	142e4 <flatcc_builder_clear@@Base+0x1c>
   14310:	ldr	r3, [r6, #184]	; 0xb8
   14314:	cmp	r3, #0
   14318:	bne	14340 <flatcc_builder_clear@@Base+0x78>
   1431c:	mov	r0, r6
   14320:	mov	r2, #232	; 0xe8
   14324:	mov	r1, #0
   14328:	add	sp, sp, #12
   1432c:	ldrd	r4, [sp]
   14330:	ldrd	r6, [sp, #8]
   14334:	ldr	lr, [sp, #16]
   14338:	add	sp, sp, #20
   1433c:	b	12484 <memset@plt>
   14340:	add	r0, r6, #188	; 0xbc
   14344:	bl	19768 <flatcc_emitter_clear@@Base>
   14348:	b	1431c <flatcc_builder_clear@@Base+0x54>

0001434c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1434c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14350:	add	r4, r1, #3
   14354:	mov	r5, r0
   14358:	ldr	r3, [r0, #112]	; 0x70
   1435c:	bic	r4, r4, #3
   14360:	strd	r6, [sp, #8]
   14364:	add	r4, r4, #4
   14368:	ldr	r6, [r0, #228]	; 0xe4
   1436c:	str	lr, [sp, #16]
   14370:	sub	sp, sp, #12
   14374:	add	r2, r6, r4
   14378:	cmp	r2, r3
   1437c:	bls	143a4 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   14380:	mov	ip, #7
   14384:	add	r1, r0, #108	; 0x6c
   14388:	ldr	r0, [r0, #40]	; 0x28
   1438c:	mov	r3, #0
   14390:	str	ip, [sp]
   14394:	ldr	r7, [r5, #48]	; 0x30
   14398:	blx	r7
   1439c:	cmp	r0, #0
   143a0:	bne	143f8 <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   143a4:	ldr	r7, [r5, #108]	; 0x6c
   143a8:	adds	r3, r7, r6
   143ac:	moveq	r0, r3
   143b0:	beq	143e4 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   143b4:	mov	r2, r4
   143b8:	mov	r0, r3
   143bc:	mov	r1, #0
   143c0:	bl	12484 <memset@plt>
   143c4:	ldr	r2, [r5, #224]	; 0xe0
   143c8:	add	r0, r0, #4
   143cc:	str	r2, [r7, r6]
   143d0:	ldr	r3, [r5, #228]	; 0xe4
   143d4:	add	r4, r3, r4
   143d8:	add	r3, r3, #4
   143dc:	str	r3, [r5, #224]	; 0xe0
   143e0:	str	r4, [r5, #228]	; 0xe4
   143e4:	add	sp, sp, #12
   143e8:	ldrd	r4, [sp]
   143ec:	ldrd	r6, [sp, #8]
   143f0:	add	sp, sp, #16
   143f4:	pop	{pc}		; (ldr pc, [sp], #4)
   143f8:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>

000143fc <flatcc_builder_enter_user_frame@@Base>:
   143fc:	strd	r4, [sp, #-20]!	; 0xffffffec
   14400:	add	r4, r1, #3
   14404:	mov	r5, r0
   14408:	ldr	r3, [r0, #112]	; 0x70
   1440c:	bic	r4, r4, #3
   14410:	strd	r6, [sp, #8]
   14414:	add	r4, r4, #4
   14418:	ldr	r6, [r0, #228]	; 0xe4
   1441c:	str	lr, [sp, #16]
   14420:	sub	sp, sp, #12
   14424:	add	r2, r6, r4
   14428:	cmp	r2, r3
   1442c:	bls	14454 <flatcc_builder_enter_user_frame@@Base+0x58>
   14430:	mov	ip, #7
   14434:	add	r1, r0, #108	; 0x6c
   14438:	ldr	r0, [r0, #40]	; 0x28
   1443c:	mov	r3, #0
   14440:	str	ip, [sp]
   14444:	ldr	r7, [r5, #48]	; 0x30
   14448:	blx	r7
   1444c:	cmp	r0, #0
   14450:	bne	1449c <flatcc_builder_enter_user_frame@@Base+0xa0>
   14454:	ldr	r7, [r5, #108]	; 0x6c
   14458:	adds	r0, r7, r6
   1445c:	beq	14488 <flatcc_builder_enter_user_frame@@Base+0x8c>
   14460:	mov	r2, r4
   14464:	mov	r1, #0
   14468:	bl	12484 <memset@plt>
   1446c:	ldr	r3, [r5, #224]	; 0xe0
   14470:	str	r3, [r7, r6]
   14474:	ldr	r0, [r5, #228]	; 0xe4
   14478:	add	r4, r0, r4
   1447c:	add	r0, r0, #4
   14480:	str	r0, [r5, #224]	; 0xe0
   14484:	str	r4, [r5, #228]	; 0xe4
   14488:	add	sp, sp, #12
   1448c:	ldrd	r4, [sp]
   14490:	ldrd	r6, [sp, #8]
   14494:	add	sp, sp, #16
   14498:	pop	{pc}		; (ldr pc, [sp], #4)
   1449c:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>

000144a0 <flatcc_builder_exit_user_frame@@Base>:
   144a0:	ldr	r2, [r0, #224]	; 0xe0
   144a4:	cmp	r2, #0
   144a8:	beq	144d0 <flatcc_builder_exit_user_frame@@Base+0x30>
   144ac:	mov	r3, r0
   144b0:	sub	r0, r2, #4
   144b4:	ldr	r1, [r3, #108]	; 0x6c
   144b8:	str	r0, [r3, #228]	; 0xe4
   144bc:	add	r2, r1, r2
   144c0:	ldr	r2, [r2, #-4]
   144c4:	mov	r0, r2
   144c8:	str	r2, [r3, #224]	; 0xe0
   144cc:	bx	lr
   144d0:	str	r4, [sp, #-8]!
   144d4:	str	lr, [sp, #4]
   144d8:	bl	13c98 <flatcc_builder_default_alloc@@Base+0x1ec>

000144dc <flatcc_builder_exit_user_frame_at@@Base>:
   144dc:	ldr	r2, [r0, #224]	; 0xe0
   144e0:	str	r4, [sp, #-8]!
   144e4:	str	lr, [sp, #4]
   144e8:	cmp	r2, r1
   144ec:	bcc	14528 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   144f0:	cmp	r1, #0
   144f4:	mov	r3, r0
   144f8:	str	r1, [r0, #224]	; 0xe0
   144fc:	beq	14544 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   14500:	ldr	r2, [r3, #108]	; 0x6c
   14504:	sub	r0, r1, #4
   14508:	ldr	r4, [sp]
   1450c:	add	sp, sp, #4
   14510:	str	r0, [r3, #228]	; 0xe4
   14514:	add	r1, r2, r1
   14518:	ldr	r2, [r1, #-4]
   1451c:	mov	r0, r2
   14520:	str	r2, [r3, #224]	; 0xe0
   14524:	pop	{pc}		; (ldr pc, [sp], #4)
   14528:	movw	r1, #4884	; 0x1314
   1452c:	movt	r1, #2
   14530:	ldr	r3, [pc, #16]	; 14548 <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   14534:	movw	r0, #5116	; 0x13fc
   14538:	movt	r0, #2
   1453c:	movw	r2, #551	; 0x227
   14540:	bl	124b4 <__assert_fail@plt>
   14544:	bl	13c98 <flatcc_builder_default_alloc@@Base+0x1ec>
   14548:	andeq	r0, r2, r8, lsr #29

0001454c <flatcc_builder_get_current_user_frame@@Base>:
   1454c:	ldr	r0, [r0, #224]	; 0xe0
   14550:	bx	lr

00014554 <flatcc_builder_get_user_frame_ptr@@Base>:
   14554:	ldr	r0, [r0, #108]	; 0x6c
   14558:	add	r0, r0, r1
   1455c:	bx	lr

00014560 <flatcc_builder_embed_buffer@@Base>:
   14560:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14564:	mov	r5, r0
   14568:	ldr	r0, [r0, #152]	; 0x98
   1456c:	strd	r6, [sp, #8]
   14570:	mov	r7, r2
   14574:	mov	r6, r3
   14578:	strd	r8, [sp, #16]
   1457c:	str	sl, [sp, #24]
   14580:	str	lr, [sp, #28]
   14584:	sub	sp, sp, #88	; 0x58
   14588:	ldrh	r4, [sp, #120]	; 0x78
   1458c:	ldr	r8, [sp, #124]	; 0x7c
   14590:	cmp	r4, #4
   14594:	movcc	r4, #4
   14598:	cmp	r1, #0
   1459c:	and	r8, r8, #2
   145a0:	bne	145b0 <flatcc_builder_embed_buffer@@Base+0x50>
   145a4:	ldrh	r1, [r5, #132]	; 0x84
   145a8:	cmp	r1, #0
   145ac:	beq	145d0 <flatcc_builder_embed_buffer@@Base+0x70>
   145b0:	cmp	r1, r4
   145b4:	movcs	r4, r1
   145b8:	cmp	r0, #0
   145bc:	bne	145d0 <flatcc_builder_embed_buffer@@Base+0x70>
   145c0:	ldr	r9, [r5, #140]	; 0x8c
   145c4:	sub	r1, r1, #1
   145c8:	ands	r1, r1, r9
   145cc:	bne	146f8 <flatcc_builder_embed_buffer@@Base+0x198>
   145d0:	ldr	r1, [r5, #136]	; 0x88
   145d4:	cmp	r8, #0
   145d8:	sub	r4, r4, #1
   145dc:	movne	ip, #4
   145e0:	moveq	ip, #0
   145e4:	mov	r2, #0
   145e8:	cmp	r0, r2
   145ec:	str	r2, [sp, #16]
   145f0:	sub	r3, r1, r6
   145f4:	str	r2, [sp, #20]
   145f8:	sub	r3, r3, ip
   145fc:	and	r4, r4, r3
   14600:	add	r3, r6, r4
   14604:	str	r3, [sp, #12]
   14608:	bne	146c8 <flatcc_builder_embed_buffer@@Base+0x168>
   1460c:	mov	lr, #2
   14610:	mov	r3, #1
   14614:	mov	r2, r0
   14618:	cmp	r6, #0
   1461c:	beq	14648 <flatcc_builder_embed_buffer@@Base+0xe8>
   14620:	add	r2, r2, #1
   14624:	add	ip, sp, #88	; 0x58
   14628:	add	ip, ip, r2, lsl #3
   1462c:	add	r0, r0, r6
   14630:	mov	r2, r3
   14634:	str	r0, [sp, #16]
   14638:	str	r7, [ip, #-72]	; 0xffffffb8
   1463c:	str	r6, [ip, #-68]	; 0xffffffbc
   14640:	str	r3, [sp, #20]
   14644:	mov	r3, lr
   14648:	cmp	r4, #0
   1464c:	beq	14678 <flatcc_builder_embed_buffer@@Base+0x118>
   14650:	ldr	lr, [pc, #312]	; 14790 <flatcc_builder_embed_buffer@@Base+0x230>
   14654:	add	r2, r2, #1
   14658:	add	ip, sp, #88	; 0x58
   1465c:	add	ip, ip, r2, lsl #3
   14660:	add	r0, r0, r4
   14664:	mov	r2, r3
   14668:	str	r0, [sp, #16]
   1466c:	str	lr, [ip, #-72]	; 0xffffffb8
   14670:	str	r4, [ip, #-68]	; 0xffffffbc
   14674:	str	r3, [sp, #20]
   14678:	sub	r4, r1, r0
   1467c:	cmp	r1, r4
   14680:	ble	14750 <flatcc_builder_embed_buffer@@Base+0x1f0>
   14684:	mov	r3, r4
   14688:	add	r1, sp, #24
   1468c:	str	r0, [sp]
   14690:	ldr	r0, [r5, #36]	; 0x24
   14694:	ldr	r6, [r5, #44]	; 0x2c
   14698:	blx	r6
   1469c:	cmp	r0, #0
   146a0:	bne	1474c <flatcc_builder_embed_buffer@@Base+0x1ec>
   146a4:	mov	r0, r4
   146a8:	str	r4, [r5, #136]	; 0x88
   146ac:	add	sp, sp, #88	; 0x58
   146b0:	ldrd	r4, [sp]
   146b4:	ldrd	r6, [sp, #8]
   146b8:	ldrd	r8, [sp, #16]
   146bc:	ldr	sl, [sp, #24]
   146c0:	add	sp, sp, #28
   146c4:	pop	{pc}		; (ldr pc, [sp], #4)
   146c8:	mov	ip, #4
   146cc:	mov	r3, #1
   146d0:	add	r8, sp, #12
   146d4:	mov	r2, r3
   146d8:	mov	r0, ip
   146dc:	mov	lr, #3
   146e0:	str	ip, [sp, #16]
   146e4:	str	r3, [sp, #20]
   146e8:	mov	r3, #2
   146ec:	str	r8, [sp, #24]
   146f0:	str	ip, [sp, #28]
   146f4:	b	14618 <flatcc_builder_embed_buffer@@Base+0xb8>
   146f8:	ldr	r3, [pc, #144]	; 14790 <flatcc_builder_embed_buffer@@Base+0x230>
   146fc:	add	r0, r9, r1
   14700:	mov	r2, #1
   14704:	cmp	r9, r0
   14708:	str	r1, [sp, #16]
   1470c:	str	r0, [r5, #140]	; 0x8c
   14710:	strd	r2, [sp, #20]
   14714:	str	r1, [sp, #28]
   14718:	bgt	1476c <flatcc_builder_embed_buffer@@Base+0x20c>
   1471c:	mov	r3, r9
   14720:	str	r1, [sp]
   14724:	add	r1, sp, #24
   14728:	ldr	r0, [r5, #36]	; 0x24
   1472c:	ldr	sl, [r5, #44]	; 0x2c
   14730:	blx	sl
   14734:	cmp	r0, #0
   14738:	bne	1478c <flatcc_builder_embed_buffer@@Base+0x22c>
   1473c:	cmn	r9, #1
   14740:	beq	14788 <flatcc_builder_embed_buffer@@Base+0x228>
   14744:	ldr	r0, [r5, #152]	; 0x98
   14748:	b	145d0 <flatcc_builder_embed_buffer@@Base+0x70>
   1474c:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   14750:	movw	r1, #4884	; 0x1314
   14754:	movt	r1, #2
   14758:	ldr	r3, [pc, #52]	; 14794 <flatcc_builder_embed_buffer@@Base+0x234>
   1475c:	movw	r0, #5076	; 0x13d4
   14760:	movt	r0, #2
   14764:	movw	r2, #647	; 0x287
   14768:	bl	124b4 <__assert_fail@plt>
   1476c:	movw	r1, #4884	; 0x1314
   14770:	movt	r1, #2
   14774:	movw	r0, #5076	; 0x13d4
   14778:	movt	r0, #2
   1477c:	sub	r3, r3, #152	; 0x98
   14780:	movw	r2, #673	; 0x2a1
   14784:	bl	124b4 <__assert_fail@plt>
   14788:	bl	13c20 <flatcc_builder_default_alloc@@Base+0x174>
   1478c:	bl	13bf8 <flatcc_builder_default_alloc@@Base+0x14c>
   14790:	andeq	r0, r2, ip, ror #24
   14794:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>

00014798 <flatcc_builder_create_buffer@@Base>:
   14798:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1479c:	mov	ip, #0
   147a0:	mov	r5, r0
   147a4:	strd	r6, [sp, #8]
   147a8:	mov	r7, r3
   147ac:	strd	r8, [sp, #16]
   147b0:	mov	r9, r1
   147b4:	strd	sl, [sp, #24]
   147b8:	str	lr, [sp, #32]
   147bc:	sub	sp, sp, #100	; 0x64
   147c0:	ldrh	r4, [sp, #136]	; 0x88
   147c4:	str	ip, [sp, #20]
   147c8:	ldr	r6, [sp, #140]	; 0x8c
   147cc:	cmp	r4, #4
   147d0:	movcc	r4, #4
   147d4:	cmp	r2, #0
   147d8:	and	r8, r6, #1
   147dc:	bne	147ec <flatcc_builder_create_buffer@@Base+0x54>
   147e0:	ldrh	r2, [r0, #132]	; 0x84
   147e4:	cmp	r2, ip
   147e8:	beq	1480c <flatcc_builder_create_buffer@@Base+0x74>
   147ec:	cmp	r2, r4
   147f0:	movcs	r4, r2
   147f4:	cmp	r8, #0
   147f8:	bne	1480c <flatcc_builder_create_buffer@@Base+0x74>
   147fc:	ldr	sl, [r5, #140]	; 0x8c
   14800:	sub	r2, r2, #1
   14804:	ands	r1, r2, sl
   14808:	bne	149a0 <flatcc_builder_create_buffer@@Base+0x208>
   1480c:	ldrh	r3, [r5, #128]	; 0x80
   14810:	ldr	r0, [r5, #136]	; 0x88
   14814:	cmp	r3, r4
   14818:	strhcc	r4, [r5, #128]	; 0x80
   1481c:	cmp	r9, #0
   14820:	sub	r4, r4, #1
   14824:	ldrne	r3, [r9]
   14828:	ldreq	r1, [sp, #20]
   1482c:	movne	r1, r3
   14830:	strne	r3, [sp, #20]
   14834:	sub	r3, r0, #4
   14838:	cmp	r1, #0
   1483c:	movne	r1, #4
   14840:	tst	r6, #2
   14844:	movne	r2, #4
   14848:	moveq	r2, #0
   1484c:	sub	r3, r3, r1
   14850:	ands	r6, r6, #3
   14854:	sub	r3, r3, r2
   14858:	and	r4, r4, r3
   1485c:	bne	14978 <flatcc_builder_create_buffer@@Base+0x1e0>
   14860:	mov	r3, r6
   14864:	mov	r9, #3
   14868:	mov	lr, #2
   1486c:	mov	r2, #1
   14870:	mov	ip, #4
   14874:	add	fp, sp, #96	; 0x60
   14878:	add	r3, r3, #1
   1487c:	str	ip, [sp, #24]
   14880:	add	r3, fp, r3, lsl #3
   14884:	add	sl, sp, #12
   14888:	mov	fp, #4
   1488c:	cmp	r1, #0
   14890:	strd	sl, [r3, #-72]	; 0xffffffb8
   14894:	str	r2, [sp, #28]
   14898:	beq	148c8 <flatcc_builder_create_buffer@@Base+0x130>
   1489c:	add	r2, r2, #1
   148a0:	add	r3, sp, #96	; 0x60
   148a4:	add	r3, r3, r2, lsl #3
   148a8:	add	ip, ip, r1
   148ac:	add	sl, sp, #20
   148b0:	mov	r2, lr
   148b4:	str	ip, [sp, #24]
   148b8:	str	sl, [r3, #-72]	; 0xffffffb8
   148bc:	str	r1, [r3, #-68]	; 0xffffffbc
   148c0:	str	lr, [sp, #28]
   148c4:	mov	lr, r9
   148c8:	cmp	r4, #0
   148cc:	beq	148f8 <flatcc_builder_create_buffer@@Base+0x160>
   148d0:	ldr	r1, [pc, #372]	; 14a4c <flatcc_builder_create_buffer@@Base+0x2b4>
   148d4:	add	r2, r2, #1
   148d8:	add	r3, sp, #96	; 0x60
   148dc:	add	r3, r3, r2, lsl #3
   148e0:	add	ip, ip, r4
   148e4:	mov	r2, lr
   148e8:	str	ip, [sp, #24]
   148ec:	str	r1, [r3, #-72]	; 0xffffffb8
   148f0:	str	r4, [r3, #-68]	; 0xffffffbc
   148f4:	str	lr, [sp, #28]
   148f8:	sub	r4, r0, ip
   148fc:	cmp	r6, #0
   14900:	mov	r1, r4
   14904:	addne	r1, r4, #4
   14908:	cmp	r8, #0
   1490c:	sub	r7, r7, r1
   14910:	ldrne	r3, [r5, #144]	; 0x90
   14914:	str	r7, [sp, #12]
   14918:	ldreq	r3, [r5, #140]	; 0x8c
   1491c:	cmp	r0, r4
   14920:	sub	r3, r3, r1
   14924:	str	r3, [sp, #16]
   14928:	ble	149f0 <flatcc_builder_create_buffer@@Base+0x258>
   1492c:	mov	r3, r4
   14930:	add	r1, sp, #32
   14934:	str	ip, [sp]
   14938:	ldr	r0, [r5, #36]	; 0x24
   1493c:	ldr	r6, [r5, #44]	; 0x2c
   14940:	blx	r6
   14944:	cmp	r0, #0
   14948:	bne	14a0c <flatcc_builder_create_buffer@@Base+0x274>
   1494c:	cmp	r4, #0
   14950:	str	r4, [r5, #136]	; 0x88
   14954:	beq	14a10 <flatcc_builder_create_buffer@@Base+0x278>
   14958:	mov	r0, r4
   1495c:	add	sp, sp, #100	; 0x64
   14960:	ldrd	r4, [sp]
   14964:	ldrd	r6, [sp, #8]
   14968:	ldrd	r8, [sp, #16]
   1496c:	ldrd	sl, [sp, #24]
   14970:	add	sp, sp, #32
   14974:	pop	{pc}		; (ldr pc, [sp], #4)
   14978:	mov	ip, #4
   1497c:	add	r3, sp, #16
   14980:	mov	r9, ip
   14984:	mov	lr, #3
   14988:	mov	r2, #2
   1498c:	str	r3, [sp, #32]
   14990:	mov	r3, #1
   14994:	str	ip, [sp, #36]	; 0x24
   14998:	mov	ip, #8
   1499c:	b	14874 <flatcc_builder_create_buffer@@Base+0xdc>
   149a0:	ldr	r3, [pc, #164]	; 14a4c <flatcc_builder_create_buffer@@Base+0x2b4>
   149a4:	add	r0, sl, r1
   149a8:	mov	r2, #1
   149ac:	cmp	sl, r0
   149b0:	str	r1, [sp, #24]
   149b4:	str	r0, [r5, #140]	; 0x8c
   149b8:	strd	r2, [sp, #28]
   149bc:	str	r1, [sp, #36]	; 0x24
   149c0:	bgt	14a30 <flatcc_builder_create_buffer@@Base+0x298>
   149c4:	mov	r3, sl
   149c8:	str	r1, [sp]
   149cc:	add	r1, sp, #32
   149d0:	ldr	r0, [r5, #36]	; 0x24
   149d4:	ldr	fp, [r5, #44]	; 0x2c
   149d8:	blx	fp
   149dc:	cmp	r0, #0
   149e0:	bne	14a2c <flatcc_builder_create_buffer@@Base+0x294>
   149e4:	cmn	sl, #1
   149e8:	bne	1480c <flatcc_builder_create_buffer@@Base+0x74>
   149ec:	bl	13c20 <flatcc_builder_default_alloc@@Base+0x174>
   149f0:	movw	r1, #4884	; 0x1314
   149f4:	movt	r1, #2
   149f8:	ldr	r3, [pc, #80]	; 14a50 <flatcc_builder_create_buffer@@Base+0x2b8>
   149fc:	movw	r0, #5076	; 0x13d4
   14a00:	movt	r0, #2
   14a04:	movw	r2, #647	; 0x287
   14a08:	bl	124b4 <__assert_fail@plt>
   14a0c:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   14a10:	movw	r1, #4884	; 0x1314
   14a14:	movt	r1, #2
   14a18:	ldr	r3, [pc, #52]	; 14a54 <flatcc_builder_create_buffer@@Base+0x2bc>
   14a1c:	movw	r0, #5076	; 0x13d4
   14a20:	movt	r0, #2
   14a24:	mov	r2, #772	; 0x304
   14a28:	bl	124b4 <__assert_fail@plt>
   14a2c:	bl	13bf8 <flatcc_builder_default_alloc@@Base+0x14c>
   14a30:	movw	r1, #4884	; 0x1314
   14a34:	movt	r1, #2
   14a38:	movw	r0, #5076	; 0x13d4
   14a3c:	movt	r0, #2
   14a40:	sub	r3, r3, #152	; 0x98
   14a44:	movw	r2, #673	; 0x2a1
   14a48:	bl	124b4 <__assert_fail@plt>
   14a4c:	andeq	r0, r2, ip, ror #24
   14a50:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   14a54:	andeq	r0, r2, ip, asr #29

00014a58 <flatcc_builder_create_struct@@Base>:
   14a58:	cmp	r3, #0
   14a5c:	strd	r4, [sp, #-16]!
   14a60:	str	r6, [sp, #8]
   14a64:	str	lr, [sp, #12]
   14a68:	sub	sp, sp, #80	; 0x50
   14a6c:	beq	14b70 <flatcc_builder_create_struct@@Base+0x118>
   14a70:	mov	r4, r0
   14a74:	mov	r0, r2
   14a78:	ldrh	r2, [r4, #128]	; 0x80
   14a7c:	ldr	ip, [r4, #136]	; 0x88
   14a80:	cmp	r2, r3
   14a84:	mov	r2, #0
   14a88:	strhcc	r3, [r4, #128]	; 0x80
   14a8c:	sub	r5, ip, r0
   14a90:	sub	r3, r3, #1
   14a94:	cmp	r0, r2
   14a98:	and	r3, r3, r5
   14a9c:	str	r2, [sp, #8]
   14aa0:	str	r2, [sp, #12]
   14aa4:	bne	14b24 <flatcc_builder_create_struct@@Base+0xcc>
   14aa8:	cmp	r3, #0
   14aac:	movne	r1, r2
   14ab0:	movne	r0, r3
   14ab4:	movne	r2, #1
   14ab8:	beq	14b50 <flatcc_builder_create_struct@@Base+0xf8>
   14abc:	ldr	lr, [pc, #200]	; 14b8c <flatcc_builder_create_struct@@Base+0x134>
   14ac0:	add	r5, sp, #80	; 0x50
   14ac4:	add	r1, r1, #1
   14ac8:	add	r1, r5, r1, lsl #3
   14acc:	sub	r5, ip, r0
   14ad0:	str	r0, [sp, #8]
   14ad4:	str	r2, [sp, #12]
   14ad8:	str	lr, [r1, #-72]	; 0xffffffb8
   14adc:	str	r3, [r1, #-68]	; 0xffffffbc
   14ae0:	cmp	ip, r5
   14ae4:	ble	14b50 <flatcc_builder_create_struct@@Base+0xf8>
   14ae8:	mov	r3, r5
   14aec:	add	r1, sp, #16
   14af0:	str	r0, [sp]
   14af4:	ldr	r0, [r4, #36]	; 0x24
   14af8:	ldr	r6, [r4, #44]	; 0x2c
   14afc:	blx	r6
   14b00:	cmp	r0, #0
   14b04:	bne	14b6c <flatcc_builder_create_struct@@Base+0x114>
   14b08:	mov	r0, r5
   14b0c:	str	r5, [r4, #136]	; 0x88
   14b10:	add	sp, sp, #80	; 0x50
   14b14:	ldrd	r4, [sp]
   14b18:	ldr	r6, [sp, #8]
   14b1c:	add	sp, sp, #12
   14b20:	pop	{pc}		; (ldr pc, [sp], #4)
   14b24:	mov	r2, #1
   14b28:	cmp	r3, #0
   14b2c:	str	r0, [sp, #8]
   14b30:	str	r2, [sp, #12]
   14b34:	str	r1, [sp, #16]
   14b38:	movne	r1, r2
   14b3c:	movne	r2, #2
   14b40:	str	r0, [sp, #20]
   14b44:	addne	r0, r0, r3
   14b48:	beq	14ae0 <flatcc_builder_create_struct@@Base+0x88>
   14b4c:	b	14abc <flatcc_builder_create_struct@@Base+0x64>
   14b50:	movw	r1, #4884	; 0x1314
   14b54:	movt	r1, #2
   14b58:	ldr	r3, [pc, #48]	; 14b90 <flatcc_builder_create_struct@@Base+0x138>
   14b5c:	movw	r0, #5076	; 0x13d4
   14b60:	movt	r0, #2
   14b64:	movw	r2, #647	; 0x287
   14b68:	bl	124b4 <__assert_fail@plt>
   14b6c:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   14b70:	movw	r1, #4884	; 0x1314
   14b74:	movt	r1, #2
   14b78:	ldr	r3, [pc, #20]	; 14b94 <flatcc_builder_create_struct@@Base+0x13c>
   14b7c:	movw	r0, #5148	; 0x141c
   14b80:	movt	r0, #2
   14b84:	movw	r2, #783	; 0x30f
   14b88:	bl	124b4 <__assert_fail@plt>
   14b8c:	andeq	r0, r2, ip, ror #24
   14b90:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   14b94:	andeq	r0, r2, ip, ror #29

00014b98 <flatcc_builder_start_buffer@@Base>:
   14b98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14b9c:	mov	r5, r1
   14ba0:	mov	r4, r0
   14ba4:	ldr	r1, [r0, #156]	; 0x9c
   14ba8:	strd	r6, [sp, #8]
   14bac:	mov	r6, r3
   14bb0:	mov	r7, r2
   14bb4:	ldr	r3, [r0, #160]	; 0xa0
   14bb8:	strd	r8, [sp, #16]
   14bbc:	ldrh	r8, [r0, #128]	; 0x80
   14bc0:	add	r2, r1, #1
   14bc4:	strd	sl, [sp, #24]
   14bc8:	str	lr, [sp, #32]
   14bcc:	sub	sp, sp, #12
   14bd0:	cmp	r2, r3
   14bd4:	str	r2, [r0, #156]	; 0x9c
   14bd8:	ble	14d24 <flatcc_builder_start_buffer@@Base+0x18c>
   14bdc:	ldr	r3, [r0, #176]	; 0xb0
   14be0:	cmp	r3, #0
   14be4:	cmpgt	r2, r3
   14be8:	movgt	r3, #1
   14bec:	movle	r3, #0
   14bf0:	bgt	14d34 <flatcc_builder_start_buffer@@Base+0x19c>
   14bf4:	add	r1, r1, r1, lsl #3
   14bf8:	ldr	r0, [r0, #88]	; 0x58
   14bfc:	lsl	r9, r1, #2
   14c00:	add	r2, r9, #36	; 0x24
   14c04:	cmp	r2, r0
   14c08:	bls	14c2c <flatcc_builder_start_buffer@@Base+0x94>
   14c0c:	mov	ip, #4
   14c10:	add	r1, r4, #84	; 0x54
   14c14:	ldr	r0, [r4, #40]	; 0x28
   14c18:	str	ip, [sp]
   14c1c:	ldr	sl, [r4, #48]	; 0x30
   14c20:	blx	sl
   14c24:	cmp	r0, #0
   14c28:	bne	14d3c <flatcc_builder_start_buffer@@Base+0x1a4>
   14c2c:	ldr	r3, [r4, #84]	; 0x54
   14c30:	add	r3, r3, r9
   14c34:	cmp	r3, #0
   14c38:	str	r3, [r4, #32]
   14c3c:	beq	14d34 <flatcc_builder_start_buffer@@Base+0x19c>
   14c40:	ldr	r2, [r4, #88]	; 0x58
   14c44:	movw	r0, #36409	; 0x8e39
   14c48:	movt	r0, #14563	; 0x38e3
   14c4c:	ldr	r1, [r4, #176]	; 0xb0
   14c50:	umull	r0, r2, r0, r2
   14c54:	lsr	r2, r2, #3
   14c58:	cmp	r1, #0
   14c5c:	cmpgt	r2, r1
   14c60:	movgt	r2, r1
   14c64:	str	r2, [r4, #160]	; 0xa0
   14c68:	ldr	sl, [pc, #208]	; 14d40 <flatcc_builder_start_buffer@@Base+0x1a8>
   14c6c:	mov	r0, #0
   14c70:	mvn	lr, #3
   14c74:	cmp	r5, r0
   14c78:	ldr	r2, [r4, #20]
   14c7c:	ldr	ip, [r4, #28]
   14c80:	moveq	r5, sl
   14c84:	ldrh	r9, [r4, #130]	; 0x82
   14c88:	ldrh	fp, [r4, #132]	; 0x84
   14c8c:	ldr	r1, [r4, #148]	; 0x94
   14c90:	ldr	sl, [r4, #152]	; 0x98
   14c94:	str	r2, [r3, #8]
   14c98:	add	r2, r2, ip
   14c9c:	add	r2, r2, #7
   14ca0:	strh	r9, [r3, #12]
   14ca4:	bic	r2, r2, #7
   14ca8:	strh	r8, [r4, #130]	; 0x82
   14cac:	ldrh	r8, [r4, #164]	; 0xa4
   14cb0:	ldr	r9, [r4, #136]	; 0x88
   14cb4:	stm	r3, {ip, lr}
   14cb8:	mov	ip, #1
   14cbc:	str	r0, [r4, #20]
   14cc0:	str	r2, [r4, #28]
   14cc4:	add	r2, r1, ip
   14cc8:	strh	ip, [r4, #128]	; 0x80
   14ccc:	ldr	lr, [r4, #144]	; 0x90
   14cd0:	strh	fp, [r3, #34]	; 0x22
   14cd4:	strh	r7, [r4, #132]	; 0x84
   14cd8:	ldr	r7, [r4, #168]	; 0xa8
   14cdc:	strh	r8, [r3, #32]
   14ce0:	strh	r6, [r4, #164]	; 0xa4
   14ce4:	str	lr, [r3, #20]
   14ce8:	str	sl, [r3, #28]
   14cec:	str	r9, [r4, #144]	; 0x90
   14cf0:	str	r2, [r4, #148]	; 0x94
   14cf4:	str	r1, [r4, #152]	; 0x98
   14cf8:	str	r7, [r3, #16]
   14cfc:	ldr	r2, [r5]
   14d00:	str	r2, [r4, #168]	; 0xa8
   14d04:	strh	ip, [r3, #14]
   14d08:	add	sp, sp, #12
   14d0c:	ldrd	r4, [sp]
   14d10:	ldrd	r6, [sp, #8]
   14d14:	ldrd	r8, [sp, #16]
   14d18:	ldrd	sl, [sp, #24]
   14d1c:	add	sp, sp, #32
   14d20:	pop	{pc}		; (ldr pc, [sp], #4)
   14d24:	ldr	r3, [r0, #32]
   14d28:	add	r3, r3, #36	; 0x24
   14d2c:	str	r3, [r0, #32]
   14d30:	b	14c68 <flatcc_builder_start_buffer@@Base+0xd0>
   14d34:	mvn	r0, #0
   14d38:	b	14d08 <flatcc_builder_start_buffer@@Base+0x170>
   14d3c:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>
   14d40:	andeq	r0, r2, ip, ror #24

00014d44 <flatcc_builder_end_buffer@@Base>:
   14d44:	ldr	ip, [r0, #32]
   14d48:	strd	r4, [sp, #-16]!
   14d4c:	mov	r4, r0
   14d50:	ldrh	r2, [r0, #164]	; 0xa4
   14d54:	ldr	r0, [r0, #152]	; 0x98
   14d58:	ldrh	ip, [ip, #14]
   14d5c:	and	r2, r2, #2
   14d60:	str	r6, [sp, #8]
   14d64:	str	lr, [sp, #12]
   14d68:	sub	sp, sp, #8
   14d6c:	cmp	r0, #0
   14d70:	moveq	r0, r2
   14d74:	orrne	r0, r2, #1
   14d78:	cmp	ip, #1
   14d7c:	bne	14e64 <flatcc_builder_end_buffer@@Base+0x120>
   14d80:	ldrh	r2, [r4, #132]	; 0x84
   14d84:	mov	r3, r1
   14d88:	add	r1, r4, #168	; 0xa8
   14d8c:	ldrh	ip, [r4, #128]	; 0x80
   14d90:	cmp	r2, ip
   14d94:	movhi	ip, r2
   14d98:	strhhi	r2, [r4, #128]	; 0x80
   14d9c:	str	ip, [sp]
   14da0:	str	r0, [sp, #4]
   14da4:	mov	r0, r4
   14da8:	bl	14798 <flatcc_builder_create_buffer@@Base>
   14dac:	subs	r5, r0, #0
   14db0:	beq	14e4c <flatcc_builder_end_buffer@@Base+0x108>
   14db4:	mov	r1, #0
   14db8:	ldr	r0, [r4, #16]
   14dbc:	ldr	r3, [r4, #32]
   14dc0:	ldr	r2, [r4, #20]
   14dc4:	ldrh	lr, [r3, #32]
   14dc8:	ldr	ip, [r3, #16]
   14dcc:	ldr	r6, [r3, #20]
   14dd0:	ldr	r3, [r3, #28]
   14dd4:	str	r6, [r4, #144]	; 0x90
   14dd8:	strh	lr, [r4, #164]	; 0xa4
   14ddc:	str	r3, [r4, #152]	; 0x98
   14de0:	str	ip, [r4, #168]	; 0xa8
   14de4:	bl	12484 <memset@plt>
   14de8:	ldr	r3, [r4, #32]
   14dec:	ldr	r0, [r4, #60]	; 0x3c
   14df0:	ldr	r2, [r4, #64]	; 0x40
   14df4:	ldr	ip, [r3]
   14df8:	ldmib	r3, {r1, lr}
   14dfc:	add	r0, r0, ip
   14e00:	sub	r2, r2, ip
   14e04:	str	r0, [r4, #16]
   14e08:	cmp	r2, r1
   14e0c:	ldrh	r0, [r4, #128]	; 0x80
   14e10:	movcs	r2, r1
   14e14:	str	lr, [r4, #20]
   14e18:	str	ip, [r4, #28]
   14e1c:	ldrh	ip, [r4, #130]	; 0x82
   14e20:	str	r2, [r4, #24]
   14e24:	ldr	r2, [r4, #156]	; 0x9c
   14e28:	str	r1, [r3, #4]
   14e2c:	cmp	r0, ip
   14e30:	sub	r0, r3, #36	; 0x24
   14e34:	strhcc	ip, [r4, #128]	; 0x80
   14e38:	ldrh	r1, [r3, #12]
   14e3c:	sub	r3, r2, #1
   14e40:	str	r0, [r4, #32]
   14e44:	strh	r1, [r4, #130]	; 0x82
   14e48:	str	r3, [r4, #156]	; 0x9c
   14e4c:	mov	r0, r5
   14e50:	add	sp, sp, #8
   14e54:	ldrd	r4, [sp]
   14e58:	ldr	r6, [sp, #8]
   14e5c:	add	sp, sp, #12
   14e60:	pop	{pc}		; (ldr pc, [sp], #4)
   14e64:	movw	r1, #4884	; 0x1314
   14e68:	movt	r1, #2
   14e6c:	ldr	r3, [pc, #12]	; 14e80 <flatcc_builder_end_buffer@@Base+0x13c>
   14e70:	movw	r0, #5160	; 0x1428
   14e74:	movt	r0, #2
   14e78:	movw	r2, #838	; 0x346
   14e7c:	bl	124b4 <__assert_fail@plt>
   14e80:	andeq	r0, r2, ip, lsl #30

00014e84 <flatcc_builder_start_struct@@Base>:
   14e84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14e88:	mov	r5, r1
   14e8c:	mov	r4, r0
   14e90:	ldr	r1, [r0, #156]	; 0x9c
   14e94:	ldr	r3, [r0, #160]	; 0xa0
   14e98:	strd	r6, [sp, #8]
   14e9c:	mov	r6, r2
   14ea0:	str	r8, [sp, #16]
   14ea4:	add	r2, r1, #1
   14ea8:	str	lr, [sp, #20]
   14eac:	sub	sp, sp, #8
   14eb0:	cmp	r2, r3
   14eb4:	str	r2, [r0, #156]	; 0x9c
   14eb8:	ble	14fd8 <flatcc_builder_start_struct@@Base+0x154>
   14ebc:	ldr	r3, [r0, #176]	; 0xb0
   14ec0:	cmp	r3, #0
   14ec4:	cmpgt	r2, r3
   14ec8:	movgt	r3, #1
   14ecc:	movle	r3, #0
   14ed0:	bgt	15044 <flatcc_builder_start_struct@@Base+0x1c0>
   14ed4:	add	r1, r1, r1, lsl #3
   14ed8:	ldr	r0, [r0, #88]	; 0x58
   14edc:	lsl	r7, r1, #2
   14ee0:	add	r2, r7, #36	; 0x24
   14ee4:	cmp	r2, r0
   14ee8:	bls	14f0c <flatcc_builder_start_struct@@Base+0x88>
   14eec:	mov	ip, #4
   14ef0:	add	r1, r4, #84	; 0x54
   14ef4:	ldr	r0, [r4, #40]	; 0x28
   14ef8:	str	ip, [sp]
   14efc:	ldr	r8, [r4, #48]	; 0x30
   14f00:	blx	r8
   14f04:	cmp	r0, #0
   14f08:	bne	1504c <flatcc_builder_start_struct@@Base+0x1c8>
   14f0c:	ldr	r1, [r4, #84]	; 0x54
   14f10:	add	r1, r1, r7
   14f14:	cmp	r1, #0
   14f18:	str	r1, [r4, #32]
   14f1c:	beq	15044 <flatcc_builder_start_struct@@Base+0x1c0>
   14f20:	ldr	r3, [r4, #88]	; 0x58
   14f24:	movw	r0, #36409	; 0x8e39
   14f28:	movt	r0, #14563	; 0x38e3
   14f2c:	ldr	r2, [r4, #176]	; 0xb0
   14f30:	umull	r0, r3, r0, r3
   14f34:	lsr	r3, r3, #3
   14f38:	cmp	r2, #0
   14f3c:	cmpgt	r3, r2
   14f40:	movgt	r3, r2
   14f44:	str	r3, [r4, #160]	; 0xa0
   14f48:	ldr	r3, [r4, #20]
   14f4c:	mvn	lr, #3
   14f50:	ldr	ip, [r4, #28]
   14f54:	ldrh	r7, [r4, #130]	; 0x82
   14f58:	ldr	r2, [r4, #64]	; 0x40
   14f5c:	ldr	r0, [r4, #60]	; 0x3c
   14f60:	str	r3, [r1, #8]
   14f64:	add	r3, r3, ip
   14f68:	add	r3, r3, #7
   14f6c:	strh	r7, [r1, #12]
   14f70:	mov	r7, #0
   14f74:	bic	r3, r3, #7
   14f78:	strh	r6, [r4, #130]	; 0x82
   14f7c:	mvn	r6, #3
   14f80:	sub	r2, r2, r3
   14f84:	stm	r1, {ip, lr}
   14f88:	mov	ip, #2
   14f8c:	cmp	r2, lr
   14f90:	add	r0, r0, r3
   14f94:	str	r7, [r4, #20]
   14f98:	movhi	r2, lr
   14f9c:	str	r3, [r4, #28]
   14fa0:	strh	ip, [r1, #14]
   14fa4:	strls	r2, [r4, #24]
   14fa8:	strhi	lr, [r4, #24]
   14fac:	cmp	r5, r2
   14fb0:	str	r0, [r4, #16]
   14fb4:	str	r6, [r1, #4]
   14fb8:	str	r5, [r4, #20]
   14fbc:	bcs	14fe8 <flatcc_builder_start_struct@@Base+0x164>
   14fc0:	add	sp, sp, #8
   14fc4:	ldrd	r4, [sp]
   14fc8:	ldrd	r6, [sp, #8]
   14fcc:	ldr	r8, [sp, #16]
   14fd0:	add	sp, sp, #20
   14fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd8:	ldr	r1, [r0, #32]
   14fdc:	add	r1, r1, #36	; 0x24
   14fe0:	str	r1, [r0, #32]
   14fe4:	b	14f48 <flatcc_builder_start_struct@@Base+0xc4>
   14fe8:	mov	ip, #1
   14fec:	add	r1, r4, #60	; 0x3c
   14ff0:	ldr	r0, [r4, #40]	; 0x28
   14ff4:	add	r2, r5, ip
   14ff8:	add	r2, r2, r3
   14ffc:	mov	r3, ip
   15000:	str	ip, [sp]
   15004:	ldr	r5, [r4, #48]	; 0x30
   15008:	blx	r5
   1500c:	cmp	r0, #0
   15010:	bne	15044 <flatcc_builder_start_struct@@Base+0x1c0>
   15014:	ldr	r0, [r4, #28]
   15018:	ldr	r2, [r4, #32]
   1501c:	ldr	r3, [r4, #64]	; 0x40
   15020:	ldr	r1, [r4, #60]	; 0x3c
   15024:	sub	r3, r3, r0
   15028:	cmp	r3, r6
   1502c:	movhi	r3, r6
   15030:	add	r0, r1, r0
   15034:	str	r0, [r4, #16]
   15038:	str	r3, [r4, #24]
   1503c:	str	r6, [r2, #4]
   15040:	b	14fc0 <flatcc_builder_start_struct@@Base+0x13c>
   15044:	mov	r0, #0
   15048:	b	14fc0 <flatcc_builder_start_struct@@Base+0x13c>
   1504c:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>

00015050 <flatcc_builder_struct_edit@@Base>:
   15050:	ldr	r0, [r0, #16]
   15054:	bx	lr

00015058 <flatcc_builder_end_struct@@Base>:
   15058:	ldr	r3, [r0, #32]
   1505c:	strd	r4, [sp, #-16]!
   15060:	ldrh	r3, [r3, #14]
   15064:	str	r6, [sp, #8]
   15068:	str	lr, [sp, #12]
   1506c:	sub	sp, sp, #80	; 0x50
   15070:	cmp	r3, #2
   15074:	bne	1521c <flatcc_builder_end_struct@@Base+0x1c4>
   15078:	ldrh	r3, [r0, #130]	; 0x82
   1507c:	mov	r4, r0
   15080:	ldr	r1, [r0, #16]
   15084:	ldr	r0, [r0, #20]
   15088:	cmp	r3, #0
   1508c:	beq	15200 <flatcc_builder_end_struct@@Base+0x1a8>
   15090:	ldrh	r2, [r4, #128]	; 0x80
   15094:	ldr	ip, [r4, #136]	; 0x88
   15098:	cmp	r2, r3
   1509c:	mov	r2, #0
   150a0:	strhcc	r3, [r4, #128]	; 0x80
   150a4:	sub	r5, ip, r0
   150a8:	sub	r3, r3, #1
   150ac:	cmp	r0, r2
   150b0:	and	r3, r3, r5
   150b4:	str	r2, [sp, #8]
   150b8:	str	r2, [sp, #12]
   150bc:	bne	151b4 <flatcc_builder_end_struct@@Base+0x15c>
   150c0:	cmp	r3, #0
   150c4:	movne	r1, r2
   150c8:	movne	r0, r3
   150cc:	movne	r2, #1
   150d0:	beq	151e0 <flatcc_builder_end_struct@@Base+0x188>
   150d4:	ldr	lr, [pc, #348]	; 15238 <flatcc_builder_end_struct@@Base+0x1e0>
   150d8:	add	r5, sp, #80	; 0x50
   150dc:	add	r1, r1, #1
   150e0:	add	r1, r5, r1, lsl #3
   150e4:	sub	r5, ip, r0
   150e8:	str	r0, [sp, #8]
   150ec:	str	r2, [sp, #12]
   150f0:	str	lr, [r1, #-72]	; 0xffffffb8
   150f4:	str	r3, [r1, #-68]	; 0xffffffbc
   150f8:	cmp	ip, r5
   150fc:	ble	151e0 <flatcc_builder_end_struct@@Base+0x188>
   15100:	add	r1, sp, #16
   15104:	mov	r3, r5
   15108:	str	r0, [sp]
   1510c:	ldr	r0, [r4, #36]	; 0x24
   15110:	ldr	r6, [r4, #44]	; 0x2c
   15114:	blx	r6
   15118:	subs	r1, r0, #0
   1511c:	bne	151fc <flatcc_builder_end_struct@@Base+0x1a4>
   15120:	cmp	r5, #0
   15124:	str	r5, [r4, #136]	; 0x88
   15128:	beq	1519c <flatcc_builder_end_struct@@Base+0x144>
   1512c:	ldr	r0, [r4, #16]
   15130:	ldr	r2, [r4, #20]
   15134:	bl	12484 <memset@plt>
   15138:	ldr	r3, [r4, #32]
   1513c:	ldr	r0, [r4, #60]	; 0x3c
   15140:	ldr	r2, [r4, #64]	; 0x40
   15144:	ldr	ip, [r3]
   15148:	ldmib	r3, {r1, lr}
   1514c:	add	r0, r0, ip
   15150:	sub	r2, r2, ip
   15154:	str	r0, [r4, #16]
   15158:	cmp	r2, r1
   1515c:	ldrh	r0, [r4, #128]	; 0x80
   15160:	movcs	r2, r1
   15164:	str	lr, [r4, #20]
   15168:	str	ip, [r4, #28]
   1516c:	ldrh	ip, [r4, #130]	; 0x82
   15170:	str	r2, [r4, #24]
   15174:	ldr	r2, [r4, #156]	; 0x9c
   15178:	str	r1, [r3, #4]
   1517c:	cmp	r0, ip
   15180:	sub	r0, r3, #36	; 0x24
   15184:	strhcc	ip, [r4, #128]	; 0x80
   15188:	ldrh	r1, [r3, #12]
   1518c:	sub	r3, r2, #1
   15190:	str	r0, [r4, #32]
   15194:	strh	r1, [r4, #130]	; 0x82
   15198:	str	r3, [r4, #156]	; 0x9c
   1519c:	mov	r0, r5
   151a0:	add	sp, sp, #80	; 0x50
   151a4:	ldrd	r4, [sp]
   151a8:	ldr	r6, [sp, #8]
   151ac:	add	sp, sp, #12
   151b0:	pop	{pc}		; (ldr pc, [sp], #4)
   151b4:	mov	r2, #1
   151b8:	cmp	r3, #0
   151bc:	str	r0, [sp, #8]
   151c0:	str	r2, [sp, #12]
   151c4:	str	r1, [sp, #16]
   151c8:	movne	r1, r2
   151cc:	movne	r2, #2
   151d0:	str	r0, [sp, #20]
   151d4:	addne	r0, r0, r3
   151d8:	beq	150f8 <flatcc_builder_end_struct@@Base+0xa0>
   151dc:	b	150d4 <flatcc_builder_end_struct@@Base+0x7c>
   151e0:	movw	r1, #4884	; 0x1314
   151e4:	movt	r1, #2
   151e8:	ldr	r3, [pc, #76]	; 1523c <flatcc_builder_end_struct@@Base+0x1e4>
   151ec:	movw	r0, #5076	; 0x13d4
   151f0:	movt	r0, #2
   151f4:	movw	r2, #647	; 0x287
   151f8:	bl	124b4 <__assert_fail@plt>
   151fc:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   15200:	movw	r1, #4884	; 0x1314
   15204:	movt	r1, #2
   15208:	ldr	r3, [pc, #48]	; 15240 <flatcc_builder_end_struct@@Base+0x1e8>
   1520c:	movw	r0, #5148	; 0x141c
   15210:	movt	r0, #2
   15214:	movw	r2, #783	; 0x30f
   15218:	bl	124b4 <__assert_fail@plt>
   1521c:	movw	r1, #4884	; 0x1314
   15220:	movt	r1, #2
   15224:	ldr	r3, [pc, #24]	; 15244 <flatcc_builder_end_struct@@Base+0x1ec>
   15228:	movw	r0, #5204	; 0x1454
   1522c:	movt	r0, #2
   15230:	mov	r2, #872	; 0x368
   15234:	bl	124b4 <__assert_fail@plt>
   15238:	andeq	r0, r2, ip, ror #24
   1523c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   15240:	andeq	r0, r2, ip, ror #29
   15244:	andeq	r0, r2, r8, lsr #30

00015248 <flatcc_builder_extend_vector@@Base>:
   15248:	ldr	ip, [r0, #32]
   1524c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15250:	mov	r4, r0
   15254:	ldr	r3, [ip, #20]
   15258:	ldr	r0, [ip, #24]
   1525c:	strd	r6, [sp, #8]
   15260:	str	lr, [sp, #16]
   15264:	sub	sp, sp, #12
   15268:	adds	r3, r1, r3
   1526c:	movcs	r5, #1
   15270:	movcc	r5, #0
   15274:	cmp	r0, r3
   15278:	orrcc	r5, r5, #1
   1527c:	cmp	r5, #0
   15280:	bne	1532c <flatcc_builder_extend_vector@@Base+0xe4>
   15284:	ldr	r2, [ip, #16]
   15288:	ldr	r6, [r4, #20]
   1528c:	str	r3, [ip, #20]
   15290:	ldr	r3, [r4, #24]
   15294:	mla	r2, r2, r1, r6
   15298:	cmp	r2, r3
   1529c:	str	r2, [r4, #20]
   152a0:	bcs	152c0 <flatcc_builder_extend_vector@@Base+0x78>
   152a4:	ldr	r0, [r4, #16]
   152a8:	add	r0, r0, r6
   152ac:	add	sp, sp, #12
   152b0:	ldrd	r4, [sp]
   152b4:	ldrd	r6, [sp, #8]
   152b8:	add	sp, sp, #16
   152bc:	pop	{pc}		; (ldr pc, [sp], #4)
   152c0:	ldr	ip, [r4, #28]
   152c4:	mov	r0, #1
   152c8:	add	r1, r4, #60	; 0x3c
   152cc:	mov	r3, r0
   152d0:	str	r0, [sp]
   152d4:	ldr	r7, [r4, #48]	; 0x30
   152d8:	add	ip, ip, r0
   152dc:	ldr	r0, [r4, #40]	; 0x28
   152e0:	add	r2, ip, r2
   152e4:	blx	r7
   152e8:	cmp	r0, #0
   152ec:	bne	15324 <flatcc_builder_extend_vector@@Base+0xdc>
   152f0:	ldr	r2, [r4, #28]
   152f4:	ldr	r0, [r4, #60]	; 0x3c
   152f8:	ldr	r3, [r4, #64]	; 0x40
   152fc:	add	r0, r0, r2
   15300:	sub	r3, r3, r2
   15304:	mvn	r2, #3
   15308:	str	r0, [r4, #16]
   1530c:	cmn	r3, #4
   15310:	mvnhi	r3, #3
   15314:	str	r3, [r4, #24]
   15318:	ldr	r3, [r4, #32]
   1531c:	str	r2, [r3, #4]
   15320:	b	152a8 <flatcc_builder_extend_vector@@Base+0x60>
   15324:	mov	r0, r5
   15328:	b	152ac <flatcc_builder_extend_vector@@Base+0x64>
   1532c:	bl	13c70 <flatcc_builder_default_alloc@@Base+0x1c4>

00015330 <flatcc_builder_vector_push@@Base>:
   15330:	ldr	r3, [r0, #32]
   15334:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15338:	ldrh	r2, [r3, #14]
   1533c:	strd	r6, [sp, #8]
   15340:	str	r8, [sp, #16]
   15344:	str	lr, [sp, #20]
   15348:	sub	sp, sp, #8
   1534c:	cmp	r2, #4
   15350:	bne	15454 <flatcc_builder_vector_push@@Base+0x124>
   15354:	mov	r6, r1
   15358:	ldr	r2, [r3, #20]
   1535c:	ldr	r1, [r3, #24]
   15360:	cmp	r2, r1
   15364:	bhi	15438 <flatcc_builder_vector_push@@Base+0x108>
   15368:	add	r2, r2, #1
   1536c:	ldr	r5, [r3, #16]
   15370:	mov	r4, r0
   15374:	ldr	r7, [r0, #20]
   15378:	str	r2, [r3, #20]
   1537c:	ldr	r3, [r0, #24]
   15380:	add	ip, r5, r7
   15384:	cmp	ip, r3
   15388:	str	ip, [r0, #20]
   1538c:	bcs	153cc <flatcc_builder_vector_push@@Base+0x9c>
   15390:	ldr	r3, [r0, #16]
   15394:	adds	r3, r3, r7
   15398:	beq	153b0 <flatcc_builder_vector_push@@Base+0x80>
   1539c:	mov	r0, r3
   153a0:	mov	r2, r5
   153a4:	mov	r1, r6
   153a8:	bl	1240c <memcpy@plt>
   153ac:	mov	r3, r0
   153b0:	mov	r0, r3
   153b4:	add	sp, sp, #8
   153b8:	ldrd	r4, [sp]
   153bc:	ldrd	r6, [sp, #8]
   153c0:	ldr	r8, [sp, #16]
   153c4:	add	sp, sp, #20
   153c8:	pop	{pc}		; (ldr pc, [sp], #4)
   153cc:	ldr	r2, [r4, #28]
   153d0:	mov	r0, #1
   153d4:	add	r1, r4, #60	; 0x3c
   153d8:	mov	r3, r0
   153dc:	str	r0, [sp]
   153e0:	ldr	r8, [r4, #48]	; 0x30
   153e4:	add	r2, r2, r0
   153e8:	ldr	r0, [r4, #40]	; 0x28
   153ec:	add	r2, r2, ip
   153f0:	blx	r8
   153f4:	cmp	r0, #0
   153f8:	bne	15430 <flatcc_builder_vector_push@@Base+0x100>
   153fc:	ldr	r1, [r4, #28]
   15400:	ldr	r3, [r4, #60]	; 0x3c
   15404:	ldr	r2, [r4, #64]	; 0x40
   15408:	add	r3, r3, r1
   1540c:	sub	r2, r2, r1
   15410:	mvn	r1, #3
   15414:	str	r3, [r4, #16]
   15418:	cmn	r2, #4
   1541c:	mvnhi	r2, #3
   15420:	str	r2, [r4, #24]
   15424:	ldr	r2, [r4, #32]
   15428:	str	r1, [r2, #4]
   1542c:	b	15394 <flatcc_builder_vector_push@@Base+0x64>
   15430:	mov	r3, #0
   15434:	b	153b0 <flatcc_builder_vector_push@@Base+0x80>
   15438:	movw	r1, #4884	; 0x1314
   1543c:	movt	r1, #2
   15440:	ldr	r3, [pc, #40]	; 15470 <flatcc_builder_vector_push@@Base+0x140>
   15444:	movw	r0, #5292	; 0x14ac
   15448:	movt	r0, #2
   1544c:	mov	r2, #908	; 0x38c
   15450:	bl	124b4 <__assert_fail@plt>
   15454:	movw	r1, #4884	; 0x1314
   15458:	movt	r1, #2
   1545c:	ldr	r3, [pc, #12]	; 15470 <flatcc_builder_vector_push@@Base+0x140>
   15460:	movw	r0, #5248	; 0x1480
   15464:	movt	r0, #2
   15468:	movw	r2, #907	; 0x38b
   1546c:	bl	124b4 <__assert_fail@plt>
   15470:	andeq	r0, r2, r4, asr #30

00015474 <flatcc_builder_append_vector@@Base>:
   15474:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15478:	mov	r5, r0
   1547c:	ldr	r0, [r0, #32]
   15480:	ldrh	r3, [r0, #14]
   15484:	strd	r6, [sp, #8]
   15488:	strd	r8, [sp, #16]
   1548c:	str	lr, [sp, #24]
   15490:	sub	sp, sp, #12
   15494:	cmp	r3, #4
   15498:	bne	15598 <flatcc_builder_append_vector@@Base+0x124>
   1549c:	mov	r6, r1
   154a0:	ldr	r1, [r0, #20]
   154a4:	ldr	r4, [r0, #24]
   154a8:	adds	r1, r2, r1
   154ac:	movcs	r3, #1
   154b0:	movcc	r3, #0
   154b4:	cmp	r4, r1
   154b8:	movcs	r4, r3
   154bc:	orrcc	r4, r3, #1
   154c0:	cmp	r4, #0
   154c4:	bne	15594 <flatcc_builder_append_vector@@Base+0x120>
   154c8:	ldr	r7, [r0, #16]
   154cc:	ldr	r8, [r5, #20]
   154d0:	ldr	r3, [r5, #24]
   154d4:	mul	r7, r7, r2
   154d8:	str	r1, [r0, #20]
   154dc:	add	ip, r7, r8
   154e0:	cmp	ip, r3
   154e4:	str	ip, [r5, #20]
   154e8:	bcs	15528 <flatcc_builder_append_vector@@Base+0xb4>
   154ec:	ldr	r3, [r5, #16]
   154f0:	adds	r3, r3, r8
   154f4:	beq	1550c <flatcc_builder_append_vector@@Base+0x98>
   154f8:	mov	r0, r3
   154fc:	mov	r2, r7
   15500:	mov	r1, r6
   15504:	bl	1240c <memcpy@plt>
   15508:	mov	r3, r0
   1550c:	mov	r0, r3
   15510:	add	sp, sp, #12
   15514:	ldrd	r4, [sp]
   15518:	ldrd	r6, [sp, #8]
   1551c:	ldrd	r8, [sp, #16]
   15520:	add	sp, sp, #24
   15524:	pop	{pc}		; (ldr pc, [sp], #4)
   15528:	ldr	r2, [r5, #28]
   1552c:	mov	r0, #1
   15530:	add	r1, r5, #60	; 0x3c
   15534:	mov	r3, r0
   15538:	str	r0, [sp]
   1553c:	ldr	r9, [r5, #48]	; 0x30
   15540:	add	r2, r2, r0
   15544:	ldr	r0, [r5, #40]	; 0x28
   15548:	add	r2, r2, ip
   1554c:	blx	r9
   15550:	cmp	r0, #0
   15554:	bne	1558c <flatcc_builder_append_vector@@Base+0x118>
   15558:	ldr	r1, [r5, #28]
   1555c:	ldr	r3, [r5, #60]	; 0x3c
   15560:	ldr	r2, [r5, #64]	; 0x40
   15564:	add	r3, r3, r1
   15568:	sub	r2, r2, r1
   1556c:	mvn	r1, #3
   15570:	str	r3, [r5, #16]
   15574:	cmn	r2, #4
   15578:	mvnhi	r2, #3
   1557c:	str	r2, [r5, #24]
   15580:	ldr	r2, [r5, #32]
   15584:	str	r1, [r2, #4]
   15588:	b	154f0 <flatcc_builder_append_vector@@Base+0x7c>
   1558c:	mov	r3, r4
   15590:	b	1550c <flatcc_builder_append_vector@@Base+0x98>
   15594:	bl	13c70 <flatcc_builder_default_alloc@@Base+0x1c4>
   15598:	movw	r1, #4884	; 0x1314
   1559c:	movt	r1, #2
   155a0:	ldr	r3, [pc, #12]	; 155b4 <flatcc_builder_append_vector@@Base+0x140>
   155a4:	movw	r0, #5248	; 0x1480
   155a8:	movt	r0, #2
   155ac:	movw	r2, #915	; 0x393
   155b0:	bl	124b4 <__assert_fail@plt>
   155b4:	andeq	r0, r2, r0, ror #30

000155b8 <flatcc_builder_extend_offset_vector@@Base>:
   155b8:	ldr	ip, [r0, #32]
   155bc:	strd	r4, [sp, #-20]!	; 0xffffffec
   155c0:	mov	r4, r0
   155c4:	ldr	r3, [ip, #20]
   155c8:	strd	r6, [sp, #8]
   155cc:	str	lr, [sp, #16]
   155d0:	sub	sp, sp, #12
   155d4:	adds	r3, r1, r3
   155d8:	movcs	r2, #1
   155dc:	movcc	r2, #0
   155e0:	cmn	r3, #-1073741823	; 0xc0000001
   155e4:	movls	r0, #0
   155e8:	movhi	r0, #1
   155ec:	orrs	r5, r2, r0
   155f0:	bne	15698 <flatcc_builder_extend_offset_vector@@Base+0xe0>
   155f4:	ldr	r6, [r4, #20]
   155f8:	str	r3, [ip, #20]
   155fc:	ldr	r3, [r4, #24]
   15600:	add	r2, r6, r1, lsl #2
   15604:	cmp	r2, r3
   15608:	str	r2, [r4, #20]
   1560c:	bcs	1562c <flatcc_builder_extend_offset_vector@@Base+0x74>
   15610:	ldr	r0, [r4, #16]
   15614:	add	r0, r0, r6
   15618:	add	sp, sp, #12
   1561c:	ldrd	r4, [sp]
   15620:	ldrd	r6, [sp, #8]
   15624:	add	sp, sp, #16
   15628:	pop	{pc}		; (ldr pc, [sp], #4)
   1562c:	ldr	ip, [r4, #28]
   15630:	mov	r0, #1
   15634:	add	r1, r4, #60	; 0x3c
   15638:	mov	r3, r0
   1563c:	str	r0, [sp]
   15640:	ldr	r7, [r4, #48]	; 0x30
   15644:	add	ip, ip, r0
   15648:	ldr	r0, [r4, #40]	; 0x28
   1564c:	add	r2, ip, r2
   15650:	blx	r7
   15654:	cmp	r0, #0
   15658:	bne	15690 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   1565c:	ldr	r2, [r4, #28]
   15660:	ldr	r0, [r4, #60]	; 0x3c
   15664:	ldr	r3, [r4, #64]	; 0x40
   15668:	add	r0, r0, r2
   1566c:	sub	r3, r3, r2
   15670:	mvn	r2, #3
   15674:	str	r0, [r4, #16]
   15678:	cmn	r3, #4
   1567c:	mvnhi	r3, #3
   15680:	str	r3, [r4, #24]
   15684:	ldr	r3, [r4, #32]
   15688:	str	r2, [r3, #4]
   1568c:	b	15614 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   15690:	mov	r0, r5
   15694:	b	15618 <flatcc_builder_extend_offset_vector@@Base+0x60>
   15698:	bl	13c70 <flatcc_builder_default_alloc@@Base+0x1c4>

0001569c <flatcc_builder_offset_vector_push@@Base>:
   1569c:	ldr	r2, [r0, #32]
   156a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   156a4:	ldrh	r3, [r2, #14]
   156a8:	strd	r6, [sp, #8]
   156ac:	str	lr, [sp, #16]
   156b0:	sub	sp, sp, #12
   156b4:	cmp	r3, #5
   156b8:	bne	1577c <flatcc_builder_offset_vector_push@@Base+0xe0>
   156bc:	ldr	r3, [r2, #20]
   156c0:	cmn	r3, #-1073741823	; 0xc0000001
   156c4:	beq	15774 <flatcc_builder_offset_vector_push@@Base+0xd8>
   156c8:	ldr	r5, [r0, #20]
   156cc:	mov	r6, r1
   156d0:	add	r3, r3, #1
   156d4:	mov	r4, r0
   156d8:	ldr	r1, [r0, #24]
   156dc:	str	r3, [r2, #20]
   156e0:	add	r3, r5, #4
   156e4:	cmp	r3, r1
   156e8:	str	r3, [r0, #20]
   156ec:	bcs	15710 <flatcc_builder_offset_vector_push@@Base+0x74>
   156f0:	ldr	r3, [r0, #16]
   156f4:	adds	r0, r3, r5
   156f8:	strne	r6, [r3, r5]
   156fc:	add	sp, sp, #12
   15700:	ldrd	r4, [sp]
   15704:	ldrd	r6, [sp, #8]
   15708:	add	sp, sp, #16
   1570c:	pop	{pc}		; (ldr pc, [sp], #4)
   15710:	ldr	r2, [r4, #28]
   15714:	mov	r0, #1
   15718:	add	r1, r4, #60	; 0x3c
   1571c:	mov	r3, r0
   15720:	str	r0, [sp]
   15724:	ldr	r0, [r4, #40]	; 0x28
   15728:	add	r2, r5, r2
   1572c:	ldr	r7, [r4, #48]	; 0x30
   15730:	add	r2, r2, #5
   15734:	blx	r7
   15738:	cmp	r0, #0
   1573c:	bne	15774 <flatcc_builder_offset_vector_push@@Base+0xd8>
   15740:	ldr	r1, [r4, #28]
   15744:	ldr	r3, [r4, #60]	; 0x3c
   15748:	ldr	r2, [r4, #64]	; 0x40
   1574c:	add	r3, r3, r1
   15750:	sub	r2, r2, r1
   15754:	mvn	r1, #3
   15758:	str	r3, [r4, #16]
   1575c:	cmn	r2, #4
   15760:	mvnhi	r2, #3
   15764:	str	r2, [r4, #24]
   15768:	ldr	r2, [r4, #32]
   1576c:	str	r1, [r2, #4]
   15770:	b	156f4 <flatcc_builder_offset_vector_push@@Base+0x58>
   15774:	mov	r0, #0
   15778:	b	156fc <flatcc_builder_offset_vector_push@@Base+0x60>
   1577c:	movw	r1, #4884	; 0x1314
   15780:	movt	r1, #2
   15784:	ldr	r3, [pc, #12]	; 15798 <flatcc_builder_offset_vector_push@@Base+0xfc>
   15788:	movw	r0, #5356	; 0x14ec
   1578c:	movt	r0, #2
   15790:	movw	r2, #934	; 0x3a6
   15794:	bl	124b4 <__assert_fail@plt>
   15798:	andeq	r0, r2, r0, lsl #31

0001579c <flatcc_builder_append_offset_vector@@Base>:
   1579c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   157a0:	mov	r5, r0
   157a4:	ldr	r0, [r0, #32]
   157a8:	ldrh	r3, [r0, #14]
   157ac:	strd	r6, [sp, #8]
   157b0:	strd	r8, [sp, #16]
   157b4:	str	lr, [sp, #24]
   157b8:	sub	sp, sp, #12
   157bc:	cmp	r3, #5
   157c0:	bne	158b8 <flatcc_builder_append_offset_vector@@Base+0x11c>
   157c4:	ldr	r3, [r0, #20]
   157c8:	mov	r7, r1
   157cc:	adds	r1, r2, r3
   157d0:	movcs	r4, #1
   157d4:	movcc	r4, #0
   157d8:	cmn	r1, #-1073741823	; 0xc0000001
   157dc:	movls	r3, #0
   157e0:	movhi	r3, #1
   157e4:	orrs	r4, r4, r3
   157e8:	bne	158b4 <flatcc_builder_append_offset_vector@@Base+0x118>
   157ec:	ldr	r8, [r5, #20]
   157f0:	lsl	r6, r2, #2
   157f4:	ldr	r3, [r5, #24]
   157f8:	str	r1, [r0, #20]
   157fc:	add	ip, r6, r8
   15800:	cmp	ip, r3
   15804:	str	ip, [r5, #20]
   15808:	bcs	15848 <flatcc_builder_append_offset_vector@@Base+0xac>
   1580c:	ldr	r3, [r5, #16]
   15810:	adds	r3, r3, r8
   15814:	beq	1582c <flatcc_builder_append_offset_vector@@Base+0x90>
   15818:	mov	r0, r3
   1581c:	mov	r2, r6
   15820:	mov	r1, r7
   15824:	bl	1240c <memcpy@plt>
   15828:	mov	r3, r0
   1582c:	mov	r0, r3
   15830:	add	sp, sp, #12
   15834:	ldrd	r4, [sp]
   15838:	ldrd	r6, [sp, #8]
   1583c:	ldrd	r8, [sp, #16]
   15840:	add	sp, sp, #24
   15844:	pop	{pc}		; (ldr pc, [sp], #4)
   15848:	ldr	r2, [r5, #28]
   1584c:	mov	r0, #1
   15850:	add	r1, r5, #60	; 0x3c
   15854:	mov	r3, r0
   15858:	str	r0, [sp]
   1585c:	ldr	r9, [r5, #48]	; 0x30
   15860:	add	r2, r2, r0
   15864:	ldr	r0, [r5, #40]	; 0x28
   15868:	add	r2, r2, ip
   1586c:	blx	r9
   15870:	cmp	r0, #0
   15874:	bne	158ac <flatcc_builder_append_offset_vector@@Base+0x110>
   15878:	ldr	r1, [r5, #28]
   1587c:	ldr	r3, [r5, #60]	; 0x3c
   15880:	ldr	r2, [r5, #64]	; 0x40
   15884:	add	r3, r3, r1
   15888:	sub	r2, r2, r1
   1588c:	mvn	r1, #3
   15890:	str	r3, [r5, #16]
   15894:	cmn	r2, #4
   15898:	mvnhi	r2, #3
   1589c:	str	r2, [r5, #24]
   158a0:	ldr	r2, [r5, #32]
   158a4:	str	r1, [r2, #4]
   158a8:	b	15810 <flatcc_builder_append_offset_vector@@Base+0x74>
   158ac:	mov	r3, r4
   158b0:	b	1582c <flatcc_builder_append_offset_vector@@Base+0x90>
   158b4:	bl	13c70 <flatcc_builder_default_alloc@@Base+0x1c4>
   158b8:	movw	r1, #4884	; 0x1314
   158bc:	movt	r1, #2
   158c0:	ldr	r3, [pc, #12]	; 158d4 <flatcc_builder_append_offset_vector@@Base+0x138>
   158c4:	movw	r0, #5356	; 0x14ec
   158c8:	movt	r0, #2
   158cc:	mov	r2, #948	; 0x3b4
   158d0:	bl	124b4 <__assert_fail@plt>
   158d4:	andeq	r0, r2, r4, lsr #31

000158d8 <flatcc_builder_extend_string@@Base>:
   158d8:	ldr	r2, [r0, #32]
   158dc:	strd	r4, [sp, #-16]!
   158e0:	ldrh	r3, [r2, #14]
   158e4:	str	r6, [sp, #8]
   158e8:	str	lr, [sp, #12]
   158ec:	sub	sp, sp, #8
   158f0:	cmp	r3, #6
   158f4:	bne	159b0 <flatcc_builder_extend_string@@Base+0xd8>
   158f8:	ldr	r3, [r2, #20]
   158fc:	adds	r3, r1, r3
   15900:	bcs	159ac <flatcc_builder_extend_string@@Base+0xd4>
   15904:	ldr	r5, [r0, #20]
   15908:	mov	r4, r0
   1590c:	str	r3, [r2, #20]
   15910:	ldr	r3, [r0, #24]
   15914:	add	r2, r1, r5
   15918:	cmp	r2, r3
   1591c:	str	r2, [r0, #20]
   15920:	bcs	15940 <flatcc_builder_extend_string@@Base+0x68>
   15924:	ldr	r0, [r0, #16]
   15928:	add	r0, r0, r5
   1592c:	add	sp, sp, #8
   15930:	ldrd	r4, [sp]
   15934:	ldr	r6, [sp, #8]
   15938:	add	sp, sp, #12
   1593c:	pop	{pc}		; (ldr pc, [sp], #4)
   15940:	ldr	ip, [r4, #28]
   15944:	mov	r0, #1
   15948:	add	r1, r4, #60	; 0x3c
   1594c:	mov	r3, r0
   15950:	str	r0, [sp]
   15954:	ldr	r6, [r4, #48]	; 0x30
   15958:	add	ip, ip, r0
   1595c:	ldr	r0, [r4, #40]	; 0x28
   15960:	add	r2, ip, r2
   15964:	blx	r6
   15968:	cmp	r0, #0
   1596c:	bne	159a4 <flatcc_builder_extend_string@@Base+0xcc>
   15970:	ldr	r2, [r4, #28]
   15974:	ldr	r0, [r4, #60]	; 0x3c
   15978:	ldr	r3, [r4, #64]	; 0x40
   1597c:	add	r0, r0, r2
   15980:	sub	r3, r3, r2
   15984:	mvn	r2, #3
   15988:	str	r0, [r4, #16]
   1598c:	cmn	r3, #4
   15990:	mvnhi	r3, #3
   15994:	str	r3, [r4, #24]
   15998:	ldr	r3, [r4, #32]
   1599c:	str	r2, [r3, #4]
   159a0:	b	15928 <flatcc_builder_extend_string@@Base+0x50>
   159a4:	mov	r0, #0
   159a8:	b	1592c <flatcc_builder_extend_string@@Base+0x54>
   159ac:	bl	13c70 <flatcc_builder_default_alloc@@Base+0x1c4>
   159b0:	movw	r1, #4884	; 0x1314
   159b4:	movt	r1, #2
   159b8:	ldr	r3, [pc, #12]	; 159cc <flatcc_builder_extend_string@@Base+0xf4>
   159bc:	movw	r0, #5012	; 0x1394
   159c0:	movt	r0, #2
   159c4:	movw	r2, #957	; 0x3bd
   159c8:	bl	124b4 <__assert_fail@plt>
   159cc:	andeq	r0, r2, r8, asr #31

000159d0 <flatcc_builder_append_string@@Base>:
   159d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   159d4:	strd	r6, [sp, #8]
   159d8:	mov	r6, r1
   159dc:	ldr	r1, [r0, #32]
   159e0:	str	r8, [sp, #16]
   159e4:	str	lr, [sp, #20]
   159e8:	sub	sp, sp, #8
   159ec:	ldrh	r3, [r1, #14]
   159f0:	cmp	r3, #6
   159f4:	bne	15ad4 <flatcc_builder_append_string@@Base+0x104>
   159f8:	ldr	r3, [r1, #20]
   159fc:	mov	r5, r2
   15a00:	adds	r3, r2, r3
   15a04:	bcs	15ad0 <flatcc_builder_append_string@@Base+0x100>
   15a08:	ldr	r7, [r0, #20]
   15a0c:	mov	r4, r0
   15a10:	str	r3, [r1, #20]
   15a14:	ldr	r3, [r0, #24]
   15a18:	add	ip, r2, r7
   15a1c:	cmp	ip, r3
   15a20:	str	ip, [r0, #20]
   15a24:	bcs	15a64 <flatcc_builder_append_string@@Base+0x94>
   15a28:	ldr	r3, [r0, #16]
   15a2c:	adds	r3, r3, r7
   15a30:	beq	15a48 <flatcc_builder_append_string@@Base+0x78>
   15a34:	mov	r0, r3
   15a38:	mov	r2, r5
   15a3c:	mov	r1, r6
   15a40:	bl	1240c <memcpy@plt>
   15a44:	mov	r3, r0
   15a48:	mov	r0, r3
   15a4c:	add	sp, sp, #8
   15a50:	ldrd	r4, [sp]
   15a54:	ldrd	r6, [sp, #8]
   15a58:	ldr	r8, [sp, #16]
   15a5c:	add	sp, sp, #20
   15a60:	pop	{pc}		; (ldr pc, [sp], #4)
   15a64:	ldr	r2, [r4, #28]
   15a68:	mov	r0, #1
   15a6c:	add	r1, r4, #60	; 0x3c
   15a70:	mov	r3, r0
   15a74:	str	r0, [sp]
   15a78:	ldr	r8, [r4, #48]	; 0x30
   15a7c:	add	r2, r2, r0
   15a80:	ldr	r0, [r4, #40]	; 0x28
   15a84:	add	r2, r2, ip
   15a88:	blx	r8
   15a8c:	cmp	r0, #0
   15a90:	bne	15ac8 <flatcc_builder_append_string@@Base+0xf8>
   15a94:	ldr	r1, [r4, #28]
   15a98:	ldr	r3, [r4, #60]	; 0x3c
   15a9c:	ldr	r2, [r4, #64]	; 0x40
   15aa0:	add	r3, r3, r1
   15aa4:	sub	r2, r2, r1
   15aa8:	mvn	r1, #3
   15aac:	str	r3, [r4, #16]
   15ab0:	cmn	r2, #4
   15ab4:	mvnhi	r2, #3
   15ab8:	str	r2, [r4, #24]
   15abc:	ldr	r2, [r4, #32]
   15ac0:	str	r1, [r2, #4]
   15ac4:	b	15a2c <flatcc_builder_append_string@@Base+0x5c>
   15ac8:	mov	r3, #0
   15acc:	b	15a48 <flatcc_builder_append_string@@Base+0x78>
   15ad0:	bl	13c70 <flatcc_builder_default_alloc@@Base+0x1c4>
   15ad4:	bl	13cc0 <flatcc_builder_default_alloc@@Base+0x214>

00015ad8 <flatcc_builder_append_string_str@@Base>:
   15ad8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15adc:	mov	r4, r0
   15ae0:	mov	r0, r1
   15ae4:	strd	r6, [sp, #8]
   15ae8:	mov	r6, r1
   15aec:	str	r8, [sp, #16]
   15af0:	str	lr, [sp, #20]
   15af4:	sub	sp, sp, #8
   15af8:	bl	12460 <strlen@plt>
   15afc:	ldr	r2, [r4, #32]
   15b00:	ldrh	r3, [r2, #14]
   15b04:	cmp	r3, #6
   15b08:	bne	15be4 <flatcc_builder_append_string_str@@Base+0x10c>
   15b0c:	ldr	r3, [r2, #20]
   15b10:	mov	r5, r0
   15b14:	adds	r3, r0, r3
   15b18:	bcs	15be0 <flatcc_builder_append_string_str@@Base+0x108>
   15b1c:	ldr	r7, [r4, #20]
   15b20:	str	r3, [r2, #20]
   15b24:	ldr	r3, [r4, #24]
   15b28:	add	ip, r0, r7
   15b2c:	cmp	ip, r3
   15b30:	str	ip, [r4, #20]
   15b34:	bcs	15b74 <flatcc_builder_append_string_str@@Base+0x9c>
   15b38:	ldr	r3, [r4, #16]
   15b3c:	adds	r3, r3, r7
   15b40:	beq	15b58 <flatcc_builder_append_string_str@@Base+0x80>
   15b44:	mov	r0, r3
   15b48:	mov	r2, r5
   15b4c:	mov	r1, r6
   15b50:	bl	1240c <memcpy@plt>
   15b54:	mov	r3, r0
   15b58:	mov	r0, r3
   15b5c:	add	sp, sp, #8
   15b60:	ldrd	r4, [sp]
   15b64:	ldrd	r6, [sp, #8]
   15b68:	ldr	r8, [sp, #16]
   15b6c:	add	sp, sp, #20
   15b70:	pop	{pc}		; (ldr pc, [sp], #4)
   15b74:	ldr	r2, [r4, #28]
   15b78:	mov	r0, #1
   15b7c:	add	r1, r4, #60	; 0x3c
   15b80:	mov	r3, r0
   15b84:	str	r0, [sp]
   15b88:	ldr	r8, [r4, #48]	; 0x30
   15b8c:	add	r2, r2, r0
   15b90:	ldr	r0, [r4, #40]	; 0x28
   15b94:	add	r2, r2, ip
   15b98:	blx	r8
   15b9c:	cmp	r0, #0
   15ba0:	bne	15bd8 <flatcc_builder_append_string_str@@Base+0x100>
   15ba4:	ldr	r1, [r4, #28]
   15ba8:	ldr	r3, [r4, #60]	; 0x3c
   15bac:	ldr	r2, [r4, #64]	; 0x40
   15bb0:	add	r3, r3, r1
   15bb4:	sub	r2, r2, r1
   15bb8:	mvn	r1, #3
   15bbc:	str	r3, [r4, #16]
   15bc0:	cmn	r2, #4
   15bc4:	mvnhi	r2, #3
   15bc8:	str	r2, [r4, #24]
   15bcc:	ldr	r2, [r4, #32]
   15bd0:	str	r1, [r2, #4]
   15bd4:	b	15b3c <flatcc_builder_append_string_str@@Base+0x64>
   15bd8:	mov	r3, #0
   15bdc:	b	15b58 <flatcc_builder_append_string_str@@Base+0x80>
   15be0:	bl	13c70 <flatcc_builder_default_alloc@@Base+0x1c4>
   15be4:	bl	13cc0 <flatcc_builder_default_alloc@@Base+0x214>

00015be8 <flatcc_builder_append_string_strn@@Base>:
   15be8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15bec:	mov	r4, r0
   15bf0:	mov	r5, r2
   15bf4:	strd	r6, [sp, #8]
   15bf8:	mov	r6, r1
   15bfc:	mov	r1, #0
   15c00:	mov	r0, r6
   15c04:	str	r8, [sp, #16]
   15c08:	str	lr, [sp, #20]
   15c0c:	sub	sp, sp, #8
   15c10:	bl	1249c <memchr@plt>
   15c14:	ldr	r2, [r4, #32]
   15c18:	cmp	r0, #0
   15c1c:	subne	r5, r0, r6
   15c20:	ldrh	r3, [r2, #14]
   15c24:	cmp	r3, #6
   15c28:	bne	15d00 <flatcc_builder_append_string_strn@@Base+0x118>
   15c2c:	ldr	r3, [r2, #20]
   15c30:	adds	r3, r5, r3
   15c34:	bcs	15cfc <flatcc_builder_append_string_strn@@Base+0x114>
   15c38:	ldr	r7, [r4, #20]
   15c3c:	str	r3, [r2, #20]
   15c40:	ldr	r3, [r4, #24]
   15c44:	add	ip, r5, r7
   15c48:	cmp	ip, r3
   15c4c:	str	ip, [r4, #20]
   15c50:	bcs	15c90 <flatcc_builder_append_string_strn@@Base+0xa8>
   15c54:	ldr	r3, [r4, #16]
   15c58:	adds	r3, r3, r7
   15c5c:	beq	15c74 <flatcc_builder_append_string_strn@@Base+0x8c>
   15c60:	mov	r0, r3
   15c64:	mov	r2, r5
   15c68:	mov	r1, r6
   15c6c:	bl	1240c <memcpy@plt>
   15c70:	mov	r3, r0
   15c74:	mov	r0, r3
   15c78:	add	sp, sp, #8
   15c7c:	ldrd	r4, [sp]
   15c80:	ldrd	r6, [sp, #8]
   15c84:	ldr	r8, [sp, #16]
   15c88:	add	sp, sp, #20
   15c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c90:	ldr	r2, [r4, #28]
   15c94:	mov	r0, #1
   15c98:	add	r1, r4, #60	; 0x3c
   15c9c:	mov	r3, r0
   15ca0:	str	r0, [sp]
   15ca4:	ldr	r8, [r4, #48]	; 0x30
   15ca8:	add	r2, r2, r0
   15cac:	ldr	r0, [r4, #40]	; 0x28
   15cb0:	add	r2, r2, ip
   15cb4:	blx	r8
   15cb8:	cmp	r0, #0
   15cbc:	bne	15cf4 <flatcc_builder_append_string_strn@@Base+0x10c>
   15cc0:	ldr	r1, [r4, #28]
   15cc4:	ldr	r3, [r4, #60]	; 0x3c
   15cc8:	ldr	r2, [r4, #64]	; 0x40
   15ccc:	add	r3, r3, r1
   15cd0:	sub	r2, r2, r1
   15cd4:	mvn	r1, #3
   15cd8:	str	r3, [r4, #16]
   15cdc:	cmn	r2, #4
   15ce0:	mvnhi	r2, #3
   15ce4:	str	r2, [r4, #24]
   15ce8:	ldr	r2, [r4, #32]
   15cec:	str	r1, [r2, #4]
   15cf0:	b	15c58 <flatcc_builder_append_string_strn@@Base+0x70>
   15cf4:	mov	r3, #0
   15cf8:	b	15c74 <flatcc_builder_append_string_strn@@Base+0x8c>
   15cfc:	bl	13c70 <flatcc_builder_default_alloc@@Base+0x1c4>
   15d00:	bl	13cc0 <flatcc_builder_default_alloc@@Base+0x214>

00015d04 <flatcc_builder_truncate_vector@@Base>:
   15d04:	mov	r3, r0
   15d08:	ldr	r0, [r0, #32]
   15d0c:	str	r4, [sp, #-8]!
   15d10:	ldrh	r2, [r0, #14]
   15d14:	str	lr, [sp, #4]
   15d18:	cmp	r2, #4
   15d1c:	bne	15d6c <flatcc_builder_truncate_vector@@Base+0x68>
   15d20:	mov	lr, r1
   15d24:	ldr	r1, [r0, #20]
   15d28:	cmp	r1, lr
   15d2c:	bcc	15d88 <flatcc_builder_truncate_vector@@Base+0x84>
   15d30:	ldr	r2, [r0, #16]
   15d34:	sub	ip, r1, lr
   15d38:	mov	r1, #0
   15d3c:	str	ip, [r0, #20]
   15d40:	ldr	r0, [r3, #16]
   15d44:	ldr	ip, [r3, #20]
   15d48:	mul	r2, r2, lr
   15d4c:	sub	ip, ip, r2
   15d50:	add	r0, r0, ip
   15d54:	str	ip, [r3, #20]
   15d58:	bl	12484 <memset@plt>
   15d5c:	ldr	r4, [sp]
   15d60:	add	sp, sp, #4
   15d64:	mov	r0, #0
   15d68:	pop	{pc}		; (ldr pc, [sp], #4)
   15d6c:	movw	r1, #4884	; 0x1314
   15d70:	movt	r1, #2
   15d74:	ldr	r3, [pc, #40]	; 15da4 <flatcc_builder_truncate_vector@@Base+0xa0>
   15d78:	movw	r0, #5248	; 0x1480
   15d7c:	movt	r0, #2
   15d80:	movw	r2, #985	; 0x3d9
   15d84:	bl	124b4 <__assert_fail@plt>
   15d88:	movw	r1, #4884	; 0x1314
   15d8c:	movt	r1, #2
   15d90:	ldr	r3, [pc, #12]	; 15da4 <flatcc_builder_truncate_vector@@Base+0xa0>
   15d94:	movw	r0, #5408	; 0x1520
   15d98:	movt	r0, #2
   15d9c:	movw	r2, #986	; 0x3da
   15da0:	bl	124b4 <__assert_fail@plt>
   15da4:	andeq	r0, r2, r8, ror #31

00015da8 <flatcc_builder_truncate_offset_vector@@Base>:
   15da8:	mov	r3, r0
   15dac:	ldr	r0, [r0, #32]
   15db0:	str	r4, [sp, #-8]!
   15db4:	ldrh	r2, [r0, #14]
   15db8:	str	lr, [sp, #4]
   15dbc:	cmp	r2, #5
   15dc0:	bne	15e10 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   15dc4:	mov	lr, r1
   15dc8:	ldr	r1, [r0, #20]
   15dcc:	cmp	r1, lr
   15dd0:	bcc	15e2c <flatcc_builder_truncate_offset_vector@@Base+0x84>
   15dd4:	ldr	r2, [r0, #16]
   15dd8:	sub	ip, r1, lr
   15ddc:	mov	r1, #0
   15de0:	str	ip, [r0, #20]
   15de4:	ldr	r0, [r3, #16]
   15de8:	ldr	ip, [r3, #20]
   15dec:	mul	r2, r2, lr
   15df0:	sub	ip, ip, r2
   15df4:	add	r0, r0, ip
   15df8:	str	ip, [r3, #20]
   15dfc:	bl	12484 <memset@plt>
   15e00:	ldr	r4, [sp]
   15e04:	add	sp, sp, #4
   15e08:	mov	r0, #0
   15e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e10:	movw	r1, #4884	; 0x1314
   15e14:	movt	r1, #2
   15e18:	ldr	r3, [pc, #40]	; 15e48 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   15e1c:	movw	r0, #5356	; 0x14ec
   15e20:	movt	r0, #2
   15e24:	movw	r2, #994	; 0x3e2
   15e28:	bl	124b4 <__assert_fail@plt>
   15e2c:	movw	r1, #4884	; 0x1314
   15e30:	movt	r1, #2
   15e34:	ldr	r3, [pc, #12]	; 15e48 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   15e38:	movw	r0, #5444	; 0x1544
   15e3c:	movt	r0, #2
   15e40:	movw	r2, #995	; 0x3e3
   15e44:	bl	124b4 <__assert_fail@plt>
   15e48:	andeq	r1, r2, r8

00015e4c <flatcc_builder_truncate_string@@Base>:
   15e4c:	str	r4, [sp, #-8]!
   15e50:	str	lr, [sp, #4]
   15e54:	ldr	lr, [r0, #32]
   15e58:	ldrh	r2, [lr, #14]
   15e5c:	cmp	r2, #6
   15e60:	bne	15eb0 <flatcc_builder_truncate_string@@Base+0x64>
   15e64:	ldr	r2, [lr, #20]
   15e68:	mov	ip, r1
   15e6c:	cmp	r2, r1
   15e70:	bcc	15ecc <flatcc_builder_truncate_string@@Base+0x80>
   15e74:	sub	r1, r2, r1
   15e78:	mov	r3, r0
   15e7c:	ldr	r0, [r0, #16]
   15e80:	mov	r2, ip
   15e84:	str	r1, [lr, #20]
   15e88:	mov	r1, #0
   15e8c:	ldr	lr, [r3, #20]
   15e90:	sub	ip, lr, ip
   15e94:	add	r0, r0, ip
   15e98:	str	ip, [r3, #20]
   15e9c:	bl	12484 <memset@plt>
   15ea0:	ldr	r4, [sp]
   15ea4:	add	sp, sp, #4
   15ea8:	mov	r0, #0
   15eac:	pop	{pc}		; (ldr pc, [sp], #4)
   15eb0:	movw	r1, #4884	; 0x1314
   15eb4:	movt	r1, #2
   15eb8:	ldr	r3, [pc, #40]	; 15ee8 <flatcc_builder_truncate_string@@Base+0x9c>
   15ebc:	movw	r0, #5012	; 0x1394
   15ec0:	movt	r0, #2
   15ec4:	movw	r2, #1003	; 0x3eb
   15ec8:	bl	124b4 <__assert_fail@plt>
   15ecc:	movw	r1, #4884	; 0x1314
   15ed0:	movt	r1, #2
   15ed4:	ldr	r3, [pc, #12]	; 15ee8 <flatcc_builder_truncate_string@@Base+0x9c>
   15ed8:	movw	r0, #5504	; 0x1580
   15edc:	movt	r0, #2
   15ee0:	mov	r2, #1004	; 0x3ec
   15ee4:	bl	124b4 <__assert_fail@plt>
   15ee8:	andeq	r1, r2, r0, lsr r0

00015eec <flatcc_builder_start_vector@@Base>:
   15eec:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15ef0:	mov	r4, r0
   15ef4:	mov	r5, r3
   15ef8:	ldr	r0, [r0, #156]	; 0x9c
   15efc:	cmp	r2, #4
   15f00:	ldr	r3, [r4, #160]	; 0xa0
   15f04:	strd	r6, [sp, #8]
   15f08:	movcs	r7, r2
   15f0c:	movcc	r7, #4
   15f10:	mov	r6, r1
   15f14:	strd	r8, [sp, #16]
   15f18:	add	r2, r0, #1
   15f1c:	str	lr, [sp, #24]
   15f20:	sub	sp, sp, #12
   15f24:	cmp	r2, r3
   15f28:	str	r2, [r4, #156]	; 0x9c
   15f2c:	ble	16048 <flatcc_builder_start_vector@@Base+0x15c>
   15f30:	ldr	r3, [r4, #176]	; 0xb0
   15f34:	cmp	r3, #0
   15f38:	cmpgt	r2, r3
   15f3c:	movgt	r3, #1
   15f40:	movle	r3, #0
   15f44:	bgt	16058 <flatcc_builder_start_vector@@Base+0x16c>
   15f48:	add	r0, r0, r0, lsl #3
   15f4c:	ldr	r1, [r4, #88]	; 0x58
   15f50:	lsl	r8, r0, #2
   15f54:	add	r2, r8, #36	; 0x24
   15f58:	cmp	r2, r1
   15f5c:	bls	15f80 <flatcc_builder_start_vector@@Base+0x94>
   15f60:	mov	ip, #4
   15f64:	add	r1, r4, #84	; 0x54
   15f68:	ldr	r0, [r4, #40]	; 0x28
   15f6c:	str	ip, [sp]
   15f70:	ldr	r9, [r4, #48]	; 0x30
   15f74:	blx	r9
   15f78:	cmp	r0, #0
   15f7c:	bne	16060 <flatcc_builder_start_vector@@Base+0x174>
   15f80:	ldr	r3, [r4, #84]	; 0x54
   15f84:	add	r3, r3, r8
   15f88:	cmp	r3, #0
   15f8c:	str	r3, [r4, #32]
   15f90:	beq	16058 <flatcc_builder_start_vector@@Base+0x16c>
   15f94:	ldr	r2, [r4, #88]	; 0x58
   15f98:	movw	r0, #36409	; 0x8e39
   15f9c:	movt	r0, #14563	; 0x38e3
   15fa0:	ldr	r1, [r4, #176]	; 0xb0
   15fa4:	umull	r0, r2, r0, r2
   15fa8:	lsr	r2, r2, #3
   15fac:	cmp	r1, #0
   15fb0:	cmpgt	r2, r1
   15fb4:	movgt	r2, r1
   15fb8:	str	r2, [r4, #160]	; 0xa0
   15fbc:	ldr	r2, [r4, #20]
   15fc0:	mvn	r9, #3
   15fc4:	mov	ip, #0
   15fc8:	ldr	r0, [r4, #28]
   15fcc:	ldrh	lr, [r4, #130]	; 0x82
   15fd0:	ldr	r1, [r4, #64]	; 0x40
   15fd4:	ldr	r8, [r4, #60]	; 0x3c
   15fd8:	str	r2, [r3, #8]
   15fdc:	add	r2, r2, r0
   15fe0:	add	r2, r2, #7
   15fe4:	strh	lr, [r3, #12]
   15fe8:	bic	r2, r2, #7
   15fec:	strh	r7, [r4, #130]	; 0x82
   15ff0:	mov	r7, #4
   15ff4:	sub	r1, r1, r2
   15ff8:	str	r0, [r3]
   15ffc:	mov	r0, ip
   16000:	cmp	r1, r9
   16004:	add	lr, r8, r2
   16008:	str	ip, [r4, #20]
   1600c:	movhi	r1, r9
   16010:	str	r2, [r4, #28]
   16014:	strh	r7, [r3, #14]
   16018:	str	r6, [r3, #16]
   1601c:	str	ip, [r3, #20]
   16020:	str	r5, [r3, #24]
   16024:	str	lr, [r4, #16]
   16028:	str	r1, [r4, #24]
   1602c:	str	r9, [r3, #4]
   16030:	add	sp, sp, #12
   16034:	ldrd	r4, [sp]
   16038:	ldrd	r6, [sp, #8]
   1603c:	ldrd	r8, [sp, #16]
   16040:	add	sp, sp, #24
   16044:	pop	{pc}		; (ldr pc, [sp], #4)
   16048:	ldr	r3, [r4, #32]
   1604c:	add	r3, r3, #36	; 0x24
   16050:	str	r3, [r4, #32]
   16054:	b	15fbc <flatcc_builder_start_vector@@Base+0xd0>
   16058:	mvn	r0, #0
   1605c:	b	16030 <flatcc_builder_start_vector@@Base+0x144>
   16060:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>

00016064 <flatcc_builder_start_offset_vector@@Base>:
   16064:	ldrd	r2, [r0, #156]	; 0x9c
   16068:	strd	r4, [sp, #-16]!
   1606c:	mov	r4, r0
   16070:	str	r6, [sp, #8]
   16074:	str	lr, [sp, #12]
   16078:	sub	sp, sp, #8
   1607c:	add	r1, r2, #1
   16080:	cmp	r1, r3
   16084:	str	r1, [r0, #156]	; 0x9c
   16088:	ble	161a0 <flatcc_builder_start_offset_vector@@Base+0x13c>
   1608c:	ldr	r3, [r0, #176]	; 0xb0
   16090:	cmp	r3, #0
   16094:	cmpgt	r1, r3
   16098:	movgt	r3, #1
   1609c:	movle	r3, #0
   160a0:	bgt	161b0 <flatcc_builder_start_offset_vector@@Base+0x14c>
   160a4:	add	r2, r2, r2, lsl #3
   160a8:	ldr	r1, [r0, #88]	; 0x58
   160ac:	lsl	r5, r2, #2
   160b0:	add	r2, r5, #36	; 0x24
   160b4:	cmp	r2, r1
   160b8:	bls	160dc <flatcc_builder_start_offset_vector@@Base+0x78>
   160bc:	mov	ip, #4
   160c0:	add	r1, r0, #84	; 0x54
   160c4:	ldr	r0, [r0, #40]	; 0x28
   160c8:	str	ip, [sp]
   160cc:	ldr	r6, [r4, #48]	; 0x30
   160d0:	blx	r6
   160d4:	cmp	r0, #0
   160d8:	bne	161b8 <flatcc_builder_start_offset_vector@@Base+0x154>
   160dc:	ldr	r3, [r4, #84]	; 0x54
   160e0:	add	r3, r3, r5
   160e4:	cmp	r3, #0
   160e8:	str	r3, [r4, #32]
   160ec:	beq	161b0 <flatcc_builder_start_offset_vector@@Base+0x14c>
   160f0:	ldr	r2, [r4, #88]	; 0x58
   160f4:	movw	r0, #36409	; 0x8e39
   160f8:	movt	r0, #14563	; 0x38e3
   160fc:	ldr	r1, [r4, #176]	; 0xb0
   16100:	umull	r0, r2, r0, r2
   16104:	lsr	r2, r2, #3
   16108:	cmp	r1, #0
   1610c:	cmpgt	r2, r1
   16110:	movgt	r2, r1
   16114:	str	r2, [r4, #160]	; 0xa0
   16118:	ldr	r2, [r4, #20]
   1611c:	mvn	r5, #3
   16120:	mov	lr, #0
   16124:	ldr	r0, [r4, #28]
   16128:	ldrh	r6, [r4, #130]	; 0x82
   1612c:	ldr	ip, [r4, #60]	; 0x3c
   16130:	ldr	r1, [r4, #64]	; 0x40
   16134:	str	r2, [r3, #8]
   16138:	add	r2, r2, r0
   1613c:	add	r2, r2, #7
   16140:	strh	r6, [r3, #12]
   16144:	mov	r6, #4
   16148:	bic	r2, r2, #7
   1614c:	add	ip, ip, r2
   16150:	strh	r6, [r4, #130]	; 0x82
   16154:	sub	r1, r1, r2
   16158:	str	r0, [r3]
   1615c:	mov	r0, lr
   16160:	cmp	r1, r5
   16164:	str	lr, [r4, #20]
   16168:	movhi	r1, r5
   1616c:	str	r2, [r4, #28]
   16170:	mov	r2, #5
   16174:	strh	r2, [r3, #14]
   16178:	str	r6, [r3, #16]
   1617c:	str	lr, [r3, #20]
   16180:	str	ip, [r4, #16]
   16184:	str	r1, [r4, #24]
   16188:	str	r5, [r3, #4]
   1618c:	add	sp, sp, #8
   16190:	ldrd	r4, [sp]
   16194:	ldr	r6, [sp, #8]
   16198:	add	sp, sp, #12
   1619c:	pop	{pc}		; (ldr pc, [sp], #4)
   161a0:	ldr	r3, [r0, #32]
   161a4:	add	r3, r3, #36	; 0x24
   161a8:	str	r3, [r0, #32]
   161ac:	b	16118 <flatcc_builder_start_offset_vector@@Base+0xb4>
   161b0:	mvn	r0, #0
   161b4:	b	1618c <flatcc_builder_start_offset_vector@@Base+0x128>
   161b8:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>

000161bc <flatcc_builder_create_offset_vector@@Base>:
   161bc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   161c0:	mov	r5, r2
   161c4:	mov	r4, r0
   161c8:	ldr	r3, [r0, #160]	; 0xa0
   161cc:	strd	r6, [sp, #8]
   161d0:	mov	r6, r1
   161d4:	ldr	r1, [r0, #156]	; 0x9c
   161d8:	strd	r8, [sp, #16]
   161dc:	str	lr, [sp, #24]
   161e0:	sub	sp, sp, #12
   161e4:	add	r2, r1, #1
   161e8:	cmp	r2, r3
   161ec:	str	r2, [r0, #156]	; 0x9c
   161f0:	ble	16368 <flatcc_builder_create_offset_vector@@Base+0x1ac>
   161f4:	ldr	r3, [r0, #176]	; 0xb0
   161f8:	cmp	r2, r3
   161fc:	cmpgt	r3, #0
   16200:	movgt	r3, #1
   16204:	movle	r3, #0
   16208:	bgt	16348 <flatcc_builder_create_offset_vector@@Base+0x18c>
   1620c:	add	r1, r1, r1, lsl #3
   16210:	ldr	r0, [r0, #88]	; 0x58
   16214:	lsl	r7, r1, #2
   16218:	add	r2, r7, #36	; 0x24
   1621c:	cmp	r2, r0
   16220:	bls	16244 <flatcc_builder_create_offset_vector@@Base+0x88>
   16224:	mov	ip, #4
   16228:	add	r1, r4, #84	; 0x54
   1622c:	ldr	r0, [r4, #40]	; 0x28
   16230:	str	ip, [sp]
   16234:	ldr	r8, [r4, #48]	; 0x30
   16238:	blx	r8
   1623c:	cmp	r0, #0
   16240:	bne	1640c <flatcc_builder_create_offset_vector@@Base+0x250>
   16244:	ldr	r3, [r4, #84]	; 0x54
   16248:	add	r3, r3, r7
   1624c:	cmp	r3, #0
   16250:	str	r3, [r4, #32]
   16254:	beq	16348 <flatcc_builder_create_offset_vector@@Base+0x18c>
   16258:	ldr	r2, [r4, #88]	; 0x58
   1625c:	movw	r0, #36409	; 0x8e39
   16260:	movt	r0, #14563	; 0x38e3
   16264:	ldr	r1, [r4, #176]	; 0xb0
   16268:	umull	r0, r2, r0, r2
   1626c:	lsr	r2, r2, #3
   16270:	cmp	r2, r1
   16274:	cmpgt	r1, #0
   16278:	movgt	r2, r1
   1627c:	str	r2, [r4, #160]	; 0xa0
   16280:	ldr	r2, [r4, #20]
   16284:	mvn	lr, #3
   16288:	mov	r0, #4
   1628c:	ldr	r8, [r4, #28]
   16290:	ldrh	r7, [r4, #130]	; 0x82
   16294:	ldr	r1, [r4, #64]	; 0x40
   16298:	ldr	r9, [r4, #60]	; 0x3c
   1629c:	str	r2, [r3, #8]
   162a0:	add	r2, r2, r8
   162a4:	add	r2, r2, #7
   162a8:	strh	r7, [r3, #12]
   162ac:	mov	r7, #0
   162b0:	bic	r2, r2, #7
   162b4:	strh	r0, [r4, #130]	; 0x82
   162b8:	sub	r1, r1, r2
   162bc:	str	r8, [r3]
   162c0:	cmp	r1, lr
   162c4:	add	r9, r9, r2
   162c8:	str	r7, [r4, #20]
   162cc:	movls	ip, r1
   162d0:	movhi	ip, lr
   162d4:	str	r2, [r4, #28]
   162d8:	mov	r1, #5
   162dc:	strh	r1, [r3, #14]
   162e0:	mov	r1, r5
   162e4:	str	r0, [r3, #16]
   162e8:	mov	r0, r4
   162ec:	str	r7, [r3, #20]
   162f0:	str	r9, [r4, #16]
   162f4:	str	ip, [r4, #24]
   162f8:	str	lr, [r3, #4]
   162fc:	bl	155b8 <flatcc_builder_extend_offset_vector@@Base>
   16300:	cmp	r0, r7
   16304:	beq	16348 <flatcc_builder_create_offset_vector@@Base+0x18c>
   16308:	lsl	r2, r5, #2
   1630c:	mov	r1, r6
   16310:	bl	1240c <memcpy@plt>
   16314:	ldr	r3, [r4, #32]
   16318:	ldrh	r2, [r3, #14]
   1631c:	cmp	r2, #5
   16320:	bne	163f0 <flatcc_builder_create_offset_vector@@Base+0x234>
   16324:	ldr	r2, [r3, #20]
   16328:	cmn	r2, #-1073741823	; 0xc0000001
   1632c:	bhi	16348 <flatcc_builder_create_offset_vector@@Base+0x18c>
   16330:	mov	r3, r7
   16334:	mov	r0, r4
   16338:	ldr	r1, [r4, #16]
   1633c:	bl	13e34 <flatcc_builder_default_alloc@@Base+0x388>
   16340:	subs	r5, r0, #0
   16344:	bne	16378 <flatcc_builder_create_offset_vector@@Base+0x1bc>
   16348:	mov	r5, #0
   1634c:	mov	r0, r5
   16350:	add	sp, sp, #12
   16354:	ldrd	r4, [sp]
   16358:	ldrd	r6, [sp, #8]
   1635c:	ldrd	r8, [sp, #16]
   16360:	add	sp, sp, #24
   16364:	pop	{pc}		; (ldr pc, [sp], #4)
   16368:	ldr	r3, [r0, #32]
   1636c:	add	r3, r3, #36	; 0x24
   16370:	str	r3, [r0, #32]
   16374:	b	16280 <flatcc_builder_create_offset_vector@@Base+0xc4>
   16378:	mov	r1, r7
   1637c:	ldr	r0, [r4, #16]
   16380:	ldr	r2, [r4, #20]
   16384:	bl	12484 <memset@plt>
   16388:	ldr	r3, [r4, #32]
   1638c:	ldr	r0, [r4, #60]	; 0x3c
   16390:	ldr	r2, [r4, #64]	; 0x40
   16394:	ldr	ip, [r3]
   16398:	ldmib	r3, {r1, lr}
   1639c:	add	r0, r0, ip
   163a0:	sub	r2, r2, ip
   163a4:	str	r0, [r4, #16]
   163a8:	cmp	r2, r1
   163ac:	ldrh	r0, [r4, #128]	; 0x80
   163b0:	movcs	r2, r1
   163b4:	str	lr, [r4, #20]
   163b8:	str	ip, [r4, #28]
   163bc:	ldrh	ip, [r4, #130]	; 0x82
   163c0:	str	r2, [r4, #24]
   163c4:	ldr	r2, [r4, #156]	; 0x9c
   163c8:	str	r1, [r3, #4]
   163cc:	cmp	r0, ip
   163d0:	sub	r0, r3, #36	; 0x24
   163d4:	strhcc	ip, [r4, #128]	; 0x80
   163d8:	ldrh	r1, [r3, #12]
   163dc:	sub	r3, r2, #1
   163e0:	str	r0, [r4, #32]
   163e4:	strh	r1, [r4, #130]	; 0x82
   163e8:	str	r3, [r4, #156]	; 0x9c
   163ec:	b	1634c <flatcc_builder_create_offset_vector@@Base+0x190>
   163f0:	movw	r1, #4884	; 0x1314
   163f4:	movt	r1, #2
   163f8:	ldr	r3, [pc, #16]	; 16410 <flatcc_builder_create_offset_vector@@Base+0x254>
   163fc:	movw	r0, #5356	; 0x14ec
   16400:	movt	r0, #2
   16404:	movw	r2, #1480	; 0x5c8
   16408:	bl	124b4 <__assert_fail@plt>
   1640c:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>
   16410:	andeq	r1, r2, r0, asr r0

00016414 <flatcc_builder_start_string@@Base>:
   16414:	ldrd	r2, [r0, #156]	; 0x9c
   16418:	strd	r4, [sp, #-16]!
   1641c:	mov	r4, r0
   16420:	str	r6, [sp, #8]
   16424:	str	lr, [sp, #12]
   16428:	sub	sp, sp, #8
   1642c:	add	r1, r2, #1
   16430:	cmp	r1, r3
   16434:	str	r1, [r0, #156]	; 0x9c
   16438:	ble	16550 <flatcc_builder_start_string@@Base+0x13c>
   1643c:	ldr	r3, [r0, #176]	; 0xb0
   16440:	cmp	r3, #0
   16444:	cmpgt	r1, r3
   16448:	movgt	r3, #1
   1644c:	movle	r3, #0
   16450:	bgt	16560 <flatcc_builder_start_string@@Base+0x14c>
   16454:	add	r2, r2, r2, lsl #3
   16458:	ldr	r1, [r0, #88]	; 0x58
   1645c:	lsl	r5, r2, #2
   16460:	add	r2, r5, #36	; 0x24
   16464:	cmp	r2, r1
   16468:	bls	1648c <flatcc_builder_start_string@@Base+0x78>
   1646c:	mov	ip, #4
   16470:	add	r1, r0, #84	; 0x54
   16474:	ldr	r0, [r0, #40]	; 0x28
   16478:	str	ip, [sp]
   1647c:	ldr	r6, [r4, #48]	; 0x30
   16480:	blx	r6
   16484:	cmp	r0, #0
   16488:	bne	16568 <flatcc_builder_start_string@@Base+0x154>
   1648c:	ldr	r3, [r4, #84]	; 0x54
   16490:	add	r3, r3, r5
   16494:	cmp	r3, #0
   16498:	str	r3, [r4, #32]
   1649c:	beq	16560 <flatcc_builder_start_string@@Base+0x14c>
   164a0:	ldr	r2, [r4, #88]	; 0x58
   164a4:	movw	r0, #36409	; 0x8e39
   164a8:	movt	r0, #14563	; 0x38e3
   164ac:	ldr	r1, [r4, #176]	; 0xb0
   164b0:	umull	r0, r2, r0, r2
   164b4:	lsr	r2, r2, #3
   164b8:	cmp	r1, #0
   164bc:	cmpgt	r2, r1
   164c0:	movgt	r2, r1
   164c4:	str	r2, [r4, #160]	; 0xa0
   164c8:	ldr	r2, [r4, #20]
   164cc:	mvn	r5, #3
   164d0:	mov	lr, #0
   164d4:	ldr	r0, [r4, #28]
   164d8:	ldrh	r6, [r4, #130]	; 0x82
   164dc:	ldr	ip, [r4, #60]	; 0x3c
   164e0:	ldr	r1, [r4, #64]	; 0x40
   164e4:	str	r2, [r3, #8]
   164e8:	add	r2, r2, r0
   164ec:	add	r2, r2, #7
   164f0:	strh	r6, [r3, #12]
   164f4:	mov	r6, #1
   164f8:	bic	r2, r2, #7
   164fc:	add	ip, ip, r2
   16500:	strh	r6, [r4, #130]	; 0x82
   16504:	sub	r1, r1, r2
   16508:	str	r0, [r3]
   1650c:	mov	r0, lr
   16510:	cmp	r1, r5
   16514:	str	lr, [r4, #20]
   16518:	movhi	r1, r5
   1651c:	str	r2, [r4, #28]
   16520:	mov	r2, #6
   16524:	strh	r2, [r3, #14]
   16528:	str	r6, [r3, #16]
   1652c:	str	lr, [r3, #20]
   16530:	str	ip, [r4, #16]
   16534:	str	r1, [r4, #24]
   16538:	str	r5, [r3, #4]
   1653c:	add	sp, sp, #8
   16540:	ldrd	r4, [sp]
   16544:	ldr	r6, [sp, #8]
   16548:	add	sp, sp, #12
   1654c:	pop	{pc}		; (ldr pc, [sp], #4)
   16550:	ldr	r3, [r0, #32]
   16554:	add	r3, r3, #36	; 0x24
   16558:	str	r3, [r0, #32]
   1655c:	b	164c8 <flatcc_builder_start_string@@Base+0xb4>
   16560:	mvn	r0, #0
   16564:	b	1653c <flatcc_builder_start_string@@Base+0x128>
   16568:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>

0001656c <flatcc_builder_reserve_table@@Base>:
   1656c:	cmp	r1, #0
   16570:	strd	r4, [sp, #-20]!	; 0xffffffec
   16574:	strd	r6, [sp, #8]
   16578:	str	lr, [sp, #16]
   1657c:	sub	sp, sp, #12
   16580:	blt	16664 <flatcc_builder_reserve_table@@Base+0xf8>
   16584:	ldr	r2, [r0, #32]
   16588:	add	r1, r1, #2
   1658c:	mov	r4, r0
   16590:	lsl	r5, r1, #1
   16594:	ldr	r1, [r0, #56]	; 0x38
   16598:	ldrh	r6, [r2, #28]
   1659c:	ldr	r3, [r2, #16]
   165a0:	add	r6, r3, r6, lsl #1
   165a4:	add	r2, r6, r5
   165a8:	cmp	r2, r1
   165ac:	bhi	16614 <flatcc_builder_reserve_table@@Base+0xa8>
   165b0:	ldr	r3, [r4, #52]	; 0x34
   165b4:	adds	r3, r3, r6
   165b8:	mvneq	r0, #0
   165bc:	streq	r3, [r4, #4]
   165c0:	beq	16600 <flatcc_builder_reserve_table@@Base+0x94>
   165c4:	ldr	r2, [r4, #32]
   165c8:	add	r3, r3, #4
   165cc:	ldr	r1, [r4, #80]	; 0x50
   165d0:	ldr	r6, [r2, #20]
   165d4:	str	r3, [r4, #4]
   165d8:	add	r2, r5, r6
   165dc:	sub	r2, r2, #3
   165e0:	cmp	r2, r1
   165e4:	bhi	1663c <flatcc_builder_reserve_table@@Base+0xd0>
   165e8:	ldr	r3, [r4, #76]	; 0x4c
   165ec:	add	r3, r3, r6
   165f0:	clz	r0, r3
   165f4:	lsr	r0, r0, #5
   165f8:	str	r3, [r4]
   165fc:	rsb	r0, r0, #0
   16600:	add	sp, sp, #12
   16604:	ldrd	r4, [sp]
   16608:	ldrd	r6, [sp, #8]
   1660c:	add	sp, sp, #16
   16610:	pop	{pc}		; (ldr pc, [sp], #4)
   16614:	mov	ip, #0
   16618:	add	r1, r0, #52	; 0x34
   1661c:	ldr	r0, [r0, #40]	; 0x28
   16620:	mov	r3, #1
   16624:	str	ip, [sp]
   16628:	ldr	r7, [r4, #48]	; 0x30
   1662c:	blx	r7
   16630:	cmp	r0, #0
   16634:	beq	165b0 <flatcc_builder_reserve_table@@Base+0x44>
   16638:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>
   1663c:	mov	ip, #3
   16640:	mov	r3, #0
   16644:	ldr	r0, [r4, #40]	; 0x28
   16648:	add	r1, r4, #76	; 0x4c
   1664c:	str	ip, [sp]
   16650:	ldr	r5, [r4, #48]	; 0x30
   16654:	blx	r5
   16658:	cmp	r0, #0
   1665c:	beq	165e8 <flatcc_builder_reserve_table@@Base+0x7c>
   16660:	b	16638 <flatcc_builder_reserve_table@@Base+0xcc>
   16664:	movw	r1, #4884	; 0x1314
   16668:	movt	r1, #2
   1666c:	ldr	r3, [pc, #12]	; 16680 <flatcc_builder_reserve_table@@Base+0x114>
   16670:	movw	r0, #5540	; 0x15a4
   16674:	movt	r0, #2
   16678:	movw	r2, #1065	; 0x429
   1667c:	bl	124b4 <__assert_fail@plt>
   16680:	andeq	r1, r2, r4, ror r0

00016684 <flatcc_builder_start_table@@Base>:
   16684:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16688:	mov	r5, r1
   1668c:	mov	r1, #4
   16690:	strd	r6, [sp, #8]
   16694:	mov	r4, r0
   16698:	strd	r8, [sp, #16]
   1669c:	str	sl, [sp, #24]
   166a0:	str	lr, [sp, #28]
   166a4:	sub	sp, sp, #8
   166a8:	bl	13d10 <flatcc_builder_default_alloc@@Base+0x264>
   166ac:	subs	r7, r0, #0
   166b0:	bne	167f8 <flatcc_builder_start_table@@Base+0x174>
   166b4:	ldm	r4, {r0, r2}
   166b8:	add	r5, r5, #2
   166bc:	movw	ip, #15186	; 0x3b52
   166c0:	movt	ip, #12137	; 0x2f69
   166c4:	lsl	r5, r5, #1
   166c8:	mov	r8, #3
   166cc:	ldrh	lr, [r4, #8]
   166d0:	ldr	r1, [r4, #52]	; 0x34
   166d4:	ldr	sl, [r4, #76]	; 0x4c
   166d8:	ldr	r3, [r4, #32]
   166dc:	sub	r2, r2, r1
   166e0:	ldr	r9, [r4, #56]	; 0x38
   166e4:	add	r6, r2, lr, lsl #1
   166e8:	sub	r0, r0, sl
   166ec:	ldr	sl, [r4, #12]
   166f0:	str	r2, [r3, #16]
   166f4:	add	r2, r6, r5
   166f8:	str	r0, [r3, #20]
   166fc:	cmp	r2, r9
   16700:	str	sl, [r3, #24]
   16704:	strh	lr, [r3, #28]
   16708:	strh	r7, [r4, #8]
   1670c:	str	ip, [r4, #12]
   16710:	strh	r8, [r3, #14]
   16714:	bls	1673c <flatcc_builder_start_table@@Base+0xb8>
   16718:	mov	r3, #1
   1671c:	add	r1, r4, #52	; 0x34
   16720:	str	r7, [sp]
   16724:	ldr	r0, [r4, #40]	; 0x28
   16728:	ldr	r8, [r4, #48]	; 0x30
   1672c:	blx	r8
   16730:	cmp	r0, #0
   16734:	bne	167f4 <flatcc_builder_start_table@@Base+0x170>
   16738:	ldr	r1, [r4, #52]	; 0x34
   1673c:	adds	r6, r6, r1
   16740:	streq	r6, [r4, #4]
   16744:	beq	167f8 <flatcc_builder_start_table@@Base+0x174>
   16748:	ldr	r1, [r4, #32]
   1674c:	sub	r2, r5, #3
   16750:	add	r6, r6, #4
   16754:	ldr	r3, [r4, #80]	; 0x50
   16758:	ldr	r5, [r1, #20]
   1675c:	str	r6, [r4, #4]
   16760:	add	r2, r2, r5
   16764:	cmp	r2, r3
   16768:	bhi	167d0 <flatcc_builder_start_table@@Base+0x14c>
   1676c:	ldr	r3, [r4, #76]	; 0x4c
   16770:	add	r3, r3, r5
   16774:	cmp	r3, #0
   16778:	str	r3, [r4]
   1677c:	beq	167f8 <flatcc_builder_start_table@@Base+0x174>
   16780:	ldr	r0, [r4, #28]
   16784:	movw	r2, #65532	; 0xfffc
   16788:	ldr	ip, [r4, #32]
   1678c:	ldr	r3, [r4, #64]	; 0x40
   16790:	ldr	r1, [r4, #60]	; 0x3c
   16794:	sub	r3, r3, r0
   16798:	cmp	r3, r2
   1679c:	add	r1, r1, r0
   167a0:	movcs	r3, r2
   167a4:	str	r1, [r4, #16]
   167a8:	str	r3, [r4, #24]
   167ac:	str	r2, [ip, #4]
   167b0:	mov	r0, r7
   167b4:	add	sp, sp, #8
   167b8:	ldrd	r4, [sp]
   167bc:	ldrd	r6, [sp, #8]
   167c0:	ldrd	r8, [sp, #16]
   167c4:	ldr	sl, [sp, #24]
   167c8:	add	sp, sp, #28
   167cc:	pop	{pc}		; (ldr pc, [sp], #4)
   167d0:	mov	ip, #3
   167d4:	mov	r3, #0
   167d8:	ldr	r0, [r4, #40]	; 0x28
   167dc:	add	r1, r4, #76	; 0x4c
   167e0:	str	ip, [sp]
   167e4:	ldr	r6, [r4, #48]	; 0x30
   167e8:	blx	r6
   167ec:	cmp	r0, #0
   167f0:	beq	1676c <flatcc_builder_start_table@@Base+0xe8>
   167f4:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>
   167f8:	mvn	r7, #0
   167fc:	b	167b0 <flatcc_builder_start_table@@Base+0x12c>

00016800 <flatcc_builder_create_vtable@@Base>:
   16800:	strd	r4, [sp, #-16]!
   16804:	mov	r5, r0
   16808:	mov	r3, #0
   1680c:	ldr	ip, [r5, #152]	; 0x98
   16810:	subs	r0, r2, #0
   16814:	str	r6, [sp, #8]
   16818:	str	lr, [sp, #12]
   1681c:	sub	sp, sp, #80	; 0x50
   16820:	str	r3, [sp, #8]
   16824:	str	r3, [sp, #12]
   16828:	beq	168a4 <flatcc_builder_create_vtable@@Base+0xa4>
   1682c:	mov	r2, #1
   16830:	cmp	ip, r3
   16834:	str	r0, [sp, #8]
   16838:	str	r2, [sp, #12]
   1683c:	str	r1, [sp, #16]
   16840:	str	r0, [sp, #20]
   16844:	beq	168d4 <flatcc_builder_create_vtable@@Base+0xd4>
   16848:	ldr	r3, [r5, #136]	; 0x88
   1684c:	sub	r4, r3, r0
   16850:	cmp	r3, r4
   16854:	ble	168b8 <flatcc_builder_create_vtable@@Base+0xb8>
   16858:	mov	r3, r4
   1685c:	mov	r2, #1
   16860:	str	r0, [sp]
   16864:	add	r1, sp, #16
   16868:	ldr	r0, [r5, #36]	; 0x24
   1686c:	ldr	r6, [r5, #44]	; 0x2c
   16870:	blx	r6
   16874:	cmp	r0, #0
   16878:	bne	1691c <flatcc_builder_create_vtable@@Base+0x11c>
   1687c:	cmp	r4, #0
   16880:	str	r4, [r5, #136]	; 0x88
   16884:	beq	1688c <flatcc_builder_create_vtable@@Base+0x8c>
   16888:	add	r4, r4, #1
   1688c:	mov	r0, r4
   16890:	add	sp, sp, #80	; 0x50
   16894:	ldrd	r4, [sp]
   16898:	ldr	r6, [sp, #8]
   1689c:	add	sp, sp, #12
   168a0:	pop	{pc}		; (ldr pc, [sp], #4)
   168a4:	cmp	ip, #0
   168a8:	bne	168b8 <flatcc_builder_create_vtable@@Base+0xb8>
   168ac:	ldr	r2, [r5, #180]	; 0xb4
   168b0:	cmp	r2, #0
   168b4:	beq	16914 <flatcc_builder_create_vtable@@Base+0x114>
   168b8:	movw	r1, #4884	; 0x1314
   168bc:	movt	r1, #2
   168c0:	ldr	r3, [pc, #88]	; 16920 <flatcc_builder_create_vtable@@Base+0x120>
   168c4:	movw	r0, #5076	; 0x13d4
   168c8:	movt	r0, #2
   168cc:	movw	r2, #647	; 0x287
   168d0:	bl	124b4 <__assert_fail@plt>
   168d4:	ldr	r3, [r5, #180]	; 0xb4
   168d8:	cmp	r3, #0
   168dc:	bne	16848 <flatcc_builder_create_vtable@@Base+0x48>
   168e0:	ldr	r4, [r5, #140]	; 0x8c
   168e4:	mov	ip, r0
   168e8:	add	r0, r4, r0
   168ec:	str	r0, [r5, #140]	; 0x8c
   168f0:	mov	r3, r4
   168f4:	add	r1, sp, #16
   168f8:	str	ip, [sp]
   168fc:	ldr	r0, [r5, #36]	; 0x24
   16900:	ldr	r5, [r5, #44]	; 0x2c
   16904:	blx	r5
   16908:	cmp	r0, #0
   1690c:	beq	16888 <flatcc_builder_create_vtable@@Base+0x88>
   16910:	bl	13bf8 <flatcc_builder_default_alloc@@Base+0x14c>
   16914:	ldr	r4, [r5, #140]	; 0x8c
   16918:	b	168f0 <flatcc_builder_create_vtable@@Base+0xf0>
   1691c:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   16920:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>

00016924 <flatcc_builder_create_cached_vtable@@Base>:
   16924:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16928:	strd	r6, [sp, #8]
   1692c:	mov	r6, r0
   16930:	strd	r8, [sp, #16]
   16934:	mov	r9, r2
   16938:	mov	r8, r3
   1693c:	strd	sl, [sp, #24]
   16940:	str	lr, [sp, #32]
   16944:	sub	sp, sp, #28
   16948:	str	r1, [sp, #8]
   1694c:	ldr	r1, [r0, #116]	; 0x74
   16950:	cmp	r1, #0
   16954:	rsbne	r1, r1, #32
   16958:	beq	16ae0 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   1695c:	ldr	sl, [r6, #92]	; 0x5c
   16960:	lsr	r8, r8, r1
   16964:	adds	fp, sl, r8, lsl #2
   16968:	str	fp, [sp, #12]
   1696c:	beq	16b7c <flatcc_builder_create_cached_vtable@@Base+0x258>
   16970:	ldr	r5, [sl, r8, lsl #2]
   16974:	cmp	r5, #0
   16978:	beq	16bb0 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   1697c:	mov	r3, #0
   16980:	str	r8, [sp, #16]
   16984:	mov	r8, fp
   16988:	mov	fp, r6
   1698c:	ldr	r7, [r6, #68]	; 0x44
   16990:	str	r3, [sp, #20]
   16994:	ldr	r3, [r6, #100]	; 0x64
   16998:	mov	r6, r3
   1699c:	add	r4, r6, r5
   169a0:	ldr	r1, [r4, #8]
   169a4:	ldrh	r2, [r7, r1]
   169a8:	add	r1, r7, r1
   169ac:	cmp	r2, r9
   169b0:	bne	16a8c <flatcc_builder_create_cached_vtable@@Base+0x168>
   169b4:	mov	r2, r9
   169b8:	ldr	r0, [sp, #8]
   169bc:	bl	12418 <memcmp@plt>
   169c0:	cmp	r0, #0
   169c4:	bne	16a8c <flatcc_builder_create_cached_vtable@@Base+0x168>
   169c8:	ldr	r1, [r4, #4]
   169cc:	ldr	r2, [fp, #152]	; 0x98
   169d0:	cmp	r1, r2
   169d4:	beq	16a98 <flatcc_builder_create_cached_vtable@@Base+0x174>
   169d8:	ldr	r5, [r4, #12]
   169dc:	add	r8, r4, #12
   169e0:	str	r4, [sp, #20]
   169e4:	cmp	r5, #0
   169e8:	bne	1699c <flatcc_builder_create_cached_vtable@@Base+0x78>
   169ec:	ldr	r8, [sp, #16]
   169f0:	mov	r6, fp
   169f4:	ldr	r3, [r6, #104]	; 0x68
   169f8:	ldr	r4, [r6, #124]	; 0x7c
   169fc:	add	r2, r4, #16
   16a00:	cmp	r2, r3
   16a04:	bls	16a2c <flatcc_builder_create_cached_vtable@@Base+0x108>
   16a08:	mov	ip, #6
   16a0c:	mov	r3, #0
   16a10:	ldr	r0, [r6, #40]	; 0x28
   16a14:	add	r1, r6, #100	; 0x64
   16a18:	str	ip, [sp]
   16a1c:	ldr	r5, [r6, #48]	; 0x30
   16a20:	blx	r5
   16a24:	cmp	r0, #0
   16a28:	bne	16bac <flatcc_builder_create_cached_vtable@@Base+0x288>
   16a2c:	ldr	r5, [r6, #100]	; 0x64
   16a30:	adds	r7, r5, r4
   16a34:	beq	16b7c <flatcc_builder_create_cached_vtable@@Base+0x258>
   16a38:	ldr	r3, [r6, #124]	; 0x7c
   16a3c:	mov	r2, r9
   16a40:	ldr	r0, [r6, #152]	; 0x98
   16a44:	ldr	r1, [sp, #8]
   16a48:	add	ip, r3, #16
   16a4c:	str	ip, [r6, #124]	; 0x7c
   16a50:	str	r0, [r7, #4]
   16a54:	mov	r0, r6
   16a58:	ldr	ip, [sl, r8, lsl #2]
   16a5c:	str	ip, [r7, #12]
   16a60:	str	r3, [sl, r8, lsl #2]
   16a64:	bl	16800 <flatcc_builder_create_vtable@@Base>
   16a68:	cmp	r0, #0
   16a6c:	str	r0, [r5, r4]
   16a70:	beq	16b7c <flatcc_builder_create_cached_vtable@@Base+0x258>
   16a74:	ldr	r3, [sp, #20]
   16a78:	cmp	r3, #0
   16a7c:	beq	16bc0 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   16a80:	ldr	r3, [r3, #8]
   16a84:	str	r3, [r7, #8]
   16a88:	b	16ac4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16a8c:	add	r8, r4, #12
   16a90:	ldr	r5, [r4, #12]
   16a94:	b	169e4 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   16a98:	ldr	r3, [sp, #12]
   16a9c:	mov	fp, r8
   16aa0:	ldr	r8, [sp, #16]
   16aa4:	cmp	r3, fp
   16aa8:	beq	16ac0 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   16aac:	ldr	r3, [r4, #12]
   16ab0:	str	r3, [fp]
   16ab4:	ldr	r3, [sl, r8, lsl #2]
   16ab8:	str	r3, [r4, #12]
   16abc:	str	r5, [sl, r8, lsl #2]
   16ac0:	ldr	r0, [r4]
   16ac4:	add	sp, sp, #28
   16ac8:	ldrd	r4, [sp]
   16acc:	ldrd	r6, [sp, #8]
   16ad0:	ldrd	r8, [sp, #16]
   16ad4:	ldrd	sl, [sp, #24]
   16ad8:	add	sp, sp, #32
   16adc:	pop	{pc}		; (ldr pc, [sp], #4)
   16ae0:	ldr	r4, [r0, #124]	; 0x7c
   16ae4:	add	r5, r0, #92	; 0x5c
   16ae8:	cmp	r4, #0
   16aec:	bne	16c70 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   16af0:	ldr	r3, [r0, #104]	; 0x68
   16af4:	cmp	r3, #15
   16af8:	bls	16b84 <flatcc_builder_create_cached_vtable@@Base+0x260>
   16afc:	ldr	r3, [r6, #100]	; 0x64
   16b00:	cmp	r3, #0
   16b04:	beq	16b7c <flatcc_builder_create_cached_vtable@@Base+0x258>
   16b08:	mov	ip, #16
   16b0c:	mov	r2, #5
   16b10:	ldr	r0, [r6, #40]	; 0x28
   16b14:	mov	r1, r5
   16b18:	mov	r3, #1
   16b1c:	str	r2, [sp]
   16b20:	mov	r2, #256	; 0x100
   16b24:	str	ip, [r6, #124]	; 0x7c
   16b28:	ldr	r5, [r6, #48]	; 0x30
   16b2c:	blx	r5
   16b30:	cmp	r0, #0
   16b34:	bne	16b7c <flatcc_builder_create_cached_vtable@@Base+0x258>
   16b38:	mov	r3, #256	; 0x100
   16b3c:	ldr	r1, [r6, #96]	; 0x60
   16b40:	b	16b48 <flatcc_builder_create_cached_vtable@@Base+0x224>
   16b44:	mov	r3, r2
   16b48:	lsl	r2, r3, #1
   16b4c:	cmp	r2, r1
   16b50:	bls	16b44 <flatcc_builder_create_cached_vtable@@Base+0x220>
   16b54:	lsr	r3, r3, #2
   16b58:	cmp	r3, #1
   16b5c:	bls	16bb8 <flatcc_builder_create_cached_vtable@@Base+0x294>
   16b60:	mov	r2, #1
   16b64:	add	r4, r4, #1
   16b68:	cmp	r3, r2, lsl r4
   16b6c:	bhi	16b64 <flatcc_builder_create_cached_vtable@@Base+0x240>
   16b70:	rsb	r1, r4, #32
   16b74:	str	r4, [r6, #116]	; 0x74
   16b78:	b	1695c <flatcc_builder_create_cached_vtable@@Base+0x38>
   16b7c:	mov	r0, #0
   16b80:	b	16ac4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16b84:	mov	ip, #6
   16b88:	add	r1, r0, #100	; 0x64
   16b8c:	ldr	r0, [r0, #40]	; 0x28
   16b90:	mov	r3, r4
   16b94:	mov	r2, #16
   16b98:	str	ip, [sp]
   16b9c:	ldr	r7, [r6, #48]	; 0x30
   16ba0:	blx	r7
   16ba4:	cmp	r0, #0
   16ba8:	beq	16afc <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   16bac:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>
   16bb0:	str	r5, [sp, #20]
   16bb4:	b	169f4 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   16bb8:	mov	r1, #32
   16bbc:	b	16b74 <flatcc_builder_create_cached_vtable@@Base+0x250>
   16bc0:	ldr	r8, [r6, #120]	; 0x78
   16bc4:	ldr	r3, [r6, #172]	; 0xac
   16bc8:	add	r2, r9, r8
   16bcc:	cmp	r3, #0
   16bd0:	beq	16c10 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   16bd4:	cmp	r3, r2
   16bd8:	bcs	16c10 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   16bdc:	ldr	r3, [r6, #116]	; 0x74
   16be0:	cmp	r3, #0
   16be4:	beq	16ac4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16be8:	ldr	r7, [sp, #20]
   16bec:	ldr	r0, [r6, #92]	; 0x5c
   16bf0:	ldr	r2, [r6, #96]	; 0x60
   16bf4:	mov	r1, r7
   16bf8:	bl	12484 <memset@plt>
   16bfc:	mov	r3, #16
   16c00:	mov	r2, r7
   16c04:	ldr	r0, [r5, r4]
   16c08:	strd	r2, [r6, #120]	; 0x78
   16c0c:	b	16ac4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16c10:	ldr	r3, [r6, #72]	; 0x48
   16c14:	cmp	r3, r2
   16c18:	bcs	16c40 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   16c1c:	mov	ip, #2
   16c20:	mov	r3, #0
   16c24:	ldr	r0, [r6, #40]	; 0x28
   16c28:	add	r1, r6, #68	; 0x44
   16c2c:	str	ip, [sp]
   16c30:	ldr	sl, [r6, #48]	; 0x30
   16c34:	blx	sl
   16c38:	cmp	r0, #0
   16c3c:	bne	16bac <flatcc_builder_create_cached_vtable@@Base+0x288>
   16c40:	ldr	r3, [r6, #68]	; 0x44
   16c44:	adds	r0, r3, r8
   16c48:	beq	16c8c <flatcc_builder_create_cached_vtable@@Base+0x368>
   16c4c:	ldr	r3, [r6, #120]	; 0x78
   16c50:	mov	r2, r9
   16c54:	ldr	r1, [sp, #8]
   16c58:	add	r9, r3, r9
   16c5c:	str	r3, [r7, #8]
   16c60:	str	r9, [r6, #120]	; 0x78
   16c64:	bl	1240c <memcpy@plt>
   16c68:	ldr	r0, [r5, r4]
   16c6c:	b	16ac4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16c70:	movw	r1, #4884	; 0x1314
   16c74:	movt	r1, #2
   16c78:	ldr	r3, [pc, #20]	; 16c94 <flatcc_builder_create_cached_vtable@@Base+0x370>
   16c7c:	movw	r0, #5552	; 0x15b0
   16c80:	movt	r0, #2
   16c84:	movw	r2, #342	; 0x156
   16c88:	bl	124b4 <__assert_fail@plt>
   16c8c:	mvn	r0, #0
   16c90:	b	16ac4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   16c94:	muleq	r2, r4, r0

00016c98 <flatcc_builder_create_table@@Base>:
   16c98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16c9c:	mov	r5, r0
   16ca0:	strd	r6, [sp, #8]
   16ca4:	str	r8, [sp, #16]
   16ca8:	str	lr, [sp, #20]
   16cac:	sub	sp, sp, #88	; 0x58
   16cb0:	ldr	r6, [sp, #116]	; 0x74
   16cb4:	ldr	r0, [sp, #120]	; 0x78
   16cb8:	cmp	r6, #0
   16cbc:	blt	16e24 <flatcc_builder_create_table@@Base+0x18c>
   16cc0:	ands	r7, r0, #1
   16cc4:	beq	16e08 <flatcc_builder_create_table@@Base+0x170>
   16cc8:	ldrh	ip, [r5, #128]	; 0x80
   16ccc:	cmp	r3, #4
   16cd0:	sub	r0, r0, #1
   16cd4:	movcc	r3, #4
   16cd8:	cmp	ip, r3
   16cdc:	ldr	ip, [r5, #136]	; 0x88
   16ce0:	strhcc	r3, [r5, #128]	; 0x80
   16ce4:	sub	r3, r3, #1
   16ce8:	cmp	r6, #0
   16cec:	sub	r4, ip, r2
   16cf0:	mov	r8, r4
   16cf4:	sub	r4, r4, #4
   16cf8:	and	r8, r8, r3
   16cfc:	sub	r0, r4, r0
   16d00:	sub	r0, r0, r8
   16d04:	str	r0, [sp, #12]
   16d08:	beq	16d3c <flatcc_builder_create_table@@Base+0xa4>
   16d0c:	ldr	ip, [sp, #112]	; 0x70
   16d10:	sub	r4, r8, r4
   16d14:	sub	r4, r4, #4
   16d18:	add	r6, ip, r6, lsl #1
   16d1c:	ldrh	r3, [ip], #2
   16d20:	ldr	r0, [r1, r3]
   16d24:	sub	lr, r4, r3
   16d28:	cmp	r6, ip
   16d2c:	add	r0, r0, lr
   16d30:	str	r0, [r1, r3]
   16d34:	bne	16d1c <flatcc_builder_create_table@@Base+0x84>
   16d38:	ldr	ip, [r5, #136]	; 0x88
   16d3c:	mov	r0, #4
   16d40:	add	r3, sp, #12
   16d44:	mov	lr, #1
   16d48:	cmp	r2, #0
   16d4c:	moveq	r2, #2
   16d50:	str	r0, [sp, #16]
   16d54:	str	lr, [sp, #20]
   16d58:	str	r3, [sp, #24]
   16d5c:	str	r0, [sp, #28]
   16d60:	beq	16d84 <flatcc_builder_create_table@@Base+0xec>
   16d64:	mov	r3, #2
   16d68:	add	r0, r2, r0
   16d6c:	mov	r7, r3
   16d70:	str	r0, [sp, #16]
   16d74:	str	r2, [sp, #36]	; 0x24
   16d78:	mov	r2, #3
   16d7c:	str	r3, [sp, #20]
   16d80:	str	r1, [sp, #32]
   16d84:	cmp	r8, #0
   16d88:	bne	16ddc <flatcc_builder_create_table@@Base+0x144>
   16d8c:	sub	r4, ip, r0
   16d90:	cmp	r4, ip
   16d94:	bge	16e44 <flatcc_builder_create_table@@Base+0x1ac>
   16d98:	mov	r2, r7
   16d9c:	mov	r3, r4
   16da0:	str	r0, [sp]
   16da4:	add	r1, sp, #24
   16da8:	ldr	r0, [r5, #36]	; 0x24
   16dac:	ldr	r6, [r5, #44]	; 0x2c
   16db0:	blx	r6
   16db4:	cmp	r0, #0
   16db8:	bne	16e40 <flatcc_builder_create_table@@Base+0x1a8>
   16dbc:	mov	r0, r4
   16dc0:	str	r4, [r5, #136]	; 0x88
   16dc4:	add	sp, sp, #88	; 0x58
   16dc8:	ldrd	r4, [sp]
   16dcc:	ldrd	r6, [sp, #8]
   16dd0:	ldr	r8, [sp, #16]
   16dd4:	add	sp, sp, #20
   16dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16ddc:	ldr	r1, [pc, #124]	; 16e60 <flatcc_builder_create_table@@Base+0x1c8>
   16de0:	add	r7, r7, #1
   16de4:	add	r3, sp, #88	; 0x58
   16de8:	add	r3, r3, r7, lsl #3
   16dec:	add	r0, r0, r8
   16df0:	mov	r7, r2
   16df4:	str	r0, [sp, #16]
   16df8:	str	r2, [sp, #20]
   16dfc:	str	r1, [r3, #-72]	; 0xffffffb8
   16e00:	str	r8, [r3, #-68]	; 0xffffffbc
   16e04:	b	16d8c <flatcc_builder_create_table@@Base+0xf4>
   16e08:	movw	r1, #4884	; 0x1314
   16e0c:	movt	r1, #2
   16e10:	ldr	r3, [pc, #76]	; 16e64 <flatcc_builder_create_table@@Base+0x1cc>
   16e14:	movw	r0, #5588	; 0x15d4
   16e18:	movt	r0, #2
   16e1c:	movw	r2, #1243	; 0x4db
   16e20:	bl	124b4 <__assert_fail@plt>
   16e24:	movw	r1, #4884	; 0x1314
   16e28:	movt	r1, #2
   16e2c:	ldr	r3, [pc, #48]	; 16e64 <flatcc_builder_create_table@@Base+0x1cc>
   16e30:	movw	r0, #5568	; 0x15c0
   16e34:	movt	r0, #2
   16e38:	movw	r2, #1237	; 0x4d5
   16e3c:	bl	124b4 <__assert_fail@plt>
   16e40:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   16e44:	movw	r1, #4884	; 0x1314
   16e48:	movt	r1, #2
   16e4c:	ldr	r3, [pc, #20]	; 16e68 <flatcc_builder_create_table@@Base+0x1d0>
   16e50:	movw	r0, #5076	; 0x13d4
   16e54:	movt	r0, #2
   16e58:	movw	r2, #647	; 0x287
   16e5c:	bl	124b4 <__assert_fail@plt>
   16e60:	andeq	r0, r2, ip, ror #24
   16e64:	andeq	r1, r2, r0, lsr #1
   16e68:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>

00016e6c <flatcc_builder_check_required_field@@Base>:
   16e6c:	ldr	r3, [r0, #32]
   16e70:	ldrh	r3, [r3, #14]
   16e74:	cmp	r3, #3
   16e78:	bne	16ea8 <flatcc_builder_check_required_field@@Base+0x3c>
   16e7c:	ldrh	r3, [r0, #8]
   16e80:	cmp	r3, r1
   16e84:	bls	16ea0 <flatcc_builder_check_required_field@@Base+0x34>
   16e88:	ldr	r3, [r0, #4]
   16e8c:	lsl	r1, r1, #1
   16e90:	ldrh	r0, [r3, r1]
   16e94:	adds	r0, r0, #0
   16e98:	movne	r0, #1
   16e9c:	bx	lr
   16ea0:	mov	r0, #0
   16ea4:	bx	lr
   16ea8:	movw	r1, #4884	; 0x1314
   16eac:	movt	r1, #2
   16eb0:	ldr	r3, [pc, #20]	; 16ecc <flatcc_builder_check_required_field@@Base+0x60>
   16eb4:	movw	r0, #5600	; 0x15e0
   16eb8:	movt	r0, #2
   16ebc:	str	r4, [sp, #-8]!
   16ec0:	movw	r2, #1272	; 0x4f8
   16ec4:	str	lr, [sp, #4]
   16ec8:	bl	124b4 <__assert_fail@plt>
   16ecc:	strheq	r1, [r2], -ip

00016ed0 <flatcc_builder_check_union_field@@Base>:
   16ed0:	ldr	r3, [r0, #32]
   16ed4:	ldrh	r3, [r3, #14]
   16ed8:	cmp	r3, #3
   16edc:	bne	16f40 <flatcc_builder_check_union_field@@Base+0x70>
   16ee0:	cmp	r1, #0
   16ee4:	beq	16f2c <flatcc_builder_check_union_field@@Base+0x5c>
   16ee8:	ldrh	r3, [r0, #8]
   16eec:	cmp	r3, r1
   16ef0:	bls	16f2c <flatcc_builder_check_union_field@@Base+0x5c>
   16ef4:	ldr	r3, [r0, #4]
   16ef8:	sub	r1, r1, #-2147483647	; 0x80000001
   16efc:	lsl	r1, r1, #1
   16f00:	ldrh	r2, [r3, r1]!
   16f04:	cmp	r2, #0
   16f08:	ldrh	r1, [r3, #2]
   16f0c:	beq	16f20 <flatcc_builder_check_union_field@@Base+0x50>
   16f10:	ldr	r3, [r0, #16]
   16f14:	ldrb	r3, [r3, r2]
   16f18:	cmp	r3, #0
   16f1c:	bne	16f34 <flatcc_builder_check_union_field@@Base+0x64>
   16f20:	clz	r0, r1
   16f24:	lsr	r0, r0, #5
   16f28:	bx	lr
   16f2c:	mov	r0, #0
   16f30:	bx	lr
   16f34:	adds	r0, r1, #0
   16f38:	movne	r0, #1
   16f3c:	bx	lr
   16f40:	movw	r1, #4884	; 0x1314
   16f44:	movt	r1, #2
   16f48:	ldr	r3, [pc, #20]	; 16f64 <flatcc_builder_check_union_field@@Base+0x94>
   16f4c:	movw	r0, #5600	; 0x15e0
   16f50:	movt	r0, #2
   16f54:	str	r4, [sp, #-8]!
   16f58:	movw	r2, #1279	; 0x4ff
   16f5c:	str	lr, [sp, #4]
   16f60:	bl	124b4 <__assert_fail@plt>
   16f64:	andeq	r1, r2, r0, ror #1

00016f68 <flatcc_builder_check_required@@Base>:
   16f68:	ldr	r3, [r0, #32]
   16f6c:	ldrh	r3, [r3, #14]
   16f70:	cmp	r3, #3
   16f74:	bne	16fdc <flatcc_builder_check_required@@Base+0x74>
   16f78:	ldrh	r3, [r0, #8]
   16f7c:	cmp	r3, r2
   16f80:	blt	16fd4 <flatcc_builder_check_required@@Base+0x6c>
   16f84:	cmp	r2, #0
   16f88:	ble	16fcc <flatcc_builder_check_required@@Base+0x64>
   16f8c:	ldrh	r3, [r1]
   16f90:	ldr	ip, [r0, #4]
   16f94:	lsl	r3, r3, #1
   16f98:	ldrh	r0, [ip, r3]
   16f9c:	cmp	r0, #0
   16fa0:	bxeq	lr
   16fa4:	add	r2, r1, r2, lsl #1
   16fa8:	add	r1, r1, #2
   16fac:	b	16fc4 <flatcc_builder_check_required@@Base+0x5c>
   16fb0:	ldrh	r3, [r1], #2
   16fb4:	lsl	r3, r3, #1
   16fb8:	ldrh	r0, [ip, r3]
   16fbc:	cmp	r0, #0
   16fc0:	bxeq	lr
   16fc4:	cmp	r1, r2
   16fc8:	bne	16fb0 <flatcc_builder_check_required@@Base+0x48>
   16fcc:	mov	r0, #1
   16fd0:	bx	lr
   16fd4:	mov	r0, #0
   16fd8:	bx	lr
   16fdc:	movw	r1, #4884	; 0x1314
   16fe0:	movt	r1, #2
   16fe4:	ldr	r3, [pc, #20]	; 17000 <flatcc_builder_check_required@@Base+0x98>
   16fe8:	movw	r0, #5600	; 0x15e0
   16fec:	movt	r0, #2
   16ff0:	str	r4, [sp, #-8]!
   16ff4:	movw	r2, #1297	; 0x511
   16ff8:	str	lr, [sp, #4]
   16ffc:	bl	124b4 <__assert_fail@plt>
   17000:	andeq	r1, r2, r4, lsl #2

00017004 <flatcc_builder_end_table@@Base>:
   17004:	ldr	r3, [r0, #32]
   17008:	strd	r4, [sp, #-20]!	; 0xffffffec
   1700c:	ldrh	r3, [r3, #14]
   17010:	strd	r6, [sp, #8]
   17014:	str	lr, [sp, #16]
   17018:	sub	sp, sp, #20
   1701c:	cmp	r3, #3
   17020:	bne	171a4 <flatcc_builder_end_table@@Base+0x1a0>
   17024:	ldrh	r5, [r0, #8]
   17028:	movw	ip, #31153	; 0x79b1
   1702c:	movt	ip, #40503	; 0x9e37
   17030:	mov	r4, r0
   17034:	ldr	r1, [r0, #4]
   17038:	ldr	r3, [r0, #12]
   1703c:	add	r5, r5, #2
   17040:	lsl	r5, r5, #1
   17044:	ldr	lr, [r0, #20]
   17048:	sub	r6, r1, #4
   1704c:	uxth	r5, r5
   17050:	eor	r3, r3, r5
   17054:	mov	r2, r5
   17058:	strh	r5, [r1, #-4]
   1705c:	mul	r3, ip, r3
   17060:	add	lr, lr, #4
   17064:	uxth	lr, lr
   17068:	eor	r3, r3, lr
   1706c:	strh	lr, [r1, #-2]
   17070:	mov	r1, r6
   17074:	mul	r3, ip, r3
   17078:	str	r3, [r0, #12]
   1707c:	bl	16924 <flatcc_builder_create_cached_vtable@@Base>
   17080:	subs	r7, r0, #0
   17084:	bne	170a4 <flatcc_builder_end_table@@Base+0xa0>
   17088:	mov	r5, #0
   1708c:	mov	r0, r5
   17090:	add	sp, sp, #20
   17094:	ldrd	r4, [sp]
   17098:	ldrd	r6, [sp, #8]
   1709c:	add	sp, sp, #16
   170a0:	pop	{pc}		; (ldr pc, [sp], #4)
   170a4:	mov	r2, r5
   170a8:	mov	r1, #0
   170ac:	mov	r0, r6
   170b0:	bl	12484 <memset@plt>
   170b4:	ldr	ip, [r4]
   170b8:	mov	r0, r4
   170bc:	ldr	r3, [r4, #32]
   170c0:	ldr	r2, [r4, #76]	; 0x4c
   170c4:	ldr	r1, [r3, #20]
   170c8:	str	r7, [sp, #8]
   170cc:	ldrh	r3, [r4, #130]	; 0x82
   170d0:	add	r2, r2, r1
   170d4:	ldr	r1, [r4, #16]
   170d8:	sub	ip, ip, r2
   170dc:	asr	ip, ip, #1
   170e0:	str	r2, [sp]
   170e4:	ldr	r2, [r4, #20]
   170e8:	str	ip, [sp, #4]
   170ec:	bl	16c98 <flatcc_builder_create_table@@Base>
   170f0:	subs	r5, r0, #0
   170f4:	beq	17088 <flatcc_builder_end_table@@Base+0x84>
   170f8:	ldr	r3, [r4, #32]
   170fc:	mov	r1, #0
   17100:	ldr	r0, [r4, #52]	; 0x34
   17104:	ldr	r2, [r4, #76]	; 0x4c
   17108:	ldr	ip, [r3, #16]
   1710c:	ldr	r6, [r3, #20]
   17110:	ldrh	lr, [r3, #28]
   17114:	add	r0, r0, ip
   17118:	ldr	ip, [r3, #24]
   1711c:	add	r3, r2, r6
   17120:	ldr	r2, [r4, #20]
   17124:	str	r3, [r4]
   17128:	str	r0, [r4, #4]
   1712c:	strh	lr, [r4, #8]
   17130:	str	ip, [r4, #12]
   17134:	ldr	r0, [r4, #16]
   17138:	bl	12484 <memset@plt>
   1713c:	ldr	r3, [r4, #32]
   17140:	ldr	r0, [r4, #60]	; 0x3c
   17144:	ldr	r2, [r4, #64]	; 0x40
   17148:	ldr	ip, [r3]
   1714c:	ldmib	r3, {r1, lr}
   17150:	add	r0, r0, ip
   17154:	sub	r2, r2, ip
   17158:	str	r0, [r4, #16]
   1715c:	cmp	r2, r1
   17160:	ldrh	r0, [r4, #128]	; 0x80
   17164:	movcs	r2, r1
   17168:	str	lr, [r4, #20]
   1716c:	str	ip, [r4, #28]
   17170:	ldrh	ip, [r4, #130]	; 0x82
   17174:	str	r2, [r4, #24]
   17178:	ldr	r2, [r4, #156]	; 0x9c
   1717c:	str	r1, [r3, #4]
   17180:	cmp	r0, ip
   17184:	sub	r0, r3, #36	; 0x24
   17188:	strhcc	ip, [r4, #128]	; 0x80
   1718c:	ldrh	r1, [r3, #12]
   17190:	sub	r3, r2, #1
   17194:	str	r0, [r4, #32]
   17198:	strh	r1, [r4, #130]	; 0x82
   1719c:	str	r3, [r4, #156]	; 0x9c
   171a0:	b	1708c <flatcc_builder_end_table@@Base+0x88>
   171a4:	movw	r1, #4884	; 0x1314
   171a8:	movt	r1, #2
   171ac:	ldr	r3, [pc, #12]	; 171c0 <flatcc_builder_end_table@@Base+0x1bc>
   171b0:	movw	r0, #5600	; 0x15e0
   171b4:	movt	r0, #2
   171b8:	movw	r2, #1317	; 0x525
   171bc:	bl	124b4 <__assert_fail@plt>
   171c0:	andeq	r1, r2, r4, lsr #2

000171c4 <flatcc_builder_create_vector@@Base>:
   171c4:	strd	r4, [sp, #-16]!
   171c8:	mov	r4, r0
   171cc:	str	r6, [sp, #8]
   171d0:	str	lr, [sp, #12]
   171d4:	sub	sp, sp, #88	; 0x58
   171d8:	ldr	ip, [sp, #108]	; 0x6c
   171dc:	ldrh	r0, [sp, #104]	; 0x68
   171e0:	cmp	r2, ip
   171e4:	bhi	172d8 <flatcc_builder_create_vector@@Base+0x114>
   171e8:	ldrh	ip, [r4, #128]	; 0x80
   171ec:	cmp	r0, #4
   171f0:	mul	r3, r3, r2
   171f4:	movcc	r0, #4
   171f8:	add	lr, sp, #12
   171fc:	str	r2, [sp, #12]
   17200:	ldr	r6, [r4, #136]	; 0x88
   17204:	mov	r2, #1
   17208:	str	lr, [sp, #24]
   1720c:	cmp	ip, r0
   17210:	mov	ip, #4
   17214:	strhcc	r0, [r4, #128]	; 0x80
   17218:	sub	lr, r6, r3
   1721c:	sub	r0, r0, #1
   17220:	cmp	r3, #0
   17224:	and	r0, r0, lr
   17228:	str	ip, [sp, #16]
   1722c:	moveq	r3, #2
   17230:	str	r2, [sp, #20]
   17234:	str	ip, [sp, #28]
   17238:	beq	1725c <flatcc_builder_create_vector@@Base+0x98>
   1723c:	mov	lr, #2
   17240:	add	ip, r3, ip
   17244:	mov	r2, lr
   17248:	str	ip, [sp, #16]
   1724c:	str	r3, [sp, #36]	; 0x24
   17250:	mov	r3, #3
   17254:	str	lr, [sp, #20]
   17258:	str	r1, [sp, #32]
   1725c:	cmp	r0, #0
   17260:	bne	172ac <flatcc_builder_create_vector@@Base+0xe8>
   17264:	sub	r5, r6, ip
   17268:	cmp	r6, r5
   1726c:	ble	172f8 <flatcc_builder_create_vector@@Base+0x134>
   17270:	mov	r3, r5
   17274:	add	r1, sp, #24
   17278:	str	ip, [sp]
   1727c:	ldr	r0, [r4, #36]	; 0x24
   17280:	ldr	r6, [r4, #44]	; 0x2c
   17284:	blx	r6
   17288:	cmp	r0, #0
   1728c:	bne	172f4 <flatcc_builder_create_vector@@Base+0x130>
   17290:	mov	r0, r5
   17294:	str	r5, [r4, #136]	; 0x88
   17298:	add	sp, sp, #88	; 0x58
   1729c:	ldrd	r4, [sp]
   172a0:	ldr	r6, [sp, #8]
   172a4:	add	sp, sp, #12
   172a8:	pop	{pc}		; (ldr pc, [sp], #4)
   172ac:	ldr	lr, [pc, #96]	; 17314 <flatcc_builder_create_vector@@Base+0x150>
   172b0:	add	r2, r2, #1
   172b4:	add	r1, sp, #88	; 0x58
   172b8:	add	r1, r1, r2, lsl #3
   172bc:	add	ip, ip, r0
   172c0:	mov	r2, r3
   172c4:	str	ip, [sp, #16]
   172c8:	str	r3, [sp, #20]
   172cc:	str	lr, [r1, #-72]	; 0xffffffb8
   172d0:	str	r0, [r1, #-68]	; 0xffffffbc
   172d4:	b	17264 <flatcc_builder_create_vector@@Base+0xa0>
   172d8:	movw	r1, #4884	; 0x1314
   172dc:	movt	r1, #2
   172e0:	ldr	r3, [pc, #48]	; 17318 <flatcc_builder_create_vector@@Base+0x154>
   172e4:	movw	r0, #5644	; 0x160c
   172e8:	movt	r0, #2
   172ec:	movw	r2, #1365	; 0x555
   172f0:	bl	124b4 <__assert_fail@plt>
   172f4:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   172f8:	movw	r1, #4884	; 0x1314
   172fc:	movt	r1, #2
   17300:	ldr	r3, [pc, #20]	; 1731c <flatcc_builder_create_vector@@Base+0x158>
   17304:	movw	r0, #5076	; 0x13d4
   17308:	movt	r0, #2
   1730c:	movw	r2, #647	; 0x287
   17310:	bl	124b4 <__assert_fail@plt>
   17314:	andeq	r0, r2, ip, ror #24
   17318:	andeq	r1, r2, r0, asr #2
   1731c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>

00017320 <flatcc_builder_end_vector@@Base>:
   17320:	ldr	r2, [r0, #32]
   17324:	strd	r4, [sp, #-16]!
   17328:	ldrh	r3, [r2, #14]
   1732c:	str	r6, [sp, #8]
   17330:	str	lr, [sp, #12]
   17334:	sub	sp, sp, #88	; 0x58
   17338:	cmp	r3, #4
   1733c:	bne	17504 <flatcc_builder_end_vector@@Base+0x1e4>
   17340:	ldr	ip, [r2, #20]
   17344:	mov	r4, r0
   17348:	ldr	r1, [r2, #24]
   1734c:	ldrh	r3, [r0, #130]	; 0x82
   17350:	ldr	r5, [r4, #16]
   17354:	cmp	ip, r1
   17358:	ldr	r0, [r2, #16]
   1735c:	bhi	174e8 <flatcc_builder_end_vector@@Base+0x1c8>
   17360:	cmp	r3, #4
   17364:	mul	r0, r0, ip
   17368:	mov	r1, #4
   1736c:	ldrh	r2, [r4, #128]	; 0x80
   17370:	movcc	r3, #4
   17374:	add	r6, sp, #12
   17378:	str	ip, [sp, #12]
   1737c:	ldr	lr, [r4, #136]	; 0x88
   17380:	str	r1, [sp, #16]
   17384:	str	r6, [sp, #24]
   17388:	cmp	r2, r3
   1738c:	mov	r2, #1
   17390:	strhcc	r3, [r4, #128]	; 0x80
   17394:	sub	ip, lr, r0
   17398:	sub	r3, r3, #1
   1739c:	cmp	r0, #0
   173a0:	and	r3, r3, ip
   173a4:	str	r2, [sp, #20]
   173a8:	moveq	r0, #2
   173ac:	str	r1, [sp, #28]
   173b0:	beq	173d4 <flatcc_builder_end_vector@@Base+0xb4>
   173b4:	mov	ip, #2
   173b8:	add	r1, r0, r1
   173bc:	mov	r2, ip
   173c0:	str	r1, [sp, #16]
   173c4:	str	r0, [sp, #36]	; 0x24
   173c8:	mov	r0, #3
   173cc:	str	ip, [sp, #20]
   173d0:	str	r5, [sp, #32]
   173d4:	cmp	r3, #0
   173d8:	bne	1749c <flatcc_builder_end_vector@@Base+0x17c>
   173dc:	sub	r5, lr, r1
   173e0:	cmp	lr, r5
   173e4:	ble	174cc <flatcc_builder_end_vector@@Base+0x1ac>
   173e8:	mov	r3, r5
   173ec:	str	r1, [sp]
   173f0:	add	r1, sp, #24
   173f4:	ldr	r0, [r4, #36]	; 0x24
   173f8:	ldr	r6, [r4, #44]	; 0x2c
   173fc:	blx	r6
   17400:	subs	r1, r0, #0
   17404:	bne	174c8 <flatcc_builder_end_vector@@Base+0x1a8>
   17408:	cmp	r5, #0
   1740c:	str	r5, [r4, #136]	; 0x88
   17410:	beq	17484 <flatcc_builder_end_vector@@Base+0x164>
   17414:	ldr	r0, [r4, #16]
   17418:	ldr	r2, [r4, #20]
   1741c:	bl	12484 <memset@plt>
   17420:	ldr	r3, [r4, #32]
   17424:	ldr	r0, [r4, #60]	; 0x3c
   17428:	ldr	r2, [r4, #64]	; 0x40
   1742c:	ldr	ip, [r3]
   17430:	ldmib	r3, {r1, lr}
   17434:	add	r0, r0, ip
   17438:	sub	r2, r2, ip
   1743c:	str	r0, [r4, #16]
   17440:	cmp	r2, r1
   17444:	ldrh	r0, [r4, #128]	; 0x80
   17448:	movcs	r2, r1
   1744c:	str	lr, [r4, #20]
   17450:	str	ip, [r4, #28]
   17454:	ldrh	ip, [r4, #130]	; 0x82
   17458:	str	r2, [r4, #24]
   1745c:	ldr	r2, [r4, #156]	; 0x9c
   17460:	str	r1, [r3, #4]
   17464:	cmp	r0, ip
   17468:	sub	r0, r3, #36	; 0x24
   1746c:	strhcc	ip, [r4, #128]	; 0x80
   17470:	ldrh	r1, [r3, #12]
   17474:	sub	r3, r2, #1
   17478:	str	r0, [r4, #32]
   1747c:	strh	r1, [r4, #130]	; 0x82
   17480:	str	r3, [r4, #156]	; 0x9c
   17484:	mov	r0, r5
   17488:	add	sp, sp, #88	; 0x58
   1748c:	ldrd	r4, [sp]
   17490:	ldr	r6, [sp, #8]
   17494:	add	sp, sp, #12
   17498:	pop	{pc}		; (ldr pc, [sp], #4)
   1749c:	ldr	r5, [pc, #124]	; 17520 <flatcc_builder_end_vector@@Base+0x200>
   174a0:	add	r2, r2, #1
   174a4:	add	ip, sp, #88	; 0x58
   174a8:	add	ip, ip, r2, lsl #3
   174ac:	add	r1, r1, r3
   174b0:	mov	r2, r0
   174b4:	str	r1, [sp, #16]
   174b8:	str	r0, [sp, #20]
   174bc:	str	r5, [ip, #-72]	; 0xffffffb8
   174c0:	str	r3, [ip, #-68]	; 0xffffffbc
   174c4:	b	173dc <flatcc_builder_end_vector@@Base+0xbc>
   174c8:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   174cc:	movw	r1, #4884	; 0x1314
   174d0:	movt	r1, #2
   174d4:	ldr	r3, [pc, #72]	; 17524 <flatcc_builder_end_vector@@Base+0x204>
   174d8:	movw	r0, #5076	; 0x13d4
   174dc:	movt	r0, #2
   174e0:	movw	r2, #647	; 0x287
   174e4:	bl	124b4 <__assert_fail@plt>
   174e8:	movw	r1, #4884	; 0x1314
   174ec:	movt	r1, #2
   174f0:	ldr	r3, [pc, #48]	; 17528 <flatcc_builder_end_vector@@Base+0x208>
   174f4:	movw	r0, #5644	; 0x160c
   174f8:	movt	r0, #2
   174fc:	movw	r2, #1365	; 0x555
   17500:	bl	124b4 <__assert_fail@plt>
   17504:	movw	r1, #4884	; 0x1314
   17508:	movt	r1, #2
   1750c:	ldr	r3, [pc, #24]	; 1752c <flatcc_builder_end_vector@@Base+0x20c>
   17510:	movw	r0, #5248	; 0x1480
   17514:	movt	r0, #2
   17518:	movw	r2, #1400	; 0x578
   1751c:	bl	124b4 <__assert_fail@plt>
   17520:	andeq	r0, r2, ip, ror #24
   17524:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   17528:	andeq	r1, r2, r0, asr #2
   1752c:	andeq	r1, r2, r0, ror #2

00017530 <flatcc_builder_vector_count@@Base>:
   17530:	ldr	r3, [r0, #32]
   17534:	ldr	r0, [r3, #20]
   17538:	bx	lr

0001753c <flatcc_builder_vector_edit@@Base>:
   1753c:	ldr	r0, [r0, #16]
   17540:	bx	lr

00017544 <flatcc_builder_create_offset_vector_direct@@Base>:
   17544:	cmn	r2, #-1073741823	; 0xc0000001
   17548:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1754c:	strd	r6, [sp, #8]
   17550:	str	r8, [sp, #16]
   17554:	str	lr, [sp, #20]
   17558:	sub	sp, sp, #88	; 0x58
   1755c:	bhi	17660 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   17560:	ldrh	r3, [r0, #128]	; 0x80
   17564:	mov	r4, r0
   17568:	mov	ip, #1
   1756c:	str	r2, [sp, #12]
   17570:	ldr	r5, [r4, #136]	; 0x88
   17574:	str	ip, [sp, #20]
   17578:	cmp	r3, #3
   1757c:	movls	r3, #4
   17580:	strhls	r3, [r0, #128]	; 0x80
   17584:	mov	r0, #4
   17588:	add	r3, sp, #12
   1758c:	lsls	lr, r2, #2
   17590:	str	r0, [sp, #16]
   17594:	moveq	r7, #2
   17598:	str	r3, [sp, #24]
   1759c:	and	r3, r5, #3
   175a0:	str	r0, [sp, #28]
   175a4:	beq	175c8 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   175a8:	mov	r6, #2
   175ac:	add	r0, lr, r0
   175b0:	mov	ip, r6
   175b4:	mov	r7, #3
   175b8:	str	r0, [sp, #16]
   175bc:	str	r6, [sp, #20]
   175c0:	str	r1, [sp, #32]
   175c4:	str	lr, [sp, #36]	; 0x24
   175c8:	cmp	r3, #0
   175cc:	bne	17634 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   175d0:	cmp	r2, #0
   175d4:	beq	17684 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   175d8:	ldr	r3, [r1]
   175dc:	cmp	r3, #0
   175e0:	subne	lr, lr, #4
   175e4:	movne	r2, #0
   175e8:	beq	17618 <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   175ec:	sub	r3, r3, #4
   175f0:	cmp	r2, lr
   175f4:	sub	r3, r3, r5
   175f8:	add	r3, r3, r0
   175fc:	sub	r3, r3, r2
   17600:	str	r3, [r1]
   17604:	beq	17680 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   17608:	ldr	r3, [r1, #4]!
   1760c:	add	r2, r2, #4
   17610:	cmp	r3, #0
   17614:	bne	175ec <flatcc_builder_create_offset_vector_direct@@Base+0xa8>
   17618:	movw	r1, #4884	; 0x1314
   1761c:	movt	r1, #2
   17620:	ldr	r3, [pc, #176]	; 176d8 <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   17624:	movw	r0, #5076	; 0x13d4
   17628:	movt	r0, #2
   1762c:	movw	r2, #1463	; 0x5b7
   17630:	bl	124b4 <__assert_fail@plt>
   17634:	ldr	r8, [pc, #160]	; 176dc <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   17638:	add	ip, ip, #1
   1763c:	add	r6, sp, #88	; 0x58
   17640:	add	r6, r6, ip, lsl #3
   17644:	add	r0, r0, r3
   17648:	mov	ip, r7
   1764c:	str	r0, [sp, #16]
   17650:	str	r7, [sp, #20]
   17654:	str	r8, [r6, #-72]	; 0xffffffb8
   17658:	str	r3, [r6, #-68]	; 0xffffffbc
   1765c:	b	175d0 <flatcc_builder_create_offset_vector_direct@@Base+0x8c>
   17660:	mov	r6, #0
   17664:	mov	r0, r6
   17668:	add	sp, sp, #88	; 0x58
   1766c:	ldrd	r4, [sp]
   17670:	ldrd	r6, [sp, #8]
   17674:	ldr	r8, [sp, #16]
   17678:	add	sp, sp, #20
   1767c:	pop	{pc}		; (ldr pc, [sp], #4)
   17680:	ldr	r5, [r4, #136]	; 0x88
   17684:	sub	r6, r5, r0
   17688:	cmp	r6, r5
   1768c:	bge	176bc <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   17690:	mov	r2, ip
   17694:	mov	r3, r6
   17698:	str	r0, [sp]
   1769c:	add	r1, sp, #24
   176a0:	ldr	r0, [r4, #36]	; 0x24
   176a4:	ldr	r5, [r4, #44]	; 0x2c
   176a8:	blx	r5
   176ac:	cmp	r0, #0
   176b0:	streq	r6, [r4, #136]	; 0x88
   176b4:	beq	17664 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   176b8:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   176bc:	movw	r1, #4884	; 0x1314
   176c0:	movt	r1, #2
   176c4:	ldr	r3, [pc, #20]	; 176e0 <flatcc_builder_create_offset_vector_direct@@Base+0x19c>
   176c8:	movw	r0, #5076	; 0x13d4
   176cc:	movt	r0, #2
   176d0:	movw	r2, #647	; 0x287
   176d4:	bl	124b4 <__assert_fail@plt>
   176d8:	andeq	r0, r2, ip, ror #28
   176dc:	andeq	r0, r2, ip, ror #24
   176e0:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>

000176e4 <flatcc_builder_end_offset_vector@@Base>:
   176e4:	ldr	r3, [r0, #32]
   176e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   176ec:	ldrh	r2, [r3, #14]
   176f0:	strd	r6, [sp, #8]
   176f4:	str	r8, [sp, #16]
   176f8:	str	lr, [sp, #20]
   176fc:	sub	sp, sp, #88	; 0x58
   17700:	cmp	r2, #5
   17704:	bne	178ec <flatcc_builder_end_offset_vector@@Base+0x208>
   17708:	ldr	r3, [r3, #20]
   1770c:	cmn	r3, #-1073741823	; 0xc0000001
   17710:	bhi	17814 <flatcc_builder_end_offset_vector@@Base+0x130>
   17714:	ldrh	r2, [r0, #128]	; 0x80
   17718:	mov	r4, r0
   1771c:	add	r5, sp, #12
   17720:	mov	r1, #1
   17724:	str	r3, [sp, #12]
   17728:	ldr	ip, [r4, #136]	; 0x88
   1772c:	str	r1, [sp, #20]
   17730:	ldr	r0, [r0, #16]
   17734:	cmp	r2, #3
   17738:	str	r5, [sp, #24]
   1773c:	movls	r2, #4
   17740:	and	r5, ip, #3
   17744:	strhls	r2, [r4, #128]	; 0x80
   17748:	mov	r2, #4
   1774c:	lsls	lr, r3, #2
   17750:	moveq	r6, #2
   17754:	str	r2, [sp, #16]
   17758:	str	r2, [sp, #28]
   1775c:	beq	17780 <flatcc_builder_end_offset_vector@@Base+0x9c>
   17760:	mov	r7, #2
   17764:	add	r2, lr, r2
   17768:	mov	r1, r7
   1776c:	mov	r6, #3
   17770:	str	r2, [sp, #16]
   17774:	str	r7, [sp, #20]
   17778:	str	r0, [sp, #32]
   1777c:	str	lr, [sp, #36]	; 0x24
   17780:	cmp	r5, #0
   17784:	bne	177ec <flatcc_builder_end_offset_vector@@Base+0x108>
   17788:	cmp	r3, #0
   1778c:	beq	1783c <flatcc_builder_end_offset_vector@@Base+0x158>
   17790:	ldr	r3, [r0]
   17794:	cmp	r3, #0
   17798:	subne	lr, lr, #4
   1779c:	movne	r1, #0
   177a0:	beq	177d0 <flatcc_builder_end_offset_vector@@Base+0xec>
   177a4:	sub	r3, r3, #4
   177a8:	cmp	r1, lr
   177ac:	sub	r3, r3, ip
   177b0:	add	r3, r3, r2
   177b4:	sub	r3, r3, r1
   177b8:	str	r3, [r0]
   177bc:	beq	17834 <flatcc_builder_end_offset_vector@@Base+0x150>
   177c0:	ldr	r3, [r0, #4]!
   177c4:	add	r1, r1, #4
   177c8:	cmp	r3, #0
   177cc:	bne	177a4 <flatcc_builder_end_offset_vector@@Base+0xc0>
   177d0:	movw	r1, #4884	; 0x1314
   177d4:	movt	r1, #2
   177d8:	ldr	r3, [pc, #328]	; 17928 <flatcc_builder_end_offset_vector@@Base+0x244>
   177dc:	movw	r0, #5076	; 0x13d4
   177e0:	movt	r0, #2
   177e4:	movw	r2, #1463	; 0x5b7
   177e8:	bl	124b4 <__assert_fail@plt>
   177ec:	ldr	r7, [pc, #312]	; 1792c <flatcc_builder_end_offset_vector@@Base+0x248>
   177f0:	add	r1, r1, #1
   177f4:	add	r8, sp, #88	; 0x58
   177f8:	add	r1, r8, r1, lsl #3
   177fc:	add	r2, r2, r5
   17800:	str	r2, [sp, #16]
   17804:	str	r6, [sp, #20]
   17808:	str	r7, [r1, #-72]	; 0xffffffb8
   1780c:	str	r5, [r1, #-68]	; 0xffffffbc
   17810:	b	17788 <flatcc_builder_end_offset_vector@@Base+0xa4>
   17814:	mov	r5, #0
   17818:	mov	r0, r5
   1781c:	add	sp, sp, #88	; 0x58
   17820:	ldrd	r4, [sp]
   17824:	ldrd	r6, [sp, #8]
   17828:	ldr	r8, [sp, #16]
   1782c:	add	sp, sp, #20
   17830:	pop	{pc}		; (ldr pc, [sp], #4)
   17834:	ldr	r2, [sp, #16]
   17838:	ldr	ip, [r4, #136]	; 0x88
   1783c:	sub	r5, ip, r2
   17840:	cmp	r5, ip
   17844:	bge	1790c <flatcc_builder_end_offset_vector@@Base+0x228>
   17848:	add	r1, sp, #24
   1784c:	mov	r3, r5
   17850:	str	r2, [sp]
   17854:	ldr	r2, [sp, #20]
   17858:	ldr	r0, [r4, #36]	; 0x24
   1785c:	ldr	r6, [r4, #44]	; 0x2c
   17860:	blx	r6
   17864:	subs	r1, r0, #0
   17868:	bne	17908 <flatcc_builder_end_offset_vector@@Base+0x224>
   1786c:	cmp	r5, #0
   17870:	str	r5, [r4, #136]	; 0x88
   17874:	beq	17814 <flatcc_builder_end_offset_vector@@Base+0x130>
   17878:	ldr	r0, [r4, #16]
   1787c:	ldr	r2, [r4, #20]
   17880:	bl	12484 <memset@plt>
   17884:	ldr	r3, [r4, #32]
   17888:	ldr	r0, [r4, #60]	; 0x3c
   1788c:	ldr	r2, [r4, #64]	; 0x40
   17890:	ldr	ip, [r3]
   17894:	ldmib	r3, {r1, lr}
   17898:	add	r0, r0, ip
   1789c:	sub	r2, r2, ip
   178a0:	str	r0, [r4, #16]
   178a4:	cmp	r2, r1
   178a8:	ldrh	r0, [r4, #128]	; 0x80
   178ac:	movcs	r2, r1
   178b0:	str	lr, [r4, #20]
   178b4:	str	ip, [r4, #28]
   178b8:	ldrh	ip, [r4, #130]	; 0x82
   178bc:	str	r2, [r4, #24]
   178c0:	ldr	r2, [r4, #156]	; 0x9c
   178c4:	str	r1, [r3, #4]
   178c8:	cmp	r0, ip
   178cc:	sub	r0, r3, #36	; 0x24
   178d0:	strhcc	ip, [r4, #128]	; 0x80
   178d4:	ldrh	r1, [r3, #12]
   178d8:	sub	r3, r2, #1
   178dc:	str	r0, [r4, #32]
   178e0:	strh	r1, [r4, #130]	; 0x82
   178e4:	str	r3, [r4, #156]	; 0x9c
   178e8:	b	17818 <flatcc_builder_end_offset_vector@@Base+0x134>
   178ec:	movw	r1, #4884	; 0x1314
   178f0:	movt	r1, #2
   178f4:	ldr	r3, [pc, #52]	; 17930 <flatcc_builder_end_offset_vector@@Base+0x24c>
   178f8:	movw	r0, #5356	; 0x14ec
   178fc:	movt	r0, #2
   17900:	movw	r2, #1480	; 0x5c8
   17904:	bl	124b4 <__assert_fail@plt>
   17908:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   1790c:	movw	r1, #4884	; 0x1314
   17910:	movt	r1, #2
   17914:	ldr	r3, [pc, #24]	; 17934 <flatcc_builder_end_offset_vector@@Base+0x250>
   17918:	movw	r0, #5076	; 0x13d4
   1791c:	movt	r0, #2
   17920:	movw	r2, #647	; 0x287
   17924:	bl	124b4 <__assert_fail@plt>
   17928:	andeq	r0, r2, ip, ror #28
   1792c:	andeq	r0, r2, ip, ror #24
   17930:	andeq	r1, r2, r0, asr r0
   17934:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>

00017938 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   17938:	ldr	r2, [r0, #32]
   1793c:	strd	r4, [sp, #-16]!
   17940:	ldrh	ip, [r2, #14]
   17944:	str	r6, [sp, #8]
   17948:	str	lr, [sp, #12]
   1794c:	cmp	ip, #5
   17950:	bne	17a08 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   17954:	ldr	r2, [r2, #20]
   17958:	cmn	r2, #-1073741823	; 0xc0000001
   1795c:	bhi	17978 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   17960:	mov	r3, r1
   17964:	ldr	r1, [r0, #16]
   17968:	mov	r4, r0
   1796c:	bl	13e34 <flatcc_builder_default_alloc@@Base+0x388>
   17970:	subs	r5, r0, #0
   17974:	bne	17990 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   17978:	mov	r5, #0
   1797c:	mov	r0, r5
   17980:	ldrd	r4, [sp]
   17984:	ldr	r6, [sp, #8]
   17988:	add	sp, sp, #12
   1798c:	pop	{pc}		; (ldr pc, [sp], #4)
   17990:	mov	r1, #0
   17994:	ldr	r0, [r4, #16]
   17998:	ldr	r2, [r4, #20]
   1799c:	bl	12484 <memset@plt>
   179a0:	ldr	r3, [r4, #32]
   179a4:	ldr	r0, [r4, #60]	; 0x3c
   179a8:	ldr	r2, [r4, #64]	; 0x40
   179ac:	ldr	ip, [r3]
   179b0:	ldmib	r3, {r1, lr}
   179b4:	add	r0, r0, ip
   179b8:	sub	r2, r2, ip
   179bc:	str	r0, [r4, #16]
   179c0:	cmp	r2, r1
   179c4:	ldrh	r0, [r4, #128]	; 0x80
   179c8:	movcs	r2, r1
   179cc:	str	lr, [r4, #20]
   179d0:	str	ip, [r4, #28]
   179d4:	ldrh	ip, [r4, #130]	; 0x82
   179d8:	str	r2, [r4, #24]
   179dc:	ldr	r2, [r4, #156]	; 0x9c
   179e0:	str	r1, [r3, #4]
   179e4:	cmp	r0, ip
   179e8:	sub	r0, r3, #36	; 0x24
   179ec:	strhcc	ip, [r4, #128]	; 0x80
   179f0:	ldrh	r1, [r3, #12]
   179f4:	sub	r3, r2, #1
   179f8:	str	r0, [r4, #32]
   179fc:	strh	r1, [r4, #130]	; 0x82
   17a00:	str	r3, [r4, #156]	; 0x9c
   17a04:	b	1797c <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   17a08:	movw	r1, #4884	; 0x1314
   17a0c:	movt	r1, #2
   17a10:	ldr	r3, [pc, #12]	; 17a24 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   17a14:	movw	r0, #5356	; 0x14ec
   17a18:	movt	r0, #2
   17a1c:	movw	r2, #1493	; 0x5d5
   17a20:	bl	124b4 <__assert_fail@plt>
   17a24:	andeq	r1, r2, ip, ror r1

00017a28 <flatcc_builder_offset_vector_edit@@Base>:
   17a28:	ldr	r0, [r0, #16]
   17a2c:	bx	lr

00017a30 <flatcc_builder_offset_vector_count@@Base>:
   17a30:	ldr	r3, [r0, #32]
   17a34:	ldr	r0, [r3, #20]
   17a38:	bx	lr

00017a3c <flatcc_builder_create_union_vector@@Base>:
   17a3c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17a40:	mov	r4, r1
   17a44:	mov	r1, #4
   17a48:	strd	r6, [sp, #8]
   17a4c:	mov	r6, r0
   17a50:	mov	r0, r4
   17a54:	strd	r8, [sp, #16]
   17a58:	mov	r5, r2
   17a5c:	mov	r7, r3
   17a60:	str	sl, [sp, #24]
   17a64:	str	lr, [sp, #28]
   17a68:	sub	sp, sp, #8
   17a6c:	bl	13d10 <flatcc_builder_default_alloc@@Base+0x264>
   17a70:	cmp	r0, #0
   17a74:	bne	17be0 <flatcc_builder_create_union_vector@@Base+0x1a4>
   17a78:	ldr	ip, [r4, #28]
   17a7c:	mov	lr, #4
   17a80:	mov	r8, #5
   17a84:	mvn	r9, #3
   17a88:	ldr	r3, [r4, #32]
   17a8c:	ldr	r2, [r4, #64]	; 0x40
   17a90:	ldr	r1, [r4, #60]	; 0x3c
   17a94:	strh	r8, [r3, #14]
   17a98:	str	lr, [r3, #16]
   17a9c:	sub	r2, r2, ip
   17aa0:	str	r0, [r3, #20]
   17aa4:	mov	r0, r4
   17aa8:	cmn	r2, #4
   17aac:	add	r1, r1, ip
   17ab0:	mvnhi	r2, #3
   17ab4:	str	r1, [r4, #16]
   17ab8:	mov	r1, r7
   17abc:	str	r2, [r4, #24]
   17ac0:	str	r9, [r3, #4]
   17ac4:	bl	155b8 <flatcc_builder_extend_offset_vector@@Base>
   17ac8:	cmp	r0, #0
   17acc:	beq	17be0 <flatcc_builder_create_union_vector@@Base+0x1a4>
   17ad0:	ldr	r8, [r4, #20]
   17ad4:	ldr	r3, [r4, #24]
   17ad8:	add	r2, r7, r8
   17adc:	cmp	r2, r3
   17ae0:	str	r2, [r4, #20]
   17ae4:	bcs	17c0c <flatcc_builder_create_union_vector@@Base+0x1d0>
   17ae8:	ldr	r1, [r4, #16]
   17aec:	adds	r8, r1, r8
   17af0:	beq	17be0 <flatcc_builder_create_union_vector@@Base+0x1a4>
   17af4:	cmp	r7, #0
   17af8:	beq	17b28 <flatcc_builder_create_union_vector@@Base+0xec>
   17afc:	add	lr, r5, r7, lsl #3
   17b00:	mov	r2, r5
   17b04:	sub	r0, r8, #1
   17b08:	sub	r3, r1, #4
   17b0c:	ldrb	ip, [r2]
   17b10:	add	r2, r2, #8
   17b14:	strb	ip, [r0, #1]!
   17b18:	ldr	ip, [r2, #-4]
   17b1c:	cmp	lr, r2
   17b20:	str	ip, [r3, #4]!
   17b24:	bne	17b0c <flatcc_builder_create_union_vector@@Base+0xd0>
   17b28:	mov	r3, r8
   17b2c:	mov	r2, r7
   17b30:	mov	r0, r4
   17b34:	bl	13e34 <flatcc_builder_default_alloc@@Base+0x388>
   17b38:	subs	r5, r0, #0
   17b3c:	beq	17c6c <flatcc_builder_create_union_vector@@Base+0x230>
   17b40:	mvn	ip, #0
   17b44:	mov	r3, #1
   17b48:	mov	r2, r7
   17b4c:	mov	r1, r8
   17b50:	mov	r0, r4
   17b54:	stm	sp, {r3, ip}
   17b58:	bl	171c4 <flatcc_builder_create_vector@@Base>
   17b5c:	mov	r7, r0
   17b60:	mov	r1, #0
   17b64:	ldr	r0, [r4, #16]
   17b68:	ldr	r2, [r4, #20]
   17b6c:	bl	12484 <memset@plt>
   17b70:	ldr	r3, [r4, #32]
   17b74:	str	r7, [r6]
   17b78:	ldr	r0, [r4, #60]	; 0x3c
   17b7c:	str	r5, [r6, #4]
   17b80:	ldr	r2, [r4, #64]	; 0x40
   17b84:	ldr	ip, [r3]
   17b88:	ldmib	r3, {r1, lr}
   17b8c:	add	r0, r0, ip
   17b90:	sub	r2, r2, ip
   17b94:	str	r0, [r4, #16]
   17b98:	cmp	r2, r1
   17b9c:	ldrh	r0, [r4, #128]	; 0x80
   17ba0:	movcs	r2, r1
   17ba4:	str	lr, [r4, #20]
   17ba8:	str	ip, [r4, #28]
   17bac:	ldrh	ip, [r4, #130]	; 0x82
   17bb0:	str	r2, [r4, #24]
   17bb4:	ldr	r2, [r4, #156]	; 0x9c
   17bb8:	str	r1, [r3, #4]
   17bbc:	cmp	r0, ip
   17bc0:	sub	r0, r3, #36	; 0x24
   17bc4:	strhcc	ip, [r4, #128]	; 0x80
   17bc8:	ldrh	r1, [r3, #12]
   17bcc:	sub	r3, r2, #1
   17bd0:	str	r0, [r4, #32]
   17bd4:	strh	r1, [r4, #130]	; 0x82
   17bd8:	str	r3, [r4, #156]	; 0x9c
   17bdc:	b	17bec <flatcc_builder_create_union_vector@@Base+0x1b0>
   17be0:	mov	r3, #0
   17be4:	str	r3, [r6]
   17be8:	str	r3, [r6, #4]
   17bec:	mov	r0, r6
   17bf0:	add	sp, sp, #8
   17bf4:	ldrd	r4, [sp]
   17bf8:	ldrd	r6, [sp, #8]
   17bfc:	ldrd	r8, [sp, #16]
   17c00:	ldr	sl, [sp, #24]
   17c04:	add	sp, sp, #28
   17c08:	pop	{pc}		; (ldr pc, [sp], #4)
   17c0c:	ldr	ip, [r4, #28]
   17c10:	mov	r0, #1
   17c14:	add	r1, r4, #60	; 0x3c
   17c18:	mov	r3, r0
   17c1c:	str	r0, [sp]
   17c20:	ldr	sl, [r4, #48]	; 0x30
   17c24:	add	ip, ip, r0
   17c28:	ldr	r0, [r4, #40]	; 0x28
   17c2c:	add	r2, ip, r2
   17c30:	blx	sl
   17c34:	cmp	r0, #0
   17c38:	bne	17be0 <flatcc_builder_create_union_vector@@Base+0x1a4>
   17c3c:	ldr	r1, [r4, #28]
   17c40:	ldr	r2, [r4, #32]
   17c44:	ldr	r3, [r4, #64]	; 0x40
   17c48:	ldr	r0, [r4, #60]	; 0x3c
   17c4c:	sub	r3, r3, r1
   17c50:	cmn	r3, #4
   17c54:	movhi	r3, r9
   17c58:	add	r1, r0, r1
   17c5c:	str	r1, [r4, #16]
   17c60:	str	r3, [r4, #24]
   17c64:	str	r9, [r2, #4]
   17c68:	b	17aec <flatcc_builder_create_union_vector@@Base+0xb0>
   17c6c:	mov	r7, r5
   17c70:	b	17b60 <flatcc_builder_create_union_vector@@Base+0x124>

00017c74 <flatcc_builder_create_union_vector_direct@@Base>:
   17c74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17c78:	strd	r6, [sp, #8]
   17c7c:	mov	r6, r0
   17c80:	str	r8, [sp, #16]
   17c84:	str	lr, [sp, #20]
   17c88:	sub	sp, sp, #88	; 0x58
   17c8c:	ldr	r4, [sp, #112]	; 0x70
   17c90:	cmn	r4, #-1073741823	; 0xc0000001
   17c94:	bhi	17d68 <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   17c98:	mov	r5, r1
   17c9c:	mov	r8, r2
   17ca0:	mov	r1, r3
   17ca4:	mov	r0, r5
   17ca8:	mov	r3, r2
   17cac:	mov	r2, r4
   17cb0:	bl	13e34 <flatcc_builder_default_alloc@@Base+0x388>
   17cb4:	subs	r7, r0, #0
   17cb8:	beq	17d68 <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   17cbc:	ldrh	r3, [r5, #128]	; 0x80
   17cc0:	mov	r2, #1
   17cc4:	mov	r1, #4
   17cc8:	str	r4, [sp, #12]
   17ccc:	ldr	r0, [r5, #136]	; 0x88
   17cd0:	str	r1, [sp, #16]
   17cd4:	str	r1, [sp, #28]
   17cd8:	cmp	r3, #3
   17cdc:	movls	r3, #4
   17ce0:	strhls	r3, [r5, #128]	; 0x80
   17ce4:	add	r3, sp, #12
   17ce8:	cmp	r4, #0
   17cec:	moveq	ip, #2
   17cf0:	strd	r2, [sp, #20]
   17cf4:	sub	r3, r0, r4
   17cf8:	and	r3, r3, #3
   17cfc:	bne	17d90 <flatcc_builder_create_union_vector_direct@@Base+0x11c>
   17d00:	cmp	r3, #0
   17d04:	beq	17d30 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   17d08:	ldr	r4, [pc, #196]	; 17dd4 <flatcc_builder_create_union_vector_direct@@Base+0x160>
   17d0c:	add	r2, r2, #1
   17d10:	add	lr, sp, #88	; 0x58
   17d14:	add	lr, lr, r2, lsl #3
   17d18:	add	r1, r1, r3
   17d1c:	mov	r2, ip
   17d20:	str	r1, [sp, #16]
   17d24:	str	ip, [sp, #20]
   17d28:	str	r4, [lr, #-72]	; 0xffffffb8
   17d2c:	str	r3, [lr, #-68]	; 0xffffffbc
   17d30:	sub	r4, r0, r1
   17d34:	cmp	r0, r4
   17d38:	ble	17db4 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   17d3c:	mov	r3, r4
   17d40:	str	r1, [sp]
   17d44:	add	r1, sp, #24
   17d48:	ldr	r0, [r5, #36]	; 0x24
   17d4c:	ldr	r8, [r5, #44]	; 0x2c
   17d50:	blx	r8
   17d54:	cmp	r0, #0
   17d58:	bne	17dd0 <flatcc_builder_create_union_vector_direct@@Base+0x15c>
   17d5c:	stm	r6, {r4, r7}
   17d60:	str	r4, [r5, #136]	; 0x88
   17d64:	b	17d74 <flatcc_builder_create_union_vector_direct@@Base+0x100>
   17d68:	mov	r3, #0
   17d6c:	str	r3, [r6]
   17d70:	str	r3, [r6, #4]
   17d74:	mov	r0, r6
   17d78:	add	sp, sp, #88	; 0x58
   17d7c:	ldrd	r4, [sp]
   17d80:	ldrd	r6, [sp, #8]
   17d84:	ldr	r8, [sp, #16]
   17d88:	add	sp, sp, #20
   17d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d90:	mov	lr, #2
   17d94:	add	r1, r4, r1
   17d98:	mov	r2, lr
   17d9c:	mov	ip, #3
   17da0:	str	r1, [sp, #16]
   17da4:	str	lr, [sp, #20]
   17da8:	str	r8, [sp, #32]
   17dac:	str	r4, [sp, #36]	; 0x24
   17db0:	b	17d00 <flatcc_builder_create_union_vector_direct@@Base+0x8c>
   17db4:	movw	r1, #4884	; 0x1314
   17db8:	movt	r1, #2
   17dbc:	ldr	r3, [pc, #20]	; 17dd8 <flatcc_builder_create_union_vector_direct@@Base+0x164>
   17dc0:	movw	r0, #5076	; 0x13d4
   17dc4:	movt	r0, #2
   17dc8:	movw	r2, #647	; 0x287
   17dcc:	bl	124b4 <__assert_fail@plt>
   17dd0:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   17dd4:	andeq	r0, r2, ip, ror #24
   17dd8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>

00017ddc <flatcc_builder_start_union_vector@@Base>:
   17ddc:	ldrd	r2, [r0, #156]	; 0x9c
   17de0:	strd	r4, [sp, #-16]!
   17de4:	mov	r4, r0
   17de8:	str	r6, [sp, #8]
   17dec:	str	lr, [sp, #12]
   17df0:	sub	sp, sp, #8
   17df4:	add	r1, r2, #1
   17df8:	cmp	r1, r3
   17dfc:	str	r1, [r0, #156]	; 0x9c
   17e00:	ble	17f1c <flatcc_builder_start_union_vector@@Base+0x140>
   17e04:	ldr	r3, [r0, #176]	; 0xb0
   17e08:	cmp	r3, #0
   17e0c:	cmpgt	r1, r3
   17e10:	movgt	r3, #1
   17e14:	movle	r3, #0
   17e18:	bgt	17f2c <flatcc_builder_start_union_vector@@Base+0x150>
   17e1c:	add	r2, r2, r2, lsl #3
   17e20:	ldr	r1, [r0, #88]	; 0x58
   17e24:	lsl	r5, r2, #2
   17e28:	add	r2, r5, #36	; 0x24
   17e2c:	cmp	r2, r1
   17e30:	bls	17e54 <flatcc_builder_start_union_vector@@Base+0x78>
   17e34:	mov	ip, #4
   17e38:	add	r1, r0, #84	; 0x54
   17e3c:	ldr	r0, [r0, #40]	; 0x28
   17e40:	str	ip, [sp]
   17e44:	ldr	r6, [r4, #48]	; 0x30
   17e48:	blx	r6
   17e4c:	cmp	r0, #0
   17e50:	bne	17f34 <flatcc_builder_start_union_vector@@Base+0x158>
   17e54:	ldr	r3, [r4, #84]	; 0x54
   17e58:	add	r3, r3, r5
   17e5c:	cmp	r3, #0
   17e60:	str	r3, [r4, #32]
   17e64:	beq	17f2c <flatcc_builder_start_union_vector@@Base+0x150>
   17e68:	ldr	r2, [r4, #88]	; 0x58
   17e6c:	movw	r0, #36409	; 0x8e39
   17e70:	movt	r0, #14563	; 0x38e3
   17e74:	ldr	r1, [r4, #176]	; 0xb0
   17e78:	umull	r0, r2, r0, r2
   17e7c:	lsr	r2, r2, #3
   17e80:	cmp	r1, #0
   17e84:	cmpgt	r2, r1
   17e88:	movgt	r2, r1
   17e8c:	str	r2, [r4, #160]	; 0xa0
   17e90:	ldr	r2, [r4, #20]
   17e94:	mvn	r5, #3
   17e98:	mov	lr, #0
   17e9c:	ldr	r6, [r4, #28]
   17ea0:	ldrh	r0, [r4, #130]	; 0x82
   17ea4:	ldr	ip, [r4, #60]	; 0x3c
   17ea8:	ldr	r1, [r4, #64]	; 0x40
   17eac:	str	r2, [r3, #8]
   17eb0:	add	r2, r2, r6
   17eb4:	add	r2, r2, #7
   17eb8:	strh	r0, [r3, #12]
   17ebc:	mov	r0, #4
   17ec0:	bic	r2, r2, #7
   17ec4:	add	ip, ip, r2
   17ec8:	strh	r0, [r4, #130]	; 0x82
   17ecc:	mov	r0, lr
   17ed0:	sub	r1, r1, r2
   17ed4:	str	r6, [r3]
   17ed8:	mov	r6, #8
   17edc:	cmp	r1, r5
   17ee0:	str	lr, [r4, #20]
   17ee4:	movhi	r1, r5
   17ee8:	str	r2, [r4, #28]
   17eec:	mov	r2, #7
   17ef0:	strh	r2, [r3, #14]
   17ef4:	str	r6, [r3, #16]
   17ef8:	str	lr, [r3, #20]
   17efc:	str	ip, [r4, #16]
   17f00:	str	r1, [r4, #24]
   17f04:	str	r5, [r3, #4]
   17f08:	add	sp, sp, #8
   17f0c:	ldrd	r4, [sp]
   17f10:	ldr	r6, [sp, #8]
   17f14:	add	sp, sp, #12
   17f18:	pop	{pc}		; (ldr pc, [sp], #4)
   17f1c:	ldr	r3, [r0, #32]
   17f20:	add	r3, r3, #36	; 0x24
   17f24:	str	r3, [r0, #32]
   17f28:	b	17e90 <flatcc_builder_start_union_vector@@Base+0xb4>
   17f2c:	mvn	r0, #0
   17f30:	b	17f08 <flatcc_builder_start_union_vector@@Base+0x12c>
   17f34:	bl	13bd0 <flatcc_builder_default_alloc@@Base+0x124>

00017f38 <flatcc_builder_end_union_vector@@Base>:
   17f38:	ldr	r3, [r1, #32]
   17f3c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17f40:	ldrh	r2, [r3, #14]
   17f44:	strd	r6, [sp, #8]
   17f48:	strd	r8, [sp, #16]
   17f4c:	str	lr, [sp, #24]
   17f50:	sub	sp, sp, #12
   17f54:	cmp	r2, #7
   17f58:	bne	18114 <flatcc_builder_end_union_vector@@Base+0x1dc>
   17f5c:	ldr	r5, [r3, #20]
   17f60:	mov	r4, r1
   17f64:	mov	r6, r0
   17f68:	ldr	r8, [r1, #20]
   17f6c:	ldr	r3, [r1, #24]
   17f70:	lsl	r7, r5, #2
   17f74:	add	r2, r7, r5
   17f78:	add	r2, r2, r8
   17f7c:	cmp	r2, r3
   17f80:	str	r2, [r1, #20]
   17f84:	bcs	18094 <flatcc_builder_end_union_vector@@Base+0x15c>
   17f88:	ldr	r3, [r1, #16]
   17f8c:	adds	r1, r3, r8
   17f90:	beq	180fc <flatcc_builder_end_union_vector@@Base+0x1c4>
   17f94:	cmp	r5, #0
   17f98:	add	r7, r1, r7
   17f9c:	subne	r0, r7, #1
   17fa0:	addne	lr, r3, r5, lsl #3
   17fa4:	subne	r2, r1, #4
   17fa8:	beq	17fc8 <flatcc_builder_end_union_vector@@Base+0x90>
   17fac:	ldrb	ip, [r3]
   17fb0:	add	r3, r3, #8
   17fb4:	strb	ip, [r0, #1]!
   17fb8:	ldr	ip, [r3, #-4]
   17fbc:	cmp	lr, r3
   17fc0:	str	ip, [r2, #4]!
   17fc4:	bne	17fac <flatcc_builder_end_union_vector@@Base+0x74>
   17fc8:	mov	r3, r7
   17fcc:	mov	r2, r5
   17fd0:	mov	r0, r4
   17fd4:	bl	13e34 <flatcc_builder_default_alloc@@Base+0x388>
   17fd8:	subs	r8, r0, #0
   17fdc:	beq	1810c <flatcc_builder_end_union_vector@@Base+0x1d4>
   17fe0:	mvn	ip, #0
   17fe4:	mov	r3, #1
   17fe8:	mov	r2, r5
   17fec:	mov	r1, r7
   17ff0:	mov	r0, r4
   17ff4:	stm	sp, {r3, ip}
   17ff8:	bl	171c4 <flatcc_builder_create_vector@@Base>
   17ffc:	mov	r5, r0
   18000:	mov	r1, #0
   18004:	ldr	r0, [r4, #16]
   18008:	ldr	r2, [r4, #20]
   1800c:	bl	12484 <memset@plt>
   18010:	ldr	r3, [r4, #32]
   18014:	stm	r6, {r5, r8}
   18018:	ldr	r0, [r4, #60]	; 0x3c
   1801c:	ldr	r2, [r4, #64]	; 0x40
   18020:	ldr	ip, [r3]
   18024:	ldmib	r3, {r1, lr}
   18028:	add	r0, r0, ip
   1802c:	sub	r2, r2, ip
   18030:	str	r0, [r4, #16]
   18034:	cmp	r2, r1
   18038:	ldrh	r0, [r4, #128]	; 0x80
   1803c:	movcs	r2, r1
   18040:	str	lr, [r4, #20]
   18044:	str	ip, [r4, #28]
   18048:	ldrh	ip, [r4, #130]	; 0x82
   1804c:	str	r2, [r4, #24]
   18050:	ldr	r2, [r4, #156]	; 0x9c
   18054:	str	r1, [r3, #4]
   18058:	cmp	r0, ip
   1805c:	sub	r0, r3, #36	; 0x24
   18060:	strhcc	ip, [r4, #128]	; 0x80
   18064:	ldrh	r1, [r3, #12]
   18068:	sub	r3, r2, #1
   1806c:	str	r0, [r4, #32]
   18070:	strh	r1, [r4, #130]	; 0x82
   18074:	str	r3, [r4, #156]	; 0x9c
   18078:	mov	r0, r6
   1807c:	add	sp, sp, #12
   18080:	ldrd	r4, [sp]
   18084:	ldrd	r6, [sp, #8]
   18088:	ldrd	r8, [sp, #16]
   1808c:	add	sp, sp, #24
   18090:	pop	{pc}		; (ldr pc, [sp], #4)
   18094:	ldr	ip, [r4, #28]
   18098:	mov	r0, #1
   1809c:	add	r1, r1, #60	; 0x3c
   180a0:	mov	r3, r0
   180a4:	str	r0, [sp]
   180a8:	ldr	r9, [r4, #48]	; 0x30
   180ac:	add	ip, ip, r0
   180b0:	ldr	r0, [r4, #40]	; 0x28
   180b4:	add	r2, ip, r2
   180b8:	blx	r9
   180bc:	cmp	r0, #0
   180c0:	bne	180fc <flatcc_builder_end_union_vector@@Base+0x1c4>
   180c4:	ldr	r1, [r4, #28]
   180c8:	ldr	r3, [r4, #60]	; 0x3c
   180cc:	ldr	r2, [r4, #64]	; 0x40
   180d0:	add	r3, r3, r1
   180d4:	sub	r2, r2, r1
   180d8:	mvn	r1, #3
   180dc:	str	r3, [r4, #16]
   180e0:	cmn	r2, #4
   180e4:	mvnhi	r2, #3
   180e8:	str	r2, [r4, #24]
   180ec:	ldr	r2, [r4, #32]
   180f0:	str	r1, [r2, #4]
   180f4:	adds	r1, r3, r8
   180f8:	bne	17f94 <flatcc_builder_end_union_vector@@Base+0x5c>
   180fc:	mov	r3, #0
   18100:	str	r3, [r6]
   18104:	str	r3, [r6, #4]
   18108:	b	18078 <flatcc_builder_end_union_vector@@Base+0x140>
   1810c:	mov	r5, r8
   18110:	b	18000 <flatcc_builder_end_union_vector@@Base+0xc8>
   18114:	movw	r1, #4884	; 0x1314
   18118:	movt	r1, #2
   1811c:	ldr	r3, [pc, #12]	; 18130 <flatcc_builder_end_union_vector@@Base+0x1f8>
   18120:	movw	r0, #5664	; 0x1620
   18124:	movt	r0, #2
   18128:	movw	r2, #1617	; 0x651
   1812c:	bl	124b4 <__assert_fail@plt>
   18130:	andeq	r1, r2, r8, lsr #3

00018134 <flatcc_builder_union_vector_edit@@Base>:
   18134:	ldr	r0, [r0, #16]
   18138:	bx	lr

0001813c <flatcc_builder_union_vector_count@@Base>:
   1813c:	ldr	r3, [r0, #32]
   18140:	ldr	r0, [r3, #20]
   18144:	bx	lr

00018148 <flatcc_builder_extend_union_vector@@Base>:
   18148:	ldr	ip, [r0, #32]
   1814c:	strd	r4, [sp, #-20]!	; 0xffffffec
   18150:	mov	r4, r0
   18154:	ldr	r3, [ip, #20]
   18158:	strd	r6, [sp, #8]
   1815c:	str	lr, [sp, #16]
   18160:	sub	sp, sp, #12
   18164:	adds	r3, r1, r3
   18168:	movcs	r2, #1
   1816c:	movcc	r2, #0
   18170:	cmn	r3, #-536870911	; 0xe0000001
   18174:	movls	r0, #0
   18178:	movhi	r0, #1
   1817c:	orrs	r5, r2, r0
   18180:	bne	18228 <flatcc_builder_extend_union_vector@@Base+0xe0>
   18184:	ldr	r6, [r4, #20]
   18188:	str	r3, [ip, #20]
   1818c:	ldr	r3, [r4, #24]
   18190:	add	r2, r6, r1, lsl #3
   18194:	cmp	r2, r3
   18198:	str	r2, [r4, #20]
   1819c:	bcs	181bc <flatcc_builder_extend_union_vector@@Base+0x74>
   181a0:	ldr	r0, [r4, #16]
   181a4:	add	r0, r0, r6
   181a8:	add	sp, sp, #12
   181ac:	ldrd	r4, [sp]
   181b0:	ldrd	r6, [sp, #8]
   181b4:	add	sp, sp, #16
   181b8:	pop	{pc}		; (ldr pc, [sp], #4)
   181bc:	ldr	ip, [r4, #28]
   181c0:	mov	r0, #1
   181c4:	add	r1, r4, #60	; 0x3c
   181c8:	mov	r3, r0
   181cc:	str	r0, [sp]
   181d0:	ldr	r7, [r4, #48]	; 0x30
   181d4:	add	ip, ip, r0
   181d8:	ldr	r0, [r4, #40]	; 0x28
   181dc:	add	r2, ip, r2
   181e0:	blx	r7
   181e4:	cmp	r0, #0
   181e8:	bne	18220 <flatcc_builder_extend_union_vector@@Base+0xd8>
   181ec:	ldr	r2, [r4, #28]
   181f0:	ldr	r0, [r4, #60]	; 0x3c
   181f4:	ldr	r3, [r4, #64]	; 0x40
   181f8:	add	r0, r0, r2
   181fc:	sub	r3, r3, r2
   18200:	mvn	r2, #3
   18204:	str	r0, [r4, #16]
   18208:	cmn	r3, #4
   1820c:	mvnhi	r3, #3
   18210:	str	r3, [r4, #24]
   18214:	ldr	r3, [r4, #32]
   18218:	str	r2, [r3, #4]
   1821c:	b	181a4 <flatcc_builder_extend_union_vector@@Base+0x5c>
   18220:	mov	r0, r5
   18224:	b	181a8 <flatcc_builder_extend_union_vector@@Base+0x60>
   18228:	bl	13c70 <flatcc_builder_default_alloc@@Base+0x1c4>

0001822c <flatcc_builder_truncate_union_vector@@Base>:
   1822c:	mov	r3, r0
   18230:	ldr	r0, [r0, #32]
   18234:	str	r4, [sp, #-8]!
   18238:	ldrh	r2, [r0, #14]
   1823c:	str	lr, [sp, #4]
   18240:	cmp	r2, #7
   18244:	bne	18294 <flatcc_builder_truncate_union_vector@@Base+0x68>
   18248:	mov	lr, r1
   1824c:	ldr	r1, [r0, #20]
   18250:	cmp	r1, lr
   18254:	bcc	182b0 <flatcc_builder_truncate_union_vector@@Base+0x84>
   18258:	ldr	r2, [r0, #16]
   1825c:	sub	ip, r1, lr
   18260:	mov	r1, #0
   18264:	str	ip, [r0, #20]
   18268:	ldr	r0, [r3, #16]
   1826c:	ldr	ip, [r3, #20]
   18270:	mul	r2, r2, lr
   18274:	sub	ip, ip, r2
   18278:	add	r0, r0, ip
   1827c:	str	ip, [r3, #20]
   18280:	bl	12484 <memset@plt>
   18284:	ldr	r4, [sp]
   18288:	add	sp, sp, #4
   1828c:	mov	r0, #0
   18290:	pop	{pc}		; (ldr pc, [sp], #4)
   18294:	movw	r1, #4884	; 0x1314
   18298:	movt	r1, #2
   1829c:	ldr	r3, [pc, #40]	; 182cc <flatcc_builder_truncate_union_vector@@Base+0xa0>
   182a0:	movw	r0, #5664	; 0x1620
   182a4:	movt	r0, #2
   182a8:	movw	r2, #1665	; 0x681
   182ac:	bl	124b4 <__assert_fail@plt>
   182b0:	movw	r1, #4884	; 0x1314
   182b4:	movt	r1, #2
   182b8:	ldr	r3, [pc, #12]	; 182cc <flatcc_builder_truncate_union_vector@@Base+0xa0>
   182bc:	movw	r0, #5444	; 0x1544
   182c0:	movt	r0, #2
   182c4:	movw	r2, #1666	; 0x682
   182c8:	bl	124b4 <__assert_fail@plt>
   182cc:	andeq	r1, r2, r8, asr #3

000182d0 <flatcc_builder_union_vector_push@@Base>:
   182d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   182d4:	strd	r6, [sp, #8]
   182d8:	str	lr, [sp, #16]
   182dc:	sub	sp, sp, #20
   182e0:	add	r3, sp, #16
   182e4:	stmdb	r3, {r1, r2}
   182e8:	ldr	r2, [r0, #32]
   182ec:	ldrh	r3, [r2, #14]
   182f0:	cmp	r3, #7
   182f4:	bne	183b8 <flatcc_builder_union_vector_push@@Base+0xe8>
   182f8:	ldr	r3, [r2, #20]
   182fc:	cmn	r3, #-536870911	; 0xe0000001
   18300:	beq	183b0 <flatcc_builder_union_vector_push@@Base+0xe0>
   18304:	ldr	r5, [r0, #20]
   18308:	add	r3, r3, #1
   1830c:	mov	r4, r0
   18310:	ldr	r1, [r0, #24]
   18314:	str	r3, [r2, #20]
   18318:	add	r3, r5, #8
   1831c:	cmp	r3, r1
   18320:	str	r3, [r0, #20]
   18324:	bcs	1834c <flatcc_builder_union_vector_push@@Base+0x7c>
   18328:	ldr	r3, [r0, #16]
   1832c:	adds	r0, r3, r5
   18330:	ldrdne	r6, [sp, #8]
   18334:	strdne	r6, [r3, r5]
   18338:	add	sp, sp, #20
   1833c:	ldrd	r4, [sp]
   18340:	ldrd	r6, [sp, #8]
   18344:	add	sp, sp, #16
   18348:	pop	{pc}		; (ldr pc, [sp], #4)
   1834c:	ldr	r2, [r4, #28]
   18350:	mov	r0, #1
   18354:	add	r1, r4, #60	; 0x3c
   18358:	mov	r3, r0
   1835c:	str	r0, [sp]
   18360:	ldr	r0, [r4, #40]	; 0x28
   18364:	add	r2, r5, r2
   18368:	ldr	r6, [r4, #48]	; 0x30
   1836c:	add	r2, r2, #9
   18370:	blx	r6
   18374:	cmp	r0, #0
   18378:	bne	183b0 <flatcc_builder_union_vector_push@@Base+0xe0>
   1837c:	ldr	r1, [r4, #28]
   18380:	ldr	r3, [r4, #60]	; 0x3c
   18384:	ldr	r2, [r4, #64]	; 0x40
   18388:	add	r3, r3, r1
   1838c:	sub	r2, r2, r1
   18390:	mvn	r1, #3
   18394:	str	r3, [r4, #16]
   18398:	cmn	r2, #4
   1839c:	mvnhi	r2, #3
   183a0:	str	r2, [r4, #24]
   183a4:	ldr	r2, [r4, #32]
   183a8:	str	r1, [r2, #4]
   183ac:	b	1832c <flatcc_builder_union_vector_push@@Base+0x5c>
   183b0:	mov	r0, #0
   183b4:	b	18338 <flatcc_builder_union_vector_push@@Base+0x68>
   183b8:	movw	r1, #4884	; 0x1314
   183bc:	movt	r1, #2
   183c0:	ldr	r3, [pc, #12]	; 183d4 <flatcc_builder_union_vector_push@@Base+0x104>
   183c4:	movw	r0, #5664	; 0x1620
   183c8:	movt	r0, #2
   183cc:	movw	r2, #1677	; 0x68d
   183d0:	bl	124b4 <__assert_fail@plt>
   183d4:	strdeq	r1, [r2], -r0

000183d8 <flatcc_builder_append_union_vector@@Base>:
   183d8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   183dc:	mov	r5, r0
   183e0:	ldr	r0, [r0, #32]
   183e4:	ldrh	r3, [r0, #14]
   183e8:	strd	r6, [sp, #8]
   183ec:	strd	r8, [sp, #16]
   183f0:	str	lr, [sp, #24]
   183f4:	sub	sp, sp, #12
   183f8:	cmp	r3, #7
   183fc:	bne	184f4 <flatcc_builder_append_union_vector@@Base+0x11c>
   18400:	ldr	r3, [r0, #20]
   18404:	mov	r7, r1
   18408:	adds	r1, r2, r3
   1840c:	movcs	r4, #1
   18410:	movcc	r4, #0
   18414:	cmn	r1, #-536870911	; 0xe0000001
   18418:	movls	r3, #0
   1841c:	movhi	r3, #1
   18420:	orrs	r4, r4, r3
   18424:	bne	184f0 <flatcc_builder_append_union_vector@@Base+0x118>
   18428:	ldr	r8, [r5, #20]
   1842c:	lsl	r6, r2, #3
   18430:	ldr	r3, [r5, #24]
   18434:	str	r1, [r0, #20]
   18438:	add	ip, r6, r8
   1843c:	cmp	ip, r3
   18440:	str	ip, [r5, #20]
   18444:	bcs	18484 <flatcc_builder_append_union_vector@@Base+0xac>
   18448:	ldr	r3, [r5, #16]
   1844c:	adds	r3, r3, r8
   18450:	beq	18468 <flatcc_builder_append_union_vector@@Base+0x90>
   18454:	mov	r0, r3
   18458:	mov	r2, r6
   1845c:	mov	r1, r7
   18460:	bl	1240c <memcpy@plt>
   18464:	mov	r3, r0
   18468:	mov	r0, r3
   1846c:	add	sp, sp, #12
   18470:	ldrd	r4, [sp]
   18474:	ldrd	r6, [sp, #8]
   18478:	ldrd	r8, [sp, #16]
   1847c:	add	sp, sp, #24
   18480:	pop	{pc}		; (ldr pc, [sp], #4)
   18484:	ldr	r2, [r5, #28]
   18488:	mov	r0, #1
   1848c:	add	r1, r5, #60	; 0x3c
   18490:	mov	r3, r0
   18494:	str	r0, [sp]
   18498:	ldr	r9, [r5, #48]	; 0x30
   1849c:	add	r2, r2, r0
   184a0:	ldr	r0, [r5, #40]	; 0x28
   184a4:	add	r2, r2, ip
   184a8:	blx	r9
   184ac:	cmp	r0, #0
   184b0:	bne	184e8 <flatcc_builder_append_union_vector@@Base+0x110>
   184b4:	ldr	r1, [r5, #28]
   184b8:	ldr	r3, [r5, #60]	; 0x3c
   184bc:	ldr	r2, [r5, #64]	; 0x40
   184c0:	add	r3, r3, r1
   184c4:	sub	r2, r2, r1
   184c8:	mvn	r1, #3
   184cc:	str	r3, [r5, #16]
   184d0:	cmn	r2, #4
   184d4:	mvnhi	r2, #3
   184d8:	str	r2, [r5, #24]
   184dc:	ldr	r2, [r5, #32]
   184e0:	str	r1, [r2, #4]
   184e4:	b	1844c <flatcc_builder_append_union_vector@@Base+0x74>
   184e8:	mov	r3, r4
   184ec:	b	18468 <flatcc_builder_append_union_vector@@Base+0x90>
   184f0:	bl	13c70 <flatcc_builder_default_alloc@@Base+0x1c4>
   184f4:	movw	r1, #4884	; 0x1314
   184f8:	movt	r1, #2
   184fc:	ldr	r3, [pc, #12]	; 18510 <flatcc_builder_append_union_vector@@Base+0x138>
   18500:	movw	r0, #5664	; 0x1620
   18504:	movt	r0, #2
   18508:	movw	r2, #1692	; 0x69c
   1850c:	bl	124b4 <__assert_fail@plt>
   18510:	andeq	r1, r2, r4, lsl r2

00018514 <flatcc_builder_create_string@@Base>:
   18514:	strd	r4, [sp, #-16]!
   18518:	mov	r4, r0
   1851c:	mov	ip, #4
   18520:	str	r6, [sp, #8]
   18524:	cmp	r2, #0
   18528:	str	lr, [sp, #12]
   1852c:	sub	sp, sp, #88	; 0x58
   18530:	moveq	r6, #2
   18534:	ldr	lr, [r0, #136]	; 0x88
   18538:	add	r3, sp, #12
   1853c:	str	r2, [sp, #12]
   18540:	str	r3, [sp, #24]
   18544:	mov	r3, #1
   18548:	moveq	r1, r3
   1854c:	str	ip, [sp, #28]
   18550:	sub	r0, lr, r2
   18554:	sub	r0, r0, #1
   18558:	and	r0, r0, #3
   1855c:	add	r0, r0, r3
   18560:	beq	18578 <flatcc_builder_create_string@@Base+0x64>
   18564:	add	ip, r2, ip
   18568:	mov	r6, #3
   1856c:	str	r1, [sp, #32]
   18570:	mov	r1, #2
   18574:	str	r2, [sp, #36]	; 0x24
   18578:	ldr	r3, [pc, #136]	; 18608 <flatcc_builder_create_string@@Base+0xf4>
   1857c:	add	r1, r1, #1
   18580:	add	r2, sp, #88	; 0x58
   18584:	add	ip, r0, ip
   18588:	add	r1, r2, r1, lsl #3
   1858c:	sub	r5, lr, ip
   18590:	cmp	lr, r5
   18594:	str	ip, [sp, #16]
   18598:	str	r6, [sp, #20]
   1859c:	str	r3, [r1, #-72]	; 0xffffffb8
   185a0:	str	r0, [r1, #-68]	; 0xffffffbc
   185a4:	ble	185e8 <flatcc_builder_create_string@@Base+0xd4>
   185a8:	mov	r2, r6
   185ac:	mov	r3, r5
   185b0:	str	ip, [sp]
   185b4:	add	r1, sp, #24
   185b8:	ldr	r0, [r4, #36]	; 0x24
   185bc:	ldr	r6, [r4, #44]	; 0x2c
   185c0:	blx	r6
   185c4:	cmp	r0, #0
   185c8:	bne	18604 <flatcc_builder_create_string@@Base+0xf0>
   185cc:	mov	r0, r5
   185d0:	str	r5, [r4, #136]	; 0x88
   185d4:	add	sp, sp, #88	; 0x58
   185d8:	ldrd	r4, [sp]
   185dc:	ldr	r6, [sp, #8]
   185e0:	add	sp, sp, #12
   185e4:	pop	{pc}		; (ldr pc, [sp], #4)
   185e8:	movw	r1, #4884	; 0x1314
   185ec:	movt	r1, #2
   185f0:	movw	r0, #5076	; 0x13d4
   185f4:	movt	r0, #2
   185f8:	sub	r3, r3, #124	; 0x7c
   185fc:	movw	r2, #647	; 0x287
   18600:	bl	124b4 <__assert_fail@plt>
   18604:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   18608:	andeq	r0, r2, ip, ror #24

0001860c <flatcc_builder_create_string_str@@Base>:
   1860c:	strd	r4, [sp, #-16]!
   18610:	mov	r4, r0
   18614:	mov	r0, r1
   18618:	str	r6, [sp, #8]
   1861c:	mov	r6, r1
   18620:	str	lr, [sp, #12]
   18624:	sub	sp, sp, #88	; 0x58
   18628:	bl	12460 <strlen@plt>
   1862c:	ldr	r5, [r4, #136]	; 0x88
   18630:	mov	r2, #4
   18634:	add	r1, sp, #12
   18638:	mov	r3, #1
   1863c:	cmp	r0, #0
   18640:	str	r0, [sp, #12]
   18644:	str	r1, [sp, #24]
   18648:	str	r2, [sp, #28]
   1864c:	sub	ip, r5, #1
   18650:	sub	ip, ip, r0
   18654:	and	ip, ip, #3
   18658:	add	ip, ip, r3
   1865c:	beq	186e0 <flatcc_builder_create_string_str@@Base+0xd4>
   18660:	add	lr, r0, r2
   18664:	mov	r1, #2
   18668:	str	r6, [sp, #32]
   1866c:	mov	r2, #3
   18670:	str	r0, [sp, #36]	; 0x24
   18674:	ldr	r3, [pc, #148]	; 18710 <flatcc_builder_create_string_str@@Base+0x104>
   18678:	add	r0, ip, lr
   1867c:	add	r1, r1, #1
   18680:	add	lr, sp, #88	; 0x58
   18684:	sub	r6, r5, r0
   18688:	add	r1, lr, r1, lsl #3
   1868c:	cmp	r5, r6
   18690:	str	r0, [sp, #16]
   18694:	str	r2, [sp, #20]
   18698:	str	r3, [r1, #-72]	; 0xffffffb8
   1869c:	str	ip, [r1, #-68]	; 0xffffffbc
   186a0:	ble	186f0 <flatcc_builder_create_string_str@@Base+0xe4>
   186a4:	mov	r3, r6
   186a8:	add	r1, sp, #24
   186ac:	str	r0, [sp]
   186b0:	ldr	r0, [r4, #36]	; 0x24
   186b4:	ldr	r5, [r4, #44]	; 0x2c
   186b8:	blx	r5
   186bc:	cmp	r0, #0
   186c0:	bne	1870c <flatcc_builder_create_string_str@@Base+0x100>
   186c4:	mov	r0, r6
   186c8:	str	r6, [r4, #136]	; 0x88
   186cc:	add	sp, sp, #88	; 0x58
   186d0:	ldrd	r4, [sp]
   186d4:	ldr	r6, [sp, #8]
   186d8:	add	sp, sp, #12
   186dc:	pop	{pc}		; (ldr pc, [sp], #4)
   186e0:	mov	lr, r2
   186e4:	mov	r1, r3
   186e8:	mov	r2, #2
   186ec:	b	18674 <flatcc_builder_create_string_str@@Base+0x68>
   186f0:	movw	r1, #4884	; 0x1314
   186f4:	movt	r1, #2
   186f8:	movw	r0, #5076	; 0x13d4
   186fc:	movt	r0, #2
   18700:	sub	r3, r3, #124	; 0x7c
   18704:	movw	r2, #647	; 0x287
   18708:	bl	124b4 <__assert_fail@plt>
   1870c:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   18710:	andeq	r0, r2, ip, ror #24

00018714 <flatcc_builder_create_string_strn@@Base>:
   18714:	strd	r4, [sp, #-16]!
   18718:	mov	r4, r0
   1871c:	mov	r5, r2
   18720:	str	r6, [sp, #8]
   18724:	mov	r6, r1
   18728:	mov	r1, #0
   1872c:	mov	r0, r6
   18730:	str	lr, [sp, #12]
   18734:	sub	sp, sp, #88	; 0x58
   18738:	bl	1249c <memchr@plt>
   1873c:	ldr	lr, [r4, #136]	; 0x88
   18740:	cmp	r0, #0
   18744:	mov	ip, #4
   18748:	subne	r5, r0, r6
   1874c:	add	r3, sp, #12
   18750:	cmp	r5, #0
   18754:	mov	r0, #1
   18758:	moveq	r2, #2
   1875c:	str	r5, [sp, #12]
   18760:	str	r3, [sp, #24]
   18764:	sub	r1, lr, #1
   18768:	str	ip, [sp, #28]
   1876c:	sub	r1, r1, r5
   18770:	and	r1, r1, #3
   18774:	add	r1, r1, r0
   18778:	beq	18790 <flatcc_builder_create_string_strn@@Base+0x7c>
   1877c:	add	ip, r5, ip
   18780:	mov	r2, #3
   18784:	str	r6, [sp, #32]
   18788:	mov	r0, #2
   1878c:	str	r5, [sp, #36]	; 0x24
   18790:	ldr	r3, [pc, #132]	; 1881c <flatcc_builder_create_string_strn@@Base+0x108>
   18794:	add	r5, sp, #88	; 0x58
   18798:	add	r0, r0, #1
   1879c:	add	r0, r5, r0, lsl #3
   187a0:	add	ip, r1, ip
   187a4:	sub	r5, lr, ip
   187a8:	cmp	lr, r5
   187ac:	str	ip, [sp, #16]
   187b0:	str	r2, [sp, #20]
   187b4:	str	r3, [r0, #-72]	; 0xffffffb8
   187b8:	str	r1, [r0, #-68]	; 0xffffffbc
   187bc:	ble	187fc <flatcc_builder_create_string_strn@@Base+0xe8>
   187c0:	mov	r3, r5
   187c4:	add	r1, sp, #24
   187c8:	str	ip, [sp]
   187cc:	ldr	r0, [r4, #36]	; 0x24
   187d0:	ldr	r6, [r4, #44]	; 0x2c
   187d4:	blx	r6
   187d8:	cmp	r0, #0
   187dc:	bne	18818 <flatcc_builder_create_string_strn@@Base+0x104>
   187e0:	mov	r0, r5
   187e4:	str	r5, [r4, #136]	; 0x88
   187e8:	add	sp, sp, #88	; 0x58
   187ec:	ldrd	r4, [sp]
   187f0:	ldr	r6, [sp, #8]
   187f4:	add	sp, sp, #12
   187f8:	pop	{pc}		; (ldr pc, [sp], #4)
   187fc:	movw	r1, #4884	; 0x1314
   18800:	movt	r1, #2
   18804:	movw	r0, #5076	; 0x13d4
   18808:	movt	r0, #2
   1880c:	sub	r3, r3, #124	; 0x7c
   18810:	movw	r2, #647	; 0x287
   18814:	bl	124b4 <__assert_fail@plt>
   18818:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   1881c:	andeq	r0, r2, ip, ror #24

00018820 <flatcc_builder_end_string@@Base>:
   18820:	ldr	r3, [r0, #32]
   18824:	strd	r4, [sp, #-16]!
   18828:	ldrh	r2, [r3, #14]
   1882c:	str	r6, [sp, #8]
   18830:	str	lr, [sp, #12]
   18834:	sub	sp, sp, #88	; 0x58
   18838:	cmp	r2, #6
   1883c:	bne	189c4 <flatcc_builder_end_string@@Base+0x1a4>
   18840:	ldr	r3, [r3, #20]
   18844:	mov	r4, r0
   18848:	ldr	r2, [r0, #20]
   1884c:	cmp	r3, r2
   18850:	bne	189a8 <flatcc_builder_end_string@@Base+0x188>
   18854:	ldr	lr, [r4, #136]	; 0x88
   18858:	add	r2, sp, #12
   1885c:	mov	ip, #4
   18860:	cmp	r3, #0
   18864:	mov	r0, #1
   18868:	str	r3, [sp, #12]
   1886c:	str	r2, [sp, #24]
   18870:	str	ip, [sp, #28]
   18874:	ldr	r2, [r4, #16]
   18878:	moveq	r2, #2
   1887c:	sub	r1, lr, r3
   18880:	sub	r1, r1, #1
   18884:	and	r1, r1, #3
   18888:	add	r1, r1, r0
   1888c:	bne	18974 <flatcc_builder_end_string@@Base+0x154>
   18890:	ldr	r3, [pc, #328]	; 189e0 <flatcc_builder_end_string@@Base+0x1c0>
   18894:	add	r5, sp, #88	; 0x58
   18898:	add	r0, r0, #1
   1889c:	add	r0, r5, r0, lsl #3
   188a0:	add	ip, r1, ip
   188a4:	sub	r5, lr, ip
   188a8:	cmp	lr, r5
   188ac:	str	ip, [sp, #16]
   188b0:	str	r2, [sp, #20]
   188b4:	str	r3, [r0, #-72]	; 0xffffffb8
   188b8:	str	r1, [r0, #-68]	; 0xffffffbc
   188bc:	ble	1898c <flatcc_builder_end_string@@Base+0x16c>
   188c0:	add	r1, sp, #24
   188c4:	mov	r3, r5
   188c8:	str	ip, [sp]
   188cc:	ldr	r0, [r4, #36]	; 0x24
   188d0:	ldr	r6, [r4, #44]	; 0x2c
   188d4:	blx	r6
   188d8:	subs	r1, r0, #0
   188dc:	bne	18988 <flatcc_builder_end_string@@Base+0x168>
   188e0:	cmp	r5, #0
   188e4:	str	r5, [r4, #136]	; 0x88
   188e8:	beq	1895c <flatcc_builder_end_string@@Base+0x13c>
   188ec:	ldr	r0, [r4, #16]
   188f0:	ldr	r2, [r4, #20]
   188f4:	bl	12484 <memset@plt>
   188f8:	ldr	r3, [r4, #32]
   188fc:	ldr	r0, [r4, #60]	; 0x3c
   18900:	ldr	r2, [r4, #64]	; 0x40
   18904:	ldr	ip, [r3]
   18908:	ldmib	r3, {r1, lr}
   1890c:	add	r0, r0, ip
   18910:	sub	r2, r2, ip
   18914:	str	r0, [r4, #16]
   18918:	cmp	r2, r1
   1891c:	ldrh	r0, [r4, #128]	; 0x80
   18920:	movcs	r2, r1
   18924:	str	lr, [r4, #20]
   18928:	str	ip, [r4, #28]
   1892c:	ldrh	ip, [r4, #130]	; 0x82
   18930:	str	r2, [r4, #24]
   18934:	ldr	r2, [r4, #156]	; 0x9c
   18938:	str	r1, [r3, #4]
   1893c:	cmp	r0, ip
   18940:	sub	r0, r3, #36	; 0x24
   18944:	strhcc	ip, [r4, #128]	; 0x80
   18948:	ldrh	r1, [r3, #12]
   1894c:	sub	r3, r2, #1
   18950:	str	r0, [r4, #32]
   18954:	strh	r1, [r4, #130]	; 0x82
   18958:	str	r3, [r4, #156]	; 0x9c
   1895c:	mov	r0, r5
   18960:	add	sp, sp, #88	; 0x58
   18964:	ldrd	r4, [sp]
   18968:	ldr	r6, [sp, #8]
   1896c:	add	sp, sp, #12
   18970:	pop	{pc}		; (ldr pc, [sp], #4)
   18974:	add	ip, r3, ip
   18978:	mov	r0, #2
   1897c:	strd	r2, [sp, #32]
   18980:	mov	r2, #3
   18984:	b	18890 <flatcc_builder_end_string@@Base+0x70>
   18988:	bl	13c48 <flatcc_builder_default_alloc@@Base+0x19c>
   1898c:	movw	r1, #4884	; 0x1314
   18990:	movt	r1, #2
   18994:	movw	r0, #5076	; 0x13d4
   18998:	movt	r0, #2
   1899c:	sub	r3, r3, #124	; 0x7c
   189a0:	movw	r2, #647	; 0x287
   189a4:	bl	124b4 <__assert_fail@plt>
   189a8:	movw	r1, #4884	; 0x1314
   189ac:	movt	r1, #2
   189b0:	ldr	r3, [pc, #44]	; 189e4 <flatcc_builder_end_string@@Base+0x1c4>
   189b4:	movw	r0, #5716	; 0x1654
   189b8:	movt	r0, #2
   189bc:	movw	r2, #1733	; 0x6c5
   189c0:	bl	124b4 <__assert_fail@plt>
   189c4:	movw	r1, #4884	; 0x1314
   189c8:	movt	r1, #2
   189cc:	ldr	r3, [pc, #16]	; 189e4 <flatcc_builder_end_string@@Base+0x1c4>
   189d0:	movw	r0, #5012	; 0x1394
   189d4:	movt	r0, #2
   189d8:	movw	r2, #1732	; 0x6c4
   189dc:	bl	124b4 <__assert_fail@plt>
   189e0:	andeq	r0, r2, ip, ror #24
   189e4:	andeq	r1, r2, r8, lsr r2

000189e8 <flatcc_builder_string_edit@@Base>:
   189e8:	ldr	r0, [r0, #16]
   189ec:	bx	lr

000189f0 <flatcc_builder_string_len@@Base>:
   189f0:	ldr	r3, [r0, #32]
   189f4:	ldr	r0, [r3, #20]
   189f8:	bx	lr

000189fc <flatcc_builder_table_add@@Base>:
   189fc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18a00:	mov	r4, r0
   18a04:	ldr	r0, [r0, #32]
   18a08:	ldrh	r0, [r0, #14]
   18a0c:	strd	r6, [sp, #8]
   18a10:	strd	r8, [sp, #16]
   18a14:	str	lr, [sp, #24]
   18a18:	sub	sp, sp, #12
   18a1c:	cmp	r0, #3
   18a20:	bne	18b84 <flatcc_builder_table_add@@Base+0x188>
   18a24:	movw	r0, #32764	; 0x7ffc
   18a28:	cmp	r1, r0
   18a2c:	bhi	18b68 <flatcc_builder_table_add@@Base+0x16c>
   18a30:	ldrh	r0, [r4, #130]	; 0x82
   18a34:	lsl	r7, r1, #1
   18a38:	ldr	ip, [r4, #4]
   18a3c:	cmp	r0, r3
   18a40:	strhcc	r3, [r4, #130]	; 0x82
   18a44:	ldrh	r5, [ip, r7]
   18a48:	add	ip, ip, r7
   18a4c:	cmp	r5, #0
   18a50:	bne	18b4c <flatcc_builder_table_add@@Base+0x150>
   18a54:	ldr	r9, [r4, #12]
   18a58:	movw	lr, #31153	; 0x79b1
   18a5c:	movt	lr, #40503	; 0x9e37
   18a60:	uxth	r6, r1
   18a64:	sub	r8, r3, #1
   18a68:	ldr	r0, [r4, #20]
   18a6c:	rsb	r3, r3, #0
   18a70:	eor	r1, r1, r9
   18a74:	mul	r1, lr, r1
   18a78:	add	r8, r8, r0
   18a7c:	ldr	r0, [r4, #24]
   18a80:	and	r8, r8, r3
   18a84:	eor	r1, r1, r2
   18a88:	add	r2, r2, r8
   18a8c:	mul	r1, lr, r1
   18a90:	cmp	r2, r0
   18a94:	str	r1, [r4, #12]
   18a98:	str	r2, [r4, #20]
   18a9c:	bcs	18ad8 <flatcc_builder_table_add@@Base+0xdc>
   18aa0:	ldr	r0, [r4, #16]
   18aa4:	add	r3, r8, #4
   18aa8:	add	r0, r0, r8
   18aac:	strh	r3, [ip]
   18ab0:	ldrh	r3, [r4, #8]
   18ab4:	cmp	r3, r6
   18ab8:	addls	r6, r6, #1
   18abc:	strhls	r6, [r4, #8]
   18ac0:	add	sp, sp, #12
   18ac4:	ldrd	r4, [sp]
   18ac8:	ldrd	r6, [sp, #8]
   18acc:	ldrd	r8, [sp, #16]
   18ad0:	add	sp, sp, #24
   18ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ad8:	ldr	ip, [r4, #28]
   18adc:	mov	r0, #1
   18ae0:	add	r1, r4, #60	; 0x3c
   18ae4:	mov	r3, r0
   18ae8:	str	r0, [sp]
   18aec:	ldr	r9, [r4, #48]	; 0x30
   18af0:	add	ip, ip, r0
   18af4:	ldr	r0, [r4, #40]	; 0x28
   18af8:	add	r2, ip, r2
   18afc:	blx	r9
   18b00:	cmp	r0, #0
   18b04:	bne	18b44 <flatcc_builder_table_add@@Base+0x148>
   18b08:	ldr	ip, [r4, #4]
   18b0c:	movw	r2, #65532	; 0xfffc
   18b10:	ldr	r5, [r4, #28]
   18b14:	ldr	r3, [r4, #64]	; 0x40
   18b18:	add	ip, ip, r7
   18b1c:	ldr	r0, [r4, #60]	; 0x3c
   18b20:	ldr	r1, [r4, #32]
   18b24:	sub	r3, r3, r5
   18b28:	cmp	r3, r2
   18b2c:	add	r0, r0, r5
   18b30:	movcs	r3, r2
   18b34:	str	r0, [r4, #16]
   18b38:	str	r3, [r4, #24]
   18b3c:	str	r2, [r1, #4]
   18b40:	b	18aa4 <flatcc_builder_table_add@@Base+0xa8>
   18b44:	mov	r0, r5
   18b48:	b	18ac0 <flatcc_builder_table_add@@Base+0xc4>
   18b4c:	movw	r1, #4884	; 0x1314
   18b50:	movt	r1, #2
   18b54:	ldr	r3, [pc, #68]	; 18ba0 <flatcc_builder_table_add@@Base+0x1a4>
   18b58:	movw	r0, #5076	; 0x13d4
   18b5c:	movt	r0, #2
   18b60:	movw	r2, #1784	; 0x6f8
   18b64:	bl	124b4 <__assert_fail@plt>
   18b68:	movw	r1, #4884	; 0x1314
   18b6c:	movt	r1, #2
   18b70:	ldr	r3, [pc, #40]	; 18ba0 <flatcc_builder_table_add@@Base+0x1a4>
   18b74:	movw	r0, #5752	; 0x1678
   18b78:	movt	r0, #2
   18b7c:	movw	r2, #1774	; 0x6ee
   18b80:	bl	124b4 <__assert_fail@plt>
   18b84:	movw	r1, #4884	; 0x1314
   18b88:	movt	r1, #2
   18b8c:	ldr	r3, [pc, #12]	; 18ba0 <flatcc_builder_table_add@@Base+0x1a4>
   18b90:	movw	r0, #5600	; 0x15e0
   18b94:	movt	r0, #2
   18b98:	movw	r2, #1773	; 0x6ed
   18b9c:	bl	124b4 <__assert_fail@plt>
   18ba0:	andeq	r1, r2, r4, asr r2

00018ba4 <flatcc_builder_table_edit@@Base>:
   18ba4:	ldr	r2, [r0, #32]
   18ba8:	ldrh	r2, [r2, #14]
   18bac:	cmp	r2, #3
   18bb0:	bne	18bc8 <flatcc_builder_table_edit@@Base+0x24>
   18bb4:	ldr	r3, [r0, #20]
   18bb8:	ldr	r0, [r0, #16]
   18bbc:	sub	r3, r3, r1
   18bc0:	add	r0, r0, r3
   18bc4:	bx	lr
   18bc8:	movw	r1, #4884	; 0x1314
   18bcc:	movt	r1, #2
   18bd0:	ldr	r3, [pc, #20]	; 18bec <flatcc_builder_table_edit@@Base+0x48>
   18bd4:	movw	r0, #5600	; 0x15e0
   18bd8:	movt	r0, #2
   18bdc:	str	r4, [sp, #-8]!
   18be0:	movw	r2, #1794	; 0x702
   18be4:	str	lr, [sp, #4]
   18be8:	bl	124b4 <__assert_fail@plt>
   18bec:	andeq	r1, r2, r0, ror r2

00018bf0 <flatcc_builder_table_add_copy@@Base>:
   18bf0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18bf4:	mov	r5, r3
   18bf8:	ldr	r3, [r0, #32]
   18bfc:	ldrh	r3, [r3, #14]
   18c00:	strd	r6, [sp, #8]
   18c04:	strd	r8, [sp, #16]
   18c08:	strd	sl, [sp, #24]
   18c0c:	str	lr, [sp, #32]
   18c10:	sub	sp, sp, #12
   18c14:	cmp	r3, #3
   18c18:	ldrh	ip, [sp, #48]	; 0x30
   18c1c:	bne	18da8 <flatcc_builder_table_add_copy@@Base+0x1b8>
   18c20:	movw	r3, #32764	; 0x7ffc
   18c24:	cmp	r1, r3
   18c28:	bhi	18d8c <flatcc_builder_table_add_copy@@Base+0x19c>
   18c2c:	ldrh	r3, [r0, #130]	; 0x82
   18c30:	mov	r7, r2
   18c34:	lsl	r8, r1, #1
   18c38:	mov	r4, r0
   18c3c:	ldr	r2, [r0, #4]
   18c40:	cmp	r3, ip
   18c44:	strhcc	ip, [r0, #130]	; 0x82
   18c48:	ldrh	r9, [r2, r8]
   18c4c:	add	r2, r2, r8
   18c50:	cmp	r9, #0
   18c54:	bne	18d70 <flatcc_builder_table_add_copy@@Base+0x180>
   18c58:	ldr	lr, [r4, #12]
   18c5c:	movw	r0, #31153	; 0x79b1
   18c60:	movt	r0, #40503	; 0x9e37
   18c64:	uxth	r6, r1
   18c68:	sub	r3, ip, #1
   18c6c:	ldr	sl, [r4, #20]
   18c70:	rsb	ip, ip, #0
   18c74:	eor	r1, r1, lr
   18c78:	ldr	lr, [r4, #24]
   18c7c:	mul	r1, r0, r1
   18c80:	add	r3, r3, sl
   18c84:	and	sl, r3, ip
   18c88:	add	ip, r5, sl
   18c8c:	eor	r1, r1, r5
   18c90:	cmp	ip, lr
   18c94:	str	ip, [r4, #20]
   18c98:	mul	r1, r0, r1
   18c9c:	str	r1, [r4, #12]
   18ca0:	bcs	18cfc <flatcc_builder_table_add_copy@@Base+0x10c>
   18ca4:	ldr	r3, [r4, #16]
   18ca8:	add	r1, sl, #4
   18cac:	strh	r1, [r2]
   18cb0:	ldrh	r2, [r4, #8]
   18cb4:	cmp	r2, r6
   18cb8:	addls	r6, r6, #1
   18cbc:	strhls	r6, [r4, #8]
   18cc0:	adds	r3, r3, sl
   18cc4:	beq	18cdc <flatcc_builder_table_add_copy@@Base+0xec>
   18cc8:	mov	r0, r3
   18ccc:	mov	r2, r5
   18cd0:	mov	r1, r7
   18cd4:	bl	1240c <memcpy@plt>
   18cd8:	mov	r3, r0
   18cdc:	mov	r0, r3
   18ce0:	add	sp, sp, #12
   18ce4:	ldrd	r4, [sp]
   18ce8:	ldrd	r6, [sp, #8]
   18cec:	ldrd	r8, [sp, #16]
   18cf0:	ldrd	sl, [sp, #24]
   18cf4:	add	sp, sp, #32
   18cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   18cfc:	ldr	r2, [r4, #28]
   18d00:	mov	r0, #1
   18d04:	add	r1, r4, #60	; 0x3c
   18d08:	mov	r3, r0
   18d0c:	str	r0, [sp]
   18d10:	ldr	fp, [r4, #48]	; 0x30
   18d14:	add	r2, r2, r0
   18d18:	ldr	r0, [r4, #40]	; 0x28
   18d1c:	add	r2, r2, ip
   18d20:	blx	fp
   18d24:	cmp	r0, #0
   18d28:	bne	18d68 <flatcc_builder_table_add_copy@@Base+0x178>
   18d2c:	ldr	r2, [r4, #4]
   18d30:	movw	r0, #65532	; 0xfffc
   18d34:	ldr	r3, [r4, #28]
   18d38:	ldr	r1, [r4, #64]	; 0x40
   18d3c:	add	r2, r2, r8
   18d40:	ldr	lr, [r4, #60]	; 0x3c
   18d44:	ldr	ip, [r4, #32]
   18d48:	sub	r1, r1, r3
   18d4c:	cmp	r1, r0
   18d50:	add	r3, lr, r3
   18d54:	movcs	r1, r0
   18d58:	str	r3, [r4, #16]
   18d5c:	str	r1, [r4, #24]
   18d60:	str	r0, [ip, #4]
   18d64:	b	18ca8 <flatcc_builder_table_add_copy@@Base+0xb8>
   18d68:	mov	r3, r9
   18d6c:	b	18cdc <flatcc_builder_table_add_copy@@Base+0xec>
   18d70:	movw	r1, #4884	; 0x1314
   18d74:	movt	r1, #2
   18d78:	ldr	r3, [pc, #68]	; 18dc4 <flatcc_builder_table_add_copy@@Base+0x1d4>
   18d7c:	movw	r0, #5076	; 0x13d4
   18d80:	movt	r0, #2
   18d84:	movw	r2, #1784	; 0x6f8
   18d88:	bl	124b4 <__assert_fail@plt>
   18d8c:	movw	r1, #4884	; 0x1314
   18d90:	movt	r1, #2
   18d94:	ldr	r3, [pc, #40]	; 18dc4 <flatcc_builder_table_add_copy@@Base+0x1d4>
   18d98:	movw	r0, #5752	; 0x1678
   18d9c:	movt	r0, #2
   18da0:	movw	r2, #1774	; 0x6ee
   18da4:	bl	124b4 <__assert_fail@plt>
   18da8:	movw	r1, #4884	; 0x1314
   18dac:	movt	r1, #2
   18db0:	ldr	r3, [pc, #12]	; 18dc4 <flatcc_builder_table_add_copy@@Base+0x1d4>
   18db4:	movw	r0, #5600	; 0x15e0
   18db8:	movt	r0, #2
   18dbc:	movw	r2, #1773	; 0x6ed
   18dc0:	bl	124b4 <__assert_fail@plt>
   18dc4:	andeq	r1, r2, r4, asr r2

00018dc8 <flatcc_builder_table_add_offset@@Base>:
   18dc8:	ldr	r3, [r0, #32]
   18dcc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18dd0:	ldrh	r3, [r3, #14]
   18dd4:	strd	r6, [sp, #8]
   18dd8:	strd	r8, [sp, #16]
   18ddc:	str	lr, [sp, #24]
   18de0:	sub	sp, sp, #12
   18de4:	cmp	r3, #3
   18de8:	bne	18f48 <flatcc_builder_table_add_offset@@Base+0x180>
   18dec:	movw	r3, #32764	; 0x7ffc
   18df0:	cmp	r1, r3
   18df4:	bhi	18f2c <flatcc_builder_table_add_offset@@Base+0x164>
   18df8:	ldr	ip, [r0, #4]
   18dfc:	lsl	r7, r1, #1
   18e00:	mov	r4, r0
   18e04:	ldrh	r5, [ip, r7]
   18e08:	add	ip, ip, r7
   18e0c:	cmp	r5, #0
   18e10:	bne	18f10 <flatcc_builder_table_add_offset@@Base+0x148>
   18e14:	ldr	r2, [r0, #12]
   18e18:	movw	r3, #31153	; 0x79b1
   18e1c:	movt	r3, #40503	; 0x9e37
   18e20:	uxth	r6, r1
   18e24:	ldr	r8, [r0, #20]
   18e28:	ldr	r0, [r0, #24]
   18e2c:	eor	r1, r1, r2
   18e30:	mul	r1, r3, r1
   18e34:	add	r8, r8, #3
   18e38:	bic	r8, r8, #3
   18e3c:	add	r2, r8, #4
   18e40:	eor	r1, r1, #4
   18e44:	cmp	r2, r0
   18e48:	str	r2, [r4, #20]
   18e4c:	mul	r1, r3, r1
   18e50:	str	r1, [r4, #12]
   18e54:	bhi	18ea4 <flatcc_builder_table_add_offset@@Base+0xdc>
   18e58:	ldr	r0, [r4, #16]
   18e5c:	uxth	r2, r8
   18e60:	add	r0, r0, r8
   18e64:	add	r3, r2, #4
   18e68:	strh	r3, [ip]
   18e6c:	ldrh	r3, [r4, #8]
   18e70:	cmp	r3, r6
   18e74:	ldr	r3, [r4]
   18e78:	addls	r6, r6, #1
   18e7c:	strhls	r6, [r4, #8]
   18e80:	add	r1, r3, #2
   18e84:	str	r1, [r4]
   18e88:	strh	r2, [r3]
   18e8c:	add	sp, sp, #12
   18e90:	ldrd	r4, [sp]
   18e94:	ldrd	r6, [sp, #8]
   18e98:	ldrd	r8, [sp, #16]
   18e9c:	add	sp, sp, #24
   18ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ea4:	ldr	ip, [r4, #28]
   18ea8:	mov	r0, #1
   18eac:	add	r1, r4, #60	; 0x3c
   18eb0:	mov	r3, r0
   18eb4:	str	r0, [sp]
   18eb8:	ldr	r0, [r4, #40]	; 0x28
   18ebc:	add	r2, r2, ip
   18ec0:	ldr	r9, [r4, #48]	; 0x30
   18ec4:	blx	r9
   18ec8:	cmp	r0, #0
   18ecc:	bne	18f08 <flatcc_builder_table_add_offset@@Base+0x140>
   18ed0:	ldr	ip, [r4, #4]
   18ed4:	movw	r2, #65532	; 0xfffc
   18ed8:	ldrd	r0, [r4, #28]
   18edc:	ldr	r3, [r4, #64]	; 0x40
   18ee0:	add	ip, ip, r7
   18ee4:	ldr	r5, [r4, #60]	; 0x3c
   18ee8:	sub	r3, r3, r0
   18eec:	cmp	r3, r2
   18ef0:	add	r0, r5, r0
   18ef4:	movcs	r3, r2
   18ef8:	str	r0, [r4, #16]
   18efc:	str	r3, [r4, #24]
   18f00:	str	r2, [r1, #4]
   18f04:	b	18e5c <flatcc_builder_table_add_offset@@Base+0x94>
   18f08:	mov	r0, r5
   18f0c:	b	18e8c <flatcc_builder_table_add_offset@@Base+0xc4>
   18f10:	movw	r1, #4884	; 0x1314
   18f14:	movt	r1, #2
   18f18:	ldr	r3, [pc, #68]	; 18f64 <flatcc_builder_table_add_offset@@Base+0x19c>
   18f1c:	movw	r0, #5076	; 0x13d4
   18f20:	movt	r0, #2
   18f24:	movw	r2, #1819	; 0x71b
   18f28:	bl	124b4 <__assert_fail@plt>
   18f2c:	movw	r1, #4884	; 0x1314
   18f30:	movt	r1, #2
   18f34:	ldr	r3, [pc, #40]	; 18f64 <flatcc_builder_table_add_offset@@Base+0x19c>
   18f38:	movw	r0, #5752	; 0x1678
   18f3c:	movt	r0, #2
   18f40:	movw	r2, #1812	; 0x714
   18f44:	bl	124b4 <__assert_fail@plt>
   18f48:	movw	r1, #4884	; 0x1314
   18f4c:	movt	r1, #2
   18f50:	ldr	r3, [pc, #12]	; 18f64 <flatcc_builder_table_add_offset@@Base+0x19c>
   18f54:	movw	r0, #5600	; 0x15e0
   18f58:	movt	r0, #2
   18f5c:	movw	r2, #1811	; 0x713
   18f60:	bl	124b4 <__assert_fail@plt>
   18f64:	andeq	r1, r2, ip, lsl #5

00018f68 <flatcc_builder_table_add_union@@Base>:
   18f68:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18f6c:	strd	r6, [sp, #8]
   18f70:	strd	r8, [sp, #16]
   18f74:	str	lr, [sp, #24]
   18f78:	sub	sp, sp, #20
   18f7c:	add	ip, sp, #16
   18f80:	stmdb	ip, {r2, r3}
   18f84:	ldr	r3, [r0, #32]
   18f88:	ldrb	r7, [sp, #8]
   18f8c:	ldr	r6, [sp, #12]
   18f90:	ldrh	r3, [r3, #14]
   18f94:	cmp	r3, #3
   18f98:	bne	19154 <flatcc_builder_table_add_union@@Base+0x1ec>
   18f9c:	cmp	r7, #0
   18fa0:	mov	r4, r0
   18fa4:	mov	r5, r1
   18fa8:	beq	1908c <flatcc_builder_table_add_union@@Base+0x124>
   18fac:	cmp	r6, #0
   18fb0:	beq	18fd4 <flatcc_builder_table_add_union@@Base+0x6c>
   18fb4:	bl	18dc8 <flatcc_builder_table_add_offset@@Base>
   18fb8:	cmp	r0, #0
   18fbc:	beq	191a8 <flatcc_builder_table_add_union@@Base+0x240>
   18fc0:	ldr	r3, [r4, #32]
   18fc4:	ldrh	r3, [r3, #14]
   18fc8:	str	r6, [r0]
   18fcc:	cmp	r3, #3
   18fd0:	bne	19170 <flatcc_builder_table_add_union@@Base+0x208>
   18fd4:	sub	r1, r5, #1
   18fd8:	movw	r3, #32764	; 0x7ffc
   18fdc:	cmp	r1, r3
   18fe0:	bhi	1918c <flatcc_builder_table_add_union@@Base+0x224>
   18fe4:	ldrh	r3, [r4, #130]	; 0x82
   18fe8:	lsl	r8, r1, #1
   18fec:	cmp	r3, #0
   18ff0:	moveq	r3, #1
   18ff4:	strheq	r3, [r4, #130]	; 0x82
   18ff8:	ldr	r3, [r4, #4]
   18ffc:	ldrh	r2, [r3, r8]
   19000:	add	r0, r3, r8
   19004:	cmp	r2, #0
   19008:	bne	19138 <flatcc_builder_table_add_union@@Base+0x1d0>
   1900c:	ldr	r2, [r4, #12]
   19010:	movw	r3, #31153	; 0x79b1
   19014:	movt	r3, #40503	; 0x9e37
   19018:	uxth	r6, r1
   1901c:	ldr	r5, [r4, #20]
   19020:	ldr	ip, [r4, #24]
   19024:	eor	r1, r1, r2
   19028:	mul	r1, r3, r1
   1902c:	add	r2, r5, #1
   19030:	cmp	r2, ip
   19034:	str	r2, [r4, #20]
   19038:	eor	r1, r1, #1
   1903c:	mul	r1, r3, r1
   19040:	str	r1, [r4, #12]
   19044:	bcs	190b0 <flatcc_builder_table_add_union@@Base+0x148>
   19048:	ldr	r3, [r4, #16]
   1904c:	add	r2, r5, #4
   19050:	strh	r2, [r0]
   19054:	ldrh	r2, [r4, #8]
   19058:	cmp	r2, r6
   1905c:	addls	r6, r6, #1
   19060:	strhls	r6, [r4, #8]
   19064:	cmn	r3, r5
   19068:	beq	1911c <flatcc_builder_table_add_union@@Base+0x1b4>
   1906c:	mov	r0, #0
   19070:	strb	r7, [r3, r5]
   19074:	add	sp, sp, #20
   19078:	ldrd	r4, [sp]
   1907c:	ldrd	r6, [sp, #8]
   19080:	ldrd	r8, [sp, #16]
   19084:	add	sp, sp, #24
   19088:	pop	{pc}		; (ldr pc, [sp], #4)
   1908c:	cmp	r6, #0
   19090:	beq	18fd4 <flatcc_builder_table_add_union@@Base+0x6c>
   19094:	movw	r1, #4884	; 0x1314
   19098:	movt	r1, #2
   1909c:	ldr	r3, [pc, #288]	; 191c4 <flatcc_builder_table_add_union@@Base+0x25c>
   190a0:	movw	r0, #5820	; 0x16bc
   190a4:	movt	r0, #2
   190a8:	movw	r2, #1519	; 0x5ef
   190ac:	bl	124b4 <__assert_fail@plt>
   190b0:	ldr	r2, [r4, #28]
   190b4:	mov	r0, #1
   190b8:	add	r1, r4, #60	; 0x3c
   190bc:	mov	r3, r0
   190c0:	str	r0, [sp]
   190c4:	ldr	r0, [r4, #40]	; 0x28
   190c8:	add	r2, r5, r2
   190cc:	ldr	r9, [r4, #48]	; 0x30
   190d0:	add	r2, r2, #2
   190d4:	blx	r9
   190d8:	cmp	r0, #0
   190dc:	bne	1911c <flatcc_builder_table_add_union@@Base+0x1b4>
   190e0:	ldr	r0, [r4, #4]
   190e4:	movw	r1, #65532	; 0xfffc
   190e8:	ldr	ip, [r4, #28]
   190ec:	ldr	r2, [r4, #64]	; 0x40
   190f0:	add	r0, r0, r8
   190f4:	ldr	r3, [r4, #60]	; 0x3c
   190f8:	ldr	lr, [r4, #32]
   190fc:	sub	r2, r2, ip
   19100:	cmp	r2, r1
   19104:	add	r3, r3, ip
   19108:	movcs	r2, r1
   1910c:	str	r3, [r4, #16]
   19110:	str	r2, [r4, #24]
   19114:	str	r1, [lr, #4]
   19118:	b	1904c <flatcc_builder_table_add_union@@Base+0xe4>
   1911c:	movw	r1, #4884	; 0x1314
   19120:	movt	r1, #2
   19124:	ldr	r3, [pc, #152]	; 191c4 <flatcc_builder_table_add_union@@Base+0x25c>
   19128:	movw	r0, #5868	; 0x16ec
   1912c:	movt	r0, #2
   19130:	movw	r2, #1526	; 0x5f6
   19134:	bl	124b4 <__assert_fail@plt>
   19138:	movw	r1, #4884	; 0x1314
   1913c:	movt	r1, #2
   19140:	ldr	r3, [pc, #128]	; 191c8 <flatcc_builder_table_add_union@@Base+0x260>
   19144:	movw	r0, #5076	; 0x13d4
   19148:	movt	r0, #2
   1914c:	movw	r2, #1784	; 0x6f8
   19150:	bl	124b4 <__assert_fail@plt>
   19154:	movw	r1, #4884	; 0x1314
   19158:	movt	r1, #2
   1915c:	ldr	r3, [pc, #96]	; 191c4 <flatcc_builder_table_add_union@@Base+0x25c>
   19160:	movw	r0, #5600	; 0x15e0
   19164:	movt	r0, #2
   19168:	movw	r2, #1518	; 0x5ee
   1916c:	bl	124b4 <__assert_fail@plt>
   19170:	movw	r1, #4884	; 0x1314
   19174:	movt	r1, #2
   19178:	ldr	r3, [pc, #72]	; 191c8 <flatcc_builder_table_add_union@@Base+0x260>
   1917c:	movw	r0, #5600	; 0x15e0
   19180:	movt	r0, #2
   19184:	movw	r2, #1773	; 0x6ed
   19188:	bl	124b4 <__assert_fail@plt>
   1918c:	movw	r1, #4884	; 0x1314
   19190:	movt	r1, #2
   19194:	ldr	r3, [pc, #44]	; 191c8 <flatcc_builder_table_add_union@@Base+0x260>
   19198:	movw	r0, #5752	; 0x1678
   1919c:	movt	r0, #2
   191a0:	movw	r2, #1774	; 0x6ee
   191a4:	bl	124b4 <__assert_fail@plt>
   191a8:	movw	r1, #4884	; 0x1314
   191ac:	movt	r1, #2
   191b0:	ldr	r3, [pc, #12]	; 191c4 <flatcc_builder_table_add_union@@Base+0x25c>
   191b4:	movw	r0, #5856	; 0x16e0
   191b8:	movt	r0, #2
   191bc:	movw	r2, #1522	; 0x5f2
   191c0:	bl	124b4 <__assert_fail@plt>
   191c4:	andeq	r1, r2, ip, lsr #5
   191c8:	andeq	r1, r2, r4, asr r2

000191cc <flatcc_builder_table_add_union_vector@@Base>:
   191cc:	strd	r4, [sp, #-20]!	; 0xffffffec
   191d0:	strd	r6, [sp, #8]
   191d4:	mov	r7, r1
   191d8:	str	lr, [sp, #16]
   191dc:	sub	sp, sp, #12
   191e0:	add	r1, sp, #8
   191e4:	stmdb	r1, {r2, r3}
   191e8:	ldr	r3, [r0, #32]
   191ec:	ldm	sp, {r4, r6}
   191f0:	ldrh	r3, [r3, #14]
   191f4:	cmp	r3, #3
   191f8:	bne	19298 <flatcc_builder_table_add_union_vector@@Base+0xcc>
   191fc:	clz	r3, r6
   19200:	clz	r2, r4
   19204:	lsr	r3, r3, #5
   19208:	lsr	r2, r2, #5
   1920c:	cmp	r2, r3
   19210:	beq	19240 <flatcc_builder_table_add_union_vector@@Base+0x74>
   19214:	adds	r4, r4, #0
   19218:	movne	r4, #1
   1921c:	cmp	r4, r3
   19220:	mvnne	r4, #0
   19224:	beq	192b4 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   19228:	mov	r0, r4
   1922c:	add	sp, sp, #12
   19230:	ldrd	r4, [sp]
   19234:	ldrd	r6, [sp, #8]
   19238:	add	sp, sp, #16
   1923c:	pop	{pc}		; (ldr pc, [sp], #4)
   19240:	cmp	r4, #0
   19244:	beq	19228 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   19248:	sub	r1, r7, #1
   1924c:	mov	r5, r0
   19250:	bl	18dc8 <flatcc_builder_table_add_offset@@Base>
   19254:	subs	r3, r0, #0
   19258:	beq	192d0 <flatcc_builder_table_add_union_vector@@Base+0x104>
   1925c:	mov	r1, r7
   19260:	mov	r0, r5
   19264:	str	r4, [r3]
   19268:	bl	18dc8 <flatcc_builder_table_add_offset@@Base>
   1926c:	cmp	r0, #0
   19270:	movne	r4, #0
   19274:	strne	r6, [r0]
   19278:	bne	19228 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   1927c:	movw	r1, #4884	; 0x1314
   19280:	movt	r1, #2
   19284:	ldr	r3, [pc, #96]	; 192ec <flatcc_builder_table_add_union_vector@@Base+0x120>
   19288:	movw	r0, #5856	; 0x16e0
   1928c:	movt	r0, #2
   19290:	movw	r2, #1544	; 0x608
   19294:	bl	124b4 <__assert_fail@plt>
   19298:	movw	r1, #4884	; 0x1314
   1929c:	movt	r1, #2
   192a0:	ldr	r3, [pc, #68]	; 192ec <flatcc_builder_table_add_union_vector@@Base+0x120>
   192a4:	movw	r0, #5600	; 0x15e0
   192a8:	movt	r0, #2
   192ac:	mov	r2, #1536	; 0x600
   192b0:	bl	124b4 <__assert_fail@plt>
   192b4:	movw	r1, #4884	; 0x1314
   192b8:	movt	r1, #2
   192bc:	ldr	r3, [pc, #40]	; 192ec <flatcc_builder_table_add_union_vector@@Base+0x120>
   192c0:	movw	r0, #5880	; 0x16f8
   192c4:	movt	r0, #2
   192c8:	movw	r2, #1537	; 0x601
   192cc:	bl	124b4 <__assert_fail@plt>
   192d0:	movw	r1, #4884	; 0x1314
   192d4:	movt	r1, #2
   192d8:	ldr	r3, [pc, #12]	; 192ec <flatcc_builder_table_add_union_vector@@Base+0x120>
   192dc:	movw	r0, #5856	; 0x16e0
   192e0:	movt	r0, #2
   192e4:	movw	r2, #1540	; 0x604
   192e8:	bl	124b4 <__assert_fail@plt>
   192ec:	andeq	r1, r2, ip, asr #5

000192f0 <flatcc_builder_push_buffer_alignment@@Base>:
   192f0:	mov	r3, r0
   192f4:	mov	r2, #4
   192f8:	ldrh	r0, [r0, #128]	; 0x80
   192fc:	strh	r2, [r3, #128]	; 0x80
   19300:	bx	lr

00019304 <flatcc_builder_pop_buffer_alignment@@Base>:
   19304:	ldrh	r3, [r0, #128]	; 0x80
   19308:	cmp	r3, r1
   1930c:	strhcc	r1, [r0, #128]	; 0x80
   19310:	bx	lr

00019314 <flatcc_builder_get_buffer_alignment@@Base>:
   19314:	ldrh	r0, [r0, #128]	; 0x80
   19318:	bx	lr

0001931c <flatcc_builder_set_vtable_clustering@@Base>:
   1931c:	clz	r1, r1
   19320:	lsr	r1, r1, #5
   19324:	str	r1, [r0, #180]	; 0xb4
   19328:	bx	lr

0001932c <flatcc_builder_set_block_align@@Base>:
   1932c:	strh	r1, [r0, #132]	; 0x84
   19330:	bx	lr

00019334 <flatcc_builder_get_level@@Base>:
   19334:	ldr	r0, [r0, #156]	; 0x9c
   19338:	bx	lr

0001933c <flatcc_builder_set_max_level@@Base>:
   1933c:	ldr	r3, [r0, #160]	; 0xa0
   19340:	str	r1, [r0, #176]	; 0xb0
   19344:	cmp	r3, r1
   19348:	strlt	r1, [r0, #160]	; 0xa0
   1934c:	bx	lr

00019350 <flatcc_builder_get_buffer_size@@Base>:
   19350:	ldr	r3, [r0, #136]	; 0x88
   19354:	ldr	r0, [r0, #140]	; 0x8c
   19358:	sub	r0, r0, r3
   1935c:	bx	lr

00019360 <flatcc_builder_get_buffer_start@@Base>:
   19360:	ldr	r0, [r0, #136]	; 0x88
   19364:	bx	lr

00019368 <flatcc_builder_get_buffer_end@@Base>:
   19368:	ldr	r0, [r0, #140]	; 0x8c
   1936c:	bx	lr

00019370 <flatcc_builder_set_vtable_cache_limit@@Base>:
   19370:	str	r1, [r0, #172]	; 0xac
   19374:	bx	lr

00019378 <flatcc_builder_set_identifier@@Base>:
   19378:	ldr	r3, [pc, #16]	; 19390 <flatcc_builder_set_identifier@@Base+0x18>
   1937c:	cmp	r1, #0
   19380:	moveq	r1, r3
   19384:	ldr	r3, [r1]
   19388:	str	r3, [r0, #168]	; 0xa8
   1938c:	bx	lr
   19390:	andeq	r0, r2, ip, ror #24

00019394 <flatcc_builder_get_type@@Base>:
   19394:	ldr	r0, [r0, #32]
   19398:	cmp	r0, #0
   1939c:	ldrhne	r0, [r0, #14]
   193a0:	bx	lr

000193a4 <flatcc_builder_get_type_at@@Base>:
   193a4:	cmp	r1, #0
   193a8:	ble	193d0 <flatcc_builder_get_type_at@@Base+0x2c>
   193ac:	ldr	r3, [r0, #156]	; 0x9c
   193b0:	cmp	r3, r1
   193b4:	blt	193d0 <flatcc_builder_get_type_at@@Base+0x2c>
   193b8:	ldr	r2, [r0, #32]
   193bc:	sub	r1, r1, r3
   193c0:	add	r1, r1, r1, lsl #3
   193c4:	add	r1, r2, r1, lsl #2
   193c8:	ldrh	r0, [r1, #14]
   193cc:	bx	lr
   193d0:	mov	r0, #0
   193d4:	bx	lr

000193d8 <flatcc_builder_get_direct_buffer@@Base>:
   193d8:	ldr	r3, [r0, #184]	; 0xb8
   193dc:	cmp	r3, #0
   193e0:	bne	193fc <flatcc_builder_get_direct_buffer@@Base+0x24>
   193e4:	cmp	r1, #0
   193e8:	movne	r3, #0
   193ec:	movne	r0, r3
   193f0:	moveq	r0, r1
   193f4:	strne	r3, [r1]
   193f8:	bx	lr
   193fc:	ldrd	r2, [r0, #188]	; 0xbc
   19400:	cmp	r2, r3
   19404:	bne	193e4 <flatcc_builder_get_direct_buffer@@Base+0xc>
   19408:	cmp	r1, #0
   1940c:	ldrne	r3, [r0, #212]	; 0xd4
   19410:	ldr	r0, [r0, #196]	; 0xc4
   19414:	strne	r3, [r1]
   19418:	bx	lr

0001941c <flatcc_builder_copy_buffer@@Base>:
   1941c:	ldr	r3, [r0, #184]	; 0xb8
   19420:	cmp	r3, #0
   19424:	beq	1944c <flatcc_builder_copy_buffer@@Base+0x30>
   19428:	add	r0, r0, #188	; 0xbc
   1942c:	str	r4, [sp, #-8]!
   19430:	str	lr, [sp, #4]
   19434:	bl	19b88 <flatcc_emitter_copy_buffer@@Base>
   19438:	cmp	r0, #0
   1943c:	beq	19454 <flatcc_builder_copy_buffer@@Base+0x38>
   19440:	ldr	r4, [sp]
   19444:	add	sp, sp, #4
   19448:	pop	{pc}		; (ldr pc, [sp], #4)
   1944c:	mov	r0, r3
   19450:	bx	lr
   19454:	bl	13ce8 <flatcc_builder_default_alloc@@Base+0x23c>

00019458 <flatcc_builder_finalize_buffer@@Base>:
   19458:	strd	r4, [sp, #-16]!
   1945c:	cmp	r1, #0
   19460:	mov	r5, r0
   19464:	ldr	r2, [r0, #136]	; 0x88
   19468:	ldr	r4, [r0, #140]	; 0x8c
   1946c:	str	r6, [sp, #8]
   19470:	str	lr, [sp, #12]
   19474:	sub	r4, r4, r2
   19478:	mov	r0, r4
   1947c:	strne	r4, [r1]
   19480:	bl	1243c <malloc@plt>
   19484:	subs	r6, r0, #0
   19488:	beq	194e0 <flatcc_builder_finalize_buffer@@Base+0x88>
   1948c:	ldr	r3, [r5, #184]	; 0xb8
   19490:	cmp	r3, #0
   19494:	beq	194c4 <flatcc_builder_finalize_buffer@@Base+0x6c>
   19498:	mov	r2, r4
   1949c:	add	r0, r5, #188	; 0xbc
   194a0:	mov	r1, r6
   194a4:	bl	19b88 <flatcc_emitter_copy_buffer@@Base>
   194a8:	cmp	r0, #0
   194ac:	beq	194fc <flatcc_builder_finalize_buffer@@Base+0xa4>
   194b0:	mov	r0, r6
   194b4:	ldrd	r4, [sp]
   194b8:	ldr	r6, [sp, #8]
   194bc:	add	sp, sp, #12
   194c0:	pop	{pc}		; (ldr pc, [sp], #4)
   194c4:	movw	r1, #4884	; 0x1314
   194c8:	movt	r1, #2
   194cc:	ldr	r3, [pc, #44]	; 19500 <flatcc_builder_finalize_buffer@@Base+0xa8>
   194d0:	movw	r0, #5076	; 0x13d4
   194d4:	movt	r0, #2
   194d8:	movw	r2, #1948	; 0x79c
   194dc:	bl	124b4 <__assert_fail@plt>
   194e0:	movw	r1, #4884	; 0x1314
   194e4:	movt	r1, #2
   194e8:	ldr	r3, [pc, #16]	; 19500 <flatcc_builder_finalize_buffer@@Base+0xa8>
   194ec:	movw	r0, #5076	; 0x13d4
   194f0:	movt	r0, #2
   194f4:	movw	r2, #1944	; 0x798
   194f8:	bl	124b4 <__assert_fail@plt>
   194fc:	bl	13ce8 <flatcc_builder_default_alloc@@Base+0x23c>
   19500:	strdeq	r1, [r2], -r4

00019504 <flatcc_builder_finalize_aligned_buffer@@Base>:
   19504:	strd	r4, [sp, #-20]!	; 0xffffffec
   19508:	mov	r2, #0
   1950c:	mov	r5, r0
   19510:	ldr	r3, [r0, #136]	; 0x88
   19514:	ldr	r4, [r0, #140]	; 0x8c
   19518:	strd	r6, [sp, #8]
   1951c:	subs	r6, r1, #0
   19520:	ldrh	r1, [r0, #128]	; 0x80
   19524:	str	lr, [sp, #16]
   19528:	sub	sp, sp, #12
   1952c:	add	r0, sp, #4
   19530:	sub	r3, r4, r3
   19534:	str	r2, [sp, #4]
   19538:	sub	r4, r1, #1
   1953c:	rsb	r2, r1, #0
   19540:	strne	r3, [r6]
   19544:	add	r4, r4, r3
   19548:	cmp	r1, #4
   1954c:	and	r4, r4, r2
   19550:	movcc	r1, #4
   19554:	mov	r2, r4
   19558:	bl	12478 <posix_memalign@plt>
   1955c:	cmp	r0, #0
   19560:	beq	195a0 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   19564:	ldr	r0, [sp, #4]
   19568:	cmp	r0, #0
   1956c:	beq	19574 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   19570:	bl	12400 <free@plt>
   19574:	cmp	r6, #0
   19578:	movne	r3, #0
   1957c:	moveq	r7, r6
   19580:	movne	r7, r3
   19584:	strne	r3, [r6]
   19588:	mov	r0, r7
   1958c:	add	sp, sp, #12
   19590:	ldrd	r4, [sp]
   19594:	ldrd	r6, [sp, #8]
   19598:	add	sp, sp, #16
   1959c:	pop	{pc}		; (ldr pc, [sp], #4)
   195a0:	ldr	r7, [sp, #4]
   195a4:	cmp	r7, #0
   195a8:	beq	19574 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   195ac:	ldr	r3, [r5, #184]	; 0xb8
   195b0:	cmp	r3, #0
   195b4:	beq	195d4 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   195b8:	mov	r2, r4
   195bc:	add	r0, r5, #188	; 0xbc
   195c0:	mov	r1, r7
   195c4:	bl	19b88 <flatcc_emitter_copy_buffer@@Base>
   195c8:	cmp	r0, #0
   195cc:	bne	19588 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   195d0:	bl	13ce8 <flatcc_builder_default_alloc@@Base+0x23c>
   195d4:	mov	r0, r7
   195d8:	b	19570 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

000195dc <flatcc_builder_aligned_alloc@@Base>:
   195dc:	cmp	r0, #4
   195e0:	str	r4, [sp, #-8]!
   195e4:	mov	r4, #0
   195e8:	str	lr, [sp, #4]
   195ec:	sub	sp, sp, #8
   195f0:	mov	r2, r1
   195f4:	movcs	r1, r0
   195f8:	movcc	r1, #4
   195fc:	add	r0, sp, #4
   19600:	str	r4, [sp, #4]
   19604:	bl	12478 <posix_memalign@plt>
   19608:	cmp	r0, r4
   1960c:	ldr	r0, [sp, #4]
   19610:	beq	19624 <flatcc_builder_aligned_alloc@@Base+0x48>
   19614:	cmp	r0, #0
   19618:	beq	19624 <flatcc_builder_aligned_alloc@@Base+0x48>
   1961c:	bl	12400 <free@plt>
   19620:	mov	r0, r4
   19624:	add	sp, sp, #8
   19628:	ldr	r4, [sp]
   1962c:	add	sp, sp, #4
   19630:	pop	{pc}		; (ldr pc, [sp], #4)

00019634 <flatcc_builder_aligned_free@@Base>:
   19634:	b	12400 <free@plt>

00019638 <flatcc_builder_get_emit_context@@Base>:
   19638:	ldr	r0, [r0, #36]	; 0x24
   1963c:	bx	lr

00019640 <flatcc_emitter_recycle_page@@Base>:
   19640:	ldr	r3, [r0]
   19644:	cmp	r3, r1
   19648:	beq	1968c <flatcc_emitter_recycle_page@@Base+0x4c>
   1964c:	ldr	r2, [r0, #4]
   19650:	cmp	r2, r1
   19654:	beq	1968c <flatcc_emitter_recycle_page@@Base+0x4c>
   19658:	push	{lr}		; (str lr, [sp, #-4]!)
   1965c:	mov	r0, #0
   19660:	ldr	lr, [r1, #2944]	; 0xb80
   19664:	ldr	ip, [r1, #2948]	; 0xb84
   19668:	str	ip, [lr, #2948]	; 0xb84
   1966c:	ldr	r2, [r3, #2948]	; 0xb84
   19670:	str	lr, [ip, #2944]	; 0xb80
   19674:	str	r3, [r1, #2944]	; 0xb80
   19678:	str	r2, [r1, #2948]	; 0xb84
   1967c:	str	r1, [r2, #2944]	; 0xb80
   19680:	ldr	r3, [r1, #2944]	; 0xb80
   19684:	str	r1, [r3, #2948]	; 0xb84
   19688:	pop	{pc}		; (ldr pc, [sp], #4)
   1968c:	mvn	r0, #0
   19690:	bx	lr

00019694 <flatcc_emitter_reset@@Base>:
   19694:	ldr	r2, [r0]
   19698:	cmp	r2, #0
   1969c:	bxeq	lr
   196a0:	strd	r4, [sp, #-16]!
   196a4:	movw	ip, #64064	; 0xfa40
   196a8:	movt	ip, #65535	; 0xffff
   196ac:	ldr	r1, [r0, #24]
   196b0:	add	r4, r2, #1472	; 0x5c0
   196b4:	ldr	r3, [r0, #32]
   196b8:	ldr	r5, [r0, #28]
   196bc:	str	r6, [sp, #8]
   196c0:	str	lr, [sp, #12]
   196c4:	mov	lr, #1472	; 0x5c0
   196c8:	cmp	r3, #0
   196cc:	stmib	r0, {r2, r4}
   196d0:	moveq	r3, r1
   196d4:	lsr	r1, r1, #2
   196d8:	str	lr, [r0, #12]
   196dc:	add	r3, r3, r3, lsl #1
   196e0:	str	r4, [r0, #16]
   196e4:	str	lr, [r0, #20]
   196e8:	add	r3, r1, r3, lsr #2
   196ec:	str	ip, [r2, #2952]	; 0xb88
   196f0:	mov	ip, #0
   196f4:	cmp	r5, r3, lsl #1
   196f8:	str	ip, [r0, #24]
   196fc:	str	r3, [r0, #32]
   19700:	bls	19758 <flatcc_emitter_reset@@Base+0xc4>
   19704:	ldr	r3, [r2, #2944]	; 0xb80
   19708:	mov	r4, r0
   1970c:	cmp	r2, r3
   19710:	bne	19728 <flatcc_emitter_reset@@Base+0x94>
   19714:	b	19758 <flatcc_emitter_reset@@Base+0xc4>
   19718:	ldm	r4, {r1, r2}
   1971c:	ldr	r3, [r2, #2944]	; 0xb80
   19720:	cmp	r3, r1
   19724:	beq	19758 <flatcc_emitter_reset@@Base+0xc4>
   19728:	ldr	r1, [r3, #2944]	; 0xb80
   1972c:	mov	r0, r3
   19730:	str	r1, [r2, #2944]	; 0xb80
   19734:	ldr	r3, [r3, #2944]	; 0xb80
   19738:	str	r2, [r3, #2948]	; 0xb84
   1973c:	bl	12400 <free@plt>
   19740:	ldr	r3, [r4, #28]
   19744:	ldr	r2, [r4, #32]
   19748:	sub	r3, r3, #2944	; 0xb80
   1974c:	cmp	r3, r2, lsl #1
   19750:	str	r3, [r4, #28]
   19754:	bhi	19718 <flatcc_emitter_reset@@Base+0x84>
   19758:	ldrd	r4, [sp]
   1975c:	ldr	r6, [sp, #8]
   19760:	add	sp, sp, #12
   19764:	pop	{pc}		; (ldr pc, [sp], #4)

00019768 <flatcc_emitter_clear@@Base>:
   19768:	ldr	r3, [r0]
   1976c:	cmp	r3, #0
   19770:	bxeq	lr
   19774:	mov	r1, #0
   19778:	strd	r4, [sp, #-16]!
   1977c:	mov	r5, r0
   19780:	ldr	r2, [r3, #2948]	; 0xb84
   19784:	str	r6, [sp, #8]
   19788:	str	lr, [sp, #12]
   1978c:	str	r1, [r2, #2944]	; 0xb80
   19790:	ldr	r4, [r3, #2944]	; 0xb80
   19794:	cmp	r4, r1
   19798:	bne	197a4 <flatcc_emitter_clear@@Base+0x3c>
   1979c:	b	197e0 <flatcc_emitter_clear@@Base+0x78>
   197a0:	mov	r4, r3
   197a4:	ldr	r0, [r4, #2948]	; 0xb84
   197a8:	bl	12400 <free@plt>
   197ac:	ldr	r3, [r4, #2944]	; 0xb80
   197b0:	cmp	r3, #0
   197b4:	bne	197a0 <flatcc_emitter_clear@@Base+0x38>
   197b8:	mov	r0, r4
   197bc:	bl	12400 <free@plt>
   197c0:	mov	r0, r5
   197c4:	mov	r2, #36	; 0x24
   197c8:	ldrd	r4, [sp]
   197cc:	mov	r1, #0
   197d0:	ldr	r6, [sp, #8]
   197d4:	ldr	lr, [sp, #12]
   197d8:	add	sp, sp, #16
   197dc:	b	12484 <memset@plt>
   197e0:	mov	r4, r3
   197e4:	b	197b8 <flatcc_emitter_clear@@Base+0x50>

000197e8 <flatcc_emitter@@Base>:
   197e8:	cmp	r3, #0
   197ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   197f0:	mov	r4, r0
   197f4:	ldr	r3, [r0, #24]
   197f8:	strd	r6, [sp, #8]
   197fc:	strd	r8, [sp, #16]
   19800:	sub	r8, r2, #1
   19804:	strd	sl, [sp, #24]
   19808:	str	lr, [sp, #32]
   1980c:	sub	sp, sp, #12
   19810:	ldr	ip, [sp, #48]	; 0x30
   19814:	add	r3, r3, ip
   19818:	str	r3, [r0, #24]
   1981c:	blt	19a00 <flatcc_emitter@@Base+0x218>
   19820:	ldr	r0, [r0, #20]
   19824:	cmp	r0, ip
   19828:	bcs	198c0 <flatcc_emitter@@Base+0xd8>
   1982c:	cmp	r2, #0
   19830:	beq	19904 <flatcc_emitter@@Base+0x11c>
   19834:	movw	r3, #64064	; 0xfa40
   19838:	movt	r3, #65535	; 0xffff
   1983c:	add	r5, r1, #8
   19840:	mov	r8, r2
   19844:	mov	r9, #1472	; 0x5c0
   19848:	str	r3, [sp, #4]
   1984c:	ldr	r7, [r5, #-8]
   19850:	ldr	r6, [r5, #-4]
   19854:	cmp	r6, #0
   19858:	beq	1999c <flatcc_emitter@@Base+0x1b4>
   1985c:	mov	r3, r0
   19860:	cmp	r6, r3
   19864:	bls	198b8 <flatcc_emitter@@Base+0xd0>
   19868:	cmp	r3, #0
   1986c:	beq	19924 <flatcc_emitter@@Base+0x13c>
   19870:	sub	fp, r6, r3
   19874:	mov	r6, r3
   19878:	mov	r2, r6
   1987c:	mov	r1, r7
   19880:	ldr	r0, [r4, #16]
   19884:	bl	1240c <memcpy@plt>
   19888:	ldr	r2, [r4, #16]
   1988c:	cmp	fp, #0
   19890:	add	r7, r7, r6
   19894:	ldr	r0, [r4, #20]
   19898:	add	r2, r2, r6
   1989c:	sub	r3, r0, r6
   198a0:	mov	r0, r3
   198a4:	strd	r2, [r4, #16]
   198a8:	beq	1999c <flatcc_emitter@@Base+0x1b4>
   198ac:	mov	r6, fp
   198b0:	cmp	r6, r3
   198b4:	bhi	19868 <flatcc_emitter@@Base+0x80>
   198b8:	mov	fp, #0
   198bc:	b	19878 <flatcc_emitter@@Base+0x90>
   198c0:	ldr	r3, [r4, #16]
   198c4:	sub	r0, r0, ip
   198c8:	str	r0, [r4, #20]
   198cc:	add	ip, r3, ip
   198d0:	str	ip, [r4, #16]
   198d4:	cmp	r2, #0
   198d8:	addne	r4, r1, #8
   198dc:	beq	19904 <flatcc_emitter@@Base+0x11c>
   198e0:	mov	r0, r3
   198e4:	ldmdb	r4, {r1, r2}
   198e8:	sub	r8, r8, #1
   198ec:	bl	1240c <memcpy@plt>
   198f0:	ldr	r2, [r4, #-4]
   198f4:	cmn	r8, #1
   198f8:	add	r4, r4, #8
   198fc:	add	r3, r0, r2
   19900:	bne	198e0 <flatcc_emitter@@Base+0xf8>
   19904:	mov	r0, #0
   19908:	add	sp, sp, #12
   1990c:	ldrd	r4, [sp]
   19910:	ldrd	r6, [sp, #8]
   19914:	ldrd	r8, [sp, #16]
   19918:	ldrd	sl, [sp, #24]
   1991c:	add	sp, sp, #32
   19920:	pop	{pc}		; (ldr pc, [sp], #4)
   19924:	ldr	fp, [r4, #4]
   19928:	cmp	fp, #0
   1992c:	beq	199ac <flatcc_emitter@@Base+0x1c4>
   19930:	ldr	sl, [r4]
   19934:	ldr	r0, [fp, #2944]	; 0xb80
   19938:	cmp	r0, sl
   1993c:	beq	19968 <flatcc_emitter@@Base+0x180>
   19940:	str	r0, [r4, #4]
   19944:	ldr	r1, [r0, #2948]	; 0xb84
   19948:	mov	r2, #2944	; 0xb80
   1994c:	mov	r3, r2
   19950:	str	r0, [r4, #16]
   19954:	str	r2, [r4, #20]
   19958:	ldr	r2, [r1, #2952]	; 0xb88
   1995c:	add	r2, r2, r3
   19960:	str	r2, [r0, #2952]	; 0xb88
   19964:	b	19860 <flatcc_emitter@@Base+0x78>
   19968:	movw	r0, #2956	; 0xb8c
   1996c:	bl	1243c <malloc@plt>
   19970:	cmp	r0, #0
   19974:	beq	199f8 <flatcc_emitter@@Base+0x210>
   19978:	ldr	r2, [r4, #28]
   1997c:	str	sl, [r0, #2944]	; 0xb80
   19980:	str	fp, [r0, #2948]	; 0xb84
   19984:	add	r2, r2, #2944	; 0xb80
   19988:	str	r2, [r4, #28]
   1998c:	str	r0, [sl, #2948]	; 0xb84
   19990:	str	r0, [fp, #2944]	; 0xb80
   19994:	str	r0, [r4, #4]
   19998:	b	19944 <flatcc_emitter@@Base+0x15c>
   1999c:	subs	r8, r8, #1
   199a0:	add	r5, r5, #8
   199a4:	bne	1984c <flatcc_emitter@@Base+0x64>
   199a8:	b	19904 <flatcc_emitter@@Base+0x11c>
   199ac:	movw	r0, #2956	; 0xb8c
   199b0:	bl	1243c <malloc@plt>
   199b4:	cmp	r0, #0
   199b8:	beq	199f8 <flatcc_emitter@@Base+0x210>
   199bc:	ldr	r2, [r4, #28]
   199c0:	add	r1, r0, #1472	; 0x5c0
   199c4:	mov	r3, #1472	; 0x5c0
   199c8:	str	r0, [r4]
   199cc:	strd	r0, [r4, #4]
   199d0:	str	r9, [r4, #12]
   199d4:	str	r1, [r4, #16]
   199d8:	add	r2, r2, #2944	; 0xb80
   199dc:	str	r9, [r4, #20]
   199e0:	str	r0, [r0, #2944]	; 0xb80
   199e4:	str	r2, [r4, #28]
   199e8:	ldr	r2, [sp, #4]
   199ec:	str	r0, [r0, #2948]	; 0xb84
   199f0:	str	r2, [r0, #2952]	; 0xb88
   199f4:	b	19860 <flatcc_emitter@@Base+0x78>
   199f8:	mvn	r0, #0
   199fc:	b	19908 <flatcc_emitter@@Base+0x120>
   19a00:	ldr	r0, [r0, #12]
   19a04:	cmp	r0, ip
   19a08:	bcs	19b70 <flatcc_emitter@@Base+0x388>
   19a0c:	add	r5, r1, r2, lsl #3
   19a10:	movw	r3, #64064	; 0xfa40
   19a14:	movt	r3, #65535	; 0xffff
   19a18:	str	r3, [sp, #4]
   19a1c:	cmn	r8, #1
   19a20:	beq	19904 <flatcc_emitter@@Base+0x11c>
   19a24:	ldr	r7, [r5, #-8]
   19a28:	ldr	r6, [r5, #-4]
   19a2c:	cmp	r6, #0
   19a30:	add	r7, r7, r6
   19a34:	beq	19a84 <flatcc_emitter@@Base+0x29c>
   19a38:	mov	r9, #1472	; 0x5c0
   19a3c:	ldr	r2, [r4, #12]
   19a40:	cmp	r2, r6
   19a44:	bcs	19ae8 <flatcc_emitter@@Base+0x300>
   19a48:	cmp	r2, #0
   19a4c:	beq	19a90 <flatcc_emitter@@Base+0x2a8>
   19a50:	sub	r6, r6, r2
   19a54:	mov	r1, #0
   19a58:	ldr	r3, [r4, #8]
   19a5c:	rsb	r0, r2, #0
   19a60:	add	r7, r7, r0
   19a64:	str	r1, [r4, #12]
   19a68:	mov	r1, r7
   19a6c:	add	r3, r3, r0
   19a70:	mov	r0, r3
   19a74:	str	r3, [r4, #8]
   19a78:	bl	1240c <memcpy@plt>
   19a7c:	cmp	r6, #0
   19a80:	bne	19a3c <flatcc_emitter@@Base+0x254>
   19a84:	sub	r5, r5, #8
   19a88:	sub	r8, r8, #1
   19a8c:	b	19a1c <flatcc_emitter@@Base+0x234>
   19a90:	ldr	fp, [r4]
   19a94:	cmp	fp, #0
   19a98:	beq	19b2c <flatcc_emitter@@Base+0x344>
   19a9c:	ldr	sl, [r4, #4]
   19aa0:	ldr	r0, [fp, #2948]	; 0xb84
   19aa4:	cmp	r0, sl
   19aa8:	beq	19af8 <flatcc_emitter@@Base+0x310>
   19aac:	ldr	r3, [fp, #2952]	; 0xb88
   19ab0:	sub	r3, r3, #2944	; 0xb80
   19ab4:	str	r3, [r0, #2952]	; 0xb88
   19ab8:	str	r0, [r4]
   19abc:	ldr	r3, [r0, #2944]	; 0xb80
   19ac0:	mov	r2, #2944	; 0xb80
   19ac4:	add	r1, r0, #2944	; 0xb80
   19ac8:	ldr	r3, [r3, #2952]	; 0xb88
   19acc:	str	r1, [r4, #8]
   19ad0:	str	r2, [r4, #12]
   19ad4:	sub	r3, r3, #2944	; 0xb80
   19ad8:	str	r3, [r0, #2952]	; 0xb88
   19adc:	ldr	r2, [r4, #12]
   19ae0:	cmp	r2, r6
   19ae4:	bcc	19a48 <flatcc_emitter@@Base+0x260>
   19ae8:	sub	r1, r2, r6
   19aec:	mov	r2, r6
   19af0:	mov	r6, #0
   19af4:	b	19a58 <flatcc_emitter@@Base+0x270>
   19af8:	movw	r0, #2956	; 0xb8c
   19afc:	bl	1243c <malloc@plt>
   19b00:	cmp	r0, #0
   19b04:	beq	199f8 <flatcc_emitter@@Base+0x210>
   19b08:	ldr	r2, [r4, #28]
   19b0c:	str	fp, [r0, #2944]	; 0xb80
   19b10:	str	sl, [r0, #2948]	; 0xb84
   19b14:	add	r2, r2, #2944	; 0xb80
   19b18:	str	r2, [r4, #28]
   19b1c:	str	r0, [fp, #2948]	; 0xb84
   19b20:	str	r0, [sl, #2944]	; 0xb80
   19b24:	str	r0, [r4]
   19b28:	b	19abc <flatcc_emitter@@Base+0x2d4>
   19b2c:	movw	r0, #2956	; 0xb8c
   19b30:	bl	1243c <malloc@plt>
   19b34:	cmp	r0, #0
   19b38:	beq	199f8 <flatcc_emitter@@Base+0x210>
   19b3c:	ldr	r3, [r4, #28]
   19b40:	add	r2, r0, #1472	; 0x5c0
   19b44:	str	r0, [r4]
   19b48:	stmib	r4, {r0, r2, r9}
   19b4c:	add	r3, r3, #2944	; 0xb80
   19b50:	str	r2, [r4, #16]
   19b54:	str	r9, [r4, #20]
   19b58:	str	r3, [r4, #28]
   19b5c:	ldr	r3, [sp, #4]
   19b60:	str	r0, [r0, #2944]	; 0xb80
   19b64:	str	r0, [r0, #2948]	; 0xb84
   19b68:	str	r3, [r0, #2952]	; 0xb88
   19b6c:	b	19a3c <flatcc_emitter@@Base+0x254>
   19b70:	ldr	r3, [r4, #8]
   19b74:	sub	r0, r0, ip
   19b78:	str	r0, [r4, #12]
   19b7c:	sub	r3, r3, ip
   19b80:	str	r3, [r4, #8]
   19b84:	b	198d4 <flatcc_emitter@@Base+0xec>

00019b88 <flatcc_emitter_copy_buffer@@Base>:
   19b88:	ldr	r3, [r0, #24]
   19b8c:	strd	r4, [sp, #-16]!
   19b90:	str	r6, [sp, #8]
   19b94:	str	lr, [sp, #12]
   19b98:	cmp	r3, r2
   19b9c:	movhi	r5, #0
   19ba0:	bhi	19c20 <flatcc_emitter_copy_buffer@@Base+0x98>
   19ba4:	ldr	r5, [r0]
   19ba8:	mov	r6, r0
   19bac:	cmp	r5, #0
   19bb0:	beq	19c20 <flatcc_emitter_copy_buffer@@Base+0x98>
   19bb4:	ldr	r2, [r6, #4]
   19bb8:	mov	r0, r1
   19bbc:	ldr	r1, [r6, #8]
   19bc0:	cmp	r5, r2
   19bc4:	beq	19c34 <flatcc_emitter_copy_buffer@@Base+0xac>
   19bc8:	ldr	r2, [r6, #12]
   19bcc:	rsb	r2, r2, #2944	; 0xb80
   19bd0:	add	r5, r0, r2
   19bd4:	bl	1240c <memcpy@plt>
   19bd8:	ldrd	r2, [r6]
   19bdc:	ldr	r4, [r2, #2944]	; 0xb80
   19be0:	cmp	r4, r3
   19be4:	beq	19c0c <flatcc_emitter_copy_buffer@@Base+0x84>
   19be8:	mov	r2, #2944	; 0xb80
   19bec:	mov	r1, r4
   19bf0:	mov	r0, r5
   19bf4:	add	r5, r5, r2
   19bf8:	bl	1240c <memcpy@plt>
   19bfc:	ldr	r3, [r6, #4]
   19c00:	ldr	r4, [r4, #2944]	; 0xb80
   19c04:	cmp	r3, r4
   19c08:	bne	19be8 <flatcc_emitter_copy_buffer@@Base+0x60>
   19c0c:	ldr	r2, [r6, #20]
   19c10:	mov	r1, r4
   19c14:	mov	r0, r5
   19c18:	rsb	r2, r2, #2944	; 0xb80
   19c1c:	bl	1240c <memcpy@plt>
   19c20:	mov	r0, r5
   19c24:	ldrd	r4, [sp]
   19c28:	ldr	r6, [sp, #8]
   19c2c:	add	sp, sp, #12
   19c30:	pop	{pc}		; (ldr pc, [sp], #4)
   19c34:	mov	r2, r3
   19c38:	mov	r5, r0
   19c3c:	bl	1240c <memcpy@plt>
   19c40:	b	19c20 <flatcc_emitter_copy_buffer@@Base+0x98>
   19c44:	andeq	r0, r0, r0
   19c48:	movw	r3, #5920	; 0x1720
   19c4c:	movt	r3, #2
   19c50:	str	r4, [sp, #-8]!
   19c54:	movw	r1, #8120	; 0x1fb8
   19c58:	movt	r1, #2
   19c5c:	str	lr, [sp, #4]
   19c60:	movw	r0, #8208	; 0x2010
   19c64:	movt	r0, #2
   19c68:	mov	r2, #260	; 0x104
   19c6c:	bl	124b4 <__assert_fail@plt>
   19c70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19c74:	mov	ip, #0
   19c78:	cmp	r1, r2
   19c7c:	strd	r6, [sp, #8]
   19c80:	moveq	r0, r1
   19c84:	strd	r8, [sp, #16]
   19c88:	strd	sl, [sp, #24]
   19c8c:	str	lr, [sp, #32]
   19c90:	sub	sp, sp, #36	; 0x24
   19c94:	ldr	lr, [sp, #72]	; 0x48
   19c98:	strb	ip, [lr]
   19c9c:	beq	19d20 <flatcc_emitter_copy_buffer@@Base+0x198>
   19ca0:	mov	r7, r3
   19ca4:	ldrb	r3, [r1]
   19ca8:	mov	r8, r0
   19cac:	mov	r5, r2
   19cb0:	cmp	r3, #34	; 0x22
   19cb4:	beq	19e14 <flatcc_emitter_copy_buffer@@Base+0x28c>
   19cb8:	cmp	r3, #46	; 0x2e
   19cbc:	movne	r3, #1
   19cc0:	movne	r0, r1
   19cc4:	strne	r3, [r8, #12]
   19cc8:	beq	19dcc <flatcc_emitter_copy_buffer@@Base+0x244>
   19ccc:	mov	fp, #0
   19cd0:	add	sl, sp, #20
   19cd4:	add	r9, sp, #24
   19cd8:	mov	r4, r7
   19cdc:	mov	r6, r0
   19ce0:	b	19cfc <flatcc_emitter_copy_buffer@@Base+0x174>
   19ce4:	cmp	r6, r0
   19ce8:	mov	r6, r0
   19cec:	bne	19d3c <flatcc_emitter_copy_buffer@@Base+0x1b4>
   19cf0:	ldr	r3, [r4, #4]!
   19cf4:	cmp	r3, #0
   19cf8:	beq	19f74 <flatcc_emitter_copy_buffer@@Base+0x3ec>
   19cfc:	mov	r1, r0
   19d00:	add	r3, sp, #16
   19d04:	stm	sp, {r9, sl}
   19d08:	mov	r2, r5
   19d0c:	mov	r0, r8
   19d10:	ldr	ip, [r4]
   19d14:	blx	ip
   19d18:	cmp	r5, r0
   19d1c:	bne	19ce4 <flatcc_emitter_copy_buffer@@Base+0x15c>
   19d20:	add	sp, sp, #36	; 0x24
   19d24:	ldrd	r4, [sp]
   19d28:	ldrd	r6, [sp, #8]
   19d2c:	ldrd	r8, [sp, #16]
   19d30:	ldrd	sl, [sp, #24]
   19d34:	add	sp, sp, #32
   19d38:	pop	{pc}		; (ldr pc, [sp], #4)
   19d3c:	cmp	fp, #0
   19d40:	beq	19d50 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   19d44:	ldr	r3, [r8, #12]
   19d48:	cmp	r3, #0
   19d4c:	bne	19f8c <flatcc_emitter_copy_buffer@@Base+0x404>
   19d50:	ldr	r3, [sp, #16]
   19d54:	cmp	r3, #0
   19d58:	bne	19d9c <flatcc_emitter_copy_buffer@@Base+0x214>
   19d5c:	ldrd	r2, [sp, #24]
   19d60:	cmp	r3, #0
   19d64:	strd	r2, [sp, #8]
   19d68:	cmpeq	r2, #255	; 0xff
   19d6c:	bhi	19dfc <flatcc_emitter_copy_buffer@@Base+0x274>
   19d70:	ldr	r2, [sp, #8]
   19d74:	add	fp, fp, #1
   19d78:	ldr	r3, [sp, #72]	; 0x48
   19d7c:	ldr	r1, [sp, #20]
   19d80:	ldrb	r3, [r3]
   19d84:	cmp	r1, #0
   19d88:	add	r3, r3, r2
   19d8c:	ldr	r2, [sp, #72]	; 0x48
   19d90:	strb	r3, [r2]
   19d94:	bne	19cd8 <flatcc_emitter_copy_buffer@@Base+0x150>
   19d98:	b	19d20 <flatcc_emitter_copy_buffer@@Base+0x198>
   19d9c:	ldr	r3, [r8, #24]
   19da0:	cmp	r3, #0
   19da4:	bne	19df4 <flatcc_emitter_copy_buffer@@Base+0x26c>
   19da8:	ldr	r3, [r8, #4]
   19dac:	mov	r2, #8
   19db0:	sub	r3, r0, r3
   19db4:	str	r2, [r8, #24]
   19db8:	add	r3, r3, #1
   19dbc:	str	r3, [r8, #20]
   19dc0:	str	r0, [r8, #36]	; 0x24
   19dc4:	mov	r0, r5
   19dc8:	b	19d20 <flatcc_emitter_copy_buffer@@Base+0x198>
   19dcc:	ldr	r3, [r8, #24]
   19dd0:	cmp	r3, #0
   19dd4:	bne	19df4 <flatcc_emitter_copy_buffer@@Base+0x26c>
   19dd8:	ldr	r3, [r8, #4]
   19ddc:	mov	r2, #5
   19de0:	str	r1, [r8, #36]	; 0x24
   19de4:	str	r2, [r8, #24]
   19de8:	sub	r1, r1, r3
   19dec:	add	r3, r1, #1
   19df0:	str	r3, [r8, #20]
   19df4:	mov	r0, r5
   19df8:	b	19d20 <flatcc_emitter_copy_buffer@@Base+0x198>
   19dfc:	ldr	r3, [r8, #24]
   19e00:	cmp	r3, #0
   19e04:	bne	19df4 <flatcc_emitter_copy_buffer@@Base+0x26c>
   19e08:	mov	r2, #7
   19e0c:	ldr	r3, [r8, #4]
   19e10:	b	19db0 <flatcc_emitter_copy_buffer@@Base+0x228>
   19e14:	add	r0, r1, #1
   19e18:	str	ip, [r8, #12]
   19e1c:	sub	r3, r2, r0
   19e20:	cmp	r3, #1
   19e24:	ble	19e54 <flatcc_emitter_copy_buffer@@Base+0x2cc>
   19e28:	ldrb	r3, [r1, #1]
   19e2c:	cmp	r3, #32
   19e30:	bls	19e40 <flatcc_emitter_copy_buffer@@Base+0x2b8>
   19e34:	cmp	r5, r0
   19e38:	bne	19ccc <flatcc_emitter_copy_buffer@@Base+0x144>
   19e3c:	b	19d20 <flatcc_emitter_copy_buffer@@Base+0x198>
   19e40:	bne	19e54 <flatcc_emitter_copy_buffer@@Base+0x2cc>
   19e44:	ldrb	r3, [r1, #2]
   19e48:	cmp	r3, #32
   19e4c:	addhi	r0, r1, #2
   19e50:	bhi	19e34 <flatcc_emitter_copy_buffer@@Base+0x2ac>
   19e54:	cmp	r5, r0
   19e58:	beq	19d20 <flatcc_emitter_copy_buffer@@Base+0x198>
   19e5c:	ldrb	r2, [r0]
   19e60:	cmp	r2, #32
   19e64:	bne	19e8c <flatcc_emitter_copy_buffer@@Base+0x304>
   19e68:	add	r3, r0, #1
   19e6c:	b	19e7c <flatcc_emitter_copy_buffer@@Base+0x2f4>
   19e70:	ldrb	r2, [r3], #1
   19e74:	cmp	r2, #32
   19e78:	bne	19e8c <flatcc_emitter_copy_buffer@@Base+0x304>
   19e7c:	cmp	r5, r3
   19e80:	mov	r0, r3
   19e84:	bne	19e70 <flatcc_emitter_copy_buffer@@Base+0x2e8>
   19e88:	b	19d20 <flatcc_emitter_copy_buffer@@Base+0x198>
   19e8c:	cmp	r2, #32
   19e90:	bhi	19ccc <flatcc_emitter_copy_buffer@@Base+0x144>
   19e94:	sub	r2, r2, #9
   19e98:	cmp	r2, #23
   19e9c:	ldrls	pc, [pc, r2, lsl #2]
   19ea0:	b	19f5c <flatcc_emitter_copy_buffer@@Base+0x3d4>
   19ea4:	andeq	r9, r1, r4, asr pc
   19ea8:	andeq	r9, r1, ip, asr #30
   19eac:	andeq	r9, r1, ip, asr pc
   19eb0:	andeq	r9, r1, ip, asr pc
   19eb4:	andeq	r9, r1, r4, lsl #30
   19eb8:	andeq	r9, r1, ip, asr pc
   19ebc:	andeq	r9, r1, ip, asr pc
   19ec0:	andeq	r9, r1, ip, asr pc
   19ec4:	andeq	r9, r1, ip, asr pc
   19ec8:	andeq	r9, r1, ip, asr pc
   19ecc:	andeq	r9, r1, ip, asr pc
   19ed0:	andeq	r9, r1, ip, asr pc
   19ed4:	andeq	r9, r1, ip, asr pc
   19ed8:	andeq	r9, r1, ip, asr pc
   19edc:	andeq	r9, r1, ip, asr pc
   19ee0:	andeq	r9, r1, ip, asr pc
   19ee4:	andeq	r9, r1, ip, asr pc
   19ee8:	andeq	r9, r1, ip, asr pc
   19eec:	andeq	r9, r1, ip, asr pc
   19ef0:	andeq	r9, r1, ip, asr pc
   19ef4:	andeq	r9, r1, ip, asr pc
   19ef8:	andeq	r9, r1, ip, asr pc
   19efc:	andeq	r9, r1, ip, asr pc
   19f00:	andeq	r9, r1, r4, asr lr
   19f04:	sub	r3, r5, r0
   19f08:	add	r2, r0, #1
   19f0c:	cmp	r3, #1
   19f10:	ble	19f20 <flatcc_emitter_copy_buffer@@Base+0x398>
   19f14:	ldrb	r3, [r0, #1]
   19f18:	cmp	r3, #10
   19f1c:	addeq	r2, r0, #2
   19f20:	mov	r0, r2
   19f24:	ldr	r3, [r8, #16]
   19f28:	str	r0, [r8, #4]
   19f2c:	add	r3, r3, #1
   19f30:	str	r3, [r8, #16]
   19f34:	cmp	r5, r0
   19f38:	beq	19d20 <flatcc_emitter_copy_buffer@@Base+0x198>
   19f3c:	ldrb	r2, [r0]
   19f40:	cmp	r2, #32
   19f44:	bls	19e94 <flatcc_emitter_copy_buffer@@Base+0x30c>
   19f48:	b	19ccc <flatcc_emitter_copy_buffer@@Base+0x144>
   19f4c:	add	r0, r0, #1
   19f50:	b	19f24 <flatcc_emitter_copy_buffer@@Base+0x39c>
   19f54:	add	r0, r0, #1
   19f58:	b	19f34 <flatcc_emitter_copy_buffer@@Base+0x3ac>
   19f5c:	ldr	r3, [r8, #24]
   19f60:	cmp	r3, #0
   19f64:	bne	19df4 <flatcc_emitter_copy_buffer@@Base+0x26c>
   19f68:	mov	r2, #5
   19f6c:	ldr	r3, [r8, #4]
   19f70:	b	19db0 <flatcc_emitter_copy_buffer@@Base+0x228>
   19f74:	ldr	r3, [r8, #24]
   19f78:	cmp	r3, #0
   19f7c:	bne	19df4 <flatcc_emitter_copy_buffer@@Base+0x26c>
   19f80:	mov	r2, #23
   19f84:	ldr	r3, [r8, #4]
   19f88:	b	19db0 <flatcc_emitter_copy_buffer@@Base+0x228>
   19f8c:	ldr	r3, [r8, #24]
   19f90:	cmp	r3, #0
   19f94:	bne	19df4 <flatcc_emitter_copy_buffer@@Base+0x26c>
   19f98:	mov	r2, #14
   19f9c:	ldr	r3, [r8, #4]
   19fa0:	b	19db0 <flatcc_emitter_copy_buffer@@Base+0x228>

00019fa4 <grisu3_diy_fp_encode_double@@Base>:
   19fa4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19fa8:	sub	r2, r2, r3
   19fac:	strd	r6, [sp, #8]
   19fb0:	strd	r8, [sp, #16]
   19fb4:	strd	sl, [sp, #24]
   19fb8:	mov	sl, r0
   19fbc:	mov	fp, r1
   19fc0:	str	lr, [sp, #32]
   19fc4:	sub	sp, sp, #60	; 0x3c
   19fc8:	ldr	ip, [sp, #96]	; 0x60
   19fcc:	cmp	ip, #0
   19fd0:	movne	ip, #4
   19fd4:	orrs	r1, sl, fp
   19fd8:	beq	1a46c <grisu3_diy_fp_encode_double@@Base+0x4c8>
   19fdc:	mov	lr, #0
   19fe0:	mov	r4, lr
   19fe4:	mov	r0, lr
   19fe8:	movt	r4, #65472	; 0xffc0
   19fec:	and	r1, fp, r4
   19ff0:	orrs	r1, r0, r1
   19ff4:	movne	r1, lr
   19ff8:	bne	1a034 <grisu3_diy_fp_encode_double@@Base+0x90>
   19ffc:	mvn	r5, #9
   1a000:	str	r4, [sp, #16]
   1a004:	lsl	r0, fp, #10
   1a008:	mov	r6, lr
   1a00c:	mov	r1, r5
   1a010:	lsl	r4, sl, #10
   1a014:	sub	r5, r5, #10
   1a018:	orr	r0, r0, sl, lsr #22
   1a01c:	mov	sl, r4
   1a020:	mov	fp, r0
   1a024:	ldr	r0, [sp, #16]
   1a028:	and	r7, fp, r0
   1a02c:	orrs	r0, r6, r7
   1a030:	beq	1a004 <grisu3_diy_fp_encode_double@@Base+0x60>
   1a034:	cmp	sl, #0
   1a038:	sbcs	r0, fp, #0
   1a03c:	blt	1a060 <grisu3_diy_fp_encode_double@@Base+0xbc>
   1a040:	sub	r0, r1, #1
   1a044:	adds	sl, sl, sl
   1a048:	mov	r1, r0
   1a04c:	adc	fp, fp, fp
   1a050:	cmp	sl, #0
   1a054:	sbcs	lr, fp, #0
   1a058:	sub	r0, r0, #1
   1a05c:	bge	1a044 <grisu3_diy_fp_encode_double@@Base+0xa0>
   1a060:	rsb	r0, r1, #0
   1a064:	cmn	r2, #348	; 0x15c
   1a068:	lsl	r0, ip, r0
   1a06c:	str	r0, [sp, #20]
   1a070:	blt	1a4c4 <grisu3_diy_fp_encode_double@@Base+0x520>
   1a074:	cmp	r2, #348	; 0x15c
   1a078:	bge	1a48c <grisu3_diy_fp_encode_double@@Base+0x4e8>
   1a07c:	add	r0, r2, #348	; 0x15c
   1a080:	movw	ip, #5920	; 0x1720
   1a084:	movt	ip, #2
   1a088:	asr	r0, r0, #3
   1a08c:	add	r0, ip, r0, lsl #4
   1a090:	ldrsh	r5, [r0, #66]	; 0x42
   1a094:	ldrsh	lr, [r0, #64]	; 0x40
   1a098:	ldr	r7, [r0, #56]	; 0x38
   1a09c:	cmp	r2, r5
   1a0a0:	ldr	r0, [r0, #60]	; 0x3c
   1a0a4:	str	r0, [sp, #16]
   1a0a8:	blt	1a4a8 <grisu3_diy_fp_encode_double@@Base+0x504>
   1a0ac:	add	r0, r5, #7
   1a0b0:	cmp	r2, r0
   1a0b4:	bgt	1a470 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   1a0b8:	cmp	r2, r5
   1a0bc:	beq	1a174 <grisu3_diy_fp_encode_double@@Base+0x1d0>
   1a0c0:	sub	r5, r2, r5
   1a0c4:	sub	r5, r5, #1
   1a0c8:	cmp	r5, #6
   1a0cc:	bhi	1a4e0 <grisu3_diy_fp_encode_double@@Base+0x53c>
   1a0d0:	movw	r2, #12376	; 0x3058
   1a0d4:	movt	r2, #3
   1a0d8:	add	r4, r2, r5, lsl #4
   1a0dc:	ldr	r2, [r2, r5, lsl #4]
   1a0e0:	add	r3, r3, #1
   1a0e4:	add	r5, r3, r5
   1a0e8:	mov	ip, #0
   1a0ec:	ldr	r6, [r4, #4]
   1a0f0:	str	r6, [sp, #32]
   1a0f4:	str	r5, [sp, #36]	; 0x24
   1a0f8:	ldr	r6, [r4, #8]
   1a0fc:	umull	r4, r5, fp, r2
   1a100:	umull	r2, r3, sl, r2
   1a104:	ldr	r0, [sp, #32]
   1a108:	strd	r4, [sp, #40]	; 0x28
   1a10c:	mov	r2, r3
   1a110:	ldr	r3, [sp, #32]
   1a114:	add	r1, r1, r6
   1a118:	add	r1, r1, #64	; 0x40
   1a11c:	umull	r4, r5, sl, r3
   1a120:	ldr	r3, [sp, #40]	; 0x28
   1a124:	strd	r4, [sp]
   1a128:	ldr	r5, [sp, #36]	; 0x24
   1a12c:	adds	r4, r2, r3
   1a130:	ldrd	r2, [sp]
   1a134:	adc	r6, ip, ip
   1a138:	adds	r4, r4, #-2147483648	; 0x80000000
   1a13c:	adc	r6, r6, ip
   1a140:	adds	r4, r4, r2
   1a144:	ldr	r2, [sp, #44]	; 0x2c
   1a148:	adc	r6, r6, ip
   1a14c:	adds	r2, r2, r3
   1a150:	str	r2, [sp, #24]
   1a154:	adc	r2, ip, ip
   1a158:	str	r2, [sp, #28]
   1a15c:	ldrd	r2, [sp, #24]
   1a160:	umlal	r2, r3, r0, fp
   1a164:	adds	sl, r6, r2
   1a168:	adc	fp, ip, r3
   1a16c:	cmp	r5, #19
   1a170:	bgt	1a42c <grisu3_diy_fp_encode_double@@Base+0x488>
   1a174:	umull	r2, r3, fp, r7
   1a178:	add	lr, r1, lr
   1a17c:	mov	ip, #0
   1a180:	umull	r0, r1, sl, r7
   1a184:	add	r7, lr, #64	; 0x40
   1a188:	strd	r2, [sp]
   1a18c:	strd	r0, [sp, #24]
   1a190:	ldr	r3, [sp, #16]
   1a194:	ldr	r2, [sp]
   1a198:	ldr	r1, [sp, #28]
   1a19c:	umull	r4, r5, sl, r3
   1a1a0:	ldr	r3, [sp, #4]
   1a1a4:	adds	r2, r1, r2
   1a1a8:	mov	r1, r4
   1a1ac:	adc	r0, ip, ip
   1a1b0:	adds	r2, r2, #-2147483648	; 0x80000000
   1a1b4:	adc	r0, r0, ip
   1a1b8:	adds	r2, r2, r1
   1a1bc:	ldr	r2, [sp, #16]
   1a1c0:	adc	r0, r0, ip
   1a1c4:	adds	r1, r3, r5
   1a1c8:	ldr	r3, [sp, #20]
   1a1cc:	str	r1, [sp, #8]
   1a1d0:	adc	r1, ip, ip
   1a1d4:	str	r1, [sp, #12]
   1a1d8:	ldrd	r4, [sp, #8]
   1a1dc:	umlal	r4, r5, r2, fp
   1a1e0:	adds	r8, r0, r4
   1a1e4:	adc	r9, ip, r5
   1a1e8:	cmp	r3, ip
   1a1ec:	movne	r2, #9
   1a1f0:	moveq	r2, #8
   1a1f4:	orrs	r1, r8, r9
   1a1f8:	add	r2, r3, r2
   1a1fc:	beq	1a46c <grisu3_diy_fp_encode_double@@Base+0x4c8>
   1a200:	mov	r3, ip
   1a204:	mov	r4, ip
   1a208:	movt	r3, #65472	; 0xffc0
   1a20c:	and	r5, r9, r3
   1a210:	orrs	r1, r4, r5
   1a214:	bne	1a454 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   1a218:	add	r1, lr, #54	; 0x36
   1a21c:	mov	r0, r3
   1a220:	lsl	lr, r9, #10
   1a224:	mov	r4, ip
   1a228:	mov	r3, r1
   1a22c:	lsl	r6, r8, #10
   1a230:	sub	r1, r1, #10
   1a234:	orr	lr, lr, r8, lsr #22
   1a238:	mov	r8, r6
   1a23c:	and	r5, lr, r0
   1a240:	mov	r9, lr
   1a244:	orrs	lr, r4, r5
   1a248:	beq	1a220 <grisu3_diy_fp_encode_double@@Base+0x27c>
   1a24c:	cmp	r8, #0
   1a250:	sbcs	r1, r9, #0
   1a254:	blt	1a278 <grisu3_diy_fp_encode_double@@Base+0x2d4>
   1a258:	sub	r1, r3, #1
   1a25c:	adds	r8, r8, r8
   1a260:	mov	r3, r1
   1a264:	adc	r9, r9, r9
   1a268:	cmp	r8, #0
   1a26c:	sbcs	r0, r9, #0
   1a270:	sub	r1, r1, #1
   1a274:	bge	1a25c <grisu3_diy_fp_encode_double@@Base+0x2b8>
   1a278:	movw	r1, #64526	; 0xfc0e
   1a27c:	movt	r1, #65535	; 0xffff
   1a280:	add	r0, r3, #64	; 0x40
   1a284:	sub	r7, r7, r3
   1a288:	cmp	r0, r1
   1a28c:	lsl	r2, r2, r7
   1a290:	blt	1a3d0 <grisu3_diy_fp_encode_double@@Base+0x42c>
   1a294:	add	ip, r2, #4
   1a298:	mov	r1, #4
   1a29c:	cmp	ip, #0
   1a2a0:	mov	r0, #0
   1a2a4:	bgt	1a2f0 <grisu3_diy_fp_encode_double@@Base+0x34c>
   1a2a8:	adds	r8, r8, #1
   1a2ac:	mov	r4, #0
   1a2b0:	adc	r9, r9, #0
   1a2b4:	and	r5, r9, #2097152	; 0x200000
   1a2b8:	orrs	lr, r4, r5
   1a2bc:	beq	1a2d8 <grisu3_diy_fp_encode_double@@Base+0x334>
   1a2c0:	lsr	lr, r8, #1
   1a2c4:	add	r3, r3, #1
   1a2c8:	lsr	r4, r9, #1
   1a2cc:	orr	lr, lr, r9, lsl #31
   1a2d0:	mov	r9, r4
   1a2d4:	mov	r8, lr
   1a2d8:	movw	r5, #65535	; 0xffff
   1a2dc:	movt	r5, #31
   1a2e0:	mvn	r4, #0
   1a2e4:	cmp	r9, r5
   1a2e8:	cmpeq	r8, r4
   1a2ec:	bls	1a328 <grisu3_diy_fp_encode_double@@Base+0x384>
   1a2f0:	movw	r5, #65535	; 0xffff
   1a2f4:	movt	r5, #31
   1a2f8:	add	r6, r3, #1
   1a2fc:	mvn	r4, #0
   1a300:	lsr	lr, r8, #1
   1a304:	mov	r3, r6
   1a308:	add	r6, r6, #1
   1a30c:	lsr	r7, r9, #1
   1a310:	orr	lr, lr, r9, lsl #31
   1a314:	cmp	r7, r5
   1a318:	mov	r9, r7
   1a31c:	cmpeq	lr, r4
   1a320:	mov	r8, lr
   1a324:	bhi	1a300 <grisu3_diy_fp_encode_double@@Base+0x35c>
   1a328:	movw	lr, #64462	; 0xfbce
   1a32c:	movt	lr, #65535	; 0xffff
   1a330:	cmp	r3, lr
   1a334:	mov	r6, #0
   1a338:	movlt	r7, #0
   1a33c:	blt	1a398 <grisu3_diy_fp_encode_double@@Base+0x3f4>
   1a340:	mov	r4, r6
   1a344:	and	r5, r9, #1048576	; 0x100000
   1a348:	beq	1a380 <grisu3_diy_fp_encode_double@@Base+0x3dc>
   1a34c:	orrs	r7, r4, r5
   1a350:	beq	1a364 <grisu3_diy_fp_encode_double@@Base+0x3c0>
   1a354:	b	1a45c <grisu3_diy_fp_encode_double@@Base+0x4b8>
   1a358:	orrs	sl, r4, r5
   1a35c:	bne	1a43c <grisu3_diy_fp_encode_double@@Base+0x498>
   1a360:	mov	r3, r7
   1a364:	adds	r8, r8, r8
   1a368:	sub	r7, r3, #1
   1a36c:	adc	r9, r9, r9
   1a370:	cmp	r7, lr
   1a374:	mov	r4, r6
   1a378:	and	r5, r9, #1048576	; 0x100000
   1a37c:	bne	1a358 <grisu3_diy_fp_encode_double@@Base+0x3b4>
   1a380:	orrs	r3, r4, r5
   1a384:	movne	r4, #0
   1a388:	movne	r5, #1048576	; 0x100000
   1a38c:	ubfx	r3, r9, #0, #20
   1a390:	orr	r6, r8, r4
   1a394:	orr	r7, r3, r5
   1a398:	ldr	r3, [sp, #100]	; 0x64
   1a39c:	sub	r2, r1, r2
   1a3a0:	cmp	r0, ip
   1a3a4:	cmplt	r2, r0
   1a3a8:	movge	r0, #1
   1a3ac:	movlt	r0, #0
   1a3b0:	strd	r6, [r3]
   1a3b4:	add	sp, sp, #60	; 0x3c
   1a3b8:	ldrd	r4, [sp]
   1a3bc:	ldrd	r6, [sp, #8]
   1a3c0:	ldrd	r8, [sp, #16]
   1a3c4:	ldrd	sl, [sp, #24]
   1a3c8:	add	sp, sp, #32
   1a3cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3d0:	mvn	r1, #1072	; 0x430
   1a3d4:	cmp	r0, r1
   1a3d8:	blt	1a44c <grisu3_diy_fp_encode_double@@Base+0x4a8>
   1a3dc:	add	r0, r3, #1136	; 0x470
   1a3e0:	add	r0, r0, #2
   1a3e4:	rsb	lr, r0, #64	; 0x40
   1a3e8:	cmp	lr, #60	; 0x3c
   1a3ec:	rsbgt	r0, r0, #2
   1a3f0:	ble	1a4fc <grisu3_diy_fp_encode_double@@Base+0x558>
   1a3f4:	asr	r2, r2, r0
   1a3f8:	add	r3, r3, r0
   1a3fc:	mov	lr, #62	; 0x3e
   1a400:	lsr	r1, r9, r0
   1a404:	mov	r9, #0
   1a408:	add	r3, r3, #62	; 0x3e
   1a40c:	add	r2, r2, #9
   1a410:	mov	r0, r9
   1a414:	lsr	r8, r1, #30
   1a418:	mov	ip, r2
   1a41c:	mov	r1, r9
   1a420:	cmp	lr, ip
   1a424:	blt	1a2d8 <grisu3_diy_fp_encode_double@@Base+0x334>
   1a428:	b	1a2a8 <grisu3_diy_fp_encode_double@@Base+0x304>
   1a42c:	ldr	r3, [sp, #20]
   1a430:	add	r3, r3, #4
   1a434:	str	r3, [sp, #20]
   1a438:	b	1a174 <grisu3_diy_fp_encode_double@@Base+0x1d0>
   1a43c:	add	r3, r3, #1072	; 0x430
   1a440:	add	r3, r3, #2
   1a444:	lsl	r5, r3, #20
   1a448:	b	1a38c <grisu3_diy_fp_encode_double@@Base+0x3e8>
   1a44c:	mov	r0, #2
   1a450:	b	1a3f4 <grisu3_diy_fp_encode_double@@Base+0x450>
   1a454:	mov	r3, r7
   1a458:	b	1a24c <grisu3_diy_fp_encode_double@@Base+0x2a8>
   1a45c:	add	r3, r3, #1072	; 0x430
   1a460:	add	r3, r3, #3
   1a464:	lsl	r5, r3, #20
   1a468:	b	1a38c <grisu3_diy_fp_encode_double@@Base+0x3e8>
   1a46c:	bl	19c48 <flatcc_emitter_copy_buffer@@Base+0xc0>
   1a470:	movw	r1, #8220	; 0x201c
   1a474:	movt	r1, #2
   1a478:	movw	r0, #8400	; 0x20d0
   1a47c:	movt	r0, #2
   1a480:	add	r3, ip, #24
   1a484:	mov	r2, #89	; 0x59
   1a488:	bl	124b4 <__assert_fail@plt>
   1a48c:	movw	r1, #8220	; 0x201c
   1a490:	movt	r1, #2
   1a494:	ldr	r3, [pc, #164]	; 1a540 <grisu3_diy_fp_encode_double@@Base+0x59c>
   1a498:	movw	r0, #8340	; 0x2094
   1a49c:	movt	r0, #2
   1a4a0:	mov	r2, #81	; 0x51
   1a4a4:	bl	124b4 <__assert_fail@plt>
   1a4a8:	movw	r1, #8220	; 0x201c
   1a4ac:	movt	r1, #2
   1a4b0:	movw	r0, #8384	; 0x20c0
   1a4b4:	movt	r0, #2
   1a4b8:	add	r3, ip, #24
   1a4bc:	mov	r2, #88	; 0x58
   1a4c0:	bl	124b4 <__assert_fail@plt>
   1a4c4:	movw	r1, #8220	; 0x201c
   1a4c8:	movt	r1, #2
   1a4cc:	ldr	r3, [pc, #108]	; 1a540 <grisu3_diy_fp_encode_double@@Base+0x59c>
   1a4d0:	movw	r0, #8308	; 0x2074
   1a4d4:	movt	r0, #2
   1a4d8:	mov	r2, #80	; 0x50
   1a4dc:	bl	124b4 <__assert_fail@plt>
   1a4e0:	movw	r1, #8220	; 0x201c
   1a4e4:	movt	r1, #2
   1a4e8:	ldr	r3, [pc, #84]	; 1a544 <grisu3_diy_fp_encode_double@@Base+0x5a0>
   1a4ec:	movw	r0, #8428	; 0x20ec
   1a4f0:	movt	r0, #2
   1a4f4:	mov	r2, #185	; 0xb9
   1a4f8:	bl	124b4 <__assert_fail@plt>
   1a4fc:	lsr	ip, r8, lr
   1a500:	rsb	r1, lr, #32
   1a504:	rsb	r0, r0, #63	; 0x3f
   1a508:	sub	r5, lr, #32
   1a50c:	mov	r4, #1
   1a510:	orr	ip, ip, r9, lsl r1
   1a514:	mov	r1, #8
   1a518:	add	r3, r3, lr
   1a51c:	and	r4, r8, r4, lsl r0
   1a520:	orr	ip, ip, r9, lsr r5
   1a524:	lsl	r1, r1, r0
   1a528:	lsr	r5, r9, lr
   1a52c:	mov	r8, ip
   1a530:	lsl	r0, r4, #3
   1a534:	add	ip, r2, r1
   1a538:	mov	r9, r5
   1a53c:	b	1a420 <grisu3_diy_fp_encode_double@@Base+0x47c>
   1a540:	andeq	r1, r2, r8, lsr r7
   1a544:	andeq	r1, r2, r8, asr #25
   1a548:	cmp	r1, #1000	; 0x3e8
   1a54c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a550:	mov	r4, #0
   1a554:	addgt	ip, r0, #1000	; 0x3e8
   1a558:	addle	r1, r1, #1
   1a55c:	strd	r6, [sp, #8]
   1a560:	addle	ip, r0, r1
   1a564:	addgt	ip, ip, #1
   1a568:	strd	r8, [sp, #16]
   1a56c:	mov	r5, #0
   1a570:	strd	sl, [sp, #24]
   1a574:	cmp	ip, r0
   1a578:	str	lr, [sp, #32]
   1a57c:	sub	sp, sp, #52	; 0x34
   1a580:	moveq	r6, ip
   1a584:	strd	r4, [r2]
   1a588:	str	r2, [sp, #16]
   1a58c:	beq	1a724 <grisu3_diy_fp_encode_double@@Base+0x780>
   1a590:	ldrb	r4, [r0]
   1a594:	cmp	r4, #45	; 0x2d
   1a598:	beq	1a81c <grisu3_diy_fp_encode_double@@Base+0x878>
   1a59c:	cmp	r4, #48	; 0x30
   1a5a0:	beq	1a744 <grisu3_diy_fp_encode_double@@Base+0x7a0>
   1a5a4:	sub	r3, r4, #49	; 0x31
   1a5a8:	cmp	r3, #8
   1a5ac:	bhi	1a8cc <grisu3_diy_fp_encode_double@@Base+0x928>
   1a5b0:	mov	r2, #0
   1a5b4:	mov	r3, r0
   1a5b8:	str	r2, [sp, #20]
   1a5bc:	add	r7, r3, #1
   1a5c0:	sub	r4, r4, #48	; 0x30
   1a5c4:	cmp	ip, r7
   1a5c8:	asr	r5, r4, #31
   1a5cc:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1a5d0:	ldrb	r1, [r3, #1]
   1a5d4:	sub	r3, r1, #48	; 0x30
   1a5d8:	cmp	r3, #9
   1a5dc:	movhi	sl, #0
   1a5e0:	movhi	lr, sl
   1a5e4:	bhi	1af18 <grisu3_diy_fp_encode_double@@Base+0xf74>
   1a5e8:	add	fp, pc, #992	; 0x3e0
   1a5ec:	ldrd	sl, [fp]
   1a5f0:	add	lr, r7, #1
   1a5f4:	b	1a604 <grisu3_diy_fp_encode_double@@Base+0x660>
   1a5f8:	cmp	r5, fp
   1a5fc:	cmpeq	r4, sl
   1a600:	bhi	1a79c <grisu3_diy_fp_encode_double@@Base+0x7f8>
   1a604:	lsl	r2, r5, #2
   1a608:	mov	r6, lr
   1a60c:	lsl	r3, r4, #2
   1a610:	orr	r2, r2, r4, lsr #30
   1a614:	adds	r3, r3, r4
   1a618:	adc	r2, r2, r5
   1a61c:	adds	r8, r3, r3
   1a620:	adc	r9, r2, r2
   1a624:	adds	r2, r8, r1
   1a628:	adc	r3, r9, #0
   1a62c:	subs	r4, r2, #48	; 0x30
   1a630:	sbc	r5, r3, #0
   1a634:	cmp	ip, lr
   1a638:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1a63c:	ldrb	r1, [lr]
   1a640:	add	lr, lr, #1
   1a644:	sub	r3, r1, #48	; 0x30
   1a648:	cmp	r3, #9
   1a64c:	bls	1a5f8 <grisu3_diy_fp_encode_double@@Base+0x654>
   1a650:	mov	lr, #0
   1a654:	sub	sl, r6, r7
   1a658:	mov	r7, lr
   1a65c:	sub	r3, r1, #49	; 0x31
   1a660:	cmp	r3, #8
   1a664:	bls	1a85c <grisu3_diy_fp_encode_double@@Base+0x8b8>
   1a668:	cmp	r1, #46	; 0x2e
   1a66c:	beq	1a8d4 <grisu3_diy_fp_encode_double@@Base+0x930>
   1a670:	orr	r1, r1, #32
   1a674:	add	r7, r7, sl
   1a678:	cmp	r1, #101	; 0x65
   1a67c:	beq	1aa88 <grisu3_diy_fp_encode_double@@Base+0xae4>
   1a680:	orrs	r3, r4, r5
   1a684:	mov	r9, r0
   1a688:	ldr	r8, [sp, #16]
   1a68c:	moveq	r2, #1
   1a690:	movne	r2, #0
   1a694:	cmn	r7, #324	; 0x144
   1a698:	movge	r3, #0
   1a69c:	movlt	r3, #1
   1a6a0:	orrs	r3, r2, r3
   1a6a4:	bne	1a800 <grisu3_diy_fp_encode_double@@Base+0x85c>
   1a6a8:	movw	r3, #310	; 0x136
   1a6ac:	cmp	r7, r3
   1a6b0:	bgt	1a8ac <grisu3_diy_fp_encode_double@@Base+0x908>
   1a6b4:	movw	r3, #65535	; 0xffff
   1a6b8:	movt	r3, #31
   1a6bc:	cmp	r5, r3
   1a6c0:	mvn	r2, #0
   1a6c4:	cmpeq	r4, r2
   1a6c8:	movls	r3, #1
   1a6cc:	movhi	r3, #0
   1a6d0:	cmp	r7, #22
   1a6d4:	movhi	r3, #0
   1a6d8:	andls	r3, r3, #1
   1a6dc:	cmp	r3, #0
   1a6e0:	bne	1aba4 <grisu3_diy_fp_encode_double@@Base+0xc00>
   1a6e4:	mov	r3, sl
   1a6e8:	mov	r2, r7
   1a6ec:	str	lr, [sp]
   1a6f0:	mov	r0, r4
   1a6f4:	mov	r1, r5
   1a6f8:	str	r8, [sp, #4]
   1a6fc:	bl	19fa4 <grisu3_diy_fp_encode_double@@Base>
   1a700:	cmp	r0, #0
   1a704:	bne	1a800 <grisu3_diy_fp_encode_double@@Base+0x85c>
   1a708:	mov	r0, r9
   1a70c:	add	r1, sp, #44	; 0x2c
   1a710:	bl	12490 <strtod@plt>
   1a714:	ldr	r3, [sp, #44]	; 0x2c
   1a718:	vstr	d0, [r8]
   1a71c:	cmp	r6, r3
   1a720:	movcs	r6, r3
   1a724:	mov	r0, r6
   1a728:	add	sp, sp, #52	; 0x34
   1a72c:	ldrd	r4, [sp]
   1a730:	ldrd	r6, [sp, #8]
   1a734:	ldrd	r8, [sp, #16]
   1a738:	ldrd	sl, [sp, #24]
   1a73c:	add	sp, sp, #32
   1a740:	pop	{pc}		; (ldr pc, [sp], #4)
   1a744:	mov	r2, #0
   1a748:	mov	r3, r0
   1a74c:	str	r2, [sp, #20]
   1a750:	add	r7, r3, #1
   1a754:	cmp	ip, r7
   1a758:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1a75c:	ldrb	r1, [r3, #1]
   1a760:	orr	r2, r1, #32
   1a764:	cmp	r2, #120	; 0x78
   1a768:	beq	1a8cc <grisu3_diy_fp_encode_double@@Base+0x928>
   1a76c:	cmp	r1, #48	; 0x30
   1a770:	addeq	r3, r3, #2
   1a774:	beq	1a788 <grisu3_diy_fp_encode_double@@Base+0x7e4>
   1a778:	b	1ab2c <grisu3_diy_fp_encode_double@@Base+0xb88>
   1a77c:	ldrb	r1, [r3], #1
   1a780:	cmp	r1, #48	; 0x30
   1a784:	bne	1ab2c <grisu3_diy_fp_encode_double@@Base+0xb88>
   1a788:	cmp	ip, r3
   1a78c:	mov	r7, r3
   1a790:	bne	1a77c <grisu3_diy_fp_encode_double@@Base+0x7d8>
   1a794:	mov	r6, #0
   1a798:	b	1a724 <grisu3_diy_fp_encode_double@@Base+0x780>
   1a79c:	cmp	r1, #52	; 0x34
   1a7a0:	sub	sl, r6, r7
   1a7a4:	movls	r3, #0
   1a7a8:	movhi	r3, #1
   1a7ac:	adds	r4, r4, r3
   1a7b0:	adc	r5, r5, #0
   1a7b4:	cmp	r1, #48	; 0x30
   1a7b8:	movne	r7, r6
   1a7bc:	movne	lr, #1
   1a7c0:	bne	1af18 <grisu3_diy_fp_encode_double@@Base+0xf74>
   1a7c4:	add	r3, r6, #1
   1a7c8:	mov	r7, #0
   1a7cc:	b	1a7e0 <grisu3_diy_fp_encode_double@@Base+0x83c>
   1a7d0:	ldrb	r1, [r3]
   1a7d4:	add	r3, r3, #1
   1a7d8:	cmp	r1, #48	; 0x30
   1a7dc:	bne	1a84c <grisu3_diy_fp_encode_double@@Base+0x8a8>
   1a7e0:	cmp	r3, ip
   1a7e4:	mov	r6, r3
   1a7e8:	add	r7, r7, #1
   1a7ec:	bne	1a7d0 <grisu3_diy_fp_encode_double@@Base+0x82c>
   1a7f0:	b	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1a7f4:	vldr	d6, [pc, #476]	; 1a9d8 <grisu3_diy_fp_encode_double@@Base+0xa34>
   1a7f8:	vmul.f64	d7, d7, d6
   1a7fc:	vstr	d7, [r8]
   1a800:	ldr	r3, [sp, #20]
   1a804:	cmp	r3, #0
   1a808:	beq	1a724 <grisu3_diy_fp_encode_double@@Base+0x780>
   1a80c:	vldr	d7, [r8]
   1a810:	vneg.f64	d7, d7
   1a814:	vstr	d7, [r8]
   1a818:	b	1a724 <grisu3_diy_fp_encode_double@@Base+0x780>
   1a81c:	add	r3, r0, #1
   1a820:	cmp	ip, r3
   1a824:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1a828:	ldrb	r4, [r0, #1]
   1a82c:	cmp	r4, #48	; 0x30
   1a830:	beq	1a8c0 <grisu3_diy_fp_encode_double@@Base+0x91c>
   1a834:	sub	r2, r4, #49	; 0x31
   1a838:	cmp	r2, #8
   1a83c:	bhi	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1a840:	mov	r2, #1
   1a844:	str	r2, [sp, #20]
   1a848:	b	1a5bc <grisu3_diy_fp_encode_double@@Base+0x618>
   1a84c:	sub	r3, r1, #49	; 0x31
   1a850:	mov	lr, #1
   1a854:	cmp	r3, #8
   1a858:	bhi	1a668 <grisu3_diy_fp_encode_double@@Base+0x6c4>
   1a85c:	add	r3, r6, #1
   1a860:	add	lr, r7, #1
   1a864:	cmp	ip, r3
   1a868:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1a86c:	ldrb	r1, [r6, #1]
   1a870:	sub	r2, r1, #48	; 0x30
   1a874:	cmp	r2, #9
   1a878:	bhi	1aefc <grisu3_diy_fp_encode_double@@Base+0xf58>
   1a87c:	sub	r8, r7, r6
   1a880:	add	r3, r6, #2
   1a884:	cmp	ip, r3
   1a888:	add	r7, r8, r3
   1a88c:	mov	r6, r3
   1a890:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1a894:	ldrb	r1, [r3], #1
   1a898:	sub	r2, r1, #48	; 0x30
   1a89c:	cmp	r2, #9
   1a8a0:	bls	1a884 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   1a8a4:	mov	lr, #1
   1a8a8:	b	1a668 <grisu3_diy_fp_encode_double@@Base+0x6c4>
   1a8ac:	mov	r2, #0
   1a8b0:	mov	r3, #0
   1a8b4:	movt	r3, #32752	; 0x7ff0
   1a8b8:	strd	r2, [r8]
   1a8bc:	b	1a800 <grisu3_diy_fp_encode_double@@Base+0x85c>
   1a8c0:	mov	r2, #1
   1a8c4:	str	r2, [sp, #20]
   1a8c8:	b	1a750 <grisu3_diy_fp_encode_double@@Base+0x7ac>
   1a8cc:	mov	r6, r0
   1a8d0:	b	1a724 <grisu3_diy_fp_encode_double@@Base+0x780>
   1a8d4:	ldrb	r9, [r6, #1]
   1a8d8:	add	fp, r6, #1
   1a8dc:	sub	r3, r9, #48	; 0x30
   1a8e0:	cmp	r3, #9
   1a8e4:	bhi	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1a8e8:	cmp	ip, fp
   1a8ec:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1a8f0:	add	r3, pc, #216	; 0xd8
   1a8f4:	ldrd	r2, [r3]
   1a8f8:	cmp	r5, r3
   1a8fc:	cmpeq	r4, r2
   1a900:	bhi	1af08 <grisu3_diy_fp_encode_double@@Base+0xf64>
   1a904:	add	r7, r6, r7
   1a908:	add	r6, r6, #2
   1a90c:	strd	r2, [sp, #8]
   1a910:	add	r1, r7, #1
   1a914:	str	fp, [sp, #24]
   1a918:	mov	fp, r6
   1a91c:	str	r0, [sp, #28]
   1a920:	b	1a934 <grisu3_diy_fp_encode_double@@Base+0x990>
   1a924:	ldrd	r2, [sp, #8]
   1a928:	cmp	r5, r3
   1a92c:	cmpeq	r4, r2
   1a930:	bhi	1aebc <grisu3_diy_fp_encode_double@@Base+0xf18>
   1a934:	lsl	r2, r5, #2
   1a938:	mov	r8, fp
   1a93c:	sub	r0, r1, fp
   1a940:	lsl	r3, r4, #2
   1a944:	orr	r2, r2, r4, lsr #30
   1a948:	adds	r3, r3, r4
   1a94c:	adc	r2, r2, r5
   1a950:	adds	r6, r3, r3
   1a954:	adc	r7, r2, r2
   1a958:	adds	r2, r6, r9
   1a95c:	adc	r3, r7, #0
   1a960:	subs	r4, r2, #48	; 0x30
   1a964:	sbc	r5, r3, #0
   1a968:	cmp	ip, fp
   1a96c:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1a970:	ldrb	r9, [fp]
   1a974:	add	fp, fp, #1
   1a978:	sub	r3, r9, #48	; 0x30
   1a97c:	cmp	r3, #9
   1a980:	bls	1a924 <grisu3_diy_fp_encode_double@@Base+0x980>
   1a984:	ldr	fp, [sp, #24]
   1a988:	mov	r7, r0
   1a98c:	ldr	r0, [sp, #28]
   1a990:	sub	fp, r8, fp
   1a994:	add	sl, sl, fp
   1a998:	ldrb	r1, [r8]
   1a99c:	cmp	r1, #48	; 0x30
   1a9a0:	bne	1ab38 <grisu3_diy_fp_encode_double@@Base+0xb94>
   1a9a4:	sub	r3, r7, r8
   1a9a8:	add	r8, r8, #1
   1a9ac:	b	1a9bc <grisu3_diy_fp_encode_double@@Base+0xa18>
   1a9b0:	ldrb	r1, [r8], #1
   1a9b4:	cmp	r1, #48	; 0x30
   1a9b8:	bne	1ab3c <grisu3_diy_fp_encode_double@@Base+0xb98>
   1a9bc:	cmp	ip, r8
   1a9c0:	add	r7, r3, r8
   1a9c4:	mov	r6, r8
   1a9c8:	bne	1a9b0 <grisu3_diy_fp_encode_double@@Base+0xa0c>
   1a9cc:	b	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1a9d0:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   1a9d4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1a9d8:	usatle	lr, #2, r0, asr #30
   1a9dc:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   1a9e0:	ldmvc	r5!, {r6, sl, fp, pc}
   1a9e4:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1a9e8:	addsvs	r3, r1, r0, lsl #26
   1a9ec:	mvnmi	r5, #228, 16	; 0xe40000
   1a9f0:	strbvs	ip, [lr, -r0, lsl #16]
   1a9f4:			; <UNDEFINED> instruction: 0x43abc16d
   1a9f8:	ldrbhi	sl, [r8]
   1a9fc:	cmnmi	r6, #1459617792	; 0x57000000
   1aa00:	strbcc	r8, [r0, r0]!
   1aa04:	movtmi	ip, #4985	; 0x1379
   1aa08:	andeq	r0, r0, r0
   1aa0c:	sbcmi	r8, r3, r0, lsl #16
   1aa10:	andeq	r0, r0, r0
   1aa14:	addmi	r4, pc, r0
   1aa18:	andeq	r0, r0, r0
   1aa1c:	smlawbmi	lr, r0, r4, r8
   1aa20:	andeq	r0, r0, r0
   1aa24:	orrsmi	sp, r7, r4, lsl #15
   1aa28:	andcs	r0, r0, r0
   1aa2c:	andmi	sl, r2, #95	; 0x5f
   1aa30:	andge	r0, r0, #0
   1aa34:	rsbmi	r1, sp, #148, 20	; 0x94000
   1aa38:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1aa3c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   1aa40:	ldrtcs	r0, [r4], -r0
   1aa44:	movwmi	r6, #52213	; 0xcbf5
   1aa48:	strb	r0, [r0, #-0]
   1aa4c:	adcmi	r3, r2, #156	; 0x9c
   1aa50:	stmda	r0, {}	; <UNPREDICTABLE>
   1aa54:	eorsmi	r4, r7, #7733248	; 0x760000
   1aa58:	andeq	r0, r0, r0
   1aa5c:	bicmi	ip, sp, r5, ror #26
   1aa60:	andeq	r0, r0, r0
   1aa64:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   1aa68:	andeq	r0, r0, r0
   1aa6c:	rscsmi	r6, r8, r0, lsl #20
   1aa70:	andeq	r0, r0, r0
   1aa74:	subsmi	r0, r9, r0
   1aa78:			; <UNDEFINED> instruction: 0x064dd592
   1aa7c:	strmi	pc, [r0], #207	; 0xcf
   1aa80:	andeq	r0, r0, r0
   1aa84:	eormi	r0, r4, r0
   1aa88:	sub	r3, ip, r6
   1aa8c:	cmp	r3, #1
   1aa90:	ble	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1aa94:	ldrb	r8, [r6, #1]
   1aa98:	cmp	r8, #43	; 0x2b
   1aa9c:	beq	1ae80 <grisu3_diy_fp_encode_double@@Base+0xedc>
   1aaa0:	cmp	r8, #45	; 0x2d
   1aaa4:	beq	1aea4 <grisu3_diy_fp_encode_double@@Base+0xf00>
   1aaa8:	add	r2, r6, #1
   1aaac:	mov	fp, #0
   1aab0:	sub	r8, r8, #48	; 0x30
   1aab4:	uxtb	r3, r8
   1aab8:	cmp	r3, #9
   1aabc:	bhi	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1aac0:	add	r6, r2, #1
   1aac4:	mov	r3, r8
   1aac8:	cmp	ip, r6
   1aacc:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1aad0:	ldrb	r1, [r2, #1]
   1aad4:	sub	r9, r1, #48	; 0x30
   1aad8:	cmp	r9, #9
   1aadc:	bhi	1ab90 <grisu3_diy_fp_encode_double@@Base+0xbec>
   1aae0:	add	r2, r2, #2
   1aae4:	add	r8, r3, r3, lsl #2
   1aae8:	cmp	r3, #32768	; 0x8000
   1aaec:	mov	r6, r2
   1aaf0:	addlt	r3, r1, r8, lsl #1
   1aaf4:	sublt	r3, r3, #48	; 0x30
   1aaf8:	cmp	ip, r2
   1aafc:	beq	1ae98 <grisu3_diy_fp_encode_double@@Base+0xef4>
   1ab00:	ldrb	r1, [r2]
   1ab04:	add	r2, r2, #1
   1ab08:	sub	r8, r1, #48	; 0x30
   1ab0c:	cmp	r8, #9
   1ab10:	bls	1aae4 <grisu3_diy_fp_encode_double@@Base+0xb40>
   1ab14:	cmp	fp, #0
   1ab18:	beq	1ab9c <grisu3_diy_fp_encode_double@@Base+0xbf8>
   1ab1c:	cmp	ip, r6
   1ab20:	sub	r7, r7, r3
   1ab24:	bne	1a680 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   1ab28:	b	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1ab2c:	mov	r4, #0
   1ab30:	mov	r5, #0
   1ab34:	b	1a5d4 <grisu3_diy_fp_encode_double@@Base+0x630>
   1ab38:	mov	r6, r8
   1ab3c:	sub	r3, r1, #49	; 0x31
   1ab40:	cmp	r3, #8
   1ab44:	bhi	1a670 <grisu3_diy_fp_encode_double@@Base+0x6cc>
   1ab48:	add	r3, r6, #1
   1ab4c:	cmp	ip, r3
   1ab50:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1ab54:	ldrb	r1, [r6, #1]
   1ab58:	sub	r2, r1, #48	; 0x30
   1ab5c:	cmp	r2, #9
   1ab60:	bhi	1af10 <grisu3_diy_fp_encode_double@@Base+0xf6c>
   1ab64:	add	r3, r6, #2
   1ab68:	cmp	ip, r3
   1ab6c:	mov	r6, r3
   1ab70:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1ab74:	ldrb	r1, [r3]
   1ab78:	add	r3, r3, #1
   1ab7c:	sub	r2, r1, #48	; 0x30
   1ab80:	cmp	r2, #9
   1ab84:	bls	1ab68 <grisu3_diy_fp_encode_double@@Base+0xbc4>
   1ab88:	mov	lr, #1
   1ab8c:	b	1a670 <grisu3_diy_fp_encode_double@@Base+0x6cc>
   1ab90:	cmp	fp, #0
   1ab94:	subne	r7, r7, r8
   1ab98:	bne	1a680 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   1ab9c:	add	r7, r7, r3
   1aba0:	b	1a680 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   1aba4:	mov	r0, r4
   1aba8:	mov	r1, r5
   1abac:	bl	207ec <flatcc_json_parser_struct_as_root@@Base+0x42c>
   1abb0:	sub	r3, r7, sl
   1abb4:	vmov	d7, r0, r1
   1abb8:	add	r3, r3, #22
   1abbc:	cmp	r3, #44	; 0x2c
   1abc0:	ldrls	pc, [pc, r3, lsl #2]
   1abc4:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1abc8:	andeq	sl, r1, ip, asr lr
   1abcc:	andeq	sl, r1, r4, ror lr
   1abd0:	andeq	sl, r1, r8, ror #28
   1abd4:	andeq	sl, r1, r0, asr lr
   1abd8:	andeq	sl, r1, r4, asr #28
   1abdc:	andeq	sl, r1, r8, lsr lr
   1abe0:	andeq	sl, r1, ip, lsr #28
   1abe4:	andeq	sl, r1, r0, lsr #28
   1abe8:	andeq	sl, r1, r4, lsl lr
   1abec:	andeq	sl, r1, r8, lsl #28
   1abf0:	strdeq	sl, [r1], -ip
   1abf4:	strdeq	sl, [r1], -r0
   1abf8:	andeq	sl, r1, r4, ror #27
   1abfc:	ldrdeq	sl, [r1], -r8
   1ac00:	andeq	sl, r1, ip, asr #27
   1ac04:	andeq	sl, r1, r0, asr #27
   1ac08:			; <UNDEFINED> instruction: 0x0001adb4
   1ac0c:	andeq	sl, r1, r8, lsr #27
   1ac10:	muleq	r1, ip, sp
   1ac14:	muleq	r1, r0, sp
   1ac18:	andeq	sl, r1, r4, lsl #27
   1ac1c:	andeq	sl, r1, r8, ror sp
   1ac20:	strdeq	sl, [r1], -ip
   1ac24:	andeq	sl, r1, r0, ror #26
   1ac28:	andeq	sl, r1, r4, asr sp
   1ac2c:	andeq	sl, r1, r8, asr #26
   1ac30:	andeq	sl, r1, ip, lsr sp
   1ac34:	andeq	sl, r1, r0, lsr sp
   1ac38:	andeq	sl, r1, r4, lsr #26
   1ac3c:	andeq	sl, r1, r8, lsl sp
   1ac40:	andeq	sl, r1, ip, lsl #26
   1ac44:	andeq	sl, r1, r0, lsl #26
   1ac48:	strdeq	sl, [r1], -r4
   1ac4c:	andeq	sl, r1, r8, ror #25
   1ac50:	ldrdeq	sl, [r1], -ip
   1ac54:	ldrdeq	sl, [r1], -r0
   1ac58:	andeq	sl, r1, r4, asr #25
   1ac5c:			; <UNDEFINED> instruction: 0x0001acb8
   1ac60:	andeq	sl, r1, ip, lsr #25
   1ac64:	andeq	sl, r1, r0, lsr #25
   1ac68:	muleq	r1, r4, ip
   1ac6c:	andeq	sl, r1, r8, lsl #25
   1ac70:	andeq	sl, r1, ip, ror ip
   1ac74:	strdeq	sl, [r1], -r4
   1ac78:	andeq	sl, r1, ip, ror #26
   1ac7c:	vldr	d6, [pc, #-676]	; 1a9e0 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   1ac80:	vmul.f64	d7, d7, d6
   1ac84:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ac88:	vldr	d6, [pc, #-680]	; 1a9e8 <grisu3_diy_fp_encode_double@@Base+0xa44>
   1ac8c:	vmul.f64	d7, d7, d6
   1ac90:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ac94:	vldr	d6, [pc, #-684]	; 1a9f0 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1ac98:	vmul.f64	d7, d7, d6
   1ac9c:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1aca0:	vldr	d6, [pc, #-688]	; 1a9f8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1aca4:	vmul.f64	d7, d7, d6
   1aca8:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1acac:	vldr	d6, [pc, #-692]	; 1aa00 <grisu3_diy_fp_encode_double@@Base+0xa5c>
   1acb0:	vmul.f64	d7, d7, d6
   1acb4:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1acb8:	vldr	d6, [pc, #-640]	; 1aa40 <grisu3_diy_fp_encode_double@@Base+0xa9c>
   1acbc:	vmul.f64	d7, d7, d6
   1acc0:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1acc4:	vldr	d6, [pc, #-660]	; 1aa38 <grisu3_diy_fp_encode_double@@Base+0xa94>
   1acc8:	vmul.f64	d7, d7, d6
   1accc:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1acd0:	vldr	d6, [pc, #-656]	; 1aa48 <grisu3_diy_fp_encode_double@@Base+0xaa4>
   1acd4:	vmul.f64	d7, d7, d6
   1acd8:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1acdc:	vldr	d6, [pc, #-692]	; 1aa30 <grisu3_diy_fp_encode_double@@Base+0xa8c>
   1ace0:	vmul.f64	d7, d7, d6
   1ace4:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ace8:	vldr	d6, [pc, #-672]	; 1aa50 <grisu3_diy_fp_encode_double@@Base+0xaac>
   1acec:	vmul.f64	d7, d7, d6
   1acf0:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1acf4:	vldr	d6, [pc, #-724]	; 1aa28 <grisu3_diy_fp_encode_double@@Base+0xa84>
   1acf8:	vmul.f64	d7, d7, d6
   1acfc:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad00:	vldr	d6, [pc, #-688]	; 1aa58 <grisu3_diy_fp_encode_double@@Base+0xab4>
   1ad04:	vmul.f64	d7, d7, d6
   1ad08:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad0c:	vldr	d6, [pc, #-756]	; 1aa20 <grisu3_diy_fp_encode_double@@Base+0xa7c>
   1ad10:	vmul.f64	d7, d7, d6
   1ad14:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad18:	vldr	d6, [pc, #-704]	; 1aa60 <grisu3_diy_fp_encode_double@@Base+0xabc>
   1ad1c:	vmul.f64	d7, d7, d6
   1ad20:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad24:	vldr	d6, [pc, #-788]	; 1aa18 <grisu3_diy_fp_encode_double@@Base+0xa74>
   1ad28:	vmul.f64	d7, d7, d6
   1ad2c:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad30:	vldr	d6, [pc, #-720]	; 1aa68 <grisu3_diy_fp_encode_double@@Base+0xac4>
   1ad34:	vmul.f64	d7, d7, d6
   1ad38:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad3c:	vldr	d6, [pc, #-828]	; 1aa08 <grisu3_diy_fp_encode_double@@Base+0xa64>
   1ad40:	vmul.f64	d7, d7, d6
   1ad44:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad48:	vldr	d6, [pc, #-832]	; 1aa10 <grisu3_diy_fp_encode_double@@Base+0xa6c>
   1ad4c:	vmul.f64	d7, d7, d6
   1ad50:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad54:	vldr	d6, [pc, #-748]	; 1aa70 <grisu3_diy_fp_encode_double@@Base+0xacc>
   1ad58:	vmul.f64	d7, d7, d6
   1ad5c:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad60:	vldr	d6, [pc, #-744]	; 1aa80 <grisu3_diy_fp_encode_double@@Base+0xadc>
   1ad64:	vmul.f64	d7, d7, d6
   1ad68:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad6c:	vldr	d6, [pc, #-764]	; 1aa78 <grisu3_diy_fp_encode_double@@Base+0xad4>
   1ad70:	vmul.f64	d7, d7, d6
   1ad74:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad78:	vldr	d6, [pc, #-768]	; 1aa80 <grisu3_diy_fp_encode_double@@Base+0xadc>
   1ad7c:	vdiv.f64	d7, d7, d6
   1ad80:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad84:	vldr	d6, [pc, #-796]	; 1aa70 <grisu3_diy_fp_encode_double@@Base+0xacc>
   1ad88:	vdiv.f64	d7, d7, d6
   1ad8c:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad90:	vldr	d6, [pc, #-904]	; 1aa10 <grisu3_diy_fp_encode_double@@Base+0xa6c>
   1ad94:	vdiv.f64	d7, d7, d6
   1ad98:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ad9c:	vldr	d6, [pc, #-924]	; 1aa08 <grisu3_diy_fp_encode_double@@Base+0xa64>
   1ada0:	vdiv.f64	d7, d7, d6
   1ada4:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ada8:	vldr	d6, [pc, #-840]	; 1aa68 <grisu3_diy_fp_encode_double@@Base+0xac4>
   1adac:	vdiv.f64	d7, d7, d6
   1adb0:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1adb4:	vldr	d6, [pc, #-932]	; 1aa18 <grisu3_diy_fp_encode_double@@Base+0xa74>
   1adb8:	vdiv.f64	d7, d7, d6
   1adbc:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1adc0:	vldr	d6, [pc, #-872]	; 1aa60 <grisu3_diy_fp_encode_double@@Base+0xabc>
   1adc4:	vdiv.f64	d7, d7, d6
   1adc8:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1adcc:	vldr	d6, [pc, #-948]	; 1aa20 <grisu3_diy_fp_encode_double@@Base+0xa7c>
   1add0:	vdiv.f64	d7, d7, d6
   1add4:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1add8:	vldr	d6, [pc, #-904]	; 1aa58 <grisu3_diy_fp_encode_double@@Base+0xab4>
   1addc:	vdiv.f64	d7, d7, d6
   1ade0:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ade4:	vldr	d6, [pc, #-964]	; 1aa28 <grisu3_diy_fp_encode_double@@Base+0xa84>
   1ade8:	vdiv.f64	d7, d7, d6
   1adec:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1adf0:	vldr	d6, [pc, #-936]	; 1aa50 <grisu3_diy_fp_encode_double@@Base+0xaac>
   1adf4:	vdiv.f64	d7, d7, d6
   1adf8:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1adfc:	vldr	d6, [pc, #-980]	; 1aa30 <grisu3_diy_fp_encode_double@@Base+0xa8c>
   1ae00:	vdiv.f64	d7, d7, d6
   1ae04:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ae08:	vldr	d6, [pc, #-968]	; 1aa48 <grisu3_diy_fp_encode_double@@Base+0xaa4>
   1ae0c:	vdiv.f64	d7, d7, d6
   1ae10:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ae14:	vldr	d6, [pc, #-996]	; 1aa38 <grisu3_diy_fp_encode_double@@Base+0xa94>
   1ae18:	vdiv.f64	d7, d7, d6
   1ae1c:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ae20:	vldr	d6, [pc, #-1000]	; 1aa40 <grisu3_diy_fp_encode_double@@Base+0xa9c>
   1ae24:	vdiv.f64	d7, d7, d6
   1ae28:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ae2c:	vldr	d6, [pc, #244]	; 1af28 <grisu3_diy_fp_encode_double@@Base+0xf84>
   1ae30:	vdiv.f64	d7, d7, d6
   1ae34:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ae38:	vldr	d6, [pc, #240]	; 1af30 <grisu3_diy_fp_encode_double@@Base+0xf8c>
   1ae3c:	vdiv.f64	d7, d7, d6
   1ae40:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ae44:	vldr	d6, [pc, #236]	; 1af38 <grisu3_diy_fp_encode_double@@Base+0xf94>
   1ae48:	vdiv.f64	d7, d7, d6
   1ae4c:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ae50:	vldr	d6, [pc, #232]	; 1af40 <grisu3_diy_fp_encode_double@@Base+0xf9c>
   1ae54:	vdiv.f64	d7, d7, d6
   1ae58:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ae5c:	vldr	d6, [pc, #228]	; 1af48 <grisu3_diy_fp_encode_double@@Base+0xfa4>
   1ae60:	vdiv.f64	d7, d7, d6
   1ae64:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ae68:	vldr	d6, [pc, #224]	; 1af50 <grisu3_diy_fp_encode_double@@Base+0xfac>
   1ae6c:	vdiv.f64	d7, d7, d6
   1ae70:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ae74:	vldr	d6, [pc, #220]	; 1af58 <grisu3_diy_fp_encode_double@@Base+0xfb4>
   1ae78:	vdiv.f64	d7, d7, d6
   1ae7c:	b	1a7fc <grisu3_diy_fp_encode_double@@Base+0x858>
   1ae80:	add	r2, r6, #2
   1ae84:	cmp	ip, r2
   1ae88:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1ae8c:	ldrb	r8, [r6, #2]
   1ae90:	mov	fp, #0
   1ae94:	b	1aab0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1ae98:	cmp	fp, #0
   1ae9c:	bne	1ab1c <grisu3_diy_fp_encode_double@@Base+0xb78>
   1aea0:	b	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1aea4:	add	r2, r6, #2
   1aea8:	cmp	ip, r2
   1aeac:	beq	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1aeb0:	ldrb	r8, [r6, #2]
   1aeb4:	mov	fp, #1
   1aeb8:	b	1aab0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1aebc:	ldr	fp, [sp, #24]
   1aec0:	mov	r7, r0
   1aec4:	ldr	r0, [sp, #28]
   1aec8:	sub	fp, r8, fp
   1aecc:	add	sl, sl, fp
   1aed0:	cmp	lr, #0
   1aed4:	bne	1a998 <grisu3_diy_fp_encode_double@@Base+0x9f4>
   1aed8:	cmp	r9, #52	; 0x34
   1aedc:	movls	r9, #0
   1aee0:	movhi	r9, #1
   1aee4:	adds	r4, r4, r9
   1aee8:	adc	r5, r5, #0
   1aeec:	cmp	ip, r8
   1aef0:	movne	lr, #1
   1aef4:	bne	1a998 <grisu3_diy_fp_encode_double@@Base+0x9f4>
   1aef8:	b	1a794 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   1aefc:	mov	r7, lr
   1af00:	mov	r6, r3
   1af04:	b	1a8a4 <grisu3_diy_fp_encode_double@@Base+0x900>
   1af08:	mov	r8, fp
   1af0c:	b	1aed0 <grisu3_diy_fp_encode_double@@Base+0xf2c>
   1af10:	mov	r6, r3
   1af14:	b	1ab88 <grisu3_diy_fp_encode_double@@Base+0xbe4>
   1af18:	mov	r6, r7
   1af1c:	mov	r7, #0
   1af20:	b	1a65c <grisu3_diy_fp_encode_double@@Base+0x6b8>
   1af24:	nop	{0}
   1af28:	strbcc	r8, [r0, r0]!
   1af2c:	movtmi	ip, #4985	; 0x1379
   1af30:	ldrbhi	sl, [r8]
   1af34:	cmnmi	r6, #1459617792	; 0x57000000
   1af38:	strbvs	ip, [lr, -r0, lsl #16]
   1af3c:			; <UNDEFINED> instruction: 0x43abc16d
   1af40:	addsvs	r3, r1, r0, lsl #26
   1af44:	mvnmi	r5, #228, 16	; 0xe40000
   1af48:			; <UNDEFINED> instruction: 0x064dd592
   1af4c:	strmi	pc, [r0], #207	; 0xcf
   1af50:	ldmvc	r5!, {r6, sl, fp, pc}
   1af54:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1af58:	usatle	lr, #2, r0, asr #30
   1af5c:	strbmi	r1, [fp], #-2788	; 0xfffff51c

0001af60 <flatcc_json_parser_error_string@@Base>:
   1af60:	cmp	r0, #34	; 0x22
   1af64:	bhi	1af7c <flatcc_json_parser_error_string@@Base+0x1c>
   1af68:	movw	r3, #5920	; 0x1720
   1af6c:	movt	r3, #2
   1af70:	add	r3, r3, r0, lsl #2
   1af74:	ldr	r0, [r3, #1476]	; 0x5c4
   1af78:	bx	lr
   1af7c:	movw	r0, #8456	; 0x2108
   1af80:	movt	r0, #2
   1af84:	bx	lr

0001af88 <flatcc_json_parser_set_error@@Base>:
   1af88:	ldr	ip, [r0, #24]
   1af8c:	cmp	ip, #0
   1af90:	bne	1afac <flatcc_json_parser_set_error@@Base+0x24>
   1af94:	ldr	ip, [r0, #4]
   1af98:	str	r3, [r0, #24]
   1af9c:	str	r1, [r0, #36]	; 0x24
   1afa0:	sub	r1, r1, ip
   1afa4:	add	r1, r1, #1
   1afa8:	str	r1, [r0, #20]
   1afac:	mov	r0, r2
   1afb0:	bx	lr

0001afb4 <flatcc_json_parser_string_part@@Base>:
   1afb4:	cmp	r1, r2
   1afb8:	push	{lr}		; (str lr, [sp, #-4]!)
   1afbc:	mov	lr, r0
   1afc0:	beq	1b068 <flatcc_json_parser_string_part@@Base+0xb4>
   1afc4:	ldrb	r3, [r1]
   1afc8:	cmp	r3, #34	; 0x22
   1afcc:	cmpne	r3, #31
   1afd0:	movhi	ip, #1
   1afd4:	movls	ip, #0
   1afd8:	cmp	r3, #92	; 0x5c
   1afdc:	moveq	ip, #0
   1afe0:	andne	ip, ip, #1
   1afe4:	cmp	ip, #0
   1afe8:	beq	1b084 <flatcc_json_parser_string_part@@Base+0xd0>
   1afec:	add	r1, r1, #1
   1aff0:	cmp	r1, r2
   1aff4:	mov	r0, r1
   1aff8:	beq	1b06c <flatcc_json_parser_string_part@@Base+0xb8>
   1affc:	ldrb	r3, [r1], #1
   1b000:	cmp	r3, #34	; 0x22
   1b004:	cmpne	r3, #31
   1b008:	movhi	ip, #1
   1b00c:	movls	ip, #0
   1b010:	cmp	r3, #92	; 0x5c
   1b014:	moveq	ip, #0
   1b018:	andne	ip, ip, #1
   1b01c:	cmp	ip, #0
   1b020:	bne	1aff0 <flatcc_json_parser_string_part@@Base+0x3c>
   1b024:	cmp	r3, #31
   1b028:	bls	1b030 <flatcc_json_parser_string_part@@Base+0x7c>
   1b02c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b030:	ldr	r3, [lr, #24]
   1b034:	cmp	r3, #0
   1b038:	bne	1b060 <flatcc_json_parser_string_part@@Base+0xac>
   1b03c:	ldr	r3, [lr, #4]
   1b040:	mov	r1, #17
   1b044:	sub	r3, r0, r3
   1b048:	str	r1, [lr, #24]
   1b04c:	add	r3, r3, #1
   1b050:	str	r3, [lr, #20]
   1b054:	str	r0, [lr, #36]	; 0x24
   1b058:	mov	r0, r2
   1b05c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b060:	mov	r0, r2
   1b064:	pop	{pc}		; (ldr pc, [sp], #4)
   1b068:	mov	r0, r2
   1b06c:	ldr	r3, [lr, #24]
   1b070:	cmp	r3, #0
   1b074:	bne	1b060 <flatcc_json_parser_string_part@@Base+0xac>
   1b078:	mov	r1, #20
   1b07c:	ldr	r3, [lr, #4]
   1b080:	b	1b044 <flatcc_json_parser_string_part@@Base+0x90>
   1b084:	mov	r0, r1
   1b088:	b	1b024 <flatcc_json_parser_string_part@@Base+0x70>

0001b08c <flatcc_json_parser_space_ext@@Base>:
   1b08c:	cmp	r1, r2
   1b090:	beq	1b148 <flatcc_json_parser_space_ext@@Base+0xbc>
   1b094:	ldrb	ip, [r1]
   1b098:	cmp	ip, #32
   1b09c:	bne	1b0c8 <flatcc_json_parser_space_ext@@Base+0x3c>
   1b0a0:	add	r3, r1, #1
   1b0a4:	b	1b0b4 <flatcc_json_parser_space_ext@@Base+0x28>
   1b0a8:	ldrb	ip, [r3], #1
   1b0ac:	cmp	ip, #32
   1b0b0:	bne	1b0c8 <flatcc_json_parser_space_ext@@Base+0x3c>
   1b0b4:	cmp	r3, r2
   1b0b8:	mov	r1, r3
   1b0bc:	bne	1b0a8 <flatcc_json_parser_space_ext@@Base+0x1c>
   1b0c0:	mov	r0, r1
   1b0c4:	bx	lr
   1b0c8:	cmp	ip, #32
   1b0cc:	bhi	1b0c0 <flatcc_json_parser_space_ext@@Base+0x34>
   1b0d0:	sub	ip, ip, #9
   1b0d4:	cmp	ip, #23
   1b0d8:	ldrls	pc, [pc, ip, lsl #2]
   1b0dc:	b	1b1ac <flatcc_json_parser_space_ext@@Base+0x120>
   1b0e0:	andeq	fp, r1, r4, lsr #3
   1b0e4:	andeq	fp, r1, r8, ror r1
   1b0e8:	andeq	fp, r1, ip, lsr #3
   1b0ec:	andeq	fp, r1, ip, lsr #3
   1b0f0:	andeq	fp, r1, r4, asr r1
   1b0f4:	andeq	fp, r1, ip, lsr #3
   1b0f8:	andeq	fp, r1, ip, lsr #3
   1b0fc:	andeq	fp, r1, ip, lsr #3
   1b100:	andeq	fp, r1, ip, lsr #3
   1b104:	andeq	fp, r1, ip, lsr #3
   1b108:	andeq	fp, r1, ip, lsr #3
   1b10c:	andeq	fp, r1, ip, lsr #3
   1b110:	andeq	fp, r1, ip, lsr #3
   1b114:	andeq	fp, r1, ip, lsr #3
   1b118:	andeq	fp, r1, ip, lsr #3
   1b11c:	andeq	fp, r1, ip, lsr #3
   1b120:	andeq	fp, r1, ip, lsr #3
   1b124:	andeq	fp, r1, ip, lsr #3
   1b128:	andeq	fp, r1, ip, lsr #3
   1b12c:	andeq	fp, r1, ip, lsr #3
   1b130:	andeq	fp, r1, ip, lsr #3
   1b134:	andeq	fp, r1, ip, lsr #3
   1b138:	andeq	fp, r1, ip, lsr #3
   1b13c:	andeq	fp, r1, r0, asr #2
   1b140:	cmp	r2, r1
   1b144:	bne	1b094 <flatcc_json_parser_space_ext@@Base+0x8>
   1b148:	mov	r1, r2
   1b14c:	mov	r0, r1
   1b150:	bx	lr
   1b154:	sub	r3, r2, r1
   1b158:	add	ip, r1, #1
   1b15c:	cmp	r3, #1
   1b160:	ble	1b170 <flatcc_json_parser_space_ext@@Base+0xe4>
   1b164:	ldrb	r3, [r1, #1]
   1b168:	cmp	r3, #10
   1b16c:	addeq	ip, r1, #2
   1b170:	mov	r1, ip
   1b174:	b	1b17c <flatcc_json_parser_space_ext@@Base+0xf0>
   1b178:	add	r1, r1, #1
   1b17c:	ldr	r3, [r0, #16]
   1b180:	str	r1, [r0, #4]
   1b184:	add	r3, r3, #1
   1b188:	str	r3, [r0, #16]
   1b18c:	cmp	r2, r1
   1b190:	beq	1b0c0 <flatcc_json_parser_space_ext@@Base+0x34>
   1b194:	ldrb	ip, [r1]
   1b198:	cmp	ip, #32
   1b19c:	bls	1b0d0 <flatcc_json_parser_space_ext@@Base+0x44>
   1b1a0:	b	1b0c0 <flatcc_json_parser_space_ext@@Base+0x34>
   1b1a4:	add	r1, r1, #1
   1b1a8:	b	1b18c <flatcc_json_parser_space_ext@@Base+0x100>
   1b1ac:	ldr	r3, [r0, #24]
   1b1b0:	cmp	r3, #0
   1b1b4:	bne	1b148 <flatcc_json_parser_space_ext@@Base+0xbc>
   1b1b8:	ldr	r3, [r0, #4]
   1b1bc:	mov	ip, #5
   1b1c0:	str	r1, [r0, #36]	; 0x24
   1b1c4:	str	ip, [r0, #24]
   1b1c8:	sub	r3, r1, r3
   1b1cc:	mov	r1, r2
   1b1d0:	add	r3, r3, #1
   1b1d4:	str	r3, [r0, #20]
   1b1d8:	mov	r0, r1
   1b1dc:	bx	lr
   1b1e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b1e4:	mov	r5, r0
   1b1e8:	mov	ip, #0
   1b1ec:	strd	r6, [sp, #8]
   1b1f0:	mov	r4, r2
   1b1f4:	strd	r8, [sp, #16]
   1b1f8:	mov	r8, r3
   1b1fc:	strd	sl, [sp, #24]
   1b200:	mov	sl, r1
   1b204:	str	lr, [sp, #32]
   1b208:	sub	sp, sp, #28
   1b20c:	ldrh	r0, [sp, #68]	; 0x44
   1b210:	ldr	r7, [sp, #64]	; 0x40
   1b214:	str	r0, [sp, #12]
   1b218:	ldr	r0, [r5]
   1b21c:	str	ip, [sp, #20]
   1b220:	bl	16064 <flatcc_builder_start_offset_vector@@Base>
   1b224:	cmp	r0, #0
   1b228:	beq	1b280 <flatcc_json_parser_space_ext@@Base+0x1f4>
   1b22c:	ldr	r3, [r5, #24]
   1b230:	cmp	r3, #0
   1b234:	beq	1b25c <flatcc_json_parser_space_ext@@Base+0x1d0>
   1b238:	mov	fp, r4
   1b23c:	mov	r0, fp
   1b240:	add	sp, sp, #28
   1b244:	ldrd	r4, [sp]
   1b248:	ldrd	r6, [sp, #8]
   1b24c:	ldrd	r8, [sp, #16]
   1b250:	ldrd	sl, [sp, #24]
   1b254:	add	sp, sp, #32
   1b258:	pop	{pc}		; (ldr pc, [sp], #4)
   1b25c:	ldr	r2, [r5, #4]
   1b260:	mov	r1, #33	; 0x21
   1b264:	mov	fp, r4
   1b268:	str	sl, [r5, #36]	; 0x24
   1b26c:	str	r1, [r5, #24]
   1b270:	sub	sl, sl, r2
   1b274:	add	sl, sl, #1
   1b278:	str	sl, [r5, #20]
   1b27c:	b	1b23c <flatcc_json_parser_space_ext@@Base+0x1b0>
   1b280:	cmp	sl, r4
   1b284:	beq	1b294 <flatcc_json_parser_space_ext@@Base+0x208>
   1b288:	ldrb	r3, [sl]
   1b28c:	cmp	r3, #91	; 0x5b
   1b290:	beq	1b318 <flatcc_json_parser_space_ext@@Base+0x28c>
   1b294:	ldr	r6, [r5, #24]
   1b298:	cmp	r6, #0
   1b29c:	beq	1b2f8 <flatcc_json_parser_space_ext@@Base+0x26c>
   1b2a0:	mov	r6, #0
   1b2a4:	cmp	r7, r6
   1b2a8:	moveq	sl, r4
   1b2ac:	bne	1b238 <flatcc_json_parser_space_ext@@Base+0x1ac>
   1b2b0:	mov	r1, r8
   1b2b4:	ldr	r0, [r5]
   1b2b8:	bl	14554 <flatcc_builder_get_user_frame_ptr@@Base>
   1b2bc:	mov	r1, r0
   1b2c0:	ldr	r0, [r5]
   1b2c4:	bl	17938 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1b2c8:	cmp	r0, #0
   1b2cc:	str	r0, [sp, #20]
   1b2d0:	beq	1b22c <flatcc_json_parser_space_ext@@Base+0x1a0>
   1b2d4:	ldr	r0, [r5]
   1b2d8:	ldr	r1, [sp, #12]
   1b2dc:	bl	18dc8 <flatcc_builder_table_add_offset@@Base>
   1b2e0:	cmp	r0, #0
   1b2e4:	beq	1b22c <flatcc_json_parser_space_ext@@Base+0x1a0>
   1b2e8:	ldr	r2, [sp, #20]
   1b2ec:	mov	fp, sl
   1b2f0:	str	r2, [r0]
   1b2f4:	b	1b23c <flatcc_json_parser_space_ext@@Base+0x1b0>
   1b2f8:	ldr	r3, [r5, #4]
   1b2fc:	mov	r2, #22
   1b300:	str	sl, [r5, #36]	; 0x24
   1b304:	str	r2, [r5, #24]
   1b308:	sub	sl, sl, r3
   1b30c:	add	sl, sl, #1
   1b310:	str	sl, [r5, #20]
   1b314:	b	1b2a4 <flatcc_json_parser_space_ext@@Base+0x218>
   1b318:	add	r9, sl, #1
   1b31c:	sub	r3, r4, r9
   1b320:	cmp	r3, #1
   1b324:	ble	1b338 <flatcc_json_parser_space_ext@@Base+0x2ac>
   1b328:	ldrb	r1, [sl, #1]
   1b32c:	cmp	r1, #32
   1b330:	bhi	1b954 <flatcc_json_parser_space_ext@@Base+0x8c8>
   1b334:	beq	1b944 <flatcc_json_parser_space_ext@@Base+0x8b8>
   1b338:	cmp	r4, r9
   1b33c:	beq	1b36c <flatcc_json_parser_space_ext@@Base+0x2e0>
   1b340:	ldrb	r1, [r9]
   1b344:	cmp	r1, #32
   1b348:	bne	1b7dc <flatcc_json_parser_space_ext@@Base+0x750>
   1b34c:	add	r3, r9, #1
   1b350:	b	1b360 <flatcc_json_parser_space_ext@@Base+0x2d4>
   1b354:	ldrb	r1, [r3], #1
   1b358:	cmp	r1, #32
   1b35c:	bne	1b7dc <flatcc_json_parser_space_ext@@Base+0x750>
   1b360:	cmp	r4, r3
   1b364:	mov	r9, r3
   1b368:	bne	1b354 <flatcc_json_parser_space_ext@@Base+0x2c8>
   1b36c:	cmp	r7, #0
   1b370:	beq	1b5f0 <flatcc_json_parser_space_ext@@Base+0x564>
   1b374:	mov	r6, #0
   1b378:	add	sl, sp, #20
   1b37c:	mov	r1, r8
   1b380:	ldr	r0, [r5]
   1b384:	bl	14554 <flatcc_builder_get_user_frame_ptr@@Base>
   1b388:	ldrb	r3, [r0, r6]
   1b38c:	mov	r1, r9
   1b390:	mov	r2, r4
   1b394:	mov	r0, r5
   1b398:	str	sl, [sp]
   1b39c:	ldr	ip, [sp, #72]	; 0x48
   1b3a0:	blx	ip
   1b3a4:	cmp	r4, r0
   1b3a8:	mov	fp, r0
   1b3ac:	beq	1b23c <flatcc_json_parser_space_ext@@Base+0x1b0>
   1b3b0:	mov	r1, #1
   1b3b4:	ldr	r0, [r5]
   1b3b8:	bl	155b8 <flatcc_builder_extend_offset_vector@@Base>
   1b3bc:	cmp	r0, #0
   1b3c0:	beq	1b928 <flatcc_json_parser_space_ext@@Base+0x89c>
   1b3c4:	ldr	r2, [sp, #20]
   1b3c8:	sub	r1, r4, fp
   1b3cc:	cmp	r1, #1
   1b3d0:	str	r2, [r0]
   1b3d4:	ble	1b3e8 <flatcc_json_parser_space_ext@@Base+0x35c>
   1b3d8:	ldrb	r2, [fp]
   1b3dc:	cmp	r2, #32
   1b3e0:	bhi	1b408 <flatcc_json_parser_space_ext@@Base+0x37c>
   1b3e4:	beq	1b484 <flatcc_json_parser_space_ext@@Base+0x3f8>
   1b3e8:	mov	r1, fp
   1b3ec:	mov	r2, r4
   1b3f0:	mov	r0, r5
   1b3f4:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   1b3f8:	mov	fp, r0
   1b3fc:	cmp	r4, fp
   1b400:	beq	1b448 <flatcc_json_parser_space_ext@@Base+0x3bc>
   1b404:	ldrb	r2, [fp]
   1b408:	cmp	r2, #44	; 0x2c
   1b40c:	beq	1b498 <flatcc_json_parser_space_ext@@Base+0x40c>
   1b410:	cmp	r2, #93	; 0x5d
   1b414:	add	r6, r6, #1
   1b418:	beq	1b668 <flatcc_json_parser_space_ext@@Base+0x5dc>
   1b41c:	ldr	r2, [r5, #24]
   1b420:	cmp	r2, #0
   1b424:	bne	1b2a4 <flatcc_json_parser_space_ext@@Base+0x218>
   1b428:	ldr	r2, [r5, #4]
   1b42c:	mov	r1, #9
   1b430:	sub	r3, fp, r2
   1b434:	str	r1, [r5, #24]
   1b438:	add	r3, r3, #1
   1b43c:	str	r3, [r5, #20]
   1b440:	str	fp, [r5, #36]	; 0x24
   1b444:	b	1b2a4 <flatcc_json_parser_space_ext@@Base+0x218>
   1b448:	add	r6, r6, #1
   1b44c:	cmp	r7, r6
   1b450:	beq	1bbc8 <flatcc_json_parser_space_ext@@Base+0xb3c>
   1b454:	ldr	r2, [r5, #24]
   1b458:	cmp	r2, #0
   1b45c:	bne	1b238 <flatcc_json_parser_space_ext@@Base+0x1ac>
   1b460:	ldr	r2, [r5, #4]
   1b464:	mov	r1, #30
   1b468:	str	r1, [r5, #24]
   1b46c:	str	fp, [r5, #36]	; 0x24
   1b470:	sub	r2, fp, r2
   1b474:	mov	fp, r4
   1b478:	add	r2, r2, #1
   1b47c:	str	r2, [r5, #20]
   1b480:	b	1b23c <flatcc_json_parser_space_ext@@Base+0x1b0>
   1b484:	ldrb	r2, [fp, #1]
   1b488:	cmp	r2, #32
   1b48c:	addhi	fp, fp, #1
   1b490:	bls	1b3e8 <flatcc_json_parser_space_ext@@Base+0x35c>
   1b494:	b	1b3fc <flatcc_json_parser_space_ext@@Base+0x370>
   1b498:	add	r9, fp, #1
   1b49c:	sub	r1, r4, r9
   1b4a0:	cmp	r1, #1
   1b4a4:	ble	1b4b8 <flatcc_json_parser_space_ext@@Base+0x42c>
   1b4a8:	ldrb	r1, [fp, #1]
   1b4ac:	cmp	r1, #32
   1b4b0:	bhi	1b7d0 <flatcc_json_parser_space_ext@@Base+0x744>
   1b4b4:	beq	1b7c0 <flatcc_json_parser_space_ext@@Base+0x734>
   1b4b8:	cmp	r4, r9
   1b4bc:	beq	1b4ec <flatcc_json_parser_space_ext@@Base+0x460>
   1b4c0:	ldrb	r1, [r9]
   1b4c4:	cmp	r1, #32
   1b4c8:	bne	1b520 <flatcc_json_parser_space_ext@@Base+0x494>
   1b4cc:	add	r3, r9, #1
   1b4d0:	b	1b4e0 <flatcc_json_parser_space_ext@@Base+0x454>
   1b4d4:	ldrb	r1, [r3], #1
   1b4d8:	cmp	r1, #32
   1b4dc:	bne	1b520 <flatcc_json_parser_space_ext@@Base+0x494>
   1b4e0:	cmp	r4, r3
   1b4e4:	mov	r9, r3
   1b4e8:	bne	1b4d4 <flatcc_json_parser_space_ext@@Base+0x448>
   1b4ec:	ldr	r3, [r5, #24]
   1b4f0:	add	r6, r6, #1
   1b4f4:	mov	r1, r6
   1b4f8:	cmp	r3, #0
   1b4fc:	bne	1b660 <flatcc_json_parser_space_ext@@Base+0x5d4>
   1b500:	ldr	r3, [r5, #4]
   1b504:	mov	r1, #9
   1b508:	str	r1, [r5, #24]
   1b50c:	str	r9, [r5, #36]	; 0x24
   1b510:	sub	r3, r9, r3
   1b514:	add	r3, r3, #1
   1b518:	str	r3, [r5, #20]
   1b51c:	b	1b2a4 <flatcc_json_parser_space_ext@@Base+0x218>
   1b520:	cmp	r1, #32
   1b524:	bhi	1b5dc <flatcc_json_parser_space_ext@@Base+0x550>
   1b528:	sub	r1, r1, #9
   1b52c:	cmp	r1, #23
   1b530:	ldrls	pc, [pc, r1, lsl #2]
   1b534:	b	1b630 <flatcc_json_parser_space_ext@@Base+0x5a4>
   1b538:	andeq	fp, r1, r8, lsr #12
   1b53c:	andeq	fp, r1, r0, lsr #12
   1b540:	andeq	fp, r1, r0, lsr r6
   1b544:	andeq	fp, r1, r0, lsr r6
   1b548:	muleq	r1, r8, r5
   1b54c:	andeq	fp, r1, r0, lsr r6
   1b550:	andeq	fp, r1, r0, lsr r6
   1b554:	andeq	fp, r1, r0, lsr r6
   1b558:	andeq	fp, r1, r0, lsr r6
   1b55c:	andeq	fp, r1, r0, lsr r6
   1b560:	andeq	fp, r1, r0, lsr r6
   1b564:	andeq	fp, r1, r0, lsr r6
   1b568:	andeq	fp, r1, r0, lsr r6
   1b56c:	andeq	fp, r1, r0, lsr r6
   1b570:	andeq	fp, r1, r0, lsr r6
   1b574:	andeq	fp, r1, r0, lsr r6
   1b578:	andeq	fp, r1, r0, lsr r6
   1b57c:	andeq	fp, r1, r0, lsr r6
   1b580:	andeq	fp, r1, r0, lsr r6
   1b584:	andeq	fp, r1, r0, lsr r6
   1b588:	andeq	fp, r1, r0, lsr r6
   1b58c:	andeq	fp, r1, r0, lsr r6
   1b590:	andeq	fp, r1, r0, lsr r6
   1b594:			; <UNDEFINED> instruction: 0x0001b4b8
   1b598:	sub	r3, r4, r9
   1b59c:	add	r1, r9, #1
   1b5a0:	cmp	r3, #1
   1b5a4:	ble	1b5b4 <flatcc_json_parser_space_ext@@Base+0x528>
   1b5a8:	ldrb	r3, [r9, #1]
   1b5ac:	cmp	r3, #10
   1b5b0:	addeq	r1, r9, #2
   1b5b4:	mov	r9, r1
   1b5b8:	ldr	r3, [r5, #16]
   1b5bc:	str	r9, [r5, #4]
   1b5c0:	add	r3, r3, #1
   1b5c4:	str	r3, [r5, #16]
   1b5c8:	cmp	r4, r9
   1b5cc:	beq	1b4ec <flatcc_json_parser_space_ext@@Base+0x460>
   1b5d0:	ldrb	r1, [r9]
   1b5d4:	cmp	r1, #32
   1b5d8:	bls	1b528 <flatcc_json_parser_space_ext@@Base+0x49c>
   1b5dc:	cmp	r1, #93	; 0x5d
   1b5e0:	add	r6, r6, #1
   1b5e4:	beq	1b960 <flatcc_json_parser_space_ext@@Base+0x8d4>
   1b5e8:	cmp	r7, r6
   1b5ec:	bne	1b37c <flatcc_json_parser_space_ext@@Base+0x2f0>
   1b5f0:	ldr	r3, [r5, #24]
   1b5f4:	cmp	r3, #0
   1b5f8:	bne	1b238 <flatcc_json_parser_space_ext@@Base+0x1ac>
   1b5fc:	ldr	r1, [r5, #4]
   1b600:	mov	r0, #30
   1b604:	mov	fp, r4
   1b608:	str	r0, [r5, #24]
   1b60c:	str	r9, [r5, #36]	; 0x24
   1b610:	sub	r2, r9, r1
   1b614:	add	r2, r2, #1
   1b618:	str	r2, [r5, #20]
   1b61c:	b	1b23c <flatcc_json_parser_space_ext@@Base+0x1b0>
   1b620:	add	r9, r9, #1
   1b624:	b	1b5b8 <flatcc_json_parser_space_ext@@Base+0x52c>
   1b628:	add	r9, r9, #1
   1b62c:	b	1b5c8 <flatcc_json_parser_space_ext@@Base+0x53c>
   1b630:	ldr	r3, [r5, #24]
   1b634:	cmp	r3, #0
   1b638:	addne	r1, r6, #1
   1b63c:	bne	1b660 <flatcc_json_parser_space_ext@@Base+0x5d4>
   1b640:	ldr	r3, [r5, #4]
   1b644:	mov	r0, #5
   1b648:	add	r1, r6, #1
   1b64c:	str	r0, [r5, #24]
   1b650:	str	r9, [r5, #36]	; 0x24
   1b654:	sub	r2, r9, r3
   1b658:	add	r2, r2, #1
   1b65c:	str	r2, [r5, #20]
   1b660:	mov	r6, r1
   1b664:	b	1b2a4 <flatcc_json_parser_space_ext@@Base+0x218>
   1b668:	add	r1, fp, #1
   1b66c:	sub	r2, r4, r1
   1b670:	cmp	r2, #1
   1b674:	ble	1b688 <flatcc_json_parser_space_ext@@Base+0x5fc>
   1b678:	ldrb	r2, [fp, #1]
   1b67c:	cmp	r2, #32
   1b680:	bhi	1b6bc <flatcc_json_parser_space_ext@@Base+0x630>
   1b684:	beq	1b930 <flatcc_json_parser_space_ext@@Base+0x8a4>
   1b688:	cmp	r4, r1
   1b68c:	beq	1b6bc <flatcc_json_parser_space_ext@@Base+0x630>
   1b690:	ldrb	r2, [r1]
   1b694:	cmp	r2, #32
   1b698:	bne	1b6c4 <flatcc_json_parser_space_ext@@Base+0x638>
   1b69c:	add	r3, r1, #1
   1b6a0:	b	1b6b0 <flatcc_json_parser_space_ext@@Base+0x624>
   1b6a4:	ldrb	r2, [r3], #1
   1b6a8:	cmp	r2, #32
   1b6ac:	bne	1b6c4 <flatcc_json_parser_space_ext@@Base+0x638>
   1b6b0:	cmp	r3, r4
   1b6b4:	mov	r1, r3
   1b6b8:	bne	1b6a4 <flatcc_json_parser_space_ext@@Base+0x618>
   1b6bc:	mov	fp, r1
   1b6c0:	b	1b44c <flatcc_json_parser_space_ext@@Base+0x3c0>
   1b6c4:	cmp	r2, #32
   1b6c8:	bhi	1b6bc <flatcc_json_parser_space_ext@@Base+0x630>
   1b6cc:	sub	r2, r2, #9
   1b6d0:	cmp	r2, #23
   1b6d4:	ldrls	pc, [pc, r2, lsl #2]
   1b6d8:	b	1b794 <flatcc_json_parser_space_ext@@Base+0x708>
   1b6dc:	andeq	fp, r1, ip, lsl #15
   1b6e0:	andeq	fp, r1, r4, lsl #15
   1b6e4:	muleq	r1, r4, r7
   1b6e8:	muleq	r1, r4, r7
   1b6ec:	andeq	fp, r1, ip, lsr r7
   1b6f0:	muleq	r1, r4, r7
   1b6f4:	muleq	r1, r4, r7
   1b6f8:	muleq	r1, r4, r7
   1b6fc:	muleq	r1, r4, r7
   1b700:	muleq	r1, r4, r7
   1b704:	muleq	r1, r4, r7
   1b708:	muleq	r1, r4, r7
   1b70c:	muleq	r1, r4, r7
   1b710:	muleq	r1, r4, r7
   1b714:	muleq	r1, r4, r7
   1b718:	muleq	r1, r4, r7
   1b71c:	muleq	r1, r4, r7
   1b720:	muleq	r1, r4, r7
   1b724:	muleq	r1, r4, r7
   1b728:	muleq	r1, r4, r7
   1b72c:	muleq	r1, r4, r7
   1b730:	muleq	r1, r4, r7
   1b734:	muleq	r1, r4, r7
   1b738:	andeq	fp, r1, r8, lsl #13
   1b73c:	sub	r3, r4, r1
   1b740:	add	r2, r1, #1
   1b744:	cmp	r3, #1
   1b748:	ble	1b758 <flatcc_json_parser_space_ext@@Base+0x6cc>
   1b74c:	ldrb	r3, [r1, #1]
   1b750:	cmp	r3, #10
   1b754:	addeq	r2, r1, #2
   1b758:	mov	r1, r2
   1b75c:	ldr	r3, [r5, #16]
   1b760:	str	r1, [r5, #4]
   1b764:	add	r3, r3, #1
   1b768:	str	r3, [r5, #16]
   1b76c:	cmp	r4, r1
   1b770:	beq	1bac8 <flatcc_json_parser_space_ext@@Base+0xa3c>
   1b774:	ldrb	r2, [r1]
   1b778:	cmp	r2, #32
   1b77c:	bls	1b6cc <flatcc_json_parser_space_ext@@Base+0x640>
   1b780:	b	1b6bc <flatcc_json_parser_space_ext@@Base+0x630>
   1b784:	add	r1, r1, #1
   1b788:	b	1b75c <flatcc_json_parser_space_ext@@Base+0x6d0>
   1b78c:	add	r1, r1, #1
   1b790:	b	1b76c <flatcc_json_parser_space_ext@@Base+0x6e0>
   1b794:	ldr	r3, [r5, #24]
   1b798:	cmp	r3, #0
   1b79c:	bne	1b2a4 <flatcc_json_parser_space_ext@@Base+0x218>
   1b7a0:	ldr	r3, [r5, #4]
   1b7a4:	mov	r2, #5
   1b7a8:	str	r1, [r5, #36]	; 0x24
   1b7ac:	str	r2, [r5, #24]
   1b7b0:	sub	r1, r1, r3
   1b7b4:	add	r1, r1, #1
   1b7b8:	str	r1, [r5, #20]
   1b7bc:	b	1b2a4 <flatcc_json_parser_space_ext@@Base+0x218>
   1b7c0:	ldrb	r1, [fp, #2]
   1b7c4:	cmp	r1, #32
   1b7c8:	addhi	r9, fp, #2
   1b7cc:	bls	1b4b8 <flatcc_json_parser_space_ext@@Base+0x42c>
   1b7d0:	cmp	r4, r9
   1b7d4:	bne	1b5dc <flatcc_json_parser_space_ext@@Base+0x550>
   1b7d8:	b	1b4ec <flatcc_json_parser_space_ext@@Base+0x460>
   1b7dc:	cmp	r1, #32
   1b7e0:	bhi	1b8a0 <flatcc_json_parser_space_ext@@Base+0x814>
   1b7e4:	sub	r1, r1, #9
   1b7e8:	cmp	r1, #23
   1b7ec:	ldrls	pc, [pc, r1, lsl #2]
   1b7f0:	b	1b90c <flatcc_json_parser_space_ext@@Base+0x880>
   1b7f4:	andeq	fp, r1, r4, lsl #18
   1b7f8:	andeq	fp, r1, r8, ror r8
   1b7fc:	andeq	fp, r1, ip, lsl #18
   1b800:	andeq	fp, r1, ip, lsl #18
   1b804:	andeq	fp, r1, r4, asr r8
   1b808:	andeq	fp, r1, ip, lsl #18
   1b80c:	andeq	fp, r1, ip, lsl #18
   1b810:	andeq	fp, r1, ip, lsl #18
   1b814:	andeq	fp, r1, ip, lsl #18
   1b818:	andeq	fp, r1, ip, lsl #18
   1b81c:	andeq	fp, r1, ip, lsl #18
   1b820:	andeq	fp, r1, ip, lsl #18
   1b824:	andeq	fp, r1, ip, lsl #18
   1b828:	andeq	fp, r1, ip, lsl #18
   1b82c:	andeq	fp, r1, ip, lsl #18
   1b830:	andeq	fp, r1, ip, lsl #18
   1b834:	andeq	fp, r1, ip, lsl #18
   1b838:	andeq	fp, r1, ip, lsl #18
   1b83c:	andeq	fp, r1, ip, lsl #18
   1b840:	andeq	fp, r1, ip, lsl #18
   1b844:	andeq	fp, r1, ip, lsl #18
   1b848:	andeq	fp, r1, ip, lsl #18
   1b84c:	andeq	fp, r1, ip, lsl #18
   1b850:	andeq	fp, r1, r8, lsr r3
   1b854:	sub	r3, r4, r9
   1b858:	add	r1, r9, #1
   1b85c:	cmp	r3, #1
   1b860:	ble	1b870 <flatcc_json_parser_space_ext@@Base+0x7e4>
   1b864:	ldrb	r3, [r9, #1]
   1b868:	cmp	r3, #10
   1b86c:	addeq	r1, r9, #2
   1b870:	mov	r9, r1
   1b874:	b	1b87c <flatcc_json_parser_space_ext@@Base+0x7f0>
   1b878:	add	r9, r9, #1
   1b87c:	ldr	r3, [r5, #16]
   1b880:	str	r9, [r5, #4]
   1b884:	add	r3, r3, #1
   1b888:	str	r3, [r5, #16]
   1b88c:	cmp	r4, r9
   1b890:	beq	1b36c <flatcc_json_parser_space_ext@@Base+0x2e0>
   1b894:	ldrb	r1, [r9]
   1b898:	cmp	r1, #32
   1b89c:	bls	1b7e4 <flatcc_json_parser_space_ext@@Base+0x758>
   1b8a0:	cmp	r1, #93	; 0x5d
   1b8a4:	bne	1b36c <flatcc_json_parser_space_ext@@Base+0x2e0>
   1b8a8:	add	fp, r9, #1
   1b8ac:	sub	r1, r4, fp
   1b8b0:	cmp	r1, #1
   1b8b4:	ble	1b8c8 <flatcc_json_parser_space_ext@@Base+0x83c>
   1b8b8:	ldrb	r1, [r9, #1]
   1b8bc:	cmp	r1, #32
   1b8c0:	bhi	1b8fc <flatcc_json_parser_space_ext@@Base+0x870>
   1b8c4:	beq	1bbb0 <flatcc_json_parser_space_ext@@Base+0xb24>
   1b8c8:	cmp	r4, fp
   1b8cc:	beq	1b8fc <flatcc_json_parser_space_ext@@Base+0x870>
   1b8d0:	ldrb	r1, [fp]
   1b8d4:	cmp	r1, #32
   1b8d8:	bne	1bad0 <flatcc_json_parser_space_ext@@Base+0xa44>
   1b8dc:	add	r2, fp, #1
   1b8e0:	b	1b8f0 <flatcc_json_parser_space_ext@@Base+0x864>
   1b8e4:	ldrb	r1, [r2], #1
   1b8e8:	cmp	r1, #32
   1b8ec:	bne	1bad0 <flatcc_json_parser_space_ext@@Base+0xa44>
   1b8f0:	cmp	r2, r4
   1b8f4:	mov	fp, r2
   1b8f8:	bne	1b8e4 <flatcc_json_parser_space_ext@@Base+0x858>
   1b8fc:	mov	r6, #0
   1b900:	b	1b44c <flatcc_json_parser_space_ext@@Base+0x3c0>
   1b904:	add	r9, r9, #1
   1b908:	b	1b88c <flatcc_json_parser_space_ext@@Base+0x800>
   1b90c:	ldr	r3, [r5, #24]
   1b910:	cmp	r3, #0
   1b914:	beq	1ba90 <flatcc_json_parser_space_ext@@Base+0xa04>
   1b918:	cmp	r7, #0
   1b91c:	beq	1b238 <flatcc_json_parser_space_ext@@Base+0x1ac>
   1b920:	mov	r9, r4
   1b924:	b	1b374 <flatcc_json_parser_space_ext@@Base+0x2e8>
   1b928:	mov	sl, fp
   1b92c:	b	1b22c <flatcc_json_parser_space_ext@@Base+0x1a0>
   1b930:	ldrb	r2, [fp, #2]
   1b934:	cmp	r2, #32
   1b938:	addhi	fp, fp, #2
   1b93c:	bls	1b688 <flatcc_json_parser_space_ext@@Base+0x5fc>
   1b940:	b	1b44c <flatcc_json_parser_space_ext@@Base+0x3c0>
   1b944:	ldrb	r1, [sl, #2]
   1b948:	cmp	r1, #32
   1b94c:	addhi	r9, sl, #2
   1b950:	bls	1b338 <flatcc_json_parser_space_ext@@Base+0x2ac>
   1b954:	cmp	r4, r9
   1b958:	bne	1b8a0 <flatcc_json_parser_space_ext@@Base+0x814>
   1b95c:	b	1b36c <flatcc_json_parser_space_ext@@Base+0x2e0>
   1b960:	add	fp, r9, #1
   1b964:	sub	r1, r4, fp
   1b968:	cmp	r1, #1
   1b96c:	ble	1b990 <flatcc_json_parser_space_ext@@Base+0x904>
   1b970:	ldrb	r1, [r9, #1]
   1b974:	cmp	r1, #32
   1b978:	bhi	1b44c <flatcc_json_parser_space_ext@@Base+0x3c0>
   1b97c:	bne	1b990 <flatcc_json_parser_space_ext@@Base+0x904>
   1b980:	ldrb	r1, [r9, #2]
   1b984:	cmp	r1, #32
   1b988:	addhi	fp, r9, #2
   1b98c:	bhi	1b44c <flatcc_json_parser_space_ext@@Base+0x3c0>
   1b990:	cmp	r4, fp
   1b994:	beq	1b44c <flatcc_json_parser_space_ext@@Base+0x3c0>
   1b998:	ldrb	r1, [fp]
   1b99c:	cmp	r1, #32
   1b9a0:	bne	1b9c0 <flatcc_json_parser_space_ext@@Base+0x934>
   1b9a4:	add	r2, fp, #1
   1b9a8:	cmp	r2, r4
   1b9ac:	mov	fp, r2
   1b9b0:	beq	1b44c <flatcc_json_parser_space_ext@@Base+0x3c0>
   1b9b4:	ldrb	r1, [r2], #1
   1b9b8:	cmp	r1, #32
   1b9bc:	beq	1b9a8 <flatcc_json_parser_space_ext@@Base+0x91c>
   1b9c0:	cmp	r1, #32
   1b9c4:	bhi	1b44c <flatcc_json_parser_space_ext@@Base+0x3c0>
   1b9c8:	sub	r1, r1, #9
   1b9cc:	cmp	r1, #23
   1b9d0:	ldrls	pc, [pc, r1, lsl #2]
   1b9d4:	b	1bab0 <flatcc_json_parser_space_ext@@Base+0xa24>
   1b9d8:	andeq	fp, r1, r8, lsl #21
   1b9dc:	andeq	fp, r1, r0, lsl #21
   1b9e0:			; <UNDEFINED> instruction: 0x0001bab0
   1b9e4:			; <UNDEFINED> instruction: 0x0001bab0
   1b9e8:	andeq	fp, r1, r8, lsr sl
   1b9ec:			; <UNDEFINED> instruction: 0x0001bab0
   1b9f0:			; <UNDEFINED> instruction: 0x0001bab0
   1b9f4:			; <UNDEFINED> instruction: 0x0001bab0
   1b9f8:			; <UNDEFINED> instruction: 0x0001bab0
   1b9fc:			; <UNDEFINED> instruction: 0x0001bab0
   1ba00:			; <UNDEFINED> instruction: 0x0001bab0
   1ba04:			; <UNDEFINED> instruction: 0x0001bab0
   1ba08:			; <UNDEFINED> instruction: 0x0001bab0
   1ba0c:			; <UNDEFINED> instruction: 0x0001bab0
   1ba10:			; <UNDEFINED> instruction: 0x0001bab0
   1ba14:			; <UNDEFINED> instruction: 0x0001bab0
   1ba18:			; <UNDEFINED> instruction: 0x0001bab0
   1ba1c:			; <UNDEFINED> instruction: 0x0001bab0
   1ba20:			; <UNDEFINED> instruction: 0x0001bab0
   1ba24:			; <UNDEFINED> instruction: 0x0001bab0
   1ba28:			; <UNDEFINED> instruction: 0x0001bab0
   1ba2c:			; <UNDEFINED> instruction: 0x0001bab0
   1ba30:			; <UNDEFINED> instruction: 0x0001bab0
   1ba34:	muleq	r1, r0, r9
   1ba38:	sub	r2, r4, fp
   1ba3c:	add	r1, fp, #1
   1ba40:	cmp	r2, #1
   1ba44:	ble	1ba54 <flatcc_json_parser_space_ext@@Base+0x9c8>
   1ba48:	ldrb	r2, [fp, #1]
   1ba4c:	cmp	r2, #10
   1ba50:	addeq	r1, fp, #2
   1ba54:	mov	fp, r1
   1ba58:	ldr	r2, [r5, #16]
   1ba5c:	str	fp, [r5, #4]
   1ba60:	add	r2, r2, #1
   1ba64:	str	r2, [r5, #16]
   1ba68:	cmp	r4, fp
   1ba6c:	beq	1b44c <flatcc_json_parser_space_ext@@Base+0x3c0>
   1ba70:	ldrb	r1, [fp]
   1ba74:	cmp	r1, #32
   1ba78:	bls	1b9c8 <flatcc_json_parser_space_ext@@Base+0x93c>
   1ba7c:	b	1b44c <flatcc_json_parser_space_ext@@Base+0x3c0>
   1ba80:	add	fp, fp, #1
   1ba84:	b	1ba58 <flatcc_json_parser_space_ext@@Base+0x9cc>
   1ba88:	add	fp, fp, #1
   1ba8c:	b	1ba68 <flatcc_json_parser_space_ext@@Base+0x9dc>
   1ba90:	ldr	r3, [r5, #4]
   1ba94:	mov	r1, #5
   1ba98:	str	r1, [r5, #24]
   1ba9c:	str	r9, [r5, #36]	; 0x24
   1baa0:	sub	r3, r9, r3
   1baa4:	add	r3, r3, #1
   1baa8:	str	r3, [r5, #20]
   1baac:	b	1b918 <flatcc_json_parser_space_ext@@Base+0x88c>
   1bab0:	ldr	r2, [r5, #24]
   1bab4:	cmp	r2, #0
   1bab8:	bne	1b2a4 <flatcc_json_parser_space_ext@@Base+0x218>
   1babc:	mov	r1, #5
   1bac0:	ldr	r2, [r5, #4]
   1bac4:	b	1b430 <flatcc_json_parser_space_ext@@Base+0x3a4>
   1bac8:	mov	fp, r4
   1bacc:	b	1b44c <flatcc_json_parser_space_ext@@Base+0x3c0>
   1bad0:	cmp	r1, #32
   1bad4:	bhi	1b8fc <flatcc_json_parser_space_ext@@Base+0x870>
   1bad8:	sub	r1, r1, #9
   1badc:	cmp	r1, #23
   1bae0:	ldrls	pc, [pc, r1, lsl #2]
   1bae4:	b	1bba0 <flatcc_json_parser_space_ext@@Base+0xb14>
   1bae8:	muleq	r1, r8, fp
   1baec:	muleq	r1, r0, fp
   1baf0:	andeq	fp, r1, r0, lsr #23
   1baf4:	andeq	fp, r1, r0, lsr #23
   1baf8:	andeq	fp, r1, r8, asr #22
   1bafc:	andeq	fp, r1, r0, lsr #23
   1bb00:	andeq	fp, r1, r0, lsr #23
   1bb04:	andeq	fp, r1, r0, lsr #23
   1bb08:	andeq	fp, r1, r0, lsr #23
   1bb0c:	andeq	fp, r1, r0, lsr #23
   1bb10:	andeq	fp, r1, r0, lsr #23
   1bb14:	andeq	fp, r1, r0, lsr #23
   1bb18:	andeq	fp, r1, r0, lsr #23
   1bb1c:	andeq	fp, r1, r0, lsr #23
   1bb20:	andeq	fp, r1, r0, lsr #23
   1bb24:	andeq	fp, r1, r0, lsr #23
   1bb28:	andeq	fp, r1, r0, lsr #23
   1bb2c:	andeq	fp, r1, r0, lsr #23
   1bb30:	andeq	fp, r1, r0, lsr #23
   1bb34:	andeq	fp, r1, r0, lsr #23
   1bb38:	andeq	fp, r1, r0, lsr #23
   1bb3c:	andeq	fp, r1, r0, lsr #23
   1bb40:	andeq	fp, r1, r0, lsr #23
   1bb44:	andeq	fp, r1, r8, asr #17
   1bb48:	sub	r2, r4, fp
   1bb4c:	add	r1, fp, #1
   1bb50:	cmp	r2, #1
   1bb54:	ble	1bb64 <flatcc_json_parser_space_ext@@Base+0xad8>
   1bb58:	ldrb	r2, [fp, #1]
   1bb5c:	cmp	r2, #10
   1bb60:	addeq	r1, fp, #2
   1bb64:	mov	fp, r1
   1bb68:	ldr	r2, [r5, #16]
   1bb6c:	str	fp, [r5, #4]
   1bb70:	add	r2, r2, #1
   1bb74:	str	r2, [r5, #16]
   1bb78:	cmp	r4, fp
   1bb7c:	beq	1b8fc <flatcc_json_parser_space_ext@@Base+0x870>
   1bb80:	ldrb	r1, [fp]
   1bb84:	cmp	r1, #32
   1bb88:	bls	1bad8 <flatcc_json_parser_space_ext@@Base+0xa4c>
   1bb8c:	b	1b8fc <flatcc_json_parser_space_ext@@Base+0x870>
   1bb90:	add	fp, fp, #1
   1bb94:	b	1bb68 <flatcc_json_parser_space_ext@@Base+0xadc>
   1bb98:	add	fp, fp, #1
   1bb9c:	b	1bb78 <flatcc_json_parser_space_ext@@Base+0xaec>
   1bba0:	ldr	r6, [r5, #24]
   1bba4:	cmp	r6, #0
   1bba8:	bne	1b2a0 <flatcc_json_parser_space_ext@@Base+0x214>
   1bbac:	b	1babc <flatcc_json_parser_space_ext@@Base+0xa30>
   1bbb0:	ldrb	r1, [r9, #2]
   1bbb4:	cmp	r1, #32
   1bbb8:	addhi	fp, r9, #2
   1bbbc:	movhi	r6, #0
   1bbc0:	bls	1b8c8 <flatcc_json_parser_space_ext@@Base+0x83c>
   1bbc4:	b	1b44c <flatcc_json_parser_space_ext@@Base+0x3c0>
   1bbc8:	mov	sl, fp
   1bbcc:	b	1b2b0 <flatcc_json_parser_space_ext@@Base+0x224>

0001bbd0 <flatcc_json_parser_string_escape@@Base>:
   1bbd0:	sub	ip, r2, r1
   1bbd4:	strd	r4, [sp, #-12]!
   1bbd8:	cmp	ip, #1
   1bbdc:	str	lr, [sp, #8]
   1bbe0:	ble	1bbf0 <flatcc_json_parser_string_escape@@Base+0x20>
   1bbe4:	ldrb	lr, [r1]
   1bbe8:	cmp	lr, #92	; 0x5c
   1bbec:	beq	1bc30 <flatcc_json_parser_string_escape@@Base+0x60>
   1bbf0:	mov	ip, #0
   1bbf4:	strb	ip, [r3]
   1bbf8:	ldr	r3, [r0, #24]
   1bbfc:	cmp	r3, ip
   1bc00:	bne	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1bc04:	ldr	r3, [r0, #4]
   1bc08:	mov	ip, #18
   1bc0c:	str	ip, [r0, #24]
   1bc10:	str	r1, [r0, #36]	; 0x24
   1bc14:	sub	r3, r1, r3
   1bc18:	add	r3, r3, #1
   1bc1c:	str	r3, [r0, #20]
   1bc20:	ldrd	r4, [sp]
   1bc24:	add	sp, sp, #8
   1bc28:	mov	r0, r2
   1bc2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc30:	ldrb	lr, [r1, #1]
   1bc34:	sub	lr, lr, #34	; 0x22
   1bc38:	cmp	lr, #86	; 0x56
   1bc3c:	ldrls	pc, [pc, lr, lsl #2]
   1bc40:	b	1bbf0 <flatcc_json_parser_string_escape@@Base+0x20>
   1bc44:	andeq	fp, r1, r8, lsr #28
   1bc48:	strdeq	fp, [r1], -r0
   1bc4c:	strdeq	fp, [r1], -r0
   1bc50:	strdeq	fp, [r1], -r0
   1bc54:	strdeq	fp, [r1], -r0
   1bc58:	strdeq	fp, [r1], -r0
   1bc5c:	strdeq	fp, [r1], -r0
   1bc60:	strdeq	fp, [r1], -r0
   1bc64:	strdeq	fp, [r1], -r0
   1bc68:	strdeq	fp, [r1], -r0
   1bc6c:	strdeq	fp, [r1], -r0
   1bc70:	strdeq	fp, [r1], -r0
   1bc74:	strdeq	fp, [r1], -r0
   1bc78:	andeq	fp, r1, r0, asr #28
   1bc7c:	strdeq	fp, [r1], -r0
   1bc80:	strdeq	fp, [r1], -r0
   1bc84:	strdeq	fp, [r1], -r0
   1bc88:	strdeq	fp, [r1], -r0
   1bc8c:	strdeq	fp, [r1], -r0
   1bc90:	strdeq	fp, [r1], -r0
   1bc94:	strdeq	fp, [r1], -r0
   1bc98:	strdeq	fp, [r1], -r0
   1bc9c:	strdeq	fp, [r1], -r0
   1bca0:	strdeq	fp, [r1], -r0
   1bca4:	strdeq	fp, [r1], -r0
   1bca8:	strdeq	fp, [r1], -r0
   1bcac:	strdeq	fp, [r1], -r0
   1bcb0:	strdeq	fp, [r1], -r0
   1bcb4:	strdeq	fp, [r1], -r0
   1bcb8:	strdeq	fp, [r1], -r0
   1bcbc:	strdeq	fp, [r1], -r0
   1bcc0:	strdeq	fp, [r1], -r0
   1bcc4:	strdeq	fp, [r1], -r0
   1bcc8:	strdeq	fp, [r1], -r0
   1bccc:	strdeq	fp, [r1], -r0
   1bcd0:	strdeq	fp, [r1], -r0
   1bcd4:	strdeq	fp, [r1], -r0
   1bcd8:	strdeq	fp, [r1], -r0
   1bcdc:	strdeq	fp, [r1], -r0
   1bce0:	strdeq	fp, [r1], -r0
   1bce4:	strdeq	fp, [r1], -r0
   1bce8:	strdeq	fp, [r1], -r0
   1bcec:	strdeq	fp, [r1], -r0
   1bcf0:	strdeq	fp, [r1], -r0
   1bcf4:	strdeq	fp, [r1], -r0
   1bcf8:	strdeq	fp, [r1], -r0
   1bcfc:	strdeq	fp, [r1], -r0
   1bd00:	strdeq	fp, [r1], -r0
   1bd04:	strdeq	fp, [r1], -r0
   1bd08:	strdeq	fp, [r1], -r0
   1bd0c:	strdeq	fp, [r1], -r0
   1bd10:	strdeq	fp, [r1], -r0
   1bd14:	strdeq	fp, [r1], -r0
   1bd18:	strdeq	fp, [r1], -r0
   1bd1c:	strdeq	fp, [r1], -r0
   1bd20:	strdeq	fp, [r1], -r0
   1bd24:	strdeq	fp, [r1], -r0
   1bd28:	strdeq	fp, [r1], -r0
   1bd2c:	andeq	fp, r1, r8, asr lr
   1bd30:	strdeq	fp, [r1], -r0
   1bd34:	strdeq	fp, [r1], -r0
   1bd38:	strdeq	fp, [r1], -r0
   1bd3c:	strdeq	fp, [r1], -r0
   1bd40:	strdeq	fp, [r1], -r0
   1bd44:	andeq	fp, r1, r0, ror lr
   1bd48:	strdeq	fp, [r1], -r0
   1bd4c:	strdeq	fp, [r1], -r0
   1bd50:	strdeq	fp, [r1], -r0
   1bd54:	andeq	fp, r1, r8, lsl #29
   1bd58:	strdeq	fp, [r1], -r0
   1bd5c:	strdeq	fp, [r1], -r0
   1bd60:	strdeq	fp, [r1], -r0
   1bd64:	strdeq	fp, [r1], -r0
   1bd68:	strdeq	fp, [r1], -r0
   1bd6c:	strdeq	fp, [r1], -r0
   1bd70:	strdeq	fp, [r1], -r0
   1bd74:	andeq	fp, r1, r0, lsr #29
   1bd78:	strdeq	fp, [r1], -r0
   1bd7c:	strdeq	fp, [r1], -r0
   1bd80:	strdeq	fp, [r1], -r0
   1bd84:			; <UNDEFINED> instruction: 0x0001beb8
   1bd88:	strdeq	fp, [r1], -r0
   1bd8c:	ldrdeq	fp, [r1], -r0
   1bd90:	andeq	fp, r1, r8, ror #29
   1bd94:	strdeq	fp, [r1], -r0
   1bd98:	strdeq	fp, [r1], -r0
   1bd9c:	andeq	fp, r1, r0, lsr #27
   1bda0:	mov	lr, #1
   1bda4:	cmp	ip, #3
   1bda8:	strb	lr, [r3]
   1bdac:	ble	1bfb8 <flatcc_json_parser_string_escape@@Base+0x3e8>
   1bdb0:	ldrb	ip, [r1, #2]
   1bdb4:	sub	lr, ip, #48	; 0x30
   1bdb8:	uxtb	r4, lr
   1bdbc:	cmp	r4, #9
   1bdc0:	lslls	ip, lr, #4
   1bdc4:	uxtbls	ip, ip
   1bdc8:	bls	1bde8 <flatcc_json_parser_string_escape@@Base+0x218>
   1bdcc:	orr	ip, ip, #32
   1bdd0:	sub	lr, ip, #97	; 0x61
   1bdd4:	cmp	lr, #5
   1bdd8:	bhi	1bbf0 <flatcc_json_parser_string_escape@@Base+0x20>
   1bddc:	sub	ip, ip, #87	; 0x57
   1bde0:	lsl	ip, ip, #4
   1bde4:	uxtb	ip, ip
   1bde8:	ldrb	lr, [r1, #3]
   1bdec:	sub	r4, lr, #48	; 0x30
   1bdf0:	uxtb	r4, r4
   1bdf4:	cmp	r4, #9
   1bdf8:	orrls	ip, r4, ip
   1bdfc:	bls	1be1c <flatcc_json_parser_string_escape@@Base+0x24c>
   1be00:	orr	lr, lr, #32
   1be04:	sub	r4, lr, #97	; 0x61
   1be08:	cmp	r4, #5
   1be0c:	bhi	1bbf0 <flatcc_json_parser_string_escape@@Base+0x20>
   1be10:	sub	lr, lr, #87	; 0x57
   1be14:	orr	ip, lr, ip
   1be18:	uxtb	ip, ip
   1be1c:	add	r2, r1, #4
   1be20:	strb	ip, [r3, #1]
   1be24:	b	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1be28:	mov	ip, #1
   1be2c:	mov	r0, #34	; 0x22
   1be30:	add	r2, r1, #2
   1be34:	strb	ip, [r3]
   1be38:	strb	r0, [r3, #1]
   1be3c:	b	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1be40:	mov	ip, #1
   1be44:	mov	r0, #47	; 0x2f
   1be48:	add	r2, r1, #2
   1be4c:	strb	ip, [r3]
   1be50:	strb	r0, [r3, #1]
   1be54:	b	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1be58:	mov	ip, #1
   1be5c:	mov	r0, #92	; 0x5c
   1be60:	add	r2, r1, #2
   1be64:	strb	ip, [r3]
   1be68:	strb	r0, [r3, #1]
   1be6c:	b	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1be70:	mov	ip, #1
   1be74:	mov	r0, #8
   1be78:	add	r2, r1, #2
   1be7c:	strb	ip, [r3]
   1be80:	strb	r0, [r3, #1]
   1be84:	b	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1be88:	mov	ip, #1
   1be8c:	mov	r0, #12
   1be90:	add	r2, r1, #2
   1be94:	strb	ip, [r3]
   1be98:	strb	r0, [r3, #1]
   1be9c:	b	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1bea0:	mov	ip, #1
   1bea4:	mov	r0, #10
   1bea8:	add	r2, r1, #2
   1beac:	strb	ip, [r3]
   1beb0:	strb	r0, [r3, #1]
   1beb4:	b	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1beb8:	mov	ip, #1
   1bebc:	mov	r0, #13
   1bec0:	add	r2, r1, #2
   1bec4:	strb	ip, [r3]
   1bec8:	strb	r0, [r3, #1]
   1becc:	b	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1bed0:	mov	ip, #1
   1bed4:	mov	r0, #9
   1bed8:	add	r2, r1, #2
   1bedc:	strb	ip, [r3]
   1bee0:	strb	r0, [r3, #1]
   1bee4:	b	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1bee8:	cmp	ip, #5
   1beec:	ble	1bbf0 <flatcc_json_parser_string_escape@@Base+0x20>
   1bef0:	ldrb	ip, [r1, #2]
   1bef4:	sub	lr, ip, #48	; 0x30
   1bef8:	uxtb	r4, lr
   1befc:	cmp	r4, #9
   1bf00:	lslls	ip, lr, #12
   1bf04:	uxthls	ip, ip
   1bf08:	bls	1bf28 <flatcc_json_parser_string_escape@@Base+0x358>
   1bf0c:	orr	ip, ip, #32
   1bf10:	sub	lr, ip, #97	; 0x61
   1bf14:	cmp	lr, #5
   1bf18:	bhi	1bbf0 <flatcc_json_parser_string_escape@@Base+0x20>
   1bf1c:	sub	ip, ip, #87	; 0x57
   1bf20:	lsl	ip, ip, #12
   1bf24:	and	ip, ip, #61440	; 0xf000
   1bf28:	ldrb	lr, [r1, #3]
   1bf2c:	sub	r4, lr, #48	; 0x30
   1bf30:	uxtb	r5, r4
   1bf34:	cmp	r5, #9
   1bf38:	bhi	1bfec <flatcc_json_parser_string_escape@@Base+0x41c>
   1bf3c:	uxth	r4, r4
   1bf40:	orr	ip, ip, r4, lsl #8
   1bf44:	sxth	ip, ip
   1bf48:	ldrb	lr, [r1, #4]
   1bf4c:	sub	r4, lr, #48	; 0x30
   1bf50:	uxtb	r5, r4
   1bf54:	cmp	r5, #9
   1bf58:	bhi	1c010 <flatcc_json_parser_string_escape@@Base+0x440>
   1bf5c:	orr	ip, ip, r4, lsl #4
   1bf60:	uxth	ip, ip
   1bf64:	ldrb	lr, [r1, #5]
   1bf68:	sub	r4, lr, #48	; 0x30
   1bf6c:	uxtb	r5, r4
   1bf70:	cmp	r5, #9
   1bf74:	orrls	r2, ip, r4
   1bf78:	uxthls	r2, r2
   1bf7c:	bls	1bf9c <flatcc_json_parser_string_escape@@Base+0x3cc>
   1bf80:	orr	lr, lr, #32
   1bf84:	sub	r4, lr, #97	; 0x61
   1bf88:	cmp	r4, #5
   1bf8c:	bhi	1bbf0 <flatcc_json_parser_string_escape@@Base+0x20>
   1bf90:	sub	r2, lr, #87	; 0x57
   1bf94:	orr	r2, ip, r2
   1bf98:	uxth	r2, r2
   1bf9c:	cmp	r2, #127	; 0x7f
   1bfa0:	bhi	1c030 <flatcc_json_parser_string_escape@@Base+0x460>
   1bfa4:	mov	r0, #1
   1bfa8:	strb	r0, [r3]
   1bfac:	strb	r2, [r3, #1]
   1bfb0:	add	r2, r1, #6
   1bfb4:	b	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1bfb8:	mov	ip, #0
   1bfbc:	strb	ip, [r3]
   1bfc0:	ldr	r3, [r0, #24]
   1bfc4:	cmp	r3, ip
   1bfc8:	bne	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1bfcc:	ldr	r3, [r0, #4]
   1bfd0:	mov	ip, #18
   1bfd4:	str	ip, [r0, #24]
   1bfd8:	str	r1, [r0, #36]	; 0x24
   1bfdc:	sub	r3, r1, r3
   1bfe0:	add	r3, r3, lr
   1bfe4:	str	r3, [r0, #20]
   1bfe8:	b	1bc20 <flatcc_json_parser_string_escape@@Base+0x50>
   1bfec:	orr	lr, lr, #32
   1bff0:	sub	r4, lr, #97	; 0x61
   1bff4:	cmp	r4, #5
   1bff8:	bhi	1bbf0 <flatcc_json_parser_string_escape@@Base+0x20>
   1bffc:	sub	lr, lr, #87	; 0x57
   1c000:	uxth	lr, lr
   1c004:	orr	ip, ip, lr, lsl #8
   1c008:	sxth	ip, ip
   1c00c:	b	1bf48 <flatcc_json_parser_string_escape@@Base+0x378>
   1c010:	orr	lr, lr, #32
   1c014:	sub	r4, lr, #97	; 0x61
   1c018:	cmp	r4, #5
   1c01c:	bhi	1bbf0 <flatcc_json_parser_string_escape@@Base+0x20>
   1c020:	sub	lr, lr, #87	; 0x57
   1c024:	orr	ip, ip, lr, lsl #4
   1c028:	uxth	ip, ip
   1c02c:	b	1bf64 <flatcc_json_parser_string_escape@@Base+0x394>
   1c030:	and	r0, r2, #63	; 0x3f
   1c034:	cmp	r2, #2048	; 0x800
   1c038:	lsr	ip, r2, #6
   1c03c:	orr	r0, r0, #128	; 0x80
   1c040:	mvn	lr, #127	; 0x7f
   1c044:	bcs	1c064 <flatcc_json_parser_string_escape@@Base+0x494>
   1c048:	mvn	ip, ip, lsl #26
   1c04c:	mov	r2, #2
   1c050:	mvn	ip, ip, lsr #26
   1c054:	strb	r2, [r3]
   1c058:	strb	r0, [r3, #2]
   1c05c:	strb	ip, [r3, #1]
   1c060:	b	1bfb0 <flatcc_json_parser_string_escape@@Base+0x3e0>
   1c064:	mvn	r4, #31
   1c068:	and	ip, ip, #63	; 0x3f
   1c06c:	strb	r0, [r3, #3]
   1c070:	orr	r2, r4, r2, lsr #12
   1c074:	orr	ip, lr, ip
   1c078:	mov	r0, #3
   1c07c:	strb	r0, [r3]
   1c080:	strb	r2, [r3, #1]
   1c084:	strb	ip, [r3, #2]
   1c088:	b	1bfb0 <flatcc_json_parser_string_escape@@Base+0x3e0>

0001c08c <flatcc_json_parser_skip_constant@@Base>:
   1c08c:	cmp	r1, r2
   1c090:	beq	1c270 <flatcc_json_parser_skip_constant@@Base+0x1e4>
   1c094:	push	{lr}		; (str lr, [sp, #-4]!)
   1c098:	ldrb	r3, [r1]
   1c09c:	sub	ip, r3, #95	; 0x5f
   1c0a0:	clz	ip, ip
   1c0a4:	lsr	ip, ip, #5
   1c0a8:	orrs	ip, ip, r3, lsr #7
   1c0ac:	bne	1c134 <flatcc_json_parser_skip_constant@@Base+0xa8>
   1c0b0:	sub	ip, r3, #48	; 0x30
   1c0b4:	cmp	r3, #46	; 0x2e
   1c0b8:	cmpne	ip, #9
   1c0bc:	bls	1c134 <flatcc_json_parser_skip_constant@@Base+0xa8>
   1c0c0:	orr	ip, r3, #32
   1c0c4:	sub	ip, ip, #97	; 0x61
   1c0c8:	cmp	ip, #25
   1c0cc:	bls	1c134 <flatcc_json_parser_skip_constant@@Base+0xa8>
   1c0d0:	sub	ip, r2, r1
   1c0d4:	cmp	ip, #1
   1c0d8:	ble	1c0e8 <flatcc_json_parser_skip_constant@@Base+0x5c>
   1c0dc:	cmp	r3, #32
   1c0e0:	bhi	1c260 <flatcc_json_parser_skip_constant@@Base+0x1d4>
   1c0e4:	beq	1c128 <flatcc_json_parser_skip_constant@@Base+0x9c>
   1c0e8:	cmp	r2, r1
   1c0ec:	beq	1c268 <flatcc_json_parser_skip_constant@@Base+0x1dc>
   1c0f0:	mov	lr, r1
   1c0f4:	ldrb	r3, [lr]
   1c0f8:	cmp	r3, #32
   1c0fc:	bne	1c14c <flatcc_json_parser_skip_constant@@Base+0xc0>
   1c100:	add	ip, lr, #1
   1c104:	b	1c114 <flatcc_json_parser_skip_constant@@Base+0x88>
   1c108:	ldrb	r3, [ip], #1
   1c10c:	cmp	r3, #32
   1c110:	bne	1c14c <flatcc_json_parser_skip_constant@@Base+0xc0>
   1c114:	cmp	r2, ip
   1c118:	mov	lr, ip
   1c11c:	bne	1c108 <flatcc_json_parser_skip_constant@@Base+0x7c>
   1c120:	mov	r2, lr
   1c124:	b	1c25c <flatcc_json_parser_skip_constant@@Base+0x1d0>
   1c128:	ldrb	r3, [r1, #1]
   1c12c:	cmp	r3, #32
   1c130:	bls	1c0e8 <flatcc_json_parser_skip_constant@@Base+0x5c>
   1c134:	add	ip, r1, #1
   1c138:	cmp	r2, ip
   1c13c:	beq	1c25c <flatcc_json_parser_skip_constant@@Base+0x1d0>
   1c140:	ldrb	r3, [r1, #1]
   1c144:	mov	r1, ip
   1c148:	b	1c09c <flatcc_json_parser_skip_constant@@Base+0x10>
   1c14c:	cmp	r3, #32
   1c150:	bhi	1c214 <flatcc_json_parser_skip_constant@@Base+0x188>
   1c154:	sub	r3, r3, #9
   1c158:	cmp	r3, #23
   1c15c:	ldrls	pc, [pc, r3, lsl #2]
   1c160:	b	1c234 <flatcc_json_parser_skip_constant@@Base+0x1a8>
   1c164:	andeq	ip, r1, ip, lsr #4
   1c168:	andeq	ip, r1, r4, lsr #4
   1c16c:	andeq	ip, r1, r4, lsr r2
   1c170:	andeq	ip, r1, r4, lsr r2
   1c174:	ldrdeq	ip, [r1], -r0
   1c178:	andeq	ip, r1, r4, lsr r2
   1c17c:	andeq	ip, r1, r4, lsr r2
   1c180:	andeq	ip, r1, r4, lsr r2
   1c184:	andeq	ip, r1, r4, lsr r2
   1c188:	andeq	ip, r1, r4, lsr r2
   1c18c:	andeq	ip, r1, r4, lsr r2
   1c190:	andeq	ip, r1, r4, lsr r2
   1c194:	andeq	ip, r1, r4, lsr r2
   1c198:	andeq	ip, r1, r4, lsr r2
   1c19c:	andeq	ip, r1, r4, lsr r2
   1c1a0:	andeq	ip, r1, r4, lsr r2
   1c1a4:	andeq	ip, r1, r4, lsr r2
   1c1a8:	andeq	ip, r1, r4, lsr r2
   1c1ac:	andeq	ip, r1, r4, lsr r2
   1c1b0:	andeq	ip, r1, r4, lsr r2
   1c1b4:	andeq	ip, r1, r4, lsr r2
   1c1b8:	andeq	ip, r1, r4, lsr r2
   1c1bc:	andeq	ip, r1, r4, lsr r2
   1c1c0:	andeq	ip, r1, r4, asr #3
   1c1c4:	cmp	r2, lr
   1c1c8:	bne	1c0f4 <flatcc_json_parser_skip_constant@@Base+0x68>
   1c1cc:	b	1c120 <flatcc_json_parser_skip_constant@@Base+0x94>
   1c1d0:	sub	r3, r2, lr
   1c1d4:	add	ip, lr, #1
   1c1d8:	cmp	r3, #1
   1c1dc:	ble	1c1ec <flatcc_json_parser_skip_constant@@Base+0x160>
   1c1e0:	ldrb	r3, [lr, #1]
   1c1e4:	cmp	r3, #10
   1c1e8:	addeq	ip, lr, #2
   1c1ec:	mov	lr, ip
   1c1f0:	ldr	r3, [r0, #16]
   1c1f4:	str	lr, [r0, #4]
   1c1f8:	add	r3, r3, #1
   1c1fc:	str	r3, [r0, #16]
   1c200:	cmp	r2, lr
   1c204:	beq	1c25c <flatcc_json_parser_skip_constant@@Base+0x1d0>
   1c208:	ldrb	r3, [lr]
   1c20c:	cmp	r3, #32
   1c210:	bls	1c154 <flatcc_json_parser_skip_constant@@Base+0xc8>
   1c214:	cmp	lr, r1
   1c218:	beq	1c260 <flatcc_json_parser_skip_constant@@Base+0x1d4>
   1c21c:	mov	r1, lr
   1c220:	b	1c09c <flatcc_json_parser_skip_constant@@Base+0x10>
   1c224:	add	lr, lr, #1
   1c228:	b	1c1f0 <flatcc_json_parser_skip_constant@@Base+0x164>
   1c22c:	add	lr, lr, #1
   1c230:	b	1c200 <flatcc_json_parser_skip_constant@@Base+0x174>
   1c234:	ldr	r3, [r0, #24]
   1c238:	cmp	r3, #0
   1c23c:	bne	1c25c <flatcc_json_parser_skip_constant@@Base+0x1d0>
   1c240:	ldr	r3, [r0, #4]
   1c244:	mov	r1, #5
   1c248:	str	lr, [r0, #36]	; 0x24
   1c24c:	str	r1, [r0, #24]
   1c250:	sub	lr, lr, r3
   1c254:	add	lr, lr, #1
   1c258:	str	lr, [r0, #20]
   1c25c:	mov	r1, r2
   1c260:	mov	r0, r1
   1c264:	pop	{pc}		; (ldr pc, [sp], #4)
   1c268:	mov	lr, r2
   1c26c:	b	1c120 <flatcc_json_parser_skip_constant@@Base+0x94>
   1c270:	mov	r0, r1
   1c274:	bx	lr

0001c278 <flatcc_json_parser_match_constant@@Base>:
   1c278:	sub	ip, r2, r1
   1c27c:	str	r4, [sp, #-8]!
   1c280:	cmp	ip, r3
   1c284:	str	lr, [sp, #4]
   1c288:	ble	1c364 <flatcc_json_parser_match_constant@@Base+0xec>
   1c28c:	ldr	ip, [r0, #12]
   1c290:	add	r4, r1, r3
   1c294:	cmp	ip, #0
   1c298:	bne	1c2f4 <flatcc_json_parser_match_constant@@Base+0x7c>
   1c29c:	ldrb	r3, [r1, r3]
   1c2a0:	cmp	r3, #32
   1c2a4:	beq	1c484 <flatcc_json_parser_match_constant@@Base+0x20c>
   1c2a8:	cmp	r3, #34	; 0x22
   1c2ac:	beq	1c564 <flatcc_json_parser_match_constant@@Base+0x2ec>
   1c2b0:	cmp	r3, #92	; 0x5c
   1c2b4:	bne	1c438 <flatcc_json_parser_match_constant@@Base+0x1c0>
   1c2b8:	ldr	r3, [sp, #8]
   1c2bc:	str	ip, [r3]
   1c2c0:	ldr	r3, [r0, #24]
   1c2c4:	cmp	r3, #0
   1c2c8:	movne	r3, r2
   1c2cc:	bne	1c374 <flatcc_json_parser_match_constant@@Base+0xfc>
   1c2d0:	ldr	r1, [r0, #4]
   1c2d4:	mov	ip, #18
   1c2d8:	mov	r3, r2
   1c2dc:	str	ip, [r0, #24]
   1c2e0:	str	r4, [r0, #36]	; 0x24
   1c2e4:	sub	r1, r4, r1
   1c2e8:	add	r1, r1, #1
   1c2ec:	str	r1, [r0, #20]
   1c2f0:	b	1c374 <flatcc_json_parser_match_constant@@Base+0xfc>
   1c2f4:	sub	ip, r2, r4
   1c2f8:	cmp	ip, #1
   1c2fc:	ble	1c310 <flatcc_json_parser_match_constant@@Base+0x98>
   1c300:	ldrb	r3, [r1, r3]
   1c304:	cmp	r3, #32
   1c308:	bhi	1c6ec <flatcc_json_parser_match_constant@@Base+0x474>
   1c30c:	beq	1c4d0 <flatcc_json_parser_match_constant@@Base+0x258>
   1c310:	cmp	r4, r2
   1c314:	mov	r3, r4
   1c318:	beq	1c348 <flatcc_json_parser_match_constant@@Base+0xd0>
   1c31c:	ldrb	ip, [r3]
   1c320:	cmp	ip, #32
   1c324:	bne	1c3c0 <flatcc_json_parser_match_constant@@Base+0x148>
   1c328:	add	lr, r3, #1
   1c32c:	b	1c33c <flatcc_json_parser_match_constant@@Base+0xc4>
   1c330:	ldrb	ip, [lr], #1
   1c334:	cmp	ip, #32
   1c338:	bne	1c3c0 <flatcc_json_parser_match_constant@@Base+0x148>
   1c33c:	cmp	r2, lr
   1c340:	mov	r3, lr
   1c344:	bne	1c330 <flatcc_json_parser_match_constant@@Base+0xb8>
   1c348:	ldr	r1, [sp, #8]
   1c34c:	mov	r2, #0
   1c350:	str	r2, [r1]
   1c354:	ldr	r4, [sp]
   1c358:	add	sp, sp, #4
   1c35c:	mov	r0, r3
   1c360:	pop	{pc}		; (ldr pc, [sp], #4)
   1c364:	mov	r3, r1
   1c368:	ldr	r1, [sp, #8]
   1c36c:	mov	r2, #0
   1c370:	str	r2, [r1]
   1c374:	ldr	r4, [sp]
   1c378:	add	sp, sp, #4
   1c37c:	mov	r0, r3
   1c380:	pop	{pc}		; (ldr pc, [sp], #4)
   1c384:	sub	ip, r2, r3
   1c388:	add	lr, r3, #1
   1c38c:	cmp	ip, #1
   1c390:	ble	1c3a0 <flatcc_json_parser_match_constant@@Base+0x128>
   1c394:	ldrb	ip, [r3, #1]
   1c398:	cmp	ip, #10
   1c39c:	addeq	lr, r3, #2
   1c3a0:	mov	r3, lr
   1c3a4:	ldr	ip, [r0, #16]
   1c3a8:	str	r3, [r0, #4]
   1c3ac:	add	ip, ip, #1
   1c3b0:	str	ip, [r0, #16]
   1c3b4:	cmp	r2, r3
   1c3b8:	beq	1c348 <flatcc_json_parser_match_constant@@Base+0xd0>
   1c3bc:	ldrb	ip, [r3]
   1c3c0:	cmp	ip, #32
   1c3c4:	bhi	1c4e8 <flatcc_json_parser_match_constant@@Base+0x270>
   1c3c8:	sub	ip, ip, #9
   1c3cc:	cmp	ip, #23
   1c3d0:	ldrls	pc, [pc, ip, lsl #2]
   1c3d4:	b	1c470 <flatcc_json_parser_match_constant@@Base+0x1f8>
   1c3d8:	andeq	ip, r1, r8, ror #8
   1c3dc:	andeq	ip, r1, r0, ror #8
   1c3e0:	andeq	ip, r1, r0, ror r4
   1c3e4:	andeq	ip, r1, r0, ror r4
   1c3e8:	andeq	ip, r1, r4, lsl #7
   1c3ec:	andeq	ip, r1, r0, ror r4
   1c3f0:	andeq	ip, r1, r0, ror r4
   1c3f4:	andeq	ip, r1, r0, ror r4
   1c3f8:	andeq	ip, r1, r0, ror r4
   1c3fc:	andeq	ip, r1, r0, ror r4
   1c400:	andeq	ip, r1, r0, ror r4
   1c404:	andeq	ip, r1, r0, ror r4
   1c408:	andeq	ip, r1, r0, ror r4
   1c40c:	andeq	ip, r1, r0, ror r4
   1c410:	andeq	ip, r1, r0, ror r4
   1c414:	andeq	ip, r1, r0, ror r4
   1c418:	andeq	ip, r1, r0, ror r4
   1c41c:	andeq	ip, r1, r0, ror r4
   1c420:	andeq	ip, r1, r0, ror r4
   1c424:	andeq	ip, r1, r0, ror r4
   1c428:	andeq	ip, r1, r0, ror r4
   1c42c:	andeq	ip, r1, r0, ror r4
   1c430:	andeq	ip, r1, r0, ror r4
   1c434:	andeq	ip, r1, r4, asr r4
   1c438:	mov	r3, r1
   1c43c:	ldr	r4, [sp]
   1c440:	mov	r0, r3
   1c444:	ldr	r2, [sp, #8]
   1c448:	add	sp, sp, #4
   1c44c:	str	ip, [r2]
   1c450:	pop	{pc}		; (ldr pc, [sp], #4)
   1c454:	cmp	r2, r3
   1c458:	bne	1c31c <flatcc_json_parser_match_constant@@Base+0xa4>
   1c45c:	b	1c348 <flatcc_json_parser_match_constant@@Base+0xd0>
   1c460:	add	r3, r3, #1
   1c464:	b	1c3a4 <flatcc_json_parser_match_constant@@Base+0x12c>
   1c468:	add	r3, r3, #1
   1c46c:	b	1c3b4 <flatcc_json_parser_match_constant@@Base+0x13c>
   1c470:	ldr	r1, [r0, #24]
   1c474:	cmp	r1, #0
   1c478:	beq	1c6c8 <flatcc_json_parser_match_constant@@Base+0x450>
   1c47c:	mov	r3, r2
   1c480:	b	1c348 <flatcc_json_parser_match_constant@@Base+0xd0>
   1c484:	add	r3, r4, #1
   1c488:	cmp	r2, r3
   1c48c:	beq	1c710 <flatcc_json_parser_match_constant@@Base+0x498>
   1c490:	ldrb	r1, [r4, #1]
   1c494:	cmp	r1, #32
   1c498:	bne	1c544 <flatcc_json_parser_match_constant@@Base+0x2cc>
   1c49c:	add	r3, r4, #2
   1c4a0:	b	1c4b0 <flatcc_json_parser_match_constant@@Base+0x238>
   1c4a4:	ldrb	r1, [r3], #1
   1c4a8:	cmp	r1, #32
   1c4ac:	bne	1c548 <flatcc_json_parser_match_constant@@Base+0x2d0>
   1c4b0:	cmp	r2, r3
   1c4b4:	mov	r4, r3
   1c4b8:	bne	1c4a4 <flatcc_json_parser_match_constant@@Base+0x22c>
   1c4bc:	ldr	r1, [sp, #8]
   1c4c0:	mov	r2, #0
   1c4c4:	mov	r3, r4
   1c4c8:	str	r2, [r1]
   1c4cc:	b	1c374 <flatcc_json_parser_match_constant@@Base+0xfc>
   1c4d0:	ldrb	ip, [r4, #1]
   1c4d4:	cmp	ip, #32
   1c4d8:	bls	1c310 <flatcc_json_parser_match_constant@@Base+0x98>
   1c4dc:	add	r3, r4, #1
   1c4e0:	cmp	r2, r3
   1c4e4:	beq	1c348 <flatcc_json_parser_match_constant@@Base+0xd0>
   1c4e8:	cmp	r4, r3
   1c4ec:	beq	1c514 <flatcc_json_parser_match_constant@@Base+0x29c>
   1c4f0:	sub	r2, ip, #95	; 0x5f
   1c4f4:	clz	r2, r2
   1c4f8:	lsr	r2, r2, #5
   1c4fc:	orrs	r2, r2, ip, lsr #7
   1c500:	bne	1c6b8 <flatcc_json_parser_match_constant@@Base+0x440>
   1c504:	orr	ip, ip, #32
   1c508:	sub	ip, ip, #97	; 0x61
   1c50c:	cmp	ip, #25
   1c510:	bls	1c6b8 <flatcc_json_parser_match_constant@@Base+0x440>
   1c514:	mov	r2, #0
   1c518:	ldr	r4, [sp]
   1c51c:	ldr	r0, [sp, #8]
   1c520:	add	sp, sp, #4
   1c524:	str	r2, [r0]
   1c528:	ldrb	r2, [r3]
   1c52c:	and	r0, r2, #223	; 0xdf
   1c530:	cmp	r2, #44	; 0x2c
   1c534:	cmpne	r0, #93	; 0x5d
   1c538:	movne	r3, r1
   1c53c:	mov	r0, r3
   1c540:	pop	{pc}		; (ldr pc, [sp], #4)
   1c544:	mov	r4, r3
   1c548:	cmp	r1, #34	; 0x22
   1c54c:	beq	1c564 <flatcc_json_parser_match_constant@@Base+0x2ec>
   1c550:	ldr	r1, [sp, #8]
   1c554:	mov	r2, #1
   1c558:	mov	r3, r4
   1c55c:	str	r2, [r1]
   1c560:	b	1c374 <flatcc_json_parser_match_constant@@Base+0xfc>
   1c564:	add	r3, r4, #1
   1c568:	cmn	r3, #1
   1c56c:	bge	1c580 <flatcc_json_parser_match_constant@@Base+0x308>
   1c570:	ldrb	r2, [r4, #1]
   1c574:	cmp	r2, #32
   1c578:	bhi	1c348 <flatcc_json_parser_match_constant@@Base+0xd0>
   1c57c:	beq	1c6fc <flatcc_json_parser_match_constant@@Base+0x484>
   1c580:	cmp	r3, #0
   1c584:	beq	1c5b4 <flatcc_json_parser_match_constant@@Base+0x33c>
   1c588:	ldrb	r1, [r3]
   1c58c:	cmp	r1, #32
   1c590:	bne	1c5e8 <flatcc_json_parser_match_constant@@Base+0x370>
   1c594:	add	r2, r3, #1
   1c598:	b	1c5a8 <flatcc_json_parser_match_constant@@Base+0x330>
   1c59c:	ldrb	r1, [r2], #1
   1c5a0:	cmp	r1, #32
   1c5a4:	bne	1c5e8 <flatcc_json_parser_match_constant@@Base+0x370>
   1c5a8:	cmp	r2, #0
   1c5ac:	mov	r3, r2
   1c5b0:	bne	1c59c <flatcc_json_parser_match_constant@@Base+0x324>
   1c5b4:	ldr	r1, [sp, #8]
   1c5b8:	mov	r2, #0
   1c5bc:	mov	r3, #0
   1c5c0:	str	r2, [r1]
   1c5c4:	b	1c354 <flatcc_json_parser_match_constant@@Base+0xdc>
   1c5c8:	add	r3, r3, #1
   1c5cc:	ldr	r2, [r0, #16]
   1c5d0:	str	r3, [r0, #4]
   1c5d4:	add	r2, r2, #1
   1c5d8:	str	r2, [r0, #16]
   1c5dc:	cmp	r3, #0
   1c5e0:	beq	1c5b4 <flatcc_json_parser_match_constant@@Base+0x33c>
   1c5e4:	ldrb	r1, [r3]
   1c5e8:	cmp	r1, #32
   1c5ec:	bhi	1c348 <flatcc_json_parser_match_constant@@Base+0xd0>
   1c5f0:	sub	r1, r1, #9
   1c5f4:	cmp	r1, #23
   1c5f8:	ldrls	pc, [pc, r1, lsl #2]
   1c5fc:	b	1c688 <flatcc_json_parser_match_constant@@Base+0x410>
   1c600:	andeq	ip, r1, r0, lsl #13
   1c604:	andeq	ip, r1, r8, asr #11
   1c608:	andeq	ip, r1, r8, lsl #13
   1c60c:	andeq	ip, r1, r8, lsl #13
   1c610:	andeq	ip, r1, r0, ror #12
   1c614:	andeq	ip, r1, r8, lsl #13
   1c618:	andeq	ip, r1, r8, lsl #13
   1c61c:	andeq	ip, r1, r8, lsl #13
   1c620:	andeq	ip, r1, r8, lsl #13
   1c624:	andeq	ip, r1, r8, lsl #13
   1c628:	andeq	ip, r1, r8, lsl #13
   1c62c:	andeq	ip, r1, r8, lsl #13
   1c630:	andeq	ip, r1, r8, lsl #13
   1c634:	andeq	ip, r1, r8, lsl #13
   1c638:	andeq	ip, r1, r8, lsl #13
   1c63c:	andeq	ip, r1, r8, lsl #13
   1c640:	andeq	ip, r1, r8, lsl #13
   1c644:	andeq	ip, r1, r8, lsl #13
   1c648:	andeq	ip, r1, r8, lsl #13
   1c64c:	andeq	ip, r1, r8, lsl #13
   1c650:	andeq	ip, r1, r8, lsl #13
   1c654:	andeq	ip, r1, r8, lsl #13
   1c658:	andeq	ip, r1, r8, lsl #13
   1c65c:	andeq	ip, r1, r8, lsl #11
   1c660:	cmn	r3, #1
   1c664:	add	r2, r3, #1
   1c668:	bge	1c678 <flatcc_json_parser_match_constant@@Base+0x400>
   1c66c:	ldrb	r1, [r3, #1]
   1c670:	cmp	r1, #10
   1c674:	addeq	r2, r3, #2
   1c678:	mov	r3, r2
   1c67c:	b	1c5cc <flatcc_json_parser_match_constant@@Base+0x354>
   1c680:	add	r3, r3, #1
   1c684:	b	1c5dc <flatcc_json_parser_match_constant@@Base+0x364>
   1c688:	ldr	r1, [r0, #24]
   1c68c:	cmp	r1, #0
   1c690:	bne	1c5b4 <flatcc_json_parser_match_constant@@Base+0x33c>
   1c694:	ldr	r2, [r0, #4]
   1c698:	mov	ip, #5
   1c69c:	str	ip, [r0, #24]
   1c6a0:	str	r3, [r0, #36]	; 0x24
   1c6a4:	sub	r2, r3, r2
   1c6a8:	mov	r3, r1
   1c6ac:	add	r2, r2, #1
   1c6b0:	str	r2, [r0, #20]
   1c6b4:	b	1c348 <flatcc_json_parser_match_constant@@Base+0xd0>
   1c6b8:	ldr	r1, [sp, #8]
   1c6bc:	mov	r2, #1
   1c6c0:	str	r2, [r1]
   1c6c4:	b	1c374 <flatcc_json_parser_match_constant@@Base+0xfc>
   1c6c8:	ldr	r1, [r0, #4]
   1c6cc:	mov	ip, #5
   1c6d0:	str	ip, [r0, #24]
   1c6d4:	str	r3, [r0, #36]	; 0x24
   1c6d8:	sub	r1, r3, r1
   1c6dc:	mov	r3, r2
   1c6e0:	add	r1, r1, #1
   1c6e4:	str	r1, [r0, #20]
   1c6e8:	b	1c348 <flatcc_json_parser_match_constant@@Base+0xd0>
   1c6ec:	cmp	r4, r2
   1c6f0:	beq	1c47c <flatcc_json_parser_match_constant@@Base+0x204>
   1c6f4:	mov	r3, r4
   1c6f8:	b	1c514 <flatcc_json_parser_match_constant@@Base+0x29c>
   1c6fc:	ldrb	r2, [r4, #2]
   1c700:	cmp	r2, #32
   1c704:	addhi	r3, r4, #2
   1c708:	bls	1c580 <flatcc_json_parser_match_constant@@Base+0x308>
   1c70c:	b	1c348 <flatcc_json_parser_match_constant@@Base+0xd0>
   1c710:	mov	r4, r2
   1c714:	b	1c4bc <flatcc_json_parser_match_constant@@Base+0x244>

0001c718 <flatcc_json_parser_double@@Base>:
   1c718:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c71c:	cmp	r1, r2
   1c720:	mov	r5, r2
   1c724:	strd	r6, [sp, #8]
   1c728:	strd	r8, [sp, #16]
   1c72c:	mov	r8, #0
   1c730:	mov	r9, #0
   1c734:	str	sl, [sp, #24]
   1c738:	str	lr, [sp, #28]
   1c73c:	strd	r8, [r3]
   1c740:	beq	1c800 <flatcc_json_parser_double@@Base+0xe8>
   1c744:	mov	r6, r3
   1c748:	ldrb	r3, [r1]
   1c74c:	mov	r4, r1
   1c750:	mov	r7, r0
   1c754:	cmp	r3, #45	; 0x2d
   1c758:	addeq	r3, r1, #1
   1c75c:	movne	r3, r1
   1c760:	sub	r2, r2, r3
   1c764:	cmp	r2, #1
   1c768:	ble	1c780 <flatcc_json_parser_double@@Base+0x68>
   1c76c:	ldrb	r2, [r3]
   1c770:	cmp	r2, #46	; 0x2e
   1c774:	beq	1c82c <flatcc_json_parser_double@@Base+0x114>
   1c778:	cmp	r2, #48	; 0x30
   1c77c:	beq	1c820 <flatcc_json_parser_double@@Base+0x108>
   1c780:	mov	r2, r6
   1c784:	sub	r1, r5, r4
   1c788:	mov	r0, r4
   1c78c:	bl	1a548 <grisu3_diy_fp_encode_double@@Base+0x5a4>
   1c790:	cmp	r4, r0
   1c794:	cmpne	r0, #0
   1c798:	mov	r3, r0
   1c79c:	bne	1c7e4 <flatcc_json_parser_double@@Base+0xcc>
   1c7a0:	vldr	d7, [r6]
   1c7a4:	vldr	d6, [pc, #156]	; 1c848 <flatcc_json_parser_double@@Base+0x130>
   1c7a8:	ldr	r3, [r7, #24]
   1c7ac:	vabs.f64	d7, d7
   1c7b0:	vcmp.f64	d7, d6
   1c7b4:	vmrs	APSR_nzcv, fpscr
   1c7b8:	bgt	1c808 <flatcc_json_parser_double@@Base+0xf0>
   1c7bc:	cmp	r3, #0
   1c7c0:	bne	1c800 <flatcc_json_parser_double@@Base+0xe8>
   1c7c4:	ldr	r2, [r7, #4]
   1c7c8:	mov	r3, r5
   1c7cc:	mov	r1, #6
   1c7d0:	str	r1, [r7, #24]
   1c7d4:	str	r4, [r7, #36]	; 0x24
   1c7d8:	sub	r4, r4, r2
   1c7dc:	add	r4, r4, #1
   1c7e0:	str	r4, [r7, #20]
   1c7e4:	ldrd	r4, [sp]
   1c7e8:	mov	r0, r3
   1c7ec:	ldrd	r6, [sp, #8]
   1c7f0:	ldrd	r8, [sp, #16]
   1c7f4:	ldr	sl, [sp, #24]
   1c7f8:	add	sp, sp, #28
   1c7fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c800:	mov	r3, r5
   1c804:	b	1c7e4 <flatcc_json_parser_double@@Base+0xcc>
   1c808:	cmp	r3, #0
   1c80c:	bne	1c800 <flatcc_json_parser_double@@Base+0xe8>
   1c810:	mov	r1, #7
   1c814:	mov	r3, r5
   1c818:	ldr	r2, [r7, #4]
   1c81c:	b	1c7d0 <flatcc_json_parser_double@@Base+0xb8>
   1c820:	ldrb	r3, [r3, #1]
   1c824:	cmp	r3, #48	; 0x30
   1c828:	bne	1c780 <flatcc_json_parser_double@@Base+0x68>
   1c82c:	ldr	r3, [r7, #24]
   1c830:	cmp	r3, #0
   1c834:	bne	1c800 <flatcc_json_parser_double@@Base+0xe8>
   1c838:	mov	r1, #6
   1c83c:	mov	r3, r5
   1c840:	ldr	r2, [r7, #4]
   1c844:	b	1c7d0 <flatcc_json_parser_double@@Base+0xb8>
   1c848:			; <UNDEFINED> instruction: 0xffffffff
   1c84c:	svcvc	0x00efffff

0001c850 <flatcc_json_parser_float@@Base>:
   1c850:	mov	ip, #0
   1c854:	cmp	r1, r2
   1c858:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c85c:	mov	r5, r2
   1c860:	strd	r6, [sp, #8]
   1c864:	str	lr, [sp, #16]
   1c868:	sub	sp, sp, #12
   1c86c:	str	ip, [r3]
   1c870:	beq	1c934 <flatcc_json_parser_float@@Base+0xe4>
   1c874:	mov	r6, r3
   1c878:	ldrb	r3, [r1]
   1c87c:	mov	r4, r1
   1c880:	mov	r7, r0
   1c884:	cmp	r3, #45	; 0x2d
   1c888:	addeq	r3, r1, #1
   1c88c:	movne	r3, r1
   1c890:	sub	r2, r2, r3
   1c894:	cmp	r2, #1
   1c898:	ble	1c8b0 <flatcc_json_parser_float@@Base+0x60>
   1c89c:	ldrb	r2, [r3]
   1c8a0:	cmp	r2, #46	; 0x2e
   1c8a4:	beq	1c948 <flatcc_json_parser_float@@Base+0xf8>
   1c8a8:	cmp	r2, #48	; 0x30
   1c8ac:	beq	1c93c <flatcc_json_parser_float@@Base+0xec>
   1c8b0:	mov	r2, sp
   1c8b4:	sub	r1, r5, r4
   1c8b8:	mov	r0, r4
   1c8bc:	bl	1a548 <grisu3_diy_fp_encode_double@@Base+0x5a4>
   1c8c0:	vldr	d6, [sp]
   1c8c4:	vldr	s14, [pc, #200]	; 1c994 <flatcc_json_parser_float@@Base+0x144>
   1c8c8:	vcvt.f32.f64	s15, d6
   1c8cc:	vabs.f32	s11, s15
   1c8d0:	vstr	s15, [r6]
   1c8d4:	vcmp.f32	s11, s14
   1c8d8:	vmrs	APSR_nzcv, fpscr
   1c8dc:	bgt	1c900 <flatcc_json_parser_float@@Base+0xb0>
   1c8e0:	cmp	r4, r0
   1c8e4:	cmpne	r0, #0
   1c8e8:	beq	1c978 <flatcc_json_parser_float@@Base+0x128>
   1c8ec:	add	sp, sp, #12
   1c8f0:	ldrd	r4, [sp]
   1c8f4:	ldrd	r6, [sp, #8]
   1c8f8:	add	sp, sp, #16
   1c8fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c900:	vcmpe.f64	d6, #0.0
   1c904:	vldr	s15, [pc, #140]	; 1c998 <flatcc_json_parser_float@@Base+0x148>
   1c908:	vldr	s14, [pc, #140]	; 1c99c <flatcc_json_parser_float@@Base+0x14c>
   1c90c:	ldr	r3, [r7, #24]
   1c910:	vmrs	APSR_nzcv, fpscr
   1c914:	vmovpl.f32	s15, s14
   1c918:	cmp	r3, #0
   1c91c:	vstr	s15, [r6]
   1c920:	bne	1c934 <flatcc_json_parser_float@@Base+0xe4>
   1c924:	mov	r2, #7
   1c928:	mov	r0, r5
   1c92c:	ldr	r3, [r7, #4]
   1c930:	b	1c960 <flatcc_json_parser_float@@Base+0x110>
   1c934:	mov	r0, r5
   1c938:	b	1c8ec <flatcc_json_parser_float@@Base+0x9c>
   1c93c:	ldrb	r3, [r3, #1]
   1c940:	cmp	r3, #48	; 0x30
   1c944:	bne	1c8b0 <flatcc_json_parser_float@@Base+0x60>
   1c948:	ldr	r3, [r7, #24]
   1c94c:	cmp	r3, #0
   1c950:	bne	1c934 <flatcc_json_parser_float@@Base+0xe4>
   1c954:	ldr	r3, [r7, #4]
   1c958:	mov	r2, #6
   1c95c:	mov	r0, r5
   1c960:	str	r2, [r7, #24]
   1c964:	str	r4, [r7, #36]	; 0x24
   1c968:	sub	r4, r4, r3
   1c96c:	add	r4, r4, #1
   1c970:	str	r4, [r7, #20]
   1c974:	b	1c8ec <flatcc_json_parser_float@@Base+0x9c>
   1c978:	ldr	r3, [r7, #24]
   1c97c:	cmp	r3, #0
   1c980:	bne	1c934 <flatcc_json_parser_float@@Base+0xe4>
   1c984:	mov	r0, r5
   1c988:	mov	r2, #6
   1c98c:	ldr	r3, [r7, #4]
   1c990:	b	1c960 <flatcc_json_parser_float@@Base+0x110>
   1c994:	svcvc	0x007fffff
   1c998:			; <UNDEFINED> instruction: 0xff800000
   1c99c:	svcvc	0x00800000

0001c9a0 <flatcc_json_parser_generic_json@@Base>:
   1c9a0:	cmp	r1, r2
   1c9a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c9a8:	mov	r4, r2
   1c9ac:	strd	r6, [sp, #8]
   1c9b0:	strd	r8, [sp, #16]
   1c9b4:	strd	sl, [sp, #24]
   1c9b8:	str	lr, [sp, #32]
   1c9bc:	sub	sp, sp, #524	; 0x20c
   1c9c0:	beq	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1c9c4:	ldrb	r3, [r1]
   1c9c8:	add	r8, sp, #8
   1c9cc:	mov	r5, r1
   1c9d0:	mov	r6, r0
   1c9d4:	mov	sl, #125	; 0x7d
   1c9d8:	mov	r7, r8
   1c9dc:	mov	r9, #17
   1c9e0:	cmp	r7, r8
   1c9e4:	beq	1ca88 <flatcc_json_parser_generic_json@@Base+0xe8>
   1c9e8:	ldrb	r2, [r7, #-1]
   1c9ec:	cmp	r2, #125	; 0x7d
   1c9f0:	beq	1d7d8 <flatcc_json_parser_generic_json@@Base+0xe38>
   1c9f4:	cmp	r3, #57	; 0x39
   1c9f8:	bls	1ca90 <flatcc_json_parser_generic_json@@Base+0xf0>
   1c9fc:	cmp	r3, #91	; 0x5b
   1ca00:	beq	1d394 <flatcc_json_parser_generic_json@@Base+0x9f4>
   1ca04:	cmp	r3, #123	; 0x7b
   1ca08:	bne	1cc3c <flatcc_json_parser_generic_json@@Base+0x29c>
   1ca0c:	add	r3, sp, #520	; 0x208
   1ca10:	cmp	r7, r3
   1ca14:	beq	1e024 <flatcc_json_parser_generic_json@@Base+0x1684>
   1ca18:	add	r1, r5, #1
   1ca1c:	strb	sl, [r7], #1
   1ca20:	sub	r3, r4, r1
   1ca24:	cmp	r3, #1
   1ca28:	ble	1ca4c <flatcc_json_parser_generic_json@@Base+0xac>
   1ca2c:	ldrb	r3, [r5, #1]
   1ca30:	cmp	r3, #32
   1ca34:	bhi	1d8f8 <flatcc_json_parser_generic_json@@Base+0xf58>
   1ca38:	bne	1ca4c <flatcc_json_parser_generic_json@@Base+0xac>
   1ca3c:	ldrb	r3, [r5, #2]
   1ca40:	cmp	r3, #32
   1ca44:	addhi	r5, r5, #2
   1ca48:	bhi	1d8fc <flatcc_json_parser_generic_json@@Base+0xf5c>
   1ca4c:	cmp	r1, r4
   1ca50:	beq	1ca80 <flatcc_json_parser_generic_json@@Base+0xe0>
   1ca54:	ldrb	r3, [r1]
   1ca58:	cmp	r3, #32
   1ca5c:	bne	1d4a8 <flatcc_json_parser_generic_json@@Base+0xb08>
   1ca60:	add	r2, r1, #1
   1ca64:	b	1ca74 <flatcc_json_parser_generic_json@@Base+0xd4>
   1ca68:	ldrb	r3, [r2], #1
   1ca6c:	cmp	r3, #32
   1ca70:	bne	1d4a8 <flatcc_json_parser_generic_json@@Base+0xb08>
   1ca74:	cmp	r4, r2
   1ca78:	mov	r1, r2
   1ca7c:	bne	1ca68 <flatcc_json_parser_generic_json@@Base+0xc8>
   1ca80:	mov	r4, r1
   1ca84:	b	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1ca88:	cmp	r3, #57	; 0x39
   1ca8c:	bhi	1d1b0 <flatcc_json_parser_generic_json@@Base+0x810>
   1ca90:	cmp	r3, #48	; 0x30
   1ca94:	bcs	1d694 <flatcc_json_parser_generic_json@@Base+0xcf4>
   1ca98:	cmp	r3, #34	; 0x22
   1ca9c:	bne	1cc34 <flatcc_json_parser_generic_json@@Base+0x294>
   1caa0:	add	r1, r5, #1
   1caa4:	cmp	r4, r1
   1caa8:	beq	1de50 <flatcc_json_parser_generic_json@@Base+0x14b0>
   1caac:	ldrb	r3, [r5, #1]
   1cab0:	cmp	r3, #34	; 0x22
   1cab4:	beq	1cb44 <flatcc_json_parser_generic_json@@Base+0x1a4>
   1cab8:	mov	r5, #20
   1cabc:	cmp	r4, r1
   1cac0:	beq	1d490 <flatcc_json_parser_generic_json@@Base+0xaf0>
   1cac4:	cmp	r3, #92	; 0x5c
   1cac8:	cmpne	r3, #31
   1cacc:	addhi	r0, r1, #1
   1cad0:	bls	1d454 <flatcc_json_parser_generic_json@@Base+0xab4>
   1cad4:	cmp	r4, r0
   1cad8:	mov	r1, r0
   1cadc:	beq	1d490 <flatcc_json_parser_generic_json@@Base+0xaf0>
   1cae0:	ldrb	r3, [r0]
   1cae4:	add	r0, r0, #1
   1cae8:	cmp	r3, #34	; 0x22
   1caec:	cmpne	r3, #31
   1caf0:	movhi	r2, #1
   1caf4:	movls	r2, #0
   1caf8:	cmp	r3, #92	; 0x5c
   1cafc:	moveq	r2, #0
   1cb00:	andne	r2, r2, #1
   1cb04:	cmp	r2, #0
   1cb08:	bne	1cad4 <flatcc_json_parser_generic_json@@Base+0x134>
   1cb0c:	cmp	r3, #31
   1cb10:	bls	1d45c <flatcc_json_parser_generic_json@@Base+0xabc>
   1cb14:	cmp	r3, #34	; 0x22
   1cb18:	beq	1cb44 <flatcc_json_parser_generic_json@@Base+0x1a4>
   1cb1c:	add	r3, sp, #4
   1cb20:	mov	r2, r4
   1cb24:	mov	r0, r6
   1cb28:	bl	1bbd0 <flatcc_json_parser_string_escape@@Base>
   1cb2c:	cmp	r4, r0
   1cb30:	mov	r1, r0
   1cb34:	beq	1de50 <flatcc_json_parser_generic_json@@Base+0x14b0>
   1cb38:	ldrb	r3, [r0]
   1cb3c:	cmp	r3, #34	; 0x22
   1cb40:	bne	1cabc <flatcc_json_parser_generic_json@@Base+0x11c>
   1cb44:	add	r0, r1, #1
   1cb48:	cmp	r4, r0
   1cb4c:	beq	1d7d0 <flatcc_json_parser_generic_json@@Base+0xe30>
   1cb50:	cmp	r7, r8
   1cb54:	beq	1cc00 <flatcc_json_parser_generic_json@@Base+0x260>
   1cb58:	ldrb	r3, [r7, #-1]
   1cb5c:	sub	fp, r7, #1
   1cb60:	sub	r2, r4, r0
   1cb64:	cmp	r3, #93	; 0x5d
   1cb68:	beq	1cc6c <flatcc_json_parser_generic_json@@Base+0x2cc>
   1cb6c:	cmp	r2, #1
   1cb70:	ble	1cb84 <flatcc_json_parser_generic_json@@Base+0x1e4>
   1cb74:	ldrb	r3, [r0]
   1cb78:	cmp	r3, #32
   1cb7c:	bhi	1cb94 <flatcc_json_parser_generic_json@@Base+0x1f4>
   1cb80:	beq	1cce8 <flatcc_json_parser_generic_json@@Base+0x348>
   1cb84:	mov	r1, r0
   1cb88:	mov	r2, r4
   1cb8c:	mov	r0, r6
   1cb90:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   1cb94:	cmp	r4, r0
   1cb98:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1cb9c:	ldrb	r3, [r0]
   1cba0:	cmp	r3, #44	; 0x2c
   1cba4:	beq	1ccfc <flatcc_json_parser_generic_json@@Base+0x35c>
   1cba8:	cmp	r3, #125	; 0x7d
   1cbac:	beq	1cf44 <flatcc_json_parser_generic_json@@Base+0x5a4>
   1cbb0:	ldr	r3, [r6, #24]
   1cbb4:	cmp	r3, #0
   1cbb8:	beq	1ccdc <flatcc_json_parser_generic_json@@Base+0x33c>
   1cbbc:	mov	r0, r4
   1cbc0:	cmp	fp, r8
   1cbc4:	beq	1cc00 <flatcc_json_parser_generic_json@@Base+0x260>
   1cbc8:	ldrb	r2, [fp, #-1]
   1cbcc:	ldr	r3, [r6, #24]
   1cbd0:	cmp	r2, #93	; 0x5d
   1cbd4:	moveq	r2, #9
   1cbd8:	movne	r2, #10
   1cbdc:	cmp	r3, #0
   1cbe0:	bne	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1cbe4:	ldr	r3, [r6, #4]
   1cbe8:	str	r2, [r6, #24]
   1cbec:	str	r0, [r6, #36]	; 0x24
   1cbf0:	sub	r3, r0, r3
   1cbf4:	mov	r0, r4
   1cbf8:	add	r3, r3, #1
   1cbfc:	str	r3, [r6, #20]
   1cc00:	add	sp, sp, #524	; 0x20c
   1cc04:	ldrd	r4, [sp]
   1cc08:	ldrd	r6, [sp, #8]
   1cc0c:	ldrd	r8, [sp, #16]
   1cc10:	ldrd	sl, [sp, #24]
   1cc14:	add	sp, sp, #32
   1cc18:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc1c:	cmp	r3, #57	; 0x39
   1cc20:	bhi	1c9fc <flatcc_json_parser_generic_json@@Base+0x5c>
   1cc24:	cmp	r3, #48	; 0x30
   1cc28:	bcs	1d694 <flatcc_json_parser_generic_json@@Base+0xcf4>
   1cc2c:	cmp	r3, #34	; 0x22
   1cc30:	beq	1d7a4 <flatcc_json_parser_generic_json@@Base+0xe04>
   1cc34:	cmp	r3, #45	; 0x2d
   1cc38:	beq	1d694 <flatcc_json_parser_generic_json@@Base+0xcf4>
   1cc3c:	mov	r2, r4
   1cc40:	mov	r1, r5
   1cc44:	mov	r0, r6
   1cc48:	bl	1c08c <flatcc_json_parser_skip_constant@@Base>
   1cc4c:	cmp	r0, r5
   1cc50:	bne	1cb48 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1cc54:	ldr	r3, [r6, #24]
   1cc58:	cmp	r3, #0
   1cc5c:	bne	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1cc60:	mov	r2, #5
   1cc64:	ldr	r3, [r6, #4]
   1cc68:	b	1e038 <flatcc_json_parser_generic_json@@Base+0x1698>
   1cc6c:	cmp	r2, #1
   1cc70:	ble	1cc84 <flatcc_json_parser_generic_json@@Base+0x2e4>
   1cc74:	ldrb	r3, [r0]
   1cc78:	cmp	r3, #32
   1cc7c:	bhi	1cc94 <flatcc_json_parser_generic_json@@Base+0x2f4>
   1cc80:	beq	1d0b8 <flatcc_json_parser_generic_json@@Base+0x718>
   1cc84:	mov	r1, r0
   1cc88:	mov	r2, r4
   1cc8c:	mov	r0, r6
   1cc90:	bl	1b08c <flatcc_json_parser_space_ext@@Base>
   1cc94:	cmp	r4, r0
   1cc98:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1cc9c:	ldrb	r3, [r0]
   1cca0:	cmp	r3, #44	; 0x2c
   1cca4:	beq	1d0cc <flatcc_json_parser_generic_json@@Base+0x72c>
   1cca8:	cmp	r3, #93	; 0x5d
   1ccac:	beq	1d218 <flatcc_json_parser_generic_json@@Base+0x878>
   1ccb0:	ldr	r3, [r6, #24]
   1ccb4:	cmp	r3, #0
   1ccb8:	bne	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1ccbc:	ldr	r1, [r6, #4]
   1ccc0:	mov	r3, #9
   1ccc4:	sub	r1, r0, r1
   1ccc8:	str	r3, [r6, #24]
   1cccc:	add	r1, r1, #1
   1ccd0:	str	r1, [r6, #20]
   1ccd4:	str	r0, [r6, #36]	; 0x24
   1ccd8:	b	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1ccdc:	mov	r3, #10
   1cce0:	ldr	r1, [r6, #4]
   1cce4:	b	1ccc4 <flatcc_json_parser_generic_json@@Base+0x324>
   1cce8:	ldrb	r3, [r0, #1]
   1ccec:	cmp	r3, #32
   1ccf0:	addhi	r0, r0, #1
   1ccf4:	bls	1cb84 <flatcc_json_parser_generic_json@@Base+0x1e4>
   1ccf8:	b	1cb94 <flatcc_json_parser_generic_json@@Base+0x1f4>
   1ccfc:	add	r5, r0, #1
   1cd00:	sub	r3, r4, r5
   1cd04:	cmp	r3, #1
   1cd08:	ble	1cd1c <flatcc_json_parser_generic_json@@Base+0x37c>
   1cd0c:	ldrb	r3, [r0, #1]
   1cd10:	cmp	r3, #32
   1cd14:	bhi	1d0a4 <flatcc_json_parser_generic_json@@Base+0x704>
   1cd18:	beq	1d094 <flatcc_json_parser_generic_json@@Base+0x6f4>
   1cd1c:	cmp	r4, r5
   1cd20:	beq	1cd50 <flatcc_json_parser_generic_json@@Base+0x3b0>
   1cd24:	ldrb	r3, [r5]
   1cd28:	cmp	r3, #32
   1cd2c:	bne	1cd7c <flatcc_json_parser_generic_json@@Base+0x3dc>
   1cd30:	add	r2, r5, #1
   1cd34:	b	1cd44 <flatcc_json_parser_generic_json@@Base+0x3a4>
   1cd38:	ldrb	r3, [r2], #1
   1cd3c:	cmp	r3, #32
   1cd40:	bne	1cd7c <flatcc_json_parser_generic_json@@Base+0x3dc>
   1cd44:	cmp	r4, r2
   1cd48:	mov	r5, r2
   1cd4c:	bne	1cd38 <flatcc_json_parser_generic_json@@Base+0x398>
   1cd50:	ldr	r3, [r6, #24]
   1cd54:	cmp	r3, #0
   1cd58:	bne	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1cd5c:	ldr	r3, [r6, #4]
   1cd60:	mov	r2, #10
   1cd64:	sub	r3, r5, r3
   1cd68:	str	r2, [r6, #24]
   1cd6c:	add	r3, r3, #1
   1cd70:	str	r3, [r6, #20]
   1cd74:	str	r5, [r6, #36]	; 0x24
   1cd78:	b	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1cd7c:	cmp	r3, #32
   1cd80:	bhi	1ce40 <flatcc_json_parser_generic_json@@Base+0x4a0>
   1cd84:	sub	r3, r3, #9
   1cd88:	cmp	r3, #23
   1cd8c:	ldrls	pc, [pc, r3, lsl #2]
   1cd90:	b	1cf18 <flatcc_json_parser_generic_json@@Base+0x578>
   1cd94:	andeq	ip, r1, r0, lsl pc
   1cd98:	andeq	ip, r1, r8, lsl lr
   1cd9c:	andeq	ip, r1, r8, lsl pc
   1cda0:	andeq	ip, r1, r8, lsl pc
   1cda4:	strdeq	ip, [r1], -r4
   1cda8:	andeq	ip, r1, r8, lsl pc
   1cdac:	andeq	ip, r1, r8, lsl pc
   1cdb0:	andeq	ip, r1, r8, lsl pc
   1cdb4:	andeq	ip, r1, r8, lsl pc
   1cdb8:	andeq	ip, r1, r8, lsl pc
   1cdbc:	andeq	ip, r1, r8, lsl pc
   1cdc0:	andeq	ip, r1, r8, lsl pc
   1cdc4:	andeq	ip, r1, r8, lsl pc
   1cdc8:	andeq	ip, r1, r8, lsl pc
   1cdcc:	andeq	ip, r1, r8, lsl pc
   1cdd0:	andeq	ip, r1, r8, lsl pc
   1cdd4:	andeq	ip, r1, r8, lsl pc
   1cdd8:	andeq	ip, r1, r8, lsl pc
   1cddc:	andeq	ip, r1, r8, lsl pc
   1cde0:	andeq	ip, r1, r8, lsl pc
   1cde4:	andeq	ip, r1, r8, lsl pc
   1cde8:	andeq	ip, r1, r8, lsl pc
   1cdec:	andeq	ip, r1, r8, lsl pc
   1cdf0:	andeq	ip, r1, ip, lsl sp
   1cdf4:	sub	r3, r4, r5
   1cdf8:	add	r2, r5, #1
   1cdfc:	cmp	r3, #1
   1ce00:	ble	1ce10 <flatcc_json_parser_generic_json@@Base+0x470>
   1ce04:	ldrb	r3, [r5, #1]
   1ce08:	cmp	r3, #10
   1ce0c:	addeq	r2, r5, #2
   1ce10:	mov	r5, r2
   1ce14:	b	1ce1c <flatcc_json_parser_generic_json@@Base+0x47c>
   1ce18:	add	r5, r5, #1
   1ce1c:	ldr	r3, [r6, #16]
   1ce20:	str	r5, [r6, #4]
   1ce24:	add	r3, r3, #1
   1ce28:	str	r3, [r6, #16]
   1ce2c:	cmp	r4, r5
   1ce30:	beq	1cd50 <flatcc_json_parser_generic_json@@Base+0x3b0>
   1ce34:	ldrb	r3, [r5]
   1ce38:	cmp	r3, #32
   1ce3c:	bls	1cd84 <flatcc_json_parser_generic_json@@Base+0x3e4>
   1ce40:	cmp	r3, #125	; 0x7d
   1ce44:	bne	1c9e0 <flatcc_json_parser_generic_json@@Base+0x40>
   1ce48:	add	r0, r5, #1
   1ce4c:	sub	r3, r4, r0
   1ce50:	cmp	r3, #1
   1ce54:	ble	1ce68 <flatcc_json_parser_generic_json@@Base+0x4c8>
   1ce58:	ldrb	r3, [r5, #1]
   1ce5c:	cmp	r3, #32
   1ce60:	bhi	1d684 <flatcc_json_parser_generic_json@@Base+0xce4>
   1ce64:	beq	1dfe0 <flatcc_json_parser_generic_json@@Base+0x1640>
   1ce68:	cmp	r4, r0
   1ce6c:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1ce70:	ldrb	r2, [r0]
   1ce74:	cmp	r2, #32
   1ce78:	bne	1ce98 <flatcc_json_parser_generic_json@@Base+0x4f8>
   1ce7c:	add	r3, r0, #1
   1ce80:	cmp	r4, r3
   1ce84:	mov	r0, r3
   1ce88:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1ce8c:	ldrb	r2, [r3], #1
   1ce90:	cmp	r2, #32
   1ce94:	beq	1ce80 <flatcc_json_parser_generic_json@@Base+0x4e0>
   1ce98:	cmp	r2, #32
   1ce9c:	bhi	1d68c <flatcc_json_parser_generic_json@@Base+0xcec>
   1cea0:	sub	r2, r2, #9
   1cea4:	cmp	r2, #23
   1cea8:	ldrls	pc, [pc, r2, lsl #2]
   1ceac:	b	1dadc <flatcc_json_parser_generic_json@@Base+0x113c>
   1ceb0:	andeq	sp, r1, ip, lsr #20
   1ceb4:	andeq	sp, r1, r0, lsl #20
   1ceb8:	ldrdeq	sp, [r1], -ip
   1cebc:	ldrdeq	sp, [r1], -ip
   1cec0:	ldrdeq	sp, [r1], -ip
   1cec4:	ldrdeq	sp, [r1], -ip
   1cec8:	ldrdeq	sp, [r1], -ip
   1cecc:	ldrdeq	sp, [r1], -ip
   1ced0:	ldrdeq	sp, [r1], -ip
   1ced4:	ldrdeq	sp, [r1], -ip
   1ced8:	ldrdeq	sp, [r1], -ip
   1cedc:	ldrdeq	sp, [r1], -ip
   1cee0:	ldrdeq	sp, [r1], -ip
   1cee4:	ldrdeq	sp, [r1], -ip
   1cee8:	ldrdeq	sp, [r1], -ip
   1ceec:	ldrdeq	sp, [r1], -ip
   1cef0:	ldrdeq	sp, [r1], -ip
   1cef4:	ldrdeq	sp, [r1], -ip
   1cef8:	ldrdeq	sp, [r1], -ip
   1cefc:	ldrdeq	sp, [r1], -ip
   1cf00:	ldrdeq	sp, [r1], -ip
   1cf04:	ldrdeq	sp, [r1], -ip
   1cf08:	ldrdeq	sp, [r1], -ip
   1cf0c:	andeq	ip, r1, r8, ror #28
   1cf10:	add	r5, r5, #1
   1cf14:	b	1ce2c <flatcc_json_parser_generic_json@@Base+0x48c>
   1cf18:	ldr	r3, [r6, #24]
   1cf1c:	cmp	r3, #0
   1cf20:	bne	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1cf24:	ldr	r3, [r6, #4]
   1cf28:	mov	r2, #5
   1cf2c:	str	r5, [r6, #36]	; 0x24
   1cf30:	str	r2, [r6, #24]
   1cf34:	sub	r5, r5, r3
   1cf38:	add	r5, r5, #1
   1cf3c:	str	r5, [r6, #20]
   1cf40:	b	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1cf44:	add	r1, r0, #1
   1cf48:	sub	r3, r4, r1
   1cf4c:	cmp	r3, #1
   1cf50:	ble	1cf64 <flatcc_json_parser_generic_json@@Base+0x5c4>
   1cf54:	ldrb	r3, [r0, #1]
   1cf58:	cmp	r3, #32
   1cf5c:	bhi	1d680 <flatcc_json_parser_generic_json@@Base+0xce0>
   1cf60:	beq	1d8c8 <flatcc_json_parser_generic_json@@Base+0xf28>
   1cf64:	cmp	r4, r1
   1cf68:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1cf6c:	ldrb	r2, [r1]
   1cf70:	cmp	r2, #32
   1cf74:	bne	1cf94 <flatcc_json_parser_generic_json@@Base+0x5f4>
   1cf78:	add	r3, r1, #1
   1cf7c:	cmp	r4, r3
   1cf80:	mov	r1, r3
   1cf84:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1cf88:	ldrb	r2, [r3], #1
   1cf8c:	cmp	r2, #32
   1cf90:	beq	1cf7c <flatcc_json_parser_generic_json@@Base+0x5dc>
   1cf94:	cmp	r2, #32
   1cf98:	bhi	1d058 <flatcc_json_parser_generic_json@@Base+0x6b8>
   1cf9c:	sub	r2, r2, #9
   1cfa0:	cmp	r2, #23
   1cfa4:	ldrls	pc, [pc, r2, lsl #2]
   1cfa8:	b	1d068 <flatcc_json_parser_generic_json@@Base+0x6c8>
   1cfac:	andeq	sp, r1, r0, rrx
   1cfb0:	andeq	sp, r1, r0, lsr r0
   1cfb4:	andeq	sp, r1, r8, rrx
   1cfb8:	andeq	sp, r1, r8, rrx
   1cfbc:	andeq	sp, r1, ip
   1cfc0:	andeq	sp, r1, r8, rrx
   1cfc4:	andeq	sp, r1, r8, rrx
   1cfc8:	andeq	sp, r1, r8, rrx
   1cfcc:	andeq	sp, r1, r8, rrx
   1cfd0:	andeq	sp, r1, r8, rrx
   1cfd4:	andeq	sp, r1, r8, rrx
   1cfd8:	andeq	sp, r1, r8, rrx
   1cfdc:	andeq	sp, r1, r8, rrx
   1cfe0:	andeq	sp, r1, r8, rrx
   1cfe4:	andeq	sp, r1, r8, rrx
   1cfe8:	andeq	sp, r1, r8, rrx
   1cfec:	andeq	sp, r1, r8, rrx
   1cff0:	andeq	sp, r1, r8, rrx
   1cff4:	andeq	sp, r1, r8, rrx
   1cff8:	andeq	sp, r1, r8, rrx
   1cffc:	andeq	sp, r1, r8, rrx
   1d000:	andeq	sp, r1, r8, rrx
   1d004:	andeq	sp, r1, r8, rrx
   1d008:	andeq	ip, r1, r4, ror #30
   1d00c:	sub	r3, r4, r1
   1d010:	add	r2, r1, #1
   1d014:	cmp	r3, #1
   1d018:	ble	1d028 <flatcc_json_parser_generic_json@@Base+0x688>
   1d01c:	ldrb	r3, [r1, #1]
   1d020:	cmp	r3, #10
   1d024:	addeq	r2, r1, #2
   1d028:	mov	r1, r2
   1d02c:	b	1d034 <flatcc_json_parser_generic_json@@Base+0x694>
   1d030:	add	r1, r1, #1
   1d034:	ldr	r3, [r6, #16]
   1d038:	str	r1, [r6, #4]
   1d03c:	add	r3, r3, #1
   1d040:	str	r3, [r6, #16]
   1d044:	cmp	r4, r1
   1d048:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1d04c:	ldrb	r2, [r1]
   1d050:	cmp	r2, #32
   1d054:	bls	1cf9c <flatcc_json_parser_generic_json@@Base+0x5fc>
   1d058:	mov	r0, r1
   1d05c:	b	1d68c <flatcc_json_parser_generic_json@@Base+0xcec>
   1d060:	add	r1, r1, #1
   1d064:	b	1d044 <flatcc_json_parser_generic_json@@Base+0x6a4>
   1d068:	ldr	r3, [r6, #24]
   1d06c:	cmp	r3, #0
   1d070:	bne	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1d074:	ldr	r3, [r6, #4]
   1d078:	mov	r2, #5
   1d07c:	str	r1, [r6, #36]	; 0x24
   1d080:	str	r2, [r6, #24]
   1d084:	sub	r1, r1, r3
   1d088:	add	r1, r1, #1
   1d08c:	str	r1, [r6, #20]
   1d090:	b	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1d094:	ldrb	r3, [r0, #2]
   1d098:	cmp	r3, #32
   1d09c:	addhi	r5, r0, #2
   1d0a0:	bls	1cd1c <flatcc_json_parser_generic_json@@Base+0x37c>
   1d0a4:	cmp	r4, r5
   1d0a8:	beq	1cd50 <flatcc_json_parser_generic_json@@Base+0x3b0>
   1d0ac:	cmp	r3, #125	; 0x7d
   1d0b0:	bne	1c9e0 <flatcc_json_parser_generic_json@@Base+0x40>
   1d0b4:	b	1ce48 <flatcc_json_parser_generic_json@@Base+0x4a8>
   1d0b8:	ldrb	r3, [r0, #1]
   1d0bc:	cmp	r3, #32
   1d0c0:	addhi	r0, r0, #1
   1d0c4:	bls	1cc84 <flatcc_json_parser_generic_json@@Base+0x2e4>
   1d0c8:	b	1cc94 <flatcc_json_parser_generic_json@@Base+0x2f4>
   1d0cc:	add	r5, r0, #1
   1d0d0:	sub	r3, r4, r5
   1d0d4:	cmp	r3, #1
   1d0d8:	ble	1d0ec <flatcc_json_parser_generic_json@@Base+0x74c>
   1d0dc:	ldrb	r3, [r0, #1]
   1d0e0:	cmp	r3, #32
   1d0e4:	bhi	1d1d4 <flatcc_json_parser_generic_json@@Base+0x834>
   1d0e8:	beq	1d1c4 <flatcc_json_parser_generic_json@@Base+0x824>
   1d0ec:	cmp	r4, r5
   1d0f0:	beq	1d120 <flatcc_json_parser_generic_json@@Base+0x780>
   1d0f4:	ldrb	r3, [r5]
   1d0f8:	cmp	r3, #32
   1d0fc:	bne	1d138 <flatcc_json_parser_generic_json@@Base+0x798>
   1d100:	add	r2, r5, #1
   1d104:	b	1d114 <flatcc_json_parser_generic_json@@Base+0x774>
   1d108:	ldrb	r3, [r2], #1
   1d10c:	cmp	r3, #32
   1d110:	bne	1d138 <flatcc_json_parser_generic_json@@Base+0x798>
   1d114:	cmp	r2, r4
   1d118:	mov	r5, r2
   1d11c:	bne	1d108 <flatcc_json_parser_generic_json@@Base+0x768>
   1d120:	ldr	r3, [r6, #24]
   1d124:	cmp	r3, #0
   1d128:	bne	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1d12c:	mov	r2, #9
   1d130:	ldr	r3, [r6, #4]
   1d134:	b	1cd64 <flatcc_json_parser_generic_json@@Base+0x3c4>
   1d138:	cmp	r3, #32
   1d13c:	bhi	1d1dc <flatcc_json_parser_generic_json@@Base+0x83c>
   1d140:	sub	r3, r3, #9
   1d144:	cmp	r3, #23
   1d148:	ldrls	pc, [pc, r3, lsl #2]
   1d14c:	b	1d410 <flatcc_json_parser_generic_json@@Base+0xa70>
   1d150:	andeq	sp, r1, r0, lsr r3
   1d154:	andeq	sp, r1, r8, lsr #6
   1d158:	andeq	sp, r1, r0, lsl r4
   1d15c:	andeq	sp, r1, r0, lsl r4
   1d160:	andeq	sp, r1, r0, ror #5
   1d164:	andeq	sp, r1, r0, lsl r4
   1d168:	andeq	sp, r1, r0, lsl r4
   1d16c:	andeq	sp, r1, r0, lsl r4
   1d170:	andeq	sp, r1, r0, lsl r4
   1d174:	andeq	sp, r1, r0, lsl r4
   1d178:	andeq	sp, r1, r0, lsl r4
   1d17c:	andeq	sp, r1, r0, lsl r4
   1d180:	andeq	sp, r1, r0, lsl r4
   1d184:	andeq	sp, r1, r0, lsl r4
   1d188:	andeq	sp, r1, r0, lsl r4
   1d18c:	andeq	sp, r1, r0, lsl r4
   1d190:	andeq	sp, r1, r0, lsl r4
   1d194:	andeq	sp, r1, r0, lsl r4
   1d198:	andeq	sp, r1, r0, lsl r4
   1d19c:	andeq	sp, r1, r0, lsl r4
   1d1a0:	andeq	sp, r1, r0, lsl r4
   1d1a4:	andeq	sp, r1, r0, lsl r4
   1d1a8:	andeq	sp, r1, r0, lsl r4
   1d1ac:	andeq	sp, r1, ip, ror #1
   1d1b0:	cmp	r3, #91	; 0x5b
   1d1b4:	beq	1d394 <flatcc_json_parser_generic_json@@Base+0x9f4>
   1d1b8:	cmp	r3, #123	; 0x7b
   1d1bc:	beq	1ca18 <flatcc_json_parser_generic_json@@Base+0x78>
   1d1c0:	b	1cc3c <flatcc_json_parser_generic_json@@Base+0x29c>
   1d1c4:	ldrb	r3, [r0, #2]
   1d1c8:	cmp	r3, #32
   1d1cc:	addhi	r5, r0, #2
   1d1d0:	bls	1d0ec <flatcc_json_parser_generic_json@@Base+0x74c>
   1d1d4:	cmp	r4, r5
   1d1d8:	beq	1d120 <flatcc_json_parser_generic_json@@Base+0x780>
   1d1dc:	cmp	r3, #93	; 0x5d
   1d1e0:	bne	1c9e0 <flatcc_json_parser_generic_json@@Base+0x40>
   1d1e4:	add	r0, r5, #1
   1d1e8:	sub	r3, r4, r0
   1d1ec:	cmp	r3, #1
   1d1f0:	ble	1da34 <flatcc_json_parser_generic_json@@Base+0x1094>
   1d1f4:	ldrb	r3, [r5, #1]
   1d1f8:	cmp	r3, #32
   1d1fc:	bhi	1d684 <flatcc_json_parser_generic_json@@Base+0xce4>
   1d200:	bne	1da34 <flatcc_json_parser_generic_json@@Base+0x1094>
   1d204:	ldrb	r3, [r5, #2]
   1d208:	cmp	r3, #32
   1d20c:	bls	1da34 <flatcc_json_parser_generic_json@@Base+0x1094>
   1d210:	add	r0, r5, #2
   1d214:	b	1d684 <flatcc_json_parser_generic_json@@Base+0xce4>
   1d218:	add	r1, r0, #1
   1d21c:	sub	r3, r4, r1
   1d220:	cmp	r3, #1
   1d224:	ble	1d238 <flatcc_json_parser_generic_json@@Base+0x898>
   1d228:	ldrb	r3, [r0, #1]
   1d22c:	cmp	r3, #32
   1d230:	bhi	1d680 <flatcc_json_parser_generic_json@@Base+0xce0>
   1d234:	beq	1d910 <flatcc_json_parser_generic_json@@Base+0xf70>
   1d238:	cmp	r4, r1
   1d23c:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1d240:	ldrb	r2, [r1]
   1d244:	cmp	r2, #32
   1d248:	bne	1d268 <flatcc_json_parser_generic_json@@Base+0x8c8>
   1d24c:	add	r3, r1, #1
   1d250:	cmp	r4, r3
   1d254:	mov	r1, r3
   1d258:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1d25c:	ldrb	r2, [r3], #1
   1d260:	cmp	r2, #32
   1d264:	beq	1d250 <flatcc_json_parser_generic_json@@Base+0x8b0>
   1d268:	cmp	r2, #32
   1d26c:	bhi	1d058 <flatcc_json_parser_generic_json@@Base+0x6b8>
   1d270:	sub	r2, r2, #9
   1d274:	cmp	r2, #23
   1d278:	ldrls	pc, [pc, r2, lsl #2]
   1d27c:	b	1d428 <flatcc_json_parser_generic_json@@Base+0xa88>
   1d280:	andeq	sp, r1, r4, ror #6
   1d284:	andeq	sp, r1, r8, lsr r3
   1d288:	andeq	sp, r1, r8, lsr #8
   1d28c:	andeq	sp, r1, r8, lsr #8
   1d290:	andeq	sp, r1, ip, ror #6
   1d294:	andeq	sp, r1, r8, lsr #8
   1d298:	andeq	sp, r1, r8, lsr #8
   1d29c:	andeq	sp, r1, r8, lsr #8
   1d2a0:	andeq	sp, r1, r8, lsr #8
   1d2a4:	andeq	sp, r1, r8, lsr #8
   1d2a8:	andeq	sp, r1, r8, lsr #8
   1d2ac:	andeq	sp, r1, r8, lsr #8
   1d2b0:	andeq	sp, r1, r8, lsr #8
   1d2b4:	andeq	sp, r1, r8, lsr #8
   1d2b8:	andeq	sp, r1, r8, lsr #8
   1d2bc:	andeq	sp, r1, r8, lsr #8
   1d2c0:	andeq	sp, r1, r8, lsr #8
   1d2c4:	andeq	sp, r1, r8, lsr #8
   1d2c8:	andeq	sp, r1, r8, lsr #8
   1d2cc:	andeq	sp, r1, r8, lsr #8
   1d2d0:	andeq	sp, r1, r8, lsr #8
   1d2d4:	andeq	sp, r1, r8, lsr #8
   1d2d8:	andeq	sp, r1, r8, lsr #8
   1d2dc:	andeq	sp, r1, r8, lsr r2
   1d2e0:	sub	r3, r4, r5
   1d2e4:	add	r2, r5, #1
   1d2e8:	cmp	r3, #1
   1d2ec:	ble	1d2fc <flatcc_json_parser_generic_json@@Base+0x95c>
   1d2f0:	ldrb	r3, [r5, #1]
   1d2f4:	cmp	r3, #10
   1d2f8:	addeq	r2, r5, #2
   1d2fc:	mov	r5, r2
   1d300:	ldr	r3, [r6, #16]
   1d304:	str	r5, [r6, #4]
   1d308:	add	r3, r3, #1
   1d30c:	str	r3, [r6, #16]
   1d310:	cmp	r4, r5
   1d314:	beq	1d120 <flatcc_json_parser_generic_json@@Base+0x780>
   1d318:	ldrb	r3, [r5]
   1d31c:	cmp	r3, #32
   1d320:	bls	1d140 <flatcc_json_parser_generic_json@@Base+0x7a0>
   1d324:	b	1d1dc <flatcc_json_parser_generic_json@@Base+0x83c>
   1d328:	add	r5, r5, #1
   1d32c:	b	1d300 <flatcc_json_parser_generic_json@@Base+0x960>
   1d330:	add	r5, r5, #1
   1d334:	b	1d310 <flatcc_json_parser_generic_json@@Base+0x970>
   1d338:	add	r1, r1, #1
   1d33c:	ldr	r3, [r6, #16]
   1d340:	str	r1, [r6, #4]
   1d344:	add	r3, r3, #1
   1d348:	str	r3, [r6, #16]
   1d34c:	cmp	r4, r1
   1d350:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1d354:	ldrb	r2, [r1]
   1d358:	cmp	r2, #32
   1d35c:	bls	1d270 <flatcc_json_parser_generic_json@@Base+0x8d0>
   1d360:	b	1d058 <flatcc_json_parser_generic_json@@Base+0x6b8>
   1d364:	add	r1, r1, #1
   1d368:	b	1d34c <flatcc_json_parser_generic_json@@Base+0x9ac>
   1d36c:	sub	r3, r4, r1
   1d370:	add	r2, r1, #1
   1d374:	cmp	r3, #1
   1d378:	ble	1d388 <flatcc_json_parser_generic_json@@Base+0x9e8>
   1d37c:	ldrb	r3, [r1, #1]
   1d380:	cmp	r3, #10
   1d384:	addeq	r2, r1, #2
   1d388:	mov	r1, r2
   1d38c:	b	1d33c <flatcc_json_parser_generic_json@@Base+0x99c>
   1d390:	mov	r5, r4
   1d394:	add	r3, sp, #520	; 0x208
   1d398:	cmp	r7, r3
   1d39c:	beq	1e024 <flatcc_json_parser_generic_json@@Base+0x1684>
   1d3a0:	add	r1, r5, #1
   1d3a4:	mov	r3, #93	; 0x5d
   1d3a8:	sub	r2, r4, r1
   1d3ac:	cmp	r2, #1
   1d3b0:	strb	r3, [r7], #1
   1d3b4:	ble	1d3d8 <flatcc_json_parser_generic_json@@Base+0xa38>
   1d3b8:	ldrb	r3, [r5, #1]
   1d3bc:	cmp	r3, #32
   1d3c0:	bhi	1d8dc <flatcc_json_parser_generic_json@@Base+0xf3c>
   1d3c4:	bne	1d3d8 <flatcc_json_parser_generic_json@@Base+0xa38>
   1d3c8:	ldrb	r3, [r5, #2]
   1d3cc:	cmp	r3, #32
   1d3d0:	addhi	r5, r5, #2
   1d3d4:	bhi	1d8e0 <flatcc_json_parser_generic_json@@Base+0xf40>
   1d3d8:	cmp	r1, r4
   1d3dc:	beq	1ca80 <flatcc_json_parser_generic_json@@Base+0xe0>
   1d3e0:	ldrb	r3, [r1]
   1d3e4:	cmp	r3, #32
   1d3e8:	bne	1d5ac <flatcc_json_parser_generic_json@@Base+0xc0c>
   1d3ec:	add	r2, r1, #1
   1d3f0:	b	1d400 <flatcc_json_parser_generic_json@@Base+0xa60>
   1d3f4:	ldrb	r3, [r2], #1
   1d3f8:	cmp	r3, #32
   1d3fc:	bne	1d5ac <flatcc_json_parser_generic_json@@Base+0xc0c>
   1d400:	cmp	r4, r2
   1d404:	mov	r1, r2
   1d408:	bne	1d3f4 <flatcc_json_parser_generic_json@@Base+0xa54>
   1d40c:	b	1ca80 <flatcc_json_parser_generic_json@@Base+0xe0>
   1d410:	ldr	r3, [r6, #24]
   1d414:	cmp	r3, #0
   1d418:	bne	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1d41c:	mov	r2, #5
   1d420:	ldr	r3, [r6, #4]
   1d424:	b	1cd64 <flatcc_json_parser_generic_json@@Base+0x3c4>
   1d428:	ldr	r3, [r6, #24]
   1d42c:	cmp	r3, #0
   1d430:	bne	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1d434:	ldr	r3, [r6, #4]
   1d438:	mov	r2, #5
   1d43c:	str	r2, [r6, #24]
   1d440:	str	r1, [r6, #36]	; 0x24
   1d444:	sub	r3, r1, r3
   1d448:	add	r3, r3, #1
   1d44c:	str	r3, [r6, #20]
   1d450:	b	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1d454:	cmp	r3, #31
   1d458:	bhi	1cb1c <flatcc_json_parser_generic_json@@Base+0x17c>
   1d45c:	ldr	r3, [r6, #24]
   1d460:	cmp	r3, #0
   1d464:	bne	1d488 <flatcc_json_parser_generic_json@@Base+0xae8>
   1d468:	ldr	r3, [r6, #4]
   1d46c:	str	r9, [r6, #24]
   1d470:	sub	r3, r1, r3
   1d474:	str	r1, [r6, #36]	; 0x24
   1d478:	mov	r1, r4
   1d47c:	add	r3, r3, #1
   1d480:	str	r3, [r6, #20]
   1d484:	b	1cb1c <flatcc_json_parser_generic_json@@Base+0x17c>
   1d488:	mov	r1, r4
   1d48c:	b	1cb1c <flatcc_json_parser_generic_json@@Base+0x17c>
   1d490:	ldr	r3, [r6, #24]
   1d494:	cmp	r3, #0
   1d498:	bne	1d488 <flatcc_json_parser_generic_json@@Base+0xae8>
   1d49c:	str	r5, [r6, #24]
   1d4a0:	ldr	r3, [r6, #4]
   1d4a4:	b	1d470 <flatcc_json_parser_generic_json@@Base+0xad0>
   1d4a8:	cmp	r3, #32
   1d4ac:	bhi	1d56c <flatcc_json_parser_generic_json@@Base+0xbcc>
   1d4b0:	sub	r3, r3, #9
   1d4b4:	cmp	r3, #23
   1d4b8:	ldrls	pc, [pc, r3, lsl #2]
   1d4bc:	b	1d57c <flatcc_json_parser_generic_json@@Base+0xbdc>
   1d4c0:	andeq	sp, r1, r4, ror r5
   1d4c4:	andeq	sp, r1, r4, asr #10
   1d4c8:	andeq	sp, r1, ip, ror r5
   1d4cc:	andeq	sp, r1, ip, ror r5
   1d4d0:	andeq	sp, r1, r0, lsr #10
   1d4d4:	andeq	sp, r1, ip, ror r5
   1d4d8:	andeq	sp, r1, ip, ror r5
   1d4dc:	andeq	sp, r1, ip, ror r5
   1d4e0:	andeq	sp, r1, ip, ror r5
   1d4e4:	andeq	sp, r1, ip, ror r5
   1d4e8:	andeq	sp, r1, ip, ror r5
   1d4ec:	andeq	sp, r1, ip, ror r5
   1d4f0:	andeq	sp, r1, ip, ror r5
   1d4f4:	andeq	sp, r1, ip, ror r5
   1d4f8:	andeq	sp, r1, ip, ror r5
   1d4fc:	andeq	sp, r1, ip, ror r5
   1d500:	andeq	sp, r1, ip, ror r5
   1d504:	andeq	sp, r1, ip, ror r5
   1d508:	andeq	sp, r1, ip, ror r5
   1d50c:	andeq	sp, r1, ip, ror r5
   1d510:	andeq	sp, r1, ip, ror r5
   1d514:	andeq	sp, r1, ip, ror r5
   1d518:	andeq	sp, r1, ip, ror r5
   1d51c:	andeq	ip, r1, ip, asr #20
   1d520:	sub	r3, r4, r1
   1d524:	add	r2, r1, #1
   1d528:	cmp	r3, #1
   1d52c:	ble	1d53c <flatcc_json_parser_generic_json@@Base+0xb9c>
   1d530:	ldrb	r3, [r1, #1]
   1d534:	cmp	r3, #10
   1d538:	addeq	r2, r1, #2
   1d53c:	mov	r1, r2
   1d540:	b	1d548 <flatcc_json_parser_generic_json@@Base+0xba8>
   1d544:	add	r1, r1, #1
   1d548:	ldr	r3, [r6, #16]
   1d54c:	str	r1, [r6, #4]
   1d550:	add	r3, r3, #1
   1d554:	str	r3, [r6, #16]
   1d558:	cmp	r4, r1
   1d55c:	beq	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1d560:	ldrb	r3, [r1]
   1d564:	cmp	r3, #32
   1d568:	bls	1d4b0 <flatcc_json_parser_generic_json@@Base+0xb10>
   1d56c:	mov	r5, r1
   1d570:	b	1d904 <flatcc_json_parser_generic_json@@Base+0xf64>
   1d574:	add	r1, r1, #1
   1d578:	b	1d558 <flatcc_json_parser_generic_json@@Base+0xbb8>
   1d57c:	ldr	r3, [r6, #24]
   1d580:	cmp	r3, #0
   1d584:	bne	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1d588:	ldr	r3, [r6, #4]
   1d58c:	mov	r2, #5
   1d590:	str	r2, [r6, #24]
   1d594:	str	r1, [r6, #36]	; 0x24
   1d598:	sub	r3, r1, r3
   1d59c:	add	r3, r3, #1
   1d5a0:	str	r3, [r6, #20]
   1d5a4:	mov	r0, r4
   1d5a8:	b	1cc00 <flatcc_json_parser_generic_json@@Base+0x260>
   1d5ac:	cmp	r3, #32
   1d5b0:	bhi	1d670 <flatcc_json_parser_generic_json@@Base+0xcd0>
   1d5b4:	sub	r3, r3, #9
   1d5b8:	cmp	r3, #23
   1d5bc:	ldrls	pc, [pc, r3, lsl #2]
   1d5c0:	b	1d57c <flatcc_json_parser_generic_json@@Base+0xbdc>
   1d5c4:	andeq	sp, r1, r8, ror r6
   1d5c8:	andeq	sp, r1, r8, asr #12
   1d5cc:	andeq	sp, r1, ip, ror r5
   1d5d0:	andeq	sp, r1, ip, ror r5
   1d5d4:	andeq	sp, r1, r4, lsr #12
   1d5d8:	andeq	sp, r1, ip, ror r5
   1d5dc:	andeq	sp, r1, ip, ror r5
   1d5e0:	andeq	sp, r1, ip, ror r5
   1d5e4:	andeq	sp, r1, ip, ror r5
   1d5e8:	andeq	sp, r1, ip, ror r5
   1d5ec:	andeq	sp, r1, ip, ror r5
   1d5f0:	andeq	sp, r1, ip, ror r5
   1d5f4:	andeq	sp, r1, ip, ror r5
   1d5f8:	andeq	sp, r1, ip, ror r5
   1d5fc:	andeq	sp, r1, ip, ror r5
   1d600:	andeq	sp, r1, ip, ror r5
   1d604:	andeq	sp, r1, ip, ror r5
   1d608:	andeq	sp, r1, ip, ror r5
   1d60c:	andeq	sp, r1, ip, ror r5
   1d610:	andeq	sp, r1, ip, ror r5
   1d614:	andeq	sp, r1, ip, ror r5
   1d618:	andeq	sp, r1, ip, ror r5
   1d61c:	andeq	sp, r1, ip, ror r5
   1d620:	ldrdeq	sp, [r1], -r8
   1d624:	sub	r3, r4, r1
   1d628:	add	r2, r1, #1
   1d62c:	cmp	r3, #1
   1d630:	ble	1d640 <flatcc_json_parser_generic_json@@Base+0xca0>
   1d634:	ldrb	r3, [r1, #1]
   1d638:	cmp	r3, #10
   1d63c:	addeq	r2, r1, #2
   1d640:	mov	r1, r2
   1d644:	b	1d64c <flatcc_json_parser_generic_json@@Base+0xcac>
   1d648:	add	r1, r1, #1
   1d64c:	ldr	r3, [r6, #16]
   1d650:	str	r1, [r6, #4]
   1d654:	add	r3, r3, #1
   1d658:	str	r3, [r6, #16]
   1d65c:	cmp	r4, r1
   1d660:	beq	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1d664:	ldrb	r3, [r1]
   1d668:	cmp	r3, #32
   1d66c:	bls	1d5b4 <flatcc_json_parser_generic_json@@Base+0xc14>
   1d670:	mov	r5, r1
   1d674:	b	1d8e8 <flatcc_json_parser_generic_json@@Base+0xf48>
   1d678:	add	r1, r1, #1
   1d67c:	b	1d65c <flatcc_json_parser_generic_json@@Base+0xcbc>
   1d680:	mov	r0, r1
   1d684:	cmp	r0, r4
   1d688:	beq	1cbc0 <flatcc_json_parser_generic_json@@Base+0x220>
   1d68c:	mov	r7, fp
   1d690:	b	1cb50 <flatcc_json_parser_generic_json@@Base+0x1b0>
   1d694:	cmp	r4, r5
   1d698:	beq	1d7cc <flatcc_json_parser_generic_json@@Base+0xe2c>
   1d69c:	cmp	r3, #45	; 0x2d
   1d6a0:	beq	1dd6c <flatcc_json_parser_generic_json@@Base+0x13cc>
   1d6a4:	cmp	r3, #48	; 0x30
   1d6a8:	beq	1df10 <flatcc_json_parser_generic_json@@Base+0x1570>
   1d6ac:	sub	r3, r3, #49	; 0x31
   1d6b0:	uxtb	r3, r3
   1d6b4:	cmp	r3, #8
   1d6b8:	bhi	1d9ac <flatcc_json_parser_generic_json@@Base+0x100c>
   1d6bc:	add	r0, r5, #1
   1d6c0:	cmp	r4, r0
   1d6c4:	beq	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1d6c8:	ldrb	r3, [r5, #1]
   1d6cc:	sub	r2, r3, #48	; 0x30
   1d6d0:	cmp	r2, #9
   1d6d4:	bhi	1d6f8 <flatcc_json_parser_generic_json@@Base+0xd58>
   1d6d8:	add	r5, r5, #2
   1d6dc:	cmp	r4, r5
   1d6e0:	mov	r0, r5
   1d6e4:	beq	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1d6e8:	ldrb	r3, [r5], #1
   1d6ec:	sub	r2, r3, #48	; 0x30
   1d6f0:	cmp	r2, #9
   1d6f4:	bls	1d6dc <flatcc_json_parser_generic_json@@Base+0xd3c>
   1d6f8:	cmp	r3, #46	; 0x2e
   1d6fc:	beq	1df34 <flatcc_json_parser_generic_json@@Base+0x1594>
   1d700:	and	r2, r3, #223	; 0xdf
   1d704:	cmp	r2, #69	; 0x45
   1d708:	bne	1debc <flatcc_json_parser_generic_json@@Base+0x151c>
   1d70c:	add	r2, r0, #1
   1d710:	cmp	r4, r2
   1d714:	beq	1e0e8 <flatcc_json_parser_generic_json@@Base+0x1748>
   1d718:	ldrb	r3, [r0, #1]
   1d71c:	sub	r1, r3, #43	; 0x2b
   1d720:	tst	r1, #253	; 0xfd
   1d724:	bne	1d738 <flatcc_json_parser_generic_json@@Base+0xd98>
   1d728:	add	r2, r0, #2
   1d72c:	cmp	r4, r2
   1d730:	beq	1d744 <flatcc_json_parser_generic_json@@Base+0xda4>
   1d734:	ldrb	r3, [r0, #2]
   1d738:	sub	r3, r3, #48	; 0x30
   1d73c:	cmp	r3, #9
   1d740:	bls	1de80 <flatcc_json_parser_generic_json@@Base+0x14e0>
   1d744:	ldr	r3, [r6, #24]
   1d748:	cmp	r3, #0
   1d74c:	bne	1d7cc <flatcc_json_parser_generic_json@@Base+0xe2c>
   1d750:	ldr	r3, [r6, #4]
   1d754:	mov	r1, #6
   1d758:	mov	r0, r4
   1d75c:	str	r2, [r6, #36]	; 0x24
   1d760:	str	r1, [r6, #24]
   1d764:	sub	r2, r2, r3
   1d768:	add	r3, r2, #1
   1d76c:	str	r3, [r6, #20]
   1d770:	b	1d7d0 <flatcc_json_parser_generic_json@@Base+0xe30>
   1d774:	ldrb	r3, [r2, #2]
   1d778:	cmp	r3, #32
   1d77c:	addhi	r5, r2, #2
   1d780:	bls	1dc24 <flatcc_json_parser_generic_json@@Base+0x1284>
   1d784:	cmp	r3, #57	; 0x39
   1d788:	bhi	1c9fc <flatcc_json_parser_generic_json@@Base+0x5c>
   1d78c:	cmp	r3, #48	; 0x30
   1d790:	bcs	1d694 <flatcc_json_parser_generic_json@@Base+0xcf4>
   1d794:	cmp	r3, #34	; 0x22
   1d798:	bne	1cc34 <flatcc_json_parser_generic_json@@Base+0x294>
   1d79c:	cmp	r5, r4
   1d7a0:	bne	1caa0 <flatcc_json_parser_generic_json@@Base+0x100>
   1d7a4:	ldr	r2, [r6, #24]
   1d7a8:	cmp	r2, #0
   1d7ac:	bne	1d7cc <flatcc_json_parser_generic_json@@Base+0xe2c>
   1d7b0:	ldr	r3, [r6, #4]
   1d7b4:	mov	r2, #16
   1d7b8:	str	r2, [r6, #24]
   1d7bc:	str	r4, [r6, #36]	; 0x24
   1d7c0:	sub	r3, r4, r3
   1d7c4:	add	r3, r3, #1
   1d7c8:	str	r3, [r6, #20]
   1d7cc:	mov	r0, r4
   1d7d0:	mov	fp, r7
   1d7d4:	b	1cbc0 <flatcc_json_parser_generic_json@@Base+0x220>
   1d7d8:	cmp	r3, #34	; 0x22
   1d7dc:	beq	1d920 <flatcc_json_parser_generic_json@@Base+0xf80>
   1d7e0:	cmp	r3, #46	; 0x2e
   1d7e4:	beq	1e054 <flatcc_json_parser_generic_json@@Base+0x16b4>
   1d7e8:	mov	r3, #1
   1d7ec:	cmp	r4, r5
   1d7f0:	str	r3, [r6, #12]
   1d7f4:	beq	1e1b0 <flatcc_json_parser_generic_json@@Base+0x1810>
   1d7f8:	ldrb	r3, [r5]
   1d7fc:	cmp	r3, #32
   1d800:	movls	r2, r5
   1d804:	bls	1d848 <flatcc_json_parser_generic_json@@Base+0xea8>
   1d808:	sub	r2, r3, #48	; 0x30
   1d80c:	cmp	r3, #46	; 0x2e
   1d810:	cmpne	r3, #95	; 0x5f
   1d814:	uxtb	ip, r2
   1d818:	add	r0, r5, #1
   1d81c:	mov	r2, r5
   1d820:	beq	1db0c <flatcc_json_parser_generic_json@@Base+0x116c>
   1d824:	orr	r1, r3, #32
   1d828:	tst	r3, #128	; 0x80
   1d82c:	sub	r1, r1, #97	; 0x61
   1d830:	bne	1db0c <flatcc_json_parser_generic_json@@Base+0x116c>
   1d834:	cmp	ip, #9
   1d838:	uxtb	r1, r1
   1d83c:	bls	1db0c <flatcc_json_parser_generic_json@@Base+0x116c>
   1d840:	cmp	r1, #25
   1d844:	bls	1db08 <flatcc_json_parser_generic_json@@Base+0x1168>
   1d848:	sub	r3, r4, r2
   1d84c:	cmp	r3, #1
   1d850:	ble	1d864 <flatcc_json_parser_generic_json@@Base+0xec4>
   1d854:	ldrb	r1, [r2]
   1d858:	cmp	r1, #32
   1d85c:	bhi	1ddf8 <flatcc_json_parser_generic_json@@Base+0x1458>
   1d860:	beq	1dde8 <flatcc_json_parser_generic_json@@Base+0x1448>
   1d864:	cmp	r4, r2
   1d868:	beq	1d898 <flatcc_json_parser_generic_json@@Base+0xef8>
   1d86c:	ldrb	r1, [r2]
   1d870:	cmp	r1, #32
   1d874:	bne	1db30 <flatcc_json_parser_generic_json@@Base+0x1190>
   1d878:	add	r3, r2, #1
   1d87c:	b	1d88c <flatcc_json_parser_generic_json@@Base+0xeec>
   1d880:	ldrb	r1, [r3], #1
   1d884:	cmp	r1, #32
   1d888:	bne	1db30 <flatcc_json_parser_generic_json@@Base+0x1190>
   1d88c:	cmp	r4, r3
   1d890:	mov	r2, r3
   1d894:	bne	1d880 <flatcc_json_parser_generic_json@@Base+0xee0>
   1d898:	ldr	r1, [r6, #24]
   1d89c:	cmp	r1, #0
   1d8a0:	bne	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1d8a4:	ldr	r3, [r6, #4]
   1d8a8:	mov	r1, #10
   1d8ac:	sub	r3, r2, r3
   1d8b0:	mov	r0, r4
   1d8b4:	str	r1, [r6, #24]
   1d8b8:	add	r3, r3, #1
   1d8bc:	str	r3, [r6, #20]
   1d8c0:	str	r2, [r6, #36]	; 0x24
   1d8c4:	b	1cc00 <flatcc_json_parser_generic_json@@Base+0x260>
   1d8c8:	ldrb	r3, [r0, #2]
   1d8cc:	cmp	r3, #32
   1d8d0:	bls	1cf64 <flatcc_json_parser_generic_json@@Base+0x5c4>
   1d8d4:	add	r0, r0, #2
   1d8d8:	b	1d684 <flatcc_json_parser_generic_json@@Base+0xce4>
   1d8dc:	mov	r5, r1
   1d8e0:	cmp	r4, r5
   1d8e4:	beq	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1d8e8:	cmp	r3, #93	; 0x5d
   1d8ec:	bne	1c9e0 <flatcc_json_parser_generic_json@@Base+0x40>
   1d8f0:	mov	r0, r5
   1d8f4:	b	1cb50 <flatcc_json_parser_generic_json@@Base+0x1b0>
   1d8f8:	mov	r5, r1
   1d8fc:	cmp	r4, r5
   1d900:	beq	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1d904:	cmp	r3, #125	; 0x7d
   1d908:	bne	1c9e0 <flatcc_json_parser_generic_json@@Base+0x40>
   1d90c:	b	1d8f0 <flatcc_json_parser_generic_json@@Base+0xf50>
   1d910:	ldrb	r3, [r0, #2]
   1d914:	cmp	r3, #32
   1d918:	bls	1d238 <flatcc_json_parser_generic_json@@Base+0x898>
   1d91c:	b	1d8d4 <flatcc_json_parser_generic_json@@Base+0xf34>
   1d920:	add	r2, r5, #1
   1d924:	mov	r3, #0
   1d928:	cmp	r4, r2
   1d92c:	str	r3, [r6, #12]
   1d930:	beq	1d978 <flatcc_json_parser_generic_json@@Base+0xfd8>
   1d934:	ldrb	r1, [r5, #1]
   1d938:	cmp	r1, #34	; 0x22
   1d93c:	bne	1d95c <flatcc_json_parser_generic_json@@Base+0xfbc>
   1d940:	b	1df2c <flatcc_json_parser_generic_json@@Base+0x158c>
   1d944:	add	r2, r3, #1
   1d948:	cmp	r4, r2
   1d94c:	beq	1d978 <flatcc_json_parser_generic_json@@Base+0xfd8>
   1d950:	ldrb	r1, [r3, #1]
   1d954:	cmp	r1, #34	; 0x22
   1d958:	beq	1df2c <flatcc_json_parser_generic_json@@Base+0x158c>
   1d95c:	cmp	r1, #92	; 0x5c
   1d960:	mov	r3, r2
   1d964:	bne	1d944 <flatcc_json_parser_generic_json@@Base+0xfa4>
   1d968:	sub	r1, r4, r2
   1d96c:	add	r3, r2, #1
   1d970:	cmp	r1, #1
   1d974:	bgt	1d944 <flatcc_json_parser_generic_json@@Base+0xfa4>
   1d978:	ldr	r1, [r6, #24]
   1d97c:	cmp	r1, #0
   1d980:	bne	1d9a4 <flatcc_json_parser_generic_json@@Base+0x1004>
   1d984:	ldr	r0, [r6, #4]
   1d988:	mov	r3, #20
   1d98c:	mov	r1, r3
   1d990:	str	r2, [r6, #36]	; 0x24
   1d994:	str	r3, [r6, #24]
   1d998:	sub	r2, r2, r0
   1d99c:	add	r3, r2, #1
   1d9a0:	str	r3, [r6, #20]
   1d9a4:	mov	r2, r4
   1d9a8:	b	1d89c <flatcc_json_parser_generic_json@@Base+0xefc>
   1d9ac:	ldr	r3, [r6, #24]
   1d9b0:	cmp	r3, #0
   1d9b4:	bne	1d7cc <flatcc_json_parser_generic_json@@Base+0xe2c>
   1d9b8:	ldr	r3, [r6, #4]
   1d9bc:	mov	r2, #6
   1d9c0:	mov	r0, r4
   1d9c4:	str	r2, [r6, #24]
   1d9c8:	str	r5, [r6, #36]	; 0x24
   1d9cc:	sub	r3, r5, r3
   1d9d0:	add	r3, r3, #1
   1d9d4:	str	r3, [r6, #20]
   1d9d8:	b	1d7d0 <flatcc_json_parser_generic_json@@Base+0xe30>
   1d9dc:	sub	r3, r4, r0
   1d9e0:	add	r2, r0, #1
   1d9e4:	cmp	r3, #1
   1d9e8:	ble	1d9f8 <flatcc_json_parser_generic_json@@Base+0x1058>
   1d9ec:	ldrb	r3, [r0, #1]
   1d9f0:	cmp	r3, #10
   1d9f4:	addeq	r2, r0, #2
   1d9f8:	mov	r0, r2
   1d9fc:	b	1da04 <flatcc_json_parser_generic_json@@Base+0x1064>
   1da00:	add	r0, r0, #1
   1da04:	ldr	r3, [r6, #16]
   1da08:	str	r0, [r6, #4]
   1da0c:	add	r3, r3, #1
   1da10:	str	r3, [r6, #16]
   1da14:	cmp	r4, r0
   1da18:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1da1c:	ldrb	r2, [r0]
   1da20:	cmp	r2, #32
   1da24:	bls	1cea0 <flatcc_json_parser_generic_json@@Base+0x500>
   1da28:	b	1d68c <flatcc_json_parser_generic_json@@Base+0xcec>
   1da2c:	add	r0, r0, #1
   1da30:	b	1da14 <flatcc_json_parser_generic_json@@Base+0x1074>
   1da34:	cmp	r4, r0
   1da38:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1da3c:	ldrb	r2, [r0]
   1da40:	cmp	r2, #32
   1da44:	bne	1da64 <flatcc_json_parser_generic_json@@Base+0x10c4>
   1da48:	add	r3, r0, #1
   1da4c:	cmp	r3, r4
   1da50:	mov	r0, r3
   1da54:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1da58:	ldrb	r2, [r3], #1
   1da5c:	cmp	r2, #32
   1da60:	beq	1da4c <flatcc_json_parser_generic_json@@Base+0x10ac>
   1da64:	cmp	r2, #32
   1da68:	bhi	1d68c <flatcc_json_parser_generic_json@@Base+0xcec>
   1da6c:	sub	r2, r2, #9
   1da70:	cmp	r2, #23
   1da74:	ldrls	pc, [pc, r2, lsl #2]
   1da78:	b	1dadc <flatcc_json_parser_generic_json@@Base+0x113c>
   1da7c:	ldrdeq	sp, [r1], -r8
   1da80:	ldrdeq	sp, [r1], -r0
   1da84:	ldrdeq	sp, [r1], -ip
   1da88:	ldrdeq	sp, [r1], -ip
   1da8c:	andeq	sp, r1, r8, lsl #31
   1da90:	ldrdeq	sp, [r1], -ip
   1da94:	ldrdeq	sp, [r1], -ip
   1da98:	ldrdeq	sp, [r1], -ip
   1da9c:	ldrdeq	sp, [r1], -ip
   1daa0:	ldrdeq	sp, [r1], -ip
   1daa4:	ldrdeq	sp, [r1], -ip
   1daa8:	ldrdeq	sp, [r1], -ip
   1daac:	ldrdeq	sp, [r1], -ip
   1dab0:	ldrdeq	sp, [r1], -ip
   1dab4:	ldrdeq	sp, [r1], -ip
   1dab8:	ldrdeq	sp, [r1], -ip
   1dabc:	ldrdeq	sp, [r1], -ip
   1dac0:	ldrdeq	sp, [r1], -ip
   1dac4:	ldrdeq	sp, [r1], -ip
   1dac8:	ldrdeq	sp, [r1], -ip
   1dacc:	ldrdeq	sp, [r1], -ip
   1dad0:	ldrdeq	sp, [r1], -ip
   1dad4:	ldrdeq	sp, [r1], -ip
   1dad8:	andeq	sp, r1, r4, lsr sl
   1dadc:	ldr	r3, [r6, #24]
   1dae0:	cmp	r3, #0
   1dae4:	bne	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1dae8:	ldr	r3, [r6, #4]
   1daec:	mov	r2, #5
   1daf0:	str	r2, [r6, #24]
   1daf4:	str	r0, [r6, #36]	; 0x24
   1daf8:	sub	r3, r0, r3
   1dafc:	add	r3, r3, #1
   1db00:	str	r3, [r6, #20]
   1db04:	b	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1db08:	add	r0, r5, #1
   1db0c:	cmp	r4, r0
   1db10:	mov	r2, r0
   1db14:	mov	r5, r0
   1db18:	beq	1e084 <flatcc_json_parser_generic_json@@Base+0x16e4>
   1db1c:	ldrb	r1, [r0]
   1db20:	cmp	r1, #32
   1db24:	bls	1e084 <flatcc_json_parser_generic_json@@Base+0x16e4>
   1db28:	mov	r3, r1
   1db2c:	b	1d808 <flatcc_json_parser_generic_json@@Base+0xe68>
   1db30:	cmp	r1, #32
   1db34:	bhi	1dbf8 <flatcc_json_parser_generic_json@@Base+0x1258>
   1db38:	sub	r1, r1, #9
   1db3c:	cmp	r1, #23
   1db40:	ldrls	pc, [pc, r1, lsl #2]
   1db44:	b	1dcd0 <flatcc_json_parser_generic_json@@Base+0x1330>
   1db48:	andeq	sp, r1, r8, asr #25
   1db4c:	andeq	sp, r1, r0, asr #25
   1db50:	ldrdeq	sp, [r1], -r0
   1db54:	ldrdeq	sp, [r1], -r0
   1db58:			; <UNDEFINED> instruction: 0x0001dbb4
   1db5c:	ldrdeq	sp, [r1], -r0
   1db60:	ldrdeq	sp, [r1], -r0
   1db64:	ldrdeq	sp, [r1], -r0
   1db68:	ldrdeq	sp, [r1], -r0
   1db6c:	ldrdeq	sp, [r1], -r0
   1db70:	ldrdeq	sp, [r1], -r0
   1db74:	ldrdeq	sp, [r1], -r0
   1db78:	ldrdeq	sp, [r1], -r0
   1db7c:	ldrdeq	sp, [r1], -r0
   1db80:	ldrdeq	sp, [r1], -r0
   1db84:	ldrdeq	sp, [r1], -r0
   1db88:	ldrdeq	sp, [r1], -r0
   1db8c:	ldrdeq	sp, [r1], -r0
   1db90:	ldrdeq	sp, [r1], -r0
   1db94:	ldrdeq	sp, [r1], -r0
   1db98:	ldrdeq	sp, [r1], -r0
   1db9c:	ldrdeq	sp, [r1], -r0
   1dba0:	ldrdeq	sp, [r1], -r0
   1dba4:	andeq	sp, r1, r8, lsr #23
   1dba8:	cmp	r2, r4
   1dbac:	bne	1d86c <flatcc_json_parser_generic_json@@Base+0xecc>
   1dbb0:	b	1d898 <flatcc_json_parser_generic_json@@Base+0xef8>
   1dbb4:	sub	r3, r4, r2
   1dbb8:	add	r1, r2, #1
   1dbbc:	cmp	r3, #1
   1dbc0:	ble	1dbd0 <flatcc_json_parser_generic_json@@Base+0x1230>
   1dbc4:	ldrb	r3, [r2, #1]
   1dbc8:	cmp	r3, #10
   1dbcc:	addeq	r1, r2, #2
   1dbd0:	mov	r2, r1
   1dbd4:	ldr	r3, [r6, #16]
   1dbd8:	str	r2, [r6, #4]
   1dbdc:	add	r3, r3, #1
   1dbe0:	str	r3, [r6, #16]
   1dbe4:	cmp	r4, r2
   1dbe8:	beq	1d898 <flatcc_json_parser_generic_json@@Base+0xef8>
   1dbec:	ldrb	r1, [r2]
   1dbf0:	cmp	r1, #32
   1dbf4:	bls	1db38 <flatcc_json_parser_generic_json@@Base+0x1198>
   1dbf8:	cmp	r1, #58	; 0x3a
   1dbfc:	bne	1e13c <flatcc_json_parser_generic_json@@Base+0x179c>
   1dc00:	add	r5, r2, #1
   1dc04:	sub	r3, r4, r5
   1dc08:	cmp	r3, #1
   1dc0c:	ble	1df24 <flatcc_json_parser_generic_json@@Base+0x1584>
   1dc10:	ldrb	r3, [r2, #1]
   1dc14:	cmp	r3, #32
   1dc18:	mov	r1, r3
   1dc1c:	bhi	1d784 <flatcc_json_parser_generic_json@@Base+0xde4>
   1dc20:	beq	1d774 <flatcc_json_parser_generic_json@@Base+0xdd4>
   1dc24:	cmp	r5, r4
   1dc28:	mov	r3, r1
   1dc2c:	bne	1dc40 <flatcc_json_parser_generic_json@@Base+0x12a0>
   1dc30:	b	1cc1c <flatcc_json_parser_generic_json@@Base+0x27c>
   1dc34:	ldrb	r3, [r5, #1]!
   1dc38:	cmp	r4, r5
   1dc3c:	beq	1cc1c <flatcc_json_parser_generic_json@@Base+0x27c>
   1dc40:	cmp	r3, #32
   1dc44:	beq	1dc34 <flatcc_json_parser_generic_json@@Base+0x1294>
   1dc48:	cmp	r3, #32
   1dc4c:	bhi	1c9f4 <flatcc_json_parser_generic_json@@Base+0x54>
   1dc50:	sub	r3, r3, #9
   1dc54:	cmp	r3, #23
   1dc58:	ldrls	pc, [pc, r3, lsl #2]
   1dc5c:	b	1dd94 <flatcc_json_parser_generic_json@@Base+0x13f4>
   1dc60:	andeq	sp, r1, ip, lsl #27
   1dc64:	andeq	sp, r1, r4, lsl #27
   1dc68:	muleq	r1, r4, sp
   1dc6c:	muleq	r1, r4, sp
   1dc70:	andeq	sp, r1, r8, lsl #26
   1dc74:	muleq	r1, r4, sp
   1dc78:	muleq	r1, r4, sp
   1dc7c:	muleq	r1, r4, sp
   1dc80:	muleq	r1, r4, sp
   1dc84:	muleq	r1, r4, sp
   1dc88:	muleq	r1, r4, sp
   1dc8c:	muleq	r1, r4, sp
   1dc90:	muleq	r1, r4, sp
   1dc94:	muleq	r1, r4, sp
   1dc98:	muleq	r1, r4, sp
   1dc9c:	muleq	r1, r4, sp
   1dca0:	muleq	r1, r4, sp
   1dca4:	muleq	r1, r4, sp
   1dca8:	muleq	r1, r4, sp
   1dcac:	muleq	r1, r4, sp
   1dcb0:	muleq	r1, r4, sp
   1dcb4:	muleq	r1, r4, sp
   1dcb8:	muleq	r1, r4, sp
   1dcbc:	strdeq	sp, [r1], -ip
   1dcc0:	add	r2, r2, #1
   1dcc4:	b	1dbd4 <flatcc_json_parser_generic_json@@Base+0x1234>
   1dcc8:	add	r2, r2, #1
   1dccc:	b	1dbe4 <flatcc_json_parser_generic_json@@Base+0x1244>
   1dcd0:	ldr	r3, [r6, #24]
   1dcd4:	cmp	r3, #0
   1dcd8:	bne	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1dcdc:	ldr	r3, [r6, #4]
   1dce0:	mov	r1, #5
   1dce4:	str	r1, [r6, #24]
   1dce8:	str	r2, [r6, #36]	; 0x24
   1dcec:	sub	r3, r2, r3
   1dcf0:	add	r3, r3, #1
   1dcf4:	str	r3, [r6, #20]
   1dcf8:	b	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1dcfc:	cmp	r4, r5
   1dd00:	bne	1dc34 <flatcc_json_parser_generic_json@@Base+0x1294>
   1dd04:	b	1cc3c <flatcc_json_parser_generic_json@@Base+0x29c>
   1dd08:	sub	r3, r4, r5
   1dd0c:	add	r2, r5, #1
   1dd10:	cmp	r3, #1
   1dd14:	ble	1dd24 <flatcc_json_parser_generic_json@@Base+0x1384>
   1dd18:	ldrb	r3, [r5, #1]
   1dd1c:	cmp	r3, #10
   1dd20:	addeq	r2, r5, #2
   1dd24:	mov	r5, r2
   1dd28:	ldr	r3, [r6, #16]
   1dd2c:	str	r5, [r6, #4]
   1dd30:	add	r3, r3, #1
   1dd34:	str	r3, [r6, #16]
   1dd38:	cmp	r4, r5
   1dd3c:	ldrb	r3, [r5]
   1dd40:	beq	1e118 <flatcc_json_parser_generic_json@@Base+0x1778>
   1dd44:	cmp	r3, #32
   1dd48:	bls	1dc50 <flatcc_json_parser_generic_json@@Base+0x12b0>
   1dd4c:	cmp	r3, #57	; 0x39
   1dd50:	bhi	1c9fc <flatcc_json_parser_generic_json@@Base+0x5c>
   1dd54:	cmp	r3, #48	; 0x30
   1dd58:	bcs	1d69c <flatcc_json_parser_generic_json@@Base+0xcfc>
   1dd5c:	cmp	r3, #34	; 0x22
   1dd60:	beq	1caa0 <flatcc_json_parser_generic_json@@Base+0x100>
   1dd64:	cmp	r3, #45	; 0x2d
   1dd68:	bne	1cc3c <flatcc_json_parser_generic_json@@Base+0x29c>
   1dd6c:	add	r0, r5, #1
   1dd70:	cmp	r4, r0
   1dd74:	beq	1e0bc <flatcc_json_parser_generic_json@@Base+0x171c>
   1dd78:	ldrb	r3, [r5, #1]
   1dd7c:	mov	r5, r0
   1dd80:	b	1d6a4 <flatcc_json_parser_generic_json@@Base+0xd04>
   1dd84:	add	r5, r5, #1
   1dd88:	b	1dd28 <flatcc_json_parser_generic_json@@Base+0x1388>
   1dd8c:	add	r5, r5, #1
   1dd90:	b	1dd38 <flatcc_json_parser_generic_json@@Base+0x1398>
   1dd94:	ldr	r2, [r6, #24]
   1dd98:	cmp	r2, #0
   1dd9c:	bne	1ddbc <flatcc_json_parser_generic_json@@Base+0x141c>
   1dda0:	ldr	r3, [r6, #4]
   1dda4:	mov	r2, #5
   1dda8:	str	r2, [r6, #24]
   1ddac:	str	r5, [r6, #36]	; 0x24
   1ddb0:	sub	r3, r5, r3
   1ddb4:	add	r3, r3, #1
   1ddb8:	str	r3, [r6, #20]
   1ddbc:	ldrb	r3, [r4]
   1ddc0:	cmp	r3, #57	; 0x39
   1ddc4:	bhi	1de04 <flatcc_json_parser_generic_json@@Base+0x1464>
   1ddc8:	cmp	r3, #48	; 0x30
   1ddcc:	bcs	1d7cc <flatcc_json_parser_generic_json@@Base+0xe2c>
   1ddd0:	cmp	r3, #34	; 0x22
   1ddd4:	beq	1d7a8 <flatcc_json_parser_generic_json@@Base+0xe08>
   1ddd8:	cmp	r3, #45	; 0x2d
   1dddc:	beq	1d7cc <flatcc_json_parser_generic_json@@Base+0xe2c>
   1dde0:	mov	r5, r4
   1dde4:	b	1cc3c <flatcc_json_parser_generic_json@@Base+0x29c>
   1dde8:	ldrb	r1, [r2, #1]
   1ddec:	cmp	r1, #32
   1ddf0:	addhi	r2, r2, #1
   1ddf4:	bls	1d864 <flatcc_json_parser_generic_json@@Base+0xec4>
   1ddf8:	cmp	r4, r2
   1ddfc:	bne	1dbf8 <flatcc_json_parser_generic_json@@Base+0x1258>
   1de00:	b	1d898 <flatcc_json_parser_generic_json@@Base+0xef8>
   1de04:	cmp	r3, #91	; 0x5b
   1de08:	beq	1d390 <flatcc_json_parser_generic_json@@Base+0x9f0>
   1de0c:	cmp	r3, #123	; 0x7b
   1de10:	moveq	r5, r4
   1de14:	beq	1ca0c <flatcc_json_parser_generic_json@@Base+0x6c>
   1de18:	b	1dde0 <flatcc_json_parser_generic_json@@Base+0x1440>
   1de1c:	mov	r0, r4
   1de20:	ldr	r3, [r6, #24]
   1de24:	cmp	r3, #0
   1de28:	bne	1d7cc <flatcc_json_parser_generic_json@@Base+0xe2c>
   1de2c:	ldr	r3, [r6, #4]
   1de30:	mov	r2, #6
   1de34:	str	r2, [r6, #24]
   1de38:	str	r0, [r6, #36]	; 0x24
   1de3c:	sub	r3, r0, r3
   1de40:	mov	r0, r4
   1de44:	add	r3, r3, #1
   1de48:	str	r3, [r6, #20]
   1de4c:	b	1d7d0 <flatcc_json_parser_generic_json@@Base+0xe30>
   1de50:	ldr	r3, [r6, #24]
   1de54:	cmp	r3, #0
   1de58:	bne	1d7cc <flatcc_json_parser_generic_json@@Base+0xe2c>
   1de5c:	ldr	r3, [r6, #4]
   1de60:	mov	r2, #20
   1de64:	mov	r0, r4
   1de68:	str	r2, [r6, #24]
   1de6c:	str	r1, [r6, #36]	; 0x24
   1de70:	sub	r3, r1, r3
   1de74:	add	r3, r3, #1
   1de78:	str	r3, [r6, #20]
   1de7c:	b	1d7d0 <flatcc_json_parser_generic_json@@Base+0xe30>
   1de80:	add	r0, r2, #1
   1de84:	cmp	r4, r0
   1de88:	beq	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1de8c:	ldrb	r3, [r2, #1]
   1de90:	sub	r1, r3, #48	; 0x30
   1de94:	cmp	r1, #9
   1de98:	bhi	1e15c <flatcc_json_parser_generic_json@@Base+0x17bc>
   1de9c:	add	r2, r2, #2
   1dea0:	cmp	r4, r2
   1dea4:	mov	r0, r2
   1dea8:	beq	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1deac:	ldrb	r3, [r2], #1
   1deb0:	sub	r1, r3, #48	; 0x30
   1deb4:	cmp	r1, #9
   1deb8:	bls	1dea0 <flatcc_json_parser_generic_json@@Base+0x1500>
   1debc:	cmp	r3, #32
   1dec0:	beq	1cb48 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1dec4:	bls	1dee8 <flatcc_json_parser_generic_json@@Base+0x1548>
   1dec8:	cmp	r3, #58	; 0x3a
   1decc:	beq	1cb48 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1ded0:	bls	1df04 <flatcc_json_parser_generic_json@@Base+0x1564>
   1ded4:	cmp	r3, #93	; 0x5d
   1ded8:	beq	1cb48 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1dedc:	cmp	r3, #125	; 0x7d
   1dee0:	bne	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1dee4:	b	1cb48 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1dee8:	cmp	r3, #9
   1deec:	bcc	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1def0:	cmp	r3, #11
   1def4:	bls	1cb48 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1def8:	cmp	r3, #13
   1defc:	bne	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1df00:	b	1cb48 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1df04:	cmp	r3, #44	; 0x2c
   1df08:	bne	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1df0c:	b	1cb48 <flatcc_json_parser_generic_json@@Base+0x1a8>
   1df10:	add	r0, r5, #1
   1df14:	cmp	r4, r0
   1df18:	beq	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1df1c:	ldrb	r3, [r5, #1]
   1df20:	b	1d6f8 <flatcc_json_parser_generic_json@@Base+0xd58>
   1df24:	ldrb	r1, [r2, #1]
   1df28:	b	1dc24 <flatcc_json_parser_generic_json@@Base+0x1284>
   1df2c:	add	r2, r2, #1
   1df30:	b	1d848 <flatcc_json_parser_generic_json@@Base+0xea8>
   1df34:	ldrb	r3, [r0, #1]
   1df38:	sub	r3, r3, #48	; 0x30
   1df3c:	cmp	r3, #9
   1df40:	bhi	1dff0 <flatcc_json_parser_generic_json@@Base+0x1650>
   1df44:	add	r2, r0, #2
   1df48:	cmp	r4, r2
   1df4c:	beq	1de1c <flatcc_json_parser_generic_json@@Base+0x147c>
   1df50:	ldrb	r3, [r0, #2]
   1df54:	sub	r1, r3, #48	; 0x30
   1df58:	cmp	r1, #9
   1df5c:	bhi	1e154 <flatcc_json_parser_generic_json@@Base+0x17b4>
   1df60:	add	r2, r0, #3
   1df64:	b	1df78 <flatcc_json_parser_generic_json@@Base+0x15d8>
   1df68:	ldrb	r3, [r2], #1
   1df6c:	sub	r1, r3, #48	; 0x30
   1df70:	cmp	r1, #9
   1df74:	bhi	1d700 <flatcc_json_parser_generic_json@@Base+0xd60>
   1df78:	cmp	r4, r2
   1df7c:	mov	r0, r2
   1df80:	bne	1df68 <flatcc_json_parser_generic_json@@Base+0x15c8>
   1df84:	b	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1df88:	sub	r3, r4, r0
   1df8c:	add	r2, r0, #1
   1df90:	cmp	r3, #1
   1df94:	ble	1dfa4 <flatcc_json_parser_generic_json@@Base+0x1604>
   1df98:	ldrb	r3, [r0, #1]
   1df9c:	cmp	r3, #10
   1dfa0:	addeq	r2, r0, #2
   1dfa4:	mov	r0, r2
   1dfa8:	ldr	r3, [r6, #16]
   1dfac:	str	r0, [r6, #4]
   1dfb0:	add	r3, r3, #1
   1dfb4:	str	r3, [r6, #16]
   1dfb8:	cmp	r4, r0
   1dfbc:	beq	1cbbc <flatcc_json_parser_generic_json@@Base+0x21c>
   1dfc0:	ldrb	r2, [r0]
   1dfc4:	cmp	r2, #32
   1dfc8:	bls	1da6c <flatcc_json_parser_generic_json@@Base+0x10cc>
   1dfcc:	b	1d68c <flatcc_json_parser_generic_json@@Base+0xcec>
   1dfd0:	add	r0, r0, #1
   1dfd4:	b	1dfa8 <flatcc_json_parser_generic_json@@Base+0x1608>
   1dfd8:	add	r0, r0, #1
   1dfdc:	b	1dfb8 <flatcc_json_parser_generic_json@@Base+0x1618>
   1dfe0:	ldrb	r3, [r5, #2]
   1dfe4:	cmp	r3, #32
   1dfe8:	bls	1ce68 <flatcc_json_parser_generic_json@@Base+0x4c8>
   1dfec:	b	1d210 <flatcc_json_parser_generic_json@@Base+0x870>
   1dff0:	ldr	r3, [r6, #24]
   1dff4:	cmp	r3, #0
   1dff8:	bne	1d7cc <flatcc_json_parser_generic_json@@Base+0xe2c>
   1dffc:	ldr	r2, [r6, #4]
   1e000:	add	r3, r0, #1
   1e004:	mov	r1, #6
   1e008:	mov	r0, r4
   1e00c:	str	r1, [r6, #24]
   1e010:	str	r3, [r6, #36]	; 0x24
   1e014:	sub	r3, r3, r2
   1e018:	add	r3, r3, #1
   1e01c:	str	r3, [r6, #20]
   1e020:	b	1d7d0 <flatcc_json_parser_generic_json@@Base+0xe30>
   1e024:	ldr	r3, [r6, #24]
   1e028:	cmp	r3, #0
   1e02c:	bne	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1e030:	ldr	r3, [r6, #4]
   1e034:	mov	r2, #2
   1e038:	sub	r3, r5, r3
   1e03c:	mov	r0, r4
   1e040:	str	r2, [r6, #24]
   1e044:	add	r3, r3, #1
   1e048:	str	r3, [r6, #20]
   1e04c:	str	r5, [r6, #36]	; 0x24
   1e050:	b	1cc00 <flatcc_json_parser_generic_json@@Base+0x260>
   1e054:	ldr	r1, [r6, #24]
   1e058:	cmp	r1, #0
   1e05c:	bne	1d9a4 <flatcc_json_parser_generic_json@@Base+0x1004>
   1e060:	ldr	r3, [r6, #4]
   1e064:	mov	r2, #5
   1e068:	mov	r1, r2
   1e06c:	str	r2, [r6, #24]
   1e070:	str	r5, [r6, #36]	; 0x24
   1e074:	sub	r3, r5, r3
   1e078:	add	r3, r3, #1
   1e07c:	str	r3, [r6, #20]
   1e080:	b	1d9a4 <flatcc_json_parser_generic_json@@Base+0x1004>
   1e084:	cmp	r3, #46	; 0x2e
   1e088:	bne	1d848 <flatcc_json_parser_generic_json@@Base+0xea8>
   1e08c:	ldr	r1, [r6, #24]
   1e090:	cmp	r1, #0
   1e094:	bne	1d9a4 <flatcc_json_parser_generic_json@@Base+0x1004>
   1e098:	ldr	r2, [r6, #4]
   1e09c:	mov	r3, #5
   1e0a0:	mov	r1, r3
   1e0a4:	str	r3, [r6, #24]
   1e0a8:	str	r0, [r6, #36]	; 0x24
   1e0ac:	sub	r3, r0, r2
   1e0b0:	add	r3, r3, #1
   1e0b4:	str	r3, [r6, #20]
   1e0b8:	b	1d9a4 <flatcc_json_parser_generic_json@@Base+0x1004>
   1e0bc:	ldr	r3, [r6, #24]
   1e0c0:	cmp	r3, #0
   1e0c4:	bne	1d7d0 <flatcc_json_parser_generic_json@@Base+0xe30>
   1e0c8:	ldr	r3, [r6, #4]
   1e0cc:	mov	r2, #6
   1e0d0:	str	r2, [r6, #24]
   1e0d4:	str	r4, [r6, #36]	; 0x24
   1e0d8:	sub	r3, r4, r3
   1e0dc:	add	r3, r3, #1
   1e0e0:	str	r3, [r6, #20]
   1e0e4:	b	1d7d0 <flatcc_json_parser_generic_json@@Base+0xe30>
   1e0e8:	ldr	r3, [r6, #24]
   1e0ec:	cmp	r3, #0
   1e0f0:	bne	1d7cc <flatcc_json_parser_generic_json@@Base+0xe2c>
   1e0f4:	ldr	r3, [r6, #4]
   1e0f8:	mov	r2, #6
   1e0fc:	mov	r0, r4
   1e100:	str	r2, [r6, #24]
   1e104:	str	r4, [r6, #36]	; 0x24
   1e108:	sub	r3, r4, r3
   1e10c:	add	r3, r3, #1
   1e110:	str	r3, [r6, #20]
   1e114:	b	1d7d0 <flatcc_json_parser_generic_json@@Base+0xe30>
   1e118:	cmp	r3, #57	; 0x39
   1e11c:	bhi	1c9fc <flatcc_json_parser_generic_json@@Base+0x5c>
   1e120:	cmp	r3, #48	; 0x30
   1e124:	bcs	1d7cc <flatcc_json_parser_generic_json@@Base+0xe2c>
   1e128:	cmp	r3, #34	; 0x22
   1e12c:	beq	1d7a4 <flatcc_json_parser_generic_json@@Base+0xe04>
   1e130:	cmp	r3, #45	; 0x2d
   1e134:	bne	1cc3c <flatcc_json_parser_generic_json@@Base+0x29c>
   1e138:	b	1d7cc <flatcc_json_parser_generic_json@@Base+0xe2c>
   1e13c:	ldr	r3, [r6, #24]
   1e140:	cmp	r3, #0
   1e144:	bne	1d5a4 <flatcc_json_parser_generic_json@@Base+0xc04>
   1e148:	mov	r1, #4
   1e14c:	ldr	r3, [r6, #4]
   1e150:	b	1d8ac <flatcc_json_parser_generic_json@@Base+0xf0c>
   1e154:	mov	r0, r2
   1e158:	b	1d700 <flatcc_json_parser_generic_json@@Base+0xd60>
   1e15c:	cmp	r3, #32
   1e160:	beq	1cb50 <flatcc_json_parser_generic_json@@Base+0x1b0>
   1e164:	bls	1e188 <flatcc_json_parser_generic_json@@Base+0x17e8>
   1e168:	cmp	r3, #58	; 0x3a
   1e16c:	beq	1cb50 <flatcc_json_parser_generic_json@@Base+0x1b0>
   1e170:	bls	1e1a4 <flatcc_json_parser_generic_json@@Base+0x1804>
   1e174:	cmp	r3, #93	; 0x5d
   1e178:	beq	1cb50 <flatcc_json_parser_generic_json@@Base+0x1b0>
   1e17c:	cmp	r3, #125	; 0x7d
   1e180:	bne	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1e184:	b	1cb50 <flatcc_json_parser_generic_json@@Base+0x1b0>
   1e188:	cmp	r3, #9
   1e18c:	bcc	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1e190:	cmp	r3, #11
   1e194:	bls	1cb50 <flatcc_json_parser_generic_json@@Base+0x1b0>
   1e198:	cmp	r3, #13
   1e19c:	bne	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1e1a0:	b	1cb50 <flatcc_json_parser_generic_json@@Base+0x1b0>
   1e1a4:	cmp	r3, #44	; 0x2c
   1e1a8:	bne	1de20 <flatcc_json_parser_generic_json@@Base+0x1480>
   1e1ac:	b	1cb50 <flatcc_json_parser_generic_json@@Base+0x1b0>
   1e1b0:	mov	r2, r4
   1e1b4:	ldr	r1, [r6, #24]
   1e1b8:	b	1d89c <flatcc_json_parser_generic_json@@Base+0xefc>

0001e1bc <flatcc_json_parser_unmatched_symbol@@Base>:
   1e1bc:	ldr	r3, [r0, #8]
   1e1c0:	tst	r3, #1
   1e1c4:	bne	1e1f8 <flatcc_json_parser_unmatched_symbol@@Base+0x3c>
   1e1c8:	ldr	r3, [r0, #24]
   1e1cc:	cmp	r3, #0
   1e1d0:	bne	1e1f0 <flatcc_json_parser_unmatched_symbol@@Base+0x34>
   1e1d4:	ldr	r3, [r0, #4]
   1e1d8:	mov	ip, #13
   1e1dc:	str	r1, [r0, #36]	; 0x24
   1e1e0:	str	ip, [r0, #24]
   1e1e4:	sub	r1, r1, r3
   1e1e8:	add	r1, r1, #1
   1e1ec:	str	r1, [r0, #20]
   1e1f0:	mov	r0, r2
   1e1f4:	bx	lr
   1e1f8:	ldr	r3, [r0, #12]
   1e1fc:	str	r4, [sp, #-8]!
   1e200:	str	lr, [sp, #4]
   1e204:	cmp	r3, #0
   1e208:	bne	1e28c <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
   1e20c:	cmp	r1, r2
   1e210:	beq	1e258 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   1e214:	ldrb	ip, [r1]
   1e218:	cmp	ip, #34	; 0x22
   1e21c:	bne	1e23c <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   1e220:	b	1e514 <flatcc_json_parser_unmatched_symbol@@Base+0x358>
   1e224:	add	r1, r3, #1
   1e228:	cmp	r2, r1
   1e22c:	beq	1e258 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   1e230:	ldrb	ip, [r3, #1]
   1e234:	cmp	ip, #34	; 0x22
   1e238:	beq	1e514 <flatcc_json_parser_unmatched_symbol@@Base+0x358>
   1e23c:	cmp	ip, #92	; 0x5c
   1e240:	mov	r3, r1
   1e244:	bne	1e224 <flatcc_json_parser_unmatched_symbol@@Base+0x68>
   1e248:	sub	ip, r2, r1
   1e24c:	add	r3, r1, #1
   1e250:	cmp	ip, #1
   1e254:	bgt	1e224 <flatcc_json_parser_unmatched_symbol@@Base+0x68>
   1e258:	ldr	r3, [r0, #24]
   1e25c:	cmp	r3, #0
   1e260:	bne	1e284 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   1e264:	ldr	ip, [r0, #4]
   1e268:	mov	lr, #20
   1e26c:	mov	r3, lr
   1e270:	str	r1, [r0, #36]	; 0x24
   1e274:	str	lr, [r0, #24]
   1e278:	sub	r1, r1, ip
   1e27c:	add	r1, r1, #1
   1e280:	str	r1, [r0, #20]
   1e284:	mov	r1, r2
   1e288:	b	1e338 <flatcc_json_parser_unmatched_symbol@@Base+0x17c>
   1e28c:	cmp	r1, r2
   1e290:	beq	1e334 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   1e294:	ldrb	r3, [r1]
   1e298:	cmp	r3, #32
   1e29c:	bls	1e2e4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   1e2a0:	mov	lr, r1
   1e2a4:	sub	r1, r3, #48	; 0x30
   1e2a8:	cmp	r3, #46	; 0x2e
   1e2ac:	cmpne	r3, #95	; 0x5f
   1e2b0:	uxtb	ip, r1
   1e2b4:	add	r4, lr, #1
   1e2b8:	mov	r1, lr
   1e2bc:	beq	1e370 <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   1e2c0:	orr	lr, r3, #32
   1e2c4:	tst	r3, #128	; 0x80
   1e2c8:	sub	lr, lr, #97	; 0x61
   1e2cc:	bne	1e370 <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   1e2d0:	cmp	ip, #9
   1e2d4:	uxtb	lr, lr
   1e2d8:	bls	1e370 <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   1e2dc:	cmp	lr, #25
   1e2e0:	bls	1e36c <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   1e2e4:	sub	r3, r2, r1
   1e2e8:	cmp	r3, #1
   1e2ec:	ble	1e300 <flatcc_json_parser_unmatched_symbol@@Base+0x144>
   1e2f0:	ldrb	r3, [r1]
   1e2f4:	cmp	r3, #32
   1e2f8:	bhi	1e3a4 <flatcc_json_parser_unmatched_symbol@@Base+0x1e8>
   1e2fc:	beq	1e394 <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
   1e300:	cmp	r2, r1
   1e304:	beq	1e334 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   1e308:	ldrb	r3, [r1]
   1e30c:	cmp	r3, #32
   1e310:	bne	1e42c <flatcc_json_parser_unmatched_symbol@@Base+0x270>
   1e314:	add	ip, r1, #1
   1e318:	b	1e328 <flatcc_json_parser_unmatched_symbol@@Base+0x16c>
   1e31c:	ldrb	r3, [ip], #1
   1e320:	cmp	r3, #32
   1e324:	bne	1e42c <flatcc_json_parser_unmatched_symbol@@Base+0x270>
   1e328:	cmp	r2, ip
   1e32c:	mov	r1, ip
   1e330:	bne	1e31c <flatcc_json_parser_unmatched_symbol@@Base+0x160>
   1e334:	ldr	r3, [r0, #24]
   1e338:	cmp	r3, #0
   1e33c:	bne	1e35c <flatcc_json_parser_unmatched_symbol@@Base+0x1a0>
   1e340:	ldr	r3, [r0, #4]
   1e344:	mov	ip, #4
   1e348:	str	ip, [r0, #24]
   1e34c:	str	r1, [r0, #36]	; 0x24
   1e350:	sub	r1, r1, r3
   1e354:	add	r1, r1, #1
   1e358:	str	r1, [r0, #20]
   1e35c:	ldr	r4, [sp]
   1e360:	add	sp, sp, #4
   1e364:	mov	r0, r2
   1e368:	pop	{pc}		; (ldr pc, [sp], #4)
   1e36c:	add	r4, r1, #1
   1e370:	cmp	r2, r4
   1e374:	mov	r1, r4
   1e378:	mov	lr, r4
   1e37c:	beq	1e594 <flatcc_json_parser_unmatched_symbol@@Base+0x3d8>
   1e380:	ldrb	ip, [r4]
   1e384:	cmp	ip, #32
   1e388:	bls	1e594 <flatcc_json_parser_unmatched_symbol@@Base+0x3d8>
   1e38c:	mov	r3, ip
   1e390:	b	1e2a4 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   1e394:	ldrb	r3, [r1, #1]
   1e398:	cmp	r3, #32
   1e39c:	addhi	r1, r1, #1
   1e3a0:	bls	1e300 <flatcc_json_parser_unmatched_symbol@@Base+0x144>
   1e3a4:	cmp	r2, r1
   1e3a8:	beq	1e334 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   1e3ac:	cmp	r3, #58	; 0x3a
   1e3b0:	bne	1e334 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   1e3b4:	add	lr, r1, #1
   1e3b8:	sub	r3, r2, lr
   1e3bc:	cmp	r3, #1
   1e3c0:	ble	1e3e4 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   1e3c4:	ldrb	r3, [r1, #1]
   1e3c8:	cmp	r3, #32
   1e3cc:	bhi	1e418 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   1e3d0:	bne	1e3e4 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   1e3d4:	ldrb	r3, [r1, #2]
   1e3d8:	cmp	r3, #32
   1e3dc:	addhi	lr, r1, #2
   1e3e0:	bhi	1e418 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   1e3e4:	cmp	r2, lr
   1e3e8:	beq	1e418 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   1e3ec:	ldrb	ip, [lr]
   1e3f0:	cmp	ip, #32
   1e3f4:	bne	1e51c <flatcc_json_parser_unmatched_symbol@@Base+0x360>
   1e3f8:	add	r3, lr, #1
   1e3fc:	b	1e40c <flatcc_json_parser_unmatched_symbol@@Base+0x250>
   1e400:	ldrb	ip, [r3], #1
   1e404:	cmp	ip, #32
   1e408:	bne	1e51c <flatcc_json_parser_unmatched_symbol@@Base+0x360>
   1e40c:	cmp	r2, r3
   1e410:	mov	lr, r3
   1e414:	bne	1e400 <flatcc_json_parser_unmatched_symbol@@Base+0x244>
   1e418:	mov	r1, lr
   1e41c:	ldr	r4, [sp]
   1e420:	ldr	lr, [sp, #4]
   1e424:	add	sp, sp, #8
   1e428:	b	1c9a0 <flatcc_json_parser_generic_json@@Base>
   1e42c:	cmp	r3, #32
   1e430:	bhi	1e3ac <flatcc_json_parser_unmatched_symbol@@Base+0x1f0>
   1e434:	sub	r3, r3, #9
   1e438:	cmp	r3, #23
   1e43c:	ldrls	pc, [pc, r3, lsl #2]
   1e440:	b	1e4fc <flatcc_json_parser_unmatched_symbol@@Base+0x340>
   1e444:	strdeq	lr, [r1], -r4
   1e448:	andeq	lr, r1, r8, asr #9
   1e44c:	strdeq	lr, [r1], -ip
   1e450:	strdeq	lr, [r1], -ip
   1e454:	andeq	lr, r1, r4, lsr #9
   1e458:	strdeq	lr, [r1], -ip
   1e45c:	strdeq	lr, [r1], -ip
   1e460:	strdeq	lr, [r1], -ip
   1e464:	strdeq	lr, [r1], -ip
   1e468:	strdeq	lr, [r1], -ip
   1e46c:	strdeq	lr, [r1], -ip
   1e470:	strdeq	lr, [r1], -ip
   1e474:	strdeq	lr, [r1], -ip
   1e478:	strdeq	lr, [r1], -ip
   1e47c:	strdeq	lr, [r1], -ip
   1e480:	strdeq	lr, [r1], -ip
   1e484:	strdeq	lr, [r1], -ip
   1e488:	strdeq	lr, [r1], -ip
   1e48c:	strdeq	lr, [r1], -ip
   1e490:	strdeq	lr, [r1], -ip
   1e494:	strdeq	lr, [r1], -ip
   1e498:	strdeq	lr, [r1], -ip
   1e49c:	strdeq	lr, [r1], -ip
   1e4a0:	andeq	lr, r1, r0, lsl #6
   1e4a4:	sub	r3, r2, r1
   1e4a8:	add	ip, r1, #1
   1e4ac:	cmp	r3, #1
   1e4b0:	ble	1e4c0 <flatcc_json_parser_unmatched_symbol@@Base+0x304>
   1e4b4:	ldrb	r3, [r1, #1]
   1e4b8:	cmp	r3, #10
   1e4bc:	addeq	ip, r1, #2
   1e4c0:	mov	r1, ip
   1e4c4:	b	1e4cc <flatcc_json_parser_unmatched_symbol@@Base+0x310>
   1e4c8:	add	r1, r1, #1
   1e4cc:	ldr	r3, [r0, #16]
   1e4d0:	str	r1, [r0, #4]
   1e4d4:	add	r3, r3, #1
   1e4d8:	str	r3, [r0, #16]
   1e4dc:	cmp	r2, r1
   1e4e0:	beq	1e334 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   1e4e4:	ldrb	r3, [r1]
   1e4e8:	cmp	r3, #32
   1e4ec:	bls	1e434 <flatcc_json_parser_unmatched_symbol@@Base+0x278>
   1e4f0:	b	1e3ac <flatcc_json_parser_unmatched_symbol@@Base+0x1f0>
   1e4f4:	add	r1, r1, #1
   1e4f8:	b	1e4dc <flatcc_json_parser_unmatched_symbol@@Base+0x320>
   1e4fc:	ldr	r3, [r0, #24]
   1e500:	cmp	r3, #0
   1e504:	bne	1e35c <flatcc_json_parser_unmatched_symbol@@Base+0x1a0>
   1e508:	mov	ip, #5
   1e50c:	ldr	r3, [r0, #4]
   1e510:	b	1e348 <flatcc_json_parser_unmatched_symbol@@Base+0x18c>
   1e514:	add	r1, r1, #1
   1e518:	b	1e2e4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   1e51c:	cmp	ip, #32
   1e520:	bhi	1e418 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   1e524:	sub	ip, ip, #9
   1e528:	cmp	ip, #23
   1e52c:	ldrls	pc, [pc, ip, lsl #2]
   1e530:	b	1e624 <flatcc_json_parser_unmatched_symbol@@Base+0x468>
   1e534:	andeq	lr, r1, ip, lsl r6
   1e538:	andeq	lr, r1, r4, lsl r6
   1e53c:	andeq	lr, r1, r4, lsr #12
   1e540:	andeq	lr, r1, r4, lsr #12
   1e544:	andeq	lr, r1, ip, asr #11
   1e548:	andeq	lr, r1, r4, lsr #12
   1e54c:	andeq	lr, r1, r4, lsr #12
   1e550:	andeq	lr, r1, r4, lsr #12
   1e554:	andeq	lr, r1, r4, lsr #12
   1e558:	andeq	lr, r1, r4, lsr #12
   1e55c:	andeq	lr, r1, r4, lsr #12
   1e560:	andeq	lr, r1, r4, lsr #12
   1e564:	andeq	lr, r1, r4, lsr #12
   1e568:	andeq	lr, r1, r4, lsr #12
   1e56c:	andeq	lr, r1, r4, lsr #12
   1e570:	andeq	lr, r1, r4, lsr #12
   1e574:	andeq	lr, r1, r4, lsr #12
   1e578:	andeq	lr, r1, r4, lsr #12
   1e57c:	andeq	lr, r1, r4, lsr #12
   1e580:	andeq	lr, r1, r4, lsr #12
   1e584:	andeq	lr, r1, r4, lsr #12
   1e588:	andeq	lr, r1, r4, lsr #12
   1e58c:	andeq	lr, r1, r4, lsr #12
   1e590:	andeq	lr, r1, r4, ror #7
   1e594:	cmp	r3, #46	; 0x2e
   1e598:	bne	1e2e4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   1e59c:	ldr	r3, [r0, #24]
   1e5a0:	cmp	r3, #0
   1e5a4:	bne	1e284 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   1e5a8:	ldr	ip, [r0, #4]
   1e5ac:	mov	r1, #5
   1e5b0:	mov	r3, r1
   1e5b4:	str	r4, [r0, #36]	; 0x24
   1e5b8:	str	r1, [r0, #24]
   1e5bc:	sub	r4, r4, ip
   1e5c0:	add	r4, r4, #1
   1e5c4:	str	r4, [r0, #20]
   1e5c8:	b	1e284 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   1e5cc:	sub	r3, r2, lr
   1e5d0:	add	r1, lr, #1
   1e5d4:	cmp	r3, #1
   1e5d8:	ble	1e5e8 <flatcc_json_parser_unmatched_symbol@@Base+0x42c>
   1e5dc:	ldrb	r3, [lr, #1]
   1e5e0:	cmp	r3, #10
   1e5e4:	addeq	r1, lr, #2
   1e5e8:	mov	lr, r1
   1e5ec:	ldr	r3, [r0, #16]
   1e5f0:	str	lr, [r0, #4]
   1e5f4:	add	r3, r3, #1
   1e5f8:	str	r3, [r0, #16]
   1e5fc:	cmp	r2, lr
   1e600:	beq	1e418 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   1e604:	ldrb	ip, [lr]
   1e608:	cmp	ip, #32
   1e60c:	bls	1e524 <flatcc_json_parser_unmatched_symbol@@Base+0x368>
   1e610:	b	1e418 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   1e614:	add	lr, lr, #1
   1e618:	b	1e5ec <flatcc_json_parser_unmatched_symbol@@Base+0x430>
   1e61c:	add	lr, lr, #1
   1e620:	b	1e5fc <flatcc_json_parser_unmatched_symbol@@Base+0x440>
   1e624:	ldr	r3, [r0, #24]
   1e628:	cmp	r3, #0
   1e62c:	movne	lr, r2
   1e630:	bne	1e418 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   1e634:	ldr	r3, [r0, #4]
   1e638:	mov	r1, #5
   1e63c:	str	r1, [r0, #24]
   1e640:	str	lr, [r0, #36]	; 0x24
   1e644:	sub	r3, lr, r3
   1e648:	mov	lr, r2
   1e64c:	add	r3, r3, #1
   1e650:	str	r3, [r0, #20]
   1e654:	b	1e418 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>

0001e658 <flatcc_json_parser_integer@@Base>:
   1e658:	cmp	r1, r2
   1e65c:	beq	1e7a8 <flatcc_json_parser_integer@@Base+0x150>
   1e660:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e664:	mov	ip, r0
   1e668:	strd	r6, [sp, #8]
   1e66c:	strd	r8, [sp, #16]
   1e670:	strd	sl, [sp, #24]
   1e674:	str	lr, [sp, #32]
   1e678:	ldrb	lr, [r1]
   1e67c:	sub	lr, lr, #45	; 0x2d
   1e680:	clz	lr, lr
   1e684:	lsr	lr, lr, #5
   1e688:	add	r0, r1, lr
   1e68c:	cmp	r2, r0
   1e690:	str	lr, [r3]
   1e694:	beq	1e7bc <flatcc_json_parser_integer@@Base+0x164>
   1e698:	ldrb	r8, [r1, lr]
   1e69c:	sub	r3, r8, #48	; 0x30
   1e6a0:	cmp	r3, #9
   1e6a4:	bhi	1e7b0 <flatcc_json_parser_integer@@Base+0x158>
   1e6a8:	uxtb	r8, r8
   1e6ac:	mov	r9, #0
   1e6b0:	subs	r4, r8, #48	; 0x30
   1e6b4:	add	lr, r0, #1
   1e6b8:	sbc	r5, r9, #0
   1e6bc:	b	1e6f4 <flatcc_json_parser_integer@@Base+0x9c>
   1e6c0:	adds	r9, r9, r4
   1e6c4:	adc	r3, r3, r5
   1e6c8:	adds	r9, r9, r9
   1e6cc:	adc	r3, r3, r3
   1e6d0:	subs	r6, r9, #48	; 0x30
   1e6d4:	sbc	r7, r3, #0
   1e6d8:	adds	sl, r6, r8
   1e6dc:	adc	fp, r7, #0
   1e6e0:	cmp	fp, r5
   1e6e4:	mov	r5, fp
   1e6e8:	cmpeq	sl, r4
   1e6ec:	mov	r4, sl
   1e6f0:	bcc	1e790 <flatcc_json_parser_integer@@Base+0x138>
   1e6f4:	lsl	r3, r5, #2
   1e6f8:	cmp	lr, r2
   1e6fc:	mov	r0, lr
   1e700:	lsl	r9, r4, #2
   1e704:	orr	r3, r3, r4, lsr #30
   1e708:	beq	1e738 <flatcc_json_parser_integer@@Base+0xe0>
   1e70c:	ldrb	r8, [lr]
   1e710:	add	lr, lr, #1
   1e714:	sub	sl, r8, #48	; 0x30
   1e718:	cmp	sl, #9
   1e71c:	bls	1e6c0 <flatcc_json_parser_integer@@Base+0x68>
   1e720:	cmp	r1, r0
   1e724:	beq	1e740 <flatcc_json_parser_integer@@Base+0xe8>
   1e728:	and	r3, r8, #223	; 0xdf
   1e72c:	cmp	r8, #46	; 0x2e
   1e730:	cmpne	r3, #69	; 0x45
   1e734:	beq	1e758 <flatcc_json_parser_integer@@Base+0x100>
   1e738:	ldr	r3, [sp, #36]	; 0x24
   1e73c:	strd	r4, [r3]
   1e740:	ldrd	r4, [sp]
   1e744:	ldrd	r6, [sp, #8]
   1e748:	ldrd	r8, [sp, #16]
   1e74c:	ldrd	sl, [sp, #24]
   1e750:	add	sp, sp, #32
   1e754:	pop	{pc}		; (ldr pc, [sp], #4)
   1e758:	ldr	r3, [ip, #24]
   1e75c:	cmp	r3, #0
   1e760:	bne	1e788 <flatcc_json_parser_integer@@Base+0x130>
   1e764:	ldr	r3, [ip, #4]
   1e768:	mov	r1, #12
   1e76c:	sub	r3, r0, r3
   1e770:	str	r1, [ip, #24]
   1e774:	add	r3, r3, #1
   1e778:	str	r3, [ip, #20]
   1e77c:	str	r0, [ip, #36]	; 0x24
   1e780:	mov	r0, r2
   1e784:	b	1e740 <flatcc_json_parser_integer@@Base+0xe8>
   1e788:	mov	r0, r2
   1e78c:	b	1e740 <flatcc_json_parser_integer@@Base+0xe8>
   1e790:	ldr	r3, [ip, #24]
   1e794:	cmp	r3, #0
   1e798:	bne	1e788 <flatcc_json_parser_integer@@Base+0x130>
   1e79c:	mov	r1, #8
   1e7a0:	ldr	r3, [ip, #4]
   1e7a4:	b	1e76c <flatcc_json_parser_integer@@Base+0x114>
   1e7a8:	mov	r0, r2
   1e7ac:	bx	lr
   1e7b0:	mov	r4, #0
   1e7b4:	mov	r5, #0
   1e7b8:	b	1e720 <flatcc_json_parser_integer@@Base+0xc8>
   1e7bc:	mov	r4, #0
   1e7c0:	mov	r5, #0
   1e7c4:	b	1e738 <flatcc_json_parser_integer@@Base+0xe0>

0001e7c8 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1e7c8:	cmp	r1, r2
   1e7cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e7d0:	mov	r5, r2
   1e7d4:	mov	r4, r0
   1e7d8:	strd	r6, [sp, #8]
   1e7dc:	strd	r8, [sp, #16]
   1e7e0:	mov	r8, r3
   1e7e4:	strd	sl, [sp, #24]
   1e7e8:	str	lr, [sp, #32]
   1e7ec:	sub	sp, sp, #44	; 0x2c
   1e7f0:	beq	1e990 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
   1e7f4:	ldrb	r3, [r1]
   1e7f8:	cmp	r3, #34	; 0x22
   1e7fc:	bne	1e990 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
   1e800:	add	sl, r1, #1
   1e804:	cmp	r2, sl
   1e808:	beq	1eaa4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   1e80c:	ldrb	r3, [r1, #1]
   1e810:	cmp	r3, #34	; 0x22
   1e814:	cmpne	r3, #31
   1e818:	movhi	r2, #1
   1e81c:	movls	r2, #0
   1e820:	cmp	r3, #92	; 0x5c
   1e824:	moveq	r2, #0
   1e828:	andne	r2, r2, #1
   1e82c:	cmp	r2, #0
   1e830:	beq	1eacc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x304>
   1e834:	add	r1, r1, #2
   1e838:	cmp	r1, r5
   1e83c:	mov	r6, r1
   1e840:	beq	1eaa8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   1e844:	ldrb	r3, [r1], #1
   1e848:	cmp	r3, #34	; 0x22
   1e84c:	cmpne	r3, #31
   1e850:	movhi	r2, #1
   1e854:	movls	r2, #0
   1e858:	cmp	r3, #92	; 0x5c
   1e85c:	moveq	r2, #0
   1e860:	andne	r2, r2, #1
   1e864:	cmp	r2, #0
   1e868:	bne	1e838 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x70>
   1e86c:	cmp	r3, #31
   1e870:	bls	1ea58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x290>
   1e874:	cmp	r3, #34	; 0x22
   1e878:	bne	1e9bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   1e87c:	sub	r9, r6, sl
   1e880:	lsr	r7, r9, #2
   1e884:	and	r3, r9, #3
   1e888:	cmp	r3, #2
   1e88c:	add	r7, r7, r7, lsl #1
   1e890:	addeq	r7, r7, #1
   1e894:	beq	1e8a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd8>
   1e898:	cmp	r3, #3
   1e89c:	addeq	r7, r7, #2
   1e8a0:	mov	r2, #1
   1e8a4:	mvn	r3, #0
   1e8a8:	ldr	r0, [r4]
   1e8ac:	mov	r1, r2
   1e8b0:	bl	15eec <flatcc_builder_start_vector@@Base>
   1e8b4:	cmp	r0, #0
   1e8b8:	bne	1ea18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   1e8bc:	mov	r1, r7
   1e8c0:	ldr	r0, [r4]
   1e8c4:	bl	15248 <flatcc_builder_extend_vector@@Base>
   1e8c8:	subs	fp, r0, #0
   1e8cc:	beq	1ea18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   1e8d0:	ldr	r3, [pc, #1028]	; 1ecdc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x514>
   1e8d4:	ldr	r1, [sp, #80]	; 0x50
   1e8d8:	add	r2, r3, #256	; 0x100
   1e8dc:	cmp	r1, #0
   1e8e0:	moveq	r3, r2
   1e8e4:	cmp	r7, #0
   1e8e8:	movne	r1, r7
   1e8ec:	mvneq	r1, #0
   1e8f0:	cmp	r9, #0
   1e8f4:	beq	1ecbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4f4>
   1e8f8:	sub	r2, fp, #3
   1e8fc:	add	r0, fp, r1
   1e900:	str	fp, [sp, #4]
   1e904:	add	r2, r2, r1
   1e908:	mov	lr, sl
   1e90c:	str	r9, [sp, #8]
   1e910:	str	r0, [sp, #12]
   1e914:	str	r2, [sp, #24]
   1e918:	mov	r2, fp
   1e91c:	ldrd	r0, [sp, #8]
   1e920:	str	r2, [sp, #16]
   1e924:	sub	r2, r1, r2
   1e928:	mov	r1, #0
   1e92c:	str	r2, [sp, #20]
   1e930:	ldrb	r2, [lr, r1]
   1e934:	ldrb	ip, [r3, r2]
   1e938:	add	r2, sp, #40	; 0x28
   1e93c:	add	r2, r2, r1
   1e940:	cmp	ip, #63	; 0x3f
   1e944:	strb	ip, [r2, #-4]
   1e948:	bls	1ea88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
   1e94c:	cmp	ip, #65	; 0x41
   1e950:	beq	1eac0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f8>
   1e954:	cmp	ip, #66	; 0x42
   1e958:	movne	r2, r1
   1e95c:	beq	1ead4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x30c>
   1e960:	sub	r2, r0, r2
   1e964:	cmp	r1, #2
   1e968:	beq	1eb28 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   1e96c:	cmp	r1, #3
   1e970:	beq	1ec68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4a0>
   1e974:	cmp	r1, #0
   1e978:	subeq	r2, r9, r2
   1e97c:	beq	1ec5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x494>
   1e980:	ldr	r3, [sp, #8]
   1e984:	sub	r6, r9, r3
   1e988:	add	r6, sl, r6
   1e98c:	b	1e9bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   1e990:	ldr	r3, [r4, #24]
   1e994:	cmp	r3, #0
   1e998:	bne	1e9b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1e99c:	ldr	r3, [r4, #4]
   1e9a0:	mov	r2, #16
   1e9a4:	str	r1, [r4, #36]	; 0x24
   1e9a8:	str	r2, [r4, #24]
   1e9ac:	sub	r1, r1, r3
   1e9b0:	add	r1, r1, #1
   1e9b4:	str	r1, [r4, #20]
   1e9b8:	mov	r6, r5
   1e9bc:	ldr	r2, [sp, #80]	; 0x50
   1e9c0:	mov	r3, #0
   1e9c4:	str	r3, [r8]
   1e9c8:	cmp	r2, r3
   1e9cc:	ldr	r3, [r4, #24]
   1e9d0:	movne	r2, #32
   1e9d4:	moveq	r2, #31
   1e9d8:	cmp	r3, #0
   1e9dc:	bne	1ea50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   1e9e0:	ldr	r3, [r4, #4]
   1e9e4:	mov	r0, r5
   1e9e8:	str	r2, [r4, #24]
   1e9ec:	str	r6, [r4, #36]	; 0x24
   1e9f0:	sub	r6, r6, r3
   1e9f4:	add	r6, r6, #1
   1e9f8:	str	r6, [r4, #20]
   1e9fc:	add	sp, sp, #44	; 0x2c
   1ea00:	ldrd	r4, [sp]
   1ea04:	ldrd	r6, [sp, #8]
   1ea08:	ldrd	r8, [sp, #16]
   1ea0c:	ldrd	sl, [sp, #24]
   1ea10:	add	sp, sp, #32
   1ea14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea18:	mov	r3, #0
   1ea1c:	str	r3, [r8]
   1ea20:	ldr	r3, [r4, #24]
   1ea24:	cmp	r3, #0
   1ea28:	bne	1ea50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   1ea2c:	ldr	r3, [r4, #4]
   1ea30:	mov	r2, #33	; 0x21
   1ea34:	mov	r0, r5
   1ea38:	str	r6, [r4, #36]	; 0x24
   1ea3c:	str	r2, [r4, #24]
   1ea40:	sub	r6, r6, r3
   1ea44:	add	r6, r6, #1
   1ea48:	str	r6, [r4, #20]
   1ea4c:	b	1e9fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   1ea50:	mov	r0, r5
   1ea54:	b	1e9fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   1ea58:	ldr	r3, [r4, #24]
   1ea5c:	cmp	r3, #0
   1ea60:	bne	1e9b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1ea64:	ldr	r3, [r4, #4]
   1ea68:	mov	r2, #17
   1ea6c:	sub	r3, r6, r3
   1ea70:	str	r2, [r4, #24]
   1ea74:	add	r3, r3, #1
   1ea78:	str	r3, [r4, #20]
   1ea7c:	str	r6, [r4, #36]	; 0x24
   1ea80:	mov	r6, r5
   1ea84:	b	1e9bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   1ea88:	add	r1, r1, #1
   1ea8c:	cmp	r1, #3
   1ea90:	bhi	1ebd0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x408>
   1ea94:	cmp	r0, r1
   1ea98:	bne	1e930 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   1ea9c:	mov	r2, #0
   1eaa0:	b	1e964 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   1eaa4:	mov	r6, r2
   1eaa8:	ldr	r3, [r4, #24]
   1eaac:	cmp	r3, #0
   1eab0:	bne	1e9b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   1eab4:	mov	r2, #20
   1eab8:	ldr	r3, [r4, #4]
   1eabc:	b	1ea6c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a4>
   1eac0:	add	lr, lr, #1
   1eac4:	sub	r0, r0, #1
   1eac8:	b	1ea8c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   1eacc:	mov	r6, sl
   1ead0:	b	1e86c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa4>
   1ead4:	add	r2, r1, #1
   1ead8:	cmp	r2, #7
   1eadc:	cmpls	r2, r0
   1eae0:	bcs	1e960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   1eae4:	ldrb	ip, [lr, r2]
   1eae8:	add	lr, lr, r2
   1eaec:	ldrb	ip, [r3, ip]
   1eaf0:	sub	ip, ip, #65	; 0x41
   1eaf4:	cmp	ip, #1
   1eaf8:	bls	1eb14 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34c>
   1eafc:	b	1e960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   1eb00:	ldrb	ip, [lr, #1]!
   1eb04:	ldrb	ip, [r3, ip]
   1eb08:	sub	ip, ip, #65	; 0x41
   1eb0c:	cmp	ip, #1
   1eb10:	bhi	1e960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   1eb14:	add	r2, r2, #1
   1eb18:	cmp	r2, #7
   1eb1c:	cmpls	r2, r0
   1eb20:	bcc	1eb00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x338>
   1eb24:	b	1e960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   1eb28:	ldrb	r3, [sp, #37]	; 0x25
   1eb2c:	lsl	r1, r3, #4
   1eb30:	tst	r1, #240	; 0xf0
   1eb34:	bne	1e980 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1eb38:	ldrb	r0, [sp, #36]	; 0x24
   1eb3c:	lsr	r3, r3, #4
   1eb40:	sub	r2, r9, r2
   1eb44:	ldr	r1, [sp, #4]
   1eb48:	orr	r3, r3, r0, lsl #2
   1eb4c:	strb	r3, [r1], #1
   1eb50:	sub	r1, r1, fp
   1eb54:	cmp	r9, r2
   1eb58:	addne	r6, sl, r2
   1eb5c:	bne	1e9bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   1eb60:	cmp	r7, r1
   1eb64:	ldr	r0, [r4]
   1eb68:	bls	1eb80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b8>
   1eb6c:	sub	r1, r7, r1
   1eb70:	bl	15d04 <flatcc_builder_truncate_vector@@Base>
   1eb74:	cmp	r0, #0
   1eb78:	bne	1ea18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   1eb7c:	ldr	r0, [r4]
   1eb80:	bl	17320 <flatcc_builder_end_vector@@Base>
   1eb84:	cmp	r0, #0
   1eb88:	str	r0, [r8]
   1eb8c:	beq	1ea18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   1eb90:	ldrb	r3, [r6]
   1eb94:	cmp	r3, #34	; 0x22
   1eb98:	addeq	r0, r6, #1
   1eb9c:	beq	1e9fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   1eba0:	ldr	r3, [r4, #24]
   1eba4:	cmp	r3, #0
   1eba8:	bne	1ea50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   1ebac:	ldr	r3, [r4, #4]
   1ebb0:	mov	r2, #20
   1ebb4:	mov	r0, r5
   1ebb8:	str	r2, [r4, #24]
   1ebbc:	str	r6, [r4, #36]	; 0x24
   1ebc0:	sub	r3, r6, r3
   1ebc4:	add	r3, r3, #1
   1ebc8:	str	r3, [r4, #20]
   1ebcc:	b	1e9fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   1ebd0:	ldr	r2, [sp, #20]
   1ebd4:	cmp	r2, #2
   1ebd8:	bls	1e980 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1ebdc:	ldr	r2, [sp, #4]
   1ebe0:	sub	r0, r0, #4
   1ebe4:	add	lr, lr, #4
   1ebe8:	ldr	ip, [sp, #24]
   1ebec:	str	r0, [sp, #8]
   1ebf0:	ldrb	r1, [sp, #37]	; 0x25
   1ebf4:	add	r0, r2, #3
   1ebf8:	cmp	ip, r2
   1ebfc:	ldrb	ip, [sp, #36]	; 0x24
   1ec00:	str	r0, [sp, #16]
   1ec04:	ldrb	r2, [sp, #38]	; 0x26
   1ec08:	lsr	r0, r1, #4
   1ec0c:	str	r1, [sp, #20]
   1ec10:	ldrb	r1, [sp, #39]	; 0x27
   1ec14:	orr	r0, r0, ip, lsl #2
   1ec18:	ldr	ip, [sp, #20]
   1ec1c:	str	r1, [sp, #28]
   1ec20:	lsr	r1, r2, #2
   1ec24:	orr	r1, r1, ip, lsl #4
   1ec28:	ldr	ip, [sp, #28]
   1ec2c:	orr	r2, ip, r2, lsl #6
   1ec30:	ldr	ip, [sp, #4]
   1ec34:	strb	r0, [ip]
   1ec38:	strb	r1, [ip, #1]
   1ec3c:	strb	r2, [ip, #2]
   1ec40:	beq	1ecc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x500>
   1ec44:	ldr	r2, [sp, #8]
   1ec48:	cmp	r2, #0
   1ec4c:	ldr	r2, [sp, #16]
   1ec50:	str	r2, [sp, #4]
   1ec54:	bne	1e91c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x154>
   1ec58:	mov	r2, r9
   1ec5c:	ldr	r3, [sp, #16]
   1ec60:	sub	r1, r3, fp
   1ec64:	b	1eb54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   1ec68:	ldrb	r3, [sp, #38]	; 0x26
   1ec6c:	lsl	r1, r3, #6
   1ec70:	tst	r1, #192	; 0xc0
   1ec74:	bne	1e980 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1ec78:	ldr	r1, [sp, #20]
   1ec7c:	cmp	r1, #1
   1ec80:	beq	1e980 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1ec84:	ldrb	r0, [sp, #37]	; 0x25
   1ec88:	lsr	r3, r3, #2
   1ec8c:	sub	r2, r9, r2
   1ec90:	ldrb	lr, [sp, #36]	; 0x24
   1ec94:	ldr	r1, [sp, #4]
   1ec98:	lsr	ip, r0, #4
   1ec9c:	orr	r0, r3, r0, lsl #4
   1eca0:	orr	r3, ip, lr, lsl #2
   1eca4:	ldr	ip, [sp, #4]
   1eca8:	add	r1, r1, #2
   1ecac:	sub	r1, r1, fp
   1ecb0:	strb	r3, [ip]
   1ecb4:	strb	r0, [ip, #1]
   1ecb8:	b	1eb54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   1ecbc:	mov	r2, r9
   1ecc0:	str	fp, [sp, #16]
   1ecc4:	b	1ec5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x494>
   1ecc8:	ldr	r3, [sp, #16]
   1eccc:	sub	r1, r3, fp
   1ecd0:	ldr	r3, [sp, #8]
   1ecd4:	sub	r2, r9, r3
   1ecd8:	b	1eb54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   1ecdc:	andeq	r1, r2, r0, ror sp

0001ece0 <flatcc_json_parser_build_string@@Base>:
   1ece0:	cmp	r1, r2
   1ece4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ece8:	mov	r5, r0
   1ecec:	strd	r6, [sp, #8]
   1ecf0:	mov	r6, r2
   1ecf4:	mov	r7, r3
   1ecf8:	str	r8, [sp, #16]
   1ecfc:	str	lr, [sp, #20]
   1ed00:	sub	sp, sp, #8
   1ed04:	beq	1eea8 <flatcc_json_parser_build_string@@Base+0x1c8>
   1ed08:	ldrb	r3, [r1]
   1ed0c:	cmp	r3, #34	; 0x22
   1ed10:	bne	1eea8 <flatcc_json_parser_build_string@@Base+0x1c8>
   1ed14:	add	r8, r1, #1
   1ed18:	cmp	r2, r8
   1ed1c:	beq	1eff8 <flatcc_json_parser_build_string@@Base+0x318>
   1ed20:	ldrb	r2, [r1, #1]
   1ed24:	cmp	r2, #34	; 0x22
   1ed28:	cmpne	r2, #31
   1ed2c:	movhi	r3, #1
   1ed30:	movls	r3, #0
   1ed34:	cmp	r2, #92	; 0x5c
   1ed38:	moveq	r3, #0
   1ed3c:	andne	r3, r3, #1
   1ed40:	cmp	r3, #0
   1ed44:	beq	1f018 <flatcc_json_parser_build_string@@Base+0x338>
   1ed48:	add	r3, r1, #2
   1ed4c:	cmp	r3, r6
   1ed50:	mov	r4, r3
   1ed54:	beq	1effc <flatcc_json_parser_build_string@@Base+0x31c>
   1ed58:	ldrb	r2, [r3], #1
   1ed5c:	cmp	r2, #34	; 0x22
   1ed60:	cmpne	r2, #31
   1ed64:	movhi	r0, #1
   1ed68:	movls	r0, #0
   1ed6c:	cmp	r2, #92	; 0x5c
   1ed70:	moveq	r0, #0
   1ed74:	andne	r0, r0, #1
   1ed78:	cmp	r0, #0
   1ed7c:	bne	1ed4c <flatcc_json_parser_build_string@@Base+0x6c>
   1ed80:	cmp	r2, #31
   1ed84:	ldr	r0, [r5]
   1ed88:	bls	1ef74 <flatcc_json_parser_build_string@@Base+0x294>
   1ed8c:	cmp	r2, #34	; 0x22
   1ed90:	beq	1efac <flatcc_json_parser_build_string@@Base+0x2cc>
   1ed94:	bl	16414 <flatcc_builder_start_string@@Base>
   1ed98:	cmp	r0, #0
   1ed9c:	bne	1ee84 <flatcc_json_parser_build_string@@Base+0x1a4>
   1eda0:	sub	r2, r4, r8
   1eda4:	mov	r1, r8
   1eda8:	ldr	r0, [r5]
   1edac:	bl	159d0 <flatcc_builder_append_string@@Base>
   1edb0:	cmp	r0, #0
   1edb4:	beq	1ee84 <flatcc_json_parser_build_string@@Base+0x1a4>
   1edb8:	cmp	r6, r4
   1edbc:	beq	1f020 <flatcc_json_parser_build_string@@Base+0x340>
   1edc0:	ldrb	r3, [r4]
   1edc4:	cmp	r3, #34	; 0x22
   1edc8:	beq	1efe0 <flatcc_json_parser_build_string@@Base+0x300>
   1edcc:	mov	r1, r4
   1edd0:	add	r3, sp, #4
   1edd4:	mov	r2, r6
   1edd8:	mov	r0, r5
   1eddc:	bl	1bbd0 <flatcc_json_parser_string_escape@@Base>
   1ede0:	mov	r8, r0
   1ede4:	ldrb	r2, [sp, #4]
   1ede8:	add	r1, sp, #5
   1edec:	ldr	r0, [r5]
   1edf0:	bl	159d0 <flatcc_builder_append_string@@Base>
   1edf4:	cmp	r0, #0
   1edf8:	beq	1eff0 <flatcc_json_parser_build_string@@Base+0x310>
   1edfc:	cmp	r6, r8
   1ee00:	beq	1ef2c <flatcc_json_parser_build_string@@Base+0x24c>
   1ee04:	ldrb	r3, [r8]
   1ee08:	cmp	r3, #34	; 0x22
   1ee0c:	cmpne	r3, #31
   1ee10:	movhi	r2, #1
   1ee14:	movls	r2, #0
   1ee18:	cmp	r3, #92	; 0x5c
   1ee1c:	moveq	r2, #0
   1ee20:	andne	r2, r2, #1
   1ee24:	cmp	r2, #0
   1ee28:	beq	1ef6c <flatcc_json_parser_build_string@@Base+0x28c>
   1ee2c:	add	r2, r8, #1
   1ee30:	cmp	r6, r2
   1ee34:	mov	r4, r2
   1ee38:	beq	1ef30 <flatcc_json_parser_build_string@@Base+0x250>
   1ee3c:	ldrb	r3, [r2], #1
   1ee40:	cmp	r3, #34	; 0x22
   1ee44:	cmpne	r3, #31
   1ee48:	movhi	r1, #1
   1ee4c:	movls	r1, #0
   1ee50:	cmp	r3, #92	; 0x5c
   1ee54:	moveq	r1, #0
   1ee58:	andne	r1, r1, #1
   1ee5c:	cmp	r1, #0
   1ee60:	bne	1ee30 <flatcc_json_parser_build_string@@Base+0x150>
   1ee64:	cmp	r3, #31
   1ee68:	ldr	r0, [r5]
   1ee6c:	bls	1eee0 <flatcc_json_parser_build_string@@Base+0x200>
   1ee70:	sub	r2, r4, r8
   1ee74:	mov	r1, r8
   1ee78:	bl	159d0 <flatcc_builder_append_string@@Base>
   1ee7c:	cmp	r0, #0
   1ee80:	bne	1edc0 <flatcc_json_parser_build_string@@Base+0xe0>
   1ee84:	mov	r3, #0
   1ee88:	str	r3, [r7]
   1ee8c:	mov	r0, r4
   1ee90:	add	sp, sp, #8
   1ee94:	ldrd	r4, [sp]
   1ee98:	ldrd	r6, [sp, #8]
   1ee9c:	ldr	r8, [sp, #16]
   1eea0:	add	sp, sp, #20
   1eea4:	pop	{pc}		; (ldr pc, [sp], #4)
   1eea8:	ldr	r3, [r5, #24]
   1eeac:	cmp	r3, #0
   1eeb0:	bne	1eed0 <flatcc_json_parser_build_string@@Base+0x1f0>
   1eeb4:	ldr	r3, [r5, #4]
   1eeb8:	mov	r2, #16
   1eebc:	str	r2, [r5, #24]
   1eec0:	str	r1, [r5, #36]	; 0x24
   1eec4:	sub	r3, r1, r3
   1eec8:	add	r3, r3, #1
   1eecc:	str	r3, [r5, #20]
   1eed0:	mov	r4, r6
   1eed4:	mov	r8, r6
   1eed8:	ldr	r0, [r5]
   1eedc:	b	1ed94 <flatcc_json_parser_build_string@@Base+0xb4>
   1eee0:	ldr	r3, [r5, #24]
   1eee4:	cmp	r3, #0
   1eee8:	beq	1ef60 <flatcc_json_parser_build_string@@Base+0x280>
   1eeec:	bl	18820 <flatcc_builder_end_string@@Base>
   1eef0:	str	r0, [r7]
   1eef4:	mov	r4, r6
   1eef8:	ldr	r3, [r5, #24]
   1eefc:	cmp	r3, #0
   1ef00:	movne	r4, r6
   1ef04:	bne	1ee8c <flatcc_json_parser_build_string@@Base+0x1ac>
   1ef08:	ldr	r3, [r5, #4]
   1ef0c:	mov	r2, #20
   1ef10:	str	r2, [r5, #24]
   1ef14:	str	r4, [r5, #36]	; 0x24
   1ef18:	sub	r3, r4, r3
   1ef1c:	mov	r4, r6
   1ef20:	add	r3, r3, #1
   1ef24:	str	r3, [r5, #20]
   1ef28:	b	1ee8c <flatcc_json_parser_build_string@@Base+0x1ac>
   1ef2c:	mov	r4, r6
   1ef30:	ldr	r0, [r5]
   1ef34:	ldr	r3, [r5, #24]
   1ef38:	cmp	r3, #0
   1ef3c:	bne	1eeec <flatcc_json_parser_build_string@@Base+0x20c>
   1ef40:	ldr	r3, [r5, #4]
   1ef44:	mov	r2, #20
   1ef48:	str	r2, [r5, #24]
   1ef4c:	str	r4, [r5, #36]	; 0x24
   1ef50:	sub	r4, r4, r3
   1ef54:	add	r4, r4, #1
   1ef58:	str	r4, [r5, #20]
   1ef5c:	b	1eeec <flatcc_json_parser_build_string@@Base+0x20c>
   1ef60:	mov	r2, #17
   1ef64:	ldr	r3, [r5, #4]
   1ef68:	b	1ef48 <flatcc_json_parser_build_string@@Base+0x268>
   1ef6c:	mov	r4, r8
   1ef70:	b	1ee64 <flatcc_json_parser_build_string@@Base+0x184>
   1ef74:	ldr	r3, [r5, #24]
   1ef78:	cmp	r3, #0
   1ef7c:	bne	1efa4 <flatcc_json_parser_build_string@@Base+0x2c4>
   1ef80:	ldr	r3, [r5, #4]
   1ef84:	mov	r2, #17
   1ef88:	sub	r3, r4, r3
   1ef8c:	str	r2, [r5, #24]
   1ef90:	add	r3, r3, #1
   1ef94:	str	r3, [r5, #20]
   1ef98:	str	r4, [r5, #36]	; 0x24
   1ef9c:	mov	r4, r6
   1efa0:	b	1ed94 <flatcc_json_parser_build_string@@Base+0xb4>
   1efa4:	mov	r4, r6
   1efa8:	b	1ed94 <flatcc_json_parser_build_string@@Base+0xb4>
   1efac:	sub	r2, r4, r8
   1efb0:	mov	r1, r8
   1efb4:	bl	18514 <flatcc_builder_create_string@@Base>
   1efb8:	str	r0, [r7]
   1efbc:	ldrb	r3, [r4]
   1efc0:	cmp	r3, #34	; 0x22
   1efc4:	addeq	r4, r4, #1
   1efc8:	beq	1ee8c <flatcc_json_parser_build_string@@Base+0x1ac>
   1efcc:	ldr	r3, [r5, #24]
   1efd0:	cmp	r3, #0
   1efd4:	movne	r4, r6
   1efd8:	bne	1ee8c <flatcc_json_parser_build_string@@Base+0x1ac>
   1efdc:	b	1ef08 <flatcc_json_parser_build_string@@Base+0x228>
   1efe0:	ldr	r0, [r5]
   1efe4:	bl	18820 <flatcc_builder_end_string@@Base>
   1efe8:	str	r0, [r7]
   1efec:	b	1efbc <flatcc_json_parser_build_string@@Base+0x2dc>
   1eff0:	mov	r4, r8
   1eff4:	b	1ee84 <flatcc_json_parser_build_string@@Base+0x1a4>
   1eff8:	mov	r4, r2
   1effc:	ldr	r0, [r5]
   1f000:	ldr	r3, [r5, #24]
   1f004:	cmp	r3, #0
   1f008:	bne	1efa4 <flatcc_json_parser_build_string@@Base+0x2c4>
   1f00c:	mov	r2, #20
   1f010:	ldr	r3, [r5, #4]
   1f014:	b	1ef88 <flatcc_json_parser_build_string@@Base+0x2a8>
   1f018:	mov	r4, r8
   1f01c:	b	1ed80 <flatcc_json_parser_build_string@@Base+0xa0>
   1f020:	ldr	r0, [r5]
   1f024:	b	1eeec <flatcc_json_parser_build_string@@Base+0x20c>

0001f028 <flatcc_json_parser_prepare_unions@@Base>:
   1f028:	add	ip, r3, r3, lsl #1
   1f02c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f030:	mov	r4, r0
   1f034:	ldr	r0, [r0]
   1f038:	mov	r5, r2
   1f03c:	strd	r6, [sp, #8]
   1f040:	mov	r7, r1
   1f044:	lsl	r1, ip, #3
   1f048:	str	r8, [sp, #16]
   1f04c:	mov	r6, r3
   1f050:	ldr	r8, [sp, #24]
   1f054:	add	r1, r1, #8
   1f058:	str	lr, [sp, #20]
   1f05c:	bl	143fc <flatcc_builder_enter_user_frame@@Base>
   1f060:	cmp	r0, #0
   1f064:	str	r0, [r8]
   1f068:	bne	1f0ac <flatcc_json_parser_prepare_unions@@Base+0x84>
   1f06c:	ldr	r3, [r4, #24]
   1f070:	cmp	r3, #0
   1f074:	bne	1f094 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   1f078:	ldr	r3, [r4, #4]
   1f07c:	mov	r1, #33	; 0x21
   1f080:	str	r7, [r4, #36]	; 0x24
   1f084:	str	r1, [r4, #24]
   1f088:	sub	r7, r7, r3
   1f08c:	add	r7, r7, #1
   1f090:	str	r7, [r4, #20]
   1f094:	mov	r0, r5
   1f098:	ldrd	r4, [sp]
   1f09c:	ldrd	r6, [sp, #8]
   1f0a0:	ldr	r8, [sp, #16]
   1f0a4:	add	sp, sp, #20
   1f0a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f0ac:	mov	r1, r0
   1f0b0:	ldr	r0, [r4]
   1f0b4:	mov	r5, r7
   1f0b8:	bl	14554 <flatcc_builder_get_user_frame_ptr@@Base>
   1f0bc:	str	r6, [r0]
   1f0c0:	b	1f094 <flatcc_json_parser_prepare_unions@@Base+0x6c>

0001f0c4 <flatcc_json_parser_finalize_unions@@Base>:
   1f0c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f0c8:	mov	r4, r0
   1f0cc:	mov	r5, r1
   1f0d0:	mov	r1, r3
   1f0d4:	ldr	r0, [r0]
   1f0d8:	strd	r6, [sp, #8]
   1f0dc:	mov	r6, r3
   1f0e0:	mov	r7, r2
   1f0e4:	str	r8, [sp, #16]
   1f0e8:	str	lr, [sp, #20]
   1f0ec:	bl	14554 <flatcc_builder_get_user_frame_ptr@@Base>
   1f0f0:	ldr	r3, [r0, #4]
   1f0f4:	cmp	r3, #0
   1f0f8:	beq	1f12c <flatcc_json_parser_finalize_unions@@Base+0x68>
   1f0fc:	ldr	r3, [r4, #24]
   1f100:	cmp	r3, #0
   1f104:	movne	r5, r7
   1f108:	bne	1f12c <flatcc_json_parser_finalize_unions@@Base+0x68>
   1f10c:	ldr	r3, [r4, #4]
   1f110:	mov	r2, #27
   1f114:	str	r5, [r4, #36]	; 0x24
   1f118:	str	r2, [r4, #24]
   1f11c:	sub	r3, r5, r3
   1f120:	mov	r5, r7
   1f124:	add	r3, r3, #1
   1f128:	str	r3, [r4, #20]
   1f12c:	mov	r1, r6
   1f130:	ldr	r0, [r4]
   1f134:	bl	144dc <flatcc_builder_exit_user_frame_at@@Base>
   1f138:	mov	r0, r5
   1f13c:	ldrd	r4, [sp]
   1f140:	ldrd	r6, [sp, #8]
   1f144:	ldr	r8, [sp, #16]
   1f148:	add	sp, sp, #20
   1f14c:	pop	{pc}		; (ldr pc, [sp], #4)

0001f150 <flatcc_json_parser_union@@Base>:
   1f150:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f154:	mov	r5, r0
   1f158:	mov	r4, r3
   1f15c:	ldr	r0, [r0]
   1f160:	strd	r6, [sp, #8]
   1f164:	mov	r7, r1
   1f168:	mov	r6, r2
   1f16c:	str	r8, [sp, #16]
   1f170:	str	lr, [sp, #20]
   1f174:	sub	sp, sp, #16
   1f178:	ldr	r1, [sp, #44]	; 0x2c
   1f17c:	ldrh	r8, [sp, #40]	; 0x28
   1f180:	bl	14554 <flatcc_builder_get_user_frame_ptr@@Base>
   1f184:	add	r3, r4, r4, lsl #1
   1f188:	add	r3, r0, r3, lsl #3
   1f18c:	ldr	r2, [r3, #8]
   1f190:	cmp	r2, #0
   1f194:	beq	1f1e8 <flatcc_json_parser_union@@Base+0x98>
   1f198:	ldr	r3, [r5, #24]
   1f19c:	cmp	r3, #0
   1f1a0:	bne	1f1c8 <flatcc_json_parser_union@@Base+0x78>
   1f1a4:	ldr	r3, [r5, #4]
   1f1a8:	mov	r2, #28
   1f1ac:	mov	r4, r6
   1f1b0:	str	r2, [r5, #24]
   1f1b4:	str	r7, [r5, #36]	; 0x24
   1f1b8:	sub	r7, r7, r3
   1f1bc:	add	r7, r7, #1
   1f1c0:	str	r7, [r5, #20]
   1f1c4:	b	1f1cc <flatcc_json_parser_union@@Base+0x7c>
   1f1c8:	mov	r4, r6
   1f1cc:	mov	r0, r4
   1f1d0:	add	sp, sp, #16
   1f1d4:	ldrd	r4, [sp]
   1f1d8:	ldrd	r6, [sp, #8]
   1f1dc:	ldr	r8, [sp, #16]
   1f1e0:	add	sp, sp, #20
   1f1e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1e8:	ldrb	r2, [r3, #20]
   1f1ec:	mov	ip, r0
   1f1f0:	cmp	r2, #0
   1f1f4:	beq	1f288 <flatcc_json_parser_union@@Base+0x138>
   1f1f8:	ldrb	r3, [r3, #21]
   1f1fc:	cmp	r3, #0
   1f200:	strb	r3, [sp, #8]
   1f204:	beq	1f2c0 <flatcc_json_parser_union@@Base+0x170>
   1f208:	ldr	lr, [ip, #4]
   1f20c:	add	r4, sp, #12
   1f210:	mov	r1, r7
   1f214:	mov	r2, r6
   1f218:	mov	r0, r5
   1f21c:	add	r7, sp, #8
   1f220:	sub	lr, lr, #1
   1f224:	str	lr, [ip, #4]
   1f228:	str	r4, [sp]
   1f22c:	ldr	ip, [sp, #48]	; 0x30
   1f230:	blx	ip
   1f234:	cmp	r6, r0
   1f238:	mov	r4, r0
   1f23c:	beq	1f1cc <flatcc_json_parser_union@@Base+0x7c>
   1f240:	mov	r1, r8
   1f244:	ldm	r7, {r2, r3}
   1f248:	ldr	r0, [r5]
   1f24c:	bl	18f68 <flatcc_builder_table_add_union@@Base>
   1f250:	cmp	r0, #0
   1f254:	beq	1f1cc <flatcc_json_parser_union@@Base+0x7c>
   1f258:	ldr	r3, [r5, #24]
   1f25c:	cmp	r3, #0
   1f260:	bne	1f1c8 <flatcc_json_parser_union@@Base+0x78>
   1f264:	ldr	r3, [r5, #4]
   1f268:	mov	r2, #28
   1f26c:	str	r2, [r5, #24]
   1f270:	str	r4, [r5, #36]	; 0x24
   1f274:	sub	r3, r4, r3
   1f278:	mov	r4, r6
   1f27c:	add	r3, r3, #1
   1f280:	str	r3, [r5, #20]
   1f284:	b	1f1cc <flatcc_json_parser_union@@Base+0x7c>
   1f288:	ldr	lr, [ip, #4]
   1f28c:	mov	r2, r6
   1f290:	mov	r1, r7
   1f294:	mov	r0, r5
   1f298:	ldr	r6, [r5, #4]
   1f29c:	ldr	r4, [r5, #16]
   1f2a0:	add	lr, lr, #1
   1f2a4:	str	lr, [ip, #4]
   1f2a8:	str	r7, [r3, #8]
   1f2ac:	str	r6, [r3, #12]
   1f2b0:	str	r4, [r3, #16]
   1f2b4:	bl	1c9a0 <flatcc_json_parser_generic_json@@Base>
   1f2b8:	mov	r4, r0
   1f2bc:	b	1f1cc <flatcc_json_parser_union@@Base+0x7c>
   1f2c0:	ldr	r3, [r5, #24]
   1f2c4:	cmp	r3, #0
   1f2c8:	bne	1f1c8 <flatcc_json_parser_union@@Base+0x78>
   1f2cc:	mov	r2, #25
   1f2d0:	ldr	r3, [r5, #4]
   1f2d4:	b	1f1ac <flatcc_json_parser_union@@Base+0x5c>

0001f2d8 <flatcc_json_parser_union_type@@Base>:
   1f2d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f2dc:	mov	r5, r0
   1f2e0:	add	r4, r3, r3, lsl #1
   1f2e4:	ldr	r0, [r0]
   1f2e8:	strd	r6, [sp, #8]
   1f2ec:	lsl	r4, r4, #3
   1f2f0:	mov	r7, r2
   1f2f4:	strd	r8, [sp, #16]
   1f2f8:	strd	sl, [sp, #24]
   1f2fc:	mov	sl, r1
   1f300:	str	lr, [sp, #32]
   1f304:	sub	sp, sp, #36	; 0x24
   1f308:	ldrh	r3, [sp, #72]	; 0x48
   1f30c:	ldr	r1, [sp, #76]	; 0x4c
   1f310:	str	r3, [sp, #12]
   1f314:	bl	14554 <flatcc_builder_get_user_frame_ptr@@Base>
   1f318:	add	fp, r0, #8
   1f31c:	add	r6, fp, r4
   1f320:	ldrb	r3, [r6, #12]
   1f324:	cmp	r3, #0
   1f328:	beq	1f380 <flatcc_json_parser_union_type@@Base+0xa8>
   1f32c:	ldr	r3, [r5, #24]
   1f330:	cmp	r3, #0
   1f334:	beq	1f35c <flatcc_json_parser_union_type@@Base+0x84>
   1f338:	mov	r9, r7
   1f33c:	mov	r0, r9
   1f340:	add	sp, sp, #36	; 0x24
   1f344:	ldrd	r4, [sp]
   1f348:	ldrd	r6, [sp, #8]
   1f34c:	ldrd	r8, [sp, #16]
   1f350:	ldrd	sl, [sp, #24]
   1f354:	add	sp, sp, #32
   1f358:	pop	{pc}		; (ldr pc, [sp], #4)
   1f35c:	ldr	r3, [r5, #4]
   1f360:	mov	r2, #28
   1f364:	mov	r9, r7
   1f368:	str	sl, [r5, #36]	; 0x24
   1f36c:	str	r2, [r5, #24]
   1f370:	sub	sl, sl, r3
   1f374:	add	sl, sl, #1
   1f378:	str	sl, [r5, #20]
   1f37c:	b	1f33c <flatcc_json_parser_union_type@@Base+0x64>
   1f380:	mov	r8, r0
   1f384:	mov	r1, #0
   1f388:	str	r3, [sp, #20]
   1f38c:	mov	r0, #0
   1f390:	mov	r3, #1
   1f394:	cmp	sl, r7
   1f398:	strd	r0, [sp, #24]
   1f39c:	strh	r3, [r6, #12]
   1f3a0:	beq	1f4a0 <flatcc_json_parser_union_type@@Base+0x1c8>
   1f3a4:	add	r0, sp, #24
   1f3a8:	add	r3, sp, #20
   1f3ac:	mov	r2, r7
   1f3b0:	mov	r1, sl
   1f3b4:	str	r0, [sp]
   1f3b8:	mov	r0, r5
   1f3bc:	bl	1e658 <flatcc_json_parser_integer@@Base>
   1f3c0:	cmp	sl, r0
   1f3c4:	mov	r9, r0
   1f3c8:	bne	1f4a8 <flatcc_json_parser_union_type@@Base+0x1d0>
   1f3cc:	add	r0, r6, #13
   1f3d0:	mov	r1, r9
   1f3d4:	ldr	r3, [sp, #80]	; 0x50
   1f3d8:	mov	r2, r7
   1f3dc:	str	r0, [sp]
   1f3e0:	mov	r0, r5
   1f3e4:	bl	19c70 <flatcc_emitter_copy_buffer@@Base+0xe8>
   1f3e8:	mov	r9, r0
   1f3ec:	ldr	r1, [fp, r4]
   1f3f0:	ldr	r3, [r8, #4]
   1f3f4:	cmp	r1, #0
   1f3f8:	beq	1f4f8 <flatcc_json_parser_union_type@@Base+0x220>
   1f3fc:	cmp	r3, #0
   1f400:	beq	1f538 <flatcc_json_parser_union_type@@Base+0x260>
   1f404:	ldr	lr, [r6, #4]
   1f408:	sub	r3, r3, #1
   1f40c:	add	ip, sp, #28
   1f410:	mov	r2, r7
   1f414:	mov	r0, r5
   1f418:	ldr	sl, [r6, #8]
   1f41c:	add	r4, sp, #24
   1f420:	str	r3, [r8, #4]
   1f424:	ldr	r8, [r5, #16]
   1f428:	str	sl, [r5, #16]
   1f42c:	ldr	sl, [r5, #4]
   1f430:	str	lr, [r5, #4]
   1f434:	ldrb	r3, [r6, #13]
   1f438:	str	ip, [sp]
   1f43c:	ldr	ip, [sp, #84]	; 0x54
   1f440:	strb	r3, [sp, #24]
   1f444:	blx	ip
   1f448:	cmp	r7, r0
   1f44c:	beq	1f338 <flatcc_json_parser_union_type@@Base+0x60>
   1f450:	ldm	r4, {r2, r3}
   1f454:	ldr	r0, [r5]
   1f458:	ldr	r1, [sp, #12]
   1f45c:	bl	18f68 <flatcc_builder_table_add_union@@Base>
   1f460:	cmp	r0, #0
   1f464:	streq	sl, [r5, #4]
   1f468:	streq	r8, [r5, #16]
   1f46c:	beq	1f33c <flatcc_json_parser_union_type@@Base+0x64>
   1f470:	ldr	r3, [r5, #24]
   1f474:	cmp	r3, #0
   1f478:	bne	1f338 <flatcc_json_parser_union_type@@Base+0x60>
   1f47c:	ldr	r3, [r5, #4]
   1f480:	mov	r2, #28
   1f484:	str	r2, [r5, #24]
   1f488:	str	r9, [r5, #36]	; 0x24
   1f48c:	sub	r3, r9, r3
   1f490:	mov	r9, r7
   1f494:	add	r3, r3, #1
   1f498:	str	r3, [r5, #20]
   1f49c:	b	1f33c <flatcc_json_parser_union_type@@Base+0x64>
   1f4a0:	mov	r9, r7
   1f4a4:	b	1f3cc <flatcc_json_parser_union_type@@Base+0xf4>
   1f4a8:	ldr	r3, [sp, #20]
   1f4ac:	cmp	r3, #0
   1f4b0:	bne	1f50c <flatcc_json_parser_union_type@@Base+0x234>
   1f4b4:	ldrd	r2, [sp, #24]
   1f4b8:	cmp	r3, #0
   1f4bc:	cmpeq	r2, #255	; 0xff
   1f4c0:	strbls	r2, [r6, #13]
   1f4c4:	bls	1f3ec <flatcc_json_parser_union_type@@Base+0x114>
   1f4c8:	ldr	r3, [r5, #24]
   1f4cc:	cmp	r3, #0
   1f4d0:	bne	1f4f0 <flatcc_json_parser_union_type@@Base+0x218>
   1f4d4:	ldr	r3, [r5, #4]
   1f4d8:	mov	r2, #7
   1f4dc:	str	r2, [r5, #24]
   1f4e0:	str	r0, [r5, #36]	; 0x24
   1f4e4:	sub	r3, r0, r3
   1f4e8:	add	r3, r3, #1
   1f4ec:	str	r3, [r5, #20]
   1f4f0:	mov	r9, r7
   1f4f4:	b	1f3ec <flatcc_json_parser_union_type@@Base+0x114>
   1f4f8:	ldrb	r2, [r6, #13]
   1f4fc:	cmp	r2, #0
   1f500:	addne	r3, r3, #1
   1f504:	str	r3, [r8, #4]
   1f508:	b	1f33c <flatcc_json_parser_union_type@@Base+0x64>
   1f50c:	ldr	r3, [r5, #24]
   1f510:	cmp	r3, #0
   1f514:	bne	1f4f0 <flatcc_json_parser_union_type@@Base+0x218>
   1f518:	ldr	r3, [r5, #4]
   1f51c:	mov	r2, #8
   1f520:	str	r2, [r5, #24]
   1f524:	str	r0, [r5, #36]	; 0x24
   1f528:	sub	r9, r0, r3
   1f52c:	add	r9, r9, #1
   1f530:	str	r9, [r5, #20]
   1f534:	b	1f4f0 <flatcc_json_parser_union_type@@Base+0x218>
   1f538:	movw	r1, #8464	; 0x2110
   1f53c:	movt	r1, #2
   1f540:	ldr	r3, [pc, #12]	; 1f554 <flatcc_json_parser_union_type@@Base+0x27c>
   1f544:	movw	r0, #8540	; 0x215c
   1f548:	movt	r0, #2
   1f54c:	movw	r2, #965	; 0x3c5
   1f550:	bl	124b4 <__assert_fail@plt>
   1f554:	andeq	r1, r2, r0, ror pc

0001f558 <flatcc_json_parser_union_vector@@Base>:
   1f558:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f55c:	mov	r4, r3
   1f560:	mov	r5, r0
   1f564:	ldr	r0, [r0]
   1f568:	strd	r6, [sp, #8]
   1f56c:	mov	r6, r1
   1f570:	ldr	r1, [sp, #36]	; 0x24
   1f574:	strd	r8, [sp, #16]
   1f578:	mov	r9, r2
   1f57c:	ldrh	r8, [sp, #32]
   1f580:	str	sl, [sp, #24]
   1f584:	str	lr, [sp, #28]
   1f588:	ldr	r7, [sp, #40]	; 0x28
   1f58c:	bl	14554 <flatcc_builder_get_user_frame_ptr@@Base>
   1f590:	add	r3, r4, r4, lsl #1
   1f594:	add	ip, r0, #8
   1f598:	lsl	r3, r3, #3
   1f59c:	ldr	r2, [ip, r3]
   1f5a0:	add	r4, ip, r3
   1f5a4:	cmp	r2, #0
   1f5a8:	beq	1f5f0 <flatcc_json_parser_union_vector@@Base+0x98>
   1f5ac:	ldr	r3, [r5, #24]
   1f5b0:	cmp	r3, #0
   1f5b4:	bne	1f5d4 <flatcc_json_parser_union_vector@@Base+0x7c>
   1f5b8:	ldr	r3, [r5, #4]
   1f5bc:	mov	r2, #28
   1f5c0:	str	r6, [r5, #36]	; 0x24
   1f5c4:	str	r2, [r5, #24]
   1f5c8:	sub	r6, r6, r3
   1f5cc:	add	r6, r6, #1
   1f5d0:	str	r6, [r5, #20]
   1f5d4:	mov	r0, r9
   1f5d8:	ldrd	r4, [sp]
   1f5dc:	ldrd	r6, [sp, #8]
   1f5e0:	ldrd	r8, [sp, #16]
   1f5e4:	ldr	sl, [sp, #24]
   1f5e8:	add	sp, sp, #28
   1f5ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1f5f0:	ldrb	r1, [r4, #12]
   1f5f4:	mov	lr, r0
   1f5f8:	ldr	r2, [r0, #4]
   1f5fc:	cmp	r1, #0
   1f600:	bne	1f648 <flatcc_json_parser_union_vector@@Base+0xf0>
   1f604:	ldr	r8, [r5, #4]
   1f608:	add	r1, r2, #1
   1f60c:	mov	r0, r5
   1f610:	mov	r2, r9
   1f614:	ldr	r7, [r5, #16]
   1f618:	ldr	sl, [sp, #24]
   1f61c:	str	r1, [lr, #4]
   1f620:	mov	r1, r6
   1f624:	str	r8, [r4, #4]
   1f628:	str	r7, [r4, #8]
   1f62c:	str	r6, [ip, r3]
   1f630:	ldrd	r4, [sp]
   1f634:	ldrd	r6, [sp, #8]
   1f638:	ldrd	r8, [sp, #16]
   1f63c:	ldr	lr, [sp, #28]
   1f640:	add	sp, sp, #32
   1f644:	b	1c9a0 <flatcc_json_parser_generic_json@@Base>
   1f648:	sub	ip, r2, #1
   1f64c:	ldr	r3, [r4, #20]
   1f650:	mov	r2, r9
   1f654:	mov	r1, r6
   1f658:	mov	r0, r5
   1f65c:	ldr	sl, [sp, #24]
   1f660:	str	ip, [lr, #4]
   1f664:	str	r8, [sp, #36]	; 0x24
   1f668:	str	r7, [sp, #40]	; 0x28
   1f66c:	ldr	ip, [r4, #16]
   1f670:	ldrd	r4, [sp]
   1f674:	ldrd	r6, [sp, #8]
   1f678:	str	ip, [sp, #32]
   1f67c:	ldrd	r8, [sp, #16]
   1f680:	ldr	lr, [sp, #28]
   1f684:	add	sp, sp, #32
   1f688:	b	1b1e0 <flatcc_json_parser_space_ext@@Base+0x154>

0001f68c <flatcc_json_parser_union_type_vector@@Base>:
   1f68c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f690:	mov	r5, r2
   1f694:	strd	r6, [sp, #8]
   1f698:	mov	r6, r0
   1f69c:	mov	r7, r1
   1f6a0:	strd	r8, [sp, #16]
   1f6a4:	mov	r8, r3
   1f6a8:	strd	sl, [sp, #24]
   1f6ac:	add	r8, r8, r8, lsl #1
   1f6b0:	str	lr, [sp, #32]
   1f6b4:	sub	sp, sp, #44	; 0x2c
   1f6b8:	ldrh	r3, [sp, #80]	; 0x50
   1f6bc:	lsl	r8, r8, #3
   1f6c0:	ldr	r0, [r0]
   1f6c4:	ldr	r1, [sp, #84]	; 0x54
   1f6c8:	str	r3, [sp, #20]
   1f6cc:	bl	14554 <flatcc_builder_get_user_frame_ptr@@Base>
   1f6d0:	add	r0, r0, #8
   1f6d4:	add	fp, r0, r8
   1f6d8:	ldrb	r3, [fp, #12]
   1f6dc:	cmp	r3, #0
   1f6e0:	beq	1f738 <flatcc_json_parser_union_type_vector@@Base+0xac>
   1f6e4:	ldr	r3, [r6, #24]
   1f6e8:	cmp	r3, #0
   1f6ec:	bne	1f714 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1f6f0:	ldr	r3, [r6, #4]
   1f6f4:	mov	r2, #28
   1f6f8:	mov	r4, r5
   1f6fc:	str	r2, [r6, #24]
   1f700:	str	r7, [r6, #36]	; 0x24
   1f704:	sub	r7, r7, r3
   1f708:	add	r7, r7, #1
   1f70c:	str	r7, [r6, #20]
   1f710:	b	1f718 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1f714:	mov	r4, r5
   1f718:	mov	r0, r4
   1f71c:	add	sp, sp, #44	; 0x2c
   1f720:	ldrd	r4, [sp]
   1f724:	ldrd	r6, [sp, #8]
   1f728:	ldrd	r8, [sp, #16]
   1f72c:	ldrd	sl, [sp, #24]
   1f730:	add	sp, sp, #32
   1f734:	pop	{pc}		; (ldr pc, [sp], #4)
   1f738:	mov	r0, #1
   1f73c:	mvn	r3, #0
   1f740:	mov	r2, r0
   1f744:	mov	r1, r0
   1f748:	strb	r0, [fp, #12]
   1f74c:	ldr	r0, [r6]
   1f750:	bl	15eec <flatcc_builder_start_vector@@Base>
   1f754:	cmp	r0, #0
   1f758:	bne	1f7f8 <flatcc_json_parser_union_type_vector@@Base+0x16c>
   1f75c:	cmp	r7, r5
   1f760:	beq	1f770 <flatcc_json_parser_union_type_vector@@Base+0xe4>
   1f764:	ldrb	r3, [r7]
   1f768:	cmp	r3, #91	; 0x5b
   1f76c:	beq	1f840 <flatcc_json_parser_union_type_vector@@Base+0x1b4>
   1f770:	ldr	r3, [r6, #24]
   1f774:	cmp	r3, #0
   1f778:	bne	1f838 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   1f77c:	ldr	r3, [r6, #4]
   1f780:	mov	r2, #22
   1f784:	mov	r4, r5
   1f788:	str	r7, [r6, #36]	; 0x24
   1f78c:	str	r2, [r6, #24]
   1f790:	sub	r7, r7, r3
   1f794:	add	r7, r7, #1
   1f798:	str	r7, [r6, #20]
   1f79c:	ldr	r0, [r6]
   1f7a0:	bl	17530 <flatcc_builder_vector_count@@Base>
   1f7a4:	mov	r7, r0
   1f7a8:	mov	r1, r0
   1f7ac:	ldr	r0, [r6]
   1f7b0:	str	r7, [fp, #16]
   1f7b4:	bl	143fc <flatcc_builder_enter_user_frame@@Base>
   1f7b8:	mov	r1, r0
   1f7bc:	mov	r9, r0
   1f7c0:	ldr	r0, [r6]
   1f7c4:	bl	14554 <flatcc_builder_get_user_frame_ptr@@Base>
   1f7c8:	mov	sl, r0
   1f7cc:	ldr	r0, [r6]
   1f7d0:	bl	1753c <flatcc_builder_vector_edit@@Base>
   1f7d4:	mov	r1, r0
   1f7d8:	mov	r2, r7
   1f7dc:	mov	r0, sl
   1f7e0:	bl	1240c <memcpy@plt>
   1f7e4:	ldr	r0, [r6]
   1f7e8:	bl	17320 <flatcc_builder_end_vector@@Base>
   1f7ec:	subs	sl, r0, #0
   1f7f0:	bne	1fb64 <flatcc_json_parser_union_type_vector@@Base+0x4d8>
   1f7f4:	mov	r7, r4
   1f7f8:	ldr	r3, [r6, #24]
   1f7fc:	cmp	r3, #0
   1f800:	bne	1f714 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1f804:	mov	r2, #33	; 0x21
   1f808:	ldr	r3, [r6, #4]
   1f80c:	b	1f6f8 <flatcc_json_parser_union_type_vector@@Base+0x6c>
   1f810:	ldr	r3, [r6, #24]
   1f814:	cmp	r3, #0
   1f818:	bne	1f838 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   1f81c:	ldr	r3, [r6, #4]
   1f820:	mov	r2, #5
   1f824:	str	r7, [r6, #36]	; 0x24
   1f828:	str	r2, [r6, #24]
   1f82c:	sub	r7, r7, r3
   1f830:	add	r7, r7, #1
   1f834:	str	r7, [r6, #20]
   1f838:	mov	r4, r5
   1f83c:	b	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1f840:	add	r1, r7, #1
   1f844:	sub	r3, r5, r1
   1f848:	cmp	r3, #1
   1f84c:	ble	1f9f8 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   1f850:	ldrb	r2, [r7, #1]
   1f854:	cmp	r2, #32
   1f858:	bhi	20174 <flatcc_json_parser_union_type_vector@@Base+0xae8>
   1f85c:	bne	1f9f8 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   1f860:	ldrb	r2, [r7, #2]
   1f864:	cmp	r2, #32
   1f868:	addhi	r7, r7, #2
   1f86c:	bls	1f9f8 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   1f870:	cmp	r5, r7
   1f874:	beq	1f880 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   1f878:	cmp	r2, #93	; 0x5d
   1f87c:	beq	20190 <flatcc_json_parser_union_type_vector@@Base+0xb04>
   1f880:	mov	r9, #0
   1f884:	mov	r1, #1
   1f888:	ldr	r0, [r6]
   1f88c:	bl	15248 <flatcc_builder_extend_vector@@Base>
   1f890:	subs	sl, r0, #0
   1f894:	beq	1f7f8 <flatcc_json_parser_union_type_vector@@Base+0x16c>
   1f898:	mov	r2, #0
   1f89c:	mov	r3, #0
   1f8a0:	strb	r9, [sp, #27]
   1f8a4:	cmp	r5, r7
   1f8a8:	str	r9, [sp, #28]
   1f8ac:	strd	r2, [sp, #32]
   1f8b0:	beq	1f8dc <flatcc_json_parser_union_type_vector@@Base+0x250>
   1f8b4:	add	r0, sp, #32
   1f8b8:	add	r3, sp, #28
   1f8bc:	mov	r2, r5
   1f8c0:	mov	r1, r7
   1f8c4:	str	r0, [sp]
   1f8c8:	mov	r0, r6
   1f8cc:	bl	1e658 <flatcc_json_parser_integer@@Base>
   1f8d0:	cmp	r0, r7
   1f8d4:	mov	r4, r0
   1f8d8:	bne	1fd48 <flatcc_json_parser_union_type_vector@@Base+0x6bc>
   1f8dc:	add	r0, sp, #27
   1f8e0:	mov	r2, r5
   1f8e4:	ldr	r3, [sp, #88]	; 0x58
   1f8e8:	mov	r1, r7
   1f8ec:	str	r0, [sp]
   1f8f0:	mov	r0, r6
   1f8f4:	bl	19c70 <flatcc_emitter_copy_buffer@@Base+0xe8>
   1f8f8:	cmp	r5, r0
   1f8fc:	cmpne	r0, r7
   1f900:	mov	r4, r0
   1f904:	beq	1f7f4 <flatcc_json_parser_union_type_vector@@Base+0x168>
   1f908:	ldrb	r0, [sp, #27]
   1f90c:	ldr	r3, [sp, #96]	; 0x60
   1f910:	blx	r3
   1f914:	cmp	r0, #0
   1f918:	bne	1fd40 <flatcc_json_parser_union_type_vector@@Base+0x6b4>
   1f91c:	ldr	r3, [r6, #8]
   1f920:	tst	r3, #1
   1f924:	beq	20144 <flatcc_json_parser_union_type_vector@@Base+0xab8>
   1f928:	mov	r1, r0
   1f92c:	strb	r0, [sp, #27]
   1f930:	sub	r3, r5, r4
   1f934:	strb	r1, [sl]
   1f938:	cmp	r3, #1
   1f93c:	ble	1f950 <flatcc_json_parser_union_type_vector@@Base+0x2c4>
   1f940:	ldrb	r3, [r4]
   1f944:	cmp	r3, #32
   1f948:	bhi	1fcac <flatcc_json_parser_union_type_vector@@Base+0x620>
   1f94c:	beq	1fc9c <flatcc_json_parser_union_type_vector@@Base+0x610>
   1f950:	cmp	r4, r5
   1f954:	beq	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1f958:	ldrb	r3, [r4]
   1f95c:	cmp	r3, #32
   1f960:	bne	1f980 <flatcc_json_parser_union_type_vector@@Base+0x2f4>
   1f964:	add	r2, r4, #1
   1f968:	cmp	r5, r2
   1f96c:	mov	r4, r2
   1f970:	beq	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1f974:	ldrb	r3, [r2], #1
   1f978:	cmp	r3, #32
   1f97c:	beq	1f968 <flatcc_json_parser_union_type_vector@@Base+0x2dc>
   1f980:	cmp	r3, #32
   1f984:	bhi	1fafc <flatcc_json_parser_union_type_vector@@Base+0x470>
   1f988:	sub	r3, r3, #9
   1f98c:	cmp	r3, #23
   1f990:	ldrls	pc, [pc, r3, lsl #2]
   1f994:	b	1fb4c <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   1f998:	andeq	pc, r1, r4, asr #22
   1f99c:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f9a0:	andeq	pc, r1, ip, asr #22
   1f9a4:	andeq	pc, r1, ip, asr #22
   1f9a8:			; <UNDEFINED> instruction: 0x0001fab8
   1f9ac:	andeq	pc, r1, ip, asr #22
   1f9b0:	andeq	pc, r1, ip, asr #22
   1f9b4:	andeq	pc, r1, ip, asr #22
   1f9b8:	andeq	pc, r1, ip, asr #22
   1f9bc:	andeq	pc, r1, ip, asr #22
   1f9c0:	andeq	pc, r1, ip, asr #22
   1f9c4:	andeq	pc, r1, ip, asr #22
   1f9c8:	andeq	pc, r1, ip, asr #22
   1f9cc:	andeq	pc, r1, ip, asr #22
   1f9d0:	andeq	pc, r1, ip, asr #22
   1f9d4:	andeq	pc, r1, ip, asr #22
   1f9d8:	andeq	pc, r1, ip, asr #22
   1f9dc:	andeq	pc, r1, ip, asr #22
   1f9e0:	andeq	pc, r1, ip, asr #22
   1f9e4:	andeq	pc, r1, ip, asr #22
   1f9e8:	andeq	pc, r1, ip, asr #22
   1f9ec:	andeq	pc, r1, ip, asr #22
   1f9f0:	andeq	pc, r1, ip, asr #22
   1f9f4:	andeq	pc, r1, ip, lsr #21
   1f9f8:	cmp	r5, r1
   1f9fc:	beq	1fa2c <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   1fa00:	ldrb	r2, [r1]
   1fa04:	cmp	r2, #32
   1fa08:	bne	1fa34 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1fa0c:	add	r3, r1, #1
   1fa10:	b	1fa20 <flatcc_json_parser_union_type_vector@@Base+0x394>
   1fa14:	ldrb	r2, [r3], #1
   1fa18:	cmp	r2, #32
   1fa1c:	bne	1fa34 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1fa20:	cmp	r5, r3
   1fa24:	mov	r1, r3
   1fa28:	bne	1fa14 <flatcc_json_parser_union_type_vector@@Base+0x388>
   1fa2c:	mov	r7, r1
   1fa30:	b	1f880 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   1fa34:	cmp	r2, #32
   1fa38:	bhi	1fc50 <flatcc_json_parser_union_type_vector@@Base+0x5c4>
   1fa3c:	sub	r2, r2, #9
   1fa40:	cmp	r2, #23
   1fa44:	ldrls	pc, [pc, r2, lsl #2]
   1fa48:	b	1fc68 <flatcc_json_parser_union_type_vector@@Base+0x5dc>
   1fa4c:	andeq	pc, r1, r0, ror #24
   1fa50:	andeq	pc, r1, r8, asr ip	; <UNPREDICTABLE>
   1fa54:	andeq	pc, r1, r8, ror #24
   1fa58:	andeq	pc, r1, r8, ror #24
   1fa5c:	andeq	pc, r1, ip, lsl #24
   1fa60:	andeq	pc, r1, r8, ror #24
   1fa64:	andeq	pc, r1, r8, ror #24
   1fa68:	andeq	pc, r1, r8, ror #24
   1fa6c:	andeq	pc, r1, r8, ror #24
   1fa70:	andeq	pc, r1, r8, ror #24
   1fa74:	andeq	pc, r1, r8, ror #24
   1fa78:	andeq	pc, r1, r8, ror #24
   1fa7c:	andeq	pc, r1, r8, ror #24
   1fa80:	andeq	pc, r1, r8, ror #24
   1fa84:	andeq	pc, r1, r8, ror #24
   1fa88:	andeq	pc, r1, r8, ror #24
   1fa8c:	andeq	pc, r1, r8, ror #24
   1fa90:	andeq	pc, r1, r8, ror #24
   1fa94:	andeq	pc, r1, r8, ror #24
   1fa98:	andeq	pc, r1, r8, ror #24
   1fa9c:	andeq	pc, r1, r8, ror #24
   1faa0:	andeq	pc, r1, r8, ror #24
   1faa4:	andeq	pc, r1, r8, ror #24
   1faa8:	strdeq	pc, [r1], -r8
   1faac:	cmp	r5, r4
   1fab0:	bne	1f958 <flatcc_json_parser_union_type_vector@@Base+0x2cc>
   1fab4:	b	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1fab8:	sub	r3, r5, r4
   1fabc:	add	r2, r4, #1
   1fac0:	cmp	r3, #1
   1fac4:	ble	1fad4 <flatcc_json_parser_union_type_vector@@Base+0x448>
   1fac8:	ldrb	r3, [r4, #1]
   1facc:	cmp	r3, #10
   1fad0:	addeq	r2, r4, #2
   1fad4:	mov	r4, r2
   1fad8:	ldr	r3, [r6, #16]
   1fadc:	str	r4, [r6, #4]
   1fae0:	add	r3, r3, #1
   1fae4:	str	r3, [r6, #16]
   1fae8:	cmp	r5, r4
   1faec:	beq	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1faf0:	ldrb	r3, [r4]
   1faf4:	cmp	r3, #32
   1faf8:	bls	1f988 <flatcc_json_parser_union_type_vector@@Base+0x2fc>
   1fafc:	cmp	r3, #44	; 0x2c
   1fb00:	beq	1fcbc <flatcc_json_parser_union_type_vector@@Base+0x630>
   1fb04:	cmp	r3, #93	; 0x5d
   1fb08:	beq	1ff94 <flatcc_json_parser_union_type_vector@@Base+0x908>
   1fb0c:	ldr	r3, [r6, #24]
   1fb10:	cmp	r3, #0
   1fb14:	bne	1f838 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   1fb18:	ldr	r3, [r6, #4]
   1fb1c:	mov	r2, #9
   1fb20:	sub	r3, r4, r3
   1fb24:	str	r2, [r6, #24]
   1fb28:	add	r3, r3, #1
   1fb2c:	str	r3, [r6, #20]
   1fb30:	str	r4, [r6, #36]	; 0x24
   1fb34:	mov	r4, r5
   1fb38:	b	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1fb3c:	add	r4, r4, #1
   1fb40:	b	1fad8 <flatcc_json_parser_union_type_vector@@Base+0x44c>
   1fb44:	add	r4, r4, #1
   1fb48:	b	1fae8 <flatcc_json_parser_union_type_vector@@Base+0x45c>
   1fb4c:	ldr	r3, [r6, #24]
   1fb50:	cmp	r3, #0
   1fb54:	bne	1f838 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   1fb58:	mov	r2, #5
   1fb5c:	ldr	r3, [r6, #4]
   1fb60:	b	1fb20 <flatcc_json_parser_union_type_vector@@Base+0x494>
   1fb64:	ldr	r3, [sp, #20]
   1fb68:	ldr	r0, [r6]
   1fb6c:	sub	r1, r3, #1
   1fb70:	bl	18dc8 <flatcc_builder_table_add_offset@@Base>
   1fb74:	cmp	r0, #0
   1fb78:	beq	1f7f4 <flatcc_json_parser_union_type_vector@@Base+0x168>
   1fb7c:	str	sl, [r0]
   1fb80:	ldr	r0, [r6]
   1fb84:	ldr	r1, [sp, #84]	; 0x54
   1fb88:	bl	14554 <flatcc_builder_get_user_frame_ptr@@Base>
   1fb8c:	add	r3, r0, #8
   1fb90:	ldr	r1, [r3, r8]
   1fb94:	add	r8, r3, r8
   1fb98:	ldr	r3, [r0, #4]
   1fb9c:	str	r9, [r8, #20]
   1fba0:	cmp	r1, #0
   1fba4:	addeq	r3, r3, #1
   1fba8:	streq	r3, [r0, #4]
   1fbac:	beq	1f718 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1fbb0:	cmp	r3, #0
   1fbb4:	beq	202c0 <flatcc_json_parser_union_type_vector@@Base+0xc34>
   1fbb8:	sub	r2, r3, #1
   1fbbc:	ldmib	r8, {ip, lr}
   1fbc0:	mov	r3, r9
   1fbc4:	str	r2, [r0, #4]
   1fbc8:	mov	r2, r5
   1fbcc:	mov	r0, r6
   1fbd0:	str	r7, [sp]
   1fbd4:	ldr	r7, [sp, #20]
   1fbd8:	str	r7, [sp, #4]
   1fbdc:	ldr	r7, [sp, #92]	; 0x5c
   1fbe0:	str	r7, [sp, #8]
   1fbe4:	ldr	r8, [r6, #4]
   1fbe8:	str	ip, [r6, #4]
   1fbec:	ldr	r7, [r6, #16]
   1fbf0:	str	lr, [r6, #16]
   1fbf4:	bl	1b1e0 <flatcc_json_parser_space_ext@@Base+0x154>
   1fbf8:	cmp	r5, r0
   1fbfc:	beq	1f714 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1fc00:	str	r8, [r6, #4]
   1fc04:	str	r7, [r6, #16]
   1fc08:	b	1f718 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   1fc0c:	sub	r3, r5, r1
   1fc10:	add	r2, r1, #1
   1fc14:	cmp	r3, #1
   1fc18:	ble	1fc28 <flatcc_json_parser_union_type_vector@@Base+0x59c>
   1fc1c:	ldrb	r3, [r1, #1]
   1fc20:	cmp	r3, #10
   1fc24:	addeq	r2, r1, #2
   1fc28:	mov	r1, r2
   1fc2c:	ldr	r3, [r6, #16]
   1fc30:	str	r1, [r6, #4]
   1fc34:	add	r3, r3, #1
   1fc38:	str	r3, [r6, #16]
   1fc3c:	cmp	r5, r1
   1fc40:	beq	1fa2c <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   1fc44:	ldrb	r2, [r1]
   1fc48:	cmp	r2, #32
   1fc4c:	bls	1fa3c <flatcc_json_parser_union_type_vector@@Base+0x3b0>
   1fc50:	mov	r7, r1
   1fc54:	b	1f878 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   1fc58:	add	r1, r1, #1
   1fc5c:	b	1fc2c <flatcc_json_parser_union_type_vector@@Base+0x5a0>
   1fc60:	add	r1, r1, #1
   1fc64:	b	1fc3c <flatcc_json_parser_union_type_vector@@Base+0x5b0>
   1fc68:	ldr	r3, [r6, #24]
   1fc6c:	cmp	r3, #0
   1fc70:	movne	r7, r5
   1fc74:	bne	1f880 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   1fc78:	ldr	r3, [r6, #4]
   1fc7c:	mov	r2, #5
   1fc80:	mov	r7, r5
   1fc84:	str	r2, [r6, #24]
   1fc88:	str	r1, [r6, #36]	; 0x24
   1fc8c:	sub	r3, r1, r3
   1fc90:	add	r3, r3, #1
   1fc94:	str	r3, [r6, #20]
   1fc98:	b	1f880 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   1fc9c:	ldrb	r3, [r4, #1]
   1fca0:	cmp	r3, #32
   1fca4:	addhi	r4, r4, #1
   1fca8:	bls	1f950 <flatcc_json_parser_union_type_vector@@Base+0x2c4>
   1fcac:	cmp	r5, r4
   1fcb0:	beq	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1fcb4:	cmp	r3, #44	; 0x2c
   1fcb8:	bne	1fb04 <flatcc_json_parser_union_type_vector@@Base+0x478>
   1fcbc:	add	r7, r4, #1
   1fcc0:	sub	r3, r5, r7
   1fcc4:	cmp	r3, #1
   1fcc8:	ble	1fcdc <flatcc_json_parser_union_type_vector@@Base+0x650>
   1fccc:	ldrb	r3, [r4, #1]
   1fcd0:	cmp	r3, #32
   1fcd4:	bhi	20100 <flatcc_json_parser_union_type_vector@@Base+0xa74>
   1fcd8:	beq	200f0 <flatcc_json_parser_union_type_vector@@Base+0xa64>
   1fcdc:	cmp	r5, r7
   1fce0:	beq	1fd10 <flatcc_json_parser_union_type_vector@@Base+0x684>
   1fce4:	ldrb	r3, [r7]
   1fce8:	cmp	r3, #32
   1fcec:	bne	1fda0 <flatcc_json_parser_union_type_vector@@Base+0x714>
   1fcf0:	add	r2, r7, #1
   1fcf4:	b	1fd04 <flatcc_json_parser_union_type_vector@@Base+0x678>
   1fcf8:	ldrb	r3, [r2], #1
   1fcfc:	cmp	r3, #32
   1fd00:	bne	1fda0 <flatcc_json_parser_union_type_vector@@Base+0x714>
   1fd04:	cmp	r5, r2
   1fd08:	mov	r7, r2
   1fd0c:	bne	1fcf8 <flatcc_json_parser_union_type_vector@@Base+0x66c>
   1fd10:	ldr	r3, [r6, #24]
   1fd14:	cmp	r3, #0
   1fd18:	bne	1f838 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   1fd1c:	ldr	r3, [r6, #4]
   1fd20:	mov	r2, #9
   1fd24:	mov	r4, r5
   1fd28:	str	r2, [r6, #24]
   1fd2c:	str	r7, [r6, #36]	; 0x24
   1fd30:	sub	r3, r7, r3
   1fd34:	add	r3, r3, #1
   1fd38:	str	r3, [r6, #20]
   1fd3c:	b	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1fd40:	ldrb	r1, [sp, #27]
   1fd44:	b	1f930 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   1fd48:	ldr	r3, [sp, #28]
   1fd4c:	cmp	r3, #0
   1fd50:	bne	2010c <flatcc_json_parser_union_type_vector@@Base+0xa80>
   1fd54:	ldrd	r0, [sp, #32]
   1fd58:	cmp	r1, #0
   1fd5c:	cmpeq	r0, #255	; 0xff
   1fd60:	uxtbls	r0, r0
   1fd64:	strbls	r0, [sp, #27]
   1fd68:	bls	1f90c <flatcc_json_parser_union_type_vector@@Base+0x280>
   1fd6c:	ldr	r3, [r6, #24]
   1fd70:	ldrb	r0, [sp, #27]
   1fd74:	cmp	r3, #0
   1fd78:	bne	20128 <flatcc_json_parser_union_type_vector@@Base+0xa9c>
   1fd7c:	ldr	r3, [r6, #4]
   1fd80:	mov	r1, #7
   1fd84:	sub	r3, r4, r3
   1fd88:	str	r1, [r6, #24]
   1fd8c:	add	r3, r3, #1
   1fd90:	str	r3, [r6, #20]
   1fd94:	str	r4, [r6, #36]	; 0x24
   1fd98:	mov	r4, r5
   1fd9c:	b	1f90c <flatcc_json_parser_union_type_vector@@Base+0x280>
   1fda0:	cmp	r3, #32
   1fda4:	bhi	1fe5c <flatcc_json_parser_union_type_vector@@Base+0x7d0>
   1fda8:	sub	r3, r3, #9
   1fdac:	cmp	r3, #23
   1fdb0:	ldrls	pc, [pc, r3, lsl #2]
   1fdb4:	b	1f810 <flatcc_json_parser_union_type_vector@@Base+0x184>
   1fdb8:	andeq	pc, r1, ip, lsr #30
   1fdbc:	andeq	pc, r1, r4, lsr pc	; <UNPREDICTABLE>
   1fdc0:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fdc4:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fdc8:	andeq	pc, r1, r8, lsl lr	; <UNPREDICTABLE>
   1fdcc:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fdd0:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fdd4:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fdd8:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fddc:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fde0:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fde4:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fde8:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fdec:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fdf0:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fdf4:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fdf8:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fdfc:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fe00:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fe04:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fe08:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fe0c:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fe10:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1fe14:	ldrdeq	pc, [r1], -ip
   1fe18:	sub	r3, r5, r7
   1fe1c:	add	r2, r7, #1
   1fe20:	cmp	r3, #1
   1fe24:	ble	1fe34 <flatcc_json_parser_union_type_vector@@Base+0x7a8>
   1fe28:	ldrb	r3, [r7, #1]
   1fe2c:	cmp	r3, #10
   1fe30:	addeq	r2, r7, #2
   1fe34:	mov	r7, r2
   1fe38:	ldr	r3, [r6, #16]
   1fe3c:	str	r7, [r6, #4]
   1fe40:	add	r3, r3, #1
   1fe44:	str	r3, [r6, #16]
   1fe48:	cmp	r5, r7
   1fe4c:	beq	1fd10 <flatcc_json_parser_union_type_vector@@Base+0x684>
   1fe50:	ldrb	r3, [r7]
   1fe54:	cmp	r3, #32
   1fe58:	bls	1fda8 <flatcc_json_parser_union_type_vector@@Base+0x71c>
   1fe5c:	cmp	r3, #93	; 0x5d
   1fe60:	bne	1f884 <flatcc_json_parser_union_type_vector@@Base+0x1f8>
   1fe64:	add	r4, r7, #1
   1fe68:	sub	r3, r5, r4
   1fe6c:	cmp	r3, #1
   1fe70:	ble	1fe84 <flatcc_json_parser_union_type_vector@@Base+0x7f8>
   1fe74:	ldrb	r3, [r7, #1]
   1fe78:	cmp	r3, #32
   1fe7c:	bhi	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1fe80:	beq	2017c <flatcc_json_parser_union_type_vector@@Base+0xaf0>
   1fe84:	cmp	r5, r4
   1fe88:	beq	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1fe8c:	ldrb	r2, [r4]
   1fe90:	cmp	r2, #32
   1fe94:	bne	1feb4 <flatcc_json_parser_union_type_vector@@Base+0x828>
   1fe98:	add	r3, r4, #1
   1fe9c:	cmp	r5, r3
   1fea0:	mov	r4, r3
   1fea4:	beq	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1fea8:	ldrb	r2, [r3], #1
   1feac:	cmp	r2, #32
   1feb0:	beq	1fe9c <flatcc_json_parser_union_type_vector@@Base+0x810>
   1feb4:	cmp	r2, #32
   1feb8:	bhi	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1febc:	sub	r2, r2, #9
   1fec0:	cmp	r2, #23
   1fec4:	ldrls	pc, [pc, r2, lsl #2]
   1fec8:	b	1fb4c <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   1fecc:	andeq	pc, r1, ip, lsl #31
   1fed0:	andeq	pc, r1, r4, lsl #31
   1fed4:	andeq	pc, r1, ip, asr #22
   1fed8:	andeq	pc, r1, ip, asr #22
   1fedc:	andeq	pc, r1, ip, lsr pc	; <UNPREDICTABLE>
   1fee0:	andeq	pc, r1, ip, asr #22
   1fee4:	andeq	pc, r1, ip, asr #22
   1fee8:	andeq	pc, r1, ip, asr #22
   1feec:	andeq	pc, r1, ip, asr #22
   1fef0:	andeq	pc, r1, ip, asr #22
   1fef4:	andeq	pc, r1, ip, asr #22
   1fef8:	andeq	pc, r1, ip, asr #22
   1fefc:	andeq	pc, r1, ip, asr #22
   1ff00:	andeq	pc, r1, ip, asr #22
   1ff04:	andeq	pc, r1, ip, asr #22
   1ff08:	andeq	pc, r1, ip, asr #22
   1ff0c:	andeq	pc, r1, ip, asr #22
   1ff10:	andeq	pc, r1, ip, asr #22
   1ff14:	andeq	pc, r1, ip, asr #22
   1ff18:	andeq	pc, r1, ip, asr #22
   1ff1c:	andeq	pc, r1, ip, asr #22
   1ff20:	andeq	pc, r1, ip, asr #22
   1ff24:	andeq	pc, r1, ip, asr #22
   1ff28:	andeq	pc, r1, r4, lsl #29
   1ff2c:	add	r7, r7, #1
   1ff30:	b	1fe48 <flatcc_json_parser_union_type_vector@@Base+0x7bc>
   1ff34:	add	r7, r7, #1
   1ff38:	b	1fe38 <flatcc_json_parser_union_type_vector@@Base+0x7ac>
   1ff3c:	sub	r3, r5, r4
   1ff40:	add	r2, r4, #1
   1ff44:	cmp	r3, #1
   1ff48:	ble	1ff58 <flatcc_json_parser_union_type_vector@@Base+0x8cc>
   1ff4c:	ldrb	r3, [r4, #1]
   1ff50:	cmp	r3, #10
   1ff54:	addeq	r2, r4, #2
   1ff58:	mov	r4, r2
   1ff5c:	ldr	r3, [r6, #16]
   1ff60:	str	r4, [r6, #4]
   1ff64:	add	r3, r3, #1
   1ff68:	str	r3, [r6, #16]
   1ff6c:	cmp	r5, r4
   1ff70:	beq	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1ff74:	ldrb	r2, [r4]
   1ff78:	cmp	r2, #32
   1ff7c:	bls	1febc <flatcc_json_parser_union_type_vector@@Base+0x830>
   1ff80:	b	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1ff84:	add	r4, r4, #1
   1ff88:	b	1ff5c <flatcc_json_parser_union_type_vector@@Base+0x8d0>
   1ff8c:	add	r4, r4, #1
   1ff90:	b	1ff6c <flatcc_json_parser_union_type_vector@@Base+0x8e0>
   1ff94:	add	r1, r4, #1
   1ff98:	sub	r3, r5, r1
   1ff9c:	cmp	r3, #1
   1ffa0:	ble	1ffb4 <flatcc_json_parser_union_type_vector@@Base+0x928>
   1ffa4:	ldrb	r3, [r4, #1]
   1ffa8:	cmp	r3, #32
   1ffac:	bhi	1ffe8 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   1ffb0:	beq	20130 <flatcc_json_parser_union_type_vector@@Base+0xaa4>
   1ffb4:	cmp	r5, r1
   1ffb8:	beq	1ffe8 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   1ffbc:	ldrb	r2, [r1]
   1ffc0:	cmp	r2, #32
   1ffc4:	bne	1fff0 <flatcc_json_parser_union_type_vector@@Base+0x964>
   1ffc8:	add	r3, r1, #1
   1ffcc:	b	1ffdc <flatcc_json_parser_union_type_vector@@Base+0x950>
   1ffd0:	ldrb	r2, [r3], #1
   1ffd4:	cmp	r2, #32
   1ffd8:	bne	1fff0 <flatcc_json_parser_union_type_vector@@Base+0x964>
   1ffdc:	cmp	r3, r5
   1ffe0:	mov	r1, r3
   1ffe4:	bne	1ffd0 <flatcc_json_parser_union_type_vector@@Base+0x944>
   1ffe8:	mov	r4, r1
   1ffec:	b	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   1fff0:	cmp	r2, #32
   1fff4:	bhi	1ffe8 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   1fff8:	sub	r2, r2, #9
   1fffc:	cmp	r2, #23
   20000:	ldrls	pc, [pc, r2, lsl #2]
   20004:	b	200c0 <flatcc_json_parser_union_type_vector@@Base+0xa34>
   20008:	strheq	r0, [r2], -r8
   2000c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   20010:	andeq	r0, r2, r0, asr #1
   20014:	andeq	r0, r2, r0, asr #1
   20018:	andeq	r0, r2, r8, rrx
   2001c:	andeq	r0, r2, r0, asr #1
   20020:	andeq	r0, r2, r0, asr #1
   20024:	andeq	r0, r2, r0, asr #1
   20028:	andeq	r0, r2, r0, asr #1
   2002c:	andeq	r0, r2, r0, asr #1
   20030:	andeq	r0, r2, r0, asr #1
   20034:	andeq	r0, r2, r0, asr #1
   20038:	andeq	r0, r2, r0, asr #1
   2003c:	andeq	r0, r2, r0, asr #1
   20040:	andeq	r0, r2, r0, asr #1
   20044:	andeq	r0, r2, r0, asr #1
   20048:	andeq	r0, r2, r0, asr #1
   2004c:	andeq	r0, r2, r0, asr #1
   20050:	andeq	r0, r2, r0, asr #1
   20054:	andeq	r0, r2, r0, asr #1
   20058:	andeq	r0, r2, r0, asr #1
   2005c:	andeq	r0, r2, r0, asr #1
   20060:	andeq	r0, r2, r0, asr #1
   20064:			; <UNDEFINED> instruction: 0x0001ffb4
   20068:	sub	r3, r5, r1
   2006c:	add	r2, r1, #1
   20070:	cmp	r3, #1
   20074:	ble	20084 <flatcc_json_parser_union_type_vector@@Base+0x9f8>
   20078:	ldrb	r3, [r1, #1]
   2007c:	cmp	r3, #10
   20080:	addeq	r2, r1, #2
   20084:	mov	r1, r2
   20088:	ldr	r3, [r6, #16]
   2008c:	str	r1, [r6, #4]
   20090:	add	r3, r3, #1
   20094:	str	r3, [r6, #16]
   20098:	cmp	r5, r1
   2009c:	beq	1f838 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   200a0:	ldrb	r2, [r1]
   200a4:	cmp	r2, #32
   200a8:	bls	1fff8 <flatcc_json_parser_union_type_vector@@Base+0x96c>
   200ac:	b	1ffe8 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   200b0:	add	r1, r1, #1
   200b4:	b	20088 <flatcc_json_parser_union_type_vector@@Base+0x9fc>
   200b8:	add	r1, r1, #1
   200bc:	b	20098 <flatcc_json_parser_union_type_vector@@Base+0xa0c>
   200c0:	ldr	r3, [r6, #24]
   200c4:	cmp	r3, #0
   200c8:	bne	1f838 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   200cc:	ldr	r3, [r6, #4]
   200d0:	mov	r2, #5
   200d4:	mov	r4, r5
   200d8:	str	r1, [r6, #36]	; 0x24
   200dc:	str	r2, [r6, #24]
   200e0:	sub	r1, r1, r3
   200e4:	add	r1, r1, #1
   200e8:	str	r1, [r6, #20]
   200ec:	b	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   200f0:	ldrb	r3, [r4, #2]
   200f4:	cmp	r3, #32
   200f8:	addhi	r7, r4, #2
   200fc:	bls	1fcdc <flatcc_json_parser_union_type_vector@@Base+0x650>
   20100:	cmp	r5, r7
   20104:	bne	1fe5c <flatcc_json_parser_union_type_vector@@Base+0x7d0>
   20108:	b	1fd10 <flatcc_json_parser_union_type_vector@@Base+0x684>
   2010c:	ldr	r3, [r6, #24]
   20110:	ldrb	r0, [sp, #27]
   20114:	cmp	r3, #0
   20118:	bne	20128 <flatcc_json_parser_union_type_vector@@Base+0xa9c>
   2011c:	mov	r1, #8
   20120:	ldr	r3, [r6, #4]
   20124:	b	1fd84 <flatcc_json_parser_union_type_vector@@Base+0x6f8>
   20128:	mov	r4, r5
   2012c:	b	1f90c <flatcc_json_parser_union_type_vector@@Base+0x280>
   20130:	ldrb	r3, [r4, #2]
   20134:	cmp	r3, #32
   20138:	addhi	r4, r4, #2
   2013c:	bls	1ffb4 <flatcc_json_parser_union_type_vector@@Base+0x928>
   20140:	b	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   20144:	ldr	r3, [r6, #24]
   20148:	cmp	r3, #0
   2014c:	bne	1f714 <flatcc_json_parser_union_type_vector@@Base+0x88>
   20150:	ldr	r3, [r6, #4]
   20154:	mov	r2, #15
   20158:	str	r2, [r6, #24]
   2015c:	str	r4, [r6, #36]	; 0x24
   20160:	sub	r3, r4, r3
   20164:	mov	r4, r5
   20168:	add	r3, r3, #1
   2016c:	str	r3, [r6, #20]
   20170:	b	1f718 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   20174:	mov	r7, r1
   20178:	b	1f870 <flatcc_json_parser_union_type_vector@@Base+0x1e4>
   2017c:	ldrb	r3, [r7, #2]
   20180:	cmp	r3, #32
   20184:	bls	1fe84 <flatcc_json_parser_union_type_vector@@Base+0x7f8>
   20188:	add	r4, r7, #2
   2018c:	b	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   20190:	add	r4, r7, #1
   20194:	sub	r3, r5, r4
   20198:	cmp	r3, #1
   2019c:	ble	201b0 <flatcc_json_parser_union_type_vector@@Base+0xb24>
   201a0:	ldrb	r3, [r7, #1]
   201a4:	cmp	r3, #32
   201a8:	bhi	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   201ac:	beq	202b0 <flatcc_json_parser_union_type_vector@@Base+0xc24>
   201b0:	cmp	r5, r4
   201b4:	beq	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   201b8:	ldrb	r2, [r4]
   201bc:	cmp	r2, #32
   201c0:	bne	201e0 <flatcc_json_parser_union_type_vector@@Base+0xb54>
   201c4:	add	r3, r4, #1
   201c8:	cmp	r3, r5
   201cc:	mov	r4, r3
   201d0:	beq	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   201d4:	ldrb	r2, [r3], #1
   201d8:	cmp	r2, #32
   201dc:	beq	201c8 <flatcc_json_parser_union_type_vector@@Base+0xb3c>
   201e0:	cmp	r2, #32
   201e4:	bhi	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   201e8:	sub	r2, r2, #9
   201ec:	cmp	r2, #23
   201f0:	ldrls	pc, [pc, r2, lsl #2]
   201f4:	b	1fb4c <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   201f8:	andeq	r0, r2, r8, lsr #5
   201fc:	andeq	r0, r2, r0, lsr #5
   20200:	andeq	pc, r1, ip, asr #22
   20204:	andeq	pc, r1, ip, asr #22
   20208:	andeq	r0, r2, r8, asr r2
   2020c:	andeq	pc, r1, ip, asr #22
   20210:	andeq	pc, r1, ip, asr #22
   20214:	andeq	pc, r1, ip, asr #22
   20218:	andeq	pc, r1, ip, asr #22
   2021c:	andeq	pc, r1, ip, asr #22
   20220:	andeq	pc, r1, ip, asr #22
   20224:	andeq	pc, r1, ip, asr #22
   20228:	andeq	pc, r1, ip, asr #22
   2022c:	andeq	pc, r1, ip, asr #22
   20230:	andeq	pc, r1, ip, asr #22
   20234:	andeq	pc, r1, ip, asr #22
   20238:	andeq	pc, r1, ip, asr #22
   2023c:	andeq	pc, r1, ip, asr #22
   20240:	andeq	pc, r1, ip, asr #22
   20244:	andeq	pc, r1, ip, asr #22
   20248:	andeq	pc, r1, ip, asr #22
   2024c:	andeq	pc, r1, ip, asr #22
   20250:	andeq	pc, r1, ip, asr #22
   20254:			; <UNDEFINED> instruction: 0x000201b0
   20258:	sub	r3, r5, r4
   2025c:	add	r2, r4, #1
   20260:	cmp	r3, #1
   20264:	ble	20274 <flatcc_json_parser_union_type_vector@@Base+0xbe8>
   20268:	ldrb	r3, [r4, #1]
   2026c:	cmp	r3, #10
   20270:	addeq	r2, r4, #2
   20274:	mov	r4, r2
   20278:	ldr	r3, [r6, #16]
   2027c:	str	r4, [r6, #4]
   20280:	add	r3, r3, #1
   20284:	str	r3, [r6, #16]
   20288:	cmp	r5, r4
   2028c:	beq	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   20290:	ldrb	r2, [r4]
   20294:	cmp	r2, #32
   20298:	bls	201e8 <flatcc_json_parser_union_type_vector@@Base+0xb5c>
   2029c:	b	1f79c <flatcc_json_parser_union_type_vector@@Base+0x110>
   202a0:	add	r4, r4, #1
   202a4:	b	20278 <flatcc_json_parser_union_type_vector@@Base+0xbec>
   202a8:	add	r4, r4, #1
   202ac:	b	20288 <flatcc_json_parser_union_type_vector@@Base+0xbfc>
   202b0:	ldrb	r3, [r7, #2]
   202b4:	cmp	r3, #32
   202b8:	bls	201b0 <flatcc_json_parser_union_type_vector@@Base+0xb24>
   202bc:	b	20188 <flatcc_json_parser_union_type_vector@@Base+0xafc>
   202c0:	movw	r1, #8464	; 0x2110
   202c4:	movt	r1, #2
   202c8:	ldr	r3, [pc, #12]	; 202dc <flatcc_json_parser_union_type_vector@@Base+0xc50>
   202cc:	movw	r0, #8540	; 0x215c
   202d0:	movt	r0, #2
   202d4:	movw	r2, #1122	; 0x462
   202d8:	bl	124b4 <__assert_fail@plt>
   202dc:	muleq	r2, r0, pc	; <UNPREDICTABLE>

000202e0 <flatcc_json_parser_table_as_root@@Base>:
   202e0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   202e4:	subs	r4, r1, #0
   202e8:	mov	r5, r2
   202ec:	strd	r6, [sp, #8]
   202f0:	mov	r2, #32
   202f4:	mov	r1, #0
   202f8:	strd	r8, [sp, #16]
   202fc:	mov	r8, r0
   20300:	add	r6, r5, r3
   20304:	str	lr, [sp, #24]
   20308:	sub	sp, sp, #52	; 0x34
   2030c:	ldr	r9, [sp, #80]	; 0x50
   20310:	addeq	r4, sp, #4
   20314:	add	r0, r4, #12
   20318:	bl	12484 <memset@plt>
   2031c:	mov	ip, #1
   20320:	mov	r2, #0
   20324:	str	r8, [r4]
   20328:	mov	r0, r8
   2032c:	ldr	r1, [sp, #84]	; 0x54
   20330:	asr	r7, r9, #1
   20334:	stmib	r4, {r5, r9}
   20338:	str	ip, [r4, #16]
   2033c:	and	r7, r7, #2
   20340:	str	r5, [r4, #28]
   20344:	mov	r3, r7
   20348:	str	r6, [r4, #32]
   2034c:	str	r5, [r4, #36]	; 0x24
   20350:	bl	14b98 <flatcc_builder_start_buffer@@Base>
   20354:	cmp	r0, #0
   20358:	bne	203b8 <flatcc_json_parser_table_as_root@@Base+0xd8>
   2035c:	mov	r2, r6
   20360:	mov	r3, sp
   20364:	ldr	ip, [sp, #88]	; 0x58
   20368:	mov	r1, r5
   2036c:	mov	r0, r4
   20370:	blx	ip
   20374:	ldr	r6, [r4, #24]
   20378:	cmp	r6, #0
   2037c:	beq	2039c <flatcc_json_parser_table_as_root@@Base+0xbc>
   20380:	mov	r0, r6
   20384:	add	sp, sp, #52	; 0x34
   20388:	ldrd	r4, [sp]
   2038c:	ldrd	r6, [sp, #8]
   20390:	ldrd	r8, [sp, #16]
   20394:	add	sp, sp, #24
   20398:	pop	{pc}		; (ldr pc, [sp], #4)
   2039c:	mov	r0, r8
   203a0:	ldr	r1, [sp]
   203a4:	bl	14d44 <flatcc_builder_end_buffer@@Base>
   203a8:	cmp	r0, #0
   203ac:	beq	203b8 <flatcc_json_parser_table_as_root@@Base+0xd8>
   203b0:	str	r5, [r4, #40]	; 0x28
   203b4:	b	20380 <flatcc_json_parser_table_as_root@@Base+0xa0>
   203b8:	mvn	r6, #0
   203bc:	b	20380 <flatcc_json_parser_table_as_root@@Base+0xa0>

000203c0 <flatcc_json_parser_struct_as_root@@Base>:
   203c0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   203c4:	subs	r4, r1, #0
   203c8:	mov	r5, r2
   203cc:	strd	r6, [sp, #8]
   203d0:	mov	r2, #32
   203d4:	mov	r1, #0
   203d8:	strd	r8, [sp, #16]
   203dc:	mov	r8, r0
   203e0:	add	r6, r5, r3
   203e4:	str	lr, [sp, #24]
   203e8:	sub	sp, sp, #52	; 0x34
   203ec:	ldr	r9, [sp, #80]	; 0x50
   203f0:	addeq	r4, sp, #4
   203f4:	add	r0, r4, #12
   203f8:	bl	12484 <memset@plt>
   203fc:	mov	ip, #1
   20400:	mov	r2, #0
   20404:	str	r8, [r4]
   20408:	mov	r0, r8
   2040c:	ldr	r1, [sp, #84]	; 0x54
   20410:	asr	r7, r9, #1
   20414:	stmib	r4, {r5, r9}
   20418:	str	ip, [r4, #16]
   2041c:	and	r7, r7, #2
   20420:	str	r5, [r4, #28]
   20424:	mov	r3, r7
   20428:	str	r6, [r4, #32]
   2042c:	str	r5, [r4, #36]	; 0x24
   20430:	bl	14b98 <flatcc_builder_start_buffer@@Base>
   20434:	cmp	r0, #0
   20438:	bne	20498 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   2043c:	mov	r2, r6
   20440:	mov	r3, sp
   20444:	ldr	ip, [sp, #88]	; 0x58
   20448:	mov	r1, r5
   2044c:	mov	r0, r4
   20450:	blx	ip
   20454:	ldr	r6, [r4, #24]
   20458:	cmp	r6, #0
   2045c:	beq	2047c <flatcc_json_parser_struct_as_root@@Base+0xbc>
   20460:	mov	r0, r6
   20464:	add	sp, sp, #52	; 0x34
   20468:	ldrd	r4, [sp]
   2046c:	ldrd	r6, [sp, #8]
   20470:	ldrd	r8, [sp, #16]
   20474:	add	sp, sp, #24
   20478:	pop	{pc}		; (ldr pc, [sp], #4)
   2047c:	mov	r0, r8
   20480:	ldr	r1, [sp]
   20484:	bl	14d44 <flatcc_builder_end_buffer@@Base>
   20488:	cmp	r0, #0
   2048c:	beq	20498 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   20490:	str	r5, [r4, #40]	; 0x28
   20494:	b	20460 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   20498:	mvn	r6, #0
   2049c:	b	20460 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   204a0:	eor	r1, r1, #-2147483648	; 0x80000000
   204a4:	b	204ac <flatcc_json_parser_struct_as_root@@Base+0xec>
   204a8:	eor	r3, r3, #-2147483648	; 0x80000000
   204ac:	push	{r4, r5, lr}
   204b0:	lsl	r4, r1, #1
   204b4:	lsl	r5, r3, #1
   204b8:	teq	r4, r5
   204bc:	teqeq	r0, r2
   204c0:	orrsne	ip, r4, r0
   204c4:	orrsne	ip, r5, r2
   204c8:	mvnsne	ip, r4, asr #21
   204cc:	mvnsne	ip, r5, asr #21
   204d0:	beq	206bc <flatcc_json_parser_struct_as_root@@Base+0x2fc>
   204d4:	lsr	r4, r4, #21
   204d8:	rsbs	r5, r4, r5, lsr #21
   204dc:	rsblt	r5, r5, #0
   204e0:	ble	20500 <flatcc_json_parser_struct_as_root@@Base+0x140>
   204e4:	add	r4, r4, r5
   204e8:	eor	r2, r0, r2
   204ec:	eor	r3, r1, r3
   204f0:	eor	r0, r2, r0
   204f4:	eor	r1, r3, r1
   204f8:	eor	r2, r0, r2
   204fc:	eor	r3, r1, r3
   20500:	cmp	r5, #54	; 0x36
   20504:	pophi	{r4, r5, pc}
   20508:	tst	r1, #-2147483648	; 0x80000000
   2050c:	lsl	r1, r1, #12
   20510:	mov	ip, #1048576	; 0x100000
   20514:	orr	r1, ip, r1, lsr #12
   20518:	beq	20524 <flatcc_json_parser_struct_as_root@@Base+0x164>
   2051c:	rsbs	r0, r0, #0
   20520:	rsc	r1, r1, #0
   20524:	tst	r3, #-2147483648	; 0x80000000
   20528:	lsl	r3, r3, #12
   2052c:	orr	r3, ip, r3, lsr #12
   20530:	beq	2053c <flatcc_json_parser_struct_as_root@@Base+0x17c>
   20534:	rsbs	r2, r2, #0
   20538:	rsc	r3, r3, #0
   2053c:	teq	r4, r5
   20540:	beq	206a4 <flatcc_json_parser_struct_as_root@@Base+0x2e4>
   20544:	sub	r4, r4, #1
   20548:	rsbs	lr, r5, #32
   2054c:	blt	20568 <flatcc_json_parser_struct_as_root@@Base+0x1a8>
   20550:	lsl	ip, r2, lr
   20554:	adds	r0, r0, r2, lsr r5
   20558:	adc	r1, r1, #0
   2055c:	adds	r0, r0, r3, lsl lr
   20560:	adcs	r1, r1, r3, asr r5
   20564:	b	20584 <flatcc_json_parser_struct_as_root@@Base+0x1c4>
   20568:	sub	r5, r5, #32
   2056c:	add	lr, lr, #32
   20570:	cmp	r2, #1
   20574:	lsl	ip, r3, lr
   20578:	orrcs	ip, ip, #2
   2057c:	adds	r0, r0, r3, asr r5
   20580:	adcs	r1, r1, r3, asr #31
   20584:	and	r5, r1, #-2147483648	; 0x80000000
   20588:	bpl	20598 <flatcc_json_parser_struct_as_root@@Base+0x1d8>
   2058c:	rsbs	ip, ip, #0
   20590:	rscs	r0, r0, #0
   20594:	rsc	r1, r1, #0
   20598:	cmp	r1, #1048576	; 0x100000
   2059c:	bcc	205dc <flatcc_json_parser_struct_as_root@@Base+0x21c>
   205a0:	cmp	r1, #2097152	; 0x200000
   205a4:	bcc	205c4 <flatcc_json_parser_struct_as_root@@Base+0x204>
   205a8:	lsrs	r1, r1, #1
   205ac:	rrxs	r0, r0
   205b0:	rrx	ip, ip
   205b4:	add	r4, r4, #1
   205b8:	lsl	r2, r4, #21
   205bc:	cmn	r2, #4194304	; 0x400000
   205c0:	bcs	2071c <flatcc_json_parser_struct_as_root@@Base+0x35c>
   205c4:	cmp	ip, #-2147483648	; 0x80000000
   205c8:	lsrseq	ip, r0, #1
   205cc:	adcs	r0, r0, #0
   205d0:	adc	r1, r1, r4, lsl #20
   205d4:	orr	r1, r1, r5
   205d8:	pop	{r4, r5, pc}
   205dc:	lsls	ip, ip, #1
   205e0:	adcs	r0, r0, r0
   205e4:	adc	r1, r1, r1
   205e8:	tst	r1, #1048576	; 0x100000
   205ec:	sub	r4, r4, #1
   205f0:	bne	205c4 <flatcc_json_parser_struct_as_root@@Base+0x204>
   205f4:	teq	r1, #0
   205f8:	moveq	r1, r0
   205fc:	moveq	r0, #0
   20600:	clz	r3, r1
   20604:	addeq	r3, r3, #32
   20608:	sub	r3, r3, #11
   2060c:	subs	r2, r3, #32
   20610:	bge	20634 <flatcc_json_parser_struct_as_root@@Base+0x274>
   20614:	adds	r2, r2, #12
   20618:	ble	20630 <flatcc_json_parser_struct_as_root@@Base+0x270>
   2061c:	add	ip, r2, #20
   20620:	rsb	r2, r2, #12
   20624:	lsl	r0, r1, ip
   20628:	lsr	r1, r1, r2
   2062c:	b	20644 <flatcc_json_parser_struct_as_root@@Base+0x284>
   20630:	add	r2, r2, #20
   20634:	rsble	ip, r2, #32
   20638:	lsl	r1, r1, r2
   2063c:	orrle	r1, r1, r0, lsr ip
   20640:	lslle	r0, r0, r2
   20644:	subs	r4, r4, r3
   20648:	addge	r1, r1, r4, lsl #20
   2064c:	orrge	r1, r1, r5
   20650:	popge	{r4, r5, pc}
   20654:	mvn	r4, r4
   20658:	subs	r4, r4, #31
   2065c:	bge	20698 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   20660:	adds	r4, r4, #12
   20664:	bgt	20680 <flatcc_json_parser_struct_as_root@@Base+0x2c0>
   20668:	add	r4, r4, #20
   2066c:	rsb	r2, r4, #32
   20670:	lsr	r0, r0, r4
   20674:	orr	r0, r0, r1, lsl r2
   20678:	orr	r1, r5, r1, lsr r4
   2067c:	pop	{r4, r5, pc}
   20680:	rsb	r4, r4, #12
   20684:	rsb	r2, r4, #32
   20688:	lsr	r0, r0, r2
   2068c:	orr	r0, r0, r1, lsl r4
   20690:	mov	r1, r5
   20694:	pop	{r4, r5, pc}
   20698:	lsr	r0, r1, r4
   2069c:	mov	r1, r5
   206a0:	pop	{r4, r5, pc}
   206a4:	teq	r4, #0
   206a8:	eor	r3, r3, #1048576	; 0x100000
   206ac:	eoreq	r1, r1, #1048576	; 0x100000
   206b0:	addeq	r4, r4, #1
   206b4:	subne	r5, r5, #1
   206b8:	b	20544 <flatcc_json_parser_struct_as_root@@Base+0x184>
   206bc:	mvns	ip, r4, asr #21
   206c0:	mvnsne	ip, r5, asr #21
   206c4:	beq	2072c <flatcc_json_parser_struct_as_root@@Base+0x36c>
   206c8:	teq	r4, r5
   206cc:	teqeq	r0, r2
   206d0:	beq	206e4 <flatcc_json_parser_struct_as_root@@Base+0x324>
   206d4:	orrs	ip, r4, r0
   206d8:	moveq	r1, r3
   206dc:	moveq	r0, r2
   206e0:	pop	{r4, r5, pc}
   206e4:	teq	r1, r3
   206e8:	movne	r1, #0
   206ec:	movne	r0, #0
   206f0:	popne	{r4, r5, pc}
   206f4:	lsrs	ip, r4, #21
   206f8:	bne	2070c <flatcc_json_parser_struct_as_root@@Base+0x34c>
   206fc:	lsls	r0, r0, #1
   20700:	adcs	r1, r1, r1
   20704:	orrcs	r1, r1, #-2147483648	; 0x80000000
   20708:	pop	{r4, r5, pc}
   2070c:	adds	r4, r4, #4194304	; 0x400000
   20710:	addcc	r1, r1, #1048576	; 0x100000
   20714:	popcc	{r4, r5, pc}
   20718:	and	r5, r1, #-2147483648	; 0x80000000
   2071c:	orr	r1, r5, #2130706432	; 0x7f000000
   20720:	orr	r1, r1, #15728640	; 0xf00000
   20724:	mov	r0, #0
   20728:	pop	{r4, r5, pc}
   2072c:	mvns	ip, r4, asr #21
   20730:	movne	r1, r3
   20734:	movne	r0, r2
   20738:	mvnseq	ip, r5, asr #21
   2073c:	movne	r3, r1
   20740:	movne	r2, r0
   20744:	orrs	r4, r0, r1, lsl #12
   20748:	orrseq	r5, r2, r3, lsl #12
   2074c:	teqeq	r1, r3
   20750:	orrne	r1, r1, #524288	; 0x80000
   20754:	pop	{r4, r5, pc}
   20758:	teq	r0, #0
   2075c:	moveq	r1, #0
   20760:	bxeq	lr
   20764:	push	{r4, r5, lr}
   20768:	mov	r4, #1024	; 0x400
   2076c:	add	r4, r4, #50	; 0x32
   20770:	mov	r5, #0
   20774:	mov	r1, #0
   20778:	b	205f4 <flatcc_json_parser_struct_as_root@@Base+0x234>
   2077c:	teq	r0, #0
   20780:	moveq	r1, #0
   20784:	bxeq	lr
   20788:	push	{r4, r5, lr}
   2078c:	mov	r4, #1024	; 0x400
   20790:	add	r4, r4, #50	; 0x32
   20794:	ands	r5, r0, #-2147483648	; 0x80000000
   20798:	rsbmi	r0, r0, #0
   2079c:	mov	r1, #0
   207a0:	b	205f4 <flatcc_json_parser_struct_as_root@@Base+0x234>
   207a4:	lsls	r2, r0, #1
   207a8:	asr	r1, r2, #3
   207ac:	rrx	r1, r1
   207b0:	lsl	r0, r2, #28
   207b4:	andsne	r3, r2, #-16777216	; 0xff000000
   207b8:	teqne	r3, #-16777216	; 0xff000000
   207bc:	eorne	r1, r1, #939524096	; 0x38000000
   207c0:	bxne	lr
   207c4:	bics	r2, r2, #-16777216	; 0xff000000
   207c8:	bxeq	lr
   207cc:	teq	r3, #-16777216	; 0xff000000
   207d0:	orreq	r1, r1, #524288	; 0x80000
   207d4:	bxeq	lr
   207d8:	push	{r4, r5, lr}
   207dc:	mov	r4, #896	; 0x380
   207e0:	and	r5, r1, #-2147483648	; 0x80000000
   207e4:	bic	r1, r1, #-2147483648	; 0x80000000
   207e8:	b	205f4 <flatcc_json_parser_struct_as_root@@Base+0x234>
   207ec:	orrs	r2, r0, r1
   207f0:	bxeq	lr
   207f4:	push	{r4, r5, lr}
   207f8:	mov	r5, #0
   207fc:	b	2081c <flatcc_json_parser_struct_as_root@@Base+0x45c>
   20800:	orrs	r2, r0, r1
   20804:	bxeq	lr
   20808:	push	{r4, r5, lr}
   2080c:	ands	r5, r1, #-2147483648	; 0x80000000
   20810:	bpl	2081c <flatcc_json_parser_struct_as_root@@Base+0x45c>
   20814:	rsbs	r0, r0, #0
   20818:	rsc	r1, r1, #0
   2081c:	mov	r4, #1024	; 0x400
   20820:	add	r4, r4, #50	; 0x32
   20824:	lsrs	ip, r1, #22
   20828:	beq	20598 <flatcc_json_parser_struct_as_root@@Base+0x1d8>
   2082c:	mov	r2, #3
   20830:	lsrs	ip, ip, #3
   20834:	addne	r2, r2, #3
   20838:	lsrs	ip, ip, #3
   2083c:	addne	r2, r2, #3
   20840:	add	r2, r2, ip, lsr #3
   20844:	rsb	r3, r2, #32
   20848:	lsl	ip, r0, r3
   2084c:	lsr	r0, r0, r2
   20850:	orr	r0, r0, r1, lsl r3
   20854:	lsr	r1, r1, r2
   20858:	add	r4, r4, r2
   2085c:	b	20598 <flatcc_json_parser_struct_as_root@@Base+0x1d8>

00020860 <__libc_csu_init@@Base>:
   20860:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20864:	mov	r7, r0
   20868:	ldr	r6, [pc, #72]	; 208b8 <__libc_csu_init@@Base+0x58>
   2086c:	ldr	r5, [pc, #72]	; 208bc <__libc_csu_init@@Base+0x5c>
   20870:	add	r6, pc, r6
   20874:	add	r5, pc, r5
   20878:	sub	r6, r6, r5
   2087c:	mov	r8, r1
   20880:	mov	r9, r2
   20884:	bl	123e0 <free@plt-0x20>
   20888:	asrs	r6, r6, #2
   2088c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   20890:	mov	r4, #0
   20894:	add	r4, r4, #1
   20898:	ldr	r3, [r5], #4
   2089c:	mov	r2, r9
   208a0:	mov	r1, r8
   208a4:	mov	r0, r7
   208a8:	blx	r3
   208ac:	cmp	r6, r4
   208b0:	bne	20894 <__libc_csu_init@@Base+0x34>
   208b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   208b8:	muleq	r1, ip, r6
   208bc:	muleq	r1, r4, r6

000208c0 <__libc_csu_fini@@Base>:
   208c0:	bx	lr

Disassembly of section .fini:

000208c4 <.fini>:
   208c4:	push	{r3, lr}
   208c8:	pop	{r3, pc}
