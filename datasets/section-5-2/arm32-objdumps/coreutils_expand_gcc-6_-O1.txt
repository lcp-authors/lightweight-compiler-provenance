
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010c1c <.init>:
   10c1c:	push	{r3, lr}
   10c20:	bl	10ed4 <__assert_fail@plt+0x4c>
   10c24:	pop	{r3, pc}

Disassembly of section .plt:

00010c28 <calloc@plt-0x14>:
   10c28:	push	{lr}		; (str lr, [sp, #-4]!)
   10c2c:	ldr	lr, [pc, #4]	; 10c38 <calloc@plt-0x4>
   10c30:	add	lr, pc, lr
   10c34:	ldr	pc, [lr, #8]!
   10c38:	andeq	r6, r1, r8, asr #7

00010c3c <calloc@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #90112	; 0x16000
   10c44:	ldr	pc, [ip, #968]!	; 0x3c8

00010c48 <fputs_unlocked@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #90112	; 0x16000
   10c50:	ldr	pc, [ip, #960]!	; 0x3c0

00010c54 <raise@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #90112	; 0x16000
   10c5c:	ldr	pc, [ip, #952]!	; 0x3b8

00010c60 <strcmp@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #90112	; 0x16000
   10c68:	ldr	pc, [ip, #944]!	; 0x3b0

00010c6c <posix_fadvise64@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #90112	; 0x16000
   10c74:	ldr	pc, [ip, #936]!	; 0x3a8

00010c78 <fflush@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #90112	; 0x16000
   10c80:	ldr	pc, [ip, #928]!	; 0x3a0

00010c84 <free@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #90112	; 0x16000
   10c8c:	ldr	pc, [ip, #920]!	; 0x398

00010c90 <_exit@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #90112	; 0x16000
   10c98:	ldr	pc, [ip, #912]!	; 0x390

00010c9c <memcpy@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #904]!	; 0x388

00010ca8 <mbsinit@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #896]!	; 0x380

00010cb4 <memcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #888]!	; 0x378

00010cc0 <fputc_unlocked@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #880]!	; 0x370

00010ccc <dcgettext@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #872]!	; 0x368

00010cd8 <realloc@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #864]!	; 0x360

00010ce4 <textdomain@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #856]!	; 0x358

00010cf0 <iswprint@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #848]!	; 0x350

00010cfc <fwrite@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #840]!	; 0x348

00010d08 <lseek64@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #832]!	; 0x340

00010d14 <__ctype_get_mb_cur_max@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #824]!	; 0x338

00010d20 <__fpending@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #816]!	; 0x330

00010d2c <mbrtowc@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #808]!	; 0x328

00010d38 <error@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #800]!	; 0x320

00010d44 <malloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #792]!	; 0x318

00010d50 <__libc_start_main@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #784]!	; 0x310

00010d5c <__freading@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #776]!	; 0x308

00010d68 <__gmon_start__@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #768]!	; 0x300

00010d74 <getopt_long@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d80 <__ctype_b_loc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #752]!	; 0x2f0

00010d8c <exit@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #744]!	; 0x2e8

00010d98 <strlen@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #736]!	; 0x2e0

00010da4 <__errno_location@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #728]!	; 0x2d8

00010db0 <__cxa_atexit@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #720]!	; 0x2d0

00010dbc <memset@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc8 <__printf_chk@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd4 <fileno@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #696]!	; 0x2b8

00010de0 <__fprintf_chk@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dec <fclose@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #680]!	; 0x2a8

00010df8 <fseeko64@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #672]!	; 0x2a0

00010e04 <__uflow@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #664]!	; 0x298

00010e10 <__overflow@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #656]!	; 0x290

00010e1c <setlocale@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #648]!	; 0x288

00010e28 <strrchr@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #640]!	; 0x280

00010e34 <nl_langinfo@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #632]!	; 0x278

00010e40 <clearerr_unlocked@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #624]!	; 0x270

00010e4c <fopen64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #616]!	; 0x268

00010e58 <bindtextdomain@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #608]!	; 0x260

00010e64 <strncmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #600]!	; 0x258

00010e70 <abort@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #592]!	; 0x250

00010e7c <strspn@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #584]!	; 0x248

00010e88 <__assert_fail@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #576]!	; 0x240

Disassembly of section .text:

00010e98 <.text>:
   10e98:	mov	fp, #0
   10e9c:	mov	lr, #0
   10ea0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ea4:	mov	r2, sp
   10ea8:	push	{r2}		; (str r2, [sp, #-4]!)
   10eac:	push	{r0}		; (str r0, [sp, #-4]!)
   10eb0:	ldr	ip, [pc, #16]	; 10ec8 <__assert_fail@plt+0x40>
   10eb4:	push	{ip}		; (str ip, [sp, #-4]!)
   10eb8:	ldr	r0, [pc, #12]	; 10ecc <__assert_fail@plt+0x44>
   10ebc:	ldr	r3, [pc, #12]	; 10ed0 <__assert_fail@plt+0x48>
   10ec0:	bl	10d50 <__libc_start_main@plt>
   10ec4:	bl	10e70 <abort@plt>
   10ec8:			; <UNDEFINED> instruction: 0x000154b4
   10ecc:	andeq	r1, r1, r4, lsr #6
   10ed0:	andeq	r5, r1, r4, asr r4
   10ed4:	ldr	r3, [pc, #20]	; 10ef0 <__assert_fail@plt+0x68>
   10ed8:	ldr	r2, [pc, #20]	; 10ef4 <__assert_fail@plt+0x6c>
   10edc:	add	r3, pc, r3
   10ee0:	ldr	r2, [r3, r2]
   10ee4:	cmp	r2, #0
   10ee8:	bxeq	lr
   10eec:	b	10d68 <__gmon_start__@plt>
   10ef0:	andeq	r6, r1, ip, lsl r1
   10ef4:	ldrdeq	r0, [r0], -r4
   10ef8:	ldr	r3, [pc, #28]	; 10f1c <__assert_fail@plt+0x94>
   10efc:	ldr	r0, [pc, #28]	; 10f20 <__assert_fail@plt+0x98>
   10f00:	sub	r3, r3, r0
   10f04:	cmp	r3, #6
   10f08:	bxls	lr
   10f0c:	ldr	r3, [pc, #16]	; 10f24 <__assert_fail@plt+0x9c>
   10f10:	cmp	r3, #0
   10f14:	bxeq	lr
   10f18:	bx	r3
   10f1c:	andeq	r7, r2, r3, lsr r1
   10f20:	andeq	r7, r2, r0, lsr r1
   10f24:	andeq	r0, r0, r0
   10f28:	ldr	r1, [pc, #36]	; 10f54 <__assert_fail@plt+0xcc>
   10f2c:	ldr	r0, [pc, #36]	; 10f58 <__assert_fail@plt+0xd0>
   10f30:	sub	r1, r1, r0
   10f34:	asr	r1, r1, #2
   10f38:	add	r1, r1, r1, lsr #31
   10f3c:	asrs	r1, r1, #1
   10f40:	bxeq	lr
   10f44:	ldr	r3, [pc, #16]	; 10f5c <__assert_fail@plt+0xd4>
   10f48:	cmp	r3, #0
   10f4c:	bxeq	lr
   10f50:	bx	r3
   10f54:	andeq	r7, r2, r0, lsr r1
   10f58:	andeq	r7, r2, r0, lsr r1
   10f5c:	andeq	r0, r0, r0
   10f60:	push	{r4, lr}
   10f64:	ldr	r4, [pc, #24]	; 10f84 <__assert_fail@plt+0xfc>
   10f68:	ldrb	r3, [r4]
   10f6c:	cmp	r3, #0
   10f70:	popne	{r4, pc}
   10f74:	bl	10ef8 <__assert_fail@plt+0x70>
   10f78:	mov	r3, #1
   10f7c:	strb	r3, [r4]
   10f80:	pop	{r4, pc}
   10f84:	andeq	r7, r2, r4, asr r1
   10f88:	ldr	r0, [pc, #40]	; 10fb8 <__assert_fail@plt+0x130>
   10f8c:	ldr	r3, [r0]
   10f90:	cmp	r3, #0
   10f94:	bne	10f9c <__assert_fail@plt+0x114>
   10f98:	b	10f28 <__assert_fail@plt+0xa0>
   10f9c:	ldr	r3, [pc, #24]	; 10fbc <__assert_fail@plt+0x134>
   10fa0:	cmp	r3, #0
   10fa4:	beq	10f98 <__assert_fail@plt+0x110>
   10fa8:	push	{r4, lr}
   10fac:	blx	r3
   10fb0:	pop	{r4, lr}
   10fb4:	b	10f28 <__assert_fail@plt+0xa0>
   10fb8:	andeq	r6, r2, r4, lsl pc
   10fbc:	andeq	r0, r0, r0
   10fc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10fc4:	sub	sp, sp, #60	; 0x3c
   10fc8:	subs	r6, r0, #0
   10fcc:	beq	11008 <__assert_fail@plt+0x180>
   10fd0:	ldr	r3, [pc, #756]	; 112cc <__assert_fail@plt+0x444>
   10fd4:	ldr	r4, [r3]
   10fd8:	mov	r2, #5
   10fdc:	ldr	r1, [pc, #748]	; 112d0 <__assert_fail@plt+0x448>
   10fe0:	mov	r0, #0
   10fe4:	bl	10ccc <dcgettext@plt>
   10fe8:	ldr	r3, [pc, #740]	; 112d4 <__assert_fail@plt+0x44c>
   10fec:	ldr	r3, [r3]
   10ff0:	mov	r2, r0
   10ff4:	mov	r1, #1
   10ff8:	mov	r0, r4
   10ffc:	bl	10de0 <__fprintf_chk@plt>
   11000:	mov	r0, r6
   11004:	bl	10d8c <exit@plt>
   11008:	mov	r2, #5
   1100c:	ldr	r1, [pc, #708]	; 112d8 <__assert_fail@plt+0x450>
   11010:	mov	r0, #0
   11014:	bl	10ccc <dcgettext@plt>
   11018:	ldr	r3, [pc, #692]	; 112d4 <__assert_fail@plt+0x44c>
   1101c:	ldr	r2, [r3]
   11020:	mov	r1, r0
   11024:	mov	r0, #1
   11028:	bl	10dc8 <__printf_chk@plt>
   1102c:	mov	r2, #5
   11030:	ldr	r1, [pc, #676]	; 112dc <__assert_fail@plt+0x454>
   11034:	mov	r0, #0
   11038:	bl	10ccc <dcgettext@plt>
   1103c:	ldr	r4, [pc, #668]	; 112e0 <__assert_fail@plt+0x458>
   11040:	ldr	r1, [r4]
   11044:	bl	10c48 <fputs_unlocked@plt>
   11048:	mov	r2, #5
   1104c:	ldr	r1, [pc, #656]	; 112e4 <__assert_fail@plt+0x45c>
   11050:	mov	r0, #0
   11054:	bl	10ccc <dcgettext@plt>
   11058:	ldr	r1, [r4]
   1105c:	bl	10c48 <fputs_unlocked@plt>
   11060:	mov	r2, #5
   11064:	ldr	r1, [pc, #636]	; 112e8 <__assert_fail@plt+0x460>
   11068:	mov	r0, #0
   1106c:	bl	10ccc <dcgettext@plt>
   11070:	ldr	r1, [r4]
   11074:	bl	10c48 <fputs_unlocked@plt>
   11078:	mov	r2, #5
   1107c:	ldr	r1, [pc, #616]	; 112ec <__assert_fail@plt+0x464>
   11080:	mov	r0, #0
   11084:	bl	10ccc <dcgettext@plt>
   11088:	ldr	r1, [r4]
   1108c:	bl	10c48 <fputs_unlocked@plt>
   11090:	bl	120e0 <__assert_fail@plt+0x1258>
   11094:	mov	r2, #5
   11098:	ldr	r1, [pc, #592]	; 112f0 <__assert_fail@plt+0x468>
   1109c:	mov	r0, #0
   110a0:	bl	10ccc <dcgettext@plt>
   110a4:	ldr	r1, [r4]
   110a8:	bl	10c48 <fputs_unlocked@plt>
   110ac:	mov	r2, #5
   110b0:	ldr	r1, [pc, #572]	; 112f4 <__assert_fail@plt+0x46c>
   110b4:	mov	r0, #0
   110b8:	bl	10ccc <dcgettext@plt>
   110bc:	ldr	r1, [r4]
   110c0:	bl	10c48 <fputs_unlocked@plt>
   110c4:	mov	ip, sp
   110c8:	ldr	lr, [pc, #552]	; 112f8 <__assert_fail@plt+0x470>
   110cc:	ldm	lr!, {r0, r1, r2, r3}
   110d0:	stmia	ip!, {r0, r1, r2, r3}
   110d4:	ldm	lr!, {r0, r1, r2, r3}
   110d8:	stmia	ip!, {r0, r1, r2, r3}
   110dc:	ldm	lr!, {r0, r1, r2, r3}
   110e0:	stmia	ip!, {r0, r1, r2, r3}
   110e4:	ldm	lr, {r0, r1}
   110e8:	stm	ip, {r0, r1}
   110ec:	ldr	r1, [sp]
   110f0:	cmp	r1, #0
   110f4:	moveq	r4, sp
   110f8:	beq	11120 <__assert_fail@plt+0x298>
   110fc:	mov	r4, sp
   11100:	ldr	r5, [pc, #500]	; 112fc <__assert_fail@plt+0x474>
   11104:	mov	r0, r5
   11108:	bl	10c60 <strcmp@plt>
   1110c:	cmp	r0, #0
   11110:	beq	11120 <__assert_fail@plt+0x298>
   11114:	ldr	r1, [r4, #8]!
   11118:	cmp	r1, #0
   1111c:	bne	11104 <__assert_fail@plt+0x27c>
   11120:	ldr	r4, [r4, #4]
   11124:	cmp	r4, #0
   11128:	beq	1123c <__assert_fail@plt+0x3b4>
   1112c:	mov	r2, #5
   11130:	ldr	r1, [pc, #456]	; 11300 <__assert_fail@plt+0x478>
   11134:	mov	r0, #0
   11138:	bl	10ccc <dcgettext@plt>
   1113c:	ldr	r3, [pc, #448]	; 11304 <__assert_fail@plt+0x47c>
   11140:	ldr	r2, [pc, #448]	; 11308 <__assert_fail@plt+0x480>
   11144:	mov	r1, r0
   11148:	mov	r0, #1
   1114c:	bl	10dc8 <__printf_chk@plt>
   11150:	mov	r1, #0
   11154:	mov	r0, #5
   11158:	bl	10e1c <setlocale@plt>
   1115c:	cmp	r0, #0
   11160:	beq	11178 <__assert_fail@plt+0x2f0>
   11164:	mov	r2, #3
   11168:	ldr	r1, [pc, #412]	; 1130c <__assert_fail@plt+0x484>
   1116c:	bl	10e64 <strncmp@plt>
   11170:	cmp	r0, #0
   11174:	bne	111d8 <__assert_fail@plt+0x350>
   11178:	mov	r2, #5
   1117c:	ldr	r1, [pc, #396]	; 11310 <__assert_fail@plt+0x488>
   11180:	mov	r0, #0
   11184:	bl	10ccc <dcgettext@plt>
   11188:	ldr	r5, [pc, #364]	; 112fc <__assert_fail@plt+0x474>
   1118c:	mov	r3, r5
   11190:	ldr	r2, [pc, #364]	; 11304 <__assert_fail@plt+0x47c>
   11194:	mov	r1, r0
   11198:	mov	r0, #1
   1119c:	bl	10dc8 <__printf_chk@plt>
   111a0:	mov	r2, #5
   111a4:	ldr	r1, [pc, #360]	; 11314 <__assert_fail@plt+0x48c>
   111a8:	mov	r0, #0
   111ac:	bl	10ccc <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	ldr	r2, [pc, #348]	; 11318 <__assert_fail@plt+0x490>
   111b8:	ldr	r3, [pc, #348]	; 1131c <__assert_fail@plt+0x494>
   111bc:	cmp	r4, r5
   111c0:	movne	r3, r2
   111c4:	mov	r2, r4
   111c8:	mov	r0, #1
   111cc:	bl	10dc8 <__printf_chk@plt>
   111d0:	b	11000 <__assert_fail@plt+0x178>
   111d4:	ldr	r4, [pc, #288]	; 112fc <__assert_fail@plt+0x474>
   111d8:	mov	r2, #5
   111dc:	ldr	r1, [pc, #316]	; 11320 <__assert_fail@plt+0x498>
   111e0:	mov	r0, #0
   111e4:	bl	10ccc <dcgettext@plt>
   111e8:	ldr	r3, [pc, #240]	; 112e0 <__assert_fail@plt+0x458>
   111ec:	ldr	r1, [r3]
   111f0:	bl	10c48 <fputs_unlocked@plt>
   111f4:	b	11178 <__assert_fail@plt+0x2f0>
   111f8:	mov	r2, #5
   111fc:	ldr	r1, [pc, #268]	; 11310 <__assert_fail@plt+0x488>
   11200:	mov	r0, #0
   11204:	bl	10ccc <dcgettext@plt>
   11208:	ldr	r4, [pc, #236]	; 112fc <__assert_fail@plt+0x474>
   1120c:	mov	r3, r4
   11210:	ldr	r2, [pc, #236]	; 11304 <__assert_fail@plt+0x47c>
   11214:	mov	r1, r0
   11218:	mov	r0, #1
   1121c:	bl	10dc8 <__printf_chk@plt>
   11220:	mov	r2, #5
   11224:	ldr	r1, [pc, #232]	; 11314 <__assert_fail@plt+0x48c>
   11228:	mov	r0, #0
   1122c:	bl	10ccc <dcgettext@plt>
   11230:	mov	r1, r0
   11234:	ldr	r3, [pc, #224]	; 1131c <__assert_fail@plt+0x494>
   11238:	b	111c4 <__assert_fail@plt+0x33c>
   1123c:	mov	r2, #5
   11240:	ldr	r1, [pc, #184]	; 11300 <__assert_fail@plt+0x478>
   11244:	mov	r0, #0
   11248:	bl	10ccc <dcgettext@plt>
   1124c:	ldr	r3, [pc, #176]	; 11304 <__assert_fail@plt+0x47c>
   11250:	ldr	r2, [pc, #176]	; 11308 <__assert_fail@plt+0x480>
   11254:	mov	r1, r0
   11258:	mov	r0, #1
   1125c:	bl	10dc8 <__printf_chk@plt>
   11260:	mov	r1, #0
   11264:	mov	r0, #5
   11268:	bl	10e1c <setlocale@plt>
   1126c:	cmp	r0, #0
   11270:	beq	111f8 <__assert_fail@plt+0x370>
   11274:	mov	r2, #3
   11278:	ldr	r1, [pc, #140]	; 1130c <__assert_fail@plt+0x484>
   1127c:	bl	10e64 <strncmp@plt>
   11280:	cmp	r0, #0
   11284:	bne	111d4 <__assert_fail@plt+0x34c>
   11288:	mov	r2, #5
   1128c:	ldr	r1, [pc, #124]	; 11310 <__assert_fail@plt+0x488>
   11290:	mov	r0, #0
   11294:	bl	10ccc <dcgettext@plt>
   11298:	ldr	r4, [pc, #92]	; 112fc <__assert_fail@plt+0x474>
   1129c:	mov	r3, r4
   112a0:	ldr	r2, [pc, #92]	; 11304 <__assert_fail@plt+0x47c>
   112a4:	mov	r1, r0
   112a8:	mov	r0, #1
   112ac:	bl	10dc8 <__printf_chk@plt>
   112b0:	mov	r2, #5
   112b4:	ldr	r1, [pc, #88]	; 11314 <__assert_fail@plt+0x48c>
   112b8:	mov	r0, #0
   112bc:	bl	10ccc <dcgettext@plt>
   112c0:	mov	r1, r0
   112c4:	ldr	r3, [pc, #80]	; 1131c <__assert_fail@plt+0x494>
   112c8:	b	111c4 <__assert_fail@plt+0x33c>
   112cc:	andeq	r7, r2, r0, asr #2
   112d0:	muleq	r1, r0, r5
   112d4:	muleq	r2, ip, r1
   112d8:			; <UNDEFINED> instruction: 0x000155b8
   112dc:	ldrdeq	r5, [r1], -ip
   112e0:	andeq	r7, r2, ip, asr #2
   112e4:	andeq	r5, r1, r0, lsr #12
   112e8:	andeq	r5, r1, r8, asr r6
   112ec:	andeq	r5, r1, r4, lsr #13
   112f0:	andeq	r5, r1, r4, lsl r7
   112f4:	andeq	r5, r1, r4, asr #14
   112f8:	ldrdeq	r5, [r1], -ip
   112fc:	andeq	r5, r1, r8, lsl #11
   11300:	andeq	r5, r1, ip, ror r7
   11304:	muleq	r1, r4, r7
   11308:			; <UNDEFINED> instruction: 0x000157bc
   1130c:	andeq	r5, r1, ip, asr #15
   11310:	andeq	r5, r1, r8, lsl r8
   11314:	andeq	r5, r1, r4, lsr r8
   11318:	ldrdeq	r5, [r1], -r8
   1131c:			; <UNDEFINED> instruction: 0x000158bc
   11320:	ldrdeq	r5, [r1], -r0
   11324:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11328:	sub	sp, sp, #20
   1132c:	mov	r6, r0
   11330:	mov	r5, r1
   11334:	ldr	r0, [r1]
   11338:	bl	124a0 <__assert_fail@plt+0x1618>
   1133c:	ldr	r1, [pc, #924]	; 116e0 <__assert_fail@plt+0x858>
   11340:	mov	r0, #6
   11344:	bl	10e1c <setlocale@plt>
   11348:	ldr	r4, [pc, #916]	; 116e4 <__assert_fail@plt+0x85c>
   1134c:	ldr	r1, [pc, #916]	; 116e8 <__assert_fail@plt+0x860>
   11350:	mov	r0, r4
   11354:	bl	10e58 <bindtextdomain@plt>
   11358:	mov	r0, r4
   1135c:	bl	10ce4 <textdomain@plt>
   11360:	ldr	r0, [pc, #900]	; 116ec <__assert_fail@plt+0x864>
   11364:	bl	154b8 <__assert_fail@plt+0x4630>
   11368:	mov	r2, #1
   1136c:	ldr	r3, [pc, #892]	; 116f0 <__assert_fail@plt+0x868>
   11370:	strb	r2, [r3]
   11374:	ldr	r2, [pc, #888]	; 116f4 <__assert_fail@plt+0x86c>
   11378:	add	r7, r2, #56	; 0x38
   1137c:	add	r4, r2, #136	; 0x88
   11380:	mov	r9, r3
   11384:	ldr	r8, [pc, #876]	; 116f8 <__assert_fail@plt+0x870>
   11388:	mov	r3, #0
   1138c:	str	r3, [sp]
   11390:	mov	r3, r7
   11394:	mov	r2, r4
   11398:	mov	r1, r5
   1139c:	mov	r0, r6
   113a0:	bl	10d74 <getopt_long@plt>
   113a4:	cmn	r0, #1
   113a8:	beq	1145c <__assert_fail@plt+0x5d4>
   113ac:	cmp	r0, #57	; 0x39
   113b0:	bgt	113d4 <__assert_fail@plt+0x54c>
   113b4:	cmp	r0, #48	; 0x30
   113b8:	bge	113fc <__assert_fail@plt+0x574>
   113bc:	cmn	r0, #3
   113c0:	beq	11420 <__assert_fail@plt+0x598>
   113c4:	cmn	r0, #2
   113c8:	bne	11454 <__assert_fail@plt+0x5cc>
   113cc:	mov	r0, #0
   113d0:	bl	10fc0 <__assert_fail@plt+0x138>
   113d4:	cmp	r0, #105	; 0x69
   113d8:	beq	113f0 <__assert_fail@plt+0x568>
   113dc:	cmp	r0, #116	; 0x74
   113e0:	bne	11454 <__assert_fail@plt+0x5cc>
   113e4:	ldr	r0, [r8]
   113e8:	bl	118d0 <__assert_fail@plt+0xa48>
   113ec:	b	11388 <__assert_fail@plt+0x500>
   113f0:	mov	r3, #0
   113f4:	strb	r3, [r9]
   113f8:	b	11388 <__assert_fail@plt+0x500>
   113fc:	ldr	r3, [r8]
   11400:	cmp	r3, #0
   11404:	subne	r0, r3, #1
   11408:	strbeq	r0, [sp, #12]
   1140c:	moveq	r3, #0
   11410:	strbeq	r3, [sp, #13]
   11414:	addeq	r0, sp, #12
   11418:	bl	118d0 <__assert_fail@plt+0xa48>
   1141c:	b	11388 <__assert_fail@plt+0x500>
   11420:	mov	r4, #0
   11424:	str	r4, [sp, #4]
   11428:	ldr	r3, [pc, #716]	; 116fc <__assert_fail@plt+0x874>
   1142c:	str	r3, [sp]
   11430:	ldr	r3, [pc, #712]	; 11700 <__assert_fail@plt+0x878>
   11434:	ldr	r3, [r3]
   11438:	ldr	r2, [pc, #708]	; 11704 <__assert_fail@plt+0x87c>
   1143c:	ldr	r1, [pc, #708]	; 11708 <__assert_fail@plt+0x880>
   11440:	ldr	r0, [pc, #708]	; 1170c <__assert_fail@plt+0x884>
   11444:	ldr	r0, [r0]
   11448:	bl	144bc <__assert_fail@plt+0x3634>
   1144c:	mov	r0, r4
   11450:	bl	10d8c <exit@plt>
   11454:	mov	r0, #1
   11458:	bl	10fc0 <__assert_fail@plt+0x138>
   1145c:	bl	11c04 <__assert_fail@plt+0xd7c>
   11460:	ldr	r3, [pc, #680]	; 11710 <__assert_fail@plt+0x888>
   11464:	ldr	r0, [r3]
   11468:	cmp	r6, r0
   1146c:	addgt	r0, r5, r0, lsl #2
   11470:	movle	r0, #0
   11474:	bl	11ebc <__assert_fail@plt+0x1034>
   11478:	mov	r0, #0
   1147c:	bl	11ee8 <__assert_fail@plt+0x1060>
   11480:	subs	r6, r0, #0
   11484:	beq	114d4 <__assert_fail@plt+0x64c>
   11488:	ldr	r7, [pc, #636]	; 1170c <__assert_fail@plt+0x884>
   1148c:	mov	r3, #0
   11490:	str	r3, [sp, #12]
   11494:	mov	r4, #0
   11498:	mov	r5, #0
   1149c:	mov	r9, #1
   114a0:	ldr	fp, [pc, #584]	; 116f0 <__assert_fail@plt+0x868>
   114a4:	mov	sl, #32
   114a8:	b	11634 <__assert_fail@plt+0x7ac>
   114ac:	mov	r0, r6
   114b0:	bl	10e04 <__uflow@plt>
   114b4:	subs	r8, r0, #0
   114b8:	bge	116d4 <__assert_fail@plt+0x84c>
   114bc:	mov	r0, r6
   114c0:	bl	11ee8 <__assert_fail@plt+0x1060>
   114c4:	subs	r6, r0, #0
   114c8:	bne	11634 <__assert_fail@plt+0x7ac>
   114cc:	cmp	r9, #0
   114d0:	bne	11658 <__assert_fail@plt+0x7d0>
   114d4:	bl	12098 <__assert_fail@plt+0x1210>
   114d8:	ldr	r3, [pc, #564]	; 11714 <__assert_fail@plt+0x88c>
   114dc:	ldr	r0, [r3]
   114e0:	add	sp, sp, #20
   114e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114e8:	add	r3, sp, #11
   114ec:	add	r2, sp, #12
   114f0:	mov	r0, r4
   114f4:	mov	r1, r5
   114f8:	bl	11d84 <__assert_fail@plt+0xefc>
   114fc:	mov	r8, r0
   11500:	mov	r9, r1
   11504:	ldrb	r3, [sp, #11]
   11508:	cmp	r3, #0
   1150c:	beq	11518 <__assert_fail@plt+0x690>
   11510:	adds	r8, r4, #1
   11514:	adc	r9, r5, #0
   11518:	cmp	r5, r9
   1151c:	cmpeq	r4, r8
   11520:	bhi	11590 <__assert_fail@plt+0x708>
   11524:	adds	r4, r4, #1
   11528:	adc	r5, r5, #0
   1152c:	cmp	r9, r5
   11530:	cmpeq	r8, r4
   11534:	bls	115b0 <__assert_fail@plt+0x728>
   11538:	ldr	r0, [r7]
   1153c:	ldr	r3, [r0, #20]
   11540:	ldr	r2, [r0, #24]
   11544:	cmp	r3, r2
   11548:	addcc	r2, r3, #1
   1154c:	strcc	r2, [r0, #20]
   11550:	strbcc	sl, [r3]
   11554:	bcc	11524 <__assert_fail@plt+0x69c>
   11558:	mov	r1, sl
   1155c:	bl	10e10 <__overflow@plt>
   11560:	cmp	r0, #0
   11564:	bge	11524 <__assert_fail@plt+0x69c>
   11568:	bl	10da4 <__errno_location@plt>
   1156c:	ldr	r4, [r0]
   11570:	mov	r2, #5
   11574:	ldr	r1, [pc, #412]	; 11718 <__assert_fail@plt+0x890>
   11578:	mov	r0, #0
   1157c:	bl	10ccc <dcgettext@plt>
   11580:	mov	r2, r0
   11584:	mov	r1, r4
   11588:	mov	r0, #1
   1158c:	bl	10d38 <error@plt>
   11590:	mov	r2, #5
   11594:	ldr	r1, [pc, #384]	; 1171c <__assert_fail@plt+0x894>
   11598:	mov	r0, #0
   1159c:	bl	10ccc <dcgettext@plt>
   115a0:	mov	r2, r0
   115a4:	mov	r1, #0
   115a8:	mov	r0, #1
   115ac:	bl	10d38 <error@plt>
   115b0:	mov	r8, sl
   115b4:	b	11678 <__assert_fail@plt+0x7f0>
   115b8:	orrs	r3, r4, r5
   115bc:	movne	r2, #1
   115c0:	moveq	r2, #0
   115c4:	mov	r3, #0
   115c8:	subs	r4, r4, r2
   115cc:	sbc	r5, r5, r3
   115d0:	ldr	r3, [sp, #12]
   115d4:	cmp	r3, #0
   115d8:	subne	r3, r3, #1
   115dc:	str	r3, [sp, #12]
   115e0:	b	11678 <__assert_fail@plt+0x7f0>
   115e4:	mov	r2, #5
   115e8:	ldr	r1, [pc, #300]	; 1171c <__assert_fail@plt+0x894>
   115ec:	mov	r0, #0
   115f0:	bl	10ccc <dcgettext@plt>
   115f4:	mov	r2, r0
   115f8:	mov	r1, #0
   115fc:	mov	r0, #1
   11600:	bl	10d38 <error@plt>
   11604:	cmp	r8, #0
   11608:	blt	114d4 <__assert_fail@plt+0x64c>
   1160c:	ldr	r0, [r7]
   11610:	ldr	r3, [r0, #20]
   11614:	ldr	r2, [r0, #24]
   11618:	cmp	r3, r2
   1161c:	addcc	r2, r3, #1
   11620:	strcc	r2, [r0, #20]
   11624:	strbcc	r8, [r3]
   11628:	bcs	1169c <__assert_fail@plt+0x814>
   1162c:	cmp	r8, #10
   11630:	beq	1148c <__assert_fail@plt+0x604>
   11634:	ldr	r3, [r6, #4]
   11638:	ldr	r2, [r6, #8]
   1163c:	cmp	r3, r2
   11640:	bcs	114ac <__assert_fail@plt+0x624>
   11644:	add	r2, r3, #1
   11648:	str	r2, [r6, #4]
   1164c:	ldrb	r8, [r3]
   11650:	cmp	r9, #0
   11654:	beq	1160c <__assert_fail@plt+0x784>
   11658:	cmp	r8, #9
   1165c:	beq	114e8 <__assert_fail@plt+0x660>
   11660:	cmp	r8, #8
   11664:	beq	115b8 <__assert_fail@plt+0x730>
   11668:	adds	r4, r4, #1
   1166c:	adc	r5, r5, #0
   11670:	orrs	r3, r4, r5
   11674:	beq	115e4 <__assert_fail@plt+0x75c>
   11678:	ldrb	r9, [fp]
   1167c:	cmp	r9, #0
   11680:	bne	11604 <__assert_fail@plt+0x77c>
   11684:	bl	10d80 <__ctype_b_loc@plt>
   11688:	ldr	r2, [r0]
   1168c:	lsl	r3, r8, #1
   11690:	ldrh	r9, [r2, r3]
   11694:	and	r9, r9, #1
   11698:	b	11604 <__assert_fail@plt+0x77c>
   1169c:	uxtb	r1, r8
   116a0:	bl	10e10 <__overflow@plt>
   116a4:	cmp	r0, #0
   116a8:	bge	1162c <__assert_fail@plt+0x7a4>
   116ac:	bl	10da4 <__errno_location@plt>
   116b0:	ldr	r4, [r0]
   116b4:	mov	r2, #5
   116b8:	ldr	r1, [pc, #88]	; 11718 <__assert_fail@plt+0x890>
   116bc:	mov	r0, #0
   116c0:	bl	10ccc <dcgettext@plt>
   116c4:	mov	r2, r0
   116c8:	mov	r1, r4
   116cc:	mov	r0, #1
   116d0:	bl	10d38 <error@plt>
   116d4:	cmp	r9, #0
   116d8:	bne	11658 <__assert_fail@plt+0x7d0>
   116dc:	b	1160c <__assert_fail@plt+0x784>
   116e0:	ldrdeq	r5, [r1], -r8
   116e4:	andeq	r5, r1, r0, asr #15
   116e8:	andeq	r5, r1, r8, ror #16
   116ec:	andeq	r2, r1, r8, asr #2
   116f0:	muleq	r2, r0, r1
   116f4:	ldrdeq	r5, [r1], -ip
   116f8:	andeq	r7, r2, r0, asr r1
   116fc:	andeq	r5, r1, r0, lsl #17
   11700:	andeq	r7, r2, r8, ror #1
   11704:			; <UNDEFINED> instruction: 0x000157bc
   11708:	andeq	r5, r1, r8, lsl #11
   1170c:	andeq	r7, r2, ip, asr #2
   11710:	andeq	r7, r2, r8, lsr r1
   11714:	andeq	r7, r2, ip, lsl #3
   11718:	andeq	r5, r1, r8, lsr #17
   1171c:	muleq	r1, r0, r8
   11720:	push	{r4, r5, r6, lr}
   11724:	mov	r4, r0
   11728:	mov	r5, r1
   1172c:	ldr	r3, [pc, #64]	; 11774 <__assert_fail@plt+0x8ec>
   11730:	ldrd	r2, [r3]
   11734:	orrs	r3, r2, r3
   11738:	moveq	r0, #1
   1173c:	bne	1174c <__assert_fail@plt+0x8c4>
   11740:	ldr	r3, [pc, #44]	; 11774 <__assert_fail@plt+0x8ec>
   11744:	strd	r4, [r3]
   11748:	pop	{r4, r5, r6, pc}
   1174c:	mov	r2, #5
   11750:	ldr	r1, [pc, #32]	; 11778 <__assert_fail@plt+0x8f0>
   11754:	mov	r0, #0
   11758:	bl	10ccc <dcgettext@plt>
   1175c:	mov	r2, r0
   11760:	mov	r1, #0
   11764:	mov	r0, r1
   11768:	bl	10d38 <error@plt>
   1176c:	mov	r0, #0
   11770:	b	11740 <__assert_fail@plt+0x8b8>
   11774:	andeq	r7, r2, r8, asr r1
   11778:	andeq	r5, r1, ip, asr #18
   1177c:	push	{r4, r5, r6, lr}
   11780:	mov	r4, r0
   11784:	mov	r5, r1
   11788:	ldr	r3, [pc, #64]	; 117d0 <__assert_fail@plt+0x948>
   1178c:	ldrd	r2, [r3, #8]
   11790:	orrs	r3, r2, r3
   11794:	moveq	r0, #1
   11798:	bne	117a8 <__assert_fail@plt+0x920>
   1179c:	ldr	r3, [pc, #44]	; 117d0 <__assert_fail@plt+0x948>
   117a0:	strd	r4, [r3, #8]
   117a4:	pop	{r4, r5, r6, pc}
   117a8:	mov	r2, #5
   117ac:	ldr	r1, [pc, #32]	; 117d4 <__assert_fail@plt+0x94c>
   117b0:	mov	r0, #0
   117b4:	bl	10ccc <dcgettext@plt>
   117b8:	mov	r2, r0
   117bc:	mov	r1, #0
   117c0:	mov	r0, r1
   117c4:	bl	10d38 <error@plt>
   117c8:	mov	r0, #0
   117cc:	b	1179c <__assert_fail@plt+0x914>
   117d0:	andeq	r7, r2, r8, asr r1
   117d4:	andeq	r5, r1, ip, ror r9
   117d8:	push	{r4, r5, r6, r7, r8, lr}
   117dc:	mov	r6, r0
   117e0:	mov	r7, r1
   117e4:	ldr	r3, [pc, #220]	; 118c8 <__assert_fail@plt+0xa40>
   117e8:	ldr	r3, [r3, #16]
   117ec:	cmp	r3, #0
   117f0:	beq	11878 <__assert_fail@plt+0x9f0>
   117f4:	ldr	r2, [pc, #204]	; 118c8 <__assert_fail@plt+0xa40>
   117f8:	ldr	r2, [r2, #20]
   117fc:	add	r2, r2, r3, lsl #3
   11800:	ldrd	r4, [r2, #-8]
   11804:	cmp	r5, r1
   11808:	cmpeq	r4, r0
   1180c:	movhi	r4, #0
   11810:	movhi	r5, #0
   11814:	bls	11880 <__assert_fail@plt+0x9f8>
   11818:	ldr	r2, [pc, #168]	; 118c8 <__assert_fail@plt+0xa40>
   1181c:	ldr	r2, [r2, #24]
   11820:	cmp	r3, r2
   11824:	beq	1188c <__assert_fail@plt+0xa04>
   11828:	ldr	r3, [pc, #152]	; 118c8 <__assert_fail@plt+0xa40>
   1182c:	ldr	r1, [r3, #20]
   11830:	ldr	r2, [r3, #16]
   11834:	add	r0, r2, #1
   11838:	str	r0, [r3, #16]
   1183c:	lsl	r2, r2, #3
   11840:	strd	r6, [r1, r2]
   11844:	ldr	r2, [r3, #28]
   11848:	mov	r3, #0
   1184c:	cmp	r5, r3
   11850:	cmpeq	r4, r2
   11854:	popls	{r4, r5, r6, r7, r8, pc}
   11858:	mvn	r2, #0
   1185c:	mov	r3, #0
   11860:	cmp	r5, r3
   11864:	cmpeq	r4, r2
   11868:	bhi	118a8 <__assert_fail@plt+0xa20>
   1186c:	ldr	r3, [pc, #84]	; 118c8 <__assert_fail@plt+0xa40>
   11870:	str	r4, [r3, #28]
   11874:	pop	{r4, r5, r6, r7, r8, pc}
   11878:	mov	r4, #0
   1187c:	mov	r5, #0
   11880:	subs	r4, r6, r4
   11884:	sbc	r5, r7, r5
   11888:	b	11818 <__assert_fail@plt+0x990>
   1188c:	ldr	r8, [pc, #52]	; 118c8 <__assert_fail@plt+0xa40>
   11890:	mov	r2, #8
   11894:	add	r1, r8, #24
   11898:	ldr	r0, [r8, #20]
   1189c:	bl	146b0 <__assert_fail@plt+0x3828>
   118a0:	str	r0, [r8, #20]
   118a4:	b	11828 <__assert_fail@plt+0x9a0>
   118a8:	mov	r2, #5
   118ac:	ldr	r1, [pc, #24]	; 118cc <__assert_fail@plt+0xa44>
   118b0:	mov	r0, #0
   118b4:	bl	10ccc <dcgettext@plt>
   118b8:	mov	r2, r0
   118bc:	mov	r1, #0
   118c0:	mov	r0, #1
   118c4:	bl	10d38 <error@plt>
   118c8:	andeq	r7, r2, r8, asr r1
   118cc:	andeq	r5, r1, ip, lsr #19
   118d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118d4:	sub	sp, sp, #12
   118d8:	ldrb	r4, [r0]
   118dc:	cmp	r4, #0
   118e0:	beq	11ba0 <__assert_fail@plt+0xd18>
   118e4:	mov	r5, r0
   118e8:	mov	r2, #0
   118ec:	mov	r3, #0
   118f0:	strd	r2, [sp]
   118f4:	mov	fp, #1
   118f8:	mov	sl, #0
   118fc:	mov	r8, sl
   11900:	mov	r7, sl
   11904:	mov	r6, sl
   11908:	mov	r9, sl
   1190c:	b	11b20 <__assert_fail@plt+0xc98>
   11910:	ldrd	r0, [sp]
   11914:	bl	11720 <__assert_fail@plt+0x898>
   11918:	subs	r7, r0, #0
   1191c:	beq	11b04 <__assert_fail@plt+0xc7c>
   11920:	mov	r4, r5
   11924:	mov	r6, r9
   11928:	b	11b10 <__assert_fail@plt+0xc88>
   1192c:	ldrd	r0, [sp]
   11930:	bl	117d8 <__assert_fail@plt+0x950>
   11934:	mov	r7, r8
   11938:	mov	r6, r8
   1193c:	mov	r4, r5
   11940:	b	11b10 <__assert_fail@plt+0xc88>
   11944:	cmp	r4, #47	; 0x2f
   11948:	beq	119e8 <__assert_fail@plt+0xb60>
   1194c:	cmp	r4, #43	; 0x2b
   11950:	beq	11a40 <__assert_fail@plt+0xbb8>
   11954:	sub	r1, r4, #48	; 0x30
   11958:	cmp	r1, #9
   1195c:	bhi	11ad4 <__assert_fail@plt+0xc4c>
   11960:	cmp	r6, #0
   11964:	beq	11bc4 <__assert_fail@plt+0xd3c>
   11968:	ldrd	r2, [sp]
   1196c:	add	r1, pc, #628	; 0x274
   11970:	ldrd	r0, [r1]
   11974:	cmp	r3, r1
   11978:	cmpeq	r2, r0
   1197c:	bls	11a98 <__assert_fail@plt+0xc10>
   11980:	ldr	r1, [pc, #616]	; 11bf0 <__assert_fail@plt+0xd68>
   11984:	mov	r0, sl
   11988:	bl	10e7c <strspn@plt>
   1198c:	mov	r4, r0
   11990:	mov	r1, r0
   11994:	mov	r0, sl
   11998:	bl	14ae4 <__assert_fail@plt+0x3c5c>
   1199c:	mov	r5, r0
   119a0:	mov	r2, #5
   119a4:	ldr	r1, [pc, #584]	; 11bf4 <__assert_fail@plt+0xd6c>
   119a8:	mov	r0, r9
   119ac:	bl	10ccc <dcgettext@plt>
   119b0:	mov	fp, r0
   119b4:	mov	r0, r5
   119b8:	bl	13ff0 <__assert_fail@plt+0x3168>
   119bc:	mov	r3, r0
   119c0:	mov	r2, fp
   119c4:	mov	r1, r9
   119c8:	mov	r0, r9
   119cc:	bl	10d38 <error@plt>
   119d0:	mov	r0, r5
   119d4:	bl	123a0 <__assert_fail@plt+0x1518>
   119d8:	sub	r4, r4, #1
   119dc:	add	r4, sl, r4
   119e0:	mov	fp, r9
   119e4:	b	11b10 <__assert_fail@plt+0xc88>
   119e8:	cmp	r6, #0
   119ec:	moveq	r8, r6
   119f0:	moveq	r4, r5
   119f4:	moveq	r7, #1
   119f8:	beq	11b10 <__assert_fail@plt+0xc88>
   119fc:	mov	r2, #5
   11a00:	ldr	r1, [pc, #496]	; 11bf8 <__assert_fail@plt+0xd70>
   11a04:	mov	r0, r9
   11a08:	bl	10ccc <dcgettext@plt>
   11a0c:	mov	r4, r0
   11a10:	mov	r0, r5
   11a14:	bl	13ff0 <__assert_fail@plt+0x3168>
   11a18:	mov	r3, r0
   11a1c:	mov	r2, r4
   11a20:	mov	r1, r9
   11a24:	mov	r0, r9
   11a28:	bl	10d38 <error@plt>
   11a2c:	mov	r7, r6
   11a30:	mov	r4, r5
   11a34:	mov	fp, r9
   11a38:	mov	r8, r9
   11a3c:	b	11b10 <__assert_fail@plt+0xc88>
   11a40:	cmp	r6, #0
   11a44:	moveq	r7, r6
   11a48:	moveq	r4, r5
   11a4c:	moveq	r8, #1
   11a50:	beq	11b10 <__assert_fail@plt+0xc88>
   11a54:	mov	r2, #5
   11a58:	ldr	r1, [pc, #412]	; 11bfc <__assert_fail@plt+0xd74>
   11a5c:	mov	r0, r9
   11a60:	bl	10ccc <dcgettext@plt>
   11a64:	mov	r4, r0
   11a68:	mov	r0, r5
   11a6c:	bl	13ff0 <__assert_fail@plt+0x3168>
   11a70:	mov	r3, r0
   11a74:	mov	r2, r4
   11a78:	mov	r1, r9
   11a7c:	mov	r0, r9
   11a80:	bl	10d38 <error@plt>
   11a84:	mov	r8, r6
   11a88:	mov	r4, r5
   11a8c:	mov	fp, r9
   11a90:	mov	r7, r9
   11a94:	b	11b10 <__assert_fail@plt+0xc88>
   11a98:	mov	r1, #10
   11a9c:	ldr	r3, [sp]
   11aa0:	umull	r2, r3, r3, r1
   11aa4:	ldr	ip, [sp, #4]
   11aa8:	mla	r3, r1, ip, r3
   11aac:	sub	r4, r4, #48	; 0x30
   11ab0:	adds	r2, r2, r4
   11ab4:	adc	r3, r3, r4, asr #31
   11ab8:	ldrd	r0, [sp]
   11abc:	cmp	r3, r1
   11ac0:	cmpeq	r2, r0
   11ac4:	bcc	11980 <__assert_fail@plt+0xaf8>
   11ac8:	strd	r2, [sp]
   11acc:	mov	r4, r5
   11ad0:	b	11b10 <__assert_fail@plt+0xc88>
   11ad4:	mov	r2, #5
   11ad8:	ldr	r1, [pc, #288]	; 11c00 <__assert_fail@plt+0xd78>
   11adc:	mov	r0, #0
   11ae0:	bl	10ccc <dcgettext@plt>
   11ae4:	mov	r4, r0
   11ae8:	mov	r0, r5
   11aec:	bl	13ff0 <__assert_fail@plt+0x3168>
   11af0:	mov	r3, r0
   11af4:	mov	r2, r4
   11af8:	mov	r1, #0
   11afc:	mov	r0, r1
   11b00:	bl	10d38 <error@plt>
   11b04:	mov	r0, #1
   11b08:	bl	10d8c <exit@plt>
   11b0c:	mov	r4, r5
   11b10:	add	r5, r4, #1
   11b14:	ldrb	r4, [r4, #1]
   11b18:	cmp	r4, #0
   11b1c:	beq	11b74 <__assert_fail@plt+0xcec>
   11b20:	cmp	r4, #44	; 0x2c
   11b24:	beq	11b40 <__assert_fail@plt+0xcb8>
   11b28:	bl	10d80 <__ctype_b_loc@plt>
   11b2c:	ldr	r2, [r0]
   11b30:	lsl	r3, r4, #1
   11b34:	ldrh	r3, [r2, r3]
   11b38:	tst	r3, #1
   11b3c:	beq	11944 <__assert_fail@plt+0xabc>
   11b40:	cmp	r6, #0
   11b44:	beq	11b0c <__assert_fail@plt+0xc84>
   11b48:	cmp	r7, #0
   11b4c:	bne	11910 <__assert_fail@plt+0xa88>
   11b50:	cmp	r8, #0
   11b54:	beq	1192c <__assert_fail@plt+0xaa4>
   11b58:	ldrd	r0, [sp]
   11b5c:	bl	1177c <__assert_fail@plt+0x8f4>
   11b60:	subs	r8, r0, #0
   11b64:	beq	11b04 <__assert_fail@plt+0xc7c>
   11b68:	mov	r6, r7
   11b6c:	mov	r4, r5
   11b70:	b	11b10 <__assert_fail@plt+0xc88>
   11b74:	tst	r6, fp
   11b78:	beq	11b98 <__assert_fail@plt+0xd10>
   11b7c:	cmp	r7, #0
   11b80:	bne	11ba8 <__assert_fail@plt+0xd20>
   11b84:	cmp	r8, #0
   11b88:	beq	11bb8 <__assert_fail@plt+0xd30>
   11b8c:	ldrd	r0, [sp]
   11b90:	bl	1177c <__assert_fail@plt+0x8f4>
   11b94:	and	fp, fp, r0
   11b98:	cmp	fp, #0
   11b9c:	beq	11b04 <__assert_fail@plt+0xc7c>
   11ba0:	add	sp, sp, #12
   11ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ba8:	ldrd	r0, [sp]
   11bac:	bl	11720 <__assert_fail@plt+0x898>
   11bb0:	and	fp, fp, r0
   11bb4:	b	11b98 <__assert_fail@plt+0xd10>
   11bb8:	ldrd	r0, [sp]
   11bbc:	bl	117d8 <__assert_fail@plt+0x950>
   11bc0:	b	11b98 <__assert_fail@plt+0xd10>
   11bc4:	sub	r4, r4, #48	; 0x30
   11bc8:	mov	r2, r4
   11bcc:	asr	r3, r4, #31
   11bd0:	strd	r2, [sp]
   11bd4:	mov	sl, r5
   11bd8:	mov	r4, r5
   11bdc:	mov	r6, #1
   11be0:	b	11b10 <__assert_fail@plt+0xc88>
   11be4:	nop			; (mov r0, r0)
   11be8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11bec:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11bf0:	andeq	r5, r1, r8, asr #20
   11bf4:	andeq	r5, r1, r4, asr sl
   11bf8:	andeq	r5, r1, r4, asr #19
   11bfc:	strdeq	r5, [r1], -r0
   11c00:	andeq	r5, r1, ip, lsl sl
   11c04:	push	{r4, r5, r6, lr}
   11c08:	ldr	r3, [pc, #356]	; 11d74 <__assert_fail@plt+0xeec>
   11c0c:	ldr	lr, [r3, #20]
   11c10:	ldr	ip, [r3, #16]
   11c14:	cmp	ip, #0
   11c18:	beq	11cf0 <__assert_fail@plt+0xe68>
   11c1c:	ldrd	r4, [lr]
   11c20:	orrs	r3, r4, r5
   11c24:	movne	r0, lr
   11c28:	movne	r1, #0
   11c2c:	beq	11c60 <__assert_fail@plt+0xdd8>
   11c30:	add	r1, r1, #1
   11c34:	cmp	ip, r1
   11c38:	beq	11d30 <__assert_fail@plt+0xea8>
   11c3c:	ldrd	r2, [r0, #8]!
   11c40:	orrs	r6, r2, r3
   11c44:	beq	11c60 <__assert_fail@plt+0xdd8>
   11c48:	cmp	r3, r5
   11c4c:	cmpeq	r2, r4
   11c50:	bls	11c80 <__assert_fail@plt+0xdf8>
   11c54:	mov	r4, r2
   11c58:	mov	r5, r3
   11c5c:	b	11c30 <__assert_fail@plt+0xda8>
   11c60:	mov	r2, #5
   11c64:	ldr	r1, [pc, #268]	; 11d78 <__assert_fail@plt+0xef0>
   11c68:	mov	r0, #0
   11c6c:	bl	10ccc <dcgettext@plt>
   11c70:	mov	r2, r0
   11c74:	mov	r1, #0
   11c78:	mov	r0, #1
   11c7c:	bl	10d38 <error@plt>
   11c80:	mov	r2, #5
   11c84:	ldr	r1, [pc, #240]	; 11d7c <__assert_fail@plt+0xef4>
   11c88:	mov	r0, #0
   11c8c:	bl	10ccc <dcgettext@plt>
   11c90:	mov	r2, r0
   11c94:	mov	r1, #0
   11c98:	mov	r0, #1
   11c9c:	bl	10d38 <error@plt>
   11ca0:	ldr	r3, [pc, #204]	; 11d74 <__assert_fail@plt+0xeec>
   11ca4:	ldrd	r2, [r3]
   11ca8:	orrs	r1, r2, r3
   11cac:	moveq	r2, #8
   11cb0:	ldr	r3, [pc, #188]	; 11d74 <__assert_fail@plt+0xeec>
   11cb4:	str	r2, [r3, #28]
   11cb8:	str	r2, [r3, #32]
   11cbc:	mov	r2, #0
   11cc0:	str	r2, [r3, #36]	; 0x24
   11cc4:	pop	{r4, r5, r6, pc}
   11cc8:	ldr	r1, [pc, #164]	; 11d74 <__assert_fail@plt+0xeec>
   11ccc:	ldrd	r0, [r1]
   11cd0:	orr	r2, r2, r0
   11cd4:	orr	r3, r3, r1
   11cd8:	orrs	r3, r2, r3
   11cdc:	bne	11d60 <__assert_fail@plt+0xed8>
   11ce0:	ldrd	r0, [lr]
   11ce4:	ldr	r3, [pc, #136]	; 11d74 <__assert_fail@plt+0xeec>
   11ce8:	strd	r0, [r3, #32]
   11cec:	pop	{r4, r5, r6, pc}
   11cf0:	ldr	r3, [pc, #124]	; 11d74 <__assert_fail@plt+0xeec>
   11cf4:	ldrd	r2, [r3, #8]
   11cf8:	orrs	r1, r2, r3
   11cfc:	beq	11ca0 <__assert_fail@plt+0xe18>
   11d00:	ldr	r1, [pc, #108]	; 11d74 <__assert_fail@plt+0xeec>
   11d04:	ldrd	r0, [r1]
   11d08:	orrs	r1, r0, r1
   11d0c:	beq	11cb0 <__assert_fail@plt+0xe28>
   11d10:	mov	r2, #5
   11d14:	ldr	r1, [pc, #100]	; 11d80 <__assert_fail@plt+0xef8>
   11d18:	mov	r0, #0
   11d1c:	bl	10ccc <dcgettext@plt>
   11d20:	mov	r2, r0
   11d24:	mov	r1, #0
   11d28:	mov	r0, #1
   11d2c:	bl	10d38 <error@plt>
   11d30:	ldr	r3, [pc, #60]	; 11d74 <__assert_fail@plt+0xeec>
   11d34:	ldrd	r2, [r3, #8]
   11d38:	orrs	r1, r2, r3
   11d3c:	beq	11d58 <__assert_fail@plt+0xed0>
   11d40:	ldr	r1, [pc, #44]	; 11d74 <__assert_fail@plt+0xeec>
   11d44:	ldrd	r0, [r1]
   11d48:	orrs	r1, r0, r1
   11d4c:	bne	11d10 <__assert_fail@plt+0xe88>
   11d50:	cmp	ip, #0
   11d54:	beq	11cb0 <__assert_fail@plt+0xe28>
   11d58:	cmp	ip, #1
   11d5c:	beq	11cc8 <__assert_fail@plt+0xe40>
   11d60:	mov	r0, #0
   11d64:	mov	r1, #0
   11d68:	ldr	r3, [pc, #4]	; 11d74 <__assert_fail@plt+0xeec>
   11d6c:	strd	r0, [r3, #32]
   11d70:	pop	{r4, r5, r6, pc}
   11d74:	andeq	r7, r2, r8, asr r1
   11d78:	andeq	r5, r1, r0, ror sl
   11d7c:	andeq	r5, r1, r8, lsl #21
   11d80:	andeq	r5, r1, r4, lsr #21
   11d84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11d88:	mov	r6, r0
   11d8c:	mov	r7, r1
   11d90:	mov	r1, #0
   11d94:	strb	r1, [r3]
   11d98:	ldr	r1, [pc, #280]	; 11eb8 <__assert_fail@plt+0x1030>
   11d9c:	ldrd	r0, [r1, #32]
   11da0:	orrs	ip, r0, r1
   11da4:	bne	11e00 <__assert_fail@plt+0xf78>
   11da8:	ldr	r1, [r2]
   11dac:	ldr	r0, [pc, #260]	; 11eb8 <__assert_fail@plt+0x1030>
   11db0:	ldr	r0, [r0, #16]
   11db4:	cmp	r1, r0
   11db8:	bcs	11e30 <__assert_fail@plt+0xfa8>
   11dbc:	lsl	lr, r1, #3
   11dc0:	ldr	ip, [pc, #240]	; 11eb8 <__assert_fail@plt+0x1030>
   11dc4:	ldr	r4, [ip, #20]
   11dc8:	add	ip, r4, lr
   11dcc:	ldrd	r4, [r4, lr]
   11dd0:	cmp	r7, r5
   11dd4:	cmpeq	r6, r4
   11dd8:	bcc	11e24 <__assert_fail@plt+0xf9c>
   11ddc:	add	r1, r1, #1
   11de0:	str	r1, [r2]
   11de4:	cmp	r1, r0
   11de8:	beq	11e30 <__assert_fail@plt+0xfa8>
   11dec:	ldrd	r4, [ip, #8]!
   11df0:	cmp	r7, r5
   11df4:	cmpeq	r6, r4
   11df8:	bcs	11ddc <__assert_fail@plt+0xf54>
   11dfc:	b	11e24 <__assert_fail@plt+0xf9c>
   11e00:	adds	r4, r0, r6
   11e04:	adc	r5, r1, r7
   11e08:	mov	r2, r0
   11e0c:	mov	r3, r1
   11e10:	mov	r0, r6
   11e14:	mov	r1, r7
   11e18:	bl	152e0 <__assert_fail@plt+0x4458>
   11e1c:	subs	r4, r4, r2
   11e20:	sbc	r5, r5, r3
   11e24:	mov	r0, r4
   11e28:	mov	r1, r5
   11e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e30:	ldr	r2, [pc, #128]	; 11eb8 <__assert_fail@plt+0x1030>
   11e34:	ldrd	r8, [r2]
   11e38:	orrs	r2, r8, r9
   11e3c:	bne	11e90 <__assert_fail@plt+0x1008>
   11e40:	ldr	r2, [pc, #112]	; 11eb8 <__assert_fail@plt+0x1030>
   11e44:	ldrd	r4, [r2, #8]
   11e48:	orrs	r2, r4, r5
   11e4c:	moveq	r2, #1
   11e50:	strbeq	r2, [r3]
   11e54:	beq	11e24 <__assert_fail@plt+0xf9c>
   11e58:	adds	r8, r6, r4
   11e5c:	adc	r9, r7, r5
   11e60:	ldr	r3, [pc, #80]	; 11eb8 <__assert_fail@plt+0x1030>
   11e64:	ldr	r3, [r3, #20]
   11e68:	add	r0, r3, r0, lsl #3
   11e6c:	ldrd	r0, [r0, #-8]
   11e70:	mov	r2, r4
   11e74:	mov	r3, r5
   11e78:	subs	r0, r6, r0
   11e7c:	sbc	r1, r7, r1
   11e80:	bl	152e0 <__assert_fail@plt+0x4458>
   11e84:	subs	r4, r8, r2
   11e88:	sbc	r5, r9, r3
   11e8c:	b	11e24 <__assert_fail@plt+0xf9c>
   11e90:	adds	r4, r6, r8
   11e94:	adc	r5, r7, r9
   11e98:	mov	r2, r8
   11e9c:	mov	r3, r9
   11ea0:	mov	r0, r6
   11ea4:	mov	r1, r7
   11ea8:	bl	152e0 <__assert_fail@plt+0x4458>
   11eac:	subs	r4, r4, r2
   11eb0:	sbc	r5, r5, r3
   11eb4:	b	11e24 <__assert_fail@plt+0xf9c>
   11eb8:	andeq	r7, r2, r8, asr r1
   11ebc:	mov	r2, #0
   11ec0:	ldr	r3, [pc, #24]	; 11ee0 <__assert_fail@plt+0x1058>
   11ec4:	strb	r2, [r3, #40]	; 0x28
   11ec8:	cmp	r0, #0
   11ecc:	ldreq	r2, [pc, #16]	; 11ee4 <__assert_fail@plt+0x105c>
   11ed0:	streq	r2, [r3, #44]	; 0x2c
   11ed4:	ldrne	r3, [pc, #4]	; 11ee0 <__assert_fail@plt+0x1058>
   11ed8:	strne	r0, [r3, #44]	; 0x2c
   11edc:	bx	lr
   11ee0:	andeq	r7, r2, r8, asr r1
   11ee4:	andeq	r7, r2, r0, ror #1
   11ee8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eec:	subs	r5, r0, #0
   11ef0:	beq	11f44 <__assert_fail@plt+0x10bc>
   11ef4:	ldr	r3, [pc, #380]	; 12078 <__assert_fail@plt+0x11f0>
   11ef8:	ldr	r6, [r3, #48]	; 0x30
   11efc:	cmp	r6, #0
   11f00:	beq	11f78 <__assert_fail@plt+0x10f0>
   11f04:	bl	10da4 <__errno_location@plt>
   11f08:	mov	r7, r0
   11f0c:	ldr	r4, [r0]
   11f10:	ldr	r3, [r5]
   11f14:	and	r3, r3, #32
   11f18:	cmp	r3, #0
   11f1c:	moveq	r4, #0
   11f20:	ldr	r1, [pc, #340]	; 1207c <__assert_fail@plt+0x11f4>
   11f24:	mov	r0, r6
   11f28:	bl	10c60 <strcmp@plt>
   11f2c:	cmp	r0, #0
   11f30:	bne	11f8c <__assert_fail@plt+0x1104>
   11f34:	mov	r0, r5
   11f38:	bl	10e40 <clearerr_unlocked@plt>
   11f3c:	cmp	r4, #0
   11f40:	bne	11fa0 <__assert_fail@plt+0x1118>
   11f44:	ldr	r2, [pc, #300]	; 12078 <__assert_fail@plt+0x11f0>
   11f48:	ldr	r3, [r2, #44]	; 0x2c
   11f4c:	add	r1, r3, #4
   11f50:	str	r1, [r2, #44]	; 0x2c
   11f54:	ldr	r4, [r3]
   11f58:	cmp	r4, #0
   11f5c:	beq	12070 <__assert_fail@plt+0x11e8>
   11f60:	ldr	r9, [pc, #276]	; 1207c <__assert_fail@plt+0x11f4>
   11f64:	mov	r5, r2
   11f68:	mov	r8, #1
   11f6c:	ldr	fp, [pc, #268]	; 12080 <__assert_fail@plt+0x11f8>
   11f70:	ldr	sl, [pc, #268]	; 12084 <__assert_fail@plt+0x11fc>
   11f74:	b	12034 <__assert_fail@plt+0x11ac>
   11f78:	ldr	r3, [pc, #264]	; 12088 <__assert_fail@plt+0x1200>
   11f7c:	mov	r2, #340	; 0x154
   11f80:	ldr	r1, [pc, #260]	; 1208c <__assert_fail@plt+0x1204>
   11f84:	ldr	r0, [pc, #260]	; 12090 <__assert_fail@plt+0x1208>
   11f88:	bl	10e88 <__assert_fail@plt>
   11f8c:	mov	r0, r5
   11f90:	bl	12294 <__assert_fail@plt+0x140c>
   11f94:	cmp	r0, #0
   11f98:	ldrne	r4, [r7]
   11f9c:	b	11f3c <__assert_fail@plt+0x10b4>
   11fa0:	ldr	r5, [pc, #208]	; 12078 <__assert_fail@plt+0x11f0>
   11fa4:	ldr	r2, [r5, #48]	; 0x30
   11fa8:	mov	r1, #3
   11fac:	mov	r0, #0
   11fb0:	bl	13e88 <__assert_fail@plt+0x3000>
   11fb4:	mov	r3, r0
   11fb8:	ldr	r2, [pc, #196]	; 12084 <__assert_fail@plt+0x11fc>
   11fbc:	mov	r1, r4
   11fc0:	mov	r0, #0
   11fc4:	bl	10d38 <error@plt>
   11fc8:	mov	r3, #1
   11fcc:	str	r3, [r5, #52]	; 0x34
   11fd0:	b	11f44 <__assert_fail@plt+0x10bc>
   11fd4:	ldr	r1, [pc, #184]	; 12094 <__assert_fail@plt+0x120c>
   11fd8:	mov	r0, r4
   11fdc:	bl	10e4c <fopen64@plt>
   11fe0:	mov	r6, r0
   11fe4:	cmp	r6, #0
   11fe8:	bne	12054 <__assert_fail@plt+0x11cc>
   11fec:	bl	10da4 <__errno_location@plt>
   11ff0:	ldr	r7, [r0]
   11ff4:	mov	r2, r4
   11ff8:	mov	r1, #3
   11ffc:	mov	r0, #0
   12000:	bl	13e88 <__assert_fail@plt+0x3000>
   12004:	mov	r3, r0
   12008:	mov	r2, sl
   1200c:	mov	r1, r7
   12010:	mov	r0, #0
   12014:	bl	10d38 <error@plt>
   12018:	str	r8, [r5, #52]	; 0x34
   1201c:	ldr	r3, [r5, #44]	; 0x2c
   12020:	add	r2, r3, #4
   12024:	str	r2, [r5, #44]	; 0x2c
   12028:	ldr	r4, [r3]
   1202c:	cmp	r4, #0
   12030:	beq	12068 <__assert_fail@plt+0x11e0>
   12034:	mov	r1, r9
   12038:	mov	r0, r4
   1203c:	bl	10c60 <strcmp@plt>
   12040:	cmp	r0, #0
   12044:	bne	11fd4 <__assert_fail@plt+0x114c>
   12048:	strb	r8, [r5, #40]	; 0x28
   1204c:	ldr	r6, [fp]
   12050:	b	11fe4 <__assert_fail@plt+0x115c>
   12054:	ldr	r3, [pc, #28]	; 12078 <__assert_fail@plt+0x11f0>
   12058:	str	r4, [r3, #48]	; 0x30
   1205c:	mov	r1, #2
   12060:	mov	r0, r6
   12064:	bl	12260 <__assert_fail@plt+0x13d8>
   12068:	mov	r0, r6
   1206c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12070:	mov	r6, #0
   12074:	b	12068 <__assert_fail@plt+0x11e0>
   12078:	andeq	r7, r2, r8, asr r1
   1207c:	strdeq	r5, [r1], -r4
   12080:	andeq	r7, r2, r8, asr #2
   12084:	andeq	r5, r1, r4, asr #20
   12088:	andeq	r5, r1, r0, asr #18
   1208c:	ldrdeq	r5, [r1], -r4
   12090:	andeq	r5, r1, r8, ror #21
   12094:	strdeq	r5, [r1], -r8
   12098:	ldr	r3, [pc, #52]	; 120d4 <__assert_fail@plt+0x124c>
   1209c:	ldrb	r3, [r3, #40]	; 0x28
   120a0:	cmp	r3, #0
   120a4:	bxeq	lr
   120a8:	push	{r4, lr}
   120ac:	ldr	r3, [pc, #36]	; 120d8 <__assert_fail@plt+0x1250>
   120b0:	ldr	r0, [r3]
   120b4:	bl	12294 <__assert_fail@plt+0x140c>
   120b8:	cmp	r0, #0
   120bc:	popeq	{r4, pc}
   120c0:	bl	10da4 <__errno_location@plt>
   120c4:	ldr	r2, [pc, #16]	; 120dc <__assert_fail@plt+0x1254>
   120c8:	ldr	r1, [r0]
   120cc:	mov	r0, #1
   120d0:	bl	10d38 <error@plt>
   120d4:	andeq	r7, r2, r8, asr r1
   120d8:	andeq	r7, r2, r8, asr #2
   120dc:	strdeq	r5, [r1], -r4
   120e0:	push	{r4, lr}
   120e4:	mov	r2, #5
   120e8:	ldr	r1, [pc, #44]	; 1211c <__assert_fail@plt+0x1294>
   120ec:	mov	r0, #0
   120f0:	bl	10ccc <dcgettext@plt>
   120f4:	ldr	r4, [pc, #36]	; 12120 <__assert_fail@plt+0x1298>
   120f8:	ldr	r1, [r4]
   120fc:	bl	10c48 <fputs_unlocked@plt>
   12100:	mov	r2, #5
   12104:	ldr	r1, [pc, #24]	; 12124 <__assert_fail@plt+0x129c>
   12108:	mov	r0, #0
   1210c:	bl	10ccc <dcgettext@plt>
   12110:	ldr	r1, [r4]
   12114:	bl	10c48 <fputs_unlocked@plt>
   12118:	pop	{r4, pc}
   1211c:	strdeq	r5, [r1], -ip
   12120:	andeq	r7, r2, ip, asr #2
   12124:	andeq	r5, r1, ip, lsr fp
   12128:	ldr	r3, [pc, #4]	; 12134 <__assert_fail@plt+0x12ac>
   1212c:	str	r0, [r3]
   12130:	bx	lr
   12134:	muleq	r2, r4, r1
   12138:	ldr	r3, [pc, #4]	; 12144 <__assert_fail@plt+0x12bc>
   1213c:	strb	r0, [r3, #4]
   12140:	bx	lr
   12144:	muleq	r2, r4, r1
   12148:	push	{r4, r5, r6, lr}
   1214c:	sub	sp, sp, #8
   12150:	ldr	r3, [pc, #200]	; 12220 <__assert_fail@plt+0x1398>
   12154:	ldr	r0, [r3]
   12158:	bl	14c3c <__assert_fail@plt+0x3db4>
   1215c:	cmp	r0, #0
   12160:	beq	12184 <__assert_fail@plt+0x12fc>
   12164:	ldr	r3, [pc, #184]	; 12224 <__assert_fail@plt+0x139c>
   12168:	ldrb	r3, [r3, #4]
   1216c:	cmp	r3, #0
   12170:	beq	121a0 <__assert_fail@plt+0x1318>
   12174:	bl	10da4 <__errno_location@plt>
   12178:	ldr	r3, [r0]
   1217c:	cmp	r3, #32
   12180:	bne	121a0 <__assert_fail@plt+0x1318>
   12184:	ldr	r3, [pc, #156]	; 12228 <__assert_fail@plt+0x13a0>
   12188:	ldr	r0, [r3]
   1218c:	bl	14c3c <__assert_fail@plt+0x3db4>
   12190:	cmp	r0, #0
   12194:	bne	12214 <__assert_fail@plt+0x138c>
   12198:	add	sp, sp, #8
   1219c:	pop	{r4, r5, r6, pc}
   121a0:	mov	r2, #5
   121a4:	ldr	r1, [pc, #128]	; 1222c <__assert_fail@plt+0x13a4>
   121a8:	mov	r0, #0
   121ac:	bl	10ccc <dcgettext@plt>
   121b0:	mov	r4, r0
   121b4:	ldr	r3, [pc, #104]	; 12224 <__assert_fail@plt+0x139c>
   121b8:	ldr	r5, [r3]
   121bc:	cmp	r5, #0
   121c0:	beq	121f8 <__assert_fail@plt+0x1370>
   121c4:	bl	10da4 <__errno_location@plt>
   121c8:	ldr	r6, [r0]
   121cc:	mov	r0, r5
   121d0:	bl	13e68 <__assert_fail@plt+0x2fe0>
   121d4:	str	r4, [sp]
   121d8:	mov	r3, r0
   121dc:	ldr	r2, [pc, #76]	; 12230 <__assert_fail@plt+0x13a8>
   121e0:	mov	r1, r6
   121e4:	mov	r0, #0
   121e8:	bl	10d38 <error@plt>
   121ec:	ldr	r3, [pc, #64]	; 12234 <__assert_fail@plt+0x13ac>
   121f0:	ldr	r0, [r3]
   121f4:	bl	10c90 <_exit@plt>
   121f8:	bl	10da4 <__errno_location@plt>
   121fc:	mov	r3, r4
   12200:	ldr	r2, [pc, #48]	; 12238 <__assert_fail@plt+0x13b0>
   12204:	ldr	r1, [r0]
   12208:	mov	r0, #0
   1220c:	bl	10d38 <error@plt>
   12210:	b	121ec <__assert_fail@plt+0x1364>
   12214:	ldr	r3, [pc, #24]	; 12234 <__assert_fail@plt+0x13ac>
   12218:	ldr	r0, [r3]
   1221c:	bl	10c90 <_exit@plt>
   12220:	andeq	r7, r2, ip, asr #2
   12224:	muleq	r2, r4, r1
   12228:	andeq	r7, r2, r0, asr #2
   1222c:	andeq	r5, r1, r8, lsr #17
   12230:			; <UNDEFINED> instruction: 0x00015cbc
   12234:	andeq	r7, r2, ip, ror #1
   12238:	andeq	r5, r1, r4, asr #20
   1223c:	push	{r4, r5, lr}
   12240:	sub	sp, sp, #20
   12244:	ldr	r1, [sp, #40]	; 0x28
   12248:	str	r1, [sp, #8]
   1224c:	ldrd	r4, [sp, #32]
   12250:	strd	r4, [sp]
   12254:	bl	10c6c <posix_fadvise64@plt>
   12258:	add	sp, sp, #20
   1225c:	pop	{r4, r5, pc}
   12260:	cmp	r0, #0
   12264:	bxeq	lr
   12268:	push	{r4, lr}
   1226c:	sub	sp, sp, #16
   12270:	mov	r4, r1
   12274:	bl	10dd4 <fileno@plt>
   12278:	str	r4, [sp, #8]
   1227c:	mov	r2, #0
   12280:	mov	r3, #0
   12284:	strd	r2, [sp]
   12288:	bl	10c6c <posix_fadvise64@plt>
   1228c:	add	sp, sp, #16
   12290:	pop	{r4, pc}
   12294:	push	{r4, r5, r6, lr}
   12298:	sub	sp, sp, #8
   1229c:	mov	r4, r0
   122a0:	bl	10dd4 <fileno@plt>
   122a4:	cmp	r0, #0
   122a8:	blt	12320 <__assert_fail@plt+0x1498>
   122ac:	mov	r0, r4
   122b0:	bl	10d5c <__freading@plt>
   122b4:	cmp	r0, #0
   122b8:	beq	122ec <__assert_fail@plt+0x1464>
   122bc:	mov	r0, r4
   122c0:	bl	10dd4 <fileno@plt>
   122c4:	mov	r3, #1
   122c8:	str	r3, [sp]
   122cc:	mov	r2, #0
   122d0:	mov	r3, #0
   122d4:	bl	10d08 <lseek64@plt>
   122d8:	mvn	r2, #0
   122dc:	mvn	r3, #0
   122e0:	cmp	r1, r3
   122e4:	cmpeq	r0, r2
   122e8:	beq	1232c <__assert_fail@plt+0x14a4>
   122ec:	mov	r0, r4
   122f0:	bl	1233c <__assert_fail@plt+0x14b4>
   122f4:	cmp	r0, #0
   122f8:	beq	1232c <__assert_fail@plt+0x14a4>
   122fc:	bl	10da4 <__errno_location@plt>
   12300:	mov	r5, r0
   12304:	ldr	r6, [r0]
   12308:	mov	r0, r4
   1230c:	bl	10dec <fclose@plt>
   12310:	cmp	r6, #0
   12314:	strne	r6, [r5]
   12318:	mvnne	r0, #0
   1231c:	b	12334 <__assert_fail@plt+0x14ac>
   12320:	mov	r0, r4
   12324:	bl	10dec <fclose@plt>
   12328:	b	12334 <__assert_fail@plt+0x14ac>
   1232c:	mov	r0, r4
   12330:	bl	10dec <fclose@plt>
   12334:	add	sp, sp, #8
   12338:	pop	{r4, r5, r6, pc}
   1233c:	push	{r4, lr}
   12340:	sub	sp, sp, #8
   12344:	subs	r4, r0, #0
   12348:	beq	1235c <__assert_fail@plt+0x14d4>
   1234c:	mov	r0, r4
   12350:	bl	10d5c <__freading@plt>
   12354:	cmp	r0, #0
   12358:	bne	1236c <__assert_fail@plt+0x14e4>
   1235c:	mov	r0, r4
   12360:	bl	10c78 <fflush@plt>
   12364:	add	sp, sp, #8
   12368:	pop	{r4, pc}
   1236c:	ldr	r3, [r4]
   12370:	tst	r3, #256	; 0x100
   12374:	bne	12384 <__assert_fail@plt+0x14fc>
   12378:	mov	r0, r4
   1237c:	bl	10c78 <fflush@plt>
   12380:	b	12364 <__assert_fail@plt+0x14dc>
   12384:	mov	r3, #1
   12388:	str	r3, [sp]
   1238c:	mov	r2, #0
   12390:	mov	r3, #0
   12394:	mov	r0, r4
   12398:	bl	123f8 <__assert_fail@plt+0x1570>
   1239c:	b	12378 <__assert_fail@plt+0x14f0>
   123a0:	push	{r4, r5, lr}
   123a4:	sub	sp, sp, #12
   123a8:	mov	r5, r0
   123ac:	bl	10da4 <__errno_location@plt>
   123b0:	mov	r4, r0
   123b4:	ldr	r3, [r0]
   123b8:	str	r3, [sp]
   123bc:	str	r3, [sp, #4]
   123c0:	mov	r3, #0
   123c4:	str	r3, [r0]
   123c8:	mov	r0, r5
   123cc:	bl	10c84 <free@plt>
   123d0:	ldr	r3, [r4]
   123d4:	cmp	r3, #0
   123d8:	moveq	r3, #4
   123dc:	movne	r3, #0
   123e0:	add	r2, sp, #8
   123e4:	add	r3, r2, r3
   123e8:	ldr	r3, [r3, #-8]
   123ec:	str	r3, [r4]
   123f0:	add	sp, sp, #12
   123f4:	pop	{r4, r5, pc}
   123f8:	push	{r4, r5, r6, r7, lr}
   123fc:	sub	sp, sp, #12
   12400:	mov	r4, r0
   12404:	mov	r6, r2
   12408:	mov	r7, r3
   1240c:	ldr	r5, [sp, #32]
   12410:	ldr	r2, [r0, #8]
   12414:	ldr	r3, [r0, #4]
   12418:	cmp	r2, r3
   1241c:	beq	1243c <__assert_fail@plt+0x15b4>
   12420:	str	r5, [sp]
   12424:	mov	r2, r6
   12428:	mov	r3, r7
   1242c:	mov	r0, r4
   12430:	bl	10df8 <fseeko64@plt>
   12434:	add	sp, sp, #12
   12438:	pop	{r4, r5, r6, r7, pc}
   1243c:	ldr	r2, [r0, #20]
   12440:	ldr	r3, [r0, #16]
   12444:	cmp	r2, r3
   12448:	bne	12420 <__assert_fail@plt+0x1598>
   1244c:	ldr	r3, [r0, #36]	; 0x24
   12450:	cmp	r3, #0
   12454:	bne	12420 <__assert_fail@plt+0x1598>
   12458:	bl	10dd4 <fileno@plt>
   1245c:	str	r5, [sp]
   12460:	mov	r2, r6
   12464:	mov	r3, r7
   12468:	bl	10d08 <lseek64@plt>
   1246c:	mvn	r2, #0
   12470:	mvn	r3, #0
   12474:	cmp	r1, r3
   12478:	cmpeq	r0, r2
   1247c:	beq	12498 <__assert_fail@plt+0x1610>
   12480:	ldr	r3, [r4]
   12484:	bic	r3, r3, #16
   12488:	str	r3, [r4]
   1248c:	strd	r0, [r4, #80]	; 0x50
   12490:	mov	r0, #0
   12494:	b	12434 <__assert_fail@plt+0x15ac>
   12498:	mvn	r0, #0
   1249c:	b	12434 <__assert_fail@plt+0x15ac>
   124a0:	push	{r4, r5, r6, lr}
   124a4:	subs	r4, r0, #0
   124a8:	beq	12520 <__assert_fail@plt+0x1698>
   124ac:	mov	r1, #47	; 0x2f
   124b0:	mov	r0, r4
   124b4:	bl	10e28 <strrchr@plt>
   124b8:	cmp	r0, #0
   124bc:	addne	r5, r0, #1
   124c0:	moveq	r5, r4
   124c4:	sub	r3, r5, r4
   124c8:	cmp	r3, #6
   124cc:	ble	1250c <__assert_fail@plt+0x1684>
   124d0:	mov	r2, #7
   124d4:	ldr	r1, [pc, #96]	; 1253c <__assert_fail@plt+0x16b4>
   124d8:	sub	r0, r5, #7
   124dc:	bl	10e64 <strncmp@plt>
   124e0:	cmp	r0, #0
   124e4:	bne	1250c <__assert_fail@plt+0x1684>
   124e8:	mov	r2, #3
   124ec:	ldr	r1, [pc, #76]	; 12540 <__assert_fail@plt+0x16b8>
   124f0:	mov	r0, r5
   124f4:	bl	10e64 <strncmp@plt>
   124f8:	cmp	r0, #0
   124fc:	addeq	r4, r5, #3
   12500:	ldreq	r3, [pc, #60]	; 12544 <__assert_fail@plt+0x16bc>
   12504:	streq	r4, [r3]
   12508:	movne	r4, r5
   1250c:	ldr	r3, [pc, #52]	; 12548 <__assert_fail@plt+0x16c0>
   12510:	str	r4, [r3]
   12514:	ldr	r3, [pc, #48]	; 1254c <__assert_fail@plt+0x16c4>
   12518:	str	r4, [r3]
   1251c:	pop	{r4, r5, r6, pc}
   12520:	ldr	r3, [pc, #40]	; 12550 <__assert_fail@plt+0x16c8>
   12524:	ldr	r3, [r3]
   12528:	mov	r2, #55	; 0x37
   1252c:	mov	r1, #1
   12530:	ldr	r0, [pc, #28]	; 12554 <__assert_fail@plt+0x16cc>
   12534:	bl	10cfc <fwrite@plt>
   12538:	bl	10e70 <abort@plt>
   1253c:	strdeq	r5, [r1], -ip
   12540:	andeq	r5, r1, r4, lsl #26
   12544:	andeq	r7, r2, r0, lsr r1
   12548:	muleq	r2, ip, r1
   1254c:	andeq	r7, r2, r4, lsr r1
   12550:	andeq	r7, r2, r0, asr #2
   12554:	andeq	r5, r1, r4, asr #25
   12558:	push	{r4, r5, r6, lr}
   1255c:	mov	r5, r0
   12560:	mov	r4, r1
   12564:	mov	r2, #48	; 0x30
   12568:	mov	r1, #0
   1256c:	bl	10dbc <memset@plt>
   12570:	cmp	r4, #10
   12574:	beq	12584 <__assert_fail@plt+0x16fc>
   12578:	str	r4, [r5]
   1257c:	mov	r0, r5
   12580:	pop	{r4, r5, r6, pc}
   12584:	bl	10e70 <abort@plt>
   12588:	push	{r4, r5, r6, lr}
   1258c:	mov	r4, r0
   12590:	mov	r5, r1
   12594:	mov	r2, #5
   12598:	mov	r1, r0
   1259c:	mov	r0, #0
   125a0:	bl	10ccc <dcgettext@plt>
   125a4:	cmp	r4, r0
   125a8:	popne	{r4, r5, r6, pc}
   125ac:	bl	14cb4 <__assert_fail@plt+0x3e2c>
   125b0:	ldrb	r3, [r0]
   125b4:	bic	r3, r3, #32
   125b8:	cmp	r3, #85	; 0x55
   125bc:	beq	12638 <__assert_fail@plt+0x17b0>
   125c0:	cmp	r3, #71	; 0x47
   125c4:	bne	12694 <__assert_fail@plt+0x180c>
   125c8:	ldrb	r3, [r0, #1]
   125cc:	bic	r3, r3, #32
   125d0:	cmp	r3, #66	; 0x42
   125d4:	bne	12694 <__assert_fail@plt+0x180c>
   125d8:	ldrb	r3, [r0, #2]
   125dc:	cmp	r3, #49	; 0x31
   125e0:	bne	12694 <__assert_fail@plt+0x180c>
   125e4:	ldrb	r3, [r0, #3]
   125e8:	cmp	r3, #56	; 0x38
   125ec:	bne	12694 <__assert_fail@plt+0x180c>
   125f0:	ldrb	r3, [r0, #4]
   125f4:	cmp	r3, #48	; 0x30
   125f8:	bne	12694 <__assert_fail@plt+0x180c>
   125fc:	ldrb	r3, [r0, #5]
   12600:	cmp	r3, #51	; 0x33
   12604:	bne	12694 <__assert_fail@plt+0x180c>
   12608:	ldrb	r3, [r0, #6]
   1260c:	cmp	r3, #48	; 0x30
   12610:	bne	12694 <__assert_fail@plt+0x180c>
   12614:	ldrb	r3, [r0, #7]
   12618:	cmp	r3, #0
   1261c:	bne	12694 <__assert_fail@plt+0x180c>
   12620:	ldrb	r2, [r4]
   12624:	ldr	r3, [pc, #124]	; 126a8 <__assert_fail@plt+0x1820>
   12628:	ldr	r0, [pc, #124]	; 126ac <__assert_fail@plt+0x1824>
   1262c:	cmp	r2, #96	; 0x60
   12630:	movne	r0, r3
   12634:	pop	{r4, r5, r6, pc}
   12638:	ldrb	r3, [r0, #1]
   1263c:	bic	r3, r3, #32
   12640:	cmp	r3, #84	; 0x54
   12644:	bne	12694 <__assert_fail@plt+0x180c>
   12648:	ldrb	r3, [r0, #2]
   1264c:	bic	r3, r3, #32
   12650:	cmp	r3, #70	; 0x46
   12654:	bne	12694 <__assert_fail@plt+0x180c>
   12658:	ldrb	r3, [r0, #3]
   1265c:	cmp	r3, #45	; 0x2d
   12660:	bne	12694 <__assert_fail@plt+0x180c>
   12664:	ldrb	r3, [r0, #4]
   12668:	cmp	r3, #56	; 0x38
   1266c:	bne	12694 <__assert_fail@plt+0x180c>
   12670:	ldrb	r3, [r0, #5]
   12674:	cmp	r3, #0
   12678:	bne	12694 <__assert_fail@plt+0x180c>
   1267c:	ldrb	r2, [r4]
   12680:	ldr	r3, [pc, #40]	; 126b0 <__assert_fail@plt+0x1828>
   12684:	ldr	r0, [pc, #40]	; 126b4 <__assert_fail@plt+0x182c>
   12688:	cmp	r2, #96	; 0x60
   1268c:	movne	r0, r3
   12690:	pop	{r4, r5, r6, pc}
   12694:	ldr	r3, [pc, #28]	; 126b8 <__assert_fail@plt+0x1830>
   12698:	ldr	r0, [pc, #28]	; 126bc <__assert_fail@plt+0x1834>
   1269c:	cmp	r5, #9
   126a0:	movne	r0, r3
   126a4:	pop	{r4, r5, r6, pc}
   126a8:	andeq	r5, r1, r0, ror #26
   126ac:	andeq	r5, r1, ip, ror #26
   126b0:	andeq	r5, r1, ip, asr sp
   126b4:	andeq	r5, r1, r0, ror sp
   126b8:	andeq	r5, r1, r4, ror #26
   126bc:	andeq	r5, r1, r8, ror #26
   126c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126c4:	sub	sp, sp, #116	; 0x74
   126c8:	str	r0, [sp, #36]	; 0x24
   126cc:	mov	sl, r1
   126d0:	str	r2, [sp, #52]	; 0x34
   126d4:	str	r3, [sp, #28]
   126d8:	ldr	r8, [sp, #152]	; 0x98
   126dc:	bl	10d14 <__ctype_get_mb_cur_max@plt>
   126e0:	str	r0, [sp, #84]	; 0x54
   126e4:	ldr	r3, [sp, #156]	; 0x9c
   126e8:	lsr	r3, r3, #1
   126ec:	and	r3, r3, #1
   126f0:	str	r3, [sp, #32]
   126f4:	mov	r3, #1
   126f8:	str	r3, [sp, #40]	; 0x28
   126fc:	mov	r3, #0
   12700:	str	r3, [sp, #80]	; 0x50
   12704:	str	r3, [sp, #44]	; 0x2c
   12708:	str	r3, [sp, #48]	; 0x30
   1270c:	str	r3, [sp, #60]	; 0x3c
   12710:	str	r3, [sp, #72]	; 0x48
   12714:	str	r3, [sp, #76]	; 0x4c
   12718:	mov	r7, sl
   1271c:	mov	sl, r8
   12720:	cmp	sl, #10
   12724:	ldrls	pc, [pc, sl, lsl #2]
   12728:	b	128e0 <__assert_fail@plt+0x1a58>
   1272c:	muleq	r1, r0, r7
   12730:	andeq	r2, r1, r0, ror #14
   12734:			; <UNDEFINED> instruction: 0x000128bc
   12738:	andeq	r2, r1, r8, asr r7
   1273c:	andeq	r2, r1, r0, ror r8
   12740:	andeq	r2, r1, r0, lsr #15
   12744:	andeq	r3, r1, ip, lsl #16
   12748:	andeq	r2, r1, r4, ror #17
   1274c:	ldrdeq	r2, [r1], -ip
   12750:	ldrdeq	r2, [r1], -ip
   12754:	ldrdeq	r2, [r1], -ip
   12758:	mov	r3, #1
   1275c:	str	r3, [sp, #48]	; 0x30
   12760:	mov	r3, #1
   12764:	str	r3, [sp, #32]
   12768:	str	r3, [sp, #60]	; 0x3c
   1276c:	ldr	r3, [pc, #4068]	; 13758 <__assert_fail@plt+0x28d0>
   12770:	str	r3, [sp, #72]	; 0x48
   12774:	mov	fp, #0
   12778:	mov	sl, #2
   1277c:	mov	r6, #0
   12780:	ldr	r3, [sp, #48]	; 0x30
   12784:	eor	r3, r3, #1
   12788:	str	r3, [sp, #68]	; 0x44
   1278c:	b	13074 <__assert_fail@plt+0x21ec>
   12790:	mov	r3, #0
   12794:	str	r3, [sp, #32]
   12798:	mov	fp, r3
   1279c:	b	1277c <__assert_fail@plt+0x18f4>
   127a0:	ldr	r3, [sp, #32]
   127a4:	cmp	r3, #0
   127a8:	bne	128fc <__assert_fail@plt+0x1a74>
   127ac:	cmp	r7, #0
   127b0:	beq	1291c <__assert_fail@plt+0x1a94>
   127b4:	ldr	r3, [sp, #36]	; 0x24
   127b8:	mov	r2, #34	; 0x22
   127bc:	strb	r2, [r3]
   127c0:	mov	r3, #1
   127c4:	str	r3, [sp, #48]	; 0x30
   127c8:	str	r3, [sp, #60]	; 0x3c
   127cc:	ldr	r3, [pc, #3980]	; 13760 <__assert_fail@plt+0x28d8>
   127d0:	str	r3, [sp, #72]	; 0x48
   127d4:	mov	fp, #1
   127d8:	b	1277c <__assert_fail@plt+0x18f4>
   127dc:	cmp	sl, #10
   127e0:	beq	12804 <__assert_fail@plt+0x197c>
   127e4:	mov	r1, sl
   127e8:	ldr	r0, [pc, #3948]	; 1375c <__assert_fail@plt+0x28d4>
   127ec:	bl	12588 <__assert_fail@plt+0x1700>
   127f0:	str	r0, [sp, #164]	; 0xa4
   127f4:	mov	r1, sl
   127f8:	ldr	r0, [pc, #3928]	; 13758 <__assert_fail@plt+0x28d0>
   127fc:	bl	12588 <__assert_fail@plt+0x1700>
   12800:	str	r0, [sp, #168]	; 0xa8
   12804:	ldr	r3, [sp, #32]
   12808:	cmp	r3, #0
   1280c:	movne	fp, #0
   12810:	bne	12848 <__assert_fail@plt+0x19c0>
   12814:	ldr	r3, [sp, #164]	; 0xa4
   12818:	ldrb	r3, [r3]
   1281c:	cmp	r3, #0
   12820:	beq	12868 <__assert_fail@plt+0x19e0>
   12824:	ldr	r2, [sp, #164]	; 0xa4
   12828:	mov	fp, #0
   1282c:	ldr	r1, [sp, #36]	; 0x24
   12830:	cmp	r7, fp
   12834:	strbhi	r3, [r1, fp]
   12838:	add	fp, fp, #1
   1283c:	ldrb	r3, [r2, #1]!
   12840:	cmp	r3, #0
   12844:	bne	12830 <__assert_fail@plt+0x19a8>
   12848:	ldr	r0, [sp, #168]	; 0xa8
   1284c:	bl	10d98 <strlen@plt>
   12850:	str	r0, [sp, #60]	; 0x3c
   12854:	ldr	r3, [sp, #168]	; 0xa8
   12858:	str	r3, [sp, #72]	; 0x48
   1285c:	mov	r3, #1
   12860:	str	r3, [sp, #48]	; 0x30
   12864:	b	1277c <__assert_fail@plt+0x18f4>
   12868:	mov	fp, #0
   1286c:	b	12848 <__assert_fail@plt+0x19c0>
   12870:	ldr	r3, [sp, #32]
   12874:	cmp	r3, #0
   12878:	bne	12938 <__assert_fail@plt+0x1ab0>
   1287c:	mov	r3, #1
   12880:	str	r3, [sp, #48]	; 0x30
   12884:	cmp	r7, #0
   12888:	beq	12954 <__assert_fail@plt+0x1acc>
   1288c:	ldr	r3, [sp, #36]	; 0x24
   12890:	mov	r2, #39	; 0x27
   12894:	strb	r2, [r3]
   12898:	mov	r3, #0
   1289c:	str	r3, [sp, #32]
   128a0:	mov	r3, #1
   128a4:	str	r3, [sp, #60]	; 0x3c
   128a8:	ldr	r3, [pc, #3752]	; 13758 <__assert_fail@plt+0x28d0>
   128ac:	str	r3, [sp, #72]	; 0x48
   128b0:	mov	fp, #1
   128b4:	mov	sl, #2
   128b8:	b	1277c <__assert_fail@plt+0x18f4>
   128bc:	ldr	r3, [sp, #32]
   128c0:	cmp	r3, #0
   128c4:	beq	12884 <__assert_fail@plt+0x19fc>
   128c8:	mov	r3, #1
   128cc:	str	r3, [sp, #60]	; 0x3c
   128d0:	ldr	r3, [pc, #3712]	; 13758 <__assert_fail@plt+0x28d0>
   128d4:	str	r3, [sp, #72]	; 0x48
   128d8:	mov	fp, #0
   128dc:	b	1277c <__assert_fail@plt+0x18f4>
   128e0:	bl	10e70 <abort@plt>
   128e4:	mov	r3, #0
   128e8:	str	r3, [sp, #32]
   128ec:	mov	r3, #1
   128f0:	str	r3, [sp, #48]	; 0x30
   128f4:	mov	fp, #0
   128f8:	b	1277c <__assert_fail@plt+0x18f4>
   128fc:	ldr	r3, [sp, #32]
   12900:	str	r3, [sp, #48]	; 0x30
   12904:	mov	r3, #1
   12908:	str	r3, [sp, #60]	; 0x3c
   1290c:	ldr	r3, [pc, #3660]	; 13760 <__assert_fail@plt+0x28d8>
   12910:	str	r3, [sp, #72]	; 0x48
   12914:	mov	fp, #0
   12918:	b	1277c <__assert_fail@plt+0x18f4>
   1291c:	mov	r3, #1
   12920:	str	r3, [sp, #48]	; 0x30
   12924:	str	r3, [sp, #60]	; 0x3c
   12928:	ldr	r3, [pc, #3632]	; 13760 <__assert_fail@plt+0x28d8>
   1292c:	str	r3, [sp, #72]	; 0x48
   12930:	mov	fp, #1
   12934:	b	1277c <__assert_fail@plt+0x18f4>
   12938:	mov	r3, #1
   1293c:	str	r3, [sp, #60]	; 0x3c
   12940:	ldr	r3, [pc, #3600]	; 13758 <__assert_fail@plt+0x28d0>
   12944:	str	r3, [sp, #72]	; 0x48
   12948:	mov	fp, #0
   1294c:	mov	sl, #2
   12950:	b	1277c <__assert_fail@plt+0x18f4>
   12954:	mov	r3, #0
   12958:	str	r3, [sp, #32]
   1295c:	mov	r3, #1
   12960:	str	r3, [sp, #60]	; 0x3c
   12964:	ldr	r3, [pc, #3564]	; 13758 <__assert_fail@plt+0x28d0>
   12968:	str	r3, [sp, #72]	; 0x48
   1296c:	mov	fp, #1
   12970:	mov	sl, #2
   12974:	b	1277c <__assert_fail@plt+0x18f4>
   12978:	mov	r3, #0
   1297c:	str	r3, [sp, #56]	; 0x38
   12980:	ldr	r3, [sp, #52]	; 0x34
   12984:	add	r2, r3, r6
   12988:	str	r2, [sp, #64]	; 0x40
   1298c:	ldrb	r4, [r3, r6]
   12990:	cmp	r4, #126	; 0x7e
   12994:	ldrls	pc, [pc, r4, lsl #2]
   12998:	b	131d4 <__assert_fail@plt+0x234c>
   1299c:			; <UNDEFINED> instruction: 0x00012bb4
   129a0:	ldrdeq	r3, [r1], -r4
   129a4:	ldrdeq	r3, [r1], -r4
   129a8:	ldrdeq	r3, [r1], -r4
   129ac:	ldrdeq	r3, [r1], -r4
   129b0:	ldrdeq	r3, [r1], -r4
   129b4:	ldrdeq	r3, [r1], -r4
   129b8:	andeq	r2, r1, r0, lsl pc
   129bc:	andeq	r2, r1, ip, lsr #23
   129c0:	andeq	r2, r1, r8, asr #29
   129c4:	andeq	r2, r1, r0, asr #29
   129c8:	andeq	r2, r1, r0, lsr lr
   129cc:	andeq	r2, r1, r8, lsr #28
   129d0:	andeq	r2, r1, r4, lsr #23
   129d4:	ldrdeq	r3, [r1], -r4
   129d8:	ldrdeq	r3, [r1], -r4
   129dc:	ldrdeq	r3, [r1], -r4
   129e0:	ldrdeq	r3, [r1], -r4
   129e4:	ldrdeq	r3, [r1], -r4
   129e8:	ldrdeq	r3, [r1], -r4
   129ec:	ldrdeq	r3, [r1], -r4
   129f0:	ldrdeq	r3, [r1], -r4
   129f4:	ldrdeq	r3, [r1], -r4
   129f8:	ldrdeq	r3, [r1], -r4
   129fc:	ldrdeq	r3, [r1], -r4
   12a00:	ldrdeq	r3, [r1], -r4
   12a04:	ldrdeq	r3, [r1], -r4
   12a08:	ldrdeq	r3, [r1], -r4
   12a0c:	ldrdeq	r3, [r1], -r4
   12a10:	ldrdeq	r3, [r1], -r4
   12a14:	ldrdeq	r3, [r1], -r4
   12a18:	ldrdeq	r3, [r1], -r4
   12a1c:	andeq	r2, r1, r4, ror #30
   12a20:	andeq	r2, r1, r0, ror #30
   12a24:	andeq	r2, r1, r0, ror #30
   12a28:	andeq	r2, r1, r8, lsr pc
   12a2c:	andeq	r2, r1, r0, ror #30
   12a30:	andeq	r3, r1, r8, lsr #11
   12a34:	andeq	r2, r1, r0, ror #30
   12a38:	andeq	r3, r1, r8, lsr r1
   12a3c:	andeq	r2, r1, r0, ror #30
   12a40:	andeq	r2, r1, r0, ror #30
   12a44:	andeq	r2, r1, r0, ror #30
   12a48:	andeq	r3, r1, r8, lsr #11
   12a4c:	andeq	r3, r1, r8, lsr #11
   12a50:	andeq	r3, r1, r8, lsr #11
   12a54:	andeq	r3, r1, r8, lsr #11
   12a58:	andeq	r3, r1, r8, lsr #11
   12a5c:	andeq	r3, r1, r8, lsr #11
   12a60:	andeq	r3, r1, r8, lsr #11
   12a64:	andeq	r3, r1, r8, lsr #11
   12a68:	andeq	r3, r1, r8, lsr #11
   12a6c:	andeq	r3, r1, r8, lsr #11
   12a70:	andeq	r3, r1, r8, lsr #11
   12a74:	andeq	r3, r1, r8, lsr #11
   12a78:	andeq	r3, r1, r8, lsr #11
   12a7c:	andeq	r3, r1, r8, lsr #11
   12a80:	andeq	r3, r1, r8, lsr #11
   12a84:	andeq	r3, r1, r8, lsr #11
   12a88:	andeq	r2, r1, r0, ror #30
   12a8c:	andeq	r2, r1, r0, ror #30
   12a90:	andeq	r2, r1, r0, ror #30
   12a94:	andeq	r2, r1, r0, ror #30
   12a98:			; <UNDEFINED> instruction: 0x00012cbc
   12a9c:	ldrdeq	r3, [r1], -r4
   12aa0:	andeq	r3, r1, r8, lsr #11
   12aa4:	andeq	r3, r1, r8, lsr #11
   12aa8:	andeq	r3, r1, r8, lsr #11
   12aac:	andeq	r3, r1, r8, lsr #11
   12ab0:	andeq	r3, r1, r8, lsr #11
   12ab4:	andeq	r3, r1, r8, lsr #11
   12ab8:	andeq	r3, r1, r8, lsr #11
   12abc:	andeq	r3, r1, r8, lsr #11
   12ac0:	andeq	r3, r1, r8, lsr #11
   12ac4:	andeq	r3, r1, r8, lsr #11
   12ac8:	andeq	r3, r1, r8, lsr #11
   12acc:	andeq	r3, r1, r8, lsr #11
   12ad0:	andeq	r3, r1, r8, lsr #11
   12ad4:	andeq	r3, r1, r8, lsr #11
   12ad8:	andeq	r3, r1, r8, lsr #11
   12adc:	andeq	r3, r1, r8, lsr #11
   12ae0:	andeq	r3, r1, r8, lsr #11
   12ae4:	andeq	r3, r1, r8, lsr #11
   12ae8:	andeq	r3, r1, r8, lsr #11
   12aec:	andeq	r3, r1, r8, lsr #11
   12af0:	andeq	r3, r1, r8, lsr #11
   12af4:	andeq	r3, r1, r8, lsr #11
   12af8:	andeq	r3, r1, r8, lsr #11
   12afc:	andeq	r3, r1, r8, lsr #11
   12b00:	andeq	r3, r1, r8, lsr #11
   12b04:	andeq	r3, r1, r8, lsr #11
   12b08:	andeq	r2, r1, r0, ror #30
   12b0c:	andeq	r2, r1, r8, lsr lr
   12b10:	andeq	r3, r1, r8, lsr #11
   12b14:	andeq	r2, r1, r0, ror #30
   12b18:	andeq	r3, r1, r8, lsr #11
   12b1c:	andeq	r2, r1, r0, ror #30
   12b20:	andeq	r3, r1, r8, lsr #11
   12b24:	andeq	r3, r1, r8, lsr #11
   12b28:	andeq	r3, r1, r8, lsr #11
   12b2c:	andeq	r3, r1, r8, lsr #11
   12b30:	andeq	r3, r1, r8, lsr #11
   12b34:	andeq	r3, r1, r8, lsr #11
   12b38:	andeq	r3, r1, r8, lsr #11
   12b3c:	andeq	r3, r1, r8, lsr #11
   12b40:	andeq	r3, r1, r8, lsr #11
   12b44:	andeq	r3, r1, r8, lsr #11
   12b48:	andeq	r3, r1, r8, lsr #11
   12b4c:	andeq	r3, r1, r8, lsr #11
   12b50:	andeq	r3, r1, r8, lsr #11
   12b54:	andeq	r3, r1, r8, lsr #11
   12b58:	andeq	r3, r1, r8, lsr #11
   12b5c:	andeq	r3, r1, r8, lsr #11
   12b60:	andeq	r3, r1, r8, lsr #11
   12b64:	andeq	r3, r1, r8, lsr #11
   12b68:	andeq	r3, r1, r8, lsr #11
   12b6c:	andeq	r3, r1, r8, lsr #11
   12b70:	andeq	r3, r1, r8, lsr #11
   12b74:	andeq	r3, r1, r8, lsr #11
   12b78:	andeq	r3, r1, r8, lsr #11
   12b7c:	andeq	r3, r1, r8, lsr #11
   12b80:	andeq	r3, r1, r8, lsr #11
   12b84:	andeq	r3, r1, r8, lsr #11
   12b88:	andeq	r2, r1, r8, lsl pc
   12b8c:	andeq	r2, r1, r0, ror #30
   12b90:	andeq	r2, r1, r8, lsl pc
   12b94:	andeq	r2, r1, r8, lsr pc
   12b98:	mov	r3, #0
   12b9c:	str	r3, [sp, #56]	; 0x38
   12ba0:	b	12980 <__assert_fail@plt+0x1af8>
   12ba4:	mov	r3, #114	; 0x72
   12ba8:	b	12ecc <__assert_fail@plt+0x2044>
   12bac:	mov	r3, #98	; 0x62
   12bb0:	b	12ee4 <__assert_fail@plt+0x205c>
   12bb4:	ldr	r3, [sp, #48]	; 0x30
   12bb8:	cmp	r3, #0
   12bbc:	beq	12ca4 <__assert_fail@plt+0x1e1c>
   12bc0:	ldr	r3, [sp, #32]
   12bc4:	cmp	r3, #0
   12bc8:	bne	1372c <__assert_fail@plt+0x28a4>
   12bcc:	ldr	r3, [sp, #44]	; 0x2c
   12bd0:	eor	r3, r3, #1
   12bd4:	cmp	sl, #2
   12bd8:	movne	r3, #0
   12bdc:	andeq	r3, r3, #1
   12be0:	cmp	r3, #0
   12be4:	moveq	r2, fp
   12be8:	beq	12c2c <__assert_fail@plt+0x1da4>
   12bec:	cmp	r7, fp
   12bf0:	ldrhi	r2, [sp, #36]	; 0x24
   12bf4:	movhi	r1, #39	; 0x27
   12bf8:	strbhi	r1, [r2, fp]
   12bfc:	add	r2, fp, #1
   12c00:	cmp	r7, r2
   12c04:	ldrhi	r1, [sp, #36]	; 0x24
   12c08:	movhi	r0, #36	; 0x24
   12c0c:	strbhi	r0, [r1, r2]
   12c10:	add	r2, fp, #2
   12c14:	cmp	r7, r2
   12c18:	ldrhi	r1, [sp, #36]	; 0x24
   12c1c:	movhi	r0, #39	; 0x27
   12c20:	strbhi	r0, [r1, r2]
   12c24:	add	r2, fp, #3
   12c28:	str	r3, [sp, #44]	; 0x2c
   12c2c:	cmp	r7, r2
   12c30:	ldrhi	r3, [sp, #36]	; 0x24
   12c34:	movhi	r1, #92	; 0x5c
   12c38:	strbhi	r1, [r3, r2]
   12c3c:	add	fp, r2, #1
   12c40:	cmp	r5, #0
   12c44:	beq	135b0 <__assert_fail@plt+0x2728>
   12c48:	add	r3, r6, #1
   12c4c:	ldr	r1, [sp, #28]
   12c50:	cmp	r1, r3
   12c54:	bls	135c0 <__assert_fail@plt+0x2738>
   12c58:	ldr	r1, [sp, #52]	; 0x34
   12c5c:	ldrb	r3, [r1, r3]
   12c60:	sub	r3, r3, #48	; 0x30
   12c64:	uxtb	r3, r3
   12c68:	cmp	r3, #9
   12c6c:	bhi	135cc <__assert_fail@plt+0x2744>
   12c70:	cmp	r7, fp
   12c74:	movhi	r3, #48	; 0x30
   12c78:	ldrhi	r1, [sp, #36]	; 0x24
   12c7c:	strbhi	r3, [r1, fp]
   12c80:	add	r3, r2, #2
   12c84:	cmp	r7, r3
   12c88:	movhi	r1, #48	; 0x30
   12c8c:	ldrhi	r0, [sp, #36]	; 0x24
   12c90:	strbhi	r1, [r0, r3]
   12c94:	add	fp, r2, #3
   12c98:	ldr	r8, [sp, #32]
   12c9c:	mov	r4, #48	; 0x30
   12ca0:	b	12f7c <__assert_fail@plt+0x20f4>
   12ca4:	ldr	r3, [sp, #156]	; 0x9c
   12ca8:	tst	r3, #1
   12cac:	bne	13070 <__assert_fail@plt+0x21e8>
   12cb0:	ldr	r5, [sp, #48]	; 0x30
   12cb4:	mov	r8, r5
   12cb8:	b	12f7c <__assert_fail@plt+0x20f4>
   12cbc:	cmp	sl, #2
   12cc0:	beq	12cd8 <__assert_fail@plt+0x1e50>
   12cc4:	cmp	sl, #5
   12cc8:	beq	12cf0 <__assert_fail@plt+0x1e68>
   12ccc:	mov	r8, #0
   12cd0:	mov	r5, r8
   12cd4:	b	12f7c <__assert_fail@plt+0x20f4>
   12cd8:	ldr	r3, [sp, #32]
   12cdc:	cmp	r3, #0
   12ce0:	bne	13740 <__assert_fail@plt+0x28b8>
   12ce4:	mov	r8, r3
   12ce8:	mov	r5, r3
   12cec:	b	12f7c <__assert_fail@plt+0x20f4>
   12cf0:	ldr	r3, [sp, #156]	; 0x9c
   12cf4:	tst	r3, #4
   12cf8:	beq	135d8 <__assert_fail@plt+0x2750>
   12cfc:	add	r3, r6, #2
   12d00:	ldr	r2, [sp, #28]
   12d04:	cmp	r2, r3
   12d08:	bls	135e4 <__assert_fail@plt+0x275c>
   12d0c:	ldr	r2, [sp, #52]	; 0x34
   12d10:	add	r2, r2, r6
   12d14:	ldrb	r2, [r2, #1]
   12d18:	cmp	r2, #63	; 0x3f
   12d1c:	movne	r8, #0
   12d20:	movne	r5, r8
   12d24:	bne	12f7c <__assert_fail@plt+0x20f4>
   12d28:	ldr	r2, [sp, #52]	; 0x34
   12d2c:	ldrb	r2, [r2, r3]
   12d30:	sub	r1, r2, #33	; 0x21
   12d34:	cmp	r1, #29
   12d38:	ldrls	pc, [pc, r1, lsl #2]
   12d3c:	b	135f0 <__assert_fail@plt+0x2768>
   12d40:			; <UNDEFINED> instruction: 0x00012db8
   12d44:	strdeq	r3, [r1], -r0
   12d48:	strdeq	r3, [r1], -r0
   12d4c:	strdeq	r3, [r1], -r0
   12d50:	strdeq	r3, [r1], -r0
   12d54:	strdeq	r3, [r1], -r0
   12d58:			; <UNDEFINED> instruction: 0x00012db8
   12d5c:			; <UNDEFINED> instruction: 0x00012db8
   12d60:			; <UNDEFINED> instruction: 0x00012db8
   12d64:	strdeq	r3, [r1], -r0
   12d68:	strdeq	r3, [r1], -r0
   12d6c:	strdeq	r3, [r1], -r0
   12d70:			; <UNDEFINED> instruction: 0x00012db8
   12d74:	strdeq	r3, [r1], -r0
   12d78:			; <UNDEFINED> instruction: 0x00012db8
   12d7c:	strdeq	r3, [r1], -r0
   12d80:	strdeq	r3, [r1], -r0
   12d84:	strdeq	r3, [r1], -r0
   12d88:	strdeq	r3, [r1], -r0
   12d8c:	strdeq	r3, [r1], -r0
   12d90:	strdeq	r3, [r1], -r0
   12d94:	strdeq	r3, [r1], -r0
   12d98:	strdeq	r3, [r1], -r0
   12d9c:	strdeq	r3, [r1], -r0
   12da0:	strdeq	r3, [r1], -r0
   12da4:	strdeq	r3, [r1], -r0
   12da8:	strdeq	r3, [r1], -r0
   12dac:			; <UNDEFINED> instruction: 0x00012db8
   12db0:			; <UNDEFINED> instruction: 0x00012db8
   12db4:			; <UNDEFINED> instruction: 0x00012db8
   12db8:	ldr	r1, [sp, #32]
   12dbc:	cmp	r1, #0
   12dc0:	bne	13800 <__assert_fail@plt+0x2978>
   12dc4:	cmp	r7, fp
   12dc8:	movhi	r1, #63	; 0x3f
   12dcc:	ldrhi	r0, [sp, #36]	; 0x24
   12dd0:	strbhi	r1, [r0, fp]
   12dd4:	add	r1, fp, #1
   12dd8:	cmp	r7, r1
   12ddc:	ldrhi	r0, [sp, #36]	; 0x24
   12de0:	movhi	ip, #34	; 0x22
   12de4:	strbhi	ip, [r0, r1]
   12de8:	add	r1, fp, #2
   12dec:	cmp	r7, r1
   12df0:	ldrhi	r0, [sp, #36]	; 0x24
   12df4:	movhi	ip, #34	; 0x22
   12df8:	strbhi	ip, [r0, r1]
   12dfc:	add	r1, fp, #3
   12e00:	cmp	r7, r1
   12e04:	movhi	r0, #63	; 0x3f
   12e08:	ldrhi	ip, [sp, #36]	; 0x24
   12e0c:	strbhi	r0, [ip, r1]
   12e10:	add	fp, fp, #4
   12e14:	ldr	r5, [sp, #32]
   12e18:	mov	r8, r5
   12e1c:	mov	r4, r2
   12e20:	mov	r6, r3
   12e24:	b	12f7c <__assert_fail@plt+0x20f4>
   12e28:	mov	r3, #102	; 0x66
   12e2c:	b	12ee4 <__assert_fail@plt+0x205c>
   12e30:	mov	r3, #118	; 0x76
   12e34:	b	12ee4 <__assert_fail@plt+0x205c>
   12e38:	cmp	sl, #2
   12e3c:	beq	12ea8 <__assert_fail@plt+0x2020>
   12e40:	ldr	r3, [sp, #48]	; 0x30
   12e44:	ldr	r2, [sp, #32]
   12e48:	and	r3, r3, r2
   12e4c:	tst	r9, r3
   12e50:	moveq	r3, r4
   12e54:	beq	12ee4 <__assert_fail@plt+0x205c>
   12e58:	mov	r8, #0
   12e5c:	mov	r5, r8
   12e60:	eor	r5, r5, #1
   12e64:	ldr	r3, [sp, #44]	; 0x2c
   12e68:	and	r5, r5, r3
   12e6c:	tst	r5, #255	; 0xff
   12e70:	beq	13050 <__assert_fail@plt+0x21c8>
   12e74:	cmp	r7, fp
   12e78:	ldrhi	r3, [sp, #36]	; 0x24
   12e7c:	movhi	r2, #39	; 0x27
   12e80:	strbhi	r2, [r3, fp]
   12e84:	add	r3, fp, #1
   12e88:	cmp	r7, r3
   12e8c:	ldrhi	r2, [sp, #36]	; 0x24
   12e90:	movhi	r1, #39	; 0x27
   12e94:	strbhi	r1, [r2, r3]
   12e98:	add	fp, fp, #2
   12e9c:	mov	r3, #0
   12ea0:	str	r3, [sp, #44]	; 0x2c
   12ea4:	b	13050 <__assert_fail@plt+0x21c8>
   12ea8:	ldr	r3, [sp, #32]
   12eac:	cmp	r3, #0
   12eb0:	bne	1374c <__assert_fail@plt+0x28c4>
   12eb4:	mov	r8, r3
   12eb8:	mov	r5, r3
   12ebc:	b	12e60 <__assert_fail@plt+0x1fd8>
   12ec0:	mov	r3, #110	; 0x6e
   12ec4:	b	12ecc <__assert_fail@plt+0x2044>
   12ec8:	mov	r3, #116	; 0x74
   12ecc:	ldr	r2, [sp, #32]
   12ed0:	cmp	sl, #2
   12ed4:	movne	r2, #0
   12ed8:	andeq	r2, r2, #1
   12edc:	cmp	r2, #0
   12ee0:	bne	12f04 <__assert_fail@plt+0x207c>
   12ee4:	ldr	r2, [sp, #48]	; 0x30
   12ee8:	cmp	r2, #0
   12eec:	moveq	r8, r2
   12ef0:	moveq	r5, r2
   12ef4:	beq	12f7c <__assert_fail@plt+0x20f4>
   12ef8:	mov	r4, r3
   12efc:	mov	r8, #0
   12f00:	b	12fd4 <__assert_fail@plt+0x214c>
   12f04:	mov	r8, sl
   12f08:	mov	sl, r7
   12f0c:	b	13778 <__assert_fail@plt+0x28f0>
   12f10:	mov	r3, #97	; 0x61
   12f14:	b	12ee4 <__assert_fail@plt+0x205c>
   12f18:	ldr	r3, [sp, #28]
   12f1c:	cmn	r3, #1
   12f20:	beq	12f4c <__assert_fail@plt+0x20c4>
   12f24:	ldr	r3, [sp, #28]
   12f28:	subs	r3, r3, #1
   12f2c:	movne	r3, #1
   12f30:	cmp	r3, #0
   12f34:	bne	135fc <__assert_fail@plt+0x2774>
   12f38:	cmp	r6, #0
   12f3c:	beq	12f64 <__assert_fail@plt+0x20dc>
   12f40:	mov	r8, #0
   12f44:	mov	r5, r8
   12f48:	b	12f7c <__assert_fail@plt+0x20f4>
   12f4c:	ldr	r3, [sp, #52]	; 0x34
   12f50:	ldrb	r3, [r3, #1]
   12f54:	adds	r3, r3, #0
   12f58:	movne	r3, #1
   12f5c:	b	12f30 <__assert_fail@plt+0x20a8>
   12f60:	mov	r8, #0
   12f64:	ldr	r5, [sp, #32]
   12f68:	cmp	sl, #2
   12f6c:	movne	r5, #0
   12f70:	andeq	r5, r5, #1
   12f74:	cmp	r5, #0
   12f78:	bne	1312c <__assert_fail@plt+0x22a4>
   12f7c:	ldr	r3, [sp, #68]	; 0x44
   12f80:	cmp	sl, #2
   12f84:	orreq	r3, r3, #1
   12f88:	eor	r3, r3, #1
   12f8c:	ldr	r2, [sp, #32]
   12f90:	orr	r3, r2, r3
   12f94:	tst	r3, #255	; 0xff
   12f98:	beq	12fc8 <__assert_fail@plt+0x2140>
   12f9c:	ldr	r3, [sp, #160]	; 0xa0
   12fa0:	cmp	r3, #0
   12fa4:	beq	12fc8 <__assert_fail@plt+0x2140>
   12fa8:	lsr	r2, r4, #5
   12fac:	uxtb	r2, r2
   12fb0:	and	r3, r4, #31
   12fb4:	ldr	r1, [sp, #160]	; 0xa0
   12fb8:	ldr	r2, [r1, r2, lsl #2]
   12fbc:	lsr	r3, r2, r3
   12fc0:	tst	r3, #1
   12fc4:	bne	12fd4 <__assert_fail@plt+0x214c>
   12fc8:	ldr	r3, [sp, #56]	; 0x38
   12fcc:	cmp	r3, #0
   12fd0:	beq	12e60 <__assert_fail@plt+0x1fd8>
   12fd4:	ldr	r3, [sp, #32]
   12fd8:	cmp	r3, #0
   12fdc:	bne	137e8 <__assert_fail@plt+0x2960>
   12fe0:	ldr	r3, [sp, #44]	; 0x2c
   12fe4:	eor	r3, r3, #1
   12fe8:	cmp	sl, #2
   12fec:	movne	r3, #0
   12ff0:	andeq	r3, r3, #1
   12ff4:	cmp	r3, #0
   12ff8:	beq	1303c <__assert_fail@plt+0x21b4>
   12ffc:	cmp	r7, fp
   13000:	ldrhi	r2, [sp, #36]	; 0x24
   13004:	movhi	r1, #39	; 0x27
   13008:	strbhi	r1, [r2, fp]
   1300c:	add	r2, fp, #1
   13010:	cmp	r7, r2
   13014:	ldrhi	r1, [sp, #36]	; 0x24
   13018:	movhi	r0, #36	; 0x24
   1301c:	strbhi	r0, [r1, r2]
   13020:	add	r2, fp, #2
   13024:	cmp	r7, r2
   13028:	ldrhi	r1, [sp, #36]	; 0x24
   1302c:	movhi	r0, #39	; 0x27
   13030:	strbhi	r0, [r1, r2]
   13034:	add	fp, fp, #3
   13038:	str	r3, [sp, #44]	; 0x2c
   1303c:	cmp	r7, fp
   13040:	ldrhi	r3, [sp, #36]	; 0x24
   13044:	movhi	r2, #92	; 0x5c
   13048:	strbhi	r2, [r3, fp]
   1304c:	add	fp, fp, #1
   13050:	cmp	fp, r7
   13054:	ldrcc	r3, [sp, #36]	; 0x24
   13058:	strbcc	r4, [r3, fp]
   1305c:	add	fp, fp, #1
   13060:	ldr	r3, [sp, #40]	; 0x28
   13064:	cmp	r8, #0
   13068:	moveq	r3, #0
   1306c:	str	r3, [sp, #40]	; 0x28
   13070:	add	r6, r6, #1
   13074:	ldr	r3, [sp, #28]
   13078:	cmn	r3, #1
   1307c:	beq	13608 <__assert_fail@plt+0x2780>
   13080:	ldr	r3, [sp, #28]
   13084:	subs	r8, r3, r6
   13088:	movne	r8, #1
   1308c:	cmp	r8, #0
   13090:	beq	1361c <__assert_fail@plt+0x2794>
   13094:	ldr	r5, [sp, #48]	; 0x30
   13098:	cmp	sl, #2
   1309c:	moveq	r5, #0
   130a0:	andne	r5, r5, #1
   130a4:	ldr	r3, [sp, #60]	; 0x3c
   130a8:	adds	r9, r3, #0
   130ac:	movne	r9, #1
   130b0:	ands	r2, r5, r9
   130b4:	str	r2, [sp, #56]	; 0x38
   130b8:	beq	12980 <__assert_fail@plt+0x1af8>
   130bc:	add	r4, r6, r3
   130c0:	ldr	r2, [sp, #28]
   130c4:	cmp	r3, #1
   130c8:	movls	r3, #0
   130cc:	movhi	r3, #1
   130d0:	cmn	r2, #1
   130d4:	movne	r3, #0
   130d8:	cmp	r3, #0
   130dc:	beq	130ec <__assert_fail@plt+0x2264>
   130e0:	ldr	r0, [sp, #52]	; 0x34
   130e4:	bl	10d98 <strlen@plt>
   130e8:	str	r0, [sp, #28]
   130ec:	ldr	r3, [sp, #28]
   130f0:	cmp	r3, r4
   130f4:	bcc	12978 <__assert_fail@plt+0x1af0>
   130f8:	ldr	r2, [sp, #60]	; 0x3c
   130fc:	ldr	r1, [sp, #72]	; 0x48
   13100:	ldr	r3, [sp, #52]	; 0x34
   13104:	add	r0, r3, r6
   13108:	bl	10cb4 <memcmp@plt>
   1310c:	cmp	r0, #0
   13110:	bne	12b98 <__assert_fail@plt+0x1d10>
   13114:	ldr	r3, [sp, #32]
   13118:	cmp	r3, #0
   1311c:	beq	12980 <__assert_fail@plt+0x1af8>
   13120:	mov	r8, sl
   13124:	mov	sl, r7
   13128:	b	13778 <__assert_fail@plt+0x28f0>
   1312c:	mov	r8, sl
   13130:	mov	sl, r7
   13134:	b	13778 <__assert_fail@plt+0x28f0>
   13138:	cmp	sl, #2
   1313c:	strne	r8, [sp, #80]	; 0x50
   13140:	movne	r5, #0
   13144:	bne	12f7c <__assert_fail@plt+0x20f4>
   13148:	ldr	r3, [sp, #32]
   1314c:	cmp	r3, #0
   13150:	bne	13764 <__assert_fail@plt+0x28dc>
   13154:	ldr	r2, [sp, #76]	; 0x4c
   13158:	adds	r3, r7, #0
   1315c:	movne	r3, #1
   13160:	cmp	r2, #0
   13164:	movne	r3, #0
   13168:	cmp	r3, #0
   1316c:	movne	r3, #0
   13170:	bne	131a0 <__assert_fail@plt+0x2318>
   13174:	cmp	r7, fp
   13178:	ldrhi	r3, [sp, #36]	; 0x24
   1317c:	movhi	r2, #39	; 0x27
   13180:	strbhi	r2, [r3, fp]
   13184:	add	r3, fp, #1
   13188:	cmp	r7, r3
   1318c:	ldrhi	r2, [sp, #36]	; 0x24
   13190:	movhi	r1, #92	; 0x5c
   13194:	strbhi	r1, [r2, r3]
   13198:	mov	r3, r7
   1319c:	ldr	r7, [sp, #76]	; 0x4c
   131a0:	add	r2, fp, #2
   131a4:	cmp	r2, r3
   131a8:	ldrcc	r1, [sp, #36]	; 0x24
   131ac:	movcc	r0, #39	; 0x27
   131b0:	strbcc	r0, [r1, r2]
   131b4:	add	fp, fp, #3
   131b8:	ldr	r2, [sp, #32]
   131bc:	mov	r5, r2
   131c0:	str	r8, [sp, #80]	; 0x50
   131c4:	str	r2, [sp, #44]	; 0x2c
   131c8:	str	r7, [sp, #76]	; 0x4c
   131cc:	mov	r7, r3
   131d0:	b	12f7c <__assert_fail@plt+0x20f4>
   131d4:	ldr	r5, [sp, #84]	; 0x54
   131d8:	cmp	r5, #1
   131dc:	beq	1320c <__assert_fail@plt+0x2384>
   131e0:	mov	r3, #0
   131e4:	str	r3, [sp, #104]	; 0x68
   131e8:	str	r3, [sp, #108]	; 0x6c
   131ec:	ldr	r3, [sp, #28]
   131f0:	cmn	r3, #1
   131f4:	beq	13240 <__assert_fail@plt+0x23b8>
   131f8:	mov	r3, #0
   131fc:	str	r4, [sp, #88]	; 0x58
   13200:	str	fp, [sp, #92]	; 0x5c
   13204:	mov	fp, r3
   13208:	b	13368 <__assert_fail@plt+0x24e0>
   1320c:	bl	10d80 <__ctype_b_loc@plt>
   13210:	ldr	r2, [r0]
   13214:	lsl	r3, r4, #1
   13218:	ldrh	r8, [r2, r3]
   1321c:	lsr	r8, r8, #14
   13220:	and	r8, r8, #1
   13224:	mov	r2, r5
   13228:	eor	r5, r8, #1
   1322c:	ldr	r3, [sp, #48]	; 0x30
   13230:	and	r5, r5, r3
   13234:	ands	r5, r5, #255	; 0xff
   13238:	beq	12f7c <__assert_fail@plt+0x20f4>
   1323c:	b	13400 <__assert_fail@plt+0x2578>
   13240:	ldr	r0, [sp, #52]	; 0x34
   13244:	bl	10d98 <strlen@plt>
   13248:	str	r0, [sp, #28]
   1324c:	b	131f8 <__assert_fail@plt+0x2370>
   13250:	mov	r2, fp
   13254:	mov	r1, r4
   13258:	ldr	r4, [sp, #88]	; 0x58
   1325c:	ldr	fp, [sp, #92]	; 0x5c
   13260:	ldr	r0, [sp, #28]
   13264:	cmp	r0, r5
   13268:	bls	13434 <__assert_fail@plt+0x25ac>
   1326c:	ldrb	r3, [r1]
   13270:	cmp	r3, #0
   13274:	beq	1343c <__assert_fail@plt+0x25b4>
   13278:	mov	r3, r1
   1327c:	add	r2, r2, #1
   13280:	add	r1, r6, r2
   13284:	cmp	r0, r1
   13288:	bls	13444 <__assert_fail@plt+0x25bc>
   1328c:	ldrb	r1, [r3, #1]!
   13290:	cmp	r1, #0
   13294:	bne	1327c <__assert_fail@plt+0x23f4>
   13298:	mov	r8, #0
   1329c:	b	133f8 <__assert_fail@plt+0x2570>
   132a0:	cmp	r4, r5
   132a4:	beq	13344 <__assert_fail@plt+0x24bc>
   132a8:	ldrb	r3, [r4, #1]!
   132ac:	sub	r3, r3, #91	; 0x5b
   132b0:	cmp	r3, #33	; 0x21
   132b4:	ldrls	pc, [pc, r3, lsl #2]
   132b8:	b	132a0 <__assert_fail@plt+0x2418>
   132bc:	andeq	r3, r1, r0, ror r7
   132c0:	andeq	r3, r1, r0, ror r7
   132c4:	andeq	r3, r1, r0, lsr #5
   132c8:	andeq	r3, r1, r0, ror r7
   132cc:	andeq	r3, r1, r0, lsr #5
   132d0:	andeq	r3, r1, r0, ror r7
   132d4:	andeq	r3, r1, r0, lsr #5
   132d8:	andeq	r3, r1, r0, lsr #5
   132dc:	andeq	r3, r1, r0, lsr #5
   132e0:	andeq	r3, r1, r0, lsr #5
   132e4:	andeq	r3, r1, r0, lsr #5
   132e8:	andeq	r3, r1, r0, lsr #5
   132ec:	andeq	r3, r1, r0, lsr #5
   132f0:	andeq	r3, r1, r0, lsr #5
   132f4:	andeq	r3, r1, r0, lsr #5
   132f8:	andeq	r3, r1, r0, lsr #5
   132fc:	andeq	r3, r1, r0, lsr #5
   13300:	andeq	r3, r1, r0, lsr #5
   13304:	andeq	r3, r1, r0, lsr #5
   13308:	andeq	r3, r1, r0, lsr #5
   1330c:	andeq	r3, r1, r0, lsr #5
   13310:	andeq	r3, r1, r0, lsr #5
   13314:	andeq	r3, r1, r0, lsr #5
   13318:	andeq	r3, r1, r0, lsr #5
   1331c:	andeq	r3, r1, r0, lsr #5
   13320:	andeq	r3, r1, r0, lsr #5
   13324:	andeq	r3, r1, r0, lsr #5
   13328:	andeq	r3, r1, r0, lsr #5
   1332c:	andeq	r3, r1, r0, lsr #5
   13330:	andeq	r3, r1, r0, lsr #5
   13334:	andeq	r3, r1, r0, lsr #5
   13338:	andeq	r3, r1, r0, lsr #5
   1333c:	andeq	r3, r1, r0, lsr #5
   13340:	andeq	r3, r1, r0, ror r7
   13344:	ldr	r0, [sp, #100]	; 0x64
   13348:	bl	10cf0 <iswprint@plt>
   1334c:	cmp	r0, #0
   13350:	moveq	r8, #0
   13354:	add	fp, fp, r9
   13358:	add	r0, sp, #104	; 0x68
   1335c:	bl	10ca8 <mbsinit@plt>
   13360:	cmp	r0, #0
   13364:	bne	133d8 <__assert_fail@plt+0x2550>
   13368:	add	r5, r6, fp
   1336c:	ldr	r3, [sp, #52]	; 0x34
   13370:	add	r4, r3, r5
   13374:	add	r3, sp, #104	; 0x68
   13378:	ldr	r2, [sp, #28]
   1337c:	sub	r2, r2, r5
   13380:	mov	r1, r4
   13384:	add	r0, sp, #100	; 0x64
   13388:	bl	14ce8 <__assert_fail@plt+0x3e60>
   1338c:	subs	r9, r0, #0
   13390:	beq	1344c <__assert_fail@plt+0x25c4>
   13394:	cmn	r9, #1
   13398:	beq	133e8 <__assert_fail@plt+0x2560>
   1339c:	cmn	r9, #2
   133a0:	beq	13250 <__assert_fail@plt+0x23c8>
   133a4:	ldr	r3, [sp, #32]
   133a8:	cmp	sl, #2
   133ac:	movne	r3, #0
   133b0:	andeq	r3, r3, #1
   133b4:	cmp	r3, #0
   133b8:	beq	13344 <__assert_fail@plt+0x24bc>
   133bc:	cmp	r9, #1
   133c0:	bls	13344 <__assert_fail@plt+0x24bc>
   133c4:	sub	r3, r9, #1
   133c8:	add	r5, r3, r5
   133cc:	ldr	r3, [sp, #52]	; 0x34
   133d0:	add	r5, r3, r5
   133d4:	b	132a8 <__assert_fail@plt+0x2420>
   133d8:	ldr	r4, [sp, #88]	; 0x58
   133dc:	mov	r2, fp
   133e0:	ldr	fp, [sp, #92]	; 0x5c
   133e4:	b	133f8 <__assert_fail@plt+0x2570>
   133e8:	ldr	r4, [sp, #88]	; 0x58
   133ec:	mov	r2, fp
   133f0:	ldr	fp, [sp, #92]	; 0x5c
   133f4:	mov	r8, #0
   133f8:	cmp	r2, #1
   133fc:	bls	13228 <__assert_fail@plt+0x23a0>
   13400:	add	r1, r6, r2
   13404:	ldr	ip, [sp, #64]	; 0x40
   13408:	mov	r5, #0
   1340c:	eor	r3, r8, #1
   13410:	ldr	r2, [sp, #48]	; 0x30
   13414:	and	r3, r3, r2
   13418:	uxtb	r3, r3
   1341c:	ldr	r9, [sp, #32]
   13420:	ldr	lr, [sp, #44]	; 0x2c
   13424:	ldr	r2, [sp, #56]	; 0x38
   13428:	str	r8, [sp, #56]	; 0x38
   1342c:	ldr	r0, [sp, #36]	; 0x24
   13430:	b	134cc <__assert_fail@plt+0x2644>
   13434:	mov	r8, #0
   13438:	b	133f8 <__assert_fail@plt+0x2570>
   1343c:	mov	r8, #0
   13440:	b	133f8 <__assert_fail@plt+0x2570>
   13444:	mov	r8, #0
   13448:	b	133f8 <__assert_fail@plt+0x2570>
   1344c:	ldr	r4, [sp, #88]	; 0x58
   13450:	mov	r2, fp
   13454:	ldr	fp, [sp, #92]	; 0x5c
   13458:	b	133f8 <__assert_fail@plt+0x2570>
   1345c:	cmp	r2, #0
   13460:	beq	13474 <__assert_fail@plt+0x25ec>
   13464:	cmp	r7, fp
   13468:	movhi	r2, #92	; 0x5c
   1346c:	strbhi	r2, [r0, fp]
   13470:	add	fp, fp, #1
   13474:	add	r8, r6, #1
   13478:	cmp	r1, r8
   1347c:	bls	13584 <__assert_fail@plt+0x26fc>
   13480:	eor	r2, r5, #1
   13484:	and	r2, r2, lr
   13488:	ands	r2, r2, #255	; 0xff
   1348c:	beq	135a0 <__assert_fail@plt+0x2718>
   13490:	cmp	r7, fp
   13494:	movhi	r2, #39	; 0x27
   13498:	strbhi	r2, [r0, fp]
   1349c:	add	r2, fp, #1
   134a0:	cmp	r7, r2
   134a4:	movhi	lr, #39	; 0x27
   134a8:	strbhi	lr, [r0, r2]
   134ac:	add	fp, fp, #2
   134b0:	mov	r6, r8
   134b4:	mov	r2, r3
   134b8:	mov	lr, r3
   134bc:	cmp	r7, fp
   134c0:	strbhi	r4, [r0, fp]
   134c4:	add	fp, fp, #1
   134c8:	ldrb	r4, [ip, #1]!
   134cc:	cmp	r3, #0
   134d0:	beq	1345c <__assert_fail@plt+0x25d4>
   134d4:	cmp	r9, #0
   134d8:	bne	137dc <__assert_fail@plt+0x2954>
   134dc:	eor	r5, lr, #1
   134e0:	cmp	sl, #2
   134e4:	movne	r5, #0
   134e8:	andeq	r5, r5, #1
   134ec:	cmp	r5, #0
   134f0:	beq	13528 <__assert_fail@plt+0x26a0>
   134f4:	cmp	r7, fp
   134f8:	movhi	lr, #39	; 0x27
   134fc:	strbhi	lr, [r0, fp]
   13500:	add	lr, fp, #1
   13504:	cmp	r7, lr
   13508:	movhi	r8, #36	; 0x24
   1350c:	strbhi	r8, [r0, lr]
   13510:	add	lr, fp, #2
   13514:	cmp	r7, lr
   13518:	movhi	r8, #39	; 0x27
   1351c:	strbhi	r8, [r0, lr]
   13520:	add	fp, fp, #3
   13524:	mov	lr, r5
   13528:	cmp	r7, fp
   1352c:	movhi	r5, #92	; 0x5c
   13530:	strbhi	r5, [r0, fp]
   13534:	add	r5, fp, #1
   13538:	cmp	r7, r5
   1353c:	lsrhi	r8, r4, #6
   13540:	addhi	r8, r8, #48	; 0x30
   13544:	strbhi	r8, [r0, r5]
   13548:	add	r8, fp, #2
   1354c:	cmp	r7, r8
   13550:	lsrhi	r5, r4, #3
   13554:	andhi	r5, r5, #7
   13558:	addhi	r5, r5, #48	; 0x30
   1355c:	strbhi	r5, [r0, r8]
   13560:	add	fp, fp, #3
   13564:	and	r4, r4, #7
   13568:	add	r4, r4, #48	; 0x30
   1356c:	add	r5, r6, #1
   13570:	cmp	r1, r5
   13574:	bls	13590 <__assert_fail@plt+0x2708>
   13578:	mov	r6, r5
   1357c:	mov	r5, r3
   13580:	b	134bc <__assert_fail@plt+0x2634>
   13584:	str	lr, [sp, #44]	; 0x2c
   13588:	ldr	r8, [sp, #56]	; 0x38
   1358c:	b	12e60 <__assert_fail@plt+0x1fd8>
   13590:	str	lr, [sp, #44]	; 0x2c
   13594:	ldr	r8, [sp, #56]	; 0x38
   13598:	mov	r5, r3
   1359c:	b	12e60 <__assert_fail@plt+0x1fd8>
   135a0:	mov	r6, r8
   135a4:	b	134bc <__assert_fail@plt+0x2634>
   135a8:	mov	r5, #0
   135ac:	b	12f7c <__assert_fail@plt+0x20f4>
   135b0:	mov	r8, r5
   135b4:	ldr	r5, [sp, #48]	; 0x30
   135b8:	mov	r4, #48	; 0x30
   135bc:	b	12f7c <__assert_fail@plt+0x20f4>
   135c0:	ldr	r8, [sp, #32]
   135c4:	mov	r4, #48	; 0x30
   135c8:	b	12f7c <__assert_fail@plt+0x20f4>
   135cc:	ldr	r8, [sp, #32]
   135d0:	mov	r4, #48	; 0x30
   135d4:	b	12f7c <__assert_fail@plt+0x20f4>
   135d8:	mov	r8, #0
   135dc:	mov	r5, r8
   135e0:	b	12f7c <__assert_fail@plt+0x20f4>
   135e4:	mov	r8, #0
   135e8:	mov	r5, r8
   135ec:	b	12f7c <__assert_fail@plt+0x20f4>
   135f0:	mov	r8, #0
   135f4:	mov	r5, r8
   135f8:	b	12f7c <__assert_fail@plt+0x20f4>
   135fc:	mov	r8, #0
   13600:	mov	r5, r8
   13604:	b	12f7c <__assert_fail@plt+0x20f4>
   13608:	ldr	r3, [sp, #52]	; 0x34
   1360c:	ldrb	r8, [r3, r6]
   13610:	adds	r8, r8, #0
   13614:	movne	r8, #1
   13618:	b	1308c <__assert_fail@plt+0x2204>
   1361c:	cmp	sl, #2
   13620:	movne	r3, #0
   13624:	moveq	r3, #1
   13628:	ldr	r1, [sp, #32]
   1362c:	mov	r2, r1
   13630:	and	r2, r2, r3
   13634:	cmp	fp, #0
   13638:	movne	r2, #0
   1363c:	andeq	r2, r2, #1
   13640:	cmp	r2, #0
   13644:	bne	137f4 <__assert_fail@plt+0x296c>
   13648:	eor	r2, r1, #1
   1364c:	and	r3, r3, r2
   13650:	ldr	r1, [sp, #80]	; 0x50
   13654:	tst	r1, r3
   13658:	beq	136d0 <__assert_fail@plt+0x2848>
   1365c:	ldr	r3, [sp, #40]	; 0x28
   13660:	cmp	r3, #0
   13664:	bne	1368c <__assert_fail@plt+0x2804>
   13668:	ldr	r1, [sp, #76]	; 0x4c
   1366c:	clz	r3, r7
   13670:	lsr	r3, r3, #5
   13674:	cmp	r1, #0
   13678:	moveq	r3, #0
   1367c:	cmp	r3, #0
   13680:	beq	136d0 <__assert_fail@plt+0x2848>
   13684:	ldr	r7, [sp, #76]	; 0x4c
   13688:	b	12720 <__assert_fail@plt+0x1898>
   1368c:	ldr	r3, [sp, #168]	; 0xa8
   13690:	str	r3, [sp, #16]
   13694:	ldr	r3, [sp, #164]	; 0xa4
   13698:	str	r3, [sp, #12]
   1369c:	ldr	r3, [sp, #160]	; 0xa0
   136a0:	str	r3, [sp, #8]
   136a4:	ldr	r3, [sp, #156]	; 0x9c
   136a8:	str	r3, [sp, #4]
   136ac:	mov	r3, #5
   136b0:	str	r3, [sp]
   136b4:	ldr	r3, [sp, #28]
   136b8:	ldr	r2, [sp, #52]	; 0x34
   136bc:	ldr	r1, [sp, #76]	; 0x4c
   136c0:	ldr	r0, [sp, #36]	; 0x24
   136c4:	bl	126c0 <__assert_fail@plt+0x1838>
   136c8:	mov	fp, r0
   136cc:	b	137d0 <__assert_fail@plt+0x2948>
   136d0:	mov	sl, r7
   136d4:	ldr	r3, [sp, #72]	; 0x48
   136d8:	cmp	r3, #0
   136dc:	moveq	r2, #0
   136e0:	andne	r2, r2, #1
   136e4:	cmp	r2, #0
   136e8:	beq	13718 <__assert_fail@plt+0x2890>
   136ec:	mov	r2, r3
   136f0:	ldrb	r3, [r3]
   136f4:	cmp	r3, #0
   136f8:	beq	13718 <__assert_fail@plt+0x2890>
   136fc:	ldr	r1, [sp, #36]	; 0x24
   13700:	cmp	sl, fp
   13704:	strbhi	r3, [r1, fp]
   13708:	add	fp, fp, #1
   1370c:	ldrb	r3, [r2, #1]!
   13710:	cmp	r3, #0
   13714:	bne	13700 <__assert_fail@plt+0x2878>
   13718:	cmp	sl, fp
   1371c:	movhi	r3, #0
   13720:	ldrhi	r2, [sp, #36]	; 0x24
   13724:	strbhi	r3, [r2, fp]
   13728:	b	137d0 <__assert_fail@plt+0x2948>
   1372c:	mov	r8, sl
   13730:	mov	sl, r7
   13734:	ldr	r3, [sp, #32]
   13738:	str	r3, [sp, #48]	; 0x30
   1373c:	b	13778 <__assert_fail@plt+0x28f0>
   13740:	mov	r8, sl
   13744:	mov	sl, r7
   13748:	b	13778 <__assert_fail@plt+0x28f0>
   1374c:	mov	r8, sl
   13750:	mov	sl, r7
   13754:	b	13778 <__assert_fail@plt+0x28f0>
   13758:	andeq	r5, r1, r4, ror #26
   1375c:	andeq	r5, r1, r4, ror sp
   13760:	andeq	r5, r1, r8, ror #26
   13764:	mov	r8, sl
   13768:	mov	sl, r7
   1376c:	b	13778 <__assert_fail@plt+0x28f0>
   13770:	mov	r8, sl
   13774:	mov	sl, r7
   13778:	ldr	r3, [sp, #48]	; 0x30
   1377c:	cmp	r8, #2
   13780:	movne	r3, #0
   13784:	andeq	r3, r3, #1
   13788:	cmp	r3, #0
   1378c:	movne	r8, #4
   13790:	ldr	r3, [sp, #168]	; 0xa8
   13794:	str	r3, [sp, #16]
   13798:	ldr	r3, [sp, #164]	; 0xa4
   1379c:	str	r3, [sp, #12]
   137a0:	mov	r3, #0
   137a4:	str	r3, [sp, #8]
   137a8:	ldr	r3, [sp, #156]	; 0x9c
   137ac:	bic	r3, r3, #2
   137b0:	str	r3, [sp, #4]
   137b4:	str	r8, [sp]
   137b8:	ldr	r3, [sp, #28]
   137bc:	ldr	r2, [sp, #52]	; 0x34
   137c0:	mov	r1, sl
   137c4:	ldr	r0, [sp, #36]	; 0x24
   137c8:	bl	126c0 <__assert_fail@plt+0x1838>
   137cc:	mov	fp, r0
   137d0:	mov	r0, fp
   137d4:	add	sp, sp, #116	; 0x74
   137d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137dc:	mov	r8, sl
   137e0:	mov	sl, r7
   137e4:	b	13778 <__assert_fail@plt+0x28f0>
   137e8:	mov	r8, sl
   137ec:	mov	sl, r7
   137f0:	b	13778 <__assert_fail@plt+0x28f0>
   137f4:	mov	r8, sl
   137f8:	mov	sl, r7
   137fc:	b	13778 <__assert_fail@plt+0x28f0>
   13800:	mov	r8, sl
   13804:	mov	sl, r7
   13808:	b	13790 <__assert_fail@plt+0x2908>
   1380c:	mov	r3, #1
   13810:	str	r3, [sp, #32]
   13814:	str	r3, [sp, #48]	; 0x30
   13818:	str	r3, [sp, #60]	; 0x3c
   1381c:	ldr	r3, [pc, #-196]	; 13760 <__assert_fail@plt+0x28d8>
   13820:	str	r3, [sp, #72]	; 0x48
   13824:	mov	fp, #0
   13828:	mov	sl, #5
   1382c:	b	1277c <__assert_fail@plt+0x18f4>
   13830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13834:	sub	sp, sp, #52	; 0x34
   13838:	mov	r5, r0
   1383c:	str	r1, [sp, #24]
   13840:	str	r2, [sp, #28]
   13844:	mov	r4, r3
   13848:	bl	10da4 <__errno_location@plt>
   1384c:	str	r0, [sp, #32]
   13850:	ldr	r3, [r0]
   13854:	str	r3, [sp, #36]	; 0x24
   13858:	ldr	r3, [pc, #396]	; 139ec <__assert_fail@plt+0x2b64>
   1385c:	ldr	r6, [r3]
   13860:	cmn	r5, #-2147483647	; 0x80000001
   13864:	movne	r3, #0
   13868:	moveq	r3, #1
   1386c:	orrs	r3, r3, r5, lsr #31
   13870:	bne	139b0 <__assert_fail@plt+0x2b28>
   13874:	ldr	r3, [pc, #368]	; 139ec <__assert_fail@plt+0x2b64>
   13878:	ldr	r2, [r3, #4]
   1387c:	cmp	r5, r2
   13880:	blt	138e8 <__assert_fail@plt+0x2a60>
   13884:	str	r2, [sp, #44]	; 0x2c
   13888:	add	r3, r3, #8
   1388c:	cmp	r6, r3
   13890:	beq	139b4 <__assert_fail@plt+0x2b2c>
   13894:	sub	r2, r5, r2
   13898:	mov	r3, #8
   1389c:	str	r3, [sp]
   138a0:	mvn	r3, #-2147483648	; 0x80000000
   138a4:	add	r2, r2, #1
   138a8:	add	r1, sp, #44	; 0x2c
   138ac:	mov	r0, r6
   138b0:	bl	14734 <__assert_fail@plt+0x38ac>
   138b4:	mov	r6, r0
   138b8:	ldr	r3, [pc, #300]	; 139ec <__assert_fail@plt+0x2b64>
   138bc:	str	r0, [r3]
   138c0:	ldr	r7, [pc, #292]	; 139ec <__assert_fail@plt+0x2b64>
   138c4:	ldr	r0, [r7, #4]
   138c8:	ldr	r2, [sp, #44]	; 0x2c
   138cc:	sub	r2, r2, r0
   138d0:	lsl	r2, r2, #3
   138d4:	mov	r1, #0
   138d8:	add	r0, r6, r0, lsl #3
   138dc:	bl	10dbc <memset@plt>
   138e0:	ldr	r3, [sp, #44]	; 0x2c
   138e4:	str	r3, [r7, #4]
   138e8:	add	fp, r6, r5, lsl #3
   138ec:	ldr	r8, [r6, r5, lsl #3]
   138f0:	ldr	r7, [fp, #4]
   138f4:	ldr	r9, [r4, #4]
   138f8:	orr	r9, r9, #1
   138fc:	add	sl, r4, #8
   13900:	ldr	r3, [r4, #44]	; 0x2c
   13904:	str	r3, [sp, #16]
   13908:	ldr	r3, [r4, #40]	; 0x28
   1390c:	str	r3, [sp, #12]
   13910:	str	sl, [sp, #8]
   13914:	str	r9, [sp, #4]
   13918:	ldr	r3, [r4]
   1391c:	str	r3, [sp]
   13920:	ldr	r3, [sp, #28]
   13924:	ldr	r2, [sp, #24]
   13928:	mov	r1, r8
   1392c:	mov	r0, r7
   13930:	bl	126c0 <__assert_fail@plt+0x1838>
   13934:	cmp	r8, r0
   13938:	bhi	13998 <__assert_fail@plt+0x2b10>
   1393c:	add	r8, r0, #1
   13940:	str	r8, [r6, r5, lsl #3]
   13944:	ldr	r3, [pc, #164]	; 139f0 <__assert_fail@plt+0x2b68>
   13948:	cmp	r7, r3
   1394c:	beq	13958 <__assert_fail@plt+0x2ad0>
   13950:	mov	r0, r7
   13954:	bl	123a0 <__assert_fail@plt+0x1518>
   13958:	mov	r0, r8
   1395c:	bl	145b0 <__assert_fail@plt+0x3728>
   13960:	mov	r7, r0
   13964:	str	r0, [fp, #4]
   13968:	ldr	r3, [r4, #44]	; 0x2c
   1396c:	str	r3, [sp, #16]
   13970:	ldr	r3, [r4, #40]	; 0x28
   13974:	str	r3, [sp, #12]
   13978:	str	sl, [sp, #8]
   1397c:	str	r9, [sp, #4]
   13980:	ldr	r3, [r4]
   13984:	str	r3, [sp]
   13988:	ldr	r3, [sp, #28]
   1398c:	ldr	r2, [sp, #24]
   13990:	mov	r1, r8
   13994:	bl	126c0 <__assert_fail@plt+0x1838>
   13998:	ldr	r3, [sp, #32]
   1399c:	ldr	r2, [sp, #36]	; 0x24
   139a0:	str	r2, [r3]
   139a4:	mov	r0, r7
   139a8:	add	sp, sp, #52	; 0x34
   139ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139b0:	bl	10e70 <abort@plt>
   139b4:	sub	r2, r5, r2
   139b8:	mov	r3, #8
   139bc:	str	r3, [sp]
   139c0:	mvn	r3, #-2147483648	; 0x80000000
   139c4:	add	r2, r2, #1
   139c8:	add	r1, sp, #44	; 0x2c
   139cc:	mov	r0, #0
   139d0:	bl	14734 <__assert_fail@plt+0x38ac>
   139d4:	mov	r6, r0
   139d8:	ldr	r3, [pc, #12]	; 139ec <__assert_fail@plt+0x2b64>
   139dc:	str	r0, [r3], #8
   139e0:	ldm	r3, {r0, r1}
   139e4:	stm	r6, {r0, r1}
   139e8:	b	138c0 <__assert_fail@plt+0x2a38>
   139ec:	strdeq	r7, [r2], -r0
   139f0:	andeq	r7, r2, r0, lsr #3
   139f4:	push	{r4, r5, r6, lr}
   139f8:	mov	r4, r0
   139fc:	bl	10da4 <__errno_location@plt>
   13a00:	mov	r5, r0
   13a04:	ldr	r6, [r0]
   13a08:	cmp	r4, #0
   13a0c:	ldr	r3, [pc, #20]	; 13a28 <__assert_fail@plt+0x2ba0>
   13a10:	moveq	r4, r3
   13a14:	mov	r1, #48	; 0x30
   13a18:	mov	r0, r4
   13a1c:	bl	14a9c <__assert_fail@plt+0x3c14>
   13a20:	str	r6, [r5]
   13a24:	pop	{r4, r5, r6, pc}
   13a28:	andeq	r7, r2, r0, lsr #5
   13a2c:	subs	r3, r0, #0
   13a30:	ldr	r2, [pc, #8]	; 13a40 <__assert_fail@plt+0x2bb8>
   13a34:	moveq	r3, r2
   13a38:	ldr	r0, [r3]
   13a3c:	bx	lr
   13a40:	andeq	r7, r2, r0, lsr #5
   13a44:	subs	r3, r0, #0
   13a48:	ldr	r2, [pc, #8]	; 13a58 <__assert_fail@plt+0x2bd0>
   13a4c:	moveq	r3, r2
   13a50:	str	r1, [r3]
   13a54:	bx	lr
   13a58:	andeq	r7, r2, r0, lsr #5
   13a5c:	push	{lr}		; (str lr, [sp, #-4]!)
   13a60:	subs	r3, r0, #0
   13a64:	ldr	r0, [pc, #44]	; 13a98 <__assert_fail@plt+0x2c10>
   13a68:	moveq	r3, r0
   13a6c:	add	r3, r3, #8
   13a70:	lsr	lr, r1, #5
   13a74:	and	r1, r1, #31
   13a78:	ldr	ip, [r3, lr, lsl #2]
   13a7c:	lsr	r0, ip, r1
   13a80:	eor	r2, r2, r0
   13a84:	and	r2, r2, #1
   13a88:	eor	r1, ip, r2, lsl r1
   13a8c:	str	r1, [r3, lr, lsl #2]
   13a90:	and	r0, r0, #1
   13a94:	pop	{pc}		; (ldr pc, [sp], #4)
   13a98:	andeq	r7, r2, r0, lsr #5
   13a9c:	subs	r3, r0, #0
   13aa0:	ldr	r2, [pc, #12]	; 13ab4 <__assert_fail@plt+0x2c2c>
   13aa4:	moveq	r3, r2
   13aa8:	ldr	r0, [r3, #4]
   13aac:	str	r1, [r3, #4]
   13ab0:	bx	lr
   13ab4:	andeq	r7, r2, r0, lsr #5
   13ab8:	subs	r3, r0, #0
   13abc:	ldr	r0, [pc, #40]	; 13aec <__assert_fail@plt+0x2c64>
   13ac0:	moveq	r3, r0
   13ac4:	mov	r0, #10
   13ac8:	str	r0, [r3]
   13acc:	cmp	r2, #0
   13ad0:	cmpne	r1, #0
   13ad4:	beq	13ae4 <__assert_fail@plt+0x2c5c>
   13ad8:	str	r1, [r3, #40]	; 0x28
   13adc:	str	r2, [r3, #44]	; 0x2c
   13ae0:	bx	lr
   13ae4:	push	{r4, lr}
   13ae8:	bl	10e70 <abort@plt>
   13aec:	andeq	r7, r2, r0, lsr #5
   13af0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13af4:	sub	sp, sp, #24
   13af8:	mov	r7, r0
   13afc:	mov	r8, r1
   13b00:	mov	r9, r2
   13b04:	mov	sl, r3
   13b08:	ldr	r4, [sp, #56]	; 0x38
   13b0c:	cmp	r4, #0
   13b10:	ldr	r3, [pc, #84]	; 13b6c <__assert_fail@plt+0x2ce4>
   13b14:	moveq	r4, r3
   13b18:	bl	10da4 <__errno_location@plt>
   13b1c:	mov	r5, r0
   13b20:	ldr	r6, [r0]
   13b24:	ldr	r3, [r4, #44]	; 0x2c
   13b28:	str	r3, [sp, #16]
   13b2c:	ldr	r3, [r4, #40]	; 0x28
   13b30:	str	r3, [sp, #12]
   13b34:	add	r3, r4, #8
   13b38:	str	r3, [sp, #8]
   13b3c:	ldr	r3, [r4, #4]
   13b40:	str	r3, [sp, #4]
   13b44:	ldr	r3, [r4]
   13b48:	str	r3, [sp]
   13b4c:	mov	r3, sl
   13b50:	mov	r2, r9
   13b54:	mov	r1, r8
   13b58:	mov	r0, r7
   13b5c:	bl	126c0 <__assert_fail@plt+0x1838>
   13b60:	str	r6, [r5]
   13b64:	add	sp, sp, #24
   13b68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b6c:	andeq	r7, r2, r0, lsr #5
   13b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b74:	sub	sp, sp, #44	; 0x2c
   13b78:	str	r0, [sp, #28]
   13b7c:	str	r1, [sp, #32]
   13b80:	mov	r6, r2
   13b84:	subs	r4, r3, #0
   13b88:	ldr	r3, [pc, #172]	; 13c3c <__assert_fail@plt+0x2db4>
   13b8c:	moveq	r4, r3
   13b90:	bl	10da4 <__errno_location@plt>
   13b94:	mov	r7, r0
   13b98:	ldr	fp, [r0]
   13b9c:	ldr	r5, [r4, #4]
   13ba0:	cmp	r6, #0
   13ba4:	orreq	r5, r5, #1
   13ba8:	add	r9, r4, #8
   13bac:	ldr	r3, [r4, #44]	; 0x2c
   13bb0:	str	r3, [sp, #16]
   13bb4:	ldr	r3, [r4, #40]	; 0x28
   13bb8:	str	r3, [sp, #12]
   13bbc:	str	r9, [sp, #8]
   13bc0:	str	r5, [sp, #4]
   13bc4:	ldr	r3, [r4]
   13bc8:	str	r3, [sp]
   13bcc:	ldr	r3, [sp, #32]
   13bd0:	ldr	r2, [sp, #28]
   13bd4:	mov	r1, #0
   13bd8:	mov	r0, r1
   13bdc:	bl	126c0 <__assert_fail@plt+0x1838>
   13be0:	mov	sl, r0
   13be4:	add	r8, r0, #1
   13be8:	mov	r0, r8
   13bec:	bl	145b0 <__assert_fail@plt+0x3728>
   13bf0:	str	r0, [sp, #36]	; 0x24
   13bf4:	ldr	r3, [r4, #44]	; 0x2c
   13bf8:	str	r3, [sp, #16]
   13bfc:	ldr	r3, [r4, #40]	; 0x28
   13c00:	str	r3, [sp, #12]
   13c04:	str	r9, [sp, #8]
   13c08:	str	r5, [sp, #4]
   13c0c:	ldr	r3, [r4]
   13c10:	str	r3, [sp]
   13c14:	ldr	r3, [sp, #32]
   13c18:	ldr	r2, [sp, #28]
   13c1c:	mov	r1, r8
   13c20:	bl	126c0 <__assert_fail@plt+0x1838>
   13c24:	str	fp, [r7]
   13c28:	cmp	r6, #0
   13c2c:	strne	sl, [r6]
   13c30:	ldr	r0, [sp, #36]	; 0x24
   13c34:	add	sp, sp, #44	; 0x2c
   13c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c3c:	andeq	r7, r2, r0, lsr #5
   13c40:	push	{r4, lr}
   13c44:	mov	r3, r2
   13c48:	mov	r2, #0
   13c4c:	bl	13b70 <__assert_fail@plt+0x2ce8>
   13c50:	pop	{r4, pc}
   13c54:	push	{r4, r5, r6, r7, r8, lr}
   13c58:	ldr	r3, [pc, #140]	; 13cec <__assert_fail@plt+0x2e64>
   13c5c:	ldr	r7, [r3]
   13c60:	ldr	r3, [r3, #4]
   13c64:	cmp	r3, #1
   13c68:	ble	13c94 <__assert_fail@plt+0x2e0c>
   13c6c:	mov	r5, r7
   13c70:	mov	r4, #1
   13c74:	ldr	r6, [pc, #112]	; 13cec <__assert_fail@plt+0x2e64>
   13c78:	ldr	r0, [r5, #12]
   13c7c:	bl	123a0 <__assert_fail@plt+0x1518>
   13c80:	add	r4, r4, #1
   13c84:	add	r5, r5, #8
   13c88:	ldr	r3, [r6, #4]
   13c8c:	cmp	r3, r4
   13c90:	bgt	13c78 <__assert_fail@plt+0x2df0>
   13c94:	ldr	r0, [r7, #4]
   13c98:	ldr	r3, [pc, #80]	; 13cf0 <__assert_fail@plt+0x2e68>
   13c9c:	cmp	r0, r3
   13ca0:	beq	13cbc <__assert_fail@plt+0x2e34>
   13ca4:	bl	123a0 <__assert_fail@plt+0x1518>
   13ca8:	ldr	r3, [pc, #60]	; 13cec <__assert_fail@plt+0x2e64>
   13cac:	mov	r2, #256	; 0x100
   13cb0:	str	r2, [r3, #8]
   13cb4:	ldr	r2, [pc, #52]	; 13cf0 <__assert_fail@plt+0x2e68>
   13cb8:	str	r2, [r3, #12]
   13cbc:	ldr	r3, [pc, #48]	; 13cf4 <__assert_fail@plt+0x2e6c>
   13cc0:	cmp	r7, r3
   13cc4:	beq	13cdc <__assert_fail@plt+0x2e54>
   13cc8:	mov	r0, r7
   13ccc:	bl	123a0 <__assert_fail@plt+0x1518>
   13cd0:	ldr	r3, [pc, #20]	; 13cec <__assert_fail@plt+0x2e64>
   13cd4:	add	r2, r3, #8
   13cd8:	str	r2, [r3]
   13cdc:	mov	r2, #1
   13ce0:	ldr	r3, [pc, #4]	; 13cec <__assert_fail@plt+0x2e64>
   13ce4:	str	r2, [r3, #4]
   13ce8:	pop	{r4, r5, r6, r7, r8, pc}
   13cec:	strdeq	r7, [r2], -r0
   13cf0:	andeq	r7, r2, r0, lsr #3
   13cf4:	strdeq	r7, [r2], -r8
   13cf8:	push	{r4, lr}
   13cfc:	ldr	r3, [pc, #8]	; 13d0c <__assert_fail@plt+0x2e84>
   13d00:	mvn	r2, #0
   13d04:	bl	13830 <__assert_fail@plt+0x29a8>
   13d08:	pop	{r4, pc}
   13d0c:	andeq	r7, r2, r0, lsr #5
   13d10:	push	{r4, lr}
   13d14:	ldr	r3, [pc, #4]	; 13d20 <__assert_fail@plt+0x2e98>
   13d18:	bl	13830 <__assert_fail@plt+0x29a8>
   13d1c:	pop	{r4, pc}
   13d20:	andeq	r7, r2, r0, lsr #5
   13d24:	push	{r4, lr}
   13d28:	mov	r1, r0
   13d2c:	mov	r0, #0
   13d30:	bl	13cf8 <__assert_fail@plt+0x2e70>
   13d34:	pop	{r4, pc}
   13d38:	push	{r4, lr}
   13d3c:	mov	r2, r1
   13d40:	mov	r1, r0
   13d44:	mov	r0, #0
   13d48:	bl	13d10 <__assert_fail@plt+0x2e88>
   13d4c:	pop	{r4, pc}
   13d50:	push	{r4, r5, lr}
   13d54:	sub	sp, sp, #52	; 0x34
   13d58:	mov	r4, r0
   13d5c:	mov	r5, r2
   13d60:	mov	r0, sp
   13d64:	bl	12558 <__assert_fail@plt+0x16d0>
   13d68:	mov	r3, sp
   13d6c:	mvn	r2, #0
   13d70:	mov	r1, r5
   13d74:	mov	r0, r4
   13d78:	bl	13830 <__assert_fail@plt+0x29a8>
   13d7c:	add	sp, sp, #52	; 0x34
   13d80:	pop	{r4, r5, pc}
   13d84:	push	{r4, r5, r6, lr}
   13d88:	sub	sp, sp, #48	; 0x30
   13d8c:	mov	r4, r0
   13d90:	mov	r5, r2
   13d94:	mov	r6, r3
   13d98:	mov	r0, sp
   13d9c:	bl	12558 <__assert_fail@plt+0x16d0>
   13da0:	mov	r3, sp
   13da4:	mov	r2, r6
   13da8:	mov	r1, r5
   13dac:	mov	r0, r4
   13db0:	bl	13830 <__assert_fail@plt+0x29a8>
   13db4:	add	sp, sp, #48	; 0x30
   13db8:	pop	{r4, r5, r6, pc}
   13dbc:	push	{r4, lr}
   13dc0:	mov	r2, r1
   13dc4:	mov	r1, r0
   13dc8:	mov	r0, #0
   13dcc:	bl	13d50 <__assert_fail@plt+0x2ec8>
   13dd0:	pop	{r4, pc}
   13dd4:	push	{r4, lr}
   13dd8:	mov	r3, r2
   13ddc:	mov	r2, r1
   13de0:	mov	r1, r0
   13de4:	mov	r0, #0
   13de8:	bl	13d84 <__assert_fail@plt+0x2efc>
   13dec:	pop	{r4, pc}
   13df0:	push	{r4, r5, r6, lr}
   13df4:	sub	sp, sp, #48	; 0x30
   13df8:	mov	r4, r0
   13dfc:	mov	r5, r1
   13e00:	mov	r6, r2
   13e04:	mov	ip, sp
   13e08:	ldr	lr, [pc, #64]	; 13e50 <__assert_fail@plt+0x2fc8>
   13e0c:	ldm	lr!, {r0, r1, r2, r3}
   13e10:	stmia	ip!, {r0, r1, r2, r3}
   13e14:	ldm	lr!, {r0, r1, r2, r3}
   13e18:	stmia	ip!, {r0, r1, r2, r3}
   13e1c:	ldm	lr, {r0, r1, r2, r3}
   13e20:	stm	ip, {r0, r1, r2, r3}
   13e24:	mov	r2, #1
   13e28:	mov	r1, r6
   13e2c:	mov	r0, sp
   13e30:	bl	13a5c <__assert_fail@plt+0x2bd4>
   13e34:	mov	r3, sp
   13e38:	mov	r2, r5
   13e3c:	mov	r1, r4
   13e40:	mov	r0, #0
   13e44:	bl	13830 <__assert_fail@plt+0x29a8>
   13e48:	add	sp, sp, #48	; 0x30
   13e4c:	pop	{r4, r5, r6, pc}
   13e50:	andeq	r7, r2, r0, lsr #5
   13e54:	push	{r4, lr}
   13e58:	mov	r2, r1
   13e5c:	mvn	r1, #0
   13e60:	bl	13df0 <__assert_fail@plt+0x2f68>
   13e64:	pop	{r4, pc}
   13e68:	push	{r4, lr}
   13e6c:	mov	r1, #58	; 0x3a
   13e70:	bl	13e54 <__assert_fail@plt+0x2fcc>
   13e74:	pop	{r4, pc}
   13e78:	push	{r4, lr}
   13e7c:	mov	r2, #58	; 0x3a
   13e80:	bl	13df0 <__assert_fail@plt+0x2f68>
   13e84:	pop	{r4, pc}
   13e88:	push	{r4, r5, lr}
   13e8c:	sub	sp, sp, #100	; 0x64
   13e90:	mov	r4, r0
   13e94:	mov	r5, r2
   13e98:	mov	r0, sp
   13e9c:	bl	12558 <__assert_fail@plt+0x16d0>
   13ea0:	add	lr, sp, #48	; 0x30
   13ea4:	mov	ip, sp
   13ea8:	ldm	ip!, {r0, r1, r2, r3}
   13eac:	stmia	lr!, {r0, r1, r2, r3}
   13eb0:	ldm	ip!, {r0, r1, r2, r3}
   13eb4:	stmia	lr!, {r0, r1, r2, r3}
   13eb8:	ldm	ip, {r0, r1, r2, r3}
   13ebc:	stm	lr, {r0, r1, r2, r3}
   13ec0:	mov	r2, #1
   13ec4:	mov	r1, #58	; 0x3a
   13ec8:	add	r0, sp, #48	; 0x30
   13ecc:	bl	13a5c <__assert_fail@plt+0x2bd4>
   13ed0:	add	r3, sp, #48	; 0x30
   13ed4:	mvn	r2, #0
   13ed8:	mov	r1, r5
   13edc:	mov	r0, r4
   13ee0:	bl	13830 <__assert_fail@plt+0x29a8>
   13ee4:	add	sp, sp, #100	; 0x64
   13ee8:	pop	{r4, r5, pc}
   13eec:	push	{r4, r5, r6, r7, lr}
   13ef0:	sub	sp, sp, #52	; 0x34
   13ef4:	mov	r4, r0
   13ef8:	mov	r6, r1
   13efc:	mov	r7, r2
   13f00:	mov	r5, r3
   13f04:	mov	ip, sp
   13f08:	ldr	lr, [pc, #64]	; 13f50 <__assert_fail@plt+0x30c8>
   13f0c:	ldm	lr!, {r0, r1, r2, r3}
   13f10:	stmia	ip!, {r0, r1, r2, r3}
   13f14:	ldm	lr!, {r0, r1, r2, r3}
   13f18:	stmia	ip!, {r0, r1, r2, r3}
   13f1c:	ldm	lr, {r0, r1, r2, r3}
   13f20:	stm	ip, {r0, r1, r2, r3}
   13f24:	mov	r2, r7
   13f28:	mov	r1, r6
   13f2c:	mov	r0, sp
   13f30:	bl	13ab8 <__assert_fail@plt+0x2c30>
   13f34:	mov	r3, sp
   13f38:	ldr	r2, [sp, #72]	; 0x48
   13f3c:	mov	r1, r5
   13f40:	mov	r0, r4
   13f44:	bl	13830 <__assert_fail@plt+0x29a8>
   13f48:	add	sp, sp, #52	; 0x34
   13f4c:	pop	{r4, r5, r6, r7, pc}
   13f50:	andeq	r7, r2, r0, lsr #5
   13f54:	push	{lr}		; (str lr, [sp, #-4]!)
   13f58:	sub	sp, sp, #12
   13f5c:	mvn	ip, #0
   13f60:	str	ip, [sp]
   13f64:	bl	13eec <__assert_fail@plt+0x3064>
   13f68:	add	sp, sp, #12
   13f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f70:	push	{r4, lr}
   13f74:	mov	r3, r2
   13f78:	mov	r2, r1
   13f7c:	mov	r1, r0
   13f80:	mov	r0, #0
   13f84:	bl	13f54 <__assert_fail@plt+0x30cc>
   13f88:	pop	{r4, pc}
   13f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   13f90:	sub	sp, sp, #12
   13f94:	str	r3, [sp]
   13f98:	mov	r3, r2
   13f9c:	mov	r2, r1
   13fa0:	mov	r1, r0
   13fa4:	mov	r0, #0
   13fa8:	bl	13eec <__assert_fail@plt+0x3064>
   13fac:	add	sp, sp, #12
   13fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fb4:	push	{r4, lr}
   13fb8:	ldr	r3, [pc, #4]	; 13fc4 <__assert_fail@plt+0x313c>
   13fbc:	bl	13830 <__assert_fail@plt+0x29a8>
   13fc0:	pop	{r4, pc}
   13fc4:	andeq	r7, r2, r0, lsl #2
   13fc8:	push	{r4, lr}
   13fcc:	mov	r2, r1
   13fd0:	mov	r1, r0
   13fd4:	mov	r0, #0
   13fd8:	bl	13fb4 <__assert_fail@plt+0x312c>
   13fdc:	pop	{r4, pc}
   13fe0:	push	{r4, lr}
   13fe4:	mvn	r2, #0
   13fe8:	bl	13fb4 <__assert_fail@plt+0x312c>
   13fec:	pop	{r4, pc}
   13ff0:	push	{r4, lr}
   13ff4:	mov	r1, r0
   13ff8:	mov	r0, #0
   13ffc:	bl	13fe0 <__assert_fail@plt+0x3158>
   14000:	pop	{r4, pc}
   14004:	push	{r4, r5, r6, lr}
   14008:	sub	sp, sp, #32
   1400c:	mov	r4, r0
   14010:	ldr	r5, [sp, #48]	; 0x30
   14014:	ldr	r6, [sp, #52]	; 0x34
   14018:	cmp	r1, #0
   1401c:	beq	140d4 <__assert_fail@plt+0x324c>
   14020:	str	r3, [sp, #4]
   14024:	str	r2, [sp]
   14028:	mov	r3, r1
   1402c:	ldr	r2, [pc, #940]	; 143e0 <__assert_fail@plt+0x3558>
   14030:	mov	r1, #1
   14034:	bl	10de0 <__fprintf_chk@plt>
   14038:	mov	r2, #5
   1403c:	ldr	r1, [pc, #928]	; 143e4 <__assert_fail@plt+0x355c>
   14040:	mov	r0, #0
   14044:	bl	10ccc <dcgettext@plt>
   14048:	ldr	r3, [pc, #920]	; 143e8 <__assert_fail@plt+0x3560>
   1404c:	str	r3, [sp]
   14050:	mov	r3, r0
   14054:	ldr	r2, [pc, #912]	; 143ec <__assert_fail@plt+0x3564>
   14058:	mov	r1, #1
   1405c:	mov	r0, r4
   14060:	bl	10de0 <__fprintf_chk@plt>
   14064:	mov	r1, r4
   14068:	mov	r0, #10
   1406c:	bl	10cc0 <fputc_unlocked@plt>
   14070:	mov	r2, #5
   14074:	ldr	r1, [pc, #884]	; 143f0 <__assert_fail@plt+0x3568>
   14078:	mov	r0, #0
   1407c:	bl	10ccc <dcgettext@plt>
   14080:	ldr	r3, [pc, #876]	; 143f4 <__assert_fail@plt+0x356c>
   14084:	mov	r2, r0
   14088:	mov	r1, #1
   1408c:	mov	r0, r4
   14090:	bl	10de0 <__fprintf_chk@plt>
   14094:	mov	r1, r4
   14098:	mov	r0, #10
   1409c:	bl	10cc0 <fputc_unlocked@plt>
   140a0:	cmp	r6, #9
   140a4:	ldrls	pc, [pc, r6, lsl #2]
   140a8:	b	14378 <__assert_fail@plt+0x34f0>
   140ac:	andeq	r4, r1, r0, lsl r1
   140b0:	andeq	r4, r1, ip, ror #1
   140b4:	andeq	r4, r1, r8, lsl r1
   140b8:	andeq	r4, r1, r8, asr #2
   140bc:	andeq	r4, r1, r0, lsl #3
   140c0:	andeq	r4, r1, r0, asr #3
   140c4:	andeq	r4, r1, r8, lsl #4
   140c8:	andeq	r4, r1, r8, asr r2
   140cc:			; <UNDEFINED> instruction: 0x000142b0
   140d0:	andeq	r4, r1, r0, lsl r3
   140d4:	str	r3, [sp]
   140d8:	mov	r3, r2
   140dc:	ldr	r2, [pc, #788]	; 143f8 <__assert_fail@plt+0x3570>
   140e0:	mov	r1, #1
   140e4:	bl	10de0 <__fprintf_chk@plt>
   140e8:	b	14038 <__assert_fail@plt+0x31b0>
   140ec:	mov	r2, #5
   140f0:	ldr	r1, [pc, #772]	; 143fc <__assert_fail@plt+0x3574>
   140f4:	mov	r0, #0
   140f8:	bl	10ccc <dcgettext@plt>
   140fc:	ldr	r3, [r5]
   14100:	mov	r2, r0
   14104:	mov	r1, #1
   14108:	mov	r0, r4
   1410c:	bl	10de0 <__fprintf_chk@plt>
   14110:	add	sp, sp, #32
   14114:	pop	{r4, r5, r6, pc}
   14118:	mov	r2, #5
   1411c:	ldr	r1, [pc, #732]	; 14400 <__assert_fail@plt+0x3578>
   14120:	mov	r0, #0
   14124:	bl	10ccc <dcgettext@plt>
   14128:	ldr	r3, [r5]
   1412c:	ldr	r2, [r5, #4]
   14130:	str	r2, [sp]
   14134:	mov	r2, r0
   14138:	mov	r1, #1
   1413c:	mov	r0, r4
   14140:	bl	10de0 <__fprintf_chk@plt>
   14144:	b	14110 <__assert_fail@plt+0x3288>
   14148:	mov	r2, #5
   1414c:	ldr	r1, [pc, #688]	; 14404 <__assert_fail@plt+0x357c>
   14150:	mov	r0, #0
   14154:	bl	10ccc <dcgettext@plt>
   14158:	ldr	r3, [r5]
   1415c:	ldr	r2, [r5, #8]
   14160:	str	r2, [sp, #4]
   14164:	ldr	r2, [r5, #4]
   14168:	str	r2, [sp]
   1416c:	mov	r2, r0
   14170:	mov	r1, #1
   14174:	mov	r0, r4
   14178:	bl	10de0 <__fprintf_chk@plt>
   1417c:	b	14110 <__assert_fail@plt+0x3288>
   14180:	mov	r2, #5
   14184:	ldr	r1, [pc, #636]	; 14408 <__assert_fail@plt+0x3580>
   14188:	mov	r0, #0
   1418c:	bl	10ccc <dcgettext@plt>
   14190:	ldr	r3, [r5]
   14194:	ldr	r2, [r5, #12]
   14198:	str	r2, [sp, #8]
   1419c:	ldr	r2, [r5, #8]
   141a0:	str	r2, [sp, #4]
   141a4:	ldr	r2, [r5, #4]
   141a8:	str	r2, [sp]
   141ac:	mov	r2, r0
   141b0:	mov	r1, #1
   141b4:	mov	r0, r4
   141b8:	bl	10de0 <__fprintf_chk@plt>
   141bc:	b	14110 <__assert_fail@plt+0x3288>
   141c0:	mov	r2, #5
   141c4:	ldr	r1, [pc, #576]	; 1440c <__assert_fail@plt+0x3584>
   141c8:	mov	r0, #0
   141cc:	bl	10ccc <dcgettext@plt>
   141d0:	ldr	r3, [r5]
   141d4:	ldr	r2, [r5, #16]
   141d8:	str	r2, [sp, #12]
   141dc:	ldr	r2, [r5, #12]
   141e0:	str	r2, [sp, #8]
   141e4:	ldr	r2, [r5, #8]
   141e8:	str	r2, [sp, #4]
   141ec:	ldr	r2, [r5, #4]
   141f0:	str	r2, [sp]
   141f4:	mov	r2, r0
   141f8:	mov	r1, #1
   141fc:	mov	r0, r4
   14200:	bl	10de0 <__fprintf_chk@plt>
   14204:	b	14110 <__assert_fail@plt+0x3288>
   14208:	mov	r2, #5
   1420c:	ldr	r1, [pc, #508]	; 14410 <__assert_fail@plt+0x3588>
   14210:	mov	r0, #0
   14214:	bl	10ccc <dcgettext@plt>
   14218:	ldr	r3, [r5]
   1421c:	ldr	r2, [r5, #20]
   14220:	str	r2, [sp, #16]
   14224:	ldr	r2, [r5, #16]
   14228:	str	r2, [sp, #12]
   1422c:	ldr	r2, [r5, #12]
   14230:	str	r2, [sp, #8]
   14234:	ldr	r2, [r5, #8]
   14238:	str	r2, [sp, #4]
   1423c:	ldr	r2, [r5, #4]
   14240:	str	r2, [sp]
   14244:	mov	r2, r0
   14248:	mov	r1, #1
   1424c:	mov	r0, r4
   14250:	bl	10de0 <__fprintf_chk@plt>
   14254:	b	14110 <__assert_fail@plt+0x3288>
   14258:	mov	r2, #5
   1425c:	ldr	r1, [pc, #432]	; 14414 <__assert_fail@plt+0x358c>
   14260:	mov	r0, #0
   14264:	bl	10ccc <dcgettext@plt>
   14268:	ldr	r3, [r5]
   1426c:	ldr	r2, [r5, #24]
   14270:	str	r2, [sp, #20]
   14274:	ldr	r2, [r5, #20]
   14278:	str	r2, [sp, #16]
   1427c:	ldr	r2, [r5, #16]
   14280:	str	r2, [sp, #12]
   14284:	ldr	r2, [r5, #12]
   14288:	str	r2, [sp, #8]
   1428c:	ldr	r2, [r5, #8]
   14290:	str	r2, [sp, #4]
   14294:	ldr	r2, [r5, #4]
   14298:	str	r2, [sp]
   1429c:	mov	r2, r0
   142a0:	mov	r1, #1
   142a4:	mov	r0, r4
   142a8:	bl	10de0 <__fprintf_chk@plt>
   142ac:	b	14110 <__assert_fail@plt+0x3288>
   142b0:	mov	r2, #5
   142b4:	ldr	r1, [pc, #348]	; 14418 <__assert_fail@plt+0x3590>
   142b8:	mov	r0, #0
   142bc:	bl	10ccc <dcgettext@plt>
   142c0:	ldr	r3, [r5]
   142c4:	ldr	r2, [r5, #28]
   142c8:	str	r2, [sp, #24]
   142cc:	ldr	r2, [r5, #24]
   142d0:	str	r2, [sp, #20]
   142d4:	ldr	r2, [r5, #20]
   142d8:	str	r2, [sp, #16]
   142dc:	ldr	r2, [r5, #16]
   142e0:	str	r2, [sp, #12]
   142e4:	ldr	r2, [r5, #12]
   142e8:	str	r2, [sp, #8]
   142ec:	ldr	r2, [r5, #8]
   142f0:	str	r2, [sp, #4]
   142f4:	ldr	r2, [r5, #4]
   142f8:	str	r2, [sp]
   142fc:	mov	r2, r0
   14300:	mov	r1, #1
   14304:	mov	r0, r4
   14308:	bl	10de0 <__fprintf_chk@plt>
   1430c:	b	14110 <__assert_fail@plt+0x3288>
   14310:	mov	r2, #5
   14314:	ldr	r1, [pc, #256]	; 1441c <__assert_fail@plt+0x3594>
   14318:	mov	r0, #0
   1431c:	bl	10ccc <dcgettext@plt>
   14320:	ldr	r3, [r5]
   14324:	ldr	r2, [r5, #32]
   14328:	str	r2, [sp, #28]
   1432c:	ldr	r2, [r5, #28]
   14330:	str	r2, [sp, #24]
   14334:	ldr	r2, [r5, #24]
   14338:	str	r2, [sp, #20]
   1433c:	ldr	r2, [r5, #20]
   14340:	str	r2, [sp, #16]
   14344:	ldr	r2, [r5, #16]
   14348:	str	r2, [sp, #12]
   1434c:	ldr	r2, [r5, #12]
   14350:	str	r2, [sp, #8]
   14354:	ldr	r2, [r5, #8]
   14358:	str	r2, [sp, #4]
   1435c:	ldr	r2, [r5, #4]
   14360:	str	r2, [sp]
   14364:	mov	r2, r0
   14368:	mov	r1, #1
   1436c:	mov	r0, r4
   14370:	bl	10de0 <__fprintf_chk@plt>
   14374:	b	14110 <__assert_fail@plt+0x3288>
   14378:	mov	r2, #5
   1437c:	ldr	r1, [pc, #156]	; 14420 <__assert_fail@plt+0x3598>
   14380:	mov	r0, #0
   14384:	bl	10ccc <dcgettext@plt>
   14388:	ldr	r3, [r5]
   1438c:	ldr	r2, [r5, #32]
   14390:	str	r2, [sp, #28]
   14394:	ldr	r2, [r5, #28]
   14398:	str	r2, [sp, #24]
   1439c:	ldr	r2, [r5, #24]
   143a0:	str	r2, [sp, #20]
   143a4:	ldr	r2, [r5, #20]
   143a8:	str	r2, [sp, #16]
   143ac:	ldr	r2, [r5, #16]
   143b0:	str	r2, [sp, #12]
   143b4:	ldr	r2, [r5, #12]
   143b8:	str	r2, [sp, #8]
   143bc:	ldr	r2, [r5, #8]
   143c0:	str	r2, [sp, #4]
   143c4:	ldr	r2, [r5, #4]
   143c8:	str	r2, [sp]
   143cc:	mov	r2, r0
   143d0:	mov	r1, #1
   143d4:	mov	r0, r4
   143d8:	bl	10de0 <__fprintf_chk@plt>
   143dc:	b	14110 <__assert_fail@plt+0x3288>
   143e0:	andeq	r5, r1, r0, ror #27
   143e4:	strdeq	r5, [r1], -r4
   143e8:	andeq	r0, r0, r6, ror #15
   143ec:	andeq	r6, r1, ip, asr #1
   143f0:	strdeq	r5, [r1], -r8
   143f4:	andeq	r5, r1, r4, lsr #29
   143f8:	andeq	r5, r1, ip, ror #27
   143fc:	andeq	r5, r1, r8, asr #29
   14400:	ldrdeq	r5, [r1], -r8
   14404:	strdeq	r5, [r1], -r0
   14408:	andeq	r5, r1, ip, lsl #30
   1440c:	andeq	r5, r1, ip, lsr #30
   14410:	andeq	r5, r1, r0, asr pc
   14414:	andeq	r5, r1, r8, ror pc
   14418:	andeq	r5, r1, r4, lsr #31
   1441c:	ldrdeq	r5, [r1], -r4
   14420:	andeq	r6, r1, r8
   14424:	push	{r4, r5, lr}
   14428:	sub	sp, sp, #12
   1442c:	ldr	r5, [sp, #24]
   14430:	ldr	ip, [r5]
   14434:	cmp	ip, #0
   14438:	beq	14468 <__assert_fail@plt+0x35e0>
   1443c:	mov	lr, r5
   14440:	mov	ip, #0
   14444:	add	ip, ip, #1
   14448:	ldr	r4, [lr, #4]!
   1444c:	cmp	r4, #0
   14450:	bne	14444 <__assert_fail@plt+0x35bc>
   14454:	str	ip, [sp, #4]
   14458:	str	r5, [sp]
   1445c:	bl	14004 <__assert_fail@plt+0x317c>
   14460:	add	sp, sp, #12
   14464:	pop	{r4, r5, pc}
   14468:	mov	ip, #0
   1446c:	b	14454 <__assert_fail@plt+0x35cc>
   14470:	push	{r4, r5, lr}
   14474:	sub	sp, sp, #52	; 0x34
   14478:	ldr	r4, [sp, #64]	; 0x40
   1447c:	sub	r4, r4, #4
   14480:	add	r5, sp, #4
   14484:	mov	ip, #0
   14488:	ldr	lr, [r4, #4]!
   1448c:	str	lr, [r5, #4]!
   14490:	cmp	lr, #0
   14494:	beq	144a4 <__assert_fail@plt+0x361c>
   14498:	add	ip, ip, #1
   1449c:	cmp	ip, #10
   144a0:	bne	14488 <__assert_fail@plt+0x3600>
   144a4:	str	ip, [sp, #4]
   144a8:	add	ip, sp, #8
   144ac:	str	ip, [sp]
   144b0:	bl	14004 <__assert_fail@plt+0x317c>
   144b4:	add	sp, sp, #52	; 0x34
   144b8:	pop	{r4, r5, pc}
   144bc:	push	{r3}		; (str r3, [sp, #-4]!)
   144c0:	push	{lr}		; (str lr, [sp, #-4]!)
   144c4:	sub	sp, sp, #16
   144c8:	add	r3, sp, #24
   144cc:	str	r3, [sp, #12]
   144d0:	str	r3, [sp]
   144d4:	ldr	r3, [sp, #20]
   144d8:	bl	14470 <__assert_fail@plt+0x35e8>
   144dc:	add	sp, sp, #16
   144e0:	pop	{lr}		; (ldr lr, [sp], #4)
   144e4:	add	sp, sp, #4
   144e8:	bx	lr
   144ec:	push	{r4, lr}
   144f0:	ldr	r3, [pc, #112]	; 14568 <__assert_fail@plt+0x36e0>
   144f4:	ldr	r1, [r3]
   144f8:	mov	r0, #10
   144fc:	bl	10cc0 <fputc_unlocked@plt>
   14500:	mov	r2, #5
   14504:	ldr	r1, [pc, #96]	; 1456c <__assert_fail@plt+0x36e4>
   14508:	mov	r0, #0
   1450c:	bl	10ccc <dcgettext@plt>
   14510:	ldr	r2, [pc, #88]	; 14570 <__assert_fail@plt+0x36e8>
   14514:	mov	r1, r0
   14518:	mov	r0, #1
   1451c:	bl	10dc8 <__printf_chk@plt>
   14520:	mov	r2, #5
   14524:	ldr	r1, [pc, #72]	; 14574 <__assert_fail@plt+0x36ec>
   14528:	mov	r0, #0
   1452c:	bl	10ccc <dcgettext@plt>
   14530:	ldr	r3, [pc, #64]	; 14578 <__assert_fail@plt+0x36f0>
   14534:	ldr	r2, [pc, #64]	; 1457c <__assert_fail@plt+0x36f4>
   14538:	mov	r1, r0
   1453c:	mov	r0, #1
   14540:	bl	10dc8 <__printf_chk@plt>
   14544:	mov	r2, #5
   14548:	ldr	r1, [pc, #48]	; 14580 <__assert_fail@plt+0x36f8>
   1454c:	mov	r0, #0
   14550:	bl	10ccc <dcgettext@plt>
   14554:	ldr	r2, [pc, #40]	; 14584 <__assert_fail@plt+0x36fc>
   14558:	mov	r1, r0
   1455c:	mov	r0, #1
   14560:	bl	10dc8 <__printf_chk@plt>
   14564:	pop	{r4, pc}
   14568:	andeq	r7, r2, ip, asr #2
   1456c:	andeq	r6, r1, r4, asr #32
   14570:	andeq	r6, r1, r8, asr r0
   14574:	andeq	r6, r1, r0, ror r0
   14578:	muleq	r1, r4, r7
   1457c:			; <UNDEFINED> instruction: 0x000157bc
   14580:	andeq	r6, r1, r4, lsl #1
   14584:	andeq	r6, r1, ip, lsr #1
   14588:	push	{r4, lr}
   1458c:	bl	14bbc <__assert_fail@plt+0x3d34>
   14590:	cmp	r0, #0
   14594:	popne	{r4, pc}
   14598:	bl	14b2c <__assert_fail@plt+0x3ca4>
   1459c:	push	{r4, lr}
   145a0:	bl	14bbc <__assert_fail@plt+0x3d34>
   145a4:	cmp	r0, #0
   145a8:	popne	{r4, pc}
   145ac:	bl	14b2c <__assert_fail@plt+0x3ca4>
   145b0:	push	{r4, lr}
   145b4:	bl	14588 <__assert_fail@plt+0x3700>
   145b8:	pop	{r4, pc}
   145bc:	push	{r4, r5, r6, lr}
   145c0:	mov	r5, r0
   145c4:	mov	r4, r1
   145c8:	bl	14bec <__assert_fail@plt+0x3d64>
   145cc:	cmp	r0, #0
   145d0:	popne	{r4, r5, r6, pc}
   145d4:	adds	r4, r4, #0
   145d8:	movne	r4, #1
   145dc:	cmp	r5, #0
   145e0:	orreq	r4, r4, #1
   145e4:	cmp	r4, #0
   145e8:	popeq	{r4, r5, r6, pc}
   145ec:	bl	14b2c <__assert_fail@plt+0x3ca4>
   145f0:	push	{r4, lr}
   145f4:	cmp	r1, #0
   145f8:	orreq	r1, r1, #1
   145fc:	bl	14bec <__assert_fail@plt+0x3d64>
   14600:	cmp	r0, #0
   14604:	popne	{r4, pc}
   14608:	bl	14b2c <__assert_fail@plt+0x3ca4>
   1460c:	push	{r4, r5, r6, lr}
   14610:	mov	r6, r0
   14614:	mov	r5, r1
   14618:	mov	r4, r2
   1461c:	bl	14d40 <__assert_fail@plt+0x3eb8>
   14620:	cmp	r0, #0
   14624:	popne	{r4, r5, r6, pc}
   14628:	cmp	r6, #0
   1462c:	beq	1463c <__assert_fail@plt+0x37b4>
   14630:	cmp	r5, #0
   14634:	cmpne	r4, #0
   14638:	popeq	{r4, r5, r6, pc}
   1463c:	bl	14b2c <__assert_fail@plt+0x3ca4>
   14640:	push	{r4, lr}
   14644:	bl	1460c <__assert_fail@plt+0x3784>
   14648:	pop	{r4, pc}
   1464c:	push	{r4, lr}
   14650:	mov	ip, r1
   14654:	mov	r3, r2
   14658:	cmp	r2, #0
   1465c:	cmpne	r1, #0
   14660:	moveq	r3, #1
   14664:	moveq	ip, r3
   14668:	mov	r2, r3
   1466c:	mov	r1, ip
   14670:	bl	14d40 <__assert_fail@plt+0x3eb8>
   14674:	cmp	r0, #0
   14678:	popne	{r4, pc}
   1467c:	bl	14b2c <__assert_fail@plt+0x3ca4>
   14680:	push	{r4, lr}
   14684:	mov	r2, r1
   14688:	mov	r1, r0
   1468c:	mov	r0, #0
   14690:	bl	1460c <__assert_fail@plt+0x3784>
   14694:	pop	{r4, pc}
   14698:	push	{r4, lr}
   1469c:	mov	r2, r1
   146a0:	mov	r1, r0
   146a4:	mov	r0, #0
   146a8:	bl	1464c <__assert_fail@plt+0x37c4>
   146ac:	pop	{r4, pc}
   146b0:	push	{r4, r5, r6, r7, r8, lr}
   146b4:	mov	r5, r1
   146b8:	mov	r6, r2
   146bc:	ldr	r4, [r1]
   146c0:	subs	r7, r0, #0
   146c4:	beq	146e0 <__assert_fail@plt+0x3858>
   146c8:	lsr	r2, r4, #1
   146cc:	add	r3, r2, #1
   146d0:	mvn	r3, r3
   146d4:	cmp	r4, r3
   146d8:	bls	14704 <__assert_fail@plt+0x387c>
   146dc:	bl	14b2c <__assert_fail@plt+0x3ca4>
   146e0:	cmp	r4, #0
   146e4:	bne	1470c <__assert_fail@plt+0x3884>
   146e8:	mov	r1, r2
   146ec:	mov	r0, #64	; 0x40
   146f0:	bl	14e94 <__assert_fail@plt+0x400c>
   146f4:	cmp	r0, #0
   146f8:	movne	r4, r0
   146fc:	addeq	r4, r0, #1
   14700:	b	1470c <__assert_fail@plt+0x3884>
   14704:	add	r4, r4, #1
   14708:	add	r4, r4, r2
   1470c:	mov	r2, r6
   14710:	mov	r1, r4
   14714:	mov	r0, r7
   14718:	bl	1460c <__assert_fail@plt+0x3784>
   1471c:	str	r4, [r5]
   14720:	pop	{r4, r5, r6, r7, r8, pc}
   14724:	push	{r4, lr}
   14728:	mov	r2, #1
   1472c:	bl	146b0 <__assert_fail@plt+0x3828>
   14730:	pop	{r4, pc}
   14734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14738:	sub	sp, sp, #12
   1473c:	mov	fp, r0
   14740:	mov	sl, r1
   14744:	mov	r9, r2
   14748:	mov	r7, r3
   1474c:	ldr	r6, [sp, #48]	; 0x30
   14750:	ldr	r5, [r1]
   14754:	asrs	r4, r5, #1
   14758:	bmi	148b4 <__assert_fail@plt+0x3a2c>
   1475c:	cmp	r5, #0
   14760:	blt	148c8 <__assert_fail@plt+0x3a40>
   14764:	mvn	r3, #-2147483648	; 0x80000000
   14768:	sub	r3, r3, r4
   1476c:	cmp	r5, r3
   14770:	movle	r3, #0
   14774:	movgt	r3, #1
   14778:	cmp	r3, #0
   1477c:	addeq	r4, r4, r5
   14780:	mvnne	r4, #-2147483648	; 0x80000000
   14784:	mvn	r8, r7
   14788:	lsr	r8, r8, #31
   1478c:	cmp	r7, r4
   14790:	movge	r3, #0
   14794:	andlt	r3, r8, #1
   14798:	cmp	r3, #0
   1479c:	movne	r4, r7
   147a0:	cmp	r6, #0
   147a4:	blt	148dc <__assert_fail@plt+0x3a54>
   147a8:	cmp	r6, #0
   147ac:	beq	14988 <__assert_fail@plt+0x3b00>
   147b0:	cmp	r4, #0
   147b4:	blt	14938 <__assert_fail@plt+0x3ab0>
   147b8:	mov	r1, r6
   147bc:	mvn	r0, #-2147483648	; 0x80000000
   147c0:	bl	150a0 <__assert_fail@plt+0x4218>
   147c4:	cmp	r0, r4
   147c8:	movge	r0, #0
   147cc:	movlt	r0, #1
   147d0:	cmp	r0, #0
   147d4:	mvnne	r3, #-2147483648	; 0x80000000
   147d8:	strne	r3, [sp, #4]
   147dc:	beq	14970 <__assert_fail@plt+0x3ae8>
   147e0:	mov	r1, r6
   147e4:	ldr	r0, [sp, #4]
   147e8:	bl	150a0 <__assert_fail@plt+0x4218>
   147ec:	mov	r4, r0
   147f0:	mov	r1, r6
   147f4:	ldr	r0, [sp, #4]
   147f8:	bl	152c0 <__assert_fail@plt+0x4438>
   147fc:	ldr	r3, [sp, #4]
   14800:	sub	r1, r3, r1
   14804:	cmp	fp, #0
   14808:	moveq	r3, #0
   1480c:	streq	r3, [sl]
   14810:	sub	r3, r4, r5
   14814:	cmp	r3, r9
   14818:	bge	148a0 <__assert_fail@plt+0x3a18>
   1481c:	cmp	r9, #0
   14820:	blt	14994 <__assert_fail@plt+0x3b0c>
   14824:	cmp	r5, #0
   14828:	blt	149a8 <__assert_fail@plt+0x3b20>
   1482c:	mvn	r3, #-2147483648	; 0x80000000
   14830:	sub	r3, r3, r9
   14834:	cmp	r5, r3
   14838:	movle	r3, #0
   1483c:	movgt	r3, #1
   14840:	cmp	r3, #0
   14844:	bne	14a50 <__assert_fail@plt+0x3bc8>
   14848:	add	r5, r5, r9
   1484c:	mov	r4, r5
   14850:	cmp	r7, r5
   14854:	movge	r7, #0
   14858:	andlt	r7, r8, #1
   1485c:	cmp	r7, #0
   14860:	bne	14a50 <__assert_fail@plt+0x3bc8>
   14864:	cmp	r6, #0
   14868:	blt	149bc <__assert_fail@plt+0x3b34>
   1486c:	cmp	r6, #0
   14870:	beq	1489c <__assert_fail@plt+0x3a14>
   14874:	cmp	r5, #0
   14878:	blt	14a18 <__assert_fail@plt+0x3b90>
   1487c:	mov	r1, r6
   14880:	mvn	r0, #-2147483648	; 0x80000000
   14884:	bl	150a0 <__assert_fail@plt+0x4218>
   14888:	cmp	r5, r0
   1488c:	movle	r0, #0
   14890:	movgt	r0, #1
   14894:	cmp	r0, #0
   14898:	bne	14a50 <__assert_fail@plt+0x3bc8>
   1489c:	mul	r1, r5, r6
   148a0:	mov	r0, fp
   148a4:	bl	145bc <__assert_fail@plt+0x3734>
   148a8:	str	r4, [sl]
   148ac:	add	sp, sp, #12
   148b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148b4:	rsb	r3, r4, #-2147483648	; 0x80000000
   148b8:	cmp	r5, r3
   148bc:	movge	r3, #0
   148c0:	movlt	r3, #1
   148c4:	b	14778 <__assert_fail@plt+0x38f0>
   148c8:	rsb	r3, r5, #-2147483648	; 0x80000000
   148cc:	cmp	r4, r3
   148d0:	movge	r3, #0
   148d4:	movlt	r3, #1
   148d8:	b	14778 <__assert_fail@plt+0x38f0>
   148dc:	cmp	r4, #0
   148e0:	blt	14908 <__assert_fail@plt+0x3a80>
   148e4:	cmn	r6, #1
   148e8:	beq	14924 <__assert_fail@plt+0x3a9c>
   148ec:	mov	r1, r6
   148f0:	mov	r0, #-2147483648	; 0x80000000
   148f4:	bl	150a0 <__assert_fail@plt+0x4218>
   148f8:	cmp	r0, r4
   148fc:	movge	r0, #0
   14900:	movlt	r0, #1
   14904:	b	147d0 <__assert_fail@plt+0x3948>
   14908:	mov	r1, r6
   1490c:	mvn	r0, #-2147483648	; 0x80000000
   14910:	bl	150a0 <__assert_fail@plt+0x4218>
   14914:	cmp	r0, r4
   14918:	movle	r0, #0
   1491c:	movgt	r0, #1
   14920:	b	147d0 <__assert_fail@plt+0x3948>
   14924:	add	r0, r4, #-2147483648	; 0x80000000
   14928:	cmp	r0, #0
   1492c:	movle	r0, #0
   14930:	movgt	r0, #1
   14934:	b	147d0 <__assert_fail@plt+0x3948>
   14938:	cmn	r4, #1
   1493c:	beq	1495c <__assert_fail@plt+0x3ad4>
   14940:	mov	r1, r4
   14944:	mov	r0, #-2147483648	; 0x80000000
   14948:	bl	150a0 <__assert_fail@plt+0x4218>
   1494c:	cmp	r6, r0
   14950:	movle	r0, #0
   14954:	movgt	r0, #1
   14958:	b	147d0 <__assert_fail@plt+0x3948>
   1495c:	add	r0, r6, #-2147483648	; 0x80000000
   14960:	cmp	r0, #0
   14964:	movle	r0, #0
   14968:	movgt	r0, #1
   1496c:	b	147d0 <__assert_fail@plt+0x3948>
   14970:	mul	r1, r6, r4
   14974:	cmp	r1, #63	; 0x3f
   14978:	movle	r3, #64	; 0x40
   1497c:	strle	r3, [sp, #4]
   14980:	bgt	14804 <__assert_fail@plt+0x397c>
   14984:	b	147e0 <__assert_fail@plt+0x3958>
   14988:	mov	r3, #64	; 0x40
   1498c:	str	r3, [sp, #4]
   14990:	b	147e0 <__assert_fail@plt+0x3958>
   14994:	rsb	r3, r9, #-2147483648	; 0x80000000
   14998:	cmp	r5, r3
   1499c:	movge	r3, #0
   149a0:	movlt	r3, #1
   149a4:	b	14840 <__assert_fail@plt+0x39b8>
   149a8:	rsb	r3, r5, #-2147483648	; 0x80000000
   149ac:	cmp	r9, r3
   149b0:	movge	r3, #0
   149b4:	movlt	r3, #1
   149b8:	b	14840 <__assert_fail@plt+0x39b8>
   149bc:	cmp	r5, #0
   149c0:	blt	149e8 <__assert_fail@plt+0x3b60>
   149c4:	cmn	r6, #1
   149c8:	beq	14a04 <__assert_fail@plt+0x3b7c>
   149cc:	mov	r1, r6
   149d0:	mov	r0, #-2147483648	; 0x80000000
   149d4:	bl	150a0 <__assert_fail@plt+0x4218>
   149d8:	cmp	r5, r0
   149dc:	movle	r0, #0
   149e0:	movgt	r0, #1
   149e4:	b	14894 <__assert_fail@plt+0x3a0c>
   149e8:	mov	r1, r6
   149ec:	mvn	r0, #-2147483648	; 0x80000000
   149f0:	bl	150a0 <__assert_fail@plt+0x4218>
   149f4:	cmp	r5, r0
   149f8:	movge	r0, #0
   149fc:	movlt	r0, #1
   14a00:	b	14894 <__assert_fail@plt+0x3a0c>
   14a04:	add	r0, r5, #-2147483648	; 0x80000000
   14a08:	cmp	r0, #0
   14a0c:	movle	r0, #0
   14a10:	movgt	r0, #1
   14a14:	b	14894 <__assert_fail@plt+0x3a0c>
   14a18:	cmn	r5, #1
   14a1c:	beq	14a3c <__assert_fail@plt+0x3bb4>
   14a20:	mov	r1, r5
   14a24:	mov	r0, #-2147483648	; 0x80000000
   14a28:	bl	150a0 <__assert_fail@plt+0x4218>
   14a2c:	cmp	r6, r0
   14a30:	movle	r0, #0
   14a34:	movgt	r0, #1
   14a38:	b	14894 <__assert_fail@plt+0x3a0c>
   14a3c:	add	r0, r6, #-2147483648	; 0x80000000
   14a40:	cmp	r0, #0
   14a44:	movle	r0, #0
   14a48:	movgt	r0, #1
   14a4c:	b	14894 <__assert_fail@plt+0x3a0c>
   14a50:	bl	14b2c <__assert_fail@plt+0x3ca4>
   14a54:	push	{r4, lr}
   14a58:	bl	14b6c <__assert_fail@plt+0x3ce4>
   14a5c:	cmp	r0, #0
   14a60:	popne	{r4, pc}
   14a64:	bl	14b2c <__assert_fail@plt+0x3ca4>
   14a68:	push	{r4, lr}
   14a6c:	mov	r1, #1
   14a70:	bl	14a54 <__assert_fail@plt+0x3bcc>
   14a74:	pop	{r4, pc}
   14a78:	push	{r4, lr}
   14a7c:	bl	14b6c <__assert_fail@plt+0x3ce4>
   14a80:	cmp	r0, #0
   14a84:	popne	{r4, pc}
   14a88:	bl	14b2c <__assert_fail@plt+0x3ca4>
   14a8c:	push	{r4, lr}
   14a90:	mov	r1, #1
   14a94:	bl	14a78 <__assert_fail@plt+0x3bf0>
   14a98:	pop	{r4, pc}
   14a9c:	push	{r4, r5, r6, lr}
   14aa0:	mov	r5, r0
   14aa4:	mov	r4, r1
   14aa8:	mov	r0, r1
   14aac:	bl	14588 <__assert_fail@plt+0x3700>
   14ab0:	mov	r2, r4
   14ab4:	mov	r1, r5
   14ab8:	bl	10c9c <memcpy@plt>
   14abc:	pop	{r4, r5, r6, pc}
   14ac0:	push	{r4, r5, r6, lr}
   14ac4:	mov	r5, r0
   14ac8:	mov	r4, r1
   14acc:	mov	r0, r1
   14ad0:	bl	1459c <__assert_fail@plt+0x3714>
   14ad4:	mov	r2, r4
   14ad8:	mov	r1, r5
   14adc:	bl	10c9c <memcpy@plt>
   14ae0:	pop	{r4, r5, r6, pc}
   14ae4:	push	{r4, r5, r6, lr}
   14ae8:	mov	r5, r0
   14aec:	mov	r4, r1
   14af0:	add	r0, r1, #1
   14af4:	bl	1459c <__assert_fail@plt+0x3714>
   14af8:	mov	r2, #0
   14afc:	strb	r2, [r0, r4]
   14b00:	mov	r2, r4
   14b04:	mov	r1, r5
   14b08:	bl	10c9c <memcpy@plt>
   14b0c:	pop	{r4, r5, r6, pc}
   14b10:	push	{r4, lr}
   14b14:	mov	r4, r0
   14b18:	bl	10d98 <strlen@plt>
   14b1c:	add	r1, r0, #1
   14b20:	mov	r0, r4
   14b24:	bl	14a9c <__assert_fail@plt+0x3c14>
   14b28:	pop	{r4, pc}
   14b2c:	push	{r4, lr}
   14b30:	ldr	r3, [pc, #40]	; 14b60 <__assert_fail@plt+0x3cd8>
   14b34:	ldr	r4, [r3]
   14b38:	mov	r2, #5
   14b3c:	ldr	r1, [pc, #32]	; 14b64 <__assert_fail@plt+0x3cdc>
   14b40:	mov	r0, #0
   14b44:	bl	10ccc <dcgettext@plt>
   14b48:	mov	r3, r0
   14b4c:	ldr	r2, [pc, #20]	; 14b68 <__assert_fail@plt+0x3ce0>
   14b50:	mov	r1, #0
   14b54:	mov	r0, r4
   14b58:	bl	10d38 <error@plt>
   14b5c:	bl	10e70 <abort@plt>
   14b60:	andeq	r7, r2, ip, ror #1
   14b64:	strdeq	r6, [r1], -ip
   14b68:	andeq	r5, r1, r4, asr #20
   14b6c:	push	{r4, lr}
   14b70:	mov	r2, r0
   14b74:	mov	r3, r1
   14b78:	cmp	r1, #0
   14b7c:	cmpne	r0, #0
   14b80:	moveq	r3, #1
   14b84:	moveq	r2, r3
   14b88:	umull	r0, r1, r2, r3
   14b8c:	cmp	r0, #0
   14b90:	cmpge	r1, #0
   14b94:	bne	14ba8 <__assert_fail@plt+0x3d20>
   14b98:	mov	r1, r3
   14b9c:	mov	r0, r2
   14ba0:	bl	10c3c <calloc@plt>
   14ba4:	pop	{r4, pc}
   14ba8:	bl	10da4 <__errno_location@plt>
   14bac:	mov	r3, #12
   14bb0:	str	r3, [r0]
   14bb4:	mov	r0, #0
   14bb8:	pop	{r4, pc}
   14bbc:	push	{r4, lr}
   14bc0:	cmp	r0, #0
   14bc4:	moveq	r0, #1
   14bc8:	cmp	r0, #0
   14bcc:	blt	14bd8 <__assert_fail@plt+0x3d50>
   14bd0:	bl	10d44 <malloc@plt>
   14bd4:	pop	{r4, pc}
   14bd8:	bl	10da4 <__errno_location@plt>
   14bdc:	mov	r3, #12
   14be0:	str	r3, [r0]
   14be4:	mov	r0, #0
   14be8:	pop	{r4, pc}
   14bec:	push	{r4, lr}
   14bf0:	cmp	r0, #0
   14bf4:	beq	14c10 <__assert_fail@plt+0x3d88>
   14bf8:	cmp	r1, #0
   14bfc:	beq	14c1c <__assert_fail@plt+0x3d94>
   14c00:	cmp	r1, #0
   14c04:	blt	14c28 <__assert_fail@plt+0x3da0>
   14c08:	bl	10cd8 <realloc@plt>
   14c0c:	pop	{r4, pc}
   14c10:	mov	r0, r1
   14c14:	bl	14bbc <__assert_fail@plt+0x3d34>
   14c18:	pop	{r4, pc}
   14c1c:	bl	123a0 <__assert_fail@plt+0x1518>
   14c20:	mov	r0, #0
   14c24:	pop	{r4, pc}
   14c28:	bl	10da4 <__errno_location@plt>
   14c2c:	mov	r3, #12
   14c30:	str	r3, [r0]
   14c34:	mov	r0, #0
   14c38:	pop	{r4, pc}
   14c3c:	push	{r4, r5, r6, lr}
   14c40:	mov	r5, r0
   14c44:	bl	10d20 <__fpending@plt>
   14c48:	mov	r6, r0
   14c4c:	ldr	r4, [r5]
   14c50:	and	r4, r4, #32
   14c54:	mov	r0, r5
   14c58:	bl	12294 <__assert_fail@plt+0x140c>
   14c5c:	cmp	r4, #0
   14c60:	bne	14c88 <__assert_fail@plt+0x3e00>
   14c64:	cmp	r0, #0
   14c68:	popeq	{r4, r5, r6, pc}
   14c6c:	cmp	r6, #0
   14c70:	bne	14ca4 <__assert_fail@plt+0x3e1c>
   14c74:	bl	10da4 <__errno_location@plt>
   14c78:	ldr	r0, [r0]
   14c7c:	subs	r0, r0, #9
   14c80:	mvnne	r0, #0
   14c84:	pop	{r4, r5, r6, pc}
   14c88:	cmp	r0, #0
   14c8c:	bne	14cac <__assert_fail@plt+0x3e24>
   14c90:	bl	10da4 <__errno_location@plt>
   14c94:	mov	r3, #0
   14c98:	str	r3, [r0]
   14c9c:	mvn	r0, #0
   14ca0:	pop	{r4, r5, r6, pc}
   14ca4:	mvn	r0, #0
   14ca8:	pop	{r4, r5, r6, pc}
   14cac:	mvn	r0, #0
   14cb0:	pop	{r4, r5, r6, pc}
   14cb4:	push	{r4, lr}
   14cb8:	mov	r0, #14
   14cbc:	bl	10e34 <nl_langinfo@plt>
   14cc0:	cmp	r0, #0
   14cc4:	beq	14cdc <__assert_fail@plt+0x3e54>
   14cc8:	ldrb	r2, [r0]
   14ccc:	ldr	r3, [pc, #16]	; 14ce4 <__assert_fail@plt+0x3e5c>
   14cd0:	cmp	r2, #0
   14cd4:	moveq	r0, r3
   14cd8:	pop	{r4, pc}
   14cdc:	ldr	r0, [pc]	; 14ce4 <__assert_fail@plt+0x3e5c>
   14ce0:	pop	{r4, pc}
   14ce4:	andeq	r6, r1, r0, lsl r1
   14ce8:	push	{r4, r5, r6, r7, lr}
   14cec:	sub	sp, sp, #12
   14cf0:	mov	r7, r1
   14cf4:	mov	r5, r2
   14cf8:	subs	r6, r0, #0
   14cfc:	addeq	r6, sp, #4
   14d00:	mov	r0, r6
   14d04:	bl	10d2c <mbrtowc@plt>
   14d08:	mov	r4, r0
   14d0c:	cmp	r5, #0
   14d10:	cmnne	r0, #3
   14d14:	bhi	14d24 <__assert_fail@plt+0x3e9c>
   14d18:	mov	r0, r4
   14d1c:	add	sp, sp, #12
   14d20:	pop	{r4, r5, r6, r7, pc}
   14d24:	mov	r0, #0
   14d28:	bl	14d8c <__assert_fail@plt+0x3f04>
   14d2c:	cmp	r0, #0
   14d30:	ldrbeq	r3, [r7]
   14d34:	streq	r3, [r6]
   14d38:	moveq	r4, #1
   14d3c:	b	14d18 <__assert_fail@plt+0x3e90>
   14d40:	push	{r4, r5, r6, lr}
   14d44:	mov	r6, r0
   14d48:	mov	r5, r1
   14d4c:	subs	r4, r2, #0
   14d50:	beq	14d7c <__assert_fail@plt+0x3ef4>
   14d54:	mov	r1, r4
   14d58:	mvn	r0, #0
   14d5c:	bl	14e94 <__assert_fail@plt+0x400c>
   14d60:	cmp	r0, r5
   14d64:	bcs	14d7c <__assert_fail@plt+0x3ef4>
   14d68:	bl	10da4 <__errno_location@plt>
   14d6c:	mov	r3, #12
   14d70:	str	r3, [r0]
   14d74:	mov	r0, #0
   14d78:	pop	{r4, r5, r6, pc}
   14d7c:	mul	r1, r5, r4
   14d80:	mov	r0, r6
   14d84:	bl	14bec <__assert_fail@plt+0x3d64>
   14d88:	pop	{r4, r5, r6, pc}
   14d8c:	push	{lr}		; (str lr, [sp, #-4]!)
   14d90:	sub	sp, sp, #268	; 0x10c
   14d94:	ldr	r2, [pc, #68]	; 14de0 <__assert_fail@plt+0x3f58>
   14d98:	add	r1, sp, #4
   14d9c:	bl	14dec <__assert_fail@plt+0x3f64>
   14da0:	cmp	r0, #0
   14da4:	movne	r0, #0
   14da8:	bne	14dd8 <__assert_fail@plt+0x3f50>
   14dac:	ldr	r1, [pc, #48]	; 14de4 <__assert_fail@plt+0x3f5c>
   14db0:	add	r0, sp, #4
   14db4:	bl	10c60 <strcmp@plt>
   14db8:	cmp	r0, #0
   14dbc:	moveq	r0, #0
   14dc0:	beq	14dd8 <__assert_fail@plt+0x3f50>
   14dc4:	ldr	r1, [pc, #28]	; 14de8 <__assert_fail@plt+0x3f60>
   14dc8:	add	r0, sp, #4
   14dcc:	bl	10c60 <strcmp@plt>
   14dd0:	adds	r0, r0, #0
   14dd4:	movne	r0, #1
   14dd8:	add	sp, sp, #268	; 0x10c
   14ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   14de0:	andeq	r0, r0, r1, lsl #2
   14de4:	andeq	r6, r1, r8, lsl r1
   14de8:	andeq	r6, r1, ip, lsl r1
   14dec:	push	{r4, r5, r6, lr}
   14df0:	mov	r6, r1
   14df4:	mov	r4, r2
   14df8:	mov	r1, #0
   14dfc:	bl	10e1c <setlocale@plt>
   14e00:	subs	r5, r0, #0
   14e04:	beq	14e28 <__assert_fail@plt+0x3fa0>
   14e08:	mov	r0, r5
   14e0c:	bl	10d98 <strlen@plt>
   14e10:	cmp	r4, r0
   14e14:	bhi	14e40 <__assert_fail@plt+0x3fb8>
   14e18:	cmp	r4, #0
   14e1c:	bne	14e58 <__assert_fail@plt+0x3fd0>
   14e20:	mov	r0, #34	; 0x22
   14e24:	pop	{r4, r5, r6, pc}
   14e28:	cmp	r4, #0
   14e2c:	beq	14e7c <__assert_fail@plt+0x3ff4>
   14e30:	mov	r3, #0
   14e34:	strb	r3, [r6]
   14e38:	mov	r0, #22
   14e3c:	pop	{r4, r5, r6, pc}
   14e40:	add	r2, r0, #1
   14e44:	mov	r1, r5
   14e48:	mov	r0, r6
   14e4c:	bl	10c9c <memcpy@plt>
   14e50:	mov	r0, #0
   14e54:	pop	{r4, r5, r6, pc}
   14e58:	sub	r4, r4, #1
   14e5c:	mov	r2, r4
   14e60:	mov	r1, r5
   14e64:	mov	r0, r6
   14e68:	bl	10c9c <memcpy@plt>
   14e6c:	mov	r3, #0
   14e70:	strb	r3, [r6, r4]
   14e74:	mov	r0, #34	; 0x22
   14e78:	pop	{r4, r5, r6, pc}
   14e7c:	mov	r0, #22
   14e80:	pop	{r4, r5, r6, pc}
   14e84:	push	{r4, lr}
   14e88:	mov	r1, #0
   14e8c:	bl	10e1c <setlocale@plt>
   14e90:	pop	{r4, pc}
   14e94:	subs	r2, r1, #1
   14e98:	bxeq	lr
   14e9c:	bcc	15074 <__assert_fail@plt+0x41ec>
   14ea0:	cmp	r0, r1
   14ea4:	bls	15058 <__assert_fail@plt+0x41d0>
   14ea8:	tst	r1, r2
   14eac:	beq	15064 <__assert_fail@plt+0x41dc>
   14eb0:	clz	r3, r0
   14eb4:	clz	r2, r1
   14eb8:	sub	r3, r2, r3
   14ebc:	rsbs	r3, r3, #31
   14ec0:	addne	r3, r3, r3, lsl #1
   14ec4:	mov	r2, #0
   14ec8:	addne	pc, pc, r3, lsl #2
   14ecc:	nop			; (mov r0, r0)
   14ed0:	cmp	r0, r1, lsl #31
   14ed4:	adc	r2, r2, r2
   14ed8:	subcs	r0, r0, r1, lsl #31
   14edc:	cmp	r0, r1, lsl #30
   14ee0:	adc	r2, r2, r2
   14ee4:	subcs	r0, r0, r1, lsl #30
   14ee8:	cmp	r0, r1, lsl #29
   14eec:	adc	r2, r2, r2
   14ef0:	subcs	r0, r0, r1, lsl #29
   14ef4:	cmp	r0, r1, lsl #28
   14ef8:	adc	r2, r2, r2
   14efc:	subcs	r0, r0, r1, lsl #28
   14f00:	cmp	r0, r1, lsl #27
   14f04:	adc	r2, r2, r2
   14f08:	subcs	r0, r0, r1, lsl #27
   14f0c:	cmp	r0, r1, lsl #26
   14f10:	adc	r2, r2, r2
   14f14:	subcs	r0, r0, r1, lsl #26
   14f18:	cmp	r0, r1, lsl #25
   14f1c:	adc	r2, r2, r2
   14f20:	subcs	r0, r0, r1, lsl #25
   14f24:	cmp	r0, r1, lsl #24
   14f28:	adc	r2, r2, r2
   14f2c:	subcs	r0, r0, r1, lsl #24
   14f30:	cmp	r0, r1, lsl #23
   14f34:	adc	r2, r2, r2
   14f38:	subcs	r0, r0, r1, lsl #23
   14f3c:	cmp	r0, r1, lsl #22
   14f40:	adc	r2, r2, r2
   14f44:	subcs	r0, r0, r1, lsl #22
   14f48:	cmp	r0, r1, lsl #21
   14f4c:	adc	r2, r2, r2
   14f50:	subcs	r0, r0, r1, lsl #21
   14f54:	cmp	r0, r1, lsl #20
   14f58:	adc	r2, r2, r2
   14f5c:	subcs	r0, r0, r1, lsl #20
   14f60:	cmp	r0, r1, lsl #19
   14f64:	adc	r2, r2, r2
   14f68:	subcs	r0, r0, r1, lsl #19
   14f6c:	cmp	r0, r1, lsl #18
   14f70:	adc	r2, r2, r2
   14f74:	subcs	r0, r0, r1, lsl #18
   14f78:	cmp	r0, r1, lsl #17
   14f7c:	adc	r2, r2, r2
   14f80:	subcs	r0, r0, r1, lsl #17
   14f84:	cmp	r0, r1, lsl #16
   14f88:	adc	r2, r2, r2
   14f8c:	subcs	r0, r0, r1, lsl #16
   14f90:	cmp	r0, r1, lsl #15
   14f94:	adc	r2, r2, r2
   14f98:	subcs	r0, r0, r1, lsl #15
   14f9c:	cmp	r0, r1, lsl #14
   14fa0:	adc	r2, r2, r2
   14fa4:	subcs	r0, r0, r1, lsl #14
   14fa8:	cmp	r0, r1, lsl #13
   14fac:	adc	r2, r2, r2
   14fb0:	subcs	r0, r0, r1, lsl #13
   14fb4:	cmp	r0, r1, lsl #12
   14fb8:	adc	r2, r2, r2
   14fbc:	subcs	r0, r0, r1, lsl #12
   14fc0:	cmp	r0, r1, lsl #11
   14fc4:	adc	r2, r2, r2
   14fc8:	subcs	r0, r0, r1, lsl #11
   14fcc:	cmp	r0, r1, lsl #10
   14fd0:	adc	r2, r2, r2
   14fd4:	subcs	r0, r0, r1, lsl #10
   14fd8:	cmp	r0, r1, lsl #9
   14fdc:	adc	r2, r2, r2
   14fe0:	subcs	r0, r0, r1, lsl #9
   14fe4:	cmp	r0, r1, lsl #8
   14fe8:	adc	r2, r2, r2
   14fec:	subcs	r0, r0, r1, lsl #8
   14ff0:	cmp	r0, r1, lsl #7
   14ff4:	adc	r2, r2, r2
   14ff8:	subcs	r0, r0, r1, lsl #7
   14ffc:	cmp	r0, r1, lsl #6
   15000:	adc	r2, r2, r2
   15004:	subcs	r0, r0, r1, lsl #6
   15008:	cmp	r0, r1, lsl #5
   1500c:	adc	r2, r2, r2
   15010:	subcs	r0, r0, r1, lsl #5
   15014:	cmp	r0, r1, lsl #4
   15018:	adc	r2, r2, r2
   1501c:	subcs	r0, r0, r1, lsl #4
   15020:	cmp	r0, r1, lsl #3
   15024:	adc	r2, r2, r2
   15028:	subcs	r0, r0, r1, lsl #3
   1502c:	cmp	r0, r1, lsl #2
   15030:	adc	r2, r2, r2
   15034:	subcs	r0, r0, r1, lsl #2
   15038:	cmp	r0, r1, lsl #1
   1503c:	adc	r2, r2, r2
   15040:	subcs	r0, r0, r1, lsl #1
   15044:	cmp	r0, r1
   15048:	adc	r2, r2, r2
   1504c:	subcs	r0, r0, r1
   15050:	mov	r0, r2
   15054:	bx	lr
   15058:	moveq	r0, #1
   1505c:	movne	r0, #0
   15060:	bx	lr
   15064:	clz	r2, r1
   15068:	rsb	r2, r2, #31
   1506c:	lsr	r0, r0, r2
   15070:	bx	lr
   15074:	cmp	r0, #0
   15078:	mvnne	r0, #0
   1507c:	b	1531c <__assert_fail@plt+0x4494>
   15080:	cmp	r1, #0
   15084:	beq	15074 <__assert_fail@plt+0x41ec>
   15088:	push	{r0, r1, lr}
   1508c:	bl	14e94 <__assert_fail@plt+0x400c>
   15090:	pop	{r1, r2, lr}
   15094:	mul	r3, r2, r0
   15098:	sub	r1, r1, r3
   1509c:	bx	lr
   150a0:	cmp	r1, #0
   150a4:	beq	152b0 <__assert_fail@plt+0x4428>
   150a8:	eor	ip, r0, r1
   150ac:	rsbmi	r1, r1, #0
   150b0:	subs	r2, r1, #1
   150b4:	beq	1527c <__assert_fail@plt+0x43f4>
   150b8:	movs	r3, r0
   150bc:	rsbmi	r3, r0, #0
   150c0:	cmp	r3, r1
   150c4:	bls	15288 <__assert_fail@plt+0x4400>
   150c8:	tst	r1, r2
   150cc:	beq	15298 <__assert_fail@plt+0x4410>
   150d0:	clz	r2, r3
   150d4:	clz	r0, r1
   150d8:	sub	r2, r0, r2
   150dc:	rsbs	r2, r2, #31
   150e0:	addne	r2, r2, r2, lsl #1
   150e4:	mov	r0, #0
   150e8:	addne	pc, pc, r2, lsl #2
   150ec:	nop			; (mov r0, r0)
   150f0:	cmp	r3, r1, lsl #31
   150f4:	adc	r0, r0, r0
   150f8:	subcs	r3, r3, r1, lsl #31
   150fc:	cmp	r3, r1, lsl #30
   15100:	adc	r0, r0, r0
   15104:	subcs	r3, r3, r1, lsl #30
   15108:	cmp	r3, r1, lsl #29
   1510c:	adc	r0, r0, r0
   15110:	subcs	r3, r3, r1, lsl #29
   15114:	cmp	r3, r1, lsl #28
   15118:	adc	r0, r0, r0
   1511c:	subcs	r3, r3, r1, lsl #28
   15120:	cmp	r3, r1, lsl #27
   15124:	adc	r0, r0, r0
   15128:	subcs	r3, r3, r1, lsl #27
   1512c:	cmp	r3, r1, lsl #26
   15130:	adc	r0, r0, r0
   15134:	subcs	r3, r3, r1, lsl #26
   15138:	cmp	r3, r1, lsl #25
   1513c:	adc	r0, r0, r0
   15140:	subcs	r3, r3, r1, lsl #25
   15144:	cmp	r3, r1, lsl #24
   15148:	adc	r0, r0, r0
   1514c:	subcs	r3, r3, r1, lsl #24
   15150:	cmp	r3, r1, lsl #23
   15154:	adc	r0, r0, r0
   15158:	subcs	r3, r3, r1, lsl #23
   1515c:	cmp	r3, r1, lsl #22
   15160:	adc	r0, r0, r0
   15164:	subcs	r3, r3, r1, lsl #22
   15168:	cmp	r3, r1, lsl #21
   1516c:	adc	r0, r0, r0
   15170:	subcs	r3, r3, r1, lsl #21
   15174:	cmp	r3, r1, lsl #20
   15178:	adc	r0, r0, r0
   1517c:	subcs	r3, r3, r1, lsl #20
   15180:	cmp	r3, r1, lsl #19
   15184:	adc	r0, r0, r0
   15188:	subcs	r3, r3, r1, lsl #19
   1518c:	cmp	r3, r1, lsl #18
   15190:	adc	r0, r0, r0
   15194:	subcs	r3, r3, r1, lsl #18
   15198:	cmp	r3, r1, lsl #17
   1519c:	adc	r0, r0, r0
   151a0:	subcs	r3, r3, r1, lsl #17
   151a4:	cmp	r3, r1, lsl #16
   151a8:	adc	r0, r0, r0
   151ac:	subcs	r3, r3, r1, lsl #16
   151b0:	cmp	r3, r1, lsl #15
   151b4:	adc	r0, r0, r0
   151b8:	subcs	r3, r3, r1, lsl #15
   151bc:	cmp	r3, r1, lsl #14
   151c0:	adc	r0, r0, r0
   151c4:	subcs	r3, r3, r1, lsl #14
   151c8:	cmp	r3, r1, lsl #13
   151cc:	adc	r0, r0, r0
   151d0:	subcs	r3, r3, r1, lsl #13
   151d4:	cmp	r3, r1, lsl #12
   151d8:	adc	r0, r0, r0
   151dc:	subcs	r3, r3, r1, lsl #12
   151e0:	cmp	r3, r1, lsl #11
   151e4:	adc	r0, r0, r0
   151e8:	subcs	r3, r3, r1, lsl #11
   151ec:	cmp	r3, r1, lsl #10
   151f0:	adc	r0, r0, r0
   151f4:	subcs	r3, r3, r1, lsl #10
   151f8:	cmp	r3, r1, lsl #9
   151fc:	adc	r0, r0, r0
   15200:	subcs	r3, r3, r1, lsl #9
   15204:	cmp	r3, r1, lsl #8
   15208:	adc	r0, r0, r0
   1520c:	subcs	r3, r3, r1, lsl #8
   15210:	cmp	r3, r1, lsl #7
   15214:	adc	r0, r0, r0
   15218:	subcs	r3, r3, r1, lsl #7
   1521c:	cmp	r3, r1, lsl #6
   15220:	adc	r0, r0, r0
   15224:	subcs	r3, r3, r1, lsl #6
   15228:	cmp	r3, r1, lsl #5
   1522c:	adc	r0, r0, r0
   15230:	subcs	r3, r3, r1, lsl #5
   15234:	cmp	r3, r1, lsl #4
   15238:	adc	r0, r0, r0
   1523c:	subcs	r3, r3, r1, lsl #4
   15240:	cmp	r3, r1, lsl #3
   15244:	adc	r0, r0, r0
   15248:	subcs	r3, r3, r1, lsl #3
   1524c:	cmp	r3, r1, lsl #2
   15250:	adc	r0, r0, r0
   15254:	subcs	r3, r3, r1, lsl #2
   15258:	cmp	r3, r1, lsl #1
   1525c:	adc	r0, r0, r0
   15260:	subcs	r3, r3, r1, lsl #1
   15264:	cmp	r3, r1
   15268:	adc	r0, r0, r0
   1526c:	subcs	r3, r3, r1
   15270:	cmp	ip, #0
   15274:	rsbmi	r0, r0, #0
   15278:	bx	lr
   1527c:	teq	ip, r0
   15280:	rsbmi	r0, r0, #0
   15284:	bx	lr
   15288:	movcc	r0, #0
   1528c:	asreq	r0, ip, #31
   15290:	orreq	r0, r0, #1
   15294:	bx	lr
   15298:	clz	r2, r1
   1529c:	rsb	r2, r2, #31
   152a0:	cmp	ip, #0
   152a4:	lsr	r0, r3, r2
   152a8:	rsbmi	r0, r0, #0
   152ac:	bx	lr
   152b0:	cmp	r0, #0
   152b4:	mvngt	r0, #-2147483648	; 0x80000000
   152b8:	movlt	r0, #-2147483648	; 0x80000000
   152bc:	b	1531c <__assert_fail@plt+0x4494>
   152c0:	cmp	r1, #0
   152c4:	beq	152b0 <__assert_fail@plt+0x4428>
   152c8:	push	{r0, r1, lr}
   152cc:	bl	150a8 <__assert_fail@plt+0x4220>
   152d0:	pop	{r1, r2, lr}
   152d4:	mul	r3, r2, r0
   152d8:	sub	r1, r1, r3
   152dc:	bx	lr
   152e0:	cmp	r3, #0
   152e4:	cmpeq	r2, #0
   152e8:	bne	15300 <__assert_fail@plt+0x4478>
   152ec:	cmp	r1, #0
   152f0:	cmpeq	r0, #0
   152f4:	mvnne	r1, #0
   152f8:	mvnne	r0, #0
   152fc:	b	1531c <__assert_fail@plt+0x4494>
   15300:	sub	sp, sp, #8
   15304:	push	{sp, lr}
   15308:	bl	1532c <__assert_fail@plt+0x44a4>
   1530c:	ldr	lr, [sp, #4]
   15310:	add	sp, sp, #8
   15314:	pop	{r2, r3}
   15318:	bx	lr
   1531c:	push	{r1, lr}
   15320:	mov	r0, #8
   15324:	bl	10c54 <raise@plt>
   15328:	pop	{r1, pc}
   1532c:	cmp	r1, r3
   15330:	push	{r4, r5, r6, r7, r8, r9, lr}
   15334:	cmpeq	r0, r2
   15338:	mov	r4, r0
   1533c:	mov	r5, r1
   15340:	ldr	r9, [sp, #28]
   15344:	movcc	r0, #0
   15348:	movcc	r1, #0
   1534c:	bcc	15444 <__assert_fail@plt+0x45bc>
   15350:	cmp	r3, #0
   15354:	clzeq	ip, r2
   15358:	clzne	ip, r3
   1535c:	addeq	ip, ip, #32
   15360:	cmp	r5, #0
   15364:	clzeq	r1, r4
   15368:	addeq	r1, r1, #32
   1536c:	clzne	r1, r5
   15370:	sub	ip, ip, r1
   15374:	sub	lr, ip, #32
   15378:	lsl	r7, r3, ip
   1537c:	rsb	r8, ip, #32
   15380:	orr	r7, r7, r2, lsl lr
   15384:	orr	r7, r7, r2, lsr r8
   15388:	lsl	r6, r2, ip
   1538c:	cmp	r5, r7
   15390:	cmpeq	r4, r6
   15394:	movcc	r0, #0
   15398:	movcc	r1, #0
   1539c:	bcc	153b8 <__assert_fail@plt+0x4530>
   153a0:	mov	r3, #1
   153a4:	subs	r4, r4, r6
   153a8:	lsl	r1, r3, lr
   153ac:	lsl	r0, r3, ip
   153b0:	orr	r1, r1, r3, lsr r8
   153b4:	sbc	r5, r5, r7
   153b8:	cmp	ip, #0
   153bc:	beq	15444 <__assert_fail@plt+0x45bc>
   153c0:	lsrs	r3, r7, #1
   153c4:	rrx	r2, r6
   153c8:	mov	r6, ip
   153cc:	b	153f0 <__assert_fail@plt+0x4568>
   153d0:	subs	r4, r4, r2
   153d4:	sbc	r5, r5, r3
   153d8:	adds	r4, r4, r4
   153dc:	adc	r5, r5, r5
   153e0:	adds	r4, r4, #1
   153e4:	adc	r5, r5, #0
   153e8:	subs	r6, r6, #1
   153ec:	beq	1540c <__assert_fail@plt+0x4584>
   153f0:	cmp	r5, r3
   153f4:	cmpeq	r4, r2
   153f8:	bcs	153d0 <__assert_fail@plt+0x4548>
   153fc:	adds	r4, r4, r4
   15400:	adc	r5, r5, r5
   15404:	subs	r6, r6, #1
   15408:	bne	153f0 <__assert_fail@plt+0x4568>
   1540c:	lsr	r6, r4, ip
   15410:	lsr	r7, r5, ip
   15414:	orr	r6, r6, r5, lsl r8
   15418:	adds	r2, r0, r4
   1541c:	orr	r6, r6, r5, lsr lr
   15420:	adc	r3, r1, r5
   15424:	lsl	r1, r7, ip
   15428:	orr	r1, r1, r6, lsl lr
   1542c:	lsl	r0, r6, ip
   15430:	orr	r1, r1, r6, lsr r8
   15434:	subs	r0, r2, r0
   15438:	mov	r4, r6
   1543c:	mov	r5, r7
   15440:	sbc	r1, r3, r1
   15444:	cmp	r9, #0
   15448:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1544c:	strd	r4, [r9]
   15450:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15454:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15458:	mov	r7, r0
   1545c:	ldr	r6, [pc, #72]	; 154ac <__assert_fail@plt+0x4624>
   15460:	ldr	r5, [pc, #72]	; 154b0 <__assert_fail@plt+0x4628>
   15464:	add	r6, pc, r6
   15468:	add	r5, pc, r5
   1546c:	sub	r6, r6, r5
   15470:	mov	r8, r1
   15474:	mov	r9, r2
   15478:	bl	10c1c <calloc@plt-0x20>
   1547c:	asrs	r6, r6, #2
   15480:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15484:	mov	r4, #0
   15488:	add	r4, r4, #1
   1548c:	ldr	r3, [r5], #4
   15490:	mov	r2, r9
   15494:	mov	r1, r8
   15498:	mov	r0, r7
   1549c:	blx	r3
   154a0:	cmp	r6, r4
   154a4:	bne	15488 <__assert_fail@plt+0x4600>
   154a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154ac:	andeq	r1, r1, r4, lsr #21
   154b0:	muleq	r1, ip, sl
   154b4:	bx	lr
   154b8:	ldr	r3, [pc, #12]	; 154cc <__assert_fail@plt+0x4644>
   154bc:	mov	r1, #0
   154c0:	add	r3, pc, r3
   154c4:	ldr	r2, [r3]
   154c8:	b	10db0 <__cxa_atexit@plt>
   154cc:	andeq	r1, r1, r4, lsl ip

Disassembly of section .fini:

000154d0 <.fini>:
   154d0:	push	{r3, lr}
   154d4:	pop	{r3, pc}
