
../repos/charybdis/modules/.libs/m_help.so:     file format elf32-littlearm


Disassembly of section .init:

000004c4 <_init>:
 4c4:	push	{r3, lr}
 4c8:	bl	514 <call_weak_fn>
 4cc:	pop	{r3, pc}

Disassembly of section .plt:

000004d0 <.plt>:
 4d0:	push	{lr}		; (str lr, [sp, #-4]!)
 4d4:	ldr	lr, [pc, #4]	; 4e0 <.plt+0x10>
 4d8:	add	lr, pc, lr
 4dc:	ldr	pc, [lr, #8]!
 4e0:	.word	0x00010b20

000004e4 <__cxa_finalize@plt>:
 4e4:	add	ip, pc, #0, 12
 4e8:	add	ip, ip, #16, 20	; 0x10000
 4ec:	ldr	pc, [ip, #2848]!	; 0xb20

000004f0 <sendto_one@plt>:
 4f0:	add	ip, pc, #0, 12
 4f4:	add	ip, ip, #16, 20	; 0x10000
 4f8:	ldr	pc, [ip, #2840]!	; 0xb18

000004fc <__gmon_start__@plt>:
 4fc:	add	ip, pc, #0, 12
 500:	add	ip, ip, #16, 20	; 0x10000
 504:	ldr	pc, [ip, #2832]!	; 0xb10

00000508 <rb_dictionary_retrieve@plt>:
 508:	add	ip, pc, #0, 12
 50c:	add	ip, ip, #16, 20	; 0x10000
 510:	ldr	pc, [ip, #2824]!	; 0xb08

Disassembly of section .text:

00000514 <call_weak_fn>:
 514:	ldr	r3, [pc, #20]	; 530 <call_weak_fn+0x1c>
 518:	ldr	r2, [pc, #20]	; 534 <call_weak_fn+0x20>
 51c:	add	r3, pc, r3
 520:	ldr	r2, [r3, r2]
 524:	cmp	r2, #0
 528:	bxeq	lr
 52c:	b	4fc <__gmon_start__@plt>
 530:	.word	0x00010adc
 534:	.word	0x00000028

00000538 <deregister_tm_clones>:
 538:	ldr	r3, [pc, #52]	; 574 <deregister_tm_clones+0x3c>
 53c:	ldr	r0, [pc, #52]	; 578 <deregister_tm_clones+0x40>
 540:	add	r3, pc, r3
 544:	add	r0, pc, r0
 548:	add	r3, r3, #3
 54c:	sub	r3, r3, r0
 550:	cmp	r3, #6
 554:	ldr	r3, [pc, #32]	; 57c <deregister_tm_clones+0x44>
 558:	add	r3, pc, r3
 55c:	bxls	lr
 560:	ldr	r2, [pc, #24]	; 580 <deregister_tm_clones+0x48>
 564:	ldr	r3, [r3, r2]
 568:	cmp	r3, #0
 56c:	bxeq	lr
 570:	bx	r3
 574:	.word	0x00010bb4
 578:	.word	0x00010bb0
 57c:	.word	0x00010aa0
 580:	.word	0x00000024

00000584 <register_tm_clones>:
 584:	ldr	r1, [pc, #56]	; 5c4 <register_tm_clones+0x40>
 588:	ldr	r0, [pc, #56]	; 5c8 <register_tm_clones+0x44>
 58c:	add	r1, pc, r1
 590:	add	r0, pc, r0
 594:	sub	r1, r1, r0
 598:	ldr	r3, [pc, #44]	; 5cc <register_tm_clones+0x48>
 59c:	asr	r1, r1, #2
 5a0:	add	r3, pc, r3
 5a4:	add	r1, r1, r1, lsr #31
 5a8:	asrs	r1, r1, #1
 5ac:	bxeq	lr
 5b0:	ldr	r2, [pc, #24]	; 5d0 <register_tm_clones+0x4c>
 5b4:	ldr	r3, [r3, r2]
 5b8:	cmp	r3, #0
 5bc:	bxeq	lr
 5c0:	bx	r3
 5c4:	.word	0x00010b68
 5c8:	.word	0x00010b64
 5cc:	.word	0x00010a58
 5d0:	.word	0x00000030

000005d4 <__do_global_dtors_aux>:
 5d4:	ldr	r3, [pc, #76]	; 628 <__do_global_dtors_aux+0x54>
 5d8:	ldr	r2, [pc, #76]	; 62c <__do_global_dtors_aux+0x58>
 5dc:	add	r3, pc, r3
 5e0:	add	r2, pc, r2
 5e4:	ldrb	r3, [r3]
 5e8:	cmp	r3, #0
 5ec:	bxne	lr
 5f0:	ldr	r3, [pc, #56]	; 630 <__do_global_dtors_aux+0x5c>
 5f4:	push	{r4, lr}
 5f8:	ldr	r3, [r2, r3]
 5fc:	cmp	r3, #0
 600:	beq	610 <__do_global_dtors_aux+0x3c>
 604:	ldr	r3, [pc, #40]	; 634 <__do_global_dtors_aux+0x60>
 608:	ldr	r0, [pc, r3]
 60c:	bl	4e4 <__cxa_finalize@plt>
 610:	bl	538 <deregister_tm_clones>
 614:	ldr	r3, [pc, #28]	; 638 <__do_global_dtors_aux+0x64>
 618:	mov	r2, #1
 61c:	add	r3, pc, r3
 620:	strb	r2, [r3]
 624:	pop	{r4, pc}
 628:	.word	0x00010b18
 62c:	.word	0x00010a18
 630:	.word	0x00000020
 634:	.word	0x00010a2c
 638:	.word	0x00010ad8

0000063c <frame_dummy>:
 63c:	ldr	r0, [pc, #56]	; 67c <frame_dummy+0x40>
 640:	ldr	r3, [pc, #56]	; 680 <frame_dummy+0x44>
 644:	add	r0, pc, r0
 648:	ldr	r2, [r0]
 64c:	add	r3, pc, r3
 650:	cmp	r2, #0
 654:	bne	65c <frame_dummy+0x20>
 658:	b	584 <register_tm_clones>
 65c:	ldr	r2, [pc, #32]	; 684 <frame_dummy+0x48>
 660:	ldr	r3, [r3, r2]
 664:	cmp	r3, #0
 668:	beq	658 <frame_dummy+0x1c>
 66c:	push	{r4, lr}
 670:	blx	r3
 674:	pop	{r4, lr}
 678:	b	584 <register_tm_clones>
 67c:	.word	0x000108b0
 680:	.word	0x000109ac
 684:	.word	0x0000002c

00000688 <dohelp>:
 688:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 68c:	subs	r4, r2, #0
 690:	ldr	r5, [pc, #280]	; 7b0 <dohelp+0x128>
 694:	mov	r6, r0
 698:	add	r5, pc, r5
 69c:	mov	r8, r1
 6a0:	beq	710 <dohelp+0x88>
 6a4:	ldrb	r3, [r4]
 6a8:	cmp	r3, #0
 6ac:	beq	71c <dohelp+0x94>
 6b0:	tst	r8, #2
 6b4:	ldr	r3, [pc, #248]	; 7b4 <dohelp+0x12c>
 6b8:	ldreq	r3, [pc, #248]	; 7b8 <dohelp+0x130>
 6bc:	ldr	r3, [r5, r3]
 6c0:	mov	r1, r4
 6c4:	add	r7, r6, #88	; 0x58
 6c8:	ldr	r0, [r3]
 6cc:	bl	508 <rb_dictionary_retrieve@plt>
 6d0:	ldr	r3, [pc, #228]	; 7bc <dohelp+0x134>
 6d4:	ldr	r9, [r5, r3]
 6d8:	cmp	r0, #0
 6dc:	beq	6ec <dohelp+0x64>
 6e0:	ldr	r3, [r0, #44]	; 0x2c
 6e4:	tst	r8, r3
 6e8:	bne	728 <dohelp+0xa0>
 6ec:	ldr	r1, [pc, #204]	; 7c0 <dohelp+0x138>
 6f0:	mov	r3, r7
 6f4:	add	r2, r9, #88	; 0x58
 6f8:	add	r1, pc, r1
 6fc:	str	r4, [sp]
 700:	mov	r0, r6
 704:	bl	4f0 <sendto_one@plt>
 708:	add	sp, sp, #8
 70c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 710:	ldr	r4, [pc, #172]	; 7c4 <dohelp+0x13c>
 714:	add	r4, pc, r4
 718:	b	6b0 <dohelp+0x28>
 71c:	ldr	r4, [pc, #164]	; 7c8 <dohelp+0x140>
 720:	add	r4, pc, r4
 724:	b	6b0 <dohelp+0x28>
 728:	ldr	r8, [r0, #32]
 72c:	ldr	r1, [pc, #152]	; 7cc <dohelp+0x144>
 730:	add	r5, r9, #88	; 0x58
 734:	ldr	r3, [r8]
 738:	mov	r2, r5
 73c:	add	r1, pc, r1
 740:	ldr	r3, [r3]
 744:	mov	r0, r6
 748:	str	r3, [sp, #4]
 74c:	str	r4, [sp]
 750:	mov	r3, r7
 754:	ldr	sl, [pc, #116]	; 7d0 <dohelp+0x148>
 758:	bl	4f0 <sendto_one@plt>
 75c:	ldr	r8, [r8, #8]
 760:	add	sl, pc, sl
 764:	cmp	r8, #0
 768:	bne	784 <dohelp+0xfc>
 76c:	ldr	r1, [pc, #96]	; 7d4 <dohelp+0x14c>
 770:	str	r4, [sp]
 774:	mov	r3, r7
 778:	add	r2, r9, #88	; 0x58
 77c:	add	r1, pc, r1
 780:	b	700 <dohelp+0x78>
 784:	ldr	r3, [r8]
 788:	mov	r2, r5
 78c:	mov	r1, sl
 790:	ldr	r3, [r3]
 794:	mov	r0, r6
 798:	str	r3, [sp, #4]
 79c:	str	r4, [sp]
 7a0:	mov	r3, r7
 7a4:	bl	4f0 <sendto_one@plt>
 7a8:	ldr	r8, [r8, #8]
 7ac:	b	764 <dohelp+0xdc>
 7b0:	.word	0x00010960
 7b4:	.word	0x00000034
 7b8:	.word	0x0000001c
 7bc:	.word	0x00000038
 7c0:	.word	0x00000166
 7c4:	.word	0x00000100
 7c8:	.word	0x000000f4
 7cc:	.word	0x00000140
 7d0:	.word	0x0000012e
 7d4:	.word	0x00000124

000007d8 <mo_help>:
 7d8:	mov	r0, r2
 7dc:	ldr	r2, [sp]
 7e0:	cmp	r3, #1
 7e4:	movle	r2, #0
 7e8:	ldrgt	r2, [r2, #4]
 7ec:	mov	r1, #2
 7f0:	b	688 <dohelp>

000007f4 <mo_uhelp>:
 7f4:	mov	r0, r2
 7f8:	ldr	r2, [sp]
 7fc:	cmp	r3, #1
 800:	movle	r2, #0
 804:	ldrgt	r2, [r2, #4]
 808:	mov	r1, #1
 80c:	b	688 <dohelp>

00000810 <m_help>:
 810:	b	7f4 <mo_uhelp>

Disassembly of section .fini:

00000814 <_fini>:
 814:	push	{r3, lr}
 818:	pop	{r3, pc}
