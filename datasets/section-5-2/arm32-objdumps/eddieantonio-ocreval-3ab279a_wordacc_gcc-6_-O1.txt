
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

000109b0 <.init>:
   109b0:	push	{r3, lr}
   109b4:	bl	10bbc <__assert_fail@plt+0x48>
   109b8:	pop	{r3, pc}

Disassembly of section .plt:

000109bc <calloc@plt-0x14>:
   109bc:	push	{lr}		; (str lr, [sp, #-4]!)
   109c0:	ldr	lr, [pc, #4]	; 109cc <calloc@plt-0x4>
   109c4:	add	lr, pc, lr
   109c8:	ldr	pc, [lr, #8]!
   109cc:	andeq	r7, r1, r4, lsr r6

000109d0 <calloc@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #94208	; 0x17000
   109d8:	ldr	pc, [ip, #1588]!	; 0x634

000109dc <strcmp@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #94208	; 0x17000
   109e4:	ldr	pc, [ip, #1580]!	; 0x62c

000109e8 <strtol@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #94208	; 0x17000
   109f0:	ldr	pc, [ip, #1572]!	; 0x624

000109f4 <fopen@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #94208	; 0x17000
   109fc:	ldr	pc, [ip, #1564]!	; 0x61c

00010a00 <free@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #94208	; 0x17000
   10a08:	ldr	pc, [ip, #1556]!	; 0x614

00010a0c <utf8proc_get_property@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #94208	; 0x17000
   10a14:	ldr	pc, [ip, #1548]!	; 0x60c

00010a18 <fgets@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #94208	; 0x17000
   10a20:	ldr	pc, [ip, #1540]!	; 0x604

00010a24 <utf8proc_encode_char@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #94208	; 0x17000
   10a2c:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a30 <strdup@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #94208	; 0x17000
   10a38:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a3c <rewind@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #94208	; 0x17000
   10a44:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a48 <unlink@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #94208	; 0x17000
   10a50:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a54 <utf8proc_tolower@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #94208	; 0x17000
   10a5c:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a60 <__xstat@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #94208	; 0x17000
   10a68:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a6c <fwrite@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #94208	; 0x17000
   10a74:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a78 <fread@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #94208	; 0x17000
   10a80:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a84 <utf8proc_iterate@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #94208	; 0x17000
   10a8c:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a90 <malloc@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #94208	; 0x17000
   10a98:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a9c <__libc_start_main@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #94208	; 0x17000
   10aa4:	ldr	pc, [ip, #1452]!	; 0x5ac

00010aa8 <__sysv_signal@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #94208	; 0x17000
   10ab0:	ldr	pc, [ip, #1444]!	; 0x5a4

00010ab4 <__gmon_start__@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #94208	; 0x17000
   10abc:	ldr	pc, [ip, #1436]!	; 0x59c

00010ac0 <getpid@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #94208	; 0x17000
   10ac8:	ldr	pc, [ip, #1428]!	; 0x594

00010acc <exit@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #94208	; 0x17000
   10ad4:	ldr	pc, [ip, #1420]!	; 0x58c

00010ad8 <utf8proc_category@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #94208	; 0x17000
   10ae0:	ldr	pc, [ip, #1412]!	; 0x584

00010ae4 <strlen@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #94208	; 0x17000
   10aec:	ldr	pc, [ip, #1404]!	; 0x57c

00010af0 <fprintf@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #94208	; 0x17000
   10af8:	ldr	pc, [ip, #1396]!	; 0x574

00010afc <__isoc99_sscanf@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #94208	; 0x17000
   10b04:	ldr	pc, [ip, #1388]!	; 0x56c

00010b08 <fclose@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #94208	; 0x17000
   10b10:	ldr	pc, [ip, #1380]!	; 0x564

00010b14 <utf8proc_NFC@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #94208	; 0x17000
   10b1c:	ldr	pc, [ip, #1372]!	; 0x55c

00010b20 <fputc@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #94208	; 0x17000
   10b28:	ldr	pc, [ip, #1364]!	; 0x554

00010b2c <sprintf@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #94208	; 0x17000
   10b34:	ldr	pc, [ip, #1356]!	; 0x54c

00010b38 <utf8proc_errmsg@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #94208	; 0x17000
   10b40:	ldr	pc, [ip, #1348]!	; 0x544

00010b44 <fputs@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #94208	; 0x17000
   10b4c:	ldr	pc, [ip, #1340]!	; 0x53c

00010b50 <strncmp@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #94208	; 0x17000
   10b58:	ldr	pc, [ip, #1332]!	; 0x534

00010b5c <abort@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #94208	; 0x17000
   10b64:	ldr	pc, [ip, #1324]!	; 0x52c

00010b68 <getc@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #94208	; 0x17000
   10b70:	ldr	pc, [ip, #1316]!	; 0x524

00010b74 <__assert_fail@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #94208	; 0x17000
   10b7c:	ldr	pc, [ip, #1308]!	; 0x51c

Disassembly of section .text:

00010b80 <error@@Base-0x1f0c>:
   10b80:	mov	fp, #0
   10b84:	mov	lr, #0
   10b88:	pop	{r1}		; (ldr r1, [sp], #4)
   10b8c:	mov	r2, sp
   10b90:	push	{r2}		; (str r2, [sp, #-4]!)
   10b94:	push	{r0}		; (str r0, [sp, #-4]!)
   10b98:	ldr	ip, [pc, #16]	; 10bb0 <__assert_fail@plt+0x3c>
   10b9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10ba0:	ldr	r0, [pc, #12]	; 10bb4 <__assert_fail@plt+0x40>
   10ba4:	ldr	r3, [pc, #12]	; 10bb8 <__assert_fail@plt+0x44>
   10ba8:	bl	10a9c <__libc_start_main@plt>
   10bac:	bl	10b5c <abort@plt>
   10bb0:	andeq	r3, r1, r8, lsr #12
   10bb4:	muleq	r1, r8, r4
   10bb8:	andeq	r3, r1, r8, asr #11
   10bbc:	ldr	r3, [pc, #20]	; 10bd8 <__assert_fail@plt+0x64>
   10bc0:	ldr	r2, [pc, #20]	; 10bdc <__assert_fail@plt+0x68>
   10bc4:	add	r3, pc, r3
   10bc8:	ldr	r2, [r3, r2]
   10bcc:	cmp	r2, #0
   10bd0:	bxeq	lr
   10bd4:	b	10ab4 <__gmon_start__@plt>
   10bd8:	andeq	r7, r1, r4, lsr r4
   10bdc:	muleq	r0, ip, r0
   10be0:	ldr	r3, [pc, #28]	; 10c04 <__assert_fail@plt+0x90>
   10be4:	ldr	r0, [pc, #28]	; 10c08 <__assert_fail@plt+0x94>
   10be8:	sub	r3, r3, r0
   10bec:	cmp	r3, #6
   10bf0:	bxls	lr
   10bf4:	ldr	r3, [pc, #16]	; 10c0c <__assert_fail@plt+0x98>
   10bf8:	cmp	r3, #0
   10bfc:	bxeq	lr
   10c00:	bx	r3
   10c04:	andeq	r8, r2, r3, ror #1
   10c08:	andeq	r8, r2, r0, ror #1
   10c0c:	andeq	r0, r0, r0
   10c10:	ldr	r1, [pc, #36]	; 10c3c <__assert_fail@plt+0xc8>
   10c14:	ldr	r0, [pc, #36]	; 10c40 <__assert_fail@plt+0xcc>
   10c18:	sub	r1, r1, r0
   10c1c:	asr	r1, r1, #2
   10c20:	add	r1, r1, r1, lsr #31
   10c24:	asrs	r1, r1, #1
   10c28:	bxeq	lr
   10c2c:	ldr	r3, [pc, #16]	; 10c44 <__assert_fail@plt+0xd0>
   10c30:	cmp	r3, #0
   10c34:	bxeq	lr
   10c38:	bx	r3
   10c3c:	andeq	r8, r2, r0, ror #1
   10c40:	andeq	r8, r2, r0, ror #1
   10c44:	andeq	r0, r0, r0
   10c48:	push	{r4, lr}
   10c4c:	ldr	r4, [pc, #24]	; 10c6c <__assert_fail@plt+0xf8>
   10c50:	ldrb	r3, [r4]
   10c54:	cmp	r3, #0
   10c58:	popne	{r4, pc}
   10c5c:	bl	10be0 <__assert_fail@plt+0x6c>
   10c60:	mov	r3, #1
   10c64:	strb	r3, [r4]
   10c68:	pop	{r4, pc}
   10c6c:	strdeq	r8, [r2], -r0
   10c70:	ldr	r0, [pc, #40]	; 10ca0 <__assert_fail@plt+0x12c>
   10c74:	ldr	r3, [r0]
   10c78:	cmp	r3, #0
   10c7c:	bne	10c84 <__assert_fail@plt+0x110>
   10c80:	b	10c10 <__assert_fail@plt+0x9c>
   10c84:	ldr	r3, [pc, #24]	; 10ca4 <__assert_fail@plt+0x130>
   10c88:	cmp	r3, #0
   10c8c:	beq	10c80 <__assert_fail@plt+0x10c>
   10c90:	push	{r4, lr}
   10c94:	blx	r3
   10c98:	pop	{r4, lr}
   10c9c:	b	10c10 <__assert_fail@plt+0x9c>
   10ca0:	andeq	r7, r2, r4, lsl #28
   10ca4:	andeq	r0, r0, r0
   10ca8:	push	{r4, r5, r6, r7, r8, lr}
   10cac:	mov	r4, r0
   10cb0:	mov	r5, r1
   10cb4:	ldr	r6, [pc, #116]	; 10d30 <__assert_fail@plt+0x1bc>
   10cb8:	add	r6, r6, r0, lsl #4
   10cbc:	ldr	r0, [r6, #12]
   10cc0:	mov	r1, #4
   10cc4:	add	r0, r0, #1
   10cc8:	bl	12ac8 <error@@Base+0x3c>
   10ccc:	ldr	r3, [r6, #12]
   10cd0:	cmp	r3, #0
   10cd4:	ble	10d28 <__assert_fail@plt+0x1b4>
   10cd8:	mov	r1, #0
   10cdc:	mov	r3, r1
   10ce0:	ldr	r7, [pc, #76]	; 10d34 <__assert_fail@plt+0x1c0>
   10ce4:	rsb	r6, r4, #1
   10ce8:	ldr	lr, [pc, #64]	; 10d30 <__assert_fail@plt+0x1bc>
   10cec:	add	lr, lr, r4, lsl #4
   10cf0:	ldr	r2, [r7, r4, lsl #2]
   10cf4:	add	ip, r2, r3, lsl #3
   10cf8:	ldr	r2, [r2, r3, lsl #3]
   10cfc:	add	r2, r2, r6
   10d00:	ldrb	r2, [r2, #12]
   10d04:	cmp	r2, #0
   10d08:	strne	ip, [r0, r1, lsl #2]
   10d0c:	addne	r1, r1, #1
   10d10:	add	r3, r3, #1
   10d14:	ldr	r2, [lr, #12]
   10d18:	cmp	r2, r3
   10d1c:	bgt	10cf0 <__assert_fail@plt+0x17c>
   10d20:	str	r1, [r5]
   10d24:	pop	{r4, r5, r6, r7, r8, pc}
   10d28:	mov	r1, #0
   10d2c:	b	10d20 <__assert_fail@plt+0x1ac>
   10d30:	andeq	sl, r2, ip, lsr #2
   10d34:			; <UNDEFINED> instruction: 0x000303b4
   10d38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d3c:	sub	sp, sp, #20
   10d40:	sub	r3, r0, #4
   10d44:	str	r3, [sp, #12]
   10d48:	ldr	r3, [pc, #404]	; 10ee4 <__assert_fail@plt+0x370>
   10d4c:	str	r3, [sp, #4]
   10d50:	ldr	r7, [pc, #400]	; 10ee8 <__assert_fail@plt+0x374>
   10d54:	ldr	fp, [pc, #400]	; 10eec <__assert_fail@plt+0x378>
   10d58:	mov	r3, #1
   10d5c:	str	r3, [sp, #8]
   10d60:	mov	sl, #0
   10d64:	mov	r8, r3
   10d68:	b	10dd0 <__assert_fail@plt+0x25c>
   10d6c:	ldr	r3, [pc, #380]	; 10ef0 <__assert_fail@plt+0x37c>
   10d70:	ldrb	r3, [r3, #11]
   10d74:	cmp	r3, #0
   10d78:	bne	10eac <__assert_fail@plt+0x338>
   10d7c:	mov	r1, r4
   10d80:	mov	r0, fp
   10d84:	bl	123ac <__assert_fail@plt+0x1838>
   10d88:	ldr	r0, [fp, #12]
   10d8c:	mov	r1, #8
   10d90:	add	r0, r0, #1
   10d94:	bl	12ac8 <error@@Base+0x3c>
   10d98:	str	r0, [r7]
   10d9c:	ldr	r3, [pc, #328]	; 10eec <__assert_fail@plt+0x378>
   10da0:	ldr	r4, [r3, sl, lsl #4]
   10da4:	cmp	r4, #0
   10da8:	bne	10e28 <__assert_fail@plt+0x2b4>
   10dac:	add	sl, sl, #1
   10db0:	ldr	r3, [sp, #4]
   10db4:	add	r3, r3, #16
   10db8:	str	r3, [sp, #4]
   10dbc:	ldr	r3, [sp, #8]
   10dc0:	add	r3, r3, #1
   10dc4:	str	r3, [sp, #8]
   10dc8:	add	r7, r7, #4
   10dcc:	add	fp, fp, #16
   10dd0:	mov	r9, sl
   10dd4:	ldr	r0, [sp, #4]
   10dd8:	mov	r4, r0
   10ddc:	ldr	r2, [pc, #268]	; 10ef0 <__assert_fail@plt+0x37c>
   10de0:	ldr	r3, [sp, #12]
   10de4:	ldr	r1, [r3, #4]!
   10de8:	str	r3, [sp, #12]
   10dec:	bl	12e58 <error@@Base+0x3cc>
   10df0:	cmp	sl, #0
   10df4:	beq	10d6c <__assert_fail@plt+0x1f8>
   10df8:	ldr	r1, [sp, #4]
   10dfc:	mov	r0, fp
   10e00:	bl	123ac <__assert_fail@plt+0x1838>
   10e04:	ldr	r0, [fp, #12]
   10e08:	mov	r1, #8
   10e0c:	add	r0, r0, #1
   10e10:	bl	12ac8 <error@@Base+0x3c>
   10e14:	str	r0, [r7]
   10e18:	ldr	r3, [pc, #204]	; 10eec <__assert_fail@plt+0x378>
   10e1c:	ldr	r4, [r3, sl, lsl #4]
   10e20:	cmp	r4, #0
   10e24:	beq	10e60 <__assert_fail@plt+0x2ec>
   10e28:	mov	r6, #0
   10e2c:	ldr	r1, [r4, #8]
   10e30:	ldr	r0, [pc, #188]	; 10ef4 <__assert_fail@plt+0x380>
   10e34:	bl	120f0 <__assert_fail@plt+0x157c>
   10e38:	subs	r5, r0, #0
   10e3c:	beq	10eb4 <__assert_fail@plt+0x340>
   10e40:	add	r3, r5, r9
   10e44:	strb	r8, [r3, #12]
   10e48:	ldr	r3, [r7]
   10e4c:	str	r5, [r3, r6]
   10e50:	ldr	r4, [r4, #4]
   10e54:	add	r6, r6, #8
   10e58:	cmp	r4, #0
   10e5c:	bne	10e2c <__assert_fail@plt+0x2b8>
   10e60:	ldr	r3, [sp, #8]
   10e64:	cmp	r3, #1
   10e68:	ble	10dac <__assert_fail@plt+0x238>
   10e6c:	ldr	r4, [pc, #132]	; 10ef8 <__assert_fail@plt+0x384>
   10e70:	mov	r1, r4
   10e74:	mov	r0, #0
   10e78:	bl	10ca8 <__assert_fail@plt+0x134>
   10e7c:	ldr	r3, [pc, #120]	; 10efc <__assert_fail@plt+0x388>
   10e80:	str	r0, [r3]
   10e84:	ldr	r3, [r4]
   10e88:	cmp	r3, #65536	; 0x10000
   10e8c:	bge	10edc <__assert_fail@plt+0x368>
   10e90:	ldr	r1, [pc, #104]	; 10f00 <__assert_fail@plt+0x38c>
   10e94:	mov	r0, #1
   10e98:	bl	10ca8 <__assert_fail@plt+0x134>
   10e9c:	ldr	r3, [pc, #96]	; 10f04 <__assert_fail@plt+0x390>
   10ea0:	str	r0, [r3]
   10ea4:	add	sp, sp, #20
   10ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10eac:	ldr	r0, [pc, #84]	; 10f08 <__assert_fail@plt+0x394>
   10eb0:	bl	12a8c <error@@Base>
   10eb4:	mov	r1, #16
   10eb8:	mov	r0, r8
   10ebc:	bl	12ac8 <error@@Base+0x3c>
   10ec0:	mov	r5, r0
   10ec4:	ldr	r3, [r4, #8]
   10ec8:	str	r3, [r0, #8]
   10ecc:	mov	r1, r0
   10ed0:	ldr	r0, [pc, #28]	; 10ef4 <__assert_fail@plt+0x380>
   10ed4:	bl	12138 <__assert_fail@plt+0x15c4>
   10ed8:	b	10e40 <__assert_fail@plt+0x2cc>
   10edc:	ldr	r0, [pc, #40]	; 10f0c <__assert_fail@plt+0x398>
   10ee0:	bl	12a8c <error@@Base>
   10ee4:	andeq	sl, r2, r0, lsl #2
   10ee8:			; <UNDEFINED> instruction: 0x000303b4
   10eec:	andeq	sl, r2, ip, lsr #2
   10ef0:	andeq	r8, r2, r8, lsr #1
   10ef4:	andeq	sl, r2, ip, asr r1
   10ef8:	andeq	r0, r3, ip, lsr #7
   10efc:	andeq	r0, r3, r8, lsr #7
   10f00:	andeq	sl, r2, r4, lsr #2
   10f04:	andeq	sl, r2, r0, lsr #2
   10f08:	andeq	r3, r1, r8, lsr r6
   10f0c:	andeq	r3, r1, r4, asr r6
   10f10:	cmp	r1, #0
   10f14:	beq	10f7c <__assert_fail@plt+0x408>
   10f18:	push	{lr}		; (str lr, [sp, #-4]!)
   10f1c:	mov	r3, r0
   10f20:	ldr	r0, [r1, #8]
   10f24:	rsb	ip, r0, #0
   10f28:	cmp	ip, r3
   10f2c:	sublt	ip, r3, #1
   10f30:	addlt	r0, r0, ip
   10f34:	ldrlt	lr, [r1, #12]
   10f38:	biclt	r0, r0, #1
   10f3c:	ldrhlt	r0, [lr, r0]
   10f40:	strlt	ip, [r2]
   10f44:	movge	r0, #0
   10f48:	ldr	ip, [r1, #8]
   10f4c:	cmp	r3, ip
   10f50:	popge	{pc}		; (ldrge pc, [sp], #4)
   10f54:	add	r3, r3, #1
   10f58:	add	ip, ip, r3
   10f5c:	ldr	r1, [r1, #12]
   10f60:	bic	ip, ip, #1
   10f64:	ldrh	r1, [r1, ip]
   10f68:	add	r1, r1, #1
   10f6c:	cmp	r0, r1
   10f70:	strle	r3, [r2]
   10f74:	movle	r0, r1
   10f78:	pop	{pc}		; (ldr pc, [sp], #4)
   10f7c:	mov	r0, #0
   10f80:	bx	lr
   10f84:	push	{r4, r5, r6, r7, lr}
   10f88:	sub	sp, sp, #12
   10f8c:	mov	r4, r0
   10f90:	mov	r5, r1
   10f94:	add	r2, sp, #4
   10f98:	ldr	r1, [r1]
   10f9c:	bl	10f10 <__assert_fail@plt+0x39c>
   10fa0:	add	r3, r4, r0
   10fa4:	ldr	r2, [pc, #204]	; 11078 <__assert_fail@plt+0x504>
   10fa8:	ldr	r6, [r2]
   10fac:	cmp	r0, r6
   10fb0:	bge	11028 <__assert_fail@plt+0x4b4>
   10fb4:	ldr	r2, [pc, #192]	; 1107c <__assert_fail@plt+0x508>
   10fb8:	ldr	r7, [r2]
   10fbc:	cmp	r3, r7
   10fc0:	bge	11040 <__assert_fail@plt+0x4cc>
   10fc4:	ldr	r2, [pc, #180]	; 11080 <__assert_fail@plt+0x50c>
   10fc8:	ldr	lr, [r2]
   10fcc:	add	r1, lr, r0, lsl #2
   10fd0:	ldr	r2, [pc, #172]	; 11084 <__assert_fail@plt+0x510>
   10fd4:	ldr	ip, [r2]
   10fd8:	add	r2, ip, r3, lsl #2
   10fdc:	ldr	lr, [lr, r0, lsl #2]
   10fe0:	ldr	ip, [ip, r3, lsl #2]
   10fe4:	ldr	lr, [lr]
   10fe8:	ldr	ip, [ip]
   10fec:	cmp	lr, ip
   10ff0:	bne	1105c <__assert_fail@plt+0x4e8>
   10ff4:	add	r0, r0, #1
   10ff8:	add	r3, r3, #1
   10ffc:	cmp	r0, r6
   11000:	beq	11030 <__assert_fail@plt+0x4bc>
   11004:	cmp	r3, r7
   11008:	beq	11050 <__assert_fail@plt+0x4dc>
   1100c:	ldr	lr, [r1, #4]!
   11010:	ldr	ip, [r2, #4]!
   11014:	ldr	lr, [lr]
   11018:	ldr	ip, [ip]
   1101c:	cmp	lr, ip
   11020:	beq	10ff4 <__assert_fail@plt+0x480>
   11024:	b	1105c <__assert_fail@plt+0x4e8>
   11028:	cmp	r0, r6
   1102c:	bne	11040 <__assert_fail@plt+0x4cc>
   11030:	add	r2, r4, #1
   11034:	ldr	r1, [pc, #76]	; 11088 <__assert_fail@plt+0x514>
   11038:	str	r2, [r1]
   1103c:	mov	r0, r6
   11040:	ldr	r2, [pc, #52]	; 1107c <__assert_fail@plt+0x508>
   11044:	ldr	r2, [r2]
   11048:	cmp	r2, r3
   1104c:	bne	1105c <__assert_fail@plt+0x4e8>
   11050:	sub	r3, r4, #1
   11054:	ldr	r2, [pc, #48]	; 1108c <__assert_fail@plt+0x518>
   11058:	str	r3, [r2]
   1105c:	ldr	r3, [r5, #8]
   11060:	add	r4, r4, r3
   11064:	ldr	r3, [r5, #12]
   11068:	bic	r4, r4, #1
   1106c:	strh	r0, [r3, r4]
   11070:	add	sp, sp, #12
   11074:	pop	{r4, r5, r6, r7, pc}
   11078:	andeq	r0, r3, ip, lsr #7
   1107c:	andeq	sl, r2, r4, lsr #2
   11080:	andeq	r0, r3, r8, lsr #7
   11084:	andeq	sl, r2, r0, lsr #2
   11088:			; <UNDEFINED> instruction: 0x000303b0
   1108c:	andeq	r0, r3, r4, lsr #7
   11090:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11094:	ldr	r3, [pc, #200]	; 11164 <__assert_fail@plt+0x5f0>
   11098:	ldr	r3, [r3]
   1109c:	rsb	r3, r3, #0
   110a0:	ldr	r2, [pc, #192]	; 11168 <__assert_fail@plt+0x5f4>
   110a4:	str	r3, [r2]
   110a8:	ldr	r3, [pc, #188]	; 1116c <__assert_fail@plt+0x5f8>
   110ac:	ldr	r2, [r3]
   110b0:	ldr	r3, [pc, #184]	; 11170 <__assert_fail@plt+0x5fc>
   110b4:	str	r2, [r3]
   110b8:	mvn	r5, #0
   110bc:	ldr	sl, [pc, #168]	; 1116c <__assert_fail@plt+0x5f8>
   110c0:	ldr	r9, [pc, #156]	; 11164 <__assert_fail@plt+0x5f0>
   110c4:	ldr	r6, [pc, #156]	; 11168 <__assert_fail@plt+0x5f4>
   110c8:	mov	fp, #16
   110cc:	mov	r8, r3
   110d0:	ldr	r2, [r9]
   110d4:	ldr	r3, [sl]
   110d8:	sub	r3, r3, r2
   110dc:	ldr	r2, [r6]
   110e0:	cmp	r3, r2
   110e4:	blt	11160 <__assert_fail@plt+0x5ec>
   110e8:	mov	r1, fp
   110ec:	mov	r0, #1
   110f0:	bl	12ac8 <error@@Base+0x3c>
   110f4:	mov	r7, r0
   110f8:	add	r5, r5, #1
   110fc:	str	r5, [r0, #8]
   11100:	mov	r1, #2
   11104:	add	r0, r5, #1
   11108:	bl	12ac8 <error@@Base+0x3c>
   1110c:	str	r0, [r7, #12]
   11110:	mov	r1, r7
   11114:	ldr	r0, [pc, #88]	; 11174 <__assert_fail@plt+0x600>
   11118:	bl	115a4 <__assert_fail@plt+0xa30>
   1111c:	rsb	r4, r5, #0
   11120:	cmp	r5, r4
   11124:	bge	11138 <__assert_fail@plt+0x5c4>
   11128:	b	110d0 <__assert_fail@plt+0x55c>
   1112c:	add	r4, r4, #2
   11130:	cmp	r5, r4
   11134:	blt	110d0 <__assert_fail@plt+0x55c>
   11138:	ldr	r3, [r6]
   1113c:	cmp	r3, r4
   11140:	bgt	1112c <__assert_fail@plt+0x5b8>
   11144:	ldr	r3, [r8]
   11148:	cmp	r3, r4
   1114c:	blt	1112c <__assert_fail@plt+0x5b8>
   11150:	mov	r1, r7
   11154:	mov	r0, r4
   11158:	bl	10f84 <__assert_fail@plt+0x410>
   1115c:	b	1112c <__assert_fail@plt+0x5b8>
   11160:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11164:	andeq	r0, r3, ip, lsr #7
   11168:			; <UNDEFINED> instruction: 0x000303b0
   1116c:	andeq	sl, r2, r4, lsr #2
   11170:	andeq	r0, r3, r4, lsr #7
   11174:	andeq	sl, r2, ip, asr #2
   11178:	push	{r4, r5, r6, r7, lr}
   1117c:	sub	sp, sp, #12
   11180:	ldr	r3, [pc, #128]	; 11208 <__assert_fail@plt+0x694>
   11184:	ldr	r0, [r3]
   11188:	ldr	r3, [pc, #124]	; 1120c <__assert_fail@plt+0x698>
   1118c:	ldr	r3, [r3]
   11190:	sub	r0, r0, r3
   11194:	ldr	r3, [pc, #116]	; 11210 <__assert_fail@plt+0x69c>
   11198:	ldr	r6, [r3, #4]
   1119c:	cmp	r6, #0
   111a0:	beq	11200 <__assert_fail@plt+0x68c>
   111a4:	ldr	r7, [pc, #104]	; 11214 <__assert_fail@plt+0x6a0>
   111a8:	mov	r5, #1
   111ac:	ldr	r3, [r6, #8]
   111b0:	add	r3, r0, r3
   111b4:	ldr	r2, [r6, #12]
   111b8:	bic	r3, r3, #1
   111bc:	ldrh	r4, [r2, r3]
   111c0:	add	r2, sp, #4
   111c4:	ldr	r1, [r6]
   111c8:	bl	10f10 <__assert_fail@plt+0x39c>
   111cc:	cmp	r4, r0
   111d0:	ble	111f0 <__assert_fail@plt+0x67c>
   111d4:	ldr	r2, [r7]
   111d8:	add	r3, r2, r4, lsl #2
   111dc:	add	r0, r2, r0, lsl #2
   111e0:	ldr	r2, [r3, #-4]!
   111e4:	strb	r5, [r2, #4]
   111e8:	cmp	r3, r0
   111ec:	bne	111e0 <__assert_fail@plt+0x66c>
   111f0:	ldr	r0, [sp, #4]
   111f4:	ldr	r6, [r6]
   111f8:	cmp	r6, #0
   111fc:	bne	111ac <__assert_fail@plt+0x638>
   11200:	add	sp, sp, #12
   11204:	pop	{r4, r5, r6, r7, pc}
   11208:	andeq	sl, r2, r4, lsr #2
   1120c:	andeq	r0, r3, ip, lsr #7
   11210:	andeq	sl, r2, ip, asr #2
   11214:	andeq	r0, r3, r8, lsr #7
   11218:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1121c:	mov	r7, r0
   11220:	mov	r9, r1
   11224:	mov	r8, r2
   11228:	bl	121e0 <__assert_fail@plt+0x166c>
   1122c:	add	r3, r7, #4096	; 0x1000
   11230:	ldr	r3, [r3, #3956]	; 0xf74
   11234:	cmp	r3, #0
   11238:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1123c:	mov	r6, #0
   11240:	add	r7, r7, #4096	; 0x1000
   11244:	ldr	fp, [pc, #172]	; 112f8 <__assert_fail@plt+0x784>
   11248:	mov	sl, #1
   1124c:	b	11260 <__assert_fail@plt+0x6ec>
   11250:	add	r6, r6, #1
   11254:	ldr	r3, [r7, #3956]	; 0xf74
   11258:	cmp	r3, r6
   1125c:	ble	112f4 <__assert_fail@plt+0x780>
   11260:	ldr	r3, [r7, #3952]	; 0xf70
   11264:	ldr	r3, [r3, r6, lsl #2]
   11268:	ldr	r4, [r3, #12]
   1126c:	ldr	r5, [r3, #16]
   11270:	mov	r2, r5
   11274:	mov	r1, r4
   11278:	mov	r0, fp
   1127c:	bl	11c58 <__assert_fail@plt+0x10e4>
   11280:	mov	r2, r5
   11284:	mov	r1, r4
   11288:	mov	r0, r9
   1128c:	bl	11c58 <__assert_fail@plt+0x10e4>
   11290:	ldr	r3, [r7, #3952]	; 0xf70
   11294:	ldr	r3, [r3, r6, lsl #2]
   11298:	ldr	r0, [r3, #8]
   1129c:	bl	10ae4 <strlen@plt>
   112a0:	mov	r2, r5
   112a4:	mov	r1, r4
   112a8:	add	r0, r9, r0, lsl #3
   112ac:	bl	11c58 <__assert_fail@plt+0x10e4>
   112b0:	cmp	r8, #0
   112b4:	beq	11250 <__assert_fail@plt+0x6dc>
   112b8:	cmp	r4, r5
   112bc:	movne	r5, #0
   112c0:	moveq	r5, #1
   112c4:	mov	r2, r5
   112c8:	mov	r1, sl
   112cc:	mov	r0, r8
   112d0:	bl	11c58 <__assert_fail@plt+0x10e4>
   112d4:	cmp	r4, #10
   112d8:	lslle	r0, r4, #3
   112dc:	movgt	r0, #88	; 0x58
   112e0:	mov	r2, r5
   112e4:	mov	r1, sl
   112e8:	add	r0, r8, r0
   112ec:	bl	11c58 <__assert_fail@plt+0x10e4>
   112f0:	b	11250 <__assert_fail@plt+0x6dc>
   112f4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112f8:	ldrdeq	ip, [r2], -r4
   112fc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11300:	ldr	r3, [pc, #192]	; 113c8 <__assert_fail@plt+0x854>
   11304:	ldr	r3, [r3, #12]
   11308:	cmp	r3, #0
   1130c:	ble	11328 <__assert_fail@plt+0x7b4>
   11310:	mov	r7, #0
   11314:	mov	sl, r7
   11318:	ldr	r8, [pc, #168]	; 113c8 <__assert_fail@plt+0x854>
   1131c:	ldr	r9, [pc, #168]	; 113cc <__assert_fail@plt+0x858>
   11320:	ldr	fp, [pc, #168]	; 113d0 <__assert_fail@plt+0x85c>
   11324:	b	11340 <__assert_fail@plt+0x7cc>
   11328:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1132c:	add	sl, sl, #1
   11330:	add	r7, r7, #8
   11334:	ldr	r3, [r8, #12]
   11338:	cmp	r3, sl
   1133c:	ble	113c4 <__assert_fail@plt+0x850>
   11340:	ldr	r3, [r8, #12]
   11344:	cmp	r3, sl
   11348:	ble	1132c <__assert_fail@plt+0x7b8>
   1134c:	ldr	r3, [r9]
   11350:	add	r3, r3, r7
   11354:	ldrb	r5, [r3, #4]
   11358:	ands	r5, r5, #1
   1135c:	moveq	r2, #1
   11360:	movne	r2, #0
   11364:	mov	r1, #1
   11368:	ldr	r0, [pc, #100]	; 113d4 <__assert_fail@plt+0x860>
   1136c:	bl	11c58 <__assert_fail@plt+0x10e4>
   11370:	add	r6, sl, #1
   11374:	mov	r4, #0
   11378:	ldr	r3, [r8, #12]
   1137c:	cmp	r6, r3
   11380:	bge	1132c <__assert_fail@plt+0x7b8>
   11384:	ldr	r3, [r9]
   11388:	add	r3, r3, r4
   1138c:	add	r3, r3, r7
   11390:	ldrb	r3, [r3, #12]
   11394:	ands	r5, r5, r3
   11398:	add	r0, r4, #936	; 0x3a8
   1139c:	moveq	r2, #1
   113a0:	movne	r2, #0
   113a4:	mov	r1, #1
   113a8:	add	r0, fp, r0
   113ac:	bl	11c58 <__assert_fail@plt+0x10e4>
   113b0:	add	r6, r6, #1
   113b4:	add	r4, r4, #8
   113b8:	cmp	r4, #56	; 0x38
   113bc:	bne	11378 <__assert_fail@plt+0x804>
   113c0:	b	1132c <__assert_fail@plt+0x7b8>
   113c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113c8:	andeq	sl, r2, ip, lsr #2
   113cc:			; <UNDEFINED> instruction: 0x000303b4
   113d0:	ldrdeq	ip, [r2], -r4
   113d4:	andeq	ip, r2, r4, ror r4
   113d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   113dc:	ldr	r3, [pc, #160]	; 11484 <__assert_fail@plt+0x910>
   113e0:	ldr	r3, [r3, #12]
   113e4:	cmp	r3, #0
   113e8:	ble	11458 <__assert_fail@plt+0x8e4>
   113ec:	mov	r4, #0
   113f0:	ldr	r6, [pc, #144]	; 11488 <__assert_fail@plt+0x914>
   113f4:	ldr	sl, [pc, #144]	; 1148c <__assert_fail@plt+0x918>
   113f8:	ldr	r9, [pc, #144]	; 11490 <__assert_fail@plt+0x91c>
   113fc:	mov	r8, #1
   11400:	ldr	r7, [pc, #124]	; 11484 <__assert_fail@plt+0x910>
   11404:	lsl	r5, r4, #3
   11408:	ldr	r3, [r6]
   1140c:	ldr	r3, [r3, r4, lsl #3]
   11410:	ldr	r0, [r3, #8]
   11414:	bl	117f8 <__assert_fail@plt+0xc84>
   11418:	ldr	r2, [r6]
   1141c:	add	r5, r2, r5
   11420:	ldrb	r3, [r5, #4]
   11424:	ldr	r1, [r2, r4, lsl #3]
   11428:	clz	r3, r3
   1142c:	lsr	r3, r3, #5
   11430:	mov	r2, r8
   11434:	ldr	r1, [r1, #8]
   11438:	cmp	r0, #0
   1143c:	movne	r0, sl
   11440:	moveq	r0, r9
   11444:	bl	11c74 <__assert_fail@plt+0x1100>
   11448:	add	r4, r4, #1
   1144c:	ldr	r3, [r7, #12]
   11450:	cmp	r3, r4
   11454:	bgt	11404 <__assert_fail@plt+0x890>
   11458:	ldr	r4, [pc, #52]	; 11494 <__assert_fail@plt+0x920>
   1145c:	mov	r2, #0
   11460:	mov	r1, r4
   11464:	add	r0, r4, #984	; 0x3d8
   11468:	bl	11218 <__assert_fail@plt+0x6a4>
   1146c:	add	r2, r4, #816	; 0x330
   11470:	add	r1, r4, #408	; 0x198
   11474:	ldr	r0, [pc, #20]	; 11490 <__assert_fail@plt+0x91c>
   11478:	bl	11218 <__assert_fail@plt+0x6a4>
   1147c:	bl	112fc <__assert_fail@plt+0x788>
   11480:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11484:	andeq	sl, r2, ip, lsr #2
   11488:			; <UNDEFINED> instruction: 0x000303b4
   1148c:			; <UNDEFINED> instruction: 0x0002c4b4
   11490:	andeq	lr, r2, ip, lsr #8
   11494:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   11498:	push	{lr}		; (str lr, [sp, #-4]!)
   1149c:	sub	sp, sp, #12
   114a0:	add	ip, sp, #8
   114a4:	str	r0, [ip, #-4]!
   114a8:	mov	r4, r1
   114ac:	ldr	r3, [pc, #92]	; 11510 <__assert_fail@plt+0x99c>
   114b0:	ldr	r2, [pc, #92]	; 11514 <__assert_fail@plt+0x9a0>
   114b4:	mov	r0, ip
   114b8:	bl	12bcc <error@@Base+0x140>
   114bc:	ldr	r3, [sp, #4]
   114c0:	sub	r3, r3, #2
   114c4:	cmp	r3, #1
   114c8:	bls	114d4 <__assert_fail@plt+0x960>
   114cc:	ldr	r0, [pc, #68]	; 11518 <__assert_fail@plt+0x9a4>
   114d0:	bl	12a8c <error@@Base>
   114d4:	ldr	r3, [pc, #64]	; 1151c <__assert_fail@plt+0x9a8>
   114d8:	ldr	r0, [r3]
   114dc:	bl	11740 <__assert_fail@plt+0xbcc>
   114e0:	mov	r0, r4
   114e4:	bl	10d38 <__assert_fail@plt+0x1c4>
   114e8:	bl	11090 <__assert_fail@plt+0x51c>
   114ec:	bl	11178 <__assert_fail@plt+0x604>
   114f0:	bl	113d8 <__assert_fail@plt+0x864>
   114f4:	ldr	r3, [sp, #4]
   114f8:	cmp	r3, #3
   114fc:	ldreq	r1, [r4, #8]
   11500:	movne	r1, #0
   11504:	ldr	r0, [pc, #20]	; 11520 <__assert_fail@plt+0x9ac>
   11508:	bl	11ef8 <__assert_fail@plt+0x1384>
   1150c:	bl	12a34 <__assert_fail@plt+0x1ec0>
   11510:	strheq	r8, [r2], -r4
   11514:	andeq	r3, r1, ip, ror #12
   11518:	andeq	r3, r1, ip, lsr #13
   1151c:	andeq	sl, r2, r8, lsr #2
   11520:	ldrdeq	ip, [r2], -r4
   11524:	push	{r4, lr}
   11528:	mov	r4, r0
   1152c:	str	r1, [r2]
   11530:	str	r3, [r2, #4]
   11534:	cmp	r1, #0
   11538:	strne	r2, [r1, #4]
   1153c:	streq	r2, [r0]
   11540:	cmp	r3, #0
   11544:	strne	r2, [r3]
   11548:	streq	r2, [r0, #4]
   1154c:	ldr	r0, [r0, #8]
   11550:	cmp	r0, #0
   11554:	beq	11564 <__assert_fail@plt+0x9f0>
   11558:	bl	10a00 <free@plt>
   1155c:	mov	r3, #0
   11560:	str	r3, [r4, #8]
   11564:	ldr	r3, [r4, #12]
   11568:	add	r3, r3, #1
   1156c:	str	r3, [r4, #12]
   11570:	pop	{r4, pc}
   11574:	mov	r3, #0
   11578:	str	r3, [r0, #4]
   1157c:	str	r3, [r0]
   11580:	str	r3, [r0, #8]
   11584:	str	r3, [r0, #12]
   11588:	bx	lr
   1158c:	push	{r4, lr}
   11590:	ldr	r3, [r0]
   11594:	mov	r2, r1
   11598:	mov	r1, #0
   1159c:	bl	11524 <__assert_fail@plt+0x9b0>
   115a0:	pop	{r4, pc}
   115a4:	push	{r4, lr}
   115a8:	mov	r3, #0
   115ac:	mov	r2, r1
   115b0:	ldr	r1, [r0, #4]
   115b4:	bl	11524 <__assert_fail@plt+0x9b0>
   115b8:	pop	{r4, pc}
   115bc:	push	{r4, lr}
   115c0:	mov	ip, r2
   115c4:	mov	r3, r2
   115c8:	mov	r2, r1
   115cc:	ldr	r1, [ip]
   115d0:	bl	11524 <__assert_fail@plt+0x9b0>
   115d4:	pop	{r4, pc}
   115d8:	push	{r4, lr}
   115dc:	ldr	r3, [r1, #4]
   115e0:	bl	11524 <__assert_fail@plt+0x9b0>
   115e4:	pop	{r4, pc}
   115e8:	push	{r4, lr}
   115ec:	mov	r4, r0
   115f0:	ldr	r3, [r1]
   115f4:	cmp	r3, #0
   115f8:	ldrne	r2, [r1, #4]
   115fc:	strne	r2, [r3, #4]
   11600:	ldreq	r3, [r1, #4]
   11604:	streq	r3, [r0]
   11608:	ldr	r3, [r1, #4]
   1160c:	cmp	r3, #0
   11610:	ldrne	r2, [r1]
   11614:	strne	r2, [r3]
   11618:	ldreq	r3, [r1]
   1161c:	streq	r3, [r0, #4]
   11620:	mov	r3, #0
   11624:	str	r3, [r1, #4]
   11628:	str	r3, [r1]
   1162c:	ldr	r0, [r0, #8]
   11630:	cmp	r0, r3
   11634:	beq	11644 <__assert_fail@plt+0xad0>
   11638:	bl	10a00 <free@plt>
   1163c:	mov	r3, #0
   11640:	str	r3, [r4, #8]
   11644:	ldr	r3, [r4, #12]
   11648:	sub	r3, r3, #1
   1164c:	str	r3, [r4, #12]
   11650:	pop	{r4, pc}
   11654:	ldr	r3, [r0, #8]
   11658:	cmp	r3, #0
   1165c:	bxne	lr
   11660:	ldr	r3, [r0, #12]
   11664:	cmp	r3, #0
   11668:	bxeq	lr
   1166c:	push	{r4, lr}
   11670:	mov	r4, r0
   11674:	mov	r1, #4
   11678:	mov	r0, r3
   1167c:	bl	12ac8 <error@@Base+0x3c>
   11680:	str	r0, [r4, #8]
   11684:	ldr	r3, [r4]
   11688:	cmp	r3, #0
   1168c:	popeq	{r4, pc}
   11690:	mov	r2, #0
   11694:	ldr	r1, [r4, #8]
   11698:	str	r3, [r1, r2]
   1169c:	ldr	r3, [r3, #4]
   116a0:	add	r2, r2, #4
   116a4:	cmp	r3, #0
   116a8:	bne	11694 <__assert_fail@plt+0xb20>
   116ac:	pop	{r4, pc}
   116b0:	push	{r4, r5, r6, lr}
   116b4:	mov	r5, r0
   116b8:	mov	r6, r1
   116bc:	ldr	r4, [r0]
   116c0:	cmp	r4, #0
   116c4:	popeq	{r4, r5, r6, pc}
   116c8:	mov	r1, r4
   116cc:	mov	r0, r5
   116d0:	bl	115e8 <__assert_fail@plt+0xa74>
   116d4:	mov	r0, r4
   116d8:	blx	r6
   116dc:	ldr	r4, [r5]
   116e0:	cmp	r4, #0
   116e4:	bne	116c8 <__assert_fail@plt+0xb54>
   116e8:	pop	{r4, r5, r6, pc}
   116ec:	push	{r4, lr}
   116f0:	mov	r4, r0
   116f4:	mov	r1, r0
   116f8:	ldr	r0, [pc, #56]	; 11738 <__assert_fail@plt+0xbc4>
   116fc:	bl	120f0 <__assert_fail@plt+0x157c>
   11700:	cmp	r0, #0
   11704:	beq	11718 <__assert_fail@plt+0xba4>
   11708:	mov	r1, r4
   1170c:	ldr	r0, [pc, #40]	; 1173c <__assert_fail@plt+0xbc8>
   11710:	bl	12de4 <error@@Base+0x358>
   11714:	pop	{r4, pc}
   11718:	mov	r1, #12
   1171c:	mov	r0, #1
   11720:	bl	12ac8 <error@@Base+0x3c>
   11724:	mov	r1, r0
   11728:	str	r4, [r0, #8]
   1172c:	ldr	r0, [pc, #4]	; 11738 <__assert_fail@plt+0xbc4>
   11730:	bl	12138 <__assert_fail@plt+0x15c4>
   11734:	pop	{r4, pc}
   11738:	strdeq	r8, [r2], -r4
   1173c:	andeq	r3, r1, ip, ror r8
   11740:	push	{r4, r5, r6, lr}
   11744:	ldr	r3, [pc, #152]	; 117e4 <__assert_fail@plt+0xc70>
   11748:	ldrb	r3, [r3, #-128]	; 0xffffff80
   1174c:	cmp	r3, #0
   11750:	bne	117bc <__assert_fail@plt+0xc48>
   11754:	cmp	r0, #0
   11758:	beq	117c4 <__assert_fail@plt+0xc50>
   1175c:	ldr	r4, [pc, #128]	; 117e4 <__assert_fail@plt+0xc70>
   11760:	sub	r5, r4, #124	; 0x7c
   11764:	ldr	r2, [pc, #124]	; 117e8 <__assert_fail@plt+0xc74>
   11768:	mov	r1, r0
   1176c:	mov	r0, r5
   11770:	bl	12e58 <error@@Base+0x3cc>
   11774:	mov	r1, r5
   11778:	sub	r0, r4, #108	; 0x6c
   1177c:	bl	123ac <__assert_fail@plt+0x1838>
   11780:	ldr	r1, [pc, #100]	; 117ec <__assert_fail@plt+0xc78>
   11784:	mov	r0, r5
   11788:	bl	116b0 <__assert_fail@plt+0xb3c>
   1178c:	ldr	r4, [r4, #-108]	; 0xffffff94
   11790:	cmp	r4, #0
   11794:	beq	117ac <__assert_fail@plt+0xc38>
   11798:	ldr	r0, [r4, #8]
   1179c:	bl	116ec <__assert_fail@plt+0xb78>
   117a0:	ldr	r4, [r4, #4]
   117a4:	cmp	r4, #0
   117a8:	bne	11798 <__assert_fail@plt+0xc24>
   117ac:	mov	r2, #1
   117b0:	ldr	r3, [pc, #44]	; 117e4 <__assert_fail@plt+0xc70>
   117b4:	strb	r2, [r3, #-128]	; 0xffffff80
   117b8:	pop	{r4, r5, r6, pc}
   117bc:	ldr	r0, [pc, #44]	; 117f0 <__assert_fail@plt+0xc7c>
   117c0:	bl	12a8c <error@@Base>
   117c4:	ldr	r5, [pc, #40]	; 117f4 <__assert_fail@plt+0xc80>
   117c8:	sub	r4, r5, #4
   117cc:	add	r5, r5, #436	; 0x1b4
   117d0:	ldr	r0, [r4, #4]!
   117d4:	bl	116ec <__assert_fail@plt+0xb78>
   117d8:	cmp	r5, r4
   117dc:	bne	117d0 <__assert_fail@plt+0xc5c>
   117e0:	b	117ac <__assert_fail@plt+0xc38>
   117e4:	andeq	sl, r2, ip, ror #1
   117e8:	andeq	r8, r2, ip, asr #1
   117ec:	andeq	r0, r1, r0, lsl #20
   117f0:	muleq	r1, r0, r8
   117f4:	andeq	r3, r1, r4, asr #13
   117f8:	push	{r4, lr}
   117fc:	ldr	r3, [pc, #40]	; 1182c <__assert_fail@plt+0xcb8>
   11800:	ldrb	r3, [r3, #-128]	; 0xffffff80
   11804:	cmp	r3, #0
   11808:	beq	11824 <__assert_fail@plt+0xcb0>
   1180c:	mov	r1, r0
   11810:	ldr	r0, [pc, #24]	; 11830 <__assert_fail@plt+0xcbc>
   11814:	bl	120f0 <__assert_fail@plt+0x157c>
   11818:	adds	r0, r0, #0
   1181c:	movne	r0, #1
   11820:	pop	{r4, pc}
   11824:	ldr	r0, [pc, #8]	; 11834 <__assert_fail@plt+0xcc0>
   11828:	bl	12a8c <error@@Base>
   1182c:	andeq	sl, r2, ip, ror #1
   11830:	strdeq	r8, [r2], -r4
   11834:			; <UNDEFINED> instruction: 0x000138b0
   11838:	push	{r4, lr}
   1183c:	mov	r2, r0
   11840:	mov	r1, #99	; 0x63
   11844:	ldr	r0, [pc, #12]	; 11858 <__assert_fail@plt+0xce4>
   11848:	bl	10a18 <fgets@plt>
   1184c:	adds	r0, r0, #0
   11850:	movne	r0, #1
   11854:	pop	{r4, pc}
   11858:	muleq	r2, r0, r0
   1185c:	push	{r4, lr}
   11860:	mov	r4, r1
   11864:	bl	11838 <__assert_fail@plt+0xcc4>
   11868:	cmp	r0, #0
   1186c:	bne	11878 <__assert_fail@plt+0xd04>
   11870:	mov	r0, #0
   11874:	pop	{r4, pc}
   11878:	mov	r2, r4
   1187c:	ldr	r1, [pc, #20]	; 11898 <__assert_fail@plt+0xd24>
   11880:	ldr	r0, [pc, #20]	; 1189c <__assert_fail@plt+0xd28>
   11884:	bl	10afc <__isoc99_sscanf@plt>
   11888:	cmp	r0, #1
   1188c:	movne	r0, #0
   11890:	moveq	r0, #1
   11894:	pop	{r4, pc}
   11898:	andeq	r3, r1, ip, asr #23
   1189c:	muleq	r2, r0, r0
   118a0:	push	{r4, lr}
   118a4:	ldr	r2, [r1]
   118a8:	cmp	r2, #0
   118ac:	beq	118e4 <__assert_fail@plt+0xd70>
   118b0:	ldr	r3, [r1, #4]
   118b4:	sub	r3, r2, r3
   118b8:	vmov	s14, r3
   118bc:	vcvt.f64.s32	d7, s14
   118c0:	vldr	d6, [pc, #56]	; 11900 <__assert_fail@plt+0xd8c>
   118c4:	vmul.f64	d7, d7, d6
   118c8:	vmov	s13, r2
   118cc:	vcvt.f64.s32	d6, s13
   118d0:	vdiv.f64	d5, d7, d6
   118d4:	vmov	r2, r3, d5
   118d8:	ldr	r1, [pc, #40]	; 11908 <__assert_fail@plt+0xd94>
   118dc:	bl	10af0 <fprintf@plt>
   118e0:	pop	{r4, pc}
   118e4:	mov	r3, r0
   118e8:	mov	r2, #8
   118ec:	mov	r1, #1
   118f0:	ldr	r0, [pc, #20]	; 1190c <__assert_fail@plt+0xd98>
   118f4:	bl	10a6c <fwrite@plt>
   118f8:	pop	{r4, pc}
   118fc:	nop			; (mov r0, r0)
   11900:	andeq	r0, r0, r0
   11904:	subsmi	r0, r9, r0
   11908:	andeq	r3, r1, ip, asr fp
   1190c:	andeq	r3, r1, r0, asr fp
   11910:	push	{r4, r5, r6, lr}
   11914:	mov	r4, r0
   11918:	subs	r5, r1, #0
   1191c:	beq	11954 <__assert_fail@plt+0xde0>
   11920:	ldr	r3, [r5, #4]
   11924:	ldr	r2, [r5]
   11928:	ldr	r1, [pc, #60]	; 1196c <__assert_fail@plt+0xdf8>
   1192c:	bl	10af0 <fprintf@plt>
   11930:	mov	r1, r5
   11934:	mov	r0, r4
   11938:	bl	118a0 <__assert_fail@plt+0xd2c>
   1193c:	mov	r3, r4
   11940:	mov	r2, #3
   11944:	mov	r1, #1
   11948:	ldr	r0, [pc, #32]	; 11970 <__assert_fail@plt+0xdfc>
   1194c:	bl	10a6c <fwrite@plt>
   11950:	pop	{r4, r5, r6, pc}
   11954:	mov	r3, r0
   11958:	mov	r2, #26
   1195c:	mov	r1, #1
   11960:	ldr	r0, [pc, #12]	; 11974 <__assert_fail@plt+0xe00>
   11964:	bl	10a6c <fwrite@plt>
   11968:	b	1193c <__assert_fail@plt+0xdc8>
   1196c:	andeq	r3, r1, r4, ror #22
   11970:	andeq	r3, r1, ip, lsl #23
   11974:	andeq	r3, r1, r0, ror fp
   11978:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1197c:	mov	r6, r0
   11980:	mov	r5, r1
   11984:	mov	r7, r2
   11988:	ldrb	r9, [sp, #32]
   1198c:	ldrb	sl, [sp, #36]	; 0x24
   11990:	mov	r2, r3
   11994:	ldr	r1, [pc, #240]	; 11a8c <__assert_fail@plt+0xf18>
   11998:	bl	10af0 <fprintf@plt>
   1199c:	mov	r1, #0
   119a0:	mov	r0, r6
   119a4:	bl	11910 <__assert_fail@plt+0xd9c>
   119a8:	cmp	r9, #0
   119ac:	bne	11a68 <__assert_fail@plt+0xef4>
   119b0:	ldr	r2, [pc, #216]	; 11a90 <__assert_fail@plt+0xf1c>
   119b4:	ldr	r1, [pc, #216]	; 11a94 <__assert_fail@plt+0xf20>
   119b8:	mov	r0, r6
   119bc:	bl	10af0 <fprintf@plt>
   119c0:	cmp	r7, #0
   119c4:	bgt	11a80 <__assert_fail@plt+0xf0c>
   119c8:	b	11a3c <__assert_fail@plt+0xec8>
   119cc:	add	r4, r4, #1
   119d0:	sxth	r4, r4
   119d4:	cmp	r7, r4
   119d8:	blt	11a08 <__assert_fail@plt+0xe94>
   119dc:	add	r1, r5, r4, lsl #3
   119e0:	ldr	r3, [r5, r4, lsl #3]
   119e4:	cmp	r3, #0
   119e8:	ble	119cc <__assert_fail@plt+0xe58>
   119ec:	mov	r0, r6
   119f0:	bl	11910 <__assert_fail@plt+0xd9c>
   119f4:	mov	r2, r4
   119f8:	mov	r1, r8
   119fc:	mov	r0, r6
   11a00:	bl	10af0 <fprintf@plt>
   11a04:	b	119cc <__assert_fail@plt+0xe58>
   11a08:	cmp	r9, #0
   11a0c:	beq	11a3c <__assert_fail@plt+0xec8>
   11a10:	add	r3, r7, #1
   11a14:	add	r1, r5, r3, lsl #3
   11a18:	ldr	r3, [r5, r3, lsl #3]
   11a1c:	cmp	r3, #0
   11a20:	ble	11a3c <__assert_fail@plt+0xec8>
   11a24:	mov	r0, r6
   11a28:	bl	11910 <__assert_fail@plt+0xd9c>
   11a2c:	mov	r2, r7
   11a30:	ldr	r1, [pc, #96]	; 11a98 <__assert_fail@plt+0xf24>
   11a34:	mov	r0, r6
   11a38:	bl	10af0 <fprintf@plt>
   11a3c:	cmp	sl, #0
   11a40:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11a44:	mov	r1, r5
   11a48:	mov	r0, r6
   11a4c:	bl	11910 <__assert_fail@plt+0xd9c>
   11a50:	mov	r3, r6
   11a54:	mov	r2, #7
   11a58:	mov	r1, #1
   11a5c:	ldr	r0, [pc, #56]	; 11a9c <__assert_fail@plt+0xf28>
   11a60:	bl	10a6c <fwrite@plt>
   11a64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11a68:	ldr	r2, [pc, #48]	; 11aa0 <__assert_fail@plt+0xf2c>
   11a6c:	ldr	r1, [pc, #32]	; 11a94 <__assert_fail@plt+0xf20>
   11a70:	mov	r0, r6
   11a74:	bl	10af0 <fprintf@plt>
   11a78:	cmp	r7, #0
   11a7c:	ble	11a10 <__assert_fail@plt+0xe9c>
   11a80:	mov	r4, #1
   11a84:	ldr	r8, [pc, #24]	; 11aa4 <__assert_fail@plt+0xf30>
   11a88:	b	119dc <__assert_fail@plt+0xe68>
   11a8c:	muleq	r1, r0, fp
   11a90:	andeq	r3, r1, r0, asr #23
   11a94:	andeq	r7, r1, r0, asr r0
   11a98:	andeq	r3, r1, r4, lsr #23
   11a9c:			; <UNDEFINED> instruction: 0x00013bb0
   11aa0:			; <UNDEFINED> instruction: 0x00013bb8
   11aa4:	muleq	r1, r8, fp
   11aa8:	push	{r4, r5, r6, r7, r8, lr}
   11aac:	mov	r6, r0
   11ab0:	mov	r5, r1
   11ab4:	mov	r7, r2
   11ab8:	mov	r0, r1
   11abc:	bl	121e0 <__assert_fail@plt+0x166c>
   11ac0:	add	r4, r5, #4096	; 0x1000
   11ac4:	ldr	r2, [pc, #136]	; 11b54 <__assert_fail@plt+0xfe0>
   11ac8:	ldr	r1, [r4, #3952]	; 0xf70
   11acc:	ldr	r0, [r4, #3956]	; 0xf74
   11ad0:	bl	1359c <error@@Base+0xb10>
   11ad4:	mov	r2, r7
   11ad8:	ldr	r1, [pc, #120]	; 11b58 <__assert_fail@plt+0xfe4>
   11adc:	mov	r0, r6
   11ae0:	bl	10af0 <fprintf@plt>
   11ae4:	mov	r1, #0
   11ae8:	mov	r0, r6
   11aec:	bl	11910 <__assert_fail@plt+0xd9c>
   11af0:	mov	r1, r6
   11af4:	mov	r0, #10
   11af8:	bl	10b20 <fputc@plt>
   11afc:	ldr	r3, [r4, #3956]	; 0xf74
   11b00:	cmp	r3, #0
   11b04:	pople	{r4, r5, r6, r7, r8, pc}
   11b08:	mov	r4, #0
   11b0c:	add	r5, r5, #4096	; 0x1000
   11b10:	ldr	r7, [pc, #68]	; 11b5c <__assert_fail@plt+0xfe8>
   11b14:	ldr	r3, [r5, #3952]	; 0xf70
   11b18:	ldr	r1, [r3, r4, lsl #2]
   11b1c:	add	r1, r1, #12
   11b20:	mov	r0, r6
   11b24:	bl	11910 <__assert_fail@plt+0xd9c>
   11b28:	ldr	r3, [r5, #3952]	; 0xf70
   11b2c:	ldr	r3, [r3, r4, lsl #2]
   11b30:	ldr	r2, [r3, #8]
   11b34:	mov	r1, r7
   11b38:	mov	r0, r6
   11b3c:	bl	10af0 <fprintf@plt>
   11b40:	add	r4, r4, #1
   11b44:	ldr	r3, [r5, #3956]	; 0xf74
   11b48:	cmp	r3, r4
   11b4c:	bgt	11b14 <__assert_fail@plt+0xfa0>
   11b50:	pop	{r4, r5, r6, r7, r8, pc}
   11b54:	andeq	r1, r1, r0, ror #22
   11b58:	muleq	r1, r0, fp
   11b5c:	andeq	r7, r1, r0, asr r0
   11b60:	push	{r4, lr}
   11b64:	ldr	r1, [r1, #8]
   11b68:	ldr	r0, [r0, #8]
   11b6c:	bl	128dc <__assert_fail@plt+0x1d68>
   11b70:	pop	{r4, pc}
   11b74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11b78:	sub	sp, sp, #8
   11b7c:	mov	r5, r0
   11b80:	mov	r4, r1
   11b84:	bl	11838 <__assert_fail@plt+0xcc4>
   11b88:	cmp	r0, #0
   11b8c:	moveq	r7, #0
   11b90:	beq	11c40 <__assert_fail@plt+0x10cc>
   11b94:	mov	r0, r5
   11b98:	bl	11838 <__assert_fail@plt+0xcc4>
   11b9c:	cmp	r0, #0
   11ba0:	moveq	r7, #0
   11ba4:	beq	11c40 <__assert_fail@plt+0x10cc>
   11ba8:	mov	r7, #0
   11bac:	ldr	sl, [pc, #152]	; 11c4c <__assert_fail@plt+0x10d8>
   11bb0:	ldr	r8, [pc, #152]	; 11c50 <__assert_fail@plt+0x10dc>
   11bb4:	add	r6, r8, #29
   11bb8:	ldr	r9, [pc, #148]	; 11c54 <__assert_fail@plt+0x10e0>
   11bbc:	b	11c30 <__assert_fail@plt+0x10bc>
   11bc0:	mov	r3, sp
   11bc4:	add	r2, sp, #4
   11bc8:	mov	r1, sl
   11bcc:	mov	r0, r8
   11bd0:	bl	10afc <__isoc99_sscanf@plt>
   11bd4:	cmp	r0, #2
   11bd8:	bne	11c40 <__assert_fail@plt+0x10cc>
   11bdc:	mov	r2, #10
   11be0:	mov	r1, #0
   11be4:	mov	r0, r6
   11be8:	bl	109e8 <strtol@plt>
   11bec:	cmp	r0, #0
   11bf0:	bne	11c0c <__assert_fail@plt+0x1098>
   11bf4:	mov	r1, r9
   11bf8:	mov	r0, r6
   11bfc:	bl	109dc <strcmp@plt>
   11c00:	cmp	r0, #0
   11c04:	ldreq	r7, [sp, #4]
   11c08:	movne	r0, #11
   11c0c:	add	r2, r4, r0, lsl #3
   11c10:	ldr	r3, [r4, r0, lsl #3]
   11c14:	ldr	r1, [sp, #4]
   11c18:	add	r3, r3, r1
   11c1c:	str	r3, [r4, r0, lsl #3]
   11c20:	ldr	r3, [r2, #4]
   11c24:	ldr	r1, [sp]
   11c28:	add	r3, r3, r1
   11c2c:	str	r3, [r2, #4]
   11c30:	mov	r0, r5
   11c34:	bl	11838 <__assert_fail@plt+0xcc4>
   11c38:	cmp	r0, #0
   11c3c:	bne	11bc0 <__assert_fail@plt+0x104c>
   11c40:	mov	r0, r7
   11c44:	add	sp, sp, #8
   11c48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c4c:	andeq	r3, r1, r8, asr #23
   11c50:	muleq	r2, r0, r0
   11c54:			; <UNDEFINED> instruction: 0x00013bb0
   11c58:	ldr	r3, [r0]
   11c5c:	add	r1, r3, r1
   11c60:	str	r1, [r0]
   11c64:	ldr	r3, [r0, #4]
   11c68:	add	r2, r3, r2
   11c6c:	str	r2, [r0, #4]
   11c70:	bx	lr
   11c74:	push	{r4, r5, r6, r7, r8, lr}
   11c78:	mov	r7, r0
   11c7c:	mov	r8, r1
   11c80:	mov	r6, r2
   11c84:	mov	r5, r3
   11c88:	bl	120f0 <__assert_fail@plt+0x157c>
   11c8c:	subs	r4, r0, #0
   11c90:	beq	11cb0 <__assert_fail@plt+0x113c>
   11c94:	ldr	r2, [r4, #12]
   11c98:	add	r2, r2, r6
   11c9c:	str	r2, [r4, #12]
   11ca0:	ldr	r3, [r4, #16]
   11ca4:	add	r3, r3, r5
   11ca8:	str	r3, [r4, #16]
   11cac:	pop	{r4, r5, r6, r7, r8, pc}
   11cb0:	mov	r1, #20
   11cb4:	mov	r0, #1
   11cb8:	bl	12ac8 <error@@Base+0x3c>
   11cbc:	mov	r4, r0
   11cc0:	mov	r0, r8
   11cc4:	bl	10a30 <strdup@plt>
   11cc8:	str	r0, [r4, #8]
   11ccc:	mov	r1, r4
   11cd0:	mov	r0, r7
   11cd4:	bl	12138 <__assert_fail@plt+0x15c4>
   11cd8:	b	11c94 <__assert_fail@plt+0x1120>
   11cdc:	push	{r4, r5, r6, r7, r8, r9, lr}
   11ce0:	sub	sp, sp, #12
   11ce4:	mov	r5, r0
   11ce8:	mov	r6, r1
   11cec:	bl	11838 <__assert_fail@plt+0xcc4>
   11cf0:	cmp	r0, #0
   11cf4:	beq	11d6c <__assert_fail@plt+0x11f8>
   11cf8:	mov	r0, r5
   11cfc:	bl	11838 <__assert_fail@plt+0xcc4>
   11d00:	cmp	r0, #0
   11d04:	beq	11d6c <__assert_fail@plt+0x11f8>
   11d08:	ldr	r9, [pc, #100]	; 11d74 <__assert_fail@plt+0x1200>
   11d0c:	ldr	r4, [pc, #100]	; 11d78 <__assert_fail@plt+0x1204>
   11d10:	mov	r8, #0
   11d14:	add	r7, r4, #29
   11d18:	b	11d5c <__assert_fail@plt+0x11e8>
   11d1c:	mov	r3, sp
   11d20:	add	r2, sp, #4
   11d24:	mov	r1, r9
   11d28:	mov	r0, r4
   11d2c:	bl	10afc <__isoc99_sscanf@plt>
   11d30:	cmp	r0, #2
   11d34:	bne	11d6c <__assert_fail@plt+0x11f8>
   11d38:	mov	r0, r4
   11d3c:	bl	10ae4 <strlen@plt>
   11d40:	add	r0, r4, r0
   11d44:	strb	r8, [r0, #-1]
   11d48:	ldr	r3, [sp]
   11d4c:	ldr	r2, [sp, #4]
   11d50:	mov	r1, r7
   11d54:	mov	r0, r6
   11d58:	bl	11c74 <__assert_fail@plt+0x1100>
   11d5c:	mov	r0, r5
   11d60:	bl	11838 <__assert_fail@plt+0xcc4>
   11d64:	cmp	r0, #0
   11d68:	bne	11d1c <__assert_fail@plt+0x11a8>
   11d6c:	add	sp, sp, #12
   11d70:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11d74:	andeq	r3, r1, r8, asr #23
   11d78:	muleq	r2, r0, r0
   11d7c:	push	{r4, r5, r6, r7, lr}
   11d80:	sub	sp, sp, #12
   11d84:	mov	r5, r0
   11d88:	mov	r6, r1
   11d8c:	ldr	r1, [pc, #332]	; 11ee0 <__assert_fail@plt+0x136c>
   11d90:	mov	r0, r6
   11d94:	bl	12b60 <error@@Base+0xd4>
   11d98:	mov	r4, r0
   11d9c:	bl	11838 <__assert_fail@plt+0xcc4>
   11da0:	cmp	r0, #0
   11da4:	beq	11ecc <__assert_fail@plt+0x1358>
   11da8:	mov	r2, #45	; 0x2d
   11dac:	ldr	r1, [pc, #304]	; 11ee4 <__assert_fail@plt+0x1370>
   11db0:	ldr	r0, [pc, #304]	; 11ee8 <__assert_fail@plt+0x1374>
   11db4:	bl	10b50 <strncmp@plt>
   11db8:	cmp	r0, #0
   11dbc:	bne	11ecc <__assert_fail@plt+0x1358>
   11dc0:	mov	r0, r4
   11dc4:	bl	11838 <__assert_fail@plt+0xcc4>
   11dc8:	cmp	r0, #0
   11dcc:	beq	11ecc <__assert_fail@plt+0x1358>
   11dd0:	ldr	r1, [pc, #276]	; 11eec <__assert_fail@plt+0x1378>
   11dd4:	ldr	r0, [pc, #268]	; 11ee8 <__assert_fail@plt+0x1374>
   11dd8:	bl	109dc <strcmp@plt>
   11ddc:	cmp	r0, #0
   11de0:	bne	11ecc <__assert_fail@plt+0x1358>
   11de4:	add	r1, sp, #4
   11de8:	mov	r0, r4
   11dec:	bl	1185c <__assert_fail@plt+0xce8>
   11df0:	cmp	r0, #0
   11df4:	beq	11ecc <__assert_fail@plt+0x1358>
   11df8:	mov	r1, sp
   11dfc:	mov	r0, r4
   11e00:	bl	1185c <__assert_fail@plt+0xce8>
   11e04:	cmp	r0, #0
   11e08:	beq	11ecc <__assert_fail@plt+0x1358>
   11e0c:	mov	r0, r4
   11e10:	bl	11838 <__assert_fail@plt+0xcc4>
   11e14:	cmp	r0, #0
   11e18:	beq	11ecc <__assert_fail@plt+0x1358>
   11e1c:	mov	r0, r4
   11e20:	bl	11838 <__assert_fail@plt+0xcc4>
   11e24:	cmp	r0, #0
   11e28:	beq	11ecc <__assert_fail@plt+0x1358>
   11e2c:	ldr	r3, [r5]
   11e30:	ldr	r2, [sp, #4]
   11e34:	add	r3, r3, r2
   11e38:	str	r3, [r5]
   11e3c:	ldr	r3, [r5, #4]
   11e40:	ldr	r2, [sp]
   11e44:	add	r3, r3, r2
   11e48:	str	r3, [r5, #4]
   11e4c:	add	r1, r5, #8
   11e50:	mov	r0, r4
   11e54:	bl	11b74 <__assert_fail@plt+0x1000>
   11e58:	mov	r7, r0
   11e5c:	add	r1, r5, #416	; 0x1a0
   11e60:	mov	r0, r4
   11e64:	bl	11b74 <__assert_fail@plt+0x1000>
   11e68:	mov	r6, r0
   11e6c:	add	r1, r5, #824	; 0x338
   11e70:	mov	r0, r4
   11e74:	bl	11b74 <__assert_fail@plt+0x1000>
   11e78:	ldr	r3, [sp, #4]
   11e7c:	cmp	r3, #0
   11e80:	ble	11ebc <__assert_fail@plt+0x1348>
   11e84:	add	r1, r5, #920	; 0x398
   11e88:	mov	r0, r4
   11e8c:	bl	11b74 <__assert_fail@plt+0x1000>
   11e90:	cmp	r7, #0
   11e94:	ble	11ea4 <__assert_fail@plt+0x1330>
   11e98:	add	r1, r5, #992	; 0x3e0
   11e9c:	mov	r0, r4
   11ea0:	bl	11cdc <__assert_fail@plt+0x1168>
   11ea4:	cmp	r6, #0
   11ea8:	ble	11ebc <__assert_fail@plt+0x1348>
   11eac:	add	r1, r5, #9024	; 0x2340
   11eb0:	add	r1, r1, #24
   11eb4:	mov	r0, r4
   11eb8:	bl	11cdc <__assert_fail@plt+0x1168>
   11ebc:	mov	r0, r4
   11ec0:	bl	12958 <__assert_fail@plt+0x1de4>
   11ec4:	add	sp, sp, #12
   11ec8:	pop	{r4, r5, r6, r7, pc}
   11ecc:	ldr	r1, [pc, #28]	; 11ef0 <__assert_fail@plt+0x137c>
   11ed0:	cmp	r6, #0
   11ed4:	movne	r1, r6
   11ed8:	ldr	r0, [pc, #20]	; 11ef4 <__assert_fail@plt+0x1380>
   11edc:	bl	12b18 <error@@Base+0x8c>
   11ee0:	andeq	r3, r1, r0, asr #20
   11ee4:	ldrdeq	r3, [r1], -r8
   11ee8:	muleq	r2, r0, r0
   11eec:	andeq	r7, r1, r4, asr #2
   11ef0:	ldrdeq	r3, [r1], -r0
   11ef4:	andeq	r3, r1, r8, lsl #24
   11ef8:	push	{r4, r5, r6, r7, lr}
   11efc:	sub	sp, sp, #12
   11f00:	mov	r4, r0
   11f04:	mov	r0, r1
   11f08:	ldr	r1, [pc, #292]	; 12034 <__assert_fail@plt+0x14c0>
   11f0c:	bl	12b60 <error@@Base+0xd4>
   11f10:	mov	r5, r0
   11f14:	ldr	r3, [pc, #284]	; 12038 <__assert_fail@plt+0x14c4>
   11f18:	ldr	r2, [pc, #284]	; 1203c <__assert_fail@plt+0x14c8>
   11f1c:	ldr	r1, [pc, #284]	; 12040 <__assert_fail@plt+0x14cc>
   11f20:	bl	10af0 <fprintf@plt>
   11f24:	ldr	r2, [r4]
   11f28:	ldr	r1, [pc, #276]	; 12044 <__assert_fail@plt+0x14d0>
   11f2c:	mov	r0, r5
   11f30:	bl	10af0 <fprintf@plt>
   11f34:	ldr	r2, [r4, #4]
   11f38:	ldr	r1, [pc, #264]	; 12048 <__assert_fail@plt+0x14d4>
   11f3c:	mov	r0, r5
   11f40:	bl	10af0 <fprintf@plt>
   11f44:	mov	r1, r4
   11f48:	mov	r0, r5
   11f4c:	bl	118a0 <__assert_fail@plt+0xd2c>
   11f50:	mov	r3, r5
   11f54:	mov	r2, #12
   11f58:	mov	r1, #1
   11f5c:	ldr	r0, [pc, #232]	; 1204c <__assert_fail@plt+0x14d8>
   11f60:	bl	10a6c <fwrite@plt>
   11f64:	mov	r6, #1
   11f68:	str	r6, [sp, #4]
   11f6c:	mov	r7, #0
   11f70:	str	r7, [sp]
   11f74:	ldr	r3, [pc, #212]	; 12050 <__assert_fail@plt+0x14dc>
   11f78:	mov	r2, #50	; 0x32
   11f7c:	add	r1, r4, #8
   11f80:	mov	r0, r5
   11f84:	bl	11978 <__assert_fail@plt+0xe04>
   11f88:	str	r6, [sp, #4]
   11f8c:	str	r7, [sp]
   11f90:	ldr	r3, [pc, #188]	; 12054 <__assert_fail@plt+0x14e0>
   11f94:	mov	r2, #50	; 0x32
   11f98:	add	r1, r4, #416	; 0x1a0
   11f9c:	mov	r0, r5
   11fa0:	bl	11978 <__assert_fail@plt+0xe04>
   11fa4:	str	r6, [sp, #4]
   11fa8:	str	r6, [sp]
   11fac:	ldr	r3, [pc, #164]	; 12058 <__assert_fail@plt+0x14e4>
   11fb0:	mov	r2, #10
   11fb4:	add	r1, r4, #824	; 0x338
   11fb8:	mov	r0, r5
   11fbc:	bl	11978 <__assert_fail@plt+0xe04>
   11fc0:	ldr	r3, [r4]
   11fc4:	cmp	r3, r7
   11fc8:	ble	12024 <__assert_fail@plt+0x14b0>
   11fcc:	str	r7, [sp, #4]
   11fd0:	str	r7, [sp]
   11fd4:	ldr	r3, [pc, #128]	; 1205c <__assert_fail@plt+0x14e8>
   11fd8:	mov	r2, #8
   11fdc:	add	r1, r4, #920	; 0x398
   11fe0:	mov	r0, r5
   11fe4:	bl	11978 <__assert_fail@plt+0xe04>
   11fe8:	ldr	r3, [r4, #8]
   11fec:	cmp	r3, r7
   11ff0:	ble	12004 <__assert_fail@plt+0x1490>
   11ff4:	ldr	r2, [pc, #84]	; 12050 <__assert_fail@plt+0x14dc>
   11ff8:	add	r1, r4, #992	; 0x3e0
   11ffc:	mov	r0, r5
   12000:	bl	11aa8 <__assert_fail@plt+0xf34>
   12004:	ldr	r3, [r4, #416]	; 0x1a0
   12008:	cmp	r3, #0
   1200c:	ble	12024 <__assert_fail@plt+0x14b0>
   12010:	add	r1, r4, #9024	; 0x2340
   12014:	ldr	r2, [pc, #56]	; 12054 <__assert_fail@plt+0x14e0>
   12018:	add	r1, r1, #24
   1201c:	mov	r0, r5
   12020:	bl	11aa8 <__assert_fail@plt+0xf34>
   12024:	mov	r0, r5
   12028:	bl	12958 <__assert_fail@plt+0x1de4>
   1202c:	add	sp, sp, #12
   12030:	pop	{r4, r5, r6, r7, pc}
   12034:	andeq	r3, r1, ip, lsl ip
   12038:	andeq	r7, r1, r4, asr #2
   1203c:	ldrdeq	r3, [r1], -r8
   12040:	andeq	r3, r1, r0, lsr #24
   12044:	andeq	r3, r1, r8, lsr #24
   12048:	andeq	r3, r1, r8, lsr ip
   1204c:	andeq	r3, r1, r0, asr ip
   12050:	andeq	r3, r1, r0, ror #24
   12054:	andeq	r3, r1, ip, ror #24
   12058:	andeq	r3, r1, ip, ror ip
   1205c:	muleq	r1, r4, ip
   12060:	ldrb	r3, [r0]
   12064:	cmp	r3, #0
   12068:	beq	120a8 <__assert_fail@plt+0x1534>
   1206c:	mov	r2, #0
   12070:	add	r2, r2, r3
   12074:	ldrb	r3, [r0, #1]!
   12078:	cmp	r3, #0
   1207c:	bne	12070 <__assert_fail@plt+0x14fc>
   12080:	ldr	r0, [pc, #40]	; 120b0 <__assert_fail@plt+0x153c>
   12084:	smull	r3, r0, r0, r2
   12088:	add	r3, r0, r2
   1208c:	asr	r0, r2, #31
   12090:	rsb	r0, r0, r3, asr #8
   12094:	rsb	r3, r0, r0, lsl #6
   12098:	rsb	r0, r0, r3, lsl #3
   1209c:	sub	r0, r2, r0
   120a0:	sxth	r0, r0
   120a4:	bx	lr
   120a8:	mov	r2, #0
   120ac:	b	12080 <__assert_fail@plt+0x150c>
   120b0:	subhi	r4, sl, #1552	; 0x610
   120b4:	push	{r4, r5, r6, lr}
   120b8:	mov	r6, r0
   120bc:	mov	r4, r0
   120c0:	add	r5, r0, #8000	; 0x1f40
   120c4:	add	r5, r5, #48	; 0x30
   120c8:	mov	r0, r4
   120cc:	bl	11574 <__assert_fail@plt+0xa00>
   120d0:	add	r4, r4, #16
   120d4:	cmp	r4, r5
   120d8:	bne	120c8 <__assert_fail@plt+0x1554>
   120dc:	add	r6, r6, #4096	; 0x1000
   120e0:	mov	r3, #0
   120e4:	str	r3, [r6, #3952]	; 0xf70
   120e8:	str	r3, [r6, #3956]	; 0xf74
   120ec:	pop	{r4, r5, r6, pc}
   120f0:	push	{r4, r5, r6, lr}
   120f4:	mov	r4, r0
   120f8:	mov	r5, r1
   120fc:	mov	r0, r1
   12100:	bl	12060 <__assert_fail@plt+0x14ec>
   12104:	ldr	r4, [r4, r0, lsl #4]
   12108:	cmp	r4, #0
   1210c:	beq	12130 <__assert_fail@plt+0x15bc>
   12110:	ldr	r1, [r4, #8]
   12114:	mov	r0, r5
   12118:	bl	109dc <strcmp@plt>
   1211c:	cmp	r0, #0
   12120:	beq	12130 <__assert_fail@plt+0x15bc>
   12124:	ldr	r4, [r4, #4]
   12128:	cmp	r4, #0
   1212c:	bne	12110 <__assert_fail@plt+0x159c>
   12130:	mov	r0, r4
   12134:	pop	{r4, r5, r6, pc}
   12138:	push	{r4, r5, r6, lr}
   1213c:	mov	r4, r0
   12140:	mov	r5, r1
   12144:	ldr	r0, [r1, #8]
   12148:	bl	12060 <__assert_fail@plt+0x14ec>
   1214c:	mov	r1, r5
   12150:	add	r0, r4, r0, lsl #4
   12154:	bl	1158c <__assert_fail@plt+0xa18>
   12158:	add	r3, r4, #4096	; 0x1000
   1215c:	ldr	r0, [r3, #3952]	; 0xf70
   12160:	cmp	r0, #0
   12164:	beq	12178 <__assert_fail@plt+0x1604>
   12168:	bl	10a00 <free@plt>
   1216c:	add	r3, r4, #4096	; 0x1000
   12170:	mov	r2, #0
   12174:	str	r2, [r3, #3952]	; 0xf70
   12178:	add	r4, r4, #4096	; 0x1000
   1217c:	ldr	r3, [r4, #3956]	; 0xf74
   12180:	add	r3, r3, #1
   12184:	str	r3, [r4, #3956]	; 0xf74
   12188:	pop	{r4, r5, r6, pc}
   1218c:	push	{r4, r5, r6, lr}
   12190:	mov	r4, r0
   12194:	mov	r5, r1
   12198:	ldr	r0, [r1, #8]
   1219c:	bl	12060 <__assert_fail@plt+0x14ec>
   121a0:	mov	r1, r5
   121a4:	add	r0, r4, r0, lsl #4
   121a8:	bl	115e8 <__assert_fail@plt+0xa74>
   121ac:	add	r3, r4, #4096	; 0x1000
   121b0:	ldr	r0, [r3, #3952]	; 0xf70
   121b4:	cmp	r0, #0
   121b8:	beq	121cc <__assert_fail@plt+0x1658>
   121bc:	bl	10a00 <free@plt>
   121c0:	add	r3, r4, #4096	; 0x1000
   121c4:	mov	r2, #0
   121c8:	str	r2, [r3, #3952]	; 0xf70
   121cc:	add	r4, r4, #4096	; 0x1000
   121d0:	ldr	r3, [r4, #3956]	; 0xf74
   121d4:	sub	r3, r3, #1
   121d8:	str	r3, [r4, #3956]	; 0xf74
   121dc:	pop	{r4, r5, r6, pc}
   121e0:	add	r3, r0, #4096	; 0x1000
   121e4:	ldr	r3, [r3, #3952]	; 0xf70
   121e8:	cmp	r3, #0
   121ec:	bxne	lr
   121f0:	add	r3, r0, #4096	; 0x1000
   121f4:	ldr	r3, [r3, #3956]	; 0xf74
   121f8:	cmp	r3, #0
   121fc:	bxeq	lr
   12200:	push	{r4, r5, r6, lr}
   12204:	mov	r4, r0
   12208:	mov	r1, #4
   1220c:	mov	r0, r3
   12210:	bl	12ac8 <error@@Base+0x3c>
   12214:	add	r3, r4, #4096	; 0x1000
   12218:	str	r0, [r3, #3952]	; 0xf70
   1221c:	mov	r1, #0
   12220:	mov	lr, r1
   12224:	mov	ip, r3
   12228:	ldr	r5, [pc, #64]	; 12270 <__assert_fail@plt+0x16fc>
   1222c:	b	1223c <__assert_fail@plt+0x16c8>
   12230:	add	lr, lr, #1
   12234:	cmp	lr, r5
   12238:	beq	1226c <__assert_fail@plt+0x16f8>
   1223c:	ldr	r3, [r4, lr, lsl #4]
   12240:	cmp	r3, #0
   12244:	beq	12230 <__assert_fail@plt+0x16bc>
   12248:	lsl	r2, r1, #2
   1224c:	add	r1, r1, #1
   12250:	ldr	r0, [ip, #3952]	; 0xf70
   12254:	str	r3, [r0, r2]
   12258:	ldr	r3, [r3, #4]
   1225c:	add	r2, r2, #4
   12260:	cmp	r3, #0
   12264:	bne	1224c <__assert_fail@plt+0x16d8>
   12268:	b	12230 <__assert_fail@plt+0x16bc>
   1226c:	pop	{r4, r5, r6, pc}
   12270:	strdeq	r0, [r0], -r7
   12274:	push	{r4, r5, r6, r7, r8, lr}
   12278:	mov	r7, r0
   1227c:	mov	r6, r1
   12280:	mov	r4, r0
   12284:	add	r5, r0, #8000	; 0x1f40
   12288:	add	r5, r5, #48	; 0x30
   1228c:	mov	r1, r6
   12290:	mov	r0, r4
   12294:	bl	116b0 <__assert_fail@plt+0xb3c>
   12298:	add	r4, r4, #16
   1229c:	cmp	r4, r5
   122a0:	bne	1228c <__assert_fail@plt+0x1718>
   122a4:	add	r3, r7, #4096	; 0x1000
   122a8:	ldr	r0, [r3, #3952]	; 0xf70
   122ac:	cmp	r0, #0
   122b0:	beq	122c4 <__assert_fail@plt+0x1750>
   122b4:	bl	10a00 <free@plt>
   122b8:	add	r3, r7, #4096	; 0x1000
   122bc:	mov	r2, #0
   122c0:	str	r2, [r3, #3952]	; 0xf70
   122c4:	add	r7, r7, #4096	; 0x1000
   122c8:	mov	r3, #0
   122cc:	str	r3, [r7, #3956]	; 0xf74
   122d0:	pop	{r4, r5, r6, r7, r8, pc}
   122d4:	cmp	r2, r1
   122d8:	bcc	12340 <__assert_fail@plt+0x17cc>
   122dc:	push	{r4, lr}
   122e0:	sub	r3, r2, r1
   122e4:	add	r3, r1, r3, lsr #1
   122e8:	add	lr, r3, r3, lsl #1
   122ec:	ldr	ip, [pc, #84]	; 12348 <__assert_fail@plt+0x17d4>
   122f0:	ldr	ip, [ip, lr, lsl #2]
   122f4:	cmp	ip, r0
   122f8:	bhi	12328 <__assert_fail@plt+0x17b4>
   122fc:	add	r1, r3, r3, lsl #1
   12300:	ldr	ip, [pc, #64]	; 12348 <__assert_fail@plt+0x17d4>
   12304:	add	r1, ip, r1, lsl #2
   12308:	ldr	r1, [r1, #4]
   1230c:	cmp	r0, r1
   12310:	bhi	12334 <__assert_fail@plt+0x17c0>
   12314:	add	r3, r3, r3, lsl #1
   12318:	ldr	r1, [pc, #40]	; 12348 <__assert_fail@plt+0x17d4>
   1231c:	add	r3, r1, r3, lsl #2
   12320:	ldr	r0, [r3, #8]
   12324:	pop	{r4, pc}
   12328:	sub	r2, r3, #1
   1232c:	bl	122d4 <__assert_fail@plt+0x1760>
   12330:	pop	{r4, pc}
   12334:	add	r1, r3, #1
   12338:	bl	122d4 <__assert_fail@plt+0x1760>
   1233c:	pop	{r4, pc}
   12340:	mov	r0, #0
   12344:	bx	lr
   12348:	muleq	r1, ip, ip
   1234c:	cmp	r0, #0
   12350:	beq	1236c <__assert_fail@plt+0x17f8>
   12354:	push	{r4, lr}
   12358:	ldr	r2, [pc, #20]	; 12374 <__assert_fail@plt+0x1800>
   1235c:	mov	r1, #0
   12360:	ldr	r0, [r0, #12]
   12364:	bl	122d4 <__assert_fail@plt+0x1760>
   12368:	pop	{r4, pc}
   1236c:	mov	r0, #18
   12370:	bx	lr
   12374:	andeq	r0, r0, r4, asr #8
   12378:	push	{r4, lr}
   1237c:	subs	r4, r0, #0
   12380:	beq	123a4 <__assert_fail@plt+0x1830>
   12384:	ldr	r4, [r4, #4]
   12388:	cmp	r4, #0
   1238c:	beq	123a4 <__assert_fail@plt+0x1830>
   12390:	mov	r0, r4
   12394:	bl	1234c <__assert_fail@plt+0x17d8>
   12398:	bic	r0, r0, #2
   1239c:	cmp	r0, #4
   123a0:	beq	12384 <__assert_fail@plt+0x1810>
   123a4:	mov	r0, r4
   123a8:	pop	{r4, pc}
   123ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123b0:	sub	sp, sp, #28
   123b4:	str	r0, [sp, #4]
   123b8:	ldr	r7, [r1]
   123bc:	mov	sl, #17
   123c0:	mov	fp, #0
   123c4:	b	126c8 <__assert_fail@plt+0x1b54>
   123c8:	ldr	r8, [r4, #4]
   123cc:	cmp	r7, r8
   123d0:	movne	r5, r7
   123d4:	movne	r6, #0
   123d8:	beq	12728 <__assert_fail@plt+0x1bb4>
   123dc:	add	r1, sp, #8
   123e0:	ldr	r0, [r5, #12]
   123e4:	bl	10a24 <utf8proc_encode_char@plt>
   123e8:	cmp	r0, #0
   123ec:	beq	1241c <__assert_fail@plt+0x18a8>
   123f0:	add	r6, r6, r0
   123f4:	ldr	r5, [r5, #4]
   123f8:	cmp	r8, r5
   123fc:	beq	126e0 <__assert_fail@plt+0x1b6c>
   12400:	cmp	r5, #0
   12404:	bne	123dc <__assert_fail@plt+0x1868>
   12408:	ldr	r3, [pc, #992]	; 127f0 <__assert_fail@plt+0x1c7c>
   1240c:	mov	r2, #249	; 0xf9
   12410:	ldr	r1, [pc, #988]	; 127f4 <__assert_fail@plt+0x1c80>
   12414:	ldr	r0, [pc, #988]	; 127f8 <__assert_fail@plt+0x1c84>
   12418:	bl	10b74 <__assert_fail@plt>
   1241c:	ldr	r3, [pc, #972]	; 127f0 <__assert_fail@plt+0x1c7c>
   12420:	mov	r2, #253	; 0xfd
   12424:	ldr	r1, [pc, #968]	; 127f4 <__assert_fail@plt+0x1c80>
   12428:	ldr	r0, [pc, #972]	; 127fc <__assert_fail@plt+0x1c88>
   1242c:	bl	10b74 <__assert_fail@plt>
   12430:	sub	r1, r6, #8
   12434:	cmp	r1, #1
   12438:	bls	124b0 <__assert_fail@plt+0x193c>
   1243c:	sub	r1, r6, #12
   12440:	cmp	r6, #10
   12444:	cmpne	r1, #1
   12448:	bhi	12538 <__assert_fail@plt+0x19c4>
   1244c:	sub	r1, r0, #8
   12450:	cmp	r1, #1
   12454:	bhi	12538 <__assert_fail@plt+0x19c4>
   12458:	b	124b0 <__assert_fail@plt+0x193c>
   1245c:	cmp	r5, #13
   12460:	beq	12770 <__assert_fail@plt+0x1bfc>
   12464:	sub	r1, r5, #10
   12468:	bics	r1, r1, #2
   1246c:	bne	12544 <__assert_fail@plt+0x19d0>
   12470:	sub	r1, r6, #8
   12474:	cmp	r1, #1
   12478:	bhi	12544 <__assert_fail@plt+0x19d0>
   1247c:	b	124b0 <__assert_fail@plt+0x193c>
   12480:	cmp	r5, #15
   12484:	beq	125d8 <__assert_fail@plt+0x1a64>
   12488:	cmp	r8, #15
   1248c:	beq	12624 <__assert_fail@plt+0x1ab0>
   12490:	cmp	r5, #7
   12494:	movne	r2, #0
   12498:	moveq	r2, #1
   1249c:	cmp	r6, #7
   124a0:	movne	r0, #0
   124a4:	moveq	r0, #1
   124a8:	tst	r2, r0
   124ac:	beq	127ac <__assert_fail@plt+0x1c38>
   124b0:	ldr	r3, [r4, #4]
   124b4:	cmp	r3, #0
   124b8:	beq	127e0 <__assert_fail@plt+0x1c6c>
   124bc:	mov	r8, r5
   124c0:	mov	r0, r4
   124c4:	bl	12378 <__assert_fail@plt+0x1804>
   124c8:	mov	r4, r0
   124cc:	bl	1234c <__assert_fail@plt+0x17d8>
   124d0:	mov	r5, r0
   124d4:	mov	r0, r4
   124d8:	bl	12378 <__assert_fail@plt+0x1804>
   124dc:	mov	r9, r0
   124e0:	bl	1234c <__assert_fail@plt+0x17d8>
   124e4:	mov	r6, r0
   124e8:	mov	r0, r9
   124ec:	bl	12378 <__assert_fail@plt+0x1804>
   124f0:	bl	1234c <__assert_fail@plt+0x17d8>
   124f4:	sub	r2, r5, #1
   124f8:	cmp	r6, #2
   124fc:	movne	r3, #0
   12500:	moveq	r3, #1
   12504:	cmp	r5, #1
   12508:	cmpeq	r6, #2
   1250c:	beq	124b0 <__assert_fail@plt+0x193c>
   12510:	cmp	r2, #2
   12514:	bls	127e0 <__assert_fail@plt+0x1c6c>
   12518:	bic	r2, r6, #2
   1251c:	cmp	r2, #1
   12520:	orreq	r3, r3, #1
   12524:	cmp	r3, #0
   12528:	bne	127e0 <__assert_fail@plt+0x1c6c>
   1252c:	sub	r3, r5, #8
   12530:	cmp	r3, #1
   12534:	bls	12430 <__assert_fail@plt+0x18bc>
   12538:	sub	r1, r8, #8
   1253c:	cmp	r1, #1
   12540:	bls	1245c <__assert_fail@plt+0x18e8>
   12544:	cmp	r5, #8
   12548:	movne	r1, #0
   1254c:	moveq	r1, #1
   12550:	cmp	r6, #10
   12554:	movne	ip, #0
   12558:	moveq	ip, #1
   1255c:	tst	r1, ip
   12560:	bne	124b0 <__assert_fail@plt+0x193c>
   12564:	cmp	r0, #8
   12568:	cmpeq	r6, #11
   1256c:	moveq	lr, #1
   12570:	movne	lr, #0
   12574:	tst	r1, lr
   12578:	bne	124b0 <__assert_fail@plt+0x193c>
   1257c:	cmp	r8, #8
   12580:	cmpeq	r5, #11
   12584:	moveq	r1, #1
   12588:	movne	r1, #0
   1258c:	cmp	r6, #8
   12590:	movne	r1, #0
   12594:	andeq	r1, r1, #1
   12598:	cmp	r1, #0
   1259c:	bne	124b0 <__assert_fail@plt+0x193c>
   125a0:	cmp	r5, #15
   125a4:	movne	lr, #0
   125a8:	moveq	lr, #1
   125ac:	cmp	r6, #15
   125b0:	movne	r1, #0
   125b4:	moveq	r1, #1
   125b8:	tst	lr, r1
   125bc:	bne	124b0 <__assert_fail@plt+0x193c>
   125c0:	cmp	r3, #1
   125c4:	movhi	r3, #0
   125c8:	movls	r3, #1
   125cc:	tst	r1, r3
   125d0:	beq	12480 <__assert_fail@plt+0x190c>
   125d4:	b	124b0 <__assert_fail@plt+0x193c>
   125d8:	sub	r9, r6, #8
   125dc:	cmp	r9, #1
   125e0:	bls	124b0 <__assert_fail@plt+0x193c>
   125e4:	cmp	r8, #15
   125e8:	beq	12624 <__assert_fail@plt+0x1ab0>
   125ec:	cmp	r2, #12
   125f0:	movne	r2, ip
   125f4:	orreq	r2, ip, #1
   125f8:	cmp	r2, #0
   125fc:	beq	12608 <__assert_fail@plt+0x1a94>
   12600:	cmp	r0, #15
   12604:	beq	124b0 <__assert_fail@plt+0x193c>
   12608:	cmp	r6, #7
   1260c:	movne	r0, #0
   12610:	moveq	r0, #1
   12614:	cmp	r5, #7
   12618:	cmpeq	r6, #7
   1261c:	beq	124b0 <__assert_fail@plt+0x193c>
   12620:	b	127c4 <__assert_fail@plt+0x1c50>
   12624:	cmp	r5, #14
   12628:	beq	1278c <__assert_fail@plt+0x1c18>
   1262c:	sub	r8, r5, #10
   12630:	bics	r8, r8, #2
   12634:	bne	12640 <__assert_fail@plt+0x1acc>
   12638:	cmp	r6, #15
   1263c:	beq	124b0 <__assert_fail@plt+0x193c>
   12640:	cmp	r5, #15
   12644:	bne	12490 <__assert_fail@plt+0x191c>
   12648:	b	125ec <__assert_fail@plt+0x1a78>
   1264c:	sub	r3, r6, #8
   12650:	cmp	r3, #1
   12654:	orrls	r1, r1, #1
   12658:	cmp	r1, #0
   1265c:	bne	124b0 <__assert_fail@plt+0x193c>
   12660:	cmp	r6, #16
   12664:	orreq	r0, r0, #1
   12668:	cmp	r0, #0
   1266c:	bne	124b0 <__assert_fail@plt+0x193c>
   12670:	b	127e0 <__assert_fail@plt+0x1c6c>
   12674:	mov	r4, r5
   12678:	ldr	r5, [r4, #4]
   1267c:	cmp	r5, #0
   12680:	beq	12698 <__assert_fail@plt+0x1b24>
   12684:	mov	r0, r5
   12688:	bl	1234c <__assert_fail@plt+0x17d8>
   1268c:	bic	r0, r0, #2
   12690:	cmp	r0, #4
   12694:	beq	12674 <__assert_fail@plt+0x1b00>
   12698:	cmp	r4, #0
   1269c:	beq	127e8 <__assert_fail@plt+0x1c74>
   126a0:	ldr	r0, [r7, #12]
   126a4:	bl	10a0c <utf8proc_get_property@plt>
   126a8:	ldrsh	r3, [r0]
   126ac:	cmp	r3, #1
   126b0:	blt	126c4 <__assert_fail@plt+0x1b50>
   126b4:	cmp	r3, #12
   126b8:	ble	123c8 <__assert_fail@plt+0x1854>
   126bc:	cmp	r3, #29
   126c0:	beq	123c8 <__assert_fail@plt+0x1854>
   126c4:	ldr	r7, [r4, #4]
   126c8:	str	r7, [sp, #12]
   126cc:	cmp	r7, #0
   126d0:	beq	127e8 <__assert_fail@plt+0x1c74>
   126d4:	mov	r8, sl
   126d8:	add	r4, sp, #8
   126dc:	b	124c0 <__assert_fail@plt+0x194c>
   126e0:	add	r0, r6, #1
   126e4:	bl	10a90 <malloc@plt>
   126e8:	mov	r8, r0
   126ec:	mov	r6, #0
   126f0:	add	r1, r8, r6
   126f4:	ldr	r0, [r7, #12]
   126f8:	bl	10a24 <utf8proc_encode_char@plt>
   126fc:	add	r6, r6, r0
   12700:	ldr	r7, [r7, #4]
   12704:	cmp	r7, r5
   12708:	beq	12738 <__assert_fail@plt+0x1bc4>
   1270c:	cmp	r7, #0
   12710:	bne	126f0 <__assert_fail@plt+0x1b7c>
   12714:	ldr	r3, [pc, #228]	; 12800 <__assert_fail@plt+0x1c8c>
   12718:	ldr	r2, [pc, #228]	; 12804 <__assert_fail@plt+0x1c90>
   1271c:	ldr	r1, [pc, #208]	; 127f4 <__assert_fail@plt+0x1c80>
   12720:	ldr	r0, [pc, #208]	; 127f8 <__assert_fail@plt+0x1c84>
   12724:	bl	10b74 <__assert_fail@plt>
   12728:	mov	r0, #1
   1272c:	bl	10a90 <malloc@plt>
   12730:	mov	r8, r0
   12734:	mov	r6, #0
   12738:	strb	fp, [r8, r6]
   1273c:	mov	r1, #12
   12740:	mov	r0, #1
   12744:	bl	12ac8 <error@@Base+0x3c>
   12748:	mov	r5, r0
   1274c:	mov	r0, r8
   12750:	bl	10b14 <utf8proc_NFC@plt>
   12754:	str	r0, [r5, #8]
   12758:	mov	r1, r5
   1275c:	ldr	r0, [sp, #4]
   12760:	bl	115a4 <__assert_fail@plt+0xa30>
   12764:	mov	r0, r8
   12768:	bl	10a00 <free@plt>
   1276c:	b	126c4 <__assert_fail@plt+0x1b50>
   12770:	sub	r1, r6, #8
   12774:	cmp	r1, #1
   12778:	bls	124b0 <__assert_fail@plt+0x193c>
   1277c:	cmp	r6, #10
   12780:	movne	ip, #0
   12784:	moveq	ip, #1
   12788:	b	1257c <__assert_fail@plt+0x1a08>
   1278c:	cmp	r6, #15
   12790:	beq	124b0 <__assert_fail@plt+0x193c>
   12794:	cmp	r5, #7
   12798:	movne	r2, #0
   1279c:	moveq	r2, #1
   127a0:	cmp	r6, #7
   127a4:	movne	r0, #0
   127a8:	moveq	r0, #1
   127ac:	orrs	r3, lr, r3
   127b0:	bne	127c4 <__assert_fail@plt+0x1c50>
   127b4:	cmp	r5, #16
   127b8:	orreq	r2, r2, #1
   127bc:	cmp	r2, #0
   127c0:	beq	127cc <__assert_fail@plt+0x1c58>
   127c4:	cmp	r6, #16
   127c8:	beq	124b0 <__assert_fail@plt+0x193c>
   127cc:	cmp	r5, #16
   127d0:	beq	1264c <__assert_fail@plt+0x1ad8>
   127d4:	cmp	r5, #5
   127d8:	cmpeq	r6, #5
   127dc:	beq	124b0 <__assert_fail@plt+0x193c>
   127e0:	cmp	r4, #0
   127e4:	bne	12678 <__assert_fail@plt+0x1b04>
   127e8:	add	sp, sp, #28
   127ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127f0:	ldrdeq	r6, [r1], -r8
   127f4:	andeq	r7, r1, r0
   127f8:	andeq	r7, r1, r8
   127fc:	andeq	r7, r1, r8, lsl r0
   12800:	andeq	r6, r1, ip, ror #31
   12804:	andeq	r0, r0, sp, lsl #2
   12808:	push	{r4, lr}
   1280c:	mov	r4, r0
   12810:	ldr	r0, [r0, #8]
   12814:	bl	10a00 <free@plt>
   12818:	mov	r0, r4
   1281c:	bl	10a00 <free@plt>
   12820:	pop	{r4, pc}
   12824:	push	{r4, r5, lr}
   12828:	sub	sp, sp, #116	; 0x74
   1282c:	mov	r5, r0
   12830:	ldr	r3, [pc, #44]	; 12864 <__assert_fail@plt+0x1cf0>
   12834:	ldr	r4, [r3]
   12838:	bl	10ac0 <getpid@plt>
   1283c:	str	r5, [sp]
   12840:	mov	r3, r0
   12844:	mov	r2, r4
   12848:	ldr	r1, [pc, #24]	; 12868 <__assert_fail@plt+0x1cf4>
   1284c:	add	r0, sp, #12
   12850:	bl	10b2c <sprintf@plt>
   12854:	add	r0, sp, #12
   12858:	bl	10a30 <strdup@plt>
   1285c:	add	sp, sp, #116	; 0x74
   12860:	pop	{r4, r5, pc}
   12864:	andeq	r0, r3, r0, asr #7
   12868:	andeq	r7, r1, ip, lsr #32
   1286c:	push	{r7, lr}
   12870:	mov	r7, r0
   12874:	ldr	r3, [pc, #88]	; 128d4 <__assert_fail@plt+0x1d60>
   12878:	ldr	r3, [r3]
   1287c:	cmp	r3, #0
   12880:	beq	12888 <__assert_fail@plt+0x1d14>
   12884:	blx	r3
   12888:	ldr	r3, [pc, #72]	; 128d8 <__assert_fail@plt+0x1d64>
   1288c:	ldrsh	r3, [r3]
   12890:	cmp	r3, #0
   12894:	ble	128cc <__assert_fail@plt+0x1d58>
   12898:	mov	r4, #1
   1289c:	ldr	r6, [pc, #52]	; 128d8 <__assert_fail@plt+0x1d64>
   128a0:	mov	r0, r4
   128a4:	bl	12824 <__assert_fail@plt+0x1cb0>
   128a8:	mov	r5, r0
   128ac:	bl	10a48 <unlink@plt>
   128b0:	mov	r0, r5
   128b4:	bl	10a00 <free@plt>
   128b8:	add	r4, r4, #1
   128bc:	sxth	r4, r4
   128c0:	ldrsh	r3, [r6]
   128c4:	cmp	r3, r4
   128c8:	bge	128a0 <__assert_fail@plt+0x1d2c>
   128cc:	mov	r0, r7
   128d0:	bl	10acc <exit@plt>
   128d4:	andeq	r0, r3, r4, asr #7
   128d8:	strdeq	sl, [r2], -r4
   128dc:	push	{r4, lr}
   128e0:	ldrb	r3, [r0]
   128e4:	cmp	r3, #0
   128e8:	beq	12934 <__assert_fail@plt+0x1dc0>
   128ec:	ldrb	r2, [r1]
   128f0:	cmp	r2, r3
   128f4:	bne	12950 <__assert_fail@plt+0x1ddc>
   128f8:	mov	ip, r1
   128fc:	mov	r2, #0
   12900:	add	r2, r2, #1
   12904:	mov	r4, r2
   12908:	ldrb	r3, [r0, #1]!
   1290c:	cmp	r3, #0
   12910:	beq	12938 <__assert_fail@plt+0x1dc4>
   12914:	ldrb	lr, [ip, #1]!
   12918:	cmp	lr, r3
   1291c:	beq	12900 <__assert_fail@plt+0x1d8c>
   12920:	ldrb	r2, [r1, r4]
   12924:	cmp	r2, r3
   12928:	mvnhi	r0, #0
   1292c:	movls	r0, #1
   12930:	pop	{r4, pc}
   12934:	mov	r4, #0
   12938:	ldrb	r3, [r1, r4]
   1293c:	cmp	r3, #0
   12940:	movne	r3, #0
   12944:	bne	12920 <__assert_fail@plt+0x1dac>
   12948:	mov	r0, #0
   1294c:	pop	{r4, pc}
   12950:	mov	r4, #0
   12954:	b	12920 <__assert_fail@plt+0x1dac>
   12958:	ldr	r3, [pc, #36]	; 12984 <__assert_fail@plt+0x1e10>
   1295c:	ldr	r3, [r3]
   12960:	cmp	r3, r0
   12964:	bxeq	lr
   12968:	ldr	r3, [pc, #24]	; 12988 <__assert_fail@plt+0x1e14>
   1296c:	ldr	r3, [r3]
   12970:	cmp	r0, r3
   12974:	bxeq	lr
   12978:	push	{r4, lr}
   1297c:	bl	10b08 <fclose@plt>
   12980:	pop	{r4, pc}
   12984:	andeq	r8, r2, r8, ror #1
   12988:	andeq	r8, r2, ip, ror #1
   1298c:	push	{lr}		; (str lr, [sp, #-4]!)
   12990:	sub	sp, sp, #92	; 0x5c
   12994:	mov	r2, sp
   12998:	mov	r1, r0
   1299c:	mov	r0, #3
   129a0:	bl	10a60 <__xstat@plt>
   129a4:	clz	r0, r0
   129a8:	lsr	r0, r0, #5
   129ac:	add	sp, sp, #92	; 0x5c
   129b0:	pop	{pc}		; (ldr pc, [sp], #4)
   129b4:	push	{r4, lr}
   129b8:	ldr	r3, [pc, #32]	; 129e0 <__assert_fail@plt+0x1e6c>
   129bc:	ldrh	r0, [r3]
   129c0:	add	r0, r0, #1
   129c4:	sxth	r0, r0
   129c8:	strh	r0, [r3]
   129cc:	bl	12824 <__assert_fail@plt+0x1cb0>
   129d0:	mov	r4, r0
   129d4:	bl	10a48 <unlink@plt>
   129d8:	mov	r0, r4
   129dc:	pop	{r4, pc}
   129e0:	strdeq	sl, [r2], -r4
   129e4:	push	{r4, lr}
   129e8:	mov	r4, r0
   129ec:	bl	10ae4 <strlen@plt>
   129f0:	sub	r0, r0, #1
   129f4:	sxth	r0, r0
   129f8:	cmp	r0, #0
   129fc:	blt	12a28 <__assert_fail@plt+0x1eb4>
   12a00:	ldrb	r3, [r4, r0]
   12a04:	cmp	r3, #47	; 0x2f
   12a08:	beq	12a28 <__assert_fail@plt+0x1eb4>
   12a0c:	sub	r0, r0, #1
   12a10:	sxth	r0, r0
   12a14:	cmp	r0, #0
   12a18:	blt	12a28 <__assert_fail@plt+0x1eb4>
   12a1c:	ldrb	r3, [r4, r0]
   12a20:	cmp	r3, #47	; 0x2f
   12a24:	bne	12a0c <__assert_fail@plt+0x1e98>
   12a28:	add	r0, r0, #1
   12a2c:	add	r0, r4, r0
   12a30:	pop	{r4, pc}
   12a34:	push	{r4, lr}
   12a38:	mov	r0, #0
   12a3c:	bl	1286c <__assert_fail@plt+0x1cf8>
   12a40:	push	{r4, lr}
   12a44:	ldr	r2, [pc, #48]	; 12a7c <__assert_fail@plt+0x1f08>
   12a48:	ldr	r2, [r2]
   12a4c:	cmp	r2, #0
   12a50:	beq	12a5c <__assert_fail@plt+0x1ee8>
   12a54:	blx	r2
   12a58:	bl	12a34 <__assert_fail@plt+0x1ec0>
   12a5c:	mov	r3, r0
   12a60:	ldr	r2, [pc, #24]	; 12a80 <__assert_fail@plt+0x1f0c>
   12a64:	ldr	r2, [r2]
   12a68:	ldr	r1, [pc, #20]	; 12a84 <__assert_fail@plt+0x1f10>
   12a6c:	ldr	r0, [pc, #20]	; 12a88 <__assert_fail@plt+0x1f14>
   12a70:	ldr	r0, [r0]
   12a74:	bl	10af0 <fprintf@plt>
   12a78:	b	12a58 <__assert_fail@plt+0x1ee4>
   12a7c:			; <UNDEFINED> instruction: 0x000303bc
   12a80:	andeq	r0, r3, r0, asr #7
   12a84:	andeq	r7, r1, ip, lsr r0
   12a88:	andeq	r8, r2, r0, ror #1

00012a8c <error@@Base>:
   12a8c:	push	{r4, lr}
   12a90:	mov	r3, r0
   12a94:	ldr	r2, [pc, #28]	; 12ab8 <error@@Base+0x2c>
   12a98:	ldr	r2, [r2]
   12a9c:	ldr	r1, [pc, #24]	; 12abc <error@@Base+0x30>
   12aa0:	ldr	r0, [pc, #24]	; 12ac0 <error@@Base+0x34>
   12aa4:	ldr	r0, [r0]
   12aa8:	bl	10af0 <fprintf@plt>
   12aac:	ldr	r3, [pc, #16]	; 12ac4 <error@@Base+0x38>
   12ab0:	ldr	r0, [r3]
   12ab4:	bl	1286c <__assert_fail@plt+0x1cf8>
   12ab8:	andeq	r0, r3, r0, asr #7
   12abc:	andeq	r7, r1, ip, asr #32
   12ac0:	andeq	r8, r2, r0, ror #1
   12ac4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   12ac8:	push	{r4, lr}
   12acc:	bl	109d0 <calloc@plt>
   12ad0:	cmp	r0, #0
   12ad4:	popne	{r4, pc}
   12ad8:	ldr	r0, [pc]	; 12ae0 <error@@Base+0x54>
   12adc:	bl	12a8c <error@@Base>
   12ae0:	andeq	r7, r1, r4, asr r0
   12ae4:	ldr	r3, [pc, #36]	; 12b10 <error@@Base+0x84>
   12ae8:	ldrb	r3, [r3, #2]
   12aec:	cmp	r3, #0
   12af0:	beq	12af8 <error@@Base+0x6c>
   12af4:	bx	lr
   12af8:	push	{r4, lr}
   12afc:	mov	r2, #1
   12b00:	ldr	r3, [pc, #8]	; 12b10 <error@@Base+0x84>
   12b04:	strb	r2, [r3, #2]
   12b08:	ldr	r0, [pc, #4]	; 12b14 <error@@Base+0x88>
   12b0c:	bl	12a8c <error@@Base>
   12b10:	strdeq	sl, [r2], -r4
   12b14:	andeq	r7, r1, r0, ror r0
   12b18:	push	{lr}		; (str lr, [sp, #-4]!)
   12b1c:	sub	sp, sp, #12
   12b20:	ldr	r3, [pc, #40]	; 12b50 <error@@Base+0xc4>
   12b24:	ldr	r2, [r3]
   12b28:	ldr	r3, [pc, #36]	; 12b54 <error@@Base+0xc8>
   12b2c:	ldr	ip, [r3]
   12b30:	str	r1, [sp]
   12b34:	mov	r3, r0
   12b38:	ldr	r1, [pc, #24]	; 12b58 <error@@Base+0xcc>
   12b3c:	mov	r0, ip
   12b40:	bl	10af0 <fprintf@plt>
   12b44:	ldr	r3, [pc, #16]	; 12b5c <error@@Base+0xd0>
   12b48:	ldr	r0, [r3]
   12b4c:	bl	1286c <__assert_fail@plt+0x1cf8>
   12b50:	andeq	r0, r3, r0, asr #7
   12b54:	andeq	r8, r2, r0, ror #1
   12b58:	andeq	r7, r1, r0, lsl #1
   12b5c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   12b60:	push	{r4, r5, r6, lr}
   12b64:	subs	r5, r0, #0
   12b68:	beq	12b98 <error@@Base+0x10c>
   12b6c:	mov	r4, r1
   12b70:	mov	r0, r5
   12b74:	bl	109f4 <fopen@plt>
   12b78:	cmp	r0, #0
   12b7c:	popne	{r4, r5, r6, pc}
   12b80:	ldrb	r3, [r4]
   12b84:	cmp	r3, #119	; 0x77
   12b88:	beq	12bb0 <error@@Base+0x124>
   12b8c:	mov	r1, r5
   12b90:	ldr	r0, [pc, #36]	; 12bbc <error@@Base+0x130>
   12b94:	bl	12b18 <error@@Base+0x8c>
   12b98:	ldrb	r3, [r1]
   12b9c:	cmp	r3, #114	; 0x72
   12ba0:	ldreq	r3, [pc, #24]	; 12bc0 <error@@Base+0x134>
   12ba4:	ldrne	r3, [pc, #24]	; 12bc4 <error@@Base+0x138>
   12ba8:	ldr	r0, [r3]
   12bac:	pop	{r4, r5, r6, pc}
   12bb0:	mov	r1, r5
   12bb4:	ldr	r0, [pc, #12]	; 12bc8 <error@@Base+0x13c>
   12bb8:	bl	12b18 <error@@Base+0x8c>
   12bbc:	andeq	r7, r1, r8, lsr #1
   12bc0:	andeq	r8, r2, r8, ror #1
   12bc4:	andeq	r8, r2, ip, ror #1
   12bc8:	muleq	r1, r0, r0
   12bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bd0:	sub	sp, sp, #20
   12bd4:	mov	r5, r0
   12bd8:	str	r0, [sp, #8]
   12bdc:	mov	sl, r1
   12be0:	str	r2, [sp, #12]
   12be4:	mov	r6, r3
   12be8:	ldr	r0, [r1]
   12bec:	bl	129e4 <__assert_fail@plt+0x1e70>
   12bf0:	ldr	r3, [pc, #468]	; 12dcc <error@@Base+0x340>
   12bf4:	str	r0, [r3]
   12bf8:	ldr	r4, [pc, #464]	; 12dd0 <error@@Base+0x344>
   12bfc:	mov	r1, r4
   12c00:	mov	r0, #2
   12c04:	bl	10aa8 <__sysv_signal@plt>
   12c08:	mov	r1, r4
   12c0c:	mov	r0, #15
   12c10:	bl	10aa8 <__sysv_signal@plt>
   12c14:	ldr	r8, [r5]
   12c18:	cmp	r8, #1
   12c1c:	beq	12c3c <error@@Base+0x1b0>
   12c20:	movle	r7, #0
   12c24:	ble	12c50 <error@@Base+0x1c4>
   12c28:	mov	r7, #0
   12c2c:	mov	r3, #1
   12c30:	str	r3, [sp, #4]
   12c34:	mov	r4, r3
   12c38:	b	12ce8 <error@@Base+0x25c>
   12c3c:	ldr	r3, [pc, #400]	; 12dd4 <error@@Base+0x348>
   12c40:	ldrb	r3, [r3, #4]
   12c44:	cmp	r3, #0
   12c48:	moveq	r7, #0
   12c4c:	bne	12c60 <error@@Base+0x1d4>
   12c50:	ldr	r3, [sp, #8]
   12c54:	str	r7, [r3]
   12c58:	add	sp, sp, #20
   12c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c60:	ldr	r0, [sp, #12]
   12c64:	bl	12a40 <__assert_fail@plt+0x1ecc>
   12c68:	ldr	r0, [sp, #12]
   12c6c:	bl	12a40 <__assert_fail@plt+0x1ecc>
   12c70:	mov	r1, r6
   12c74:	b	12d7c <error@@Base+0x2f0>
   12c78:	ldr	r3, [r1, #8]
   12c7c:	cmp	r3, #0
   12c80:	beq	12ca8 <error@@Base+0x21c>
   12c84:	ldrb	r2, [r5, #2]
   12c88:	cmp	r2, #0
   12c8c:	bne	12ca8 <error@@Base+0x21c>
   12c90:	ldrb	r2, [r3]
   12c94:	cmp	r2, #0
   12c98:	bne	12cb4 <error@@Base+0x228>
   12c9c:	mov	r2, #1
   12ca0:	strb	r2, [r3]
   12ca4:	b	12ccc <error@@Base+0x240>
   12ca8:	mov	r1, r5
   12cac:	ldr	r0, [pc, #292]	; 12dd8 <error@@Base+0x34c>
   12cb0:	bl	12b18 <error@@Base+0x8c>
   12cb4:	mov	r1, r5
   12cb8:	ldr	r0, [pc, #284]	; 12ddc <error@@Base+0x350>
   12cbc:	bl	12b18 <error@@Base+0x8c>
   12cc0:	add	r3, r7, #1
   12cc4:	str	r5, [sl, r7, lsl #2]
   12cc8:	sxth	r7, r3
   12ccc:	add	r4, r4, #1
   12cd0:	sxth	r4, r4
   12cd4:	str	r4, [sp, #4]
   12cd8:	ldr	r3, [sp, #8]
   12cdc:	ldr	r8, [r3]
   12ce0:	cmp	r4, r8
   12ce4:	bge	12c50 <error@@Base+0x1c4>
   12ce8:	lsl	fp, r4, #2
   12cec:	ldr	r5, [sl, r4, lsl #2]
   12cf0:	ldrb	r3, [r5]
   12cf4:	cmp	r3, #45	; 0x2d
   12cf8:	bne	12cc0 <error@@Base+0x234>
   12cfc:	ldrb	r9, [r5, #1]
   12d00:	cmp	r9, #0
   12d04:	beq	12cc0 <error@@Base+0x234>
   12d08:	mov	r0, r5
   12d0c:	bl	10ae4 <strlen@plt>
   12d10:	mov	r2, r0
   12d14:	mov	r1, r5
   12d18:	ldr	r0, [pc, #192]	; 12de0 <error@@Base+0x354>
   12d1c:	bl	10b50 <strncmp@plt>
   12d20:	cmp	r0, #0
   12d24:	beq	12c68 <error@@Base+0x1dc>
   12d28:	ldr	r3, [sp, #4]
   12d2c:	add	r3, r3, #1
   12d30:	cmp	r3, r8
   12d34:	addlt	r3, sl, fp
   12d38:	ldrlt	r0, [r3, #4]
   12d3c:	movge	r0, #0
   12d40:	cmp	r6, #0
   12d44:	beq	12ca8 <error@@Base+0x21c>
   12d48:	ldrb	r2, [r6]
   12d4c:	cmp	r9, r2
   12d50:	cmpne	r2, #0
   12d54:	beq	12c70 <error@@Base+0x1e4>
   12d58:	mov	r3, #0
   12d5c:	add	r3, r3, #1
   12d60:	sxth	r3, r3
   12d64:	add	r2, r3, r3, lsl #1
   12d68:	add	r1, r6, r2, lsl #2
   12d6c:	ldrb	r2, [r6, r2, lsl #2]
   12d70:	cmp	r9, r2
   12d74:	cmpne	r2, #0
   12d78:	bne	12d5c <error@@Base+0x2d0>
   12d7c:	cmp	r2, #0
   12d80:	beq	12ca8 <error@@Base+0x21c>
   12d84:	ldr	r3, [r1, #4]
   12d88:	cmp	r3, #0
   12d8c:	beq	12c78 <error@@Base+0x1ec>
   12d90:	ldrb	r2, [r5, #2]
   12d94:	cmp	r2, #0
   12d98:	cmpeq	r0, #0
   12d9c:	beq	12c78 <error@@Base+0x1ec>
   12da0:	ldr	r1, [r3]
   12da4:	cmp	r1, #0
   12da8:	bne	12cb4 <error@@Base+0x228>
   12dac:	cmp	r2, #0
   12db0:	addne	r0, r5, #2
   12db4:	str	r0, [r3]
   12db8:	ldrb	r3, [r5, #2]
   12dbc:	cmp	r3, #0
   12dc0:	addeq	r4, r4, #1
   12dc4:	sxtheq	r4, r4
   12dc8:	b	12ccc <error@@Base+0x240>
   12dcc:	andeq	r0, r3, r0, asr #7
   12dd0:	andeq	r2, r1, r4, ror #21
   12dd4:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   12dd8:	andeq	r7, r1, r4, asr #1
   12ddc:	ldrdeq	r7, [r1], -r4
   12de0:	strheq	r7, [r1], -ip
   12de4:	push	{lr}		; (str lr, [sp, #-4]!)
   12de8:	sub	sp, sp, #12
   12dec:	ldr	r3, [pc, #36]	; 12e18 <error@@Base+0x38c>
   12df0:	ldr	r2, [r3]
   12df4:	ldr	r3, [pc, #32]	; 12e1c <error@@Base+0x390>
   12df8:	ldr	ip, [r3]
   12dfc:	str	r1, [sp]
   12e00:	mov	r3, r0
   12e04:	ldr	r1, [pc, #20]	; 12e20 <error@@Base+0x394>
   12e08:	mov	r0, ip
   12e0c:	bl	10af0 <fprintf@plt>
   12e10:	add	sp, sp, #12
   12e14:	pop	{pc}		; (ldr pc, [sp], #4)
   12e18:	andeq	r0, r3, r0, asr #7
   12e1c:	andeq	r8, r2, r0, ror #1
   12e20:	andeq	r7, r1, r0, lsl #1
   12e24:	push	{r4, r5, r6, lr}
   12e28:	mov	r4, r0
   12e2c:	mov	r5, r2
   12e30:	uxtb	r6, r1
   12e34:	mov	r1, #16
   12e38:	mov	r0, #1
   12e3c:	bl	12ac8 <error@@Base+0x3c>
   12e40:	mov	r1, r0
   12e44:	strb	r6, [r0, #8]
   12e48:	str	r5, [r0, #12]
   12e4c:	mov	r0, r4
   12e50:	bl	115a4 <__assert_fail@plt+0xa30>
   12e54:	pop	{r4, r5, r6, pc}
   12e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e5c:	sub	sp, sp, #116	; 0x74
   12e60:	str	r0, [sp]
   12e64:	mov	sl, r2
   12e68:	ldrb	r3, [r2]
   12e6c:	mov	r0, r1
   12e70:	adds	r2, r3, #0
   12e74:	movne	r2, #1
   12e78:	cmp	r1, #0
   12e7c:	movne	r2, #0
   12e80:	cmp	r2, #0
   12e84:	bne	12ee8 <error@@Base+0x45c>
   12e88:	ldr	r3, [sp]
   12e8c:	ldr	r3, [r3, #4]
   12e90:	str	r3, [sp, #4]
   12e94:	ldr	r1, [pc, #820]	; 131d0 <error@@Base+0x744>
   12e98:	bl	12b60 <error@@Base+0xd4>
   12e9c:	mov	r6, r0
   12ea0:	ldrb	r3, [sl]
   12ea4:	cmp	r3, #0
   12ea8:	bne	12ef4 <error@@Base+0x468>
   12eac:	ldrb	r8, [sl, #1]
   12eb0:	ldr	fp, [sl, #4]
   12eb4:	cmp	fp, #0
   12eb8:	moveq	fp, #94	; 0x5e
   12ebc:	mov	r0, r6
   12ec0:	bl	10b68 <getc@plt>
   12ec4:	cmn	r0, #1
   12ec8:	beq	13034 <error@@Base+0x5a8>
   12ecc:	ldr	r3, [pc, #768]	; 131d4 <error@@Base+0x748>
   12ed0:	ldrsb	r4, [r3, r0]
   12ed4:	cmp	r4, #0
   12ed8:	ble	12f8c <error@@Base+0x500>
   12edc:	mov	r7, #0
   12ee0:	mov	r9, r3
   12ee4:	b	12fd4 <error@@Base+0x548>
   12ee8:	ldr	r1, [pc, #744]	; 131d8 <error@@Base+0x74c>
   12eec:	ldr	r0, [pc, #744]	; 131dc <error@@Base+0x750>
   12ef0:	bl	12b18 <error@@Base+0x8c>
   12ef4:	mov	r2, r0
   12ef8:	mov	r1, #99	; 0x63
   12efc:	add	r0, sp, #12
   12f00:	bl	10a18 <fgets@plt>
   12f04:	cmp	r0, #0
   12f08:	beq	12f24 <error@@Base+0x498>
   12f0c:	mov	r2, #51	; 0x33
   12f10:	ldr	r1, [pc, #712]	; 131e0 <error@@Base+0x754>
   12f14:	add	r0, sp, #12
   12f18:	bl	10b50 <strncmp@plt>
   12f1c:	cmp	r0, #0
   12f20:	beq	12f38 <error@@Base+0x4ac>
   12f24:	mov	r0, r6
   12f28:	bl	10a3c <rewind@plt>
   12f2c:	mov	r3, #0
   12f30:	strb	r3, [sl, #11]
   12f34:	b	12eac <error@@Base+0x420>
   12f38:	mov	r4, #0
   12f3c:	mov	r5, #99	; 0x63
   12f40:	ldr	r7, [pc, #668]	; 131e4 <error@@Base+0x758>
   12f44:	mov	r2, r6
   12f48:	mov	r1, r5
   12f4c:	add	r0, sp, #12
   12f50:	bl	10a18 <fgets@plt>
   12f54:	cmp	r0, #0
   12f58:	beq	12f84 <error@@Base+0x4f8>
   12f5c:	mov	r1, r7
   12f60:	add	r0, sp, #12
   12f64:	bl	109dc <strcmp@plt>
   12f68:	cmp	r0, #0
   12f6c:	addeq	r4, r4, #1
   12f70:	sxtheq	r4, r4
   12f74:	cmp	r4, #1
   12f78:	ble	12f44 <error@@Base+0x4b8>
   12f7c:	mov	r3, #1
   12f80:	b	12f30 <error@@Base+0x4a4>
   12f84:	mov	r3, #1
   12f88:	b	12f30 <error@@Base+0x4a4>
   12f8c:	ldr	r0, [pc, #596]	; 131e8 <error@@Base+0x75c>
   12f90:	bl	12a8c <error@@Base>
   12f94:	ldr	r0, [pc, #592]	; 131ec <error@@Base+0x760>
   12f98:	bl	12a8c <error@@Base>
   12f9c:	bl	10b38 <utf8proc_errmsg@plt>
   12fa0:	bl	12a8c <error@@Base>
   12fa4:	ldr	r2, [sp, #12]
   12fa8:	mov	r1, r7
   12fac:	ldr	r0, [sp]
   12fb0:	bl	12e24 <error@@Base+0x398>
   12fb4:	mov	r7, #0
   12fb8:	mov	r0, r6
   12fbc:	bl	10b68 <getc@plt>
   12fc0:	cmn	r0, #1
   12fc4:	beq	13034 <error@@Base+0x5a8>
   12fc8:	ldrsb	r4, [r9, r0]
   12fcc:	cmp	r4, #0
   12fd0:	ble	12f8c <error@@Base+0x500>
   12fd4:	strb	r0, [sp, #8]
   12fd8:	cmp	r4, #1
   12fdc:	ble	13000 <error@@Base+0x574>
   12fe0:	sub	r5, r4, #1
   12fe4:	mov	r3, r6
   12fe8:	mov	r2, r5
   12fec:	mov	r1, #1
   12ff0:	add	r0, sp, #9
   12ff4:	bl	10a78 <fread@plt>
   12ff8:	cmp	r5, r0
   12ffc:	bne	12f94 <error@@Base+0x508>
   13000:	add	r2, sp, #12
   13004:	mov	r1, #4
   13008:	add	r0, sp, #8
   1300c:	bl	10a84 <utf8proc_iterate@plt>
   13010:	cmp	r0, r4
   13014:	bne	12f9c <error@@Base+0x510>
   13018:	cmp	r8, #0
   1301c:	beq	12fa4 <error@@Base+0x518>
   13020:	ldr	r3, [sp, #12]
   13024:	cmp	fp, r3
   13028:	moveq	r7, #1
   1302c:	bne	12fa4 <error@@Base+0x518>
   13030:	b	12fb8 <error@@Base+0x52c>
   13034:	mov	r0, r6
   13038:	bl	12958 <__assert_fail@plt+0x1de4>
   1303c:	ldrb	r3, [sl, #9]
   13040:	cmp	r3, #0
   13044:	beq	13188 <error@@Base+0x6fc>
   13048:	ldr	r3, [sp, #4]
   1304c:	cmp	r3, #0
   13050:	ldrne	r6, [r3, #4]
   13054:	ldreq	r3, [sp]
   13058:	ldreq	r6, [r3]
   1305c:	cmp	r6, #0
   13060:	beq	13188 <error@@Base+0x6fc>
   13064:	mov	r5, r6
   13068:	mov	r7, #32
   1306c:	mov	r9, #1
   13070:	mov	r8, #0
   13074:	b	130a8 <error@@Base+0x61c>
   13078:	cmp	r4, #160	; 0xa0
   1307c:	beq	13098 <error@@Base+0x60c>
   13080:	ldrsh	r3, [r0]
   13084:	sub	r3, r3, #23
   13088:	cmp	r3, #2
   1308c:	bhi	1309c <error@@Base+0x610>
   13090:	mov	r3, r9
   13094:	b	130d8 <error@@Base+0x64c>
   13098:	str	r7, [r5, #12]
   1309c:	ldr	r5, [r5, #4]
   130a0:	cmp	r5, #0
   130a4:	beq	1311c <error@@Base+0x690>
   130a8:	ldr	r4, [r5, #12]
   130ac:	mov	r0, r4
   130b0:	bl	10a0c <utf8proc_get_property@plt>
   130b4:	cmp	r4, #13
   130b8:	bhi	13078 <error@@Base+0x5ec>
   130bc:	cmp	r4, #11
   130c0:	bcs	13098 <error@@Base+0x60c>
   130c4:	cmp	r4, #9
   130c8:	beq	13098 <error@@Base+0x60c>
   130cc:	cmp	r4, #10
   130d0:	moveq	r3, r8
   130d4:	bne	13080 <error@@Base+0x5f4>
   130d8:	cmp	r3, #0
   130dc:	beq	1309c <error@@Base+0x610>
   130e0:	b	13098 <error@@Base+0x60c>
   130e4:	eor	r2, r5, #1
   130e8:	cmp	r4, #0
   130ec:	orreq	r2, r2, #1
   130f0:	cmp	r2, #0
   130f4:	bne	13144 <error@@Base+0x6b8>
   130f8:	ldr	r2, [r4, #12]
   130fc:	cmp	r2, #32
   13100:	cmpne	r2, #10
   13104:	beq	13144 <error@@Base+0x6b8>
   13108:	subs	r5, r3, #10
   1310c:	movne	r5, #1
   13110:	mov	r6, r4
   13114:	cmp	r4, #0
   13118:	beq	13188 <error@@Base+0x6fc>
   1311c:	ldr	r4, [r6, #4]
   13120:	ldr	r3, [r6, #12]
   13124:	cmp	r3, #32
   13128:	beq	130e4 <error@@Base+0x658>
   1312c:	eor	r2, r5, #1
   13130:	cmp	r3, #10
   13134:	movne	r2, #0
   13138:	andeq	r2, r2, #1
   1313c:	cmp	r2, #0
   13140:	beq	13108 <error@@Base+0x67c>
   13144:	cmp	r4, #0
   13148:	moveq	r3, #0
   1314c:	andne	r3, r5, #1
   13150:	cmp	r3, #0
   13154:	beq	13170 <error@@Base+0x6e4>
   13158:	ldr	r3, [r4, #12]
   1315c:	cmp	r3, #32
   13160:	ldrbeq	r3, [r4, #8]
   13164:	ldrbeq	r2, [r6, #8]
   13168:	orreq	r3, r3, r2
   1316c:	strbeq	r3, [r4, #8]
   13170:	mov	r1, r6
   13174:	ldr	r0, [sp]
   13178:	bl	115e8 <__assert_fail@plt+0xa74>
   1317c:	mov	r0, r6
   13180:	bl	10a00 <free@plt>
   13184:	b	13110 <error@@Base+0x684>
   13188:	ldrb	r3, [sl, #10]
   1318c:	cmp	r3, #0
   13190:	beq	131c8 <error@@Base+0x73c>
   13194:	ldr	r3, [sp, #4]
   13198:	cmp	r3, #0
   1319c:	ldrne	r4, [r3, #4]
   131a0:	ldreq	r3, [sp]
   131a4:	ldreq	r4, [r3]
   131a8:	cmp	r4, #0
   131ac:	beq	131c8 <error@@Base+0x73c>
   131b0:	ldr	r0, [r4, #12]
   131b4:	bl	10a54 <utf8proc_tolower@plt>
   131b8:	str	r0, [r4, #12]
   131bc:	ldr	r4, [r4, #4]
   131c0:	cmp	r4, #0
   131c4:	bne	131b0 <error@@Base+0x724>
   131c8:	add	sp, sp, #116	; 0x74
   131cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d0:	andeq	r3, r1, r0, asr #20
   131d4:	andeq	r7, r2, r8, lsl #28
   131d8:	andeq	r7, r1, r8, ror #1
   131dc:	strdeq	r7, [r1], -r4
   131e0:	andeq	r7, r1, r4, lsl #2
   131e4:	andeq	r7, r1, ip, lsr r1
   131e8:	andeq	r7, r1, r4, ror r1
   131ec:	andeq	r7, r1, ip, lsl #3
   131f0:	push	{r4, lr}
   131f4:	bl	10a24 <utf8proc_encode_char@plt>
   131f8:	cmp	r0, #0
   131fc:	ble	13208 <error@@Base+0x77c>
   13200:	sxtb	r0, r0
   13204:	pop	{r4, pc}
   13208:	ldr	r0, [pc]	; 13210 <error@@Base+0x784>
   1320c:	bl	12a8c <error@@Base>
   13210:	andeq	r7, r1, r4, lsr #3
   13214:	push	{r4, r5, r6, r7, r8, lr}
   13218:	mov	r4, r1
   1321c:	mov	r6, r2
   13220:	uxtb	r0, r0
   13224:	uxtb	r7, r3
   13228:	cmp	r0, #0
   1322c:	moveq	r5, #0
   13230:	bne	13284 <error@@Base+0x7f8>
   13234:	cmp	r4, #10
   13238:	beq	13298 <error@@Base+0x80c>
   1323c:	mov	r0, r4
   13240:	bl	10a0c <utf8proc_get_property@plt>
   13244:	cmp	r4, #32
   13248:	beq	132b4 <error@@Base+0x828>
   1324c:	ldrsh	r3, [r0]
   13250:	cmp	r3, #1
   13254:	blt	13268 <error@@Base+0x7dc>
   13258:	cmp	r3, #22
   1325c:	ble	132b4 <error@@Base+0x828>
   13260:	cmp	r3, #29
   13264:	beq	132b4 <error@@Base+0x828>
   13268:	cmp	r4, #255	; 0xff
   1326c:	mov	r2, r4
   13270:	ldrls	r1, [pc, #136]	; 13300 <error@@Base+0x874>
   13274:	ldrhi	r1, [pc, #136]	; 13304 <error@@Base+0x878>
   13278:	add	r0, r6, r5
   1327c:	bl	10b2c <sprintf@plt>
   13280:	pop	{r4, r5, r6, r7, r8, pc}
   13284:	mov	r1, r2
   13288:	mov	r0, #94	; 0x5e
   1328c:	bl	131f0 <error@@Base+0x764>
   13290:	sxth	r5, r0
   13294:	b	13234 <error@@Base+0x7a8>
   13298:	ldr	r3, [pc, #104]	; 13308 <error@@Base+0x87c>
   1329c:	ldr	r1, [pc, #104]	; 1330c <error@@Base+0x880>
   132a0:	cmp	r7, #0
   132a4:	moveq	r1, r3
   132a8:	add	r0, r6, r5
   132ac:	bl	10b2c <sprintf@plt>
   132b0:	pop	{r4, r5, r6, r7, r8, pc}
   132b4:	mov	r0, r4
   132b8:	bl	10ad8 <utf8proc_category@plt>
   132bc:	sub	r0, r0, #6
   132c0:	cmp	r0, #2
   132c4:	bls	132e8 <error@@Base+0x85c>
   132c8:	add	r1, r6, r5
   132cc:	mov	r0, r4
   132d0:	bl	131f0 <error@@Base+0x764>
   132d4:	add	r0, r0, r5
   132d8:	sxth	r0, r0
   132dc:	mov	r3, #0
   132e0:	strb	r3, [r6, r0]
   132e4:	pop	{r4, r5, r6, r7, r8, pc}
   132e8:	add	r1, r6, r5
   132ec:	ldr	r0, [pc, #28]	; 13310 <error@@Base+0x884>
   132f0:	bl	131f0 <error@@Base+0x764>
   132f4:	add	r5, r0, r5
   132f8:	sxth	r5, r5
   132fc:	b	132c8 <error@@Base+0x83c>
   13300:	andeq	r7, r1, r4, asr #3
   13304:	andeq	r7, r1, ip, asr #3
   13308:	andeq	r3, r1, ip, asr #24
   1330c:			; <UNDEFINED> instruction: 0x000171bc
   13310:	andeq	r2, r0, ip, asr #11
   13314:	push	{r4, r5, r6, r7, lr}
   13318:	sub	sp, sp, #20
   1331c:	mov	r7, r0
   13320:	mov	r0, r1
   13324:	mov	r4, r2
   13328:	ldr	r1, [pc, #160]	; 133d0 <error@@Base+0x944>
   1332c:	bl	12b60 <error@@Base+0xd4>
   13330:	mov	r5, r0
   13334:	cmp	r4, #0
   13338:	beq	13384 <error@@Base+0x8f8>
   1333c:	mov	r3, r0
   13340:	mov	r2, #55	; 0x37
   13344:	mov	r1, #1
   13348:	ldr	r0, [pc, #132]	; 133d4 <error@@Base+0x948>
   1334c:	bl	10a6c <fwrite@plt>
   13350:	ldr	r6, [pc, #128]	; 133d8 <error@@Base+0x94c>
   13354:	mov	r3, r5
   13358:	mov	r2, #55	; 0x37
   1335c:	mov	r1, #1
   13360:	mov	r0, r6
   13364:	bl	10a6c <fwrite@plt>
   13368:	mov	r0, r5
   1336c:	blx	r4
   13370:	mov	r3, r5
   13374:	mov	r2, #55	; 0x37
   13378:	mov	r1, #1
   1337c:	mov	r0, r6
   13380:	bl	10a6c <fwrite@plt>
   13384:	ldr	r4, [r7]
   13388:	cmp	r4, #0
   1338c:	beq	133c0 <error@@Base+0x934>
   13390:	mov	r6, #0
   13394:	mov	r3, r6
   13398:	add	r2, sp, #4
   1339c:	ldr	r1, [r4, #12]
   133a0:	ldrb	r0, [r4, #8]
   133a4:	bl	13214 <error@@Base+0x788>
   133a8:	mov	r1, r5
   133ac:	add	r0, sp, #4
   133b0:	bl	10b44 <fputs@plt>
   133b4:	ldr	r4, [r4, #4]
   133b8:	cmp	r4, #0
   133bc:	bne	13394 <error@@Base+0x908>
   133c0:	mov	r0, r5
   133c4:	bl	12958 <__assert_fail@plt+0x1de4>
   133c8:	add	sp, sp, #20
   133cc:	pop	{r4, r5, r6, r7, pc}
   133d0:	andeq	r3, r1, ip, lsl ip
   133d4:	andeq	r7, r1, r4, lsl #2
   133d8:	andeq	r7, r1, ip, lsr r1
   133dc:	push	{r4, r5, r6, r7, r8, lr}
   133e0:	sub	sp, sp, #8
   133e4:	mov	r3, #0
   133e8:	str	r3, [sp, #4]
   133ec:	ldrb	r3, [r1]
   133f0:	cmp	r3, #0
   133f4:	beq	13444 <error@@Base+0x9b8>
   133f8:	mov	r6, r0
   133fc:	mov	r4, r1
   13400:	mvn	r5, #0
   13404:	mov	r7, #0
   13408:	add	r2, sp, #4
   1340c:	mov	r1, r5
   13410:	mov	r0, r4
   13414:	bl	10a84 <utf8proc_iterate@plt>
   13418:	subs	r8, r0, #0
   1341c:	ble	1344c <error@@Base+0x9c0>
   13420:	ldr	r2, [sp, #4]
   13424:	mov	r1, r7
   13428:	mov	r0, r6
   1342c:	bl	12e24 <error@@Base+0x398>
   13430:	ldrb	r3, [r4, r8]!
   13434:	cmp	r3, #0
   13438:	bne	13408 <error@@Base+0x97c>
   1343c:	mov	r0, #1
   13440:	b	13450 <error@@Base+0x9c4>
   13444:	mov	r0, #1
   13448:	b	13450 <error@@Base+0x9c4>
   1344c:	mov	r0, #0
   13450:	add	sp, sp, #8
   13454:	pop	{r4, r5, r6, r7, r8, pc}
   13458:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1345c:	mov	sl, r0
   13460:	mov	r9, r1
   13464:	ldr	r3, [pc, #300]	; 13598 <error@@Base+0xb0c>
   13468:	ldr	r3, [r3]
   1346c:	ldr	r8, [r3, r0, lsl #2]
   13470:	cmp	r0, r1
   13474:	movge	r3, r1
   13478:	movge	r4, r0
   1347c:	bge	1355c <error@@Base+0xad0>
   13480:	mov	r4, r0
   13484:	mov	r3, r1
   13488:	ldr	r6, [pc, #264]	; 13598 <error@@Base+0xb0c>
   1348c:	b	13510 <error@@Base+0xa84>
   13490:	mov	r5, r3
   13494:	cmp	r4, r5
   13498:	beq	13554 <error@@Base+0xac8>
   1349c:	ldr	r2, [r6]
   134a0:	add	r3, r4, #1
   134a4:	lsl	r7, r4, #2
   134a8:	ldr	r1, [r2, r5, lsl #2]
   134ac:	str	r1, [r2, r4, lsl #2]
   134b0:	cmp	r3, r5
   134b4:	movge	r4, r3
   134b8:	bge	134f0 <error@@Base+0xa64>
   134bc:	add	r7, r7, #4
   134c0:	mov	r4, r3
   134c4:	ldr	r2, [r6]
   134c8:	ldr	r3, [r6, #4]
   134cc:	ldr	r1, [r2, r7]
   134d0:	mov	r0, r8
   134d4:	blx	r3
   134d8:	cmp	r0, #0
   134dc:	ble	134f0 <error@@Base+0xa64>
   134e0:	add	r4, r4, #1
   134e4:	add	r7, r7, #4
   134e8:	cmp	r4, r5
   134ec:	blt	134c4 <error@@Base+0xa38>
   134f0:	cmp	r4, r5
   134f4:	beq	13558 <error@@Base+0xacc>
   134f8:	ldr	r2, [r6]
   134fc:	sub	r3, r5, #1
   13500:	ldr	r1, [r2, r4, lsl #2]
   13504:	str	r1, [r2, r5, lsl #2]
   13508:	cmp	r3, r4
   1350c:	ble	1355c <error@@Base+0xad0>
   13510:	cmp	r3, r4
   13514:	ble	13490 <error@@Base+0xa04>
   13518:	lsl	r7, r3, #2
   1351c:	mov	r5, r3
   13520:	ldr	r2, [r6]
   13524:	ldr	r3, [r6, #4]
   13528:	ldr	r1, [r2, r7]
   1352c:	mov	r0, r8
   13530:	blx	r3
   13534:	cmp	r0, #0
   13538:	bge	13494 <error@@Base+0xa08>
   1353c:	sub	r5, r5, #1
   13540:	sub	r7, r7, #4
   13544:	cmp	r5, r4
   13548:	bne	13520 <error@@Base+0xa94>
   1354c:	mov	r4, r5
   13550:	b	134f0 <error@@Base+0xa64>
   13554:	mov	r4, r5
   13558:	mov	r3, r4
   1355c:	ldr	r2, [pc, #52]	; 13598 <error@@Base+0xb0c>
   13560:	ldr	r2, [r2]
   13564:	str	r8, [r2, r3, lsl #2]
   13568:	sub	r1, r3, #1
   1356c:	cmp	sl, r1
   13570:	blt	1358c <error@@Base+0xb00>
   13574:	add	r0, r4, #1
   13578:	cmp	r9, r0
   1357c:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   13580:	mov	r1, r9
   13584:	bl	13458 <error@@Base+0x9cc>
   13588:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1358c:	mov	r0, sl
   13590:	bl	13458 <error@@Base+0x9cc>
   13594:	b	13574 <error@@Base+0xae8>
   13598:	strdeq	sl, [r2], -r8
   1359c:	cmp	r0, #1
   135a0:	bxle	lr
   135a4:	push	{r4, lr}
   135a8:	ldr	r3, [pc, #20]	; 135c4 <error@@Base+0xb38>
   135ac:	str	r1, [r3]
   135b0:	str	r2, [r3, #4]
   135b4:	sub	r1, r0, #1
   135b8:	mov	r0, #0
   135bc:	bl	13458 <error@@Base+0x9cc>
   135c0:	pop	{r4, pc}
   135c4:	strdeq	sl, [r2], -r8
   135c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   135cc:	mov	r7, r0
   135d0:	ldr	r6, [pc, #72]	; 13620 <error@@Base+0xb94>
   135d4:	ldr	r5, [pc, #72]	; 13624 <error@@Base+0xb98>
   135d8:	add	r6, pc, r6
   135dc:	add	r5, pc, r5
   135e0:	sub	r6, r6, r5
   135e4:	mov	r8, r1
   135e8:	mov	r9, r2
   135ec:	bl	109b0 <calloc@plt-0x20>
   135f0:	asrs	r6, r6, #2
   135f4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   135f8:	mov	r4, #0
   135fc:	add	r4, r4, #1
   13600:	ldr	r3, [r5], #4
   13604:	mov	r2, r9
   13608:	mov	r1, r8
   1360c:	mov	r0, r7
   13610:	blx	r3
   13614:	cmp	r6, r4
   13618:	bne	135fc <error@@Base+0xb70>
   1361c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13620:	andeq	r4, r1, r0, lsr #16
   13624:	andeq	r4, r1, r8, lsl r8
   13628:	bx	lr

Disassembly of section .fini:

0001362c <.fini>:
   1362c:	push	{r3, lr}
   13630:	pop	{r3, pc}
